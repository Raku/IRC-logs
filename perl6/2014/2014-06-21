[00:03] *** pdcawley left
[00:03] <dalek> doc: 99de2fe | Mouq++ | lib/Language/quoting.pod:

[00:03] <dalek> doc: Some additions to quoting.pod

[00:03] <dalek> doc: review: https://github.com/perl6/doc/commit/99de2fe82b

[00:04] <xenoterracide> any chance anyone has made rakudo build on travis and then got it to run the test suite of their module?

[00:04] <xenoterracide> with prove

[00:09] *** uniejo joined
[00:16] *** uniejo left
[00:21] *** jnap left
[00:21] *** uniejo joined
[00:23] *** jnap joined
[00:25] <xenoterracide> is there a good way to change the dark blue color that the debugger uses?

[00:27] <flussence> I know that problem, one of the first things I do on a new computer is `echo 'URxvt.color4: #4242A6' >> ~/.Xresources` :)

[00:27] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=4242

[00:28] <flussence> .oO( -EDUMBBOT )

[00:30] *** telex left
[00:32] <sergot> m: my $i = IO::Socket::INET( :host('http://filip.sergot.pl'), :port(80), :timeout(1));

[00:32] <camelia> rakudo-moar 847bd5: OUTPUT«Cannot coerce to IO::Socket::INET with named parameters␤  in block  at /tmp/REOhYN6pKQ:1␤␤»

[00:32] *** telex joined
[00:33] <sergot> m: my $conn = IO::Socket::INET.new( host => 'http://filip.sergot/index.html', port => 80, timeout => 1 );

[00:33] <camelia> rakudo-moar 847bd5: OUTPUT«Failed to resolve host name␤  in method initialize at src/gen/m-CORE.setting:19910␤  in method new at src/gen/m-CORE.setting:19894␤  in block  at /tmp/0Fn6mSLbaU:1␤␤»

[00:33] <sergot> m: my $conn = IO::Socket::INET.new( host => 'http://filip.sergot', port => 80, timeout => 1 );

[00:33] <camelia> rakudo-moar 847bd5: OUTPUT«Failed to resolve host name␤  in method initialize at src/gen/m-CORE.setting:19910␤  in method new at src/gen/m-CORE.setting:19894␤  in block  at /tmp/byez3EZc1s:1␤␤»

[00:33] <sergot> m: my $conn = IO::Socket::INET.new( host => 'http://filip.sergotpl/index.html', port => 80, timeout => 1 );

[00:33] <camelia> rakudo-moar 847bd5: OUTPUT«Failed to resolve host name␤  in method initialize at src/gen/m-CORE.setting:19910␤  in method new at src/gen/m-CORE.setting:19894␤  in block  at /tmp/f1bOL9dUGW:1␤␤»

[00:33] <sergot> agrh

[00:33] <sergot> m: my $conn = IO::Socket::INET.new( host => 'http://filip.sergot.pl/index.html', port => 80, timeout => 1 );

[00:33] <camelia> rakudo-moar 847bd5: OUTPUT«Failed to resolve host name␤  in method initialize at src/gen/m-CORE.setting:19910␤  in method new at src/gen/m-CORE.setting:19894␤  in block  at /tmp/h1y3GeivRj:1␤␤»

[00:34] <xenoterracide> flussence: that wouldn't work for me, but gave me the idea to look through konsole's settings

[00:34] <sergot> m: my $conn = IO::Socket::INET.new( host => 'filip.sergot.pl', port => 80, timeout => 1 );

[00:34] <camelia> rakudo-moar 847bd5: ( no output )

[00:35] *** Ben_Goldberg joined
[00:35] *** BenGoldberg left
[00:35] *** Ben_Goldberg is now known as BenGoldberg

[00:35] <sergot> m: my $conn = IO::Socket::INET.new( host => 'filip.sergot.pl', port => 80, timeout => 1 ); $conn.send("GET / HTTP/1.1\r\nHost: filip.sergot.pl\r\n\r\n"); say $conn.recv().encode('utf8').bytes;

[00:35] <camelia> rakudo-moar 847bd5: OUTPUT«4380␤»

[00:35] <sergot> m: my $conn = IO::Socket::INET.new( host => 'filip.sergot.pl', port => 80, timeout => 1 ); $conn.send("GET / HTTP/1.1\r\nHost: filip.sergot.pl\r\n\r\n"); say $conn.recv().encode('utf8').bytes;

[00:35] <camelia> rakudo-moar 847bd5: OUTPUT«4380␤»

[00:36] <sergot> m: my $conn = IO::Socket::INET.new( host => 'filip.sergot.pl', port => 80, timeout => 1 ); $conn.send("GET / HTTP/1.1\r\nHost: filip.sergot.pl\r\n\r\n"); say $conn.lines.join("\n").encode('utf8').bytes;

[00:36] <camelia> rakudo-moar 847bd5: OUTPUT«12292␤»

[00:36] <sergot> what's wrong with recv()?

[00:39] <sergot> m: my $conn = IO::Socket::INET.new( host => 'filip.sergot.pl', port => 80, timeout => 1 ); $conn.send("GET / HTTP/1.1\r\nHost: filip.sergot.pl\r\n\r\n"); say $conn.read().encode('utf8').bytes;

[00:39] <camelia> rakudo-moar 847bd5: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in method read at src/gen/m-CORE.setting:19793␤  in block  at /tmp/W2xHXNPa8h:1␤␤»

[00:40] <sergot> m: my $conn = IO::Socket::INET.new( host => 'filip.sergot.pl', port => 80, timeout => 1 ); $conn.send("GET / HTTP/1.1\r\nHost: filip.sergot.pl\r\n\r\n"); say $conn.read(12292).encode('utf8').bytes;

[00:40] <camelia> rakudo-moar 847bd5: OUTPUT«No such method 'encode' for invocant of type 'Buf[uint8]'␤  in block  at /tmp/LtsiQ9Ed1n:1␤␤»

[00:40] <sergot> nvm, still something is wrong with recv() :)

[00:40] <BenGoldberg> m: my $conn = IO::Socket::INET.new( host => 'filip.sergot.pl', port => 80, timeout => 1 ); $conn.send("GET / HTTP/1.1\r\nHost: filip.sergot.pl\r\n\r\n"); say $conn.read(99999).length

[00:40] <camelia> rakudo-moar 847bd5: OUTPUT«No such method 'length' for invocant of type 'Buf[uint8]'␤Did you mean 'elems', 'chars', 'graphs' or 'codes'?␤  in block  at /tmp/YOh0VsgvRI:1␤␤»

[00:41] <BenGoldberg> m: my $conn = IO::Socket::INET.new( host => 'filip.sergot.pl', port => 80, timeout => 1 ); $conn.send("GET / HTTP/1.1\r\nHost: filip.sergot.pl\r\n\r\n"); say $conn.read(99999).chars

[00:41] <camelia> rakudo-moar 847bd5: OUTPUT«Cannot use a Buf as a string, but you called the chars method on it␤  in method chars at src/gen/m-CORE.setting:5312␤  in block  at /tmp/lrrvKBlLBH:1␤␤»

[00:41] <BenGoldberg> m: my $conn = IO::Socket::INET.new( host => 'filip.sergot.pl', port => 80, timeout => 1 ); $conn.send("GET / HTTP/1.1\r\nHost: filip.sergot.pl\r\n\r\n"); say $conn.read(99999).elems

[00:41] <camelia> rakudo-moar 847bd5: OUTPUT«12293␤»

[00:41] *** jnap1 joined
[00:41] *** jnap1 left
[00:41] *** jnap left
[00:42] *** BenGoldberg left
[00:42] *** BenGoldberg joined
[00:42] <xenoterracide> http://privatepaste.com/9b74ef7f65 what is the difference in parameters here that one of the calls doesn't see enough?

[00:53] *** thou left
[00:53] <flussence> m: my class Foo { method add_annotation($a, $b) { say 'ok' } }; given Foo.new { .add_annotation('table', True); .add_annotation(table => True); }

[00:53] *** jack_rabbit_ joined
[00:53] <camelia> rakudo-moar 847bd5: OUTPUT«ok␤Not enough positional parameters passed; got 1 but expected 3␤  in method add_annotation at /tmp/nf1FV8zAuB:1␤  in block  at /tmp/nf1FV8zAuB:1␤␤»

[00:54] <flussence> => isn't the same thing as , — inside a signature it means one named param, not two positional params.

[00:54] <flussence> (I don't quite understand where it got the numbers 2 and 4 from instead of 1 and 3 though)

[01:00] *** hoverboard left
[01:08] *** jack_rabbit_ left
[01:15] *** Su-Shee_ joined
[01:18] *** Su-Shee left
[01:20] *** klapperl joined
[01:21] <Mouq> With a .^ call, the class is passed as the first parameter; that's why it says 2 and 4

[01:21] <Mouq> xenoterracide: => is only a "fat comma" in p5. In p6, it creates an actual pair object

[01:22] <xenoterracide> Mouq: that's what I thought

[01:23] *** klapperl_ left
[01:23] <Mouq> xenoterracide: If you want to pass the pair directly, do add_annotation( (table => True) ) or  ...( (:table) )

[01:24] <Mouq> xenoterracide: The other way to do it is with a slurpy hash (*%params) in the signature

[01:24] <xenoterracide> Mouq: I wonder if all that works in nqp, run into a few things that don't, really don't know what sig I want yet though

[01:25] <xenoterracide> gotta write the tests to find the implementation

[01:26] <Mouq> xenoterracide: I understand :) AFAIK, NQP uses the same sort of thing

[01:33] *** FROGGS_ joined
[01:37] *** FROGGS left
[01:37] <dalek> doc: e3f77d9 | Kamil++ | lib/Language/classtut.pod:

[01:37] <dalek> doc: Added class attributes

[01:37] <dalek> doc: review: https://github.com/perl6/doc/commit/e3f77d97ef

[01:37] <dalek> doc: 78301f9 | (Alexander Moquin)++ | lib/Language/classtut.pod:

[01:37] <dalek> doc: Merge pull request #21 from teodozjan/master

[01:37] <dalek> doc: 

[01:37] <dalek> doc: Added class attributes

[01:37] <dalek> doc: review: https://github.com/perl6/doc/commit/78301f945b

[01:39] *** xdoctor left
[01:43] *** kurahaupo joined
[01:44] <xenoterracide> Mouq: is there nothing like state? also can we please not document evil singleton pattern?  people might think it's a good idea

[01:48] <Mouq> xenoterracide: We have state $var

[01:48] <Mouq> xenoterracide: Feel free to edit it

[01:48] <Mouq> xenoterracide: The language could use some editorializing, I'm just working on other stuff ATM

[01:48] <xenoterracide> I'm trying to think of a good example for class level variables, but I honestly have the suggestion, don't use them unless you have a very good reason

[01:49] <Mouq> :)

[01:49] <Mouq> Magic numbers?

[01:51] <Mouq> Lexically scoped things are often used for, e.g., private subs and classes that methods in the class share

[01:55] <xenoterracide> Mouq: well lexically scoped to the class..

[01:55] <xenoterracide> magic maybe

[01:55] *** flussence left
[01:56] <xenoterracide> Mouq: oh yeah lexically scoped private methods make sense

[01:56] <xenoterracide> Mouq: mostly I see class level variables used for things like strings that don't change

[01:57] <xenoterracide> I don't know if Moar is like the JVM and makes strings basically immutable flyweights

[01:57] *** flussence joined
[01:58] <xenoterracide> which fundamentally means that making strings static like that is a good way to ensure memory is never freed

[01:59] <xenoterracide> and most of the other kinds of constants could usually be restricted to a single method (hense state making sense)

[02:00] <Mouq> xenoterracide: I don't know much moar than you do about the internals of the VM

[02:03] <xenoterracide> Mouq: yeah I figure, would have to ask jnthn or someone about those kinds of optimizations

[02:05] <xenoterracide> Mouq: what about things like $VERSION?

[02:05] <Mouq> xenoterracide: There is a constants table in Rakudo, as I recall

[02:06] <Mouq> m: $*PERL.version.say

[02:06] <camelia> rakudo-moar 847bd5: OUTPUT«vunknown␤»

[02:06] <Mouq> heh. What about them?

[02:07] <Mouq> m: $*VM.version.say

[02:07] <camelia> rakudo-moar 847bd5: OUTPUT«v2014.6␤»

[02:07] <Mouq> m: $*VM.perl.say

[02:07] <camelia> rakudo-moar 847bd5: OUTPUT«VM.new(config => {"ccout" => "-o ", "dclib" => "3rdparty/dyncall/dyncall/libdyncall_s.a", "syslibs[0]" => "m", "moardll" => "libmoar.so", "staticlib" => "", "ldoptiflags" => "-O1 -DNDEBUG", "dcbobjects" => "", "exe" => "", "laoobjects" => "", "ldshared" =>…»

[02:08] <Mouq> m: $*PERL.compiler.version.say

[02:08] <camelia> rakudo-moar 847bd5: OUTPUT«v2014.6.7.g.847.bd.58␤»

[02:09] <xenoterracide> Mouq: well I was thinking more about module versions like CPAN things have, don't know that they're used in practice, but it's one of the few class level variables I can think of that can be useful

[02:09] <xenoterracide> though it's also usually visible to the outside

[02:10] <xenoterracide> brb new kernel

[02:10] *** xenoterracide left
[02:20] *** xenoterracide joined
[02:20] <xenoterracide> back

[02:20] *** rindolf joined
[02:25] *** jakesyl joined
[02:25] <Mouq> xenoterracide: Ahh, ok. In Perl 6, it's supposed to be more built-in, though not quite implemented yet:

[02:25] *** jakesyl left
[02:25] *** jakesyl joined
[02:25] <Mouq> m: class Xyz:ver<4.2.3> { ... }

[02:25] <camelia> rakudo-moar 847bd5: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/K0Ei40_A7S␤The following packages were stubbed but not defined:␤    Xyz␤at /tmp/K0Ei40_A7S:1␤------> [32mclass Xyz:ver<4.2.3> { ... }[33m⏏[31m<EOL>[0m␤    expecting any of:␤       …»

[02:25] <Mouq> m: class Xyz:ver<4.2.3> { 1 };

[02:25] <camelia> rakudo-moar 847bd5: OUTPUT«WARNINGS:␤Useless use of constant integer 1 in sink context (line 1)␤»

[02:26] <jakesyl> Hey, I'd hate to get in the middle of this debug, but me and my team are considering using perl 6 for a large scale, cloud based web application so my questions are:

[02:27] <jakesyl> 1. is it stable, and 2. integration with haskell

[02:28] <Mouq> jakesyl: As far as I am aware, 1. Not quite, 2. Not that I know of

[02:28] <xenoterracide> jakesyl: 1. probably not enough for production, 2. are you planning on writing it? pugs not withstanding

[02:29] <xenoterracide> 3. how much of your application infrastructure are you willing to write? 

[02:29] <Mouq> jakesyl: Perl 5 may be more what your looking for

[02:29] <jakesyl> okay thanks guys!

[02:30] *** jakesyl left
[02:30] <Mouq> jakesyl: Considering its substantial stability and libraries for large scale apps

[02:30] <Mouq> \o

[02:30] <Mouq> .oO( One day... 1. Yes )

[02:30] <Mouq> :)

[02:30] <Mouq> Christmas, anyone? :P

[02:31] <xenoterracide> Mouq: yeah I hope though even though I think core is stablish enough to get started, the "cpan6" libraries (last I checked) were no where near what would be neaded

[02:32] <xenoterracide> I think once I can use perl6 objects in java and someone has documented that I may try writing a perl6 module for netbeans

[02:34] <Mouq> xenoterracide: Well, use foo::bar:from<java>, but I've never been able to figure out how to call methods on the objects after that :/

[02:34] <Mouq> xenoterracide: Oh, I got it backwards

[02:36] *** noganex_ joined
[02:36] <xenoterracide>         $type.HOW.add_annotation( $type.HOW, 'entity', True );

[02:36] <xenoterracide>         $type.^add_annotation( 'entity', True );

[02:36] <xenoterracide> what's the difference between those

[02:36] <Mouq> I believe the outstanding NYIs, from TimToady's perspective, are LoL array access, sized native arrays, and NFG

[02:37] <Mouq> Nothing, I don't think, except that $type.HOW should probably be $type.WHAT

[02:37] <xenoterracide> Cannot invoke this object (REPR: Null, cs = 0) the 2nd' gives me this error

[02:37] <xenoterracide> :/

[02:37] <xenoterracide> the first does what I want

[02:37] <Mouq> Huh

[02:38] *** noganex left
[02:38] <xenoterracide> too bad the evalers can't run my topic branch

[02:39] <xenoterracide> interestingly though $type.^annotions works

[02:39] <Mouq> See, I don't see how the first one works, because you're passing the wrong object to .add_annotation

[02:39] <Mouq> If you want .^add_annotation to work

[02:40] <xenoterracide> hmm

[02:40] <xenoterracide> why would it be the wrong object? that'd be a copy of $self right?

[02:40] <xenoterracide> perhaps my implementation has ID10T problems

[02:41] <Mouq> Well, yeah, but the normal case is that the first thing passed is the .WHAT of the object being called with .HOW

[02:41] <xenoterracide> hmm

[02:41] <Mouq> m: say "abcd".HOW.methods("abcd".WHAT)

[02:41] <camelia> rakudo-moar 847bd5: OUTPUT«BUILD Int Num chomp chop substr pred succ match ords lines samecase samespace trim-leading trim-trailing trim words encode wordcase trans indent codes path unival univals WHICH Bool Str Stringy DUMP ACCEPTS Numeric gist perl comb subst split␤»

[02:41] <Mouq> m: say "abcd".HOW.methods("abcd".HOW)

[02:41] <camelia> rakudo-moar 847bd5: OUTPUT«BUILD Int Num chomp chop substr pred succ match ords lines samecase samespace trim-leading trim-trailing trim words encode wordcase trans indent codes path unival univals WHICH Bool Str Stringy DUMP ACCEPTS Numeric gist perl comb subst split␤»

[02:41] <Mouq> hmmm indeed...

[02:42] <Mouq> m: say "abcd".HOW.methods(123)

[02:42] <camelia> rakudo-moar 847bd5: OUTPUT«BUILD Int Num chomp chop substr pred succ match ords lines samecase samespace trim-leading trim-trailing trim words encode wordcase trans indent codes path unival univals WHICH Bool Str Stringy DUMP ACCEPTS Numeric gist perl comb subst split␤»

[02:42] <Mouq> Weeeird

[02:43] <xenoterracide> in the debugger I just got that same error calling $type

[02:44] <Mouq> Well, I clearly don't have a clue what I'm talking about '<

[02:45] <xenoterracide> heh

[02:45] <xenoterracide> https://github.com/xenoterracide/p6-annotations

[02:45] <xenoterracide> seems to me like $type isn't initialized to what it's supposed to be or somethin

[02:46] <xenoterracide> :/

[02:46] <xenoterracide> think it says $type is null

[02:47] <xenoterracide> wtf

[02:52] <xenoterracide> so why is trait_mod giving me a null for the fist argument

[02:52] <xenoterracide> instead of the actual type I hung it fof

[02:52] <xenoterracide> off*

[02:55] <xenoterracide> m: multi sub trait_mod:<is>( Mu:U $type, :$entity! ) { say $type } class Foo is entity {}

[02:55] <camelia> rakudo-moar 847bd5: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Af8FZ87cJr␤Two terms in a row␤at /tmp/Af8FZ87cJr:1␤------> [32m( Mu:U $type, :$entity! ) { say $type } [33m⏏[31mclass Foo is entity {}[0m␤    expecting any of:␤        postfix␤    …»

[02:55] <xenoterracide>  m: multi sub trait_mod:<is>( Mu:U $type, :$entity! ) { say $type }; class Foo is entity {}

[02:55] <camelia> rakudo-moar 847bd5: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Og_yTq3IjV␤Cannot invoke this object (REPR: Null, cs = 0)␤at /tmp/Og_yTq3IjV:1␤------> ␤»

[02:56] <xenoterracide> p: multi sub trait_mod:<is>( Mu:U $type, :$entity! ) { say $type }; class Foo is entity {}

[02:56] <camelia> rakudo-parrot 847bd5: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/XpESU5xSLC␤Method 'gist' not found for invocant of class 'Foo'␤at /tmp/XpESU5xSLC:1␤------> ␤»

[02:56] <xenoterracide> p: multi sub trait_mod:<is>( Mu:U $type, :$entity! ) { say $type.WHAT }; class Foo is entity {}

[02:57] <camelia> rakudo-parrot 847bd5: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/PtI7ccjFpd␤Method 'gist' not found for invocant of class 'Foo'␤at /tmp/PtI7ccjFpd:1␤------> ␤»

[02:57] <xenoterracide> p: multi sub trait_mod:<is>( Mu:U $type, :$entity! ) { $type.DUMP}; class Foo is entity {}

[02:57] <camelia> rakudo-parrot 847bd5: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/0aIID3Md5n␤Method 'DUMP' not found for invocant of class 'Foo'␤at /tmp/0aIID3Md5n:1␤------> ␤»

[02:58] <xenoterracide> outside of my obviously not knowing how to print type, I think maybe I hit a bug in moar

[02:58] <xenoterracide>  m: multi sub trait_mod:<is>( Mu:U $type, :$entity! ) { say $type }; class Foo is entity {}

[02:58] <camelia> rakudo-moar 847bd5: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/_EVubqfeJt␤Cannot invoke this object (REPR: Null, cs = 0)␤at /tmp/_EVubqfeJt:1␤------> ␤»

[02:58] <xenoterracide> is a very different error than what parrot outputs

[03:02] <Timbus> m: multi trait_mod:<is>(Mu:U $type, :$wot!) { say $type.HOW }; class Teh is wot {};

[03:02] <camelia> rakudo-moar 847bd5: OUTPUT«Perl6::Metamodel::ClassHOW.new()␤»

[03:08] <Timbus> m: multi trait_mod:<is>(Mu:U $type, :$wot!) { say $type.HOW.name($type) }; class Teh is wot {};

[03:08] <camelia> rakudo-moar 847bd5: OUTPUT«Teh␤»

[03:08] <Timbus> yey

[03:09] <dalek> doc: f4d53d2 | Mouq++ | lib/ (2 files):

[03:09] <dalek> doc: Add language/grammars

[03:09] <dalek> doc: review: https://github.com/perl6/doc/commit/f4d53d2f11

[03:09] <dalek> doc: 8c63949 | Mouq++ | lib/Language/classtut.pod:

[03:09] <dalek> doc: Merge branch 'master' of https://github.com/perl6/doc

[03:09] <dalek> doc: review: https://github.com/perl6/doc/commit/8c63949df3

[03:11] <Mouq> m: multi sub trait_mod:<is>( Mu:U $type, :$entity! ) { say $type.name }; class Foo is entity {}

[03:11] <camelia> rakudo-moar 847bd5: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/7HBsD_j_Dx␤Cannot invoke this object (REPR: Null, cs = 0)␤at /tmp/7HBsD_j_Dx:1␤------> ␤»

[03:12] <Timbus> welcome to the metamodel

[03:12] <Mouq>  /o\

[03:13] <xenoterracide> Timbus: seems that moritz advent is out of date? or...

[03:16] <xenoterracide> also interestingly I could swear I didn't have any problem with $type 2 months ago (though that may have been on parrot, thus bug)

[03:17] <Timbus> i dont think how it currently works is.. correct? optimal? not sure what words i want. its a bit fragile atm

[03:21] <Mouq> It's not exactly something put under the rigours of roast

[03:22] *** atroxaper joined
[03:27] * xenoterracide is in your code breaking your shit, maybe someday you'll be in mine returning the favor

[03:28] *** btyler joined
[03:29] <Mouq> xenoterracide++ for pushing rakudo

[03:30] <xenoterracide> well I'll go with the more verbose version since it seems to work... maybe I should put a failing test somewhere?

[03:34] <xenoterracide> https://github.com/xenoterracide/p6-annotations/blob/master/t/persistence.t works :D

[03:45] *** xenoterracide left
[03:45] *** xenoterracide joined
[03:45] <Mouq> \o/

[03:48] *** thou joined
[04:01] *** kurahaupo left
[04:03] *** hoverboard joined
[04:04] *** kst joined
[04:06] *** atroxaper left
[04:07] *** atroxaper joined
[04:08] <lizmat> good *, #perl6!

[04:08] <lizmat> r: say IO::Spec.rel2abs(".")

[04:08] <camelia> rakudo-{parrot,moar} 847bd5: OUTPUT«/home/p6eval␤»

[04:08] <camelia> ..rakudo-jvm 847bd5: OUTPUT«/home/p6eval_eval␤»

[04:08] <lizmat> r: say IO::Spec.rel2abs("..")

[04:08] <camelia> rakudo-jvm 847bd5: OUTPUT«/home/p6eval_eval/..␤»

[04:08] <camelia> ..rakudo-{parrot,moar} 847bd5: OUTPUT«/home/p6eval/..␤»

[04:08] <lizmat> feels to me this is a bug...

[04:11] <Mouq> lizmat: I remember reading something, somewhere that said that that was the correct behavior, due to symbolic links or something...

[04:11] <lizmat> r: say IO::Spec.rel2abs("../../../../..")

[04:11] <camelia> rakudo-jvm 847bd5: OUTPUT«/home/p6eval_eval/../../../../..␤»

[04:11] <camelia> ..rakudo-{parrot,moar} 847bd5: OUTPUT«/home/p6eval/../../../../..␤»

[04:11] *** atroxaper left
[04:12] <lizmat> well, maybe symlinks shouldn't use rel2abs then

[04:14] *** kaare_ joined
[04:14] <lizmat> maybe I should go to sleep  :-)

[04:14] *** atroxaper joined
[04:14] <lizmat> gnight #perl6!

[04:14] <Mouq> r: say IO::Spec.resolve('..')

[04:14] <camelia> rakudo-{parrot,jvm,moar} 847bd5: OUTPUT«No such method 'resolve' for invocant of type 'IO::Spec'␤  in block  at /tmp/tmpfile:1␤␤»

[04:14] <Mouq> 'night lizmat!

[04:15] <Mouq> r: say '..'.path.resolve

[04:15] <camelia> rakudo-moar 847bd5: OUTPUT«===SORRY!===␤IO::Path.resolve not yet implemented. Sorry. ␤»

[04:15] <camelia> ..rakudo-jvm 847bd5: OUTPUT«IO::Path.resolve not yet implemented. Sorry. ␤  in method gist at gen/jvm/CORE.setting:12790␤  in sub say at gen/jvm/CORE.setting:13700␤  in block  at /tmp/tmpfile:1␤␤»

[04:15] <camelia> ..rakudo-parrot 847bd5: OUTPUT«IO::Path.resolve not yet implemented. Sorry. ␤  in method gist at gen/parrot/CORE.setting:12786␤  in method gist at gen/parrot/CORE.setting:1038␤  in sub say at gen/parrot/CORE.setting:13716␤  in sub say at gen/parrot/CORE.setting:13703␤  in bl…»

[04:18] *** BenGoldberg left
[04:21] *** gfldex left
[04:41] <atroxaper> p: my %h; my @a = i => 1, ii => 2; %h{'a'} = @a; say %h{'a'}.perl;

[04:41] <camelia> rakudo-parrot 847bd5: OUTPUT«["i" => 1, "ii" => 2]␤»

[04:42] <atroxaper> What do I wrong? I want to get two elements instead one.

[04:51] <Mouq> m: my %h; my @a = i => 1, ii => 2; %h{'a'} = %(@a); say %h<a>.perl # is this what you mean?

[04:51] <camelia> rakudo-moar 847bd5: OUTPUT«{"i" => 1, "ii" => 2}␤»

[04:54] <atroxaper> Mouq: Hm.... Maybe. I get array with one element, but want to get array with 2 elements.

[04:54] <Timbus> you do have an array with two elements...

[04:55] <atroxaper> Timbus: with Mouq verstion?

[04:55] <Timbus> ["i" => 1, "ii" => 2]

[04:55] <atroxaper> p: my %h; my @a = i => 1, ii => 2; %h{'a'} = @a; say $_ ~ '<-elem' for %h{'a'};

[04:55] <camelia> rakudo-parrot 847bd5: OUTPUT«i  1 ii    2<-elem␤»

[04:56] <Timbus> in a loop, use .list to iterate over it

[04:56] <Timbus> m: my %h; my @a = i => 1, ii => 2; %h{'a'} = @a; say $_ ~ '<-elem' for %h{'a'}.list

[04:56] <camelia> rakudo-moar 847bd5: OUTPUT«i    1<-elem␤ii      2<-elem␤»

[04:57] <Timbus> or use @()

[04:57] <Timbus> m: my %h; my @a = i => 1, ii => 2; %h{'a'} = @a; say $_ ~ '<-elem' for @(%h{'a'})

[04:57] <camelia> rakudo-moar 847bd5: OUTPUT«i    1<-elem␤ii      2<-elem␤»

[04:57] <atroxaper> Timbus: that is it!

[04:58] <atroxaper> I dind't know that we can use multi sigils in Perl6

[05:01] <dalek> modules.perl6.org: e3219ea | (Tim Smith)++ | / (2 files):

[05:01] <dalek> modules.perl6.org: Fix UTF-8 encoding mismatch

[05:01] <dalek> modules.perl6.org: 

[05:01] <dalek> modules.perl6.org: When the string is read (from Mojo UA), it's not flagged as utf8. To

[05:01] <dalek> modules.perl6.org: then encode_utf8($str) (convert a Str to a Buf, basically), and then

[05:01] <dalek> modules.perl6.org: write that buf to a :encoding<UTF-8> handle, causes double-encoding.

[05:01] <dalek> modules.perl6.org: 

[05:01] <dalek> modules.perl6.org: Instead, the raw string should be decoded from utf8, which turns on the

[05:01] <dalek> modules.perl6.org: utf8 flag. Then writing to the :encoding<utf-8> filehandle will do the

[05:01] <dalek> modules.perl6.org: right thing.

[05:01] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/e3219ea4ae

[05:03] <thou> ^ I'm not sure that UTF-8 fix will take effect for all projects, since some bad stuff might be cached in proto.json

[05:04] <thou> To see the bug I'm fixing, look at, e.g., Math::Tau's description on http://modules.perl6.org/

[05:09] <Mouq> softmoth++

[05:10] <Mouq> Or thou++

[05:10] <Mouq> you++

[05:10] <Mouq> I think that may have to be updated manually

[05:12] <dalek> doc: 9fc3426 | Mouq++ | lib/Language/grammars.pod:

[05:12] <dalek> doc: Add a section about named regexes

[05:12] <dalek> doc: review: https://github.com/perl6/doc/commit/9fc3426c69

[05:12] <thou> :)

[05:12] * Mouq got distracted by Imgur for a few hours >_>

[05:12] <Mouq> bed&

[05:12] <thou> gnight

[05:26] <dalek> modules.perl6.org: dc65e12 | (Tim Smith)++ | web/index.tmpl:

[05:26] <dalek> modules.perl6.org: Fix indentation of projects with logos

[05:26] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/dc65e122cb

[05:28] <xenoterracide> https://travis-ci.org/xenoterracide/p6-annotations/builds/28095322 now abusing travis

[05:29] *** atroxaper left
[05:33] *** btyler left
[05:34] <thou> xenoterracide++  Very, very nice. :-)

[05:36] <thou> Only took <7m to run.

[05:41] *** xenoterracide left
[06:29] *** woolfy1 left
[06:29] *** lizmat left
[06:30] *** uniejo_ joined
[06:32] *** uniejo left
[06:39] *** lizmat joined
[06:44] *** kurahaupo joined
[06:45] *** mr-foobar left
[06:46] *** woolfy joined
[06:52] <moritz> Mouq: I'm pretty sure PerlJam++ would let you steal from https://github.com/perlpilot/perl6-docs/tree/master/intro for regex/grammar intros

[06:56] *** darutoko joined
[06:58] *** hoverboard left
[07:02] *** kaare_ left
[07:03] *** uniejo_ left
[07:04] *** uniejo_ joined
[07:10] *** atroxaper joined
[07:10] *** Rotwang joined
[07:21] *** uniejo joined
[07:22] *** woolfy left
[07:23] *** uniejo_ left
[07:23] *** lizmat left
[07:50] <dalek> doc: abdd691 | (Kamil Kułaga)++ | lib/Language/classtut.pod:

[07:50] <dalek> doc: adde begin and end code

[07:50] <dalek> doc: review: https://github.com/perl6/doc/commit/abdd691061

[08:04] *** labster left
[08:12] *** gfldex joined
[08:15] <thou> I'm pretty happy I just added load-template-from-file support to Template::Mustache, so it's very usable at this point.

[08:19] *** Akagi201 joined
[08:22] <moritz> thou: blog about it!

[08:27] <thou> Good idea. I learned a lot of tricks for grammars. Mostly by reading nom/src/Perl6/Grammar.nqp

[08:28] <thou> and Actions.nqp

[08:28] <thou> I think I'm still missing a few large chunks of understanding, though.

[08:32] *** kivutar joined
[08:34] *** itz joined
[08:38] <dalek> modules.perl6.org: 66c3dcb | (Tim Smith)++ | web/index.tmpl:

[08:38] <dalek> modules.perl6.org: Increase page width to handle long module names

[08:38] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/66c3dcba80

[08:39] <thou> OK, that's my last real display annoyance for modules.perl6.org fixed. Time for bed. Good night, #perl6!

[08:39] *** atroxaper left
[08:40] *** atroxaper joined
[08:40] *** atroxaper left
[08:40] *** atroxaper joined
[08:45] *** denis_boyun_ joined
[08:45] *** woosley left
[08:47] *** atroxaper left
[08:47] *** woosley joined
[08:49] *** woosley left
[08:51] *** itz left
[08:52] <masak> good antenoon, #perl6

[08:52] *** spider-mario joined
[08:52] *** sue_ joined
[08:54] *** woosley joined
[09:04] *** thou left
[09:04] *** kurahaupo left
[09:08] *** sue_ left
[09:34] <moritz> \o masak, *

[09:35] *** kurahaupo joined
[09:37] *** ivanshmakov left
[09:37] *** ivanshmakov joined
[09:42] *** dmol joined
[09:45] <vendethiel> m: (^5).map{.say if * ^ff *};

[09:45] <camelia> rakudo-moar 847bd5: OUTPUT«Cannot call 'map'; none of these signatures match:␤:(Any: Whatever, *%_)␤:(Any: Any $block, Any :label($label), *%_)␤  in block  at /tmp/sTys7K5dYi:1␤␤»

[09:45] <vendethiel> m: (^5).map: {.say if * ^ff *};

[09:45] <camelia> rakudo-moar 847bd5: OUTPUT«1␤2␤3␤4␤»

[09:45] <vendethiel> ooh :D.

[09:45] <vendethiel> ff++

[09:47] *** Psyche^ joined
[09:48] *** Su-Shee_ is now known as Su-Shee

[09:49] *** atroxaper joined
[09:49] <vendethiel> oooh, but ff has terrible precedence :(

[09:50] <vendethiel> m: (^5).map({$^a == 1 ff * ?? 'yea' !! 'no'});

[09:50] <camelia> rakudo-moar 847bd5: ( no output )

[09:50] <vendethiel> m: (^5).map({$^a == 1 ff * ?? 'yea' !! 'no'}).perl.say;

[09:50] <camelia> rakudo-moar 847bd5: OUTPUT«(1,).list␤»

[09:50] <vendethiel> m: (^5).map({($^a == 1 ff *) ?? 'yea' !! 'no'}).perl.say;

[09:50] <camelia> rakudo-moar 847bd5: OUTPUT«("no", "yea", "yea", "yea", "yea").list␤»

[09:51] *** Psyche^_ left
[09:59] *** woosley left
[10:04] *** SevenWolf left
[10:11] *** atroxaper left
[10:12] *** atroxaper joined
[10:14] *** woosley joined
[10:17] *** vendethiel left
[10:18] *** vendethiel joined
[10:20] <dalek> doc: 1dca24e | Kamil++ | lib/Language/classtut.pod:

[10:20] <dalek> doc: reverted =begin code because it casued html generation error

[10:20] <dalek> doc: review: https://github.com/perl6/doc/commit/1dca24eeb3

[10:23] <timotimo> can we link to the advent calendar and RC from the main page of doc.p6.org?

[10:23] <moritz> RC is fine

[10:23] <moritz> I don't know how up-to-date the advent calendar posts are kept, though

[10:24] <moritz> on second thought, maybe linking to http://perl6.org/documentation/ would be best

[10:25] *** dmol left
[10:25] <timotimo> could be

[10:25] *** vendethiel left
[10:27] *** vendethiel joined
[10:32] *** atroxaper left
[10:37] *** user3 joined
[10:47] *** felher left
[10:48] *** atroxaper joined
[11:15] *** kaare_ joined
[11:16] *** atroxaper left
[11:16] *** atroxaper joined
[11:21] *** atroxaper left
[11:26] *** user3 left
[11:35] <dalek> doc: 3c80575 | Kamil++ | lib/Language/classtut.pod:

[11:35] <dalek> doc: Replaced tab with spaces. POD parsing is very sensitive to that

[11:35] <dalek> doc: review: https://github.com/perl6/doc/commit/3c80575456

[11:37] *** sqirrel joined
[11:48] *** uniejo left
[11:48] *** lizmat joined
[11:48] *** woolfy joined
[11:51] *** avar joined
[11:52] *** kaare_ left
[11:52] <vendethiel> Can I get any feedback on ff's precedence ?

[11:53] <vendethiel> That seems both conterintuitive and that seems to reduce the usefulness

[11:55] <vendethiel> (or maybe it's ?? !!'s precedence that's unusual)

[11:56] <vendethiel> p6:  (^5).map({$^a == 1 ff * ?? 'yea' !! 'no'}).perl.say;

[11:57] <camelia> niecza v24-109-g48a8de3: OUTPUT«("", 1, "", "", "").list␤»

[11:57] <camelia> ..rakudo-{parrot,jvm,moar} 847bd5: OUTPUT«(1,).list␤»

[11:57] <vendethiel> p6:  (^5).map({($^a == 1 ff *) ?? 'yea' !! 'no'}).perl.say;

[11:57] <camelia> rakudo-{parrot,jvm,moar} 847bd5, niecza v24-109-g48a8de3: OUTPUT«("no", "yea", "yea", "yea", "yea").list␤»

[12:07] *** araujo left
[12:08] <masak> what does the `*` resolve to in that evaluation?

[12:09] *** araujo joined
[12:09] *** araujo left
[12:09] *** araujo joined
[12:09] <masak> oh, it's just a Whatever.

[12:09] <masak> yes, I see now.

[12:15] *** sqirrel left
[12:18] *** atroxaper joined
[12:22] *** atroxaper left
[12:24] <TimToady> well, ff and ??!! are the same precedence, but note that they are right associative

[12:24] <yoleaux> 19 Jun 2014 22:55Z <raiph> TimToady: S06:715 says "a loop as the final statement would be evaluated as a map"; this is now a fossil, right?

[12:24] <synopsebot> Link: http://perlcabal.org/syn/S06.html#line_715

[12:34] <vendethiel> TimToady: do you think we could change it ?

[12:38] *** denis_boyun_ left
[12:40] <vendethiel> I really think it's confusing.

[12:40] <TimToady> it used to have its own precedence level, and we decided that was about one precedence level too many

[12:41] <vendethiel> I'm willing to bet anybody trying this will get bit :/

[12:41] <TimToady> only if they combine ff and ??!!

[12:41] <vendethiel> that's what I meant by "this".

[12:42] <TimToady> ff is not a common thing, much less common than ??!!

[12:42] <TimToady> one must consider the cognitive load of a separate precedence level as well

[12:42] <vendethiel> that doesn't mean it should be confusing, does it ?

[12:42] *** sqirrel joined
[12:44] <TimToady> it is impossible to remove all sources of confusion without introducing others

[12:44] <TimToady> ff is just not that important

[12:44] <TimToady> waterbed theory

[12:45] <vendethiel> oh, you can't "eliminate" complexity, that's common sense

[12:46] <vendethiel> i'm just trying to get it to DWIM

[12:46] <TimToady> well, ??!! is also a world of WAT

[12:46] <vendethiel> why ? because of its associativity ?

[12:47] <TimToady> because people try to overuse it, to the detriment of readability

[12:47] <vendethiel> feels to me that this adheres to perl's mantra, no ?

[12:47] <TimToady> there's a lot of language design that has to do with pragmatics, not semantics :)

[12:47] <vendethiel> I mean, not to try to prevent people from using it

[12:48] <TimToady> we don't prevent people, but we can't use precedence to eliminate all parentheses

[12:48] <TimToady> (^20).foo is another persistent WAT

[12:48] <vendethiel> yeah, most definitely.

[12:48] <TimToady> or rather, ^20.foo

[12:48] <TimToady> but I don't see a way to fix it without introducing the opposite problem

[12:48] <vendethiel> m: sub postfix:<^>(Int $n) { ^$n }; 20^.length.say;

[12:49] <camelia> rakudo-moar 847bd5: OUTPUT«No such method 'length' for invocant of type 'Range'␤Did you mean 'elems', 'chars', 'graphs' or 'codes'?␤  in block  at /tmp/hvGlsoZEKi:1␤␤»

[12:49] <vendethiel> m: sub postfix:<^>(Int $n) { ^$n }; 20^.elems.say;

[12:49] <camelia> rakudo-moar 847bd5: OUTPUT«20␤»

[12:49] <vendethiel> This would work but makes 0 sense.

[12:50] <TimToady> likewise, if you want (1 + 2) * 3, there's no way to fix that with precedence without breaking 1 + 2 * 3

[12:51] <TimToady> the best we can do is try to keep parentheses clear of other WAT-inducing overloadings

[12:53] <TimToady> which is why p6 is much more strict about foo(1+2) vs foo (1+2) than p5 is, or differently strict

[12:53] <TimToady> p5 confuses people between postfix () and circumfix ()

[12:54] <vendethiel> (I'll take your word on that one, I don't know p5)

[12:54] <vendethiel> and indeed, ff needs to be at a different level than ==.

[12:55] *** avar left
[12:55] *** avar joined
[12:59] <TimToady> there's also some mnemonic value in lumping together two weird "either/or" operators that each want right associativity

[13:00] <TimToady> I think you're the first person who has actually stumbled against the fact that the would rather be left associative with respect to each other

[13:00] <TimToady> *they

[13:02] <TimToady> we could possibly make them X associative, which would rule out using them together, but other X levels typically have left-associative semantics, if they care

[13:03] <TimToady> I guess it's mostly the short-circuiting logic operators that care about order but are list associative

[13:08] <TimToady> we have to get out of this timeshare in, yow, 52 minutes (and get over to the hackathon, yay)

[13:09] <TimToady> afk &

[13:14] *** xenoterracide joined
[13:18] *** sqirrel left
[13:20] *** atroxaper joined
[13:23] <masak> the voice recognition in my new phone is so good that I'm pondering writing blog posts with it.

[13:23] <masak> clearly some advances have been made since I got my last phone (3 years ago).

[13:23] *** kaare_ joined
[13:24] *** uniejo joined
[13:24] <masak> oh, and about ff and family: I have never used them. I write a lot of Perl 6 code, and I have never stumbled upon a case where I felt even remotely tempted to use them.

[13:24] <masak> maybe it's just me.

[13:25] *** atroxaper left
[13:25] <masak> but I think part of it is that something like the DWIMmery of Perl 5 is gone from it: there's no automatching against $. aka $*IN.ins

[13:28] *** uniejo left
[13:29] <woolfy> Oh boy...  TimToady: there is no hackathon today!

[13:30] <woolfy> The hackathon rooms are today in use as workshop rooms

[13:30] <woolfy> Well, perigrin is keeping watch now outside the workshop rooms, he will tell TimToady

[13:37] <colomon> Doesn't that just mean you've got to find a different location for the hackathon?  Surely there's a local bar with wifi....

[13:38] <colomon> ;)

[13:38] <lizmat> hehe...  even a lounge  :-)

[13:38] <lizmat> we'll see

[13:39] <amirite> is perl 6 out yet

[13:40] <amirite> i think this team could benefit from pivotal tracker and scrum

[13:42] <rindolf> Hi all.

[13:42] <yoleaux> 14 Jun 2014 21:04Z <TimToady> rindolf: I just seem to be zigging when you're zagging, but you can always leave a PM, you don't have to ask...

[13:42] <rindolf> TimToady: can I PM you?

[13:42] <rindolf> Ah.

[13:44] <rindolf> Already did.

[13:44] <rindolf> amirite: there are beta versions of Perl 6.

[13:45] <rindolf> amirite: and Perl 6 proved of a lot of inspiration to the perl 5 core, to CPAN and to other languages and ecosystems.

[13:46] <rindolf> amirite: that put aside, I think Perl has become a bit too inbred lately - http://www.shlomifish.org/humour/fortunes/show.cgi?id=larry-wall-all-truth-is-gods-truh .

[13:47] <rindolf> I find Perl conferences boring and dull in comparison to Sci-Fi/Fantasy/RPGs/Comics/etc. conferences.

[13:47] * masak doesn't

[13:47] <FROGGS_> rindolf: I don't feel the same way btw :o)

[13:47] <rindolf> FROGGS_: ok.

[13:47] <rindolf> masak: fair enough.

[13:48] <rindolf> FROGGS_: did you attend a major sci-fi/fantasy/etc. con?

[13:48] <FROGGS_> especially the stuff about P6 is very entertaining, some stuff about P5 isn't

[13:48] <rindolf> FROGGS_: ah.

[13:48] <moritz> perl conferences can kindle new excitment for programming

[13:48] <FROGGS_> rindolf: no, I just wanna say the Perl conferences arn't boring or dull

[13:49] <masak> I tend to be excited by Perl 5 talks nearly as much as by Perl 6 talks on conferences.

[13:49] <moritz> also, meeting the people in meatspace that you talk to over the internet all year is kinda exciting, no matter if the context is perl or something else

[13:49] <masak> what moritz said.

[13:49] <rindolf> FROGGS_: I feel much the same about pure-Buffyism and Classical Randian Objectivism.

[13:49] <rindolf> well, Perl meetups are fine.

[13:50] <FROGGS_> I... don't understand that sentence about Buffyism

[13:50] <rindolf> FROGGS_: OK, then go to one - some photos I took - https://www.flickr.com/photos/shlomif/sets/72157633111982891

[13:50] <rindolf> FROGGS_: Buffy kinda stagnated too.

[13:50] <FROGGS_> well, okay

[13:50] <masak> rindolf: I liked your off-topic stuff much better when you were building your own better-than-Perl-6 language.

[13:51] <masak> rindolf: these days, it's just off topic.

[13:51] <rindolf> FROGGS_: and went out of fashion due to being too inbred.

[13:51] <rindolf> masak: sorry.

[13:51] <masak> no need to apologise.

[13:51] <rindolf> masak: OK, on topic.

[13:51] <masak> \o/

[13:52] <rindolf> Well, Perl 6 is not really my thing.

[13:52] * FROGGS_ goes back to building the high sleeper (deadline is tomorrowish)

[13:52] <rindolf> I like reading the advent calendars - lots of good stuff there.

[13:52] <rindolf> I was trying to triangulate though.

[13:52] <masak> triangulate?

[13:52] <rindolf> Based on what Larry said in his quote.

[13:52] <rindolf> masak: make an analogy.

[13:53] <masak> I don't think I know which quote you mean.

[13:53] <rindolf> masak: this one - http://www.shlomifish.org/humour/fortunes/show.cgi?id=larry-wall-all-truth-is-gods-truh

[13:54] <rindolf> masak: All Truth is God's truth.

[13:54] <rindolf> it's pretty shory.

[13:54] <rindolf> it's pretty short.

[13:54] <masak> rindolf: that quote would have been a lot more valuable if it'd had a year.

[13:55] <masak> rindolf: as it contains the substring "this year"...

[13:55] <xenoterracide> http://privatepaste.com/63764ac3e1 perl6-m is telling me the trait doesn't exist

[13:55] <rindolf> masak: http://cos.polyamory.org/text/T/lwall-keynote.txt

[13:55] <masak> oh, but the source has a year.

[13:55] <masak> 1997.

[13:55] <masak> right.

[13:55] <rindolf> masak: yes.

[13:55] <masak> I wonder how that went :)

[13:55] <masak> anyway, Perl 6 is kind of talking to Java these days.

[13:56] <xenoterracide> I expect I'd have to do something different to add a trait to an attribute?

[13:56] <rindolf> masak: well, Larry failed eventually I think, but Inline::Java is mostly OK.

[13:56] <masak> xenoterracide: I think it shouldn't be Mu:U

[13:56] <masak> rindolf: ok, good to know.

[13:57] <xenoterracide> masak: what would be the appropriate? is it Attribute? (note that that trait applies to a class fine)

[13:57] *** kurahaupo left
[14:00] <masak> xenoterracide: I think it's Variable... but check the existing examples in src/core/traits.pm

[14:00] <masak> no, Attribute:D looks fine.

[14:00] <xenoterracide> masak: ty

[14:01] <xenoterracide> not sure I fully understand why Mu:U doesn't work there, I'd think a Mu:U could be applied to anything

[14:04] <masak> not sure.

[14:05] <cognominal> is there a built-in operator to compare same length arrays?

[14:06] * xenoterracide pokes about for how to get the metaclass for that attribute

[14:09] <moritz> cognominal: compare how? there's for example eqv

[14:10] <colomon> cognominal: or <<==>> (for instance)

[14:10] <colomon> errr, >>==<<

[14:10] <moritz> [&&] @a »==«

[14:10] <moritz> [&&] @a »==« @b

[14:10] <moritz> [&&] @a »eq« @b

[14:10] <colomon> oh, good point.  moritz++

[14:10] <moritz> @a eqv @b

[14:11] <cognominal> I think I want eqv indeed

[14:19] <hoelzro> how does one count the number of times a regex matches a string?

[14:20] <hoelzro> in Perl 5, I might do something like my $count = () = /pattern/g

[14:21] <masak> hoelzro: +$str.comb

[14:21] <masak> well +$str.comb($rx)

[14:22] <xenoterracide> $e.^attributes -> { $_.name } obviously not right...

[14:24] <hoelzro> ah ha! thanks masak 

[14:24] <masak> m: class C { has ($.foo, $.bar); has $.baz }; say .name for C.^attributes

[14:24] <camelia> rakudo-moar 847bd5: OUTPUT«$!foo␤$!bar␤$!baz␤»

[14:25] <rindolf> masak: sorry , I went for a walk.

[14:25] *** kurahaupo joined
[14:28] *** Khisanth left
[14:28] <xenoterracide> hmm... why do I think theirs a postfix way of chaining off the collection itself, probably too much java

[14:31] <masak> rindolf: 's ok. I didn't feel we left any particular stone unturned.

[14:31] <rindolf> masak: OK.

[14:32] <rindolf> masak: well, Perl is also a culture, and we could derive inspiration from cultures/idea systems that are not software techs per-ce.

[14:34] *** denis_boyun_ joined
[14:34] <masak> per se*

[14:34] <masak> and yes, I agree.

[14:35] <masak> in many senses, the software world is too inward-looking.

[14:35] <masak> I guess that's because, in many way, what we are doing has never been done before.

[14:35] <masak> but that doesn't meen we don't share structures with other kinds of communities.

[14:39] <vendethiel> masak: well, I just wanted to avoid "any(@els[^++state$ ])" because ewW.

[14:43] *** EmilPer left
[14:46] <masak> vendethiel: yeah, that triggers my "mixing mutable state and parallel construct" warning bells.

[14:46] <vendethiel> masak: and that's better written as `@els[$^a] ff *`

[14:46] <vendethiel> I only just realized I could do that when re-reading advent2011

[15:00] *** guru joined
[15:01] *** guru is now known as Guest57305

[15:01] *** Guest57305 is now known as ajr_

[15:03] *** ivan`` left
[15:05] *** raydiak left
[15:10] *** sqirrel joined
[15:15] *** raydiak joined
[15:16] *** dmol joined
[15:18] *** ivan`` joined
[15:22] *** atroxaper joined
[15:26] *** atroxaper left
[15:28] *** xenoterracide left
[15:33] *** Khisanth joined
[15:37] *** zakharyas joined
[15:42] *** robinsmidsrod left
[15:44] *** robinsmidsrod joined
[15:44] *** robinsmidsrod left
[15:45] *** robinsmidsrod joined
[15:48] *** xenoterracide joined
[15:50] *** denis_boyun_ left
[15:55] *** xinming_ joined
[15:56] *** xenoterracide left
[15:58] *** xinming left
[15:59] *** amirite left
[16:10] *** uniejo joined
[16:10] *** amirite joined
[16:27] *** molaf__ joined
[16:30] *** sqirrel left
[16:30] *** molaf_ left
[16:34] <masak> m: for "The limerick packs laughs anatomical\nInto space that is quite economical.\nBut the good ones I've seen\nSo seldom are clean\nAnd the clean ones so seldom are comical.".lines -> { .say if /seen/ ff /clean/ }

[16:34] <camelia> rakudo-moar 847bd5: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in block  at /tmp/hHHK0qtpqu:1␤␤»

[16:34] <masak> m: for "The limerick packs laughs anatomical\nInto space that is quite economical.\nBut the good ones I've seen\nSo seldom are clean\nAnd the clean ones so seldom are comical.".lines { .say if /seen/ ff /clean/ }

[16:34] <camelia> rakudo-moar 847bd5: OUTPUT«But the good ones I've seen␤So seldom are clean␤»

[16:34] <masak> m: for "The limerick packs laughs anatomical\nInto space that is quite economical.\nBut the good ones I've seen\nSo seldom are clean\nAnd the clean ones so seldom are comical.".lines { .say if /seen/ ff^ /clean/ }

[16:34] <camelia> rakudo-moar 847bd5: OUTPUT«But the good ones I've seen␤»

[16:34] <masak> m: for "The limerick packs laughs anatomical\nInto space that is quite economical.\nBut the good ones I've seen\nSo seldom are clean\nAnd the clean ones so seldom are comical.".lines { .say if /seen/ ^ff /clean/ }

[16:34] <camelia> rakudo-moar 847bd5: OUTPUT«So seldom are clean␤»

[16:34] <masak> m: for "The limerick packs laughs anatomical\nInto space that is quite economical.\nBut the good ones I've seen\nSo seldom are clean\nAnd the clean ones so seldom are comical.".lines { .say if /seen/ ^ff^ /clean/ }

[16:34] <camelia> rakudo-moar 847bd5: ( no output )

[16:37] *** atroxaper joined
[16:40] *** skids left
[16:41] *** uniejo left
[16:42] *** tempire_ left
[16:43] *** ivan`` left
[16:44] *** camelia left
[16:44] <timotimo> how come so little is going on here today? and in #moarvm, too?

[16:45] *** raydiak left
[16:45] <masak> timotimo: jnthn is having a weekend off.

[16:45] <masak> A stateful and somewhat weird op

[16:45] <masak> That goes by the name of "flipflop" Dijkstra would hate it But here's how we rate it:

[16:45] <masak> It gets disregarded nonstop

[16:45] * tadzik doesn't know

[16:45] <timotimo> hehe.

[16:45] <masak> argh, irssi butching my limerick.

[16:45] <tadzik> today I'm spending 8 hours on a train to see a friend getting married for one hour

[16:45] <timotimo> i like that poem

[16:45] <masak> I'm not gonna paste it again, you'll just have to imagine it right.

[16:46] <tadzik> worth it :)

[16:46] <timotimo> it's not as dirty as expected

[16:46] <masak> troo, flipflops themselves are much dirtier.

[16:46] <timotimo> aye

[16:47] *** tempire joined
[16:50] *** btyler joined
[16:53] *** ivan`` joined
[16:55] *** sqirrel joined
[16:57] *** raydiak joined
[17:00] *** flussence left
[17:02] *** flussence joined
[17:02] *** lucas joined
[17:03] *** itz joined
[17:05] *** camelia joined
[17:07] *** btyler left
[17:10] *** camelia left
[17:14] *** kivutar left
[17:16] *** flussence left
[17:17] *** flussence joined
[17:21] *** breinbaa1 joined
[17:22] *** breinbaa1 left
[17:23] *** breinbaa1 joined
[17:26] *** breinbaa1 left
[17:26] *** denis_boyun_ joined
[17:27] *** breinbaas joined
[17:27] *** camelia joined
[17:28] *** ChanServ sets mode: +v camelia

[17:29] *** sqirrel left
[17:37] *** virtualsue joined
[17:43] *** kaare_ left
[17:45] *** virtualsue left
[17:47] *** virtualsue joined
[17:52] *** virtualsue left
[17:56] *** Akagi201 left
[17:56] *** Akagi201 joined
[17:57] *** Akagi201 left
[17:58] *** virtualsue joined
[18:08] *** cognominal left
[18:09] *** cognominal joined
[18:10] *** hoverboard joined
[18:19] <lucas> hello developers. is it ok to send pull requests for small comestic changes in the specs?

[18:21] <lucas> *cosmetic word changes

[18:21] <tadzik> sure

[18:21] <tadzik> welcome to #perl6 :)

[18:21] <lucas> ok, thanks!

[18:25] *** zakharyas left
[18:26] <cognominal> this eating the cpu :  https://gist.github.com/cognominal/97929bf9f94d4b67e518

[18:26] <cognominal> it observes a file a run perl6 on it if modified.

[18:27] <cognominal> Am I doing something wrong?

[18:28] *** Akagi201 joined
[18:29] *** aindilis joined
[18:32] *** virtualsue left
[18:32] *** Akagi201 left
[18:37] <cognominal> should I say, except for eating the cpu, it works fine?

[18:38] <moritz> cognominal: except not using the file notification API? looks fine to me, at first glance

[18:38] <moritz> but I'm no concurrency expect at all

[18:40] <cognominal> I did not notice there was a file notification API in Perl 6. 

[18:45] *** virtualsue joined
[18:49] *** uniejo joined
[18:51] *** virtualsue_ joined
[18:52] *** virtualsue left
[18:52] *** virtualsue_ is now known as virtualsue

[18:55] <moritz> cognominal: see t/spec/S17-supply/watch_path.t

[18:59] <cognominal> thx

[19:02] *** virtualsue left
[19:03] *** uniejo left
[19:05] *** uniejo joined
[19:06] *** rindolf left
[19:07] *** rindolf joined
[19:09] *** larks_ is now known as larks

[19:11] <vendethiel> So, I just learned there's a p5 addict teacher that's converted his students in a uni near me.

[19:12] *** denis_boyun_ left
[19:15] *** dmol left
[19:17] *** atroxaper left
[19:20] *** uniejo left
[19:25] *** darutoko left
[19:25] <cognominal> where that?

[19:25] <vendethiel> cognominal: jussieu's uni

[19:28] *** Akagi201 joined
[19:33] *** Akagi201 left
[19:34] <lucas> so, I was reading the HTML rendered version of S02 and noticed there is two sections named "Twigils" which are identical. can anyone confirm that?

[19:35] <lucas> the pod file differs from the rendered output on the perlcabal site.

[19:35] <lucas> is that correct?

[19:41] *** rindolf left
[19:41] *** rindolf joined
[19:47] <moritz> lucas: it's rendered at different heading levels

[19:47] <moritz> not sure what goes wrong there

[19:47] <cognominal> lucas, it seems to concatenate two sections with the same name, and each sections is rendered as the concatenation

[19:49] <cognominal> Probably, the programs uses a hash and assumes no two headers can have the same name

[19:49] <lucas> thanks, i thought i was seeing things

[19:49] <lucas> i agree with this "concatenation" theory

[19:51] <cognominal> nice catch

[19:52] *** vendethiel left
[19:52] *** vendethiel joined
[19:54] *** virtualsue joined
[19:59] *** Sqirrel joined
[20:06] <masak> lucas++

[20:06] *** vendethiel left
[20:10] *** felher joined
[20:11] *** virtualsue left
[20:12] *** dmol joined
[20:14] *** sqirrel_ joined
[20:29] *** Akagi201 joined
[20:31] *** hoverboard left
[20:32] *** SevenWolf joined
[20:33] *** vendethiel joined
[20:34] *** Akagi201 left
[20:36] *** virtualsue joined
[20:45] <itz>  anyone know of a popular linux console font which is well supplied with unicode snowmen and all that jazz?

[20:46] <cognominal> are they many of them?

[20:46] <cognominal> &#x2603;

[20:47] <FROGGS_> itz: I use Monospace (Ubuntu)

[20:47] <cognominal> .u &#x2603

[20:47] <yoleaux> U+0023 NUMBER SIGN [Po] (#)

[20:47] <yoleaux> U+0026 AMPERSAND [Po] (&)

[20:47] <yoleaux> U+0030 DIGIT ZERO [Nd] (0)

[20:47] <FROGGS_> .u U+2603

[20:47] <yoleaux> U+2603 SNOWMAN [So] (☃)

[20:48] <FROGGS_> perl6-m -e 'say "\x2603"'

[20:48] <FROGGS_> ☃

[20:48] <FROGGS_> and yes, it shows the snowman

[20:49] <TimToady> you can always throw extra .ttf files into your .fonts dir

[20:51] <TimToady> I currently have: Aegean.ttf Aegyptus_B.ttf Aegyptus_R.ttf Akkadian.ttf Analecta.ttf Anatolian.ttf Gardiner.ttf HAN NOM A.ttf HAN NOM B.ttf Maya.ttf Musica.ttf Symbola.ttf Unidings.ttf

[20:51] *** ajr_ left
[20:52] <FROGGS_> Font Awesome is missing :o)

[20:52] <itz> say "\c[WANING CRESCENT MOON SYMBOL]"

[20:52] <itz> does anyone see that?

[20:52] <FROGGS_> m: say "\c[WARNING CRESCENT MOON SYMBOL]"

[20:52] <camelia> rakudo-moar 847bd5: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/hHvN8uQR86␤Unrecognized character name WARNING CRESCENT MOON SYMBOL␤at /tmp/hHvN8uQR86:1␤------> [32msay "\c[WARNING CRESCENT MOON SYMBOL[33m⏏[31m]"[0m␤»

[20:52] <FROGGS_> m: say "\c[WANING CRESCENT MOON SYMBOL]"

[20:52] <camelia> rakudo-moar 847bd5: OUTPUT«🌘␤»

[20:53] <FROGGS_> can't see it

[20:53] <itz> I suspect few if any fonts have it :(

[20:54] <cognominal> xchat-azure shows it on my mac.

[20:54] <TimToady> firefox shows it

[20:54] <moritz> not here

[20:54] <moritz> http://irclog.perlgeek.de/perl6/2014-06-21#i_8909970 # for reference

[20:54] <FROGGS_> TimToady: not here

[20:55] <TimToady> okay, my firefox shows it

[20:55] <TimToady> my console shows it

[20:56] <TimToady> oh, wait

[20:56] <TimToady> WANING, not WARNING

[20:56] <TimToady> oh, that's what you did

[20:56] <TimToady> I'm guessing it's in Symbola

[20:57] <cognominal> safari shows it but not chrome on my mac.

[20:57] <TimToady> or maybe Unidings

[20:59] *** rindolf left
[20:59] <virtualsue> WOMM

[21:01] <virtualsue> i don't think it's news that it works on mac FF however

[21:01] <itz> yes its in both those latter two fonts (in "ttf-ancient-fonts" debian package)

[21:02] *** lucas left
[21:03] *** zakharyas joined
[21:11] *** dmol left
[21:11] <FROGGS_> TimToady: would it do any harm if I add the unspecced subbuf-rw to rakudo?

[21:17] *** ivanshmakov is now known as ivanshmakov|RST

[21:20] *** ivanshmakov joined
[21:22] *** sqirrel_ left
[21:23] *** ivanshmakov|RST left
[21:26] *** ivanshmakov left
[21:26] *** ivanshmakov joined
[21:30] *** Akagi201 joined
[21:35] *** Akagi201 left
[21:46] *** pdcawley joined
[21:53] *** bonsaikitten left
[21:55] *** xiaomiao joined
[21:57] *** itz left
[21:58] *** hoverboard joined
[22:02] *** virtualsue left
[22:05] *** virtualsue joined
[22:11] *** kivutar joined
[22:20] <TimToady> FROGGS_: That seems fine to me.

[22:27] *** BenGoldberg joined
[22:29] *** virtualsue left
[22:31] *** Akagi201 joined
[22:31] *** virtualsue joined
[22:35] *** Akagi201 left
[22:38] *** zakharyas left
[22:38] *** spider-mario left
[22:59] *** kurahaupo left
[23:01] *** kivutar left
[23:05] *** virtualsue left
[23:17] *** gfldex left
[23:26] *** xragnar is now known as Guest52745

[23:26] *** xragnar_ joined
[23:26] *** Guest52745 left
[23:26] *** xragnar_ is now known as xragnar

[23:32] *** Akagi201 joined
[23:35] *** cognominal left
[23:36] *** Akagi201 left
[23:37] *** vendethiel left
[23:40] *** vendethiel joined
[23:46] *** raiph joined
