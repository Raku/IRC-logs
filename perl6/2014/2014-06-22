[00:10] <dalek> rakudo-star-daily: 7cfed4d | coke++ | log/ (13 files):

[00:10] <dalek> rakudo-star-daily: today (automated commit)

[00:10] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/7cfed4d2cc

[00:10] <dalek> perl6-roast-data: de52682 | coke++ | / (6 files):

[00:10] <dalek> perl6-roast-data: today (automated commit)

[00:10] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/de526825db

[00:12] <vendethiel> m: for <a b c d e f> { .say if 'a' ff 'e'; }; # shouldn't work, right ?

[00:12] <camelia> rakudo-moar 847bd5: OUTPUT«a␤b␤c␤d␤e␤f␤»

[00:12] <vendethiel> m: for <a b c d e f> { .say when  'a' ff 'e'; }; # but does this ... ?

[00:12] <camelia> rakudo-moar 847bd5: OUTPUT«===SORRY!===␤Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏a' (indicated by ⏏)␤»

[00:13] <vendethiel> m: for <a b c d e f> { .say with 'a' ff 'e'; }; # but does this ... ?

[00:13] <camelia> rakudo-moar 847bd5: OUTPUT«===SORRY!=== Error while compiling /tmp/6lLaj0fqyR␤Two terms in a row␤at /tmp/6lLaj0fqyR:1␤------> for <a b c d e f> { .say ⏏with 'a' ff 'e'; }; # but does this ... ␤    expecting any of:␤        method argu…»

[00:18] <masak> having `.say when 'a' ff 'e'` work would solve oodles of use cases.

[00:18] <vendethiel> I think so.

[00:18] <vendethiel> But break sooo much consistency :D

[00:19] <masak> ...but I can't see how it would, because the things in the 'a' and 'e' positions still don't smartmatch.

[00:19] <vendethiel> masak: mmh ?

[00:22] <vendethiel> well, sleep&.

[00:22] <masak> m: macro infix:<smff>($l, $r) { quasi { $_ ~~ {{{$l}}} ff $_ ~~ {{{$r}}} } }; for 'a'..'f' { .say if 'b' smff 'e' }

[00:22] <camelia> rakudo-moar 847bd5: ( no output )

[00:23] <masak> ...I guess $_ doesn't bind right in that one.

[00:23] <masak> m: macro infix:<smff>($l, $r) { quasi { $COMPILING::_ ~~ {{{$l}}} ff $COMPILING::_ ~~ {{{$r}}} } }; for 'a'..'f' { .say if 'b' smff 'e' }

[00:23] <camelia> rakudo-moar 847bd5: OUTPUT«use of uninitialized value of type Any in string context␤use of uninitialized value of type Any in string context␤use of uninitialized value of type Any in string context␤use of uninitialized value of type Any in string context␤use of uninitialized…»

[00:23] <masak> ah, well.

[00:23] <BenGoldberg> What's ff?

[00:23] <timotimo> flip flop op

[00:24] <BenGoldberg> Ok.

[00:24] <timotimo> it carries internal state

[00:24] <masak> BenGoldberg: it turns true when the lhs is true, then stays true until the rhs is true.

[00:24] <BenGoldberg> Like perl5's scalar .. operator.

[00:25] <BenGoldberg> Which always confuses me and hurts my brain, 100% of the time I see it.

[00:26] <masak> yes, that one.

[00:26] <masak> and fff is like the scalar ... operator.

[00:28] <BenGoldberg> All I can say is that I'm glad perl6 writes flipflop differently from .. and ...

[00:30] <masak> we believe firmly in not making ops context-dependent along that particular dimension (item/list context).

[00:30] <masak> or subs/methods, for that matter.

[00:31] <BenGoldberg> I once spent a couple of frustrated hours on some perl5 code, where I had written $foo[ $x .. $#foo ], where I should have had @foo[ $x .. $#foo ]

[00:31] <masak> heh :)

[00:31] <masak> 'night, #perl6

[00:32] <BenGoldberg> 'night masak.

[00:32] *** Akagi201 joined
[00:37] *** Akagi201 left
[00:40] *** raiph left
[00:43] * [Coke] waves from Ohio.

[00:47] *** btyler joined
[00:57] *** hoverboard left
[01:02] * geekosaur waves at [Coke] en passant

[01:04] <[Coke]> ~~

[01:05] *** hoverboard joined
[01:14] *** Su-Shee_ joined
[01:17] *** Su-Shee left
[01:18] *** klapperl_ joined
[01:21] *** grondilu joined
[01:22] <grondilu> about prefix:<+>, in S03:  « For values that do not already do the "Numeric" role, the narrowest appropriate type of "Int", "Rat", "Num", or "Complex" will be returned;

[01:22] <grondilu> »

[01:22] <grondilu> So for instance:

[01:22] <grondilu> r: say (+"3.0").WHAT

[01:22] <camelia> rakudo-{parrot,jvm,moar} 847bd5: OUTPUT«(Rat)␤»

[01:22] *** klapperl left
[01:23] <grondilu> but for constistency shouldn't prefix:<+> also returned a narrow value when called with a Numeric argument? 

[01:23] <grondilu> hang on

[01:24] <grondilu> shouldn't  +"3.0" be an Int according to spec?

[01:24] *** hoverboard is now known as moistcherry

[01:25] * grondilu basically thinks prefix:<+> should always narrow 

[01:27] * grondilu thought of that while thinking of http://rosettacode.org/wiki/Test_integerness

[01:27] * grondilu would have liked to test integerness with +$x ~~ Int

[01:31] *** FROGGS__ joined
[01:31] <grondilu> well on second thought that's probably not a good idea.  If someone writes a literal value as 3.0, he *wants* a Num an not an Int, and prefix:<+> should not change that I guess.

[01:33] *** Sqirrel left
[01:33] *** Akagi201 joined
[01:34] *** Sqirrel joined
[01:34] *** FROGGS_ left
[01:38] *** Akagi201 left
[01:43] *** Akagi201 joined
[01:43] *** Akagi201 left
[01:51] *** Akagi201 joined
[01:51] *** moistcherry is now known as siriustar

[01:53] *** telex left
[01:54] *** telex joined
[02:15] *** skids joined
[02:34] *** noganex joined
[02:37] *** noganex_ left
[03:03] *** benabik joined
[03:04] *** yogan_ left
[03:04] *** Juerd left
[03:05] *** yogan joined
[03:06] *** Juerd joined
[03:45] *** rindolf joined
[03:46] *** cognominal joined
[03:47] *** siriustar is now known as hoverboard

[03:49] *** benabik left
[03:53] <Mouq> grondilu: Isn't that why .narrow exists?

[04:01] <Mouq> moritz: That looks.. like exactly what I want to write but better :) I'll be happy to steal from it :) though maybe not tonight

[04:02] <Mouq> (RE:: http://irclog.perlgeek.de/perl6/2014-06-21#i_8908219)

[04:04] *** lizmat_ joined
[04:07] *** lizmat left
[04:16] <dalek> perl6-bench: 390b19d | (Geoffrey Broadwell)++ | bench:

[04:16] <dalek> perl6-bench: Show tag dates in `bench list-tags`

[04:16] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/390b19dce8

[04:16] <dalek> perl6-bench: 3d4ae2a | (Geoffrey Broadwell)++ | timeall:

[04:16] <dalek> perl6-bench: Much less broken commit time detection in timeall

[04:16] <dalek> perl6-bench: 

[04:16] <dalek> perl6-bench: After this commit, you should rerun timings so that upcoming history

[04:16] <dalek> perl6-bench: comparison functionality will work properly.

[04:16] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/3d4ae2ae39

[04:16] <dalek> perl6-bench: e6f852b | (Geoffrey Broadwell)++ | / (2 files):

[04:16] <dalek> perl6-bench: First (text format) support for history comparison

[04:16] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/e6f852b95d

[04:20] <japhb> .tell timotimo New perl6-bench command `bench history` ought to interest you.  Ping me if you need help.  :-) 

[04:20] <yoleaux> japhb: I'll pass your message to timotimo.

[04:20] <japhb> .tell timotimo html and html_plot versions coming when I get another good hack session.

[04:20] <yoleaux> japhb: I'll pass your message to timotimo.

[04:36] *** virtualsue joined
[04:54] *** atroxaper joined
[04:54] *** atroxaper left
[04:58] *** virtualsue left
[05:02] *** kaare_ joined
[05:05] *** rurban_ left
[05:06] *** rurban_ joined
[05:08] *** araujo left
[05:17] *** Khisanth left
[05:37] *** BenGoldberg left
[05:38] *** Khisanth joined
[05:38] <dalek> roast: b3fdfeb | (David Warring [email@hidden.address] | integration/advent2011-day20.t:

[05:38] <dalek> roast: adding advent 2011 day 20

[05:38] <dalek> roast: review: https://github.com/perl6/roast/commit/b3fdfeb3fe

[05:39] *** btyler_ joined
[05:42] *** btyler left
[05:43] *** Khisanth left
[05:47] *** REPLeffect left
[05:53] *** darutoko joined
[06:06] *** gfldex joined
[06:08] *** Khisanth joined
[06:11] *** dalek left
[06:11] *** [particle]1 joined
[06:11] *** dalek joined
[06:11] *** ChanServ sets mode: +v dalek

[06:12] *** [particle] left
[06:14] *** SevenWolf left
[06:14] *** SevenWolf joined
[06:35] *** silug left
[06:50] *** silug joined
[06:51] *** Sqirrel left
[06:52] *** btyler_ left
[07:02] *** lizmat_ left
[07:03] *** lizmat joined
[07:07] *** woolfy left
[07:11] *** mr-foobar joined
[07:14] <FROGGS__> m: "foo".encode ~ 42 # why does that what it does?

[07:14] <camelia> rakudo-moar 847bd5: OUTPUT«(signal )»

[07:14] *** nnunley left
[07:21] *** woolfy joined
[07:22] *** FROGGS__ left
[07:25] <dalek> rakudo/nom: 25c1e5d | (Tobias Leich)++ | src/core/Buf.pm:

[07:25] <dalek> rakudo/nom: add subbuf-rw, an lvalue subbuf like we have a substr-rw for strings

[07:25] <dalek> rakudo/nom: 

[07:25] <dalek> rakudo/nom: The replacement must be a Blob and this sub needs to be specced.

[07:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/25c1e5deb0

[07:27] *** FROGGS__ joined
[07:27] *** virtualsue joined
[07:30] *** itz joined
[07:57] *** felher left
[07:58] *** felher joined
[08:02] *** dayangkun joined
[08:04] *** erkan joined
[08:04] *** erkan left
[08:04] *** erkan joined
[08:04] *** hoverboard left
[08:15] *** kivutar joined
[08:17] *** kurahaupo joined
[08:25] *** virtualsue left
[08:29] <masak> antenoon, #perl6

[08:33] <moritz> \o masak 

[08:34] *** itz left
[08:35] <masak> so quiet -- guess people are at YAPC::NA and stuff.

[08:40] <moritz> it's Sunday :-)

[08:44] <vendethiel> wrt "writing ff" : it's better than `..`, but it's harder to read because it doesn't stand out

[08:45] *** nnunley joined
[08:45] <moritz> rename it infix:<FLIPFLOP>

[08:47] <FROGGS__> my expectation when seeing ff is that is a sub and not an infix

[08:49] *** nnunley left
[08:54] *** SevenWolf left
[08:55] <vendethiel> moritz: well, I could. But I don't think it helps that much

[08:55] <moritz> vendethiel: then it would stand out

[08:56] <vendethiel> ... unless something else than "FLIPFLOP3 is in caps

[08:57] *** virtualsue joined
[09:02] *** virtualsue left
[09:03] *** virtualsue joined
[09:06] <moritz> well, Perl 6 takes care to only upper-case things that should stand out

[09:06] <moritz> if your own code use lots of all-caps, you're screwed

[09:07] <moritz> but of course you can write code to defeat any technique to make things stand out :-)

[09:10] <vendethiel> moritz: YES INDEED DOT GOOD POINT COLON CLOSING PAREN

[09:10] <vendethiel> .oO( we've already gone back to CL-style naming ? )

[09:19] *** virtualsue_ joined
[09:19] *** virtualsue left
[09:19] *** virtualsue_ is now known as virtualsue

[09:23] *** dmol joined
[09:35] *** itz joined
[09:35] *** virtualsue_ joined
[09:36] *** virtualsue left
[09:36] *** virtualsue_ is now known as virtualsue

[09:38] *** psch joined
[09:38] <psch> hi #perl6 

[09:38] <masak> hi psch!

[09:39] <psch> masak o/

[09:39] <psch> https://gist.github.com/peschwa/cb2a142e49afce7a260c

[09:39] <psch> there's a few spots im not clear on the spec though

[09:40] <psch> for example, tr/// returning False seems weird, but happens in nom for s/// as well

[09:40] <psch> on moar and parrot that is

[09:41] <psch> at least locally

[09:41] <psch> maybe that's a platform thing again? :/

[09:42] <psch> also i think 'whitespace characters are taken literally' and 'The .. range sequence is the only metasyntax' clash for ranges that start or end on a whitespace

[09:43] <psch> this is all related to RT #62064, fyi

[09:43] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=62064

[09:45] *** virtualsue left
[09:46] <psch> oh, and tr[][] (and tr{}{}, and i guess other paired delims) also work

[09:47] *** virtualsue joined
[09:47] *** Psyche^_ joined
[09:47] <masak> I have no idea why that `False` would be useful.

[09:49] <masak> the action method seems to generate the moral equivalent of `$_ = .trans($from, $to);`

[09:50] <masak> which... shouldn't be False.

[09:51] *** Psyche^ left
[09:54] <psch> masak: i updated the gist; i'm seeing the same behavior for s/// in the repl; my tr/// implementation still gives False when called from -e though

[09:55] <psch> where the repl for s/// is "upstream" nom

[10:06] <psch> https://github.com/peschwa/rakudo/compare/implement_tr # this is my branch, for reference

[10:07] <psch> mostly oriented myself on how s/// works... :)

[10:11] <psch> wrt spec: the delimiter for tr shouldn't change behavior i assume? i.e. tr[][] still only accepts exactly one string for search and replacement each

[10:15] <masak> sure.

[10:16] *** virtualsue_ joined
[10:16] *** virtualsue left
[10:17] *** virtualsue_ is now known as virtualsue

[10:18] *** breinbaas left
[10:24] *** virtualsue left
[10:29] *** punter joined
[10:30] <punter> I want to make a Jabber server (for my site). I'm a Perl 5 programmer. Do you think it's possible to make it in Perl 6? Does Perl 6 have the networking features needed?

[10:30] <punter> I can do it in AnyEvent of Perl5. Does Perl 6 have something similar?

[10:33] *** nnunley joined
[10:36] <psch> punter: perl6 does have working sockets and you i think you can write event-based programms with supplies

[10:36] <psch> but i'm no expert and there might be a better answer

[10:37] *** itz left
[10:37] *** nnunley left
[10:43] *** dayangkun left
[10:43] <moritz> punter: rakudo's async and socket support might be a bit too unstable atm

[10:43] <punter> ok

[10:43] <moritz> punter: if you want something production ready quickly, p5 is still the safer better

[10:43] <punter> thanks

[10:45] *** Su-Shee_ is now known as Su-Shee

[10:48] *** ivanshmakov left
[10:51] *** dayangkun joined
[10:55] *** atroxaper joined
[11:01] *** kaare__ joined
[11:01] <atroxaper> Hello, #perl6 !

[11:01] <atroxaper> use Test; role Role { multi method gist() {return 'GIST';}}; class Class does Role {}; say Role.new; is Role.new, 'GIST', 'works well'

[11:01] <atroxaper> m: use Test; role Role { multi method gist() {return 'GIST';}}; class Class does Role {}; say Role.new; is Role.new, 'GIST', 'works well'

[11:01] <camelia> rakudo-moar 25c1e5: OUTPUT«GIST␤not ok 1 - works well␤#      got: 'Role<140591977373584>'␤# expected: 'GIST'␤»

[11:02] <atroxaper> Why 'is' doesn't call gist?

[11:04] <moritz> because .gist is only the default stringification for say()

[11:04] <moritz> the rest uses .Str

[11:04] *** kaare_ left
[11:04] <atroxaper> Can I override Str?

[11:07] <atroxaper> Yes. Thanks.

[11:09] <vendethiel> no problem :)

[11:13] *** itz joined
[11:13] *** virtualsue joined
[11:19] *** virtualsue left
[11:19] *** virtualsue joined
[11:20] *** punter left
[11:27] *** virtualsue left
[11:43] *** Alina-malina left
[11:44] *** Alina-malina joined
[12:04] *** lucas joined
[12:05] *** virtualsue joined
[12:08] *** atroxaper left
[12:08] *** atroxaper joined
[12:15] *** BenGoldberg joined
[12:21] *** nnunley joined
[12:25] *** punter joined
[12:25] *** punter left
[12:26] *** dayangkun left
[12:26] *** nnunley left
[12:34] * masak wonders what the biggest obstacle would be for unifying .gist and .Str

[12:35] *** virtualsue left
[12:35] <masak> hello from a train, by the way :)

[12:35] * vendethiel whispers "I like trains"

[12:40] *** spider-mario joined
[12:47] *** kaare__ left
[13:00] <tadzik> WZOOM

[13:01] <dalek> specs: 03a91ba | (Elizabeth Mattijsen)++ | S32-setting-library/Containers.pod:

[13:01] <dalek> specs: Spec Buffer.subbuf-rw

[13:01] <dalek> specs: review: https://github.com/perl6/specs/commit/03a91bada1

[13:01] <Su-Shee> *hihi* you're all going to love the ypac staff t-shirts: https://pbs.twimg.com/media/BqsH2TcCYAEHHlQ.jpg :)

[13:02] <tadzik> :D

[13:03] <Su-Shee> love it. want one of those :)

[13:05] *** Alina-malina left
[13:06] *** Alina-malina joined
[13:07] <dalek> rakudo/nom: 49ab1d8 | (Elizabeth Mattijsen)++ | t/spectest.data:

[13:07] <dalek> rakudo/nom: Add advent2011/day20 tests

[13:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/49ab1d89e2

[13:07] <lizmat> masak: simple: make say use .gist, run the spectest, see what breaks

[13:09] <lizmat> *.Str  :-)

[13:14] *** atroxaper left
[13:14] *** atroxaper joined
[13:16] *** ivanshmakov joined
[13:17] <masak> lizmat: worth a shot.

[13:18] *** rindolf left
[13:19] *** atroxaper left
[13:20] <lizmat> already running spectest

[13:21] *** Rotwang left
[13:22] <TimToady> the intent of gist is to be a tl;dr

[13:22] <TimToady> the intent of .Str is to be completist

[13:22] <TimToady> this is a pragmatic distinction, not driven by the fact that there's a large overlap for short values

[13:23] <TimToady> nor by the fact that the spec tests aren't good at testing pragmatics

[13:23] *** ivanshmakov left
[13:23] *** ivanshmakov joined
[13:23] <TimToady> so I don't see that it'll prove much

[13:24] * TimToady heads back to his talk-writing corner

[13:24] <lizmat> masak: https://gist.github.com/lizmat/23162d0031578a2eeb56

[13:25] * lizmat does a git reset --hard

[13:25] *** SamuraiJack joined
[13:27] *** SamuraiJack_ joined
[13:30] *** ivanshmakov left
[13:31] *** SamuraiJack left
[13:33] *** ivanshmakov joined
[13:35] *** BenGoldberg left
[13:42] *** kurahaupo left
[13:45] *** virtualsue joined
[13:49] *** kaare__ joined
[13:51] *** kaare__ is now known as kaare_

[13:54] *** SamuraiJack_ left
[13:54] <dalek> roast: fedf27b | (Elizabeth Mattijsen)++ | S22-package-format/local (2 files):

[13:54] <dalek> roast: Initial testing on CompUnitRepo::Local::File

[13:54] <dalek> roast: review: https://github.com/perl6/roast/commit/fedf27b174

[13:58] *** grondilu left
[14:01] *** virtualsue left
[14:02] *** virtualsue joined
[14:03] <amirite> @mxit

[14:03] *** amirite left
[14:08] *** virtualsue left
[14:11] *** virtualsue joined
[14:12] *** zakharyas joined
[14:14] *** guru joined
[14:14] *** guru is now known as Guest24311

[14:14] *** Guest24311 is now known as ajr_

[14:20] <dalek> rakudo/nom: 9017529 | (Elizabeth Mattijsen)++ | / (4 files):

[14:20] <dalek> rakudo/nom: Add skeleton CompUnit class

[14:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9017529011

[14:26] *** woolfy left
[14:32] *** lizmat left
[14:33] *** virtualsue left
[14:33] *** virtualsue_ joined
[14:34] *** virtualsue_ is now known as virtualsue

[14:36] <hoelzro> I'm writing a module that allows users to declare methods as commands for a CLI, so I don't want the user to be able to declare duplicates

[14:37] <hoelzro> is there something I can hook into when the class is "closed" so I can detect this situation?

[14:40] *** itz_ joined
[14:40] <masak> m: say Int.HOW.^methods

[14:40] <camelia> rakudo-moar 49ab1d: OUTPUT«No such method 'gist' for invocant of type 'NQPRoutine'␤  in method gist at src/gen/m-CORE.setting:7190␤  in sub say at src/gen/m-CORE.setting:13769␤  in block  at /tmp/SRwb3KffnC:1␤␤»

[14:41] <masak> grrbl.

[14:41] <masak> anyway, it seems to me you should be able to override .add_method or something in a custom ClassHOW.

[14:47] <hoelzro> hmm

[14:47] <hoelzro> well, that would require the user to be aware of this, right?

[14:47] <hoelzro> this is what I'm going for: https://gist.github.com/hoelzro/d552753137568ac5285c

[14:47] <hoelzro> I was thinking I could monkey with the HOW of App::Subcommand to achieve my goal

[14:49] <masak> yes, something like that was what I had in mind.

[14:50] *** darutoko left
[14:56] <psch> well, i got a tr/// that always returns True, instead of the previous False. it's spec'd - by omission - to return the number of replaced or deleted characters though

[14:57] <psch> i can't seem to keep the original lhs for smart match calls for any comparison

[14:59] *** lizmat joined
[15:03] *** atroxaper joined
[15:12] <atroxaper> haw can I continue search in string by regex? Something like qq{ while 'abcd

[15:12] *** xfix_ joined
[15:12] *** xfix left
[15:12] <atroxaper> haw can I continue search in string by regex? Something like qq[ while 'abcd' ~~ m/ (.) {say $0;} ]

[15:13] *** xfix_ is now known as xfix

[15:14] <psch> m: 'foo' ~~ m/ (.)+ { say $0 } / # this at least does your example 

[15:14] <camelia> rakudo-moar 49ab1d: OUTPUT«｢f｣␤ ｢o｣␤ ｢o｣␤␤»

[15:14] <psch> although i'm pretty sure there's an XY-problem here somewhere

[15:15] <atroxaper> psch: I think it's good enought :-)

[15:23] <psch> glad to help :)

[15:25] *** vendethiel left
[15:34] *** uniejo joined
[15:34] *** denis_boyun joined
[15:38] *** mr-foobar left
[15:39] *** uniejo left
[15:40] <dalek> specs: 2d0d5ac | (Elizabeth Mattijsen)++ | S22-package-format.pod:

[15:40] <dalek> specs: Some more elaboration about CompUnit class

[15:40] <dalek> specs: review: https://github.com/perl6/specs/commit/2d0d5ac1da

[15:47] *** uniejo joined
[15:51] *** uniejo left
[15:51] *** uniejo joined
[15:55] *** darutoko joined
[15:55] *** xinming joined
[15:58] *** xinming_ left
[16:00] *** colomon left
[16:03] *** itz_ left
[16:07] *** colomon joined
[16:21] *** dayangkun joined
[16:28] *** molaf_ joined
[16:30] *** uniejo left
[16:30] *** uniejo joined
[16:31] *** molaf__ left
[16:42] *** thou joined
[16:44] <japhb> .ask timotimo Did you write nqp/richards yourself, or does it come from somewhere else?  (And if so, where?  I want to make sure I have a proper copyright note for it.)

[16:44] <yoleaux> japhb: I'll pass your message to timotimo.

[16:46] *** zakharyas left
[16:48] *** xinming left
[16:48] *** xinming joined
[16:56] *** xinming_ joined
[16:58] *** atroxaper left
[16:59] *** xinming left
[17:01] *** toddr_ joined
[17:08] *** user3 joined
[17:08] *** Akagi201 left
[17:11] <japhb> .ask timotimo Wait, did nqp/richards in perl6-bench ever actually work?  I get some strange error messages from it on nqp-m ....

[17:11] <yoleaux> japhb: I'll pass your message to timotimo.

[17:12] *** ajr_ left
[17:24] <masak> atroxaper: I would just do `for $str.comb(/pattern/) -> $match { ... }`

[17:24] *** user3 left
[17:27] *** toddr_ left
[17:28] <lizmat> lunch&

[17:28] *** lizmat left
[17:28] *** Sqirrel joined
[17:41] *** dayangkun left
[17:52] <timotimo> japhb: i ported it from the pypy benchmark suite

[17:52] <yoleaux> 04:20Z <japhb> timotimo: New perl6-bench command `bench history` ought to interest you.  Ping me if you need help.  :-)

[17:53] <yoleaux> 04:20Z <japhb> timotimo: html and html_plot versions coming when I get another good hack session.

[17:53] <yoleaux> 16:44Z <japhb> timotimo: Did you write nqp/richards yourself, or does it come from somewhere else?  (And if so, where?  I want to make sure I have a proper copyright note for it.)

[17:53] <yoleaux> 17:11Z <japhb> timotimo: Wait, did nqp/richards in perl6-bench ever actually work?  I get some strange error messages from it on nqp-m ....

[17:53] <timotimo> i think it worked at at least one point

[17:53] <timotimo> but i didn't have the patience to port it

[17:56] *** virtualsue left
[17:57] <timotimo> http://media.ccc.de/browse/conferences/gpn/gpn14/gpn14_-_5869_-_de_-_medientheater_-_201406202130_-_perl_6_-_timo.html - this is my perl6 talk, in german and quite chaotic

[17:57] <dalek> rakudo/nom: 4459c54 | (Tobias Leich)++ | src/core/Buf.pm:

[17:57] <dalek> rakudo/nom: add unpack directives "a" and "Z"

[17:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4459c548d8

[17:58] *** virtualsue joined
[18:01] *** malkaroee joined
[18:02] *** Akagi201 joined
[18:02] *** malkaroee left
[18:03] *** guru joined
[18:04] *** guru is now known as Guest28395

[18:04] *** Guest28395 is now known as ajr_

[18:07] *** Akagi201 left
[18:13] *** nnunley joined
[18:14] *** mr-foobar joined
[18:14] <japhb> timotimo: Do you remember which nqp backend you used when you got it to work the first time?  I'm trying to determine if it's just nqp-m that doesn't like it ....

[18:15] *** zakharyas joined
[18:17] <timotimo> hmm, depends on when i did it, maybe parrot, but possibly moar.

[18:21] <timotimo> wait, do we even have mutable bufs?

[18:23] <colomon> shift_pmc() not implemented in class 'Continuation'

[18:23] <colomon>   in block  at bin/panda:21

[18:23] <colomon>   in sub MAIN at bin/panda:19

[18:23] * colomon has been having major problems smoking parrakudo the last few days.

[18:23] <timotimo> o_O

[18:26] <colomon> Tuesday the 17th was the last time I did a successful full smoke run.  Took me a few days to notice because my laptop was at Apple for repairs.

[18:32] * [Coke] waves from I94.

[18:32] *** xdoctor joined
[18:35] <[Coke]> II actually have pretty decent internet, considering I'm on the highway.

[18:36] <dalek> rakudo-star-daily: b06f95b | coke++ | log/ (13 files):

[18:36] <dalek> rakudo-star-daily: today (automated commit)

[18:36] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/b06f95b061

[18:36] <dalek> perl6-roast-data: 39dffd3 | coke++ | / (6 files):

[18:36] <dalek> perl6-roast-data: today (automated commit)

[18:36] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/39dffd36b8

[18:36] <colomon> [Coke]: I94!  That's like home!

[18:37] * colomon lives a couple hours away from it now, but grew up 30 minutes' drive from the east end of I94, and then lived only a mile from I94 for most of the Naughts.

[18:38] <[Coke]> colomon: heading SW now, ooping around the lake.

[18:38] <colomon> [Coke]: Lake Michigan, I presume?

[18:38] <[Coke]> colomon: we were at lake erie earlier today.

[18:38] <[Coke]> and now we're at that one, yes.

[18:39] <colomon> Great Lakes++

[18:39] <colomon> afk # quick run into town, back very shortly

[18:43] *** kivutar left
[18:45] *** darutoko left
[18:47] *** vendethiel joined
[18:54] *** amkrankruleuen left
[18:55] *** kill joined
[18:55] *** kill is now known as amkrankruleuen

[18:55] *** hoverboard joined
[18:58] <FROGGS__> .tell lizmat subbuf-rw is just a sub like substr-rw is only a sub, not a method

[18:58] <yoleaux> FROGGS__: I'll pass your message to lizmat.

[18:58] *** virtualsue left
[18:59] *** virtualsue joined
[19:00] <masak> colomon: didn't nqp upgrade its Parrot dep just a few days ago?

[19:01] <masak> colomon: ah, yes nqp's adf65bfd24f70a05459478397e5f54eb754bbfd1.

[19:01] *** xfix left
[19:01] <masak> colomon: would be interesting to see if the problems go away if you build before that commit.

[19:02] *** xfix joined
[19:03] *** Akagi201 joined
[19:05] <[Coke]> no rakudo's testing clean today

[19:05] <[Coke]> *rakudos

[19:07] *** Akagi201 left
[19:08] *** xfix left
[19:09] *** xfix joined
[19:09] *** xfix left
[19:09] *** xfix joined
[19:10] <dalek> modules.perl6.org: 1076951 | (Tim Smith)++ | web/ (9 files):

[19:10] <dalek> modules.perl6.org: Clearer badge icons

[19:10] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/10769519ba

[19:13] *** zakharyas left
[19:14] <colomon> [Coke]: was that, "No, the rakudos are testing clean today," or "No rakudos are testing clean today"? 

[19:16] *** itz left
[19:16] <colomon> masak: I'm trying to build bcd1861857db94a74afbd7ff6e43d87cc6878fe7 now (June 18th, before NQP bumps, I think)

[19:23] * masak just got another spesh fail, this time when running from -e

[19:23] <masak> building latest and trying again.

[19:29] <colomon> okay, bcd1861857db94a74afbd7ff6e43d87cc6878fe7 installs panda correctly.

[19:31] *** vendethiel left
[19:31] *** vendethiel- joined
[19:31] *** vendethiel- is now known as vendethiel

[19:32] <vendethiel> nice new badges :)

[19:33] *** mr-foobar left
[19:34] *** mr-foobar joined
[19:36] <cognominal> indeed

[19:40] <thou> Good, I'm glad they are well-received

[19:41] <thou> I am *not* a graphic designer, so I won't be offended if the community wants them reverted or tweaked.

[19:43] *** lizmat joined
[19:45] <cognominal> thou, is there a pointer back from http://modules.perl6.org/ to the program that generated it?

[19:47] <thou> cognominal: Yes, there's a pointer to github.com/perl6/modules.perl6.org repo

[19:48] *** kaare_ left
[19:48] <thou> … at the bottom of the page

[19:49] <cognominal> ho, I did not notice that contained the program as well as the data.

[19:49] <cognominal> thou++

[19:49] <thou> hey, ho! let's go!

[19:50] *** labster joined
[19:51] *** mr-foobar left
[19:51] *** xfix_ joined
[19:51] *** xfix left
[19:52] <colomon> hmm, panda build works on parrot-d45fccdbaf74f13207bf9118a6dfd9d158108a3f too

[19:52] *** mr-foobar joined
[19:53] *** lizmat left
[19:58] <lucas> Hello. Is "my Dog $spot = $spot.new;" right or wrong? S02 says ".=" is rewritten into this but S03 say it's an invalid self-reference.

[19:59] *** ivanshmakov left
[19:59] <vendethiel> p6: class A {}; my A $a = $a.new;

[19:59] <camelia> rakudo-jvm 4459c5: OUTPUT«(timeout)»

[19:59] <camelia> ..rakudo-{parrot,moar} 4459c5, niecza v24-109-g48a8de3: ( no output )

[20:00] *** lizmat_ joined
[20:01] *** ivanshmakov joined
[20:04] *** Akagi201 joined
[20:04] *** labster left
[20:05] *** labster joined
[20:06] <moritz> lucas: looks correct to me

[20:06] <moritz> lucas: the variable is declared as soon as it's parsed

[20:07] <vendethiel> lucas: where does S03 say it's an invalid ref ?

[20:07] *** xfix_ is now known as xfix

[20:08] *** Akagi201 left
[20:09] <lucas> S03-operators.pod: 5072: my Dog $fido = $fido.new; # wrong: invalid self-reference

[20:10] *** lizmat_ is now known as lizmat

[20:10] <lucas> should it be changed? s/wrong: invalid/okay/ ?

[20:11] <colomon> hmmm

[20:12] <psch> makes sense to me, fwiw; as moritz says variables are declared when parsed, and typed variables get instantiated with the type object

[20:12] <moritz> though caution is required

[20:12] <moritz> it might be that the variable on RHS is actually the one from the proto lexpad, not from the runtime lexpad

[20:12] <moritz> I'm not sure here

[20:13] <jnthn> Good evening from the north o/

[20:13] <moritz> m: my Int $x = do { say $x; 42 }

[20:13] <camelia> rakudo-moar 4459c5: OUTPUT«(Int)␤»

[20:13] <moritz> \o jnthn 

[20:13] <psch> hi jnthn

[20:13] <colomon> \o

[20:13] <moritz> m: my Int $x = do { BEGIN { $x = 23 }; say $x; 42 }

[20:13] <camelia> rakudo-moar 4459c5: OUTPUT«23␤»

[20:14] *** breinbaas joined
[20:14] * moritz isn't sure whether that tells us anything

[20:14] <lizmat> jnthn o/

[20:14] <yoleaux> 18:58Z <FROGGS__> lizmat: subbuf-rw is just a sub like substr-rw is only a sub, not a method

[20:14] <lizmat> and good * from the south

[20:15] * moritz guesses he is south from the north, but no idea how he compares to lizmat's south

[20:15] <lizmat> moritz: as in Orlando, FL

[20:15] <moritz> lizmat: oh. I'm guess I'm noth, then :-)

[20:16] * jnthn is almost in the arctic

[20:16] <jnthn> It's still rather light outside. :)

[20:16] <TimToady> last week at Key West the sun was pretty much straight up

[20:17] <lizmat> TimToady: is there a reason we don't have substr-rw and/or subbuf-rw as a method ?

[20:18] <moritz> lizmat: I think it's because sub{str,buf}-rw are mostly p5isms, and p5 doesn't do methods on value "types"

[20:19] <lizmat> subbuf most definitely is new

[20:19] <lizmat> but join is a p5ism, and we have a .join method

[20:19] <TimToady> lizmat: the only reason is a foolish inconsistency :)

[20:19] <lizmat> ok, so you won't mind if I make it consistent ?

[20:19] <masak> jnthn \o

[20:20] <TimToady> nope

[20:20] * vendethiel just learned he wouldn't be in france when YAPC::EU happens

[20:20] <jnthn> Well, there is the thing that method calls on a scalar are normally seen as being on the value, not on the container...

[20:20] <lizmat> vendethiel: that's because YAPC::EU is in Sofia?

[20:20] <vendethiel> lizmat: haha, no, not in sofia either

[20:20] <vendethiel> I'm not here in august

[20:20] <TimToady> jnthn: true

[20:20] <lizmat> so you mean you can't make it to YAPC::EU  :-(

[20:21] <vendethiel> (my only holidays in 2 years :(.)

[20:21] <vendethiel> yea :(

[20:21] <lizmat> jnthn, TimToady: $ ack '.substr' src/core | wc -l

[20:21] <lizmat>      103

[20:21] <lizmat> actually:

[20:21] <lizmat> $ ack '\.substr' src/core | wc -l

[20:21] <lizmat>       50

[20:22] <TimToady> jnthn's point is that it would have to be a VAR-like macro in order to make it an lvalue

[20:22] <lizmat> so substr is being used as a method in the core settings

[20:22] <TimToady> .substr can just deal with the value rather than the container

[20:23] *** uniejo left
[20:23] <TimToady> strings being immutable, we emulate mutation in the container

[20:23] <lizmat> right, so using it as a method, gives the wrong idea

[20:23] *** woolfy joined
[20:23] <TimToady> (buffers are supposed to be mutable, of course)

[20:23] <TimToady> so it actually more sense for bufs than for strs

[20:23] <moritz> but, we should totally have the 4-arg substr as a method

[20:24] <moritz> $str.substr($from, $to, $replacment)

[20:24] <moritz> which just returns the new string

[20:24] <TimToady> and you use .= to mutate

[20:24] *** mathw left
[20:25] * colomon is starting to suspect his parrakudo problems have something to do with a borked install

[20:25] <lucas> p6: class A {}; my A $a .= new; say 'alive';

[20:25] *** mathw joined
[20:25] <camelia> niecza v24-109-g48a8de3: OUTPUT«Potential difficulties:␤  $a is declared but not used at /tmp/tmpfile line 1:␤------> class A {}; my A ⏏$a .= new; say 'alive';␤␤alive␤»

[20:25] <camelia> ..rakudo-{parrot,jvm,moar} 4459c5: OUTPUT«alive␤»

[20:25] <lucas> p6: class A {}; my A $a = $a.new; say 'alive';

[20:26] <camelia> rakudo-{parrot,jvm,moar} 4459c5, niecza v24-109-g48a8de3: OUTPUT«alive␤»

[20:26] *** uniejo joined
[20:30] <lizmat> TimToady: so yes to .subbuf-rw, but no to .substr-rw ?

[20:36] *** uniejo left
[20:36] *** denis_boyun left
[20:36] *** denis_boyun joined
[20:38] *** silug left
[20:39] <dalek> modules.perl6.org: 7f0ccaa | (Tim Smith)++ | web/readme.png:

[20:39] <dalek> modules.perl6.org: Fix blurry readme.png icon

[20:39] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/7f0ccaa9a7

[20:39] <dalek> modules.perl6.org: 40f0e18 | (Tim Smith)++ | web/ (4 files):

[20:39] <dalek> modules.perl6.org: Give badge icons a bit more breathing room

[20:39] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/40f0e18fb0

[20:41] *** uniejo joined
[20:48] <dalek> perl6-bench: e99a064 | (Geoffrey Broadwell)++ | / (4 files):

[20:48] <dalek> perl6-bench: Add rc-self-describing-numbers minibenchmark

[20:48] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/e99a06419d

[20:49] *** silug joined
[20:51] <masak> $ perl6 -e 'for ^13 { for ^0 {}; (my $)++ }'

[20:51] <masak> Spesh: failed to fix up handlers (134, -1, 156)

[20:51] <masak> (locally, on a fresh build)

[20:51] <masak> This is perl6 version 2014.06-11-g4459c54 built on MoarVM version 2014.05-2-gb1add28

[20:52] <nwc10> was about to go to bed so can't add anything to

[20:52] *** ajr_ left
[20:52] <nwc10> "doesn't (not) work on my machine"

[20:53] <nwc10> This is perl6 version 2014.06-11-g4459c54 built on MoarVM version 2014.06-6-gd2e0732

[20:53] <nwc10> ./perl6-m -e 'for ^13 { for ^0 {}; (my $)++ }'

[20:53] * nwc10 see no output

[20:54] <vendethiel> m: for ^13 { for ^0 {}; (my $)++ }

[20:54] <camelia> rakudo-moar 4459c5: ( no output )

[20:54] <jnthn> masak: 2014.05-2? That's...strangely old, no?

[20:55] <jnthn> Also, I'm sure I already fixed bugs giving that error...

[20:55] <nwc10> masak: my MoarVM seems to be 4 commits newer than yors

[20:56] <jnthn> 4 commit *and a month*

[20:56] <nwc10> oh yes. oops

[20:56] <nwc10> I am clearly not very useful and shall go to bed.

[20:56] <jnthn> :)

[20:56] <nwc10> Good night world.

[20:56] * jnthn should do similar soon

[20:58] <lizmat> goodnight nwc10, jnthn 

[21:04] *** Akagi201 joined
[21:05] *** labster left
[21:09] *** Akagi201 left
[21:12] *** Mouq left
[21:15] <lucas> I'm still a little lost on the specs; can someone tell me where does it says that an our-scoped variable cannot have a type constraint? Example: "our Foo $foo;". Does this makes sense?

[21:21] <FROGGS__> lucas: I don't see why type constraints on our scoped vars should be forbidden...

[21:21] <lizmat> I'm not sure, but maybe because 'our' variables are more like dynamic variables, and thus basically runtime determined?

[21:21] <FROGGS__> and... I can't find anything about that in the spec

[21:22] <lizmat> FROGGS__: good to see you awake:

[21:22] <FROGGS__> hi lizmat 

[21:22] <timotimo> lizmat: er, what?

[21:22] <lizmat> do we support use Foo:from<nqp> already?

[21:22] <lizmat> and if so, where in the code is that handled?

[21:23] <FROGGS__> m: use QAST:from<NQP>; my Mu $q := QAST::Op.new(); say $q.HOW.name($q)

[21:23] <camelia> rakudo-moar 4459c5: OUTPUT«QAST::Op␤»

[21:23] <FROGGS__> in src/Perl6/ModuleLoader, at the top of load_module

[21:24] <dalek> rakudo/nom: a7b4cba | (Elizabeth Mattijsen)++ | src/core/CompUnit.pm:

[21:24] <dalek> rakudo/nom: Some more work on CompUnit, not yet functional

[21:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a7b4cbaa5a

[21:24] <lizmat> okidoki

[21:24] *** HaraldJoerg joined
[21:25] <lucas> FROGGS__: I don't see why also. I don't know if it is specced or not. Rakudo died with a message "Cannot put a type constraint on an 'our'-scoped variable"

[21:25] <FROGGS__> lucas: right, but std does not

[21:26] <FROGGS__> our Foo $foo; # niecza

[21:26] <FROGGS__> n: our Foo $foo; # niecza

[21:26] <camelia> niecza v24-109-g48a8de3: OUTPUT«===SORRY!===␤␤Malformed our at /tmp/SU6kFuPnSj line 1:␤------> our⏏ Foo $foo; # niecza␤␤Parse failed␤␤»

[21:26] <FROGGS__> n: our Int $foo; # niecza

[21:26] <camelia> niecza v24-109-g48a8de3: OUTPUT«===SORRY!===␤␤Common variables are not unique definitions and may not have types at /tmp/Qyac0fM8y4 line 1:␤------> our Int $foo⏏; # niecza␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niec…»

[21:26] <lucas> p6: class A {}; our A $a;

[21:26] <camelia> niecza v24-109-g48a8de3: OUTPUT«===SORRY!===␤␤Common variables are not unique definitions and may not have types at /tmp/tmpfile line 1:␤------> class A {}; our A $a⏏;␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/b…»

[21:26] <camelia> ..rakudo-{parrot,jvm,moar} 4459c5: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Cannot put a type constraint on an 'our'-scoped variable␤at /tmp/tmpfile:1␤------> class A {}; our A $a⏏;␤    expecting any of:␤        scoped dec…»

[21:27] <FROGGS__> either niecza explains it better or both are wrong :o)

[21:28] <masak> agreed; though I don't believe "Common variables" is common terminology :)

[21:28] <lizmat> std: our Int $a = 42

[21:28] <camelia> std 0f2049c: OUTPUT«ok 00:01 123m␤»

[21:28] <lizmat> std thinks it's ok

[21:28] <lizmat> also, seems like bfd8508f5ceee565380da201ef25bdfb6feb2b3d was the commit, by FROGGS__  in May last year

[21:29] <timotimo> lizmat: i'm pretty sure we know all our-scoped stuff at compile-time, don't we?

[21:29] <lizmat> well, I was clutching at straws, really

[21:29] <lizmat> as I couldn't think of a reason

[21:30] <jnthn> Not sure what's unclear about Rakudo's error. It tells you what you tried to do, and says it's not allowed.

[21:30] <masak> std: sub foo { our Int $x }; sub bar { our Str $x }

[21:30] <camelia> std 0f2049c: OUTPUT«ok 00:01 124m␤»

[21:30] <masak> the above is the problematic bit.

[21:30] <FROGGS__> O.o

[21:31] <jnthn> Also, STD is mostly about syntax, not about semantics.

[21:31] <jnthn> So I'd not especially expect it to complain about this one.

[21:31] <masak> *nod*

[21:31] <masak> though it certainly could.

[21:31] <lizmat> masak: but that could be handled as an error at compile time, no?

[21:32] <lucas> isn't "our TYPE $var" a syntax thing?

[21:32] <jnthn> lizmat: The error Rakudo gives today is compile time? Same for Niecza's.

[21:32] <jnthn> lucas: No; it parses fine, just doesn't work out semantically.

[21:32] <lizmat> no, I mean:

[21:32] *** punter joined
[21:33] <lizmat> sub a { our Int $foo }; sub b { our Str $foo }

[21:33] <punter> would donating to any Perl 6 body speed up its development?

[21:33] <jnthn> m: sub a { our Int $foo }; sub b { our Str $foo }

[21:33] <camelia> rakudo-moar 4459c5: OUTPUT«===SORRY!=== Error while compiling /tmp/50lgPw_8eQ␤Cannot put a type constraint on an 'our'-scoped variable␤at /tmp/50lgPw_8eQ:1␤------> sub a { our Int $foo ⏏}; sub b { our Str $foo }␤    expecting any of:␤…»

[21:34] <lizmat> jnthn: I'm still not clear as to why we don't have types on "our" variables

[21:34] <lizmat> aka:

[21:34] <FROGGS__> punter: I'm not sure... more hands could help though :o)  (like module porters...)

[21:34] <lizmat> m: our Int $a = 42;

[21:34] <camelia> rakudo-moar 4459c5: OUTPUT«===SORRY!=== Error while compiling /tmp/rObavPtiYC␤Cannot put a type constraint on an 'our'-scoped variable␤at /tmp/rObavPtiYC:1␤------> our Int $a ⏏= 42;␤    expecting any of:␤        scoped declarator␤  …»

[21:34] <lucas> I'm fine with Rakudo not accepting it. I just wish I had read about it in the spec somewhere.

[21:34] <jnthn> lizmat: Too many semantic issues with supporting it.

[21:34] <punter> FROGGS__, I ain't good with programming. Just have billions in the bank (j/k)

[21:35] <jnthn> lizmat: Especially when you consider the binding side of things too.

[21:35] <FROGGS__> punter: *g*

[21:35] <punter> FROGGS__, can't you hire people with money?

[21:35] <punter> FROGGS__, that way, money would help

[21:35] <punter> no eh?

[21:35] <punter> ok

[21:35] <zengargoyle> is there a $INPUT_RECORD_SEPARATOR equivalent?  open("path", :nl("...")) doesn't seem to exist yet.

[21:36] <FROGGS__> punter: I just can speak for myself, and I already spend as much time as I can... I mean money is nice but it would not help me helping Perl 6 more

[21:36] *** uniejo left
[21:36] <FROGGS__> zengargoyle: I remember that this is not yet implemented... would be nice to be proven wrong

[21:37] <lizmat> punter: what would help, is paying someone like jnthn or masak for a course in Perl 6

[21:37] <FROGGS__> gnight #perl6, will read you tomorrow

[21:37] <lizmat> like the "introduction to NQP" course

[21:37] *** FROGGS__ left
[21:37] <jnthn> punter: A lot of people working on Perl 6 have other jobs too, and it's not always easy for them to put that aside.

[21:37] <lizmat> and making sure the materials would be open source :-)

[21:38] <jnthn> That is, if I want to turn more money into more Perl 6 time, it'll need some substantial life refactors as a pre-req...

[21:38] <lizmat> (and paying jnthn and/or masak through their $work)

[21:38] <zengargoyle> yeah, it doesn't throw NYI but seems to be missing.  seems whenever i get an itch to do a little p6 i want something that's not there yet. :/

[21:39] <hoelzro> I'm trying to play with the role machinery via Metamodel::ParametricRoleHOW.new_type(:name('MyRole')), but I get an error message when I try this.  Is there something I'm missing?

[21:39] <punter> ok I'm convinced. I won't donate, because I don't know how to do it.

[21:39] <punter> there are no receivers here: https://www.gittip.com/for/perl-6/

[21:39] <punter> neither froggs nor flies or jnthn

[21:40] <timotimo> punter: it just means nobody is receiving money yet there

[21:40] <punter> timotimo, are they receiving somewhere else?

[21:40] <punter> TPF perhaps?

[21:41] <jnthn> hoelzro: Well, what's the error? :)

[21:41] <jnthn> hoelzro: The compiler assembles roles using that mechanism, so it must work *somehow* ;)

[21:41] <punter> I'm going back to programming my jabber server

[21:41] <jnthn> punter: TPF have managed Perl 6 related grant stuff, certainly.

[21:41] <punter> oh ok

[21:41] * jnthn has taken grants in the past through TPF

[21:42] <timotimo> punter: also, you can select gittip to not show you in receivers lists at all

[21:42] <hoelzro> jnthn: Unhandled exception: Could not instantiate role 'MyRole':

[21:42] <hoelzro> I'm wondering if I have to set something up before I call new_type

[21:42] <jnthn> hoelzro: Hmmm...not something ending up sink-contexting it?

[21:42] <timotimo> punter: a good choice for donations is money to help people attend conferences and hackathons

[21:43] <hoelzro> jnthn: here's the source: https://gist.github.com/hoelzro/5bfb326cd980070bacb4

[21:43] <jnthn> m: my $r := Metamodel::ParametricRoleHOW.new_type(:name('MyRole')); say 'ok'

[21:43] <camelia> rakudo-moar 4459c5: OUTPUT«ok␤»

[21:43] <hoelzro> ah

[21:43] <hoelzro> binding, not assignment, maybe

[21:43] <jnthn> hoelzro: Last line of the program is sunk, I think.

[21:43] <jnthn> m: my $r = Metamodel::ParametricRoleHOW.new_type(:name('MyRole')); say 'ok'

[21:43] <camelia> rakudo-moar 4459c5: OUTPUT«ok␤»

[21:43] <hoelzro> huh

[21:44] <hoelzro> sure enough

[21:44] <hoelzro> thanks jnthn =)

[21:44] <jnthn> np

[21:44] <jnthn> OK, I got teaching tomorrow, and despite the fact that night time doesn't happen in this part of the world this time of year, I need some sleep :)

[21:44] <jnthn> 'night, #perl6

[21:44] <lizmat> gnight. jnthn 

[21:44] <hoelzro> 'night jnthn 

[21:45] *** lizmat left
[21:47] *** punter left
[21:49] <lucas> Is there a command line tool that works just like this IRC bot, where I pass my program (file or -e) and it executes in all implementations and joins the output? Such a program already exist?

[21:51] <masak> lucas: not to my knowledge. but it's a pretty great idea.

[21:58] *** xdoctor left
[22:02] *** woolfy left
[22:02] *** denis_boyun left
[22:04] *** raiph joined
[22:04] *** lizmat joined
[22:05] *** Akagi201 joined
[22:06] <lizmat> lucas: the bot code is public, so could be a source of inspiration :-)

[22:07] <lucas> lizmat: yes!! I'll seach its source code in the repos...

[22:07] <lucas> *search

[22:08] <lizmat> :-)

[22:08] <timotimo> should be called "evalbot"

[22:08] <lizmat> AntiArrivalDinner&

[22:08] *** HaraldJoerg left
[22:10] *** Grrrr left
[22:10] *** Akagi201 left
[22:12] *** tempire left
[22:13] *** camelia left
[22:14] <masak> 'night, #perl6

[22:14] *** ivan`` left
[22:15] *** raydiak left
[22:15] *** woolfy joined
[22:19] *** tempire joined
[22:21] *** kivutar joined
[22:22] *** virtualsue left
[22:24] *** spider-mario left
[22:25] <hoelzro> night masak 

[22:25] <hoelzro> is it possible to do EXPORTHOW magic without creating a separate file?

[22:28] *** ivan`` joined
[22:31] *** psch left
[22:32] *** raydiak joined
[22:36] *** camelia joined
[22:37] *** gfldex left
[22:38] *** ChanServ sets mode: +v camelia

[23:06] *** Akagi201 joined
[23:10] *** Akagi201 left
[23:11] *** lucas left
[23:26] *** xragnar_ joined
[23:26] *** xragnar left
[23:26] *** xragnar_ is now known as xragnar

[23:33] *** BenGoldberg joined
[23:36] *** hoverboard left
[23:42] *** virtualsue joined
[23:54] *** skids left
