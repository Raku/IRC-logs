[00:00] <R0b0t1> Oh for some reason I thought that was perl6.

[00:00] <R0b0t1> Disregard.

[00:03] * raiph [1, 2, 3].itemized would mean the three items "1", "2", and "3" individually according to conventional use of the word "itemized". Maybe we use "as item" (and "as list" and "as hash" etc.) instead, with the longer "as an item" in contexts that really demand smoother English.

[00:03] <timotimo> where does that come up, raiph?

[00:04] <timotimo> R0b0t1: a perl6 equivalent to mojolicious is something we'd like to have

[00:05] <psch> Web looks like it's steps into that direction, superficially

[00:05] <psch> but then it also seems to be rotting

[00:05] <raiph> timotimo: My prior comment was poorly worded

[00:06] <timotimo> psch: you mean the Web:: namespace of modules we have on modules.perl6.org at the moment?

[00:06] <raiph> timotimo: I mean when people say "itemized array". The regular dictionary defintion of "itemized" (eg "itemized list") means to individually list the items in a list.

[00:06] <timotimo> oh

[00:07] <timotimo> that's a good point

[00:07] <psch> timotimo: right. i found it on github as perl6-web

[00:07] <R0b0t1> timotimo: Yeah, that's how I got about searching for perl web frameworks, read something about a lack of perl6 equivalent

[00:07] <raiph> _sri has said he's looking forward to porting mojolicious to P6 when P6 is ready.

[00:07] <timotimo> oh, that's nice

[00:07] <psch> timotimo: i guess Web::App is actually what's steps-towards mojolicious, if more verbose in the examples

[00:08] <timotimo> what do you mean when you say Web::App?

[00:09] <timotimo> on the modules list i see Web::App::Ballet and Web::App::MVC

[00:09] <psch> https://github.com/supernovus/perl6-web the example has "use Web::App" :)

[00:09] <psch> the first one

[00:09] <timotimo> oh

[00:10] <psch> i'm still mostly looking at (hopefully sensibly placed) debugging says in ModuleLoader to wrap my header around where to look wrt this jvm bug, so i apologize if i'm not that coherent

[00:10] <timotimo> head*

[00:10] <timotimo> :)

[00:11] <psch> right :)

[00:11] <psch> that was the web-stuff :P

[00:12] <timotimo> i'm excited to see where HTTP::Server::Async leads us and how hard it'll be for stuff to sit atop either HTTP::Server::Simple or HTTP::Server::Async and not b0rk

[00:14] <raiph> R0b0t1:_sri has been waiting patiently for years. He tweeted a month or two ago "#perl6 is starting to reach the point where i would love to spend more time on a port of #mojolicious."

[00:14] <timotimo> have we tried to come up with a specific list of deliverables yet?

[00:15] <R0b0t1> raiph: I shall wait with baited breath.

[00:15] * R0b0t1 rustles impatiently

[00:15] <timotimo> it may not happen *that* quickly :)

[00:16] <psch> what confuses me most right now is that packages from precompiled modules apparently don't go through World.install_package

[00:16] <psch> but maybe that just happens somewhere jvm specific?

[00:17] <psch> to clarify: i have debug says in install_package, and on the jvm those don't get executed when running with precompiled modules; on moar they do get executed 

[00:17] <psch> it does get executed when precompiling, but on moar it happens in both cases

[00:18] <psch> is that just an architectural difference?

[00:18] <psch> (and is it even related? :P)

[00:23] <timotimo> i'm not really familiar with that corner of rakudo/nqp :(

[00:24] <psch> me neither! :D

[00:25] <psch> i think i'll let this sit for now, i'm not really awake enough anymore it seems

[00:25] <Mouq> Didn't [Coke]++ start on a Mojo port?

[00:26] <timotimo> i think he started working on some modules that could kind of stand alone, iirc

[00:26] <Mouq> https://github.com/coke/mojo6

[00:26] *** Akagi201 joined
[00:26] <Mouq> Mojo::Util

[00:28] <Mouq> Does sergot++'s work factor into this?

[00:28] <timotimo> i wonder the same thing

[00:29] <timotimo> he's writing some stuff related to parsing headers and such, so that's kinda similar to a Request object you'd have in a mojolicious thingie

[00:30] <psch> there's also one rather weird comment in the jvm ModuleLoaderVMConfig: "might be good to error here" in if $have_jar { } 

[00:30] *** BenGoldberg left
[00:30] <psch> anyway, i wanted to go to sleep... :)

[00:30] <psch> g'night everyone o/

[00:30] *** psch left
[00:31] *** Akagi201 left
[00:37] *** insanity_ left
[00:48] <zengargoyle> timotimo: i think rakudobrew does let you switch versions in some fashion..

[00:48] <zengargoyle> $ rakudobrew list

[00:48] <zengargoyle> * moar-2014.06 moar-HEAD

[00:49] <zengargoyle> at least it can switch between tagged versions and head.

[00:50] <anotherone> you are doing a hard work

[00:50] <anotherone> congratulations

[00:51] <anotherone> still with the "hack" energy as in puberty, just saw that in dragonfly bsd community

[00:51] <anotherone> sorry XD

[00:55] <anotherone> i think perl 6 is in good hands, will try it

[00:56] <anotherone> nice code all

[00:57] *** anotherone left
[01:09] *** itz_ left
[01:10] *** BenGoldberg joined
[01:26] *** dragon_d left
[01:27] *** raiph left
[01:27] *** Akagi201 joined
[01:32] *** Akagi201 left
[01:50] *** FROGGS_ joined
[01:54] *** FROGGS left
[02:00] *** klapperl_ left
[02:01] *** klapperl joined
[02:06] <dalek> perl6-roast-data: d41be7a | coke++ | / (6 files):

[02:06] <dalek> perl6-roast-data: today (automated commit)

[02:06] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/d41be7a360

[02:15] *** atroxaper joined
[02:19] *** noganex_ joined
[02:19] *** atroxaper left
[02:22] *** noganex left
[02:28] *** Akagi201 joined
[02:32] <dalek> roast: 25668e6 | coke++ | / (50 files):

[02:32] <dalek> roast: Prefer RT #XXXXXX

[02:32] <dalek> roast: review: https://github.com/perl6/roast/commit/25668e62a8

[02:33] *** Akagi201 left
[02:36] *** dragon_d joined
[02:41] *** marcg joined
[02:43] <marcg> I want to get involved with Perl 6. I am well versed in Perl 5, but know little of 6. I am into cryptography, so I am thinking about implementing some crypto algorithms in P6: DES, AES. These are apparently "most wanted": https://github.com/perl6/perl6-most-wanted/blob/master/most-wanted/modules.md. What is the best way to learn enough p6 to write 

[02:43] <marcg> a module I won't be embarrassed of?

[02:53] *** atroxaper joined
[02:55] <dalek> roast: 99fe062 | coke++ | S17-supply/ (18 files):

[02:55] <dalek> roast: Reference RT #122229

[02:55] <dalek> roast: review: https://github.com/perl6/roast/commit/99fe06253e

[02:55] <dalek> roast: b43c840 | coke++ | S03-metaops/zip.t:

[02:55] <dalek> roast: mark tests for RT #122230

[02:55] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122229

[02:55] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122230

[02:55] <dalek> roast: review: https://github.com/perl6/roast/commit/b43c840806

[02:57] <[Coke]> marcg: if you're familiar with perl5, looking at the synopses (modeled after the camel book chapters) might be a good start. there is a spec test suite with examples of a lot of the syntax described there. also a growing list of modules. doc.perl6.org also

[03:00] <dalek> roast: 08eb153 | coke++ | S03-metaops/hyper.t:

[03:00] <dalek> roast: Another instance of RT #122230

[03:00] <dalek> roast: review: https://github.com/perl6/roast/commit/08eb1535c5

[03:00] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122230

[03:02] <[Coke]> m: subset MyInt of Int where True; my MyInt $x = 5; $x = Nil; say $x.WHAT;

[03:02] <camelia> rakudo-moar 44d535: OUTPUT«(MyInt)␤»

[03:02] <[Coke]> m: subset MyInt of Int where True; my MyInt $x = 5; $x = Nil; say $x === Int

[03:02] <camelia> rakudo-moar 44d535: OUTPUT«False␤»

[03:02] <[Coke]> m: subset MyInt of Int where True; my MyInt $x = 5; $x = Nil; say $x === MyInt

[03:02] <camelia> rakudo-moar 44d535: OUTPUT«True␤»

[03:03] <marcg> Coke, thanks

[03:04] <[Coke]> ^^ That's in S02-types/nil.t - added in 2011 by sorear. Is that still a valid assumption, that it should be === Int ?

[03:04] <[Coke]> If not, there's a few todos in there marked "triage" that can probably be cleaned up.

[03:11] *** marcg left
[03:14] *** rindolf joined
[03:17] *** btyler left
[03:26] <zengargoyle> marcg: the advent calendar blogs are a nice collection of chunks of random gleanings.

[03:26] <zengargoyle> http://perl6advent.wordpress.com/

[03:32] *** Akagi201 joined
[03:39] *** carlin left
[03:53] *** araujo left
[03:55] <dalek> roast: 49b617b | coke++ | S02-types/declare.t:

[03:55] <dalek> roast: canonicalize on "NYI"

[03:55] <dalek> roast: review: https://github.com/perl6/roast/commit/49b617b959

[03:55] <dalek> roast: ad2abf4 | coke++ | S (17 files):

[03:55] <dalek> roast: standardize on NYI for things not yet implemented

[03:55] <dalek> roast: 

[03:55] <dalek> roast: unimplemented for things that shouldn't be implemented

[03:55] <dalek> roast: review: https://github.com/perl6/roast/commit/ad2abf4966

[03:55] <dalek> roast: e543e6e | coke++ | S02-types/array.t:

[03:55] <dalek> roast: prefer RT #XXXXX

[03:55] <dalek> roast: review: https://github.com/perl6/roast/commit/e543e6e4a5

[03:55] <dalek> roast: e97bc95 | coke++ | / (25 files):

[03:55] <dalek> roast: remove pugs fudge-fossil

[03:55] <dalek> roast: 

[03:55] <dalek> roast: this re-enables some tests that were commented out before fudge existed.

[03:55] <dalek> roast: review: https://github.com/perl6/roast/commit/e97bc95c68

[03:55] <dalek> roast: 3033fd2 | coke++ | S02-names-vars/list_array_perl.t:

[03:55] <dalek> roast: re-comment these out.

[03:55] <dalek> roast: 

[03:55] <dalek> roast: Need to properly skip them for rakudo, but that's hard.

[03:55] <dalek> roast: review: https://github.com/perl6/roast/commit/3033fd255f

[03:56] *** btyler joined
[03:58] *** cooper_ joined
[04:00] *** BenGoldberg left
[04:15] *** avuserow joined
[04:15] *** takesako left
[04:16] *** takesako joined
[04:17] *** larryd left
[04:19] *** atroxaper left
[04:19] *** atroxaper joined
[04:24] *** atroxaper left
[04:30] *** molaf joined
[04:30] *** larryd joined
[04:37] *** atroxaper joined
[04:39] *** SamuraiJack_ joined
[05:12] *** dragon_d left
[05:50] *** kaare_ joined
[06:24] *** cooper_ left
[06:29] *** molaf left
[06:32] <ChoHag> Surely 3033fd2 should be coke--?

[06:34] <FROGGS_> ChoHag: we usually don't do that :o)

[06:35] *** dmol joined
[06:46] *** hightower2 left
[06:49] *** atroxaper left
[06:57] *** potatogim joined
[06:59] <ChoHag> How did I get the -fPIC option into libdyncall's build last time?

[07:01] *** potatogim left
[07:02] <ChoHag> And thus is demonstrated the importance of reporting bugs and patches as they are discovered.

[07:05] *** atroxaper joined
[07:06] *** ingy left
[07:07] <FROGGS_> ChoHag: when the build script does not put it in for you, you perhaps hacked MoarVM's build/setup.pm

[07:07] <ChoHag> No that time it was a much saner hack.

[07:07] <ChoHag> This time I just built dyncall by hand.

[07:07] *** PotatoGim joined
[07:08] <FROGGS_> the Configure.PL/build.pm should detect the need of -fPIC for sure

[07:08] <ChoHag> Incidentally, rakudo make clean can't because of no j-clean.

[07:08] <FROGGS_> how do you get that?

[07:09] <ChoHag> Type make clean in top level. See complain about lack of j-clean.

[07:09] <FROGGS_> I often switch between building all or just a few backends...

[07:09] <FROGGS_> ChoHag: it does not complain

[07:09] <ChoHag> I'd buggered about with the source/build, so I'm waiting to see what it does after a clean^Wcomplete run through.

[07:10] <FROGGS_> make j-<tab><tab> shows j-clean also

[07:10] <ChoHag> Then it probably was the source code sodomy.

[07:11] <FROGGS_> hmmmm

[07:11] <ChoHag> It's just testing the jvm so give me an hour or two...

[07:11] <ChoHag> No not testing. Generating somethign.

[07:11] <FROGGS_> that is in rakudo's Configure.PL: print $MAKEFILE "clean: ", join(' ', map "$_-clean", @prefixes), "\n";

[07:12] <FROGGS_> and: my @prefixes = sort map substr($_, 0, 1), keys %backends;

[07:12] <FROGGS_> so the jvm backend must have been enabled...

[07:13] <FROGGS_> ahhh

[07:13] *** btyler left
[07:13] <FROGGS_> when your nqp-j had a problem, it would not append the Makefile-JVM.in to your Makefile

[07:13] <FROGGS_> but you should've seen an error message then at least

[07:13] <ChoHag> There were probably build failures then.

[07:14] <FROGGS_> it is not meant to continue then (and it looks like it does not continue)

[07:15] <FROGGS_> brb

[07:17] <ChoHag> Oh bugger. I just realised I forgot to specify the install location when I kicked the build off.

[07:27] <FROGGS_> it will be cwd/install I think

[07:27] <FROGGS_> or nqp/install, not sure

[07:39] *** ingy joined
[07:44] *** virtualsue joined
[07:57] *** darutoko joined
[07:57] <masak> morning, #perl6

[08:12] *** Isp-sec joined
[08:20] *** FROGGS[mobile] joined
[08:20] *** atroxaper left
[08:25] *** Alula_ left
[08:26] *** Alula_ joined
[08:27] *** virtualsue left
[08:30] *** dylanwh left
[08:31] *** virtualsue joined
[08:36] *** anaeem1_ joined
[08:36] *** virtualsue left
[08:37] <zengargoyle> m: class F does Associative { has %.k handles Associative; }; my %k := F.new; %k<f>=True; $k<f>.perl.say

[08:37] <camelia> rakudo-moar 44d535: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/iFkUQTnTxw␤Variable '$k' is not declared. Did you mean '%k'?␤at /tmp/iFkUQTnTxw:1␤------> [32m %k := F.new; %k<f>=True; $k<f>.perl.say[33m⏏[31m<EOL>[0m␤    expecting any of:␤        …»

[08:37] <zengargoyle> m: class F does Associative { has %.k handles Associative; }; my %k := F.new; %k<f>=True; %k<f>.perl.say

[08:38] <camelia> rakudo-moar 44d535: OUTPUT«postcircumfix:<{ }> not defined for type F␤  in method <anon> at src/gen/m-CORE.setting:12877␤  in any find_method_fallback at src/gen/m-Metamodel.nqp:2604␤  in any find_method at src/gen/m-Metamodel.nqp:934␤  in method assign_key at src/gen/m-CORE…»

[08:43] *** virtualsue joined
[08:48] *** dylanwh joined
[08:55] <zengargoyle> > class I is Associative { has %k; method postcircumfix:<{ }> ( **@slice ) { %k

[09:00] *** virtualsue left
[09:06] *** xinming joined
[09:09] *** xinming_ left
[09:09] *** pdcawley left
[09:10] *** pdcawley joined
[09:14] <ChoHag> The debugger complains of a lack of Debugger::UI::CommandLine

[09:14] *** virtualsue joined
[09:24] <zengargoyle> if you're no using rakudo-star you have to install it yourself

[09:26] <ChoHag> Then I guess it's time to find out how that works.

[09:27] <zengargoyle> install panda

[09:28] <zengargoyle> then: panda install Debugger::UI::CommandLine

[09:28] <ChoHag> That's not how it works.

[09:28] <ChoHag> That's how to use it.

[09:29] <zengargoyle> oh, maybe i missunderstand.  the built-in debugger does have an external dependency on Debugger::UI::CommandLine.

[09:30] <ChoHag> You do, but not in that way. I got that.

[09:30] <ChoHag> I want to know how modules interact with the underlying os. "Use this magic tool" teaches nothing.

[09:31] <ChoHag> I didn't want to know that 5 minutes ago, but now I have an external dependency.

[09:32] *** virtualsue left
[09:39] *** spider-mario joined
[09:42] *** kivutar joined
[09:50] *** Rotwang joined
[09:56] <jnthn> Once, the debugger was completely separate. These days, perl6-debug contains the stuff tied to the compiler that it became an utter pain to maintain on the outside, while the frontend doing the UI stuff lives where it always has.

[09:57] <ChoHag> Hmm. Did I misunderstand the panda source, or does it not use the install method of CompUnitRepo?

[09:57] <ChoHag> Seems to implement its own copy function.

[09:58] <jnthn> I *think* (I may be out of date) that there's a Panda branch to use the (quite recently added) CompUnitRepo, but it isn't quite ready to be the default thing yet.

[09:58] <ChoHag> Ah CUR is a new thing?

[09:58] <jnthn> Yes, and that it handles install is partly born out of the pain of what you see in Panda, iiuc. :)

[09:58] <ChoHag> Heh

[10:04] <masak> I hadn't seen this interview with TheDamian until now: http://www.linuxvoice.com/interview-damian-conway/

[10:06] <masak> and the HN discussion, surprisingly positive towards Perl 6: https://news.ycombinator.com/item?id=7988351

[10:06] <masak> so, if you want people to say good things about Perl 6 on HN, link them to a TheDamian interview! :P

[10:09] <ChoHag> Debugger: Unknown compilation input 'optimize'

[10:09] <ChoHag> Not my code. Optimise has an s.

[10:09] *** grondilu joined
[10:10] <grondilu> m: my @a := 1 .. *; @a = @a[0, 2 ... *] # Is this supposed to work?

[10:10] <camelia> rakudo-moar 44d535: OUTPUT«(timeout)»

[10:10] <jnthn> No. Slicing is not lazy.

[10:10] <grondilu> ok

[10:11] <grondilu> is it because it's impossible or something?  It would have provided a neat solution to http://rosettacode.org/wiki/Ludic_numbers#Perl_6

[10:12] <jnthn> Yes. Slicing returns a Parcel of the elements. A Parcel is always a pre-determined length.

[10:21] *** Isp-sec left
[10:24] *** jack_rabbit left
[10:25] *** jack_rabbit joined
[10:26] <ChoHag> Is there something else that r* would ordinarily have provided to make the debugger work?

[10:26] <ChoHag> I installed the UI module and Term::ANSIColor

[10:26] <grondilu> .oO( sub inifite-splicing(@array, @splice) { gather { take @array[$_] for @splice } } )

[10:29] <jnthn> ChoHag: Those are the only deps I know of

[10:29] <ChoHag> Then my code somehow breaks the debugger.

[10:30] <ChoHag> Wheee!

[10:30] <jnthn> oh, fun...

[10:30] <jnthn> Can you run with --ll-exception and gist me the error?

[10:33] *** kivutar left
[10:36] <ChoHag> https://gist.github.com/anonymous/23ac1a19fc27182f7c1c

[10:45] <jnthn> Thanks.

[10:53] *** mlawren joined
[10:54] *** salv0 left
[10:58] *** pdcawley left
[10:58] *** pdcawley joined
[11:01] <dalek> nqp: 78f5a7b | jnthn++ | src/vm/moar/QAST/QASTCompilerMAST.nqp:

[11:01] <dalek> nqp: Add typevar scope handling for MoarVM.

[11:01] <dalek> nqp: 

[11:01] <dalek> nqp: Uses op that indicates that the value is invariant with regards to the

[11:01] <dalek> nqp: invocant type.

[11:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/78f5a7b818

[11:01] <dalek> nqp: 39f25d9 | jnthn++ | src/vm/ (2 files):

[11:01] <dalek> nqp: On Parrot and JVM, for now typevar means lexical.

[11:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/39f25d9831

[11:01] <dalek> nqp: b4b2d6b | jnthn++ | src/NQP/Actions.nqp:

[11:01] <dalek> nqp: Start marking $?CLASS lookup with typevar scope.

[11:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b4b2d6b661

[11:01] <dalek> nqp: 04bbf8c | jnthn++ | src/NQP/Actions.nqp:

[11:01] <dalek> nqp: One more place we can use typevar, not lexical.

[11:01] <dalek> nqp: 

[11:01] <dalek> nqp: This benefits !cursor_start, meaning that all the attribute accesses

[11:01] <dalek> nqp: in it are now lowered to pointer operations. Le JIT will like this -

[11:01] <dalek> nqp: once it can handle other things inside !cursor_start, anyway.

[11:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/04bbf8c5d9

[11:01] <dalek> nqp: 174eb97 | jnthn++ | src/ (4 files):

[11:01] <dalek> nqp: Merge branch 'typevaropt'

[11:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/174eb97cff

[11:01] <dalek> nqp: 1d18e2b | jnthn++ | tools/build/MOAR_REVISION:

[11:01] <dalek> nqp: Bump MOAR_REVISION for inline/deopt fixes.

[11:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1d18e2bb9d

[11:02] <grondilu> ludic numbers with infinite splicing:  https://gist.github.com/grondilu/f64589d8110917751695

[11:03] <grondilu> (or maybe better called lazy splicing)

[11:04] <grondilu> m: https://gist.github.com/grondilu/f64589d8110917751695

[11:04] <camelia> rakudo-moar 44d535: OUTPUT«gist not found»

[11:04] <jnthn> Or lazy-splice, to verb it

[11:04] *** James-YeJ3TE48lO joined
[11:04] *** Akagi201 left
[11:08] *** jack_rabbit left
[11:08] <dalek> rakudo/nom: 3756b5b | jnthn++ | src/perl6-debug.nqp:

[11:08] <dalek> rakudo/nom: Fix debug compile pipeline setup.

[11:08] <dalek> rakudo/nom: 

[11:08] <dalek> rakudo/nom: Unbusts various constructs under the debugger on non-Parrot backends.

[11:08] <dalek> rakudo/nom: ChoHag++ for reporting.

[11:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3756b5b3e3

[11:10] <ChoHag> So what's the basic pull & build procedure for an all-backend rakudo?

[11:11] <ChoHag> If it's not just git pull && make install

[11:11] <tadzik> clone everything, pass --backends=all to nqp and rakudo, I think

[11:11] *** dalek left
[11:11] *** salv0 joined
[11:12] *** dalek joined
[11:12] *** ChanServ sets mode: +v dalek

[11:12] <ChoHag> woohoo!

[11:12] <ChoHag> This is the first time being in the debugger.

[11:13] <ChoHag> Naturally, it is time to prepare my daughter to go to an Event, so there's no time to play with it.

[11:13] *** anaeem1_ left
[11:13] <ChoHag> Damn kids...

[11:13] *** anaeem1 joined
[11:15] <masak> aw, don't say that.

[11:15] <masak> kids are our future, almost by definition.

[11:17] <ChoHag> They're not my future.

[11:17] <ChoHag> They're their future.

[11:18] * grondilu was hesitating to write almost exactly that

[11:18] <ChoHag> Love her to pieces anyway though.

[11:18] <masak> hm, 'our' as in humanity's? I think that's what I meant.

[11:19] <ChoHag> She's a feisty one.

[11:19] <grondilu> "humanity" is quite a big abstraction

[11:19] <masak> yes, I'm grasping for a smaller one.

[11:20] <masak> something like "those of us in this discussion".

[11:20] <grondilu> I mean, humanity does exist, but it's not part of me if I'm not alive.  So kids are not "my" future.

[11:22] <grondilu> not to mention that they are not suppose to grow up as my servants or anything :/  So as ChoHag said, they are not my future, they are theirs.

[11:22] <ChoHag> Engineers make the best parents...

[11:23] <grondilu> even software engineers?

[11:25] <masak> maybe just 'children are the future', then.

[11:27] <grondilu> it's a bit anthropocentric, but yeah I guess.

[11:27] <BinGOs> as long as no one breaks into a bit of whitney houston we should be alright.

[11:27] <masak> grondilu: :P

[11:28] <masak> grondilu: sometimes, as a human, I don't mind being anthropocentric. I don't feel sorry about it.

[11:28] <masak> m: class A::B {}; say A.new

[11:28] <camelia> rakudo-moar 44d535: OUTPUT«You cannot create an instance of this type␤  in method bless at src/gen/m-CORE.setting:839␤  in method new at src/gen/m-CORE.setting:823␤  in block  at /tmp/1wxY489sYt:1␤␤»

[11:28] <masak> ^^ might want a clearer error message.

[11:29] <jnthn> Including the name rather than "this type" would help, but there's no good way to get hold of it at the moment.

[11:30] * masak submits rakudobug

[11:32] *** Manu joined
[11:32] *** Manu is now known as Guest40250

[11:33] <masak> m: module A {}; say A.new

[11:33] <camelia> rakudo-moar 44d535: OUTPUT«You cannot create an instance of this type␤  in method bless at src/gen/m-CORE.setting:839␤  in method new at src/gen/m-CORE.setting:823␤  in block  at /tmp/er6k4o2v28:1␤␤»

[11:33] *** denis_boyun joined
[11:33] <masak> m: class A::B {}; say A.WHO

[11:33] <camelia> rakudo-moar 44d535: OUTPUT«("B" => A::B).hash␤»

[11:33] <masak> m: class A::B {}; say A.WHAT

[11:33] <camelia> rakudo-moar 44d535: OUTPUT«(A)␤»

[11:34] <masak> m: class A::B {}; say A.HOW.^name

[11:34] <camelia> rakudo-moar 44d535: OUTPUT«Perl6::Metamodel::PackageHOW␤»

[11:34] <masak> ah.

[11:34] <masak> jnthn: if we just changed the error message to "You tried to call .new on a package", what wouldn't work out so well?

[11:35] <jnthn> We don't know it's not a package.

[11:35] <jnthn> uh

[11:35] <jnthn> we don't know it's a package

[11:35] <jnthn> m: subset Foo of Int where * > 42; Foo.new

[11:35] <camelia> rakudo-moar 44d535: OUTPUT«You cannot create an instance of this type␤  in method bless at src/gen/m-CORE.setting:839␤  in method new at src/gen/m-CORE.setting:823␤  in block  at /tmp/OB7IGFcd5K:1␤␤»

[11:36] <masak> ok, fair enough.

[11:36] <masak> I suspected something like that might be the case.

[11:36] *** rindolf left
[11:36] <jnthn> There's an Uninstantiable REPR at the bottom of all these.

[11:37] <masak> *nod*

[11:38] <masak> but still, an error message saying "Tried to instantiate A but it is a {A.HOW.^name}" would be ideal, no?

[11:40] *** denis_boyun left
[11:40] <jnthn> but it isn't a PackageHOW, it's a Package. And you can't make a method call in a REPR. That's against the rules.

[11:40] <masak> oh :/

[11:41] <jnthn> Don't "oh :/". Those rules keep a dozen other things sane.

[11:41] <masak> then I don't know of a good solution.

[11:41] <masak> it wasn't disappointment at the rule as such. I'm sure it's a great rule.

[11:41] <masak> it was disappointment at the fact that there isn't an easy fix.

[11:42] <jnthn> If there's any fix, it's to do what method dispatch does, which is let the HLL supply a handler for such errors, so it can rewrite them cleanly into some other exception type.

[11:43] <masak> ok.

[11:44] <masak> https://rt.perl.org/Ticket/Display.html?id=122232

[11:47] *** SamuraiJack_ left
[11:56] *** pdcawley left
[11:56] *** pdcawley joined
[12:04] *** brrt joined
[12:21] *** FROGGS_ left
[12:21] *** rindolf joined
[12:21] *** mlawren left
[12:31] *** rurban1 joined
[12:33] *** FROGGS_ joined
[12:44] <colomon_> tadzik: ping?

[12:50] *** rurban1 left
[12:50] *** rurban1 joined
[12:51] *** atroxaper joined
[12:59] <tadzik> colomon_: pong

[13:00] <tadzik> 'sup?

[13:00] <colomon_> I think Build.pm overrides don't work right in emmentaler

[13:01] <colomon_> or to be precise: I don't think they get the emmentaler temp library install in their INC path.

[13:02] <tadzik> hm

[13:03] <tadzik> I don't know why it would

[13:04] <tadzik> oh hm

[13:04] <tadzik> @*INC.push('.')

[13:04] <tadzik> perhaps that'd work better if it was '/full/path/to/cwd' rather than '.'?

[13:04] <tadzik> or not

[13:05] <tadzik> nah, I don't see anything that'd be impacted by a custom installation path

[13:08] <nwc10> there's a structural bug in the TAP parser

[13:08] <nwc10> This isn't seen as a TODO:

[13:08] <nwc10> not ok 49 - .split('') does the same thing as .split(/''/) (RT #112868)# TODO RT #112868

[13:08] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=112868

[13:08] <nwc10> nor this, and the 2 that follow it:

[13:08] <nwc10> not ok 142 - RT #116280# TODO RT #116280

[13:08] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=116280

[13:09] *** brrt left
[13:09] <nwc10> that's t/spec/S32-str/split-simple.rakudo.moar and t/spec/S32-str/sprintf.rakudo.moar

[13:10] *** Guest40250 left
[13:15] <jnthn> nwc10: On moar master, any less ASAN explosions? I'd been hoping the scan_registers one may have been fixed by one of my patches earlier today. If that doesn't get it, it'll be something else...

[13:16] *** rurban1 left
[13:17] *** pdcawley_ joined
[13:18] *** pdcawley left
[13:18] *** pdcawley joined
[13:21] *** pdcawley_ left
[13:23] <colomon_> tadzik: (sorry for spacing out there) The thing is, on a normal install Build.pm has access to all installed modules, including any dependencies built for it.

[13:23] <colomon_> but when you run smoker, it builds the dependencies somewhere not on the normal INC path.

[13:24] <colomon_> I'm thinking in addition to @*INC.push('."), it needs .push("$.destdir/lib") (or something to that effect.

[13:25] * colomon_ is going afm due to Harry Potter reading

[13:25] <colomon_> @afk

[13:33] *** atroxaper left
[13:33] <nwc10> jnthn: not sure. t/spec/S32-list/pick.rakudo.moar failed but I can't see why

[13:33] *** atroxaper joined
[13:33] <nwc10> t/spec/S32-list/roll.t remains ASAN unhappy

[13:34] <nwc10> I don't see any backtraces with scan_registers

[13:34] <nwc10> I'll disable the fixed size allocator and rebuid

[13:34] <nwc10> although my fan club is watching me

[13:35] *** rurban1 joined
[13:36] *** BenGoldberg joined
[13:37] *** atroxaper left
[13:38] *** atroxaper joined
[13:38] *** dwarring left
[13:39] *** carlin joined
[13:48] *** rurban1 left
[13:50] *** sunme joined
[13:51] *** sunme left
[13:55] *** rurban1 joined
[13:58] <cognominal> I wrote a p6 script that massages Grammar.pm to generate a dot file that visualizes the relation between the rules of the pod "subgrammar".  The result :  https://gist.github.com/cognominal/48bf8612f856747cefb0.   With graphviz installed, use  dot -Tpdf pod.dot > pod.pdf  to see the graph

[14:03] <BenGoldberg> Not that it matters, but you know that the title of that page is "A fist shot", not "A first shot" ?

[14:06] <cognominal> :)

[14:08] <cognominal> BenGoldberg, using dot, it is appropriate that programming becomes a boxing art.

[14:20] <flussence> (I've got a distro package manager that can output to dot... but graphviz doesn't handle 1000+ nodes in a single graph gracefully :)

[14:20] *** rurban1 left
[14:21] <cognominal> I did once a dot graph for the Perl 5 grammar, it was unreadable.

[14:25] <arnsholt> I'm not sure the Perl 5 grammar is for mortals to understand

[14:26] <timotimo> flussence: i think as long as you don't use PNG output, it should be fine

[14:27] <cognominal> arnsholt, Perl 5 grammar is ok but the lexer is a crime against sane programming.

[14:28] <arnsholt> Oh. I thought the grammar was where the real insanity was. Good to have that cleared up =)

[14:28] <cognominal> the aphorism should be : only Perl 5 can lex Perl 5

[14:28] <masak> guess TimToady learned his lesson on that one. Perl 6 doesn't even *have* a lexer! :P

[14:29] <masak> cognominal: isn't it C lexing Perl 5, though?

[14:29] <cognominal> dura lex sed Perl 5 lex.

[14:29] <cognominal> masak: yes

[14:29] <arnsholt> cognominal++ # Latin jokes! =D

[14:29] <cognominal> with sed, that's a unix joke too.

[14:30] <arnsholt> FWIW, I don't know of any better representation of grammars than grammars

[14:30] <arnsholt> They're not very grokkable, but any alternatives are worse IME

[14:32] <timotimo> why don't we have a tool that turns grammars into railroad diagrams yet?

[14:32] <cognominal> sometimes, I would like a bnfy role to twiddle grammar syntax so as to write   <subrule>  as subrule, and  forces to write string as 'string'.

[14:33] <timotimo> .o( can always implement source filters )

[14:34] <cognominal> timotimo:  and avertize Perl 6 as the new Pascal :)  and moar bytecode as the new pcode

[14:34] <cognominal> probably one could translate pcode into moar bytecode.

[14:35] <timotimo> %)

[14:35] <cognominal> I don't have seen any other language than Pascal with syntax presented as railroad.

[14:36] <timotimo> sqlite, dogeon

[14:36] <cognominal> http://primepuzzle.com/tp2/syntax-diagrams.html

[14:38] <timotimo> super helpful: the letter and digit railroads ...

[14:40] <cognominal> A clickable railroad to go from one rule to another would be nice.

[14:42] <cognominal> A railroad is a good way to learn a grammar without knowing the syntax of a grammar.

[14:42] <timotimo> aye

[14:43] <cognominal> Except it must be stripped from assertions.

[14:44] <timotimo> that's right

[14:44] *** sqirrel joined
[14:44] <timotimo> but things like "this variable name must refer to an already defined variable" is not something you'd see in a traditional "grammar" anyway

[14:45] *** atroxaper left
[14:45] <cognominal> but for a first approach of a grammar, decrypting assertion  is usually more an hindrance than a benefit

[14:45] *** atroxaper joined
[14:46] *** anaeem1 left
[14:50] *** rurban1 joined
[14:52] *** rurban2 joined
[14:53] *** itz_ joined
[14:55] *** rurban1 left
[14:55] *** tgt joined
[14:57] *** rurban2 left
[15:07] *** rurban1 joined
[15:15] *** sqirrel left
[15:18] *** denis_boyun_ joined
[15:19] *** sqirrel joined
[15:32] *** itz_ left
[15:45] *** atroxaper left
[15:45] *** zakharyas joined
[15:49] *** rurban1 left
[15:50] *** rurban1 joined
[15:51] *** itz_ joined
[15:52] *** denis_boyun_ left
[15:58] *** denis_boyun__ joined
[15:58] *** guru joined
[15:58] *** guru is now known as ajr_

[16:09] *** sqirrel left
[16:13] *** rurban2 joined
[16:16] *** rurban1 left
[16:19] *** denis_boyun__ left
[16:20] *** atroxaper joined
[16:21] *** vendethiel joined
[16:28] *** hoverboard joined
[16:28] *** rurban2 left
[16:29] *** btyler joined
[16:33] *** zakharyas left
[16:36] *** rurban1 joined
[16:43] <vendethiel> m: sub foo(::T $) { say T }; foo(1);

[16:43] <camelia> rakudo-moar 3756b5: OUTPUT«(Int)␤»

[16:43] <vendethiel> m: sub foo(::T *@) { say T }; foo((1,));

[16:43] <camelia> rakudo-moar 3756b5: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/dXxQAAV1GJ␤Slurpy positionals with type constraints are not supported.␤at /tmp/dXxQAAV1GJ:1␤------> [32msub foo(::T *@[33m⏏[31m) { say T }; foo((1,));[0m␤    expecting any of:␤      …»

[16:43] <vendethiel> m: sub foo(::T @) { say T }; foo((1,));

[16:43] <camelia> rakudo-moar 3756b5: OUTPUT«(Parcel)␤»

[16:43] <vendethiel> mh, yeah ...

[16:48] <vendethiel> Is there some kind of shortcut I'm missing to call a method on an object and just return it ?

[16:52] *** denis_boyun joined
[16:58] <FROGGS_> m: class Foo { method bar { self } }; say Foo.new.bar

[16:58] <camelia> rakudo-moar 3756b5: OUTPUT«Foo.new()␤»

[16:58] <FROGGS_> vendethiel: ^^

[17:00] <FROGGS_> m: class Foo { has &.bar = -> Str $baz { 42 } }; say Foo.new.bar.("huh") # how can I avoid the dot before () ?

[17:00] <camelia> rakudo-moar 3756b5: OUTPUT«42␤»

[17:01] *** rurban1 left
[17:01] *** denis_boyun left
[17:01] *** rurban1 joined
[17:02] *** rurban1 left
[17:03] <masak> FROGGS_: you can't, because without the dot it means a different thing.

[17:04] <masak> FROGGS_: .bar("huh") means "call the accessor of $!bar"

[17:04] <masak> FROGGS_: .bar.("huh") means "call whatever's *in* what the accessor returns"

[17:04] <masak> there's some wording about this somewhere, probably in S12.

[17:05] <FROGGS_> I think this disagrees: http://perlcabal.org/syn/S02.html#Ampersand_and_invocation

[17:06] <ChoHag> Hooray I can use the debugger! :) .... Boo the debugger doesn't like threads :(

[17:06] <FROGGS_> bbiab

[17:07] <jnthn> ChoHag: No, it really doesn't; it hasn't been updated since threads started to exist in Rakudo.

[17:07] <ChoHag> Had I considered it for half a second, I'd have expected it.

[17:08] <ChoHag> I was too excited by the prospects of a) running in moar, and b) having a debugger at all.

[17:09] *** ssutch joined
[17:10] <ssutch> hello

[17:10] <masak> FROGGS_: no, that's concordant with what I'm saying.

[17:10] <masak> ssutch: oh hai.

[17:13] <ssutch> rakudo: say (*+2)(4);

[17:14] <camelia> rakudo-jvm 3756b5: OUTPUT«(timeout)»

[17:14] <camelia> ..rakudo-{parrot,moar} 3756b5: OUTPUT«6␤»

[17:22] <ChoHag> Unhandled exception in code scheduled on thread 34630670336

[17:22] <ChoHag> No exception handler located for warn in method Str at src/gen/m-CORE.setting:1018

[17:23] <ChoHag> I don't call warn.

[17:32] *** hoverboard is now known as moistcherry

[17:36] <masak> probably something internal did.

[17:38] <vendethiel> FROGGS[mobile]: I thing you misunderstood me. I'm looking for something to call a function that returns whatever atm and have it return the object

[17:39] *** BenGoldberg left
[17:43] *** ssutch left
[17:45] *** rurban1 joined
[17:51] *** ssutch joined
[17:53] <zengargoyle> are any of the Types implemented in pure p6?

[17:53] *** lelf joined
[17:54] <vendethiel> the Types ?

[17:54] <vendethiel> you mean like array and suchs ?

[17:54] <vendethiel> zengargoyle: https://github.com/rakudo/rakudo/blob/nom/src/core/Array.pm

[17:55] <zengargoyle> yeah, like Set or Hash, are there any where their source wouldn't have some NQP in them somewhere.

[17:56] <lelf> Is there good emacs mode? (I see only p6-mode.el)

[18:00] <masak> lelf: there's that, and I always felt cperl-model.el did a good job with Perl 6, too.

[18:01] <FROGGS_> vendethiel: what is 'the object' ?

[18:02] <vendethiel> FROGGS[mobile]: i.e. `sub call($obj, Str $meth) { $obj."$meth"(); $obj }`

[18:02] <FROGGS_> vendethiel: well, then do exactly that

[18:02] <vendethiel> and I wanted to know if it existed ATM in the libs

[18:03] <FROGGS_> m: sub call($obj, Str $meth) { $obj."$meth"(); $obj }; call(42, 'say')

[18:03] <camelia> rakudo-moar 3756b5: OUTPUT«42␤»

[18:03] <FROGGS_> m: sub call($obj, Str $meth) { $obj."$meth"(); $obj }; say call(42, 'say')

[18:03] <camelia> rakudo-moar 3756b5: OUTPUT«42␤42␤»

[18:03] <vendethiel> http://jlongster.com/Compiling-JSX-with-Sweet.js-using-Readtables <- cool readtables with sweetJS

[18:03] <FROGGS_> but there is not built-in that does that

[18:06] *** user3 joined
[18:06] <masak> vendethiel: is 'readtable' a Lisp/Scheme notion?

[18:06] <ChoHag> My attribute trait stopped working :(

[18:06] <vendethiel> masak: yep. Reader macros

[18:06] <vendethiel> i.e., in CL, you can program `]` to be "the number of closing parens you need".

[18:06] *** user3 left
[18:07] <masak> vendethiel: just found http://docs.racket-lang.org/reference/readtables.html -- interesting.

[18:07] <vendethiel> racket++

[18:13] <dalek> perl6-bench: b36e80b | (Geoffrey Broadwell)++ | microbenchmarks.pl:

[18:13] <dalek> perl6-bench: Add first two Rat microbenchmarks

[18:13] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/b36e80b567

[18:15] *** anaeem1 joined
[18:22] *** [particle] joined
[18:26] *** larryd left
[18:27] <itz_> I was wondering what language racket resembled but the logo rather gives the game away...

[18:27] *** [particle] left
[18:28] *** sqirrel joined
[18:28] *** kaare_ left
[18:31] *** zakharyas joined
[18:35] *** sqirrel left
[18:36] *** skids joined
[18:41] * masak .oO( the language resembles a teepee? ) :P

[18:44] <ssutch> omg moar starts up so fast

[18:45] <ssutch> is there a way to supplement -I via environment variables?

[18:46] <itz_> PERL6LIB

[18:46] <ssutch> <3 itz_ 

[18:47] <masak> yes, moar's startup is pretty impressive.

[18:48] <ssutch> (back to p6 after a year hiatus. previously, on ssutch: parrot)

[18:50] <jnthn> r-m managed to regress a bit recently startup time wise, sadly

[18:50] <jnthn> Well, more the r and then m, and probably all backends.

[18:50] <ssutch> still, pretty awesome and back-pats all around

[18:50] <jnthn> But yeah, Moar wins on startup time out of them still :)

[18:58] <japhb_> jnthn: OOC, why the startup time regression?  Just more in the setting?

[18:58] <jnthn> japhb_: The setup work for @*INC using the new CompUnitRepo stuff

[18:59] <jnthn> lizmat++ is aware of it and I think has plans to investigate :)

[19:00] *** atroxaper left
[19:02] *** rurban1 left
[19:05] *** cooper_ joined
[19:11] *** BenGoldberg joined
[19:11] *** darutoko left
[19:15] *** vendethiel left
[19:15] *** itz_ left
[19:24] *** zakharyas left
[19:26] *** denis_boyun_ joined
[19:31] *** ssutch left
[19:31] *** sam_ joined
[19:41] *** itz_ joined
[19:44] *** virtualsue joined
[19:46] *** sam_ left
[19:46] *** ssutch joined
[19:46] *** carlin left
[19:47] *** carlin joined
[19:48] *** carlin left
[19:49] *** carlin joined
[19:49] *** Sqirrel joined
[19:55] *** kivutar joined
[19:56] *** araujo joined
[19:56] *** araujo left
[19:56] *** araujo joined
[19:57] <zengargoyle> i've come to the conclusion that i'm bad at YNGTNI

[19:57] *** rurban1 joined
[19:59] *** vendethiel joined
[20:04] <zengargoyle> 3 simple Bool flags became a restricted SetHash with an EnumMap that still doesn't do what i want.  and i'm not even supporting 2 of the flags in the first place!

[20:06] *** akagi201_ joined
[20:07] *** rurban1 left
[20:08] <nwc10> Might be of some interest to some folks here if they've not already seen it: http://morepypy.blogspot.co.uk/2014/07/pypy-stm-first-interesting-release.html

[20:09] *** vendethiel left
[20:09] <nwc10> The followup 3 months later is likely to be more interesting than this one: http://alexgaynor.net/2014/jul/04/your-python-has-evolved/

[20:10] *** vendethiel joined
[20:10] <ssutch> so i rakudo'd with --gen-moar --gen-nqp --backends=moar; do i have to install something else to get the debugger?

[20:10] <ssutch> perl6-debug-m complains of a missing Debugger::UI::CommandLine

[20:10] *** mlawren joined
[20:13] *** rurban1 joined
[20:14] *** moistcherry is now known as hoverboard

[20:14] <ssutch> ok derp, had to install panda and the library

[20:14] <jnthn> Yes, you need to install that library to provide a UI for the debugger

[20:15] <jnthn> The thing inside Rakudo is just the "driver", which needs maintaining along with the compiler 

[20:16] <ssutch> cool, thanks jnthn 

[20:17] *** denis_boyun__ joined
[20:18] <FROGGS_> Stage parse      : error:imcc:loadlib directive could not find library `nqp_dyncall_ops' :o(

[20:18] *** kaare_ joined
[20:18] *** rurban1 left
[20:19] *** denis_boyun_ left
[20:20] <jnthn> tssk

[20:20] <jnthn> I have a multi-backend patch for NQP and the NQP Parrot build jsut failed for me.

[20:20] <FROGGS_> I added the nativecast op but I dunno what went wrong

[20:21] <jnthn> I jsut get loads of:

[20:21] <jnthn> nqp_group.obj : error LNK2001: unresolved external symbol __imp_Parrot_pmc_new

[20:21] <jnthn> nqplexinfo.obj : error LNK2001: unresolved external symbol __imp_Parrot_interp_register_native_pcc_method_in_ns

[20:21] <FROGGS_> O.o

[20:22] <FROGGS_> when was the last time your built nqp-p?

[20:22] <jnthn> Not sure

[20:22] <jnthn> Could be a couple of weeks ago

[20:23] <FROGGS_> because we upgraded to parrot 6.5.0 at the tuesday before our 2014.06 happened

[20:29] <dalek> nqp: 32ddb22 | jnthn++ | src/vm/ (4 files):

[20:29] <dalek> nqp: Add cleardispatcher op for all backends.

[20:29] <dalek> nqp: 

[20:29] <dalek> nqp: Provides a way to clear the dispatcher, rather than taking it. Leads to

[20:29] <dalek> nqp: simpler code when an optimzier can emit it. MoarVM and JVM patches known

[20:29] <dalek> nqp: to build fine; wasn't able to build Parrot, but should be right.

[20:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/32ddb22077

[20:31] <dalek> rakudo/nom: ebd3166 | jnthn++ | / (2 files):

[20:31] <dalek> rakudo/nom: Try to optimize takedispatcher to cleardispatcher.

[20:31] <dalek> rakudo/nom: 

[20:31] <dalek> rakudo/nom: The latter is cheaper and simpler code. In many of the simple ops,

[20:31] <dalek> rakudo/nom: we do not make any kind of call, and thus could never call one of

[20:31] <dalek> rakudo/nom: the defering things (nextsame, etc.)

[20:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ebd31662e4

[20:32] <timotimo> jnthn: "Make be able to simplify"? :)

[20:32] <jnthn> heh, where is that?

[20:32] <jnthn> My English is awesome.

[20:33] <timotimo> Make English is Awesome

[20:33] <dalek> rakudo/nom: fc49436 | jnthn++ | src/Perl6/Optimizer.nqp:

[20:33] <dalek> rakudo/nom: Fix typo; timotimo++.

[20:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fc4943635c

[20:34] *** mlawren left
[20:35] <timotimo> :P

[20:36] <timotimo> success! i took about a minute of your valuable optimizer work time away from you to fix a little typo!

[20:36] <timotimo> i feel so productive and helpful ... not!

[20:37] <masak> timotimo++ # ... so!

[20:40] *** kaare_ left
[20:42] *** virtualsue_ joined
[20:43] *** virtualsue left
[20:43] *** virtualsue_ is now known as virtualsue

[20:45] *** denis_boyun__ left
[20:46] *** denis_boyun_ joined
[20:49] *** rurban1 joined
[20:51] *** rurban2 joined
[20:52] *** denis_boyun_ left
[20:53] *** rurban3 joined
[20:53] *** rurban1 left
[20:55] *** virtualsue left
[20:55] *** rurban2 left
[20:56] *** ajr_ left
[20:57] *** rindolf left
[20:57] *** rurban3 left
[21:01] *** anaeem1 left
[21:01] *** zengargoyle left
[21:04] *** kivutar left
[21:05] *** virtualsue joined
[21:05] *** jack_rabbit joined
[21:07] *** virtualsue left
[21:08] *** zengargoyle joined
[21:08] *** tgt left
[21:09] *** virtualsue joined
[21:11] <zengargoyle> https://github.com/zengargoyle/Text-Fortune.git  is probably ready for a lookover and maybe ecosystem

[21:13] <zengargoyle> it has some not-great stuff, but does do a version of strffile(1) and fortune(6)

[21:13] <zengargoyle> *strfile(1)

[21:16] *** pochi left
[21:24] *** rurban1 joined
[21:26] *** virtualsue left
[21:27] *** virtualsue joined
[21:32] <masak> good night, #perl6

[21:34] <japhb_> g'night, masak

[21:34] <japhb_> What is the right way to round a num and get an int in NQP?

[21:34] <japhb_> (Or Num/Int, for that matter)

[21:43] *** [particle] joined
[21:44] *** virtualsue left
[21:49] *** Possum left
[21:55] *** pmurias joined
[21:58] *** dragon_d joined
[22:00] *** rurban1 left
[22:01] *** spider-mario left
[22:02] <ssutch> i must be missing something. i should be able to do IO::Spec.os.join('foo','barf') correct?

[22:04] <ssutch> or even just IO::Spec.join('foo', 'barf') but its complaining about not having enough arguments

[22:05] *** rurban1 joined
[22:06] <ssutch> ah no its right i dont think join does what i was expecting (take 'a','b','c' and turn it into 'a/b/c' in a platform-generic way)

[22:06] <FROGGS_> catpath or so should do

[22:07] <ssutch> m: say IO::Spec.catpath('a','b')

[22:07] <camelia> rakudo-moar 3756b5: OUTPUT«Not enough positional parameters passed; got 3 but expected 4␤  in method catpath at src/gen/m-CORE.setting:13376␤  in method catpath at src/gen/m-CORE.setting:13761␤  in block  at /tmp/DFmBLt_Qmg:1␤␤»

[22:08] <FROGGS_> m: say IO::Spec.catdir('a','b')

[22:08] <camelia> rakudo-moar 3756b5: OUTPUT«a/b␤»

[22:09] <ssutch> aye, thanks FROGGS_ 

[22:12] *** carlin left
[22:12] *** carlin joined
[22:12] *** telex left
[22:14] *** telex joined
[22:17] *** dmol left
[22:17] *** akagi201_ left
[22:20] <ssutch> im getting No such method 'IO' for invocant of type 'Any' for this code: https://gist.github.com/samuraisam/c59386f4059f349f6e10

[22:20] <ssutch> does that not seem somewhat strange?

[22:21] <FROGGS_> m: say IO::Spec.catdir($?FILE, 'Proto', 'ql2_13x.proto');

[22:21] <camelia> rakudo-moar 3756b5: OUTPUT«/tmp/tUFgelVQ_0/Proto/ql2_13x.proto␤»

[22:21] <FROGGS_> I have no idea why

[22:22] <FROGGS_> perhaps it is something in PB::Model::Generator?

[22:29] <ssutch> derp, it must be

[22:29] <ssutch> i'm full of derps today

[22:30] <FROGGS_> *g*

[22:30] *** carlin left
[22:36] <dalek> rakudo/lex2loc: 0cc9125 | jnthn++ | src/vm/moar/Perl6/Ops.nqp:

[22:36] <dalek> rakudo/lex2loc: Fix a .DEFINITE code-gen bug.

[22:36] <dalek> rakudo/lex2loc: 

[22:36] <dalek> rakudo/lex2loc: Should not blindly re-use registers that may belong to locals.

[22:36] <dalek> rakudo/lex2loc: review: https://github.com/rakudo/rakudo/commit/0cc9125ead

[22:36] <dalek> rakudo/lex2loc: be0d277 | jnthn++ | src/Perl6/Optimizer.nqp:

[22:36] <dalek> rakudo/lex2loc: First pass at enabling lexical => local lowering.

[22:36] <dalek> rakudo/lex2loc: 

[22:36] <dalek> rakudo/lex2loc: Needs to take quite a bit of care, due to binder failover. This gets

[22:36] <dalek> rakudo/lex2loc: us through the build and passing the sanity tests. Quite a bunch of

[22:36] <dalek> rakudo/lex2loc: spectest fails, probably due to failures in the analysis.

[22:36] <dalek> rakudo/lex2loc: review: https://github.com/rakudo/rakudo/commit/be0d27729b

[22:36] <dalek> perl6-bench: 7c5a914 | (Geoffrey Broadwell)++ | / (4 files):

[22:36] <dalek> perl6-bench: Add first Complex benchmark, rc-mandelbrot

[22:36] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/7c5a914f09

[22:41] <ssutch> is there any way to compute an argument passed to a use statement?

[22:42] <ssutch> i need to compute a path that is passed to PB::Model::Generator

[22:42] <ssutch> it works fine when the argument is a static string

[22:45] *** grondilu left
[22:46] <ssutch> i tried throwing that code in a BEGIN block but that didn't seem to do the trick

[22:50] <jnthn> Try declaring a constant to hold it

[22:53] <ssutch> ah, changing the variables into constants seems to have worked

[22:53] <ssutch> thanks jnthn!

[22:56] <jnthn> np

[22:57] <jnthn> constants are computed at compile time.

[22:59] <ssutch> is there a way to inspect a module to see what's in it?

[22:59] <ssutch> eg python: dir(literally_anything)

[23:01] *** rurban1 left
[23:03] *** BenGoldberg left
[23:03] *** rurban1 joined
[23:07] *** rurban1 left
[23:08] *** xenoterracide__ joined
[23:14] <jnthn> Depends what you mean; can always look at what's inside a package with Foo::Bar::.keys for example

[23:18] *** Alina-malina left
[23:18] <ssutch> cool

[23:18] <ssutch> is there any way to re-export what is exported from a module you used?

[23:19] <ssutch> for example module A; use B 'blah'; where B generates some classes; i would like to be able to access those via A like A::BlahClass.new

[23:21] <jnthn> Well, can always do a BEGIN block and poke them into the package.

[23:22] *** itz_ left
[23:25] <japhb_> 'perl6 --profile'

[23:25] <japhb_> gives me 'No profiling support'

[23:25] <japhb_> Anything I can do about this?

[23:25] <ssutch> ah thanks jnthn i will try that out

[23:25] <jnthn> japhb_: Write a profiler? :P

[23:26] <jnthn> .oO( I don't think that was the desired answer... )

[23:26] <japhb_> jnthn: Ah, I was hoping the answer was "compile Rakudo with different options"

[23:27] <jnthn> m: module B { class A { } }; module C { BEGIN { for B::.kv -> $sym, $obj { C::{$sym} := $obj } } }; say C::A

[23:27] <camelia> rakudo-moar fc4943: OUTPUT«===SORRY!===␤Error while compiling op callstatic (source text: "say C::A"): Object of type A in QAST::WVal, but not in SC␤»

[23:27] <jnthn> um...

[23:27] <jnthn> m: module B { class A { } }; module C { BEGIN { for B::.kv -> \sym, \obj { C::{$sym} := $obj } } }; say C::A

[23:27] <camelia> rakudo-moar fc4943: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/idR1UjQoYZ␤Variable '$sym' is not declared␤at /tmp/idR1UjQoYZ:1␤------> [32mIN { for B::.kv -> \sym, \obj { C::{$sym[33m⏏[31m} := $obj } } }; say C::A[0m␤    expecting any of:␤      …»

[23:27] <jnthn> m: module B { class A { } }; module C { BEGIN { for B::.kv -> \sym, \obj { C::{sym} := obj } } }; say C::A

[23:27] <camelia> rakudo-moar fc4943: OUTPUT«(A)␤»

[23:28] <jnthn> japhb_: Well, I use the VS profiler to profile MoarVM at C level, but we don't have MoarVM profiling support yet.

[23:28] <ssutch> jnthn: that is pretty rad, thank you

[23:29] <jnthn> japhb_: It does work on Parrot.

[23:29] <jnthn> japhb_: It spits out something you can view in KCacheGrind

[23:29] <japhb_> jnthn: Understood.  Problem is, when I'm trying to figure out where r-m is slow ....

[23:30] * japhb_ is trying to find the low hanging fruit for your "Extract microbenchmarks from rc-forest-fire" request

[23:31] <jnthn> japhb_: Yeah, I know Moar supporting profiling is rather needed.

[23:31] <jnthn> I'm starting to miss it quite a bit too :)

[23:31] *** rurban1 joined
[23:32] <jnthn> Luckily, there's already a bytecode transformation framework to hand... :)

[23:32] <japhb_> heh

[23:33] *** ren1us joined
[23:34] *** atroxaper joined
[23:36] *** rurban1 left
[23:36] *** zengargoyle left
[23:36] <ssutch> so close https://gist.github.com/samuraisam/32cc2078f066847752c3 (?)

[23:38] *** zengargoyle joined
[23:38] *** atroxaper left
[23:45] *** xragnar_ joined
[23:45] *** xragnar left
[23:45] *** xragnar_ is now known as xragnar

[23:49] *** Alina-malina joined
[23:49] *** Alina-malina left
[23:49] *** Alina-malina joined
[23:51] *** rurban1 joined
[23:53] *** breinbaas left
[23:54] *** breinbaas joined
[23:55] *** rurban1 left
[23:57] *** klapperl_ joined
[23:57] *** klapperl left
[23:58] <lelf> say 1...Inf timeouts nowadays. Is it expected?

