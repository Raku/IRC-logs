[00:01] *** araujo left
[00:14] *** alc joined
[00:14] *** alc left
[00:17] *** ajr_ left
[00:22] *** Guest4386 is now known as ponbiki

[00:27] <timotimo> http://t.h8.lv/p6bench/2014-08-21-recent_stuff.html   <-  some benchmarks  ->  http://t.h8.lv/p6bench/2014-08-21-recent_rakudo.html

[00:29] <timotimo> TimToady: it may be of special interest to you that in the array_set_xx benchmark the improvement is about 18x

[00:31] <TimToady> \o/

[00:32] <timotimo> i wish everyone traveling to YAPC::EU now or in the next few hours or tomorrow before i get on irc safe and comfortable travels :)

[00:33] <TimToady> firshir

[00:37] *** Timbus left
[00:37] *** Timbus joined
[00:38] <timotimo> i'll probably be following the perl6 related streams closely

[00:38] <timotimo> maybe even more :3

[00:42] <colomon> timotimo: hmmm, the jansson thing works great in parrot

[00:43] <timotimo> colomon: it'd be nice if you could upload a bit of code that reproduces the problem

[00:43] <timotimo> with an example json file as well if possible :)

[00:43] <japhb> \o/ For massive xx performance improvement

[00:44] <timotimo> still kind of frustrating that in our bigger benchmarks, improvements are much, much weaker

[00:44] <timotimo> especially the tiny bump the jit does is ... sub-optimal

[00:44] <timotimo> but ... yeah, the param_* ops will have their jit impls soon-ish and that'll give us many, many more frames attempted to jit

[00:46] <TimToady> is anyone else having trouble downloading those graphs?

[00:47] *** thou joined
[00:48] <colomon> timotimo: working on it.  ;)

[00:49] *** Tassilo joined
[00:49] <Tassilo> hello

[00:49] <timotimo> thank you

[00:49] <japhb> Can you get the page at all?  If so, do you have a script blocker running?

[00:49] <timotimo> i'll probably have my nightly dose of sleep before i dive into your code

[00:50] <TimToady> I haven't had trouble before

[00:50] <japhb> Hmmm, they came up just fine for me.

[00:51] <japhb> And it's not like the JS code changes all that often.

[00:51] <colomon> timotimo: https://github.com/colomon/p6-json-jansson  -- the tests I've added in t/01-basics.t show the problem nicely.  

[00:51] <TimToady> oh, I'll bet I just have to restart ff

[00:51] <japhb> (JQPlot appears to be essentially "stable" at this point.)

[00:52] <TimToady> istr that it goes wonky when it upgrades under you

[00:52] <japhb> Same with Chrome, sigh

[00:52] *** thou left
[00:55] *** telex left
[00:56] <TimToady> nope, same deal

[00:56] *** telex joined
[00:56] *** muraiki left
[00:56] <TimToady> just sits there flashing Transferring data from t.h8.lv...

[00:58] *** woosley joined
[00:58] *** muraiki joined
[00:59] <japhb> Reload seemed to work, so it's not like the endpoint is dead.

[00:59] *** rurban1 joined
[01:01] <timotimo> colomon: all i can think of is that perhaps we're not doing the reference counting thing properly?

[01:02] <timotimo> and after we get the one list, the other list gets get'd, but jansson's like "you didn't increase the ref count of the first list, so i'll overwrite it with the first"

[01:02] <timotimo> not quite sure why it'd end up the same which, though ...

[01:03] <colomon> timotimo: or why it would work in parrot?

[01:03] *** rurban1 left
[01:04] *** Tassilo left
[01:04] <timotimo> well, it also doesn't help

[01:04] <timotimo> i mean when i incref it

[01:06] * timotimo goes to bed

[01:06] <timotimo> gnite

[01:06] <colomon> \o

[01:06] <timotimo> it's a very good find, i must say

[01:10] *** BenGoldberg joined
[01:24] *** dayangkun joined
[01:28] *** FROGGS_ joined
[01:31] *** FROGGS left
[01:35] *** rindolf joined
[01:40] *** klapperl_ joined
[01:41] *** klapperl left
[01:44] *** ilbot3 left
[01:46] *** ilbot3 joined
[01:52] *** xenoterracide joined
[01:54] *** hypolin joined
[01:55] *** hypolin left
[01:55] *** Akagi201 joined
[02:11] *** nbrown_ joined
[02:14] *** araujo joined
[02:34] *** BenGoldberg left
[02:35] *** thou joined
[02:36] <dalek> roast: e2a83ff | (David Warring [email@hidden.address] | S02-literals/misc-interpolation.t:

[02:36] <dalek> roast: tests for RT #122583 list comprehension + $(...) interpolation

[02:36] <dalek> roast: review: https://github.com/perl6/roast/commit/e2a83ff8c6

[02:36] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122583

[02:37] *** nbrown_ left
[02:40] *** thou left
[02:45] *** noganex joined
[02:47] *** noganex_ left
[02:53] *** ivanshmakov left
[02:56] *** ivanshmakov joined
[03:11] *** raiph left
[03:16] *** kaare_ joined
[03:55] *** ivanshmakov left
[03:58] *** ivanshmakov joined
[04:07] *** kaare_ left
[04:15] *** xenoterracide left
[04:19] *** mattp___ left
[04:19] *** [Sno] left
[04:21] *** xenoterracide joined
[04:21] *** kaleem joined
[04:24] *** thou joined
[04:29] *** thou left
[04:36] *** kaare_ joined
[04:38] *** SamuraiJack joined
[04:44] <lizmat> commute&

[04:44] *** lizmat left
[04:55] *** xenoterracide left
[04:58] *** anaeem1 joined
[05:37] *** gfldex joined
[05:38] *** Mouq joined
[05:45] *** hoelzro left
[05:45] *** alc joined
[05:45] *** hoelzro joined
[05:48] *** jtpalmer_ left
[05:48] *** jtpalmer joined
[05:51] *** SamuraiJack left
[05:54] *** SamuraiJack joined
[06:08] *** [Sno] joined
[06:08] *** gfldex left
[06:10] <sergot> morning o/

[06:12] *** thou joined
[06:16] *** denis_boyun_ joined
[06:17] *** thou left
[06:17] <kurahaupo> evening \o

[06:19] *** mattp___ joined
[06:23] *** PotatoGim left
[06:26] <Mouq> middle of the night \o

[06:40] *** kaleem left
[06:47] <dalek> rakudo/nom: 47d315a | TimToady++ | src/core/LoL.pm:

[06:47] <dalek> rakudo/nom: optimize X operator, esp for ranges

[06:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/47d315aa94

[06:48] <dalek> rakudo/nom: 1260360 | Mouq++ | docs/ChangeLog:

[06:48] <dalek> rakudo/nom: Add some ChangLog entires

[06:48] <dalek> rakudo/nom: 

[06:48] <dalek> rakudo/nom: I just did this from a quick perusal of the git logs; please add to this

[06:48] <dalek> rakudo/nom: if you think something is missing.

[06:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1260360c1a

[06:48] <dalek> rakudo/nom: 7e23526 | Mouq++ | src/core/LoL.pm:

[06:48] <dalek> rakudo/nom: Merge branch 'nom' of http://github.com/rakudo/rakudo into nom

[06:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7e23526ce4

[06:48] <TimToady> ^200 X ^200 now runs about 3 times faster

[06:50] <Mouq> Woot!

[06:51] <TimToady> though it's still slower than nested loops

[06:51] <TimToady> since we have to allocate the entries

[06:52] <TimToady> so at some point we'll want to optimize 'for @a X @b -> $a, $b {}' into 'for @a -> $a { for @b -> $b {...} }, only without the extra lexical scope, if we can get away with it

[07:02] *** darutoko joined
[07:04] *** zakharyas joined
[07:05] <moritz> when Range { eager @result }

[07:05] <moritz> what does that do for infinite ranges?

[07:05] <TimToady> that wants to generalize someday

[07:05] *** takesako left
[07:06] <TimToady> eager will just batch things up in that case, I think

[07:06] <TimToady> it's only "mostly eager"

[07:07] <TimToady> in any case, we probably want to generalize that test with more input from the compiler

[07:08] <TimToady> but adding the same thing to X+ makes it maybe 30% faster

[07:08] <TimToady> not as much gain since it's doing a lot of other work to call +

[07:08] <TimToady> still, beats a kick in the head

[07:09] <TimToady> if it turns out to be a problem, we can ask the range for it's max

[07:10] <moritz> for 1..$n -> $i { # might be even faster to write a while loop with a native int

[07:10] <TimToady> that's already optimized, I think

[07:11] <TimToady> though perhaps not to native

[07:11] <TimToady> but yeah, if you can prove max value, you can use natives

[07:12] *** gtodd left
[07:13] *** chenryn joined
[07:14] *** gtodd joined
[07:15] <moritz> $n is already a native int :-)

[07:16] *** PotatoGim_ joined
[07:19] *** PotatoGim joined
[07:22] *** PotatoGim_ left
[07:23] *** FROGGS_ is now known as FROGGS

[07:24] *** kaleem joined
[07:44] *** smls joined
[08:00] *** thou joined
[08:05] *** thou left
[08:07] *** alc left
[08:10] *** chenryn left
[08:10] *** rindolf left
[08:11] *** rindolf joined
[08:12] *** bjz left
[08:16] *** klaas-janstol joined
[08:27] *** smls left
[08:32] *** bjz joined
[08:34] *** smls joined
[08:38] *** jercos left
[08:39] *** jercos joined
[08:40] *** chenryn joined
[08:45] *** fhelmberger joined
[08:46] *** chenryn left
[09:04] *** Mouq left
[09:07] <dalek> rakudo/nom: c0d8643 | TimToady++ | src/core/ (2 files):

[09:07] <dalek> rakudo/nom: pessimize .infinite X args more consistently

[09:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c0d86438a0

[09:09] <TimToady> moritz++ for making me take a second look

[09:09] <timotimo> o/

[09:09] <sergot> hi timotimo 

[09:13] <TimToady> timotimo: your ^SCALE X ^SCALE benchmarks should run faster now

[09:14] *** SamuraiJack left
[09:14] <nwc10> TimToady: are you experimenting with the xkcd 28 hour schedule? :-)

[09:15] <TimToady> no, just the flipside of SAD :)

[09:15] <TimToady> and what with all this staying at home, have more energy than usual

[09:16] <TimToady> and since my wife is up visiting in Seattle, nobody to tell me to go to bed :)

[09:18] <timotimo> i wonder how hard it'll be to build an optimization in code-gen or optimizer that turns an ^$foo X ^$bar -> $a, $b into a nested while loop internally while still properly handling redo/next/last

[09:19] <timotimo> on the other hand, making it a non-nested loop wouldn't be terribly hard either, just code-gen an increment operation that's a tiny bit more complicated than just $i++

[09:19] <TimToady> surely only last is a problem

[09:20] <TimToady> and you can solve that with loop labels

[09:20] <timotimo> ah, hm.

[09:20] <TimToady> redo and next go to INNER: while last goes to OUTER:

[09:21] <timotimo> but if the outer loop itself has a label, we can't properly turn it into a nested loop, right?

[09:21] <timotimo> or would it be enough to transfer that loop to the inner loop?

[09:22] <timotimo> hm, not quite; you can pass labels to functions you call, right?

[09:22] <timotimo> in that case, a "last" could appear with the then-inner loop's label and mess up our pretty scheme

[09:25] <TimToady> you just split the label, if the loop as a whole is FOO:, then you end up with OUTERFOO: and INNERFOO: or some such

[09:25] <TimToady> but yeah, dynamic can mess that up, unless you install a FOO handler that is smart

[09:27] <timotimo> sounds like work :)

[09:28] <nwc10> TimToady: PASS (other than t/spec/S32-io/IO-Socket-Async.rakudo.moar and t/spec/S32-list/uniq.t)

[09:28] <TimToady> well, and lock still flaps

[09:28] <nwc10> several of them SEGV on me if I build optimised. Timing issues. I believe jnthn is aware of this

[09:29] <TimToady> there was a test that required an infinite list on the right side of X*, and metaop handled that, but X didn't (though there's no test for it)

[09:30] <TimToady> should handle it now by just not eagerizing anything

[09:30] <TimToady> GIGO, just slowly :)

[09:30] <moritz> m: say (5 X* 1..*)[^10]

[09:30] <camelia> rakudo-moar 7e2352: OUTPUT«5 10 15 20 25 30 35 40 45 50␤»

[09:31] <TimToady> m: say (5 X 1..*)[^10]

[09:31] <moritz> I'm sure that for a Haskellian, that's a legitimate way to generate this series

[09:31] <camelia> rakudo-moar 7e2352: OUTPUT«This type cannot unbox to a native integer␤  in sub infix:<X> at src/gen/m-CORE.setting:8806␤  in block  at /tmp/InmOavjVJV:1␤␤»

[09:31] <TimToady> eh?

[09:31] *** klaas-janstol left
[09:31] <timotimo> moritz: could just Z or <<*<< it

[09:31] <TimToady> oh, notmine

[09:31] <timotimo> well, would have to use a range or repetition on the left

[09:31] <TimToady> hypers are eager

[09:31] <timotimo> (for Z)

[09:31] <timotimo> oh!

[09:31] <timotimo> of course they are

[09:32] <TimToady> > perl6

[09:32] <TimToady> > say (5 X 1..*)[^10]

[09:32] <TimToady> 5 1 5 2 5 3 5 4 5 5 5 6 5 7 5 8 5 9 5 10

[09:32] <TimToady> so I fixed the X case, just hasn't recompiled yet

[09:34] <moritz> aye

[09:34] <TimToady> I suppose X should look for infinities after the first argument, and if the second value of the first argument can never be reached, warn

[09:35] <TimToady> or basically, if there is more than one .infinity, you've written something sorta bogus

[09:35] *** Ven joined
[09:36] <TimToady> or anything that's not a single value left of a .infinite, for that matter

[09:37] <TimToady> but coming up with a message that doesn't confuse the (obviously already confused) programmer is gonna be a trick

[09:40] <TimToady> well, the message is probably not worth the memory it would consume

[09:43] *** chenryn joined
[09:48] *** chenryn left
[09:49] *** thou joined
[09:53] *** klaas-janstol joined
[09:53] *** thou left
[10:02] *** kurahaupo left
[10:03] *** chenryn joined
[10:17] *** jaffa4 joined
[10:22] *** chenryn left
[10:26] *** spider-mario joined
[10:29] *** jaffa4 left
[10:36] *** raiph joined
[10:37] *** rindolf left
[10:40] *** raiph left
[10:40] *** raiph joined
[10:46] *** lizmat joined
[10:48] *** spider-mario left
[10:54] *** dayangkun left
[10:54] <dalek> rakudo/nom: f1edae0 | (Elizabeth Mattijsen)++ | docs/ChangeLog:

[10:54] <dalek> rakudo/nom: Change of lives/dies_ok did not exceed a release

[10:54] <dalek> rakudo/nom: 

[10:54] <dalek> rakudo/nom: So we don't need to mention this in the ChangeLog

[10:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f1edae0be9

[10:54] * lizmat is sitting rather numbed behind the keyboard

[10:55] *** spider-mario joined
[10:56] *** Akagi201 left
[11:02] *** telex left
[11:03] *** Ven left
[11:04] *** telex joined
[11:07] *** dayangkun joined
[11:13] *** woolfy joined
[11:17] <timotimo> what's wrong?

[11:21] <lizmat> our cat Whoopi died ~ 2 hours ago

[11:21] <lizmat> she was with us for 12+ years

[11:22] <lizmat> we also missed our flight and are now considering our options, as there is no identical flight available tomorrow

[11:23] <lizmat> and on Saturday, we probably would only be able to make it for the lightning talks, maybe a bit earier

[11:24] <lizmat> but, truth be told, right now I don't feel like doing anything much

[11:25] *** SamuraiJack joined
[11:25] <timotimo> oh no! :(

[11:26] <timotimo> you have my sympathies

[11:26] <timotimo> losing a beloved pet is terrible

[11:27] <timotimo> only recently i've been reminded of our dog Nicki who passed away about 6 years ago

[11:35] *** raiph left
[11:35] *** raiph joined
[11:36] *** dwarring left
[11:37] *** thou joined
[11:41] <lizmat> timotimo: thank you

[11:42] *** thou left
[11:48] <moritz> lizmat: my sympathies

[11:51] <lizmat> moritz: thank you

[11:56] *** raiph left
[11:59] <sergot> lizmat: my sympathies as well

[12:01] *** chenryn joined
[12:04] *** bjz left
[12:07] *** kurahaupo joined
[12:14] *** kaleem left
[12:24] *** raiph joined
[12:28] *** bjz joined
[12:32] *** Bucciarati left
[12:32] *** betterworld left
[12:33] *** Bucciarati joined
[12:33] *** betterworld joined
[12:37] *** kaare_ left
[12:41] <tadzik> ohh

[12:41] <tadzik> lizmat: hugs to both of you :( I lost my 13yo dog this summer too

[12:41] <lizmat> sergot tadzik thank you

[12:42] <colomon> lizmat: hugs

[12:43] <lizmat> colomon thank you

[12:48] *** kaleem joined
[12:51] *** raiph left
[12:51] *** chenryn left
[12:51] *** kurahaupo left
[12:51] *** raiph joined
[12:57] *** bjz left
[12:58] *** bjz joined
[13:04] *** smls left
[13:04] *** Akagi201 joined
[13:08] *** prevost joined
[13:13] *** ggoebel11111115 joined
[13:13] *** anaeem1 left
[13:15] *** anaeem1 joined
[13:16] *** ggoebel11111114 left
[13:19] *** donaldh joined
[13:19] *** anaeem1 left
[13:25] *** cooper left
[13:25] *** thou joined
[13:30] *** thou left
[13:31] *** cooper joined
[13:37] *** guru joined
[13:38] *** guru is now known as Guest60219

[13:38] *** jnap joined
[13:38] *** Guest60219 is now known as ajr_

[13:44] *** kaare_ joined
[13:51] *** jimmyz_ joined
[13:52] *** jimmyz_ left
[13:57] <hoelzro> lizmat: I'm really sorry to hear that

[13:59] <hoelzro> (sorry, a little late)

[14:05] *** RandalSchwartz joined
[14:05] *** thou joined
[14:06] <RandalSchwartz> when I try to make rakudo with moar, I always get this error:

[14:06] <RandalSchwartz> ... perl -MExtUtils::Command -e cp perl6-m perl6

[14:06] <RandalSchwartz> ... gmake: write error

[14:06] <RandalSchwartz> am I doing something wrong?  It seems to stop the make

[14:06] <RandalSchwartz> I never got that building the parrot backend

[14:07] *** dakkar joined
[14:13] <moritz> RandalSchwartz: disc full? or is anythinig wrong with your local 'perl6' (dangling symlink?)

[14:14] <jnthn> lizmat: Really sorry to hear about Whoopi. And the flight, though that seems somehow insignificant in comparison... :(

[14:14] <masak> lizmat: what jnthn said :/

[14:14] <RandalSchwartz> nope

[14:14] <RandalSchwartz> where is it trying to copy to?

[14:14] <jnthn> RandalSchwartz: You may also have the misfortune of being on a version of OSX that ships with a busted make (yes, really). If you "make" again it actually completes successfully.

[14:14] <RandalSchwartz> nope.

[14:14] <RandalSchwartz> using gmake

[14:15] <RandalSchwartz> built from ports

[14:15] <jnthn> OK. The error matches exactly.

[14:15] <jnthn> Does typing "make" again make it work?

[14:15] <RandalSchwartz> and no, it repeats precisely the same way, although faster since things are already made.

[14:15] <jnthn> Ouch. That is different.

[14:16] <jnthn> I don't have a platform where it happens, but from the digging I've heard about, the error actually is spat out by make, rather than anything of ours. :/

[14:17] <moritz> and to answer it the question, it just tries to perl6-m to perl6

[14:17] <moritz> all in the current directory

[14:17] <rurban> I also had the same error as Randal recently. Didn't investigate

[14:20] <timotimo> it's also a thoroughly unhelpful error message :\

[14:21] *** pyrimidine joined
[14:21] *** molaf joined
[14:22] <pyrimidine> I had that error as well, but ‘make install’ worked fine

[14:22] <pyrimidine> (on Mac OS X)

[14:23] <btyler_> likewise, also using system make, OSX 10.9

[14:25] <pyrimidine> Also: http://irclog.perlgeek.de/perl6/2014-04-28#i_8647503

[14:25] <betterworld> maybe 'make -s' helps

[14:25] *** molaf left
[14:26] *** dakkar left
[14:26] *** dakkar joined
[14:27] <rurban> I also got it on the darwin make only

[14:28] * pyrimidine testing ‘make -s’

[14:28] *** klaas-janstol left
[14:29] *** tgt joined
[14:30] <tgt> Has anyone managed to golf the OS X make error down to anything I could usefully submit to Apple?

[14:31] <moritz> git clone [email@hidden.address] cd rakudo; perl Configure.pl --gen-moar --gen-nqp; make

[14:31] * pyrimidine hasn’t

[14:31] <moritz> just 4 commands! :-)

[14:32] <moritz> even better, use the https:// URL, so that they don't need a github account

[14:33] *** tassilo joined
[14:34] <pyrimidine> ugh

[14:35] * RandalSchwartz repeats... "using gmake"

[14:35] <pyrimidine> after git pull and make: Stage parse      : moar(81319,0x7fff7c7e6310) malloc: *** error for object 0x7fcaf38cd0b0: pointer being freed was not allocated

[14:36] <tgt> I think they'd prefer us to do all the work :(

[14:36] *** dakkar left
[14:36] <moritz> if both make and gmake exhibit the problem (and they aren't the same), maybe it's really a problem in our Makefile

[14:38] <pyrimidine> moritz: seeing compilation error with a git pull now ^^^

[14:38] <moritz> pyrimidine: :(

[14:38] *** tgt left
[14:40] <pyrimidine> I’ll try bisecting

[14:41] <betterworld> according to the sources, "write error" is printed when (g)make gets an error closing standard output, so I guess it is a problem with the terminal, and "make -s" might be a way around that

[14:42] <daxim_> code in p5, but question is grammar-centric:  now that I have my AST <http://paste.scsys.co.uk/417408>, how do I go about transpiling it to a different programming language? any tutorials I should read?

[14:43] *** treehug88 joined
[14:43] <moritz> daxim_: depends on the target language

[14:44] <moritz> daxim_: there's tons of literator on code generation, though most assumes it's assembly or something similar

[14:44] <moritz> daxim_: if it's more like a high level language, I approach it more like I'd approach any other text document generation (think HTML...)

[14:44] <daxim_> no, also high-level like the dynamic P-languages

[14:45] <daxim_> HTML is vague - do you mean use a templating system?

[14:45] <moritz> yes, at least for the broad structure

[14:46] <moritz> and then you can have objects that know how to codegen-ify themselves

[14:46] <jnthn> daxim_: Sometimes I take the approach of building up a tree structure that describes the target language, and that stringifies to the code.

[14:47] <moritz> or you can have template functions that know how to codegen-ify a certain type of operation, and use some form of genericity to pick the right function for each operation

[14:47] <jnthn> daxim_: In general, the goal is to push dealing with strings to the edges of the system.

[14:47] <daxim_> ooh, then I need to study the target languages in detail first

[14:47] <jnthn> So that as little as possible remains to be decided by the time you turn it into a string.

[14:50] <timotimo> oh hey jnthn, you've arrived near sofia?

[14:51] <jnthn> Yeah, I'm at my hotel

[14:51] <jnthn> Wasn't too bad a journey. Ended up doing a slightly bumpy propellor plane ride for the last bit. And then the taxi desk gave us a hotel to the wrong place! But made it :)

[14:53] <timotimo> good to know

[14:54] <jnthn> Nice to see some Cyrillic again :)

[14:55] <gtodd> nice beaches?

[14:56] <gtodd> :-)  ... gotta head east for that

[14:56] <gtodd> or south 

[14:57] <felher> +

[14:58] <jnthn> yeah, red line

[14:58] <jnthn> oops, ww

[14:59] <gtodd> I have a mechanical question about the rakudo build ...  in what "order" are the backends  built? if I do --backends=moar,parrot --gen-moar --gen-parrot do moarvm.parrot get built then the nqp specific portions of perl6-m perl6-p ...  ? 

[14:59] <gtodd> actaully better Q:  I'd like to try to build and install everything with say a cron job and have failures skipped ... can I do that somehow?

[15:00] <[Coke]> lizmat: very sorry about your cat. :|

[15:01] <gtodd> (was trying to write a quick script that would remove a failed build from the configure stage and rerun)

[15:01] <[Coke]> RandalSchwartz's problem happens every single time on os x, and has been doing for MONTHS.

[15:02] <lee_> i've seen that on OS X for a long time, but it didn't seem to prevent installing of perl6

[15:02] *** chenryn joined
[15:03] <[Coke]> I typically have to then "chmod a+x ./perl6", and things can continue; but if you're doing it as part of a bigger process, it kills you dead.

[15:04] * jnthn wonders if just tinkering with the Makefile a bit would make it somehow go away...

[15:04] <[Coke]> I tried debugging the issue, but if you tell the os x make to use debug mode... it segfaults. (make)

[15:04] <jnthn> o.O

[15:05] <[Coke]> If you're bisecting, try before and after --backends change. Though I'm not sure how much Moar there was before that change.

[15:05] <[Coke]> jnthn: yah, it's sneaky. :|

[15:05] *** tassilo left
[15:06] * [Coke] is doing the release on a linux box to avoid the issue. :|

[15:06] * [Coke] will get the release out this evening local time.

[15:07] <pyrimidine> moritz: the bad commit that was causing the malloc: https://gist.github.com/cjfields/4ced0ba97eabbf82dfce

[15:08] <pyrimidine> … https://github.com/rakudo/rakudo/commit/c0d86438a04d94a866cd98d9ca6cd5abe0920b02

[15:09] <pyrimidine> BTW, it is not related to —enable-jit (get the error with and w/o it)

[15:11] <jnthn> [Coke]: Remember to bump to latest MOAR_REVISION and NQP_REVISION, if that's not done already. :)

[15:11] <[Coke]> need to do nqp release, so I'll just use the release versions, ayes?

[15:12] <jnthn> Correct

[15:12] <jnthn> I did the Moar release already

[15:12] *** denis_boyun_ left
[15:12] <[Coke]> jnthn++

[15:13] <jnthn> Tarball link is in the backlog of #moarvm

[15:13] <dalek> rakudo-star-daily: 064986e | coke++ | log/ (14 files):

[15:13] <dalek> rakudo-star-daily: today (automated commit)

[15:13] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/064986ef85

[15:15] <[Coke]> I bumped the parrot release to 670, as it had one or two things that sounded worth getting.

[15:15] <[Coke]> testing a moarvm run now, expecting no issues..

[15:19] *** dayangkun left
[15:23] *** chenryn left
[15:25] *** chenryn joined
[15:26] *** cognome left
[15:26] *** cognome joined
[15:31] *** cognome left
[15:36] <dalek> nqp: cc6e693 | coke++ | tools/build/MOAR_REVISION:

[15:36] <dalek> nqp: bump MOAR to latest (recent) release

[15:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/cc6e693f81

[15:40] *** fhelmberger left
[15:40] *** chenryn left
[15:41] *** chenryn joined
[15:41] <jnthn> pre-conf meat &

[15:41] <nwc10> om nom nom

[15:41] *** ajr_ left
[15:41] *** zakharyas left
[15:45] *** guru joined
[15:45] *** guru is now known as Guest69825

[15:46] *** Guest69825 is now known as ajr_

[15:57] *** donaldh left
[15:57] *** ajr_ left
[16:07] *** ajr joined
[16:08] *** ajr is now known as Guest85205

[16:08] *** Guest85205 is now known as ajr_

[16:11] *** chenryn left
[16:13] *** kaleem left
[16:14] * TimToady wonders if OS X comes with a default umask that prevents creating an executable, hence the need for an explicit chmod +x

[16:14] <TimToady> though that wouldn't explain why a second make would work sometimes

[16:15] *** chenryn joined
[16:15] * TimToady wonders how his last patch could possibly be causing a malloc problem

[16:16] *** Ven joined
[16:17] <TimToady> pyrimidine: what arch and hardware is the malloc problem?  and can anyone else reproduce this?

[16:17] <TimToady> .oO(they're probably all out partying...)

[16:18] <TimToady> er, I meant OS--arch and hardware are sort of the same thing

[16:18] <pyrimidine> TimToady: Mac OS X 10.9.4

[16:19] <TimToady> ah...hmm...haven't there been malloc issues on OS X before?

[16:20] <TimToady> anyway, that patch is all high-level code, so it must be tickling a bug somewhere else

[16:20] * colomon just got back from the podiatrist.  

[16:20] <TimToady> did you walk?

[16:20] <colomon> to and from the car.  ;)

[16:20] <pyrimidine> TimToady: not sure.  I bisected to that specific commit, but I agree re: bug tickling

[16:21] <colomon> TimToady: painkillers haven't worn off yet

[16:21] <TimToady> better living through chemistry

[16:21] <colomon> so how can I try to duplicate this on OS X 10.8?

[16:23] <gtodd> [Coke] something still gives this error on FreeBSD with clang ... http://paste.scsys.co.uk/416737?tx=on&submit=Format+it%21 (I think it is when nqp-p is getting built) ... I recall some kind of fix being discussed that was possibly Makefile-ish  (??)  

[16:23] <TimToady> colomon: see http://irclog.perlgeek.de/perl6/2014-08-21#i_9222686

[16:23] <gtodd> [Coke]: all I could find was http://irclog.perlgeek.de/perl6/2014-06-10  ChoHag

[16:23] <TimToady> or are you asking about the version skew?

[16:24] <colomon> TimToady: trying to build f1edae0be91da7b9faaee0e247be5db276ac770c here now.

[16:26] <TimToady> also some discussion back at http://irclog.perlgeek.de/perl6/2014-08-18#i_9205478

[16:27] <TimToady> which btw predates my latest patch, so it's not about the patch at all, seems

[16:27] <TimToady> sounds like building with LOLLY=1 fixed it for lizmat++, but that could be coinkydink

[16:28] <TimToady> and it might just be moving a fencepost somewhere

[16:30] <gtodd> so probably just wishful thinking on my part ... anyway it was something to do with parrot's version of nqp's dyncall so hopefully that bit of src/build strangeness will just get straightened out and the problem will go away magically in some future release :-)  ... 

[16:32] <TimToady> can anyone on OS X confirm that the umask is something like 0022 and not something like 0044 or 0066?

[16:36] <btyler_> 0022, OSX 10.9.4

[16:36] <pyrimidine> TimToady: on my MBP it’s 0022

[16:36] <pyrimidine> same as btyler_ 

[16:37] *** cognome joined
[16:37] <colomon> TimToady: Building f1edae0be91da7b9faaee0e247be5db276ac770c on OS X 10.8.5 worked fine

[16:37] <colomon> 0022 here as well

[16:38] <TimToady> well, and that wouldn't explain it, since tools/build/create-moar-runner.pl does a chmod 0755 anyway

[16:41] *** cognome left
[16:41] <TimToady> oh, and it's the 'perl -MExtUtils::Command -e cp perl6-m perl6' that fails, anyway

[16:43] *** pmurias joined
[16:43] <pmurias> daxim_: which language are you transpiling?

[16:45] *** [Sno] left
[16:45] *** chenryn left
[16:46] <pmurias> daxim_: what do you want to turn your toy language into?

[16:47] <TimToady> now here's the funny thing: my bulid doesn't actually run that command, presumably because I already have a symlink from perl6 -> perl6-m

[16:47] <TimToady> *build

[16:50] <TimToady> could a previous build of perl6-p or perl6-j be putting a perl6 out there that can't be overwritten, if there's no symlink?

[16:51] <TimToady> (my symlink dates from, like, February or so...)

[16:56] *** takan joined
[16:56] *** takan left
[17:01] *** klaas-janstol joined
[17:07] *** Rotwang joined
[17:12] *** tgt joined
[17:12] *** Ven left
[17:12] *** klaas-janstol left
[17:20] *** zakharyas joined
[17:29] *** raiph left
[17:32] *** raiph joined
[17:34] *** ajr_ left
[17:35] <[Coke]> TimToady: second make never works any times. (Os x)

[17:35] <[Coke]> gtodd: I don't know that one. is there a ticket?

[17:43] <TimToady> is there already a perl6 file sitting there when it fails?

[17:44] <TimToady> but then why does it fail that way, if it's just a file collision?

[17:47] *** Ven joined
[17:48] *** telex left
[17:50] *** telex joined
[17:51] <TimToady> okay, it doesn't do the m-runner-default because I said "make m-install", and m-runner-default is only called from "all"

[17:52] <TimToady> I note that the m-runner-default rule doesn't do a CHMOD on the target; could the copy on OS X not be carrying over the executable permissions?

[17:52] *** [j4jackj] is now known as j4jackj

[17:52] <TimToady> lemme just add a CHMOD there, maybe it will solve the problem

[17:52] *** kurahaupo joined
[17:59] <dalek> nqp-js: 52c8e38 | (Pawel Murias)++ | src/vm/js/ (3 files):

[17:59] <dalek> nqp-js: Pass test 14 - while loops.

[17:59] <dalek> nqp-js: 

[17:59] <dalek> nqp-js: Implement nqp ops: islt_n, isgt_n, add_i, sub_i, preinc, predec, postinc, postdec.

[17:59] <dalek> nqp-js: And partially the ops: while, until, repeat_while, repeat_until.

[17:59] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/52c8e3868a

[18:01] <[Coke]> to be clear, you getting a "make file: write error" ?

[18:01] <TimToady> yes, but you said a chmod then fixes it, I thought

[18:01] *** treehug88 left
[18:02] <TimToady> can't hurt to have the chmod there, anyway

[18:03] <TimToady> also told it to ignore errors on the cp, so maybe that will suppress the write error, but probably not

[18:04] <TimToady> maybe it should try to rm what's there already

[18:04] <TimToady> we don't know exactly what is giving make indigestion there

[18:04] <TimToady> could even be something rotten in a variable

[18:05] <[Coke]> "fix" is strong. I'm not saying it's dying on the chmod, I'm saying that after I do that, I can use the perl6 that's there.

[18:05] <[Coke]> (don't know exactly) exactly! ;)

[18:07] <TimToady> a write error could be caused by an invisible char in the filename that OS X gets upset at, I suppose, but that's a long shot

[18:07] *** Ven left
[18:10] <dalek> nqp-js: bbd25fc | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[18:10] <dalek> nqp-js: Implement mod_n, isge_n, bitor_i, bitand_i, bitxor_i.

[18:10] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/bbd25fc866

[18:10] <dalek> nqp-js: 001ca80 | (Pawel Murias)++ | src/vm/js/bin/run_tests:

[18:10] <dalek> nqp-js: Pass test 13.

[18:10] <dalek> nqp-js: 

[18:10] <dalek> nqp-js: Implement the ops bitor_i, bitand_i, bitxor_i, mod_n, isge_n.

[18:10] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/001ca80611

[18:11] <TimToady> or what if, for some reason, someone has a symlink from perl6 to something unwritable?  that would produce these symptoms

[18:11] <TimToady> an rm would fix that

[18:12] <FROGGS> hmmm, I don't see any invisible char in my Makefile

[18:13] <TimToady> you on OS X?

[18:13] <FROGGS> no

[18:13] *** guru joined
[18:13] <FROGGS> I looked at the templates and my generated Makefile on linux

[18:14] *** guru is now known as Guest64656

[18:14] <FROGGS> from #moarvm: <rurban> ExtUtils::Command cp is usually the culprit, dropping the -x perm

[18:14] <TimToady> in the old days, we had to make our own symlink to perl6, so if someone remade in an old directory that had a symlink to a root-owned directory, it could cause this

[18:14] *** Guest64656 is now known as ajr_

[18:15] <TimToady> I will put in a rm as well

[18:16] <dalek> rakudo/nom: 79fc622 | coke++ | docs/ChangeLog:

[18:16] <dalek> rakudo/nom: minor updates

[18:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/79fc6227f9

[18:20] <dalek> rakudo/nom: 3bb45b7 | TimToady++ | tools/build/Makefile-Moar.in:

[18:20] <dalek> rakudo/nom: make sure we don't have perl6 symlink, chmod 755

[18:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3bb45b7fed

[18:20] <TimToady> anyone on OS X care to try that?

[18:20] <TimToady> unfortunately, requires a reconfig

[18:20] *** prevost left
[18:20] <TimToady> then a make all

[18:23] <TimToady> Randa

[18:23] <TimToady> RandalSchwartz: I may have fixe it in HEAD

[18:23] <TimToady> *ed

[18:23] <huf> for a second there i was really confused... didnt think you spoke that language :D

[18:24] *** cognome joined
[18:24] <TimToady> it's amazing what happens when your corpus colossum misfires and you type Return instead of Tab

[18:25] <rurban> I'll try

[18:26] <TimToady> thanks

[18:26] <dalek> nqp: 4a8fe9f | coke++ | VERSION:

[18:26] <dalek> nqp: bump VERSION to 2014.08

[18:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4a8fe9fe48

[18:31] <tgt> The write error still happens here. I ended up with an executable perl6 this time though.

[18:31] <TimToady> huh

[18:32] <TimToady> perhaps an educational message is in order

[18:32] <tgt> The write error also happens when just running m-all.

[18:33] <TimToady> which command does it happen on?

[18:33] <tgt> After M_RUNNER

[18:34] * colomon wonders if this is the same write error he's been getting seemingly forever….

[18:35] <RandalSchwartz> TimToady - cool!

[18:36] <RandalSchwartz> running fetch-n-make now

[18:36] <btyler_> still have a write error here as well

[18:36] <TimToady> maybe M-RUNNER needs the chmod too

[18:37] <rurban> me too

[18:37] <RandalSchwartz> different write error now

[18:37] <colomon> is this the write error in make install?

[18:37] <RandalSchwartz> perl -MExtUtils::Command -e chmod 755 perl6

[18:38] <colomon> after bin/perl6 has been installed?

[18:38] <RandalSchwartz> happens because of that or shortly after that.  hard to tell

[18:38] <tgt> The write error happens after the last thing run.

[18:38] <RandalSchwartz> that's the line just before the error

[18:39] <RandalSchwartz> perl6 had just been updated

[18:39] <rurban> I get it with osx make and a new gmake from macports

[18:39] <colomon> When I spent time trying to debug this months ago, I concluded it was happeneing after the last thing run was done.

[18:39] <RandalSchwartz> yeah - I'm using gmake from ports

[18:39] <colomon> and yes, it's still happening even with the latest

[18:39] <colomon> (latest rakudo, that is)

[18:40] <rurban> I have no idea how to repro it easily (other than make clean)

[18:41] * colomon apologizes to TimToady++ for not reporting this earlier -- this bug has been happening forever and a day, and so didn't think it could be what TimToady was looking for.

[18:41] <PerlJam> greetings #perl6

[18:41] <dalek> rakudo/nom: bc6a32a | TimToady++ | tools/build/Makefile-Moar.in:

[18:41] <dalek> rakudo/nom: insurance on mode of perl6-m as well

[18:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bc6a32acb7

[18:41] <rurban> yes, maybe that

[18:42] *** Sqirrel joined
[18:43] <rurban> repro with rm perl6.moarvm; gmake ... gmake: write error

[18:43] <[Coke]> the system make is gnu make also, same problem, RandalSchwartz.

[18:44] <TimToady> let's keep our eyes peeled for other things like this that we've just put up with, but we wouldn't want to inflict on Real Users

[18:44] *** SamuraiJack left
[18:44] <TimToady> we need to start minimizing the cultural hurdles to adoption

[18:45] <TimToady> well, s/start/continue/

[18:47] <colomon> TimToady: to be fair, if I could have figured out how to fix that, I would have months ago.  It's a major PITA for me.

[18:47] <colomon> And it's still happening with bc6a32acb7afbcfa32b92f868609ac9e4814c3e9

[18:48] *** [Sno] joined
[18:48] <colomon> when I did look into it, I think the conclusion was it was most likely a bug in OS X's make.

[18:49] <PerlJam> Is someone building R* for macports or fink or whatever is commonly used these days?

[18:49] <colomon> Hmmm…. http://irclog.perlgeek.de/perl6/2014-01-20

[18:49] <colomon> sorry, http://irclog.perlgeek.de/perl6/2014-01-20#i_8144630

[18:50] <FROGGS> I think this is relevant: http://openbsd.7691.n7.nabble.com/gmake-quot-write-error-quot-and-possible-solution-td81450.html

[18:50] <colomon> also http://irclog.perlgeek.de/perl6/2014-04-28#i_8647503

[18:53] <colomon> FROGGS: this, then? http://www.mail-archive.com/commits%40crater.dragonflybsd.org/msg02534.html

[18:55] * colomon has no idea how to go from that (which seems relevant) to something useful

[18:55] <rurban> could repro colomon's behavior, still the write error wit latest. but it's no big deal as it's only noise. they say it only happens with threaded kids (moar most likely)

[18:56] <FROGGS> colomon: I was just thinking that we do not set the stderr/stdout to nonblock in MoarVM and see if the problem goes away

[18:56] <FROGGS> just to know if that causes it

[18:56] <rurban> yes, sounds like a good idea

[18:57] <colomon> rurban: it actually is an issue, because it messes up rakudobrew's default behavior (mostly rebootstrapping panda) after a rebuild.  (Not to mention general unfriendliness to newcomers, as TimToady++ points out.)

[18:57] <rurban> ooh, then we need a ticket

[18:58] *** Possum left
[18:58] <FROGGS> no, a solution :P

[18:58] <tgt> PerlJam R* used to be packaged for homebrew on OS X, but hasn't been updated since 2014.04 and only provided Parrot and JVM.

[18:58] <FROGGS> would be cool if someone would comment these two lines and then test again:

[18:58] <TimToady> a ticket might precipitate a solution

[18:58] <FROGGS> /home/froggs/dev/MoarVM/src/io/fileops.c:346:            ((uv_stream_t *)handle)->flags = 0x80; /* UV_STREAM_BLOCKING */

[18:58] <FROGGS> /home/froggs/dev/MoarVM/src/io/fileops.c:358:            ((uv_stream_t *)handle)->flags = 0x80; /* UV_STREAM_BLOCKING */

[18:59] <FROGGS> (and I hope this does not break rakudo's build)

[18:59] <rurban> so gmake wants to write, but moarvm still held a short O_NONBLOCK on stdout

[18:59] <TimToady> maybe a sleep would fix it?

[18:59] <FROGGS> though... we do the opposite of what the openbsd folks say...

[18:59] <FROGGS> a nap? :D

[19:00] <TimToady> if it's some kind of race condition, lose the race :)

[19:01] *** pyrimidine left
[19:01] *** klaas-janstol joined
[19:01] *** Possum joined
[19:01] <rurban> or maybe it's stderr

[19:01] <colomon> FROGGS: trying it now

[19:02] <FROGGS> thanks

[19:02] <TimToady> maybe just exec 'stty sane' when you're done :)

[19:03] <TimToady> or type 'sync' three times

[19:04] <TimToady> well, how 'bout when we 'make all', we really call our make recursively, and grep the error out of the output :)

[19:04] <TimToady> or hey, just write our own make in Perl 6...oh wait...

[19:05] <TimToady> does this fail only if you use -j?

[19:05] <rjbs-> How does (undefine @a[0]) differ from (delete @a[0]) in p6?

[19:05] *** rjbs- is now known as rjbs

[19:05] *** rjbs left
[19:05] *** rjbs joined
[19:06] <TimToady> the latter removes the container rather than storing something undefined in it

[19:06] <[Coke]> m: my @a=<a b c>; my @b=<a b c>; (undefine @a[0]); (delete @b[0]); say @a.perl; say @b.perl;

[19:06] <camelia> rakudo-moar f1edae: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/f3frEpMAH1␤Undeclared routine:␤    delete used at line 1␤␤»

[19:07] <colomon> FROGGS: nope, still get a write error

[19:07] <[Coke]> m: my @a=<a b c>; my @b=<a b c>; (undefine @a[0]); (@b[0]:delete); say @a.perl; say @b.perl;

[19:07] <camelia> rakudo-moar f1edae: OUTPUT«Array.new(Any, "b", "c")␤Array.new(Any, "b", "c")␤»

[19:07] <FROGGS> colomon: okay, good to know :o)

[19:07] <colomon> though maybe at a slightly different spot?

[19:07] <colomon> after /Users/colomon/perl5/perlbrew/perls/perl-5.18.0/bin/perl -MExtUtils::Command -e chmod 755 perl6

[19:07] *** zakharyas left
[19:07] <TimToady> oh, well, you have to use :delete

[19:07] <FROGGS> my guess it that it failes when make shuts down

[19:07] <FROGGS> fails*

[19:07] <[Coke]> ugh. jvm makes releases slow. :(

[19:08] *** Possum left
[19:08] <FROGGS> [Coke]: very true :/

[19:08] <[Coke]> so unless the thing in slot 0 is a container, no diff?

[19:08] <rjbs> [Coke]: I'm not seeing a difference..?

[19:08] <TimToady> hmm

[19:08] <TimToady> well, I could be rwong

[19:08] * [Coke] wonders why we have .pm and .pm6 files in lib/

[19:08] <rjbs> (I ask because we're once again chatting happily about delete on arrays in p5. ;)

[19:09] <[Coke]> rjbs: in my simple example, I see no diff in the current impl, no.

[19:09] <[Coke]> maybe if something was bound to [0], it'd be different?

[19:10] <colomon> FROGGS: yes, that seems correct

[19:10] *** tassilo joined
[19:11] <TimToady> delete calls nqp::bindpos($items, pos, nqp::null());

[19:11] <rjbs> Let me strongly caution you that repeating the bizarre behavior of p5 will lead to confusion!

[19:11] <rjbs> m: my %h = (0 => 0, 1 => 1); %h<0>:delete; %h.keys.say; my @a = <<0 1>>; @a[0]:delete; @a.keys.say

[19:11] <camelia> rakudo-moar f1edae: OUTPUT«1␤0 1␤»

[19:12] <TimToady> so it's different, but it just apparently reports Any as the default

[19:12] *** gfldex joined
[19:12] <TimToady> m: my @a = <a b c>; @a[1]:delete; @a[1] = 42;

[19:12] <camelia> rakudo-moar f1edae: ( no output )

[19:12] <TimToady> m: my @a = <a b c>; @a[1]:delete; @a[1] = 42; say @a

[19:12] <camelia> rakudo-moar f1edae: OUTPUT«a 42 c␤»

[19:13] <TimToady> I guess the assignment is smart enough to put a container back

[19:13] <[Coke]> nqp - jvm test: 691s, moar: 20s, parrot: 59s

[19:13] *** darutoko left
[19:13] *** prevost joined
[19:14] <TimToady> m: my @a = <a b c>; @a[1]:delete; nqp::iscont(@a[1]).say

[19:14] <camelia> rakudo-moar f1edae: OUTPUT«1␤»

[19:14] <TimToady> hmm, or that line isn't doing what it claims to be doing...

[19:15] <TimToady> m: my @a = <a b c>; @a.delete_pos(1); nqp::iscont(@a[1]).say

[19:15] <camelia> rakudo-moar f1edae: OUTPUT«1␤»

[19:15] <TimToady> odd

[19:16] <TimToady> m: my @a = <a b c>; @a.delete_pos(1); nqp::isnull(@a[1]).say

[19:16] <camelia> rakudo-moar f1edae: OUTPUT«0␤»

[19:16] <TimToady> maybe it's WHENCEing

[19:17] <TimToady> I can't observe the particle in classical space without influencing the measurement :)

[19:18] <TimToady> m: my @a = <a b c>; @a.delete_pos(1); say @a.exists_pos(1)

[19:18] <camelia> rakudo-moar f1edae: OUTPUT«False␤»

[19:18] <TimToady> there we go

[19:18] <TimToady> m: my @a = <a b c>; undefine @a[1]; say @a.exists_pos(1)

[19:18] <camelia> rakudo-moar f1edae: OUTPUT«True␤»

[19:18] <TimToady> rjbs: ^^^

[19:18] <FROGGS> m: my @a = <a b c>; undefine @a[1]; say @a:exists

[19:18] <camelia> rakudo-moar f1edae: OUTPUT«a (Any) c␤»

[19:19] <TimToady> m: my @a = <a b c>; undefine @a[1]; say @a[1]:exists

[19:19] <camelia> rakudo-moar f1edae: OUTPUT«True␤»

[19:19] <TimToady> m: my @a = <a b c>; @a[1]:delete; say @a[1]:exists

[19:19] <camelia> rakudo-moar f1edae: OUTPUT«False␤»

[19:19] <TimToady> so actually much as I originally did it in Perl 5

[19:19] <TimToady> this behavior is, of course, not guaranteed for alternate Array types

[19:20] <rjbs> :(

[19:20] <rjbs> It smacks very much of "you can assign a single bit of magic data to any slot as long as it's undef and not at the end."

[19:21] <rjbs> It's not a sparse array.  It's just bizarre-seeming.  Am I missing some use case?

[19:21] <TimToady> wanting to know if a container is there because you're doing something low-level and fiddly

[19:22] <TimToady> wanting to let arrays have semantics more like a hash

[19:23] <TimToady> wanting to support these semantics for consistency with sparse arrays that might support it naturally

[19:23] <TimToady> consistency with Perl 5 :P

[19:23] <[Coke]> building an nqp release; has there EVER been a case where building from the tarball didn't work when the regular release did?

[19:24] <rjbs> Could these possibly be consistent with "real" sparse arrays, though?  What will "keys" return on a sparse array?  And if it returns (say) (0, 1, 8, 111) then it's bizarre that a normal Array would reutrn (0..1111) but have !exists on some elements.

[19:24] <TimToady> wanting to support sparse semantics when you happen to know that the sparsity is...sparse...

[19:25] <TimToady> m: my @a = <a b c>; @a[1]:delete; say @a:p

[19:25] <camelia> rakudo-moar f1edae: OUTPUT«a (Any) c␤»

[19:25] <[Coke]> TimToady: do you have a ruling on https://rt.perl.org/Ticket/Display.html?id=122347 ?

[19:25] <TimToady> m: my @a = <a b c>; @a[1]:delete; say @a[]:p

[19:25] <camelia> rakudo-moar f1edae: OUTPUT«0 => "a" 2 => "c"␤»

[19:26] <TimToady> note the key is not there

[19:26] <TimToady> m: my @a = <a b c>; @a[1]:delete; say @a[]:keys

[19:26] <camelia> rakudo-moar f1edae: OUTPUT«Unexpected named parameter 'keys' passed␤  in sub postcircumfix:<[ ]> at src/gen/m-CORE.setting:2674␤  in block  at /tmp/l9XvIrt5Z9:1␤␤»

[19:26] <TimToady> m: my @a = <a b c>; @a[1]:delete; say @a[]:k

[19:26] <camelia> rakudo-moar f1edae: OUTPUT«0 2␤»

[19:26] <TimToady> so yeah, on that point, it's consistent with sparse arrays

[19:27] <dalek> perl6-roast-data: 3e205e7 | coke++ | / (6 files):

[19:27] <dalek> perl6-roast-data: today (automated commit)

[19:27] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/3e205e7e6e

[19:27] <rjbs> m: my @a = <a b c>; @a[1]:delete; say @a.keys

[19:27] <camelia> rakudo-moar f1edae: OUTPUT«0 1 2␤»

[19:27] <rjbs> I guess I don't understand the distinction between (@a[]:k) and (@a.keys)

[19:28] <rjbs> I generally find this to seem a lot more likely to confuse than to empower, but I will grant that you all have spent more time with the abstractions here than I.  In p5, though, it's a wreck.

[19:28] <TimToady> [Coke]: I think it's fair for that to fail, and require the (NYI) Complex(Cool) type for that to work

[19:29] <TimToady> but I could perhaps be argued into special casing that to work

[19:29] *** raiph left
[19:30] <TimToady> well, most arrays aren't sparse, and so it's probably good that .keys ignores that for efficiency, and that it looks kind of defaulty, compared with adverbs

[19:34] <TimToady> more than one way to do it, there's some saying about that I've heard...

[19:36] <TimToady> while we all got distracted by the make problem, did anyone ever figure out what's up with the malloc problem?  is it a make clean issue?

[19:37] <TimToady> version skew?

[19:38] <TimToady> I guess both people who reported it are offline atm

[19:42] <rjbs> What's the intended difference between @a.keys and @a[]:k?  I'll go read the synopsis...

[19:42] <TimToady> actually, cognome++ and possible Mouq++ also reported it

[19:43] <TimToady> the latter can be applied to any subscript to modify its output

[19:43] <TimToady> on hashes too

[19:44] <TimToady> so you could do a slice an return pairs, or keys, or kv or just values excluding the missing keys

[19:44] <TimToady> sort of a small query language for slices, as it were

[19:44] <TimToady> .keys is just a method

[19:44] <rjbs> Hm.

[19:44] <rjbs> The .keys method also returns the keys of all existing elements. For a multidimensional array each key is a list containing one value for each dimension.

[19:44] <rjbs> ^-- S09

[19:45] <rjbs> But in our "deleted an element" case, it's not doing that, is it? It's returning all keys.

[19:45] <TimToady> yes, well, obviously the implementation doesn't agree with the spec, or vice versa :)

[19:46] <TimToady> that bit of spec was probably written before we had :k

[19:46] <TimToady> so might be a fossil

[19:46] <rjbs> Okay.  Above, you said "it's probably good that .keys ignores that" and I thought you meant to say .keys should keep including all, and :k should keep not.

[19:47] <TimToady> well, there oughta be some way of deriving the range, maybe .keys is that

[19:47] <TimToady> m: my @a = <a b c>; say @a.keys.WHAT

[19:47] <camelia> rakudo-moar bc6a32: OUTPUT«(List)␤»

[19:47] <TimToady> actually, it isn't :)

[19:47] <rjbs> I'd expect confusion when teaching, then, though.

[19:48] <rjbs> "You can write :k instead of .keys, but if there is any chance that the array is meant to be treated differently because of sparsity, you can't."

[19:48] <rjbs> Or the other way around, rather.

[19:49] <TimToady> well, a good argument could be made for either side of that

[19:50] <TimToady> m: my @a = <a b c>; say (^@a).WHAT;  # the normal way to get the range

[19:50] <camelia> rakudo-moar bc6a32: OUTPUT«(Range)␤»

[19:50] <TimToady> so I guess .keys could be sparse too

[19:50] <rjbs> S09 calls indexing discontinuities "a source of subtle runtime errors." :)

[19:50] <TimToady> otoh, .keys wants to be efficient, and ranges are much more efficient than scanning

[19:51] <rjbs> So, say I want a sparse array.  What do I get from some sort of use of @array+delete+exists versus an ordered hash with non-negative integer keys?

[19:51] <rjbs> I imagine that I can't use negative subscripting, for example, on such a hash.

[19:51] <rjbs> Is there much else?

[19:51] <timotimo> you're aware of how we do negative subscripting in perl6?

[19:52] <rjbs> uses a splat, right?

[19:52] <rjbs> beyond that, probably no, not

[19:52] <TimToady> we really need to finish implementing S09 and playing with it to see where the actual concerns arise most frequently; until then, we're just kind of guessing

[19:52] <masak> +1

[19:53] <rjbs> Sure.  I just urge you to consider how it worked in p5: not well.

[19:53] <rjbs> Obviously p6 jiggers a lot of jankle all around, so things may be different.  So far, I'm not convinced they will be.

[19:53] <rjbs> (on this point)

[19:53] <TimToady> but where there be dragons, sometimes we try to design fences, and sometimes we just tell them to go visit the doctor afterwords, if they survive

[19:54] *** raiph joined
[19:54] <TimToady> at the moment sparse arrays are still in the Here Be Dragons part of the map

[19:55] <TimToady> S09 provides for an interaction of [] and {} subscripting that hasn't been tested yet in battle

[19:56] <masak> that bit I'm not so worried about, though.

[19:56] <masak> because it's conservative in the sense that it doesn't mess with what we already have.

[19:56] <masak> I was always a bit apprehensive about the multidim stuff, though.

[19:56] <masak> but even that seems to be falling into place a bit now.

[19:57] <TimToady> m: say (<a b c>;<d e f>)

[19:57] <camelia> rakudo-moar bc6a32: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Ni3exnPPs5␤Unsupported use of ; in brackets as a statement sequence; in this and future versions please use SEQ(;) or $(;) for C comma semantics (or set LOLLY for the new list-of-list semantics fo…»

[19:57] <TimToady> I guess we don't set LOLLY in camelia

[19:58] <[Coke]> m: say 691/60

[19:58] <camelia> rakudo-moar bc6a32: OUTPUT«11.516667␤»

[19:58] <TimToady> m: my @a = [<a b c>],[<d e f>], [<g h i>]; say @a[*;1]

[19:58] <camelia> rakudo-moar bc6a32: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/0nHQ3whlPT␤Unsupported use of ; in brackets as a statement sequence; in this and future versions please use SEQ(;) or $(;) for C comma semantics (or set LOLLY for the new list-of-list semantics fo…»

[19:58] <TimToady> and I broke multidim subscripts without LOLLY

[19:58] <TimToady> because they both go through the semilist rule

[19:59] <TimToady> and I couldn't be bothered to distinguish who called the rule :)

[19:59] <[Coke]> m:  my $a = "oh hai"; say $a .= "uc"();

[19:59] <camelia> rakudo-moar bc6a32: OUTPUT«No such method '' for invocant of type 'Str'␤  in method dispatch:<.=> at src/gen/m-CORE.setting:1215␤  in block  at /tmp/iZ4eFdNsM5:1␤␤»

[19:59] <TimToady> arguably camelia should have LOLLY semantics

[19:59] <PerlJam> +1

[19:59] <TimToady> or there should be a way to get them if you want them

[20:00] <TimToady> can't set anything that nqp will see in an envvar though; we tried that

[20:00] <[Coke]> arguably, camelia should behave like an out of the box build.

[20:00] <TimToady> arguably we shouldn't be shipping two different versions as if they were one version, but that's what we've done :)

[20:01] <PerlJam> LOLLY should be "out of the box" IMHO

[20:01] <[Coke]> m: %*ENV<LOLLY>=1; my @a = [<a b c>],[<d e f>], [<g h i>]; say @a[*;1]

[20:01] <camelia> rakudo-moar bc6a32: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/w9xhbXNKzZ␤Unsupported use of ; in brackets as a statement sequence; in this and future versions please use SEQ(;) or $(;) for C comma semantics (or set LOLLY for the new list-of-list semantics fo…»

[20:01] <[Coke]> TimToady: I blame you :P

[20:01] <[Coke]> I'm just closing my eyes; it'll all be over as soon as I cut this release...

[20:01] <TimToady> the purpose of non-LOLLY is to lolligag on all the obsolete lollipops for one release

[20:02] <TimToady> and that doesn't really apply to camelia, since people here know about LOLLY

[20:02] <[Coke]> hoelzro: the pod tickets in RT could use some lovin.

[20:02] <TimToady> right, we can actually remove LOLLY as soon as you've got it out

[20:03] <TimToady> except we have to leave the #!LOLLY skips in for a month or so

[20:03] <TimToady> since we share the same test suite over all versions currently

[20:03] <TimToady> afaik

[20:03] *** zakharyas joined
[20:03] <TimToady> or do we tag that too?

[20:04] <masak> s/currently/, thank heavens/

[20:04] *** Sqirrel_ joined
[20:04] *** Sqirrel left
[20:04] <TimToady> well, a snapshot of the tests that were there when we released would not be that hard to manage

[20:05] <TimToady> and it would automatically update if the move to HEAD and reconfig

[20:05] <TimToady> *they

[20:05] <[Coke]> .ask masak if he can provide some runnable files for https://rt.perl.org/Ticket/Display.html?id=88144

[20:05] <yoleaux> [Coke]: I'll pass your message to masak.

[20:05] <TimToady> I don't see much harm in that

[20:05] <TimToady> um, masak++ is right here

[20:05] <[Coke]> test suite is not tagged. (we'd do it the other way, we'd keep a snapshot of what rev to use in the impl, I think)

[20:06] <TimToady> isn't that what I said?

[20:06] <TimToady> well, okay, I see what you're saying

[20:06] <[Coke]> clearly I'm a few minutes behind, you've already established that.

[20:07] <TimToady> I meant "tagged" in an abstract sense

[20:07] <[Coke]> nqp-jvm: say("HWHY YOU SO SLOW?");

[20:07] <camelia> nqp-jvm: OUTPUT«(signal )#␤# There is insufficient memory for the Java Runtime Environment to continue.␤# pthread_getattr_np␤# An error report file with more information is saved as:␤# /home/p6eval/hs_err_pid10698.log␤»

[20:07] <[Coke]> m)

[20:07] <hoelzro> [Coke]: I'm hoping we can close a bunch after S26-WHY is merged

[20:07] <hoelzro> and I can probably work on outstanding ones too

[20:08] <[Coke]> thank you. rt is getting longer, and longer...

[20:08] <hoelzro> =/

[20:10] <TimToady> hmm, how come git describe doesn't work in roast?

[20:10] <[Coke]> no tags?

[20:11] <[Coke]> p6: sub s_s(*%n)  { %n>>.say }; s_s(|{:assoc<list>}, :assoc<left>);

[20:11] <camelia> rakudo-jvm bc6a32: OUTPUT«(timeout)»

[20:11] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«left␤»

[20:11] <camelia> ..rakudo-parrot bc6a32: OUTPUT«duplicate named argument in call␤  in block  at /tmp/tmpfile:1␤␤»

[20:11] <camelia> ..rakudo-moar bc6a32: OUTPUT«list␤»

[20:12] <[Coke]> ... wow, it's getting worse.

[20:12] <TimToady> pugs: sub s_s(*%n)  { %n>>.say }; s_s(|{:assoc<list>}, :assoc<left>);

[20:12] <camelia> pugs: OUTPUT«left␤assoc␤»

[20:12] <TimToady> there's another variant :)

[20:13] <masak> [Coke]: I'm thinking we might just want to close https://rt.perl.org/Ticket/Display.html?id=88144

[20:13] <yoleaux> 20:05Z <[Coke]> masak: if he can provide some runnable files for https://rt.perl.org/Ticket/Display.html?id=88144

[20:13] <masak> [Coke]: I've never had that issue since, and it's likely semantics have shifted since I posted that.

[20:13] <[Coke]> want me to do it?

[20:13] <[Coke]> ok.

[20:15] <[Coke]> masak++

[20:16] <[Coke]> r: ord.Cool

[20:16] <camelia> rakudo-{parrot,jvm,moar} bc6a32: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Calling 'ord' requires arguments (if you meant to operate on $_, please use .ord or use an explicit invocant or argument)␤    Expected: :(Cool $s)␤at /tmp/tmpfile:1␤----…»

[20:17] <[Coke]> LHF: write a test for RT #114014

[20:17] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=114014

[20:18] *** avuserow left
[20:18] <tgt> make finishes happily if I run make > somefile. I tried running more and more stages of the Makefile and running up to the first line of PERL6_M_MOAR, but removing the > src/gen/m-Metamodel.nqp causes it to say make: *** [m-all] Segmentation fault: 11 (followed by the write error, which doesn't happen running stages prior to that). I don't know if either of those things point towards any solution?

[20:21] *** Akagi201_ joined
[20:21] <[Coke]> nqp 2014.08 is cut, pushed to the web site.

[20:22] <PerlJam> Coke++

[20:22] <gtodd> whee!

[20:23] <gtodd> [Coke]: re: above buggy build bits for clang/FreeBSD and parrot's differing version of nqp's dyncall ....   I don't think there was a ticket

[20:23] <dalek> rakudo/nom: 7400451 | coke++ | docs/announce/2014.08.md:

[20:23] <dalek> rakudo/nom: finalize(?) release announcement

[20:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/740045150b

[20:23] <dalek> rakudo/nom: a142e6c | coke++ | docs/release_guide.pod:

[20:23] <dalek> rakudo/nom: Minsk!

[20:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a142e6c603

[20:23] <dalek> rakudo/nom: bf95889 | coke++ | tools/build/NQP_REVISION:

[20:23] <dalek> rakudo/nom: [release] bump NQP revision

[20:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bf95889f7f

[20:23] <dalek> rakudo/nom: a88cca7 | coke++ | VERSION:

[20:23] <dalek> rakudo/nom: [release] bump VERSION

[20:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a88cca7b07

[20:23] *** Akagi201 left
[20:29] <timotimo> yay release, [Coke]++

[20:31] *** kaare_ left
[20:32] <PerlJam> The release announcement looks to have a minor rendering problem.   "Make &infix: many times faster"  The <xx> part seems to have disappeared.

[20:32] <PerlJam> (looking at the release announcement on github)

[20:33] <PerlJam> oh, same thing for the third bullet,  <a b c> disappears

[20:34] <timotimo> ah >_<

[20:38] <gtodd> but we need that for the alphabet to work

[20:40] *** Rotwang left
[20:44] *** pyrimidine joined
[20:44] *** dwarring joined
[20:45] <TimToady> we still have most of it left

[20:46] <TimToady> well, except for the part that's missing on the left...

[20:46] <[Coke]> timotimo: not done yet.

[20:46] <[Coke]> PerlJam: how to fix? \< \> ?

[20:47] <PerlJam> [Coke]: I think so.

[20:47] <timotimo> probably &lt; and &gt;

[20:48] <PerlJam> The back slash works (I just tested it in a gist :)

[20:49] <dalek> rakudo/nom: 0228cfb | coke++ | docs/announce/2014.08.md:

[20:49] <dalek> rakudo/nom: fix rendering of release announcement.

[20:49] <dalek> rakudo/nom: 

[20:49] <dalek> rakudo/nom: PerlJam++

[20:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0228cfb6b1

[20:52] *** noganex left
[20:52] *** noganex joined
[20:54] <masak> yes, Markdown is pretty consistent at having backslashes mean "not magic".

[21:05] <timotimo> OK

[21:07] *** mj41 joined
[21:08] *** Ven joined
[21:11] *** btyler_ left
[21:12] *** woolfy left
[21:12] *** mj41 left
[21:16] *** btyler joined
[21:25] *** gfldex left
[21:28] *** mads- joined
[21:29] <mads-> raiph: Thanks for you reply on my reddit post. I will just hangout a bit and get the feel of it here before jumping in too deep :) 

[21:30] <FROGGS> hi mads

[21:30] <timotimo> mads-: is that the thread about building your own language?

[21:32] <mads-> timotimo: no no. I'm having a little trouble finding a good topic for my masters thesis. I love programming languages, and I'm going to write for the PL group. But I am just empty for ideas

[21:32] <mads-> and hi FROGGS o/

[21:32] <FROGGS> :o)

[21:32] <timotimo> oh, ok

[21:32] <FROGGS> mads-: I think you found an ideal place here :o)

[21:33] *** zakharyas left
[21:33] <mads-> I'd reckon I just ghost it out a bit. I imagine you guys are going to throw ideas around anyways

[21:36] <FROGGS> mads-: just follow the discussions here, there are often esote^Winteresting topics

[21:37] <dalek> nqp-js: 75d2942 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[21:37] <dalek> nqp-js: Implement neg_i, div_i

[21:37] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/75d2942263

[21:37] <dalek> nqp-js: 26dc64a | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[21:37] <dalek> nqp-js: Implement nqp::substr.

[21:37] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/26dc64a09f

[21:37] <dalek> nqp-js: 09b7d19 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[21:37] <dalek> nqp-js: Implement nqp::not_i.

[21:37] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/09b7d19a26

[21:37] <dalek> nqp-js: a241203 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[21:37] <dalek> nqp-js: Implement nqp::iseq_i

[21:37] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/a24120379d

[21:37] <dalek> nqp-js: 085443a | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[21:37] <dalek> nqp-js: Implement nqp::abs_i.

[21:37] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/085443ad13

[21:37] <dalek> nqp-js: c2fdcd5 | (Pawel Murias)++ | src/vm/js/ (2 files):

[21:37] <dalek> nqp-js: Implement nqp::escape.

[21:37] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/c2fdcd5df5

[21:38] <pmurias> FROGGS: does Perl 6 have many orginal PL ideas or does it mostly bring existing good one together?

[21:39] <FROGGS> pmurias: well, it is hard to invent new stuff the does not surprise too much ppl

[21:39] <FROGGS> so it is more of the latter

[21:39] <timotimo> hmm. is slangs new? perhaps not. how about junctions? probably also an old concept to some

[21:39] <FROGGS> it is the mix of them, put into a single sane framework

[21:39] *** donaldh joined
[21:41] <pmurias> I haven't seen junctions anywhere else

[21:48] *** pyrimidine left
[21:57] *** Sqirrel_ left
[21:59] *** avuserow joined
[22:02] *** Ven left
[22:02] <timotimo> i bet haskell has something for that :)

[22:05] *** diakopter joined
[22:05] <dalek> rakudo/S26-WHY: 66bd0b6 | (Rob Hoelz)++ | src/Perl6/ (2 files):

[22:05] <dalek> rakudo/S26-WHY: Remove useless comments

[22:05] <dalek> rakudo/S26-WHY: review: https://github.com/rakudo/rakudo/commit/66bd0b61e2

[22:05] <dalek> rakudo/S26-WHY: 385d044 | (Rob Hoelz)++ | src/ (3 files):

[22:05] <dalek> rakudo/S26-WHY: Make $param.WHY work early on in the compiler

[22:05] <dalek> rakudo/S26-WHY: review: https://github.com/rakudo/rakudo/commit/385d044ef1

[22:05] <dalek> rakudo/S26-WHY: aeb8c56 | (Rob Hoelz)++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[22:05] <dalek> rakudo/S26-WHY: Remove Method.clone override

[22:05] <dalek> rakudo/S26-WHY: 

[22:05] <dalek> rakudo/S26-WHY: Apparently it's no longer necessary?

[22:05] <dalek> rakudo/S26-WHY: review: https://github.com/rakudo/rakudo/commit/aeb8c5676b

[22:07] <dalek> Heuristic branch merge: pushed 96 commits to rakudo/S26-WHY by hoelzro

[22:07] <dalek> Heuristic branch merge: pushed 138 commits to roast/S26-WHY by hoelzro

[22:12] *** ponbiki left
[22:31] *** Psyche^ joined
[22:32] *** tgt left
[22:33] *** eternaleye left
[22:35] *** Psyche^_ left
[22:35] <pmurias> timotimo: junctions seem very unhaskelly, they allow you to put a special value in place of a normal one and let the magic happen

[22:36] *** prevost left
[22:37] <timotimo> hmm

[22:37] <timotimo> OK, so they'll probably have something very sterile to simulate value superpositions instead

[22:37] *** klaas-janstol left
[22:48] *** jnap left
[22:49] *** eternaleye joined
[22:50] <[Coke]> URK. stresstest is actually multiple prove runs, meaning I will have no idea what failed.

[22:50] <gtodd> mads-: for sure write about perl6 :-)

[22:53] <RandalSchwartz> did the make error get fixed yet?

[22:54] *** donaldh left
[22:55] <[Coke]> nope.

[22:55] <[Coke]> it remains as elusive to fix as it has been, unfortunately.

[22:57] *** xragnar_ joined
[22:57] *** xragnar left
[22:57] *** xragnar_ is now known as xragnar

[22:58] <mads-> gtodd: I wouldn't mind. But I don't think just writing about perl6 is specific enough for a topic :P

[22:58] <RandalSchwartz> weird

[22:58] <RandalSchwartz> and why only the moar build, and not the parrot build?

[23:01] *** ponbiki joined
[23:02] *** eternaleye left
[23:03] <gtodd> "Perl6: Specification by Example in Language Development "    :-P

[23:03] *** tassilo left
[23:03] <gtodd> heh 

[23:09] *** eternaleye joined
[23:16] *** pmurias left
[23:32] *** eternaleye left
[23:37] <[Coke]> hurm. it is not actually required as part of the release process to fudge roast, is it.

[23:38] <[Coke]> I am tempted to leave it as is and point to the perl6-roast-data site if anyone has questions about failing tests.

[23:39] *** xenoterracide joined
[23:39] <colomon> it's at least a friendly thing to do for the release.  but it's a pain, too.

[23:41] *** raiph left
[23:43] *** thou left
[23:47] *** xenoterracide left
[23:52] <[Coke]> ok. if I have a build with 3 different vms, how do I run a fudged test for one backend?

[23:52] *** kurahaupo left
[23:53] <[Coke]> normally I'd do "prove -v -e t/fudgeandrun path/to/file.t"

[23:53] <diakopter> can you give a backend to fudgeandrun?

[23:54] *** xenoterracide joined
[23:55] *** spider-mario left
