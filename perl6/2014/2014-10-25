[00:03] *** raiph joined
[00:04] <timotimo> (yes, i know, i can yak all day long and not do anything; i should STFU or SUAC)

[00:04] <timotimo> (that is: Shut Up And Code)

[00:40] <dalek> perl6-bench/stress: 8cc7a59 | (Geoffrey Broadwell)++ | analyze:

[00:40] <dalek> perl6-bench/stress: Add documentation for --show-rates and --show-failures

[00:40] <dalek> perl6-bench/stress: review: https://github.com/japhb/perl6-bench/commit/8cc7a59333

[00:40] <dalek> perl6-bench/stress: d8b859a | (Geoffrey Broadwell)++ | timeall:

[00:40] <dalek> perl6-bench/stress: Fix copy pasto in timeall docs

[00:40] <dalek> perl6-bench/stress: review: https://github.com/japhb/perl6-bench/commit/d8b859a8ba

[00:40] <dalek> perl6-bench/stress: 88d279d | (Geoffrey Broadwell)++ | analyze:

[00:40] <dalek> perl6-bench/stress: Fix undef warning in analyze when only analyzing one compiler

[00:40] <dalek> perl6-bench/stress: review: https://github.com/japhb/perl6-bench/commit/88d279d081

[00:40] <dalek> perl6-bench/stress: f4eca3a | (Geoffrey Broadwell)++ | analyze:

[00:40] <dalek> perl6-bench/stress: Only double space text summary output if more than one stat is being shown for each test

[00:40] <dalek> perl6-bench/stress: review: https://github.com/japhb/perl6-bench/commit/f4eca3a091

[00:43] <dalek> perl6-bench/stress: 4107f13 | (Geoffrey Broadwell)++ | bench:

[00:43] <dalek> perl6-bench/stress: Add first versions of 'stress' and 'diagnose' commands to bench

[00:43] <dalek> perl6-bench/stress: review: https://github.com/japhb/perl6-bench/commit/4107f13931

[00:44] *** thou left
[00:48] <japhb> OK, now I need some actual stress tests ...

[00:50] <timotimo> please be more specific in defining "stress"?

[00:51] <japhb> timotimo: A test that will fail to run at some scale level (not just timeout -- I'm talking segfault, signal, wrong output, that sort of thing)

[00:52] <timotimo> oh, hmm

[00:52] <japhb> My first thought is perhaps any flappy tests we have in roast, because those would at least get wrong output sometimes.

[00:52] <timotimo> mhm mhm

[00:53] <timotimo> i'm not 100% sure i can think of anything new off the top of my head

[00:53] <japhb> Well, is there a list of said flappy tests?

[00:55] <timotimo> S17-procasync/print.rakudo.moar

[00:56] <timotimo> at least

[00:56] <timotimo> i don't know what the exact flappers are

[00:56] <japhb> OK

[01:00] <timotimo> does this set of features also give regular benchmarks more interesting data/results/analysis?

[01:08] <japhb> timotimo: Yes, timeall is now always collecting failure information, and can diagnose several different forms of failure (including output mismatch, if an expected output is defined for a test)

[01:09] <japhb> And analyze can now (at least in text mode) show the failure profile of each test as it scales

[01:10] <japhb> But I need some tests that actually fail to make sure I'm doing everything right.  :-)

[01:11] * japhb is considering the value of having roast as a component, and teaching timeall to be able to run a set of tests from there.

[01:12] <japhb> I need a simplified harness that can parse TAP output just well enough to determine if all tests were run and OK.

[01:13] *** mauke_ joined
[01:14] <tony-o> what happened to .resume; on errors?  it seems like none of them are resumable now..

[01:15] *** mauke left
[01:18] *** mauke_ left
[01:19] *** mauke joined
[01:21] <tony-o> colomon: http server async should pass tests on moar now

[01:29] *** leont joined
[01:30] *** mauke_ joined
[01:32] <timotimo> japhb: i don't think i've run nqp benchmarks in quite some time, but as late as http://t.h8.lv/p6bench/2014-09-18-pre_release_nqp.html ‚Üê this one, the for_* benchmarks weren't removed from the output, even though there was no data at all for them

[01:33] *** mauke left
[01:35] *** mauke_ is now known as mauke

[01:37] *** mauke_ joined
[01:38] <timotimo> i forgot to actually write the question

[01:38] <timotimo> how should i investigate this

[01:40] *** mauke left
[01:44] *** mauke_ is now known as mauke

[01:53] *** mauke left
[01:56] *** immortal joined
[01:56] *** immortal left
[01:56] *** immortal joined
[01:58] *** erkan left
[01:59] *** raiph left
[02:02] *** mauke joined
[02:06] *** mauke_ joined
[02:08] *** mauke left
[02:10] *** colomon left
[02:11] *** colomon joined
[02:12] *** mauke_ left
[02:12] *** mauke joined
[02:16] *** erkan joined
[02:18] *** immortal left
[02:25] *** colomon left
[02:29] *** leont left
[02:39] *** colomon joined
[02:43] *** noganex joined
[02:46] *** noganex_ left
[03:01] *** noganex_ joined
[03:04] *** noganex left
[03:09] *** Mso150 joined
[03:13] <colomon> labster: ping?

[03:13] <labster> colomon: pong

[03:13] <colomon> hi!

[03:13] <colomon> didn't expect a quick response

[03:13] <colomon> IO::Path::More is failing tests

[03:14] <colomon> looks like some of them are because the dir sub returns IO::Path now (instead of Str)

[03:16] <labster> Yeah, I'm around, but $dayjob is very busy for about 1 more week.

[03:16] <labster> Thanks.

[03:17] <colomon> gotcha

[03:20] <colomon> I'll see if I can figure out what is going on and send pull requests.  but I think I need to sleep now

[03:21] <labster> detailed test failures would be great

[03:32] <colomon> o/

[03:35] <bonsaikitten> # perl6-m

[03:35] <bonsaikitten> > asd

[03:35] <bonsaikitten> Could not find Perl6::BOOTSTRAP in any of: ., blib, /var/tmp/portage/dev-lang/moarvm-2014.10/image/usr/languages/perl6/lib, /var/tmp/portage/dev-lang/moarvm-2014.10/image/usr/languages/nqp/lib

[03:35] *** j4jackj is now known as janicez

[03:35] *** janicez is now known as j4jackj

[03:35] <bonsaikitten> looks like moarvm wrongly absorbs build-time paths

[03:36] <bonsaikitten> and thus rakudo-m fails to do anything useful

[03:42] *** Mso150_w joined
[03:43] *** Mso150 left
[03:56] *** immortal joined
[03:58] *** erkan left
[04:19] *** mauke_ joined
[04:19] *** Akagi201_ left
[04:22] *** mauke left
[04:23] *** mauke_ is now known as mauke

[04:25] *** mls left
[04:26] *** mls joined
[04:27] *** erkan joined
[04:28] *** darutoko joined
[04:29] *** immortal left
[04:36] *** kst left
[04:37] *** kst joined
[04:41] *** SamuraiJack_ left
[04:46] *** ggoebel111111111 joined
[04:50] *** ggoebel111111110 left
[04:59] *** BenGoldberg left
[05:02] *** azawawi joined
[05:02] <azawawi> hi

[05:03] <azawawi> can someone please add https://github.com/azawawi/totem to the panda ecosystem?

[05:07] *** immortal joined
[05:07] *** immortal left
[05:07] *** immortal joined
[05:10] *** erkan left
[05:10] *** xenoterracide_ joined
[05:22] *** azawawi left
[05:36] *** petercommand left
[05:44] *** molaf joined
[05:58] *** notfix is now known as xfix

[06:20] *** immortal left
[06:27] *** kaare_ joined
[06:30] <lizmat_> commute to T-Dose&

[06:30] *** lizmat_ left
[06:33] *** petercommand joined
[06:43] *** woolfy1 left
[06:55] *** xenoterracide_ left
[07:02] *** kaare_ left
[07:02] *** gfldex joined
[07:06] *** kurahaupo joined
[07:13] *** molaf_ joined
[07:16] *** molaf left
[07:26] *** psch joined
[07:27] <psch> hello #perl6 o/

[07:27] *** rindolf joined
[07:29] *** vike left
[07:58] *** rindolf left
[07:59] *** rindolf joined
[08:00] *** rindolf left
[08:01] *** rindolf joined
[08:10] *** lizmat joined
[08:15] *** vike joined
[08:24] <lizmat> good *, #perl6 from the T-DOSE

[08:26] <psch> hi lizmat o/

[08:26] *** cognominal joined
[08:28] <lizmat> psch \o

[08:28] <rindolf> lizmat: hi.

[08:29] <lizmat> rindolf \o

[08:29] <rindolf> lizmat: sup?

[08:31] <lizmat> http://www.t-dose.org

[08:37] <moritz> \o

[08:37] <lizmat> moritz o/

[08:41] *** rindolf left
[08:42] *** rindolf joined
[09:00] *** lizmat left
[09:04] *** lizmat joined
[09:05] *** rurban joined
[09:08] *** lizmat left
[09:09] *** Isp-sec joined
[09:10] <masak> morn'z, #perl6

[09:11] <psch> masak o/

[09:11] <masak> I'll be relatively absent during the day, but it's still my hope to get another blog post out.

[09:11] <FROGGS> timotimo: having all reports on one page is only true for the static web page of cpantesters, there's also a dynamic page

[09:12] *** virtualsue joined
[09:12] <FROGGS> timotimo: and, we would not have that problem of too many reports when we start :o)

[09:14] *** lizmat joined
[09:18] *** rmgk_ joined
[09:18] *** rmgk is now known as Guest69979

[09:18] *** Guest69979 left
[09:18] *** rmgk_ is now known as rmgk

[09:19] *** woolfy joined
[09:22] * woolfy and lizmat at T-DOSE ( www.t-dose.org ).  A speaker did not show up, now lizmat jumps in and gives a nice talk about Perl 6.  Some 20 people attending.

[09:27] <rindolf> woolfy: nice.

[09:28] *** lizmat left
[09:31] *** Mso150_w left
[09:36] *** kjs_ joined
[09:38] *** virtualsue left
[09:39] *** \00 left
[10:04] *** lizmat joined
[10:04] *** denis_boyun joined
[10:06] <FROGGS> lizmat++

[10:06] <lizmat> *phew*

[10:06] <lizmat> stretching the "A State of Perl 6" lightning talk to 1 hour, was a bit of a stretch

[10:07] <lizmat> fortunately I had to explain a lot of things that were assumed known in the slides

[10:07] *** denis_boyun___ joined
[10:08] *** denis_boyun left
[10:10] <psch> lizmat++

[10:18] <woolfy> lizmat++

[10:19] <woolfy> The organisers of T-DOSE already were happy with us, and display of "of course we can whip up a presentation about Perl 6' made them close to delirious...

[10:23] *** Sqirrel left
[10:28] *** James__ joined
[10:30] *** jac50 left
[10:36] *** lizmat_ joined
[10:37] *** lizmat_ left
[10:38] *** lizmat_ joined
[10:38] <FROGGS> *g*

[10:39] *** FROGGS left
[10:40] <dalek> roast: 9e509a2 | (Elizabeth Mattijsen)++ | S09-typed-arrays/arrays.t:

[10:40] <dalek> roast: Add tests for roundtripping typed arrays

[10:40] <dalek> roast: review: https://github.com/perl6/roast/commit/9e509a2eb4

[10:40] *** lizmat left
[10:46] *** kjs_ left
[10:47] <psch> $ ./perl6 ++FOO --bar=test ++/FOO -e'say %*OPTS.perl'

[10:47] <psch> ("FOO" => " --bar=test ").hash

[10:47] <psch> \o/

[10:47] <psch> although we might want the value as a HLL::CommandLine::Result as well i guess

[10:48] <psch> or something similar from perl6 land

[10:48] <psch> S19 is rather vague on this

[10:48] <psch> hm, and i guess i have to trim the value too

[10:51] *** FROGGS joined
[10:51] <cognominal> are any of the Perl 6 related presentation at APW online?

[10:53] <psch> cognominal: they're on the APW youtube channel: http://www.youtube.com/channel/UCB9cjCMJPZRJrYyOw0Wo-oQ/videos

[10:54] <psch> well, two at least, and i gather there were a few lightning talks too?

[10:55] <cognominal> psch++

[11:00] <lizmat_> m: say $*VM.version

[11:00] <camelia> rakudo-moar 315ec6: OUTPUT¬´v2014.9.54.g.3.ac.9.a.7‚ê§¬ª

[11:00] *** kjs_ joined
[11:00] <lizmat_> hmmm... why isn't that saying v2014.10 something ??

[11:01] *** virtualsue joined
[11:02] <FROGGS> m: say $*PERL.compiler.build-date

[11:02] <camelia> rakudo-moar 315ec6: OUTPUT¬´2014-10-22T20:30:08Z‚ê§¬ª

[11:02] <FROGGS> lizmat_: that's the reason

[11:02] *** lizmat_ is now known as lizmat

[11:02] <FROGGS> moritz: camelia got stuck three days ago

[11:02] <lizmat> ah, hmm...

[11:03] <lizmat> locally I get: $ 6 'say $*VM.version'

[11:03] <lizmat> v2014.10

[11:03] <lizmat> that feels incorrect as well, as I've done 1 push after the release

[11:04] <FROGGS> lizmat: but you did not reconfigure I guess

[11:04] <lizmat> ah,  good point

[11:04] * lizmat reconfigures

[11:06] * lizmat nukes install and reconfigures

[11:08] <FROGGS> lizmat: I never have to nuke my install folder...

[11:09] <FROGGS> I do that instead: https://gist.github.com/FROGGS/850dee443aeedc6f2a58

[11:09] <psch> i usually do git clean -xdf by now

[11:09] <psch> but that's pretty much nuking install/ i guess

[11:10] <FROGGS> psch: I don't, because I usually have diffs in my checkouts

[11:10] <FROGGS> or other test scripts

[11:11] <psch> uncommitted/added diffs get preserved in the repo clean is run in, and -xdf doesn't descent into other repos

[11:11] <psch> but the scripts would of course get nuked

[11:12] <psch> well, whatever works, i've learned to not put test scripts in not-repos

[11:12] <psch> but that's because i git clean

[11:12] <FROGGS> yeah

[11:12] <lizmat> $ 6 'say $*VM.version'

[11:12] <lizmat> v2014.10

[11:12] <lizmat> :-(

[11:12] <FROGGS> O.o

[11:13] <lizmat> $ 6 'say $*PERL.compiler.build-date'

[11:13] <lizmat> 2014-10-25T11:11:27Z

[11:13] <lizmat> it is the newly built one

[11:13] <FROGGS> I have no idea then

[11:16] <lizmat> feels like some git magic is missing

[11:37] *** virtualsue left
[11:40] *** kjs_ left
[11:45] *** kjs_ joined
[11:45] *** leont joined
[12:00] <dalek> panda: 9497994 | (Elizabeth Mattijsen)++ | / (8 files):

[12:00] <dalek> panda: Fix 2014.10 deprecations

[12:00] <dalek> panda: review: https://github.com/tadzik/panda/commit/9497994202

[12:10] *** kaare_ joined
[12:15] *** denis_boyun___ left
[12:37] *** erkan joined
[12:38] *** rindolf left
[12:47] *** rindolf joined
[12:49] <dalek> roast: 60a2bd5 | (Pepe Schwarz)++ | S19-command-line (4 files):

[12:49] <dalek> roast: Correct a few tests for S19 and their fudging.

[12:49] <dalek> roast: review: https://github.com/perl6/roast/commit/60a2bd5c54

[12:51] *** spider-mario joined
[12:51] *** spider-mario left
[12:51] *** spider-mario joined
[12:52] <psch> hm, how do i deal with the accidental PR from yesterday that wants to merge the same branch i'd want to merge now?

[12:52] <psch> does it get updated to the current state of the branch when i reopen it?

[12:52] * psch .oO( maybe i shouldn't have closed it... )

[12:53] *** denis_boyun_ joined
[13:00] *** raiph joined
[13:04] *** immortal joined
[13:05] *** denis_boyun_ left
[13:06] *** erkan left
[13:11] *** rindolf left
[13:11] *** rindolf joined
[13:13] *** kjs_ left
[13:13] <psch> https://github.com/rakudo/rakudo/pull/324

[13:13] <psch> apparently just reopening works \o/

[13:23] <psch> i'm still not 100% sure if i'm handling options with optional values well

[13:25] <psch> as it is in the PR i'm only taking a optional value for those options when there's an equals sign

[13:26] <psch> otherwise, the option simply doesn't get a value, even if there's something that could be the value, which might result in a broken invocation

[13:26] <psch> e.g. ¬´perl6 --doc Pod::To::HTML $somefile¬ª would complain with 'File not found Pod::To::HTML'

[13:28] <psch> i can't assume that the next token is always an option, because then ¬´perl6 --stagestats $file¬ª never runs the file

[13:31] <psch> https://github.com/rakudo/rakudo/pull/324/files#diff-c722fa19c07b584633fcb8fd94a98650R90 this is what i'm doing

[13:32] <psch> i've thought of branching there with something like: ¬´|| <.ws> { die "please use an =" }¬ª but then optional values aren't optional anymore...

[13:32] <psch> branching between line 94 and 95, that is

[13:33] *** rindolf left
[13:33] *** rindolf joined
[13:37] *** kaare_ left
[13:38] *** kaare_ joined
[13:43] *** raiph left
[13:44] *** molaf_ left
[13:45] <masak> lizmat++ # jumping in and giving a Perl 6 talk

[13:47] <colomon> masak: context for that lizmat++ ?

[13:47] <colomon> found it in the backlog, lizmat++ indeed!

[13:52] <breinbaas> http://www.t-dose.org/,  Eindhoven - where they have the highest IQ per square km in Europe (at least, that's what they say)  :)

[13:53] <dalek> rakudo/nom: 5f797ed | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[13:53] <dalek> rakudo/nom: s/x/tai, as x is so meaningless

[13:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5f797ed75b

[14:00] <lizmat> m: say try die  # does not actually die

[14:00] <camelia> rakudo-moar 315ec6: OUTPUT¬´Nil‚ê§¬ª

[14:00] <lizmat> m: say try +"foo"  # this does, why ?

[14:00] <camelia> rakudo-moar 315ec6: OUTPUT¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '‚èèfoo' (indicated by ‚èè)‚ê§  in method gist at src/gen/m-CORE.setting:13672‚ê§  in sub say at src/gen/m-CORE.setting:15862‚ê§  in block <unit> at /tmp/HzF9JlwvI6:1‚ê§‚ê§¬ª

[14:01] <lizmat> rakudobug ?

[14:03] *** xenoterracide_ joined
[14:03] <masak> I'd say so.

[14:03] <masak> please submit.

[14:09] *** woolfy1 joined
[14:09] *** woolfy left
[14:11] *** xenoterracide_ left
[14:12] *** xenoterracide_ joined
[14:12] <lizmat> I'm told that all of YAPC::EU videos are now online

[14:12] <lizmat> "including few small eastereggs videos, which are some jokes or announcements :)"

[14:14] <lizmat> rakudobug submitted: #123053

[14:14] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123053

[14:15] <cognominal> https://www.youtube.com/user/yapceu/videos

[14:19] *** sqirrel_ left
[14:20] *** rindolf left
[14:20] *** xenoterracide_ is now known as xenoterracide

[14:28] *** kjs_ joined
[14:29] *** xenoterracide left
[14:36] <FROGGS> m: m: say (try +"foo").WHAT

[14:36] <camelia> rakudo-moar 315ec6: OUTPUT¬´(Failure)‚ê§¬ª

[14:36] <FROGGS> lizmat: you pass a Failure to say()

[14:37] <FROGGS> m: m: say (try +"foo").gist

[14:37] <camelia> rakudo-moar 315ec6: OUTPUT¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '‚èèfoo' (indicated by ‚èè)‚ê§  in method gist at src/gen/m-CORE.setting:13672‚ê§  in block <unit> at /tmp/6o2Zc5kHdZ:1‚ê§‚ê§¬ª

[14:37] <FROGGS> m: m: say so (try +"foo")

[14:37] <camelia> rakudo-moar 315ec6: OUTPUT¬´False‚ê§¬ª

[14:37] <lizmat> m: my $a = try "foo".Numeric  # and this ?

[14:37] <camelia> rakudo-moar 315ec6: OUTPUT¬´Unhandled exception: Cannot convert string to number: base-10 number must begin with valid digits or '.' in '‚èèfoo' (indicated by ‚èè)‚ê§   at <unknown>:1  (/home/camelia/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:throw:4294967295)‚ê§ from ‚Ä¶¬ª

[14:39] <FROGGS> m: my $a = try "foo".Numeric; 1

[14:39] <camelia> rakudo-moar 315ec6: ( no output )

[14:39] <psch> m: my $a; try $a = "foo".Numeric; $!.say

[14:39] <camelia> rakudo-moar 315ec6: OUTPUT¬´(Any)‚ê§¬ª

[14:39] *** rurban1 joined
[14:39] <FROGGS> lizmat: end of block will be evaluated

[14:40] <lizmat> m: say (try "foo".Numeric).WHAT

[14:40] <camelia> rakudo-moar 315ec6: OUTPUT¬´(Failure)‚ê§¬ª

[14:40] <lizmat> m: say (try die).WHAT

[14:40] <camelia> rakudo-moar 315ec6: OUTPUT¬´Nil‚ê§¬ª

[14:40] <lizmat> shouldn't that also be a Failure then /

[14:40] <lizmat> ?

[14:41] <FROGGS> m: say (try fail "foo").WHAT

[14:41] <camelia> rakudo-moar 315ec6: OUTPUT¬´Unhandled exception: foo‚ê§   at <unknown>:1  (/home/camelia/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:throw:4294967295)‚ê§ from src/gen/m-CORE.setting:13680  (/home/camelia/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:sink:29)‚Ä¶¬ª

[14:41] <FROGGS> I dunno

[14:41] <psch> it does seem somewhat leaky

[14:41] <FROGGS> feels weird all in all

[14:41] *** rindolf joined
[14:42] <lizmat> I stumbled on this when Juerd was asking me about being able to do "42 + 'foo'"

[14:42] <lizmat> having "foo" revert to 0

[14:42] *** rurban left
[14:43] <lizmat> first attempt was:

[14:43] <lizmat> m: say 42 + try +"foo"

[14:43] <camelia> rakudo-moar 315ec6: OUTPUT¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '‚èèfoo' (indicated by ‚èè)‚ê§  in method Numeric at src/gen/m-CORE.setting:13670‚ê§  in sub infix:<+> at src/gen/m-CORE.setting:4472‚ê§  in block <unit> at /tmp/SPz96lb‚Ä¶¬ª

[14:44] <lizmat> m: say 42 + try { +"foo" } // 0

[14:44] <camelia> rakudo-moar 315ec6: OUTPUT¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '‚èèfoo' (indicated by ‚èè)‚ê§  in method Numeric at src/gen/m-CORE.setting:13670‚ê§  in sub infix:<+> at src/gen/m-CORE.setting:4472‚ê§  in block <unit> at /tmp/XqS7LWQ‚Ä¶¬ª

[14:46] <lizmat> I guess S04:1054 applies here

[14:46] <synopsebot> Link: http://perlcabal.org/syn/S04.html#line_1054

[14:46] *** davido_home left
[14:46] <lizmat> "Additionally, the C<try> block or statement implicitly enforces a C<use fatal> context such that failures are immediately thrown as exceptions."

[14:46] *** vendethiel joined
[14:47] *** davido_home joined
[14:48] <vendethiel> o/, #perl6.

[14:49] <psch> vendethiel o/

[14:49] <lizmat> so is the "use fatal" leaking outward ?

[14:49] <lizmat> vendethiel \o

[14:50] *** xfix left
[14:51] *** xfix joined
[14:52] <psch> lizmat: i think try { } is wrong here

[14:52] <psch> lizmat: cf. "A try block by default has a CATCH block that handles all fatal exceptions by ignoring them."

[14:52] <lizmat> indeed

[14:52] <psch> m: { +"foo"; CATCH { default { } } }; say "alive" # this is ignoring

[14:52] <camelia> rakudo-moar 315ec6: OUTPUT¬´alive‚ê§¬ª

[14:53] <psch> m: say 42 + do { +"foo"; CATCH { default { } } }

[14:53] <camelia> rakudo-moar 315ec6: OUTPUT¬´use of uninitialized value of type Nil in numeric context  in block <unit> at /tmp/UJ5aTieH6L:1‚ê§‚ê§42‚ê§¬ª

[14:53] <lizmat> m: say try fail

[14:53] <camelia> rakudo-moar 315ec6: OUTPUT¬´Unhandled exception: ‚ê§   at <unknown>:1  (/home/camelia/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:throw:4294967295)‚ê§ from src/gen/m-CORE.setting:13680  (/home/camelia/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:sink:29)‚ê§‚Ä¶¬ª

[14:53] <psch> m: say 42 + do { { +"foo"; CATCH { default { } } } // 0 }

[14:53] <camelia> rakudo-moar 315ec6: OUTPUT¬´Cannot call 'Numeric'; none of these signatures match:‚ê§:(Mu:U \v: *%_)‚ê§  in sub infix:<+> at src/gen/m-CORE.setting:4472‚ê§  in block <unit> at /tmp/EIBebb9ZQL:1‚ê§‚ê§¬ª

[14:53] *** araujo left
[14:55] <psch> m: say 42 + (do { +"foo";  CATCH { default { } }; } // 0) # what Juerd wanted, i think

[14:55] <camelia> rakudo-moar 315ec6: OUTPUT¬´42‚ê§¬ª

[14:55] <psch> slightly unwieldy

[14:55] *** araujo joined
[14:55] <psch> it should work with try though

[14:55] <Juerd> psch: Slightly...?

[14:55] <lizmat> so it seems that a *fail* is not handled by try

[14:55] <lizmat> m: say throw try fail

[14:55] <camelia> rakudo-moar 315ec6: OUTPUT¬´===SORRY!=== Error while compiling /tmp/KrCI7bYOlB‚ê§Undeclared routine:‚ê§    throw used at line 1‚ê§‚ê§¬ª

[14:55] <lizmat> m: say try fail.throw

[14:55] <camelia> rakudo-moar 315ec6: OUTPUT¬´Unhandled exception: ‚ê§   at <unknown>:1  (/home/camelia/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:throw:4294967295)‚ê§ from src/gen/m-CORE.setting:13680  (/home/camelia/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:sink:29)‚ê§‚Ä¶¬ª

[14:55] <psch> Juerd: i'm writing quite a bit of java recently, i might have a bit of a warped perception... :)

[14:57] *** xenoterracide joined
[14:59] *** xenoterracide left
[15:03] *** xenoterracide joined
[15:05] <masak> I just got bitten by "passed a named param to a .new method, program compiled, error (much later) at runtime"

[15:05] <masak> again.

[15:05] <masak> I think we could detect this one statically. and I think there's a case for it being core, and on by default.

[15:05] <masak> at least a warning.

[15:06] <masak> m: class C { has $.x }; C.new(:x(1), :y(2)); say "alive, no warning"

[15:06] <camelia> rakudo-moar 315ec6: OUTPUT¬´alive, no warning‚ê§¬ª

[15:07] <masak> I would be 100% fine with the analysis being extremely stupid -- i.e. only cover the cases where the class is known at author time, and where we know for 100% sure that no attribute can possibly be there.

[15:07] <masak> the above is such a case.

[15:07] * masak waves the campaign flag for this concern -- vive la catching of user mistakes!

[15:09] <lizmat> .oO( this was one of the first peeves I had with Perl 6, already 2+ years ago )

[15:09] <lizmat> so count me in, masak  :-)

[15:09] <masak> \o/

[15:09] <masak> I propose doing it in a branch, as an experiment, to see what the fallout is.

[15:09] <masak> I might even have time to dig into it myself.

[15:10] <masak> it feels like the MOP should be up to this. #fromthedepartmentofthebleedingobvious

[15:16] *** xenoterracide left
[15:17] *** xenoterracide_ joined
[15:18] <vendethiel> +1; this is a peeve as well: P

[15:18] <colomon> +1

[15:19] <masak> ok, just to be clear, here's the behavior I propose:

[15:19] <masak> (a) when we parse a .new call

[15:19] <masak> (b) to a class we know statically

[15:20] <masak> (c) whose .new method has not been overridden

[15:20] <masak> (d) with at least one named argument that would just get lost in space (because there's no corresponding public attribute)

[15:21] <masak> ...warn with an error message containing the name(s) of the named(s) with missing attribute(s)

[15:21] *** BenGoldberg joined
[15:22] <lizmat> why limit this to .new ??

[15:23] <masak> I guess because at some level, I still believe in S12's "Interface Consistency".

[15:24] <masak> I just want to catch likely thinkos, not forbid extensionality outright.

[15:24] <vendethiel> mmh.

[15:24] <vendethiel> m: class A{has $.a;};class B{has $.b;}; say B.new(:5a).a

[15:24] <camelia> rakudo-moar 315ec6: OUTPUT¬´No such method 'a' for invocant of type 'B'‚ê§  in block <unit> at /tmp/euQL41XfFb:1‚ê§‚ê§¬ª

[15:24] * colomon fears this uncertainty about how to go about this is why we have no fix for this already.

[15:24] <vendethiel> m: class A{has $.a;};class B is A{has $.b;}; say B.new(:5a).a

[15:24] <camelia> rakudo-moar 315ec6: OUTPUT¬´===SORRY!===‚ê§Could not locate compile-time value for symbol $?CLASS‚ê§¬ª

[15:24] <vendethiel> wut

[15:25] <lizmat> space?  A{  ?

[15:25] <colomon> m: sub dummy { Nil; }; say dummy().WHAT

[15:25] <camelia> rakudo-moar 315ec6: OUTPUT¬´Nil‚ê§¬ª

[15:25] <masak> colomon: no uncertainty, in my view. lizmat's is a legitimate question, but it also has a motivated answer, IMO.

[15:27] <colomon> say $*CWD

[15:27] <colomon> m: say $*CWD

[15:27] <camelia> rakudo-moar 315ec6: OUTPUT¬´"/home/camelia".IO‚ê§¬ª

[15:28] *** molaf joined
[15:31] <masak> anyway, vendethiel: your example would of course be detected by the MOP as B having an $.a

[15:31] <vendethiel> oke :)

[15:32] <masak> so I foresee no ambiguity or false positives there

[15:33] <vendethiel> .oO( let's trust masak's foreshadowings )

[15:34] *** guru joined
[15:35] *** guru is now known as Guest9659

[15:35] *** Guest9659 is now known as ajr_

[15:38] *** xenoterracide_ is now known as xenoterracide

[15:41] <colomon> m: my $a = Nil; say $a

[15:41] <camelia> rakudo-moar 315ec6: OUTPUT¬´(Any)‚ê§¬ª

[15:42] <colomon> m: my $a := Nil; say $a

[15:42] <camelia> rakudo-moar 315ec6: OUTPUT¬´Nil‚ê§¬ª

[15:42] *** woolfy1 left
[15:44] <lizmat> m: my $a is default(Nil); say $a

[15:44] <camelia> rakudo-moar 315ec6: OUTPUT¬´Nil‚ê§¬ª

[15:44] <psch> m: .say if 'B' fff 'B' for <A B C B A>

[15:44] <camelia> rakudo-moar 315ec6: OUTPUT¬´B‚ê§C‚ê§B‚ê§¬ª

[15:44] <lizmat> the only way to have assignment to a var give Nil

[15:44] *** Ven joined
[15:44] *** erkan joined
[15:44] *** erkan left
[15:44] *** erkan joined
[15:44] <psch> m: $a.say if $a ~~ ('B' fff 'B') for <A B C B A> 

[15:44] <camelia> rakudo-moar 315ec6: OUTPUT¬´===SORRY!=== Error while compiling /tmp/MfQj5qujMf‚ê§Variable '$a' is not declared‚ê§at /tmp/MfQj5qujMf:1‚ê§------> $a.say‚èè if $a ~~ ('B' fff 'B') for <A B C B A>‚ê§    expecting any of:‚ê§        method arguments‚ê§ ‚Ä¶¬ª

[15:45] <psch> m: $a.say if $a ~~ ('B' fff 'B') for <A B C B A>  -> $a

[15:45] <camelia> rakudo-moar 315ec6: OUTPUT¬´===SORRY!=== Error while compiling /tmp/E2KmAcRHVd‚ê§Variable '$a' is not declared‚ê§at /tmp/E2KmAcRHVd:1‚ê§------> $a.say‚èè if $a ~~ ('B' fff 'B') for <A B C B A> ‚ê§    expecting any of:‚ê§        method arguments‚ê§‚Ä¶¬ª

[15:45] <psch> heh

[15:45] <psch> m: for <A B C B A> -> $a { $a.say if $a ~~ ('B' fff 'B') }

[15:45] <camelia> rakudo-moar 315ec6: OUTPUT¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '‚èèB' (indicated by ‚èè)‚ê§  in method Numeric at src/gen/m-CORE.setting:13670‚ê§  in sub infix:<==> at src/gen/m-CORE.setting:4522‚ê§  in sub infix:<==> at src/gen/m-C‚Ä¶¬ª

[15:45] <lizmat> I just realized that it is the lack of 'use fatal' implementation, is what try +"foo" makes fail

[15:45] <lizmat> m: say 42 + try (+"foo").throw

[15:45] <camelia> rakudo-moar 315ec6: OUTPUT¬´use of uninitialized value of type Nil in numeric context  in block <unit> at /tmp/DrvFxtxJR5:1‚ê§‚ê§42‚ê§¬ª

[15:46] *** immortal left
[15:47] <psch> m: for 1, 2, 3, 2, 1 -> $a { $a.say if $a ~~ (2 fff 2) }

[15:47] <camelia> rakudo-moar 315ec6: ( no output )

[15:47] <lizmat> end of day 1 of T-Dose

[15:47] <lizmat> social event&

[15:47] *** lizmat left
[15:47] <psch> the last two should work, i feel

[15:47] <psch> which means i probably overlooked something when patching this a few weeks back

[15:48] <psch> vendethiel: re: "can't rebase PRs".  what exactly did you mean?

[15:48] <Ven> psch: you can't change your branch target

[15:49] <colomon> m: say " ".path.WHAT

[15:49] <camelia> rakudo-moar 315ec6: OUTPUT¬´(IO::Path)‚ê§¬ª

[15:49] <colomon> m: say " ".IO.WHAT

[15:49] <camelia> rakudo-moar 315ec6: OUTPUT¬´(IO::Path)‚ê§¬ª

[15:49] <colomon> m: say " ".IO.path.WHAT

[15:49] <camelia> rakudo-moar 315ec6: OUTPUT¬´(Str)‚ê§¬ª

[15:49] <psch> Ven: the one i want to merge from, right?

[15:50] <psch> or the one i merge to?

[15:50] <Ven> psch: I think neither can be changed

[15:50] <psch> (github calls them 'base' and 'head')

[15:50] <colomon> darn, just wanted to ask lizmat++ a question

[15:51] *** erdic left
[15:51] <psch> Ven: https://help.github.com/articles/using-pull-requests/#changing-the-branch-range-and-destination-repository but i can't do that.  i suspect the merging party can decide where to merge to

[15:52] <psch> or maybe closing and reopening locks that

[15:53] <psch> oh

[15:53] <psch> no, i understand, after rereading.  before creation base and head can be changed

[15:53] <psch> but after creation they're set, because one probably knew what one was doing

[15:54] *** erdic joined
[15:55] *** rindolf left
[15:56] *** MilkmanDan left
[15:56] *** MilkmanDan joined
[15:56] *** rindolf joined
[15:56] *** Ven left
[15:58] *** davido_home left
[16:00] *** davido_home joined
[16:02] <psch> m: for <A B C B A> -> $a { $a.say if $a ~~ {'B' fff 'B'} }

[16:02] <camelia> rakudo-moar 315ec6: OUTPUT¬´B‚ê§B‚ê§¬ª

[16:04] <BenGoldberg> m: say 2 fff 2;

[16:04] <camelia> rakudo-moar 315ec6: OUTPUT¬´use of uninitialized value of type Nil in numeric context  in block <unit> at /tmp/iHvfDghYC5:1‚ê§‚ê§Nil‚ê§¬ª

[16:05] <psch> i think there's a .Bool call missing now

[16:06] <psch> inside Perl6::Actions &flipflop

[16:06] <psch> m: for <A B C B A> { say "B" fff "B" }

[16:06] <camelia> rakudo-moar 315ec6: OUTPUT¬´Nil‚ê§1‚ê§2‚ê§3‚ê§Nil‚ê§¬ª

[16:07] *** virtualsue joined
[16:08] *** rurban1 left
[16:08] *** rurban joined
[16:10] *** rindolf left
[16:10] *** xenoterracide left
[16:10] *** xenoterracide_ joined
[16:10] *** rindolf joined
[16:11] *** xenoterracide_ left
[16:11] *** xenoterracide_ joined
[16:12] *** xenoterracide_ is now known as xenoterracide

[16:15] <dalek> roast: 933059b | usev6++ | S04-phasers/keep-undo.t:

[16:15] <dalek> roast: Add tests for RT #111866

[16:15] <dalek> roast: review: https://github.com/perl6/roast/commit/933059b19f

[16:15] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=111866

[16:20] <dalek> roast: fc20e7e | usev6++ | S02-names-vars/perl.t:

[16:20] <dalek> roast: Fudge (skip) flapping test for rakudo.jvm

[16:20] <dalek> roast: review: https://github.com/perl6/roast/commit/fc20e7ec10

[16:21] *** kjs_ left
[16:21] *** Noughb joined
[16:22] <Noughb> How's perl6 coming along? Heading for an offical release any time soon?

[16:22] *** rurban left
[16:23] <timotimo> we've been doing monthly official releases for over a year :)

[16:23] <timotimo> but that's probably not what you mean

[16:23] <awwaiid> Noughb: apt-get install rakudo

[16:23] <awwaiid> (or better yet build the latest)

[16:23] <psch> (building the latest)++

[16:23] <timotimo> if you're looking for "when will we call the specification 6.0.0", there's three really big items that need resolving:

[16:23] <timotimo> the GLR, NSA and NFG

[16:23] <timotimo> which are the Great List Refactor (unifying and de-special-casing and also speedifying lists and iterators)

[16:24] <timotimo> Native Shaped Arrays, which gives us tightly packed arrays of native values like ints/chars/doubles/...

[16:24] <timotimo> and Normalized Form Grapheme, which is a way to get a string to have a single codepoint per grapheme no matter what crazy diacritics your troll users throw at you

[16:24] *** kurahaupo left
[16:24] <psch> hrm, i fixed $a ~~ ($x fff $y), but that breaks 16 tests in flip-flop.t :/

[16:24] *** kurahaupo_ joined
[16:25] *** kurahaupo_ left
[16:25] <timotimo> Noughb: if you have more specific questions, we'll be happy to give you answers

[16:26] <timotimo> for example, if you're worried about rakudo's performance, i can say that we've made a lot of headway over the last year and the GLR will give us a final, much needed boost towards not having to worry about performance any more

[16:28] <TimToady> (we hope)

[16:28] <timotimo> well, you better make it work right! :P

[16:29] <Noughb> http://3.bp.blogspot.com/-CDUNCGqVadY/UOoCzeFgspI/AAAAAAAAFEM/x-buLQfCKB4/s1600/kel.gif

[16:29] <timotimo> Noughb: feel free to ask specific questions :)

[16:29] *** Ven joined
[16:30] <psch> so what are ff and fff supposed to return? perl5 .. and ... return a 'boolean in item context', which we completely replace with ff and fff

[16:30] <TimToady> p5 has no booleans :)

[16:31] <psch> spectests currently don't look like they want Bools returned

[16:31] *** xenoterracide left
[16:31] * masak .oO( p5 has no booleans -- true or false? )

[16:31] <TimToady> p5 returns increasing integers

[16:31] <psch> TimToady: right, perldoc says "boolean value", i dropped the value

[16:31] <psch> (it also says "scalar context", not "item context")

[16:32] *** Noughb left
[16:32] <psch> TimToady: does ¬´ $a ~~ ("A" fff "B") ¬ª look sensible to you?

[16:32] <psch> m: for <A B C B A> -> $a { $a.say if $a ~~ {'B' fff 'B'} } # as here

[16:32] <camelia> rakudo-moar 315ec6: OUTPUT¬´B‚ê§B‚ê§¬ª

[16:33] <psch> m: for <A B C B A> -> $a { $a.say if $a ~~ ('B' fff 'B') } # actually, this one 

[16:33] <camelia> rakudo-moar 315ec6: OUTPUT¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '‚èèB' (indicated by ‚èè)‚ê§  in method Numeric at src/gen/m-CORE.setting:13670‚ê§  in sub infix:<==> at src/gen/m-CORE.setting:4522‚ê§  in sub infix:<==> at src/gen/m-C‚Ä¶¬ª

[16:35] <psch> m: for <A B C B A> -> $a { $a.say if $a ~~ ?('B' fff 'B') } # nvm

[16:35] <camelia> rakudo-moar 315ec6: OUTPUT¬´B‚ê§C‚ê§B‚ê§¬ª

[16:36] *** xenoterracide joined
[16:36] <psch> i'm perfectly ok with that, no need to patch anything :)

[16:36] <TimToady> with parens you're getting a double smartmatch

[16:36] <TimToady> since integers are not Bool, Nil, Match, or Failure

[16:37] <psch> TimToady: and ~~ bind tighter than fff, so i need prefix:<?>

[16:37] <psch> i just took a bit too long to think of it

[16:38] <psch> some context: http://irclog.perlgeek.de/perl6/2014-07-20#i_9052245

[16:39] *** zakharyas joined
[16:41] *** xenoterracide left
[16:41] <TimToady> the ? returns a Bool, which prevents a subsequent 'B' ~~ 1

[16:41] *** vendethiel left
[16:45] *** kurahaupo joined
[16:46] <tadzik> timotimo: (rakudobrew spectest suite) I don't see a problem :)

[16:46] <timotimo> cool :)

[16:46] <tadzik> where would it upload them, the not-yet-written cpandatesters? :)

[16:47] <tadzik> timotimo: so your talk is not yet on APW's YT channel?

[16:47] * TimToady wonders if fff should return True but 1, True but 2, etc.

[16:47] * TimToady wonders if people understand a bit better now what the OKness proposal was about

[16:49] <TimToady> we have this arbitrary list of values that are primarily intended to convey success/failure along with other pertinent information

[16:49] <TimToady> in this case, we'd like a value that can return the line count while indicating success to smartmatching

[16:50] <tadzik> sub compsuffix is export { state $ = $*VM.precomp-ext } # <3

[16:50] <timotimo> tadzik: it's a single video with all lightning talks in it

[16:50] <tadzik> lizmat++ and (rakudo team)++ :)

[16:50] <tadzik> timotimo: ah, okay

[16:53] *** virtualsue left
[16:53] <psch> TimToady: "line count" means "state changes"? i like the idea of returning True but $state, but i've repeatedly been told that mixins in CORE are slow

[16:54] <psch> although prefixing with ? or so does seem a bit magic

[16:54] <TimToady> "how many lines in this range so far"

[16:54] <TimToady> so in your case you get 1,2,3

[16:54] <psch> right, for the 2nd, 3rd and 4th iteration

[16:54] <TimToady> relative line numbers, basically

[16:54] <psch> state change is wrong, i see

[16:55] <TimToady> for a loose definition of "line"

[16:55] <TimToady> sequence numbers

[16:56] <TimToady> p5 actaully return "3e0" on the last one, do you can recognize the end, marked by the 'e' :)

[16:56] <TimToady> *so

[16:57] <TimToady> but that's a terrible hack, so we have ^ instead

[16:57] <TimToady> by analogy to ^..^

[16:57] <timotimo> https://github.com/koorchik/formula-evaluation-benchmark - we have a new benchmark to excell at!

[16:58] <TimToady> quick, stomp the excellerator!

[17:02] <timotimo> huh, look at how the functions are implemented: https://github.com/koorchik/formula-evaluation-benchmark/blob/master/perl6/ast.pl

[17:02] <timotimo> @ast[$i].isa('Array') - oh my

[17:03] <psch> that looks convoluted

[17:03] <timotimo> that is some pretty unidiomatic perl6 code

[17:03] <tadzik> FROGGS: yt?

[17:04] <psch> timotimo: seems like a as-close-as-possible translation of the corresponding p5 code

[17:05] <timotimo> it's not very close, i don't think

[17:05] <timotimo> for example, in perl5 the names are constants, in perl6 they are variables

[17:06] <masak> s/variables/first-class package objects/

[17:07] <timotimo> i just went ahead and invited him to our irc channel

[17:08] * timotimo afk for a bit :P

[17:08] <psch> :D

[17:13] <moritz> after GLR,   my $c = <a b c>; $c.push: 'd'  will work, right?

[17:18] <timotimo> i'm pretty sure it should

[17:18] <TimToady> a stronger case can be made for .plan than for .push

[17:19] <timotimo> i'll run the benchmark through the profiler and see what's what

[17:20] <TimToady> doubtless there are some optimizations that could depend on knowing whether a particular list can be extended

[17:21] <dalek> roast/glr: de481bf | moritz++ | S (6 files):

[17:21] <dalek> roast/glr: start to get rid of Parcel

[17:21] <dalek> roast/glr: review: https://github.com/perl6/roast/commit/de481bfc4f

[17:22] <TimToady> so maybe we need a monadoid to manage that

[17:22] <psch> fwiw, 100 iterations of smart-match and flipflop code above with Bool mixin clocks in at about .79 seconds on my machine.  nom is at about .38

[17:23] <psch> i.e. "True but $seqnum" flipflop is about half as fast as current flipflop

[17:24] <psch> although i'm sure it could be solved smarter than i solved it, but i don't know if i can make up a smarter solution

[17:24] <timotimo> psch: since these values usually start at 0, maybe we can have a cache that keeps the boxed and mixed-in objects around and then just clones them each time?

[17:25] <psch> timotimo: they start at 1 for flip flop, but i'd say "yes we can"

[17:25] <psch> maybe i can figure that out, probably not this weekend though

[17:25] <moritz> TimToady: I thought about more .map and .for methods; if we have both, I'd be weird to have 'for' as a syntactic construct but 'map' as a sub

[17:25] *** thou joined
[17:26] <moritz> so for @list {block}, but map {block}, @list

[17:26] <moritz> TimToady: any plans on makiing 'map @list {block}' work too?

[17:27] <TimToady> I think that hobgoblin lives off in a corner, and can be probably be ignored :)

[17:27] <psch> oh, also of note: i'm not running jitted, which might make a difference with the 500 prefix:<++> that my little benchmark here runs

[17:27] <psch> ...actually 300

[17:28] <TimToady> as for statement control map, it would be too ambiguous with the function

[17:28] <timotimo> ah, hm.

[17:29] <TimToady> are you mixing the number in each time?  that sounds heavy

[17:30] <timotimo> doesn't each mixin action cause Moar's specializer to go "okay, global deoptimization time!"

[17:30] <TimToady> maybe we should look for bit that we can set in success/failure values that smartmatch can check very quickly

[17:31] * TimToady refrains from calling it the OKness bit

[17:31] <TimToady> but something on the level of .DEFINITE

[17:32] * TimToady would like jnthn++'s opinion on that

[17:33] <TimToady> we don't have to call it .OKness, feel free to bikeshed what a "successfulness" bit would be named

[17:33] <psch> yeah, my implementation is as naive as it can get

[17:33] <timotimo> let's call it the "good bit"

[17:33] <timotimo> (like the "evil bit" that we have in networking)

[17:33] <TimToady> well, but what if it's bad this time?

[17:34] <timotimo> hmm

[17:34] <timotimo> maybe we should call it something without an inherent value

[17:34] <timotimo> like a "duck bit"

[17:35] <TimToady> but it wants to express meta-value

[17:35] <psch> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Actions.nqp#L5333 i'm just wrapping this Op.new in another one that amounts to $state.Bool but $state

[17:35] <moritz> any objections to me introducing method for as  self.flat.map?

[17:35] <moritz> that way code can start to use it, and have a chance to break less during GLR

[17:35] <TimToady> seems okay to me

[17:36] <timotimo> there you're using that "okay" word again!

[17:37] <moritz> m: say ((1, 2), (3, 4)).map({ say .perl; $_ })

[17:37] <camelia> rakudo-moar 315ec6: OUTPUT¬´1‚ê§2‚ê§3‚ê§4‚ê§1 2 3 4‚ê§¬ª

[17:37] <moritz> m: say ((1, 2), (3, 4)).map({ say .perl; $_ }).perl

[17:37] <camelia> rakudo-moar 315ec6: OUTPUT¬´1‚ê§2‚ê§3‚ê§4‚ê§(1, 2, 3, 4).list‚ê§¬ª

[17:37] <moritz> seems .map already behaves like .for will

[17:38] <dalek> rakudo/nom: 081fa81 | moritz++ | src/core/Str.pm:

[17:38] <dalek> rakudo/nom: micro-optimize Str.trans

[17:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/081fa81896

[17:38] <dalek> rakudo/nom: af9e90e | moritz++ | src/core/ListIter.pm:

[17:38] <dalek> rakudo/nom: smaller scope in ListIter.reify

[17:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/af9e90e2d9

[17:39] <TimToady> moritz: yes, but .map's .flat is going away

[17:39] <moritz> TimToady: right

[17:40] *** virtualsue joined
[17:41] <timotimo> oh, look, we have 18.28% of exclusive time spent in ListIter.reify ... again

[17:41] <tadzik> in that benchmark?

[17:42] <tadzik> funny things is, it bails out with a wrong sum at the second run

[17:42] <timotimo> yeah, it does 10k iterations and expects the result to be the same as for 100k iterations

[17:42] <timotimo> i set the number of iterations back up to 100k

[17:42] <timotimo> http://t.h8.lv/p6profile/formula_profile_1.html

[17:43] <timotimo> second most exclusive time spent is gimme, at 10.5%

[17:43] <timotimo> damn the GLR is needed.

[17:44] <Ven> timotimo: remember my profiling :)? (of the game of life)

[17:44] <timotimo> yeah, how much was that again?

[17:44] <tadzik> I like how 75% of stuff is jat

[17:44] <tadzik> otoh, is that the reason for incorrect results?

[17:44] <Ven> around 55% in the different list/map methods

[17:44] * TimToady is looking forward to hypers on native arrays

[17:45] <tadzik> ah, that's just a bug in the code, alrihgt

[17:46] <timotimo> 4% exclusive time spent in isa

[17:47] <dalek> roast: d262e2e | (Pepe Schwarz)++ | S03-operators/flip-flop.t:

[17:47] <dalek> roast: Add a test for flip-flop with "True but $seqnum".

[17:47] <dalek> roast: review: https://github.com/perl6/roast/commit/d262e2ed9f

[17:49] *** FROGGS_ joined
[17:53] <TimToady> or maybe we should just make it easier to generate fake Match objects with numeric values

[17:53] *** FROGGS left
[17:54] <TimToady> not sure that would beat True but $seqnum though

[17:55] <TimToady> it would fit into the current I-know-success-when-I-see-it scheme though

[17:55] *** Mso150 joined
[17:56] <TimToady> would be kinda funny to have a Match object that + return 3 for, but @ return nothing

[17:56] <psch> fwiw, i've been thinking of True but $seqnum as a name for the semantics

[17:57] <TimToady> maybe there's some way to optimize creation of Bool plus a payload

[17:58] <TimToady> after all, Failure can be seen as kind of a Nil plus a payload

[17:58] <TimToady> that's why I'm thinking leave Bool alone and muck with Match instead

[17:59] <timotimo> COMPUTED [100000] ITERATIONS IN [87] SECONDS

[17:59] <timotimo> waitwhat.

[17:59] <timotimo> what did i do?

[17:59] <timotimo> oh

[18:00] <TimToady> ohoh

[18:00] <timotimo> i replaced the custom sum implementation with [+] @args

[18:00] <timotimo> http://t.h8.lv/p6profile/formula_profile_2.html

[18:00] <timotimo> not sure if that's all that's responsible, though

[18:02] <TimToady> [+] is one of those operators that could actually be parallelized internally, given a suitable data structure

[18:03] <timotimo> hm.

[18:03] <TimToady> likewise [*], though in either case one could get weirdness near the Rat->Num promotion

[18:03] <timotimo> mhm

[18:05] <TimToady> probably compiling those down to very tight jitted code is more useful in general

[18:07] <timotimo> how exactly do we [+]?

[18:08] <timotimo> that's reduce_left, right?

[18:08] <masak> [+] and [*] could be map-reduced, because of their monoidal structure.

[18:09] <timotimo> yeah, they could

[18:09] <TimToady> well, it's METAOP_REDUCE_LEFT actually

[18:10] <TimToady> but in general you can trap it at compile time since the ops are lexically scoped

[18:10] <timotimo> right

[18:10] <timotimo> the optimizer could know about that or we could have a trait for these operators that lend themselves to be map-reduced

[18:11] *** kaare_ left
[18:11] <TimToady> well, METAOP_REDUCE_LEFT is actually called at compile time, iiuc

[18:12] <TimToady> or at least it could be

[18:12] <timotimo> m: say "the custom sum operation makes the program take { 339 / 87 } times longer than with [+]"

[18:12] <camelia> rakudo-moar 315ec6: OUTPUT¬´the custom sum operation makes the program take 3.896552 times longer than with [+]‚ê§¬ª

[18:13] <TimToady> is the custom sum routine done in natives?

[18:13] <timotimo> maybe all we need to do for that to work is put an "is pure" trait on those

[18:13] <timotimo> i don't think so

[18:13] <TimToady> well, not that [+] is either

[18:14] <masak> the operator needs to be associative.

[18:16] <timotimo> ah, also: the code there is working with rational numbers instead of ints and stuff

[18:16] <timotimo> that may also have strong performance implications

[18:17] <TimToady> we've specced 'native' rats, but we don't have 'em yet

[18:17] <timotimo> right

[18:18] *** Sqirrel joined
[18:20] *** dwarring joined
[18:22] *** virtualsue left
[18:27] <dalek> roast: 72709f1 | usev6++ | S05-metasyntax/unknown.t:

[18:27] <dalek> roast: Add test for RT #77562

[18:27] <dalek> roast: review: https://github.com/perl6/roast/commit/72709f1783

[18:27] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=77562

[18:29] <timotimo> huh.

[18:29] *** virtualsue joined
[18:29] <timotimo> it may very well be that i accidentally measured the changed code with only a tenth of the iterations?

[18:29] <timotimo> that would be embarassing

[18:36] <dalek> rakudo/nom: 96d6011 | moritz++ | src/core/Any.pm:

[18:36] <dalek> rakudo/nom: Introduce method for

[18:36] <dalek> rakudo/nom: 

[18:36] <dalek> rakudo/nom: it is now an alias for .map, but .map will stop to flatten its invocant

[18:36] <dalek> rakudo/nom: eventually; .for will continue to behave as it does now

[18:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/96d6011cb9

[18:37] *** darutoko left
[18:40] <timotimo> i didn't measure wrongly, the [+] way really is 4x faster than the custom loop

[18:42] <timotimo> m: "and without a profiler running in the background, the ratio is { 304 / 78 }." 

[18:42] <camelia> rakudo-moar 315ec6: ( no output )

[18:42] <timotimo> m: say "and without a profiler running in the background, the ratio is { 304 / 78 }." 

[18:42] <camelia> rakudo-moar 315ec6: OUTPUT¬´and without a profiler running in the background, the ratio is 3.897436.‚ê§¬ª

[18:43] *** Alula left
[18:51] <timotimo> my measurements are misbehaving

[18:58] <timotimo> somehow i can't get it to perform poorly any more, wtf?

[18:59] *** Alula joined
[18:59] <psch> moritz: i've brought my Str.trans branch up to nom.  do you think merging it makes sense, considering LSM is (or 'was supposed to be') a transient solution?

[19:03] <timotimo> it could be that the .isa('Array') vs ~~ Array change gave me the huge performance improvement

[19:05] * psch dinner &

[19:06] *** Mso150_e joined
[19:06] <timotimo> oh, wow, the isa function is pretty complex

[19:06] *** Mso150 left
[19:08] <moritz> psch: I don't think anybody is working on a "proper" Str.trans, so it makes sense to improve the current thing

[19:08] <moritz> timotimo: at the very least, .isa has to do a dynamic lookup, whereas Array without the quotes goes straight into the SC

[19:21] <timotimo> yeah

[19:21] <colomon> 200 modules passing all tests!  \o/

[19:22] <masak> wow.

[19:22] <timotimo> not bad :)

[19:25] <tadzik> woot

[19:25] *** ghostlines joined
[19:26] *** ghostlines left
[19:26] *** ghostlines joined
[19:27] *** FROGGS_ is now known as FROGGS

[19:28] <FROGGS> dylanwh: what do you think about something like that for cpantesters matrix? http://froggs.de/perl6/cpantesters/

[19:28] <FROGGS> err, cpandatesters

[19:30] *** rindolf left
[19:30] *** rindolf joined
[19:32] *** rindolf left
[19:33] <tadzik> looks cool :)

[19:34] *** cognominal left
[19:36] <colomon> BTW, the ecosystem has a ton of low-hanging fruit in it.  I've got pull requests out that will get two more modules passing, and my guess is quite a few more failing modules could be easily fixed by someone willing to put in a little effort.  And lots of passing modules need more tests...

[19:38] <FROGGS> colomon: true

[19:39] <FROGGS> when I made PRs for modules that are shipped with star then I also recognize that it often is just a two line patch

[19:40] <FROGGS> though, it would be easier for me to fix foreign modules when I'd see the failing reports

[19:40] <FROGGS> and that's why I wanna have cpandatesters *now*

[19:45] *** lue left
[19:46] *** rindolf joined
[19:50] <tony-o> FROGGS: ugexe i think is getting into something like that

[19:50] <tony-o> colomon: i fixed http server async :-)

[19:50] <FROGGS> tony-o: ohh, good to know

[19:51] <colomon> tony-o: yes, I saw in the smoke results!  :)

[19:51] <colomon> tony-o++

[19:51] <tony-o> where are the smoke results?  i should bookmark ..

[19:51] <FROGGS> tadzik / dylanwh: I added dummy reports: http://froggs.de/perl6/cpantesters/

[19:52] *** zakharyas left
[19:54] *** ugexe left
[19:54] *** ugexe joined
[19:55] <raydiak> good afternoon #perl6

[19:56] <FROGGS> hi raydiak 

[19:56] <FROGGS> .tell ugexe You are working on something related to module installation tests? please ping me

[19:56] <yoleaux> FROGGS: I'll pass your message to ugexe.

[19:56] <masak> greetings raydiak 

[19:57] *** araujo left
[19:57] <raydiak> nice mockup FROGGS++

[19:57] <FROGGS> ohh, thanks :o)

[19:58] <raydiak> it's not bootstrappy enough, it already looks clean and shiny and rounded :)

[19:58] <tony-o> lol

[19:59] <colomon> tony-o: sorry for spacing out there.  http://host08.perl6.com:8080/report

[19:59] *** araujo joined
[19:59] *** ugexe left
[19:59] *** ugexe joined
[19:59] *** lue joined
[20:02] *** ugexe left
[20:02] <tony-o> thank you

[20:04] *** ugexe joined
[20:07] <dalek> roast: e8f5737 | usev6++ | S32-str/sprintf.t:

[20:07] <dalek> roast: Modify fudging for RT #116280

[20:07] <dalek> roast: review: https://github.com/perl6/roast/commit/e8f5737b2f

[20:07] <dalek> roast: babf768 | usev6++ | S10-packages/basic.t:

[20:07] <dalek> roast: Add test for RT #120561

[20:07] <dalek> roast: review: https://github.com/perl6/roast/commit/babf7685de

[20:07] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=116280

[20:07] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120561

[20:19] *** Ven left
[20:21] <timotimo> http://t.h8.lv/p6profile/formula_profile_latest.html  /  http://t.h8.lv/p6profile/formula_profile_latest.pl

[20:21] <timotimo> might be some interesting things to spelunk in there

[20:22] <timotimo> like in one evaluate ast call, we spend 2.44% of time doing a return

[20:24] <dalek> roast: f9b1da5 | usev6++ | S02-types/native.t:

[20:24] <dalek> roast: Add test for RT #121349

[20:24] <dalek> roast: review: https://github.com/perl6/roast/commit/f9b1da5bb8

[20:24] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121349

[20:24] <timotimo> things like: why aren't we jitting or inlining postcircumfix:<[ ]>

[20:25] *** immortal joined
[20:26] *** ghostlines left
[20:26] *** aindilis left
[20:26] <gtodd> one would think that postcircumfix:<[ ]> is something that gets used fairly  often

[20:26] *** erkan left
[20:28] *** ghostlines joined
[20:29] <tony-o> who is supernovous in here?

[20:30] <FROGGS> (s)he's not here

[20:30] <psch> hm, rebasing against nom made the history in my trans branch look kinda wonky

[20:31] <psch> moritz: i'll try and clean this up a bit and comment on the PR when it's clean(er than it's now)

[20:32] <timotimo> the jit bails out in a postcircumfix:<[ ]> from encountering the multicachefind op

[20:32] <timotimo> another postcircumfix:<[ ]> got jitted, though

[20:33] *** araujo left
[20:33] <timotimo> that seems easy enough to jit.

[20:36] *** araujo joined
[20:39] *** araujo left
[20:40] *** araujo joined
[20:41] <timotimo> (unless of course you make loads of stupid typos along the way and don't compile before committing and pushing ...)

[20:42] *** Mso150_e left
[20:43] *** SamuraiJack joined
[20:43] *** Mso150_e joined
[20:44] <psch> timotimo: so the travis failure in my tr branch is your doing? 

[20:45] <psch> in src/jit/graph.c, if i can read... :)

[20:47] *** ghostlines left
[20:49] <raydiak> so I replaced the mobo in my mom's laptop yesterday, and the pun totally escaped me until now...is my mother's motherboard my grandmotherboard?

[20:50] * masak .oO( motherboard-of-dragons )

[20:50] * colomon is listening to his son listen to "How To Speak Dragonese"

[20:50] <raydiak> yeah replacing a laptop motherboard w/no article or video kinda feels like slaying a dragon

[20:50] *** lizmat joined
[20:52] <dalek> roast: 7f81801 | usev6++ | S12-attributes/ (2 files):

[20:52] <dalek> roast: Add tests for RT #102478

[20:52] <dalek> roast: review: https://github.com/perl6/roast/commit/7f8180122c

[20:52] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=102478

[20:52] *** ajr_ left
[20:52] *** ive joined
[20:53] <raydiak> colomon: what does dragonese sound like?

[20:53] *** ugexe left
[20:53] *** ugexe joined
[20:53] <colomon> raydiak: it sounds like mangled baby talk.  :)

[20:54] <raydiak> haha :)

[20:54] <colomon> raydiak: this book is actually an adventure story about the book How to Speak Dragonese, rather than a textbook on the subject. ;)

[20:54] <masak> no don't mangle babies

[20:54] <lizmat> colomon: what was the question?

[20:54] <colomon> It's How To Train Your Dragon book 3

[20:55] <colomon> lizmat: I think it was about .path vs .IO

[20:55] <raydiak> ah, I see...that makes more sense

[20:55] * raydiak was imagining some skyrim spinoff children's books

[20:56] <timotimo> at the same url there's now also latest_speshlog.txt and latest_jitlog.txt

[20:57] <colomon> lizmat: I think I figured stuff out.  It is perhaps worth pointing out that Str.path doesn't seem to be deprecated in Rakudo, while you seem to have neglected to explicitly define IO::Path.path in S32

[20:57] <lizmat> I was just realizing that as well

[20:57] <lizmat> :-(

[20:58] <lizmat> some fixing is in order, it would seem

[20:58] <colomon> it's particularly confusing if you're looking at the results from dir, because it used to return strings which you'd use .path on to turn into IO::Path, while now it returns IO::Path which .path turns to a string

[20:59] *** woolfy joined
[20:59] *** vendethiel joined
[20:59] <lizmat> when I changed .dir to return Str instead of IO::Path, a *lot* of things broke  :-(

[20:59] <colomon> ‚Ä¶. other way around, no?

[20:59] <colomon> m: say dir()[0].WHAT

[20:59] <camelia> rakudo-moar 315ec6: OUTPUT¬´(IO::Path)‚ê§¬ª

[20:59] <timotimo> and the .html profile _latest.html has also been updated

[21:00] *** rindolf left
[21:00] <lizmat> hmmm....

[21:00] <lizmat> dir used to return Str?  are you sure?

[21:01] *** ugexe left
[21:01] <colomon> not sure, but that's certainly what the IO::Path::More tests seemed to think

[21:01] *** ugexe joined
[21:01] <lizmat> hmmm... I will look at that tomorrow and make sure it matches spec

[21:01] <colomon> I mean, list of Str.

[21:01] <colomon> Mind you, I think your changes are sensible!

[21:02] <colomon> just need a bit more clarity in the spec

[21:02] <dalek> rakudo/nom: 2797925 | (Elizabeth Mattijsen)++ | README.md:

[21:02] <dalek> rakudo/nom: Fix typo

[21:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2797925c9f

[21:02] *** ive left
[21:03] *** ive joined
[21:03] *** Ben_Goldberg joined
[21:03] *** BenGoldberg left
[21:03] *** Ben_Goldberg is now known as BenGoldberg

[21:09] *** xfix is now known as notfix

[21:10] *** raiph joined
[21:10] <lizmat> colomon: seems only  t/spec/S32-io/dir.t fails

[21:11] <colomon> lizmat: fails with what?

[21:11] <lizmat> d0a1b098 (Solomon Foster 2013-06-03 20:18:44 -0400 14) ok @files.grep(*.basename

[21:11] <timotimo> of course jitting multicachefind only gets us to invokewithcapture which doesn't do it any more

[21:11] <lizmat> it expected an IO::Path object there

[21:11] <lizmat> test #3

[21:12] <lizmat> but I'm surprised it doesn't break anything else

[21:13] <lizmat> hmmm... it also breaks Panda

[21:13] <lizmat> but I could fix that at the same time

[21:16] *** spider-mario left
[21:18] <lizmat> but not now, as I'm tired and need the extra hour this night

[21:18] <lizmat> so good night, #perl6!

[21:18] *** ive left
[21:19] <raydiak> g'night lizmat

[21:19] <timotimo> gnite lizmat 

[21:19] *** ive joined
[21:23] *** erkan joined
[21:23] *** erkan left
[21:23] *** erkan joined
[21:25] *** immortal left
[21:27] *** BenGoldberg left
[21:30] *** lizmat_ joined
[21:30] *** lizmat left
[21:30] <raydiak> it's interesting as this algebra module progresses how much of it ends up resembling a compiler...it parses, emits, uses a tree for the working structure, has an "optimizer" for simplifying expressions, etc...

[21:31] <masak> all software wants to be either an interpreter or a compiler.

[21:31] <psch> and an email client ;)

[21:32] <raydiak> wow I never quite thought about it like that...but that makes sense

[21:32] * psch .oO( that's still interpreting... )

[21:33] <masak> psch: think of how much software out there that's mainly a switch statement in a loop. that's an interpreter.

[21:33] <masak> psch: compilers arise as you add layers of caching to an interpreter.

[21:34] *** BenGoldberg joined
[21:35] <psch> masak: i was jesting, in reference to http://en.wikipedia.org/wiki/Jamie_Zawinski#Zawinski.27s_law_of_software_envelopment

[21:36] <psch> masak: i do agree with your point.

[21:36] <masak> oh, sorry, I meant those last two lines for raydiak :)

[21:36] <masak> psch: I almost replied to you "an email client is still an interpreter", but then you pre-empted me :)

[21:38] <raydiak> that's a really interesting way of thinking about it

[21:38] <psch> masak++ # thinking

[21:39] <raydiak> I remember thinking about Pray as a "compiler" for scene files -> image files, in a conversation I was having about futamura projections

[21:39] <raydiak> masak++ # ensuring I get my paradigm shift for the day

[21:44] *** immortal joined
[21:44] *** immortal left
[21:44] *** immortal joined
[21:46] <masak> I have the feeling SICP the book gets its oomph quite a bit from that insight. and maybe Lisp in general does, too.

[21:46] *** erkan left
[21:49] <timotimo> http://t.h8.lv/p6profile/jit_bails_per_frame_name.txt

[21:52] <raydiak> thanks, I'll put that book on my list of books...lisp is already on my list of languages to learn :)

[21:54] *** SamuraiJack left
[21:54] <masak> it can be found legally for free online, and nowadays in a variety of nice formats: http://sicpebook.wordpress.com/ebook/

[21:55] <raydiak> oh awesome

[22:18] <colomon> SICP is one of the books I'd love to tackle if I mysteriously got another five hours in each day....

[22:19] <colomon> Unforutunately I have a good stack of such books at this point.  :(

[22:19] <masak> I'm trying to rope colleagues into tackling SICP with me, by meeting up regularly and talking about it.

[22:19] <masak> a bit like a reading circle, but with code.

[22:19] <colomon> that's a fine idea

[22:20] <masak> but yeah, there's definitely an element of "in my copious spare time" involved.

[22:26] *** araujo left
[22:26] <raydiak> speaking of things that consume time...any suggestions for a linux distro to put on an old craptop for my g/f?  was thinking lubuntu but I haven't ridden the distro merry-go-round for a few years

[22:26] *** araujo joined
[22:28] <masak> raydiak: you might want to have a look at http://linuxmint.com/ -- very no-nonsense, easy install, and doesn't have Unity.

[22:29] <raydiak> yeah I'm running mint kde on my own laptop, it works pretty great

[22:30] <raydiak> guess light resource usage is one of my top concerns for the 2007 low-end laptop I'm putting this on

[22:30] *** FROGGS left
[22:31] <raydiak> lucky for me we fell off moore's law, or the thing would be darn near useless :)

[22:33] *** Guest1419 left
[22:36] <psch> i'm off to bed.  good night, #perl6 \o

[22:36] <masak> 'n, psch

[22:36] <raydiak> good night psch o/

[22:36] <colomon> \o                                                                                                            

[22:39] <raydiak> heh it appears I changed the passwords on the thing due to the keyboard keys that don't work

[22:40] *** psch left
[22:45] *** Guest1419 joined
[22:50] *** virtualsue left
[22:50] *** ive left
[22:52] <raiph> I'm curious if P6 is on the static typing side of the fence in regard to leonerd's answer to the question heard in last 2 minutes of the yapc eu video of his futures module https://www.youtube.com/watch?v=u9dZgFM6FtE&list=UU7PuZDAIVMyE7mgkZHunXGw#t=48m22s

[22:53] <raiph> I see lizmat in the audience so perhaps she has an answer already?

[22:59] *** immortal left
[23:00] *** erkan joined
[23:03] *** Isp-sec left
[23:07] *** erkan left
[23:08] *** erkan joined
[23:08] *** erkan left
[23:08] *** erkan joined
[23:09] *** Guest1419 left
[23:12] <masak> 'night, #perl6

[23:13] *** Sqirrel left
[23:16] *** gfldex left
[23:21] *** Guest1419 joined
[23:24] *** cognominal joined
[23:26] *** raiph left
[23:28] *** Celelibi left
[23:31] *** raiph joined
[23:45] *** avuserow left
[23:56] *** Alina-malina left
[23:57] *** Alina-malina joined
[23:59] <raiph> .ask perl6 to encourage someone to post a P6 version of the tiny reverse polish forthish "compiler" at http://www.reddit.com/r/perl/comments/2kb0c7/a_compiler_written_in_perl/ (I plan to have a go early next week if no one else gets to it and it's still in the top 10 on /r/perl)

[23:59] <yoleaux> raiph: I'll pass your message to perl6.

