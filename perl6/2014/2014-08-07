[00:03] *** ajr_ left
[00:04] *** rurban joined
[00:06] *** kurahaupo_ left
[00:09] *** rurban left
[00:13] *** SevenWolf left
[00:17] *** autark joined
[00:29] *** jnap1 left
[00:36] *** kurahaupo_ joined
[00:38] *** rjbs- is now known as rjbs

[00:38] *** rjbs left
[00:38] *** rjbs joined
[00:54] *** raiph left
[00:56] *** Sqirrel left
[00:56] *** Sqirrel joined
[00:59] *** dayangkun joined
[01:04] *** iarna left
[01:07] *** jnap joined
[01:13] *** lue left
[01:22] *** jnap left
[01:25] *** lue joined
[01:34] *** klapperl joined
[01:36] *** FROGGS_ joined
[01:37] *** klapperl_ left
[01:38] *** tzictli joined
[01:38] *** Sqirrel left
[01:40] *** FROGGS left
[01:40] <tzictli> I apologize if I've missed something obvious, but is there some way to verify the integrity and authenticity of Rakudo source downloads? I'm not seeing any OpenPGP signatures or hashes, and the 2014.07 tag from the github source isn't signed, either.

[01:49] *** cognome joined
[02:04] *** kurahaupo_ left
[02:08] *** noganex joined
[02:08] *** labster joined
[02:11] *** noganex_ left
[02:15] *** lustlife joined
[02:20] *** chenryn joined
[02:37] *** Pleiades` left
[02:38] *** Pleiades` joined
[02:48] *** chenryn left
[02:49] *** PotatoGim joined
[03:13] *** iarna joined
[03:14] *** ventica joined
[03:18] *** chenryn joined
[03:19] <dwarring> tzictli: try this: gzip -t rakudo-2014.03.tar.gz

[03:20] <dwarring> "gzip -t --test: Test. Check the compressed file integrity"

[03:22] <xiaomiao> dwarring: that's not what tzictli asked for

[03:23] *** chenryn left
[03:24] <dwarring> ok, that just checks that a gzipped file is intact

[03:24] <xiaomiao> yes. doesn't tell you if the content is what you ordered

[03:42] <TimToady> .oO(immutable official modules)

[03:43] <ingy> .oO(ingymutable modules!)

[03:44] *** rurban joined
[03:44] <ingy> IngyInTheMiddle attacks!

[03:53] *** BenGoldberg left
[03:56] *** ventica left
[03:56] *** BenGoldberg joined
[03:59] *** lue left
[04:07] <japhb> m: multi postfix:<d6>(Int $n) { [+] (1..6).roll($n) }; say 3d6 + 100 xx 20;

[04:07] <camelia> rakudo-moar 1cf7ca: OUTPUT¬´110 113 112 109 111 113 107 113 111 117 109 110 107 109 113 116 116 112 109 112‚ê§¬ª

[04:08] <japhb> Or somewhat more verbosely:

[04:08] <japhb> m: multi infix:<d>(Int $n, Int $sides) { [+] (1..$sides).roll($n) }; say 3 d 6 + 100 xx 20;

[04:08] <camelia> rakudo-moar 1cf7ca: OUTPUT¬´113 111 113 111 108 111 106 110 110 106 105 110 113 114 109 110 116 110 110 112‚ê§¬ª

[04:08] <japhb> I just like how those turn out.  :-)

[04:11] *** chenryn joined
[04:12] *** lue joined
[04:16] *** Sqirrel joined
[04:16] *** iarna left
[04:17] *** anaeem1 joined
[04:20] *** [Sno] left
[04:22] *** BenGoldberg left
[04:22] *** xenoterracide joined
[04:25] *** sam_ joined
[04:26] *** noganex_ joined
[04:28] *** firnsy_ joined
[04:29] *** ldris joined
[04:30] *** perlpilot joined
[04:30] *** retupmoc1 joined
[04:30] *** broquain1 joined
[04:30] *** mathw_ joined
[04:30] *** huf_ joined
[04:30] *** Gothmog__ joined
[04:30] *** arnsholt_ joined
[04:31] *** zamolxes_ joined
[04:31] *** sivoais_ joined
[04:31] *** rhr joined
[04:31] *** xenoterracide left
[04:32] *** simcop2387 left
[04:32] *** simcop2387 joined
[04:33] *** tempire_ joined
[04:34] *** stux|RC joined
[04:35] *** mtj_- joined
[04:35] *** zakharyas joined
[04:35] *** noganex left
[04:35] *** egrep left
[04:35] *** Gothmog_ left
[04:35] *** erdic left
[04:35] *** sivoais left
[04:35] *** firnsy left
[04:35] *** ssutch left
[04:35] *** tempire left
[04:35] *** _sri left
[04:35] *** huf left
[04:35] *** PerlJam left
[04:35] *** muraiki left
[04:35] *** zamolxes left
[04:35] *** stux|RC-only left
[04:35] *** broquaint left
[04:35] *** arnsholt left
[04:35] *** mathw left
[04:35] *** ingy left
[04:35] *** betterworld left
[04:35] *** retupmoca left
[04:35] *** rhr_ left
[04:35] *** mtj left
[04:35] *** mtj_ left
[04:35] *** Gothmog__ is now known as Gothmog_

[04:35] *** mtj joined
[04:36] *** erdic joined
[04:36] *** betterworld joined
[04:40] *** rurban left
[04:41] *** iarna joined
[04:42] *** chenryn left
[04:42] *** ingy joined
[04:42] *** egrep joined
[04:42] *** muraiki joined
[04:48] *** ingy left
[04:48] *** ingy joined
[04:49] <tzictli> dwarring: thanks, I've been using Unix-like systems for several years, but I've never used the -t option until now, so that was informative; integrity down, still have authenticity to go

[04:49] <tzictli> xiaomiao: quite right

[04:51] *** firnsy_ is now known as firnsy

[04:53] *** ventica joined
[04:55] *** ventica2 joined
[04:55] *** xenoterracide joined
[04:56] <awwaiid> I'm going to a talk on the Julia programming language tomorrow at Polyglot-DC. Looks like there's a lot of feature overlap with perl6 :)

[04:56] <awwaiid> at least at my first glance

[04:57] <awwaiid> (as far as operator / multi-dispatch goes)

[04:58] *** ventica left
[05:01] *** zakharyas left
[05:02] *** chenryn joined
[05:08] *** fling left
[05:11] *** ldris left
[05:12] *** kaare_ joined
[05:15] *** xenoterracide left
[05:16] *** fling joined
[05:20] <xiaomiao> awwaiid: the big difference is that julia upstream is willing to do quick hacks to get results ;)

[05:21] *** brrt joined
[05:21] *** fling left
[05:27] *** iarna left
[05:27] *** fling joined
[05:40] *** chenryn left
[05:41] *** chenryn joined
[05:45] *** [Sno] joined
[05:53] *** zby_home_ joined
[05:53] *** zby_home_ left
[05:58] *** Alula_ left
[05:58] *** Alula_ joined
[06:00] *** gfldex joined
[06:07] *** denis_boyun joined
[06:10] *** dayangkun left
[06:14] *** dayangkun joined
[06:15] *** kaleem joined
[06:17] *** gfldex left
[06:23] *** aoseki joined
[06:24] *** akaseki left
[06:32] *** sqirrel_ joined
[06:59] <masak> good morning, #perl6

[07:01] *** Sqirrel left
[07:04] *** _sri joined
[07:09] *** Ven joined
[07:09] *** darutoko joined
[07:12] <moritz> \o masak, #perl6

[07:16] <Ven> o/, *

[07:16] *** PZt left
[07:16] *** kurahaupo joined
[07:21] <sergot> hi o/

[07:23] <brrt> \o

[07:29] *** virtualsue joined
[07:30] *** virtualsue_ joined
[07:31] *** dmol joined
[07:37] *** woolfy left
[07:46] *** sqirrel_ left
[07:47] *** chenryn left
[07:48] *** chenryn joined
[07:56] *** clkao left
[08:00] *** kivutar joined
[08:01] <timotimo> o/

[08:03] *** clkao joined
[08:14] *** brrt left
[08:16] *** virtualsue_ left
[08:17] *** virtualsue left
[08:17] *** dayangkun left
[08:28] *** virtualsue joined
[08:29] * masak re-discovers and is re-inspired by http://worrydream.com/LearnableProgramming/

[08:30] *** chenryn left
[08:30] <Ven> masak: Perl 6 lighttable !

[08:30] <Ven> desugars your code as you type it ( Õ°¬∞ Õú ñ Õ°¬∞)

[08:30] <masak> :)

[08:30] *** chenryn joined
[08:31] <masak> I haven't been paying attention to lighttable. should I?

[08:31] *** dayangkun joined
[08:32] <Ven> masak: I don't know, actually :D. Last time I looked at it, it was early 2013 (I think) and they had just removed everything cool

[08:32] <Ven> I think they put it back in now.

[08:35] *** chenryn left
[08:35] <masak> taking a brief look around on their main page tells me I should pay at least some attention.

[08:36] *** virtualsue left
[08:38] *** FROGGS[mobile] left
[08:39] *** chenryn joined
[08:39] *** FROGGS[mobile] joined
[08:40] *** klaas-janstol joined
[08:42] *** fhelmberger joined
[08:50] <Ven> julia's "multi-dispatch" reminds me of magpie

[08:51] <masak> what's magpie?

[08:52] <Ven> masak: magpie-lang.org

[08:53] <Ven> masak: http://magpie-lang.org/multimethods.html

[08:53] <lizmat> sightseeing&

[08:53] *** lizmat left
[08:59] *** brrt joined
[09:01] *** dakkar joined
[09:03] *** brrt left
[09:06] *** tzictli left
[09:14] *** zengargoyle left
[09:20] *** bjz joined
[09:21] *** zengargoyle joined
[09:22] *** brrt joined
[09:30] *** virtualsue joined
[09:31] *** spider-mario joined
[09:37] *** thou left
[09:38] *** slavik left
[09:41] *** Woodi left
[09:42] *** egrep left
[09:42] *** Woodi joined
[09:44] <dalek> rakudo/nom: dc9083f | (Rob Hoelz)++ | src/Perl6/Actions.nqp:

[09:44] <dalek> rakudo/nom: Fix broken DOC INIT blocks

[09:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dc9083fc16

[09:44] <dalek> rakudo/nom: 35d714b | moritz++ | src/Perl6/Actions.nqp:

[09:44] <dalek> rakudo/nom: Merge pull request #298 from hoelzro/nom

[09:44] <dalek> rakudo/nom: 

[09:44] <dalek> rakudo/nom: Fix broken DOC INIT blocks

[09:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/35d714bd88

[09:44] <moritz> hoelzro++

[09:44] *** FROGGS[mobile] left
[09:51] *** slavik joined
[09:54] *** mr-foobar left
[09:55] *** mr-foobar joined
[10:23] *** FROGGS[mobile] joined
[10:23] *** molaf joined
[10:29] *** rindolf left
[10:51] *** thou joined
[10:56] *** thou left
[10:59] *** brrt left
[11:03] *** FROGGS[mobile] left
[11:03] *** nbrown___ joined
[11:12] *** FROGGS[mobile] joined
[11:18] *** nbrown___ left
[11:26] *** chenryn left
[11:27] *** Ven is now known as Vendethiel-

[11:27] *** chenryn joined
[11:35] *** klaas-janstol left
[11:38] <timotimo> .o( can someone please fix ($)? )

[11:40] <hoelzro> morning #perl6

[11:41] <timotimo> hey hoelzro 

[11:41] <timotimo> Unsupported use of $  variable

[11:41] <timotimo> okay, now you're just fucking with me.

[11:42] <timotimo> m: sub test($) { }

[11:42] <camelia> rakudo-moar 35d714: ( no output )

[11:42] <hoelzro> moritz: thanks for the merge!

[11:42] *** xragnar is now known as Guest29691

[11:42] *** xragnar_ joined
[11:42] *** Guest29691 left
[11:42] *** xragnar_ is now known as xragnar

[11:42] <hoelzro> o/ timotimo 

[11:45] <psch> hi #perl6 

[11:45] <psch> timotimo: a bare ($) throws the error for me

[11:45] <psch> m: ($) 

[11:45] <camelia> rakudo-moar 35d714: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/HXW7_4aA8D‚ê§Unsupported use of $) variable; in Perl 6 please use $*EGID‚ê§at /tmp/HXW7_4aA8D:1‚ê§------> [32m([33m‚èè[31m$)[0m‚ê§    expecting any of:‚ê§        semicolon list‚ê§        prefix ‚Ä¶¬ª

[11:45] <psch> m: my $capt = \($)

[11:45] <camelia> rakudo-moar 35d714: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/0Vh6i17Cln‚ê§Unsupported use of $) variable; in Perl 6 please use $*EGID‚ê§at /tmp/0Vh6i17Cln:1‚ê§------> [32mmy $capt = \([33m‚èè[31m$)[0m‚ê§    expecting any of:‚ê§        prefix or term‚ê§   ‚Ä¶¬ª

[11:46] <psch> ^- that probably wants to work though

[11:46] <timotimo> m: class Foo; method bar { Proxy.new( FETCH => sub($) { 1 } ) };

[11:46] <camelia> rakudo-moar 35d714: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/1z7y2vd5zN‚ê§Unsupported use of $) variable; in Perl 6 please use $*EGID‚ê§at /tmp/1z7y2vd5zN:1‚ê§------> [32m method bar { Proxy.new( FETCH => sub($)[33m‚èè[31m { 1 } ) };[0m‚ê§¬ª

[11:46] <timotimo> m: sub ($) { }

[11:46] <camelia> rakudo-moar 35d714: ( no output )

[11:46] <timotimo> m: my &foo = sub ($) { }

[11:46] <camelia> rakudo-moar 35d714: ( no output )

[11:46] <timotimo> m: my &foo = YOINK => sub ($) { }

[11:46] <camelia> rakudo-moar 35d714: OUTPUT¬´Type check failed in assignment to '&foo'; expected 'Callable' but got 'Pair'‚ê§  in block  at /tmp/thDFapoNLs:1‚ê§‚ê§¬ª

[11:46] <timotimo> m: my $foo = YOINK => sub ($) { }

[11:46] <camelia> rakudo-moar 35d714: ( no output )

[11:46] <timotimo> m: my $foo = YOINK => sub ($) { 1 }

[11:46] <camelia> rakudo-moar 35d714: ( no output )

[11:46] <timotimo> the fuck?

[11:47] *** FROGGS[mobile] left
[11:47] <timotimo> m: my &foo = ( sub($) { 1 } );

[11:47] <camelia> rakudo-moar 35d714: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/NGYqWDNKeB‚ê§Unsupported use of $) variable; in Perl 6 please use $*EGID‚ê§at /tmp/NGYqWDNKeB:1‚ê§------> [32mmy &foo = ( sub($)[33m‚èè[31m { 1 } );[0m‚ê§¬ª

[11:47] <timotimo> i think that's weird.

[11:48] *** FROGGS[mobile] joined
[11:49] *** chenryn left
[11:49] *** chenryn joined
[11:50] <timotimo> oh, ufo may need a fix for the recent Foobar.pm.moarvm and friends change

[11:50] <masak> oh, ok.

[11:50] <jnthn> timotimo: You're forgetting the foo(...) is always a function call rule :)

[11:51] <masak> contributions on that front heartily accepted. I will merge them as soon as I see them.

[11:52] <timotimo> masak: now i wonder if i should put a version guard in there so that it only removes the .pm6? if the rakudo version is new enough?

[11:53] <timotimo> or if there's a clever way to detect that feature/behavior

[11:58] <masak> don't know. need more background info on that.

[12:00] <timotimo> mhm

[12:01] <timotimo> how should i model zmq_recv, which now takes a void* to a buffer that is supposed to be filled with data and a length for that buffer?

[12:01] <timotimo> (a NativeCall question)

[12:05] <jnthn> CArray

[12:06] <psch> m: class A { method list() { <a b c> }; method Str() { "foo" } }; my $a = A.new; say $a.join("|"); say @$a.join("|"); # this is the same as i'm seeing with my patch for nested match objects for :g.

[12:06] <camelia> rakudo-moar 35d714: OUTPUT¬´foo‚ê§a|b|c‚ê§¬ª

[12:06] <psch> i suppose that means that the tests assuming m:g// gets a list are wrong.

[12:06] <psch> s/gets/gives/ # still not over those typos, grrr

[12:07] <timotimo> it feels like i've not written anything but the simplest code in Perl6 for a loooong time

[12:14] <hoelzro> I've just discovered something intersting with World.add_constant with regards to its caching

[12:15] <hoelzro> one this is that the named parameters are made part of the key, but the names aren't sorted in advance

[12:15] <hoelzro> can one depend on hash traversal order being consistent from call to call?

[12:16] <moritz> only if the hash keys remain unchanged inbetween calls

[12:17] <hoelzro> moritz: so if I did $*W.add_constant(..., :foo, :bar) twice, there'd be no guaranteed that the generated key would be the same?

[12:18] <moritz> hoelzro: seems like

[12:19] <hoelzro> =/

[12:19] <hoelzro> well, that would at worst result in cache misses when there are none

[12:20] <hoelzro>  the other is more insidious: you could make a call like this: $*W.add_constant('Array', 'type_new', ~$object) and later like this: $*W.add_constant('Array', 'type_new', |@array_containing_object_from_before)

[12:20] <hoelzro> and the cache key for both would be identical, so the generated constant would result in ['ObjectStringified'] rather than [$object]

[12:20] <hoelzro> this just hit me with the S26 work

[12:21] <hoelzro> I think that the positional parameters' types should be made part of the key; does anyone object?

[12:21] <moritz> wait wait wait

[12:22] <moritz> why wouldn't the cache key identical?

[12:22] <moritz> you're dong the same thing twice, after all

[12:22] <hoelzro> but I'm not

[12:22] <hoelzro> $object isn't a Str

[12:22] <hoelzro> the first time, I'm stringifying it

[12:22] <hoelzro> so the cached constant is an Array with a single element, namely a St

[12:22] <hoelzro> *Str

[12:23] *** chenryn left
[12:23] <hoelzro> the second time, I'm not stringifying it, but the array's members are stringified to make the key

[12:23] <Vendethiel-> eh, vim and ruby don't work well together. braaaaceees, it screams, even.

[12:23] *** chenryn joined
[12:23] <hoelzro> so I put in an Array with a single object member, and I get back a constant that contains a single string

[12:23] <moritz> huh? perl uses braces too, no?

[12:24] <moritz> hoelzro: ok, I understand the problem know

[12:24] <moritz> hoelzro: but I don't know enough about add_constant usage to decide anything

[12:26] *** klaas-janstol joined
[12:26] <hoelzro> alright

[12:26] <hoelzro> I'll just leave it here for others' consideration, then =)

[12:31] *** kaare_ left
[12:34] *** chenryn left
[12:36] *** liztormato joined
[12:38] <liztormato> timotimo: You should be able to create a CompUnit object from a path. The .has-precomp method will then tell you whether there is a precompiled version available. 

[12:39] <liztormato> Please note that I haven't written any tests for CompUnit usage like that

[12:39] <timotimo> i ... don't really know how that will help me %)

[12:39] <timotimo> i'm trying to fix ufo up, which creates a makefile for your "project"

[12:40] *** thou joined
[12:40] <Vendethiel-> .u pen

[12:40] <yoleaux> U+20B0 GERMAN PENNY SIGN [Sc] (‚Ç∞)

[12:40] <yoleaux> U+23D9 METRICAL PENTASEME [So] (‚èô)

[12:40] <yoleaux> U+26E4 PENTAGRAM [So] (‚õ§)

[12:40] <Vendethiel-> erm...thanks?

[12:40] <masak> :D

[12:41] <masak> Vendethiel-: ‚úê

[12:41] <liztormato> Sightseeing continues&

[12:41] <masak> U+2710 UPPER RIGHT PENCIL

[12:41] *** liztormato left
[12:41] <Vendethiel-> masak: ‚úé I got this one. FIGHT

[12:41] <masak> heh.

[12:41] <Vendethiel-> I'd actually like it to be the other way, but meh.

[12:42] <timotimo> .u pencil

[12:42] <yoleaux> U+270E LOWER RIGHT PENCIL [So] (‚úé)

[12:42] <yoleaux> U+270F PENCIL [So] (‚úè)

[12:43] <tadzik> we need moar pencils

[12:43] <Vendethiel-> .u lower left pencil

[12:43] <yoleaux> No characters found

[12:43] *** FROGGS[mobile] left
[12:43] <Vendethiel-> y u do dis unicode.

[12:43] *** jnap joined
[12:44] <jnthn> hoelzro: add_constant's caching was designed to cope with a fairly small set of use cases

[12:44] *** thou left
[12:45] <masak> Vendethiel-: http://emojipedia.org/lower-left-pencil/

[12:45] <jnthn> hoelzro: The reliance on hash ordering is probably suboptimal in that, as you note, could easily cause misses. But it's only suboptimal rather than wrong...

[12:45] <Vendethiel-> Soon(TM).

[12:46] <hoelzro> ok, the hash keys thing doesn't bother me that much

[12:46] <hoelzro> jnthn: what about the positional arguments problem?

[12:48] <dalek> roast/S26-WHY: abfd5a2 | (Rob Hoelz)++ | S26-TODO.md:

[12:48] <dalek> roast/S26-WHY: Add more declarations to TODO

[12:48] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/abfd5a28b3

[12:48] <dalek> roast/S26-WHY: 92742b8 | (Rob Hoelz)++ | S26-TODO.md:

[12:48] <dalek> roast/S26-WHY: Get rid of known bugs

[12:48] <dalek> roast/S26-WHY: 

[12:48] <dalek> roast/S26-WHY: Because I fixed them!

[12:48] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/92742b87bd

[12:48] <dalek> roast/S26-WHY: 73d4888 | (Rob Hoelz)++ | S26-TODO.md:

[12:48] <jnthn> hoelzro: I'm rather surprised add_constant is being used for a reference type...

[12:48] <dalek> roast/S26-WHY: Make a fancy completion table for WHYs matching

[12:48] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/73d48886db

[12:48] <dalek> roast/S26-WHY: 9a6489e | (Rob Hoelz)++ | S26-TODO.md:

[12:48] <dalek> roast/S26-WHY: Check off what's been done so far

[12:48] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/9a6489e562

[12:48] <dalek> roast/S26-WHY: f9c0392 | (Rob Hoelz)++ | S26-TODO.md:

[12:48] <dalek> roast/S26-WHY: Remove bad decls from checklist

[12:48] <dalek> roast/S26-WHY: 

[12:48] <dalek> roast/S26-WHY: Either they weren't in the spec, they don't make sense, or they were

[12:48] <dalek> roast/S26-WHY: folded into another entry

[12:48] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/f9c03926f2

[12:48] <jnthn> hoelzro: I didn't design it for that.

[12:48] <jnthn> The Pod.nqp code using it dates, I think, to a time before we had proper serialization.

[12:49] <hoelzro> yeah, I'm not too clear why it's needed...I'm just adapting the code that was there before I started working on this

[12:50] *** rurban joined
[12:50] <jnthn> These days walking an object and add_constant'ing parts of it is kinda odd (though at the time there was likely no choice). Might as well just stick the entire data structure in the SC. so far as I can see

[12:50] <hoelzro> alright

[12:51] <jnthn> That avoids the issue. Not to mention saving building up a cache on something that's not really cacheable...

[12:51] <jnthn> Or not going to be getting re-used

[12:52] <hoelzro> should I just not trying caching it, then?

[12:52] <timotimo> i tried to bring the pod code up to date with the new serialization stuff, but failed at some point :(

[12:53] <jnthn> hoelzro: I'd say so

[12:53] <jnthn> hoelzro: I mean, the only way to get a cache hit would be identical Pod appearing in multiple places in a file

[12:53] <jnthn> #= This does something

[12:53] <jnthn> gah such doc fail :)

[12:54] *** Alula_ left
[12:54] <hoelzro> well, the way it's being used right now is that the $=pod object is being constructed at the end of the comp_unit

[12:54] <jnthn> oh

[12:54] <jnthn> So...it'll never get a cache hit 'cus the cache is scoped to a comp unit

[12:54] <hoelzro> but for each declarative comment, a constant is created for that one comment

[12:55] <hoelzro> so this problem I'm seeing is only triggering for files with a single declarative comment

[12:55] *** mls left
[12:55] <jnthn> Yeah, sounds like you don't want to be using the cache at all

[12:55] *** Alula_ joined
[12:56] <hoelzro> indeed

[12:56] <jnthn> For the strings maybe but certainly not for anything larger...

[12:56] <hoelzro> I'll just use :nocache for the $=pod creation call, then

[12:58] *** anaeem1 left
[12:58] <hoelzro> commute &

[12:58] *** Possum joined
[13:03] <timotimo> i wonder how much slower start-up becomes if this file does exist: /home/timo/perl6/moarvm/../install/languages/perl6/share/libraries.json

[13:08] *** mls joined
[13:18] *** Alina-malina left
[13:25] *** Alina-malina joined
[13:25] *** Alina-malina left
[13:25] *** Alina-malina joined
[13:26] *** prevost joined
[13:35] *** guru joined
[13:35] *** guru is now known as Guest81979

[13:35] *** Guest81979 is now known as ajr_

[13:37] *** perlpilot is now known as PerlJam

[13:40] *** kaare_ joined
[13:41] *** klaas-janstol left
[13:42] *** iarna joined
[13:42] *** Vendethiel- left
[13:44] *** robinsmidsrod left
[13:46] *** robinsmidsrod joined
[13:46] *** iarna left
[13:47] *** iarna joined
[13:57] *** colomon left
[14:02] *** kaleem left
[14:03] *** [Sno] left
[14:08] *** Ven joined
[14:08] <Ven> m: say dir.grep(*.d).map({ $_.Str => dir($_)>>.Str })

[14:08] <camelia> rakudo-moar 35d714: OUTPUT¬´"star-2014.04" => $("star-2014.04/camelia.sqlite3", "star-2014.04/version", "star-2014.04/src", "star-2014.04/bin", "star-2014.04/man", "star-2014.04/languages", "star-2014.04/include", "star-2014.04/share", "star-2014.04/lib") "star-2014.03" => $("star-20‚Ä¶¬ª

[14:08] <Ven> m: say dir.grep(*.d).map({ .Str => dir($_)>>.Str }) # why doesn't that work ??

[14:08] <camelia> rakudo-moar 35d714: OUTPUT¬´"star-2014.04" => $("star-2014.04/camelia.sqlite3", "star-2014.04/version", "star-2014.04/src", "star-2014.04/bin", "star-2014.04/man", "star-2014.04/languages", "star-2014.04/include", "star-2014.04/share", "star-2014.04/lib") "star-2014.03" => $("star-20‚Ä¶¬ª

[14:08] <Ven> uh-oh, that doesn't work here.

[14:09] <Ven> actually, it does now. Well, it was changing my error message earlier. uh.

[14:13] *** chenryn joined
[14:13] *** rurban left
[14:14] <Ven> I wonder if I can use X=>, but probably not, since the RHS doesn't autothunk with $_.

[14:21] <moritz> m: say  <a b c> X=> 1, 2

[14:21] <camelia> rakudo-moar 35d714: OUTPUT¬´"a" => 1 "a" => 2 "b" => 1 "b" => 2 "c" => 1 "c" => 2‚ê§¬ª

[14:23] <Ven> moritz: yes, but I need $_ in the RHS

[14:24] <moritz> then X isn't the right tool

[14:24] <moritz> as you have noted already

[14:24] *** dakkar left
[14:24] <Ven> which is why I use .map

[14:26] *** kaleem joined
[14:26] <moritz> aye

[14:26] *** iarna left
[14:28] *** rurban joined
[14:28] *** thou joined
[14:28] <hoelzro> timotimo: regarding bringing the POD code up to speed on the SC stuff, what would that involve?

[14:28] <Ven> Hash[Dir['*'].map {|x| [x, Dir["#{x}/*"]]}] <- ruby version. I despise Hash#[].

[14:28] *** anaeem1 joined
[14:31] *** anaeem1 left
[14:32] *** anaeem1_ joined
[14:33] *** thou left
[14:33] *** robinsmidsrod left
[14:34] *** iarna joined
[14:35] *** robinsmidsrod joined
[14:36] *** zakharyas joined
[14:45] *** thou joined
[14:50] *** iarna left
[14:57] <hoelzro> would someone mind marking https://rt.perl.org/Ticket/Display.html?id=122056 as resolved?  it got fixed in my PR from yesterday

[14:59] <nwc10> done.

[14:59] <nwc10> seems that I have privs to do that queue

[15:00] <nwc10> um, did you actually want me to add a comment as to why?

[15:00] <PerlJam> A comment that links to the commit that fixes it might be nice :)

[15:00] <hoelzro> I guess you could point out the commit that fixed it?

[15:01] <nwc10> yes, but I don't know that

[15:01] <nwc10> I'm just the minion here

[15:05] * hoelzro looks for the commit

[15:05] <PerlJam> hoelzro: why does perl6 --doc -e'DOC INIT {}' output a newline?  I would have expected it to output nothing.

[15:05] <hoelzro> dc9083f

[15:06] <hoelzro> PerlJam: that's a...good question

[15:06] <hoelzro> I don't know; I only made sure it didn't crash =)

[15:07] *** zakharyas left
[15:07] *** brrt joined
[15:09] <PerlJam> Hmm.  probably because the default DOC INIT phase calls &say with $pod2text (which is empty)

[15:09] <hoelzro> that makes sense

[15:10] * PerlJam tests a change

[15:11] *** prevost left
[15:11] <PerlJam> rakudo compiles faster now, but it still seems to take forever when you're waiting on it  :)

[15:12] *** dayangkun left
[15:14] <jnthn> On my box we're not too far off Rakudo builds taking around a minute...

[15:14] <jnthn> (For the whole thing, not just CORE.setting, which is now under 45s here)

[15:16] <jnthn> But yes, faster would be nice :)

[15:21] *** denis_boyun left
[15:22] <PerlJam> for me the CORE.setting is taking about 80s 

[15:22] <PerlJam> (circa 2009 hardware)

[15:23] *** sqirrel_ joined
[15:23] *** telex left
[15:24] *** prevost joined
[15:24] *** telex joined
[15:25] *** aoseki left
[15:25] *** dayangkun joined
[15:27] *** klaas-janstol joined
[15:28] *** anaeem1_ left
[15:30] <[Coke]> push

[15:30] <dalek> rakudo/nom: 0de574f | duff++ | src/Perl6/Actions.nqp:

[15:30] <dalek> rakudo/nom: make DOC INIT phaser only call &say when there's something to output

[15:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0de574f8b7

[15:30] <[Coke]> ww!

[15:30] <dalek> rakudo-star-daily: 437f3ed | coke++ | log/ (14 files):

[15:30] <dalek> rakudo-star-daily: today (automated commit)

[15:30] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/437f3edf6b

[15:30] <dalek> perl6-roast-data: 724c809 | coke++ | / (5 files):

[15:30] <dalek> perl6-roast-data: today (automated commit)

[15:30] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/724c80991c

[15:31] <PerlJam> Coke: If you have to type "push" in another window, is it *really* and automated commit?  ;)

[15:31] *** iarna joined
[15:31] <PerlJam> s/and/an/

[15:34] <moritz> PerlJam: commit != push

[15:35] <PerlJam> sure, but don't ruin my inference from a highly coincidental juxtaposition  :)

[15:35] *** ajr_ left
[15:35] <moritz> PerlJam: you're in #git too, I expect some amount of precision from you! :-)

[15:36] <moritz> anyway, afk

[15:36] *** guru joined
[15:37] *** guru is now known as ajr_

[15:38] *** Ven left
[15:39] *** klaas-janstol left
[15:40] *** klaas-janstol joined
[15:42] *** robinsmidsrod left
[15:43] <timotimo> hoelzro: that would entail among other things not having any add_constant calls any more

[15:45] *** robinsmidsrod joined
[15:45] *** brrt left
[15:45] <hoelzro> timotimo: I see; so what would the code taking its place look like?

[15:45] <hoelzro> I've been ignorant of this SC stuff

[15:46] <hoelzro> the S26 stuff has been a good tour of the compiler, but not that =)

[15:46] <timotimo> ideally, it would just be creating List objects and putting stuff in them and boxing Str objects and such

[15:46] *** huf_ is now known as huf

[15:48] *** kaleem left
[15:50] *** dwarring left
[15:51] <psch> https://github.com/rakudo/rakudo/pull/295 fairly confident this is now to spec :)

[15:51] <dalek> tablets: 5b0497a | (Herbert Breunung)++ | docs/appendix-a-index.txt:

[15:51] <dalek> tablets: stub for make, remove 2 typos

[15:51] <dalek> tablets: review: https://github.com/perl6/tablets/commit/5b0497a3df

[15:52] <psch> should i push the roast branch to perl6/roast and link it from the comments? i'm a bit scared it'd be a messy thing to do...

[15:52] <psch> but then i should probably at least push it to my fork of roast, and i was told i got a commit bit to roast so that i don't have to PR for it all the time

[15:53] <dalek> roast/matching_quote_ops: e9f732d | (Pepe Schwarz)++ | S05-substitution/subst.t:

[15:53] <dalek> roast/matching_quote_ops: Correct some tests for s///.

[15:53] <dalek> roast/matching_quote_ops: review: https://github.com/perl6/roast/commit/e9f732df6c

[15:53] <dalek> roast/matching_quote_ops: 52a08c3 | (Pepe Schwarz)++ | S05-modifier/overlapping.t:

[15:53] <dalek> roast/matching_quote_ops: Remove P5ism, call .from instead of .to for Match position.

[15:53] <dalek> roast/matching_quote_ops: review: https://github.com/perl6/roast/commit/52a08c3e5e

[15:53] <dalek> roast/matching_quote_ops: b019f3b | (Pepe Schwarz)++ | S05-modifier/ (2 files):

[15:53] <dalek> roast/matching_quote_ops: More of tests to fall in line with my rt82108 branch.

[15:53] <dalek> roast/matching_quote_ops: review: https://github.com/perl6/roast/commit/b019f3ba74

[15:53] <dalek> roast/matching_quote_ops: 4253e72 | (Pepe Schwarz)++ | S05-modifier/overlapping.t:

[15:53] <dalek> roast/matching_quote_ops: Correct overlapping tests.

[15:53] <dalek> roast/matching_quote_ops: review: https://github.com/perl6/roast/commit/4253e72870

[15:53] <dalek> roast/matching_quote_ops: 500a45e | (Pepe Schwarz)++ | integration/advent2012-day22.t:

[15:53] <dalek> roast/matching_quote_ops: Add a working version of RT#121789.

[15:53] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121789

[15:53] <dalek> roast/matching_quote_ops: 

[15:53] <dalek> roast/matching_quote_ops: Arguably, fixing the test doesn't fix the ticket, but my

[15:53] <dalek> roast/matching_quote_ops: understanding of what the snippet is supposed to do is

[15:53] <dalek> roast/matching_quote_ops: getting the matched integers, which a raw .list call would not.

[15:53] <dalek> roast/matching_quote_ops: Calling .list on a $/ obtained from :g should list the submatches

[15:53] <dalek> roast/matching_quote_ops: for each repetition of the match, and not the captures, similarly

[15:53] <dalek> roast/matching_quote_ops: to how calling .list on a 'normal' $/ gives the matches and not

[15:53] <dalek> roast/matching_quote_ops: their captures.

[15:53] <dalek> roast/matching_quote_ops: review: https://github.com/perl6/roast/commit/500a45e718

[15:53] <hoelzro> psch: you can always push to your fork, and then push to perl6/roast later

[15:53] <psch> th-thanks, dalek

[15:53] *** FROGGS_ is now known as FROGGS

[15:53] <psch> hoelzro: too late! :)

[15:53] <hoelzro> oh well =)

[15:53] <FROGGS> o/

[15:54] <hoelzro> branches are ok too

[15:54] <hoelzro> o/ FROGGS 

[15:54] <psch> FROGGS \o

[15:54] <FROGGS> I like branches... because I usually do not see commits of forks...

[15:55] <timotimo> psch++ :)

[15:55] <hoelzro> yeah, that's a good point

[15:55] * PerlJam just realized his recent commit will generate no output for embedded pod that consists of a single 0

[15:55] <FROGGS> which means that collab is much easier that way

[15:55] <psch> FROGGS: so you're in favor of me applying for a commit bit for rakudo? ;)

[15:55] <FROGGS> psch: ohh yes

[15:55] <FROGGS> but send your CLA first :o)

[15:55] <hoelzro> who ends up approving those, btw? pmichaud, right?

[15:55] <hoelzro> I applied for one something like 6 months ago =/

[15:55] *** chenryn left
[15:55] <PerlJam> approving the CLA?

[15:56] <PerlJam> That's a TPF thing, not a pmichaud thing.

[15:56] <FROGGS> hoelzro: no, more like jnthn and moritz and masak... ppl who know of the to-be-contributor

[15:56] <hoelzro> ah ha

[15:56] *** chenryn joined
[15:56] <hoelzro> I got the CLA in

[15:56] * PerlJam sometimes wishes he could think faster  

[15:56] <hoelzro> I just needed approval from someone else, iirc

[15:57] <FROGGS> that is what I was talking about, aye

[15:57] <psch> a great side effect of my fixing of m:g// is that m:ov// works as well, for free 

[15:57] *** dayangkun left
[15:57] *** chenryn left
[15:57] *** chenryn_ joined
[15:57] * PerlJam approves of hoelzro  ;)

[15:57] <psch> i *think* :ex should work too, but i didn't see any notable tests in roast that deal with it, so maybe it already did

[15:57] <hoelzro> well, if any of those fine gentlemen would like to add me to the rakudo org, I would appreciate it =)

[15:57] <hoelzro> thanks!

[15:58] <psch> where "notable" in this case means "failing or passing TODOs"

[15:59] <FROGGS> [Coke]: you were in a position to check if a CLA was received? like the CLA of hoelzro?

[16:02] <PerlJam> btw, is Coke our only source of CLA receipt information?  (he's the only one I know to ask)  Who else would know?

[16:02] *** chenryn_ left
[16:03] <FROGGS> PerlJam: pmichaud most likely

[16:03] *** fhelmberger left
[16:03] *** chenryn_ joined
[16:03] <FROGGS> PerlJam: do you mean that Coke++ could gain some money from telling us that a CLA was received? :D

[16:04] *** sqirrel_ left
[16:05] <PerlJam> So ... I can give hoelzro access to the rakudo repo right now if no one objects. (I don't know a thing about his CLA though)

[16:06] <hoelzro> it's not critical =)

[16:06] *** chenryn__ joined
[16:06] <PerlJam> sure, but I'm a strike-while-the-iron-is-hot kind of guy.

[16:06] <FROGGS> I'd wait at least for jnthn's opinion :o)

[16:07] <timotimo> so, zmq_msg_data used to be bound like this: # ZMQ_EXPORT void *zmq_msg_data (zmq_msg_t *msg);

[16:07] <timotimo> my sub zmq_msg_data(Net::ZMQ::Message --> Str) is native('libzmq') { * }

[16:07] *** chenryn_ left
[16:07] <timotimo> and i get "invalid utf8 at line 1 col 3", i'm expecting to receive "foo" ... could this be the \0 that's used to terminate the string?

[16:08] *** dmol left
[16:10] *** chenryn__ left
[16:11] *** chenryn__ joined
[16:12] <[Coke]> Yes, we have Hoelz's CLA.

[16:12] <hoelzro> \o/

[16:13] * PerlJam sends hoelzro an invitation

[16:13] <PerlJam> [Coke]: who else knows about CLAs?

[16:13] <timotimo> m: say "hey".encode('utf8').WHAT

[16:13] <hoelzro> hooray

[16:13] <camelia> rakudo-moar 35d714: OUTPUT¬´(utf8)‚ê§¬ª

[16:14] <timotimo> m: say "hey".encode('utf8').^mro

[16:14] <hoelzro> thanks [Coke], PerlJam 

[16:14] <camelia> rakudo-moar 35d714: OUTPUT¬´(utf8) (Any) (Mu)‚ê§¬ª

[16:14] <timotimo> hm.

[16:14] <PerlJam> [Coke]: or, more to the point, how can one of us know without necessarily bothering you?

[16:14] <[Coke]> PerlJam: here on irc? no one I've seen talk in months and months.

[16:14] <timotimo> #      got: 'p9L'

[16:14] <timotimo> # expected: 'foo'

[16:14] <timotimo> so close! :)

[16:15] <timotimo> #      got: 'qu'

[16:15] <timotimo> # expected: 'quux'

[16:15] <timotimo> (but no cigar)

[16:15] <[Coke]> Perljam: you seem trustworthy; what's your preferred gdocs email?

[16:15] <timotimo> (unfortunately the exploded character didn't get copypasted)

[16:15] <PerlJam> [Coke]: [email@hidden.address]
[16:15] *** chenryn__ left
[16:15] *** robinsmidsrod left
[16:16] *** robinsmidsrod joined
[16:16] <[Coke]> alsowik: timo is on the list.

[16:17] <[Coke]> alsoalsowik: a niemeyer?

[16:17] <timotimo> huh?

[16:18] <[Coke]> there is a recent timo on the CLA list.

[16:18] *** gfldex joined
[16:20] *** chenryn__ joined
[16:26] <timotimo> yeah, i got a cla a year ago or so

[16:36] *** chenryn__ left
[16:41] *** dmol joined
[16:41] *** denis_boyun joined
[16:45] *** Alina-malina left
[16:45] *** ajr_ left
[16:46] *** guru joined
[16:46] *** guru is now known as Guest42379

[16:47] *** Guest42379 is now known as ajr_

[16:47] *** anaeem1 joined
[16:50] *** zamolxes_ left
[16:56] *** anaeem1 left
[17:03] *** denis_boyun___ joined
[17:04] *** denis_boyun left
[17:09] *** akaseki joined
[17:13] *** Alina-malina joined
[17:21] *** Rotwang joined
[17:25] *** virtualsue left
[17:27] <[Coke]> timotimo: there are no dates in the file. :)

[17:28] *** rurban left
[17:35] *** ajr_ left
[17:38] *** klaas-janstol left
[17:46] *** anaeem1 joined
[17:47] *** kurahaupo left
[17:47] *** colomon joined
[17:51] <timotimo> [Coke]: maybe there are dates in the meta-file? :)

[17:52] *** ivanshmakov left
[17:54] <timotimo> i'm gone for 1.5 hours and no commits happen? :<

[17:54] <timotimo> except for one, that is

[17:55] *** cooper- left
[17:55] *** ivanshmakov joined
[17:56] *** zengargo1le joined
[17:59] *** zengargoyle left
[18:05] <FROGGS> jnthn: btw, about my NFA problem... perl6-j is also okay

[18:07] <jnthn> FROGGS: Interesting...

[18:07] <jnthn> FROGGS: And it's in the construction of the NFA ratehr than the evaluation of it?

[18:08] *** muraiki left
[18:09] <FROGGS> jnthn: it is the construction, because the NFA.__dump already is wrong (before running nfarunproto, but perhaps after running nfafromstatelist)

[18:09] <FROGGS> I guess, I should dump it before running nfafromstatelist also

[18:13] *** muraiki joined
[18:14] *** klaas-janstol joined
[18:22] <FROGGS> jnthn: also before running nfafromstatelist it is wrong

[18:26] <FROGGS> m: grammar G { token TOP { <a> }; proto token a {*}; token a:sym<foo> { <b> }; token a:sym<indirect> { \w+ }; proto token b {*}; token b:sym<foo> { <sym> } }; say(G.parse("foo"))

[18:26] <camelia> rakudo-moar 0de574: OUTPUT¬´ÔΩ¢fooÔΩ£‚ê§ a => ÔΩ¢fooÔΩ£‚ê§‚ê§¬ª

[18:26] *** klaas-janstol left
[18:26] <FROGGS> jnthn: when we hit that <b> here, does that result in a mergesubrule?

[18:27] *** klaas-janstol joined
[18:27] <jnthn> I don't think we do any of the actual merging until we create the protoregex or alternation NFA

[18:27] <jnthn> Until then, subrules remain "virtual"

[18:27] <FROGGS> ahh, okay

[18:28] <jnthn> So it should be a subrule "b" or so in there

[18:28] *** cognome left
[18:28] *** cognome joined
[18:28] *** klaas-janstol left
[18:28] <jnthn> (In the NFA attached to the regex itself)

[18:29] <FROGGS> adding a:sym<foo>

[18:29] <FROGGS> adding b

[18:29] <FROGGS> adding b:sym<foo>

[18:29] <FROGGS> adding a:sym<indirect>

[18:29] <FROGGS> adding b:sym<foo>

[18:29] <FROGGS> nice

[18:29] <FROGGS> that's from nqp-m

[18:30] *** rurban joined
[18:30] <FROGGS> m: grammar G { token TOP { <a> }; proto token a {*}; token a:sym<foo> { <b> }; token a:sym<indirect> { \w+ }; proto token b {*}; token b:sym<foo> { <sym> } }; say(G.parse("foo").NFA)

[18:30] <camelia> rakudo-moar 0de574: OUTPUT¬´No such method 'NFA' for invocant of type 'Match'‚ê§  in block  at /tmp/fWXxNaZLij:1‚ê§‚ê§¬ª

[18:30] *** molaf_ joined
[18:30] <FROGGS> ahh, yes

[18:30] <timotimo> the "fetching panda" phase of rebootstrap does a whole bunch of minor collections that all end with less than 1% of nursery space used afterwards

[18:31] <timotimo> all except one of those have <0.25% used afterwards

[18:33] *** molaf left
[18:34] <jnthn> .oO( eats, shoots and gcs )

[18:35] <FROGGS> adding a:sym<foo>

[18:35] <FROGGS> adding b

[18:35] <FROGGS> adding a:sym<indirect>

[18:35] <FROGGS> that's perl6-m

[18:37] *** anaeem1 left
[18:39] *** [Sno] joined
[18:39] *** jdv79 left
[18:41] *** kurahaupo joined
[18:41] *** pyrimidine joined
[18:43] *** noganex joined
[18:46] *** noganex_ left
[18:47] <timotimo> zmq is quite magical ... it's kinda hard to figure out if a connection is going to work or not >_>

[18:50] <jercos> sufficiently advanced technology is difficult to debug without a wizard?

[18:51] *** prevost left
[18:51] *** ivanshmakov left
[18:54] *** ivanshmakov joined
[18:55] <timotimo> oh ... NativeCall doesn't know about Blob yet, eh?

[18:57] <jnthn> 'fraid not

[18:57] <timotimo> oi jnthn, how do i actually create a CArray with starting values? or how do i give it a starting size?

[18:57] <PerlJam> .oO( Blob Hlope? )

[18:57] <jnthn> We can likely teach it.

[18:57] <jnthn> timotimo: CArrays you create are managed

[18:57] <jnthn> timotimo: So you can just put stuff in them and they'll resize.

[18:57] <timotimo> oh

[18:58] <jnthn> Ones you get back from C land, it's up to you to boudns check

[18:58] <timotimo> so what's the best way to get from Str via utf8 to CArray[uint8]?

[18:58] <timotimo> (should i actually make that uint8?)

[18:58] <jnthn> For now, copy it into a Blob...

[18:58] *** ventica2 left
[18:59] <timotimo> and then? $mycarray.push $_ for @$my_blob?

[18:59] <timotimo> i guess i can push a list

[19:00] *** anaeem1_ joined
[19:01] <timotimo> m: say "h√∂h√∂h√∂".encode("utf8").list.perl

[19:01] <camelia> rakudo-moar 0de574: OUTPUT¬´Array.new(104, 195, 182, 104, 195, 182, 104, 195, 182)‚ê§¬ª

[19:01] <timotimo> m: say @("h√∂h√∂h√∂".encode("utf8")).perl

[19:01] <camelia> rakudo-moar 0de574: OUTPUT¬´Array.new(104, 195, 182, 104, 195, 182, 104, 195, 182)‚ê§¬ª

[19:02] <jnthn> Something like that

[19:03] <timotimo> i can't push into a CArray it seems

[19:03] <masak> m: say "h√∂h√∂h√∂".encode("utf8").perl

[19:03] <camelia> rakudo-moar 0de574: OUTPUT¬´utf8.new(104, 195, 182, 104, 195, 182, 104, 195, 182)‚ê§¬ª

[19:04] <timotimo> star: use NativeCall; my CArray[int8] $foo .= new; $foo.push: 1;

[19:04] <camelia> star-m 2014.04: OUTPUT¬´Cannot call 'push'; none of these signatures match:‚ê§:(Any:U \SELF: *@values, *%_)‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[19:04] <camelia> ..star-p 2014.04: OUTPUT¬´Cannot call 'push'; none of these signatures match:‚ê§:(Any:U \SELF: *@values, *%_)‚ê§  in any  at gen/parrot/BOOTSTRAP.nqp:1219‚ê§  in method push at gen/parrot/CORE.setting:1616‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[19:04] <timotimo> ... wait what? Any:U?

[19:05] <timotimo> what was :u for again?

[19:05] <jnthn> That's the auto-vivifying one inherited from Any

[19:05] <timotimo> ah

[19:05] <jnthn> :U = undefiend = type object

[19:05] <timotimo> am i supposed to [$idx] = $val?

[19:05] <jnthn> Think so

[19:06] <timotimo> i think i want to implement push for CArray.

[19:06] *** thou left
[19:09] *** denis_boyun___ left
[19:09] *** brrt joined
[19:10] <timotimo> zeeeeeerooooooooomq! >:(

[19:11] <masak> doesn't quite have that ring to it, I'm afraid.

[19:18] *** thou joined
[19:23] *** retupmoc1 is now known as retupmoca

[19:26] <timotimo> jnthn: CArray has the implementation of .elems from Any ... when i asked my CArray for how many elems it has, it says "one."

[19:26] <timotimo> that's why only "h" and not "hello there!" arrives at the other end

[19:26] <timotimo> before that, nothing arrived at the other end because i was passing the $flags where the $buflen was expected and the flags happened to be 0

[19:27] <timotimo> we need a size_t in perl6 m)

[19:30] *** darutoko left
[19:34] <nwc10> is t/spec/S26-documentation/10-doc-cli.rakudo.moar making unwarranted assumptions about the current directory, and hence failing as spectest?

[19:34] <nwc10> it's passing when run stand alone

[19:41] <[Coke]> ooh, git fun: 1. make a lot of local changes. 2. realize you have to discard one of them. 3. type git checkout /path/to/ and hit tab for completion. 4. hit enter. 5. cry

[19:41] <hoelzro> =(

[19:42] <hoelzro> that reminds me of a git "extension" I wanted to write called git-safety-net

[19:42] <hoelzro> everytime you tried to do a git clean/reset/checkout/other-destructive-operation, it would create a ref of your current tree

[19:42] *** dwarring joined
[19:44] <PerlJam> hoelzro: you mean like the reflog?

[19:45] <timotimo> .o( ACID reflog symptom? )

[19:45] <PerlJam> The only really destructive thing is when you "git reset --hard" but have unstaged changes.

[19:45] <hoelzro> PerlJam: kinda, but on non-committed things

[19:45] <hoelzro> exactly

[19:45] <[Coke]> right, these were uncommitted changes.

[19:46] <hoelzro> it shouldn't be too hard to write; such set up aliases in gitconfig and provide a command to checkout that ref

[19:46] <PerlJam> maybe that's a good use of the stash?  :)

[19:46] <hoelzro> heh

[19:47] <hoelzro> I have a love-hate relationship with the stash

[19:47] *** anaeem1_ left
[19:47] <hoelzro> I think instead of being a stack, it would be a one-ref type deal

[19:47] <hoelzro> usually, you know if you need that safety net shortly after you've jumped =)

[19:48] *** anaeem1_ joined
[19:49] *** guru joined
[19:50] *** guru is now known as ajr_

[19:54] <timotimo> apparently having zmq_msg_data return Str is wrong, as it seems to have a bogus byte at the end of the string ...

[19:54] <timotimo> possibly that bogus 0x4 is followed by a 0x0 and that'd be why it terminates there ...

[19:55] <dalek> rakudo/nom: c577c87 | TimToady++ | src/core/List.pm:

[19:55] <dalek> rakudo/nom: speed up large pushes by using splice

[19:55] <dalek> rakudo/nom: 

[19:55] <dalek> rakudo/nom: push is defined to be eager, so there's no point in nibbling the list lazily.

[19:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c577c8779c

[19:56] <masak> ooh

[19:56] <timotimo> that's a cute one

[19:56] <masak> TimToady++

[20:02] *** dalek left
[20:03] *** dalek joined
[20:03] *** ChanServ sets mode: +v dalek

[20:05] <timotimo> jnthn: how should i handle a buffer + length that i get returned from a library function?

[20:06] <timotimo> actually ... maybe i want to put a terminating null byte on the sending side?

[20:06] <dalek> nqp: bc60762 | jnthn++ | tools/build/MOAR_REVISION:

[20:06] <dalek> nqp: Bump MOAR_REVISION for new extop flags.

[20:06] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bc6076268d

[20:07] <jnthn> timotimo: Does the library allocate the buffer too?

[20:08] <dalek> rakudo/nom: 6117d54 | jnthn++ | / (2 files):

[20:08] <dalek> rakudo/nom: Add new extop flags. Bump NQP_REVISION to get 'em.

[20:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6117d544f1

[20:09] <timotimo> jnthn: it does, aye

[20:19] *** Rotwang left
[20:19] *** beastd joined
[20:20] <timotimo> why do i get "cannot unbox type object" from this code that clearly doesn't try to put a type object into the pos NOR the assignee slot for this postcircumfix:<[ ]>

[20:21] <dalek> roast: 616587c | (David Warring [email@hidden.address] | / (2 files):

[20:21] <dalek> roast: unfudge for resolved RT #122056 hoelzro++

[20:21] <dalek> roast: review: https://github.com/perl6/roast/commit/616587cfff

[20:21] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122056

[20:22] <hoelzro> is there integration set up between GH and RT?

[20:23] <dwarring> would be nice

[20:23] <PerlJam> what sort of "integration"?

[20:24] <dwarring> btw S26-documentation/10-doc-cli.t passed for me on a m-spectest

[20:25] <hoelzro> PerlJam: like if a commit sent to GH contained the text "fixed RT #XXXXXX", RT would close that ticket

[20:27] <PerlJam> I dunno if I'd want such a thing.   What happens when someone commits a fix, but not the tests?  Surely the RT ticket should stay open until both conditions are met.

[20:27] <hoelzro> interestingly enough, there's no existing RT webhook

[20:28] <hoelzro> I think that's up to the project guidelines

[20:28] <hoelzro> ex.  I could just commit nothing and mark a ticket as closed

[20:28] *** jnap left
[20:28] <hoelzro> so it's the developers' responsibility to only close the ticket from GH once both tests and fix are present

[20:29] <hoelzro> another thing that I thought would be nice is if open tickets in RT that have a Perl 6 file attachment would run those files regularly to see if the issue has miraculously been fixed

[20:29] <hoelzro> granted, that's a huge security hole, but...

[20:30] *** jnap joined
[20:30] <hoelzro> even if RT added a comment pointing to the resolving commit on GH would integration be nice

[20:30] <PerlJam> hoelzro: sure it's the developers responsibility ... but does everybody know these rules?  The way it is now, GH and RT are processed separately so we get independant checks on bug fixes and things.

[20:30] <hoelzro> that way RT users would get an e-mail and be able to cureate it

[20:31] <hoelzro> *curate

[20:31] *** denis_boyun_ joined
[20:31] <timotimo> we already want to have a piece of test code in roast for every bug filed :)

[20:31] <hoelzro> I suppose that's true

[20:31] <PerlJam> hoelzro: that particular feature I could get behind :)

[20:32] <hoelzro> if there's a test in roast or t/integration, it's normally marked skip/todo if it's broken, right?

[20:32] *** kaare_ left
[20:33] <hoelzro> it might be nice if make test/make spectest detected tests associated with open RT tickets, and let you know if they're passing all of a sudden

[20:36] <moritz> we have that already

[20:36] <moritz> make spectest tells you about passing TODOs

[20:37] <moritz> and usually we put the ticket number in the todo message

[20:38] <hoelzro> ah, cool

[20:39] <PerlJam> But a webhook on GH that auto-commented to any tickets mentioned in the log message would be nice.

[20:40] <PerlJam> that way you can do things like "fixed RT #123123" and also "added tests for RT #123123" and both commits would show up in RT

[20:40] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123123

[20:42] <PerlJam> blah!

[20:42] <PerlJam> stupid RT + stupid human.   Somehow I deleted ticket 122056.  Anyone happen to know how to undo that?

[20:43] <PerlJam> ah, never mind.   It seems I accidentally clicked on the "spam" marker for that ticket.

[20:46] <moritz> PerlJam: there used to be a script that sent mails from roast commits to tickets

[20:46] <moritz> and I think I even wrote it

[20:46] <moritz> and Kyle ran it for a while

[20:47] <moritz> dunno where the code is; maybe in the mu repo somewhere

[20:50] <PerlJam> test-reporter.pl ?

[20:53] <moritz> might be

[20:54] <moritz> yes, looks right

[20:54] <moritz> and I misremembered, it seems I wasn't involved at all :-)

[20:54] <masak> 'night, #perl6

[20:55] <PerlJam> maybe intellectually since you remembered it at all :)

[20:55] <hoelzro> o/ masak 

[20:55] <PerlJam> good night masak!  sleep well.

[20:55] <PerlJam> (or whatever you really do at night ;)

[20:56] <PerlJam> hmm.  I guess I'm not admin on github.com/perl6

[20:58] <moritz> PerlJam: do you need some changes there? or a new repo?

[20:58] *** kivutar left
[20:59] <flussence> re: http://irclog.perlgeek.de/perl6/2014-08-07#i_9146840 - there's a good point... does anyone habitually gpg-sign their git commits or at least tags? I've started doing it on my own code...

[20:59] <PerlJam> moritz: nah, I was just thinking about making a webhook for perl6/roast 

[21:01] <moritz> PerlJam: well, I can do that for you

[21:02] <PerlJam> no worries.   I think I need to let the idea gel in my head a little more first.  (consider the downsides, figure out where to actually run the thing, etc.)

[21:07] <cognome> On a fresh rakudo on mac : Stage parse      : moar(96372,0x7fff70ccc310) malloc: *** error for object 0x7fd11014c1f0: pointer being freed was not allocated

[21:07] <cognome> ... with moar

[21:08] <TimToady> report on #moarvm, perhaps?

[21:08] <cognome> yup

[21:11] *** molaf_ left
[21:12] *** denis_boyun_ left
[21:13] *** gfldex left
[21:15] <hoelzro> I always sign my tags

[21:15] <hoelzro> but not my commits

[21:25] *** tempire_ left
[21:41] *** anaeem1_ left
[21:51] *** xragnar left
[21:52] *** xragnar joined
[21:56] <timotimo> maybe i should just get the value i want as a CPointer[int8] and put the ints into a List and create a Buf from that, which i then .decode from utf8 to get the final string

[21:56] <timotimo> sounds great!

[21:56] *** cooper- joined
[21:57] *** dmol left
[22:03] *** lustlife left
[22:04] *** egrep joined
[22:09] *** beastd left
[22:12] *** pyrimidine left
[22:15] *** rurban left
[22:31] *** rurban joined
[22:39] <dalek> nqp/qast_restructure: 26f36ac | jnthn++ | / (5 files):

[22:39] <dalek> nqp/qast_restructure: Add QAST::NodeList; replace direct QAST::Node use.

[22:39] <dalek> nqp/qast_restructure: 

[22:39] <dalek> nqp/qast_restructure: This is a prerequisite for moving children out of the QAST::Node base

[22:39] <dalek> nqp/qast_restructure: class, which will enable us to save an array allocation and pointer on

[22:39] <dalek> nqp/qast_restructure: many node types that don't need children.

[22:39] <dalek> nqp/qast_restructure: review: https://github.com/perl6/nqp/commit/26f36ac864

[22:39] <dalek> nqp/qast_restructure: bd41f62 | jnthn++ | / (22 files):

[22:39] <dalek> nqp/qast_restructure: Refactor QAST node structure.

[22:39] <dalek> nqp/qast_restructure: 

[22:39] <dalek> nqp/qast_restructure: Now only nodes capable of holding children get a slot for them and an

[22:39] <dalek> nqp/qast_restructure: array allocated, reducing memory. Also take the time to optimize the

[22:39] <dalek> nqp/qast_restructure: new methods so we get away with a lot of the late-bound method calls.

[22:39] <dalek> nqp/qast_restructure: review: https://github.com/perl6/nqp/commit/bd41f62810

[22:41] <timotimo> oooooooh

[22:41] <timotimo> that sounds quite worthwhile

[22:42] <dalek> rakudo/qast_restructure: 1f4cae6 | jnthn++ | src/Perl6/Actions.nqp:

[22:42] <dalek> rakudo/qast_restructure: A few changes needed by qast_restructure in NQP.

[22:42] <dalek> rakudo/qast_restructure: 

[22:42] <dalek> rakudo/qast_restructure: Only one known regressions remains, which is related to compile-time

[22:42] <dalek> rakudo/qast_restructure: inlining of multis.

[22:42] <dalek> rakudo/qast_restructure: review: https://github.com/rakudo/rakudo/commit/1f4cae6b15

[22:42] <jnthn> Too tired to track down the regression tonight. It's something to do with inline_info ending up being null. No idea how that can happen.

[22:43] *** brrt left
[22:43] <timotimo> OK :(

[22:44] <jnthn> But it looks like it's simply missing, so anybody fancing a bug hunt probably wants to look for inline_info in Actions.nqp :)

[22:46] <jnthn> 'night

[22:59] *** spider-mario left
[23:00] *** virtualsue joined
[23:01] *** iarna left
[23:02] <timotimo> jnthn: clone_qast used to bindattr('@!array') on a qast node, but 1) it's not always there any more and 2) it's called @!children now :)

[23:03] <timotimo> nqp: role TheRole { }; class TheClass does TheRole { }; my $foo = TheClass.new(); say(nqp::istype($foo, TheRole));

[23:03] <camelia> nqp-jvm: OUTPUT¬´(signal )#‚ê§# There is insufficient memory for the Java Runtime Environment to continue.‚ê§# pthread_getattr_np‚ê§¬ª

[23:03] <camelia> ..nqp-moarvm: OUTPUT¬´Assignment ("=") not supported in NQP, use ":=" instead at line 2, near " TheClass."‚ê§   at gen/moar/stage2/NQPHLL.nqp:369  (/home/p6eval/rakudo-inst-1/languages/nqp/lib/NQPHLL.moarvm:panic:106)‚ê§ from <unknown>:1  (/home/p6eval/rakudo-inst-1/languages/nqp/lib/n‚Ä¶¬ª

[23:03] <camelia> ..nqp-parrot: OUTPUT¬´Assignment ("=") not supported in NQP, use ":=" instead at line 2, near " TheClass."‚ê§current instr.: 'panic' pc 15673 (gen/parrot/stage2/NQPHLL.pir:5731) (gen/parrot/stage2/NQPHLL.nqp:425)‚ê§¬ª

[23:04] <timotimo> nqp: role TheRole { }; class TheClass does TheRole { }; my $foo := TheClass.new(); say(nqp::istype($foo, TheRole));

[23:04] <camelia> nqp-{moarvm,parrot}: OUTPUT¬´1‚ê§¬ª

[23:04] <camelia> ..nqp-jvm: OUTPUT¬´(signal )#‚ê§# There is insufficient memory for the Java Runtime Environment to continue.‚ê§# pthread_getattr_np‚ê§# An error report file with more information is saved as:‚ê§# /home/p6eval/hs_err_pid7478.log‚ê§¬ª

[23:06] <cognome> I don't understand that FOREIGN_LANG business :(

[23:08] <dalek> rakudo/qast_restructure: 226c44f | (Timo Paulssen)++ | src/Perl6/Actions.nqp:

[23:08] <dalek> rakudo/qast_restructure: teach clone_qast (and thus node_walker) about QAST::Children

[23:08] <dalek> rakudo/qast_restructure: review: https://github.com/rakudo/rakudo/commit/226c44f2fb

[23:16] *** xenoterracide joined
[23:19] *** rurban left
[23:20] *** Mouq joined
[23:37] <hoelzro> incoming...

[23:38] <dalek> Heuristic branch merge: pushed 79 commits to rakudo/S26-WHY by hoelzro

[23:38] <Mouq> So.. Currently when one says "use XYZ;" to switch to the slang XYZ (even though "slang" is NYI..) it expects XYZ to be a complete grammar, because that's how v5 works. But what about the probably more common case where the majority of the language wants to be kept, only modifying a section of the normal grammar, perhaps in a way that is composable with other "use OtherSlang;" statements?

[23:38] <yoleaux> 4 Aug 2014 08:54Z <jnthn> Mouq: yes, it is...that error should never happen.

[23:38] <hoelzro> oh good; I thought dalek was about to spam us

[23:39] <Mouq> Would lexically modifying the Perl 6 grammar be possible on an arbitrary scale like that?

[23:40] <Mouq> m: { sub term:<such-term> { 1 }; say such-term + 1 }; say such-term + 1

[23:40] <camelia> rakudo-moar 6117d5: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/qILuv_tTEo‚ê§Undeclared routine:‚ê§    such-term used at line 1‚ê§‚ê§¬ª

[23:40] <Mouq> s/possible/feasible without awful performance drawbacks

[23:44] *** xenoterracide left
[23:46] *** ajr_ left
[23:50] *** xenoterracide joined
[23:55] *** pyrimidine joined
[23:56] *** pyrimidine left
[23:59] <lue> Mouq: aye, trying to figure out how one can modify Perl 6 the language, and how to support it sanely, still kinda hurts to do :P

[23:59] *** immortal joined
