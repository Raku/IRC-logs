[00:06] *** BenGoldberg left
[00:07] *** BenGoldberg joined
[00:10] *** Ben_Goldberg joined
[00:10] *** BenGoldberg left
[00:10] *** Ben_Goldberg is now known as BenGoldberg

[00:10] *** gfldex left
[00:11] *** Pleiades` left
[00:15] *** aindilis left
[00:15] *** _thou left
[00:16] *** Pleiades` joined
[00:34] *** raiph left
[00:34] *** colomon joined
[00:39] *** hoverboard joined
[00:48] *** lizmat joined
[00:51] * lizmat has arrived in Orlando

[00:56] <colomon> \o/

[00:56] <perigrin> \o/

[00:56] <perigrin> but I did beat you here by a few years.

[00:56] <perigrin> :D

[00:56] * colomon is not going to be anywhere near Orlando, alas.

[00:56] <perigrin> :(

[00:56] <lizmat> perigrin colomon  o/

[00:57] * perigrin wonders if lizmat can hear the cat complaining about her bath from there.

[00:57] <colomon> sorry, perigrin.  I'd love to be there, but big family vacation in April, big family vacation in August, and I need to $work as much as possible in between.

[00:57] <lizmat> I did hear something squeak  :-)

[01:00] *** zengargo1le left
[01:00] <perigrin> colomon: understood, next time I'll try to have it in a more family friendly location than near Disney. :)

[01:00] <colomon> :p

[01:01] <perigrin> (seriously though, you'll be missed ... )

[01:01] <colomon> awww

[01:02] <colomon> I'll certainly miss seeing everyone.

[01:06] *** FROGGS_ joined
[01:10] *** _thou joined
[01:10] *** FROGGS left
[01:11] *** parsus joined
[01:14] *** _thou left
[01:17] *** Su-Shee_ joined
[01:20] *** Su-Shee left
[01:21] *** klapperl joined
[01:25] *** klapperl_ left
[01:27] *** woolfy joined
[01:27] *** nebuchad` left
[01:35] *** btyler joined
[02:00] *** raiph joined
[02:01] *** parsus left
[02:28] *** carlin left
[02:29] *** carlin joined
[02:37] *** noganex_ joined
[02:40] *** noganex left
[02:55] *** molaf_ left
[02:58] *** _thou joined
[03:02] *** _thou left
[03:09] *** colomon left
[03:30] *** xenoterracide_ joined
[03:52] *** atroxaper joined
[04:02] *** atroxaper left
[04:02] *** atroxaper joined
[04:03] *** kaare_ joined
[04:05] *** isacloud__ left
[04:07] *** isacloud__ joined
[04:07] *** atroxaper left
[04:09] *** _thou joined
[04:11] *** Mouq joined
[04:15] *** anaeem1_ joined
[04:26] *** raiph left
[04:32] *** kaare_ left
[04:33] *** xenoterracide_ left
[04:37] *** woosley left
[04:41] *** woosley joined
[04:47] *** cotto joined
[04:48] *** woosley left
[04:51] *** BenGoldberg left
[05:01] <dalek> roast: 0ea4d75 | Mouq++ | S26-documentation/08-formattingcodes.t:

[05:01] <dalek> roast: Add test for RT #114510

[05:01] <dalek> roast: review: https://github.com/perl6/roast/commit/0ea4d75664

[05:01] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=114510

[05:09] *** kaare_ joined
[05:09] *** btyler left
[05:10] *** atroxaper joined
[05:13] <Mouq> r: my &infix:<c> = {$^a+$^b}; say 1 c 2;

[05:13] <camelia> rakudo-jvm bcd186: OUTPUT«(timeout)»

[05:13] <camelia> ..rakudo-{parrot,moar} bcd186: OUTPUT«3␤»

[05:27] *** atroxaper left
[05:33] *** grondilu_ joined
[05:36] <dalek> nqp: f050c36 | (Tobias Leich)++ | tools/build/MOAR_REVISION:

[05:36] <dalek> nqp: bump moar rev for various spesh fixes

[05:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f050c36e77

[05:36] *** grondilu left
[05:37] <dalek> rakudo/nom: 5fdfc78 | (Tobias Leich)++ | tools/build/NQP_REVISION:

[05:37] <dalek> rakudo/nom: bump nqp/moar rev for various spesh fixes

[05:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5fdfc7859d

[05:37] *** atroxaper joined
[05:38] *** carlin left
[05:43] *** ThisTusooa left
[05:45] <dalek> doc: eeb0dd2 | Mouq++ | lib/Perl6/TypeGraph/Viz.pm:

[05:45] <dalek> doc: Make SVG urls absolute per issue #17

[05:45] <dalek> doc: review: https://github.com/perl6/doc/commit/eeb0dd217c

[05:46] <dalek> doc: b33c6c0 | Mouq++ | lib/Language/Sets_Bags_and_Mixes.pod:

[05:46] <dalek> doc: Add intro to Sets, Bags, and Mixes

[05:46] <dalek> doc: review: https://github.com/perl6/doc/commit/b33c6c0df8

[05:47] *** uniejo joined
[05:48] *** woosley joined
[05:49] *** gfldex joined
[05:50] *** kurahaupo left
[05:54] *** uniejo left
[06:05] *** hoverboard left
[06:18] <masak> morning, #perl6

[06:19] *** kaleem joined
[06:19] *** woolfy left
[06:19] *** lizmat left
[06:19] <moritz> \o masak

[06:20] *** lizmat joined
[06:22] <atroxaper> masak: o/

[06:23] *** nebuchadnezzar joined
[06:29] <jnthn> o/ masak

[06:32] <FROGGS_> masak: o/

[06:32] *** FROGGS_ left
[06:36] <Mouq> /o/o/       \o\o\

[06:36] <Mouq> |o|o| masak |o|o|

[06:36] <Mouq> \o\o\      /o/o/

[06:36] *** woolfy joined
[06:47] <masak> :)

[06:50] *** _thou left
[06:51] <jnthn> airport &

[06:51] * masak leaves for airport

[06:57] *** igorsutton joined
[06:58] *** brrt joined
[07:03] *** atroxaper left
[07:04] *** woolfy left
[07:04] *** lizmat_ joined
[07:04] *** atroxaper joined
[07:04] *** hoelzro left
[07:05] *** hoelzro joined
[07:06] *** lizmat left
[07:08] *** atroxaper left
[07:10] *** zakharyas joined
[07:10] *** lizmat_ left
[07:12] *** lizmat joined
[07:14] *** nnunley left
[07:16] *** FROGGS joined
[07:17] *** atroxaper joined
[07:18] *** dmol joined
[07:20] *** atroxaper left
[07:21] *** woolfy joined
[07:21] *** atroxaper_ joined
[07:25] *** bonsaikitten joined
[07:25] *** larks_ joined
[07:27] *** xiaomiao left
[07:27] *** mhasch left
[07:27] *** geekosaur left
[07:27] *** mtj left
[07:27] *** askz left
[07:28] *** pdcawley joined
[07:29] *** tadzik joined
[07:29] *** mtj joined
[07:30] *** geekosaur joined
[07:30] *** grondilu_ left
[07:43] <dalek> doc: 0216cbd | Mouq++ | / (2 files):

[07:43] <dalek> doc: Lower headings so that they're uniform

[07:43] <dalek> doc: 

[07:43] <dalek> doc: Classes and routines, especially when defined in language docs, are not

[07:43] <dalek> doc: necessicarily going to written be at the right =headN for consistent

[07:43] <dalek> doc: formatting within sub-pages

[07:43] <dalek> doc: review: https://github.com/perl6/doc/commit/0216cbdaf5

[07:43] <dalek> doc: 5aeb785 | Mouq++ | htmlify.p6:

[07:43] <dalek> doc: Inline &add-new in &find-definitions

[07:43] <dalek> doc: 

[07:43] <dalek> doc: There used to be a reason for it to be a sub; no longer

[07:43] <dalek> doc: review: https://github.com/perl6/doc/commit/5aeb7856d3

[07:45] <Mouq> "necessicarily"?

[07:45] * Mouq is disappointed in himself

[07:48] <FROGGS> *g*

[07:48] <FROGGS> Mouq: you also take care that its test pass in the next days? so we will have a clean rakudo-star?

[07:54] *** Su-Shee_ is now known as Su-Shee

[07:57] <Mouq> FROGGS: doc? Sure, done :9

[07:58] <FROGGS> thanks :o)

[07:58] <FROGGS> I've just seen fails yesterday

[07:59] <Mouq> bed&

[08:00] <FROGGS> gnight

[08:02] *** _thou joined
[08:06] *** _thou left
[08:15] *** nnunley joined
[08:19] *** nnunley left
[08:20] *** spider-mario joined
[08:26] *** cognominal left
[08:35] *** donaldh joined
[08:45] *** ivanshma` is now known as ivanshmakov

[08:45] *** ivanshmakov left
[08:45] *** ivanshmakov joined
[08:46] *** darutoko joined
[08:53] *** SevenWolf left
[08:58] *** dakkar joined
[08:58] <FROGGS> arnsholt: ping

[08:59] *** atroxaper_ left
[08:59] *** brrt left
[09:00] *** atroxaper joined
[09:05] *** atroxaper left
[09:40] *** kivutar joined
[09:46] <ChoHag> If I have a sub foo (:$bar) {...} and a variable $baz which may or may not be defined, how can I call foo so that bar is only set if $baz if defined?

[09:47] *** Psyche^ joined
[09:48] <ChoHag> And conversely, how do I change the signature so that something which isn't a Bar can get in (it's actually 'sub foo (Bar :$bar, Bar :$other_bar)')

[09:49] <ChoHag> I forget the error message because it was yesterday, but if $baz is not set then calling foo complains because it's not a Bar.

[09:50] *** _thou joined
[09:51] *** Psyche^_ left
[09:52] *** atroxaper joined
[09:54] *** _thou left
[10:00] *** mmcleric joined
[10:02] *** labster left
[10:03] *** nnunley joined
[10:03] <Timbus> declare $baz as a Bar, or assign it a Bar type object

[10:04] *** mmcleric left
[10:05] <Timbus> or..  foo(bar => $baz||Bar)

[10:06] <Timbus> or, my $baz is default(Bar)

[10:07] *** mmcleric joined
[10:07] *** nnunley left
[10:23] *** colomon joined
[10:45] *** smls joined
[10:52] *** kivutar left
[10:54] <sergot> o/

[10:54] <sergot> hi

[10:57] *** mr-foobar left
[10:59] *** atroxaper left
[10:59] *** atroxaper joined
[11:03] *** atroxaper left
[11:05] *** mr-foobar joined
[11:06] *** kivutar joined
[11:08] <FROGGS> m: my $baz = 42; sub foo(:$bar) { say $bar }; foo( :bar($baz.defined) )

[11:08] <camelia> rakudo-moar 5fdfc7: OUTPUT«True␤»

[11:09] <FROGGS> ChoHag: ^^

[11:09] <FROGGS> ahh, wait

[11:09] *** pecastro joined
[11:10] <FROGGS> I don't see a $baz in your example, so I don't know what you want to achieve

[11:12] <timotimo> if $baz is defined, :bar should exist in the signature and be .defined, if it's not defined, it shall not be defined in the signature

[11:12] <timotimo> m: sub frob(:$bar) { say $bar.defined }; my $baz; frob(bar => $baz); $baz = "hi"; frob(bar => $baz)

[11:12] <camelia> rakudo-moar 5fdfc7: OUTPUT«False␤True␤»

[11:12] <timotimo> ChoHag:  ^ that should be enough

[11:16] *** cognominal joined
[11:25] <sergot> Can I get a commit permission to nqp just for today? :)

[11:26] <FROGGS> sergot: nqp would be okay I think

[11:26] <FROGGS> moritz: can you hand that out?

[11:33] <psch> hi #perl6 o/

[11:33] <FROGGS> hi psch 

[11:34] <psch> FROGGS: you read the clog i assume

[11:34] <FROGGS> I did

[11:34] <psch> platform worries aren't over though! NativeCall fails tests 10..12 in 05-arrays.t for me

[11:35] <FROGGS> psch: you have a 32bit machine?

[11:35] <psch> FROGGS: a 32bit vm, yes

[11:35] <psch> i can rerun on a real 32bit too if that does anything, although i wouldn't assume so

[11:36] <FROGGS> no, it should fail on 32bit hardware also

[11:36] *** woolfy left
[11:36] *** woolfy1 joined
[11:36] <FROGGS> we have that bug since a while now, and I don't know how to fix it

[11:36] <FROGGS> psch: see https://github.com/jnthn/zavolaj/issues/37

[11:36] <psch> it works if include stdint.h and pass specific bit sizes

[11:37] <psch> but that's not really a solution i guess, seeing as perl6's int behaves as 32bit 

[11:37] <psch> and sizeof(long) is 4 too, so it should just work..

[11:38] <psch> right, it's all in the ticket already :)

[11:38] *** _thou joined
[11:38] <FROGGS> yeah, and I still don't know what the solution might be

[11:39] <psch> i don't think having perl6 int vary in size is sensible

[11:39] <FROGGS> but int is native

[11:39] <moritz> sergot++ added to team nqp

[11:39] <sergot> moritz++ thanks! :)

[11:40] *** dwarring left
[11:40] <moritz> that one doesn't require a CLA, so you can keep that bit afterwards :-)

[11:40] <FROGGS> so it could/can/should? be platform specific

[11:40] <FROGGS> perhaps I should read the spec :o)

[11:40] <psch> oh right

[11:40] <psch> yeah S09 #Sized types says "int32 (aka int on 32-bit machines)"

[11:41] <sergot> moritz: ok :)

[11:41] <psch> so it should (and does, 'my int $x = 2 ** 32; say $x; #prints 0 here) be platform specific

[11:41] <psch> s/be/behave/

[11:42] <smls> m: my $a := 'aa'; my $b := <bb cc dd>; sub say_two_things ($x, $y is rw) { say "thing #{++$_}: $_" for $x, $y }; say_two_things $a, $b

[11:42] <camelia> rakudo-moar 5fdfc7: OUTPUT«thing #1: aa␤thing #2: bb␤thing #3: cc␤thing #4: dd␤»

[11:42] *** _thou left
[11:42] <smls> ^^ Perl 6 binding + Perl 6 flattening = sigils become unreliable :( 

[11:42] <smls> without the "is rw", $y does not flatten - but that only makes it *more* confusing...

[11:43] * moritz agrees

[11:44] *** skids left
[11:45] <smls> I really like flattening in Perl 5, where its behavior is static. But Perl 6's dynamic flattening, especially in the presence of binding etc, may end up causing more WAT than DWIM...

[11:46] <moritz> note that Perl 5 flattening isn't totally static either

[11:46] <moritz> push @a, mysub();

[11:46] <moritz> will the return value of mysub() flatten?

[11:47] *** atroxaper joined
[11:48] <smls> yes

[11:48] <smls> of course if it returns a single scalar, it "flattens" to that item (like any other list that only contains a single item)

[11:50] <moritz> sub mysub() { [1, 2,3 ] } # that array ref doesn't flatten

[11:50] <TimToady> p6item == p5ref more or less

[11:51] <smls> moritz: because array refs *never* flatten; they are scalars.

[11:51] *** nnunley joined
[11:52] <dalek> nqp: 816447f | sergot++ | VERSION:

[11:52] <dalek> nqp: bump VERSION to 2014.06

[11:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/816447f7f9

[11:54] <sergot> moritz: could you give me  access to [email@hidden.address] ?

[11:56] *** nnunley left
[11:57] *** LLamaRider joined
[11:58] *** xenoterracide_ joined
[11:59] <FROGGS> sergot: wait wait wait...

[11:59] <FROGGS> are the tests clean?

[12:01] <smls> TimToady: Don't you consider it a problem that one can't rely on a dollar-sigiled variable to behave as a single item?

[12:02] <smls> For me, this calls the entire concept of sigils into question

[12:02] <TimToady> binding is cheating, and cheaters get caught sometimes :)

[12:03] <smls> but you need it to work with lazy lists

[12:03] <smls> which is one of the heavily advetised "wow" features

[12:03] <smls> to people (and even newbies) *will* use binding

[12:03] <TimToady> so don't bind to $, bind to @

[12:04] * FROGGS .oO( Unsupported use of $, variable; in Perl 6 please use $*OUT.output_field_separator() )

[12:05] <sergot> FROGGS: yes

[12:05] <sergot> tests are clean

[12:05] <FROGGS> also spectests for all backends?

[12:06] <smls> TimToady: that's easy to mistype though, and can cause nasty action-at-adistance (as in the example i showed)

[12:06] *** mr-foobar left
[12:06] <FROGGS> TimToady: can't we "just" fix it?

[12:06] <sergot> FROGGS: for nqp, yes

[12:07] <FROGGS> sergot: I'd recommend to test rakudo too, before uploading any tarball

[12:07] <sergot> FROGGS: ok :)

[12:08] <TimToady> we can probably detect more such bad bindings at compile time and warn

[12:08] <TimToady> *ost

[12:08] *** cognominal left
[12:09] <psch> https://gist.github.com/peschwa/acbe01ccc45d80c2c5d1 # only in the REPL, is this 32bit specific?

[12:10] *** cognominal joined
[12:11] <smls> Maybe $item variable binding could be restricted to itemized things?

[12:12] <TimToady> would rather not make that a run-time check unless it can be optimized out most of the time

[12:12] <smls> Like @array variable binding is restricted to Positional things.

[12:14] *** woolfy1 left
[12:14] *** woolfy joined
[12:14] <TimToady> well, signature binding does ensure $ is itemized, I think

[12:15] <smls> Besides for lazy lists, binding is also advertised to newbies with a Perl 5 background as a replacement for references (or rather, all uses for references except the building of nested data structures)

[12:15] <TimToady> but that's ::= not :=

[12:15] <smls> and P5 people use references a lot :)

[12:16] <smls> So I don't think its fair to argue that binding is such an "advanced" feature that it's ok if it's dangerous

[12:16] <TimToady> epcot &  :)

[12:19] <smls> TimToady: Apparently with "is rw", it does not (on Rakudo Moar).

[12:22] <FROGGS> psch: not sure why it blows up

[12:23] *** atroxaper left
[12:23] *** atroxaper joined
[12:25] *** atroxaper left
[12:25] *** atroxaper joined
[12:27] *** atroxaper left
[12:28] *** atroxaper joined
[12:34] *** pecastro left
[12:35] <psch> FROGGS: something about different native types for the same lexical...? my int $x = 0; my int64 $x = 0; # doesn't blow up at all, although it also doesn't throw a X::Redeclaration either

[12:35] <psch> moar defines the int repr as always 64bit, which is why i tried the second case

[12:38] <psch> to clarify, the default for a P6Int repr without a nativesize argument is 64bit

[12:38] <psch> which it probably shouldn't be, seeing as that's what behind int and int should be platform specific

[12:42] <FROGGS> I think the problem is in getattr_i

[12:44] <FROGGS> ahh, hmmm, perhaps not

[12:45] *** atroxaper left
[12:45] *** atroxaper joined
[12:49] *** atroxaper left
[12:51] <sergot> FROGGS: https://gist.github.com/sergot/07e27d01984b20e3c1f6

[12:51] <sergot> rakudo's make test fails on jvm

[12:52] <FROGGS> sergot: the evalserver might has crashed on your box...

[12:52] <FROGGS> can you re-run it?

[12:53] <sergot> Yes, in a sec

[12:53] *** anaeem1_ left
[12:53] *** atroxaper joined
[12:56] <dalek> rakudo-star-daily: 448b391 | coke++ | log/ (14 files):

[12:56] <dalek> rakudo-star-daily: today (automated commit)

[12:56] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/448b39116e

[12:57] <[Coke]> modules/perl6-lwp-simple started failing on the daily star run for moar. (t/get-perl6-org.t)

[12:58] <[Coke]> using commit d52b3bd76a5f9354030b475c1268ea7d582f359f

[12:58] <[Coke]> which looks like the most recent merge commit.

[12:59] <[Coke]> parrot is failing modules/jsonrpc, modules/doc, modules/perl6-lwp-simple

[12:59] <colomon> oooo, release day

[12:59] <[Coke]> java still failing "lots"

[13:00] <[Coke]> (parrot -and- moar are failing that updated test in lwp-simple; jvm is still throwing an NPE on every test)

[13:00] *** smls left
[13:00] *** atroxaper left
[13:01] *** atroxaper joined
[13:01] <FROGGS> damn, I have tests that fetch web pages -.-

[13:01] <FROGGS> hate*

[13:03] <psch> FROGGS: i'll poke at that int32/int thing a bit more later, $work came up

[13:03] <psch> that is, if you or someone else doesn't beat me to it :)

[13:03] <FROGGS> psch: k, and good luck :o)

[13:03] <FROGGS> have to do $work too

[13:05] *** atroxaper left
[13:07] <sergot> FROGGS: clear now :)

[13:07] *** woolfy left
[13:07] *** guru joined
[13:08] *** guru is now known as Guest33890

[13:08] *** Guest33890 is now known as ajr_

[13:09] *** kaare_ left
[13:09] <FROGGS> moritz: can you apply please? https://github.com/cosimo/perl6-lwp-simple/pull/34

[13:09] *** woolfy joined
[13:10] * moritz pulls the trigger

[13:10] <FROGGS> sergot: for me also

[13:10] <FROGGS> [Coke]: the test will be fixed in a minute

[13:11] <FROGGS> perhaps I should look at modules/jsonrpc for parrot before the release is done

[13:12] <sergot> FROGGS: stresstesting now

[13:12] <FROGGS> sergot++

[13:13] <[Coke]> FROGGS: why not create a file in the github repo that is of known length and pull that?

[13:13] <[Coke]> (if firing up our own server is not going to fly)

[13:14] *** kivutar left
[13:14] <FROGGS> github does a redirect to the https site... that would be a problem

[13:15] <moritz> hey

[13:15] <[Coke]> k

[13:15] <moritz> aren't there some jquery hosting sites?

[13:15] <moritz> like, from google etc.?

[13:15] <moritz> those should be quite reliable

[13:15] <moritz> and if we fetch a specific version (not jquery.js but jquery-1.8.45.js or so), it should be immutable

[13:15] <FROGGS> good idea

[13:16] <[Coke]> (we could also setup a page on perl6.org that is just for our testing)

[13:16] <FROGGS> because, I do not want to adjust that test anymore :o)

[13:16] <moritz> [Coke]: also works, but feather is less reliable than google :-)

[13:16] <FROGGS> yeah

[13:26] *** _thou joined
[13:28] *** donaldh left
[13:28] *** molaf joined
[13:31] *** _thou left
[13:33] *** kivutar joined
[13:36] *** anaeem1 joined
[13:36] *** skids joined
[13:37] *** mr-foobar joined
[13:38] *** xenoterracide_ left
[13:39] *** nnunley joined
[13:40] *** anaeem1__ joined
[13:40] <FROGGS> t/spec/S32-io/IO-Socket-Async.t                             (Wstat: 134 Tests: 0 Failed: 0)

[13:40] <FROGGS>   Non-zero wait status: 134

[13:40] <FROGGS> I wonder why that fails...

[13:41] <timotimo> does it fail consistently?

[13:43] *** anaeem1 left
[13:43] <FROGGS> timotimo: yes

[13:43] <FROGGS> ohh, hmmm, no :/

[13:43] <FROGGS> 1..6

[13:43] <FROGGS> Unhandled exception in code scheduled on thread 140234788333312

[13:43] <FROGGS> No such method 'payload' for invocant of type 'Str'

[13:44] *** nnunley left
[13:54] *** bluescreen10 joined
[13:55] *** btyler joined
[13:55] *** kaleem left
[13:56] *** colomon left
[13:56] *** kaleem joined
[13:56] *** FROGGS left
[13:57] *** nnunley joined
[14:01] *** atroxaper joined
[14:02] <moritz> somehow my general impression is that rakudo had a month or two of feature grows, and should now focus a bit more on quality again

[14:04] <PerlJam> speeed! 

[14:04] <PerlJam> :)

[14:05] *** kaleem left
[14:05] *** atroxaper left
[14:05] *** colomon joined
[14:07] *** atroxaper joined
[14:12] *** _thou joined
[14:12] *** atroxaper left
[14:13] *** atroxaper joined
[14:13] *** treehug88 joined
[14:15] *** pdcawley left
[14:15] *** pdcawley joined
[14:15] *** FROGGS joined
[14:17] *** telex left
[14:17] *** atroxaper left
[14:18] *** telex joined
[14:22] *** btyler left
[14:25] *** btyler joined
[14:30] *** kurahaupo joined
[14:40] *** woolfy left
[14:40] *** woolfy1 joined
[14:40] *** pecastro joined
[14:42] *** ajr_ left
[14:43] *** colomon left
[14:44] *** guru joined
[14:44] *** guru is now known as Guest87008

[14:44] *** Guest87008 is now known as ajr_

[14:44] *** atroxaper joined
[14:45] *** atroxaper left
[14:46] *** atroxaper joined
[14:48] *** kaare_ joined
[14:50] *** atroxaper left
[14:51] *** LLamaRider left
[14:55] *** zengargoyle joined
[15:00] <timotimo> if we add more features, we can focus on even more quality!

[15:05] <hoelzro> you can compile a script to a JAR via perl6-j --target=jar -o hello.jar hello.p6, right?

[15:05] <hoelzro> I'm getting a NullPointerException when I try =/

[15:05] <lizmat> good *, #perl6!

[15:06] <lizmat> wrt quality: we still seem to have some rather serious race conditions in the async stuff

[15:08] <lizmat> or regular features (like EVAL, matching) perhaps not being entirely threadsafe

[15:08] <lizmat> anyways, today I'm not going to commit anything S11 related

[15:09] <lizmat> as it seems more or less stable right now (apart from maybe performance)

[15:11] <FROGGS> hoelzro: perhaps use --output= instead -o

[15:11] * hoelzro tries

[15:11] *** igorsutton left
[15:12] <hoelzro> huh, that did it...

[15:12] <hoelzro> how odd

[15:12] <FROGGS> hehe

[15:12] <FROGGS> I guess -o= does it too

[15:13] <FROGGS> but I've not yet seen -o in action

[15:13] <hoelzro> weird

[15:18] *** atroxaper joined
[15:23] *** atroxaper left
[15:32] *** kaleem joined
[15:32] *** atroxaper joined
[15:37] *** zakharyas left
[15:39] *** Rotwang joined
[15:45] <hoelzro> if I wanted better arguments processing than what MAIN offers, I take it I should use an external module? or is there a way to enhance how MAIN handles arguments?

[15:47] *** rurban joined
[15:47] *** raiph joined
[15:49] *** rurban left
[15:51] <masak> o/

[15:52] <masak> ...from London :)

[15:52] *** atroxaper left
[15:52] * ChoHag was forced to visit London today.

[15:53] *** atroxaper joined
[15:54] *** xinming_ joined
[15:57] *** xinming left
[15:58] *** atroxaper left
[15:58] <FROGGS> hoelzro: rakudo is open source... so you could enhance it... (or copy the logic and modify it)

[15:59] <dalek> roast: 1a0d506 | (Elizabeth Mattijsen)++ | S22-package-format/parse-spec.t:

[15:59] <dalek> roast: Initial S22 tests

[15:59] <dalek> roast: review: https://github.com/perl6/roast/commit/1a0d50633f

[16:00] <lizmat> hoelzro: a few days ago this question was raised as well

[16:00] <lizmat> I seem to recall TimToady not being against expanding MAIN features

[16:00] <hoelzro> FROGGS: right, I'm just wondering if such a change would be welcome, and if it would be in accordance with the spec

[16:00] <hoelzro> lizmat: oh?

[16:00] <hoelzro> hmm

[16:00] <hoelzro> I'll have to check my logs

[16:01] <lizmat> hoelzro: as long as it could be generalized :-)

[16:01] <lizmat> (is what I recall)

[16:01] <lizmat> sightseeing now &  

[16:02] *** dayangkun_ left
[16:04] <masak> release day today, no?

[16:04] <masak> oh, sergot++ is already bumping stuff.

[16:06] <sergot> masak: yes, stresstesting now :D

[16:06] <sergot> Everything else if ready.

[16:06] <sergot> is

[16:09] <masak> najs.

[16:12] *** btyler_ joined
[16:14] *** jnap joined
[16:14] *** btyler left
[16:15] <hoelzro> lizmat: of course =)

[16:15] *** anaeem1__ left
[16:16] *** atroxaper joined
[16:26] *** molaf_ joined
[16:30] *** molaf left
[16:43] *** atroxaper left
[16:43] *** atroxaper joined
[16:48] *** atroxaper left
[16:57] *** dakkar left
[16:59] *** xfix left
[16:59] *** xfix joined
[17:00] *** xfix left
[17:00] *** xfix joined
[17:02] *** ajr_ left
[17:02] <FROGGS> hoelzro: make a prototype, if it is convincing... it will be considered

[17:02] <FROGGS> hoelzro: otherwise it can stay a module of course

[17:02] *** colomon joined
[17:02] *** xfix left
[17:02] *** xfix joined
[17:03] <ChoHag> If a foo has a private attribute, can I access that from a role which is mixed into it?

[17:03] <ChoHag> s/foo/class/

[17:04] <masak> no.

[17:04] <masak> vice versa works, though.

[17:05] *** colomon left
[17:05] *** hoverboard joined
[17:05] <hoelzro> FROGGS: will do!

[17:06] <ChoHag> What about an inherited class?

[17:06] *** btyler_ left
[17:10] *** kaleem left
[17:13] *** Rotwang left
[17:33] <dalek> rakudo/nom: d45fccd | sergot++ | tools/build/NQP_REVISION:

[17:33] <dalek> rakudo/nom: [release] bump NQP revision

[17:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d45fccdbaf

[17:33] <dalek> rakudo/nom: 15df0f5 | sergot++ | VERSION:

[17:33] <dalek> rakudo/nom: [release] bump VERSION

[17:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/15df0f597b

[17:33] <dalek> rakudo/nom: a4e6d90 | sergot++ | docs/announce/2014.06.md:

[17:33] <dalek> rakudo/nom: 2014.06 release announcement added

[17:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a4e6d90934

[17:36] <sergot> FROGGS: could you give me the access to [email@hidden.address] ?

[17:36] <sergot> or someone else? moritz masak ?

[17:36] <sergot> :)

[17:38] <FROGGS> sergot: if you could provide the tarballs, I'd like to test them and then I should be able to upload the files

[17:39] <sergot> ok

[17:39] <sergot> :)

[17:39] <FROGGS> uhh wait, I only have UMTS here and a very limited limit :/

[17:40] <FROGGS> (normal internet is broken atm)

[17:43] <dalek> rakudo/nom: 8812ca4 | sergot++ | docs/release_guide.pod:

[17:43] <dalek> rakudo/nom: release done, moved to past releases, new plan added

[17:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8812ca405d

[17:43] <masak> sergot++

[17:44] <sergot> Who can upload the tarball for me? :)

[17:44] *** atroxaper joined
[17:44] <sergot> tarballs

[17:44] * moritz 

[17:44] <sergot> moritz++

[17:44] <moritz> sergot: where are they?

[17:44] <FROGGS> on C:\

[17:44] <FROGGS> :P

[17:45] <sergot> moritz: where do you want them to be? :)

[17:46] <moritz> sergot: somewhere on the internet, where I can download them

[17:47] <moritz> sergot: or give me your pubkey by /msg

[17:47] <moritz> then you can scp them yourself

[17:48] *** atroxaper left
[17:49] <sergot> moritz: done

[17:52] <FROGGS> sergot: have you fudged failing spectests of perl6-m and perl6-p?

[17:53] *** anaeem1 joined
[17:53] <sergot> FROGGS: no, I haven't

[17:53] <FROGGS> eww

[17:54] <raiph> m: my @foo = [1,2]; say @foo.perl # Would it be worthwhile changing .perl of @foo to be just `[1, 2]` ?

[17:54] <camelia> rakudo-moar 5fdfc7: OUTPUT«Array.new([1, 2])␤»

[17:55] *** mmcleric left
[17:57] *** anaeem1 left
[18:02] *** kurahaupo left
[18:02] *** geekosaur left
[18:03] <sergot> doing it now

[18:05] *** carlin joined
[18:05] *** geekosaur joined
[18:06] <moritz> raiph: [1, 2] doesn't flatten, @foo does

[18:07] <vendethiel> it flattens to [1, 2] though, really

[18:08] <moritz> vendethiel: that statement doesn't add any information

[18:08] *** xinming_ left
[18:08] *** treehug88 left
[18:08] *** mtj left
[18:08] *** Pleiades` left
[18:08] *** fhelmberger left
[18:08] *** benabik left
[18:08] *** molaf_ left
[18:08] *** zengargoyle left
[18:08] *** pecastro left
[18:08] *** cognominal left
[18:08] *** MilkmanDan left
[18:08] *** Alina-malina left
[18:08] *** psch left
[18:08] *** ilbot3 left
[18:08] *** [particle] left
[18:08] *** djanatyn left
[18:08] *** perigrin left
[18:08] *** ponbiki left
[18:08] *** camelia left
[18:08] *** kshannon left
[18:08] *** tempire_ left
[18:08] *** REPLeffect left
[18:08] *** erdic left
[18:08] *** muraiki left
[18:08] *** go|dfish left
[18:08] *** firnsy left
[18:08] *** FOAD left
[18:08] *** pmichaud left
[18:08] *** hugme left
[18:08] *** jercos left
[18:08] *** Juerd left
[18:08] *** bowtie left
[18:08] *** amkrankruleuen left
[18:08] *** retupmoca left
[18:08] *** ggherdov left
[18:08] *** Bucciarati left
[18:08] *** TimToady left
[18:08] *** lestrrat left
[18:08] *** raydiak left
[18:08] *** btyler joined
[18:08] <FROGGS> not again >.<

[18:08] <moritz> it just confuses everybody, because it redefines what "flattens" means

[18:09] <Mouq> m: say Array.new([1, 2]).push([6, 7]).perl

[18:10] *** Alina-malina joined
[18:10] *** molaf_ joined
[18:10] *** xinming_ joined
[18:10] *** zengargoyle joined
[18:10] *** pecastro joined
[18:10] *** treehug88 joined
[18:10] *** cognominal joined
[18:10] *** mtj joined
[18:10] *** Pleiades` joined
[18:10] *** MilkmanDan joined
[18:10] *** REPLeffect joined
[18:10] *** psch joined
[18:10] *** fhelmberger joined
[18:10] *** ilbot3 joined
[18:10] *** benabik joined
[18:10] *** erdic joined
[18:10] *** [particle] joined
[18:10] *** djanatyn joined
[18:10] *** perigrin joined
[18:10] *** muraiki joined
[18:10] *** ponbiki joined
[18:10] *** camelia joined
[18:10] *** go|dfish joined
[18:10] *** tempire_ joined
[18:10] *** kshannon joined
[18:10] *** firnsy joined
[18:10] *** raydiak joined
[18:10] *** lestrrat joined
[18:10] *** TimToady joined
[18:10] *** Bucciarati joined
[18:10] *** ggherdov joined
[18:10] *** retupmoca joined
[18:10] *** amkrankruleuen joined
[18:10] *** bowtie joined
[18:10] *** Juerd joined
[18:10] *** jercos joined
[18:10] *** hugme joined
[18:10] *** pmichaud joined
[18:10] *** FOAD joined
[18:10] *** wilhelm.freenode.net sets mode: +vv camelia hugme

[18:11] <Mouq> Oh, we lost camelia in the netsplit

[18:11] <Mouq> m: say Array.new([1, 2]).push([6, 7]).perl

[18:11] <camelia> rakudo-moar 5fdfc7: OUTPUT«Array.new([1, 2], [6, 7])␤»

[18:11] <psch> had her on the other side, but not the person i wanted to indirectly answer with a bit of code heh

[18:13] *** japhb_ left
[18:14] *** xinming_ left
[18:14] *** treehug88 left
[18:14] *** mtj left
[18:14] *** Pleiades` left
[18:14] *** fhelmberger left
[18:14] *** benabik left
[18:14] *** molaf_ left
[18:14] *** zengargoyle left
[18:14] *** pecastro left
[18:14] *** cognominal left
[18:14] *** MilkmanDan left
[18:14] *** psch left
[18:14] *** ilbot3 left
[18:14] *** [particle] left
[18:14] *** djanatyn left
[18:14] *** perigrin left
[18:14] *** ponbiki left
[18:14] *** camelia left
[18:14] *** kshannon left
[18:14] *** tempire_ left
[18:14] *** REPLeffect left
[18:14] *** erdic left
[18:14] *** muraiki left
[18:14] *** go|dfish left
[18:14] *** firnsy left
[18:14] *** FOAD left
[18:14] *** pmichaud left
[18:14] *** hugme left
[18:14] *** jercos left
[18:14] *** Juerd left
[18:14] *** bowtie left
[18:14] *** amkrankruleuen left
[18:14] *** retupmoca left
[18:14] *** ggherdov left
[18:14] *** Bucciarati left
[18:14] *** TimToady left
[18:14] *** lestrrat left
[18:14] *** raydiak left
[18:15] *** japhb_ joined
[18:16] *** molaf_ joined
[18:16] *** xinming_ joined
[18:16] *** zengargoyle joined
[18:16] *** pecastro joined
[18:16] *** treehug88 joined
[18:16] *** cognominal joined
[18:16] *** mtj joined
[18:16] *** Pleiades` joined
[18:16] *** MilkmanDan joined
[18:16] *** REPLeffect joined
[18:16] *** psch joined
[18:16] *** fhelmberger joined
[18:16] *** ilbot3 joined
[18:16] *** benabik joined
[18:16] *** erdic joined
[18:16] *** [particle] joined
[18:16] *** djanatyn joined
[18:16] *** perigrin joined
[18:16] *** muraiki joined
[18:16] *** ponbiki joined
[18:16] *** camelia joined
[18:16] *** go|dfish joined
[18:16] *** tempire_ joined
[18:16] *** kshannon joined
[18:16] *** firnsy joined
[18:16] *** raydiak joined
[18:16] *** lestrrat joined
[18:16] *** TimToady joined
[18:16] *** Bucciarati joined
[18:16] *** ggherdov joined
[18:16] *** retupmoca joined
[18:16] *** amkrankruleuen joined
[18:16] *** bowtie joined
[18:16] *** Juerd joined
[18:16] *** jercos joined
[18:16] *** hugme joined
[18:16] *** pmichaud joined
[18:16] *** FOAD joined
[18:16] *** wilhelm.freenode.net sets mode: +vv camelia hugme

[18:17] *** xinming_ left
[18:27] *** xinming joined
[18:28] <FROGGS> p: say $*VM.perl

[18:29] *** labster joined
[18:29] <camelia> rakudo-parrot 5fdfc7: OUTPUT«VM.new(config => {"sha1" => "fed40d8394df2f64681ca6651664daf095b42091", "PARROT_HAS_DLINFO" => "1", "has_sigaction" => "define", "memalign" => "posix_memalign", "HAS_GMP" => "1", "hugeintvalsize" => "8", "HASATTRIBUTE_WARN_UNUSED_RESULT" => "1", "ccwarn"…»

[18:29] <FROGGS> p: say $*VM.perl ~~ m/\w/

[18:30] <camelia> rakudo-parrot 5fdfc7: OUTPUT«｢V｣␤␤»

[18:30] <FROGGS> p: use Test; ok $*VM.perl ~~ m/\w/, 'We can do a $*VM.perl';

[18:30] <camelia> rakudo-parrot 5fdfc7: OUTPUT«ok 1 - We can do a $*VM.perl␤»

[18:31] <FROGGS> why does that fail when running the spectest??

[18:33] *** Pleiades` left
[18:33] *** Pleiades` joined
[18:33] <FROGGS> p: use Test; todo('no VM.signature yet'); ok $*VM.signature, "Signature is '{$*VM.signature}'"; ok $*VM.perl ~~ m/\w/, 'We can do a $*VM.perl';

[18:33] <camelia> rakudo-parrot 5fdfc7: OUTPUT«use of uninitialized value of type Blob in string context  in any  at gen/parrot/Metamodel.nqp:1480␤␤not ok 1 - Signature is ''# TODO no VM.signature yet␤ok 2 - We can do a $*VM.perl␤»

[18:44] <dalek> roast: f7b42fb | sergot++ | S (2 files):

[18:44] <dalek> roast: fudge failing tests, only for release purposes

[18:44] <dalek> roast: review: https://github.com/perl6/roast/commit/f7b42fbbe9

[18:45] <raiph> m: say @(1,2); # m: my @foo = [1,2]; say @foo.perl # Would it be worthwhile changing .perl of @foo to be `[1, 2].list` ?

[18:45] <camelia> rakudo-moar 5fdfc7: OUTPUT«1 2␤»

[18:45] <FROGGS> raiph: no, because you would strip off the itemness of that thing

[18:46] <FROGGS> m: say [1, 2]; say [1, 2].list

[18:46] <camelia> rakudo-moar 8812ca: OUTPUT«1 2␤1 2␤»

[18:46] <FROGGS> m: say [1, 2].perl; say [1, 2].list.perl

[18:46] <camelia> rakudo-moar 8812ca: OUTPUT«[1, 2]␤Array.new(1, 2)␤»

[18:46] <raiph> (Urgh. That was supposed to go to camelia)

[18:46] <FROGGS> m: say "a" for [1, 2]; say "b" for [1, 2].list

[18:46] <camelia> rakudo-moar 8812ca: OUTPUT«a␤b␤b␤»

[18:47] <raiph> m: my @foo = [1,2]; say @foo.perl # Would it be worthwhile changing .perl of @foo to be `[1, 2].list` ?

[18:47] <camelia> rakudo-moar 8812ca: OUTPUT«Array.new([1, 2])␤»

[18:48] <raiph> (Now *that* is intentionally to the channel !)

[18:49] <raiph> m: say Array.new(1,2) == [1,2].list

[18:49] <camelia> rakudo-moar 8812ca: OUTPUT«True␤»

[18:49] <FROGGS> right

[18:50] <FROGGS> m: my @foo = [1,2]; say @foo.elems

[18:50] <camelia> rakudo-moar 8812ca: OUTPUT«1␤»

[18:50] <FROGGS> that is why we want to keep the Array container

[18:50] <FROGGS> (also in future when it is a typed or shaped array)

[18:56] <dalek> perl6-roast-data: 42cb179 | coke++ | / (6 files):

[18:56] <dalek> perl6-roast-data: today (automated commit)

[18:56] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/42cb179150

[19:02] *** treehug88 left
[19:02] *** treehug88 joined
[19:06] <[Coke]> moar is clean today. jvm has 2 files with errors. parrot has a abort.

[19:06] <[Coke]> if someone could fix/fudge those, \o/

[19:07] <FROGGS> [Coke]: the parrot fail is (temporarily) fudged

[19:09] *** zakharyas joined
[19:12] <[Coke]> FROGGS++

[19:12] <[Coke]> jvm failures: https://github.com/coke/perl6-roast-data/blob/master/log/rakudo.jvm_summary.out#L1720

[19:13] *** treehug88 left
[19:13] <FROGGS> I can take a look but I doubt that I can do anything about it

[19:13] *** treehug88 joined
[19:13] <[Coke]> no worries.

[19:13] *** vendethiel left
[19:14] <Mouq> m: say Array.new(1,2) == [1,2].list

[19:14] <camelia> rakudo-moar 8812ca: OUTPUT«True␤»

[19:14] <Mouq> m: say Array.new(1,2) == [1,2].list

[19:14] <camelia> rakudo-moar 8812ca: OUTPUT«True␤»

[19:14] <Mouq> oops, sorry

[19:14] <FROGGS> you can say that again :o)

[19:14] *** vendethiel joined
[19:15] <Mouq> m: say Array.new(1,2) eqv [1,2].list

[19:15] <camelia> rakudo-moar 8812ca: OUTPUT«True␤»

[19:15] <Mouq> m: say Array.new(1,2) eqv [1,2]

[19:15] <camelia> rakudo-moar 8812ca: OUTPUT«True␤»

[19:15] <Mouq> Hm

[19:15] *** Rotwang joined
[19:19] *** atroxaper joined
[19:20] <FROGGS> j: for ^2 { ENTER { say "hurz" } }

[19:20] *** treehug88 left
[19:20] <camelia> rakudo-jvm 8812ca: OUTPUT«(timeout)»

[19:22] <Mouq> FROGGS: Is "hurz" a nonsense word like "foo" or "baz"?

[19:22] *** treehug88 joined
[19:22] <FROGGS> this explodes: for ^2 { last; ENTER { say "hurz" } }

[19:23] <FROGGS> Mouq: there is a german comedian who was singing a song about Hurz :o)

[19:23] <Mouq> FROGGS: Ahh, ok :)

[19:23] *** atroxaper left
[19:24] *** dwarring joined
[19:24] <[Coke]> Doctor, it Hurz when I do this.

[19:26] *** darutoko left
[19:28] *** mhasch joined
[19:34] <dalek> roast: d09bffe | (Tobias Leich)++ | S04-phasers/in-loop.t:

[19:34] <dalek> roast: RT #122134 last+ENTER in loop (skipped for jvm)

[19:34] <dalek> roast: review: https://github.com/perl6/roast/commit/d09bffe077

[19:34] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122134

[19:37] <PerlJam> Are any of the "cut" regex ops implemented?  (:, ::, :::,  <cut>)

[19:37] <dalek> roast: 1dbb9de | (Tobias Leich)++ | S04-phasers/in-loop.t:

[19:37] <dalek> roast: RT #122134 last+ENTER in loop (skipped for jvm)

[19:37] <dalek> roast: review: https://github.com/perl6/roast/commit/1dbb9de05c

[19:37] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122134

[19:37] <FROGGS> PerlJam: no

[19:37] <PerlJam> bummer.  That's what I thought, but I was hoping to be surprised  :)

[19:42] *** pippo joined
[19:43] <pippo> o/ #perl6

[19:43] <pippo> PerlJam: what the cut operator is supposed to do?

[19:45] *** dmol left
[19:46] <PerlJam> pippo: fail if the regex engine backtracks across it.

[19:47] <pippo> PerlJam: Ho. Thanks!

[19:48] *** rindolf joined
[19:53] *** guru joined
[19:53] *** guru is now known as Guest24191

[19:53] *** Guest24191 is now known as ajr_

[19:57] *** brrt joined
[20:02] *** dalek left
[20:03] *** dalek joined
[20:03] *** ChanServ sets mode: +v dalek

[20:05] <dalek> doc: f7705ba | Mouq++ | htmlify.p6:

[20:05] <dalek> doc: Process =DESCRIPTIONs in language docs and use as summary

[20:05] <dalek> doc: review: https://github.com/perl6/doc/commit/f7705ba333

[20:05] <dalek> doc: 5cc202c | Mouq++ | / (10 files):

[20:05] <dalek> doc: Add =DESCRIPTIONs to the language docs, normalize =TITLEs some

[20:05] <dalek> doc: review: https://github.com/perl6/doc/commit/5cc202c838

[20:06] <vendethiel> p6: for ^2 { last; ENTER { say "hurz" } } # where ?

[20:06] <camelia> rakudo-{parrot,jvm,moar} 8812ca, niecza v24-109-g48a8de3: OUTPUT«hurz␤»

[20:06] <FROGGS> huh

[20:06] <vendethiel> FROGGS: I fixed perl 6.

[20:06] <vendethiel> implems bent over camelia

[20:07] <FROGGS> jnthn: please merge https://github.com/jnthn/zavolaj/pull/39

[20:08] *** brrt left
[20:09] *** hoverboard is now known as moistcherry

[20:14] <dalek> doc: acbc68b | Mouq++ | html/css/style.css:

[20:14] <dalek> doc: Center titles and descriptions so that they look better together

[20:14] <dalek> doc: 

[20:14] <dalek> doc: Left-aligned descriptions looked weird

[20:14] <dalek> doc: review: https://github.com/perl6/doc/commit/acbc68b898

[20:15] <Mouq> actual review: http://doc.perl6.org/language.html

[20:16] <Mouq> (may require Ctrl-R)

[20:16] *** brrt joined
[20:17] * vendethiel did need ctrl-r

[20:18] <vendethiel> ah, too bad we don't have on-site highlighting yet

[20:18] <vendethiel> maybe that's something I should tackle

[20:19] *** raiph left
[20:19] <moritz> might be as easy as piping through Text::VimColor

[20:21] <dalek> doc: 1dec2d6 | Mouq++ | lib/Language/classtut.pod:

[20:21] <dalek> doc: [classtut.pod] flush code with margin

[20:21] <dalek> doc: review: https://github.com/perl6/doc/commit/1dec2d64f9

[20:23] *** colomon joined
[20:35] <FROGGS> or somebody would port the Kate syntax highlighting module from P5

[20:35] <FROGGS> could be a fun task

[20:37] <timotimo> the kate module isn't very thorough so far

[20:38] <timotimo> ma ybe better to shell out to pygmentize

[20:39] <FROGGS> hmmm, I use it at one place to colorize XML, works well enough

[20:40] <timotimo> er, i meant to say: the kate syntax highlighter fro p6

[20:40] <FROGGS> ahh

[20:41] <FROGGS> I'm usually fine with P5 highlighters :o)

[20:41] *** dagurval joined
[20:42] *** sjn joined
[20:42] <Mouq> I think for the most part, I'm done with adding features myself. IMO doc is pretty usable and extensible now, if slow, so I'd rather work on making the documents themselves better

[20:43] <Mouq> But if someone wants to add syntax highlighting, go for it :)

[20:43] *** raiph joined
[20:45] *** kaare_ left
[20:47] *** rindolf left
[20:50] *** SevenWolf joined
[20:53] <raiph> moritz++, FROGGS++ # for earlier explanation and patience

[20:55] *** brrt left
[21:01] *** virtualsue joined
[21:02] *** skids left
[21:03] *** pippo left
[21:09] *** dwarring left
[21:10] *** zakharyas left
[21:15] *** colomon left
[21:20] *** atroxaper joined
[21:25] *** atroxaper left
[21:28] *** moistcherry is now known as hoverboard

[21:38] *** spider-mario left
[21:43] *** treehug88 left
[21:43] <sergot> good night o/

[21:47] <Mouq> \o sergot 

[21:47] <FROGGS> gnight sergot 

[21:49] <timotimo> m: say lines()

[21:49] <camelia> rakudo-moar 8812ca: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll; Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí I mo dhiaidh bhí gleanntáin ghlas’ Ghaoth …»

[21:49] <timotimo> m: say $*ARGFILES

[21:49] <camelia> rakudo-moar 8812ca: OUTPUT«use of uninitialized value of type Any in string context␤IO::Handle<>(closed)␤»

[21:50] <timotimo> m: say $*ARGFILES[0].perl

[21:50] <camelia> rakudo-moar 8812ca: OUTPUT«IO::Handle.new(path => Any, ins => 0, chomp => Bool::True)␤»

[21:51] <dalek> doc: 9534e90 | Mouq++ | lib/Language/Sets_Bags_and_Mixes.pod:

[21:51] <dalek> doc: Add Baggy operators to Sets, Bags, and Mixes

[21:51] <dalek> doc: review: https://github.com/perl6/doc/commit/9534e90fb9

[21:51] <timotimo> why is "closed"?

[21:52] <timotimo> m: say $*ARGFILES[0]

[21:52] <camelia> rakudo-moar 8812ca: OUTPUT«use of uninitialized value of type Any in string context␤IO::Handle<>(closed)␤»

[21:52] <timotimo> m: say $*ARGFILES[0].DUMP

[21:52] <camelia> rakudo-moar 8812ca: OUTPUT«Default constructor for 'IO::Path' only takes named arguments␤  in method new at src/gen/m-CORE.setting:827␤  in method path at src/gen/m-CORE.setting:14088␤  in method DUMP at src/gen/m-CORE.setting:1065␤  in sub DUMP at src/gen/m-CORE.setting:139…»

[21:52] *** kivutar left
[21:53] <Mouq> m: say $*ARGFILES[0] for lines

[21:53] <camelia> rakudo-moar 8812ca: OUTPUT«use of uninitialized value of type Any in string context␤IO::Handle<>(closed)␤use of uninitialized value of type Any in string context␤IO::Handle<>(closed)␤use of uninitialized value of type Any in string context␤IO::Handle<>(closed)␤use of uni…»

[21:55] <FROGGS> $*ARGFILES would only contain something if you invoke: perl6 -e '...' < foo.txt

[21:57] <timotimo> well, in this case we're getting something piped into stdin

[21:57] <Mouq> Is this readable? http://doc.perl6.org/language/Sets_Bags_and_Mixes

[21:58] <Mouq> Still need to add an explaination for *Hash

[21:58] *** FROGGS left
[21:59] <timotimo> perl6-m -e 'say $*ARGFILES' doesn't seem to print two files when i supply two files

[22:00] <timotimo> in fact, it only prints one entry at all; is that how it works?

[22:01] <timotimo> ah, ARGFILES is just a single handle that distributes commands over multiple files

[22:04] <pmichaud> note about moarvm #105

[22:05] *** sftp left
[22:05] <pmichaud> files created in programs should generally be coded with 0666 permissions.

[22:06] <pmichaud> oh, maybe this belongs in #moarvm

[22:06] <pmichaud> moving there

[22:08] <dalek> doc: 4798c80 | Mouq++ | lib/ (4 files):

[22:08] <dalek> doc: Move *Hash into Sets, Bags, and Mixes

[22:08] <dalek> doc: review: https://github.com/perl6/doc/commit/4798c80268

[22:11] <dalek> doc: 73a5f1c | Mouq++ | lib/Language/Sets_Bags_and_Mixes.pod:

[22:11] <dalek> doc: Remove pointless headings

[22:11] <dalek> doc: review: https://github.com/perl6/doc/commit/73a5f1ce2f

[22:13] *** bluescreen10 left
[22:15] <timotimo> moarvm doesn't report file paths when failing to open files ...

[22:17] *** araujo left
[22:18] *** psch left
[22:21] <raiph> Has the potential-surprise-due-to-last-statement-in-block-not-being-sunk somehow been eliminated?

[22:23] <Mouq> m: 42; 43

[22:23] <camelia> rakudo-moar 8812ca: OUTPUT«WARNINGS:␤Useless use of constant integer 42 in sink context (line 1)␤»

[22:26] *** araujo joined
[22:28] <raiph> Mouq: S06:715 "Note that the default return policy assumes functional semantics, with the result that a loop as the final statement would be evaluated as a map, which may surprise some people." (plus lots of discussion of this and spec changes in last few years -- but I haven't been able to see it in my private camelia experiments)

[22:28] <synopsebot> Link: http://perlcabal.org/syn/S06.html#line_715

[22:29] <lizmat> do we have a release already?  should I commit an S22 tweak?

[22:30] <timotimo> lizmat: branches are super cheap in any case

[22:30] <lizmat> I'll take that as a "wait until released"

[22:30] <lizmat> it's not that important

[22:31] *** skids joined
[22:32] <timotimo> hm, ok

[22:32] *** grondilu joined
[22:33] <raiph> timotimo: at one point you were trying to understand the issue I just mentioned; do you now understand it and can demonstrate the "problem"?

[22:34] *** BenGoldberg joined
[22:36] <timotimo> the thing with for loops at the end of a block?

[22:37] <timotimo> for loops are now always sunk

[22:37] *** amirite joined
[22:39] *** ajr_ left
[22:45] <dalek> zavolaj: 53317e5 | tadzik++ | / (2 files):

[22:45] <dalek> zavolaj: Get rid of deprecation messages

[22:45] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/53317e5249

[22:45] <dalek> zavolaj: 265e504 | jonathan++ | / (2 files):

[22:45] <dalek> zavolaj: Merge pull request #39 from jnthn/tadzik/deprecations

[22:45] <dalek> zavolaj: 

[22:45] <dalek> zavolaj: Get rid of deprecation messages

[22:45] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/265e504640

[22:49] <jnthn> There we go

[22:50] *** xenoterracide_ joined
[22:54] <timotimo> i'm having some trouble with await and start :o

[22:55] <timotimo> ooooh

[22:55] <timotimo> i know why %)

[22:55] <raiph> .tell TimToady S06:715 says "a loop as the final statement would be evaluated as a map"; this is now a fossil, right?

[22:55] <synopsebot> Link: http://perlcabal.org/syn/S06.html#line_715

[22:55] <yoleaux> raiph: I'll pass your message to TimToady.

[23:00] <lizmat> r: my @a; my $c = Int; @a.push: $($c,1); $c=Str; @a.push: $($c,2); say @a.perl

[23:00] <camelia> rakudo-{parrot,jvm,moar} 8812ca: OUTPUT«Array.new($(Str, 1), $(Str, 2))␤»

[23:00] <lizmat> jnthn: ^^^ this feels wrong to me

[23:02] <lizmat> feels like the push binds to the variable, rather than just copy ?

[23:02] <lizmat> am I missing something?

[23:03] <lizmat> hmm... it appears jnthn is already asleep, gnight jnthn!

[23:04] <Mouq> r: my @a; my $c = Int; @a.push: item Array.new($c,1); $c=Str; say @a.perl

[23:04] <camelia> rakudo-{parrot,jvm,moar} 8812ca: OUTPUT«Array.new([Int, 1])␤»

[23:04] <timotimo> what are other common names for our Promises?

[23:05] <lizmat> timotimo: you mean things that return Promises ?

[23:05] <timotimo> no

[23:05] <BenGoldberg> Vocabulary words?

[23:05] <timotimo> i know at least one language calls it "futures"

[23:05] <Mouq> timotimo: https://en.wikipedia.org/wiki/Promise_%28programming%29

[23:05] <BenGoldberg> oath, vow, agreement, etc?

[23:06] <timotimo> mhh

[23:06] <Mouq> Oh look, we can add Perl 6 to "List of implementations" on that page :)

[23:06] <timotimo> i think promise and future will be familiar to enough attendees

[23:10] *** silug left
[23:11] *** virtualsue left
[23:12] <timotimo> what kinds of things would return Channels by themselves?

[23:12] <timotimo> i think asynchronous lines does that

[23:12] <lizmat> they would be more like Supplies, I would guess

[23:13] *** araujo left
[23:13] <lizmat> n: my @a; my $c = Int; @a.push: $($c,1); $c=Str; @a.push: $($c,2); say @a.perl

[23:13] <camelia> niecza v24-109-g48a8de3: OUTPUT«[$(Str, 1), $(Str, 2)].list␤»

[23:13] <timotimo> aye, though i see a reason for having them be channels instead, too

[23:14] <timotimo> on the other hand, turning a supply into a channel is just .tap({ $my_chan.send($_) })

[23:14] <lizmat> .Channel, even

[23:14] <timotimo> actually

[23:14] <timotimo> yes

[23:15] <lizmat> m my @a; my $c = Int; @a.push: $($c,1); $c=Str; @a.push: $($c,2); say @a.perl

[23:16] <lizmat> m: my @a; my $c = Int; @a.push: $($c,1); $c=Str; @a.push: $($c,2); say @a.perl

[23:16] <camelia> rakudo-moar 8812ca: OUTPUT«Array.new($(Str, 1), $(Str, 2))␤»

[23:16] <lizmat> I would expect to see:

[23:16] <lizmat> Array.new($(Int, 1), $(Str, 2))

[23:17] <lizmat> am I wrong?  Is there something about type objects that make them bind in a .push?

[23:17] <timotimo> i'm looking for some acceptable examples to show promises and channels with :|

[23:17] *** benabik left
[23:19] <timotimo> should we get Channel.Supply, too?

[23:20] <timotimo> damnit, i was going to present "perl 6 without rocket surgery" and now i'm about to write a slide on reactive programming

[23:20] <lizmat> That would be trickier, as we cannot be sure there are no other threads picking values off the Channel

[23:20] <lizmat> so you could never be sure the resulting Supply would see all values of the Channel

[23:20] <timotimo> this won't do at all!

[23:21] <timotimo> ah, that's a good point.

[23:21] *** silug joined
[23:22] *** atroxaper joined
[23:23] * lizmat submits rakudobug

[23:24] <timotimo> m: my @a; my $c = 1; @a.push: $($c,1); $c = "hi"; @a.push: $($c,2); say @a.perl

[23:24] <camelia> rakudo-moar 8812ca: OUTPUT«Array.new($("hi", 1), $("hi", 2))␤»

[23:25] <timotimo> it would appear the container of the $c is being pushed, rather than the value?

[23:26] *** xragnar is now known as Guest48647

[23:26] *** xragnar_ joined
[23:26] *** Guest48647 left
[23:26] *** xragnar_ is now known as xragnar

[23:26] <lizmat> #122137

[23:26] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122137

[23:26] *** atroxaper left
[23:26] <Mouq> It's not the fact that it's being pushed, it's the building of $($c, 1), isn't it?

[23:27] <timotimo> could very well be

[23:27] <timotimo> is that being done at compile-time perhaps?

[23:27] <Mouq> m: my $c = 1; my \b = $($c, 1); $c = Int; say b.perl

[23:27] <camelia> rakudo-moar 8812ca: OUTPUT«$(Int, 1)␤»

[23:27] <Mouq> m: my $c = 1; my $b = $($c, 1); $c = Int; say $b.perl

[23:27] <camelia> rakudo-moar 8812ca: OUTPUT«$(Int, 1)␤»

[23:28] <timotimo> no, the optimizer leaves that alone.

[23:28] *** gfldex left
[23:29] <timotimo> i really should have started making the slides much earlier :S

[23:29] <timotimo> at least the "what do i talk about?" part

[23:29] <Mouq> m: my $c = 1; my $b = ($c, 1); $c = Int; say $b.perl

[23:29] <camelia> rakudo-moar 8812ca: OUTPUT«$(Int, 1)␤»

[23:29] <Mouq> m: my $c = 1; my $b = [$c, 1]; $c = Int; say $b.perl

[23:29] <camelia> rakudo-moar 8812ca: OUTPUT«[1, 1]␤»

[23:30] *** benabik joined
[23:30] <Mouq> m: my $c = 1; my $b = Array.new($c, 1); $c = Int; say $b.perl

[23:30] <camelia> rakudo-moar 8812ca: OUTPUT«[Int, 1]␤»

[23:30] <Mouq> Many WTFs to be had

[23:31] <Mouq> p6: my $c = 1; my $b = Array.new($c, 1); $c = Int; say $b.perl

[23:31] *** Rotwang left
[23:31] <camelia> niecza v24-109-g48a8de3: OUTPUT«Unhandled exception: Excess arguments to List.new, used 1 of 3 positionals␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (List.new @ 1) ␤  at /tmp/tmpfile line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4595 (ANON @ 3) …»

[23:31] <camelia> ..rakudo-{parrot,jvm,moar} 8812ca: OUTPUT«[Int, 1]␤»

[23:31] <Mouq> n: my $c = 1; my $b = ($c, 1); $c = Int; say $b.perl

[23:31] <camelia> niecza v24-109-g48a8de3: OUTPUT«$(Int, 1)␤»

[23:33] <Mouq> OTOH, ($c,) having the container is the only way ($c, *) = * could work

[23:33] <Mouq> Other than special-casing

[23:34] <timotimo> that's true

[23:35] <timotimo> m: my $c; say $($c, 1).WHAT

[23:35] <camelia> rakudo-moar 8812ca: OUTPUT«(Parcel)␤»

[23:35] <timotimo> ah, it's a parcel

[23:35] <timotimo> those are supposed to be internal-ish magic-ish any way

[23:35] <timotimo> to be honest, i'd rather use [  ] for nested structures

[23:50] *** hoverboard left
[23:50] *** jnap left
[23:54] <dalek> roast: 2913cd1 | (Elizabeth Mattijsen)++ | S22-package-format/parse-spec.t:

[23:54] <dalek> roast: Some more parse-spec tests

[23:54] <dalek> roast: review: https://github.com/perl6/roast/commit/2913cd1d0c

[23:58] <Mouq> lizmat: Could those for blocks be re-written as map &parse-ok, ...?

[23:59] *** xenoterracide_ left
[23:59] <Mouq> or rather &parse_ok

[23:59] <lizmat> I guess for the single test cases, yes, good point

[23:59] <lizmat> feels it is still early and very late already

[23:59] <lizmat> I wonder why  :-)

