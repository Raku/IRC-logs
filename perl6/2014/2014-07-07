[00:01] *** dwarring left
[00:14] *** atroxaper joined
[00:19] *** atroxaper left
[00:24] *** btyler joined
[00:24] *** djanatyn left
[00:27] <dalek> perl6-roast-data: 308115a | coke++ | / (6 files):

[00:27] <dalek> perl6-roast-data: today (automated commit)

[00:27] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/308115a53b

[00:29] *** btyler left
[00:30] *** btyler joined
[00:34] <[Coke]> (mojo6) I started working on that, with the least bit of brain I could, which involved mojo-util. I finally have some cycles available, but probably need someone to work with to try to port mojo more aggressively. (otherwise, I tend to work more on shiny things or cleaning up tests, things like that.)

[00:36] *** djanatyn joined
[00:39] *** btyler left
[00:40] *** SOMEWHEREOVERTHE joined
[00:40] *** SOMEWHEREOVERTHE left
[00:41] * [Coke] has a very close relative whose birthday is Nov 11

[00:49] *** Tene_ is now known as Tene

[01:03] *** dayangkun joined
[01:08] *** hoverboard joined
[01:12] *** psch left
[01:28] *** rurban2 left
[01:47] *** hypolin joined
[01:47] *** rurban1 joined
[01:49] *** Sqirrel left
[01:50] *** Sqirrel joined
[01:50] *** FROGGS left
[01:51] *** klapperl_ left
[01:53] *** klapperl joined
[01:53] *** hypolin left
[01:54] *** Alula_ left
[01:58] *** chenryn joined
[02:02] *** raiph joined
[02:03] *** pdcawley left
[02:03] *** FROGGS joined
[02:04] *** Alula_ joined
[02:06] *** pdcawley joined
[02:12] *** BenGoldberg joined
[02:17] *** noganex_ joined
[02:20] *** noganex left
[02:26] *** dragon_d joined
[02:29] *** lelf`` joined
[02:29] *** lelf` left
[02:37] *** rurban1 left
[02:42] <ssutch> how does one address circular module loading in p6?

[02:43] <ssutch> in python normally we just move the import statement local

[02:46] <ren1us> ssutch: http://irclog.perlgeek.de/perl6/2014-06-12#i_8860068 (the answer I got a while back)

[02:52] *** skids joined
[02:52] *** rurban1 joined
[02:57] <ssutch> ren1us: thanks!

[02:59] *** dragon_d left
[03:02] *** rindolf joined
[03:03] <ssutch> ren1us: did you get around it by using need My::Class;

[03:04] *** dragon_d joined
[03:06] <Mouq> .tell jnthn Something is broken on the latest Moar such that htmlify.p6 no longer works, dieing with "Error while compiling op call: Local '__lowered_param_0' already declared"

[03:06] <yoleaux> Mouq: I'll pass your message to jnthn.

[03:07] <Mouq> .tell jnthn htmlify.p6 in perl6/doc, that is

[03:07] <yoleaux> Mouq: I'll pass your message to jnthn.

[03:15] <ssutch> =/ maybe i just cant have type constraints unless the two classes are in the same file

[03:17] *** atroxaper joined
[03:17] <Mouq> ssutch: You can't just declare a stub?

[03:19] <Mouq> my class XYZ { } ?

[03:21] <Mouq> .ask tadzik If there's going to be an effort to port Mojo to Perl 6, would it be better to rename your Template::Mojo as Mojo6::Template or similar?

[03:21] <yoleaux> Mouq: I'll pass your message to tadzik.

[03:21] <Mouq> and tadzik++

[03:21] <Mouq> jnthn++ for that matter

[03:21] <Mouq> coke++

[03:21] <Mouq> e'rybody++

[03:24] <TimToady> Mouq++ :)

[03:27] *** atroxaper left
[03:28] *** atroxaper joined
[03:28] *** xenoterracide__ left
[03:30] <Mouq> :)

[03:32] *** atroxaper left
[03:35] *** atroxaper joined
[03:36] *** SevenWolf joined
[03:36] *** lelf`` left
[03:46] * Mouq is equally entertained and perplexed by the Futurama quotes in the Mojolicious source

[03:46] *** [Sno] left
[03:48] <ssutch> hrm IO::Socket::INET.read(12) runs the cpu to 100% and blocks the OS until ubuntu kills it

[03:48] <ssutch> on the moar backend

[03:49] <ssutch> wireshark can see the reply from the server

[03:51] <TimToady> the IO system still is a bit primitive compared to the rest of p6, I fear

[03:52] <ssutch> heh

[03:52] *** araujo left
[03:52] <TimToady> 'course, if it was C, I'd just say "that's a library issue, not a language issue"  :)

[03:53] <_sri> Mouq: perplexed?

[03:57] <ssutch> maybe ill come back to this tomorrow and give it a go on another backend, or try to fix the IO issue

[03:57] <ssutch> for now though i'm bushed, g'night p6!

[03:57] <Mouq> _sri: The first I saw was http://mojolicio.us/perldoc/Mojo/IOLoop.txt and I thought maybe there was a death ray hidden in the code xD

[03:58] <Mouq> 'night ssutch!

[03:58] <_sri> but there is!

[03:58] *** BenGoldberg left
[03:59] <Mouq> _sri: Mercury beam? or neutron cannon?

[04:00] *** ribasushi left
[04:03] *** kaare_ joined
[04:06] *** anaeem1 joined
[04:07] *** ribasushi joined
[04:07] *** ssutch left
[04:08] *** Rotwang left
[04:11] *** raiph left
[04:15] <_sri> Mouq: mostly magic... it opens a portal to callback hell and summons a greater evil

[04:15] <_sri> you know... the usual async i/o stuff

[04:16] *** chenryn left
[04:27] <Mouq> _sri: Ohhh, yes. That is dark magic indeed, my friend

[04:35] *** virtualsue joined
[04:44] *** chenryn joined
[04:52] *** kaare_ left
[05:04] *** isBEKaml_mobile joined
[05:06] *** gfldex joined
[05:07] *** [Sno] joined
[05:14] *** rurban1 left
[05:21] *** kaare_ joined
[05:24] *** potatogim left
[05:30] *** dragon_d left
[05:46] *** dayangkun left
[06:02] *** virtualsue left
[06:06] *** denis_boyun joined
[06:15] *** chenryn left
[06:17] *** denis_boyun left
[06:18] *** chenryn joined
[06:19] *** denis_boyun_ joined
[06:23] *** FROGGS left
[06:34] *** denis_boyun_ left
[06:37] *** virtualsue joined
[06:39] *** denis_boyun joined
[06:41] <tadzik> Mouq: probably, yes :)

[06:41] <yoleaux> 03:21Z <Mouq> tadzik: If there's going to be an effort to port Mojo to Perl 6, would it be better to rename your Template::Mojo as Mojo6::Template or similar?

[06:42] *** SamuraiJack_ joined
[06:42] <tadzik> well, actually, I think Template::Mojo is a perfect name for that

[06:43] <tadzik> it makes sense for templating engines to be in a Template namespace, I think. Mojo::Template could be that-part-of-mojo-that-deals-with-template-engines

[06:44] <sergot> morning o/

[06:46] *** Sqirrel left
[06:47] *** darutoko joined
[06:57] *** FROGGS joined
[06:59] *** denis_boyun left
[07:02] *** dayangkun joined
[07:09] *** dalek left
[07:10] *** dalek joined
[07:10] *** ChanServ sets mode: +v dalek

[07:14] *** jack_rabbit left
[07:14] *** dayangkun left
[07:28] *** dayangkun joined
[07:38] *** virtualsue left
[07:40] *** igorsutton joined
[07:46] *** pecastro left
[07:51] *** hoverboard left
[07:56] *** sqirrel joined
[08:06] <atroxaper> Hello, #perl6 !

[08:06] <FROGGS> hi atroxaper 

[08:06] <atroxaper> FROGGS: o/

[08:06] *** Adriaaan joined
[08:08] <atroxaper> How do you think what should we get if translate pod 'L<C<boom>>' to HTML? Is it <a href="boom"><code>boom</code></a>? Or the same but with href="#" ?

[08:09] <FROGGS> I have no idea... I'm not much into Pod :/

[08:10] *** denis_boyun_ joined
[08:10] <atroxaper> I almost finish my system for writing Pod To Something converters. Now I'm trying to rewrite Pod::To::HTML to my system.

[08:11] <FROGGS> I think you have to as others, sorry

[08:11] <atroxaper> The next plained step is Pod::To::Markdown. Because github cant parse Pod format :)

[08:12] <FROGGS> Mouq++ and lue++ might know

[08:12] <atroxaper> Maybe somebody will see my question :)

[08:12] <atroxaper> FROGGS: thank you

[08:19] *** sunnavy left
[08:19] *** sunnavy joined
[08:23] *** fhelmberger joined
[08:24] <atroxaper> Current Pod::To::HTML do so '<a href="<code>boom</code>"><code>boom</code></a>'. And I think it's wrong...

[08:31] <FROGGS> yeah, I can agree on that :o)

[08:32] <FROGGS> I guess href="#" makes most sense, because you do not want to have huge anchors or even newlines in them

[08:37] *** SigmaWP joined
[08:37] <atroxaper> FROGGS: maybe. But as I understand from S26 <a href="boom"><code>boom</code></a> will be the best. I mean we should get bare content of L<> and put into href.

[08:38] <FROGGS> yeah, true

[08:39] *** SigmaWP left
[08:48] <dalek> rakudo/nom: e21b8fc | (Tobias Leich)++ | lib/Test.pm:

[08:48] <dalek> rakudo/nom: strip # from description in todo tests

[08:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e21b8fc84a

[08:49] *** dmol joined
[09:00] *** denis_boyun_ left
[09:02] <masak> good antenoon, #perl6

[09:03] *** ivanshmakov left
[09:05] <atroxaper> masak: hello

[09:07] *** SevenWolf left
[09:07] *** spider-mario joined
[09:07] <masak> hello, and welcome to another interesting day in Perl 6's development!

[09:09] *** xinming left
[09:10] <atroxaper> masak: What do you mean? :)

[09:11] *** virtualsue joined
[09:11] <atroxaper> Btw, is there list's shift by from the last element instead of first. Or list's push to the first element? I need to write simple stack.

[09:11] *** xinming joined
[09:12] <masak> I mean just what I say. which part of the sentence did you find confusing?

[09:12] <masak> atroxaper: .pop -- .unshift

[09:12] <masak> atroxaper: prefer the .push/.pop pair to the .unshift/.shift pair for performance.

[09:12] * vendethiel rewrote his 100-lines C++ queue class in 20 lines of P6

[09:12] <atroxaper> masak: the sentence isn't usual)

[09:13] <masak> granted.

[09:13] <masak> but it's not very complicated, either.

[09:13] <atroxaper> masak: thanks!

[09:16] <jnthn> .shift is pretty efficient these days since it just moves a start pointer.

[09:16] <yoleaux> 03:06Z <Mouq> jnthn: Something is broken on the latest Moar such that htmlify.p6 no longer works, dieing with "Error while compiling op call: Local '__lowered_param_0' already declared"

[09:16] <yoleaux> 03:07Z <Mouq> jnthn: htmlify.p6 in perl6/doc, that is

[09:16] <jnthn> Hm, that's nothing to do with Moar, that's a Rakudo optimizer issue...

[09:17] <jnthn> Looks like, anyways...

[09:17] <masak> jnthn: is that to the point where .shift isn't significantly slower than .push ?

[09:17] <jnthn> If you s/push/pop/ then yes

[09:17] <masak> right, meant that.

[09:17] <jnthn> unshift can be a little more costly

[09:17] <masak> ah, thought so.

[09:17] <masak> so it still makes sense to prefer .push/.pop

[09:18] <jnthn> but if the thing is in a steady state of shift/unshift rather than continuous growth it'll come out about the same

[09:18] <jnthn> For documentation alone, if you mean "a stack" then push/pop make sense. :)

[09:19] <atroxaper> jnthn: yes. I want a stack.

[09:21] *** fhelmberger left
[09:28] *** ivanshmakov joined
[09:33] *** pecastro joined
[09:37] <vendethiel> .ask raiph finally coming to your gist (after an awesome week without touching a comp), I have a question on "# you don't explain why sigils are needed in general. maybe remove?" <- why don't I need to ?

[09:37] <yoleaux> vendethiel: I'll pass your message to raiph.

[09:37] *** virtualsue left
[09:39] <vendethiel> also "capture" a function seems correct to me

[09:44] *** virtualsue joined
[09:44] <vendethiel> well, integrated everything except 2 or 3 minor thingies I rewrote differently. raiph++

[09:46] *** denis_boyun joined
[09:51] *** lelf`` joined
[09:56] *** lelf``` joined
[09:56] *** lelf`` left
[09:57] *** teodozjan joined
[10:05] *** virtualsue left
[10:06] *** virtualsue joined
[10:25] <vendethiel> oh, looks like the mailer delivered me something ...

[10:27] *** dayangkun left
[10:32] * vendethiel lizmat hey-oh

[10:54] *** sqirrel left
[10:57] <dalek> nqp: 8683e9c | sergot++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[10:57] <dalek> nqp: nativecast operator added

[10:57] <dalek> nqp: 

[10:57] <dalek> nqp: nativecast op has been added, it makes us able to cast things

[10:57] <dalek> nqp: conditionally. FROGGS++

[10:57] *** dalek left
[10:58] *** dalek joined
[10:58] *** ChanServ sets mode: +v dalek

[10:58] *** chenryn left
[10:58] <dalek> rakudo/nom: 25c5114 | (Tobias Leich)++ | tools/build/NQP_REVISION:

[10:58] <dalek> rakudo/nom: bump nqp/moar rev for nativecallcast op

[10:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/25c51143a2

[10:58] *** vend joined
[10:59] <vend> \o

[10:59] <FROGGS> hi vend

[10:59] <vendethiel> hi

[10:59] <sergot> o/

[10:59] <timotimo> spam mails are getting harder and harder to spot. this time i got a fake amazon order confirmation with the correct address. it said "Die Bestellung geht an: Deutschland"

[11:00] *** Akagi201 joined
[11:00] <dalek> zavolaj: d249648 | (Tobias Leich)++ | / (3 files):

[11:00] <dalek> zavolaj: Reenable usage of nqp::nativecast, and its tests

[11:00] <dalek> zavolaj: 

[11:00] <dalek> zavolaj: This reverts commit c0f68bca0a3d34a7d59f872fce0e7f34892cdff2.

[11:00] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/d249648259

[11:00] <dalek> zavolaj: 20424bd | (Tobias Leich)++ | lib/NativeCall.pm6:

[11:00] <dalek> zavolaj: bind result of nqp::nativecallcast so there is no extra container

[11:00] <dalek> zavolaj: 

[11:00] <dalek> zavolaj: Otherwise calling nqp::isint($result) will blow up.

[11:00] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/20424bd4af

[11:00] <dalek> zavolaj: 019d26e | (Tobias Leich)++ | lib/NativeCall.pm6:

[11:00] <dalek> zavolaj: box native string returned by nativecallcast when we get one

[11:00] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/019d26e30a

[11:00] <dalek> zavolaj: ec3f509 | (Tobias Leich)++ | lib/NativeCall.pm6:

[11:00] <dalek> zavolaj: simplify sub nativecast

[11:00] <dalek> zavolaj: 

[11:00] <dalek> zavolaj: We do not need to box the return value anymore since we provide the proper

[11:00] <dalek> zavolaj: box target now. A call looks now like: nativecast(int32, Int, $opaque-pointer)

[11:00] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/ec3f50927b

[11:05] <atroxaper> How can I define a module more correctly? module Foo {} or class Foo; And what is the difference?

[11:07] <atroxaper> I have a problem... If I define "module Foo { sub bar(){} }" then i can't call Foo.bar(). But if I define "class Foo; method bar(){}" I can call Foo.bar()

[11:07] <atroxaper> I don't want to use is export.

[11:08] <FROGGS> Foo.bar() is always a method call of an instance of a class

[11:08] <FROGGS> Foo::bar() would be a sub call in a module/class Foo, the sub must be our scoped then

[11:09] <FROGGS> m: module Foo { our sub bar() { 42 } }; say Foo::bar

[11:09] <camelia> rakudo-moar e21b8f: OUTPUT«42␤»

[11:09] <FROGGS> m: module Foo { our sub bar() { 42 } }; say bar # this will blow up

[11:09] <camelia> rakudo-moar e21b8f: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/K7eWgnlvf9␤Undeclared routine:␤    bar used at line 1. Did you mean 'bag'?␤␤»

[11:09] <atroxaper> FROGGS: Oh. Yes! I forgot about 'our' and can't imaging whay Foo::bar doesn't work)

[11:10] <FROGGS> hope that helps :o)

[11:10] *** virtualsue left
[11:10] <atroxaper> FROGGS: as I understand first example from http://perl6advent.wordpress.com/2009/12/12/day-12-modules-and-exporting/ is wrong without 'our'

[11:11] <FROGGS> m: module Foo { sub bar() { 42 } }; say Foo::bar

[11:11] <camelia> rakudo-moar e21b8f: OUTPUT«Could not find symbol '&bar'␤  in method <anon> at src/gen/m-CORE.setting:12877␤  in any find_method_fallback at src/gen/m-Metamodel.nqp:2604␤  in any find_method at src/gen/m-Metamodel.nqp:934␤  in block  at /tmp/MNfQl2mei5:1␤␤»

[11:11] *** kaleem joined
[11:11] <FROGGS> yes, subs are my scoped by default

[11:12] <FROGGS> (in contrast to any kind of package, like module/class/role/...)

[11:12] <atroxaper> FROGGS: 'our' helped me. And you too :)

[11:12] <FROGGS> :o)

[11:15] *** atroxaper left
[11:15] *** vend left
[11:15] *** atroxaper joined
[11:20] *** atroxaper left
[11:31] *** brrt joined
[11:38] *** fhelmberger joined
[11:53] *** anaeem1 left
[12:04] *** rindolf left
[12:04] *** shlomif joined
[12:04] *** lelf``` left
[12:05] *** shlomif is now known as rindolf

[12:07] *** lelf joined
[12:08] *** cognominal left
[12:08] *** cognominal joined
[12:11] *** brrt left
[12:14] <vendethiel> then again, rakudobrew totally failed me. Guess I'll just build by source

[12:15] *** Adriaaaan joined
[12:15] <vendethiel> "make: write error"

[12:15] *** lelf left
[12:16] <FROGGS> that sounds MacOSXish

[12:16] <vendethiel> yeah

[12:16] <vendethiel> and why has vend gone to sleep ? uh.

[12:16] <FROGGS> that is a bug in make

[12:17] <vendethiel> I can tell it's not sleeping ...

[12:17] *** Ven joined
[12:18] *** Adriaaan left
[12:18] *** dayangkun joined
[12:20] <lizmat> vendethiel: just ignore the "make: write error" on OS X

[12:20] <lizmat> it's a long standing issue with make on OS X that seems to be tickled by rakudo

[12:20] <Ven> I can't. There's no perl6 executable ..

[12:20] <lizmat> run it again

[12:20] <lizmat> empirically, the segfault in the make install only happens if it compiled something in nqp

[12:21] <lizmat> if you run it again, all in nqp has already been compiled, so no problem then

[12:22] <vendethiel> uh-oh. That indeed looks like a nasty bug ...

[12:22] *** rurban1 joined
[12:22] *** jnap joined
[12:28] *** LordV joined
[12:28] *** clkaoud left
[12:28] *** isacloud__ left
[12:28] *** ggherdov left
[12:29] *** _sri left
[12:29] *** Bucciarati left
[12:30] *** Woodi_ joined
[12:30] *** clkaoud joined
[12:30] *** ivanshmakov left
[12:30] *** isacloud___ joined
[12:30] *** jtpalmer_ joined
[12:30] *** ugexe_ joined
[12:30] *** haroldwu_ joined
[12:30] *** nwc10_ joined
[12:30] *** go|dfish left
[12:30] *** Woodi left
[12:30] *** nwc10 left
[12:30] *** Alula_ left
[12:30] *** jtpalmer left
[12:31] *** integral joined
[12:31] *** integral left
[12:31] *** integral joined
[12:31] *** clkaoud left
[12:31] *** clkaoud joined
[12:31] *** isacloud___ left
[12:31] *** isacloud___ joined
[12:31] *** ggherdov joined
[12:31] *** _sri joined
[12:32] *** go|dfish joined
[12:32] *** nwc10_ is now known as nwc10

[12:32] *** isBEKaml_mobile left
[12:34] *** brrt joined
[12:34] *** Ven left
[12:35] *** Bucciarati joined
[12:36] *** Vlavv left
[12:36] *** atroxaper joined
[12:38] *** atroxaper left
[12:38] *** atroxaper joined
[12:40] *** Ven joined
[12:47] <dalek> roast/S26-WHY: a2ab77a | (Rob Hoelz)++ | S26-TODO:

[12:47] <dalek> roast/S26-WHY: More things TODO for S26

[12:47] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/a2ab77a2e1

[12:49] *** Vlavv joined
[12:53] *** virtualsue joined
[12:54] *** Akagi201 left
[12:54] *** Akagi201 joined
[12:55] *** Akagi201 left
[12:56] *** Akagi201 joined
[12:58] <[Coke]> FROGGS: rather than strip the #'s, please escape them.

[12:59] <FROGGS> [Coke]: how?

[12:59] *** ivanshmakov joined
[13:01] <[Coke]> FROGGS: excellent question. (looks at http://testanything.org/tap-specification.html) ... I withdraw my suggestion. :)

[13:01] <[Coke]> FROGGS++

[13:01] <[Coke]> (I think that \# works, but not worth it.)

[13:07] *** dmol left
[13:17] *** woolfy left
[13:18] *** sqirrel joined
[13:20] *** woolfy joined
[13:22] *** raiph joined
[13:22] *** denis_boyun left
[13:23] *** rurban1 left
[13:23] *** denis_boyun_ joined
[13:27] *** guru joined
[13:27] *** guru is now known as ajr_

[13:28] *** lizmat left
[13:32] *** rurban1 joined
[13:32] *** lizmat joined
[13:33] *** psch joined
[13:33] *** btyler joined
[13:34] <psch> hi #perl6 o/

[13:35] <moritz>  \o psch 

[13:35] <colomon_> \o

[13:40] <raiph> o/

[13:40] <yoleaux> 09:37Z <vendethiel> raiph: finally coming to your gist (after an awesome week without touching a comp), I have a question on "# you don't explain why sigils are needed in general. maybe remove?" <- why don't I need to ?

[13:42] *** zakharyas joined
[13:44] <zengargoyle> sergot: moritz: thanks for the bit.

[13:44] <raiph> .tell vendethiel Has http://scriptogr.am/vendethiel/post/and-perl-6-came-forth changed? Given other langs don't need sigils, your answer to "Why is it needed?" seems unsatisfying. Maybe "When is it needed?". My issue with "capture" was that it already has a different technical meaning in P6 (actually at least 2 entirely distinct technical meanings)

[13:44] <raiph> . But this last is a very minor nit.

[13:44] <yoleaux> raiph: I'll pass your message to vendethiel.

[13:44] <vendethiel> I'm here

[13:44] <yoleaux> 13:44Z <raiph> vendethiel: Has http://scriptogr.am/vendethiel/post/and-perl-6-came-forth changed? Given other langs don't need sigils, your answer to "Why is it needed?" seems unsatisfying. Maybe "When is it needed?". My issue with "capture" was that it already has a different technical meaning in P6 (actually at least 2 entirely distinct technical meanings)

[13:45] <vendethiel> thanks yoleaux.

[13:46] <vendethiel> raiph: maybe "which sigil to use" ?

[13:47] *** SamuraiJack_ left
[13:47] <vendethiel> and wrt capture, I see, but I don't have a better term for it atm

[13:47] <jnthn> You don't *need* all kinds of things in a langauge, but sometimes introducing them gives nice properties.

[13:47] <raiph> vendethiel: yeah, that sort of thing (sigil)

[13:48] *** haroldwu_ is now known as haroldwu

[13:49] *** haroldwu left
[13:49] *** haroldwu joined
[13:50] *** troydm left
[13:54] *** kaare_ left
[13:57] *** atroxaper left
[14:01] *** atroxaper joined
[14:01] *** troydm joined
[14:06] *** skids left
[14:06] *** atroxaper left
[14:07] *** atroxaper joined
[14:07] *** bluescreen10 joined
[14:07] <zengargoyle> vendethiel: in Passing parameters ... Also, in Perl 6, the last expression (or last line) of a function is automatically returned. ... might be better mentioned after a non-say function.

[14:07] <vendethiel> not for now

[14:08] *** sqirrel left
[14:08] <zengargoyle> i.e. it seems to imply that 'Hello, Stephen' is the return value.

[14:09] <zengargoyle> and would make more sense with something like sub add($n) { $n + 1 }

[14:10] <zengargoyle> becase it's the REPL that's not printing the return value since it saw output.

[14:11] *** atroxaper left
[14:12] <zengargoyle> m: my $rv; sub hello(Any $name) { $rv = say "Hello, $name" }; hello("Steve"); say $rv;

[14:12] <camelia> rakudo-moar 25c511: OUTPUT«Hello, Steve␤True␤»

[14:15] <psch> i think that's better solved with mentioning that the REPL doesn't print the return value when the last statements is a say

[14:15] <psch> in "Getting started" there's mention of how the REPL prints the retval or nothing if there wasn't one

[14:16] <psch> maybe add that the return value of say gets swallowed by the REPL because it's assumed that it doesn't matter 

[14:16] <psch> or is it output to STDOUT in general? something to that effect

[14:17] <vendethiel> psch: it's mentioned already

[14:18] <psch> yeah, i just saw :)

[14:18] *** treehug88 joined
[14:23] <zengargoyle> i just think that if you introduce a rule, it shoule be with an example that shows that rule, or at least not with an example that demonstrates an exception to that rule (unless you point out the exception)

[14:24] *** zakharyas left
[14:26] <zengargoyle> then again, the REPL seems to be full of weirdness with nested scopes and such.

[14:26] <lizmat> FROGGS: it seems like your last change to lib/Test.pm makes some "skip" tests also get the "todo" text

[14:27] <lizmat> specifically in t/spec/S04-declarations/will.t, test #3:

[14:27] <lizmat> ok 3 -  SKIP declared variable not visible in block yet# TODO will init NYI

[14:27] <FROGGS> ummm

[14:28] <lizmat> this will give a TODO passed

[14:28] <lizmat> when in fact we're skipping the test

[14:29] *** molaf joined
[14:29] <lizmat> somehow $todo_reason is not reset

[14:30] <FROGGS> lizmat: that means that this todo lives too long: https://github.com/perl6/roast/blob/master/S04-declarations/will.t#L25

[14:30] <FROGGS> but yeah.. why

[14:30] <FROGGS> I can't take care of it right now, I'm bisecting rakudo :/

[14:30] <lizmat> perhaps it selects the wrong skip mmd

[14:30] <lizmat> ok

[14:30] <lizmat> will look at it then

[14:30] <FROGGS> lizmat++

[14:36] *** chenryn joined
[14:38] *** Akagi201_ joined
[14:39] *** Akagi201 left
[14:40] *** raiph left
[14:40] *** raiph joined
[14:45] <lizmat> hmmm... it seems to generate a todo() for *every* line in the block that's being todo'd, rather than just the line with "is"

[14:48] <dalek> roast: 5826376 | (Elizabeth Mattijsen)++ | S04-declarations/will.t:

[14:48] <dalek> roast: Work around 4x todo generating strangeness

[14:48] <dalek> roast: review: https://github.com/perl6/roast/commit/5826376d14

[14:49] <lizmat> the only thing I can think of, is that it somehow gets confused by the BEGIN and INIT blocks

[14:49] *** isBEKaml_mobile joined
[14:49] <lizmat> this seems to fix the test error reporting problem, but does not fix the underlying fudging issue

[14:49] <lizmat> cycling&

[15:07] *** atroxaper joined
[15:10] <hoelzro> morning #perl6

[15:10] <FROGGS> hi hoelzro 

[15:11] *** cxreg2 is now known as cxreg

[15:11] *** atroxaper left
[15:11] *** atroxaper joined
[15:13] *** igorsutton left
[15:13] *** kaleem left
[15:14] <hoelzro> ahoy FROGGS 

[15:16] *** Akagi201 joined
[15:18] *** Akagi201_ left
[15:21] *** ssutch joined
[15:21] *** dayangkun left
[15:26] *** hoverboard joined
[15:27] *** ajr_ left
[15:28] *** denis_boyun_ left
[15:28] *** ajr joined
[15:29] *** ajr is now known as Guest67321

[15:29] *** Guest67321 is now known as ajr_

[15:30] *** skids joined
[15:31] *** isBEKaml_mobile left
[15:34] *** [Sno] left
[15:35] *** ugexe_ is now known as ugexe

[15:35] *** FROGGS left
[15:36] *** ssutch left
[15:38] <moritz> rakudo's todo() function should catch # in the TODO message

[15:38] <moritz> it seems to be a common-ish error

[15:38] *** Ven left
[15:41] <masak> +1

[15:41] *** fhelmberger left
[15:41] *** felipe joined
[15:42] *** FROGGS joined
[15:42] <gtodd> easy to use "time" to make lazy comparisons of the speed of a script/oneliner with perl6-m versus perl6-j  versus perl6-p  how can I (not really scientifically) compare/test the speed of p6 on the jvm factoring out the jvm load?  maybe start the repl perl6-j and then eval the script ...  are there newbeasy-to-use timing or benchmarking tools somewhere in the distrubtion (./t ./tools)?

[15:44] <gtodd> granted in the flying car future jvm startup time will not be a factor ....

[15:45] <FROGGS> jnthn: there are 44 cases when compiling the setting that where blocks were inlined... I try to figure out now which not-inlined blocks cause the REDUCE fail for perl6-p

[15:45] *** kaleem joined
[15:45] <moritz> gtodd: there's a perl6-bench repo where there's some logic for factoring out startup time

[15:45] <FROGGS> gtodd: we already have an eval server

[15:45] <moritz> no idea how well that functionaility is exposedto the outside

[15:46] <FROGGS> our spectests use it... you'd start the server and send stuff to it that gets evaled

[15:46] *** kaare_ joined
[15:46] <moritz> another option is to run END { say now - BEGIN now }

[15:46] <moritz> it's not quite correct (it doesn't count compilation time prior to that time), but it's a good start

[15:47] <FROGGS> I think in perl6-bench it runs an empty program ten times to measure the startup time, and this gets subtracted later

[15:47] *** Ven joined
[15:48] <gtodd> moritz: oh good ok

[15:48] <vendethiel> moritz: CHECK instead of BEGIN ?

[15:48] *** Akagi201 left
[15:48] <FROGGS> do we have CHECK?

[15:48] <moritz> vendethiel: then it won't count compile time at all

[15:48] <vendethiel> oh, you want to count it

[15:49] <gtodd> FROGGS: yeah I thought of just timing the naked startup and subtracting :)

[15:49] *** Akagi201 joined
[15:50] <gtodd> FROGGS: I didn't really look into setting up my own eval server ... if it is not too complicated that is what I am going to do :)

[15:51] <FROGGS> gtodd: it sits just there in the root dir of rakudo

[15:51] <FROGGS> grep for the script's filename in t/, and you'll know how to invoke it

[15:51] * gtodd likes the idea of perl6 running all the time ...

[15:51] *** Akagi201_ joined
[15:52] <FROGGS> well, that kinda happens on my box anyway :o)

[15:52] *** brrt left
[15:54] <FROGGS> jnthn: these are the 44 poisened blocks btw: https://gist.github.com/FROGGS/15dc422d8cd27849b9a0

[15:55] *** Akagi201 left
[15:59] *** carlin joined
[16:01] <[Coke]> Ugh. looks like I need to add a ulimited perl6 runner to the daily star runs.

[16:02] <[Coke]> (looks like modules/file-find might be timing out.)

[16:02] <[Coke]> er, hanging.

[16:03] *** rurban1 left
[16:04] *** lyda left
[16:04] <colomon_> [Coke]: I ran into a bit of that last week.

[16:06] <[Coke]> yah, I wasn't really looking at things when on vaca last two weeks, just pushing the results I did get.

[16:07] <[Coke]> Easy enough to steal from the roast-data project which is already doing that.

[16:09] <[Coke]> anyone mind if I rip out the Order::Decrease tests from roast?

[16:09] <gtodd> ok sorry to blather on .... just so I 'm getting this straight ... I just did time perl6-j -e 'END { say now - BEGIN now }'  which printed out 0.2249989  and "20.04s user 1.34s system 174% cpu 12.266 total" so this tells me it seems to take about 12 seconds to start the jvm (a mechanical clock on my desk roughly confirms this) the 20s user being something to do with threads/multicore or in any case not for my brain to de

[16:09] <[Coke]> (given that rakudo doesn't have them, and anyone else is dead, dying, or hasn't started yet?)

[16:10] <[Coke]> gtodd: "for my brain to de"

[16:10] *** btyler_ joined
[16:11] *** isBEKaml joined
[16:11] <FROGGS> [Coke]: +1

[16:11] <gtodd> eeply consider ... trying that .... :)

[16:12] *** rurban1 joined
[16:12] <FROGGS> gtodd: you see that it uses 174% cpu

[16:12] <FROGGS> it has a concurrent GC

[16:12] <colomon_> [Coke]: wait, what's that about Order::Decrease?

[16:12] <gtodd> yes  :-) 

[16:12] *** btyler left
[16:13] <gtodd> FROGGS: what you just said == "deep" for me :)

[16:13] <FROGGS> colomon_: it will go more or less

[16:13] *** slavik left
[16:14] <colomon_> Should be Order::Less now?

[16:14] <colomon_> m: say "a" cmp "b"

[16:14] <camelia> rakudo-moar 25c511: OUTPUT«Less␤»

[16:14] *** dmol joined
[16:15] <gtodd> if I remove that time from perl6-j it comes second to perl6-m moar and ahead of perl6-p parrot which I gather is expected behavior these days ...

[16:17] *** _Slade joined
[16:17] <colomon_> [Coke], FROGGS: should the Order::Decrease tests be removed or renovated?  

[16:17] <gtodd> so the goal is parity re "correctness" vis-à-vis the SPEC but for now .....  moar = fastest parrot = most "correct" jvm == "safest" or something like that?

[16:18] <FROGGS> colomon_: as I understand it there are tests for less/more, and the others are kept as regression tests, which does not make much sense

[16:18] <FROGGS> gtodd: jvm is not really safe

[16:18] <FROGGS> gtodd: parrot was reliable until like a week ago

[16:18] <FROGGS> (we broke it)

[16:19] <FROGGS> and yes, moar is the fastest

[16:19] <colomon_> FROGGS, [Coke]: Huh.  Well, I guess I'm against deleting things that we don't understand why they are still there at all.  Maybe give a day or two for someone to protest to their proposed deletion? 

[16:20] *** Akagi201_ left
[16:20] <gtodd> FROGGS: ok ... I'm sure parrot is just "resting" :-)  

[16:20] <FROGGS> colomon_: that already happened, TimToady also said something about that

[16:20] <FROGGS> gtodd: I am about to fix the regression btw

[16:20] <colomon_> FROGGS: Ah, well then, burn it.

[16:21] <jnthn> JVM is safest when it comes to concurrency stuff :)

[16:21] <gtodd> FROGGS:  possibly jvm == most useful for getting people to try perl6 ... or maybe perlito ... 

[16:22] <jnthn> gtodd: Most people will get bored waiting for it to start up... ;) Unless they have a specific interest in JVM, Moar is the best bet for new users, I think.

[16:22] <FROGGS> yeah, I think so too

[16:22] <FROGGS> "here, install that" ... and three minutes later they can play

[16:23] <gtodd> yeah ... 

[16:23] <gtodd> but hmm eval server + web-ish front end .... (maybe perlito too) and a way to save snippets somewhere ...

[16:23] *** raiph left
[16:26] <FROGGS> gtodd: yes, that idea flies around from time to time :o)

[16:26] <gtodd> maybe that would be a perlito front end specific sort of thing for $FUTURE with a web repl (a la Juila) and ways to save edit code in some fancy HTML5 Web30 thingy

[16:26] <gtodd> could work for perl5 too :-D

[16:27] *** Alula_ joined
[16:27] *** slavik joined
[16:27] <gtodd> or just use emacs ;-)

[16:28] <gtodd> jnthn: is moar the sort of thing that will  build/link/run just about anywhere eventually?

[16:29] <FROGGS> jnthn: yes, that's the plan

[16:29] *** khisanth_ is now known as Khisanth

[16:30] <jnthn> gtodd: Well, anywhere its dependencies build, at least... But those are relatively portable.

[16:30] *** denis_boyun_ joined
[16:30] <gtodd> here it seems to be lnked to libc and libmoar ...

[16:31] <gtodd> oh and libkvm libm and libthr :-P

[16:32] *** atroxaper left
[16:32] <gtodd> jnthn: anyway pretty cool stuff  :-) yay for you

[16:32] *** atroxaper joined
[16:32] <jnthn> :)

[16:32] <jnthn> Time to cook some dinner, methinks... bbiab.

[16:32] <gtodd> and your helpers of course

[16:33] <jnthn> yes, helpers++ :)

[16:34] *** virtualsue left
[16:35] *** denis_boyun_ left
[16:37] *** atroxaper left
[16:37] *** kurahaupo left
[16:37] *** Ven left
[16:37] *** virtualsue joined
[16:37] *** chenryn left
[16:37] *** kaleem left
[16:39] *** Rotwang joined
[16:54] *** Akagi201 joined
[16:54] *** Akagi201_ joined
[16:56] *** pdcawley left
[16:58] *** Akagi201 left
[16:58] *** Akagi201_ left
[16:59] *** denis_boyun_ joined
[16:59] *** pdcawley joined
[17:04] *** treehug88 left
[17:04] <[Coke]> colomon_: the tests were added when we switched from decrease to less.

[17:05] <[Coke]> IMO, only makes sense to have stuff like that in roast across perl 6 spec release boundaries, and we haven't crossed one of those yet.

[17:05] * TimToady tends to agree

[17:05] *** teodozjan left
[17:05] * [Coke] will remove them later tonight, methinks.

[17:06] <TimToady> deprecated deprecations, yum!

[17:06] * [Coke] is also considering adding all test files to rakudo's spectest.data and fudging them appropriately, or removing the corresponding roast files because they date from pugs.0

[17:07] <[Coke]> that involves work, though, so that won't happen so quickly. :)

[17:07] * TimToady wonders how hard it would be to write an input method that greps character names and gives you a list that matches to pick from

[17:08] <TimToady> of course, then we'll discover that nobody can remember what « and » are called

[17:09] <TimToady> or how to spell DIAERESIS...

[17:09] <timotimo> isn't that some kind of disease?

[17:10] *** virtualsue left
[17:10] <TimToady> most endemic to europe

[17:10] <TimToady> *mostly

[17:10] <timotimo> sounds dangerous

[17:12] <isBEKaml> timotimo: not at all, it's just a tick. 

[17:12] <isBEKaml> timotimo: or tic

[17:12] <timotimo> :D

[17:16] *** itz_ joined
[17:16] <[Coke]> TimToady: you might want to review the unicode modules on the most wanted list to see if those make sense in our new world order.

[17:16] <[Coke]> (you may have already done some of the work they're asking for.)

[17:25] *** denis_boyun_ left
[17:27] *** denis_boyun_ joined
[17:33] *** atroxaper joined
[17:37] *** pecastro left
[17:37] *** atroxaper left
[17:39] *** lue left
[17:47] <zengargoyle> should probably start a web page somewhere for "How do I type «»?"

[17:47] <TimToady> how would one search for it? :P

[17:47] *** pdcawley left
[17:47] <timotimo> a single serving site?

[17:47] <zengargoyle> cut-n-paste

[17:47] <vendethiel> TimToady: symbolhound :-)

[17:48] <[Coke]> hang it off perl6.org somewhere, with all the (optional) unicode chars you might have to type, sure.

[17:48] <TimToady> be sure to put the phrase "funny french quotes" :)

[17:48] <geekosaur> how do you type those quotes to find out how to type them?

[17:48] <geekosaur> :p

[17:48] <colomon_> geekosaur: first, travel to Paris...

[17:49] *** denis_boyun_ left
[17:49] <timotimo> what's a ¢?

[17:49] *** pdcawley joined
[17:49] <TimToady> takes two of 'em to have an opinion

[17:49] <zengargoyle> i moderated a japanese language learning forum a long time ago and the whole "How do I type things not on my keyboard" question was sorta complicated to answer.

[17:50] <[Coke]> timotimo: american cent sign. 100¢ = 1 USD

[17:50] <timotimo> [Coke]: wasn't looking for a serious answer

[17:50] <vendethiel> on windows, it's especially hard :(

[17:51] <timotimo> vendethiel: no, on windows you have alt+numbers

[17:51] <TimToady> yeah, windows doesn't make cents

[17:51] <vendethiel> exactly why it's hard.

[17:51] *** ajr_ left
[17:51] <vendethiel> I remember the combinations for é, è, ï ... that's a terrible failure

[17:51] <isBEKaml> yeah, windows doesn't make sense.

[17:51] *** denis_boyun joined
[17:51] <timotimo> quite the contrary

[17:52] <timotimo> windows has brought loads and loads of people closer to the topic of computing

[17:52] <timotimo> that is a sensible thing to do

[17:52] <vendethiel> ... and is totally irrelevant to typing not-on-my-keyboard characters ?

[17:52] <timotimo> before windows, people were entering their machine code by flipping switches and hitting the "store byte and advance" button

[17:52] *** lue joined
[17:52] <zengargoyle> i'm hoping things have gotten better with Win7+

[17:52] <jnthn> Every other Windows is non-terrible.

[17:52] <timotimo> zengargoyle: as always, skip every second one

[17:52] <jnthn> 8 is a terrible one.

[17:53] <isBEKaml> jnthn: yeah, before that it was vista

[17:53] * vendethiel doesn't think there's any difference between 8 and 7 ...

[17:53] <jnthn> Right.

[17:53] <isBEKaml> and Me before it.

[17:53] <jnthn> Me sucked.

[17:53] <vendethiel> W Millenium!

[17:54] <isBEKaml> jnthn: there were 2 releases that flopped successively. '98 and 'Me. 

[17:54] <timotimo> jnthn: it should be "I sucked", though

[17:54] * TimToady is glad they haven't named an element Millenium...

[17:54] <isBEKaml> jnthn: '95 and ten years later, it was XP.

[17:55] <TimToady> XP gave everyone experience points

[17:55] <[Coke]> I have that will smith album. it's pretty good.

[17:55] <zengargoyle> i'm happy to have pretty much never used Windows much at all

[17:56] <zengargoyle> but sad that it's a total Mystery OS to me

[17:56] *** hoverboard is now known as hovercraft

[17:59] * colomon_ hated Vista so much he will probably not be coming back to Windows for a long, long time.

[18:00] <geekosaur> win7 was actually a pretty good OS

[18:00] <timotimo> colomon_: to be fair, win7 is pretty solid

[18:00] <geekosaur> win8, the less said, the better

[18:00] <isBEKaml> zengargoyle: Don't fret too much. If you read Neal Stephenson's "In the beginning was the command line", I'm sure much of it will make sense. :-)

[18:00] <PerlJam> But Perl 6 is awesome!  

[18:00] <PerlJam> :-)

[18:01] <zengargoyle> oh for sure.  my path has been Apple II, Amiga, Solaris, Linux

[18:02] <geekosaur> (in win8.1 you can at least partially deactivate metro)

[18:02] * vendethiel sometimes doesn't understand that hate for vista

[18:02] <vendethiel> might be because I got it pretty late, with one or two service packs, but it never crashed on me ..

[18:02] <geekosaur> that would be why

[18:02] <geekosaur> vista sp2 was fairly solid

[18:02] <geekosaur> earlier versions, forget it

[18:03] <TimToady> my wife has been running Vista for a long time, and it never gave her any trouble as a user

[18:03] <timotimo> my cousin's computer bluescreened when we installed a driver on it ...

[18:03] <timotimo> i laughed pretty hard

[18:04] *** Possum left
[18:05] <colomon_> TimToady: my Vista complaints were as a programmer.  I think my final straw was the fact that "patch" didn't work anymore.

[18:06] *** [Sno] joined
[18:06] <TimToady> nobody in their right mind does *programming* on Windows... <whistles>

[18:07] * vendethiel sighs

[18:07] <vendethiel> which reminds me -- farewell, 2014.03-parrot :D !

[18:07] <TimToady> :D

[18:08] <isBEKaml> TimToady: that Petzold book - it still sells. :D

[18:08] <isBEKaml> TimToady: First it was "Programming Windows" with C++ and then it was with C#. 

[18:09] <TimToady> .oO("it's not that the bear dances well, but that it dances at all")

[18:21] *** molaf left
[18:25] *** guru joined
[18:26] *** guru is now known as Guest37603

[18:26] *** Guest37603 is now known as ajr_

[18:27] *** spider-mario left
[18:28] *** jeffreykegler joined
[18:30] *** jeffreykegler left
[18:30] *** _Slade left
[18:31] *** _slade joined
[18:31] *** Possum joined
[18:32] <Woodi_> evening everyones :)

[18:33] <Woodi_> I'm a bit missing new R*... is one planned soon or maybe getting monthly R is new way to go ?

[18:37] *** atroxaper joined
[18:37] *** darutoko left
[18:37] <[Coke]> R* is not guaranteed every month.

[18:37] <[Coke]> though we do try.

[18:38] <dalek> perl6-roast-data: ab8bc02 | coke++ | / (5 files):

[18:38] <dalek> perl6-roast-data: today (automated commit)

[18:38] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/ab8bc023ea

[18:38] <isBEKaml> I don't recall R* ever being monthly - although, it was announced to be a semi-annual/annual thing. 

[18:41] *** hovercraft left
[18:41] *** atroxaper left
[18:44] <betterworld> m: my $x = set(); $x (|)= [2014]

[18:44] <camelia> rakudo-moar 25c511: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/o6cg8jCBCD␤Two terms in a row␤at /tmp/o6cg8jCBCD:1␤------> [32mmy $x = set(); $x [33m⏏[31m(|)= [2014][0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix…»

[18:44] <betterworld> should this work?

[18:44] <FROGGS> m: my $x = set(); $x (|=) [2014]

[18:44] <camelia> rakudo-moar 25c511: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/izJENSejSI␤Two terms in a row␤at /tmp/izJENSejSI:1␤------> [32mmy $x = set(); $x [33m⏏[31m(|=) [2014][0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix…»

[18:45] <FROGGS> std: my $x = set(); $x (|)= [2014]

[18:45] <camelia> std 0f2049c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused at /tmp/oKalT3UYuy line 1:␤------> [32mmy $x = set(); $x [33m⏏[31m(|)= [2014][0m␤    expecting any of:␤ feed_separator␤ infix or meta-infix␤    infixed function␤       statement modifier loop␤Parse failed␤FAI…»

[18:45] <FROGGS> std: my $x = set(); $x (|=) [2014]

[18:45] <camelia> std 0f2049c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused at /tmp/QZgII15ldU line 1:␤------> [32mmy $x = set(); $x [33m⏏[31m(|=) [2014][0m␤    expecting any of:␤ feed_separator␤ infix or meta-infix␤    infixed function␤       statement modifier loop␤Parse failed␤FAI…»

[18:45] <FROGGS> betterworld: does not look like

[18:45] <FROGGS> I'd at least expect that std can parse it...

[18:45] <FROGGS> std: my $x = set(); $x (&)= [2014]

[18:46] <camelia> std 0f2049c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused at /tmp/0TTj5Gm2MD line 1:␤------> [32mmy $x = set(); $x [33m⏏[31m(&)= [2014][0m␤    expecting any of:␤ feed_separator␤ infix or meta-infix␤    infixed function␤       statement modifier loop␤Parse failed␤FAI…»

[18:47] <betterworld> would be neat.

[18:50] <FROGGS> .u union

[18:50] <yoleaux> U+222A UNION [Sm] (∪)

[18:50] <masak> I don't see offhand why that oughtn't work.

[18:50] <FROGGS> m: my $x = set(); $x ∪= [2014]

[18:50] <camelia> rakudo-moar 25c511: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/ZTako5zctC␤Two terms in a row␤at /tmp/ZTako5zctC:1␤------> [32mmy $x = set(); $x [33m⏏[31m∪= [2014][0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix…»

[18:50] <[Coke]> anyway, if you want at least monthly updates, it's worth checking out the compiler releases and doing a panda update every month. You could go crazy and switch to github and install nom branch whenever, but that may be too much work. (or you can just ping us, and someone will do a release sooner than later.)

[18:50] <FROGGS> m: my $x = set(); $x ∪ [2014]

[18:50] <camelia> rakudo-moar 25c511: ( no output )

[18:51] <FROGGS> std: my $x = set(); $x ∪= [2014]

[18:51] <camelia> std 0f2049c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused at /tmp/LhncuwjFCG line 1:␤------> [32mmy $x = set(); $x [33m⏏[31m∪= [2014][0m␤    expecting any of:␤   feed_separator␤ infix or meta-infix␤    infixed function␤       statement modifier loop␤Parse failed␤FAI…»

[18:51] <FROGGS> TimToady: ---^ ?

[18:54] *** treehug88 joined
[18:54] <TimToady> STD doesn't know the set operators yet

[18:54] <TimToady> and you can't modify a set because it's immutable

[18:55] <masak> um, but isn't that just modifying a container?

[18:55] <jnthn> You'd be putting a new resulting set into the contariner there, though...

[18:55] <FROGGS> ohh, that's set, err, sad

[18:55] <TimToady> yes, we could fake it with the container, as we do with strings

[18:55] <FROGGS> I always that the ??= works with every infix

[18:56] <FROGGS> thought*

[18:56] <TimToady> rakudo doesn't parse op= properly yet

[18:56] <masak> TimToady: and numbers. += doesn't modify the original number either.

[18:56] <masak> TimToady: in fact, I can't think of any op= that goes in and destroys the original value.

[18:57] *** pecastro joined
[18:57] * TimToady agrees it should work in this case

[18:58] <betterworld> I think the uppercase Set is mutuble, but that doesn't work either with (|)=

[18:59] <TimToady> p6: my @a = 1,2,3; @a [X*]= 4; say @a

[18:59] <camelia> rakudo-jvm 25c511: OUTPUT«(timeout)»

[18:59] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«4 8 12␤»

[18:59] <camelia> ..rakudo-{parrot,moar} 25c511: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Preceding context expects a term, but found infix = instead␤at /tmp/tmpfile:1␤------> [32mmy @a = 1,2,3; @a [X*]=[33m⏏[31m 4; say @a[0m␤»

[18:59] <TimToady> niecza++

[19:00] *** isBEKaml left
[19:00] <TimToady> Set is not mutable either; set() is just Set.new in disguise

[19:00] <jnthn> Rakudo's parsing for infix= looks very much like STDs, so I@m not sure what's going on.

[19:00] <jnthn> oh, wait...not quite

[19:00] <TimToady> std: my @a = 1,2,3; @a [X*]= 4; say @a

[19:00] <camelia> std 0f2049c: OUTPUT«ok 00:01 126m␤»

[19:01] <jnthn> I can see why the latter doesn't work

[19:01] <jnthn> I can't see why the set ones don't.

[19:02] *** Rotwang left
[19:02] <jnthn> STD has an awful extensibility-killing hack, alas...

[19:02] <jnthn> [ <?before '='> <?{ $infix = $<infix>; }> <infix_postfix_meta_operator($infix)>

[19:02] <jnthn> So infix postfix meta-operators can only start with = :P

[19:02] <TimToady> yes, '=' is a bit of a special case

[19:02] <jnthn> OK, we're missing that special-casing in Rakudo...what is actually demanding the before, and not letting it fall out of LTM?

[19:03] <jnthn> oh, the need for the block maybe...

[19:03] <TimToady> I don't remember why, offhand

[19:03] <jnthn> Anyways, seems our infixish could do with a little re-org...

[19:03] *** treehug88 left
[19:06] <TimToady> could've been some limitation of the P5 support for doing fancy stuff like passing the infix match to the subrule

[19:07] <TimToady> or maybe it was somehow related to making sure that the LTM didn't suffer an exponential explosion somewhere

[19:07] <TimToady> as it is, that one case pretty much doubles the number of infixes

[19:08] <TimToady> if you try to include the = in the LTM, which I don't think it tries to anymore

[19:08] <TimToady> so it might be a fossil

[19:09] <zengargoyle> i sorta thought SetHash was the mutable version of Set

[19:09] <jnthn> k

[19:09] <TimToady> zengargoyle: it is

[19:09] <jnthn> Still got $dayjob things to tend to for now, so can't look at it for the moment.

[19:09] <TimToady> you can do $set<foo> = True if $set is a SetHash, but not if it's a Set

[19:10] <hoelzro> let's say I have a role that uses some helper classes, and now I want to expose those classes for extension to the outside world.  My::Role::Inner doesn't seem to work; should it? Or should I just convert the whole thing into a module?

[19:11] <TimToady> and the SetHash could implement the op= directly, instead of relying on a container

[19:11] <jnthn> hoelzro: You can't sanely put non-lexical things inside of a role, due to the genericity of a role.

[19:11] <TimToady> much less GC load to avoid creating new set objects continually

[19:11] <hoelzro> jnthn: ah, ok

[19:12] *** spider-mario joined
[19:12] <jnthn> hoelzro: We should probably make it an error to do so.

[19:12] <jnthn> Rather than them just vanish into the ether...

[19:12] <hoelzro> heh

[19:12] <jnthn> Even then it's all rather suspect to nest things inside the role.

[19:12] <hoelzro> I'm beginning to see that

[19:12] <hoelzro> =)

[19:12] <jnthn> Because we don't make all the inner things generic either.

[19:12] <TimToady> we work very hard to keep our intentional genericity separate from our accidental genericity in p6

[19:13] <jnthn> So much can go wrong.

[19:13] <TimToady> p5 was so accidentially generic

[19:13] <hoelzro> I found some interesting behavior where it worked fine when the methods were in the "default" consumer class of a role, but when I moved the methods into the role, my script broke

[19:13] <hoelzro> in an unpredictable way

[19:14] <hoelzro> and although I will probably move past this design and this sort of thing should be discouraged, I was thinking on mentioning it as a possible rakudo bug

[19:14] <jnthn> Thing is, the classes inside the role will end up closing over a single copy of the type variable - the latest one...

[19:14] <jnthn> And any other role params.

[19:15] <hoelzro> oh, that's interesting

[19:15] <jnthn> Which is not a semantic I like.

[19:15] <hoelzro> now, if my outer role is not parameterized...should it matter?

[19:15] <jnthn> Well, all roles are parameterized

[19:15] *** hoverboard joined
[19:15] <TimToady> the apocalpyses wanted Forests of Frogs, but we never quite got there, since it entails virtual class names

[19:15] <jnthn> They all get an implicit first parameter which is ::?CLASS

[19:16] <jnthn> Which is used for the type of the invocant.

[19:16] <hoelzro> oh, duh

[19:16] <jnthn> Otherwise, composing a role into a few classes and expecting multi-dispatch to do the right thing wouldn't work out well

[19:16] <jnthn> (That was actually broken in an earlier impl of roles, 4 years ago.)

[19:17] <hoelzro> well, lemme see if I can code up a small example

[19:17] <hoelzro> my module has gotten quite big

[19:19] <hoelzro> jnthn: if you're curious: https://gist.github.com/hoelzro/e03fc6ab275563643d65

[19:19] <hoelzro> don't ask me what madness started this =)

[19:20] <hoelzro> I'll be doing some refactoring after work to fix this

[19:20] <hoelzro> when you move BUILD into DefaultOptionCanonicalizer, it works fine

[19:22] *** telex left
[19:24] *** isBEKaml joined
[19:24] *** telex joined
[19:25] *** hoverboard is now known as hovercraft

[19:30] *** hovercraft is now known as moistcherry

[19:32] *** LordV left
[19:37] *** atroxaper joined
[19:41] *** isBEKaml left
[19:42] *** atroxaper left
[19:46] *** moistcherry is now known as hoverboard

[19:47] *** itz_ left
[19:54] *** skids left
[19:55] <[Coke]> colomon_: ping

[19:55] <colomon_> [Coke]: pochi 

[19:55] <colomon_> er, pong

[19:55] <[Coke]> mmhehe

[19:55] * colomon_ is not sure how that happened

[19:55] *** _slade left
[19:55] <[Coke]> colomon_: see S32-list/sort.t - there's a commented out test there with your name on it. If that's an invalid test, can we just remove it?

[19:55] <[Coke]> guesses you typed P O TAB

[19:56] <colomon_> probably

[19:56] <colomon_> leftover text editor (TextMate) impulses, cause surely someone already type pong here, right?

[19:57] <[Coke]> in fact, looks like that whole block might be wonky.

[19:58] <[Coke]> ah, no, just the commented out stuff and the _2 class.

[19:58] <[Coke]> removing it.

[19:58] <colomon_> I dunno.

[19:58] <colomon_> it's all on the weird side

[19:59] <colomon_> For sure defining multi sub cmp(RT71258_2 $a, RT71258_2 $b) shouldn't affect sort

[20:00] <dalek> roast: 89d6c1b | coke++ | S32-list/sort.t:

[20:00] <dalek> roast: Remove commented out invalid test/unused class

[20:00] <dalek> roast: review: https://github.com/perl6/roast/commit/89d6c1bbed

[20:00] <[Coke]> colomon++

[20:01] <colomon_> on the flip side, it would be nice  if multi sub infix:<cmp> *did* affect sort.  but it doesn't, does it?

[20:01] <lue> .tell atroxaper assuming L<foo> is a synonym for L<doc:foo> (S26 doesn't say anything about this explicitly), I could see a case for L<C<foo>> being equivalent to L<doc:foo> rather than L<doc:C<foo>>. However, I'd also say L<C<foo>> is wrong, and you deserve whatever broken output results :) You really should do either C<L<foo>> or L<C<foo>|foo>

[20:01] <yoleaux> lue: I'll pass your message to atroxaper.

[20:02] <carlin> there's an irssi script that lets you do tab-completion on words using /usr/share/dict/words

[20:03] <[Coke]> r: my %h; $line = $?LINE; %h = { a => 1 }; %h = { b => 2 };

[20:03] * lue would argue that links should be treated as verbatim even when there's no alternate presentation present.

[20:03] <camelia> rakudo-{parrot,jvm,moar} 25c511: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Variable '$line' is not declared␤at /tmp/tmpfile:1␤------> [32mmy %h; $line[33m⏏[31m = $?LINE; %h = { a => 1 }; %h = { b => [0m␤    expecting any of:␤        pos…»

[20:03] <[Coke]> r: my %h; %h = { a => 1 }; %h = { b => 2 };

[20:03] <camelia> rakudo-{parrot,jvm,moar} 25c511: OUTPUT«Saw 1 call to deprecated code during execution.␤================================================================================␤%h = { ... } called at:␤  /tmp/tmpfile, line 1␤Please use %h = ... instead.␤----------------------------…»

[20:04] *** skids joined
[20:05] <[Coke]> 6

[20:08] <rindolf> Hi all.

[20:08] <PerlJam> greetings rindolf.  How are you this fine day?

[20:08] <rindolf> TimToady: are you on Reddit? If not - you should be.

[20:08] <rindolf> PerlJam: I'm fine - philosophical.

[20:09] <rindolf> PerlJam: I socialised with some dog owners/etc. today.

[20:09] <hoverboard> fwilson suck it

[20:09] <rindolf> A 12 years old boy enjoyed my new Emma Watson factoid.

[20:09] <timotimo> what was that?

[20:09] <hoverboard> ezech_ centos

[20:10] <TimToady> hoverboard: you seem to be on the wrong channel

[20:11] *** kaare_ left
[20:11] <rindolf> PerlJam: are you on reddit?

[20:11] <rindolf> TimToady: meow!

[20:12] <hoverboard> TimToady, apologies, was trying /amsg without knowing what it did

[20:13] <TimToady> hugme: hug hoverboard

[20:13] * hugme hugs hoverboard

[20:13] <PerlJam> rindolf: I have gotten on reddit.  I'm not on it right now.

[20:13] <hoverboard> ):

[20:14] <rindolf> PerlJam: yes, I meant if you have an active reddit account.

[20:14] <PerlJam> aye.  Idon't reddit much though

[20:14] <PerlJam> It turns out that I'm not very social :)

[20:14] * TimToady needs to be on writit, not reddit

[20:14] <rindolf> PerlJam: heh, not true.

[20:14] <rindolf> TimToady: heh.

[20:15] <TimToady> or maybe wrottit

[20:15] <dalek> rakudo/nom: c55942f | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo/Local/File.pm:

[20:15] <dalek> rakudo/nom: Make CURL::File faster

[20:15] <dalek> rakudo/nom: 

[20:15] <dalek> rakudo/nom: This gets us back the time we lost in the spectest recently.  Part of the

[20:15] <dalek> rakudo/nom: speedup is attained by only going through the directory of the CompUnitRepo

[20:15] <dalek> rakudo/nom: only once: this behaviour may need tweaking in certain situations.

[20:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c55942ff89

[20:16] <rindolf> TimToady: reminds me of https://groups.yahoo.com/neo/groups/fc-solve-discuss/conversations/messages/1301

[20:16] <rindolf> TimToady: reddit is kinda like a new (and in most respects - better) Usenet

[20:17] <rindolf> TimToady: Usenet has become unusable now.

[20:17] <rindolf> It was good up to the end of Web 1.0 or so.

[20:18] * [Coke] reads http://blogs.perl.org/users/chad_exodist_granum/2014/07/changes-to-testbuildermoresimple-incoming.html and wonders if we have any fallout.

[20:18] <rindolf> TimToady: you should totally do an "I am Larry Wall, the creator of patch, rn, perl and Perl - ask me anything."

[20:20] *** skids left
[20:22] <FROGGS> jnthn: I think I'll know what block triggers the parrot fail in the next hours...

[20:23] <rindolf> Arguably both patch and rn alone were more important than perl and Perl.

[20:23] <[Coke]> I think we're missing a dep in the moarvm rakudo build.

[20:23] <[Coke]> (with -j9, it tries to copy perl6-m into place before the setting is built.

[20:23] <rindolf> TimToady: I'd love to see you on ##philosophy too.

[20:24] <TimToady> rindolf: self-promotion is not really very high on my todo list these days, nor is writing my memoirs...

[20:24] <FROGGS> [Coke]: ahh, that kind of dep

[20:25] <dalek> roast: ccc4e24 | coke++ | S02-types/deprecations.t:

[20:25] <dalek> roast: Remove tests for old version of Order

[20:25] <dalek> roast: 

[20:25] <dalek> roast: There was never a "released" perl6 spec for this, so we don't have to

[20:25] <dalek> roast: test/support the old values - they've already been removed from rakudo.

[20:25] <dalek> roast: review: https://github.com/perl6/roast/commit/ccc4e242cb

[20:25] <rindolf> And maybe it's me, but I think Perl 6 was good while it lasted and we should now rethink our strategy. It's far too perfectionist and 2nd system effect.

[20:25] *** erkan joined
[20:25] <zengargoyle> i think there are already plenty of TimToady answering questions and rambling alredy on YouTube. :P

[20:25] <TimToady> rindolf: it's just you :P

[20:25] <rindolf> TimToady: OK, you can still be on reddit, and answer questions or post interesting stuff.

[20:26] <rindolf> TimToady: I kinda have the Cassandra syndrome.

[20:26] <[Coke]> rindolf: I imagine you'll not get a lot of traction with that train of thought unless you have specific ideas about what else to do besides work on Perl 6.

[20:26] <FROGGS> rindolf: it really is just you :o)

[20:26] <TimToady> every time I answer a question on reddit, I forget a Japanese verb :)

[20:26] <rindolf> TimToady: or http://www.shlomifish.org/humour/fortunes/show.cgi?id=same-ideas-as-everybody-else

[20:26] <rindolf> TimToady: heh, believe in yourself.

[20:27] <TimToady> I'd rather believe in using the time I have left usefully.

[20:27] <rindolf> TimToady: "every time you masturbate god kills a kitten", right?

[20:27] <rindolf> TimToady: ah, you can become rich easily enough.

[20:27] <rindolf> And then have MOAR time.

[20:27] <rindolf> TimToady: charge people for public speeches.

[20:28] * lizmat wonders about the future of rindolf 

[20:28] *** beastd joined
[20:28] * TimToady is not the least bit interested in making a lot of money

[20:28] <rindolf> TimToady: or collect donations after that - stand-up philosophy.

[20:28] <rindolf> TimToady: don't you want more time?

[20:28] <FROGGS> rindolf: you can't buy time basically

[20:28] <rindolf> lizmat: well, tomorrow i may get hit by a bus.

[20:28] <TimToady> money and time are only slightly interfungible

[20:28] <rindolf> FROGGS: well, time >>> money.

[20:29] <FROGGS> rindolf: only sort of

[20:29] <[Coke]> multi-dim arrays are NYI, correct?

[20:29] <rindolf> I have a lot of time because i'm happily unemployed, but i need money.

[20:29] <lizmat> [Coke]: yes

[20:29] <rindolf> My parents mostly support me.

[20:29] <TimToady> my most precious resource is my energy, and I have only so much of that to spend each day

[20:29] <rindolf> and also national insurance.

[20:29] <rindolf> TimToady: I have more and more energy.

[20:29] <rindolf> And i'm 37.

[20:29] <rindolf> And don't exercise a lot.

[20:30] <PerlJam> rindolf: this isn't a self-help group ;)

[20:30] * TimToady wanders off to get more energy from lunch...

[20:30] <dalek> roast: ef44f78 | coke++ | S02-types/array.t:

[20:30] <dalek> roast: use standard "NYI" text

[20:30] <dalek> roast: review: https://github.com/perl6/roast/commit/ef44f78260

[20:30] <lizmat> TimToady++  rindolf--

[20:30] <rindolf> TimToady: om nom nom.

[20:30] <rindolf> lizmat: :-)

[20:30] <rindolf> lizmat++ # Balance in the force.

[20:31] <rindolf> lizmat: maybe TimToady should work half-time.

[20:31] <PerlJam> lizmat++ TimToady++ (because there still isn't enough karma for some people)

[20:31] <FROGGS> rindolf: perhaps it is better to end that discussion

[20:31] <rindolf> PerlJam++

[20:31] <rindolf> FROGGS: sure, sorry.

[20:31] * lizmat is reminded of Jar Jar Binks

[20:31] <rindolf> IS there a #TimToady ?

[20:32] <rindolf> So ... how's the weather?

[20:32] <lizmat> should there be a #rindolf ?

[20:32] <FROGGS> rindolf: I'm not sure he'd enjoy that

[20:32] <lizmat> news at eleven

[20:32] <rindolf> lizmat: it was sometimes created ad-hoc.

[20:32] <rindolf> lizmat: there's #perlcafe and stuff.

[20:32] <rindolf> Everyone is welcome.

[20:32] <[Coke]> r: our sub eval_born { 5 }; OUR::eval_born()

[20:32] <rindolf> Everyone is welcome to join #perlcafe .

[20:33] <camelia> rakudo-jvm 25c511: OUTPUT«No such method 'Any' for invocant of type 'Parcel'␤  in any  at gen/jvm/BOOTSTRAP.nqp:1661␤  in block  at /tmp/tmpfile:1␤␤»

[20:33] <camelia> ..rakudo-parrot 25c511: OUTPUT«No such method 'Any' for invocant of type 'Parcel'␤  in any  at gen/parrot/BOOTSTRAP.nqp:1673␤  in block  at /tmp/tmpfile:1␤␤»

[20:33] <camelia> ..rakudo-moar 25c511: OUTPUT«Cannot find method 'Any'␤  in block  at /tmp/tmpfile:1␤␤»

[20:33] * lizmat decides to forget Jar Jar Binks

[20:33] * rindolf kinda hates speaking in riddles.

[20:33] <rindolf> lizmat: who can forget him?He's awesome.

[20:33] * jnthn kinda hates rindolf speaking...

[20:34] <rindolf> lizmat: http://www.debunking911.com/questions.htm - see this - he's running for Senate.

[20:34] <rindolf> jnthn: sorry.

[20:34] <[Coke]> r: say &OUR::bar() # RT #120930

[20:34] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120930

[20:34] <camelia> rakudo-jvm 25c511: OUTPUT«No such method 'Any' for invocant of type 'Parcel'␤  in any  at gen/jvm/BOOTSTRAP.nqp:1661␤  in block  at /tmp/tmpfile:1␤␤»

[20:34] <camelia> ..rakudo-parrot 25c511: OUTPUT«No such method 'Any' for invocant of type 'Parcel'␤  in any  at gen/parrot/BOOTSTRAP.nqp:1673␤  in block  at /tmp/tmpfile:1␤␤»

[20:34] <camelia> ..rakudo-moar 25c511: OUTPUT«Cannot find method 'Any'␤  in block  at /tmp/tmpfile:1␤␤»

[20:34] <rindolf> jnthn: anytihng you're working on?

[20:35] <FROGGS> m: our sub eval_born { 5 }; say OUR::

[20:35] <camelia> rakudo-moar 25c511: OUTPUT«("\&eval_born" => sub eval_born () { #`(Sub|140451773726160) ... }).hash␤»

[20:35] *** skids joined
[20:35] <FROGGS> m: our sub eval_born { 5 }; say OUR::eval_born

[20:35] <camelia> rakudo-moar 25c511: OUTPUT«(Any)␤»

[20:35] <FROGGS> m: our sub eval_born { 5 }; say OUR::eval_born()

[20:35] <camelia> rakudo-moar 25c511: OUTPUT«Cannot find method 'Any'␤  in block  at /tmp/u6UhQiyEs7:1␤␤»

[20:35] <FROGGS> m: our sub eval_born { 5 }; say OUR::<&eval_born()>

[20:35] <camelia> rakudo-moar 25c511: OUTPUT«(Any)␤»

[20:35] <FROGGS> m: our sub eval_born { 5 }; say &OUR::eval_born()

[20:35] <camelia> rakudo-moar 25c511: OUTPUT«5␤»

[20:36] <rindolf> ok , maybe I Should leave and chat to TimToady on PM.

[20:36] *** dmol left
[20:36] <PerlJam> rindolf: or let him eat his lunch in peace?

[20:36] <[Coke]> use Test; eval_lives_ok 'our sub eval_born { 5 }', 'can define a sub in eval'; is &OUR::eval_born(), 5

[20:36] <rindolf> Carpe Diem! "He who saves one soul has saved the world entire" -- the JEwish Oral Torah.

[20:37] <[Coke]> r: use Test; eval_lives_ok 'our sub eval_born { 5 }', 'can define a sub in eval'; is &OUR::eval_born(), 5

[20:37] <camelia> rakudo-moar 25c511: OUTPUT«ok 1 - can define a sub in eval␤Cannot find method 'Any'␤  in block  at /tmp/tmpfile:1␤␤»

[20:37] <camelia> ..rakudo-jvm 25c511: OUTPUT«ok 1 - can define a sub in eval␤No such method 'Any' for invocant of type 'Parcel'␤  in any  at gen/jvm/BOOTSTRAP.nqp:1661␤  in block  at /tmp/tmpfile:1␤␤»

[20:37] <camelia> ..rakudo-parrot 25c511: OUTPUT«ok 1 - can define a sub in eval␤No such method 'Any' for invocant of type 'Parcel'␤  in any  at gen/parrot/BOOTSTRAP.nqp:1673␤  in block  at /tmp/tmpfile:1␤␤»

[20:37] <rindolf> PerlJam: sure, we'll talk when he returns.

[20:37] <rindolf> PerlJam: I'm still here for the time being.

[20:38] *** araujo joined
[20:38] *** araujo left
[20:38] *** araujo joined
[20:38] <[Coke]> m: EVAL "our sub eval_born {5}"; eval_born.say

[20:38] <camelia> rakudo-moar 25c511: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/or5aRkpvmW␤Undeclared routine:␤    eval_born used at line 1␤␤»

[20:38] <[Coke]> m: EVAL "our sub eval_born {5}"; eval_born().say

[20:38] <camelia> rakudo-moar 25c511: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/ZJ_7FnJ1fP␤Undeclared routine:␤    eval_born used at line 1␤␤»

[20:39] <[Coke]> so, this is related to the LTA message, but not quite the same.

[20:39] <FROGGS> [Coke]: you should use single quotes for one thing

[20:40] <jnthn> It doesn't actually get as far as the eval

[20:40] <jnthn> *EVAL

[20:40] <[Coke]> m: EVAL 'our sub eval_born {5}'; eval_born().say

[20:40] <camelia> rakudo-moar 25c511: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/yShBdJhkAy␤Undeclared routine:␤    eval_born used at line 1␤␤»

[20:40] <FROGGS> m: EVAL 'our sub eval_born {5}'; &::('eval_born)().say

[20:40] <camelia> rakudo-moar 25c511: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Lct11FY1Lr␤Unable to parse expression in single quotes; couldn't find final "'" ␤at /tmp/Lct11FY1Lr:1␤------> [32mub eval_born {5}'; &::('eval_born)().say[33m⏏[31m<EOL>[0m␤    expectin…»

[20:40] <[Coke]> jnthn: looking at S02-names/our.t

[20:40] <FROGGS> m: EVAL 'our sub eval_born {5}'; &::('eval_born')().say

[20:40] <camelia> rakudo-moar 25c511: OUTPUT«5␤»

[20:41] <[Coke]> first test thinks you can do OUR::Eval_born() after that EVAL

[20:41] <FROGGS> [Coke]: only at runtime

[20:41] <FROGGS> m: EVAL 'our sub eval_born {5}'; &::('OUR::eval_born')().say

[20:41] <camelia> rakudo-moar 25c511: OUTPUT«5␤»

[20:41] <[Coke]> shall I update the test to use &:: ?

[20:42] <FROGGS> either that or do not use EVAL

[20:42] <[Coke]> part of the point is to use EVAL.

[20:43] <[Coke]> "call to eval-born our sub via OUR works"

[20:43] <FROGGS> yeah, then you have to invoke it indirectly...

[20:43] <FROGGS> err

[20:43] <FROGGS> OUR:: is still compile time

[20:43] <jnthn> m: EVAL 'our sub eval_born {5}'; say OUR::eval_born()

[20:43] <camelia> rakudo-moar 25c511: OUTPUT«Cannot find method 'Any'␤  in block  at /tmp/dBoipup99e:1␤␤»

[20:43] <jnthn> ugh

[20:44] <jnthn> That *is* an LTA error.

[20:44] <FROGGS> or should OUR:: be runtime?

[20:44] <[Coke]> there is already a ticket for the LTA error.

[20:44] <jnthn> OK

[20:44] <[Coke]> https://rt.perl.org/Ticket/Display.html?id=120930

[20:44] <jnthn> Sorry, only half able to follow

[20:44] <rindolf> Bye all, this channel has too low Signal to noise ratio.

[20:44] *** rindolf left
[20:44] <FROGGS> O.o

[20:45] <[Coke]> yah, shame we talk so much about getting perl 6 done.

[20:45] <[Coke]> <eyeroll>

[20:45] <lizmat> *phew*

[20:45] <FROGGS> ahh

[20:45] <FROGGS> m: EVAL 'our sub eval_born {5}'; say &OUR::eval_born()

[20:45] <camelia> rakudo-moar 25c511: OUTPUT«5␤»

[20:45] <FROGGS> now I get it

[20:45] <jnthn> oh!

[20:45] <jnthn> Well, at least that works, yes...

[20:45] <[Coke]> odd.

[20:46] <FROGGS> 5, yeah :o)

[20:46] <jnthn> I think it's compiling th eother one into a coercion.

[20:46] <masak> does rindolf have a known problem of some kind? just curious.

[20:46] <[Coke]> m: use Test; eval_lives_ok 'our sub eval_born {5}' ; is &OUR::eval_born(), 5

[20:46] <camelia> rakudo-moar 25c511: OUTPUT«ok 1 - ␤Cannot find method 'Any'␤  in block  at /tmp/wxx1hRFDi2:1␤␤»

[20:46] <FROGGS> (roughly five steps until I know what explodes in perl6-p)

[20:46] *** FOAD left
[20:47] <[Coke]> ^^ why does that work in FROGG's standalone, but not in the testS?

[20:47] *** skids left
[20:47] <FROGGS> [Coke]: the test is ok

[20:47] <FROGGS> but there is no desription

[20:47] <FROGGS> description, even

[20:47] <FROGGS> m: use Test; eval_lives_ok 'our sub eval_born {5}' ; is &OUR::eval_born(), 5, 'heureka'

[20:47] <camelia> rakudo-moar 25c511: OUTPUT«ok 1 - ␤Cannot find method 'Any'␤  in block  at /tmp/PsHy4IGHVR:1␤␤»

[20:47] <[Coke]> m: use Test; eval_lives_ok 'our sub eval_born {5}', "two" ; is &OUR::eval_born(), 5, "two"

[20:47] <camelia> rakudo-moar 25c511: OUTPUT«ok 1 - two␤Cannot find method 'Any'␤  in block  at /tmp/2XqdNmncZ6:1␤␤»

[20:47] <FROGGS> ummm

[20:47] <[Coke]> m: use Test; eval_lives_ok 'our sub eval_born {5}', "er, one" ; is &OUR::eval_born(), 5, "two"

[20:47] <camelia> rakudo-moar 25c511: OUTPUT«ok 1 - er, one␤Cannot find method 'Any'␤  in block  at /tmp/aRXOIGg6GR:1␤␤»

[20:48] <[Coke]> ^^ nope.

[20:48] <FROGGS> m: EVAL 'our sub eval_born {5}'; say &OUR::eval_born() == 5

[20:48] <camelia> rakudo-moar 25c511: OUTPUT«True␤»

[20:48] <lizmat> masak: http://www.shlomifish.org/meta/FAQ/#mental_illness

[20:48] <masak> lizmat: thank you, that was exactly what I was looking for.

[20:48] <PerlJam> lizmat++ I hadn't realized rindolf put that stuff in a FAQ

[20:50] <[Coke]> m: use Test; EVAL 'our sub eval_born {5}'; is &OUR::eval_born(), 5

[20:50] <camelia> rakudo-moar 25c511: OUTPUT«ok 1 - ␤»

[20:50] <[Coke]> m: use Test; eval_lives_ok 'our sub eval_born {5}'; is &OUR::eval_born(), 5

[20:50] <camelia> rakudo-moar 25c511: OUTPUT«ok 1 - ␤Cannot find method 'Any'␤  in block  at /tmp/6PoLkNCcU7:1␤␤»

[20:50] <[Coke]> so, EVAL works, but eval_lives_ok barfs it?

[20:51] <FROGGS> [Coke]: I know it...

[20:51] <FROGGS> eval_lives_ok introduces a new scope

[20:51] <[Coke]> so, have to rewrite that test to use try EVAL ?

[20:52] <jnthn> Well, this is about our scoping, and eval_lives_ok is in the Test module

[20:52] <[Coke]> (and then an OK if no $!, with a note about why?

[20:53] <[Coke]> jnthn: would you say the fix is to change eval_lives_ok?

[20:54] <jnthn> tbh, I'd probably just lives_ok { EVAL '...' }

[20:54] <[Coke]> danke.

[20:55] *** FOAD joined
[20:56] *** denis_boyun left
[20:58] <dalek> roast: 188a225 | coke++ | S02-names/our.t:

[20:58] <dalek> roast: Avoid introducing extra scope; hides our sub

[20:58] <dalek> roast: use & to invoke sub.

[20:58] <dalek> roast: 

[20:58] <dalek> roast: jnthn++ FROGGS++

[20:58] <dalek> roast: review: https://github.com/perl6/roast/commit/188a22536b

[20:58] *** denis_boyun_ joined
[20:59] <lizmat> FROGGS: in CompUnitRepo there is a method "files"

[20:59] <FROGGS> lizmat: yes

[20:59] <[Coke]> there, only 991 rakudo directives that don't have an RT or a NYI associated with them. :|

[20:59] <lizmat> it seems to be the same as candidates

[20:59] <lizmat> I'm trying to grok what you meant by it

[20:59] <lizmat> is this some attempt at allowing %?RESOURCE ?

[21:00] <FROGGS> lizmat: candidates is about namespaces, .files is about resources

[21:00] <FROGGS> resources also mean binaries btw

[21:00] <FROGGS> because you query for CUR.files('bin/prove')

[21:01] <lizmat> is that being done anywhere yet ?

[21:01] <FROGGS> and that already works, and is used by the wrappers that are put in the bin folder

[21:01] <[Coke]> m: say Junction; say junction;

[21:01] <camelia> rakudo-moar 25c511: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/lhACmcY4tX␤Undeclared routine:␤    junction used at line 1␤␤»

[21:01] <[Coke]> m: say Junction;

[21:01] <camelia> rakudo-moar 25c511: OUTPUT«(Junction)␤»

[21:01] <FROGGS> lizmat: in case you would install a binary into an inst://, yes

[21:02] <lizmat> maybe we should spec a %?BIN then ?

[21:02] <FROGGS> lizmat: would that help?

[21:02] <lizmat> that would map to 'bin' in the distribution

[21:03] <lizmat> well, we need to have the same filename mangling properties as we do on resourced and modules

[21:03] <lizmat> *resources

[21:03] <FROGGS> hmmm no, not really

[21:04] <FROGGS> when you create a dist that provide binary scripts, then these must be latin1, otherwise many ppl won't be able to execute them

[21:04] <timotimo> ... binary scripts ... in latin1?

[21:04] <lizmat> the names

[21:04] <FROGGS> timotimo: the name you **** :P

[21:05] <FROGGS> *g*

[21:05] <lizmat> I'm not sure that's a valid assumption or a needed one

[21:05] <lizmat> but your point of not needing to mangle the filename is clear

[21:05] <timotimo> ah, now i know what you mean

[21:05] <FROGGS> lizmat: well, we can/must mangle it, sure

[21:06] <lizmat> but then how would one know the name to type in a CLI ?

[21:06] <FROGGS> but the authors must also keep in mind that a punycode encoded filename of a script is not ideal

[21:06] <timotimo> i'm not sure if i asked this before, but do we have something like "give me the folder where my stuff is stored" where stuff refers to ... stuff

[21:06] <timotimo> like icons/pictures, sound files, assets of that kind

[21:06] <FROGGS> the author must name it sanely, that's the point

[21:06] <timotimo> static files for a web site

[21:06] <timotimo> stuff like that

[21:07] <lizmat> timotimo: %?RESOURCE

[21:07] <FROGGS> timotimo: I think so, yes

[21:07] <timotimo> oh, that's neat

[21:07] <timotimo> how customizable is that? can a distro (debian/ubuntu/fedora) say "the assets have to go into this folder, please" and it'll work?

[21:07] <lizmat> S22:366 and S22:633

[21:07] <timotimo> synopsebot!

[21:07] <Mouq> atroxaper: I agree that L<C<boom>> should really DWIM

[21:08] <timotimo> do you know "physicsfs"?

[21:08] <FROGGS> timotimo: depends in what comp unit repo you install to

[21:08] <synopsebot> Link: http://perlcabal.org/syn/S22.html#line_366

[21:08] <timotimo> you can have folders and zipfiles and stuff and "layer" them over each other

[21:08] <lizmat> timotimo: I'm still in 2 minds about that

[21:08] <timotimo> so that one has a higher priority than the other and you can make patches and mods that way

[21:09] <lizmat> on the one hand, I would like to see one "index" in each CURL::Installation that is read once and can be inspected at compile/run time

[21:09] <lizmat> but that sort of works against package distributors

[21:09] <timotimo> hmm. it's also kinda not so awesome that you have to supply the paths to all the files

[21:09] <lizmat> so I was thinking maybe we need a CURL::RPM

[21:10] <lizmat> that would have an "index" for each installed module

[21:10] <FROGGS> lizmat: that's not against packagers I think... the vendor provides a CUR managed by apt for example, but I as a user install into a CUR in my home

[21:10] <FROGGS> that's how I see things

[21:10] <FROGGS> or I install into site, which is still separate from the vendor one

[21:11] <lizmat> yes, but a vendor wants to be able to uninstalle and update

[21:11] <lizmat> this is not about where things get installed, but *how*

[21:11] <FROGGS> lizmat: sure, the vendor can do that with the vendor repo

[21:11] <lizmat> and potentially create their own module for that, indeed

[21:11] <FROGGS> lizmat: yes, the vendor can provide its own CUR class

[21:11] *** denis_boyun_ left
[21:12] <lizmat> still it would be nice if vendors would not have to do that and be able to use CURL::Installation

[21:12] <lizmat> even if that is in a separate dir

[21:12] <Mouq> .tell atroxaper https://github.com/perl6/Pod-To-HTML/commit/f70c57d29a4301b104f115a659417f07f013a947

[21:12] <yoleaux> Mouq: I'll pass your message to atroxaper.

[21:12] <FROGGS> yes, we'll see when we are there and talk to ppl like [Sno]++ or dod++

[21:12] <lizmat> s/even/but/

[21:12] *** denis_boyun joined
[21:13] <lizmat> I discussed this a lot with [Sno] and todd rinaldo

[21:13] *** gfldex left
[21:13] <FROGGS> lizmat: they need to play with it I think

[21:13] <lizmat> indeed, but first I need to make something for them to play with  :-)

[21:16] <FROGGS> I think there is still a regression in panda due to @*INC refactorings...

[21:16] <lizmat> please let me know what I broke

[21:17] <FROGGS> I think there was something about the ordering of lib dirs... which is kinda tricky in panda rebootstrap process

[21:17] <timotimo> *sigh*

[21:17] <FROGGS> I have to dig again into that, it is hard to understand and thus hard to explain

[21:17] *** treehug88 joined
[21:17] *** denis_boyun left
[21:18] <lizmat> FROGGS: also I'm still not sure whether it makes sense to have multiiple CUR objects in a single @*INC entry

[21:18] <lizmat> it's going to make it hard to explain

[21:18] <FROGGS> okay... at least I found the block in rakudo that triggers the perl6-p blowup

[21:19] <lizmat> in my view the first CUR in @*INC that returns any candidate, is the one that will be loaded

[21:19] <FROGGS> lizmat: we need a way to treat a bunch of CURs equally, so we need a way of grouping

[21:19] <lizmat> (if there is only 1, if there are more than 1, then it will die telling it can't disambiguate)

[21:19] <lizmat> why do we need that ?

[21:19] <FROGGS> lizmat: then we don't need CUR at all and can switch back to the P5 way

[21:20] <lizmat> huh?

[21:20] *** raiph joined
[21:20] <lizmat> could you elaborate (not necessarily now)

[21:20] *** denis_boyun joined
[21:21] *** rjbs left
[21:21] <FROGGS> one major problem of the P5 way is that you get the first dist found in @INC, whether there is a *better* dist in dirs after that

[21:22] <FROGGS> so you have to "uninstall" stuff from your home or site when you want the better one from vendor or perl

[21:22] <lizmat> no, you need to be more specific in your -use- statement

[21:22] *** dmol joined
[21:23] <FROGGS> and there is no way of telling: I have ten CURs, five on my disk, three in the web and two on another box, and I want to pick the *best* version from any of these

[21:23] <lizmat> this is part of the change in thinking we  need there

[21:23] <lizmat> I don't think you need to think about having the system selecting the "best" version of a module

[21:23] <FROGGS> lizmat: when I say: use Foo:from<lizmat>, I still get v1.1 from home when there is a v1.2 in site

[21:23] <[Coke]> m: my Mu $j; $j = 1|2; say WHAT($j).gist

[21:23] <camelia> rakudo-moar 25c511: OUTPUT«any((Int), (Int))␤»

[21:24] <lizmat> as a developer, you need to think about the version of a module that you *need*

[21:24] <lizmat> but do you *need* 1.2 in your code?

[21:24] <[Coke]> ^^ there is a test that assumes that should return (Junction)... but I think the is is autothreading it.

[21:24] <lizmat> if so, you should specify that with use Foo:ver(1.2)

[21:24] <ChoHag> Developers never need the toys they say.

[21:25] *** kurahaupo joined
[21:25] <lizmat> I would even argue that production code should *never* contain a bare "use Foo" in the future

[21:25] <FROGGS> lizmat: what if that is not code I maintain? what if someone releases a hotfix for Foo?

[21:25] <lizmat> for that we have "supersedes"

[21:26] <FROGGS> allowing to specify version ranges is to allow such scenarios

[21:26] <jnthn> [Coke]: ooh, an LHF just in time for be getting done with $dayjob bits

[21:26] * [Coke] thinks we can remove the comment at the head of Test.pm now.

[21:26] <jnthn> [Coke]: Yeah, I see what's up :)

[21:26] *** denis_boyun left
[21:26] <[Coke]> test is in S03-junctions/misc.t

[21:26] <FROGGS> lizmat: I think you are forcing restrictions that will not work out

[21:27] <lizmat> perhaps, but I don't see that as a restriction

[21:27] <FROGGS> for one because authors release stuff and then just vanish, and also not always think about versioning

[21:27] <lizmat> if you specify "use Foo" in production code, you really don't care which version/author you get

[21:27] <FROGGS> I see not allowing grouping as a restriction

[21:28] <lizmat> but grouping is only needed to resolve version conflicts, allowing the system to select the highest version

[21:28] <lizmat> within that group

[21:28] <FROGGS> lizmat: correct

[21:29] <FROGGS> it is not about conflicts, it is about crossing CUR boundaries, but yes

[21:29] <[Coke]> jnthn: is the problem with the is or the .gist in Junction?

[21:29] <lizmat> my argument is that the system shouldn't be doing this

[21:29] <FROGGS> it is about picking the best for your search criteria, and that not locked down to sequential lookup

[21:29] <[Coke]> (or the test? :)

[21:29] <lizmat> but how can you guarantee that a higher version means better ?

[21:29] <jnthn> [Coke]: Problem is with the WHAT actually

[21:30] <FROGGS> lizmat: it is not the system, it is me allowing this by configuring groups

[21:30] <[Coke]> dammit. :)

[21:30] <FROGGS> lizmat: that is how versions are meant to be

[21:30] <jnthn> > my Mu $j; $j = 1|2; say WHAT($j).gist

[21:30] <jnthn> (Junction)

[21:30] <jnthn> > my Mu $j; $j = 1|2; say WHAT($j)

[21:30] <jnthn> (Junction)

[21:30] <jnthn> (locally)

[21:30] <[Coke]> jnthn++ # that was fast.

[21:31] <[Coke]> -> commuting.

[21:33] <lizmat> FROGGS: reading up on S11 again

[21:34] *** firefish5000 joined
[21:34] <FROGGS> lizmat: sorry about my rising temper... perhaps I'd be able to accept it tomorrow :o)

[21:35] <FROGGS> I see that having groups in @*INC are odd... maybe a CUR::Group object would be cleaner, I dunno

[21:37] <FROGGS> jnthn: the block of this while relies on inlining: https://github.com/rakudo/rakudo/blob/nom/src/core/metaops.pm#L107

[21:39] <FROGGS> and it seems not to get inlined because of p6bindsig

[21:40] <FROGGS> or something else, dunno

[21:40] <lizmat> FROGGS: let me know when we can talk about this tomorrow

[21:40] <FROGGS> sure

[21:42] *** bluescreen10 left
[21:44] <jnthn> FROGGS: Ahh...that could explain it.

[21:44] <jnthn> Well, explain the lack of inlining

[21:45] <jnthn> Not the dependency on it

[21:45] <FROGGS> yeah, I do not even try to understand parrot in that case anymore...

[21:46] <FROGGS> s/parrot/perl6-p/

[21:47] <FROGGS> but yeah, I bisected all blocks that were sorted out, and now I only optimize this block (it is the 311'd block), and the others that match the criteria of your latest patch

[21:47] <jnthn> OK. I'm looking at the optimizer and pondering

[21:47] <jnthn> I think it should still inline that one

[21:52] <dalek> rakudo/nom: 049b796 | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo.pm:

[21:52] <dalek> rakudo/nom: CUR.files should call CURx.files, not .candidates

[21:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/049b796eec

[21:52] <lue> Gah, syngen got up to 67% of my RAM and was about to crash my computer for the third time :(  I really need to change the process from "for each step, go through all the files" to "for each file, go through all the steps"

[21:52] <FROGGS> ohh yes, that seemed to be a copy&pasto

[21:54] <jnthn> FROGGS: https://gist.github.com/jnthn/0d83712e55339f1361c2

[21:55] <timotimo> lue: if only that were easier :(

[21:55] <jnthn> FROGGS: I'm gonna spectest that here on r-m

[21:55] <dalek> rakudo/nom: d24fe59 | jnthn++ | src/core/operators.pm:

[21:55] <dalek> rakudo/nom: Fix signature of WHAT and VAR.

[21:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d24fe59283

[21:55] <jnthn> FROGGS: Hopefully it might allow that immediate inlining again and thus help

[21:56] <lue> timotimo: shouldn't be too bad in my case. I think the problem is that currently I'm trying to keep 37 synopses (parsed into a simplistic structure) in memory, and by the time I reach #16 it's a bit taxing on the RAM :)

[21:56] <timotimo> is that the only remaining block that is problematic with the inlining optimization b0rkage from recently?

[21:57] <lizmat> lue: I have that problem all the time

[21:57] <timotimo> ouch :)

[21:57] <lizmat> :-)

[21:57] <lue> It wasn't always a problem, it's just happened recently. But I need to make the process more multithreadable anyway :)

[21:58] <masak> why didn't we choose to design one of those small, cute languages instead? :P

[21:58] <masak> 'night, #perl6

[21:58] <lizmat> gnight masak 

[21:58] <FROGGS> masak: we can still switch to php6 :o)

[21:59] <FROGGS> it is just...

[21:59] <FROGGS> not small and not cute

[21:59] *** rjbs joined
[22:00] <lue> It would also be really nice if I could use the standard grammar's grammar rules for stuff, but that requires wrapping our heads around "slangs", and all the headaches that come along with it.

[22:00] <FROGGS> yes, hard work that is

[22:01] <lizmat> FROGGS: thinking about CUR some more

[22:01] <FROGGS> jnthn: it seems to help \o/ (running spectests now)

[22:01] <FROGGS> lizmat: yeah?

[22:01] <lizmat> maybe I should just make a separate CURL::Installation2 that I think matches the spec

[22:01] <FROGGS> lizmat: what is wrong with the current?

[22:02] <lizmat> it's not up to spec ?

[22:02] *** virtualsue joined
[22:02] <FROGGS> lizmat: is what way?

[22:02] <FROGGS> what exactly is not up to spec?

[22:02] <lue> I'm still mulling over what an AST manipulation language would look like. :)

[22:02] <lizmat> not doing smart matching on the authority or version

[22:03] <lizmat> not mangling file names

[22:03] <FROGGS> lizmat: the smart matching should be fixable without any regression

[22:04] <FROGGS> lizmat: what files do you want to mangle?

[22:04] <FROGGS> file names*

[22:04] <lizmat> all file names

[22:04] *** beastd left
[22:04] <FROGGS> lizmat: we do not store files to disk, except for binaries...

[22:06] <FROGGS> and to mangle these, we'd need a way to mangle them, like by implementing punycode

[22:07] <FROGGS> punycode has the charm that it is still kinda readable and there is no loss of information

[22:10] <jnthn> FROGGS: No spectest concerns on r-m

[22:11] <FROGGS> jnthn: I'm at S04, one aborting test file, and two other failings test files

[22:11] <jnthn> FROGGS: Is that an improvement?

[22:12] <lizmat> jnthn: I see 2 todo's passing:

[22:12] <jnthn> lizmat: Yes, me too :)

[22:12] <lizmat> m: WHAT(1|2).gist

[22:12] <camelia> rakudo-moar c55942: ( no output )

[22:12] <lizmat> m: WHAT(1|2).gist.say

[22:12] <camelia> rakudo-moar c55942: OUTPUT«any((Int), (Int))␤»

[22:12] <jnthn> lizmat: I think those are the tests taht [Coke]++ was talking about that led me to make the fix :)

[22:12] <FROGGS> jnthn: it feels identical to this hack: https://gist.github.com/FROGGS/0c85c2e1363abb4a45c1

[22:12] <FROGGS> jnthn: so, yes :o)

[22:12] <lizmat> 6 'WHAT(1|2).gist.say'

[22:12] <lizmat> (Junction)

[22:13] *** huf left
[22:14] <dalek> roast: 23f4832 | (Elizabeth Mattijsen)++ | S03-junctions/misc.t:

[22:14] <dalek> roast: Unfudge now passing tests

[22:14] <dalek> roast: review: https://github.com/perl6/roast/commit/23f48324ac

[22:14] <FROGGS> jnthn: feel free to push, can't get worse than this anymore: https://github.com/coke/perl6-roast-data/blob/master/log/rakudo.parrot_summary.out#L3258

[22:14] <dalek> rakudo/nom: fef7933 | jnthn++ | src/Perl6/Optimizer.nqp:

[22:14] <dalek> rakudo/nom: p6bindsig should not prevent immediate inlining

[22:14] <dalek> rakudo/nom: 

[22:14] <dalek> rakudo/nom: While on MoarVM we can lower signatures and thus optimize this out,

[22:14] <dalek> rakudo/nom: on other backends we don't, but should not lose the immediate inline

[22:14] <dalek> rakudo/nom: optimization on those. FROGGS++ also tracked down a behavior change

[22:14] <dalek> rakudo/nom: that resulted from disabling this optimization on r-p; it should not

[22:14] <dalek> rakudo/nom: make a difference, but this does indeed fix the r-p breakage.

[22:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fef79335fa

[22:15] <jnthn> lizmat: Thanks for unfudging.

[22:15] <lizmat> spectesting r-p

[22:16] <jnthn> FROGGS: There you go. Thanks a lot for hunting it down sufficiently well that the patch was fairly clear to see.

[22:16] <FROGGS> jnthn: that means we are back to about 20-30 fails, instead of 1800 :o)

[22:16] <timotimo> \o/

[22:16] <Mouq> lue: Is there anything major left TODO with your Pod::Walker to begin seeing if Pod::To::HTML can't be refactored to use it?

[22:17] <jnthn> FROGGS: OK, yay. :)

[22:17] <FROGGS> jnthn: yeah, but it still bothers me that you can provide a patch in seven minutes, when I look at it for days :o)

[22:18] <jnthn> FROGGS: Well, debugging is always the time consuming bit for me.

[22:18] <jnthn> in 95%+ of the cases, anyway.

[22:18] <FROGGS> yeah

[22:18] <lue> Mouq: no, the only thing was that I didn't want to publicize it much until I wrote a converter using it. I don't plan on doing that any time soon though, so feel free to try it out! :)

[22:19] <FROGGS> perhaps I have a chance some day to get into the optimizer a bit... but that day does not seem near

[22:19] <jnthn> A bunch of the Moar deopt patches were a few lines, but took O(hours) to work out

[22:20] <jnthn> Mouq's overight bug report is my next victim :)

[22:20] <lue> By the way, I like how "Pod Walker" sounds like a reference to some piece of sci-fi, yet I couldn't possibly guess which one (Star Wars is my best guess, for some reason) :P

[22:20] <timotimo> oh no!

[22:20] <FROGGS> same for v5... and there are a few nice things still waiting

[22:20] <timotimo> monday has come and gone and saw no weekly :(

[22:20] <lizmat> :-(  

[22:20] <jnthn> åhnejs!

[22:21] <timotimo> åhne.js?

[22:21] <FROGGS> timotimo: please mention the OpaquePointer and nativecast work of sergot and me :o)

[22:21] <timotimo> yes!

[22:21] <timotimo> ♥

[22:21] <jnthn> timotimo: *lol*, I have to write that library...

[22:22] <FROGGS> timotimo: sergot also connected to his https machine as the first result of openssl test bindings today

[22:23] <dalek> rakudo/nom: 056aaf9 | (Elizabeth Mattijsen)++ | docs/ChangeLog:

[22:23] <dalek> rakudo/nom: ChangeLog entry

[22:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/056aaf9232

[22:23] <FROGGS> okay, since perl6-p is in a good shape again I can peek into the JSON::RPC bug and in my Archive::Tar problem...

[22:24] <dalek> rakudo/nom: e77c12b | jnthn++ | src/Perl6/Actions.nqp:

[22:24] <dalek> rakudo/nom: Ensure lowered_param names are unique.

[22:24] <dalek> rakudo/nom: 

[22:24] <dalek> rakudo/nom: Not just unique per block, but per file; it seems the optimizer is

[22:24] <dalek> rakudo/nom: now smart enough to flatten/inline and thus cause collisions.

[22:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e77c12bb4e

[22:24] <jnthn> Mouq: Please try ^^ to see if it fixes the bug you reported earlier; it should. If not, I can take a deeper look.

[22:24] <timotimo> ouch %)

[22:25] <lizmat> jnthn: are you sure there is no missing $i in there ?

[22:25] <lizmat> or was that the point ?

[22:25] *** treehug88 left
[22:26] <FROGGS> QAST::Node.unique does that for you

[22:26] <jnthn> lizmat: Well, could do that too...

[22:26] <jnthn> lizmat: But feels like overkill to do both

[22:27] <lizmat> ok, just checking if I understood it correctly  :-)

[22:27] <FROGGS> m: use QAST:from<NQP>; say QAST::Node.unique('foo')

[22:27] <camelia> rakudo-moar c55942: OUTPUT«foo_1␤»

[22:27] <FROGGS> m: { use QAST:from<NQP>; say QAST::Node.unique('foo') }; { use QAST:from<NQP>; say QAST::Node.unique('foo') }

[22:27] <camelia> rakudo-moar c55942: OUTPUT«foo_1␤foo_2␤»

[22:31] <Mouq> jnthn++ won round 1

[22:31] <Mouq> Round 2 appears to be "

[22:31] <Mouq> Error while compiling op call: Required positionals must come before all optional positionals"

[22:32] <jnthn> Mouq: oh, ouch

[22:32] <Mouq> running with --ll-exception

[22:33] <Mouq> https://gist.github.com/Mouq/0eaaffdd956075f291ca

[22:34] *** jnap1 joined
[22:35] <jnthn> OK...round 2... :)

[22:35] <Mouq> Seriously, though, jnthn+++ for the quick solution to the first bug :)

[22:36] *** jnap left
[22:37] <jnthn> Mouq: I'm currently playing with this patch: https://gist.github.com/jnthn/eedc2eff5cbaeab83c06

[22:38] *** cognominal left
[22:38] *** cognominal joined
[22:39] <jnthn> m: while 1 -> $x { say 42 }

[22:39] <camelia> rakudo-moar d24fe5: OUTPUT«(timeout)42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42…»

[22:39] <jnthn> hmm

[22:44] *** spider-mario left
[22:44] <carlin> m: say DateTime.new("2014-06-26T22:52:13+12:00")

[22:44] <camelia> rakudo-moar d24fe5: OUTPUT«Invalid DateTime string '2014-06-26T22:52:13+12:00'; use an ISO 8601 timestamp (yyyy-mm-ddThh::mm::ssZ or yyyy-mm-ddThh::mm::ss+0100) instead␤  in method new at src/gen/m-CORE.setting:15422␤  in block  at /tmp/hCLW8Cbci0:1␤␤»

[22:45] *** btyler_ left
[22:45] <carlin> the colon in the offset is acceptable in ISO 8601

[22:45] <lue> Apparently there's a deprecated thing going on in Pod::To::HTML (that recent %a = {...} change), it's ruining my carefully crafted cursor manipulations! :)

[22:45] * carlin pouts

[22:46] <FROGGS> carlin: please file a bug report (and/or provide a PR)

[22:47] <FROGGS> carlin: here is its code: https://github.com/rakudo/rakudo/blob/nom/src/core/Temporal.pm#L253

[22:50] <jnthn> Mouq: argh, the patch is bad actually

[22:50] <jnthn> It'll bust Parrot again

[22:50] <FROGGS> ohh dear

[22:55] <jnthn> ugh, Pod::To::HTML has test fails too

[22:56] <jnthn> Also the patch doesn't actually fix it

[22:59] *** SevenWolf joined
[23:01] *** virtualsue left
[23:01] *** ajr_ left
[23:05] *** dmol left
[23:05] <jnthn> Mouq: Got htmlify.p6 running without that error now :)

[23:06] <jnthn> Mouq: Just gotta spectest my fix.

[23:10] <FROGGS> jnthn: I've provided a workaround for the JSON::RPC issues on MoarVM: https://rt.perl.org/Ticket/Display.html?id=122226#txn-1300057

[23:11] <lizmat> lue: wrt %a = {...} change: would you have rather had it die ?

[23:11] <lizmat> I mean, if deprecating it breaks more than just letting it die...

[23:12] *** rurban1 left
[23:12] <lizmat> also: it should only mention that after the process is done: so not sure how it could affect cursor manipulation?

[23:13] <lue> lizmat: death wouldn't affect me here, I'm using the module in a shell() call. If I was actually upset about how it ruins everything I'd just add 2>/dev/null  :)

[23:13] <lizmat> that's Pod::To::HTML ?

[23:13] <lue> Yes.

[23:13] <lizmat> must have missed that when going through core modules

[23:14] <lue> shell("$*EXECUTABLE_NAME --doc=HTML $_ > $outfile") is what I'm doing, if you're curious.

[23:14] <jnthn> Pod::To::HTML is ecosystem

[23:14] <dalek> rakudo/nom: b014db2 | jnthn++ | src/Perl6/Optimizer.nqp:

[23:14] <dalek> rakudo/nom: Don't inline if/while pointy blocks.

[23:14] <dalek> rakudo/nom: 

[23:14] <dalek> rakudo/nom: This should unbreak htmlify.p6 from p6doc, fixing a bug reported by

[23:14] <dalek> rakudo/nom: Mouq++.

[23:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b014db2ebe

[23:15] <lizmat> ah, Pod::To::HTML is not core, that explains

[23:17] <timotimo> aye, as is the UI for p6debug

[23:19] <jnthn> If you drag that in, you'll end up dragging in Term::ANSIColor with it, and so on...

[23:20] <jnthn> And have to put them into the build.

[23:21] <lue> Part of me thinks I need to throw out all of syngen's code and start again. Maaaaaaybe write (parts of) it in nqp, depending on how badly I want some of the Perl6::Grammar rules :)

[23:22] *** yeltzooo4 is now known as yeltzooo

[23:22] *** hoverboard left
[23:22] <lizmat> lue: could you gist me the deprecation message?

[23:23] <lizmat> I can't find what in Pod::To::HTML could cause it

[23:23] *** rurban1 joined
[23:24] <jnthn> %head = { ... } called at: lib\Pod\To\HTML.pm, line 155

[23:24] <jnthn> lizmat: ^^

[23:24] <lue> lizmat:  https://gist.github.com/lue/ed527858c5102fe26b10  (once I saw it talk about line 156 too)

[23:25] <lizmat> my %head := $p.value;  # should fix it

[23:25] *** rurban2 joined
[23:26] <lue> I thought perl6-j gave me backtraces on "uninitialized value of type Any" (or UVOTA for short :P). Guess it's still just perl6-p, which I haven't built in quite a while now.

[23:27] *** rurban1 left
[23:29] <jnthn> FROGGS: Hmm...not sure why the workaround helps, but good to know. I'd like to fix the underlying bug really...

[23:29] <lizmat> pushed a fix to Pod::To::HTML

[23:30] <lizmat> lue ^^^

[23:30] <lue> thanks lizmat++ :)

[23:30] <jnthn> Time for some rest...'night, #perl6

[23:30] <lue> ♞ jnthn o/

[23:30] <lizmat> gnight jnthn 

[23:32] * lizmat also calls it a night

[23:32] <lizmat> sleep&

[23:33] <lue> ♞ lizmat o/

[23:40] *** atroxaper joined
[23:45] *** atroxaper left
[23:45] *** xragnar_ joined
[23:45] *** xragnar left
[23:45] *** xragnar_ is now known as xragnar

