[00:01] <raydiak> since the (human) language part of my brain is so determined to express itself today, I wrote a sentence which I guess must have been about #perl6:

[00:01] <raydiak> The calamitous, cacophonous calls of the crazy creatures counter-intuitively coalesces into a complex collage of cooperation, creative culture, cognitive canvases, and conceptual constructs, and even calls cosmic comprehension closer to our carbon.

[00:01] *** virtualsue joined
[00:03] *** Shellcat joined
[00:05] <timotimo> http://t.h8.lv/p6bench/2014-02-09-for_improvements.html

[00:06] <timotimo> i'll try to enlarge these graphs so that you can actually see something ...

[00:08] <timotimo> i've managed to make it wider, but i see no way to make the individual graphs less flat

[00:09] *** virtualsue left
[00:11] <timotimo> everything for-related on moarvm got a whole bunch faster

[00:11] <timotimo> well, not really "a whole bunch" - still less than 2x faster, but it's definitely noticable in the benchmarks where for performance dominates

[00:11] <timotimo> like empty for loops %)

[00:13] <timotimo> oh nice. in visit_2d_indices_while_native, nqp-moarvm went from noticably slower than parrot to a tiny bit faster than parrot

[00:13] <dalek> rakudo/nom: ba1cc33 | jnthn++ | src/Perl6/Actions.nqp:

[00:13] <dalek> rakudo/nom: Fix an attribute access type-o.

[00:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ba1cc337ae

[00:14] <timotimo> much more interesting: visit_2d_indices_loop_native sees a dramatic speed difference in parrot

[00:15] <timotimo> but it seems like the performance of visit_2d_indices_cross has regressed significantly for parrot

[00:16] <jnthn> That's an odd one...

[00:17] <jnthn> Time for some rest...'night o/

[00:17] <timotimo> i'll rest, too

[00:18] *** Rotwang left
[00:26] *** bjz left
[00:27] *** BenGoldberg joined
[00:27] *** bjz joined
[00:29] *** Adriaaan left
[00:31] *** xenoterracide left
[00:32] *** bjz left
[00:32] *** bjz_ joined
[00:33] *** LLamaRider joined
[00:36] *** bjz joined
[00:37] <lue> why in  nqp/src/HLL/Grammar.nqp  are (), [], <>, and {} listed twice?

[00:37] <lue> (line 4)

[00:39] *** bjz_ left
[00:41] *** xenoterracide joined
[00:52] *** LLamaRider left
[00:52] *** LLamaRider joined
[00:52] *** Alula joined
[00:57] *** LLamaRider left
[00:59] *** mavcunha joined
[01:09] *** btyler left
[01:20] *** telex left
[01:22] *** nebuchad` joined
[01:22] *** telex joined
[01:25] *** Tene_ joined
[01:30] *** nebuchadnezzar left
[01:30] *** sjn left
[01:30] *** rylinaux left
[01:30] *** Tene left
[01:32] *** sjn joined
[01:47] *** bjz left
[01:57] *** rurban left
[01:59] *** FROGGS_ joined
[02:00] *** Sqirrel_ joined
[02:01] *** Sqirrel left
[02:02] *** FROGGS left
[02:05] *** rurban joined
[02:21] *** Shellcat left
[02:32] <dalek> rakudo-star-daily: 1e8686a | coke++ | log/ (5 files):

[02:32] <dalek> rakudo-star-daily: today (automated commit)

[02:32] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/1e8686a7f9

[02:32] <dalek> perl6-roast-data: 23ee590 | coke++ | / (6 files):

[02:32] <dalek> perl6-roast-data: today (automated commit)

[02:32] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/23ee590469

[02:32] *** simcop2387 left
[02:33] *** grep0r left
[02:33] *** simcop2387 joined
[02:36] *** rom1504 left
[02:37] *** grep0r joined
[02:45] *** grep0r left
[02:48] *** rom1504 joined
[02:49] *** colomon left
[02:57] *** SamuraiJack joined
[03:00] *** Sqirrel joined
[03:00] *** colomon joined
[03:00] *** FROGGS__ joined
[03:03] *** Sqirrel_ left
[03:04] *** FROGGS_ left
[03:05] *** skids left
[03:10] *** skids joined
[03:13] *** rurban_ left
[03:20] *** grep0r joined
[03:46] *** regreg joined
[03:49] *** mavcunha left
[04:05] <japhb__> raydiak: I just don't want to leave people waiting on me for long periods of time if I can help it.  Don't like doing it at work, don't like doing it for community projects either.

[04:06] <japhb__> That said, there's a chance I will be rather squeezed for tuits soon, which would exacerbate the problem, so it was extra important to get as "caught up" as I could now.

[04:10] <japhb__> LHF for a Rakudo hacker: Implement $*BASETIME.  May be as simple as setting 'GLOBAL::<$BASETIME> = now;' in the right place at the right time.

[04:12] *** sctt joined
[04:14] *** sctt left
[04:24] *** SamuraiJack left
[04:29] *** molaf_ left
[04:29] *** bjz joined
[04:41] *** xenoterracide left
[04:43] *** regreg left
[04:47] *** bjz left
[04:47] *** bjz joined
[05:17] *** BenGoldberg left
[05:29] *** rurban_ joined
[05:33] *** cognominal left
[05:35] *** cognominal joined
[05:37] *** bjz left
[05:38] *** bjz joined
[05:47] *** cognominal left
[06:15] *** Tene_ is now known as Tene

[06:21] *** cognominal joined
[06:36] *** japhb_ joined
[06:39] *** japhb joined
[06:43] <moritz> m: say now.^name

[06:43] <camelia> rakudo-moar ba1cc3: OUTPUT«Instant␤»

[06:52] *** thou joined
[06:58] *** PZt joined
[07:03] <timotimo> o/

[07:11] *** samebchase left
[07:12] *** samebchase joined
[07:20] *** ruoso joined
[07:22] <moritz> \o

[07:22] <FROGGS__> morning

[07:23] <moritz> good morning__ FROGGS :-)

[07:24] *** FROGGS__ is now known as FROGGS

[07:25] <FROGGS> morning moritz :o)

[07:26] <moritz> japhb_: if I read S28 correctly, it's supposed to be $*INITTIME, not $*BASETIME

[07:45] <FROGGS> jnthn: for v5 I did: <statementlist=.LANG($*MAIN, 'statementlist')>

[07:45] <FROGGS> jnthn: how do I call statementlist(1) there?

[07:50] *** regreg joined
[08:01] <FROGGS> jnthn: nvm :o)

[08:02] <raydiak> japhb: makes sense, you sound like a very busy guy. hope you clear your plate enough to spend a little time breathing :) just figured I'd ask how it's going, it's a protocol I tend to follow when a person isn't around much and then puts their affairs in order

[08:06] *** thou left
[08:07] *** darutoko joined
[08:13] <FROGGS> segfault when compiling Perl5::Terms :o(  https://gist.github.com/FROGGS/a78e5ce755315e879065

[08:14] <FROGGS> yeah, src/core/interp.c:3481 is op serialize

[08:20] *** rurban left
[08:40] <raydiak> need to start sleeping more. starting right now. good *, * o/

[08:45] *** araujo left
[08:46] *** araujo joined
[08:51] *** molaf joined
[08:52] <nwc10> FROGGS: It struck me that it's useful for Panda to have the alternative of using an external fetching command such as curl or wget

[08:53] <nwc10> because the external commands are going to cope better with some things, such as SSL, some sorts of proxies, and any new or obscure prototocols that Panda doesn't yet know about

[08:59] *** regreg left
[09:04] *** Rotwang joined
[09:09] *** dmol joined
[09:13] *** stevan_ joined
[09:15] *** xenoterracide joined
[09:17] *** stevan__ joined
[09:18] *** stevan__ left
[09:18] *** stevan_ left
[09:39] *** Rotwang left
[09:43] *** Rotwang joined
[09:49] <FROGGS> nwc10: then it might be even helpful to be able to specify the backend

[09:49] *** berekuk joined
[09:49] <FROGGS> maybe using an env var

[10:05] *** Rotwang left
[10:05] *** Rotwang joined
[10:06] *** virtualsue joined
[10:07] *** Rotwang left
[10:07] *** Rotwang joined
[10:18] *** nebuchad` is now known as nebuchadnezzar

[10:25] *** kivutar left
[10:27] <masak> antenoon, #perl6

[10:31] <FROGGS> o/

[10:31] *** virtualsue left
[10:41] *** bjz_ joined
[10:42] *** bjz left
[10:50] *** xenoterracide left
[10:51] *** SamuraiJack joined
[10:55] *** berekuk left
[10:58] <jnthn> o/

[11:05] <masak> \o

[11:07] * masak happily realizes that 'our' variables can be used inside -n and -p oneliners in Perl 6

[11:08] *** spider-mario joined
[11:09] <masak> and END works nicely, too!

[11:10] *** berekuk joined
[11:15] <jnthn> state works out nicely also in that you can use it to run the assignment only the first time.

[11:17] *** stevan_ joined
[11:19] <dalek> rakudo/jvmbl: 008d9f1 | jnthn++ | src/Perl6/Actions.nqp:

[11:19] <dalek> rakudo/jvmbl: Turn on JVM bind lowering.

[11:19] <dalek> rakudo/jvmbl: 

[11:19] <dalek> rakudo/jvmbl: Not everything works out yet, but it can run spectest with (quite a

[11:19] <dalek> rakudo/jvmbl: lot of) regressions.

[11:19] <dalek> rakudo/jvmbl: review: https://github.com/rakudo/rakudo/commit/008d9f1d94

[11:24] <dalek> nqp/jvmbl: 7258671 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[11:24] <dalek> nqp/jvmbl: Missing deconts (for consistency with MoarVM).

[11:24] <dalek> nqp/jvmbl: review: https://github.com/perl6/nqp/commit/7258671303

[11:24] <masak> jnthn: ooh, yes.

[11:27] *** kaleem joined
[11:27] *** kaleem left
[11:30] *** berekuk left
[11:31] <dalek> rakudo/nom: 45bb17e | moritz++ | src/core/Instant.pm:

[11:31] <dalek> rakudo/nom: Implement $*INITTIME for japhb++

[11:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/45bb17e864

[11:40] <dalek> nqp: 7584c1a | jnthn++ | tools/build/MOAR_REVISION:

[11:40] <dalek> nqp: Get a MoarVM with buffer read/write fixes.

[11:40] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7584c1a74f

[11:43] <dalek> rakudo/nom: 5838d5f | jnthn++ | tools/build/NQP_REVISION:

[11:43] <dalek> rakudo/nom: Bump for fixes to unbust Buf spurt/slurp on Moar.

[11:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5838d5f826

[11:44] <jnthn> That should deal with the regressions from the latest [Coke]++ daily run.

[11:49] *** Adriaaan joined
[11:52] *** bjz_ left
[11:52] <dalek> rakudo/nom: 46234b5 | moritz++ | docs/ChangeLog:

[11:52] <dalek> rakudo/nom: add some ChangeLog entries

[11:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/46234b5001

[11:52] *** bjz joined
[12:00] *** virtualsue joined
[12:03] *** stevan__ joined
[12:06] *** stevan_ left
[12:08] <dalek> roast: 91c81e6 | jnthn++ | S03-operators/assign.t:

[12:08] <dalek> roast: Correct precedence mistake in a test.

[12:08] <dalek> roast: review: https://github.com/perl6/roast/commit/91c81e6f78

[12:32] *** Adriaaan left
[12:33] *** kivutar joined
[12:45] *** denis_boyun joined
[12:52] *** kurahaupo_mobile joined
[13:01] *** beastd joined
[13:10] <timotimo> yay, progress

[13:22] *** mavcunha joined
[13:36] *** stevan__ left
[13:57] *** bjz left
[14:14] <masak> hi from... a train. \o

[14:14] <masak> (yes, I'm a lot less active with Perl 6 these days. yes, I travel a lot more by train these days. yes, those two are related.)

[14:14] <masak> it was so nice to be able to submit a handful of RT tickets the other day.

[14:15] <FROGGS> hi masak :o)

[14:22] <hoelzro> run($cmd) is *supposed* to just run a command, right?

[14:23] <timotimo> masak: don't train rides often cause bursts of activity? :P

[14:23] <masak> they do, sometimes.

[14:23] <timotimo> so you only have unhelpful train rides? :(

[14:24] <masak> but used to be I spent train rides working with Perl 6 a lot more.

[14:24] <masak> these days, less so.

[14:24] <masak> not this one, for example :/

[14:24] <hoelzro> hmm

[14:24] <hoelzro> run() is broken on Moar, I think

[14:24] <colomon> Sum module started failing overnight.

[14:24] <colomon> skids: ^^

[14:24] <masak> hoelzro: gist?

[14:24] <masak> hoelzro: also, can you trace it to a broken spectest?

[14:25] <hoelzro> masak: https://gist.github.com/hoelzro/8899762

[14:25] <hoelzro> I can try

[14:25] *** psch joined
[14:25] <psch> hi #perl6 o/

[14:25] <yoleaux> 8 Feb 2014 14:16Z <jnthn> psch: Please be a little more careful to update test plans.

[14:26] <masak> hi psch 

[14:26] <psch> right, test plans

[14:26] <psch> i blame that again on being exposed to throws_like first... :)

[14:27] <masak> hoelzro: I mean, I would almost find it surprising if moar's run() was busted and that *didn't* trigger a spectest failure.

[14:27] <hoelzro> agreed

[14:27] <masak> psch: why? throws_like also needs to update the test plan...

[14:27] <hoelzro> I don't run the spec tests often myself unless I'm actually working on Rakudo, though =/

[14:28] <timotimo> hoelzro: spectests are about 2x faster on moar than on parrot :)

[14:28] <hoelzro> indeed =)

[14:29] <psch> masak: it does? i haven't seen through how many tests it runs per call. maybe it's better to blame S32-exceptions/misc.t then? it doesn't have a plan

[14:29] <hoelzro> I'll run the full spec test

[14:29] *** stevan_ joined
[14:29] <psch> in the end of course it's more of a humorous remark, i actually realize that i have to take care about the plans

[14:30] <masak> psch: fwiw, I've forgotten them sometimes, too.

[14:30] <masak> psch: "doesn't have a plan" probably means "has a 'done;' at the bottom". it's either-or.

[14:31] <timotimo> it could also mean "is broken", but that's not the case here :)

[14:32] *** kivutar left
[14:32] <psch> well, in any case a reminder can't hurt, i did forget it a few times it seems

[14:39] <FROGGS> psch: just rerun the test file and compare the plan to the tests it runs before pushing

[14:39] *** denis_boyun left
[14:43] <hoelzro> the spec tests *look* fine for moar

[14:43] <hoelzro> er, perl6-m

[14:48] <masak> how can that be? either run() is broken and the test fails, or run() works, or the test isn't testing whether run() works.

[14:48] <hoelzro> I know, it's really confusing...

[14:48] <hoelzro> unless there's something about the testing environment that makes run work

[14:50] <FROGGS> what exactly is wrong?

[14:50] <hoelzro> FROGGS: see my gist

[14:50] <FROGGS> hoelzro: this one? https://gist.github.com/hoelzro/8899762#file-gistfile1-txt-L2

[14:51] <hoelzro> FROGGS: yes

[14:51] <FROGGS> hmmm, works on my box

[14:52] <hoelzro> I'll try pulling, I guess

[14:52] <hoelzro> FROGGS: are you on any special branch?

[14:52] <FROGGS> hoelzro: no, master/master/nom

[14:52] <FROGGS> HEAD

[14:52] <hoelzro> ok, that might have something to do with it

[14:53] <FROGGS> just pulled 30mins ago and rebuild (and reconfigured) everything

[14:53] <hoelzro> I'm on the openpipe branch

[14:53] <FROGGS> ahh

[14:53] <FROGGS> wip-openpipe got merged

[14:53] <hoelzro> did it?

[14:54] <hoelzro> nice

[14:54] <FROGGS> yes, right after S29-os/system.t passed :o)

[14:54] <hoelzro> \o/

[14:54] <FROGGS> on windows too fwiw

[14:54] <FROGGS> so, there is just the osx problem left I hope

[14:54] <hoelzro> nice.

[14:57] *** pippo joined
[14:57] <pippo> o/ #perl6

[14:57] <hoelzro> ahoy pippo 

[14:58] <timotimo> o/

[14:58] <pippo> hoelzro: openpipe implemented does mean that qx/ls/ should work? On my box nope.

[14:58] <hoelzro> pippo: it *should*

[14:58] <hoelzro> it does on mine

[14:59] <pippo> I mean on moarvm. Mine segfaults!

[14:59] <timotimo> yikes!

[14:59] <pippo> :-)

[14:59] <timotimo> how recently did you do a full clean + rebuild?

[15:00] <hoelzro> we had a segfault problem recently

[15:00] <hoelzro> like, yesterday

[15:00] <hoelzro> but it's fixed now

[15:00] <timotimo> oh, that sounds good

[15:00] <lee__> FROGGS: is this the os x problem you refer to? https://gist.github.com/leedo/c451ee9c86f80807c039

[15:00] <lee__> trying to build latest moar

[15:00] <pippo> My moar is up to date. I'll do a full clean + rebuild... &

[15:01] <FROGGS> lee__: yes

[15:01] <lee__> ok, just making sure

[15:02] <hoelzro> whew

[15:02] *** virtualsue left
[15:02] <hoelzro> run() works for me now

[15:06] <pippo> hoelzro: is it possible to use run like this: run('ls -alrt')?

[15:07] <timotimo> alart!

[15:07] <timotimo> !!DANGAR!!

[15:07] <hoelzro> pippo: I believe you have to do run('ls', '-alrt')

[15:07] <hoelzro> i just discovered that myself =)

[15:07] <timotimo> run <ls -alrt> should work, too?

[15:07] <timotimo> or would that have to be flattened?

[15:08] *** ajr joined
[15:08] *** ajr is now known as Guest88198

[15:08] *** Guest88198 is now known as ajr_

[15:09] <pippo> Ok thank you both. I'll try. Another (the last :-)) question. Is it possible to have the result of such 'ls -alrt' saved on an array of lines? 

[15:10] <pippo> shell('ls -alrt') ==> lines() ==> my @a; or something...

[15:10] <hoelzro> pippo: you probably want qx[ls -alrt], then

[15:11] <colomon> p: say qx[ls -alrt]

[15:11] <camelia> rakudo-parrot 46234b: OUTPUT«qx, qqx is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:2␤  in sub QX at src/RESTRICTED.setting:9␤  in block  at /tmp/wLMlsaezKk:1␤␤»

[15:12] <pippo> j: say qx[ls -alrt];

[15:12] <camelia> rakudo-jvm 46234b: OUTPUT«total 156␤drwxr-xr-x 13 root        root         4096 Oct  8 17:18 ..␤-rw-rw-r--  1 p6eval_eval p6eval_eval    75 Oct 23 09:26 .selected_editor␤-rw-------  1 p6eval_eval p6eval_eval   734 Oct 23 09:26 .viminfo␤-rw-rw-r--  1 p6eval_eval p6eval_eval 3…»

[15:13] <pippo> j: qx[ls -alrt] ==> lines() ==> my @a; say @a;

[15:13] <camelia> rakudo-jvm 46234b: OUTPUT«total 156 drwxr-xr-x 13 root        root         4096 Oct  8 17:18 .. -rw-rw-r--  1 p6eval_eval p6eval_eval    75 Oct 23 09:26 .selected_editor -rw-------  1 p6eval_eval p6eval_eval   734 Oct 23 09:26 .viminfo -rw-rw-r--  1 p6eval_eval p6eval_eval 39896 Nov…»

[15:13] <timotimo> you'd want to .perl or maybe .elems that :P

[15:13] <colomon> my @a = qx[ls -alrt].lines works nicely

[15:13] <timotimo> yeah, but pippo is a friend of feed syntax

[15:13] <colomon> there's more than one way to do it

[15:14] <pippo> :-))

[15:15] <pippo> Thank you very much to you all: hoelzro, timotimo and colomon. 

[15:16] <pippo> timotimo: after full celan and compile. qx[ls] on moarvm segfaults on my machine :-((

[15:16] <colomon> BTW, I tested it locally on moar, and it works there, too.  :)

[15:16] *** Vlavv joined
[15:16] <colomon> :\

[15:17] <FROGGS> pippo: what OS and architecture?

[15:17] <timotimo> pippo: did you --gen-moar=master or just --gen-moar?

[15:17] <timotimo> because it *might* have installed a non-current moar

[15:18] <FROGGS> pippo: maybe paste perl6-m --version for us?

[15:18] *** mavcunha_ joined
[15:18] <pippo> I am using slackware linux on an intel machine. 

[15:18] <FROGGS> gah, sometimes I hate eclipse >.<

[15:18] <FROGGS> pippo: x64?

[15:18] <pippo> timotimo: --gen-moar

[15:19] <pippo> FROGGS: 32bit

[15:19] <FROGGS> hmmmm, maybe that is the problem?

[15:19] <pippo> Noooooo :-(((

[15:20] <pippo> I have to say that perl6-j works though.

[15:21] *** mavcunha left
[15:23] <timotimo> pippo: --gen-moar gives you, at least as far as i remember, whatever is in build/tools/MOAR_REVISION of the nqp you get

[15:23] <timotimo> and the nqp you get is pulled from build/tools/NQP_REVISION of the rakudo

[15:23] <timotimo> could you possibly try again with --gen-moar=master --gen-nqp=master?

[15:24] <pippo> Thank you. I'll try... &

[15:24] *** clkao_ left
[15:24] *** clkao joined
[15:26] <timotimo> though of course 32 bits may be a problem; i'm not sure how many of our developers are actively trying moar on 32bit systems (:

[15:26] <timotimo> :(

[15:26] <psch> https://gist.github.com/peschwa/8900636 # because i'm sure i'd forget about plans again

[15:26] <psch> works as pre-commit hook for roast

[15:27] <colomon> moritz has been saying moar doesn't work on 32-bit, period.

[15:27] <timotimo> colomon: oh, that's cute! :)

[15:27] <timotimo> er.

[15:27] <timotimo> psch: that's cute!

[15:27] <timotimo> colomon: that's a little bit sad

[15:28] <FROGGS> but when only qx{} is failing...

[15:28] <psch> FROGGS++ # making me indirectly learn a little about git hooks

[15:29] <psch> now back to what-i-actually-was-doing haha

[15:29] <colomon> psch++

[15:30] <FROGGS> :o)

[15:31] <timotimo> animal's rights experts will be happy to know that yaks are regularly being shaved.

[15:31] <hoelzro> should assigning values to %*ENV automatically Str them?

[15:32] <timotimo> once we have coercive types, yeah why not

[15:38] * colomon wonders how hard it would be to set up a Linux 32-bit virtual machine....

[15:38] * colomon wonders how hard it would be to set up a Linux 32-bit virtual machine….

[15:42] <nwc10> colomon: which can't actually be an accuate conclusion, as it does built for me on x86 Linux

[15:42] <nwc10> OK, perl6-m does

[15:42] <colomon> nwc10: does it run?

[15:42] *** kivutar joined
[15:42] <nwc10> passes its tests

[15:42] <colomon> moritz was saying moar built but NQP-m and Rakudo-m wouldn't

[15:42] <colomon> interesting.

[15:43] <nwc10> note, x86, so it might end up being something more subtle than just "32bit"

[15:43] <FROGGS> nwc10: and the qx{ls} example works?

[15:43] * colomon wonders if he is confused or if moritz's analysis is a bit off.

[15:43] <timotimo> well, i'd say that not running on 32 bit is less problematic than not running on 64 bit

[15:43] <colomon> timotimo: sure, but it would be best if both worked

[15:43] <nwc10> I'm suspecting that there are at least 2 architecture or platform specific problems on 32 bit systems

[15:43] <timotimo> of course

[15:43] <FROGGS> well, not running on pippo's machine is problematic though

[15:43] <nwc10> that is a guess

[15:44] <timotimo> especially since moar's memory usage is so good compared to our other backends

[15:44] <timotimo> (still has a long way to go, i figure)

[15:45] <pippo> timotimo: Finished compiling. Sadly --gen-moar=master does not help either.

[15:45] <jnthn> I've heard there's a problem on Windows 32-bit. Didn't get to recreate it...

[15:45] *** Adriaaan joined
[15:45] <jnthn> ...but that's a "doesn't build NQP" issue, not a "feature X doesn't work" issue

[15:46] *** spider-mario left
[15:46] <timotimo> pippo: :(

[15:46] <timotimo> jnthn: should i start my rakudo-jvm benchmarks now-ish? should i compare newer nqp-jvm, too?

[15:48] <jnthn> timotimo: Well, you could do them, may be small improvements there too... I didn't get all the way with the bind lowering thing. Not sure I will today.

[15:48] <pippo> One strange thing is that I have discovered that "q/ls -alrt/ ==> shell()" works on moar. Does this help debugging?

[15:49] <pippo> i.e. does 'qx' and 'shell' have code in common?

[15:50] <timotimo> jnthn: well, i'll leave my desktop behind in a few minutes anyway, wether i do the benchmarks now or an hour later doesn't matter to me

[15:50] *** regreg joined
[15:55] <timotimo> jnthn: are the revisions sufficiently bumped so that i'll get the performance improvements if i just use the newest rakudo commit?

[15:55] <timotimo> 4 hours ago it says

[15:56] <timotimo> yup, it's up to date. good.

[15:57] <timotimo> running the stuff now. will get back to you with results later

[15:57] <timotimo> o/

[15:58] *** kaare_ left
[15:59] *** Psyche^_ joined
[16:03] *** Psyche^ left
[16:09] *** stevan_ left
[16:11] <hoelzro> alright, my super awesome MoarVM module compatability checker is complete!

[16:11] <hoelzro> https://gist.github.com/anonymous/8901287

[16:11] <hoelzro> that's all of the Rakudo * modules and their build status on MoarVM

[16:11] <hoelzro> summary.txt is what it says

[16:11] <hoelzro> ufo works

[16:12] <hoelzro> so someone please make good use of this information!

[16:12] *** stevan_ joined
[16:14] *** stevan_ left
[16:15] <jnthn> The URI failure looks...odd

[16:16] <FROGGS> jnthn: I get that too when I try to make my m-summary

[16:17] <jnthn> It's like it's finding an old CORE.setting.moarvm somehow

[16:18] <jnthn> Or a newer one

[16:18] <timotimo> rm -fr / and try again

[16:18] <colomon> panda: STable conflict detected during deserialization.

[16:19] <FROGGS> ewww

[16:19] <hoelzro> jnthn: I had a better one last night

[16:19] <hoelzro> I pasted it...somewhere

[16:19] * colomon thinks MIME::Base64 needs to be a pure p6 implementation first and foremost.  it seems like there's one somewhere in the module, but it never gets used because the tests fail on non-pure version.

[16:20] <hoelzro> jnthn: http://pastebin.com/HtaeMiL5

[16:20] <timotimo> mhm

[16:20] <hoelzro> that was from last night

[16:20] <hoelzro> oh

[16:20] <hoelzro> you know what

[16:21] <hoelzro> I didn't run a make clean first

[16:21] <hoelzro> so that probably f'ed things up

[16:21] <timotimo> parrot andd moar had b64 decoding built in anyway, right? why not expose it as a nqp:: op for all of rakudo

[16:27] *** thou joined
[16:27] *** molaf_ joined
[16:30] *** molaf left
[16:32] *** berekuk joined
[16:36] *** virtualsue joined
[16:41] <nwc10> 1) does MoarVM still need Base64 for anything other than obsolete serialisation formats

[16:41] <nwc10> 2) to me it feels a bad idea to specialise stuff in C that doesn't need to be in C

[16:41] <timotimo> d'oh, i neglected to start the benchmarks in a tmux

[16:42] <timotimo> so i'll have to periodically check ps for the process

[16:42] <nwc10> that's somewhat repeating the mistakes of Perl 5

[16:43] <timotimo> nwc10: i'd still vote for a pure-perl6 implementation of base64 of course

[16:43] <timotimo> and i think moar only needed it for serialization stuff

[16:43] <timotimo> but we thankfully got rid of that

[16:44] *** SamuraiJack left
[16:46] <nwc10> FROGGS: I believe that CPAN.pm tries each network "method" in turn until something works. It has configuration for things like "where is your wget program" but I don't see configuration options for what order to use downloaders

[16:51] *** denis_boyun joined
[16:56] *** kbaker joined
[17:01] <pippo> timotimo: actually qx/ls/ works on Moar when there are a few files in the dir. Segfaults if the number of files is not a handful.

[17:04] <hoelzro> pippo: nice catch

[17:04] <hoelzro> I wonder if it's because of buffer size

[17:04] <pippo> hoelzro: is it the same on your machine?

[17:05] <hoelzro> I'll try in a second

[17:05] <hoelzro> but I wouldn't be surprised =)

[17:06] <psch> i notice that i am confused

[17:06] *** zakharyas joined
[17:07] <psch> my refactor has parity with nom except for X::TypeCheck::Binding

[17:07] <psch> in my branch, $got and $expected are swapped

[17:07] <psch> but according to --ll-exception the program doesn't reach anywhere where i changed anything

[17:09] *** xenoterracide joined
[17:09] *** xenoterracide left
[17:10] *** xenoterracide joined
[17:10] <FROGGS> psch: it works here even when there are only two entries

[17:11] <FROGGS> psch: is there something in the failing dir that has non ascii unicode chars or something else that could cause this?

[17:12] <psch> FROGGS: i don't quite follow

[17:12] *** xenoterracide left
[17:12] <psch> oh

[17:12] <psch> FROGGS: you're talking to pippo 

[17:13] <pippo> FROGGS: when there are two entries it is OK. The problem occurs when there are many more.

[17:16] <ajr_> A user reaction to an O-O language (JS) feature, that might amuse language designers:  http://ars.userfriendly.org/cartoons/read.cgi?id=20140209&tid=3804719

[17:16] <FROGGS> psch: I am sorry, you are right of course

[17:17] <pippo> hoelzro, FROGGS: I made a new dir and switched to it. Then "for i in $(seq 1 10 ); do touch $i; done" and afterwards run moar with qx/ls/ ==> OK;

[17:18] <pippo> for i in $(seq 1 100); do touch $i; done ==> NOT OK (segfaults)

[17:18] <hoelzro> pippo: I would try increasing values for dd if=/dev/zero of=/dev/stdout bs=1 count=$x

[17:18] <hoelzro> see what happens

[17:18] <hoelzro> I'm trying to fix an unrelated issue atm

[17:18] <hoelzro> after I work on it, I'll look

[17:19] <FROGGS> pippo: I have a dir with 182 entries, and I can qx{ls} it fine#

[17:19] <FROGGS> -#

[17:20] <pippo> Do not know what to think. :-((

[17:21] <FROGGS> pippo: do you have gdb?

[17:21] <FROGGS> a backtrace would help

[17:21] <pippo> yes. But I need directions on how to use it.

[17:21] <FROGGS> np

[17:21] <FROGGS> you do something like this, yes? perl6-m -e 'say qx{ls}'

[17:22] *** denis_boyun left
[17:22] <FROGGS> do a `which perl6-m`, then cat the result

[17:22] *** bjz joined
[17:23] <FROGGS> replace perl6-m of the first command with what you got from cat

[17:23] *** xenoterracide joined
[17:23] <FROGGS> if should look like this in the end:

[17:24] <FROGGS> gdb --args /path/to/moar ...stuff...runtime/perl6.moarvm -e 'say qx{ls}'

[17:24] <FROGGS> when you are in gdb, type: run

[17:24] <FROGGS> and when it crashes: bt full

[17:25] <pippo> OK. I'll do.

[17:30] <pippo> FROGGS: http://nopaste.info/04748883b6.html

[17:31] <hoelzro> neat

[17:32] <vendethiel> `while $d %% 2 {(PrimeCandidate $n, Int $k) ...` what does that do ?

[17:32] <moritz> the %% ?

[17:33] <vendethiel> no, putting variable declarations after a block opening

[17:33] <moritz> who does the ... look like?

[17:33] <vendethiel> while body

[17:33] <moritz> because so far it doesn't make much sense to me

[17:33] <vendethiel> http://perl6advent.wordpress.com/2012/12/14/primal-needs/

[17:33] <vendethiel> Gamma: Rabin-Miller test code

[17:34] <moritz> vendethiel: looks like copy&paste gone wrong

[17:34] <vendethiel> oh, oke

[17:37] *** pippo_ joined
[17:38] *** pippo left
[17:39] <pippo_> FROGGS, hoelzro: here is the complete gdb run (i.e. from the begining): http://nopaste.info/dc5ed0e4f2.html

[17:42] <hoelzro> thanks pippo_ 

[17:46] <vendethiel> p: sub gt($n) { -> $x { $x > $n } }; my $gth = gt(100); 1, 2, 4 ... $gth;

[17:46] <camelia> rakudo-parrot 46234b: ( no output )

[17:46] <vendethiel> p: sub gt($n) { -> $x { $x > $n } }; my $gth = gt(100); say 1, 2, 4 ... $gth; 

[17:46] <camelia> rakudo-parrot 46234b: OUTPUT«1 2 4 8 16 32 64 128␤»

[17:50] <pippo_> FROGGS, hoelzro: And here is a successful run after doing: mkdir new_dir && cd new_dir && for i in $(seq 1 10); do touch $i; done: http://nopaste.info/b4127617cd.html

[17:54] *** denis_boyun joined
[18:04] *** virtualsue left
[18:13] *** virtualsue joined
[18:24] *** Pleiades` is now known as Pleiades

[18:32] <FROGGS> pippo_: can you reinstall moar with --debug turned on?

[18:33] <FROGGS> this way we'd know at what line it explodes in readall_fh

[18:33] <FROGGS> (besides several other things)

[18:34] *** Pleiades is now known as Pleiades`

[18:36] *** arlinius left
[18:45] <pippo_> FROGGS: OK. 

[18:47] <pippo_> FROGGS: err... Configure does not accept --debug. How do I have to do?

[18:49] <FROGGS> pippo_: you have to do that when configuring moarvm

[18:49] <FROGGS> rakudo does not pass that through yet

[18:49] <FROGGS> so you would have to install moar first, then nqp, and then rakudo, all without --gen-something

[18:50] <pippo_> Ok. I'll try.

[18:50] <FROGGS> pippo_++

[18:59] *** thou left
[19:01] *** darutoko left
[19:04] *** molaf_ left
[19:07] *** kivutar left
[19:08] *** kbaker left
[19:11] <pippo_> FROGGS: Here is the gdb now: http://nopaste.info/3966723b4a.html

[19:11] <pippo_> Does this help?

[19:11] <FROGGS> yes it does!

[19:11] <FROGGS> pippo_: thanks a lot

[19:12] <pippo_> Thnks to you :-))

[19:12] <pippo_> Thanks to you :-))

[19:12] <FROGGS> :o)

[19:12] <FROGGS> I'll ping you when I have a patch

[19:13] <pippo_> \o/ FROGGS++

[19:16] <colomon> pippo_++ # find the bug is as important as fixing it.

[19:18] *** ajr_ left
[19:19] *** virtualsue left
[19:20] <FROGGS> handle = 0x0 

[19:20] <FROGGS> what on earth...

[19:25] *** itz joined
[19:26] *** itz__ left
[19:32] *** thou joined
[19:34] <masak> std: constant handle = 0x0

[19:34] <camelia> std 09dda5b: OUTPUT«ok 00:00 122m␤»

[19:34] <masak> :)

[19:34] <FROGGS> *g*

[19:35] <FROGGS> r: constant handle = 0x0; handle->body.encoding_type

[19:35] <camelia> rakudo-parrot 46234b, rakudo-jvm 46234b, rakudo-moar 46234b: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Unsupported use of -> as postfix; in Perl 6 please use either . to call a method, or whitespace to delimit a pointy block␤at /tmp/tmpfile:1␤---…»

[19:35] <FROGGS> ewww

[19:36] <vendethiel> ._.

[19:36] <FROGGS> so we can't C while we Perl... at least that way

[19:37] <masak> ewww? sounds pretty sane to me.

[19:37] *** daxim joined
[19:37] <FROGGS> sure, it is

[19:47] <timotimo> jnthn: http://t.h8.lv/p6bench/2014-02-09-jvm_changes.html ← there's only a few benchmarks where there is a performance difference, one of which is a *big* performance regression

[19:48] <timotimo> rc-forest-fire is the one with the big regression

[19:48] <timotimo> and visit_2d_indices_cross regressed also

[19:49] <timotimo> visit_2d_indices_loop_native profited a lot from the work

[19:49] <timotimo> any_equals profitted, too

[20:00] <masak> PerlJam: could you have a look at the copy-paste-o identified in your blog post at http://irclog.perlgeek.de/perl6/2014-02-09#i_8255984 ?

[20:01] <masak> (kthx)

[20:03] *** btyler joined
[20:04] *** arlinius joined
[20:10] *** SHODAN left
[20:11] *** denis_boyun__ joined
[20:12] *** denis_boyun left
[20:14] *** SHODAN joined
[20:14] *** SHODAN left
[20:14] *** SHODAN joined
[20:19] *** census joined
[20:19] <census> hi labster!

[20:27] <labster> hi census

[20:28] <census> didn't see you in #help-census so thought i'd reach out

[20:28] <census> hope all is well labster

[20:29] <labster> oh, ha, forgot to rejoin after all of the internet weather.

[20:29] <masak> census! \o/

[20:29] <labster> hi masak!

[20:35] <jnthn> timotimo: Oddness...

[20:39] *** BenGoldberg joined
[20:42] *** rindolf joined
[20:45] <jnthn> timotimo: Hmm, we say it's a big regression, but there's two data points...

[20:46] <jnthn> timotimo: And it's the difference between 2 times slower than fastest and 2 times slower than fastest...

[20:46] <jnthn> timotimo: Wonder how repeatable it is.

[20:47] <timotimo> agreed :)

[20:48] <timotimo> it's a pain to run these benchmarks; but they are already run twice

[20:48] <timotimo> did you see the other regression, though?

[20:48] <timotimo> 49x slower instead of 30x slower

[20:49] <jnthn> The cross one? Yes, that looks odd.

[20:51] <jnthn> It does have a while loop in...

[20:58] *** stevan_ joined
[21:02] <dalek> nqp: a10bc21 | (Rob Hoelz)++ | t/moar/02-pipes.t:

[21:02] <dalek> nqp: Add openpipe test for MoarVM

[21:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a10bc21936

[21:02] <dalek> nqp: 7b1491f | (Tobias Leich)++ | t/moar/02-pipes.t:

[21:02] <dalek> nqp: Merge pull request #156 from hoelzro/master

[21:02] <dalek> nqp: 

[21:02] <dalek> nqp: Add openpipe test for MoarVM

[21:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7b1491f08a

[21:08] <timotimo> still no commit bit, rob? :)

[21:08] <FROGGS> this was a few days old

[21:08] <timotimo> ah

[21:08] <FROGGS> dunno if he has a nqp commit bit yet

[21:08] *** grondilu left
[21:09] <hoelzro> timotimo: I don't think so

[21:09] <hoelzro> er

[21:10] <hoelzro> I think I have an NQP one as of yesterday

[21:10] <hoelzro> still waiting on Rakudo, though

[21:10] *** rindolf left
[21:10] <hoelzro> and I sent my CLA in like 2 weeks ago

[21:16] *** kivutar joined
[21:22] *** Myk267 joined
[21:25] *** DarthGandalf joined
[21:30] <timotimo> you should poke somebody

[21:32] *** zakharyas left
[21:38] *** DarthGandalf left
[21:39] *** Sqirrel left
[21:41] *** DarthGandalf joined
[21:44] *** thou left
[21:45] *** btyler left
[21:48] * hoelzro pokes pmichaud 

[21:50] <hoelzro> I believe Karen said it was in his hands =)

[21:50] <sjn> <- wonders if urbandictionary.com's definitions of "poke" are true

[21:52] <BenGoldberg> .ud poke

[21:52] <BenGoldberg> .ping

[21:52] <yoleaux> There is no ping command; nor can this be construed as a response.

[21:52] *** kst` joined
[21:53] <lue> I finally got around to making single-line comments highlight in my major mode :) https://github.com/lue/p6mode

[21:55] *** thou joined
[21:58] *** Ben_Goldberg joined
[21:59] <Ben_Goldberg> .thesaurus poke

[21:59] <yoleaux> poke — synonyms: bag, sack, pocket, gore, search, grope, thrust, jog, dawdler, project

[22:01] *** BenGoldberg left
[22:01] *** stevan_ left
[22:01] *** dmol left
[22:13] *** kaare_ joined
[22:14] *** btyler joined
[22:14] <masak> 'night, #perl6

[22:14] <psch> g'night masak 

[22:16] <psch> https://github.com/peschwa/rakudo/tree/typed_ex_refactor # in case anyone wants to give me some advice what to do differently

[22:17] <psch> the way World and Optimizer build exceptions is quite different in a few spots, which leaves a bit outside of the role

[22:17] <psch> additionally, i eventually want to pull the two loops after the call to optimize() in the optimizer into the role as well, but without typed warnings this doesn't really seem that useful to me yet

[22:18] <dalek> rakudo-star-daily: 2b7aff3 | coke++ | log/ (5 files):

[22:18] <dalek> rakudo-star-daily: today (automated commit)

[22:18] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/2b7aff3110

[22:18] <dalek> perl6-roast-data: 00ff797 | coke++ | / (6 files):

[22:18] <dalek> perl6-roast-data: today (automated commit)

[22:18] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/00ff797209

[22:18] <psch> err, not after optimize(), after visit_block(), i.e. when the exceptions actually get thrown and warnings printed

[22:19] *** virtualsue joined
[22:23] <psch> uh, i think i messed up my git workflow again in that branch :/

[22:23] *** araujo left
[22:24] *** colomon left
[22:25] *** colomon joined
[22:26] <psch> fixed, looks sensible now

[22:26] <psch> wrt the makefiles i'd definitely like some advice - it compiles but i'm not sure if i handled dependencies as per convention

[22:29] *** virtualsue left
[22:35] <[Coke]> moar is now at 99.51% of java.

[22:35] <[Coke]> m: say "moar is at {28820*100/28879}% of parrot"

[22:35] <camelia> rakudo-moar 46234b: OUTPUT«moar is at 99.795699% of parrot␤»

[22:39] <pippo_> night perl6

[22:39] *** pippo_ left
[22:44] <raydiak> I have read that the test percentages don't mean much because of uneven test coverage on multiple axii. Has it been considered to weight the value of different tests or groups thereof, and account for skips, to produce a more realistic "adjusted completion percentage"?  Would such a thing be useful?

[22:45] <jnthn> No, there's nothing "clever" done in that regard.

[22:46] <jnthn> Trying to cram so much info into a single number doesn't tend to work out too well, which is why there's things like the features page.

[22:46] *** Rotwang left
[22:47] <hoelzro> so this code calls a routine twice, which catches the exception the first time, but not the second: https://gist.github.com/anonymous/8907215

[22:47] <hoelzro> am I missing something here?

[22:49] <Ben_Goldberg> p6: https://gist.github.com/anonymous/8907215

[22:49] <camelia> niecza v24-109-g48a8de3: OUTPUT«here␤here␤»

[22:49] <camelia> ..rakudo-jvm 46234b, rakudo-moar 46234b: OUTPUT«here␤there␤  in sub failing-routine at /tmp/tmpfile:9␤  in block  at /tmp/tmpfile:13␤␤»

[22:49] <camelia> ..rakudo-parrot 46234b: OUTPUT«here␤there␤  in sub failing-routine at /tmp/tmpfile:5␤  in block  at /tmp/tmpfile:13␤␤»

[22:50] <raydiak> jnthn: then why do we talk enthusiastically about today's pass percentage? it must meaningfully cram something into that one number if it makes people happy

[22:51] <jnthn> raydiak: It is an indicator of "how many tests do we need to make pass to claim spectest parity with X"

[22:51] <jnthn> raydiak: So it *is* a measure, from a dev point of view, of "how far to go". But only sort of. :)

[22:52] <jnthn> From a marketing point of view, a number like 99.x% also sounds nice. And you don't need nuance to market, just nice sounding things. :P

[22:54] <jnthn> hoelzro: It never makes it to the second call

[22:55] <jnthn> hoelzro: If you don't have a successful smartmatch inside the CATCH it continues

[22:55] <jnthn> continues throwing, that is

[22:55] <hoelzro> I see..

[22:55] <hoelzro> hmm

[22:55] <hoelzro> I'll tweak my example a bit

[22:56] <jnthn> Typical trick is to put a default { ... } in the CATCH if you really do want to catch all the things.

[22:56] <jnthn> Given we've a typed exception system, generally you've *some* idea of what you're looking for in most situations.

[22:57] <raydiak> jnthn: thank you, I think I understand now :)

[22:57] <hoelzro> jnthn: how about this example, then? https://gist.github.com/anonymous/8907361

[22:58] <jnthn> p6: https://gist.github.com/anonymous/8907361

[22:58] <camelia> rakudo-parrot 46234b, rakudo-jvm 46234b, niecza v24-109-g48a8de3: OUTPUT«1␤here␤2␤here␤3␤»

[22:58] <camelia> ..rakudo-moar 46234b: OUTPUT«1␤here␤2␤there␤  in sub failing-routine at /tmp/tmpfile:12␤  in block  at /tmp/tmpfile:19␤␤»

[22:58] <hoelzro> ah, it's a moar problem then.

[22:58] <jnthn> Moar bug.

[22:58] <hoelzro> =/

[22:58] <jnthn> They exist...

[22:58] <jnthn> That's a weird one. Hm.

[22:59] <jnthn> I wonder if the lexotic somehow breaks the active handler chain fixup...

[23:00] <Ben_Goldberg> How's this for a strange moar bug:

[23:00] <Ben_Goldberg> m: pi.round(.1**25).say

[23:00] <camelia> rakudo-moar 46234b: OUTPUT«-9.22337203685478e-07␤»

[23:00] <jnthn> Ben_Goldberg: Dunno. I know power.t has failing tests we didn't triage yet...no idea if that's related.

[23:01] *** dmol joined
[23:01] <jnthn> hoelzro: Ugh, I think I see it.

[23:01] <jnthn> hoelzro: Please can you ticket it?

[23:01] <hoelzro> sure

[23:01] <jnthn> That really wants a spectest too...

[23:02] <jnthn> I can probably fix it, though tomorrow.

[23:02] <jnthn> *fix it without too much trouble

[23:02] <jnthn> m: say .1**25

[23:02] <hoelzro> jnthn: that would be great

[23:02] *** Ben_Goldberg is now known as BenGoldberg

[23:05] <camelia> rakudo-moar 46234b: OUTPUT«1e-25␤»

[23:05] <hoelzro> jnthn: https://rt.perl.org/Public/Bug/Display.html?id=121213

[23:05] <jnthn> kthx

[23:06] <hoelzro> thanks in advance for looking at/fixing it =)

[23:06] <jnthn> .oO( active handlers bit me when doing continuations too...wonder if I mis-designed this bit... )

[23:14] <jnthn> jmake

[23:14] <jnthn> gah

[23:16] <skids> r: sub foo { for 0..10 { $_ } }; foo().say;

[23:16] *** raydiak left
[23:16] <skids> hrm.

[23:16] *** camelia left
[23:17] <skids> 8-/

[23:19] <jnthn> skids: Ah. That loops is always in sink context now.

[23:19] <jnthn> skids: Statement level oens always are these days, as folks got way too many performance bugs the eager way, and just bugs the lazy way.

[23:19] <timotimo> so if you want the list you need "do for ..."?

[23:19] <jnthn> do for works.

[23:19] <jnthn> lazy for and eager for also work

[23:20] <jnthn> And are better documentation of what you want.

[23:20] <timotimo> gotta tram now

[23:20] <skids> jnthn++ timotimo++ thanks.  That was what broke Sum last night.

[23:22] <tadzik> uh-oh

[23:23] <tadzik> I remember those problems

[23:23] <tadzik> these were the things I was panic-fixing with putting '1;' after  every loop in my code

[23:23] <tadzik> and I wasn't the only one

[23:23] <jnthn> tadzik: Yes, you don't have to do *that* any more. :)

[23:24] <tadzik> skids does, apparently :/

[23:24] <tadzik> what happens to his for loop by default? It disappears? Why?

[23:24] <jnthn> Yeah. Well, now you only have to do it if you do a for and want the results of the body to be returned.

[23:24] <tadzik> ah!

[23:24] <jnthn> It runs his for loop, it just doesn't collect the results.

[23:24] <tadzik> oh

[23:24] <tadzik> that makes sense :)

[23:24] <jnthn> So for is the imperative construct most of us expect. :)

[23:24] <tadzik> that I like

[23:25] <tadzik> right :)

[23:25] *** camelia joined
[23:26] *** pippo joined
[23:26] <pippo> m: nqp::getenvhash()

[23:27] <pippo> m: say 1

[23:27] <pippo> p: say 1

[23:27] <pippo> n: say 1;

[23:28] *** pippo left
[23:29] *** raydiak joined
[23:29] *** Adriaaan left
[23:30] * lue wonders how long it will take before he stops working on his elisp STD clone out of agony. :P

[23:30] *** camelia left
[23:30] <jnthn> lue: Did you implement an LTMer in elisp yet? :D

[23:31] <lue> hah hah nope :) but my perl6 major mode is in all likelihood going to become 90% a perl6/std clone, which is what I'm talking about.

[23:32] *** berekuk left
[23:33] *** denis_boyun__ left
[23:33] <lue> Perl 6 does quite a bit of stuff that emacs' standard major mode tools aren't quite set up to handle, as you might imagine :)

[23:33] *** dmol left
[23:34] *** kst left
[23:35] * lue hopes that (e|si)mulating the braiding of languages in Perl 6 won't be too hard when it comes up.

[23:35] *** kst joined
[23:36] *** FROGGS left
[23:38] *** raydiak left
[23:42] *** camelia joined
[23:42] *** btyler left
[23:43] *** ChanServ sets mode: +v camelia

[23:47] <jnthn> 'night, #perl6

[23:47] <lue> ♞ jnthn o/

[23:48] *** FROGGS joined
[23:52] *** colomon left
[23:53] *** raydiak joined
