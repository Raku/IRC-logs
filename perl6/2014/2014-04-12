[00:00] <average> I dunno, I just wanted to point out that if the link can be changed to https://rt.perl.org/Public , it would be better IMHO

[00:00] <havenwood> sigils and twigils, oh my

[00:01] <timotimo> yeah, sounds good to me

[00:03] <average> also, lots of spam in that RT, nothing that spamassassin can't fix for example

[00:22] <jnthn> I blug: https://6guts.wordpress.com/2014/04/12/optimization-concurrency-and-moar/

[00:22] <timotimo> those "moar"/"more" jokes aren't ever going to stop

[00:23] <jnthn> Nope :P

[00:25] *** havenwood left
[00:29] <timotimo> like'd :)

[00:30] <jnthn> :)

[00:30] <jnthn> 'night, #perl6

[00:34] *** hoverboard left
[00:53] <timotimo> 'night jnthn 

[01:17] *** hoverboard joined
[01:18] *** plobsing joined
[01:23] *** klapperl left
[01:24] *** klapperl joined
[01:27] *** kurahaupo joined
[01:35] *** kurahaupo left
[01:35] *** kurahaupo joined
[01:39] *** kurahaupo_mobile joined
[01:39] *** kurahaupo left
[01:48] *** Ben_Goldberg joined
[01:48] *** BenGoldberg left
[01:48] *** Ben_Goldberg is now known as BenGoldberg

[01:49] *** rurban_ left
[01:49] *** rurban_ joined
[02:00] *** Ben_Goldberg joined
[02:00] *** BenGoldberg left
[02:00] *** Ben_Goldberg is now known as BenGoldberg

[02:07] *** BenGoldberg left
[02:10] *** kurahaupo_mobile left
[02:11] *** kurahaupo joined
[02:19] *** lustlife joined
[02:23] *** cognominal left
[02:28] *** xragnar_ joined
[02:28] *** xragnar left
[02:28] *** xragnar_ is now known as xragnar

[02:37] *** sctt joined
[02:56] *** raiph joined
[02:59] *** dayangkun left
[02:59] <raiph> average: Iv

[02:59] <raiph> average: I've changed the link

[03:01] <raiph> (the "perl.org bug tracker" link on http://rakudo.org/how-to-help/)

[03:02] <average> raiph: ah nice :)

[03:02] <average> raiph: thanks :)

[03:02] <raiph> .tell pmichaud I've tweaked a rakudo.org link per average++'s comment at http://irclog.perlgeek.de/perl6/2014-04-12#i_8575582

[03:02] <yoleaux> raiph: I'll pass your message to pmichaud.

[03:03] *** dayangkun joined
[03:04] <raiph> jnthn++ # another excellent blog post covering excellent work

[03:17] *** kurahaupo left
[03:18] *** kurahaupo joined
[03:21] *** BenGoldberg joined
[03:23] *** ggoebel11119 joined
[03:26] *** BenGoldberg left
[03:27] *** rurban joined
[03:46] *** sctt left
[03:49] *** BenGoldberg joined
[03:53] *** autark left
[03:54] *** BenGoldberg left
[03:55] *** BenGoldberg joined
[04:00] *** BenGoldberg left
[04:14] *** average left
[04:23] <TimToady> added a solution to http://rosettacode.org/wiki/Left_factorials#Perl_6 that is 280 times faster

[04:23] *** xenoterracide joined
[04:26] <lue> Maybe you could use prefix:<¡> instead? :)

[04:44] *** anaeem1 joined
[04:58] *** rurban left
[05:00] *** adu joined
[05:09] *** SamuraiJack_ joined
[05:18] *** xenoterracide left
[05:28] *** SamuraiJack__ joined
[05:30] *** kurahaupo left
[05:32] *** havenwood joined
[05:32] *** SamuraiJack_ left
[05:32] *** cooper left
[05:35] *** anaeem1 left
[05:36] *** cooper joined
[05:38] *** kaare_ joined
[05:47] <moritz> jnthn++ # blog

[05:51] *** kurahaupo joined
[05:59] *** rurban joined
[06:03] *** darutoko joined
[06:03] *** rurban left
[06:20] *** hoverboard left
[06:27] <adu> jnthn++ # just because

[06:31] *** dayangkun left
[06:45] *** havenwood left
[06:46] *** havenwood joined
[06:48] <Woodi> gmorning everyone

[06:49] <moritz> \o

[06:50] * moritz finds that searching 900k files / 350GB is slow even with Perl 5

[06:50] <Woodi> thanx jnthn++ for blog, now I know what that damn spesh is :) and few more things even

[06:50] *** havenwood left
[06:50] <moritz> s/350/650/

[06:54] <Woodi> jnthn: but I think your last blogs are in progress-raport form, ready for managers byings to read... I think something targetting able-to-do-hard-code-things devs would help community a lot by aiming at best ppls to work happening here...

[06:55] <adu> which blog?

[06:56] <adu> ah 6guts

[06:57] <Woodi> jnthn: more detaily: writing about interesting, hard to grock internals changes could have appeal to some good brains. also: I think you could blog using communication form you use to talk to TimToady... eg. q: "what about at_pos ?", a: "ok, but WHENCE"...

[06:58] <Woodi> it could help to upload p6 internals skeleton right to SSBrains...

[06:59] <adu> what's SSBrains?

[06:59] <TimToady> after the problem of too many cooks in the kitchen for Parrot, I think jnthn++ prefers to err on the other side

[07:00] <Woodi> TimToady: just wanted to write something about lack of p5 internals chapter in moust popular p5 books :)

[07:00] <moritz> Woodi: the able-to-do-hard-code-things devs just read the commit messages :-)

[07:01] <Woodi> moritz: no, we need to hijack them first !

[07:01] <Woodi> umm, what is what ladys do to men ?

[07:02] <TimToady> lure?

[07:02] <Woodi> seduce...

[07:02] <moritz> talk, IME :-)

[07:02] <Woodi> right, lure is similiar :)

[07:02] <TimToady> actually, decide not to say "no", mostly :)

[07:03] *** lizmat left
[07:03] <TimToady> most men don't need much luring

[07:03] <Woodi> it's isomorphic to reading commits messages :)

[07:03] <Woodi> ok, need to work some...

[07:04] <TimToady> .oO("I love it when you talk dirty...")

[07:04] <adu> you would be surprised the power of not saying "no"

[07:04] <TimToady> well, it's the only think keeps the human race going :)

[07:05] <adu> when I asked my fiancee to spend the rest of her life with me she said "are you f**king sh**ing me?"

[07:05] <masak> jnthn++ # nice blog post

[07:05] <masak> jnthn++ # nice progress

[07:05] <masak> others++ # too

[07:07] <adu> TimToady: are you back from China yet?

[07:07] <TimToady> mostly

[07:08] <TimToady> various systems are not yet convinced

[07:08] <adu> are you standing in line in immigration?

[07:08] <TimToady> no, they don't allow electronics there

[07:09] <adu> well, then welcome back, "mostly"

[07:09] *** spider-mario joined
[07:16] *** SamuraiJack__ left
[07:20] *** pecastro left
[07:20] *** pecastro_ joined
[07:34] *** anaeem1 joined
[07:35] *** rurban joined
[07:40] *** rurban left
[07:40] *** lizmat joined
[07:41] *** woolfy joined
[07:46] *** havenwood joined
[07:58] <lizmat> wow: Files=801, Tests=31023, 183 wallclock secs ( 8.07 usr  3.67 sys + 1212.53 cusr 93.47 csys = 1317.74 CPU)

[07:59] *** havenwood left
[07:59] <lizmat> encroaching on 3 mins for doing the full spectest on moar

[07:59] *** molaf_ joined
[08:01] *** molaf left
[08:03] *** snarkyboojum joined
[08:07] *** woolfy left
[08:10] <dalek> roast: 0003eab | (Elizabeth Mattijsen)++ | S03-operators/orelse.t:

[08:10] <dalek> roast: Properly plan / skip orelse tests

[08:10] <dalek> roast: 

[08:10] <dalek> roast: Before we had a plan, some tests were basically ignored.  Now with a plan,

[08:10] <dalek> roast: and skips in place, we still somehow miss the last test being executed.

[08:10] <dalek> roast: Patches welcome.

[08:10] <dalek> roast: review: https://github.com/perl6/roast/commit/0003eab49e

[08:11] *** adu left
[08:11] <lizmat> decommute&

[08:11] *** lizmat left
[08:14] <dalek> roast: 13206ce | moritz++ | S03-operators/orelse.t:

[08:14] <dalek> roast: fix fudging of orelse tests

[08:14] <dalek> roast: 

[08:14] <dalek> roast: the ok() call needs to be at the start of the line, otherwise fudge ignores it

[08:14] <dalek> roast: review: https://github.com/perl6/roast/commit/13206ce52a

[08:14] <moritz> .tell lizmat ftfy (orelse.t)

[08:14] <yoleaux> moritz: I'll pass your message to lizmat.

[08:18] *** broquaint left
[08:22] *** dmol joined
[08:33] *** anaeem1 left
[08:35] *** cognominal joined
[08:38] *** rurban joined
[08:38] *** broquaint joined
[08:41] <Rounin> Man, this Chinese tech blog someone posted here the other day has a frightening amount of relevant content

[08:41] <Rounin> Did all the tech blogs emigrate to China after the .com bubble or something

[08:42] <Rounin> Perhaps when Slashdot got bought

[08:42] <Rounin> Well, blog schmog... It's a site with articles

[08:42] *** rurban left
[08:44] *** anaeem1 joined
[08:44] <Rounin> 那我來說，歡迎我們新中國霸主。

[08:46] *** snarkyboojum_ joined
[08:46] *** anaeem1 left
[08:46] *** snarkyboojum__ joined
[08:48] *** snarkyboojum__ left
[08:48] *** snarkyboojum_ left
[08:53] *** broquaint left
[08:53] <masak> China is increasingly becoming a happening place, if that's what you mean.

[08:54] *** broquaint joined
[08:55] <masak> something to do with bringing millions of people out of poverty and becoming a significant exporter of goods.

[08:55] <masak> oh, and actually getting education right.

[09:05] *** plobsing left
[09:05] * moritz wonders if there are serious, better-working alternatives to today's classroom-style teaching

[09:08] <bonsaikitten> moritz: at scale it's hard

[09:08] <Woodi> moritz: university. only with students *interested* in learning what proffesors want to teach them even they are sure they are not interested in that :) and filling their free time with related subjects, private projects ets :)

[09:09] <bonsaikitten> masak: china ...education ... uhm... they didn't get much right

[09:10] <moritz> bonsaikitten: well, it wouldn't need to scale more than today's schools

[09:10] <moritz> Woodi: IME university is pretty much like school, just a bit more liberal in what courses you take (and the resulting self-selection that actually does lead to more interested students)

[09:10] <bonsaikitten> moritz: you mean one teacher for 40-60 kids that have the attention span of bicycle?

[09:11] <bonsaikitten> the old german / "Humboldt" university system was quite interesting. But it got down-harmonized because advantages are unfair

[09:15] <Woodi> moritz: I think that additional freedom is all what is needed. just self motivation is problem. and trust to authorities eg. why ALL that math matters ;)

[09:16] <Rounin> moritz: I've heard great things about the "Experimenting with other things, losing a generation and going back to classroom-style teaching" methodology

[09:16] <masak> moritz: there most likely are.

[09:16] <moritz> Woodi: I think that the motivation problem is intrinsic to the current style of teaching (listening over doing, being confined to a class room etc.)

[09:16] <masak> &

[09:18] <bonsaikitten> motivation ... we make children not move for hours

[09:18] <bonsaikitten> maybe that's not a good way to start education

[09:18] <moritz> bonsaikitten: agreed

[09:18] <Rounin> It seems like the Montessori schools do things radically differently... It must work to some extent, seeing as they're still there

[09:18] <bonsaikitten> Rounin: it works only marginally worse than the normal schools

[09:18] <Rounin> But who can tell what would appen if the entire general population of students were sent there

[09:18] <bonsaikitten> so that's not too bad ;)

[09:19] <Rounin> That's something at least :)

[09:19] <moritz> bonsaikitten: by what metrics?

[09:20] <bonsaikitten> moritz: trick question

[09:20] <bonsaikitten> but - the kids I've known who went to such experimental schools were usually unable to adapt properly to hierarchical systems

[09:20] <bonsaikitten> e.g. school, workplaces

[09:23] <moritz> bonsaikitten: several families I know sent their children to Montessori schools precisely because they had probles adapting to hierarchical systems

[09:23] <Woodi> additional problem is that some persons learn by viewing other by hearing and other by manually doing. and some less elastic - they need to force themselve to learn or do for some period of time and in one point they got small "enlightenment" point - learning/brain is not linear...

[09:24] *** LLamaRider joined
[09:25] <Woodi> they say ~10 years of learn/do/work to master some domain. works even for bakery :)

[09:27] *** havenwood joined
[09:28] <moritz> Woodi: but nearly everybody learns best when all of those activities are combined, plus teaching it back to others

[09:29] <moritz> so doing that would be a pretty good approach

[09:31] <bonsaikitten> I guess we'd have to get rid of the idea that all kids are equal

[09:32] <Rounin> "Equal in value", "Equal in rights", "Equal in talents", "Equal in status" and so on so often seem to be conflated

[09:32] <Rounin> It's as if people are afraid that the moment we admit that people are different, we'll be rolling out the gas chambers again

[09:33] <bonsaikitten> Rounin: gas is too expensive, who would be able to pay for that?! 

[09:33] <Woodi> pleas stop

[09:33] <bonsaikitten> I heard of schools that don't allow score keeping in sports, so that no one loses

[09:33] <Rounin> Hmm...

[09:33] <Rounin> Does it help I wonder

[09:34] <Rounin> I was very well aware when I was a kid that I was good at maths and bad at sports

[09:34] <Rounin> I'm thankful for all the gym classes I went to nonetheless :P

[09:34] <bonsaikitten> "bad" is relative - I didn't have the strength for some things, but had the endurance to outrun everyone else

[09:34] <bonsaikitten> sadly we never went above 1000m, so that was a big handicap ... ;)

[09:35] <Rounin> :D

[09:36] * moritz would have gladly skipped those 4km runs, and instead played more table tennis :-)

[09:36] *** havenwood left
[09:37] *** havenwood joined
[09:37] <bonsaikitten> oh, 4-5km is nice. 1000m is almost a glorified sprint

[09:38] <Rounin> I wish I'd had more time to play with QuickBASIC! A few more computer lessons, and I might have gotten it to do something

[09:38] <Woodi> that's what I mean before :) kids need to try many fields and trust teachers that's good for them :)

[09:38] *** rurban joined
[09:39] <bonsaikitten> Rounin: pff. just learn by modifying GORILLA.BAS

[09:39] <Woodi> I do not liked to learn any "graphics" things in ANY form. and few years ago I wanted to edit photos, needed to learn from scrath

[09:39] <moritz> bonsaikitten: it was NIBBLES.BAS for me :-)

[09:40] *** LLamaRider left
[09:40] <bonsaikitten> hehe

[09:40] <Woodi> so some base knowledge is good

[09:40] <bonsaikitten> I started learning C when I figured out that I couldn't allocate more than 64kB sanely in BASIC

[09:40] <Rounin> Interesting approach, bonsaikitten 

[09:41] * moritz added a level editor, save&restore, lots of cheats and extra modi to nibbles

[09:41] <Rounin> Though that will have to be in my next life, since I know how to code now :P

[09:41] <Rounin> I mean, considering where we are and all

[09:41] <bonsaikitten> Rounin: I wouldn't start with basic for new learners

[09:41] <Rounin> Well, it was what we had at the time

[09:41] *** havenwood left
[09:41] <Rounin> I Windows 0.000007 or whatever it was

[09:41] <bonsaikitten> give them python, then show them how C can be x times faster and let them figure out things like memory allocation and pointers

[09:42] <bonsaikitten> work

[09:42] * moritz knows how to code, but has learned that coding is only a very small part of programming

[09:42] <Rounin> And then "I have a language that lets you write this in one line, mwahahaaah..."

[09:42] <bonsaikitten> then when they are showing some proficiency give them LISP and watch their minds melt

[09:42] <Rounin> :D

[09:42] <moritz> or maybe s/programming/development/

[09:42] <moritz> bonsaikitten: and when their minds are molten, give them Haskell :-)

[09:43] <jnthn> morning, #perl6

[09:43] <moritz> that needs to re-wire the brain anyway

[09:43] <moritz> \o jnthn 

[09:43] <Rounin> Molten Minds would be a good trademark

[09:43] *** rurban left
[09:43] <Rounin> I wonder if anyone is using it

[09:43] <Rounin> Haha yes

[09:43] <Woodi> btw. you know http://en.wikipedia.org/wiki/Miyamoto_Musashi is famous in two swords fighting. what is less common that his father was policeman and was profficient in using special police weapons to disarm, two handed weapon... so background or starting early helps a lot

[09:45] <Woodi> so in what age you was learnin that BASIC ? :)

[09:50] <Rounin> Hmm...

[09:50] <Rounin> Well, I saw some Commodore BASIC at 7-8, but I would think 10-12 for QBASIC

[09:51] <Rounin> My friend found a book about it at the library near our school

[09:51] <Rounin> It's the city's main library, so it also got internet access around the same time

[09:52] <Rounin> Pretty cool place to spend an ever more extended lunch break

[09:52] *** vendethiel left
[09:53] <Woodi> my interest in programming started around 10 but probably my brain prefer more sane things :)

[09:53] <Rounin> :D

[10:02] *** spider-mario left
[10:02] *** araujo left
[10:07] *** eiro left
[10:15] *** cobra joined
[10:17] *** kaare_ left
[10:26] *** denis_boyun joined
[10:33] *** rindolf joined
[10:34] <FROGGS> timotimo / tadzik: about the binaries that assimilate .moarvm files... I have some unpushed stuff locally, and I'll push that next week, when I am back from holidays...

[10:36] <tadzik> okay :)

[10:37] <tadzik> FROGGS++

[10:38] <jnthn> FROGGS: Hope you're having a nice holidays! :)

[10:39] *** rurban joined
[10:44] *** rurban left
[10:46] *** brrt joined
[10:46] *** Rix left
[10:47] *** vendethiel joined
[10:55] *** darutoko left
[11:01] <FROGGS> jnthn: I have... the good thing about this place is that I only have GPRS, so hacking or something like that really is pain

[11:03] <jnthn> Enforced vacation! :)

[11:10] *** clkaoud joined
[11:11] <FROGGS> exactly :o)

[11:11] <FROGGS> feels good somehow

[11:13] <tadzik> :D

[11:13] <tadzik> weird

[11:13] * jnthn spectests a moar with cleaned up exit

[11:13] <tadzik> I know the feeling, I spent a week recently in France, which, as we know, has no internet at all :P

[11:13] *** cobra left
[11:13] <jnthn> m: Thread.start({ sleep 1; say 'bye' }); say 'hi'

[11:13] <camelia> rakudo-moar aeda9d: OUTPUT«hi␤Unhandled exception: Cannot invoke null object␤»

[11:13] <jnthn> m: Thread.start({ sleep 1; say 'bye' }); say 'hi'

[11:13] <camelia> rakudo-moar aeda9d: OUTPUT«hi␤Unhandled exception: Cannot invoke null object␤»

[11:13] <jnthn> hah :)

[11:14] <jnthn> That now works out, with local changes.

[11:14] <tadzik> \o/

[11:14] <jnthn> should mean we're rid of the SIGABRT too, I hope.

[11:21] *** molaf_ left
[11:26] *** Rotwang joined
[11:29] *** virtualsue joined
[11:41] *** raiph left
[11:52] *** darutoko joined
[11:53] *** lizmat joined
[11:55] *** darutoko left
[11:59] *** spider-mario joined
[12:18] *** molaf joined
[12:33] *** denis_boyun left
[12:33] *** SamuraiJack__ joined
[12:34] <moritz> \o/

[12:35] *** denis_boyun_ joined
[12:36] *** xenoterracide joined
[12:41] *** rurban joined
[12:45] *** rurban left
[12:58] *** woolfy joined
[13:05] <lizmat> moritz /o

[13:05] <yoleaux> 08:14Z <moritz> lizmat: ftfy (orelse.t)

[13:05] <lizmat> ftfy?

[13:05] *** brrt left
[13:07] *** benabik left
[13:07] *** rurban joined
[13:08] <timotimo> o/

[13:08] <timotimo> "fixed that for you"

[13:13] *** benabik joined
[13:17] *** SamuraiJack__ left
[13:17] *** virtualsue left
[13:20] <lizmat> ah, cool

[13:23] *** Rotwang left
[13:24] *** vendethiel left
[13:26] <dalek> specs: fa542ea | (Elizabeth Mattijsen)++ | S99-glossary.pod:

[13:26] <dalek> specs: Add ftfy lemma

[13:26] <dalek> specs: review: https://github.com/perl6/specs/commit/fa542ea3ff

[13:26] <timotimo> i wonder if a "spesh" lemma is in order?

[13:26] *** vendethiel joined
[13:29] <lizmat> most definitely!

[13:29] <lizmat> patches welcome  :-)

[13:29] *** eiro joined
[13:30] <timotimo> yeah, i could do that

[13:31] *** Rotwang joined
[13:37] <timotimo> hm. now it seems like i have to add lemmata for JIT and bytecode

[13:40] <masak> Just Insert It!

[13:40] <masak> er

[13:40] <masak> Just Insert Them!

[13:43] *** anaeem1_ joined
[13:43] <jnthn> .oO( And keep them away from the cliff edge... )

[13:45] <dalek> specs: 8dbfac0 | timo++ | S99-glossary.pod:

[13:45] <dalek> specs: a sentence on spesh

[13:45] <dalek> specs: review: https://github.com/perl6/specs/commit/8dbfac0b50

[13:49] *** raiph joined
[13:49] <masak> by the way, if someone has a peripheral interest in category theory, and a nagging suspicion that ZFC might not be the most optimal way to axiomatize sets, I warmly recommend http://arxiv.org/abs/1212.6543 -- a nice short read, which doesn't throw the reader off the deep end with CT concepts.

[13:52] <eiro> hello 

[13:52] <timotimo> wow, the core.setting.jar is only 2 megabytes big?

[13:52] <timotimo> is that the compression of jar files that's doing that?

[13:53] <timotimo> well, gzipping the moarvm core setting shrinks it down to 1.7 mb, whereas the core.setting.pbc gzip'd is also 2 megabytes big

[13:55] <jnthn> timotimo: Yeah. Compression is good, but compress the bytecode and you can't mmap it

[13:55] <timotimo> yup

[13:55] <timotimo> somehow the jvm still ends up having fantastic startup times and memory usage characteristics

[13:55] <timotimo> oh ... wait

[13:55] <jnthn> :D

[13:59] <Rounin> Did you just say JVM, fantastic startup times and memory usage characteristic at the same time

[13:59] <timotimo> :D

[13:59] <Rounin> I thought it was April 12th already

[14:00] <timotimo> that matches /April ' ' 1/

[14:00] <Rounin> Ah

[14:01] <Rounin> Ganz logisch

[14:01] <cognominal> masak, have you seen the latest developments?   homotopies a way to represent types  ! I groked the first chapter. And choked on the second ; so I am reading material to be able to understand it. btw, that's an open source book written by a team gathered (sometimes virtually) around a guy who got the Fields medal.  http://homotopytypetheory.org/book/

[14:05] <timotimo> i think that book is quite famous enough that masak has already heard of it :)

[14:05] <retupmoca> Project Digest::HMAC not found in the ecosystem # when does this get pulled into panda's ecosystem? It's been on modules.perl6.org for almost 24 hours

[14:06] <masak> cognominal: yes, I've seen the homotopy book. I've scratched the surface of homotopy theory. after having delved fairly deeply into CT in the past year, I know for a fact I'm not ready for HT yet.

[14:07] <masak> cognominal: there was a claim on the p6l list on the order of HT revolutionizing comp.sci./type theory (and by extension, maybe Perl 6 should pay attention to it and be based on it?). I very nearly replied to that email. to me, it appears that HT doesn't overthrow anything (nor does CT), but it sometimes puts things on a more solid/general foundation.

[14:09] <cognominal> as if, the scope of the Perl 6 project was not large enough as it stands  :)

[14:09] <masak> the paper I linked is a good example of that kind of re-foundationing.

[14:10] <masak> "Category theory is just mathematicians learning to program by interface" -- (quoted from memory) Eric Meijer

[14:11] <cognominal> masak:  https://groups.google.com/forum/#!topic/perl.perl6.language/nZT_KCGTbm8    that post? 

[14:13] <masak> that post.

[14:13] <Rounin> One day I'd like mathematicians to learn proper variable and function names

[14:14] <Rounin> The world would most likely undergo a scientific revolution

[14:14] <masak> the short answer is "No. Sets are very relatively useful in everyday programming. Topoi aren't."

[14:14] <masak> I'd love for someone to prove me wrong!

[14:15] <moritz> in fact, at least half of my ad-hoc scripts contain an ad-hoc implementation of sets based on hashes

[14:15] <moritz> typically in the form   next if $seen{$key}++;

[14:15] <vendethiel> (Eric Meijer just looks mad because he considers he's lost time with haskell)

[14:16] *** denis_boyun_ left
[14:16] <masak> and it's not just "mathemathical fashion sensitivity". even HoTT contains set theory as a (fairly central) special case.

[14:16] <masak> the other cases being more exotic but less everyday.

[14:16] <masak> 'night, #perl6

[14:17] <retupmoca> spectest on moar head/head/head seems to be hanging on spec/S17-concurrency/lock.t

[14:17] <retupmoca> been 6/8 with 0 cpu time for a while now

[14:18] <retupmoca> if I run it manually it looks like it runs through all 8 (failing 1) and then hangs at exit

[14:19] <jnthn> May like to try MoarVM HEAD, which has a better exit strategy.

[14:20] <retupmoca> This is perl6 version 2014.03.01-128-gaeda9d0 built on MoarVM version 2014.03-202-g695fdf9

[14:20] * moritz tries

[14:20] <retupmoca> jnthn: pretty sure I'm running your latest patch

[14:22] <retupmoca> out of 6 runs, 4 hung and 2 exited cleanly

[14:22] <moritz> yes, 2014.03-202-g695fdf9 looks like latest

[14:22] <vendethiel> https://groups.google.com/forum/#!topic/perl.perl6.language/GKSIbeNYZto good read

[14:22] <jnthn> retupmoca: OK, must be something else, then.

[14:26] *** lustlife left
[14:26] *** lustlife joined
[14:29] <retupmoca> tadzik: how often does the panda ecosystem json file update on the server?

[14:39] *** darutoko joined
[14:41] <tadzik> retupmoca: every hour

[14:42] <retupmoca> tadzik: does that include adding new modules? Digest::HMAC has been on modules.perl6.org for a while now, but panda claims no knowledge of it

[14:44] <retupmoca> tadzik: I added it to META.list at about 14:40Z yesterday, but I'm not seeing it in feather's projects.json

[14:45] <tadzik> retupmoca: hm, let me see

[14:50] <tadzik> ah, stupid LWP doesn't follow redirections

[14:51] <tadzik> and/or hates ssl

[14:51] <retupmoca> do I need to put a non-redirecting URL someplace maybe?

[14:52] <tadzik> no, no need

[14:52] <tadzik> not your fault

[14:53] <tadzik> I fixed it now, and http://feather.perl6.nl:3000/module/Digest;HMAC works

[14:53] <tadzik> thanks for reporting it

[14:53] <retupmoca> tadzik++ ty sir

[14:59] *** colomon joined
[15:33] *** guru joined
[15:34] *** guru is now known as ajr_

[15:36] *** cooper left
[15:38] *** rindolf left
[15:42] *** erdic left
[15:43] *** erdic joined
[15:48] *** spider-mario left
[15:50] *** brrt joined
[15:51] *** cooper joined
[15:51] *** spider-mario joined
[15:52] <vendethiel> r: 123456789123.Str.split(/ ( \d ** 3 ) /).perl.say

[15:52] <camelia> rakudo-jvm aeda9d: OUTPUT«(timeout)»

[15:52] <camelia> ..rakudo-parrot aeda9d, rakudo-moar aeda9d: OUTPUT«("", "", "", "", "").list␤»

[15:59] <moritz> m: say 123456789123.Str.comb(/ \d ** 3 /).perl

[15:59] <camelia> rakudo-moar aeda9d: OUTPUT«("123", "456", "789", "123").list␤»

[16:04] <vendethiel> m: say 1234567891235.Str.comb(/ \d ** 1..3 /).perl

[16:04] <camelia> rakudo-moar aeda9d: OUTPUT«("123", "456", "789", "123", "5").list␤»

[16:04] <vendethiel> m: say 1234567891235.Str.flip.comb(/ \d ** 1..3 /).reverse.join('').perl

[16:04] <camelia> rakudo-moar aeda9d: OUTPUT«"1432765198532"␤»

[16:05] <vendethiel> m: say 1234567891235.Str.flip.comb(/ \d ** 1..3 /).reverse.join(' ').perl

[16:05] <camelia> rakudo-moar aeda9d: OUTPUT«"1 432 765 198 532"␤»

[16:05] <vendethiel> moritz++

[16:06] <vendethiel> wait no o/

[16:06] <vendethiel> m: say 1234567891235.Str.flip.comb(/ \d ** 1..3 /).reverse.map(&flip).join(' ').perl

[16:06] <camelia> rakudo-moar aeda9d: OUTPUT«"1 234 567 891 235"␤»

[16:07] <moritz> m: say 1234567891235.flip.comb(/ \d ** 1..3/).reverse>>.flip

[16:07] <camelia> rakudo-moar aeda9d: OUTPUT«1 234 567 891 235␤»

[16:09] *** benabik left
[16:10] <vendethiel> moritz: >> keeps the order, does it ?

[16:10] *** benabik joined
[16:11] <moritz> vendethiel: it executes out of order, but the return values are ordered again

[16:11] <flussence> ordered on the left, threaded on the right

[16:12] <vendethiel> wasn't sure, that's why. What'd it take to get the regexp in "non-greedy" mode ? (where it'd match ** 1 everytime) ?

[16:17] <moritz> **?

[16:17] <moritz> m: say 1234.comb(/\d **? 1..3/)

[16:17] <camelia> rakudo-moar aeda9d: OUTPUT«1 2 3 4␤»

[16:18] <moritz> j: say 'timeout?'

[16:18] <camelia> rakudo-jvm aeda9d: OUTPUT«timeout?␤»

[16:20] <vendethiel> moritz++

[16:23] <moritz> j: say 'alive'

[16:23] <camelia> rakudo-jvm aeda9d: OUTPUT«alive␤»

[16:24] *** snarkyboojum left
[16:24] *** havenwood joined
[16:29] <lizmat> r: my $a; say $a * 4; $a *= 4; say $a

[16:29] <camelia> rakudo-parrot aeda9d: OUTPUT«use of uninitialized value of type Any in numeric context  in block  at /tmp/tmpfile:1␤␤0␤4␤»

[16:29] <camelia> ..rakudo-jvm aeda9d, rakudo-moar aeda9d: OUTPUT«use of uninitialized value of type Any in numeric context␤0␤4␤»

[16:30] * lizmat wonders whether that is logical

[16:31] <lizmat> would have expected either 4 4 or 0 0

[16:31] <lizmat> is there a place where this behaviour is specced

[16:31] <lizmat> ?

[16:31] * geekosaur thinks that should have been 0 0

[16:32] <lizmat> also: 

[16:32] <lizmat> r: say Any * 4; say Int * 4

[16:32] <camelia> rakudo-moar aeda9d: OUTPUT«use of uninitialized value of type Any in numeric context␤0␤Invocant requires an instance, but a type object was passed␤  in method Bridge at src/gen/m-CORE.setting:4442␤  in sub infix:<*> at src/gen/m-CORE.setting:4347␤  in block  at /tmp/tmpfil…»

[16:32] <camelia> ..rakudo-jvm aeda9d: OUTPUT«use of uninitialized value of type Any in numeric context␤0␤Cannot look up attributes in a type object␤  in method Bridge at gen/jvm/CORE.setting:4443␤  in sub infix:<*> at gen/jvm/CORE.setting:4347␤  in block  at /tmp/tmpfile:1␤␤»

[16:32] <camelia> ..rakudo-parrot aeda9d: OUTPUT«use of uninitialized value of type Any in numeric context  in block  at /tmp/tmpfile:1␤␤0␤Invocant requires an instance, but a type object was passed␤  in method Bridge at gen/parrot/CORE.setting:4446␤  in sub infix:<*> at gen/parrot/CORE.setti…»

[16:34] *** xinming__ left
[16:40] <TimToady> S03:4092 specs the behavior of op= on containers containing type objects

[16:40] <synopsebot> Link: http://perlcabal.org/syn/S03.html#line_4092

[16:40] <TimToady> basically, op= is considered a degenerate reduction

[16:43] <TimToady> making op and op= would be a shallow consistency, but Perl 6 tends to prefer the deep semantic consistencies where there's a choice

[16:44] <TimToady> hmm, looks like I a verb there

[16:45] <lizmat> "operator's identify valiue"

[16:45] <lizmat> shouldn't that read "identity" value ?

[16:45] <TimToady> yup

[16:46] *** virtualsue joined
[16:47] <dalek> specs: 9e5a70e | (Elizabeth Mattijsen)++ | S03-operators.pod:

[16:47] <dalek> specs: Identified type and fixed

[16:47] <dalek> specs: review: https://github.com/perl6/specs/commit/9e5a70e43c

[16:48] *** benabik left
[16:48] <lizmat> *typo

[16:50] <TimToady> it's also one of those spots where the design is assuming a decent optimizer to pull the is-it-defined? guard out of the loop

[16:52] <TimToady> and maybe even just turn it into an initializer for the variable, with no need to check definedness at all

[16:52] *** MikeFair_ joined
[16:52] <lizmat> so how is the identity value of an operator determined ?

[16:53] *** xinming joined
[16:53] *** denis_boyun_ joined
[16:53] <moritz> lizmat: with the zero-arity multi

[16:53] <TimToady> the spec indicates it calls the nullary form of the operator

[16:54] <moritz> m: say infix:<+>(), infix:<*>()

[16:54] <camelia> rakudo-moar aeda9d: OUTPUT«01␤»

[16:54] <TimToady> admittedly, only mentions that in the example

[16:56] *** havenwood left
[16:56] *** anaeem___ joined
[16:58] *** anaeem1_ left
[17:00] * lizmat takes a little getting used to  $foo op= $bar not necessarily being the same as $foo = $foo op $bar

[17:05] *** benabik joined
[17:09] *** rindolf joined
[17:15] *** ClarusCogitatio left
[17:16] *** ClarusCogitatio joined
[17:20] *** xenoterracide left
[17:20] *** xenoterracide_ joined
[17:28] *** xenoterracide_ left
[17:32] *** virtualsue left
[17:35] *** hoverboard joined
[17:37] *** xenoterracide_ joined
[17:37] <timotimo> i'm going to put rakudo-jvm/2014.03 data into the benchmark plots now

[17:39] *** araujo joined
[17:41] *** hoverboard left
[17:56] <jnthn> arnsholt: Hm. I found a bit of a callbacks bug in NativeCall.

[18:02] <jnthn> arnsholt: If you have a callback that is not invoked immediately, then:

[18:02] <jnthn> 1) The callback cache re-uses it without consideration of the fact there may be many closure clones of the same code-ref, so closure semantics break

[18:03] <jnthn> 2) The callback being the only thing rooting the closure means it gets up getting GC'd at some point, then boom SEGV.

[18:03] <jnthn> Suspect this affects all backends.

[18:03] <jnthn> Adding my own array of things and then disabling the insert into the callback cache gets my thing reliably working.

[18:08] <eiro> jnthn, have you experienced pbs with compiling nqp on windows ? i'm struggling with java -cp because:

[18:08] *** xenoterracide_ left
[18:08] <eiro> * from msys, MSWin32 ne $^O

[18:08] *** benabik left
[18:09] <eiro> * from cmd, i don't have a 64bits version of nmake 

[18:09] *** rindolf left
[18:10] <eiro> so i'm trying to modify things to make msys work. maybe it's a false trail 

[18:13] *** klapperl left
[18:15] *** klapperl joined
[18:16] *** brrt left
[18:22] *** rindolf joined
[18:24] <timotimo> these slow benchmarks >_>

[18:28] *** MikeFair_ left
[18:28] *** SamuraiJack__ joined
[18:29] <tadzik> unrelated, but I lol'd: http://i.imgur.com/USnLRR0.jpg

[18:30] *** raiph left
[18:30] <timotimo> hahaha

[18:30] <timotimo> excellent

[18:34] <Rounin> :D

[18:35] *** darutoko left
[18:39] *** rindolf left
[18:40] <jnthn> eiro: No, I compile it each and every day on Windows :)

[18:42] <jnthn> eiro: Don't think you should need a 64-bit nmake, especially to build JVM one

[18:42] <jnthn> eiro: What issue do you hit?

[18:47] <eiro> -cp is always broken because $^O is msys 

[18:48] <eiro> i have fixed this part (adding "" in JVM.in and cpsep when $^O is msys

[18:49] <eiro> now i can compile some jars but later i have another error 

[18:49] <eiro> 3rdparty/asm/asm-tree-4.1.jar: 3rdparty/asm/asm-tree-4.1.jar: cannot execute binary file

[18:50] <eiro> i though it was about $(CP (line 84)

[18:50] <eiro> apparently it's not. i'm trying to make "make" verbose 

[18:51] *** kurahaupo left
[18:53] *** zakharyas joined
[18:55] <eiro> jnthn, but maybe i should just use the same env as you. how did you setup yours ? do you use msys ? cygwin ? 

[19:07] <rurban> dont use msys, use mingw or MSVC or cygwin

[19:08] <eiro> what's wrong with msys ? 

[19:08] <eiro> (if there is something wrong)

[19:08] <jnthn> eiro: I build r-j with nmake

[19:08] <jnthn> eiro: And an ActiveState Perl in the path

[19:09] <rurban> it's only needed for cross-compiling to windows

[19:09] <eiro> ok

[19:09] <eiro> i'm pretty confortable with cygwin: i'm trying right now 

[19:10] <rurban> you are in the wrong shell. either the mingw bash or the old-style cmd.exe with strawberry or activeperl env

[19:10] <rurban> cmd.exe for jvm preferred

[19:11] <jnthn> Yes, shoulda mentioned that. Using the one with build stuff configured that a VS install (and so probably an Win SDK install) sets up.

[19:11] <eiro> cmd ask me for nmake

[19:11] <eiro> and windows complains about nmake to be 32bits binary

[19:12] <eiro> ohh ... installing visual studio express is required so 

[19:13] *** xenoterracide_ joined
[19:14] <eiro> wow ... i need a microsoft account :( 

[19:14] <tadzik> ah, yes

[19:14] <tadzik> I can give you mine

[19:14] <tadzik> I opened it only to compile my university project once

[19:14] <tadzik> of course you can't compile your code w/o a microsoft account

[19:16] <eiro> no: i have one. i just have to remember :)

[19:21] *** btyler joined
[19:23] <eiro> time's up: got to go to italias 

[19:23] <eiro> cya everyong 

[19:24] <eiro> s/ong/one

[19:31] *** anaeem___ left
[19:32] *** telex left
[19:34] *** telex joined
[19:36] *** kurahaupo joined
[19:38] *** anaeem1 joined
[19:39] <timotimo> oh wow the benchmarks are finally done

[19:40] <FROGGS> linky?

[19:41] <timotimo> soon

[19:42] *** rurban left
[19:42] <jnthn> FROGGS: I just did a make modules-install against a latest MoarVM and only Digest::MD5 fails; was something done about that, since I seem to recall you getting a clean build?

[19:42] <FROGGS> jnthn: https://github.com/cosimo/perl6-digest-md5/pull/4

[19:43] <FROGGS> jnthn: so you might want to switch it to https://github.com/cosimo/perl6-digest-md5/pull/4

[19:43] <FROGGS> err

[19:43] <FROGGS> this https://github.com/FROGGS/perl6-digest-md5

[19:43] <jnthn> FROGGS: ah, ok

[19:43] <retupmoca> FROGGS: I have a feature request for Digest::MD5

[19:43] <FROGGS> retupmoca: do tell

[19:43] <timotimo> i'm locked out of my vhost thingie

[19:43] <retupmoca> FROGGS: can you export a (Buf $data --> Buf) method/sub?

[19:44] <retupmoca> the only exported one right now is Str --> Str

[19:45] <FROGGS> retupmoca: I have suck-ish internet here, can you send a pull request to my fork?

[19:45] <retupmoca> FROGGS: ack

[19:46] <FROGGS> very nice :o)

[19:49] *** zakharyas left
[19:51] *** zakharyas joined
[19:51] <retupmoca> FROGGS: https://github.com/FROGGS/perl6-digest-md5/pull/1

[19:52] <jnthn> bah, my attempt to run all the module tests failed 'cus I typo'd languages...

[19:52] <FROGGS> O.o

[19:52] <FROGGS> typo--

[19:53] <timotimo> huh?

[19:54] <jnthn> timotimo: Am taking a look how we are for a Moar star.

[19:55] <FROGGS> is the typo about setting the PATH?

[19:55] <jnthn> Using latest Moar

[19:55] <tadzik> "Memory usage building Firefox with debug enabled was reduced from 15GB to 3.5GB; link time from 1700 seconds to 350 seconds"

[19:55] <jnthn> No, I ran modules-install.pl manually and put a wrong path in it.

[19:55] <tadzik> GCC 4.9 is quite a thing :)

[19:55] <jnthn> langauges :P

[19:55] <FROGGS> because I built r-m*/r-j*/r-p* several times

[19:56] <jnthn> FROGGS: ah, I'm just running the tests against an already built latest.

[19:56] <timotimo> oooh

[19:56] <jnthn> Anyway, two things have failures

[19:56] <timotimo> because "languages" is in the path to stuff?

[19:56] <jnthn> t/05-mock.t in DBIish

[19:56] <jnthn> And a couple of Panda tests.

[19:57] <FROGGS> <prefix>/install/languages/[nqp|perl6]/[bin|lib]

[19:57] <retupmoca> jnthn: DBIish tests were passing for me on moar if I didn't precompile

[19:57] *** rurban joined
[19:57] <retupmoca> jnthn: they start failing once precompiled, iirc

[19:58] <retupmoca> jnthn: more specifically, they started failing once DBDish.pm6 was compiled I think

[19:58] <jnthn> It's odd in so far as all the other DBIish tests put that one pass...

[19:58] <FROGGS> retupmoca: I will merge that PR when I had the chance to test it on all backends (most likely until wednesday)

[19:59] <retupmoca> jnthn: the mysql/etc tests don't actually run unless you have the right db username/pass/etc set up

[19:59] <retupmoca> FROGGS: sounds good

[20:00] <jnthn> retupmoca: ah.

[20:00] <retupmoca> jnthn: once I had the mysql environment set up, some tests passed before compile and failed after (just like mock)

[20:01] <FROGGS> jnthn: btw, panda should pass its tests when you'd do: s/$*EXECUTABLE_NAME/$*EXECUTABLE/

[20:03] <jnthn> FROGGS: Is that a patch we need to get into Panda?

[20:04] <FROGGS> jnthn: there is no patch yet, only https://github.com/tadzik/panda/issues/73

[20:07] <FROGGS> jnthn: this problem got me into working on nqp-m/perl6-m binaries...

[20:10] *** woolfy left
[20:11] <timotimo> FROGGS: how does a packaged binary call out to an actual vanilla perl6 binary if it needs to, btw?

[20:12] <retupmoca> m: say $*EXECUTABLE # like this?

[20:12] <camelia> rakudo-moar aeda9d: OUTPUT«IO::Path</home/p6eval/rakudo-inst-2/bin/perl6-m>␤»

[20:12] <FROGGS> timotimo: I don not understand... why do you mean by "call out" and "vanilla perl6"?

[20:13] <FROGGS> retupmoca: yes

[20:13] <FROGGS> m: say $*EXECUTABLE_NAME # this is not very helpful if it is not in PATH

[20:13] <camelia> rakudo-moar aeda9d: OUTPUT«perl6-m␤»

[20:14] <timotimo> well, if you bundle a bunch of bytecode with a moarvm

[20:14] <timotimo> sometimes you want to shell out to a perl6-m

[20:14] <timotimo> the trick so far has, as far as i understand it, been to use $*EXECUTABLE_NAME or something

[20:14] <retupmoca> FROGGS, jnthn: I can make a PR for panda with s/EXECUTABLE_NAME/EXECUTABLE/ ?

[20:14] <retupmoca> or is it more complicated than that?

[20:16] <FROGGS> retupmoca: I think that should do

[20:16] <FROGGS> retupmoca: please add "#73" to the commit title

[20:17] <retupmoca> FROGGS: will do. testing locally now

[20:18] <FROGGS> timotimo: okay, if there is another perl6-* in PATH then you have quite a lot of choices... perl6, perl6-m, perl6-j, perl6-p

[20:18] <jnthn> Narrowed the DBIish thing down to the methods using gather.

[20:20] <retupmoca> FROGGS, jnthn, *: https://github.com/tadzik/panda/pull/78

[20:20] <FROGGS> ohh, jnthn++ # blog post

[20:20] <retupmoca> oh, and tadzik I guess ^

[20:21] <dalek> panda: 78bb1e0 | (Andrew Egeler)++ | / (4 files):

[20:21] <dalek> panda: s/EXECUTABLE_NAME/EXECUTABLE/ (for GH #73)

[20:21] <dalek> panda: 

[20:21] <dalek> panda: This lets us use panda with a perl6 that isn't in the current path.

[20:21] <dalek> panda: review: https://github.com/tadzik/panda/commit/78bb1e0809

[20:21] <dalek> panda: abafd49 | tadzik++ | / (4 files):

[20:21] <dalek> panda: Merge pull request #78 from retupmoca/master

[20:21] <dalek> panda: 

[20:21] <dalek> panda: s/EXECUTABLE_NAME/EXECUTABLE/ (for GH #73)

[20:21] <dalek> panda: review: https://github.com/tadzik/panda/commit/abafd49eaa

[20:21] <FROGGS> retupmoca: there are more occourances that needs to be fixed...

[20:21] <retupmoca> wow, that was fast

[20:21] <tadzik> I was looking :P

[20:21] <tadzik> retupmoca++

[20:21] <FROGGS> in Panda::Builder or so at least

[20:21] <retupmoca> FROGGS: oh? I just did a grep

[20:21] <FROGGS> hmmm

[20:23] <retupmoca> FROGGS: I don't see anything in Panda::Builder

[20:23] <FROGGS> retupmoca: there are six hits

[20:23] <FROGGS> lib/Panda/Builder.pm:                shell("$*EXECUTABLE --target={comptarget} "

[20:23] <FROGGS> lib/Panda/Tester.pm:                my $c = "$prove-command -e $*EXECUTABLE -r t/";

[20:24] <FROGGS> that is my local stuff

[20:24] <retupmoca> yeah, but that's fine

[20:24] *** zakharyas1 joined
[20:24] <retupmoca> we're changing *to* EXECUTABLE, right?

[20:25] <FROGGS> yes

[20:25] *** zakharyas left
[20:25] <retupmoca> FROGGS: my PR changed 6 lines of EXECUTABLE_NAME to EXECUTABLE

[20:25] <retupmoca> in 4 files

[20:27] *** colomon left
[20:27] *** colomon joined
[20:27] *** zakharyas1 is now known as zakharyas

[20:28] <FROGGS> retupmoca: ahh, sorry

[20:28] <FROGGS> I only saw the first file changed...

[20:28] <FROGGS> now I see the rest

[20:29] <retupmoca> p: say $*EXECUTABLE

[20:29] <camelia> rakudo-parrot aeda9d: OUTPUT«IO::Path</home/p6eval/rakudo-inst/bin/perl6-p>␤»

[20:29] <retupmoca> FROGGS: no problem, just making sure I got it right :)

[20:30] <jnthn> wtf, the DBIish issue seems to be something involving precomp and the while something -> @foo { } construct

[20:32] *** SamuraiJack__ left
[20:33] <jnthn> phew, golfed it to 15 line module.

[20:37] <jnthn> And now https://gist.github.com/jnthn/52ca22e3b375e160b780

[20:40] <jnthn> I'll bet it's gonna be QAST -> MAST mutating the tree

[20:42] <jnthn> ah, found it

[20:42] <jnthn> Not a darn serialization bug, for once...

[20:50] *** PerlJam left
[20:51] *** PerlJam joined
[20:52] <FROGGS> that feels like the bug that shows up for other traits as well (I remember `sub foo is hidden_from_bt`)

[20:52] *** zakharyas1 joined
[20:52] *** zakharyas left
[20:52] <jnthn> FROGGS: Not sure it's related.

[20:53] *** rurban left
[20:53] *** ajr_ left
[20:53] <jnthn> FROGGS: It's specifically about the use of while ... -> $x { }, if ... -> $x { }, etc. in a role or code that runs at BEGIN time.

[20:53] <FROGGS> ahh

[20:54] <FROGGS> yeahm is_hidden_from_backtrace has no pointy

[20:58] *** timo joined
[20:59] *** timo is now known as Guest99867

[20:59] *** Guest99867 is now known as timo2timo

[21:03] *** timo2timo left
[21:11] <dalek> nqp: c12a9a1 | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[21:11] <dalek> nqp: Don't ruin input QAST in pointy if/while.

[21:11] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c12a9a1977

[21:11] *** zakharyas1 left
[21:14] *** zakharyas joined
[21:16] *** plobsing joined
[21:17] <timotimo> http://t.h8.lv/p6bench/2014-04-11-rakudo_opt.html - now with vintage 2014.03 rakudo-jvm

[21:19] <timotimo> while_array_set and while_hash_set really make the jvm much happier

[21:22] <vendethiel> timotimo: the jvm ?

[21:23] <timotimo> yeah

[21:23] <timotimo> what i meant was:

[21:23] <timotimo> these test profitted a lot by the changes since 2014.03

[21:23] *** spider-mario left
[21:25] *** kurahaupo left
[21:26] *** Rotwang left
[21:29] <timotimo> these benchmarks*

[21:29] <retupmoca> jnthn++

[21:31] <timotimo> not terribly much else changed its performance characteristics, but jnthn is going to port some of the recent improvements to moarvm to the jvm and knowing the jvm it'll probably be pretty amazing

[21:32] <retupmoca> jnthn: there is another precomp bug out there if you feel like working on it (it doesn't affect star)

[21:32] <timotimo> how can it not affect star? :)

[21:33] <retupmoca> doesn't affect the base star modules :P

[21:33] <jnthn> retupmoca: No, I don't feel like it.

[21:33] <jnthn> retupmoca: Maybe somebody else can.

[21:34] <jnthn> I seem to do almost all of them...

[21:34] <jnthn> If not, I'll get to it eventually.

[21:34] <jnthn> timotimo: while_push got better too :)

[21:34] <timotimo> and for_push

[21:35] <jnthn> ah, yes

[21:35] <jnthn> push is still awfully slow though

[21:36] <jnthn> oh, I only improved the sub though. 

[21:36] <jnthn> Method form still needs a look

[21:36] <retupmoca> jnthn: is the precomp code something I could understand well enough to find it?

[21:37] <retupmoca> jnthn: and what's a good starting point to understanding precomp?

[21:37] <jnthn> retupmoca: Well, generally golfing the thing down to a few lines of code/minimal number of files gives a good pointer.

[21:38] <retupmoca> jnthn: I've gotten that far

[21:38] <jnthn> retupmoca: From there, it depends on the nature of the bug. If it involves nested modules and interesting use paths, it's often a repossession related issue.

[21:39] <jnthn> retupmoca: I hunt those by putting breakpoints or debug stuff into MVM_sc_wb_hit_obj or MVM_sc_wb_hit_st

[21:39] <Ulti> so Promises are different processes rather than threads?

[21:39] <timotimo> what!?

[21:40] <jnthn> Ulti: A Promise is an object representing some asynchronous piece of work.

[21:40] <jnthn> Ulti: That *may* involve running code on a thread.

[21:40] <Ulti> yeah I guess I mean the implementation in MoarVM atm

[21:40] <timotimo> well, on linux every thread is its own process, no?

[21:40] <jnthn> Moar doesn't have a clue about promises (nor does the JVM). They're higher level than that.

[21:40] <timotimo> wait, am i confusing things again?

[21:41] <Ulti> I dunno, with pthreads if you do top its a single process that might say >100% CPU

[21:41] <jnthn> timotimo: No, processes can have many threads.

[21:41] <timotimo> oh, fair enough.

[21:41] <jnthn> timotimo: But they get IDs too, and maybe the visualization of them is confusing.

[21:41] <Ulti> yeah it might just be I dont get how htop is displaying this

[21:41] <jnthn> retupmoca: serialization.c is the place that drives the overall process.

[21:42] <timotimo> oh, htop

[21:42] <timotimo> you can tell htop to show threads

[21:42] * retupmoca goes bug-hunting, jnthn++

[21:42] <jnthn> http://askubuntu.com/questions/145707/why-doesnt-htop-display-the-same-processes-as-top

[21:43] <jnthn> Ulti: Processes and threads are certainly different. Threads share a memory space within a process. Those are what Moar and the JVM use 

[21:43] <jnthn> retupmoca++ 

[21:44] <timotimo> somehow i seem to recall that a thread on linux is just a process that starts out with the heap shared or something?

[21:45] <Ulti> yeah that's why I was really confused to see it as a process

[21:46] <jnthn> timotimo: Mebbe, but that feels like an impl detail.

[21:46] <geekosaur> timotimo, used to be, not since 2.6 kernel series or thenabouts

[21:46] <timotimo> right, it would be

[21:48] *** zakharyas left
[21:55] *** masak left
[21:56] *** masak joined
[21:56] *** masak is now known as Guest97781

[21:57] *** kurahaupo joined
[22:02] <Ulti> rm: (await do for ^10 -> $i { start { [$i, $i.is-prime] } }).grep(*[1]).map(*[0])

[22:02] <camelia> rakudo-moar aeda9d: OUTPUT«(signal )»

[22:02] <Ulti> rm: say (await do for ^10 -> $i { start { [$i, $i.is-prime] } }).grep(*[1]).map(*[0])

[22:02] <camelia> rakudo-moar aeda9d: OUTPUT«(signal )2 3 5 7␤»

[22:02] <Ulti> yay

[22:03] <jnthn> Ulti: That signal thing is probably fixed in MoarVM HEAD also.

[22:03] <Ulti> yeah I noticed -e with the moar backend is a bit funky on the version I'm using

[22:03] <jnthn> Actually guess I should bump revs...

[22:03] *** lustlife left
[22:04] <Ulti> like that code will core dump

[22:04] *** anaeem1__ joined
[22:04] <Ulti> but is fine in the REPL

[22:04] <Ulti> also await and start are super nice

[22:05] <Ulti> that covers about 90% of my parallel use cases that I rely on shell tools like GNU parallel for

[22:05] <jnthn> Ulti: Yes, the bug fixed today was an exit-time one, which explains why you don't get it in the REPL

[22:05] <Ulti> cool

[22:06] *** zakharyas joined
[22:06] <dalek> nqp: 1cf05eb | jnthn++ | tools/build/MOAR_REVISION:

[22:06] <dalek> nqp: Bump to get Moar exit and callback fixes.

[22:06] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1cf05ebc94

[22:06] *** anaeem1 left
[22:06] <Ulti> jnthn++

[22:07] <dalek> rakudo/nom: 11a6934 | jnthn++ | tools/build/NQP_REVISION:

[22:07] <dalek> rakudo/nom: Get NQP with Moar comp fixes, Moar fixes.

[22:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/11a6934e48

[22:07] <jnthn> There we go.

[22:07] <Ulti> also the machine I'm playing with has 20 physical threads and 40 "physical" threads :)

[22:07] <jnthn> HT?

[22:08] <Ulti> yeah

[22:08] <timotimo> and how many psychological threads?

[22:08] <Ulti> one

[22:08] <jnthn> Whoa...how fast can you spectest r-m on that beast? :)

[22:08] <Ulti> unless I am rubbing my tummy at the same time

[22:08] <Ulti> jnthn I haven't tried

[22:08] <jnthn> TEST_JOBS=20 it :D

[22:08] <timotimo> obviously immediately

[22:08] <Ulti> at the moment a PhD student is using 10 cores and 250GB of RAM :S

[22:08] <jnthn> oh :)

[22:09] <jnthn> wow :)

[22:09] <Ulti> but yeah I was thinking since we arent using this machine yet I can do some grind for you guys

[22:09] *** woolfy joined
[22:09] * jnthn has no hardware like that to hand :)

[22:10] <Ulti> well its behind loads of university institutional guff otherwise I would give you an account ;P

[22:10] <jnthn> :)

[22:10] <Ulti> also the machine is called doge >:3

[22:11] <Ulti> such compute

[22:11] <jnthn> so cores. such RAM. wow.

[22:13] *** klapperl left
[22:13] <Ulti> but yeah maybe I can just make some way for you to poke some place and it git pulls and runs tests for you....

[22:14] <jnthn> Well, I can run them fairly fast here too; I was just curious if parallel spectest can saturate that many cores :)

[22:15] *** klapperl joined
[22:15] <Ulti> well Monday all the cores are free and I can find out

[22:15] *** btyler left
[22:20] <Ulti> I wish I was rich so I could get a 4CPU monster with the latest 15core Xeons 120 threads of execution all with shared RAM would be amazing

[22:20] <jnthn> I imagine that costs even more than the top-rated Apple Trashcan(TM)...

[22:21] *** rurban joined
[22:24] <Ulti> DELL says £35k without much RAM :(

[22:24] <Ulti> you can buy several doge for that

[22:24] <jnthn> whoa

[22:25] <Ulti> I imagine 4xCPU mother boards are fairly crazy to engineer

[22:25] <dalek> rakudo-star-daily: 099a27f | coke++ | log/ (5 files):

[22:25] <dalek> rakudo-star-daily: today (automated commit)

[22:25] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/099a27f9d8

[22:26] <[Coke]> jvm spectest hung again

[22:27] *** rurban left
[22:32] *** benabik joined
[22:32] *** benabik left
[22:35] *** zakharyas left
[22:35] *** colomon left
[22:38] *** rurban joined
[22:38] <timotimo> d'oh

[22:39] *** hoverboard joined
[22:42] *** cibs left
[22:43] *** cibs joined
[22:55] <jnthn> 'night, #perl6

[22:55] <[Coke]> ~~

[22:56] *** denis_boyun_ left
[23:07] <Ulti> someone might want to comment http://www.reddit.com/r/perl6/comments/22vtkx/nativecall_should_be_more_of_a_priority/

[23:12] <[Coke]> I wonder if pimozv hangs out on IRC.

[23:12] *** rurban left
[23:14] <timotimo> um. nativecall does work, doesn't it?

[23:14] <timotimo> on moar?

[23:16] <retupmoca> I've used it to create a couple of modules, so I'm pretty sure it does

[23:16] <TimToady> didn't jnthn++ just fix a callback bug?

[23:16] <timotimo> he did

[23:16] <timotimo> does moarvm pass all tests from NativeCalls test suite?

[23:16] <retupmoca> yeah

[23:17] <retupmoca> has for a while now, I think

[23:17] <retupmoca> (where while is O(weeks)?)

[23:17] <timotimo> do you have a reddit account? otherwise i'll post it after this match

[23:17] * TimToady doesn't

[23:29] <timotimo> or after the map after that

[23:30] <timotimo> i just want to build the freshest rakudo and run the nativecall test suite just to be extra sure

[23:42] <tadzik> hm, did anyone test zavolaj on moar on 32bits?

[23:42] <tadzik> http://www.reddit.com/r/perl6/comments/22vtkx/nativecall_should_be_more_of_a_priority/cgqwdng

[23:45] <[Coke]> "please report bugs via rakudobug, not reddit"

[23:45] <[Coke]> sorry, not -just- reddit.

[23:46] *** dmol left
[23:50] <timotimo> could it be that we're not supporting 32bit?

[23:50] *** bluescreen10 joined
