[00:00] *** BenGoldberg joined
[00:04] *** ssutch_ joined
[00:08] *** ssutch_ left
[00:19] *** rindolf joined
[00:25] *** akaseki joined
[00:28] *** ariden__ left
[00:28] *** aoseki joined
[00:30] *** nbrown joined
[00:31] *** akaseki left
[00:31] *** MilkmanDan left
[00:32] *** MilkmanDan joined
[00:33] *** dmol left
[00:34] *** nbrown left
[00:48] *** dwarring left
[00:55] *** rurban1 left
[00:58] *** dayangkun joined
[01:04] *** ssutch_ joined
[01:09] *** ssutch_ left
[01:24] *** FROGGS_ joined
[01:28] *** Sqirrel left
[01:28] *** FROGGS left
[01:32] *** jnap left
[01:34] *** klapperl joined
[01:36] *** baest left
[01:37] *** klapperl_ left
[01:38] *** rurban1 joined
[01:41] *** baest joined
[01:42] *** rurban1 left
[01:44] *** BenGoldberg left
[01:52] *** ssutch_ joined
[01:54] *** rurban1 joined
[02:01] *** chenryn_ joined
[02:03] *** aoseki left
[02:05] *** hugme left
[02:05] *** synopsebot left
[02:06] *** [Coke] left
[02:06] *** dalek left
[02:07] *** [Coke] joined
[02:07] *** Juerd left
[02:08] *** hugme joined
[02:08] *** ChanServ sets mode: +v hugme

[02:08] *** PerlJam left
[02:09] *** Juerd joined
[02:10] *** dalek joined
[02:10] *** ChanServ sets mode: +v dalek

[02:10] *** PerlJam joined
[02:10] *** sergot left
[02:10] *** sergot joined
[02:10] *** synopsebot joined
[02:13] *** chenryn_ left
[02:14] *** sergot left
[02:16] *** noganex_ joined
[02:16] *** chenryn_ joined
[02:17] *** PerlJam left
[02:17] *** sjn joined
[02:19] *** noganex left
[02:21] *** sergot joined
[02:23] *** PerlJam joined
[02:31] *** xinming_ left
[02:33] *** synopsebot left
[02:35] *** Juerd left
[02:35] *** Juerd joined
[02:35] *** dalek left
[02:36] *** PerlJam left
[02:36] *** hugme left
[02:37] *** PerlJam joined
[02:37] *** hugme joined
[02:37] *** ChanServ sets mode: +v hugme

[02:37] *** synopsebot joined
[02:39] *** dalek joined
[02:39] *** ChanServ sets mode: +v dalek

[02:39] *** chenryn_ left
[02:41] *** kaare_ joined
[02:42] *** hugme left
[02:43] *** hugme joined
[02:43] *** ChanServ sets mode: +v hugme

[02:46] *** 23LAA2D7E left
[02:46] *** dalek left
[02:47] *** Juerd left
[02:47] *** dalek joined
[02:47] *** ChanServ sets mode: +v dalek

[02:47] *** Juerd joined
[02:48] *** xinming joined
[02:50] *** nbrown joined
[02:51] *** Sqirrel joined
[02:54] *** nbrown left
[02:56] *** hugme left
[02:58] *** hugme joined
[02:58] *** ChanServ sets mode: +v hugme

[03:02] *** hugme left
[03:03] *** Juerd left
[03:04] *** Juerd joined
[03:04] *** hugme joined
[03:04] *** ChanServ sets mode: +v hugme

[03:07] *** d4l3k_ joined
[03:08] *** dayangkun left
[03:08] *** dalek left
[03:09] *** sergot left
[03:09] *** sergot joined
[03:10] *** d4l3k_ is now known as dalek

[03:11] *** hugme left
[03:12] *** BenGoldberg joined
[03:12] *** hugme joined
[03:12] *** ChanServ sets mode: +v hugme

[03:13] *** sergot left
[03:14] *** sergot joined
[03:16] *** synopsebot left
[03:16] *** hugme left
[03:17] *** [Coke] left
[03:17] *** [Coke]_ joined
[03:17] *** synopsebot joined
[03:21] *** dayangkun joined
[03:22] *** synopsebot left
[03:23] *** molaf left
[03:23] *** hugme joined
[03:23] *** ChanServ sets mode: +v hugme

[03:23] *** synopsebot joined
[03:27] *** hugme left
[03:28] *** chenryn_ joined
[03:29] *** Juerd left
[03:29] *** dalek left
[03:30] *** Juerd joined
[03:30] *** hugme joined
[03:30] *** ChanServ sets mode: +v hugme

[03:30] *** dalek joined
[03:30] *** ChanServ sets mode: +v dalek

[03:31] *** PerlJam left
[03:31] *** PerlJam joined
[03:32] *** ssutch_ left
[03:33] *** ssutch_ joined
[03:34] *** ssutch_ left
[03:34] *** ssutch_ joined
[03:47] *** nhayashi left
[03:49] *** hugme left
[03:50] *** hugme joined
[03:50] *** ChanServ sets mode: +v hugme

[03:51] *** synopsebot left
[03:54] *** synopsebot joined
[03:58] *** nhayashi joined
[04:00] *** akaseki joined
[04:01] *** dalek left
[04:01] *** dalek joined
[04:01] *** ChanServ sets mode: +v dalek

[04:06] *** PerlJam left
[04:07] *** d4l3k_ joined
[04:07] *** dalek left
[04:07] *** PerlJam joined
[04:08] *** Juerd left
[04:08] *** Juerd joined
[04:08] *** d4l3k_ is now known as dalek

[04:15] *** dayangkun left
[04:16] *** kivutar joined
[04:20] *** chenryn_ left
[04:26] *** dalek left
[04:27] *** dalek joined
[04:27] *** ChanServ sets mode: +v dalek

[04:30] *** chenryn_ joined
[04:32] *** dayangkun joined
[04:35] *** gfldex joined
[04:41] *** muthuraj joined
[04:42] *** [Sno] left
[04:44] *** kweetal joined
[04:44] *** hugme left
[04:45] *** dalek left
[04:45] *** hugme joined
[04:45] *** ChanServ sets mode: +v hugme

[04:46] <muthuraj> ??

[04:46] *** dalek joined
[04:46] *** ChanServ sets mode: +v dalek

[04:48] *** muthuraj left
[04:51] *** dalek left
[04:51] *** dalek joined
[04:51] *** ChanServ sets mode: +v dalek

[04:53] *** sergot left
[04:58] *** sergot joined
[05:08] *** dalek left
[05:08] *** dalek joined
[05:08] *** ChanServ sets mode: +v dalek

[05:17] *** kurahaupo left
[05:20] *** kaare_ left
[05:26] *** Ven joined
[05:28] *** kurahaupo joined
[05:29] *** Ven left
[05:42] *** SevenWolf left
[05:46] *** woolfy left
[05:46] *** lizmat left
[05:46] *** lizmat_ joined
[05:47] *** rurban1 left
[05:51] *** nbrown joined
[05:53] *** lizmat_ left
[05:54] *** lizmat joined
[05:57] *** nbrown left
[05:58] *** woolfy joined
[06:01] *** lizmat left
[06:02] *** lizmat joined
[06:12] *** anaeem1_ joined
[06:25] *** jack_rabbit left
[06:25] *** [Sno] joined
[06:27] *** jack_rabbit joined
[06:29] *** kivutar left
[06:31] <dalek> roast: a2c4cc6 | (David Warring [email@hidden.address] | integration/advent2011-day24.t:

[06:31] <dalek> roast: tweak a couple of tests

[06:31] <dalek> roast: review: https://github.com/perl6/roast/commit/a2c4cc6a5b

[06:31] *** ssutch_ left
[06:32] *** ssutch_ joined
[06:36] *** ssutch_ left
[06:48] <sergot> o/

[06:49] *** kaleem joined
[07:01] *** jack_rabbit left
[07:03] *** ssutch_ joined
[07:07] *** ssutch_ left
[07:09] *** zakharyas joined
[07:10] <moritz> FROGGS_: pull request merged, thank you.

[07:11] <FROGGS_> moritz: the Bailador PR?

[07:11] <FROGGS_> ahh, I see the mail...

[07:11] <FROGGS_> moritz: thanks :o)

[07:12] *** BenGoldberg left
[07:13] *** jack_rabbit joined
[07:14] *** darutoko joined
[07:14] *** hoverboard left
[07:15] <moritz> FROGGS_: you're welcome

[07:15] *** chenryn_ left
[07:17] *** FROGGS_ is now known as FROGGS

[07:18] <FROGGS> jnthn: ping

[07:19] <FROGGS> lizmat: ping

[07:20] *** rurban1 joined
[07:22] *** chenryn_ joined
[07:25] *** rurban1 left
[07:26] <woolfy> lizmat is asleep (me and her are in Portland now, Oregon)

[07:27] *** dmol joined
[07:28] <FROGGS> woolfy: thanks... I can talk to her when she is awake :o)

[07:28] <FROGGS> it is not urgent, I just want to talk about a online hackathon

[07:30] <woolfy> OK.  I will tell her.

[07:32] <dalek> roast: a045e08 | (Tobias Leich)++ | S02-magicals/PERL.t:

[07:32] <dalek> roast: fudge $*PERL.compiler.perl tests - RT #122324

[07:32] <dalek> roast: 

[07:32] <dalek> roast: The tests abort in spectests for some not yet known reason.

[07:32] <dalek> roast: review: https://github.com/perl6/roast/commit/a045e08818

[07:32] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122324

[07:32] <FROGGS> thank you

[07:46] *** virtualsue joined
[07:48] <dalek> roast: 19d3472 | (Tobias Leich)++ | S04-exceptions/control_across_runloop.t:

[07:48] <dalek> roast: RT #122325 fudged for parrot, probably a binder bug

[07:48] <dalek> roast: review: https://github.com/perl6/roast/commit/19d34722bf

[07:48] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122325

[07:49] <sergot> FROGGS: would you update this: http://en.wikipedia.org/wiki/Rakudo_Perl_6 ?

[07:49] <sergot> the release

[07:50] *** rindolf left
[07:51] <FROGGS> sergot: yes, that is step 16 of the release guide, I'm at step 11

[07:54] *** rindolf joined
[07:56] <sergot> FROGGS: okok :)

[07:58] <masak> good antenoon, #perl6

[07:58] <FROGGS> hi masak 

[07:59] <masak> ah; release still ongoing, I see.

[07:59] <masak> keep up the good work!

[08:00] <FROGGS> I'm building it for the last time and then do the last spectest (hopefully)

[08:02] *** chenryn_ left
[08:03] *** ssutch_ joined
[08:04] <sergot> masaku! o/

[08:07] *** kweetal left
[08:07] *** ssutch_ left
[08:09] *** slavik left
[08:10] *** lelf joined
[08:20] *** fhelmberger joined
[08:21] *** pecastro joined
[08:21] *** rurban1 joined
[08:23] *** slavik joined
[08:24] *** rurban2 joined
[08:25] *** rurban1 left
[08:28] *** rurban2 left
[08:33] *** chenryn_ joined
[08:37] *** chenryn_ left
[08:38] *** SamuraiJack joined
[08:43] *** SamuraiJack left
[08:43] *** chenryn_ joined
[08:46] *** jack_rabbit left
[08:55] *** nbrown joined
[08:59] <masak> FROGGS++ # #78 Sofia

[08:59] *** nbrown left
[09:01] <sergot> yeah

[09:01] <sergot> FROGGS++

[09:01] *** kaare_ joined
[09:04] *** ssutch_ joined
[09:06] *** SamuraiJack joined
[09:08] *** ssutch_ left
[09:15] <FROGGS> masak: when is your next P6 day?

[09:15] <masak> an interesting example of a (non-Lisp) language using macros to generate code from code: http://nimrod-by-example.github.io/oop_macro/

[09:15] <masak> FROGGS: 'tis today.

[09:15] <FROGGS> ahh

[09:15] <FROGGS> :o)

[09:15] <FROGGS> I'd like to do a Bugfixathon

[09:16] <FROGGS> and I'd prefer to not be the only participant

[09:16] <masak> allow me to offer my assistance.

[09:16] <FROGGS> \o/

[09:16] <FROGGS> nice

[09:17] <FROGGS> so since release and $dayjob stuff is done, I'll pick some RT tickets that I'd like to fix

[09:17] <masak> sounds good.

[09:21] <masak> I remember looking at https://rt.perl.org/Ticket/Display.html?id=118223 yesterday and wishing it fix'd.

[09:21] <masak> m: my %l = foo => 1, bar => 2; my %r = bar => 3, baz => 4; say %l >>+<< %r

[09:21] <camelia> rakudo-moar 0aaba7: OUTPUT«use of uninitialized value of type Any in numeric context␤use of uninitialized value of type Any in numeric context␤("bar" => 5, "baz" => 4, "foo" => 1).hash␤»

[09:22] <FROGGS> n: my %l = foo => 1, bar => 2; my %r = bar => 3, baz => 4; say %l >>+<< %r

[09:22] <camelia> niecza v24-109-g48a8de3: OUTPUT«Use of uninitialized value in numeric context␤  at /home/p6eval/niecza/lib/CORE.setting line 1389 (warn @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 301 (Any.Numeric @ 8) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niec…»

[09:22] <masak> I think I looked into it around the time I filed it, and saw that the code *looked* like it should work (and not generate those warnings)

[09:22] <FROGGS> you know what I think what sucks?

[09:23] <FROGGS> that these warning do not show a line number

[09:23] <masak> to be clear, the spec has explicit wording about >>+<< on hashes, saying it should use the union of the keys, and suppress warnings.

[09:23] <masak> m: my $l; my $r = 5; say $l + $r

[09:23] <camelia> rakudo-moar 0aaba7: OUTPUT«use of uninitialized value of type Any in numeric context␤5␤»

[09:24] <masak> that warning is fine, it should be there. but not the hash ones.

[09:24] <FROGGS> yeah

[09:24] <masak> m: my $x; $x++; say $x

[09:24] <camelia> rakudo-moar 0aaba7: OUTPUT«1␤»

[09:24] <FROGGS> still, a line number would be nice

[09:24] <masak> a bit like there's no warning for that one.

[09:24] <masak> FROGGS: oh, I agree about line numbers.

[09:25] *** rurban1 joined
[09:25] <moritz> the lack of a line number might just need a little tweak in the backtrace pretty-printer

[09:25] *** kaare_ left
[09:25] *** kaare_ joined
[09:27] <FROGGS> m: warn 42

[09:27] <camelia> rakudo-moar 0aaba7: OUTPUT«42␤»

[09:27] <FROGGS> m: die 42

[09:27] <camelia> rakudo-moar 0aaba7: OUTPUT«42␤  in block  at /tmp/3D9jMqeN5c:1␤␤»

[09:29] *** rurban1 left
[09:34] <masak> m: macro assert($fact) { quasi { die "FAILED: ", $fact.Str unless {{{$fact}}} } }; assert 2 + 2 == 4

[09:34] <camelia> rakudo-moar 0aaba7: ( no output )

[09:34] <masak> m: macro assert($fact) { quasi { die "FAILED: ", $fact.Str unless {{{$fact}}} } }; assert 2 + 2 == 5

[09:34] <camelia> rakudo-moar 0aaba7: OUTPUT«FAILED: AST<140244620039592>␤  in any  at /tmp/RQrQTA21Jc:1␤  in block  at /tmp/RQrQTA21Jc:1␤␤»

[09:35] <masak> suggested/requested: a way for that AST to yield the original *code snippet*, so I can use it as debugging output as above.

[09:35] <masak> I don't know if $ast.Str is the way to go; it just seems like the most obvious (and not obviously incorrect) to me right now.

[09:37] <FROGGS> masak: you could pass the $/ to AST.BUILD, a little bit like it is done for labels

[09:37] <masak> anyhoo, see https://gist.github.com/masak/0c4496b90e2aebf98062 for an update to yesterday's Fun Math Experiment, now with a Real-World macro (which would really benefit from such AST stringification).

[09:38] <masak> FROGGS: yes, something like that is what I need.

[09:38] * masak looks into it

[09:44] *** mr-foobar joined
[09:54] <masak> given a QAST::Node, how can I get the underlying source string it was parsed from?

[09:55] <masak> is that at all possible?

[09:55] *** user3 joined
[09:55] <masak> at the point of the macro *call*, we still see the callsite expression going into the macro, so we should have a fair bit of freedom.

[09:55] *** user3 left
[09:56] <masak> but we see it at a point where we already have the things as a QAST tree. and in this case I'm interested in the underlying text.

[09:56] *** user3 joined
[09:57] <moritz> masak: should be ~$qast.node

[09:57] <FROGGS> masak: you are in Perl6::Actions right now?

[09:57] <masak> aye.

[09:57] * masak treis ~$qast.node

[09:57] <moritz> masak: though not all qasts have a .node

[09:57] <masak> :/

[09:58] *** anaeem1_ left
[09:58] <masak> what determines whether they do?

[09:58] <moritz> basically if the generator passed a :node($/) or not

[09:58] <FROGGS> yeah

[09:58] <moritz> we try to do that most of the time, because otherwise we get error messages without line numbers

[09:58] <moritz> but

[09:58] *** anaeem1_ joined
[09:59] <moritz> we have some helper functions that generate QAST trees for certain tasks

[09:59] <moritz> and those don't always add a :node

[09:59] <masak> *nod*

[09:59] <masak> ooh, I gots me a result.

[10:00] <masak> it's the wrong one, but it's a piece of stringified code :)

[10:00] <moritz> :-)

[10:00] <masak> so, what I *wanted* was `2 + 2 == 5`

[10:00] <masak> what I *got* was `==`

[10:00] <moritz> oh

[10:00] <masak> it's easy to see what happened here.

[10:00] <FROGGS> masak: can't you just use $<args>.Str in line 4258 or so?

[10:00] * masak looks

[10:00] <moritz> masak: we have code to expand that

[10:00] <masak> \o/

[10:00] <moritz> masak: the constant folder uses it

[10:01] <moritz> masak: search for 'sub widen' in src/Perl6/Optimizer.nqp

[10:01] <FROGGS> and perhaps pass this as a named to add_macro_arguments and then bindattr it to the to be created AST object

[10:02] *** kurahaupo left
[10:03] <moritz> masak: basically the root node just matches ==, but the children match the surrounding text

[10:03] <moritz> that's because the OPP matches the infix separately, not together with its children

[10:03] <masak> *nod*

[10:03] <masak> ok, trying everything.

[10:05] *** ssutch_ joined
[10:08] <masak> \o/

[10:08] <masak> apart from some trimming that needs to be done, it *works*!

[10:08] <FROGGS> nice!

[10:09] <masak> I'm pushing this; refinements (and tests) can come later.

[10:10] <dalek> rakudo/nom: 9b8e9c5 | masak++ | src/ (2 files):

[10:10] <dalek> rakudo/nom: allow ASTs to be stringified

[10:10] <dalek> rakudo/nom: 

[10:10] <dalek> rakudo/nom: Still not sure .Str is the best way to expose this functionality, but it's the

[10:10] <dalek> rakudo/nom: current only suggestion, and there's nothing obviously wrong with it.

[10:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9b8e9c5f4e

[10:10] *** ssutch_ left
[10:10] * masak runs spectests just to be sure

[10:18] <masak> spectests pass.

[10:18] <masak> well, I have two test failures, but they seem unrelated:

[10:18] <masak> t/spec/S17-lowlevel/lock.rakudo.moar (failed test: 7)

[10:18] <masak> t/spec/S32-io/IO-Socket-Async.rakudo.moar (failed test: 5)

[10:19] <FROGGS> yeah, I think I've seen them a few days ago already

[10:20] * masak experiments with different values of TEST_JOBS to figure out how quickly he can get the spectests to run

[10:20] <FROGGS> cpu cores -1 might be a good choice

[10:21] *** kurahaupo joined
[10:22] <colomon> somehow lost ten passig modules overnight?  :(  http://host07.perl6.com:8080/report

[10:23] <FROGGS> colomon:  Dependency XML::Writer is not present in the module ecosystem 

[10:23] <FROGGS> that is why SVG failed

[10:23] <colomon> yeah

[10:23] <colomon> Benchmark::Plot, too

[10:24] <masak> colomon: I think you can remove Yarn from that table -- it's no longer on modules.perl6.org

[10:24] <colomon> masak: it will go away automatically once it's been two weeks since it was removed

[10:24] <masak> ah.

[10:25] *** user3 left
[10:26] *** rurban1 joined
[10:26] <FROGGS> colomon: I don't see why XML::Writer is "missing", because it is not

[10:26] * masak decides to spend parts of his day going through modules of his listed on http://host07.perl6.com:8080/report -- finding out what's wrong with them

[10:26] <colomon> masak: you know about http://host07.perl6.com:8080/report/masak, right?

[10:29] <masak> I do *now* :P

[10:30] *** rurban1 left
[10:30] <colomon> FROGGS: XML::Writer may still be listed in the ecosystem, but panda doesn't think it's there anymore.

[10:31] <colomon> hmmm… did an update and now its back.

[10:31] <colomon> *it's

[10:31] <FROGGS> weird

[10:32] <colomon> launching smoke_test again...

[10:33] *** cooper__ left
[10:39] *** xinming left
[10:41] <jnthn> FROGGS: How's the release looking? So far so god?

[10:42] *** kaare_ left
[10:44] <FROGGS> jnthn: its done

[10:44] <FROGGS> it's*

[10:44] <jnthn> FROGGS: yay :)

[10:44] <FROGGS> :o)

[10:45] <FROGGS> jnthn: join our bugfixathon :o)

[10:45] <jnthn> What're we trying to fix? :)

[10:46] <FROGGS> RT tickets

[10:46] <moritz> rakudo

[10:46] <FROGGS> yeah, that :P

[10:56] <dalek> rakudo/nom: 48fe6dd | (Tobias Leich)++ | / (2 files):

[10:56] <dalek> rakudo/nom: print file/line annotations for warnings also on moar and jvm

[10:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/48fe6dd805

[10:58] *** Ven joined
[10:59] <FROGGS> I'll fix now this LHF: RT #121947

[10:59] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121947

[11:00] *** chenryn_ left
[11:09] *** nbrown joined
[11:11] <FROGGS> m: my &with = -> $x, $y { $x + $y }; say [[&with]] 1..5

[11:11] <camelia> rakudo-moar 0aaba7: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/4BQ4RfnRIM␤Unable to parse expression in bracketed infix; couldn't find final ']' ␤at /tmp/4BQ4RfnRIM:1␤------> [32my &with = -> $x, $y { $x + $y }; say [[&[33m⏏[31mwith]] 1..5[0m␤»

[11:12] *** aoseki joined
[11:12] *** akaseki left
[11:16] *** nbrown left
[11:17] * masak wonders what happened to Druid on the 10th

[11:20] <Ven> druid ?

[11:21] <masak> https://github.com/masak/druid

[11:31] <Ven> That looks complicated

[11:33] <masak> I had a long not-really-concluded love affair with Hex, one of the purest connection games.

[11:34] <moritz> masak: does your wife know? :-)

[11:34] <masak> only vaguely, I think.

[11:34] <masak> in designing connection games, the big challenge is to design the game such that "deadlocks" (both players unable to get past the other) don't occur.

[11:35] <masak> Hex solves it by making the topology hexagonal, eliminating deadlocks completely.

[11:35] <masak> Druid solves it by allowing the players to build upwards, into the third dimension. it's more exhilirating, but I've seen Druid games deadlock sometimes.

[11:42] <dalek> rakudo/nom: c63233a | (Tobias Leich)++ | / (2 files):

[11:42] <dalek> rakudo/nom: fixed infixed function syntax [[&foo]] (RT #121692)

[11:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c63233a2c1

[11:42] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121692

[11:43] <FROGGS> n: use Test; sub foo { $^a ~ $^b }; is ([[&foo]] <a b c d e>), 'abcde', "can we use sub as an op between[]";

[11:43] <camelia> niecza v24-109-g48a8de3: OUTPUT«ok 1 - can we use sub as an op between[]␤»

[11:43] <FROGGS> n: use Test; sub foo { $^a ~ $^b }; is [[&foo]] <a b c d e>, 'abcde', "can we use sub as an op between[]";

[11:43] <camelia> niecza v24-109-g48a8de3: OUTPUT«Unhandled exception: No value for parameter 'expected' in 'is'␤  at /home/p6eval/niecza/lib/Test.pm6 line 0 (is @ 1) ␤  at /tmp/32Z32DqGYZ line 1 (mainline @ 6) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4595 (ANON @ 3) ␤  at /home/p6eval…»

[11:44] <FROGGS> std: use Test; sub foo { $^a ~ $^b }; is [[&foo]] <a b c d e>, 'abcde', "can we use sub as an op between[]";

[11:44] <camelia> std 0f2049c: OUTPUT«Compiled lib/Test.pm6␤ok 00:01 133m␤»

[11:44] <FROGGS> so... how many args should is() get here?

[11:45] <dalek> roast: f3fe7c2 | (Tobias Leich)++ | S13-overloading/metaoperators.t:

[11:45] <dalek> roast: unskip RT #121692 for rakudo

[11:45] <dalek> roast: review: https://github.com/perl6/roast/commit/f3fe7c2a04

[11:45] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121692

[11:46] <Ven> FROGGS: N - foo.arity ?

[11:46] <Ven> (that seems pretty terrible to me :P)

[11:46] <FROGGS> nah

[11:47] <FROGGS> I just don't know if [[&foo]] should only see the list after it or more

[11:47] <FROGGS> maybe viv can tell me

[11:48] *** ponbiki_ left
[11:48] <FROGGS> also viv shows that the reduce gobbles all arguments

[11:49] <FROGGS> so the test seems to be fine now

[11:51] <FROGGS> m: y/lr/rl/

[11:51] <camelia> rakudo-moar 48fe6d: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/BCh9yW0nBi␤Bogus statement␤at /tmp/BCh9yW0nBi:1␤------> [32my/lr/rl/[33m⏏[31m<EOL>[0m␤    expecting any of:␤        argument list␤        postfix␤        infix stopper␤        …»

[11:51] *** ponbiki joined
[11:51] <FROGGS> n: y/lr/rl/

[11:51] <camelia> niecza v24-109-g48a8de3: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unsupported use of y///; in Perl 6 please use tr/// at /tmp/PH6Irx8uR4 line 1:␤------> [32my[33m⏏[31m/lr/rl/[0m␤␤Parse failed␤␤»

[11:51] *** ponbiki is now known as Guest46058

[11:51] *** btyler joined
[11:52] <FROGGS> m: qr()

[11:52] <camelia> rakudo-moar 48fe6d: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/um8VEFr_Kd␤Undeclared routine:␤    qr used at line 1␤␤»

[11:56] *** SamuraiJack left
[11:58] <FROGGS> std: qr()

[11:58] <camelia> std 0f2049c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤ 'qr' used at line 1␤      (in Perl 6 please use rx instead)␤Check failed␤FAILED 00:00 121m␤»

[11:58] <colomon> much better results now: http://host07.perl6.com:8080/report

[12:00] <FROGGS> yeah

[12:09] *** jnap joined
[12:19] <dalek> rakudo/nom: 27f20b0 | (Tobias Leich)++ | src/ (2 files):

[12:19] <dalek> rakudo/nom: RT #121266 show hints about obsolete y///, qr() and others

[12:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/27f20b0c4e

[12:19] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121266

[12:20] *** woolfy left
[12:21] <FROGGS> r: $_ = 'herro eilo'; tr/rl/lr/; .say

[12:21] *** lizmat left
[12:21] <camelia> rakudo-jvm 48fe6d: OUTPUT«(timeout)»

[12:21] <camelia> ..rakudo-{parrot,moar} 48fe6d: OUTPUT«hello eiro␤»

[12:21] <FROGGS> j: $_ = 'herro eilo'; tr/rl/lr/; .say

[12:21] <camelia> rakudo-jvm 48fe6d: OUTPUT«(timeout)»

[12:24] *** sjn left
[12:24] *** sjn joined
[12:30] * [Coke]_ belatedly welcomes woolfy & lizmat back to the US.

[12:32] *** sjn left
[12:32] *** sjn joined
[12:34] *** [Coke]_ is now known as [Coke]

[12:36] *** SamuraiJack joined
[12:43] *** anaeem1_ left
[12:45] <dalek> nqp: 6d4ea16 | (Tobias Leich)++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[12:45] <dalek> nqp: just return an already created SC instead of bailing out

[12:45] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6d4ea16d95

[12:45] <dalek> rakudo/nom: eda14ab | (Tobias Leich)++ | tools/build/NQP_REVISION:

[12:45] <dalek> rakudo/nom: bump nqp/jvm revision for RT #121253 fix

[12:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eda14ab437

[12:45] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121253

[12:45] *** anaeem1 joined
[12:46] *** anaeem1 left
[12:47] *** anaeem1_ joined
[12:47] *** anaeem1_ left
[12:49] *** btyler_ joined
[12:52] *** rurban1 joined
[12:52] *** btyler left
[12:54] *** sjn left
[12:54] <dalek> roast: 6a63037 | (Tobias Leich)++ | / (2 files):

[12:54] <dalek> roast: RT #121253 - use Bar and Baz which both use Foo

[12:54] <dalek> roast: review: https://github.com/perl6/roast/commit/6a63037330

[12:54] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121253

[12:57] *** sjn joined
[13:00] <FROGGS> m: say $*ARGFILES.slurp

[13:00] <camelia> rakudo-moar c63233: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤I mo dhiaidh bhí gleanntáin ghlas’ G…»

[13:02] *** takesako_ left
[13:02] <[Coke]> FROGGS++

[13:02] <[Coke]> (release)

[13:03] <cognominal__> Ven++

[13:03] *** fhelmberger left
[13:03] <cognominal__> ... for pointing me to https://github.com/natefaubion

[13:04] <PerlJam> FROGGS++ 

[13:04] *** takesako joined
[13:06] <FROGGS> m: say '(foo' ~~ / '(' ~ ')' [foo] /

[13:06] <camelia> rakudo-moar c63233: OUTPUT«Unable to parse expression in ; couldn't find final ')' ␤  in any FAILGOAL at gen/moar/stage2/QRegex.nqp:1146␤  in method ACCEPTS at src/gen/m-CORE.setting:13239␤  in block  at /tmp/ywkUpCvDBH:1␤␤»

[13:06] <FROGGS> m: say ('(foo' ~~ / '(' ~ ')' [foo] /).WHAT

[13:06] <camelia> rakudo-moar c63233: OUTPUT«Unable to parse expression in ; couldn't find final ')' ␤  in any FAILGOAL at gen/moar/stage2/QRegex.nqp:1146␤  in method ACCEPTS at src/gen/m-CORE.setting:13239␤  in block  at /tmp/Vhh9PaCLZb:1␤␤»

[13:09] *** kaleem left
[13:14] * masak finds adverbs hard to use in practice

[13:14] <masak> some things are merely a matter of "getting the hang of it".

[13:14] <masak> not so adverbs, I find.

[13:14] <FROGGS> nod

[13:15] <masak> I know the *theory* of it -- the adverb finds the "topmost" op in the preceding expression, and attaches to it.

[13:15] <cognominal__> masak, specific examples?

[13:15] <masak> but the practice of it keeps surprising me.

[13:15] <masak> specific example coming up.

[13:15] <dalek> roast/S26-WHY: 4322b78 | (Rob Hoelz)++ | S26-TODO:

[13:15] <dalek> roast/S26-WHY: Notes notes ntoes

[13:15] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/4322b7800b

[13:15] <masak> m: my %h = foo => 42; if %h<foo> :exists { say "yay!" }

[13:15] <camelia> rakudo-moar c63233: OUTPUT«yay!␤»

[13:16] <masak> m: my %h = foo => 42; if !%h<bar> :exists { say "yay!" }

[13:16] <camelia> rakudo-moar c63233: OUTPUT«Unexpected named parameter 'exists' passed␤  in sub prefix:<!> at src/gen/m-CORE.setting:3930␤  in block  at /tmp/EP1rK0d2ON:1␤␤»

[13:16] <masak> my intuition tells me I should be able to add a '!' in front of an expression without breaking it.

[13:16] <PerlJam> masak++ that's a very cogent example.

[13:16] <masak> but that's not true with adverbs.

[13:16] *** guru joined
[13:16] <masak> this stands out, because as a rule, Perl 6 is *very* nice with these small, refactor-like changes.

[13:17] <masak> PerlJam: that's one that just bit me as I tried to fix Druid.

[13:17] *** guru is now known as Guest85270

[13:17] *** Guest85270 is now known as ajr_

[13:17] <flussence> m: my %h = foo => 42; unless %h<bar> :exists { say "yay!" }

[13:17] <camelia> rakudo-moar c63233: OUTPUT«yay!␤»

[13:18] <masak> flussence: I ended up using :!exists

[13:18] <cognominal__> I once advocated that spacing should override operator precedence. Probably that should apply to adverbs as well. I have no clue how to implementit. I am talking from the user persprective.

[13:18] <flussence> ooh, didn't know that was a thing :)

[13:18] <masak> lizmat++ # :!exists

[13:18] <flussence> (sorta looks sql-ish too...)

[13:19] <masak> you can even fill $exists with a Bool and do :$exists

[13:19] <masak> 's verra cool.

[13:19] <colomon>  woolfy & lizmat are back in the States?

[13:19] <cognominal__> $exits : I read that as sexist :)

[13:19] * masak .oO( Back in the USS... A )

[13:19] <PerlJam> Though I wonder if there are some adverbs for which :!adverb doesn't make sense.

[13:20] <masak> PerlJam: adverbs being an open set, surely yes :)

[13:20] <flussence> m: my %h = foo => 42; say %h<bar> exists => False # just wondering, I don't expect this to work :)

[13:20] <camelia> rakudo-moar c63233: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/HSASC33Mhd␤Two terms in a row␤at /tmp/HSASC33Mhd:1␤------> [32mmy %h = foo => 42; say %h<bar> [33m⏏[31mexists => False # just wondering, I don'[0m␤    expecting any of:␤        postf…»

[13:20] <PerlJam> I mean, we don't want to establish a pattern of using :!adverb for the "common" adverbs, but then for some adverbs it breaks.  Then we've got the same problem.

[13:21] <Ven> the code for :exists and stuff is kinda complicated ...

[13:22] <flussence> m: my %h = foo => 42; say %h<foo> :!delete; say %h; # here's some nonsense

[13:22] <camelia> rakudo-moar c63233: OUTPUT«42␤("foo" => 42).hash␤»

[13:22] <Ven> well, not really nonsense

[13:22] <Ven> flussence: that's for %h<foo>:delete($confirm) or something, I think

[13:22] <PerlJam> masak: actually, your complaint about adverbs is the same problem as "memorizing the precedence table"  (because you must do that to know how adding/removing an op will affect your use of adverbs)

[13:22] <flussence> oh, gotcha.

[13:23] <PerlJam> (I don't know if that helps in finding a way forward, but I thought I'd mention it anyway)

[13:23] <Ven> should adverbs actually *stick* ?

[13:23] <flussence> (though I maintain that using literal :!delete is probably nonsense :)

[13:23] <masak> PerlJam: to me it feels like it's exposing knowledge of ASTs where previously the programmer could live in blissful ignorance of ASTs.

[13:23] <PerlJam> flussence++ :)

[13:24] *** jnap left
[13:24] <Ven> why do adverbs use the topmost one ?

[13:24] *** anaeem1 joined
[13:25] *** woolfy joined
[13:26] <masak> because in `2 + 2 :carefully`, we want the adverb to stick to the infix:<+>

[13:26] *** aoseki left
[13:26] *** lizmat joined
[13:26] *** anaeem1 left
[13:26] *** dakkar joined
[13:26] *** akaseki joined
[13:27] <PerlJam> masak: did you read/write S02:2528 ?

[13:27] <synopsebot> Link: http://perlcabal.org/syn/S02.html#line_2528

[13:28] <Ven> then should SPC adverb and NOSPC adverb act differently ?

[13:28] <masak> PerlJam: yes -- I was involved in the discussions around that.

[13:28] <Ven> or force the spacing.

[13:28] <masak> PerlJam: to give some more background: the code was already `if !%h.exists(...)` when I got to it.

[13:29] <masak> PerlJam: I did the smallest possible change, to `if !%h{...} :exists`, thinking nothing of it.

[13:29] <PerlJam> gotcha.

[13:29] <PerlJam> makes perfect sense.  I would have done the same.

[13:29] *** dayangkun left
[13:30] *** jnap joined
[13:30] <PerlJam> adverbs are a little action-at-a-distancey, just the distances are usually small

[13:31] <masak> that's something like a third of my complaint, yes.

[13:32] <masak> another third is that normally we don't force compiler administrivia on users, but with adverbs we kinda do.

[13:33] <masak> and the last third is that, even though I *like* them, I still find them uncomfortable to use. they require a bit more care and feeding than I would prefer.

[13:33] *** molaf joined
[13:33] <Ven> !foo():exists sticking on ! is definitely not DWIMmy

[13:33] <Ven> but what are the options ?

[13:34] * masak got Druid passing all the tests again

[13:35] <masak> one of these days I'm gonna kill off Test::Ix, too.

[13:35] <masak> what was I thinking :)

[13:35] <PerlJam> Ven: an option would be to change adverbs to attach to the lexically closest op rather than the topmost

[13:36] <Ven> PerlJam: yes, definitely. That means (2 || 3):loose would be way to write it.

[13:36] <PerlJam> Ven: another would be force some kind of syntactic tax on using adverbs (ick!) like always requiring parens or something.

[13:36] <Ven> are we okay with that ? should we allow (:loose 2 || 3 ) ?

[13:36] <Ven> (regexp-modifier-like syntax)

[13:36] *** anaeem1 joined
[13:37] <Ven> (it looks cute, but is probably unparseable)

[13:37] <PerlJam> Ven: NST

[13:37] <Ven> nst ?

[13:37] <PerlJam> No Such Thing (as unparsable :)

[13:39] <PerlJam> Actually for predictable results, adverbs currently do "require" parens.

[13:39] <Ven> yeah

[13:39] *** [Sno] left
[13:39] <masak> not if you know enough about precedence rules.

[13:40] <masak> but the point is that it's expected of you to know, and in places where you don't expect it to matter.

[13:40] <masak> I think "last seen op" aligns much more with my expectations -- but TimToady will probably have an excellent reason for not doing it that way.

[13:41] <PerlJam> right, but if you want to make your code more future-proof, you put the parens so that the precedence doesn't become an issue.

[13:41] * moritz finds the whole idea of operator adverbs really scary

[13:41] <Ven> code relying on knowing by heart the precedence rule is usually bad :)

[13:42] <masak> PerlJam: (a) I don't have that habit at all; (b) notice how it wouldn't have helped in my case, since deprecation had me refactor an existing expression *into* an adverb.

[13:42] <PerlJam> moritz: scary ... like exhilarating?  or more fear-for-my-sanity?  :)

[13:42] <PerlJam> masak: ah, an excellent point.

[13:43] <moritz> PerlJam: fear-for-nearly-everbody's-sanity

[13:43] <PerlJam> masak: but if you'd developed the habit of always using parens with adverbs, then it *would* have helped because you would have also added the parens.

[13:43] *** dayangkun joined
[13:43] <masak> moritz: could it have something to do with the fact that adverbs seem to hang off of the knowledge of ASTs?

[13:43] <masak> moritz: putting them on the level of macros is expected developer savvy.

[13:43] <masak> and yet they look so innocent...

[13:44] <masak> PerlJam: yes.

[13:44] <moritz> masak: it's more that it's   <EXPR1> <OP> <EXPR2> <ADVERB>, and <EXPR2> can be big

[13:44] <masak> PerlJam: I am *soooo* close to drawing the "Stockholm syndrome" card on you. :)

[13:44] <PerlJam> :-)

[13:44] <masak> ...but I don't like that, so I won't.

[13:44] <moritz> masak: and then it's easy to lose track of track of connection between <OP> and <ADVERB>

[13:45] <masak> *nod*

[13:46] <PerlJam> sounds like another tick against "action at a distance"

[13:47] <masak> moritz: also the fact that depending on which precedence level the things in EXPR2 have, they may or may not "steal" what constitutes <OP>

[13:47] *** dayangkun left
[13:48] <PerlJam> yeah, that's your original problem writ larger.  Refactoring an expression could change where the adverb attaches.   It seems like there's a lesson here that we already learned at least once :)

[13:49] <masak> adverbs, besides what they're designed to do, act as an inhibitor of small, quick refactors of an expression.

[13:49] <masak> that just isn't how they roll.

[13:49] *** dayangkun joined
[13:50] <masak> I'd also like to point out that, back to the early years of Perl 6, adverbs were the answer to *everything*.

[13:50] <PerlJam> .oO( and people wonder why it's taken more than a decade to design Perl 6 )

[13:50] <masak> they do :exists and :delete very well, I grant you that. it's a better solution than Perl 5's.

[13:50] <masak> but they're very limited in their application. a bit like junctions.

[13:50] <masak> I can't recall ever having defined an adverb in code.

[13:51] <moritz> let me be more specific: adverbs on infix and prefix operators scare me

[13:51] <moritz> adverbs on circumfix, postcircumfix and postfix ops aren't as bad

[13:52] <PerlJam> heh .. "aren't *as* bad"

[13:52] <masak> :)

[13:52] <moritz> oh, and wait for the day that somebody defines infix:<,>(*@values, :name)

[13:52] * masak shudders

[13:53] <moritz> and then people wonder why   Person.new(..., :name<masak>) fails, but Person.new(..., name => masak) works

[13:53] * moritz does the very evil grin

[13:54] <Ven> wow, that's terrible eval

[13:54] <Ven> erm, I mean, evil :)

[13:55] <moritz> let's rename that to EVIL :-)

[13:55] *** cooper_ joined
[13:55] <colomon> :)

[14:00] *** molaf left
[14:02] *** thou joined
[14:06] *** kaleem joined
[14:07] *** woolfy left
[14:07] *** woolfy1 joined
[14:08] *** rurban1 left
[14:09] *** khisanth_ joined
[14:09] *** raiph joined
[14:11] *** Khisanth left
[14:13] <dalek> rakudo-star-daily: 3750e12 | coke++ | log/ (14 files):

[14:13] <dalek> rakudo-star-daily: today (automated commit)

[14:13] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/3750e12082

[14:14] <[Coke]> test failures on R* for both JVM & parrot. looks like moarvm is clean, no more deprecations.

[14:15] *** hoverboard joined
[14:17] <[Coke]> today's rak.parrot run is clean; moar has 2 failures.

[14:17] <[Coke]> [6~[6~S17-promise/allof.t 10 - got the right order

[14:17] <[Coke]> S32-list/uniq.t aborted 26 test(s)

[14:18] *** kaleem left
[14:29] *** aoseki joined
[14:32] *** akaseki left
[14:38] *** hoverboard is now known as moistcherry

[14:40] *** Ven left
[14:43] *** treehug88 joined
[14:54] *** akaseki joined
[14:55] *** jnap left
[14:56] *** jnap joined
[14:57] *** aoseki left
[15:00] *** telex left
[15:02] *** telex joined
[15:03] * masak cannot reach rt.perl.org

[15:06] <FROGGS> yeah, me too :/

[15:06] <FROGGS> wanted to look at RT #72816  	[BUG] Cannot assign to an undeclared dynamic variable in Rakudo

[15:06] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=72816

[15:06] *** molaf joined
[15:13] *** Sqirrel left
[15:17] *** guru joined
[15:17] *** ajr_ left
[15:18] *** guru is now known as Guest86028

[15:18] *** Guest86028 is now known as ajr_

[15:19] *** treehug88 left
[15:19] *** lelf left
[15:19] *** chenryn joined
[15:20] <PerlJam> masak, FROGGS: http://log.perl.org/2014/07/7182014-scheduled-maintenance-moving-day.html

[15:20] <ajr_> Re: the discussion around 09:55; that sounds rather like SQL injection.

[15:21] <FROGGS> ahh

[15:21] <masak> PerlJam: ah.

[15:21] <FROGGS> thanks PerlJam 

[15:21] <masak> ajr_: is that an IRC log timestamp?

[15:22] <ajr_> Yes.

[15:23] <ajr_> (I suppose a sufficiently naive use of eval in P5 would also qualify.)

[15:24] <masak> I fail to make the connection between stringifying AST nodes and SQL injection.

[15:24] <masak> please explain :)

[15:29] <masak> thundergnat: fixing a bug in Text::CSV in code that you contributed. ping me for details ;)

[15:31] *** SamuraiJack left
[15:44] <masak> m: my @p = <a b c d e>; (@p[2], @p[3]) = @p[3], @p[2]; say @p

[15:44] <camelia> rakudo-moar eda14a: OUTPUT«a b d c e␤»

[15:44] <masak> m: my @p = <a b c d e>; @p[2], @p[3] = @p[3], @p[2]; say @p

[15:44] <camelia> rakudo-moar eda14a: OUTPUT«(signal )WARNINGS:␤Useless use of "," in expression "[2], @p[3] =" in sink context (line 1)␤»

[15:44] <masak> it's a mistake to leave out the parentheses. it doesn't do what I meant.

[15:44] <masak> but why does it loop forever?

[15:45] <masak> m: my @p = <a b c d e>; @p[3] = @p[3]; say @p

[15:45] <camelia> rakudo-moar eda14a: OUTPUT«a b c d e␤»

[15:45] <masak> that doesn't.

[15:45] <masak> and, as far as I can see, the program with the omitted parens should mean the same.

[15:46] *** raiph left
[15:46] <FROGGS> : my @p = <a b c d e>; @p[3] = @p[3], @p[2]; say @p

[15:46] <FROGGS> m: my @p = <a b c d e>; @p[3] = @p[3], @p[2]; say @p

[15:47] <camelia> rakudo-moar eda14a: OUTPUT«(signal )»

[15:47] <FROGGS> that is what it means

[15:48] <masak> oh! the useless bit is the initial `@p[2]`. I see.

[15:48] <masak> FROGGS++

[15:48] <masak> oh right, because it's still a list assignment, so it's looser than comma.

[15:48] <masak> yeah, that's what I missed.

[15:48] <masak> ok, I've cleaned up a bit among my modules.

[15:49] <masak> Data::Pretty, Text::CSV, Druid, and Perl6::Literate should all pass now.

[15:49] <masak> guess we'll see tomorrow.

[15:49] <FROGGS> and it loops somewhere around

[15:49] <FROGGS> 0x00007ffff79ba99d in scan_registers (frame=0x92d8f98, worklist=0x594a0a0, tc=0x6035e0) at src/gc/roots.c:353

[15:49] <FROGGS> 353	        if (frame->spesh_cand && frame->spesh_cand->local_types) {

[15:50] <masak> Yapsi (and its dep Tardis) have deeper, more insidious failures somehow relating to parsing. I'll deal with them some other time, when I'm smarter.

[15:50] <masak> haven't looked at GGE, but those errors are probably insidious too.

[15:50] <masak> (and almost certainly related to parsing!)

[15:50] <PerlJam> masak: my personal history tells me that I was smarter in the past, not the future.   You might want to confirm that for yourself as well  :)

[15:51] <masak> oh, there's definitely a long-term decline.

[15:52] <masak> I was referring to smaller-scale fluctuations.

[15:52] <FROGGS> m: my @p = <a b c d e>; @p[3] = ~@p[3], @p[2]; say @p

[15:52] <camelia> rakudo-moar eda14a: OUTPUT«a b c d c e␤»

[15:52] <FROGGS> hah!

[15:52] *** xinming joined
[15:53] <masak> FROGGS++ :)

[15:53] <ajr_> @masak: the ability to slip changes or unpredictable behaviour in the meaning of code with data.

[15:54] <masak> yeah, that was a first attempt.

[15:54] <masak> I eventually ended up doing it the other way, which is cleaner and a lot more satisfactory.

[15:54] <masak> somehow I'm very pleased with the result.

[15:54] *** zakharyas left
[15:54] <masak> this feels like the first non-contrived, really *useful* use of a macro in "real" code.

[15:54] <masak> Perl 6 code, I should say.

[15:55] <masak> I didn't originally write it like that, but when I came back to the code and started listing the things that felt vaguely wrong with it, I realized a macro was what I wanted.

[15:56] <masak> ajr_: in some sense, that's what macros do: 'slip [...] behavior in [...] code'

[15:56] <colomon> masak: link to code, pretty please?

[15:57] <chenryn> Saw only 2014.04.tar.gz on download page?

[15:57] <masak> colomon: https://gist.github.com/masak/0c4496b90e2aebf98062

[15:57] <masak> colomon: the latest version has the macro; the one before has three identical subs.

[15:58] <masak> colomon: earlier today I landed a small Rakudo patch which makes line 9 actually print the source code :D

[15:58] *** [Sno] joined
[15:58] <colomon> masak++

[15:58] <colomon> masak++

[15:58] <masak> it's especially satisfying, for some reason, because the source code contains custom operators.

[15:58] <colomon> first for macro, second for Rakudo patch.  ;)

[15:58] <masak> :) :)

[15:59] *** chenryn left
[15:59] <ajr_> masak: true, but macros are usually visible in the code. I might be misunderstanding the exchange at 09:55, but it looked as though the change came from data.

[16:00] <colomon> masak: I take it this code is not in the ecosystem yet?

[16:00] <masak> colomon: it is not -- and I'd prefer if it wasn't...

[16:00] *** lelf joined
[16:00] <colomon> masak: why not?

[16:00] <masak> colomon: it's a very slow, naive way to handle groups. it was written mostly as a thought experiment.

[16:01] <masak> colomon: basically, it brute-forces everything, where it instead should use well-known relationships.

[16:01] <colomon> masak: you'd better make it a blog post, then.  ;)

[16:01] <masak> aye. :)

[16:01] <masak> ajr_: not knowing more, it's hard for me to know if you understood things correctly or not ;)

[16:03] *** cognominal__ left
[16:03] <dalek> perl6-roast-data: 880c6c8 | coke++ | / (5 files):

[16:03] <dalek> perl6-roast-data: today (automated commit)

[16:03] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/880c6c8556

[16:03] *** rurban1 joined
[16:04] <ajr_> Sorry, I had the time wrong: 09:52:31-09:53:12

[16:04] *** cognominal joined
[16:05] <[Coke]> lots of flap on JVM.

[16:05] <masak> ajr_: http://irclog.perlgeek.de/perl6/2014-07-18#i_9045395 ?

[16:06] *** cognominal left
[16:06] *** cognominal joined
[16:07] *** cognominal left
[16:08] *** cognominal joined
[16:08] <masak> colomon: new version uploaded, which cleans up Group::Laws a whole lot, removing the repeated definitions of infix:<∘>: https://gist.github.com/masak/0c4496b90e2aebf98062

[16:10] <ajr_> Sorry, masak, it's 13:52 your time 

[16:11] <masak> ah! that's why I asked about irclog time ;)

[16:12] <masak> if it was 13:53 *my* time, then it was 11:53 IRC-log time.

[16:12] <ajr_> My IRC client's giving me local, rather than Z time

[16:13] <masak> so is mine.

[16:13] <masak> but my connection is a bit wonky right now, so rather than scroll up a lot, I just go to the irclogs.

[16:13] <masak> I still have no idea what conversation you are referring to, though.

[16:14] <masak> I checked all the likely timestamps.

[16:14] <PerlJam> .oO( <ajr_> oh, the conversation was actually yesterday )

[16:14] <[Coke]> if you want to refer to an old event, go to the weblogs and paste the link here.

[16:14] <PerlJam> ;-)

[16:15] <masak> PerlJam: .oO( <masak> do you, in fact, have any cheese at all? )

[16:15] <[Coke]> It's very clean, sir.

[16:16] <ajr_> define infix<,>(*@values, :name)

[16:16] <masak> oh!

[16:16] <masak> yes, that's definitely not very clean, sir.

[16:16] *** moistcherry is now known as hoverboard

[16:20] *** BenGoldberg joined
[16:23] <masak> ...but it's *allowed*, and we're going to keep fighting for your right to define it!

[16:24] *** treehug88 joined
[16:31] *** dayangkun left
[16:32] <masak> nomz &

[16:32] *** aoseki joined
[16:35] *** ariden__ joined
[16:35] *** ariden__ is now known as midoriseki

[16:35] *** akaseki left
[16:37] *** Alula_ left
[16:37] *** Alula_ joined
[16:38] *** aoseki left
[16:47] *** hummeleB1 joined
[16:47] *** ajr_ left
[16:48] *** Isp-sec joined
[16:50] *** Ven joined
[16:50] *** xinming left
[16:50] *** guru joined
[16:51] *** guru is now known as Guest56355

[16:53] *** Guest56355 is now known as ajr_

[16:54] *** ajr_ left
[16:54] *** ajr joined
[16:54] *** ajr is now known as Guest25179

[16:55] *** Guest25179 is now known as ajr_

[16:55] *** vendethiel joined
[17:02] *** ajr_ left
[17:04] *** ajr_ joined
[17:06] *** dakkar left
[17:07] *** Guest46058 is now known as ponbiki

[17:09] *** midoriseki is now known as DrSeki

[17:21] *** ajr_ left
[17:24] *** Ven left
[17:32] *** ivanshmakov left
[17:32] *** ivanshmakov joined
[17:34] *** kaleem joined
[17:34] * lizmat is awake, sort of, and backlogging

[17:40] <colomon> masak: nice!

[17:40] *** pochi joined
[17:58] <FROGGS> damn

[17:58] <FROGGS> a bugfixathon without RT sucks

[18:00] <FROGGS> [Coke]: at least this is an ex-parrot, err, an ex-fail: S32-exceptions/misc.rakudo.jvm 227 - did we throws_like X::TypeCheck::Binding?

[18:00] <FROGGS> [Coke]: because I fixed that right before the release

[18:03] <dalek> specs: 66c75f4 | (Elizabeth Mattijsen)++ | S99-glossary.pod:

[18:03] <dalek> specs: Add lemma for NST

[18:03] <dalek> specs: review: https://github.com/perl6/specs/commit/66c75f46c8

[18:03] <FROGGS> ahh, good that google cached the RT ticket pages :o)

[18:03] *** cognominal left
[18:03] <lizmat> there appears to be maintenance work on all perl.org servers today

[18:04] <FROGGS> correct: http://log.perl.org/2014/07/7182014-scheduled-maintenance-moving-day.html

[18:14] <dalek> roast: 87f2ed3 | (Tobias Leich)++ | S05-match/make.t:

[18:14] <dalek> roast: RT #76276 - $() is meant to be $/.ast // $/.Str

[18:14] <dalek> roast: review: https://github.com/perl6/roast/commit/87f2ed36c4

[18:14] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=76276

[18:17] *** lelf left
[18:17] <vendethiel> uuh

[18:18] <vendethiel> I often find $/ sugar to be confusing

[18:20] <[Coke]> FROGGS++ saw that fix, thanks.

[18:21] <FROGGS> I guess this will be challenging to fix:

[18:21] <FROGGS> m: role Foo { our $pi = 3 }; say $Foo::pi

[18:21] <camelia> rakudo-moar eda14a: OUTPUT«(Any)␤»

[18:26] *** cognominal joined
[18:29] *** Sqirrel joined
[18:29] * vendethiel thinks it's kinda weird that only :: hasn't received sigil invariance

[18:29] *** Sqirrel left
[18:29] *** kaleem left
[18:29] *** Sqirrel joined
[18:35] *** Celelibi left
[18:35] *** Grimnir_ left
[18:35] *** jlaire left
[18:35] *** yoleaux left
[18:36] *** yoleaux joined
[18:36] *** ChanServ sets mode: +v yoleaux

[18:36] *** Celelibi joined
[18:41] <dalek> roast: 0cbc65b | (Tobias Leich)++ | / (2 files):

[18:41] <dalek> roast: add test file to test precompilation in general

[18:41] <dalek> roast: review: https://github.com/perl6/roast/commit/0cbc65bd19

[18:42] <rindolf> Hi all. Is TimToady feeling better?

[18:42] <dalek> rakudo/nom: 8668171 | (Tobias Leich)++ | t/spectest.data:

[18:42] <dalek> rakudo/nom: RT #76456 - run precomp test file

[18:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8668171aa3

[18:42] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=76456

[18:42] <[Coke]> we only know what's in the review, but yes, he was online in the past day or so.

[18:46] <FROGGS> m: say 42.*WHAT

[18:46] <camelia> rakudo-moar eda14a: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/sCC_5Y0vBB␤Cannot use .* on a non-identifier method call␤at /tmp/sCC_5Y0vBB:1␤------> [32msay 42.*WHAT[33m⏏[31m<EOL>[0m␤    expecting any of:␤        method arguments␤»

[18:46] <FROGGS> m: say 42.+WHAT

[18:46] <camelia> rakudo-moar eda14a: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/2Sa6cDUCvZ␤Cannot use .+ on a non-identifier method call␤at /tmp/2Sa6cDUCvZ:1␤------> [32msay 42.+WHAT[33m⏏[31m<EOL>[0m␤    expecting any of:␤        method arguments␤»

[18:47] *** spider-mario joined
[18:47] *** lizmat left
[18:47] *** woolfy1 left
[18:47] <FROGGS> std: say 42.+WHAT

[18:47] <camelia> std 0f2049c: OUTPUT«ok 00:01 122m␤»

[18:47] <FROGGS> std: say 42.*WHAT

[18:47] <camelia> std 0f2049c: OUTPUT«ok 00:01 122m␤»

[18:47] <FROGGS> what is that even?

[18:47] *** lizmat joined
[18:48] *** DrSeki is now known as kuroseki

[18:48] *** woolfy joined
[18:49] *** khisanth_ is now known as Khisanth

[18:52] <lizmat> FROGGS: variations on 42.?WHAT ?

[18:52] *** rindolf left
[18:53] <FROGGS> but how so?

[18:53] *** rindolf joined
[18:53] <FROGGS> 42.?WHAT makes sense because it like a 'try to call that method'

[18:53] <lizmat> m: say 42.?Num say 42.?Foo

[18:53] <camelia> rakudo-moar eda14a: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/7MzRJvvjhv␤Two terms in a row␤at /tmp/7MzRJvvjhv:1␤------> [32msay 42.?Num [33m⏏[31msay 42.?Foo[0m␤    expecting any of:␤        method arguments␤        postfix␤        infix st…»

[18:53] <lizmat> m: say 42.?Num; say 42.?Foo

[18:53] <camelia> rakudo-moar eda14a: OUTPUT«42␤Nil␤»

[18:53] <FROGGS> but how does that work for +?

[18:54] <lizmat> call the first of possible methods?

[18:54] *** guru joined
[18:54] <lizmat> * being call all possible methods ?

[18:54] <FROGGS> the first...

[18:54] *** guru is now known as ajr_

[18:54] <FROGGS> hmmm

[18:54] <FROGGS> I have to read the spec

[18:54] * lizmat desperately needs to do some sightseeing

[18:55] <lizmat> so afk&

[18:55] <FROGGS> :o)

[18:56] <FROGGS>     $object.?meth(@args)  # calls method if there is one, otherwise Nil

[18:56] <FROGGS>     $object.*meth(@args)  # calls all methods (0 or more, () if none)

[18:56] <FROGGS>     $object.+meth(@args)  # calls all methods (1 or more, die if none)

[18:56] <FROGGS> indeed

[18:56] <FROGGS> that's strange

[18:58] <[Coke]> m: say 42.*42

[18:58] <camelia> rakudo-moar eda14a: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/uIO1mBlvgp␤Confused␤at /tmp/uIO1mBlvgp:1␤------> [32msay 42.*[33m⏏[31m42[0m␤    expecting any of:␤        dotty method or postfix␤»

[18:59] <FROGGS> m: Failure == 0

[18:59] <camelia> rakudo-moar eda14a: OUTPUT«Invocant requires an instance, but a type object was passed␤  in method Numeric at src/gen/m-CORE.setting:12865␤  in sub infix:<==> at src/gen/m-CORE.setting:4232␤  in block  at /tmp/ZdhfQwrMtp:1␤␤»

[19:01] *** rurban1 left
[19:03] <vendethiel> FROGGS: oh, I thought you meant "why does .+ work with WHAT", not what .+ is :p

[19:04] <FROGGS> I guess I just did not see n

[19:04] *** rindolf left
[19:04] <FROGGS> -n

[19:04] <FROGGS> the need to call all methods on an object

[19:04] *** rindolf joined
[19:05] *** rurban1 joined
[19:07] *** dmol left
[19:09] <FROGGS> m: / <[\x10000..\xEFFFF]> /; say "alive"

[19:10] <camelia> rakudo-moar eda14a: OUTPUT«(signal )»

[19:10] *** woolfy left
[19:11] *** woolfy joined
[19:15] <carlin> eats memory until it gets oomkilled

[19:16] *** woolfy left
[19:17] *** woolfy joined
[19:19] *** kivutar joined
[19:23] *** ponbiki left
[19:26] *** darutoko left
[19:31] <FROGGS> yeah, from knowing how cclasses work it must be

[19:39] *** treehug88 left
[19:42] *** SamuraiJack joined
[19:48] *** ponbiki joined
[19:48] *** ponbiki is now known as Guest31840

[19:51] *** rurban1 left
[19:54] *** rurban1 joined
[19:55] *** thou left
[19:55] *** cooper_ left
[19:55] *** btyler_ left
[19:55] *** kurahaupo left
[19:55] *** nhayashi left
[19:55] *** noganex_ left
[19:55] *** eternaleye left
[19:55] *** sftp left
[19:55] *** bowtie left
[19:55] *** molaf left
[19:55] *** mr-foobar left
[19:55] *** hugme left
[19:55] *** baest left
[19:55] *** klapperl left
[19:55] *** xragnar left
[19:55] *** carlin left
[19:55] *** klapperl joined
[19:55] *** nhayashi joined
[19:55] *** btyler joined
[19:55] *** eternaleye joined
[19:55] *** sftp joined
[19:55] *** xragnar joined
[19:55] *** bowtie joined
[19:55] *** thou joined
[19:55] *** baest joined
[19:55] *** molaf joined
[19:55] *** cooper_ joined
[19:55] *** carlin joined
[19:55] *** mr-foobar joined
[19:56] *** kurahaupo joined
[19:56] *** hugme joined
[19:56] *** ChanServ sets mode: +v hugme

[19:56] *** Guest31840 is now known as ponpon

[19:56] *** noganex joined
[20:04] *** kivutar left
[20:05] *** rindolf left
[20:08] *** kivutar joined
[20:12] *** Sqirrel left
[20:19] *** mr-foobar left
[20:22] *** estrabd left
[20:24] *** estrabd joined
[20:26] *** estrabd left
[20:27] <carlin> I just discovered http://whatcanidoformozilla.org

[20:27] <carlin> a perl6 equivalent could be interesting

[20:28] <vendethiel> oooh, that's graet !

[20:29] <vendethiel> hehe, there's a perl one :P

[20:30] *** estrabd joined
[20:30] *** SamuraiJack left
[20:34] *** rurban1 left
[20:39] *** anaeem1 left
[20:43] *** rurban1 joined
[20:54] *** molaf left
[20:55] *** dmol joined
[20:59] *** hummeleB1 left
[20:59] *** Ven joined
[21:07] <itz__> debian unstable has a "how-can-i-help" command with suggestions

[21:09] <timotimo> oooh

[21:09] <timotimo> that's pretty neat

[21:12] *** thou left
[21:14] *** anaeem1 joined
[21:15] <carlin> makes sense for Mozilla to have a website and Debian to have a command

[21:15] <timotimo> %)

[21:15] <carlin> maybe we should have a How::Can:I::Help module :p

[21:16] <timotimo> "use My::Assistance"

[21:16] <itz__> Create::The::Future

[21:20] *** kaare_ joined
[21:21] <dalek> nqp: f95efac | (Tobias Leich)++ | src/vm/moar/QAST/QASTRegexCompilerMAST.nqp:

[21:21] <dalek> nqp: implement charrange on moarvm

[21:21] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f95efac462

[21:22] *** anaeem1 left
[21:24] *** kivutar left
[21:44] *** virtualsue left
[21:48] *** Ven left
[21:50] *** ponpon is now known as ponbiki

[21:54] *** mr-foobar joined
[21:55] <zengargoyle> http://ddumont.wordpress.com/2014/07/18/looking-for-help-to-package-perl6-moar-and-others-for-debian/

[21:56] <zengargoyle> heh, 'surge of popularity': https://qa.debian.org/popcon.php?package=rakudo

[21:57] <carlin> woah, what happened there

[21:59] <timotimo> no clue o_O

[22:00] <zengargoyle> was that about the time moar was announced?

[22:01] <FROGGS> no, but the time moar was actually usable and started to show its strengths

[22:01] * geekosaur would be tempted to check unrelated stuff for similar bumps, in case it's something in popcon

[22:01] <FROGGS> https://qa.debian.org/popcon.php?package=libsdl2

[22:04] *** hoverboard left
[22:05] <FROGGS> time perl6-m -e 'say "\x2fa1d" ~~ /:i <[\x0..\x2fa1d]> /' # ｢􏿽xF0􏿽xAF􏿽xA8􏿽x9D􏿽xEF􏿽xBD􏿽xA3

[22:05] <FROGGS> real	0m0.363s

[22:05] *** Isp-sec left
[22:06] *** rurban1 left
[22:07] *** xragnar_ joined
[22:07] *** xragnar is now known as Guest7985

[22:07] *** Guest7985 left
[22:07] *** xragnar_ is now known as xragnar

[22:08] <dalek> nqp: 5b83983 | (Tobias Leich)++ | src/vm/moar/QAST/QASTRegexCompilerMAST.nqp:

[22:08] <dalek> nqp: make charrange aware of ignorecase on moar

[22:08] <dalek> nqp: review: https://github.com/perl6/nqp/commit/5b83983cb3

[22:09] <FROGGS> uhh

[22:09] <FROGGS> there might be regressions :/

[22:11] *** kaare_ left
[22:21] <FROGGS> m: say nqp::lc("2")

[22:21] <camelia> rakudo-moar 866817: OUTPUT«2␤»

[22:21] <FROGGS> m: say nqp::uc("2")

[22:21] <camelia> rakudo-moar 866817: OUTPUT«2␤»

[22:29] <FROGGS> okay, regressions probably resolved

[22:38] <dalek> nqp: 4793047 | (Tobias Leich)++ | src/vm/moar/QAST/QASTRegexCompilerMAST.nqp:

[22:38] <dalek> nqp: need an extra register in charrange

[22:38] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4793047e38

[22:38] <dalek> nqp: 5c191ee | (Tobias Leich)++ | src/QRegex/P6Regex/Actions.nqp:

[22:38] <dalek> nqp: use charrange for all case sensitive ranges

[22:38] <dalek> nqp: 

[22:38] <dalek> nqp: Case insensitive charrange is implemented on moar only atm, and fails

[22:38] <dalek> nqp: the following spectests:

[22:38] <dalek> nqp: t/spec/S05-grammar/protoregex.rakudo.moar

[22:38] <dalek> nqp: t/spec/S05-mass/properties-block.t

[22:38] <dalek> nqp: t/spec/S05-mass/rx.rakudo.moar

[22:38] <dalek> nqp: t/spec/integration/advent2013-day18.t

[22:38] <dalek> nqp: review: https://github.com/perl6/nqp/commit/5c191ee846

[22:38] *** woolfy left
[22:39] *** lizmat left
[22:48] *** gfldex left
[22:50] *** thou joined
[22:55] *** thou left
[22:56] *** Ven joined
[22:56] *** klapperl_ joined
[22:58] *** klapperl left
[23:02] *** spider-mario left
[23:14] <Ven> "The sequence operator is one of Perl 6's powerfulest feature" -> 'powerfulest' really seems a bit weird.

[23:16] * Ven lacks of vocabulary quite a bit

[23:16] <Ven> (I thought of "best", but that's a pretty bad word ...)

[23:20] <carlin> ... most powerful features

[23:20] <Ven> Oh, featureS ?

[23:21] <Ven> oh, obviously. Sorry.

[23:28] *** xenoterracide_ joined
[23:32] *** btyler left
[23:40] *** ajr_ left
[23:48] *** xenoterracide_ left
