[00:07] *** lue joined
[00:11] *** _thou left
[00:17] *** jnap left
[00:22] *** BenGoldberg joined
[00:31] *** benabik joined
[00:34] *** xenoterracide left
[00:38] *** hoverboard left
[00:43] *** cognominal left
[00:43] *** cognominal joined
[00:46] *** xenoterracide joined
[00:55] <dalek> doc/redesign: 4877afe | Mouq++ | htmlify.p6:

[00:55] <dalek> doc/redesign: Rewrite find-definition to be single-pass

[00:55] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/4877afeaaa

[01:10] *** Sqirrel_ joined
[01:11] *** Sqirrel left
[01:13] <xenoterracide> http://privatepaste.com/438b8b19fd https://github.com/xenoterracide/rakudo/compare/topic;annotations

[01:14] <xenoterracide> the first link contains an error on make, how can I make my modification apply?

[01:14] <xenoterracide> s/apply/build

[01:18] *** Ben_Goldberg joined
[01:18] *** BenGoldberg left
[01:18] *** Su-Shee_ joined
[01:18] *** Ben_Goldberg is now known as BenGoldberg

[01:18] *** colomon joined
[01:21] *** Su-Shee left
[01:23] *** klapperl_ joined
[01:26] *** klapperl left
[01:37] <Mouq> I'm getting this weird feeling that EVAL and start don't mix well. Due to the fact that it segfaults if two things are EVALed at the same time

[01:37] <Mouq> (On Moar)

[01:40] *** xenoterracide left
[01:41] <Mouq> m: my $long-code = (1 xx 500).join(' + '); await start({EVAL $long-code})

[01:41] <camelia> rakudo-moar b43091: ( no output )

[01:41] <Mouq> m: my $long-code = (1 xx 500).join(' + '); say await start({EVAL $long-code})

[01:41] <camelia> rakudo-moar b43091: OUTPUT«500␤»

[01:42] <Mouq> m: my $long-code = (1 xx 500).join(' + '); say await start({EVAL $long-code}), start({EVAL $long-code})

[01:42] <camelia> rakudo-moar b43091: OUTPUT«(signal )»

[01:42] <Mouq> ^^

[01:46] *** ilbot3 joined
[01:48] *** xenoterracide joined
[01:54] *** xenoterracide left
[01:57] *** colomon left
[02:07] *** hoverboard joined
[02:14] *** guru joined
[02:15] *** guru is now known as Guest77076

[02:15] *** ajr_ left
[02:15] *** Guest77076 is now known as ajr_

[02:20] *** colomon joined
[02:35] *** kurahaupo left
[02:38] *** noganex joined
[02:41] *** noganex_ left
[02:44] *** ajr_ left
[02:49] <colomon> probably already been here, but just in case: http://corsix.github.io/dynasm-doc/index.html

[03:16] <Timbus> man im excited to see a jit idea again after all these years

[03:18] *** rurban left
[03:19] <Timbus> noo i meant that i really like rurban's perl 5 jit too!

[03:22] *** jack_rabbit_ joined
[03:22] *** jack_rabbit_ left
[03:26] *** jack_rabbit joined
[03:29] *** telex left
[03:30] *** telex joined
[03:31] *** kaare_ joined
[03:37] *** xenoterracide joined
[03:49] *** rurban joined
[03:51] *** rurban1 joined
[03:53] *** rurban left
[03:55] *** rurban1 left
[04:05] *** hoverboard left
[04:07] <segomos_> hmm i get '16' when i do a $*SCHEDULER.loads.say .. S17 seems to indicate that isn't desirable.  not sure how to figure out what is causing the delays, any clues?

[04:16] <segomos_> is there a way to increase what the scheduler can do at once?

[04:18] *** rurban joined
[04:22] *** rurban left
[04:25] *** [Sno] left
[04:34] *** BenGoldberg left
[04:40] *** SevenWolf joined
[04:57] *** xenoterracide left
[04:57] *** xenoterracide_ joined
[05:00] *** risou is now known as risou_awy

[05:01] *** risou_awy is now known as risou

[05:03] *** hoverboard joined
[05:21] *** rurban joined
[05:25] *** rurban left
[05:26] <lizmat> morning #perl6!

[05:27] <lizmat> segomos_: .loads is currently in the repair shop, more or less

[05:27] <lizmat> pending spec evaluation

[05:28] *** jack_rabbit left
[05:35] *** xenoterracide_ left
[05:52] <dalek> rakudo/nom: 0eb8b04 | (Rob Hoelz)++ | src/core/Process.pm:

[05:52] <dalek> rakudo/nom: Add $*PROGRAM

[05:52] <dalek> rakudo/nom: 

[05:52] <dalek> rakudo/nom: $*PROGRAM_NAME still needs to be removed, but there a few tests

[05:52] <dalek> rakudo/nom: in roast that need to be cleaned up first

[05:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0eb8b04730

[05:53] <dalek> rakudo/nom: 61eaba6 | lizmat++ | src/core/Process.pm:

[05:53] <dalek> rakudo/nom: Merge pull request #281 from hoelzro/hoelzro/special-var-program

[05:53] <dalek> rakudo/nom: 

[05:53] <dalek> rakudo/nom: Add $*PROGRAM

[05:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/61eaba6c58

[05:54] *** [Sno] joined
[05:58] *** SevenWolf left
[06:08] *** anaeem1_ joined
[06:09] <dalek> perl6-bench: c2fa1bc | (Geoffrey Broadwell)++ | perl6/rc-man-or-boy-test:

[06:09] <dalek> perl6-bench: Get rid of extra 'sub's in perl6-rc-man-or-boy-test

[06:09] <dalek> perl6-bench: 

[06:09] <dalek> perl6-bench: Also do the small optimization of changing '=' to ':=' to match nqp.

[06:09] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/c2fa1bccf6

[06:14] *** gfldex joined
[06:16] *** exodist_ joined
[06:18] <lizmat> commute to YAPC::NA&

[06:18] *** lizmat left
[06:19] *** exodist_ left
[06:19] *** telex left
[06:19] *** skids left
[06:19] *** xinming left
[06:19] *** grondilu left
[06:19] *** cosimo left
[06:19] *** oetiker left
[06:19] *** Grrrr left
[06:23] *** exodist_ joined
[06:23] *** telex joined
[06:23] *** skids joined
[06:23] *** xinming joined
[06:23] *** grondilu joined
[06:23] *** cosimo joined
[06:23] *** oetiker joined
[06:23] *** Grrrr joined
[06:24] *** telex left
[06:24] *** telex joined
[06:26] *** woolfy left
[06:31] *** parsus joined
[06:38] *** zakharyas joined
[06:45] <dalek> doc/redesign: f1f0d9f | Mouq++ | / (5 files):

[06:45] <dalek> doc/redesign: Hack categories into type-graph.txt

[06:45] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/f1f0d9f5a5

[06:45] <dalek> doc/redesign: 6de05ab | Mouq++ | / (3 files):

[06:45] <dalek> doc/redesign: Get redesign good enough to be merged

[06:45] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/6de05ab1a8

[06:45] <dalek> Heuristic branch merge: pushed 50 commits to doc by Mouq

[06:50] *** igorsutton joined
[06:53] *** kaleem joined
[06:57] *** FROGGS joined
[06:57] <Mouq> .tell moritz My old computer died; can you authenticate me for syncing doc.perl6.org again? ssh public key in PM

[06:57] <yoleaux> Mouq: I'll pass your message to moritz.

[07:03] *** hoverboard left
[07:13] *** nnunley left
[07:14] *** dmol joined
[07:15] <dalek> doc: 1eef7a2 | Mouq++ | / (2 files):

[07:15] <dalek> doc: Unbust p6doc

[07:15] <dalek> doc: review: https://github.com/perl6/doc/commit/1eef7a2236

[07:16] <Mouq> doc.perl6.org updated

[07:17] <moritz> \o/

[07:17] <yoleaux> 06:57Z <Mouq> moritz: My old computer died; can you authenticate me for syncing doc.perl6.org again? ssh public key in PM

[07:17] *** Ven joined
[07:19] <dalek> doc: eeef352 | Mouq++ | lib/HomePage.pod:

[07:19] <dalek> doc: Comment out Module page reference

[07:19] <dalek> doc: review: https://github.com/perl6/doc/commit/eeef3526d4

[07:20] <jnthn> Mouq++

[07:21] <jnthn> Mouq: It seems the links on the homepage are busted?

[07:21] <jnthn> Go to language rather than langauge.html, for example

[07:21] <FROGGS> morning #perl6

[07:21] *** nnunley joined
[07:22] <moritz> or language/ needs an index.html

[07:22] <FROGGS> jnthn: do you have to quack&hack the r-j* problems this evening?

[07:22] <Mouq> jnthn: Yeah, I noticed that too, fixing

[07:22] <dalek> doc: f5e984f | Mouq++ | lib/HomePage.pod:

[07:22] <dalek> doc: Make index links go straight to the .html

[07:22] <dalek> doc: 

[07:22] <dalek> doc: Since doc.perl6.org server expects them to be in /index.html otherwise

[07:22] <dalek> doc: review: https://github.com/perl6/doc/commit/f5e984f14b

[07:23] *** rurban joined
[07:24] <FROGGS> jnthn: I slipped the word 'time'... it is clearly too early :o)

[07:25] <moritz> Mouq: for symmetry, it might be nice to have an 'All' link (same as http://doc.perl6.org/type.html) next to Basic/Composite/Domain-Specific/Exceptions

[07:25] <moritz> Mouq++

[07:25] <moritz> very, very nice

[07:26] <jnthn> FROGGS: maybe, but getting rm* clean is at least as important...or ist that done already?

[07:27] *** rurban left
[07:27] <FROGGS> jnthn: I need to reset the lwp-simple version back to HEAD^ and test again... but I can't imagine that the failing test will be clean then

[07:30] *** sqirrel joined
[07:30] *** kivutar joined
[07:32] <dalek> doc: f7c8b4f | Mouq++ | htmlify.p6:

[07:32] <dalek> doc: Add "All" section to sub-menus

[07:32] <dalek> doc: review: https://github.com/perl6/doc/commit/f7c8b4f5f3

[07:33] <Mouq> smls++ again for http://imgur.com/a/y1dHo

[07:34] <Mouq> There's still work to be done, but as it is, it's an improvement over what we had before, IMO

[07:34] * jnthn agrees

[07:35] <jnthn> Mouq++ for working on it, smls++ for design

[07:36] <Mouq> sync'd

[07:36] <Mouq> sleep&

[07:36] *** Mouq left
[07:37] <sergot> morning o/

[07:39] <FROGGS> morning sergot 

[07:40] <moritz> Mouq++, smls++

[07:40] <moritz> and yes, definitive improvement over before

[07:43] *** labster left
[07:57] *** Su-Shee_ is now known as Su-Shee

[07:59] *** darutoko joined
[08:05] <Ven> Oh, "int main(){(([](){})());}" is valid c++

[08:05] <Ven> I guess larry wall wandered around there ...

[08:19] *** pecastro left
[08:24] *** rurban joined
[08:24] *** denis_boyun_ joined
[08:28] *** rurban left
[08:41] <jlaire> or just  [](){}();  :)

[08:46] <Ven> jlaire: [[(]()))].

[08:47] <Ven> (that means : you must be fun at parties)

[08:47] *** fhelmberger joined
[08:50] <jnthn> std: [](){}()

[08:50] <camelia> std 0f2049c: OUTPUT«ok 00:01 125m␤»

[08:50] <jnthn> :)

[08:50] <moritz> m: $!#aq4#$Q#@%*(&@#$!$%

[08:50] <camelia> rakudo-moar 61eaba: ( no output )

[08:51] <jnthn> :P

[08:51] <timotimo> it's easy if the comment character comes so early :P

[08:51] <jnthn> yeah, was gonna say... so comment... :P

[08:56] *** dakkar joined
[09:00] *** thistusooa joined
[09:01] <thistusooa> perl6: say 3;

[09:01] <camelia> rakudo-jvm 61eaba: OUTPUT«(timeout)»

[09:01] <camelia> ..rakudo-{parrot,moar} 61eaba, niecza v24-109-g48a8de3: OUTPUT«3␤»

[09:03] <jnthn> Why do people always pick 3?

[09:03] <jnthn> :)]

[09:04] <moritz> rp, rm, niecza, timeout: pick 3 :-)

[09:07] <FROGGS> *facepalm*

[09:07] <FROGGS> jnthn: I know why my r-m* is not clean

[09:07] *** Util joined
[09:08] <FROGGS> star refers to a MIME::Base64 from 2012, while there are a lot of updates since then

[09:09] <masak> good antenoon, #perl6

[09:09] <moritz> \o masak

[09:09] <FROGGS> and it seems that I messed with it here: https://github.com/rakudo/star/commit/499084f120a23131ff7bb9377c45effddae864d3

[09:11] <FROGGS> wow, the mentioned sha1 is from Jan 2011

[09:12] <jnthn> FROGGS: Oh, so no bugg?

[09:12] <FROGGS> jnthn: well, there still is a bug, and also a pretty old work around

[09:19] <FROGGS> ==29549== Syscall param sendmsg(mmsg[0].msg_hdr) points to uninitialised byte(s)

[09:19] <FROGGS> ...

[09:19] <FROGGS> ==29549==    by 0x4F71AD7: MVM_io_resolve_host_name (in /home/froggs/dev/star/work-m/rakudo-star-2014.05/install/lib/libmoar.so)

[09:21] *** pecastro joined
[09:25] *** rurban joined
[09:28] *** kivutar left
[09:29] *** rurban left
[09:30] <FROGGS> ahh, nvm, that is just a bug in valgrind...

[09:30] *** rurban joined
[09:34] *** sqirrel left
[09:36] *** rurban left
[09:43] *** sqirrel joined
[09:47] *** Psyche^_ joined
[09:51] *** Psyche^ left
[09:54] <timotimo> will probably have some cute benchmarks for you soon

[09:59] *** parsus left
[10:13] *** Ven left
[10:23] <timotimo> huh, in these benchmarks, rakudo-parrot/2013.06 beats a completely up-to-date rakudo-parrot in a bunch of benchmarks

[10:26] <timotimo> timo@schmand ~/p/bench (master) [1]> perl6-m -e 'for ^32 -> $i { for ^32 -> $j { $i + $j }; 1 }; 1'

[10:26] <timotimo> Spesh: failed to fix up handlers (170, -1, 192)

[10:26] <timotimo> not so good for the benchmarks :S

[10:27] <timotimo> http://t.h8.lv/p6bench/2014-06-18-all.html

[10:28] <timotimo> kind of amazing that the concat benchmarks are in favor of moarvm; must be because of the excellent start-up time

[10:29] <timotimo> interesting that rakudo-moar overtakes nqp-moar on the postwhile_nil_native benchmark

[10:29] *** dmol left
[10:30] *** treehug88 joined
[10:34] <timotimo> huh, 2013.06 rakudo-parrot starts up faster than current rakudo-moar does? o_O

[10:34] <timotimo> ah, that was a cold cache vs a hot cache.

[10:42] <timotimo> 2013.06 rakudo-parrot does say 1 in: 0.28user 0.07system 0:00.36elapsed 98%CPU (0avgtext+0avgdata 221112maxresident)k

[10:43] <timotimo> current rakudo-parrot does say 1 in: 0.40user 0.09system 0:00.49elapsed 99%CPU (0avgtext+0avgdata 290860maxresident)k

[10:43] <timotimo> current rakudo-moar does say 1 in: 0.29user 0.03system 0:00.33elapsed 99%CPU (0avgtext+0avgdata 128308maxresident)k

[10:50] <timotimo> (and perl5 does "say 1" in an unmeasurable amount of time and only 2 megabytes of ram, but that doesn't load any features ...)

[10:51] <timotimo> hmm. startup speed and speed in general even before the jit kicks in is still a very valuable target if we want to offer our users a good tool for short commandline snippets.

[10:51] <timotimo> not quite sure how fast our jit is going to kick in ...

[10:53] <timotimo> i should have a look at the timezone thingie we do at startup time again; last time i looked it was responsible for a sizable chunk of start-up time.

[10:53] <timotimo> get-local-timezone-offset, that is

[10:53] <moritz> masak++ http://strangelyconsistent.org/blog/boxes-and-pebbles

[10:56] <timotimo> hm, the get-local-timezone-offset calculation takes only 0.01s out of 0.29s start-up time all in all

[11:04] *** psch joined
[11:04] <psch> hi #perl6

[11:14] <jnthn> timotimo: Dunno if lizmat++ already patched this, but our startup time took a bit of a hit this month due to the Inc.pm stuff

[11:15] *** cibs left
[11:17] *** cibs joined
[11:17] *** cibs left
[11:18] *** cibs joined
[11:23] *** prevost joined
[11:24] <jnthn> timotimo: Please file a Moar issue for the spesh fixup bug; I'll look at that tonight

[11:35] *** dmol joined
[11:38] *** skids left
[11:48] *** Sqirrel_ left
[12:00] *** kivutar joined
[12:03] <masak> I strongly encourage people to play around with https://gist.github.com/masak/f865b7d9dd33e535b501 and post any modifications/improvements they make.

[12:10] *** carlin joined
[12:16] *** sqirrel left
[12:23] *** treehug88 left
[12:29] *** donaldh joined
[12:30] <donaldh> r: Any ~~ True

[12:30] <yoleaux> 17 Jun 2014 17:27Z <[Coke]> donaldh: Thanks for perservering and getting the eval server stuff working for me. Having these tests run in a fraction of the time makes it much more usable.

[12:30] <camelia> rakudo-{jvm,moar} 61eaba: OUTPUT«Potential difficulties:␤    Smartmatch against True always matches; if you mean to test the topic for truthiness, use :so or *.so or ?* instead␤    at /tmp/tmpfile:1␤    ------> [32mAny ~~[33m⏏[31m True[0m␤use of uninitialized value of …»

[12:30] <camelia> ..rakudo-parrot 61eaba: OUTPUT«Potential difficulties:␤    Smartmatch against True always matches; if you mean to test the topic for truthiness, use :so or *.so or ?* instead␤    at /tmp/tmpfile:1␤    ------> [32mAny ~~[33m⏏[31m True[0m␤use of uninitialized value of type…»

[12:31] *** colomon left
[12:33] <[Coke]> perhaps we could collapse the responses if they're identical to the length of the response we allow.

[12:34] <donaldh> r: my $x = Any or True; ?$x

[12:34] <camelia> rakudo-{parrot,jvm,moar} 61eaba: ( no output )

[12:34] <donaldh> r: my $x = Any or True; say ?$x

[12:34] <camelia> rakudo-{parrot,jvm,moar} 61eaba: OUTPUT«False␤»

[12:35] *** FROGGS left
[12:35] <donaldh> Oh, does = have higher precedence than or ?

[12:35] <donaldh> r: my $x = (Any or True); say ?$x

[12:35] <camelia> rakudo-{parrot,jvm,moar} 61eaba: OUTPUT«True␤»

[12:39] <timotimo> http://t.h8.lv/p6bench/2014-06-18-all-56.html

[12:41] <carlin> is the module smoke tests report down?

[12:42] <tadzik> apparently so

[12:43] <tadzik> it could maybe use a mirror

[12:43] <tadzik> colomon's not here either :)

[12:43] <tadzik> those two cases may be related

[12:44] <carlin> ah right, his laptop was getting fixed

[12:44] *** amirite joined
[12:48] <dalek> rakudo-star-daily: f794cf7 | coke++ | log/ (14 files):

[12:48] <dalek> rakudo-star-daily: today (automated commit)

[12:48] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/f794cf78ac

[12:54] *** colomon joined
[12:56] <[Coke]> looks like autounfudge isn't working. yay, something to hack on during the very long car trip. :)

[13:02] *** skids joined
[13:05] <carlin> autounfudge is fudged

[13:07] *** Alina-malina left
[13:09] *** rindolf left
[13:12] <moritz> t/spec/S32-io/IO-Socket-Async.t                             (Wstat: 0 Tests: 6 Failed: 1) Failed test:  5

[13:13] *** kaleem_ joined
[13:14] *** FROGGS joined
[13:17] *** kaleem left
[13:20] *** kaleem joined
[13:20] <donaldh> r: my $x = Any || True; say ?$x

[13:20] <camelia> rakudo-{parrot,jvm,moar} 61eaba: OUTPUT«True␤»

[13:20] <donaldh> r: my $x = Any // True; say ?$x

[13:20] <camelia> rakudo-{parrot,jvm,moar} 61eaba: OUTPUT«True␤»

[13:20] <donaldh> r: my $x = Any or True; say ?$x

[13:21] <camelia> rakudo-{parrot,jvm,moar} 61eaba: OUTPUT«False␤»

[13:21] <donaldh> There was me thinking that or was a synonym for ||

[13:21] <donaldh> Spec says loose or

[13:21] <moritz> my $x = Any or True;

[13:21] <moritz> is parsed as

[13:21] <moritz> (my $x = Any) or True

[13:21] *** kaleem_ left
[13:21] <moritz> that's the 'loose'

[13:22] <moritz> the precedence is looser than =

[13:22] <timotimo> aye, if you want tighter or, you use ||

[13:22] <donaldh> Yeah. It'll cause a lot of thinkos

[13:22] <timotimo> it's for stuff like 'do some stuff or die "error!"'

[13:22] <moritz> donaldh: it's actually for preventing a big class of thinkos

[13:23] <moritz> my $res = dostuff or die "OH NOEZ"

[13:23] <moritz> donaldh: the knowledge when to use || vs. or is carried in idioms

[13:24] <donaldh> Yep.

[13:24] <donaldh> thx

[13:25] <donaldh> Well here's a fix for one of those thinkos: https://github.com/rakudo/rakudo/pull/282

[13:26] <dalek> rakudo/nom: 77698d2 | (Donald Hunter)++ | src/core/Process.pm:

[13:26] <dalek> rakudo/nom: Fix 'or' thinkos.

[13:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/77698d2869

[13:26] <dalek> rakudo/nom: bcd1861 | timo++ | src/core/Process.pm:

[13:26] <dalek> rakudo/nom: Merge pull request #282 from donaldh/process

[13:26] <dalek> rakudo/nom: 

[13:26] <dalek> rakudo/nom: Fix 'or' thinkos in Process.pm

[13:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bcd1861857

[13:26] <timotimo> good catch

[13:26] <timotimo> spread over many, many lines, too

[13:26] *** Alina-malina joined
[13:27] <moritz> donaldh++

[13:27] <moritz> actually that's something that could warn

[13:27] <moritz> useless use of 'or' in sink context

[13:29] <masak> aye.

[13:29] <masak> my pragmatic rule is that I use the symbol forms whenever I'm dealing with expressions, and the word forms whenever I'm dealing with statements.

[13:29] <masak> that's a simplification, but it seems to hold up.

[13:29] <moritz> ... but only if the RHS is a constant expression

[13:30] <moritz> (re warning)

[13:30] <masak> oh?

[13:31] <moritz> my $x = open(...) or die "blerg!"

[13:31] <moritz> shouldn't warn about useless use of 'or'

[13:31] <masak> doesn't have more to do with side effects than with constancy?

[13:31] <masak> a referentially transparent function call would also be quite useless.

[13:32] <moritz> aye, but that would be constant-folded, I believe

[13:33] <moritz> masak: for a specification POV, you're right that it's about side effects

[13:33] <moritz> masak: but we can only know that an expression is free of side effects when it's a pure expression or a constant

[13:33] <masak> *nod*

[13:33] <moritz> (so far)

[13:37] * moritz whistles some tunes from Knutsen&Ludvigsen

[13:39] <donaldh> I recall there was a discussion about install layout a few days ago but I cannot find it.

[13:39] <donaldh> Did anyone make a proposal for a better layout, rather than just following what parrot does?

[13:42] *** mmcleric joined
[13:43] <FROGGS> donaldh: there in an nqp issue about that

[13:47] <donaldh> FROGGS: This one? https://github.com/perl6/nqp/issues/154

[13:48] <donaldh> On JVM it would be good to separate the Java classpath from the module lookup. During bootstrap, nqp relies on the Java classpath containing module directories.

[13:49] <donaldh> I'm looking at this just now so could work on a better layout at the same time.

[13:50] <donaldh> Also don't know whether it is stylistically better to have -D options for the JVM or add command-line options to nqp and perl6

[13:50] <donaldh> I guess if the solution is JVM specific then -D might be preferred. But if it's something shared by backends then it should be a command-line option.

[13:50] <FROGGS> donaldh: yes, that one

[13:51] *** [Sno] left
[13:52] *** anaeem1_ left
[13:52] *** risou is now known as risou_awy

[13:52] *** risou_awy is now known as risou

[14:00] *** colomon left
[14:00] *** colomon joined
[14:02] *** bluescreen10 joined
[14:03] *** kaleem left
[14:07] *** btyler joined
[14:14] <sergot> rakudo release tomorrow! please update the Changelog :)

[14:16] <FROGGS> sergot++

[14:16] <FROGGS> :P

[14:16] *** _thou joined
[14:22] *** kurahaupo joined
[14:26] <hoelzro> morning #perl6!

[14:27] <sergot> hoelzro o/

[14:29] <sergot> m: say <a b> (|) <c d>

[14:29] <camelia> rakudo-moar 61eaba: OUTPUT«set(a, b, c, d)␤»

[14:31] <timotimo> m: say <a b> (|) <b a>

[14:31] <camelia> rakudo-moar 61eaba: OUTPUT«set(a, b)␤»

[14:33] <sergot> m: say <a b> (|) <>

[14:33] <camelia> rakudo-moar 61eaba: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/pQdAjeNSBs␤Unsupported use of <>; in Perl 6 please use lines() to read input, ('') to represent a null string or () to represent an empty list␤at /tmp/pQdAjeNSBs:1␤------> [32msay <a b> (|) <…»

[14:33] <sergot> m: say <a b> (|) < >

[14:33] <camelia> rakudo-moar 61eaba: OUTPUT«set(a, b)␤»

[14:36] <sergot> m: < <> >.perl.say

[14:36] <camelia> rakudo-moar 61eaba: OUTPUT«"<>"␤»

[14:36] <sergot> m: <<>>.perl.say

[14:36] <camelia> rakudo-moar 61eaba: OUTPUT«()␤»

[14:39] *** colomon left
[14:39] <timotimo> m: <<<>>>.perl.say

[14:40] <camelia> rakudo-moar 61eaba: OUTPUT«Nil␤Cannot call 'Real'; none of these signatures match:␤:(Mu:U \v: *%_)␤  in method Real at src/gen/m-CORE.setting:3737␤  in sub infix:<>> at src/gen/m-CORE.setting:4264␤  in block  at /tmp/EpG3lO7fYG:1␤␤»

[14:43] *** treehug88 joined
[14:43] *** atroxaper joined
[14:44] <atroxaper> How can I get value of variable by its name? Something like $('a');

[14:44] <atroxaper> I have variable name from signatur.params

[14:45] <FROGGS> m: my $a = 42; say ::('$a')

[14:45] <camelia> rakudo-moar bcd186: OUTPUT«42␤»

[14:46] <atroxaper> :: ?

[14:46] <FROGGS> indirect lookup

[14:46] <atroxaper> Hm... Works.

[14:46] <FROGGS> it is the same like: $?PACKAGE.WHO<$a>

[14:47] <FROGGS> m: my $a = 42; say $?PACKAGE.WHO<$a>

[14:47] <camelia> rakudo-moar bcd186: OUTPUT«(Any)␤»

[14:47] <FROGGS> hmmm

[14:48] *** igorsutton left
[14:50] <sergot> m: my $a = '$b'; my $b = 1; say ::($a);

[14:50] <camelia> rakudo-moar bcd186: OUTPUT«1␤»

[14:50] <dalek> roast: 8ed8c3b | (Rob Hoelz)++ | S (4 files):

[14:50] <dalek> roast: Use $*PROGRAM instead of $*PROGRAM_NAME

[14:50] <dalek> roast: 

[14:50] <dalek> roast: Bring roast up to speed with S28

[14:50] <dalek> roast: 

[14:50] <dalek> roast: The following files still need to be updated, but it's out of my level

[14:50] <dalek> roast: of expertise:

[14:50] <dalek> roast: 

[14:50] <dalek> roast: S02-names/pseudo.t

[14:50] <dalek> roast: S02-magicals/progname.t

[14:50] <dalek> roast: review: https://github.com/perl6/roast/commit/8ed8c3b9c6

[14:50] <dalek> roast: d11634c | (Konrad Borowski)++ | S (4 files):

[14:50] <dalek> roast: Merge pull request #44 from perl6/hoelzro/special-var-program

[14:50] <dalek> roast: 

[14:50] <dalek> roast: Use $*PROGRAM instead of $*PROGRAM_NAME

[14:50] <dalek> roast: review: https://github.com/perl6/roast/commit/d11634c16d

[14:50] <atroxaper> I found it in S02

[14:50] <atroxaper> FROGGS: Thanks.

[14:51] <atroxaper> sergot: you too :)

[14:51] <FROGGS> also helpful:

[14:51] <FROGGS> m: my $a = 42; say ::

[14:51] <camelia> rakudo-moar bcd186: OUTPUT«PseudoStash.new("\$a", 42, "\$!", Nil, "\$/", Nil, "\$_", Nil, "GLOBALish", GLOBAL, "EXPORT", EXPORT, "\$?PACKAGE", GLOBAL, "::?PACKAGE", GLOBAL, "\$=pod", Array.new(), "!UNIT_MARKER", !UNIT_MARKER, )␤»

[14:52] <atroxaper> wow :)

[14:53] <FROGGS> m: use Test; say Test::

[14:53] <camelia> rakudo-moar bcd186: OUTPUT«("EXPORT" => EXPORT).hash␤»

[14:55] <FROGGS> star-m: use JSON::Tiny; say JSON::Tiny::

[14:55] <camelia> star-m 2014.04: OUTPUT«("Actions" => JSON::Tiny::Actions, "EXPORT" => EXPORT, "Grammar" => JSON::Tiny::Grammar).hash␤»

[14:57] <sergot> "\$/"

[14:57] <FROGGS> an innocent match

[14:58] <sergot> just like happy \o/ because of money :)

[14:58] <atroxaper> FROGGS: It's really useful! Actually I miss about JavaDoc in Perl 6. Many IDE can show any possible methods for the object. And I thinks it's very helpful for beginers.

[14:58] <FROGGS> yeah, true

[15:06] <xfix> There are #= comments in Perl 6 for this purpose.

[15:06] <xfix> Except there is no editor that can read #= comments.

[15:07] <sergot> m: say $?PACKAGE

[15:07] <camelia> rakudo-moar bcd186: OUTPUT«(GLOBAL)␤»

[15:10] <atroxaper> xfix:  Yes, know. Now I try to write comfortable Pod::To::'Anything' transformation. And one of m goals to generate Perl6Doc like JavaDoc.

[15:10] <PerlJam> m: class C {}; our \x = 5; say GLOBAL::

[15:10] <camelia> rakudo-moar bcd186: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/G1joRXyZDf␤our scoped term definitions (only 'my' is supported at the moment) not yet implemented. Sorry. ␤at /tmp/G1joRXyZDf:1␤------> [32mclass C {}; our \x = 5[33m⏏[31m; say GLOBAL::[…»

[15:10] <PerlJam> m: class C {}; say GLOBAL::

[15:10] <camelia> rakudo-moar bcd186: OUTPUT«("C" => C).hash␤»

[15:11] *** jnap joined
[15:12] <sergot> atroxaper++

[15:12] <atroxaper> sergot: :-)

[15:15] <hoelzro> thanks xfix and lizmat for the merges!

[15:15] *** kaleem joined
[15:18] *** colomon joined
[15:24] *** labster joined
[15:24] <carlin> IO::Path.copy gives the copied file weird file permissions. I'm copying a file with 0644 and the copy ends up with 7755

[15:25] *** sqirrel joined
[15:25] <FROGGS> carlin: perhaps there are weird defaults in MoarVM?

[15:27] <hoelzro> so I did most of the change for $*PROGRAM_NAME -> $*PROGRAM last night

[15:27] <hoelzro> but I got stuck when it came time to figure out what it means to assign to $*PROGRAM

[15:27] <hoelzro> how should that work?

[15:29] *** treehug8_ joined
[15:32] *** treehug88 left
[15:41] *** denis_boyun_ left
[15:45] *** atroxaper left
[15:45] *** atroxaper_ joined
[15:45] *** thistuso- joined
[15:47] *** thistuso- left
[15:48] *** thistusooa is now known as ThisTusooa

[15:49] *** zakharyas left
[15:50] <atroxaper_> Sorry, but I have one more question... If I have function with Junction like q[sub a(:$d where {$d > 2}) {}] and have q[my %h ={d => 3}]. How can I check that %h satisfies &a ? I thought about getting a Junction from each parameter of &a and check. But I don't know what can I do with Junction and value xD

[15:52] *** xinming left
[15:53] *** xinming joined
[15:54] *** anaeem1 joined
[15:55] <ThisTusooa> any(keys %h) #?

[15:56] <psch> m: sub a(:$d where { $^d > 2 }) { }; my %h = (d => 3); say %h ~~ &a.signature # atroxaper_ 

[15:56] <camelia> rakudo-moar bcd186: OUTPUT«True␤»

[15:56] <perigrin> .oO(I have an unction for a function with a Junction )

[15:56] <psch> i think that should be it; iirc $a ~~ $b calls $b.ACCEPTS($a)

[15:56] <psch> m: sub a(:$d where { $^d > 2 }) { }; my %h = (d => 1); say %h ~~ &a.signature # atroxaper_ 

[15:56] <camelia> rakudo-moar bcd186: OUTPUT«False␤»

[15:57] <psch> yeah, looks good i think :)

[15:57] <atroxaper_> psch: Wow! Brilliant!

[15:58] <atroxaper_> ThisTusooa: that method throws exception and bad case.

[16:01] <carlin> I'm thinking that

[16:01] <carlin> https://github.com/MoarVM/MoarVM/blob/master/src/io/fileops.c#L8

[16:01] <carlin> should be 0x01FF?

[16:01] <atroxaper_> psch: why does it works only in % ~~ & order? And doesn't work in & ~~ % order....

[16:02] <psch> atroxaper_: that's semantics of ~~. it checks if the rhs accepts the lhs

[16:02] <atroxaper_> psch: oh... Ok. Many thanks!

[16:03] <psch> S03 has details under "Smart matching"

[16:03] <atroxaper_> It is really cognitive day)

[16:03] *** hoverboard joined
[16:03] *** dmol left
[16:04] <atroxaper_> psch: I'm going to read :-)

[16:06] *** ThisTuso- joined
[16:07] *** ThisTuso- left
[16:07] *** ThisTuso- joined
[16:07] *** ThisTusooa left
[16:07] *** ThisTuso- is now known as ThisTusooa

[16:11] *** atroxaper_ is now known as atroxaper

[16:12] *** molaf joined
[16:16] <dalek> perl6-roast-data: a2172b2 | coke++ | / (6 files):

[16:16] <dalek> perl6-roast-data: today (automated commit)

[16:16] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/a2172b2d98

[16:19] *** [Sno] joined
[16:24] *** treehug8_ left
[16:25] *** molaf_ joined
[16:29] *** molaf left
[16:29] <donaldh> looks like we'd benefit from having a threaded version of IO-Socket-INET.t

[16:30] <moritz> donaldh: that would be awesome

[16:30] *** orafu joined
[16:31] * donaldh wonders how easy it will be to 'exec' in a thread on jvm or moar but still spawn a process for parrot, from the same testfile.

[16:34] * donaldh is too busy messing around with embedding rakudo in Eclipse right now though.

[16:38] *** DarthGandalf joined
[16:38] *** spider-mario joined
[16:45] *** btyler left
[16:45] *** denis_boyun_ joined
[16:45] *** mmcleric left
[16:46] <[Coke]> donaldh++ #woohoo

[16:47] * jnthn back from teaching :)

[16:48] *** dmol joined
[16:54] *** jdv79 joined
[16:54] *** pecastro left
[16:55] *** zakharyas joined
[16:55] *** bluescreen10 left
[16:55] <jdv79> are there good docs on grammars and rules?  I'd like to try to write a parser for a simple little data manip lang.

[16:55] <jdv79> well, port one i have a p5 version of.

[16:55] <dalek> nqp/classloading: 2187d95 | (Donald Hunter)++ | tools/build/Makefile-JVM.in:

[16:55] <dalek> nqp/classloading: Start removing bootclasspath

[16:55] <dalek> nqp/classloading: review: https://github.com/perl6/nqp/commit/2187d95a58

[16:55] <dalek> nqp/classloading: 7b0eabe | (Donald Hunter)++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/LibraryLoader.java:

[16:55] <dalek> nqp/classloading: Search for ModuleLoader.jar based on perl6.prefix

[16:55] <dalek> nqp/classloading: review: https://github.com/perl6/nqp/commit/7b0eabe676

[16:55] <dalek> nqp/classloading: 7416a2d | (Donald Hunter)++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/GlobalContext.java:

[16:55] <dalek> nqp/classloading: Delegate to the parent classloader.

[16:55] <dalek> nqp/classloading: review: https://github.com/perl6/nqp/commit/7416a2d62b

[16:55] <dalek> nqp/classloading: 3f55626 | (Donald Hunter)++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[16:55] <dalek> nqp/classloading: Temp hack to extend the classpath with install dirs.

[16:55] <dalek> nqp/classloading: review: https://github.com/perl6/nqp/commit/3f55626975

[16:56] <PerlJam> jdv79: S05

[16:56] <donaldh> [Coke]: https://github.com/donaldh/perl6-eclipse-plugin

[16:58] <donaldh> [Coke]: Just a prototype so far. At the moment the Eclipse bundle activator executes an embedded script.

[16:58] <jdv79> ok, thanks

[16:58] *** atroxaper left
[16:58] *** atroxaper joined
[16:59] *** sqirrel left
[16:59] <PerlJam> jdv79: There's also https://github.com/perlpilot/perl6-docs/blob/master/intro/p6-grammar-intro.pod which I wrote a while back (and it's incomplete)

[16:59] *** dakkar left
[17:03] *** atroxaper left
[17:04] <moritz> jdv79: there are also two chapters (one on regexes, one on grammars) in the p6 book

[17:04] <moritz> https://github.com/perl6/book/

[17:05] <PerlJam> moritz++ (for some reason I have forgotten about the book :(   )

[17:05] *** REPLeffect joined
[17:06] *** kaleem left
[17:07] *** donaldh left
[17:07] <PerlJam> jdv79: oh, there's also https://github.com/perlpilot/perl6-docs/blob/master/intro/p6-regex-intro.pod for regex stuff too (also written a while back, but largely "complete" and perhaps a little dated in some areads)

[17:07] <PerlJam> er, areas

[17:09] <PerlJam> jdv79: and there are a few Advent articles on grammars: http://perl6advent.wordpress.com/?s=grammar

[17:09] * vendethiel just convinced a friend that p6 is more elegant than ruby

[17:10] <PerlJam> vendethiel: even with the funny symbols?  (those always seem to be a contentious item for some people)

[17:10] <vendethiel> PerlJam: I convinced him thanks to static type (and hence names) checks

[17:12] <jdv79> thanks

[17:12] <jdv79> how does perf compare to the perl5 regex engine?

[17:12] <PerlJam> jdv79: slower but way more powerful (IMHO)

[17:12] <jdv79> the p5 module i'm looking to parse is pretty fast and it get a lot of that from leveraging the regex engine 

[17:13] <jdv79> s/parse/port/

[17:13] <vendethiel> Slow, yet :P

[17:13] <jdv79> ok, still slower.  i thought since its so core to p6 it might be on a faster track in terms of perf.

[17:13] <vendethiel> s/Slow,/Not fast,not/

[17:14] <vendethiel> jdv79: perl 6 is not finished ... especially performance-wise ... even if we're making great progress on that :)

[17:17] <PerlJam> jdv79: If you had something that used P5's Parse::RecDescent, you may see a performance boost by porting it to P6 grammars  ;-)

[17:17] <nwc10> iiiinteresting

[17:17] <nwc10> is it viable to make a convertor from Parse::RecDescent to Perl 6 rules?

[17:18] <nwc10> has Damian done that yet?

[17:18] <vendethiel> PerlJam: really ?

[17:19] <PerlJam> vendethiel: maybe.  I haven't kept up with changes to PArse::RecDescent, but the last time I used it, it was quite slow.

[17:20] *** jnap left
[17:27] *** kurahaupo left
[17:33] *** treehug88 joined
[17:35] <jdv79> its using a combo of a recursive regex and hand built code to do the parsing.

[17:35] <jdv79> its also using the regex engine to do the application but i forget exactly how

[17:35] <jdv79> anyway, lots of good info - thanks

[17:36] <jdv79> i was going to try to use Conway's new parser, I think its Regexp::Grammars, but at the time p5 broke it so I didn't look into it.

[17:44] *** denis_boyun_ left
[17:49] *** sqirrel joined
[17:51] *** darutoko left
[17:56] <segomos_> this one isn't very good

[17:56] <segomos_> oops

[17:58] <jnthn> .oO( nope, wasn't :P )

[17:59] *** atroxaper joined
[18:02] *** jnap joined
[18:04] *** atroxaper left
[18:09] <[Coke]> donaldh++ # I will try that out when vacation starts :)

[18:11] *** btyler joined
[18:14] <segomos_> jnthn: i discovered that if i do $*SCHEDULER.load that with one request i end up with '16' as the .load and that all processing ceases, is there something i can do to increase that number or handle whatever is going on in $*SCHEDULER and resume processing?

[18:15] <PerlJam> y

[18:15] <PerlJam> ww

[18:18] <jnthn> segomos_: Hm, I think 16 is the max number of threads. That implies that somehow they all hung...

[18:18] <jnthn> But that sounds odd.

[18:19] <jnthn> Can try putting a ThreadPoolScheduler instance into $*SCHEDULER at program start with a higher max threads...

[18:20] <segomos_> i'll give it a shot

[18:24] <segomos_> that makes the jvm work, i need to test to see if i'm leaking promises or something else is happening

[18:40] <masak> someone who did a convertor from Parse::RecDescent to Perl 6 would hit the following roadblock: the data hierarchies returned (in %/ and $/, respectively) are different, and automatically porting access into them is probably Hard.

[18:41] <timotimo> aaw :(

[18:41] <timotimo> is there something that's inherently better about the RecDescent structure?

[18:42] *** parsus joined
[18:43] <masak> yes, I felt that when I was using it.

[18:43] <masak> but it was a long time ago.

[18:47] *** zakharyas left
[18:47] <timotimo> it could be possible to build a recdescent-compatible parser in nqp, no?

[18:47] *** dwarring joined
[18:53] *** denis_boyun_ joined
[18:56] <nwc10> timotimo: yes, until you get to this bit: https://metacpan.org/pod/Parse::RecDescent#Actions

[18:56] <nwc10> An action is a block of Perl code which is to be executed (as the block of a do statement) when the parser reaches that point in a production.

[18:56] <nwc10> so you're getting to V5 territory

[18:56] <nwc10> but it might just fly

[18:58] *** denis_boyun___ joined
[18:58] *** denis_boyun_ left
[19:00] <nwc10> in that, it might stand a chance as a 90% solution, as my hunch is that the code within typical actions wouldn't be excessively "funky", so stands a fighting chance of being parsed by V5

[19:00] <masak> aye.

[19:01] <masak> I'm bummed that we don't have a good story for re-entrant regex matching, whether in code blocks in regexes or in action methods for grammars.

[19:01] <masak> at least one of us should have seen that one coming. I believe the spec is entirely silent on the matter.

[19:02] *** atroxaper joined
[19:04] *** denis_boyun___ left
[19:04] <nwc10> masak: which means that the default is "like Perl 5 does", which is, oh, wait...

[19:04] <nwc10> :-)

[19:06] *** atroxaper left
[19:14] *** parsus left
[19:16] <PerlJam> somethign that turned the grammary bits of a P::RD grammar into a P6 grammar and stubbed out places where code should go would be a good start probably.

[19:16] <PerlJam> then all we'd need would be a good p5 -> p6 converter  ;)

[19:17] <segomos_> jnthn: is there a limit to the number of threads in the queue?

[19:19] <PerlJam> (or, as soon as v5 is fully formed, we'd just copy the p5 code block directly into the p6 code block with a "use v5;" at the front

[19:19] <PerlJam> )

[19:19] *** raiph joined
[19:21] <[Coke]> I will have sporadic access to internet for about 2 weeks starting saturday. Please don't fret if you don't see the daily updates getting pushed (they're still running)

[19:22] <[Coke]> I'll try to make sure too many don't pile up

[19:22] *** pdcawley left
[19:22] <FROGGS> [Coke]++

[19:25] <masak> ++[Coke]

[19:28] *** telex left
[19:30] *** telex joined
[19:31] *** sqirrel left
[19:32] *** donaldh joined
[19:34] * moritz hopes that spotty internet is caused by vacation

[19:45] <[Coke]> \o/

[19:47] *** donaldh left
[19:52] *** brrt joined
[19:56] *** zakharyas joined
[20:07] *** dmol left
[20:21] *** brrt left
[20:22] *** brrt joined
[20:25] *** cogno joined
[20:26] *** cogno is now known as Guest94944

[20:30] <vendethiel> suspects : Guest94944

[20:30] <vendethiel> (,)

[20:31] *** Guest94944 is now known as cognome

[20:35] <timotimo> hoelzro: glad to see your name pop up in commit notifications again :D

[20:41] <[Coke]> hoelzro++ thanks!

[20:44] *** anaeem1 left
[20:45] <hoelzro> timotimo: hopefully it'll be a more common occurence in the near future =)

[20:45] *** vendethiel left
[20:45] <hoelzro> I'm finishing up a project now, and my next one will be a Perl 6 one

[20:46] *** vendethiel joined
[20:46] <timotimo> :3

[20:46] <timotimo> lovely

[20:48] <FROGGS> \o/

[20:50] *** jnap left
[20:51] <FROGGS> panda search --github --cpan Inline

[20:51] <FROGGS> Resources on github:

[20:51] <FROGGS>   Inline                   1.0.0      use C-code from within Perl

[20:51] <FROGGS> Resources on CPAN:

[20:51] <FROGGS>   Inline                   v1         

[20:51] <FROGGS> \o/ also :o)

[20:53] <hoelzro> nice

[20:53] <hoelzro> FROGGS++

[20:53] <jnthn> \o/

[20:54] <FROGGS> had to pull in NativeCall, Compress::Zlib and HTTP::UserAgent into panda for that though

[20:55] <FROGGS> now I need to implement installing from CPAN (which is not much work left), and then I need to convince tadzik++ :o)

[20:56] <jnthn> Could we use Panda to install the things it needs to install from CPAN? :)

[20:56] *** treehug8_ joined
[20:56] <FROGGS> hehe

[20:57] *** colomon left
[20:57] *** aindilis joined
[20:58] <FROGGS> like Shell::Command it must be in its repo, or..., we hardcode the url of the tarballs and hope there is a wget and gzip tool on the machine

[20:58] <FROGGS> :o)

[20:58] *** zakharyas left
[20:59] *** colomon joined
[20:59] *** treehug88 left
[21:01] *** cognome left
[21:03] *** atroxaper joined
[21:03] *** cognome joined
[21:04] *** btyler_ joined
[21:06] *** skids left
[21:06] *** btyler left
[21:08] *** atroxaper left
[21:08] *** cognome left
[21:12] *** cognonome joined
[21:15] *** vendethiel left
[21:17] *** colomon left
[21:18] *** cognonome left
[21:18] *** vendethiel joined
[21:19] *** kurahaupo joined
[21:20] *** kaare_ left
[21:20] *** spider-mario left
[21:22] *** japhb_ left
[21:25] <FROGGS> rakudo star @moarvm would be clean when this PR get applied: https://github.com/cosimo/perl6-lwp-simple/pull/33

[21:25] *** japhb_ joined
[21:27] <moritz> FROGGS: merged.

[21:28] <FROGGS> \o/

[21:28] <FROGGS> moritz: https://github.com/cosimo/perl6-lwp-simple/pull/32 :D

[21:28] <FROGGS> moritz++ btw

[21:28] *** bluescreen10 joined
[21:29] <FROGGS> I always forget that you have a commit bit there

[21:29] *** bluescreen100 joined
[21:33] *** SevenWolf joined
[21:40] *** BenGoldberg joined
[21:44] * moritz too

[21:45] *** amirite left
[21:45] *** donaldh joined
[21:45] *** Ben_Goldberg joined
[21:45] *** BenGoldberg left
[21:45] *** Ben_Goldberg is now known as BenGoldberg

[21:54] *** dmol joined
[21:56] *** treehug8_ left
[21:56] <psch> neither valgrind nor ASAN nor trying to follow what happens in memory help so far - 32bit moar can't handle Scalar as a type object for reasons beyond my current understanding...

[21:57] *** bluescreen100 left
[21:57] *** bluescreen10 left
[21:57] <psch> i'll get myself a 64bit vm for things that aren't trying to figure out that segfault i think

[21:57] <FROGGS> psch: a few minutes ago jnthn++ fixed an issue about istype optimizations...

[21:58] <FROGGS> so you could pull and make install MoarVM, without to reinstall nqp or rakudo

[21:58] <FROGGS> without the need to*

[21:59] <psch> FROGGS: i'll pull and rebuild, thanks for the heads-up

[21:59] <FROGGS> psch: if that does not help... can you no-paste a code snippet that shows the problem? I have a 32bit VM somewhere

[22:00] <psch> https://gist.github.com/peschwa/863b4d839e0024388052 there's a bunch of stuff i tried here

[22:01] <FROGGS> Invalid read of size 4 <-- that is interesting

[22:01] <FROGGS> I'll take a look tomorrow... gnight

[22:02] <psch> thanks FROGGS++, it's definitely beyond my knowledge of moar and c in general

[22:06] <jnthn> psch: Please try applying this patch to moar: https://gist.github.com/jnthn/c885ee5263406d17e3d0

[22:08] <jnthn> psch: Actually, updated version there now

[22:10] *** kivutar left
[22:11] <psch> jnthn: the first version fixed the most basic case, i.e. 'say Scalar'

[22:11] <psch> i'm building with the current one right now

[22:11] <psch> i guess i'll run spectest now?

[22:12] <jnthn> Can do; I've got a run going here too

[22:12] <psch> welp, it's gonna be some 15 minutes or so for me

[22:15] <psch> i'll report about that tomorrow though, now's sleep &

[22:16] <jnthn> Well, Moar release is now-ish, but if this patch looks good for my run I'll include it.

[22:17] <psch> oh, alright, if you need my test results i can stay up a bit

[22:17] <psch> i gotta rebuild rakudo too though, i'm a bit behind there. e.g. the $*PROGRAM_NAME deprec didnt arrive here yet

[22:32] *** skids joined
[22:32] *** btyler_ left
[22:32] <jnthn> psch: OK. It looked good here, fwiw.

[22:40] *** MilkmanDan left
[22:41] *** MilkmanDan joined
[22:47] *** xragnar_ joined
[22:47] *** xragnar left
[22:47] *** xragnar_ is now known as xragnar

[22:51] *** nebuchad` joined
[22:51] *** colomon joined
[22:52] *** nebuchadnezzar left
[22:55] *** brrt left
[23:01] <masak> 'night, #perl6

[23:02] *** dmol left
[23:02] <psch> g'night masak 

[23:02] <psch> jnthn: fair to say 15 minutes was a bad guess; i'm in S14 now, looks clean afaict

[23:03] *** colomon left
[23:03] <jnthn> psch: OK, thanks

[23:03] <jnthn> psch: I think that's enough to know.

[23:03] *** ivanshmakov left
[23:04] <psch> alright, i'll leave it running and check back tomorrow but will be afk for now, night o/

[23:06] *** ivanshma` joined
[23:06] <jnthn> 'night

[23:12] *** Rix joined
[23:16] <timotimo> Yay for glowing bear

[23:16] *** Alula_ left
[23:17] *** Alula_ joined
[23:22] *** bcode left
[23:24] *** bcode_ joined
[23:25] *** xragnar_ joined
[23:25] *** xragnar left
[23:25] *** xragnar_ is now known as xragnar

[23:26] *** donaldh left
[23:27] *** bcode_ is now known as bcode

[23:28] *** renormalist joined
[23:40] *** MilkmanDan left
[23:41] *** MilkmanDan joined
[23:43] *** araujo left
[23:44] *** araujo joined
[23:45] *** hoverboard left
[23:45] *** japhb joined
[23:57] *** prevost left
