[00:06] *** dayangkun joined
[00:40] *** cognominal_ left
[00:41] *** aindilis joined
[00:42] *** _slade_ joined
[00:47] *** araujo left
[00:48] *** djanatyn left
[00:48] *** araujo joined
[00:55] *** djanatyn joined
[00:56] *** Tene joined
[00:56] *** Tene left
[00:56] *** Tene joined
[01:01] *** _sri left
[01:01] *** _sri joined
[01:01] *** virtualsue left
[01:02] *** grettis left
[01:08] *** xenoterracide_ joined
[01:13] *** colomon left
[01:14] *** colomon joined
[01:17] *** grettis joined
[01:21] *** Mso150 joined
[01:22] *** japhb joined
[01:22] *** firefish5000 joined
[01:41] *** grettis left
[01:44] *** cognominal joined
[01:52] *** Mso150 left
[01:57] *** firefish5000 left
[02:06] *** firefish5000 joined
[02:09] *** mauke_ joined
[02:09] *** chenryn joined
[02:10] *** xenoterracide_ left
[02:10] *** mauke left
[02:13] *** mauke_ is now known as mauke

[02:17] *** cognominal left
[02:25] *** camelia left
[02:47] *** chenryn left
[02:48] *** noganex joined
[02:48] *** chenryn joined
[02:51] *** xenoterracide_ joined
[02:51] *** noganex_ left
[02:55] *** yeahnoob joined
[02:57] *** xenoterracide_ left
[02:59] *** Mouq joined
[03:00] *** yeahnoob left
[03:06] *** b2gills left
[03:09] *** b2gills joined
[03:09] *** kurahaupo left
[03:13] *** mauke_ joined
[03:14] *** mauke left
[03:16] *** mauke_ is now known as mauke

[03:17] *** yeahnoob joined
[03:17] *** notfix left
[03:28] *** chenryn left
[03:34] *** fhelmberger joined
[03:39] *** fhelmberger left
[03:49] *** xfix joined
[03:57] *** BenGoldberg left
[03:59] *** chenryn joined
[03:59] *** araujo left
[04:03] *** ptc_p6 joined
[04:07] *** yeahnoob left
[04:08] *** yeahnoob joined
[04:11] *** cxreg left
[04:12] *** cxreg joined
[04:17] *** chenryn left
[04:23] *** _sri left
[04:23] *** _sri joined
[04:25] *** [Sno] left
[04:26] *** ptc_p6 left
[04:27] *** kaare_ joined
[04:38] *** Celelibi joined
[04:45] <Mouq> I don't understand https://github.com/perl6/nqp/issues/194 but I'm hoping if I paste the link here more people will see it

[04:46] *** ggoebel11111116 joined
[04:48] *** ggoebel11111115 left
[05:07] *** Louis__ joined
[05:07] *** Louis__ left
[05:07] *** xenoterracide_ joined
[05:08] *** Louis1951 joined
[05:10] *** [Sno] joined
[05:12] *** chenryn joined
[05:16] *** Mouq left
[05:22] *** Louis1951 left
[05:26] *** xenoterracide_ left
[05:35] *** MilkmanDan joined
[05:42] *** bjz joined
[05:51] *** rindolf joined
[06:05] *** chenryn left
[06:15] *** chenryn joined
[06:25] *** chenryn_ joined
[06:25] *** chenryn left
[06:27] *** kaleem joined
[06:35] *** _slade_ left
[06:42] *** Mso150 joined
[06:43] *** Flogator joined
[06:43] *** davido_home left
[06:44] *** davido_home joined
[06:45] *** esaym153 joined
[06:45] *** rurban joined
[06:51] *** skarn joined
[06:54] *** xfix is now known as notfix

[06:55] *** FROGGS joined
[06:57] *** zakharyas joined
[07:01] <dalek> roast: 6db87b2 | usev6++ | S32-exceptions/misc.t:

[07:01] <dalek> roast: Cleanup description of passing test for RT #122645

[07:01] <dalek> roast: review: https://github.com/perl6/roast/commit/6db87b2a70

[07:01] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122645

[07:10] *** kaleem left
[07:10] *** kaleem joined
[07:12] *** darutoko joined
[07:17] *** ghostlines joined
[07:27] *** chenryn_ left
[07:29] *** chenryn_ joined
[07:31] <dalek> rakudo/parrot-icu-required: 2b6cb52 | moritz++ | / (2 files):

[07:31] <dalek> rakudo/parrot-icu-required: Make ICU a hard requirement for parrot

[07:31] <dalek> rakudo/parrot-icu-required: 

[07:31] <dalek> rakudo/parrot-icu-required: Perl 6 is inherently a Unicode-aware language, and parrot without ICU is not.

[07:31] <dalek> rakudo/parrot-icu-required: We seem to have trouble maintaining tests that do not depend on

[07:31] <dalek> rakudo/parrot-icu-required: Unicode features, which tells us that not having Unicode is not acceptable.

[07:31] <dalek> rakudo/parrot-icu-required: review: https://github.com/rakudo/rakudo/commit/2b6cb523bd

[07:32] <FROGGS> nice :o)

[07:32] <moritz> note that this is in a branch, to be merged after this months release

[07:32] <FROGGS> moritz: now I wonder how that will work out on windows...

[07:33] <moritz> FROGGS: well, folks need ICU. Or use MoarVM

[07:33] <FROGGS> yes, I think it is possible to have ICU on windows, but it was hard to set up IIRC

[07:34] <lizmat> FROGGS moritz /o

[07:35] <moritz> \o lizmat 

[07:35] *** fhelmberger joined
[07:36] <sergot> hi o/

[07:37] *** thou left
[07:38] *** virtualsue joined
[07:39] *** fhelmberger left
[07:46] *** Flogator left
[07:47] *** Flogator joined
[07:47] <FROGGS> hi lizmat, sergot :o)

[07:48] <FROGGS> hopefully I'll have a properly working internet connection again by this evening... then I'll have the chance to care about a few things again

[07:53] *** davido_home left
[07:54] *** davido_home joined
[07:55] *** chenryn_ left
[07:58] <moritz> itz: the first link on pl6net.org (to timotimo++'s post) is a 404

[08:04] <lizmat> moritz: pl6net.org ??

[08:05] <lizmat> pl6anet.org  :-)

[08:05] <moritz> lizmat: yes, sorry

[08:05] <lizmat> itz: some RSS feed mangling issue ?

[08:05] <lizmat> http://p6weekly.wordpress.com/2014/10/20/2014-41-42-apw-glr-progress-perl%E2%80%AF6-ide/  is the correct link

[08:05] *** kjs_ joined
[08:07] <moritz> btw, timotimo++ for the post

[08:08] *** Akagi201 joined
[08:12] <dalek> roast: 7050e78 | usev6++ | S04-phasers/end.t:

[08:12] <dalek> roast: Add test for RT #122355

[08:12] <dalek> roast: review: https://github.com/perl6/roast/commit/7050e78bc7

[08:12] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122355

[08:15] *** SamuraiJack joined
[08:17] *** ptc_p6 joined
[08:22] <dalek> roast: ee544c6 | (Elizabeth Mattijsen)++ | S02-types/baghash.t:

[08:22] <dalek> roast: Unfudge 2 passing TODO's for JVM

[08:22] <dalek> roast: review: https://github.com/perl6/roast/commit/ee544c6d51

[08:23] <dalek> rakudo/nom: 3687508 | (Elizabeth Mattijsen)++ | src/core/Baggy.pm:

[08:23] <dalek> rakudo/nom: Fix breakage on JVM in the most awful way

[08:23] <dalek> rakudo/nom: 

[08:23] <dalek> rakudo/nom: By conditionally reverting to the map {} wrapper approach of before.  YUCK!

[08:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/368750812d

[08:24] *** chenryn_ joined
[08:24] *** fhelmberger joined
[08:26] <kjs_> timotimo++ #http://p6weekly.wordpress.com/

[08:31] *** dakkar joined
[08:34] *** camelia joined
[08:35] *** ChanServ sets mode: +v camelia

[08:39] *** kjs_ left
[08:53] *** Ven joined
[08:56] *** kurahaupo joined
[08:58] *** Mso150 left
[09:04] *** datums_nb joined
[09:08] *** thou joined
[09:11] <Ven> o/, #perl6

[09:11] <FROGGS> hi Ven

[09:12] *** TuxCM left
[09:12] *** thou left
[09:17] *** TuxCM joined
[09:18] *** rmgk_ joined
[09:18] *** rmgk is now known as Guest32479

[09:18] *** Guest32479 left
[09:18] *** rmgk_ is now known as rmgk

[09:19] *** SamuraiJack left
[09:19] *** datums_nb left
[09:20] *** datums_nb joined
[09:20] *** SamuraiJack joined
[09:20] *** kjs_ joined
[09:21] *** datums_nb left
[09:22] *** datums_nb joined
[09:23] *** datums_nb left
[09:23] *** datums_nb joined
[09:29] *** leont joined
[09:30] *** datums_nb left
[09:31] *** datums_nb joined
[09:31] *** datanom_nb joined
[09:31] *** datanom_nb left
[09:31] *** datums_nb left
[09:31] *** datums_nb joined
[09:36] *** yeahnoob left
[09:38] *** SamuraiJack left
[09:42] <rurban> Released parrot 6.9.0 (supported) without the coro returncc label regressions. Next month

[09:45] <Ven> rurban++

[10:00] *** chenryn_ left
[10:03] *** sftp joined
[10:03] *** datums_nb left
[10:05] <mathw> I was going to give a Perl 6 talk to Nottingham.pm this week. I've had to postpone it, but I thought you'd all enjoy the announcement: "It seems our Perl 6 talk will not be ready before Christmas"

[10:07] <Ven> :P

[10:09] *** FROGGS left
[10:09] *** chenryn_ joined
[10:09] *** prevost joined
[10:09] <dalek> roast: f2f0ea1 | usev6++ | S05-grammar/parse_and_parsefile.t:

[10:09] <dalek> roast: Add test for RT #116597

[10:09] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=116597

[10:09] <dalek> roast: review: https://github.com/perl6/roast/commit/f2f0ea1719

[10:13] *** camelia left
[10:16] *** camelia joined
[10:16] *** jack_rabbit left
[10:17] *** ChanServ sets mode: +v camelia

[10:23] *** datums_nb joined
[10:26] <dalek> roast: 20b3ee2 | usev6++ | S14-roles/basic.t:

[10:26] <dalek> roast: Unfudge test for RT #114380 for rakudo.jvm

[10:26] <dalek> roast: (after switching from eval_lives_ok to lives_ok)

[10:26] <dalek> roast: review: https://github.com/perl6/roast/commit/20b3ee28c4

[10:26] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=114380

[10:27] *** chenryn_ left
[10:30] *** chenryn_ joined
[10:34] *** FROGGS joined
[10:37] *** denis_boyun_ joined
[10:38] *** FROGGS left
[10:40] *** Akagi201 left
[10:48] *** chenryn_ left
[10:55] *** cognominal joined
[10:56] *** thou joined
[11:01] *** thou left
[11:02] *** datums_nb left
[11:09] *** Akagi201 joined
[11:16] <dalek> roast: bab9270 | usev6++ | S06-macros/quasi-blocks.t:

[11:16] <dalek> roast: Add test for RT #115500, unfudge passing tests for rakudo.jvm

[11:16] <dalek> roast: review: https://github.com/perl6/roast/commit/bab9270ab7

[11:16] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=115500

[11:27] *** brrt joined
[11:28] *** FROGGS joined
[11:36] *** FROGGS_ joined
[11:37] *** Alula left
[11:37] *** camelia left
[11:37] *** prevost left
[11:37] *** dakkar left
[11:37] *** virtualsue left
[11:37] *** ghostlines left
[11:37] *** japhb left
[11:37] *** dayangkun left
[11:37] *** pdcawley left
[11:37] *** ponbiki left
[11:37] *** muraiki left
[11:37] *** itz left
[11:37] *** lizmat left
[11:37] *** retupmoca joined
[11:37] *** Rounin joined
[11:37] *** japhb joined
[11:37] *** itz joined
[11:37] *** timotimo joined
[11:37] *** dakkar joined
[11:37] *** virtualsue joined
[11:37] *** muraiki joined
[11:37] *** prevost joined
[11:37] *** pdcawley joined
[11:37] *** lizmat joined
[11:38] *** ghostlines joined
[11:38] *** camelia joined
[11:39] *** ChanServ sets mode: +v camelia

[11:40] *** notfix is now known as xfix

[11:40] *** FROGGS left
[11:43] *** Meteo_ joined
[11:43] *** jnthn joined
[11:43] *** ponbiki joined
[11:43] *** ponbiki is now known as Guest50117

[11:44] <brrt> \o jnthn

[11:46] *** Meteo_ left
[11:46] *** Meteo_ joined
[11:47] <jnthn> o/

[11:47] <yoleaux> 20 Oct 2014 21:55Z <lizmat> jnthn: suggestions about take failing on jvm? https://gist.github.com/lizmat/ab00347d5cc44a23c65b

[11:47] <yoleaux> 20 Oct 2014 21:56Z <lizmat> jnthn: code is from src/core/Baggy.pm

[11:47] <yoleaux> 20 Oct 2014 22:03Z <lizmat> jnthn: the gist with the sub/private method codegen issue: https://gist.github.com/lizmat/16382a07084c5bb33d19

[11:49] *** rurban left
[11:50] <jnthn> m: role R { method !m { say 'ok' } }; class C does R { method x() { self!m } }; C.x

[11:50] <camelia> rakudo-moar 3975e1: OUTPUT«(timeout)»

[11:51] <jnthn> pos...

[11:51] <jnthn> Hm, but that works locally. So it's not so simple as "private method in role"

[11:51] *** kaleem left
[11:51] <jnthn> m: role R { method !m { say 'ok' }; method x() { self!m } }; class C does R { }; C.x

[11:51] *** kaleem joined
[11:51] <camelia> rakudo-moar 3975e1: OUTPUT«(timeout)»

[11:52] <moritz> jnthn: note that camelia produces random timeouts

[11:52] <jnthn> moritz: Yes :(

[11:52] <jnthn> Anyway, both of those work locally, so it must be a little more involved.

[11:52] *** kaleem left
[11:53] <lizmat> jnthn: I think parameter passing is involved

[11:54] <lizmat> jnthn: also, the private method is only referred to in the role, not outside of it

[11:56] <lizmat> m: Role R { method !m(@a) { say "ok: @a[]" }; method x() { self!m(<a b c>) } }; class C does R { }; C.x  # huh ?

[11:56] <camelia> rakudo-moar 3975e1: OUTPUT«(timeout)»

[11:57] <lizmat> locally: $ 6 'Role R { method !m(@a) { say "ok: @a[]" }; method x() { self!m(<a b c>) } }; class C does R { }; C.x'

[11:57] <lizmat> Useless declaration of a has-scoped method in mainline (did you mean 'my method m'?)

[11:57] <lizmat> ===SORRY!=== Error while compiling -e

[11:57] <lizmat> Private method call to m must be fully qualified with the package containing the method

[11:57] <jnthn> Ah. Interesting.

[11:58] <jnthn> Wait, s/Role/role/?

[11:58] <lizmat> oops

[11:59] <lizmat> works fine with s/R/r  :-(

[12:00] <Ven> m: lass A {}; say A.new

[12:00] <camelia> rakudo-moar 3975e1: OUTPUT«(timeout)»

[12:00] <Ven> eh.

[12:00] <lizmat> m: my %h; role R { method !m(@a) { say "ok: @a[]" }; method x() { self!m(%h.values) } }; class C does R { }; C.x

[12:00] <lizmat> No such method 'item' for invocant of type '$?CLASS'

[12:00] <lizmat>   in method message at src/gen/m-CORE.setting:13317

[12:00] <lizmat>   in method m at -e:1

[12:00] <lizmat>   in method x at -e:1

[12:00] <lizmat>   in block <unit> at -e:1

[12:00] <camelia> rakudo-moar 3975e1: OUTPUT«(timeout)»

[12:00] <Ven> "lass A{}" gives (locally) "undeclared name A" which is really weird

[12:01] <lizmat> jnthn: it appears to be related to the type of parameter you pass

[12:01] <lizmat> in my code, it is the .values of a hash

[12:02] *** Meteo__ joined
[12:03] *** rurban joined
[12:04] <jnthn> lizmat: Weird.

[12:05] <dalek> roast: 7896054 | usev6++ | S03-operators/bit.t:

[12:05] <dalek> roast: Add test for RT #121810

[12:05] <dalek> roast: review: https://github.com/perl6/roast/commit/7896054a35

[12:05] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121810

[12:05] <lizmat> it's trying to throw an X::TypeCheck::Binding error

[12:06] *** Meteo_ left
[12:06] <leont> Is there a good place for Perl6 module toolchain discussions? I think panda's bugtracker is the only place I've seen so far.

[12:07] <lizmat> most discussions happen here (and thus in the backlog)

[12:07] <jnthn> lizmat: Odd...I don't immediately have an idea about why

[12:07] <lizmat> the $?CLASS seems weird: like it's trying to take the name instead of the vakue ?

[12:07] <lizmat> *value ?

[12:08] <jnthn> Well, that would indicate it's confusing a type variable with its instantiation

[12:12] <leont> irc seems a bit ephemeral, I guess I should get myself a bouncer for freenode too

[12:14] <lizmat> http://irclog.perlgeek.de/perl6/today is your friend

[12:21] *** guru joined
[12:21] <jnthn> dinner &

[12:21] *** guru is now known as Guest13644

[12:22] *** woolfy left
[12:23] *** Guest13644 is now known as ajr_

[12:24] <lizmat> commute to NRPM&

[12:24] *** lizmat left
[12:26] *** Alula joined
[12:33] *** rurban left
[12:41] <dalek> Perlito: 2547cec | (Shlomi Fish)++ | TODO-perlito5:

[12:41] <dalek> Perlito: Remove trailing space.

[12:41] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/2547cec1d4

[12:45] *** thou joined
[12:46] *** yeahnoob joined
[12:49] *** anaeem1 joined
[12:49] *** thou left
[12:55] *** anaeem1 left
[13:03] *** FROGGS_ left
[13:05] *** ptc_p6 left
[13:18] *** salv0 left
[13:19] *** FROGGS joined
[13:29] *** cognominal left
[13:31] *** anaeem1 joined
[13:34] <Tekk_> really stupid question since this is my first module. What would be an appropriate name for a module which is specifically pure perl? Relative to one that just binds up to a C library

[13:35] <PerlJam> Tekk_: why should the implementation details affect the name?

[13:35] <BinGOs> ::ButPurePerl ?

[13:36] <Tekk_> PerlJam: because the one that wraps the C library already has the nice name :P

[13:36] <tadzik> Tekk_: what module is that?

[13:36] <PerlJam> Tekk_: So?

[13:36] <Tekk_> I wasn't sure if there was some convention for that

[13:36] <Tekk_> tadzik: MPD

[13:36] <moritz> Tekk_: in the perl 5 community, they often append ::PP

[13:36] <tadzik> Tekk_: feel free to just hijack the name MPD

[13:36] <Tekk_> moritz: thanks

[13:36] <moritz> JSON::PP, Text::CSV::PP etc.

[13:36] <tadzik> Tekk_: I think that module is mine :P

[13:36] <tadzik> Tekk_: I can rename mine to MPD::libmpd

[13:37] <moritz> yes, tadzik is right.

[13:37] <Tekk_> tadzik: oh, it is :)

[13:37] <moritz> and the current MPD isn't terribly active

[13:37] <moritz> (last patch: 2012)

[13:37] <tadzik> to put it mildly :)

[13:37] <moritz> April 2012, to be more precise

[13:37] <Tekk_> yeah, that's why I was working on mine. I figure it's a decent next step after playing around yesterday

[13:37] <PerlJam> Tekk_++

[13:37] <Tekk_> MPD::PP works

[13:40] <moritz> Tekk_: go with MPD. For sombody who doesn't know what that is, that's already obscure enough

[13:41] <PerlJam> Tekk_: or you could spell out the name (and keep an MPD alias for the lazy)

[13:41] <tadzik> Tekk_: I'll rename mine to MPD::libmpd, consider MPD namespace yours :)

[13:41] <Tekk_> tadzik: sure

[13:41] <Tekk_> PerlJam: I'm not sure about that. If you're writing an mpd client you probably already know what mpd is, given that it's the binary name :)

[13:43] *** anaeem1 left
[13:43] *** anaeem1_ joined
[13:43] <PerlJam> maybe.  Or maybe I don't know what it is but I want to write a Perl program that acts as a music player daemon ... but wait, maybe there's already one out there.    

[13:44] <PerlJam> Would I search for MPD or something else?  :)

[13:44] <Tekk_> PerlJam: it's not for acting as a music player daemon, it's for interfacing with the existing one. I do kinda see your point though

[13:45] <Tekk_> does anyone have a link to socket documentation? I can never find anything on docs.perl6.org

[13:45] * PerlJam suddeenly wonders if the META.json spec includes keywords.

[13:45] <moritz> Tekk_: there is none yet :(

[13:45] <Tekk_> moritz: that would be why I have such a hard time finding it then :)

[13:46] <Tekk_> documentation as a whole seems pretty lacking, unfortunately

[13:46] <moritz> Tekk_: http://perlcabal.org/syn/S32/IO.html

[13:46] <moritz> the specific is your best bet, at the moment

[13:47] <moritz> unless you want to read the source code

[13:47] <Tekk_> I was trying to look in the http client lib but couldn't find it. the spec should help at least

[13:47] * PerlJam notes that IO::Socket is in the "Here Be Dragons" section  :)

[13:47] <Tekk_> but apparently now I need to go get a chair massage, so I'll bbl

[13:49] *** anaeem1_ left
[13:49] <moritz> Tekk_: https://github.com/supernovus/perl6-http-client/

[13:49] *** cognominal joined
[13:51] <PerlJam> Is github having problems or is it just me?  (github URLs seem to take a long time to load)

[13:53] <PerlJam> Ah ... apparently it's just me.   I just read an email from our network people that there's a problem at our ISP

[13:53] *** anaeem1 joined
[13:54] <Tekk_> hmm...rakudo on moarvm doesn't seem to have io::socket for me..

[13:56] <moritz> Tekk_: you don't need to 'use' it

[13:56] <moritz> Tekk_: it's all built-in

[13:57] <Tekk_> oh

[13:57] <Tekk_> you can tell how much I've used perl 5 and 6 :P

[13:58] <moritz> Tekk_: and you can tell you're not the first one to fall into that particular trap :-)

[14:03] <[Coke]> Is anyone other than me using t/spec/test_summary ?

[14:05] <moritz> [Coke]: iirc pmichaud++ used it

[14:05] <bartolin> [Coke]: I am, but only for my clone of your perl6-roast-data.

[14:05] <moritz> though it's been a while :-)

[14:06] <[Coke]> ok. I am pondering 1) making it work with -j and 2) rewriting it in perl6.

[14:07] <bartolin> for me, that's absolutely no problem

[14:07] <[Coke]> the thought being that if someone needs to run it on their new implementation, they can use an installed rakudo-m or something.

[14:07] <moritz> [Coke]: at that point you should consider doing it as a frontend for leont++'s TAP::Parser module

[14:07] <[Coke]> moritz: excellent point.

[14:09] <[Coke]> TAP::Parser isn't in the ecosystem.

[14:09] *** thou joined
[14:09] <leont> It is, as TAP::Harness

[14:10] <moritz> sorry, forgot the exact name, and guessed wrong

[14:10] <[Coke]> we need a better ecosystem search! ;)

[14:10] <[Coke]> that could go in the meta info and be searchable.

[14:17] <TimToady> good new world morning

[14:17] <colomon> o/

[14:18] <flussence> .oO( «use $some-builtin-object» seems like LHF for a better error message )

[14:19] *** nebuchadnezzar left
[14:20] *** ajr_ left
[14:20] *** guru joined
[14:21] *** guru is now known as ajr_

[14:23] *** anaeem1 left
[14:24] *** [Sno] left
[14:28] *** chenryn joined
[14:29] *** yeahnoob left
[14:34] *** dayangkun joined
[14:43] <arnsholt> o/

[14:44] <Ven> \o arnsholt 

[14:45] *** ghostlines left
[14:50] *** ghostlines joined
[14:51] *** ibo2perl6 joined
[14:51] <ibo2perl6> o/

[14:52] <FROGGS> hi ibo2perl6 

[14:53] <ibo2perl6> I'm trying to install GTK::Simple with panda. In the tests I get a "Cannot locate native library 'libgtk-3.so'" though I do have the lib

[14:54] <Ven> hehehe

[14:55] <ibo2perl6> how can I look into the source of an downloaded module? does panda store it somewhere?

[15:02] *** araujo joined
[15:02] *** araujo left
[15:02] *** araujo joined
[15:02] <PerlJam> Doesn't panda have a --look option or something to drop you in a directory with a copy of the source just like CPAN clients?

[15:03] <PerlJam> If not, that sounds like it would be a nice feature  :) 

[15:03] *** nebuchadnezzar joined
[15:06] *** molaf joined
[15:06] <ibo2perl6> PerlJam: Yes, that would be very nice. It seems to just delete everything if the tests don't pass.

[15:06] <Ven> you can use --no-test to .. not test it :)

[15:09] *** SamuraiJack joined
[15:09] *** chenryn left
[15:10] <ibo2perl6> Ven: that was --notests.  Yes, then I could install it. But if I try to run the examples I still get the errors: Cannot locate native library 'libgtk-3.so'

[15:11] <Ven> ibo2perl6: right. once youv'e figured that one out, you tell me. I've already spent ~6hours trying to fix it, and with timotimo right next to me

[15:11] <ibo2perl6> Ven: So I guess I am missing something.

[15:11] <Ven> I am on osx, if that helps

[15:12] <ibo2perl6> I am debian jessie amd64 

[15:12] <ibo2perl6> Ven: thats why you were laughing?

[15:12] <Ven> ibo2perl6: because I feel your pain

[15:14] <TimToady> maybe this is one of those batteries that would be better tested if it were included

[15:17] *** chenryn joined
[15:18] *** virtualsue left
[15:23] *** _slade_ joined
[15:25] *** Ven left
[15:25] *** slavik joined
[15:25] *** ghostlines left
[15:26] *** xfix is now known as notfix

[15:30] *** brrt left
[15:33] *** zakharyas left
[15:34] *** [Sno] joined
[15:37] <colomon> m: say -5.5 < 1e-10

[15:37] <camelia> rakudo-moar 3975e1: OUTPUT«(timeout)»

[15:37] <colomon> :\

[15:39] *** slavik left
[15:40] *** slavik joined
[15:41] *** denis_boyun_ left
[15:51] *** chenryn left
[15:53] *** chenryn joined
[15:58] <Tekk_> are you actually stuck doing read/write on sockets rather than being able to print and slurp?

[16:01] *** lizmat joined
[16:01] <Tekk_> write is fine, but read seems a touch annoying..

[16:01] *** dayangkun left
[16:03] <jnthn> m: say IO::Socket::INET.^methods

[16:03] <jnthn> I'm sure there's a string interface too...

[16:03] <camelia> rakudo-moar 3975e1: OUTPUT«(timeout)»

[16:03] <jnthn> Looks like send/recv.

[16:04] <lizmat> I guess I will have to spec IO::Socket the  as well  :-(

[16:05] <Tekk_> lizmat: yeah, i'm looking in the spec and not seeing anything but, that's why I asked

[16:05] <lizmat> working on S16/S32:IO was quite exhausting...  

[16:05] <lizmat> don't expect anything there for this release

[16:06] <b2gills> m: my enum Phonetic (:Alpha<A>, <Bravo>, <Charlie Delta Echo>, :Zulu<Z>, <Alpha-Alpha>); say Phonetic.^enum_values;

[16:06] <camelia> rakudo-moar 3975e1: OUTPUT«(timeout)»

[16:16] *** SamuraiJack left
[16:17] <b2gills> I think that bug is at https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Actions.nqp#L3342

[16:17] *** SamuraiJack joined
[16:18] <b2gills> It takes the <Charlie Delta Echo> as a single item, instead of 3 items.

[16:19] *** dayangkun joined
[16:20] *** dwarring left
[16:20] *** Mouq joined
[16:25] *** kaleem joined
[16:28] *** _slade_ left
[16:29] <timotimo> oh my ... compile-time flattening ...

[16:29] *** Mso150 joined
[16:30] *** treehug88 joined
[16:30] <lizmat> timotimo: or lack of it ?

[16:31] <timotimo> lack of it in this case

[16:31] <timotimo> i was just about to muse "i wonder if enum is early enough in the setting so that Positional would be missing" when i noticed, that this is actions. *then* i noticed, that there's probably enums *in* the setting itself

[16:34] *** chenryn left
[16:35] <moritz> enums are too late for Bool (because Bool is bootstrapped)

[16:35] <moritz> so Bool isn't a proper enum in rakudo

[16:36] <timotimo> oh

[16:38] *** kjs_ left
[16:42] <dalek> perl6-roast-data: 10264d0 | coke++ | / (5 files):

[16:42] <dalek> perl6-roast-data: today (automated commit)

[16:42] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/10264d0741

[16:43] *** dayangkun left
[16:44] <[Coke]> ^^ parrot is down to 3 failures. moar & moar-jit both exploded.

[16:44] <[Coke]> jvm at 12 failures.

[16:46] <colomon> …. exploded with 100% passes?

[16:46] <colomon> and isn't moar jit by default now?

[16:46] *** ajr_ left
[16:47] <[Coke]> yes, I'm specifically testing it without because not everyone has jit.

[16:47] <[Coke]> colomon: not sure what you're looking at: that commit message says that rakudo.moar-jit failed 175 tests, and rakudo.moar failed 112.

[16:48] <lizmat> the delete-adverb fail looks a lot like some of the core setting failures I get after some changes

[16:48] <[Coke]> I could rename thm to -jit and -nojit if that would help.

[16:48] <lizmat> of course, when run by itself, there is no issue?

[16:48] <[Coke]> and also because, like today, they fail differently.

[16:49] <colomon> [Coke]: looking at the percentage.  So moar has more fails but also more passes than jvm?

[16:49] <lizmat> [Coke]: fwiw, locally: All tests successful.

[16:49] <lizmat> Files=931, Tests=34002, 171 wallclock secs ( 9.23 usr  3.17 sys + 1014.88 cusr 155.92 csys = 1183.20 CPU)

[16:49] <colomon> percentage column, I mean

[16:50] <timotimo> colomon: moar has more features enabled

[16:50] <[Coke]> from the readme: 

[16:50] <[Coke]> Note - the percentage column shows the percentage of the implementations against each other for that day's run - so the highest number of passes is always 100%, and the others are in relation to that number. So, 100% doesn't mean "passes every spectest".

[16:50] <timotimo> we didn't port all of the async stuff to jvm yet and the jvm doesn't have our improved unicode database

[17:01] *** nagudaku joined
[17:02] *** nagudaku left
[17:06] <Mouq> m: my enum Phonetic «:Alpha<A> Bravo Charlie Delta Echo :Zulu<Z> Alpha-Alpha»; say Phonetic.^enum_values;

[17:06] <camelia> rakudo-moar 368750: OUTPUT«"Alpha" => "A", "Alpha-Alpha" => "AA", "Bravo Charlie Delta Echo" => "B", "Zulu" => "Z"␤»

[17:16] *** kjs_ joined
[17:19] *** fhelmberger left
[17:19] *** molaf left
[17:24] *** jack_rabbit joined
[17:24] *** dakkar left
[17:31] *** jac50 joined
[17:32] *** grettis joined
[17:32] <dalek> rakudo/nom: 6797fde | (Elizabeth Mattijsen)++ | src/core/Complex.pm:

[17:32] <dalek> rakudo/nom: Add MMD candidate for Complex.round

[17:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6797fde380

[17:34] <lizmat> m: [].rotate   # seems LTA error message

[17:34] <lizmat> Type check failed for return value; expected 'Int' but got 'Failure'

[17:35] *** kaleem left
[17:35] <camelia> rakudo-moar 368750: OUTPUT«(timeout)»

[17:35] <moritz> https://rt.perl.org/Public/Bug/Display.html?id=123016

[17:35] <moritz> is this really a bug?

[17:36] <moritz> I'd tend to say "no", but I'd like to hear other opinions too

[17:37] <vendethiel> moritz: well, if I override our equivalent of toString, I certainly expect it to get called

[17:38] <PerlJam> moritz: why do you think it's not a bug?

[17:40] <moritz> PerlJam: because there's no spec, for one

[17:40] <PerlJam> That is an *excellent* answer.  :)

[17:41] <moritz> I can see his point too

[17:41] <moritz> currently, the .gist fallback does some magic woodoo

[17:41] <moritz> it's not just the magic woodoo he expects

[17:42] * moritz tries a different magic gist, and re-spectests

[17:44] <moritz> but if it doesn't call .perl on its elements, it shouldn't look like .perl either

[17:47] *** guru joined
[17:48] *** guru is now known as Guest12465

[17:48] *** Guest12465 is now known as ajr_

[17:52] *** Mouq left
[17:53] *** smls joined
[17:54] *** Mouq joined
[17:55] *** Mouq left
[17:56] <PerlJam> moritz: After thinking about it a bit, I guess I lean towards agreeing with you that it is not a bug.

[17:57] <smls> Does Pair guarantee that the value is wrapped in an rw container? Like Array/Hash does?

[17:57] *** Sqirrel joined
[18:00] *** cognominal left
[18:00] <timotimo> ISTR discussion and a change regarding that vry thing

[18:01] <PerlJam> S02:1710

[18:01] <synopsebot> Link: http://perlcabal.org/syn/S02.html#line_1710

[18:02] <timotimo> i think there was a change regarding pairs and Hash.pairs allowing you to modify the hah

[18:02] <timotimo> hash

[18:02] <timotimo> hm, maybe that was for changing the key, not the value?

[18:02] <timotimo> i wish i'd remember

[18:02] *** ptc_p6 joined
[18:02] *** gfldex joined
[18:03] <smls> thanks

[18:10] *** dwarring joined
[18:12] <lizmat> FWIW, I think the key of a Pair is supposed to be immutable

[18:12] <lizmat> (it is, afaik)

[18:13] <lizmat> $ 6 '(a=>42).key = "b"'

[18:13] <lizmat> Cannot modify an immutable Str

[18:15] *** kjs_ left
[18:20] <timotimo> right, the key must be immutable

[18:21] <TimToady> that hash keys must be immutable does not necessarily imply that pair keys must be

[18:22] *** ptc_p6 left
[18:23] *** spider-mario joined
[18:23] <timotimo> if you want to use Pair as a generic tuple, right

[18:24] *** brrt joined
[18:24] <brrt> \o

[18:24] <brrt> masak: do you know if the slides / video from your 'goto statement considered awesome' are anywhere?

[18:25] * timotimo wants them, too

[18:28] *** onebitboy joined
[18:28] <bartolin> m: my (Str $a) = 1;

[18:29] <smls> I actually didn't see *any* P6 related videos from YAPC:EU get published :(

[18:29] <camelia> rakudo-moar 368750: OUTPUT«(timeout)»

[18:29] <timotimo> smls: yes, see the yapc::na website for info on that

[18:29] <timotimo> er

[18:29] <timotimo> yapc eu of course

[18:29] <timotimo> NB: talks from the main room Vitosha will take a little longer, as they had a much more complicated setup. We'll post here and on twitter as soon as they're ready!

[18:30] <bartolin> $ perl6 my (Str $a) = 1; say $a;

[18:30] <bartolin> 1

[18:30] <timotimo> yup

[18:30] <bartolin> Is that type check NYI?

[18:31] <timotimo> er

[18:31] *** brrt left
[18:31] <timotimo> that seems to be a signature bind instead of the regular assignment

[18:31] <timotimo> curious.

[18:31] <bartolin> It is parsed as a signature and 

[18:31] <bartolin> s/and//

[18:31] *** brrt joined
[18:32] *** SamuraiJack left
[18:32] <timotimo> yeah, without the ( ) it works

[18:32] <bartolin> yes, S02 even says that it is parsed as a signature. but the type check should be done, shouldn't it?

[18:32] * bartolin nods

[18:32] <timotimo> yes

[18:33] <timotimo> timo@schmetterling ~ [1]> perl6 -e 'my (Str $a) := \(1)'

[18:33] <timotimo> Type check failed in binding $a; expected 'Str' but got 'Int'

[18:36] * colomon has finished using the 2001 iMac for $work for now, and is back to trying to build rakudo-m on it.

[18:38] *** SamuraiJack joined
[18:38] <PerlJam> "2001 iMac"?  like pre-OSX?

[18:39] <bartolin> so list assignment is supposed to be handled differently in 'my ($a) = 1' vs. 'my $a; ($a) = 1'?

[18:40] <bartolin> (the first one is a handled as a signature, the second one as list assignment)

[18:42] <[Coke]> they had os x in 2001!

[18:42] <[Coke]> (barely)

[18:42] *** brrt left
[18:43] *** grondilu left
[18:44] *** grondilu joined
[18:45] *** khisanth_ joined
[18:47] <dalek> rakudo/nom: 4699b5a | moritz++ | lib/Test.pm:

[18:47] <dalek> rakudo/nom: [Test] avoid "Code object coerced to string"-warnings

[18:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4699b5a84b

[18:47] <moritz> m: say (a => 42).gist

[18:47] <camelia> rakudo-moar 368750: OUTPUT«(timeout)»

[18:47] *** Khisanth left
[18:47] *** amkrankruleuen left
[18:50] *** SamuraiJack left
[18:54] *** amkrankruleuen joined
[18:54] *** amkrankruleuen left
[18:54] *** amkrankruleuen joined
[18:57] <bartolin> I still wonder what's the deeper sense to parse ($a) in 'my ($a)' a signature. according to STD the following is valid syntax -- but why?

[18:57] <bartolin> $ viv -c -e 'my (Str $a where 1 --> Match) = 3;' syntax OK

[18:58] *** molaf joined
[19:00] <dalek> rakudo/recursive-gist: 10eb3fa | moritz++ | src/core/ (2 files):

[19:00] <dalek> rakudo/recursive-gist: Mu.gist: call .gist on attributes, not .perl

[19:00] <dalek> rakudo/recursive-gist: 

[19:00] <dalek> rakudo/recursive-gist: Closes RT #123016

[19:00] <dalek> rakudo/recursive-gist: review: https://github.com/rakudo/rakudo/commit/10eb3fa40e

[19:00] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123016

[19:02] *** darutoko left
[19:02] <FROGGS> hmmm, stage parse for perl6-p does now take 86s instead of 34s on my box... does somebody know what is going on?

[19:02] <timotimo> o_O

[19:02] <moritz> FROGGS: huh? parrot was ever that fast?

[19:02] *** Sqirrel left
[19:03] <FROGGS> err

[19:03] <FROGGS> perl6-m, sorry

[19:03] <PerlJam> moritz: self."$name"().gist  encapsulates a little of why I was starting to agree with you that it's not a bug  :-)

[19:04] *** brrt joined
[19:06] *** Mso150_w joined
[19:06] <lizmat> std: my @a; @a[2:]

[19:06] *** Mso150 left
[19:06] *** ajr_ left
[19:06] <camelia> std 14ad63b: OUTPUT«(timeout)»

[19:08] <moritz> FROGGS: fwiw I just had stage parse in 35s

[19:12] <lizmat> Stage parse      :  29.013  # a little longer than usual, but could be noise

[19:13] <dalek> rakudo/recursive-gist: 2662e7c | moritz++ | src/core/Range.pm:

[19:13] <dalek> rakudo/recursive-gist: Special-case Range.gist

[19:13] <dalek> rakudo/recursive-gist: review: https://github.com/rakudo/rakudo/commit/2662e7c7b7

[19:14] *** Alina-malina left
[19:15] *** Alina-malina joined
[19:16] *** kaare_ left
[19:19] <FROGGS> okay, that it must be my box

[19:22] *** Alula left
[19:22] *** Alula joined
[19:23] <brrt> fwiw, for me it is only a flappy test that breaks fo the spectest

[19:24] <moritz> t/spec/S17-procasync/print.rakudo.moar and S17-lowlevel/lock.t occasionally flap

[19:24] *** mauke_ joined
[19:25] *** mauke left
[19:28] *** Mso150 joined
[19:28] *** Mso150_w left
[19:29] *** ivanoff joined
[19:29] *** mauke_ is now known as mauke

[19:33] *** zakharyas joined
[19:33] <moritz> perl 5.21.5 has a new feature: for \my %hash (@AoH) { ... }

[19:33] *** treehug8_ joined
[19:34] <moritz> as part of a general feature that allows assigning to references

[19:34] <moritz> \$a = \$b;

[19:35] <moritz> I wanted to write "poor man's binding", but it's actually "5 man's binding" :-)

[19:35] <timotimo> :)

[19:36] *** treehug88 left
[19:36] <mauke> my $ref = \@xs; \@$ref = ['what'];

[19:37] *** treehug8_ left
[19:38] <PerlJam> moritz: and still no mop and just barely some experimental signatures.

[19:38] <mauke> but some very nice Function::Parameters :-)

[19:40] <moritz> ... which requires you to write 'fun' instead of 'sub' :(

[19:40] <mauke> no, that's just the default

[19:40] <mauke> because it's more fun!

[19:40] <mauke> use Function::Parameters { sub => "function_strict" };  # overrides sub keyword

[19:43] <timotimo> why don't we have a fun keyword in perl6??

[19:44] <moritz> timotimo: because we don't need the keyword to be have fun :-)

[19:47] <timotimo> mhhh

[19:48] <Tekk_> moritz: :)

[19:49] <Tekk_> timotimo: I'd rather have a language that submits to my will than one that has fun at my expense

[19:49] * Tekk_ wishes that IRC supported bolding so that he could make that joke more clear

[19:49] *** ivanoff left
[19:49] <PerlJam> Tekk_: nah, it was fine  :)

[19:49] <mauke> "Lisp takes defun out of programming"

[19:50] *** kjs_ joined
[19:51] <Tekk_> mauke: luckily that doesn't apply to scheme :D

[19:51] <timotimo> but you can make things bold!

[19:51] <Tekk_> although I like the look for perl 6 better than scheme, in my experiments over the last 24 hours

[19:51] <Tekk_> timotimo: yes, but I'm too lazy to figure out how to do it in erc

[19:51] <timotimo> heh.

[19:51] <mauke> *bold* _underline_ /italics/

[19:55] <Tekk_> mauke: yeah, but that would've been a bit too loud I think

[19:55] <Tekk_> *sub*mit

[19:55] <Tekk_> see?

[19:55] <Tekk_> breaks it up too much

[19:56] <mauke> submit

[19:57] <Tekk_> mhm

[19:58] <vendethiel> 8booold

[19:58] <timotimo> vendetroll!

[20:15] <lizmat> brrt moritz : I guess we need to skip the flappy async tests for the release :-(

[20:15] * brrt would like to research those a bit more

[20:16] <lizmat> brrt++  :-)

[20:16] <lizmat> you have less than 1 day before release  :-)

[20:16] <brrt> well, i didn't actually say i could do that today :-P

[20:16] <brrt> but i'd think we should them by now

[20:16] <lizmat> too bad  :-(  :-)

[20:17] <brrt> it would be so awesome if we could say 'concurrency? oh that Just Works (tm)'

[20:17] <lizmat> oh, it just works.  Just don't stress it  :-)

[20:17] <brrt> also, timotimo++ has given me some more JIT ops work :-)

[20:18] <timotimo> you're glad i'm giving you work? :P

[20:18] <brrt> oh yes

[20:18] <brrt> tangible targets and stuff

[20:18] <timotimo> but it's simple grunt-work, isn't it? :)

[20:18] <timotimo> ah, fair enough :)

[20:18] *** virtualsue joined
[20:19] <brrt> some, some not, and anyway i think assembly is fun, especially after a day of django or java

[20:21] *** Flogator left
[20:21] *** kjs_ left
[20:21] *** Mso150 left
[20:24] *** ugator joined
[20:25] *** FROGGS left
[20:27] <Tekk_> brrt: some of the most fun I've ever had was the hours after my friend said that you can't write web applications in assembly :)

[20:27] <Tekk_> was in the hours*

[20:27] <brrt> i say

[20:27] <brrt> although i've never tried to do exactly that, by the way

[20:28] <Tekk_> very fun

[20:28] <Tekk_> it wasn't anything particularly complicated, just a cheaty quine over cgi

[20:28] <brrt> and i can imagine that writing a bunch of string processing routines might not be so much fun

[20:28] <brrt> ah i see

[20:28] <brrt> well that should be doable

[20:28] <Tekk_> mhm

[20:28] <Tekk_> 64 lines

[20:29] <Tekk_> not linking against any libraries, just using syscalls

[20:29] <Tekk_> the fiddliest bit was writing strlen so that I could be lazy with write :)

[20:29] <colomon> there are days after $work where I think that anything at all that made visible progress would be fun.

[20:29] <brrt> strlen can be done really efficiently in x86 iirc

[20:29] <Tekk_> if you bothered to use the vector stuff yeah

[20:29] <brrt> something like repz inc %rax or so

[20:30] <brrt> no there's a automagic repeating thingy in x86

[20:30] <Tekk_> ah, cool

[20:30] <brrt> repnz rather. i haven't used it really but it is pretty cool

[20:30] <Tekk_> I basically stuck with purely what you could run on an 80386 because I can't be bothered to look up ops :P

[20:31] <brrt> i have this magic tool for looking up ops called gcc ;-)

[20:31] <Tekk_> :)

[20:37] <masak> ahoy, #perl6

[20:38] <masak> Tekk_: I know someone who did exactly that -- wrote a web thing in assembly

[20:38] <moritz> \o masak

[20:38] <PerlJam> masak: was his name masak?  :)

[20:38] <masak> PerlJam: incidentally, no

[20:40] <Tekk_> masak: I'd do it again with a bigger project

[20:40] <Tekk_> I'd probably at least link against libc though

[20:40] <masak> brrt: I didn't get as far as putting the slides to "Go To Considered Awesome" online. I totally should.

[20:40] <Tekk_> masak: that it is

[20:40] <masak> brrt: I believe the video is online, though I don't know exactly where.

[20:40] <brrt> hmm

[20:40] <brrt> maybe youtube?

[20:41] <Tekk_> brrt: https://www.youtube.com/watch?v=NwztaQgv3-Y I think not

[20:41] <Tekk_> (that was the first result on a search for the talk)

[20:41] <brrt> no, indeed, not youtube

[20:45] <masak> I was on a plane today. I wrote Perl 6 code. it had dynamically constructed code in it. I was happy.

[20:45] *** kaare_ joined
[20:45] *** spider-mario left
[20:50] <brrt> dynamically constructed code? macro's?

[20:52] <PerlJam> .oO( "Perl 6 code constructed on a plane!  Programmer Happy!  Plane didn't crash!" )

[20:53] <brrt> did the perl6 code crash?

[20:54] <Tekk_> brrt: it always does at first :P

[20:56] <dalek> rakudo/nom: 5054419 | (Elizabeth Mattijsen)++ | src/core/List.pm:

[20:56] <dalek> rakudo/nom: Make List.rotate not die on empty lists

[20:56] <dalek> rakudo/nom: 

[20:56] <dalek> rakudo/nom: And just return itself if there's nothing to do

[20:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5054419be9

[20:58] *** kaare_ left
[21:00] <masak> brrt: no, just closures generated by varying input.

[21:00] <masak> 'night, #perl6

[21:00] <dwarring> panda PR to add the 'look' command - https://github.com/tadzik/panda/pull/107

[21:00] <brrt> 'night

[21:00] <brrt> masak

[21:00] <dwarring> discussed earlier by ibo2perl6++ PerlJam++ http://irclog.perlgeek.de/perl6/2014-10-21#i_9543182

[21:01] *** funjon joined
[21:01] <dwarring> I've just done a straight port of the cpanminus implementation https://github.com/miyagawa/cpanminus/blob/devel/lib/App/cpanminus/script.pm#L1274

[21:02] <dwarring> pretty straight-forward

[21:03] <dalek> panda: 704557a | (David Warring [email@hidden.address] | / (2 files):

[21:03] <dalek> panda: adding 'look' command - fetch, then invoke shell in temporary directory

[21:03] <dalek> panda: review: https://github.com/tadzik/panda/commit/704557a332

[21:03] <dalek> panda: 1ff9959 | lizmat++ | / (2 files):

[21:03] <dalek> panda: Merge pull request #107 from dwarring/master

[21:03] <dalek> panda: 

[21:03] <dalek> panda: adding 'look' command - fetch, then invoke shell in temporary directory

[21:03] <dalek> panda: review: https://github.com/tadzik/panda/commit/1ff99590c7

[21:03] *** treehug88 joined
[21:04] *** masak left
[21:04] <dwarring> cheers :)

[21:04] <timotimo> dwarring: nice!

[21:04] <dwarring> easy win

[21:04] <timotimo> dwarring++

[21:05] *** kjs_ joined
[21:06] <brrt> 'night

[21:06] *** brrt left
[21:11] *** pochi left
[21:11] *** pochi joined
[21:12] *** prevost left
[21:13] <lizmat> http://blogs.perl.org/users/perleone/2014/10/alpine-perl-stint-part-2-of-2.html   "Besides that, the whole conference had a definite Perl 6 vibe, and left me with a really good feeling."   :-)

[21:16] *** onebitboy left
[21:18] *** timotimo left
[21:18] *** timotimo joined
[21:20] *** fhelmberger joined
[21:24] *** fhelmberger left
[21:27] *** zakharyas left
[21:31] <dalek> rakudo/nom: 8102da0 | (Elizabeth Mattijsen)++ | src/core/Parcel.pm:

[21:31] <dalek> rakudo/nom: Make Parcel.rotate not die on empty Parcels

[21:31] <dalek> rakudo/nom: 

[21:31] <dalek> rakudo/nom: And make it not do anything when it doesn't need to do anything

[21:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8102da0383

[21:37] *** carlin joined
[21:41] *** kjs_ left
[21:52] <Tekk_> is there any particular reason that print will call .Str on a class but not say?

[21:52] <Tekk_> rather than just returning whatever the constructor was

[21:56] <timotimo> yeah, say is for human-friendly (or rather: developer-friendly) output, while print is more "low level"

[21:57] *** virtualsue left
[21:57] <Tekk_> timotimo: that's rather counterintuitive then in my mind

[21:57] <Tekk_> what method am I supposed to fill in to make say say the right thing?

[21:58] <Tekk_> my particular case was when I spent quite a while scratching my head over why say instance; wasn't returning the nice pretty printing that I put in Str :P

[21:58] <Tekk_> before trying print

[21:58] <timotimo> say $foobar.Str

[21:58] <Tekk_> yeah

[21:58] <timotimo> oh, you want say $foobar.perl in that case

[21:58] <Tekk_> o

[21:58] <Tekk_> no

[21:58] <Tekk_> not pretty printing the code, but showing what the data is in a nice way

[21:59] <lizmat> .tell jntn regarding the private method in role, seems we have #120919 for that already, added my failing code to the ticket

[21:59] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120919

[21:59] <yoleaux> lizmat: I'll pass your message to jntn.

[21:59] <Tekk_> I'm just wondering why the "developer friendly" option is whatever the constructor was, while the "low level" one will output in the format that you can tell it to in the class

[21:59] <lizmat> decommute from NRPM&

[21:59] *** b2gills left
[21:59] *** lizmat left
[22:00] <timotimo> the "whatever the constructor was" is just the default .perl your class would derive from Mu

[22:00] <timotimo> what are you testing this on, ooc?

[22:01] <Tekk_> testing it locall with rakudo on moar

[22:01] *** guru joined
[22:01] <Tekk_> okay, so Str is for print, perl is for Say

[22:01] *** guru is now known as Guest19850

[22:01] *** Guest19850 is now known as ajr_

[22:02] <timotimo> i mean: what classes are you trying it on

[22:03] <Tekk_> oh

[22:03] <Tekk_> my own

[22:03] <timotimo> in that case, you won't have any sensible .Str implementation

[22:04] <timotimo> there's .Str, which is the to-string-coercer

[22:04] <Tekk_> mhm

[22:04] <timotimo> and .gist, to give a human-friendly output that may elide some stuff

[22:04] <Tekk_> I was just confused about what I should be filling in

[22:04] <timotimo> and .perl, which is supposed to give something as close to eval-able as possible

[22:04] <Tekk_> ah

[22:04] <Tekk_> so why doesn't say use .gist rather than .perl?

[22:05] <timotimo> the default .gist will just call .perl

[22:05] <timotimo> so it probably *is* using .gist, but you didn't implement a .gist so it falls back to .perl instead

[22:06] <Tekk_> ah

[22:06] <Tekk_> thanks timotimo :)

[22:06] <timotimo> yk :)

[22:06] <timotimo> er

[22:06] <timotimo> yw

[22:08] *** [Sno] left
[22:14] *** cognominal joined
[22:18] *** gfldex left
[22:26] *** rindolf left
[22:29] *** treehug88 left
[22:36] *** _slade_ joined
[22:53] *** jack_rabbit left
[22:58] *** [Sno] joined
[22:59] *** vike left
[22:59] *** molaf left
[23:01] *** vike joined
[23:13] *** frew joined
[23:14] *** vike left
[23:16] <frew> How solid are the optional static type checking features?

[23:16] * frew has gradual typing lust

[23:17] <timotimo> we're missing bits and pieces; what exactly are you interested in?

[23:17] <timotimo> vendethiel has been posting some examples of "dependent type"-like things you can do with roles

[23:17] <frew> mostly coderef arity checking

[23:18] <frew> thats what I feel pain from the most

[23:18] <timotimo> he's quite interested in strong type system stuff, so he's testing and fiddling with that aspect a lot

[23:18] <frew> so foo takes a sub that takes 2 args and returns 1 scalar

[23:18] <frew> ok

[23:18] <timotimo> if you have a lexical sub or multi sub or a private method or multi method call, you'll get compile-time errors if you have the wrong arity or types

[23:19] <timotimo> sadly, the server camelia runs on is busted somehow, when you try to evaluate code on the channel, you'll get "(timeout)" 99 times out of 100

[23:19] <frew> is uh, my $f = sub (...) { ... } a lexical sub?

[23:19] <frew> I installed rakudo from git already :)

[23:20] <timotimo> "my" is lexically scoped, but you can re-assign $f later; you shouldn't get compile-time errors from that

[23:20] <timotimo> m: sub takes_three($a, $b, $c) { }; takes_three(1, 2);

[23:20] <camelia> rakudo-moar 368750: OUTPUT«===SORRY!=== Error while compiling /tmp/Hg_2yiZgby␤Calling 'takes_three' will never work with argument types (Int, Int)␤    Expected: :(Any $a, Any $b, Any $c)␤at /tmp/Hg_2yiZgby:1␤------> sub takes_three($a, $b, $c) { }; [3…»

[23:20] <frew> right..

[23:20] <frew> but like

[23:20] <frew> what if I want the re-assignable thing to only be assignable 3-arg subs?

[23:21] <timotimo> ah

[23:21] <timotimo> you can have a type signature for "callable that takes three arguments"

[23:21] <timotimo> let me see if i can find the specs for you

[23:21] <timotimo> that stuff is at least partially implemented, if not fully

[23:21] *** avuserow left
[23:21] *** BenGoldberg joined
[23:22] *** ajr_ left
[23:24] *** guru joined
[23:24] *** guru left
[23:25] <frew> yeah I'd appreciate that

[23:25] <timotimo> i'm not finding it :\

[23:25] <frew> I couldn't find it in the specs I was looking through

[23:25] <frew> heh

[23:25] <frew> nbd

[23:25] <frew> I can wait

[23:25] <frew> I ahve lots of things to do anywya

[23:25] <timotimo> OK :)

[23:26] <timotimo> there's people who've spend much more time reading specs than me

[23:26] <frew> right

[23:26] <frew> if someone in here comes back and can answer I won't leave the channel

[23:26] <timotimo> if signature-restrictions for &variables is something you're depending on for something, you'll likely get someone interested in helping you

[23:26] <timotimo> the hardest part is sometimes getting motivated ... and sometimes finding something interested that is actually NYI

[23:29] <timotimo> there's something else that definitely works

[23:29] <timotimo> if you define a proto sub in your lexical scope, you can use that to restrict all signatures of lexical subs in that scope

[23:34] *** avuserow joined
[23:43] <timotimo> i *think* something like { my Callable[Any, Any] $foobar } should work, but neither a sub nor a pointy block seem to be doing that role

[23:43] <timotimo> even though they probably should

[23:51] <colomon> could this be done with a where clause?  kind of hacky, but....

[23:52] <timotimo> yes, definitely

[23:52] <colomon> sub wants-three-arg-function(&f where &f.args == 3) { … }  # that's probably not quite right, though

[23:53] <timotimo> i'd prefer *.args == 3 over &f.args == 3

[23:53] <colomon> is .args the right thing to say?

[23:54] * colomon is trying to find example code in the spec with methods callable on Callable

[23:54] <timotimo> probably .signature

[23:55] <timotimo> .signature.arity and .signature.count are of interest

[23:55] <timotimo> depending on whether or not you want to count optional args

[23:55] <colomon> that would be it, then

[23:55] <colomon> timotimo++

[23:58] <colomon> actually, looks like you can leave off the .signature?

[23:58] <timotimo> well, we clearly want something better than that; we want the Callable role to work and we want to know tho right syntax for giving a & variable or & argument a signature restriction

[23:59] <colomon> m: sub wants-three-arg-function(&f where &f.arity == 3) { &f(1, 2, 3); };  sub x($a, $b, $c) { say "$a * $b == $c"; }; wants-three-arg-function(x); wants-three-arg-function(wants-three-arg-function);

