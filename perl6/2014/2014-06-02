[00:05] *** ajr_ left
[00:05] *** rurban left
[00:07] *** SevenWolf joined
[00:13] *** aindilis joined
[00:28] *** virtualsue left
[00:29] *** xenoterracide joined
[00:36] *** xenoterracide left
[00:41] *** rindolf left
[00:46] *** rurban joined
[00:49] *** rurban left
[01:00] *** martinzaremba joined
[01:23] <colomon> Just wrote if 5 { … } when I meant if $code.key eq "5" { … }

[01:24] <colomon> I blame given / when

[01:27] *** jack_rabbit joined
[01:28] *** FROGGS_ joined
[01:31] *** Sqirrel left
[01:32] *** FROGGS left
[01:36] *** Su-Shee_ joined
[01:39] *** Su-Shee left
[01:45] *** hoverboard left
[01:50] *** rurban joined
[01:51] *** klapperl joined
[01:52] *** martinzaremba left
[01:54] *** klapperl_ left
[01:55] *** rurban left
[02:03] *** pdcawley left
[02:05] *** rurban joined
[02:05] *** pdcawley joined
[02:09] *** rurban left
[02:09] <colomon> just used a p6 script to read a triangle mesh out of an AutoCAD DXF file and write it out as an STL file.

[02:19] *** Ben_Goldberg joined
[02:19] *** BenGoldberg left
[02:19] *** Ben_Goldberg is now known as BenGoldberg

[02:29] *** BenGoldberg left
[02:34] *** BenGoldberg joined
[02:37] *** xragnar_ joined
[02:37] *** xragnar is now known as Guest56194

[02:37] *** Guest56194 left
[02:37] *** xragnar_ is now known as xragnar

[03:06] *** rurban joined
[03:06] *** molaf joined
[03:25] *** Alula left
[03:30] *** anaeem1_ joined
[03:30] *** rurban left
[03:31] *** anaeem1_ left
[03:31] *** Pleiades` left
[03:33] *** Sqirrel joined
[03:36] *** Alula joined
[03:44] *** Pleiades` joined
[03:47] *** rurban joined
[03:50] *** Pleiades` left
[03:56] *** Pleiades` joined
[04:00] *** kaare_ joined
[04:02] *** BenGoldberg left
[04:03] *** Alula left
[04:03] *** Alula joined
[04:04] *** pdcawley left
[04:07] *** hoverboard joined
[04:07] *** pdcawley joined
[04:08] *** SamuraiJack joined
[04:11] *** anaeem1_ joined
[04:35] *** cognominal left
[04:36] *** cognominal joined
[04:38] *** kaare_ left
[04:46] <TimToady> m: for [1,2],[3,4] -> $a { say $a.perl }

[04:46] <camelia> rakudo-moar 57555c: OUTPUT«[1, 2]␤[3, 4]␤»

[04:46] <TimToady> m: for [1,2],[3,4] -> $a [$x,$y] { say $a.perl }

[04:46] <camelia> rakudo-moar 57555c: OUTPUT«Array.new(1, 2)␤Array.new(3, 4)␤»

[04:47] <TimToady> rakudobug, loses itemization of $a

[04:48] <TimToady> m: for [1,2],[3,4] -> \a [$x,$y] { say a.perl }

[04:48] <camelia> rakudo-moar 57555c: OUTPUT«[1, 2]␤[3, 4]␤»

[04:48] <TimToady> oddly, that works

[05:10] *** kaare_ joined
[05:11] *** jack_rabbit left
[05:11] <FROGGS_> m: temp $*EXECUTABLE = "$*EXECUTABLE -MFoo"

[05:11] <camelia> rakudo-moar 57555c: OUTPUT«Can only use 'temp' on a container␤  in sub prefix:<temp> at src/gen/m-CORE.setting:17266␤  in block  at /tmp/MhEiV5a9SI:1␤␤»

[05:13] <FROGGS_> .tell lizmat I need that to work for panda/eleven, and your last commit broke it: temp $*EXECUTABLE = "$*EXECUTABLE -MFoo"; shell(...)

[05:13] <yoleaux> FROGGS_: I'll pass your message to lizmat.

[05:18] <FROGGS_> .tell lizmat in general, why do you make things immutable at all?

[05:18] <yoleaux> FROGGS_: I'll pass your message to lizmat.

[05:19] <FROGGS_> bbl &

[05:19] *** FROGGS_ left
[05:25] *** rurban left
[05:28] *** jack_rabbit joined
[05:36] *** xinming_ joined
[05:39] *** xinming left
[05:56] *** rurban joined
[06:00] *** rurban left
[06:02] *** baest_ is now known as baest

[06:19] *** bjz joined
[06:19] *** bjz_ left
[06:22] *** darutoko joined
[06:29] *** bjz_ joined
[06:30] *** bjz left
[06:30] *** thou joined
[06:32] <sergot> morning o/

[06:35] *** bjz_ left
[06:35] *** thou left
[06:35] <TimToady> .tell FROGGS I'm inclined to side with lizmat++ on this one; why would it ever make sense to violate the contract of an IO::Path by appending switches and turning it into a string?  You need your own $*HOWTOINVOKE command or some such.

[06:35] <yoleaux> TimToady: I'll pass your message to FROGGS.

[06:38] *** denis_boyun_ joined
[06:43] *** hoverboard left
[06:48] *** bjz joined
[06:52] *** FROGGS joined
[06:53] <FROGGS> o/

[06:53] <yoleaux> 06:35Z <TimToady> FROGGS: I'm inclined to side with lizmat++ on this one; why would it ever make sense to violate the contract of an IO::Path by appending switches and turning it into a string?  You need your own $*HOWTOINVOKE command or some such.

[06:53] *** araujo left
[06:57] *** rurban joined
[07:00] *** oetiker left
[07:01] *** rurban left
[07:16] *** felher_ is now known as felher

[07:17] *** rindolf joined
[07:22] <masak> morning, #perl6

[07:22] <sergot> masaku \o/

[07:22] <sergot> FROGGS \o/

[07:23] <FROGGS> TimToady: okay

[07:23] <FROGGS> .tell lizmat nvm :o)

[07:23] <yoleaux> FROGGS: I'll pass your message to lizmat.

[07:30] <masak> sergocie! \o/

[07:32] *** zakharyas joined
[07:33] *** Su-Shee_ is now known as Su-Shee

[07:36] *** sqirrel_ joined
[07:41] <pdcawley> lizmat: it's been a while since I've seen me too.

[07:43] * moritz sends a mirror to pdcawley 

[07:44] <pdcawley> yikes!

[07:44] <pdcawley> Shit! Is that what I look like?

[07:45] <timotimo> yelwacdp ← this is what you look like, i'm afraid.

[07:47] *** pippo joined
[07:48] *** salv0 left
[07:48] *** salv0 joined
[07:49] *** martinzaremba joined
[07:50] *** martinzaremba left
[07:52] *** kaleem joined
[07:54] *** martinzaremba joined
[07:54] *** martinzaremba left
[07:56] *** martinzaremba joined
[07:58] *** rurban joined
[08:02] *** rurban left
[08:09] *** martinzaremba left
[08:10] *** martinzaremba joined
[08:12] *** dmol joined
[08:13] *** martinzaremba left
[08:15] *** spider-mario joined
[08:17] *** pdcawley left
[08:17] *** pdcawley_ joined
[08:18] *** thou joined
[08:23] *** thou left
[08:27] *** ren1us joined
[08:43] *** fhelmberger joined
[08:52] *** dakkar joined
[08:53] *** sqirrel_ left
[08:56] *** denis_boyun_ left
[08:58] *** rurban joined
[09:03] *** rurban left
[09:09] *** oetiker joined
[09:14] *** SevenWolf left
[09:14] *** pecastro joined
[09:17] *** eternaleye left
[09:22] *** eternaleye joined
[09:23] *** sqirrel_ joined
[09:37] <masak> it's a pity that https://en.wikipedia.org/wiki/Composition_over_inheritance#Drawbacks doesn't even acknowledge the existence of 'handles'.

[09:38] <FROGGS> masak: that page is editable :o)

[09:47] *** Psyche^ joined
[09:51] *** Psyche^_ left
[09:59] *** rurban joined
[10:01] *** rurban1 joined
[10:03] *** rurban left
[10:05] *** rurban1 left
[10:07] *** thou joined
[10:07] *** kaare__ joined
[10:08] *** kaare_ left
[10:09] *** denis_boyun joined
[10:12] *** thou left
[10:17] <ren1us> There seem to be a whole bunch of classes that look really really useful, but aren't documented anywhere.  Or maybe I'm just the worst Hide & Seek player ever.

[10:18] <ren1us> Example: IO::Socket::INET is shown in the graph image for IO, but I can't find any sort of documentation to even confirm that it exists.

[10:19] <ren1us> Can anyone sorta point me in the right direction?

[10:23] <Timbus> S:IO::INET has no docs, as  far as i know

[10:23] <Timbus> its based on the perl5 version

[10:26] *** sqirrel_ left
[10:27] *** kaare__ is now known as kaare_

[10:38] <masak> FROGGS: editing it now.

[10:41] *** donaldh joined
[10:42] *** erkan joined
[10:44] <FROGGS> ren1us: are you interesting in writing the documentation for it?

[10:44] <ren1us> I'd love to, if I knew where to look to figure it out.

[10:45] <moritz> ren1us: doc.perl6.org doesn't claim to be comprehensive; so far IO::Socket::INET is documented in the specs

[10:45] <timotimo> at the very worst, you can look at the source code, in rakudo/rakudo src/core/IO/...

[10:45] <moritz> http://perlcabal.org/syn/S32/IO.html#IO%3A%3ASocket%3A%3AINET

[10:46] <moritz> it's under the "Here Be Dragons" headline, so probably not very reliable, but better than nothing

[10:46] <timotimo> aye.

[10:46] <ren1us> Well this is going to be an adventure.

[10:46] <timotimo> the state of socket speccing, testing and doccing is a bit shameful

[10:46] <FROGGS> yeah :/

[10:47] <timotimo> sadly, i have only very limited experience with sockets in general

[10:47] <donaldh> I have async socket testing on my todo list :-) 

[10:47] <timotimo>  ... do we even have all the unconnected UDP stuff implemented?

[10:47] <FROGGS> donaldh++ # :o)

[10:50] <timotimo> and/or specced ...

[10:51] <donaldh> IO::Socket::INET is somewhat specced and somewhat implemented :-/

[10:52] * donaldh thinks IO::Socket and IO::Handle could be merged somewhat

[10:54] <timotimo> isn't the handle a role or superclass?

[10:54] * donaldh but IO::Handle has lots of file specifics

[10:54] <timotimo> oh

[10:59] <moritz> timotimo: iirc we have no UDP whatsoever

[10:59] <moritz> ren1us: two hints: first, ask here if stuff is unclear

[10:59] <timotimo> well, who still uses UDP nowadays anyway? :)

[11:00] <donaldh> I am gradually working on factoring out the bakend specifics from IO.pm before considering some possible refactorings.

[11:00] <moritz> ren1us: second, doc.perl6.org trys to document stuff that actually works right now, so if in doubt, rather stick with how rakudo does it, not with what the specs say

[11:00] <moritz> (this applies at least to areas where the specs are as vague as sockets)

[11:01] <ren1us> I'm actually not sure what Rakudo thinks it's doing, at present.

[11:01] <ren1us> Let's see if I can do this right

[11:01] <ren1us> m: IO::Socket::INET.new(:host('http://www.whatismyip.com'), :port(80));

[11:01] <camelia> rakudo-moar 57555c: OUTPUT«Failed to resolve host name␤  in method initialize at src/gen/m-CORE.setting:19957␤  in method new at src/gen/m-CORE.setting:19941␤  in block  at /tmp/3v_oDdr3nC:1␤␤»

[11:01] <ren1us> That's interesting.

[11:01] <ren1us> When I run it in Rakudo, I get this: getaddrinfo failed: http: Success

[11:02] *** rurban joined
[11:02] <moritz> ren1us: it's not a valid hostname

[11:02] <moritz> ren1us: with http:// schema and all

[11:03] <ren1us> And that's why I should just turn off my computer after 4 am.

[11:03] <moritz> ren1us: also, IO on camelia is somewhat limited (due to security considerations)

[11:03] <donaldh> ren1us: have a look at t/spec/S32-io/IO-Socket-INET.t for examples

[11:04] <donaldh> https://github.com/perl6/roast/blob/master/S32-io/IO-Socket-INET.t

[11:05] *** donaldh left
[11:05] *** donaldh joined
[11:05] <timotimo> i do have to say, the IO refactoring work is a step in the right direction

[11:06] *** rurban left
[11:07] *** pippo left
[11:17] *** kurahaupo joined
[11:18] <FROGGS> m: IO::Socket::INET.new(:host('www.whatismyip.com'), :port(80));

[11:18] <camelia> rakudo-moar 57555c: ( no output )

[11:19] <FROGGS> m: say IO::Socket::INET.new(:host('www.whatismyip.com'), :port(80)).get;

[11:19] <timotimo> you need to send an actual get request first

[11:19] <camelia> rakudo-moar 57555c: OUTPUT«(timeout)»

[11:19] <FROGGS> ahh, of course :o)

[11:19] <timotimo> what is your name?

[11:19] <timotimo> what is your request?

[11:20] <timotimo> what is your favourite HTTP version?

[11:20] <FROGGS> m: my $s = IO::Socket::INET.new(:host('www.whatismyip.com'), :port(80)); $s.send("GET h/ HTTP/1.1\nHost: www.whatismyip.com\nAccept: */*\nConnection: Close\n\n"); say $s.get

[11:20] <camelia> rakudo-moar 57555c: OUTPUT«HTTP/1.1 400 Bad Request

[11:20] <FROGGS> m: my $s = IO::Socket::INET.new(:host('www.whatismyip.com'), :port(80)); $s.send("GET / HTTP/1.1\nHost: www.whatismyip.com\nAccept: */*\nConnection: Close\n\n"); say $s.get

[11:20] <camelia> rakudo-moar 57555c: OUTPUT«HTTP/1.1 403 Forbidden

[11:21] <FROGGS> m: my $s = IO::Socket::INET.new(:host<www.cpan.org>, :port(80)); $s.send("GET http://www.cpan.org/MIRRORED.BY HTTP/1.1\nHost: www.cpan.org\nAccept: */*\nConnection: Close\n\n"); say $s.lines

[11:21] <camelia> rakudo-moar 57555c: OUTPUT«HTTP/1.1 200 OK

[11:21] <timotimo> well, that can't be all of it

[11:22] <moritz> there's no closing » in that camelia output

[11:22] <moritz> which means something is fishy

[11:27] <sergot> m: use HTTP::Request;

[11:27] <camelia> rakudo-moar 57555c: OUTPUT«===SORRY!===␤Could not find HTTP::Request in any of: /home/p6eval/.perl6/2014.05-127-g57555c8/lib, /home/p6eval/rakudo-inst-2/languages/perl6/lib, /home/p6eval/rakudo-inst-2/languages/perl6/vendor/lib, /home/p6eval/rakudo-inst-2/languages/perl6/site/lib,…»

[11:28] <sergot> m: sub a { return ''; }; say a().defined;

[11:28] <FROGGS> star: use HTTP::Request;

[11:28] <camelia> rakudo-moar 57555c: OUTPUT«True␤»

[11:28] <camelia> star-m 2014.04: OUTPUT«===SORRY!===␤Could not find HTTP::Request in any of: /home/p6eval/.perl6/2014.04/lib, /home/p6eval/star-2014.04/languages/perl6/site/lib, /home/p6eval/star-2014.04/languages/perl6/vendor/lib, /home/p6eval/star-2014.04/languages/perl6/lib␤»

[11:28] <camelia> ..star-p 2014.04: OUTPUT«===SORRY!===␤Could not find HTTP::Request in any of: /home/p6eval/.perl6/2014.04/lib, /home/p6eval/star-2014.04/lib/parrot/6.1.0/languages/perl6/site/lib, /home/p6eval/star-2014.04/lib/parrot/6.1.0/languages/perl6/vendor/lib, /home/p6eval/star-2014.04/lib/pa…»

[11:28] <sergot> m: sub a { return Any; }; say a().defined;

[11:28] <camelia> rakudo-moar 57555c: OUTPUT«False␤»

[11:29] <sergot> $ perl6 -e ''

[11:29] <sergot> use of uninitialized value of type Any in numeric context

[11:29] <sergot> Do you have the same?

[11:30] <sergot> on latest moar,nqp and rakudo

[11:30] <sergot> It's always when running any script.

[11:33] <moritz> it means "bug"

[11:35] <sergot> :)

[11:35] <lizmat> timotimo: "[12:59:59]  <timotimo>	 well, who still uses UDP nowadays anyway? :)"

[11:35] <yoleaux> 05:13Z <FROGGS_> lizmat: I need that to work for panda/eleven, and your last commit broke it: temp $*EXECUTABLE = "$*EXECUTABLE -MFoo"; shell(...)

[11:35] <yoleaux> 05:18Z <FROGGS_> lizmat: in general, why do you make things immutable at all?

[11:35] <yoleaux> 07:23Z <FROGGS> lizmat: nvm :o)

[11:35] <lizmat> at former $work, UDP is used to log a *lot* of data in a way that will never ever interfere with the functioning of the web siite

[11:36] <timotimo> aye, my statement wasn't serious

[11:36] <lizmat> ah, ok  :-)

[11:36] <masak> FROGGS: https://en.wikipedia.org/w/index.php?title=Composition_over_inheritance&diff=611214665&oldid=603010573

[11:37] <FROGGS> masak++

[11:37] <masak> sergot: I don't have it, on Rakudo 90cd584.

[11:38] <masak> sergot: rebuilding and trying again.

[11:38] <lizmat> sergot: I'm not seeing that warning

[11:38] <FROGGS> m: '' # do we see it here?

[11:38] <camelia> rakudo-moar 57555c: ( no output )

[11:39] <masak> FROGGS: note that that's a program with a string literal in it.

[11:39] <masak> FROGGS: whereas sergot's program was just an empty program.

[11:39] <FROGGS> ahh, true

[11:39] * masak .oO( the beauty and intricacy of nested quoting languages )

[11:39] <FROGGS> sergot: I don't get that warning locally either

[11:39] <sergot> masak: actually it doesn't matter if it's empty program or not, I got this errmsg anyway. :)

[11:40] <masak> oh, ok.

[11:40] <lizmat> sergot: what OS are you using ?

[11:40] <timotimo> sergot: how can the format for cookies work; are cookies limited to never contain = or ;?

[11:40] <sergot> I'm on Ubuntu now, 12.04 (k 3.12) iirc

[11:41] <sergot> Yea, this OS is managed by my company using puppet so... afaik it's 12.04

[11:43] <sergot> I got this errmsg during make install:

[11:43] <sergot> ./perl6-m --target=mbc --output=lib/Test.moarvm lib/Test.pm

[11:43] <sergot> use of uninitialized value of type Any in numeric context

[11:43] <sergot> use of uninitialized value of type Any in string context

[11:43] <sergot> use of uninitialized value of type Any in numeric context

[11:43] <sergot> use of uninitialized value of type Any in string context

[11:43] <sergot> and that's not the only one case

[11:43] <timotimo> doesn't help that we don't get file/line number with warnings on moarvm

[11:43] <sergot> always 2x numeric and 2x string

[11:45] <lizmat> sergot: does the command "id" exist on your system, and if so, what does it output ?

[11:45] <sergot> timotimo: about cookies: for now cookies can contain ; and = . There are some fields without =, like: HttpOnly, secure, etc.

[11:45] <timotimo> how does the format cope? o_O

[11:48] *** bjz_ joined
[11:49] <sergot> timotimo: did you see my p6 Http::Cookies ?

[11:49] <sergot> It's not done yet. :)

[11:49] <timotimo> that's what i looked at

[11:49] <lizmat> found the reason for sergot's warnings

[11:49] <lizmat> it was my last commit

[11:50] <lizmat> oddly enough, this should only have happened if he'd be calling $*USER or $*GROUP

[11:50] <lizmat> apparently something is, or I don't understand how Proxy.new works

[11:51] *** bjz left
[11:52] <lizmat> r: Proxy.new( FETCH => { say "fetching" } )

[11:52] <camelia> rakudo-jvm 57555c: OUTPUT«(timeout)»

[11:52] <camelia> ..rakudo-{parrot,moar} 57555c: OUTPUT«fetching␤»

[11:53] <timotimo> i *think* in PROCESS::<$USER> //= $on_demand_fetch, you are actually directly fetching

[11:53] <timotimo> you may want to := that instead of //=

[11:53] <sergot> timotimo: what's wrong with this module? :)

[11:54] <sergot> timotimo: cookies I meant

[11:54] *** dmol left
[11:54] <timotimo> if someone sets a cookie that has a not-nice character in its data, your format goes kablooey, no?

[11:55] *** thou joined
[11:55] <lizmat> timotimo: just creating a proxy seems to fetch already ?

[11:55] <sergot> true

[11:56] <sergot> timotimo: good point

[11:58] <sergot> timotimo++: thanks :)

[11:59] <sergot> I should check if cookies can contain ; and = in name/values of fields.

[12:00] *** thou left
[12:00] <ren1us> Figuring out socket stuff is painful.  I can never tell if the issues are on my end or because the servers are being weird.

[12:01] <ren1us> m: my $s = IO::Socket::INET.new(:host('www.zephyrr.com'), :port(80)); $s.send("GET /dev/ip.php HTTP/1.1\nHost: zephyrr.com\nConnection: close\n\n"); $s.lines;

[12:01] <camelia> rakudo-moar 57555c: ( no output )

[12:02] <ren1us> m: my $s = IO::Socket::INET.new(:host('www.zephyrr.com'), :port(80)); $s.send("GET /dev/ip.php HTTP/1.1\nHost: zephyrr.com\nConnection: close\n\n"); say $s.lines;

[12:02] <camelia> rakudo-moar 57555c: OUTPUT«HTTP/1.1 200 OK

[12:02] <FROGGS> m: Proxy.new( FETCH => { say "fetching" } ); 1

[12:02] <camelia> rakudo-moar 57555c: OUTPUT«fetching␤fetching␤»

[12:02] *** rurban joined
[12:03] <jnthn> That double fetching is no doubt 'cus the code-gen for sink is LTA...

[12:03] <jnthn> That's high on my list of stuff too streamline for performance.

[12:03] <FROGGS> that is only what you sink :P

[12:04] <dalek> rakudo/nom: f146fec | (Elizabeth Mattijsen)++ | src/core/Process.pm:

[12:04] <dalek> rakudo/nom: Revert "Implement $*USER and $*GROUP (not yet specced)"

[12:04] <dalek> rakudo/nom: 

[12:04] <dalek> rakudo/nom: There is something wrong with my understanding of how either Proxy.new works,

[12:04] <dalek> rakudo/nom: or matching, or whatever, but if your user name / group contains non \w

[12:04] <dalek> rakudo/nom: characters, you will get 4 warnings everytime you start up.  And I don't have

[12:04] <dalek> rakudo/nom: time to look at why exactly now.

[12:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f146fecb10

[12:04] *** skids left
[12:05] <lizmat> I'll be offline most of today, tomorrow and Wednesday

[12:05] <lizmat> hence the revert right now

[12:05] <FROGGS> k

[12:05] <FROGGS> lizmat: have a good time :o)

[12:05] <lizmat> that should work out fine: 1 emergenxy social, one Amsterdam PM meeting, one visit to an old friend

[12:06] <lizmat> life is hard  :-)

[12:06] <FROGGS> hehe

[12:06] <lizmat> commuting&

[12:06] <FROGGS> o/

[12:07] *** rurban left
[12:13] *** nhayashi joined
[12:14] <ren1us> Can someone point me towards the source for IO::Socket::INET?  Trying to dissect something weird.

[12:14] *** Pleiades` left
[12:14] <moritz> src/core/IO/Socket/INET.pm

[12:15] <moritz> and it has methods from the role in src/core/IO/Socket.pm (iirc)

[12:16] <FROGGS> like recv, yes

[12:17] <ren1us> Do you have a link to the github project, or is this something that's lurking in my install directory already?

[12:17] <timotimo> it's in your rakudo/

[12:18] <moritz> https://github.com/rakudo/rakudo/blob/nom/src/core/IO/Socket/INET.pm otherwise

[12:18] *** Pleiades` joined
[12:19] <ren1us> yeah the only INET.pm on my system is under perl5

[12:19] <FROGGS> ren1us: it is not installed as INET.pm

[12:20] <FROGGS> ren1us: rakudo's source files are mangled into a single CORE-SETTING file, which will compiled and then installed

[12:25] *** jnap joined
[12:28] *** kurahaupo left
[12:28] *** rurban joined
[12:35] <ren1us> What's the INET.lines() method supposed to be returning?  The entire content response (effectively the same as Socket.recv())?

[12:35] <FROGGS> the entire document as an array of lines

[12:38] <ren1us> So should it be returning stuff like HTTP headers?

[12:38] <moritz> if you make a HTTP request, yes

[12:38] <ren1us> Huh.  Because I'm getting some... bizarreness: http://pastebin.com/p09sQvSS

[12:39] <FROGGS> "Transfer-Encoding: chunked" <--

[12:42] <ren1us> Isn't chunked encoding still feeding the chunks in order?

[12:42] <xfix> ren1us, if you don't want chunks, don't claim to be HTTP 1.1 user agent.

[12:42] <ren1us> I don't particularly care if I get chunks or not.

[12:42] <xfix> The "c" letter is chunk size in this case.

[12:42] *** kivutar joined
[12:43] <ren1us> Yeah, that's perfectly reasonable.  The c shows up in the $s.recv call, which comes in perfectly clean.

[12:43] <ren1us> What I'm interested in is the $s.lines, which is just returning a mess.

[12:44] *** FROGGS left
[12:46] <xfix> ren1us, try using `.perl` method.

[12:46] <xfix>     say $s.lines.perl;

[12:46] <xfix> Which will upload data in more debuggable form (Perl 6 literals).

[12:47] <xfix> r-p: my $s = IO::Socket::INET.new(:host('www.zephyrr.com'), :port(80)); $s.send("GET /dev/ip.php HTTP/1.1\nHost: zephyrr.com\nConnection: close\n\n"); say $s.lines.perl;

[12:47] <camelia> rakudo-parrot f146fe: OUTPUT«("HTTP/1.1 200 OK\r", "Server: nginx/1.6.0\r", "Date: Mon, 02 Jun 2014 12:47:29 GMT\r", "Content-Type: text/html\r", "Transfer-Encoding: chunked\r", "Connection: close\r", "\r", "e\r", "192.241.193.85\r", "0\r", "\r").list␤»

[12:47] <xfix> Hm, why `.lines` doesn't understand `\r\n`...

[12:48] <ren1us> The .perl version looks totally reasonable.

[12:48] <xfix> The reason is that `\r` breaks the output.

[12:48] <xfix> In terminal, `\r` means to go to the beginning of the line.

[12:49] <xfix> `say` separates array elements by spaces. Therefore, you overwrite old lines while writing.

[12:49] <ren1us> That actually makes perfect sense.

[12:49] <xfix> Now I wonder why Rakudo doesn't handle `\r`...

[12:50] <xfix> Any  :$nl = "\n",

[12:50] <xfix> oh

[12:50] <xfix> r-p: my $s = IO::Socket::INET.new(:host('www.zephyrr.com'), :port(80), :nl("\r\n")); $s.send("GET /dev/ip.php HTTP/1.1\nHost: zephyrr.com\nConnection: close\n\n"); say $s.lines.perl;

[12:50] <camelia> rakudo-parrot f146fe: OUTPUT«("HTTP/1.1 200 OK\r", "Server: nginx/1.6.0\r", "Date: Mon, 02 Jun 2014 12:50:23 GMT\r", "Content-Type: text/html\r", "Transfer-Encoding: chunked\r", "Connection: close\r", "\r", "e\r", "192.241.193.85\r", "0\r", "\r").list␤»

[12:50] <xfix> Huh?

[12:51] <Timbus> $.input-line-separator

[12:52] <xfix> It seems that `IO` class doesn't recognize `nl` attribute.

[12:52] <Timbus> no, its using input-line-separator

[12:53] <xfix> So, why :$nl is in spec?

[12:53] <xfix> http://perlcabal.org/syn/S32/IO.html#line_330

[12:54] <Timbus> i dont even think there was a spec when IO:S:INET was written

[12:54] <xfix> r-p: my $s = IO::Socket::INET.new(:host('www.zephyrr.com'), :port(80)); $s.input-line-separator = "\r\n"; $s.send("GET /dev/ip.php HTTP/1.1\nHost: zephyrr.com\nConnection: close\n\n"); say $s.lines.perl;

[12:54] <camelia> rakudo-parrot f146fe: OUTPUT«("HTTP/1.1 200 OK", "Server: nginx/1.6.0", "Date: Mon, 02 Jun 2014 12:54:26 GMT", "Content-Type: text/html", "Transfer-Encoding: chunked", "Connection: close", "", "e", "192.241.193.85", "0", "").list␤»

[12:54] <xfix> ren1us, ^

[12:55] *** anaeem1_ left
[12:55] <xfix> I wonder if input-line-separator could be a regular expression...

[12:56] <ren1us> And it comes out clean without the .perl, too.

[12:56] <ren1us> Perfect.

[12:56] *** kurahaupo joined
[12:56] <timotimo> xfix: from a performance standpoint, that's pretty punishing

[12:56] <xfix> Hm, right.

[12:56] <xfix> AWK somehow managed to have this, however.

[12:57] <xfix> (not that this feature is worth it for Perl regexes)

[12:58] <xfix> (in awk, you can write code like (shell code) `echo -n 'axeduxeeded' | awk 1 RS="[xd]"`)

[12:59] <xfix> But considering how complex Perl regular expressions are, this is probably too complex for a very small gain.

[12:59] <jnthn> Yeah, as-a-regex is a pain for *many* reasons.

[13:00] *** kaare_ left
[13:24] *** guru joined
[13:25] *** guru is now known as Guest27443

[13:26] *** molaf left
[13:26] *** kurahaupo left
[13:27] *** skids joined
[13:29] <[Coke]>  /scroll end

[13:29] <[Coke]> whoops. :)

[13:32] <dalek> rakudo-star-daily: ca59a32 | coke++ | log/ (13 files):

[13:32] <dalek> rakudo-star-daily: today (automated commit)

[13:32] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/ca59a32cbc

[13:32] <dalek> rakudo-star-daily: 1d63ff3 | coke++ | log/ (14 files):

[13:32] <dalek> rakudo-star-daily: today (automated commit)

[13:32] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/1d63ff355a

[13:32] <dalek> perl6-roast-data: 8ba053c | coke++ | / (6 files):

[13:32] <dalek> perl6-roast-data: today (automated commit)

[13:32] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/8ba053c957

[13:36] *** Guest27443 is now known as ajr_

[13:36] *** jsn_ joined
[13:37] *** jack_rabbit left
[13:40] <jsn_> hey

[13:43] *** anaeem1_ joined
[13:43] *** thou joined
[13:45] *** rurban left
[13:47] *** xusia joined
[13:48] *** thou left
[13:59] *** rurban joined
[13:59] *** btyler joined
[14:01] <[Coke]> ho

[14:02] <[Coke]> rakudo.jvm failed 676 tests yesterday.

[14:03] *** thou joined
[14:03] <[Coke]> maybe something ran slow...

[14:03] <[Coke]> looks like no change on moar/jvm R* module failures.

[14:06] *** kaare_ joined
[14:09] *** virtualsue joined
[14:11] *** jsn_ left
[14:22] *** anaeem1__ joined
[14:25] *** anaeem1_ left
[14:26] *** xenoterracide joined
[14:35] *** erkan left
[14:41] *** treehug88 joined
[14:44] <Ulti> is there any sugar for doing cube root?

[14:50] <colomon> m: say 27 ** (1/3)

[14:50] <camelia> rakudo-moar f146fe: OUTPUT«3␤»

[14:50] <flussence> m: sub prefix:<∛>(Numeric $x) { $x ** (1/3) }; say ∛8

[14:50] <camelia> rakudo-moar f146fe: OUTPUT«2␤»

[14:50] <colomon> m: say 27.roots(3)

[14:50] <camelia> rakudo-moar f146fe: OUTPUT«3+0i -1.5+2.59807621135332i -1.5-2.59807621135332i␤»

[14:50] <colomon> don't think there's anything specific for cube roots

[14:51] <masak> ...but for a very small fee, you get to name and define your own math subroutines!

[14:52] <masak> m: sub cube-root($x) { $x ** (1/3) }; say cube-root 27

[14:52] <camelia> rakudo-moar f146fe: OUTPUT«3␤»

[14:52] *** martinzaremba joined
[14:54] *** SamuraiJack left
[14:55] *** colomon left
[14:58] <[Coke]> m: say 27.roots(3).grep({$_.narrow ~~ Real})

[14:58] <camelia> rakudo-moar f146fe: OUTPUT«3+0i␤»

[15:00] *** SamuraiJack joined
[15:01] *** anaeem1__ left
[15:07] <Ulti> am I right in thinking just adding "is cache" to a sub means if the exact same parameters come in the same result is returned from a cache?

[15:08] <masak> m: say 27.roots(3).grep(!*.im)

[15:08] <camelia> rakudo-moar f146fe: OUTPUT«3+0i␤»

[15:08] <Ulti> yeah I just did ** (1/3)

[15:08] <jnthn> That's the idea, yes. Note it tends to make most sense of value types.

[15:08] <jnthn> *on

[15:08] <masak> Ulti: `is cached`, I believe.

[15:08] <Ulti> never really understood why sqrt gets its own name :)

[15:08] *** donaldh left
[15:09] *** SamuraiJack left
[15:09] *** donaldh joined
[15:09] <masak> Ulti: then you didn't do much in the way of distance calculation :)

[15:09] <Ulti> jnthn yeah I guess someone might change the contents of my container

[15:09] <Ulti> masak well cuberoot is used just as frequently

[15:09] <Ulti> fairly rare you see ** (1/4)

[15:10] <jnthn> decommute &

[15:10] <masak> Ulti: for the math I've seen, cube roots are rare and square roots common. YMMV.

[15:10] <masak> Ulti: notice that distance calculation in space ends up being sqrt($x**2 + $y**2 + $z**2) -- no cube root

[15:12] <Ulti> lots of the more magical stats things involve cuberoots

[15:12] <Ulti> the ones that have magic numbers assuming normality too :|

[15:14] <masak> anyway, if you really need it in your program, defining it takes one line.

[15:14] <masak> maybe call it 'cbrt' for consistency...

[15:14] * masak .oO( 'sqrt' was named back in the time when vowels were in short supply )

[15:14] <Ulti> well I'm used to scientific notation for roots anyway

[15:14] <dalek> Perlito: 94274ab | (Flavio S. Glock)++ | / (3 files):

[15:14] <dalek> Perlito: Perlito5 - perl6 - transform 'use vars' into 'our'

[15:14] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/94274aba0d

[15:14] *** colomon joined
[15:16] <Ulti> like I've mever seen a square() function meaning ** 2 

[15:16] <Ulti> or sqr() I guess 

[15:16] <Ulti> maybe sq() since the rt might be for root

[15:19] * Ulti is probably going to end up producing Math::Simple at this rate

[15:19] <Ulti> though log2() feels a bit ott but on the other hand that plus ln() covers practically every log base anyone cares about

[15:25] *** ajr_ left
[15:26] *** guru joined
[15:26] *** guru is now known as Guest89354

[15:26] *** Guest89354 is now known as ajr_

[15:27] <dalek> ecosystem: 0487b27 | (Konrad Borowski)++ | META.list:

[15:27] <dalek> ecosystem: Add Math::Tau to the list of modules (τ = 2π)

[15:27] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/0487b27c74

[15:32] <masak> :)

[15:33] *** anaeem1 joined
[15:35] *** anaeem1 left
[15:37] *** Rotwang joined
[15:40] *** raiph joined
[15:40] *** martinzaremba left
[15:41] *** martinzaremba joined
[15:42] *** zakharyas left
[15:48] *** martinzaremba left
[15:55] *** colomon left
[15:55] *** kaleem left
[15:57] * [Coke] ponders adopting a jnthn-like life, teaching people about cool stuff and then hacking on cooler stuff as time permits.

[16:05] <donaldh> :D

[16:05] *** pecastro left
[16:07] *** hoverboard joined
[16:07] *** dmol joined
[16:10] *** FROGGS joined
[16:11] *** bjz_ left
[16:11] *** bjz joined
[16:11] *** xenoterracide left
[16:12] * jnthn back :)

[16:12] <japhb> I finally have the first draft of my why-perl6 talk written, whew!

[16:13] <japhb> Comments much appreciated: http://japhb.github.io/japhb-talks/WIP/why-perl6/lightning-talk.html#/

[16:13] *** denis_boyun left
[16:14] *** martinzaremba joined
[16:14] <jnthn> japhb: On #4 I mighta gone for .pick(2) to make the "pick 2" meme :)

[16:15] *** anaeem1 joined
[16:16] <japhb> jnthn: That was intentionally a '.pick(2) subverted' attempt

[16:16] <japhb> :-)

[16:16] *** martinzaremba left
[16:16] <jnthn> japhb: On #12 I mighta gone in the opposite order (most verbose/explicit form to most sugary form)

[16:16] <jnthn> japhb: Oh, that works too :)

[16:17] <japhb> jnthn: I debated that ... why do you think most verbose first?  To show continued simplification?

[16:17] <jnthn> Yes.

[16:17] *** bjz left
[16:17] <jnthn> Most obvious what's going on to least obvious.

[16:17] <japhb> I was thinking "You start with the easiest, and then when you need the bigger guns, you bring them out"

[16:17] <japhb> Oh, good point.

[16:18] *** anaeem1 left
[16:18] <jnthn> I may even have gone so far as to pick an example where I could show it in each of the 3 forms, but the way you have it is also good in so far as it shows *why* there are multiple forms by giving examples where each is the right choice. :)

[16:19] <japhb> Yeah, that latter was what I was hoping for.

[16:19] <jnthn> In "powerful built-ins", somehow showing classify feels like an example of a really nice one...

[16:19] *** anaeem1_ joined
[16:19] <japhb> I debated TIMTOWTDI several times (it's even in the extras/ideas cache after the end), but for now I'm holding back until I can come up with a really good way to theme it.

[16:20] <japhb> jnthn: Hmmm, that's a good idea (classify)

[16:20] <jnthn> The output on slide 30 seems wrong

[16:21] <jnthn> (doesn't match the program)

[16:21] <japhb> jnthn: Wait, why?

[16:21] <japhb> I thought I actually ran that one.

[16:22] <jnthn> oh

[16:22] <jnthn> sorry, I misread

[16:22] <jnthn> it's fine

[16:22] <japhb> For all the code I could, I actually wrote them out as examples in https://github.com/japhb/japhb-talks/tree/master/WIP/why-perl6/examples and ran them

[16:23] <japhb> Hmmm, that does make clear that it's easy to misread though.

[16:23] <japhb> .oO( "You think it's cute now ..." )

[16:23] <japhb> (And for the code I got from other sources, the links are in the markdown source file for the talk)

[16:25] *** araujo joined
[16:25] *** araujo left
[16:25] *** araujo joined
[16:26] <FROGGS> japhb: that's not a lightning talk as as the url suggests

[16:26] <japhb> FROGGS: It started as one.  Then it ... expanded.  :-)

[16:26] <japhb> Note the 'WIP' in the URL.  ;-)

[16:26] <FROGGS> yeah, it did :o)

[16:27] <btyler> japhb: any chance this talk will be recorded/made public? the slides look really fantastic

[16:27] <FROGGS> yes, seen the XXXX at around slide 90

[16:27] <japhb> btyler: The intent was always that this be a gift to the community.

[16:27] <FROGGS> this is easily a 40mins talk

[16:28] <japhb> I don't have a venue or anything yet, but I will try to make sure it is recorded if/when I give it.

[16:28] <FROGGS> japhb++ # and a good one

[16:28] <jnthn> japhb: Why JSON::Tiny doesn't do it, it may be good to use .made in place of .ast in this example as in this case it's not really an AST...

[16:28] <japhb> But I'm happy for others to give it to.

[16:28] <btyler> japhb: awesome! a wonderful gift indeed

[16:29] <jnthn> Minor mis-alignment on #79

[16:30] <jnthn> On 95, I'd title it "Meta-object programming"

[16:30] <jnthn> japhb++ # that's awesome stuff

[16:31] <japhb> Gah, had to switch wi-fi.

[16:31] <japhb> jnthn: re: .made, that's a good point.  I was sticking with original source code to be able to claim "I didn't make this up, it's the real source", but maybe the original source needs to change.  :-)

[16:32] <japhb> jnthn: What is the misalignment on slide #79?

[16:32] <jnthn> japhb: One space too many 

[16:33] <japhb> I'll switch the title for #95

[16:33] *** donaldh left
[16:33] <jnthn> (on one of the repl input lines)

[16:34] <japhb> Oh, yeah, I remember adding a couple spaces to make the slide more readable (because otherwise you end up with a couple very similar identifiers offset by a character, and it ends up being harder to see what's different between them -- at least for me)

[16:35] <japhb> And thanks for the positive feedback, guys.  It took me quite a while to get this far, glad to know it's turning out well.  :-)

[16:36] *** colomon joined
[16:37] * japhb afk for a few to get breakfast, but will try to check back throughout the day

[16:39] *** anaeem1_ left
[16:40] *** ajr_ left
[16:41] *** martinzaremba joined
[16:48] *** fhelmberger left
[16:49] *** anaeem1_ joined
[16:50] *** hoverboard is now known as moistcherry

[16:50] <vendethiel> .u ∛

[16:50] <yoleaux> U+221B CUBE ROOT [Sm] (∛)

[16:50] *** xusia left
[16:53] <TimToady> masak: it's not your fault, but it bothers me that the composition article mentions mixins as a workaround to the problem of having to reimplement methods; to me, mixins are inheritance, not composition

[16:53] <TimToady> also, would be nice if it actually mentioned "delegation" somewhere

[16:55] *** dakkar left
[16:55] <vendethiel> TimToady: "mixins are inheritance" this somewhat boils down to semantics vs implementation imho

[16:58] <TimToady> transparent delegation to a parent is always inheritance in my book, regardless of whether you set it up at compile time or run time

[16:59] *** rurban left
[17:02] <jnthn> vendethiel: The behavior is to override methods in the mixed-in-to object, which to me is inheritance semantics...

[17:02] <TimToady> what's really funny is how languages use composition to implement the data storage for inheritance

[17:03] <vendethiel> I mean semantic as in "is a" vs "does"

[17:03] *** xenoterracide joined
[17:05] <TimToady> yes, mixins also have to compose the new class that is being derived :)

[17:07] <TimToady> or "get to compose" depending on whether you think it's a special priviledge

[17:08] <dalek> Perlito: 67df646 | (Flavio S. Glock)++ | / (3 files):

[17:08] <dalek> Perlito: Perlito5 - 'use constant' - wip

[17:08] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/67df646d8a

[17:08] *** guru joined
[17:08] * jnthn builds all the latest things 

[17:08] *** guru is now known as Guest20314

[17:09] *** Guest20314 is now known as ajr_

[17:09] * TimToady already bualt all the earliest things...

[17:10] <TimToady> jnthn: did you see my bug at http://irclog.perlgeek.de/perl6/2014-06-02#i_8805055

[17:11] *** martinzaremba left
[17:11] <jnthn> TimToady: No, I've really only been vaguely following stuff at all in recent days

[17:12] <jnthn> TimToady: That looks like the fast-path binding stuff gets things right, and the sub-signature forces the slow-path binder which then gets it wrong...

[17:13] *** denis_boyun_ joined
[17:13] <masak> TimToady: yeah, I noticed that too. (the mixins-as-workaround thing)

[17:14] * colomon generated ~15MB of STL files from a single AutoCAD DXF file using a p6 script this morning.  On the slow side, alas...

[17:14] *** rurban joined
[17:14] *** rurban left
[17:14] <[Coke]> which p6?

[17:14] <TimToady> the one with slow strings, probably :P

[17:16] *** rurban joined
[17:18] * jnthn wonders if he should try and fix that this month :)

[17:20] * vendethiel wonders if he should just fix the month itself...

[17:23] <jnthn> .ask lizmat if S02-magicals\KERNEL.rakudo.moar failing test 27 is anything to be expected from current churn, or if it's likely a platform-specific thing I should look into

[17:23] <yoleaux> jnthn: I'll pass your message to lizmat.

[17:25] <TimToady> June would be much more fixed if emperors didn't keep stealing days from February...

[17:25] <TimToady> adding leap seconds to the end of June doesn't help either

[17:31] <dalek> Perlito: e16e072 | (Flavio S. Glock)++ | / (3 files):

[17:31] <dalek> Perlito: Perlito5 - 'use constant'

[17:31] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/e16e072a17

[17:31] <japhb> If you can't steal days from other months, what's the point of being emperor?

[17:32] *** ajr_ left
[17:33] <TimToady> btw, forgot to mention that I installed a Warnsdorff solver into http://rosettacode.org/wiki/Solve_a_Hidato_puzzle#Perl_6, and then used it to add entries for http://rosettacode.org/wiki/Solve_a_Numbrix_puzzle#Perl_6 and http://rosettacode.org/wiki/Solve_a_Holy_Knight%27s_tour#Perl_6

[17:33] <dalek> Perlito: f8653da | (Flavio S. Glock)++ | / (2 files):

[17:33] <dalek> Perlito: Perlito5 - TODO update (use vars/use constant)

[17:33] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/f8653da7fd

[17:33] <TimToady> unfortunately J passed us by, so we're back in sixth place, and Ruby is also breathing down our necks

[17:34] <TimToady> for the good news, we're about to pass C

[17:35] <japhb> It's really cool how much the various language communities get into it.

[17:35] <TimToady> well, it's mostly the insane people that get into it :)

[17:36] <japhb> Where is the leaderboard?

[17:36] <TimToady> http://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity

[17:37] <FROGGS> these REXX solutions make me shudder

[17:38] <FROGGS> like this: http://rosettacode.org/wiki/Solve_a_Numbrix_puzzle#REXX

[17:38] <TimToady> though if you run the program there, you'll discover we're only 2 behind C at this point

[17:38] <TimToady> yes, REXX is a very different culture

[17:39] <[Coke]> tcl: we're number one!

[17:40] <xfix> http://modules.perl6.org/

[17:40] <xfix> Ï = 2Ï

[17:40] <xfix> Something went wrong here.

[17:40] <xfix> (probably some silly encoding issue, I will check)

[17:44] *** ajr joined
[17:44] <japhb> [Coke]: Man, the TCL community must have some serious completionists.

[17:45] *** ajr is now known as Guest82067

[17:45] *** Guest82067 is now known as ajr_

[17:46] *** martinzaremba joined
[17:46] <xfix> On codegolf.se, everything has to be done in GolfScript, no matter what else enters.

[17:48] *** molaf joined
[17:53] <TimToady> japhb: it's mostly one serious completionist on RC :)

[17:58] <nwc10> so, is Perl 6 finished when it overtakes TCL to get top spot? :-)

[17:58] *** denis_boyun_ left
[18:00] *** virtualsue left
[18:00] <[Coke]> if that's our goal, yes, we're finished.

[18:02] <nwc10> less flippantly, even if Perl 6 does overtake TCL, it won't be easy to stay top

[18:02] <nwc10> so, nothing will ever be finished finished

[18:06] *** raiph left
[18:07] <ajr_> If you don't keep coming up with material for journalists to speculate about, they'll start asking "Is X dead?"

[18:07] *** aboutGod joined
[18:08] *** moistcherry is now known as hoverboard

[18:09] <jnthn> I figured out how that weird <-> $_ { ... } bug comes about...

[18:09] *** colomon left
[18:10] *** pecastro joined
[18:10] <masak> ooh

[18:16] *** rurban left
[18:17] *** aboutGod left
[18:17] <jnthn> I figure I need to eat before fixing it :)

[18:19] <FROGGS> std: <.&uri_alpha>

[18:19] <camelia> std ec3d853: OUTPUT«ok 00:00 121m␤»

[18:19] <FROGGS> std: <[\w]+.&uri_alpha>

[18:19] <camelia> std ec3d853: OUTPUT«ok 00:00 121m␤»

[18:19] <FROGGS> m: <.&uri_alpha>

[18:19] <camelia> rakudo-moar f146fe: ( no output )

[18:19] <TimToady> nice qw thinges there

[18:19] <FROGGS> m: <[\w]+.&uri_alpha>

[18:19] <camelia> rakudo-moar f146fe: ( no output )

[18:19] *** aindilis left
[18:20] * TimToady suggests adding //

[18:22] <TimToady> std: / <[\w]+.&uri_alpha> /

[18:22] <camelia> std ec3d853: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse metachar at /tmp/ndVMvclxpH line 1:␤------> [32m/ [33m⏏[31m<[\w]+.&uri_alpha> /[0m␤Couldn't find final '>'; gave up at /tmp/ndVMvclxpH line 1:␤------> [32m/ <[\w]+[33m⏏[31m.&uri_alpha> /[0m␤    …»

[18:24] <FROGGS> m: my token foo { <digit> }; say "123" ~~ / <[\d]+foo>+ / # how do I make that work?

[18:24] <camelia> rakudo-moar f146fe: OUTPUT«No such method 'foo' for invocant of type 'Cursor'␤  in method ACCEPTS at src/gen/m-CORE.setting:13260␤  in block  at /tmp/exmutOgT87:1␤␤»

[18:24] <FROGGS> I cannot put an & there

[18:24] <FROGGS> TimToady: ahh, now I understand you comment :o)

[18:24] *** rurban joined
[18:30] <FROGGS> ahh w/e, I am turning it into a group

[18:32] * masak .oO( meta-laziness: can't even be bothered to spell out 'whatever'... ) :P

[18:32] *** treehug88 left
[18:32] *** treehug8_ joined
[18:32] <FROGGS> *g*

[18:36] *** rindolf left
[18:40] *** colomon joined
[18:41] *** cognominal left
[18:49] *** fhelmberger joined
[18:50] <dalek> perl6-roast-data: 988fa3e | coke++ | / (6 files):

[18:50] <dalek> perl6-roast-data: today (automated commit)

[18:50] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/988fa3e9e3

[18:52] <japhb> masak, did you see the draft slides I posted earlier?  Comments welcome ...

[18:52] <[Coke]> still no clean test runs for rakudo.

[18:53] *** martinzaremba left
[18:54] *** fhelmberger left
[18:55] *** virtualsue joined
[18:55] *** dmol left
[18:55] *** sivoais joined
[19:00] *** martinzaremba joined
[19:01] *** telex left
[19:02] *** telex joined
[19:05] <FROGGS> star-m: use URI; say IETF::RFC_Grammar::URI.subparse("http://perl6.org foo", :rule<absolute_URI>)

[19:05] <camelia> star-m 2014.04: OUTPUT«｢http://perl6.org｣␤ scheme => ｢http｣␤␤»

[19:06] <FROGGS> TimToady: is there a way to use the token/method absolute_URI in a regex? so that I could match :g?

[19:06] <jnthn> Try <IETF::RFC_Grammar::URI::absolute_URI>

[19:07] <FROGGS> star-m: use URI; say "http://perl6.org foo" ~~ / <IETF::RFC_Grammar::URI::absolute_URI> /

[19:07] <camelia> star-m 2014.04: OUTPUT«｢http://perl6.org｣␤ IETF::RFC_Grammar::URI::absolute_URI => ｢http://perl6.org｣␤  scheme => ｢http｣␤␤»

[19:07] <FROGGS> O.o

[19:07] <FROGGS> I swear it did not work locally

[19:08] *** darutoko left
[19:09] *** martinzaremba left
[19:11] <masak> japhb: looking.

[19:11] <japhb> masak: Thanks!

[19:12] <masak> ...I'm gonna second whoever reacted to the .pick(3) thing in the backlog.

[19:12] <japhb> I figure about a half dozen people on this channel (give or take) probably add up to over half of all Perl 6 talks in the wild, so I should gather feedback from those people.  :-)

[19:13] <masak> it's like, I see what you're trying to do, but...

[19:13] <japhb> Awww, too bad.  Humor fell flat.  :-/

[19:13] <TimToady> I liked it

[19:13] <masak> it's not that it's not funny.

[19:13] <masak> it's more like it's a rather un-impressive example of .pick :)

[19:14] <TimToady> it's poeticial

[19:14] <japhb> Ah, OK, got it.

[19:14] <japhb> Thanks, TimToady.

[19:14] <masak> ok, moving on.

[19:15] <masak> m: my @values = (1..100).pick(10); say (minmax @values).perl

[19:15] <camelia> rakudo-moar f146fe: OUTPUT«2..91␤»

[19:15] <masak> oh, it *is* a Range.

[19:19] *** pdcawley_ left
[19:20] <sergot> good night o/

[19:20] <japhb> o/\

[19:20] <japhb> Heh.  Tried to wave, ended up clapping

[19:21] *** pdcawley joined
[19:22] *** itz joined
[19:23] *** martinzaremba joined
[19:25] *** denis_boyun_ joined
[19:28] *** dwarring joined
[19:29] *** Alula left
[19:30] *** Alula joined
[19:35] <masak> japhb: nice. great examples.

[19:35] <masak> japhb: I'm curious: where does the name "metacombinators" come from? I would have called that a combinator.

[19:36] *** virtualsue left
[19:37] <TimToady> japhb: rule arraylist  {  <value> * % [ \, ]   }   <-- the [ \, ] looks like a fossil to me, since { <value> *% \, } should have the same effect nowadays

[19:37] <TimToady> only the space after the <value> and the space after the \, matter

[19:39] <TimToady> since Mouq++ fixed it

[19:41] *** guru joined
[19:41] *** ajr_ left
[19:41] <jnthn> masak: Comes from me :)

[19:42] *** guru is now known as ajr_

[19:42] <jnthn> masak: on is a combinator for writing combinators :)

[19:42] <jnthn> masak: So I somewhat tounge-in-cheekily called it a metacombinator, and it seems to have stuck :)

[19:42] <itz> hmm I wonder if Apple's Swift lang is FLOSS?

[19:43] *** martinzaremba left
[19:43] <TimToady> japhb: I'd tend to write <-["\\\t\n]> as <-[ " \\ \t \n ]> because you can

[19:43] <jnthn> Rightly, let's see if I can fix that <-> $_ { } bug...

[19:44] <FROGGS> that is supposed to be the same as -> $_ is rw { } ?

[19:44] <jnthn> That also has the bug I guess

[19:45] <jnthn> r: my @a = 1..4; for @a <-> $_ { $_++ }; say @a

[19:45] <jnthn> m: my @a = 1..4; for @a -> $_ is rw { $_++ }; say @a

[19:45] <camelia> rakudo-moar f146fe: OUTPUT«1 2 3 4␤»

[19:45] <camelia> ..rakudo-{parrot,jvm} f146fe: OUTPUT«2 3 4 5␤»

[19:45] <camelia> rakudo-moar f146fe: OUTPUT«1 2 3 4␤»

[19:45] <masak> jnthn: oh, 'on' is the metacombinator. ok.

[19:47] <TimToady> hmm, DUMP is not exactly "Perl 6"

[19:47] *** martinzaremba joined
[19:47] <FROGGS> it is as much Perl 6 as nqp:: is

[19:48] <FROGGS> and tbh, I don't use DUMP at all

[19:48] * masak either

[19:48] <jnthn> It can be a useful guts debugging aid.

[19:49] <TimToady> just wondering if it belongs in "Why Perl6?" is all.

[19:49] <jnthn> *nod*

[19:49] <jnthn> Yeah, point.

[19:49] <TimToady> also the architecture slide that has PIRT, should that be PIR

[19:49] <jnthn> PIRT is a thing.

[19:49] <TimToady> okay

[19:50] <jnthn> (It's the thing QAST becomes, then it gets turned into text.)

[19:50] <jnthn> (It was this way with the intention that some day the textual state may vanish.)

[19:51] <TimToady> well, everything will vanish someday...

[19:51] <FROGGS> hehe

[19:51] <jnthn> Right. May as well factor in preparation :P

[19:51] <jnthn> OK, think I got a fix. :)

[19:51] * jnthn spectests it.

[19:52] <FROGGS> quick jnthn is quick

[19:52] <TimToady> "Look on my works and despair!"  --King Ozymandeus

[19:53] <TimToady> *dias

[20:01] *** virtualsue joined
[20:02] <japhb> bak from lunch, reading backlog

[20:02] <japhb> masak: Glad you like it.  :-)

[20:02] <dalek> rakudo/nom: bd78aef | jnthn++ | src/Perl6/Actions.nqp:

[20:02] <dalek> rakudo/nom: Fix <-> $_ { } / -> $_ is rw { } pointy blocks.

[20:02] <dalek> rakudo/nom: 

[20:02] <dalek> rakudo/nom: We accidentally still emitted the code to bind an implicit $_ from the

[20:02] <dalek> rakudo/nom: outer scope, scribbling over the declared parameter $_.

[20:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bd78aef595

[20:02] <japhb> masak: My patter was going to talk about 'on', actually, but that doesn't show up well in the slide.

[20:03] <japhb> TimToady: I bet it is.  I used the real JSON::Tiny code, but between your comment and jnthn's .made comment, I think JSON::Tiny could use an update.  :-)

[20:03] <japhb> (unless it's intentionally using old syntax for some backwards-compat reason)

[20:04] <japhb> Ah, jnthn replied about 'on'.  :-)

[20:04] <jnthn> OK, what else do I need to fix... :)

[20:05] <japhb> jnthn: My perl6-debug-m problems?  I haven't backlogged whether that was fixed in the last couple days.

[20:05] <jnthn> Hmm

[20:05] <jnthn> If it was, I didn't do it...

[20:06] <jnthn> Really need some tests...

[20:07] <colomon> jnthn: jvm issues? seem to be two rakudo-jvm issues bothering URI and ABC.  unfortunately I haven't had the time to golf for you.

[20:08] <japhb> TimToady: re: DUMP, I mostly put that in to indicate that we take serious debugging seriously.  But yes, I agree it's not spec.  But then, the same can said of the debugger, which I also want to show.  As soon as I have it working.  :-)

[20:08] <jnthn> Ah, some NullPointerException and pre-comp thingy?

[20:08] <colomon> pre-comp thingy for ABC

[20:08] <jnthn> m: for [1,2],[3,4] -> $a [$x,$y] { say $a.perl }

[20:08] <camelia> rakudo-moar f146fe: OUTPUT«Array.new(1, 2)␤Array.new(3, 4)␤»

[20:08] <jnthn> m: for [1,2],[3,4] -> $a [$x,$y] { say nqp::iscont($a) }

[20:08] <camelia> rakudo-moar f146fe: OUTPUT«0␤0␤»

[20:08] <jnthn> m: for [1,2],[3,4] -> $a (*@) { say nqp::iscont($a) }

[20:08] <camelia> rakudo-moar f146fe: OUTPUT«1␤1␤»

[20:09] <jnthn> m: for [1,2],[3,4] -> $a (*@) { say $a.perl }

[20:09] <camelia> rakudo-moar f146fe: OUTPUT«[1, 2]␤[3, 4]␤»

[20:09] <jnthn> m: for [1,2],[3,4] -> $a [*@] { say $a.perl }

[20:09] <camelia> rakudo-moar f146fe: OUTPUT«Array.new(1, 2)␤Array.new(3, 4)␤»

[20:09] <jnthn> hmmmm...

[20:09] <jnthn> p: for [1,2],[3,4] -> $a [*@] { say $a.perl }

[20:09] <camelia> rakudo-parrot f146fe: OUTPUT«Array.new(1, 2)␤Array.new(3, 4)␤»

[20:10] <jnthn> p: for [1,2],[3,4] -> $a (*@) { say $a.perl }

[20:10] <camelia> rakudo-parrot f146fe: OUTPUT«[1, 2]␤[3, 4]␤»

[20:10] * jnthn can guess...

[20:10] <colomon> jnthn:  and java.lang.NullPointerException in URI, yes!  You're more on top of this than I am.  ;)

[20:10] * colomon was off trying it in another window to see what the error was.

[20:11] <japhb> Re: Architecture slide, that's a transcription into PIC format of a slide I saw in a jnthn talk -- slide 25 of http://jnthn.net/papers/2013-yapceu-jvm.pdf updated with MoarVM.

[20:12] *** SevenWolf joined
[20:12] <japhb> (Source at https://github.com/japhb/japhb-talks/blob/master/WIP/why-perl6/images/architecture.pic if anyone is interested in what that looks like.)

[20:15] *** sivoais left
[20:17] <colomon> japhb: is there more to the talk somewhere?  I seem to have missed the URL...

[20:17] <FROGGS> the uri problem is something about the default_port, which is a sub call to another package

[20:18] <japhb> colomon: I'm not sure I catch your meaning.  Are you looking for http://japhb.github.io/japhb-talks/WIP/why-perl6/lightning-talk.html#/ ?

[20:18] <colomon> japhb++ # yes, yes I am

[20:18] <dalek> Perlito: dfd91f9 | (Flavio S. Glock)++ | / (4 files):

[20:18] <dalek> Perlito: Perlito5 - js - fix subscripted constant

[20:18] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/dfd91f975b

[20:18] <btyler> japhb: is the CORE of nqp in the architecture slide meant to be color coded as p6?

[20:19] <japhb> D'oh!

[20:19] <japhb> Nope.  I had that on my list to fix, and totally forgot about it before uploading.

[20:20] <japhb> (I needed to look up the most idiomatic way in PIC to describe the change of color depending on which 'compiler' instance I was drawing, and had shelved the shaving of that particular yak.)

[20:26] *** martinzaremba left
[20:27] *** rurban left
[20:29] * jnthn discovers that Rakudo's compile-time arg passing analysis is smarter than he is today...

[20:29] <jnthn> "This won't work." "Oh yes it will... --optimize=off" "lol runtime error...told you" "Oh."

[20:29] <vendethiel> :D feels good tho, no ?

[20:30] <jnthn> m: for [1,2],[3,4] -> $a [$x, $y] { say $a.perl }

[20:30] <camelia> rakudo-moar f146fe: OUTPUT«Array.new(1, 2)␤Array.new(3, 4)␤»

[20:30] <jnthn> That now doesn't lose the containerization

[20:30] <jnthn> spectset attempt 2 :)

[20:30] *** rurban joined
[20:30] <jnthn> vendethiel: Yes. :)

[20:31] <jnthn> I did the wrong fix and lost a slurpiness thingy

[20:31] <jnthn> Anyways, here's hoping things work out this time :)

[20:33] <colomon> working out this time++

[20:33] <japhb> colomon: Any comments on the slides?

[20:34] *** kaare_ left
[20:34] <colomon> japhb: only just got to closures. (juggling several balls at the moment, while 33% asleep.)

[20:34] <colomon> japhb: first impression is they are very nice

[20:34] <japhb> TimToady: BTW, aside from DUMP and possibly the Rakudo-specific bits of the debugger and architecture, anything else you object to on "It's not Perl 6" grounds or so?

[20:35] <japhb> colomon: Understood!  And thanks.  :-)

[20:36] <colomon> japhb:  my only slight hesitation is in the user-defined operator slide -- we try to tell people not to overload an operator to do different things on different types, after all.  but your example is very cute, so I would hesitate to change it.

[20:36] <jnthn> TimToady: Was there an RT ticket for the bug?

[20:36] <japhb> colomon: :-)

[20:36] <masak> jnthn: don't think so.

[20:36] <masak> oh wait.

[20:36] * masak double-czechs

[20:37] <jnthn> m: use Test; for [1,2],[3,4] -> $a [$x, $y] { isa_ok $a.VAR, Scalar }; done;

[20:37] <camelia> rakudo-moar f146fe: OUTPUT«not ok 1 - The object is-a 'Scalar'␤# Actual type: Array␤not ok 2 - The object is-a 'Scalar'␤# Actual type: Array␤1..2␤# Looks like you failed 2 tests of 2␤»

[20:37] <TimToady> I don't think there was a ticket yet--you fixed it too fast

[20:37] <TimToady> japhb: not really complaining about the DUMP even; part of Perl 6 is its culture, including tech culture

[20:38] *** sivoais joined
[20:38] <japhb> Ah, OK.

[20:38] <dalek> rakudo/nom: 394a74d | jnthn++ | src/Perl6/Actions.nqp:

[20:38] <dalek> rakudo/nom: Don't override a specified sigil in [...] unpack.

[20:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/394a74dfbf

[20:38] <colomon> afk # nom shopping

[20:38] *** colomon left
[20:39] <masak> TimToady: I'm not 100% sure https://rt.perl.org/Ticket/Display.html?id=122011 is a valid bug.

[20:39] <dalek> roast: 4e6880c | jnthn++ | S06-signature/unpack-array.t:

[20:39] <dalek> roast: Container handling test for "-> $a [$x, $y] { }".

[20:39] <dalek> roast: review: https://github.com/perl6/roast/commit/4e6880c61f

[20:40] <masak> TimToady: or rather, I agree with TheDamian in principle, but I can't find any evidence in S04 for either interpretation.

[20:40] <jnthn> On 122011, it's clear to me that FIRST should only execute if we iterate the loop at least once.

[20:40] <jnthn> Because otherwise there's no lexical scope for the FIRST phaser to exist in.

[20:40] <masak> jnthn: ...but that argument could equally well be applied to LAST...

[20:41] <jnthn> masak: Right.

[20:41] <masak> jnthn: and LAST *does* fire!

[20:41] <jnthn> masak: I was about to add I agree with Damian here.

[20:41] <masak> jnthn: besides, there's always static scopes, so that argument doesn't work either...

[20:41] <jnthn> masak: yeah but those are argh.

[20:42] <jnthn> You should have to be using BEGIN or other BEGIN-time constructs to encounter those, or doing weird crap with our-scopes.

[20:42] <masak> which *means* we'd prefer FIRST/lAST to only fire if there are iterations.

[20:42] <masak> so LAST firing anyway is the bug, just as TheDamian expects.

[20:42] <jnthn> imho, yes

[20:42] <jnthn> Well, will let TimToady++ make a ruling before I go fixing...

[20:43] <masak> I wonder if any spectests would break with that new behavior...

[20:43] * masak goes looking

[20:46] *** Rotwang left
[20:46] <jnthn> m: sub a {"foo"}; a(); say &a.soft

[20:46] <camelia> rakudo-moar f146fe: OUTPUT«(Mu)␤»

[20:46] <jnthn> m: sub a {"foo"}; a(); say &a.WHAT

[20:46] <camelia> rakudo-moar f146fe: OUTPUT«(Sub)␤»

[20:47] <jnthn> m: say (:2nd).perl

[20:47] <camelia> rakudo-moar f146fe: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/DFtwbdC53o␤Malformed radix number␤at /tmp/DFtwbdC53o:1␤------> [32msay (:2[33m⏏[31mnd).perl[0m␤    expecting any of:␤        number in radix notation␤»

[20:48] <TimToady> making LAST consistent with FIRST seems okay to me, though making it work within the lexical scope when it has to run after NEXT and the test is an interesting thing, at least if you don't want to clone every time through, uselessly except for the last time...

[20:49] *** fhelmberger joined
[20:49] *** itz left
[20:49] <masak> I would definitely expect it to capture the lexpad of the last iteration...

[20:49] <jnthn> std: say (:42monkeys).perl

[20:49] <camelia> std ec3d853: OUTPUT«ok 00:01 124m␤»

[20:49] <TimToady> m: for 1..10 -> $n { LAST { say $n } }

[20:49] <camelia> rakudo-moar f146fe: OUTPUT«10␤»

[20:49] <masak> right.

[20:50] <jnthn> TimToady: Are we liberal enough that :42monkeys passes monkeys => 42? :D

[20:50] <TimToady> m: for 10..1 -> $n { LAST { say $n } }

[20:50] <camelia> rakudo-moar f146fe: OUTPUT«(Mu)␤»

[20:50] <masak> jnthn: STD does.

[20:50] <masak> m: for 1..10 -> $n { last if $n == 7; LAST { say $n } }

[20:50] <camelia> rakudo-moar f146fe: OUTPUT«7␤»

[20:50] <TimToady> monkey => 42 was the intent

[20:50] <TimToady> *keys

[20:50] <jnthn> masak: It *parses* it. A semantic check could still allow just nd/rd/st

[20:50] <jnthn> OK :)

[20:50] <masak> jnthn: I never saw it as limited to those.

[20:50] <timotimo> is it terribly bad that i didn't get to writing the  weekly today?

[20:51] * masak hugs timotimo 

[20:51] <masak> timotimo: looking forward to reading it! <3

[20:51] <PerlJam> timotimo: not terribly bad, no. :)

[20:51] <TimToady> it's the beginning of the heat death of the universe!

[20:51] <TimToady> oh wait, that was last month

[20:52] <masak> I thought it was a bit hotter than usual this time of year...

[20:52] <TimToady> n: say :2nd

[20:52] <camelia> niecza v24-109-g48a8de3: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1355 (warn @ 5) ␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 266 (Mu.Str @ 15) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval…»

[20:52] <japhb> masak: But heat death is cold ....

[20:52] <jnthn> TimToady: STD has this:

[20:52] <jnthn> | $<num> = [\d+] <identifier> [ <?before <[ \[ \( \< \{ ]>> <.sorry("Extra argument not allowed; pair already has argument of " ~ $<num>.Str)> <.circumfix> ]?

[20:52] <jnthn> TimToady: What the <.circumfix>? Copy-pasta?

[20:53] <jnthn> *Why

[20:53] <jnthn> It's unreachable thanks to the .sorry, no?

[20:53] <jnthn> Oh wait...sorry continues, doens't it...

[20:53] <TimToady> std: :42nd($_)

[20:53] <jnthn> It's panic that doesn't.

[20:53] <camelia> std ec3d853: OUTPUT«[31m===[0mSORRY![31m===[0m␤Extra argument not allowed; pair already has argument of 42 at /tmp/BIoyLPbzaS line 1:␤------> [32m:42nd[33m⏏[31m($_)[0m␤Check failed␤FAILED 00:01 123m␤»

[20:53] *** fhelmberger left
[20:53] <jnthn> std: :42nd($_); :69th($_);

[20:53] <camelia> std ec3d853: OUTPUT«[31m===[0mSORRY![31m===[0m␤Extra argument not allowed; pair already has argument of 42 at /tmp/Otxwr9VVBn line 1:␤------> [32m:42nd[33m⏏[31m($_); :69th($_);[0m␤Extra argument not allowed; pair already has argument of 69 at /tmp/Otxwr9VVBn line 1:…»

[20:54] <jnthn> right.

[20:54] <jnthn> <-- slow today

[20:54] <masak> slow heat death.

[20:54] <timotimo> jnthn: i see you fixed the bug for arrays losing their itemness in subsignature unpacking as well as a problem with <-> $_ which i don't recall the symptoms of

[20:55] *** molaf left
[20:55] <timotimo> anything else cool i may have missed today?

[20:56] <masak> apparently, the heat death is cool.

[20:56] <jnthn> timotimo: Not from me

[20:56] <jnthn> Though if you write slowly enough then I'll maybe have :69th done in time :)

[20:57] <japhb> Heat death is also slow, so there you go.

[20:58] <hoelzro> https://github.com/github/linguist/releases/tag/v2.11.2 grrrrrrrrrr

[20:58] <hoelzro> guess whose PR didn't make it into the release?

[20:58] <TimToady> you need a better PR agency

[20:59] <masak> interesting: there are *no* spectests for what LAST does with an empty loop.

[20:59] <masak> shall I add one? :)

[21:00] <hoelzro> TimToady: I guess so =/

[21:00] <hoelzro> what really angers me is one of the maintainers has been merging pull requests left and right over the last 10 days

[21:00] <hoelzro> but he's been going in reverse chronilogical order

[21:00] <hoelzro> he even merged support for Swift as soon as that was created

[21:01] <japhb> hoelzro: That's ... odd.  Maybe trying to catch the latest versions of multi-patched PRs?

[21:01] <hoelzro> but the requests that have been sitting in the queue for 5 months or more are getting no recognition

[21:01] <japhb> I'd just talk to him and say "Hey, I notice my PR from back in <date> didn't make it in.  Can you merge it now?"

[21:01] <hoelzro> japhb: I've been looking at the activity feed; it's in descending order of the IDs

[21:01] <hoelzro> I've @ mentioned him a number of times on the issue

[21:02] <hoelzro> I have this guy's e-mail, but I don't know if contacting him that way would be appropriate

[21:02] <TimToady> obviously the more recent ones have the potential to be more urgent, since the older ones obviously aren't :)

[21:02] <hoelzro> TimToady: heh

[21:02] <hoelzro> you know what?

[21:02] <hoelzro> maybe I should just file a brand new pull request

[21:03] <japhb> hoelzro: Is he GitHub staff?

[21:03] <hoelzro> thanks btyler for your support

[21:03] <hoelzro> japhb: yes

[21:03] <TimToady> but maybe he just cycles, and the new ones will now be after the old ones...

[21:03] <japhb> You could always ping him that way.  I believe there's even a #github on this network.

[21:03] <hoelzro> haha

[21:03] <hoelzro> hmm

[21:03] <hoelzro> that's a good point

[21:03] <hoelzro> it's not waiting for merging; that I can understand

[21:04] <hoelzro> it's that the older stuff isn't even acknowledged

[21:04] <japhb> nodnod

[21:04] <TimToady> I remember being astounded the first time I ran into a user of rn that wanted to read newsgroups cyclically, not in order of preference

[21:05] <TimToady> so much so that I remember his name

[21:05] <dalek> roast: 1bb76a6 | masak++ | S04-phasers/in-loop.t:

[21:05] <dalek> roast: [S04-phasers/in-loop.t] LAST in empty loop

[21:05] <dalek> roast: 

[21:05] <dalek> roast: Test for #122011.

[21:05] <dalek> roast: 

[21:05] <dalek> roast: See also backlog at http://irclog.perlgeek.de/perl6/2014-06-02#i_8809555

[21:05] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122011

[21:05] <dalek> roast: review: https://github.com/perl6/roast/commit/1bb76a666d

[21:08] <masak> jnthn: voilà, failing test ;)

[21:09] <jnthn> masak: Woulda been good if you fadge it...

[21:09] <jnthn> Or is this a trick to make me fix it fast? :P

[21:09] <masak> ...mayyybeee...

[21:09] <masak> depends.

[21:09] <masak> is it working? :P

[21:10] <dalek> rakudo/nom: 32e8b4a | jnthn++ | src/Perl6/ (2 files):

[21:10] <dalek> rakudo/nom: Implement :42nd form of colonpairs.

[21:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/32e8b4ae92

[21:10] <jnthn> No, 'cus I was doing ^^

[21:10] <dalek> roast: 68c1393 | jnthn++ | S02-literals/adverbs.t:

[21:10] <dalek> roast: Basic tests for numeric adverbs.

[21:10] <dalek> roast: review: https://github.com/perl6/roast/commit/68c1393f3b

[21:11] <FROGGS> does that mean I could pass :1day to Date math methods?

[21:11] <jnthn> yes.

[21:11] <FROGGS> nice

[21:12] <timotimo> oh, so it's any combination of : + number + word?

[21:12] <timotimo> and that becomes what exactly again?

[21:12] <FROGGS> :1day will become day => 1

[21:12] <FROGGS> right?

[21:12] <jnthn> aye

[21:13] <jnthn> timotimo: \d+ <identifier>

[21:13] <FROGGS> wfm

[21:14] <timotimo> oh

[21:14] <vendethiel> clang warnings are really impressive, ehh...

[21:14] <timotimo> that's cute

[21:14] *** skids left
[21:14] <timotimo> OpenSSL::Exploit.new(:0day)

[21:15] <japhb> timotimo: Which one now?

[21:15] <japhb> Or were you just trying out :0day?

[21:15] <timotimo> just testing the syntax ;)

[21:15] <japhb> heh

[21:15] <timotimo> openssl is such an easy target

[21:15] <timotimo> hey!

[21:15] <timotimo> we can soon have goto fail in perl6, too! :D

[21:15] <japhb> At this point, I just expect that it's real ... and I was already thinking "Great, now I have to reboot all my active sessions, sigh ...."

[21:16] <timotimo> mhm :S

[21:17] <jnthn> masak: hmm...actually the test file you added it to doesn't get run yet

[21:17] <jnthn> masak: Further, tests 1/2 don't pass

[21:18] *** PZt left
[21:18] <masak> oh, *that's* why they didn't pass.

[21:18] <masak> I also noticed that.

[21:18] <masak> jnthn: would it be better if I started a new file?

[21:18] <jnthn> Did you look into why at all?

[21:18] <masak> say, S04-phasers/last.t ?

[21:18] <timotimo> oh my

[21:18] <jnthn> No, we can fudge teh first two, just wondered if you'd analyzied it a bit

[21:18] <jnthn> last.t would be fine with me, yeah

[21:18] <timotimo> swift uses .. for ..^ and ... for ..

[21:18] <jnthn> oh wait, does that exist?

[21:19] <masak> jnthn: as to why, I noticed that 'NEXT' and 'LEAVE' were interleaved in at least one place.

[21:19] <masak> jnthn: no, last.t does not exist yet.

[21:19] <masak> I offered to create it.

[21:19] <masak> and dump the new test in there.

[21:19] <jnthn> masak: I misunderstood and thought you were saying to add it to an existing last.t

[21:19] <jnthn> Anyway, can stay where it is

[21:19] <masak> oki

[21:19] <masak> just fudge all three?

[21:19] <jnthn> Well, we don't run it at all yet

[21:20] <jnthn> So I cna fudge the first 2 and add it once I fix the 3rd

[21:20] <masak> oki \o/

[21:20] * masak managed not to break anything, despite not being very careful o/

[21:21] <japhb> .oO( The bull charged through the china shop ... and somehow managed not to knock anything over! )

[21:21] <masak> nwc10: Python 2.7.7 gets released -- https://mail.python.org/pipermail/python-dev/2014-June/134694.html -- HN discussion is full of py2/py3 comments -- https://news.ycombinator.com/item?id=7833550

[21:22] <masak> nwc10: glad it's not just Perl :)

[21:22] * TimToady is so glad we decided to break everything that needed breaking all at once

[21:22] <jnthn> japhb: I'd say "that's bull", but... :)

[21:27] <japhb> 'The second security issue is an integer

[21:27] <japhb> overflow in the strop module. [2] (You actually have no reason

[21:27] <japhb> whatsoever to use the strop module.)'

[21:27] <japhb> *chuckle*

[21:31] *** donaldh joined
[21:32] * masak .oO( just strop using that module, already )

[21:32] <masak> s/already/m'kaay?/

[21:33] <japhb> I heard that thought in two completely different voices before and after the s///

[21:33] * jnthn noms a stropwafel insecurely

[21:33] *** anaeem1_ left
[21:33] <japhb> jnthn: Is that putting a half-eaten stropwafel back on top of the tea cup that it could now easily fall into?

[21:34] <masak> no, it's eating it while not wearing a seatbelt.

[21:34] <masak> or while not having fixed the heartbleed bug.

[21:39] *** denis_boyun_ left
[21:41] *** SevenWolf is now known as wolf

[21:41] *** wolf is now known as SevenWolf

[21:45] *** atta joined
[21:47] * PerlJam wonders if it would be useful to shadow Toby Inkster's Modern Object Oriented Programming in Perl book with an equivalent one using Perl 6.

[21:49] *** colomon joined
[21:50] <masak> books that exist are better than books that don't. 'specially Perl 6 books.

[21:53] *** virtualsue left
[21:55] *** oetiker_ joined
[21:55] * timotimo off to bed

[21:55] <timotimo> o/

[21:55] <timotimo> make more stuff for the weekly! :)

[21:58] <masak> ;)

[21:59] <Ulti> where can I find the docs on writing docs? :3

[21:59] <Ulti> POD6 is a thing now right?

[21:59] <masak> yes.

[22:00] <masak> we like to spell it 'Pod'.

[22:00] <masak> see S26.

[22:00] <Ulti> thanks

[22:00] *** hoverboard left
[22:01] *** rurban left
[22:02] <Ulti> heh S26 is suitably documentation like for something documenting documentation :D

[22:04] <dalek> roast: a20558f | jnthn++ | S04-phasers/in-loop.t:

[22:04] <dalek> roast: Fudge and fix a warning.

[22:04] <dalek> roast: review: https://github.com/perl6/roast/commit/a20558f522

[22:04] <dalek> rakudo/nom: bec414d | jnthn++ | src/core/MapIter.pm:

[22:04] <dalek> rakudo/nom: Ensure LAST only fires if we actually iterate.

[22:04] <dalek> rakudo/nom: 

[22:04] <dalek> rakudo/nom: Fixes RT#122011.

[22:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bec414d7c0

[22:04] <dalek> rakudo/nom: f993683 | jnthn++ | t/spectest.data:

[22:04] <dalek> rakudo/nom: Run S04-phasers/in-loop.t.

[22:04] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122011

[22:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f99368389b

[22:05] <masak> jnthn++

[22:07] <jnthn> m: y/lr/rl/

[22:07] <camelia> rakudo-moar 394a74: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/nXxpXp2BxA␤Two terms in a row␤at /tmp/nXxpXp2BxA:1␤------> [32my/lr/rl/[33m⏏[31m<EOL>[0m␤    expecting any of:␤        argument list␤        postfix␤        infix stopper␤     …»

[22:07] <jnthn> std: y/lr/rl/

[22:07] <camelia> std ec3d853: OUTPUT«[31m===[0mSORRY![31m===[0m␤Bogus term at /tmp/mW6AYAYWc3 line 1 (EOF):␤------> [32my/lr/rl/[33m⏏[31m<EOL>[0m␤Undeclared routines:␤  'lr' used at line 1␤    'rl' used at line 1␤    'y' used at line 1␤       (in Perl 6 please use tr instead)␤Parse fa…»

[22:08] <jnthn> Hmmm

[22:08] <jnthn> I wanted to nab something from STD but...

[22:10] <jnthn> oh, it does get it...

[22:10] <jnthn> hmm

[22:10] *** Sqirrel left
[22:12] *** kivutar left
[22:15] *** Sqirrel joined
[22:20] *** dmol joined
[22:22] *** martinzaremba joined
[22:25] *** martinzaremba left
[22:30] *** martinzaremba joined
[22:31] <japhb> Are Rakudo's Perl6::Grammar and STD still far apart, or pretty close now?  (The last time I thought about it was back when Niecza was actively developed, and at that time the contrast was large enough for people to point out semi-regularly.)

[22:32] *** martinzaremba left
[22:32] <jnthn> No, there's been a lot of convergence.

[22:33] <dalek> rakudo/nom: d78b631 | jnthn++ | src/core/Any.pm:

[22:33] <dalek> rakudo/nom: Make join not explode over Str type objects.

[22:33] <dalek> rakudo/nom: 

[22:33] <dalek> rakudo/nom: Fixes RT#120846.

[22:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d78b63187d

[22:33] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120846

[22:34] *** xenoterracide left
[22:35] <jnthn> git commit

[22:35] <jnthn> lol

[22:35] <dalek> roast: 7272e0e | jnthn++ | S02-types/array.t:

[22:35] <dalek> roast: Test for RT#120846.

[22:35] <dalek> roast: review: https://github.com/perl6/roast/commit/7272e0e1bc

[22:35] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120846

[22:35] <jnthn> "This is not the window you're looking for..."

[22:35] *** martinzaremba joined
[22:36] *** ajr_ left
[22:40] <dalek> roast: 450bd71 | jnthn++ | S02-types/lazy-lists.t:

[22:40] <dalek> roast: Test for RT#120035.

[22:40] <dalek> roast: review: https://github.com/perl6/roast/commit/450bd712f3

[22:40] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120035

[22:43] <jnthn> r: loop { CATCH { default { say 'hi' } } }

[22:43] <camelia> rakudo-{parrot,jvm,moar} f99368: OUTPUT«(timeout)»

[22:44] <jnthn> r: my $i = 0; while $i++ < 2 { when 'hi' { } }

[22:44] <camelia> rakudo-{parrot,jvm,moar} f99368: ( no output )

[22:45] <jnthn> If anybody fancies writing some tests, RT#120498 can be closed with them.

[22:45] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120498

[22:45] <jnthn> Enough for me tonight, I think :)

[22:45] <masak> jnthn++

[22:48] <jnthn> FROGGS: You can probably close https://rt.perl.org/Ticket/Display.html?id=67660 :)

[22:48] *** skids joined
[22:49] *** fhelmberger joined
[22:49] <masak> ooh, and old one :)

[22:50] <masak> an*

[22:50] *** Pleiades` left
[22:52] <skids> Wow, there are 42 forms of colonpair notation? :-)

[22:53] *** btyler left
[22:54] *** fhelmberger left
[22:56] *** Pleiades` joined
[22:57] <jnthn> m: :100colon_pair_notations.perl.say

[22:57] <camelia> rakudo-moar f99368: OUTPUT«"colon_pair_notations" => 100␤»

[22:57] <jnthn> :)

[22:57] *** treehug8_ left
[23:00] *** spider-mario left
[23:00] *** jack_rabbit joined
[23:02] <jnthn> 'night, #perl6

[23:04] *** xenoterracide joined
[23:05] *** rurban joined
[23:07] *** rurban1 joined
[23:11] *** rurban left
[23:13] *** hoverboard joined
[23:16] <masak> wow, jnthn went to bed before me tonight? :)

[23:16] <masak> 'night, #perl6

[23:18] *** donaldh left
[23:19] *** rurban1 left
[23:26] *** xenoterracide left
[23:29] <japhb> o/

[23:30] *** lizmat joined
[23:35] *** rurban joined
[23:38] *** woolfy joined
[23:39] *** BenGoldberg joined
[23:42] *** rurban left
[23:46] *** cognominal joined
[23:47] *** rurban joined
[23:47] *** bbkr joined
[23:49] *** dmol left
[23:51] *** hoverboard left
[23:55] *** rurban left
[23:57] *** martinzaremba left
[23:58] <lizmat> good *, #perl6!

[23:58] <yoleaux> 17:23Z <jnthn> lizmat: if S02-magicals\KERNEL.rakudo.moar failing test 27 is anything to be expected from current churn, or if it's likely a platform-specific thing I should look into

[23:59] <lizmat> jnthn: it means that the kernel name is not known: if you run the fudged perl6 file, it should tell you that

[23:59] <lizmat> r: say $*KERNEL.name  # jnthn: what does that say for you?

[23:59] <camelia> rakudo-{parrot,jvm,moar} d78b63: OUTPUT«linux␤»

