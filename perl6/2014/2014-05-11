[00:05] *** hoverboard left
[00:10] *** hoverboard joined
[00:11] *** pippo left
[00:19] *** rurban joined
[00:23] *** rurban left
[00:31] *** hoverboard left
[00:33] * lue wonders how hard it would be for  postcircumfix:<{ }> not defined for type Str  to instead be  postcircumfix:«< >» not defined for type Str  when <> was used instead of {} ...

[00:43] <timotimo> why is IO::Spec::splitfile's nofile parameter not a named?

[00:48] <timotimo> oh, it is

[00:48] <timotimo> but not in the docs.

[00:48] <timotimo> er, specs.

[00:50] <timotimo> it seems like you cannot watch a non-existing file?

[00:51] <timotimo> but nothing seems to complain about non-existing files

[00:53] <BenGoldberg> Is file watching done by libuv?

[00:53] <timotimo> yes

[00:56] *** araujo left
[00:56] <timotimo> modification watching is just ... ugh

[00:56] <timotimo> bbl.

[00:57] *** araujo joined
[01:03] *** thou joined
[01:05] *** Su-Shee_ joined
[01:08] *** Su-Shee left
[01:16] *** FROGGS left
[01:18] *** klapperl joined
[01:20] *** rurban joined
[01:22] *** klapperl_ left
[01:23] *** lue left
[01:24] *** rurban left
[01:28] *** FROGGS joined
[01:36] *** lue joined
[01:44] *** kurahaupo joined
[01:57] *** plobsing left
[01:58] *** plobsing joined
[02:01] *** bjz left
[02:01] *** telex left
[02:02] *** telex joined
[02:07] <dalek> ecosystem: f314638 | (Andrew Egeler)++ | / (2 files):

[02:07] <dalek> ecosystem: November has its own META; remove from SHELTER

[02:07] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/f3146380d0

[02:10] *** colomon left
[02:11] *** colomon joined
[02:13] *** kurahaupo_mobile joined
[02:15] *** kurahaupo left
[02:20] *** rurban joined
[02:20] *** kurahaupo_mobile is now known as kurahaupo

[02:22] *** hoverboard joined
[02:25] *** rurban left
[02:26] *** kst` joined
[02:27] *** kst left
[02:42] *** rurban joined
[02:46] *** MikeFair_ left
[02:47] *** bjz joined
[02:51] *** virtualsue left
[02:54] *** cooper- left
[03:20] <dalek> roast: 52e0238 | (David Warring [email@hidden.address] | integration/advent2010-day (4 files):

[03:20] <dalek> roast: adding 2010 advent days 6, 7, 8 10

[03:20] <dalek> roast: review: https://github.com/perl6/roast/commit/52e02385eb

[03:23] *** hoverboard left
[03:42] *** hoverboard joined
[04:03] *** dwarring left
[04:03] *** logie_ joined
[04:08] *** logie_ left
[04:19] *** rurban left
[04:24] *** cooper- joined
[04:35] *** rurban joined
[04:41] *** sftp left
[04:41] *** sftp joined
[04:44] *** Crazylemon64 left
[04:55] *** rurban left
[05:16] *** kaare_ joined
[05:26] *** rurban joined
[05:28] *** rurban1 joined
[05:28] *** atta left
[05:30] *** rurban left
[05:32] *** rurban1 left
[05:37] *** dotslashb left
[05:55] *** hoverboard left
[05:57] *** BenGoldberg left
[05:58] *** SamuraiJack_ joined
[06:36] *** atta joined
[07:03] *** kurahaupo left
[07:14] *** nnunley left
[07:18] <moritz> \o

[07:30] *** rurban joined
[07:34] <FROGGS> morning moritz 

[07:34] *** rurban left
[07:39] <FROGGS>             if (uwex.result instanceof P6OpaqueBaseInstance) {

[07:39] <FROGGS>                 System.out.printf("is P6OpaqueBaseInstance%n");

[07:39] <FROGGS>                 vmex = (VMExceptionInstance)decont(uwex.result, tc);

[07:39] <FROGGS> jnthn: this explodes with: java.lang.ClassCastException: __P6opaque__72 cannot be cast to org.perl6.nqp.sixmodel.reprs.VMExceptionInstance

[07:39] <FROGGS> what am I doing wrong?

[07:42] *** darutoko joined
[08:01] *** Rotwang joined
[08:21] *** Su-Shee_ is now known as Su-Shee

[08:31] *** rurban joined
[08:32] *** denis_boyun_ joined
[08:32] *** rurban1 joined
[08:35] *** rurban left
[08:37] *** rurban1 left
[08:40] *** anaeem1 joined
[08:42] *** igorsutton joined
[08:45] *** igorsutton left
[08:48] *** igorsutton_ joined
[08:50] *** dmol joined
[08:51] *** igorsutton_ left
[09:03] *** kivutar joined
[09:05] *** denis_boyun___ joined
[09:05] *** denis_boyun_ left
[09:08] *** berekuk joined
[09:12] *** kurahaupo joined
[09:33] *** rurban joined
[09:33] *** spider-mario joined
[09:34] *** plobsing left
[09:37] *** rurban left
[09:38] *** SevenWolf left
[09:46] *** kivutar left
[09:53] <masak> good noon, #perl6

[09:54] <FROGGS> morning masak 

[09:55] <woolfy1> Is this in any way related to the use of the jvm by Perl 6?  http://www.theverge.com/2014/5/9/5699958/federal-court-overturns-google-v-oracle

[09:57] <woolfy1> http://www.businessinsider.com/google-oracle-lawsuit-is-damaging-2014-5

[09:58] *** vendethiel left
[10:01] <masak> woolfy1: don't think so.

[10:01] <FROGGS> gah' another karma point for Oracle® on my companies-that-I-hate list...

[10:02] <masak> woolfy1: we're not implementing any Java APIs.

[10:02] *** vendethiel joined
[10:02] <FROGGS> yeah

[10:02] <masak> by the way, is there anything we can do to implement JSR 223 for r-j? http://www.drdobbs.com/jvm/jsr-223-scripting-for-the-java-platform/215801163

[10:02] <tadzik> I think google is being punished by reimplementing Java SDK, sort of

[10:02] <tadzik> we're not doing that, we're just using what java provides

[10:02] <FROGGS> exactly

[10:02] <masak> I know some people who would find it very convenient to plug Rakudo into the Eclipse platform through JSR 223.

[10:03] <masak> just to be clear, what Oracle is doing (suing Google for implementing Java for Android), regardless of its legal implications, is what's commonly known as a "dick move".

[10:04] <masak> (as in "a Richard (who is not a very nice guy) move")

[10:05] *** kivutar joined
[10:06] <vendethiel> .oO( I never knew richard danced )

[10:07] <masak> they seem to want to send the signal "aaaargh Google how dare you use *our* open-sourced language for *your* purposes!?"

[10:07] <masak> which will in the end hurt Java, Oracle, Google, and Open Source.

[10:07] <masak> everybody loses.

[10:07] <vendethiel> isn't google's "java" outdated ?

[10:08] <vendethiel> the one on android

[10:08] <masak> no idea. does it make a difference?

[10:08] <vendethiel> I think it does, I don't like seeing 3 different javas running around with differences for each one, restrictions, syntax which will never be implemented, etc

[10:08] <vendethiel> .oO( one is already bad enough )

[10:14] *** berekuk left
[10:17] <Timbus> huh.. android java compiles to normal java bytecode, and then the dex compiler converts the bytecode to android dex. you might be mistaken

[10:17] *** berekuk joined
[10:18] <Timbus> i wrote my android app in scala, so

[10:19] <vendethiel> (same here)

[10:31] *** berekuk left
[10:34] *** rurban joined
[10:34] *** Rotwang left
[10:38] *** rurban left
[10:40] *** anaeem1 left
[10:40] *** igorsutton_ joined
[10:41] *** igorsutton_ left
[10:42] *** [Sno] left
[10:42] *** [Sno] joined
[10:44] *** _daniel-s__ joined
[10:45] *** daniel-s__ left
[10:45] *** denis_boyun___ left
[10:46] *** thou left
[10:50] *** kurahaupo left
[11:02] *** molaf_ left
[11:03] *** anaeem1 joined
[11:08] *** brrt joined
[11:11] *** xinming_ joined
[11:14] <masak> ooh, writing an Android app in Scala.

[11:14] *** xinming left
[11:14] <masak> that sounds like it could actually be potentially pleasant!

[11:15] *** virtualsue joined
[11:15] *** virtualsue left
[11:15] *** Rotwang joined
[11:16] *** Rotwang left
[11:16] *** denis_boyun_ joined
[11:29] *** virtualsue joined
[11:33] <dalek> nqp: eafcab0 | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[11:33] <dalek> nqp: Start using new getlexstatic_o op.

[11:33] <dalek> nqp: review: https://github.com/perl6/nqp/commit/eafcab0214

[11:33] <dalek> nqp: 43fbe2b | jnthn++ | src/NQP/Optimizer.nqp:

[11:33] <dalek> nqp: Fix NQP analysis of when callstatic is valid.

[11:33] <dalek> nqp: 

[11:33] <dalek> nqp: Makes it match Rakudo's more closely. We can cheat in NQP, but not

[11:33] <dalek> nqp: /that/ hard.

[11:33] <dalek> nqp: review: https://github.com/perl6/nqp/commit/43fbe2bc15

[11:33] <dalek> nqp: c9e9e90 | jnthn++ | src/vm/moar/stage0/ (11 files):

[11:33] <dalek> nqp: Update stage0 for MoarVM.

[11:33] <dalek> nqp: 

[11:33] <dalek> nqp: The previous bootstrap contained mis-generated code that upset a more

[11:33] <dalek> nqp: aggressive spesh. Furthermore, the generated code is far better these

[11:33] <dalek> nqp: days. Between spesh and the better stage0 (meaning we build stage 1

[11:33] <dalek> nqp: faster), the NQP build is now down to 41s (from around 50s) for me.

[11:33] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c9e9e90990

[11:33] <dalek> nqp: 7d6bcb2 | jnthn++ | / (6 files):

[11:33] <dalek> nqp: Merge remote-tracking branch 'origin/master' into lexopts

[11:33] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7d6bcb28ce

[11:33] <dalek> nqp: 25d9faa | jnthn++ | tools/build/MOAR_REVISION:

[11:33] <dalek> nqp: Bump to latest Moar for improved spesh, new lex op

[11:33] <dalek> nqp: review: https://github.com/perl6/nqp/commit/25d9faa9a7

[11:34] <dalek> rakudo/nom: a8942e4 | jnthn++ | tools/build/NQP_REVISION:

[11:34] <dalek> rakudo/nom: Get latest NQP/MoarVM, with various optimizations.

[11:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a8942e415b

[11:35] *** rurban joined
[11:41] *** rurban left
[11:55] *** thou joined
[11:59] <FROGGS> jnthn: do you have a clue about the thing I pasted earlier? (I highlighted you)

[12:00] *** thou left
[12:07] *** anaeem1 left
[12:12] <jnthn> FROGGS: Well, just 'cus the thing you have is a P6opaque doesn't mean it's a container

[12:12] <jnthn> It looks like you're trying to cast something to a VMException that you aren't allowed to assume is one.

[12:18] <tadzik> timotimo: when is p6weekly due?

[12:21] *** brrt left
[12:27] <moritz> tadzik: usually Monday, no?

[12:29] <FROGGS> jnthn: yeah, makes sense

[12:29] *** dalek left
[12:29] *** dalek joined
[12:29] *** ChanServ sets mode: +v dalek

[12:32] <timotimo> yup, monday

[12:33] <tadzik> ah, okay

[12:33] <tadzik> plenty of time to release Space Invaders then :)

[12:34] <colomon> any recent changes?  (says the man who was not able to get it to work....)

[12:38] <FROGGS> jnthn: can I dump the SixModelObject in uwex.result to get some information what is in there?

[12:40] <jnthn> Not easily...I mean, you can look at its fields in the debugger I suess

[12:40] <jnthn> *guess

[12:40] <jnthn> You might be able to find something that tries to obtain the typename somewhere else in Ops.java

[12:40] <jnthn> Like the method dispatch error

[12:40] <FROGGS> k, will have a look for that... thank you :o)

[12:42] <FROGGS> typeName() it is

[12:43] <tadzik> colomon: well, I only added xbox buttons to the menu

[12:43] <FROGGS> it is an Int

[12:43] <tadzik> and I think it's release-ready :)

[12:45] *** pecastro left
[12:56] <FROGGS> hmmm, and the Int's value in .result is 2

[12:57] <FROGGS> ahh *facepalm*

[12:58] <FROGGS> it has a block handler, not an unwind handler...

[12:59] <FROGGS> jnthn: am I allowed to give UnwindException a payload attribute?

[12:59] *** dalek left
[12:59] <jnthn> FROGGS: To carry the label?

[13:00] *** dalek joined
[13:00] *** ChanServ sets mode: +v dalek

[13:00] <FROGGS> yes

[13:00] <FROGGS> because .result is already used for block handlers

[13:00] <jnthn> Yeah...

[13:00] <jnthn> I don't immediately see a problem with doing that.

[13:00] <FROGGS> cool!

[13:12] *** rurban joined
[13:15] *** guru joined
[13:16] *** guru is now known as Guest66359

[13:16] *** Guest66359 is now known as ajr_

[13:21] <colomon> I won!  \o/

[13:22] <colomon> tadzik: Had to do DYLD_LIBRARY_PATH=. ./SpaceInvaders to make it work.

[13:26] <tadzik> hmm

[13:29] *** grep0r left
[13:29] <FROGGS> I think stuff like rpath can prevent that

[13:32] *** grep0r joined
[13:35] *** sqirrel joined
[13:44] *** molaf joined
[13:45] *** grep0r left
[13:48] *** Pleiades` left
[13:49] *** grep0r joined
[13:51] <colomon> the problem seems to be the in SDL's PATH

[13:51] <colomon> take out the ./ and it just works

[13:53] <colomon> SDL.pm line 2, I mean

[13:57] *** Pleiades` joined
[13:58] <tadzik> oh!

[13:59] *** rindolf joined
[14:03] <colomon> btw, I can confirm the gamepad interface works under OS X.  ;)

[14:04] <lizmat> good *, #perl6

[14:05] *** zakharyas joined
[14:07] <colomon> \o

[14:08] <lizmat> hmmm.  I just pulled, completely rebuild, and the spectest is showing quite a few failures *and* is much slower  :-(

[14:08] <lizmat> Files=857, Tests=32597, 216 wallclock secs ( 8.29 usr  3.90 sys + 1349.56 cusr 160.93 csys = 1522.68 CPU)

[14:09] <lizmat> t/spec/S04-declarations/will.t only shows 7 tests when run with make

[14:09] <lizmat> but if I run the fudged .rakudo.moar, it completes

[14:12] <timotimo> much slower? =o

[14:13] <timotimo> well, we do specialize huge amounts of invocations now but only put in logging instructions rather than doing actual improvements

[14:13] <timotimo> and spesh now does a fixed-point-iteration instead of one pass for eliminating dead code in specialization

[14:13] <timotimo> which results in both better specialized code and longer specializer run time

[14:14] <tadzik> colomon: nice :)

[14:15] <dalek> nqp/loop_labels: 51b5ab0 | (Tobias Leich)++ | src/vm/jvm/ (4 files):

[14:15] <dalek> nqp/loop_labels: implement label handling for rakudo's 'for' loops (nqp::handle)

[14:15] <dalek> nqp/loop_labels: review: https://github.com/perl6/nqp/commit/51b5ab063a

[14:22] <woolfy1> Wow ARM support done by ncw10++ ++ ++

[14:23] *** gtodd joined
[14:24] <jnthn> lizmat: The spectest timing is likely worse 'cus we optimize harder in various places now. In MoarVM and Rakudo's optimizer is doing a little extra work too.

[14:25] <jnthn> lizmat: The flip side is we can do better in benchmarks for code that involves hot paths.

[14:26] <lizmat> I can live with the worsening if it was to be expected

[14:27] <lizmat> strange errors that weren't there before however  :-)

[14:27] <jnthn> Well, the other thing we can do is tweak various thresholds.

[14:27] <jnthn> Oh?

[14:27] <jnthn> Nobody else reproted those :(

[14:27] <jnthn> What fails, exactly?

[14:28] <lizmat> t/spec/S04-declarations/will.t

[14:28] <FROGGS> I don't see it failing

[14:28] <lizmat> somewhere after test 7 it dies when run under test harness

[14:29] <FROGGS> lizmat: btw, there are also more advent calender related test files... so maybe it got slower due to that too

[14:30] <lizmat> perhaps

[14:30] *** Rotwang joined
[14:31] <jnthn> Well, the S17 tests seem the big slowdown for me...

[14:32] <lizmat> well, I can try to reduce the length of the sleeps, but then the chance of it failing under load increase

[14:33] <lizmat> BTW, it's also the CPU that has increased significantly, not just wallclock

[14:34] <lizmat> one from yesterday: Files=857, Tests=32624, 211 wallclock secs ( 8.05 usr  3.89 sys + 1311.61 cusr 152.84 csys = 1476.39 CPU)

[14:35] <lizmat> 1476 vs 1522 CPU

[14:35] <dalek> rakudo-star-daily: 45cf8a9 | coke++ | log/ (5 files):

[14:35] <dalek> rakudo-star-daily: today (automated commit)

[14:35] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/45cf8a9eb3

[14:36] <jnthn> lizmat: Well, as I mentioned before, I think we should probably write a TestScheduler where we write the tests in terms of virtual time.

[14:36] <jnthn> lizmat: That is, the scheduler has an internal "clock" that we control

[14:37] <FROGGS> damn, one label test fails when I run m-spectest, but passes when I run it directly... valgrind shows nothing :/

[14:37] <jnthn> lizmat: That way the tests can be fast *and* robust under load

[14:37] <lizmat> jnthn: I know we discussed this, but to be honest, I don't see how we could get that to work

[14:39] <jnthn> lizmat: Because all the time-based things we have in Supply should be taking a :$scheduler argument.

[14:40] <jnthn> my $ts = TestScheduler.new; my $seen = 0; my $s = Supply.new; $s.delay(1, :scheduler($ts)).tap({ $seen = $_ }); $s.more(1); nok $seen; $ts.advance_by(1); ok $seen;

[14:41] <jnthn> Rx has prior art

[14:42] <lizmat> ok, so first point of order is to have all Supply methods have a :scheduler parameter

[14:42] *** spider-mario left
[14:43] <jnthn> All those that schedule, yes

[14:43] *** Alina-malina left
[14:43] <jnthn> So for example, map/grep don't need one

[14:43] <jnthn> As they're pure and filtery 

[14:44] <jnthn> But uniq should 'cus of :expires, for example.

[14:44] <lizmat> well, not really, as :uniq doesn't use any timing

[14:44] <jnthn> Oh?

[14:44] <lizmat> *:expires

[14:44] <timotimo> oh btw

[14:44] <jnthn> Ah, right...

[14:44] <lizmat> it simply checks the time last seen

[14:44] <jnthn> Yeah, forget how it was implemented. :)

[14:44] <timotimo> may i suggest we make grep and other filtery ops on supplies take Mu instead of Callable?

[14:45] *** sqirrel left
[14:45] <timotimo> because smart match semantics are way cooler than only callables as filters

[14:45] <jnthn> timotimo: Should be doable

[14:45] <timotimo> maybe keep a Callable candidate around for optimization purposes if that makes sense

[14:45] <lizmat> timotimo: will look at that also

[14:48] *** Alina-malina joined
[14:48] *** SamuraiJack_ left
[14:48] <timotimo> Tack.

[14:49] <jnthn> lizmat++

[14:49] <dalek> rakudo/loop_labels_test: 9515682 | (Tobias Leich)++ | src/core/PseudoStash.pm:

[14:49] <dalek> rakudo/loop_labels_test: enable Label.next/.redo/.last for jvm

[14:49] <dalek> rakudo/loop_labels_test: review: https://github.com/rakudo/rakudo/commit/951568287b

[14:49] <timotimo> yay

[14:54] <dalek> specs: 2281be7 | (Elizabeth Mattijsen)++ | S17-concurrency.pod:

[14:54] <dalek> specs: A better example of signal().tap usage

[14:54] <dalek> specs: review: https://github.com/perl6/specs/commit/2281be79a9

[14:55] *** SamuraiJack_ joined
[15:01] *** Alina-malina left
[15:02] *** Alina-malina joined
[15:04] <timotimo> m: say (@()).perl

[15:04] <camelia> rakudo-moar a8942e: OUTPUT«().list␤»

[15:07] *** ivanshmakov left
[15:08] <FROGGS> seems legit

[15:08] *** ivanshma` joined
[15:09] <lizmat> $ perl6 src/core/SupplyOperations.pm 

[15:09] <lizmat> Segmentation fault: 11

[15:09] <lizmat> wow

[15:12] *** hoverboard joined
[15:15] *** SamuraiJack_ left
[15:16] *** hoverboard left
[15:16] *** ajr_ left
[15:16] *** guru joined
[15:17] *** ivanshma` is now known as ivanshmakov

[15:17] *** ivanshmakov left
[15:17] *** ivanshmakov joined
[15:17] *** guru is now known as ajr_

[15:21] <lizmat> jnthn: fwiw, fixed the segfault by fixing wrongly named variables

[15:21] <jnthn> Those probably shouldn't segfault...

[15:21] <lizmat> indeed, not, they shouldn't

[15:22] <timotimo> may want to rebuild a very latest moar with a fix for a dumb mistake i made?

[15:27] <timotimo> lizmat: can you time the spectests again with MVM_SPESH_DISABLE=1 in your environment and see if it makes a big difference?

[15:33] <lizmat> will do in a mo

[15:34] <lizmat> now spectesting Supply.grep(Mu $test) :-)

[15:34] <timotimo> yay :)

[15:43] *** chenryn joined
[15:48] <FROGGS> p: 1 ?? Q:PIR { say 42 } !! Q:PIR { say 21 } # :/

[15:48] <camelia> rakudo-parrot a8942e: OUTPUT«===SORRY!===␤Error while compiling op if (source text: "?? Q:PIR { say 42 } !!"): Cannot infer type from ''␤»

[15:49] <dalek> rakudo/nom: 32f0e40 | (Elizabeth Mattijsen)++ | src/core/Supply (2 files):

[15:49] <dalek> rakudo/nom: Supply.grep now allows simple smartmatch semantics

[15:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/32f0e4069a

[15:49] <dalek> roast: a92ff7c | (Elizabeth Mattijsen)++ | S17-supply/grep.t:

[15:49] <dalek> roast: Add tests for Supply.grep(smartmatch)

[15:49] <dalek> roast: review: https://github.com/perl6/roast/commit/a92ff7cf83

[15:51] <jnthn> FROGGS: Yeah, say is a void pirop and if you put it in a context that wants a result...boom like that.

[15:52] *** darutoko- joined
[15:52] <jnthn> Time for a walk, then I'll take a look at dealing with the n**2 behavior in CORE.setting compilation that's costing us a bunch...

[15:52] <timotimo> oooh nice

[15:53] *** darutoko left
[15:58] *** berekuk joined
[15:59] <lizmat> timotimo: Files=857, Tests=32634, 207 wallclock secs ( 8.16 usr  3.88 sys + 1290.51 cusr 148.27 csys = 1450.82 CPU)

[15:59] <lizmat> quite a significant difference

[15:59] <lizmat> and fewer failures

[16:01] <timotimo> oh my :|

[16:02] <FROGGS> jnthn: yeah, I don't bother much about Q:PIR in a ternary, since if/else does work

[16:05] *** Rotwang left
[16:05] <JimmyZ> lizmat: Do you have a number before the merging ?

[16:06] <lizmat> Files=857, Tests=32624, 211 wallclock secs ( 8.05 usr  3.89 sys + 1311.61 cusr 152.84 csys = 1476.39 CPU)  e.g.

[16:08] <dalek> specs: 63266bc | (Elizabeth Mattijsen)++ | S17-concurrency.pod:

[16:08] <dalek> specs: Some more about Supply.grep

[16:08] <dalek> specs: review: https://github.com/perl6/specs/commit/63266bc688

[16:17] <JimmyZ> sounds nice :P

[16:18] <lizmat> https://github.com/rakudo/star/downloads  is now empty

[16:18] <timotimo> good

[16:19] *** crazedpsyc is now known as crazedpsyc`

[16:19] *** crazedpsyc` is now known as crazedpsyc

[16:19] <FROGGS> lizmat++

[16:19] *** nnunley joined
[16:25] *** chenryn left
[16:26] *** Psyche^_ joined
[16:27] <lizmat> jnthn: a method such as Supply.elems *does* take a $seconds, but has not need for a Scheduler

[16:27] <lizmat> the only way to make that one faster, is to mess with time()

[16:28] <lizmat> same with Supply.batch

[16:28] <lizmat> (in its current implementation)

[16:30] *** Psyche^ left
[16:37] *** denis_boyun_ left
[16:43] <jnthn> lizmat: What things fail for you in spectest with spesh turned on?

[16:48] <lizmat> jnthn: not running S17-tests saves me about 30 seconds wallclock

[16:49] * lizmat runs spectest again with spesh

[16:49] <lizmat> perhaps we should add a flag to not run #conc tests ?

[16:50] *** Alula left
[16:50] <jnthn> lizmat: Well, or maybe mark some as stress tets

[16:50] *** Alula joined
[16:50] <lizmat> well, I didn't add any stress tests really

[16:51] <lizmat> the ones that come close, are actually skipped atm

[16:51] *** virtualsue left
[16:52] <jnthn> S17-scheduler/basic.t alone takes 47s to run o.O

[16:53] * lizmat checks

[16:53] <jnthn> 20s for S17-promise/basic.t

[16:54] <lizmat> yup, that's all the :at, :in, :every tests

[16:56] <jnthn> lizmat: Maybe could have a in.t, at.t, every.t

[16:57] <lizmat> sure

[16:57] <lizmat> that's on my list of things to do

[16:57] <lizmat> S17-supply just took a little longer to split

[16:58] <lizmat> I'll split the scheduler and promise tests up

[16:58] <lizmat> wrt to failing test, jnthn:

[16:58] <lizmat> t/spec/S17-supply/uniq.t

[16:59] <lizmat> Non-zero wait status: 11

[16:59] <lizmat>   Parse errors: Bad plan.  You planned 83 tests but ran 66.

[17:00] <lizmat> only fails when run under make, not when called with perl6 :-(

[17:01] <lizmat> it's using the CurrentThreadScheduler at that time, oddly enough

[17:09] *** btyler joined
[17:14] <dalek> roast: 8d53b52 | (Elizabeth Mattijsen)++ | S17-promise/ (6 files):

[17:14] <dalek> roast: Split Promise tests into separate files

[17:14] <dalek> roast: 

[17:14] <dalek> roast: For better parallel testing

[17:14] <dalek> roast: review: https://github.com/perl6/roast/commit/8d53b52c19

[17:14] <jnthn> lizmat++

[17:17] <timotimo> nice.

[17:19] *** guru joined
[17:19] *** guru is now known as Guest21672

[17:20] *** ajr_ left
[17:20] *** thou joined
[17:22] <dalek> roast: e8ed156 | (Elizabeth Mattijsen)++ | S17-scheduler/ (3 files):

[17:22] <dalek> roast: Create new test files for parallel testing

[17:22] <dalek> roast: review: https://github.com/perl6/roast/commit/e8ed1560f4

[17:24] *** thou left
[17:25] *** _daniel-s__ left
[17:26] *** _daniel-s__ joined
[17:29] *** virtualsue joined
[17:39] *** Guest21672 is now known as ajr_

[17:43] *** ajr_ left
[17:48] *** zakharyas left
[17:55] <dalek> roast: 4d4e22d | (Elizabeth Mattijsen)++ | S17-promise/start.t:

[17:55] <dalek> roast: Make sure we don't get "out of order" errors

[17:55] <dalek> roast: review: https://github.com/perl6/roast/commit/4d4e22d7f1

[17:56] <dalek> rakudo/nom: a3be5eb | (Elizabeth Mattijsen)++ | t/spectest.data:

[17:56] <dalek> rakudo/nom: Make sure we do all Promise tests

[17:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a3be5eb95d

[17:56] *** kurahaupo joined
[18:02] *** plobsing joined
[18:10] *** thou joined
[18:26] <tadzik> I blag: Polish Perl Workshop

[18:26] <tadzik> bleh

[18:27] <tadzik> mispaste :) http://ttjjss.wordpress.com/2014/05/11/new-game-space-invaders/

[18:27] <tadzik> dogwalk &

[18:30] *** kurahaupo left
[18:30] <FROGGS> tadzik++

[18:31] *** kurahaupo joined
[18:34] *** anaeem1 joined
[18:37] <dalek> roast: b2d8100 | (Elizabeth Mattijsen)++ | S17-scheduler/ (5 files):

[18:37] <dalek> roast: Spread out Scheduler tests

[18:37] <dalek> roast: 

[18:37] <dalek> roast: For better parallel testing

[18:37] <dalek> roast: review: https://github.com/perl6/roast/commit/b2d810079d

[18:38] *** igorsutton_ joined
[18:39] *** Sqirrel joined
[18:42] <dalek> rakudo/nom: 9ca7c73 | (Elizabeth Mattijsen)++ | t/spectest.data:

[18:42] <dalek> rakudo/nom: Make sure we do all Scheduler tests

[18:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9ca7c73f5c

[18:43] <lizmat> hope this helps people spectesting on Win

[18:53] *** darutoko- left
[18:53] <dalek> roast: 56b0c83 | (Elizabeth Mattijsen)++ | S17-channel/winner.t:

[18:53] <dalek> roast: Comment readability fix

[18:53] <dalek> roast: review: https://github.com/perl6/roast/commit/56b0c8320a

[18:58] *** thou left
[19:04] <dalek> rakudo/nom: 5c160e7 | (Elizabeth Mattijsen)++ | t/spectest.data:

[19:04] <dalek> rakudo/nom: Add advent2010/day(6,7,8,10) tests

[19:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5c160e75ab

[19:04] <lizmat> dwarring++

[19:09] *** dwarring joined
[19:10] *** thou joined
[19:16] *** dwarring left
[19:18] <nwc10> dear git experts, why does something keep deciding to delete src/gen/IGNOREME ?

[19:18] <nwc10> git clean -dXf doesn't do this on any other platform, just the power box

[19:18] <nwc10> src/gen is in .gitignore

[19:19] <nwc10> which seems to be something to do with the problem

[19:21] *** anaeem1 left
[19:29] <masak> nwc10: the -X flag removes files ignored by Git.

[19:29] <masak> nwc10: if you don't want that, don't provide -X or -x

[19:30] <nwc10> masak: but I'm doing exactly the same on other machines, and it doesn't get deleted

[19:30] <masak> nwc10: if you want to track rather than ignore IGNOREME, don't have a .gitignore rule that ignores it :)

[19:30] <nwc10> masak: this is MoarVM, and the problem is src/gen/IGNOREME is a file in the repository

[19:30] <masak> nwc10: if you want src/gen/ to be a tracked empty directory, may I suggest putting an empty .gitignore inside it and tracking that file?

[19:30] <nwc10> git clean -dXf is merrily deleting a tracked file

[19:31] <nwc10> masak: well, this is actually jnthn's doing :-)

[19:31] <masak> nwc10: I suspect you'll find that that particular box has an old Git.

[19:31] <nwc10> but the bit I dont't get is why I only get this happening on one machine

[19:31] <masak> nwc10: this suddenly reminds me of a bug that I found once, but that since has been fix'd.

[19:31] <jnthn> A .gitignore is probably better than an IGNOREME 

[19:34] <FROGGS> \o/ I got my tables in the pause/cpan database! Now I can write The Perl 6 Indexer™! \o/

[19:34] *** anaeem1 joined
[19:34] <jnthn> FROGGS++ \o/

[19:34] <masak> woot

[19:34] <timotimo> \o/

[19:35] <FROGGS> attaching panda to it shouldn't be too hard then :D

[19:36] <tadzik> niiice!

[19:36] <tadzik> FROGGS++

[19:36] <FROGGS> ANDK++, really :o)

[19:38] *** anaeem1 left
[19:39] *** sorear left
[19:41] *** molaf_ joined
[19:44] *** molaf left
[19:48] *** dwarring joined
[19:50] <dwarring> r: my @m <== sort <== ("c", "b", "a")

[19:50] <retupmoca> https://github.com/rakudo/rakudo/pull/268 please :)

[19:50] <camelia> rakudo-jvm 5c160e: OUTPUT«(timeout)»

[19:50] <camelia> ..rakudo-{parrot,moar} 5c160e: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Unable to parse expression in quote words; couldn't find final '>'␤        ␤at /tmp/tmpfile:1␤------> [32mmy @m <== sort <== ("c", "b", "a")[33m⏏[31m<EOL>[0m␤    exp…»

[19:51] <dwarring> that's golfed from from 2010 advent day 10 

[19:51] <dwarring> looks to me like that's getting confused with with quoted-word syntax..

[19:51] <moritz> m: my @m <== sort() <== ("c", "b", "a")

[19:51] <camelia> rakudo-moar 5c160e: ( no output )

[19:51] <dwarring> r: say <== sort>

[19:51] <camelia> rakudo-{parrot,jvm,moar} 5c160e: OUTPUT«== sort␤»

[19:52] <dalek> rakudo/nom: dd4a0e6 | (Andrew Egeler)++ | src/core/IO.pm:

[19:52] <dalek> rakudo/nom: Check for filename length instead of truthiness.

[19:52] <dalek> rakudo/nom: 

[19:52] <dalek> rakudo/nom: Otherwise, if a directory contains a file named '0', we assume no more

[19:52] <dalek> rakudo/nom: files exist (while there could still be any number left)

[19:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dd4a0e6f06

[19:52] <dalek> rakudo/nom: c1845e2 | (Tobias Leich)++ | src/core/IO.pm:

[19:52] <dalek> rakudo/nom: Merge pull request #268 from retupmoca/nom

[19:52] <dalek> rakudo/nom: 

[19:52] <dalek> rakudo/nom: Check for filename length instead of truthiness.

[19:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c1845e2b06

[19:52] <timotimo> oooh, good catch

[19:52] <moritz> dwarring: yes; it expects a term after a listop

[19:53] <retupmoca> FROGGS++

[19:53] <FROGGS> retupmoca++ # :P

[19:53] <moritz> std: my @m <== sort <== ("c", "b", "a")

[19:53] <camelia> std ec3d853: OUTPUT«ok 00:01 127m␤»

[19:53] <moritz> dunno how STD manages it

[19:54] <moritz> probably "LTM" is the answer :-)

[19:54] <FROGGS> std: <== sort>

[19:54] <camelia> std ec3d853: OUTPUT«ok 00:01 121m␤»

[19:54] <FROGGS> yeah

[19:54] <FROGGS> LTM FTW

[19:57] <masak> huh. STD has the cake and eats it somehow.

[19:58] * dwarring  starts looking at std

[19:59] <timotimo> m: class Foo is rw { has @.test }; my Foo $f .= new; my @oldtest := $f.test; $f.test := @(); $f.test.push: "hi"; say $f.test; say @oldtest;

[19:59] <camelia> rakudo-moar 5c160e: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/A2lAUPImPR␤Cannot use bind operator with this left-hand side␤at /tmp/A2lAUPImPR:1␤------> [32m; my @oldtest := $f.test; $f.test := @()[33m⏏[31m; $f.test.push: "hi"; say $f.test; say @[0m…»

[19:59] <timotimo> m: class Foo is rw { has @.test }; my Foo $f .= new; my @oldtest := $f.test; $f.test = @(); $f.test.push: "hi"; say $f.test; say @oldtest;

[19:59] <camelia> rakudo-moar 5c160e: OUTPUT«hi␤hi␤»

[19:59] <timotimo> how do i ...

[20:00] *** grep0r left
[20:05] *** grep0r joined
[20:05] *** xinming_ left
[20:15] *** btyler left
[20:15] <timotimo> i should probably figure out how to create a new object at that point or something.

[20:23] *** grep0r left
[20:28] *** lichtkind joined
[20:29] <lichtkind> soory for repeating me but was there another reason why now the jvm port was released

[20:29] <vendethiel> I don't understand that question :/

[20:30] <FROGGS> lichtkind: there are still a few module test failures

[20:30] <FROGGS> lichtkind: see https://gist.github.com/FROGGS/0ea5537eb675588baaa2

[20:30] <vendethiel> oh, why was not ?

[20:30] <jnthn> lichtkind: It's been in compiler releases for months and months.

[20:30] <jnthn> lichtkind: Just not in the Star release.

[20:30] <FROGGS> lichtkind: it looks worse than it is though, because when a dep fails, others fail too

[20:31] <jnthn> Mostly due to nativecall and other bits taking longer than the initial compiler work.

[20:31] *** kaare_ left
[20:31] <FROGGS> lichtkind: you can still build it from latest star or latest compiler release, but not every module works

[20:31] *** kaare_ joined
[20:31] *** denis_boyun_ joined
[20:31] <jnthn> Partly because it just turned out more efficient on development resources (which we're rather short on) to do the R* multi-backend work for JVM and Moar at the same time.

[20:32] <FROGGS> ahh, that reminds me that my .msi's needs testing/uploading

[20:32] <lizmat> r: say $*OUT.VAR.dynamic

[20:32] <camelia> rakudo-{parrot,jvm,moar} c1845e: OUTPUT«False␤»

[20:33] <lizmat> jnthn: shouldn't that be True ?

[20:33] <jnthn> lizmat: Probably not

[20:33] <jnthn> lizmat: There is not $*OUT declared anywhere

[20:33] <jnthn> lizmat: It fails over to looking in PROCESS

[20:33] <jnthn> (Which contains perfectly ordinary variables.)

[20:33] <lizmat> aha, ok

[20:33] <FROGGS> gnight all o/

[20:34] <lizmat> so even if we define our own $*foo (which would have .dynamic True)

[20:34] <lizmat> this would not be true for stuff in PROCESS::

[20:34] <lizmat> FROGGS: gnight!

[20:35] *** grep0r joined
[20:35] <jnthn> Yeah, .VAR is about the variable we actually reach, not the way we looked it up

[20:36] <lichtkind> lizmat: hope to show you praha

[20:36] <lizmat> r: PROCESS::<$a> = "foo"; say $*a   # indeed

[20:36] <camelia> rakudo-{parrot,jvm,moar} c1845e: OUTPUT«foo␤»

[20:36] <lichtkind> will arrive sa

[20:37] <lizmat> lichtkind: will arrive mo evening, driving down from Poznan

[20:38] <lichtkind> lizmat: you have my mobil?

[20:42] *** igorsutton__ joined
[20:42] *** igorsutton_ left
[20:46] <retupmoca> does anyone in here have a commitbit to the November repo? (https://github.com/viklund/november/pull/28)

[20:46] <retupmoca> looks like viklund hasn't been active in...a whie

[20:46] <jnthn> masak, surely...

[20:46] <retupmoca> while*

[20:48] <retupmoca> looking at the commit log, moritz may as well

[20:48] <retupmoca> anyway, that PR makes november build/test on latest rakudo-moar

[20:48] *** kaare_ left
[20:51] *** rindolf left
[20:56] *** virtualsue left
[20:59] <masak> retupmoca: looking.

[21:01] <masak> retupmoca: merged.

[21:01] <masak> retupmoca: do you know how https://github.com/viklund/november/pull/27 relates to your effort? it seems it can't be merged automatically after your fixes?

[21:05] * moritz remembers that novmber existed, bu not much more.

[21:09] <retupmoca> oh, I didn't even bother to look at other pending PRs

[21:15] <retupmoca> anyway, masak++

[21:15] <retupmoca> I can make November use URI instead of it's own thing if you want/need it, but mostly I just wanted it installable

[21:16] <retupmoca> (I'm annoyed by all the red in colomon++'s ecosystem tests, so I'm trying to make them green)

[21:16] <retupmoca> masak: also, I have https://github.com/masak/csv/pull/10 for you if you're in a PR-merging mood :)

[21:16] <colomon> retupmoca++

[21:17] *** igorsutton__ left
[21:17] *** igorsutton__ joined
[21:19] *** kivutar left
[21:19] <retupmoca> I have a few other PR's out as well. If nobody picks them up within a reasonable time, I assume I should point panda to my fixed version instead?

[21:21] <retupmoca> also, what guidelines do we have (if any) for removing things from the ecosystem? (I want to remove Enc::MIME::Base64, for example)

[21:21] <retupmoca> (it doesn't work, and the functionality it provides is in MIME::Base64)

[21:21] *** igorsutton__ left
[21:23] <retupmoca> (or instead of pointing to my fixed version of a module, should we re-point to a perl6-community-modules/foo repo of some kind?)

[21:24] *** kurahaupo left
[21:24] *** raiph joined
[21:24] *** denis_boyun_ left
[21:42] *** rurban left
[21:42] *** rurban joined
[21:47] *** rurban left
[21:50] *** lichtkind left
[21:58] <dalek> rakudo/nom: b8567ca | (Elizabeth Mattijsen)++ | src/core/Deprecations.pm:

[21:58] <dalek> rakudo/nom: Add system var deprecation capability

[21:58] <dalek> rakudo/nom: 

[21:58] <dalek> rakudo/nom: And deprecate $*OS.

[21:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b8567ca65c

[21:59] <dalek> roast: 5e70780 | (Elizabeth Mattijsen)++ | S02-types/deprecations.t:

[21:59] <dalek> roast: Add test for $*OS deprecation

[21:59] <dalek> roast: review: https://github.com/perl6/roast/commit/5e70780caa

[21:59] <lizmat> this can probably be done better, but it is a start

[22:02] <colomon> retupmoca: +1 for pointing things to perl6-community-modules/foo repo and getting deadish modules out of the ecosystem 

[22:05] *** xinming joined
[22:07] <flussence> perl6: sub a(&b($, $)) { say b(1, 2) }; sub add($x, $y) { $x + $y }; a(&add)

[22:07] <camelia> niecza v24-109-g48a8de3: OUTPUT«Unhandled exception: Unable to resolve method Capture in type Sub␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/tmpfile line 0 (a @ 1) ␤  at /tmp/tmpfile line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4595 (ANON @ 3…»

[22:07] <camelia> ..rakudo-{parrot,moar} c1845e: OUTPUT«Not enough positional parameters passed; got 0 but expected 2 in sub-signature of parameter &b␤  in sub a at /tmp/tmpfile:1␤  in block  at /tmp/tmpfile:1␤␤»

[22:07] <camelia> ..rakudo-jvm c1845e: OUTPUT«Flattening named argument must have VMHash REPR␤  in sub a at /tmp/tmpfile:1␤  in block  at /tmp/tmpfile:1␤␤»

[22:08] <flussence> is that just a NYI, or am I writing the bit between a(...) completely wrong?

[22:08] *** rurban joined
[22:12] *** labster left
[22:12] *** xinming left
[22:17] *** _daniel-s__ left
[22:17] *** daniel-s joined
[22:20] *** labster joined
[22:22] <timotimo> http://t.h8.lv/p6bench/2014-05-12-spesh_log_and_stuff.html - feel free to be the judges of whether or not spesh_log was a good merge to do or not :)

[22:26] <timotimo> since this also includes improvements like the assign_key and assign_pos changes for hashes and arrays ... hmm

[22:26] <timotimo> not sure how much of that is spesh_log and how much is the rest

[22:28] <timotimo> http://t.h8.lv/p6bench/2014-05-12-spesh_log_and_stuff_sans_startup.html - for some reason i like this one better

[22:29] *** daniel-s left
[22:29] *** daniel-s_ joined
[22:30] <timotimo> kinda sad ... and our benchmarks are still not very good >_>

[22:30] <timotimo> as in: not very representational

[22:31] <timotimo> huh, forest-fire didn't run?

[22:34] <dalek> ecosystem: e170031 | (Andrew Egeler)++ | / (2 files):

[22:34] <dalek> ecosystem: MessagePack has its own META.info

[22:34] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/e170031ba9

[22:34] <timotimo> whoever wants to can take a look at why forest fire doesn't seem to have any spreading fire any more in the perl6-bench repo

[22:34] <timotimo> please.

[22:35] *** daniel-s_ left
[22:36] <skids> Speaking of PRs, what exact repos/branches should I send PRs to for the nqp/parrot and moarvm bigint bitops fixes?

[22:37] <retupmoca> skids: I would guess perl6/nqp branch master and moarvm/moarvm branch master

[22:37] <timotimo> bigint ops are in nqp src/vm/parrot/ops/bigint_ops.ops or something

[22:37] <timotimo> and the bigint ops of moarvm are inside moarvm

[22:37] *** daniel-s_ joined
[22:38] <skids> Right I have to patch nqp and moarvm.

[22:39] <skids> Hopefully I'll not have to build an entire ecosystem to test, and can get away with pulling them into star's build.

[22:39] <timotimo> aye :)

[22:42] <timotimo> m: say (1, 2, 3, 4) ~~ 3..10; say (1, 2, 3, 4, 5) ~~ 1..4;

[22:42] <camelia> rakudo-moar b8567c: OUTPUT«False␤True␤»

[22:42] <timotimo> m: my @foo where 3..4; @foo = 1, 2, 3; @foo = <a b c>; @foo = <x y z a s d f g>;

[22:42] <camelia> rakudo-moar b8567c: ( no output )

[22:43] <timotimo> m: say <1 2 3 4 5>.^methods

[22:43] <camelia> rakudo-moar b8567c: OUTPUT«BUILD Parcel Capture elems item flat list lol reverse rotate at_pos STORE FLATTENABLE_LIST FLATTENABLE_HASH fmt of Bool Numeric Str ACCEPTS gist perl DUMP␤»

[22:45] *** rurban left
[22:45] <timotimo> m: say "foobar baz".flip

[22:45] <camelia> rakudo-moar b8567c: OUTPUT«zab raboof␤»

[22:45] <timotimo> m: say <foobar baz>.flip

[22:45] <camelia> rakudo-moar b8567c: OUTPUT«zab raboof␤»

[22:45] <timotimo> m: say <foobar baz>.reverse

[22:45] <camelia> rakudo-moar b8567c: OUTPUT«baz foobar␤»

[22:46] *** rurban joined
[22:47] <lizmat> gnight #perl6!

[22:48] <timotimo> gnite lizmat 

[22:51] *** rurban left
[23:04] <dalek> ecosystem: 9e383fb | (Andrew Egeler)++ | META.list:

[23:04] <dalek> ecosystem: Remove Enc::MIME::Base64

[23:04] <dalek> ecosystem: 

[23:04] <dalek> ecosystem: This looks like an old, unmaintained, not-working version of

[23:04] <dalek> ecosystem: MIME::Base64

[23:04] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/9e383fbe01

[23:15] *** rurban joined
[23:17] *** rurban1 joined
[23:20] *** rurban left
[23:22] *** rurban1 left
[23:33] *** xinming joined
[23:38] *** dmol left
[23:39] *** berekuk left
[23:59] *** xragnar_ joined
[23:59] *** xragnar left
[23:59] *** xragnar_ is now known as xragnar

