[00:03] <Mouq> Oh, so the :{‚Ä¶} is an adverb to the postcircumfix‚Ä¶?

[00:03] <timotimo> maybe

[00:04] <timotimo> this section isn't worded clearly enough for me :)

[00:04] <timotimo> for all those who don't follow #moarvm: jnthn has been doing cool stuff for MVM's bytecode specializer to allow it to take advantage of knowledge of types for method and sub calls

[00:05] <timotimo> this is an optimization that will benefit rakudo more than nqp, the previous optimizations were most noticable on nqp, i feel

[00:05] <Mouq> Although I'm not sure `when not /^\./` is valid‚Ä¶

[00:05] *** rurban joined
[00:06] <Mouq> I think just `:{ not m/^\./ }` would make more sense

[00:06] <timotimo> i'm not sure about that either

[00:07] <lue> r: my @a; say [&&] @a; # can't say I totally agree with this...

[00:07] <Mouq> m: 1 + 1 :{ 1 }

[00:07] <camelia> rakudo-parrot c2cc4f, rakudo-jvm c2cc4f, rakudo-moar c2cc4f: OUTPUT¬´True‚ê§¬ª

[00:07] <camelia> rakudo-moar c2cc4f: OUTPUT¬´===SORRY!===‚ê§Cannot find method 'has_compile_time_value'‚ê§¬ª

[00:08] <timotimo> so which synopsis was i looking at again ...

[00:08] <Mouq> n: 1 + 1 :{ 1 }

[00:08] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´Unhandled exception: Cannot call infix:<+>; none of these signatures match:‚ê§    Any, Any‚ê§    ‚ê§  at /tmp/Tu6dY9XCSS line 1 (mainline @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4595 (ANON @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setti‚Ä¶¬ª

[00:08] <Mouq> std: 1 + 1 :{ 1 }

[00:08] <camelia> std e347792: OUTPUT¬´ok 00:01 124m‚ê§¬ª

[00:09] <timotimo> 16b83354 S02.pod      (lwall               2008-11-27 07:46:29 +0000 3735) This just naturally falls out from the preceding rules because the

[00:09] <timotimo> this line is OLD :)

[00:10] *** rurban left
[00:10] <Mouq> n: sub infix:<+> (*@a, *%h) { say @a; say %h }; 1 + 1 :{ 1 }

[00:10] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´1 1‚ê§{"" => { ... }}‚ê§¬ª

[00:10] <timotimo> slight amendments have happened to that text in 2010

[00:10] <Mouq> n: sub infix:<+> (*@a, *%h) { say @a; say %h }; 1 + 1 :{ 1 }:b

[00:10] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´1 1‚ê§{"" => { ... }, "b" => Bool::True}‚ê§¬ª

[00:10] <timotimo> maybe mister wall would like to give this another glance

[00:11] <timotimo> ah, so :{...} is really just sugar for "" => {...}

[00:11] <timotimo> at least that piece of the mystery is explained

[00:11] <Mouq> p6: say (:{ 1 + 1}).WHAT

[00:11] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´(Pair)‚ê§¬ª

[00:11] <camelia> ..rakudo-parrot c2cc4f, rakudo-jvm c2cc4f, rakudo-moar c2cc4f: OUTPUT¬´(Block)‚ê§¬ª

[00:11] <Mouq> ^^ :/

[00:12] <timotimo> er, huh.

[00:12] <timotimo> r: say (:{ 1 + 1 }).perl

[00:12] <camelia> rakudo-parrot c2cc4f, rakudo-jvm c2cc4f, rakudo-moar c2cc4f: OUTPUT¬´Block.new()‚ê§¬ª

[00:12] <Mouq> p6: say (:[1, 1]).WHAT

[00:12] <timotimo> this surprises me.

[00:12] <camelia> rakudo-parrot c2cc4f, rakudo-jvm c2cc4f, rakudo-moar c2cc4f: OUTPUT¬´(Array)‚ê§¬ª

[00:12] <camelia> ..niecza v24-109-g48a8de3: OUTPUT¬´(Pair)‚ê§¬ª

[00:12] <Mouq> I think Rakudo is just wrong

[00:12] <Mouq> p6: say (:a[1, 1]).WHAT

[00:12] <camelia> rakudo-parrot c2cc4f, rakudo-jvm c2cc4f, rakudo-moar c2cc4f, niecza v24-109-g48a8de3: OUTPUT¬´(Pair)‚ê§¬ª

[00:12] <Mouq> But maybe I am

[00:13] <timotimo> :foo[ ... ] was new to me

[00:20] <timotimo> =time make -j4 m-install  91,26s user 0,76s system 115% cpu 1:19,79 total

[00:22] *** kurahaupo left
[00:23] <timotimo> =time make -j4 m-install  94,07s user 0,68s system 115% cpu 1:22,23 total

[00:23] <timotimo> first one with spesh, second one without

[00:24] <timotimo> without spesh peaked at 10 megabytes less maxrss

[00:24] <timotimo> (this is a clean rakudo build)

[00:25] <Mouq> woo!

[00:25] * Mouq has to go

[00:25] <Mouq> o/ #perl6

[00:25] *** Mouq left
[00:26] <timotimo> when NQP's optimizer stops being utterly scared of regexes, it should be even better

[00:37] <colomon> m: say 2**256t

[00:37] <camelia> rakudo-moar c2cc4f: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/CF_1dYxy8s‚ê§Confused‚ê§at /tmp/CF_1dYxy8s:1‚ê§------> [32msay 2**256[33m‚èè[31mt[0m‚ê§    expecting any of:‚ê§        whitespace‚ê§¬ª

[00:37] <colomon> m: say 2**256

[00:37] <camelia> rakudo-moar c2cc4f: OUTPUT¬´115792089237316195423570985008687907853269984665640564039457584007913129639936‚ê§¬ª

[00:55] <TimToady> orelse was not intended to imply a 'try' on the left side

[00:55] <TimToady> just check for undefined

[00:55] <timotimo> oh?

[00:55] <timotimo> then what does "exception semantics" mean? :)

[00:55] <TimToady> otherwise we impose mandatory try overhead on everything

[00:55] <timotimo> good to know

[00:56] <timotimo> so the tests need fixed

[00:56] <TimToady> where does it say 'exception semantics'?

[00:56] <timotimo> http://perl6.org/compilers/features#footnote_7

[00:56] <TimToady> that's...not the spec :)

[00:57] <TimToady> anyway, the original intent was that you use explicit try if that's what you want

[00:57] <timotimo> that does sound acceptable

[00:57] <TimToady> now if try has no overhead, we could rethink that

[00:57] <TimToady> but I'd like my compilers to be fast

[00:57] <timotimo> so ... the only difference between orelse and // is that if the right side is a block it gets all arguments set to the previous value and if it's not a block, it'll get $! bound in its scope?

[00:58] <TimToady> and andthen/orelse are what I wished I had when emitting P5 code for viv

[00:58] *** hoverboard joined
[00:59] <TimToady> yes, it's the retopicalization that is desirable

[00:59] <timotimo> good

[01:01] <TimToady> if you look at the output of viv, STD.pm5, you'll see bazillions of assignments and redefinitions of $C

[01:02] <TimToady> it would be lovely to be able to feed those cursors through as the current topic, and that's basically what andthen does

[01:06] <timotimo> mhm

[01:06] <timotimo> andthen seems already implemented correctly to my eyes

[01:06] *** rurban joined
[01:08] <TimToady> but viv doesn't use exceptions (except to do a 'cut' on large backtracking occasionally)

[01:08] <timotimo> and viv is still dramatically fast at what it does, isn't it? :P

[01:08] <TimToady> for having been implemented in P5, yes :)

[01:09] <TimToady> nobody ever tried to write a Perl compiler in Perl before...

[01:09] <TimToady> let alone a Perl 6 compiler :)

[01:11] <TimToady> well, there's PPI, but that's not close to a complete parser even

[01:11] *** baest left
[01:11] *** rurban left
[01:13] <TimToady> .oO(reading a large backlog based on a false premise is not my favorite thing to do...)

[01:14] <timotimo> i'm sorry about that. it's probably in big part my fault :|

[01:14] <timotimo> i blame the person who wrote the annotation to the features comparison

[01:14] <TimToady> well, I just wish I'd specced it better

[01:14] <TimToady> or noticed the footnote :)

[01:15] <TimToady> woulda saved you some work

[01:16] *** baest joined
[01:17] <timotimo> ah well

[01:18] <TimToady> n: say "[aaaaa]" ~~ / '[' ~ ']' .+? /

[01:18] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´Unhandled exception: Unable to parse anonymous regex‚ê§Couldn't find final ']'; gave up‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 1536 (die @ 5) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 2962 (Cursor.FAILGOAL @ 6) ‚ê§  at /tmp/pY59YxmYv‚Ä¶¬ª

[01:19] <TimToady> n: say "[aaaaa]" ~~ / '[' ~ ']' <-[ \] ]>+? /

[01:19] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´Unhandled exception: Unable to parse anonymous regex‚ê§Couldn't find final ']'; gave up‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 1536 (die @ 5) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 2962 (Cursor.FAILGOAL @ 6) ‚ê§  at /tmp/2nY_9EgA9‚Ä¶¬ª

[01:19] <TimToady> n: say "[aaaaa]" ~~ / '[' ~ ']' [.+?] /

[01:19] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´Unhandled exception: Unable to parse anonymous regex‚ê§Couldn't find final ']'; gave up‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 1536 (die @ 5) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 2962 (Cursor.FAILGOAL @ 6) ‚ê§  at /tmp/vMqjv9Mab‚Ä¶¬ª

[01:19] <TimToady> hmm

[01:20] <TimToady> n: say "[aaaaa]" ~~ / '[' ~ ']' a* /

[01:20] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´ÔΩ¢[aaaaa]ÔΩ£‚ê§‚ê§¬ª

[01:21] *** baest left
[01:23] <TimToady> n: say "[aaaaa]" ~~ / '[' ~ ']' [<!before ']'> .]+ /

[01:23] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´ÔΩ¢[aaaaa]ÔΩ£‚ê§‚ê§¬ª

[01:23] <TimToady> dunno what was teh matter with my neg cclass

[01:28] *** baest joined
[01:28] *** baest left
[01:31] *** klapperl joined
[01:32] <TimToady> I would like to see a use case for confusing the Promise type with the Channel type before we proceed further with confusing them

[01:33] <TimToady> I think jnthn++'s proposal of allowing a Promise to be coerced to a Channel is much simpler

[01:33] <TimToady> wandering &

[01:34] *** klapperl_ left
[01:44] *** ilbot3 left
[01:46] *** ilbot3 joined
[01:47] *** baest joined
[02:04] *** rurban joined
[02:06] *** rurban left
[02:16] <timotimo> m: say $*PERL

[02:16] <camelia> rakudo-moar c2cc4f: OUTPUT¬´("name" => "rakudo", "compiler" => {"name" => "rakudo", "ver" => "2014.03.01-72-gc2cc4fd", "release-number" => "", "build-date" => "2014-04-05T20:17:24Z", "codename" => ""}).hash‚ê§¬ª

[02:27] *** xragnar_ joined
[02:27] *** xragnar is now known as Guest92520

[02:27] *** xragnar_ is now known as xragnar

[02:31] *** Guest92520 left
[02:39] <lue> That's awfully Associative for a Scalar :)

[02:43] *** robinsmidsrod left
[02:48] *** WJB left
[02:54] *** robinsmidsrod joined
[03:17] *** rurban joined
[03:33] * [Coke] wants .WAT to be an alias to .WHAT

[03:35] <lue> [Coke]: WAT feels like a thing you call when you demand answers from the compiler.    try { 1 == 1; CATCH { WAT } }

[03:43] *** rurban left
[04:00] *** plobsing joined
[04:04] *** SamuraiJack__ joined
[04:11] *** rurban joined
[04:26] *** kaare_ joined
[04:30] *** Psyche^_ joined
[04:30] *** BenGoldberg left
[04:34] *** Psyche^ left
[04:42] *** kurahaupo joined
[04:47] *** molaf_ joined
[04:48] *** molaf left
[05:03] *** rurban left
[05:19] *** rurban joined
[05:29] *** xinming_ left
[05:31] *** xinming_ joined
[05:45] *** rurban left
[06:06] *** hoverboard left
[06:06] *** water joined
[06:06] *** water is now known as hoverboard

[06:07] *** hoverboard left
[06:11] *** aborazmeh joined
[06:38] *** darutoko joined
[06:40] *** xinming_ left
[06:40] *** xinming_ joined
[06:44] *** baest_ joined
[06:45] <moritz> lue: WAT feels like an alias to WHY (access to documentation) for me

[06:46] *** xinming_ left
[06:46] *** baest left
[06:46] *** rurban joined
[06:47] *** xinming_ joined
[06:51] *** rurban left
[06:56] *** baest_ left
[06:56] *** baest joined
[06:58] *** kaare_ left
[06:58] *** kaare_ joined
[07:00] *** baest left
[07:01] *** baest joined
[07:05] *** MikeFair joined
[07:15] *** baest left
[07:18] *** baest joined
[07:47] <lizmat> good *, #perl6!

[07:47] *** rurban joined
[07:48] <lizmat> TimToady: if we coerce a Promise to a Channel, when will the Channel be closed?  After executing .result?  Or manually ?

[07:48] <lizmat> and how would we know the difference between a real Channel and a Promise coerced to a Channel?

[07:49] <lizmat> if we would need to close the Channel "manually"

[07:49] <lizmat> breakfast&

[07:52] *** rurban left
[07:57] *** baest left
[08:00] *** kaare__ joined
[08:00] *** kaare_ left
[08:05] *** Alula left
[08:07] *** Alula joined
[08:07] *** denis_boyun_ joined
[08:09] *** baest joined
[08:12] *** baest left
[08:20] *** MikeFair left
[08:21] *** ggherdov_ left
[08:21] *** ggherdov_ joined
[08:21] *** ggherdov_ left
[08:21] *** ggherdov_ joined
[08:24] *** baest joined
[08:36] *** FROGGS[mobile] joined
[09:00] <tadzik> hello #perl6

[09:00] <lizmat> tadzik o/

[09:01] *** rurban joined
[09:04] *** btyler left
[09:05] *** dmol joined
[09:06] *** rurban left
[09:07] *** baest left
[09:08] <dalek> panda: 3be5bd5 | (Andrew Egeler)++ | lib/Panda/Builder.pm:

[09:08] <dalek> panda: Remove old Build class when using Build.pm

[09:08] <dalek> panda: 

[09:08] <dalek> panda: If two packages with Build.pm files were installed during the same panda

[09:08] <dalek> panda: run (example: "panda install MIME::Base64 Auth::PAM::Simple"), the

[09:08] <dalek> panda: second and subsequent packages would all fail to build, as the Build

[09:08] <dalek> panda: class already existed when the Build.pm file attempted to create it.

[09:08] <dalek> panda: review: https://github.com/tadzik/panda/commit/3be5bd5d02

[09:08] <dalek> panda: b24c561 | tadzik++ | lib/Panda/Builder.pm:

[09:08] <dalek> panda: Merge pull request #75 from retupmoca/master

[09:08] <dalek> panda: 

[09:08] <dalek> panda: Remove old Build class when using Build.pm

[09:08] <dalek> panda: review: https://github.com/tadzik/panda/commit/b24c5618ad

[09:10] *** spider-mario joined
[09:12] *** baest joined
[09:22] <dalek> panda: 99da3b3 | (Andrew Egeler)++ | / (2 files):

[09:22] <dalek> panda: Read from all state files we can find

[09:22] <dalek> panda: 

[09:22] <dalek> panda: Not just the first writable one we find. This (for example) allows a (root) install of

[09:22] <dalek> panda: perl6+panda into /usr/local; along with some modules such as URI and

[09:22] <dalek> panda: MIME::Base64. A user can then run 'panda install LWP::Simple' and will

[09:22] <dalek> panda: not need to reinstall URI and MIME::Base64, because panda will now see

[09:22] <dalek> panda: the modules installed in /usr/local

[09:22] <dalek> panda: review: https://github.com/tadzik/panda/commit/99da3b3a82

[09:22] <dalek> panda: 73c2ade | (Andrew Egeler)++ | bin/panda:

[09:22] <dalek> panda: Don't read extra statefiles if doing site install

[09:22] <dalek> panda: 

[09:22] <dalek> panda: This could cause problems if there were modules installed in

[09:22] <dalek> panda: /root/.perl6 for example. If we're doing a site install, all

[09:22] <dalek> panda: dependents need to be in site as well.

[09:22] <dalek> panda: review: https://github.com/tadzik/panda/commit/73c2ade89c

[09:22] <dalek> panda: c19fb6b | tadzik++ | / (2 files):

[09:22] <dalek> panda: Merge pull request #76 from retupmoca/multistate

[09:22] <dalek> panda: 

[09:22] <dalek> panda: Read from all state files we can find

[09:22] <dalek> panda: review: https://github.com/tadzik/panda/commit/c19fb6b854

[09:31] <jnthn> m: my $ansprom = start { 42 }; sub p2c($p) { my $c = Channel.new; $p.then({ $p.status == Kept ?? $c.send($p.result) !! $c.fail($p.excuse) }); $c }; my $ansc = p2c($ansprom); say $c.receive

[09:31] <camelia> rakudo-moar c2cc4f: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/r0vWXjwti5‚ê§Variable '$c' is not declared‚ê§at /tmp/r0vWXjwti5:1‚ê§------> [32mmy $ansc = p2c($ansprom); say $c.receive[33m‚èè[31m<EOL>[0m‚ê§    expecting any of:‚ê§        method arguments‚ê§¬ª

[09:31] <jnthn> m: my $ansprom = start { 42 }; sub p2c($p) { my $c = Channel.new; $p.then({ $p.status == Kept ?? $c.send($p.result) !! $c.fail($p.excuse) }); $c }; my $ansc = p2c($ansprom); say $ansc.receive

[09:31] <camelia> rakudo-moar c2cc4f: OUTPUT¬´(signal ABRT)42‚ê§¬ª

[09:31] <jnthn> lizmat: ^^

[09:33] <jnthn> TimToady, lizmat: In the early days of the promise/channel work, there was no more/done. Instead, you did select on a "completed" promise exposed by the channel. And there was no array form.

[09:36] <FROGGS[mobile]> "in the early days"... wow, how time flies *g*

[09:36] <lizmat> hehe

[09:38] <lizmat> it seems to me to be a lot of overhead to turn a Promise into a Channel

[09:40] <jnthn> I don't think it's too bad.

[09:40] <jnthn> And I don't know it'll be an especially common thing.

[09:40] <jnthn> Oh, it should $c.close in the kept path there too.

[09:41] <jnthn> Thing is that promises complete asynchronously, and channels are things you wait for a value from synchronously.

[09:41] <jnthn> Those boundaries are always tricky.

[09:42] <lizmat> indeed

[09:42] <lizmat> but you may not always wait for values on channels synchronously

[09:44] <lizmat> in any case, I'm removing Redeem from the spec now

[09:44] <lizmat> if we would have anything like that, it would be orthogonal to the status of the Promise

[09:48] *** baest_ joined
[09:49] <dalek> specs: 4134f88 | (Elizabeth Mattijsen)++ | S17-concurrency.pod:

[09:49] <dalek> specs: Remove Redeemed/.redeem

[09:49] <dalek> specs: review: https://github.com/perl6/specs/commit/4134f880fd

[09:50] *** baest left
[09:51] <lizmat> so now we need to keep state outside of the outcome  :-(

[09:58] *** baest_ left
[09:59] *** baest joined
[10:02] *** rurban joined
[10:06] *** rurban left
[10:08] *** SamuraiJack__ left
[10:17] *** baest left
[10:18] *** denis_boyun_ left
[10:20] *** denis_boyun joined
[10:22] *** baest joined
[10:34] *** xinming_ left
[10:36] *** xinming_ joined
[10:36] *** plobsing left
[10:46] *** xinming_ left
[10:47] *** xinming_ joined
[10:48] *** baest left
[10:51] *** xinming_ left
[10:53] *** xinming_ joined
[10:55] *** baest joined
[10:58] *** xinming_ left
[10:58] *** ggoebel11119 left
[10:59] *** xinming_ joined
[11:00] <timotimo> o/

[11:03] *** xinming_ left
[11:04] *** xinming_ joined
[11:05] *** baest left
[11:05] *** baest joined
[11:10] *** xinming_ left
[11:11] *** xinming_ joined
[11:12] *** SamuraiJack__ joined
[11:19] *** xinming_ left
[11:21] *** xinming_ joined
[11:30] *** baest_ joined
[11:32] *** baest left
[11:36] *** baest_ left
[11:41] *** baest joined
[11:49] *** baest left
[12:03] *** rurban joined
[12:04] <dalek> rakudo/nom: f6e6650 | jnthn++ | src/core/Int.pm:

[12:04] <dalek> rakudo/nom: Optimize -- and ++ to not box a fresh 1 each time.

[12:04] <dalek> rakudo/nom: 

[12:04] <dalek> rakudo/nom: Just use the one from the constant pool.

[12:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f6e66501b4

[12:05] *** fsfwe joined
[12:06] *** fsfwe left
[12:07] <timotimo> ooooh

[12:08] *** rurban left
[12:13] *** kurahaupo left
[12:15] <vendethiel> r: my $i; say ++$i; # was that implemented not-so-long ago ?

[12:15] <camelia> rakudo-parrot c2cc4f, rakudo-jvm c2cc4f, rakudo-moar c2cc4f: OUTPUT¬´1‚ê§¬ª

[12:15] <vendethiel> because most of the perl6 code I see uses x =x +1

[12:15] <timotimo> native ints can't do it yet

[12:15] <timotimo> that would be why

[12:16] <vendethiel> r: my int $i; say ++$i; # was that implemented not-so-long ago ?

[12:16] <camelia> rakudo-jvm c2cc4f: OUTPUT¬´Cannot modify an immutable value‚ê§  in sub prefix:<++> at gen/jvm/CORE.setting:4430‚ê§  in sub prefix:<++> at gen/jvm/CORE.setting:1779‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[12:16] <camelia> ..rakudo-parrot c2cc4f: OUTPUT¬´Cannot modify an immutable value‚ê§  in sub prefix:<++> at gen/parrot/CORE.setting:4434‚ê§  in sub prefix:<++> at gen/parrot/CORE.setting:1783‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[12:16] <camelia> ..rakudo-moar c2cc4f: OUTPUT¬´No such method 'STORE' for invocant of type 'Int'‚ê§  in sub prefix:<++> at src/gen/m-CORE.setting:4430‚ê§  in sub prefix:<++> at src/gen/m-CORE.setting:1779‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[12:16] <vendethiel> fair enough

[12:16] <timotimo> it has not been implemented :)

[12:22] *** baest joined
[12:24] *** xinming_ left
[12:29] <jnthn> No, it's not done.

[12:30] *** xinming_ joined
[12:35] *** colomon left
[12:41] *** zakharyas joined
[12:45] *** xinming_ left
[12:46] *** xinming_ joined
[12:46] *** rurban joined
[13:02] *** xinming_ left
[13:03] *** pippo joined
[13:04] *** xinming_ joined
[13:05] <pippo> m: say "[aaaa], [aa]" ~~ / ['[' ~ ']' <-[\]]>+]+ % ',' /;

[13:05] <camelia> rakudo-moar f6e665: OUTPUT¬´ÔΩ¢[aaaa]ÔΩ£‚ê§‚ê§¬ª

[13:07] <timotimo> pippo: if you want to match both groups of aas in brackets, the + % needs to group around the whole thing i believe

[13:07] <timotimo> er

[13:07] <timotimo> it does

[13:07] <timotimo> sorry

[13:07] <timotimo> you probably need to enable sigspace fo rthat to work or use ', '

[13:13] <pippo> m: say "[aa], [aa]" ~~ / ['[' ~ ']' <-[\]]>+]+ % ', ' /;

[13:13] <camelia> rakudo-moar f6e665: OUTPUT¬´ÔΩ¢[aa], [aa]ÔΩ£‚ê§‚ê§¬ª

[13:13] <pippo> m: say "[aa], [aaaaa]" ~~ / ['[' ~ ']' <-[\]]>+]+ % ', ' /;

[13:13] <camelia> rakudo-moar f6e665: OUTPUT¬´ÔΩ¢[aa], [aaaaa]ÔΩ£‚ê§‚ê§¬ª

[13:13] <pippo> Yep! Thank you timotimo!

[13:14] <timotimo> yw :)

[13:22] *** xinming_ left
[13:25] *** qiang joined
[13:28] *** xinming_ joined
[13:29] <ribasushi> where do I find the writeup on namespaces and authorities and all that 

[13:30] <timotimo> is that for packaging and stuff?

[13:30] * timotimo not actually sure

[13:32] <timotimo> http://perlcabal.org/syn/S22.html - could what you seek be in here? probably not in S11, though

[13:33] *** virtualsue joined
[13:37] <ribasushi> no

[13:37] <ribasushi> I meant... when you say 'use X' in perl6 land

[13:37] <ribasushi> and when you need to address globals

[13:38] <ribasushi> and when you need to instantiate objects of an external class not loaded by you

[13:38] <ribasushi> how all of this fits together on the language side, packaging aside

[13:38] *** guru joined
[13:38] <jnthn> Sounds like S11

[13:38] *** guru is now known as Guest85017

[13:39] <timotimo> that does sound more like S11 than S22

[13:39] *** Guest85017 is now known as ajr_

[13:39] <ribasushi> cheer guys, will look in S11

[13:44] *** zakharyas left
[13:56] *** mtk joined
[14:00] *** kurahaupo joined
[14:01] *** telex left
[14:02] *** telex joined
[14:05] <JimmyZ> hmm, How does rakudo use NQP::Optimizer?

[14:06] <jnthn> Well, a bunch of Rakudo is written in NQP

[14:06] <jnthn> NQP::Optimizer isn't applicable to Perl 6 code, however.

[14:06] <jnthn> It makes loads of assumptions that are safe in NQP, but not in full Perl 6.

[14:07] <JimmyZ> Does the core.setting use nqp's lexical => local lowering?

[14:08] <jnthn> No, because it's Perl 6 code.

[14:08] <jnthn> We can do lex => loc, but the analysis is a good bit harder in Perl 6.

[14:08] <JimmyZ> Ha, I thought it does 

[14:08] <jnthn> For one, NQP has no eval, no pseudo packages, no "is context"...

[14:09] <jnthn> Also, no scalar containers.

[14:09] <jnthn> So it will be quite a bit more work/care to do that opt on Perl 6 code.

[14:12] <JimmyZ> I had gotten the pain when nqp was assuming things are safe in NQP :P

[14:13] <jnthn> Yes, well, the point of NQP is being able to assume stuff.

[14:13] <jnthn> And having a simpler language.

[14:13] <JimmyZ> aye

[14:14] <vendethiel> so there'll be a Rakudo::optimizer later :p ?

[14:14] <JimmyZ> There already is

[14:14] *** aborazmeh left
[14:16] <jnthn> There is, it just doesn't know this opt yet

[14:17] * JimmyZ always thinks opt is short for option :P

[14:22] *** zakharyas joined
[14:26] *** mtk left
[14:27] *** mtk joined
[14:29] *** spider-mario left
[14:32] *** Alina-malina left
[14:33] *** Alina-malina joined
[14:38] *** Alina-malina left
[14:41] *** Alina-malina joined
[14:43] *** virtualsue left
[14:53] *** Alina-malina left
[14:54] *** Alina-malina joined
[15:00] *** cognominal left
[15:00] *** cognominal__ joined
[15:06] *** baest left
[15:07] *** txt-file left
[15:10] *** baest joined
[15:12] *** fridim_ joined
[15:16] *** qiang left
[15:17] *** Rotwang joined
[15:32] *** btyler joined
[15:38] *** sftp left
[15:38] *** sftp joined
[15:39] *** guru joined
[15:40] *** guru is now known as Guest5033

[15:42] *** ajr_ left
[15:48] *** sftp left
[15:48] *** fridim_ left
[15:49] *** sftp joined
[15:52] *** sftp is now known as sftp_

[15:55] *** sftp_ left
[16:00] *** fridim_ joined
[16:01] *** sftp joined
[16:21] *** bjz left
[16:21] *** bjz joined
[16:26] *** virtualsue joined
[16:37] *** itz___ joined
[16:37] *** itz joined
[16:39] *** hummeleB1 left
[17:00] *** denis_boyun left
[17:04] *** fridim_ left
[17:18] <timotimo> i just casually tuned in to a random twitch channel to see the wind waker any% world record get taken by some german :)

[17:20] <vendethiel> timotimo: Kreygasm. Link for VoD ?

[17:20] <vendethiel> please :)

[17:23] <timotimo> find it on koljai7's channel

[17:23] *** itz___ left
[17:25] *** itz_ joined
[17:26] <timotimo> perl6-m ../moarvm/tools/spesh_diff.p6 settinglog.txt  1634,40s user 162,73s system 98% cpu 30:31,86 total

[17:26] <timotimo> heh heh heh

[17:40] *** Guest5033 left
[17:41] *** thou left
[17:43] *** kurahaupo left
[17:43] *** Mouq joined
[17:43] *** guru joined
[17:44] *** guru is now known as Guest74370

[17:48] *** Guest74370 left
[17:49] *** ajr joined
[17:49] *** ajr is now known as Guest1841

[17:50] *** Guest1841 is now known as ajr_

[17:56] *** ajr_ left
[18:00] *** ajr_ joined
[18:05] *** hummeleB1 joined
[18:05] *** xinming_ left
[18:07] *** xinming_ joined
[18:08] * Mouq realizes that Thing.new: :foobar; is equivalent to Thing.new :foobar

[18:09] <timotimo> it is? o_O

[18:09] <timotimo> hm, i guess

[18:10] <Mouq> p6: class Foo { has $.color }; my $foo = Foo.new :color<blue>; say $foo.color

[18:10] <camelia> rakudo-parrot f6e665, rakudo-jvm f6e665, rakudo-moar f6e665, niecza v24-109-g48a8de3: OUTPUT¬´blue‚ê§¬ª

[18:11] <Mouq> p6: class Foo { has $.color; has $.fruit; }; my $foo = Foo.new :color<blue>:fruit<star>; say $foo.color; say $foo.fruit;

[18:11] <camelia> rakudo-parrot f6e665, rakudo-jvm f6e665, rakudo-moar f6e665, niecza v24-109-g48a8de3: OUTPUT¬´blue‚ê§star‚ê§¬ª

[18:11] <Mouq> p6: class Foo { has $.color; has $.fruit; }; my $foo = Foo.new :color<blue>,:fruit<star>; say $foo.color; say $foo.fruit;

[18:12] <camelia> rakudo-parrot f6e665, rakudo-jvm f6e665, rakudo-moar f6e665: OUTPUT¬´WARNINGS:‚ê§Useless use of "," in expression "my $foo = Foo.new :color<blue>,:fruit<star>" in sink context (line 1)‚ê§blue‚ê§(Any)‚ê§¬ª

[18:12] <camelia> ..niecza v24-109-g48a8de3: OUTPUT¬´blue‚ê§(Any)‚ê§¬ª

[18:12] <Mouq> p6: class Foo { has $.color; has $.fruit; }; my $foo = Foo.new :color<blue> :fruit<star>; say $foo.color; say $foo.fruit;

[18:12] <camelia> rakudo-parrot f6e665, rakudo-jvm f6e665, rakudo-moar f6e665, niecza v24-109-g48a8de3: OUTPUT¬´blue‚ê§star‚ê§¬ª

[18:12] *** PZt left
[18:14] *** a3gis joined
[18:20] *** plobsing joined
[18:24] *** kurahaupo joined
[18:27] *** hoverboard joined
[18:27] *** ajr_ left
[18:27] *** dwarring joined
[18:33] *** sftp left
[18:33] *** sftp joined
[18:41] *** a3gis left
[18:44] *** vendethiel left
[18:44] <lizmat> .oO( Foo Fruit, The Best There Is (TM) )

[18:44] <lizmat> .oO( Fruit Of The Foo )

[18:45] *** SamuraiJack joined
[18:47] *** vendethiel joined
[18:49] <moritz> .oO( Foorier Transform )

[18:49] *** guru joined
[18:49] *** SamuraiJack__ left
[18:49] *** guru is now known as Guest41918

[18:50] *** Guest41918 is now known as ajr_

[18:51] *** SamuraiJack left
[19:00] *** beastd joined
[19:05] *** darutoko left
[19:09] <lizmat> .oO( Having a Foo Fruit Smoothie at the Foo Bar )

[19:19] *** a3gis joined
[19:24] <dalek> roast: cc7720a | (David Warring [email@hidden.address] | integration/advent2013-day20.t:

[19:24] <dalek> roast: adding advent 2013 day 20

[19:24] <dalek> roast: review: https://github.com/perl6/roast/commit/cc7720a48d

[19:30] <vendethiel> r: my @a = 5; say $a;

[19:30] <camelia> rakudo-parrot f6e665, rakudo-jvm f6e665, rakudo-moar f6e665: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Variable '$a' is not declared. Did you mean '@a'?‚ê§at /tmp/tmpfile:1‚ê§------> [32mmy @a = 5; say $a[33m‚èè[31m;[0m‚ê§    expecting any of:‚ê§‚Ä¶¬ª

[19:30] <vendethiel> r: my $a = (5); say @a;

[19:30] <camelia> rakudo-parrot f6e665, rakudo-jvm f6e665, rakudo-moar f6e665: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Variable '@a' is not declared. Did you mean '$a'?‚ê§at /tmp/tmpfile:1‚ê§------> [32mmy $a = (5); say @a[33m‚èè[31m;[0m‚ê§    expecting any of:‚Ä¶¬ª

[19:30] <vendethiel> "@ as shortcut for @$, % as shortcut for %$" for what ?

[19:32] *** kurahaupo left
[19:33] <jnthn> vendethiel: I *think* if that's recent it refers to match object access

[19:33] <jnthn> @<foo>

[19:33] <vendethiel> makes sense, yes

[19:34] <timotimo> i've tried to $filehandler.print: "text to put into the file"; d'oh

[19:34] *** a3gis left
[19:36] <timotimo> i'm confused

[19:36] <Mouq> vendethiel: Original description: https://github.com/rakudo/rakudo/commit/456f3aa9b

[19:36] <Mouq> That got distorted

[19:37] <vendethiel> thanks Mouq. Didn't grasp it from the rakudo star posts

[19:37] <dalek> rakudo/nom: eb85757 | (Elizabeth Mattijsen)++ | t/spectest.data:

[19:37] <dalek> rakudo/nom: Add advent2013-20 tests to roast

[19:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eb857578d6

[19:38] *** hoverboard left
[19:39] <lizmat> dwarring++

[19:44] <timotimo> dwarring++

[20:03] *** Rotwang left
[20:05] *** denis_boyun_ joined
[20:08] *** zakharyas left
[20:11] * dwarring Perl 6 addict :-)

[20:12] *** kaare__ left
[20:15] *** hummeleB1 left
[20:24] *** thou joined
[20:26] *** hoverboard joined
[20:29] *** vendethiel left
[20:29] *** vendethiel joined
[20:31] <vendethiel> `panda -h` gives me full path for `panda` with double-escaped `\` every line

[20:34] *** thou left
[20:35] <timotimo> why woul dthere be \ in the path?

[20:35] *** molaf_ left
[20:37] <geekosaur> windows?

[20:37] <vendethiel> yes

[20:38] <vendethiel> also, `panda search` exits with "no icu lib loaded"

[20:38] <timotimo> ah, that's panda then

[20:38] <timotimo> er

[20:38] <timotimo> parrot

[20:39] *** lizmat_ joined
[20:39] *** cognominal joined
[20:39] *** Quom joined
[20:39] *** btyler_ joined
[20:41] *** denis_boyun__ joined
[20:42] *** sftp_ joined
[20:43] *** masak_ joined
[20:43] *** itz__ joined
[20:44] *** pecastro_ joined
[20:44] *** Psyche^ joined
[20:45] *** yeltzooo3 joined
[20:46] <dalek> specs: 6e8b79e | (Elizabeth Mattijsen)++ | S17-concurrency.pod:

[20:46] <dalek> specs: Move introduction of outcome {} after Channel

[20:46] <dalek> specs: 

[20:46] <dalek> specs: The way it was, we're starting to discuss Channels in the context of outcome

[20:46] <dalek> specs: before we specced what a Channel is.

[20:46] <dalek> specs: review: https://github.com/perl6/specs/commit/6e8b79ef06

[20:48] *** Yappo__________8 left
[20:48] *** lizmat left
[20:48] *** yeltzooo left
[20:48] *** masak left
[20:48] *** denis_boyun_ left
[20:48] *** Mouq left
[20:48] *** itz_ left
[20:48] *** sftp left
[20:48] *** btyler left
[20:48] *** cognominal__ left
[20:48] *** mtk left
[20:48] *** Psyche^_ left
[20:48] *** pecastro left
[20:48] *** salv0 left
[20:48] *** yeltzooo3 is now known as yeltzooo

[20:48] *** lizmat_ is now known as lizmat

[20:54] *** ajr_ left
[20:55] *** mtk joined
[20:55] *** a3gis joined
[20:55] *** salv0 joined
[20:58] *** Yappo__________8 joined
[21:03] *** pecastro_ is now known as pecastro

[21:08] <dalek> specs: c4db4e1 | (Elizabeth Mattijsen)++ | S17-concurrency.pod:

[21:08] <dalek> specs: Remove mention of outcome in Channel spec

[21:08] <dalek> specs: 

[21:08] <dalek> specs: It is mentioned in the "outcome" spec, so premature here.

[21:08] <dalek> specs: review: https://github.com/perl6/specs/commit/c4db4e1007

[21:10] *** Timbus left
[21:11] *** PYTHONLOVER joined
[21:12] <PYTHONLOVER> why should i learn perl?

[21:12] <dalek> specs: 9089b24 | (Elizabeth Mattijsen)++ | S17-concurrency.pod:

[21:12] *** Timbus joined
[21:12] <dalek> specs: Clarify that outcome takes Promises* and Channels*

[21:12] <dalek> specs: 

[21:12] <dalek> specs: As in zero or more

[21:12] <dalek> specs: review: https://github.com/perl6/specs/commit/9089b2442f

[21:13] <PYTHONLOVER> ?

[21:13] <lizmat> why should I learn Python ?

[21:14] <PYTHONLOVER> because it's still used, and has corporate sponsors and funding

[21:14] <geekosaur> you are claiming that perl isn't used. interesting blindness

[21:14] <PYTHONLOVER> name one fortune 500 who uses perl for anything

[21:14] <Quom> PYTHONLOVER: Are you trying to imply that Perl isn't used, have corporate sponsors or funding?

[21:14] <geekosaur> also you're picking on the wrong channel, or maybe you're just avoiding the truth

[21:15] <geekosaur> can I name 500?

[21:15] * lizmat decides not to feed the troll any further

[21:15] <Quom> lizmat: Yeah

[21:15] <lizmat> gnight #perl6!

[21:15] <Quom> night lizmat++!

[21:15] <PYTHONLOVER>  +camelia +dalek +hugme +ilogger2 +yoleaux _sri a3gis Alina-malina Alula amkrankruleuen anocelot apejens araujo arnsholt ascent_ ashleydev atrodo atta avar avuserow awwaiid baest bcode beastd BinGOs bjz BooK bowtie_ breinbaas broquaint brother btyler_ Bucciarati Celelibi charsbar_______2 cibs ClarusCogitatio clkao cognominal cooper corecatcher cosimo - whois - query cotto crazedpsyc cxreg d0nk dagurval_ DarthGandalf daxim_ denis_bo

[21:16] <PYTHONLOVER> WHY CANT I SLAP PEOPLE WITH FISH!!]

[21:16] <PYTHONLOVER> Long live python

[21:16] *** baest left
[21:16] <PYTHONLOVER> motherfuckrers

[21:16] *** PYTHONLOVER left
[21:16] <Quom> ‡≤†_‡≤†

[21:16] <Alina-malina> wow

[21:16] <Alina-malina> what was that?

[21:16] *** baest joined
[21:16] <timotimo> that was certainly successful.

[21:16] <lizmat> first they mock you, then they fight you, then you win

[21:16] <Alina-malina> shithead lol

[21:16] <tadzik> ...but...but you can slap people with fish

[21:16] <Quom> Alina-malina: Someone making the Python community look bad

[21:17] <lizmat> real sleep now&

[21:17] <Alina-malina> hehe

[21:17] <timotimo> Alina-malina: watch the language

[21:17] <Alina-malina> timotimo, python?

[21:17] <timotimo> you know what i mean :)

[21:17] <Alina-malina> hmmm

[21:18] <timotimo> i just thought the mean word you said was kind of not nice

[21:19] *** Timbus left
[21:19] <Alina-malina> timotimo, it was for """pythonlover"""

[21:20] <cognominal> hating a (supposedly) dead language, what for?

[21:20] <timotimo> yes, but nobody deserves hate

[21:20] <tadzik> some think it's making them look better

[21:20] *** Timbus joined
[21:22] *** colomon joined
[21:22] * Quom realizes that he can make writing "‡≤†_‡≤†" an alt-command with his keyboard mapper :D

[21:22] *** Vlavv left
[21:22] <tadzik> I have ~/fatfaces for that :P

[21:23] <tadzik> . o O ( I see plenty of new faces )

[21:24] <lue> r: my $‡≤†_‡≤† = 42; say $‡≤†_‡≤†

[21:24] <camelia> rakudo-parrot eb8575, rakudo-jvm eb8575, rakudo-moar eb8575: OUTPUT¬´42‚ê§¬ª

[21:25] <Quom>  r: say +¬´( :‡≤†_‡≤† )¬ª+

[21:25] <camelia> rakudo-parrot eb8575, rakudo-jvm eb8575, rakudo-moar eb8575: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Two terms in a row‚ê§at /tmp/tmpfile:1‚ê§------> [32msay +¬´( :‡≤†_‡≤† )¬ª+[33m‚èè[31m<EOL>[0m‚ê§    expecting any of:‚ê§        postfix‚ê§    ‚Ä¶¬ª

[21:26] * Quom isn't sure why he expected ¬ª+ to work

[21:26] <dwarring> r: constant ‡≤†_‡≤† = 42; say ‡≤†_‡≤†

[21:26] <camelia> rakudo-parrot eb8575, rakudo-jvm eb8575, rakudo-moar eb8575: OUTPUT¬´42‚ê§¬ª

[21:26] <jnthn> .u ‡≤†

[21:26] <yoleaux> U+0CA0 KANNADA LETTER TTHA [Lo] (‡≤†)

[21:27] <jnthn> Hm, I thought the used latin script in kannada... :P

[21:27] * lue imagines ‡≤†_‡≤† as a more disapproving version of !!!

[21:27] <Quom>  r: sub term:<‡≤†_‡≤†> { die "Seriously?" }; sub foo { 1 + 2 + ‡≤†_‡≤† }

[21:27] <camelia> rakudo-parrot eb8575, rakudo-jvm eb8575, rakudo-moar eb8575: ( no output )

[21:27] <Quom>  r: sub term:<‡≤†_‡≤†> { die "Seriously?" }; sub foo { 1 + 2 + ‡≤†_‡≤† }; foo

[21:28] <camelia> rakudo-parrot eb8575, rakudo-jvm eb8575, rakudo-moar eb8575: OUTPUT¬´Seriously?‚ê§  in sub term:<‡≤†_‡≤†> at /tmp/tmpfile:1‚ê§  in sub foo at /tmp/tmpfile:1‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[21:30] <Quom> Also, was playing around earlier; I'm really happy that the REPL works on MoarVM now, having only realized a few days ago! But is it known that it screws up moving the cursor when nonASCII chars are in play?

[21:30] *** beastd left
[21:31] <lue> Quom: are you sure that's not your terminal? I know mine hates anything that isn't the same width as the normal monospace width.

[21:34] *** Vlavv joined
[21:42] *** raiph joined
[21:46] <lue> Something in rakudo's Pod parser is replacing U+10FFFB and U+10FFFC (but not U+10FFFD, strangely enough) with spaces, can't tell what's doing it yet :/

[21:53] <dalek> rakudo-star-daily: 4333158 | coke++ | log/ (5 files):

[21:53] <dalek> rakudo-star-daily: today (automated commit)

[21:53] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/433315838e

[21:53] <dalek> rakudo-star-daily: 580053a | coke++ | log/ (5 files):

[21:53] <dalek> rakudo-star-daily: today (automated commit)

[21:53] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/580053ae36

[21:53] <dalek> perl6-roast-data: 4d699b1 | coke++ | / (6 files):

[21:53] <dalek> perl6-roast-data: today (automated commit)

[21:53] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/4d699b15c2

[21:53] <dalek> perl6-roast-data: c43c8c7 | coke++ | / (5 files):

[21:53] <dalek> perl6-roast-data: today (automated commit)

[21:53] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/c43c8c7345

[21:55] <Quom> lue: Oh, hm, maybe

[21:56] *** denis_boyun__ left
[21:58] <Quom> lue: But at the very least backspace on a non-ASCII char just truncates the last byte, producing a malformed char :(

[21:59] *** rurban left
[21:59] *** dwarring left
[22:00] <lue> yeah, that's not good.

[22:00] <Quom> And I can insert characters into other characters

[22:00] * Quom &

[22:06] *** rurban joined
[22:22] *** hoverboard left
[22:35] *** zos joined
[22:36] *** zos left
[22:38] *** rurban left
[22:42] <dalek> roast: 0b5b55b | (David Warring [email@hidden.address] | integration/advent2013-day1 (2 files):

[22:42] <dalek> roast: fudging supply/promise/channel for parrot

[22:42] <dalek> roast: review: https://github.com/perl6/roast/commit/0b5b55b950

[22:51] *** bjz left
[22:51] *** bjz joined
[23:02] *** pippo left
[23:05] *** PZt joined
[23:07] <dalek> roast: 825948d | (David Warring [email@hidden.address] | integration/advent2013-day15.t:

[23:07] <dalek> roast: jvm fudge typo

[23:07] <dalek> roast: review: https://github.com/perl6/roast/commit/825948d06a

[23:08] *** rurban joined
[23:11] *** btyler_ left
[23:14] *** rurban left
[23:15] *** kurahaupo joined
[23:19] *** bfulgham_ joined
[23:20] *** a3gis left
[23:33] *** dmol left
[23:36] *** baest left
[23:41] *** baest joined
[23:59] *** zacts joined
[23:59] <zacts> how about a perl6 + llvm compiler?

