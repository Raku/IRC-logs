[00:08] <arnsholt> Yeah, sleepytimes for me too, I think

[00:08] <arnsholt> See you guys later!

[00:08] *** arnsholt left
[00:12] <timotimo> i hope i can get r2-lex-to-local cool & merged for the release

[00:18] *** BenGoldberg joined
[00:30] *** beastd left
[00:32] *** FROGGS left
[00:40] <tadzik> \o/

[00:40] <tadzik> arnsholt++

[00:57] *** BooK joined
[00:57] <BooK> FROGGS[mobile]: ping

[00:58] <BenGoldberg> ping?

[01:01] <timotimo> ohai book!

[01:01] <timotimo> how are you doing?

[01:03] *** raiph left
[01:07] <lue> We really need to fix whatever it was that's throttling IO in rakudo. ==> Fetching panda  is taking forever.

[01:07] *** daniel-s_ left
[01:07] <timotimo> could probably be canonpath and friends ;)

[01:08] <BooK> timotimo: fine, preparing the Perl QA Hackathon, now in less than a month

[01:08] <lue> [Coke], pmichaud: are one of you around to check if my CLA has been processed?

[01:08] <timotimo> that sounds great

[01:08] <timotimo> how much perl6 is likely to happen on that hackathon?

[01:09] <BooK> lizmat, woolfy and froggs should be there

[01:09] <BooK> so, some :-)

[01:09] <timotimo> where is it going to happen?

[01:09] <BooK> Lyon, France

[01:10] <timotimo> oh

[01:10] <timotimo> france is actually not too far away from karlsruhe

[01:10] <timotimo> um, no, that's still pretty darn far

[01:11] <BooK> same continent!

[01:11] <timotimo> that's a good start :)

[01:11] <timotimo> i think i'm going to go to bed now

[01:11] <BooK> if we're in the same timezone, that sounds like a good idea 

[01:13] *** dmol joined
[01:13] <timotimo> yup :)

[01:22] *** dmol left
[01:25] *** logie left
[01:30] <timotimo> huh. i'm actually turning QAST::Blocks into QAST::Stmts and it's not blowing up the rakudo build?!

[01:30] <timotimo> impossible!

[01:49] *** pecastro left
[01:50] <timotimo> someone is suggesting "Find the median of an unsorted array of 1e6 numerical values as fast or faster then Perl5." as a possible benchmark for perl6. seems like an interesting one to me. maybe i'll build it tomorrow. but i'd need someone to build the equivalent implementation in perl5.

[01:52] *** pecastro joined
[01:53] <timotimo> what does "also-ran" mean?

[01:54] *** crab2313 joined
[01:54] <TimToady> didn't win the race in first place

[01:55] <timotimo> ah!

[01:55] <timotimo> okay, bedtime for me now :)

[01:57] <JimmyZ> good night timotimo 

[01:57] <timotimo> gnite JimmyZ :)

[01:57] <timotimo> .o( also, Knuths Algorithm X probably has a rosettacode page, so that could actually become a benchmark, too)

[01:58] *** kbaker joined
[02:02] <TimToady> haven't seen it under that name

[02:05] *** dayangkun joined
[02:07] <TimToady> unfortunately RC seems hung at the moment

[02:22] *** Sqirrel joined
[02:23] *** Sqirrel_ left
[02:24] *** jnap left
[03:00] *** erkan left
[03:03] *** crab2313 left
[03:05] *** logie joined
[03:18] *** miseria joined
[03:18] <miseria> "ajedrez batalla entre negros y blancos, al final del final el blanco no tendra peones y el negro prevalecera" bienvenidos: http://castroruben.com *temo_a_un_ser_sin_rival*

[03:18] *** miseria left
[03:18] *** logie left
[03:19] <lue> What exactly does :$parent mean in the various implementations of canonpath? And why does the Cygwin version not come with it?

[03:20] *** BenGoldberg left
[03:22] <colomon> it's an orphan

[03:22] * colomon apologizes for useless wordplay instead of meaningful answers

[03:25] <lue> All it does is control whether or not a particular substitution takes place, but it doesn't actually influence said regex, which is what I'd expect of an adverb like $parent.

[03:30] <lue> ah, it's supposed to be a binary adverb it seems

[03:33] *** logie joined
[03:40] *** hoverboard left
[03:43] <lue> r: say "a/b/../c/./././d/../../..////e".IO.path.cleanup'

[03:43] <camelia> rakudo-parrot 306261, rakudo-jvm 306261, rakudo-moar 306261: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Two terms in a row‚ê§at /tmp/tmpfile:1‚ê§------> [32mc/./././d/../../..////e".IO.path.cleanup[33m‚èè[31m'[0m‚ê§    expecting any of:‚ê§        ‚Ä¶¬ª

[03:43] <lue> r: say "a/b/../c/./././d/../../..////e".IO.path.cleanup

[03:43] <camelia> rakudo-parrot 306261, rakudo-jvm 306261, rakudo-moar 306261: OUTPUT¬´IO::Path<a/b/../c/d/../../../e>‚ê§¬ª

[03:43] <lue> r: say "a/b/../c/./././d/../../..////e".IO.path.cleanup(:parent)

[03:43] <camelia> rakudo-parrot 306261, rakudo-jvm 306261, rakudo-moar 306261: OUTPUT¬´IO::Path<e>‚ê§¬ª

[03:43] <lue> Is it just me, or does that go against the definition of "canonical"?

[03:44] <lue> (.cleanup simply calls .canonpath)

[03:48] <TimToady> in the presence of symbolic links, .. doesn't always get you back where you started

[03:49] <lue> True. Though I can't figure out what possible definition the word "parent" has that would understandably cause that behavior up there.

[03:50] <TimToady> means to assume the original . was the parent, I presume

[03:51] <lue> I can see that. Very unintuitive though, at least for me :/

[03:52] <TimToady> or it just means pay attention to ..

[03:53] <TimToady> which is arguably "parent"

[03:55] <lue> perhaps :fold-parents would be clearer, since that's what it does (seeing as it's a flag for deciding an action, thus the name should be verby. Perhaps I'm just unhappy I couldn't get it instantly :P)

[03:55] <TimToady> it must obviously be someone else's fault :)

[03:56] *** kbaker left
[03:57] <lue> Just trying to see if I can optimize canonpath in any way, and got tripped up on that a bit. I still think :parent more immediately says "I am a parent of something", or "I have a parent"

[03:58] <lue> For some reason, I feel like all the use of s// is what's slowing it down. Can't say for sure though.

[04:03] *** hoverboard joined
[04:10] *** FROGGS[mobile]2 joined
[04:12] *** FROGGS[mobile] left
[04:15] *** SamuraiJack__ joined
[04:19] *** logie left
[04:19] *** logie joined
[04:27] *** integral left
[04:27] *** integral joined
[04:27] *** integral left
[04:27] *** integral joined
[04:31] *** logie left
[04:31] *** logie joined
[04:33] *** eternaleye left
[04:43] *** kaleem joined
[04:46] *** cooper left
[04:48] *** cooper joined
[04:48] *** cooper left
[04:48] *** cooper joined
[04:50] *** cooper left
[04:50] *** cooper joined
[04:51] *** cooper left
[04:51] *** cooper joined
[04:52] *** logie left
[05:03] *** sergot_ joined
[05:03] *** Alula left
[05:14] *** sergot left
[05:14] *** Alula joined
[05:18] *** grondilu left
[05:23] *** [Sno] left
[05:28] *** logie joined
[05:32] *** woosley joined
[05:57] *** Exodist left
[06:01] *** thou left
[06:05] *** Exodist joined
[06:10] *** Exodist left
[06:12] *** Exodist joined
[06:15] *** hoverboard left
[06:37] *** SamuraiJack__ left
[06:37] *** [Sno] joined
[06:49] *** Mouq joined
[06:53] <Mouq> lue: I still have work to do on certain doc files, but is there anything you've noticed about the way Rakudo does Pod that needs to be fixed?

[06:54] <Mouq> I ask because I have an itch to fix =begin code :allow<B>

[06:54] <lue> Mouq: biggest (and hopefully simple) thing is that final line shouldn't need a newline (e.g. the last line of a .pod6 file shouldn't have to be =end pod\n)

[06:55] *** darutoko joined
[06:55] <lue> :allow<> is another big thing I think :)

[06:57] <Mouq> r: #gimme newline

[06:57] <camelia> rakudo-parrot 306261, rakudo-jvm 306261, rakudo-moar 306261: ( no output )

[06:57] <lue> worst part about the newline thing is that it'll complain that there's no =end for your =begin, and then the error pointer points to the end of the file... which shows the =end that's not being picked up :)

[06:57] <Mouq> r: say #please?

[06:57] <camelia> rakudo-parrot 306261, rakudo-jvm 306261, rakudo-moar 306261: OUTPUT¬´‚ê§¬ª

[06:58] <Mouq> r: =begin pod‚ê§thanks camelia‚ê§=end pod

[06:58] <camelia> rakudo-parrot 306261, rakudo-jvm 306261, rakudo-moar 306261: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§=begin without matching =end‚ê§at /tmp/tmpfile:3‚ê§------> [32m<BOL>[33m‚èè[31m=end pod[0m‚ê§    expecting any of:‚ê§        whitespace‚ê§     ‚Ä¶¬ª

[06:58] <Mouq> That's... pretty dumb

[06:59] <lue> I'm pretty sure whatever \n handles it just needs a ? after it, though I can't say I actually know Rakudo's implementation of Pod6.

[06:59] <Mouq> I was thinking more along the lines of [\n|^]

[06:59] *** logie left
[06:59] *** berekuk joined
[07:00] <Mouq> errr *$

[07:00] <lue> Oh, I've just always been using \n? whenever I needed to, though I suppose [\n|$] would be more correct :P

[07:01] <Mouq> lue: I'm just worried about the weird cases \n? might pares where it shouldn't

[07:01] <Mouq> "=end pod|"

[07:01] <Mouq> *parse

[07:01] <lue> yeah, definitely go with |$. Now that I think about it, it's amazing I haven't been bitten by \n? before.

[07:02] <lue> (maybe because \n? is greedy...)

[07:04] <lue> ‚ôò #perl6 o/

[07:06] <Mouq> I would think

[07:06] <Mouq> night lue!

[07:08] *** fhelmberger joined
[07:09] <Mouq> lue: Fixed! :D

[07:10] *** FROGGS[mobile]2 left
[07:10] *** FROGGS[mobile] joined
[07:10] <Mouq> n: =begin pod‚ê§thanks camelia‚ê§=end pod

[07:10] <camelia> niecza v24-109-g48a8de3: ( no output )

[07:12] <Mouq> Looks like it didn't regress pod parsing

[07:13] *** fhelmberger left
[07:14] <dalek> rakudo/nom: 9025c36 | Mouq++ | src/Perl6/Grammar.nqp:

[07:14] <dalek> rakudo/nom: Parse pod in files without an ending newline

[07:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9025c3669d

[07:18] *** FROGGS joined
[07:18] <FROGGS> BooK: pong

[07:24] *** kaleem left
[07:24] *** berekuk left
[07:30] <dalek> roast: aa59bf2 | Mouq++ | S26-documentation/01-delimited.t:

[07:30] <dalek> roast: Test that Pod files don't have to end in a newline

[07:30] <dalek> roast: review: https://github.com/perl6/roast/commit/aa59bf2a83

[07:33] * Mouq wonders if we rakudo really needs that moar-support branch anymore‚Ä¶

[07:34] <FROGGS> I don't think we need it anymore

[07:36] * Mouq doesn't actually know how to delete upstream branches

[07:37] <FROGGS> ohh, I could tell you :P

[07:37] <FROGGS> git push origin :moar-support

[07:37] <FROGGS> the colon does it

[07:37] *** kaleem joined
[07:38] <Mouq> :O it worked! FROGGS++

[07:40] *** kaleem left
[07:41] *** kaleem joined
[07:43] *** SamuraiJack__ joined
[07:45] <masak> seen on HN: "'sufficiently smart compiler' is kind of like 'world peace': something to work towards, but doubtful we'll have in our lifetime"

[07:46] <masak> (good morning, #perl6)

[07:47] <Mouq> o/

[07:48] <mathw> o/

[07:51] <FROGGS> o/

[07:52] <masak> hehe.

[07:53] <BooK> FROGGS: hi

[07:54] <FROGGS> hi BooK 

[07:55] *** erkan joined
[07:55] *** rindolf joined
[07:56] *** dmol joined
[07:58] <BooK> lizmat: ping

[07:58] <ingy> masak: ping

[07:58] *** woosley left
[07:58] <moritz> Mouq, FROGGS: sufficiently non-ancient versions of git also allow   git push --delete origin <branchname>

[07:59] <moritz> which, IMHO, is slightly less obscure, unless you are deeply familiar with the intricacies of the git ref syntax

[07:59] *** denis_boyun joined
[07:59] <FROGGS> moritz: --delete is way nicer, yeah :o)

[07:59] <ingy> git push origin +:branchname # so simple

[07:59] <ingy> ;)

[08:00] <moritz> ingy: so simple, until you hit http://www.oreilly.com/catalog/errataunconfirmed.csp?isbn=0636920024774

[08:01] <ingy> :)

[08:01] <ingy> I just learned about +a:b yesterday

[08:02] <ingy> while finishing up git-subrepo

[08:02] <moritz> it's... finished up?

[08:02] <moritz> I'm afraid of finished software. It's dead. :-)

[08:02] <ingy> heh

[08:02] <ingy> I mean I got it to 0.1.0

[08:03] <ingy> I actually switched all projects to it today

[08:03] <ingy> I just finished switching git-hub to it a couple mins ago

[08:06] *** zakharyas joined
[08:12] <Mouq> r: regex test { not ok }; regex test:sym<test> { ok }; say 'ok' ~~ /<test:sym<test>>/

[08:12] <camelia> rakudo-jvm 306261: OUTPUT¬´Useless declaration of a has-scoped method in mainline (did you mean 'my regex test'?)‚ê§Useless declaration of a has-scoped method in mainline (did you mean 'my regex test:sym<test>'?)‚ê§No such method 'test' for invocant of type 'Cursor'‚ê§  in method ACC‚Ä¶¬ª

[08:12] <camelia> ..rakudo-parrot 306261: OUTPUT¬´Useless declaration of a has-scoped method in mainline (did you mean 'my regex test'?)‚ê§Useless declaration of a has-scoped method in mainline (did you mean 'my regex test:sym<test>'?)‚ê§No such method 'test' for invocant of type 'Cursor'‚ê§  in regex  ‚Ä¶¬ª

[08:12] <camelia> ..rakudo-moar 306261: OUTPUT¬´Useless declaration of a has-scoped method in mainline (did you mean 'my regex test'?)‚ê§Useless declaration of a has-scoped method in mainline (did you mean 'my regex test:sym<test>'?)‚ê§No such method 'test' for invocant of type 'Cursor'‚ê§  in method AC‚Ä¶¬ª

[08:12] <Mouq> r: my regex test { not ok }; my regex test:sym<test> { ok }; say 'ok' ~~ /<test:sym<test>>/

[08:13] <camelia> rakudo-parrot 306261, rakudo-jvm 306261, rakudo-moar 306261: OUTPUT¬´Nil‚ê§¬ª

[08:13] <Mouq> :(

[08:13] <Mouq> n: my regex test { not ok }; my regex test:sym<test> { ok }; say 'ok' ~~ /<test:sym<test>>/

[08:13] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´Potential difficulties:‚ê§  &test is declared but not used at /tmp/jeliqRmeQX line 1:‚ê§------> [32mmy regex test [33m‚èè[31m{ not ok }; my regex test:sym<test> { ok[0m‚ê§‚ê§ÔΩ¢okÔΩ£‚ê§ test:sym<test> => ÔΩ¢okÔΩ£‚ê§‚ê§¬ª

[08:13] <Mouq> n: my regex test:sym<test> { ok }; say 'ok' ~~ /<test:sym<test>>/

[08:13] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´Potential difficulties:‚ê§  &test is declared but not used at /tmp/V0DtJiCh9C line 1:‚ê§------> [32mmy regex test:sym<test> [33m‚èè[31m{ ok }; say 'ok' ~~ /<test:sym<test>>/[0m‚ê§‚ê§ÔΩ¢okÔΩ£‚ê§ test:sym<test> => ÔΩ¢okÔΩ£‚ê§‚ê§¬ª

[08:14] *** Daniel___ joined
[08:15] <Daniel___> testing

[08:15] *** Daniel___ left
[08:19] *** virtualsue joined
[08:20] <lizmat> BooK: ping

[08:22] *** FROGGS[mobile] left
[08:22] *** yves_ left
[08:25] *** woosley joined
[08:26] *** virtualsue left
[08:27] *** sqirrel__ joined
[08:27] *** pecastro left
[08:28] *** virtualsue joined
[08:29] <DrEeevil> gorrammit. I'm starting to not enjoy git ... but I hope I have a MoarVM 2014.01 tarball that actually works now

[08:30] <timotimo> DrEeevil: moarvm.org has one for you

[08:30] <timotimo> o/

[08:31] <DrEeevil> timotimo: oh. that sounds quite smart :)

[08:31] *** FROGGS[mobile] joined
[08:32] <DrEeevil> there's too many traps in trying to make a tarball from github

[08:32] <DrEeevil> so sad. I want something good like sourceforge or berlios!

[08:33] *** FROGGS[mobile] left
[08:34] <timotimo> something good like sourceforge %)

[08:34] *** woosley left
[08:34] <DrEeevil> well, at least they could do basic things like tarballs

[08:35] <DrEeevil> ... and that's why github makes me very saaaaad

[08:36] * moritz doubts that sourceforge or berlios were aware of anything remotely like submodules

[08:36] <DrEeevil> moritz: better than build systems calling git directly

[08:37] <DrEeevil> I'm getting tired of patching out shit that can't work

[08:37] <moritz> DrEeevil: I kinda disagree. For development, using dev tools is fair game. For releases, we provide tarballs that work

[08:37] <moritz> and that don't require git

[08:38] *** woosley joined
[08:38] <DrEeevil> moritz: "you" ... well ... 

[08:39] <moritz> "the MoarVM developers and release team"

[08:39] <DrEeevil> there's a few sane upstreams, but they are so few these days that I am surprised when I hit one

[08:39] <DrEeevil> silly me, who needs reprodru ... riprudu ... thingy, builds

[08:40] <moritz> silly me, here I was thinking you were actually talking about something relevant to #perl6

[08:41] <DrEeevil> hehe

[08:41] <DrEeevil> I was unaware that you had now created a proper website and support machinery

[08:41] <DrEeevil> and I'm happy that my old dirty hacks are no longer needed for 2014.01 :)

[08:43] *** yves joined
[08:47] <jnthn> DrEeevil: There's even a "make release" target in Makefile, largely done by moritz++, that should led you recreate the published tarballs from the tag, fwiw.

[08:48] <DrEeevil> now *that* is proper lazy

[08:50] <timotimo> you asked for it :3

[08:50] <DrEeevil> hehe

[08:52] <DrEeevil> y'all have been one of the most accomodating upstreams so far

[09:00] *** grondilu joined
[09:06] *** xfix left
[09:07] *** fhelmberger joined
[09:09] *** fhelmberger_ joined
[09:13] *** fhelmberger left
[09:15] *** SamuraiJack__ left
[09:37] *** dakkar joined
[09:46] <dalek> perl6.org: f074958 | (Timo Paulssen)++ | source/documentation/index.html:

[09:46] <dalek> perl6.org: link to advent calendar 2013, move book link down

[09:46] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/f074958706

[09:52] *** yves left
[09:54] *** pecastro joined
[09:55] *** sqirrel__ left
[09:55] *** xfix joined
[10:01] *** woosley left
[10:07] *** yves joined
[10:14] *** Mouq left
[10:19] *** daxim left
[10:21] *** denis_boyun left
[10:21] *** rom1504 left
[10:21] *** rom1504 joined
[10:21] *** tadzik left
[10:23] *** tadzik joined
[10:23] *** xfix left
[10:44] *** bjz joined
[10:56] *** xfix joined
[11:16] *** grondilu left
[11:23] *** daxim joined
[11:30] *** PAAGWX8 joined
[11:34] *** rindolf left
[11:45] *** telex left
[11:46] *** telex joined
[12:01] *** sergot_ is now known as sergot

[12:02] *** fhelmberger_ left
[12:10] *** Nei joined
[12:11] *** popl joined
[12:11] *** popl left
[12:12] *** popl joined
[12:19] *** popl left
[12:21] *** popl joined
[12:22] *** popl left
[12:27] *** popl joined
[12:27] *** popl left
[12:31] *** popl joined
[12:31] <popl> sorry for the noise. 

[12:32] *** popl left
[12:40] <FROGGS> "Touch the frog." ?

[12:40] <FROGGS> why would somebody do that?

[12:41] <Nei> he already left though;)

[12:41] <Nei> probably too much FROGGS touching

[12:41] <FROGGS> I know :o)

[12:41] <FROGGS> yeah... I'm a bit touchy about that topic

[12:43] *** popl joined
[12:43] *** popl left
[12:51] *** crab2313 joined
[12:53] *** skids left
[12:57] *** crab2313 left
[13:04] *** kanishka joined
[13:05] *** mtk left
[13:06] *** popl joined
[13:06] *** popl left
[13:09] *** mtk joined
[13:23] <timotimo> %)

[13:28] *** ajr joined
[13:28] *** ajr is now known as Guest58759

[13:29] *** Guest58759 is now known as ajr_

[13:36] *** SHODAN left
[13:38] *** SHODAN joined
[13:46] *** kbaker joined
[13:50] *** araujo left
[13:50] *** araujo joined
[14:18] *** skids joined
[14:21] *** rindolf joined
[14:38] *** johnmilton joined
[14:51] <[Coke]> lue: I don't see "lue" in the doc

[14:52] <jnthn> [Coke]: Real name is Matthew...something.

[14:54] *** kaleem left
[14:55] *** Khisanth left
[14:59] *** kanishka left
[14:59] <[Coke]> it is very plausible your CLA is in now.

[14:59] <timotimo> \o/

[14:59] *** kanishka joined
[15:00] *** btyler joined
[15:02] *** thou joined
[15:05] *** logie joined
[15:07] <[Coke]> I updated https://docs.google.com/spreadsheet/ccc?key=0Ahm1zTZwW0VHdE1NN19GdE1fTmZZYnpGdURFM1A0cHc&usp=sharing

[15:07] <[Coke]> (with 2 more backends, that style of chart is less useful. suggestions (and editors) welcome.

[15:07] *** xinming left
[15:09] *** Khisanth joined
[15:09] <timotimo> we really need more test coverage for S01, holy shit that is basically untested!

[15:09] *** xinming joined
[15:10] <timotimo> i'm confused by the colors

[15:10] <timotimo> are they who made the changes or do they actually mean something?

[15:10] <[Coke]> timotimo: colors on the chart? each is an impl.

[15:10] <[Coke]> timotimo: colors on the data? I think it's "who wins this row"

[15:11] <timotimo> but that's not accurate

[15:11] <[Coke]> ... nope.

[15:12] <[Coke]> those colors are meaningless, clearing them.

[15:12] <timotimo> OK :)

[15:12] <[Coke]> I haven't updated this document in ages. Need to automate it if I care.

[15:13] <timotimo> have you tried the google docs scripting support yet?

[15:13] *** LLamaRider joined
[15:13] <[Coke]> timotimo: nope.

[15:13] <[Coke]> ;just found this doc looking for the CLA doc.

[15:13] <timotimo> i think it's some javascript api that you can use for your stuff

[15:17] <[Coke]> I won't get to it any time soon if someone wants to play. :0

[15:17] <timotimo> :)

[15:23] *** [Sno] left
[15:25] *** kurahaupo left
[15:27] *** rindolf left
[15:30] *** ajr_ left
[15:35] *** ajr joined
[15:35] *** ajr is now known as Guest87261

[15:35] *** Guest87261 is now known as ajr_

[15:36] *** fhelmberger joined
[15:36] *** fhelmberger left
[15:38] *** kurahaupo joined
[15:46] * [Coke] wonders what happened to http://rakudo.org/node/75

[15:47] <[Coke]> (found from an old reddit post)

[15:56] *** kanishka left
[15:59] *** Psyche^_ joined
[16:02] <timotimo> https://web.archive.org/web/20100914203621/http://rakudo.org/node/75 - maybe this?

[16:02] <timotimo> https://web.archive.org/web/20100731055044/http://rakudo.org/node/75 or this

[16:02] *** Ven joined
[16:03] *** lizmat left
[16:03] *** Psyche^ left
[16:11] *** crab2313 joined
[16:18] <TimToady> fyi, RC is back up now

[16:20] <timotimo> doesn't seem to have anything on Dancing Links or Algorithm X

[16:20] *** woolfy left
[16:30] *** Ven left
[16:38] *** virtualsue left
[16:41] *** zakharyas left
[16:45] *** fhelmberger joined
[16:50] *** sqirrel_ joined
[16:53] *** isBEKaml joined
[16:57] <dalek> rakudo-star-daily: 8f58593 | coke++ | log/ (5 files):

[16:57] <dalek> rakudo-star-daily: today (automated commit)

[16:57] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/8f58593e3f

[16:57] <dalek> rakudo-star-daily: f8448f1 | coke++ | log/ (5 files):

[16:57] <dalek> rakudo-star-daily: today (automated commit)

[16:57] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/f8448f160a

[16:57] <dalek> perl6-roast-data: 3257f4a | coke++ | / (5 files):

[16:57] <dalek> perl6-roast-data: today (automated commit)

[16:57] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/3257f4a66f

[16:57] *** fhelmberger left
[16:59] <isBEKaml> moritz: I gotta ask - did you just find the errata first thing when somebody points out some new feature in git? (Context: I'm referring to this conversation here -> http://irclog.perlgeek.de/perl6/2014-02-18#i_8301578) :-)

[17:01] <isBEKaml> s/new/obscure/

[17:01] *** arnsholt joined
[17:01] <arnsholt> o/

[17:01] <colomon> \

[17:01] <colomon> \o

[17:01] * colomon has to get his Mac's keyboard fixed

[17:02] *** LLamaRider left
[17:03] <raydiak> colomon: don't lose your head :)

[17:04] <colomon> http://www.youtube.com/watch?v=LcG5HQnCBU4&feature=kp

[17:05] <raydiak> haha

[17:09] <raydiak> r: my $a = 2**128/1e18; say $a; say $a/100;

[17:09] <camelia> rakudo-parrot 9025c3: OUTPUT¬´3.40282366920938e+20‚ê§3.40282366920938e+18‚ê§¬ª

[17:09] <camelia> ..rakudo-moar 9025c3: OUTPUT¬´3.40282366920938e+2‚ê§3.40282366920938e+18‚ê§¬ª

[17:09] <camelia> ..rakudo-jvm 9025c3: OUTPUT¬´3.402823669209385E20‚ê§3402823669209384960‚ê§¬ª

[17:09] <raydiak> ^^ known moarbug?

[17:09] *** fhelmberger joined
[17:10] <timotimo> float formatting is, i think

[17:10] <timotimo> huh.

[17:10] <colomon> jvm-bug as well

[17:10] <masak> not know, methinks.

[17:10] <masak> known*

[17:11] <moritz> isBEKaml: no; I recentely held a git course, together with a coworker. He told me about that problem with git pull --force 

[17:11] * raydiak goes to report it

[17:11] <masak> moritz++ # I didn't know about that one either

[17:12] <isBEKaml> cool, moritz++

[17:15] *** FROGGS left
[17:17] * japhb is starting to wonder if float formatting just needs a scratch rewrite, given the bug count.  :-(

[17:18] <colomon> japhb: probably not a bad idea, if you've got the time.  ;) 

[17:19] <japhb> I wish.

[17:19] <colomon> There are some conceptual issues -- it probably should work correctly for Rats, FatRats, etc too.

[17:19] * japhb is so deep in yak hair he's having trouble seeing over the pile

[17:20] <colomon> it would be great even if someone just kept putting error cases in the test suite‚Ä¶ so at least we don't lose the knowledge of what needs to be fixed.

[17:21] <[Coke]> failing tests >> no tests

[17:21] <japhb> colomon: True enough.  As a matter of fact, a first pass might convert Num/num/Rat to FatRat, and just write the FatRat case.

[17:21] <colomon> except we don't have direct FatRat support in NQP, do we?

[17:21] <japhb> colomon: I think you put a couple reports from the last few months in.

[17:22] *** pecastro left
[17:22] <japhb> For NQP, we can just pass numerator and denominator to the formatting op separately.

[17:22] *** SamuraiJack__ joined
[17:24] <japhb> timotimo: For this week's summary's LHF list: 1) Create a good test suite for numeric formatting, 2) Make it pass.

[17:25] <timotimo> good idea

[17:27] *** fhelmberger left
[17:27] <moritz> I don't think that 2) is a LHF

[17:28] <timotimo> right, but 1) is

[17:28] <moritz> one LHF, one HHF :-)

[17:29] <moritz> (though there I'm pretty sure there's lots of literature on float formatting out there)

[17:29] <TimToady> there are a lot of people who think 2) is a LHF, but we need someone who knows better :)

[17:32] *** isBEKaml left
[17:33] <sergot> What about GSoC this year? :)

[17:33] <moritz> that would be pretty dull, no?

[17:34] *** molaf joined
[17:34] <timotimo> aye, nothing about float formatting is interesting or spectacular

[17:35] <masak> sergot++ wants to do GSoC work within Perl 6 this year.

[17:35] *** ajr_ left
[17:35] <masak> which is awesome.

[17:35] <masak> how can we enable him to do that?

[17:36] *** ajr joined
[17:36] *** ajr is now known as Guest76509

[17:36] *** Guest76509 is now known as ajr_

[17:36] <nwc10> either by Google accepting TPF as a mentoring organisation, or I guess failing that, a Hague Fund grant

[17:37] <timotimo> masak: through nepotism! :)

[17:37] <[Coke]> Does he have a particular project in mind? or a particular set of skills?

[17:37] <masak> he has a particular project in mind.

[17:38] <sergot> Mainly, I wanted to implement ssl in p6.

[17:38] <sergot> And HTTP::* stuff

[17:38] <timotimo> oh that sounds nice

[17:38] <sergot> + LWP and WWW stuff

[17:39] <masak> sergot++

[17:39] *** cooper left
[17:39] *** cooper joined
[17:40] <japhb> SSL (in particular, a complete binding to openssl) was one of my GSOC suggestions because I really need it.

[17:41] <arnsholt> I could probably co-mentor the NativeCall bits of such a project

[17:42] <[Coke]> is that enough for a full GSOC ?

[17:42] <[Coke]> (if not, adding other bits needed to get us something like Mojolicious6 ++)

[17:42] *** [Sno] joined
[17:43] <[Coke]> add that project to the list, though, if it's not already there.

[17:43] <sergot> After implementing ssl we'll be able to write a lot of new things, won't we?

[17:44] <sergot> regardless gsoc I want to implement those. :)

[17:44] <TimToady> after that we can win the hearts of *all* the hipsters :)

[17:44] <japhb> A full Mojolicious on Perl 6 would be a big task, I would think.

[17:45] <japhb> Does GSOC have the concept of "main goals" and "stretch goals"?

[17:45] *** kanishka joined
[17:46] <TimToady> my impression is that they work more on the bite-off-more-that-you-can-chew principle and then see how it goes :)

[17:46] <japhb> Because OpenSSL binding + Mojo would be a main goal -- and getting to full Mojolicious would definitely be a stretch.

[17:46] <japhb> Fair enough.

[17:47] <vendethiel> Mojolicious on Perl 6 seems like a fun task to do :)

[17:47] <TimToady> but as a result we end up with a lot of half-done GSoC projects sitting around...

[17:47] * [Coke] was just thinking a morbo-alike (moarbo) would be possible now with recent socket improvements on moar.

[17:47] <jnthn> We should have async sockets in time for GSoC projects too, which will be a big help for those things.

[17:48] <timotimo> oh, even on moar? :P

[17:48] <[Coke]> TimToady: which makes it a minicosm of perl6 development. :P

[17:48] <jnthn> timotimo: Yeah. Maybe even first on Moar.

[17:48] * [Coke] himself has a ton of things he could finish. :P

[17:48] <sergot> After that all ssl and HTTP:: stuff I want to work on Qt bindings. :)

[17:48] <jnthn> Depends what order I pick things off :)

[17:48] <japhb> vendethiel: :-)  Note though that the lead dev of Mojo* has said Rakudo currently lacks some things he believes are necessary for a proper port.  Decent signal handling and full async IO, for two.

[17:48] <[Coke]> oh. is there a jenkins-alike that handles TAP output?

[17:49] <timotimo> probably even a jenkins plugin

[17:49] <jnthn> The concurrency stuff is the Next Big Thing I need to work on for Moar.

[17:49] <[Coke]> that woudl let me kill at least one side project. ;)

[17:50] <timotimo> \o/

[17:50] <TimToady> some combination of native shaped arrays and sending things off to a vector processor might be a good GSoC project

[17:51] <moritz> [Coke]: there's http://jmason.org/software/scripts/tap-to-junit-xml.txt which would allows you to use hudson/jenkins

[17:51] <moritz> http://stackoverflow.com/questions/101786/which-continuous-integration-framework-for-perl

[17:51] <TimToady> that is, do something cool with embarrassingly parallelizable hyperoperators

[17:51] *** sqirrel_ left
[17:53] <arnsholt> sergot: Qt bindings is probably going to have a large research component to it

[17:53] <arnsholt> Qt is all C++, which is beyond the scope of NativeCall

[17:54] <[Coke]> moritz: you think we could run this on one of the feathers?

[17:55] <sergot> arnsholt: oh.. you're right.

[17:55] <[Coke]> moritz: nevermind. I'll play with some of the options on that page and see if I can get something going.

[17:55] <arnsholt> sergot: That's not to say it's impossible. There are Python bindings (IIRC), so it's certainly possible

[17:56] <arnsholt> I'm just not quite sure how =)

[17:56] <__sri> japhb: a simple port of mojolicious isn't such a big project, less than 9k lines of code, what will take more time is adapting new perl6 idioms

[17:56] *** kanishka left
[17:56] <TimToady> we just need a refactoring translator, is all... :)

[17:57] * arnsholt idly ponders applying statistical machine translation techniques to $lang_a to $lang_b refactorings

[17:57] <TimToady> it only has to be smart enough to solve the halting problem

[17:58] <timotimo> i think we learnt how to solve the halting problem in comp sci class

[17:58] <timotimo> it was actually the same week i learnt how to do my own super secure crypto based on DES and md5

[17:59] <arnsholt> That's what compiler optimisations are, no? Special case solutions to general case unsolvable problems =)

[17:59] <sergot> arnsholt: So, we should think about it. For now I want to take care of ssl. :)

[18:00] <arnsholt> SSL should be more straightforward. More a question of finding the bugs and limitations in NativeCall and solving/working around them

[18:00] <timotimo> i'm a really big fan of Qt; maybe the stuff the PySide people came up with could be made to work with perl6, actually

[18:00] <TimToady> .oO(Is it better to be buried in a pile of yak hair, or in a pile of unshaven yaks?)

[18:00] <TimToady> timotimo: we just need that refactoring Py2P6 translator as well

[18:00] <arnsholt> If you're buried in yak hair, at least some of the yaks are shaven, so the former I guess?

[18:00] <jnthn> arnsholt: Reminds me of a quip from one researcher on the "what department might you do a PhD with" day: "In the PL research group the problems are mostly undecidable or NP-complete, but we solve them fast anyway." :)

[18:01] <arnsholt> \o/

[18:01] <timotimo> TimToady: actually, i think what that project does is generate CPython extension code

[18:01] <timotimo> so we would have to emulate the CPython API like the pypy people do :P

[18:01] <TimToady> well, that's the part you have to refactor :P

[18:01] <arnsholt> Yeah, let's not do that =)

[18:02] *** fhelmberger joined
[18:02] <timotimo> maybe someone wants to work some more on our Net-ZMQ binding

[18:02] *** tgt joined
[18:02] *** supernovus joined
[18:03] <timotimo> especially now that we can have concurrency as well as NativeCall

[18:04] <arnsholt> Yeah, it's one of the options on my list of things I'd like to do

[18:04] <arnsholt> An IPython kernel for Rakudo would be awesome

[18:05] <timotimo> aye.

[18:05] <supernovus> A quick question, would "Configure.pl --gen-parrot --gen-moar --gen-nqp --backends=parrot,moar,jvm" generate all of the current Rakudo backends? It's been quite some time since I've used Rakudo (or anything Perl 6 related for that matter) and would like to fix up some of my rusting modules. 

[18:06] <TimToady> or --backends=ALL

[18:06] <TimToady> (with those --gen options)

[18:06] <moritz> supernovus: yes, looks right to me

[18:06] <timotimo> oh hey supernovus!

[18:07] <timotimo> supernovus: are you going to look into making the psgi library do some parallelism on the jvm?

[18:08] *** fhelmberger left
[18:09] *** dakkar left
[18:09] <timotimo> hm, also now that we have sockets, psgi on moar would be an interesting thing to test

[18:09] <supernovus> timotimo: I'd love to look into making PSGI, SCGI, FastCGI and Web all support parallelism on any VMs supporting it. Of course I'd have to do it in a way that backends that don't support it could ignore it...

[18:09] <timotimo> yes, that's probably the hard part

[18:10] <timotimo> though when moar gets the parallelism stuff, we only have to worry about the upcoming JS port and that should do just fine with parallelism, no?

[18:11] <timotimo> in that case we could probably get away with parrot users getting a different module for that

[18:12] *** SamuraiJack__ left
[18:14] <supernovus> Done using some of my usual tricks, I could have backend submodules that get loaded on demand depending on the runtime.

[18:15] <timotimo> that would work; alternatively you could have a Build.pm

[18:15] <japhb> supernovus: For which I recommend testing if ::('Thread') ~~ Failure -- working here for me.  :-)

[18:15] <timotimo> but that'd only work with panda, not with ufo

[18:15] <supernovus> Feature detection and dynamic loading, yeah, you might be able to tell that my day job involves a lot of browser-side Javascript ;-)

[18:15] <timotimo> :D

[18:16] *** denis_boyun joined
[18:16] <nwc10> JS has parallelism that can use multiple CPU cores?

[18:16] <timotimo> oh, crap, i forgot about that

[18:16] <moritz> web workers, afaict

[18:16] <timotimo> moritz: rakudo-js is almost primarily targetting node.js, though

[18:16] <timotimo> and web workers are pretty painful it seems like

[18:17] *** kbaker left
[18:18] <supernovus> Hmm, looks like I need to read S11, my modules have a line through the S11 support logo...

[18:18] <timotimo> it's for the "experimental S11" stuff

[18:18] <timotimo> basically means you have to put a "provides" section in your Meta.list

[18:19] *** rindolf joined
[18:19] <timotimo> er, Meta.info

[18:21] *** [Sno] left
[18:21] *** ajr_ left
[18:24] *** hoverboard joined
[18:25] <supernovus> Looked at a few projects with the provides structure, seems simple enough.

[18:26] <timotimo> yup

[18:27] *** Rotwang joined
[18:33] <supernovus> So, with the provides, any module/compunit that is meant for external consumption should be listed?

[18:35] <timotimo> actually not 100% sure if it's also necessary for "internal" things to be in there

[18:35] <timotimo> i also forgotten where the writeup could be found

[18:36] *** jnap joined
[18:36] <supernovus> Hmm, well, I've seen a few modules that only have their public module/class listed.

[18:36] <timotimo> it'll take a bit until s11 gets mandatory

[18:36] <timotimo> worst case someone'll shoot you a pullrequest ;)

[18:39] *** Adriaaan joined
[18:40] *** benabik joined
[18:44] *** mtk left
[18:44] *** slavik left
[18:46] *** slavik joined
[18:47] *** pdcawley left
[18:47] *** ajr joined
[18:47] *** ajr is now known as Guest26091

[18:48] *** darutoko left
[18:48] *** Guest26091 is now known as ajr_

[18:48] *** berekuk joined
[18:50] <supernovus> Hmm, I'm guessing the names in "provides" are for compilation units, not necessarily classes? As for instance the XML library, you only ever do "use XML", and all of the individual classes (XML::Node, XML::Element, etc.) are defined within XML.pm6

[18:50] *** mtk joined
[18:51] <vendethiel> timotimo: where's rakudo-js ?

[18:51] <vendethiel> source-wise I mean

[18:51] *** pecastro joined
[18:53] <supernovus> Should we still be using * as the version in our META.info, or actually specifying a real version?

[19:03] *** FROGGS joined
[19:06] *** SamuraiJack__ joined
[19:18] <raydiak> is there a way to tell panda not to build JARs for a module? or better yet, any tricks to get it to not run out of memory when doing so?

[19:22] <rurban_> perl Configure.pl --backends=parrot --with-parrot=`which parrot`: Using /usr/local/bin/parrot (version 0). (empty version from installed parrot)

[19:23] <rurban_> nqp also doesn't support parallel make yet (dyncall)

[19:23] <PerlJam> raydiak: probably the same way that is specified in Rakudo's README  (Using something like "-Xms500m -Xmx2g").  But I don't know how to pass that to panda.

[19:24] <PerlJam> (or even if you can.  It's just what occurs to me that might work)

[19:26] <raydiak> PerlJam: good idea, but I already had to put that in my nqp-j, to get the module to work at all

[19:26] <raydiak> even gave it 3 gigs to both ms and mx, still no luck

[19:27] *** SamuraiJack__ left
[19:28] <FROGGS> supernovus: put everything in the provides section that will be "use"-d or "require"-d

[19:29] <supernovus> FROGGS: thanks, that's what I'm doing. Anything that someone would do a "use xxx" I'm putting into the provides structure.

[19:29] <FROGGS> supernovus: and even what your module is going to use internally

[19:29] <raydiak> oh, wait...perl6-j doesn't call nqp-j

[19:30] <FROGGS> (because there is no difference)

[19:30] <supernovus> Yeah, including internal dependencies if they are defined in separate files that need to be "use"-ed.

[19:30] <FROGGS> exactly

[19:32] *** sqirrel_ joined
[19:32] *** Adriaaan left
[19:35] <raydiak> PerlJam++ # your suggestion led me to reexamine my fallacious assumptions :)

[19:36] <sergot> good night! o/

[19:36] <PerlJam> btw, speaking of panda ... has moar-support really been merged?  It doesn't appear so in my copy of the panda repo (it still lives primarily in tadzik/panda, yes?)

[19:37] <FROGGS> PerlJam: moar-support has not been merged in panda afaik

[19:38] <FROGGS> and yes, it is in tadzik/panda

[19:38] <PerlJam> ok, thanks.

[19:47] *** denis_boyun__ joined
[19:48] *** denis_boyun left
[19:49] *** benabik left
[19:50] *** benabik joined
[19:51] *** lizmat joined
[19:53] *** sqirrel_ left
[19:53] *** [Sno] joined
[19:55] *** hoverboard is now known as binarycloack

[19:56] *** binarycloack is now known as hoverboard

[19:56] *** kivutar joined
[19:57] *** woolfy joined
[20:04] <lue> hello o/

[20:05] *** molaf left
[20:07] <raydiak> \o lue

[20:08] <lizmat> hello #perl6 from Cologne

[20:09] <tadzik> no, I didn't merge it yet

[20:09] <tadzik> I don't see why I shouldn't though :)

[20:10] <masak> hi lue, lizmat

[20:10] <lizmat> masak o/

[20:12] <FROGGS> tadzik: I've not tested it properly but I can't imagine that panda-p would break for some reason

[20:12] <tadzik> should be easy enough to test

[20:13] *** kaare_ left
[20:15] <tadzik> ‚ÄûRicardo Signes, Perl 5 Pumpkin‚Äù

[20:15] <tadzik> I think TPF meant for that to say "pumpking"... or did it? :P

[20:15] <masak> :P

[20:16] <masak> tadzik: I thought someone told you. "Ricardo Signes" is the name of the pumkin the Perl 5 devs pass around among themselves.

[20:16] <masak> pumpkin*

[20:16] <masak> tadzik: the actual Perl 5 Pumpking is called Inigo Montoya.

[20:17] <tadzik> :)

[20:19] <benabik> Perl 5.20 "You Killed My Father, Prepare to Die"

[20:21] <masak> :D

[20:21] *** rindolf left
[20:21] <masak> Perl 5.22 "You keep using that word. I do not think it means what you think it means"

[20:22] <tadzik> Perl 5.24 "Just migrate to Perl 6 already"

[20:22] <tadzik> I want to believe Ôºà¬¥„ÉºÔΩÄ„ÄÄÔºâ

[20:23] <masak> peaceful coexistence, man.

[20:23] <tadzik> peace, brother

[20:24] <lizmat> .oO( and I submitted a talk about the de-cocooning of the Camel into Camelia )

[20:24] *** dmol left
[20:25] <masak> lizmat: well, as stevan__++'s moe shows, everything turns to Perl 6 in the end :P

[20:25] *** supernovus left
[20:26] <lizmat> but when?  :-)

[20:26] <tadzik> in 5.24, of course :P

[20:28] <lue> Would a POD2Pod converter be helpful? All it seems it would do is encase the file in =begin/=end pod, replace =over/=back, remove =cut, replace F<>, and change L<Page/Sec> to L<Page#Sec>

[20:30] <masak> lue: I can see how it could be useful, yes.

[20:31] <lue> Alright, 'cos I feel writing such a thing would be ultimately more useful than me hand-converting all the synopses to Pod6.

[20:32] *** denis_boyun__ left
[20:34] *** denisboyun joined
[20:37] <dalek> roast: 2e83594 | (Elizabeth Mattijsen)++ | S05-mass/charsets.t:

[20:37] <dalek> roast: Test seems to pass on Moar, fail on JVM and Parrot

[20:37] <dalek> roast: review: https://github.com/perl6/roast/commit/2e835942fa

[20:42] <raydiak> anything special I ought to know about adding a module to the ecosystem? or just throw it on the end of META.list and call it good?

[20:43] <tadzik> there's a wiki for that! :P

[20:43] <tadzik> raydiak: http://wiki.perl6.org/Create%20and%20Distribute%20Modules

[20:43] <tadzik> but yeah, it's mostly what you said

[20:43] <tadzik> just please double check if META.info is valid json, or if it installs with panda

[20:43] <tadzik> panda can install stuff from local directories

[20:43] <tadzik> if panda doesn't work for you please yell at me until I fix it

[20:44] <raydiak> I did try panda-build and panda-install locally, so ought to be good there

[20:44] <raydiak> is the .md on README important?

[20:45] <tadzik> no

[20:45] <tadzik> module ecosystem doesn't care

[20:45] <lue> just means the README's in markdown

[20:45] <tadzik> it helps github to render stuff

[20:45] <lue> tadzik: well, the ecosystem won't recognize README.pod6 ... :)

[20:46] <raydiak> just thought I'd check, since it's mentioned explicitly

[20:46] *** erkan left
[20:46] <dalek> ecosystem: baff396 | raydiak++ | META.list:

[20:46] <dalek> ecosystem: Add Math::ThreeD

[20:46] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/baff396740

[20:48] <tadzik> raydiak++

[20:48] <raydiak> thanks :) how often does it update, so I can try an end-to-end test when it's available?

[20:49] <tadzik> the panda modules list updates hourly

[20:49] <tadzik> then you need 'panda update' locally

[20:49] <tadzik> or I can poke the cronjob to do it now

[20:49] <raydiak> nah no rush...I need a shower anyway

[20:49] <tadzik> (I just did it anyway)

[20:50] <raydiak> that works

[20:52] <tadzik> it should be there now

[20:52] <tadzik> http://feather.perl6.nl:3000/module/Math;ThreeD :)

[20:53] <raydiak> hm, something is broken

[20:53] <raydiak> "Could not find file '/home/x/.work/1392756757_1/.work/1392756757_1/gen-libs.p6' for module /home/x/.work/1392756757_1/.work/1392756757_1/gen-libs.p6"

[20:54] <lue> tadzik: how would I specify scripts (e.g. bin/dothings.p6) in a META.info? I don't know of any S11-compliant module with such things.

[20:54] <raydiak> probably has to do with something I did wrong in the build stuff

[20:55] <tadzik> hmmm

[20:56] <tadzik> oh

[20:56] <tadzik> the contents of lib/ bin/ and t/ are copied over

[20:56] <raydiak> ah

[20:56] <tadzik> .......I think :)

[20:57] <raydiak> but not everything else? what about build scripts that you don't want installed like the stuff you'd put in bin?

[20:57] <tadzik> hmm

[20:57] <tadzik> did you look into that .work/blabla dir?

[20:57] <tadzik> it may not be there once panda finishes

[20:58] <tadzik> but if it is, it may prove insightful

[20:58] <raydiak> yeah, ~/.work doesn't even exist after it exits

[20:58] <tadzik> yeah, that's semi-useful. I should probably keep it if it fails, and then maybe reomve it on next startup

[20:59] <tadzik> s/I/It/

[21:00] <tadzik> I promise to look into it later, now I'm pretty much out of mana :

[21:00] <FROGGS> raydiak: your error message looks like you are doing a "require" which decided not to like relative paths

[21:00] <raydiak> so if I just move it all into lib and/or bin, it ought to work for now?

[21:00] <tadzik> :(

[21:00] <raydiak> I did this: class Build is Panda::Builder { method build ($where) { require "{$where.path.absolute.child('gen-libs.p6')}"; } }

[21:00] <tadzik> lue: oh, you have to ask FROGGS about that :)

[21:00] <tadzik> he's the S11 expert

[21:01] <tadzik> the error message seems to indicate that you did it correctly

[21:01] <FROGGS> lue: you just have to put them in bin/ I think

[21:01] <tadzik> and since you said that panda-build and panda-install worked, it sounds like it can only be a matter of panda-fetch being stupid

[21:01] <FROGGS> panda installs things that are in bin/, and then the eleven branches would install it including wrappers for -m, -p and -j

[21:02] *** dayangkun left
[21:02] <FROGGS> perhaps we should test require and require+precomp on its own

[21:02] <lue> FROGGS: I was just curious about how to set up that provides section, if necessary.

[21:03] <FROGGS> lue: scripts are not supposed to go into provides

[21:03] <FROGGS> lue: only comp units that you are going to "use"/"need" or "require" are supposed to be in there

[21:04] <FROGGS> beause that is what it is, just a map of names to files

[21:04] <FROGGS> "files", even :o)

[21:04] <lue> Alright then; just curious if I had to say that this module comes with script.p6, like how you say that it comes with Foo::Bar

[21:04] <FROGGS> lue: no, because script.p6 kinda is a filesystem thing, in contrast to Foo::Bar

[21:05] *** mtk left
[21:05] <FROGGS> lue: and don't worry, if something won't work out with S11, I'll pull request you :o)

[21:06] <FROGGS> the next two months are fully dedicated to S11 from my side

[21:07] *** mtk joined
[21:08] *** logie left
[21:09] <raydiak> is there an intended place that I put scripts and libs which are only relevant to the build process, and not part of the resulting module? if I put a build script in bin, will it end up in the user's PATH or anywhere else cluttering up their system? or just tucked away with the module itself?

[21:09] *** logie joined
[21:09] <FROGGS> bin/ will be in PATH, yes

[21:09] <FROGGS> I'd put scripts in tools/ if I were you

[21:10] <FROGGS> and you could have an inc/ dir for build time modules

[21:11] <raydiak> hrm

[21:11] <FROGGS> raydiak: the require error is triggered by installing Math::ThreeD?

[21:11] <raydiak> yes

[21:11] <FROGGS> btw, that inc/ dir is Perl 5 thinking, but I think it is still valid

[21:12] *** kivutar left
[21:12] *** kivutar joined
[21:13] <raydiak> the whole lib is generated by the build process, the repo doesn't even have a lib/ in it (which may also be part of the problem)

[21:14] <dalek> specs: 10590d4 | (Elizabeth Mattijsen)++ | create_contents.p6:

[21:14] <dalek> specs: Make create_contents a bit more idiomatic P6

[21:14] <dalek> specs: review: https://github.com/perl6/specs/commit/10590d4f6e

[21:14] <FROGGS> no, that should not be a problem according to Panda::Builder

[21:14] <lizmat> FROGGS++ for "the next two months are fully dedicated to S11 from my side"

[21:15] <FROGGS> :o)

[21:16] <FROGGS> panda-m install Math::ThreeD

[21:16] <FROGGS> ==> Fetching Math::ThreeD

[21:16] <FROGGS> ==> Building Math::ThreeD

[21:16] <FROGGS> Could not find file '/home/froggs/dev/panda/.work/1392758161_1/.work/1392758161_1/gen-libs.p6' for module /home/froggs/dev/panda/.work/1392758161_1/.work/1392758161_1/gen-libs.p6

[21:16] <FROGGS> so yeah, that even happens using the "eleven" branches

[21:19] <raydiak> I'll dig more into it in an hour or so...luckily panda is very sane and easy to read (the code I mean) tadzik++

[21:20] <FROGGS> it felt a bit too OO-y for me when I read it the first time

[21:21] <raydiak> I don't mind if it's this-or-that paradigm, as long as I don't find myself pouring over reams of text and getting my mind tied in knots trying to follow the execution path

[21:22] <FROGGS> that was my problem, getting the execution path :o)

[21:22] <raydiak> maybe I haven't seen the scary parts yet, then :)

[21:24] <raydiak> just explored enough so far to figure out how to hook into the build process to call gen-libs.p6

[21:26] <raydiak> heh otoh, that's the part which is currently broken

[21:26] <FROGGS> *g*

[21:28] *** virtualsue joined
[21:29] <raydiak> imma go take that shower before continuing my investigation...bbiab

[21:29] *** dmol joined
[21:30] <FROGGS> ahh, I see the problem

[21:30] <lue> Am I right in thinking POD5 doesn't allow  =begin item  to mean what it does it Pod6?

[21:31] <FROGGS> the path in $where is '.work/1392758989_1', but when Build.pm is called panda already chdird to that path

[21:31] <FROGGS> that is why it is doubling it up

[21:32] <FROGGS> ... Compiling lib/Math/ThreeD/Mat44.pm to mbc

[21:33] <FROGGS> tadzik: so we either pass cwd to Build.pm in Panda::Builder L61, or we should make $where absolute before calling indir

[21:34] <FROGGS> t/01-basics.t .. 1/? Cannot call 'is-approx'; none of these signatures match:

[21:34] <FROGGS> :(Vec3 $v1, Vec3 $v2, Any $desc?)

[21:38] *** eternaleye joined
[21:41] <FROGGS> raydiak: I am going to bed now, feel free to pull request panda

[21:42] *** zby_home_ joined
[21:48] *** kivutar_ joined
[21:49] *** rurban joined
[21:50] *** kivutar left
[21:51] *** woolfy left
[21:54] <lizmat> decommute&

[21:54] *** lizmat left
[21:54] <pmichaud> good afternoon, #perl6

[21:56] <jnthn> o/ pmichaud 

[21:56] *** [Sno] left
[21:57] <[Coke]> \o

[21:57] <pmichaud> (coming to you live from the third-largest state in the Union :-)

[21:58] <lue> o/ pmichaud

[21:59] <jnthn> hm, not Alaska or Texas then?

[21:59] * jnthn ponders where else is big...

[21:59] <jnthn> CA?

[21:59] <[Coke]> aye.

[22:03] <pmichaud> Indeed, .ca.us  .

[22:05] *** eternaleye left
[22:08] *** cognominal left
[22:08] *** cognominal joined
[22:09] *** eternaleye joined
[22:22] *** berekuk left
[22:23] *** berekuk joined
[22:27] <lue> r: grammar G { proto token T { prestuff <...> } multi token T { \d } }; say "alive!"

[22:27] <camelia> rakudo-parrot 9025c3, rakudo-jvm 9025c3, rakudo-moar 9025c3: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unrecognized regex metacharacter < (must be quoted to match literally)‚ê§at /tmp/tmpfile:1‚ê§------> [32mrammar G { proto token T { prestuff <...[33m‚èè[31m> } multi token T { \d ‚Ä¶¬ª

[22:28] <lue> Am I doing something wrong there, or...?

[22:28] <timotimo> i think <...> doesn't work yet

[22:28] <lue> :( works in Perl6/Grammar.nqp though

[22:29] <timotimo> oh?

[22:29] <timotimo> hum :\

[22:29] <lue> well, it's always { <...> } , but I don't see how pre-stuff would break it

[22:29] <lue> r: grammar G { proto token T { <...> } multi token T { \d } }; say "alive!"

[22:29] <camelia> rakudo-parrot 9025c3, rakudo-jvm 9025c3, rakudo-moar 9025c3: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Two terms in a row‚ê§at /tmp/tmpfile:1‚ê§------> [32mgrammar G { proto token T { <...> } [33m‚èè[31mmulti token T { \d } }; say "alive!"[0m‚ê§ ‚Ä¶¬ª

[22:29] <lue> r: grammar G { proto token T { <...> }; multi token T { \d } }; say "alive!"

[22:29] <camelia> rakudo-parrot 9025c3, rakudo-jvm 9025c3, rakudo-moar 9025c3: OUTPUT¬´alive!‚ê§¬ª

[22:30] <lue> timotimo: apparently, it's just the useless form of <...> that works right now :/

[22:30] *** Rotwang left
[22:30] <timotimo> that's what i feared :(

[22:32] <jnthn> No, a proto-token is always an immediate dispatch 

[22:33] <lue> jnthn: Darn, I was kinda hoping it'd work like proto method foo(|) { prestuff(); {*} }

[22:33] <jnthn> I fear it's non-trivial to implement right.

[22:33] <jnthn> lue: Maybe some day.

[22:33] *** skids left
[22:33] <lue> Is it supposed to, or is it spec'd to only ever be { <...> } ?

[22:33] <timotimo> ooooh, wednesday is coming up

[22:33] <jnthn> lue: I don't recall seeing a spec example where you could do otherwise.

[22:34] <jnthn> ah, there is one.

[22:35] <lue> jnthn: for now, since my prestuff is just one '=', I can workaround it. So for me in this case, it's not super-critical

[22:35] * lue &

[22:35] *** berekuk left
[22:35] <jnthn> But yeah, it's not hard to work around. Just declare another token that does <prestuff> <callproto> <poststuff>

[22:36] <jnthn> The problem is that S05 seems to want the match object from the proto-dispatch to somehow be incorporated into the final one.

[22:36] <jnthn> Which feels...odd.

[22:36] <jnthn> But do-able I guess.

[22:37] <jnthn> It'd likely need NFA work too.

[22:44] <timotimo> what do we need to do to actually get the packfile API working properly? can it be done for this month's release?

[22:45] *** [Sno] joined
[22:47] *** rurban left
[22:50] *** arnsholt left
[22:50] *** berekuk joined
[22:50] <raydiak> FROGGS++: thanks! hope you're sleeping well :)

[22:58] <lue> jnthn: yeah, putting it proto is really mostly a semantics issue, not like there aren't ways around it.

[22:58] <timotimo> that change has been brewing for a long time now

[22:59] <timotimo> and now it's us who's keeping the feature from going in

[23:02] *** jnap left
[23:03] <lue> jnthn: I imagine the incorporation bit is to handle calls to specific multis, perhaps?

[23:04] *** eternaleye left
[23:05] *** eternaleye joined
[23:07] *** rurban joined
[23:09] *** hoverboard left
[23:09] *** kaare_ joined
[23:09] *** d4l3k_ joined
[23:10] *** LordV joined
[23:10] *** tgt left
[23:11] *** hoverboard joined
[23:14] *** jnap joined
[23:14] *** logie__ joined
[23:15] <jnthn> lue: Perhaps. A bit tied up with a $dayjob task at the moment to really think about it. :)

[23:15] <lue> That's alright, like I said, not critical for me at the moment :)

[23:16] *** kurahaupo left
[23:16] *** dmol left
[23:16] *** logie left
[23:16] *** thou left
[23:16] *** LordVorp left
[23:16] *** dalek left
[23:16] *** vendethiel left
[23:16] *** yeltzooo left
[23:17] *** d4l3k_ is now known as dalek

[23:17] *** vendethiel joined
[23:18] <lue> r: say ¬´foo:<bar>¬ª; say ¬´foo:bar¬ª # please tell me this is a bug

[23:18] *** dmol joined
[23:18] *** thou joined
[23:18] *** yeltzooo joined
[23:18] <camelia> rakudo-parrot 9025c3, rakudo-jvm 9025c3, rakudo-moar 9025c3: OUTPUT¬´foobar‚ê§foo‚ê§¬ª

[23:18] *** yeltzooo left
[23:18] <lue> n: say ¬´foo:<bar>¬ª; say ¬´foo:bar¬ª # please tell me this is a bug

[23:18] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´foo:<bar>‚ê§foo:bar‚ê§¬ª

[23:19] *** yeltzooo joined
[23:19] <timotimo> wowza. ¬´¬ª is so broken!

[23:19] <lue> Looks like I'll have to go with :rule('...') for now. :/

[23:19] *** bjz left
[23:20] *** zby_home_ left
[23:20] <lue> oh, I guess I could use <> . Feels wrong though :) .

[23:20] *** bjz joined
[23:21] <jnthn> You do knwo that colonpairs actually mean something in a ¬´¬ª, right?

[23:22] <timotimo> oh

[23:22] <timotimo> well that could be something

[23:22] <lue> jnthn: yeah, though I'd say that's too eager to find colonpairs.

[23:22] *** Nei_ joined
[23:22] <lue> (didn't know before trying ¬´¬ª though ‚ò∫)

[23:23] <jnthn> Yeah, S02 agrees

[23:24] *** ajr_ left
[23:24] <jnthn> r: say ¬´foo:<bar>¬ª.perl; say ¬´foo:bar¬ª.perl

[23:24] <camelia> rakudo-parrot 9025c3, rakudo-jvm 9025c3, rakudo-moar 9025c3: OUTPUT¬´("foo", "bar")‚ê§("foo", "bar" => Bool::True)‚ê§¬ª

[23:24] *** Nei left
[23:24] *** telex left
[23:24] <jnthn> r: say :<bar>

[23:24] <camelia> rakudo-parrot 9025c3, rakudo-jvm 9025c3, rakudo-moar 9025c3: OUTPUT¬´bar‚ê§¬ª

[23:24] <jnthn> r: say :<bar>.perl

[23:24] <camelia> rakudo-parrot 9025c3, rakudo-jvm 9025c3, rakudo-moar 9025c3: OUTPUT¬´"bar"‚ê§¬ª

[23:25] <jnthn> Well, it's consistent if nothing else :)

[23:25] *** telex joined
[23:25] *** Nei_ is now known as Nei

[23:26] <jnthn> Anyway, I don't think it's "so broken", though arguably it might need to care more for whitespace.

[23:26] <jnthn> The spec, or at least the bit of S02 I'm looking at, is a bit short of examples.

[23:26] <lue> That's what I concluded of S02 too: not enough examples :)

[23:31] *** btyler left
[23:31] *** virtualsue left
[23:32] *** myfree joined
[23:32] *** hoverboard left
[23:32] *** johnmilton left
[23:34] *** BenGoldberg joined
[23:34] *** myfree left
[23:44] <lue> Is there any way I could do, say,  my &g := aClassWith.aMethod  ?

[23:45] <jnthn> aClassWith.^find_method('aMethod')

[23:45] *** dmol left
[23:47] *** eternaleye left
[23:47] <lue> I get "Not enough positional parameters passed; got 1 but expected 2" ; I have to pass something for 'self', don't I?

[23:47] <timotimo> always pass the instance to methods of HOW

[23:48] <jnthn> Not if you use .^

[23:48] <timotimo> oh, oops

[23:48] <timotimo> that's the shortcut, right.

[23:48] <jnthn> But maybe lue meant "when calling g later on..."

[23:48] <jnthn> In which case yes, you looked up a method so it needs an invocant.

[23:49] <jnthn> If you're doing this a lot, write a sub bind($obj, $meth) { -> |c { $obj."$meth"(|c) } }

[23:50] <timotimo> .o(is that efficient?)

[23:50] <lue> Hrm :/  All I want is to shorten  POD5::Grammar.parse in a test file

[23:50] <lue> I had it as $g.parse at one point, but that's still too much repetition :P

[23:50] <jnthn> sub p($txt) { POD5::Grammar.parse($txt) } 

[23:50] <jnthn> :)

[23:50] <lue> jnthn: $/ doesn't come out of the sub though

[23:51] <jnthn> Try $/ := CALLER::<$/>

[23:51] <lue> I was thinking I'd have to do something like that.

[23:52] *** supernovus joined
[23:59] <supernovus> Well, I'm out, just thought I'd mention, the tests for XML run in half the time on MoarVM versus Parrot (and approximately 5.5 times the time on JVM, ouch!)

