[00:00] <timotimo> not bad.

[00:00] <tadzik> and then people stared to exploit it :)

[00:00] <timotimo> i'm kinda glad the dotfiles in ~/ are getting somewhat more organized these days

[00:00] <timotimo> with .share and .config and such

[00:00] <tadzik> yeah

[00:00] <tadzik> useful if you actually use hidden files and dirs :)

[00:00] <timotimo> aye.

[00:01] <tadzik> also, I'm glad we still have dotfiles, and not everything is in gnome-registry-thingy

[00:01] <timotimo> yes.

[00:02] <tadzik> I don't even remeber its name, so hopefully it's dead :P

[00:02] <timotimo> gconf is dead

[00:02] <timotimo> dconf is "the new hotness"

[00:02] <tadzik> oh, gconf :)

[00:02] <tadzik> mumble grumblie

[00:02] <timotimo> i think dconf is in some way less sucky

[00:02] <timotimo> but i don't know much about it

[00:02] <tadzik> I'd rather see a nice API which does plaintext files mangling under the hood

[00:02] <tadzik> so if you need to access it from cat and grep, it still works

[00:03] <timotimo> aye.

[00:03] <timotimo> dconf is a simple key-based configuration system. Keys exist in an unstructured database (but it is intended that keys that logically belong together are grouped together).

[00:03] <timotimo> Change notification is supported. ← that's something that's not as trivial with text files

[00:04] <timotimo> Stacking of multiple configuration sources is supported. ← that's pretty cool actually

[00:04] <timotimo> and it's integrated with policykit

[00:13] <timotimo> i'm going to bed now. gnite #perl6!

[00:15] <colomon> o/

[00:20] *** cognominal__ left
[00:29] *** LootingLemur joined
[00:32] *** benabik joined
[00:41] *** rurban joined
[00:43] *** rom1504 left
[00:44] *** rom1504 joined
[00:51] <segomos> [A

[01:00] *** LootingLemur left
[01:05] *** Guest27230 left
[01:08] *** __thou left
[01:09] *** rurban left
[01:18] *** v joined
[01:21] *** v left
[01:26] *** dayangkun left
[01:39] *** dayangkun joined
[01:42] *** Guest27230 joined
[01:44] *** daniel-s_ joined
[01:48] *** Guest27230 left
[01:48] *** Guest27230 joined
[01:48] *** Guest27230 is now known as hoverboard

[01:57] *** bjz left
[01:58] *** bjz joined
[02:09] *** klapperl_ joined
[02:12] *** klapperl left
[02:15] <japhb__> .u block

[02:15] <yoleaux> U+0017 END OF TRANSMISSION BLOCK [Cc] (␗)

[02:15] <yoleaux> U+2417 SYMBOL FOR END OF TRANSMISSION BLOCK [So] (␗)

[02:15] <yoleaux> U+2580 UPPER HALF BLOCK [So] (▀)

[02:16] *** FROGGS left
[02:29] *** FROGGS joined
[02:33] *** hoverboard left
[02:42] <lue> r: say "a b c" ~~ /<.alpha> % \s/

[02:42] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unrecognized regex metacharacter % (must be quoted to match literally)␤at /tmp/tmpfile:1␤------> [32msay "a b c" ~~ /<.alpha> [33m⏏[31m% \s/[0m␤Unable to parse regex; cou…»

[02:42] <lue> isn't that supposed to work?

[02:42] <benabik> r: say "a b c" ~~ /<.alpha> *% \s/

[02:42] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«｢a b c｣␤␤»

[02:43] <benabik> % needs to be attached to a quantifier now, as I recall.

[02:43] *** kaare__ joined
[02:46] <lue> yeah, I realize now I don't want % anyway; I want to match a list of terms with some intervening separator, and /@b % \s/ won't quite DWIM :)

[02:50] * lue idly wonders if bare % (without repetition) could be spec'd to be used with interpolated arrays in the way he demonstrated...

[02:50] <benabik> It makes sense to me.

[02:51] <lue> It might mess with people who try to treat arrays as junctions there, but then again you need a quantifier for those cases already.

[02:52] *** __thou joined
[02:53] <lue> More interesting is how to make it work for someone who wants to interleave a non-@var list like that... might be /{<constant in-place list>} % ","/

[02:53] <lue> (similar to /thing ** {closure}/ methinks)

[03:35] *** grep0r left
[03:39] *** grep0r joined
[04:07] *** xenoterracide left
[04:15] *** __thou left
[04:28] *** hoverboard joined
[04:44] *** BenGoldberg left
[04:45] *** skids left
[04:47] *** bjz_ joined
[04:48] *** bjz left
[04:51] *** jnap left
[05:13] *** rurban joined
[05:22] *** jnap joined
[05:22] *** xenoterracide joined
[05:24] *** [Sno] left
[05:26] *** jnap left
[05:33] *** SamuraiJack joined
[05:41] *** telex left
[05:43] *** telex joined
[06:12] *** molaf joined
[06:21] *** xragnar left
[06:22] *** xragnar joined
[06:22] *** jnap joined
[06:27] *** jnap left
[06:32] *** vincent22 joined
[06:33] *** [Sno] joined
[06:37] *** rurban left
[06:40] <lue> r: class A { has $.z }; class B is A { has $.z }; say "alive‽"

[06:40] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«alive‽␤»

[06:40] <lue> I'll leave that for you all to ponder. ♘ #perl6 o/

[06:42] *** hoverboard left
[06:48] *** FROGGS left
[07:23] *** jnap joined
[07:27] <timotimo> r: class A { method foo() { say "ohai" } }; class B is A { method foo() { say "goodbye" } }; say "alive!"

[07:27] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«alive!␤»

[07:27] *** bjz_ left
[07:27] <timotimo> r: class A { has $!foo; }; class B is A { has $!foo; }; say "alive, as well"

[07:27] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«alive, as well␤»

[07:27] <timotimo> same thing as those two things

[07:27] *** jnap left
[07:28] <timotimo> private attributes are per-class, methods can be overridable. public attributes are a private attribute + an autogenerated method

[07:39] *** dalek left
[07:39] *** dalek joined
[07:39] *** ChanServ sets mode: +v dalek

[07:41] *** darutoko joined
[07:43] *** virtualsue joined
[07:51] <masak> morning, #perl6

[07:52] <moritz> \o masak, timotimo, *

[07:52] <timotimo> o/

[07:52] <timotimo> == SORRY == could not deduce sequence

[07:59] <masak> :)

[07:59] <moritz> == SORRY == did not use sequence operator

[08:01] <masak> == SORRY == using 'sorry' is starting to feel slightly passive-aggressive

[08:03] *** bjz joined
[08:03] <moritz> I'm == SORRY == about that :-)

[08:04] * moritz has spent way too much time playing http://gabrielecirulli.github.io/2048/

[08:05] *** bjz_ joined
[08:08] *** bjz left
[08:11] *** brrt joined
[08:12] *** zakharyas joined
[08:13] <timotimo> 3052 points <3

[08:13] *** FROGGS joined
[08:17] *** virtualsue left
[08:17] <moritz> my hiscore so far has been around 16k

[08:18] <moritz> and I had a 1024 and a 512 tile

[08:18] *** denis_boyun joined
[08:19] <moritz> but as I said, I spent way too much time on it :-)

[08:24] *** jnap joined
[08:25] *** jnap1 joined
[08:25] *** jnap left
[08:27] *** jnap joined
[08:27] *** jnap1 left
[08:27] <timotimo> only 2944 this time ... up to a 256 tile

[08:27] <timotimo> damn this is addicting

[08:29] <moritz> there's a trick

[08:29] <moritz> collect all the big numbers in the bottom row, for example

[08:29] <moritz> and never use the 'up' key

[08:31] *** jnap left
[08:32] <timotimo> mhm

[08:33] *** sqirrel joined
[08:34] *** pdcawley joined
[08:36] *** kaare__ left
[08:38] *** kaare_ joined
[08:40] <timotimo> with your hint i got to 3576

[08:42] <timotimo> bleh!

[08:42] <timotimo> just by going (up, left, down, right) xx * i got 3224 points

[08:43] <moritz> but is it web scale? :-)

[08:45] <timotimo> 3272 points this time

[08:45] <timotimo> it's quite discouraging if a very simple data-independent strategy gets so close to the score you get by trying to think it out ...

[08:46] *** kaare_ left
[08:47] *** vincent21 joined
[08:47] *** vincent21 left
[08:47] *** vincent21 joined
[08:47] <timotimo> okay, now that's just ridiculous

[08:47] *** kaare__ joined
[08:48] <timotimo> just going (down, left, down, right) xx * got me to 6392 just now

[08:48] <moritz> do you automate that? :-)

[08:49] <timotimo> no, if i automated it, i wouldn't have the opportunity for my brain to link me hitting the keys with the game merging tiles

[08:49] * moritz just got to 11k, with a 1024 tile

[08:51] <timotimo> okay so the only "danger" to the down, left, down, right strategy is when your whole thing gets stuck so you can't do any of these three actions

[08:51] <timotimo> then you have to go up and get a low-number tile in your bottom-most column

[08:51] <timotimo> row*

[08:51] <timotimo> after that, your bottom-most row gets stuck

[08:53] *** fhelmberger joined
[08:53] <moritz> there's a an alternative

[08:53] <timotimo> yeah, i just tried one

[08:53] <timotimo> i turned the "gravity" by 90 degrees

[08:53] <moritz> control the pushing down so that the bottom-most row doesn't get stuck

[08:53] <timotimo> hehe.

[08:54] *** kaare__ left
[08:54] *** kaare__ joined
[08:54] <moritz> that's the part that requires thinking/attention

[08:54] *** sqirrel left
[08:56] <timotimo> there's an alternative

[08:56] <timotimo> shut up with your thinking and let me watch colorful blocks with numbers merge! :D

[08:56] <timotimo> damnit

[08:56] <moritz> :-)

[08:56] *** brrt left
[08:57] *** brrt joined
[09:10] *** arnsholt left
[09:11] *** virtualsue joined
[09:12] *** arnsholt joined
[09:12] <arnsholt> I <3 SSDs

[09:15] <tadzik> oh yes. Let's never again use anything else :)

[09:15] <DrEeevil> I kinda dislike their binary nature

[09:15] <DrEeevil> either they work, or they are a brick ;)

[09:16] <DrEeevil> (and some SSDs are not worth the name ... 10 IO/s ?!?!)

[09:16] <tadzik> isn't that just like regular hard drives? :)

[09:16] <DrEeevil> nah, those start to have read errars and slov corrupxion

[09:16] <DrEeevil> then you at least have enough time to do something

[09:16] <tadzik> I guess you can disassemble the HDD and use the disks as those thingys-under-teacups

[09:17] <tadzik> well, I only once heard of a broken SSD, and that was Linus'

[09:17] <tadzik> and he has a *slight* tendency to exaggarrate...

[09:17] <tadzik> or however you write that

[09:18] <DrEeevil> I've had one die, and had it replaced with an "equivalent" device

[09:18] <DrEeevil> ... no, OCZ is not equivalent to anything else

[09:20] <FROGGS> tadzik: I have such a under-teacup thingy :o)

[09:20] <FROGGS> I guess that is mandatory when one is working in the IT department

[09:26] <timotimo> 16872 \o/

[09:27] <moritz> timotimo: that's quite good

[09:27] <timotimo> tadzik: "coasters"

[09:27] <timotimo> moritz: mostly luck :P

[09:27] <timotimo> i did get a 1024 tile :)

[09:28] *** jnap joined
[09:30] <timotimo> moritz: you have turned me into a push-down automaton

[09:32] *** jnap left
[09:37] <tadzik> ah, coasters

[09:44] *** SamuraiJack left
[09:46] *** salv0 left
[09:47] *** SamuraiJack joined
[09:51] *** rindolf joined
[09:53] *** SamuraiJack left
[09:55] *** SamuraiJack joined
[10:01] *** dakkar joined
[10:01] *** salv0 joined
[10:01] <arnsholt> timotimo: Hey, at least you can recognise center-embedding. Beats plain FSAs =)

[10:04] *** pecastro joined
[10:08] *** SamuraiJack left
[10:10] <timotimo> aye

[10:10] *** denis_boyun left
[10:14] *** aje_ left
[10:15] *** aje_ joined
[10:17] *** arnsholt left
[10:17] *** vincent22 left
[10:18] *** vincent22 joined
[10:21] *** kaleem joined
[10:22] *** pmurias joined
[10:24] *** vincent22 left
[10:26] *** vincent22 joined
[10:28] *** jnap joined
[10:32] *** jnap left
[10:33] *** SamuraiJack joined
[10:34] *** Mouq left
[10:57] *** xenoterracide left
[11:03] *** brrt left
[11:09] *** denis_boyun joined
[11:29] *** jnap joined
[11:34] *** jnap left
[11:37] *** skids joined
[11:42] <FROGGS> m: class Foo; say GLOBAL

[11:42] <camelia> rakudo-moar 1aeb7c: OUTPUT«(GLOBAL)␤»

[11:42] <FROGGS> m: class Foo; say $?PACKAGE

[11:42] <camelia> rakudo-moar 1aeb7c: OUTPUT«(Foo)␤»

[11:52] *** skids left
[12:02] *** SamuraiJack left
[12:07] <timotimo> r: class Foo; say GLOBAL::.keys

[12:07] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«Foo␤»

[12:09] *** SamuraiJack joined
[12:15] *** SamuraiJack left
[12:15] *** SamuraiJack joined
[12:21] *** benabik left
[12:22] *** virtualsue left
[12:25] <timotimo> moritz: a core insight to this seems to be that you always want to have as few different numbers on the board as possible, because every number that doesn't have any other numbers near it is going to be blocking your board for a long time to come.

[12:25] <timotimo> that's why it's pretty easy to button-mash your way to your first 256 or even 512

[12:25] <timotimo> but after that you have to work for more points

[12:30] *** jnap joined
[12:34] *** jnap left
[13:01] *** mavcunha joined
[13:07] *** brrt joined
[13:17] *** guru joined
[13:18] *** guru is now known as Guest42036

[13:24] *** skids joined
[13:24] *** Guest42036 is now known as ajr_

[13:31] *** jnap joined
[13:31] *** kbaker joined
[13:35] *** jnap left
[13:37] <moritz> timotimo: agreed

[13:37] <timotimo> i'm getting somewhat far with the strategy "always seek to merge twos"

[13:38] <timotimo> but that seems a bit short-sighted.

[13:45] <masak> timotimo: try "always seek to (greedily) merge the highest pair possible" ?

[13:45] <brrt> you have no other strategy than greedy do you? :-)

[13:46] <brrt> its not like you can backtrack

[13:46] <timotimo> well, you have to be on-line, but you can try to be competitive against the most malevolent placer of new 2s and 4s

[13:46] <[Coke]> is this the web game that is like the ios game threes?

[13:47] * brrt is also curious how the author claims 2048 is the highest obtainable value

[13:47] <brrt> its not obvious to me why that should be

[13:48] <timotimo> well, if you go to 4096, you'll be spending a *lot* of time :)

[13:48] <timotimo> but feel free to write an exhaustive search in perl6 :)

[13:49] <brrt> hmmm

[13:49] <timotimo> (it will also be spending a *lot* of time, except the jvm's jit may very well kick into full gear there)

[13:49] <timotimo> gotta run now.

[13:49] <brrt> i'm not sure you can exhaustively search in all cases

[13:49] <brrt> because some moves decrease the number of cells on the board

[13:49] <brrt> and you only finish once all cells are filled/

[13:49] <brrt> ?

[13:55] *** dayangkun_ joined
[13:57] *** dayangkun left
[14:02] *** rindolf left
[14:06] *** jnap joined
[14:06] *** Sqirrel joined
[14:08] *** benabik joined
[14:08] *** btyler joined
[14:13] *** bluescreen10 joined
[14:19] <masak> brrt: indeed, I'm not convinced the game cannot be sustained infinitely.

[14:19] <masak> the random component essentially makes it a two-player game.

[14:20] <moritz> it cannot

[14:20] <Timbus_> it would run out of space..

[14:20] <masak> oh, if it cannot, then it should be eminently simulatable.

[14:20] <moritz> you can't turn a 2 into a 2^18 with only 16 spaces

[14:20] <masak> hm, right.

[14:20] <moritz> that's also why it gets more difficult with time

[14:20] <masak> so you *must* run out of space at some point.

[14:21] <Timbus_> imagine if, it wasnt a grid, but just a line of squares. and the 2 always spawned on the left, and you shifted it right

[14:21] <moritz> the more high numbers you have, the less free space you have to navigate

[14:21] <Timbus_> that simplifies the problem easily

[14:22] *** __thou joined
[14:25] <masak> ah, it's one of those "the moves fold into the board (and make it more messy)" kind of problems.

[14:29] <moritz> small numbers enter the board, large numbers are created by merging. The challenge is just to create the larger numbers in the correct place, adjacent to other numbers in the same order of magnitude

[14:29] <moritz> fragmentation kills

[14:30] *** brrt left
[14:34] *** brrt joined
[14:34] <brrt> hmmm

[14:35] <brrt> i see

[14:44] *** telex left
[14:46] *** treehug88 joined
[14:46] *** telex joined
[15:02] *** treehug88 left
[15:03] *** treehug88 joined
[15:07] <masak> http://spryfox.com/our-games/tripletown/ is like that too -- fragmentation kills.

[15:08] <masak> Go/圍棋 (allegedly) is like that too.

[15:09] *** logie joined
[15:16] *** rurban joined
[15:16] *** ajr_ left
[15:17] *** guru joined
[15:19] *** rindolf joined
[15:25] *** bluescreen100 joined
[15:27] *** rurban left
[15:29] *** kaleem left
[15:29] *** bluescreen10 left
[15:30] *** i0825993 joined
[15:31] *** i0825993 left
[15:32] <dalek> nqp/r2-lex-to-local: fb4ffa9 | (Elizabeth Mattijsen)++ | src/ (4 files):

[15:32] <dalek> nqp/r2-lex-to-local: Change .ast to .made where it seemed appropriate

[15:32] <dalek> nqp/r2-lex-to-local: review: https://github.com/perl6/nqp/commit/fb4ffa9492

[15:32] <dalek> nqp/r2-lex-to-local: 15869c8 | (Elizabeth Mattijsen)++ | src/ (12 files):

[15:32] <dalek> nqp/r2-lex-to-local: "past" is now a thing of the ast

[15:32] *** dalek left
[15:33] *** dalek joined
[15:33] *** ChanServ sets mode: +v dalek

[15:34] <timotimo> oh? why did these commits get reported again?

[15:35] *** vincent21 left
[15:36] <jnthn> Can happen if you merge a brunch

[15:36] <jnthn> uh

[15:36] <jnthn> a branch

[15:37] <jnthn> .oO( bit late to be pondering brunch... )

[15:37] <timotimo> :)

[15:37] <timotimo> that reminds me that i'm kinda hungry

[15:38] <jnthn> Time for lunner :P

[15:41] <colomon> time to stir-fry!

[15:41] <colomon> just realized I have no green onions.  time to cry.

[15:42] <benabik> Generally I cry when I have onions.

[15:42] <benabik> I guess I cry when I have no pre-cut onions.

[15:44] <colomon> benabik: I got my preliminary lists of players for Ambercon a couple of days ago…  :)

[15:45] <benabik> colomon: ooooh

[15:48] <colomon> benabik: if those games don't go well, I have no one to blame but myself.

[15:48] <colomon> (ie good players)

[15:49] <timotimo> it occurs to me

[15:49] <timotimo> managing the fragmentation of square numbers by tidying up pairs of them

[15:49] <timotimo> seems like a stereotypically german thing to enjoy

[15:49] <colomon> benabik: one new thing -- this year I'm involved in as many Lords of Gossamer and Shadow games as Amber games. (three of each)

[15:50] <benabik> colomon: Lords of Gossamer?  (I assume shadow just means outside the court.)

[15:51] <colomon> benabik: http://www.ritepublishing.com/dicelessroleplaying.html (It's Amber DRPG system skinned onto a new multiverse.)

[15:51] <jercos> jnthn: bit late perhaps, that's why it'd be a merged brunch ;)

[15:51] <jercos> merged with dinner?

[15:53] <benabik> colomon: Oh hey hey.  Hadn't seen THAT before.

[16:04] *** slavik left
[16:05] *** slavik joined
[16:06] *** vincent22 left
[16:13] <pmichaud> good morning, #perl6

[16:16] *** vincent__ joined
[16:17] <[Coke]> pmichaud: o/

[16:19] <timotimo> greetings pmichaud :)

[16:21] <dalek> rakudo-star-daily: 38b274f | coke++ | log/ (5 files):

[16:21] <dalek> rakudo-star-daily: today (automated commit)

[16:21] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/38b274f700

[16:22] *** fhelmberger left
[16:22] *** FROGGS left
[16:25] *** denis_boyun left
[16:26] *** SamuraiJack left
[16:28] *** [Sno] left
[16:29] *** rurban joined
[16:31] <timotimo> another idea

[16:31] <timotimo> you have a 4x4 grid

[16:31] <timotimo> you can place a 2 or a 4 in any free space

[16:31] <timotimo> then you must shift all tiles to one of four directions as if gravity affected them

[16:32] <timotimo> tiles that rest upon each other during such a phase that have the same number merge into 2 x the number

[16:32] <timotimo> in how few turns can you fill up the whole board?

[16:35] *** brrt left
[16:35] *** zakharyas left
[16:43] <TimToady> m: my @array = <a b c>; say "a,b,c" ~~ /<{@array.shift}> +% ','/

[16:43] <camelia> rakudo-moar 1aeb7c: OUTPUT«｢a,b,c｣␤␤»

[16:43] <TimToady> what's the big deal?

[16:44] *** hoverboard joined
[16:44] <TimToady> lue: ^^

[16:44] *** molaf_ joined
[16:45] <TimToady> it won't backtrack, mind you

[16:45] <TimToady> being destructive like that

[16:46] <TimToady> one would have to arrange to return the correct @array[$i] to make it re-usable

[16:46] <TimToady> or arrange to copy the array at the re-entrance

[16:47] <TimToady> more realistically, you'd pull an iterator out and use that destructively

[16:47] *** molaf left
[16:48] *** kurahaupo joined
[16:48] *** isBEKaml joined
[16:48] <TimToady> perhaps one could arrange this as an <each(@array)> subrule

[16:49] <TimToady> assuming one could get it to clone at the appropriate scope

[16:50] <TimToady> however, the lack of demand for this up till now indicates that a solution like / :my @tmp = @array; <{@tmp.shift}> +% ',' / might be quite sufficient

[16:51] <TimToady> that would at least be re-entrant, if not backtrackable

[16:51] <benabik> Attempting to backtrack through code just makes the entire rule fail, yes?

[16:51] <TimToady> no

[16:52] <TimToady> it just ignores it

[16:52] <TimToady> it assumes you write your code idempotently such that it doesn't matter

[16:53] <benabik> Hm.  Would have to be very careful how you use destructive iteration then, or you could end up skipping elements.

[16:53] *** hoverboard left
[16:54] <TimToady> yes, though generally you'd re-enter something like this from the top when you need to

[16:54] <TimToady> if the + here backtracked it would not recalculate the LHS, it would just throw away one of the results

[16:54] <TimToady> or generate the next one, in the case of +?

[16:55] *** rurban left
[16:55] <TimToady> greedy backtracking generates all the possible Cursors first; it doesn't have to regen any Cursors from the left

[16:55] <TimToady> (unless the backtracking is violent enough to cause re-entry, but then your :my recopies the array)

[16:56] <TimToady> so I don't think we need a new feature here

[16:56] <TimToady> much to the surprise of those who think Perl 6 includes every feature anyone can ever think of :)

[16:56] <benabik> Sensible.

[16:57] * TimToady could certainly be wrong at this stage of the morning, or of life

[16:57] <benabik> Failure is always an option.

[16:57] *** stevan_ left
[16:57] <TimToady> in which case I will attempt to backtrack non-destructively :)

[17:04] *** arnsholt joined
[17:04] <arnsholt> o

[17:04] <arnsholt> /

[17:04] <arnsholt> Delayed wave ^_^

[17:04] <isBEKaml> arnsholt: you got your arm detached? 

[17:05] <isBEKaml> arnsholt: that's what happens when you go through a time warp. splicing. :-)

[17:05] *** guru left
[17:06] *** kaleem joined
[17:06] <isBEKaml> \           o

[17:07] *** rurban joined
[17:08] <benabik> "My arm's come off.  How am I going to operate my digital watch now?"

[17:11] *** rurban left
[17:14] <isBEKaml> "Bluddy hell - I'll just carry this arm around!"

[17:17] * timotimo is remimnded of that one Space Janitors episode

[17:19] *** isBEKaml left
[17:26] *** rurban joined
[17:26] *** Celelibi left
[17:27] *** hoverboard joined
[17:28] *** Celelibi joined
[17:28] *** rurban1 joined
[17:30] * [Coke] 

[17:30] *** rurban left
[17:30] * timotimo 

[17:34] *** treehug88 left
[17:35] *** kaleem left
[17:36] *** stevan_ joined
[17:36] *** stevan_ left
[17:37] *** stevan_ joined
[17:40] *** pdcawley left
[17:41] *** pdcawley joined
[17:41] *** raiph joined
[17:42] *** guru joined
[17:43] *** pmurias left
[17:44] *** guru is now known as ajr_

[17:45] *** grondilu joined
[17:45] <raiph> m: print ^Inf # for Ulti

[17:45] <camelia> rakudo-moar 1aeb7c: OUTPUT«(timeout)0123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118…»

[17:47] *** pecastro left
[17:47] *** denis_boyun joined
[17:48] *** dakkar left
[17:49] *** [Sno] joined
[17:49] *** rurban1 left
[17:49] *** FROGGS joined
[17:59] *** fridim__ joined
[18:00] *** kurahaupo left
[18:13] *** dwarring joined
[18:19] *** fhelmberger joined
[18:27] <raiph> .tell Ulti warn ^Inf # I love the idea of elegant golf with P6. For example, refusing to omit spaces when it would work but be ugly.

[18:27] <yoleaux> raiph: I'll pass your message to Ulti.

[18:31] *** fhelmberger left
[18:32] *** bjz_ left
[18:33] *** fhelmberger joined
[18:36] <TimToady> one should do token golf, not keystroke golf

[18:36] <TimToady> 'course then you have to figure out how to count tokens

[18:37] <TimToady> :16<cafebeef> is one token, probably , but how many is :16($string) ?

[18:37] <TimToady> and is foo() fewer tokens than foo.() ?

[18:38] *** fhelmberger left
[18:38] *** hoverboard left
[18:39] <TimToady> one could do keystrokes without counting whitespace, I suppose

[18:39] <TimToady> whitspace would correspond to a "free drop" in golf :)

[18:40] <TimToady> when your ball token is too close to the grandstands token

[18:41] <TimToady> or maybe it's more like lift-clean-and-place rules :)

[18:42] <TimToady> would be a nice cultural hack to start the Clean Golf meme

[18:42] <TimToady> ignore whitespace, allow Unicode chars as single strokes

[18:43] <timotimo> m)

[18:44] *** hoverboard joined
[18:46] *** sorear left
[18:46] *** kaare__ is now known as kaare_

[18:47] *** rurban joined
[18:49] *** sorear joined
[18:52] *** rurban left
[19:04] *** darutoko left
[19:16] *** salenteva joined
[19:16] *** SHODAN left
[19:16] *** SHODAN joined
[19:20] * jnthn back

[19:21] * masak stomach

[19:24] *** salenteva left
[19:27] * segomos chest

[19:27] <moritz> timotimo: http://ov3y.github.io/2048-AI/

[19:28] *** pecastro joined
[19:28] <moritz> ... but it doesn't win here

[19:30] *** mesoamerica joined
[19:32] *** Util joined
[19:32] *** mp__ joined
[19:39] *** xenoterracide joined
[19:39] <segomos> moritz: thanks for ruining my work day

[19:40] <moritz> segomos: you're welcome

[19:42] *** skids left
[19:42] *** mesoamerica left
[19:45] *** skids joined
[19:47] *** vincent__ left
[19:48] *** vincent22 joined
[19:48] *** rurban joined
[19:53] *** rurban left
[19:58] <FROGGS> score 4948 for the first run... is that good?

[19:59] <FROGGS> but I won't play it a second time, that is very addicting

[19:59] <jnthn> .oO( And all Perl 6 development ground to a halt as a result of a game... :) )

[19:59] *** stevan_ left
[19:59] <FROGGS> hehe, yeah

[20:00] * FROGGS .oO( only parrot will survive )

[20:02] *** stevan_ joined
[20:03] *** treehug88 joined
[20:03] <FROGGS> std: my %foo; %foo<bar> => "baz"

[20:03] <camelia> std 09dda5b: OUTPUT«ok 00:01 125m␤»

[20:04] <FROGGS> p6: my %foo; %foo<bar> => "baz"

[20:04] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c, niecza v24-109-g48a8de3: ( no output )

[20:04] <FROGGS> that took my a while to spot it... in my code should have been an assignment instead...

[20:04] <FROGGS> shouldn't that warn?

[20:05] <lue> p6: my %foo; %foo<bar> => "baz"; say %foo;

[20:05] <camelia> niecza v24-109-g48a8de3: OUTPUT«{}␤»

[20:05] <camelia> ..rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«().hash␤»

[20:06] <vendethiel> ().hash ? really ? :D

[20:06] <lue> FROGGS: I feel the same way about   class A { has $.x }; class B is A { has $.x }    :)

[20:06] <vendethiel> .oO(is {} too mainstream or something ?)

[20:06] * vendethiel .oO( is {} too mainstream or something ? )

[20:06] <lue> vendethiel: TIMTOWTDI

[20:07] <FROGGS> lue: what do you want it to do?

[20:07] <vendethiel> lue: oh yeah, that's for sure, but I don't see why .perl doesn't return {}

[20:07] <lue> FROGGS: I'd like it to at least warn me that I've redeclared a variable like that, it caused a subtle and annoying bug yesterday :/

[20:08] <masak> vendethiel: it used to, but it got changed for some reason I don't remember, or may never have known.

[20:08] <vendethiel> masak: oke!

[20:08] <TimToady> p6: my %foo; %foo<bar> => "baz"; say $%foo;

[20:08] <lue> vendethiel: because ().hash is just as valid, and also it probably avoids confusion with code-block-based {} :)

[20:08] <camelia> niecza v24-109-g48a8de3: OUTPUT«{}␤»

[20:08] <camelia> ..rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«().hash␤»

[20:08] <vendethiel> FROGGS: should void statements produce a warning ?

[20:08] <masak> vendethiel: same thing with arrays.

[20:08] <jnthn> FROGGS: I've a sinking feeling that should warn... :)

[20:08] <TimToady> p6: my %foo; %foo<bar> => "baz"; say %foo.item;

[20:08] <vendethiel> masak: that's true

[20:08] <camelia> niecza v24-109-g48a8de3: OUTPUT«{}␤»

[20:08] <camelia> ..rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«().hash␤»

[20:08] <masak> r: say [].perl

[20:08] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«[]␤»

[20:09] <masak> hm.

[20:09] <TimToady> r: say {}.perl

[20:09] <FROGGS> vendethiel: yes, things that clearly do not make sense should warn or fail

[20:09] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«{}␤»

[20:09] <lue> I personally think => there should work just like =

[20:09] <masak> r: say [1, 2, 3].perl

[20:09] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«[1, 2, 3]␤»

[20:09] <TimToady> p6: my %foo; %foo<bar> => "baz"; say %foo.item.perl;

[20:09] <vendethiel> lue: well, then you can't create a hash with a key based on a value from another hash ?

[20:09] <masak> I distinctly remember getting Array.new(...) sometimes.

[20:09] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c, niecza v24-109-g48a8de3: OUTPUT«{}␤»

[20:09] <TimToady> yes, depends on whether it's itemized

[20:09] <vendethiel> masak: oh, even I remember it and I've been here for like a month :p

[20:10] <TimToady> p6: my %foo; %foo<bar> => "baz"; say $%foo.perl;

[20:10] <FROGGS> lue: btw, I'm not even sure there is a redecl in your example

[20:10] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c, niecza v24-109-g48a8de3: OUTPUT«{}␤»

[20:10] <FROGGS> yeah

[20:10] <lue> vendethiel:  %a{%b<5>} => 1;   :)

[20:11] <masak> r: say { 4 => [] }.perl

[20:11] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«{"4" => []}␤»

[20:11] <masak> hrm.

[20:11] <vendethiel> r: my %foo = 'a' => 1; my %bar = %foo<a> => 2; say %bar.perl;

[20:11] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«("1" => 2).hash␤»

[20:11] <vendethiel> lue: ^

[20:12] <vendethiel> That's what I meant

[20:12] <lue> FROGGS: yeah, I realize it's not quite so simple, but I left it behind while creating a new base class, and the different methods in the new base class and the derived class affect different $!x's

[20:12] <lue> vendethiel: ah, I see what you mean.

[20:12] <FROGGS> lue: yes, that is what I expect it should do :o)

[20:12] <TimToady> r: say (1 => 2).perl

[20:12] <vendethiel> lue: that might be a corner-case though :)

[20:12] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«1 => 2␤»

[20:12] <lue> FROGGS: not so much fun when you don't realize you forgot to delete a 'has' line :)

[20:13] <FROGGS> lue: sure

[20:13] <FROGGS> lue: but that is something that might or might not be intentional... a compiler can not always decide there

[20:13] <lue> I just think it'd be nice if P6 went "hey, just so you know, you declared another $!x in this derived class. Things might not work fine"

[20:13] <lue> "Potential difficulties" I think it's called :)

[20:13] <jnthn> lue: The point is that it *will* work fine.

[20:14] <FROGGS> I don't like warning for potentionally ok things

[20:14] <jnthn> lue: They are different attributes.

[20:14] <TimToady> Potential difficulties: Failed to read your mind...

[20:14] <lue> FROGGS: aren't all Potential Difficulties "potentially ok things" though?

[20:14] <jnthn> It's important that it's that way. You should be able to subclass without having to care about what's in the parent class.

[20:14] <FROGGS> lue: don't thinks so

[20:14] <FROGGS> think*

[20:14] *** rindolf left
[20:15] <jnthn> That's one of the ways Perl 6 gets inheritance righter than the likes of Java and C#, which make it easy to flaunt things in the base class through using protected...

[20:15] <FROGGS> m: my $a; my $a # this is clearly not ok

[20:15] <camelia> rakudo-moar 1aeb7c: OUTPUT«Potential difficulties:␤    Redeclaration of symbol $a␤    at /tmp/2vCz8FTAwe:1␤    ------> [32mmy $a; my $a # this is clearly not ok[33m⏏[31m<EOL>[0m␤»

[20:15] <TimToady> the only one people carp about frequently is declared but not used

[20:16] <jnthn> declared but not used is annoying by default.

[20:16] <TimToady> FROGGS: actually that one is officially ok

[20:16] <lue> jnhtn: yeah, I'm just annoyed that Perl 6 let me get away with something that in my case broke things :) [a method in Base modifies its $!x, and then Derived.x doesn't return what I changed; that's what my issue was]

[20:16] <TimToady> std: my $a; my $a

[20:16] <camelia> std 09dda5b: OUTPUT«Potential difficulties:␤  Useless redeclaration of variable $a (see line 1) at /tmp/JbstzFzwGb line 1:␤------> [32mmy $a; my $a[33m⏏[31m<EOL>[0m␤ok 00:01 122m␤»

[20:16] <FROGGS> TimToady: for the parser yes, but there is no situation where you would need to do that and really mean it

[20:16] <TimToady> note it's a *useless* redeclaration in sTD

[20:17] <lue> m: my $a; my $a; say "alive!"

[20:17] <camelia> rakudo-moar 1aeb7c: OUTPUT«Potential difficulties:␤    Redeclaration of symbol $a␤    at /tmp/FSxYsJ3cAG:1␤    ------> [32mmy $a; my $a[33m⏏[31m; say "alive!"[0m␤alive!␤»

[20:17] <TimToady> well, you can leave the foo off of $foo when you declare it, too, so why all the carpage about declared but not used?

[20:18] <FROGGS> m: my $a = 42; my $a; say $a

[20:18] <camelia> rakudo-moar 1aeb7c: OUTPUT«Potential difficulties:␤    Redeclaration of symbol $a␤    at /tmp/JDFTmpE8jO:1␤    ------> [32mmy $a = 42; my $a[33m⏏[31m; say $a[0m␤42␤»

[20:18] <FROGGS> lue: see this one, do you expect that to happen?

[20:18] <lue> FROGGS: since the second one is a *useless* redeclaration, yes :)

[20:18] <lue> [rakudo should be clearer on that point...]

[20:18] <FROGGS> lue: yes

[20:19] <jnthn> TimToady: 'cus a normal way of working is to stub stuff with names, and then go write tests, and come back and fill in the stubbed stuff.

[20:19] <TimToady> well, it's helping you find what you missed then :P

[20:19] <jnthn> TimToady: And even if I ain't doing the tests phase in there, I still tend to do a lot of sketching that way. :)

[20:19] <jnthn> And the warnings at that point are clutter. I agree they can be desirable at a certain stage.

[20:20] <TimToady> trouble is, there's no mechanism to get people to turn those warnings on when they need 'em

[20:21] <TimToady> so you get the 'use strict' problem all over again

[20:21] <TimToady> maybe we need an 'anon' twigil :)

[20:21] <FROGGS> oh oh oh, can we have a -Wall cmd line argument this time?

[20:22] <lue> maybe a "is really" trait to turn off warnings?  my $a; my $a is really;

[20:22] <FROGGS> m: my $a; my $a; #OK

[20:22] <camelia> rakudo-moar 1aeb7c: OUTPUT«Potential difficulties:␤    Redeclaration of symbol $a␤    at /tmp/xS3TwSpnnf:1␤    ------> [32mmy $a; my $a[33m⏏[31m; #OK[0m␤»

[20:22] <FROGGS> m: my $a; my $a; # OK

[20:22] <camelia> rakudo-moar 1aeb7c: OUTPUT«Potential difficulties:␤    Redeclaration of symbol $a␤    at /tmp/uzrKism0Zh:1␤    ------> [32mmy $a; my $a[33m⏏[31m; # OK[0m␤»

[20:22] <TimToady> r: multi my $a; multi my $a;

[20:22] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Missing block␤at /tmp/tmpfile:1␤------> [32mmulti my [33m⏏[31m$a; multi my $a;[0m␤    expecting any of:␤        statement list␤    …»

[20:22] <FROGGS>  /o\

[20:23] <vendethiel> what's a multi my ?

[20:23] <lue> FROGGS: actually, I think I might like -Wall etc. better. That way I can do -Wderived-redecl-attr or however it'd be spelled  :)

[20:23] <FROGGS> ohh noes, he asked

[20:23] * jnthn tries not to comment on the appropriateness of Perl 6 having a -Wall flag that tells you stuff TimToady++ thinks you need to know :D

[20:23] <TimToady> r: my proto $a; my $a; my $a

[20:23] <camelia> rakudo-parrot 1aeb7c, rakudo-jvm 1aeb7c, rakudo-moar 1aeb7c: OUTPUT«Potential difficulties:␤    Redeclaration of symbol $a␤    at /tmp/tmpfile:1␤    ------> [32mmy proto $a; my $a[33m⏏[31m; my $a[0m␤    Redeclaration of symbol $a␤    at /tmp/tmpfile:1␤    ------> …»

[20:23] <FROGGS> vendethiel: I hope is not going to be anything :o)

[20:23] <TimToady> std: my proto $a; my $a; my $a

[20:23] <camelia> std 09dda5b: OUTPUT«ok 00:01 122m␤»

[20:23] <TimToady> there's already a defined mechanism for this

[20:23] <vendethiel> wut

[20:24] <TimToady> it's really in there for macros, not for programmers

[20:24] <FROGGS> jnthn: it could even add an "except when it's not" to some error messages :o)

[20:24] <TimToady> since macros often want to ensure that something is declared

[20:27] *** mp__ left
[20:29] <FROGGS> yays! the provides section in the META.info is now generated as well in `panda-m bundle`

[20:30] *** kliavlin joined
[20:30] *** stevan_ left
[20:34] <dalek> perl6-roast-data: ae21865 | coke++ | perl6_pass_rates.csv:

[20:34] <dalek> perl6-roast-data: today (automated commit)

[20:34] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/ae21865431

[20:34] *** Vlavv left
[20:35] *** kaare_ left
[20:35] <FROGGS> next step: zip it for upload to pause

[20:38] <lue> FROGGS: can I pick the archive type thru this method, by chance? I prefer .tar.bz2 and .tar.xz myself :)

[20:39] <FROGGS> lue: dunno, if pause will only accept .tar.gz, then we have no chance to choose :o)

[20:39] <lue> really? that's a shame; tar.gz is the worst of all the .tar.* compression methods :)

[20:40] *** molaf_ left
[20:42] *** kliavlin left
[20:42] <FROGGS> lue: I will tell you in a few days :o)

[20:43] *** mazanka joined
[20:44] <lue> (not that tar.gz is bad, just happens to be the least space-efficient out of {gz,bz2,xz} ☺)

[20:46] <arnsholt> It's the most portable one, though

[20:46] <benabik> And hits a much better efficiency vs portability point than just .Z

[20:46] *** Vlavv joined
[20:47] *** mazanka left
[20:49] <lue> Not an excuse to limit your selection of tar compressions though. (At the very least, don't allow .rar ☺)

[20:49] *** rurban joined
[20:53] *** rurban left
[21:03] *** skids left
[21:08] *** bluescreen100 left
[21:11] *** rom1504_ joined
[21:11] *** aje__ joined
[21:11] *** Util_ joined
[21:13] <[Coke]> http://www.bbc.com/news/technology-26528516

[21:13] <[Coke]> "Nasa seeks coders to hunt asteroids"

[21:15] <dalek> panda/depends: 1433262 | (Tobias Leich)++ | lib/Panda/ (2 files):

[21:15] <dalek> panda/depends: autogenerate "provides" setion on META.info

[21:15] <dalek> panda/depends: review: https://github.com/tadzik/panda/commit/1433262c5e

[21:15] <lue> [Coke]: I like how they never spelled it NASA :)

[21:16] <tadzik> oh, good stuff :)

[21:16] <tadzik> FROGGS++

[21:18] *** arnsholt_ joined
[21:22] *** stevan_ joined
[21:24] *** ponbiki_ joined
[21:24] *** obra_ joined
[21:25] *** brother| joined
[21:26] *** benabik left
[21:26] *** pecastro_ joined
[21:27] *** grandm joined
[21:27] *** jlaire_ joined
[21:27] *** hoelzro_ joined
[21:27] *** Juerd_ joined
[21:27] *** woolfy1 left
[21:27] *** timotimo left
[21:28] *** Celelibi left
[21:28] *** PZt left
[21:28] *** hoelzro left
[21:28] *** Grimnir_ joined
[21:28] *** virtualsue joined
[21:29] *** prammer joined
[21:30] *** woolfy joined
[21:30] *** grandm left
[21:30] *** bjz joined
[21:32] *** virtualsue left
[21:33] *** FROGGS left
[21:33] *** pdcawley left
[21:33] *** jnap left
[21:33] *** Psyche^_ left
[21:33] *** lizmat left
[21:33] *** ggoebel left
[21:33] *** Khisanth left
[21:33] *** DrEeevil left
[21:33] *** xfix left
[21:33] *** pnu left
[21:33] *** JimmyZ left
[21:33] *** bowtie left
[21:33] *** aindilis left
[21:33] *** xragnar left
[21:35] * dwarring checking test roast test coverage of 2013 advent calender

[21:38] *** JimmyZ joined
[21:38] *** jnap joined
[21:38] *** Khisanth joined
[21:38] *** aindilis joined
[21:38] *** FROGGS joined
[21:38] *** lizmat joined
[21:38] *** virtualsue joined
[21:38] *** pnu joined
[21:38] *** bowtie joined
[21:38] *** Celelibi joined
[21:39] *** Vlavv left
[21:39] *** Util left
[21:39] *** pecastro left
[21:39] *** denis_boyun left
[21:39] *** arnsholt left
[21:39] *** slavik left
[21:39] *** __thou left
[21:39] *** aje_ left
[21:39] *** rom1504 left
[21:39] *** ggoebel11111 left
[21:39] *** [particle] left
[21:39] *** Juerd_ left
[21:39] *** hoelzro_ left
[21:39] *** pecastro_ left
[21:39] *** xenoterracide left
[21:39] *** SHODAN left
[21:39] *** [Sno] left
[21:39] *** logie left
[21:39] *** telex left
[21:39] *** kbaker left
[21:39] *** klapperl_ left
[21:39] *** ribasushi left
[21:39] *** flussence left
[21:39] *** felher left
[21:39] *** wooden left
[21:39] *** yogan left
[21:39] *** geekosaur left
[21:39] *** exodist_ left
[21:39] *** awwaiid_ left
[21:39] *** sbauer left
[21:39] *** go|dfish left
[21:39] *** labster left
[21:39] *** cxreg left
[21:39] *** siruf left
[21:39] *** rurban__ left
[21:39] *** sunnavy_ left
[21:39] *** ggherdov_ left
[21:39] *** itz__ left
[21:39] *** Pleiades` left
[21:39] *** japhb left
[21:39] *** zamolxes left
[21:39] *** isacloud left
[21:39] *** gfldex left
[21:41] *** bonsaikitten joined
[21:41] *** pdcawley joined
[21:41] *** Psyche^ joined
[21:41] *** timotimo joined
[21:41] *** Juerd joined
[21:41] *** hoelzro_ joined
[21:41] *** pecastro_ joined
[21:41] *** xenoterracide joined
[21:41] *** SHODAN joined
[21:41] *** [Sno] joined
[21:41] *** logie joined
[21:41] *** telex joined
[21:41] *** kbaker joined
[21:41] *** klapperl_ joined
[21:41] *** ribasushi joined
[21:41] *** flussence joined
[21:41] *** felher joined
[21:41] *** wooden joined
[21:41] *** yogan joined
[21:41] *** geekosaur joined
[21:41] *** exodist_ joined
[21:41] *** awwaiid_ joined
[21:41] *** labster joined
[21:41] *** sbauer joined
[21:41] *** go|dfish joined
[21:41] *** cxreg joined
[21:41] *** siruf joined
[21:41] *** rurban__ joined
[21:41] *** sunnavy_ joined
[21:41] *** ggherdov_ joined
[21:41] *** itz__ joined
[21:41] *** Pleiades` joined
[21:41] *** japhb joined
[21:41] *** zamolxes joined
[21:41] *** isacloud joined
[21:41] *** gfldex joined
[21:41] *** kbaker left
[21:41] *** jnap1 joined
[21:41] *** telex left
[21:42] *** bonsaikitten is now known as Guest82048

[21:42] *** telex joined
[21:42] *** jnap left
[21:43] *** xfix joined
[21:47] *** siruf left
[21:47] *** slavik joined
[21:48] *** [particle] joined
[21:49] *** PZt joined
[21:49] *** btyler left
[21:50] *** rurban joined
[21:50] *** vincent22 left
[21:52] *** siruf joined
[21:55] *** virtualsue left
[21:55] *** rurban left
[21:58] * dwarring hmmm github connectivity problems - https://status.github.com/

[21:58] *** hoverboard is now known as coolstorybro

[21:58] *** siruf left
[21:58] *** coolstorybro is now known as hoverboard

[22:00] *** siruf joined
[22:01] *** cognominal joined
[22:02] *** eternaleye left
[22:05] <jnthn> aww

[22:07] *** jnap1 left
[22:08] *** siruf left
[22:09] *** eternaleye joined
[22:10] *** siruf joined
[22:11] *** btyler joined
[22:17] *** dmol left
[22:19] *** siruf left
[22:19] *** siruf joined
[22:20] *** cognominal left
[22:20] *** cognominal joined
[22:22] *** mavcunha left
[22:23] <dalek> roast: fb58cb3 | (David Warring [email@hidden.address] | integration/advent2013-day07.t:

[22:23] <dalek> roast: code snippets from advent 2013 day 07 - set specification

[22:23] <dalek> roast: review: https://github.com/perl6/roast/commit/fb58cb311b

[22:23] <dalek> roast: 1312678 | (David Warring [email@hidden.address] | integration/advent2013-day18.t:

[22:23] <dalek> roast: starting on advent 2013 day 18 - grammar with duplicate checking

[22:23] <dalek> roast: review: https://github.com/perl6/roast/commit/1312678d66

[22:23] <dalek> roast: c69b51d | (David Warring [email@hidden.address] | .gitignore:

[22:23] <dalek> roast: ignore *~ (emacs backups)

[22:23] <dalek> roast: review: https://github.com/perl6/roast/commit/c69b51d8c2

[22:25] <dwarring> that's a couple of advent days covered

[22:25] *** siruf left
[22:25] * dwarring more to do on day 18

[22:26] *** siruf joined
[22:28] *** xragnar joined
[22:29] <TimToady> we don't say RADAR or LASER anymore either

[22:31] <TimToady> .oO(I know, we'll just use a little nasa on that problem.)

[22:31] <huf> you still say API though... that bothers me the most for some reason :)

[22:32] <TimToady> that's cuz I still spell it out when I pronounce it

[22:32] *** siruf left
[22:33] <huf> yes, that's what i mean. why? it's 2/3 vowels!

[22:33] *** siruf joined
[22:34] <TimToady> you make it sound rational :)

[22:35] <huf> it's one of those that surprised me when i heard it from a native. it shouldnt have, but by then my own pronunciation had been burned into my brain

[22:37] *** jnap joined
[22:38] *** siruf left
[22:39] *** siruf joined
[22:41] *** treehug88 left
[22:42] *** jnap left
[22:45] *** siruf left
[22:46] *** siruf joined
[22:47] <lizmat> lue, FROGGS: you can upload anything to PAUSE

[22:47] <lizmat> it's just that installers need to be able to deal with it

[22:47] <lizmat> FROGGS: see you tomorrow in Lyon

[22:47] <lizmat> sleep now&

[22:47] <lue> Yeah, that's kinda what I assumed beforehand.

[22:48] <lue> ♞ lizmat o/

[22:51] *** PZt left
[22:51] *** rurban joined
[22:51] *** PZt joined
[22:52] *** siruf left
[22:53] *** jnap joined
[22:53] *** treehug88 joined
[22:54] *** siruf joined
[22:55] *** rurban left
[22:58] *** raiph left
[22:58] *** mavcunha joined
[22:59] *** BenGoldberg joined
[23:01] *** siruf left
[23:01] *** siruf joined
[23:02] *** siruf left
[23:02] *** siruf joined
[23:06] *** Psyche^_ joined
[23:08] *** siruf left
[23:08] *** bjz left
[23:09] *** siruf joined
[23:10] *** Psyche^ left
[23:14] *** daniel-s_ left
[23:15] *** siruf left
[23:17] *** siruf joined
[23:18] *** ajr_ left
[23:22] *** btyler left
[23:24] *** siruf left
[23:25] *** siruf joined
[23:25] *** treehug88 left
[23:25] *** LootingLemur joined
[23:30] *** rurban joined
[23:31] *** siruf left
[23:32] *** siruf joined
[23:34] *** Guest82048 left
[23:35] *** bonsaikitten joined
[23:37] *** denisboyun joined
[23:38] *** siruf left
[23:39] *** siruf joined
[23:43] <japhb__> .ask jnthn Is there any way from Rakudo to see how many threads are actively running tasks, how many are blocked on e.g. IO, how many tasks *could* run if there was a thread available, etc?  I'm at the point now that I'm wanting to optimize the use of my thread pool to keep all my cores busy, and it would help to be able to introspect the states.

[23:43] <yoleaux> japhb__: I'll pass your message to jnthn.

[23:46] *** siruf left
[23:47] *** siruf joined
[23:47] <japhb__> .tell jnthn A sample use case: I have an app that starts up chewing CPU in one or two cores, launches a bunch of tasks in different threads, they all start communicating with external processes, all cores max out briefly, some tasks finish, others go to low-CPU state and machine drops to only a core or two used for another 20 seconds before finishing.  And now I want to know why.  :-)

[23:47] <yoleaux> japhb__: I'll pass your message to jnthn.

[23:49] *** benabik joined
[23:52] *** siruf left
[23:54] *** siruf joined
