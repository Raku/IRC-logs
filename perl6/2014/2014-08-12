[00:07] *** raiph joined
[00:19] *** jnap joined
[00:25] *** bjz_ left
[00:30] <dalek> perl6-roast-data: 03a5fc3 | coke++ | / (5 files):

[00:30] <dalek> perl6-roast-data: today (automated commit)

[00:30] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/03a5fc369d

[00:30] <dalek> perl6-roast-data: 638526f | coke++ | bin/moarborts.p5:

[00:30] <dalek> perl6-roast-data: don't need this

[00:30] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/638526fbae

[00:30] <dalek> perl6-roast-data: 3c97153 | coke++ | bin/git.p5:

[00:30] <dalek> perl6-roast-data: stop fetching pugs.

[00:30] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/3c97153f10

[00:30] <dalek> perl6-roast-data: 76f27f7 | coke++ | / (6 files):

[00:30] <dalek> perl6-roast-data: First pass at adding rakudo.moar with -jit

[00:30] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/76f27f7a91

[00:41] *** chenryn joined
[00:46] *** jnap left
[00:46] *** chenryn left
[00:47] *** anaeem1 joined
[00:51] *** anaeem1 left
[00:54] *** dayangkun joined
[01:01] <dalek> roast/S26-WHY: 9f9b019 | (Rob Hoelz)++ | S26-documentation/why-both.t:

[01:01] <dalek> roast/S26-WHY: Create a helper function for both-tests

[01:01] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/9f9b019e79

[01:01] <dalek> roast/S26-WHY: c17002c | (Rob Hoelz)++ | S26-documentation/why-trailing.t:

[01:01] <dalek> roast/S26-WHY: Test multi subs with trailing comments

[01:01] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/c17002c983

[01:01] <dalek> roast/S26-WHY: 36430df | (Rob Hoelz)++ | S26-TODO.md:

[01:01] <dalek> roast/S26-WHY: Update TODO matrix

[01:01] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/36430df5bd

[01:11] *** ventica2 joined
[01:14] *** jnap joined
[01:25] *** jnap left
[01:26] *** FROGGS_ joined
[01:29] *** FROGGS left
[01:33] *** Mouq joined
[01:42] *** chenryn joined
[01:45] *** ilbot3 left
[01:46] *** ilbot3 joined
[01:47] *** chenryn left
[01:48] *** mr-foobar left
[01:49] *** klapperl joined
[01:49] *** mr-foobar joined
[01:52] *** klapperl_ left
[01:53] *** araujo left
[01:54] *** araujo joined
[01:57] <dalek> rakudo/S26-WHY: d7a9926 | (Rob Hoelz)++ | src/core/traits.pm:

[01:57] <dalek> rakudo/S26-WHY: Don't pass type to set_{leading,trailing}_docs

[01:57] <dalek> rakudo/S26-WHY: review: https://github.com/rakudo/rakudo/commit/d7a9926502

[01:57] <dalek> rakudo/S26-WHY: 55af855 | (Rob Hoelz)++ | src/Perl6/ (3 files):

[01:57] <dalek> rakudo/S26-WHY: Fix trailing decl comments for roles

[01:57] <dalek> rakudo/S26-WHY: review: https://github.com/rakudo/rakudo/commit/55af855408

[02:00] *** lue left
[02:12] *** thou left
[02:12] *** lustlife joined
[02:34] *** thou joined
[02:41] *** chenryn joined
[02:46] *** Akagi201_ joined
[02:46] *** Akagi201 left
[02:47] *** Akagi201_ left
[02:55] *** noganex_ joined
[02:55] *** kaare_ joined
[02:58] *** noganex left
[03:07] *** xenoterracide left
[03:13] *** xragnar_ joined
[03:13] *** xragnar left
[03:13] *** xragnar_ is now known as xragnar

[03:16] *** clkao left
[03:19] *** rurban1 left
[03:20] *** telex left
[03:22] *** rurban1 joined
[03:22] *** rurban1 left
[03:22] *** telex joined
[03:28] *** clkao joined
[03:29] *** rurban1 joined
[03:47] *** lustlife left
[03:48] *** lue joined
[03:51] *** raiph left
[03:53] *** kaare_ left
[03:55] *** thistusooa joined
[03:59] *** lustlife joined
[04:00] *** raiph joined
[04:17] *** raiph left
[04:23] *** [Sno] left
[04:25] *** xinming_ joined
[04:27] *** rurban1 left
[04:28] *** kaare_ joined
[04:29] *** xinming left
[04:30] *** hagiri joined
[04:31] <hagiri> PerlJam

[04:31] <hagiri> :)

[04:37] *** hagiri left
[04:37] *** hagiri joined
[04:37] *** hagiri left
[04:45] *** BenGoldberg left
[04:51] *** hagiri joined
[04:52] *** hagiri left
[04:57] *** thou left
[04:59] *** hagiri joined
[05:00] <hagiri> hi all

[05:00] <hagiri> :)

[05:04] *** SamuraiJack joined
[05:05] *** gfldex joined
[05:06] *** chenryn left
[05:07] *** chenryn joined
[05:11] *** chenryn left
[05:13] <hagiri> I've been reading and it seems that the perl 6 can use classes, how should I proceed?

[05:13] <hagiri> :)

[05:15] <ren1us> you mean how does OOP work in p6?

[05:15] *** xinming_ left
[05:16] *** AndChat-188244 joined
[05:17] *** xinming joined
[05:18] <hagiri> ren1us

[05:18] <hagiri> I want to know if it is possible. :)

[05:19] <ren1us> m: class A { has $.var; method new($var) { self.bless(:$var); }; method b() { say $.var; }; }; my $a = A.new("Test"); $a.b;

[05:19] <camelia> rakudo-moar 0c42c1: OUTPUT«Test␤»

[05:19] *** cognominal left
[05:20] <ren1us> yeah, p6 has pretty much fully functional classes, [multiple] inheritance, role composition, etc

[05:23] *** chenryn joined
[05:25] <hagiri> ren1us you wrote to me is a simple syntax in perl 6?

[05:25] <hagiri> :P

[05:25] <hagiri> i see class {} ..

[05:25] <hagiri> lol

[05:25] *** PotatoGim joined
[05:26] <ren1us> mhm

[05:26] <ren1us> class A { } # empty class body

[05:26] <ren1us> has $.var; # an attribute of the class

[05:28] <hagiri> ren1us hm..

[05:28] <hagiri> for beginner, learn perl 5 or 6?

[05:28] <hagiri> :)

[05:29] <ren1us> 5 is more mainstream, 6 is more awesome

[05:31] <hagiri> ren1us

[05:31] <hagiri> doubt cruel, vi syntax of the two versions, changes little ..

[05:31] <hagiri> ;T

[05:32] <ren1us> i personally find p6 cleaner than p5, but there are those who disagree

[05:33] <ren1us> the fact that i'm in this channel means i'm biased, of course :)

[05:35] <ren1us> i actually forget if there's a clean tutorial series out there for p6.  i know there's the advent calendar and the old book on github, and i seem to recall someone said they were writing a new walkthrough a couple weeks ago

[05:35] *** Mouq left
[05:37] *** davido___ joined
[05:38] <moritz> ren1us: maybe http://learnxinyminutes.com/docs/perl6/ 

[05:39] *** chenryn left
[05:39] <moritz> (which seems to have a stray bare "a" on a line of its own)

[05:39] *** SevenWolf joined
[05:40] *** chenryn joined
[05:42] *** colomon left
[05:44] *** [Sno] joined
[05:44] *** chenryn left
[05:48] <hagiri> ren1us

[05:48] <hagiri> I'm talking to some people perl5 channel, they told me that because of me being newbie, you'd better start with perl5 .. What do you have to say about?

[05:48] <hagiri> forgive me, my english is very poor :T

[05:49] <ren1us> your english is better than a lot of my friends who have been speaking it their whole lives, so don't worry about it

[05:51] <ren1us> the advantage of p5 is that it's got a huge community, which means a massive support network.  i think the camel book is on its 4th edition by now.  the advantage of p6 is that imo it's more reasonable than p5 in a lot of ways, which often makes it more newbie friendly (especially if you've used another language before), and the information isn't as... spread out, so to speak

[05:51] *** gfldex left
[05:51] *** PotatoGim left
[05:52] <ren1us> honestly you can't go wrong and it depends what your end goal is

[05:52] <thistusooa> the perl 6 compiler is slow

[05:54] *** thou joined
[05:54] <ren1us> moritz: that might be it.  i keep meaning to start writing up all the cool little gotchas i bump into (given that i still suck at this).  you know, put my liberal arts degree to good use.  it'd be nice to pull together as much scattered information as possible, get it neatly organized and navigable, and most importantly, include the details from the perspective of someone who didn't design them 

[05:54] <ren1us> (and thus necessarily consider them obvious)

[05:56] <hagiri> ren1us I use a translator and I have a basic understanding of english ..: P

[05:56] *** chenryn joined
[05:56] <hagiri> :P

[05:56] <hagiri> I use Fedora, I have perl installed, now, I can code

[05:56] <hagiri> :D

[05:58] *** thou left
[06:00] *** YUAAB6IJ joined
[06:03] *** virtualsue joined
[06:04] <hagiri> ren1us I'm going to program in Perl 5. 

[06:04] <hagiri> =)

[06:04] <hagiri> ;D

[06:05] <hagiri> ren1us thanks bro

[06:05] <hagiri> :)

[06:05] <hagiri> bye

[06:05] <ren1us> have fun

[06:06] <hagiri> ren1us ye

[06:06] <hagiri> :P

[06:07] *** hagiri left
[06:12] *** PotatoGim joined
[06:15] *** anaeem1_ joined
[06:36] *** kaleem joined
[06:45] *** Mouq joined
[06:46] * Mouq wonders if 'bro' was produced by the translator...

[06:47] * Mouq would also like to know where to purchase said translator

[06:50] *** kuroseki left
[06:55] *** FROGGS_ left
[07:08] *** SamuraiJack left
[07:10] *** akaseki joined
[07:14] *** Mouq left
[07:19] *** dmol joined
[07:27] *** Mouq joined
[07:32] *** dayangkun left
[07:32] *** aoseki joined
[07:34] *** SevenWolf left
[07:35] *** akaseki left
[07:38] <masak> morning, #perl6

[07:38] <lizmat> good *, #perl6!

[07:39] <moritz> \o *

[07:39] *** virtualsue left
[07:41] <moritz> masak: I thought a bit about CQRS and asynchronity; here are my ramblings: https://gist.github.com/moritz/da2d6ea7a3da3e440c19

[07:41] <moritz> masak: feel free to comment if I misunderstood something

[07:42] <moritz> (I'm talking about the API design aspect of CQRS, not about the separate read/write databases that it might bring too)

[07:42] *** thou joined
[07:45] *** dayangkun joined
[07:47] *** thou left
[07:47] *** Mouq left
[07:52] *** pecastro joined
[07:53] <lizmat> looks like the info about Rakudo on http://dev.perl.org is a bit out of date

[07:53] <lizmat> for one, it doesn't mention Rakudo running on JVM, and it doesn't mention MoarVM

[07:54] *** mr-foobar left
[07:55] *** mr-foobar joined
[08:01] <moritz> lizmat: send a mail to [email@hidden.address] and ask them where you can patch it?

[08:01] <moritz> lizmat: I remember it being subversion-controlled at some point, but it might have been migrated in the mean time

[08:01] <lizmat> ok, will do

[08:04] *** dakkar joined
[08:04] <moritz> lizmat: feel free to CC me :-)

[08:07] <masak> moritz: looking

[08:07] *** SamuraiJack joined
[08:09] <masak> moritz: re (1), a command sending confirmation is OK if you ask me. one bit (ACK/NAK). dunno if that changes things for you, though.

[08:10] <nwc10> are we sure that it's morning? Maybe it's still last night. It's the first time in a long time that nothing was committed while I slept.

[08:11] <moritz> nwc10: sleep longer! :-)

[08:11] <lizmat> nwc10: then go back to bed  :-)

[08:11] <masak> moritz: fwiw, I see your point. the summary seems to be that in this case, you want an updated view immediately after the success of the command.

[08:11] <masak> nwc10: who asked you to get up? :P

[08:11] <moritz> masak: correct, and that doesn't seem to mix well with CQRS + async

[08:11] <moritz> masak: or maybe with CQRS in general, dunno :-)

[08:12] <moritz> masak: but it's pretty common in interactive scenarios; people do stuff, and then want to verify the state afterwards

[08:13] <nwc10> masak: I actually got up because my daughter was (figuratively) bouncing around our bed and literally making a bit too much noice

[08:13] <nwc10> noise

[08:13] <nwc10> so "make breakfast" was a calmer plan

[08:14] <moritz> "what shall we have for breakfast?" -- "pancakes!"

[08:14] <nwc10> also, my laptop battery seems to be unwell, so I wasn't in an easy position to check that nothing had changed before I got out of bed

[08:15] <masak> :)

[08:16] <masak> moritz: I need to ponder it a bit more, but the structure of what you're describing feels like one of those callback thingies -- where you have an asynchronous command come back with a successful outcome, which triggers the query.

[08:17] <masak> moritz: sure, you *could* construct a command-query sequential hybrid... but that violates the stateless nature of the server, with probably ungood consequences.

[08:17] *** FROGGS joined
[08:17] <moritz> masak: that's one aspect; the other is that the client (who issues the command and waits for the response) also needs a timeout; so it must be more than a simple callback

[08:18] <FROGGS> m: use 42

[08:18] <camelia> rakudo-moar 0c42c1: OUTPUT«===SORRY!=== Error while compiling /tmp/3kza8jQCi1␤Undeclared routine:␤    use used at line 1␤␤»

[08:18] <FROGGS> ahh

[08:23] *** darutoko joined
[08:23] <lizmat> m: sub use { say $^a }; use 42

[08:23] <camelia> rakudo-moar 0c42c1: OUTPUT«42␤»

[08:23] <lizmat> not sure whether that should work

[08:24] <moritz> masak: there's also the option to give events sequence numbers, and ensure serial delivery; but that introduces other coupling, and makes scaling much harder

[08:24] <lizmat> m: sub require { say $^a }; require 42 # huh?

[08:24] <camelia> rakudo-moar 0c42c1: OUTPUT«Could not find file '42' for module 42␤  in any load_module at src/gen/m-ModuleLoader.nqp:183␤  in method load_module at src/gen/m-CORE.setting:21292␤  in block  at /tmp/tOxpjq86VA:1␤␤»

[08:24] <moritz> lizmat: it fits well with the "no keywords" policy

[08:24] <moritz> ah, and that's because require expects an expression, not a module name

[08:25] <masak> moritz: yes, I wouldn't go down that path.

[08:26] *** brrt joined
[08:33] *** dayangkun left
[08:40] *** kaleem_ joined
[08:41] *** kaleem left
[08:45] *** dayangkun joined
[08:50] *** virtualsue joined
[09:03] *** Vlavv left
[09:06] *** kurahaupo_ joined
[09:09] *** mr-foobar left
[09:09] *** mr-foobar joined
[09:13] *** lustlife1 joined
[09:15] *** Vlavv joined
[09:15] *** kurahaupo_ left
[09:16] *** lustlife left
[09:17] *** chenryn left
[09:18] *** chenryn joined
[09:22] *** spider-mario joined
[09:22] *** chenryn left
[09:23] *** brrt left
[09:28] *** kurahaupo_ joined
[09:31] *** thou joined
[09:34] *** brrt joined
[09:35] *** virtualsue left
[09:35] *** thou left
[09:41] *** chenryn joined
[09:46] *** ggherdov left
[09:51] *** ggherdov joined
[09:52] *** clkaoud left
[09:53] *** isacloud___ left
[09:56] *** clkaoud joined
[09:57] *** isacloud___ joined
[10:06] *** Ven joined
[10:14] *** Ven left
[10:25] *** brrt left
[10:32] *** colomon joined
[10:52] *** fling left
[10:57] *** lustlife1 left
[11:10] *** molaf_ left
[11:12] *** chenryn left
[11:13] *** chenryn joined
[11:13] *** milan joined
[11:15] *** kivutar joined
[11:17] <milan> test

[11:17] *** chenryn left
[11:19] *** thou joined
[11:19] <moritz> all tests successful.

[11:20] *** chenryn joined
[11:20] <milan> tnx

[11:21] <milan> trying xchat from server

[11:23] *** thou left
[11:36] *** colomon left
[11:43] <masak> milan: first time visitor? return customer? either way, welcome ;)

[11:46] *** milan left
[11:51] *** raiph joined
[12:04] *** dakkar left
[12:06] *** kivutar left
[12:07] *** kivutar joined
[12:12] *** dakkar joined
[12:28] *** anaeem1_ left
[12:29] *** anaeem1 joined
[12:29] *** thistuso- joined
[12:31] *** iarna joined
[12:31] *** thistusooa left
[12:39] *** jnap joined
[12:40] *** fling joined
[12:42] *** chenryn left
[12:43] *** kivutar left
[12:44] *** anaeem1 left
[12:45] *** anaeem1_ joined
[12:46] *** kaare_ left
[12:46] *** thistuso- left
[12:46] *** thistuso- joined
[12:46] *** thistuso- is now known as thistusooa

[12:48] *** fling left
[12:48] *** fling_ joined
[12:51] *** rurban1 joined
[13:01] *** SamuraiJack left
[13:03] *** PotatoGim left
[13:07] *** arnsholt_ is now known as arnsholt

[13:07] *** thou joined
[13:08] <PerlJam> guten Morgen meine Freunde

[13:09] <moritz> Guten Nachmittag Herr PerlJam :-)

[13:11] <nwc10> Heretisch. Es ist immer Morgen in #perl6 :-)

[13:11] *** thou left
[13:13] <PerlJam> es ist immer Weihnachten in #perl6  :)

[13:13] <nwc10> leider noch nicht

[13:15] <PerlJam> one of these days I'll learn more german than just a few phrases   ;)

[13:15] <tadzik> ich besischtige die sehenswuerdigkeiten!

[13:16] <woolfy> Mein Datenfernübertragungsanlage funktioniert noch immer.

[13:18] <moritz> Mein Luftkissenboot ist voller Aale!

[13:18] <woolfy> Und ich bin zu alt für ein Sommerferienewigkeitsgefühl.

[13:18] * masak .oO( air kissing boat )

[13:18] <nwc10> gah, I can't rmemeber the correct plural

[13:18] <woolfy> Moritz ist ein Irreaffentittenturbosuperdupertyp!

[13:18] <nwc10> Zwei Biers bitte, und mein Freund bezahlt

[13:19] <moritz> nwc10: "Biere"

[13:19] <dalek> rakudo-star-daily: 96a286b | coke++ | log/ (14 files):

[13:19] <dalek> rakudo-star-daily: today (automated commit)

[13:19] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/96a286bad8

[13:19] <nwc10> danke

[13:19] <PerlJam> woolfy: now you're just making stuff up    ;)

[13:20] <moritz> nwc10: "Zweimal Bier bitte", which sounds more idiomatic, and avoids the plural alltogether :-)

[13:20] <nwc10> oh yes. thanks. I get picked up on my default choice of phrase for "another beer"

[13:21] <woolfy> PerlJam: right from the "making up German words book" von Ben Schott: "Schottenfreude" ( http://www.benschott.com/schottenfreude/ ), a necessity for all people that love Germany.

[13:21] <tadzik> oh, I only knew Shadenfreunde

[13:21] <woolfy> Schadenfreude

[13:21] <tadzik> oh, maybe :)

[13:22] <psch> "zwei Biere" sounds more like "two kinds of beer" than "two [servings] of beer" to me

[13:22] <psch> ""Kölsch und Pils sind zwei der beliebtesten Biere." vs "Zwei Bier, bitte."

[13:23] <psch> also, merry christmas, #perl6 

[13:23] <moritz> psch: yes, you're right, and I'm outed as a non beer-drinker :0(

[13:24] <moritz> erm, that was supposed to be a :-)

[13:24] <woolfy> Yegh. I would agree if you would have said "Kwak und Deus".

[13:24] <psch> woolfy: i'm not big on beers; those are just two kinds i know exist :)

[13:24] <woolfy> psch: merry christmas to you too

[13:25] <woolfy> Ask jnthn, he is as big on beers as I am...  :-)

[13:25] <PerlJam> moritz: what's your drink of choice?

[13:25] <moritz> PerlJam: usually Apfelschorle (apple juice mixed with water)

[13:26] <PerlJam> moritz: if ever we meet IRL, I'll buy you an Apfelschorle  :)

[13:31] *** guru joined
[13:32] *** guru is now known as ajr_

[13:33] <moritz> :-)

[13:36] *** kaleem_ left
[13:36] <masak> tadzik: "Schadenfreund" -- a friend who does harm

[13:36] <masak> :)

[13:37] <tadzik> masak: I've heard it described as something like "being happy because someone else is hurt/harmed"

[13:38] <timotimo> tadzik: no, that's "schadenfreude"

[13:38] <timotimo> freude == happiness, freund == friend

[13:38] <PerlJam> I liked shadenfreund  (friend who shades?)

[13:38] <tadzik> 1521 tadzik | oh, I only knew Shadenfreunde

[13:38] <tadzik> so, I was right-ish :P

[13:38] <timotimo> schattenfreund*

[13:39] <tadzik> better than shattenfreund...

[13:39] <PerlJam> heh

[13:39] <moritz> schadenfreud!

[13:39] <moritz> (from Sigmund Freud)

[13:39] <masak> haha

[13:43] * masak .oO( it was a Schadenfreudian slip of the tongue )

[13:46] *** rurban1 left
[13:46] *** AndChat-188244 left
[13:47] *** cognominal joined
[13:51] <moritz> .oO( mein Schattfreud hat Schadenfreude )

[13:53] <PerlJam> It's a good thing the pun-engine isn't fully engaged or this could go on for a while.

[13:53] *** kaare_ joined
[13:53] <moritz> PerlJam: but your inner Schattfreud would *pun*ish you for that :-)

[13:54] <arnsholt> It's a good thing jnthn isn't here, you mean =p

[13:54] <moritz> *Schattenfreud

[13:59] <pmichaud> good morning, #perl6

[14:00] * pmichaud backlogs

[14:01] *** rindolf joined
[14:01] <rindolf> Hi all.

[14:03] *** thou joined
[14:12] *** rurban1 joined
[14:12] *** colomon joined
[14:21] *** kaleem joined
[14:22] *** iarna left
[14:38] *** treehug88 joined
[14:38] <Woodi> hallo today :)

[14:39] <hoelzro> morning #perl6

[14:41] <Woodi> moritz: but if client requests update and receive ACK then he can display same data he sended to update...

[14:42] *** ggoebel1111115 joined
[14:42] <Woodi> also: CQRS isn't advised for using for full domain, just some parts of it...

[14:44] *** ggoebel1111114 left
[14:44] *** chenryn joined
[14:45] <rurban1> masak: Hillarious tweet

[14:48] <moritz> Woodi: that presumes the presence of an ACK/NACK, aye

[14:49] *** treehug88 left
[14:50] *** rindolf left
[14:51] *** anaeem1_ left
[14:51] <pmichaud> hotel expo sofia doesn't have any more discounted rooms, but the metropolitan has reasonable rates ($75 USD/ night), if I'm willing to walk a mile each day

[14:52] <pmichaud> well, two miles :)

[14:52] <Woodi> btw. learnP6inY++

[14:55] <carlin> but... now it takes longer to learn :p

[14:55] *** iarna joined
[14:59] <nwc10> pmichaud: it's not Frankfurt, er Houston

[15:01] *** treehug88 joined
[15:06] *** iarna left
[15:07] *** brrt joined
[15:14] *** dayangkun left
[15:14] *** rurban1 left
[15:28] *** Mouq joined
[15:28] *** rurban1 joined
[15:35] *** treehug88 left
[15:36] *** treehug88 joined
[15:42] *** Mouq left
[15:44] *** iarna joined
[15:52] *** rom1504 joined
[15:57] <japhb> jnthn: What's the current comparative status of r-m and r-j for async stuff?  For example, does r-j have the async proc stuff, or just r-m?

[15:58] <hoelzro> has anyone else but PerlJam taken a look at what remains to be done for S26?

[15:59] <hoelzro> I'm thinking of merging what I've got so far into nom, but I'm trying to decide what a good point in terms of support/code quality would be for that to happen

[16:00] <japhb> hoelzro: Do you *know* what's left to be done, or are you asking if you missed anything?

[16:00] <hoelzro> japhb: I have a long list of things I'd *like* to do

[16:00] <hoelzro> but it's really daunting, and I'd like to get the basics that I've got into nom so others can start playing with it

[16:00] <hoelzro> or using it for real code

[16:01] <hoelzro> if you're curious what's left: https://github.com/perl6/roast/blob/S26-WHY/S26-TODO.md

[16:01] <hoelzro> hmmm...that table I made doesn't render too nicely on GH

[16:03] <timotimo> japhb: i think r-j doesn't have the async proc stuff yet - the jvm of course does, but it's not hooked up to rakudo

[16:04] <japhb> hoelzro: OK, looked through the list, and I can see why it's daunting.

[16:05] <hoelzro> yeah, I'm trying to be thorough =)

[16:05] <hoelzro> honestly, I'd like to take a break on it

[16:05] <hoelzro> but I don't want a stale branch to sit around

[16:05] <japhb> Thorough is good!  As long as perfect doesn't become the enemy of good

[16:05] <hoelzro> indeed

[16:05] <hoelzro> I think wacky.t can wait

[16:05] <hoelzro> I'll have to look at it again

[16:05] <japhb> Yeah, and I notice a lot of these are tests for cases you may or may not handle yet.

[16:07] <hoelzro> especially with my limited experience with the compiler

[16:07] <hoelzro> although this project has taught me a *lot* about Rakudo

[16:07] <hoelzro> I've been pretty much everywhere under src/, it seems

[16:08] <japhb> Here's my thoughts.  I'd do the following in order of importantce, and merge before you completely burn out:  1. Anything that breaks existing spectests, 2. Anything that badly slows down parsing (like when we used to have to avoid non-latin unicode in the setting), 3) Get the spec up to at least the things you've *already* implemented and are pretty sure you won't change.  After that, everything else seems like iterative improvements that can happen whenever.

[16:08] <japhb> I bet!

[16:09] <hoelzro> alright, good advice

[16:09] <hoelzro> I don't think I break any existing tests

[16:10] <hoelzro> and my branch is about as fast as nom to compile (give or take a second or three)

[16:10] <japhb> That sounds good on both counts

[16:15] *** Mouq joined
[16:16] <Mouq> We really need to make working with Cursors from Perl6land not awful. As in, maybe I'll get around to it at some point, but it would be pretty swell if someone else did it ;)

[16:20] <japhb> .oO( *50's dad voice*  Well that'll be just SWELL, Timmy! )

[16:22] <Mouq> Anyway, plagarizing FROGGS+++, I did this: https://github.com/Mouq/snake/commit/711beace8f5e020b11ec0d2efdab259eab241162

[16:22] *** brrt left
[16:23] <timotimo> oh, cool

[16:23] <timotimo> i like to see a bit of activity on Snake

[16:27] <Mouq> I should probably give credit to him in the documents, esp for the Build script I basically stole wholesale, but he's been talking about a module for slangs, so hopefully much of what I took will disappear ;)

[16:28] <Mouq> My hope is that this offers some light on what such a module would be

[16:31] *** brrt joined
[16:32] <timotimo> :)

[16:34] *** [Sno] left
[16:38] *** beastd joined
[16:39] *** Mouq left
[16:42] *** ren1us left
[16:47] *** chenryn left
[16:52] *** dmol left
[17:14] *** kaiserpathos joined
[17:15] *** brrt left
[17:16] *** Rotwang joined
[17:22] *** kaleem left
[17:23] *** anaeem1 joined
[17:25] *** Rotwang left
[17:29] *** dmol joined
[17:31] <[Coke]> host07 is complaining that its ubuntu is too old.

[17:32] *** kaleem joined
[17:34] *** ajr_ left
[17:37] <dalek> perl6-roast-data: bce3be8 | coke++ | / (6 files):

[17:37] <dalek> perl6-roast-data: today (automated commit)

[17:37] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/bce3be8462

[17:38] *** Rotwang joined
[17:39] *** dakkar left
[17:39] *** raiph left
[17:42] *** kaleem left
[17:44] *** dmol left
[17:45] *** denis_boyun_ joined
[17:46] <dalek> specs: 34a30e7 | (Elizabeth Mattijsen)++ | S (6 files):

[17:46] <dalek> specs: Make sure we expand TABs to spaces

[17:46] <dalek> specs: review: https://github.com/perl6/specs/commit/34a30e748a

[17:49] *** raiph joined
[17:50] *** treehug88 left
[17:51] <pmichaud> 14:59 <nwc10> pmichaud: it's not Frankfurt, er Houston

[17:51] <pmichaud> I suspect even Frankfurt isn't normally Frankfurt.  :)   But Houston is always Houston.  :-/

[17:52] <pmichaud> Anyway, a 1mi walk is no big deal.  I went ahead and booked a room (to make sure I have one), I'm still deciding whether to cross the pond though.

[17:53] *** kaiserpathos left
[17:53] <jnthn> pmichaud: 1mi? That's quite tolerable :)

[17:54] *** fhelmberger joined
[17:54] <japhb> jnthn: Depends on which city you're doing it in, and what the weather is like at the time.  I found walking a mile or two in Austin to have wildly varying tolerability depending on conditions.  :-)

[17:54] <jnthn> Yes, I was working under the "in Sofia" context :)

[17:57] <japhb> :-)

[17:58] *** gfldex joined
[18:00] *** rindolf joined
[18:00] <rindolf> Hi all.

[18:00] <rindolf> What's up?

[18:03] <pmichaud> Yes, I walk at least a mile every day as it is.  :)

[18:03] <pmichaud> I've convinced myself that the expense for Sofia isn't too great... now I just have to decide if I can dedicate the time :)

[18:04] *** fhelmberger left
[18:05] <PerlJam> pmichaud: what would you be doing if not at Sofia?

[18:06] <dalek> specs: 98a97ba | (Elizabeth Mattijsen)++ | S (3 files):

[18:06] <dalek> specs: De-TAB

[18:06] <dalek> specs: review: https://github.com/perl6/specs/commit/98a97ba054

[18:06] <jnthn> .oO( missing jnthn talks! :P )

[18:07] <PerlJam> pmichaud: btw, a guy on #perl was asking a regex question today where he wanted to match against "something/pmwiki.php"   :)

[18:12] <PerlJam> docs/ops.markdown says nqp::fromstr_I(str $val, Mu:T $type) converts a string value to a Big Integer of the given type.   What does that mean "of the given type"?

[18:12] <jnthn> $type

[18:12] <jnthn> Where $type is something that is a P6bigint or can box one

[18:13] <jnthn> (The latter is true in Perl 6, where we have a P6opaque with a P6bigint inlined into its body, since you can potentially subclass or mix in to Int)

[18:13] <pmichaud> PerlJam: (if not at Sofia)  Probably resting and getting work done on the house

[18:13] <pmichaud> PerlJam: oh, and hopefully working on #p6 :)

[18:13] <pmichaud> and missing jnthn/lizmat/masak talks

[18:14] <PerlJam> pmichaud: so .. you *wouldn't* be working on #p6 if you went?

[18:14] <pmichaud> I'm continually surprised at pmwiki's reach.  Anyone here know who Ward Christensen is?

[18:14] <pmichaud> He sent me money for PmWiki :)

[18:14] <pmichaud> (Ward Christensen of "XMODEM" fame.)

[18:15] <japhb> Woah.

[18:15] <pmichaud> PerlJam: well, during the 28+ hours of travel I might not be doing much work on anything... including #p6 :)

[18:16] <PerlJam> pmichaud: so ... you'd be resting  :)

[18:16] <pmichaud> http://act.yapc.eu/ye2014/talk/5633   # one of the top reasons for making it to Sofia

[18:16] <PerlJam> sounds like the only thing you lose out on is "getting work done on the house"

[18:17] <pmichaud> PerlJam: well, and about $2.5K  :)

[18:17] <nwc10> that's a lot of beer

[18:17] <pmichaud> oh, I'm pretty sure Sofia includes beer, though

[18:17] <pmichaud> likely more than I'd get by staying home

[18:18] <nwc10> I've just realised that I have no idea about either Bulgarian beer or Texan beer

[18:23] <masak> never too late to find out!

[18:24] <PerlJam> jnthn: Am I misunderstanding something, or is this a bug? https://gist.github.com/perlpilot/8dcae28cfe73ea1778e3

[18:24] <PerlJam> masak: it's probably too late when you're dead  ;>

[18:24] *** kaleem joined
[18:25] <japhb> .oO( "Never a better time ... than RIGHT NOW." )

[18:25] <masak> PerlJam: better try those beers now, then!

[18:25] <jnthn> PerlJam: Try nqp::say(nqp::tostr_I($int))

[18:26] *** kaleem left
[18:26] <PerlJam> ah

[18:26] <PerlJam> that works as expected, thanks

[18:26] *** kaleem joined
[18:28] *** [Sno] joined
[18:30] *** treehug88 joined
[18:30] *** SamuraiJack joined
[18:35] <hoelzro> let's say I have a few variants of a parametric role

[18:35] <hoelzro> role A[] { ... } role A[::T] { ... }

[18:35] <hoelzro> if each variant has their own leading comment, what should A.WHY be?

[18:36] <PerlJam> hoelzro: whatever the spec says ;)

[18:36] <hoelzro> that's the thing - it doesn't!

[18:37] <PerlJam> does it mention multis in a similar regard?  or silence on the matter there too?

[18:37] <hoelzro> multis it does

[18:37] <hoelzro> each candidate has its own WHY

[18:37] <jnthn> hoelzro: Yes, that problem is shared by our-scoped things declared in parametric roles too :)

[18:37] <hoelzro> but you can "pre-declare" a multi via 'proto'

[18:37] <hoelzro> can one do the same with roles?

[18:38] <jnthn> Which, of course, don't show up in A:: either :)

[18:38] <hoelzro> jnthn: oh, so if I declare an our $something in one variant, it's accessible from the other?

[18:38] <jnthn> hoelzro: No, more like this:

[18:38] <jnthn> m: role A { our $x }; say $A::x

[18:38] <camelia> rakudo-moar 0c42c1: OUTPUT«(Any)␤»

[18:38] <jnthn> uh, bad example :)

[18:38] <jnthn> m: role A { our $x }; say $A::.keys

[18:38] <camelia> rakudo-moar 0c42c1: OUTPUT«===SORRY!=== Error while compiling /tmp/rxwMQSAVg_␤Variable '$A' is not declared␤at /tmp/rxwMQSAVg_:1␤------> role A { our $x }; say $A::.keys⏏<EOL>␤    expecting any of:␤        method arguments␤»

[18:39] <jnthn> grr

[18:39] <jnthn> m: role A { our $x }; say A::.keys

[18:39] <camelia> rakudo-moar 0c42c1: OUTPUT«␤»

[18:39] <jnthn> That's what I was after.

[18:39] <hoelzro> ah ha

[18:39] <jnthn> For roles, A doesn't refer to the role, but rather ti's a type object whose meta-object knows how to take arguments and pick an appropriate role from them.

[18:39] <hoelzro> see, the current implementation applies the WHY to the ParametricRoleGroupHOW

[18:40] *** fling_ left
[18:40] <jnthn> That sounds odd to me.

[18:40] <hoelzro> ok, this is why I ask =)

[18:40] <jnthn> It might "make things work" but not in a very meaningful way.

[18:40] * hoelzro .oO( WHY I ask? )

[18:40] <jnthn> Because it fails as soon as there's more than one parameterization.

[18:40] <hoelzro> well, my current implementation would merge the variants' docs

[18:41] <jnthn> If there's a way to do it, A.WHY would be better returning the .WHYs of all the things in the group.

[18:41] <hoelzro> whoa

[18:41] <PerlJam> hoelzro: +1 to what jnthn sais

[18:41] <PerlJam> er, said

[18:41] <hoelzro> that's not a bad idea

[18:41] <hoelzro> I feel that protos could work the same way

[18:41] <jnthn> And the .WHY on a particular ParametricRoleHOW gives the doc for that variant

[18:42] <hoelzro> because I feel it's weird that if I built some sort of interactive help mechanism, and help(&infix:<+>) printed nothing =/

[18:42] <jnthn> And folks that really want to drill down that far just ask the MOP for what the role group has.

[18:42] <jnthn> Yes, that sounds like just the same issue. Nice that it shows up in multiple places, since then the role case isn't special ;-)

[18:43] <masak> "[Language design] requires a curious mixture of clear thinking, aesthetics and pragmatic judgement." -- http://blog.stephenwolfram.com/2014/08/computational-knowledge-and-the-future-of-pure-mathematics/

[18:43] <hoelzro> indeed

[18:43] <masak> "And it involves always seeking the deepest possible understanding, and trying to do the broadest unification—to come up in the end with the cleanest and “most obvious” primitives to represent things."

[18:43] <jnthn> (that is, I'm agreeing with you that it's the same thing with protos, and yes, .WHY on infix:<+> shoudl show the docs of the alternatives)

[18:43] <hoelzro> jnthn: is there a way to "pre-declare" a role? I'm wondering what the right thing would be to apply a generic comment to the ParametricRoleGroupHOW

[18:43] <hoelzro> I can see wanting to do this with proto, so I'm thinking about the role analogue

[18:43] <jnthn> hoelzro: Um...I dunno what role Foo { ... } does today

[18:44] <jnthn> m: role Foo { ... }

[18:44] <camelia> rakudo-moar 0c42c1: OUTPUT«Unhandled exception: Could not instantiate role 'Foo':␤Cannot invoke this object (REPR: P6opaque, cs = 0)␤   at src/gen/m-Metamodel.nqp:2028  (/home/p6eval/rakudo-inst-2/languages/nqp/lib/Perl6/Metamodel.moarvm:specialize:19)␤ from src/gen/m-Metamode…»

[18:44] <jnthn> m: role Foo { ... }; 1

[18:44] <camelia> rakudo-moar 0c42c1: ( no output )

[18:44] <jnthn> Not much :)

[18:44] *** rurban left
[18:45] <PerlJam> Is .WHY always a string?

[18:45] <jnthn> hoelzro: Anyway, not officially, but we can probably make the above thingy do it. Question then is if it's an error not to provide at lesat one role variant later.

[18:45] <hoelzro> PerlJam: never, actually

[18:45] <hoelzro> it's always a Pod::Block::Declarator

[18:45] <hoelzro> at least on Rakudo

[18:45] <PerlJam> oh, that's right.  It's an object that stringifies.

[18:45] * PerlJam forgets so easily sometimes.

[18:46] <hoelzro> the spec just says it should be an object with .leading, .trailing, and .WHEREFORE methods

[18:46] <hoelzro> PerlJam: I would probably have forgotten if I hadn't started dreaming about S26 =P

[18:46] <hoelzro> jnthn: I think that applying a WHY to the role group can wait to be specced

[18:47] <hoelzro> I just want to make what I merge into nom to make sense

[18:47] <hoelzro> I'll wait and see if others (esp. TimToady) have anything to add

[18:49] <PerlJam> hoelzro: What happens to  #|( fooey ) class A { ... };   then later   #|( woot! ) class A { has $.stuff; method foo { } }   ?

[18:49] <hoelzro> isn't that a redefinition error?

[18:49] <hoelzro> oh, I guess not

[18:49] <hoelzro> because the first is just a forward decl

[18:51] <PerlJam> seems to me like the .WHY should also keep track of the file and linenumber where it comes from.

[18:53] <hoelzro> hmm

[18:53] <hoelzro> I don't know if that's spec'd, but it might already

[18:54] <hoelzro> it does not

[18:54] <PerlJam> I doubt it.   I found .WHY to only be specced, the first 90%

[18:54] <hoelzro> yeah, the spec can be a bit ambiguous =/

[18:54] <hoelzro> which is WHY I'm here, bothering everyone with questions =)

[18:57] <jnthn> hoelzro: (applying a WHY to the role group) agree

[18:57] *** kaleem left
[19:00] *** darutoko left
[19:02] <cognome> r:   enum < un >; say un

[19:03] <camelia> rakudo-moar 0c42c1: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Undeclared routine:␤    un used at line 1. Did you mean 'uc', 'on'?␤␤»

[19:03] <camelia> ..rakudo-parrot 0c42c1: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Undeclared routine:␤    un used at line 1. Did you mean 'uc'?␤␤»

[19:03] <camelia> ..rakudo-jvm 0c42c1: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Undeclared routine:␤    un used at line 1. Did you mean 'on', 'uc'?␤␤»

[19:03] <jnthn> cognome: anonymous enum doesn't install symbols

[19:03] <cognome> r:   enum E < un >; say un

[19:03] <camelia> rakudo-{parrot,jvm,moar} 0c42c1: OUTPUT«un␤»

[19:04] <cognome> jhntn so, what's their purpose?

[19:04] <jnthn> cognome: They produce a hash

[19:05] <cognome> so, declaring them in sink context should be an error?

[19:06] <PerlJam> more like a warning to me.

[19:06] <jnthn> Yeah, foo in sink context is mostly done as a warning

[19:06] <jnthn> Or always, in fact

[19:06] *** SamuraiJack left
[19:08] <FROGGS> .tell Mouq nice! and yes, this makes the Slangish module easier design wise...

[19:08] <yoleaux> FROGGS: I'll pass your message to Mouq.

[19:14] *** cognominal left
[19:19] <masak> m: enum :: <un>; say un

[19:19] <camelia> rakudo-moar 0c42c1: OUTPUT«===SORRY!===␤MVMArray: Can't pop from an empty array␤»

[19:19] * masak submits rakudobug

[19:20] <masak> the days of low-hanging bugs are not completely past ;)

[19:22] <masak> m: enum :: <un>

[19:22] <camelia> rakudo-moar 0c42c1: OUTPUT«===SORRY!===␤MVMArray: Can't pop from an empty array␤»

[19:22] * cognome wonders about the magic of enum parsing, were is the closing part for that :  https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Grammar.nqp#L2716 ?

[19:23] <FROGGS> cognome: a term

[19:23] <cognome> I see an opening : <?[<(«]>   but no closing

[19:23] <FROGGS> is the opening, containing and closing part

[19:23] <jnthn> That's just a lookahead; it doesn't swallow

[19:23] <FROGGS> cognome: that is a look ahead

[19:23] <cognome> ho. thanx

[19:23] <cognome> I missed the ?

[19:24] <jnthn> np, but don't call me ho :P

[19:24] *** pochi left
[19:24] <FROGGS> bro' :P

[19:24] <cognome> jnthn++ , that's a exclamation of surprise. :)

[19:25] <PerlJam> cognome: Wouldn't an exclamation have an exclamation point?

[19:25] * diakopter giggles at "Can't pop from an empty array" (error inherited from Parrot)

[19:25] <cognome> sometimes I go gung-ho with my French

[19:25] <jnthn> diakopter: I...don't think trying to pop from an empty array makes sense here whatever backend we're on :)

[19:26] <diakopter> I meant the error text

[19:26] <jnthn> Ah :)

[19:26] <FROGGS> diakopter: copy&paste ftw :o)

[19:26] * masak .oO( when you try to pop the abyss, the abyss pops you back )

[19:27] <diakopter> Parrot had an exclamation point on it, though

[19:27] <diakopter> .. speaking of exclamation points, as I continue reading the backscroll

[19:28] <FROGGS> diakopter: you are going to read everything from feb until now?

[19:28] *** guru joined
[19:28] *** rurban joined
[19:28] <diakopter> FROGGS: hm

[19:28] *** guru is now known as Guest49730

[19:28] *** Guest49730 is now known as ajr_

[19:30] *** pmurias joined
[19:31] *** fhelmberger joined
[19:36] *** pecastro left
[19:36] <lizmat> moritz: mail sent

[19:39] *** brrt joined
[19:39] *** pecastro joined
[19:39] *** pochi joined
[19:39] <lizmat> it just occurred to me that for the case

[19:40] <lizmat> for $fh.lines -> $line { }

[19:40] <lizmat> we could very well use a type of reification that only keeps one line in memory at a time (aka, throw away the ones already seen)

[19:40] <masak> yes.

[19:41] <lizmat> this would be different of course for something like my @lines := $fh.lines;

[19:41] <masak> something similar was discussed the other day, I think.

[19:41] <brrt> ehm, hey, i've a question for language designers

[19:41] <masak> but maybe you're alluding to that discussion?

[19:41] <lizmat> nope

[19:41] <masak> lizmat: ok, I'll try to find it for you.

[19:41] <lizmat> not consciously

[19:41] <lizmat> :-)

[19:42] <brrt> what's the right thing with regards to the truth-valueness of floating points? especially NaNs? 

[19:42] <masak> lizmat: http://irclog.perlgeek.de/perl6/2014-08-09#i_9159362

[19:42] <lizmat> r: say ?NaN

[19:42] <camelia> rakudo-{parrot,jvm,moar} 0c42c1: OUTPUT«True␤»

[19:43] <PerlJam> r: say ?Inf;  # also this :)

[19:43] <camelia> rakudo-{parrot,jvm,moar} 0c42c1: OUTPUT«True␤»

[19:44] <masak> javascript> say !!NaN

[19:44] <masak> false

[19:44] <timotimo> m: say !NaN

[19:44] <camelia> rakudo-moar 0c42c1: OUTPUT«False␤»

[19:44] <brrt> yeah, i had expected as much from the current code

[19:44] <FROGGS> I had also guessed that NaN is falsish

[19:44] <masak> irb(main):002:0> !!(0.0/0.0)

[19:44] <masak> => true

[19:44] <lizmat> I would think anything not 0 would be true

[19:44] <lizmat> and NaN is not 0

[19:45] <FROGGS> but .Bool should DWIM

[19:45] <brrt> no, unless_n and if_n (and likely, istrue_n if it exists) both check for equality with 0.0

[19:45] <FROGGS> and I is me

[19:45] <FROGGS> :D

[19:45] <brrt> and indeed NaN is not equal to 0

[19:45] <masak> I think I'm fine with ?NaN being True.

[19:45] <masak> brrt: right. because NaN is not equal to *anything*.

[19:46] <masak> m: say NaN == NaN

[19:46] <nwc10> NaN is not equal to NaN. Unless you're Intel's C compiler with default optimisation settings

[19:46] <camelia> rakudo-moar 0c42c1: OUTPUT«False␤»

[19:47] <brrt> in which case intels compiler is wrong

[19:47] <brrt> ok, so i'm good for implmenting it numeric booleanity as strict equivalence to 0.0? that's not going to surprise anyone?

[19:48] <nwc10> 11912|Evidently it's important to you to get the wrong answer as quickly as possible.

[19:48] <masak> brrt: you have my blessing ;)

[19:48] <PerlJam> brrt: not me.

[19:48] <masak> brrt: someone who cares about NaN should handle that themselves.

[19:48] <PerlJam> brrt: assuming you meant "falseness as strict equivalence to 0"

[19:49] <brrt> ehm... well. yes PerlJam, that is what i mean

[19:49] <masak> brrt: and ?NaN being True follows the already established rule of "everything but zero boolifies to True"

[19:49] <brrt> very well, i'll make it so

[19:49] <FROGGS> nmake it so!

[19:49] <masak> brrt: the only other option I can think of is NaN boolifying to Failure. but I think that's a bad idea.

[19:50] <PerlJam> masak: why?

[19:50] <FROGGS> well, NaN is some sort of small explosion

[19:50] <PerlJam> .oO( Failure is not an option? )

[19:50] <brrt> ehm, at any rate, i don't think we should handle that at VM level

[19:50] <brrt> /if/ you want that

[19:51] <masak> PerlJam: it's the typical thing that tends to end up in "Perl 6 puzzlers" books.

[19:51] <masak> PerlJam: "prefix:<?> always results in True or False -- right? RIGHT? wrong."

[19:52] <masak> PerlJam: and I can't see a use case for it, where it would make someone happer rather than breaking Least Surprise.

[19:52] <masak> happier*

[19:52] *** jnap left
[19:52] <brrt> especially implementors, i might add

[19:53] <masak> right.

[19:53] *** rom1504 left
[19:53] <masak> one more spectest brick in the wall.

[19:53] <masak> s/one more/just another/

[19:58] <pmichaud> I don't think that prefix:<?> should ever return a Failure, since Failures boolify

[20:02] <FROGGS> everything boolifies

[20:02] <timotimo> i'm going to start writing my weekly now; would people like to mention their recent stuff they did? :)

[20:02] <hoelzro> boolify all the things!

[20:03] <timotimo> i haven't heard of changes to the Pod SAX thing or the new Pod::To::HTML re-write

[20:03] <FROGGS> it is just that Failure.Bool disarms the Failure and always returns False

[20:04] *** ChoHag joined
[20:05] <ChoHag> X::AdHoc.new(payload => "Cannot find method 'Any'")

[20:06] <brrt> timo: i think you know all my stuff by now

[20:06] <masak> ChoHag: well hello to you too ;)

[20:06] <ChoHag> Hello.

[20:07] <ChoHag> That happened in one of the 10 runs.

[20:07] <hoelzro> nothing new from me

[20:07] <ChoHag> X::AdHoc.new(payload => "Could not find symbol '\&Return'") in another.

[20:07] <hoelzro> timotimo: ^

[20:09] <jnthn> ChoHag: Threads + MoarVM?

[20:09] <ChoHag> Yes.

[20:10] <jnthn> ChoHag: I don't suppose you've a short-ish snippet that reproduces it?

[20:11] *** raiph left
[20:11] <ChoHag> Funnily enough I just had the thought that the code might be small enough to be useful to look at and counted it.

[20:11] <ChoHag> 984 lines.

[20:11] <jnthn> Well, if it's something you're willing to share (with me, doesn't have to be public), I can try to reproduce it here and debug.

[20:12] <ChoHag> It does seem to do with passing a block ref into a closure.

[20:13] <ChoHag> Something like if $.foo == { ... }, there's code which does: $x = $.foo; $.foo = sub { do_stuff(); $.foo = $x; }

[20:13] <ChoHag> And last time I had the same sort of blowup I was passing coderefs in a similarly stupid way.

[20:13] <TimToady> well, hopefully not with ==

[20:13] <TimToady> that's numeric

[20:13] <ChoHag> No, not ==. That expression was supposed to just be setting the scene.

[20:14] <ChoHag> Imagine the curtains coming up to a $ with its foo being a modernised Coderef.

[20:17] <ChoHag> I think I'm down to mostly moar bugs rather than my own bugs, so now I can hopefully start reshaping to code into something vaguely coherent.

[20:17] <ChoHag> At which point it'll go onto github.

[20:18] <TimToady> well, just remember that there are cultures where revealing vulnerability is perceived as weakness, and cultures where it's perceived as strength.  We try to be the latter. :)

[20:19] <ChoHag> It's not so much revealing vulnerability as my git-fu sucks.

[20:19] <TimToady> allowing people to see that your git-fu sucks is revealing vulnerability :)

[20:20] *** telex left
[20:20] <ChoHag> I basically git add whenever I have code in a state I really don't want to lose as a sort of really lazy backup and commit an enormous patch all in one go.

[20:20] <ChoHag> Then move onto another project for a few months and start (sometimes start over)  again.

[20:20] <TimToady> the ability to show that your git-fu sucks reveals that you are secure in your identity apart from that :)

[20:20] <ChoHag> One day I hope to finish something.

[20:21] <TimToady> commit early, commit often, we say :)

[20:21] <TimToady> one thing that helps finishing is when someone else starts helping

[20:21] <TimToady> also helps catch design errors earlier

[20:22] <timotimo> hoelzro: thank you

[20:22] <ChoHag> All I'm really doing now is designing.

[20:22] <ChoHag> It's less coding and more doodling

[20:22] *** telex joined
[20:22] <hoelzro> timotimo: sure thing; I'll endeavor to do nothing this week as well ;)

[20:23] <jnthn> git is probably the best version contorl system for making a mess in, in that it provides you the tools to massage mess into perfection :)

[20:23] <ChoHag> But a very complicated doodle for which I have a vague plan I can't quite define to myself.

[20:23] <TimToady> usually means you're trying to do too many things at once; sometimes adding constraints makes it easier

[20:23] <ChoHag> My wife is an artist, so I tell her I am too but where she uses paint my medium is code.

[20:24] <ChoHag> Usually (thankyou Larry) perl.

[20:24] <timotimo> hoelzro: noted!

[20:25] <ChoHag> I think I sort of have a shape I can hang my ideas off of now though. Things have come together the past few days.

[20:25] <ChoHag> That's why I was able to compare the output from a few different runs.

[20:26] <TimToady> well, speaking of constraints, I'd better go rest my eye for an hour or two...

[20:26] <TimToady> nap &

[20:27] <ChoHag> I'm actualyl quite keen to get this code out, it's just hard to get (and keep) my brain in the right place when I can only really code during a 45 minute packed commute at either end of the day.

[20:28] <ChoHag> This broken process sort of works for now.

[20:30] <ChoHag> That said, jnthn, if you want to try and decipher this mass of twisty little uncommented perl threads (all alike, naturally) you're welcome to a copy.

[20:35] <jnthn> ChoHag: Sure, it's good to have something to go on, and I doubt I need to decipher it all to zone in on the bug, if I'm lucky.

[20:36] <brrt> oh, i might have a suggestion for the create-runner-tool thingy

[20:37] <brrt> it would be /very/ convenient if you could pass the name of a debugger, for instance gdb, as an environment variable

[20:42] *** kaare_ left
[20:43] *** dmol joined
[20:44] *** ajr_ left
[20:51] *** denis_boyun___ joined
[20:51] <timotimo> yes

[20:51] *** fhelmberger left
[20:52] *** cognominal joined
[20:52] *** denis_boyun_ left
[20:53] *** rindolf left
[20:56] *** cognominal left
[21:15] <brrt> yeah, so, we can do that, if you wish :-)

[21:15] <brrt> uhm, i'm going to sleep i think

[21:16] *** brrt left
[21:16] *** Rotwang left
[21:18] *** rurban1 left
[21:31] *** pmurias left
[21:35] *** dmol left
[21:42] *** gfldex left
[21:44] *** iarna left
[21:48] <dalek> specs: 1345614 | (Elizabeth Mattijsen)++ | S03-operators.pod:

[21:48] <dalek> specs: Add Set/Bag/Mix smartmatch candidates to table

[21:48] <dalek> specs: review: https://github.com/perl6/specs/commit/1345614cf6

[21:59] <dalek> rakudo/nom: b87d6a5 | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp:

[21:59] <dalek> rakudo/nom: Naively fix RT #122514

[21:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b87d6a5f58

[21:59] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122514

[22:00] *** ventica2 left
[22:00] *** guru joined
[22:01] *** guru is now known as Guest11185

[22:01] <dalek> rakudo/nom: 969e6c2 | (Elizabeth Mattijsen)++ | src/core/Any.pm:

[22:01] <dalek> rakudo/nom: Prevent using Bool:D as a Matcher for methods also

[22:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/969e6c27b0

[22:01] *** Guest11185 is now known as ajr_

[22:08] *** denis_boyun___ left
[22:12] <masak> 'night, #perl6

[22:12] *** ajr_ left
[22:15] <timotimo> gnite masak!

[22:18] <dalek> roast: ef7e125 | (Elizabeth Mattijsen)++ | S12-enums/misc.t:

[22:18] <dalek> roast: Add tests for RT #122514

[22:18] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122514

[22:18] <dalek> roast: review: https://github.com/perl6/roast/commit/ef7e1258e5

[22:20] *** spider-mario left
[22:24] *** dayangkun joined
[22:27] *** ventica joined
[22:29] *** beastd left
[22:31] *** Psyche^_ joined
[22:35] *** Psyche^ left
[22:39] *** cognome left
[22:43] *** cognome joined
[22:46] *** daxim_ left
[22:46] *** ren1us joined
[22:48] <ren1us> okay, i haven't tried fighting with panda in ages.  when it's complaining about a dependency not being precompiled, even when i've even gone so far as to install that dependency separately, what's the proper thing to do?

[22:52] <ventica> you cannot defeat the kung fu panda... he is the Dragon Warrior...

[22:54] <tadzik> ren1us: what are you trying to install?

[22:55] <ren1us> Compress::Zlib (and then Compress::Snappy when that didn't work), both of which are complaining about NativeCall (which installs without any errors)

[22:55] *** cognome left
[22:57] *** cognome joined
[22:58] <tadzik> interesting

[22:58] *** daxim_ joined
[22:58] <tadzik> ren1us: which backend is that?

[22:58] <ren1us> moarvm

[22:58] <tadzik> it works for me without a problem

[22:58] <tadzik> well, Snappy doesn't but for different reasons

[22:59] <tadzik> I assume everything is fresh and updated?

[22:59] *** lue left
[22:59] <ren1us> panda, yes.  moar i updated about a week and a half ago

[22:59] <ren1us> so if it's outdated it's not by much

[22:59] <tadzik> yeah, mine must be similarly new

[22:59] <tadzik> very strange. Could you maybe try exporting RAKUDO_MODULE_DEBUG=1 and see if that yields some interesting results?

[23:00] <tadzik> I think that's the right name for it

[23:00] <tadzik> I gotta go get some sleep soon, but I can look at the issue tomorrow

[23:04] <sjn> hey, it's pmichaud++ day soon :)

[23:04] <yoleaux> 6 Aug 2014 05:43Z <vendethiel> sjn: well, it actually needs rebasing

[23:05] *** _sri left
[23:08] *** _sri joined
[23:09] *** davido___ left
[23:09] *** anaeem1 left
[23:10] *** davido___ joined
[23:10] *** anaeem1 joined
[23:11] <ren1us> .tell tadzik https://gist.github.com/ren1us/01d724255dd57bbaab31 # panda issues

[23:11] <yoleaux> ren1us: I'll pass your message to tadzik.

[23:16] *** raiph joined
[23:18] *** treehug88 left
[23:19] *** _sri left
[23:20] *** Bucciarati left
[23:20] *** Bucciarati joined
[23:21] *** _sri joined
[23:29] <carlin> ren1us: are you sure you have an updated panda? that error happens on older panda where it compiles the modules to Foo.moarvm and not Foo.pm.moarvm

[23:30] <carlin> "older" meaning more than 10 days old

[23:30] <ren1us> i did $ rakudobrew build-panda about 45 minutes ago

[23:30] <ren1us> so i think it's probably fine

[23:43] *** d4l3k_ joined
[23:43] *** dalek left
[23:44] *** d4l3k_ is now known as dalek

[23:47] *** psch left
[23:48] *** psch joined
[23:58] <timotimo> .o( i wonder if perl6 ought to get a "no autovivification" pragma for performance reasons; it seems like perl5 has one to prevent something like %foo<bar><baz><quux>:exists from creating the hashes in foo<bar> and foo<bar><baz> when checking for quux (and all of its ancestors) to exist )

