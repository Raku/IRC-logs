[00:01] <dalek> perl6-bench: 7877717 | (Geoffrey Broadwell)++ | analyze:

[00:01] <dalek> perl6-bench: Add missing docs for --ignore-compile

[00:01] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/7877717908

[00:01] <dalek> perl6-bench: 9851dbc | (Geoffrey Broadwell)++ | / (2 files):

[00:01] <dalek> perl6-bench: Add perl5/parse-json using JSON::PP

[00:01] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/9851dbc4cb

[00:01] <dalek> perl6-bench: 2252077 | (Geoffrey Broadwell)++ | analyze:

[00:01] <dalek> perl6-bench: Compute an overall 'score' across all tests

[00:01] <dalek> perl6-bench: 

[00:01] <dalek> perl6-bench: The score is computed using the geometric mean of relative rates

[00:01] <dalek> perl6-bench: compared to a reference compiler (the first one in the timings file).

[00:01] <dalek> perl6-bench: It is expressed as "% of reference compiler's overall speed", so the

[00:01] <dalek> perl6-bench: reference compiler has a score of 100; higher is better, so 200 would

[00:01] <dalek> perl6-bench: be twice as fast "overall" compared to the reference.

[00:01] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/22520775f7

[00:06] <timotimo> japhb: the part where you write something like rakudo-moar/foo/bar/baz and it gives you a moarvm-foo, nqp-bar, rakudo-baz (or the other way around)

[00:20] <japhb> timotimo: Ah yes, I understand.  I've added it to my list.  We'll see how far I get on the list before hack day is up.  :-)

[00:28] <timotimo> cool, thanks :)

[00:30] *** atroxaper joined
[00:35] *** atroxaper left
[00:38] *** BenGoldberg left
[00:39] *** BenGoldberg joined
[00:59] *** carlin left
[01:05] *** erkan joined
[01:05] *** erkan left
[01:05] *** erkan joined
[01:14] <japhb> So it turns out the rc-forest-fire crashing is very dependent on board size.  If I do 'perl6 perl6/rc-forest-fire 7 7 100' (where perl6 is r-m) it doesn't crash for me, and goes 100 generations as expected.

[01:14] *** FROGGS_ joined
[01:14] <japhb> But if I change to 8 8, it crashes sometimes, and with 9 9 it crashes reliably and quickly.

[01:18] *** FROGGS left
[01:26] *** Su-Shee left
[01:27] *** klapperl joined
[01:27] *** Su-Shee joined
[01:30] *** klapperl_ left
[01:30] <japhb> Two more tidbits: `perl6 --optimize=0` doesn't change anything about the crash behavior.  Also, when it is flaky (as with 8 8 board size), it either crashes quickly (in the first 2-4 frames), or doesn't crash at all.  There aren't any crashes that happen after after a few dozen frames.

[01:34] *** hoverboard left
[01:37] *** Khisanth left
[01:50] *** Khisanth joined
[02:04] *** rurban left
[02:05] *** ren1us joined
[02:14] <dalek> perl6-bench: 9733fca | (Geoffrey Broadwell)++ | bench:

[02:14] <dalek> perl6-bench: Remove other 'open ... :p' use in bench

[02:14] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/9733fca06b

[02:14] <dalek> perl6-bench: ff533f6 | (Geoffrey Broadwell)++ | bench:

[02:14] <dalek> perl6-bench: Add list-branches and list-tags commands to bench

[02:14] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/ff533f6bad

[02:16] *** rindolf joined
[02:23] <dalek> perl6-bench: ebc6de8 | (Geoffrey Broadwell)++ | analyze:

[02:23] <dalek> perl6-bench: Remove accidently committed debugging output

[02:23] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/ebc6de8c79

[02:25] <dalek> perl6-bench: 3485620 | (Geoffrey Broadwell)++ | analyze:

[02:25] <dalek> perl6-bench: Add missing undef guards in analyze

[02:25] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/3485620607

[02:29] *** thou joined
[02:32] *** atroxaper joined
[02:36] *** atroxaper left
[02:43] *** xragnar left
[02:44] *** xragnar joined
[03:05] *** hoverboard joined
[03:11] <dalek> perl6-bench: 1d5f665 | (Geoffrey Broadwell)++ | analyze:

[03:11] <dalek> perl6-bench: Add a convenience sub for building English lists

[03:11] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/1d5f665af5

[03:11] <dalek> perl6-bench: b90b844 | (Geoffrey Broadwell)++ | analyze:

[03:11] <dalek> perl6-bench: Show summary scores in table view if available

[03:11] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/b90b84401f

[03:30] *** ren1us left
[03:31] *** ren1us joined
[03:48] *** xenoterracide joined
[03:54] *** xenoterracide left
[04:06] *** ren1us left
[04:12] *** Mouq joined
[04:12] <Mouq> o/

[04:16] <dalek> perl6-bench: 4b8acf2 | (Geoffrey Broadwell)++ | timeall:

[04:16] <dalek> perl6-bench: Fix formatting in `timeall --list-variants`

[04:16] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/4b8acf240e

[04:16] <dalek> perl6-bench: 655c508 | (Geoffrey Broadwell)++ | timeall:

[04:16] <dalek> perl6-bench: First step to tracking compiler commit dates

[04:16] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/655c50829d

[04:17] <japhb> And with that, it sounds like hack day is over.

[04:18] <japhb> .tell timotimo Sorry I didn't get all the way to your request, but hopefully the changes today will be useful anyway.  :-)

[04:18] <yoleaux> japhb: I'll pass your message to timotimo.

[04:24] <dalek> doc/redesign: 1cc683c | Mouq++ | lib/Mix.pod:

[04:24] <dalek> doc/redesign: Headings were switched in Mix.pod

[04:24] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/1cc683c549

[04:24] <dalek> doc/redesign: 477f056 | Mouq++ | lib/Mix.pod:

[04:24] <dalek> doc/redesign: Merge branch 'master' into redesign

[04:24] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/477f0561b5

[04:24] <dalek> doc/redesign: f69d8bd | Mouq++ | html/css/style.css:

[04:24] <dalek> doc/redesign: Make selected menu-item more distinct

[04:24] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/f69d8bd66a

[04:24] <dalek> doc/redesign: de6db9d | Mouq++ | lib/ (336 files):

[04:24] <dalek> doc/redesign: Move type docs to lib/Type and lang docs to lib/Language

[04:24] <dalek> doc/redesign: 

[04:24] <dalek> doc/redesign: (htmlify.p6 is not yet updated for this change)

[04:25] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/de6db9da51

[04:25] <Mouq> japhb++

[04:26] *** BenGoldberg left
[04:33] *** atroxaper joined
[04:35] *** pulkit joined
[04:38] *** atroxaper left
[04:38] *** pulkit_ joined
[04:40] *** pulkit left
[04:40] *** kaare_ joined
[04:45] *** pulkit_ left
[04:47] *** telex left
[04:48] *** telex joined
[04:57] <dalek> doc/redesign: 9557eb6 | Mouq++ | / (3 files):

[04:57] <dalek> doc/redesign: Adjust htmlify.p6 to account for moved docs

[04:57] <dalek> doc/redesign: 

[04:57] <dalek> doc/redesign: Still needs some abstracting to deal with the hypothetical lib/Routine

[04:57] <dalek> doc/redesign: and lib/Module dirs, but this works fine for now

[04:57] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/9557eb6899

[05:01] <Mouq> That's all I'm doing tonight. I had a long day

[05:01] <Mouq> \o

[05:01] *** Mouq left
[05:04] *** xenoterracide joined
[05:06] *** hoverboard left
[05:14] *** xenoterracide left
[05:17] *** xenoterracide joined
[05:24] *** xenoterracide left
[05:50] *** darutoko joined
[06:24] *** mj41 joined
[06:31] *** mj41 left
[06:35] *** atroxaper joined
[06:40] *** atroxaper left
[06:41] *** Pleiades` left
[06:45] *** Pleiades` joined
[07:06] *** FROGGS_ left
[07:26] *** FROGGS[mobile] joined
[07:31] *** [Sno] left
[07:31] *** [Sno] joined
[07:36] <moritz> Mouq++

[07:46] *** Rotwang joined
[07:51] *** Rotwang left
[07:51] *** FROGGS[mobile] left
[07:55] *** anaeem1 joined
[08:05] *** Rotwang joined
[08:27] <masak> antenoon, #perl6

[08:33] *** anaeem1 left
[08:33] *** virtualsue joined
[08:39] *** SevenWolf left
[08:39] *** virtualsue left
[08:40] *** anaeem1_ joined
[08:42] *** itz joined
[09:01] *** thou left
[09:08] *** spider-mario joined
[09:11] *** itz left
[09:21] *** lizmat joined
[09:23] <lizmat> good *, #perl6!

[09:23] <lizmat> timotimo: could it be that you forgot to commit Missing test file: t/spec/S17-supply/zip_latest.t to roast ?

[09:46] *** mj41 joined
[09:47] *** kurahaupo left
[09:52] *** Psyche^ left
[09:53] *** Psyche^ joined
[09:56] <dalek> roast: 00f7e30 | (Timo Paulssen)++ | S17-supply/zip_latest.t:

[09:56] <dalek> roast: commit missing file.

[09:56] <dalek> roast: review: https://github.com/perl6/roast/commit/00f7e30053

[09:57] <timotimo> my apologies

[09:57] <yoleaux> 04:18Z <japhb> timotimo: Sorry I didn't get all the way to your request, but hopefully the changes today will be useful anyway.  :-)

[10:01] *** kurahaupo joined
[10:04] <timotimo> that's all right :)

[10:13] <jnthn> ==> Bootstrapping Panda

[10:13] <jnthn> No such method 'path' for invocant of type 'CompUnitRepo::Local::Installation' in method destdir at C:\consulting\perl6\panda\lib/Panda/Installer.pm:22

[10:13] <jnthn> :(

[10:25] *** anaeem1_ left
[10:26] <timotimo> isn't git pull enough to fix that?

[10:29] <jnthn> seems not

[10:29] *** carlin joined
[10:29] <jnthn> Have latest Panda and Rakudo.

[10:29] <timotimo> dang.

[10:30] <carlin> that panda failure was caused by non-existant libs being removed from @*INC

[10:30] <timotimo> which one is that?

[10:31] <carlin> http://irclog.perlgeek.de/perl6/2014-06-14#i_8873146

[10:31] <timotimo> the one you reporte or the one jnthn just ran into?

[10:31] <timotimo> ah, yes

[10:31] <carlin> they're the same one

[10:31] <timotimo> did lizmat answer about that yet?

[10:31] <jnthn> I think she said she'd look at it today

[10:31] <timotimo> good

[10:34] *** rindolf left
[10:38] <lizmat> fixing now

[10:46] *** dmol left
[10:47] *** anaeem1_ joined
[10:54] <dalek> rakudo/nom: 6572438 | (Elizabeth Mattijsen)++ | src/core/Inc.pm:

[10:54] <dalek> rakudo/nom: Quick fix for panda breakage

[10:54] <dalek> rakudo/nom: 

[10:54] <dalek> rakudo/nom: Instead of not setting %CUSTOM_LIB<foo> if the directory does not exist,

[10:54] <dalek> rakudo/nom: it will now just put the path in there (rather than the instantiated

[10:54] <dalek> rakudo/nom: CURL object like before I broke panda).

[10:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6572438a47

[10:55] <lizmat> hope that this fixes things

[10:55] <lizmat> if not, I guess I'll have to revert these patches  :-(

[10:55] <vendethiel> lizmat: did you actually found out why that duplicated function was there :P ?

[10:56] <lizmat> no

[10:56] <carlin> hmm no

[10:56] <lizmat> doesn't fix?

[10:56] <carlin> I was getting that error jnthn was too but it looks like it was a different problem

[10:57] <carlin> introduced in eb1d2fdb I think

[10:57] *** SHODAN left
[10:57] <lizmat> that would be strange

[10:58] <lizmat> that commit is merely putting identical code into a role and using composing it into the classes

[10:59] *** SHODAN joined
[11:01] <carlin> This is perl6 version 2014.05-179-geb1d2fd built on MoarVM version 2014.05-18-g6b19b4b

[11:01] <carlin> > %*CUSTOM_LIB<site>.path

[11:01] <carlin> Method 'path' not found for invocant of class 'CompUnitRepo::Local::Installation'

[11:02] <carlin> This is perl6 version 2014.05-178-g4d0bdd9 built on MoarVM version 2014.05-18-g6b19b4b

[11:02] <carlin> > %*CUSTOM_LIB<site>.path

[11:02] <carlin> IO::Path</home/carlin/rakudo/install/languages/perl6/site>

[11:11] <dalek> rakudo/nom: 331bfc8 | (Elizabeth Mattijsen)++ | src/core/Inc.pm:

[11:11] <dalek> rakudo/nom: Oops, missed one priming with path

[11:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/331bfc82bb

[11:11] <dalek> rakudo/nom: 7f22e92 | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo/Locally.pm:

[11:11] <dalek> rakudo/nom: Expose CUR::Locally.path

[11:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7f22e9221e

[11:11] <lizmat> carlin: this seems to fix that for me

[11:11] <lizmat> $ 6 'say %*CUSTOM_LIB<site>.path'

[11:11] <lizmat> IO::Path</Users/liz/Github/rakudo.moar/install/languages/perl6/site>

[11:13] <lizmat> so, this means that %*CUSTOM_LIB is either populated with an instantiated CURL object (that now allows .path)

[11:13] <lizmat> or it is just a Str (which also allows .path)

[11:14] <lizmat> @*INC just contains the CURL objects of directories that actually exist at startup time

[11:15] *** kurahaupo left
[11:15] <carlin> yip all works here now

[11:15] <carlin> lizmat++

[11:26] *** pippo joined
[11:26] <pippo> grammar G {rule TOP {^AA' '<one> <two> <three>$}; regex one {[\w+' ']*}; regex

[11:27] <timotimo> that's not all of it, is it? :)

[11:27] <pippo> grammar G {rule TOP {^AA' '<one> <two> <three>$}; regex one {[\w+' ']*}; regex two {''||[\w+' ']*}; regex three {[\w+' ']+}}; say G.parse("AA 111 11 11    3 3 333 "); 

[11:27] <pippo> m: grammar G {rule TOP {^AA' '<one> <two> <three>$}; regex one {[\w+' ']*}; regex two {''||[\w+' ']*}; regex three {[\w+' ']+}}; say G.parse("AA 111 11 11    3 3 333 "); 

[11:27] <camelia> rakudo-moar fe867d: OUTPUT«｢AA 111 11 11    3 3 333 ｣␤ one => ｢111 11 11 ｣␤ two => ｢｣␤ three => ｢3 3 333 ｣␤␤»

[11:28] <timotimo> well, that certainly looks like it worked :)

[11:28] <pippo> timotimo: no it was not :-))

[11:28] <timotimo> in that case i don't know what the problem is :)

[11:30] <pippo> .tell mouq: I found the solution for http://irclog.perlgeek.de/perl6/2014-06-10#i_8850807 see http://irclog.perlgeek.de/perl6/2014-06-15#i_8873951

[11:30] <yoleaux> pippo: What kind of a name is "mouq:"?!

[11:30] <pippo> .tell mouq I found the solution for http://irclog.perlgeek.de/perl6/2014-06-10#i_8850807 see http://irclog.perlgeek.de/perl6/2014-06-15#i_8873951

[11:30] <yoleaux> pippo: I'll pass your message to mouq.

[11:32] <pippo> .tell PerlJam I found the solution for http://irclog.perlgeek.de/perl6/2014-06-10#i_8850807 see http://irclog.perlgeek.de/perl6/2014-06-15#i_8873951

[11:32] <yoleaux> pippo: I'll pass your message to PerlJam.

[11:34] <lizmat> .tell FROGGS I'm starting to wonder whether %*CUSTOM_LIB should live in core at all

[11:34] <yoleaux> lizmat: I'll pass your message to FROGGS.

[11:36] <pippo> m: grammar G {rule TOP {^AA' '<one> <two> <three>$}; regex one {[\w+' ']*}; regex two {''||[\w+' ']*}; regex three {[\w+' ']+}}; say G.parse("AA 111 11 11  2 2 222   3 3 333 "); 

[11:36] <camelia> rakudo-moar fe867d: OUTPUT«｢AA 111 11 11  2 2 222   3 3 333 ｣␤ one => ｢111 11 11 ｣␤ two => ｢2 2 222 ｣␤ three => ｢3 3 333 ｣␤␤»

[11:39] *** atroxaper joined
[11:43] *** atroxaper left
[11:55] *** mj41 left
[12:12] *** vendethiel left
[12:14] *** vendethiel joined
[12:25] <masak> https://rt.perl.org/Ticket/Display.html?id=122095 is due to Moar's being a moving GC, right?

[12:25] <masak> I *think* I agree that it's a bug.

[12:30] <vendethiel> masak: isn't WHICH used for objects when used as indexes ?

[12:31] *** anaeem1_ left
[12:34] <masak> yes, exactly.

[12:34] <masak> they're supposed to persist across an object's lifetime.

[12:34] * masak looks for support for that in the spec

[12:35] <masak> S12-objects.pod:    WHICH       the object's identity value

[12:37] <masak> the appropriate section about .WHICH and ObjAt in S02 seems to have been penned without any consideration of copying GCs.

[12:46] <lizmat> TimToady assured that .WHICH should be immutable for the lifetime of an object

[12:46] <lizmat> the other day

[12:47] <lizmat> so I think we will need some lazy .WHICH setting

[12:47] <lizmat> that, once set, will not change

[12:48] <lizmat> imo, this could be as simple as a CASsed global counter

[12:48] <lizmat> in pseudo code:  method WHICH { $!WHICH = cas(++$counter) }

[12:49] <lizmat> or rather:  method WHICH { int64 $!WHICH ||= cas(++$counter) }

[12:50] <vendethiel> could be a problem if you query the moved one after

[12:51] *** cognominal joined
[12:51] <vendethiel> i.e. : you have `$a = A.new; $b = A.new;`, you call `$a.WHICH` and its WHICH gets set. Then it gets moved, and `$b` gets moved at `$a`'s place

[12:51] <vendethiel> ($a's old place). Now, you have a duplicated WHICH, don't you ?

[12:52] <lizmat> no, because the counter is  completely independent, it's just monotonously increasing

[12:52] <masak> no, because $!WHICH would be an attribute inside the moved object, not related to the memory address at all.

[12:52] <lizmat> the $counter just starts at 0, assigning 1 to the first object of which the .WHICH is requested

[12:55] <lizmat> by just putting a counter in there, we would not be duplicating the .WHAT info in the .WHCIH

[12:55] <lizmat> which could be considered a win

[12:55] <lizmat> also, for Sets, Bags, Mixes, that depend on the .WHICH

[12:56] <lizmat> we might also have a win there

[12:57] <lizmat> the only pb with this approach, is if we get more than 9223372036854775807 different objects that have their .WHICH called during the lifetime of a process

[12:58] *** Woodi joined
[12:59] *** anaeem1 joined
[12:59] <lizmat> to prevent racing issues, we maybe would need to have a counter per OS thread

[12:59] <TimToady> at that point you'd have a 1 in 9223372036854775807 chance of a collision :)

[13:00] <lizmat> yup, much less than now  :-)

[13:01] <lizmat> perhaps use the top 16 bits for thread ID

[13:01] *** guru joined
[13:01] <lizmat> which could have its debugging uses as well

[13:01] *** guru is now known as Guest63815

[13:02] *** Guest63815 is now known as ajr_

[13:03] <dalek> nqp/qast_refactor: 724fff6 | jnthn++ | / (3 files):

[13:03] <dalek> nqp/qast_refactor: Split QAST node children out into a role.

[13:03] <dalek> nqp/qast_refactor: review: https://github.com/perl6/nqp/commit/724fff60c4

[13:03] <dalek> nqp/qast_refactor: b025b96 | jnthn++ | / (5 files):

[13:03] <dalek> nqp/qast_refactor: Avoid direct QAST::Node usage.

[13:03] <dalek> nqp/qast_refactor: 

[13:03] <dalek> nqp/qast_refactor: In some places we used it just to hold children; have a QAST::NodeList

[13:03] <dalek> nqp/qast_refactor: to play that role.

[13:03] <dalek> nqp/qast_refactor: review: https://github.com/perl6/nqp/commit/b025b969a6

[13:03] <dalek> nqp/qast_refactor: a3e24d5 | jnthn++ | src/QAST/ (20 files):

[13:03] <dalek> nqp/qast_refactor: Re-structure QAST nodes and their creation.

[13:03] <dalek> nqp/qast_refactor: review: https://github.com/perl6/nqp/commit/a3e24d57f1

[13:03] <dalek> nqp/qast_refactor: 2147886 | jnthn++ | src/QRegex/P6Regex/Optimizer.nqp:

[13:03] <dalek> nqp/qast_refactor: Robustness fix to regex optimizer.

[13:03] <dalek> nqp/qast_refactor: review: https://github.com/perl6/nqp/commit/2147886644

[13:03] *** anaeem1 left
[13:08] *** itz joined
[13:08] *** itz left
[13:24] *** zakharyas joined
[13:25] *** itz joined
[13:26] *** amirite joined
[13:26] <amirite> i'm sad

[13:27] * lizmat hugs amirite 

[13:27] * amirite just googled perl 6 and realized the likeliness of becoming a perl refugee is strong

[13:29] <vendethiel> mmh ?

[13:30] * vendethiel reads http://www.perlmonks.org/?node_id=387411 and grins

[13:31] <amirite> perl 5 has limitations that need to be formally resolved but never will (like proper oo encapsulation), perl 6's production release isn't likely to happen any time soon if ever, in the interim kids need shoes and family needs to eat

[13:31] <amirite> looks like i'll have to get into ruby or java and will forget about perl

[13:31] <amirite> which is sad because i love the idiomatic expressiveness of this language

[13:32] <amirite> and how easy it is to get things done

[13:32] <vendethiel> amirite: i'm using p6 in production and doing good, thanks :)

[13:32] * vendethiel actually gave a talk about this yesterday

[13:34] *** mj41 joined
[13:36] <xfix> amirite: Perl 5 only lacks private properties, if this is what you care about.

[13:36] <xfix> Byt neither does JavaScript have them.

[13:36] <vendethiel> so does JS, that doesn't prevent it from being used

[13:37] * vendethiel remembers maddingue yesterday : "js is for hipsters"

[13:37] <itz> is your talk likely to appear on youtube?

[13:37] <vendethiel> itz: my talk is in french :)

[13:37] <itz> oh

[13:37] <vendethiel> (but yes, it'll appear on youtube)

[13:38] <masak> amirite: I'm using Perl 6 every day, for purposes that ultimately put food on my family. I agree there is work to be done, but I'm neither hopeful nor resigned about it. just ready to help.

[13:38] <itz> my French is of the "oou est la vache?" level :)

[13:39] <xfix> Private methods in Perl 5 can be done with my $private = sub { ... };, and called with $object->$private.

[13:39] <xfix> If this isn't a private method for you, then I don't know what is.

[13:40] <masak> xfix: I wouldn't have objected if you hadn't said that last part.

[13:40] <masak> xfix: Perl 5 needs a lot of things, but vehement defending of its shortcomings is not one of them :)

[13:40] <masak> xfix: please tone down the defensive rationalization.

[13:40] * vendethiel doesn't know what perl 5 needs

[13:41] <vendethiel> I have a book about what it's got

[13:41] <cognominal> woolfy++ for that

[13:41] <xfix> Yes, I know it doesn't have private properties.

[13:42] <xfix> And Perl 5 should have them. It's not about privacy, but about encapsulation.

[13:42] <vendethiel> oh, woolfy++ and lizmat++ quite a bit.

[13:42] <masak> I'm at a point on my OO journey where I don't *care* much about private object attributes. (that is, I morally agree with Perl 5 and JavaScript's design choice there.)

[13:42] <woolfy> :-)

[13:42] <vendethiel> (cognominal++ too, sure ;).)

[13:42] <cognominal> Sometimes beeing pushy is good. :)

[13:42] <vendethiel> masak: I'm at a point on my OO journey where I don't care about OO :P

[13:42] <masak> but I can totally side with someone who says that Perl 5 (and JavaScript) don't have private attributes.

[13:43] <woolfy> vendethiel: you did not have a book about Perl at all; the book Programming Perl by our illustrious firestarter can show you how it is done in Perl 5, not how you should do it in Perl 6...

[13:43] <masak> and protesting that they can be easily emulated is (a) a bit irreverent, and (b) largely immaterial.

[13:43] <xfix> They cannot be easily emulated.

[13:44] <xfix> Unless you want some name convention to avoid conflicts.

[13:44] <masak> xfix: function closures.

[13:44] <itz> doesn't the  inside-out OO have proper private methods in perl 5?

[13:44] <masak> yes.

[13:44] <mj41> Hi. Does it make sense to use Qc as baseground for simple p6 template toolkit? My prototype here https://github.com/mj41/SP6

[13:45] <xfix> masak: Those are private methods, not private attributes.

[13:45] <masak> xfix: what part of the word "emulated" did you overlook?

[13:45] <masak> vendethiel: I'm increasingly realizing that the best kinds of OO are heavily influenced by immutability, memoization, proper tail recursion and referential transparency.

[13:46] <vendethiel> masak: ... or just "good data structures"

[13:46] <masak> :)

[13:46] <xfix> You can emulate private methods with some arbitrary naming convention.

[13:46] <xfix> Python does that for its __ properties.

[13:46] <xfix> Private attributes*

[13:46] <masak> I'd call that a leaky abstraction, since anyone who would want to mutate such a "private" attribute would be able to.

[13:46] <masak> and some people would be tempted to.

[13:47] <xfix> This is not a real issue for me. Just don't do it.

[13:48] <dalek> rakudo/qast_refactor: 6d23540 | jnthn++ | src/Perl6/Actions.nqp:

[13:48] <dalek> rakudo/qast_refactor: Changes to match NQP qast_refactor branch.

[13:48] <dalek> rakudo/qast_refactor: review: https://github.com/rakudo/rakudo/commit/6d23540d20

[13:49] <woolfy> mj41: maybe ask your question again?  (I cannot answer it)

[13:49] <masak> xfix: you may well take that position. but contrast it with function closures, where the language doesn't *allow* you to cheat.

[13:50] <masak> xfix: given that, I'd call the emulation using function closures "real" and the emulation using a '__' prefix "fake".

[13:51] <vendethiel> well, at the same time, you can actually have private properties in JS (two different ways, and a "real" one coming into ES6)

[13:53] <masak> vendethiel: two ways? which is the other one?

[13:54] <vendethiel> masak: solution #1 : `function Car () { this.setSpeed = function (s) { speed = s }; var speed; }`

[13:55] <mj41> woolfy: Simple template system is useful for many use cases. And for me the really easy way is to use say Qc 'html { $title } html ...'. So I did a prototype.

[13:56] <masak> mj41: make sure you add it to the ecosystem.

[13:56] <mj41> woolfy: Pull requests, patches and forks welcome  https://github.com/mj41/SP6

[13:57] <mj41> masak: ok, I'm going to try

[13:58] <xfix> masak: in Python, properties starting with __ are special.

[13:59] <cognominal> vendethiel: the language I was talking about yesterday was indeed idris, and specifically this paper.  http://eb.host.cs.st-andrews.ac.uk/drafts/eff-tutorial.pdf

[13:59] <cognominal> I am getting old, my memory is not so good :(

[13:59] <xfix> They are converted to something like __UniqueClassName_property.

[13:59] <vendethiel> masak: solution #2 : https://gist.github.com/Nami-Doc/8f90d2fb43dc453c77b0

[13:59] <vendethiel> cognominal: so I was right :D

[13:59] <cognominal> yes, you were.

[14:06] *** dayangkun joined
[14:08] *** pippo left
[14:08] *** kaare_ left
[14:10] <amirite> http://www.google.com/trends/explore#q=%2Fm%2F06ff5%2C%20%2Fm%2F05zrn&cmpt=q

[14:13] <amirite> i think we can conclude "perl" is not going to be a relevant term in the web application industry after 2 or 3 years unless perl 6 becomes official within the next year

[14:13] <lizmat> cycling&

[14:15] <masak> vendethiel: firstly, I find your depending on variable/function hoisting and using variables before declaring them confusing. a matter of tastes, I guess.

[14:15] *** hoverboard joined
[14:15] <vendethiel> masak: I just wrote them in incorrect order and didn't fix it because laziness :)

[14:15] <masak> vendethiel: secondly, given that the first solution exists, why would I ever want to use the second?

[14:15] <vendethiel> masak: because performance-wise, attaching functions to an instance is pretty bad.

[14:15] <masak> oh, good point.

[14:15] <masak> vendethiel++

[14:18] <cognominal> amirite: Perl will be the relevant term in web programming when we get Perl 6 in browsers so that people can eventually have their favorite dynamic language in the browser, written In Perl 6. This will certainly take more than one year. Which is not a probleme because ES6 will do no better   :)

[14:18] <cognominal> hubris++

[14:18] <timotimo> oh yikes

[14:21] *** hoverboard left
[14:21] <masak> I may not agree with cognominal's hopeful future projection, but I'm glad we have people in the community who hope for that, and work towards that.

[14:22] <amirite> if i complain anymore i'll just be trolling, in the meantime i'm finding mastering algorithms with perl to be excellent reading

[14:23] * amirite brushes up on algorithms instead of focusing on languages because those never die

[14:24] <cognominal> People think about the future with all thing being equal. The point is to change things. And I may even be too conservative about Perl 6 in the web. Who know if the web will be still the dominant thing in 15 years.

[14:25] <cognominal> The future is not extrapolating curves ahead. That would be boring.

[14:26] *** erkan left
[14:26] *** molaf joined
[14:27] * amirite forecasts the internet in the future will be called the BNN, or The Big Neural Network -- and rather than accessing resources as web pages predominantly, the predominant resource will be augmented reality applications that get fed into your eye(s) and interfaced by eye movements, body movements, and speech

[14:28] <amirite> and food will be 3d printed, delivered to your table by amazon.com drones

[14:28] <amirite> and cars will have no drivers

[14:29] <amirite> and an entire generation of people will be autistic because they were completely neglected as kids by parents who were enraptured by their technology and too busy staring at their smart phones and google glass to pay attention to them

[14:30] <vendethiel> I don't want your future

[14:30] <amirite> the future is now

[14:31] *** ren1us joined
[14:31] <vendethiel> no.

[14:32] <cognominal> good luck with no drivers in Paris. It's one thing to teach computers to drive in Mountain View, another in Paris.  Streets are narrow, obstacles are not marked, people acts randomly, and they are proud to be at the wheel even if it means blocking the traffic for hours by getting stuck in intersections.

[14:33] <cognominal> But I certainly want no human drivers in Paris; that would be so peaceful.

[14:34] <timotimo> the coolest thing about the driverless car thing to me is reducing the amount of cars sitting around unused

[14:34] <atta> cognominal: hehe!

[14:35] <timotimo> and with a clever service behind the whole thing, travels could even be coordinated so that you get from A to B hopping between 3 different cars that just happen to share a part of the way or something like that

[14:36] <carlin> driverless cars aren't futureistic enough for me, I want to see breakthroughs in teleportation

[14:36] <timotimo> and proper car-to-car communication can enhance safety by a huge margin; the delay between the car before you braking and your car braking could be turned down to just miliseconds

[14:36] <amirite> yeah startups are all the rage right now

[14:36] <amirite> and will be for a while to come

[14:37] <amirite> there is so much room for innovation, there is something like a renaissance happening

[14:37] <cognominal> timotimo: we have autolib in Paris. It works even if they need some clue from Apple for their web site which is a visual agression. https://www.autolib.eu/en/

[14:39] <timotimo> cognominal: in germany, there's things like "stadtmobil" where multiple stations are spread throughout cities where you can - as a member - reserve and then drive cars around

[14:39] <amirite> the problem with driverless cars is what happens in the interim while some have drivers and some don't, i.e. a semi-truck coming at you head-on -- does your car turn left, killing the person sitting on the passenger side, or right, killing you sitting on the driver side?

[14:39] <timotimo> so it's probably similar

[14:39] <timotimo> amirite: driverless cars can see an amazing amount of distance ahead and theoretically, erratic driving could be predicted to some extent

[14:40] <cognominal> Also in Europe, research is more about assembling driverless in convoy that being each one on their own. That's make more sense..

[14:40] *** mj41 left
[14:40] <timotimo> aye

[14:40] <amirite> yeah i guess that's exactly right timo

[14:40] <timotimo> the cool thing is if such a truck is approaching a blob of driverless cars, they can react as "one unit" and perform maneouvers no human could pull off

[14:43] <timotimo> for example, they could drive extremely close next to each other to make a big amount of space for obstacles to pass through without crashing into each other or pushing each other off

[14:44] *** colomon joined
[14:44] <timotimo> and if the theoretical truck that's coming straight at the cars is in an "in between" state between regular car and driverless car, it could perhaps already be publishing its telemetry data to nearby cars, thus allowing even better planning

[14:44] * colomon 's computer is going to be at the shop long enough he installed IRC on his wife's machine

[14:44] <timotimo> etc etc.

[14:45] <timotimo> o/ colomon

[14:45] <colomon> \o

[14:47] * colomon is also installing xcode and perlbrew, so he can install rakudobrew.  :)

[14:47] *** trap0 joined
[14:52] *** betterworld joined
[14:52] *** trap0 left
[14:53] *** trap0 joined
[14:54] *** virtualsue joined
[15:00] *** hoverboard joined
[15:00] *** ajr_ left
[15:00] *** guru joined
[15:01] *** guru is now known as ajr_

[15:02] *** btyler joined
[15:03] <ajr_> I'm surprised that no-one's tried driverless trucks in mining operations; the huge ones that grind backwards and forwards from pit to mill.

[15:04] <timotimo> that'd seem like a difficult environment to work with

[15:04] <timotimo> as in: streets are somewhat smooth

[15:04] <timotimo> underground mines might be much rougher to navigate through

[15:04] <ajr_> They're very expensive, companies have problems getting responsible drivers to live in the desperate places mines tend to happen.

[15:05] <timotimo> mhm

[15:05] <ajr_> And the job's very boring.

[15:05] <ajr_> Traffic's minimal, the route's repetitive.

[15:06] <ajr_> The fact that the roads are unpaved is only a problem for the suspension, not guidance.

[15:06] <timotimo> OK, fair enough

[15:06] <ajr_> It would be no big deal to put in stakes or something for the sensors to detect. (Or just plot it on GPS.)

[15:07] <timotimo> GPS in mines?

[15:07] <ajr_> No, these are surface operations.

[15:07] <timotimo> ah, ok

[15:07] *** trap0 left
[15:08] <ajr_> Mines would be really easy to set up as routes.

[15:08] *** JimmyZ_ joined
[15:22] *** dmol joined
[15:24] *** kaare_ joined
[15:28] <masak> lizmat: I'm wondering whether the .WHICH solution shouldn't be MoarVM-specific. Parrot and JVM don't have this problem, and it feels weird to introduce a solution that will cost performance for them.

[15:34] *** ren1us left
[15:44] *** atroxaper joined
[15:51] *** atroxaper left
[15:51] *** xinming_ joined
[15:54] *** atroxaper joined
[15:54] *** xinming left
[15:55] *** atroxaper left
[15:55] *** JimmyZ_ left
[15:58] <jnthn> masak: JVM does have it too.

[15:58] <jnthn> masak: but it'll want a different solution

[15:59] <masak> oki

[16:03] *** itz left
[16:03] <dalek> nqp/qast_refactor: baacde8 | jnthn++ | src/QAST/Unquote.nqp:

[16:03] <dalek> nqp/qast_refactor: Fix copy-pasto in QAST::Unquote.

[16:03] <dalek> nqp/qast_refactor: review: https://github.com/perl6/nqp/commit/baacde8630

[16:17] *** hoverboard left
[16:23] *** dayangkun left
[16:24] *** molaf_ joined
[16:27] *** molaf left
[16:29] *** pippo_ joined
[16:39] *** dmol left
[16:43] *** erkan joined
[16:43] *** erkan left
[16:43] *** erkan joined
[16:58] *** ajr_ left
[17:06] *** thou joined
[17:07] <ChoHag> I have a channel which I work through with for $!Q.list -> $item { ... }

[17:07] <ChoHag> How can I combine that with winner so that it loops through two channels?

[17:07] <ChoHag> Taking items off whichever is first.

[17:08] <timotimo> do we have combinators for channels?

[17:08] <jnthn> That's what the winner construct is for

[17:09] *** wingfold joined
[17:09] *** liztormato joined
[17:09] <timotimo> ah, of course

[17:09] *** liztormato left
[17:10] <ChoHag> Ah S17 has 'winner * { more @channels { ... } }'

[17:10] <ChoHag> Can I just do more ($priority, $regular) { ... }?

[17:11] <ChoHag> Or do something with this:

[17:11] <ChoHag>     for @$channel -> $val { ... }

[17:12] <timotimo> i think you can ask a channel if it has a value and wait for values to be available with Promise.anyof(Channel1.new_value_promise_thingie, Channel2.new_value_promise_thingie)

[17:12] <timotimo> and then prioritize the one channel over the other

[17:13] *** Sqirrel joined
[17:13] *** SamuraiJack joined
[17:13] <ChoHag> The only mention of promise I see aroudn channels is in response to the channel being closed.

[17:14] * timotimo has, sadly, not used channels a lot yet

[17:18] *** colomon left
[17:18] *** zakharyas left
[17:30] *** colomon joined
[17:32] *** btyler left
[17:33] *** rindolf joined
[17:36] *** FROGGS joined
[17:36] <FROGGS> o/

[17:36] <yoleaux> 11:34Z <lizmat> FROGGS: I'm starting to wonder whether %*CUSTOM_LIB should live in core at all

[17:40] *** SamuraiJack left
[17:49] <sergot> o/

[17:51] <FROGGS> .tell lizmat is there another way to get your hands on the CURL of 'home', 'site', 'vendor' or 'perl'? I mean, on a specific one?

[17:51] <yoleaux> FROGGS: I'll pass your message to lizmat.

[17:59] *** anaeem1 joined
[18:03] *** anaeem1 left
[18:23] *** dmol joined
[18:29] *** colomon left
[18:38] *** zakharyas joined
[18:38] *** colomon joined
[18:38] <zengargoyle> with the CompUnitRepo stuff, i was wondering if POD in a compiled module requires the module to load before something like p6doc or --doc could get at it.

[18:39] <zengargoyle> and if plain .pod files were meant to live in the library-ish paths like they do in p5

[18:40] *** mj41 joined
[18:40] *** mj41 left
[18:41] <zengargoyle> how would one get the POD out of a compiled module if they were missing a dependency required to load the module?

[18:43] <FROGGS> rakudo's core modules do not use the CompUnitRepo

[18:43] <FROGGS> they use the original file/dir based module loader

[18:44] <zengargoyle> the p6doc module broke when @*INC went from a Str to a CURL thingy

[18:45] *** bcode joined
[18:46] <zengargoyle> although it's p6doc is probably hackish ATM

[18:47] <FROGGS> is it exploding here? https://github.com/perl6/doc/blob/master/bin/p6doc#L28

[18:47] <FROGGS> the it would just need to stringify first

[18:48] <FROGGS> at least it does not seem to load Perl6::Pod, which is an nqp-module

[18:48] <FROGGS> (and is about Pod parsing)

[18:50] <zengargoyle> haven't looked recently, but i think that was the place.  i remember looking and seeing that @*INC actually being an object instead of a string was a recent change.

[18:50] *** colomon left
[18:50] <zengargoyle> and looking at CURL and not finding a method to get a Str back

[18:52] <FROGGS> it has a method Str

[18:52] <FROGGS> m: say CompUnitRepo::Local::File.^methods

[18:52] <camelia> rakudo-moar 7f22e9: OUTPUT«install files candidates new BUILD Str gist perl <anon> <anon>␤»

[18:52] <zengargoyle> it mignt now. :)

[18:52] <FROGGS> it had from the beginning :o)

[18:52] <FROGGS> m: say @*INC[0].Str

[18:52] <camelia> rakudo-moar 7f22e9: OUTPUT«/home/p6eval/rakudo-inst-2/languages/perl6/lib␤»

[18:54] <zengargoyle> i seem to recall looking and the Str was on an array like thing, so you could get '/a/path /a/nother/path' from Str instead.

[18:54] <zengargoyle> and would have to split and hassle with spaces in paths etc.

[18:55] <FROGGS> ahh true

[18:55] *** mj41 joined
[18:55] <FROGGS> like since two weeks we only have one thingy per CURL

[18:55] <zengargoyle> like one CURL object could handle multiple paths being primarily used for just passing a module and getting it loaded.

[18:55] <zengargoyle> not for searching and returning locations..

[18:55] <zengargoyle> ok. gotcha

[18:56] <zengargoyle> still, POD in compiled modules would require loading the module yes?

[18:56] <zengargoyle> i'm trying to grok how something like perldoc would work.

[18:56] <FROGGS> when you put Pod (or comments) into a module, the parser needs its Pod module to parse it, that's all

[18:57] <FROGGS> Pod is available as objects also

[18:57] <zengargoyle> but how would you load the module if you were missing a dependency

[18:58] <FROGGS> look at S26:1

[18:58] <synopsebot> Link: http://perlcabal.org/syn/S26.html#line_1

[18:59] <FROGGS> I think you can ask a module to dump its Pod, but I'm not sure

[19:00] <FROGGS> ahh, p6doc extracts things from source files that look like Pod

[19:00] <FROGGS> hackish, aye :o)

[19:01] <zengargoyle> i'm thinking you only have Term/ANSIColor.moarvm (and not Term/ANSIColor.pm).

[19:01] <zengargoyle> the POD is in the .moarvm file yes.

[19:01] <zengargoyle> but say Term/ANSIColor.moarvm needs Term.moarvm which you don't have.

[19:02] <FROGGS> when you install stuff via panda you always install both the .pm and .moarvm

[19:02] <zengargoyle> so you can't load ANSIColor to get to the POD.

[19:02] <zengargoyle> yes, i'm being theoretical. :P

[19:02] <FROGGS> so you have to scan the .pm for Pod like lines... like what p6doc does

[19:02] <FROGGS> yeah...

[19:03] <FROGGS> seems like the only (not very ideal) way

[19:03] <zengargoyle> and just questioning if plain .pod files are supposed to go in languages/perl6/site/lib like places in the first place.

[19:04] <zengargoyle> like perl5 does searching for .pod / .pm in the same places.

[19:05] <zengargoyle> like if you module had Manual.pod Introduction.pod etc. type of doc

[19:07] <FROGGS> the pod could be installed to a virtual /doc directory, because CompUnitRepo::Local::Installation will most likely do not store things plain on a filesystem

[19:10] * lizmat is back

[19:10] <yoleaux> 17:51Z <FROGGS> lizmat: is there another way to get your hands on the CURL of 'home', 'site', 'vendor' or 'perl'? I mean, on a specific one?

[19:11] <lizmat> FROGGS: the CURL of a specific directory is a sentinel: there is only one object for a given path

[19:11] <FROGGS> lizmat: but how do you get the object for 'site'?

[19:11] <lizmat> ah, ok, that way...  

[19:11] <FROGGS> like... so that you could move that to the beginning of @*INC, of to pick it as installation target

[19:12] <FROGGS> s/of/or/

[19:12] <lizmat> I guess for that you would need something like CUSTOM_LIB

[19:12] <lizmat> hmmmm...

[19:12] <FROGGS> yeah, otherwise you'd have to walk @*INC every time

[19:13] <FROGGS> m: say @*INC.grep( *.name eq 'home' )

[19:13] <camelia> rakudo-moar 7f22e9: OUTPUT«No such method 'name' for invocant of type 'CompUnitRepo::Local::File'␤  in whatevercode  at /tmp/t8679mLY3i:1␤  in block  at src/gen/m-CORE.setting:1611␤  in method reify at src/gen/m-CORE.setting:7731␤  in method reify at src/gen/m-CORE.setting:7…»

[19:13] <lizmat> but should CUSTOM_LIB contain instantiated CURL objects ?

[19:14] <lizmat> BTW, I was also thinking about providing a shortcut for

[19:14] <lizmat> CompUnitRepo::Local::File:.

[19:14] <FROGGS> instantiated objects?

[19:14] <FROGGS> well, that'd be -I. :o)

[19:15] <lizmat> true

[19:15] <lizmat> but more generic: for CompUnitRepo::Local::Installation

[19:15] <FROGGS> that is more interesting

[19:15] <lizmat> I'm thinking of a sort of protocol indicator, like with URLs:

[19:15] <lizmat> http://

[19:16] <lizmat> inst://.

[19:16] <FROGGS> hmmm, not bad

[19:16] <lizmat> file://.  (use . as a CURL::File)

[19:16] <lizmat> inst:://foo/bar   (use foo/bar as a CURL::Installation)

[19:17] <FROGGS> yeah, I like it

[19:17] <lizmat> the "protocol" string would be returned by a method of the CURL class

[19:17] *** darutoko left
[19:18] <FROGGS> makes sense

[19:18] <lizmat> multiple paths still divided by comma's

[19:18] <lizmat> if no protocol seen, then same as before

[19:18] <lizmat> initial protocol would be file://

[19:22] *** skids joined
[19:27] <mj41> masak: https://github.com/perl6/ecosystem/pull/31

[19:32] <dalek> ecosystem: af52a94 | (Michal Jurosz)++ | META.list:

[19:32] <dalek> ecosystem: Add SP6 to ecosystem

[19:32] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/af52a94618

[19:32] <dalek> ecosystem: 9befabd | (Carl Mäsak)++ | META.list:

[19:32] <dalek> ecosystem: Merge pull request #31 from mj41/master

[19:32] <dalek> ecosystem: 

[19:32] <dalek> ecosystem: Add SP6 to ecosystem

[19:32] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/9befabd891

[19:32] <masak> mj41: merged.

[19:35] <moritz> mj41: ... and now you have the permissions to push directly, next time :-)

[19:43] *** anaeem1 joined
[19:48] *** guru joined
[19:49] *** guru is now known as Guest21426

[19:49] *** Guest21426 is now known as ajr_

[19:52] <mj41> moritz: thx a lot and good nigth from Czech rep.

[19:53] *** dwarring joined
[19:54] <dalek> roast: ae9d90c | (David Warring [email@hidden.address] | / (2 files):

[19:54] <dalek> roast: adding 2011 advent day 14

[19:54] <dalek> roast: review: https://github.com/perl6/roast/commit/ae9d90cee0

[19:58] *** mj41 left
[20:16] <dalek> roast: a871301 | (David Warring [email@hidden.address] | / (2 files):

[20:16] <dalek> roast: completing 2011 advent day 14

[20:16] <dalek> roast: review: https://github.com/perl6/roast/commit/a87130180b

[20:18] <dalek> rakudo/nom: a1e330a | (Elizabeth Mattijsen)++ | t/spectest.data:

[20:18] <dalek> rakudo/nom: Add advent2011-day14 to the spectest

[20:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a1e330a53f

[20:18] <lizmat> dwarring++

[20:21] *** rindolf left
[20:22] <dalek> roast: 7e36848 | (Elizabeth Mattijsen)++ | packages/Advent/MetaBoundaryAspect.pm:

[20:22] <dalek> roast: DeTAB

[20:22] <dalek> roast: review: https://github.com/perl6/roast/commit/7e36848881

[20:30] *** Khisanth left
[20:33] *** pochi joined
[20:35] <masak> dwarring++

[20:36] <timotimo> aye, good work!

[20:37] <dwarring> fun but useful

[20:38] <timotimo> the best kind :)

[20:38] *** molaf_ left
[20:39] *** Khisanth joined
[20:46] *** kaare_ left
[20:47] *** zakharyas left
[20:50] <dalek> roast: db4bad3 | Nami-Doc++ | integration/advent2011-day14.t:

[20:50] <dalek> roast: Fix typo "inhertance"

[20:50] <dalek> roast: review: https://github.com/perl6/roast/commit/db4bad3468

[20:51] <lizmat> vendethiel starting small  :-)

[20:51] <vendethiel> lizmat: he, I have other previous bigger commits (still small, but no typos)

[20:51] <lizmat> hehe  :-)

[20:53] *** colomon joined
[20:53] *** thou left
[20:55] *** ajr_ left
[21:06] *** spider-mario left
[21:06] *** anaeem1 left
[21:06] *** cognominal left
[21:07] *** cognominal joined
[21:09] *** colomon left
[21:09] *** Rotwang left
[21:11] *** Khisanth left
[21:17] *** hoverboard joined
[21:20] *** Khisanth joined
[21:23] *** donaldh joined
[21:30] *** colomon joined
[21:31] <pippo_> good night #perl6.

[21:31] *** pippo_ left
[21:40] *** kurahaupo joined
[21:41] *** sftp_ joined
[21:41] *** sftp_ is now known as sftp

[21:48] <lizmat> FROGGS: I'm trying to grasp "add-curs" in src/core/Inc.pm

[21:49] <lizmat> so you can specify:

[21:50] <FROGGS> it parses colonpairs beside the classname

[21:50] <lizmat> but after that, it's doing %options<name> after that

[21:50] <lizmat> that seems wrong?

[21:50] <lizmat> or are you just grepping :name<foo> ?

[21:51] <FROGGS> :name<foo> would put it in %*CUSTOM_LIB<foo>

[21:52] <FROGGS> :name<foo>, :name(foo) and :name[foo] will be parsed by that regex

[21:52] <lizmat> this is not specced anywhere yet, right?

[21:52] <FROGGS> correct

[21:52] <lizmat> as is :name(foo>  btw  :-)

[21:52] <FROGGS> :o)

[21:52] <lizmat> do you know if this is being used anywhere yet ?

[21:53] <FROGGS> I'm not sure

[21:53] <FROGGS> perhaps in my panda dev branch

[21:53] <FROGGS> but it is unlikely

[21:53] <lizmat> so you'll be the only one mad at me  :-)

[21:53] <lizmat> when I break it?

[21:54] <FROGGS> I won't be mad

[21:54] <lizmat> okidoki  :-)

[21:59] *** thou joined
[21:59] <dalek> rakudo/nom: f1b05d1 | (Elizabeth Mattijsen)++ | src/core/Inc.pm:

[21:59] <dalek> rakudo/nom: Lay out the INC path regex a bit

[21:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f1b05d137c

[22:00] <lizmat> no breakage here yet  :-)

[22:03] *** ren1us joined
[22:03] *** thou left
[22:10] *** carlin left
[22:10] *** colomon left
[22:16] <cognominal> what make-cur stands for?

[22:16] <FROGGS> comp unit repo

[22:17] *** wingfold_ joined
[22:17] <cognominal> ho

[22:17] <cognominal> and add-curs?

[22:18] <cognominal> comp unit repo s?

[22:19] <cognominal> lizmat++  # doing so much work facing the user, complementing jnthn (and others) working on architecture/performance/low-level-stuff.

[22:20] *** donaldh left
[22:20] *** wingfold left
[22:21] *** kurahaupo left
[22:27] <cognominal> r:  "a" ~~ / a { say $¢ } /

[22:28] <camelia> rakudo-jvm a1e330: OUTPUT«(timeout)»

[22:28] <camelia> ..rakudo-{parrot,moar} a1e330: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Unsupported use of $¢ variable␤at /tmp/tmpfile:1␤------> [32m"a" ~~ / a { say [33m⏏[31m$¢ } /[0m␤    expecting any of:␤        argument list␤        prefix or te…»

[22:32] <cognominal> ho, the test about $¢ is skipped in rakudo

[22:33] <masak> 'night, #perl6

[22:33] <FROGGS> night masak 

[22:34] <FROGGS> m:  "a" ~~ / a { say $/.CURSOR } /

[22:34] <camelia> rakudo-moar f1b05d: OUTPUT«Cursor.new()␤»

[22:35] <cognominal> hardly useful either

[22:36] <timotimo> m:  "a" ~~ / a { say $/.CURSOR.DUMP } /

[22:36] <camelia> rakudo-moar f1b05d: OUTPUT«Cursor<1>(:$!made(Any))␤»

[22:36] *** colomon joined
[22:37] <FROGGS> m:  "a" ~~ / a { say $/.CURSOR.pos } /

[22:37] <camelia> rakudo-moar f1b05d: OUTPUT«1␤»

[22:37] <FROGGS> it is useful

[22:38] <FROGGS> m:  "a" ~~ / { say $/.CURSOR.pos } a { say $/.CURSOR.pos } /

[22:38] <camelia> rakudo-moar f1b05d: OUTPUT«0␤1␤»

[22:39] <cognominal> m:  "a" ~~ / a { say $/.CURSOR.dump } /

[22:39] <camelia> rakudo-moar f1b05d: OUTPUT«No such method 'dump' for invocant of type 'Cursor'␤  in block  at /tmp/5mBjsOG8jB:1␤␤»

[22:42] <cognominal> ho, that's an unrelated dump. 

[22:43] <timotimo> aye, qast has method dump, too, i believe

[22:47] *** xragnar left
[22:47] <cognominal> every stage of the parse is supposed to have one. That's what  makes --target=whatever   work

[22:48] <cognominal> but matching is not a stage of parsing, so I was utterly confused, as usual.

[22:49] <timotimo> oh

[22:49] *** xragnar joined
[22:50] <FROGGS> .DUMP is something rakudo internal, .dump is implemented in nqp for stage printing, aye

[22:51] <cognominal> .DUMP is not specified. I suppose that's why it is uppercase

[22:51] <FROGGS> it is not specced, correct

[22:52] <FROGGS> it is some sort of rakudo developer friendly version of .gist

[22:52] <FROGGS> but now: gnight all

[22:52] <cognominal> gnight

[22:54] *** dmol left
[22:56] *** hoverboard left
[22:58] *** colomon left
[22:59] <timotimo> DUMP can also do "recursive" structures

[22:59] <cognominal> ok

[23:04] <timotimo> i should probably get started on my talk ...

[23:04] <timotimo> i'd like to collect some "day to day" tasks that you can nicely use rakudo for nowadays (and in the near future)

[23:05] <timotimo> i've had rakudo internals directly in front of my face for too long, i'm missing the "big picture"

[23:09] <cognominal> timotimo:  https://gist.github.com/softmoth is a good example

[23:09] <cognominal> I meant  https://gist.github.com/softmoth/1fe9843610f0ea6062d1

[23:11] <cognominal> timotimo, I wanted to do the same, showing basic perl6, but I wanted to do a state of Perl 6 before so I got no time for the basic part.

[23:12] <timotimo> aye, since i gave a talk on perl6 last year, i'll give a quick "what's changed" overview

[23:12] <timotimo> mostly "look, we got jvm, performance, multithreaded stuff, and async I/O now!"

[23:13] *** thou joined
[23:15] <cognominal> Once we will have a slang that do basic shell stuff like pipe and redirection, we wont even need a talk.

[23:16] <cognominal> See : you can do what you do in a shell, even with the syntax of a shell.

[23:17] <cognominal> ...without the ugly control flow of the shell

[23:19] *** colomon joined
[23:24] <timotimo> ipython has something nice for that

[23:25] <cognominal> I don't like to have to choose between cheese and dessert. Somme shellish stuff should be done right in Perl 6.

[23:26] <cognominal> ... with shellish syntax when it is a win.

[23:26] *** Khisanth left
[23:27] <cognominal> timitimo: sounds nice. yes, we need a iperl6, like python has a ipython.

[23:29] <timotimo> well, that's not what i mean

[23:30] <timotimo> the ipython protocol could - now that we have async stuff - properly be used by rakudo

[23:30] <timotimo> but what i meant was things like "foobar = !ls"

[23:31] <cognominal> ok, nice to know

[23:33] *** BenGoldberg joined
[23:37] *** dmol joined
[23:37] <timotimo> cognominal: please suggest something i could do as example code for the cairo binding?

[23:38] *** Khisanth joined
[23:38] <cognominal> I don't know cairo :)

[23:38] <timotimo> vector graphics drawing library

[23:39] <cognominal> that's pure graphic, no events?

[23:39] <cognominal> http://cairographics.org/  # ok, I see

[23:40] <cognominal> I suppose rotating and flipping camelia would be nice.

[23:40] <timotimo> that sounds like a lot of work

[23:41] <timotimo> cairo integrates "well" with gtk, and we already have a gtk::simple binding

[23:41] <timotimo> so that would be one of the logical next steps

[23:42] <timotimo> i don't really know what i should use as a fallback to display cairos results; i'm not sure if i really want to build the gtk-cairo-bridge just yet

[23:42] <timotimo> though it should be fairly easy

[23:42] <timotimo> hmm.

[23:43] *** daxim joined
[23:49] *** thou left
[23:53] *** dmol left
