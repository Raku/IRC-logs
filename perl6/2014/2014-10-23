[00:07] *** Celelibi left
[00:07] *** _slade_ joined
[00:10] *** Celelibi joined
[00:16] *** ugexe left
[00:33] *** BenGoldberg is now known as BeNgOlDbErG

[00:33] *** BeNgOlDbErG is now known as BenGoldberg

[00:33] *** bjz left
[01:05] *** grettis left
[01:12] *** Mso150 joined
[01:19] *** virtualsue joined
[01:23] *** yeahnoob joined
[01:23] *** Alina-malina left
[01:24] *** Alina-malina joined
[01:29] <raydiak> \o

[01:35] <colomon> o/

[01:37] * raydiak wishes for a better way to say "either this param or that param is required" than "die 'error' unless defined $a // $b"

[01:39] *** immortal left
[01:40] <raydiak> work on anything cool lately colomon?

[01:40] *** erkan joined
[01:41] <colomon> not really, at least in the p6 world.  just doing bookkeeping sort of stuff there...

[01:42] <raydiak> I just got back from camping...built a shelter out of trees, that was pretty cool

[01:44] <colomon> very cool!

[01:45] *** ilbot3 left
[01:45] <raydiak> sore as heck though :) looking forward to getting back to my algebra system for a few days

[01:45] <colomon> non-p6, local PBS channel videoed a bunch of us playing music for their pledge drive next March.  

[01:45] <raydiak> awesome, what do you play?

[01:45] <colomon> in this case, whistle.

[01:46] *** leont left
[01:46] *** Mso150 left
[01:47] <raydiak> I've tried music a bit, it doesn't come naturally to me, but I keep trying every few years

[01:47] *** ilbot3 joined
[01:47] <colomon> http://www.mlive.com/entertainment/bay-city/index.ssf/2013/03/bay_city_musicians_break_out_t.html # I wasn't there that day

[01:47] <colomon> but that's the place and some of the people

[01:48] <raydiak> nice

[01:49] <raydiak> looks classy

[01:49] <raydiak> my mother plays the fiddle

[01:54] <colomon> what sort of music?

[01:54] <raydiak> bluegrass mostly

[01:54] <colomon> ah, cool.

[01:54] <raydiak> think I used to hear her practice some calssical too from time to time

[02:00] *** dwarring left
[02:00] *** Possum left
[02:03] *** timotimo left
[02:04] *** timotimo joined
[02:08] *** oskie left
[02:08] *** esaym153 left
[02:08] *** oskie joined
[02:10] *** esaym153 joined
[02:14] *** oskie left
[02:15] *** oskie joined
[02:18] *** Alula left
[02:23] *** Possum joined
[02:35] *** Possum left
[02:43] *** Alula joined
[02:45] *** noganex joined
[02:49] *** noganex_ left
[02:50] *** chenryn joined
[02:54] *** jack_rabbit left
[02:55] *** jack_rabbit joined
[03:07] *** Possum joined
[03:20] *** _slade_ left
[03:49] *** BenGoldberg left
[03:56] *** mauke_ joined
[03:59] *** rindolf joined
[03:59] *** mauke left
[03:59] *** ugexe joined
[04:04] *** kaare_ joined
[04:04] *** mauke_ is now known as mauke

[04:24] *** kaare_ left
[04:24] *** [Sno] left
[04:36] *** kurahaupo left
[04:46] *** ggoebel11111118 joined
[04:48] *** chenryn left
[04:50] *** ggoebel11111117 left
[04:56] *** kaare_ joined
[05:00] <moritz> star-m: say 'good morning, not just Vietnam'

[05:00] <camelia> star-m 2014.09: OUTPUT«good morning, not just Vietnam␤»

[05:04] <masak> \o/

[05:04] <masak> m: say 'top of the morning to you, #perl6'

[05:04] <camelia> rakudo-moar 315ec6: OUTPUT«top of the morning to you, #perl6␤»

[05:12] *** chenryn joined
[05:17] *** fhelmberger joined
[05:22] *** _sri left
[05:22] *** _sri joined
[05:23] *** darutoko joined
[05:25] *** kurahaupo joined
[05:25] *** _sri left
[05:25] *** _sri joined
[05:27] <masak> interesting. Scala recently rethought their macros, too. http://scalamacros.org/paperstalks/2014-03-02-RethinkingScalaMacros.pdf

[05:27] <masak> I should get back in touch with the Scala macro people.

[05:28] *** _sri left
[05:28] *** _sri joined
[05:29] *** _sri left
[05:29] *** _sri joined
[05:31] *** SamuraiJack joined
[05:33] <masak> this one looks highly relevant as well: http://scalamacros.org/paperstalks/2014-06-17-EasyMetaprogrammingForEveryone.pdf

[05:35] <masak> Ven: re http://irclog.perlgeek.de/perl6/2014-10-22#i_9550354

[05:37] <masak> Ven: I don't think comparisons of the kind "in Lisp, it works like this" are very useful without also considering all the forces that apply in the different languages. just the fact that Perl has sigilled variables and BEGIN time makes it a different environment with features that differ from a Lisp's.

[05:37] <grondilu> raydiak: maybe die 'error' unless defined $a|$b

[05:39] <grondilu> m: say defined (my $)|(my $)

[05:39] <camelia> rakudo-moar 315ec6: OUTPUT«True␤»

[05:39] <grondilu> m: say defined Junction

[05:39] <camelia> rakudo-moar 315ec6: OUTPUT«False␤»

[05:39] <grondilu> m: say defined my $

[05:39] <camelia> rakudo-moar 315ec6: OUTPUT«False␤»

[05:40] * grondilu would expected defined (my$)|(my$) to be False

[05:40] * masak not

[05:40] <masak> m: say so defined(my $) | defined(my $)

[05:40] <camelia> rakudo-moar 315ec6: OUTPUT«False␤»

[05:40] <grondilu> oh

[05:40] <masak> a junction is an object, and objects tend to be defined.

[05:41] <masak> unless they are type objects, which your junction wasn't.

[05:41] <grondilu> ok.  Makes sense, but it's an easy trap to fell in.

[05:42] <grondilu> m: say "ok" unless defined (my$)|my$

[05:42] <camelia> rakudo-moar 315ec6: ( no output )

[05:42] <masak> it's only easy to fall in if you haven't internalized the way things group during parse.

[05:42] <masak> or, hm. no, that's not it.

[05:43] <masak> the question is more "will `defined` ask about the definedness of the junction, or will it autothread?"

[05:43] <grondilu> that's fine, I shouldn't have expected say $something to evaluate $something in boolean context I guess

[05:44] <grondilu> after all, it does behave as expected when used after a if/unless

[05:45] <grondilu> m: say 1 + 2|3

[05:45] <camelia> rakudo-moar 315ec6: OUTPUT«any(3, 3)␤»

[05:46] <grondilu> on second thought, why 'say defined (my$)|my$' says True?  Why not Juncion(...)?

[05:46] <grondilu> I mean, it seems like it did indeed autothread, only not as expected.

[05:48] <grondilu> I guess it meant "the junction is defined"

[05:49] <grondilu> but then I don't see why adding 'so' would change anything

[05:57] <masak> my parentheses do change things, though.

[05:58] <masak> defined(my $) | defined(my $)

[05:58] *** gfldex joined
[05:58] <grondilu> ah yeah indeed

[06:00] *** mauke_ joined
[06:03] *** mauke left
[06:03] *** mauke joined
[06:14] *** ilogger2 joined
[06:14] *** ChanServ sets mode: +v ilogger2

[06:16] *** geekosaur joined
[06:19] *** lucs joined
[06:19] * masak commutes &

[06:26] *** woshty joined
[06:32] *** [Sno] joined
[06:40] *** Mso150 joined
[06:42] *** epochbell joined
[06:50] <sergot> hi o/

[06:50] *** virtualsue joined
[06:56] *** pochi_ joined
[06:57] *** kst` joined
[06:58] *** ggoebel11111119 joined
[06:59] *** hoelzro joined
[06:59] *** sjn_ joined
[07:00] *** dana joined
[07:00] *** dana is now known as Guest1419

[07:00] *** cosimo_ joined
[07:10] *** kjs_ joined
[07:15] *** bjz joined
[07:27] *** brrt joined
[07:33] *** zakharyas joined
[07:38] *** brrt left
[07:41] *** ghostlines joined
[07:44] *** rurban joined
[07:45] *** rurban left
[07:47] *** Ven joined
[07:47] <Ven> I was looking at my youtube feed, and I saw https://www.youtube.com/watch?v=ok1bcGvgqr0 :P

[07:47] <Ven> I think I recognized masak++

[07:48] *** FROGGS joined
[07:49] <masak> yup, that seems to be me.

[07:56] *** ptc_p6 joined
[07:59] *** nebuchadnezzar joined
[08:00] *** ptc_p6 left
[08:01] *** ptc_p6 joined
[08:02] <timotimo> i saw that one already :)

[08:02] <timotimo> oh, hold on

[08:02] <timotimo> i saw that live and during the most important bit the stream cut out

[08:02] <masak> a guy came up to me afterwards and told me about a few ways to improve the way points move from A to B.

[08:03] <masak> the important optimization would be to keep all points fixed that exist in both pictures.

[08:03] <timotimo> oh

[08:03] <timotimo> yeah, that'd probably globally reduce the sum path length nicely

[08:04] *** sqirrel joined
[08:06] <masak> but I realized when he said that, that after that I would also like to greedily find paths with the shortest distance, and solve for those first

[08:06] <masak> largely removing the need for simulated annealing

[08:06] <timotimo> mhh

[08:07] <timotimo> also, the animation would be less interesting if most pixels would just stay put

[08:16] *** chenryn joined
[08:18] *** kjs_ left
[08:20] *** bjz left
[08:23] *** bjz joined
[08:24] *** dakkar joined
[08:27] <lizmat_> https://www.youtube.com/watch?v=bhAIyrk2ogo   # 1st jnthn talk at YAPC::EU

[08:28] <lizmat_> https://www.youtube.com/watch?v=CnCmU85mV7A  # lichtkind's talk

[08:28] <lizmat_> more seem to be on the way now

[08:29] <Ven> yay :)

[08:29] *** kjs_ joined
[08:31] <timotimo> hooray!

[08:35] *** ghostlines left
[08:36] <vladtz> maska: that a guy would have been me John vna Krieken

[08:36] *** ghostlines joined
[08:36] *** ghostlines left
[08:36] <Ven> MASKA!

[08:36] <Ven> Looks like a norwegian rally cry :)

[08:36] <vladtz> Oops!

[08:37] *** ghostlines joined
[08:38] <arnsholt> Bah. Another annoying thing with Python is that the reference grammar has some bits that aren't really useful for a top-down parser

[08:39] <Ven> oh?

[08:39] <arnsholt> Yeah

[08:39] <arnsholt> The LHS of an assignment operation isn't an expression

[08:39] <arnsholt> It has a slightly different syntax

[08:39] <Ven> Ohh, I think I've heard about that one... haha...

[08:40] <arnsholt> Not really a user-facing problem

[08:43] <Ven> I really need to look at snake and v5's internals to see if we could ever bridge them to their Inline:: equivalent

[08:44] <Ven> arnsholt: has snake "big blockers" like v5 and XS?

[08:45] *** Mso150_q joined
[08:47] *** Mso150 left
[08:51] *** brrt joined
[08:57] <masak> vladtz: right! yes! sorry for forgetting the name ;)

[08:58] <vladtz> masak: happens to me all the time!

[08:59] <masak> :D

[08:59] <masak> vladtz: I look forward to trying your suggestion. I will make sure to make some noise on the channel about it when I have something to show.

[09:00] <masak> the past few days I've been engrossed in a small toy problem which could be described as "regular expressions on board game moves"...

[09:00] <Ven> .oO( cameliaze )

[09:00] <Ven> .oO( ... camareliaze! )

[09:00] <Ven> carame*. sigh

[09:00] <masak> I got up one hour early today to hack on it.

[09:01] <masak> hexagonal coordinates are a beast.

[09:01] <masak> baest: not you. :)

[09:01] <Ven> How do you do that? I have to sleep on the bus to actually spend a nice day. otherwise I just get grumpy :P

[09:01] <masak> Ven: I went to bed early.

[09:01] <masak> that's usually the hard part.

[09:01] <Ven> hehehe :P

[09:02] <Ven> but then you could've hacked during that time, maybe

[09:02] <baest> masak: ok, but I can be beastly :)

[09:05] <masak> you're the best, baest. :)

[09:05] <masak> Ven: in the case of yesterday -- no, I couldn't. I tried, but I was just too beat.

[09:06] <Ven> surely you meant baet?

[09:06] <Ven> :P

[09:06] * masak .oO( beast, baest, best, beat... )

[09:06] <Ven> 2spooky

[09:07] * masak imagines a channel with only nicks of the form /^b<[ae]>+s?t$/

[09:08] <Ven> now imagine messages like that. It's like speaking smurf...

[09:09] <vladtz> so what the smurf is wrong with hex coordinates?

[09:11] <masak> nothing wrong with them. just different.

[09:11] <masak> each cell has six neighbours.

[09:13] <masak> the whole thing can be modeled by taking the ordinary eight neighbors (four side-neighbors, four corner-neighbors) of a square, and then removing two (corner-neighbors).

[09:14] <vladtz> Yes, I remember from the tim ewhen I was doing sims on BCC and FC cristals.

[09:14] <masak> it feels a little asymmetrical because you remove two (opposite) corner-neighbors but keep the other two.

[09:15] <masak> it's all an artifact of wanting to store a rhombic board in a rectangular array.

[09:15] <timotimo> I remember having written some code to do hexagonal grids for cellular automaton display 

[09:16] <masak> right now what I'm trying to do is find mirror symmetries across the six possible symmetry lines intersecting in a cell. I haven't done that before, so it's killing me a little. :)

[09:17] <moritz> group theory FTW!

[09:17] <timotimo> I did the thing where I cut alternating corners every row so that it still fills a rectangular area kind of tightly 

[09:17] <moritz> masak: have you ever worked with a 3D hex grid?

[09:17] <masak> (I need to find the symmetries because if I know that the pattern is symmetric, then I can save a lot of computation by matching against 6 rotations instead of 12 rotations-and-flips)

[09:18] <nine_> colomon: moritz setup up camelia on my private webserver. It's mostly idling around so we might as well use those 4 cores for some Perl 6 :)

[09:18] <masak> moritz: no -- I fail to see how it extends cleanly to 3D.

[09:18] *** rmgk_ joined
[09:18] *** rmgk_ is now known as rmgk

[09:18] <masak> moritz: are the hex cells just stacked cylindrically?

[09:19] *** abraxxa joined
[09:19] <moritz> masak: https://en.wikipedia.org/wiki/Sphere_packing

[09:20] *** brrt left
[09:21] *** brrt joined
[09:21] *** Mso150_q left
[09:22] <moritz> there are actually two intuitive-ish ways to extend hex to 3D

[09:23] <moritz> face-centered cubic and body-cenetered cubic

[09:29] *** kjs_ left
[09:31] <masak> interesting.

[09:34] *** ecocode joined
[09:38] *** chenryn left
[09:39] *** chenryn joined
[09:45] *** erkan joined
[09:45] *** erkan left
[09:45] *** erkan joined
[10:01] *** brrt left
[10:23] *** datums_nb joined
[10:27] *** chenryn left
[10:28] *** denis_boyun joined
[10:28] *** chenryn joined
[10:41] <colomon> 198 passing modules this morning

[10:44] <FROGGS> colomon: is that good or bad?

[10:44] <colomon> FROGGS: it's great

[10:44] <colomon> highest number ever

[10:44] <FROGGS> then I am happy :D

[10:44] <colomon> one year ago it was around 100, I believe

[10:45] <arnsholt> Ven: The only big blockers for Snake I'm aware of ATM is that implementing a compiler is a lot of work =)

[10:45] <Ven> arnsholt: definitely :)

[10:46] <arnsholt> I'm sure there're going to be shenanigans I have to deal with in the object model and such, but the parsing and semantics of Python should definitely be implementable

[10:46] <arnsholt> Part of the problem for v5 is that Perl 5 is notoriously, insanely hard to parse

[10:47] <Ven> well, the big *blocker* is XS, though

[10:48] *** chenryn left
[10:50] <dalek> Perlito: 1c9d7b1 | (Flavio S. Glock)++ | / (2 files):

[10:50] <dalek> Perlito: Perlito5 - js - split() with multiline regex

[10:50] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/1c9d7b12d9

[10:54] <nine_> The same blocker exists for Python support. Alternative Python implementations struggle with it as well.

[10:58] <arnsholt> Oh, yeah. I'm not even considering C extension modules to Python

[11:02] <timotimo> the pypy people seem to be doing fine! :P

[11:04] <nine_> Yeah, I guess they actually have some users somewhere...

[11:04] <timotimo> oi

[11:04] <timotimo> i take offence to that

[11:04] <timotimo> skeinforge comes with pypy nowadays

[11:05] <timotimo> pypy is pretty fucking awesome, IMO.

[11:05] <nine_> "Skeinforge is a tool chain composed of Python scripts that converts your 3D model into G-Code instructions for RepRap."

[11:05] <timotimo> not only reprap

[11:05] <nine_> Like I said...some users somewhere. There's always some nieche where it's possible.

[11:05] <timotimo> pretty much every 3d printer slices with skeinforge

[11:08] *** Ven left
[11:09] *** dayangkun joined
[11:14] *** chenryn joined
[11:20] *** leont joined
[11:22] * colomon doesn't understand why File::Spec::Case won't work with panda on linux.

[11:23] <tadzik> linux may be a little sensitive about this

[11:23] <tadzik> that may be the case

[11:24] *** yeahnoob joined
[11:25] <FROGGS> :P

[11:25] <FROGGS> tadzik: can you be a bit more specific please?

[11:25] <tadzik> :D

[11:25] <tadzik> complaint filed

[11:28] <colomon> File::Spec::Case works fine if you run it uninstalled by hand in Linux.

[11:28] <colomon> it's just panda that fails.

[11:28] <colomon> under panda, I mean

[11:28] <colomon> and it worked fine there two weeks ago

[11:29] *** smls joined
[11:29] <colomon> To compile on the MoarVM backend, QAST::VM must have an alternative 'moar' or 'moarop'

[11:29] <colomon> build stage failed for IO::Select: Failed building lib/IO/Select.pm]

[11:29] <colomon> ?????

[11:29] *** brrt joined
[11:32] <FROGGS> hmmm

[11:33] <FROGGS> is there pir code in it?

[11:35] <colomon> yes

[11:35] *** denis_boyun left
[11:35] <colomon> pir::loadlib__Ps('select');

[11:35] <colomon> $!pmc := pir::new__Ps('Select');

[11:35] <colomon> (according to ack pir)

[11:35] *** denis_boyun joined
[11:38] <smls> m: my Int @a; @a[4]++; say @a[0]; say @a

[11:38] <camelia> rakudo-moar 315ec6: OUTPUT«(Int)␤(Any) (Any) (Any) (Any) 1␤»

[11:39] <dalek> doc: 12d18c1 | (Kamil Kułaga)++ | lib/Language/variables.pod:

[11:39] <dalek> doc: added @*INC

[11:39] <dalek> doc: review: https://github.com/perl6/doc/commit/12d18c1dc3

[11:39] <smls> Is that *supposed* to say "(Any)" there?

[11:46] <moritz> no, (Int)

[11:49] * masak submits rakudobug

[11:51] *** Ven joined
[11:51] <Ven> masak: just reading the backlog now..(it's better to .tell me)

[11:52] <masak> got it.

[11:52] <Ven> yes, it's nothing more than a "uh, I expect the levels to be separated here", at least I think. I have some kind of feeling that *SOMETHING* will go wrong with nested macros :P. But nothing more

[11:53] <Ven> and yes, scala macros used to be available as an "external" plugin named "macro-paradise" (or -ize)

[11:54] <masak> surely -ise, unless you're talking about converting things to a parade :P

[11:54] <Ven> (the big "news" stuff explained here is the quasiquoting)

[11:54] <Ven> (I mean in the .pdf you linked)

[11:54] <masak> *nod*

[11:55] <Ven> I actually heard paulp say the compiler should use it internally. And paulp knows scala pretty good..

[11:56] <Ven> (paulp has a lot to say about scala, a lot of bad stuff. He has a talk "we're doing it all wrong" that explains it. very, very interesting. Makes you think about the "it's all about trade-offs" phrase)

[11:56] <masak> is it online somewhere?

[11:56] <Ven> give me 5 minutes

[11:56] <Ven> masak: https://www.youtube.com/watch?v=TS1lpKBMkgg

[11:57] <masak> ok, will watch.

[11:57] <Ven> (if you don't know scala, this probably won't talk too much to you. Unless you plan to work on p6-jvm, I guess...)

[11:58] <Ven> Though I'm currently more in the dependent-scala clan (as opposed to the macro-scala one :P)

[12:00] <Ven> masak: http://stackoverflow.com/a/4443972/1737909 you might be interested in this. this is more about DT than macros though

[12:08] <colomon> raydiak: ping?

[12:10] <colomon> .tell raydiak in Math::ThreeD's Build.pm, $?FILE.path.absolute.parent.child('gen-libs.p6') is wrong.  The absolute part needs to come last, because it generates a Str instead of a Path.

[12:10] <yoleaux> colomon: I'll pass your message to raydiak.

[12:11] *** Alula joined
[12:12] *** rurban joined
[12:14] *** ecocode left
[12:14] *** ecocode joined
[12:14] *** PZt joined
[12:18] <dalek> Perlito: 2c65ebf | (Flavio S. Glock)++ | / (2 files):

[12:18] <dalek> Perlito: Perlito5 - standard tests for split() - failed 9/81

[12:18] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/2c65ebfa6f

[12:19] *** chenryn left
[12:20] <Ven> masak: well, I didn't manage to find the stackoverflow answer. still: http://stackoverflow.com/questions/12935731/any-reason-why-scala-does-not-explicitly-support-dependent-types/12937819#12937819 quite nice

[12:25] <dalek> roast: 958f352 | usev6++ | S04-phasers/end.t:

[12:25] <dalek> roast: Add tests for RT #111766

[12:25] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=111766

[12:25] <dalek> roast: review: https://github.com/perl6/roast/commit/958f3520e7

[12:26] <Ven> bartolin++ # so many tests!

[12:26] <Ven> (I hope I don't get that wrong)

[12:27] <masak> bartolin++ # awesome

[12:27] <bartolin> Ven: yes, I'm usev6 on github.

[12:27] *** dayangkun left
[12:28] <perlpilot> So ... any good ideas for the release neame?

[12:28] <perlpilot> *name

[12:32] <Ven> PerlJam: Jammin' good

[12:32] <PerlJam> Ven: typically releases are named after Perl Mongers groups.  :)

[12:32] <Ven> :P

[12:32] <Ven> just open your own pm group then...

[12:33] <FROGGS> PerlJam: just tell 'em you created one :P

[12:33] <PerlJam> If one of you guys starts Salzburg.pm, I'll name the release after it  ;)

[12:35] *** datums_nb left
[12:35] <dalek> ecosystem: 5315084 | colomon++ | META.list:

[12:35] <dalek> ecosystem: Remove Squerl from Ecosystem

[12:35] <dalek> ecosystem: 

[12:35] <dalek> ecosystem: It depends on Perl6::Sqlite, which is not in the ecosystem.

[12:35] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/531508487c

[12:38] <colomon> m: say ($*IN & $*OUT).t

[12:38] <camelia> rakudo-moar 315ec6: OUTPUT«Cannot find method 'isatty': no method cache and no .^find_method␤  in method t at src/gen/m-CORE.setting:15171␤  in sub AUTOTHREAD_METHOD at src/gen/m-CORE.setting:3789␤  in any  at src/gen/m-Metamodel.nqp:2719␤  in block <unit> at /tmp/YpZ85sTFQP…»

[12:38] <colomon> awkward

[12:40] <colomon> (multitasking) https://github.com/tony-o/perl6-http-server-async/blame/master/META.info tony-o switch the dependency to "Pluggable" : "*" on Sept 17th.  Panda seems to be choking on that.  lizmat_ FROGGS tadzik ?

[12:46] <colomon> m: say $*IN.t

[12:46] <camelia> rakudo-moar 315ec6: OUTPUT«Cannot find method 'isatty': no method cache and no .^find_method␤  in method t at src/gen/m-CORE.setting:15171␤  in block <unit> at /tmp/N7MqaGGHc9:1␤␤»

[12:46] <FROGGS> colomon: we don't understand that syntax/structure yet

[12:46] <colomon> FROGGS: fine answer.  :)

[12:49] <dalek> Perlito: 679d546 | (Flavio S. Glock)++ | / (3 files):

[12:49] <dalek> Perlito: Perlito5 - standard tests for split() - tweak

[12:49] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/679d5465ff

[12:50] <colomon> tony-o: just sent you a pull request

[12:52] <colomon> m: say $*IN.t # lizmat_ , any idea how to fix this?

[12:52] <camelia> rakudo-moar 315ec6: OUTPUT«Cannot find method 'isatty': no method cache and no .^find_method␤  in method t at src/gen/m-CORE.setting:15171␤  in block <unit> at /tmp/iJTH9T3Yer:1␤␤»

[12:53] <colomon> m: nqp::getstdin().isatty

[12:53] <camelia> rakudo-moar 315ec6: OUTPUT«Cannot find method 'isatty': no method cache and no .^find_method␤  in block <unit> at /tmp/iLP9hlAEO3:1␤␤»

[12:56] *** wtw joined
[12:56] *** Alula left
[12:57] *** guru joined
[12:57] *** guru is now known as Guest77797

[12:57] <dalek> roast: d657053 | usev6++ | S06-macros/unquoting.t:

[12:57] <dalek> roast: Adapt test for RT #122746

[12:57] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122746

[12:57] <dalek> roast: (was failing for rakudo.jvm)

[12:57] <dalek> roast: review: https://github.com/perl6/roast/commit/d6570538ae

[12:57] *** Guest77797 is now known as ajr_

[12:59] *** Alula joined
[12:59] *** JimmyZ joined
[13:01] <dalek> rakudo/nom: 2572884 | duff++ | docs/announce/2014.10.md:

[13:01] <dalek> rakudo/nom: update release announcement

[13:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2572884418

[13:05] <bartolin> in the release announcment under %PEOPLE% you have usev6 and bartolin. thats one and the same person (me). (Also I don't mind if you use my full name, see https://github.com/usev6)

[13:06] <PerlJam> aye, I didn't peruse the list yet, just included the output from the contributors script

[13:06] <bartolin> okay, just wanted to note ;-)

[13:06] <PerlJam> Thanks :)

[13:08] <PerlJam> bartolin: do you have a preferred email address?

[13:08] <PerlJam> (I'm adding you to the CREDITS file)

[13:08] <masak> PerlJam++

[13:09] <PerlJam> bartolin: if not, that's fine btw

[13:09] *** kill joined
[13:09] *** kill is now known as amkrankruleuen

[13:09] *** amkrankruleuen left
[13:09] *** amkrankruleuen joined
[13:10] <bartolin> PerlJam: thanks, for adding me to the CREDITS file ;-)

[13:11] <dalek> rakudo/nom: 59eaee5 | duff++ | CREDITS:

[13:11] <dalek> rakudo/nom: Add bartolin to CREDITS

[13:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/59eaee5e08

[13:14] <dalek> rakudo/nom: 8bcdfd2 | duff++ | docs/announce/2014.10.md:

[13:14] <dalek> rakudo/nom: Add the current output of contributors.pl :)

[13:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8bcdfd2f5f

[13:14] <PerlJam> The release process feels like it's gotten more complicated that I remember.

[13:14] <[Coke]> PerlJam: hasn't gotten any faster, that's for sure. :)

[13:15] <dalek> Perlito: c256085 | (Flavio S. Glock)++ | / (3 files):

[13:15] <dalek> Perlito: Perlito5 - standard tests for split() - cleanup

[13:15] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/c256085be3

[13:15] <[Coke]> I eventually want to have all the annoying bits automated. :P

[13:15] <PerlJam> amen.

[13:15] <masak> PerlJam: personally I find running all the tests on all the backends to be the hard part.

[13:16] <[Coke]> "if only we had some automated way to do that." :P

[13:16] <masak> ;)

[13:16] <PerlJam> yeah, that bit seems the same though. (tedious)

[13:16] <masak> is there already a this month's moar release?

[13:16] <PerlJam> masak: no.

[13:17] <bartolin> btw, I'm going to fudge two failing tests for rakudo.jvm in S17-supply/lines.t and S17-supply/words.t

[13:22] *** Hor|zon joined
[13:24] <Ven> Can we stop using Big-O stuff as a reason to justify everything? We're in 2014 now :(

[13:24] <Ven> (and by that, I mean: lol, we have multiple levels of memory.)

[13:28] <FROGGS> Ven: what are you talking about?

[13:28] <brrt> Ven - please elaborate :-)

[13:28] <brrt> as in: interesting point, why?

[13:28] <Ven> http://www.yarchive.net/comp/slow_memory_effects.html

[13:29] <Ven> Big-O notation assumes a uniform memory model

[13:29] <brrt> right

[13:29] <brrt> but

[13:29] <brrt> but

[13:29] <brrt> big-o notation takes problem scope into account

[13:30] <brrt> and that's vital whenever problems get big

[13:30] <Ven> I've been told about two major cases: matrix multiplication and linear programming. You might have a lower big-o complexity (Strassen/Coppersmith-Winograd) but in the real-world, that didn't work out

[13:30] <brrt> well, that depends on the size of your problem. that's what big-o says

[13:30] <nine_> Big-O notation is a tool, not a law.

[13:31] <brrt> and you may argue that your problem is not determined by complexity but by memory access

[13:31] <brrt> and that's where you become the engineer rather than the scientist

[13:31] <Ven> nine_: this is what I'm arguing for :P

[13:31] <lizmat> colomon: wrt to $*IN.t  , I think I copy pasted that from the old implementation, so my questiion becomes: has this ever worked?

[13:32] <colomon> lizmat: yes, it definitely worked at some point.  

[13:32] <colomon> might have been pre-nom

[13:32] <lizmat> eh, ever on moar ?

[13:32] <colomon> no idea

[13:33] <lizmat> seems to work on parrot

[13:33] <lizmat> so, maybe a case of NYI on jvm and moar ?

[13:33] *** ajr_ left
[13:33] <lizmat> .tell jnthn could it be that $!PIO.isatty is NYI on jvm and moar ?

[13:33] <yoleaux> lizmat: I'll pass your message to jnthn.

[13:34] <colomon> oh, interesting. 

[13:34] <brrt> also Ven: "Even odder, for small tables, it may be better to do linear searches,

[13:34] <brrt>   touching only a few cache lines, than to hash at all." - this is no news and wasn't news when the e-mail was posted

[13:34] <colomon> I was assuming it was the special case of $*IN / $*OUT that was the issue.

[13:34] <dalek> roast: 19cb59e | usev6++ | S (3 files):

[13:34] <dalek> roast: Fudge for rakudo.jvm release

[13:34] <dalek> roast: review: https://github.com/perl6/roast/commit/19cb59eb91

[13:34] <lizmat> nope

[13:34] *** ajr joined
[13:34] <colomon> lizmat++

[13:35] *** ajr is now known as Guest3376

[13:35] *** azawawi joined
[13:35] <azawawi> hi

[13:35] *** Guest3376 is now known as ajr_

[13:39] <azawawi> http://paste.debian.net/128317/    # How can I speed @list.grep( { $_ ~~ /$pattern/ }  ) ?

[13:41] <azawawi> http://paste.debian.net/128319/   # without the <$pattern>... use this please

[13:41] <Ven> can't you .grep(/$pattern/) ?

[13:41] <azawawi> Ven: yeah it was a mistake

[13:42] <azawawi> for 1400 file names (i.e. strings), that grep takes like 10 secs

[13:42] <azawawi> which is very slow

[13:43] <Ven> right. needs some parallelization :P

[13:43] <azawawi> Ven: same performance with .grep(/$pattern/)

[13:44] <Ven> yes, I guessed so. I was just saying :P

[13:44] <Ven> well, maybe a *little bit* faster as the pattern isn't recompiled

[13:46] *** xfix joined
[13:47] <PerlJam> azawawi: .grep seems to be implemented in terms of .map, so to make .grep faster you'd have to make MapIter faster.

[13:49] <PerlJam> you could probably make your own specialized grep that doesn't use map that is faster.

[13:50] * azawawi tries a manual grep :)

[13:53] <azawawi> PerlJam: the bottleneck seems to be in the $file_name ~~ /$pattern/

[13:53] <colomon> is $file_name a string?

[13:53] <azawawi> yeah

[13:54] <colomon> hmmm…. try my $compiled-pattern = m/$pattern/  and then grep($compiled-pattern)  ?

[13:54] * colomon doesn't know if that's really compiled

[13:54] <colomon> actually, that seems unlikely to help?

[13:54] <azawawi> tried it... same performance...

[13:54] <colomon> try it with an explicit pattern instead of a variable?

[13:55] <azawawi> it is way faster

[13:55] <colomon> so probably .grep isn't the issue

[13:55] <azawawi>  /$pattern/ seems to be the bottleneck

[13:55] <colomon> yeah

[14:02] <azawawi> m: my @s = 'aaa'..'zzz'; say @s.elems; my $p = 'aa'; my $t = time; my @m = @s.grep(/$p/); say @m; say "{time - $t} secs";

[14:02] <colomon> seems like there must be a way around that with EVAL, but I dunno what it is

[14:02] <camelia> rakudo-moar 315ec6: OUTPUT«17576␤aaa aab aac aad aae aaf aag aah aai aaj aak aal aam aan aao aap aaq aar aas aat aau aav aaw aax aay aaz baa caa daa eaa faa gaa haa iaa jaa kaa laa maa naa oaa paa qaa raa saa taa uaa vaa waa xaa yaa zaa␤14 secs␤»

[14:02] <azawawi> m: my @s = 'aaa'..'zzz'; say @s.elems; my $t = time; my @m = @s.grep(/aa/); say @m; say "{time - $t} secs";

[14:02] <camelia> rakudo-moar 315ec6: OUTPUT«17576␤aaa aab aac aad aae aaf aag aah aai aaj aak aal aam aan aao aap aaq aar aas aat aau aav aaw aax aay aaz baa caa daa eaa faa gaa haa iaa jaa kaa laa maa naa oaa paa qaa raa saa taa uaa vaa waa xaa yaa zaa␤2 secs␤»

[14:03] <azawawi> 14 secs for /$p/

[14:03] <azawawi> 2 secs for /aa/

[14:04] *** thou joined
[14:08] *** immortal joined
[14:10] *** ptc_p6 left
[14:11] *** erkan left
[14:12] <masak> azawawi: that... sounds like it could be optimized somewhat.

[14:12] *** sjn_ is now known as sjn

[14:14] <brrt> btw, do we (perl) have a room for fosdem 2015 yet

[14:14] <dalek> Perlito: 634b582 | (Flavio S. Glock)++ | / (3 files):

[14:14] <dalek> Perlito: Perlito5 - js - create internal function p5tr() - wip

[14:14] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/634b582416

[14:15] <brrt> seems we do

[14:20] <azawawi> masak: true

[14:21] <azawawi> masak: it seems that /$pattern/ is getting recompiled every time

[14:26] <FROGGS> m: my @s = 'aaa'..'zzz'; say @s.elems; my $p = anon regex { aa }; my $t = time; my @m = @s.grep($p); say @m; say "{time - $t} secs";

[14:26] <camelia> rakudo-moar 315ec6: OUTPUT«17576␤aaa aab aac aad aae aaf aag aah aai aaj aak aal aam aan aao aap aaq aar aas aat aau aav aaw aax aay aaz baa caa daa eaa faa gaa haa iaa jaa kaa laa maa naa oaa paa qaa raa saa taa uaa vaa waa xaa yaa zaa␤2 secs␤»

[14:27] <FROGGS> azawawi: ---^

[14:27] *** kaare_ joined
[14:27] <FROGGS> colomon: you don't need to EVAL anything there

[14:28] <colomon> FROGGS: will that work if you stick a variable in the anon regex definition?  That's the issue at hand.

[14:28] * colomon admits he totally did not know that anon regex syntax.  FROGGS++

[14:31] <FROGGS> m: my @s = 'aaa'..'zzz'; say @s.elems; my $aa = 'aa'; my $p = anon regex { $aa }; my $t = time; my @m = @s.grep($p); say @m; say "{time - $t} secs";

[14:31] <FROGGS> wait for it...

[14:31] <camelia> rakudo-moar 315ec6: OUTPUT«17576␤aaa aab aac aad aae aaf aag aah aai aaj aak aal aam aan aao aap aaq aar aas aat aau aav aaw aax aay aaz baa caa daa eaa faa gaa haa iaa jaa kaa laa maa naa oaa paa qaa raa saa taa uaa vaa waa xaa yaa zaa␤14 secs␤»

[14:31] <FROGGS> m: my @s = 'aaa'..'zzz'; say @s.elems; my $aa = 'aa'; my $p = anon regex { "$aa" }; my $t = time; my @m = @s.grep($p); say @m; say "{time - $t} secs";

[14:32] <camelia> rakudo-moar 315ec6: OUTPUT«17576␤aaa aab aac aad aae aaf aag aah aai aaj aak aal aam aan aao aap aaq aar aas aat aau aav aaw aax aay aaz baa caa daa eaa faa gaa haa iaa jaa kaa laa maa naa oaa paa qaa raa saa taa uaa vaa waa xaa yaa zaa␤2 secs␤»

[14:32] <FROGGS> there you go :o)

[14:33] <FROGGS> m: my @s = 'aaa'..'zzz'; say @s.elems; my $p = 'aa'; my $t = time; my @m = @s.grep(/ "$p" /); say @m; say "{time - $t} secs";

[14:33] <camelia> rakudo-moar 315ec6: OUTPUT«17576␤aaa aab aac aad aae aaf aag aah aai aaj aak aal aam aan aao aap aaq aar aas aat aau aav aaw aax aay aaz baa caa daa eaa faa gaa haa iaa jaa kaa laa maa naa oaa paa qaa raa saa taa uaa vaa waa xaa yaa zaa␤2 secs␤»

[14:33] <FROGGS> azawawi: see this one ---^

[14:34] *** erkan joined
[14:36] <JimmyZ> looks like /$p/ needs to be optimized 

[14:36] <PerlJam> Why does that make a difference?

[14:36] *** treehug88 joined
[14:36] *** immortal left
[14:40] <timotimo> could be it thinks it has to continue working after $aa gets changed so it could be it has to (or thinks it has to) close over that 

[14:41] <timotimo> maybe that ought to grab the value of $aa only one at the start of parsing,  but consist you can change $aa inside a code block, too

[14:41] <PerlJam> m: my @s = 'aaa'..'zzz'; say @s.elems; my $p = 'aa'; my $r = rx/ $p /; my $t = time; my @m = @s.grep($r); say @m; say "{time - $t} secs";

[14:41] <timotimo> really depends on what the specs guarantee (or allow) 

[14:42] <camelia> rakudo-moar 315ec6: OUTPUT«17576␤aaa aab aac aad aae aaf aag aah aai aaj aak aal aam aan aao aap aaq aar aas aat aau aav aaw aax aay aaz baa caa daa eaa faa gaa haa iaa jaa kaa laa maa naa oaa paa qaa raa saa taa uaa vaa waa xaa yaa zaa␤14 secs␤»

[14:42] <timotimo> can you add a $please. =such? 

[14:42] <timotimo> dann phone keyboards 

[14:43] <[Coke]>  m: my Int @a; @a[4]++; say @a[0]; @a[2]=3;  say @a

[14:43] *** ajr_ left
[14:43] <camelia> rakudo-moar 315ec6: OUTPUT«(Int)␤(Any) (Any) 3 (Any) 1␤»

[14:44] <[Coke]> RT #123037 - seems "ok" that the undefined elements are (Any) instead of (Int) there. If you want to know what the constraint is, that's not how you should be checking. What's the harm?

[14:44] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123037

[14:44] *** guru joined
[14:45] *** guru is now known as Guest98211

[14:46] *** Guest98211 is now known as ajr_

[14:48] <azawawi> FROGGS: Perfect :)

[14:48] <azawawi> FROGGS++

[14:48] *** ajr_ left
[14:48] <FROGGS> [Coke]: imagine:  my Kitty @a; ... ; @a[42].=meow()

[14:49] *** ajr joined
[14:49] <sjn> jnthn's performance talk at YAPC is out \o/ https://www.youtube.com/watch?v=bhAIyrk2ogo 

[14:49] *** ajr is now known as Guest8245

[14:50] <FROGGS> \o/

[14:50] *** Guest8245 is now known as ajr_

[14:50] <sjn> severa other from the main track too D

[14:50] <sjn> :D

[14:50] <sjn> several*

[14:50] <sjn> FINALLY

[14:51] <azawawi> farabi6 is way faster now :)

[14:52] <FROGGS> *g*

[14:52] <FROGGS> nice :o)

[14:53] <azawawi> https://github.com/azawawi/farabi6/commit/da163bc610b726dd5fe6dc4e7271ded5dea414b6   # FROGGS++

[14:55] <[Coke]> FROGGS: doesn't change my answer.

[14:55] <[Coke]> m: my Junction @a; @a[4] = 1|3; say @a;

[14:55] <camelia> rakudo-moar 315ec6: OUTPUT«(Any) (Any) (Any) (Any) any(1, 3)␤»

[14:55] <[Coke]> ok . THAT's a bug. :)

[14:55] <colomon> FROGGS++

[14:56] <FROGGS> [Coke]: the harm is that you cannot rely on your trait when Any sneaks into the autoviv'd slots

[14:56] <azawawi> FROGGS: but it would be nice that /$pattern/ is optimized though

[14:57] <FROGGS> azawawi: I'd like to hear jnthn on that topic, I bet he can explain why it is how it is right now...

[14:57] *** ecocode left
[14:57] <FROGGS> azawawi: I can kinda imagine why it should be that why, but I can't explain it

[14:58] <azawawi> oh well :)

[14:58] <azawawi> at least it is faster now :)

[14:58] <FROGGS> that way*

[14:58] <FROGGS> yeah :o)

[14:58] <azawawi> the other problem is https://github.com/MoarVM/MoarVM/issues/149 :)

[14:59] <azawawi> you add a Ctrl-C handler... you get 100% cpu usage for free :)

[14:59] <FROGGS> *g*

[14:59] <azawawi> FROGGS: thanks for your help. I got to go home now :)

[15:00] <azawawi> have a nice weekend everyone

[15:00] <FROGGS> azawawi: see ya :o)

[15:00] * azawawi &

[15:03] <lizmat> seems p5p is starting a project to rewrite the regex compiler

[15:04] <FROGGS> lizmat: what's the motivation?

[15:04] *** azawawi left
[15:04] <lizmat> if I could only convince those people to use their brainpower more towards the future than towards the past

[15:04] <FROGGS> :o)

[15:05] <lizmat> "Recent bugs and developments in the regex compiler have made me think that the code we have is too close to unmaintainable.  The process of a compiling a pattern is inefficient, difficult to work with, extend or optimise, and IMO error prone"

[15:06] *** Ven left
[15:06] <FROGGS> lizmat: I have that feeling about other code bases as well

[15:08] <geekosaur> so how many times have they rewritten the regex compiler to be maintainable now?

[15:08] <geekosaur> (and how many of those were successful?)

[15:09] <lizmat> at least once, to my knowledge

[15:09] <brrt> tell them we have JIT-table regexes

[15:09] <brrt> ;-)

[15:09] <FROGGS> :P

[15:10] <lizmat> alas, I'm the wrong person to tell the initiator of this project just that  :-(

[15:10] <geekosaur> I can only think of the one successful one, the others ran up against the sudden sinking realization that all those horrible special cases / hacks were relied up by too many other things

[15:10] <moritz> geekosaur: well, since perl 5.10 it doesn't use the stack for recursion anymore. I'm sure that was a non-trivial rewrite

[15:10] <geekosaur> redesigning p5's regex engine comes very close to redesigning p5's entire core

[15:11] *** yeahnoob left
[15:11] <lizmat> well, no, I don't think so: P5's regex engine is quite separate from the rest of the system

[15:11] <lizmat> a pitfall that P6 mended

[15:12] *** chenryn joined
[15:12] <geekosaur> I recall their being "optimizations" everywhere that led to pretty much everything having "private" access to the regex engine's internals

[15:13] <geekosaur> maybe ilya's rewrite fixed that, I was kinda on my way out of the p5 community at that point, but my impression was untangling the mess was well nigh impossible

[15:15] <geekosaur> (more to the point, your pitfall is an API level thing, I am talking about hidden-action-at-a-distance stuff that p6 is going out of its way to avoid...)

[15:15] *** rurban1 joined
[15:17] <dalek> Perlito: dc8529e | (Flavio S. Glock)++ | / (2 files):

[15:17] <dalek> Perlito: Perlito5 - js - internal function p5tr() - wip

[15:17] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/dc8529e670

[15:19] *** rurban left
[15:21] <lizmat> geekosaur: I hadn't realised that IlyaZ has done a rewrite as well

[15:21] <geekosaur> that may date me, it would have been in the early to mid 90s sometime

[15:23] <PerlJam> mid to late 90s by my recollection, but whatever  :)

[15:23] *** yeahnoob joined
[15:24] <geekosaur> it was certainly being discussed before that. given the state of the rgeex engine at the time, I can well imagine it took that long to actually happen :)

[15:25] * geekosaur was sidelined by illness in 1995 and went radio silent for a couple years, so would have missed the denouement

[15:26] <lizmat> geekosaur++ for getting better and back :-)

[15:27] *** molaf joined
[15:27] <PerlJam> Didn't someone (dmerphq?) add quite a few regex features and optimizations in the last 10 years or so?

[15:28] <PerlJam> (I haven't paid too much attention to p5p since around 2000)

[15:29] <lizmat> PerlJam: yes, he did

[15:29] <PerlJam> And there was no rewrite associated with that?

[15:29] <lizmat> only partial, afaik

[15:30] <lizmat> PerlJam: you're doing the release, right?

[15:30] <PerlJam> lizmat: yep.

[15:30] <lizmat> are we in release freeze?

[15:30] <PerlJam> If you know of a better way to ping jnthn or someone to do a moarvm release, please do  :)

[15:32] *** brrt left
[15:32] <lizmat> afk for a bit&

[15:38] *** yeahnoob left
[15:40] * PerlJam forgot how long it takes parrot to do things.

[15:42] *** Hor|zon left
[15:42] *** denis_boyun left
[15:43] <PerlJam> So, when running tests on nqp-p, I get a failure on t/nqp/46-charspec.t  ... Unrecognized character name LATIN SMALL LETTER O at line 10, near ", LATIN SM"

[15:43] *** FROGGS left
[15:44] <PerlJam> I'm guessing that's because of ICU somehow?

[15:46] *** zakharyas left
[15:47] *** FROGGS[mobile] joined
[15:49] *** Hor|zon joined
[15:49] <JimmyZ> no icu？

[15:49] *** ghostlines left
[15:52] *** yeahnoob joined
[15:55] <[Coke]> FROGGS[mobile]: what do you mean, "rely on your trait" ?

[15:56] <FROGGS[mobile]> it means that I want to have Kitties in the slots of an Array[Kitty]

[15:57] <FROGGS[mobile]> so I would expect that I can call methods on a Kitty type object on an autoviv'd slot

[15:58] *** ugator joined
[15:59] <[Coke]> ... ok, fair enough.

[16:01] *** rurban1 left
[16:03] <smls> FROGGS[mobile]: I think that already works.

[16:03] *** JimmyZ left
[16:03] <smls> m: my Int @a; @a[4]=4; say @a[0];

[16:03] <camelia> rakudo-moar 315ec6: OUTPUT«(Int)␤»

[16:04] <smls> It's just when you .Str / .gist / .perl the whole array, that the "(Any)" show up

[16:05] <FROGGS[mobile]> ahh, intersting

[16:08] <moritz> m: my Int @a; @a[4] = 4; say EVAL @a.perl

[16:08] <camelia> rakudo-moar 315ec6: OUTPUT«Type check failed in .new; expected 'Int' but got 'Any'␤  in block  at src/gen/m-CORE.setting:9581␤  in method reify at src/gen/m-CORE.setting:8300␤  in method reify at src/gen/m-CORE.setting:8136␤  in method gimme at src/gen/m-CORE.setting:8619␤…»

[16:08] <moritz> that's how you know it's a bug :-)

[16:09] <PerlJam> moritz++

[16:13] *** smls left
[16:13] *** Hor|zon left
[16:14] <dalek> rakudo/nom: b2e81b9 | duff++ | docs/announce/2014.10.md:

[16:14] <dalek> rakudo/nom: Add release name

[16:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b2e81b989a

[16:16] *** yeahnoob left
[16:21] *** treehug88 left
[16:27] *** Hor|zon joined
[16:33] *** Mso150 joined
[16:38] * [Coke] wonders if PROFIELR_OUTPUT is intentional.

[16:42] <japhb> Just skimming scrollback, I see a LOT of talk of performance issues and optimization over the last week.  To all those dealing with particular performance problems, pretty please can some of them result in PR's (or commits, of course) to perl6-bench?

[16:42] *** yukko joined
[16:43] <japhb> I can't keep up with this channel well enough to track all the things we're not yet benchmarking, but if even half the people with a performance itch scratch their way to a benchmark, we'd have much broader coverage.

[16:43] <japhb> :-)

[16:43] *** Isp-sec joined
[16:44] <japhb> (Myself I'm focused on how to visualize stress test results at the moment.)

[16:47] <masak> japhb++

[16:52] *** Hor|zon left
[16:58] *** guru joined
[16:58] *** ajr_ left
[16:58] *** guru is now known as Guest79681

[16:59] *** Guest79681 is now known as ajr_

[16:59] *** dakkar left
[17:02] *** Mso150 left
[17:03] *** Mso150 joined
[17:06] *** virtualsue left
[17:08] *** SamuraiJack joined
[17:15] *** smls joined
[17:15] <smls> m: my @a; @a[*-1]; say "alive"

[17:15] <camelia> rakudo-moar 315ec6: OUTPUT«Unsupported use of [-1] subscript to access from end of Array; in Perl 6 please use [*-1]␤  in block <unit> at /tmp/ePbngOP0Nw:1␤␤»

[17:16] <smls> ;)

[17:16] <vendethiel-> camelia wtf?

[17:16] <smls> Should ideally die/warn with "Out of bounds" instead...

[17:17] *** grettis joined
[17:17] <smls> vendethiel-: It's because it evaluate the WhateverCode first, and then checks the *result* of that to catch said Perl5-ism

[17:18] *** Hor|zon joined
[17:18] <masak> that bug has been submitted somewhere

[17:18] <masak> it's in RT

[17:18] <smls> k

[17:23] *** Hor|zon left
[17:23] <smls> .oO( Newest discipline in the Perl Olympics: Make Rakudo fail with an error message that tells you to 'use instead' exactly what you were alrady using... )

[17:23] *** ajr_ left
[17:25] *** ajr_ joined
[17:25] <vendethiel-> .oO( compiler golfing )

[17:27] *** bronco_creek joined
[17:29] <bartolin> smls: thats RT #111924

[17:29] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=111924

[17:30] *** bronco_creek left
[17:31] <moritz> m: use fatal; my @a; try { @a[*-1] }; say $!.backtrace.full

[17:31] <camelia> rakudo-moar 315ec6: OUTPUT«  in method throw at src/gen/m-CORE.setting:12125␤  in sub fail at src/gen/m-CORE.setting:13687␤  in sub postcircumfix:<[ ]> at src/gen/m-CORE.setting:2647␤  in sub postcircumfix:<[ ]> at src/gen/m-CORE.setting:2725␤  in block  at /tmp/rFsSLa2j9z:1…»

[17:31] *** bronco_creek joined
[17:34] <bronco_creek> Newbe question: when I try to write to  a file with $foo.say($string_thing) newlines are never written

[17:34] <bronco_creek> I installed on Windows with the latest rakudo/moarvm msi

[17:34] <moritz> bronco_creek: maybe it just writes a line feed, not a carriage return?

[17:35] <bronco_creek> Even if I explicitly have $foo.say("$string_thing\n") it gets chopped

[17:36] <moritz> bronco_creek: try it with \r\n

[17:36] <bronco_creek> I'll give that a try.  Thanks moritz.

[17:42] <bronco_creek> Moritz: that worked.  .say seems to work differently to a file than to STDOUT.  Thanks again.

[17:43] <PerlJam> sounds like a bug in say to me.

[17:44] *** chenryn left
[17:44] <raydiak> good morning #perl6

[17:44] <yoleaux> 12:10Z <colomon> raydiak: in Math::ThreeD's Build.pm, $?FILE.path.absolute.parent.child('gen-libs.p6') is wrong.  The absolute part needs to come last, because it generates a Str instead of a Path.

[17:45] <colomon> o/

[17:45] *** [Sno] left
[17:45] *** gfldex joined
[17:46] <raydiak> so if I don't do .absolute first, I guess .parent automatically prepends a '../' then ?

[17:46] <raydiak> I did that b/c I wanted to be working w/the full path, not a relative version of it

[17:46] *** FROGGS joined
[17:46] <colomon> raydiak: I don't know.  But what you've got there now definitely does not work.

[17:47] <colomon> m: say $?FILE

[17:47] <camelia> rakudo-moar 315ec6: OUTPUT«/tmp/zWnoU31zrk␤»

[17:47] <raydiak> dang, thanks...used to work

[17:47] <dalek> Perlito: 5291a2c | (Flavio S. Glock)++ | / (2 files):

[17:47] <dalek> Perlito: Perlito5 - js - simple tr()

[17:47] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/5291a2c22b

[17:47] <colomon> yes, I believe this is fallout from lizmat++'s IO changes

[17:48] <raydiak> wonder why it returns a Str instead of a Path (which can be used as a Str)...think it's a bug I should report?

[17:49] <colomon> lizmat?

[17:50] <lizmat> you rang?

[17:50] <lizmat> it's a change of spec

[17:50] <raydiak> why Str instead of Path?

[17:50] <lizmat> because making an IO::Path is rather expensive

[17:51] <lizmat> and in many cases (maybe like the one above), one is only interested in a Str

[17:51] <avuserow> masak: backlogging, saw you mentioning hexagonal grids. Curious how you are representing them and if you've seen http://keekerdc.com/2011/03/hexagon-grids-coordinate-systems-and-distance-calculations/

[17:52] <avuserow> hexagon grids are kind of interesting because there are a bunch of okay ways to represent them, all with pros and cons

[17:52] <raydiak> lizmat: hm...okay, thanks, I won't report it as a bug then :)

[17:52] <lizmat> I'm not saying it is without bugs

[17:52] <lizmat> but please check the spec in S16 / S32:IO

[17:52] <bronco_creek> Bye for now o/

[17:52] *** bronco_creek left
[17:53] <raydiak> will do

[17:53] <lizmat> if you want to turn a Str into a Path, use .IO

[17:53] <dalek> Perlito: a4b08f3 | (Flavio S. Glock)++ | / (2 files):

[17:53] <dalek> Perlito: Perlito5 - js - simple tr() - tweak emitter

[17:53] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/a4b08f3a1a

[17:53] <lizmat> if you're just about filename mangling

[17:54] <colomon> lizmat++

[17:54] <lizmat> you probably don't need .IO at all (except maybe at the end)

[17:54] <lizmat> you can call all of the IO::Spec functions for your situation using $*SPEC

[17:55] <lizmat> afk for a bit again&

[17:55] *** ajr_ left
[17:55] <raydiak> thanks for the tips lizmat++

[17:56] *** guru joined
[17:57] *** guru is now known as Guest26079

[17:57] <raydiak> and thanks for the heads-up colomon++

[17:57] <masak> avuserow: hadn't seen that page. thanks.

[17:57] <masak> avuserow: I've always been partial to the representation under "A better course..."

[17:57] *** Guest26079 left
[17:58] <vendethiel-> *g*

[17:58] <masak> avuserow: first I thought the link would take me to http://www.redblobgames.com/grids/hexagons/ , which I did know about.

[18:00] <masak> avuserow: this morning, I was toying with the xyz representation, just to see if it made my mirrorings fall out nicer.

[18:03] <vendethiel-> I was reading stuff up on ocaml, and it really seems people only use the non-oo part of the language

[18:03] * masak .oO( they'd walk a mile for a caml )

[18:03] *** Mso150_g joined
[18:04] *** Mso150 left
[18:06] *** mauke_ joined
[18:11] *** mauke_ is now known as mauke

[18:14] *** ugator left
[18:20] <ingy> seen jasonmay

[18:20] <vendethiel-> \o, ingy. you're missing a dot

[18:20] <ingy> ?

[18:20] <raydiak> .seen vendethiel- 

[18:20] <yoleaux> I saw vendethiel- 18:20Z in #perl6: <vendethiel-> \o, ingy. you're missing a dot

[18:21] <ingy> .seen jasonmay

[18:21] <yoleaux> I haven't seen jasonmay around.

[18:26] <[Coke]> hio, ingy 

[18:27] *** Mso150 joined
[18:28] *** Mso150_g left
[18:28] *** rurban joined
[18:35] <masak> ahoj, ingy 

[18:35] *** zakharyas joined
[18:38] *** sqirrel_ joined
[18:38] *** FROGGS_ joined
[18:41] <vendethiel> .oO( ahoy, ingj )

[18:42] *** FROGGS left
[18:42] *** sqirrel left
[18:43] *** Hor|zon joined
[18:43] *** sqirrel_ left
[18:45] *** jack_rabbit joined
[18:45] *** Guest1419 left
[18:48] <timotimo> Jo/

[18:50] <dalek> nqp: b3bfe61 | duff++ | tools/build/MOAR_REVISION:

[18:50] <dalek> nqp: Bump MOAR_REVISION for release

[18:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b3bfe61485

[18:50] <dalek> nqp: 8f76ab4 | duff++ | VERSION:

[18:50] <dalek> nqp: bump VERSION to 2014.10

[18:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8f76ab4e6d

[18:51] <moritz> PerlJam: you should comment out the two flappy test files from t/spetest.data for the release

[18:51] *** FROGGS_ left
[18:52] <PerlJam> moritz: which two would those be?  

[18:52] <moritz> PerlJam: S17-procasync/print.t and S17-lowlevel/lock.t

[18:52] <PerlJam> will do, thanks.

[18:53] <timotimo> can't wait to read what these perl6 folk have been doing in the last month

[18:57] *** Guest1419 joined
[18:58] *** kurahaupo joined
[18:59] *** amkrankr1leuen joined
[19:03] *** [Sno] joined
[19:03] *** Mso150 left
[19:04] *** FROGGS_ joined
[19:04] *** Mso150 joined
[19:07] *** mauke_ joined
[19:07] <timotimo> so ... is there a simple way to figure out what class in the method resolution order gets their method selected?

[19:08] <timotimo> hmm, maybe that's what find_method is for

[19:08] *** kurahaupo_ joined
[19:09] <timotimo> aah, .package is the thing i was looking for

[19:09] *** mauke left
[19:10] *** kurahaupo left
[19:10] <timotimo> hah, "set_composalizer"? %)

[19:10] *** rmgk left
[19:13] *** rmgk joined
[19:13] <PerlJam> Anyone have any guidance on what to do about and NQP test that only fails with nqp-p?

[19:13] <moritz> PerlJam: I don't think there's a fudging mechanism

[19:14] <moritz> PerlJam: you'd have to comment out the test for everybody

[19:14] <moritz> PerlJam: or fix it :-)

[19:14] *** SamuraiJack left
[19:14] *** mauke_ is now known as mauke

[19:15] <PerlJam> yeah, that's where I'm at, but I don't think I have will to fix it right now.

[19:15] <timotimo> that should be fine

[19:15] <timotimo> what test is it?

[19:15] <PerlJam> t/nqp/46-charspec.t  the 3rd test

[19:16] <timotimo> oh, charspec? that's unicode trait stuff?

[19:16] <PerlJam> nqp-p barfs with Unrecognized character name LATIN SMALL LETTER O at line 10, near ", LATIN SM"

[19:16] <timotimo> o_O

[19:17] <timotimo> that error report surely is wrong?

[19:17] <moritz> that's such an exotic character!

[19:19] <timotimo> m: Bool(1, 0)

[19:19] <camelia> rakudo-moar 315ec6: ( no output )

[19:19] <timotimo> m: Bool(1, 0).perl.say

[19:19] <camelia> rakudo-moar 315ec6: OUTPUT«Bool::True␤»

[19:20] <timotimo> m: Bool(0, 1).perl.say

[19:20] <camelia> rakudo-moar 315ec6: OUTPUT«Bool::True␤»

[19:20] <timotimo> that's kinda strange

[19:20] *** j4jackj joined
[19:21] <dalek> perl6-roast-data: f80760f | coke++ | / (5 files):

[19:21] <dalek> perl6-roast-data: today (automated commit)

[19:21] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/f80760f05a

[19:22] <PerlJam> timotimo: think of it as Bool( (0,1) ).perl.say and it's less strange I think

[19:23] <timotimo> yeah, but that's not something we do

[19:23] <PerlJam> m: my @a = "a".."z";  Bool(@a).perl.say;   # another example

[19:23] <camelia> rakudo-moar 315ec6: OUTPUT«Bool::True␤»

[19:23] <timotimo> m: enum Boor <Trew Fawls FailNotFawnd>; say Boor(1, 2, 3).perl

[19:23] <camelia> rakudo-moar 315ec6: OUTPUT«Boor::Fawls␤»

[19:24] <timotimo> we don't just turn the arg list into a list in a coercer

[19:26] <PerlJam> perhaps we're missing a constraint somewhere

[19:26] <timotimo> yeah, see Enumeration.pm

[19:26] <timotimo> this dance is kind of interesting

[19:26] <timotimo> nqp::atpos(nqp::p6argvmarray, 1).at_pos(0)

[19:26] <timotimo> is the argvmarray perhaps an array with the positionals and then the nameds as elements?

[19:27] <timotimo> er

[19:27] <timotimo> like a hash of nameds and a list of positionals?

[19:27] <timotimo> well, the invocant, the list of positionals and the hash of nameds perhaps

[19:28] *** Hor|zon left
[19:28] <timotimo> m: say True(0)

[19:28] <camelia> rakudo-moar 315ec6: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/perAltexPH␤Variable '&True' is not declared␤at /tmp/perAltexPH:1␤------> [32msay [33m⏏[31mTrue(0)[0m␤»

[19:28] <timotimo> m: say True

[19:28] <camelia> rakudo-moar 315ec6: OUTPUT«True␤»

[19:28] <timotimo> m: say Bool(True)

[19:28] <camelia> rakudo-moar 315ec6: OUTPUT«True␤»

[19:28] <masak> m: say Bool(Bool)

[19:28] <camelia> rakudo-moar 315ec6: OUTPUT«False␤»

[19:28] <dalek> nqp: ce6e3cb | duff++ | t/nqp/46-charspec.t:

[19:28] <dalek> nqp: comment out failing test for now

[19:28] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ce6e3cb80b

[19:29] <masak> m: say Int(Int)

[19:29] <camelia> rakudo-moar 315ec6: OUTPUT«(Int)␤»

[19:29] <masak> m: say Str(Str)

[19:29] <camelia> rakudo-moar 315ec6: OUTPUT«use of uninitialized value of type Str in string context  in block <unit> at /tmp/nWcMzAQQzZ:1␤␤␤»

[19:29] *** psch joined
[19:30] <lizmat> m: my Int @a; @a[4] = 4; say @a.perl   # FWIW, I have a fix for this issue, but will wait until after the release

[19:30] <camelia> rakudo-moar 315ec6: OUTPUT«Array[Int].new(Any, Any, Any, Any, 4)␤»

[19:30] *** araujo joined
[19:30] <psch> evening, #perl6 o/

[19:30] <masak> lizmat++

[19:30] <masak> psch: \o

[19:30] * PerlJam still can't get over how slow computers continue to seem sometimes.

[19:31] <psch> i noticed i appeared as a contributer \o/

[19:32] <psch> i purposefully didn't create a PR for CREDITS, because someone somewhen said the first commit should be adding oneself there

[19:32] <psch> and i'm still not quite in a position to send the CLA

[19:32] <psch> on that note: PerlJam++ for the release

[19:33] <masak> adding oneself to CREDITS is more of a tradition than a requirement, I guess.

[19:33] <PerlJam> I think it makes the contributors list a little nicer in that it shows everyone by name

[19:33] <PerlJam> (if they're in the CREDITS)

[19:36] <psch> fwiw, i don't mind appearing by name, but i also don't need to

[19:37] <psch> and considering that PerlJam probably moved past that point and might have tagged already, it's probably not sensible anymore to do now :)

[19:37] *** xfix is now known as notfix

[19:38] <PerlJam> psch: nah, there's still time

[19:38] <timotimo> here's an interesting question:

[19:39] <timotimo> how do we generate the one-argument cases for infix operators that get meta'd by R?

[19:39] <timotimo> i kind of think R should be a no-op in that case

[19:39] *** travis-ci joined
[19:39] <travis-ci> NQP build failed. Jonathan Scott Duff 'comment out failing test for now'

[19:39] <travis-ci> http://travis-ci.org/perl6/nqp/builds/38855989 https://github.com/perl6/nqp/compare/8f76ab4e6d1c...ce6e3cb80b80

[19:39] *** travis-ci left
[19:39] <lizmat> .oO( another out of disk space? )

[19:39] <timotimo> no

[19:40] <timotimo> a single test case in 46-charspec.t is failing

[19:40] <timotimo> on parrot

[19:41] <lizmat> Question: my @a; .say for @a   # which method is called to iterate over @a in this case?

[19:42] *** Ven joined
[19:42] *** Akagi201_ joined
[19:43] <moritz> currently (@a, ).map # iirc

[19:47] *** guru joined
[19:47] *** guru is now known as Guest81480

[19:47] * lizmat checks

[19:47] *** Guest81480 is now known as ajr_

[19:48] <lizmat> nope  :-(

[19:48] *** immortal joined
[19:49] <moritz> m: my @a = 1; die() for @a;

[19:49] <camelia> rakudo-moar 315ec6: OUTPUT«Died␤  in block <unit> at /tmp/X0fhR537cy:1␤␤»

[19:50] <moritz> m: my @a = 1; try { die() for @a }; say $!.backtrace.full

[19:50] <camelia> rakudo-moar 315ec6: OUTPUT«  in method throw at src/gen/m-CORE.setting:12125␤  in sub die at src/gen/m-CORE.setting:759␤  in block  at /tmp/K3rfiKp1wy:1␤  in block  at src/gen/m-CORE.setting:8300␤  in method reify at src/gen/m-CORE.setting:8223␤  in block  at src/gen/m-COR…»

[19:50] *** erkan left
[19:50] <lizmat> moritz++

[19:50] <moritz> lizmat: my theory is that it calls .map

[19:50] <moritz> lizmat: and on the return value, calls sink

[19:51] <moritz> which then goes through the gimme/reify/reify chain

[19:51] *** Mso150 left
[19:51] *** cognominal joined
[19:51] <dalek> nqp: e600d5c | duff++ | t/nqp/46-charspec.t:

[19:51] <dalek> nqp: oops, forgot to change the plan

[19:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e600d5cd4f

[19:52] *** Mso150 joined
[19:52] <psch> grml

[19:52] <psch> accident PR from the wrong branch

[19:53] *** ecocode joined
[19:53] *** smls left
[19:54] *** kjs_ joined
[19:55] <psch> just to make sure: U: lines don't exclusively apply to git/svn nicks, but irc as well?

[19:55] * moritz wonders how slow it is to read 400k lines in rakudo, and json-ing them

[19:56] <lizmat> reading the lines with :eager should be pretty fast now

[19:56] <PerlJam> psch: pretty sure.

[19:56] *** FROGGS[mobile] left
[19:56] <moritz> lizmat: sorry, but :eager is cheating

[19:57] <moritz> to-json('/usr/share/dict/ngerman'.path.lines.classify(*.substr(0, 2).lc)); # is the code I'm timing

[19:57] <lizmat> moritz: please s/path/IO/

[19:57] <psch> PerlJam: https://github.com/rakudo/rakudo/pull/325 then

[19:58] <moritz> lizmat: I'm going with open(), I'm know (how) that one works :-)

[19:58] <avuserow> masak: after making a somewhat bizarre choice for a hexagon grid, I agree with their better course. (My method was to have every other row have its y value offset by 0.5 IIRC, and then pretend it's a square grid. It has interesting properties of its own but isn't great.)

[19:59] <masak> heh.

[19:59] <masak> yeah, I can see how that one's possible.

[19:59] <masak> I do have a soft spot for integers, though.

[19:59] <lizmat> moritz: getting lost in reify land, so keeping the Int @a.perl fix to just .perl

[20:00] <masak> they're God-made, after all.

[20:00] <lizmat> instead of fixing it more generally for 'for @a'

[20:00] <lizmat> afk for a bit&

[20:00] <raydiak> avuserow: I've done the same thing for a triangular grid before

[20:00] <avuserow> so one of these days, I was wanting to make a custom data structure (as opposed to storing it in a hash, ewww) that would allow hex grids to be stored better

[20:00] <avuserow> also interesting is how the game Civilization 5 does hex grids -- answer primarily being "poorly"

[20:00] <masak> I just store mine in a 2s array.

[20:01] <masak> 2D*

[20:01] <avuserow> they have multiple coordinate systems that their game scripts have to convert between (think embedded lua for some game code)

[20:01] *** travis-ci joined
[20:01] <travis-ci> NQP build passed. Jonathan Scott Duff 'oops, forgot to change the plan'

[20:01] <travis-ci> http://travis-ci.org/perl6/nqp/builds/38857941 https://github.com/perl6/nqp/compare/ce6e3cb80b80...e600d5cd4fa6

[20:01] *** travis-ci left
[20:01] <avuserow> raydiak: a triangular grid sounds interesting, have any reading on it?

[20:02] <avuserow> masak: I would want a 2D array but with negative indexes, because my use cases involve extending it after the fact in potentially any direction

[20:02] <raydiak> avuserow: nah I just kinda did what seemed right :) it was a 3d terrain-roaming demo I wrote in lua

[20:02] <PerlJam> travis-ci joins just long enough to say something, then leaves?  that feels weird.

[20:03] <raydiak> avuserow: but a triangle grid is basically a hex grid with an extra vertex in the middle of each hex

[20:03] <moritz> PerlJam: lots of bots do that

[20:03] <moritz> PerlJam: like the github notification bot

[20:03] <masak> avuserow: I'm pretty sure you can build that with today's Rakudo.

[20:04] <PerlJam> maybe so

[20:04] *** Hor|zon joined
[20:04] <avuserow> masak: then maybe I'll try to translate my proof-of-concept P5 implementation to P6... if I stop being so tired after $dayjob

[20:05] <avuserow> oh wait, that implementation does the silly 0.5 offsets... which may actually be more interesting to implement

[20:06] *** fhelmberger joined
[20:06] <masak> :)

[20:07] <masak> meanwhile, my move pattern matcher now correctly identifies symmetries in patterns.

[20:07] <psch> another thing on my mind is that after bringing my cliparser branch up-to-date by rebasing it onto nom yesterday or so it stops building

[20:07] <moritz> meh, where did the icycle graph / flame graph go?

[20:08] <moritz> I just made a --profile, and there's no such thing anymore

[20:08] <moritz> should be in the call graph tab, right?

[20:08] <psch> apparently partly caused by 1e037277, which is 'Call DYNAMIC when fetching @*INC'

[20:09] <psch> although reverting the parts that break, i.e. lines 42 to 48 doesn't help

[20:09] <psch> i think this might all be too imprecise for feedback, so here's what i'm doing in that branch

[20:09] *** Hor|zon left
[20:09] <avuserow> masak: one final cute thing from my hexagon bookmark stash: http://cssdeck.com/labs/responsive-hexagonal-grid

[20:10] *** Isp-sec left
[20:10] *** treehug88 joined
[20:10] <psch> i'm inheriting from HLL::CommandLine::Parser and HLL::CommandLine::Result in perl6-land (i.e. src/Perl6/CommandLine) and overwriting the corresponding bits from HLL::Compiler in Perl6::Compiler to use those instead of the HLL equivalents

[20:10] <masak> avuserow: heh.

[20:11] *** fhelmberger left
[20:11] <psch> with the ModuleLoader bits reverted i get an 'Error during STable deserialization (probably from loading two classes that cannot be loaded together)' or some such

[20:11] <dalek> rakudo/nom: 6b24ed7 | (Pepe Schwarz)++ | CREDITS:

[20:11] <dalek> rakudo/nom: Add self to CREDITS.

[20:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6b24ed78a3

[20:11] <dalek> rakudo/nom: 4cd5ad5 | duff++ | CREDITS:

[20:11] <dalek> rakudo/nom: Merge pull request #325 from peschwa/credits-psch

[20:11] <dalek> rakudo/nom: 

[20:11] <dalek> rakudo/nom: Add self to CREDITS.

[20:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4cd5ad5278

[20:11] <psch> i remember having had the same error when my CommandLine::Parser didn't inherit from HLL::CommandLine::Parser

[20:12] *** Isp-sec joined
[20:12] *** notfix is now known as nonix

[20:13] *** nonix is now known as nofix

[20:14] <psch> https://github.com/peschwa/rakudo/compare/cliparser-with-grammar#diff-4f7fa503a091c26cdd0dc446b6a12c6fR57 this is where i'd suspect to be a problem, but i don't see it

[20:15] <psch> somewhere around there, not that line... :)

[20:15] <psch> jvm error with a NPE, also in ModuleLoader

[20:16] <dalek> rakudo/nom: 93f4dae | duff++ | docs/announce/2014.10.md:

[20:16] <dalek> rakudo/nom: update contributors

[20:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/93f4dae1b8

[20:16] <dalek> rakudo/nom: 0594d13 | duff++ | t/spectest.data:

[20:16] <dalek> rakudo/nom: comment out flappy tests

[20:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0594d13f0b

[20:16] <dalek> rakudo/nom: 66d3b95 | duff++ | tools/build/NQP_REVISION:

[20:16] <dalek> rakudo/nom: [release] bump NQP revision

[20:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/66d3b95902

[20:16] <dalek> rakudo/nom: a372592 | duff++ | VERSION:

[20:16] <dalek> rakudo/nom: [release] bump VERSION

[20:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a37259208a

[20:18] *** Hor|zon joined
[20:21] *** ecocode left
[20:22] *** FROGGS_ left
[20:22] *** ecocode joined
[20:24] *** Ven left
[20:24] *** Hor|zon left
[20:24] *** Mso150 left
[20:26] *** travis-ci joined
[20:26] <travis-ci> Rakudo build failed. Jonathan Scott Duff '[release] bump VERSION'

[20:26] <travis-ci> http://travis-ci.org/rakudo/rakudo/builds/38860399 https://github.com/rakudo/rakudo/compare/4cd5ad5278d0...a37259208a0e

[20:26] *** travis-ci left
[20:29] <masak> 'night, #perl6

[20:29] <psch> good night, masak

[20:29] <PerlJam> good night masak

[20:33] *** rurban left
[20:42] *** zakharyas left
[20:42] *** virtualsue joined
[20:43] *** kjs_ left
[20:44] *** nofix is now known as notfix

[20:51] *** Ven joined
[20:57] *** jack_rabbit left
[20:59] *** virtualsue left
[21:01] *** kaare_ left
[21:03] * psch sleep & 

[21:04] *** Ven left
[21:07] *** psch left
[21:08] * lizmat confirms spectest clean on moar

[21:17] *** gfldex left
[21:21] <itz> "Coloring in colorForth has semantic meaning" <=- seems like we missed a trick ;)

[21:22] *** ecocode left
[21:24] <PerlJam> Well ... my machine is still spectesting and I have to go take my son to a baseball game.  I'll have to finish the release later tonight.

[21:24] <PerlJam> bbl &

[21:26] * lizmat goes to sleep&

[21:32] *** molaf left
[21:33] *** woolfy joined
[21:40] *** erkan joined
[21:40] *** erkan left
[21:40] *** erkan joined
[21:42] *** immortal left
[21:51] *** Isp-sec left
[21:52] <cognominal> itz: to do that you must have an environment wich comes with a editor that know the language. Have payed with forth  more than 25 years, I would not be surprised to be possible except I don't know any forth with graphic style as sematic.

[21:53] *** immortal joined
[21:53] *** immortal left
[21:53] *** immortal joined
[21:53] *** j4jackj left
[21:53] *** j4jackj joined
[21:53] <cognominal> itz: to do that, you must have an environment which comes with an editor that knows the language. Having played with forth  more than 25 years, I would not be surprised to be possible except I don't know any forth with graphic style as semantic.

[21:55] *** erkan left
[22:09] *** colomon joined
[22:14] *** erkan joined
[22:15] *** immortal left
[22:20] *** Hor|zon joined
[22:28] *** Hor|zon left
[22:58] <ingy> O HAI vendethiel [Coke] masak! o/

[22:58] <ingy> busy day in #inline :)

[23:10] *** bjz left
[23:20] *** chenryn joined
[23:25] *** kurahaupo_ left
[23:30] *** cognominal left
[23:31] *** chenryn left
[23:45] *** immortal joined
[23:46] *** leont left
[23:47] *** erkan left
[23:49] *** ajr_ left
