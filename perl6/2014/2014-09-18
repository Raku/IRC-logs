[00:04] *** ab5tract joined
[00:05] <dalek> std: fc92e1e | TimToady++ | / (5 files):

[00:05] <dalek> std: get back into a self-hosting state

[00:05] <dalek> std: review: https://github.com/perl6/std/commit/fc92e1e4ad

[00:08] *** jerrycheung joined
[00:09] *** mr-foobar left
[00:10] *** mr-foobar joined
[00:10] <TimToady> std: "be happy"

[00:10] <camelia> std fc92e1e: OUTPUT¬´ok 00:01 138m‚ê§¬ª

[00:10] <TimToady> \o/

[00:10] <BenGoldberg> std: "don't worry" ~ "be happy"

[00:10] <camelia> std fc92e1e: OUTPUT¬´ok 00:01 140m‚ê§¬ª

[00:11] <TimToady> that too altogether Too Long

[00:12] <BenGoldberg> That's one second + 138 milliseconds?

[00:12] <BenGoldberg> std:

[00:12] <BenGoldberg> std: ;

[00:12] <camelia> std fc92e1e: OUTPUT¬´ok 00:01 137m‚ê§¬ª

[00:12] <TimToady> no, I mean the patching took too long

[00:12] <BenGoldberg> Ahh.

[00:13] <TimToady> I've been working on it for most of 24 hours

[00:14] <diakopter> std: my %a{%a}

[00:14] <camelia> std fc92e1e: OUTPUT¬´ok 00:01 141m‚ê§¬ª

[00:16] <diakopter> a rollicking throwback https://rt.perl.org/Public/Bug/Display.html?id=119369

[00:16] <diakopter> TimToady: did you have to work around a perlbug?

[00:17] <TimToady> still not entirely sure about that

[00:18] <TimToady> there was one place that depending on hash order, but that doesn't seem to have caused the bug

[00:18] <TimToady> anyway, I forced infix_postfix_meta_operator to return the correct position, and doctored up viv to allow False to be parsed as a name as well as an identifier, and suppressed experimental warnings

[00:19] <TimToady> and did a 'make reboot' to get all that into the bootstrap

[00:19] *** raiph left
[00:19] <TimToady> shower &

[00:20] <diakopter> std: s|||a||b||c||

[00:20] <camelia> std fc92e1e: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unsupported use of suffix regex modifiers; in Perl 6 please use prefix adverbs at /tmp/_OOybAugfd line 1:‚ê§------> [32ms|||a||b[33m‚èè[31m||c||[0m‚ê§Parse failed‚ê§FAILED 00:01 139m‚ê§¬ª

[00:24] <diakopter> hm. I'm looking back at this irclog, and I don't understand my quote here, _at_ _all_ http://irclog.perlgeek.de/perl6/2013-10-25#i_7762134

[00:24] <diakopter> oh nm, now I do

[00:26] <diakopter> the p6weekly thing needs "on this day in each of the last 9 years of #perl6 quotes"

[00:27] <timotimo> diakopter: if you'd like to contribute an amusing/astounding/funny/interesting/... quote per past year for every week, i'll gladly accept your contributions :)

[00:27] <diakopter> well, they'd be impossible to distinguish from villifying snark

[00:28] <timotimo> may be

[00:29] <diakopter> well, 1 year ago today TimToady was hired at Craigslist

[00:29] <tony-o> nice

[00:34] *** chenryn left
[00:42] *** ab5tract left
[00:43] *** Ben_Goldberg joined
[00:43] *** BenGoldberg left
[00:44] *** Ben_Goldberg is now known as BenGoldberg

[00:49] <timotimo> http://t.h8.lv/p6bench/2014-09-18-pre_release_rakudo.html  /  http://t.h8.lv/p6bench/2014-09-18-pre_release_nqp.html

[00:49] <timotimo> i may have run the newest benches with different parameters or something

[00:53] <timotimo> in quite a few benchmarks, performance has tanked dramatically since the previous release :(

[00:54] <tony-o> timotimo: i have this working on jvm but moar isn't

[00:54] <tony-o> i have a feeling that i'm hitting some ceiling

[00:54] <timotimo> aaw, bummer

[00:54] <tony-o> jvm is just as fast once it burns in (and starts up)

[01:06] *** yeahnoob joined
[01:10] *** JimmyZ joined
[01:14] *** slmult0_z joined
[01:14] <tony-o> timotimo: added middleware tests, seems to be working on moar at the moment

[01:14] *** ab5tract joined
[01:14] <tony-o> i'm also refactoring this stuff as i go to make it less 'Promise' heavy and have better flow control

[01:14] *** bjz left
[01:14] *** FROGGS_ joined
[01:17] *** ab5tract left
[01:18] *** FROGGS left
[01:18] *** Larre_the_cow left
[01:29] *** dayangkun joined
[01:34] *** araujo left
[01:35] *** araujo joined
[01:36] *** leont left
[01:38] *** dayangkun left
[01:39] *** JimmyZ left
[01:51] *** slmult0_z left
[02:03] <retupmoca> timotimo, arnsholt: Net::ZMQ fixed: https://github.com/arnsholt/Net-ZMQ/pull/1

[02:06] <retupmoca> .tell masak I have a couple of PR's open for you (on Data::Pretty and Text::Markdown)

[02:06] <yoleaux> retupmoca: I'll pass your message to masak.

[02:24] *** xragnar left
[02:25] *** chenryn joined
[02:26] *** xragnar joined
[02:34] *** xragnar left
[02:43] *** dj_goku left
[02:44] *** noganex joined
[02:48] *** noganex_ left
[03:06] *** jerrycheung left
[03:09] *** xragnar joined
[03:09] *** xragnar left
[03:11] *** molaf joined
[03:28] *** Akagi201 left
[03:29] *** Akagi201 joined
[03:29] *** jerrycheung joined
[03:31] *** molaf left
[03:33] *** Akagi201 left
[03:39] *** tinyblak joined
[03:47] *** BenGoldberg left
[03:49] *** xragnar joined
[03:51] *** Tacit joined
[03:51] *** Tacit is now known as TacitSage

[04:02] *** Akagi201 joined
[04:03] *** kaare_ joined
[04:05] *** xragnar left
[04:06] *** xragnar joined
[04:09] *** [Sno] left
[04:13] *** anaeem1_ joined
[04:14] *** TacitSage left
[04:16] <awwaiid> I got some perl6 advocacy in today :)

[04:17] <awwaiid> They always see my DCBPW shirt and ask sarcastically about Perl6. Increasingly, I tell them -- Winter is coming.

[04:23] *** kaare_ left
[04:24] *** rindolf joined
[04:29] *** anaeem1__ joined
[04:29] *** anaeem1_ left
[04:31] *** kaare_ joined
[04:35] <dalek> roast: 81291eb | (David Warring [email@hidden.address] | integration/advent20 (7 files):

[04:35] <dalek> roast: [integration] 'temp OUT' => 'my OUT'

[04:35] <dalek> roast: review: https://github.com/perl6/roast/commit/81291eb5a4

[04:36] <japhb> timotimo: Did startup time get worse on nqp?  It looks like it from the bar charts at the top of the nqp benchmarks ....  It also looks like the only place nqp sped up is JSON parsing and a tiny amount in a couple rc-* tests.

[04:42] *** chenryn left
[04:45] *** mr-foobar left
[04:52] *** kaare_ left
[05:13] *** chenryn joined
[05:19] *** kaare_ joined
[05:20] *** chenryn left
[05:33] <japhb> Oddly it looks like much of the r-m performance regression might be explained by push getting slower.

[05:34] *** Psyche^ joined
[05:36] *** Psyche^_ left
[05:42] *** [Sno] joined
[05:47] *** tinyblak left
[05:51] *** FROGGS_ is now known as FROGGS

[05:52] <FROGGS> .tell masak for ya' release: https://gist.github.com/FROGGS/78c5203d0b145ca57196

[05:52] <yoleaux> FROGGS: I'll pass your message to masak.

[05:53] *** chenryn joined
[05:57] *** yeahnoob left
[06:00] *** yeahnoob joined
[06:03] *** Ven joined
[06:08] *** Akagi201 left
[06:09] *** mr-foobar joined
[06:16] *** Ven left
[06:17] *** wamiks joined
[06:24] *** FROGGS left
[06:25] *** wamiks left
[06:34] *** xinming left
[06:35] *** SamuraiJack joined
[06:36] *** xinming joined
[06:37] *** SamuraiJack left
[06:40] *** mr-foobar left
[06:41] *** mr-foobar joined
[06:50] *** Akagi201 joined
[06:56] *** Timbus_ left
[06:57] *** Akagi201 left
[06:58] *** cognome left
[06:59] *** cognome joined
[07:00] *** FROGGS joined
[07:00] *** leedo left
[07:00] *** zakharyas joined
[07:01] *** Akagi201 joined
[07:06] *** leedo joined
[07:06] *** cognome_ joined
[07:07] *** cognome left
[07:07] <sergot> hi o/

[07:07] <nwc10> \o

[07:10] <japhb> o/

[07:11] <japhb> (I'm in your timezones, scaring your residents)

[07:22] *** darutoko joined
[07:22] <tadzik> heh

[07:23] *** Timbus joined
[07:33] *** firnsy left
[07:33] *** firnsy joined
[07:34] *** slmult0_z joined
[07:34] *** xragnar left
[07:37] *** xragnar joined
[07:39] *** eiro left
[07:39] *** tardisx left
[07:39] *** PerlJam left
[07:43] *** virtualsue joined
[07:45] *** cognome joined
[07:47] *** cognome_ left
[07:49] <dalek> roast: 3b63d6f | (Elizabeth Mattijsen)++ | S17-procasync/print.t:

[07:49] <dalek> roast: Fudge 2 more flapping tests

[07:49] <dalek> roast: review: https://github.com/perl6/roast/commit/3b63d6f75e

[07:50] <FROGGS> # Failed test 'checking X::Proc::Async::AlreadyStarted.WHICH'

[07:50] <FROGGS> # at t/spec/S02-types/WHICH.t line 313

[07:50] <FROGGS> # expected: 'X::Proc::Async::AlreadyStarted'

[07:50] <FROGGS> #      got: 'Failure|1018962658'

[07:50] <FROGGS> :o(

[07:50] <dalek> roast: 7321365 | (Elizabeth Mattijsen)++ | S17-procasync/basic.t:

[07:50] <dalek> roast: Also test return value

[07:50] <dalek> roast: review: https://github.com/perl6/roast/commit/7321365a9e

[07:50] <lizmat> FROGGS: will check

[07:51] <FROGGS> I'll fix t/spec/S10-packages/precompilation.t, which should be easy

[07:51] <lizmat> what's wrong with that?

[07:51] <lizmat> and where ?

[07:51] * lizmat doesn't see any problems

[07:52] <FROGGS> No such method 'at_key' for invocant of type 'BOOTHash'

[07:52] <FROGGS>   in sub postcircumfix:<{ }> at gen/jvm/CORE.setting:2862

[07:52] <FROGGS>   in method precomp at gen/jvm/CORE.setting:21972

[07:52] <FROGGS> on jvm only

[07:52] <lizmat> ah, ok

[07:52] <lizmat> I see...

[07:52] <FROGGS> here is the list of problems: https://gist.github.com/FROGGS/78c5203d0b145ca57196

[07:53] <FROGGS> you can scratch the output of moar though

[07:54] *** jack_rabbit left
[07:56] <dalek> roast: bfb5f8a | (Elizabeth Mattijsen)++ | S02-types/WHICH.t:

[07:56] <dalek> roast: Fix JVM, Proc::Async related doesn't work there

[07:56] <dalek> roast: review: https://github.com/perl6/roast/commit/bfb5f8adb5

[07:59] <lizmat> FROGGS: ^^^ that should fix the pb on JVM, building uptodate JVM now

[07:59] <lizmat> (and parrot for that matter)

[07:59] <FROGGS> will also rebuild and test

[07:59] <FROGGS> lizmat++

[08:00] *** eiro joined
[08:00] *** tardisx joined
[08:00] *** PerlJam joined
[08:03] *** slavik left
[08:04] <dalek> rakudo/nom: a396fa2 | (Tobias Leich)++ | src/core/CompUnit.pm:

[08:04] <dalek> rakudo/nom: fix CompUnit.precomp on jvm

[08:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a396fa2c0d

[08:07] *** telex left
[08:08] *** telex joined
[08:09] <lizmat> FROGGS: I guess we need to encapsulate access to input parameters somehow, to prevent the same issue propping up at different places...

[08:10] <FROGGS> lizmat: yeah, we probably want to hllize it for the user, like we do with %*ENV and others

[08:11] <dalek> roast: dfeebad | (Elizabeth Mattijsen)++ | S02-types/WHICH.t:

[08:11] <dalek> roast: Oops, forgot Proc::Async itself

[08:11] <dalek> roast: review: https://github.com/perl6/roast/commit/dfeebaddce

[08:12] *** fhelmberger joined
[08:12] *** erkan joined
[08:12] *** erkan left
[08:12] *** erkan joined
[08:14] <lizmat> FROGGS: not sure what the issue is with S10-packages/precompilation.t

[08:14] <lizmat> ah, I do... same issue

[08:14] <FROGGS> lizmat: that's what I just fixed

[08:15] <lizmat> indeed... need to pull and rebuild  :-)

[08:15] * lizmat is not quite awake yet

[08:15] <FROGGS> lizmat: this also seem to fix the S22-package-format fail

[08:15] <lizmat> yeah, they were the same

[08:16] <FROGGS> though, t/spec/S32-io/slurp.t still fails on parrot :o(

[08:16] <FROGGS> m: say +lines()

[08:16] <camelia> rakudo-moar d0e09e: OUTPUT¬´20‚ê§¬ª

[08:16] <FROGGS> p: say +lines()

[08:16] <camelia> rakudo-parrot d0e09e: OUTPUT¬´20‚ê§¬ª

[08:16] <FROGGS> hmmmm

[08:17] *** slavik joined
[08:17] <nine> I wonder how DBIish deals with binary data.

[08:19] *** dakkar joined
[08:22] <lizmat> FROGGS: t/spec/S17-scheduler/every.t  seems a flapper that doesn't get enough CPU when run in the spectest

[08:23] <FROGGS> tests about timers are always dangerous...

[08:24] <dalek> roast: bbb789b | (Elizabeth Mattijsen)++ | S17-scheduler/every.t:

[08:24] <dalek> roast: Be a little more lenient in interval checking

[08:24] <dalek> roast: review: https://github.com/perl6/roast/commit/bbb789b83d

[08:28] <lizmat> Hmmm....  the failure of t/spec/S17-supply/uniq.t on JVM I can only explain if sleep 1 sleeps less than a second

[08:28] <lizmat> sleep isn't integer based on JVM, is it ?

[08:29] *** kaleem joined
[08:29] <lizmat> afk for a few hours&

[08:31] *** yeahnoob left
[08:31] <FROGGS> perl6-j -e 'sleep 3; say time - BEGIN time'

[08:31] <FROGGS> 4

[08:38] *** bjz joined
[08:39] *** pmurias joined
[08:44] *** yeahnoob joined
[08:52] *** sqirrel joined
[09:00] <daxim__> parrot just had 6.8 release a couple of days ago, when are the september releases of moar, nqp, rakudo scheduled?

[09:00] <nwc10> today, I think.

[09:01] *** sqirrel left
[09:01] <FROGGS> daxim__: today, aye

[09:02] <xiaomiao> oh my, more packaging work for me tomorrow :D

[09:02] <FROGGS> :D

[09:02] <nwc10> xiaomiao: I forget, what OS are you packaging for?

[09:03] <xiaomiao> gentoo

[09:05] <daxim__> I have up-to-date versions of libuv, dyncall, linenoise under my control in rpm-land now, will ask debian.or.at tonight for assistance with dpkg-ising

[09:06] <daxim__> I hope until apw2014 full backended rakudos are available on major platforms

[09:09] *** jerrycheung left
[09:09] <FROGGS> daxim++

[09:12] *** noganex left
[09:12] *** slmult0_z left
[09:13] <timotimo> sounds great!

[09:15] <timotimo> i can't really tell why push would have become slower :\

[09:16] *** rindolf left
[09:16] <dalek> Inline-Perl5: 0235056 | nine++ | / (3 files):

[09:16] <dalek> Inline-Perl5: Return binary strings from Perl 5 as Buf to Perl 6

[09:16] <dalek> Inline-Perl5: 

[09:16] <dalek> Inline-Perl5: Non-UTF-8 non-7-Bit-ASCII strings are now returned as Buf from Perl 5.

[09:16] <dalek> Inline-Perl5: If they are strings at all the user can tell Buf.decode the encoding

[09:16] <dalek> Inline-Perl5: and get a Str back.

[09:16] <dalek> Inline-Perl5: Otherwise we treat it as uninterpreted binary data.

[09:16] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/0235056c6e

[09:17] <nine> .tell leont just because it's impossible doesn't mean I can't do it :)

[09:17] <yoleaux> nine: I'll pass your message to leont.

[09:18] *** rindolf joined
[09:20] *** donaldh joined
[09:25] *** dwarring left
[09:25] *** leont joined
[09:29] *** Woodi left
[09:29] *** Woodi joined
[09:43] *** yeahnoob left
[10:04] *** chenryn left
[10:28] <masak> hi #perl6.

[10:28] <yoleaux> 02:06Z <retupmoca> masak: I have a couple of PR's open for you (on Data::Pretty and Text::Markdown)

[10:28] <yoleaux> 05:52Z <FROGGS> masak: for ya' release: https://gist.github.com/FROGGS/78c5203d0b145ca57196

[10:28] <masak> thanks, retupmoca, FROGGS.

[10:29] <masak> I'm going to start the release process once I'm back from dinner, in O(2 hours).

[10:29] <masak> &

[10:34] *** chenryn joined
[10:35] <FROGGS> masak: I'm going to update the gist I posted...

[10:37] <dalek> nqp: 31bc846 | (Tobias Leich)++ | src/vm/parrot/QAST/Operations.nqp:

[10:37] <dalek> nqp: read a byte and not a char in EOF check

[10:37] <dalek> nqp: 

[10:37] <dalek> nqp: Reading a char can fail when this char gets decoded to utf8.

[10:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/31bc846fd1

[10:38] <dalek> rakudo/nom: 2160632 | (Tobias Leich)++ | tools/build/NQP_REVISION:

[10:38] <dalek> rakudo/nom: bump nqp revision for eoffh@parrot fix

[10:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2160632800

[10:38] <FROGGS> masak: perl6-p is down to one failing test file: https://gist.github.com/FROGGS/78c5203d0b145ca57196

[10:39] *** chenryn left
[10:45] *** yoleaux left
[10:46] <carlin> nine++ # making Inline::Perl5 handle binary

[10:46] <carlin> ... .oO( and if I'd remembered to push my code before leaving home I could have started making use of it )

[10:47] *** woolfy1 joined
[10:47] *** woolfy left
[10:50] *** chenryn joined
[10:51] <leont> jnthn, lizmat: can a merge (stdout/stderr) option be added to Proc::Async?

[10:52] *** yoleaux joined
[10:52] *** ChanServ sets mode: +v yoleaux

[10:57] <lizmat> leont: with our current check for proper order, I think that should be possible

[10:57] <lizmat> there just won't be a guaranteed order between stdout/stderr

[10:58] <lizmat> otoh, after we have Supply.lines, you can just .merge the two supplies

[11:01] * lizmat starts working on that

[11:03] *** FROGGS left
[11:05] *** brrt joined
[11:08] <leont> I meant merging on an fd level

[11:08] <yoleaux> 09:17Z <nine> leont: just because it's impossible doesn't mean I can't do it :)

[11:09] <leont> dup2 and stuff, except on a libuv level

[11:09] <nine> leont: does this look sane to you? https://github.com/niner/Inline-Perl5/commit/0235056c6e

[11:12] <lizmat> leont: probably possible, but that would be up to jnthn

[11:14] *** SamuraiJack joined
[11:17] *** SamuraiJack left
[11:18] <lizmat> leont: wouldn't you then run the risk of mixed incomplete lines?

[11:22] *** salv0 left
[11:26] *** brrt left
[11:34] *** chenryn left
[11:38] *** salv0 joined
[11:39] *** sqirrel joined
[11:40] *** FROGGS joined
[11:50] *** virtualsue left
[11:50] *** chenryn joined
[11:51] *** anaeem___ joined
[11:54] *** anaeem1__ left
[11:57] *** bjz left
[11:59] <lizmat> http://www.savagechickens.com/wp-content/uploads/chickenpiratemascot.jpg feels strangely appropriate in a Perl 6 context

[12:01] <leont> To some extend, yes, depending on the buffering of the program. Not saying it's always sensible, but some applications like it (which sometimes includes tests)

[12:03] *** anaeem___ left
[12:04] *** anaeem1 joined
[12:32] <masak> greetings, people of #perl6.

[12:32] <timotimo> regreetings, masak of the east

[12:32] <masak> your monthly release process is now starting. fasten seatbelts and stow your tray table.

[12:32] <masak> have a nice flight.

[12:34] <FROGGS> lizmat: does that also need to be fudged for jvm?

[12:34] <FROGGS> # at t/spec/S02-types/WHICH.t line 325

[12:34] <FROGGS> # expected: 'Proc::Async'

[12:34] <FROGGS> #      got: 'Failure|1438485088'

[12:34] <FROGGS>   Failed tests:  551, 571, 573, 575

[12:34] <lizmat> I though I fixed that ?

[12:34] *** bjz joined
[12:34] <FROGGS> lizmat: I just pulled

[12:35] <lizmat> in my version of WHICH.t, Proc::Async is listed in the moar section

[12:35] <lizmat> which should be skipped on jvm ?

[12:36] <FROGGS> ohh, I'm not running the fudged version

[12:36] <lizmat> *that* would explain  :-)

[12:36] <FROGGS> :o)

[12:36] <FROGGS> yeah, works now

[12:36] <FROGGS> phewww :/

[12:36] <FROGGS> err, :o)

[12:41] <pmurias> what does 'MVMArray: atpos expected string register

[12:41] <pmurias> ' mean

[12:41] <timotimo> you used atpos and should have used atpos_s

[12:41] <timotimo> moarvm is stricter about this than others are

[12:42] <FROGGS> timotimo: I guess it is the other way around, no?

[12:42] <FROGGS> he probably used atpos_s when he should not

[12:42] *** virtualsue joined
[12:42] <masak> FROGGS: re t/spec/S32-exceptions/misc.rakudo.parrot -- should we fudge it on Parrot, you think?

[12:43] <masak> FROGGS: what's the failure? how bad is it?

[12:43] <timotimo> FROGGS: might be either way

[12:43] <masak> is it a recent regression? has anyone done a bisect on it?

[12:43] <FROGGS> masak: I'm running it right now to see...

[12:43] <masak> FROGGS++

[12:43] <FROGGS> timotimo: hmmm, oaky

[12:43] <masak> FROGGS: you are everything a release manager could ask for, and more. <3

[12:43] <[Coke]> FROGGS: by hand or using the corpus of data already available at perl6-roast-data ?

[12:44] <[Coke]> just trying to save you time, man. :)

[12:44] <FROGGS> [Coke]: by hand

[12:44] <FROGGS> masak: *g*

[12:44] *** chenryn left
[12:45] <FROGGS> # at lib/Test.pm line 309

[12:45] <FROGGS>     # Expected: (X::Obsolete)

[12:45] <FROGGS>     # Got:      (X::AdHoc)

[12:45] <FROGGS>     # Exception message: Cannot get character past end of string

[12:45] <pmurias> timotimo: and now I have a segmentation fault, moarvm--

[12:45] <FROGGS> # at t/spec/S32-exceptions/misc.rakudo.parrot line 532

[12:46] <FROGGS> m: use Test; my $*foo = 0; throws_like { EVAL '$*foo = 1; say' }, X::Obsolete;

[12:46] <camelia> rakudo-moar 216063: OUTPUT¬´    1..2‚ê§    ok 1 - code dies‚ê§    ok 2 - right exception type (X::Obsolete)‚ê§ok 1 - did we throws_like X::Obsolete?‚ê§¬ª

[12:46] <FROGGS> p: use Test; my $*foo = 0; throws_like { EVAL '$*foo = 1; say' }, X::Obsolete;

[12:46] <camelia> rakudo-parrot 216063: OUTPUT¬´use of uninitialized value of type Nil in numeric context  in sub throws_like at lib/Test.pm:294‚ê§‚ê§    1..2‚ê§    ok 1 - code dies‚ê§    not ok 2 - right exception type (X::Obsolete)‚ê§    ‚ê§# Failed test 'right exception type (X::Obsolete)'‚ê§# at l‚Ä¶¬ª

[12:47] <FROGGS> p: say

[12:47] <camelia> rakudo-parrot 216063: OUTPUT¬´===SORRY!===‚ê§Cannot get character past end of string‚ê§¬ª

[12:47] <FROGGS> >.<

[12:47] <FROGGS> golfed to three bytes

[12:48] <FROGGS> ahh, the fix seems easy

[12:49] <masak> FROGGS++!

[12:50] <masak> so the bare 'say' fix broke Parrot and no one noticed...

[12:50] <FROGGS> no

[12:50] <[Coke]> masak: that is not entirely true.

[12:50] <FROGGS> my s/substr/eqat/ optimization did

[12:50] <[Coke]> many things have been breaking parrot for weeks now.

[12:51] <FROGGS> yeah, too many

[12:51] * [Coke] feels like boy who cried wolf.

[12:52] <masak> we need a better volunteering system for these things. one that ends up not burning out or dissapointing volunteers.

[12:52] <masak> I saw something nice in that vein happen in yesterday's backlog.

[12:56] <[Coke]> FROGGS: does the travis system run spectests or just the build?

[12:57] <FROGGS> [Coke]: it just runs 'make test' after building perl6-m

[12:57] <pmurias> nqp-m: nqp::join(',', [nqp::null_s])

[12:57] <FROGGS> (and nqp-m and moar every time)

[12:57] <camelia> nqp-moarvm: OUTPUT¬´(signal )¬ª

[12:58] <pmurias> is that segfault correct behavior?

[12:59] <pmurias> nqp-m: say(nqp::join(',', ["foo","bar",nqp::null,"baz"]))

[12:59] <camelia> nqp-moarvm: OUTPUT¬´foo,bar,baz‚ê§¬ª

[12:59] <pmurias> and the above also seems a bit suspect

[12:59] *** anaeem1 left
[12:59] <[Coke]> segfault is never correct

[13:00] <masak> fsvo "never" :)

[13:00] *** mr-foobar left
[13:00] <masak> there are tradeoffs in the MOP where, if you shoot yourself in the foot, your foot ends up well and truly shot.

[13:02] <dalek> rakudo/nom: dde0dc3 | (Tobias Leich)++ | src/Perl6/Grammar.nqp:

[13:02] <dalek> rakudo/nom: fix "say" at EOF

[13:02] <dalek> rakudo/nom: 

[13:02] <dalek> rakudo/nom: nqp::eqat seems to be less tolereant about being oob, compared to nqp::substr.

[13:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dde0dc3716

[13:03] *** Alina-malina left
[13:03] <FROGGS> masak: this should mean that moar and parrot pass (with todos), and jvm probably flaps t/spec/S17-supply/uniq.rakudo.jvm

[13:03] * masak ended up doing `git clone --depth=20 [email@hidden.address] because the full clone took *ages* from where he is

[13:03] <masak> FROGGS: awesome.

[13:03] <masak> FROGGS: is there any reason we prefer flapping to fudged?

[13:04] <FROGGS> masak: well, I don't

[13:04] <FROGGS> I prefer passing tests :o)

[13:04] *** Alina-malina joined
[13:04] <carlin> nine: would it be possible to pass a Buf back to Perl 5?

[13:05] <[Coke]> ideally, skip flapping tests and open an RT.

[13:05] * lizmat is looking at uniq.t

[13:05] <[Coke]> I could be convinced that a TODO would be OK if the fudge comment specifically says "flapping"

[13:05] *** eternaleye left
[13:05] <masak> lizmat++

[13:05] <masak> [Coke]: agreed.

[13:06] <nine> carlin: planning on doing that this evening

[13:06] <masak> let's make this release squaky-clean for the maximum number of people and backends! :)

[13:06] <lizmat> it was always test #7 that was flapping, right ?

[13:07] *** eternaleye joined
[13:07] * masak .oO( flapping tests giving us the bird )

[13:08] <carlin> nine++ \o/

[13:15] *** rurban joined
[13:18] <timotimo> nine: with what you've learnt so far, would Inline::Python for perl6 be harder than for perl5? and would it be harder than Inline::Perl5?

[13:18] *** noganex joined
[13:18] <dalek> roast: 670d41a | (Elizabeth Mattijsen)++ | S17-supply/uniq.t:

[13:18] <dalek> roast: Give expiry test some more time

[13:18] <dalek> roast: review: https://github.com/perl6/roast/commit/670d41a50c

[13:19] <lizmat> FROGGS, masak ^^^   hope that fixes it in a less flappy way

[13:19] <lizmat> FWIW, I've never been able to complete a 'make spectest' on JVM  :-(

[13:20] <FROGGS> lizmat: I was able to over night

[13:20] <FROGGS> with TEST_JOBS=1

[13:20] <pmurias> timotimo: I think Inline::Python would be easier, as python is a more sane language then perl5

[13:20] <timotimo> haha

[13:20] <nine> timotimo: right now it would probably be easier because one can re-use most of Inline::Perl5's Perl6 code and just swap out the p5helper.c with a pyhelper.c. The latter is probably just a lot of copy&paste from Perl5's Inline::Python.

[13:20] <timotimo> cool :)

[13:22] <nine> timotimo: Perl 6 having a GC instead of refcounting helps a lot here. Getting two subtly different refcounting systems correct was a major headache when writing Inline::Python. I remember lots of hours reading not so useful documentation and source code of both Python and Perl.

[13:22] <timotimo> oh my :S

[13:22] <timotimo> maybe we can do Inline::Pypy instead, that doesn't do ref counting either

[13:23] *** kaare_ left
[13:23] <nine> timotimo: on the other hand Inline::Python is really, really stable. It doesn't leak a single byte in any case I could come up with.

[13:23] <dalek> rakudo/nom: 12ca984 | masak++ | docs/announce/2014.09.md:

[13:23] <dalek> rakudo/nom: [docs/announce/2014.09.md] added

[13:23] <dalek> rakudo/nom: 

[13:23] <dalek> rakudo/nom: Next up: filling in changelog highlights and contributors.

[13:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/12ca98426a

[13:23] <nine> I guess that one could port it to Perl 6 over a rainy weekend.

[13:23] <masak> people reading through and reviewing ^^ would be really heplful. kthx!

[13:24] <nwc10> masak: startup is now faster than Moose! (At least some platforms)

[13:24] <gtodd> squeak++ 

[13:24] <gtodd> oops 

[13:24] <gtodd> squeaky++

[13:25] <lizmat> nwc10: it will get 25% faster still once we can get the lazy @*INC population working in precomp

[13:26] <nwc10> lizmat: that's next month's news?

[13:26] <lizmat> I hope so: totally blocked on figuring out why that doesn't work

[13:27] <[Coke]> jvm - been able to complete those test for some time on host07. need to figure out why they are exploding on host08 :P

[13:27] <lizmat> masak: I assume we're on a commit freeze atm, right ?

[13:28] <masak> lizmat: I'm leanient... but I expect people not to do anything stupid during release cycle :)

[13:28] <masak> also, commit with the knowledge that your commits may end up before the release tarball/tag, or after it.

[13:28] <PerlJam> greetings #perl6 people!  o/

[13:28] <masak> no leap seconds this month. nice. :)

[13:29] <PerlJam> masak++ release

[13:29] <lizmat> I'll keep Supply.lines for next month's release then

[13:29] <lizmat> potential users like leont are on HEAD anyway, I would hope

[13:29] <masak> *nod*

[13:29] <masak> lenient*

[13:30] <lizmat> "leanient" - a tolerance for lean persons

[13:31] <gtodd> why does perl6 -n -e 'Supply.interval(1).tap({say time}); '   not start prtinting out the time right away?

[13:31] <gtodd> (p6 stis there until I press return)

[13:31] <PerlJam> gtodd: because of the -n

[13:31] <gtodd> errm sits

[13:32] <gtodd> yeah that's what I was trying to work around :-)

[13:32] <gtodd> without the -n it prints right away but exits :)

[13:32] <PerlJam> gtodd: BEGIN is your friend

[13:32] <gtodd> ok just silliness on my part

[13:32] <gtodd> oh YEAH!

[13:32] <gtodd> good

[13:32] <gtodd> thanks

[13:34] <nwc10> masak: current estimate - startup 17% less time than Moose.

[13:34] <nwc10> so saying 15% is safe, if you want to say something

[13:34] <gtodd> ok one other silly Q .. I have a one liner baby perl 5 versus 6 "speed tests" I do now and then one that picks a random element from a large array read from disk ... 

[13:35] <gtodd> (these are not real tests) ... 5:  perl -MIO::All -E 'my @arr = io("/usr/share/dict/words")->slurp; say $arr[rand @arr];  6:  perl6 -e 'my @arr := "/usr/share/dict/words".IO.lines; say @arr.pick'

[13:36] <gtodd> I'm pretty sure perl6 -e 'my @arr := "/usr/share/dict/words".IO.lines; say @arr.pick;' used to work fine  but now it can't read the file handle  ....   

[13:36] <lizmat> gtodd: because perl6 is lazy, you will get wildly different values

[13:36] * lizmat looks

[13:37] <gtodd> hmm ... 

[13:37] <gtodd> lizmat: errm wait /usr/share/dict/words is a link to /usr/share/dict/web2

[13:37] <masak> nwc10: yes, this might be worth mentioning.

[13:37] <gtodd> ok perl6 -e 'my @arr := "/usr/share/dict/web2".IO.lines; say @arr.pick'

[13:37] <gtodd> works

[13:38] <lizmat> gtodd: you may find that IO.slurp.lines is faster

[13:38] <nwc10> masak: specifically, those figures are for "my" machine, which is someone else's big multicore x86_64 Centos box on which I have an account

[13:38] <nwc10> but I think that they hold for most x86_64

[13:38] <lizmat> apparently slurping the whole file in mem, and then looking for line endings, is faster

[13:38] <lizmat> than reading line by line

[13:39] <lizmat> nwc10: I'm seeing similar values on my MBP

[13:40] <nwc10> masak: I think that it is worth mentioning, as it's a "take us seriously" point, but it needs some sort of subtle caveat about "other stuff isn't faster yet. But we're actively working on it." or something like that

[13:40] *** bjz left
[13:40] <masak> damnit, Oracle! your site doesn't offer a clear, easy way to download a JDK! it's as if you don't *want* people to develop in your antiquated language!

[13:40] <nwc10> ... it's as if you don't want people to install the Ask toolbar

[13:41] <masak> bonus points to anyone who direct-links me a .tar.gz file to download 64-bit Linux JDK, here on the channel.

[13:41] <tadzik> challenge accepted

[13:41] <nwc10> tadzik: were you thinking of coming to Salzburg?

[13:41] <tadzik> masak: http://download.oracle.com/otn-pub/java/jdk/8u20-b26/jdk-8u20-linux-x64.tar.gz

[13:41] <tadzik> nwc10: yes

[13:42] <nwc10> tadzik: please register. t-shirts are being ordered soon

[13:42] <leont> masak: then try finding the right documentation for things‚Ä¶

[13:42] *** Ven joined
[13:42] <tadzik> nwc10: oh, okay

[13:42] <tadzik> nwc10: thanks for the reminder

[13:42] <nwc10> tadzik: please encourage others who want to attend 

[13:42] <nwc10> *and* want a t-shirt :-)

[13:42] <nine> The Austrian Perl 6 Workshop it seems :)

[13:43] *** bjz joined
[13:43] <gtodd> lizmat: thanks ... for the IO stuff (Failed to stat in filehandle:)   I must have used a different file to construct the array or a different system (with a file rather than link)  ... but yes using .slurp.lines gives  3.69s versus 4.42s

[13:43] <nwc10> nine: 5 is also available

[13:43] <tadzik> masak: oh nevermind, that doesn't actually work :/

[13:43] <nwc10> but the hackathon is definately biased

[13:44] <tadzik> stupid oracle

[13:44] <masak> tadzik: see? D:

[13:44] <tadzik> you can probably deduce some hack from https://aur.archlinux.org/packages/or/oraclejdk8-64/PKGBUILD though

[13:44] *** Ven left
[13:44] <nwc10> also, please star the hackathon. we're going to start worrying if it gets near 25

[13:44] <nine> It occurs to my that the relation between Perl5 and Perl6 is a lot like between C and C++

[13:44] <masak> my challenge still stands. direct link, .tar.gz, JDK 7, 64-bit Linux.

[13:45] <tadzik> there probably isn't any, apart from the mirrors :/

[13:45] *** Ven joined
[13:45] <masak> I'm not interested in "no" answers, I'm interested in the link... :)

[13:45] <tadzik> heh

[13:46] <Ven> o/, #perl6

[13:47] <jnthn> masak: Occasionally, there's benefits to being on Windows ;)

[13:47] *** virtualsue left
[13:47] <nine> jnthn: ironically in situations involving a large UNIX vendor it seems

[13:47] <FROGGS> masak: https://gist.github.com/P7h/9741922

[13:48] <FROGGS> masak: you have to pass headers...

[13:48] <gtodd> masak:  there could be a 1-800 number that you can dial and leave a credit card number ... :-)

[13:48] *** vendethiel joined
[13:48] * [Coke] sees gittip, which never really took off in his circles, is now called gratipay

[13:48] <masak> ok, I think I finally started the download.

[13:49] <masak> ETA: 4 hours...

[13:49] <gtodd> :-D

[13:50] <masak> in the meantime, I think I'll build Rakudo without the JVM backend.

[13:50] <gtodd> masak: in the meantime ORA will make 10million$ ;-)

[13:51] <gtodd> (and spend 9.9million$)

[13:51] <masak> I have no idea what you're talking about. :)

[13:52] <gtodd> good!

[13:52] <masak> but I still don't have a `javac`, so it matters little.

[13:52] <masak> moving right along.

[13:52] <gtodd> hehe

[13:53] <masak> FROGGS++ # I think that would've worked; thanks -- I ended up finding the link in the browser and doing it there

[13:57] <vendethiel> [Coke]: they've lost all their "customers" anyway :p

[13:58] *** bjz left
[13:58] <nwc10> masak: also, I hope the reaction to "faster than Moose" is "but of course Moose is slow"

[13:59] *** bjz joined
[13:59] <leont> [Coke]: it seems people are getting bored and leaving it. Or at least I'm getting less money than I used to, not that I ever got a lot.

[14:00] <lizmat> nwc10: nonetheles, many people use Moose in production :-)

[14:00] <lizmat> *ss

[14:01] <nwc10> Oh, I don't deny any of that :-)

[14:01] *** fhelmberger left
[14:02] *** fhelmberger joined
[14:04] *** JimmyZ joined
[14:05] <JimmyZ> speaking of start up time, perl6 -e0 costs 0.22s, but perl6 -MHTTP::UserAgent -e0 costs 0.56s

[14:06] <JimmyZ> looks like loading a module is slow ...

[14:08] <lizmat> JimmyZ: is it installed with panda (aka precompiled??)

[14:08] <JimmyZ> yeah

[14:08] <masak> m: my $perl = 5; say $perl.:<++>

[14:08] <camelia> rakudo-moar dde0dc: OUTPUT¬´6‚ê§¬ª

[14:08] <masak> \o/

[14:08] <lizmat> also, I noticed that panda adds an @*INC entry for each installed module

[14:08] <lizmat> this is bad and will need to be fixed (and is on my list as soon as I unblock from S11)

[14:10] *** virtualsue joined
[14:11] <tadzik> hmmm

[14:12] <tadzik> that sounds really weird

[14:14] *** sqirrel left
[14:14] <dalek> roast: a804241 | (Elizabeth Mattijsen)++ | S17-supply/lines.t:

[14:14] <dalek> roast: Add tests for Supply.lines

[14:14] <dalek> roast: review: https://github.com/perl6/roast/commit/a8042416e8

[14:15] *** rindolf left
[14:18] <masak> oh, I didn't see ec17e06ba53e643623dc200d4e116fc97323c45a until now.

[14:18] <masak> ...not sure I think it's a good idea.

[14:18] <masak> m: say ().min

[14:18] <camelia> rakudo-moar dde0dc: OUTPUT¬´Inf‚ê§¬ª

[14:18] <masak> m: say Int.min

[14:18] <camelia> rakudo-moar dde0dc: OUTPUT¬´-Inf‚ê§¬ª

[14:19] <vendethiel> m: say [min] () # masak

[14:19] <camelia> rakudo-moar dde0dc: OUTPUT¬´Inf‚ê§¬ª

[14:19] <vendethiel> seems pretty consistent to me

[14:19] <PerlJam> Why not Nil?

[14:20] * vendethiel mumbles something about monoids to PerlJam

[14:21] <vendethiel> PerlJam: if they can, reduct operators try to give back an indentity value when you don't pass them lists

[14:21] <vendethiel> (i.e. a value that, when in the lists passed to said reduct functions, would never change its outcome)

[14:21] <vendethiel> so, here, you can have as many "Inf"s in your lists, [min] isn't gonna change its result. (same for [+] and 0)

[14:22] <dalek> rakudo/nom: 66694e8 | masak++ | docs/ChangeLog:

[14:22] <dalek> rakudo/nom: [docs/ChangeLog] various updates

[14:22] <dalek> rakudo/nom: 

[14:22] <dalek> rakudo/nom: Hopefully covers all the highlights of this month.

[14:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/66694e8a08

[14:22] <masak> ^^ extra eyes welcome.

[14:23] <masak> what vendethiel said.

[14:23] *** sqirrel joined
[14:24] <masak> making Int.min be -Inf is the kind of decision that seems pleasant at the surface, but is actually a corner case/exception, just as much as (for example) negative array indices.

[14:24] <FROGGS> masak: $*EXECUTABLE does actually work now on parrot

[14:24] <masak> FROGGS: please add.

[14:24] <FROGGS> meh

[14:25] *** orafu joined
[14:25] <masak> or, put differently, the .min that takes the minimum of a bunch of values is a completely different .min than the one on a type object. they are two different methods with the same spelling.

[14:25] *** Ven left
[14:25] <masak> (and there's no nice unification between the two types of .min that makes it nice or desirable)

[14:26] <jnthn> masak: Seems .lines gets two mentions

[14:26] <PerlJam> m: [min] <foo bar baz>  # Not sure Inf is the identity here :)

[14:26] <camelia> rakudo-moar dde0dc: ( no output )

[14:26] <PerlJam> m: [say min] <foo bar baz>  # Not sure Inf is the identity here :)

[14:26] <camelia> rakudo-moar dde0dc: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/YOzlz1Rfj1‚ê§Two terms in a row‚ê§at /tmp/YOzlz1Rfj1:1‚ê§------> [32m  # Not sure Inf is the identity here :)[33m‚èè[31m<EOL>[0m‚ê§    expecting any of:‚ê§        argument list‚ê§        postfix‚Ä¶¬ª

[14:26] <PerlJam> m: say [min] <foo bar baz>  # Not sure Inf is the identity here :)

[14:26] <camelia> rakudo-moar dde0dc: OUTPUT¬´bar‚ê§¬ª

[14:27] <masak> jnthn: saw it. fixing.

[14:28] <dalek> rakudo/nom: 919b030 | (Tobias Leich)++ | docs/ChangeLog:

[14:28] <dalek> rakudo/nom: mention $*EXECUTABLE fix on parrot

[14:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/919b0303b0

[14:28] <masak> PerlJam: Inf *is* the identity for Str, too.

[14:28] <masak> PerlJam: by spec.

[14:28] <masak> PerlJam: see recent discussion between me and TimToady in backlog.

[14:28] <PerlJam> looking now even  :)

[14:28] <nine> m: 'abc'.encode('latin-1').perl

[14:28] <camelia> rakudo-moar dde0dc: ( no output )

[14:29] <nine> m: say 'abc'.encode('latin-1').perl

[14:29] <camelia> rakudo-moar dde0dc: OUTPUT¬´Blob[uint8].new(97, 98, 99)‚ê§¬ª

[14:29] <nine> shouldn't this be a Buf? ^^

[14:29] <jnthn> No

[14:29] <dalek> rakudo/nom: 0b70d0d | masak++ | docs/ChangeLog:

[14:29] <dalek> rakudo/nom: [docs/ChangeLog] remove a few double mentions

[14:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0b70d0d5a7

[14:30] <jnthn> Note that Buf ~~ Blob

[14:30] <nine> jnthn: according to http://doc.perl6.org/routine/encode#class_Str it should

[14:30] <jnthn> Blob is the immutable one

[14:30] <FROGGS> jnthn: are you fine with me merging cglobals after release?

[14:30] <jnthn> nine: Then I think it's out of line with S02...

[14:30] <jnthn> FROGGS: gah, I forgot about that

[14:31] <jnthn> FROGGS: But I've got a moment now I can use to review it. Where can I find the stuff I should look at?

[14:32] <vendethiel> masak: I'm not sure there's any value I want to be returned for ().min, truthfully

[14:32] <vendethiel> but I can see it looking more "consistent" that way

[14:33] <vendethiel> m: say (1, 2, 3).min

[14:33] <camelia> rakudo-moar 12ca98: OUTPUT¬´1‚ê§¬ª

[14:33] <vendethiel> if that works; then it should be the same as [min] 1, 2, 3

[14:33] <lizmat> masak: you want me to take out the Type.min/max/minmax ?

[14:33] <FROGGS> jnthn: https://github.com/MoarVM/MoarVM/compare/cglobal

[14:33] *** JimmyZ_ joined
[14:34] <FROGGS> jnthn: https://github.com/perl6/nqp/compare/cglobal

[14:34] <FROGGS> jnthn: https://github.com/jnthn/zavolaj/compare/cglobal

[14:34] <FROGGS> not much to read

[14:34] <jnthn> Danke

[14:34] <FROGGS> gern geschehen :o)

[14:34] <dalek> roast: ae5b750 | (Elizabeth Mattijsen)++ | S17-supply/lines.t:

[14:34] <dalek> roast: Add tests for unchomped lines

[14:34] <dalek> roast: review: https://github.com/perl6/roast/commit/ae5b7502dd

[14:35] <lizmat> masak: it just seemed like a logical "niche" 

[14:35] *** JimmyZ left
[14:35] *** JimmyZ_ is now known as JimmyZ

[14:36] *** FROGGS left
[14:36] *** slavik left
[14:37] *** FROGGS[mobile] joined
[14:37] *** Ven joined
[14:38] *** raiph joined
[14:39] <jnthn> FROGGS[mobile]: Wow, yes, not much code at all

[14:39] <jnthn> FROGGS[mobile]: Slight issue: we leak the library handle.

[14:40] <jnthn> FROGGS[mobile]: Probably good to fix that one...

[14:40] <jnthn> FROGGS[mobile]: Also, I suggest die with NYI in the STORE in NativeCall, so folks won't think it's working 

[14:40] <arnsholt> If it's avoidable, keeping the leaks in Zavolaj to a minimum is probably a good idea, yeah

[14:41] <arnsholt> There are a couple of unavoidable leaks already =/

[14:41] <jnthn> I guess for now it prints stub code executed or so

[14:41] <jnthn> But that isn't very clear about what's up

[14:41] <FROGGS[mobile]> k

[14:41] <FROGGS[mobile]> will do what I can soonish :o)

[14:41] <jnthn> So, think it's just those two things I have.

[14:42] <jnthn> We may be able to do better than the Proxy in the future once I do the natives improvements, but I think even then we can keep the API the same.

[14:43] <jnthn> Also, nice that it's relatively little code to make this work :)

[14:43] <jnthn> FROGGS++

[14:44] <FROGGS[mobile]> that's very true 

[14:44] <arnsholt> FROGGS++ indeed

[14:44] <arnsholt> It's great that you're hacking on Zavolaj

[14:44] <FROGGS[mobile]> :o)

[14:45] <FROGGS[mobile]> well 

[14:45] <FROGGS[mobile]> it is awesome 

[14:45] <PerlJam> speaking of zavolaj, is it a known thing that there are test failures in 05-arrays.t, 06-struct.t, and 08-callbacks.t?

[14:47] <PerlJam> (I was going to play with Inline::Perl5 which requires NativeCall which reports failures when testing)

[14:47] <nine> FROGGS[mobile]: if you're looking for another feature to implement: Buf or Blob or whatever it's called support would be quite nice.

[14:48] <arnsholt> PerlJam: If you're on 32-bit it might be

[14:48] <arnsholt> IIRC there are some annoyances in that area

[14:48] <PerlJam> aye, this box is 32-bit

[14:49] <FROGGS[mobile]> that's what I like to fix next, 32bit issues

[14:49] <FROGGS[mobile]> so OpennSSL becomes portable

[14:49] <FROGGS[mobile]> and my XML::LibXML

[14:50] *** slavik joined
[14:53] <dalek> rakudo/nom: ed1d46c | (Elizabeth Mattijsen)++ | src/core/Supply.pm:

[14:53] <dalek> rakudo/nom: Add support for Supply.lines, as per spec

[14:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ed1d46c5a2

[14:53] <dalek> rakudo/nom: 807dcb5 | (Elizabeth Mattijsen)++ | docs/ChangeLog:

[14:53] <dalek> rakudo/nom: Mention that Str.lines/IO.lines take an :eager

[14:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/807dcb5666

[14:53] <lizmat> *ARGHFFHFHGSFHGAF

[14:54] <lizmat> I didn't want to push ed1d46c5a2

[14:54] <dalek> rakudo/nom: 8970769 | (Elizabeth Mattijsen)++ | src/core/Supply.pm:

[14:54] <dalek> rakudo/nom: Revert "Add support for Supply.lines, as per spec"

[14:54] <dalek> rakudo/nom: 

[14:54] <dalek> rakudo/nom: Not for this release

[14:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/89707698ba

[14:54] <FROGGS[mobile]> dereferencing a shout is not yet supported 

[14:57] *** Ven left
[14:58] *** tere joined
[15:00] <dalek> Inline-Perl5: 5789415 | nine++ | / (3 files):

[15:00] <dalek> Inline-Perl5: Support passing blobs and Bufs from P6 to P5 as binary strings.

[15:00] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/5789415f02

[15:00] <nine> carlin: ^^^ for you

[15:03] <lizmat> gtodd: forgot to mention, IO/Str.lines now take a :eager parameter, which is about 5x as fast

[15:04] <sergot> m: EVAL "die"; say $!;

[15:04] <camelia> rakudo-moar 12ca98: OUTPUT¬´Died‚ê§  in block <unit> at EVAL_0:1‚ê§  in any <unit-outer> at EVAL_0:1‚ê§  in sub EVAL at src/gen/m-CORE.setting:781‚ê§  in block <unit> at /tmp/gVLo_HlmWD:1‚ê§‚ê§¬ª

[15:04] <sergot> m: EVAL "die"; say "$!:", $!;

[15:04] <camelia> rakudo-moar 12ca98: OUTPUT¬´Died‚ê§  in block <unit> at EVAL_0:1‚ê§  in any <unit-outer> at EVAL_0:1‚ê§  in sub EVAL at src/gen/m-CORE.setting:781‚ê§  in block <unit> at /tmp/2pVy7zkPJl:1‚ê§‚ê§¬ª

[15:04] <sergot> can I check if EVAL died or not?

[15:04] <sergot> somehow

[15:05] <TimToady> m: try EVAL "die"; say $!;

[15:05] <camelia> rakudo-moar 12ca98: OUTPUT¬´Died‚ê§  in block <unit> at EVAL_0:1‚ê§  in any <unit-outer> at EVAL_0:1‚ê§  in sub EVAL at src/gen/m-CORE.setting:781‚ê§  in block <unit> at /tmp/V8KJsUHZuo:1‚ê§‚ê§¬ª

[15:05] <TimToady> m: try EVAL "die"; say "alive"

[15:05] <camelia> rakudo-moar 12ca98: OUTPUT¬´alive‚ê§¬ª

[15:07] * masak is back from a slight household emergency

[15:07] * masak backlogs

[15:07] <sergot> m: try EVAL "die"; say "$!:";

[15:07] <camelia> rakudo-moar 12ca98: OUTPUT¬´Died:‚ê§¬ª

[15:07] <sergot> TimToady++ thanks!

[15:07] <masak> hm, Parrot stresstest yields many many failures.

[15:07] <lizmat> masak: I accidentally commited Supply.lines, but reverted immediately

[15:07] <masak> of this kind: 'Non-zero exit status: 255'

[15:08] <masak> *nod*

[15:08] <masak> I think this is unrelated.

[15:08] <masak> but related to certain Linux distros or something.

[15:08] <masak> been a while since I spectested Rakudo-Parrot.

[15:08] <jnthn> ICU?

[15:08] <masak> oh, possibly.

[15:08] <masak> how, on a Debianesque, do I check for ICU?

[15:09] <masak> or just a simple perl6 command to run?

[15:09] <jnthn> Well, run one of the tests, and it should fail with ICU lib not loaded or so

[15:09] *** sqirrel left
[15:10] <pmurias> how can I check if a %*SC_CACHE is set?

[15:10] <masak> 'no ICU lib loaded'

[15:10] <masak> ok, which package is it that I need to install again?

[15:11] <masak> libicu-dev?

[15:11] <masak> seems so.

[15:11] *** yeahnoob joined
[15:13] *** oetiker left
[15:13] *** chenryn joined
[15:16] <masak> lizmat: (re do I want us to take out Int.min) -- if it were only up to me, I'd propose it be taken out. what I really want is for #perl6 to arrive at an enlightened consensus about it. (by which I don't necessarily mean "my opinion", but "what's sane/good/useful") :)

[15:16] <carlin> nine++ thanks

[15:17] <lizmat> fwiw, I think we need to expand it to 'int8', 'int16', etc, to be really consistent

[15:17] <masak> how come we mark up icu tests in spectest.data, and then they still fail under stresstest when icu is absent?

[15:17] <lizmat> icu=1 not being passed ?

[15:18] <dalek> rakudo/nom: 592899a | masak++ | docs/announce/2014.09.md:

[15:18] <dalek> rakudo/nom: [docs/announce/2014.09.md] fill in changes highlights

[15:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/592899a8bc

[15:18] <masak> no idea what's being passed and what isn't :) -- just runnning `make stresstest` over here.

[15:19] <masak> I'm asking at a more abstract level than that, I think -- how come it can happen in the first place?

[15:22] <lizmat> perhaps 'make stresstest' doesn't fudge the spectest.data in the same way that 'make spectest' does?

[15:23] <lizmat> e.g. is it trying any S17 tests on parrot with 'make stresstest' ?

[15:23] *** orafu left
[15:23] *** mr-foobar joined
[15:23] <masak> a good question. also no idea, but I guess staring at the test results would reveal that.

[15:23] <masak> the release guide is all `make stresstest`.

[15:23] *** orafu joined
[15:27] *** JimmyZ left
[15:30] <FROGGS[mobile]> I spectest always

[15:30] *** sdo joined
[15:30] <sdo> hello

[15:31] <FROGGS[mobile]> I know, I must be a bad person :/

[15:31] <PerlJam> sdo: greetings

[15:31] <FROGGS[mobile]> hi sdo

[15:31] <sdo> I was just wondering i went to this page http://www.perlfoundation.org/perl6/index.cgi?state_of_the_onion and there are dead links. Isthat normal?

[15:32] <masak> on the web? yes :/

[15:32] <sdo> hello PerlJam and FROGS

[15:32] <masak> question is if we can heal the dead links.

[15:32] <masak> maybe they're just "mostly dead".

[15:32] <sdo> :)

[15:33] <sdo> ok so as far as I understand everything now is on Githbu isn't it?

[15:33] <sdo> s/Guthbu/Github/

[15:33] <masak> fsvo "everything", yes ;)

[15:33] <masak> we do try.

[15:34] <masak> I'm not aware that SOTO talks have a place in a github repo somewhere...

[15:34] <sdo> so now I will troll on Github to info

[15:34] * PerlJam notices the "promised land" quote by TimToady from 2000

[15:34] <masak> I'd use various incantations of Internet Archive to find them.

[15:34] <gtodd> lizmat: perl6 -e 'my @arr := "/usr/share/dict/web2".IO.lines(:eager); say @arr.pick # this is only 1.3 seconds ... ! with perl5 (using IO::All is might slow it down)

[15:34] *** SamuraiJack joined
[15:34] <sdo> thx masak

[15:34] <PerlJam> That makes Perl 6 development clearer  ... we've been wandering in the desert all these years  :)

[15:35] <sdo> everything is tip top on my side

[15:35] <gtodd> lizmat: it's 0.45 seconds ... perl -MIO::All -E 'my @arr = io("/usr/share/dict/words")->slurp; say $arr[rand @arr];'

[15:37] <lizmat> gtodd: I guess my machine is faster:

[15:37] <lizmat> $ time perl6 -e 'my @a := "words".IO.slurp.lines(:eager); say @a.pick'

[15:37] <lizmat> untestable

[15:37] <lizmat> real	0m0.483s

[15:38] <gtodd> :-) or mine is busy

[15:39] <gtodd> mines an oldish  4 core but with spinning disks zfs raid etc might slow IO a bit 

[15:39] <lizmat> SSD here  :-)

[15:39] *** kaleem left
[15:40] <dalek> rakudo/nom: d3b0bc7 | masak++ | docs/announce/2014.09.md:

[15:40] <dalek> rakudo/nom: [docs/announce/2014.09.md] contributors

[15:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d3b0bc7cd2

[15:40] *** raiph left
[15:40] <gtodd> lizmat: is one of the things you are working on somehow going to make  p6 smart enough to use :eager  without being told to ?

[15:40] <masak> please to check for duplicates kthx thx ^__^

[15:40] <lizmat> gtodd: that would be the GLR

[15:40] <gtodd> right :-)

[15:40] <lizmat> S99:GLR

[15:40] <synopsebot> Link: http://perlcabal.org/syn/S99.html#GLR

[15:40] * masak checked the ones he knows, but is fallible

[15:41] <gtodd> GLR =~ Xmas 

[15:41] <gtodd> ;)

[15:41] <lizmat> This page was generated by Text::SmartLinks v0.01 at 2014-08-27 17:01:08 GMT.

[15:41] <lizmat> (syn 6989f5a)   [ Index of Synopses ]

[15:41] *** zakharyas left
[15:41] <lizmat> whoah, that hasn't been updated in a while!

[15:42] <gtodd> S99 needs to add GLR ?

[15:42] <lizmat> is that feather breakage ?

[15:42] <lizmat> it's already in there

[15:42] <lizmat> just not at the page we're pointing to  :-(

[15:42] <gtodd> yeah I saw it somewhere already

[15:43] <gtodd> anyway I guess GLR is more like halloween  :-)   Xmas is Xmas

[15:43] *** virtualsue left
[15:43] <lizmat> :-)

[15:43] <dalek> rakudo/nom: 052a511 | masak++ | docs/release_guide.pod:

[15:43] <dalek> rakudo/nom: [docs/release_guide.pod] update with #80 release name

[15:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/052a511d6d

[15:44] <timotimo> gtodd: you don't get to =~ in here :)

[15:44] <gtodd> oopsie 

[15:44] <gtodd> I'm approximately smarter than that

[15:44] *** bbkr joined
[15:45] *** kaleem joined
[15:45] <masak> std: 2 =~ 2

[15:45] <camelia> std fc92e1e: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unsupported use of =~ to do pattern matching; in Perl 6 please use ~~ at /tmp/LgyEzyN77u line 1:‚ê§------> [32m2 =~[33m‚èè[31m 2[0m‚ê§Parse failed‚ê§FAILED 00:01 139m‚ê§¬ª

[15:45] <masak> m: 2 =~ 2

[15:45] <camelia> rakudo-moar 897076: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/yXio7wZLVd‚ê§Unsupported use of =~ to do pattern matching; in Perl 6 please use ~~‚ê§at /tmp/yXio7wZLVd:1‚ê§------> [32m2 =~[33m‚èè[31m 2[0m‚ê§¬ª

[15:46] *** rindolf joined
[15:47] <pmurias> nqp: say(nqp::ishash(try %*FOO))

[15:47] <timotimo> are the optimizations to succeed and proceed in this month's release, or were they in last month already?

[15:47] <camelia> nqp-jvm: OUTPUT¬´(signal )¬ª

[15:47] <camelia> ..nqp-{moarvm,parrot}: OUTPUT¬´1‚ê§¬ª

[15:47] <gtodd> hmm does something like ... time perl6 -e 'my @arr := "/usr/share/dict/web2".IO.lines(:eager); say @arr.pick;' # compared with equivalent in ruby node python2/3 perl5  give useful marketing information ?

[15:48] <bbkr> What does "non-invokable object is non-invokable" mean? I get it randomly when running following simple code: my $job1 = start { say "job 1"}; my $job2 = start { say "job 2"}; await Promise.allof($job1, $job2)

[15:48] <PerlJam> gtodd: I dunno.  Seems like the bulk of the time would be spent in IO, so that doesn't really say much about the language.

[15:48] <timotimo> also, did we mean to point out the existence of Proc::Async? or should that wait until we have proper re-ordering of stdout and stderr?

[15:48] <lizmat> timotimo: ordering should be okish now

[15:49] *** fhelmberger left
[15:49] <timotimo> oh? well, that's great! :)

[15:49] <lizmat> there's only the matter of whether it is possible to have a "done" appear after a "done"

[15:49] <timotimo> okish as in "much better than before, but can still occasionally break"?

[15:49] <lizmat> "more" appear after a "done"

[15:49] <lizmat> so I'm not sure it will always get all lines

[15:50] <dalek> nqp: bba7e83 | masak++ | tools/build/MOAR_REVISION:

[15:50] <dalek> nqp: bump MOAR_REVISION

[15:50] <dalek> nqp: 

[15:50] <dalek> nqp: To latest release, in preparation of Rakudo release.

[15:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bba7e83d8c

[15:50] <lizmat> I could see a race where a "done" was done, and after that a "more' WOULD APPEAR

[15:50] <lizmat> oops capslocky

[15:50] <gtodd> PerlJam: yeah

[15:51] *** Akagi201_ joined
[15:51] <dalek> nqp: 03d588a | masak++ | VERSION:

[15:51] <dalek> nqp: bump VERSION to 2014.09

[15:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/03d588af8f

[15:51] <lizmat> timotimo: changelog has now: + added experimental support for Proc::Async, MoarVM only for now

[15:51] <timotimo> nice :)

[15:51] <timotimo> did dalek forget about that comment, or did you just not push it yet?

[15:52] <lizmat> it's in the Changelog, afaics

[15:52] <lizmat> brb

[15:54] *** Akagi201 left
[15:54] *** sdo left
[15:54] *** virtualsue joined
[15:54] <timotimo> oh, it was there already

[15:54] <timotimo> i just didn't look closely enough. sorry about that!

[15:54] *** kaleem left
[15:55] <masak> got a fail in t/spec/S17-lowlevel/lock.rakudo.moar during stresstest.

[15:55] <PerlJam> carlin: you might want to add your name to the CREDITS file.

[15:55] *** telex left
[15:55] <PerlJam> leont: you too

[15:55] <masak> Failed test:  7

[15:55] <pmurias> jnthn: any idea what can be causing nqp::serialize to return null for the data part?

[15:55] <masak> can anyone confirm?

[15:55] <masak> (reports of passes are fine, too)

[15:55] <timotimo> masak: that may be one of our flapping tests :(

[15:55] <masak> there's still time to fudge it ;)

[15:56] <pmurias> jnthn: "data part" - the thing it returns

[15:56] <masak> and to make [Coke] extra happy, feel free to create an RT ticket or so.

[15:56] <timotimo> i can't do it right now, i'm going AFK for a bit

[15:56] <TimToady> I would propose that numeric types have a .range method, or a Range coercer, from which you could subsequently retrieve the bounds

[15:56] *** telex joined
[15:57] <TimToady> int16.range.max is much clearer than int16.max

[15:57] <masak> +1

[15:58] <lizmat> .Range makes more sense to me, then .range

[15:58] <TimToady> we can argue about whether it should be -32768 .. 32767 or -32768 ..^ 32768

[15:58] <masak> probably the former.

[15:58] <masak> then .max comes out right, no?

[15:58] <lizmat> we're coercing a type to its limits

[15:58] <TimToady> unless you're thinking pythonically :)

[15:59] <masak> no, I'm thinking .max is the maximum :)

[15:59] *** raiph joined
[15:59] *** bbkr left
[15:59] <masak> not the first unattainable value

[15:59] <TimToady> I incline toward that interpretation as well

[16:02] <PerlJam> and what lizmat said about .Range ?

[16:02] <pmurias> jnthn: ahh, by reading MoarVM it turns out that it's stashed somewhere and a null is returned

[16:03] <masak> either .range or .Range makes sense to me. if we're bikeshedding that, we've already won because the corner case for .min is already gone ;)

[16:03] <lizmat> m: 42.Range.perl.say  # then maybe this should also work

[16:03] <camelia> rakudo-moar 897076: OUTPUT¬´No such method 'Range' for invocant of type 'Int'‚ê§  in block <unit> at /tmp/Uh1lj0Mry2:1‚ê§‚ê§¬ª

[16:03] <lizmat> would be a Range.new(42..42)

[16:04] <masak> that... makes less sense to me.

[16:04] <PerlJam> yeah, me too

[16:04] * TimToady can imagine use cases involving mixed integer/range inputs

[16:04] <masak> or rather, it feels like a hobgoblin consistency rather than motivated by an actual use case.

[16:05] <TimToady> but [min] already has those semantics

[16:05] <lizmat> m: 1.Set.perl.say

[16:05] <camelia> rakudo-moar 897076: OUTPUT¬´set(1)‚ê§¬ª

[16:05] <lizmat> similar case ^^^

[16:06] <TimToady> m: my $r = 41..43; say [min] 42, $r

[16:06] <camelia> rakudo-moar 897076: OUTPUT¬´41..43‚ê§¬ª

[16:06] <jnthn> pmurias: Yes, see the t/serialize tests for, iirc, how to get things to work out right

[16:06] <masak> m: say set(1).Set.perl

[16:06] <camelia> rakudo-moar 897076: OUTPUT¬´set(1)‚ê§¬ª

[16:06] <jnthn> pmurias: If you want the data, that is

[16:06] <TimToady> er...

[16:06] <TimToady> m: my $r = 41..43; say [minmax] 42, $r

[16:06] <camelia> rakudo-moar 897076: OUTPUT¬´Range objects are not valid endpoints for Ranges‚ê§  in method new at src/gen/m-CORE.setting:7777‚ê§  in method minmax at src/gen/m-CORE.setting:1915‚ê§  in sub infix:<minmax> at src/gen/m-CORE.setting:2034‚ê§  in sub  at src/gen/m-CORE.setting:18424‚ê§  i‚Ä¶¬ª

[16:06] <lizmat> masak: coercing a set to a set, returns self

[16:07] <lizmat> m: "42".Str.perl.say

[16:07] <camelia> rakudo-moar 897076: OUTPUT¬´"42"‚ê§¬ª

[16:07] <masak> lizmat: which things get wrapped in a Set, and which don't? what's a simple rule?

[16:08] <lizmat> anything that's not a set

[16:08] <masak> m: say (1, 2, 3).Set.perl

[16:08] <camelia> rakudo-moar 897076: OUTPUT¬´set(1,2,3)‚ê§¬ª

[16:08] <masak> nope.

[16:08] <masak> that one coerces, and removes the Parcel.

[16:08] <lizmat> m: bag(1,2,3).Set.perl.say

[16:08] <camelia> rakudo-moar 897076: OUTPUT¬´set(1,2,3)‚ê§¬ª

[16:08] <lizmat> hmmm....

[16:08] <masak> so some things get wrapped, others get coerced.

[16:09] <lizmat> anything non-QuantHash gets wrapped

[16:09] <TimToady> m: my $r = 41..43; say 42 min $r

[16:09] <camelia> rakudo-moar 897076: OUTPUT¬´41..43‚ê§¬ª

[16:09] <TimToady> m: my $r = 41..43; say 42 minmax $r

[16:09] <camelia> rakudo-moar 897076: OUTPUT¬´Range objects are not valid endpoints for Ranges‚ê§  in method new at src/gen/m-CORE.setting:7777‚ê§  in method minmax at src/gen/m-CORE.setting:1915‚ê§  in sub infix:<minmax> at src/gen/m-CORE.setting:2034‚ê§  in block <unit> at /tmp/WxwHTRxkiJ:1‚ê§‚ê§¬ª

[16:10] <lizmat> m: set(set(1,2,3)).perl.say

[16:10] <camelia> rakudo-moar 897076: OUTPUT¬´set(set(1,2,3))‚ê§¬ª

[16:10] <masak> lizmat: based on what I see about .Set, I would stay away from it, since it seems that it behaves differently depending on what it's called on.

[16:10] *** Ven joined
[16:11] <jnthn> lizmat: more should not appear after done; it needs to be part of the SequencingSupply, or whatever yo called the object that is handling the ordering enforcement.

[16:11] <lizmat> I'm only following spec, afaik

[16:11] <masak> *nod*

[16:11] <lizmat> jnthn: so "done" is not cued?

[16:11] <[Coke]> https://github.com/coke/perl6-roast-data/blob/master/log/rakudo.parrot_summary.out#L3536 - yesterday's known rakudo-parrot failures.

[16:11] <TimToady> .Set is a coercion, not a composer

[16:11] <masak> I'm suffering quite a bit here from lack of good connectivity, by the way. it's hampering the release process quite a bit.

[16:11] <TimToady> set() is a composer, not a coercion

[16:12] <masak> had I thought about it more, I might have done it on feather from the start.

[16:12] * masak tries that now

[16:12] <jnthn> lizmat: more* [done | quit] is the grammar for supplies

[16:12] <[Coke]> https://github.com/coke/perl6-roast-data/blob/master/perl6_pass_rates.csv (search this file: parrot); failing at least something since 8/27

[16:12] <masak> TimToady: right, but .Set seems to be sometimes compose, sometimes coerce

[16:12] <jnthn> lizmat: Anything that violates that is erroneous.

[16:12] <PerlJam> .oO( and then we all disappear as feather crashes ... 0

[16:12] <TimToady> Not I, said the pig.

[16:12] <lizmat> ok, then sequencing Supply.lines should now be okidoki

[16:13] <jnthn> lizmat: And while we can't prevent folks who make a Supply directly violating the contract, we should try and make sure our own sources don't. :)

[16:13] <carlin> PerlJam: https://github.com/rakudo/rakudo/pull/310

[16:13] <masak> please refrain from merging pull requests during releng ;)

[16:14] <jnthn> masak: Branch! :P

[16:14] <PerlJam> carlin: if you also show up in commits as "carlin" you'll want to add a U: line for that too.

[16:14] *** yeahnoob left
[16:14] <dalek> rakudo/nom: b2a10d7 | Carlin++ | CREDITS:

[16:14] <dalek> rakudo/nom: add self to CREDITS

[16:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b2a10d79f4

[16:14] <dalek> rakudo/nom: 594b175 | lizmat++ | CREDITS:

[16:14] <dalek> rakudo/nom: Merge pull request #310 from carbin/egotism

[16:14] <dalek> rakudo/nom: 

[16:14] <dalek> rakudo/nom: add self to CREDITS file

[16:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/594b175c0c

[16:14] <lizmat> oops, sorry, saw it too late

[16:14] <masak> :S

[16:14] *** chenryn left
[16:14] <lizmat> I figured because carlin was specifically *asked* to update it

[16:15] <lizmat> I thought it would need to go into this release :-(

[16:15] <masak> oh, it's CREDITS.

[16:15] <lizmat> yes

[16:15] <masak> never mind.

[16:15] <masak> lizmat++

[16:15] <masak> carlin++

[16:16] <masak> wow, everything internetty is so fast on feather! <3

[16:16] * masak is behind some kind of... Wall

[16:16] *** chenryn joined
[16:16] <TimToady> watch it!

[16:17] <dalek> rakudo-star-daily: 00ab731 | coke++ | log/ (14 files):

[16:17] <dalek> rakudo-star-daily: today (automated commit)

[16:17] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/00ab731f7a

[16:17] * TimToady is glad masak++ is behind him, actually...

[16:17] <PerlJam> TimToady: just in case you fall?  :)

[16:17] <Ven> hehe, there are quite a few people in that CREDITS file :)

[16:17] <masak> well, it's a Great Wall, so...

[16:18] <TimToady> just don't yell Fire!

[16:18] <jnthn> Though Long Wall is probably a better translation...which is appropriate, 'cus all traffic going through it takes a darn long time...

[16:18] <PerlJam> for some reason that makes me want to alliterate:   Wonderful Western Wall  (maybe?)

[16:19] <masak> jnthn: maybe all the bits get stuck in the Gansu corridor...

[16:19] <TimToady> why is everyone wailing now?

[16:19] <jnthn> .oO( The great firewall Mings... )

[16:19] *** anocelot joined
[16:19] <PerlJam> (the alliterative is for Larry obviously)

[16:19] <[Coke]> rakudo.jvm run today is taking much longer, it seems, though it hasn't died yet.

[16:20] <[Coke]> good news: the parrot fudging that happened happened early enough that rakudo.parrot seems to have had a clear run today!

[16:20] <masak> also, it's rather nice to watch a build happen without the fan spinning up :P

[16:21] <masak> [Coke]: \o/

[16:21] <[Coke]> I will be very happy to push this out. Thanks everyone!

[16:21] <masak> +1

[16:22] <masak> heh, feather1 doesn't have JVM either, it seems. :P

[16:22] <masak> at least not in PATH.

[16:24] <jnthn> masak: Good luck wiht release!

[16:24] <jnthn> 'night, #pelr6

[16:24] <masak> thanks.

[16:24] <lizmat> good night, jnthn 

[16:24] <masak> 'night, jnthn

[16:25] <TimToady> I could give you an account on wall.org if that'd help

[16:26] <TimToady> it's got jvm

[16:27] <TimToady> though it's stuck on an older Ubuntu

[16:27] <masak> I'm making do without for now.

[16:27] <TimToady> and the pipes aren't quite so fat

[16:27] <masak> it's late here, and I just want to generate tarballs and tag stuff.

[16:28] <masak> (but thanks)

[16:28] <masak> t/serialization/01-basic.t in nqp-parrot failed.

[16:29] <masak> is this known? do I need to care?

[16:29] <masak> Failed 12/1355 subtests

[16:30] * lizmat looks

[16:31] <masak> lizmat++

[16:31] <lizmat> is that the name of the file ?

[16:31] <masak> copy-pasted, yes.

[16:31] <masak> encountered by running 'make test' on a fresh nqp with parrot configured.

[16:32] <lizmat> aahhhh nqp

[16:32] <masak> nqp.

[16:32] <masak> I will time out to "don't worry" in a really rather small time interval.

[16:33] <masak> and continue to push the tag and serve the .tar.gz for upload

[16:33] <TimToady> if rakudo on parrot is okay, I wouldn't sweat it

[16:33] *** camelia left
[16:33] <masak> by the way, anyone here able to upload to rakudo.org? I never seem to have my ssh keys handy.

[16:33] <FROGGS[mobile]> I am

[16:33] <masak> excellent.

[16:34] <masak> I'll privmsg you a temp link.

[16:34] * lizmat is still building a fresh nqp-parrot

[16:34] <FROGGS[mobile]> wait for me being on my laptop then...

[16:36] <masak> FROGGS[mobile]: http://masak.org/carl/tmp/nqp-2014.09.tar.gz

[16:37] *** FROGGS joined
[16:37] <masak> FROGGS: ^

[16:37] <FROGGS> yes yes :o)

[16:38] <lizmat> masak: All tests successful.

[16:38] <lizmat> Files=100, Tests=3551, 32 wallclock secs ( 0.50 usr  0.19 sys + 26.71 cusr  4.55 csys = 31.95 CPU)

[16:39] <masak> 'xcellent

[16:39] <masak> lizmat++

[16:39] <dalek> rakudo/nom: 7651c85 | masak++ | tools/build/NQP_REVISION:

[16:39] <dalek> rakudo/nom: [release] bump NQP revision

[16:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7651c85582

[16:39] <dalek> rakudo/nom: ea70a10 | masak++ | VERSION:

[16:39] <dalek> rakudo/nom: [release] bump VERSION

[16:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ea70a10e67

[16:39] <FROGGS> masak: done

[16:40] <masak> FROGGS++

[16:40] <masak> FROGGS: will you be around in about 15..20 minutes for the Rakudo tarball?

[16:40] <FROGGS> masak: yes

[16:40] <FROGGS> :o)

[16:40] <masak> \o/

[16:40] <masak> it's a date.

[16:41] <FROGGS> I am around for about five hours from now on

[16:41] <TimToady> well, a time, anyway

[16:41] <FROGGS> 'There was a time' - quote from one of my favourite movies

[16:41] <masak> which movie, ooc?

[16:42] <[Coke]> lucky number slevin?

[16:42] <FROGGS> Lucky Number Slevin

[16:42] <[Coke]> woot.

[16:42] <FROGGS> *g*

[16:43] <FROGGS> Bruce Willis - the best german actor :P

[16:43] <[Coke]> ISTR really likely that movie, but wonder if would hold up on rewatch.

[16:43] <[Coke]> realyl *liking

[16:44] <timotimo> oooh

[16:44] <timotimo> i recently watched that movie for the first time

[16:44] <timotimo> it blew me away

[16:45] <FROGGS> I watched it at least five times, and I'd do it again :o)

[16:45] <timotimo> watch it seven times, then stop.

[16:46] * masak marks that movie up as worth watching

[16:48] * [Coke] installs the latest Xcode, and wonders if he's going to regret this.

[16:49] <masak> FROGGS: http://masak.org/carl/tmp/rakudo-2014.09.tar.gz

[16:49] <carlin> "This is the last film to feature Willis with hair"

[16:50] <[Coke]> *snrk*

[16:50] <FROGGS> masak: done

[16:51] <[Coke]> reminds me I need to add looper to my list.

[16:51] <masak> FROGGS++

[16:51] *** Ven left
[16:52] <PerlJam> carlin: he had hair in Surrogates.

[16:52] *** virtualsue left
[16:52] *** pmurias left
[16:52] *** dakkar left
[16:53] *** Ven joined
[16:54] <masak> p6c email sent.

[16:54] <carlin> darn, wikipedia has mislead me

[16:54] *** leont left
[16:56] *** chenryn left
[16:57] <masak> https://en.wikipedia.org/wiki/Rakudo_Perl_6 updated.

[16:58] <masak> ...this concludes your monthly Rakudo release cycle.

[16:58] <masak> thank you for being a [willing|reluctant|enthralled] participant.

[16:59] <masak> your feedback is important to us. leave it in the backlog, and a feedbackovore will pick it up and process it.

[17:00] <masak> the captain has switched off the "fasten seatbelt" sign.

[17:01] * masak celebrates with the appropriate amount of pillow

[17:01] <masak> 'night, #perl6

[17:01] *** slmult0_z joined
[17:02] *** zakharyas joined
[17:03] * timotimo is pleased to see, that the Debugger still works

[17:03] <nwc10> masak++

[17:04] <alexghacker> m: my $target = "gdfedbcad"; say $target.subst( rx/ d /, 'q', :g )

[17:05] <[Coke]> can't ssh to host08

[17:06] <[Coke]> error: Socket read error: [54] Connection reset by peer

[17:06] <alexghacker> well, that isn't at all what I was trying to demonstrate

[17:06] <[Coke]> host08 is probably getting hammered by the daily jvm tests atm.

[17:06] <alexghacker> ah, poor timing on my part then

[17:06] <[Coke]> (so camelia is affected as well)

[17:07] <alexghacker> I'll check back later.  That's only the first of several in a sequence I was planning on doing.

[17:13] <timotimo> alexghacker: at least locally that just outputs "gqfeqbcaq"

[17:13] <timotimo> are you working towards the "in the second argument to subst, $/ doesn't work properly" problem?

[17:13] <FROGGS> gnight masak++

[17:14] <gtodd> PerlJam: goofed around a bit and as you pointed out, since there's IO in the mix, these are meaningless  http://paste.scsys.co.uk/424273  ... and in any case ruby/node/python oneliners aren't really equivalent ( is p6 .pick the same as ruby's .sample? ; some of them set up data structures differently etc. etc.)   ...

[17:15] <gtodd> (well node.js javascript doesn't really do "oneliners" ..)

[17:15] <vendethiel> wat?

[17:15] <alexghacker> timotimo: maybe, I'm not familiar with that named problem (having just started perl6 Monday)

[17:16] <alexghacker> timotimo: actually, in the example I was building up to, a manually constructed Match object was going to 'do the right thing' despite having a different orig than the target

[17:16] <alexghacker> perl6-m -e 'my $s = "gdfedbcad"; my $s2 = "abcdefg"; $s2 ~~ m/ d+ /; my $m = Match.new( orig => "abcdefg", from => 3, to => 4, ast => Any, list => ().list, hash => EnumMap.new()); say $/.perl; say $m.perl; say $s.subst( $m, "q", :g );'

[17:17] <timotimo> .. you can pass a match object as the first argument to subst?!

[17:18] <gtodd> PerlJam: but there must be something interesting going on with ruby's .sample to make it so fast   ... 

[17:18] *** grondilu joined
[17:18] <alexghacker> timotimo: it seems that way

[17:20] <grondilu> Hello.  I've noticed something funny.  I was trying time perl6 -e ';' to check out start-up time, and then for some reason I also tried time perl6 -e 'say "hi";'  Surprisingly enough, the former was actually slower than the latter.

[17:20] <alexghacker> I'm trying to figure out what devilry^Wwizardry is going on to make that work

[17:21] * grondilu tries again and can't reproduce it.  Meh, nevermind.

[17:22] <timotimo> grondilu: warm hard drive cache or something?

[17:22] <grondilu> possible

[17:25] <PerlJam> alexghacker: Output your match object as a string.

[17:26] <alexghacker> ah, demote the Match to a Str, then use to construct a Regex?

[17:27] <PerlJam> ~$m is just "d" so,  $s.subst( 

[17:27] <PerlJam> d

[17:27] <PerlJam> oops

[17:28] *** [Sno] left
[17:28] <PerlJam> ~$m is just "d" so,  $s.subst("d", "q", :g); is what you're getting

[17:28] <PerlJam> As to what's doing that, I'd guess Cool probably

[17:29] <timotimo> ah, hehe.

[17:29] <PerlJam> oh, Str's subst() doesn't even  type the arg.

[17:31] *** FROGGS[mobile] left
[17:39] <TimToady> so how long do we wait for host08 to go non-catatonic?

[17:39] <TimToady> and how do we stop waiting? :)

[17:39] <timotimo> m: say "how about now?"

[17:40] <TimToady> camelia disappeared quite some time ago

[17:40] *** Ven left
[17:40] <timotimo> oh

[17:40] <timotimo> weechat probably filtered that for me

[17:40] <timotimo> bbl.

[17:40] <TimToady> and we can't ssh in

[17:40] <lizmat> fg

[17:40] <lizmat> oops

[17:40] * TimToady doesn't give a fg

[17:41] *** brrt joined
[17:42] <PerlJam> brrt: greetings!

[17:42] <brrt> \o PerlJam

[17:43] <colomon> o/

[17:43] <PerlJam> brrt: you may want to add yourself to rakudo's CREDITS file  (it only really matters for attribution on release)

[17:43] <brrt> uh. i could do that. but i've only hacked MoarVM? and added one patch to nqp, iirc

[17:44] <PerlJam> brrt: perhaps someone said brrt++ in a rakudo commit then. :)

[17:44] <brrt> oh that could be true

[17:44] <brrt> oh, wait, i recall

[17:44] <brrt> there was a bug with null pointers in an extop :-)

[17:45] <brrt> lizmat fixed it with my patch

[17:45] <FROGGS> see :o)

[17:46] <colomon> oh, it's release day!

[17:46] <PerlJam> brrt: in any case, if you want something other than "brrt" to show up in the list of contributors, add yourself to the CREDITS file.

[17:46] <brrt> very well

[17:46] *** guru joined
[17:46] *** guru is now known as ajr_

[17:47] * brrt should note that –í—è—á–µ—Å–ª–∞–≤ –ú–∞—Ç—é—Ö–∏–Ω isn't sorted right :-)

[17:47] <brrt> or wait

[17:47] <brrt> is the cyrillic B a B?

[17:47] *** Ven joined
[17:49] <brrt> should i add brrt as my username or bdw?

[17:49] <brrt> (bdw is my github username)

[17:49] <PerlJam> both if you like.

[17:49] <PerlJam> (with multiple U: lines)

[17:49] <gtodd> there's no comparison (yet) between: ruby -e 'puts File.readlines("/usr/share/dict/web2").grep(/\bzygote\b/)'  @0.02 seconds  and   perl6 -e 'say "/usr/share/dict/web2".IO.slurp.lines(:eager).grep({/<<zygote>>/})'  @96.52s seconds ....  (grep "zygote" /usr/share/dict/words  from the shell is the fastest hehe) ... but why would using feeds in perl6 be faster ?  GLR?    

[17:49] <alexghacker> B is [CYRILLIC CAPITAL LETTER VE] while B is [LATIN CAPITAL LETTER B]

[17:49] <brrt> ah ok

[17:50] <diakopter> m: 1

[17:50] <gtodd> perl6 -e 'my @arr := "/usr/share/dict/web2".IO.slurp.lines(:eager); @arr ==> grep({m/<<zygote>>/}) ==> my $stuff; say $stuff; is ~three times faster (30 seconds)

[17:50] <alexghacker> no idea how they should collate, though.  I haven't read enough of the Unicode specification yet

[17:51] <diakopter> who kilt host08 :)

[17:51] <brrt> yeah, that's what i thought. the cyrillic b looks like (hang on)

[17:51] <PerlJam> brrt: perl6 thinks it's sorted wrongly too :)

[17:51] <brrt> –ë

[17:51] <brrt> very nitpick :-)

[17:51] <alexghacker> much codepoint

[17:51] <brrt> ehm, you want me to do a pull request?

[17:52] <PerlJam> that'll work.

[17:52] <brrt> ok

[17:53] <tony-o> timotimo: added quite a few more tests, fixed some bugs to http async server

[17:54] <lizmat> which reminds me, I need to look at IO::Async as well

[17:54] <brrt> https://github.com/rakudo/rakudo/pull/311

[17:55] <lizmat> PerlJam: will you do the honors this time, or shall I ?

[17:55] <diakopter> host08 death: http://i.imgur.com/rV2UtaF.png

[17:56] <lizmat> .oO( now understands why Oracle makes it so difficult to download java )

[17:56] <tony-o> why?

[17:56] <Ven> oh, is everybody adding themselves to credit :p?

[17:57] <lizmat> tony-o: look closely at the image diakopter posted

[17:57] <dalek> rakudo/nom: e2017c3 | TimToady++ | t/harness:

[17:57] <dalek> rakudo/nom: remove LOLLY hack

[17:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e2017c3744

[17:57] <dalek> roast: d329a22 | TimToady++ | S02-types/multi_dimensional_array.t:

[17:57] <dalek> roast: remove LOLLY hack

[17:57] <dalek> roast: review: https://github.com/perl6/roast/commit/d329a2261a

[17:57] <dalek> roast: 57fa591 | TimToady++ | / (19 files):

[17:57] <dalek> roast: Merge branch 'master' of git://github.com/perl6/roast

[17:57] <dalek> roast: review: https://github.com/perl6/roast/commit/57fa591652

[17:57] <FROGGS> jvm killed my laptop today too

[17:57] <brrt> somebody has to take the credit :-)

[17:57] <tony-o> lol

[17:57] <dalek> rakudo/nom: a028192 | (Bart Wiegmans)++ | CREDITS:

[17:57] <dalek> rakudo/nom: Add self to CREDITS

[17:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a028192a13

[17:57] <dalek> rakudo/nom: 376950d | duff++ | CREDITS:

[17:57] <dalek> rakudo/nom: Merge pull request #311 from bdw/nom

[17:57] <dalek> rakudo/nom: 

[17:57] <dalek> rakudo/nom: Add self to CREDITS

[17:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/376950de83

[17:58] <diakopter> each process wanted 2.4GB memory

[17:58] <Ven> that happens

[17:58] * PerlJam wanders off to a meeting

[17:58] <Ven> JAVA ))))

[17:58] <diakopter> wait, 5.8GB

[17:58] <diakopter> ha

[17:58] <diakopter> also it's suggesting sacrificing children

[17:59] <TimToady> note that you have to multiply TEST_JOBS by about 3 to get the Java effect

[17:59] <lizmat> gtodd: $ time perl6 -e 'my @arr := "words".IO.slurp.lines(:eager); @arr ==> grep("zygote") ==> my $stuff; say $stuff'

[17:59] <lizmat> zygote

[17:59] <lizmat> real	0m0.805s

[17:59] <lizmat> grep is smarter than you think  :-)

[17:59] <TimToady> so TEST_JOBS=3 make j-spectest is equivalent to about TEST_JOBS=9 make m-spectest

[18:00] <gtodd> lizmat: ok good :-)

[18:01] *** camelia joined
[18:01] <lizmat> diakopter++

[18:02] <tony-o> is anyone using travis-ci for module build testing?

[18:02] *** ChanServ sets mode: +v camelia

[18:03] <brrt> java gc is very wow

[18:04] <brrt> complexity causes efficiency, you know

[18:06] <diakopter> m: 1

[18:06] <gtodd> lizmat:I was curious why using feeds ("==>") is so much faster than ->   perl6 -e 'say "/usr/share/dict/web2".IO.slurp.lines(:eager).grep("zygote");'   (62 seconds here so many orders of magnitude) ... are feeds avoiding getting bogged down in the laziness in lists somehow?

[18:06] <camelia> rakudo-moar 897076: ( no output )

[18:06] <diakopter> anyone: email me instead of irc if it needs kicked again; it's much faster

[18:06] <lizmat> gtodd: I would guess that as a yes

[18:07] <gtodd> lizmat:  :-) I like it when my guesses are halfway intelligent  yay!

[18:07] <gtodd> cheers

[18:07] * lizmat doesn't know that much of the innards of feeds, but assumes they're gather / take implemented

[18:08] <lizmat> and that's exactly the difference between the :eager and non eager version of .lines

[18:08] <gtodd> nice

[18:08] <gtodd> very ... consistent

[18:09] <dalek> rakudo/nom: 9850adc | (Elizabeth Mattijsen)++ | src/core/IO/Handle.pm:

[18:09] <dalek> rakudo/nom: Implement IO::Handle.lines(:count)

[18:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9850adca47

[18:09] <gtodd> ... which to me (non engineer) suggests something well designed is going on inside p6

[18:10] <dalek> nqp: 5ed99d2 | usev6++ | 3rdparty/dyncall/configure:

[18:10] <dalek> nqp: add CFLAGS=-fPIC to compile dyncall for backend gen-parrot on FreeBSD

[18:10] <dalek> nqp: In order to install perl6-p on FreeBSD 10.0 I had to compile dyncall with CFLAGS=-fPIC.

[18:10] <dalek> nqp: I think this was the same problem ChoHag++ reported earlier on #perl6:

[18:10] <dalek> nqp: * http://irclog.perlgeek.de/perl6/2014-06-10#i_8847415

[18:10] *** dalek left
[18:10] <lizmat> we do try to do as much as possible with the fewest components, yes  :-)

[18:10] *** dalek joined
[18:10] *** ChanServ sets mode: +v dalek

[18:11] <gtodd> usev6++ errm 

[18:11] <gtodd> usev6++++

[18:11] <lizmat> bartolin++ on IRC actually, I think

[18:11] *** Akagi201_ left
[18:11] <gtodd> this will fix nqp-p build on FreeBSD releases

[18:12] <PerlJam> uesv6 "needs" a CREDITS entry too (still in meeting :)

[18:12] <PerlJam> er, usev6

[18:12] *** Akagi201 joined
[18:12] *** bartolin joined
[18:12] <gtodd> bartolin++

[18:12] <gtodd> he

[18:12] <bartolin> Hi #perl6

[18:13] <FROGGS> hi bartolin 

[18:13] <bartolin> Thanks for merging FROGGS++

[18:13] <FROGGS> bartolin: pleasure :o)

[18:13] *** jack_rabbit joined
[18:13] <gtodd> bartolin: FreeBSD nqp-p yay

[18:14] <vendethiel> bartolin++ # `use v6`-ing; ;-).

[18:15] <bartolin> I managed to install perl6-p on FreeBSD. But there is a second tweak with parrot, which I have not coded properly.

[18:15] <bartolin> (yet)

[18:15] <dalek> rakudo/nom: c6c539f | (Elizabeth Mattijsen)++ | src/core/Str.pm:

[18:15] <dalek> rakudo/nom: Implement Str.lines(:count)

[18:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c6c539f8aa

[18:17] *** raiph left
[18:17] <gtodd> ooh lines(:count)  ....  

[18:17] *** Akagi201 left
[18:20] <gtodd> bartolin: I will build on some 9.2 and 9.3  boxes and vms this evening

[18:21] *** raiph joined
[18:22] <gtodd> lizmat: is  lines(:count) for users or for the GLR   ... I'm trying to grok the commit a little ...

[18:22] <lizmat> it's just an unspecced feature I'm throwing in at this moment

[18:23] <gtodd> ok so one coudld pass an Int like lines(:5000)  or something

[18:23] <bartolin> gtodd: Great. I would like to know about your results (9.2 and 9.3)

[18:23] <lizmat> ah, no, that's the "limit" parameter

[18:23] <lizmat> and that is a positional

[18:24] <gtodd> ah ok ... so it helps the lines/list be less lazy?

[18:24] <lizmat> :count just gives you the number of lines

[18:24] <gtodd> or could

[18:24] <lizmat> no, something else altogether, and quite possibly to be reverted

[18:24] <gtodd> :-D

[18:24] <gtodd> git is great that way

[18:24] <TimToady> maybe should be a .linecount method

[18:25] <lizmat> yup, and we now have a month to decide whether it will be in the next release

[18:25] <lizmat> and also a .wordcount then, TimToady ?

[18:26] <TimToady> well, maybe, or perhaps we need a 'count' context to go with eager, lazy, etc.

[18:26] <TimToady> count would almost be a sink

[18:27] <lizmat> but an numeric sink instead of a Nil sink

[18:27] <TimToady> right

[18:27] <TimToady> one more thing tossed into the GLR hopper :)

[18:28] <Ven> ingy: hahaha just realized your regexp couldnt fail :(

[18:28] <dalek> rakudo/nom: c15fc49 | (Elizabeth Mattijsen)++ | src/core/Supply.pm:

[18:28] <dalek> rakudo/nom: Implement Supply.lines

[18:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c15fc495e4

[18:28] <gtodd> I was wildly guessing that there would be something we little users could manually with :args to make p6 lists less lazy before the GLR ... but maybe that *is* the GLR ?

[18:29] <TimToady> well, an explicit eager helps in some cases already

[18:29] <lizmat> gtodd: no, the GLR should change evert gather / take into an eager push construct autmagically when it can

[18:29] <gtodd> :-)

[18:30] <lizmat> TimToady: it does?  in which cases ?

[18:30] <TimToady> it helps a little with gather/take even

[18:30] <TimToady> though not as much as the push rewrite

[18:31] *** dwarring joined
[18:31] <gtodd> count as a "context" for eager lazy is mentally/linguistically pleasing  .. tells p6 just how lazy or how eager to be 

[18:32] <FROGGS> jnthn: ummm, there is a thinko in my cglobal code :/

[18:32] <dalek> rakudo/nom: 51986e8 | (Elizabeth Mattijsen)++ | t/spectest.data:

[18:32] <dalek> rakudo/nom: Add Supply.lines tests

[18:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/51986e85fb

[18:33] <gtodd> lizmat++ automagic++ ;-)

[18:34] <FROGGS> jnthn: which is a design issue in nativecall me thinks...

[18:34] <FROGGS> arnsholt: still there?

[18:40] *** PZt left
[18:41] <FROGGS> jnthn / arnsholt: nvm

[18:41] <gtodd> bartolin: the parrot build broke somewhere else for me :-)   pbc_to_exe.c:1300:22: error: use of undeclared identifier 'CTL_KERN'

[18:41] <bartolin> gtodd: I am on that right now.

[18:42] <nine> Just to let you know: I'll be afk until Sunday evening. If some issues with Inline::Perl5 come up please post them to github.

[18:43] <gtodd> bartolin: oh ... nice :-)

[18:43] <lizmat> nine: have a nice long weekend!

[18:43] <FROGGS> nine: we'll do :o)

[18:43] <nine> lizmat: thanks!

[18:43] <bartolin> gtodd: You have to add the following to parrot/tools/dev/pbc_to_exe.winxed:

[18:43] <bartolin> gtodd: ##ifdef __FreeBSD__

[18:43] <bartolin> #  include <sys/sysctl.h>

[18:43] <bartolin> #endif

[18:43] <gtodd> nine: loving Inline::Perl5  :-)   no issues :)

[18:43] <FROGGS> ohh!

[18:43] <gtodd> bartolin: exellent

[18:43] <FROGGS> bartolin: that's my fault then

[18:44] <bartolin> gtodd: Does that work for you?

[18:44] <bartolin> FROGGS: Your fault?

[18:45] <FROGGS> bartolin: I added the code to obtain the executable name/path

[18:45] <FROGGS> just in parrot 6.8.0

[18:45] <bartolin> FROGGS: I had the same error yesterday (before parrot 6.8.0).

[18:47] <FROGGS> https://github.com/parrot/parrot/commit/3c00e7e19969971383e50fb58d31ace46a702828

[18:47] <gtodd> bartloin build is continuing

[18:47] <FROGGS> that included that patch as well

[18:47] *** woshty left
[18:47] *** orafu left
[18:47] <bartolin> gtodd: :-)

[18:48] <dalek> rakudo/nom: 696a24b | (Elizabeth Mattijsen)++ | src/core/io_operators.pm:

[18:48] <dalek> rakudo/nom: Make sure lines() passes on named params

[18:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/696a24b528

[18:48] <bartolin> FROGGS: Ahh. Now I see.

[18:48] <gtodd> bartolin: build is continuing with that fix ... did "gmake" inside parrot dir ... and it finished

[18:48] <bartolin> FROGGS: Could you add the #include <sys/sysctl.h> as above?

[18:49] <dalek> roast: baae261 | (Elizabeth Mattijsen)++ | S32-str/lines.t:

[18:49] <dalek> roast: Add tests for Str.lines(:count)

[18:49] <dalek> roast: review: https://github.com/perl6/roast/commit/baae261279

[18:49] * gtodd waist for 20 minutes to do a new git pull  ... lately when I have lunch perl6 gets faster while I eat  :-)

[18:50] <FROGGS> bartolin: I also just can pull request it...

[18:50] *** zakharyas left
[18:50] *** wollmers joined
[18:51] <bartolin> FROGGS: Ah. Then I will do it. (Getting familiar with p6, parrot, git, freebsd ...)

[18:51] <FROGGS> bartolin++ # :o)

[18:55] *** rindolf left
[19:00] *** darutoko left
[19:01] *** woshty joined
[19:02] *** Ven left
[19:06] *** ilogger2 joined
[19:06] *** ChanServ sets mode: +v ilogger2

[19:07] *** slmult0_z_q joined
[19:11] <bartolin> FROGGS: I made a pull request: https://github.com/parrot/parrot/pull/1091

[19:12] <FROGGS> I forwarded it to #parrot :o)

[19:13] *** slmult0_z_q left
[19:13] <bartolin> FROGGS: Ah. Thanks! :-)

[19:18] *** Ven joined
[19:18] <dalek> nqp: 4b7e77a | (Elizabeth Mattijsen)++ | docs/ops.markdown:

[19:18] <dalek> nqp: Add documentation stub for nqp::killprocasync

[19:18] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4b7e77a50f

[19:18] <bartolin> rurban++ FROGSS++ Well, this is amazing (patch committed to parrot)

[19:19] <FROGGS> bartolin: welcome to open source *g*

[19:19] *** spider-mario joined
[19:19] <Ven> that was quick :)

[19:19] *** dalek joined
[19:19] <dalek> specs: f603f96 | (Helmut Wollmersdorfer)++ | S15-unicode.pod:

[19:19] <dalek> specs: fix typo

[19:19] <dalek> specs: review: https://github.com/perl6/specs/commit/f603f96b38

[19:19] *** ChanServ sets mode: +v dalek

[19:20] *** slmult0_z_q joined
[19:20] *** daxim__ joined
[19:20] <dalek> zavolaj/cglobal: 2cc378d | (Tobias Leich)++ | t/09-nativecast.t:

[19:20] <dalek> zavolaj/cglobal: remove test about old pointer->pointer cast

[19:20] <dalek> zavolaj/cglobal: review: https://github.com/jnthn/zavolaj/commit/2cc378d133

[19:20] <dalek> zavolaj/cglobal: 7e31ed4 | (Tobias Leich)++ | /:

[19:20] <dalek> zavolaj/cglobal: Merge branch 'master' of https://github.com/jnthn/zavolaj into cglobal

[19:20] <dalek> zavolaj/cglobal: review: https://github.com/jnthn/zavolaj/commit/7e31ed4a71

[19:20] <dalek> zavolaj/cglobal: ce12b91 | (Tobias Leich)++ | lib/NativeCall.pm6:

[19:20] <dalek> zavolaj/cglobal: we cannot keep the ptr without leeking the libhandle

[19:20] <dalek> zavolaj/cglobal: review: https://github.com/jnthn/zavolaj/commit/ce12b9196a

[19:21] *** zakharyas joined
[19:21] <rurban> bartolin: can you also check openbsd and netbsd? my smokers there are offline for a few weeks

[19:22] <bartolin> rurban: I'd like to do that, but it will certainly take some time (days).

[19:22] <rurban> theoretically it looks good, but we haven't tested it there. thanks

[19:23] <[Coke]> (host08) p6eval is currently pretty busy doing jvm stuff. :P

[19:23] <rurban> and note that I changed your commit a bit. just the subject

[19:24] *** [Sno] joined
[19:24] <bartolin> rurban: I've seen it. Thanks for making it more clear ;-)

[19:25] <[Coke]> (today's daily run was killed, due to jvm.)

[19:27] <[Coke]> was camelia running on host07 previously

[19:28] <[Coke]> ?

[19:28] <Ven> ingy: https://github.com/ingydotnet/pig-latin-acme/blob/master/lib/Pig/Latin.rb#L17 shouldn't that downcase m[1]?

[19:32] <Ven> ingy: got racket working :)

[19:33] *** Guest81141 joined
[19:33] *** infiniteloop joined
[19:33] *** Guest81141 left
[19:34] *** ezra1 joined
[19:42] *** ezra1 left
[19:42] *** Akagi201 joined
[19:45] *** Psyche^_ joined
[19:46] <TimToady> Ven: so, next project is a racket backend for rakudo?  ;)

[19:47] <Ven> TimToady: not sure what that means :P

[19:47] *** mberends joined
[19:47] <Ven> racket doesn't have the best binary/jit out there

[19:47] <TimToady> that's why we call it "research"?

[19:47] *** Akagi201 left
[19:48] <TimToady> and it's the darling of a lot of CS professors

[19:48] <timotimo> who funds it?

[19:48] <Ven> yeah, racket is used a lot in unis

[19:48] <Ven> I mean, even naughty dog uses it :P

[19:49] <Ven> (yeah, the game-makers)

[19:51] <Ven> TimToady: a racket slang would be much better!

[19:51] <Ven> actually, all racket slangs. Racket isn't just ONE language.

[19:52] *** raiph joined
[19:53] *** mberends left
[19:54] <FROGGS> huh, the cglobal stuff even works on windows... right away O.o

[19:59] *** jaffa4 joined
[19:59] <jaffa4> hi all

[19:59] <jaffa4> how to fix this: sub AppendClipboard_3_c(Str $format,Value $data,(&cb(Value $data2)--> Str) render) is symbol('AppendClipboard_3_c') is native($dllname) { * }

[20:00] <dalek> zavolaj/cglobal: ec7dcf2 | (Tobias Leich)++ | lib/NativeCall.pm6:

[20:00] <dalek> zavolaj/cglobal: properly die in cglobal.STORE

[20:00] <dalek> zavolaj/cglobal: review: https://github.com/jnthn/zavolaj/commit/ec7dcf2c3f

[20:02] <FROGGS> jaffa4: have you tried '&render' ?

[20:02] <Ven> .tell ingy https://github.com/ingydotnet/pig-latin-acme/pull/3

[20:02] <yoleaux> Ven: I'll pass your message to ingy.

[20:04] <jaffa4> FROGGS: that did not work

[20:05] *** xragnar_ joined
[20:05] *** xragnar_ is now known as xragnar

[20:08] <FROGGS> jaffa4: why do you give it names anyway? why not just strip 'render'?

[20:08] *** brrt joined
[20:09] <jaffa4> it has informational value

[20:09] <FROGGS> jaffa4: the replace &cb with &render

[20:09] <FROGGS> then*

[20:11] <dalek> roast: ea2cd25 | (Elizabeth Mattijsen)++ | S17-procasync/kill.t:

[20:11] <dalek> roast: Simplify the Proc::Async.kill tests

[20:11] <dalek> roast: 

[20:11] <dalek> roast: Unfortunately, the actual kill can not be done here, as it causes the

[20:11] <dalek> roast: current process to lose the remote process, so the P::A promise is never

[20:11] <dalek> roast: kept or broken.  This even affects it being a part of an anyof with a timeout,

[20:11] <dalek> roast: so we cannot make the test continue.  :-(   Hope this will help jnthn find

[20:11] <dalek> roast: what the heck is going on.

[20:11] <dalek> roast: review: https://github.com/perl6/roast/commit/ea2cd25be7

[20:11] <jaffa4> ok

[20:11] <FROGGS> jaffa4: and I guess you also have to strip the return type of the callback

[20:11] <FROGGS> but I'm not so sure about that

[20:11] <[Coke]> who has access to camelia's runtime?

[20:12] <[Coke]> j: say 3

[20:12] <camelia> rakudo-jvm 696a24: OUTPUT¬´Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.‚ê§¬ª

[20:12] <dalek> rakudo/nom: c2ca930 | (Elizabeth Mattijsen)++ | src/core/Kernel.pm:

[20:12] <dalek> rakudo/nom: Make sure we return Int's with .signal()

[20:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c2ca9305f0

[20:12] <dalek> rakudo/nom: 3176369 | (Elizabeth Mattijsen)++ | src/core/Proc/Async.pm:

[20:12] <dalek> rakudo/nom: Remove premature optimization

[20:12] <dalek> rakudo/nom: 

[20:12] <dalek> rakudo/nom: $*KERNEL.signal has all the mapping we need

[20:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3176369e13

[20:12] <dalek> rakudo/nom: 7c9a978 | (Elizabeth Mattijsen)++ | t/spectest.data:

[20:12] <dalek> rakudo/nom: Add Proc::Async.kill tests back again

[20:12] <dalek> rakudo/nom: 

[20:12] <dalek> rakudo/nom: They shouldn't hang anymore

[20:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7c9a978a08

[20:12] <[Coke]> ^^ for something that is chewing 4 cpus, that's a pretty unsatisfactory answer.

[20:13] <[Coke]> whoops, 3.

[20:15] <[Coke]> m: say .WHAT

[20:15] <camelia> rakudo-moar 696a24: OUTPUT¬´Nil‚ê§¬ª

[20:15] <diakopter> [Coke]: yeah

[20:16] <[Coke]> diakopter: I'm looking on host08 ~p6eval; looks like the evalbot.log isn't registering anything new.

[20:16] <diakopter> oh hm

[20:17] *** camelia joined
[20:17] <[Coke]> ah, we've got log/*.log

[20:17] <diakopter> m: ;

[20:17] <diakopter> well I put it to ~/evalbot/eval.log

[20:18] *** ChanServ sets mode: +v camelia

[20:18] <camelia> rakudo-moar 696a24: ( no output )

[20:18] <diakopter> m: say &say;

[20:18] <camelia> rakudo-moar 696a24: OUTPUT¬´sub say (Any |) { #`(Sub|62277840) ... }‚ê§¬ª

[20:18] <diakopter> cool

[20:19] <jaffa4> FROGGS: experience shows it is not necessary

[20:20] <[Coke]> evalbot/eval.log ? empty

[20:21] *** camelia left
[20:21] *** slmult0_z_q left
[20:21] *** camelia joined
[20:22] <diakopter> m: say &;

[20:22] *** ChanServ sets mode: +v camelia

[20:22] <camelia> rakudo-moar 696a24: OUTPUT¬´(Callable)‚ê§¬ª

[20:23] <[Coke]> rakudo jvm seems to be building, anyway.

[20:23] <[Coke]> but the build, even though it's using 'make install', not 'make -j', it's still using most of the box. if I launch a rakudo-jvm spectest at the same time, I suspect that'd kill us both.

[20:25] <dalek> nqp: 1f0d522 | (Tobias Leich)++ | / (2 files):

[20:25] <dalek> nqp: map op nativecallglobal and bump moar rev

[20:25] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1f0d522148

[20:26] <dalek> rakudo/nom: 314e122 | (Tobias Leich)++ | tools/build/NQP_REVISION:

[20:26] <dalek> rakudo/nom: bump nqp rev for moar with C global support

[20:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/314e122fce

[20:26] <brrt> .tell timotimo i wanted to ask him about what he'd think would be the next step for the JIT. i want to refactor the params functions but this needs some work as i'll need to have a detailed map of coercions done by these

[20:26] <yoleaux> brrt: I'll pass your message to timotimo.

[20:27] <brrt> .hugbot

[20:27] <brrt> .botsnack

[20:27] <yoleaux> :D

[20:27] *** brrt left
[20:28] *** infiniteloop left
[20:29] *** Ven left
[20:30] <dalek> zavolaj: 4cc56c3 | (Tobias Leich)++ | lib/NativeCall.pm6:

[20:30] <dalek> zavolaj: expose sub to fetch C globals

[20:30] <dalek> zavolaj: 

[20:30] <dalek> zavolaj: This will partial resolv issue #11.

[20:30] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/4cc56c35c3

[20:31] <gtodd> rurban: bartolin: with the FreeBSd changes from github.com/parrot/parrot/commit/4d473824e2 and the nqp change to use -fPIC in more places github.com/perl6/nqp/commit/5ed99d2  I stil lcan't build parrot on FreeBDS 9.2 ...  I get the same error about libdyncall_s and -fPIC

[20:31] <gtodd> output here http://paste.scsys.co.uk/422888 ... 

[20:32] <FROGGS> gtodd: and you are sure that patch is still applied and that no old files are flying around?

[20:33] <gtodd> possibly a PEBKAC ... it seems to work on FreeBSD-10.0 will get something set up ti try open and net  

[20:34] <gtodd> FROGGS: gmake clean everywhere ... I will erasing everything a git cloning anew then pulling those revs   

[20:35] <gtodd> FROGGS: hmm  I did perl Configure.pl --backends=parrot --gen-parrot=master --gen-nqp=master 

[20:35] <bartolin> gtodd: Regarding old files: While debugging the problem I did rm nqp/3rdparty/dyncall/dyncall/*.o and rm nqp/3rdparty/dyncall/dyncall/libdyncall_s.a between my trys with Configure.pl

[20:36] <bartolin> gtodd: likewise with dyncall/dyncallback and dyncall/dynload

[20:37] <bartolin> gtodd: Otherwise it looks exactly like the problem I had before my patch to nqp (5ed99d2)

[20:38] <gtodd> hmm I am rm ing a lot of stuff but :-)

[20:38] *** jaffa4 left
[20:38] <FROGGS> gtodd: git clean dxf # that should be enough

[20:39] <FROGGS> gtodd: that deletes everything not checked in, but has troubles with submodules... (but there are none in nqp)

[20:40] <gtodd> hmm ok

[20:42] <bartolin> gtodd: Hmm. And does nqp/3rdparty/dyncall/configure acutally contain the line with -fPIC?

[20:43] <gtodd> if [ -z "${CFLAGS}" ]; then

[20:43] <gtodd>       printf "CFLAGS=-fPIC\n" >>$C

[20:43] <gtodd> fi

[20:44] *** Akagi201 joined
[20:46] *** zakharyas left
[20:46] <gtodd> so yes

[20:46] <bartolin> gtodd: I'm trying with 10.0 and a fresh copy of rakudo.

[20:48] <gtodd> maybe it is my system's libffi libuv etc.

[20:48] *** Akagi201 left
[20:48] <gtodd> everything is recently built

[20:51] *** anaeem1_ joined
[20:52] <gtodd> the layout of modules  always gets me reremembering in a suboptimal way :-) (for me) but I assumed it was due to parrot and moar nqp needing to build differently depending on what else is built at the same time --> basically something complicated that was easier if automated ...

[20:53] <tony-o> is there something similar to %INC in p6?

[20:54] <lizmat> tony-o: not really

[20:54] *** spider-mario left
[20:54] <lizmat> there *is* currently internally a has that keeps the files loaded

[20:54] <lizmat> but that is temporary until the implementation of S11 and S22

[20:54] <tony-o> ahh okay, thank you

[20:55] <lizmat> but even then, it probably won't be system wide

[20:56] <lizmat> each CompUnit (type) will be responsible for remembering if it has been loaded before already

[20:58] <dalek> rakudo/nom: 71de9d1 | (Elizabeth Mattijsen)++ | src/core/IO/Socket/Async.pm:

[20:58] <dalek> rakudo/nom: Normalize (chars|bytes)_supply handling

[20:58] <dalek> rakudo/nom: 

[20:58] <dalek> rakudo/nom: Step #1 in ensuring the order in which we "more" values.

[20:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/71de9d13f8

[20:58] <tony-o> i was more curious from a plugin perspective if i could 'discover' stuff that has been loaded by another module

[20:59] <lizmat> that info may or may not be available yet

[20:59] <lizmat> but that type of introspection *should* be possible, I would think

[21:01] <bartolin> gtodd: This worked for me on FreeBSD 10.0

[21:01] <bartolin> git clone https://github.com/rakudo/rakudo.git

[21:01] <bartolin> cd rakudo

[21:01] <bartolin> perl Configure.pl --gen-parrot --gen-nqp --backends=parrot

[21:01] <bartolin> ## quickly applying the parrot patch manually after parrot repository is cloned

[21:01] <bartolin> make

[21:02] <rurban> ‚Äîgen-parrot=master should be easier

[21:03] <bartolin> rurban: Ah, that way I would get the parrot patch as well?

[21:06] <lizmat> .oO( read that as "parrot sketch" :-)

[21:06] <bartolin> ;-)

[21:09] <dalek> rakudo/nom: 36badaa | (Elizabeth Mattijsen)++ | src/core/IO/Socket/Async.pm:

[21:09] <dalek> rakudo/nom: Apply ordering logic, same as with Proc::Async

[21:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/36badaa42a

[21:10] <lizmat> ^^^ should hopefully fix many of the issue with async sockets

[21:10] <lizmat> *issues

[21:16] *** travis-ci joined
[21:16] <travis-ci> [travis-ci] Rakudo build failed. Elizabeth Mattijsen 'Apply ordering logic, same as with Proc::Async'

[21:16] <travis-ci> [travis-ci] http://travis-ci.org/rakudo/rakudo/builds/35675489 https://github.com/rakudo/rakudo/compare/71de9d13f83d...36badaa42aeb

[21:16] *** travis-ci left
[21:17] <lizmat> ^^^^ failed because of no space left on device

[21:17] <lizmat> "Error while writing to 'Makefile': No space left on device at Configure.pl line 272."

[21:18] <lizmat> where does travis run ?

[21:18] <lizmat> host08 ?

[21:18] * lizmat is not sure how to fix this  :-(

[21:22] *** erkan joined
[21:22] *** erkan left
[21:22] *** erkan joined
[21:25] * lizmat calls it a night

[21:25] <lizmat> good night, #perl6!

[21:25] <bartolin> good night, lizmat++

[21:27] *** jlaire joined
[21:28] <ingy> .

[21:28] <yoleaux> 20:02Z <Ven> ingy: https://github.com/ingydotnet/pig-latin-acme/pull/3

[21:29] *** Larre_the_cow joined
[21:29] <ingy> .tell Ven applied,thanks!

[21:29] <yoleaux> ingy: I'll pass your message to Ven.

[21:29] *** haroldwu joined
[21:29] *** avuserow joined
[21:29] *** apejens joined
[21:29] <timotimo> no spec left on device %)

[21:29] <yoleaux> 20:26Z <brrt> timotimo: i wanted to ask him about what he'd think would be the next step for the JIT. i want to refactor the params functions but this needs some work as i'll need to have a detailed map of coercions done by these

[21:34] <ingy> .tell Ven join #lingy

[21:34] <yoleaux> ingy: I'll pass your message to Ven.

[21:42] *** raiph left
[21:44] *** Akagi201 joined
[21:46] <ggoebel11111111> nine: any chance Inline::Perl5 can be made to handle the default case for Perl6 which assumes Perl5 if use v6; is absent at the top of a script?

[21:47] <ggoebel11111111> see http://perlcabal.org/syn/S01.html

[21:49] *** Akagi201 left
[21:56] <ggoebel11111111> just caught up with backlog... looks like nine is afk until Sunday evening :-(

[21:58] <timotimo> interesting idea

[22:03] *** leont joined
[22:20] *** telex joined
[22:23] *** anaeem1_ left
[22:34] *** ezra1 joined
[22:37] *** ezra1 left
[22:40] *** guru joined
[22:40] *** guru is now known as Guest25747

[22:44] *** leont left
[22:45] *** Akagi201 joined
[22:50] *** Akagi201 left
[22:57] *** cognominal joined
[23:06] *** AndChat-188244 joined
[23:08] *** cognominal left
[23:09] *** Guest25747 left
[23:15] *** erkan left
[23:16] *** erkan joined
[23:22] *** ivanshmakov joined
[23:46] *** Akagi201 joined
[23:46] *** AndChat-188244 left
[23:50] *** Akagi201 left
