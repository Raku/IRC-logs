[00:02] *** rmgk_ joined
[00:02] *** rmgk_ is now known as rmgk

[00:10] *** virtualsue left
[00:23] *** noganex joined
[00:27] *** KCL joined
[00:30] *** Akagi201 joined
[00:35] *** Akagi201 left
[00:41] *** dj_goku joined
[00:51] *** Ugator joined
[00:53] *** robinsmidsrod joined
[00:56] *** Ugator left
[01:08] *** dayangkun joined
[01:09] *** denis_boyun left
[01:32] *** Akagi201 joined
[01:35] <[Coke]> jnthn: sorry. no luck making things fail this evening.

[01:38] *** jferrero joined
[01:43] *** konsolebox joined
[01:44] *** konsolebox left
[01:55] <raydiak> \o *

[02:00] <colomon> o/

[02:02] *** konsolebox joined
[02:03] *** konsolebox left
[02:24] *** aborazmeh left
[02:32] <raydiak> colomon: what have you been up to?

[02:36] <colomon> Trying to clean up Unicode filename handling in my C++ $work code.

[02:36] <raydiak> eh...idk specifically what that entail, but I'm sorry :)

[02:37] <raydiak> *entails

[02:37] <colomon> It entails trying to deal with Microsoft's incompetence.

[02:37] <raydiak> even more "eh"/ew...sorry :P

[02:38] <colomon> basically, I've gone through my filename class and made sure it handles utf8 in char *s and utf16 or utf32 in wchar_t *s, depending on where the code is compiling.

[02:39] * raydiak learned perl 5 in his late teens and got spoiled too much to go very far w/things like C

[02:40] <colomon> and it's only just now occurred to me to wonder if one (or more?) of the libraries I have to interface with may be using utf16 in 4-byte wchar_t class, because they are programming like they are on (broken) Windows even though their code is actually running on OS X / Linux.

[02:40] <colomon> And I've got no idea how I'm going to determine whether that is the case.

[02:43] <raydiak> I have it in my memory for whatever reason that we have similar interests...do you have any interest in Math::Symbolic?

[02:43] <colomon> oh, yes.  :)

[02:44] <colomon> haven't really had time to look at it yet

[02:44] <raydiak> it's a one-man band atm, but I'm totally down for more awesome people to swoop in and make it more serious at any time :)

[02:44] *** aborazmeh joined
[02:44] * colomon is going through a life phase where he is pretty much perpetually wildly behind in everything he needs to do.

[02:45] <raydiak> it needs a serious API, is where it's at atm...has some decent functionality, like solving for a variable in many cases, and compiling to perl 6, but justis plain "not done"

[02:46] <colomon> I did poke a bit recently at Math::ContinuousFractions, but I'm running into infinite loops where I think laziness should be working for me, and haven't had time to sort it out.

[02:47] <raydiak> it's close to being able to replace large parts of the primitive definitions in Pray w/the solving and precompiling abilities

[02:47] <colomon> Pray?

[02:48] <raydiak> that raytracer I used to write about

[02:48] <raydiak> http://cyberuniverses.com/pray/

[02:48] <raydiak> written in P6

[02:49] <colomon> Oh!

[02:49] <raydiak> it's basically how I introduced myself to #perl6, over a year ago now

[02:49] <colomon> I remember the raytracer, forgot the name.  :)

[02:49] <raydiak> yeah that thing :)

[02:51] <raydiak> the only thing stopping me atm, off the top of my head, is figuring out exactly how to deal with the ± resulting from solving a quadratic when calling .compile

[02:52] <colomon> huh.  I wouldn't think that would be that hard...

[02:52] <raydiak> it's not, I'm just indecisive

[02:53] * colomon apologizes for phazing in and out of the conversation here, trying to juggle some $work and dishes at the same time.  ;)

[02:53] <raydiak> nah yer fine didn't even notice

[02:55] <raydiak> anyway, Math::Symbolic has serious implications beyond itself and myself, like auto-generating the math/logic for your games and simulations, so I'm just looking for people besides me who might be interested in contributing

[02:57] <raydiak> I used it to solve the leading problem in 3D as the intersection of a 4D line and a hypercone :)

[02:58] <colomon> I absolutely am interested, but at the moment I cannot see myself having much in the way of tuits before 2015

[03:01] *** jimmy_ joined
[03:02] <raydiak> awesome, good news to me...by then it'll likely be more stable anyway

[03:02] <raydiak> (in terms of api...runtime seems stable already)

[03:02] <jimmy_> Does it run on MoarVM ?

[03:03] *** jimmy_ is now known as JimmyZ_

[03:03] <raydiak> well ya :)

[03:03] <raydiak> not sure if I've tested it on anything else yet...

[03:03] <raydiak> but cpandatesters has

[03:07] <raydiak> (though I can't seem to get those result sto load atm)

[03:10] *** Mso150_f_e joined
[03:15] *** noganex_ joined
[03:18] *** noganex left
[03:19] *** aborazmeh left
[03:21] *** atroxaper joined
[03:23] *** Mouq joined
[03:25] *** atroxaper left
[03:33] *** dj_goku left
[03:36] *** dj_goku joined
[03:41] <colomon> raydiak: just went spulunking through the library code in question, and in fact they with malice aforethought return utf-16 in wchar_t values even if wchar_t is 4 or 8 bytes.  (Who does 8 bytes?)  :(

[03:42] *** Mouq left
[03:45] *** Akagi201 left
[03:45] *** dj_goku left
[03:45] *** Akagi201 joined
[03:47] *** JimmyZ_ left
[03:47] <BenGoldberg> Some strange 64 bit platform which can process strings which use 8 bytes per wchar_t faster than other sizes.

[03:47] * geekosaur would be tempted to suggest Alpha

[03:48] <colomon> The good news is I think my code will handle utf32 in 8 byte characters in a pinch.

[03:48] *** dj_goku joined
[03:48] *** Mso150_f_e left
[03:48] *** JimmyZ_ joined
[03:52] <geekosaur> ok, not alpha, it was 4 byte

[03:53] <geekosaur> it does sound like some platform that used (long) for wchar_t and then ported to 64 bit

[03:55] <colomon> the better news is there is not such thing as utf64

[04:03] <BenGoldberg> That would verge on madness!

[04:13] *** anaeem1_ joined
[04:16] *** anaeem1_ left
[04:16] *** anaeem1 joined
[04:35] *** dj_goku left
[04:35] *** kaleem joined
[04:44] *** dj_goku joined
[04:52] *** kaare_ joined
[04:59] *** dayangkun left
[05:12] *** kaleem left
[05:18] <dalek> ecosystem: a2f27de | (Nick Patch)++ | META.list:

[05:18] <dalek> ecosystem: add Geo::Region

[05:18] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/a2f27de838

[05:26] *** Mouq joined
[05:30] *** gfldex joined
[05:30] *** Mouq left
[05:39] *** Woodi joined
[05:52] *** BenGoldberg left
[05:57] *** kaare_ left
[06:14] *** adu joined
[06:19] *** kaare_ joined
[06:20] *** cibs joined
[06:31] *** JimmyZ_ left
[06:34] *** dayangkun joined
[06:34] *** dayangkun left
[06:51] *** khisanth_ joined
[06:56] *** atroxaper joined
[07:02] *** djanatyn joined
[07:02] *** atroxaper left
[07:06] *** hahainternet joined
[07:12] *** gfldex left
[07:13] *** kaleem joined
[07:16] *** ggherdov joined
[07:17] *** bjz joined
[07:19] *** khisanth_ left
[07:20] <raydiak> if I define a .list() method but my class doesn't do Positional, will it do anything other than let people say @$object? e.g. it won't get called in list context or stuff like that, right?

[07:20] *** khisanth_ joined
[07:22] *** FROGGS joined
[07:28] *** vti joined
[07:52] *** Ugator joined
[07:52] *** FloLo joined
[07:53] <moritz> raydiak: stuff in a scalar container generally isn't automatically iterated over

[07:54] <moritz> m: say(42) for [1, 2, 3]

[07:54] <camelia> rakudo-moar dfcf9f: OUTPUT«42␤»

[07:55] <raydiak> true, and since it can't go in an @ either, I guess it's only an applicable question when the object is used as the return value from a routine without an intermediate container

[07:56] <moritz> iirc map/for use Iterable to decide whether to iterate over a non-itemized object

[07:57] <raydiak> ah, thanks, will read up on that

[07:57] <moritz> not sure much of it is documented

[07:57] <moritz> m: say Positional ~~ Iterable

[07:57] <camelia> rakudo-moar dfcf9f: OUTPUT«False␤»

[07:57] *** KCL left
[07:58] <moritz> raydiak: also, Any has a 'list' method, so all your objects already have one

[07:58] *** rurban joined
[07:58] <raydiak> oh, well that answers that then :)

[07:58] <raydiak> moritz++

[07:59] <FROGGS> morning

[07:59] <raydiak> \o FROGGS 

[08:00] *** atroxaper joined
[08:01] *** rindolf joined
[08:05] *** atroxaper left
[08:07] *** davido_ joined
[08:13] *** krunen joined
[08:13] *** rindolf left
[08:27] *** darutoko joined
[08:33] <hahainternet> so nativecall has no union support it seems, that's a shame

[08:33] <hahainternet> i need to find some stuff to write in p6

[08:33] *** jimmy_ joined
[08:34] *** telex left
[08:35] *** grondilu joined
[08:36] <grondilu> http://rosettacode.org/wiki/Fast_Fourier_transform#Perl_6 is broken, apparently because it's not possible anymore to extract a finite list of values with an infinite list of indices.

[08:36] <grondilu> perl6: my @a = 1 .. 10; say @a[0, 2 ... *];

[08:36] *** telex joined
[08:36] * grondilu is not sure what the spec has to say about that.

[08:37] *** blackbolt joined
[08:37] <camelia> rakudo-{parrot,moar} dfcf9f: OUTPUT«(timeout)»

[08:37] <FROGGS> hahainternet: talk to timotimo, he was about to implement that

[08:37] <FROGGS> hahainternet: so he has at least some insights

[08:38] <hahainternet> FROGGS: rgr, i'm not sure what's blocking it but i've not written anything useful in p6 yet so

[08:39] <FROGGS> hahainternet: you might want to skim the advent posts, or skim the module list for inspiration

[08:40] <sergot> hey o/

[08:40] <FROGGS> hi sergot 

[08:40] <hahainternet> FROGGS: i did but finding details even on 'repr' and its implementation is frustrating

[08:40] <hahainternet> short terms, hard to google for, and i'm inexperienced

[08:40] <grondilu> perl6: my @a = 1 .. 10; say @a[0, 2 ...^ * >= @a];  # kind of ugly, is there a better way to write this?

[08:40] <camelia> rakudo-{parrot,moar} dfcf9f: OUTPUT«1 3 5 7 9␤»

[08:43] <FROGGS> hahainternet: this should shed some lights: https://github.com/edumentab/rakudo-and-nqp-internals-course

[08:43] <FROGGS> hahainternet: here are pdf's: http://edumentab.github.io/rakudo-and-nqp-internals-course/

[08:43] <hahainternet> yep already there :)

[08:43] <hahainternet> thanks

[08:43] *** vti left
[08:44] *** Mso150_f_e joined
[08:48] *** xinming joined
[08:53] *** adu left
[09:02] *** atroxaper joined
[09:03] <eiro> o/ #perl6

[09:07] *** atroxaper left
[09:11] *** azawawi joined
[09:11] <azawawi> hi

[09:11] <yoleaux> 30 Nov 2014 16:46Z <timotimo> azawawi: will you write a post on the advent calendar about farabi6?

[09:12] <azawawi> timotimo: ping

[09:13] * azawawi takes a look at HTTP::Server::Async

[09:15] *** zakharyas joined
[09:19] *** tinyblak joined
[09:26] *** dakkar joined
[09:33] *** Isp-sec joined
[09:34] *** Ugator left
[09:34] *** FloLo left
[09:35] *** Rounin left
[09:37] <azawawi> .tell timotimo Please see https://github.com/azawawi/farabi6/issues/59 

[09:37] <yoleaux> azawawi: I'll pass your message to timotimo.

[09:40] *** vti joined
[09:40] <dalek> zavolaj: 4d9eb73 | (Rob Hoelz)++ | t/08-callbacks.c:

[09:40] <dalek> zavolaj: Remove strdup in Str callback example

[09:40] <dalek> zavolaj: 

[09:40] <dalek> zavolaj: MoarVM no longer attempts to free strings coming in via callbacks;

[09:40] <dalek> zavolaj: other implementations should follow soon

[09:40] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/4d9eb738ee

[09:40] <dalek> zavolaj: c2e7e3c | (Rob Hoelz)++ | README.markdown:

[09:40] <dalek> zavolaj: Add callback example to README

[09:40] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/c2e7e3c3e3

[09:40] <dalek> zavolaj: 6bf4145 | jonathan++ | / (2 files):

[09:40] <dalek> zavolaj: Merge pull request #52 from hoelzro/master

[09:40] <dalek> zavolaj: 

[09:40] <dalek> zavolaj: Documentation for function arguments, and removal of strdup in Str callback test

[09:40] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/6bf4145205

[09:48] <azawawi> .tell timotimo im currently busy a bit @ $work. Hopefully workload will lighten up a bit after December. The HTTP::Server::Async idea is great. Is EventSource possible with it?

[09:48] <yoleaux> azawawi: I'll pass your message to timotimo.

[09:48] *** denis_boyun_ joined
[09:49] *** ptc_p6 joined
[09:52] <Ulti> how can I grab an account on the advent calendar ahead of time?

[09:53] *** jimmy_ left
[09:53] *** denis_boyun_ left
[09:56] <moritz> Ulti: /msg me your email address

[09:57] <Ulti> k k

[09:59] <masak> antenoon, #perl6

[09:59] <moritz> \o masak 

[10:01] <jnthn> .tell hoelzro I'd suggesting giving make_where_block a third optional argument, which defaults to QAST::Var.new( :name('$_'), :scope('lexical') ), and then pass in the QAST tree to make it do $_.signature where you are calling it.

[10:01] <yoleaux> jnthn: I'll pass your message to hoelzro.

[10:08] *** ptc_p6 left
[10:11] *** azawawi left
[10:17] <Ulti> moritz can we get the pygments plugin via wordpress.com?

[10:18] <moritz> Ulti: I have no idea if we can

[10:19] <moritz> Ulti: I tend to use tools that generate HTML, and copy&paste the output into the HTML box

[10:21] <Ulti> yeah I did that but you can't include any <style> tags

[10:21] <Ulti> just checking if the appspot version of pygments has the perl6 support installed or not, not much point otherwise

[10:25] <moritz> according to https://wordpress.com/products/custom-css/ you can put custom CSS somewhere, but I haven't managed to do that yet

[10:26] *** Akagi201 left
[10:46] *** robinsmidsrod left
[10:47] *** Hor|zon joined
[10:47] *** robinsmidsrod joined
[10:50] <blackbolt> Hi, someone install Steroids? i have problem : "Cannot locate native library './sdlwrapper.so"

[10:51] *** Lasse_ joined
[10:56] *** Mso150_f_e left
[10:59] *** mvuets joined
[11:00] <carlin> blackbolt: did you run `make -f Makefile.sdlwrapper` ?

[11:01] *** robinsmidsrod left
[11:02] *** robinsmidsrod joined
[11:02] <blackbolt> carlin: yes, there was "sdl-config" -unknown command

[11:03] <blackbolt> carlin : sdl2-config *

[11:03] <moritz> that would it explain it, I guess :-)

[11:03] <moritz> blackbolt: you probably need to install the sdl2 development headers (+config program)

[11:05] *** denis_boyun_ joined
[11:05] <blackbolt> mortiz : i will do that

[11:08] *** tinyblak left
[11:08] *** tinyblak joined
[11:14] *** robinsmidsrod left
[11:14] *** robins joined
[11:15] *** robins left
[11:18] *** robinsmidsrod joined
[11:25] *** chenryn joined
[11:28] *** robinsmidsrod left
[11:30] *** robins joined
[11:31] *** Isp-sec left
[11:32] *** tinyblak_ joined
[11:34] *** tinyblak left
[11:35] *** TuxCM joined
[11:38] *** kaleem left
[11:40] *** robins left
[11:41] *** rindolf joined
[11:42] *** woolfy joined
[11:42] *** robinsmidsrod joined
[11:44] <Ulti> moritz you'd need admin rights for that though

[11:44] *** kurahaupo joined
[11:46] <moritz> Ulti: I have admin rights

[11:47] <Ulti> moritz well here's a bunch of pygments classes ;P https://gist.github.com/asaaki/1007420

[11:47] *** robinsmidsrod left
[11:48] *** robinsmidsrod joined
[11:49] <Ulti> it's annoying GitHub stopped using pygments otherwise embedded Gist would have worked nicely

[11:49] *** virtualsue joined
[11:50] *** robinsmidsrod left
[11:50] *** robinsmidsrod joined
[11:53] *** robinsmidsrod left
[11:53] *** robins joined
[11:55] <colomon> huh.  cleanest smoke test run in days, but I don't understand why.  :\

[11:56] *** robins left
[11:56] *** robinsmidsrod joined
[12:01] <carlin> colomon: LibraryMake was fixed yesterday, would have a fixed a few projects

[12:02] <colomon> ah

[12:03] *** bcode joined
[12:09] *** smls joined
[12:09] <smls> o/

[12:10] *** atroxaper joined
[12:16] *** rurban left
[12:17] *** atroxaper left
[12:19] * smls is enjoying mst's advent calendar ("mstpan") in which each day he provides an opinionated overview of available Perl 5 modules for a particular task: http://shadow.cat/blog/matt-s-trout/

[12:19] <smls> ^^ might also be of interest to Perl 6 module authors looking for inspiration / prior art / cautionary tales

[12:35] <Ulti> so how do I get around "Circular module loading detected" when there is no actual circular dependencies other than two classes might want to produce each other

[12:35] <Ulti> do they have to be in the same file?

[12:35] <Ulti> or is it just that I'm doing use rather than require or something

[12:38] <dalek> specs: a3cb57b | (Nick Patch)++ | S32-setting-library/Exception.pod:

[12:38] <dalek> specs: [S32::Exception] remove double-a typo

[12:38] <dalek> specs: review: https://github.com/perl6/specs/commit/a3cb57b9ed

[12:40] *** Ven joined
[12:40] *** erkan joined
[12:40] *** erkan left
[12:40] *** erkan joined
[12:42] *** chenryn left
[12:44] <FROGGS> Ulti: perhaps put it in the same file, then stub class A, then declare B and A

[12:52] <Ven> "valgrind is not just a leak checker"

[12:52] <Ven> http://maintainablecode.logdown.com/posts/245425-valgrind-is-not-a-leak-checker

[12:53] *** kaleem joined
[12:57] *** brrt joined
[12:57] <brrt> \o

[12:58] *** anaeem1 left
[13:01] <Ulti> this feels like a bigger problem though if you have a bunch of classes that coerce to each other

[13:01] <FROGGS> you just need to stub the A's once

[13:02] <FROGGS> and this should perhaps also work across files/CUs

[13:02] <arnsholt> masak: Oooh, those were interesting posts. Thanks for mentioning it!

[13:04] *** BenGoldberg joined
[13:06] * Ven needs to clog masak's links

[13:06] *** Ven left
[13:08] <smls> moritz, Ulti (re. custom CSS on wordpress): I've read that's only possible if you either self-host your wordpress blog, or upgrade to a paid plan on wordpress.com

[13:10] <masak> arnsholt: I have completely lost context ;) no idea what posts those were, but glad they were interesting.

[13:10] <smls> although you can embed CSS in a <style></style> element in your post contents

[13:10] <arnsholt> masak: mstpan =)

[13:10] <arnsholt> Oh, except it was smls, not you

[13:11] <arnsholt> Apparently I have still not had enough caffeine this morning >.<

[13:11] <colomon> caffeine++

[13:12] <moritz> (not needing caffeine)++

[13:12] <colomon> moritz: indeed  :)

[13:14] *** BenGoldberg left
[13:14] <smls> Ulti: Also, I've tried the pygments plugin on a local wordpress install, and it isn't very good.

[13:15] <smls> For example, non-ASCII characters tripped it up badly.

[13:15] <smls> And it inserted a huge CSS block before every single syntax-highlighted code snippet, rather than just one per page.

[13:16] <smls> (which significantly affected page load time for a page with many code snippets)

[13:21] <Ulti> lame

[13:24] <smls> Ulti: Note that you can manually pipe your code snippets through pygmentize though (which is installed with Pygments), using  «pygmentize -f html -O nowrap -l perl6 -o output.htm input.p6»

[13:24] <smls> Or write your file in HTML and make sure all code snippets are in <code></code> tags, and then use my convenience script on it: https://github.com/smls/undef/blob/master/scripts/pygmentize-code-tags.p6

[13:25] <smls> (although the script still has some rough edges)

[13:25] <smls> And then add something like this to the top of the HTML:  https://gist.github.com/smls/a67af2e2c6466df32dc9

[13:26] *** denis_boyun_ left
[13:28] <moritz> or you could use Text::VimColor

[13:31] *** atroxaper joined
[13:46] * colomon wonders how hard it would be to make a p6 version of Text::VimColor...

[13:47] <FROGGS> ++colomon

[13:47] <FROGGS> :D

[13:58] <Ulti> yeah smls I was already doing that but the problem is <style> is stripped out by Wordpress

[13:58] <Ulti> I think moritz can probably allow all HTML in posts though

[13:59] <smls> really?

[13:59] <Ulti> yarly

[13:59] <smls> it's not stripped out in my install

[13:59] <Ulti> at least with the current security settings 

[13:59] <smls> maybe it's a *wordpress.com* thing, to promote their premium plan which includes custom CSS support?

[13:59] <Ulti> smls well I literally just tried this

[14:03] <moritz> Ulti: would it help you if I gave you admin privs?

[14:04] <Ulti> :S perhaps

[14:05] <moritz> Ulti: what's your wordpress user name?

[14:05] *** telex left
[14:05] <Ulti> though it's perhaps a better plan if I get some crappy wordpress.com blog to play in and work it out first

[14:05] <Ulti> moritz matteoates

[14:06] <moritz> Ulti: ok, you should be admin now

[14:07] *** araujo joined
[14:07] *** araujo left
[14:07] *** araujo joined
[14:19] *** kaare_ left
[14:19] *** Mouq joined
[14:32] *** telex joined
[14:33] *** Celelibi joined
[14:38] <Ulti> uh oh

[14:40] <Ulti> yeah I think its more this version of wordpress is some funky one specific to wordpress.com like all the stuff you might want to change and use ask you to pay £70 a year

[14:41] <smls> :(

[14:42] <smls> Does it at least allow inline  style=""  attributes?

[14:42] <Ulti> not sure

[14:43] <smls> Did you test if <style> elements are stripped even when posting as admin?

[14:45] *** blackbolt left
[14:45] <Ulti> yeah they are

[15:03] *** spider-mario joined
[15:06] *** anaeem1_ joined
[15:06] *** anaeem1_ left
[15:07] *** anaeem1_ joined
[15:10] *** atroxaper left
[15:12] *** Mouq left
[15:16] *** anaeem1_ left
[15:22] *** anaeem1 joined
[15:22] <masak> m: role A {}; role B does A {}; multi foo(A) { say "A" }; multi foo(B) { say "B" }; foo(B.new)

[15:22] <camelia> rakudo-moar dfcf9f: OUTPUT«B␤»

[15:22] <masak> m: role A {}; role B is A {}; multi foo(A) { say "A" }; multi foo(B) { say "B" }; foo(B.new)

[15:22] <camelia> rakudo-moar dfcf9f: OUTPUT«Ambiguous call to 'foo'; these signatures all match:␤:(A)␤:(B)␤  in sub foo at /tmp/wV8QRUJXF6:1␤  in block <unit> at /tmp/wV8QRUJXF6:1␤␤»

[15:23] <masak> oh, maybe that makes sense.

[15:23] <masak> "is" on a role means something like "compose at the last minute".

[15:26] *** FROGGS left
[15:26] <tadzik> I just noticed that Supply.act is pretty much what Steroid's event system is doing

[15:26] <yoleaux> 7 Dec 2014 01:37Z <raydiak> tadzik: sent you a PR for panda, s:g/path/IO/

[15:26] <tadzik> raydiak: oh, thanks :) Will look at it later today

[15:26] *** psch joined
[15:27] *** muraiki left
[15:28] <psch>  hi #perl6 \o

[15:29] <yakudza> \o

[15:30] <hoelzro> jnthn: sounds good, thanks!

[15:30] <yoleaux> 10:01Z <jnthn> hoelzro: I'd suggesting giving make_where_block a third optional argument, which defaults to QAST::Var.new( :name('$_'), :scope('lexical') ), and then pass in the QAST tree to make it do $_.signature where you are calling it.

[15:32] *** muraiki joined
[15:32] *** KCL_ joined
[15:32] *** kaare_ joined
[15:36] *** perltricks joined
[15:41] <perltricks> hey y'all is there a way to capture stderr from qx//?

[15:46] <lizmat> good *, #perl6!

[15:46] <lizmat> did pl6anet.org fall out of DNS ?

[15:49] <moritz> I get connection resets from the DNS servers

[15:54] <pyrimidine> Anyone else seeing NativeCall test fails on OS X?

[15:54] <pyrimidine> https://gist.github.com/cjfields/bd7682e80c679eb1a49c

[15:55] * lizmat sees many tests flapping on OS X, period  :-(

[15:58] *** ptc_p6 joined
[15:58] *** treehug88 joined
[15:59] <pyrimidine> lizmat: :( indeed

[16:02] *** FROGGS joined
[16:04] *** skarn joined
[16:06] *** Lasse_ left
[16:06] *** ptc_p6 left
[16:07] *** ptc_p6 joined
[16:09] *** denis_boyun joined
[16:09] * El_Che spend the day configuring a nice perl5 soft that really could use p6 threading :). The soft is single threaded on a single cpu. Making it scale takes some work. Happy it works :) 

[16:09] * brrt is still looking for a way to run a recent darwin on virtualbxo

[16:09] *** NotJAck joined
[16:09] <brrt> virtualbox

[16:10] *** NotJAck is now known as NotJack

[16:11] <psch> is there a different name for the colonpair on a used module's name without a space in contrast to with?

[16:11] <psch> i.e. "use Foo :<Bar>;" vs "use Foo:from<java>;"

[16:11] <psch> i'd happily call the left one an adverb, but not the right one

[16:12] <Ulti> pyrimidine: yes

[16:13] <psch> ah, S11 calls it an adverb as well

[16:13] <Ulti> the same error here on OSX 10.9.5

[16:13] *** rurban joined
[16:13] <psch> that does seem somehow lacking to me, but i guess it's the space or lack of space which changes whether we're changing what's used vs how we use

[16:14] <pyrimidine> Ulti: was planning on an initial run at NativeCall implementation of htslib/samtools when I have time.  Kinda puts a kink in that :P

[16:14] <Ulti> :[

[16:15] *** ptc_p6 left
[16:15] <Ulti> yeah I was going to try and get SQUID bindings as a demo, but I think your plan is more useful

[16:16] <pyrimidine> squid would be nice and probably simpler

[16:17] <Ulti> erk it fails even more on Linux for me

[16:17] <Ulti> this is with Rakudo-m from today

[16:18] <Ulti> might be a better plan to use an actual release I guess

[16:18] * brrt hasn't seen great linux-related failures yet

[16:18] <brrt> but i haven't checked today either

[16:20] <nickpatch> howdy all!

[16:20] <nickpatch> i made a new p6 module Geo::Region: https://github.com/patch/geo-region-pm6

[16:20] <masak> nickpatch! \o/

[16:20] <masak> nickpatch: add it to the ecosystem?

[16:20] <nickpatch> masak: already done!

[16:21] <nickpatch> ported it from p5, so i would love any feedback on the code or api in regards to p6ishness

[16:24] *** kaleem left
[16:25] <lizmat> nickpatch: the only thing that seemed a bit non-optimal, are the "contains" and "is_within methods

[16:25] <lizmat> (also is-within maybe?)

[16:25] <lizmat> seems like an awful lot of work to be done to get a boolean

[16:25] *** digitalw00t joined
[16:25] <digitalw00t> ?

[16:25] <lizmat> otoh, it's only done once, right?

[16:25] <digitalw00t> Morning

[16:25] <lizmat> digitalw00t /o

[16:28] <Ulti> nickpatch the long list of constants could maybe be an enum

[16:29] <colomon> nickpatch: I've been fighting with Unicode (for $work rather than p6) since Thursday.  And as long as you're here: utf16 in wchar_t on Linux: Wrong or Very Very Wrong?

[16:29] <Ulti> nickpatch: http://perlcabal.org/syn/S12.html#Composition_from_Pairs

[16:29] *** KCL_ left
[16:30] <TimToady> STD calls foo:bar<baz> a longname

[16:30] <Ulti> that way you have typeness and you dont pollute the namespace of someone using the module and you get helper methods like .invert

[16:31] <dalek> rakudo/newio: 6b53d38 | (Tobias Leich)++ | src/core/CompUnitRepo/Local/Installation.pm:

[16:31] <dalek> rakudo/newio: fix last .IO.path.basename leftover

[16:31] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/6b53d381e0

[16:31] <dalek> rakudo/newio: 4a9ebae | (Tobias Leich)++ | src/core/CompUnitRepo.pm:

[16:31] <dalek> rakudo/newio: fix CompUnitRepo.files

[16:31] <dalek> rakudo/newio: 

[16:31] <dalek> rakudo/newio: When asking for an installed file (i.e. a script) then we basically ask for a filename, and

[16:31] <dalek> rakudo/newio: optionally for distname/auth/version. In contrast to asking for packages where we tend to ask

[16:31] <dalek> rakudo/newio: for packagename, and optionally for a filename/auth/version.

[16:31] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/4a9ebae1e2

[16:31] <dalek> rakudo/newio: 8a9791d | moritz++ | Configure.pl:

[16:31] <dalek> rakudo/newio: Configure: warning on missing --prefix option

[16:31] <dalek> rakudo/newio: 

[16:31] <dalek> rakudo/newio: requested for star in rakudo/star#40, and added here for consistency

[16:31] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/8a9791da10

[16:31] <dalek> rakudo/newio: dfcf9fc | moritz++ | src/core/Exception.pm:

[16:31] <dalek> rakudo/newio: Preserve warning message "0"

[16:31] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/dfcf9fccf0

[16:31] <dalek> rakudo/newio: bef54c7 | (Elizabeth Mattijsen)++ | / (4 files):

[16:31] <dalek> rakudo/newio: Merge branch 'nom' into newio

[16:31] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/bef54c77c4

[16:32] *** atroxaper joined
[16:32] <psch> TimToady: i'll call the parameter to use a "longname consisting of the module name and a colonpair" then, thanks

[16:34] *** brrt left
[16:35] *** mr-foobar joined
[16:35] <colomon> nickpatch++ # making patches to Geo::Region as I'm reading the source.  :)

[16:35] <nickpatch> lizmat: is_within is now is-within

[16:36] <nickpatch> colomon: yay! :D

[16:37] <nickpatch> lizmat: and what do you think in non-optimal? suggestions otherwise?

[16:38] *** atroxaper left
[16:38] <nickpatch> Ulti: i'll look into p6 enums. ty

[16:40] <raydiak> gmorn #perl6

[16:40] <masak> good antipodal morning, raydiak :)

[16:41] *** anaeem1 left
[16:41] *** Exodist joined
[16:42] <nickpatch> colomon: i'm such not a C programmer that i won't be much help with wchar_t

[16:42] <raydiak> heh good diametric evening, masak \o

[16:44] <NotJack> is there a deeper writeup somewhere on what "native shaped arrays" are?

[16:44] <NotJack> for mortals, I mean

[16:45] <PerlJam> NotJack: Ever used PDL in P5?

[16:45] <NotJack> nope

[16:45] <colomon> nickpatch: ok.  I will continue to consider it Wrong but not actually flame the programmers responsible.  ;)

[16:46] *** khisanth_ is now known as Khisanth

[16:46] <TimToady> S09 is the best we have on native shaped arrays, so far

[16:47] <NotJack> thanks, I'll go refresh on that

[16:47] <TimToady> but since they're not implemented yet, most everything there is subject to change

[16:47] <NotJack> TimToady: Yeah, the reason I ask is because they're called out specifically as one of the last TODOs for a p6 launch

[16:47] <TimToady> though the design does seem largely implementable

[16:48] <NotJack> also, because I'm interested in anything novel p6 has to offer in the way of arrays and collection processing

[16:48] <TimToady> jnthn is working on the underpinnings of that

[16:53] *** zakharyas left
[16:54] <NotJack> is prefix<||> a thing yet?

[16:54] <NotJack> that looks neat

[16:55] <NotJack> p6: say 'hi';

[16:55] <camelia> rakudo-{parrot,moar} dfcf9f: OUTPUT«hi␤»

[16:55] <NotJack> p6:  @shape = 4, 2; say ||@shape;

[16:55] <camelia> rakudo-{parrot,moar} dfcf9f: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Variable '@shape' is not declared␤at /tmp/tmpfile:1␤------> [32m@shape[33m⏏[31m = 4, 2; say ||@shape;[0m␤    expecting any of:␤        postfix␤»

[16:55] *** spider-mario left
[16:56] *** mvuets left
[16:56] <NotJack> p6:  my @ints[4;2]; my @shape = 4,2; say @ints[||@shape];

[16:56] <camelia> rakudo-{parrot,moar} dfcf9f: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Shaped variable declarations not yet implemented. Sorry. ␤at /tmp/tmpfile:1␤------> [32mmy @ints[4;2][33m⏏[31m; my @shape = 4,2; say @ints[||@shape];[0m␤»

[16:56] <NotJack> wait, wait, "shaped arrays" means "arrays of a fixed size"?

[16:56] <NotJack> ah, that clears it up then

[16:57] <PerlJam> well, "shaped" also means "smooth or bumpy" to me.

[16:58] <PerlJam> (sparse arrays,  arrays that are indexed on non-integer things, etc.)

[16:58] <NotJack> Ok, I get it now.  

[17:01] *** vti left
[17:11] *** rurban1 joined
[17:12] *** skarn left
[17:17] <NotJack> Do non-fixed-sized multidim arrays exist?

[17:17] * NotJack should go back and read the perl6 book

[17:20] <moritz> NotJack: yes, but rakudo's support for them is very thin

[17:22] <TimToady> basically, only multidimensional subscripts are supported currently, but they only work on arrays of arrays and such

[17:25] *** tinyblak_ left
[17:25] *** pmurias joined
[17:27] <pmurias> one hard problem I have in nqp-js, is how to compile subs that can be called before their surrounding scope come into existance.

[17:28] <pmurias> example: XYZ::foo(); module XYZ { my $x; our sub foo() {...} }

[17:29] <TimToady> make a stub that says "I don't exist yet!" ?

[17:30] <kurahaupo> isn't the real problem the initialization of $z in pmurias' example?

[17:31] <kurahaupo> $x I mean

[17:31] *** anaeem1_ joined
[17:31] <pmurias> with ... being for example '$x := 123'

[17:31] <TimToady> the call doesn't and shouldn't know what foo cares about later

[17:31] *** digitalw00t left
[17:31] <TimToady> it just needs to fail gracefully until there really is a foo

[17:32] <moritz> pmurias: compile to a lookup by name(s)

[17:32] <TimToady> that also works, but might run slower

[17:32] <kurahaupo> the same problem exists in p5 of course. it'd be nice to solve it

[17:34] *** virtualsue left
[17:34] <TimToady> m: XYZ::foo(); module XYZ { my $x = 21; our sub foo() { say $x * 2 } }

[17:34] <camelia> rakudo-moar dfcf9f: OUTPUT«use of uninitialized value of type Any in numeric context  in sub foo at /tmp/kBr9FfxGLt:1␤␤0␤»

[17:34] <TimToady> ah, module isnt' initialized yet

[17:36] <TimToady> m: XYZ::foo(); module XYZ { our $x = 21; our sub foo() { say $x * 2 } }

[17:36] <camelia> rakudo-moar dfcf9f: OUTPUT«use of uninitialized value of type Any in numeric context  in sub foo at /tmp/HpOyvbwrzs:1␤␤0␤»

[17:36] <TimToady> now that one's incorrect, since it should initialize $x at INIT time

[17:36] <TimToady> probably a known rakudo bug

[17:36] <TimToady> m: XYZ::foo(); module XYZ { constant $x = 21; our sub foo() { say $x * 2 } }

[17:36] <camelia> rakudo-moar dfcf9f: OUTPUT«42␤»

[17:36] <TimToady> yes, our is initializing too late

[17:38] <TimToady> if someone wants to doublecheck that we're testing for that, that'd be LHF

[17:38] *** denis_boyun left
[17:38] <TimToady> to check, not to fix :)

[17:40] <moritz> what exactly is initialized at INIT time? all our-scoped vars?

[17:41] *** Mouq joined
[17:42] *** immortal joined
[17:42] *** immortal left
[17:42] *** immortal joined
[17:43] <kurahaupo> so ... initializations won't be able to call yet-to-be-defined subs?

[17:44] *** erkan left
[17:44] <mathw> Sorry to barge in, but how do I read a single character from the console?

[17:44] <mathw> or rather, from stdin

[17:44] <kurahaupo> oh, wait

[17:45] <kurahaupo> INIT, not BEGIN

[17:45] <moritz> mathw: $*IN.getc

[17:45] *** skarn joined
[17:45] <pmurias> TimToady: re fail gracefully, so is it safe for subs that depend on variable from scope that don't exist yet to fail gracefully?

[17:45] *** adu joined
[17:46] * kurahaupo makes note to self: actually *drink* wakeup coffee before chatting on irc

[17:46] <mathw> moritz: thanks!

[17:47] <pmurias> TimToady: for example stuff like XYZ::foo(); for @foo -> $x { my $z = $x+1; module XYZ { our sub foo {$z = 7;say $z;}}

[17:48] <pmurias> m: XYZ::foo(); for 1,2 -> $x { my $z = $x+1; module XYZ { our sub foo {$z = 7;say $z;}}}

[17:48] <camelia> rakudo-moar dfcf9f: OUTPUT«7␤»

[17:51] *** gfldex joined
[17:51] <pmurias> moritz: if I need to support things like that, the best solution I have found (and used in the previous nqp-js) is to compile the subs twice

[17:53] *** xinming left
[17:54] *** xinming joined
[17:55] *** pmurias left
[17:58] *** denis_boyun_ joined
[18:01] <nickpatch> Ulti: how does this look? https://github.com/patch/geo-region-pm6/compare/enum

[18:02] <nickpatch> not sure if i did the organization and naming the most p6ish or not

[18:02] *** telex left
[18:02] *** dakkar left
[18:03] *** anaeem1_ left
[18:03] *** vendethiel joined
[18:06] <TimToady> if Region is exported, you shouldn't need to qualify with Region:: after the enum is imported

[18:06] <TimToady> (unless there's an enum collision somewhere)

[18:07] <nickpatch> TimToady: i would like that but it didn't work

[18:08] <TimToady> mebbe it's a bug

[18:09] <TimToady> m: module Foo { enum Bar is export <a b c> }; import Foo; say b

[18:09] <camelia> rakudo-moar dfcf9f: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/8rz6t_Q8Yo␤Undeclared routine:␤    b used at line 1␤␤»

[18:09] <TimToady> yeah, bug

[18:09] <TimToady> m: module Foo { enum Bar is export <a b c> }; import Foo; say Foo::b

[18:09] <camelia> rakudo-moar dfcf9f: OUTPUT«b␤»

[18:09] <mathw> "Slurpy positionals with type constraints are not supported." aaaw :(

[18:12] <TimToady> it's impossible to guarantee the type of a lazy list at bind time unless we have manifest list types on the list being passed, which we don't currently

[18:12] <TimToady> we are not Haskell :)

[18:12] <TimToady> (currently :)

[18:13] <mathw> well, can't have everything

[18:13] <mathw> I was getting a little carried away perhaps

[18:13] <TimToady> we still have some difficulty implementing time travel, for some reason :)

[18:15] <TimToady> we could conceivably wrap the list iterator with a lazy type check, but that'll generally be redundant with something in your routine anyway, and just slow things down

[18:15] <TimToady> and only blow up just before the routine would anyway

[18:15] *** telex joined
[18:17] <TimToady> so when we do enable slurpy types, it will probably be to require arguments that can be known at compile time to be of that type

[18:17] <mathw> yes probably best to let the existing run-time type failure code catch it rahter than adding more

[18:17] *** Mso150 joined
[18:17] <TimToady> but that means inferring types through .list calls, likely

[18:18] <TimToady> and type inference is probably post-6.0, if we ever decide to do it

[18:19] *** kaare_ left
[18:19] <TimToady> the basic problem with type inference is that it tends to require your user to be as smart as your compiler

[18:19] *** Hor|zon left
[18:20] <TimToady> especially if your compiler is stupid about error messages, and just says "That can't possibly work." without saying why

[18:21] <mathw> my problem with languages that do have type inference (other than stupid error messages) is when people then say "isn't this cool! We never need to mention types at all!" without realising apparently that from time to time it is good if your code does actually say what type things are expected to be

[18:21] <TimToady> or if does explain it, but the explanation requires a graduate degree in mathematics

[18:21] *** kaare_ joined
[18:22] <TimToady> yes, there's that failure mode as well

[18:22] <TimToady> so I'm guess we'd enable it technically, but try not to overdo it culturally

[18:22] <TimToady> *guessing

[18:23] *** anaeem1 joined
[18:23] <TimToady> sort of like with extensibility, we provide all the tools, then given them a language they mostly won't want to extend :)

[18:24] <TimToady> *give

[18:24] <mathw> well these library authors always want to extend things...

[18:24] <TimToady> can't type toady...

[18:24] <TimToady> don't they just

[18:24] <mathw> extensibility is great, it's an admission also that you don't know everything today

[18:24] <mathw> so you give people tools to help add some of the things they know they need next week

[18:25] <mathw> a lack of extensibility being a major failing of many languages

[18:25] <mathw> IMO anyway

[18:25] <TimToady> well, we'll just find new pretzel-shaped failure modes, but as we've said, we're looking to make new mistakes :)

[18:25] <mathw> I've been falling in love with Lisp for this reason (and getting very annoyed with various Lisps for other reasons, like not being able to see what anything is meant to be)

[18:26] <mathw> for all the great things in Perl 6, type annotations are probably my absolute favourite

[18:26] <TimToady> Lisp is not strong on visual distinctions...

[18:26] <mathw> no it's not

[18:27] <mathw> in some ways that's a feature

[18:27] <mathw> but is everyone willing to make the tradeoff? Clearly not, or it'd be more popular

[18:27] <TimToady> well, that space has been pretty thoroughly explored by now

[18:28] <TimToady> we'd like to see most of the benefits of homoiconicity without actually doing it, like Tom Sawyer wanted to be drowned without having to go through with it (and manages to, by the end of the story)

[18:28] <mathw> well surely there's no need for everything to be a list

[18:29] <mathw> if you've got a way to have macros that can see whatever the underlying code structure is...

[18:29] <mathw> oh wait that sounds familiar

[18:29] <TimToady> well, really, it's a waterbed of moving the cultural assumptions from one spot to another

[18:30] <mathw> "everything is a list" makes Lisp's macros rather simpler, I'm sure

[18:30] <TimToady> something has to interpret the cultural meanings of the bits of those lists though

[18:30] <TimToady> and that tends to be fairly opaque in Lisp

[18:30] <mathw> yes

[18:30] *** Mouq left
[18:30] <mathw> I was reading about Common Lisp's loop macro

[18:31] <mathw> stupidly powerful but unfortunatel requires you to learn a small secondary programming language to use it

[18:32] <TimToady> those who do not understand cultures are doomed to reinvent them poorly :)

[18:32] <TimToady> of course, everyone reinvents culture poorly all the time, but we'll leave that be :)

[18:33] <mathw> well that's rather like repeating history because nobody understands that either

[18:33] *** grettis joined
[18:33] <mathw> and how everyone keeps onw riting crap software that doesn't work because they don't understand *something* (I wish I knew what that something was so I could stop writing crap software that doesn't work)

[18:33] <TimToady> the more people repeat history to you, the less likely you are to want to repeat it yourself...

[18:34] <mathw> (I'm convinced it's an attitude problem and there's something wrong with the way we approach things)

[18:35] <Ulti> nickpatch yeah looks good, shame about the export bug :'(

[18:35] <TimToady> well, the FP folk think they know the answer, which basically boils down to: Only really, really smart peopel should write software, and even then, the computer should never trust them. :)

[18:36] <TimToady> *people

[18:36] <mathw> I think there's good ideas in FP, but it's not *the* answer because even they can't remove human error from the mix

[18:36] <mathw> well, not yet anyway

[18:36] <mathw> even dependently typed languages can still admit programs that don't do what was intended

[18:37] <mathw> and are really rather tricky to use

[18:37] <TimToady> and only really, really, really, really smart people should write compilers :)

[18:37] <mathw> I think that's a given

[18:37] <mathw> or we end up with languages like PHP

[18:37] <mathw> (yes yes I have a grudge about PHP's popularity)

[18:38] <mathw> btw, multis are awesome. Writing some code over there -> and loving it

[18:38] <geekosaur> well, php wasn't originally intended to be what it became

[18:38] <geekosaur> it was a glorified macro processor

[18:39] <geekosaur> (roughly the same applies to C++, for that matter...)

[18:39] <mathw> yes unfortunately people made more PHP instead of learning Perl

[18:39] <mathw> mmm yes and even fancy modern C++ is still saddled with some unfortunate parts of its C-derived past :(

[18:40] <TimToady> .oO(For some computer languages, version 1.0 was already promoted to its level of incompetence.)

[18:40] * smls finds it kinda annoying that the whitespace before the closing brace in «rule foo { ... }» is significant

[18:41] <mathw> oh dear, I think I might need an ncurses binding. sigh.

[18:42] <TimToady> m: my rule foo {...}

[18:42] <camelia> rakudo-moar dfcf9f: ( no output )

[18:42] <TimToady> it is?

[18:42] <TimToady> oh, you mean in terms of :sigspace

[18:43] <arnsholt> mathw: I'm so sorry =)

[18:43] <TimToady> well, but it really, really needs to be significant, because all our LTMing requires the previous thing to have eaten the space after it

[18:43] <TimToady> otherwise rules can't participate in LTM easily

[18:44] <mathw> arnsholt: it's my own fault. Apparently we have one but it's two years old and I don't know if it works/if it covers enough/if I even want to carry on with this insane new project

[18:44] <mathw> I'm going to have some dinner and consider what I'm doing to myself :)

[18:44] *** spider-mario joined
[18:44] <moritz> TimToady: but that's not because whitespace is special, just because <.ws> isn't LTM safe. Right?

[18:45] <TimToady> that makes whitespace special :)

[18:45] <arnsholt> mathw: Also, note that the curses API is in part expressed in terms of *macros*

[18:45] <arnsholt> Which makes wrappers really sad =(

[18:46] *** Hor|zon joined
[18:46] <mathw> arnsholt: okay I shall see about definitely trying to stay away from that then

[18:48] <moritz> TimToady: and if I wrote a grammar with declarative <.ws>, would it still terminate LTM?

[18:48] <moritz> I hope not

[18:49] *** kurahaupo left
[18:50] * vendethiel backlogs a bit

[18:50] *** Hor|zon left
[18:52] <vendethiel> I can't believe I got spoiled tom sawyer by TimToady.

[18:52] <colomon> I can't believe you haven't read Tom Sawyer.  ;)

[18:52] *** Mso150 left
[18:52] *** Mouq joined
[18:53] <colomon> Also, it's 150 years old, I don't think we need spoiler warnings anymore.  :)

[18:53] <TimToady> it's, like, been out for a couple months now!

[18:53] *** Mso150 joined
[18:53] <vendethiel> I wasn't complaining :P. Just being surprised

[18:54] <TimToady> well, tom sawyer was a spoiled child to begin with...

[18:55] <colomon> Let's not white-wash his past...

[18:55] <smls> Ulti: ping

[18:55] * TimToady likes colomon++'s de-fence

[18:56] <colomon> ;)

[18:58] <smls> .tell Ulti You can use this to convert pygmentize output to inline styles that are allowed on wordpress.com: https://github.com/smls/undef/blob/master/scripts/inline-pygments-styles.p6

[18:58] <yoleaux> smls: I'll pass your message to Ulti.

[18:59] *** anaeem1 left
[19:00] <Ulti> cool thanks smls 

[19:00] <yoleaux> 18:58Z <smls> Ulti: You can use this to convert pygmentize output to inline styles that are allowed on wordpress.com: https://github.com/smls/undef/blob/master/scripts/inline-pygments-styles.p6

[19:01] *** FROGGS left
[19:02] *** grettis left
[19:02] *** rurban1 left
[19:03] *** grettis joined
[19:03] *** Hor|zon joined
[19:10] *** adu left
[19:10] *** FROGGS joined
[19:14] <carlin> is there no chown in perl 6?

[19:16] <carlin> ah, the spec mentions it but it's in the Here Be Dragons section

[19:22] *** NotJack left
[19:23] <nickpatch> Ulti, TimToady: thanks for the feedback! merged. i'll just remove the enum namespace whenever the bug is fixed.

[19:24] <Ulti> carlin wouldnt you need perl6 running as root?

[19:25] <carlin> Ulti: that's the usecase. creating a file as root and then chown()ing it

[19:26] * moritz used it in perl5 just the other day

[19:40] *** vti joined
[19:41] <mathw> aaw NativeCall is failing its tests :(

[19:47] *** Akagi201 joined
[19:49] *** anaeem1_ joined
[19:50] <dalek> perl6-roast-data: 9a52747 | coke++ | / (4 files):

[19:50] <dalek> perl6-roast-data: today (automated commit)

[19:50] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/9a52747a02

[19:51] <carlin> I'm guessing there is no way to drop privileges yet either

[19:52] <moritz> except maybe through nativecall

[19:53] <carlin> that could work

[20:00] *** m_athias joined
[20:01] *** denis_boyun_ left
[20:02] *** Isp-sec joined
[20:12] *** Mouq left
[20:12] *** atroxaper joined
[20:15] <mathw> t/07-writebarrier.t .... ok

[20:15] <mathw> *** Error in `/home/matthew/rakudobrew/moar-HEAD/install/bin/moar': munmap_chunk(): invalid pointer: 0x00007f9ba060ca40 ***

[20:15] <mathw> t/08-callbacks.t ....... 

[20:16] <mathw> Failed 3/5 subtests 

[20:17] <moritz> so far, my experiments with kvm guests on the new server are discouraging

[20:18] *** atroxaper left
[20:18] <moritz> twice the installation of the guest system hung, at different (and seemingly arbitrary) points

[20:19] <El_Che> moritz: what guest system?

[20:19] *** darutoko left
[20:19] <moritz> El_Che: debian testing

[20:19] <moritz> (same as the host)

[20:19] <timotimo> so it's systemd's fault!

[20:19] <yoleaux> 09:37Z <azawawi> timotimo: Please see https://github.com/azawawi/farabi6/issues/59

[20:19] <yoleaux> 09:48Z <azawawi> timotimo: im currently busy a bit @ $work. Hopefully workload will lighten up a bit after December. The HTTP::Server::Async idea is great. Is EventSource possible with it?

[20:20] <moritz> timotimo: it's nice to have a scapegoat, it's nicer not need one :-)

[20:20] <timotimo> .tell azawawi tony-o built a little "HiJacking" middleware that allows us to steal sockets at an early point so that we can do special things for websockets and eventsource. websockets are going to require some extra fiddling to get the protocol right, whereas eventsource is easy, but only one-way

[20:20] <yoleaux> timotimo: I'll pass your message to azawawi.

[20:20] <El_Che> moritz: I have only run rhel and debian stable in production. With no problems what so ever. Pure kvm and through a RHEV layer (commercial product based on ovirt which in turns uses kvm)

[20:21] *** KCL_ joined
[20:22] *** rindolf left
[20:23] <moritz> El_Che: I honestly don't know if it's kvm that's to blame, or the installer, or the hardware, or anything else

[20:23] <timotimo> i sure hope the hardware's fine

[20:23] * moritz hopes so too

[20:24] <moritz> either it has only 6 cores, and I misread the HT stuff, or I have to enable HT in the bios

[20:24] <moritz> 'cause currently it only shows 6 cores

[20:24] <timotimo> i didn't know you could turn HT on or off

[20:25] *** mvuets joined
[20:25] <carlin> mathw: it looks like there was a change to NativeCall's tests that depends on moarvm cb3d176, but that commit is not used by default

[20:25] <moritz> during this journey to a server, I notice how much I don't know about servers, data centers, networks and all the gory rest

[20:27] <mathw> carlin: ooh

[20:30] <masak> sergot++ # http://perl6advent.wordpress.com/2014/12/08/day-8-a-http-user-agent-with-ssltls/

[20:30] * moritz tried to install the guest directly through debootstrap, and failed because of that new grub2 thingy

[20:31] <moritz> sergot++

[20:35] *** pochi joined
[20:38] *** rurban1 joined
[20:38] <[Coke]> TIL that in java, == on two Integers isn't doing what you might think.

[20:38] <mathw> oh yes that's fun, that is

[20:40] *** Rounin joined
[20:40] <[Coke]> I actually have code in prod that might be doing this wrong.

[20:42] <moritz> so what does it do?

[20:42] <arnsholt> Compares for pointer identity, not integer equality

[20:43] <arnsholt> IIRC ints <128 will always get the same object, but bigger than that you're SOL I think

[20:44] <psch> the integer cache is vm specific afair

[20:45] <psch> but yeah, signed byte range gets cached

[20:45] <timotimo> sergot: so all you need to do to get SSL support in HTTP::UserAgent is install it via panda or similar?

[20:45] *** kaare_ left
[20:45] <timotimo> not even "use" it?

[20:45] <psch> there's also the system property java.lang.IntegerCache.high, so it's platform dependent heh

[20:46] <timotimo> http://perl6advent.wordpress.com/2014/12/04/composers-coercers-and-the-case-of-a-camels-curious-corner/#comment-9846

[20:47] <bartolin> moritz: I've always used "virt-install" to install kvm guests and can't remember relevant problems. an easy way is to provide an installer-iso via "--cdrom /path/to/installer.iso"

[20:47] *** esaym153 joined
[20:47] *** Sqirrel joined
[20:48] <moritz> bartolin: that's basically what I'm doing, except with virt-manager

[20:48] <moritz> maybe that's the problem

[20:48] <sergot> timotimo: that's right

[20:49] <timotimo> i find your definition of "web crawler" slightly surprising

[20:49] <timotimo> to me, crawling was always also following links around and such

[20:49] <moritz> https://lists.debian.org/debian-boot/2006/08/msg00451.html same problem report 2006, and closed as not reproducibable

[20:51] <moritz> oh fun, now lilo installation also hangs

[20:51] <bartolin> moritz: very strange :/

[20:51] <moritz> ah, also uses os-prober

[20:52] <timotimo> lilo?

[20:52] <timotimo> i haven't heard that name in what feels like 10 years

[20:53] <moritz> I last heard it when I learned for LPIC-1

[20:53] <moritz> but the debian installer does seem to come with optional support for lilo

[20:53] <bartolin> moritz: what kind of disk image do you use for the guest?

[20:54] <raydiak> before everyone starts going to bed...unanswered question/idea I had recently: http://irclog.perlgeek.de/perl6/2014-12-07#i_9769529

[20:54] <moritz> bartolin: debian testing iso

[20:55] * [Coke] goes to try the http advent post, but is foiled by lack of http_proxy support.

[20:55] <raydiak> basically just looking for a way to have more structured object properties without a bunch of custom initializers and accessors, and w/out extra complication in the public interface

[20:56] <moritz> raydiak: what you want is magic. What you'll get is confusion.

[20:57] <bartolin> moritz: oh, i meant the virtual disk you install the guest system to. there are different formats (raw, qcow2 etc.)

[20:57] <moritz> bartolin: qcow2

[20:59] *** Loo joined
[20:59] <bartolin> moritz: that should be fine ...

[21:02] <sergot> timotimo: yeah, you are right about the crawling

[21:02] <sergot> and we can do what you said with UserAgent, but it was not the main goal to make it easy, but make it doable.

[21:03] <raydiak> moritz: someone tried to tell me something similar about learning perl 6 :)  nevertheless thanks for the perspective, I'll mentally file it under ETOOMAGIC then

[21:03] <sergot> WWW::Mechanize will be the next step to 'full' web crawling

[21:04] <sergot> timotimo: I just flatted it for the article

[21:04] *** Mso150 left
[21:04] *** Loo left
[21:05] *** Mso150 joined
[21:05] *** rurban left
[21:05] <hoelzro> I would like to see something like Mojo::DOM in Perl 6

[21:05] * hoelzro already hears the "well volunteered"s coming

[21:06] <colomon> indeed.  ;)

[21:06] <masak> well, you said it :)

[21:06] <hoelzro> heh

[21:06] <hoelzro> the problem with wanting to write P6 modules is that I find bugs, and then I try to fix them =P

[21:07] *** eternaleye joined
[21:07] <moritz> hoelzro: usually it's the same for me, but with s/modules/docs/

[21:08] <masak> same for me, but with s/modules/other bugs/

[21:08] <hoelzro> masak: hahahaha

[21:09] <hoelzro> moritz: my bug fixing attempts usually lead me to doc improvement attempts as well, heh

[21:10] * psch .oO( the problem with wanting to write other bugs is that i find bugs... )

[21:12] <masak> :P

[21:13] <masak> are we all set for advent post tomorrow?

[21:13] <tadzik> is smls? :)

[21:13] <smls> soon

[21:14] *** bjz left
[21:15] <tadzik> http://i0.kym-cdn.com/entries/icons/original/000/005/673/soon_(1).jpg

[21:15] <timotimo> i was kind of under the impression that advent calendar posts were supposed to be quite long

[21:15] <timotimo> maybe with a more correct understanding, i'll be able to find something to write about and do it in the time until the next empty slot

[21:15] <timotimo> which is the day after tomorrow?

[21:15] <[Coke]> (long) nope

[21:16] <tadzik> the day after tomorrow is free as far as I know

[21:17] <pyrimidine> Ulti: let me know if you need me to chime in on the advent calendar post

[21:18] <timotimo> jnthn: you were right about setting compilation, btw: http://t.h8.lv/setting_compile_without_callgraph.html

[21:19] <timotimo> the number of gen2 roots doesn't continue climbing forever, but the time per gc run is

[21:19] <timotimo> is going up almost constantly

[21:19] <timotimo> interestingly, the time difference between a minor and major collection seems to disappear

[21:21] *** davido_ left
[21:21] *** davido_ joined
[21:22] <smls> Advent post scheduled.

[21:23] <masak> \o/

[21:24] <smls> timotimo: If you browse the advent posts for past years, you'll see that there are both long and short ones.

[21:24] *** eternaleye left
[21:27] <dalek> panda: c156e8c | raydiak++ | bin/ (5 files):

[21:27] <dalek> panda: Catch up to IO spec changes

[21:27] <dalek> panda: review: https://github.com/tadzik/panda/commit/c156e8cf43

[21:27] <dalek> panda: 69f83fe | tadzik++ | bin/ (5 files):

[21:27] <dalek> panda: Merge pull request #125 from raydiak/master

[21:27] <dalek> panda: 

[21:27] <dalek> panda: Catch up to IO spec changes

[21:27] <dalek> panda: review: https://github.com/tadzik/panda/commit/69f83fed32

[21:31] <masak> 'night, #perl6

[21:32] <timotimo> gnite masask

[21:32] <Ulti> pyrimidine it's more if you want to... 

[21:35] *** eternaleye joined
[21:36] <pyrimidine> Ulti: Sure, I can have a look whenever you're ready.  No hurry, just /msg me when you're ready

[21:44] *** ugexe_ joined
[21:46] *** spider-mario left
[21:51] *** anaeem1_ left
[21:51] *** anaeem1_ joined
[21:52] *** mvuets left
[21:54] *** ugexe_ left
[21:54] *** eternaleye left
[21:55] *** ugexe joined
[21:56] *** anaeem1_ left
[21:57] <perltricks> Hey all, is there a way to capture stderr from qx//?

[21:57] <jercos> aside from 2>&1?

[21:59] *** erkan joined
[21:59] *** denis_boyun_ joined
[21:59] *** eternaleye joined
[22:00] <perltricks> jercos: hmm oh yeah I didn't think of that, thanks.

[22:00] <perltricks> Gosh even works in cmd.exe http://support.microsoft.com/kb/110930

[22:01] <psch> more progress \o/

[22:01] <psch> my own test case for jvm-interop multis works now

[22:01] *** immortal left
[22:01] <psch> the CRC32 test case doesn't yet, boxing of VMArrayREPR is missing

[22:03] *** grondilu left
[22:04] *** atroxaper joined
[22:04] *** denis_boyun_ left
[22:05] <psch> eh, VMArrayInstance, not *REPR

[22:08] *** atroxaper left
[22:10] <smls> perltricks: qx// and other external command running features in Perl 6 are still somewhat limited/unsatisfactory

[22:10] <smls> I brought it up 2 days ago: http://irclog.perlgeek.de/perl6/2014-12-06#i_9767939

[22:10] <Ulti> just need popen2 and popen3

[22:10] <smls> Hopefully that area will improve quite a bit before the 6.0 release

[22:15] *** virtualsue joined
[22:20] *** Mso150 left
[22:21] *** virtualsue left
[22:22] *** denis_boyun_ joined
[22:24] *** eternaleye left
[22:25] <smls> moritz, Ulti: I tried to add my advent post to the "2014" category, but it didn't stick (stayed in "Uncategorized"). Can you see if it works when you do it as admin?

[22:26] <PerlJam> smls: I just did it.  It stuck.

[22:26] *** KCL_ left
[22:27] <smls> ok, thanks.

[22:29] *** eternaleye joined
[22:30] *** Woodi left
[22:36] <TimToady> smls: looks good to me

[22:36] *** perltricks left
[22:38] <TimToady> the use of .comb[0] to get the first char bugs me a little, but only because my hindbrane expects .comb to be eager, and working on a string longer than 2 chars

[22:39] <TimToady> I suppose .ord.chr might be faster, actually

[22:39] *** treehug88 left
[22:39] <TimToady> well, but you'd have to hyper 'em both

[22:40] <smls> TimToady: thanks

[22:40] <smls> re comb, for a string that will be either 1 or 2 chars long, it should be fine?

[22:41] <TimToady> oh, not hyper, it's in a *.comb

[22:41] <TimToady> oh, sure, I'm not suggestin gyou cahnge it

[22:41] <TimToady> just saying that's the only thing that bugged me, ever so slightly

[22:43] <TimToady> all in all, very well written

[22:44] <jnthn> timotimo: Interesting...when we get to the bottom of what's going on here, there's probably a nice win to be had.

[22:45] <jnthn> Though given it's the only profile I've seen that exhibits GC behavior like this, I'm not sure how much impact it will have on programs in general.

[22:46] <jnthn> Still, getting CORE.setting compilation time down a good chunk more is always welcome.

[22:49] <psch> jnthn: the CRC32 example from last year doesn't seem to work for me on nom

[22:51] <jnthn> It worked/ran when I wrote it.

[22:51] <jnthn> No idea what happened to it since.

[22:51] <jnthn> I'll be doing some work on the JVM backend to get the 6model parametric extensions stuff in place shortly, though

[22:52] <psch> ClassCastException, VMArrayInstance to JavaObjectWrapper, fwiw

[22:52] <jnthn> No idea...maybe can be bisected...

[22:52] <jnthn> Though, can't be that many commits that have touched interop.

[22:53] <TimToady> seems to point to a paucity of regression testing...

[22:53] <psch> i might have a look at that as well, but i'd first like to get the matching of signatures a bit more sturdy

[22:54] <psch> the bit about getting the e.g. Long we get from unbox_i to match against an int in the signature still seems a bit fuzzy to me, not sure how to get there

[22:54] <lizmat> good night, #perl6!

[22:55] <psch> TimToady: tests probably make sense, and we have javac anyway so we can compile whatever we want... although similarly to NativeCall this feels a bit like it should live elsewhere

[22:55] <psch> do similar tests exist for parrot?

[22:56] *** Rounin left
[22:56] *** Mouq joined
[22:59] <psch> actually, i think for the few primitive cases that exist i might just settle on a switch

[23:03] *** Woodi joined
[23:06] <jnthn> psch: One other idea for tests is to test against things in the Java class library, then nothing to compile

[23:07] <psch> oh, of course.  we can test replace and such easily

[23:07] <smls> hrm after making a small edit to the post, the category fell back to "Uncategorized"... :(

[23:07] <smls> Wordpress doesn't seem to like me.

[23:09] <leedo_> having administered a Wordpress install for work, i can say it likes no one

[23:10] *** Isp-sec left
[23:11] * jnthn gets some rest

[23:12] <TimToady> it looks to me like it's in both 2014 and Uncategoriezed

[23:13] <smls> yeah I just added the category 2014 via the "bulk edit" feature in the posts list, and that's the result

[23:13] *** skarn left
[23:13] <smls> I'll stop touching it now, and let the admins fix it :P

[23:13] * TimToady professes not to be an expert...

[23:15] *** vti left
[23:16] <TimToady> afk &  # car's done

[23:19] <japhb> smls++ # Nice advent post

[23:21] *** adu joined
[23:23] *** araujo left
[23:24] *** gfldex left
[23:24] *** araujo joined
[23:38] *** smls left
[23:40] *** Mouq left
[23:40] *** grettis left
[23:41] *** grettis joined
[23:42] * psch needs sleep o/

[23:42] *** psch left
[23:43] *** skarn joined
[23:44] *** denis_boyun_ left
[23:54] *** atroxaper joined
[23:59] *** atroxaper left
