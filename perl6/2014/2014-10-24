[00:01] *** ghostlines joined
[00:06] *** erkan joined
[00:08] *** immortal left
[00:12] *** daxim joined
[00:17] *** aborazmeh joined
[00:21] *** aborazmeh left
[00:22] *** ghostlines left
[00:27] *** Hor|zon joined
[00:27] *** eternaleye joined
[00:31] *** Hor|zon left
[01:13] *** kst` is now known as kst

[01:20] *** raiph joined
[01:21] *** raiph left
[01:34] *** kyun joined
[01:35] *** grettis left
[01:43] *** Alula left
[01:46] *** Alula joined
[01:49] *** haiveu joined
[01:51] *** haiveu left
[02:07] *** Alula left
[02:24] <tony-o> colomon: sorry it took so long to take PR, phone wouldn't let me do it

[02:25] <tony-o> .tell brrt i can't duplicate the moar segfault on yosemite, it built 3 times without failure -

[02:25] <yoleaux> tony-o: I'll pass your message to brrt.

[02:25] <tony-o> oops - that was for bbkr

[02:27] <tony-o> .tell bbkr couldn't duplicate moar build segfault on yosemite.  was able to reproduce your bug @ https://rt.perl.org/Public/Bug/Display.html?id=122803

[02:27] <yoleaux> tony-o: I'll pass your message to bbkr.

[02:27] *** Hor|zon joined
[02:27] <tony-o> .tell brrt sorry, previous message was meant for someone else ^^

[02:27] <yoleaux> tony-o: I'll pass your message to brrt.

[02:32] *** Hor|zon left
[02:41] *** treehug88 left
[02:45] *** noganex_ joined
[02:46] *** colomon left
[02:48] *** colomon joined
[02:49] <colomon> tony-o++

[02:53] *** yeahnoob joined
[03:08] *** chenryn joined
[03:14] *** mauke_ joined
[03:16] <dalek> ecosystem: c28dce0 | colomon++ | META.list:

[03:16] <dalek> ecosystem: Give IoC back to Jason May.

[03:16] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/c28dce0f7b

[03:17] *** mauke left
[03:18] *** mauke_ is now known as mauke

[03:24] *** SamuraiJack joined
[03:29] <tony-o> colomon: what OS are you on?  the META.info still causes it not to build on on OSX - Pluggable is available in the ecosystem, not sure why Panda won't recognize it

[03:30] <tony-o> make VIMRUNTIMEDIR=/usr/share/vim/vim74

[03:32] <colomon> I'm on both OS X and Linux.  I'll give it a try. 

[03:33] <colomon> Hmmm.  I get HTTP::Server::Async test failures building on Linux.

[03:33] <tony-o> i'm getting those too, are you running panda with --nodeps

[03:33] <colomon> no?  I don't even know what --nodeps is

[03:33] <tony-o> i'm trying to fix them but yosemite update broke my vim

[03:34] <tony-o> panda install --nodeps ignores dependencies in Meta

[03:34] <colomon> Pluggable successfully installed on both of them.

[03:34] <colomon> you might need to do panda update?

[03:34] <tony-o> i'll give it a shot

[03:34] <colomon> I get the same test failures on OS X, too

[03:34] *** SamuraiJack left
[03:38] <tony-o> hmm..does panda attempt to get Pluggable for you?  i removed it and panda install fails for HTTP Server Async

[03:38] <tony-o> with the error it can't find Pluggable on the system, with no attempt to download it

[03:38] *** rindolf joined
[03:39] *** chenryn left
[03:45] <tony-o> colomon: ^^

[03:45] <colomon> tony-o: yes, panda successfully installs pluggable.

[03:45] <colomon> what rakudo are you using?

[03:46] <tony-o> his is perl6 version 2014.09-261-g8bcdfd2 built on MoarVM version 2014.09-54-g03ac9a7

[03:46] *** chenryn joined
[03:58] *** araujo left
[04:12] *** bjz joined
[04:17] *** kyun_ joined
[04:19] *** kyun left
[04:20] *** kyun_ is now known as kyun

[04:23] *** xenoterracide_ joined
[04:26] *** [Sno] left
[04:28] *** Hor|zon joined
[04:29] *** chenryn left
[04:33] *** Hor|zon left
[04:42] *** xenoterracide_ left
[04:46] *** ggoebel111111110 joined
[04:48] *** jack_rabbit joined
[04:50] *** ggoebel11111119 left
[05:15] *** chenryn joined
[05:17] *** ecocode joined
[05:17] *** kaare_ joined
[05:18] *** [Sno] joined
[05:22] *** jack_rabbit left
[05:38] *** thou left
[05:50] *** avuserow joined
[05:53] *** gfldex joined
[06:17] *** garyaj joined
[06:20] *** rurban joined
[06:28] <masak> g'm'ng, #perl6

[06:28] <raydiak> \o masak

[06:33] *** Hor|zon joined
[06:33] *** Isp-sec joined
[06:33] *** garyaj left
[06:33] <raydiak> g'night #perl6

[06:34] *** Hor|zon left
[06:49] *** bjz left
[06:51] *** erkan left
[06:51] *** j4jackj left
[06:51] *** woolfy left
[06:51] *** notfix left
[06:51] *** abraxxa left
[06:51] *** kaare_ left
[06:51] *** rindolf left
[06:51] *** eternaleye left
[06:51] *** yukko left
[06:51] *** cosimo_ left
[06:51] *** geekosaur left
[06:51] *** kyun left
[06:51] *** Guest1419 left
[06:51] *** sjn left
[06:51] *** pochi_ left
[06:51] *** yeahnoob left
[06:51] *** daxim left
[06:51] *** PZt left
[06:51] *** chenryn left
[06:51] *** Akagi201_ left
[06:51] *** amkrankr1leuen left
[06:51] *** tardisx left
[06:51] *** nebuchadnezzar left
[06:51] *** [Coke] left
[06:51] *** ChoHag left
[06:51] *** avuserow left
[06:51] *** ggoebel111111110 left
[06:51] *** amkrankruleuen left
[06:51] *** hoelzro left
[06:51] *** Timbus left
[06:51] *** exixt left
[06:51] *** tadzik left
[06:51] *** SHODAN left
[06:51] *** sergot left
[06:51] *** pmichaud left
[06:51] *** raydiak left
[06:51] *** yeltzooo left
[06:51] *** BinGOs left
[06:51] *** jtpalmer left
[06:51] *** mst left
[06:51] *** charsbar____ left
[06:51] *** jdv79 left
[06:51] *** diegok left
[06:51] *** BooK left
[06:51] *** ivan`` left
[06:51] *** arnsholt left
[06:51] *** mtj_ left
[06:51] *** tony-o left
[06:51] *** nhayashi left
[06:51] *** ecocode left
[06:51] *** colomon left
[06:51] *** noganex_ left
[06:51] *** epochbell left
[06:51] *** Pleiades` left
[06:51] *** hugme left
[06:51] *** synopsebot left
[06:51] *** Maddingue left
[06:51] *** ingy left
[06:51] *** lestrrat left
[06:51] *** revdiablo left
[06:51] *** coffeeyy_ left
[06:51] *** smash left
[06:51] *** dg left
[06:51] *** Isp-sec left
[06:51] *** [Sno] left
[06:51] *** wtw left
[06:51] *** woshty left
[06:51] *** ruoso left
[06:51] *** betterwo1ld left
[06:51] *** risou left
[06:51] *** avar left
[06:51] *** yoleaux left
[06:51] *** gfldex left
[06:51] *** rmgk left
[07:02] *** bjz_ joined
[07:02] *** rmgk joined
[07:02] *** Guest58887 joined
[07:02] *** Khisanth joined
[07:02] *** jac50 joined
[07:02] *** aindilis joined
[07:02] *** sivoais joined
[07:02] *** simcop2387 joined
[07:02] *** btyler_ joined
[07:02] *** cotto joined
[07:02] *** kurahaupo joined
[07:07] *** cibs joined
[07:17] *** thou joined
[07:17] *** Isp-sec joined
[07:17] *** avuserow joined
[07:17] *** [Sno] joined
[07:17] *** kaare_ joined
[07:17] *** ecocode joined
[07:17] *** chenryn joined
[07:17] *** ggoebel111111110 joined
[07:17] *** rindolf joined
[07:17] *** yeahnoob joined
[07:17] *** colomon joined
[07:17] *** noganex_ joined
[07:17] *** eternaleye joined
[07:17] *** daxim joined
[07:17] *** erkan joined
[07:17] *** j4jackj joined
[07:17] *** woolfy joined
[07:17] *** Akagi201_ joined
[07:17] *** amkrankr1leuen joined
[07:17] *** Guest1419 joined
[07:17] *** yukko joined
[07:17] *** notfix joined
[07:17] *** amkrankruleuen joined
[07:17] *** wtw joined
[07:17] *** PZt joined
[07:17] *** abraxxa joined
[07:17] *** nebuchadnezzar joined
[07:17] *** cosimo_ joined
[07:17] *** sjn joined
[07:17] *** hoelzro joined
[07:17] *** pochi_ joined
[07:17] *** epochbell joined
[07:17] *** woshty joined
[07:17] *** geekosaur joined
[07:17] *** renormalist joined
[07:17] *** pecastro joined
[07:17] *** anocelot_ joined
[07:17] *** jnthn joined
[07:17] *** tinita joined
[07:17] *** dalek joined
[07:17] *** _sri joined
[07:17] *** ugexe joined
[07:17] *** Possum joined
[07:17] *** oskie joined
[07:17] *** esaym153 joined
[07:17] *** timotimo joined
[07:17] *** ilbot3 joined
[07:17] *** Alina-malina joined
[07:17] *** Celelibi joined
[07:17] *** djanatyn joined
[07:17] *** lizmat joined
[07:17] *** Util joined
[07:17] *** camelia joined
[07:17] *** [Tux] joined
[07:17] *** Exodist joined
[07:17] *** bartolin joined
[07:17] *** xinming joined
[07:17] *** haroldwu joined
[07:17] *** vladtz joined
[07:17] *** masak joined
[07:17] *** sftp joined
[07:17] *** slavik joined
[07:17] *** go|dfish joined
[07:17] *** jantore joined
[07:17] *** b2gills joined
[07:17] *** frew joined
[07:17] *** carlin joined
[07:17] *** funjon joined
[07:17] *** ponbiki joined
[07:17] *** muraiki joined
[07:17] *** itz joined
[07:17] *** japhb joined
[07:17] *** Rounin joined
[07:17] *** TuxCM joined
[07:17] *** davido_home joined
[07:17] *** skarn joined
[07:17] *** MilkmanDan joined
[07:17] *** cxreg joined
[07:17] *** Tekk_ joined
[07:17] *** pierrot joined
[07:17] *** grep0r joined
[07:17] *** brother joined
[07:17] *** robinsmidsrod joined
[07:17] *** vukcrni joined
[07:17] *** gtodd joined
[07:17] *** yogan joined
[07:17] *** ggherdov joined
[07:17] *** dylanwh joined
[07:17] *** hobbs joined
[07:17] *** nickpatch joined
[07:17] *** sorear joined
[07:17] *** mattp_ joined
[07:17] *** flussence joined
[07:17] *** DarthGandalf joined
[07:17] *** asimov.freenode.net sets mode: +v camelia

[07:17] *** lue joined
[07:17] *** baest joined
[07:17] *** Grrrr joined
[07:17] *** yakudza joined
[07:17] *** Woodi joined
[07:17] *** stux|RC-only joined
[07:17] *** sunnavy joined
[07:17] *** krunen joined
[07:17] *** rjbs joined
[07:17] *** atta joined
[07:17] *** [particle] joined
[07:17] *** broquaint joined
[07:17] *** oetiker_ joined
[07:17] *** huf joined
[07:17] *** petercommand joined
[07:17] *** TimToady joined
[07:17] *** integral joined
[07:17] *** mathw joined
[07:17] *** isacloud______ joined
[07:17] *** mephinet joined
[07:17] *** labster joined
[07:17] *** mtj joined
[07:17] *** ntln- joined
[07:17] *** Juerd joined
[07:17] *** jercos joined
[07:17] *** bonsaikitten joined
[07:17] *** dagurval_ joined
[07:17] *** bcode joined
[07:17] *** clkao joined
[07:17] *** ClarusCogitatio joined
[07:17] *** \00 joined
[07:17] *** Bucciarati joined
[07:17] *** Gothmog_ joined
[07:17] *** breinbaas joined
[07:17] *** moritz joined
[07:17] *** awwaiid joined
[07:17] *** zoosha joined
[07:17] *** m_athias joined
[07:17] *** Timbus joined
[07:17] *** exixt joined
[07:17] *** [Coke] joined
[07:17] *** tadzik joined
[07:17] *** sergot joined
[07:17] *** pmichaud joined
[07:17] *** Pleiades` joined
[07:17] *** ChoHag joined
[07:17] *** raydiak joined
[07:17] *** ruoso joined
[07:17] *** betterwo1ld joined
[07:17] *** hugme joined
[07:17] *** dg joined
[07:17] *** smash joined
[07:17] *** coffeeyy_ joined
[07:17] *** revdiablo joined
[07:17] *** lestrrat joined
[07:17] *** ingy joined
[07:17] *** Maddingue joined
[07:17] *** synopsebot joined
[07:17] *** jdv79 joined
[07:17] *** risou joined
[07:17] *** yeltzooo joined
[07:17] *** BinGOs joined
[07:17] *** SHODAN joined
[07:17] *** diegok joined
[07:17] *** avar joined
[07:17] *** yoleaux joined
[07:17] *** jtpalmer joined
[07:17] *** tardisx joined
[07:17] *** mst joined
[07:17] *** charsbar____ joined
[07:17] *** BooK joined
[07:17] *** ivan`` joined
[07:17] *** tony-o joined
[07:17] *** arnsholt joined
[07:17] *** mtj_ joined
[07:17] *** nhayashi joined
[07:17] *** asimov.freenode.net sets mode: +vv hugme yoleaux

[07:17] *** thou left
[07:18] *** m_athias left
[07:18] *** m_athias joined
[07:18] <moritz> tadzik: ping

[07:18] <tadzik> moritz: pong

[07:18] <tadzik> I didn't oversleep :)

[07:18] <masak> oversleep for what?

[07:18] <masak> today is marked as a Perl 6 day in my $work calendar.

[07:18] <masak> I'm going to steal some of it for $work, but I will also make it a goal to blog today.

[07:18] <moritz> tadzik: just wanted to make sure you got my email and have all the relevant contact information

[07:18] <tadzik> moritz: I think so :)

[07:18] <moritz> masak: also, t5 :-)

[07:18] <masak> *nod*

[07:18] <masak> moritz++

[07:18] <tadzik> ;)

[07:18] <tadzik> moritz: expect me to do a dry-run for the correctness of the phone number provided :)

[07:34] *** cibs left
[07:34] *** kurahaupo left
[07:34] *** bjz_ left
[07:34] *** rmgk left
[07:34] *** Guest58887 left
[07:34] *** Khisanth left
[07:34] *** jac50 left
[07:34] *** aindilis left
[07:34] *** sivoais left
[07:34] *** simcop2387 left
[07:34] *** btyler_ left
[07:34] *** cotto left
[07:34] *** ugexe left
[07:34] *** lizmat left
[07:34] *** erkan left
[07:34] *** j4jackj left
[07:34] *** woolfy left
[07:34] *** notfix left
[07:34] *** abraxxa left
[07:34] *** jnthn left
[07:34] *** tinita left
[07:34] *** Possum left
[07:34] *** timotimo left
[07:34] *** ilbot3 left
[07:34] *** [Tux] left
[07:34] *** Exodist left
[07:34] *** kaare_ left
[07:34] *** rindolf left
[07:34] *** eternaleye left
[07:34] *** yukko left
[07:34] *** cosimo_ left
[07:34] *** geekosaur left
[07:34] *** Guest1419 left
[07:34] *** sjn left
[07:34] *** pochi_ left
[07:34] *** carlin left
[07:34] *** frew left
[07:34] *** yeahnoob left
[07:34] *** daxim left
[07:34] *** PZt left
[07:34] *** anocelot_ left
[07:34] *** dalek left
[07:34] *** Celelibi left
[07:34] *** TuxCM left
[07:34] *** pierrot left
[07:34] *** brother left
[07:34] *** yogan left
[07:34] *** ggherdov left
[07:34] *** mattp_ left
[07:34] *** Woodi left
[07:34] *** TimToady left
[07:34] *** integral left
[07:34] *** mephinet left
[07:34] *** ntln- left
[07:34] *** Juerd left
[07:34] *** jercos left
[07:34] *** zoosha left
[07:34] *** m_athias left
[07:34] *** chenryn left
[07:34] *** Akagi201_ left
[07:34] *** amkrankr1leuen left
[07:34] *** oskie left
[07:34] *** itz left
[07:34] *** skarn left
[07:34] *** grep0r left
[07:34] *** dylanwh left
[07:34] *** sorear left
[07:34] *** flussence left
[07:34] *** DarthGandalf left
[07:34] *** baest left
[07:34] *** stux|RC-only left
[07:34] *** [particle] left
[07:34] *** oetiker_ left
[07:34] *** tardisx left
[07:34] *** nebuchadnezzar left
[07:34] *** Alina-malina left
[07:34] *** xinming left
[07:34] *** davido_home left
[07:34] *** MilkmanDan left
[07:34] *** robinsmidsrod left
[07:34] *** yakudza left
[07:34] *** sunnavy left
[07:34] *** rjbs left
[07:34] *** breinbaas left
[07:34] *** [Coke] left
[07:34] *** ChoHag left
[07:34] *** avuserow left
[07:34] *** ggoebel111111110 left
[07:34] *** japhb left
[07:34] *** cxreg left
[07:34] *** gtodd left
[07:34] *** lue left
[07:34] *** amkrankruleuen left
[07:34] *** hoelzro left
[07:34] *** pecastro left
[07:34] *** _sri left
[07:34] *** djanatyn left
[07:34] *** bartolin left
[07:34] *** vukcrni left
[07:34] *** hobbs left
[07:34] *** broquaint left
[07:34] *** isacloud______ left
[07:34] *** labster left
[07:34] *** bonsaikitten left
[07:34] *** clkao left
[07:34] *** bcode left
[07:34] *** ClarusCogitatio left
[07:34] *** \00 left
[07:34] *** moritz left
[07:34] *** awwaiid left
[07:34] *** Timbus left
[07:34] *** exixt left
[07:34] *** tadzik left
[07:34] *** SHODAN left
[07:34] *** esaym153 left
[07:34] *** sftp left
[07:34] *** slavik left
[07:34] *** go|dfish left
[07:34] *** muraiki left
[07:34] *** Rounin left
[07:34] *** krunen left
[07:34] *** huf left
[07:34] *** dagurval_ left
[07:34] *** sergot left
[07:34] *** pmichaud left
[07:34] *** raydiak left
[07:34] *** yeltzooo left
[07:34] *** BinGOs left
[07:34] *** jtpalmer left
[07:34] *** mst left
[07:35] *** charsbar____ left
[07:35] *** jdv79 left
[07:35] *** diegok left
[07:35] *** BooK left
[07:35] *** ivan`` left
[07:35] *** arnsholt left
[07:35] *** mtj_ left
[07:35] *** tony-o left
[07:35] *** nhayashi left
[07:35] *** ecocode left
[07:35] *** colomon left
[07:35] *** noganex_ left
[07:35] *** epochbell left
[07:35] *** renormalist left
[07:35] *** ponbiki left
[07:35] *** nickpatch left
[07:35] *** Grrrr left
[07:35] *** atta left
[07:35] *** mathw left
[07:35] *** mtj left
[07:35] *** funjon left
[07:35] *** Pleiades` left
[07:35] *** hugme left
[07:35] *** synopsebot left
[07:35] *** Maddingue left
[07:35] *** ingy left
[07:35] *** lestrrat left
[07:35] *** revdiablo left
[07:35] *** coffeeyy_ left
[07:35] *** smash left
[07:35] *** dg left
[07:35] *** vladtz left
[07:35] *** Isp-sec left
[07:35] *** [Sno] left
[07:35] *** wtw left
[07:35] *** woshty left
[07:35] *** Util left
[07:35] *** camelia left
[07:35] *** haroldwu left
[07:35] *** masak left
[07:35] *** jantore left
[07:35] *** b2gills left
[07:35] *** petercommand left
[07:35] *** Bucciarati left
[07:35] *** Gothmog_ left
[07:35] *** Tekk_ left
[07:35] *** ruoso left
[07:35] *** betterwo1ld left
[07:35] *** risou left
[07:35] *** avar left
[07:35] *** yoleaux left
[07:35] *** rurban left
[07:35] *** mauke left
[07:35] *** kst left
[07:37] *** nhayashi joined
[07:37] *** mtj_ joined
[07:37] *** arnsholt joined
[07:37] *** tony-o joined
[07:37] *** ivan`` joined
[07:37] *** BooK joined
[07:37] *** charsbar____ joined
[07:37] *** mst joined
[07:37] *** tardisx joined
[07:37] *** jtpalmer joined
[07:37] *** yoleaux joined
[07:37] *** avar joined
[07:37] *** diegok joined
[07:37] *** SHODAN joined
[07:37] *** BinGOs joined
[07:37] *** yeltzooo joined
[07:37] *** risou joined
[07:37] *** jdv79 joined
[07:37] *** synopsebot joined
[07:37] *** Maddingue joined
[07:37] *** ingy joined
[07:37] *** lestrrat joined
[07:37] *** revdiablo joined
[07:37] *** coffeeyy_ joined
[07:37] *** smash joined
[07:37] *** dg joined
[07:37] *** hugme joined
[07:37] *** betterwo1ld joined
[07:37] *** ruoso joined
[07:37] *** raydiak joined
[07:37] *** ChoHag joined
[07:37] *** Pleiades` joined
[07:37] *** pmichaud joined
[07:37] *** sergot joined
[07:37] *** tadzik joined
[07:37] *** [Coke] joined
[07:37] *** exixt joined
[07:37] *** Timbus joined
[07:37] *** zoosha joined
[07:37] *** awwaiid joined
[07:37] *** moritz joined
[07:37] *** breinbaas joined
[07:37] *** Gothmog_ joined
[07:37] *** Bucciarati joined
[07:37] *** \00 joined
[07:37] *** ClarusCogitatio joined
[07:37] *** clkao joined
[07:37] *** asimov.freenode.net sets mode: +vv yoleaux hugme

[07:37] *** bcode joined
[07:37] *** dagurval_ joined
[07:37] *** bonsaikitten joined
[07:37] *** jercos joined
[07:37] *** Juerd joined
[07:37] *** ntln- joined
[07:37] *** mtj joined
[07:37] *** labster joined
[07:37] *** mephinet joined
[07:37] *** isacloud______ joined
[07:37] *** mathw joined
[07:37] *** integral joined
[07:37] *** TimToady joined
[07:37] *** petercommand joined
[07:37] *** huf joined
[07:37] *** oetiker_ joined
[07:37] *** broquaint joined
[07:37] *** [particle] joined
[07:37] *** atta joined
[07:37] *** rjbs joined
[07:37] *** krunen joined
[07:37] *** sunnavy joined
[07:37] *** stux|RC-only joined
[07:37] *** Woodi joined
[07:37] *** yakudza joined
[07:37] *** Grrrr joined
[07:37] *** baest joined
[07:37] *** lue joined
[07:37] *** DarthGandalf joined
[07:37] *** flussence joined
[07:37] *** mattp_ joined
[07:37] *** sorear joined
[07:37] *** nickpatch joined
[07:37] *** hobbs joined
[07:37] *** dylanwh joined
[07:37] *** ggherdov joined
[07:37] *** yogan joined
[07:37] *** gtodd joined
[07:37] *** vukcrni joined
[07:37] *** robinsmidsrod joined
[07:37] *** brother joined
[07:37] *** grep0r joined
[07:37] *** pierrot joined
[07:37] *** Tekk_ joined
[07:37] *** cxreg joined
[07:37] *** MilkmanDan joined
[07:37] *** skarn joined
[07:37] *** davido_home joined
[07:37] *** TuxCM joined
[07:37] *** Rounin joined
[07:37] *** japhb joined
[07:37] *** itz joined
[07:37] *** muraiki joined
[07:37] *** ponbiki joined
[07:37] *** funjon joined
[07:37] *** carlin joined
[07:37] *** frew joined
[07:37] *** b2gills joined
[07:37] *** jantore joined
[07:37] *** go|dfish joined
[07:37] *** slavik joined
[07:37] *** sftp joined
[07:37] *** masak joined
[07:37] *** vladtz joined
[07:37] *** haroldwu joined
[07:37] *** xinming joined
[07:37] *** bartolin joined
[07:37] *** Exodist joined
[07:37] *** [Tux] joined
[07:37] *** camelia joined
[07:37] *** Util joined
[07:37] *** lizmat joined
[07:37] *** djanatyn joined
[07:37] *** Celelibi joined
[07:37] *** Alina-malina joined
[07:37] *** ilbot3 joined
[07:37] *** timotimo joined
[07:37] *** esaym153 joined
[07:37] *** oskie joined
[07:37] *** Possum joined
[07:37] *** ugexe joined
[07:37] *** _sri joined
[07:37] *** dalek joined
[07:37] *** tinita joined
[07:37] *** jnthn joined
[07:37] *** anocelot_ joined
[07:37] *** pecastro joined
[07:37] *** renormalist joined
[07:37] *** geekosaur joined
[07:37] *** woshty joined
[07:37] *** epochbell joined
[07:37] *** pochi_ joined
[07:37] *** hoelzro joined
[07:37] *** sjn joined
[07:37] *** asimov.freenode.net sets mode: +v camelia

[07:37] *** cosimo_ joined
[07:37] *** nebuchadnezzar joined
[07:37] *** abraxxa joined
[07:37] *** PZt joined
[07:37] *** wtw joined
[07:37] *** amkrankruleuen joined
[07:37] *** notfix joined
[07:37] *** yukko joined
[07:37] *** Guest1419 joined
[07:37] *** amkrankr1leuen joined
[07:37] *** Akagi201_ joined
[07:37] *** woolfy joined
[07:37] *** j4jackj joined
[07:37] *** erkan joined
[07:37] *** daxim joined
[07:37] *** eternaleye joined
[07:37] *** noganex_ joined
[07:37] *** colomon joined
[07:37] *** yeahnoob joined
[07:37] *** rindolf joined
[07:37] *** ggoebel111111110 joined
[07:37] *** chenryn joined
[07:37] *** ecocode joined
[07:37] *** kaare_ joined
[07:37] *** [Sno] joined
[07:37] *** avuserow joined
[07:37] *** Isp-sec joined
[07:37] *** m_athias joined
[07:37] *** sivoais_ joined
[07:37] *** kurahaupo joined
[07:37] *** virtualsue joined
[07:37] *** bjz_ joined
[07:37] *** rmgk joined
[07:37] *** Guest58887 joined
[07:37] *** Khisanth joined
[07:37] *** jac50 joined
[07:37] *** aindilis joined
[07:37] *** simcop2387 joined
[07:37] *** btyler_ joined
[07:37] *** cotto joined
[07:37] *** FROGGS joined
[07:39] *** darutoko joined
[07:40] *** rurban joined
[07:40] *** mauke joined
[07:40] *** kst joined
[07:40] *** erdic joined
[07:40] *** vike joined
[07:40] *** pdcawley joined
[07:40] *** retupmoca joined
[07:40] *** silug joined
[07:40] *** kshannon joined
[07:40] *** peteretep joined
[07:40] *** leedo joined
[07:40] *** nine_ joined
[07:40] *** apejens joined
[07:40] *** mls joined
[07:40] *** ribasushi joined
[07:40] *** ribasushi left
[07:43] *** ribasushi joined
[07:45] *** ugexe left
[07:50] *** cibs joined
[07:50] *** cibs left
[07:50] *** ugexe joined
[07:50] *** cibs joined
[07:55] *** cognominal joined
[07:57] <sergot> hi o/

[07:57] <masak> hi, sergocie \o

[07:59] <sergot> cześć masaku! :)

[08:04] *** TuxCM left
[08:05] *** Hor|zon joined
[08:16] *** TuxCM joined
[08:19] *** fhelmberger joined
[08:20] *** Alina-malina left
[08:20] *** Alina-malina joined
[08:27] *** cognominal left
[08:32] *** sqirrel joined
[08:33] *** zakharyas joined
[08:42] *** smls joined
[08:43] *** thou joined
[08:48] *** thou left
[08:52] *** virtualsue left
[09:06] *** kjs_ joined
[09:07] *** ghostlines joined
[09:10] *** grep0r left
[09:15] *** grep0r joined
[09:18] *** rmgk_ joined
[09:18] *** rmgk is now known as Guest78395

[09:18] *** Guest78395 left
[09:18] *** rmgk_ is now known as rmgk

[09:18] *** Isp-sec left
[09:21] *** pochi_ left
[09:21] *** pochi joined
[09:35] *** ghostlines left
[09:38] *** ghostlines joined
[09:40] *** virtualsue joined
[09:47] *** grondilu joined
[09:47] *** pdcawley left
[09:48] *** brrt joined
[09:49] *** frew left
[09:49] *** yeahnoob left
[09:50] <brrt> tony-o - i can try and make moar segfault on os x yosemite too :-)

[09:50] <yoleaux> 02:25Z <tony-o> brrt: i can't duplicate the moar segfault on yosemite, it built 3 times without failure -

[09:50] <yoleaux> 02:27Z <tony-o> brrt: sorry, previous message was meant for someone else ^^

[09:53] *** sivoais_ left
[09:53] *** avuserow left
[09:53] *** ggoebel111111110 left
[09:53] *** japhb left
[09:53] *** cxreg left
[09:53] *** gtodd left
[09:53] *** lue left
[09:53] *** sivoais_ joined
[09:53] *** avuserow joined
[09:53] *** ggoebel111111110 joined
[09:53] *** japhb joined
[09:53] *** cxreg joined
[09:53] *** gtodd joined
[09:53] *** lue joined
[09:54] *** cxreg left
[09:54] *** pdcawley joined
[09:55] *** pdcawley left
[09:55] *** fhelmberger left
[09:55] *** rurban left
[09:55] *** mauke left
[09:55] *** kst left
[09:55] *** erdic left
[09:55] *** vike left
[09:55] *** retupmoca left
[09:55] *** silug left
[09:55] *** kshannon left
[09:55] *** peteretep left
[09:55] *** leedo left
[09:55] *** nine_ left
[09:55] *** apejens left
[09:55] *** mls left
[09:56] *** pdcawley joined
[09:56] *** fhelmberger joined
[09:56] *** rurban joined
[09:56] *** mauke joined
[09:56] *** kst joined
[09:56] *** erdic joined
[09:56] *** vike joined
[09:56] *** retupmoca joined
[09:56] *** silug joined
[09:56] *** kshannon joined
[09:56] *** peteretep joined
[09:56] *** leedo joined
[09:56] *** nine_ joined
[09:56] *** apejens joined
[09:56] *** mls joined
[09:56] *** cxreg joined
[09:57] <smls> How usable is «Buf» these days?

[09:58] *** grondilu left
[09:58] *** Alina-malina left
[09:58] *** nebuchadnezzar left
[09:58] *** xinming left
[09:58] *** davido_home left
[09:58] *** MilkmanDan left
[09:58] *** robinsmidsrod left
[09:58] *** yakudza left
[09:58] *** sunnavy left
[09:58] *** rjbs left
[09:58] *** breinbaas left
[09:58] *** [Coke] left
[09:58] *** ChoHag left
[09:58] <smls> And what's the equivalent of Perl's «unpack»  (for parsing binary files?)

[09:58] *** grondilu joined
[09:58] *** nebuchadnezzar joined
[09:58] *** xinming joined
[09:58] *** davido_home joined
[09:58] *** MilkmanDan joined
[09:58] *** robinsmidsrod joined
[09:58] *** yakudza joined
[09:58] *** sunnavy joined
[09:58] *** rjbs joined
[09:58] *** breinbaas joined
[09:58] *** [Coke] joined
[09:58] *** ChoHag joined
[10:00] *** Alina-malina joined
[10:00] <grondilu> it is writeable, if that's what you mean (IIRC not so long ago, it wasn't).

[10:01] <moritz> smls: Buf has a method unpack

[10:01] <moritz> smls: not very complete though

[10:01] <grondilu> but you cn't use the my Buf $b .= new idiom

[10:01] *** wind_chh joined
[10:01] <moritz> smls: take a look at src/core/Buf.pm

[10:07] *** raiph joined
[10:09] *** pdcawley left
[10:10] <smls> ok

[10:10] *** pdcawley joined
[10:11] *** wind_chh left
[10:14] *** chenryn left
[10:20] *** chenryn joined
[10:20] *** denis_boyun_ joined
[10:26] *** sisar joined
[10:31] *** thou joined
[10:34] *** kaare_ left
[10:34] <smls> What features that are typically associated with functional languages, does Perl 6 have?

[10:34] <smls> I can think of:    1) Immutable data types,    2) Lazy lists,    3) Simple pattern matching (in the form of multi-dispatch)

[10:34] <smls> What else?

[10:35] *** thou left
[10:38] <moritz> easy ways to create functions/lamdas/callables

[10:39] <Timbus> i was typing that, but i couldnt quite word it

[10:39] <moritz> lexical scoping (as opposed to method lookup semantics)

[10:39] <moritz> closures

[10:39] <Timbus> .assuming

[10:40] <Timbus> autothreading w/ hyper operators?

[10:40] <Timbus> is that still a thing

[10:41] *** Alula joined
[10:41] <masak> declarative ways of saying things, as opposed to imperative

[10:41] *** leont joined
[10:41] <moritz> I guess now would be a good time to implement autothreading

[10:42] <moritz> well, auto-concurrency with hypers

[10:44] *** Ven joined
[10:45] <Ven> http://www.reddit.com/r/programming/comments/2k4mlk/google_atscript/

[10:45] <Ven> More alt-js languages by google!

[10:47] <Timbus> im always both angry and happy that people are constantly writing javascript alternatives.

[10:47] <moritz> well, there seem to be two approaches

[10:47] <moritz> the first is to build rather thin layers over javascript

[10:48] <moritz> those typically solve some of the syntactic odditites

[10:48] <moritz> or you can build a "full" cross-compiler

[10:48] <moritz> then you typically end up with something that's slow, and/or bears no resemblance with JS anymore

[10:48] <moritz> which might or might not be a plus :-)

[10:52] <Timbus> i just want everything to target asmjs or something similar

[10:53] <Ven> that doesn't make sense.

[10:53] <Ven> You can't "target" asm.js for most of the languages out there.

[10:53] <Ven> Dart has no type system, for example

[10:54] <masak> Ven: I saw this language show up in slide photos from ngEurope yesterday :)

[10:54] <Ven> eh. I know there's scalaIO going on here (in france) right now, but I can't go :(

[10:54] <masak> Ven: it makes sense-in-retrospect that they would go in this direction with Angular and alt-js

[10:55] <Ven> definitely. Dart sucks :)

[10:55] * Ven *g* so early in the morning 

[10:56] <Ven> sometimes I think I should just make LiveScript target typescript as a backend :-)

[10:56] <Timbus> Ven: im vaguely aware that asmjs is pretty minimal, but i would assume you can build complicated things on top of it?  i guess ill settle for 'or something similar' then

[10:57] <Ven> Timbus: there are no strings in asm.js

[10:57] <Timbus> aa

[10:57] <Ven> we sometimes get people asking us to "target asm.js" on the coffee bugtracker. That doesn't make any sense. We don't have types.

[10:58] <Ven> TypeScript is adding untagged union types L(

[10:58] <Ven> :(*

[11:01] <lizmat> good *, #perl6!

[11:01] <Ven> o/, lizmat 

[11:02] *** [Sno] left
[11:02] <lizmat> \o Ven 

[11:02] <lizmat> I guess PerlJam is still working on the release, as I have not seen an announcement yet ?

[11:03] *** [Sno] joined
[11:08] <dalek> roast: d088d6b | (Elizabeth Mattijsen)++ | S05-mass/properties-general.t:

[11:08] <dalek> roast: Fudge failing tests on parrot for release

[11:08] <dalek> roast: review: https://github.com/perl6/roast/commit/d088d6bda8

[11:16] <dalek> roast: 5e77113 | (Elizabeth Mattijsen)++ | S02-names/symbolic-deref.t:

[11:16] <dalek> roast: Unfudge now passing test on parrot/jvm for release

[11:16] <dalek> roast: review: https://github.com/perl6/roast/commit/5e77113ac6

[11:16] <lizmat> JVM is now clean for me as well

[11:16] <lizmat> parrot has some long-standing fails on OS-X that I think survived many release already  :-(

[11:17] <Ven> nice :-)

[11:19] <bartolin> lizmat: some of the parrot failures (e.g. those from S19-command-line-options/02-dash-e.t) are hopefully gone with the new parrot (6.9.0).

[11:19] <lizmat> so maybe we should bump the PARROT_REVISION?

[11:19] * lizmat will check

[11:19] <bartolin> lizmat: I didn't try to build with the new parrot.

[11:21] <bartolin> lizmat: also I found a test in S02-names-vars/perl.t which sometimes (rarely) fails on JVM. I think it doesn't make sense to fudge it now, but I'm looking at it.

[11:21] * lizmat is building with 6.9.0 parrot

[11:22] <bartolin> m: for 1..1000 { my $a = rand; say $a if $a.chars > 19 }

[11:22] <camelia> rakudo-moar 315ec6: OUTPUT«0.000648212182777552␤»

[11:22] <bartolin> j: for 1..1000 { my $a = rand; say $a if $a.chars > 19 }

[11:22] <camelia> rakudo-jvm 315ec6: OUTPUT«Can't open perl script "/home/camelia/jvm-rakudo/eval-client.pl": No such file or directory␤»

[11:23] <bartolin> hmm. locally I got much more results for JVM -- and the results look different, e.g.:

[11:23] <bartolin> 0.029514869958183088

[11:23] <bartolin> 0.015189550239314453

[11:23] <bartolin> 0.012097777536452803

[11:23] <bartolin> m: my %h; %h{rand.chars}++ for 1..1000; say %h

[11:23] <camelia> rakudo-moar 315ec6: OUTPUT«"14" => 1, "15" => 8, "16" => 80, "17" => 807, "18" => 92, "19" => 11, "20" => 1␤»

[11:24] <bartolin> locally: perl6-j -e 'my %h; %h{rand.chars}++ for 1..1000; say %h'

[11:24] <bartolin> "16" => 8, "17" => 65, "18" => 620, "19" => 270, "20" => 37

[11:24] <bartolin> somehow the numbers generated on JVM look different

[11:28] <bartolin> m: for 1..500 { my $t1 = rand; my $t2 = EVAL($t1); if $t1 ne $t2 { say "$_: ERROR:\n  ", $t1, "\n  ", $t2; }

[11:28] <camelia> rakudo-moar 315ec6: OUTPUT«===SORRY!=== Error while compiling /tmp/_MzWJq98FL␤Unable to parse expression in block; couldn't find final '}' ␤at /tmp/_MzWJq98FL:1␤------> ay "$_: ERROR:\n  ", $t1, "\n  ", $t2; }⏏<EOL>␤    expecting any of…»

[11:28] <bartolin> m: for 1..500 { my $t1 = rand; my $t2 = EVAL($t1); if $t1 ne $t2 { say "$_: ERROR:\n  ", $t1, "\n  ", $t2; } }

[11:28] <camelia> rakudo-moar 315ec6: OUTPUT«182: ERROR:␤  0.842760512692125␤  0.84276051269213␤196: ERROR:␤  0.385157163275392␤  0.38515716327539␤302: ERROR:␤  0.6708292500736␤  0.670829250074␤»

[11:30] <lizmat> ===SORRY!===

[11:30] <lizmat> I'm missing some needed files:

[11:30] <lizmat>     /Users/liz/Github/rakudo.parrot/install/bin/ops2c

[11:30] <lizmat> (Perhaps you need to 'make install', 'make install-dev',

[11:30] <lizmat> or install the 'devel' package for NQP or Parrot?)

[11:30] <bartolin> maybe thats not the problem in the test file (since that runs fine on moar even when I run it 1000 times or more)

[11:32] <bartolin> lizmat: when I tried to build with latest parrot earlier this month, I got the same failure.

[11:32] <lizmat> hmm... I didn't pull parrot, maybe that's the problem

[11:32] <bartolin> lizmat: this looks like a relevant commit: https://github.com/parrot/parrot/commit/c28873be67

[11:33] <bartolin> maybe there are changes needed in rakudo to reflect the changes in parrot? (only guessing)

[11:42] *** prevost joined
[11:43] <lizmat> giving up on building rakudo with parrot 690 for now

[11:46] *** frew joined
[11:46] <dalek> rakudo/parrot-690: 47644a4 | moritz++ | / (3 files):

[11:46] <dalek> rakudo/parrot-690: ops2c is now called parrot-ops2c

[11:46] <dalek> rakudo/parrot-690: review: https://github.com/rakudo/rakudo/commit/47644a4a91

[11:48] * lizmat tries again  :-)

[11:49] <moritz> I'm now testing whether NQP changes are necessary

[11:49] <moritz> (this is a shot in the dark, mind you)

[11:52] <Ven> poor dark.

[11:53] * masak .oO( how do I shot dark )

[11:53] <Ven> .oO( next you'll shoot minut )

[11:53] <Ven> minus*. sight.

[11:53] <masak> sight, indeed.

[11:53] <Ven> .oOo( next you'll shoot  )

[11:53] <Ven> masak: 'tis but my keyboard!

[11:58] <masak> verily.

[12:00] <lizmat> moritz: looks like the only other thing needed is a PARROT_REVISION bump in nqp

[12:00] <lizmat> OTOH, I'm seeing new spectest failures  :-(

[12:03] <lizmat> would *not* recommend bumping it *before* the release

[12:03] <lizmat> of this month's rakudo

[12:06] <Ven> https://www.youtube.com/watch?v=v3XoWi0XbZk c++ is fun!

[12:07] <Ven> (that'd make leont happy :P)

[12:07] <Ven> (leont++, even)

[12:07] *** jimgnosis joined
[12:11] <Ven> (I admit I sort of miss type arguments on subsets :P)

[12:11] <PerlJam> greetings

[12:11] <Ven> subset X of ::T :D.

[12:11] <Ven> o/, PerlJam 

[12:11] <PerlJam> Yes, I'm still working on the release.

[12:12] *** JimmyZ joined
[12:12] <bartolin> lizmat: in that case someone needs to revert the latest commit to rakudo, or?

[12:12] <lizmat> bartolin: it was in a branch

[12:13] <lizmat> so no revert necessary

[12:13] <bartolin> oh, overlooked that!

[12:13] <PerlJam> I had some family stuff last night that prevented completion and I've got a doctor appointment in a little while.   I likely won't get to finish until later this afternoon

[12:13] *** molaf joined
[12:13] <PerlJam> in any case, there were lots of parrot failures when I ran stresstest.

[12:14] <leont> Ven: thanks, that does sound interesting

[12:14] <lizmat> gist of failures with parrot 6.9.0: https://gist.github.com/lizmat/05a8462ffe4d6b0a8e52

[12:14] <Ven> leont: talk is pre-c++14, but still, metaparse and metamonad are incredible pieces of c++

[12:14] <lizmat> PerlJam++ nonetheless!!

[12:15] <leont> C++14 is a nice addition, but not nearly as big/important as C++11

[12:15] <Ven> well, constexprs relaxations are nice for metaprogramming :-)

[12:15] <leont> True!

[12:16] <leont> They seem to have switched to a regular release schedule, much like perl{5,6}, except that their iteration speed is slower

[12:17] *** chenryn left
[12:17] *** rindolf left
[12:17] *** rindolf joined
[12:18] <PerlJam> Here's what I saw for parrot 6.8.0: https://gist.github.com/perlpilot/85c1d10dedc6e651df66

[12:19] <PerlJam> and now I have to move some kids around prior to my appointment

[12:19] *** notfix is now known as xfix

[12:19] <PerlJam> bbl &

[12:19] *** thou joined
[12:19] * lizmat wishes PerlJam a good visit

[12:21] <moritz> lizmat: there are reasons I'm doing that stuff in a branch :-)

[12:21] * JimmyZ can't open http://irclog.perlgeek.de :(

[12:21] <lizmat> and good ones at that!

[12:22] *** chenryn joined
[12:22] <lizmat> JimmyZ: works ok for me, Great Firewall issues ?

[12:22] <moritz> JimmyZ: I can. What error do you get?

[12:22] <JimmyZ> time out, I'm not in china

[12:23] *** jimgnosis left
[12:23] *** xinming_ joined
[12:23] *** thou left
[12:24] <lizmat> JimmyZ: I'm thinking routing issues next, do you have a traceroute ?

[12:26] *** xinming left
[12:26] <JimmyZ> yeah, looks like it is

[12:29] *** rindolf left
[12:29] *** rindolf joined
[12:30] <brrt> hmm... we should have a uwsgi plugin for moarvm

[12:30] <masak> feature request: .classify takes the identity function as a default first argument

[12:30] *** kjs_ left
[12:31] <masak> that way, I can write @things.classify

[12:31] <moritz> and classify objects by their stringification?

[12:31] <masak> instead of `sub id { $^the_thing }; @things.classify(&id)`

[12:32] *** sisar left
[12:33] <moritz> well, @things.classify(-> $x { $x }) is a bit shorter

[12:34] <moritz> or just @things.classify({ $_ })

[12:34] <moritz> that said, +1

[12:34] <masak> I still think it'd be a nice default.

[12:34] <masak> ok, changing spec.

[12:34] <moritz> (and I've long wanted a more concise way to write the identity function)

[12:35] <masak> maybe we should provide it in CORE, as `&id` or `id`

[12:35] *** kjs_ joined
[12:35] <lizmat> masak: if identity would be the default, what if it is not a Str ?

[12:35] <lizmat> should it create a Typed Hash automagically ?

[12:35] <moritz> nope

[12:35] *** rindolf left
[12:35] <masak> lizmat: .classify doesn't build a Hash, it builds a list of pairs.

[12:36] <moritz> and that's wrong

[12:36] *** rindolf joined
[12:36] <moritz> it should return a hash

[12:36] <moritz> according to S32::Containers

[12:36] <moritz> m: say <aa ab bc>.classify(*.substr(0, 1)).perl

[12:36] <camelia> rakudo-moar 315ec6: OUTPUT«("b" => ["bc"], "a" => ["aa", "ab"]).hash␤»

[12:36] <moritz> oh, it does return a hash

[12:37] <moritz> masak: your mental model needs updating :-)

[12:37] <masak> seemingly.

[12:37] <lizmat> fwiw, making it a list of pairs, would neatly circumvent the Typed Hash issue

[12:37] <masak> it used to be a list of pairs.

[12:37] <masak> ok, I don't understand the current classify spec.

[12:37] <masak> standing down change, pending my understanding. :)

[12:38] <lizmat> well, that could be...  and it is very easily changed by adding .pairs internally

[12:38] <lizmat> but the underlying implementation would always use a Hash I would think

[12:38] <lizmat> or do we want to linearly check a list of pairs for its keys when classifying ?

[12:39] *** rindolf left
[12:39] <Ven> masak: @things.classify({$_}) doesn't sound that bad tho

[12:39] *** rindolf joined
[12:40] <lizmat> @things.classify(*) would even be better :-)

[12:40] *** sivoais_ left
[12:40] *** sivoais joined
[12:40] <moritz> masak: well, @things.classify would be identical to @things.classify(*.Str)

[12:41] <moritz> masak: so it would classify things by their stringification. Not very useful very often, but falls out quite naturally

[12:41] <lizmat> moritz: disagree, that falls out of the default implemenattion of hashes naturally

[12:41] <moritz> m: say ([1, '2 3'], ['1 2', 3], [4, 5]).classify(*.Str).perl

[12:41] <camelia> rakudo-moar 315ec6: OUTPUT«("4 5" => [[4, 5]], "1 2 3" => [[1, "2 3"], ["1 2", 3]]).hash␤»

[12:43] <lizmat> m: (now, now, now).classify({$_}).perl.say   # feels weird

[12:43] <camelia> rakudo-moar 315ec6: OUTPUT«("Instant:1414154672.027178" => [Instant.new(<1769107494706/1251>)], "Instant:1414154672.016588" => [Instant.new(<596773271591/422>)], "Instant:1414154672.023692" => [Instant.new(<1432538682760/1013>)]).hash␤»

[12:44] <lizmat> the key and values don't match ?

[12:44] <moritz> that's what you get with a default hash :-)

[12:45] <lizmat> ah, I read the values wrong: they're expressed as Rats  :-)

[12:45] <moritz> m: say (now xx 5).classify(*.x.Int).perl

[12:45] <camelia> rakudo-moar 315ec6: OUTPUT«("1414154791" => [Instant.new(<489297558001/346>), Instant.new(<1795976585737/1270>), Instant.new(<1093141654156/773>), Instant.new(<1648904487387/1166>), Instant.new(<885260899749/626>)]).hash␤»

[12:46] <moritz> m: say (now xx 5).classify(*.x.Int).elems for ^10

[12:46] <camelia> rakudo-moar 315ec6: OUTPUT«2␤1␤1␤1␤1␤1␤1␤1␤1␤1␤»

[12:46] <lizmat> that .x is still also very weird to me

[12:47] <moritz> say ((now xx 5).classify(*.x.Int).elems xx *).grep(* != 1)[^3]

[12:47] <moritz> lizmat: yes, that should be .seconds or so

[12:47] <moritz> m: say ((now xx 5).classify(*.x.Int).elems xx *).grep(* != 1)[^3]

[12:47] <camelia> rakudo-moar 315ec6: OUTPUT«2 2 2␤»

[12:47] * lizmat puts it on her cage cleaning list

[12:49] *** rindolf left
[12:49] *** rindolf joined
[12:51] <Ven> moritz: lines like that are why I love p6 :P

[12:54] *** j4jackj left
[12:54] *** j4jackj joined
[12:55] *** kaare_ joined
[12:58] <Ven> m: use MONKEY_TYPING; class Unit{has $.mul;has $.val; method ago {now-$.val*$.mul}}; augment class Num{method seconds{Unit.new(:0mul, :val(self))} }; say 3.seconds.ago;

[12:58] <camelia> rakudo-moar 315ec6: OUTPUT«===SORRY!=== Error while compiling /tmp/EWJCMRkNNH␤Undeclared routine:␤    now used at line 1␤␤»

[12:58] <Ven> uh?

[12:59] <Ven> m: use MONKEY_TYPING; class Unit{has $.mul;has $.val; method ago {now - $.val*$.mul}}; augment class Num{method seconds{Unit.new(:0mul, :val(self))} }; say 3.seconds.ago;

[12:59] <camelia> rakudo-moar 315ec6: OUTPUT«No such method 'seconds' for invocant of type 'Int'␤  in block <unit> at /tmp/7WfC6CIK6_:1␤␤»

[12:59] <Ven> m: use MONKEY_TYPING; class Unit{has $.mul;has $.val; method ago {now - $.val*$.mul}}; augment class Int{method seconds{Unit.new(:0mul, :val(self))} }; say 3.seconds.ago;

[12:59] <camelia> rakudo-moar 315ec6: OUTPUT«Instant:1414155624.921789␤»

[12:59] <Ven> \o/

[13:00] <Ven> kids: don't do that at home :P.

[13:01] *** rindolf left
[13:01] *** rindolf joined
[13:03] *** chenryn left
[13:04] *** rindolf left
[13:05] *** rindolf joined
[13:09] *** fhelmberger left
[13:09] *** Alina-malina left
[13:09] *** kaare_ left
[13:10] *** Alina-malina joined
[13:11] *** guru joined
[13:11] *** rindolf left
[13:11] *** guru is now known as Guest95167

[13:12] *** Guest95167 is now known as ajr_

[13:12] *** rindolf joined
[13:16] *** shlomif joined
[13:19] *** rindolf left
[13:20] *** shlomif is now known as rindolf

[13:27] *** rindolf left
[13:27] *** immortal joined
[13:27] *** immortal left
[13:27] *** immortal joined
[13:28] *** rindolf joined
[13:29] *** xinming_ left
[13:29] *** xinming joined
[13:29] *** erkan left
[13:30] *** xenoterracide_ joined
[13:30] * gtodd does a quick comparison of "perlmonks benchmark" http://perlmonks.org/?node_id=1099617

[13:31] <gtodd> perl6 -e 'for lines() {  say ~$/ if  m/(<<\w**5>>)/}' 150k-lines.txt # used to take ~ 70 seconds on my system

[13:31] <gtodd> and 100% cpu ;-)

[13:31] <gtodd> now ... perl6 -e 'for lines() {  say ~$/ if  m/(<<\w**5>>)/}' 150k-lines.txt  57.85s user 0.21s system 0% cpu 1:00.18 total

[13:32] <timotimo> gtodd: can you try what happens if you for lines(:eager)?

[13:32] <Ven> gtodd: can you try lines(:eager) ?

[13:32] <timotimo> %)

[13:32] <Ven> dammit timo.

[13:32] <lizmat> fwiw, the sub lines() has not yet received optimization treatment afaik

[13:32] <gtodd> it doesn't make as big a difference anymore ... is it due to changes in how lists work?

[13:33] <gtodd> oh ok

[13:33] <timotimo> oh

[13:33] <lizmat> it's a complete different code path

[13:33] <lizmat> (I realised much later)

[13:34] <gtodd> one thing I noticed was doing 10k-lines.txt and getting say 4 seconds then 100K would give me 40 seconds ....  

[13:35] <gtodd> or well 10K would give 4.4 seconds now 10K takes 4 seconds flat and 100K does 35-36 seconds so isomething in there is getting faster ;-)

[13:35] <lizmat> how did you code that ?

[13:36] <lizmat> 10k-lines.txt.IO.lines(:eager)

[13:36] <gtodd> same way ... naively

[13:36] <lizmat> might be faster  :-)

[13:36] <gtodd> ohh will try

[13:36] <gtodd> perl6 -e 'for lines(:eager) {  say ~$/ if  m/(<<\w**5>>)/}' 150k-lines.txt  57.60s user 0.25s system 1% cpu 59.750 total

[13:36] <lizmat> actually: "10k-lines.txt".IO.lines(:eager)

[13:36] <gtodd> eager used to make a bigger difference (~ a month ago)

[13:37] *** rindolf left
[13:37] <lizmat> well, :eager on ArgFiles is silently ignored

[13:37] *** rindolf joined
[13:39] <gtodd> perl6 -e 'for "10k-lines.txt".IO.lines(:eager) {  say ~$/ if  m/(<<\w**5>>)/}  3.80s user 0.10s system 0% cpu 4.016 total

[13:39] <gtodd> perl6 -e 'for lines() {  say ~$/ if  m/(<<\w**5>>)/}' 10k-lines.txt  4.12s user 0.09s system 7% cpu 4.316 total

[13:39] *** xenoterracide_ left
[13:39] <gtodd> so IO.lines(:eager) faster

[13:39] <gtodd> NB: I have slow disks :-)

[13:39] <lizmat> wonder how big the difference is with a 100K lines file

[13:40] <lizmat> ah, not much, you're doing more than just reading  :-)

[13:40] *** abraxxa left
[13:43] <gtodd> yeah the relative speed up as the file gets bigger  is new but it could be the machine is just less occupied or something  ... 

[13:44] <gtodd> 100k-lines.txt".IO.lines(:eager) is 35 seconds

[13:44] * timotimo doesn't know what "NB:" means and can't find it in the s99

[13:44] <gtodd> hehe

[13:45] <gtodd> nota bene  :-)

[13:45] <timotimo> oh

[13:45] <gtodd> I have SSDs somewhere but ....  not on this machine

[13:45] <timotimo> just put it into a ramdisk

[13:45] <gtodd> :)

[13:45] *** rindolf left
[13:45] <timotimo> if your file is popular, it should land in ram anyway

[13:46] *** rindolf joined
[13:47] <masak> "nota" is the singular imperative of "notāre".

[13:47] <gtodd> yeah the script I had was running it over and over .... this was ZFS on BSD geoms on multiple disks and does lords knows what to caches etc the speed up as the file gets larger is probably OS or FS related  I guess

[13:47] <timotimo> i've read the wikipedia article on it now :)

[13:47] <timotimo> well, skimmed it

[13:48] * lizmat goes offline for a bit for some sysadmin work

[13:48] <[Coke]> which rhymes with ♬ Volare!

[13:48] *** lizmat left
[13:48] <timotimo> [Coke]: oh god no

[13:48] <masak> [Coke]: :D

[13:48] <leont> Ven: their approach to strings is awesome though. I might abuse that to implement pack on C++. The world will hold you responsible for this :-p

[13:48] <Ven> leont: I'm all for witchcrafting.

[13:53] <Ven> (I mean - I'm doing perl6!)

[13:54] <timotimo> craft moar witches

[13:55] <gtodd> it will be cool when perl6 gets  faster to the point of being practical for this kind of file/data munging etc (I don't think matching perl5 on this sort of thing is going to happen very soon ! perl5 does it 0.05 seconds!) ... but what is "fast"?  if perl6 does something like this in 2 seconds (instead of 5 one hundredths)   errm ... 

[13:57] *** rindolf left
[13:57] <timotimo> gtodd: i think we'll get close enough to allow comfortable use soon

[13:57] <timotimo> and the jit is still "stupid"

[13:57] *** rindolf joined
[13:57] <timotimo> do you have a bit of knowledge about assembler-level performance?

[13:57] <colomon> 199 modules passing tests in the latest smoke run.

[13:57] <gtodd> oh right jitting is not really done yet

[13:58] <timotimo> because we're still loading every argument off the stack, doing the calculation, storing it back onto the stack

[13:58] <timotimo> we don't eliminate redundant loads and stores ever

[13:58] <timotimo> and many optimizations in spesh turn complex operations into just "set the value of this register to the value of that register", which is pretty much exactly a load + store on the heap, rather than a register-level operation

[14:00] <gtodd> since the jit option in now the default in the build I always forget jitting is turned on  but nowhere near being fullspeed

[14:00] <gtodd> I mean didn't the jit just get started this summer? 

[14:01] <timotimo> that's correct

[14:01] *** thou joined
[14:02] <gtodd> timotimo: so the jit is doing things that are more about testing for future improvement of the jit  rather than real speed ups 

[14:04] <timotimo> that's not really true either

[14:04] *** tardisx left
[14:04] <timotimo> it already gives a nice boost on some workloads

[14:04] <gtodd> :-)

[14:04] *** tardisx joined
[14:04] <timotimo> especially doing stuff with native nums and ints is pretty good

[14:04] <timotimo> but there is still a whole lot of improvements possible in the future

[14:05] *** BenGoldberg joined
[14:06] <colomon> FROGGS: ping?  looking at Inline...

[14:08] <Ven> trust me timotimo, just overload tan2 ;-)

[14:08] <timotimo> psst

[14:08] <Ven> good jit performance!

[14:09] <FROGGS> colomon: pong

[14:10] <colomon> FROGGS: just looked at GD to see why it was failing, which lead me to Inline.

[14:10] <FROGGS> colomon: I was able to install Inline yesterday

[14:10] <colomon> …. which, confusingly, appears to pass all tests in the smoke, but is failing when I try to install it directly.  :\

[14:11] <FROGGS> hmmm

[14:11] <colomon> Failed to open file: permission denied

[14:11] <colomon>   […]

[14:11] <colomon>   in method postcircumfix:<( )> at /home/colomon/tools/p6-Inline-C/lib/Inline/C.pm:32

[14:11] <colomon> actually, that's not even installed, that's run by hand from the repo

[14:11] <FROGGS> ohh, it is trying to create a tempfile... maybe it is just that

[14:12] <FROGGS> ==> Successfully installed Inline

[14:12] <FROGGS> worx on my box :/

[14:13] *** thou left
[14:14] <colomon> oh!

[14:14] <colomon> it's a bug of yours, I think, but very subtle

[14:14] *** rindolf left
[14:14] *** rindolf joined
[14:15] <colomon> it's trying to create /tmp/inline_a_plus_b.c, but it cannot, because that file already exists, created by a different user

[14:15] <colomon> namely smoker, the smoke-test user

[14:15] * colomon keeps it separate so that smoke testing builds don't interfere with his normal p6 hacking

[14:16] <FROGGS> ohh

[14:16] <geekosaur> fixed temporary file names are arguably a security hole...

[14:16] <colomon> … though actuially might be a bug in .e ?

[14:16] <colomon> $!libname    = $basename ~ 1000.rand.Int while $!libname.IO.e;

[14:17] <colomon> I don't understand why that doesn't … oh!

[14:17] <colomon> yeah, that's your bug.  :)

[14:17] <FROGGS> what exactly?

[14:18] <colomon> you check for name collisions with $!libname

[14:18] <colomon> but the actual files you create are inline_a_plus_b.c inline_a_plus_b.o and libinline_a_plus_b.so

[14:18] <FROGGS> ohh

[14:18] <colomon> (also, should those temp files really be left lying around?)

[14:22] <colomon> yeah, if I delete those /tmp files, everything works.

[14:24] *** treehug88 joined
[14:26] <colomon> FROGGS: do you have it, or do you want me to code up a fix?

[14:26] <FROGGS> colomon: I am testing something...

[14:26] <colomon> FROGGS++

[14:27] *** rindolf left
[14:28] <bartolin> m: say 0.005634127707264636e1 == 0.05634127707264636e0

[14:28] <camelia> rakudo-moar 315ec6: OUTPUT«True␤»

[14:28] *** rindolf joined
[14:28] <bartolin> rakudo.jvm doesn't agree here:

[14:28] <bartolin> $ perl6-j -e 'say 0.005634127707264636e1 == 0.05634127707264636e0'

[14:28] <bartolin> False

[14:29] <bartolin> could that be a bug?

[14:30] <masak> only if you expect big decimal semantics there.

[14:30] <masak> I'm not sure I do.

[14:30] *** thou joined
[14:30] <bartolin> I think it's the reason for a (rarely) failing test in roast on rakudo.jvm

[14:31] <colomon> p6: say 0.005634127707264636e1 - 0.05634127707264636e0

[14:31] <bartolin> that test uses 'rand' and on rakudo.jvm it produces values like 0.005634127707264636e1 sometimes.

[14:31] <camelia> rakudo-{parrot,moar} 315ec6: OUTPUT«0␤»

[14:31] <colomon> woah, camelia not handling jvm at the moment?

[14:32] <colomon> m: say $*VM

[14:32] <camelia> rakudo-moar 315ec6: OUTPUT«moar (2014.9.54.g.3.ac.9.a.7)␤»

[14:32] <bartolin> the test is here: https://github.com/perl6/roast/blob/master/S02-names-vars/perl.t#L103

[14:32] <colomon> m: say $*VM<config>

[14:32] <camelia> rakudo-moar 315ec6: OUTPUT«"ar" => "ar", "arflags" => "rcs", "arout" => "", "asm" => ".s", "asmout" => "-o ", "asmswitch" => "-S", "auxclean" => "\@:", "be" => "0", "can_unaligned_int32" => "1", "can_unaligned_int64" => "1", "can_unaligned_num64" => "1", "cancgoto" => "1", "cat" => …»

[14:32] <colomon> m: say $*VM<config><load_ext>

[14:32] <camelia> rakudo-moar 315ec6: OUTPUT«(Any)␤Saw 1 call to deprecated code during execution.␤================================================================================␤$*VM<config> called at:␤  /tmp/VxVK2_C8Ia, line 1␤Deprecated since v2014.5, will be removed with release v2015.…»

[14:32] *** lizmat joined
[14:33] <colomon> how do we do that today?

[14:33] <colomon> .config, eh

[14:33] <colomon> m: say $*VM.config<load_ext>

[14:33] <camelia> rakudo-moar 315ec6: OUTPUT«(Any)␤»

[14:33] <colomon> m: say $*VM.config

[14:33] <camelia> rakudo-moar 315ec6: OUTPUT«"ar" => "ar", "arflags" => "rcs", "arout" => "", "asm" => ".s", "asmout" => "-o ", "asmswitch" => "-S", "auxclean" => "\@:", "be" => "0", "can_unaligned_int32" => "1", "can_unaligned_int64" => "1", "can_unaligned_num64" => "1", "cancgoto" => "1", "cat" => …»

[14:34] <bartolin> m: my $a = 5.634127707264636e-02; say $a.perl; say EVAL($a.perl).perl

[14:34] <camelia> rakudo-moar 315ec6: OUTPUT«0.0563412770726464e0␤0.0563412770726464e0␤»

[14:35] *** treehug88 left
[14:35] <bartolin> $ perl6-j -e 'my $a = 5.634127707264636e-02; say $a.perl; say EVAL($a.perl).perl'

[14:35] <bartolin> 0.056341277072646356e0

[14:35] <bartolin> 0.05634127707264635e0

[14:36] <dalek> Perlito: 269af47 | (Flavio S. Glock)++ | / (2 files):

[14:36] <dalek> Perlito: Perlito5 - js - tr() tweak

[14:36] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/269af47286

[14:36] <bartolin> well, I'll submit a rakudobug for the failing test

[14:38] <FROGGS> colomon: done

[14:39] <colomon> \o/

[14:40] <colomon> woah, the tests for GD are sort of spectacularly useless.  :)

[14:41] <FROGGS> hehe

[14:41] <colomon> basically, it passes if "use GD" doesn't fail

[14:41] *** rindolf left
[14:41] *** BenGoldberg left
[14:41] <FROGGS> well, that is usually the first test I write :o)

[14:41] <colomon> really?

[14:41] *** rindolf joined
[14:41] <FROGGS> sure

[14:42] <colomon> I mean, every test file for a module does that automatically.

[14:42] <colomon> no need for an explicit test

[14:43] <colomon> does anyone know mrhdias?

[14:43] <FROGGS> I dunno why but I do that since forever... like my first test in P5 is a use_ok

[14:43] <FROGGS> not personally

[14:45] <[Coke]> colomon: it's easier to diagnose explicit test failures than implicit ones.

[14:46] <[Coke]> but that is pretty basic, aye

[14:46] <colomon> m: use fdsakjfklds

[14:46] <camelia> rakudo-moar 315ec6: OUTPUT«===SORRY!===␤Could not find fdsakjfklds in any of: /home/camelia/rakudo-inst-1/languages/perl6/lib, /home/camelia/rakudo-inst-1/languages/perl6␤»

[14:46] <colomon> is it really that hard to diagnose that error?  :)

[14:47] <colomon> okay, mailed mrhdias

[14:48] <colomon> and actually, you're going to get the above error whether or not you put an "alive" test after it.  

[14:48] *** cognominal joined
[14:49] *** hometra joined
[14:55] *** rindolf left
[14:56] *** rindolf joined
[14:59] *** treehug88 joined
[15:02] *** rindolf left
[15:02] *** rindolf joined
[15:03] *** treehug88 left
[15:05] *** ecocode left
[15:06] *** brrt left
[15:07] <timotimo> tadzik: can you add a feature to rakudobrew that'd run spectests automatedly and give nice uploadable output?

[15:09] *** denis_boyun_ left
[15:09] <colomon> https://github.com/perl6-community-modules/perl6-GD # not official yet, but if I don't hear from mrhdias….

[15:12] *** guru joined
[15:12] *** ajr_ left
[15:12] *** guru is now known as ajr_

[15:13] <BooK> are the Perl 6 on MoarVM vs Perl 6 on Parrot vs Perl 5 benchmarks published somewhere?

[15:15] *** erkan joined
[15:15] *** erkan left
[15:15] *** erkan joined
[15:17] <lizmat> timotimo might know

[15:17] <timotimo> i've had a quick look over my list of benchmarks

[15:17] *** rindolf left
[15:18] *** immortal left
[15:18] *** rindolf joined
[15:19] <timotimo> one sec.

[15:20] <timotimo> http://t.h8.lv/p6bench/ - i added a very simple index.html for you

[15:20] <lizmat> masak: wrt to .classify having a default of identity: wouldn't you be served better by a .Bag in such a case ?

[15:24] <BooK> timotimo: thanks!

[15:25] <timotimo> i didn't see the one jnthn used in there yet

[15:26] *** Ven left
[15:27] *** immortal joined
[15:29] *** erkan left
[15:30] *** colomon left
[15:30] <lizmat> cycling&

[15:30] *** treehug88 joined
[15:33] *** rindolf left
[15:34] *** rindolf joined
[15:42] *** lue left
[15:46] *** FROGGS left
[15:48] <smls> m: ([1], { [0, @^a Z+ @^a, 0] } ... *)[^5].perl.say;    # Pascal's triangle

[15:48] <camelia> rakudo-moar 315ec6: OUTPUT«([1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1])␤»

[15:49] <smls> ^ Will this still work post-GLR?

[15:49] <[Coke]> Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=200m; support was removed in 8.0

[15:49] <smls> That is, are both sides of the Z operator considered slurpy lists?

[15:49] *** rindolf left
[15:49] *** rindolf joined
[15:52] <TimToady> it's bound to @^a, which is not itemized

[15:52] <TimToady> so should still work

[15:52] *** araujo joined
[15:54] *** JimmyZ left
[15:54] *** lue joined
[15:55] <TimToady> and the X and Z metaops should still be smart about whether their base op is a list infix or not, and flatten accordingly, just as it is now

[15:56] <TimToady> most of the semantic shift is in invocants, and operators are really functions, which stay much the same

[15:57] <smls> right

[15:57] *** [particle] left
[15:58] *** cognominal left
[15:58] <TimToady> this aspect of the GLR can be viewed as clarification of the difference between the OO and FP world views

[15:58] *** SOLEIL joined
[16:00] <TimToady> those world views were most confused in the earlier designs, and have subsequently undergone various changes that keep the two worlds from interacting, so it's kind of natural now to give invocants different semantics than ordinary arguments

[16:00] *** Guest1419 left
[16:01] <masak> lizmat: yes, I'd've probably been better served by a .Bag

[16:01] *** eternaleye left
[16:01] *** djanatyn left
[16:01] <masak> lizmat: I'm no longer championing for the identity function being the default :)

[16:01] *** SOLEIL left
[16:01] <TimToady> there might be some slight fallout for where we do "method foo (@stuff) is export"

[16:02] *** aindilis left
[16:02] *** [particle] joined
[16:02] *** rindolf left
[16:03] <TimToady> that is, for an exported method, the first arg will get invocant semantics even though you are invoking it through the FP interface

[16:03] *** rindolf joined
[16:03] *** aindilis joined
[16:03] <TimToady> but that's more or less how it is already, so probably will not be noticed much

[16:04] *** eternaleye joined
[16:04] *** djanatyn joined
[16:04] *** Guest1419 joined
[16:04] * TimToady logs back

[16:06] *** immortal left
[16:06] *** zakharyas left
[16:07] *** erkan joined
[16:07] *** erkan left
[16:07] *** erkan joined
[16:13] *** smls left
[16:15] *** rindolf left
[16:15] *** rindolf joined
[16:17] *** cognominal joined
[16:23] *** MilkmanDan left
[16:24] *** rindolf left
[16:25] *** ghostlines left
[16:25] *** rindolf joined
[16:26] *** FROGGS joined
[16:28] *** immortal joined
[16:28] *** immortal left
[16:28] *** immortal joined
[16:28] *** kurahaupo left
[16:30] *** erkan left
[16:31] *** [Sno] left
[16:32] *** cognominal left
[16:38] *** rindolf left
[16:38] *** rindolf joined
[16:42] <dalek> perl6-bench/stress: fa5392f | (Geoffrey Broadwell)++ | timeall:

[16:42] <dalek> perl6-bench/stress: Add symbolic diagnosis to timeall data

[16:42] <dalek> perl6-bench/stress: 

[16:42] <dalek> perl6-bench/stress: First rule of data producers: Don't force consumers to parse human-friendly

[16:42] <dalek> perl6-bench/stress: strings to get the data back out.  Thus, add a symbolic diagnosis next to

[16:42] <dalek> perl6-bench/stress: every human-readable failure reason.

[16:42] <dalek> perl6-bench/stress: review: https://github.com/japhb/perl6-bench/commit/fa5392fc64

[16:42] <dalek> perl6-bench/stress: 4a42954 | (Geoffrey Broadwell)++ | analyze:

[16:42] <dalek> perl6-bench/stress: Add first-pass analysis for test diagnoses

[16:42] <dalek> perl6-bench/stress: review: https://github.com/japhb/perl6-bench/commit/4a429547e6

[16:42] <dalek> perl6-bench/stress: f61cfa0 | (Geoffrey Broadwell)++ | analyze:

[16:42] <dalek> perl6-bench/stress: Widen text comparison columns to fit diagnoses

[16:45] *** grettis joined
[16:46] *** abraxxa joined
[16:46] *** abraxxa left
[16:48] *** MilkmanDan joined
[16:55] *** ajr_ left
[16:55] *** nwc10 joined
[16:55] *** colomon joined
[16:55] <nwc10> I checked the logs - has no-one pasted a link to jnthn's APW talk yet?

[16:56] <nwc10> https://www.youtube.com/watch?v=AhCx3CTauBY -- Objects ∩ Concurrency,

[16:56] <FROGGS> nwc10: I did so in #perl6

[16:56] <nwc10> clearly I fail at log parsing

[16:56] *** rindolf left
[16:56] *** MilkmanDan left
[16:57] *** rindolf joined
[16:57] *** hometra left
[16:57] *** MilkmanDan joined
[16:57] <dalek> Perlito: 55e36b5 | (Flavio S. Glock)++ | / (3 files):

[16:57] <dalek> Perlito: Perlito5 - fix 'use strict' - https://github.com/fglock/Perlito/issues/25

[16:57] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/55e36b5eb5

[17:02] *** prevost left
[17:04] *** virtualsue left
[17:05] *** kaare_ joined
[17:07] *** kjs_ left
[17:16] *** prevost joined
[17:20] *** abraxxa joined
[17:20] *** abraxxa left
[17:23] *** leont left
[17:31] *** molaf left
[17:36] *** kjs_ joined
[17:39] *** kaare__ joined
[17:40] *** [Sno] joined
[17:41] *** prevost left
[17:42] *** kaare_ left
[17:44] *** kaare__ left
[17:47] *** cognominal joined
[17:48] *** nwc10 left
[17:48] *** guru joined
[17:49] *** guru is now known as Guest46966

[17:49] * TimToady thinks that Instant.x ought to be renamed Instant.cheat or Instant.don't-try-this-at-home

[17:49] *** Guest46966 is now known as ajr_

[17:49] *** sqirrel_ joined
[17:50] * grondilu does not know about Instant.x

[17:50] <grondilu> is that in Temporal?

[17:50] *** FROGGS left
[17:50] *** sqirrel left
[17:51] *** FROGGS joined
[17:51] <TimToady> m: say now

[17:51] <camelia> rakudo-moar 315ec6: OUTPUT«Instant:1414173124.087981␤»

[17:51] <TimToady> m: say now.x

[17:51] <camelia> rakudo-moar 315ec6: OUTPUT«1414173128.797084␤»

[17:52] <TimToady> it tempts you to cheat on the internal epoch, which Instant is not guaranteed to preserve

[17:52] <FROGGS> m: say and now

[17:52] <camelia> rakudo-moar 315ec6: OUTPUT«===SORRY!=== Error while compiling /tmp/GZNRYPhQjK␤Undeclared routine:␤    and used at line 1. Did you mean 'end', 'any', 'rand'?␤␤»

[17:53] <TimToady> now andthen ...

[17:53] <TimToady> m: now andthen ...

[17:53] <camelia> rakudo-moar 315ec6: OUTPUT«Unhandled exception: Stub code executed␤   at <unknown>:1  (/home/camelia/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:throw:4294967295)␤ from src/gen/m-CORE.setting:13680  (/home/camelia/rakudo-inst-1/languages/perl6/runtime/CORE.setting.…»

[17:54] <grondilu> std: { say } and now

[17:54] <camelia> std 14ad63b: OUTPUT«===SORRY!===␤Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument at /tmp/KeCtGV6JoI line 1:␤------> { say⏏ } and now␤Check failed␤FAILED 00:00 139m␤»

[17:54] *** ivanshmakov joined
[17:54] <PerlJam> okay ... working on the release again.   Most (if not all) of the parrot test failures appear to be because of unicode characters.   moritz++ added a note to the announcement that this is the last release to support parrot without ICU.  Is that really true?

[17:54] <TimToady> I believe that was the consensus

[17:55] <TimToady> it ain't Perl 6 if it don't do unicode...

[17:55] <PerlJam> What should I do about all of the failing tests?  Many of them seem to not even compile with rakudo-p because it barfs on some character during the parse.

[17:56] <TimToady> install icu?

[17:56] <TimToady> well, first verify that the lack of icu is the problem

[17:58] <TimToady> parrot::has_icu, I guess

[17:58] <TimToady> according to perl6-p -V

[17:59] <TimToady> I'm fine with the tests failing this release for non-icu systems, even though we "support" it

[17:59] <PerlJam> parrot::has_icu=0

[17:59] *** ivanshmakov left
[18:00] <TimToady> though I suppose we should test at least once with icu

[18:00] *** raiph left
[18:02] <TimToady> seeing if installing icu-devtools helps here

[18:02] * PerlJam installs libicu-dev

[18:03] <TimToady> that makes more sense

[18:03] *** ivanshmakov joined
[18:05] * TimToady wishes he had his brane back, but still recovering from whatever it was I have

[18:06] *** raiph joined
[18:06] <TimToady> tenses, who needs 'em

[18:06] <rurban> but I just added needed namealiases which were not icu

[18:06] <rurban> in icu

[18:07] <TimToady> I seem to recall reading that they'd bump the parrot version next release, so maybe that isn't in play

[18:10] <rurban> I'd wish I'd known it earlier, then I could have added more names to the list for —without-icu

[18:11] <PerlJam> no worries.   I figure the Nov or Dec release will make more of an impression upon the world as the GLR should have happened :)

[18:13] <rurban> are those http://t.h8.lv/p6bench/all_backends.html with moar jit already? dont think so

[18:14] <rurban> I see: http://t.h8.lv/p6bench/2014-10-10-huge_history.html it is

[18:17] *** molaf joined
[18:22] <PerlJam> I don't know how those graphs relate, but commit 1eed27d to NQP is from 1 year ago, so I would guess the graphs on http://t.h8.lv/p6bench/all_backends.html are all pre-JIT

[18:23] *** gfldex joined
[18:24] *** grondilu left
[18:24] *** rurban left
[18:25] *** SamuraiJack joined
[18:28] *** rindolf left
[18:46] <smash> TimToady++ # 5 Programming Languages Everyone Should Know

[18:50] *** psch joined
[18:50] <psch> hi #perl6 o/

[18:51] <psch> i figured out my cliparser bug and i can now spectest the branch again \o/

[18:51] <psch> turns out the problem was still in the grammar and i didn't build TOP correctly to also work with a cli that only supplies arguments

[18:51] <psch> s/build/write/

[18:52] <psch> regarding the delimited options stuff i don't have any idea yet, but they should at least end up somewhere in Perl6::Compiler and afaiu i can borrow from Inc.pm to get them into perl6-land

[18:57] *** j4jackj left
[18:58] *** j4jackj joined
[19:01] *** rindolf joined
[19:10] *** darutoko left
[19:16] <timotimo> i'm sorry that the index.html for the benchmark graphs is so useless

[19:16] <timotimo> i've wanted to write a more complex index generator or something similar, but i still don't know what it should show and what you should be able to do with it

[19:24] <gtodd> I like how perl6 does this:

[19:24] <gtodd> m: say "foo" ~~ /fum/ ?? "matched" !! "nope" ;

[19:24] <camelia> rakudo-moar 315ec6: OUTPUT«nope␤»

[19:24] <gtodd> oops I meant

[19:24] <gtodd> m: say "foo" =~ /fum/ ?? "matched" !! "nope"

[19:24] <camelia> rakudo-moar 315ec6: OUTPUT«===SORRY!=== Error while compiling /tmp/Bl8VVOXdaj␤Unsupported use of =~ to do pattern matching; in Perl 6 please use ~~␤at /tmp/Bl8VVOXdaj:1␤------> say "foo" =~⏏ /fum/ ?? "matched" !! "nope"␤»

[19:24] <timotimo> does what exactly?

[19:24] <gtodd> "in Perl 6 please use ~~" rox

[19:25] <gtodd> I want to put error messages like that all over the place :-)

[19:25] <timotimo> aaah

[19:25] <timotimo> i understand

[19:25] <moritz> TimToady++ put a lot of effort into error messages

[19:26] <mauke> m: "foo" ~=~ "bar"

[19:26] <camelia> rakudo-moar 315ec6: OUTPUT«Cannot modify an immutable Str␤  in block  at src/gen/m-CORE.setting:18918␤  in block <unit> at /tmp/vFGYrZ8V4o:1␤␤»

[19:27] <gtodd> yeah ... do they all live in CORE.setting?  or I mean 

[19:27] <gtodd> is that where the catching and exceptions start from?

[19:28] <japhb> gtodd: Some are found in the grammar, some in the setting.

[19:28] <psch> some of the throwing starts from nqp

[19:28] <gtodd> I wanted to add a simple message for "reverse" when used on a hash "in Perl 6 please use invert"

[19:28] <psch> but at least P6Regex should almost only throw from Perl6::Grammar by now i think

[19:29] <gtodd> but couldn't figure out a) if it was non trivial b) if there was a better way ... that lead me to nqp :-)

[19:30] *** mauke_ joined
[19:31] *** Sqirrel joined
[19:32] *** mauke left
[19:33] <dalek> doc: 88bad9d | usev6++ | / (2 files):

[19:33] <dalek> doc: Add exception X::Syntax::Term::MissingInitializer

[19:33] <dalek> doc: review: https://github.com/perl6/doc/commit/88bad9d191

[19:35] <gtodd> It would be cool if there was a way to annotate messages like that even further - or translate them into languages that use all the beautiful unicode support  ;-) ... or load a module and then along with those messages you'd get referred to relevant snippets of documentation (the docs are going to be fantastic anyways but ...)  and maybe a heirarchy of community generated and/or internal PBP policy style docs that popup 

[19:36] *** mauke_ is now known as mauke

[19:36] <gtodd> little "documentation hooks" 

[19:36] *** k2t2 joined
[19:37] <k2t2> help

[19:37] <timotimo> PBP?

[19:37] *** k2t2 left
[19:37] *** rindolf left
[19:38] <lizmat> gtodd: by having exceptions as classes, such an approach would be just a matter of augmenting said classes  :-)

[19:38] *** SamuraiJack_ joined
[19:38] <gtodd> that way every time someone came up with an idiom they could stick an example in ~/.perl6/docs/hooks/<some ref to the error> ... maybe with URL in it to further examples on rosettacode or perl6.org

[19:38] <gtodd> and periodically people could cd ~/.perl6/docs/hooks ; git push 

[19:39] *** SamuraiJack left
[19:39] <gtodd> to some massive repo of perl6 lore ...

[19:39] <gtodd> lizmat: good! :-D

[19:39] <gtodd> timotimo: the classic Perl Best Practices

[19:39] <gtodd> I really liked that book

[19:39] <gtodd> like :-)

[19:40] * lizmat thinks Instant.x should be called .tai

[19:41] <gtodd> lizmat: you were fixing some error messages lately and was trying to watch your commits to see how you were doing it ... I wanted to see if I could make %hash.invert more famous

[19:41] * masak thinks he could live with .tai

[19:41] <gtodd> lizmat: .tai++ 

[19:41] * masak .oO( .太 )

[19:41] <japhb> lizmat: Is it actually tai though?

[19:42] <gtodd> hehe

[19:42] <lizmat>     has Rat $.x;

[19:42] <lizmat>       # A linear count of seconds since 1970-01-01T00:00:00Z, plus

[19:42] <lizmat>       # tai-utc::initial-offset. Thus, $.x matches TAI from 1970

[19:42] <lizmat>       # to the present.

[19:42] <lizmat> is what the code says

[19:42] <lizmat> as we know, internal documentation is always right  :-)

[19:42] <japhb> OK, that's reasonable then.

[19:42] <japhb> hehe

[19:43] <japhb> I just didn't want to give people an accessor that was not really correct for some reason.

[19:44] *** mls left
[19:44] <gtodd> will this intimate that perl6 explicitly agrees with DJB about time :-)   http://cr.yp.to/proto/utctai.html  

[19:44] *** mls joined
[19:46] *** sharpie99 joined
[19:48] <timotimo> i'm just now watching masaks goto statement considered awesome talk

[19:48] <japhb> Hmmm, this does have the problem that we are treating a seconds-since-epoch value as TAI, which is not quite accurate (if the cr.yp.to page is to be believed; I've forgotten the details I learned way back when, except for "UTC for humans, TAI for computers") 

[19:48] <timotimo> masak: do you feel we could have the slip keyword/functionality without a big amount of changes?

[19:48] <timotimo> because that does sound pretty awesome to have

[19:48] <masak> timotimo: I'm not seriously proposing this keyword in core.

[19:48] <tony-o> timotimo: link?

[19:49] <japhb> slip?

[19:49] <masak> timotimo: let's just say if we ended up with a mutable-enough language that such a keyword could be added, I wouldn't complain. :)

[19:49] <masak> japhb: `slip` is `next` without losing position and state in the iteration.

[19:49] <timotimo> https://www.youtube.com/watch?v=D32rpo5TeVg&list=UU7PuZDAIVMyE7mgkZHunXGw&spfreload=10

[19:49] <timotimo> right, slip causes the iterator to go to the next iteration without leaving the code block

[19:50] <masak> japhb: or, put differently `slip` + `redo` == `next`

[19:50] <japhb> Oh now that's an interesting idea

[19:50] <masak> and you could do it with labels, iterating an *outer* loop, leaving the inner state intact.

[19:50] <japhb> Kinda like the CRLF decomposition, except moderately less likely to cause instant insanity.

[19:51] *** sharpie99 left
[19:51] <masak> I find now and then that I am in need of such a construction.

[19:51] <japhb> Oooh, example?

[19:55] <masak> parse a line-based format. one line ends with a line continuation marker. I want to go to the next iteration, but keep doing what I was doing.

[19:55] *** cognominal left
[19:56] <masak> in a language without `slip`, I have to set flags and stuff.

[19:56] * lizmat has just been convinced

[19:56] <masak> it's the same kind of poverty of language that led C# to async/await.

[19:56] <masak> but for a different problem.

[19:58] <TimToady> gtodd: I've been ranting about leap seconds vs POSIX since the turn of the millenium, when we should've thrown out leap seconds and established 2000 as the new epoch

[20:00] *** cognominal joined
[20:00] <timotimo> masak: i wouldn't mind i fthe slip feature wouldn't actually do the changes to the loop "variables"

[20:00] <gtodd> yeah

[20:01] <masak> timotimo: as long as it reads another line of input.

[20:01] <dalek> rakudo/nom: 29757fe | duff++ | docs/announce/2014.10.md:

[20:01] <dalek> rakudo/nom: update announcement slightly

[20:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/29757fe46e

[20:01] <gtodd> TimToady:  milleniums don't come around that often   ... :-)

[20:01] <gtodd> every 3.15569e10 seconds?  give or take a few leaps

[20:04] <timotimo> masak: if we don't require weird interactions, we could just have something like a dynamic variable to represent the loops we're in (or go via the labels on the loops) and bump the iteration and grab the new value

[20:04] <lizmat> PerlJam++

[20:04] <timotimo> my $next_line = slip Label;

[20:05] <lizmat> maybe 'slip' implementation should be part of the GLR ?

[20:05] <timotimo> i wouldn't mind if we had that

[20:05] <masak> no please don't :)

[20:05] <masak> please focus on real problems

[20:05] <timotimo> OK

[20:06] <lizmat> masak: so slip *would* call the NEXT phaser, but not the LEAVE phaser ?

[20:06] <gtodd> I like the idea of slip but not the word it looks odd :-D  (plus I speak french errm) ... maybe a linguistics expert will come up with something else ;-)

[20:06] <masak> no idea.

[20:06] <masak> gtodd: as long as it's four letters long.

[20:06] <masak> gtodd: I kind of like the connotations of "slip", though. the loop iterates under your feet, so to speak.

[20:07] <timotimo> yes, the name struck me as very fitting

[20:09] *** treehug88 left
[20:09] *** cognominal left
[20:10] *** travis-ci joined
[20:10] <travis-ci> Rakudo build passed. Jonathan Scott Duff 'update announcement slightly'

[20:10] <travis-ci> http://travis-ci.org/rakudo/rakudo/builds/38963173 https://github.com/rakudo/rakudo/compare/a37259208a0e...29757fe46efb

[20:10] *** travis-ci left
[20:10] <lizmat> masak:  I think 'slip' would be handy for e.g. a Text::CSV port  :-)

[20:11] <[Tux]> looking at my code?

[20:11] <lizmat> [Tux]  no, must admit I haven't yet much  :-(

[20:11] *** kjs_ left
[20:13] <timotimo> i wonder how easy it is to make slangs composable

[20:15] *** ghostlines joined
[20:16] <masak> we'd better make them composable.

[20:16] <masak> otherwise, they're no better than source filters. :)

[20:16] <timotimo> there's a part that we as the perl6 creators and implementors have to get right

[20:17] <timotimo> and there's probably parts where users may end up inadvertently making their slang hostile to either embedding others or being embedded in others

[20:17] <TimToady> masak: smile when you say that...oh wait, you did...

[20:17] <timotimo> (embedded as in "called from")

[20:17] <masak> also, if Angular can make directives composable using *JavaScript* and the DOM as the substrate, I think we should be able to make slangs composable using Perl 6 as the substrate.

[20:18] <timotimo> masak: you also handle "lexpads" with your $cont object, right?

[20:18] <timotimo> the good thing about "cont" is that it's both the beginning of "context" and "continuation"

[20:19] <tony-o> masak: that talk is ++

[20:19] <masak> cool. thanks.

[20:19] <masak> timotimo: yes :)

[20:19] <masak> timotimo: though Continuations::Kinda remains quite underpowered still.

[20:19] <timotimo> that's neat

[20:19] <masak> timotimo: but yes, it would do lexpads inside the routine, too.

[20:19] <timotimo> it still doesn't have the slang bit to it, yeah?

[20:20] <masak> no, that's just a twinkle in my eye yet.

[20:20] <masak> I write things "long form" right now.

[20:21] *** ghostlines left
[20:21] <timotimo> masak: good job in any case

[20:21] <masak> I have this idea lately that most language feature can be designed in two steps: (a) get the semantics right with just funcations, methods, closures, etc. (b) get the syntax right, sugaring the semantics with macros, slangs and whatnot.

[20:21] <masak> features*

[20:22] * timotimo is now watching "c day is coming"

[20:22] * lizmat is too afraid to go look herself

[20:22] <timotimo> heh

[20:23] <timotimo> moarvm is faster than rakudo? :)

[20:23] <lizmat> yeah

[20:23] <masak> if only we could optimize away that whole "Perl 6" part on top of moarvm... :P

[20:23] <lizmat> started that presentation at 6am, so that also meant not enough sleep  :(

[20:24] <timotimo> sometimes i wish i could just write a piece of code in-line as nqp, but that desire will go away when we get better and better at optimizing perl6 code

[20:27] <PerlJam> masak++ I like "slip"

[20:27] <timotimo> lizmat: you said "i'm sure there's going to be a video of [jnthn's talk about performance advances] very soon"

[20:27] <timotimo> lizmat: you couldn't have been more wrong ;(

[20:28] <lizmat> yeah...  :-(

[20:28] <timotimo> not your fault of course

[20:28] <lizmat> but but, it is!

[20:28] <masak> fun hackathonoid for some weekend: cloning Rakudo, and getting `slip` to work in it. preferably while passing all spectests ;)

[20:28] <lizmat> everything is my fault anyway  :-)

[20:29] <timotimo> many good things are your fault! :)

[20:30] <woolfy> Videos for Austrian Perl Workshop (with a lot of Perl 6) are online now: https://www.youtube.com/channel/UCB9cjCMJPZRJrYyOw0Wo-oQ

[20:30] <masak> lizmat++ # to blame for many good things

[20:30] <timotimo> woolfy: after the fact, it kind of seems to me like it was not really "that much"

[20:30] <masak> ooh, APW videos

[20:31] <masak> woolfy++

[20:32] <woolfy> (I was quite happy to see Larry & Jonathan & Stefan & Nick and to attend the hackathon, it all had a strong Perl 6 feel to me)

[20:32] <pmichaud> good afternoon, #perl6

[20:32] <pmichaud> PerlJam++  # 2014.10 release

[20:32] <PerlJam> pmichaud o/

[20:33] <woolfy> For the people who didn't know yet, the videos of the main room of YAPC::EU are now online too, including the talks by Lichtkind++ and jnthn++: https://www.youtube.com/user/yapceu

[20:33] <pmichaud> ooooh, video

[20:33] * pmichaud adds to playlist

[20:33] * masak looks at nine++'s Inline::Perl6 APW talk

[20:33] <PerlJam> woolfy++

[20:33] <woolfy> pmichaud \o/

[20:34] <lizmat> masak: Inline::Perl6 ???

[20:34] <woolfy> masak: Inline::Perl5?

[20:34] <woolfy> :-)

[20:34] * PerlJam is watching TimToady talk about what he didn't do this summer

[20:34] <pmichaud> Hey, I can write an Inline::Perl6 module!

[20:34] <woolfy> pmichaud: even I can do that!

[20:34] <pmichaud> I think we should put one into the ecosystem just to see what people do :)

[20:35] <masak> ah, Inline::Perl5, of course.

[20:35] <masak> I guess I'm too used to writing a "6" there...

[20:35] <pmichaud> masak: that's not a bad thing to be too used to doing

[20:36] <timotimo> lizmat: damn it, the video recordings are up now that planetaria is dead and your talk references that; maybe we can get the yapceu channel owner to put an annotation up or something?

[20:36] <timotimo> oh hey pmichaud :)

[20:36] <masak> I'd have left here long ago, but I keep writing `/join #perl6` instead of `/join #perl`... :P

[20:36] <woolfy> masak: it would feel empty without you here!

[20:37] <masak> aww <3

[20:37] <gtodd> I guess in a way the word "slip" implies a kind of short quick less obvious variant of "shift"

[20:37] <timotimo> i like having masak around :)

[20:37] <dalek> specs: e4c5b10 | (Elizabeth Mattijsen)++ | S04-control.pod:

[20:37] <dalek> specs: Naively spec 'slip'

[20:37] <dalek> specs: review: https://github.com/perl6/specs/commit/e4c5b10b3b

[20:37] <masak> o.O

[20:37] <timotimo> masak: also, in your talks you have a very soothing tone and pleasant voice

[20:37] <gtodd> timotimo: so true

[20:38] <pmichaud> yes, when I need a "Don't panic" talk, masak++ should be the one to give it.  :)

[20:38] <pmichaud> afk for a bit

[20:38] <gtodd> masak++ watch the talk feel more calm

[20:38] <masak> timotimo: that would explain why I feel so relaxed and at ease all the time. I hear myself speak quite a lot.

[20:38] <gtodd> hehe

[20:38] <timotimo> oh wow, the video is 30 minutes, your talk was 15 minutes, so there must have been some good Q&A :)

[20:38] <timotimo> masak: :D

[20:38] <masak> surely I spoke for more than 15 minutes...

[20:39] <timotimo> masak: refering to liz' talk right now

[20:39] <lizmat> PerlJam++  # for the Octover 2014 release  :-)

[20:39] <woolfy> just reading masak's lines here calms me down...

[20:39] <timotimo> PerlJam++ # release \o/

[20:39] <masak> PerlJam++

[20:40] <woolfy> PerlJam++  indeed

[20:41] <masak> lizmat: re https://github.com/perl6/specs/commit/e4c5b10b3b -- I don't believe this belongs in spec. at least not without a big '[CONJECTURAL]' notice next to it.

[20:41] <timotimo> something i notice is that all these links liz put on her slides ... it kinda seem like each one of them has a different domain that hosts it

[20:41] <timotimo> we might do well to make discoverability easier with a centralized index that's more than just a bunch of links

[20:41] <masak> lizmat: it's exactly the kind of "move the goalposts" feature-creeping we *shouldn't* be doing as we aim for stability and completeness... :/

[20:42] <masak> lizmat: also, I need some cool examples of how Perl 6 could be extended with macros, slangs, and language introspection... :)

[20:43] <dalek> specs: 24850d6 | (Elizabeth Mattijsen)++ | S04-control.pod:

[20:43] <dalek> specs: Add CONJECTURAL to slip, and ++ version: masak++

[20:43] <dalek> specs: review: https://github.com/perl6/specs/commit/24850d6b66

[20:43] <timotimo> it kind of seems like (to me) that the iterator itself has to cooperate for slip to make work

[20:43] <masak> yeah, it's a pretty intrusive change.

[20:43] <lizmat> hence my suggestion it'd be part of GLR

[20:43] <masak> nonono please no

[20:44] <masak> let's focus on real problems for GLR

[20:44] <timotimo> there are only 25 synopses? i thought there were 99! :P

[20:44] <masak> there's one way to make GLR hurt, and that's to throw everything and its cat into the blender

[20:45] <lizmat> fwiw, if you need to add flags and stuff yourself to make the code do what your want, we're missing a feature

[20:45] <timotimo> hmm, that sounds a bit oversimlified

[20:45] *** xfix is now known as notfix

[20:45] <lizmat> ok, anyway, it's now in as CONJECTURAL

[20:46] <lizmat> so it's something we might want to keep in the back of our minds while working on the GLR  :-)

[20:46] <timotimo> lizmat: during the Q&A part, at one point you say "thank you, lichtkind" into the audience, directly after "my personal project is to go through all the synopses and check what we still have to implement"

[20:46] <timotimo> what did he say?

[20:46] <gtodd> no slippage in GLR? 

[20:47] <lizmat> timotimo: he didn't say anything  :-)

[20:47] <timotimo> did you thank him for not saying anything? :)

[20:48] * lizmat feels embarrassed to really discuss... 

[20:48] <timotimo> OK, fair enough

[20:50] <raydiak> does Math::Symbolic sound like a reasonable name for an expression/equation parsing/manipulating module?

[20:53] <awwaiid> does to me

[20:53] <pmichaud> lizmat: how would slip work in a while loop?

[20:54] <raydiak> then in the absence of objections, I'll name it that :)

[20:55] <colomon> raydiak: +1

[20:55] <lizmat> pmichaud: just like redo, but it *would* call the NEXT phaser

[20:55] <dalek> perl6-bench/stress: b932bb0 | (Geoffrey Broadwell)++ | analyze:

[20:55] <dalek> perl6-bench/stress: Diagnosis 'other' is now 'unknown'; make sure we always have a diagnosis

[20:55] <dalek> perl6-bench/stress: review: https://github.com/japhb/perl6-bench/commit/b932bb09cf

[20:55] <dalek> perl6-bench/stress: 758386d | (Geoffrey Broadwell)++ | analyze:

[20:55] <dalek> perl6-bench/stress: First pass at showing failures in text summary

[20:55] <dalek> perl6-bench/stress: review: https://github.com/japhb/perl6-bench/commit/758386d24b

[20:55] <dalek> perl6-bench/stress: 15222c2 | (Geoffrey Broadwell)++ | analyze:

[20:55] <dalek> perl6-bench/stress: Make compare and show-failures independent

[20:55] <dalek> perl6-bench/stress: review: https://github.com/japhb/perl6-bench/commit/15222c2078

[20:55] <dalek> perl6-bench/stress: 1e28573 | (Geoffrey Broadwell)++ | analyze:

[20:55] <dalek> perl6-bench/stress: Show test name only once per test, no matter which text summary lines are being shown

[20:55] <dalek> perl6-bench/stress: review: https://github.com/japhb/perl6-bench/commit/1e28573fb4

[20:55] <pmichaud> ummmmmmmmmm....

[20:55] <lizmat> actually

[20:55] <lizmat> I *thought* redo in a while loop would call the NEXT phaser

[20:55] <lizmat> but it doesn't

[20:56] <lizmat> hmmm..... 

[20:56] <lizmat> that wouldn't make sense, indeed... and redo is specced to not be a next iteration

[20:57] <pmichaud> slip sounds like it introduces quite a few warts

[20:57] <lizmat> so it's correct that the NEXT phaser isn'r called

[20:57] <masak> `redo` is basically a kind of goto instruction.

[20:57] <masak> `slip` is basically a kind of CPS thing.

[20:57] <pmichaud> I'm not saying slip isn't useful or warranted, only that there are a lot of edge cases to consider

[20:57] <masak> what pmichaud said.

[20:58] <masak> `slip` is about as disruptive as `gather`, and should not be spec'd lightly.

[20:58] <pmichaud> how does 'slip' differ from 'next' ?

[20:58] <lizmat> pmichaud: it would not leave the scope

[20:58] <masak> pmichaud: `slip` goes on to the next instruction, with all values intact.

[20:59] <pmichaud> lizmat: meaning it continues on from where the 'slip' occurred?

[21:00] <masak> yes.

[21:00] <TimToady> slip could just call NEXT if the compiler poked the iterating code and bind into NEXT

[21:00] <pmichaud> there's a difference between "not leave the scope" and "returns to the top of the scope"

[21:00] <masak> it doesn't leave the scope, at least not from the point of view of the user.

[21:01] <pmichaud> because 'next' definitely leaves the scope, as currently defined.

[21:01] <masak> yes.

[21:01] <mauke> slip is just a time warp

[21:01] <pmichaud> so saying that 'next' is 'slip + redo' is very misleading, if neither slip nor redo leave the scope.

[21:01] <TimToady> but NEXT is merely what happens when you do that

[21:01] <masak> pmichaud: that's a really good point.

[21:01] <masak> didn't think about that.

[21:02] <mauke> redo = CR, slip = LF

[21:02] <masak> hehe

[21:02] <pmichaud> what happens to the return value from a slip?  is it skipped?

[21:02] <TimToady> or, arguably, slip is the abstraction of what happens right after NEXT before re-entering the loop

[21:03] <pmichaud> from a performance standpoint, I don't want to be moving the iterator into the NEXT phaser.

[21:03] <TimToady> not suggesting that anymore

[21:03] <TimToady> but slip could be an inlined function

[21:04] <pmichaud> so, slip in a while loop is effectively a no-op?

[21:04] <pmichaud> other than calling the NEXT phaser

[21:04] <TimToady> no, slip tests the condition

[21:04] <TimToady> I think

[21:04] <pmichaud> and exits if false?

[21:04] <pmichaud> weeeeeeird.

[21:04] <mauke> wait, that makes it less useful for parsing continuation lines

[21:05] <TimToady> not really

[21:05] <masak> I had it as reading the next line, or doing whatever other iteration goes with the loop.

[21:05] <pmichaud> wait wait wait wait

[21:05] <pmichaud> you mean:

[21:05] <masak> that is, all the state in the loop is the same, except that you're now "in the next iteration".

[21:05] <pmichaud> for lines() { slip; .say; }    #  should rebind $_ to the 2nd line read?!?

[21:06] <TimToady> I think so

[21:06] <masak> and 4th, and 6th, and 8th...

[21:06] <pmichaud> how exactly does that work if we aren't re-entering the block?

[21:06] <masak> by torturing implementors.

[21:06] <pmichaud> since   for lines() { slip; .say }   is really    for lines() <-> $_ { slip; .say }

[21:06] <TimToady> normal binding has to have already entered the block in some sense, or there's no lexpad

[21:06] <mauke> I propose a 'handwave' primitive

[21:07] <pmichaud> more directly:

[21:07] <masak> pmichaud: I can think of a mechanism that does this, but that mechanism breaks the code down using a CPS transform.

[21:07] <pmichaud> lines().for( -> $x { slip; say $x; } )

[21:07] * TimToady thinks using CPS to goto where I am already is silly :)

[21:07] <masak> pmichaud: that's also what Continuations::Kinda does, by the way.

[21:08] <TimToady> but I'm all in favor of pessimizing slip vs normal code

[21:08] <masak> +1

[21:08] <pmichaud> so, slip has to know what block has been called, and has to re-bind the parameters to the next set of arguments coming from the iterator, all without leaving the scope.

[21:08] <TimToady> otoh, we're still trying to avoid overt requirements for continuations

[21:08] <masak> I think if I get macros and Qtrees where I want, a sufficiently motivated macro programmer would be able to do CPS transforms on Perl 6 code.

[21:09] <masak> so no need for actual continuations.

[21:09] <masak> just arduous code tree rewriting.

[21:09] * lizmat sneaks away to get some sleep before setting up the Perl booth at T-Dose (http://www.t-dose.org)

[21:10] <pmichaud> so, let's start with a more basic question:  is there a way for a Routine to rebind its parameters from a new set of arguments, short of doing a lot of introspection?

[21:11] <pmichaud> or, actually, any Block, not just a Routine

[21:11] * masak doesn't know the answer, but would also like to know :)

[21:11] <pmichaud> reminds me somehow of "callsame", but different.

[21:11] <masak> pmichaud: my intuition is that it sounds a bit "wrong", or counter to the original intent of blocks/lambda calculus.

[21:11] <TimToady> sig ::= args, for some value of sig and args

[21:12] <masak> pmichaud: don't know how strong that objection is/should be, though.

[21:12] <pmichaud> masak: well, that's effectively what 'slip' is saying, I think.

[21:12] <masak> maybe :)

[21:12] <pmichaud> perhaps slip is really a target LABEL

[21:12] *** raiph left
[21:12] <pmichaud> saying "when you do the next iteration, skip forward to this point"

[21:12] <TimToady> .oO(syntax : sugar :: semantics : ratpoison)

[21:13] <pmichaud> but that kind of blows the "continuation line" model out of the water, I think.

[21:13] <masak> pmichaud: in my mental model, it's the start of a new "basic block", in moar's meaning of the word.

[21:13] <masak> pmichaud: so yes, a kind of anonymous label.

[21:13] <dalek> rakudo/nom: 5b716e8 | (Elizabeth Mattijsen)++ | src/core/Array.pm:

[21:13] <dalek> rakudo/nom: Fix .perl for typed arrays

[21:13] <dalek> rakudo/nom: 

[21:13] <dalek> rakudo/nom: This is really fixing a symptom rather than the cause, because the real problem

[21:13] <dalek> rakudo/nom: is that the iterator on the typed array is returning the wrong thing.  Since

[21:13] <dalek> rakudo/nom: this gets me into gimme and reify land, I opted for this solution, so that at

[21:13] <dalek> rakudo/nom: least .perl roundtrips for typed arrays.

[21:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5b716e8d3c

[21:16] <pmichaud> I think I want to see a few code examples using 'slip' first.

[21:16] <masak> I have no idea how we ended up discussing the inclusion of `slip` into Perl 6 this seriously :/

[21:17] <TimToady> what, we were serious?!?

[21:17] <masak> that was not really ever my intent. at least I don't remember it being so :)

[21:17] <pmichaud> well, it got added to S04, which instantly impacts my GLR thinking.  :-/

[21:17] <masak> pmichaud: I'm sorry it got added to S04.

[21:17] <masak> pmichaud: I'll be happy to remove it, if that makes your life easier.

[21:18] <TimToady> well, apparently it's marked conjectural

[21:18] <pmichaud> it only makes my life easier if someone doesn't come back and add it back later :)

[21:18] <masak> I remember at many times wishing I could *add* `slip` through sufficiently flexible Perl 6 extension mechanisms.

[21:18] * masak goes ahead and removes `slip` from S04

[21:18] <masak> I don't want to impact pmichaud's thinking.

[21:19] <pmichaud> at the moment it feels to me like one of those things that feels nice at first blush but really needs real code examples to figure out what it should do and how it should work

[21:19] <masak> *nod*

[21:22] <dalek> specs: 3be145c | masak++ | S04-control.pod:

[21:22] <dalek> specs: Revert addition of 'slip' to S04

[21:22] <dalek> specs: 

[21:22] <dalek> specs: 'slip' may (or may not) be a nice+useful feature, but we're not ready to

[21:22] <dalek> specs: add it to core just now. In GLR we have more pressing concerns.

[21:22] <dalek> specs: 

[21:22] <dalek> specs: This reverts commit 24850d6b665913be797067a5c80e8d3fdfc03c1b.

[21:22] <dalek> specs: This reverts commit e4c5b10b3bed23d270f50208b9e4c621c18dacba.

[21:22] <dalek> specs: review: https://github.com/perl6/specs/commit/3be145ca3e

[21:24] <masak> phew.

[21:25] <TimToady> but it's still in the history, so we're Not Safe

[21:25] <TimToady> :)

[21:25] <PerlJam> cry havoc and let slip ... be reverted

[21:25] <colomon> more pressing concerns++

[21:26] <raydiak> .oO( slippery slope )

[21:26] *** woolfy1 joined
[21:26] <pmichaud> r:  say (1,2,3,Nil,4).flat.perl

[21:26] <camelia> rakudo-{parrot,moar} 315ec6: OUTPUT«(1, 2, 3, 4).list␤»

[21:27] <pmichaud> am I correct in believing that in the current spec Nil should not be removed from that list?

[21:27] *** woolfy left
[21:27] <TimToady> that's what current spec says, but nobody's been able to fix it

[21:27] *** lizmat_ joined
[21:27] <pmichaud> okay, I think I'm going to attempt that first.

[21:27] <pmichaud> (next week)

[21:28] <pmichaud> it feels like a useful ledge, plus we need to figure out how much will break as a result. 

[21:28] <TimToady> maybe we need $Nil and @Nil :)

[21:28] <pmichaud> s/ledge/plateau/   # or some other thing that means "intermediate step"

[21:29] <pmichaud> it seems to me that fixing Nil ought to be something that can be done w/o full GLR

[21:29] *** lizmat left
[21:29] <TimToady> yeah, it seemed that way to several of us before...

[21:29] <pmichaud> and if it can't, then it's vitally important to know why

[21:29] <TimToady> yup

[21:31] <TimToady> at one point I tried putting in an Empty that meant (), and then started changing Nil to Empty where it wanted () semantics, but that broke pretty quick, don't remember where

[21:31] <TimToady> might even have been in niecza

[21:31] <pmichaud> adding an Empty is probably the wrong way to go

[21:31] <TimToady> I just wanted to detangle the concepts, wasn't intending to make Empty visible to the user

[21:32] <TimToady> but a lot of places treat Nil as nominal

[21:32] <TimToady> and () ain't too nomianl

[21:32] <TimToady> *inal

[21:32] <TimToady> again, may be remember niecza here...

[21:32] <pmichaud> well, Nil has had a number of meanings added to it since its original () days

[21:34] <TimToady> and at least in niecza, there were lots of places where the parser relied heavily on Nil meaning ()

[21:35] <TimToady> afair, to be fair

[21:36] *** erkan joined
[21:39] *** immortal left
[21:40] <TimToady> but to be sure, I also tried to fix it in rakudo, and was terribly successful :)

[21:41] <TimToady> but mostly due to lack of familiarity with internals, which doesn't apply in the current situation :)

[21:41] <pmichaud> indeed.  :)

[21:41] <pmichaud> anyway, that'll be my Sunday or Monday activity, I think.

[21:42] *** gamo joined
[21:43] <pmichaud> gotta make sure my name keeps showing up in the release announcement credits.  :)

[21:43] <gamo> Can a sub be passed as a parameter to another sub in perl6? 

[21:43] <TimToady> absolutely

[21:43] <pmichaud> gamo: yes.  

[21:44] <TimToady> we love higher-order programming

[21:44] <gamo> as a reference?

[21:44] <pmichaud> r: my xyz($x) { say $x; };   (1,5,10).map(&xyz)

[21:44] <camelia> rakudo-{parrot,moar} 315ec6: OUTPUT«===SORRY!===␤Type 'xyz' is not declared␤at /tmp/tmpfile:1␤------> my xyz⏏($x) { say $x; };   (1,5,10).map(&xyz)␤Malformed my␤at /tmp/tmpfile:1␤------> my ⏏xyz($x) { say $x; };   (…»

[21:44] <TimToady> everything is a reference, to the first approximation

[21:44] <pmichaud> errr

[21:44] <pmichaud> r: sub xyz($x) { say $x; };   (1,5,10).map(&xyz)

[21:44] <camelia> rakudo-{parrot,moar} 315ec6: OUTPUT«1␤5␤10␤»

[21:45] <pmichaud> or, if you prefer something more perl 5-ish:

[21:45] <pmichaud> r: sub xyz($x) { say $x; };   map  &xyz, 1, 5, 10;

[21:45] <camelia> rakudo-{parrot,moar} 315ec6: OUTPUT«1␤5␤10␤»

[21:45] <FROGGS> m: sub foo($a, $b) {}; say &foo; say &foo.arity

[21:45] <camelia> rakudo-moar 315ec6: OUTPUT«sub foo (Any $a, Any $b) { #`(Sub|67371904) ... }␤2␤»

[21:45] <gamo> It's ok, very good.

[21:46] <TimToady> m: my $xyz = { .say }; (1, 5, 10).map($xyz)

[21:46] <camelia> rakudo-moar 315ec6: OUTPUT«1␤5␤10␤»

[21:46] <TimToady> m: my $xyz = *.say; (1, 5, 10).map($xyz)

[21:46] <camelia> rakudo-moar 315ec6: OUTPUT«1␤5␤10␤»

[21:46] <FROGGS> gamo: every operator in Perl 6 is a subroutine

[21:46] <TimToady> m: say 1, 1, &infix:<+> ... *

[21:46] <camelia> rakudo-moar 315ec6: OUTPUT«1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 70140873…»

[21:46] <FROGGS> (most a multi subs btw)

[21:48] <FROGGS> are*

[21:50] <gamo> ok, and what VM is better: parrot or moar in terms of speed?

[21:50] <TimToady> these days, moar wins

[21:51] <gamo> by a little or...?

[21:51] <TimToady> r: my $start = now; for 1..1000000 {}; say now - $start

[21:51] <camelia> rakudo-parrot 315ec6: OUTPUT«3.03667792␤»

[21:51] <camelia> ..rakudo-moar 315ec6: OUTPUT«0.39324787␤»

[21:52] <TimToady> well, not quite an order of magnitude in that case

[21:52] <TimToady> of course, it depends on what you are doing

[21:53] <gamo> a lot of rand use

[21:53] <TimToady> r: my $start = now; for 1..1000000 { rand }; say now - $start

[21:53] <camelia> rakudo-parrot 315ec6: OUTPUT«3.41162567␤»

[21:53] <camelia> ..rakudo-moar 315ec6: OUTPUT«0.5773421␤»

[21:54] <gamo> ok, I need to recompile, then 

[21:54] *** virtualsue joined
[21:54] *** immortal joined
[21:54] *** immortal left
[21:54] *** immortal joined
[21:54] <gamo> thank you!

[21:55] <TimToady> don't mention it :)

[21:56] *** erkan left
[21:58] * raydiak is mildly surprised that an empty loop iterating over a constant list of constants gets executed at all

[22:01] <TimToady> well, obviously the *intent* is a timing loop, so maybe it's out-smarted you :)

[22:02] *** pierrot left
[22:03] <raydiak> heh, indeed, it does do that more than never :)

[22:03] *** pierrot joined
[22:03] * avuserow .oO( All C++ does is improve C's reputation )

[22:05] *** raiph joined
[22:24] *** sftp_ joined
[22:26] *** sftp left
[22:26] *** sftp_ is now known as sftp

[22:27] *** raiph left
[22:28] <FROGGS> sooo, now panda can create test reports ala https://gist.github.com/FROGGS/5b25776e1ce3f297cb05

[22:28] <FROGGS> who fancies writing a service that receives such reports and displays it nicely?

[22:29] <tadzik> a builtin emmentaler? Nice!

[22:29] <tadzik> I can write a server that gathers these :)

[22:30] <tadzik> but for the displaying part a frontend wizard is necessary

[22:30] <dylanwh> What sort of frontend would be required? How fancy we talkin' here? :)

[22:31] <FROGGS> just something bootstrappy and it will be awesome :o)

[22:31] <tadzik> I've no idea, but my frontend is now going to sleep :)

[22:31] <FROGGS> *g*

[22:31] <FROGGS> gnight tadzik 

[22:32] <dylanwh> I could do something bootsrappy. 

[22:34] *** psch left
[22:35] <FROGGS> would be interesting to see a matrix like in here: http://static.cpantesters.org/distro/S/SDL.html

[22:35] <FROGGS> though, we also have three backends, and I don't know what is more important, operating system or vm

[22:35] <FROGGS> (or both or nothing or a mix or...)

[22:36] <dylanwh> perhaps two different cuts?

[22:36] <FROGGS> probably, yeah

[22:36] <dylanwh> "by VM" and "by OS", whichever one you're on has tabs/etc to the others

[22:36] <dylanwh> that is, on the by VM view, you can switch OS

[22:36] <FROGGS> yeah

[22:37] <FROGGS> "Perl version" might be "rakudo compiler release version" for now

[22:38] <FROGGS> I push my stuff to branches now, perhaps somebody likes to try

[22:38] <FROGGS> though, it only works on moar atm... parrot and jvm need a new op called nqp::closefhi

[22:38] *** erkan joined
[22:38] <dylanwh> I'll see if I can through together a fun prototype over the weekend. Sounds like fun. :)

[22:39] <FROGGS> bootstrap is fun.. at least for me :o)

[22:39] <dylanwh> (and something I can actually contribute to perl6 :-D)

[22:39] <FROGGS> *g*

[22:39] <FROGGS> dylanwh++

[22:40] <raydiak> might also work to have VM & OS lumped together in one series like 'linux/moar', 'win/moar', 'linux/jvm', etc

[22:40] <dylanwh> that may look nicer, a *3 multiplier isn't horrible

[22:40] *** immortal left
[22:41] <raydiak> and well-volunteered, dylanwh++ :)

[22:42] <raydiak> and tadzik++

[22:43] *** erkan left
[22:43] *** sqirrel_ left
[22:43] *** [particle] left
[22:43] *** avuserow left
[22:43] *** ggoebel111111110 left
[22:43] *** japhb left
[22:43] *** gtodd left
[22:43] *** japhb joined
[22:43] *** avuserow joined
[22:43] *** virtualsue left
[22:43] *** sqirrel_ joined
[22:44] *** [particle] joined
[22:45] *** gtodd joined
[22:45] *** erkan joined
[22:47] <dalek> nqp/closefhi: 9f2b16d | (Tobias Leich)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[22:47] <dalek> nqp/closefhi: map nqp::closefhi on moar (parrot and jvm are TODO)

[22:47] <dalek> nqp/closefhi: review: https://github.com/perl6/nqp/commit/9f2b16dc61

[22:48] <dalek> rakudo/closefhi: 3999da8 | (Tobias Leich)++ | src/core/IO/Handle.pm:

[22:48] <dalek> rakudo/closefhi: implement IO::Handle.close-pipe, which returns the exit code

[22:48] <dalek> rakudo/closefhi: review: https://github.com/rakudo/rakudo/commit/3999da8602

[22:48] *** ggoebel111111110 joined
[22:53] <dalek> panda/reporter: 98ea6ec | (Tobias Leich)++ | / (7 files):

[22:53] <dalek> panda/reporter: implement Panda::Reporter, which saves reports to disk for now

[22:53] <dalek> panda/reporter: 

[22:53] <dalek> panda/reporter: This is WIP. It will create a test report file once a dist installation is attempted.

[22:53] <dalek> panda/reporter: See this example of a FAIL: https://gist.github.com/FROGGS/5b25776e1ce3f297cb05

[22:53] <dalek> panda/reporter: Next step is to submit these reports for review to a web service.

[22:53] <dalek> panda/reporter: We also need to ask the user for permission to generate and send these reports.

[22:53] <dalek> panda/reporter: review: https://github.com/tadzik/panda/commit/98ea6ec2da

[22:58] <FROGGS> .tell leont Would it be of any interest for you TAP::Harness that you can now read from a pipe and also get the exit code?

[22:58] <yoleaux> FROGGS: I'll pass your message to leont.

[23:01] <FROGGS> gnight #perl6

[23:01] <raydiak> good night FROGGS 

[23:02] *** rjt_pl joined
[23:07] *** rjt_pl left
[23:09] *** rjt_pl joined
[23:09] *** molaf left
[23:11] *** ajr_ left
[23:15] *** rjt_pl left
[23:17] *** gamo left
[23:32] *** grettis left
[23:36] *** BenGoldberg joined
[23:36] *** grettis joined
[23:44] *** gfldex left
[23:46] *** j4jackj left
[23:46] *** j4jackj joined
[23:50] *** grettis left
[23:52] <timotimo> FROGGS: cpantesters.org is cool, but ... all of the data on a single page

[23:53] <Tekk_> timotimo: that's nice imo

[23:54] <Tekk_> lets you use ctrl+f

[23:54] <Tekk_> all on one page with bookmarks to div is the best way to do it

[23:55] <timotimo> hmm.

[23:55] <timotimo> it's good that the json button and the rss and yaml buttons are right at the top there

[23:56] <timotimo> actually i'd find it interesting to have a little angular app like our profiler pages

[23:56] <timotimo> because you can't just crunch that data in your browser

[23:58] <timotimo> i'd also suggest using actual text instead of little images to have 90 degrees rotated headings for tables :P

