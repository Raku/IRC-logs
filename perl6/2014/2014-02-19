[00:00] <timotimo> <3

[00:00] <timotimo> how's the memory usage?

[00:00] <timotimo> like, maxrss or something?

[00:00] *** hoverboard joined
[00:02] *** denisboyun left
[00:03] <jnthn> supernovus: For tests on JVM, you're mostly paying startup time...

[00:03] <timotimo> most probably

[00:03] <supernovus> jnthn: That's what I was assuming, as 'prove' spawns a separate process for each test.

[00:04] <jnthn> aye

[00:05] <supernovus> Well, I'm certainly impressed with the performance of MoarVM so far. I haven't tested any of my socket/networking libraries yet, or anything using Buf/pack/unpack.

[00:05] <timotimo> do we have pack and unpack on moarvm yet?

[00:06] <jnthn> We've lots more work to do on MoarVM yet... :)

[00:07] <supernovus> Not a clue, I haven't tried it yet, as the FastCGI library is one of the few of mine that uses it, and given how horrifically slow it was the last time I ran it, I stuck with SCGI for any web apps I was building in Perl 6.

[00:08] <timotimo> pack and unpack seem like a prime target to get the specializer really going, no?

[00:09] <timotimo> that was not english.

[00:09] <jnthn> timotimo: Probably not with the way they're written at the moment...

[00:09] <timotimo> the specializer should get a good speed boost out of that; if the pack specification is constant, it *could* be specialized away

[00:10] <jnthn> Well, but the VM has no clue it's a pack/unpack

[00:10] *** eternaleye joined
[00:10] <timotimo> mhh

[00:10] <timotimo> the pypy tracing jit can just do that :P

[00:11] <jnthn> I know they do stuff with formats, yes.

[00:12] <supernovus> Well, I'll test some more of my libraries out on the various backends another day. Have a good * #perl6 :-)

[00:13] *** supernovus left
[00:13] <timotimo> it's not that they "do stuff with formats"

[00:13] <timotimo> it kind of mostly falls out of the tracing jit without much extra stuff

[00:14] <jnthn> Ah, found the article

[00:15] <jnthn> Yes, I see how it can work.

[00:15] <timotimo> oh, i might be proven wrong :)

[00:15] <jnthn> If the string formatter is not opaque to the tracing JIT it can figure out the paths taken.

[00:15] <timotimo> i'm kind of sad we don't get a tracing jit like they have easily, because i'm really, really, really impressed by their stuff

[00:15] <jnthn> Tracing isn't everything.

[00:16] <timotimo> aye, but traces seem to be pretty good for getting turned into super efficient low-level code

[00:17] <timotimo> you obviously have to do good work with the guards and bridges, of course

[00:17] *** masak left
[00:17] *** PerlJam left
[00:17] <jnthn> Yes; if you can't figure out enough to do sensible method JIT then tracing can really come into its own.

[00:17] <timotimo> well, all my knowledge of the tracing jit stuff is from reading what cool stuff they suddenly made faster with hardly any work :P

[00:18] *** masak joined
[00:18] *** PerlJam joined
[00:18] <jnthn> It wouldn't surprise me if Moar ends up doing traces on hot paths also.

[00:18] <timotimo> fair enough

[00:25] * raydiak daydreams about rakudo-lua running Pray under LuaJIT

[00:26] *** eternaleye left
[00:28] *** skids joined
[00:32] *** eternaleye joined
[00:33] *** lizmat joined
[00:35] *** kivutar_ left
[00:38] *** berekuk left
[00:41] *** bjz_ joined
[00:41] *** dmol joined
[00:42] <jnthn> sleep time...should have tuits tomorrow :) 

[00:42] <jnthn> &

[00:42] <raydiak> gnight jnthn 

[00:45] *** bjz left
[00:45] *** cognominal left
[00:47] *** woolfy joined
[00:51] *** dmol left
[00:53] *** cognominal joined
[01:09] *** hoverboard left
[01:10] *** skids left
[01:11] *** pecastro left
[01:15] *** pecastro joined
[01:19] *** skids joined
[01:29] *** cognominal left
[01:29] *** cognominal joined
[01:29] *** fridim_ joined
[01:33] *** hoverboard joined
[01:51] *** bjz_ left
[01:56] * raydiak does not understand why tests which pass with perl6, prove, and panda-test, fail with panda install

[02:01] *** bjz joined
[02:13] *** slavik left
[02:16] *** telex left
[02:18] *** telex joined
[02:20] *** FROGGS left
[02:21] *** Sqirrel_ joined
[02:22] *** Sqirrel left
[02:22] *** hoverboard left
[02:23] *** eternaleye left
[02:28] *** hoverboard joined
[02:28] *** eternaleye joined
[02:34] *** slavik joined
[02:35] *** FROGGS joined
[02:36] *** dayangkun joined
[03:40] *** jnap left
[04:10] *** jnap joined
[04:15] *** jnap left
[04:15] <colomon> raydiak: might be something wrong with serializing the compiled code during the install...

[04:17] <colomon> I know in the (somewhat distant) past I saw situations where ABC could not be precompiled, but would run just fine if the .pms were called directly.

[04:26] *** araujo left
[04:26] *** SamuraiJack__ joined
[04:41] *** rurban left
[04:42] *** SamuraiJack__ left
[04:49] *** fridim_ left
[05:02] *** kaleem joined
[05:11] *** jnap joined
[05:16] *** jnap left
[05:26] *** hypolin joined
[05:26] *** hypolin left
[05:41] *** zby_home_ joined
[05:52] *** BenGoldberg left
[06:08] *** SamuraiJack__ joined
[06:39] *** dmol joined
[06:40] *** dmol left
[07:00] <tadzik> FROGGS: Ooh, it should definitely be absolute

[07:03] <moritz> s/definitely/absolutely/ # :-)

[07:03] <moritz> good morning everybody

[07:04] <tadzik> :)

[07:08] *** hoverboard is now known as moistcherry

[07:20] *** FROGGS left
[07:21] *** moistcherry is now known as hoverboard

[07:25] *** dmol joined
[07:36] *** darutoko joined
[07:40] *** Vlavv left
[07:43] *** dayangkun left
[07:43] *** FROGGS joined
[07:55] *** zby_home_ left
[07:55] *** dayangkun joined
[07:56] *** Vlavv joined
[07:56] *** zakharyas joined
[07:58] <FROGGS> timotimo: about PackFile, I think we'd need to change quite a bit because we are generating pir code in some places in nqp, and my guess is that this will need to go away

[07:59] <FROGGS> (in case it actually is PIR and not PASM)

[08:00] <FROGGS> morning o/

[08:03] *** flussence left
[08:05] *** Mouq joined
[08:05] <Mouq> o/

[08:05] <FROGGS> o/

[08:06] *** flussence joined
[08:07] <dalek> rakudo/pod-code-allow: 0bc8fb7 | Mouq++ | src/Perl6/Grammar.nqp:

[08:07] <dalek> rakudo/pod-code-allow: Separate =code etc. from =comment in grammar

[08:07] <dalek> rakudo/pod-code-allow: review: https://github.com/rakudo/rakudo/commit/0bc8fb7844

[08:07] <dalek> rakudo/pod-code-allow: 39308e5 | Mouq++ | src/Perl6/ (3 files):

[08:07] <dalek> rakudo/pod-code-allow: Mostly working Pod code block refactor

[08:07] <dalek> rakudo/pod-code-allow: review: https://github.com/rakudo/rakudo/commit/39308e5798

[08:10] <Mouq> ^^ this is meant to eventually fix =begin code :allow<X Y Z>

[08:13] *** hoverboard is now known as water

[08:14] <Mouq> Whoa

[08:14] <Mouq> It already fixes it! :D

[08:15] <Mouq> There are just some issues with the grammar that need to be fixed, but the :allow<X Y Z> thing works

[08:16] <Mouq> And then there's some things to be fixed with Pod::To::Text, because it tries to stringify Pod structures in code

[08:20] *** virtualsue joined
[08:23] <moritz> Mouq++ # awesome grammar and pod hacking

[08:24] *** berekuk joined
[08:34] *** pdcawley joined
[08:40] <nwc10> good *, #perl6

[08:41] <FROGGS> hi nwc10++

[08:41] <moritz> \o

[08:42] *** Nei left
[08:43] *** water left
[08:44] *** kaare_ left
[08:54] *** thou left
[08:57] *** berekuk left
[08:59] *** rindolf joined
[09:12] *** erkan joined
[09:22] *** berekuk joined
[09:26] <jnthn> morning, #perl6

[09:26] <moritz> mrnng, jnthn 

[09:28] <JimmyZ> morning, jnthn

[09:31] *** dakkar joined
[09:33] *** bjz left
[09:39] <dalek> rakudo/pod-code-allow: 5accaed | Mouq++ | src/Perl6/Grammar.nqp:

[09:39] <dalek> rakudo/pod-code-allow: $*ALLOW_CODE –> $*ALLOW_INLINE_CODE

[09:39] <dalek> rakudo/pod-code-allow: 

[09:39] <dalek> rakudo/pod-code-allow: $*ALLOW_INLINE_CODE is more descriptive of what it's actually for

[09:39] <dalek> rakudo/pod-code-allow: review: https://github.com/rakudo/rakudo/commit/5accaedffc

[09:39] <dalek> rakudo/pod-code-allow: e2b8379 | Mouq++ | src/Perl6/ (2 files):

[09:39] <dalek> rakudo/pod-code-allow: Save text verbatim when in a code block

[09:39] <dalek> rakudo/pod-code-allow: review: https://github.com/rakudo/rakudo/commit/e2b8379785

[09:39] <tadzik> Mouq++

[09:40] <sergot> o/

[09:40] <tadzik> \o

[09:47] *** bjz joined
[09:48] *** dakkar left
[09:49] *** crab2313_ joined
[09:53] *** dakkar joined
[09:56] *** darutoko- joined
[09:58] *** kaare_ joined
[09:59] *** darutoko left
[10:01] *** berekuk left
[10:04] *** kaleem left
[10:05] *** darutoko joined
[10:05] *** kaleem joined
[10:07] *** darutoko- left
[10:12] *** dakkar left
[10:12] *** kivutar joined
[10:13] *** dakkar joined
[10:16] *** dalek left
[10:17] *** dalek joined
[10:17] *** ChanServ sets mode: +v dalek

[10:34] *** darutoko- joined
[10:36] *** darutoko left
[10:41] *** cognominal left
[10:55] <dalek> rakudo/pod-code-allow: f3b5470 | Mouq++ | src/Perl6/ (2 files):

[10:55] <dalek> rakudo/pod-code-allow: Parse empty lines in a =begin code block

[10:55] <dalek> rakudo/pod-code-allow: review: https://github.com/rakudo/rakudo/commit/f3b5470ada

[10:55] <dalek> rakudo/pod-code-allow: efce067 | Mouq++ | src/Perl6/Actions.nqp:

[10:55] <dalek> rakudo/pod-code-allow: Accept empty code block + unshift recursive stucture

[10:55] <dalek> rakudo/pod-code-allow: 

[10:55] <dalek> rakudo/pod-code-allow: Prior, "=begin code\n=end code" would die. As well, it's more effecient

[10:55] <dalek> rakudo/pod-code-allow: to start with the already made ast and unshift new elements constructing

[10:55] <dalek> rakudo/pod-code-allow: the tail-recursive delimited_code_content

[10:55] <dalek> rakudo/pod-code-allow: review: https://github.com/rakudo/rakudo/commit/efce067d9c

[10:59] <Mouq> Only big issue now that I've noticed (besides having to modify the Pod -> $format code) is that indented =begin code blocks aren't parsed correctly, fairly inexplicably

[11:04] <jnthn> Did anybody have any r-m bugs they especially wanted me to look into before the monthly?

[11:04] *** rurban joined
[11:10] *** rurban left
[11:11] <Mouq> r: grammar Foo {token TOP {$<f>=[a+] \h+ <again($<f>)>}; token again($what = '') {$what}}; say(Foo.parse('aa aa'))

[11:11] <camelia> rakudo-parrot 9025c3, rakudo-jvm 9025c3, rakudo-moar 9025c3: OUTPUT«#<failed match>␤»

[11:11] <Mouq> Yeah

[11:12] <Mouq> Should that work?

[11:12] <jnthn> Mouq: Try a {} before the <again(...)>

[11:12] <Mouq> r: grammar Foo {token TOP {$<f>=[a+] \h+ {} <again($<f>)>}; token again($what = '') {$what}}; say(Foo.parse('aa aa'))

[11:12] <camelia> rakudo-parrot 9025c3, rakudo-jvm 9025c3, rakudo-moar 9025c3: OUTPUT«｢aa aa｣␤ f => ｢aa｣␤ again => ｢aa｣␤␤»

[11:12] <Mouq> ...

[11:12] *** darutoko joined
[11:12] <Mouq> I don't understand

[11:12] <Mouq> But that should fix some issues

[11:12] <jnthn> We generate the Match object $/ on demand.

[11:13] <jnthn> And <rule(args)> is currently not triggering its creation.

[11:13] <jnthn> {} on the other hand does.

[11:14] <Mouq> jnthn: Ok, thank you. This is a bug, though, right?

[11:14] <jnthn> In full-blown Perl 6, yes. In NQP...we get to choose.

[11:14] <Mouq> jnthn++

[11:14] <Mouq> ok

[11:14] *** darutoko- left
[11:15] <jnthn> It's just that if we make it always sync the $/ before <rule(args)> then things like <pblock(1)> would trigger it needlessly

[11:15] <jnthn> Unless we implement more sophisticated analysis.

[11:16] <Mouq> :D it works

[11:16] <jnthn> \o/

[11:17] *** darutoko- joined
[11:21] *** darutoko left
[11:21] *** tgt joined
[11:22] *** darutoko joined
[11:24] <dalek> rakudo/pod-code-allow: 354419d | Mouq++ | src/Perl6/Pod.nqp:

[11:24] <dalek> rakudo/pod-code-allow: Remove unused sub in Perl6/Pod.nqp

[11:24] <dalek> rakudo/pod-code-allow: review: https://github.com/rakudo/rakudo/commit/354419d4e0

[11:24] <dalek> rakudo/pod-code-allow: 24a2945 | Mouq++ | src/Perl6/Grammar.nqp:

[11:24] <dalek> rakudo/pod-code-allow: Make sure $/ is generated before calling Pod rules that need it

[11:24] <dalek> rakudo/pod-code-allow: 

[11:24] <dalek> rakudo/pod-code-allow: Fixes issues with extended configure lines and ending delimiters when

[11:24] <dalek> rakudo/pod-code-allow: these things are indented

[11:24] <dalek> rakudo/pod-code-allow: review: https://github.com/rakudo/rakudo/commit/24a2945cf9

[11:25] *** darutoko- left
[11:28] *** tgt left
[11:29] <dalek> nqp: 321e13b | jnthn++ | tools/build/MOAR_REVISION:

[11:29] <dalek> nqp: Bump to latest MoarVM, for macro -> inline.

[11:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/321e13bd62

[11:30] * Mouq –> school

[11:30] <Mouq> o/

[11:34] *** tgt joined
[11:37] *** crab2313_ left
[11:38] *** Mouq left
[11:38] *** tgt left
[11:44] *** darutoko- joined
[11:48] *** darutoko left
[11:48] *** darutoko joined
[11:49] *** darutoko- left
[11:53] *** darutoko- joined
[11:55] *** kaleem left
[11:55] *** kaleem joined
[11:55] *** darutoko left
[11:56] *** darutoko joined
[11:57] *** virtualsue left
[11:59] *** darutoko- left
[12:02] *** denis_boyun joined
[12:02] *** darutoko- joined
[12:05] *** darutoko left
[12:06] <timotimo> Mouq++ # pod hacking that i've been meaning to do for a looooong time, but never made it

[12:07] <timotimo> also, o/

[12:07] <tadzik> Mouq++ # I like what I see :)

[12:10] <timotimo> jnthn: should i do a full three-backend-spectest-run of my partially implemented lex-to-local code and merge that for the nqp release or should i rather wait until next month when it'll hopefully do the cascading inlining, too?

[12:11] <moritz> timotimo: if you have to ask, it's probably better to wait until after the release

[12:11] <jnthn> timotimo: It may be better to land such a large thing after a release.

[12:12] <timotimo> heh. yeah.

[12:13] <timotimo> i think i'll write a few words about MoarVM in the release guide for nqp

[12:15] *** darutoko joined
[12:15] <timotimo> and i suppose about jvm, too

[12:17] *** darutoko- left
[12:18] *** kivutar left
[12:20] <dalek> nqp: 7fd93b7 | (Timo Paulssen)++ | docs/release_guide.pod:

[12:20] <dalek> nqp: mention MoarVM and JVM in the release guide.

[12:20] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7fd93b78dc

[12:21] <dalek> rakudo/nom: 1a5cb47 | nicholas++ | src/vm/moar/ops/ (2 files):

[12:21] <dalek> rakudo/nom: Pass an MVMCollectable* to MVM_ASSIGN_REF(), without using casts.

[12:21] <dalek> rakudo/nom: 

[12:21] <dalek> rakudo/nom: All derivatives of MVMObject and MVMSTable contain a nested MVMCollectable

[12:21] <dalek> rakudo/nom: struct. By using structure member access, we can get a pointer to it without

[12:21] <dalek> rakudo/nom: using a cast. This encourages type safety, and reduces the number of casts

[12:21] <dalek> rakudo/nom: and hence places that might conceal strict aliasing violations.

[12:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1a5cb47fb8

[12:21] <dalek> rakudo/nom: 9660042 | jnthn++ | tools/build/NQP_REVISION:

[12:21] <dalek> rakudo/nom: Get latest NQP, for Moar bump/NativeCall bits.

[12:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/96600423f4

[12:22] <dalek> rakudo/nom: 23ecfa4 | jnthn++ | tools/build/ (2 files):

[12:22] <dalek> rakudo/nom: Add debugger build for JVM backend.

[12:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/23ecfa4ea4

[12:25] *** darutoko- joined
[12:27] *** woolfy1 joined
[12:27] *** woolfy left
[12:28] *** lizmat_ joined
[12:28] *** darutoko left
[12:29] <dalek> rakudo/nom: 3bbd8fd | jnthn++ | tools/build/Makefile-JVM.in:

[12:29] <dalek> rakudo/nom: Correct a debugger dependency in Makefile.

[12:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3bbd8fd95f

[12:29] <dalek> rakudo/nom: 500e609 | jnthn++ | src/Perl6/Actions.nqp:

[12:29] <dalek> rakudo/nom: Make for compilation robust to debug hook addition

[12:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/500e6093d7

[12:29] *** darutoko- left
[12:30] *** lizmat left
[12:31] *** darutoko- joined
[12:33] <dalek> rakudo/nom: 8c22767 | (Tobias Leich)++ | docs/ChangeLog:

[12:33] <dalek> rakudo/nom: add note about IO::Path.ACCEPTS

[12:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8c22767ae9

[12:33] *** woolfy joined
[12:33] <moritz> Makefile:726: warning: overriding commands for target `perl6-debug-m'

[12:33] <moritz> Makefile:366: warning: ignoring old commands for target `perl6-debug-m'

[12:33] *** lizmat joined
[12:34] <jnthn> wtf

[12:34] *** woolfy1 left
[12:34] <moritz> tools/build/Makefile-JVM.in:J_DEBUG_RUNNER = perl6-debug-m@runner_suffix@

[12:34] <moritz> should be -j

[12:34] *** lizmat_ left
[12:34] <timotimo> do we also build the debug runner for parrot?

[12:34] <jnthn> oh...

[12:35] <jnthn> timotimo: No, I'm half way through writing that patch.

[12:35] <timotimo> good :)

[12:35] * timotimo is reviewing changes done to spice up the changelog

[12:35] <jnthn> :)

[12:36] <jnthn> I did a ChangeLog for Moar this month and it's quite long :)

[12:36] *** lizmat left
[12:36] <timotimo> saw it :)

[12:36] *** lizmat joined
[12:36] <timotimo> i think i'll not write moar-related changes into the rakudo changelog until that whole situation has calmed down a bit

[12:37] <jnthn> Well, I think we could have a line in there along the lines of "Many improvements to Rakudo on MoarVM, including sockets support" or so.

[12:37] <dalek> rakudo/nom: d1610ac | moritz++ | tools/build/Makefile-JVM.in:

[12:37] <dalek> rakudo/nom: [build] fix copy&paste-o

[12:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d1610ac2c8

[12:37] <jnthn> And any others that seem noteworthy

[12:38] <jnthn> moritz: oh, that's why my push failed...

[12:38] <moritz> jnthn: sorry :-)

[12:39] <timotimo> yes, but only one entry :D

[12:41] <jnthn> timotimo: no, moar! :P

[12:42] <jnthn> .oO( <timotimo> no, no moar! )

[12:43] *** mtk left
[12:44] *** colomon left
[12:46] *** mtk joined
[12:47] *** mtk left
[12:50] *** Sqirrel_ left
[12:51] *** fhelmberger joined
[12:51] *** fhelmberger left
[12:52] *** fhelmberger joined
[12:55] *** skids left
[12:57] *** jnap joined
[13:00] *** mtk joined
[13:03] *** kaleem_ joined
[13:04] <dalek> rakudo/nom: b23cbc6 | jnthn++ | tools/build/Makefile-JVM.in:

[13:04] <dalek> rakudo/nom: Fix JVM make install on Windows.

[13:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b23cbc6e1f

[13:04] <dalek> rakudo/nom: 1f690c7 | jnthn++ | tools/build/Makefile-Parrot.in:

[13:04] <dalek> rakudo/nom: Build debugger on Parrot also.

[13:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1f690c75f3

[13:04] <dalek> rakudo/nom: f30f805 | jnthn++ | .gitignore:

[13:04] <dalek> rakudo/nom: Update .gitignore for debugger build additions.

[13:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f30f805993

[13:04] * timotimo notes that in the changelog

[13:06] *** kaleem left
[13:06] <timotimo> "allow definition of custom postcircumfixes" warrants a changelog entry also, don't you think?

[13:07] <jnthn> I've tagged 2014.01 in rakudo-debugger for the "worked with that release" version

[13:07] <jnthn> Going to remove the Build.pm since it's now never needed/wanted against HEAD

[13:08] <timotimo> sounds good

[13:09] <dalek> rakudo/nom: fafd39e | (Timo Paulssen)++ | docs/ChangeLog:

[13:09] <dalek> rakudo/nom: add a bunch more changelog entries

[13:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fafd39edf0

[13:10] <jnthn> http://wiki.perl6.org/Create%20and%20Distribute%20Modules currently doesn't say anything about "provides"

[13:10] <jnthn> Shuld it?

[13:11] <timotimo> i suppose so

[13:13] <dalek> rakudo-debugger: 7082cb8 | jnthn++ | META.info:

[13:13] <dalek> rakudo-debugger: Add "provides" to META.info.

[13:13] <dalek> rakudo-debugger: review: https://github.com/jnthn/rakudo-debugger/commit/7082cb8243

[13:13] <dalek> rakudo-debugger: c27659f | jnthn++ | / (2 files):

[13:13] <dalek> rakudo-debugger: perl6-debug now in Rakudo; remove it from here.

[13:14] <dalek> rakudo-debugger: 

[13:14] <dalek> rakudo-debugger: This module is now just a command-line front end, meaning it needs no

[13:14] <dalek> rakudo-debugger: Build.pm either, and should install/work with Parrot, JVM and Moar.

[13:14] <dalek> rakudo-debugger: review: https://github.com/jnthn/rakudo-debugger/commit/c27659f23a

[13:14] <timotimo> so ... i forgot again ... parrot on moar works how well now?

[13:14] <dalek> rakudo-debugger: 7fe0967 | jnthn++ | META.info:

[13:14] <dalek> rakudo-debugger: Tweak module name to reflect what it is now.

[13:14] <dalek> rakudo-debugger: review: https://github.com/jnthn/rakudo-debugger/commit/7fe09673f3

[13:14] <timotimo> ... panda on moar*

[13:18] *** SamuraiJack joined
[13:19] *** SamuraiJack__ left
[13:21] * jnthn tries it on Windows

[13:21] <jnthn> Hopefully perl6-m bootstrap.pl dos it...

[13:22] <jnthn> *does

[13:22] <jnthn> ==> Bootstrapping Panda

[13:22] <jnthn> ==> Fetching File::Find

[13:22] <jnthn> ===SORRY!===

[13:22] <jnthn> Start of substr out of range. Is: 40, should be in 0..38

[13:22] <jnthn> :(

[13:23] <timotimo> oh, oops

[13:23] <timotimo> hm. i just tried translating S26-documentation with latest perl6 and the allowed formatting codes don't work there yet; maybe support is still missing from ::To::HTML?

[13:24] *** rurban joined
[13:26] <timotimo> oh, that's because it's in a branch %)

[13:26] <dalek> rakudo/nom: 7f4e733 | (Timo Paulssen)++ | lib/Pod/To/Text.pm:

[13:26] <dalek> rakudo/nom: eval -> EVAL in Pod::To::Text

[13:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7f4e7332db

[13:28] *** daniel-s_ joined
[13:29] *** benabik left
[13:29] *** tgt joined
[13:32] *** ajr joined
[13:32] *** kbaker joined
[13:32] *** ajr is now known as Guest70241

[13:33] *** Guest70241 is now known as ajr_

[13:40] *** ggoebel1117 joined
[13:40] <timotimo> there's still something quite b0rked regarding :allow in code blocks

[13:41] <timotimo> "=begin R<BLOCK_TYPE> R<OPTIONAL CONFIG INFO>" renders out as "OPTIONAL CONFIG INFO  BLOCK_TYPE    =begin"

[13:42] <dalek> rakudo/nom: ecdb527 | (Timo Paulssen)++ | src/Perl6/Compiler.nqp:

[13:42] <dalek> rakudo/nom: document --doc flag in usage

[13:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ecdb527f49

[13:42] <dalek> rakudo/nom: ebd80a1 | (Timo Paulssen)++ | docs/ChangeLog:

[13:42] <dalek> rakudo/nom: :allow wasn't actually merged into nom yet

[13:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ebd80a124c

[13:42] *** ggoebel1116 left
[13:44] <dalek> rakudo/nom: 0d367e2 | (Timo Paulssen)++ | docs/ChangeLog:

[13:44] <dalek> rakudo/nom: wording tweaks

[13:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0d367e28c3

[13:45] <jnthn> huh...somehow my make spectest on Moar has suddenly got slower...

[13:47] <FROGGS> uhh

[13:47] <moritz> jnthn: are you using 6 cores again? :-)

[13:47] <tadzik> only 6? :P

[13:47] <FROGGS> jnthn: the IO-Socket-INET should not have a huge impact...

[13:48] <timotimo> Perl6 cores? :)

[13:48] <jnthn> moritz: No, still set to 8

[13:48] <jnthn> No, I mean slower compared to earlier today

[13:48] <FROGGS> ohh

[13:48] <tadzik> CORE.setting, RESTRICTED.setting, FORGOTTENREALMS.setting...

[13:48] <FROGGS> is there a process dangling around?

[13:49] <FROGGS> I think I had to kill a server+client from that said test once that was still there after hours

[13:49] <jnthn> FROGGS: Doesn't seem like it

[13:50] <jnthn> Hmm. Startup seems longer.

[13:51] <dalek> rakudo/nom: 1d2c436 | (Timo Paulssen)++ | docs/ChangeLog:

[13:51] <dalek> rakudo/nom: typo, dedup, merge, ...

[13:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1d2c436a50

[13:51] <jnthn> oh...

[13:52] *** daniel-s_ left
[13:52] <jnthn> Yeah. I turned on the ConEmu thingy that injects an extra DLL into every process that re-writes ANSI escape codes

[13:53] <jnthn> Which adds a rather noticable amount to eveyr process start.

[13:57] <timotimo> bleeeeeh, i can't reproduce the spectest results from moritz easily, i still get the "no subtests run" thing after a while

[13:58] <jnthn> timotimo: How many test jobs are you using?

[13:58] <timotimo> 4

[13:59] <jnthn> Sometimes reducing that helps, if the problem is it's hitting the RAM limit

[14:00] <timotimo> mhh

[14:06] <timotimo> i still get occasional "no subtests run" even with only 1 test job

[14:07] *** rurban left
[14:08] *** dalek left
[14:09] *** dalek joined
[14:09] *** ChanServ sets mode: +v dalek

[14:11] *** johnmilton joined
[14:15] *** colomon joined
[14:16] *** jnap left
[14:16] <timotimo> moritz: i could not reproduce any fail in perl.rakudo.jvm

[14:17] <timotimo> and the roll.t fail is a pass on my machine as well

[14:18] <timotimo> the exceptions/misc.rakudo.jvm and tc.rakudo.jvm failures seem legit, though

[14:21] *** jnap joined
[14:21] *** tgt left
[14:24] *** thou joined
[14:24] *** rurban joined
[14:26] *** skids joined
[14:31] *** virtualsue joined
[14:36] *** tgt joined
[14:36] *** kaleem_ left
[14:37] *** kaleem joined
[14:38] *** Alula left
[14:41] *** zakharyas left
[14:42] *** zakharyas joined
[14:47] *** btyler joined
[14:48] *** myfree joined
[14:48] *** virtualsue left
[14:49] *** myfree left
[14:50] *** Alula joined
[14:54] *** kaleem left
[15:05] *** xinming_ joined
[15:05] *** kaare_ left
[15:07] *** SamuraiJack left
[15:09] *** xinming left
[15:09] *** crab2313 left
[15:13] *** tgt left
[15:16] *** Vlavv left
[15:18] *** salv0 left
[15:20] *** benabik joined
[15:21] *** tgt joined
[15:21] *** sivoais left
[15:23] *** sivoais joined
[15:29] *** araujo joined
[15:36] *** tgt left
[15:37] *** kurahaupo_mobile joined
[15:37] *** tgt joined
[15:58] *** kivutar joined
[15:59] *** Psyche^ joined
[16:03] *** Psyche^_ left
[16:03] *** tgt left
[16:06] *** kbaker left
[16:07] <btyler> hi all. I've been using vim-perl for my perl 6 highlighting needs -- it does a great job with syntax coloring, but it is really sluggish - I get noticable lag when moving around the text, and it makes editing a bit of a pain. do most just write p6 sans syntax highlighting?

[16:08] *** tgt joined
[16:09] *** kbaker joined
[16:12] <FROGGS> btyler: I use SciTE with P5 highlighting

[16:12] <FROGGS> and SciTE is always astonishing fast

[16:15] *** ronaldo joined
[16:16] *** ronaldo left
[16:16] *** denis_boyun left
[16:17] *** kurahaupo_mobile left
[16:18] *** kurahaupo_mobile joined
[16:19] <btyler> hm, maybe just forcing p5 highlighting would be good enough. thanks FROGGS

[16:20] *** hoverboard joined
[16:21] *** tgt left
[16:22] <dalek> nqp/moar-conc: 58e1b65 | jnthn++ | src/vm/jvm/ (8 files):

[16:22] <dalek> nqp/moar-conc: Add VMThread REPR and thread-related nqp:: ops.

[16:22] <dalek> nqp/moar-conc: review: https://github.com/perl6/nqp/commit/58e1b6596b

[16:25] <dalek> rakudo/moar-conc: 2097d53 | jnthn++ | / (11 files):

[16:25] <dalek> rakudo/moar-conc: Move non-JVM-specific conc code out of src/vm/jvm.

[16:25] <dalek> rakudo/moar-conc: 

[16:25] <dalek> rakudo/moar-conc: This makes it clearer what bits are JVM-specific and need abstracting

[16:25] <dalek> rakudo/moar-conc: or porting.

[16:25] <dalek> rakudo/moar-conc: review: https://github.com/rakudo/rakudo/commit/2097d533f7

[16:25] <dalek> rakudo/moar-conc: 9a717ab | jnthn++ | src/vm/jvm/core/Thread.pm:

[16:25] <dalek> rakudo/moar-conc: Re-work Thread class using new nqp::ops.

[16:25] <dalek> rakudo/moar-conc: review: https://github.com/rakudo/rakudo/commit/9a717ab786

[16:25] <dalek> rakudo/moar-conc: a2204bc | jnthn++ | / (3 files):

[16:25] <dalek> rakudo/moar-conc: Move Thread.pm to src/core, now it uses nqp:: ops.

[16:25] <dalek> rakudo/moar-conc: review: https://github.com/rakudo/rakudo/commit/a2204bcdae

[16:27] *** telex left
[16:30] *** telex joined
[16:32] <timotimo> \o/

[16:32] *** tgt joined
[16:34] <FROGGS> ohh!

[16:35] <FROGGS> awesome times these are :o)

[16:36] <jnthn> Well, abstracting what already works on JVM is the easy part :P

[16:38] <jnthn> I'm hoping if I start on it now, though, then we'll be able to mostly pass S17-concurrency/ in r-m by the March release.

[16:43] *** kurahaupo_mobile left
[16:43] *** kurahaupo_mobile joined
[16:44] *** molaf joined
[16:49] *** zakharyas left
[16:50] *** fhelmberger left
[17:03] *** rindolf left
[17:07] *** treehug88 joined
[17:11] *** sqirrel joined
[17:11] *** tgt left
[17:11] *** tgt joined
[17:12] <colomon> btyler: I use p5 highlighting for p6 too, but honestly it is frequently terrible looking

[17:15] *** FROGGS left
[17:15] *** sqirrel left
[17:16] *** tgt left
[17:20] *** kurahaupo_mobile left
[17:20] *** kurahaupo_mobile joined
[17:21] *** Rotwang joined
[17:23] *** rurban left
[17:24] *** isBEKaml joined
[17:24] <timotimo> Byays

[17:24] <nwc10> Easter is the new Christmas?

[17:26] <isBEKaml> btyler: If you're using vim-perl for p6 highlighting, turn off ft detection. Just use syntax highlighting. 

[17:27] *** zby_home joined
[17:27] *** hoverboard is now known as gotpower

[17:28] *** ajr_ left
[17:28] *** gotpower is now known as hoverboard

[17:29] *** kurahaupo_mobile left
[17:29] *** [Sno]_ joined
[17:29] *** kurahaupo_mobile joined
[17:29] *** hoverboard is now known as gotpower

[17:29] *** gotpower is now known as hoverboard

[17:30] *** [Sno] left
[17:30] *** [Sno]_ is now known as [Sno]

[17:31] *** kurahaupo_mobile left
[17:32] *** kurahaupo_mobile joined
[17:32] *** rindolf joined
[17:37] *** virtualsue joined
[17:37] *** kurahaupo_mobile left
[17:37] *** mtk left
[17:38] *** kurahaupo_mobile joined
[17:38] *** mtk joined
[17:42] * timotimo uses the perl6 syntax highlighting and knows what btyler is talking about

[17:45] *** denis_boyun joined
[17:45] *** Rotwang left
[17:48] *** Rotwang joined
[17:52] *** Vlavv joined
[17:53] *** kurahaupo_mobile left
[17:55] *** SamuraiJack joined
[17:56] *** rurban joined
[17:59] *** treehug88 left
[18:00] *** hoverboard is now known as moistcherry

[18:00] *** moistcherry is now known as hoverboard

[18:01] *** treehug88 joined
[18:02] *** rurban left
[18:02] *** dakkar left
[18:08] *** tgt joined
[18:09] <TimToady> jnthn: arguably, using {} to force $/ is going to backfire in all those places where we're merely using it to stop LTM

[18:09] <jnthn> TimToady: Well, it already does force it today

[18:10] <jnthn> TimToady: I agree it should optimize that away in the end.

[18:10] <jnthn> TimToady: By which point we need to either have done a fix for <foo($<bar>)> or found a different way to cheat... :)

[18:13] *** tgt left
[18:15] <dalek> nqp/moar-conc: 469bf84 | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[18:15] <dalek> nqp/moar-conc: Map thread related ops for MoarVM.

[18:15] <dalek> nqp/moar-conc: review: https://github.com/perl6/nqp/commit/469bf8416e

[18:16] <dalek> rakudo/moar-conc: f38d5ba | jnthn++ | tools/build/Makefile-Moar.in:

[18:16] <dalek> rakudo/moar-conc: Add Thread.pm to MoarVM build.

[18:16] <dalek> rakudo/moar-conc: 

[18:16] <dalek> rakudo/moar-conc: No, don't expect it to work yet.

[18:16] <dalek> rakudo/moar-conc: review: https://github.com/rakudo/rakudo/commit/f38d5ba170

[18:17] *** ajr joined
[18:18] *** ajr is now known as Guest74068

[18:18] *** hoverboard is now known as water

[18:18] *** Guest74068 is now known as ajr_

[18:21] <TimToady> jnthn: the way STD cheats is by pulling $<foo> straight out of the cursor

[18:22] <TimToady> it does go as far as to do 'my $M = $C;' to officially put the cursor into $/, but simply ignores the fact that there's extra stuff in $/ related to $¢

[18:23] <masak> evening, #perl6

[18:23] <jnthn> TimToady: That feels...hacky :)

[18:23] <TimToady> so {} really does translate to a P5 'do {}'

[18:25] <jnthn> Finding dinner &

[18:25] <TimToady> and I think the codegen knows whether a $M is needed, so it differentiages <foo($x)> from <foo($<x>)>

[18:25] <TimToady> *ates

[18:34] *** water is now known as hoverboard

[18:52] *** FROGGS joined
[18:53] *** isBEKaml left
[18:56] <timotimo> would xterm-256color support go into Term::ANSIColor? Term::ANSIColor::256?

[18:57] <TimToady> I'd think only if it were an ANSI standard...

[18:58] <timotimo> okay. Term::256Color then?

[18:58] <timotimo> and would 24bit color get its own module as well?

[18:58] <timotimo> Term::ExtendedColors perhaps

[18:58] <FROGGS> Term::Color? that hides the actual terminal used?

[18:59] *** rurban joined
[18:59] <timotimo> you mean it would do things like probe for 256color support and 24bit color support and then do approximation if needed?

[18:59] <FROGGS> I'd make it Term::Color::XTerm256

[18:59] <FROGGS> yes

[19:00] <timotimo> mhm

[19:00] <FROGGS> and if you are on a terminal without coloring support it should just print the text

[19:00] <timotimo> and then Term::Color::ANSI as an alias for Term::ANSIColor?

[19:00] <FROGGS> so the "end user" does not have to care about the terminal at all

[19:00] <FROGGS> as one of the backends, yes

[19:01] <timotimo> what exactly is the interface supposed to look like then? just give it rgb color triplets and it tries to do its best?

[19:01] <FROGGS> I mean, Term::Color could do some diagnostics and pass these information to the user's script

[19:02] <FROGGS> so you can ask Term::Color for coloring support and the actual palette if available

[19:02] <FROGGS> rgb triplets, color names, palette indexes

[19:03] <timotimo> okay. this is about colors; would these modules also handle underline/blink/reverse video/...?

[19:03] <FROGGS> hmmmm, dunno

[19:03] <FROGGS> I think I would let it do one thing only

[19:04] *** rurban left
[19:06] <jnthn> There's also Term::WindowsColor that we maybe want at some point

[19:09] <timotimo> yeah, sure

[19:09] <timotimo> because ConEmu is not so nice

[19:10] *** tgt joined
[19:10] *** Sqirrel joined
[19:11] <jnthn> No, emus are already bad enough when they aren't trying to con you...

[19:11] <timotimo> aye!

[19:13] <jnthn> nom ready...bbiab

[19:14] *** rindolf left
[19:15] *** tgt left
[19:17] *** telex left
[19:18] *** telex joined
[19:19] *** darutoko- left
[19:23] *** SamuraiJack left
[19:28] * [Coke] wonders if anyone else is excited for Guardians of the Galaxy this summer. :)

[19:28] <dalek> rakudo-star-daily: 7ac6940 | coke++ | log/ (5 files):

[19:28] <dalek> rakudo-star-daily: today (automated commit)

[19:28] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/7ac694023b

[19:28] <benabik> [Coke]: Saw the trailer today.  It definitely looks like something...

[19:28] <dalek> perl6-roast-data: f189a44 | coke++ | / (6 files):

[19:28] <dalek> perl6-roast-data: today (automated commit)

[19:28] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/f189a44769

[19:29] <[Coke]> rakudo.parrot has the fewest failing tests today with 1.

[19:30] <[Coke]> star is clean, no failures or deprecations.

[19:30] *** vendethiel left
[19:30] <benabik> \o/

[19:31] <moritz> \o/

[19:32] <[Coke]> ^^ s/today/yesterday/

[19:32] <[Coke]> today is still running.

[19:32] <[Coke]> planeteria updates are through.

[19:32] *** kbaker left
[19:32] <[Coke]> parrot 6.1.0 out.

[19:33] *** kbaker joined
[19:36] * colomon is cautiously optimistic about Guardians of the Galaxy.

[19:40] <[Coke]> did you see the trailer?

[19:44] *** logie__ left
[19:45] *** logie joined
[19:47] *** logie left
[19:48] <rurban_> I'm now working to update the nqp new-packfile-api branch (for newer parrots)

[19:49] *** berekuk joined
[20:00] *** rurban joined
[20:00] <rurban_> Oh, I missed patrick's better pm-packfile-api branch on nqp. Trying that now

[20:03] *** benabik left
[20:05] *** virtualsue left
[20:06] *** rurban left
[20:11] *** tgt joined
[20:14] <timotimo> rurban_: thank you! if you get it to work, ping me a quick message and i'll see to it that it can get into tomorrow's rakudo release

[20:15] *** tgt left
[20:15] <rurban_> timotimo: there are some merge conflicts I don't really understand yet. Should be easier for a nqp guy

[20:16] <timotimo> i'll have a look

[20:17] <FROGGS> I don't we can release it even if it does work...

[20:18] <timotimo> the only merge conflicts seem to be the stage0 files

[20:18] <FROGGS> as I understand it the perl6 binary will support --target=pbc but not --target=pir afterwards

[20:18] <timotimo> oh

[20:18] <timotimo> so that will change the way we stage0 on parrot

[20:19] <FROGGS> I mean, I can be totally off

[20:19] <rurban_> No, both should be possible

[20:19] *** arnsholt joined
[20:19] <arnsholt> o/

[20:20] <rurban_> method is_precomp_stage($stage) {

[20:20] <rurban_>         $stage eq 'pir' || $stage eq 'pbc'

[20:20] <rurban_>     }

[20:20] <rurban_> so you can still dump to pir

[20:23] <FROGGS> that sounds very good

[20:23] <FROGGS> hi arnsholt 

[20:27] <masak> arnsholt: \o

[20:35] *** flussence left
[20:37] *** flussence joined
[20:50] <rurban_> I was wrong. nqp-p already works with latest parrot. I did a fresh reinstall. pmichaud already merged pm-packfile-api 4 months ago

[20:51] *** ggoebel1117 left
[20:54] <timotimo> oh!

[21:03] *** flussence left
[21:03] *** rurban joined
[21:06] *** flussence joined
[21:08] * [Coke] yawns.

[21:08] <dalek> perl6-roast-data: 250b4eb | coke++ | / (3 files):

[21:08] <dalek> perl6-roast-data: today (automated commit)

[21:08] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/250b4eb13f

[21:08] *** Mouq joined
[21:08] *** tgt joined
[21:08] <lue> is :nested(integer) roughly equivalent to =over integer ?

[21:10] <[Coke]> rurban++

[21:10] <Mouq> lue: I don't think so.. but I'm not sure

[21:10] <Mouq> also o/

[21:10] <lue> \o

[21:11] <Mouq> actually

[21:11] <Mouq> I think it is

[21:11] <lue> Seems like it to me, just wanted to be sure :)

[21:12] <Mouq> lue: Looks like it's defined to be a more general nesting than =over, but I think if you implement it the same it should be fine

[21:13] <Mouq> lue: Though if this is for the translator, =item already implies nesting in Pod

[21:13] <Mouq> *6

[21:13] <lue> I just want something to replace =over with, and the only other choice is getting rid of indentation altogether.

[21:13] <Mouq> And that's the primary thing I've seen =over used with

[21:13] *** tgt left
[21:13] <lue> =over isn't just for item lists though, which is the issue.

[21:14] <Mouq> lue: Yeah, I'd just do it and see how it looks :)

[21:16] *** flussence left
[21:16] *** kaare_ joined
[21:16] *** xenoterracide left
[21:16] <lue> Right now my converter just rewriting a few directives as seen fit. It'll be a while before it can do fancy stuff like replacing =over/=item/=back with =item1, and nested lists, and...

[21:17] <lue> *converter is just

[21:17] <Mouq> Well, lue++ anyhow :)

[21:17] *** flussence joined
[21:17] <lue> ooh, I just imagined a nasty corner case with POD5  =item * # is for comments

[21:18] *** cognominal joined
[21:18] <lue> *facepalm* guess what I just spotted in S26? "To specify an unnumbered list item that starts with a literal #, either make the octothorpe verbatim:"

[21:19] *** xenoterracide joined
[21:21] *** airdisa joined
[21:23] *** flussence left
[21:25] *** flussence joined
[21:26] *** thou left
[21:27] *** thou joined
[21:33] *** tgt joined
[21:33] *** airdisa left
[21:34] <timotimo> Mouq: did you see what happens with allowed formatting codes in code blocks?

[21:36] *** rurban left
[21:36] <Mouq> timotimo: What do you mean?

[21:36] <Mouq> Pod::To::HTML works fine with it btw

[21:36] <Mouq> gimme a sec to finish a commit and I'll push; it's 99% finished

[21:37] <Mouq> s/sec/few minutes/ :P

[21:37] <Mouq> timotimo: I've been testing my changes on S26 actually, and the examples are much nicer when bits of the code are bolded etc.

[21:37] <lue> I can't wait, S26 should look much improved :) (it uses :allow I<a lot>)

[21:38] *** beastd joined
[21:39] <Mouq> I don't think those tables at the end that have all the C<>s around everything work... I'll have to look into that

[21:39] <lue> timotimo: remember when we were talking about if implicit code blocks should be indented and such? According to S26, code blocks are nested (usually represented as indentation) by default.

[21:40] <lue> Mouq: if they're actually =table tables, then they don't need :allow, each cell should be as a nested =para

[21:43] <Mouq> lue: I know, I don't know what the problem is...

[21:43] <Mouq> I'll look at it in a bit

[21:43] *** zby_home left
[21:45] <Mouq> Does anyone know if there's a less verbose way in NQP to say "return $bool ?? sub-routine('arg', :named, :sometimes) !! sub-routine('arg', :named)"

[21:47] <lue> Mouq:  :sometimes($bool) ?

[21:48] <timotimo> lue: i remember that and i forgot why i didn't go ahead and implement my changes

[21:48] <timotimo> Mouq: ah, so you made changes to Pod::To::HTML?

[21:50] <Mouq> * "return $bool ?? sub-routine('arg', :named($thing), :sometimes($other_thing)) !! sub-routine('arg', :named($thing))"

[21:50] <Mouq> timotimo: Nope

[21:50] <Mouq> timotimo: I needed to fix Pod::To::Text, but Pod::To::HTML just works :)

[21:51] <lue> Run this script on a synopsis (I tried S03), and tell me if you see any problems: https://github.com/lue/pod_vvi

[21:52] *** dmol left
[21:56] <lue> This is the error I get trying to run that: https://gist.github.com/lue/9102506

[21:57] <PerlJam> lue: run it through the debugger?

[21:57] <lue> looks like a low-level error, but I can tr.. wait, I don't think perl6-debug-m will work

[21:58] <lue> Nope, stupid IO segfaults

[22:02] <jnthn> IO segfaults?

[22:03] <lue> Yeah, I and someone else (can't remember who) run into issues with perl6-debug-m when IO (like open()) is involved, or so it seems.

[22:03] <lue> Don't have another backend's debugger to see if it's Moar specific or not.

[22:03] <jnthn> Dunno. I fixed a debugger issue today that caused issues with for loops...

[22:03] <btyler> lue: yep, that was me. I meant to rakudobug it but didn't get to it yesterday

[22:04] <lue> jnthn: http://irclog.perlgeek.de/perl6/2014-02-17#i_8299165

[22:05] <btyler> I'll rebuild moar & company and see if its still happening

[22:06] <Mouq> :/ I'm having a harder time removing this feature than I would adding it. I'm just going to revert the work on it and push. It's a little off topic to the branch I guess

[22:07] <jnthn> I just tried "my $f = open('README'); for $f.lines -> $l { say $l; }" with perl6-debug-m and it worked out ok

[22:07] <jnthn> lemme try the exact one

[22:08] *** tgt left
[22:08] <jnthn> btyler: I just tried it now and it worked out for me.

[22:09] <btyler> jnthn: great! I'm rebuilding nqp and will try as soon as that finishes

[22:09] <jnthn> btyler: I did fix a bug with for today. I didn't get a SEGV, but I did not a nasty error on JVM, which is where I discovered it

[22:09] <jnthn> The bug was independent of any particular backend.

[22:10] *** Aytan joined
[22:10] <Aytan> Hello everyone. Can anyone help me with a "simple" @ARGV question, please?

[22:12] <masak> Aytan: sure. it's not @ARGV, it's @*ARGS

[22:12] <masak> next!

[22:13] * masak grins

[22:13] <Aytan> perl API-CloudSearch.pl drilling, in my code I need to use the "drilling" as a variable. So, I use @ARGV[0]. But the results are VAR1 = "drilling", how do I get just the value and save it to a string variable?

[22:13] <masak> Aytan: you might want to try a Perl 5 channel.

[22:13] <geekosaur> or are you asking a perl5 question? that'd be #perl

[22:13] <masak> Aytan: this is #perl6.

[22:13] <Aytan> Oh ok. Sorry about that.

[22:13] <masak> no problem. easy mistake to make.

[22:14] * masak .oO( the languages are, like, right next to each other )

[22:19] *** Aytan left
[22:20] <dalek> rakudo/pod-code-allow: e08bdbb | Mouq++ | src/Perl6/Actions.nqp:

[22:20] <dalek> rakudo/pod-code-allow: Fix delimited_code for multiple lines + simplify

[22:20] <dalek> rakudo/pod-code-allow: review: https://github.com/rakudo/rakudo/commit/e08bdbb0fe

[22:20] <dalek> rakudo/pod-code-allow: 1217268 | Mouq++ | lib/Pod/To/Text.pm:

[22:20] <dalek> rakudo/pod-code-allow: Update Pod::To:Text to handle formatted code blocks

[22:20] <dalek> rakudo/pod-code-allow: review: https://github.com/rakudo/rakudo/commit/1217268f63

[22:20] <dalek> rakudo/pod-code-allow: 91334ce | Mouq++ | src/Perl6/Grammar.nqp:

[22:20] <dalek> rakudo/pod-code-allow: Make =code follow spec better

[22:20] <dalek> rakudo/pod-code-allow: review: https://github.com/rakudo/rakudo/commit/91334ce681

[22:20] <dalek> rakudo/pod-code-allow: a9cf04d | Mouq++ | src/Perl6/ (2 files):

[22:20] <dalek> rakudo/pod-code-allow: Add code for "=for code" too

[22:20] <dalek> rakudo/pod-code-allow: review: https://github.com/rakudo/rakudo/commit/a9cf04d90a

[22:22] *** BenGoldberg joined
[22:23] <Mouq> r: =code :this-should-be-literal␤but isn't␤␤say $=pod

[22:23] <camelia> rakudo-parrot 1d2c43, rakudo-jvm 1d2c43, rakudo-moar 1d2c43: OUTPUT«Pod::Block::Code("config" => "\{\"this-should-be-literal\" => \"1\"}").hash␤  but isn't␤␤␤»

[22:23] *** xenoterracide left
[22:24] <Mouq> ^^ I was trying to fix that, but it's not really pressing and it causes all kinds of issues

[22:33] *** rurban joined
[22:33] *** airdisa joined
[22:35] <timotimo> Mouq: what did i do wrong to get Pod::To::HTML to fail with allowed formatting codes?

[22:35] <timotimo> tkhey were formatted properly, but outputted in reverse order

[22:35] *** Rotwang left
[22:36] <Mouq> timotimo: Is it like that with the latest?

[22:36] <Mouq> timotimo: That was a bug in my own code at a point

[22:37] *** ajr_ left
[22:37] *** rurban left
[22:39] *** fridim_ joined
[22:40] <timotimo> ah, i should update then

[22:41] <timotimo> i'm very glad you're doing this

[22:44] <timotimo> it kind of plays right into my secret project

[22:45] <Mouq> timotimo: Glad to hear it :)

[22:46] <lue> timotimo: what kind of secret project? :)

[22:47] *** johnmilton left
[22:49] *** airdisa left
[22:50] <timotimo> lue: the lovely kind

[22:50] <timotimo> except i'm not actually putting in lots of work yet

[22:50] <timotimo> though i really should

[22:51] *** hoverboard is now known as baller

[22:53] *** xinming_ left
[22:53] <Mouq> r: my token foo { d+ }; 'abcddcd' ~~ /a b [ c ( <foo> ) ]+/; .say for $/

[22:53] <camelia> rakudo-parrot 1d2c43, rakudo-jvm 1d2c43, rakudo-moar 1d2c43: OUTPUT«｢abcddcd｣␤ 0 => ｢dd｣␤  foo => ｢dd｣␤ 0 => ｢d｣␤  foo => ｢d｣␤␤»

[22:54] <Mouq> r: my token foo { d+ }; 'abcddcd' ~~ /a b [ c ( <foo> ) ]+/; .say for @$/

[22:54] <camelia> rakudo-parrot 1d2c43, rakudo-jvm 1d2c43, rakudo-moar 1d2c43: OUTPUT«｢dd｣␤ foo => ｢dd｣␤␤｢d｣␤ foo => ｢d｣␤␤»

[22:54] *** xinming joined
[22:56] *** rifkin joined
[22:57] *** FROGGS left
[22:59] <Mouq> r: my token foo { d+ }; 'abcddcd' ~~ /a b [ c $<t>=[ <foo> ] ]+/; .<foo>.say for $<t>

[22:59] <camelia> rakudo-parrot 1d2c43, rakudo-jvm 1d2c43, rakudo-moar 1d2c43: OUTPUT«(Any)␤(Any)␤»

[22:59] <Mouq> :|

[23:01] *** kurahaupo_mobile joined
[23:01] <lue> r: my token foo { d+ }; 'abcddcd' ~~ /a b [ c $<t>=[ <foo> ] ]+/; say $/

[23:01] <camelia> rakudo-parrot 1d2c43, rakudo-jvm 1d2c43, rakudo-moar 1d2c43: OUTPUT«｢abcddcd｣␤ t => ｢dd｣␤ foo => ｢dd｣␤ t => ｢d｣␤ foo => ｢d｣␤␤»

[23:03] <lue> r: my token foo { d+ }; 'abcddcd' ~~ /a b [ c ( <foo> ) ]+/; .<foo>.say for $/

[23:03] <camelia> rakudo-parrot 1d2c43, rakudo-jvm 1d2c43, rakudo-moar 1d2c43: OUTPUT«(Any)␤»

[23:03] <lue> Mouq: What's the problem? Looks to me like you were testing two different things.

[23:04] <Mouq> lue: I was trying to figure out how to iterate over something in NQP

[23:04] *** baller is now known as hoverboard

[23:08] *** kbaker left
[23:12] *** tgt joined
[23:13] <jnthn> r: my token foo { d+ }; 'abcddcd' ~~ /a b [ c $<t>=[ <foo> ] ]+/; .<foo>.say for %$<t>

[23:13] <camelia> rakudo-parrot 1d2c43, rakudo-jvm 1d2c43, rakudo-moar 1d2c43: OUTPUT«(Mu)␤»

[23:14] <jnthn> oh, no. Hmm.

[23:14] <jnthn> r: my token foo { d+ }; 'abcddcd' ~~ /a b [ c $<t>=[ <foo> ] ]+/; say $<t>.WHAT

[23:14] <camelia> rakudo-parrot 1d2c43, rakudo-jvm 1d2c43, rakudo-moar 1d2c43: OUTPUT«(Parcel)␤»

[23:14] <jnthn> r: my token foo { d+ }; 'abcddcd' ~~ /a b [ c $<t>=[ <foo> ] ]+/; say $<t>

[23:14] <camelia> rakudo-parrot 1d2c43, rakudo-jvm 1d2c43, rakudo-moar 1d2c43: OUTPUT«｢dd｣␤ ｢d｣␤␤»

[23:15] <jnthn> Oh...'cus that doesn't actually make a sub-match I guess.

[23:21] *** beastd left
[23:21] *** skids left
[23:23] *** kaare__ joined
[23:24] <pmichaud> good afternoon, #perl6

[23:24] <timotimo> hello pmichaud! :)

[23:25] <timotimo> i hear the newest parrot already works OOTB with current rakudo (the packfile api change)

[23:25] <pmichaud> sure, rakudo supports the new packfile api

[23:26] <pmichaud> fsvo "supports"  (in this case, "doesn't break")

[23:26] <pmichaud> the next step is to enable --target=pbc, which is on my "todo" list.

[23:26] <timotimo> ah, ok. so all i'll have to do is bump parrot to the newest version for this motnh's release

[23:27] *** flussence left
[23:27] *** kaare_ left
[23:30] <pmichaud> well, we normally only bump if we need a parrot improvement that the bump provides.

[23:31] <jnthn> o/ pmichaud 

[23:31] <pmichaud> o/ jnthn

[23:32] <btyler> jnthn: sorry to take so long getting back about the debug segfault. after getting the latest moar/nqp/rakudo all installed on jvm/moar, perl6-debug-m gives me "missing or wrong version of src/gen/m-BOOTSTRAP.nqp". perl6-debug-j works though

[23:32] <btyler> so I imagine I messed up a dependency somewhere along the chain

[23:33] <arnsholt> "missing or wrong version" usually means one of your precompiled modules has to be recompiled

[23:34] <btyler> arnsholt: ah ha, yep, thanks. needed to make clean/make install on rakudo::debugger

[23:34] *** rurban joined
[23:35] <btyler> and indeed perl6-debug-m works on that gist I posted for me as well. jnthn++

[23:35] <jnthn> yay

[23:36] *** Ben_Goldberg joined
[23:37] <jnthn> OK, I should cut the release...

[23:37] *** BenGoldberg left
[23:37] <jnthn> uh, ww

[23:38] *** tgt left
[23:41] *** rurban left
[23:45] *** airdisa joined
[23:46] *** hoverboard left
[23:47] *** xenoterracide joined
[23:49] *** airdisa left
[23:52] *** kivutar left
[23:57] *** BenGoldberg joined
[23:57] *** arnsholt left
[23:57] *** airdisa joined
[23:58] *** Ben_Goldberg left
