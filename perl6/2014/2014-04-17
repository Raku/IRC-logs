[00:00] <Mouq> m: X::AdHoc.new("foo").throw

[00:00] <camelia> rakudo-moar d37353: OUTPUT«Default constructor for 'X::AdHoc' only takes named arguments␤  in method new at src/gen/m-CORE.setting:846␤  in block  at /tmp/nzFXwrAX72:1␤␤»

[00:00] <Mouq> m: X::AdHoc.new(:payload<"foo">).throw

[00:00] <camelia> rakudo-moar d37353: OUTPUT«"foo"␤  in block  at /tmp/nGyR99KsnZ:1␤␤»

[00:00] <Mouq> Or that to get a backtrace

[00:01] <Mouq> m: X::AdHoc.new(:payload<"foo">).throw; say 1

[00:01] <camelia> rakudo-moar d37353: OUTPUT«"foo"␤  in block  at /tmp/W9htYXLS9k:1␤␤»

[00:01] <Mouq> m: X::AdHoc.new(:payload<"foo">).fail; say 42

[00:01] <camelia> rakudo-moar d37353: OUTPUT«Unhandled exception: "foo"␤   at <unknown>:1  (/home/p6eval/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:throw:4294967295)␤ from src/gen/m-CORE.setting:12649  (/home/p6eval/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:sink:40)…»

[00:01] <Mouq> Hm

[00:01] * Mouq isn't very good at this :(

[00:04] <TimToady> p6: CONTROL { die "oops" }; return

[00:04] <camelia> rakudo-parrot d37353, rakudo-jvm d37353, rakudo-moar d37353: ( no output )

[00:04] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«Unhandled exception: oops␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/tmpfile line 1 (ANON @ 5) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/tmpfile line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4595 (AN…»

[00:04] *** rindolf left
[00:05] <TimToady> niecza++

[00:05] <TimToady> that actually segfaults locally in rakudo

[00:05] <Mouq> Wait, Rakudo has CONTROL... or at least, NQP does...

[00:06] <TimToady> well, only r-m

[00:06] <TimToady> (only r-m segfaults)

[00:07] <TimToady> the others bypass the CONTROL and say Attempt to return outside of any Routine

[00:07] <Mouq> And there are tests in Roast that presumably pass...

[00:08] <TimToady> maybe it's a REPL thing

[00:09] <TimToady> nope, segv's with -e too

[00:09] * Mouq is distracted

[00:09] * Mouq should probably sleep

[00:10] <jnthn> Finally got the blog post done: http://6guts.wordpress.com/2014/04/17/racing-to-writeness-to-wrongness-leads/

[00:10] * jnthn accidentally the whole 3000 words

[00:11] <Mouq> jnthn++

[00:12] *** zamolxes joined
[00:14] *** benabik joined
[00:19] *** benabik left
[00:21] <TimToady> jnthn: did my $gerenuk := %animals; eat a <gerenuk> tag?

[00:21] <jnthn> oh...maybe

[00:22] <jnthn> TimToady: fixed, thanks

[00:28] <Mouq> jnthn++, that certainly corrected my views of parallelization :)

[00:29] <jnthn> Well, that's predicated on my sleep-deprived views on it being correct ;)

[00:30] <Mouq> m: say [∪] await lines.map: {start { bag .words }}

[00:30] <jnthn> oh, oops...I have to be at an important meeting in like 7 hours...

[00:30] <camelia> rakudo-moar d37353: OUTPUT«(timeout)»

[00:30] <jnthn> 'night

[00:30] <Mouq> m: say [∪] lines.map: { bag .words }

[00:30] <Mouq> 'night jnthn!

[00:30] <TimToady> o/

[00:30] <camelia> rakudo-moar d37353: OUTPUT«(timeout)»

[00:31] <TimToady> and yes, that would be a pretty nifty way to write a map/reduce :)

[00:34] <TimToady> m: say [(+)] lines.map: { bag .words }

[00:34] <camelia> rakudo-moar d37353: OUTPUT«(timeout)»

[00:34] <TimToady> huh, what's so hard about that?  it works locally...

[00:34] <Mouq> Oh yeah, (+)/⊎ is what is wanted :)

[00:35] <TimToady> m: say +lines

[00:35] <camelia> rakudo-moar d37353: OUTPUT«(timeout)»

[00:35] <TimToady> um...

[00:35] <Mouq> m: .say for lines

[00:35] <Mouq> m: 42

[00:35] <camelia> rakudo-moar d37353: OUTPUT«(timeout)There were three men came out of the West␤Their fortunes for to try␤And these three men made a solemn vow␤John Barleycorn must die␤␤They've ploughed, they've sewn, they've harrowed him in␤Threw clouds upon his head␤And these three me…»

[00:35] <camelia> rakudo-moar d37353: ( no output )

[00:35] <TimToady> m: say +$*IN.lines

[00:36] <camelia> rakudo-moar d37353: OUTPUT«(timeout)»

[00:36] <TimToady> huh

[00:36] <TimToady> m: say lines[*-1]

[00:36] <camelia> rakudo-moar d37353: OUTPUT«(timeout)»

[00:36] <TimToady> how big is that song?

[00:37] <Mouq> 49 lines :(

[00:38] <TimToady> that behavior seems...suboptimal...

[00:38] <Mouq> j: say +lines

[00:38] <camelia> rakudo-jvm d37353: OUTPUT«0␤»

[00:38] <TimToady> p: say lines[*-1]

[00:38] <camelia> rakudo-parrot d37353: OUTPUT«Without a little Barleycorn␤»

[00:39] <TimToady> 0 isn't exactly manifesting correctness either

[00:39] <TimToady> j: say lines[*-1]

[00:39] <Mouq> p: say +lines

[00:39] <camelia> rakudo-jvm d37353: OUTPUT«Cannot use negative index -1 on List␤  in method gist at gen/jvm/CORE.setting:12584␤  in sub say at gen/jvm/CORE.setting:13497␤  in block  at /tmp/lEbxtrre4q:1␤␤»

[00:39] <camelia> rakudo-parrot d37353: OUTPUT«49␤»

[00:39] <TimToady> so lines is busticated on j

[00:39] <Mouq> j: .say for lines

[00:39] <camelia> rakudo-jvm d37353: ( no output )

[00:40] <TimToady> maybe the eval server is not supplying stdin correctly

[00:41] <TimToady> works fine locally

[00:42] <BenGoldberg> m: .chars.say for lines

[00:42] <TimToady> [∪] works fine as long as all args are bags

[00:42] <camelia> rakudo-moar d37353: OUTPUT«(timeout)41␤25␤37␤24␤0␤55␤26␤37␤24␤0␤40␤35␤38␤22␤0␤42␤32␤46␤19␤0␤43␤26␤42␤28␤0␤43␤28␤48␤30␤0␤47␤26␤33␤23␤0␤43␤25␤48␤38␤0␤42␤28␤42␤32␤0␤35␤30␤43␤27␤0␤0␤0…»

[00:42] <TimToady> ooh

[00:42] <Mouq> BenGoldberg++

[00:43] <BenGoldberg> j: .chars.say for lines

[00:43] <camelia> rakudo-jvm d37353: ( no output )

[00:44] * TimToady guesses there's a non-blocking thing going on here in Moar

[00:44] <TimToady> and eof is turning into 0 chars available

[00:45] <geekosaur> that is pretty much what I concluded earlier

[00:45] <TimToady> earlier++

[00:46] <Mouq> $ perl6-j -e'say @*ARGS; .say for ([⊎] await @*ARGS».path.map: {start { bag .&slurp.words } if .f}).pairs.sort(*.value)' src/core/*

[00:46] <geekosaur> jnthn++ was poking but had no conclusions, I think libuv ate him

[00:47] <Mouq> The last few output are, unsurprisingly, {, }, my, method, =, multi, #, if, sub...

[00:49] <TimToady> pity » has to reconstruct the order when the .map doesn't care

[00:49] <TimToady> need some transitive race semantics there...

[00:51] <Mouq> (of course, if I were really trying to optimize, a self-balancing tree would probably help more than parrellizing the files…)

[00:51] <Mouq> *parallizing

[00:51] <Mouq> I think...

[00:51] <Mouq> *paralellizing

[00:52] <geekosaur> parallelizing :p

[00:52] * TimToady is parallelyzed with fear

[00:53] * geekosaur wonders if anyone's coined that word to describe failed parallelization...

[00:54] *** benabik joined
[00:57] <Mouq> Just tried latest r-m with the one-liner above; The first say prints and then perl6 segfaults :(

[00:58] * Mouq is going to try sleeping, though

[00:58] <Mouq> o/ #perl6

[00:58] *** Mouq left
[01:15] *** dayangkun_ joined
[01:16] *** sjn_ left
[01:19] *** dayangkun left
[01:21] *** sergot_ joined
[01:22] *** prammer_ joined
[01:34] *** FROGGS_ joined
[01:36] *** Sqirrel left
[01:37] *** Sqirrel joined
[01:38] *** FROGGS left
[01:38] <colomon> panda failing tests in emmentaler?!  :(

[02:00] *** bcode_ joined
[02:01] *** bcode is now known as Guest16748

[02:01] *** Guest16748 left
[02:01] *** bcode_ is now known as bcode

[02:01] *** ggherdov left
[02:04] *** ggherdov joined
[02:11] *** djanatyn left
[02:11] *** djanatyn joined
[02:11] *** Alina-malina left
[02:12] *** virtualsue joined
[02:12] *** Alina-malina joined
[02:16] <lue> I'd've thought    parallelyzed (adj) : A multi-threaded application that is deadlocked  :)

[02:17] <rjbs> jnthn: I really liked your post on atomicity.

[02:20] *** donaldh left
[02:25] *** donaldh joined
[02:25] *** bcode left
[02:26] *** bcode joined
[02:31] *** xragnar_ joined
[02:31] *** xragnar is now known as Guest39371

[02:31] *** Guest39371 left
[02:31] *** xragnar_ is now known as xragnar

[02:37] *** bcode_ joined
[02:37] *** bcode left
[02:37] *** bcode_ is now known as bcode

[02:50] <lue> jnthn++ # making me realize that multithreading-ifying something involves a bit more than "put 'await do' in front of all the list-of-files loops" :)

[02:51] *** virtualsue left
[02:52] *** zz_nhayashi is now known as nhayashi

[03:14] *** Alula_ joined
[03:15] <avuserow> m: say "foo".encode("utf8"); say "foo".encode("utf8") ~~ Buf;

[03:15] <camelia> rakudo-moar d37353: OUTPUT«Buf:0x<66 6f 6f>␤False␤»

[03:15] <avuserow> m: say "foo".encode("utf8"); say "foo".encode("utf8").WHAT;

[03:15] <camelia> rakudo-moar d37353: OUTPUT«Buf:0x<66 6f 6f>␤(utf8)␤»

[03:15] * avuserow is a bit puzzled

[03:16] <colomon> how so?

[03:17] <colomon> oh, the last bit there?

[03:17] <avuserow> admittedly I know very little about this but the Str docs imply that encoding returns something Buf-like?

[03:17] <avuserow> looking at http://doc.perl6.org/type/Str#encode

[03:18] <colomon> m: say utf8 ~~ Buf

[03:18] <camelia> rakudo-moar d37353: OUTPUT«False␤»

[03:19] <avuserow> I'm deep into yak shaving. Trying to fix up the openssl bindings so I can have a working MD5 on MoarVM so I can play with random web APIs that require it

[03:20] <colomon> avuserow: I'm looking at the source, this looks like a weird Rakudo thing.  (Unless it's a spec glitch.)

[03:20] <colomon> utf8 is a Blob[uint8]

[03:20] <colomon> Buf is also a Blob[uint8]

[03:21] <avuserow> ah so maybe Blob is an okay type

[03:21] <lue> ? I thought Buf was supposed to be a role, which would imply no parameterization

[03:21] <colomon> errr… parameterized roles are a thing, and Buf is one

[03:21] <lue> (no concrete-ifying of parameters, I should say)

[03:21] <colomon> role Buf[::T = uint8] does Blob[T]

[03:22] <avuserow> maybe I could just add some code to NativeCall to turn Bufs into CArray[uint8]... No clue how right that seems though.

[03:22] <colomon> Or perhaps the real question here is why Blob.gist returns a string starting with "Buf"

[03:23] <colomon> avuserow: unfortunately I think most of the people with NativeCall experience are on European time, and so are asleep right now.

[03:23] <colomon> afk # time for bed 

[03:24] <avuserow> thanks for your help colomon  :)

[03:24] <lue> ♞ colomon o/

[03:35] *** FROGGS_ left
[03:41] *** water joined
[03:41] *** hoverboard left
[03:41] *** water is now known as hoverboard

[03:49] *** FROGGS_ joined
[03:52] *** hoverboard left
[03:55] *** labster joined
[04:01] <[Coke]> lizmat: I had no idea what the part(s) was. ensemble player; 5-ish different bits, 2 of which with a page or so of dialog. most surprising, however, was finding out I need to go in for the fight coach so someone can punch me in the head and then kick me in the face safely.

[04:01] <[Coke]> ... beats writing cold fusion, though.

[04:04] *** anaeem1_ joined
[04:12] *** Teratogen left
[04:18] *** djanatyn left
[04:18] *** djanatyn joined
[04:34] *** SamuraiJack__ joined
[04:43] *** thou joined
[04:59] *** dragon_d left
[05:07] *** BenGoldberg left
[05:10] *** punter joined
[05:12] *** kaare__ joined
[05:33] *** punter left
[06:27] <masak> good normal-tz morning, #perl6

[06:29] <raydiak> \o

[06:32] *** SamuraiJack__ left
[06:32] *** SamuraiJack joined
[06:34] <jnthn> o/ #perl6

[06:34] <jnthn> urgh, morning

[06:35] <jnthn> lue++ # parallelyzed

[06:37] <raydiak> morning jnthn

[06:39] <jnthn> avuserow: A utf8 is a blob8 rather than a buf8 because a buf8 would be mutable, and the mutation might cause it to become invalid utf8, which is what the utf8 type is meant to imply it ain't

[06:39] <jnthn> o/ raydiak 

[06:45] <avuserow> okay, that makes sense. I'm guessing that it makes the most sense to have algorithms like SHA and CRC32 take input as Blobs rather than Bufs or Strings in that case...

[06:47] <jnthn> r: say Buf ~~ Blob

[06:47] <camelia> rakudo-parrot d37353, rakudo-jvm d37353, rakudo-moar d37353: OUTPUT«True␤»

[06:47] <jnthn> So yes, doing so doesn't harm the ability to take a Buf.

[06:49] <avuserow> well, some of them do things like: multi sub foo(Blob $b) {foo($b.decode("utf8"));}; multi sub foo(Str $s) { # do actual work };

[06:49] <avuserow> and for these algorithms, it seems like it'd be better to do the work in the one that takes the blob instead of the string

[06:49] <jnthn> For the ones you just described, yes, certainly.

[06:54] *** raiph joined
[06:56] <jnthn> commute &

[06:57] *** FROGGS_ left
[06:57] *** darutoko joined
[07:06] *** Ven joined
[07:08] <dalek> Perlito: 6ead80f | (Flavio S. Glock)++ | src5/lib/Perlito5/Grammar/Regex5.pm:

[07:08] <dalek> Perlito: Perlito5 - Perlito5::Grammar::Regex5 wip

[07:08] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/6ead80f8fa

[07:08] <Ven> jnthn++ # blag

[07:08] *** zakharyas joined
[07:15] *** klapperl joined
[07:21] *** FROGGS joined
[07:22] <moritz> jnthn: "Having spent a bunch of years working with and teaching about parallel, asynchronous, and parallel programming outside of the Perl world" -- I guess the duplication of 'parallel' isn't intentional

[07:22] <raydiak> parallel parallels?

[07:23] *** pecastro left
[07:26] *** dmol joined
[07:26] <moritz> sounds like Euclidean Geometry to me :-)

[07:28] <moritz> jnthn++ # blog

[07:29] <FROGGS> ohh, I haz to read...

[07:29] <FROGGS> gmorning @all

[07:30] <raydiak> \o FROGGS

[07:30] <Ven> o/, *

[07:31] *** thou left
[07:31] <raydiak> hi Ven

[07:33] *** beastd joined
[07:48] *** SamuraiJack left
[07:49] <FROGGS> jnthn: typo? CPS (Communicating Sequential Processes)

[07:54] <lizmat> good *, #perl6!

[07:54] <lizmat> and jnthn++ for an excellent, excellent blog post  :-)

[08:03] <FROGGS> if I also do jnthn++, do we have to lock him (away)?

[08:03] <moritz> FROGGS: nah, the IRC servers serialize the lines that can contain ++

[08:06] <tadzik> oh, the honk-manatee https://www.youtube.com/watch?v=s-33i2b17nc

[08:09] *** FROGGS left
[08:09] <sergot_> morning! o/

[08:09] <tadzik> o/

[08:10] <lizmat> o/

[08:10] <Ven> (when I git pull rakudo, I only need to make, right ?)

[08:10] *** SamuraiJack joined
[08:11] <moritz> Ven: if Configure.pl or something in tools/build/ changes, you need to reconfigure too

[08:11] <Ven> noted, thanks

[08:15] *** SamuraiJack left
[08:16] <Ven> (actually, `make` never failed, it was `make install`)

[08:19] <lizmat> does an immediate "make install" again work?

[08:19] <Ven> Can't test with that user, I'll need the server owner to try it :p

[08:20] * Ven will fix his mess now

[08:21] <Ven> do I just add `is copy` for the 4 params (2 for sub + 2 for the method) or should I go with another strategy ?

[08:22] <moritz> adding 'is copy' should be fine (just test it before you submit the pull request :-)

[08:23] * Ven can do that now

[08:27] * Ven ... expect that github broke down

[08:27] <lizmat> afk for a few hours&

[08:28] *** thou joined
[08:28] <nwc10> ooh, they're talking about PERL: https://github.com/blog/1819-write-line-notes-from-your-phone

[08:29] <Ven> Hahaha, that's some nice irony

[08:32] * nwc10 wonders how hard it would be to port Acme::Inline::PERL to Perl 6

[08:32] <tadzik> they are?

[08:33] *** thou left
[08:33] * nwc10 is joking. They don't mention any particular programming language

[08:34] *** benabik left
[08:35] *** FROGGS joined
[08:38] <raiph> jnthn++ # I've always loved your posts but this is my favorite so far

[08:39] *** kaare__ left
[08:39] <raiph> (I mean your latest blog post, in case it isn't obvious!)

[08:39] *** kaare__ joined
[08:41] *** FROGGS left
[08:42] *** dakkar joined
[08:42] *** FROGGS joined
[08:43] *** falk0n joined
[08:47] *** FROGGS left
[08:51] *** raiph left
[08:54] *** pecastro joined
[08:57] *** falk0n left
[08:59] *** FROGGS joined
[09:01] *** kaare__ left
[09:03] *** rindolf joined
[09:06] *** FROGGS left
[09:13] *** falk0n joined
[09:13] *** grondilu joined
[09:21] <Ulti> btw have you guys seen Untrusted? http://alexnisnevich.github.io/untrusted/

[09:31] <raydiak> wow, that's...pretty awesome

[09:33] *** sergot_ is now known as sergot

[09:34] <sergot> Ulti++

[09:48] * Ven didn't manage to get past lv21 ...

[09:51] * raydiak is up to 7 so far

[09:52] <raydiak> eh, just realized the time...g'night #perl6

[09:54] <Ulti> run 9 I waisted a lot of time

[09:54] <Ulti> night raydiak 

[10:17] * masak .oO( hula hoops are a big waiste of time )

[10:19] *** snarkyboojum joined
[10:28] *** telex left
[10:30] *** telex joined
[10:30] *** telex left
[10:31] * Ven spent 15 minutes trying to find the bug before he realized the issue with "$" in a linuxterm

[10:32] *** telex joined
[10:34] <Ven> https://github.com/rakudo/rakudo/pull/264

[10:35] <Ven> Which makes me ask, now that I have a perl6 install and I'm not totally blind anymore, are there low-hanging fruits ?

[10:38] *** denis_boyun joined
[10:51] *** falk0n left
[10:54] *** FROGGS joined
[10:54] <dalek> rakudo/nom: 88a084e | Nami-Doc++ | src/core/IO.pm:

[10:54] <dalek> rakudo/nom: Add , fix open :rw

[10:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/88a084ebbd

[10:54] <dalek> rakudo/nom: a4e5caa | (Tobias Leich)++ | src/core/IO.pm:

[10:54] <dalek> rakudo/nom: Merge pull request #264 from Nami-Doc/fix-open-rw

[10:54] <dalek> rakudo/nom: 

[10:54] <dalek> rakudo/nom: Add , fix open :rw

[10:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a4e5caa801

[10:55] *** hummeleB1 joined
[10:56] <FROGGS> Ven: perhaps RT reveals some LHFs?

[10:57] <Ven> FROGGS: marked as "easy" ?

[10:57] <Ven> eeh. Possible cross-site request forgery hehe

[10:57] <FROGGS> I don't think that it is common practice to mark the tickets that way here...

[10:57] <FROGGS> :/

[10:58] * Ven can't actually understand how rt.perl works

[10:58] <Ven> or do you *need* an account to browse stuff ?

[10:59] <FROGGS> Ven: if you want to get way deeper into the rabbit hole you might enjoy: https://github.com/rakudo/rakudo/blob/nom/docs/ROADMAP

[10:59] <FROGGS> Ven: no, you can read tickets without an account

[10:59] <Ven> Ok, "use the public interface"

[10:59] <FROGGS> about that roadmap, even when there is a nick assigned to something, it does not mean that the guy/girl is really working on that already

[11:09] *** dmol left
[11:10] *** dmol joined
[11:12] <jnthn> afternoon o/

[11:14] <masak> \o

[11:14] <nwc10> danger, UGT violation. Imposter detected :-)

[11:14] <lizmat> after* all!

[11:16] <FROGGS> *g*

[11:18] <jnthn> hey, I had my UGT morning earlier :P

[11:22] <rindolf> jnthn: afternoon.

[11:23] *** Ven left
[11:27] *** clkao joined
[11:32] <dalek> Perlito: f13f6cf | (Flavio S. Glock)++ | / (2 files):

[11:32] <dalek> Perlito: Perlito5 - Perlito5::Grammar::Regex5 wip

[11:32] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/f13f6cff86

[11:41] *** ldthien0 joined
[11:43] <jnthn> moritz, FROGGS: blog typos fixed, thanks!

[11:44] <FROGGS> jnthn++ # that is a very ncie article btw

[11:45] <jnthn> FROGGS: Thanks, hope it was informative :)

[11:46] <colomon> jnthn:  https://gist.github.com/colomon/10976822  ;)

[11:46] <FROGGS> it is... not only the fact about the cpu cycles when it comes to shared memory

[11:46] <FROGGS> also the part about the implicit locks and about the solution at the end...

[11:46] <jnthn> colomon: Cute!!

[11:46] <colomon> good bit slower, I fear

[11:47] <jnthn> colomon: Well, also, keeping the code simple keeps the post accessible to those less 6-skilled. :)

[11:47] <colomon> sure

[11:47] *** Ven joined
[11:48] <FROGGS> Rakudo has been built and installed. # (r-m* that is)

[11:51] <Ven> r: my ($a is readonly) = 5; say $a; $a = 42; say $a

[11:51] *** dmol left
[11:52] <camelia> rakudo-jvm a4e5ca: OUTPUT«(timeout)»

[11:52] <camelia> ..rakudo-parrot a4e5ca, rakudo-moar a4e5ca: OUTPUT«5␤42␤»

[11:52] <Ven> What are "logical cascades" ?

[11:54] <Ven> or "coercion types" ?

[11:55] <moritz> iirc S02 defines coercion types

[11:56] <moritz> and for logical cascades, look for "andthen" and "orelse" in S03

[11:56] <Ven> To coerce your return value, use a coercion type:       sub get_pet() returns Pet(Animal) {...}  # coerce any Animal to Pet

[11:56] <Ven> (do we have any reason to keep `returns` around, with `of` ?)

[11:58] *** vimal2012 joined
[12:01] *** guest40 joined
[12:03] *** snarkyboojum left
[12:03] *** vimal2012 left
[12:05] *** thou joined
[12:05] *** guest40 left
[12:05] <dalek> Perlito: 89b7aa0 | (Flavio S. Glock)++ | src5/lib/Perlito5/Grammar/Regex5.pm:

[12:05] <dalek> Perlito: Perlito5 - Perlito5::Grammar::Regex5 wip

[12:05] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/89b7aa0491

[12:06] <jnthn> .tell masak MoarVM release done, and at http://www.moarvm.org/releases/MoarVM-2014.04.tar.gz

[12:06] <yoleaux> jnthn: I'll pass your message to masak.

[12:09] *** thou left
[12:14] *** xenoterracide_ joined
[12:17] *** SamuraiJack joined
[12:22] <Ven> Is there already modules that exposes grammars/roles with regexes for quoted strings ?

[12:23] <FROGGS> Ven: what would be the use case?

[12:24] <Ven> FROGGS: grammars dealing with quoted strings ?

[12:24] <Ven> instead of copy-pasting these lines :o

[12:25] <FROGGS> hmmm, I still do not seem to get it

[12:25] <Ven> FROGGS: I mean, rules to parse ``

[12:25] <Ven> 'hey\' you'

[12:25] <Ven> (and the double-quoted equivalent)

[12:26] <FROGGS> well, rakudo has parsers for quoting languages of course

[12:26] <Ven> JSON::Tiny uses its own regexes for parsing "" quoted strings

[12:26] <FROGGS> yes, because JSON has its own understanding what a q/qq-string is

[12:27] <Ven> yeah, and I'd like to get the same rules in a module

[12:27] <Ven> for "simple, stupid" quoted strings

[12:27] <FROGGS> so, you want to expose a grammar that would let one specify its own set of escape sequences... something like that?

[12:28] <Ven> Not really escape sentences, really, just rules to parse correctly "a\"b\\"

[12:28] *** molaf left
[12:32] <FROGGS> Ven: there is nothing like that out there atm AFAIK

[12:33] <Ven> Hmm, can we call p6 grammars "parser combinators" ?

[12:33] <lizmat> Ven: wrt to my $a is readonly:

[12:33] <lizmat> afaik the problem is currently that if we *do* mark $a as read-only, the assignment "=5" will not work

[12:34] <FROGGS> m: grammar QString { token number { 23 } }; say "1234" ~~ /<QString::number>/

[12:34] <camelia> rakudo-moar a4e5ca: OUTPUT«｢23｣␤ QString::number => ｢23｣␤␤»

[12:34] *** grondilu left
[12:34] <lizmat> as the marking as read-only is compile time, and the assignment is runtime

[12:34] <FROGGS> would perhaps be nice to have a collection of patterns for mail addresses and stuff

[12:34] <Ven> FROGGS: yeah, exactly :_

[12:34] <lizmat> Regexp::Common comes to mind ;-)

[12:34] <retupmoca> perl6-debug is spitting out 'Unknown compilation input 'optimize'' anytime I try to use it on anything that's loading .pm6 files o.O

[12:34] * Ven can't quite :) on qwerty keyboards

[12:37] <tadzik> :) is easier on colemak, 'cos the keys are next to each other

[12:37] *** punter joined
[12:39] <masak> good afternoon, dear #perl6ers.

[12:39] <yoleaux> 12:06Z <jnthn> masak: MoarVM release done, and at http://www.moarvm.org/releases/MoarVM-2014.04.tar.gz

[12:39] <lizmat> masak o/

[12:39] <lizmat> and how's your jetlag?

[12:39] <masak> excellent :>

[12:39] <masak> I'll be away for a few whiles, but I'll be doing some Rakudo release management later today.

[12:40] <masak> stand by for a stunning release.

[12:40] <masak> &

[12:40] <Rounin> Hm... The QWERTY keyboard apparently favours lefthanded typers, though, and I've found it's the easiest one to type "David" on

[12:40] <Rounin> Important qualities for a keyboard layout

[12:41] <Rounin> (My name is David)

[12:41] <tadzik> Hello David

[12:41] <Rounin> Hello um

[12:41] <Rounin> hi

[12:41] <tadzik> yes, tadzik is my name

[12:41] <Rounin> Oh :D

[12:41] <Rounin> Well, then hello, Tadzik :D

[12:41] <tadzik> makes it easy to remember now that my irc nick is the same

[12:42] <Rounin> Very true

[12:42] <Rounin> Wow, if you love one-handed typing, "tadzik" is pretty easy on QWERTY :P

[12:42] <Rounin> "tadz" + "ik"

[12:43] <Rounin> We have an ISP called "Powertech"... "po" "wert" "e" "c" "h"

[12:47] *** anaeem1_ left
[12:48] *** kbaker_ joined
[12:48] <Ven> I just noticed `is copy` in my command got executed -.-

[12:50] <Ven> s/command/commit message/

[12:51] *** dmol joined
[12:54] *** xenoterracide_ left
[13:00] * moritz knows folks who only use passwords that can be typed one-handed

[13:03] <Juerd> Every password can be typed one-handed.

[13:03] <Juerd> There's a shift key on either side of the keyboard :P

[13:04] <huf> if you can type it without your left hand, and type it without your right hand

[13:04] *** stevan__ left
[13:04] <huf> surely you can type it with no hands

[13:05] <Juerd> Nose typing is hard

[13:05] <huf> yeah, i know that too

[13:07] <Juerd> http://typing-speed-test.aoeu.eu/  # 4 cpm

[13:10] <Ven> Your score: 492 CPM (that is 98 WPM) # I can't do that on a Mac qwerty keyboard

[13:10] * Ven will try with his nose

[13:12] <Ven> Juerd: Your score: 46 CPM (that is 9 WPM) ! HA !

[13:12] *** guru joined
[13:13] *** guru is now known as Guest90732

[13:13] *** Guest90732 is now known as ajr_

[13:18] <Rounin> :D

[13:23] <timotimo> what a useful skill

[13:24] <tadzik> Look, ma, no hands!

[13:26] <tadzik> it seems like Y::E organizers want speakers to have slides ready almost 2 months ahead

[13:26] <tadzik> crazy :o

[13:28] <Juerd> Ven: Impressive.

[13:29] <Juerd> tadzik: Solution: present without slides. Do live programming.

[13:31] <tadzik> :)

[13:31] <tadzik> that actually sounds more reasonable to me than doing slides more than 48 hours before the talk :D

[13:32] <tadzik> in other news: yapc::na is expensive and call for papers is over :|

[13:34] <FROGGS> jnthn: that is the current state of r* https://gist.github.com/FROGGS/0ea5537eb675588baaa2

[13:35] <timotimo> no problems on moar \o/

[13:37] <timotimo> seems like it'll be time for moar to smoke all modules as well

[13:37] * tadzik wonders if task::star is up to date

[13:40] <FROGGS> r: say Buf:0x<0c 30 03 26 74 22 a3 03>.decode('UTF-16')

[13:40] <camelia> rakudo-parrot a4e5ca, rakudo-jvm a4e5ca, rakudo-moar a4e5ca: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Two terms in a row␤at /tmp/tmpfile:1␤------> say Buf⏏:0x<0c 30 03 26 74 22 a3 03>.decode('UTF␤    expecting any of:␤  …»

[13:41] <moritz> m: say Buf.new(<0c 30 03 26 74 22 a3 03>.map({ :16($_) })).decode('UTF-16')

[13:41] <camelia> rakudo-moar a4e5ca: OUTPUT«「☃≴Σ␤»

[13:41] <FROGGS> j: say Buf.new(<0c 30 03 26 74 22 a3 03>.map({ :16($_) })).decode('UTF-16')

[13:41] <camelia> rakudo-jvm a4e5ca: OUTPUT«0&t"£␤»

[13:41] <FROGGS> p: say Buf.new(<0c 30 03 26 74 22 a3 03>.map({ :16($_) })).decode('UTF-16')

[13:41] <camelia> rakudo-parrot a4e5ca: OUTPUT«「☃≴Σ␤»

[13:42] <jnthn> FROGGS: Hmm, thanks.

[13:46] *** fhelmberger left
[13:47] <FROGGS> r: say Buf.new(0x03, 0x26).decode('UTF-16')

[13:47] <camelia> rakudo-jvm a4e5ca: OUTPUT«&␤»

[13:47] <camelia> ..rakudo-parrot a4e5ca, rakudo-moar a4e5ca: OUTPUT«☃␤»

[13:48] <FROGGS> r: say utf8.new(0x03, 0x26).decode('UTF-8')

[13:48] <camelia> rakudo-parrot a4e5ca, rakudo-jvm a4e5ca, rakudo-moar a4e5ca: OUTPUT«&␤»

[13:53] <FROGGS> r: say nqp::decode(Buf.new(0x03, 0x26), 'utf16')

[13:53] <camelia> rakudo-jvm a4e5ca: OUTPUT«&␤»

[13:53] <camelia> ..rakudo-parrot a4e5ca, rakudo-moar a4e5ca: OUTPUT«☃␤»

[13:53] *** thou joined
[13:53] *** btyler joined
[13:53] *** anaeem1 joined
[13:54] *** haroldwu joined
[13:57] *** thou left
[13:59] *** haroldwu left
[13:59] *** haroldwu joined
[13:59] <jnthn> hm, 443cmp (89wpm) on my laptop keyboard :)

[14:00] *** nhayashi is now known as zz_nhayashi

[14:04] *** xragnar left
[14:04] <Ven> jnthn: yeah, but what can you do with your nose :P ?

[14:04] *** xragnar joined
[14:06] *** thou joined
[14:09] <jnthn> Ven: Sneeze? :P

[14:10] <Ven> jnthn: how much WPM/CPM is that :P ?

[14:11] <tadzik> depends on the intensity

[14:11] <Ven> tadzik: did we just create another PhD subject again :P ?

[14:11] <tadzik> heheh

[14:11] <tadzik> maybe something for my masters.. ;P

[14:12] <tadzik> Software Supported Selective Sneezing

[14:12] *** treehug88 joined
[14:13] *** anaeem1 left
[14:15] <masak> Ven: grammars are usually not called "combinators", no. biggest reason is that they are not combinators. :P

[14:17] <masak> a combinator is "a function whose argument is also a function". grammars are not that.

[14:20] *** donaldh left
[14:23] <geekosaur> Ven: parser combinators are a mechanism detail, not an essential part of parsing or lexing. in theory combinators are more flexible, but in practice keeping a language comprehensiblle by humans leads to highly formulaic combinators which can be folded into a framework instead

[14:24] <geekosaur> parser generators (e.g. yacc) do that, as does perl 6 by hiding it in what amounts to a generalization of the regex framework

[14:24] *** donaldh joined
[14:26] <masak> I think the big innovation of Perl 6 grammars is to *not* talk about lexing and parsing as two different phases.

[14:27] <masak> sometimes it is, but not always. definitely not with Perl 6 itself.

[14:27] <geekosaur> enh, most parser combinator systems also lose that distinction

[14:27] <masak> interesting. did not know that.

[14:27] <masak> in fact, grammars go even further and allow declaration-y stuff to happen at parse time.

[14:27] <geekosaur> mostly that distinction goes along with parser generators and lexer generators, and that because they tend to be distinct domain-specific languages

[14:28] <geekosaur> there is no particular reason to separate those except efficiency; note that the rise of lex and yacc was driven specifically by the need for memory efficiency on pdp11-class machines

[14:29] <masak> noted.

[14:29] <masak> it's interesting to find that pattern in many parts of programming history.

[14:29] <geekosaur> you can do lexing in yacc but the parser table will be much larger and use more working memory than the equivalent one generated by lex

[14:30] <geekosaur> and its DSL is more painful to work with at that level

[14:30] <masak> we used to separate things for memory efficiency, but then that concern goes away and later generations remove the separation. (like the client/server separation in CVS/SVN, removed in Git)

[14:35] *** bluescreen10 joined
[14:39] *** donaldh left
[14:44] <cognominal> I don't think parser combinators can deal easily with highly contextual grammars. Perl 6 has many mechanisms for that (slangs, dynamic variables...)

[14:44] *** mtk joined
[14:45] *** plobsing left
[14:46] *** rindolf left
[14:48] *** Ven left
[14:50] <geekosaur> it depends on the combinator framework but it does require some extra work.

[14:51] <geekosaur> note that, if you're using parsec as the example of a combinator framework, its limitations come more from the monadic underpinning; monads have a certain inflexibility that can be avoided (at the cost of a different kind of inflexibility) by using an applicative-based parser framework instead

[14:53] *** aindilis joined
[15:06] *** denis_boyun left
[15:06] *** rindolf joined
[15:10] <jnthn> beer, curry &

[15:11] *** guru joined
[15:11] *** guru left
[15:13] *** guru joined
[15:13] *** guru is now known as Guest625

[15:13] *** Guest625 left
[15:14] *** ajr joined
[15:14] *** ajr_ left
[15:14] *** ajr is now known as ajr_

[15:17] <ajr_> Don't forget the major constraint on the size and complexity of programs; the limitations of the human brain. (E.g. magic # 7+/-2) The Unix philosophy of small programs that do one thing well contrasts with Microsoft's enormous all-embracing monoliths.

[15:21] <geekosaur> note that in some ways that is a false dichotomy because you must also remember how to hook the little pieces together; many people have more trouble with that part and benefit from a Microsoft-style fixed framework

[15:21] <moritz> ...until they get lost in the framework :-)

[15:22] <geekosaur> ("useless use of cat" is arguably a symptom of this)

[15:22] <moritz> I think the real difference is that if you look at excel, for example, you can reach many functions just by exploring the GUI

[15:22] *** pecastro left
[15:22] <moritz> and the UNIX approach lacks this explorability

[15:23] <geekosaur> that is actually a large part of what I meant

[15:23] <moritz> geekosaur: I actually often like "useless use of cat", because it makes data flow clearer

[15:23] <geekosaur> the unix approach, you need to learn where all those little tools are and what they do and how to hook them together. excel can guide you through them

[15:24] <moritz> now I wonder if it's possible to add discoverability to the UNIX approach

[15:25] <moritz> s/if/how/

[15:25] <cognominal> Pipe is a nice but limited form of combination.  That's probably why I jumped to Perl.

[15:27] <moritz> well, there are two limitations

[15:27] <moritz> one is that it only allows text

[15:27] <moritz> powershell solves that, I believe

[15:27] <moritz> the second is that the shell doesn't allow you to open several pipes to different process (at least I never managed to make it work)

[15:28] <Juerd> moritz: There are shells like fish that improve discoverability a little

[15:28] <geekosaur> you can do the multiple pipes thing but it's generally painful

[15:29] <geekosaur> the one that works best (and is most comprehensible generally) is the >(command) / <(command) mechanism in bash and zsh

[15:29] <geekosaur> ksh had a notion of "coprocesses" but they were difficult to keep track of

[15:29] <Juerd> moritz: All you'd need to pipe to different processes is a forking tee(1) fork.

[15:30] <moritz> Juerd: cmd1 | tee >(cmd2) | cmd3 ?

[15:30] <geekosaur> zsh also has MULTIOS which is pretty powerful and flexible

[15:30] <Juerd> moritz: More like tee -c -- cmd2

[15:31] <moritz> Juerd: my tee doesn't have a -c option

[15:31] <Juerd> moritz: Indeed. That's why I said "tee(1) fork"

[15:32] <Juerd> Although it'd be easier to rewrite it in perl

[15:32] <Juerd> Just don't call it pee

[15:32] <moritz> tee >(cmd2) does seem to work though

[15:32] <Juerd> But then it doesn't pipe to cmd3 anymore?

[15:33] <moritz> why wouldn't it?

[15:33] <Juerd> tee without a filename is just cat

[15:33] <moritz> Juerd: >(cmd2) creates /dev/fd/42 file name

[15:33] <moritz> so it's called with a (pseudo-virtual) file name

[15:34] <Juerd> cat | tee >(perl -ple's/^/1: /') | perl -ple's/^/2: /'

[15:34] <Juerd> Doesn't work for me. Only 2: prints.

[15:34] <moritz> seems cmd3 receives the output from both cmd1 and cmd2

[15:34] <moritz> $ echo foo | tee >(tr o ua) | tr f g

[15:34] <moritz> goo

[15:34] <moritz> guu

[15:35] * moritz should go home

[15:35] <Juerd> Hm, it does if I pipe to it

[15:36] <Juerd> Hm, it does if I pipe to it with echo, but not if I pipe to it with cat?!

[15:36] <Juerd> Oh, it buffers.

[15:36] <Juerd> Suboptimal :)

[15:36] <geekosaur> cat -u?

[15:37] <Juerd>        -u     (ignored)

[15:37] <geekosaur> gnuish? they came up with a different horrible hack

[15:38] <geekosaur> man stdbuf

[15:38] *** kivutar joined
[15:39] *** cognominal left
[15:39] *** cognominal joined
[15:40] *** zakharyas left
[15:43] *** sqirrel_ joined
[15:43] *** SamuraiJack left
[15:48] *** kivutar left
[15:53] *** raiph joined
[16:02] *** kurahaupo joined
[16:03] *** bluescreen100 joined
[16:07] *** bluescreen10 left
[16:09] *** denis_boyun joined
[16:12] <TimToady> ven, lizmat: wrt "is readonly", that's why we have ::= instead, which marks readonly after binding

[16:14] *** mtk left
[16:15] <perigrin> :::= turns it into a domino set after binding

[16:15] *** Rotwang joined
[16:15] <FROGGS> looks more like straciatela ice on a stick

[16:18] *** FROGGS[mobile] joined
[16:20] *** dwarring left
[16:23] *** FROGGS left
[16:39] *** rindolf left
[16:42] *** punter left
[16:47] <TimToady> our treatment of failure and exceptions has become somewhat fragmented, I fear

[16:47] <TimToady> p6: say (unlink "nosuch.file").WHAT; say $!

[16:47] <camelia> rakudo-jvm a4e5ca: OUTPUT«(Bool)␤Nil␤»

[16:47] <camelia> ..rakudo-parrot a4e5ca, rakudo-moar a4e5ca: OUTPUT«unlink is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:2␤  in sub unlink at src/RESTRICTED.setting:6␤  in block  at /tmp/tmpfile:1␤␤»

[16:47] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«Unhandled exception: unlink may not be used in safe mode␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (unlink @ 0) ␤  at /tmp/tmpfile line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4595 (ANON @ 3) ␤  at /home/p6eval/…»

[16:47] *** rindolf joined
[16:47] <TimToady> oh yeah, but locally I get (Bool) and Nil

[16:47] <TimToady> no way to get an errno out of that, apparently

[16:48] <TimToady> $! was supposed to reflect errno

[16:48] <TimToady> and it should really be returning a failure, not Bool

[16:49] <ajr_> discoverability; "man man", "apropos x"

[16:49] <TimToady> also, the out-of-bandness of $! wrt 'try' and 'orelse' is a problem currently

[16:50] <TimToady> m: say ((try die "oops") orelse $_).WHAT

[16:50] <camelia> rakudo-moar a4e5ca: OUTPUT«Nil␤»

[16:51] <TimToady> that needs to capture the (X::AdHoc) somehow

[16:52] * TimToady is wondering why we don't just fail from the try, instead of forcing people to rely on an out-of-band (and potentially race conditionish) $!

[16:53] <TimToady> I suppose the issue was whether the failure was considered handled or not, but mandatory out-of-band $! is pretty smelly

[16:55] <TimToady> contrariwise, if we decide to stick with out-of-band-ness on try, we need to make 'orelse' treat $! robustly on the LHS

[16:55] <TimToady> set it to 'no error' before evaluating the thing on the left, and capturing $! after evaluating it

[16:56] <TimToady> but as it is, try doesn't work with orelse correctly

[16:56] <TimToady> s/correctly/as intended/

[16:56] *** ajr_ left
[16:57] *** dakkar left
[16:59] <masak> this looks interesting. http://www.greghendershott.com/fear-of-macros/index.html

[17:00] <masak> in the HN discussion, one poster talks about "pass[ing] macros to functions". https://news.ycombinator.com/item?id=7601506

[17:00] <masak> I haven't thought much about that. is that useful?

[17:01] <masak> seems to me functions are at runtime, when (usually) most of the macros have already finished what they should do.

[17:01] <TimToady> but we're running lots of functions and methods at compile time

[17:01] <masak> though I guess it could actually be a BEGIN-time thing (a macro, for example) that passes a macro to a function.

[17:01] <masak> right.

[17:02] <TimToady> HOM!

[17:02] *** kivutar joined
[17:02] <TimToady> but from the ToC it looks like they're trying to get at the same sort of syntactic issues that I'm trying to get at with macros for different syntax categories

[17:04] <TimToady> we need to be able to insert macros into any grammatical category and have correct expectations both before an dafter

[17:04] * TimToady avoids making the required mention of the freudian typo, "dafter"

[17:06] <masak> :)

[17:06] <TimToady> and "is parsed" could be viewed through a HOP lens

[17:06] <masak> TimToady: I'm just back from a two-week (ish) vacation (ish). by the end of it, a weird and possibly interesting alternative take to Perl 6's macros emerged from an unexpected direction.

[17:07] <masak> TimToady: I have no name for it yet, but let's call it "control flow builder API", because it pretty much captures what I see it aiming for.

[17:07] <masak> TimToady: I'll try to develop the idea in writing in the next few days/weeks.

[17:08] <TimToady> well, just remember we avoid a lot of explicit HOP programming in P6 because mere mortals run away screaming

[17:08] <TimToady> 'is parsed' is one of those not-quite-a-combinator things

[17:09] *** treehug8_ joined
[17:09] <TimToady> and if we're gonna turn ';' into a monad operator, we need to make sure that at least appears to be optional :)

[17:10] *** thou left
[17:11] <masak> sure, sure.

[17:11] <masak> that's not where I'm heading with this. :)

[17:11] *** treehug88 left
[17:12] <masak> the igniting idea was something more like "if the atomic thing is a straight sequence of statements, what's an intuitive set of combinators that give us our current set of control flow constructs?"

[17:13] <masak> as in, what primitive operations would be needed to build control flow graphs that we can already build with Perl 6 keywords?

[17:13] <masak> those are probably a good starting point for building custom keywords, too. maybe not a complete set, but a good start.

[17:13] <TimToady> all without reinventing contuations?  :)

[17:13] <TimToady> *continuations

[17:14] <masak> I... don't know yet. that's one of the things I don't know.

[17:15] <masak> one of the things that led me down this path was reinventing CPS (poorly). so I can't in all honestly answer "no" to that question.

[17:15] <TimToady> well, continuations might just be one implementation technique for it

[17:15] <masak> right.

[17:15] <masak> you can emulate most things with a switch statement in a while loop, so should be fine :P

[17:16] <colomon> pandabrew/bin/pandabrew panda install Shell::Command

[17:16] <colomon> ===SORRY!===

[17:16] <colomon> Missing or wrong version of dependency 'lib/Shell/Command.pm'

[17:16] <colomon> :\

[17:17] <Rounin> They implemented dependency hell... Perl 6 is going places

[17:18] <Rounin> How about BSOD next

[17:18] <TimToady> :D

[17:18] <Rounin> ;)

[17:18] *** FROGGS joined
[17:19] <TimToady> maybe take down the world's financial infrastructure for an encore? :)

[17:20] <TimToady> oh wait, that's a job for the SSL folks these days

[17:21] <FROGGS> yay, looks like I fixed the jvm utf16 bug

[17:21] <Rounin> :>

[17:21] <FROGGS> btw, Java is odd

[17:22] <Rounin> With regards to Unicode or just in general

[17:22] <FROGGS> if (n % 2) { # expected Bool but got Integer?? really??

[17:22] <Rounin> Ah yes, it requires explicit bool types

[17:22] <FROGGS> and its understanding of unicode is like the wrong approach also :P

[17:23] <FROGGS> but perhaps it was a good idea when they decided how to do it

[17:23] <TimToady> well, it's at least a 20-years-out-of-date approach

[17:23] <Rounin> I think maybe everybody thought Unicode was going to be 16 bits wide when they chose UTF-16 for Java and Windows

[17:23] <TimToady> "16 bits should be good enough for anyone!"

[17:23] <Rounin> I'm glad everybody else chose UTF-8 though

[17:24] <TimToady> well, for certain values of "everybody"

[17:24] <Rounin> Haha yes

[17:26] * TimToady tends to get blank looks when he talks about Unicode in the Far East...

[17:26] <Rounin> Every .java file should have the word "char" replaced by "DO NOT USE THIS" before compilation

[17:26] <Rounin> And Char of course

[17:26] <Rounin> Or whatever its boxed type is called

[17:26] <Rounin> Character

[17:26] *** thou joined
[17:26] *** thou left
[17:27] <Rounin> Haha, that's a shame... That would probably be where it's most usseful

[17:27] <Rounin> You could talk about GB18030 instead and not mention Unicode :P

[17:27] *** guru joined
[17:28] <Rounin> "We convert it to uh... an internal format... before processing"

[17:28] *** prammer_ is now known as prammer

[17:28] *** guru is now known as ajr_

[17:28] <TimToady> well, there's more to the Far East than just GB-land

[17:28] <Rounin> True... And they all seem to have more than one encoding per country

[17:29] <Rounin> EUC-KR, codepage 949.. or was it 948... Shift-JIS 1, 2, 3 and I've lost count...

[17:29] <Rounin> One would think they'd beg for Unicode

[17:31] <colomon> okay.  If I pandabrew rebootstrap, I can install Shell::Command and it installs successfully

[17:32] <Rounin> \o/

[17:32] <colomon> If I try running my code script (which does "use Shell::Command"), it fails with Missing or wrong version of dependency 'lib/Shell/Command.pm'

[17:32] <colomon> If I try to install Shell::Command again, that process ALSO fails with Missing or wrong version of dependency 'lib/Shell/Command.pm'

[17:33] <Rounin> Could it just be that it's searching in the wrong base directory?

[17:33] <Rounin> It doesn't say where "lib" is in the file system

[17:34] *** xinming__ joined
[17:36] <colomon> https://gist.github.com/colomon/11000133 # same command works first time, fails the second

[17:37] *** xinming left
[17:38] *** sqirrel_ left
[17:43] <colomon> tadzik: ^^ 

[17:44] *** kivutar left
[17:45] <arnsholt> You know it's CS when the build system for the thesis has several layers of Makefiles

[17:49] <moritz> makefiles that generate makfiles that generate makefiles?

[17:52] <TimToady> sounds smarter than configures that write configures that write configures...

[17:54] *** rindolf left
[17:54] *** mtk joined
[17:57] *** SamuraiJack joined
[17:57] <arnsholt> moritz: Not quite that bad (yet)

[17:58] <arnsholt> But I do have a whole directory dedicated to the figures for a chapter, and associated scripts for generating data files and plot files

[17:58] *** btyler left
[18:01] * colomon 's $work has at least one makefile that fires off a Perl script which generates another makefile...

[18:02] <nwc10> I'm suspicious that we shoul actually change to do that in the perl 5 core, to exploit parallel makes

[18:03] <nwc10> specifically for building man pages

[18:05] *** treehug88 joined
[18:05] <vendethiel> FROGGS: I'm actually one in favor of "force if to take bool" :-p

[18:06] <TimToady> well, that's what we do in P6, it's just that most everything has a Bool meaning :)

[18:07] <hoelzro> jnthn: wonderful post

[18:07] *** treehug8_ left
[18:07] <hoelzro> I'm still reading it, but I'm really enjoying it =)

[18:07] *** btyler joined
[18:07] <vendethiel> ... which I'd fix with a module (though that might break inner workings)

[18:09] *** kivutar joined
[18:09] <tadzik> colomon: please remind me an hour from now :)

[18:09] <colomon> tadzik: I'll see what I can do

[18:12] <raydiak> good morning #perl6

[18:13] <timotimo> hello raydiak :)

[18:13] <timotimo> did you have the chance to look at p6bench yet?

[18:13] <raydiak> yes

[18:13] <raydiak> my fork has proper "fastest" calculations

[18:13] <raydiak> now what do I do with it?

[18:13] <timotimo> pullrequest it and i'll merge

[18:14] <raydiak> actually, I should test it with a larger dataset...do you want to do it, or can I d/l some data somewhere?

[18:14] <timotimo> i can give you data, hold on

[18:15] <timotimo> http://t.h8.lv/p6bench/timings.tar.gz

[18:15] <timotimo> otherwise i can just pull your changes and test it locally as well

[18:16] <timotimo> oh, another thing

[18:16] <timotimo> i've previously tried to ensure that at least 3 data points are always available, no matter what

[18:16] *** SamuraiJack left
[18:16] <timotimo> in the other branch

[18:16] <timotimo> i never got it to work, though

[18:17] <timotimo> especially for the forest fire and parse-json benchmarks this is interesting

[18:18] <timotimo> i need to re-build a working rakudo first :)

[18:20] <raydiak> http://cyberuniverses.com/perl6-bench/

[18:20] <raydiak> looks like it works, at first glance

[18:20] <timotimo> that's exactly how i had hoped it would look! :D

[18:21] <raydiak> \o/

[18:21] <raydiak> PR to japhb or your repo?

[18:21] <timotimo> japhb please

[18:22] <timotimo> i think i can delete my repository

[18:22] <timotimo> everything that was in there has already been merged

[18:23] *** hoverboard joined
[18:23] *** thou joined
[18:24] <dalek> perl6-bench: 13f386a | raydiak++ | analyze:

[18:24] <dalek> perl6-bench: Separate "fastest" rate for each X step on plot

[18:24] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/13f386a9ad

[18:24] <dalek> perl6-bench: e51d359 | raydiak++ | analyze:

[18:24] <dalek> perl6-bench: Re-add global fastest comparison to plot under scale fastest

[18:24] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/e51d35945d

[18:24] <dalek> perl6-bench: 489e92e | timo++ | analyze:

[18:24] <dalek> perl6-bench: Merge pull request #6 from raydiak/master

[18:24] <dalek> perl6-bench: 

[18:24] <dalek> perl6-bench: "Fastest" plot info improvements

[18:24] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/489e92ec6e

[18:24] *** denis_boyun_ joined
[18:25] *** denis_boyun left
[18:26] <raydiak> another issue: initially drawing all the charts on the page on a slow enough computer can freeze for long enough that it asks if I want to kill the script

[18:27] <timotimo> oh? wow.

[18:27] <timotimo> i have no idea how you could break that up into pieces

[18:27] <timotimo> though

[18:27] <timotimo> if the computer is slow enough for *that* to break, they're probably not interested in running any rakudo anyway :P

[18:28] <raydiak> wit's my computer :P

[18:28] <timotimo> oops :|

[18:28] <raydiak> haha

[18:30] <raydiak> nothing comes to mind for fixing it unless we switch to different plotting lib or don't have all the plots next to each other on the same page...guess I'll just file that away in the back of my mind for now

[18:32] <raydiak> I was thining about having just 1 chart, and then having controls for which test(s) it shows, because that would make the merge feature work too...but in that incarnation, you wouldn't be able to just scroll down 1 page and see all the test results

[18:32] <timotimo> aye.

[18:33] <raydiak> why is it important to have >= 3 data points?

[18:34] <timotimo> because it looks bad otherwise :)

[18:34] <timotimo> also, if you can come up with something clever to get rid of spikes farther to the left, that'd be pretty cool, too :)

[18:34] <raydiak> ?

[18:35] <timotimo> http://t.h8.lv/p6bench/2014-04-11-rakudo_opt.html - look at for example while_empty_native for rakudo-jvm or rakudo-parrot, there's big bumps to the left

[18:35] <timotimo> same with while_bind

[18:35] <timotimo> and there's sometimes bumps downward, too

[18:35] <timotimo> postwhile_nil_native has a pretty mean bump for rakudo-parrot there

[18:35] <timotimo> and loop_empty_native for the jvm

[18:36] <raydiak> what causes those?

[18:36] * masak builds Rakudo

[18:36] <timotimo> i suppose timing inaccuracy

[18:36] <timotimo> hopefully not background tasks going insane :)

[18:37] <raydiak> they seem to be bumps *up* tho?

[18:37] <timotimo> sometimes up, sometimes down

[18:38] <timotimo> might be errors during the "find out how long this test takes to compile and start up" time thingie

[18:38] <raydiak> it's not run in a vm like a vps or something, is it?

[18:38] <timotimo> o

[18:38] <timotimo> nope, it's on my desktop computer

[18:38] <masak> "Whenever you need to control the order of evaluation, macros are what you want." -- from the HN discussion. I like that rule of thumb.

[18:38] <timotimo> i make a point to close as much background software as possible and then i don't touch the desktop at all any more

[18:38] <timotimo> until it's done

[18:39] <raydiak> well, we could throw the outliers out, but mysterious missing data points would look kinda weird too

[18:45] <lizmat> jnthn: looking at the Supply.merge pb: it seems that with "on", the case with Supply => EnumMap is not working

[18:45] <masak> hey, something looks/feels different with the "Stage parse:" reporting :)

[18:45] *** sqirrel_ joined
[18:46] <lizmat> It shows the stage while doing it

[18:46] <masak> schweet.

[18:46] <lizmat> this was changed some weeks ago, afaik

[18:46] <masak> whoever++

[18:47] <TimToady> I think we're still reporting stages that will always be 0 though

[18:47] <masak> aye.

[18:47] <masak> ok, let's do this.

[18:47] <FROGGS> arnsholt++ # he did the stage print thingy

[18:47] <masak> release process starting.

[18:47] * masak throws a lever for dramatic effect

[18:47] <TimToady> <clunk!>

[18:48] <lizmat> ketjing!

[18:48] *** mtk left
[18:49] <masak> looks like the last two releases were nicknamed with the .pm in their name.

[18:50] <masak> I'm going to break that tradition, because it doesn't make much sense.

[18:50] <masak> the tags are still .pm-less.

[18:50] <lizmat> jnthn: if I rework SupplyOperations.zip to use the EnumMap syntax, it also fails (spectacularly, with a segfault)

[18:51] *** rindolf joined
[18:51] *** kaare__ joined
[18:51] * lizmat hates it she couldn't get Supply.merge to work before the release

[18:54] <masak> I hear there's another release within the next month or so, though.

[18:54] <dalek> rakudo/nom: 8d7a505 | masak++ | docs/announce/2014.04.md:

[18:54] <dalek> rakudo/nom: add stubbed release announcement

[18:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8d7a505412

[18:55] <masak> no suggestions for .pm names, I presume?

[18:55] * [Coke] , after having a year long release cycle nearly at work on the last revision, is now trying to compensate by doing weekly releases.

[18:56] * masak proposes "Rio"

[18:56] <masak> if I hear no counter-proposals, that's what we're getting.

[18:57] <lizmat> well, the other day, we had an Echt.pm meeting, the first in ~5 years  :-)

[18:57] <FROGGS> can I ask a thing in Java what it is an instance of?

[18:57] <FROGGS> like, without knowing it?

[18:58] <masak> lizmat: "Echt" it is.

[18:58] <lizmat> :-)

[18:58] <masak> FROGGS: what are you, a pervert? :P

[18:58] <FROGGS> :/

[18:59] <Rounin> Hmmmmm...

[18:59] <masak> FROGGS: obj.class, IIRC.

[18:59] *** darutoko left
[18:59] <FROGGS> I have a buf8, which is an instanceof VMArrayInstance_u8 for example

[18:59] <Rounin> http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#getClass%28%29

[18:59] <FROGGS> but buf16 is not an instanceof VMArrayInstance_u16...

[19:01] <dalek> rakudo/nom: ff24385 | masak++ | docs/announce/2014.04.md:

[19:01] <dalek> rakudo/nom: release, I christen thee "Echt"!

[19:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ff24385a1e

[19:02] *** dwarring joined
[19:04] <masak> tools/update-tai-utc.pl is still full of warnings.

[19:04] <[Coke]> echt? seems legit.

[19:04] <masak> I'm just going to disregard it and assume there were no leap seconds. someone correct me if that's a risky/wrong assumption.

[19:04] <tadzik> colomon: ok, looking at it now

[19:05] <colomon> oooo, good timing.  :)

[19:05] <tadzik> ah, yes, known :(

[19:05] <colomon> :(

[19:05] <tadzik> panda should really rebuild itself when one of its dependencies are updated

[19:05] <tadzik> I dunno if I have a ticket about it though

[19:05] <tadzik> I can probably look at this tomorrow

[19:06] <colomon> it's not just panda, though

[19:06] <colomon> everything that tries to use Shell::Command is borked

[19:07] *** kaare__ left
[19:07] <colomon> (not saying you can't look at it tomorrow, just that it's a bigger problem than panda being awkward

[19:07] <colomon> )

[19:08] <dalek> rakudo/nom: b39dd0b | masak++ | docs/announce/2014.04.md:

[19:08] <dalek> rakudo/nom: tentative list of changes in release

[19:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b39dd0be0e

[19:08] <masak> as usual, it's good to have multiple pairs of eyes on this list.

[19:08] <masak> anything missing? anything that's too trivial to include?

[19:08] <masak> comments/suggestions welcome.

[19:09] *** kivutar left
[19:09] *** FROGGS[mobile] left
[19:09] <colomon> tadzik: …. errr, or maybe it is just that.  After rebootstrap, I can run my script after all.  WTF?  Could have sworn that didn't work this morning.

[19:10] <lue> masak: looked at the wp page for leap second, none yet for 2014 it seems.

[19:10] <tadzik> colomon: well, panda depends on the old version of shell-command (old precompiled version). If you update it, the binary compatibility goes to hell and panda bails out

[19:10] <masak> lue: thanks, buddy.

[19:10] <tadzik> I should really fix these sort of things

[19:10] <FROGGS> masak: there are alos jvm+nativecall fixes

[19:11] <colomon> tadzik: but definitely if I try to install Shell::Command, it appears to work, but now Shell::Command DOESN'T work any more

[19:11] <lizmat> masak: I would remove the Bag.xkkv  

[19:11] <lue> (according to the chart, that question doesn't matter until June 30 anyway. So unless we missed the one from June 2012 (or Dec 2008, or...), rakudo should be good.)

[19:11] <lizmat> or spell it correctly: .kxxv  :-)

[19:11] <masak> FROGGS: should they be in docs/ChangeLog, too?

[19:11] <tadzik> colomon: hm, that's news

[19:11] *** rindolf left
[19:11] <lizmat> but prefer removal from announcement, as the name is still under debate

[19:11] <masak> lizmat: understood; removing :) and fixing spelling in ChangeLog.

[19:11] <lizmat> masak++

[19:12] * vendethiel .oO( why is masak removing that smiley from the ChangeLog ? )

[19:12] <dalek> rakudo/nom: 3b20616 | masak++ | docs/ChangeLog:

[19:12] <dalek> rakudo/nom: fix ChangeLog typo

[19:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3b2061666e

[19:12] <FROGGS> masak: NativeCall is kinda important, so I would mention that NativeCall passes all its tests on jvm backend too

[19:12] <lizmat> FROGGS++

[19:12] <dalek> rakudo/nom: 2916bff | masak++ | docs/announce/2014.04.md:

[19:12] <dalek> rakudo/nom: remove .xkkv from release announcement

[19:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2916bff887

[19:13] <masak> FROGGS: if you add it to docs/ChangeLog, I'll add it to the release announcement. deal? :)

[19:13] <masak> I'll buy a beer to whoever fixes whatever's wrong in tools/update-tai-utc.pl.

[19:14] <dalek> rakudo/nom: 3801758 | (Tobias Leich)++ | docs/ChangeLog:

[19:14] <dalek> rakudo/nom: add note about NativeCall passing all its tests

[19:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3801758357

[19:14] <FROGGS> :o)

[19:15] <masak> FROGGS++

[19:16] *** kaare__ joined
[19:16] <dalek> rakudo/nom: 3340712 | masak++ | docs/announce/2014.04.md:

[19:16] <dalek> rakudo/nom: copy NativeCall changelog entry to release announcement

[19:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/33407120cc

[19:17] <timotimo> FROGGS: except moarvm 32bit

[19:19] <dalek> rakudo/nom: a0e7e89 | masak++ | docs/announce/2014.04.md:

[19:19] <dalek> rakudo/nom: I present to you the contributors

[19:19] <dalek> rakudo/nom: 

[19:19] <dalek> rakudo/nom: Hoopy froods, all of them.

[19:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a0e7e89d39

[19:19] <masak> the release announcement is now "ready". I invite all people with eyes to review. kthx.

[19:22] <dalek> rakudo/nom: eaece08 | masak++ | docs/release_guide.pod:

[19:22] <dalek> rakudo/nom: append current release to end of release guide

[19:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eaece08b4d

[19:23] <masak> descending into NQP release sub-process.

[19:23] <awwaiid> y'all are invited to the DC-Baltimore Perl Workshop + Hackathon on May 3-4, btw.

[19:24] <segomos> i saw that place on the wire

[19:24] <lizmat> awwaiid: too bad I can't make it: too close to the NLPW  :-(

[19:25] <masak> the rule in the NQP release guide tells me *not* to upgrade the Parrot dependency.

[19:25] <moritz> masak: sounds correct to me

[19:25] <masak> (it's currently 6.1.0)

[19:26] <dalek> nqp: ccbebe3 | masak++ | tools/build/MOAR_REVISION:

[19:26] <dalek> nqp: bump moar dep to 2014.04

[19:26] <dalek> nqp: 

[19:26] <dalek> nqp: Thanks, jnthn++.

[19:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ccbebe3d7f

[19:26] <PerlJam> Has anyone tried building against parrot 6.3.0?

[19:27] <vendethiel> PerlJam: I tried to build rakudo with parrot yesterday. Did not go well.

[19:27] <moritz> vendethiel: with 6.1.0 or 6.3.0?

[19:27] <moritz> or something else entirely?

[19:28] <vendethiel> moritz: no idea :-). Just cloned rakudo and used --gen-parrot

[19:28] <dalek> nqp: bdb3259 | masak++ | VERSION:

[19:28] <dalek> nqp: bump VERSION to 2014.04

[19:28] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bdb3259a44

[19:28] <moritz> vendethiel: that'll be 6.1.0

[19:28] <vendethiel> (I cloned it literally 1 minute ago)

[19:28] <vendethiel> (I mean, 1 minute ago yesterday before building)

[19:30] <timotimo> i ought to contribute more so i move up on that list again :P

[19:34] <colomon> "NativeCall passes all its tests on jvm backend too"?!!! \o/

[19:34] <lue> I currently have 6.2.0, IIRC

[19:35] <lizmat> timotimo: perhaps the author order logic should include MoarVM commits as well 

[19:36] <lizmat> that would put me lower on the list for sure  :-)

[19:38] <masak> um. problem.

[19:38] <masak> https://gist.github.com/masak/11006944

[19:38] <masak> halp.

[19:39] <lizmat> doesn't ring a bell with me  :-(

[19:39] <FROGGS> install something that provides "jar"?

[19:39] <masak> I'm on Mint. what should I install?

[19:39] <masak> is this documented somewhere?

[19:39] <FROGGS> dunno, type "jar" and look for the suggestions?

[19:40] <masak> I have *javac*; how can I not have *jar*?

[19:40] <FROGGS> it is something about java archives

[19:40] <FROGGS> I dunno

[19:40] <masak> does `default-jdk` sound good?

[19:41] <FROGGS> I'd say so

[19:42] <masak> installing.

[19:43] * TimToady doesn't remember what he installed on mint

[19:44] <masak> yeah, now it works.

[19:44] <masak> FROGGS++

[19:45] <TimToady> which reminds me I was gonna upgrade to Mint 16

[19:45] <FROGGS> pheeew

[19:45] <TimToady> since 15 isn't sending out patches any more (*cough* openssl *cough*)

[19:46] <lue> TimToady: OpenSSL is preventing them from sending Mint 15 patches‽ I had no idea the bug was that serious :)

[19:46] <TimToady> though seems a little silly when 17 is coming out so soon

[19:50] *** perigrin joined
[19:51] <TimToady> lue: I suppose that depends on whether they're using https to fetch the patches...

[19:59] <thou> r: say $*OUT.t ?? 'yes' !! 'no'

[19:59] <camelia> rakudo-moar b39dd0: OUTPUT«Cannot find method 'isatty': no method cache and no .^find_method␤  in method t at src/gen/m-CORE.setting:13750␤  in block  at /tmp/tmpfile:1␤␤»

[19:59] <camelia> ..rakudo-jvm b39dd0: OUTPUT«No such method 'isatty' for invocant of type 'BOOTIO'␤  in method t at gen/jvm/CORE.setting:13693␤  in block  at /tmp/tmpfile:1␤␤»

[19:59] <camelia> ..rakudo-parrot b39dd0: OUTPUT«no␤»

[19:59] *** gdey joined
[20:01] *** kurahaupo left
[20:02] <masak> building NQP. taking a loooong time.

[20:03] *** sqirrel_ left
[20:08] *** kurahaupo joined
[20:08] <TimToady> .oO(masak needs a stage coach)

[20:10] <lue> TimToady: ooc, do you have any objections/concerns to the number literals section I added to S15 recently?

[20:11] <TimToady> well, some of it seems like a solution looking for a problem

[20:11] *** kbaker_ left
[20:12] <TimToady> circled number as big digits seems to fall into that category just a bit

[20:13] <lue> TimToady: agreed, though that mainly comes from wanting to use a general "integral Number Value" rule to decide what digits are.

[20:13] <[Coke]> http://perlcabal.org/syn/S15.html - 404

[20:14] <[Coke]> What's the blocker on getting that rendering?

[20:14] <timotimo> TimToady: only the server side of HTTPS connections are vulnerable i thought?

[20:14] <lue> (though whether :radix<> should support radices > 36 is of course debatable, and that's the only place where ㊿ would appear)

[20:14] <lue> [Coke]: I'm working on the replacement for the current synopsis generator, which is what's needed to automate generation of S15.

[20:15] <TimToady> it doesn't really seem to buy much over the current :radix[] notation

[20:15] <[Coke]> can we not show the link to the 404 in the meantime?

[20:15] <retupmoca> timotimo: if the client is using a bad version of openssl, it's vulnerable as well

[20:15] <timotimo> oh crap

[20:15] <timotimo> if the server is malevolent?

[20:16] <timotimo> i have an older mint, too

[20:16] <TimToady> timotimo: and I run a web server too

[20:16] <timotimo> i wanted to wait for a new hard drive to arrive so i can have a fresh installation and the old one for disaster recovery

[20:18] <TimToady> though I'm actually more worried about my DSL router, which uses https to program it, sign

[20:18] <TimToady> *sigh even

[20:18] <lue> TimToady: does Unicode define what characters belong to certain digit ranges? (E.g. 0..9 is arabic, ߀..߉ is NKo ...)

[20:19] <TimToady> it distinguished valid decimal digits from other numeric values

[20:19] <TimToady> or if you mean which block they're in, you can do that too

[20:20] <TimToady> m: say uniprop('߉', 'block')

[20:20] <camelia> rakudo-moar b39dd0: OUTPUT«NKo␤»

[20:20] <lue> I don't think there are any non-decimal digit ranges, right?

[20:20] <TimToady> nope

[20:20] <TimToady> I mean, yup

[20:21] * masak just pushed NQP tag 2014.04

[20:21] <TimToady> m: say uniprop('߉', 'decimal')

[20:21] <camelia> rakudo-moar b39dd0: OUTPUT«Decimal␤»

[20:22] <TimToady> m: say unimatch('߉', 'decimal')

[20:22] <camelia> rakudo-moar b39dd0: OUTPUT«True␤»

[20:23] <TimToady> m: say unimatch('Ⅵ', 'decimal')

[20:23] <camelia> rakudo-moar b39dd0: OUTPUT«False␤»

[20:23] <masak> I don't have the proper private ssh key on this computer it turns out. ++someone is welcome to put http://masak.org/carl/tmp/nqp-2014.04.tar.gz in the right place. (on [email@hidden.address] )

[20:23] *** gtodd joined
[20:23] <lue> The rule could change from "integral NV" to "Category Nd", though that leaves out certain 0..9,10,20,30,... sets in No.

[20:25] <PerlJam> masak: done.  

[20:26] <timotimo> raydiak: when will you have time free for perl6-bench again?

[20:27] <lue> ( :51<㊿⑫③> is a cool trick, but that's about it, so I don't mind losing it and letting a module implement it :) . )

[20:27] <masak> PerlJam: thank you.

[20:27] <masak> this concludes the NQP release sub-process.

[20:27] <masak> back to Rakudo's.

[20:27] <[Coke]> that's not a cool trick, it's unreadable.

[20:28] <lue> [Coke]: that's clearly :51[50, 12, 3] in Unicode Form™. :)

[20:28] <[Coke]> would the literals allow pulling digits from different blocks together, like: 12③ == 123 ?

[20:28] <timotimo> it looks pretty garbled in my terminal :P

[20:28] <flussence> .oO( weird how I've got fonts to display ㊿ and ③ in my terminal, but not ⑫... )

[20:29] <lue> [Coke]: that's a natural consequence of Unicode not providing explicit numeric ranges (even if/when the spec switches to a "Nd category" rule, that'll still be possible.)

[20:29] *** vendethiel left
[20:30] <masak> +1 on losing that feature and letting a module implement it

[20:30] <[Coke]> lue, the 12③ thing? I would say we wouldn't want to allow that sort of thing

[20:31] <dalek> rakudo/nom: 6e22eff | masak++ | tools/build/NQP_REVISION:

[20:31] <dalek> rakudo/nom: [release] bump NQP revision

[20:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6e22effb38

[20:31] <dalek> rakudo/nom: 6f0b1d3 | masak++ | VERSION:

[20:31] <dalek> rakudo/nom: [release] bump VERSION

[20:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6f0b1d37a3

[20:32] * lue wonders if Unicode would implement numeric ranges as an explicit property, rather than something you have to figure out manually.

[20:33] <gtodd> Hello perl6 ... :-)

[20:34] *** vendethiel joined
[20:34] <lue> [Coke]: that would involve constructing the ranges ourselves, like we do for .succ/.pred, but in the grammar instead of the setting. I'd much rather just let people mix them together, with the understanding that you might confuse people.

[20:34] <gtodd> Q: about a 5-ism ... how to translate or think about it in perl6 ...

[20:34] <gtodd> $num="2947341"; ($lowest_odd) = sort $num =~ /[13579]/g

[20:35] <masak> gtodd! \o/

[20:35] <PerlJam> gtodd: $lowest_odd = 1;  # there!  ;)

[20:35] <gtodd> $lowest_odd ends up as 1 ... this may be a form of context abuse

[20:35] <masak> gtodd: you might want to have a look at .comb

[20:36] <masak> r: $num = "2947341"; say for $num.comb(/<[13579]>/)

[20:36] <masak> r: $num = "2947341"; .say for $num.comb(/<[13579]>/)

[20:36] <gtodd> masak: it works on evens and when the lowest value is > 1 too ;-)

[20:36] <gtodd> oh cool

[20:36] <camelia> rakudo-parrot eaece0, rakudo-jvm eaece0, rakudo-moar eaece0: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Variable '$num' is not declared␤at /tmp/tmpfile:1␤------> $num⏏ = "2947341"; say for $num.comb(/<[13579␤    expecting an…»

[20:36] <camelia> rakudo-parrot eaece0, rakudo-jvm eaece0, rakudo-moar eaece0: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Variable '$num' is not declared␤at /tmp/tmpfile:1␤------> $num⏏ = "2947341"; .say for $num.comb(/<[1357␤    expecting an…»

[20:36] <masak> r: my $num = "2947341"; .say for $num.comb(/<[13579]>/)

[20:36] <camelia> rakudo-parrot eaece0, rakudo-jvm eaece0, rakudo-moar eaece0: OUTPUT«9␤7␤3␤1␤»

[20:36] <gtodd> I have the perfect stackoverflow codegofl entry for this :-D

[20:36] <masak> :)

[20:37] <gtodd> I was amazed to see perl6 there and looking *very* spiffy and readable !

[20:37] <PerlJam> But don't use sort to find the smallest, just use .min

[20:38] <gtodd> hmm yes strings are objects

[20:38] <timotimo> r: .say for "2947341" ~~ m:ex/(\d+) { $0 !%% 2 }/

[20:38] <camelia> rakudo-parrot eaece0, rakudo-jvm eaece0, rakudo-moar eaece0: OUTPUT«False␤»

[20:38] <timotimo> shouldn't that give me all odd numbers that are in that string?

[20:38] <gtodd> r:  my$x="343277";say $x;if $x~~m/2|4|6|8/ {say "$/,",$/.from+1} else {say "-1,0"}

[20:39] <camelia> rakudo-parrot eaece0, rakudo-jvm eaece0, rakudo-moar eaece0: OUTPUT«343277␤4,2␤»

[20:39] <gtodd> that is what I want to fix :-)

[20:39] <timotimo> like 29 2947 29473 2947341 47 473 47341 ... ?

[20:40] *** vendethiel left
[20:42] *** vendethiel joined
[20:43] <vendethiel> timotimo: with that +; it should check if the whole is odd, no ?

[20:43] <timotimo> yes

[20:43] <timotimo> but it should backtrace and try from every position, because i put :ex there

[20:43] <vendethiel> r: .say for "2947341" ~~ m:ex/[(\d) { $0 !%% 2 }]+/

[20:43] <camelia> rakudo-parrot eaece0, rakudo-jvm eaece0, rakudo-moar eaece0: OUTPUT«False␤»

[20:44] * vendethiel can't perl6 anyway

[20:44] *** kaare__ left
[20:45] <lue> r: say "abcde" ~~ m:ex/<alpha>+/

[20:45] <camelia> rakudo-parrot eaece0, rakudo-jvm eaece0, rakudo-moar eaece0: OUTPUT«False␤»

[20:45] <timotimo> did we break that?

[20:45] <timotimo> if so, why didn't the tests catch it?

[20:45] <PerlJam> looks like it's broken to me.

[20:45] <lue> I'm not sure if :ex and/or :ov ever worked in rakudo, but I could be wrong.

[20:46] <timotimo> r: .say for "foobarbaz" ~~ m:i:ex/<alpha>+/

[20:46] <camelia> rakudo-parrot eaece0, rakudo-jvm eaece0, rakudo-moar eaece0: OUTPUT«False␤»

[20:46] <timotimo> r: .say for "foobarbaz" ~~ m:i/<alpha>+/

[20:46] <camelia> rakudo-parrot eaece0, rakudo-jvm eaece0, rakudo-moar eaece0: OUTPUT«｢foobarbaz｣␤ alpha => ｢f｣␤ alpha => ｢o｣␤ alpha => ｢o｣␤ alpha => ｢b｣␤ alpha => ｢a｣␤ alpha => ｢r｣␤ alpha => ｢b｣␤ alpha => ｢a｣␤ alpha => ｢z｣␤␤»

[20:46] <timotimo> r: .say for "foobarbaz" ~~ m:exhaustive/<alpha>+/

[20:46] <camelia> rakudo-parrot eaece0, rakudo-jvm eaece0, rakudo-moar eaece0: OUTPUT«False␤»

[20:46] <timotimo> r: .say for "foobarbaz" ~~ m:overlap/<alpha>+/

[20:46] <camelia> rakudo-parrot eaece0, rakudo-jvm eaece0, rakudo-moar eaece0: OUTPUT«False␤»

[20:46] <timotimo> o_O

[20:47] <timotimo> https://github.com/perl6/roast/blob/master/S05-modifier/exhaustive.t#L9-L150 - well, we have this

[20:47] <FROGGS> masak: is it allowed to push to nom again?

[20:47] <timotimo> it's not in our spectest.data

[20:48] <dalek> roast: cbeb43b | (Elizabeth Mattijsen)++ | S17-concurrency/supply.t:

[20:48] <dalek> roast: Tests Supply.map; Supply.merge breaks still

[20:48] <dalek> roast: 

[20:48] <dalek> roast: But found the reason.  But no fix yet :-(

[20:48] <dalek> roast: review: https://github.com/perl6/roast/commit/cbeb43be20

[20:49] <FROGGS> err, actually I want to push to nqp

[20:49] <timotimo> has the release been tagged the right way this time?

[20:49] <masak> FROGGS: allowed to push to either, but you won't make the release.

[20:49] <masak> timotimo: please be more specific?

[20:50] <timotimo> i think -a is the flag we want?

[20:50] <masak> timotimo: -m implies -a

[20:50] <FROGGS> masak: that is the point, I do not want to have it in the current release

[20:50] <timotimo> there was something about the tags we've been making recently that was causing the tag not to properly work with "git describe" or something?

[20:50] <masak> timotimo: so if you just follow the instructions in the release guide, everything should be fine.

[20:50] <masak> timotimo: git describe by default doesn't see lightweight tags.

[20:50] <timotimo> unfortunately i don't really remember :(

[20:51] <masak> man, it's good to have Git at my fingertips. :)

[20:51] <masak> $dayjob++

[20:51] <timotimo> ah, so lightweight was the wrong thing and you're already doing it right if you have -m?

[20:51] <masak> timotimo: an annotated tag is created by either -a, -m, or -s

[20:51] <masak> timotimo: release guide says to use -m, which is a bit meaningless in our case, but doesn't hurt.

[20:51] <timotimo> fair enough

[20:51] <masak> timotimo: I used it (for NQP).

[20:51] <masak> and will, for Rakudo.

[20:52] <masak> still building from realclean.

[20:52] <timotimo> good :)

[20:53] <FROGGS> and I also see the tags for nqp+moar

[20:53] *** LLamaRider joined
[20:53] <masak> hm, the release guides even write -a explicitly. though that's redundant when -m is there.

[20:53] <vendethiel> m: [*]1..3

[20:53] <camelia> rakudo-moar eaece0: OUTPUT«===SORRY!=== Error while compiling /tmp/jUgWp0Wgoy␤Two terms in a row␤at /tmp/jUgWp0Wgoy:1␤------> [*]⏏1..3␤    expecting any of:␤        argument list␤        postfix␤        infix stopper␤        inf…»

[20:53] <FROGGS> redundant is fine for releases me thinks

[20:53] <PerlJam> redundancy++ :)

[20:54] <masak> agreed. it doesn't hurt.

[20:54] <vendethiel> m: say'foo'

[20:54] <camelia> rakudo-moar eaece0: OUTPUT«===SORRY!=== Error while compiling /tmp/j_BXIajAea␤Two terms in a row␤at /tmp/j_BXIajAea:1␤------> say'foo⏏'␤    expecting any of:␤        argument list␤        postfix␤        infix stopper␤        in…»

[20:56] <masak> vendethiel: spaces are good, m'kay? :)

[20:57] <vendethiel> yes sir :-)

[20:57] * vendethiel just looks at codegolf p6 answers

[20:59] <timotimo> i wonder if we should start signing our commits with gpg keys? :3

[20:59] *** adu joined
[20:59] <gtodd> jeez

[21:00] <dalek> specs: de83968 | lue++ | S15-unicode.pod:

[21:00] <dalek> specs: [S15] Change what a numeric literal can be.

[21:00] <dalek> specs: 

[21:00] <dalek> specs: Instead of "integral Numeric Value", it's now "category Nd". This leaves

[21:00] <dalek> specs: out some potentially useful digit ranges in category No, which can be

[21:00] <dalek> specs: dealt with as needed.

[21:00] <dalek> specs: review: https://github.com/perl6/specs/commit/de8396860b

[21:00] <gtodd> I had spent 6 months forgetting about it but now I have to have .comb :-|

[21:00] <gtodd> must ... have 

[21:01] <timotimo> in perl5? :)

[21:01] *** dayangkun_ left
[21:03] * lue ponders a proposal for Unicode to have a "digit set" property or similar, so Perl 6 wouldn't have to do it itself with, e.g., .succ :)

[21:03] <gtodd> heh  yeah  ;-)

[21:04] * masak .oO( not having digit set kinda .succ )

[21:06] <lue> You can't use script or block properties for it. e.g.: ② and ㊿ are of different blocks, despite seeming related, yet 2 and ㊿ are of the same script, despite being wildly different :)

[21:07] <timotimo> hmm

[21:08] <timotimo> what piece of documentation on doc.perl6.org should i devote my attention to as soon as i'm in the doc improvement mood?

[21:10] *** bluescreen100 left
[21:15] <dalek> nqp: 41b67f4 | (Tobias Leich)++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[21:15] <dalek> nqp: [jvm] fix decoding of bufs for bufs that do not match encoding bit width

[21:15] <dalek> nqp: 

[21:15] <dalek> nqp: When we want to decode a buf8 to utf16, we have to take two elems, assemble

[21:15] <dalek> nqp: what Java thinks is a codepoint and append that to our StringBuilder. For

[21:15] <dalek> nqp: buf32->utf16 we do the opposite and for buf16->utf16 we get away with

[21:15] <dalek> nqp: appending the elems to the StringBuilder.

[21:15] <dalek> nqp: Note: Since StringBuilder does not distinguish between utf16 and utf32, we

[21:15] <dalek> nqp: treat them equally until we know better.

[21:15] <dalek> nqp: review: https://github.com/perl6/nqp/commit/41b67f4546

[21:15] <gtodd> r:  $_='33392';$n=.comb(/<[2468]>/).min;/$n/;$/.from//-1,",$/"

[21:15] <camelia> rakudo-parrot eaece0, rakudo-jvm eaece0, rakudo-moar eaece0: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Variable '$n' is not declared␤at /tmp/tmpfile:1␤------> $_='33392';$n⏏=.comb(/<[2468]>/).min;/$n/;$/.from//-1,␤    expec…»

[21:16] <gtodd> k

[21:16] <gtodd> r: $_="333992";$n=.comb(/<[2468]>/).min;/$n/;$/.from//-1,",$/"

[21:16] <camelia> rakudo-parrot eaece0, rakudo-jvm eaece0, rakudo-moar eaece0: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Variable '$n' is not declared␤at /tmp/tmpfile:1␤------> $_="333992";$n⏏=.comb(/<[2468]>/).min;/$n/;$/.from//-1,␤    expe…»

[21:16] <gtodd> :P

[21:16] *** dayangkun_ joined
[21:17] <gtodd> almost there ... works in the REPL ;-) cheers

[21:17] *** LLamaRider left
[21:17] * gtodd goes away for awhile

[21:17] *** adu left
[21:18] *** dragon_d joined
[21:18] <FROGGS> jnthn: the post release nqp patch fixes https://gist.github.com/FROGGS/0ea5537eb675588baaa2#file-modules-test-j-sh-L30

[21:19] <masak> gtodd: it probably works in the REPL because there you had already declared 'my $n'

[21:20] *** BenGoldberg joined
[21:35] <[Coke]> mouq++ #ticket maint.

[21:36] *** Sqirrel_ joined
[21:36] *** Sqirrel left
[21:40] *** denis_boyun_ left
[21:42] *** kurahaupo left
[21:46] <timotimo> who agrees with me that the exceptions in doc.perl6.org ought to go in their own section, preferably even after routines?

[21:48] <lue> +1

[21:49] *** kurahaupo joined
[21:51] *** BenGoldberg left
[21:52] <timotimo> interesting

[21:53] <timotimo> index.pl in perl6/doc seems to rely on dir("lib") returning paths that need to have "lib/" prepended in order to work

[21:54] *** treehug88 left
[21:55] *** BenGoldberg joined
[21:55] <masak> that has shifted a bit during the existence of &dir

[21:55] <timotimo> p: .say for dir()

[21:55] <camelia> rakudo-parrot 6f0b1d: OUTPUT«IO::Path<.lesshst>␤IO::Path<rakudo-star-2014.03.tar.gz>␤IO::Path<.viminfo>␤IO::Path<star-2014.03>␤IO::Path<.ghc>␤IO::Path<rakudo>␤IO::Path<rakudo-inst-2>␤IO::Path<rakudo-inst-1>␤IO::Path<nohup.out>␤IO::Path<std>␤IO::Path<.bash_history…»

[21:55] <timotimo> p: .say for dir(".ghc/")

[21:55] <masak> though I don't remember how many times or in which directions, or how recently.

[21:55] <camelia> rakudo-parrot 6f0b1d: OUTPUT«IO::Path<.ghc/x86_64-linux-7.6.2>␤»

[21:56] <timotimo> p6: .say for dir(".ghc/")

[21:56] *** kurahaupo_mobile joined
[21:56] <camelia> rakudo-jvm 6f0b1d: OUTPUT«Failed to get the directory contents of '.ghc/': nqp::opendir: unable to get a DirectoryStream␤  in block  at gen/jvm/CORE.setting:13966␤  in method contents at gen/jvm/CORE.setting:13972␤  in sub dir at gen/jvm/CORE.setting:14002␤  in block  at /tm…»

[21:56] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«Unhandled exception: dir may not be used in safe mode␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (dir @ 0) ␤  at /tmp/tmpfile line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4595 (ANON @ 3) ␤  at /home/p6eval/niecza…»

[21:56] <camelia> ..rakudo-parrot 6f0b1d, rakudo-moar 6f0b1d: OUTPUT«IO::Path<.ghc/x86_64-linux-7.6.2>␤»

[21:56] *** kurahaupo left
[21:56] <timotimo> so at least parrot and moar agree on this

[21:57] *** kurahaupo_mobile is now known as kurahaupo

[21:58] *** Rotwang left
[22:01] <dalek> doc: 4db9132 | (Timo Paulssen)++ | htmlify.pl:

[22:01] <dalek> doc: move all exceptions into their own category at the very end

[22:01] <dalek> doc: review: https://github.com/perl6/doc/commit/4db913249f

[22:01] <timotimo> that's much cleaner IMO

[22:03] <masak> make: *** No rule to make target `stresstest'.  Stop.

[22:04] <masak> indeed, there's p-stresstest, j-stresstest, m-stresstest, but no stresstest.

[22:04] <masak> the release_guide is charmingly outdated on this point.

[22:04] *** kurahaupo_mobile joined
[22:04] <masak> hm, or the Makefile should have a target that combines those.

[22:04] * masak temporarily adds one

[22:04] *** kurahaupo left
[22:04] *** hummeleB1 left
[22:07] *** kurahaupo joined
[22:07] <lue> syngen is currently 10 minutes faster on feather than on my machine (≈30m vs. ≈20m) :)

[22:09] *** kurahaupo_mobile left
[22:09] <timotimo> what's the difference between those machines?

[22:10] <timotimo> i didn't expect feather to be beefy

[22:11] <lue> Well, it's not like my computer is the newest, so... :)

[22:13] <timotimo> OK

[22:14] <lue> For reference, it took me "1730 wallclock secs" to run m-spectest a short while ago.

[22:16] <timotimo> how many concurent test jobs?

[22:16] *** ajr_ left
[22:17] <timotimo> how do i refer to a private attribute of a non-self instance of my own class again?

[22:17] <lue> the line was just  'make m-spectest', I didn't think -j did anything

[22:17] *** Mouq joined
[22:17] <Mouq> o/

[22:17] <lue> \o

[22:17] <Mouq> timotimo++ are you planning on generating a new doc.perl6.org? I'm all set up to right now

[22:17] <timotimo> -j won't change that

[22:18] <Mouq> if you're not

[22:18] <timotimo> Mouq: i'm not, please do it for me :)

[22:18] <Mouq> timotimo: Ok :)

[22:21] <lue> timotimo: how do you change it then, ooc?

[22:21] <timotimo> TEST_JOBS=n

[22:22] <lue> so, -j to run multiple backends' tests, and TEST_JOBS to run each spectest in a concurrent fashion. :)

[22:23] <timotimo> yup

[22:24] <lue> Now that I know, it'll be interesting to see what TEST_JOBS does for me.

[22:24] <gtodd> masak: doh ... seriously I can barley read the output in this IRC client :-)

[22:24] *** adu joined
[22:25] <gtodd> barely even 

[22:26] *** treehug88 joined
[22:26] *** treehug88 left
[22:29] *** treehug88 joined
[22:29] *** treehug88 left
[22:29] <Mouq> timotimo: Done :)

[22:29] <timotimo> much better, aye?

[22:30] *** treehug88 joined
[22:31] <masak> gtodd: get a better IRC client?

[22:32] *** colomon left
[22:32] <timotimo> http://doc.perl6.org/language/objects#Role_Application - is the R1, R2 thing really the right way around?

[22:34] <masak> http://masak.org/carl/tmp/rakudo-2014.04.tar.gz ready for upload to the appropriate area. PerlJam++, still there?

[22:35] <masak> (and rakudo tagged)

[22:36] <masak> timotimo: in `class C does R2 does R1 { }`, order doesn't matter between the roles. either there is a conflict or there isn't.

[22:36] <masak> timotimo: having said that, I think writing it that way (essentially backwards) is confusing.

[22:37] <gtodd> Mouq: I just commented on your SO codegolf ... I translated my perl5 with Masak and Camelia ;-)

[22:37] <lue> It gives off an expansion feel though: C does R2 in the first case could be seen as something like  C does (R2 does R1)

[22:38] *** btyler left
[22:38] <timotimo> OK

[22:38] <timotimo> i'm about to patch that file, masak. so should i reverse R1 and R2 there?

[22:39] <masak> IMO, yes.

[22:40] <masak> anyone who is competent enough to manage the build system of Rakudo -- please add a 'stresstest' target. it is currently missing, but the release guide assumes it's present.

[22:40] <gtodd> Mouq: not really astonished at how unreadable  so many golfed languages are  (errm "linenoise anyone? but idioms are like that) still though perl6 really stays very readable in golf mode

[22:40] <timotimo> gtodd: or rather: it doesn't get much more unreadable ;)

[22:40] <Mouq> gtodd: Thanks! :)

[22:40] <gtodd> haha

[22:40] <Mouq> m: $_="333992";/<{.comb(/<[2468]>/).min}>/;say $/.from//-1,",$/"

[22:41] <lue> timotimo: I personally think the current order better conveys a sense of substitution, like I demonstrated above. But I guess it doesn't matter.

[22:41] <camelia> rakudo-moar 6f0b1d: OUTPUT«5,2␤»

[22:41] <lue> (would Door #3 be to mention that the order doesn't matter?)

[22:41] <dalek> doc: 91f0dca | (Timo Paulssen)++ | lib/objects.pod:

[22:41] <dalek> doc: elaborate a bit on the objects tut.

[22:41] <dalek> doc: review: https://github.com/perl6/doc/commit/91f0dca485

[22:41] <masak> I'm currently blocking on someone uploading the tarball.

[22:41] <timotimo> feel free to review

[22:41] *** colomon joined
[22:41] <timotimo> (and Mouq, feel free to rebuild and re-upload)

[22:41] <gtodd> Mouq: \o/ 

[22:41] <Mouq> gtodd: That fails on all-odd, though

[22:42] <Mouq> bbiab

[22:42] <gtodd> Mouq:  doh ... I think the one I put up worked but was quite long ...  if else etc

[22:43] <gtodd> and I just cargo coded ;-)

[22:43] <timotimo> i can't access rakudo.org via ssh right now

[22:43] <timotimo> masak: otherwise i'd've done it for you

[22:44] <gtodd> .comb should have a unicode short cut ... .UNICODE_COMB_DRAWING

[22:46] *** LLamaRider joined
[22:46] <dalek> rakudo/nom: 4b9d8c6 | lue++ | Configure.pl:

[22:46] <dalek> rakudo/nom: Add all-backends 'stresstest' target for Makefile.

[22:46] <dalek> rakudo/nom: 

[22:46] <dalek> rakudo/nom: Thanks to masak++ for noticing.

[22:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4b9d8c6e7f

[22:46] <masak> lue++

[22:47] <masak> I'm done with the Rakudo release, except I'm blocking on the upload.

[22:47] <masak> still a bit jetlagged, and not really eager to stay up for much longer.

[22:47] <masak> parting instructions:

[22:48] <masak> (a) anyone who has the SSH keys, feel free to upload http://masak.org/carl/tmp/rakudo-2014.04.tar.gz to the appropriate place

[22:48] <timotimo> and also the nqp tarball?

[22:49] <masak> PerlJam++ uploaded that one already.

[22:49] *** dmol left
[22:49] <masak> (b) sending out the p6c announcement and updating the Wikipedia article -- *not* before (a) has been done -- can either be done by other people while I'm asleep, or I'll get to it first thing tomorrow morning, jetlag-time.

[22:50] <dalek> doc: 976bd5f | (Timo Paulssen)++ | lib/operators.pod:

[22:50] <dalek> doc: typo: $++x instead of ++$x

[22:50] <dalek> doc: review: https://github.com/perl6/doc/commit/976bd5f765

[22:50] <masak> that's all, I think.

[22:50] <masak> 'night, #perl6

[22:50] <lue> ♞ masak o/

[22:50] <timotimo> gnite masak, and good work!

[22:50] <timotimo> sleep well!

[22:54] <masak> thanks, I most certainly will.

[22:54] <Mouq> 'night masak!

[22:54] <Mouq> timotimo: I'll regen doc in a bit

[22:55] <Mouq> gtodd: Gimme a little while and I'll look at it

[22:55] <timotimo> hold on

[22:55] <timotimo> r: say 1 cmp 5

[22:55] <camelia> rakudo-parrot 6f0b1d, rakudo-jvm 6f0b1d, rakudo-moar 6f0b1d: OUTPUT«Less␤»

[22:55] <timotimo> r: say 5 cmp 5

[22:55] <timotimo> r: say 7 cmp 5

[22:55] <camelia> rakudo-parrot 6f0b1d, rakudo-jvm 6f0b1d, rakudo-moar 6f0b1d: OUTPUT«Same␤»

[22:55] <camelia> rakudo-parrot 6f0b1d, rakudo-jvm 6f0b1d, rakudo-moar 6f0b1d: OUTPUT«More␤»

[22:55] <timotimo> the docs are outdated! :)

[22:56] <dalek> doc: 4082c42 | (Timo Paulssen)++ | lib/operators.pod:

[22:56] <dalek> doc: increase/decrease have been renamed less/more.

[22:56] <dalek> doc: review: https://github.com/perl6/doc/commit/4082c42367

[23:01] <timotimo> r: say 1, 2, 4, 8, 16 ... 8

[23:01] <camelia> rakudo-parrot 6f0b1d, rakudo-jvm 6f0b1d, rakudo-moar 6f0b1d: OUTPUT«1 2 4 8␤»

[23:04] *** hoverboard left
[23:05] <dalek> doc: f8540de | (Timo Paulssen)++ | lib/operators.pod:

[23:05] <dalek> doc: ... checks initial elements against endpoint, too

[23:05] <dalek> doc: review: https://github.com/perl6/doc/commit/f8540de10a

[23:10] <lue> Mouq: there's no such scheme specified (AFAIK), but I'd fully support syn: for the synopses (L<syn:S02>, L<syn:A12>, ...)

[23:14] <Mouq> timotimo: That '$++x' should probably be '$x++' based on the comments

[23:14] <Mouq> Yeah "postfix ++"

[23:14] <Mouq> As in timotimo++ :}

[23:14] <Mouq> *:)

[23:15] <timotimo> er, it should? oops :)(

[23:15] <timotimo> :)

[23:15] <Mouq> lue: Oh, I think you're right that it's not in S26… I'll add it

[23:15] <timotimo> there we go

[23:15] <dalek> doc: 417e4c4 | (Timo Paulssen)++ | lib/regexes.pod:

[23:15] <dalek> doc: fix a typo'd formatting code

[23:15] <dalek> doc: review: https://github.com/perl6/doc/commit/417e4c46ab

[23:15] <dalek> doc: a6ff140 | (Timo Paulssen)++ | lib/operators.pod:

[23:15] <dalek> doc: oops. this is the correct fix.

[23:16] <dalek> doc: review: https://github.com/perl6/doc/commit/a6ff1401ab

[23:16] <Mouq> m: $_="33399";/<{.comb(/<[2468]>/).min}>/;say $/.from//-1,",$/"

[23:16] <camelia> rakudo-moar 6f0b1d: OUTPUT«This type cannot unbox to a native string␤  in sub MAKE_REGEX at src/gen/m-CORE.setting:12959␤  in block  at src/gen/m-CORE.setting:12897␤  in method reify at src/gen/m-CORE.setting:7686␤  in method reify at src/gen/m-CORE.setting:7549␤  in metho…»

[23:17] <Mouq> m: $_="33399";/<{.comb(/<[2468]>/).min||Any}>/;say $/.from//-1,",$/"

[23:17] <camelia> rakudo-moar 6f0b1d: OUTPUT«This type cannot unbox to a native string␤  in sub MAKE_REGEX at src/gen/m-CORE.setting:12959␤  in block  at src/gen/m-CORE.setting:12897␤  in method reify at src/gen/m-CORE.setting:7686␤  in method reify at src/gen/m-CORE.setting:7549␤  in metho…»

[23:17] <Mouq> m: "abcd"~~/<{Any}>/ # Arguably Rakudobug, though I'm guessing it's undefined behaviour

[23:17] <camelia> rakudo-moar 6f0b1d: ( no output )

[23:17] <Mouq> Oh

[23:17] <timotimo> m: say "!!!" ~~ / <[!]>+ /

[23:17] <camelia> rakudo-moar 6f0b1d: OUTPUT«｢!!!｣␤␤»

[23:18] <timotimo> m: say "!!!" ~~ / <[\!]>+ /

[23:18] <camelia> rakudo-moar 6f0b1d: OUTPUT«｢!!!｣␤␤»

[23:18] <Mouq> m: "abcd"~~/<{Nil}>/

[23:18] <camelia> rakudo-moar 6f0b1d: ( no output )

[23:18] <timotimo> m: say "..!!!." ~~ / <[.]>+ /

[23:18] <camelia> rakudo-moar 6f0b1d: OUTPUT«｢..｣␤␤»

[23:18] <Mouq> m: say "abcd"~~/<{Nil}>/

[23:18] <camelia> rakudo-moar 6f0b1d: OUTPUT«Nil␤»

[23:18] <Mouq> :?

[23:18] <timotimo> m: say "..!!!./\\" ~~ / <[/]>+ /

[23:18] *** LLamaRider left
[23:18] <camelia> rakudo-moar 6f0b1d: OUTPUT«｢/｣␤␤»

[23:18] <Mouq> m: say "abcd"~~/<{+"14"}>/

[23:18] <camelia> rakudo-moar 6f0b1d: OUTPUT«This type cannot unbox to a native string␤  in sub MAKE_REGEX at src/gen/m-CORE.setting:12959␤  in block  at src/gen/m-CORE.setting:12897␤  in method reify at src/gen/m-CORE.setting:7686␤  in method reify at src/gen/m-CORE.setting:7549␤  in metho…»

[23:18] <timotimo> i'm not 100% sure what exactly must and what must not be escaped between <[ ]>

[23:18] *** adu left
[23:18] <Mouq> m: say "abcd"~~/<{14}>/

[23:18] <timotimo> can somebody be un-lazy for me while i type up the rest of the section?

[23:18] <camelia> rakudo-moar 6f0b1d: OUTPUT«This type cannot unbox to a native string␤  in sub MAKE_REGEX at src/gen/m-CORE.setting:12959␤  in block  at src/gen/m-CORE.setting:12897␤  in method reify at src/gen/m-CORE.setting:7686␤  in method reify at src/gen/m-CORE.setting:7549␤  in metho…»

[23:18] <Mouq> THAT is a definite Rakudobug

[23:19] <timotimo> it should .Str it by itself?

[23:20] <timotimo> m: say "abacabadabacaba" ~~ / <[ a .. c ]>+ /

[23:20] <camelia> rakudo-moar 6f0b1d: OUTPUT«｢abacaba｣␤␤»

[23:21] <Mouq> timotimo: "<nibble($¢.cursor_fresh( %*LANG<Q> ).tweak(:cc).unbalanced("]"))>"

[23:22] <timotimo> Mouq -v # for tired timotimo

[23:22] <Mouq> So... ']', '\', '-', and '..' I think

[23:23] <timotimo> why -?

[23:23] <Mouq> Though '..' shouldn't practically appear in a character class

[23:23] <Mouq> timotimo: Backward incompatability

[23:23] <timotimo> yeah, the second . would be redundant already

[23:23] <timotimo> oh, right

[23:23] <timotimo> it'll complain if it's in a weird spot

[23:23] <Mouq> std: /<[a-z]>/

[23:23] <camelia> std e347792: OUTPUT«===SORRY!===␤Unsupported use of - as character range; in Perl 6 please use .. (or \- if you mean a literal hyphen) at /tmp/HkzjQUSA6c line 1:␤------> /<[a-z⏏]>/␤Parse failed␤FAILED 00:01 123m␤»

[23:24] <Mouq> m: $_="33399";/<{!.comb(/<[2468]>/).min}>/;say $/.from//-1,",$/"

[23:24] <camelia> rakudo-moar 6f0b1d: OUTPUT«This type cannot unbox to a native string␤  in sub MAKE_REGEX at src/gen/m-CORE.setting:12959␤  in block  at src/gen/m-CORE.setting:12897␤  in method reify at src/gen/m-CORE.setting:7686␤  in method reify at src/gen/m-CORE.setting:7549␤  in metho…»

[23:24] <Mouq> Oops

[23:24] <Mouq> m: $_="33399";/<{~.comb(/<[2468]>/).min}>/;say $/.from//-1,",$/"

[23:24] <camelia> rakudo-moar 6f0b1d: OUTPUT«-1,␤»

[23:24] <Mouq> m: $_="333994";/<{~.comb(/<[2468]>/).min}>/;say $/.from//-1,",$/"

[23:24] <camelia> rakudo-moar 6f0b1d: OUTPUT«5,4␤»

[23:24] <timotimo> std: /<[az-]>/

[23:24] <camelia> std e347792: OUTPUT«ok 00:01 123m␤»

[23:24] <Mouq> Looks good to me

[23:24] <Mouq> gtodd++

[23:25] <thou> This has been a pet peeve of mine for a while:  https://github.com/rakudo/rakudo/pull/265

[23:26] <timotimo> oh, nice

[23:26] <Mouq> thou: thou =:= softmoth?

[23:28] <dalek> doc: 8fe2c15 | (Timo Paulssen)++ | lib/regexes.pod:

[23:28] <dalek> doc: a bit on character ranges

[23:28] <dalek> doc: review: https://github.com/perl6/doc/commit/8fe2c15747

[23:28] <timotimo> Mouq: i think i've had enough documenting for the moment - need to rest my wrists a bit

[23:28] <timotimo> feel free to re-generate

[23:28] <timotimo> (review welcome as always)

[23:30] <timotimo> we've been talking about giving perl6.org AAAA records; who actually has the permissions to change the DNS entries?

[23:32] <Mouq> timotimo++++

[23:32] <timotimo> i'm not sure i get any karma for that :P

[23:33] <Mouq> you get karma for documentation

[23:33] <Mouq> :)

[23:33] <timotimo> mhm

[23:33] <Mouq> ok

[23:33] <Mouq> gtodd: Post updated

[23:34] <Mouq> Actually, I'll say as much in the comments

[23:35] <lue> I like how using TEST_JOBS gets me a shiny progress-bar-thing at the bottom of the screen :)

[23:36] <dalek> rakudo-star-daily: de9ae78 | coke++ | log/ (5 files):

[23:36] <dalek> rakudo-star-daily: today (automated commit)

[23:36] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/de9ae784eb

[23:36] <Mouq> doc/htmlify.pl should really be caching

[23:37] <PerlJam> Did anyone upload masak's rakudo release?

[23:38] <timotimo> i don't think so, PerlJam 

[23:38] <lue> Mouq: syngen has a pretty dumb cacher, if you dare to attempt to read some really-needs-to-be-cleaned-up code :)

[23:38] * lue is somewhat in the process of said cleanup, actually.

[23:38] <PerlJam> uploaded.

[23:38] <timotimo> PerlJam++

[23:39] <timotimo> not sure if the announcement should go out before moarvm.org has its download link updated, too?

[23:40] *** adu joined
[23:41] <PerlJam> how is moarvm.org updated exactly?

[23:41] <Mouq> PerlJam: https://github.com/MoarVM/moarvm.org

[23:42] <timotimo> http://www.dlugosz.com/Perl6/ - should perl6.org/specification continue to link to this page?

[23:42] <PerlJam> Is someone cutting a moarvm release?

[23:42] <timotimo> it is already cut, afaict

[23:42] <timotimo> hm

[23:42] <timotimo> but i don't see an url for a tarball yet

[23:44] <Mouq> masak++++, totally missed that you did the release, and PerlJam++ for the upload

[23:46] <Mouq> timotimo: doc updated

[23:46] <dalek> perl6.org: a051871 | (Timo Paulssen)++ | source/community/index.html:

[23:46] <dalek> perl6.org: fix a leaky anchor tag

[23:46] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/a051871bd5

[23:46] <timotimo> who can update perl6.org from the sources?

[23:48] <jnthn> evening o/

[23:48] <lue> timotimo: I don't see much point to link to that anymore myself.

[23:48] <Mouq> o/ jnthn 

[23:48] <lue> \o jnthn

[23:48] <timotimo> hey jnthn 

[23:49] <timotimo> about to upload & link a moarvm tarball, are you? :)

[23:49] <Mouq> lue: I think planetaria.org/perl6 is good, especially for someone new to the community

[23:49] *** adu left
[23:50] <lue> whaddya know, TEST_JOBS=4 brings me down the hundreds

[23:50] <jnthn> timotimo: Uh...I uploaded the 2014.04 moarvm earlier?

[23:50] <lue> Mouq: I was talking http://www.dlugosz.com/Perl6/

[23:50] <Mouq> lue: Ohhh

[23:50] <timotimo> jnthn: didn't see a link to it; so i guess only the website needs updated?

[23:50] <timotimo> seen szagab

[23:50] <timotimo> !seen szagab

[23:50] <timotimo> .seen szagab

[23:50] <yoleaux> I haven't seen szagab around.

[23:50] <lue> Mouq: your link doesn't even work :)

[23:50] <Mouq> lue: ooc, is syngen yet concurrent?

[23:50] <jnthn> timotimo: I .tell'd it to masak earlier today, and mentioned it on #moarvm

[23:50] <timotimo> which of our bots currently tracks karma btw?

[23:51] <Mouq> *planeteria :P

[23:51] <jnthn> 14:52 < jnthn> http://www.moarvm.org/releases/MoarVM-2014.04.tar.gz

[23:51] <timotimo> ah, i only searched on #moarvm

[23:51] <jnthn> timotimo: Website update is todo, yes.

[23:51] <lue> Mouq: I threw some awaits in there once, but it didn't help much, and jnthn's recent post made me realize it needs more thought put into it anyway :)

[23:51] <jnthn> timotimo: Above was from #moarvm

[23:51] <lue> (Also, code cleanup feels more important atm)

[23:51] <timotimo> huh? weird. my backscroll search thingie didn't find it

[23:52] <timotimo> lines that contain [off] won't come up in the irc log, right?

[23:52] *** adu joined
[23:53] <Mouq> lue: Ok :) I've been following you're commits but I haven't really taken a good look at the details of syngen, and was just curious

[23:53] <Mouq> *your

[23:53] <timotimo> except the second logger, the one that logs to colabti.org, does feature those.

[23:53] <timotimo> oh, [off] isn't the right trigger for that apparently

[23:54] <lue> If you look at the code, it seriously needs to be modularized by now :)

[23:55] <dalek> perl6.org: 4803e39 | (Timo Paulssen)++ | source/community/irc.html:

[23:55] <dalek> perl6.org: aloha is gone, mention ilogger2.

[23:55] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/4803e39a2c

[23:55] <dalek> perl6.org: ea6c5ae | (Timo Paulssen)++ | source/community/index.html:

[23:55] <dalek> perl6.org: a positive note about mailing list traffic and response time.

[23:55] *** beastd left
[23:55] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/ea6c5aee04

[23:55] <thou> Mouq: Yes, thou == softmoth

[23:55] <thou> (Sorry, got pulled away for a minute.)

[23:55] * lue would really love it if he could go two git commits without having to reinstall panda and assorted modules

[23:56] *** xenoterracide_ joined
