[00:14] *** jerrycheung joined
[00:25] *** pmurias left
[00:29] <jepeway> thanks, timotimo++, for the tiny tour

[00:29] *** jepeway left
[00:39] *** colomon left
[00:41] *** colomon joined
[00:47] *** mr-foobar left
[00:48] *** cognome joined
[00:48] *** mr-foobar joined
[00:52] *** mberends joined
[00:52] *** cognome_ joined
[00:52] *** cognome left
[00:56] *** cognome_ left
[01:23] *** FROGGS__ joined
[01:26] *** FROGGS_ left
[01:52] *** colomon left
[01:57] *** toto joined
[01:58] *** toto is now known as Guest52887

[01:58] *** Guest52887 left
[01:59] *** colomon joined
[02:49] *** noganex joined
[02:52] *** noganex_ left
[03:15] *** jerrycheung left
[03:29] *** Px12 joined
[03:31] *** jerrycheung joined
[03:36] *** molaf_ left
[03:40] *** jerrycheung left
[03:41] *** davido___ joined
[03:44] *** ClarusCogitatio left
[03:45] *** ClarusCogitatio joined
[03:57] *** ClarusCogitatio left
[04:00] *** ClarusCogitatio joined
[04:09] *** xenoterracide joined
[04:13] *** ClarusCogitatio left
[04:16] *** ClarusCogitatio joined
[04:19] *** rindolf joined
[04:19] *** BenGoldberg left
[04:23] *** rindolf left
[04:24] *** rindolf joined
[04:29] *** telex left
[04:30] *** telex joined
[04:39] *** ClarusCogitatio left
[04:42] *** ClarusCogitatio joined
[04:57] *** kaare_ joined
[05:01] *** Px12 left
[05:10] *** davido___ left
[05:43] *** xenoterracide left
[05:43] *** xenoterracide joined
[05:44] *** davido___ joined
[05:51] *** xiaomiao left
[05:54] *** xiaomiao joined
[06:04] *** ClarusCogitatio left
[06:07] *** ClarusCogitatio joined
[06:14] *** xenoterracide left
[06:28] *** davido___ left
[06:29] *** SamuraiJack joined
[06:36] *** ClarusCogitatio left
[06:36] *** virtualsue joined
[06:37] *** darutoko joined
[06:39] *** ClarusCogitatio joined
[06:43] *** kurahaupo left
[06:49] *** davido___ joined
[06:53] *** bjz joined
[07:01] *** davido___ left
[07:09] *** jerrycheung joined
[07:16] *** jerrycheung left
[07:22] *** virtualsue left
[07:23] *** Px12 joined
[07:36] *** jantore joined
[07:44] *** ClarusCogitatio left
[07:48] *** ClarusCogitatio joined
[08:03] *** Px12 left
[08:07] *** denis_boyun_ joined
[08:16] *** denis_boyun_ left
[08:17] *** cognome joined
[08:20] *** spider-mario joined
[08:20] *** spider-mario left
[08:21] *** cognome left
[08:22] *** Px12 joined
[08:23] *** spider-mario joined
[08:23] *** spider-mario left
[08:25] *** kurahaupo joined
[08:26] *** jerrycheung joined
[08:31] *** jerrycheung left
[08:32] *** kjs_ joined
[08:34] *** ClarusCogitatio left
[08:37] *** ClarusCogitatio joined
[08:38] *** kurahaupo left
[08:42] *** spider-mario joined
[08:52] *** cognome joined
[08:57] *** cognome left
[09:14] *** Px12 left
[09:16] *** ClarusCogitatio left
[09:17] *** ClarusCogitatio joined
[09:18] *** jerrycheung joined
[09:21] *** slmult0 joined
[09:21] *** jerrycheung left
[09:22] *** ClarusCogitatio left
[09:24] *** ClarusCogitatio joined
[09:46] *** _sri left
[09:47] *** FROGGS__ is now known as FROGGS

[09:49] *** virtualsue joined
[09:52] *** cognome joined
[09:52] *** brrt joined
[09:54] *** _sri joined
[09:56] *** cognome left
[09:58] <lizmat> good *, #perl6

[09:58] <lizmat> and my has it been silent today so far

[09:59] <nine> lizmat: shhhht

[10:00] <timotimo> you're ruining it! =o

[10:01] <jnthn> YEAH, BE QUIET.

[10:01] * nine stomps on the floor

[10:01] * lizmat whistles while walking away

[10:02] <FROGGS> what what? somebody said something?

[10:03] * FROGGS yawns

[10:03] * jnthn has safely returned to The Other System. :)

[10:03] <FROGGS> jnthn: what other system?

[10:03] <nine> Should I a) finish my god damn master's thesis, b) continue working on Inline::Perl5 or c) go to Gamestage Expo with friends?

[10:03] <FROGGS> a political system?

[10:03] <jnthn> FROGGS: Yeah.

[10:04] <vendethiel> nine: always d)

[10:04] <FROGGS> nine: a)

[10:04] <jnthn> FROGGS: Reference to "two systems, one country" :)

[10:04] <moritz> m: say <thesis Inline::Perl5 Gamestage>.pick

[10:04] <camelia> rakudo-moar 21a2a4: OUTPUT«Gamestage␤»

[10:04] <FROGGS> lol

[10:04] <moritz> nine: rakudo has a very clear opinion on that one :-)

[10:04] <nine> Seems like Rakudo is not so keen on cuddling up to Perl 5 :)

[10:05] * lizmat wonders how moritz rigged camelia to do that

[10:05] <jnthn> Nor your master's thesis, apparently... :P

[10:05] <FROGGS> jnthn: is that just NYI or a NONO? Cannot create rw-accessors for natively typed attribute '$!keepBlanks'

[10:05] <moritz> FROGGS: NYI

[10:05] <FROGGS> k

[10:05] <jnthn> FROGGS: NYI, and that stuff is basically top of my todo list by now

[10:06] <FROGGS> jnthn: is it hard to implement?

[10:06] <jnthn> Well, it depends on a bunch of other native-related pieces.

[10:06] <FROGGS> jnthn: in case not, I'd like to do it this sunday, but I am thankful for pointers :o)

[10:06] <FROGGS> (not opaquepointers, mind)

[10:06] <FROGGS> hmmm :/

[10:06] <jnthn> It's related to native arrays and is rw on natives and a bunch of other things

[10:06] <moritz> FROGGS: I think it needs a bit of conceptual work

[10:07] <FROGGS> ohh

[10:07] <jnthn> Or at least, I want to solve all of thoese with a single mechanism.

[10:07] * FROGGS has no idea about that

[10:07] <moritz> once we have rw for natives, creating the accessors that way is a SMOP

[10:07] <jnthn> And yeah, it needs careful design, in so far as I need to be able to optimize away much of the cost of things either statically or in spesh...

[10:07] <jnthn> Or probbably both

[10:07] <jnthn> Not to mention coming up with something that will work ou tOK on JVM...

[10:08] <FROGGS> okay, I leave it on your list then :o)

[10:08] * moritz consults the ROADMAP again

[10:09] <moritz> FROGGS: maybe you want to take a stab at :: and ::: in regexes? (backtracking control)

[10:09] <FROGGS> moritz: that would mean I have to understand it first :o)

[10:09] <moritz> FROGGS: :-)

[10:09] <FROGGS> but yeah, I am open for these things

[10:09] <moritz> 2 **    Rat/FatRat/Rational cleanup

[10:09] <moritz> what does that mean?

[10:10] <moritz> also, coercion types seem to occur twice

[10:10] <moritz> 2 ***   new syntax/semantics for coercion (jnthn)

[10:10] <moritz> 2 ***   coercion types

[10:11] <jnthn> Should probably clarify that while the natives stuff is in theory top o my todo list, it's one of those Big Hard Things that needs a good chunk of time when I can concentrate, and that's hard to come by while I'm away on consulting gig.

[10:12] <jnthn> So I'll probably continue picking off other little bits over the next couple of weeks. :)

[10:13] <jnthn> After that I've got some free days at home when I can do Perl 6 stuff, teaching on a very familiar topic which won't be especially tiring, and then Austrian Perl Workshop and hackathon time. :)

[10:15] *** jerrycheung joined
[10:16] *** jerrycheung left
[10:16] *** jaffa4 joined
[10:19] <brrt> \o

[10:19] <brrt> where's this ROADMAP thingy?

[10:19] <jnthn> hi brrt

[10:19] <brrt> (was backlogging) hi jnhtn :-)

[10:19] *** eternaleye left
[10:20] <moritz> brrt: docs/ROADAMP in rakudo

[10:20] <vendethiel> is that up-to-date?

[10:20] <brrt> m: <study hack play>.pick

[10:20] <camelia> rakudo-moar 21a2a4: ( no output )

[10:20] <moritz> vendethiel: pretty much

[10:20] <moritz> vendethiel: last updated end of July

[10:20] <vendethiel> oh, okay :)

[10:21] <vendethiel> moritz: for regexps, @<> could be added

[10:22] <timotimo> brrt: that's *so* symbolic

[10:22] <moritz> vendethiel: what would that do?

[10:22] <brrt> what is timotimo?

[10:22] <timotimo> brrt: <study hack play>.pick → "no output"

[10:22] <vendethiel> moritz: what's specced. basically, it forces the capture to be an array

[10:23] <brrt> yeah i forgot to say. and if is asked again i couldn't get an answer

[10:23] <brrt> camelia is telling me to make up my own mind

[10:23] *** slmult0 left
[10:23] *** eternaleye joined
[10:23] <timotimo> FROGGS: maybe you'd like to do the CAPHASH removal in rakudo's Match?

[10:23] <vendethiel> moritz: it's useful when you have, ie [ @<a>='a' | <a> ] with regex a { \d + }

[10:23] <vendethiel> (so that $/[0] is always a list)

[10:25] <brrt> sized/shaped arrays, is that native arrays? 

[10:25] *** cognome joined
[10:26] <FROGGS> timotimo: how?

[10:26] <FROGGS> timotimo: what is needed to do that?

[10:27] <lizmat> jnthn: any suggestions wrt http://irclog.perlgeek.de/perl6/2014-09-13#i_9352237 ?

[10:28] <timotimo> FROGGS: well, it's either understanding the original change in the nqp version and applying the same idea on the rakudo one

[10:28] <timotimo> or ... er ...

[10:28] <FROGGS> hmmm

[10:28] <jnthn> lizmat: Whatever creates a thread or gets a thread probably needs to have nqp::scwbdisable() and nqp::scwbenable() or so wrapped around it

[10:29] <FROGGS> timotimo: I can try I think

[10:29] <jnthn> lizmat: So the write barrier wont be tripped;

[10:29] <lizmat> hmmm...

[10:29] <lizmat> since yesterday, I made $*THREAD lazy as well

[10:29] <lizmat> now it says Missing serialize REPR function for REPR MVMOSHandle 

[10:29] <lizmat> that would point to STDOUT I guess...

[10:32] *** brrt left
[10:34] *** MikeFair__ left
[10:37] <lizmat> jnthn: making $*IN/$*OUT/$*ERR lazy, changes the error to:

[10:37] <lizmat> Missing serialize REPR function for REPR ReentrantMutex

[10:39] <jnthn> lizmat: I'm pretty sure those arne't a big saving, from the profiling I did...

[10:39] <lizmat> but @*INC *is*, and that's being blocked now

[10:39] <jnthn> Right, so we should fix what's needed for that, but not pile up more things that are going to be awkward. ;)

[10:40] <lizmat> I'm all for that, but also out of my depth

[10:40] <jnthn> lizmat: What branch is the busted patch in?

[10:40] <timotimo> doesn't $*OUT get almost immediately vivified in almost every program anyway?

[10:40] <jnthn> Or, can you push it to one?

[10:40] <jnthn> I can look later this eveing, probbably.

[10:41] <lizmat> you need to re-apply d05d411e968b3408420bbc7b02c1248f3dc005de

[10:41] <jnthn> ah, ok

[10:41] * jnthn will get checkout -b bug && git cherry-pick d05d411 later, then :)

[10:41] <jnthn> Dinner now &

[10:41] <lizmat> and then run $ perl6 -e '"bar".IO.spurt("use Test"); CompUnit.new("bar").precomp'

[10:46] <lizmat> jnthn: thank you

[10:46] <lizmat> timotimo: not for $perl6 -e1

[10:47] *** Gruber is now known as Grrrr

[10:50] *** zakharyas joined
[10:52] *** SamuraiJack left
[10:55] *** jerrycheung joined
[10:59] *** jerrycheung left
[11:06] <timotimo> jnthn: how do you feel about me building a string equivalent of "littlebigint"?

[11:06] <timotimo> oh

[11:07] <timotimo> i just now remember why i shouldn't try that yet ... uthash ...

[11:10] *** virtualsue left
[11:11] <nine> jnthn: why is this leaking memory? perl6 -e 'my $destroyed = 0; class Foo { method DESTROY {$destroyed++;} }; loop { Foo.new }'

[11:11] <nine> jnthn: but this not? perl6 -e 'class Foo { method DESTROY {my $destroyed;$destroyed++} }; loop { Foo.new }'

[11:11] <carlin> .oO( Battle of the Little BigInt )

[11:13] <nine> timotimo: do you happen to know how I can access force_gc() from Perl 6 code? Would help me with Inline::Perl5 tests.

[11:13] <carlin> can you do nqp::force_gc()

[11:13] *** woolfy left
[11:13] <lizmat> m: nqp::force_gc

[11:13] <camelia> rakudo-moar 21a2a4: ( no output )

[11:13] <lizmat> m: say nqp::force_gc

[11:13] <camelia> rakudo-moar 21a2a4: OUTPUT«===SORRY!===␤arg expression cannot be void␤»

[11:14] <lizmat> I guess the hookup is suboptimal still  :-)

[11:14] *** woolfy1 joined
[11:15] <timotimo> with nqp:: ops, the training wheels are off :P

[11:16] *** kaare__ joined
[11:18] <lizmat> I was wondering whether something like: $*SCHEDULER.cue: :every(.1), { nqp::force_gc } could provide something close to timely destruction

[11:18] <timotimo> don't forget each gc run will freeze all threads for a bit

[11:19] *** kaare_ left
[11:19] <lizmat> yes, I realize that

[11:20] <lizmat> but having this, *will* mean people will use it

[11:20] <timotimo> well ... damn ;)

[11:20] <timotimo> people be crazy

[11:21] <lizmat> hmmm... I just realize there is no mention of Proc::Async in the Changelog

[11:21] <timotimo> i think forcing gc often would make our generational hypothesis b0rk

[11:21] <timotimo> because short-lived objects are more likely to be promoted to the gen2 if we GC more often

[11:21] <lizmat> that's something new in this month's release, isn't it?

[11:21] <lizmat> I've never said it would be sensible  :-)

[11:23] <nine> timotimo: thanks, seems to work

[11:23] <dalek> rakudo/nom: a278a2a | moritz++ | docs/ROADMAP:

[11:23] <dalek> rakudo/nom: update ROADMAP

[11:23] <dalek> rakudo/nom: 

[11:23] <dalek> rakudo/nom: * add @<> regex feature, vendethiel++

[11:23] <dalek> rakudo/nom: * remove duplicate mention of coercions

[11:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a278a2a389

[11:24] <timotimo> nine: er, i didn't do anything %)

[11:24] <moritz> lizmat: Proc::Async was added 2014-08-11

[11:25] <lizmat> so it was in the previous release, but not documented as such ?

[11:25] <moritz> lizmat: correct

[11:25] <moritz> lizmat: I can add it if you want

[11:25] <nine> ah

[11:25] <nine> carlin: thanks, seems to work

[11:25] <lizmat> moritz: was just doing that

[11:25] <moritz> lizmat: ok, I'll let you do it

[11:26] <lizmat> "+ added experimental support for Proc::Async, MoarVM only for now"

[11:26] <lizmat> ok?

[11:27] <moritz> ok

[11:27] <carlin> nine: I think lizmat++ was more help than me

[11:27] <carlin> :p

[11:28] <lizmat> who? /me?  you mean timotimo ?

[11:28] <nine> carlin: or not... while it compiles and runs, I don't see my object's destructor called.

[11:28] <jaffa4> hi guys, how am I supposed to install panda, I followed the instructions and I get an error message?

[11:28] <dalek> rakudo/nom: 5de1e70 | (Elizabeth Mattijsen)++ | docs/ChangeLog:

[11:28] <dalek> rakudo/nom: Mention Proc::Async

[11:28] <dalek> rakudo/nom: 

[11:28] <dalek> rakudo/nom: Even though it was in the previous release already

[11:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5de1e707bd

[11:29] <nine> perl6 -e 'my $destroyed = 0; class Foo { method DESTROY { $destroyed++; } }; Foo.new; nqp::force_gc(); say $destroyed;'

[11:29] <nine> 0

[11:29] <FROGGS> jaffa4: I think there is an issue on parrot... can you test it on moarvm?

[11:29] <jaffa4> I am on moarvm

[11:29] <moritz> jaffa4: what's the error?

[11:29] <FROGGS> jaffa4: can you no-paste the error?

[11:30] <nine> whereas: perl6 -e 'my $destroyed = 0; class Foo { method DESTROY { $destroyed++; } }; until $destroyed { Foo.new; }; say $destroyed;'

[11:30] <nine> 8

[11:30] <jaffa4> perl6 panda\bootstrap.pl -> Could not find lib in any of: ., blib, D:\rakudogit\install/languages/perl6/lib, D:\rakudogit\install/languages/nqp/lib

[11:31] <FROGGS> hmmm

[11:31] <FROGGS> jaffa4: both rakudo and panda are up-to-date?

[11:31] <jaffa4> I just cloned it into panda

[11:32] <FROGGS> what's your perl6 --version?

[11:32] <jaffa4> This is perl6 version 2014.07-238-g688c289 built on MoarVM version 2014.07-426-g49cecc3

[11:32] <FROGGS> the please upgrade rakudo

[11:32] <moritz> jaffa4: did you 'make install' in rakudo?

[11:33] <FROGGS> nmake install*

[11:34] <jaffa4> I need to look

[11:39] <jaffa4> I recompiled At Frame 4, Instruction 3, op 'sp_guardcontconc' has invalid number (0) of operands; needs 3.

[11:41] <FROGGS> then your MoarVM might be too new

[11:41] <timotimo> yeah, there was an nqp stage0 update for moarvm

[11:41] <timotimo> recently-ish

[11:41] <colomon> I just tried to say a list of 300 strings and got a truncated list with "…" at the end?!

[11:41] <FROGGS> jaffa4: update MoaVM, nqp and rakudo

[11:41] <timotimo> colomon: yeah, you're using ".gist", TimToady recently made gist give you only the gist of a list instead of all of it

[11:41] <timotimo> you can still ~@list it

[11:41] <FROGGS> timotimo: that's what we are talking about it seems: https://github.com/perl6/nqp/commit/775ac85288898bcc50af356be995c2f2b160712d

[11:42] <timotimo> that's right

[11:43] <jaffa4> well, I did I think, I pull the git, and issue configure again... what version of git should I use?

[11:43] *** spider-mario left
[11:43] <FROGGS> just rakudo/nom

[11:44] <FROGGS> and then pass --gen-moar to configure

[11:44] <FROGGS> --gen-moar implies --gen-nqp btw

[11:44] <jaffa4> this works perl Configure.pl --gen-moar --gen-nqp --backends=moar, right?

[11:44] <FROGGS> right

[11:45] <jaffa4> that is when I get the error

[11:45] <FROGGS> what does 'git describe' give you?

[11:45] <jaffa4> Minsk-339-g5de1e70

[11:46] *** kurahaupo joined
[11:46] <FROGGS> that fits

[11:46] <timotimo> maybe we forgot a version bump after some op got introduced?

[11:47] <jaffa4> what version should I get which is ok?

[11:47] <FROGGS> timotimo: NQP_REV looks good

[11:47] <timotimo> and MOAR_REV, too?

[11:48] <FROGGS> yes

[11:48] <timotimo> hm. maybe nuke install/ from orbit?

[11:48] <carlin> m: class Foo { method DESTROY { say 'kaboom'; } }; { my $x = Foo.new }; nqp::force_gc(); nqp::force_gc()

[11:48] <camelia> rakudo-moar 21a2a4: ( no output )

[11:48] <carlin> m: class Foo { method DESTROY { say 'kaboom'; } }; { my $x = Foo.new }; nqp::force_gc() xx 2;

[11:48] <camelia> rakudo-moar 21a2a4: OUTPUT«kaboom␤»

[11:49] <timotimo> nobody promised you timely destruction :S

[11:51] <kurahaupo> timotimo: a long time ago we were promised timely destruction, at least for enrolled objects or types. Seems a shame that's been dropped

[11:51] <jaffa4> from orbit?

[11:52] <jaffa4> what orbit?

[11:52] <FROGGS> jaffa4: he meant to remove the 'install' directory entirely :o)

[11:53] *** breinbaa1 left
[11:55] *** breinbaas joined
[11:57] <jaffa4> yes , that is turn off, turn on

[11:57] <FROGGS> right

[11:58] <FROGGS> I built latest rakudo just fine

[12:00] *** Akagi201 left
[12:01] *** Px12 joined
[12:01] <jaffa4> compilation does not work with msc9 

[12:02] <jaffa4> it works with msc10

[12:02] *** Akagi201 joined
[12:02] *** alexghacker1 left
[12:03] <nine> carlin: where does that difference between nqp::force_gc() xx 2 and nqp::force_gc(); nqp::force_gc() come from?!

[12:04] <FROGGS> jaffa4: eww

[12:04] *** brrt joined
[12:05] *** alexghacker joined
[12:06] *** xragnar left
[12:07] <vendethiel> nine: mayb the GC *refuses* to :p

[12:07] *** Px12 left
[12:07] <vendethiel> m: class Foo { submethod DESTROY { say 'kaboom'; } }; { my $x = Foo.new }; nqp::force_gc();

[12:07] <camelia> rakudo-moar 21a2a4: ( no output )

[12:07] *** xragnar joined
[12:07] <vendethiel> .oO( we c++ now )

[12:08] *** jaffa4 left
[12:08] <vendethiel> .o( heisendestroy )

[12:11] * nine thinks force_gc is not as forceful as it likes to be

[12:13] *** spider-mario joined
[12:14] <brrt> nine: on moar?

[12:14] <jnthn> Well, it certainly doesn't force a ful collection, and it's not entirely clear that the Foo instance you created is out ot scope

[12:15] <jnthn> The optimizer can flatten away unrequired scopes when it can see we couln't possibly introspect and discover a discrepancy.

[12:15] *** zakharyas left
[12:16] <FROGGS> eww

[12:16] <jnthn> Trying to reason about what will go out of scope and become collectable when is a fools errand.

[12:16] <FROGGS> do we have new chars for Match.gist now?

[12:16] <FROGGS> m: say "a" ~~ /a/

[12:16] <camelia> rakudo-moar 21a2a4: OUTPUT«｢a｣␤␤»

[12:16] <FROGGS> that's.... ugly

[12:17] <grondilu> n: say "a" ~~ /a/

[12:17] <camelia> niecza : OUTPUT«Cannot open assembly './run/Niecza.exe': No such file or directory.␤»

[12:17] <jnthn> FROGGS: We had the corner brackes for ages now, no?

[12:17] <FROGGS> then it is my font >.<

[12:17] <FROGGS> I upgraded to ubuntu 14.04 just on saturday

[12:18] <FROGGS> lunch &

[12:18] <jnthn> .oO( Baptized at the font of missing glyphs )

[12:18] *** xragnar left
[12:21] *** brrt left
[12:24] <jnthn> nine: Answer to questions like "difference between xx 2 and not could be all kinds, but quite easily it could just be that xx 2 re-uses registers somewhere and so leaves objects unreferenced in that case.

[12:25] <nine> jnthn: sounds like there's no way to write reliable tests?

[12:26] <lizmat> jnthn: fwiw, I'm now writing the spec of Proc::Async so that people have something to look at when the next release comes out and it mentions Proc::Async

[12:26] <timotimo> that seems like a good decision

[12:26] <jnthn> You seem to want to write reliable tests that rely on subtleties of register allocation, optimization, GC, and probably more...

[12:27] <timotimo> sounds like you want to use the MASTCompiler directly

[12:28] <jnthn> Well, no, because there's no real reason for the interop stuff not to work out on JVM

[12:28] *** xragnar joined
[12:28] <nine> I wonder if it actually works on the JVM right now. Except for DESTROY support I wouldn't know a reason why not.

[12:28] <timotimo> right

[12:28] <jnthn> And so even if you manage to get the stars to align "reliably" on Moar, you're probably going be juggling a different bunch of things.

[12:28] <lizmat> jnthn: would it make sense to make Proc::Async's path parameter to be a positional, rather than a obligatory named ?

[12:29] *** Px12 joined
[12:29] <lizmat> jnthn: and args a slurpy ?

[12:29] <jnthn> lizmat: Is there precednet for doing so anywhere else in the built-ins?

[12:29] <carlin> nine: the trait_mod craziness to get NativeCall to work doesn't work on JVM

[12:30] <lizmat> jnthn: S29:577

[12:30] <synopsebot> Link: http://perlcabal.org/syn/S29.html#line_577

[12:30] <jnthn> lizmat: That's hard to apply in so far as it's a sub call, not an object construction.

[12:30] <lizmat> true

[12:31] <jnthn> lizmat: I was more thinking of other IO related classes

[12:31] <lizmat> I guess we need to unspec :bg in S29 and link to S17's Proc::Async ?

[12:31] <jnthn> lizmat: Uh, yes. :)

[12:32] <jnthn> lizmat: I'm quite confident in saying that a named arg indicating async or not is LTA API design. ;)

[12:33] <nine> jnthn: why is this leaking memory? perl6 -e 'my $destroyed = 0; class Foo { method DESTROY {$destroyed++;} }; loop { Foo.new }'

[12:33] <nine> jnthn: but this not? perl6 -e 'class Foo { method DESTROY {my $destroyed;$destroyed++} }; loop { Foo.new }'

[12:35] *** kjs_ left
[12:37] <dalek> specs: 81994a0 | (Elizabeth Mattijsen)++ | S29-functions.pod:

[12:37] <dalek> specs: Remove :bg parameter from shell()/run()

[12:37] <dalek> specs: 

[12:37] <dalek> specs: Now done by Proc::Async, and can not really be intergrated seemlessly here.

[12:37] <dalek> specs: review: https://github.com/perl6/specs/commit/81994a0b80

[12:37] <dalek> specs: fa80c00 | (Elizabeth Mattijsen)++ | S29-functions.pod:

[12:37] <dalek> specs: Spec the :cwd parameter for shell()/run()

[12:37] <dalek> specs: review: https://github.com/perl6/specs/commit/fa80c00549

[12:38] <lizmat> IO::Notification.watch_path doesn't take a named path either

[12:39] <jnthn> nine: No idea, though I can see it is...

[12:40] <jnthn> nine: At it's sensitive to the DESTROY being there. Odd.

[12:41] <jnthn> lizmat: Yeah, that's a stronger indicator.

[12:41] <jnthn> nine: Oh...

[12:41] *** xragnar left
[12:42] <jnthn> nine: Could be due to the way the destroy queue handler is invoked

[12:43] *** xragnar joined
[12:43] <jnthn> (As a special return handler)

[12:43] * lizmat muses about a postfix:<&> for IO::Path that would do a Proc::Async.new(path,args).start  :-)

[12:44] <jnthn> nine: Yeah, seems to be that.

[12:44] <jnthn> nine: It's a lot less likely to affect real world code.

[12:44] <jnthn> nine: Which actually has a call graph rather than just sitting in a hot loop.

[12:45] <nine> jnthn: let's hope so :)

[12:45] <jnthn> Well, that bit is easy enough to explain

[12:46] <jnthn> The typical way to do these things is to run DESTROY on some thread. That doesn't risk leaks like this, but does spoil the thread affinity you wanted.

[12:47] <jnthn> So if we need to run them on the same thread, we need to make that call happen at some safe point.

[12:47] <jnthn> Not every GC safe point is also an invocation safe point, however.

[12:47] <lizmat> why would we need to run DESTROY on the same thread ?

[12:48] <jnthn> lizmat: I thought nine said he needed it that way for p5 interop?

[12:48] <lizmat> would seem to me, that having your DESTROYs done asynchronously, would be another reason for running P5 code in Perl 6

[12:48] <jnthn> lizmat: Having refcounts decremented by another random thread sounds like a great way to segv Perl 5...

[12:48] <lizmat> from a performance point of view

[12:48] *** alexghacker left
[12:49] <jnthn> lizmat: Especially if the same p5 interpreter is running code on another thread.

[12:49] <lizmat> maybe P5 refcounting needs to be done from a Supply.act ?

[12:50] <lizmat> just wondering how things can be, not why they can't  :-)

[12:50] <jnthn> Anyway to finish what I was explaining, the way we get an invocation safepoint is attaching the "run the DESTROYs" to happen at the next block exit.

[12:50] <jnthn> And if you're in a loop { } then that block typically is inlined so there's no block exit until program exit.

[12:50] <jnthn> Most interesting programs are not a single hot loop, so I won't worry abou this one too much :)

[12:51] * jnthn has a skype call, bbiab :)

[12:51] *** sqirrel_ joined
[12:51] *** kjs_ joined
[12:51] *** brrt joined
[12:52] *** chenryn joined
[12:54] *** virtualsue joined
[13:01] *** xragnar left
[13:02] *** xragnar joined
[13:05] <brrt> what, stage parse took 25.6s :-o

[13:05] <brrt> when did that happen

[13:05] <FROGGS> O.o

[13:05] <timotimo> half a month ago?

[13:06] <FROGGS> probably, yeah

[13:06] <FROGGS> there was no speed boost over night :o)

[13:08] <brrt> and clean spectests, too

[13:08] <brrt> wow

[13:08] <FROGGS> are you sure?

[13:09] <brrt> clean-for-me

[13:09] <brrt> i.e. some might be flappy but after a few minutes of buzzing the spectests said 'all test passed'

[13:10] <lizmat> FWIW, I've seen a lot less flappage since the libuv upgrade

[13:11] *** Ven joined
[13:12] * Ven pulls to try locally

[13:17] *** kaare__ left
[13:17] <Ven> stage parse, 34.64!

[13:18] <Ven> and `make test` seems clean as well

[13:18] <Ven> and the make bug is gone \o/ (people doing good and doing well)++

[13:19] *** bowtie_ is now known as bowtie

[13:19] *** bowtie is now known as Guest42264

[13:19] *** Guest42264 is now known as bowtie_

[13:19] <brrt> what make bug?

[13:20] <Ven> brrt: osx make segfault

[13:20] <FROGGS> brrt: when expanded makefile lines were very long

[13:20] <brrt> aha

[13:20] <FROGGS> moritz++ fixed that together with someone I think

[13:20] <Ven> I remember it :)

[13:20] *** spider-mario left
[13:21] <brrt> did you know that os x whateveritscalled doesn't come with gdb anymore?

[13:22] * brrt finds that he can't really enforce say() on DESTROY either

[13:23] *** spider-mario joined
[13:24] <brrt> do we have an actual working example of DESTROY?

[13:27] *** BenGoldberg joined
[13:29] *** SHODAN joined
[13:35] *** grondilu left
[13:37] *** BenGoldberg left
[13:38] *** xragnar left
[13:38] *** brrt left
[13:41] *** xragnar joined
[13:45] <nine> brrt seems to always quit right before I want to answer him

[13:45] <FROGGS> he backlogs though

[13:46] * colomon is curious how we spectest DESTROY

[13:46] *** Px12 left
[13:47] *** guru joined
[13:47] *** sqirrel_ left
[13:47] *** guru is now known as Guest57472

[13:47] *** JimmyZ joined
[13:47] *** Guest57472 is now known as ajr_

[13:48] <JimmyZ> here is a way: https://gist.github.com/jnthn/dbe4e347cc092fa8cf62, me thingks :P

[13:48] <JimmyZ> speaking of DESTROY

[13:49] <nine> brrt: Inline::Perl5 is successfully using DESTROY. I verified that using a test script but am struggling to put this in a proper test. The one I have now runs indefinitely on a Rakudo without DESTROY support.

[13:49] *** JimmyZ_ joined
[13:50] <nine> JimmyZ_: "Make some junk to caues a GC" is not reliable though. It depends very much on subtleties and GC configuration.

[13:51] <itz> is it S17* which are flappy?

[13:52] *** dwarring left
[13:52] *** Px12 joined
[13:52] <lizmat> itz: in the past yes, but not so much lately

[13:52] <JimmyZ_> nine: yeah

[13:53] <JimmyZ_> Does force_gc cause a GC?

[13:53] *** JimmyZ left
[13:53] *** JimmyZ_ is now known as JimmyZ

[13:54] <nine> JimmyZ: I'd say it makes it more likely ;)

[13:54] <JimmyZ> :)

[13:55] <dalek> rakudo/nom: 0fbd5f3 | (Elizabeth Mattijsen)++ | src/core/Kernel.pm:

[13:55] <dalek> rakudo/nom: Add Kernel.signal to get kernel signal values

[13:55] <dalek> rakudo/nom: 

[13:55] <dalek> rakudo/nom: Either takes a string, or Signal Enum.  Please note that we cannot reliably

[13:55] <dalek> rakudo/nom: map the Signal Enum to Kernel signal values, as these may (and do) differ per

[13:55] <dalek> rakudo/nom: kernel.

[13:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0fbd5f3815

[13:56] *** sqirrel_ joined
[13:57] <flussence> I just went to update all of my rakudo stuff, and it hangs on panda/rebootstrap.pl :(

[13:57] <lizmat> flussence: spectest went ok ?

[13:58] <flussence> I'll give that a try, gimme 7 minutes or so :)

[13:58] <lizmat> if that fails, I suggest rm -rf install plus a reconfigure from scratch

[13:59] <lizmat> the libuv upgrade path was not smooth  :-(

[13:59] <flussence> oh ok, gotcha.

[13:59] <FROGGS> ohh, yes

[13:59] <flussence> spectest appears to have hanged also...

[13:59] <FROGGS> that could case that hang...

[14:00] <dalek> specs: 3536408 | (Elizabeth Mattijsen)++ | S17-concurrency.pod:

[14:00] <dalek> specs: Initial stab at speccing Proc::Async

[14:00] <dalek> specs: review: https://github.com/perl6/specs/commit/3536408ac9

[14:00] <JimmyZ> just do `make realcean` in MoarVM  :P

[14:00] <lizmat> in my experience, realclean alone was not enough

[14:00] <lizmat> I always had to nuke the install dir

[14:05] *** alexghacker joined
[14:06] *** JimmyZ left
[14:07] <dalek> specs: b36c9eb | (Elizabeth Mattijsen)++ | S28-special-names.pod:

[14:07] <dalek> specs: Spec Kernel.signal

[14:07] <dalek> specs: review: https://github.com/perl6/specs/commit/b36c9eb10d

[14:07] * woolfy1 fears all that nuking that lizmat does...

[14:08] <lizmat> .oO( from orbit, no less :-)

[14:08] <woolfy1> o0O(the house is trembling and shaking)

[14:09] *** alexghacker left
[14:11] *** alexghacker joined
[14:11] <rindolf> Hi all. Sup?

[14:12] <tadzik> hello rindolf 

[14:12] <FROGGS> rindolf: a pull request: https://bitbucket.org/shlomif/perl-xml-libxml/issue/5/possible-typo-in-test-file

[14:13] <flussence> lizmat: I did rm -r install/, git clean -dfx in rakudo/ & rakudo/nqp & rakudo/nqp/MoarVM, and it still hangs... I just remembered there's all that 3rdparty/ stuff that git-clean didn't catch so I've cleared *that* out and I'm trying again.

[14:13] <lizmat> flussence++ for persevering

[14:13] *** spider-mario left
[14:14] <flussence> not a big deal, it takes less time to rebuild all of rakudo these days than it used to to run hello world :)

[14:14] <FROGGS> *g*

[14:15] <flussence> yep, these spectests look a lot healthier now...

[14:15] *** kjs_ left
[14:16] *** zakharyas joined
[14:16] <dalek> rakudo/nom: b8e0136 | (Elizabeth Mattijsen)++ | src/core/Kernel.pm:

[14:16] <dalek> rakudo/nom: Get Kernel.signal up to spec  :-)

[14:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b8e0136f7c

[14:17] <rindolf> tadzik: what's up?

[14:17] <tadzik> things are well :)

[14:17] <rindolf> FROGGS: the tests pass.

[14:18] <FROGGS> rindolf: that's not really an answer

[14:19] <rindolf> FROGGS: well, does your pull req breaks them?

[14:19] <rindolf> FROGGS: is it worth risking a "fix" and for atypo?

[14:19] <FROGGS> rindolf: my pull request is a question about a possible typo in your test

[14:20] <FROGGS> rindolf: so it is possible that you're testing the wrong hting

[14:20] <FROGGS> thing*

[14:20] <FROGGS> rindolf: ohh, s/pull request/issue/

[14:21] *** sqirrel_ left
[14:21] <rindolf> FROGGS: ah.

[14:28] *** pat_js joined
[14:33] <dalek> roast: 665ee24 | (Elizabeth Mattijsen)++ | S32-str/lines.t:

[14:33] <dalek> roast: Add tests for Str.lines(:eager)

[14:33] <dalek> roast: review: https://github.com/perl6/roast/commit/665ee2487d

[14:33] <dalek> roast: dd8a067 | (Elizabeth Mattijsen)++ | S02-magicals/KERNEL.t:

[14:33] <dalek> roast: Add tests for Kernel.signals/signal

[14:33] <dalek> roast: review: https://github.com/perl6/roast/commit/dd8a067453

[14:36] *** kurahaupo left
[14:38] <dalek> specs: 9103f96 | (Elizabeth Mattijsen)++ | S (2 files):

[14:38] <dalek> specs: Also allow bare int's to be passed to .signal

[14:38] <dalek> specs: review: https://github.com/perl6/specs/commit/9103f961d2

[14:40] <dalek> rakudo/nom: 945d1ed | (Elizabeth Mattijsen)++ | src/core/Kernel.pm:

[14:40] <dalek> rakudo/nom: Again, bring Kernel.signal up to spec

[14:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/945d1ed12e

[14:43] <dalek> roast: 4be29f3 | (Elizabeth Mattijsen)++ | S02-magicals/KERNEL.t:

[14:43] <dalek> roast: Add Kernel.signal Int tests

[14:43] <dalek> roast: review: https://github.com/perl6/roast/commit/4be29f3c95

[14:44] *** kaare_ joined
[14:48] *** MilkmanDan joined
[14:49] *** zakharyas left
[14:55] *** xenoterracide joined
[14:58] *** jaffa4 joined
[15:07] <jnthn> lizmat++ # spec and test work

[15:10] <lizmat> cycling&

[15:10] <jaffa4> bootstraping panda, cannot find shell command ...Could not find Shell::Command i

[15:10] *** H2O1 joined
[15:17] *** H2O1 left
[15:20] *** alexghacker1 joined
[15:21] *** rlilja joined
[15:24] *** alexghacker left
[15:24] *** Alina-malina left
[15:24] *** gtodd1 left
[15:24] *** \00 left
[15:24] *** gtodd joined
[15:24] *** mj41 joined
[15:29] *** darutoko- joined
[15:31] *** labster_ joined
[15:31] *** alexghacker joined
[15:33] *** chenryn_ joined
[15:33] *** Alina-malina joined
[15:38] *** alexghacker1 left
[15:38] *** pat_js left
[15:38] *** chenryn left
[15:38] *** darutoko left
[15:38] *** labster left
[15:38] *** labster_ is now known as labster

[15:39] *** Px12 left
[15:44] *** Px12 joined
[16:02] *** denis_boyun_ joined
[16:15] *** pmurias joined
[16:19] <pmurias> nine: the hanging test issue you could solve with a timeout

[16:29] *** chenryn_ left
[16:38] *** telex left
[16:40] *** ClarusCogitatio left
[16:40] *** telex joined
[16:43] *** ClarusCogitatio joined
[16:46] *** xinming joined
[16:46] *** xinming_ left
[16:55] *** jepeway joined
[16:58] *** ggoebel1111117 joined
[17:02] *** ggoebel1111116 left
[17:05] *** denis_boyun___ joined
[17:06] *** denis_boyun_ left
[17:11] *** ajr_ left
[17:16] <nine> pmurias: I know. But then the test wouldn't be 100 % reliable anymore. But I'm gonna do it anyway. No need to bother the users right at the start.

[17:20] *** denis_boyun___ left
[17:31] *** Ven left
[17:34] *** Ven joined
[17:37] *** davido___ joined
[17:37] *** mr-foobar left
[17:38] *** BizarreCake joined
[17:44] *** zakharyas joined
[17:47] *** Sqirrel joined
[17:48] *** slmult0 joined
[17:48] <dalek> Inline-Perl5: 8cadf89 | nine++ | lib/Inline/Perl5.pm6:

[17:48] <dalek> Inline-Perl5: Save even more method calls in destructor

[17:48] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/8cadf89d87

[17:48] <dalek> Inline-Perl5: 5c89aae | nine++ | p5helper.c:

[17:48] <dalek> Inline-Perl5: Set perl_destruct_level to sequaky clean as suggested by perlembed

[17:48] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/5c89aae9fe

[17:48] <dalek> Inline-Perl5: cc683da | nine++ | / (11 files):

[17:48] <dalek> Inline-Perl5: Rename Perl 5 interpreter variable in tests and examples to $p5

[17:48] <dalek> Inline-Perl5: 

[17:48] <dalek> Inline-Perl5: Suggested by abraxxa++

[17:48] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/cc683dae98

[17:48] <dalek> Inline-Perl5: 4884c94 | nine++ | t/p6_object_destructor.t:

[17:48] <dalek> Inline-Perl5: Add timeout to p6_object_destructor.t

[17:48] <dalek> Inline-Perl5: 

[17:48] <dalek> Inline-Perl5: Destructors are only available in rakudo git. No need to punish

[17:48] <dalek> Inline-Perl5: users trying to install the module.

[17:48] <dalek> Inline-Perl5: 

[17:48] <dalek> Inline-Perl5: Suggested by pmurias++

[17:48] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/4884c94d4b

[17:51] *** davido___ left
[18:12] *** guru joined
[18:12] *** guru is now known as Guest57095

[18:12] *** Guest57095 is now known as ajr_

[18:15] *** dwarring joined
[18:19] *** Rotwang joined
[18:25] <timotimo> hmm, so few individuals committed this week

[18:26] <timotimo> apart from nines excellent work and liz's, the weekly might look a wee bit bleak

[18:30] <FROGGS> :o(

[18:31] <FROGGS> I implemented cglobals!

[18:31] *** mj41 left
[18:31] *** skids joined
[18:31] <FROGGS> and did the libuv upgrade

[18:34] <lizmat> FROGGS++  !!

[18:35] <lizmat> and Travis support ?

[18:36] *** raiph joined
[18:37] <lizmat> and I think TimToady's reify fixes made the spectest run about 5% faster

[18:37] <pmurias> cglobals?

[18:38] <FROGGS> pmurias: C globals

[18:38] <pmurias> for NativeCall?

[18:38] <FROGGS> lizmat: and that travis stuff, aye

[18:38] <FROGGS> pmurias: right

[18:38] <FROGGS> it awaits jnthn's approval, but I think it is all right

[18:39] <vendethiel> first of all: anything that uses nativecall is not nqp-js compitable

[18:39] <vendethiel> s/ita/ati/

[18:40] <FROGGS> vendethiel: why?

[18:40] <vendethiel> FROGGS: ... because js things can't use c libs?

[18:40] <FROGGS> is there no way to add that support?

[18:40] <vendethiel> no

[18:40] <FROGGS> :/

[18:40] <vendethiel> not in a lifetime

[18:41] <vendethiel> also, Inline::P5 is incompatible with js.

[18:41] <vendethiel> so, let's be wary of doing everything that way :-)

[18:41] <FROGGS> so the node ppl also have no FFI?

[18:42] <vendethiel> FROGGS: there are the node ppl, and there are the browser ppl

[18:42] <FROGGS> vendethiel: what about node then?

[18:42] <vendethiel> FROGGS: node has node-ffi

[18:42] <FROGGS> see :o)

[18:42] <vendethiel> see what?

[18:43] <vendethiel> why would you want to compile your perl6 to js ... To run it server-side?

[18:43] <vendethiel> seems kinda counter-productive

[18:43] <FROGGS> nqp-js will be able to support Native on node

[18:43] *** ClarusCogitatio left
[18:43] <FROGGS> that's what it currently does

[18:43] <vendethiel> but then why not only run it with rakudo-moar?

[18:43] <vendethiel> to use some npm lib? that seems *far* less likely that using it on the client side.

[18:43] <FROGGS> maybe you hava a node infrastructure? I dunno

[18:44] <vendethiel> I dunno either. So, I don't think it's very useful

[18:44] <vendethiel> I've seen it, people compiling scala to js to run it under node; but it seems like one hundredth of the use cases

[18:45] <FROGGS> well, for *me* perl6-j is not useful either, but there seems to be some interest

[18:45] <vendethiel> FROGGS: but the other option would be to code in java. Which you don't want to 

[18:45] <vendethiel> so tht's not thje same

[18:45] *** ClarusCogitatio joined
[18:45] <FROGGS> that might be true :o)

[18:46] <vendethiel> what I'm saying is that, in more than 99% percents of the cases, you just run your code on moar rather than compile it to js to run it under node...

[18:46] <vendethiel> "99% percents" right.

[18:46] *** _sri left
[18:46] <FROGGS> yeah

[18:46] *** _sri joined
[18:47] <rindolf> FROGGS: i think i'll close your issue.

[18:48] <FROGGS> rindolf: okay

[18:48] <rindolf> FROGGS: sorry.

[18:48] <FROGGS> rindolf: np

[18:48] *** BizarreCake left
[18:50] <FROGGS> rindolf: 'as per irc' - you've not really said why it is invalid :o)

[18:55] <rindolf> FROGGS: yes, i'm being lazy.

[18:55] <rindolf> Laziness, impatience and Hubris.

[18:57] <lizmat> .oO( if rindolf ever complains of lack of feedback on his projects, we now know why )

[18:58] <rindolf> lizmat: :-)

[19:00] *** darutoko- left
[19:02] <pmurias> vendethiel: what started the Inline::P5/js discussion?

[19:02] <vendethiel> pmurias: me being worried :)

[19:02] <pmurias> about what?

[19:02] <Ven> about people going full-C implems or full-P5 implems

[19:02] <dalek> roast: 90fa2c0 | (Elizabeth Mattijsen)++ | S22-package-format/local.t:

[19:02] <dalek> roast: Make sure we can precompile code with -use-

[19:02] <dalek> roast: review: https://github.com/perl6/roast/commit/90fa2c0a9d

[19:02] <Ven> and then making us unable to have multiple implems

[19:03] <pmurias> you mean implementing core parts of Rakudo in C or P5?

[19:04] <Ven> pmurias: not even core

[19:05] <pmurias> re Native call on rakudo-js, node has ffi

[19:05] <pmurias> and in the browser we have enscripten

[19:05] <pmurias> * emscripten

[19:06] *** zakharyas left
[19:06] <Ven> uh.. let's not :(

[19:07] <Ven> seems heavy and unreliable to require llvm to emscripten of nativecalled library to just use them 

[19:07] *** BizarreCake joined
[19:08] <pmurias> seems better then using an emscriptened perl5 interpreter to run a module ;)

[19:08] <Ven> true :D.

[19:08] * lizmat just realizes she specced stuff with underscores again and nobody complained

[19:08] *** zakharyas joined
[19:08] <Ven> but worse than just having a p6 version :)

[19:09] *** dolmen joined
[19:09] <colomon> lizmat: haven't noticed it yet, but you can consider this a complaint from me.  ;)

[19:09] <FROGGS> lizmat: I hereby complain too! :P

[19:10] <flussence> argh, some of my code's failing on 32-bit

[19:19] <dalek> specs: a729e2b | (Elizabeth Mattijsen)++ | S17-concurrency.pod:

[19:19] <dalek> specs: Don't spec new stuff with _ anymore

[19:19] <dalek> specs: review: https://github.com/perl6/specs/commit/a729e2ba91

[19:19] <dalek> specs: a6e8af2 | (Elizabeth Mattijsen)++ | S17-concurrency.pod:

[19:19] <dalek> specs: Taking jnthn's ++ as an ok for positionals

[19:19] <dalek> specs: review: https://github.com/perl6/specs/commit/a6e8af2b2a

[19:24] <lizmat> FWIW, I consider using - instead of _ in identifiers as a part of eating your own dogfood

[19:26] <pmurias> Unknown operator precedence specification "%comma" at line 28, near "$quoted~''

[19:27] <pmurias> what does that mean?

[19:27] <pmurias> caused by ./nqp-m --module-path gen/moar/stage2/ src/vm/js/QAST/Compiler.nqp 

[19:28] <FROGGS> that it cannot resolv %comma in method O

[19:29] <moritz> pmurias: looks like something's wrong with the operator precedence parser, or with who an operator is set up

[19:29] <FROGGS> hmmm, %comma is set up here: https://github.com/pmurias/nqp-js/blob/master/src/NQP/Grammar.nqp#L718

[19:30] <pmurias> -e 'say(1+1)' trigger that too

[19:30] <dalek> rakudo-star-daily: 46e5eb4 | coke++ | log/ (15 files):

[19:30] <dalek> rakudo-star-daily: today (automated commit)

[19:30] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/46e5eb40f2

[19:30] <dalek> rakudo-star-daily: 2342a20 | coke++ | log/ (15 files):

[19:30] <dalek> rakudo-star-daily: today (automated commit)

[19:30] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/2342a20107

[19:30] <dalek> perl6-roast-data: afedf31 | coke++ | / (6 files):

[19:30] <dalek> perl6-roast-data: today (automated commit)

[19:30] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/afedf31dcd

[19:30] <FROGGS> pmurias: we are talking about nqp code, right?

[19:30] <pmurias> * triggers

[19:30] <[Coke]> niecza is borked on host08. rakudos seem to be ok.

[19:30] <pmurias> ./nqp-m --module-path gen/moar/stage2/ -e 'say(1+1)'

[19:31] <FROGGS> pmurias: is it possible that it does not run the INIT block in the link I posted?

[19:31] <FROGGS> pmurias: you could test that by commenting line 705 and 721

[19:34] <[Coke]> clean spectests? nope.

[19:34] <[Coke]> (for brrt in backscroll)

[19:35] <FROGGS> [Coke]: I was curious also

[19:35] *** kjs_ joined
[19:36] <[Coke]> rakudo.jvm is failing 7677 tests on host08, which could be a host08 thing.

[19:36] <[Coke]> moar is unaffacted by the move. parrot is failing 331 tests today up from 271

[19:36] <dalek> specs: 4df4368 | (Elizabeth Mattijsen)++ | S17-concurrency.pod:

[19:36] <dalek> specs: Spec Str.IO.watch -> IO::Notification.watch_path

[19:36] <dalek> specs: review: https://github.com/perl6/specs/commit/4df4368e50

[19:37] <dalek> nqp-js: d08a287 | (Pawel Murias)++ | / (9 files):

[19:37] <dalek> nqp-js: Migrate from parrot to moar.

[19:37] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/d08a287135

[19:37] <FROGGS> lizmat: watch_path or watch-path?

[19:37] <lizmat> well, it has been implemented as watch_path for a while now

[19:37] <pmurias> FROGGS: it seems that some strange things were happening and just tweaking things made them disappear

[19:37] <lizmat> so we will need a deprecation cycle for that

[19:38] <pmurias> moarvm++ # make js-test runs much much faster on moar!

[19:38] <lizmat> but the last time I changed things like that in the spec, I upset jnthn quite a lot, so I'm reluctant to go back on that

[19:38] <lizmat> most people will be using the shortcut anyway

[19:38] <nine> So we have a healthy mix of - and _ in method names?

[19:38] <lizmat> unhealthy, I would say  :-(

[19:39] <pmurias> we have to decide on one or the other

[19:39] <lizmat> I hope we can get clarity at the Perl 6 hackathon after the APW in a few weeks

[19:40] <lizmat> at least we have a deprecation path that can be easily put in place

[19:40] <nine> I really can't see the advantage of even allowing - in names anyway. We'll see foobar, foo_bar, foo-bar and fooBar in real life code. Probably all of them in larger code bases.

[19:40] <Ven> nine: - ftw :)

[19:40] <lizmat> nine: no need to be inconsistent from the beginning  :-)

[19:42] <[Coke]> niecza says: Got a SIGABRT while executing native code. This usually indicates

[19:42] <[Coke]> a fatal error in the mono runtime or one of the native libraries

[19:42] <[Coke]> used by your application.

[19:42] <dalek> rakudo/nom: 14cb952 | (Elizabeth Mattijsen)++ | / (3 files):

[19:42] <dalek> rakudo/nom: Add Str.IO.watch, remove need for code stubs

[19:42] <dalek> rakudo/nom: 

[19:42] <dalek> rakudo/nom: This will probably need a reconfigure to work.

[19:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/14cb9528c7

[19:42] <[Coke]> diakopter: what's the difference between host07 & host08?

[19:42] <nine> lizmat: it's only the beginning if you're thinking of green field development with no existing libraries. I'm more thinking of existing code bases. So we'll have at least foo-bar from Perl 6 core, foo_bar from your existing code base if you stuck to Perl Best Practices, foobar because it's inevitable and fooBar if part of your code touches standard interfaces like the DOM.

[19:43] *** jercos_ is now known as jercos

[19:43] <Ven> nine: no, no. We'll just get stuff built on top of the DOM ;)

[19:43] <Ven> not raw calls :p

[19:43] <nine> sure

[19:43] <lizmat> if P5 had had '-' in identifiers, I'm pretty sure it would have been "-" instead of "_"

[19:43] <lizmat> in PBP

[19:44] <[Coke]> hurm. mono is gone from 2.X to 3.X, bet that's most of it. :|

[19:44] <nine> lizmat: well it didn't. And now we have millions of lines of code using "_" and fingers trained to type it. And quite frankly I'm not even sure if I like "-" more than "_".

[19:44] <[Coke]> seen sorear?

[19:44] <[Coke]> .seen sorear?

[19:44] <yoleaux> I haven't seen sorear? around.

[19:44] <[Coke]> .seen sorear

[19:44] <yoleaux> I haven't seen sorear around.

[19:45] <nine> PBP's argument for "_" is that is looks almost like the space character that would be there in plain English. What's the argument for "-"?

[19:45] *** ClarusCogitatio left
[19:45] <lue> nine: lowercase _ , at least on my US keyboard :) .

[19:45] <Ven> nine: it's easier to type (and easier for me to read)

[19:45] <pmurias> nine: it-is-more-pretty-than-_-and-easier-to-type

[19:45] <Ven> (easier to type both on qwerty and on azerty)

[19:46] <FROGGS> and on qwertz

[19:46] <dalek> specs: c00c203 | (Elizabeth Mattijsen)++ | S99-glossary.pod:

[19:46] <dalek> specs: Add PBP lemma

[19:46] <dalek> specs: review: https://github.com/perl6/specs/commit/c00c2033ec

[19:46] *** rindolf left
[19:47] *** avuserow_ is now known as avuserow

[19:47] <lizmat> FROGGS: so you're saying we shouldn't use "-" ?

[19:47] <lue> nine: fwiw, I used to not think much of - as a character for names, but I've grown to like it.

[19:47] *** ClarusCogitatio joined
[19:48] <FROGGS> lizmat: yes, I'd vote for - instead of _ in methods and subs, but _ in all caps constants

[19:48] <nine> Beauty is in the eye of the beholder. And for some perceived beauty we get an even worse mix of naming conventions.

[19:49] <FROGGS> there is only one way to mi it :o)

[19:49] <lue> to me, foo-bar looks nicer than foo_bar (though not by much), and FOO_BAR looks better than FOO-BAR (by a fair bit).

[19:49] <dwarring> er ++ "-"

[19:49] <lue> (it also lets me not have to change whether or not I'm pressing down the shift key while typing a name :P)

[19:50] <pmurias> we could enforce a naming convention but it's seem a bit unperlish (and usefull)

[19:50] <nine> Nice arguments for a completely new language with no existing code. But I'd really like to change the latter. And then it will just worsen the mixed conventions problem. And that in a language with lousy IDE support.

[19:52] <[Coke]> anyone else getting this:

[19:52] <nine> We all like to laugh about PHP's mix of conventions in it's 10000s of builtin functions. But in Perl we already have the same because these functions are in different modules by different authors. And now we're making it even worse.

[19:52] <[Coke]> S05-transliteration/trans.rakudo.moar aborted 56 test(s)

[19:53] <lue> nine: different people doing things differently is unavoidable and, in my opinion, not worth the effort to prevent.

[19:53] <nine> This really feels like the first change of the language that's not been thought through entirly.

[19:53] <nine> And I say that even though I actually _like_ the possibility to use - in identifiers. I just fear it will cost more than it gains us.

[19:54] <skids> r: use Test; for (0 .. 20) -> $e { given (1) { is 1, 0, "$e"; } } # SEGV on rakudo-m.  Also other weird (IO/timing related) errors with Test, but only when 'given' used.

[19:54] <camelia> rakudo-moar 945d1e: OUTPUT«(signal )not ok 1 - 0␤␤# Failed test '0'␤# at /tmp/tmpfile line 1␤# expected: '0'␤#      got: '1'␤not ok 2 - 1␤␤# Failed test '1'␤# at /tmp/tmpfile line 1␤# expected: '0'␤#      got: '1'␤not ok 3 - 2␤␤# Failed test '2'␤# at /t…»

[19:54] <camelia> ..rakudo-parrot 945d1e: OUTPUT«not ok 1 - 0␤␤# Failed test '0'␤# at /tmp/tmpfile line 1␤# expected: '0'␤#      got: '1'␤not ok 2 - 1␤␤# Failed test '1'␤# at /tmp/tmpfile line 1␤# expected: '0'␤#      got: '1'␤not ok 3 - 2␤␤# Failed test '2'␤# at /tmp/tmpf…»

[19:54] <camelia> ..rakudo-jvm 945d1e: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[19:55] <lue> - has been a part of identifiers for a long time now (as long as I've been using Perl 6, at least), the only thing changing is more consistency in the spelling of names in the core.

[19:55] <flussence> I've been wanting to ask something related for a while: I've seen module titles in the ecosystem that use «::» and ones that use «-», and can't decide which is "better".

[19:55] <lizmat> flussence: that is another issue

[19:56] <lizmat> :: implies a hierarchy in packages

[19:56] <flussence> I'm of half a mind to change mine to that because the vast majority use it already...

[19:57] <lue> I think - instead of :: happens in situations where a colon is either disallowed or discouraged as part of a name.

[20:02] <colomon> lue: module names can be any old string, so far as I know

[20:02] <dalek> rakudo/nom: b41dda9 | (Elizabeth Mattijsen)++ | src/core/Proc/Async.pm:

[20:02] <dalek> rakudo/nom: Fix copynpasto/thinko in chars/bytes logic

[20:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b41dda9b6a

[20:03] <lue> colomon: yeah, I was thinking more of filesystems and such.

[20:03] <colomon> flussence: yes, I think you should probably change yours

[20:04] <colomon> the oddballs are Perl6-Math-Quaternion Test-ClientServer Test-Corpus Text-Levenshtein Text-Tabs-Wrap io-prompt

[20:05] *** kurahaupo joined
[20:06] *** xragnar left
[20:06] <flussence> Text-Tabs-Wrap is the way it is for hysterical raisins, the others I have are easily fixed though, I'll change those

[20:06] *** zakharyas left
[20:07] *** xragnar joined
[20:08] <FROGGS> can somebody put me the output of this in a gist? perl6 -e '"a" ~~ /(a)/; say $/.DUMP'

[20:10] *** brrt joined
[20:11] <colomon> FROGGS: on it

[20:11] <FROGGS> thank you :o)

[20:11] <colomon> https://gist.github.com/colomon/c0c2aec35685b2fbafcd # does that look right?

[20:11] <colomon> my rakudo may be lagging by a few days

[20:11] <FROGGS> yes, it does :o)

[20:11] <FROGGS> that doesnt matter

[20:12] <dalek> specs: f175d77 | (Elizabeth Mattijsen)++ | S17-concurrency.pod:

[20:12] <dalek> specs: Allow :%ENV to be passed to Proc::Async.new

[20:12] <dalek> specs: 

[20:12] <dalek> specs: Seems useful to be able to run a process "cleanly" or with whatever environment

[20:12] <dalek> specs: you want, without having to set up a lexical %*ENV.

[20:12] <dalek> specs: review: https://github.com/perl6/specs/commit/f175d775bb

[20:12] <FROGGS> it is just that I am hacking on that right now

[20:12] <colomon> FROGGS: glad to help

[20:12] * colomon 's server is down because the battery backup went kablooey

[20:14] * colomon didn't mean to be random with that last comment, but the server is usually where he builds the latest rakudo first; on his laptop, builds risk messing with stuff I am using for $work.

[20:15] <FROGGS> ahh

[20:16] *** kaare_ left
[20:22] *** slmult0 left
[20:24] *** BizarreCake left
[20:27] *** Px12 left
[20:31] *** xenoterracide left
[20:32] *** xenoterracide joined
[20:32] *** brrt left
[20:39] *** kjs_ left
[20:51] <nine> Oh and how on earth is one supposed to call a perl6-method from Perl 5 code?

[20:52] <nine> This is going to be ugly...

[20:52] <lizmat> nine: I wouldn't mind if we're not going there

[20:52] <lizmat> this is about providing access to Perl 5 libraries from Perl 6

[20:52] <lizmat> not the other way around

[20:53] *** ajr_ left
[20:54] <nine> if one is trying to upgrade a larfe codebase piece by piece, the other way round is going to be just as important

[20:55] <nine> And upgrading is the only way I can see me using P6 anytime soon. Otherwise I'd have been using it for years already...

[20:56] <timotimo> pass callables to p5 from p6 code?

[20:57] <dalek> rakudo/nom: ef8387f | (Elizabeth Mattijsen)++ | src/core/Proc/Async.pm:

[20:57] <dalek> rakudo/nom: Streamline Supply generating code

[20:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ef8387f002

[20:58] <nine> This little cosmetic change may bring quite a lot of ugliness with it. I just hope thst I'm going to be wrong about this.

[20:59] <lizmat> nine: what little cosmetic change are you talking about ?

[20:59] <nine> - as new standard in identifyers

[21:00] <lizmat> ugliness as in broken code ?

[21:00] *** raiph left
[21:00] <lizmat> if so, that's why we can deprecate

[21:01] <nine> As in workarounfs needed for something as simple as a method call

[21:03] <nine> Well maybe I'll see it in a more positive light in the morning. good night!

[21:03] <lizmat> good night, nine!

[21:03] <lizmat> thanks for all the Inline::Perl5 work!

[21:07] <timotimo> yup

[21:07] <dalek> rakudo/nom: 2a0c0dd | (Elizabeth Mattijsen)++ | src/core/Proc/Async.pm:

[21:07] <dalek> rakudo/nom: Implement :%ENV for Proc::Async.start, as per spec

[21:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2a0c0ddfbf

[21:09] *** jaffa4 left
[21:16] *** Ven left
[21:25] <dalek> nqp: fe64f00 | (Elizabeth Mattijsen)++ | docs/ops.markdown:

[21:25] <dalek> nqp: Add doc stub for nqp::spawnprocasync

[21:25] <dalek> nqp: review: https://github.com/perl6/nqp/commit/fe64f00719

[21:25] * lizmat hopes jnthn will fill in the stub

[21:29] <lizmat> m: my $a=Proc::Async.new(:path<echo>,:args<$SHELL>); $a.stdout_chars.tap(&say); await $a.start  # expected something else then $SHELL

[21:29] <camelia> rakudo-moar b41dda: OUTPUT«$SHELL␤␤»

[21:30] <lizmat> hmmm... should I even be able to do this on Camelia?

[21:30] <timotimo> lizmat: Proc::Async is supposed to go through the shell?

[21:30] <lizmat> not sure now

[21:30] <timotimo> and no, it should probably be disabled in the restricted setting ... which is weaksauce anyway

[21:31] <timotimo> i'd actually love to bounce ideas back and forth with someone about building a secure execution thingie based on spesh

[21:31] *** eternaleye left
[21:31] *** eternaleye joined
[21:32] <cognome> r: say $*KERNEL.WHAT

[21:32] <camelia> rakudo-moar 2a0c0d: OUTPUT«Cannot look up attributes in a type object␤  in method name at src/gen/m-CORE.setting:21480␤  in method gist at src/gen/m-CORE.setting:21333␤  in sub say at src/gen/m-CORE.setting:15106␤  in block <unit> at /tmp/tmpfile:1␤␤»

[21:32] <camelia> ..rakudo-jvm 2a0c0d: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[21:32] <camelia> ..rakudo-parrot 2a0c0d: OUTPUT«Cannot look up attributes in a type object␤  in method name at gen/parrot/CORE.setting:19117␤  in method gist at gen/parrot/CORE.setting:18970␤  in sub say at gen/parrot/CORE.setting:14981␤  in sub say at gen/parrot/CORE.setting:14977␤  in bloc…»

[21:32] <lizmat> cognome: that's odd

[21:32] <cognome> I am odd too

[21:32] <cognome> ... and old

[21:34] <dalek> rakudo/nom: fbef9c1 | (Elizabeth Mattijsen)++ | src/RESTRICTED.setting:

[21:34] <dalek> rakudo/nom: Make Proc::Async not work in restricted setting

[21:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fbef9c127a

[21:35] *** raiph joined
[21:37] <dalek> rakudo/nom: f882052 | (Elizabeth Mattijsen)++ | src/core/Proc/Async.pm:

[21:37] <dalek> rakudo/nom: Better default handling for Proc::Async's :ENV

[21:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f882052c98

[21:37] <dalek> rakudo/nom: 8dd2409 | (Elizabeth Mattijsen)++ | src/core/Proc/Async.pm:

[21:37] <dalek> rakudo/nom: say is a print, why not in the async case as well?

[21:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8dd2409a14

[21:38] <lizmat> timotimo: does tainting ring a bell with you ?

[21:38] <timotimo> yes

[21:38] <timotimo> the pypy people had a tainting objectspace for some time

[21:38] <lizmat> P5 has tainting

[21:38] <timotimo> oh?

[21:38] <lizmat> although not many people use it in production

[21:38] <timotimo> based on TIE? :)

[21:39] *** Rotwang left
[21:39] <lizmat> nope

[21:40] <timotimo> oh, it's internal to core p5?

[21:40] <timotimo> as in ... implemented in C?

[21:40] <lizmat> yes

[21:40] <lizmat> https://metacpan.org/pod/distribution/PodSimplify/newrun.pod, look for -t and -T

[21:40] <lizmat> oops

[21:41] <lizmat> https://metacpan.org/pod/distribution/perl/pod/perlrun.pod   # proper URL

[21:42] <lizmat> it's also still specced in S19:122

[21:42] <synopsebot> Link: http://perlcabal.org/syn/S19.html#line_122

[21:44] <timotimo> hm.

[21:44] <timotimo> not sure if it's exactly what i'm looking for

[21:45] <lizmat> well, it's part of what you want, I think

[21:46] <timotimo> maybe

[21:46] <timotimo> i thought along the lines of not allowing a user to specify nqp:: ops, but "indirect" calling would be okay, but that doesn't sound so sensible any more ...

[21:47] *** cognome left
[21:48] *** cognome joined
[21:55] <lizmat> m: Systemic.new.WHAT   # cognome's bug golfed down

[21:55] <camelia> rakudo-moar 2a0c0d: OUTPUT«P6opaque: no such attribute '$!name'␤  in submethod BUILD at src/gen/m-CORE.setting:21328␤  in method BUILDALL at src/gen/m-CORE.setting:954␤  in method bless at src/gen/m-CORE.setting:937␤  in method new at src/gen/m-CORE.setting:921␤  in any  a…»

[21:55] <lizmat> p: Systemic.new.WHAT   # cognome's bug golfed down

[21:55] <camelia> rakudo-parrot 2a0c0d: ( no output )

[21:56] <lizmat> p: say Systemic.new.WHAT 

[21:56] <camelia> rakudo-parrot 2a0c0d: OUTPUT«Cannot look up attributes in a type object␤  in method name at gen/parrot/CORE.setting:3194␤  in method gist at gen/parrot/CORE.setting:18970␤  in sub say at gen/parrot/CORE.setting:14981␤  in sub say at gen/parrot/CORE.setting:14977␤  in block…»

[21:56] *** pmurias left
[21:56] <lizmat> huh?  only if I do a say() ?

[21:57] <sjn> \o

[21:57] <lizmat> sjn: /o

[21:57] * sjn just came for a Java conference, having spent a LOT of time talking about Perl6 :D

[21:58] <timotimo> cool :)

[21:58] <sjn> *tired*

[21:59] <sjn> managed to shoot down almost all the critique though, and (hopefully) convinced at least a couple people that Perl6 is worth investigating today

[21:59] <lizmat> sjn++

[21:59] <sjn> Also, came to think of a new "pitch"

[21:59] <sjn> well. "angle" for promoting Perl6

[22:02] <sjn> "Year after year, there's been cool stuff presented about Perl6 at conferences all over the place. THAT STUFF IS STILL COOL; And now it also has all the new cool stuff since then, to *multiply* with it's coolness" </hype> 

[22:02] <cognome> lizmat, to thanks me for giving you work, you can do even more work and merge my pull request :)    https://github.com/rakudo/rakudo/pull/279

[22:04] <sjn> maybe a bit over the top, but at least I got some of the guys raise their eyebrows :)

[22:05] <dalek> rakudo/nom: 8cb5647 | (Stéphane Payrard)++ | src/core/Grammar.pm:

[22:05] <dalek> rakudo/nom: Grammar.parse :args support

[22:05] <dalek> rakudo/nom: 

[22:05] <dalek> rakudo/nom: See https://github.com/perl6/specs/commit/67579a1cf7

[22:05] <dalek> rakudo/nom: https://github.com/perl6/roast/commit/1bc8a5fee6

[22:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8cb5647693

[22:05] <dalek> rakudo/nom: 351c122 | lizmat++ | src/core/Grammar.pm:

[22:05] <dalek> rakudo/nom: Merge pull request #279 from cognominal/patch-1

[22:05] <dalek> rakudo/nom: 

[22:05] <dalek> rakudo/nom: Grammar.parse :args support

[22:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/351c122531

[22:10] <lizmat> cognome: alas, no passing TODO tests  :-(

[22:10] * lizmat has committed enough for today

[22:10] <lizmat> so sleep&

[22:10] <cognome> lizmat: ???

[22:11] <lizmat> cognome: I was hoping the new :args feature would have had TODO tests in roast

[22:11] <cognome> I think it is in fudged tests.

[22:11] <cognome> my bad.

[22:11] <lizmat> you mean, as skipped?  then it is time to unskip them  :-)

[22:11] <lizmat> good night all!

[22:11] <cognome> yes, skipped

[22:12] <cognome> g'nigh

[22:13] <cognome> night

[22:14] *** exixt left
[22:17] *** PZt left
[22:19] *** bjz left
[22:23] *** bjz joined
[22:25] <timotimo> gnite lizmat!

[22:26] *** raiph left
[22:38] *** exixt joined
[22:39] *** araujo joined
[22:39] *** araujo left
[22:39] *** araujo joined
[22:41] *** skids left
[22:55] *** chenryn joined
[22:58] *** SamuraiJack joined
[23:16] *** dolmen left
[23:26] *** SamuraiJack left
[23:26] *** xiaomiao left
[23:29] *** gtodd left
[23:29] *** gtodd joined
[23:29] *** xiaomiao joined
[23:35] <ingy> anyone know where fglock++ hangs out on irc?

[23:37] *** BenGoldberg joined
[23:38] *** nebuchadnezzar left
[23:39] *** nebuchadnezzar joined
[23:44] <tadzik> internal booking channels, perhaps :P

[23:48] *** xenoterracide left
[23:58] *** ingy left
[23:58] *** ingy joined
[23:59] <[Coke]> .seen fglock

[23:59] <yoleaux> I saw fglock 23 May 2014 13:45Z in #perl6: <fglock> something like   x( :scalar )  I think

