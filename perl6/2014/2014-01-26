[00:00] <jnthn> :)

[00:00] <jnthn> 'night, timotimo 

[00:03] <psch> this is confusing me https://gist.github.com/peschwa/8625806

[00:04] <psch> why does the error change to undeclared variable?

[00:06] <jnthn> psch: Double quotes interpolate variables

[00:06] <psch> ooh

[00:06] <psch> right

[00:06] *** kst` joined
[00:06] <psch> that's silly of me

[00:06] <jnthn> Use Q[...] or something

[00:06] *** kst left
[00:06] <psch> yeah

[00:07] <psch> great, it does throw X::Assignment::RO

[00:09] <jnthn> Maybe not on MoarVM yet, though

[00:09] <Mouq> psch: Nerm‚Ä¶ I hadn't actually looked at your commit until now

[00:09] <Mouq> r: use Test; ok 'nonsense', 'this test will always succeed'

[00:09] <camelia> rakudo-parrot e51b6c, rakudo-jvm e51b6c, rakudo-moar e51b6c: OUTPUT¬´ok 1 - this test will always succeed‚ê§¬ª

[00:09] <Mouq> ok tests the truthiness of it's first argument and uses the second as a test message

[00:10] *** FROGGS[mobile] left
[00:13] *** FROGGS[mobile] joined
[00:14] <psch> oh

[00:14] <Mouq> psch: so what I think you were looking for is `is`, and I think you'll have to define a sub other than 'say'

[00:14] <psch> right

[00:14] <Mouq> psch: Hey, it's better than no test :)

[00:15] <psch> i don't know if a test that always passes is better than no test... :)

[00:15] <psch> that's what i get for only having used throws_like up to now hah

[00:16] <Mouq> psch: Hah, it's cool

[00:16] <jnthn> 'night, #perl6

[00:16] <Mouq> night jnthn

[00:16] <psch> g'night jnthn

[00:22] <psch> r: use Test; (my $a) = 1,2,3; is $a, (1,2,3), "Assignment into parentheses'd my works."

[00:22] <camelia> rakudo-parrot e51b6c, rakudo-jvm e51b6c, rakudo-moar e51b6c: OUTPUT¬´ok 1 - Assignment into parentheses'd my works.‚ê§¬ª

[00:22] <psch> Mouq: that's a better test right? 

[00:24] <dalek> roast: 7af18f0 | (Pepe Schwarz)++ | S03-operators/assign.t:

[00:24] <dalek> roast: Correct test for RT #76444. Mouq++

[00:24] <dalek> roast: review: https://github.com/perl6/roast/commit/7af18f0969

[00:24] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=76444

[00:24] <psch> (i hope so cause now it's in...)

[00:26] <psch> r: (my $a) = 1, 2, 3; say $a.WHAT; (1,2,3).WHAT.say;

[00:26] <camelia> rakudo-parrot e51b6c, rakudo-jvm e51b6c, rakudo-moar e51b6c: OUTPUT¬´(Parcel)‚ê§(Parcel)‚ê§¬ª

[00:26] <psch> i feel fairly confident it's correct.

[00:26] *** Mouq left
[00:32] *** sivoais left
[00:39] *** Mouq joined
[00:39] <Mouq> psch: Nergle, sorry, I was offline

[00:41] <Mouq> I read the bug report more as `routine (my $a) = 1,2,3` being parsed as `(routine (my $a)) = 1,2,3` when it should be `routine ((my $a) = 1,2,3)`

[00:42] <psch> that actually makes sense, the other cases don't work when removing the routine

[00:42] <psch> in my defense, the usefulness of the test did improve... :)

[00:42] <psch> i'll change it again though, you're clearly right

[00:43] <Mouq> lol, psch++ it's more than I've done today :)

[00:43] <Mouq> Ok

[00:44] <psch> i'm not quite sure how to write the test though

[00:44] *** sivoais joined
[00:44] <psch> r: use Test; is 'foo (my $a = 1,2,3)', (1,2,3), 'Routine call taking a parenthesesed my as argument works.'; # this isn't right

[00:44] <camelia> rakudo-parrot e51b6c, rakudo-jvm e51b6c, rakudo-moar e51b6c: OUTPUT¬´not ok 1 - Routine call taking a parenthesesed my as argument works.‚ê§#      got: 'foo (my $a = 1,2,3)'‚ê§# expected: '1 2 3'‚ê§¬ª

[00:44] <psch> so is doesn't eval it's 1st argument

[00:44] <psch> but eval_ok probably has the same semantics as ok, except it evals first

[00:46] <Mouq> r: use Test; sub low-prec (\i) {True}; is (low-prec (my $a) = 1,2,3), True; is $a, (1,2,3)

[00:46] <camelia> rakudo-parrot e51b6c, rakudo-jvm e51b6c, rakudo-moar e51b6c: OUTPUT¬´ok 1 - ‚ê§ok 2 - ‚ê§¬ª

[00:48] <psch> right, i had declared a sub foo($x) { $x } locally for the example above

[00:48] <psch> r: use Test; sub foo($x) { $x }; is foo (my $a = 1,2,3), (1,2,3), 'Routine call taking a parenthesesed my as argument works.'; # this maybe?

[00:48] <camelia> rakudo-parrot e51b6c, rakudo-jvm e51b6c, rakudo-moar e51b6c: OUTPUT¬´Too many positional parameters passed; got 3 but expected 1‚ê§  in sub foo at /tmp/tmpfile:1‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[00:48] <psch> nope

[00:48] <psch> well, yours works

[00:48] <psch> Mouq++ # test-writing support

[00:49] <Mouq> psch: You passed (1,2,3) to foo

[00:49] <psch> the second one?

[00:49] <Mouq> psch: As well 'Routine‚Ä¶'

[00:49] <psch> right

[00:50] <Mouq> psch: You got this

[00:50] *** jnap joined
[00:53] * Mouq is leaving again

[00:53] *** Mouq left
[00:53] * psch just adds all of these test cases

[00:55] *** jnap left
[00:56] <dalek> roast: fab066e | (Pepe Schwarz)++ | S03-operators/assign.t:

[00:56] <dalek> roast: Corrected tests for RT #76444. Mouq++

[00:56] <dalek> roast: review: https://github.com/perl6/roast/commit/fab066e125

[00:56] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=76444

[00:56] * psch wonders what 'Nerm' and 'Nergle' mean...

[00:57] *** BenGoldberg joined
[01:02] *** BenGoldberg left
[01:12] *** telex left
[01:24] *** BenGoldberg joined
[01:25] <dalek> roast: 06a737b | (Pepe Schwarz)++ | S04-statement (2 files):

[01:25] <dalek> roast: Added tests for RT #89208

[01:25] <dalek> roast: review: https://github.com/perl6/roast/commit/06a737b1ea

[01:25] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=89208

[01:26] *** krunen left
[01:27] <psch> r: $foo:: 42; say $foo:: # RT #76400

[01:27] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=76400

[01:27] <camelia> rakudo-parrot e51b6c, rakudo-jvm e51b6c, rakudo-moar e51b6c: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Variable '$foo' is not declared‚ê§at /tmp/tmpfile:1‚ê§------> [32m$foo::[33m‚èè[31m 42; say $foo:: # RT #76400[0m‚ê§    expecting any of:‚ê§   ‚Ä¶¬ª

[01:27] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=76400

[01:28] <psch> r: $foo:: = 42; say $foo:: # still different than in the ticket

[01:28] <camelia> rakudo-parrot e51b6c, rakudo-jvm e51b6c, rakudo-moar e51b6c: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Variable '$foo' is not declared‚ê§at /tmp/tmpfile:1‚ê§------> [32m$foo::[33m‚èè[31m = 42; say $foo:: # still different than[0m‚ê§    expecting ‚Ä¶¬ª

[01:28] <psch> std: $foo:: = 42

[01:28] <camelia> std 09dda5b: OUTPUT¬´ok 00:01 123m‚ê§¬ª

[01:28] <psch> n: $foo:: = 42

[01:28] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object‚ê§  at Niecza.StashCursor.Core (System.String key, Boolean final, Niecza.StashCursor& sc, Niecza.Variable& v, Niecza.Variable bind_to) [0x00000] i‚Ä¶¬ª

[01:29] * psch wonders who is wrong here

[01:33] *** ponbiki left
[01:33] *** raiph left
[01:36] *** jeffreykegler left
[01:37] *** ponbiki joined
[01:37] *** ponbiki is now known as Guest13781

[01:39] *** pdurbin joined
[01:42] *** telex joined
[01:48] *** telex left
[01:51] *** jnap joined
[01:53] *** pecastro_ joined
[01:55] *** pecastro left
[01:56] *** jnap left
[01:58] * colomon just forgot that I was editing files on my Linux box, and checked them into git directly from my Mac.  Seems to have worked okay...

[02:02] *** telex joined
[02:03] <psch> how do verify the bool value inside a method of an exception in throws_like? 

[02:03] <psch> i have this: https://gist.github.com/peschwa/8627020

[02:04] <psch> but the warning is unsettling

[02:04] <psch> if i leave out the smart match the last test case fails...

[02:04] <psch> i also don't quite understand how an "always fail[ing]" smart match gives a successful test result

[02:05] *** krunen joined
[02:05] <psch> "leave out the smart match" here means just putting 'private => { False }', which in retrospect doesn't really seem to make sense to me either

[02:06] <psch> oh

[02:06] <psch> yeah, nevermind, i checked in S32-exceptions/misc.t and i have to $_ === *

[02:06] *** Mouq joined
[02:07] * psch .oO( private is not even an array... -.- )

[02:08] *** telex left
[02:09] <psch> colomon: i dont quite get your worry there. do you have your local git repo hosted on a networked filesystem?

[02:10] <colomon> psch: I'm editing the files over SSHFS.

[02:11] <colomon> and, apparently, committing them over SSHFS, too.

[02:12] <psch> that's fine, isn't it

[02:12] <psch> if your repo is mounted locally from another computer you edit and commit on the other computer

[02:12] <colomon> apparently

[02:13] <psch> a possibly troublesome scenario would be mounting a subdir of the repo via sshfs and then commiting... 

[02:13] <psch> of course after editing inside that subdir

[02:13] <psch> but as long as you mount the root of the repo i don't see any cause of concern

[02:16] <dalek> roast: 8fe2db8 | (Pepe Schwarz)++ | S32-exceptions/misc.t:

[02:16] <dalek> roast: Added test for RT #78012

[02:16] <dalek> roast: review: https://github.com/perl6/roast/commit/8fe2db8a63

[02:16] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=78012

[02:17] <psch> in fact, i think im gonna try that out now

[02:17] <psch> remounting a subdir of a remote with unpushed changes in another repo without those changes and then changing things inside the subdir

[02:17] <psch> i'm fairly confident git will complain

[02:21] <psch> "could not commit hanged contents of $file"

[02:21] * psch is pretty sure he doesn't exactly understand that error

[02:22] <psch> that's actually kind of interesting

[02:23] <psch> after adding a file in the subdir, then "mount -o bind"ing the subdir into a clean repo i had to commit in both repos before i could rebase into the one i "mount -o bind"ed from

[02:24] * psch has no idea what that actually means

[02:24] <psch> anyway, i feel i'm starting to ramble, i'm gonna go to bed o/

[02:24] *** psch left
[02:28] <Mouq> r: class NUM {}; my $NUM::twelve = 12; my $NUM::fourty-two = 42; say [+] NUM::.values;

[02:28] <camelia> rakudo-parrot e51b6c, rakudo-jvm e51b6c, rakudo-moar e51b6c: OUTPUT¬´54‚ê§¬ª

[02:28] <dalek> roast: 13c7fbf | (Mark Shoulson)++ | / (3 files):

[02:28] <dalek> roast: Add new signature/parameter matching tests.

[02:28] <dalek> roast: review: https://github.com/perl6/roast/commit/13c7fbfca9

[02:29] <colomon> \o

[02:30] <Mouq> psch++ clsn++

[02:30] <clsn> Hope it's good.

[02:37] *** Mouq left
[02:49] *** varna joined
[03:04] <TimToady> http://rosettacode.org/wiki/Brace_expansion now has a Perl 6 entry

[03:04] <TimToady> it's kinda beautiful

[03:08] <colomon> TimToady++

[03:12] <colomon> japhb: if you want some simple tests for Vec3, feel free to steal them from my fork.  ;)

[03:19] <diakopter> TimToady: I don't see the Perl 6 one there

[03:20] <TimToady> cache out of date?

[03:23] *** varna left
[03:24] <diakopter> did you commit the change?

[03:24] <TimToady> certainly

[03:25] <diakopter> well, there is a note at the top from Dec 14

[03:25] <diakopter> weird

[03:25] <TimToady> well, that's a different issue

[03:25] <diakopter> This page was last modified on 26 January 2014, at 03:20.

[03:26] <TimToady> you have to page down to get to Perl 6, it doesn't make a table of contents until there are four entries

[03:26] <diakopter> soneone deleted it?

[03:27] <diakopter> er there it is

[03:27] <diakopter> but what happened to the Python one I just saw

[03:27] *** kurahaupo_mobile left
[03:28] <TimToady> the python was withdrawn, see the talk page

[03:30] <diakopter> oh

[03:43] *** woolfy1 left
[03:45] *** araujo left
[03:50] *** kst` left
[03:53] <clsn> r: 6 S+ 9  # LTA error.  See line #3542 in Grammar.nqp, missing around line #5169 in Actions.nqp.

[03:53] *** jnap joined
[03:53] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=3542

[03:53] <camelia> rakudo-jvm e51b6c: OUTPUT¬´No such method 'postcircumfix:<( )>' for invocant of type 'Int'‚ê§  in any  at gen/jvm/BOOTSTRAP.nqp:1680‚ê§  in any  at gen/jvm/BOOTSTRAP.nqp:1663‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[03:53] <camelia> ..rakudo-parrot e51b6c: OUTPUT¬´No such method 'postcircumfix:<( )>' for invocant of type 'Int'‚ê§  in any  at gen/parrot/BOOTSTRAP.nqp:1692‚ê§  in any  at gen/parrot/BOOTSTRAP.nqp:1674‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[03:53] <camelia> ..rakudo-moar e51b6c: OUTPUT¬´Cannot find method 'postcircumfix:<( )>'‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[03:57] *** jnap left
[03:58] <skids> The described backslashing behavior does not match bash, nor does it make any sense to me. (echo a\\{1,2\,c} --> a\1 a\2,c not a\\1  a\\2\,c )

[03:59] *** varna joined
[04:07] *** mrjoltcola joined
[04:10] *** telex joined
[04:12] *** telex left
[04:14] *** mrjoltcola left
[04:14] *** atroxaper joined
[04:17] *** zacts left
[04:18] *** beastd left
[04:23] *** araujo joined
[04:23] *** araujo left
[04:28] *** telex joined
[04:28] *** d4l3k_ joined
[04:29] *** djanatyn left
[04:29] *** dalek left
[04:29] *** djanatyn joined
[04:30] *** d4l3k_ is now known as dalek

[04:34] *** telex left
[04:34] *** krunen left
[04:39] *** araujo joined
[04:42] *** ponbiki joined
[04:43] *** Exodist left
[04:43] *** ponbiki is now known as Guest3765

[04:43] *** exodist_ joined
[04:43] *** japhb_ joined
[04:43] *** orevdiabl joined
[04:43] *** revdiablo left
[04:47] *** crab2313 joined
[04:47] *** japhb left
[04:51] *** telex joined
[04:51] *** BenGoldberg left
[04:51] *** Guest13781 left
[04:54] *** jnap joined
[04:55] *** telex left
[04:58] *** jnap left
[05:18] *** crab2313 left
[05:37] *** bjz_ joined
[05:38] *** bjz left
[05:50] *** kurahaupo_mobile joined
[05:54] *** jnap joined
[05:59] *** jnap left
[06:07] *** odoacre_ left
[06:07] *** odoacre_ joined
[06:09] *** krunen joined
[06:10] *** SamuraiJack joined
[06:21] *** zby_home_ joined
[06:28] *** araujo left
[06:28] *** araujo joined
[06:30] *** kaare__ joined
[06:34] *** darutoko joined
[06:53] *** telex joined
[06:53] *** varna left
[06:55] *** jnap joined
[06:59] *** jnap left
[07:05] *** telex left
[07:13] *** telex joined
[07:14] *** bjz_ left
[07:17] *** bjz joined
[07:20] *** telex left
[07:21] *** bjz left
[07:24] *** bjz joined
[07:24] *** bjz left
[07:28] *** Guest3765 is now known as ponbiki

[07:33] *** telex joined
[07:36] *** telex left
[07:42] *** skids left
[07:53] *** telex joined
[07:56] *** jnap joined
[07:58] *** telex left
[08:00] *** kurahaupo_mobile left
[08:00] *** jnap left
[08:12] *** telex joined
[08:15] *** telex left
[08:30] *** bjz joined
[08:32] *** telex joined
[08:35] *** jeffreykegler joined
[08:36] *** jeffreykegler left
[08:36] *** kurahaupo_mobile joined
[08:38] *** telex left
[08:52] *** telex joined
[08:56] <timotimo> o/

[08:56] *** daxim left
[08:57] *** jnap joined
[08:57] *** telex left
[09:01] *** jnap left
[09:02] *** rindolf joined
[09:04] <raydiak> what does "is pure" do?

[09:05] <timotimo> it's meaningful to the optimizer

[09:05] <timotimo> it will constant-fold only things that are marked is pure

[09:05] <raydiak> means "no side effects" or similar?

[09:06] <timotimo> that's right

[09:06] <timotimo> or "no side-effects to worry about"

[09:06] <timotimo> caching, for example, would be allowed

[09:07] <raydiak> makes sense

[09:07] <timotimo> and if you want you can mess with the optimizer that way :P

[09:08] <timotimo> r: sub test is pure { rand }; for ^10 { say test + test }

[09:08] <camelia> rakudo-parrot e51b6c, rakudo-jvm e51b6c, rakudo-moar e51b6c: OUTPUT¬´Too many positional parameters passed; got 1 but expected 0‚ê§  in sub test at /tmp/tmpfile:1‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[09:08] <timotimo> r: sub test is pure { rand }; for ^10 { say test() + test }

[09:08] <camelia> rakudo-jvm e51b6c: OUTPUT¬´0.8786985940925635‚ê§0.8786985940925635‚ê§0.8786985940925635‚ê§0.8786985940925635‚ê§0.8786985940925635‚ê§0.8786985940925635‚ê§0.8786985940925635‚ê§0.8786985940925635‚ê§0.8786985940925635‚ê§0.8786985940925635‚ê§¬ª

[09:08] <camelia> ..rakudo-parrot e51b6c: OUTPUT¬´1.04900561984469‚ê§1.04900561984469‚ê§1.04900561984469‚ê§1.04900561984469‚ê§1.04900561984469‚ê§1.04900561984469‚ê§1.04900561984469‚ê§1.04900561984469‚ê§1.04900561984469‚ê§1.04900561984469‚ê§¬ª

[09:08] <camelia> ..rakudo-moar e51b6c: OUTPUT¬´1.28499817762646‚ê§1.28499817762646‚ê§1.28499817762646‚ê§1.28499817762646‚ê§1.28499817762646‚ê§1.28499817762646‚ê§1.28499817762646‚ê§1.28499817762646‚ê§1.28499817762646‚ê§1.28499817762646‚ê§¬ª

[09:08] <raydiak> ha ha, got it

[09:09] <timotimo> hm, i think it'll even work without the addition

[09:09] <timotimo> r: sub test is pure { rand }; for ^10 { say test }

[09:09] <camelia> rakudo-moar e51b6c: OUTPUT¬´0.406724576016814‚ê§0.406724576016814‚ê§0.406724576016814‚ê§0.406724576016814‚ê§0.406724576016814‚ê§0.406724576016814‚ê§0.406724576016814‚ê§0.406724576016814‚ê§0.406724576016814‚ê§0.406724576016814‚ê§¬ª

[09:09] <camelia> ..rakudo-jvm e51b6c: OUTPUT¬´0.8538433738476435‚ê§0.8538433738476435‚ê§0.8538433738476435‚ê§0.8538433738476435‚ê§0.8538433738476435‚ê§0.8538433738476435‚ê§0.8538433738476435‚ê§0.8538433738476435‚ê§0.8538433738476435‚ê§0.8538433738476435‚ê§¬ª

[09:09] <camelia> ..rakudo-parrot e51b6c: OUTPUT¬´0.308586922564672‚ê§0.308586922564672‚ê§0.308586922564672‚ê§0.308586922564672‚ê§0.308586922564672‚ê§0.308586922564672‚ê§0.308586922564672‚ê§0.308586922564672‚ê§0.308586922564672‚ê§0.308586922564672‚ê§¬ª

[09:09] <timotimo> yup

[09:09] <raydiak> is inlining happening?

[09:10] <raydiak> well, dumb question in the context of constant folding

[09:10] <timotimo> heh.

[09:10] <raydiak> I guess I was wondering if inlining works in general

[09:10] <timotimo> we do inline simple things

[09:10] *** daxim joined
[09:10] <raydiak> simple?

[09:11] <timotimo> not exactly sure about what exactly constitutes a simple thing

[09:11] <timotimo> i'll give you a link to the source code

[09:11] <raydiak> read my mind :)

[09:11] <timotimo> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Actions.nqp#L2541

[09:12] <raydiak> ah, I see

[09:13] <timotimo> wether or not an op is inlinable can be seen in the Ops.nqp or QASTOperationsMAST.nqp and friends

[09:14] <timotimo> on JVM and moar, the default for an op is to be inlinable, on parrot it's the other way around iirc

[09:14] <raydiak> none of the args can be optional, capture, slurpy, lol, bound to something somewhere else, or constrained, to name a few

[09:15] <timotimo> i'd think some of those could be made to work, but it'd be ... work :P

[09:15] <raydiak> I've been looking at the rakudo and nqp source lately...it's remarkably coherent and legible

[09:16] <timotimo> i wholeheartedly agree

[09:16] <timotimo> unfortunately, to a beginner, that doesn't mean you'll immediately know just what to write :P

[09:16] <raydiak> not at all, but I tried reading the source once or twice with p5, and decided I didn't want to sacrifice that much of my life :P

[09:17] * timotimo has seen some of the insides of pypy and it was a similar deal to nqp and rakudo

[09:18] *** daxim left
[09:18] <FROGGS> o/

[09:18] <raydiak> \o

[09:21] *** rindolf left
[09:25] *** dmol joined
[09:31] *** varna joined
[09:32] *** darutoko left
[09:33] *** daxim joined
[09:34] *** sqirrel joined
[09:44] *** daxim left
[09:47] *** bjz left
[09:49] <FROGGS> timotimo: this is awesome :o) http://feather.perl6.nl/~raiph/25jan2014-benchmark-p5-nqps-rakudos.html

[09:49] <FROGGS> timotimo++

[09:50] *** bjz joined
[09:51] <masak> good antenoon, #perl6

[09:53] <atroxaper> masak: hello!

[09:54] *** sidus joined
[09:57] *** jnap joined
[09:58] <moritz> \o *

[09:58] *** spider-mario joined
[09:59] *** krunen left
[09:59] *** daxim joined
[09:59] *** telex joined
[10:00] <timotimo> FROGGS: all the ++'s belong to other people in this case :)

[10:01] <FROGGS> TimToady++ # there can't be a cleaner solution than the p6 one http://rosettacode.org/wiki/Brace_expansion

[10:01] <FROGGS> timotimo: it was you cpu power, wasn't it? :o)

[10:01] <timotimo> well, yeah

[10:02] *** jnap left
[10:06] <masak> FROGGS: not only that, it shows very clearly the two different philosophical levels Perl 5 and Perl 6 operate on.

[10:07] <masak> Perl 5 is more "regexes, data structures and loops". Perl 6 is more "grammars and hyperops".

[10:07] *** telex left
[10:08] <FROGGS> rosattecode++, job well done I'd say :o)

[10:08] <FROGGS> rosettacode++, even

[10:09] <FROGGS> I am eager to see other solutions, though I don't think any could beat Perl 6 (for my taste)

[10:14] *** zby_home_ left
[10:21] *** telex joined
[10:24] <jnthn> morningish, #perl6

[10:25] *** telex left
[10:25] <FROGGS> morning jnthn 

[10:26] *** atroxaper left
[10:27] <FROGGS> jnthn: you don't have any hints where could start looking for "Object conflict detected during deserialization."?

[10:28] <FROGGS> is it a problem writing down the mbc to disk, or is it a problem loading it?

[10:29] <jnthn> FROGGS: Happens at load time

[10:30] <FROGGS> btw, I should be able to use the flunk.moarvm produced by windows, right?

[10:30] <FROGGS> no, I won't

[10:30] <FROGGS> because of BS

[10:32] <jnthn> You should be able to...

[10:32] * FROGGS tries

[10:33] <FROGGS> just to try it

[10:34] <jnthn> FROGGS: Anyway, the missing stuff is that MoarVM throws an exception at https://github.com/MoarVM/MoarVM/blob/master/src/6model/serialization.c#L1872 while it needs to do https://github.com/perl6/nqp/blob/master/src/vm/parrot/6model/serialization.c#L1767

[10:35] <FROGGS> ahh

[10:35] <FROGGS> thank you!

[10:36] <jnthn> It's not a lot of code to port, but I need to pack and get ready for airport here...

[10:37] <FROGGS> jnthn: yeah, I already wanted to ask "what is the catch", but I will try it now :o)

[10:37] <FROGGS> have a nice flight!

[10:37] <FROGGS> :o)

[10:39] *** telex joined
[10:39] *** telex left
[10:44] *** zby_home_ joined
[10:53] *** rindolf joined
[10:58] *** jnap joined
[11:03] *** jnap left
[11:09] *** bjz left
[11:10] *** Rotwang joined
[11:12] *** bjz joined
[11:13] *** woolfy joined
[11:17] *** spider-mario left
[11:34] *** darutoko joined
[11:36] *** darutoko- joined
[11:38] *** tgt joined
[11:39] *** darutoko left
[11:40] *** darutoko- left
[11:41] <timotimo> perfect timing for my train yay

[11:47] *** darutoko joined
[11:48] *** vmspb joined
[11:58] *** darutoko- joined
[11:59] *** jnap joined
[12:01] *** darutoko left
[12:02] <timotimo> o/ from a train

[12:02] *** darutoko joined
[12:03] *** sqirrel left
[12:03] *** jnap left
[12:04] *** darutoko- left
[12:09] <FROGGS> :o)

[12:09] <FROGGS> o/ from a chair

[12:14] *** spider-mario joined
[12:16] *** smls joined
[12:17] <moritz> \o from a rocking chair

[12:25] *** vmspb left
[12:26] *** zby_home_ left
[12:29] *** cognominal left
[12:31] *** bjz left
[12:31] *** cognominal joined
[12:31] *** bjz joined
[12:31] *** atroxaper joined
[12:42] *** denis_boyun joined
[12:42] <atroxaper> Is there way to call something by timer? Or sleep function?

[12:44] <timotimo> there is a sleep function, sure

[12:44] <timotimo> and on the jvm you can have periodic calls to a function

[12:45] <atroxaper> timotimo: oh... thank you. sleep is what i wonted.

[12:54] *** rindolf left
[12:59] *** rindolf joined
[13:00] *** jnap joined
[13:00] *** mavcunha left
[13:02] *** krunen joined
[13:04] *** jnap left
[13:07] *** sidus left
[13:13] *** tgt left
[13:14] *** sqirrel joined
[13:16] <moritz> r: my $now = now; sleep 1; say now() - $now

[13:16] <camelia> rakudo-parrot e51b6c, rakudo-jvm e51b6c, rakudo-moar e51b6c: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Undeclared routine:‚ê§    now used at line 1‚ê§‚ê§¬ª

[13:17] <moritz> r: my $now = now; sleep 1; say now - $now

[13:17] <camelia> rakudo-jvm e51b6c: OUTPUT¬´1.022‚ê§¬ª

[13:17] <camelia> ..rakudo-parrot e51b6c: OUTPUT¬´1.02675534‚ê§¬ª

[13:17] <camelia> ..rakudo-moar e51b6c: OUTPUT¬´1.03735240‚ê§¬ª

[13:19] *** mavcunha joined
[13:26] <smls> .tell skids re "described backslashing behavior does not match bash": Well, Bash does several things together: 1) word splitting 2) brace expansion 3) wildcard and tilde expansion 4) backslash stripping. The rosetta task is exclusively about brace expansion...

[13:26] <yoleaux> smls: I'll pass your message to skids.

[13:36] *** djanatyn left
[13:38] *** denis_boyun_ joined
[13:38] *** denis_boyun left
[13:38] *** Vlavv_ left
[13:39] *** johnmilton joined
[13:40] *** djanatyn joined
[13:41] *** mavcunha left
[13:43] *** djanatyn left
[13:43] *** djanatyn joined
[13:46] *** denis_boyun_ left
[13:59] *** denis_boyun joined
[14:02] *** sqirrel left
[14:09] *** jnap joined
[14:11] *** kaare__ left
[14:11] *** mavcunha joined
[14:25] <JimmyZ> r: my $now = now; sleep 1; say now - $now

[14:25] <camelia> rakudo-moar e51b6c: OUTPUT¬´1.0338047‚ê§¬ª

[14:25] <camelia> ..rakudo-jvm e51b6c: OUTPUT¬´1.0159990‚ê§¬ª

[14:25] <camelia> ..rakudo-parrot e51b6c: OUTPUT¬´1.0209812‚ê§¬ª

[14:26] *** atroxape_ joined
[14:26] *** atroxaper left
[14:29] *** telex joined
[14:31] *** woolfy left
[14:32] *** telex left
[14:35] *** woolfy joined
[14:47] *** denis_boyun left
[14:50] *** varna left
[14:57] *** ajr joined
[14:58] *** ajr is now known as Guest35805

[14:58] *** Guest35805 is now known as ajr_

[15:01] *** telex joined
[15:16] *** locsmif joined
[15:18] *** jnap left
[15:21] *** johnmilton left
[15:23] *** djanatyn left
[15:24] *** djanatyn joined
[15:26] *** tgt joined
[15:32] *** zakharyas joined
[15:36] *** johnmilton joined
[15:46] <ajr_> What is the "Richards benchmark"? Reference?

[15:48] *** BenGoldberg joined
[15:50] *** kivutar joined
[15:57] *** zakharyas left
[15:59] *** denis_boyun joined
[16:04] *** djanatyn left
[16:05] *** djanatyn joined
[16:06] *** tgt left
[16:07] *** tgt joined
[16:10] *** BenGoldberg left
[16:17] *** raiph joined
[16:18] *** jnap joined
[16:23] *** jnap left
[16:27] *** skids joined
[16:32] <timotimo> ajr_: it simulates a scheduler workload for I/O and cpu-bound tasks

[16:33] <timotimo> https://github.com/japhb/perl6-bench/blob/master/nqp/richards

[16:33] *** raiph left
[16:33] *** Vlavv_ joined
[16:37] *** gcole left
[16:39] <ajr_> timotimo: Thanks. Is there a functional specification (as opposed to implemetation), somewhere?

[16:41] <timotimo> i don't know of one, but i also didn't look very hard

[16:41] <timotimo> i ported it from python code found in the repository of pypy's speed measurement project

[16:49] *** krunen left
[16:52] *** smls left
[16:57] *** tgt left
[16:59] *** ajr_ left
[17:00] *** ajr joined
[17:01] *** ajr is now known as Guest26688

[17:09] *** atroxape_ left
[17:14] *** tgt joined
[17:15] *** krunen joined
[17:16] *** djanatyn left
[17:17] *** djanatyn joined
[17:20] *** djanatyn left
[17:21] *** zakharyas joined
[17:22] *** djanatyn joined
[17:25] *** BenGoldberg joined
[17:30] *** djanatyn left
[17:33] *** Guest26688 left
[17:34] *** ajr_ joined
[17:35] *** djanatyn joined
[17:36] *** djanatyn left
[17:38] *** djanatyn joined
[17:41] *** ajr_ left
[17:41] *** djanatyn left
[17:42] *** djanatyn joined
[17:43] *** djanatyn left
[17:44] *** djanatyn joined
[17:45] *** jeffreykegler joined
[17:47] *** ajr_ joined
[17:48] *** mtk left
[17:52] *** djanatyn left
[17:52] *** djanatyn joined
[17:57] *** kivutar left
[17:57] *** djanatyn left
[17:58] *** djanatyn joined
[18:05] <ajr_> Martin Richardson's home page: http://www.cl.cam.ac.uk/~mr10/ with a link to  http://www.cl.cam.ac.uk/users/mr/Bench/bench.tgz which appears to have several different versions.

[18:08] <jnthn> oh, *that* Richards...

[18:10] *** tgt left
[18:23] *** tgt joined
[18:27] *** darutoko left
[18:28] <jnthn> dinner &

[18:28] *** btyler joined
[18:32] <arnsholt> jnthn: On JVM, ``use NativeCall; my $x := CArray[int].new; $x[0] := 1; say "alive"'' works, while ``use NativeCall; my $x := CArray[int].new; $x[0] = 1; say "alive"'' fails with "java.lang.RuntimeException: This type does not support positional operations"

[18:32] <arnsholt> Both work on Parrot. Rakudo's scalar container missing some kind of REPRop on JVM?

[18:38] *** retupmoca left
[18:39] *** FOAD left
[18:40] *** tgt left
[18:40] *** FOAD joined
[18:46] *** FOAD left
[18:46] *** FOAD joined
[18:49] *** rrrrr joined
[18:52] *** tgt joined
[19:03] *** krunen left
[19:03] *** tgt left
[19:04] *** araujo left
[19:05] *** ajr_ left
[19:09] *** jnap joined
[19:10] *** arnsholt left
[19:13] *** jnap left
[19:13] *** FOAD left
[19:15] *** FOAD joined
[19:20] *** SamuraiJack left
[19:23] *** tgt joined
[19:29] *** FOAD left
[19:34] *** FOAD joined
[19:35] *** FOAD left
[19:35] *** FOAD joined
[20:03] *** FOAD left
[20:03] *** FOAD joined
[20:09] <FROGGS> perl6-m -e 'sub postcircumfix:<ÿü ?>(*@a) { @a.join("-") }; say 123ÿü1, 2?'

[20:09] <FROGGS> 123-1-2

[20:10] <diakopter> wat

[20:10] <masak> looks right to me.

[20:10] <FROGGS> :o)

[20:10] <diakopter> wat

[20:11] <masak> diakopter: I think you have to elaborate a bit on what befuddles you.

[20:11] <FROGGS> the arabic question mark is a bit off here in my chat client, but the customm postcircumfix works

[20:11] <jnthn> wtf

[20:11] <jnthn> oh

[20:11] <jnthn> ffs, it's RTL

[20:11] <jnthn> :P

[20:11] <FROGGS> wtf -> ftw

[20:11] <FROGGS> :P

[20:11] <jnthn> Yes, I wrote ftw but it was in RTL, you see :P

[20:11] <FROGGS> hehe

[20:11] <FROGGS> 'course

[20:12] <jnthn> wtf ++SGGORF!

[20:12] <diakopter> what's trl

[20:12] <FROGGS> \o/ <-- rtl even

[20:13] <jnthn> Well, I just grabbed JDK8 and it seems Rakudo on JVM builds and spectests on it...

[20:13] <masak> oh, I had to go to the web logs to even see what you guys were so confused over...

[20:14] <FROGGS> weird is, that is shows the arabic ? correctly after the 123 when I highlight the text...

[20:14] <jnthn> However, Java's substring semantics have changed, and the time to do JAST -> classfile has gone up a bunch...

[20:15] <diakopter> masak: how is 123-1-2 formed

[20:15] <lue> Having two of those RTL question marks seems to keep it from breaking completely, but I could be wrong there. ‚ÄÆNow at least you didn't use weirder Unicode characters...‚Ä≠

[20:15] <FROGGS> damn, now that I fully implemented postcircumfix, Perl5::Terms infiniloops when precompiling it

[20:16] <FROGGS> diakopter: it gets the invocant as the first arg, and the stuff in the postcircumfix after that

[20:16] <diakopter> what's in the postcircumfix

[20:16] <FROGGS> 1, 2

[20:16] <diakopter> where's the 2

[20:16] <FROGGS> after the one :o)

[20:17] <diakopter> don't see a 2

[20:17] <FROGGS> perl6-m -e 'sub postcircumfix:<* *>(*@a) { @a.join("-") }; say 123*1, 2*'

[20:17] <FROGGS> 123-1-2

[20:17] <FROGGS> here, ascii

[20:17] <lue> diakopter: try selecting the text, see if you can move around the text doing that.

[20:17] <diakopter> that's not what mine looks like at all

[20:17] <FROGGS> the right-to-left char messes up, that's all

[20:18] <masak> diakopter: three arguments go in: the 123, the 1, and the 2.

[20:18] <diakopter> nopasting my problem

[20:18] <masak> diakopter: I didn't even see the confusion, because my client didn't RTL things.

[20:19] <FROGGS> I (sort of) see "... 1232 ,1??"

[20:19] <lue> masak: aw, then you missed my joke earlier :)

[20:19] <masak> lue: must've, yes.

[20:20] <diakopter> FROGGS: yes, that's what I saw

[20:20] <lue> irclog is willing though, at least: http://irclog.perlgeek.de/perl6/2014-01-26#i_8178625

[20:20] <jnthn> I just tried to type what I saw, but when I copy-paste the RTL char it makes it impossible to type what I want :P

[20:21] <FROGGS> hehe

[20:21] <moritz> iirc gtk tries to handle RTL correctly

[20:22] <lue> moritz: works in gtk-using hexchat at least (Unicode OVERRIDE characters included ‚ò∫)

[20:23] <diakopter> http://imgur.com/VzLp72r.png

[20:24] <lue> diakopter: that second 2 in "1232"? That's the missing 2 :)

[20:24] <diakopter> I see that now

[20:32] *** zakharyas left
[20:35] *** Alina-malina left
[20:40] *** arnsholt joined
[20:41] *** jackjack joined
[20:43] *** Alina-malina joined
[20:49] <jackjack> sometimes i think i learnt the wrong language this perl stuff

[20:49] <FROGGS> ?

[20:50] <dalek> nqp: bbb81a1 | moritz++ | / (2 files):

[20:50] <dalek> nqp: Configurable git protocols; closes #153

[20:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bbb81a1b7c

[20:50] <jackjack> it really hurts my brains bad

[20:51] <moritz> maybe you just need somebody to teach it properly

[20:51] <moritz> git also hurt my brain before I understood it

[20:51] <diakopter> my brain hurts my brain

[20:51] <jackjack> im the only person in the world whos read those perl manuals three times

[20:52] <jackjack> and that systems admin with perl one

[20:53] <jackjack> i think i prefer wiley to o'reilly

[20:56] <jackjack> the way i see it is you have to be a top expert in perl 5 to understand the changes in perl 6---that means someones got a better book which they teach from

[20:56] * raydiak disagrees

[20:57] <jackjack> raydiak   you cant write thos e books in 2 years there too fat

[20:57] <raydiak> I disagree that you have to be a top expert in perl 5 to learn perl 6

[20:58] <moritz> some of our core contributors didn't do Perl 5 before hacking on Perl 6

[20:58] *** Khisanth left
[20:59] *** jeffreykegler left
[21:00] <jackjack> anyway curtis "ovid" poe is taking a lecture at fosdem2014 so ill ask him feb2

[21:00] <skids> A lot of the things in Perl5 and 6 that fry brains are actually just basic CS concepts that fry brains in college, it is just that Perl actually uses/implements them while many other languages do not.

[21:00] <yoleaux> 13:26Z <smls> skids: re "described backslashing behavior does not match bash": Well, Bash does several things together: 1) word splitting 2) brace expansion 3) wildcard and tilde expansion 4) backslash stripping. The rosetta task is exclusively about brace expansion...

[21:00] <dalek> rakudo/nom: c2982df | moritz++ | / (2 files):

[21:00] <dalek> rakudo/nom: import configurable git protocol changes from NQP

[21:00] <dalek> rakudo/nom: 

[21:00] <dalek> rakudo/nom: Fixes RT #121072

[21:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c2982df7c4

[21:00] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121072

[21:00] <arnsholt> Blah. Does anyone happen to know which particular bit of code in NQP/JVM inserts the exception handler that intercepts stray exceptions?

[21:02] <jnthn> arnsholt: Maybe you mean invokeDirect?

[21:02] <jnthn> arnsholt: Or you mean something in code-gen?

[21:02] <skids> yoleaux tell smls: backslash stripping is usually ensconced in the syntax parsing in the first stages of brace expansion.  Not stripping them is actually harder than stripping them.

[21:03] <skids> erg.

[21:03] <FROGGS> skids: .tell

[21:04] * skids fixed it in a msg, thanks

[21:11] *** jackjack left
[21:11] <arnsholt> jnthn: Could be code-gen

[21:12] <jnthn> src/jvm/QAST/Compiler.nqp:3554

[21:12] * arnsholt tries invokeDirect first

[21:13] *** Khisanth joined
[21:13] <arnsholt> Oh, that looks promising

[21:13] <arnsholt> Cheers!

[21:14] <sjn> arnsholt: you up for a beer and some grub on tuesday? :)

[21:14] <sjn> arnsholt: http://www.meetup.com/Oslo-pm/events/162287772/http://www.meetup.com/Oslo-pm/events/162287772/ \o/

[21:14] <sjn> oops

[21:15] <sjn> http://www.meetup.com/Oslo-pm/events/162287772/

[21:15] <jnthn> It's so good it's worth pasting twice!

[21:15] <sjn> it's so good it's worth 404ing it? o_O

[21:15] <arnsholt> That might be doable

[21:18] <arnsholt> Aha! NQP_VERBOSE_EXCEPTIONS=1

[21:20] <arnsholt> jnthn: Are there any VM-specific bits to Rakudo's container stuff?

[21:21] <jnthn> arnsholt: Yes.

[21:21] <jnthn> arnsholt: container.c for Parrot and MoarVM, and a couple of java classes (that should have container in the name) are in rakudo-runtime.jar

[21:22] <arnsholt> Right

[21:22] <arnsholt> There's something weird with "my $x = CArray.new" on JVM, might look like an unimplemented REPRop or something

[21:23] <jnthn> Oh?

[21:23] <jnthn> What error are you seeing, ooc?

[21:23] <arnsholt> On JVM, ``use NativeCall; my $x := CArray[int].new; $x[0] := 1; say "alive"'' works, while ``use NativeCall; my $x := CArray[int].new; $x[0] = 1; say "alive"'' fails with "java.lang.RuntimeException: This type does not support positional operations"

[21:23] <arnsholt> Er, s/:=/= in the second one

[21:24] <arnsholt> So binding the CArray to $x works fine, but assigning doesn't

[21:24] <jnthn> lemme glance NativeCall...

[21:24] *** jerry_ joined
[21:24] <arnsholt> The verbose exception thing shows that the error is coming from P6Opaque

[21:24] <arnsholt> It works fine on Parrot

[21:26] *** rindolf left
[21:27] * jnthn wonders how on earth the binding case works at all

[21:27] <arnsholt> Heh

[21:28] <jnthn> On this line:

[21:28] <jnthn> nqp::bindpos_i(arr, nqp::unbox_i($pos.Int), $v);

[21:28] <jnthn> try an nqp::decont(arr) instead.

[21:28] <arnsholt> Sounds plausible

[21:29] <arnsholt> Prints alive \o/

[21:29] <arnsholt> Thanks!

[21:30] <jnthn> \o/

[21:30] <arnsholt> That might be the cause for some other weirdness I'm seeing with JVM and CArray too, actually

[21:30] <jnthn> Put in the nqp::decont to Zavolaj; I think we'll want them for Moar too

[21:30] <arnsholt> Probably

[21:31] <arnsholt> I'm gonna add some tests to the CArray suite anyways. Turns out the CArray implementation on JVM wasn't quite as complete as I imagined =)

[21:31] <jnthn> yay :)

[21:31] <arnsholt> So I'll be a good TDD citizen and write some tests first =)

[21:32] *** kaare__ joined
[21:33] <arnsholt> But first sleep, I think

[21:33] <arnsholt> See you folks tomorrow

[21:33] <FROGGS> gnight arnsholt++

[21:33] <jnthn> 'night, arnsholt++

[21:34] <masak> 'night, arnsholt++

[21:34] <tadzik> wow, it's late already :o

[21:35] *** jerry_ left
[21:40] *** beastd joined
[21:48] * masak always liked the fortune "It's later than you think."

[21:49] <FROGGS> jnthn: I know now why Perl5::Terms infiniloops when using the ustom postcircumfix

[21:49] <FROGGS> customm*

[21:49] <FROGGS> gah!

[21:49] <FROGGS> custom*

[21:50] *** johnmilton left
[21:50] <masak> 'night, #perl6

[21:50] <FROGGS> it is an indirect method call that happends all the time, and Perl5::Terms is huge so it tries to match this postcircumfix almost everywhere in that code

[21:50] <FROGGS> I guess it will succeed, but not today :o(

[21:50] <FROGGS> night masak 

[21:51] <FROGGS> so, I am ripping out that postcircumfix from v5

[21:51] <jnthn> I'd not imagine it's *that* slow...

[21:51] <FROGGS> jnthn: shall I commit that postcirumfix code for rakudo anyway?

[21:51] <jnthn> LTM should stop you ending up there, no?

[21:52] <jnthn> FROGGS: Yes, preferably with a spectest or two for custom postcircumfixes...and provided it doesn't break anything else, of course.

[21:52] <FROGGS> jnthn: I already spectested it

[21:53] <FROGGS> jnthn: maybe LTM does not catch because $starter is not a literal?

[21:54] <jnthn> FROGGS: But it's in a parametric role, iirc?

[21:54] <jnthn> And those are constant after interpolation

[21:54] <jnthn> The NFA stuff has a some stuff in for genericity of this kind...

[21:54] <FROGGS> it is in the role, yes

[21:55] <jnthn> Then it should work out

[21:55] *** airdisa joined
[22:01] *** locsmif left
[22:05] *** smls joined
[22:06] <smls> perl6: sub foo($x) is cached { say "foo called with $x"; 2 ** $x }; say foo 10; say foo 10;

[22:06] <yoleaux> 21:03Z <skids> smls: backslash stripping is usually ensconced in the syntax parsing in the first stages of brace expansion.  Not stripping them is actually harder than stripping them.

[22:06] <camelia> rakudo-parrot c2982d, rakudo-jvm c2982d, rakudo-moar c2982d: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Can't use unknown trait 'is cached' in a sub declaration.‚ê§at /tmp/tmpfile:1‚ê§------> ‚ê§    expecting any of:‚ê§        rw parcel hidden_from_ba‚Ä¶¬ª

[22:06] <camelia> ..niecza v24-109-g48a8de3: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Unhandled trait cached for this context at /tmp/tmpfile line 1:‚ê§------> [32msub foo($x) is cached [33m‚èè[31m{ say "foo called with $x"; 2 ** $x }; s[0m‚ê§‚ê§Unhandled exception: Check failed‚ê§‚ê§  at /home/p‚Ä¶¬ª

[22:06] <smls> ^^am I doing it wrong, or is is just NYI?

[22:06] *** krunen joined
[22:07] <tadzik> timotimo: I like the table solution :)

[22:07] <smls> skids: but wildcard expansion happens after brace expansion (at least conceptually), and it the backslashes to know which potential wildcards are escaped

[22:08] <smls> *needs

[22:09] <smls> re "Not stripping them is actually harder than stripping them", I don't see any evidence of that in the three solutions that have been posted so far on the rosetta page.

[22:09] <timotimo> tadzik: thank you kindly

[22:10] <tadzik> it's a lot saner

[22:10] <timotimo> tadzik: but i was kind of scared, it could be called "two-pass parsing"

[22:10] <timotimo> which TimToady++ really doesn't want to have anywhere near perl6 for good reasons

[22:10] <tadzik> do you have any idea how many passes is the current parser using? :P

[22:11] <tadzik> hard to say, because it's post-processing the rows

[22:11] <diakopter> N

[22:11] *** jnap joined
[22:11] <timotimo> ‚Ñï

[22:14] *** beastd left
[22:15] *** jnap left
[22:19] <jnthn> smls: as far as I know, nyi

[22:22] <dalek> rakudo-star-daily: 0ff0a36 | coke++ | log/ (5 files):

[22:22] <dalek> rakudo-star-daily: today (automated commit)

[22:22] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/0ff0a3636c

[22:22] <dalek> perl6-roast-data: 1896ed6 | coke++ | / (6 files):

[22:22] <dalek> perl6-roast-data: today (automated commit)

[22:22] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/1896ed6a03

[22:22] <dalek> perl6-roast-data: e950485 | coke++ | / (6 files):

[22:22] <dalek> perl6-roast-data: today (automated commit)

[22:22] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/e950485510

[22:30] <timotimo> ah, 99.38% of jvm. not bad!

[22:30] <timotimo> oh, we've been at a better percentage recently

[22:32] <jnthn> Wow, S32 is a bigger source of fail than S05 now

[22:37] *** spider-mario left
[22:42] *** dalek left
[22:43] *** dalek joined
[22:43] *** ChanServ sets mode: +v dalek

[22:45] *** Rotwang left
[22:49] *** tgt left
[23:13] *** canaimero joined
[23:14] *** canaimero left
[23:33] *** airdisa left
[23:40] *** xinming joined
[23:43] *** xinming_ left
[23:53] *** araujo joined
[23:53] *** araujo left
[23:55] *** krunen left
