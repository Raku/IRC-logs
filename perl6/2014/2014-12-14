[00:01] *** tgt left
[00:07] *** ab5tract left
[00:10] *** atroxaper joined
[00:11] *** vti left
[00:15] *** atroxaper left
[00:24] *** immortal left
[00:26] *** adu joined
[00:27] *** erkan joined
[00:27] <adu> I have a question, what is the purpose of "outerctx"?

[00:27] <adu> https://github.com/perl6/nqp/blob/master/src/NQP/Grammar.nqp#L219

[00:28] *** pmurias left
[00:28] <jnthn> Part of the mechanism for attaching the outer lexical context (the setting for scripts/modules, and the appropriate lexical scope for EVAL)

[00:29] <jnthn> Actions.pm has the more interesting bits

[00:38] <adu> jnthn: I'm trying to write a parser for NQP in something other than NQP

[00:39] <adu> I'm finding it rather difficult

[00:45] *** erkan left
[00:45] <ugexe> m: class X { multi MAIN("test") is export {"test"}; multi MAIN("test",@more) is export {"test2"}; }; import X; say "hello"; MAIN("test"); say "world";

[00:45] <camelia> rakudo-moar 795a32: OUTPUT«hello␤world␤Usage:␤  /tmp/akr1TtchJu test ␤  /tmp/akr1TtchJu test <more> ␤»

[00:45] <ugexe> why does the Usage message get printed at the end instead of calling &MAIN or printing the Usage before "hello" "world"?

[00:47] <ugexe> i understand &MAIN_HELPER is called at the precomp stage, but im not exactly sure what i should extrapolate from that

[00:47] *** erkan joined
[00:48] *** bjz left
[00:48] <jnthn> ugexe: A MAIN it called automatically, at the end of the mainline. So the mainline runs, then it calls MAIN, and since there are no command line args passed for the evalbot then you get the usage printed.

[00:48] *** bjz joined
[00:48] <jnthn> ugexe: Your own call to it likely worked out fine, but the idea is that MAIN is called automatically with @*ARGS, not that you call it yourself.

[00:50] <jnthn> adu: I'm not entirely surprised. :) Though NQP is a good bit more tractable than full-blown Perl 6.

[00:50] <jnthn> adu: There's a reason the two times I ported NQP, I ported the code-gen and then got it to cross-compile itself, so I didn't have to port the grammar and so on. :)

[00:51] <adu> lol

[00:59] <adu> jnthn: also, perl6-j is quite speedy, good job!

[01:00] <psch> it is..?

[01:00] <psch> i guess i'm not running enough long-running programs with it

[01:00] <adu> psch: yes, it executes my C11 parser in less than 10 seconds, perl6-p executes the same program in under 5 minutes...

[01:01] <psch> adu: did you try it on moar yet?

[01:01] <adu> psch: yeah, perl6-m runs it in about 5 seconds

[01:02] <adu> maybe I should do some more testing and put some benchmarks on my blog or something

[01:02] *** erkan left
[01:03] <adu> jnthn: have you heard of Graal/Truffle?

[01:03] <psch> 5 sec moar vs 10 sec jvm sounds suspiciously consistent with my own experience

[01:04] <psch> as in, stage parse while building rakudo also has 100% longer runtime on jvm than moar for me

[01:04] <psch> looking at benchmarks is probably more reasonable though

[01:04] <adu> psch: it's still much nicer than 1000x longer

[01:05] <psch> adu: right, i'm not saying it's slow.  i might just be a bit miffed with building on jvm for the interop stuff i'm working on :)

[01:05] *** erkan joined
[01:05] *** erkan left
[01:05] *** erkan joined
[01:05] <adu> psch: what are you working on?

[01:06] <psch> adu: i'm working on mmd for overloaded constructs when instantiating java classes in perl6

[01:06] <psch> currently we have to call them with a non-jvm-spec compliant method descriptor, e.g. "constructor/new/(I)V" for a constructor that takes an int

[01:07] <adu> mmd?

[01:07] <adu> multimonitor display?

[01:07] <psch> but we of course would like to be able to call &.new

[01:07] <psch> multi-method dispatch

[01:07] <adu> oh

[01:08] <psch> i've described mmd for methods in the day 12 of perl6advent

[01:08] <adu> I thought JVM added invokedynamic in 1.7 for that

[01:08] <psch> well, yes

[01:08] <psch> we're also already using invokedynamic for a few things

[01:08] <psch> but nobody had implemented it yet for interop

[01:09] <psch> or rather, it wasn't user friendly

[01:10] *** stapler joined
[01:10] *** stapler left
[01:10] *** stapler joined
[01:11] <adu> psch: have you heard of Graal/Truffle?

[01:11] <jnthn> adu: Yeah, I read a paper on Graal/Truffle a few weeks back. Interesting work.

[01:11] <adu> every word reminded me of HLL::Grammar and NQP, and Parrot, ...

[01:12] <adu> also: http://www.slideshare.net/ThomasWuerthinger/graal-truffle-ethdec2013

[01:13] <adu> provides a nice overview

[01:19] *** stapler left
[01:20] *** adu left
[01:25] *** mvuets left
[01:25] *** erkan left
[01:28] *** erkan joined
[01:28] *** erkan left
[01:28] *** erkan joined
[01:35] *** RSX-11M joined
[01:36] <RSX-11M> is it possible "file".IO.lines but with "\n" preserved ?

[01:39] <jnthn> Maybe open("file", :!chomp).lines

[01:42] <psch> m: my @lines-with-break = slurp.comb: /<-[\x0a]>+.<after "\n">/; say @lines-with-break[0] # this'd work

[01:42] *** erkan left
[01:42] <camelia> rakudo-moar 795a32: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall␤␤»

[01:42] <psch> note two ␤ at the end

[01:42] <psch> although opening it correctly is probably cleaner

[01:42] <jnthn> psch: That's...probably also not going to be so fast ;)

[01:43] <psch> jnthn: right, it's probably not.  i'm thoroughly in "make it work"-mode :)

[01:43] *** rurban_ left
[01:44] *** erkan joined
[01:45] <psch> m: open($*IN, :!chomp).lines[0].say

[01:45] <camelia> rakudo-moar 795a32: OUTPUT«open is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:1␤  in sub open at src/RESTRICTED.setting:5␤  in block <unit> at /tmp/NWTbQt8Ve2:1␤␤»

[01:45] <psch> oh right

[01:46] *** adu joined
[01:47] <psch> m: slurp().split(/.<(<after "\n">/)[0].say # not sure if this would be faster...

[01:47] <camelia> rakudo-moar 795a32: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall␤␤»

[01:47] <psch> probably not, i'm thinking the lookaround is the slowest bit

[01:48] <jnthn> Also slurp can't be lazy, so if it's a big file... :)

[02:00] <dylanwh> camelia speaks irish?

[02:07] * jnthn speaks zzzz &

[02:08] <psch> 'nite jnthn 

[02:15] *** rmgk is now known as Guest64416

[02:15] *** rmgk_ joined
[02:15] *** Guest64416 left
[02:15] *** rmgk_ is now known as rmgk

[02:16] *** RSX-11M left
[02:45] *** adu left
[02:53] *** erkan left
[02:56] *** erkan joined
[03:08] *** noganex_ joined
[03:10] <timotimo> https://twitter.com/raocl/status/543959294790488064 - would be glad if someone could reproduce and assist (ideally on twitter as well as irc)

[03:10] *** noganex left
[03:14] *** hagiri joined
[03:14] <hagiri> TimToady, o/

[03:14] <hagiri> =)

[03:14] <hagiri> hello all!

[03:14] <hagiri> ;D

[03:17] <psch> timotimo: works fine here, This is perl6 version 2014.11-79-g1eb7fad built on MoarVM version 2014.11-66-g23f2089

[03:17] <psch> timotimo: i don't have a twitter though

[03:17] <psch> i've used the exact script but with the url replaced with heise.de

[03:29] *** bjz left
[03:29] *** bjz joined
[03:30] <dj_goku> I get the same error if I use REPL but if I put it in a script it runs fine.

[03:32] <psch> huh

[03:33] <psch> i tried it with -e and got a malloc() error

[03:33] <psch> $ perl6 -MHTTP::UserAgent -e'$ua = HTTP::UserAgent.new; @a = "http://heise.de" xx 3; @a.map: { start { $ua.get($_) } }; .contents.say for await @a'

[03:33] <psch> *** Error in `/home/psch/rakudo/install/bin/moar': malloc(): smallbin double linked list corrupted: 0x0c147850 ***

[03:34] <psch> rerunning it hangs...

[03:38] <leedo_> it works most of the time here. but i got a segfault once

[03:38] <leedo_> hmm and now

[03:38] <leedo_> moar(99704,0x1054c1000) malloc: *** error for object 0x7fce2f5721f0: double free

[03:39] *** synopsebot joined
[03:39] *** kshannon joined
[03:45] <leedo_> well, here are all the various errors that script triggers for me on moar on OS X

[03:45] <leedo_> https://gist.github.com/leedo/3b11d47c9f7c4db330dc

[03:45] <psch> leedo_: that's all with one UA instance?

[03:45] <leedo_> psch: yeah

[03:47] *** zoosha_ joined
[03:48] *** [Sno] left
[03:48] *** Sir_Ragnarok joined
[03:49] *** BooK joined
[03:49] *** revdiablo joined
[03:49] *** [Sno] joined
[03:50] *** jscripter joined
[03:50] *** jscripter left
[03:50] *** torbjorn joined
[03:51] <leedo_> although i can trigger most of those errors with a UA per promise

[04:03] *** atroxaper joined
[04:07] *** hagiri left
[04:20] *** pyrimidine joined
[04:23] <pyrimidine> Ulti: any updates on the advent post? Haven't seen anything yet...

[04:27] *** telex left
[04:28] *** telex joined
[04:34] *** erkan left
[04:37] *** erkan joined
[04:41] * psch sleeps &

[04:41] *** psch left
[04:44] *** pyrimidine left
[05:03] *** Ben_Goldberg joined
[05:03] *** erkan left
[05:06] *** BenGoldberg left
[05:06] *** erkan joined
[05:14] *** Ben_Goldberg left
[05:26] *** BooK left
[05:26] *** baest left
[05:26] *** atroxaper left
[05:26] *** Celelibi left
[05:26] *** cibs left
[05:26] *** revdiablo left
[05:26] *** Sir_Ragnarok left
[05:26] *** flussence left
[05:26] *** SHODAN left
[05:26] *** Alina-malina left
[05:26] *** m_athias left
[05:26] *** gtodd left
[05:26] *** muraiki left
[05:26] *** ggherdov left
[05:26] *** bjz left
[05:26] *** jnthn left
[05:26] *** ugexe left
[05:26] *** Alula left
[05:26] *** telex left
[05:26] *** mr-foobar left
[05:26] *** Akagi201 left
[05:26] *** sftp left
[05:26] *** hahainternet left
[05:26] *** renormalist left
[05:26] *** broquaint left
[05:26] *** eiro left
[05:26] *** erkan left
[05:26] *** [Sno] left
[05:26] *** zoosha_ left
[05:26] *** dalek left
[05:26] *** TuxCM left
[05:26] *** Brock left
[05:26] *** Vlavv left
[05:26] *** kst left
[05:26] *** rjbs left
[05:26] *** Ulti left
[05:26] *** noganex_ left
[05:26] *** DarthGandalf left
[05:26] *** synopsebot left
[05:26] *** colomon left
[05:26] *** yogan left
[05:26] *** dylanwh left
[05:26] *** bcode left
[05:26] *** robinsmidsrod left
[05:26] *** [Tux] left
[05:26] *** timotimo left
[05:26] *** rmgk left
[05:26] *** esaym153 left
[05:26] *** vendethiel left
[05:26] *** dj_goku left
[05:26] *** cosimo left
[05:26] *** jferrero left
[05:27] *** davido_ left
[05:27] *** FROGGS__ left
[05:27] *** Woodi left
[05:27] *** salv0 left
[05:27] *** krunen left
[05:27] *** djanatyn left
[05:27] *** f1ay left
[05:27] *** BinGOs left
[05:27] *** Gothmog_ left
[05:27] *** TimToady left
[05:27] *** anocelot left
[05:27] *** go|dfish left
[05:27] *** yeltzooo left
[05:27] *** jtpalmer left
[05:27] *** charsbar____ left
[05:27] *** jdv79 left
[05:27] *** diegok left
[05:27] *** ivan`` left
[05:27] *** mtj_ left
[05:27] *** xiaomiao left
[05:27] *** ponbiki left
[05:27] *** moritz left
[05:27] *** epochbell left
[05:28] *** xopatch left
[05:28] *** Maddingue left
[05:28] *** lestrrat left
[05:28] *** coffeeyy_ left
[05:28] *** smash left
[05:28] *** kshannon left
[05:28] *** konsolebox left
[05:28] *** onebitboy left
[05:28] *** myp left
[05:28] *** carlin left
[05:28] *** ggoebel111111114 left
[05:28] *** pochi left
[05:28] *** frew left
[05:28] *** mst left
[05:28] *** tony-o left
[05:28] *** eMBee left
[05:28] *** nwc10 left
[05:28] *** jantore left
[05:28] *** risou left
[05:28] *** JimmyZ left
[05:29] *** itz_ left
[05:30] *** itz joined
[05:30] *** ruoso left
[05:30] *** araujo left
[05:30] *** xinming_ left
[05:32] *** tinyblak left
[05:32] *** pecastro left
[05:32] *** PerlJam left
[05:32] *** danaj_ left
[05:32] *** pyrimidi_ left
[05:32] *** rhr left
[05:50] *** ilogger2_ joined
[05:52] *** itz joined
[05:52] *** SAA7ELB joined
[05:52] *** ilogger2 joined
[05:52] *** sjn joined
[05:52] *** kornbluth.freenode.net sets mode: +v ilogger2

[05:54] *** JimmyZ joined
[05:55] *** sjn left
[05:55] *** ilogger2 left
[05:57] *** araujo joined
[05:58] *** xprime joined
[06:00] *** skarn joined
[06:00] *** torbjorn joined
[06:00] *** Sqirrel joined
[06:00] *** khisanth_ joined
[06:00] *** eternaleye joined
[06:00] *** Util_ joined
[06:00] *** lue joined
[06:00] *** njmurphy joined
[06:00] *** jercos joined
[06:00] *** sjohnson joined
[06:00] *** mephinet joined
[06:00] *** pmichaud joined
[06:00] *** Exodist joined
[06:00] *** Spot__ joined
[06:00] *** clkao joined
[06:00] *** hobbified joined
[06:00] *** retupmoca joined
[06:00] *** Juerd joined
[06:00] *** Grrrr joined
[06:00] *** btyler joined
[06:01] *** skarn left
[06:02] *** skarn joined
[06:06] *** itz_ joined
[06:08] *** adu joined
[06:08] <adu> who maintains http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet ?

[06:09] <adu> "as" and "of" have the same definition, what's the difference?

[06:15] *** itz left
[06:33] *** kaare_ joined
[06:34] <moritz> adu: nobody maintains it; that'S th eproblem

[06:34] <adu> oh

[06:41] <moritz> adu: http://tablets.perl6.org/ seems to be the maintained (ish) version

[06:42] <adu> http://tablets.perl6.org/tablet-7-subroutines.html

[06:42] <adu> ish

[06:43] <moritz> though I don't quite understand th emotivation for listing stuff without explaining it

[06:44] <moritz> hence doc.perl6.org (which is also incomplete, though)

[07:13] *** tinyblak joined
[07:25] *** tinyblak_ joined
[07:25] *** atroxaper joined
[07:28] *** tinyblak left
[07:30] *** atroxaper left
[07:44] *** adu left
[07:44] *** vti joined
[07:49] <raydiak> mayhaps we need an (admittedly very long at first) organized list of work to be done on the docs

[07:52] *** mr-foobar joined
[07:53] <raydiak> or a tool to give an overview of the doc coverage of the public api at least by line count or something, per routine, class, etc (especially higlighting the items which have 0)

[07:55] <raydiak> (unless that turns out to be an inappropriately laborious undertaking)

[07:56] * raydiak notices https://github.com/perl6/doc/blob/master/WANTED

[08:13] *** Isp-sec joined
[08:16] *** darutoko joined
[08:29] <dalek> roast: 2252f8b | usev6++ | S12-meta/primitives.t:

[08:29] <dalek> roast: Fudge 6 tests for JVM (todo); skip all tests for Parrot

[08:29] <dalek> roast: review: https://github.com/perl6/roast/commit/2252f8b0cc

[08:34] *** ribasushi joined
[08:35] *** ptc_p6 joined
[08:50] *** rurban_ joined
[08:52] *** gfldex joined
[08:53] *** salv0 joined
[08:58] *** atroxaper joined
[09:03] *** atroxaper left
[09:06] *** rindolf joined
[09:14] *** brrt joined
[09:26] *** mr-foobar left
[09:28] *** atroxaper joined
[09:38] <brrt> \o

[09:39] <brrt> how is it with the perl6 advent calendar? is there still a spot free next week?

[09:42] *** spider-mario joined
[09:44] *** darutoko- joined
[09:48] *** darutoko left
[09:50] *** brrt left
[10:17] *** DarthGandalf joined
[10:19] *** mvuets joined
[10:23] *** atroxaper left
[10:23] *** atroxaper joined
[10:23] *** atroxaper left
[10:28] <masak> brrt: we've got an opening on Wednesday: https://github.com/perl6/mu/blob/master/misc/perl6advent-2014/schedule

[10:28] <masak> (antenoon, #perl6)

[10:28] <masak> ooh, Mouq++ rose to the mini-challenge right after I went to bed!

[10:29] <timotimo> (antenoon '#perl6)

[10:30] <masak> ah, macro humor.

[10:31] <masak> Mouq: very interesting. quite different from mine.

[10:32] <masak> here's my version: https://gist.github.com/masak/732867afd82801004c19

[10:33] <masak> (I later had the idea to put together an FP version, but I haven't done that yet.)

[10:43] *** atroxaper joined
[10:48] *** atroxaper left
[10:52] <Ulti> pyrimidi_ nope writing it now

[11:08] *** denis_boyun joined
[11:21] *** ssqq joined
[11:26] *** bartolin joined
[11:28] <ssqq> in nqp, How to dump a data(hash or list), or view the data structure of a object?

[11:29] <FROGGS__> ssqq: loop over it... there is no other way AFAICT

[11:29] <ssqq> FROGGS__: I see, thanks.

[11:33] *** atroxaper joined
[11:37] *** atroxaper left
[11:39] *** BigBear joined
[11:50] <ssqq> nqp-m: ok( (nqp::add_n(1.1, 2.2) == 3.3), 'add_n(1.1, 2.2) == 3.3');

[11:50] <camelia> nqp-moarvm: OUTPUT«not ok 1 - add_n(1.1, 2.2) == 3.3␤»

[11:50] *** denis_boyun left
[11:50] <ssqq> nqp-m: ok( (nqp::add_n(1.1, 2.2) >= 3.3), 'add_n(1.1, 2.2) == 3.3');

[11:50] <camelia> nqp-moarvm: OUTPUT«ok 1 - add_n(1.1, 2.2) == 3.3␤»

[11:56] <timotimo> surprise. add_n is about native floats

[11:56] <timotimo> :)

[12:00] *** rurban joined
[12:05] *** mvuets left
[12:06] <jnthn> Afternoon, #perl6

[12:06] <jnthn> Yes, testing floats for equality is rarely a good idea. :)

[12:09] <Ulti> m: say (1..10) (&) (7..12)

[12:09] <camelia> rakudo-moar 795a32: OUTPUT«set(7, 8, 9, 10)␤»

[12:10] <Ulti> m: my %stuff = stuff => (1..6), thing => (7..10); %stuff.grep(*.value (&) (5..6))>>.say

[12:10] <camelia> rakudo-moar 795a32: ( no output )

[12:11] <Ulti> :/

[12:11] <Ulti> m: my %stuff = stuff => (1..6), thing => (7..10); %stuff.grep(*.value (&) (5..6)).say

[12:11] <camelia> rakudo-moar 795a32: OUTPUT«␤»

[12:11] <Ulti> m: say (1..6) (&) (5..6)

[12:11] <camelia> rakudo-moar 795a32: OUTPUT«set(5, 6)␤»

[12:11] <Ulti> what's up with that?

[12:11] <jnthn> m: my %stuff = stuff => (1..6), thing => (7..10); say %stuff.perl

[12:11] <camelia> rakudo-moar 795a32: OUTPUT«("stuff" => 1..6, "thing" => 7..10).hash␤»

[12:12] <jnthn> m: my %stuff = stuff => (1..6), thing => (7..10); say %stuff.map(*.value).perl

[12:12] <camelia> rakudo-moar 795a32: OUTPUT«(1..6, 7..10).list␤»

[12:12] <Ulti> m: my %stuff = stuff => (1..6), thing => (7..10); %stuff.grep(*.value (&) 5)).say

[12:12] <camelia> rakudo-moar 795a32: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/jwOH6l7AYL␤Unexpected closing bracket␤at /tmp/jwOH6l7AYL:1␤------> [32mg => (7..10); %stuff.grep(*.value (&) 5)[33m⏏[31m).say[0m␤»

[12:12] <Ulti> m: my %stuff = stuff => (1..6), thing => (7..10); %stuff.grep(*.value (cont) 5)).say

[12:12] <camelia> rakudo-moar 795a32: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/HYFJqTvn31␤Unexpected closing bracket␤at /tmp/HYFJqTvn31:1␤------> [32m> (7..10); %stuff.grep(*.value (cont) 5)[33m⏏[31m).say[0m␤»

[12:12] <Ulti> m: my %stuff = stuff => (1..6), thing => (7..10); %stuff.grep(*.value (cont) 5).say

[12:12] <camelia> rakudo-moar 795a32: OUTPUT«"stuff" => 1..6␤»

[12:12] <Ulti> yeah that works

[12:12] <jnthn> m: my %stuff = stuff => (1..6), thing => (7..10); say %stuff.map(*.value (&) (5..6)).perl

[12:12] <camelia> rakudo-moar 795a32: OUTPUT«No such method 'count' for invocant of type 'Set'␤  in method reify at src/gen/m-CORE.setting:8382␤  in block  at src/gen/m-CORE.setting:8290␤  in method reify at src/gen/m-CORE.setting:8265␤  in method gimme at src/gen/m-CORE.setting:8781␤  in m…»

[12:12] <jnthn> oh...that doesn't curry

[12:13] <jnthn> m: my %stuff = stuff => (1..6), thing => (7..10); say %stuff.map({ .value (&) (5..6) }).perl

[12:13] <camelia> rakudo-moar 795a32: OUTPUT«(set(5,6), set()).list␤»

[12:13] <jnthn> m: my %stuff = stuff => (1..6), thing => (7..10); say %stuff.grep({ .value (&) (5..6) }).perl

[12:13] <camelia> rakudo-moar 795a32: OUTPUT«("stuff" => 1..6,).list␤»

[12:13] <Ulti> naaw

[12:13] * jnthn suspects (&) should do so, however

[12:14] <Ulti> I have a feeling this caught me out ages ago

[12:14] <Ulti> and I'm repeating myself

[12:14] <Ulti> okedoke whatever... or not as the case may be

[12:40] *** telex joined
[12:44] <moritz> \o

[12:48] *** molaf joined
[12:49] <timotimo> o\

[12:49] <timotimo> %

[12:49] <moritz> FROGGS__: ping

[12:49] <FROGGS__> moritz: pong

[12:50] <moritz> FROGGS__: we talked about moving testers.perl6.org to the new server

[12:51] <FROGGS__> moritz: true

[12:51] <FROGGS__> I'd need an account... somewhere I suppose :o)

[12:51] <moritz> FROGGS__: the main question is: should it go on the www or the 'hack' server?

[12:51] *** rurban left
[12:52] <moritz> FROGGS__: how much CPU, RAM and disk space does it use?

[12:52] *** rurban joined
[12:52] <FROGGS__> good question

[12:52] <FROGGS__> lemme check

[12:53] <timotimo> moritz: does the "security-relevant services" host have a name yet?

[12:53] <moritz> www has 4GB RAM, and a single CPU; I could add another one with a short downtime

[12:53] <moritz> timotimo: no, it doesn't exist yet; I'm thinking maybe 'risk.p6c.org'

[12:53] <FROGGS__> moritz: is there a connection between both?

[12:54] <timotimo> mhm

[12:54] <moritz> FROGGS__: sure, both are on the internet :-)

[12:54] <FROGGS__> like, that the hack server could generate static html pages, and the www server would deliver these (using apache), and the www would also receive reports

[12:54] <FROGGS__> so they'd need to share a prostgres db and a directory

[12:55] <FROGGS__> maybe rsync'd

[12:55] *** rindolf left
[12:55] <moritz> FROGGS__: rsync should be pretty fast; I'd like to avoid setting up an NFS share

[12:55] <moritz> (they are on the same physical machine, so network between them should be pretty fast)

[12:55] <FROGGS__> yes, it feels like the right design anyway

[12:56] <jnthn> FROGGS__++ moritz++

[12:56] <moritz> FROGGS__: mail or msg me your ssh pubkey, then I'll create an account for you on both servers

[12:58] <timotimo> is www meant to do mostly static web hosting?

[12:58] <timotimo> or are the web services supposed to culminate in a single web server via proxying?

[12:58] <moritz> timotimo: it's dimensioned to also run some dynamic pages

[12:58] <moritz> timotimo: it has enough RAM to compile rakudo-m, so that's possible too

[12:59] <timotimo> for some reason a single CPU still feels a bit weak; or is that two logical cores?

[12:59] <moritz> timotimo: though highly CPU-intensive loads don't fit there

[12:59] <timotimo> hm, i suppose web stuff is rather I/O bound

[13:00] <moritz> timotimo: well, the server on which I run irclog.perlgeek.de (also written in perl) and a few mostly-static web pages is also a single core, and i mostly idles

[13:00] <timotimo> i wonder how we'd get a libuv-backed socket on moarvm to do TCP fast open

[13:00] <timotimo> moritz: ah, right. it's most probably mostly peak loads

[13:00] <timotimo> gotta go AFK for a bit

[13:01] *** Rounin joined
[13:17] *** atroxaper joined
[13:23] *** atroxaper left
[13:27] <colomon> m: say 1..6 (&) 4..5

[13:27] <camelia> rakudo-moar 795a32: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/osr71uJc0H␤Operators '..' and '..' are non-associative and require parentheses␤at /tmp/osr71uJc0H:1␤------> [32msay 1..6 (&) 4.[33m⏏[31m.5[0m␤    expecting any of:␤        postfix␤…»

[13:28] <colomon> m: say (1..6) (&) (4..5)

[13:28] <camelia> rakudo-moar 795a32: OUTPUT«set(4, 5)␤»

[13:28] <colomon> m: say Set.new(1..6) (&) Set.new(4..5)

[13:28] <camelia> rakudo-moar 795a32: OUTPUT«set(4, 5)␤»

[13:28] <colomon> m: say set(1..6) (&) set(4..5)

[13:28] <camelia> rakudo-moar 795a32: OUTPUT«set(4, 5)␤»

[13:29] <colomon> m: say set($(1..6)) (&) set($(4..5))

[13:29] <camelia> rakudo-moar 795a32: OUTPUT«set()␤»

[13:30] *** gfldex left
[13:30] *** spider-mario left
[13:33] *** pmurias joined
[13:33] <pmurias> [Coke]: ping

[13:39] *** spider-mario joined
[13:42] <Ulti> m: my %h=hi=>1,world=>2; say %h.map({.value => .key})

[13:42] <camelia> rakudo-moar 795a32: OUTPUT«use of uninitialized value of type Any in string context  in block <unit> at /tmp/8uNoRLhy4z:1␤␤No such method 'count' for invocant of type 'Hash'␤  in method reify at src/gen/m-CORE.setting:8382␤  in block  at src/gen/m-CORE.setting:8290␤  in me…»

[13:42] <Ulti> so what's up with the above... 

[13:42] <Ulti> m: my %h=hi=>1,world=>2; say %h.map({$_.value => .key})

[13:42] <camelia> rakudo-moar 795a32: OUTPUT«1 => "hi" 2 => "world"␤»

[13:43] <Ulti> ^ is my confusion

[13:43] <Ulti> why the need for the first $_

[13:45] <timotimo> so that it doesn't get parsed as a hash literal

[13:45] <timotimo> $_ says "this is code block, yo"

[13:45] <Ulti> I thought you would need the , for that

[13:45] <timotimo> i don't think so

[13:45] <Ulti> as in for it to be a hash rather than just a pair literal

[13:45] <timotimo> m: say {foo => "bar"}.WHAT

[13:45] <camelia> rakudo-moar 795a32: OUTPUT«(Hash)␤»

[13:45] <timotimo> m: say {foo => "bar"}.perl

[13:45] <camelia> rakudo-moar 795a32: OUTPUT«{"foo" => "bar"}␤»

[13:45] <jnthn> I think the implicit use of $_ there should count

[13:45] <jnthn> So I'd have taht as a bug.

[13:46] <timotimo> hm, okay

[13:46] <jnthn> I think there's an RT

[13:46] <Ulti> I think its the {} looking hashy before they look blocky

[13:46] <Ulti> that makes the => a hash rather than a pair

[13:47] <Ulti> I mean this is what the * is kind of for

[13:47] <Ulti> but I can't use it :'(

[13:48] *** aborazmeh joined
[13:52] *** Lasse_ joined
[13:54] <timotimo> you can't, eh?

[13:54] <timotimo> does => prevent currying for some reason?

[13:54] <timotimo> oh, of course, two * will iterate in twos instead of one by one

[14:01] *** brrt joined
[14:11] <brrt> wednesday is too early for me, have exam that day. thursday is fine :-)

[14:11] <masak> ...cue commit...

[14:15] <brrt> i'm not sure i understand

[14:16] <brrt> asdf

[14:16] <brrt> oops

[14:16] <dalek> mu: 7d08475 | masak++ | misc/perl6advent-2014/schedule:

[14:16] <dalek> mu: [schedule] book brrt on Thursday

[14:16] <dalek> mu: review: https://github.com/perl6/mu/commit/7d08475cee

[14:16] <masak> like that ^

[14:16] <brrt> ah i see

[14:16] <brrt> :-)

[14:17] <masak> feel free to fill in the topic, too.

[14:17] <vendethiel> eh, I should find a topic to talk about

[14:18] <brrt> thanks :-) i'll think about a good title. I was preparing to write about the JIT / spes logging stuff

[14:19] <brrt> in the sense of 'how to see what spesh/JIT does for you'

[14:19] <brrt> or would we lose too much readers that way? :-)

[14:20] <masak> write about somthing that piques your interest, is the main thing

[14:21] <masak> if it's interesting to you, and it comes through, chances are it's interesting to a reader

[14:21] <brrt> ok, i'll try

[14:26] *** Alina-malina joined
[14:28] <moritz> brrt: a bad post doesn't make us lose readers; if people don't like it, they move on to their next tab

[14:28] <brrt> that is true

[14:28] <moritz> brrt: ... you just shouldn't insult them :-)

[14:28] <brrt> that is easy

[14:28] <brrt> i don't know them

[14:30] *** aborazmeh left
[14:34] <ssqq> why in perl6, 1.1+2.2 == 3.3, but in NQP, 1.1+2.2 > 3.3, they have same backends, only with different grammar and action.

[14:34] <jnthn> ssqq: Because 1.1 is not a floating point number in Perl 6

[14:35] <brrt> 1.1 in perl6 is (iirc) a rational

[14:35] <jnthn> And in NQP we cheat and make it one.

[14:35] <moritz> ssqq: the difference is that 1.1 in Perl 6 is a Rat, which can store the 1.1 exactly

[14:35] <moritz> ssqq: but it's not a VM-level type, so NQP doesn't have it

[14:35] <jnthn> We could just forbid 1.1 in NQP and force writing 1.1e0 if we want to really force Perl 6 compatibility

[14:35] <jnthn> But I've barely cared; floating point isn't very useful in compilers, generally.

[14:35] <moritz> (and it's not needed much for writing compilers)

[14:35] <timotimo> aye

[14:36] <jnthn> Sometimes I wonder if NQP could get away with assuming all math is integers and you have to write the nqp::add_n if you want the floating point.

[14:36] <brrt> as in, completely untested by any part of the compilation stack

[14:36] <jnthn> We'd generate better code that way. :)

[14:36] <brrt> jnthn - i think you could and it would simplify stuff

[14:36] <jnthn> It's tempting. :)

[14:36] <brrt> very

[14:37] <jnthn> After all, the point of NQP is to build compilers and other related runtime bits, not to be general purpose like full Perl 6. :)

[14:37] <ssqq> jnthn: yes, I think float is useless to hack compilers.

[14:45] *** brrt left
[14:45] <masak> I'm surprised floats were put into NQP in the first place :)

[14:46] *** atroxaper joined
[14:47] <moritz> having floats is kinda useful for math that generates floats :-)

[14:47] <masak> I guess...

[14:48] <moritz> but I think it was really just parrot/PIR legacy

[14:48] <masak> ...but even that explanation feels non-obvious to me. mixing levels, kind of.

[14:49] <moritz> well, before NQP, rakudo was written in PIR (shudder)

[14:49] <moritz> so it's kinda obvious to have NQP provide all the PIR features that easily map into a HLL

[14:49] <[Coke]> pmurias: pong

[14:49] <masak> yeah.

[14:53] *** atroxaper left
[14:56] <dalek> infrastructure-doc: eb78d05 | moritz_++ | hosts/www.p6c.org.pod:

[14:56] <dalek> infrastructure-doc: Add basic documentation for www.p6c.org.pod

[14:56] <dalek> infrastructure-doc: review: https://github.com/perl6/infrastructure-doc/commit/eb78d05a23

[15:00] *** smls joined
[15:03] <dalek> infrastructure-doc: bb00259 | moritz_++ | hosts/hack.p6c.org.pod:

[15:03] <dalek> infrastructure-doc: Updte sudoers list

[15:03] <dalek> infrastructure-doc: review: https://github.com/perl6/infrastructure-doc/commit/bb00259728

[15:04] * FROGGS__ .oO( "Updte sders lst" - be consistent )

[15:05] <moritz> cnsstncy s vrrtd

[15:05] *** atroxaper joined
[15:10] *** rindolf joined
[15:11] *** ssqq_ joined
[15:14] *** ssqq left
[15:19] *** zakharyas joined
[15:27] <masak> ooh, I got a case where adding Grammar::Tracer changes the outcome of a parse :>

[15:29] <jnthn> So Grammar::Tracer is SO good it not only helps you debug your grammar, but magically makes it work too? :P

[15:29] <masak> no, it fails with a different failure.

[15:29] <masak> guess that qualifies as a Heisenbug.

[15:29] <jnthn> Well, more likely a Grammar::Tracer spoiling something bug...

[15:32] <masak> I took a snapshot of the files -- will look at it later.

[15:32] <masak> right now it would be a detour.

[15:32] <timotimo> masak: could be an optimizer bug

[15:32] <timotimo> oh, wait

[15:33] <timotimo> yeah, maybe

[15:33] <masak> no matter what the cause, it would be interesting to track it down.

[15:33] <timotimo> some time ago i had to teach the optimizer to just ignore the kinds of nodes the debugger adds to regexes

[15:34] <timotimo> otherwise it wouldn't turn a beginning-of-string anchor at the beginning into a direct fail instead of scanning through the whole string

[15:42] *** gaussblurinc_ joined
[15:42] <smls> Ulti:  «$seq.Bag.pick($seq)»  can be written more simply as  «$seq.Bag.pick(*)»    (in your advent post draft)

[15:43] <[Coke]> .tell pmurias maybe just leave me a message this way. :)

[15:43] <yoleaux> [Coke]: I'll pass your message to pmurias.

[15:44] <[Coke]> .tell pmurias we don't currently smoke nqp, just rakudo. I can see about setting up an nqp-only smoker, but the last time I tried to get nqp-js to work, I kept getting failures. 

[15:44] <yoleaux> [Coke]: I'll pass your message to pmurias.

[15:45] <smls> Ulti:  «token record { ">"<id>" "<comment>"\n"<sequence> }»  might benefit in readability from adding a space between each subrule.

[15:47] <moritz> and that's just style, but maybe use single quotes?

[15:48] <moritz> token record { '>' <id> ' ' <comment> \n <sequence> }

[15:50] *** bjz joined
[15:56] *** spider-mario left
[15:59] <[Coke]> broken record

[15:59] <masak> token effort

[15:59] <vendethiel> why not use `my @report_lines = do for` in `method report`?(advent)

[16:01] <pmurias> [Coke]: hi

[16:01] <yoleaux> 15:43Z <[Coke]> pmurias: maybe just leave me a message this way. :)

[16:01] <yoleaux> 15:44Z <[Coke]> pmurias: we don't currently smoke nqp, just rakudo. I can see about setting up an nqp-only smoker, but the last time I tried to get nqp-js to work, I kept getting failures.

[16:01] <pmurias> [Coke]: what sort of failures are you getting?

[16:02] <pmurias> [Coke]: 'make test' works here so failure are interesting for me

[16:04] <pmurias> [Coke]: smoke testing for nqp-js would solve the most common 'missing dependency' style failures

[16:04] *** ssqq_ left
[16:09] *** tinyblak_ left
[16:12] *** tinyblak joined
[16:15] *** zakharyas left
[16:29] *** perltricks joined
[16:46] *** Grrr_ joined
[16:49] *** colomon joined
[16:50] *** pmurias left
[16:51] <perltricks> Hey y'all, are there any docs that descrbe the naming rules for variables? (other than S02)

[16:52] <masak> what are you after that you're not finding in S02?

[16:53] *** ajr_ joined
[16:53] <smls> http://doc.perl6.org/language/variables explains the twigils

[16:54] <smls> (but not the rules for underscores/hyphens/apostrophes in custom variable names)

[16:54] <perltricks> masak: i'm looking for rules in terms of what are legal names. I'm actually looking for module name rules, but assumed vars and modules/packages have the same rules.

[16:55] <masak> yes. we call the common denominator an "identifier".

[16:55] *** Grrr_ left
[16:57] <Ulti> nooo my grammar doesnt work

[16:57] <Ulti> so now I'm debugging it before the post :(

[16:57] <masak> perltricks: the rule is this: alphanumerics and underscores are allowed, but the first char must not be a digit. before an alphabetic char you may also insert a single apostrophe (`'`) or hyphen (`-`).

[16:57] <vendethiel> Ulti: grammar::debugger is very good :p

[16:57] <masak> (but not before the first char)

[16:58] <perltricks> masak: thank you!

[16:58] <masak> m: my $_-_-_-_ = 5; say $_-_-_-_

[16:58] <camelia> rakudo-moar 795a32: OUTPUT«5␤»

[16:58] <masak> make that "before a non-numeric char".

[16:59] <masak> m: my $don't-try-this-at-home = "!"; say :$don't-try-this-at-home.perl

[16:59] <camelia> rakudo-moar 795a32: OUTPUT«"don't-try-this-at-home" => "!"␤»

[17:04] <ugexe> its adding a signature to $_?

[17:06] *** sivoais joined
[17:08] *** rurban left
[17:08] <gtodd>  perltricks: it's not a built in to the language rule perse but in PBP (or was it Advanced Perl Programming  ...) I remember recommendations like:  %hash = (a => , b=> 2); and $hash_ref = \%hash ; ... etc. (quasi guidelines for naming scalars used as references) ... I like those for self-documenting code etc. but with Perl6 ... hmm

[17:08] *** rurban joined
[17:08] <timotimo> ugexe: huh?

[17:09] *** mvuets joined
[17:10] <gtodd> perltricks:  references are different or ermm everywhere but the idea of  names that help document what is going on still applies ... I'd like to see a P6BP article about that :-D

[17:10] <gtodd> on perltricks.com ... 

[17:11] <perltricks> gtodd: $++ thx for the tip

[17:11] <gtodd> after alll ... perl ... it's not really all that tricky ... :-D

[17:12] <gtodd> but still thanks for the tricks ... great site ++

[17:12] <Ulti> sooo this is weird my grammar is working but something is still borked

[17:12] * Ulti scratches his head

[17:14] <smls> Ulti:  «.grep({ .value (cont) $phospho_site })»  can be written as  «.grep(*.value (cont) $phospho_site)»  , and in  «... if ($p53_gene (cont) $snp);»  you can leave off the outer parens.

[17:15] <masak> ugexe: no, $_-_-_-_ is a different variable, no relation to $_

[17:15] *** gaussblurinc_ left
[17:16] *** zakharyas joined
[17:19] <Ulti> smls yeah but you can't for the other ones so I wanted to be consistent

[17:19] <Ulti> out parens on the if is a good call though

[17:20] <Ulti> ok so in a grammar what is the syntax for an optional grouping of tokens

[17:20] <Ulti> I have a feeling shoving a ? where I have isn't doing what I think it does

[17:28] <smls> [ ... ]?

[17:30] <Ulti> well that was fun :D

[17:30] <Ulti> so this grammar for the advent cal is better than the one I've been using for a while lol

[17:30] <Ulti> should probably improve the tests

[17:31] <smls> Ulti: With   «token record { ^^ ">" <id> [" "<comment> "\n"]? <sequence> }»   it can parse the snippets from the FASTA wikipedia page

[17:31] <Ulti> but yeah I didnt parse a FASTA without a comment before

[17:31] <Ulti> so that was fun

[17:32] <Ulti> smls yeah the idea is to have something a little more neat

[17:32] <perltricks> gtodd: thx!

[17:32] <Ulti> I also needed to change token to rule for the proto sequence bit because that obviously needs backtracking

[17:32] <Ulti> also the order was wrong

[17:32] <Ulti> (these are all good points to make)

[17:33] * Ulti gets writing

[17:33] <masak> Ulti++

[17:34] <Ulti> also jnthn++ for Grammar:Debugger its chuffing useful

[17:34] *** dwarring joined
[17:34] <Ulti> a feature request though, see if an action is bound and being called ;P

[17:35] *** zakharyas left
[17:36] <masak> yes. I've used Grammar::Tracer a bunch today. it's very useful. jnthn++

[17:37] <vendethiel> jnthn++ :-)

[17:38] *** zakharyas joined
[17:39] *** atroxaper left
[17:41] *** xinming_ joined
[17:41] *** rindolf left
[17:42] *** rindolf joined
[17:44] <smls> Ulti: What makes you say that the 'sequence' proto token needs backtracking?

[17:44] <Ulti> because otherwise it doesnt match all the sequence it could

[17:44] <smls> It tries all overloads, and the one that matches the longest token wins, doesn't it?

[17:45] <Ulti> so like if the start of a sequence looks like DNA it sort of gives up and ruins it

[17:45] <Ulti> smls not with token

[17:45] <Ulti> token its just I keep going along and if I could match something whatever the length it was that token

[17:47] *** atroxaper joined
[17:50] <smls> Hm. Are you sure?

[17:50] <Ulti> sure in that its what I observed debugging it

[17:51] <Ulti> I think its because of the proto

[17:51] <Ulti> if it was three optional tokens it would work

[17:51] <Ulti> <dna> | <rna> | <aa>  as tokens that would do what you expect

[17:51] *** atroxaper left
[17:52] <Ulti> I guess proto tokens you want exact non confused tokens rather than something a bit more rule like

[17:57] *** mr-foobar joined
[18:01] <smls> Ulti: What do you gain from separating those rules in the first place?   «token sequence:sym<aa> { <[A..Z\*\-\n]>+ }»  already covers all cases...

[18:01] <Ulti> nothing in that post ;P

[18:01] <Ulti> but you could in theory attempt to create a different type of sequence object for each

[18:04] <smls> m: grammar { rule TOP {<foo>+}; proto token foo {*}; token foo:sym<a> {a+}; token foo:sym<ab> {a b+} }.parse("aaababa").say

[18:04] <camelia> rakudo-moar 795a32: OUTPUT«(Any)␤»

[18:05] <smls> m: grammar { rule TOP {<foo>+}; proto token foo {*}; token foo:sym<a> {a+}; token foo:sym<b> {b+} }.parse("aaababa").say

[18:05] <camelia> rakudo-moar 795a32: OUTPUT«｢aaababa｣␤ foo => ｢aaa｣␤ foo => ｢b｣␤ foo => ｢a｣␤ foo => ｢b｣␤ foo => ｢a｣␤␤»

[18:05] <smls> hm, looks like you're right, protos don't seem to work like   |   based LTM...

[18:06] <Ulti> but they do as a rule

[18:06] <Ulti> pun / actual wording intended 

[18:06] <jnthn> Ulti: Feel free to drop the feature request in the issues for Grammar::Debugger.

[18:07] <jnthn> I want to revisit those two modules soon to get them able to use the method cache publishing support that I added to Rakudo in the last days, so they'll run a good bit faster.

[18:07] <jnthn> Or rather, slow your grammar down a bit less :)

[18:08] <smls> http://perlcabal.org/syn/S05.html#line_1349  suggests proto token should use longest-token matching though...

[18:09] <Ulti> *shrug* for the sake of this post meh

[18:09] <smls> I'm just trying to understand it all myself... :)

[18:11] <jnthn> They do use LTM

[18:11] <jnthn> That's the point of proto tokens... :)

[18:11] <jnthn> the reason the one above doesn't match is that leftmost always wins

[18:12] *** vaclavstrachon joined
[18:12] *** vaclavstrachon is now known as wenca

[18:12] <jnthn> That is, an a+ will eat as many as it can, and then a b+ won't have an a. And tokens don't backtrack.

[18:13] <smls> so 'a b+' is not treated as a single token by LTM?

[18:13] <jnthn> Sure, but

[18:13] <jnthn> aaaaabb

[18:14] <jnthn> At the start of the string, it a+ can match

[18:14] <jnthn> So it eats all the as

[18:14] <jnthn> Then the <foo>+ means we try to match <foo> again.

[18:14] <smls> oh, right

[18:14] <jnthn> But nothing does, 'cus we already ate every a

[18:15] <smls> m: grammar { rule TOP {<foo>+}; proto token foo {*}; token foo:sym<a> {a+}; token foo:sym<ab> {a+ b+} }.parse("aaababa").say

[18:15] <camelia> rakudo-moar 795a32: OUTPUT«｢aaababa｣␤ foo => ｢aaab｣␤ foo => ｢ab｣␤ foo => ｢a｣␤␤»

[18:15] <smls> \o/

[18:15] <smls> I wonder which of the two was chosen for the last 'a' there...

[18:16] <jnthn> Has to be foo:sym<a>, because there's no b for the b+ to match, surely?

[18:16] <smls> what if it was "a+ b*"

[18:17] *** spider-mario joined
[18:17] <jnthn> Same, but then LTM comes out the same and so it tie-breaks on declaration order.

[18:17] *** tgt joined
[18:17] * vendethiel needs to rewrite his Text::Indented because it backtracks too much...

[18:18] <smls> and the one that was declared earlier wins?

[18:18] <Ulti> jnthn good thats how I was thinking about it too... so my mental model isnt totally bogus

[18:18] <Ulti> smls yeah

[18:18] <Ulti> at least thats what is happening

[18:19] <jnthn> smls: Yeah; that's also how it's spec'd :)

[18:19] <perltricks> is there a max identifier character length?

[18:19] <jnthn> perltricks: Yes, you only have so much RAM/swap... :)

[18:20] <perltricks> jnthn: heh ok, thanks

[18:20] <jnthn> I'm pretty somebody (probably masak :P) tried out a megabyte long identifier once and it worked :P

[18:20] <jnthn> *pretty sure

[18:20] <perltricks> :D

[18:21] <smls> Ulti: 

[18:21] <smls> still not convinced that your case needs backtracking though... :)

[18:21] *** wenca left
[18:21] <smls> Can you give an example of an input that only matches when you change proto token to proto rule there?

[18:26] *** tgt left
[18:28] <jnthn> smls: It's regex that backtracks, not rule

[18:28] <smls> right

[18:29] <jnthn> (sorry if that's not helpful info; I'm only half-following while I prepare dinner :))

[18:30] <smls> that makes it even more curious that changing "proto token" to "proto rule" apparently makes something work

[18:30] <smls> in Ulti's grammar...

[18:33] <smls> Especially since the candidates all consist of a single quantified character class, like   «rule sequence:sym<rna> { <[ACGURYKMSWBDHVNX\-\n]>+ }»

[18:33] <smls> So no significant whitespace for :sigspace to affect, except for the one before the closing brace.

[18:34] <jnthn> I know that the char class has \n in it

[18:34] *** rindolf left
[18:35] <smls> Is that affected by :sigspace somehow?

[18:35] *** perltricks left
[18:37] <jnthn> No, though I'm just wondering if the data has some other kind of space in it

[18:47] *** rindolf joined
[18:50] *** atroxaper joined
[18:51] <smls> Ulti: Also, I think  «($<comment>) ?? (~$<comment>).trim !! ''»   would accidentally discard a comment consisting of the character "0"

[18:52] <smls> Maybe   «($<comment> // '').trim»   instead?  (The .trim method automatically coerces to string.)

[18:53] <jnthn> $<comment> is "did this match" rather than stringy truth

[18:53] <FROGGS__> m: say so "0"

[18:53] <camelia> rakudo-moar 795a32: OUTPUT«False␤»

[18:53] <jnthn> So I think it's OK

[18:53] <smls> oh, right

[18:53] <jnthn> m: "0" ~~ /(.)/; say ?$0

[18:53] <camelia> rakudo-moar 795a32: OUTPUT«True␤»

[18:54] <smls> although my version is still shorter :P

[18:54] <jnthn> But a failed match is still defined

[18:54] <jnthn> Oh, or is it...

[18:54] <jnthn> gah, I can't remember :P

[18:54] <FROGGS__> it's Nil, isnt it?

[18:54] <jnthn> I'd have putten || there though

[18:54] <smls> I though it was just (any)?

[18:55] <jnthn> Uh, *put

[18:55] <jnthn> .oO( I made a right turkey of that sentence... )

[18:55] <smls> m: say ("a" ~~ /b/).perl

[18:55] <camelia> rakudo-moar 795a32: OUTPUT«Nil␤»

[18:56] *** raiph joined
[18:56] <jnthn> Yeah, then // is fine :)

[18:56] <jnthn> nom &

[18:56] *** atroxaper left
[18:56] <smls> say grammar {token TOP { b }}.parse("a").perl

[18:56] <smls> m: say grammar {token TOP { b }}.parse("a").perl

[18:56] <camelia> rakudo-moar 795a32: OUTPUT«Any␤»

[18:58] * smls stops annoying Ulti for now... :P

[19:06] *** rindolf left
[19:10] *** FROGGS_ joined
[19:12] *** denis_boyun joined
[19:13] *** Sqirrel left
[19:15] *** pyrimidine joined
[19:16] *** ajr_ left
[19:18] *** Sqirrel joined
[19:19] <pyrimidine> Ulti: have any links to advent draft?  I'll be on and off today, but can backlog

[19:31] *** perltricks joined
[19:32] *** spider-mario left
[19:33] *** gfldex joined
[19:34] *** spider-mario joined
[19:38] <Ulti> http://perl6advent.wordpress.com/?p=2437&preview=true

[19:38] <Ulti> pyrimidine ping

[19:38] <Ulti> also everyone else I guess

[19:38] <Ulti> I dont think I want to spend any more time on it

[19:40] *** denis_boyun left
[19:46] <Ulti> post set to pending

[19:49] *** pyrimidine left
[19:55] *** pyrimidine joined
[19:55] *** Sqirrel left
[19:55] *** BenGoldberg joined
[20:01] <pyrimidine> Ulti: Odd, getting a 404 on that URL.   

[20:02] <Ulti> http://perl6advent.wordpress.com/2014/12/15/day-15-bioinformatics-and-the-joy-of-perl6/?preview=true&preview_id=2437&preview_nonce=45a2aa2bb3

[20:02] <Ulti> yeah sorry had to set to be scheduled first

[20:03] <Ulti> watch out for the visual editor that will wreck havoc on the formatting

[20:09] <pyrimidine> yeah; I hate wordpress

[20:11] <pyrimidine> Nope, still a 404 :(

[20:13] <dwarring> pyrimidine: are you logged into wordpress

[20:13] <dwarring> ?

[20:13] <pyrimidine> yep

[20:13] <pyrimidine> as cjfields

[20:14] <dwarring> hmm, both links working for me

[20:14] <masak> pyrimidine: maybe you don't have access to perl6advent

[20:15] <pyrimidine> masak: yes, I think that's it

[20:15] <pyrimidine> wordpress.com user name is cjfields if that helps

[20:18] <masak> m: -> $x, $y, $x {}

[20:18] <camelia> rakudo-moar 795a32: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/nPLwY6Xoor␤Redeclaration of symbol $x␤at /tmp/nPLwY6Xoor:1␤------> [32m-> $x, $y, $x[33m⏏[31m {}[0m␤»

[20:18] *** mephinet left
[20:18] <masak> m: my $x; my $x

[20:18] <camelia> rakudo-moar 795a32: OUTPUT«Potential difficulties:␤    Redeclaration of symbol $x␤    at /tmp/74uM4kpum4:1␤    ------> [32mmy $x; my $x[33m⏏[31m<EOL>[0m␤»

[20:23] *** vti left
[20:23] <masak> perl6: sub f(&f) { &f("OH HAI") }; f({ say $^greeting })

[20:23] <camelia> rakudo-{parrot,moar} 795a32: OUTPUT«OH HAI␤»

[20:25] *** mvuets left
[20:25] *** darutoko- left
[20:26] <pyrimidine> masak: anyone I need to ping re: p6advent access?  Mainly for Ulti

[20:27] <pyrimidine> *Ulti's article :P

[20:27] <pyrimidine>  but not a big deal if it's a pain

[20:27] <BenGoldberg> perl6: sub f(&f) { f("iello, uorld!") }; f(&say);

[20:27] <camelia> rakudo-{parrot,moar} 795a32: OUTPUT«iello, uorld!␤»

[20:33] <moritz> pyrimidine: /msg me your email address

[20:33] <dwarring> Ulti: stray '>' midway through "A Bag of Sequence" section

[20:33] <dwarring> "> print $seq GCTACCTATAAAGC>"

[20:33] *** vti joined
[20:34] * dwarring nice post

[20:39] *** zakharyas left
[20:40] *** kurahaupo joined
[20:40] <pyrimidine> moritz: sent

[20:43] *** mephinet joined
[20:48] <moritz> on my web servers, I tend to use name-based virtual hosts for IPv4, and separate IPv6 addreses for each (sub)domain

[20:49] <moritz> does that make sense? Should I do the same on the new www server?

[20:51] <moritz> (I finally managed to enable IPv6 on the server)

[20:51] <pyrimidine> Ulti: awesome post!

[21:05] *** bjz left
[21:06] *** atroxaper joined
[21:14] *** atroxaper left
[21:33] <Ulti> pyrimidine I've logged out if you were making changes

[21:34] *** molaf left
[21:34] <pyrimidine> Ulti: nope, I think dwarring caught the specific one.  It hits on all the good points why one would use p6 for this

[21:35] <Ulti> k k, I'll get on with the rest of my life now then lol

[21:35] <dalek> infrastructure-doc: 5e26393 | moritz_++ | hosts/ (2 files):

[21:35] <dalek> infrastructure-doc: Document IP addresses

[21:35] <dalek> infrastructure-doc: 

[21:35] <dalek> infrastructure-doc: particularly important, because IPv6 is not in the DNS yet

[21:35] <dalek> infrastructure-doc: review: https://github.com/perl6/infrastructure-doc/commit/5e26393a99

[21:35] *** ab5tract joined
[21:36] *** raiph left
[21:37] *** pyrimidine left
[21:38] *** mephinet left
[21:38] *** romel joined
[21:39] <timotimo> o/

[21:39] * timotimo had an exciting drive through thick fog uphill around lots and lots of sharp turns

[21:40] <jnthn> Sounds a little *too* exciting... 

[21:40] <raydiak> \o

[21:41] <timotimo> it was okay, i didn't drive anywhere near the speed limit for some more "exciting" parts :)

[21:41] <timotimo> the "driving fast" part of my trip was satisfying, too, though. Deutsche Autobahn is without a speed limit in big parts

[21:42] <jnthn> Yes, I've experienced that...as a passenger :)

[21:42] <timotimo> i was going 150 km/h at times and was being overtaken by cars at least 20 or perhaps 30km faster than me on the left

[21:42] <timotimo> so i thought "why the heck not." and went 180 km/h for a bit, too

[21:42] <timotimo> every now and then it can feel nice

[21:50] *** pyrimidine joined
[21:51] <masak> ok, I wrote an FP version of the animal guessing game, as promised: https://gist.github.com/masak/01c4469169dc88e2c114

[21:51] <masak> it's shorter, but it makes my head spin a little bit to reason about it.

[21:51] <vendethiel> masak: exit(); is not very fp-ish :p

[21:51] <masak> and I didn't even try to list the animals on exit. (though it is possible)

[21:52] <masak> vendethiel: just think of it as the QuitProgram monad.

[21:52] <vendethiel> *g*

[21:52] *** telex left
[21:52] *** kaare_ left
[21:52] <vendethiel> it's like the asm's monad longjmp, amirite

[21:53] <masak> like a trampoline into a pool of ice cold water.

[21:53] *** spider-mario left
[21:54] *** telex joined
[21:56] <masak> the thing I dislike about this version is that I keep coming up with possible simplifications, and they all turn out not to work :/

[21:57] <masak> it's like it's in a local optimum of FP permutation programming.

[21:57] *** araujo left
[22:00] *** araujo joined
[22:01] *** prime- joined
[22:02] *** mephinet joined
[22:03] *** pyrimidine left
[22:03] *** kurahaupo left
[22:04] *** xprime left
[22:05] *** pmurias joined
[22:06] <raydiak> timotimo: I had an exciting drive today too! around meth-addicted drivers in my neighborhood, through SUV police patrols on the freeway, passing under lots and lots of cameras waiting to juice you for extra municipal revenue :)

[22:07] <Ulti> pyrimidi_ dwarring I think the spurious '>' is a feature, the .gist prints out FASTA records i.e. they start with >

[22:08] <jnthn> Sometimes, I'm so darn glad I can't drive :)

[22:09] <raydiak> I've been seriously considering giving it up entirely the last few years, things are getting so much worse than they were when I started driving just a decade ago

[22:09] <dwarring> Ulti++

[22:09] <raydiak> jnthn: why can't you drive?

[22:10] <jnthn> raydiak: Rentina condition = see in low resolution = can't drive safely.

[22:11] <raydiak> aw, that sucks...apparently retinas are fragile things in the #perl6 circle

[22:12] <jnthn> Well, mine one is genetic, and very stable so far (and family history suggests it stays that way for a lifetime).

[22:13] <jnthn> So thankfully it seems I don't have to worry about it getting any worse.

[22:13] <timotimo> raydiak: in what way did driving change? too many mad people on the road?

[22:13] <timotimo> or just too many in general?

[22:13] <raydiak> glad to hear it :)

[22:14] <timotimo> raydiak: on the flip side, it gives jnthn an epic beard coloring

[22:14] *** prime- left
[22:14] * masak .oO( to dye for )

[22:14] <raydiak> timotimo: in my specific area, the cops are scary, the cameras are multiplying exponentially and send tickets to my 60-yr-old mother in her station wagon, who is an excellent and responsible driver

[22:14] <timotimo> :\

[22:15] <raydiak> then there is the prevailing social climate, which as you guessed, is much worse

[22:15] <timotimo> .o( "when i get in my car and drive / there aint nobody left alive" )

[22:17] <raydiak> aye...between the careless people, angry people, the addicts, the cops...it can get pretty tense

[22:17] <raydiak> the cops just in the last decade here have tazed a pregnant woman, shot unarmed minors more than once...stuff I'm surprised didn't go national, honestly

[22:18] <raydiak> but most of the city, including cops, newspaper, etc, is pretty corrupt and owned by a single family

[22:19] <raydiak> but I also have a skewed perspective b/c I'm a way-too-young burnout living in the closest thing we have to a ghetto, so take all that with a grain of salt :)

[22:20] *** Lasse_ left
[22:20] *** lsm-desktop joined
[22:21] <raydiak> oh and (epic beard coloring)++

[22:21] <timotimo> hmm :S

[22:22] *** ptc_p6 left
[22:22] <masak> 'night, #perl6

[22:22] *** denis_boyun joined
[22:22] <raydiak> g'night masak 

[22:23] *** smls left
[22:23] <timotimo> gnite masak 

[22:25] <raydiak> it's a darn shame too, b/c there are also lots of cool people here, and easy access to some incredible nature, if outdoors is your thing, we even get all 4 seasons which I like

[22:26] <timotimo> ;(

[22:26] <raydiak> just too many elements being mixed under too much pressure in recent years maybe

[22:29] <raydiak> but I could go on for hours about what I think is wrong with the world around me...I like Perl 6 (and #perl6) b/c it's one of the things that still feels more right than wrong :)

[22:29] *** denis_boyun left
[22:29] * raydiak goes outside to clear his head and plan the remainder of his day

[22:31] *** Isp-sec left
[22:37] <ab5tract> everything i've been hacking on recently seems to break perl6 :(

[22:37] <ab5tract> one sequence, three or more outputs: https://gist.github.com/ab5tract/ff7ea75f0a9262d4e4a4

[22:39] <FROGGS_> ab5tract: that might be because of the BEGIN-block+our-scope design pattern

[22:40] <FROGGS_> I bet the segfaults vanish with the removal of one of them

[22:40] <FROGGS_> sorry that I've got to leave now though :/

[22:40] <FROGGS_> gnight #perl6

[22:40] <timotimo> gn

[22:41] <ab5tract> ciao FROGGS_, thanks for the tip

[22:41] *** atroxaper joined
[22:42] *** FROGGS_ left
[22:46] *** BigBear left
[22:46] <ab5tract> if removing the BEGIN block means making it a sub and calling it explicitly, that doesn't change anything :/

[22:47] *** mr-foobar left
[22:47] *** pyrimidine joined
[22:48] <ab5tract> haven't been able to get undefined behavior or crashing with the same code on jvm, fwiw

[22:49] *** atroxaper left
[22:51] <jnthn> Looking at where it fails, I somewhat suspect the qq:x

[22:51] <jnthn> The first one suggests some kind of heap corruption, and the second can be explained by corruption of the command given to tput

[22:51] *** pyrimidine left
[22:53] <ab5tract> jnthn: that's basically how i had broken it down in my reasoning. but i wouldn't have expected the RHS to affect the LHS in that way, re: the key behavior

[22:53] <ab5tract> i get those heap corruptions pretty consistently with qq:x on moar/os x

[22:55] *** kurahaupo joined
[22:55] <jnthn> Oh, you're on OS X...

[22:55] <ab5tract> i thought to cache all the `tput cup y x` strings, and that for loop crashes ~90% of the time, but always in a different place, and with varying forms of "oh-noez-moar-splodes"

[22:56] <jnthn> Yeah, there's some instability with moar on OSX that doesn't seem to exist on Windows or Linux. :(

[22:56] <ab5tract> have you been having any luck with it?

[22:56] <jnthn> I've spent hours on it already with lldb, guardmalloc, etc. I did find and fix two bugs. Sadly, neither seemed to be The Bug.

[22:57] <jnthn> They helped get spectest cleaner, but something is certainly still amiss.

[22:57] <ab5tract> :(

[22:58] <jnthn> I should take a closer look at qqx. I wonder if it takes a different code path on OSX for some reason.

[22:58] <ab5tract> do i understand correctly that OS X is swapping memory locations/values around?

[22:59] <jnthn> Yeah, I suspect ASLR is to thank for the different outcomes between runs.

[23:00] <ab5tract> jnthn: https://gist.github.com/ab5tract/28aa420074909a6925ae

[23:00] <ab5tract> that will get you a qq:x crash consistently, guaranteed

[23:00] <jnthn> ooh

[23:00] <ab5tract> "guaranteed consistency"

[23:03] <ab5tract> i've got to run for now

[23:03] <ab5tract> i hope it helps with your investigation

[23:04] <jnthn> Sadly not on the OSX box I have access to but maybe I should update my Moar/Rakudo there first

[23:04] <jnthn> I'll try on the train tomorrow

[23:04] * jnthn should probably sleep now-ish :)

[23:05] <ab5tract> happy travels :)

[23:05] *** ab5tract left
[23:06] <pmurias> jnthn: sleeping is useful for hunting weird segfault ;)

[23:07] *** khisanth_ is now known as Khisanth

[23:10] <jnthn> Also, for not missing said train... ;)

[23:10] <jnthn> 'night, #perl6

[23:13] <vendethiel> 'night, jnthn++ :)

[23:17] *** Araq joined
[23:18] *** woolfy joined
[23:19] *** gfldex left
[23:31] *** rurban left
[23:35] *** vti left
[23:36] *** woolfy left
[23:42] *** Araq left
[23:46] <perltricks> ok a P6 module-starter: https://github.com/sillymoose/Module-Minter

[23:47] <perltricks> I've got an outstanding PR for File::Temp, so haven't added it to the module list yet

[23:48] <raydiak> nice! perltricks++

[23:50] *** pmurias left
