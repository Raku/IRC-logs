[00:02] *** kurahaupo_ left
[00:13] *** nbrown left
[00:22] *** xenoterracide_ joined
[00:28] *** xenoterracide_ left
[00:29] *** colomon left
[00:30] *** colomon joined
[00:36] *** xenoterracide_ joined
[00:37] *** nbrown joined
[00:44] *** [Sno] left
[00:44] *** [Sno] joined
[00:46] *** panchiniak joined
[00:50] *** nbrown left
[01:06] *** zacts left
[01:06] *** panchiniak left
[01:07] *** FROGGS__ joined
[01:08] *** dayangkun joined
[01:10] *** colomon left
[01:10] *** FROGGS_ left
[01:16] *** nbrown joined
[01:16] *** yeahnoob joined
[01:18] *** colomon joined
[01:24] *** eupcan277_y_h_h_ joined
[01:25] *** leont left
[01:48] *** [Sno] left
[01:48] *** [Sno] joined
[01:50] *** dj_goku joined
[01:52] *** eupcan277_y_h_h_ left
[02:22] *** diakopter left
[02:30] *** chenryn joined
[02:35] *** nbrown left
[02:36] <dalek> rakudo/nom: ea76dc6 | (Brad Gilbert)++ | src/core/Int.pm:

[02:36] <dalek> rakudo/nom: Add Range coercers for int1 and uint1

[02:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ea76dc678c

[02:36] <dalek> rakudo/nom: 6c577d2 | colomon++ | src/core/Int.pm:

[02:36] <dalek> rakudo/nom: Merge pull request #312 from b2gills/nom

[02:36] <dalek> rakudo/nom: 

[02:36] <dalek> rakudo/nom: Add Range coercers for int1 and uint1

[02:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6c577d2db0

[02:37] *** nbrown joined
[02:39] *** noganex_ joined
[02:42] *** nbrown left
[02:42] *** noganex left
[02:48] *** colomon left
[02:51] *** molaf joined
[03:09] *** colomon joined
[03:10] * colomon is really impressed at the travis-ci vetting pull requests.  

[03:12] *** aborazmeh left
[03:14] <skids> Is that recent for perl6 project repos?

[03:18] <colomon> skids: just this week, I think.

[03:18] <colomon> definitely this month

[03:18] <skids> I wonder if it's possible to nudge it for old requests.

[03:20] <colomon> I dunno.

[03:21] <skids> I'm not seeing any buttons to that effect, at least.

[03:22] <colomon> yeah, and the open pull request I'm looking at that has it appears to postdate the travis-ci integration.

[03:22] <colomon> Still, that's a wonderful piece of functionality for simple merges.

[03:22] <colomon> the merge looked correct to me, and travis-ci told me it built correctly, so I didn't have to check that.  that's sweet.

[03:23] <skids> Especially with the build times here :-)

[03:23] * colomon needs to apologize to ab5tract for still not having sat down and looked over his pull request.

[03:26] *** dwarring left
[03:30] *** molaf left
[03:33] *** nbrown joined
[03:38] *** dayangkun left
[03:42] *** nbrown left
[03:46] *** telex left
[03:46] *** nbrown joined
[03:48] *** telex joined
[03:50] *** nbrown left
[03:57] *** yeahnoob left
[03:57] *** raiph joined
[03:58] *** yeahnoob joined
[04:00] *** [Sno] left
[04:00] *** chenryn left
[04:01] *** chenryn joined
[04:04] *** [Sno] joined
[04:05] *** kaare_ joined
[04:11] *** xenoterracide_ left
[04:19] *** [Sno] left
[04:23] *** anaeem1 joined
[04:24] *** anaeem1 left
[04:25] *** anaeem1 joined
[04:41] *** anaeem1 left
[04:42] *** anaeem1 joined
[04:47] *** nbrown joined
[04:51] *** nbrown left
[04:52] *** kaare_ left
[04:56] *** SamuraiJack joined
[04:56] *** kaleem joined
[04:59] *** WalkingWatermelo joined
[04:59] *** SamuraiJack_ joined
[05:01] *** SamuraiJack left
[05:01] *** SamuraiJack__ joined
[05:03] *** SamuraiJack__ left
[05:03] *** SamuraiJack__ joined
[05:04] *** SamuraiJack_ left
[05:04] *** chenryn left
[05:05] *** SamuraiJack joined
[05:06] *** SamuraiJack left
[05:06] *** ifim left
[05:07] *** anaeem1 left
[05:07] *** anaeem1 joined
[05:08] *** SamuraiJack__ left
[05:09] *** dayangkun joined
[05:14] *** anaeem1 left
[05:15] *** anaeem1 joined
[05:16] *** anaeem1 left
[05:16] *** anaeem1 joined
[05:17] *** anaeem1 left
[05:17] *** BenGoldberg left
[05:17] *** anaeem1_ joined
[05:18] *** chenryn joined
[05:18] *** kaare_ joined
[05:20] *** WalkingWatermelo left
[05:20] <raiph> .ask lizmat what's your P6ian take on the matters raised in http://www.reddit.com/r/perl/comments/2h1z7i/i_do_not_want_to_use_any_modules/ckoshwx ?

[05:20] <yoleaux> raiph: I'll pass your message to lizmat.

[05:22] *** anaeem1__ joined
[05:22] *** anaeem1__ left
[05:24] *** anaeem1_ left
[05:24] *** anaeem1 joined
[05:24] *** anaeem1 left
[05:25] *** anaeem1_ joined
[05:28] *** anaeem1__ joined
[05:28] *** FROGGS__ left
[05:29] *** yeahnoob left
[05:31] *** anaeem1_ left
[05:42] *** yeahnoob joined
[05:45] *** anaeem1__ left
[05:45] *** anaeem1 joined
[05:46] *** MikeFair left
[05:47] *** nbrown joined
[05:48] *** anaeem___ joined
[05:49] *** mr-foobar joined
[05:51] *** anaeem1 left
[05:51] *** [Sno] joined
[05:52] *** nbrown left
[05:59] *** dayangkun left
[06:18] *** raiph left
[06:22] *** xinming_ left
[06:22] *** xinming joined
[06:24] <sergot> o/

[06:25] *** yeahnoob left
[06:26] *** baest joined
[06:46] *** darutoko joined
[06:48] *** nbrown joined
[06:53] *** nbrown left
[07:06] *** dayangkun joined
[07:07] *** _slade_ left
[07:08] *** zakharyas joined
[07:09] *** virtualsue joined
[07:12] *** dayangkun left
[07:12] *** brrt joined
[07:13] *** eupcan277_y_h_h_ joined
[07:24] *** fhelmberger joined
[07:31] *** FROGGS joined
[07:41] *** brrt left
[07:47] *** jerrycheung joined
[07:49] *** brrt joined
[07:49] *** nbrown joined
[07:53] *** nbrown left
[07:57] *** brrt left
[08:05] *** virtualsue left
[08:05] *** denis_boyun joined
[08:06] *** ifim joined
[08:09] *** brrt joined
[08:11] *** denis_boyun_ joined
[08:11] *** denis_boyun left
[08:13] *** denis_boyun_ left
[08:13] *** denis_boyun joined
[08:16] *** denis_boyun_ joined
[08:18] *** denis_boyun left
[08:18] *** brrt left
[08:21] *** denis_boyun joined
[08:22] *** denis_boyun_ left
[08:26] *** denis_boyun left
[08:32] *** denis_boyun joined
[08:36] *** denis_boyun left
[08:37] *** kjs_ joined
[08:42] *** eupcan277_y_h_h_ left
[08:50] *** nbrown joined
[08:52] *** denis_boyun joined
[08:54] *** nbrown left
[08:58] *** Ven joined
[08:58] <Ven> o/

[08:59] *** jerrycheung left
[09:02] *** rlilja is now known as Larry_the_cow

[09:07] *** denis_boyun left
[09:08] <tadzik> sweet, gsoc tshirts are green :)

[09:09] <timotimo> "green summer of code"

[09:09] *** virtualsue joined
[09:20] *** kjs_ left
[09:21] *** kjs_ joined
[09:25] <lizmat_> good *, #perl6!

[09:25] *** lizmat_ is now known as lizmat

[09:26] <Ven> \o, lizmat 

[09:26] <lizmat> you were saying raiph?

[09:26] <yoleaux> 05:20Z <raiph> lizmat: what's your P6ian take on the matters raised in http://www.reddit.com/r/perl/comments/2h1z7i/i_do_not_want_to_use_any_modules/ckoshwx ?

[09:27] <lizmat> .tell raiph please read up on S11:01 and S22:01: basically each CompUnitRepo is responsible for its own installation management

[09:27] <synopsebot> Link: http://perlcabal.org/syn/S11.html#line_01

[09:27] <yoleaux> lizmat: I'll pass your message to raiph.

[09:27] <lizmat> .tell raiph in Perl 6, there is no global distribution management

[09:27] <yoleaux> lizmat: I'll pass your message to raiph.

[09:28] <lizmat> .tell raiph anybody can write their own distribution manager (CompUnitRepo) as long as it adheres to the specced API

[09:28] <yoleaux> lizmat: I'll pass your message to raiph.

[09:28] *** dakkar joined
[09:34] *** tinyblak joined
[09:44] <dalek> rakudo/nom: 171fbe1 | (Elizabeth Mattijsen)++ | src/core/Int.pm:

[09:44] <dalek> rakudo/nom: Eh, and what about (u)int2 and (u)int4 ?

[09:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/171fbe1963

[09:48] *** kjs_ left
[09:50] *** kjs_ joined
[09:51] <dalek> rakudo/nom: 416969d | (Elizabeth Mattijsen)++ | src/core/Int.pm:

[09:51] <dalek> rakudo/nom: Auto-sense 32/64 bitness

[09:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/416969da12

[09:51] *** nbrown joined
[09:55] *** nbrown left
[10:11] *** jerrycheung joined
[10:15] *** tinyblak left
[10:18] <dalek> specs: 347fa05 | (Elizabeth Mattijsen)++ | S16-io-OLD.pod:

[10:18] <dalek> specs: Move current S16 to OLD version, for reference

[10:18] <dalek> specs: review: https://github.com/perl6/specs/commit/347fa0587b

[10:25] <timotimo> a complete IO overhaul? :3

[10:25] <carlin> is the result of CompUnit.precomp-path supposed to be a Str, or should it be a Path?

[10:26] <FROGGS> timotimo: to catch stats etc

[10:27] <lizmat> carlin: good question, I'm still in 2 minds about that

[10:28] <lizmat> if .IO returns an IO::Path, then I feel in general we should be dealing with filenames as Str

[10:28] <lizmat> only if we really want to do someting IOy with them, should we turn them into IO::Path

[10:28] <lizmat> the creation / handling of IO::Path / IO::Handle is *very* expensive at the moment

[10:30] *** xinming left
[10:30] <Woodi_> hallo #perl6 :)

[10:31] <lizmat> and a source of slowness in things like File::Find and looking up modules with 'use'

[10:31] *** xinming joined
[10:32] <lizmat> Woodi_o/

[10:33] <Woodi_> is _object_ Path realy needed ? what methods it have ? .traverse ? paths/filename are common in todays OSes and having object just to call accesors to get string is costly...

[10:34] <Woodi_> maybe some api could be build around paths being strings ?

[10:34] <Woodi_> handlers are (probably) other thing...

[10:35] <lizmat> Woodi_: that's IO::Spec and its submodules

[10:35] <lizmat> and mostly implemented

[10:35] <Woodi_> ah, interOSness...

[10:40] <Woodi_> btw. I think p5erlers and v5 should got more credits here... after all Perl5 is the Real Thing atm.

[10:41] *** kurahaupo_ joined
[10:41] <lizmat> where's here ?

[10:43] <Woodi_> #perl6 @ freenet... but from "team" perspective is probably inevitable to have a bit "we are better!" thinking :)

[10:44] *** Ven left
[10:44] <Woodi_> but maybe this is military approach :) maybe ideal one is better...

[10:45] <lizmat> Woodi_: you mean #perl6 at freenode?

[10:45] <lizmat> as in here ?

[10:45] <Woodi_> yes... why ?

[10:45] <timotimo> do you read the channel much? :)

[10:46] <Woodi_> hmm, yes.

[10:46] <timotimo> the reaction to Inline::Perl5 has been very positive

[10:46] <timotimo> and enthusiastic

[10:46] <Woodi_> I mean in general...

[10:47] * lizmat wishes that Perl6 got only 10% of credits it gets on P5 channels, of the credits that Perl 5 gets on P6 channels

[10:47] *** cognome left
[10:47] <lizmat> that would be a start

[10:47] <timotimo> lizmat: FWIW, i'm 100% anti perl5! it has so many warts! :P

[10:48] <Woodi_> I don't think something could really replace /usr/bin/perl5

[10:48] <Juerd> I would rather see that both communities would stop bitching at the other one all together.

[10:48] *** tinyblak joined
[10:48] <lizmat> Juerd++

[10:48] *** kjs_ left
[10:50] <Woodi_> in longterm perl6 is only one possible continuation of perl5...

[10:50] *** kjs_ joined
[10:50] <Juerd> (And I would still love to see Perl 6 renamed to something non-Perl, because that would most clearly show that the two projects are intended to live side by side, but apparently it's still Perl 6's intention to eventually replace Perl 5.)

[10:51] <nwc10> I don't think it matters what anyone's intentions are - CPUs are going ever more multicore, and Perl 5 doesn't handle multicore elegantly

[10:51] <Juerd> Woodi_: Why would that be? Perl 5 has clearly shown a lot of development in recent years.

[10:51] <Woodi_> Juerd: Pascal was renamed to Modula or something other what wasn't realy successfull...

[10:51] *** nbrown joined
[10:52] <Juerd> Woodi_: Are you saying that because one project didn't succeed, their entire approach is invalid?

[10:52] <Woodi_> Juerd: I hear developing internals of Perl5 is hard

[10:52] <BinGOs> I am forever mistyping perl as 'perk' you can have that one for free.

[10:52] <Juerd> I hear that too, but I still do see that some people manage to do this hard thing anyway.

[10:53] <Woodi_> I think perl5 is in awk-like position. w3 ppls comes and goes :)

[10:53] <Juerd> nwc10: Another trend is towards less powerful (mostly ARM) CPUs with few cores, for very specific tasks. Most of the existing programming languages and compilers are perfectly suited for that.

[10:55] <Woodi_> Juerd: also there are 100GHz CPUs coming into data centers :)

[10:55] <timotimo> ... 100 GHz?!

[10:55] <nwc10> Juerd: I'm not certain about "perfectly" - if you're going small, then a compiled language is going to use even less resources than an interpreted language

[10:55] <timotimo> perlfectly!

[10:56] *** nbrown left
[10:56] <nwc10> but yes, fair point, for single threading, anything existing is still as good as it was last week

[10:56] <Woodi_> timotimo: fluid nitrogen, etc :) don't do that in basement (yet) ;)

[10:56] <tadzik> http://images.rapgenius.com/0040b864f9748f223bff66b883ec270c.480x360x1.jpg

[10:59] <Juerd> nwc10: For Raspberry Pi-like systems, and many OpenWRT devices, Perl is great. You don't necessarily need stuff to be compiled.

[11:00] <Juerd> Perl 5, that is.

[11:00] <Juerd> For now, I wouldn't even try Perl 6 on a weak CPU :)

[11:03] *** leont joined
[11:03] <nwc10> anyway, yes, developing the Perl 5 core is *hard*. I do not forsee that it is sustainable on the 10+ year timescale on a volunteer basis.

[11:03] <nwc10> the number of people with the intersection of time, relevant skills and motivation continues to shrink

[11:07] <Woodi_> nwc10: what about some refactoring ?

[11:07] <Woodi_> some thing pushed into module space ?

[11:07] <nwc10> Woodi_: everything obvious and practical has been done.

[11:07] *** prevost joined
[11:07] <nwc10> Woodi_: also, do you know who I am, and why I'm competant to say this?

[11:08] <tadzik> :)

[11:08] <Woodi_> you are some dev, that I know

[11:08] <nwc10> I am the second largest contributor ever to the Perl 5 core by several metrics.

[11:08] <tadzik> you have a talent for understatement

[11:08] <lizmat> Woodi_: nwc10 *was* one of the few people with the intersection of time, relevant skills and motivation

[11:08] <nwc10> and, I have been wrestling with the problem of "how do we sustain things" for about 10 years

[11:09] <nwc10> so, if it's *obvious*, for any level of obvious, it's probably already been attempted or considered and figured unworkable

[11:10] <Woodi_> nwc10: I belive you but have problems with imagining :)

[11:11] <nwc10> this isn't meant to mean "please go away". It's meant to mean "unless you have some very good insight into the particular problems of a gnarly 25 year old C codebase which no-one really understands, with a massive number of variably-grumpy downstream dependencies, I fear that you likely can't actually suggest anything that will help"

[11:12] <nwc10> er, not dependencies. dependents. I think. Users, in the "building stuff on top of it" sense

[11:12] <nwc10> it's roughly as hard as the stuff that jnthn is doing on MoarVM, that no-one else seems to volunteer to help him with.

[11:13] <Woodi_> nwc10: I know that, no offence taken. but I just ask :)

[11:14] <Woodi_> and that is what I mean by awk-like fate... Perl5 will stay compatible with 25 years old scripts or some thing must be cut from the core...

[11:15] <Woodi_> I started to unix in nawk era...

[11:21] <Woodi_> nwc10: so maybe you can answer my question/surprise... around 2 years ago I hear perl5 have virtual machine... how old that vm is ? from v5beta or v3 or v4 maybe ?

[11:22] <nwc10> the VM for Perl 5 effectively dates from 5.000 (well, the alpha), but in turn that codebase is a rewrite of Perl 4, which was derived from Perl 2, which was derived from Perl 1

[11:23] *** skids left
[11:24] *** camelia left
[11:25] <Woodi_> ah, so vm is there by design... so in 80s vm was already used in compilers...

[11:27] * Woodi_ is happy Java wasn't first ;)

[11:31] <lizmat> jnthn, timotimo: "$*CWD is specific to the current thread"  do you think that is even feasible ?

[11:32] <lizmat> feels like a fossil from the days where we only could think of using threads for asynchronous operations

[11:32] <lizmat> with reactive programming (as in Supplies) we don't even know on which thread something is executing

[11:32] *** camelia joined
[11:33] <timotimo> lizmat: don't we do evil tricks with $*CWD anyway?

[11:33] *** oetiker joined
[11:34] *** ChanServ sets mode: +v camelia

[11:34] <timotimo> using CWD for any non-trivial application is folly IMO

[11:34] *** LLamaRider joined
[11:34] <lizmat> my feeling as well...

[11:34] <kurahaupo_> Woodi_: the UCSD p-Machine was a portable compiled Pascal from the early '80s

[11:35] * lizmat scratches the threadness scope of $*CWD in the spec

[11:35] <LLamaRider> Can anyone tell me what is the incantation for a "Most Optimized" perl6 run? I am running the jit-enabled experimental moarvm setup

[11:36] <LLamaRider> but this still takes 14 seconds on my machine:

[11:36] <LLamaRider> time perl6 --optimize=3 -e ' for (1..50_000_000) {} ;'

[11:37] <LLamaRider> oh!

[11:37] <LLamaRider> masak kept telling me some time back that perl6 loves spaces

[11:37] <LLamaRider> time perl6 --optimize=3 -e ' for (1 .. 50_000_000) {} ;'

[11:37] <LLamaRider> this meets perl5 speeds, 1.2 seconds

[11:37] <LLamaRider> I retract my question

[11:37] <LLamaRider> (though I wonder what the previous version did)

[11:38] <Woodi_> kurahaupo_: my language crafting _idea_ was still at flex/bison level, read, translate, save, execute ;)

[11:40] <lizmat> LLamaRider: slightly faster version:

[11:40] <lizmat> $ time perl6 --optimize=3 -e 'my int $a; while ($a = $a + 1) <= 50_000_000 {}'

[11:40] <lizmat> real	0m0.394s

[11:40] <lizmat> we're still working on automagically optimizing your version to the above version

[11:41] <LLamaRider> lizmat++ thanks for letting me know, glad to hear it is in the making :)

[11:41] <LLamaRider> Then --optimize=3 is what I need to remember

[11:41] <timotimo> LLamaRider: superstitious parenthesis

[11:41] <nwc10> http://en.wikipedia.org/wiki/Z-machine -- virtual machine from 1979

[11:41] *** jerrycheung left
[11:41] <timotimo> LLamaRider: if you remove the parenthesis it should already generate the version lizmat pasted

[11:41] <lizmat> LLamaRider: I think --optimize=3 is default

[11:42] <timotimo> no, --optimize=2 is default, --optimize=3 is the default for the core setting only

[11:42] <lizmat> timotimo: it doesn't (anymore, anyway)

[11:42] <timotimo> oh? it broke?

[11:42] <timotimo> maybe i can look into that today

[11:42] <timotimo> i have to AFK now, though

[11:42] <lizmat> $  time perl6 --optimize=3 -e 'for 1 .. 50_000_000 {}'

[11:42] <lizmat> real	0m12.706s

[11:42] <lizmat> timotimo: ^^^

[11:43] <timotimo> what.

[11:43] <timotimo> that's bad.

[11:45] <LLamaRider> yep, that is exactly my experience

[11:45] <LLamaRider> but it's great to hear there is a plan to move forward

[11:45] <lizmat> FWIW, I think the empty while benchmark is *faster* than Perl 5

[11:45] <LLamaRider> I was excited to learn that runtime optimizations are getting attention, that could bring some excellent publicity

[11:46] <LLamaRider> lizmat: faster than P5 is awesome ^^

[11:46] <lizmat> LLamaRider: you might also want to check http://jnthn.net/papers/2014-yapceu-performance.pdf

[11:47] <lizmat> alas, the associated video is still not up  :-(

[11:47] <LLamaRider> lizmat: that very presentation brought me here, saw it mentioned on HackerNews

[11:47] <lizmat> ah, ok  :-)

[11:49] *** mr-foobar left
[11:51] <dalek> Inline-Perl5: 9b91f7e | Carlin++ | lib/Inline/Perl5.pm6:

[11:51] <dalek> Inline-Perl5: add fallback at BEGIN time to avoid precomp issues

[11:51] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/9b91f7eb45

[11:51] <dalek> Inline-Perl5: 672ea14 | Carlin++ | t/ (3 files):

[11:51] <dalek> Inline-Perl5: test precompilation

[11:51] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/672ea14d17

[11:51] <dalek> Inline-Perl5: e27abfb | niner++ | / (4 files):

[11:51] <dalek> Inline-Perl5: Merge pull request #6 from carbin/witty-branchname-goes-here

[11:51] <dalek> Inline-Perl5: 

[11:51] <dalek> Inline-Perl5: add fallback at BEGIN time to avoid precomp issues

[11:51] <dalek> Inline-Perl5: 

[11:51] <dalek> Inline-Perl5: Many thanks to carbin++ for fixing this!

[11:51] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/e27abfb845

[11:52] *** nbrown joined
[11:56] *** tinyblak left
[11:56] *** nbrown left
[12:00] *** denis_boyun joined
[12:00] * Woodi_ wonders what is a chance a GLR(efactor) will ends with a rewrite of some size ;) 

[12:03] *** mr-foobar joined
[12:03] <lizmat> Woodi_: if I read your line right, I would say 98%

[12:04] <lizmat> it's not the Great... for nothing  :-)

[12:05] <FROGGS> though, it won't affect user code me thinks

[12:05] <FROGGS> at least not directly

[12:06] *** chenryn left
[12:06] <Woodi_> lizmat: part of me likes idea of next rewrite but other part is in frozing hate state (becouse of time it will take)...

[12:06] *** pmurias joined
[12:06] *** mr-foobar left
[12:07] <lizmat> well, it's one of those parts of "first make it work, then make it fast"

[12:09] *** tinyblak joined
[12:09] *** bjz joined
[12:12] <leont> Is there a way to dynamically add methods?

[12:12] <leont> Well, I bet there is, but I can't find any docs for the mop

[12:12] <Woodi_> FROGGS: I wonder if some science things was invented during Perl6 development. or just applications of known theorems and wide borrowing. but if things are invented here then something could be invented during GLR :) what means: we break APIs/user visibility/code trees :)

[12:13] <Woodi_> leont: probably there are few ways ;)

[12:13] <lizmat> leont: dynamically adding methods is a bad idea from an optimization point of view

[12:13] <lizmat> however, you *can* add roles dynamically to instantiated objects

[12:13] <Woodi_> and monkey patch things ?

[12:13] <leont> Possibly my own classhow is an option, or a trait on some of the methods. Hmmmm

[12:14] <lizmat> m: my $a = 0 but True; say $a; say ?$a

[12:14] <camelia> rakudo-moar 416969: OUTPUT«0␤True␤»

[12:15] <leont> I need to add not_foo methods to many but not all of my methods.

[12:15] *** tinyblak left
[12:15] <FROGGS> leont: grep for add_method in rakudo/src

[12:15] <lizmat> Woodi_: monkey patching is also not a good idea from an optimization point of view, but yes, that's an option (and implemented mostly as well)

[12:15] <leont> I suspect a negatable trait may be cleanest

[12:15] <pmurias> nwc10: from the my perspective it seems that it's a lot hard to start contributing to perl 5 then perl 6. It seems that most of the things that need doing are either very subtle tweaks or very hard things (that there is no consensous how to proceed on)

[12:16] <pmurias> s/from the/from/

[12:16] <pmurias> * harder

[12:16] <FROGGS> pmurias: sure, we'd have the same problems if we had that many written lines of code

[12:17] <lizmat> m: my $a = 0 but True; say $a; say ?$a; say $a.WHAT  # see the mixed in role

[12:17] <camelia> rakudo-moar 416969: OUTPUT«0␤True␤(Int+{<anon>})␤»

[12:17] *** jerrycheung joined
[12:25] <Woodi_> m: class MyClass {}; my $m = "newmeth"; MyClass.HOW.add_method( MyClass, $m, method() { say "New!"; } );

[12:25] <camelia> rakudo-moar 416969: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/rGO2J01AYL␤Unable to parse expression in argument list; couldn't find final ')' ␤at /tmp/rGO2J01AYL:1␤------> [32ms.HOW.add_method( MyClass, $m, method() [33m⏏[31m{ say "New!"; } );[0m…»

[12:29] *** kjs_ left
[12:33] <PerlJam> Woodi_: oh the difference a space makes.

[12:34] *** pmurias left
[12:35] *** kjs_ joined
[12:35] *** ggoebel2 joined
[12:36] <lizmat> Woodi_: it is imaginable that the GLR will be post 6.0.0

[12:37] <lizmat> although I would personally like to see it pre 6.0.0

[12:37] * PerlJam t oo

[12:37] *** ggoebel left
[12:40] <PerlJam> though, I also hope that this christmas will be *the* christmas for Perl 6.  :)

[12:41] <lizmat> working hard on that  :-)

[12:43] *** kjs_ left
[12:43] <Woodi_> m: class MyClass {}; my $m = "newmeth"; MyClass.HOW.add_method( MyClass, $m, method () { say "New!"; } ); MyClass.newmeth;

[12:43] <camelia> rakudo-moar 416969: OUTPUT«New!␤»

[12:44] <PerlJam> Woodi_: though, also note ... 

[12:44] <PerlJam> m: class MyClass {}; my $m = "newmeth"; MyClass.HOW.add_method( MyClass, $m, method () { say "New!"; } );  say MyClass.^methods

[12:44] <camelia> rakudo-moar 416969: OUTPUT«<anon>␤»

[12:46] <Woodi_> PerlJam: just black unknowledge for me... should be at least one listed...

[12:47] *** kjs_ joined
[12:47] <PerlJam> aye, the method is there, it's just anonymous.  It doesn't get the name "newmeth"    

[12:47] <PerlJam> I'm not sure if that's really a bug or not though.

[12:48] *** kjs_ left
[12:50] <PerlJam> (though, it may explain why there are so many <anon> in something like Routine.^methods )

[12:51] <Woodi_> p: class MyClass {}; my $m = "newmeth"; MyClass.HOW.add_method( MyClass, $m, method ( $p ) { say $p; } ); MyClass.newmeth;

[12:51] <camelia> rakudo-parrot 416969: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in method <anon> at /tmp/IAHchOyX8N:1␤  in block <unit> at /tmp/IAHchOyX8N:1␤␤»

[12:53] *** nbrown joined
[12:53] <Woodi_> p: class MyClass {}; my $m = "newmeth"; MyClass.HOW.add_method( MyClass, $m, method ( *@p ) { say @p.shift; } ); MyClass.newmeth;

[12:53] <camelia> rakudo-parrot 416969: OUTPUT«Element shifted from empty list␤  in method gist at gen/parrot/CORE.setting:13567␤  in method gist at gen/parrot/CORE.setting:1142␤  in sub say at gen/parrot/CORE.setting:15327␤  in sub say at gen/parrot/CORE.setting:15323␤  in method <anon> at…»

[12:53] <Woodi_> p: class MyClass {}; my $m = "newmeth"; MyClass.HOW.add_method( MyClass, $m, method ( *@p ) { say @p.shift; } ); MyClass.newmeth( "ABC!");

[12:53] <camelia> rakudo-parrot 416969: OUTPUT«ABC!␤»

[12:53] <Woodi_> m: class MyClass {}; my $m = "newmeth"; MyClass.HOW.add_method( MyClass, $m, method ( *@p ) { say @p.shift; } ); MyClass.newmeth( "ABC!");

[12:53] <camelia> rakudo-moar 416969: OUTPUT«ABC!␤»

[12:55] <Woodi_> so $p don't work, @p's works ;) old good Perl ;)

[12:55] *** anaeem___ left
[12:55] <PerlJam> Woodi_: eh?

[12:57] <Woodi_> like: sub doabc { my @_ = shift; ... } # :)

[12:57] *** nbrown left
[12:58] <Woodi_> btw. I always know Moose is troyan horse ;) thanx to it now Perl6 is declarative production ready :)

[12:59] *** kaleem left
[13:00] <PerlJam> Woodi_: I think you've got that backwards.

[13:00] <nwc10> pmurias: I don't think that it's just from your position. I think that it's a general problem for anyone/everyone. And hence thanks for adding something that I'd missed

[13:01] <Woodi_> PerlJam: I just strongly don't like Moose...

[13:03] *** kaleem joined
[13:04] * leont is trying «method foo is bar {}», but that gives errors :-/ 

[13:04] <lizmat> "is" only works on classes, not methods?

[13:06] <leont> Is there a way to have traits on methods?

[13:06] <leont> A bit like sub attributes in p5

[13:08] <PerlJam> sure.

[13:08] <lizmat> multi trait_mod:<is>(Method:D $m, :$traitname) {

[13:08] <PerlJam> what lizmat said

[13:09] <lizmat> leont: note that the *name* of the named variable, is the name of the trait

[13:09] <lizmat> so the above would create a "traitname" trait

[13:10] <ribasushi> nwc10: FC is catching up fast though :)

[13:11] <nwc10> ribasushi: According to ohloh, he has a way to go: https://www.openhub.net/p/perl/contributors/summary

[13:13] <ribasushi> nwc10: I am looking at `git shortlog -e -s -n` on blead - know off the top of your head why the massive mismatch?

[13:14] <ribasushi> ahhhhh

[13:14] <ribasushi> nwc10: ohloh does *not* deduplicate commits

[13:15] <ribasushi> so it counts every single entry on every single "repo" as unique: https://www.openhub.net/p/perl/enlistments

[13:15] <ribasushi> (this is offtopic for p6, sorry ;)

[13:15] <lizmat> https://www.openhub.net/p/rakudo/contributors/summary  # would be more on topic :-)

[13:16] <PerlJam> ribasushi: Just say that you're writing a P6 program that parses git output or something  ;)

[13:17] *** kaare_ left
[13:17] <FROGGS> ribasushi: say it! :P

[13:17] *** ifim left
[13:17] <ribasushi> I... I ... am holding the fort instead! ;)

[13:18] <leont> I'm trying to get the Class a method is in from the Method object, but .package doesn't DWIM

[13:18] *** mr-foobar joined
[13:19] *** guru joined
[13:19] *** guru is now known as Guest66328

[13:19] <lizmat> leont: code ?

[13:20] *** Guest66328 is now known as ajr_

[13:20] * PerlJam wonders what .package does instead

[13:21] <leont> http://paste.scsys.co.uk/424950

[13:25] *** jerrycheung left
[13:26] <lizmat> leont: .WHAT works fine for me?

[13:28] <leont> .WHAT on what?

[13:28] <lizmat> $method ?

[13:29] <lizmat> you can use the $method object for wrapping e.g.

[13:29] <PerlJam> That'll give (Method) won't it?  ($method.WHAT)

[13:29] <leont> I don't that Method, I want the Path::Iterator

[13:30] <lizmat> leont: the trait code is called at *compile* time, there is no Path::Iterator then yet

[13:30] <leont> Hmmmm, that explains

[13:31] <lizmat> see e.g. the implementation of "is cached" in src/core/Routine

[13:35] <gtodd> hmm 

[13:36] * gtodd builds new perl6 for moarvm rebootstraps panda and installs Inline::Perl6 and ...

[13:36] <gtodd> Unhandled exception: Cannot locate native library '/home/gtodd/perl6/languages/perl6/site/lib/Inline/p5helper.so

[13:36] <gtodd> but the lib is there

[13:37] *** kurahaupo_ left
[13:37] <leont> I guess I'll end up with a FALLBACK :-/

[13:37] *** ajr_ left
[13:38] *** ajr joined
[13:39] *** ajr is now known as Guest52274

[13:39] *** Guest52274 is now known as ajr_

[13:40] <lizmat> leont: FALLBACK is NYI, but ^add_fallback should work

[13:41] <lizmat> nine has experience with that because of Inline::Perl5

[13:43] <gtodd> arg Inline::Perl5 was working so well I was getting addicted to it 

[13:43] *** ajr_ left
[13:44] <gtodd> well addicted to having fun trying to break it :-)

[13:45] *** gtodd joined
[13:45] *** gtodd left
[13:45] *** gtodd joined
[13:46] *** JimmyZ joined
[13:51] *** ajr_ joined
[13:53] *** leont left
[13:53] *** kaleem left
[13:53] *** jerrycheung joined
[13:53] *** kjs_ joined
[13:53] *** leont joined
[13:54] *** nbrown joined
[13:54] <leont> And that crashed my computer, probably death by swap :-/

[13:54] <leont> Note to self: set a lower ulimit

[13:55] *** bjz left
[13:58] *** nbrown left
[14:03] <TimToady> .botsnack

[14:03] <yoleaux> :D

[14:04] * TimToady --> Utah

[14:04] <lizmat> Utah or Bust!

[14:04] <lizmat> safe travels, TimToady!

[14:05] <jnthn> o/

[14:05] * TimToady wants to have the GLR done before Christmas

[14:05] <jnthn> TimToady: Safe travels...and rather you than me on the temperature ;?

[14:05] <jnthn> ;)

[14:05] * TimToady wants to have the GLR done last week :)

[14:05] <TimToady> it's actually quite cool at the moment

[14:06] <jnthn> TimToady: Well, for my part the good news is I'm done with China gig in a week, and the bad news is I'm taking a vacation in NZ in late Oct/early Nov. :)

[14:06] <PerlJam> TimToady: just pop in your tardis and that'll be no problem.

[14:06] <TimToady> Glo sez: car won't fit in tardis

[14:07] <jnthn> TimToady: I'm hoping to have some tenous native array stuff in place ahead of the Austria meetup, so can factor that experience into things too :)

[14:07] <jnthn> *tenuous

[14:07] <TimToady> same for GLR, but we'll see

[14:08] <TimToady> well, we'd better kick it down the road now that the sun is up...

[14:08] <TimToady> catch y'all on the flip side &

[14:08] <jnthn> o/

[14:09] <nwc10> clearly swap the car for a motorbike. They do fit in the Tardis

[14:09] <nwc10> (however, I happen to know the car is the point of this trip, not the means to the end)

[14:12] *** bjz joined
[14:20] <nine> gtodd: strange. Seems to work just fine here.

[14:20] <dalek> rakudo-star-daily: 0d12599 | coke++ | log/ (15 files):

[14:20] <dalek> rakudo-star-daily: today (automated commit)

[14:20] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/0d12599e6a

[14:20] <dalek> rakudo-star-daily: 49a40c3 | coke++ | log/ (14 files):

[14:20] <dalek> rakudo-star-daily: today (automated commit)

[14:20] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/49a40c3676

[14:20] <dalek> perl6-roast-data: 79eb77f | coke++ | / (4 files):

[14:20] <dalek> perl6-roast-data: today (automated commit)

[14:20] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/79eb77f36b

[14:22] *** treehug88 joined
[14:22] *** skids joined
[14:25] <gtodd> nine: rebuilding everything to see what's up

[14:25] *** baest_ joined
[14:28] *** baest left
[14:29] *** j4jackj joined
[14:34] *** telex left
[14:34] *** ajr_ left
[14:35] *** guru joined
[14:36] *** guru is now known as Guest61224

[14:36] <jnthn> leont: About adding methods and performance, a clarification is in order. If you do it at BEGIN time, then it's just as efficient as if they were declared in source code, pretty much. It's adding them after the class has been composed that is the issue.

[14:36] *** Guest61224 is now known as ajr_

[14:36] <j4jackj> Hi there

[14:36] *** cognome joined
[14:36] *** telex joined
[14:37] <leont> So if I use BEGIN { ::?Class.HOW.add-method(...) } I'm ok?

[14:38] <hoelzro> o/ #perl6

[14:38] <yoleaux> 21 Sep 2014 19:20Z <raiph> hoelzro: I've added a comment following up on your bug reports at https://questhub.io/realm/perl/quest/52d6b4dcf6d3292b1a00007e

[14:41] <lizmat> leont: yes, but what would be the point ?

[14:43] <leont> In method directory() is negatable {}, I want it to automatically create a not-directory method too

[14:43] *** ghostlin_ joined
[14:51] *** cognome left
[14:51] <jnthn> leont: Yes, you're good if you do it inside the class body

[14:51] <jnthn> leont: but please write an attribute trait :)

[14:51] <leont> I'm trying to do that

[14:51] <jnthn> So then it can be has $.attr is notted; or so :)

[14:52] <leont> Well, an attribute isn't really appropriate in this case

[14:52] <j4jackj> 6 or 5 for production use?

[14:53] <PerlJam> j4jackj: yes.

[14:53] <PerlJam> :-)

[14:53] <j4jackj> PerlJam: kek

[14:54] *** nbrown joined
[14:55] <jnthn> leont: https://gist.github.com/jnthn/1b3903306db8ba5c8242

[14:56] <jnthn> leont: Or a method version of it is https://gist.github.com/jnthn/acad3207544f40b72be9

[14:58] *** nbrown left
[14:58] *** SamuraiJack joined
[14:59] <jnthn> (and to be clear, trait_mod is called by the compiler at compile time, so it counts as BEGIN)

[15:00] <leont> Yeah, that much was obvious

[15:00] <jnthn> :)

[15:02] * leont has to think about how to architect all of this, posting a p5 module to p6…

[15:04] <lizmat> s/posting/porting ?

[15:05] *** molaf joined
[15:06] *** brrt joined
[15:06] *** cognome joined
[15:07] <leont> Yeah, that

[15:09] <lizmat> leont++

[15:13] *** JimmyZ left
[15:14] *** ajr_ left
[15:15] *** FROGGS left
[15:16] *** ajr joined
[15:16] *** ajr is now known as Guest8794

[15:17] *** kaare_ joined
[15:17] *** Guest8794 left
[15:17] <gtodd> nine:ok working find ....  I periodically need rm -rf  ~/perl6 :-)

[15:18] *** ajr_ joined
[15:18] <gtodd> nine: to start fresh

[15:18] *** kjs_ left
[15:18] <Woodi_> hmm, just stating "X is bad for performance" scares users becouse so many unknowns there... someday a blogpost by someone with explanation how much sub-X feature costs could unscare future users. but in this case: I have no idea what is sane usecase for runtime-MOP/reflection :)

[15:19] <jnthn> Woodi_: We're talking about MOP stuff, I think they're already scared :P

[15:20] <gtodd> hehe

[15:20] *** ajr_ left
[15:20] *** ajr__ joined
[15:20] <jnthn> The general rule, though, is that if you're doing MOP stuff not at BEGIN time, you should probably be stopping to think a bit. :)

[15:22] <gtodd> nine: hmm Inline::Perl5 was getting faster on simple little scripts I had but some just dropped from 5+ to 4 seconds ... I should rm -rf more often :)

[15:22] <brrt> jnthn: with regards to your native array stuff... what will that be like?

[15:22] <yoleaux> 19 Sep 2014 14:35Z <timotimo> brrt: when we have proper jit code production for invoking NativeCall stuff .. that could be super amazingly cool :)

[15:22] <yoleaux> 19 Sep 2014 14:36Z <timotimo> brrt: i'm not sure if that'd end up super easy because we already have the code that emits regular calls to MVM_* functions, or if it's going to be harder because we have to be converting data types back and forth?

[15:22] <dalek> specs: 083a1a2 | (Elizabeth Mattijsen)++ | S16-io.pod:

[15:22] <dalek> specs: First part of S16 rewrite

[15:22] <dalek> specs: 

[15:22] <dalek> specs: Features of IO::Spec, IO::Path and IO::Handle will follow

[15:22] <dalek> specs: review: https://github.com/perl6/specs/commit/083a1a2369

[15:23] <brrt> timotimo: yes

[15:23] <lizmat> cycling&

[15:23] <brrt> \o

[15:23] <jnthn> brrt: If I knew that, there'd be a lot more code by now ;-)

[15:23] <brrt> :-)

[15:23] <jnthn> brrt: Generally, though, I expect VMArray to evolve some, and container specs to evolve some...

[15:24] <brrt> what about 'unprotected access into a block of bytes with various size possibilities' and leave it at that?

[15:24] <jnthn> Unprotected? Urgh :)

[15:24] *** zakharyas left
[15:24] <brrt> well... if that's not what you want, i hardl;y see how you can do much better than current MVMArray

[15:25] <jnthn> What I *do* want to deal with is MVMArray's thread safety propreties

[15:25] <jnthn> Or, uh, lack thereof... :)

[15:25] <brrt> hmmmm

[15:26] <jnthn> The other bit is fixed size stuff

[15:26] <brrt> uhm, isn't it as a general rule that if you do concurrent access on an array you're just doing it wrong?

[15:26] <jnthn> But that really wants to hang off at the type level

[15:26] <jnthn> Maybe, but at the moment there are ways to Do It Wrong that crash the VM

[15:26] <jnthn> That is unacceptable.

[15:27] <leont> Great. Now it's segfaulting

[15:27] <jnthn> leont: Um...how'd you get that?

[15:28] <leont> Trying to reduce it…

[15:28] <jnthn> Or..which conversation was that part of? The trait one, or the array one? :)

[15:28] <jnthn> brrt: The important thing about fixed size is that knowing things won't get rezied ever should let us JIT much better than in the "it may get resized any time" case.

[15:28] <jnthn> *resized

[15:29] <brrt> hmmm

[15:29] <brrt> i see

[15:29] <jnthn> brrt: So somehow that wants pushing to the type level, which is the level at which we specialize.

[15:29] <brrt> that doesn't hang so easily on spesh right now

[15:29] * brrt nods

[15:30] <jnthn> Spesh is all about types, so I think hanging it off that hook is the way to head...

[15:30] <jnthn> On JITting things, though, one thing we don't do today in the JIT but we could is remove the REPR function indirections

[15:30] <jnthn> For a list_i, for example, we know which C function we're going to be calling.

[15:31] <jnthn> And could JIT a call directly to it rather than go through ->st->REPR

[15:31] <jnthn> (I'm thinking of things like at_pos here)

[15:32] <brrt> do we have a list_i instruction? or am i missing context

[15:32] <jnthn> nqp::list_i() I mean

[15:32] <jnthn> Which is a hlllist + create at MoarVM level

[15:32] <leont> jnthn: I was accidentally using self in a sub (that used to me a !method) in a BEGIN block, and it segfaults

[15:32] <jnthn> As in, we know the type, usually

[15:32] <jnthn> leont: Urgh.

[15:32] <brrt> ah i see

[15:32] <jnthn> m: sub foo() { BEGIN say self }

[15:33] <camelia> rakudo-moar 416969: OUTPUT«(Mu)␤[31m===[0mSORRY![31m===[0m Error while compiling /tmp/wWzjGu1Flg␤'self' used where no object is available␤at /tmp/wWzjGu1Flg:1␤------> [32msub foo() { BEGIN say [33m⏏[31mself }[0m␤    expecting any of:␤        argument list␤   …»

[15:33] <jnthn> leont: It...should not even compile a use of self in a sub...

[15:33] <brrt> yes, we can do that, at graph construction level even

[15:34] <brrt> i'd like even more to just emit a load from the specified address

[15:34] <jnthn> leont: Can you give me a little more detail, so I can reproduce it

[15:34] <leont> http://paste.scsys.co.uk/424968

[15:34] <jnthn> brrt: Yes, that's desirable and one of the things I'm pondering too

[15:35] <jnthn> std: say 'alive?'

[15:35] <camelia> std fc92e1e: OUTPUT«ok 00:01 139m␤»

[15:36] <jnthn> std: class Foo { sub x() { self } }

[15:36] <camelia> std fc92e1e: OUTPUT«[31m===[0mSORRY![31m===[0m␤'self' used where no object is available at /tmp/7zH7eXCxWr line 1:␤------> [32mclass Foo { sub x() { self[33m⏏[31m } }[0m␤Check failed␤FAILED 00:01 142m␤»

[15:36] <jnthn> m: class Foo { sub x() { self } }

[15:36] <camelia> rakudo-moar 416969: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/30bBKr0nOG␤'self' used where no object is available␤at /tmp/30bBKr0nOG:1␤------> [32mclass Foo { sub x() { [33m⏏[31mself } }[0m␤    expecting any of:␤        statement list␤       …»

[15:36] <jnthn> m: class Foo { sub x() { self }; BEGIN { say 'I get here' } }

[15:36] <camelia> rakudo-moar 416969: OUTPUT«I get here␤[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Q5r71LXyes␤'self' used where no object is available␤at /tmp/Q5r71LXyes:1␤------> [32mclass Foo { sub x() { [33m⏏[31mself }; BEGIN { say 'I get here' } }[0m␤    expecting a…»

[15:36] <jnthn> oh...it's a sorry, not a panic.

[15:37] <jnthn> So we survive long enough to run the BEGIN block despite having semantic errors that should never compile...

[15:37] <brrt> that's not possible with current MVMArray, basically because MVMArray does too much magic

[15:37] <leont> The check must happen later

[15:37] <leont> And because BEGIN, it's used before the check

[15:38] <brrt> although just implementing the MVMArray algorithm in the JIT would help

[15:38] <brrt> but that would make it 'fixed'

[15:38] <jnthn> leont: The check happens early enough, but because it can keep parsing, and it's usually helpful to present a few errors rather than dying on the first one, it just stores it up for later reporting.

[15:38] <leont> Ah, I see

[15:38] <jnthn> Plus, the VM really should not explode with SEGV

[15:39] <jnthn> nqp-m: nqp::null().foo

[15:39] <camelia> nqp-moarvm: OUTPUT«Cannot call method 'foo' on a null object␤   at /tmp/BDwYNeMDSJ:1  (<ephemeral file>:<mainline>:22)␤ from gen/moar/stage2/NQPHLL.nqp:1230  (/home/p6eval/rakudo-inst-1/languages/nqp/lib/NQPHLL.moarvm:eval:172)␤ from gen/moar/stage2/NQPHLL.nqp:1423  (/home/p6e…»

[15:39] <jnthn> nqp-m: nqp::null().HOW

[15:39] <camelia> nqp-moarvm: ( no output )

[15:39] <jnthn> nqp-m: nqp::null().HOW.say

[15:39] <camelia> nqp-moarvm: OUTPUT«Cannot find method 'say'␤   at /tmp/7wO1lHiwiv:1  (<ephemeral file>:<mainline>:24)␤ from gen/moar/stage2/NQPHLL.nqp:1230  (/home/p6eval/rakudo-inst-1/languages/nqp/lib/NQPHLL.moarvm:eval:172)␤ from gen/moar/stage2/NQPHLL.nqp:1423  (/home/p6eval/rakudo-inst-1…»

[15:39] <jnthn> hmmm

[15:40] <jnthn> hmmm

[15:40] *** kjs_ joined
[15:40] <jnthn> oops

[15:42] *** lsm-desktop joined
[15:43] <jnthn> grr, my moar build mises debug symbols...and it's really sleep time...

[15:43] *** jerrycheung left
[15:43] <jnthn> Will have a dig tomorrow

[15:43] <jnthn> But reproduced here, anyway.

[15:43] <jnthn> 'night, all

[15:46] *** ghostlin_ left
[15:50] <dalek> perl6-roast-data: d035101 | coke++ | / (4 files):

[15:50] <dalek> perl6-roast-data: today (automated commit)

[15:50] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/d035101338

[15:51] <cognome> r:  sub html($tag, $text, *%attrs) { ... };  for <div span> { sub ::($_)($_, $text, *%attrs) { html($_, |%attrs  }}

[15:52] <camelia> rakudo-jvm 416969: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[15:52] <camelia> ..rakudo-{parrot,moar} 416969: OUTPUT«===SORRY!===␤Name ::($_) is not compile-time known, and can not serve as a sub declaration␤»

[15:52] *** denis_boyun left
[15:52] <cognome> speaking of dynamically adding sub and methods, what is the proper way to do that?

[15:54] <cognome> And, related question, will CANDO  be part of 6.0.0 ?

[16:00] *** Guyel joined
[16:00] *** SamuraiJack left
[16:01] *** Guyel left
[16:02] <nine> cognome: the first one was answered just a couple hours ago. You'll find the answer easily in the backlog.

[16:03] *** nbrown joined
[16:04] *** ajr__ left
[16:05] *** guru joined
[16:05] <cognome> nine: you mean that?  http://irclog.perlgeek.de/perl6/2014-09-22#i_9393842  "So if I use BEGIN { ::?Class.HOW.add-method(...) } I'm ok? "

[16:06] *** guru is now known as Guest58481

[16:06] *** Guest58481 left
[16:07] *** ajr_ joined
[16:08] *** nbrown left
[16:10] <cognome> So, I rephrase my question, why the error message when the implementation could just call .^add_method ?  

[16:10] *** brrt left
[16:15] *** FROGGS joined
[16:20] *** eupcan277_y_h_h_ joined
[16:21] <dalek> perl6-roast-data: f8ca5dc | coke++ | bin/cull:

[16:21] <dalek> perl6-roast-data: don't report on niecza & rakudo.jvm for now

[16:21] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/f8ca5dc869

[16:21] <dalek> perl6-roast-data: d3f60e2 | coke++ | perl6_pass_rates.csv:

[16:21] <dalek> perl6-roast-data: We didn't actually run these; remove them.

[16:21] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/d3f60e2f02

[16:25] <cognome> nine++ jnthn++     jnthn gists are helpful.

[16:35] *** virtualsue left
[16:42] <[Coke]> defined(@array) is deprecated at t/spec/test_summary line 378. (Maybe you should just omit the defined()?)

[16:42] <[Coke]> A perl5 cleanup that could be done in roast.

[16:55] *** SamuraiJack joined
[16:56] *** dakkar left
[16:58] *** fhelmberger left
[16:58] *** ajr_ left
[16:59] <[Coke]> is there a way for us to tell java to NOT use multiple threads if it can avoid it?

[17:00] <[Coke]> trying to limit the resources used by rakudo.jvm on the test machine.

[17:05] *** nbrown joined
[17:09] *** nbrown left
[17:10] *** kaleem joined
[17:15] *** FROGGS[mobile] joined
[17:22] <not_itz> hmm it's stuck me perhaps Inline::Perl5 could be used to help port modules to P6 by treating already running unit tests (via Inline) as a target

[17:22] *** not_itz is now known as itz

[17:26] *** kaleem left
[17:33] *** mberends joined
[17:35] *** treehug88 left
[17:35] *** leont left
[17:38] *** kjs_ left
[17:38] *** [Sno] left
[17:48] <[Coke]> .ask diakopter - think I figured out the problem - can you up the swap space on host08 to match host07? (I can probably stumble my way through this if needed)

[17:48] <yoleaux> [Coke]: I'll pass your message to diakopter.

[17:55] <[Coke]> crap. java run gets much farther if camelia isn't also doing java things, but it looks like host08 maxed out on swap while I was looking away. trying to kill that run...

[17:56] <[Coke]> m: say 3

[17:56] *** camelia left
[17:57] *** denis_boyun_ joined
[17:57] <[Coke]> anyone here currently logged into host08?

[17:57] *** tinyblak joined
[18:05] *** spider-mario joined
[18:05] *** nbrown joined
[18:10] *** nbrown left
[18:17] <gtodd> [Coke]: N of jvm threads get limited at OS level no? i.e. not with JVM. invocation ?   I think those -X options are for size but not number

[18:17] <gtodd> so maybe you have to tweak some ulimit or sysctl thing

[18:20] *** eupcan277_y_h_h_ left
[18:21] <[Coke]> IME, using ulimit without configuring java just causes java to die when it exceeds the limits.

[18:21] *** guru joined
[18:21] *** guru is now known as ajr_

[18:21] <[Coke]> I can't get into host08. Presumably the very low memory conditions will explode at some point. I imagine it's swapping to death right now.

[18:22] <gtodd> there's java service runner things (written in java) that somehow supervise how java with "threadpools" but I know nothing ... only what I needed to know to run tomcat :-)

[18:23] *** molaf_ joined
[18:23] *** beastd joined
[18:24] *** eupcan277_y joined
[18:25] *** SamuraiJack left
[18:25] *** SamuraiJack_ joined
[18:25] *** molaf left
[18:31] *** ghostlin_ joined
[18:37] *** eupcan277_y left
[18:40] <[Coke]> playing with the perl 6 msi installer. the error message highlighting seems off.

[18:42] <[Coke]> http://gist.github.com/anonymous/df7936cd5cd09dc5a343

[18:44] <vendethiel> [Coke]: windows highlighting ;)

[18:45] *** Ven joined
[18:48] *** eupcan277_y_t joined
[18:54] *** kjs_ joined
[18:55] <gtodd> (13:54:37) camelia left the room ...

[18:55] <gtodd> ??!

[18:55] *** zakharyas joined
[18:56] <ingy> vendethiel: you mentioned liquid type and some other typing. remember which?

[18:56] <vendethiel> ingy: refinement types

[18:56] *** virtualsue joined
[18:56] * ingy reads up

[18:56] <lizmat> gtodd: host08 in trouble again

[18:56] <[Coke]> host08 (camelia's host) is pretty dead; I can't login to kill anything.

[18:56] <vendethiel> that's the name of the typing system liquid haskell uses :)

[18:57] <ingy> refinement is?

[18:58] <Ven> sub-properties of types

[18:58] <Ven> like perl6's `where`s

[19:01] *** [Sno] joined
[19:01] *** pmqs_ joined
[19:01] <nine> itz: sounds like a good idea

[19:02] *** darutoko left
[19:04] *** kjs_ left
[19:04] *** pmqs_ is now known as pmqs

[19:04] *** eupcan277_y_t left
[19:06] <gtodd> nine: with Inline::Perl5 and v5 etc. can one easily set up an isolated "local::lib" of perl5 modules ... 

[19:06] *** nbrown joined
[19:09] <nine> Coke: would access to a machine with ~ 7GiB of free RAM and 8 cores help you in some way?

[19:10] *** nbrown left
[19:14] *** camelia joined
[19:14] *** brrt joined
[19:14] <dalek> rakudo/nom: 4e88d9d | (Elizabeth Mattijsen)++ | src/core/CompUnit.pm:

[19:14] <dalek> rakudo/nom: Simplify CompUnit construction

[19:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4e88d9d082

[19:15] <camelia> rakudo-moar 416969: OUTPUT«3␤»

[19:15] *** ChanServ sets mode: +v camelia

[19:16] *** Ven left
[19:16] <gtodd> nine:  with -I  or does/will I::P5 grab things from my env (e.g. PERL5LIB) one day  ?

[19:17] *** kjs_ joined
[19:17] *** denis_boyun_ left
[19:18] <nine> gtodd: Inline::Perl5 should already behave like plain old perl. I know it supports PERL5LIB for example.

[19:20] <gtodd> hmm ok trying to make a PP directory where I can stick known "works with I::P5" modules ...

[19:20] <brrt> .tell jnthn that my interest in 'native' arrays is really cheap JIT access, and that i'd personally hapilly sacrifice safety for that

[19:20] <yoleaux> brrt: I'll pass your message to jnthn.

[19:21] <nine> gtodd: if a module doesn't work with Inline::Perl5, I'd like to know. That's considered a bug.

[19:21] <brrt> .tell jnthn that i think it'll be possible to find a compromise :-)

[19:21] <yoleaux> brrt: I'll pass your message to jnthn.

[19:22] <gtodd> wow OK ... :-)  I'll be more careful then :-)

[19:23] <gtodd> nine: since I'm just trying to do stuff with oneliners -MPerl5  short scripts etc. 

[19:23] <dalek> rakudo/nom: 0412f5f | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo/Locally.pm:

[19:23] <dalek> rakudo/nom: Simplify CompUnitRepo::Locally construction

[19:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0412f5f60d

[19:26] <nine> [Coke]: would access to a machine with ~ 7GiB of free RAM and 8 cores help you in some way?

[19:28] *** brrt left
[19:30] *** bartolin joined
[19:30] *** ghostlin_ left
[19:32] <[Coke]> nine: sure, but this machine should be ok once we bubmp the swap.

[19:33] <[Coke]> stmuk?

[19:33] <nine> stmuk?

[19:34] <[Coke]> https://github.com/stmuk

[19:34] <itz> thats me

[19:36] <nine> [Coke]: well, my server is ridiculously overpowered since I only host some email, tiny websites and my jabber server there. So I'd be happy to share.

[19:36] <[Coke]> itz: thank you very much for those tests in roast. I am going to try to move them to pre-existing files at some point, just fyi.

[19:37] <[Coke]> nine: I'm happy to give it a shot. Since I'm not doing timings or anything, it's not a big deal where I run. (what OS?)

[19:37] <itz> coke: no worries .. I did wonder if they would be better like that

[19:37] <nine> [Coke]: currently openSUSE 12.3 though I should probably upgrade to 13.1 soonish.

[19:37] <[Coke]> do you know if those files got added to rakudo's t/spectest.data ?

[19:38] <dalek> nqp/dyncall-macports: 20e6be9 | rurban++ | 3rdparty/dyncall/configure:

[19:38] <dalek> nqp/dyncall-macports: on MacPorts need to enforce system /usr/bin/libtool for -static

[19:38] <dalek> nqp/dyncall-macports: 

[19:38] <dalek> nqp/dyncall-macports: error message: libtool: unrecognized option `-static

[19:38] <dalek> nqp/dyncall-macports: libtool: Try `libtool --help' for more information.

[19:38] <dalek> nqp/dyncall-macports: because on macports libtool is taken from /opt/local/bin.

[19:38] <dalek> nqp/dyncall-macports: -static is a xcode-only aberation.

[19:38] <dalek> nqp/dyncall-macports: review: https://github.com/perl6/nqp/commit/20e6be9551

[19:38] <itz> [Coke]: probably not

[19:38] <PerlJam> nine: If you start handing out accounts for Perl 6 stuff, you need to give your server a neat, Perl6ian themed name  :)

[19:43] *** eupcan277 joined
[19:45] *** Psyche^_ joined
[19:49] *** Psyche^ left
[19:52] <itz> domain squat perl6 names now and beat the coming rush :)

[19:53] *** dolmen joined
[20:07] *** nbrown joined
[20:07] *** xragnar_ joined
[20:07] *** xragnar left
[20:07] *** xragnar_ is now known as xragnar

[20:10] *** SamuraiJack_ left
[20:11] *** nbrown left
[20:11] *** _rubio_terra_ left
[20:13] <tadzik> . o O ( Deep Space Six )

[20:16] *** jepeway left
[20:18] <itz> . o O ( the Joy of Six )

[20:18] *** jepeway joined
[20:18] <huf> six six six...

[20:18] <huf> that's all you youngsters think about these days

[20:18] <vendethiel> haha

[20:20] *** eupcan277 left
[20:23] <gtodd> nine: not sure what happened since I::P5 was working fine 

[20:24] <gtodd> now I consistently get 'Unhandled exception: Cannot locate native library ' ...'   mstly likley something to do with clang vs gcc etc

[20:25] <nine> gtodd: I see I use gcc in Makefile.in. Could you try chaning that to your compiler and see if it fixes your problem?

[20:26] *** zakharyas left
[20:33] <gtodd> nine: didn't work  prove -e 'perl6 -Ilib' t

[20:33] <gtodd> t/call.t .................. Cannot locate native library 'lib/Inline/p5helper.so'  

[20:34] <gtodd> and on down the line int the tests ... I can't be sure it worked on this machine and now doesn't so ignore noise for now

[20:34] <nine> Did you compile your libperl.so with clang?

[20:34] <gtodd> yes

[20:36] <gtodd> will keep my eye oneit

[20:36] <gtodd> on it

[20:36] <nine> Compiling with the wrong compiler results in some failed tests but no 'Cannot locate' message

[20:37] <nine> Though I've seen this message many times during development when I had an error in my C code.

[20:37] <gtodd> ok

[20:38] *** Ven joined
[20:46] *** kaare_ left
[20:48] *** mberends left
[20:51] *** [Sno] left
[20:51] *** [Sno] joined
[20:53] <carlin> the times I've stuck NativeCall saying it can't find the library (when the file exists) it's because something wasn't compiled properly, eg. missing a -shared compile flag etc.

[21:01] *** brrt joined
[21:04] *** SamuraiJack_ joined
[21:06] *** spider-mario left
[21:08] *** nbrown joined
[21:10] *** SamuraiJack_ left
[21:12] *** nbrown left
[21:25] *** Ven left
[21:26] *** skids left
[21:28] <lizmat> m: say ".c".pred   # expected ".b"

[21:28] <camelia> rakudo-moar 0412f5: OUTPUT«Decrement out of range␤  in method gist at src/gen/m-CORE.setting:13628␤  in sub say at src/gen/m-CORE.setting:15445␤  in block <unit> at /tmp/hQOAyqXxIW:1␤␤»

[21:28] <lizmat> p: say ".c".pred   # expected ".b"

[21:28] <camelia> rakudo-parrot 0412f5: OUTPUT«Decrement out of range␤  in method gist at gen/parrot/CORE.setting:13567␤  in method gist at gen/parrot/CORE.setting:1142␤  in sub say at gen/parrot/CORE.setting:15327␤  in sub say at gen/parrot/CORE.setting:15323␤  in block <unit> at /tmp/9ERS…»

[21:29] <lizmat> m: say ".c".succ  # seems to work

[21:29] <camelia> rakudo-moar 0412f5: OUTPUT«.c␤»

[21:29] <lizmat> hmmm... it doesn't die

[21:30] *** prevost left
[21:30] *** kjs_ left
[21:32] *** kjs_ joined
[21:34] *** kjs_ left
[21:34] *** bartolin left
[21:35] *** LLamaRider left
[21:37] *** gfldex joined
[21:57] *** pmqs left
[21:58] *** kjs_ joined
[21:58] *** gfldex left
[21:59] *** kurahaupo joined
[22:00] *** telex left
[22:02] *** kjs_ left
[22:02] *** FROGGS[mobile]2 joined
[22:02] *** telex joined
[22:04] *** FROGGS[mobile] left
[22:05] *** brrt left
[22:08] <dalek> specs: e1d9ceb | (Elizabeth Mattijsen)++ | S16-io.pod:

[22:08] <dalek> specs: Final part of S16 rewrite

[22:08] <dalek> specs: 

[22:08] <dalek> specs: S32/IO to follow soon.

[22:08] <dalek> specs: review: https://github.com/perl6/specs/commit/e1d9cebfd1

[22:08] *** noganex_ left
[22:08] *** nbrown joined
[22:09] <lizmat> and on that thought, good night #pelr6!

[22:09] <timotimo> gnite lizmat :)

[22:13] *** nbrown left
[22:15] *** leont joined
[22:21] *** labster joined
[22:26] *** Celelibi joined
[22:29] *** leont left
[22:31] *** leont joined
[22:33] *** virtualsue left
[22:33] *** tinyblak left
[22:49] *** ajr_ left
[22:52] *** dolmen left
[23:09] *** nbrown joined
[23:14] *** nbrown left
[23:20] *** skids joined
[23:25] *** beastd left
[23:26] *** noganex joined
[23:32] *** BenGoldberg joined
[23:32] *** xenoterracide_ joined
[23:32] *** skids left
[23:33] *** skids joined
[23:45] *** Akagi201 left
[23:48] *** bjz left
[23:48] *** bjz joined
[23:50] *** raiph joined
[23:58] *** kurahaupo left
