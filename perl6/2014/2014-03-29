[00:00] *** AW3i left
[00:08] <dalek> std: e347792 | Mouq++ | STD.pm6:

[00:08] <dalek> std: Generalize quote escapes to include starter

[00:08] <dalek> std: 

[00:08] <dalek> std: (Not actually significant here, but still is important since the other

[00:08] <dalek> std: impls base their grammars off of STD.pm6)

[00:08] <dalek> std: review: https://github.com/perl6/std/commit/e347792cc7

[00:09] <TimToady> someone needs to update the feature matrix for moar concurrency

[00:13] <dalek> features: 8fe71d2 | jnthn++ | features.json:

[00:13] <dalek> features: Updates for MoarVM concurrency progress.

[00:13] <dalek> features: review: https://github.com/perl6/features/commit/8fe71d2be2

[00:14] <TimToady> thanks

[00:15] * TimToady is busy (not) writing his talk :)

[00:16] <Mouq> Weird… I got a segfault and now I can't get it again…

[00:27] *** hoverboard left
[00:29] <Mouq> .tell FROGGS https://github.com/rakudo-p5/v5/pull/1

[00:29] <yoleaux> Mouq: I'll pass your message to FROGGS.

[00:45] *** rurban joined
[00:48] <jnthn> sleep &

[00:49] <Mouq> 'night jnthn!

[00:55] *** telex left
[00:55] *** xenoterracide left
[00:55] *** colomon joined
[00:55] *** colomon left
[00:56] *** rurban left
[00:56] *** telex joined
[00:57] <Mouq> r: say hash set <a b c>

[00:57] <camelia> rakudo-jvm dfc7d7: OUTPUT«Odd number of elements found where hash expected␤  in method STORE at gen/jvm/CORE.setting:9066␤  in sub hash at gen/jvm/CORE.setting:9391␤  in block  at /tmp/tmpfile:1␤␤»

[00:57] <camelia> ..rakudo-moar dfc7d7: OUTPUT«Odd number of elements found where hash expected␤  in method STORE at src/gen/m-CORE.setting:9123␤  in sub hash at src/gen/m-CORE.setting:9448␤  in block  at /tmp/tmpfile:1␤␤»

[00:57] <camelia> ..rakudo-parrot dfc7d7: OUTPUT«Odd number of elements found where hash expected␤  in method STORE at gen/parrot/CORE.setting:9085␤  in sub hash at gen/parrot/CORE.setting:9411␤  in block  at /tmp/tmpfile:1␤␤»

[00:57] <Mouq> r: say set(<a b c>).hash

[00:57] <camelia> rakudo-jvm dfc7d7: OUTPUT«("b" => Bool::True, "c" => Bool::True, "a" => Bool::True).hash␤»

[00:57] <camelia> ..rakudo-parrot dfc7d7, rakudo-moar dfc7d7: OUTPUT«("a" => Bool::True, "b" => Bool::True, "c" => Bool::True).hash␤»

[00:57] <Mouq> r: say %(set <a b c>)

[00:57] <camelia> rakudo-jvm dfc7d7: OUTPUT«("b" => Bool::True, "c" => Bool::True, "a" => Bool::True).hash␤»

[00:57] <camelia> ..rakudo-parrot dfc7d7, rakudo-moar dfc7d7: OUTPUT«("a" => Bool::True, "b" => Bool::True, "c" => Bool::True).hash␤»

[00:58] <Mouq> Bug?

[00:58] *** hoverboard joined
[01:01] <BenGoldberg> r: my $s = set <a b c>; say hash $s;

[01:01] <camelia> rakudo-jvm dfc7d7: OUTPUT«Odd number of elements found where hash expected␤  in method STORE at gen/jvm/CORE.setting:9066␤  in sub hash at gen/jvm/CORE.setting:9391␤  in block  at /tmp/tmpfile:1␤␤»

[01:01] <camelia> ..rakudo-moar dfc7d7: OUTPUT«Odd number of elements found where hash expected␤  in method STORE at src/gen/m-CORE.setting:9123␤  in sub hash at src/gen/m-CORE.setting:9448␤  in block  at /tmp/tmpfile:1␤␤»

[01:01] <camelia> ..rakudo-parrot dfc7d7: OUTPUT«Odd number of elements found where hash expected␤  in method STORE at gen/parrot/CORE.setting:9085␤  in sub hash at gen/parrot/CORE.setting:9411␤  in block  at /tmp/tmpfile:1␤␤»

[01:02] <Mouq> r: my %h = set <a b c>

[01:02] <camelia> rakudo-parrot dfc7d7: OUTPUT«Odd number of elements found where hash expected␤  in method STORE at gen/parrot/CORE.setting:9085␤  in block  at /tmp/tmpfile:1␤␤»

[01:02] <camelia> ..rakudo-moar dfc7d7: OUTPUT«Odd number of elements found where hash expected␤  in method STORE at src/gen/m-CORE.setting:9123␤  in block  at /tmp/tmpfile:1␤␤»

[01:02] <camelia> ..rakudo-jvm dfc7d7: OUTPUT«Odd number of elements found where hash expected␤  in method STORE at gen/jvm/CORE.setting:9066␤  in block  at /tmp/tmpfile:1␤␤»

[01:03] *** xenoterracide joined
[01:08] *** xenoterracide left
[01:13] *** rurban1 left
[01:15] *** colomon joined
[01:18] *** kurahaupo left
[01:26] *** rurban joined
[01:28] *** wbill joined
[01:32] *** wbill left
[01:40] *** denisboyun left
[01:44] *** araujo joined
[01:50] *** dayangkun left
[01:53] <dalek> roast: b1b60df | (Andrew Egeler)++ | S32-io/IO-Socket-INET. (2 files):

[01:53] <dalek> roast: Add socket test to cover recent moarbug

[01:53] <dalek> roast: review: https://github.com/perl6/roast/commit/b1b60df5ef

[01:54] <retupmoca> jnthn: moar patch now tested!

[01:58] *** colomon left
[02:18] *** colomon joined
[02:26] *** xragnar_ joined
[02:26] *** xragnar is now known as Guest67462

[02:26] *** Guest67462 left
[02:26] *** xragnar_ is now known as xragnar

[02:27] <timotimo> r: say 1 ~~ Nat

[02:28] <camelia> rakudo-parrot dfc7d7, rakudo-jvm dfc7d7, rakudo-moar dfc7d7: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Undeclared name:␤    Nat used at line 1. Did you mean 'Rat'?␤␤»

[02:32] *** hiatobr joined
[02:40] <cognominal> http://geeksta.net/geeklog/exploring-expressions-emotions-github-commit-messages/

[02:41] *** xenoterracide joined
[02:43] <retupmoca> so I want to compile and distribute a .so file (that will be used via NativeCall) along with my perl 6 module

[02:43] <retupmoca> is there a standard way to do this?

[02:44] <Mouq> retupmoca: ./bin ?

[02:44] <Mouq> Maybe in ./lib

[02:44] <Mouq> But I do know that Panda copies files in ./bin

[02:45] <retupmoca> yeah, but my module needs to be able to call out to it with sub ... is native('mylib')

[02:45] <retupmoca> idk if that'll look in ./bin

[02:45] <Mouq> :/

[02:46] *** lustlife joined
[02:49] *** klapperl_ joined
[02:53] *** klapperl left
[02:54] * Mouq → bed

[02:55] * timotimo → timotimo

[03:00] *** Mouq left
[03:13] <cognominal> who said Perl is slow? Perl 6 is caught speeding :  https://twitter.com/SciencePorn/status/449737712854376448/photo/1

[03:14] *** punter left
[03:16] *** colomon left
[03:42] *** raiph left
[03:57] *** kurahaupo joined
[04:04] <dalek> ecosystem: e6cd767 | (Andrew Egeler)++ | META.list:

[04:04] <dalek> ecosystem: Add Auth::PAM::Simple

[04:04] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/e6cd767957

[04:11] *** kurahaupo left
[04:12] *** xenoterracide left
[04:31] *** hoverboard left
[04:31] *** BenGoldberg left
[04:32] *** hoverboard joined
[04:34] *** hoverboard left
[04:35] *** araujo left
[04:47] *** zby_home joined
[05:07] *** zby_home left
[05:11] *** REPLeffect left
[05:21] *** darutoko joined
[05:24] *** REPLeffect joined
[05:48] *** kaare_ joined
[06:07] *** SamuraiJack joined
[06:42] *** FROGGS joined
[06:44] *** thou left
[07:03] *** ggoebel11118 left
[07:03] *** ggoebel11118 joined
[07:19] <FROGGS> thanks Mouq!

[07:19] <yoleaux> 00:29Z <Mouq> FROGGS: https://github.com/rakudo-p5/v5/pull/1

[07:31] <FROGGS> jnthn: when we autogenerate a proto, then the traits like hidden_from_backtrace are left out... is that intentional?

[07:52] *** sfsdfd joined
[07:53] *** sfsdfd left
[07:58] *** kaare_ left
[08:02] *** Rounin joined
[08:06] <FROGGS> m: say lines

[08:06] <camelia> rakudo-moar dfc7d7: OUTPUT«(timeout)»

[08:06] <FROGGS> :o(

[08:06] *** woolfy joined
[08:16] *** denisboyun joined
[08:19] *** woolfy left
[08:19] *** SamuraiJack left
[08:19] *** IllvilJa left
[08:22] *** ssutch joined
[08:22] *** ssutch_ left
[08:27] <Rounin> Hm... I was worried about stack space for recursive functions yesterday, since Rakudo apparently runs Perl on the JVM

[08:27] <Rounin> But now I've had a program do nothing but recurse for 2.5 minutes, and it's still running, so that seems OK

[08:27] <Rounin> I guess it does optimize tail calls

[08:28] <Rounin> It leaks memory though 8| Perhaps it's just my system being very generous with memory

[08:29] <FROGGS> yeah, I think we had another case where something leaked using perl6-j

[08:29] <FROGGS> but I cannot remember what is was

[08:32] <Rounin> Ah well... 7 minutes of recursing at 100% CPU, and it's only using 5.9% of 8GB... Should be OK I suppose :P

[08:33] <FROGGS> not too bad, aye :o)

[08:40] *** thou joined
[08:45] *** thou left
[08:59] *** Rotwang joined
[09:02] *** JimmyZ left
[09:11] *** xfix left
[09:12] <dalek> nqp: 83f5f9d | (Tobias Leich)++ | tools/build/MOAR_REVISION:

[09:12] <dalek> nqp: bump moar rev to get public real_data helper

[09:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/83f5f9d6a6

[09:14] <dalek> rakudo/nom: 79eb79e | (Tobias Leich)++ | / (2 files):

[09:14] <dalek> rakudo/nom: make Rakudo_List a structure of a P6opaque's body

[09:14] <dalek> rakudo/nom: 

[09:14] <dalek> rakudo/nom: This body can be replaced when it needs to grow, e.g. when we mix

[09:14] <dalek> rakudo/nom: a role with an attribute into a list.

[09:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/79eb79e675

[09:17] *** xfix joined
[09:21] <FROGGS> ummm, there seems to be a lot of build system stuff todo for r-j* and r-m*

[09:37] *** colomon joined
[09:52] *** kaare_ joined
[09:53] <Rounin> Agh.. I cut my finger making salad... Now I have only 9 fingers to try Perl 6 with!

[09:54] <FROGGS> >.<

[09:54] *** kurahaupo joined
[09:54] <FROGGS> then perhaps use the texas style operators like >> or »

[09:54] <FROGGS> (easier to type)

[09:55] <Rounin> :DD Thanks for the suggestion!

[09:55] <FROGGS> :o)

[09:55] *** dmol joined
[09:55] <Rounin> I'll use only half of the keyboard ... my uiop = 9 - 8

[09:55] <Rounin> Ach, $ is on the lefthand side DX

[09:56] <jnthn> FROGGS: (*) Are you looking at the tristar branch, or master?

[09:56] <FROGGS> master

[09:56] <FROGGS> damn

[09:56] <FROGGS> :P

[09:56] <jnthn> :P

[09:56] <jnthn> OK, there's a bit less work to do in Tristar ;)

[09:56] <FROGGS> thanks, that saves me some work :o)

[10:02] *** JimmyZ joined
[10:05] *** iolympian1 joined
[10:05] <FROGGS> jnthn: does it make sense to build for 2014.03? or should be build for HEAD?

[10:06] *** rindolf joined
[10:08] <jnthn> FROGGS: Should be aiming at released versions for * really

[10:08] <FROGGS> k

[10:09] <FROGGS> I am building 2014.03 atm, and will have a look at the module tests

[10:09] <jnthn> OK. 

[10:09] <jnthn> I guess it's possible we'll need point releases...

[10:09] <FROGGS> lib/Digest/MD5.pm===SORRY!===

[10:09] <FROGGS> Error while compiling op p6store (source text: "$md5_hex = Q:PIR {\n            .local pmc f, g, str\n            str = find_lex '$str'\n           ..."): To compile on the MoarVM backend, QAST::VM must have an alternative 'moar' or 'moarop'

[10:10] <jnthn> Yeah, that's exactly what it says...

[10:10] <FROGGS> precomp of lib/Perl6/TypeGraph/Viz.pm seems to hang

[10:11] <FROGGS> yeah, I am just pasting this so I know what modules needs attention, not that something is wrong on our side :o)

[10:13] <FROGGS> hmmm, and make modules-test seems to hang/do nothing

[10:13] *** kaare_ left
[10:13] <jnthn> Hmm

[10:14] <jnthn> Not sure if the modules-test stuff got updated for Moar or not.

[10:14] <jnthn> for multi-backend that is

[10:24] *** AW3i joined
[10:37] *** kivutar left
[10:45] <dalek> star/tristar: 7ef34d1 | (Tobias Leich)++ | / (2 files):

[10:45] <dalek> star/tristar: support modules-test for all backends

[10:45] <dalek> star/tristar: review: https://github.com/rakudo/star/commit/7ef34d18ad

[10:50] *** colomon left
[11:03] *** kurahaupo left
[11:10] *** Alula joined
[11:12] *** spider-mario joined
[11:23] *** iolympian1 left
[11:32] <FROGGS> failing modules in modules-test-m: https://gist.github.com/FROGGS/0ea5537eb675588baaa2

[11:32] <FROGGS> I'll build not for -j and later for -p

[11:34] <jnthn> FROGGS++

[11:34] <jnthn> Hmm, that Pod::To::HTML thing was fixed post-release...

[11:34] <jnthn> I *think*

[11:36] <FROGGS> I think so too

[11:37] <FROGGS> perhaps we can checkout an older version of Pod::To::HTML

[11:37] <jnthn> Well, or try it against HEAD...

[11:37] <jnthn> Non-zero wait status: 139

[11:37] <jnthn> 139?

[11:38] <FROGGS> hmmm, that rings a bell...

[11:38] *** Rotwang left
[11:39] *** LLamaRider joined
[11:46] *** LLamalessRider joined
[11:51] *** kivutar joined
[11:55] *** Rotwang joined
[12:11] <dalek> star/tristar: a5ffea1 | (Tobias Leich)++ | tools/build/Makefile.in:

[12:11] <dalek> star/tristar: fix modules testing by using correct -j/-p runner

[12:11] <dalek> star/tristar: review: https://github.com/rakudo/star/commit/a5ffea1cd3

[12:28] *** LLamaRider left
[12:29] *** LLamalessRider left
[12:40] <FROGGS> star-test-modules build and test errors: https://gist.github.com/FROGGS/0ea5537eb675588baaa2

[12:40] <jnthn> FROGGS++

[12:40] <jnthn> looking

[12:45] <jnthn> Damn, that LWP one is a release blocker...

[12:45] <jnthn> And r-j is in way, way, worse shape than r-m o.O

[12:46] <FROGGS> well, the weekend has just begun :o)

[12:47] <FROGGS> jnthn: so, r-j* has priority?

[12:49] <jnthn> Well, fxing the r-p regression for LWP::Simple probably has to come first...

[12:49] <FROGGS> k

[12:49] <dalek> roast: 1589ef2 | moritz++ | S06-macros/unquoting.t:

[12:49] <dalek> roast: fudge moar macro test (RTed)

[12:49] <dalek> roast: review: https://github.com/perl6/roast/commit/1589ef2d75

[12:50] <moritz> fwiw t/spec/S17-concurrency/channel.t aborts after test 12 here, with "Aborted (core dumped)"

[12:50] <FROGGS> moritz: on my box too I think

[12:51] <jnthn> Hm...how many tests are there?

[12:51] <moritz> (though I can't find the core dump)

[12:51] <FROGGS> at least, one of the S17 tests files failed on my box... I don not have the output anymore

[12:55] <FROGGS> the lwp-simple precomp problem seems to happen when we load MIME::Base64

[12:56] <FROGGS> looks like the fix is already in... checking

[12:58] <FROGGS> ahh, I am using MIME::Base64 HEAD where I probably should not

[13:00] <moritz> jnthn: fwiw S17-concurrency/channel.t hangs here after test 12 on the JVM

[13:01] <moritz> and that seems to be at the end of the test file

[13:02] <moritz> (and it doesn't consume CPU while hanging)

[13:02] <FROGGS> m: EVAL "pir::load_bytecode__vs('MIME/Base64.pbc');"

[13:02] <camelia> rakudo-moar 79eb79: OUTPUT«===SORRY!===␤Error while compiling op call: To compile on the MoarVM backend, QAST::VM must have an alternative 'moar' or 'moarop'␤»

[13:02] <FROGGS> m: EVAL "pir::load_bytecode__vs('MIME/Base64.pbc');"; say "alive"

[13:02] <camelia> rakudo-moar 79eb79: OUTPUT«===SORRY!===␤Error while compiling op call: To compile on the MoarVM backend, QAST::VM must have an alternative 'moar' or 'moarop'␤»

[13:02] <FROGGS> m: EVAL 'pir::load_bytecode__vs("MIME/Base64.pbc");'; say "alive"

[13:02] <camelia> rakudo-moar 79eb79: OUTPUT«===SORRY!===␤Error while compiling op call: To compile on the MoarVM backend, QAST::VM must have an alternative 'moar' or 'moarop'␤»

[13:02] <FROGGS> m: try EVAL 'pir::load_bytecode__vs("MIME/Base64.pbc");'; say "alive"

[13:02] <camelia> rakudo-moar 79eb79: OUTPUT«alive␤»

[13:03] <FROGGS> m: try EVAL "pir::load_bytecode__vs('MIME/Base64.pbc');"; say "alive"

[13:03] <camelia> rakudo-moar 79eb79: OUTPUT«alive␤»

[13:03] <FROGGS> m: if 0 { EVAL "pir::load_bytecode__vs('MIME/Base64.pbc');" }

[13:03] <camelia> rakudo-moar 79eb79: ( no output )

[13:04] <FROGGS> I thought this will still put the call into the ast

[13:05] <dalek> roast: 46d6d67 | moritz++ | S29-conversions/ord_and_chr.t:

[13:05] <dalek> roast: (re)fudge ord_and_char.t for rakudo

[13:05] <dalek> roast: review: https://github.com/perl6/roast/commit/46d6d67c0f

[13:08] <FROGGS> okay, the pure perl MIME::Base64 works

[13:15] <moritz> also LWP::Simple with pure perl MIME::Base64?

[13:15] <FROGGS> at least I can compile it

[13:18] <moritz> m: 1 = 2

[13:18] <camelia> rakudo-moar 79eb79: OUTPUT«No such method 'STORE' for invocant of type 'Int'␤  in block  at /tmp/Bx4qdWfHqC:1␤␤»

[13:18] <moritz> r: 1 = 2

[13:18] <camelia> rakudo-jvm 79eb79: OUTPUT«(timeout)»

[13:18] <camelia> ..rakudo-moar 79eb79: OUTPUT«No such method 'STORE' for invocant of type 'Int'␤  in block  at /tmp/tmpfile:1␤␤»

[13:18] <camelia> ..rakudo-parrot 79eb79: OUTPUT«Cannot modify an immutable value␤  in block  at /tmp/tmpfile:1␤␤»

[13:22] <dalek> roast: 068ed16 | moritz++ | S32-exceptions/misc.t:

[13:22] <dalek> roast: moar-fudge S32-exceptions/misc.t

[13:22] <dalek> roast: review: https://github.com/perl6/roast/commit/068ed168b9

[13:25] *** logie joined
[13:31] *** logie left
[13:32] *** kurahaupo joined
[13:33] *** logie joined
[13:34] *** kurahaupo_mobile joined
[13:37] *** kurahaupo left
[13:40] *** ssutch left
[13:40] *** ssutch joined
[13:42] *** ssutch_ joined
[13:42] *** ssutch left
[13:44] *** kurahaupo_mobile left
[13:45] *** kurahaupo joined
[13:52] <retupmoca> FROGGS: FWIW, MIME::Base64 head works fine on moarvm

[13:52] <retupmoca> LWP::Simple will compile and run tests (it fails a couple, but they run and a bunch pass)

[13:53] <FROGGS> retupmoca: I am using MIME::Base64 HEAD and MoarVM/nqp/rakudo 2014.03

[13:53] <FROGGS> and right now I try to make it work on parrot 6.1.0

[13:56] <FROGGS> I am going to try MIME::Base64+rakudo@parrot HEAD now

[14:04] *** raiph joined
[14:05] <raiph> jnthn has updated the compiler/features matrix data; what updates the web page?

[14:09] <jnthn> raiph: As far as I know, there's some con job set up to do it automatically

[14:09] <jnthn> *cron

[14:13] *** xenoterracide joined
[14:16] <moritz> 12,42   *       *       *       *     sh ~/update-features.sh

[14:21] <dalek> features: 6d4d025 | moritz++ | README:

[14:21] <dalek> features: update REAMDE

[14:21] <dalek> features: 

[14:21] <dalek> features: * mention cron job

[14:21] <dalek> features: * mention web page

[14:21] <dalek> features: review: https://github.com/perl6/features/commit/6d4d02516f

[14:26] <FROGGS> retupmoca: LWP::Simple on rakudo@parrot HEAD does not work

[14:26] <FROGGS> bbiab

[14:28] *** logie left
[14:34] *** dmol left
[14:36] *** dmol joined
[14:37] *** FROGGS[mobile] joined
[14:37] *** raiph left
[14:39] <kurahaupo> it's run twice an hour, not once an hour.

[14:40] <retupmoca> FROGGS: Does the precompile fail or do the tests fail?

[14:40] <kurahaupo> assuming we're talking about moritz'z crontab entry

[14:40] <[Coke]> rakudo-moar build failed on my older mac.

[14:41] <moritz> kurahaupo: "at leat"

[14:41] <[Coke]> https://gist.github.com/coke/9855725

[14:41] <moritz> *least

[14:42] <moritz> [Coke]: looks like you either need to clean out some installed files, or rebuild nqp and parrot after rebuilding moar

[14:43] <moritz> commit eb2ba0792b166ebd2febcb2d99e2bb047972ca56

[14:43] <moritz> Author: Jimmy Zhuo [email@hidden.address]
[14:43] <moritz> Date:   2014-03-29 20:33:19 +0800

[14:43] <moritz> s/MVMP6opaque_real_data/MVM_p6opaque_real_data/g

[14:43] <moritz> sounds like it might cause that very problem

[14:44] <[Coke]> That's highly plausible. checking.

[14:44] <moritz> afk

[14:45] <FROGGS[mobile]> retupmoca: precomp of LWP::Simple fails

[14:46] <retupmoca> FROGGS[mobile]: I'll take a look once I get a rakudo built on all three backends

[14:47] <FROGGS[mobile]> for parrot the problem is the eval of the load_bytecode call

[14:47] <FROGGS[mobile]> strip the eval and it works for parrot

[14:47] <retupmoca> *sigh*

[14:47] <FROGGS[mobile]> indeed

[14:47] <retupmoca> the eval was the only way I could get it to work on moar

[14:49] <retupmoca> the easiest way to fix this is to just strip out the PIR bytecode and make this a pure-perl only module

[14:49] <FROGGS[mobile]> cant we require the ::PIR xor ::Perl and export the subs at runtime?

[14:49] <jnthn> Could also do it in a BEGIN block...

[14:49] <retupmoca> that's what I was doing before, but IIRC the require doesn't precompile

[14:49] <timotimo> this is one of the current weak spots in rakudo (or maybe even the spec), IMO

[14:49] <jnthn> require is runtime, but you can do it at BEGIN time.

[14:50] <retupmoca> yes, I was doing a require at BEGIN time

[14:50] <retupmoca> but it never worked when precompiled

[14:50] <timotimo> for example, how do i best handle checking if the user has libunibilum installed and if not fall back to curses and still get the benefits of precompilation?

[14:56] <FROGGS[mobile]> m: require Test <&is>

[14:56] <camelia> rakudo-moar 79eb79: ( no output )

[14:57] <FROGGS[mobile]> I would do that

[14:58] <retupmoca> This is what it was when the require was in there: https://github.com/perl6/Perl6-MIME-Base64/blob/f5c25b20bbb9a334f487f48c9cd4cd98ccb25f8a/lib/MIME/Base64.pm6

[14:59] <retupmoca> that worked for parrot and jvm if it wasn't precompiled,

[14:59] <retupmoca> but it worked for 0 backends when precompiled

[15:00] <retupmoca> (it would give an error 'Missing or wrong version of dependency ...PIR.pm6' or something for parrot

[15:01] *** hoverboard joined
[15:01] *** raiph joined
[15:01] <FROGGS[mobile]> yeah, I had that too when I played around with BEGIN+require

[15:02] <[Coke]> nope. removed install, realcleaned, reconfigured, failed.

[15:03] <[Coke]> I ran with --gen-nqp=master --gen-moar=master --backends=moar

[15:04] <retupmoca> does anyone think removing ::PIR completely for now is a bad idea?

[15:04] <FROGGS[mobile]> retupmoca: in the previous code you used the symbols like M::B::PIR, but I propose to import subs, and with the pasted snippet these subs are known at compile time

[15:05] <JimmyZ> COke, what's the error?

[15:05] <retupmoca> FROGGS[mobile]: so a runtime require instead of BEGIN time?

[15:05] <FROGGS[mobile]> yes

[15:05] <retupmoca> ok, I'll try that

[15:06] <FROGGS[mobile]> if that works out we can try to put it in a begin block

[15:07] <FROGGS[mobile]> [Coke]: moar master cannot be used atm for rakudo

[15:08] <jnthn> JimmyZ: Did you update Rakudo's usage of the function you renamed?

[15:08] <FROGGS[mobile]> it needs to be aligned to the changes in moar, like the renaming of the C function moritz++ mentioned

[15:09] <JimmyZ> I didn't... 

[15:10] <JimmyZ> Doesn't it need bump version?

[15:11] <jnthn> JimmyZ: Yes, will have to bump vesions along with the change.

[15:13] <[Coke]> FROGGS[mobile]: danke.

[15:13] <FROGGS[mobile]> problem is just that many folks (me included) expect that HEAD/HEAD/HEAD works 

[15:16] *** dmol left
[15:16] *** dmol joined
[15:17] <[Coke]> I was asking for trouble and I got it. no worries.

[15:26] <raiph> moritz++ # cron info/doc/fix

[15:27] *** [particle] joined
[15:31] <retupmoca> does star use panda to install it's modules? or does it have it's own precompilation system?

[15:35] <jnthn> It's own thing

[15:35] <retupmoca> will it use a custom Build.pm like panda will?

[15:36] <retupmoca> jnthn: or could it be taught to?

[15:37] <retupmoca> because using require for this will still cause problems with panda and star trying to compile the PIR.pm6

[15:37] <retupmoca> but with a Build.pm I can tell panda to never even look at anything parrot-specific

[15:38] <retupmoca> but that requires star to use Build.pm as well

[15:38] <jnthn> retupmoca: In the long run, I think Star should use Panda, but that's a bigger task...

[15:41] <FROGGS[mobile]> we could special case it like we did for perl6-debug

[15:41] <jnthn> True

[15:41] <FROGGS[mobile]> but that should not be the first choice

[15:41] <jnthn> Though the easy solution is just to inline the Q:PIR bit in a heredoc

[15:42] <jnthn> And check if we're on Parrot, and if so eval that instead.

[15:42] <jnthn> Caching it.

[15:42] <jnthn> Instead of trying to be clever with modules. :)

[15:42] *** zakharyas joined
[15:46] <retupmoca> jnthn: I was thinking something like this with Build.pm: https://github.com/perl6/Perl6-MIME-Base64/blob/buildpm-test/Build.pm

[15:46] <retupmoca> but that won't work if star won't use it

[15:55] <retupmoca> jnthn: MIME::Base64 master is doing an EVAL of the PIR code, but FROGGS was saying the EVAL wasn't working

[15:57] <FROGGS[mobile]> exactly 

[15:58] <FROGGS[mobile]> the eval of the first pir:: explodes

[15:59] <jnthn> Explodes how?

[16:01] *** guru joined
[16:01] *** guru is now known as Guest51982

[16:01] *** Guest51982 is now known as ajr_

[16:03] <retupmoca> ok, the buildpm-test branch works for panda on parrot - LWP::Simple compiles and runs tests

[16:11] *** arnsholtAtHome joined
[16:11] <arnsholtAtHome> o/

[16:14] <jnthn> .oO( A massively distributed search system for arnsholts... )

[16:14] *** zakharyas left
[16:17] <arnsholtAtHome> Yeah

[16:18] <arnsholtAtHome> Other arnsholt is at work, and forgot to put it in a screen session

[16:18] *** zakharyas joined
[16:20] *** dwarring left
[16:20] <retupmoca> jnthn, FROGGS[mobile]: https://github.com/retupmoca/star/compare/tristar?expand=1 + MIME::Base64 branch buildpm-test should work for all backends

[16:21] <jnthn> retupmoca++

[16:21] <retupmoca> If that's what we want, I will PR star and merge buildpm-test to master

[16:21] <retupmoca> star won't use M::B::PIR until it's taught Build.pm

[16:22] <retupmoca> it'll just use the pure-perl, but it'll work

[16:23] <retupmoca> panda (and star once it uses panda / Build.pm) will use ::PIR on parrot, and everything else will use ::Perl

[16:24] <jnthn> Works for me.

[16:26] <retupmoca> MIME::Base64 branch merged; PR: https://github.com/rakudo/star/pull/37

[16:26] <retupmoca> (someone should probably double-check all this to make sure I'm not making things worse :P)

[16:28] *** hoverboard left
[16:31] <jnthn> If FROGGS don't beat me to it, will have a look after doing walk/shopping.

[16:33] <arnsholtAtHome> jnthn: Not as many problems with nqp/jastcompiler on my laptop

[16:33] <arnsholtAtHome> https://gist.github.com/arnsholt/9857621 has the spectest summary of j-spectest on my laptop

[16:34] <arnsholtAtHome> nqp/jastcompiler with latest nqp/master merged in and rakudo/nom at HEAD

[16:35] *** raiph left
[16:35] <arnsholtAtHome> Rebuilding nqp/master to compare with now

[16:36] *** denisboyun left
[16:36] *** denisboyun joined
[16:41] *** SamuraiJack joined
[16:45] <FROGGS[mobile]> jnthn: it exploded with "No STable at index 1"

[16:46] <FROGGS[mobile]> I am at home in an hour, and will then continue testing (including the PR) after dinner

[16:50] *** pecastro_ joined
[16:50] *** pecastro left
[17:05] <jnthn> arnsholtAtHome: If isDEPRECATED and error-reporting are happy in nqp/master, most probably the issue is something around line number annotations.

[17:10] <arnsholtAtHome> Good to know!

[17:11] <arnsholtAtHome> (And it is happy on master)

[17:14] <arnsholtAtHome> On S32-io now, and the only one that still fails is the mixhash one in S02

[17:14] <arnsholtAtHome> So there's still some breakage =)

[17:15] <arnsholtAtHome> S32-io/other.t is REALLY slow though

[17:15] *** hummeleB1 left
[17:16] *** kaare_ joined
[17:18] *** xinming_ left
[17:18] <jnthn> Yes, that one is...on any backend. And JVM especially.

[17:19] *** xinming_ joined
[17:19] <arnsholtAtHome> Why is that, OOC?

[17:23] <jnthn> 'cus it runs Rakudo 60 times, I think loking for some decoding boundary error that we once had

[17:23] <arnsholtAtHome> Ow, ow, ow. Yeah, that'll take a while

[17:24] <arnsholtAtHome> Ye olde Parrot bug where Unicode chars spanning a read block boundary borked, possibly?

[17:24] <arnsholtAtHome> Gist updated with master spectest run, BTW

[17:25] <arnsholtAtHome> Looks like we have some passing TODOs, but probably something broken with line number annotations

[17:26] <jnthn> arnsholtAtHome: Yeah, that one

[17:26] <arnsholtAtHome> The broken callframe.t test is checking line numbers as well, so you're probably right

[17:26] <jnthn> ah, yeah

[17:26] <jnthn> it fits

[17:27] <arnsholtAtHome> isDEPRECATED.t fails with "Cannot look up attributes in a type object" on jastcompiler, not sure what's up with that, but I'll look into it

[17:28] <arnsholtAtHome> Tuesday, most likely

[17:29] <arnsholtAtHome> Oh, derp

[17:30] <arnsholtAtHome> Just looked at the code that handles JAST::Annotation

[17:30] <arnsholtAtHome> It gets the line number from the annotation, and proceeds to do... absolutely nothing with it

[17:30] <arnsholtAtHome> *facepalm*

[17:34] <arnsholtAtHome> Got to go any moment now, but hopeful fixing that'll get me somewhere =)

[17:34] <jnthn> :)

[17:35] <jnthn> arnsholtAtHome++

[17:35] <arnsholtAtHome> And this is why we have a massive testsuite

[17:36] <jnthn> aye :)

[17:39] *** ssutch joined
[17:39] *** ssutch_ left
[17:40] *** Psyche^ joined
[17:41] *** ssutch left
[17:41] *** ssutch joined
[17:44] *** Psyche^_ left
[17:45] *** MrMeek left
[17:45] *** MrMeek joined
[17:48] <arnsholtAtHome> isDEPRECATED passes now at least

[17:48] * arnsholtAtHome is hopeful

[17:53] * arnsholtAtHome &

[17:54] <timotimo> \o/

[17:56] <FROGGS[mobile]> arnsholt++

[17:57] *** denisboyun left
[17:58] *** denisboyun joined
[18:01] *** araujo joined
[18:09] *** arnsholtAtHome left
[18:11] *** arnsholtAtHome joined
[18:14] <jnthn> Doing a patch locally that might help the "Can't deserialize_stub a NativeCall object." issue in the *-j

[18:38] <FROGGS> jnthn++

[18:40] <dalek> star/tristar: 90eaf28 | (Andrew Egeler)++ | tools/build/module-install.pl:

[18:41] <dalek> star/tristar: Require file extension to be at end of filename

[18:41] <dalek> star/tristar: review: https://github.com/rakudo/star/commit/90eaf28ad6

[18:41] <dalek> star/tristar: f2236b4 | (Tobias Leich)++ | tools/build/module-install.pl:

[18:41] <dalek> star/tristar: Merge pull request #37 from retupmoca/tristar

[18:41] <dalek> star/tristar: 

[18:41] <dalek> star/tristar: Require file extension to be at end of filename

[18:41] <dalek> star/tristar: review: https://github.com/rakudo/star/commit/f2236b4d8f

[18:43] <moritz> retupmoca: I've given you a commit bit for rakudo/star

[18:43] <moritz> retupmoca: welcome to the fun!

[18:43] <moritz> I mean, welcome even more to even more

[18:43] <moritz> fun

[18:48] <FROGGS> jnthn: that patch will land in NativeCall itself?

[18:49] *** Adriaaan joined
[18:55] *** lizmat joined
[18:55] <jnthn> FROGGS: No, NQP...

[18:56] <FROGGS> jnthn: hmmm... so we do a 2013.03.1 at some point?

[18:57] <jnthn> Yeah

[18:57] <FROGGS> k

[18:57] <FROGGS> I am rebuilding star for all backends now, and will update my problems gist

[18:58] <moritz> if that turns out to be not the only issue, we might want to wait with tristar for 2014.04

[18:58] <moritz> and maybe do an old-fashioned r-p star release for March

[18:58] <FROGGS> moritz: sure, but let's try to fix as much as we can :o)

[18:59] <moritz> FROGGS: aye

[18:59] <jnthn> moritz: Well, my idea for it was to make sure r-p is in good shape, and if r-j/r-m aren't perfect we just say they're "experimental" or something.

[19:00] <FROGGS> however we do it: we should write in underlined and bold that this is the first jvm*/moar*

[19:00] <jnthn> Right.

[19:01] <FROGGS> even when all passes I mean

[19:01] <FROGGS> because the tests usually do not mean much :o)

[19:01] <jnthn> ugh

[19:01] <FROGGS> hmm?

[19:01] <jnthn> I fixed that one, but seems there's still an issue

[19:01] <FROGGS> :/

[19:02] <jnthn> It looks really familiar

[19:02] <jnthn> Oh...

[19:02] <jnthn> It's the thing I fixed up in r-m for NativeCall and pre-comp

[19:03] *** zakharyas left
[19:03] <FROGGS> every "# XXX ..." comes back to you at some point :P

[19:04] <dalek> nqp: 532788a | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/NativeCall.java:

[19:04] <dalek> nqp: Fix a serialization issue with NativeCall on JVM.

[19:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/532788aefa

[19:04] *** zakharyas joined
[19:07] *** darutoko left
[19:14] <simula67> .tell moritz What do you think ? https://github.com/perl6/roast/pull/37

[19:14] <yoleaux> simula67: I'll pass your message to moritz.

[19:15] <moritz> simula67: I'm no expert when it comes to socket tests

[19:15] <yoleaux> 19:14Z <simula67> moritz: What do you think ? https://github.com/perl6/roast/pull/37

[19:15] <moritz> simula67: does it work?

[19:16] <simula67> yes. it is slightly better. I mean the test does not fail that often :)

[19:16] <moritz> simula67: then go ahead an merge it, please :-)

[19:17] <jnthn> moritz, simula67: Seems reasonable to me.

[19:17] <moritz> simula67: I've given you a commit bit

[19:18] *** kaare_ left
[19:18] <dalek> roast: a55d4b2 | (Joji Antony)++ | S32-io/IO-Socket-INET.pl:

[19:18] <dalek> roast: Use the server ready flag file for discard test also

[19:18] <dalek> roast: review: https://github.com/perl6/roast/commit/a55d4b2f62

[19:18] <dalek> roast: 5bf4b14 | (Joji Antony)++ | S32-io/IO-Socket-INET.pl:

[19:18] <dalek> roast: Merge pull request #37 from simula67/master

[19:18] <dalek> roast: 

[19:18] <dalek> roast: Use the server ready flag file for discard test also

[19:18] <dalek> roast: review: https://github.com/perl6/roast/commit/5bf4b14825

[19:19] <simula67> thanks

[19:20] <moritz> simula67: thank you for your patch!

[19:27] <dalek> roast: b56f999 | (Elizabeth Mattijsen)++ | S17-concurrency/thread.t:

[19:27] <dalek> roast: Differentiate reasons for skipping tests

[19:27] <dalek> roast: review: https://github.com/perl6/roast/commit/b56f9996c7

[19:35] *** woolfy joined
[19:36] *** SamuraiJack left
[19:36] *** colomon joined
[19:41] *** dwarring joined
[19:45] *** Adriaaan left
[19:45] *** colomon left
[19:59] *** zakharyas left
[20:05] *** xenoterracide left
[20:06] <FROGGS> updated: https://gist.github.com/FROGGS/0ea5537eb675588baaa2

[20:10] <jnthn> Working on those NullPointerException things, or what I think is the cause of them. But having a hard time of it.

[20:12] <jnthn> oh...

[20:12] <jnthn> I mighta got it.

[20:12] <jnthn> yeah, gets further. Just another piece of NYI serialization.

[20:13] <[Coke]> bugadmins: there is a switch on rts to indicate the backend, parrot/moarvm/jvm

[20:16] <moritz> where is it?

[20:17] <moritz> ah, "Basics"

[20:17] <FROGGS> in the general tab, on the lower right I thinl

[20:17] <FROGGS> think*

[20:17] <FROGGS> basics, yeah

[20:17] <moritz> [Coke]: gaah, and it lets me select only one value :(

[20:18] <[Coke]> moritz: I'll open a ticket with the bugadminadmins

[20:18] <moritz> RT #121530 is a perfect example for needing two bacakend values

[20:18] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121530

[20:19] <[Coke]> moritz++ # sent

[20:21] <dalek> rakudo-star-daily: d51c043 | coke++ | log/ (5 files):

[20:21] <dalek> rakudo-star-daily: today (automated commit)

[20:21] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/d51c043833

[20:26] *** LLamaRider joined
[20:27] *** LLamalessRider joined
[20:32] <FROGGS> r: sub infix:«<<<»(\x, \n) { }

[20:32] <camelia> rakudo-parrot 79eb79, rakudo-jvm 79eb79, rakudo-moar 79eb79: ( no output )

[20:32] <FROGGS> r: sub infix:<⊞>(\x, \y)    {  (x + y) % 2**32 }

[20:32] <[Coke]> n: say 'abc'.split('')[0];

[20:32] <camelia> rakudo-parrot 79eb79, rakudo-jvm 79eb79, rakudo-moar 79eb79: ( no output )

[20:32] <camelia> niecza v24-109-g48a8de3: OUTPUT«␤»

[20:34] <lue> FROGGS: what hash are you working on? :)

[20:35] <FROGGS> lue: I try to make a pure perl Digest::MD5

[20:35] <FROGGS> I took the example from rosettacode, but the two snippets I pasted segfault when being precompiled

[20:36] <lue> FROGGS: first thing I think of as a possible cause is the \x business.

[20:36] <lue> (instead of $x or whatever)

[20:36] <[Coke]> anyone else get a write error building rm all the time?

[20:36] <FROGGS> no, it is either the unicode thingy, or a custom infix itself

[20:37] <[Coke]> I make, it fails, I make again, we're all good.

[20:37] *** telex left
[20:37] <jnthn> [Coke]: Never seen that, though I@m typically building on Windows.

[20:37] <FROGGS> [Coke]: I get that sometimes, yes

[20:37] <lue> It can't be unicode if <<< fails, can it?

[20:37] <FROGGS> lue: true

[20:37] <lue> (unless the fault would lie with «»)

[20:39] *** telex joined
[20:39] <lue> FROGGS: ooc, does defining an existing operator work (e.g. overloading infix:<+>) ? Would defining an infix:<@> work (not already existing, not unicode, no angles to /just maybe/ screw things up)?

[20:40] <FROGGS> hold on

[20:40] <Rounin> Hm... One could implement APL with that functionality :P

[20:40] <FROGGS> lue++

[20:40] <lue> whadidido?

[20:40] <FROGGS> <+> works, <@> does not, <ll> does not

[20:41] <lue> so when you precompile, you enter C++ land? Yeesh.

[20:41] <FROGGS> I do?

[20:41] <lue> FROGGS: let me rephrase: "you follow the C++ school of operator definitions"

[20:41] <vendethiel> (infix:<@> won't work ?)

[20:42] <vendethiel> lue: is there an operator"" in perl6?

[20:42] <FROGGS> vendethiel: it would if there was not that bug I am seeing right now

[20:42] <dalek> rakudo/nom: e270a77 | jnthn++ | src/ (4 files):

[20:42] <dalek> rakudo/nom: Fix role outers bug on JVM.

[20:42] <dalek> rakudo/nom: 

[20:42] <dalek> rakudo/nom: Was fixed on MoarVM already; this brings the same fix to JVM. Gets

[20:42] <dalek> rakudo/nom: NativeCall pre-comp closer to working.

[20:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e270a77ee4

[20:42] <lue> vendethiel: not unless you define one :)

[20:42] <jnthn> FROGGS: got a bt for the segv?

[20:42] <vendethiel> lue: I mean, can you define your own "string parsers" like qq ? I think I've read about that in the specs

[20:43] <jnthn> e270a77 was tricky...

[20:43] <vendethiel> kinda like scala

[20:43] <FROGGS> jnthn: not yet...

[20:43] <jnthn> FROGGS: k

[20:43] <lue> FROGGS: what I meant is that precompilation kicks into a state like C++, where you can't define your own operators. That's all :)

[20:43] <jnthn> FROGGS: Above should help the various nullpointerexception failures for r-j

[20:43] <lue> vendethiel: you can define your own string quoters, though that requires macros (because it's a change to how Perl 6 is parsed.)

[20:44] <vendethiel> noted

[20:44] <FROGGS> Error while reading from file: Malformed UTF-8

[20:44] <FROGGS>    at gen/moar/stage2/NQPHLL.nqp:1279  (/home/froggs/dev/star/work-m/rakudo-star-2014.03/install/languages/nqp/lib/NQPHLL.moarvm::65)

[20:44] <FROGGS> jnthn: ^^

[20:44] <lue> vendethiel: http://perlcabal.org/syn/S02.html#Adverbs_on_quotes

[20:44] <FROGGS> this is for sub infix:<@>(\x, \n)  { (x +< n) % 2**32 +| (x +> (32-n)) } in a class

[20:45] <FROGGS> jnthn: btw, I have to build star against HEAD, I will do that in a bit

[20:45] <jnthn> FROGGS: Uh, how'd you get that one?

[20:46] <jnthn> FROGGS: Whenever I've seen that it was correct and I was feeding it latin-1...

[20:46] <FROGGS> jnthn: I'll give you a snippet in a sec

[20:46] *** Sqirrel joined
[20:47] <FROGGS> perl6 --target=mbc --output=foo.moarvm -e "sub infix:<@>(\x, \n)  { (x +< n) % 2**32 +| (x +> (32-n)) }"

[20:47] <FROGGS> perl6 -I. -Mfoo -e1

[20:48] <FROGGS> jnthn: that is all ^

[20:49] <FROGGS> jnthn: ohh, all is fine on perl6-m HEAD :o)

[20:49] <dwarring> moritz: ok to revert moarvm commit c5f3b5378, "check for invalid code points (jvm port)"?

[20:50] <dwarring> surrogate range check is also questionable: ord >= 0xd800 && ord <= 0xdfff

[20:51] <dwarring> I'll look at nqp Ops.java afterwards

[20:52] <lue> dwarring: actually, I don't think surrogates are valid characters on their own.

[20:52] *** iolympian joined
[20:53] *** treehug88 joined
[20:53] <jnthn> FROGGS: So...nothing for me to look at? :)

[20:53] <FROGGS> jnthn: looks like :o)

[20:53] <FROGGS> I will now test against HEAD

[20:54] *** ajr_ left
[20:56] *** iolympian left
[20:57] <dwarring> lue: alright I'll keep the surrogate check in

[20:57] *** Adriaaan joined
[20:59] *** kurahaupo left
[20:59] <lue> yeah, AFAICT unpaired surrogate values (they aren't even characters) are errors.

[20:59] * lue afk

[21:04] *** iolympian1 joined
[21:04] *** iolympian1 left
[21:12] <timotimo> "closer to working" :|

[21:15] <moritz> dwarring: I've already revereted it

[21:24] *** hugme joined
[21:24] *** ChanServ sets mode: +v hugme

[21:24] *** masak joined
[21:24] *** iolympian joined
[21:24] *** iolympian left
[21:24] *** masak is now known as Guest95000

[21:25] *** cosimo joined
[21:31] *** Adriaaan left
[21:33] *** SHODAN left
[21:34] *** SHODAN joined
[21:35] *** telex left
[21:36] <jnthn> FROGGS: I just got a pre-compiled module doing a native call to work out on the JVM.

[21:36] <FROGGS> cool!

[21:36] *** telex joined
[21:38] <FROGGS> r-j* installs right now, so I an post test results in a few minutes

[21:38] <jnthn> OK...

[21:38] <jnthn> It'll go better with this patch, though...

[21:39] <timotimo> \o/

[21:39] *** ssutch left
[21:40] *** ssutch joined
[21:40] <jnthn> Just making sure I didn't but the Rakudo build

[21:40] <jnthn> bust

[21:40] <FROGGS> it is easy for me to pull and rebuild now

[21:43] <dalek> nqp: dba4289 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/P6Opaque (2 files):

[21:43] <dalek> nqp: Make sure inlined obj REPRs survive serialization.

[21:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dba4289d51

[21:45] *** telex left
[21:46] <dalek> roast: 80e2368 | (Elizabeth Mattijsen)++ | S17-concurrency/supply.t:

[21:46] <dalek> roast: Add "todo" for merging taps not working

[21:46] <dalek> roast: review: https://github.com/perl6/roast/commit/80e23686b3

[21:46] <dalek> roast: 3fa0240 | (Elizabeth Mattijsen)++ | S17-concurrency/promise.t:

[21:46] <dalek> roast: Add "skip" for sleepsort not working

[21:46] <dalek> roast: review: https://github.com/perl6/roast/commit/3fa02406d0

[21:46] <dalek> roast: 0a763be | (Elizabeth Mattijsen)++ | S17-concurrency/ (3 files):

[21:46] <dalek> roast: Add skips for :in/:at/:every not yet implemented

[21:46] <dalek> roast: review: https://github.com/perl6/roast/commit/0a763bedef

[21:47] <dalek> rakudo/nom: fea8aa8 | (Elizabeth Mattijsen)++ | src/core/Supply.pm:

[21:47] <dalek> rakudo/nom: Fix Supply.list and make code more readable

[21:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fea8aa80f2

[21:47] <dalek> rakudo/nom: e501475 | (Elizabeth Mattijsen)++ | t/spectest.data:

[21:47] <dalek> rakudo/nom: Make sure all S17 tests are run on moar

[21:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e501475959

[21:47] *** telex joined
[21:47] <lizmat> that should add quite a few passing tests for moar :-)

[21:48] <FROGGS> lizmat++

[21:49] <jnthn> lizmat: ooh, nice :)

[21:49] <lizmat> two things that struck me: sleep sort test not working and merging taps

[21:49] <lizmat> will look at them in more detail now

[21:50] <jnthn> lizmat: All the timer stuff is missing still on Moar

[21:50] <lizmat> but the sleep sort works with "sleep"

[21:50] <jnthn> Oh :)

[21:50] <lizmat> is that also time dependent?

[21:50] <jnthn> OK, then it could be something else :)

[21:50] <lizmat> *timer

[21:50] <jnthn> No

[21:51] <jnthn> lizmat: In what way did it not work, ooc?

[21:51] *** Adriaaan joined
[21:53] * lizmat checks again

[21:54] <lizmat> Unhandled exception in code scheduled on thread 4493213696

[21:54] <lizmat> Cannot find method 'Mu'

[21:54] <lizmat>   in block  at src/gen/m-CORE.setting:17660

[21:54] <lizmat>   in block  at src/gen/m-CORE.setting:17657

[21:54] <timotimo> huh, yikes

[21:55] <lizmat> seems like there is nothing in the queue ?

[21:55] <lizmat> aka, $task := Mu

[21:56] <lizmat> is "Thread.start(:app_lifetime" NYI ?

[21:57] <jnthn> Queue *should* block...

[21:58] <jnthn> :app_lifetime is passed down to Moar and stashed, but I don't ink it acts upon it.

[21:58] <jnthn> *think

[22:01] <lizmat> anyway, I thought I'd fix some low hanging fruit in the concurrency stuff before working on my slides again

[22:03] *** lustlife left
[22:03] <jnthn> :)

[22:07] *** denisboyun left
[22:08] *** denis_boyun joined
[22:10] *** Rotwang left
[22:12] <FROGGS> lib/Perl6/TypeGraph.pm

[22:12] <FROGGS> ===SORRY!===

[22:12] <FROGGS> p6captureouters target must be a CodeRef

[22:13] *** PerlJam left
[22:13] *** PerlJam joined
[22:14] *** sergot left
[22:14] *** sergot joined
[22:14] <jnthn> FROGGS: ah, that's the one that hung on Moar?

[22:14] <FROGGS> jnthn: yes

[22:15] <jnthn> I'll bet those two failures are related.

[22:15] <FROGGS> I will not bet against that :o)

[22:17] <FROGGS> TimToady: btw, I propose we allow: use Foo::Bar:ver<v1.2> <&baz> if $*VM<name> eq 'parrot';

[22:18] <lizmat> FROGGS: a conditional use ?

[22:18] <FROGGS> yes

[22:18] <lizmat> what does the <&baz> mean?

[22:18] <FROGGS> import that sub

[22:18] <lizmat> export ?

[22:18] <lizmat> ok

[22:19] <timotimo> that's kind of scary, though

[22:19] <FROGGS> I just did that to show the ordering

[22:19] <FROGGS> timotimo: see the backlog... evaling pir code that is put into a heredoc is even worse IMO

[22:19] <lizmat> I'm not sure how that would work with serialization

[22:20] <timotimo> aye

[22:20] <FROGGS> lizmat: if the condition is not true, it is like you never put that use there IMO

[22:21] *** rindolf left
[22:22] <lizmat> but if you serialized that module with/without (wrote to disc) and then later tried to run with a different VM ?

[22:22] <timotimo> er, would that ever work?

[22:23] <lizmat> I'm not sure

[22:23] <lizmat> but allowing this type of thing

[22:23] <lizmat> would make it impossible for sure  :-)

[22:23] <FROGGS> lizmat: when we precompile things, then only for a single vm

[22:23] <FROGGS> and for only the current compiler installation

[22:23] <FROGGS> that stuff is not portable anyway

[22:24] <lizmat> but can different VM's share the same installed modules?

[22:24] <FROGGS> only the source

[22:24] <lizmat> so at least compiled modules need to have some distinguishing extension to allow them to co-exist in the same installed modules tree

[22:24] <jnthn> They can't share the compiled output.

[22:25] <jnthn> lizmat: They already do: .pir, .jar and .moarvm.

[22:25] <jnthn> Can't expect MoarVM to run JVM bytecode, or vice versa :)

[22:25] <lizmat> ok, then I have no qualms about allowing conditional use  :-)

[22:26] <FROGGS> I guess TimToady will have some complaints, and I hope he knows an answer to our current problem of backend specific modules like MIME::Base64

[22:27] <FROGGS> (except than "fix require and precomp")

[22:27] *** yakudza joined
[22:28] *** nebuchadnezzar left
[22:29] * TimToady can't think about anything till he gives his talk in a few hours

[22:29] *** nebuchadnezzar joined
[22:30] <FROGGS> yeah, I know that feeling :o)

[22:30] <FROGGS> TimToady: where is he?

[22:31] *** REPLeffect left
[22:36] <araujo> TimToady, talk about?.. will be streamed? :)

[22:44] <lizmat> sleeping a short noght

[22:45] <lizmat> night rather&

[22:45] <FROGGS> gnight lizmat 

[22:59] <FROGGS> rj* and mj* are updated here: https://gist.github.com/FROGGS/0ea5537eb675588baaa2

[23:05] *** denis_boyun left
[23:07] *** spider-mario left
[23:15] <jnthn> FROGGS: Checking latest. 

[23:15] <jnthn> Down to 1 JVM build problem :)

[23:16] <timotimo> \o/

[23:16] <FROGGS> yeah, I left out the Digest::MD5 I fixed locally, but I need to PR that tomorrow

[23:17] <jnthn> Lots of JVM test failures still, though. Hm.

[23:17] <FROGGS> yes :/

[23:18] <dalek> zavolaj: 91ca678 | (Tobias Leich)++ | t/CompileTestLib.pm:

[23:18] <dalek> zavolaj: fixed typo: libraires -> libraries

[23:18] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/91ca678fe1

[23:18] <dalek> zavolaj: 05ba4c3 | jonathan++ | t/CompileTestLib.pm:

[23:18] <dalek> zavolaj: Merge pull request #34 from FROGGS/patch-2

[23:18] <dalek> zavolaj: 

[23:18] <dalek> zavolaj: fixed typo: libraires -> libraries

[23:18] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/05ba4c31ed

[23:18] <dalek> zavolaj: 4330e29 | (Tobias Leich)++ | t/02-simple-args.c:

[23:18] <dalek> zavolaj: fix for: warning: too many arguments for format [-Wformat-extra-args]

[23:18] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/4330e29afb

[23:18] <dalek> zavolaj: 1662d4a | jonathan++ | t/02-simple-args.c:

[23:18] <dalek> zavolaj: Merge pull request #33 from FROGGS/patch-1

[23:18] <dalek> zavolaj: 

[23:18] <dalek> zavolaj: fix for: warning: too many arguments for format [-Wformat-extra-args]

[23:18] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/1662d4a797

[23:20] <jnthn> I thought the uri issue was gonna be resolved with the role outers fix I did. Evidently not...

[23:21] <dalek> Heuristic branch merge: pushed 29 commits to nqp/jastcompiler by arnsholt

[23:22] <arnsholtAtHome> jnthn: Line annotations was exactly it. jastcompiler and master now get same spectest behaviour

[23:22] <timotimo> oooooh! :D

[23:22] <jnthn> arnsholtAtHome: Great! :)

[23:22] <japhb> Time to merge?

[23:23] <arnsholtAtHome> Should be mergeable, yeah

[23:23] <arnsholtAtHome> The old JASTToJVMBytecode stuff is still there, and should be removed, though

[23:24] *** robinsmidsrod joined
[23:24] <jnthn> I'm fine with merging. We're weeks away from the monthly.

[23:24] <jnthn> japhb: btw, the moar-conc merge yesterday incidentally should have improved performance a bit with regard to concurrent things on JVM.

[23:25] <japhb> jnthn: Oh?  That's excellent news.  What changed?

[23:27] <japhb> *sigh* r-m from yesterday segfaults after a few seconds of running my spawn-a-pile-of-subprocesses tool, and the children are able to print to the terminal still ...

[23:27] <jnthn> japhb: There's some nqp:: ops and REPRs for stuff in place now, so we don't do it all through the JVM's interop layer.

[23:27] <japhb> (well, at all)

[23:27] <japhb> excellent.

[23:28] * jnthn tries to figure what the "(well, at all)" attaches to.

[23:28] <jnthn> japhb: There'll still most certainly be bugs in that area.

[23:29] <jnthn> japhb: It was merged out of "can get feedback" rather than "as ready as the JVM"

[23:30] <japhb> jnthn: Normally the children's autoput would be captured by a qx.  But with that process dead ... they talk to the terminal.  I should think they should get a SIGPIPE instead, which indicates something isn't set up right during spawn.

[23:30] <japhb> jnthn: Oh sure, I recognize that.  I just was hoping to see it in action, but my favorite test didn't work, so now I have to try something simpler.

[23:31] <jnthn> japhb: Does it explicitly use threads, or is it working with promises?

[23:31] <japhb> Promises.

[23:33] *** dmol left
[23:33] <arnsholtAtHome> I'll try to get the merge and other stuff done tomorrow. Sleep now

[23:33] <arnsholtAtHome> G'nite &

[23:33] <jnthn> 'night

[23:34] <japhb> My uses of thread explicitly: Checking ::('Thread') to see if it's running on a concurrent backend; setting the scheduler to ThreadPoolScheduler.new(:max_threads(17 * $jobs)); printing $*THREAD.id in some debugging code.

[23:34] <japhb> g'night arnsholtAtHome 

[23:35] <jnthn> ok

[23:35] <jnthn> I need to set myself up some stress tests on this stuff.

[23:36] <japhb> Worth rebuilding today (meaning, have you done stability fixes to r-m since the merge)?

[23:36] *** BenGoldberg joined
[23:38] <jnthn> No

[23:38] <jnthn> Been working on JVM-related fixes to get towards rj-*, and some other Moar stuff

[23:40] *** Adriaaan left
[23:40] *** dmol joined
[23:41] *** colomon joined
[23:44] *** dmol left
[23:47] <japhb> Hmmm, under r-j my threaded program is hanging on exit now (it would normally print its computed output and exit the program).

[23:48] <jnthn> Does it print the output?

[23:48] <FROGGS> personally I don't like hangs very much

[23:49] <jnthn> lizmat reported a tst that seemed to hang at exit. Unfortunately it didn't show up when running with evalserver.

[23:49] <jnthn> *test

[23:49] <jnthn> So I missed it.

[23:49] <jnthn> It's on my todo list to look at it, but tomorrow. :)

[23:50] <FROGGS> gnight

[23:50] <jnthn> 'night, #perl6

[23:50] <japhb> jnthn: Yeah, it did print the output.

[23:50] <japhb> Good night, sleep well.

[23:50] <jnthn> japhb: OK, then hopefully it's same issue

[23:50] <timotimo> gnite jnthn :)

[23:50] <jnthn> o/

[23:50] <timotimo> i was wondering

[23:51] <timotimo> are we pessimizing every for without a -> $foo because we have <-> $_ every time and may not be using it at all?

[23:51] <timotimo> as in: we have "is rw" on that every time but we may not be writing to $_

[23:55] *** fuad joined
