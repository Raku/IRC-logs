[00:01] <dalek> specs: 9b8da72 | (Stéphane Payrard)++ | S03-operators.pod:

[00:01] <dalek> specs: corrected meaning of .^ operator

[00:01] <dalek> specs: review: https://github.com/perl6/specs/commit/9b8da72128

[00:02] *** cognome left
[00:02] *** xenoterracide_ joined
[00:03] *** cognome joined
[00:06] *** aborazmeh joined
[00:07] *** cognome left
[00:09] *** colomon left
[00:21] *** kurahaupo is now known as kurahaupo_

[00:36] *** colomon joined
[00:47] *** colomon left
[01:05] *** colomon joined
[01:06] <BenGoldberg> m: &dd.WHAT.say

[01:06] <camelia> rakudo-moar e63078: OUTPUT«(Sub)␤»

[01:07] <BenGoldberg> m: dd(2..3);

[01:07] <camelia> rakudo-moar e63078: OUTPUT«No such method 'name' for invocant of type 'Range'␤  in sub dd at src/gen/m-CORE.setting:2561␤  in block <unit> at /tmp/QNp14g1IjH:1␤␤»

[01:08] <BenGoldberg> m: my $r = 2..3; dd($r);

[01:08] <camelia> rakudo-moar e63078: OUTPUT«$r = 2..3␤»

[01:08] <BenGoldberg> m: dd my $r = 2..3;;

[01:08] <camelia> rakudo-moar e63078: OUTPUT«$r = 2..3␤»

[01:08] *** FROGGS_ joined
[01:11] *** eupcan277 left
[01:12] *** FROGGS left
[01:13] *** eupcan277 joined
[01:15] *** raiph joined
[01:18] *** bobbinnumerous left
[01:33] *** raiph left
[01:36] <timotimo> dd should probably check if there's a .VAR available

[01:36] <timotimo> as in $the_thing.VAR ~~ Scalar or something

[01:38] <japhb> Was someone trying to reach me?  This window had a highlight, but I don't see anything in my scrollback (which doesn't go back very far in clock time, you guys must have been chatty the last couple days.  :-)

[01:42] <timotimo> hey japhb 

[01:42] <timotimo> have you seen my latest benchmarks?

[01:43] <japhb> timotimo: Last I saw were from early this week.

[01:43] <timotimo> http://t.h8.lv/p6bench/2014-09-20-history_rakudo_2.html - check out the spikes upwards for push-related benchmarks

[01:43] <timotimo> FROGGS has been notified about the problems with the json parse benchmarks and was investigating and improving that somewhat earlier today

[01:45] <japhb> timotimo: Woah, nice!

[01:45] <japhb> And I was just about to ask about the JSON parsing.  :-)

[01:45] *** ilbot3 left
[01:45] <timotimo> yup

[01:45] <timotimo> we're going to fix it

[01:45] <timotimo> the new code ought to be faster than the old one was when we've worked out the kinks

[01:46] <timotimo> and then we're almost "faster than the last release across the board" as well as "faster than the second to last release across the board"

[01:46] <timotimo> at leöast i think so

[01:46] <timotimo> AFK again

[01:47] *** ilbot3 joined
[01:48] <japhb> Which would be really nice on both points

[02:00] <masak> morning, #perl6

[02:01] <japhb> o/

[02:27] *** colomon_ joined
[02:30] *** colomon left
[02:30] *** colomon_ is now known as colomon

[02:31] * masak is intrigued by https://rt.perl.org/Ticket/Display.html?id=122810

[02:33] <jnthn> morning, #perl6

[02:35] <jnthn> masak: That one looks pretty odd...

[02:35] <ingy> morning jnthn

[02:37] <masak> before I had read through all of it, I had already done the experiment and golfed it down to the same linecount (5655) as in the bug report.

[02:37] *** araujo joined
[02:37] *** araujo left
[02:37] *** araujo joined
[02:41] *** noganex_ joined
[02:43] *** noganex left
[02:45] *** xenoterracide_ left
[02:48] *** xenoterracide_ joined
[02:56] *** xenoterracide_ left
[02:57] *** xenoterracide_ joined
[03:02] *** xenoterracide_ left
[03:05] *** xenoterracide_ joined
[03:09] *** xenoterracide_ left
[03:09] *** xenoterracide_ joined
[03:17] *** eupcan277_d joined
[03:17] *** eupcan277 left
[03:21] *** xenoterracide_ left
[03:30] *** xenoterracide_ joined
[03:31] <jnthn> Curiously,

[03:31] <jnthn> type src\gen\m-CORE.setting | perl6-m -e "(bag slurp.words)"

[03:31] <jnthn> Too many arguments in flattening array.

[03:32] <jnthn> sub bag(*@args --> Bag) { Bag.new(|@args) }

[03:33] <jnthn> eek, flattening a slurpy means grabbing all its elems in flattening context...

[03:33] <jnthn> Which will be slow and hit limits.

[03:34] <jnthn> And method new already slurps so there's no point to the flattening there at all

[03:39] * jnthn finally manages to also download the gutenburg book from the ticket

[03:42] <jnthn> yay, with my changes it works, and gives results in 6.4s

[03:42] * jnthn profiles it out of curiosity

[03:47] *** BenGoldberg left
[03:49] <japhb> How is it looking?

[03:50] <jnthn> Most time is spent constructing the bag, I think, but that involves doing the words bit too

[03:54] <jnthn> An obvious optimization in sort gets us to 5.8s.

[04:00] <jnthn> The GC is quite fun to watch in the profile

[04:00] <jnthn> While we're building the bag some objects are being retained

[04:01] <jnthn> Once we reach the later part of the program where it's just sorting, we're promoting nothing.

[04:01] *** aborazmeh left
[04:02] *** eupcan277_d left
[04:02] <jnthn> Anyway, seems I have a bug fix and two performance improvements. I'll take that. Spectest time. :)

[04:03] <jnthn> Building the profiler is one of the best time investments I've made of late... :)

[04:03] *** eupcan277 joined
[04:18] <dalek> rakudo/nom: a8267b4 | jonathan++ | src/core/List.pm:

[04:18] <dalek> rakudo/nom: Bring a comment in line with reality.

[04:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a8267b418c

[04:18] <dalek> rakudo/nom: 0d4bc70 | jonathan++ | src/core/set_operators.pm:

[04:18] <dalek> rakudo/nom: Don't fatten args to Bag.new/Mix.new.

[04:18] <dalek> rakudo/nom: 

[04:18] <dalek> rakudo/nom: They already slurp, so there's no reason to do this. In fact, there's

[04:18] <dalek> rakudo/nom: a very good reason not to: flattening the args may produce a huge

[04:18] <dalek> rakudo/nom: number of them, which is painful performance wise and hits limits

[04:18] <dalek> rakudo/nom: on JVM and on MoarVM too. This appears to fix the issue reported in

[04:18] <dalek> rakudo/nom: RT#122810.

[04:18] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122810

[04:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0d4bc7031f

[04:19] <dalek> rakudo/nom: 39a299f | jonathan++ | src/core/List.pm:

[04:19] <dalek> rakudo/nom: Optimize sorting block.

[04:19] <dalek> rakudo/nom: 

[04:19] <dalek> rakudo/nom: Since we know we can never be < 0 because we're sorting an indices

[04:19] <dalek> rakudo/nom: array, we can go directly to .at_pos.

[04:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/39a299fae0

[04:42] *** eupcan277 left
[04:42] *** eupcan277_y joined
[05:05] *** kurahaupo_ left
[05:14] *** eupcan277_y left
[05:20] *** eupcan277_y joined
[05:24] <japhb> Yes, time spent on the profiler is pretty much near the top of your good ideas this summer.  ;-)

[05:24] <japhb> (And that's saying something!)

[05:37] *** mr-foobar left
[05:51] <nwc10> T-0:50

[05:51] <nwc10> http://www.spacex.com/webcast/

[05:52] <nwc10> as in 20 seconds now

[05:58] *** kaare_ joined
[06:21] *** telex left
[06:22] *** telex joined
[06:24] *** uniejo joined
[06:24] *** uniejo left
[06:26] *** mberends joined
[06:35] *** mr-foobar joined
[06:38] *** xenoterracide_ left
[06:54] <masak> https://twitter.com/SpaceX/status/513572559611105280 is truly gorgeous.

[06:58] <jnthn> Wow!

[06:59] <jnthn> long exposure ftw

[07:06] *** darutoko joined
[07:25] <FROGGS_> timotimo: no, was sleepy... will do that today

[07:26] <dalek> star: f21eb1c | (Tobias Leich)++ | tools/star/release-guide.pod:

[07:26] <dalek> star: volunteer for this month's release

[07:26] <dalek> star: review: https://github.com/rakudo/star/commit/f21eb1c7c1

[07:33] <jnthn> FROGGS_++

[07:38] *** jaffa4 joined
[08:00] *** denis_boyun joined
[08:04] *** spider-mario joined
[08:04] *** mr-foobar left
[08:05] *** mr-foobar joined
[08:15] *** mr-foobar left
[08:16] *** mr-foobar joined
[08:24] *** masak left
[08:25] *** synopsebot left
[08:25] *** pmichaud left
[08:25] *** dalek left
[08:26] *** sergot left
[08:26] *** PerlJam left
[08:26] *** [Coke] left
[08:26] *** Util left
[08:29] *** Juerd left
[08:30] *** tadzik left
[08:30] *** Juerd joined
[08:32] *** kjs_ joined
[08:35] *** Juerd left
[08:36] <FROGGS_> jnthn: there is an nqp::coerce_sI, but why isnt there an nqp::coerce_si?

[08:37] <FROGGS_> I'd like to use that in .MATCH

[08:41] *** kjs_ left
[08:43] *** hugme left
[08:43] *** Juerd joined
[08:44] *** denis_boyun left
[08:46] *** denis_boyun_ joined
[08:48] *** Juerd left
[08:50] *** denis_boyun_ left
[08:51] *** denis_boyun joined
[08:52] *** synopsebot joined
[08:53] *** [Coke] joined
[08:53] *** masak joined
[08:53] *** PerlJam joined
[08:53] *** ponbiki left
[08:53] *** masak is now known as Guest57058

[08:55] *** Util joined
[08:56] *** leont joined
[08:57] *** tadzik joined
[08:57] *** pmichaud joined
[08:59] *** sergot joined
[09:00] *** mr-foobar left
[09:03] *** Ven joined
[09:04] *** hugme joined
[09:04] *** Juerd joined
[09:04] *** ChanServ sets mode: +v hugme

[09:04] *** dalek joined
[09:04] *** ChanServ sets mode: +v dalek

[09:08] *** mr-foobar joined
[09:14] *** kjs_ joined
[09:15] *** SamuraiJack_ joined
[09:25] *** denis_boyun left
[09:30] <dalek> rakudo/optimatch: 215672b | (Tobias Leich)++ | src/core/Cursor.pm:

[09:30] <dalek> rakudo/optimatch: first (untested) optimized version of .MATCH

[09:30] <dalek> rakudo/optimatch: review: https://github.com/rakudo/rakudo/commit/215672bd71

[09:31] *** SamuraiJack_ left
[09:31] *** SamuraiJack_ joined
[09:43] <FROGGS_> why do we have native nums in that bloody $curcap?

[09:43] *** eupcan277_y left
[09:44] *** Guest57058 is now known as masak_grr

[09:49] *** denis_boyun joined
[09:54] *** denis_boyun left
[09:55] *** denis_boyun joined
[09:56] *** Ven left
[09:59] *** denis_boyun left
[10:04] *** SamuraiJack_ left
[10:04] *** SamuraiJack_ joined
[10:06] *** kjs_ left
[10:12] *** erkan joined
[10:12] *** erkan left
[10:12] *** erkan joined
[10:26] <nine> ggoebel11111113: I'm not sure if that would be really useful. Right now you couldn't use any Perl 6 modules in your script if Inline::Perl5 were executing it right from the start. Since you need to have Perl 5 installed to use Inline::Perl5, it would be more useful to specify perl 5 in your shebang line.

[10:28] <nine> ggoebel11111113: But now that I think of it: accessing Perl 6 modules from Perl 5 code running in Inline::Perl5 would be rather simple. I'd just have to create a virtual "Perl6" module with useful methods like "use" and "invoke" same as I do it with Perl6::Object already.

[10:34] *** kjs_ joined
[10:34] *** leont left
[10:34] *** denis_boyun_ joined
[10:34] <dalek> rakudo/nom: 9aa8f6e | (Elizabeth Mattijsen)++ | src/core/IO/Spec/Win32.pm:

[10:34] <dalek> rakudo/nom: Fix another case of double slurpy

[10:34] <dalek> rakudo/nom: 

[10:34] <dalek> rakudo/nom: There shouldn't be any more in the core now.

[10:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9aa8f6e442

[10:44] <carlin> ... It's alive!

[10:44] <carlin> https://github.com/carbin/stomp

[10:45] <lizmat> carlin++

[10:46] <lizmat> m: say 0 ...^ *>5   # why is this warning ?

[10:46] <camelia> rakudo-moar 39a299: OUTPUT«Code object coerced to string (please use .gist or .perl to do that)  in block <unit> at /tmp/0Jy5yxhEiv:1␤␤0 1 2 3 4 5␤»

[10:47] <lizmat> r: say 0 ...^ *>5 

[10:47] <camelia> rakudo-{parrot,moar} 39a299: OUTPUT«Code object coerced to string (please use .gist or .perl to do that)  in block <unit> at /tmp/tmpfile:1␤␤0 1 2 3 4 5␤»

[10:47] <camelia> ..rakudo-jvm 39a299: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[10:47] <lizmat> at least it's consistent

[10:51] *** Alina-malina joined
[11:03] *** Ven joined
[11:05] <jaffa4> has anyone tried to program together?

[11:05] <jaffa4> using some kind of tool?

[11:05] <jaffa4> to fix bugs in Perl6 compiler?

[11:06] * lizmat has only pair-programmed a few times IRL

[11:08] <jaffa4> irl?

[11:08] <lizmat> In Real Life

[11:08] <jaffa4> do you have other lives as well?

[11:09] <lizmat> some might argue I also have a life online

[11:09] * grondilu thinks that's the point of the expression "IRL"

[11:09] <jaffa4> virtula life

[11:16] <dalek> rakudo/nom: e71a9c1 | (Elizabeth Mattijsen)++ | src/core/Variable.pm:

[11:16] <dalek> rakudo/nom: Give a better error for 'my int $a is default(*)'

[11:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e71a9c117f

[11:20] <lizmat> TimToady: S02:1409 (Each) feels like a fossil

[11:20] <synopsebot> Link: http://perlcabal.org/syn/S02.html#line_1409

[11:21] <lizmat> at least I see no other mention of it apart from there, and no sign of any implementation work

[11:21] <lizmat> shall I eradicate Each ?

[11:23] *** spider-mario left
[11:23] *** kaare_ left
[11:24] <lizmat> or, now that we have more async stuff in the core, is it time to start looking at Each / Junction orderedness / unorderedness

[11:24] <lizmat> as atm I think Junctions are actually behaving as Each's ?

[11:42] *** mattp_ joined
[11:42] *** SamuraiJack_ left
[11:46] <vendethiel> carlin: https://github.com/carbin/stomp/blob/master/lib/Stomp/CLI.pm6#L9

[11:46] <vendethiel> why <>?

[11:47] <lizmat> because he doesn't like quotes ?

[11:47] <carlin> I prefer <> over ""

[11:48] *** pmurias joined
[11:49] <nine> Anyone have any idea about the fasibility of ggoebel11111113's idea to run scripts through Inline::Perl5 automatically if there's no indication that a script is written in Perl 6? S01 seems to require this form of support.

[11:51] <pmurias> it's only supposed to happen when perl6 is invoked as perl

[11:51] <yoleaux> 20 Sep 2014 20:28Z <raiph> pmurias: Does it make sense to remove https://github.com/perl6/simple-tests ?

[11:55] <nine> pmurias: so I've read. Which would be fine with me. If invoked as perl and the file ending is not .pl6 or .pm6 and there's no 'use v6;' or equivalent automatically load Inline::Perl5 and use it to run the script.

[11:55] *** spider-mario joined
[11:56] <pmurias> but currently very few/nobody runs perl6 as perl

[11:57] *** yeahnoob joined
[11:58] *** virtualsue joined
[11:59] <nine> pmurias: no wonder. It doesn't have any advantages and breaks Perl 5 scripts. But if we transparently support Perl 5 as required by S01 and lower startup time to comparable levels, this will be an important step to reunite the Perls and give up the sister languages nonsense :)

[12:00] <vendethiel> https://github.com/carbin/stomp/blob/master/lib/Stomp/CLI.pm6#L218 could use MAIN :p

[12:01] *** kurahaupo joined
[12:05] <pmurias> the only way to give up the sister languages nonsense it to improve the implementation and ecosystem of Perl 6 to a point where it surpasses Perl 5

[12:06] <carlin> vendethiel: could too, will have to look at that

[12:06] <vendethiel> pmurias: well, got to give it some time

[12:06] <lizmat> pmurias++  :-)

[12:08] <dalek> specs: 3ceec03 | (Elizabeth Mattijsen)++ | S02-bits.pod:

[12:08] <dalek> specs: Remove a bit of BagHash fossil

[12:08] <dalek> specs: 

[12:08] <dalek> specs: Bags return pairs in list context now, as mentioned above.

[12:08] <dalek> specs: review: https://github.com/perl6/specs/commit/3ceec03d9b

[12:08] <nine> pmurias: I disagree. as soon as we become downward compatible again, we can start calling Perl 6 the newer version of Perl and Perl 5 the legacy version of Perl. Newer versions of anything don't necessarily have to be better at everything. Though of course it helps adoption a lot if they are.

[12:10] <jnthn> FROGGS_: I think writing prefix:<~> in NQP actually gets you the MoarVM coerce_si equivalent

[12:12] <dalek> specs: 7101879 | (Elizabeth Mattijsen)++ | S02-bits.pod:

[12:12] <dalek> specs: Elaborate a bit about MixHash

[12:12] <dalek> specs: review: https://github.com/perl6/specs/commit/7101879539

[12:12] <jnthn> FROGGS_: As in, ~$foo

[12:12] <lizmat> TimToady: seems like PairSeq is a bit of a fossil

[12:13] <lizmat> unless you want to call the .list of Hash/Bag/Mix that ?

[12:13] <jnthn> lizmat: iirc, the each thingy is some kind of junction-like construct that retains ordering

[12:13] <lizmat> which is how Junction atm is implemented, no?

[12:14] <jnthn> It's certainly not promised to be that way, though.

[12:14] <lizmat> realize that, maybe we should randomize it before 6.0 to make sure we don't get more dependent code on that out there

[12:15] <jnthn> Worth considering

[12:17] <jnthn> http://perlcabal.org/syn/S09.html#Each calls out each as conjectural

[12:19] <vendethiel> :o. does that work??

[12:19] <vendethiel> m: (^10).each.say; #prolly not

[12:19] <camelia> rakudo-moar 9aa8f6: OUTPUT«No such method 'each' for invocant of type 'Range'␤  in block <unit> at /tmp/RgMLbzixye:1␤␤»

[12:20] <lizmat> hmmm...  so is that LHF ?

[12:21] <jnthn> lizmat: I don't see it being hard, though it's probably a bit under-spec'd

[12:21] <FROGGS_> jnthn: I want to get an int from a str

[12:21] <jnthn> Doesn't say what happens in boolen context for example

[12:21] <jnthn> FROGGS_: oh...

[12:21] <lizmat> agree about the underspeccing, hence my question to TimToady 

[12:21] *** FROGGS[mobile] joined
[12:22] <jnthn> I'd be surprised if a more concrete spec for it yielded a heck of a lot more work though

[12:22] *** zakharyas joined
[12:23] <lizmat> well, unless perceived clarity != real clarity, so rather see the spec clarified first  :-)

[12:23] <jnthn> FROGGS_: Ah...

[12:24] <jnthn> m: nqp::bind(my $int $i, '42'); say $i;

[12:24] <camelia> rakudo-moar 9aa8f6: OUTPUT«===SORRY!=== Error while compiling /tmp/elFLTw0JSf␤Unable to parse expression in argument list; couldn't find final ')' ␤at /tmp/elFLTw0JSf:1␤------> nqp::bind(my $int ⏏$i, '42'); say $i;␤    expecting any of:…»

[12:24] <jnthn> oops

[12:24] <jnthn> m: nqp::bind(my int $i, '42'); say $i;

[12:24] <camelia> rakudo-moar 9aa8f6: OUTPUT«This type cannot unbox to a native integer␤  in block <unit> at /tmp/aCwCpCYDT_:1␤␤»

[12:24] <jnthn> m: nqp::bind(my int $i, nqp::unbox_s('42')); say $i;

[12:24] <camelia> rakudo-moar 9aa8f6: OUTPUT«42␤»

[12:25] <jnthn> FROGGS_: That's a possible way

[12:25] <jnthn> Agree it ain't entirely convenient

[12:26] <FROGGS[mobile]> jnthn: don't has to be :o)

[12:27] *** masak_grr is now known as masak

[12:30] <ggoebel11111113> nine: nice to hear that the run as perl5 by default migration aspect of http://perlcabal.org/syn/S01.html may be within reach. Seems like a pretty significant deliverable. Is this still a prerequisite for 6.0?

[12:31] <lizmat> ggoebel11111113: good question, one I hope will be answered after APW

[12:31] <nine> lizmat: looking forward to that discussion :)

[12:31] <pmurias> nine: a big reason why we call Perl 6 a sister language instead of the newer version is that calling Perl 5 a legacy version hurts it's perception a lot

[12:33] <nine> pmurias: currently, yes, absolutely. I think the sister languages thing was and probably still is necessary and good. But in the long term I'd really like to but it away and bring the Perl's together. It's a main motivation for writing Inline::Perl5 for me.

[12:33] <nine> s/but/put/

[12:33] <gtodd> and perl5 keeps borrowing and porting ideas back

[12:33] <lizmat> well, some p5pers are leaving P5

[12:34] <lizmat> the latest rurban: from a mail earlier today: "So I'll stop watching this mess now, goodbye 5.22 and p5p."

[12:35] <vendethiel> what's going on in p5p?

[12:35] <pmurias> rurban has been conflicted with p5p for a long time

[12:35] <lizmat> yes, but it now seems he has given up on P5

[12:35] *** ggoebel11111114 joined
[12:35] <pmurias> he seems to be conflicted with MoarVM and diakopter

[12:35] <lizmat> or at least p5p

[12:36] <lizmat> some at p5p will say "good riddance"

[12:37] <lizmat> I would not be one of them

[12:37] *** ggoebel11111113 left
[12:39] *** ggoebel11111114 is now known as ggoebel

[12:40] <woolfy> rurban++

[12:41] <masak> I think any animosity across the p5-p6 line is senseless and in the end a kind of own goal.

[12:42] <masak> given that bubble-outsiders can barely tell p5ers and p6ers apart, having infighting across that line is only going to look like... structural weakness in the ranks.

[12:43] <ggoebel> anything which makes the line thinner++

[12:43] <ggoebel> and easier to cross in order to get work, play, and fun done...

[12:43] <masak> what the p5 people should focus on is to be accepting of and curious about p6 while preserving their own cultural heritage.

[12:43] <lizmat> going back to ggoebel's question wrt to starting in P5 land

[12:44] <lizmat> I don't really see that happening unless we have "use v5"

[12:44] <lizmat> or an Inline::Perl6 in P5 land

[12:45] <masak> what the p6 people should focus on is to be awesome and bring more of the future into equal distribution... while trying not to say "we're the next version" until it already doesn't need saying.

[12:45] <gtodd> I want p5 to adopt more bits of p6 ... like p6 formats :-)

[12:45] <masak> gtodd: there's a CPAN module.

[12:46] <gtodd> yup and it works great ... should be the default ;-)

[12:46] <gtodd> there's rperl and p2 etc

[12:48] <masak> and moe.

[12:48] <masak> I don't have a sense of which state moe got left in.

[12:48] <ggoebel> looks like perl4 is still hanging on... https://lintian.debian.org/tags/script-uses-perl4-libs-without-dep.html

[12:48] *** raiph joined
[12:49] *** tinyblak joined
[12:49] <gtodd> isn't rurban involved with p2 and rperl?

[12:50] <lizmat> p2 I know for sure, rperl I'm not so sure about

[12:50] <ggoebel> IMHO perl6 is more likely to get installed (or linked) to /usr/bin/perl ...if s01 is implemented

[12:52] <lizmat> what is a PairSet ?   seems like a fossil in S02:1691

[12:52] <synopsebot> Link: http://perlcabal.org/syn/S02.html#line_1691

[12:52] <jnthn> lizmat: Never heard of it :)

[12:53] <lizmat> "Likewise, C<%x> may be bound to any object that does the C<Associative> role, such as C<Pair>, C<PairSet>, C<Set>, C<Bag>, C<Mix>, or C<Capture>.

[12:53] <jnthn> Yeah. Looks like fossil

[12:53] <jnthn> Just toss it or pick a more apporpriate example type

[12:53] <jnthn> Also

[12:54] <jnthn> uh, no also :)

[12:54] <dalek> specs: f9ac5c9 | (Elizabeth Mattijsen)++ | S02-bits.pod:

[12:54] <dalek> specs: Remove reference to PairSet, considered a fossil

[12:54] <dalek> specs: review: https://github.com/perl6/specs/commit/f9ac5c9d9f

[12:58] <lizmat> "    $^foo       self-declared formal positional parameter"

[12:58] <lizmat> the ^ twigil ???

[13:00] <FROGGS[mobile]> yes

[13:01] <lizmat> ah, of courtse

[13:01] <lizmat> course

[13:01] <lizmat> duh  :-)

[13:02] <jnthn> That one's even long implemented... :)

[13:02] <lizmat> the phrasing is what too me off guard

[13:02] <lizmat> *took

[13:04] *** kaare_ joined
[13:07] <timotimo> o/

[13:09] <lizmat> timotimo o/

[13:09] <lizmat> m: 'my $s = anon sub tract($n) { say $n; tract($n-1) if $n }; $s(5)

[13:09] <lizmat> m: my $s = anon sub tract($n) { say $n; tract($n-1) if $n }; $s(5)

[13:09] <camelia> rakudo-moar e71a9c: OUTPUT«(timeout)»

[13:09] <camelia> rakudo-moar e71a9c: OUTPUT«===SORRY!=== Error while compiling /tmp/Wx9jTYZ8p7␤Undeclared routine:␤    tract used at line 1␤␤»

[13:10] <lizmat> this should work according to S02:2035

[13:10] <synopsebot> Link: http://perlcabal.org/syn/S02.html#line_2035

[13:10] <jnthn> aye, nyi

[13:10] <lizmat> is that a NYI or a rakudobug of anon sub

[13:10] <jnthn> It was added to spec some time after anon subs worked in Rakudo, sa I remember.

[13:11] <jnthn> LHFish

[13:11] <lizmat> :-)

[13:13] <dalek> specs: 886b1ec | (Elizabeth Mattijsen)++ | S02-bits.pod:

[13:13] <dalek> specs: Make examples more cut/pastable

[13:13] <dalek> specs: review: https://github.com/perl6/specs/commit/886b1ec4ac

[13:14] *** rjbs left
[13:15] <dalek> nqp-js: 46fc11b | (Pawel Murias)++ | src/vm/js/ (4 files):

[13:15] <dalek> nqp-js: Implement nqp::{open,tellfh,readlinefh,readallfh,printfh,closefh}

[13:15] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/46fc11ba6d

[13:15] <dalek> nqp-js: a7ad086 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[13:15] <dalek> nqp-js: Use a :sideffects modifier instead of add_sideffect_op.

[13:15] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/a7ad086e51

[13:15] <dalek> nqp-js: cf8a087 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[13:15] <dalek> nqp-js: Extra blank line.

[13:15] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/cf8a087f35

[13:15] <dalek> nqp-js: dc54025 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[13:15] <dalek> nqp-js: Refactor for the DRY principle.

[13:15] <dalek> nqp-js: 

[13:15] <dalek> nqp-js: Omit the code generation callback for ops that just call a nqp.op.$opname

[13:15] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/dc54025dff

[13:16] <pmurias> masak: I think moe was abandoned

[13:17] *** Ven left
[13:17] <masak> lizmat: looks like PairSet was supposed to go away as of cf42c47703cc126f6cad2c82d5d923e8ab00a85e

[13:18] <dalek> specs: 281d8f1 | (Elizabeth Mattijsen)++ | S02-bits.pod:

[13:18] <dalek> specs: Mention handling circular references in .perl

[13:18] <dalek> specs: review: https://github.com/perl6/specs/commit/281d8f1877

[13:18] <masak> lizmat: also, looking at the commits involved, I'm not at all sure it wasn't all a misspelling of "PairSeq"...

[13:18] <lizmat> ah, hhmmm....

[13:19] <lizmat> could be, but PairSeq also seems a fossil

[13:19] <masak> yeah.

[13:19] <jnthn> There once was a type called Seq, which is no more.

[13:19] <masak> I currently lean towards "not a typo, but was renamed one to the other"

[13:19] <masak> m: say Seq

[13:19] <camelia> rakudo-moar e71a9c: OUTPUT«(Seq)␤»

[13:19] *** BenGoldberg joined
[13:19] <masak> Seq lives on as an empty class in the setting ;)

[13:19] * masak .oO( ghost type )

[13:19] <lizmat> and quite a few menitions in the spec

[13:20] <lizmat> *mentions

[13:20] <masak> I don't particularly like the meme "kill it with fire"... but at this point, I don't think we need the Seq type.

[13:20] <pmurias> masak: looking at the moe tests it looks like a Perl5/Perl6 hybrid or some very early version of Perl 6

[13:20] <masak> pmurias: aye.

[13:21] <masak> pmurias: I get the feeling stevan realized that his project basically ended up borrowing a lot of ideas from Perl 6.

[13:23] <dalek> specs: 66e6fe9 | (Elizabeth Mattijsen)++ | S03-operators.pod:

[13:23] <dalek> specs: Assume PairSeq was typo for fossil PairSet

[13:23] <dalek> specs: review: https://github.com/perl6/specs/commit/66e6fe9432

[13:23] <lizmat> #dammitstevan  :-)

[13:24] *** teodozjan joined
[13:24] <masak> something like "a project that wants to be a linear combination of p5 and p6, but looks to p6 for sanity tiebreakers... ends up converging on p6"

[13:25] <masak> or at least it becomes p6 without the risky/interesting parts, like roles and grammars.

[13:25] <jnthn> m: say Seq.^mro # morbid curiosity...

[13:25] <camelia> rakudo-moar e71a9c: OUTPUT«(Seq) (List) (Iterable) (Cool) (Any) (Mu)␤»

[13:25] <dalek> nqp-js: ffc7791 | (Pawel Murias)++ | tools/build/ (2 files):

[13:25] <dalek> nqp-js: Update the Makefile, so that it reinstalls the runtime when the new runtime files change.

[13:25] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/ffc7791e26

[13:26] <jnthn> Yeah, I think Seq's continued existence in Rakudo is fossil

[13:26] <teodozjan> hi, is there any fast way to list loaded classes/modules? I tried to use @*INC but I didn't find any usable method on CompUnitRepo

[13:26] <nine> lizmat: why would Inline::Perl6 be a prerequisite?

[13:27] <lizmat> jnthn: I will remove Seq from setting first in one revertable commit, and then remove from spec later

[13:27] <jnthn> lizmat: wfm

[13:29] *** Ven joined
[13:29] <masak> jnthn:

[13:29] <masak> m: use MONKEY_TYPING; augment class Mu { multi method gist(Mu:U $type:) is default { "({$type ~~ Any ?? $type.^name !! "M" ~ "o" x 100})" } }; say Seq.^mro

[13:29] <camelia> rakudo-moar e71a9c: OUTPUT«(Seq) (List) (Iterable) (Cool) (Any) (Moooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo)␤»

[13:29] <tadzik> :D

[13:31] <timotimo> m)

[13:31] <lizmat> .oO( in dutch, the pronunciation of "Mu" very much sounds like the word for "tired" )

[13:36] *** raiph left
[13:36] <dalek> rakudo/nom: 3eae3c3 | (Elizabeth Mattijsen)++ | src/core/ (3 files):

[13:36] <dalek> rakudo/nom: Eradicate Seq with fire

[13:36] <dalek> rakudo/nom: 

[13:36] <dalek> rakudo/nom: Oddly enough, src/core/Seq.pm was not included in an backend setting.

[13:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3eae3c3fcf

[13:37] <jnthn> m: Mu.^set_name('M' ~ 'o' x 100); say Mu # anything you can do, I can do meta :P

[13:37] <camelia> rakudo-moar e71a9c: OUTPUT«(Moooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo)␤»

[13:37] <dalek> roast: c37d1b7 | (Elizabeth Mattijsen)++ | S02-types/WHICH.t:

[13:37] <dalek> roast: Eradicate Seq with fire

[13:37] <dalek> roast: review: https://github.com/perl6/roast/commit/c37d1b7e76

[13:39] *** BenGoldberg left
[13:42] <lizmat> m: say (item <a b c>, <d e f>).WHAT   # would have expected Parcel here, not Array

[13:42] <camelia> rakudo-moar e71a9c: OUTPUT«(Array)␤»

[13:44] <jnthn> m: say (item <a b c>, <d e f>).perl

[13:44] <camelia> rakudo-moar e71a9c: OUTPUT«["a", "b", "c", "d", "e", "f"]␤»

[13:45] <lizmat> multi sub item(*@a)         { my $ = @a }

[13:46] <masak> ooh, .^set_name

[13:46] <lizmat> I would have expected a parcel of 2 parcels there

[13:46] <jnthn> lizmat: Itemized, presumably?

[13:46] <jnthn> lizmat: uh, the outer parcel I mean...

[13:46] *** raiph joined
[13:46] <lizmat> yes

[13:46] <jnthn> m: say (<a b c>, <d e f>).WHAT

[13:46] <camelia> rakudo-moar e71a9c: OUTPUT«(Parcel)␤»

[13:47] <jnthn> opos

[13:47] <vendethiel> the call binds loosely :)

[13:47] <jnthn> m: say (<a b c>, <d e f>).item.WHAT

[13:47] <camelia> rakudo-moar e71a9c: OUTPUT«(Parcel)␤»

[13:47] <jnthn> m: say (<a b c>, <d e f>).item.perl

[13:47] <camelia> rakudo-moar e71a9c: OUTPUT«$(("a", "b", "c"), ("d", "e", "f"))␤»

[13:47] <jnthn> lizmat: Like this I guess... :)

[13:47] <lizmat> yup

[13:47] <jnthn> I think that makes sense

[13:47] <jnthn> Can be done with the vmargarray trick

[13:48] <jnthn> Same one infix:<,> uses I guess

[13:48] <lizmat> vmargarray ??

[13:48] <lizmat> missp?

[13:48] <jnthn> my sub infix:<,>(|) is pure { nqp::p6parcel(nqp::p6argvmarray(), nqp::null());

[13:48] <jnthn> }

[13:49] <jnthn> bah, linebreak got lost.

[13:49] <vendethiel> m: .say for @((<a b c>, <d e f>).item)

[13:49] <camelia> rakudo-moar e71a9c: OUTPUT«a␤b␤c␤d␤e␤f␤»

[13:49] <jnthn> We may want to define

[13:49] <jnthn> multi item(\x) { x.item }

[13:50] <jnthn> multi item(|) { my $ = nqp::p6parcel(nqp::p6argvmarray(), nqp::null()); }

[13:50] <jnthn> I think those two between them would give sane results. Worth a try, at lesat...

[13:50] <lizmat> trying

[13:50] <jnthn> lizmat++

[13:52] <lizmat> x.item doesn't make sense, as Mu.item just returns x

[13:55] *** PZt left
[14:00] <jnthn> lizmat: That's a totally fine answer in general.

[14:00] <jnthn> lizmat: item 42 should just be 42

[14:01] <jnthn> lizmat: Things that don't behave like items should already be overriding item to do the righ tthing.

[14:01] <jnthn> *right

[14:01] <jnthn> m: say (1,2,3).item.perl # as Parcel does, for example

[14:01] <camelia> rakudo-moar e71a9c: OUTPUT«$(1, 2, 3)␤»

[14:02] <lizmat> hmmm... we seem to have a spectest testing that (item $a, $b) makes an Array

[14:02] <lizmat> so I can assume the spectest is faulty

[14:03] <jnthn> Yeah, that feels a bit off to me.

[14:03] <lizmat> that was the only spectest issue

[14:04] <jnthn> OK, in that case I think the change is kosher

[14:14] *** kjs_ left
[14:14] <gtodd> jnthn: lizmat: it appears that rakudo/rakudo/commit/a8267b418c does fix RT#122810 (possibly my first bug report) but I'm trying to grok the commit message: "Don't fatten args to Bag.new/Mix.new. They already slurp, so there's no reason to do this ..."

[14:14] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122810

[14:15] <lizmat> s/fatten/flatten

[14:15] <jnthn> omg, did I really type fatten?

[14:15] <lizmat> yesh

[14:15] <gtodd> fatten should be flatten ;-) but ... hehe so they were getting flattened twice in some sort of loop

[14:15] <jnthn> *lol*

[14:15] <jnthn> fail

[14:16] <gtodd> jnthn: sometimes a typo is just a typo ... sometimes it's a freudian slip :-D

[14:16] <jnthn> gtodd: the issue is sub foo(*@a) { Foo.new(|@a) }, then call foo(@a_really_huge_array) will go off and try to make a callsite that is array-sized.

[14:17] <jnthn> Which is a hugely inefficient thing to do once the array gets large.

[14:17] <gtodd> oh ... for no reason ?  anyway yeah it fixes it and makes (or something else does) it faster

[14:17] <jnthn> Reading being that the slurpy flattens.

[14:17] <jnthn> *Reason

[14:17] <gtodd> excellent ... my bug report worked!! :-D

[14:17] <jnthn> I should probably give up on typing today. :)

[14:18] <jnthn> Glad it's faster. It ran in < 6s on my laptop here, after I did the .sort opt too...

[14:18] <gtodd> heh I have no idea what my old rt btcard account even was but so far with my new ID bugs reported resulting in a fix I'm batting 100 heheh

[14:19] <jnthn> Talking of bug reports, RT#122756 is a fun one...

[14:19] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122756

[14:19] <jnthn> The analysis suggested by the subject of the ticket is actually wrong

[14:19] <gtodd> oopsie I changed the command  perl6 -e '(bag slurp.words.grep( *.chars > 5 )).pairs.sort( *.value).reverse[^10].say'; probably the reason 

[14:19] <gtodd> why it was faster

[14:19] <jnthn> m: role Foo {}; say .WHAT for pi but Foo, [pi] but Foo;

[14:19] <camelia> rakudo-moar e71a9c: OUTPUT«(Num+{Foo})␤(Num)␤»

[14:20] *** ajr joined
[14:20] <dalek> rakudo/nom: aac70ae | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[14:20] <dalek> rakudo/nom: item() returns Parcel, like .item already did

[14:20] <dalek> rakudo/nom: 

[14:20] <dalek> rakudo/nom: This part of the Seq cleanup

[14:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aac70aeb54

[14:20] *** ajr is now known as Guest74106

[14:20] <jnthn> The reason it's Num the second time around is because the but does .clone() on what it receives

[14:21] <jnthn> And so we lose the itemization and flatten the but'ed thing...

[14:21] *** Guest74106 is now known as ajr_

[14:21] <dalek> roast: 0bc42d6 | (Elizabeth Mattijsen)++ | S03-operators/context.t:

[14:21] <dalek> roast: item() returns a Parcel, not an Array

[14:21] <dalek> roast: review: https://github.com/perl6/roast/commit/0bc42d6df9

[14:22] <jnthn> It's not entirely clear to me where to fix this. We typically have a policy that .method busts its way through item distinctions.

[14:22] <jnthn> Real hinges on

[14:22] <jnthn> m: say [1,2,3].clone().perl

[14:22] <camelia> rakudo-moar e71a9c: OUTPUT«Array.new(1, 2, 3)␤»

[14:22] <jnthn> Is that correct, or should it be [1, 2, 3]?

[14:23] <jnthn> TimToady: ^^ could use your brane for a moment, if you can spare it :)

[14:23] <gtodd> RT question ... as the reporter can/should I mark the bug closed or do you have workflow /method for that?

[14:23] <jnthn> gtodd: Typically we like to have tests for things

[14:23] <jnthn> gtodd: Can makr it testneeded

[14:24] <gtodd> hmm ok and then somehow find a test that confirms RT#122810 is fixed and then close ... ok

[14:24] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122810

[14:25] <jaffa4> I submitted a bug report, any idea when it is going to be fixed?

[14:25] <gtodd> so should I put "testneeded" in the subject line and change status to "fixed"?

[14:26] <gtodd> ermm "resolved" ?

[14:26] <jaffa4> its number is  #122815

[14:26] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122815

[14:26] * nine thinks that as long as a bug doesn't have a test it cannot be resolved because nothing makes sure it _stays_ resolved.

[14:27] *** mr-foobar left
[14:28] *** mr-foobar joined
[14:28] <gtodd> yeah ... ok I will just add a comment

[14:28] <gtodd> and leave it as "open"

[14:29] <jnthn> jaffa4: I actually have that one open in a browser tab. The answer, I *think*, is that you need to put the "is repr" thing on the pre-decl. But we really should catch the use of it on the actual declaration and point out that it isn't going to work, instead of just ignoring it.

[14:30] *** PZt joined
[14:31] <jnthn> jaffa4: So, likely conclusion is that the program is incorrect as it stands, but Rakudo was wrong to not point this out.

[14:31] <jaffa4> so it also needs to be a cpointer, jnthn

[14:31] <jnthn> I didn't have time to try it, but

[14:31] <TimToady> maybe .cone is really .CLONE

[14:31] <TimToady> *l

[14:32] <jnthn> class TopWindow is repr('CPointer') {...} should do it

[14:32] <jaffa4> what is repr, by the way?

[14:32] <jnthn> repr = representation = how this type should be represented in memory

[14:33] <jnthn> It needs to go on the first mention, since that's where we create the type object, and we need to create that so we've something to install so mentions of TopWindow will be recognized.

[14:34] <jnthn> Note it's only needed in the pre-decl, so you don't need to have it in both places.

[14:35] *** SamuraiJack_ joined
[14:35] <jnthn> Let me know if that doesn't work out, but I'm pretty sure that's what is happening.

[14:35] <jnthn> TimToady: English spoken loudly enough will be understood anywhere? ;)

[14:35] <TimToady> SI!

[14:36] <jnthn> TimToady: I don't think it needs to be macro-ish, in so far as a method can happily say method clone(\self-with-cont:) { } to recover what was actually the invocant.

[14:37] <jaffa4> I get Unable to parse class definition -> ------> class Ctrl ⏏s repr('CPointer') {...}

[14:37] <jnthn> Did you actually type is, or s? 

[14:38] <jnthn> m: class Ctrl is repr('CPointer') { ... }; class Ctrl { }

[14:38] <camelia> rakudo-moar 3eae3c: ( no output )

[14:38] <jnthn> m: class Ctrl is repr('CPointer') { ... }; class Ctrl { }; say Ctrl.REPR

[14:38] <jaffa4> yes, that is typo.. so not an error

[14:38] <camelia> rakudo-moar 3eae3c: OUTPUT«CPointer␤»

[14:39] <jnthn> TimToady: Mostly I'm just wondering if we want to make clone not lose itemization, or if it's but that wants to change...

[14:39] *** kst joined
[14:39] * TimToady isn't awake enough to have an opinion on that

[14:39] <jnthn> Or if there's a third thing I haven't thought of. I'm pretty sure the behavior reported in the RT is wrong though.

[14:39] <timotimo> m: class Test is repr('CPointer') { }; say Test.REPR.WHAT.perl

[14:39] <camelia> rakudo-moar 3eae3c: OUTPUT«Cannot find method 'perl': no method cache and no .^find_method␤  in block <unit> at /tmp/Iobu26_UTg:1␤␤»

[14:39] <jnthn> np :)

[14:39] *** Ven left
[14:39] <timotimo> m: class Test is repr('CPointer') { }; say Test.REPR.WHAT

[14:39] <camelia> rakudo-moar 3eae3c: OUTPUT«(Str)␤»

[14:40] <timotimo> we don't really have objects to represent representations

[14:40] *** mr-foobar left
[14:40] <jnthn> No

[14:40] <jnthn> They're just string identifiers

[14:40] <jnthn> Things have to bottom out somewhere... :)

[14:41] <timotimo> aye

[14:41] *** mr-foobar joined
[14:41] <timotimo> at least we can do stuff like class Foo is repr(Otherclass.REPR) like this :)

[14:42] <jnthn> Well, and once the S12 package decl stuff is in place we can also consider cpointer Foo { } as the declaration too :)

[14:42] <jnthn> EXPORTHOW::DECLARE iirc :)

[14:42] <timotimo> ah, sure

[14:42] <jaffa4> jhthn: your suggestion seems to work

[14:44] <jnthn> jaffa4: OK, good. I'll keep the ticket handy, 'cus I want to put something in the compiler so others don't fall into the same trap and have things silently not work...

[14:44] *** spider-mario left
[14:49] *** kjs_ joined
[15:00] *** SamuraiJack joined
[15:02] *** SamuraiJack_ left
[15:03] *** mr-foobar left
[15:04] *** mr-foobar joined
[15:11] <jnthn> Time for some rest...'night

[15:12] <timotimo> gnite jnthn 

[15:16] <lizmat> good night. jnthn 

[15:18] <lizmat> cycling&

[15:19] *** _rubio_terra_ left
[15:30] *** xenoterracide_ joined
[15:31] *** _rubio_terra_ joined
[15:45] *** kjs_ left
[15:45] <vendethiel> .oO( we need a haskell backend because we have liquid types )

[15:49] *** leont joined
[15:53] <vendethiel> (actually, refinement types)

[15:57] *** xenoterracide_ left
[15:57] *** xenoterracide_ joined
[16:03] *** yeahnoob left
[16:10] *** erkan left
[16:12] *** teodozjan left
[16:13] *** kjs_ joined
[16:14] *** xenoterracide_ left
[16:18] *** erkan joined
[16:18] *** erkan left
[16:18] *** erkan joined
[16:19] *** xenoterracide_ joined
[16:19] *** leont left
[16:24] <dalek> rakudo/optimatch: f56eb0f | (Tobias Leich)++ | src/core/Cursor.pm:

[16:24] <dalek> rakudo/optimatch: use nqp::bind to coerce str to int, jnthn++

[16:24] <dalek> rakudo/optimatch: review: https://github.com/rakudo/rakudo/commit/f56eb0f298

[16:34] *** toysrough joined
[16:54] *** ajr_ left
[17:03] *** cognome joined
[17:05] *** liztormato joined
[17:10] *** kjs_ left
[17:13] *** eupcan277_y joined
[17:16] *** Ven joined
[17:16] *** brrt joined
[17:26] <TimToady> liztormato: Each is not redunant with Junction, since junctions do something in a boolean context, while each does something in list context

[17:27] <TimToady> *redundant needs redundant d's

[17:27] <liztormato> ;-)

[17:28] <liztormato> That was not really clear to me from the spec

[17:28] <TimToady> btw, we'll be commuting to NJ over the next ten days, so connectivity is likely to be spotty out in the wilds

[17:28] *** virtualsue left
[17:28] <TimToady> well, it's marked conjectural till someone implements it :

[17:28] <TimToady> :)

[17:29] <liztormato> But maybe it's conjecturally specced too vaguely to get implemented

[17:30] <liztormato> Commuting to NJ by car I assume?

[17:31] <TimToady> yup

[17:31] <TimToady> note to would-be burglars, there are still people at home too. :)

[17:32] <liztormato> Wow. It's on my bucket list to do a cross country ride like that

[17:32] <TimToady> well, it's my bucket list to hit all the states I've never been in, and that I'll do this trip, if all goes according to plan

[17:33] <liztormato> Cool!

[17:34] *** xenoterracide_ left
[17:40] <TimToady> "LHFish" <-- Low Hanging Fish?

[17:42] *** ponbiki joined
[17:43] <TimToady> Parcel has basically taken over the tuple semantics from Seq, so we don't need Seq anymore

[17:43] *** ponbiki is now known as Guest18754

[17:43] <vendethiel> NJ?

[17:43] <liztormato> Ishisms everywhere!

[17:43] <liztormato> New Jersey

[17:44] <TimToady> my son Aron has relocated to IAS at Princeton, so we're taken them their car, which they left behind in SoCal

[17:44] <liztormato> TimToady: I will fight Seq with fire in the spec

[17:45] *** Guest18754 is now known as ponpon

[17:46] <TimToady> afk &

[17:48] <vendethiel> .tell masak I'm gonna make macros to join our `where`s and that: http://goto.ucsd.edu/~rjhala/liquid/haskell/blog/blog/2013/01/01/refinement-types-101.lhs/

[17:48] <yoleaux> vendethiel: I'll pass your message to masak.

[17:48] <vendethiel> :P

[17:51] <dalek> nqp-js: 4bb73ad | (Pawel Murias)++ | src/vm/js/ (2 files):

[17:51] <dalek> nqp-js: Implement nqp ops: symlink, link, unlink, setencoding.

[17:51] <dalek> nqp-js: 

[17:51] <dalek> nqp-js: Make nqp::stat with an EXISTS flag return true when it encounters a symlink that points to a missing file.

[17:51] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/4bb73ade66

[17:53] *** xenoterracide_ joined
[17:54] <liztormato> Continuing cycling&

[17:54] *** liztormato left
[18:01] *** SamuraiJack left
[18:07] *** xenoterracide_ left
[18:10] *** kjs_ joined
[18:16] *** Esgorhannoth joined
[18:16] *** eupcan277_y_h joined
[18:16] *** eupcan277_y left
[18:18] *** Esgorhannoth left
[18:20] *** telex left
[18:22] *** molaf__ joined
[18:22] *** telex joined
[18:24] *** brrt left
[18:25] *** molaf_ left
[18:36] *** dwarring joined
[18:37] *** virtualsue joined
[18:39] <pmurias> is it possible that an say is executed but it doesn't get to print anything because of buffering and an exception

[18:39] <pmurias> on oldish MoarVM

[18:42] <dalek> perl6-bench: b980a1d | (Geoffrey Broadwell)++ | EXPECTED:

[18:42] <dalek> perl6-bench: Mark EXPECTED out of date and call for volunteers to update it

[18:42] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/b980a1daa8

[18:45] *** anaeem1 joined
[18:53] *** ifim joined
[18:53] *** anaeem1 left
[19:00] *** Ven left
[19:01] <lizmat> pmurias: could be...  jnthn or brrt or timotimo might have a better idea

[19:01] <japhb> Something is still goofy with rc-forest-fire on current nqp-m and perl6-m.  If I do a nice large field, like `perl6-m perl6/rc-forest-fire 79 40 100`, it's slow enough to see that sometimes the fire doesn't propagate to all the places it should.  And under nqp-m, it doesn't take long for the screen to get jumpy and then corrupted.

[19:01] <japhb> TimToady, jnthn: ^^^

[19:03] *** [Sno] left
[19:04] *** [Sno] joined
[19:04] *** eupcan277_y_h_h joined
[19:05] *** eupcan277_y_h left
[19:06] *** guru joined
[19:06] *** guru is now known as ajr_

[19:07] <timotimo> pmurias: yes, indeed

[19:08] <timotimo> pmurias: pipe it into a file or strace it

[19:08] <timotimo> that'll force it to sync it out

[19:11] *** darutoko left
[19:12] <vendethiel> http://colinm.org/language_checklist.html

[19:13] <lizmat> m: say Bag(3,8,[2,(9,3)],8) >>->> 1   # according to S03:4415, this should be Bag(2,7,[1,(8,2)],7)

[19:13] <synopsebot> Link: http://perlcabal.org/syn/S03.html#line_4415

[19:13] <camelia> rakudo-moar aac70a: OUTPUT«"2 9 3" => 0, "3" => 0, "8" => 1␤»

[19:14] <lizmat> I feel the spec is wrong, TimToady do you agree ?  

[19:15] <woolfy> Just saw somebody post this on the Perl Developers page on Facebook: "If programming languages were vehicles": http://s3.crashworks.org.s3-website-us-east-1.amazonaws.com/if-programming-languages-were-vehicles/

[19:15] <lizmat> specifically, because Bags take items: one could wonder if it shouldn't fail on trying to  [2,(9,3)]

[19:15] <lizmat> - 1

[19:15] <woolfy> I could not resist (I tried for some seconds) to post this: "The hippy Volkswagen Van is of course just for the Perl 5 folks.  The Perl 6 folks are represented by a Prius Plug-In."   http://www.toyota.nl/s3/tme-toyotaone-prod/toyotaone/nlnl/toyota-prius-plugin-2012-exterior-tme-001-full_tcm-22-44038.jpg

[19:17] <lizmat> .oO( especially now we can plug in Perl 5 with Inline::Perl5  :-)

[19:18] <lizmat> taking this analogy further: the batteries are still small, but they will grow over time and dependence on old fuels like gasoline will be a thing of the past

[19:20] <raiph> .tell hoelzro I've added a comment following up on your bug reports at https://questhub.io/realm/perl/quest/52d6b4dcf6d3292b1a00007e

[19:20] <yoleaux> 20 Sep 2014 22:33Z <grondilu> raiph: I'm not sure what this is.  It's not mine anyway.  Still, I notice this uses Parrot-specific code.  If it can be shown that the pure P6 version is as least as good, it should prevail, shouldn't it?

[19:20] <yoleaux> raiph: I'll pass your message to hoelzro.

[19:20] <grondilu> How exactly is Inline::Perl5 different from v5?  Is it just syntax or is it completely different?

[19:21] <raiph> grondilu: completely different

[19:21] <grondilu> ok

[19:21] <raiph> Inline::Perl5 calls out to an embedded version of regular perl

[19:22] <grondilu> ok but that's how it works.  Could Inline::Perl5 be used to implement v5?

[19:22] <lizmat> no

[19:23] <lizmat> Inline::Perl5 will always depend on a Perl5 lib existing

[19:23] <raiph> v5 is a brand new compiler, written in P6

[19:23] <lizmat> v5 will only need the grammar and associated actions in Perl 6 land

[19:25] *** ponpon is now known as ponbiki

[19:28] *** virtualsue left
[19:29] <grondilu> sure but wouldn't an implementation of v5 using the perlapi be a valid implementation?

[19:29] * grondilu assumes Inline::Perl5 does use the perl5api

[19:30] <lizmat> grondilu: use v5 has nothing to do with perl5 the executor

[19:30] <TimToady> [1,(8,2)] flattens inside

[19:30] <ifim> hi guys, I was wondering what place is the most up-to-date reference to learn Perl 6 from ground up

[19:31] <grondilu> ifim: S02

[19:31] <grondilu> https://github.com/perl6/specs 

[19:32] <ifim> grondilu: thanks!

[19:32] * TimToady --> Carson City, hopefully &

[19:32] <lizmat> .oO( Bonanza! )

[19:32] <pmurias> grondilu: Inline::Perl5 could be used to implement the 'use v5;#p5 code here' construct

[19:32] *** mr-foobar left
[19:33] <vendethiel> ifim: try http://learnxinyminutes.com/docs/perl6/

[19:33] <pmurias> grondilu: there is a perl5 impelementation (written in v5) called v5

[19:33] <vendethiel> pmurias: written in p6 :p

[19:34] *** leont joined
[19:34] <pmurias> yes

[19:37] <raiph> grondilu: Does your newer digest module do all the things the older one did?

[19:38] *** eupcan277_y_h_h_ joined
[19:38] *** eupcan277_y_h_h left
[19:38] <grondilu> raiph: I don't know.  IIRC it doesn't but I'd have to check.

[19:39] <grondilu> but above all IIRC the interface is *very* different so it would not be compatible.

[19:41] <grondilu> is there a simple way to check which module in the ecosystem depends on a given module?

[19:41] *** _slade_ joined
[19:41] *** SamuraiJack joined
[19:42] *** molaf__ left
[19:42] <raiph> grondilu: simple: just move it to CPAN and use CPAN's nice new dependency display ;)

[19:42] *** bjz left
[19:42] <dalek> specs: 82431de | (Elizabeth Mattijsen)++ | S (4 files):

[19:42] <dalek> specs: Eradicate Seq

[19:42] <dalek> specs: review: https://github.com/perl6/specs/commit/82431dec3b

[19:43] * grondilu is sorry to say he does not like CPAN

[19:43] <raiph> grondilu: I'm thinking the outcome re the old digest is that it will be deleted. i'm mostly wondering about cherry picking from it

[19:44] <grondilu> raiph: do you want to be added as a contributer to my version of Digest?

[19:45] *** Psyche^ joined
[19:45] *** tinyblak left
[19:46] <dalek> roast: 2d166a0 | (David Warring [email@hidden.address] | S05-grammar/protoregex.t:

[19:46] <dalek> roast: another fudged test for RT #120146

[19:46] <dalek> roast: review: https://github.com/perl6/roast/commit/2d166a0f41

[19:46] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120146

[19:47] <grondilu> I've added FROGGS and retupmoca lately, I guess I can add you as well

[19:47] <raiph> grondilu: I'm just following up on https://questhub.io/realm/perl/quest/534571eabbd0bed24e00006d

[19:48] <grondilu> oh, ok

[19:48] * grondilu doesn't quite feel like engaging in a quest right now (excess of laziness)

[19:49] *** Psyche^_ left
[19:51] <grondilu> what is https://github.com/perl6/modules anyway??

[19:51] <grondilu> I mean is there someone using this?

[19:51] <raiph> grondilu: a stale repo (hasn't been updated in 5 years). fyi the old module is just one screenful of which I'd imagine just a few lines might be worth cherry picking, if any

[19:52] * grondilu looks at it more closely

[19:52] <vendethiel> raiph: no, it's just PIR code

[19:52] <vendethiel> grondilu: ^

[19:53] <grondilu> indeed, and not much of it.

[19:53] <grondilu> I think you can just forget about this.

[19:53] <raiph> OK, that repo needs to just go

[19:53] <raiph> thanks

[19:54] *** virtualsue joined
[19:55] <lizmat> TimToady: nice ride through the Eldorado National Forest, hope you don't get bothered by any forest fires

[20:00] *** SamuraiJack left
[20:01] *** [Sno] left
[20:03] *** [Sno] joined
[20:03] <dalek> roast: 3747123 | (David Warring [email@hidden.address] | S05-grammar/protoregex.t:

[20:03] <dalek> roast: typo

[20:03] <dalek> roast: review: https://github.com/perl6/roast/commit/3747123d77

[20:03] *** denis_boyun__ joined
[20:03] *** denis_boyun_ left
[20:05] *** bjz joined
[20:06] *** nbrown joined
[20:07] *** xragnar_ joined
[20:07] *** xragnar left
[20:07] *** xragnar_ is now known as xragnar

[20:13] <lizmat> r: @a.push: $("one,two,three".split(",")); say @a   # seems broken on JVM since jnthn last push opt

[20:13] <camelia> rakudo-{parrot,moar} aac70a: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Variable '@a' is not declared␤at /tmp/tmpfile:1␤------> @a.push: $("one,two,three".split(","))⏏; say @a   # seems broken on JVM since j␤    expecting an…»

[20:13] <camelia> ..rakudo-jvm aac70a: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[20:13] <lizmat> r: my @a.push: $("one,two,three".split(",")); say @a   # seems broken on JVM since jnthn last push opt

[20:13] <camelia> rakudo-{parrot,moar} aac70a: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Two terms in a row␤at /tmp/tmpfile:1␤------> my @a⏏.push: $("one,two,three".split(",")); sa␤    expecting any of:␤        scoped declarator␤        …»

[20:13] <camelia> ..rakudo-jvm aac70a: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[20:13] <lizmat> r: my @a; @a.push: $("one,two,three".split(",")); say @a   # seems broken on JVM since jnthn last push opt

[20:13] <camelia> rakudo-{parrot,moar} aac70a: OUTPUT«one two three␤»

[20:13] <camelia> ..rakudo-jvm aac70a: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[20:14] <lizmat> grrrr

[20:14] <lizmat> $ perl6-j -e 'my @a; @a.push: $("one,two,three".split(",")); say @a'

[20:14] <lizmat>  

[20:14] <lizmat> (so nothing visible)

[20:18] *** virtualsue left
[20:22] <Grrrr> lizmat: I did not do it!

[20:22] <lizmat> sorry Grrrr   :-)

[20:23] <Grrrr> lizmat: :)  my nick can serve for convenient tab completion of an expression of frustration;  it's a public service

[20:24] <lizmat> .o( where is "argh" when we need him/her )

[20:24] *** eupcan277_y_h_h_ left
[20:24] *** zakharyas left
[20:27] *** grondilu is now known as arghh

[20:27] * arghh here yu go :)

[20:27] *** virtualsue joined
[20:28] *** colomon left
[20:28] <lizmat> arghh !

[20:28] <lizmat> thank you!

[20:29] *** colomon joined
[20:32] <woolfy> virtualsue: compliments on a nicely organised London Perl Hackday (I saw some nice comments).  virtualsue++ itz++

[20:33] <virtualsue> thanks. it went really well and i’ve asked to book the same room in november for another one

[20:38] *** kaare_ left
[20:43] <woolfy> virtualsue: November is already an extremely busy month...

[20:43] <virtualsue> december is worse

[20:44] <woolfy> At the moment I don't know about any Perl-event in december.  November has: 8th: Barcelona & London & Pittsburgh Perl Workshop ; 17th: Nordic Perl Workshop ; 22nd: Bulgarian Perl Workshop ; 27-30th: French Perl Hackathon patch -p2

[20:45] <woolfy> Maybe even the Portuguese Perl Workshop, when they get their act (no pun intended) together.

[20:53] <arghh> French Perl Hackathon is in Paris I assume?

[20:53] <vendethiel> no, lyon

[20:53] <arghh> ok

[20:53] <vendethiel> I do plan to do something p6-related in paris

[20:54] <vendethiel> cognome would be the one to ping

[20:54] <vendethiel> g'night, #perl6 :)

[20:54] <dalek> roast: b85c0f3 | (David Warring [email@hidden.address] | S02-types/whatever.t:

[20:54] <dalek> roast: added another fudged test for RT #122708

[20:54] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122708

[20:54] <dalek> roast: review: https://github.com/perl6/roast/commit/b85c0f344f

[20:54] <virtualsue> i envision these london hackdays as being something we do regularly every 2-3 months

[20:55] <virtualsue> when i say december is busy, i mean that it interferes with holidays

[20:55] *** ajr_ left
[20:56] <virtualsue> most of our attendees won’t be going to perl workshops outside the uk

[21:03] *** MikeFair joined
[21:03] *** pmurias left
[21:04] *** raiph left
[21:04] <cognome> arghh: I think BooK will organize a QA hackathon at Lyon in late 2014 or early 2015. He is in this channel, mostly to be ping-able. So he will eventually probably infirm or comfirm what I said.

[21:05] <cognome> the benefit of Lyon is that the food is probably better than in Paris. :)

[21:06] <leont> QA hackathon in Lyon was last March ;-)

[21:06] <cognome> leont, I am talking of the next one.

[21:08] <leont> Next QA hackathon is in Berlin in April 2015. I suspect you're thinking about some other hackathon.

[21:09] <lizmat> patch -p2

[21:09] <lizmat> http://blogs.perl.org/users/book/2014/09/patch-p2.html

[21:09] <cognome> I am deliberately fuzzy because I know there is a tentative date given by BooK.

[21:09] <cognome> ho, there is an official announcment. lizmat++

[21:10] <lizmat> also: http://blogs.perl.org/users/book/2014/09/support-the-fund-for-act-development.html

[21:10] <cognome> BooK++

[21:11] <cognome> leont: so, indeed, the hackathon focus will not be QA but Act

[21:13] *** skarn joined
[21:18] *** FROGGS[mobile] left
[21:24] <woolfy> virtualsue: well, lizmat and me planned on joining you this hackday, but we were just too tired, and we thought it would be a good idea to tell you we might very much like to be present at the next one...

[21:24] *** kjs_ left
[21:24] <BooK> and we need monies to fund Act hackers

[21:25] *** bjz_ joined
[21:25] <BooK> the website for patch -p2 is not live yet, but should be by the time gabor sends the perl weekly newsletter :-)

[21:25] <woolfy> virtualsue: but if your next hackday is on the same day as an other event we will attend in november... well...  that's going to be difficulty...

[21:25] *** noganex joined
[21:25] <virtualsue> woolfy: if you miss november there will be another one not long after that one

[21:26] <BooK> virtualsue: is there a date I should publish on the yapc europe calendar?

[21:28] *** salv01 joined
[21:28] *** Woodi_ joined
[21:29] <virtualsue> i’ll let you know after i get permission from hackspace members on the room booking

[21:29] <woolfy> virtualsue: excellent!

[21:29] <virtualsue> everyone liked this well enough that i think they will happen far more frequently than tech meets

[21:31] *** bjz left
[21:31] *** Alina-malina left
[21:31] *** Util left
[21:31] *** noganex_ left
[21:31] *** Woodi left
[21:31] *** sunnavy left
[21:31] *** davido_ joined
[21:31] *** sunnavy joined
[21:32] *** Alina-malina joined
[21:33] *** Util joined
[21:34] *** virtualsue left
[21:36] <lizmat> sleep&

[21:38] *** arghh left
[21:38] *** mberends left
[21:40] *** lizmat_ joined
[21:40] *** lizmat left
[21:46] *** denis_boyun__ left
[21:50] *** denis_boyun joined
[21:52] *** nbrown left
[21:53] *** nbrown joined
[21:53] *** skids joined
[21:54] *** _slade_ left
[21:57] *** nbrown left
[22:00] *** jaffa4 left
[22:01] *** atta_ is now known as atta

[22:07] *** kurahaupo left
[22:10] *** denis_boyun left
[22:17] *** aborazmeh joined
[22:19] *** vendethiel left
[22:19] *** vendethiel joined
[22:20] *** xenoterracide_ joined
[22:21] *** masak left
[22:21] *** [Coke] left
[22:21] *** tadzik left
[22:21] *** aborazmeh left
[22:22] *** salv01 left
[22:22] *** jlaire_ left
[22:22] *** haroldwu left
[22:22] *** [Coke] joined
[22:23] *** masak joined
[22:23] *** jlaire joined
[22:23] *** haroldwu joined
[22:23] *** masak is now known as Guest48653

[22:23] *** aborazmeh joined
[22:23] *** cxreg left
[22:24] *** cxreg joined
[22:27] *** tadzik joined
[22:27] *** salv0 joined
[22:44] *** virtualsue joined
[22:47] *** xenoterracide_ left
[22:47] *** xenoterracide_ joined
[22:51] *** jantore_ joined
[22:52] *** xenoterracide_ left
[22:53] *** xenoterracide_ joined
[22:59] *** Guest48653 is now known as masak

[23:08] *** xenoterracide_ left
[23:08] *** xenoterracide_ joined
[23:20] *** bjz_ left
[23:23] *** virtualsue left
[23:25] *** xenoterracide_ left
[23:36] *** _slade_ joined
[23:46] *** BenGoldberg joined
[23:51] *** nbrown joined
[23:57] *** kurahaupo_ joined
