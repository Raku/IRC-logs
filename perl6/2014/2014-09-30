[00:04] *** ab5tract left
[00:14] *** dayangkun joined
[00:39] *** erkan joined
[00:41] *** immortal left
[00:54] *** _slade_ joined
[01:08] *** Hor|zon joined
[01:12] *** dayangkun left
[01:13] *** Hor|zon left
[01:15] *** Mso150_g joined
[01:20] *** Mso150_g left
[01:20] *** Mso150_g_s joined
[01:32] *** jack_rabbit left
[01:38] *** jack_rabbit joined
[01:50] *** Mso150_g_s left
[02:02] *** yeahnoob joined
[02:08] *** noganex_ joined
[02:11] *** noganex left
[02:13] *** telex left
[02:14] *** telex joined
[02:19] *** chenryn joined
[02:26] *** leont left
[02:31] *** xenoterracide joined
[02:32] <[Coke]> the rakudo.jvm tests for this morning are STILL running. they are easily 6-8 hours longer than previous runs.

[02:36] *** [Sno] left
[02:37] *** [Sno] joined
[02:37] *** prevost left
[02:48] *** epochbell joined
[02:54] *** kyun joined
[03:02] *** jerrycheung joined
[03:03] *** xenoterracide left
[03:04] *** molaf joined
[03:09] *** Hor|zon joined
[03:14] *** Hor|zon left
[03:25] *** molaf left
[03:29] *** xenoterracide joined
[03:56] *** BenGoldberg left
[04:06] *** [Sno] left
[04:45] *** mberends left
[04:48] *** chenryn left
[04:50] *** xenoterracide left
[05:04] *** chenryn joined
[05:09] *** kyun_ joined
[05:10] *** Hor|zon joined
[05:12] *** kyun left
[05:13] *** kyun_ is now known as kyun

[05:15] *** Hor|zon left
[05:17] *** ecocode joined
[05:19] *** grep0r joined
[05:28] *** [Sno] joined
[05:32] *** kaare_ joined
[05:33] *** kyun left
[05:33] *** kyun joined
[05:34] *** ecocode left
[05:39] *** kaleem joined
[05:47] *** kaleem left
[05:53] *** virtualsue joined
[05:55] *** kaleem joined
[06:01] *** kyun_ joined
[06:02] *** kyun left
[06:02] *** kyun_ is now known as kyun

[06:03] *** kyun left
[06:03] *** kyun joined
[06:17] *** isacloud______ joined
[06:21] *** anaeem1 joined
[06:24] *** SamuraiJack_ joined
[06:25] *** Mso150_g_s joined
[06:33] *** darutoko joined
[06:40] *** njmurphy left
[06:54] *** ecocode joined
[07:00] *** jack_rabbit left
[07:02] *** njmurphy joined
[07:04] *** slavik left
[07:04] *** FROGGS joined
[07:04] <FROGGS> [Coke]: and you think this is related to a recent change and not to the general host08 slowness?

[07:06] *** zakharyas joined
[07:06] <moritz> is host08 generally slow?

[07:06] <moritz> it shouldn't :-)

[07:07] <FROGGS> moritz: isn't that the reason that camelia times out lately?

[07:07] <moritz> though iirc it uses openjdk, whereas host07 hat the oracle JDK installed

[07:07] <moritz> FROGGS: I don't think so

[07:07] <FROGGS> ohh, my fault

[07:07] <moritz> FROGGS: the commands themselves don't take long, when I run them in isolation on the host08 command line

[07:07] <moritz> something else is fishy, though I don't know yet what

[07:11] *** Hor|zon joined
[07:16] *** Hor|zon left
[07:20] <dalek> panda/CPAN: 683e0c0 | (Tobias Leich)++ | TODO:

[07:20] <dalek> panda/CPAN: add CPAN related TODOs

[07:20] <dalek> panda/CPAN: review: https://github.com/tadzik/panda/commit/683e0c08a5

[07:23] *** jack_rabbit joined
[07:26] *** ghostlines joined
[07:28] *** ggherdov___ left
[07:28] *** ggherdov___ joined
[07:28] *** ggherdov___ left
[07:28] *** ggherdov___ joined
[07:30] *** ggherdov___ is now known as ggherdov

[07:31] *** huva left
[07:37] *** brrt joined
[07:39] *** denis_boyun_ joined
[07:40] *** jack_rabbit left
[07:42] <lizmat> good *, #perl6!

[07:43] <brrt> \o lizmat

[07:44] *** Mso150_g_s_s joined
[07:44] *** Mso150_g_s left
[07:51] <brrt> maybe jnthn and masak should stop travelling

[07:52] <brrt> everywhere they stay chaos breaks loose

[07:59] <dalek> roast: f8e0c0d | usev6++ | S (2 files):

[07:59] <dalek> roast: Moving test for RT #75370 to S12-enums/basic.t

[07:59] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=75370

[07:59] <dalek> roast: it lived in S02-names/75370.t which was not included in t/spectest.data

[07:59] <dalek> roast: test was added with https://github.com/perl6/roast/commit/b4fc0fe9f11bb34e4442da7e1f945e8740d07c7c

[07:59] <dalek> roast: review: https://github.com/perl6/roast/commit/f8e0c0d9ed

[08:00] *** wolfram_ joined
[08:00] <lizmat> m: say IO::Spec::Win32.rel2abs("C:foo\\bar")'

[08:01] <camelia> rakudo-moar 264eaf: OUTPUT«(timeout)»

[08:03] <wolfram_> lizmat: In case it's still relevant: on my cygwin the first 'ls C:/' warns ' MS-DOS style path detected: C:/    Preferred POSIX equivalent is: /cygdrive/c'. After that both 'ls C:/' and 'ls C:\\' work

[08:03] <lizmat> wolfram_: thanks

[08:04] <lizmat> I get: $ 6 'say IO::Spec::Win32.rel2abs("C:foo\\bar")'

[08:04] <lizmat> \Users\liz\Github\rakudo.moar\foo\bar

[08:04] *** Hor|zon joined
[08:04] <lizmat> which is clearly not right, or is it ?

[08:04] *** slavik joined
[08:05] <lizmat> hmmm... I gues it expects a CWD value that also has a C:\ in it

[08:06] <lizmat> $ 6 'say IO::Spec::Win32.rel2abs("C:foo\\bar","D:\\zip")'

[08:06] <lizmat> D:\zip\foo\bar

[08:06] *** kjs_ joined
[08:06] <lizmat> I guess you just can't win (pun intended)

[08:07] <moritz> rel2abs should be a noop if the path is already absolute

[08:07] <moritz> (IMHO)

[08:07] <lizmat> C:foo isn't absolute

[08:07] <lizmat> C:\foo is

[08:08] <lizmat> or am I wrong ?

[08:08] <moritz> wth does C:foo mean?

[08:08] <moritz> does windows have a CWD per volume?

[08:09] <lizmat> not sure anymore

[08:09] <lizmat> anyway, S32-io/io-path-win.t tests for that

[08:09] <lizmat> and I broke it

[08:09] <lizmat> and trying to figure out how I broke it

[08:14] <brrt> moritz - i think it does, yes

[08:14] <brrt> it used to at any rate

[08:16] <wolfram_> on win7:

[08:16] <wolfram_> F:\>dir c:

[08:16] <wolfram_> Directory of c:\usr

[08:16] <wolfram_> F:\>dir d:

[08:16] <wolfram_>  Directory of D:\tmp

[08:16] <wolfram_> F:\>dir d:Kon

[08:16] <wolfram_>  Directory of D:\tmp\Kon

[08:17] * lizmat feels that IO::Spec::Win32.rel2abs("C:foo\bar","D:\zip") should fail

[08:17] <brrt> wolfram_++

[08:17] <lizmat> you can't make sense of that one, and the result is most likely wrong

[08:28] *** rurban joined
[08:31] *** dakkar joined
[08:31] <moritz> lizmat: correct

[08:33] <lizmat> afk for a few hours&

[08:35] *** brrt left
[08:38] *** jerrycheung left
[08:38] *** SamuraiJack_ left
[08:39] *** _slade_ left
[08:39] *** mberends joined
[08:41] *** wolfram_ left
[08:45] <dalek> roast: afc4d1e | usev6++ | S32-exceptions/misc.t:

[08:45] <dalek> roast: Add test for RT #113680

[08:45] <dalek> roast: review: https://github.com/perl6/roast/commit/afc4d1ee8a

[08:45] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=113680

[08:47] <nine> Good morning!

[08:47] <yoleaux> 29 Sep 2014 22:42Z <carlin> nine: on OpenBSD a sub with an empty return; hangs. p5_av_top_index should return -1 with an empty return; but is returning 4294967295. Something somewhere unsigned that should be signed?

[08:48] <dalek> Inline-Perl5: 885327a | nine++ | / (2 files):

[08:48] <dalek> Inline-Perl5: Use correct int data types to avoid 32/64 bit issues

[08:48] <dalek> Inline-Perl5: 

[08:48] <dalek> Inline-Perl5: Hopefully fixes the p5_av_top_index openBSD issue reported by carlin++

[08:48] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/885327a1e9

[08:49] <nine> carlin: ^^^ not unsigned, but using a 64 bit integer where I should have used 32. Thanks for digging this out!

[08:49] *** denis_boyun_ left
[08:49] *** rurban left
[08:51] *** Mso150_g_s_s left
[08:51] <nine> I have to admit that I didn't give data types any thought during the first couple of days. Progress was everything...

[08:53] *** Alina-malina left
[08:57] *** Hor|zon left
[08:59] *** Alina-malina joined
[09:02] *** virtualsue left
[09:04] *** Hor|zon joined
[09:08] *** rindolf joined
[09:12] *** chenryn left
[09:15] *** Guest23430 left
[09:15] *** bowtie joined
[09:16] *** bowtie is now known as Guest89040

[09:17] *** Hor|zon left
[09:28] *** pecastro joined
[09:37] *** Hor|zon joined
[09:42] *** chenryn joined
[09:43] *** kyun left
[09:45] *** yeahnoob left
[09:47] *** chenryn left
[09:49] *** Guest89040 left
[09:56] *** virtualsue joined
[09:58] *** Hor|zon left
[10:04] *** Hor|zon joined
[10:06] *** fhelmberger joined
[10:09] *** denis_boyun joined
[10:09] *** bowtie joined
[10:09] *** bowtie is now known as Guest27730

[10:12] *** fhelmberger left
[10:14] *** prevost joined
[10:23] <carlin> nine: still hangs, making the p5_av_top_index sub return int32 fixes it

[10:32] <nine> carlin: oh you mean in Perl5.pm6? Seems like that's exactly the only return value I missed when fixing the data types :/

[10:32] <dalek> Inline-Perl5: bb1c7d5 | nine++ | lib/Inline/Perl5.pm6:

[10:32] <dalek> Inline-Perl5: Fix return value of p5_av_top_index

[10:32] <dalek> Inline-Perl5: 

[10:32] <dalek> Inline-Perl5: Thanks to carlin++ for pointing this out...again.

[10:32] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/bb1c7d5ae6

[10:35] <carlin> nine++

[10:35] <carlin> tests clean on OpenBSD now

[10:35] <carlin> when perl is built with -Uusemymalloc at least

[10:42] *** virtualsue left
[10:43] *** Hor|zon left
[10:43] <nine> carlin: have you tested without usemymalloc?

[10:43] <FROGGS> -U is 'without', no?

[10:43] *** Hor|zon joined
[10:43] *** chenryn joined
[10:44] <masak> hello hey hey hi hi #perl6

[10:44] <nine> carlin: then have you tested with usemymalloc?

[10:44] <FROGGS> masak: hi, welcome to #perl6 :o)

[10:44] <masak> :)

[10:44] <masak> this is something that we could possibly learn from and be inspired by: https://github.com/jonathanslenders/python-prompt-toolkit

[10:47] <FROGGS> wow

[10:47] <FROGGS> though, windows support would be rather essential

[10:47] <masak> aye.

[10:48] *** chenryn left
[10:50] <FROGGS> ohh, he even said "Thank you" to my PR :o)

[10:52] <masak> jonathanslenders++

[10:53] <FROGGS> yeah

[10:54] <masak> &

[10:56] *** virtualsue joined
[10:56] *** cosimo left
[11:03] *** Hor|zon left
[11:08] *** cosimo joined
[11:13] *** Hor|zon joined
[11:22] *** leont joined
[11:23] *** prevost left
[11:24] *** fhelmberger joined
[11:29] <carlin> nine: perl's build defaults to usemymalloc on OpenBSD

[11:30] <carlin> t/call_back.t ............. moar in free(): error: bogus pointer (double free?) 0x1b3e45a0cf10

[11:30] <carlin> t/exceptions.t ............ 1/? moar in free(): error: bogus pointer (double free?) 0x11fb18e0c980

[11:33] *** perlgod joined
[11:35] <perlgod> does perl6 allow a problematics-oriented semi-meta programming model? i use this all the time in our web backend at work

[11:36] <moritz> perlgod: what does that mean?

[11:40] *** telex left
[11:42] <perlgod> i thought it was common knowledge in the general perl scene, it's a techniqe derived from perl4 source that perl5 is especially gpod at

[11:43] <lizmat> sorry, we're stupid perl 6 people around here

[11:43] <FROGGS> perlgod: can you describe it?

[11:43] *** Alina-malina left
[11:44] *** Hor|zon left
[11:44] *** Alina-malina joined
[11:44] *** Alina-malina left
[11:44] *** Alina-malina joined
[11:44] *** chenryn joined
[11:49] *** chenryn left
[11:55] <ecocode> hmmm... problematics-oriented semi-meta programming model... sounds like something for Emacs ;)

[11:56] <tadzik> buzzword overflow, does not compute

[11:57] <moritz> we're good with meta, and with programming, but not so good with semi and with problematics

[11:57] <tadzik> also, the nickname, the gateway, the question... are hugs in order? :)

[11:57] * moritz hugs perlgod 

[11:59] *** Hor|zon joined
[12:04] <FROGGS> btw, tadzik, you're coming to the APW too?

[12:04] <tadzik> FROGGS: no :(

[12:05] <FROGGS> :o(

[12:06] *** virtualsue left
[12:09] *** Hor|zon left
[12:16] <dalek> rakudo/nom: 70f4ff2 | (Elizabeth Mattijsen)++ | src/core/IO/Spec/Unix.pm:

[12:16] <dalek> rakudo/nom: Some obvious optimizations

[12:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/70f4ff210f

[12:18] <timotimo> o/

[12:25] *** SamuraiJack_ joined
[12:25] <colomon> lizmat: why the my @ =  in line 40 of that commit?  Is that a different way of getting the effect of "eager" or something?

[12:26] <lizmat> that was the only way to satisfy the test #54 in t/spec/S32-io/io-spec-unix.t

[12:26] <lizmat> .eager didn't cut it either  :-(

[12:27] *** bjz joined
[12:31] *** perlgod left
[12:31] <timotimo> maybe it's important to have a proper container is allocated or something like that

[12:33] *** darutoko- joined
[12:36] *** darutoko left
[12:37] *** rurban joined
[12:38] <dalek> rakudo/nom: 3b9d0cd | (Elizabeth Mattijsen)++ | src/core/IO/Spec/Win32.pm:

[12:38] <dalek> rakudo/nom: Some more obvious optimizations

[12:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3b9d0cd1e0

[12:40] <sergot_> m: lines

[12:41] <camelia> rakudo-moar 264eaf: OUTPUT«(timeout)»

[12:42] <sergot_> m: my $a = Promise.new; my $b = Promise.in(1); start { try EVAL "lines" }; await Promise.anyof($a, $b); say "alive!";

[12:42] <camelia> rakudo-moar 264eaf: OUTPUT«(timeout)»

[12:42] <sergot_> shouldn't it end after 1 sec?

[12:43] *** sergot_ is now known as sergot

[12:44] <timotimo> m: say "test"

[12:44] <camelia> rakudo-moar 264eaf: OUTPUT«(timeout)»

[12:44] <timotimo> m: 0

[12:44] <camelia> rakudo-moar 264eaf: ( no output )

[12:44] <timotimo> huh, that's interesting

[12:44] <sergot> o0

[12:44] <sergot> indeed :)

[12:45] <sergot> m: 0 for ^10;

[12:45] <camelia> rakudo-moar 264eaf: ( no output )

[12:45] <sergot> m: say "test";

[12:45] <camelia> rakudo-moar 264eaf: OUTPUT«test␤»

[12:45] <sergot> m: say "test"

[12:45] <camelia> rakudo-moar 264eaf: OUTPUT«test␤»

[12:45] <sergot> m: my $a = Promise.new; my $b = Promise.in(1); start { try EVAL "lines" }; await Promise.anyof($a, $b); say "alive!";

[12:45] <camelia> rakudo-moar 264eaf: OUTPUT«alive!␤»

[12:46] <timotimo> something tells me, that host08 isn't completely happy

[12:46] <sergot> m: try EVAL "say 1";

[12:46] <camelia> rakudo-moar 264eaf: OUTPUT«1␤»

[12:48] <PerlJam> m: use Test; %*ENV<PATH> = ""; my @want;  is_deeply(IO::Spec::Unix.path, @want, "There is no PATH");

[12:48] <camelia> rakudo-moar 264eaf: OUTPUT«not ok 1 - There is no PATH␤␤# Failed test 'There is no PATH'␤# at /tmp/P30x8Fs5dZ line 1␤# expected: []␤#      got: $( )␤»

[12:49] <PerlJam> lizmat: I think the else branch also wants a "my @"

[12:49] <lizmat> oh?  hmmm... there's no test for that  :--)

[12:49] <PerlJam> heh, true :)

[12:52] *** brrt joined
[12:54] *** rurban left
[12:57] <dalek> roast: be2e100 | duff++ | S32-io/io-spec-unix.t:

[12:57] <dalek> roast: Test the empty path too

[12:57] <dalek> roast: review: https://github.com/perl6/roast/commit/be2e100193

[12:59] <dalek> rakudo/nom: 5a02987 | duff++ | src/core/IO/Spec/Unix.pm:

[12:59] <dalek> rakudo/nom: return the same type of thing in both execution paths

[12:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5a02987089

[12:59] <PerlJam> (It was bothering me)

[13:02] <PerlJam> Though maybe is_deeply isn't the right test anyway. It's looking for structural equivalence, and I think we only really care about functional equivalence here.

[13:05] *** anaeem1 left
[13:06] *** Hor|zon joined
[13:08] *** rubio joined
[13:13] <lizmat> PerlJam: maybe that would be the best fix: make the test just "is"

[13:14] <lizmat> going to be afk for most of the rest of the day: AmsterdamX meeting with social before/afterwards

[13:17] *** lizmat left
[13:25] *** virtualsue joined
[13:27] *** zeropool joined
[13:32] *** atroxaper joined
[13:33] <[Coke]> the tests didn't finish. on "integration/weird" now, with today's tests set to start in 2m.

[13:33] *** kaare_ left
[13:35] * [Coke] delays today's run.

[13:37] *** cosimo left
[13:38] *** cosimo joined
[13:39] <FROGGS> [Coke]: can you tell when the slowness started?

[13:43] *** molaf joined
[13:47] <gtodd> nine: was there a github repo somewhere where you kept working sample code for I::P5 ? I see the tests of course but I thought you had a bunch of scripts somehwere?

[13:48] <gtodd> nine: errm oops ignore that :-)

[13:51] <masak> interesting technique, trying to out-technobabble #perl6. I wonder if perlgod quieted down because the channel's reaction was largely curiosity... :P

[13:51] <masak> "semi-meta? what's that?"

[13:53] <[Coke]> FROGGS: this is the first day it's been this slow.

[13:53] <FROGGS> [Coke]: okay, that's something...

[13:54] <[Coke]> yay, it finally finished.

[13:54] <dalek> perl6-roast-data: 91ea7a8 | coke++ | / (5 files):

[13:54] <dalek> perl6-roast-data: today (automated commit)

[13:54] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/91ea7a8200

[13:54] <gtodd> masak: maybe semi-meta is ancient perl4 slang

[13:54] <gtodd> wait ... perl4 "slang" ... hmmm

[13:54] <FROGGS> no.

[13:54] <FROGGS> please

[13:54] <FROGGS> *g*

[13:54] <gtodd> hah

[13:55] <gtodd> Inline::Perl4  :-)

[13:55] <FROGGS> unlikely :o)

[13:58] * [Coke] wonders if perlgod was some kind of meta troll.

[13:58] *** kaleem left
[13:58] *** kaleem_ joined
[13:58] <masak> only a semi-meta troll.

[13:58] <masak> the other half was genuinely curious whether we did that stuff :P

[13:59] <dalek> rakudo-star-daily: 016f7c9 | coke++ | log/MoarVM-version.log:

[13:59] <dalek> rakudo-star-daily: today (automated commit)

[13:59] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/016f7c9feb

[14:00] <jnthn> .oO( You do semi-meta programming with $obj.HᵔV of course... )

[14:00] <masak> wouldn't a meta troll be kind of the Dexter Morgan of trolls? someone who only trolls trolls?

[14:01] <[Coke]> maybe perl 6 is just a long running prank.

[14:01] <masak> that would explain so much.

[14:02] <moritz> [Coke]: the first prank is history for which two dynamic, virtual machines were written :-)

[14:02] <moritz> (though now that I said it, maybe Brainfuck can compete on that level)

[14:03] <jnthn> A bf vm has a little less to provide... :)

[14:03] <moritz> I know :-)

[14:03] <jnthn> Didn't I write us a bf interp here once? :)

[14:04] <masak> a semi-meta troll (someone who goes up half a level and trolls from there) is a completely different beast from a meta-semi-troll (someone who half-trolls your half-troll)

[14:04] <masak> jnthn: yes, you did. I challenged the channel to do it in one line of IRC evalbot.

[14:05] <masak> jnthn: including the Hello World program.

[14:05] <jnthn> haha :)

[14:06] <[Coke]> j: say "why so slow?"

[14:06] <camelia> rakudo-jvm 5a0298: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[14:06] <jnthn> Good excuse... :P

[14:06] <masak> both of these are distinct from a meta-troll-semi (the semifinals of meta-trolling)

[14:07] * masak hugs himself, half-heartedly

[14:07] * moritz one-and-a-semi hugs masak

[14:08] <moritz> (with both arms, but only half of my tentacles)

[14:08] <masak> I only need 51% of all the hugs to gain an absolute hug majority.

[14:09] <moritz> "a little hug becomes huge instantly\n if you just add silent e" -- Tom Lehrer

[14:09] <nine> masak: would you need 51 % or just > 50 %?

[14:09] <tadzik> I wouldn't settle for half-solutions

[14:10] *** raiph joined
[14:11] <moritz> if you won't settle, you'll have to sue!

[14:11] <moritz> well, semi-sue :-)

[14:12] <gtodd> [Coke]: ongoing host08 issues ?

[14:13] <masak> nine: 50% plus one hug, yes. thanks.

[14:13] <PerlJam> How do you know when you've reached 50%?

[14:14] <PerlJam> I would figure that hugs are like love ... you can always just make more.

[14:15] <gtodd> m: use v6; "perl5++".say ;

[14:15] <camelia> rakudo-moar 5a0298: OUTPUT«perl5++␤»

[14:16] <raiph> I just semi met a semi troll asking "Why threads rather than forks?" http://www.reddit.com/r/perl/comments/2h4ygn/perl_6_concurrency_makes_progress_rakudo_moar_vm/ckwe4of

[14:17] <gtodd> hmm  "perl5++".say ;    on a t-shirt

[14:18] <masak> m: 5++

[14:18] <camelia> rakudo-moar 5a0298: OUTPUT«Cannot assign to an immutable value␤  in sub postfix:<++> at src/gen/m-CORE.setting:4862␤  in block <unit> at /tmp/pBZjr4eQns:1␤␤»

[14:18] <gtodd> heh

[14:18] <gtodd> that on a t-shirt would be better :)

[14:20] <PerlJam> m: my $p = "perl5"; $p++; say $p;  #  ;P

[14:20] <camelia> rakudo-moar 5a0298: OUTPUT«perl6␤»

[14:22] <FROGGS> m: 6;$_="perl5";.++;.say;#;P

[14:22] <camelia> rakudo-moar 5a0298: OUTPUT«perl6␤»

[14:22] <FROGGS> \o/ We can do noise too! \o/

[14:22] *** raiph left
[14:23] <jnthn> raiph: Threads are more portably supported for one. What's fork mean on Windows? 

[14:23] <jnthn> raiph: No reason you can't do a fork on a platform that supports it. But it's more an apples vs. oranges question to me. I'd use them to solve different problems.

[14:24] <PerlJam> That's probably why I always wonder why people write/speak as if fork and threads are pitted against one another.

[14:26] <Woodi> just processess have a fame to be outdated technology ;)

[14:26] <jnthn> To handwave a lot, process = unit of memory protection, thread = unit of scheduling.

[14:26] <Juerd> To whoever upgraded bash on feather: thanks :)

[14:27] <Woodi> hallo today :)

[14:27] <Juerd> Also, feather's going to be decomissioned and shut down soonish (in a few months)

[14:27] <moritz> eeks.

[14:27] <Juerd> There will be a new virtual machine specifically for running IRC clients

[14:27] <Woodi> FROGGS: how it work ?? #  6;$_="perl5";.++;.say;

[14:28] <Juerd> I'll announce it with more details in a week or so

[14:28] <moritz> I'll ask my employer if they're willing to give us a machine for hosting the websites etc.

[14:28] *** yeahnoob joined
[14:28] *** yeahnoob left
[14:28] *** erkan left
[14:28] <PerlJam> Woodi: .++  is the same as $_.++ and .say is the same as $_.say

[14:28] *** yeahnoob joined
[14:28] *** yeahnoob left
[14:29] <Woodi> but .++ incrases string ?

[14:29] <FROGGS> yes

[14:29] <moritz> sure

[14:29] <moritz> why not? :-)

[14:29] <Juerd> feather's almost 10 years old and I'm no longer really in the web hosting business. At this point, I'm keeping a server running for a few open source and hobby projects.

[14:29] <FROGGS> like: "foo".succ

[14:29] <FROGGS> m: say "foo".succ

[14:29] *** yeahnoob joined
[14:29] <camelia> rakudo-moar 5a0298: OUTPUT«fop␤»

[14:29] *** yeahnoob left
[14:30] <Woodi> is this a someones usecase ? :)

[14:30] *** yeahnoob joined
[14:30] <Juerd> moritz: I'm considering keeping feather2 around. It causes no trouble and needs only very little maintenance.

[14:30] <Juerd> moritz: Likewise, I'll provide an alternative for feather1's primary use: irc clients in screen/tmux

[14:31] <PerlJam> Woodi: $filename++ while -e $filename;  # one possible use

[14:31] <Juerd> Heh, that's one place where I'd use "until not" :D

[14:31] <PerlJam> er, sorry about the P5 there.  I still think that way :)

[14:32] <Woodi> PerlJam: oki

[14:33] <Woodi> but it's still race condition or something like that ;)

[14:33] <PerlJam> not when there's only one runner.

[14:33] <Juerd> Haha

[14:33] <Juerd> "There's a race condition in your code." "Not without concurrency."

[14:34] <Juerd> I have to remember that one.

[14:35] <carlin> m: my $filename = "auth.log.0"; $filename++; say $filename

[14:35] <camelia> rakudo-moar 5a0298: OUTPUT«auti.log.0␤»

[14:35] *** mberends left
[14:35] <PerlJam> carlin: you'll have to talk with TimToady about that as it is currently designed more for ...

[14:35] <Woodi> but still nice to have example when just reading around

[14:36] <PerlJam> m: my $fn = "pic1.jpg"; $fn++; say $fn;

[14:36] <camelia> rakudo-moar 5a0298: OUTPUT«pic2.jpg␤»

[14:37] <carlin> that makes sense

[14:37] <Juerd> m: my $fn = "pic9.jpg"; say ++$fn

[14:37] <camelia> rakudo-moar 5a0298: OUTPUT«pid0.jpg␤»

[14:37] <Juerd> Meh.

[14:37] <gtodd> oopsie

[14:37] <Juerd> Smart increment is a bit too smart :P

[14:37] <carlin> m: my $filename = "pic09.jpg"; $filename++; say $filename

[14:37] <camelia> rakudo-moar 5a0298: OUTPUT«pic10.jpg␤»

[14:37] <Juerd> m: my $fn = "pic99.jpg"; say ++$fn

[14:37] <camelia> rakudo-moar 5a0298: OUTPUT«pid00.jpg␤»

[14:38] <Juerd> :P

[14:38] <gtodd> there must be away to dumb it down :)

[14:38] <Juerd> use less <smart>;

[14:38] <PerlJam> provide your own .succ

[14:38] <PerlJam> or "manually" increment

[14:38] *** SamuraiJack_ left
[14:38] <Juerd> PerlJam: That seems like a lot of trouble for not having to concatenate manually :P

[14:39] <gtodd> sometimes a string is just a string .... (Freud)

[14:41] <PerlJam> If we come up with good names for the various string incrementing semantics that people want, we can probably make some nice declarative way to say what you mean.

[14:43] <PerlJam> Though it'll probably have to be something like  { use str-inc :dumb;  $filename++ } rather than $filename++:dumb    # (maybe)

[14:43] <gtodd> m: "observer pattern is mathematically equivalent to the iterator pattern".succ

[14:43] <camelia> rakudo-moar 5a0298: ( no output )

[14:43] *** JimmyZ joined
[14:44] <gtodd> m: "observer pattern is mathematically equivalent to the iterator pattern".succ.say

[14:44] <camelia> rakudo-moar 5a0298: OUTPUT«observer pattern is mathematically equivalent to the iterator pattero␤»

[14:44] <FROGGS> pattero olé!

[14:45] <JimmyZ> speaking fo https://github.com/jonathansl​enders/python-prompt-toolkit, windows support is not hard, since linenoise support windows, which we can learn from

[14:45] *** erkan joined
[14:45] *** erkan left
[14:45] *** erkan joined
[14:45] <JimmyZ> the chinese input supporting is intersting

[14:45] <dalek> rakudo/nom: b5032fc | (Tobias Leich)++ | src/core/Main.pm:

[14:45] <dalek> rakudo/nom: re-add program name fiddling in $?USAGE

[14:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b5032fc5fa

[14:46] <carlin> m: for <pic1.jpg> .. <pic9.jpg> { .say }

[14:46] <camelia> rakudo-moar 5a0298: OUTPUT«pic1.jpg␤pic2.jpg␤pic3.jpg␤pic4.jpg␤pic5.jpg␤pic6.jpg␤pic7.jpg␤pic8.jpg␤pic9.jpg␤»

[14:47] <FROGGS> m: .say for [..] <pic1.jpg pic9.jpg>

[14:47] <camelia> rakudo-moar 5a0298: OUTPUT«pic1.jpg␤pic2.jpg␤pic3.jpg␤pic4.jpg␤pic5.jpg␤pic6.jpg␤pic7.jpg␤pic8.jpg␤pic9.jpg␤»

[14:47] <FROGGS> I love it

[14:47] <gtodd> nice

[14:47] <sjn> that's cool

[14:47] <FROGGS> (whoever invented REDUCE)++

[14:47] <gtodd> what is [..] called

[14:47] <FROGGS> reduce

[14:47] <gtodd> infix reduce operator

[14:47] <gtodd> ?

[14:48] <gtodd> hehe

[14:48] <FROGGS> infix reduce meta op

[14:48] <FROGGS> or so

[14:48] <gtodd> :-D

[14:48] <FROGGS> because [ ] takes an existing op :o)

[14:48] <FROGGS> (any existing infix)

[14:48] <PerlJam> m: .say for [..] <pic8.jpg pic12.jpg>  # oops

[14:48] <camelia> rakudo-moar 5a0298: ( no output )

[14:48] <JimmyZ> m: .say for 'pic1.jpg1' ... 'pic9.jpg9'

[14:48] <gtodd> so it is "meta"

[14:48] <camelia> rakudo-moar 5a0298: OUTPUT«(timeout)pic1.jpg1␤pic2.jpg1␤pic3.jpg1␤pic4.jpg1␤pic5.jpg1␤pic6.jpg1␤pic7.jpg1␤pic8.jpg1␤pic9.jpg1␤pid0.jpg1␤pid1.jpg1␤pid2.jpg1␤pid3.jpg1␤pid4.jpg1␤pid5.jpg1␤pid6.jpg1␤pid7.jpg1␤pid8.jpg1␤pid9.jpg1␤pie0.jpg1␤pie1.jp…»

[14:49] <gtodd> m: .say for [++] <pic8.jpg pic12.jpg>

[14:49] <camelia> rakudo-moar 5a0298: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Qflb0cPDMt␤Preceding context expects a term, but found infix + instead␤at /tmp/Qflb0cPDMt:1␤------> [32m.say for [++[33m⏏[31m] <pic8.jpg pic12.jpg>[0m␤»

[14:49] <sjn> hehe

[14:49] <gtodd> oops

[14:49] <gtodd> hjahaha

[14:49] <FROGGS> not an infix :o)

[14:49] <JimmyZ> m: .say for 'pic1.jpg1' ... 'pic9.jpg9'

[14:49] <JimmyZ> timeout?

[14:49] <camelia> rakudo-moar 5a0298: OUTPUT«(timeout)pic1.jpg1␤pic2.jpg1␤pic3.jpg1␤pic4.jpg1␤pic5.jpg1␤pic6.jpg1␤pic7.jpg1␤pic8.jpg1␤pic9.jpg1␤pid0.jpg1␤pid1.jpg1␤pid2.jpg1␤pid3.jpg1␤pid4.jpg1␤pid5.jpg1␤pid6.jpg1␤pid7.jpg1␤pid8.jpg1␤pid9.jpg1␤pie0.jpg1␤pie1.jp…»

[14:49] <FROGGS> JimmyZ: because it will never hit 'pic9.jpg9'

[14:50] <FROGGS> its infinite

[14:50] <PerlJam> pic9.jpg9 is a *looooong* way from pic1.jpg1  :)

[14:50] <FROGGS> it's*

[14:52] *** treehug88 joined
[14:52] <carlin> m: say ("jpg" .. "png").elems

[14:52] <camelia> rakudo-moar 5a0298: OUTPUT«4005␤»

[14:52] <gtodd> 10^81 ??

[14:52] *** FROGGS[mobile] joined
[14:52] <moritz> it never increments the final 1

[14:52] <FROGGS> exactly

[14:53] <FROGGS> m: say ('pic1.jpg1' ... 'pic9.jpg9').elems

[14:53] <tony-o> a boat load

[14:53] <gtodd> haha

[14:53] <camelia> rakudo-moar 5a0298: OUTPUT«(timeout)»

[14:53] *** FROGGS left
[14:54] <JimmyZ> haha

[14:54] <gtodd> camelia got mad at FROGGS 

[14:55] <FROGGS[mobile]> :o)

[14:55] <Woodi> could we have grammars for generating output, not reading/parsing ? :)

[14:56] <PerlJam> m: .say for "2x8" .. "3a3";  # this is another nice property of the existing Str.succ semantics

[14:56] <camelia> rakudo-moar 5a0298: OUTPUT«2x8␤2x9␤2y0␤2y1␤2y2␤2y3␤2y4␤2y5␤2y6␤2y7␤2y8␤2y9␤2z0␤2z1␤2z2␤2z3␤2z4␤2z5␤2z6␤2z7␤2z8␤2z9␤3a0␤3a1␤3a2␤3a3␤»

[14:57] <gtodd> PerlJam:  hmmm good names for string incrementing  semantics ... 

[14:58] <Woodi> eg. software version numbers, complicated sequences of photo files for batch processing, etc :)

[14:59] <PerlJam> Woodi: I think jnthn even did a talk on using grammars as generators 

[15:00] <PerlJam> Woodi: yeah ... http://jnthn.net/papers/2013-yapcna-grammar-generate.pdf

[15:00] <gtodd> m: .say for "a1" .. "h8";

[15:00] <camelia> rakudo-moar 5a0298: OUTPUT«a1␤a2␤a3␤a4␤a5␤a6␤a7␤a8␤a9␤b0␤b1␤b2␤b3␤b4␤b5␤b6␤b7␤b8␤b9␤c0␤c1␤c2␤c3␤c4␤c5␤c6␤c7␤c8␤c9␤d0␤d1␤d2␤d3␤d4␤d5␤d6␤d7␤d8␤d9␤e0␤e1␤e2␤e3␤e4␤e5␤e6␤e7␤e8␤e9␤f0␤f1␤f…»

[15:00] <timotimo> Woodi: jnthn wrote a module about it and a talk

[15:01] <timotimo> ah, PerlJam already found it

[15:02] <gtodd> hmm so can I tell .say for "a1" .. "h8"; to only do 8 numbers for each letter using .succ ?

[15:02] <PerlJam> gtodd: not without writing your own .succ 

[15:03] <gtodd> chessboard

[15:03] <timotimo> m: .say for ("a" .. "h") X~ (1..8)

[15:03] <camelia> rakudo-moar 5a0298: OUTPUT«a1␤a2␤a3␤a4␤a5␤a6␤a7␤a8␤b1␤b2␤b3␤b4␤b5␤b6␤b7␤b8␤c1␤c2␤c3␤c4␤c5␤c6␤c7␤c8␤d1␤d2␤d3␤d4␤d5␤d6␤d7␤d8␤e1␤e2␤e3␤e4␤e5␤e6␤e7␤e8␤f1␤f2␤f3␤f4␤f5␤f6␤f7␤f8␤g1␤g2␤g3␤g…»

[15:03] <timotimo> ^- much cleaner

[15:03] <timotimo> IMO.

[15:03] <PerlJam> and more Saying What You Mean too

[15:03] <gtodd> timotimo: yeah ... I think I saw someone do that once :-)  I was just wondering what .succ was supposed to be able to do or control

[15:04] <timotimo> succ is "smart"

[15:04] <timotimo> it known about a lot of series that belong together

[15:04] <timotimo> .u roman numeral

[15:04] <yoleaux> U+2160 ROMAN NUMERAL ONE [Nl] (Ⅰ)

[15:04] *** kaleem_ left
[15:04] <yoleaux> U+2161 ROMAN NUMERAL TWO [Nl] (Ⅱ)

[15:04] <yoleaux> U+2162 ROMAN NUMERAL THREE [Nl] (Ⅲ)

[15:04] <gtodd> ah ok ... brute smartness :)

[15:04] <timotimo> m: say "Ⅰ"..*

[15:04] <camelia> rakudo-moar 5a0298: OUTPUT«"Ⅰ"..Inf␤»

[15:04] <timotimo> hah

[15:04] *** Hor|zon left
[15:04] <timotimo> m: say ("Ⅰ"..*)[50]

[15:04] <camelia> rakudo-moar 5a0298: OUTPUT«ⅣⅢ␤»

[15:04] <timotimo> m: say ("Ⅰ"..*)[^50]

[15:04] <camelia> rakudo-moar 5a0298: OUTPUT«Ⅰ Ⅱ Ⅲ Ⅳ Ⅴ Ⅵ Ⅶ Ⅷ Ⅸ Ⅹ Ⅺ Ⅻ ⅠⅠ ⅠⅡ ⅠⅢ ⅠⅣ ⅠⅤ ⅠⅥ ⅠⅦ ⅠⅧ ⅠⅨ ⅠⅩ ⅠⅪ ⅠⅫ ⅡⅠ ⅡⅡ ⅡⅢ ⅡⅣ ⅡⅤ ⅡⅥ ⅡⅦ ⅡⅧ ⅡⅨ ⅡⅩ ⅡⅪ ⅡⅫ ⅢⅠ ⅢⅡ ⅢⅢ ⅢⅣ ⅢⅤ Ⅲ…»

[15:04] <PerlJam> heh

[15:04] <timotimo> not exactly correct, but you get the idea

[15:05] <timotimo> m: say ("α"..*)[^50]

[15:05] <camelia> rakudo-moar 5a0298: OUTPUT«α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ χ ψ ω αα αβ αγ αδ αε αζ αη αθ αι ακ αλ αμ αν αξ αο απ αρ ασ ατ αυ αφ αχ αψ αω βα ββ␤»

[15:05] <timotimo> m: say ("1"..*)[^50]

[15:05] <camelia> rakudo-moar 5a0298: OUTPUT«1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50␤»

[15:06] <timotimo> m: say ("①" .. *)[^50]

[15:06] <camelia> rakudo-moar 5a0298: OUTPUT«① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ①① ①② ①③ ①④ ①⑤ ①⑥ ①⑦ ①⑧ ①⑨ ①⑩ ①⑪ ①⑫ ①⑬ ①⑭ ①⑮ ①⑯ ①⑰ ①⑱ ①⑲ ①⑳ ②① ②② ②③ ②④ ②⑤ …»

[15:06] <PerlJam> m: say ("αⅠ"..*)[^50]

[15:06] <camelia> rakudo-moar 5a0298: OUTPUT«αⅠ αⅡ αⅢ αⅣ αⅤ αⅥ αⅦ αⅧ αⅨ αⅩ αⅪ αⅫ βⅠ βⅡ βⅢ βⅣ βⅤ βⅥ βⅦ βⅧ βⅨ βⅩ βⅪ βⅫ γⅠ γⅡ γⅢ γⅣ γⅤ γⅥ γⅦ γⅧ γⅨ γⅩ γⅪ γⅫ δⅠ δⅡ δⅢ δⅣ δⅤ δⅥ δ…»

[15:06] <PerlJam> huh

[15:07] <PerlJam> m: say ("α1"..*)[^50]

[15:07] <camelia> rakudo-moar 5a0298: OUTPUT«α1 α2 α3 α4 α5 α6 α7 α8 α9 β0 β1 β2 β3 β4 β5 β6 β7 β8 β9 γ0 γ1 γ2 γ3 γ4 γ5 γ6 γ7 γ8 γ9 δ0 δ1 δ2 δ3 δ4 δ5 δ6 δ7 δ8 δ9 ε0 ε1 ε2 ε3 ε4 ε5 ε6 ε7 ε8 ε9 ζ0␤»

[15:08] <PerlJam> Is there something about the number 12 relating to roman numerals that I don't know about ?

[15:08] <leont> Hours I guess

[15:09] <colomon> PerlJam: clock face

[15:09] <PerlJam> that's still weird

[15:10] <PerlJam> unless that's where the unicode characters "overflow"

[15:12] <PerlJam> huh, that *is* where they overflow

[15:12] <PerlJam> stupid clock faces  ;)

[15:13] *** JimmyZ left
[15:13] <tony-o> weird

[15:13] *** JimmyZ joined
[15:15] *** Akagi201 joined
[15:15] *** kaare_ joined
[15:15] *** JimmyZ_ joined
[15:16] *** kbaker joined
[15:16] *** SamuraiJack_ joined
[15:16] *** denis_boyun left
[15:17] <gtodd> m: say ("🀰" ..*)[^10]

[15:17] <camelia> rakudo-moar 5a0298: OUTPUT«🀰 🀰 🀰 🀰 🀰 🀰 🀰 🀰 🀰 🀰␤»

[15:18] *** Hor|zon joined
[15:18] <gtodd> I thought dominoes could  form a sequence camelia

[15:19] *** JimmyZ left
[15:19] *** JimmyZ_ is now known as JimmyZ

[15:22] *** lichtkind joined
[15:30] <lichtkind> the modules lsit omly contains 100 ?

[15:30] <gtodd> m: .say for (1..Inf ==> grep(*.is-prime) ==> map({ "{++state $n}: $_" }) )[^10]

[15:30] <camelia> rakudo-moar 5a0298: OUTPUT«1: 2␤2: 3␤3: 5␤4: 7␤5: 11␤6: 13␤7: 17␤8: 19␤9: 23␤10: 29␤»

[15:32] *** zakharyas left
[15:33] *** brrt left
[15:33] *** JimmyZ left
[15:40] *** kbaker left
[15:41] *** FROGGS joined
[15:44] *** treehug88 left
[15:49] *** ghostlines left
[15:57] *** treehug88 joined
[16:03] <tony-o> lichtkind: it's paged now

[16:05] <lichtkind> tony-o there are the page links?

[16:07] *** brrt joined
[16:08] *** brrt left
[16:08] *** Sqirrel joined
[16:09] <dalek> panda/CPAN: bd34c5d | (Tobias Leich)++ | / (6 files):

[16:09] <dalek> panda/CPAN: implement `panda --cpan update`

[16:09] <dalek> panda/CPAN: 

[16:09] <dalek> panda/CPAN: This will download the list of packages/binaries/etc. We also download these when 24hours-ish

[16:09] <dalek> panda/CPAN: have passed for commands like: --cpan install, --cpan search, etc.

[16:09] <dalek> panda/CPAN: review: https://github.com/tadzik/panda/commit/bd34c5dc86

[16:10] <timotimo> m: ((1..Inf ==> grep *.is-prime) Z=> 1..*)[^10].fmt("%02d: % 2d")

[16:10] <camelia> rakudo-moar b5032f: ( no output )

[16:10] <timotimo> m: ((1..Inf ==> grep *.is-prime) Z=> 1..*)[^10].fmt("%02d: % 2d").say

[16:10] <camelia> rakudo-moar b5032f: OUTPUT«02:  1 03:  2 05:  3 07:  4 11:  5 13:  6 17:  7 19:  8 23:  9 29:  10␤»

[16:10] <timotimo> gtodd: ^- you like?

[16:11] <gtodd> :-)

[16:13] <gtodd> I like feeds bit the use of  Z and .fmt("%02d: % 2d")  feels more perlish  ...

[16:13] <gtodd> but

[16:13] <timotimo> OK :)

[16:13] <gtodd> hehe

[16:14] <gtodd> the problem of course in learning perl6 is .. well it sort of is *already* is perl10 :-)

[16:14] <timotimo> almost everything is version 10, given the right base

[16:14] <gtodd> heheh 

[16:15] *** ecocode left
[16:18] <tony-o> lichtkind: i didn't see any but i noticed the other day that the module list only 

[16:18] <tony-o> went to m

[16:19] <lichtkind> to i actually

[16:19] <tony-o> yea to i now

[16:19] <tony-o> i had to search to get the module

[16:27] *** raydiak joined
[16:29] *** kjs_ left
[16:33] *** erkan left
[16:35] <timotimo> .tell japhb i really need a tool or something to figure out what makes perl6-bench discard data ... i have done a benchmark set for lots and lots and lots of releases now and all i get is a row of 100.0 for all of them :(

[16:35] <yoleaux> timotimo: I'll pass your message to japhb.

[16:36] *** spider-mario joined
[16:38] *** erkan joined
[16:41] *** _slade_ joined
[16:43] *** atroxaper left
[16:43] *** M_o_C joined
[16:44] *** anaeem1_ joined
[16:45] <_slade_> In Perl 6's synopses, is 'closure' used to refer to any block of code that creates a lexical scope?

[16:47] <_slade_> Nevermind, it makes sense. Just was a bit confused since the glossary doesn't provide a definition.

[16:49] <yeahnoob> m: my $s; for 1..10000 {$s+=$_;} say $s;

[16:49] <camelia> rakudo-moar b5032f: OUTPUT«(timeout)»

[16:50] <_slade_> m: [+] 1 .. 1e4

[16:50] <camelia> rakudo-moar b5032f: OUTPUT«(timeout)»

[16:50] <yeahnoob> the old problem from stackoverfow

[16:51] <yeahnoob> p: my $s; for 1..10000 {$s+=$_}; say $s;

[16:52] <camelia> rakudo-parrot b5032f: OUTPUT«(timeout)»

[16:53] <_slade_> m: $n = 1e4; $n*($n-1)/2;

[16:53] <camelia> rakudo-moar b5032f: OUTPUT«(timeout)»

[16:53] <yeahnoob> m: say "Better Now?";

[16:53] <camelia> rakudo-moar b5032f: OUTPUT«Better Now?␤»

[16:53] <yeahnoob> yun

[16:55] *** Exodist left
[16:57] <yeahnoob> m: say ("甲"..*)[^10]

[16:57] *** virtualsue left
[16:57] <camelia> rakudo-moar b5032f: OUTPUT«(timeout)»

[16:58] <yeahnoob> m: say ("壹"..*)[^10]

[16:59] <camelia> rakudo-moar b5032f: OUTPUT«(timeout)»

[16:59] *** yeahnoob left
[16:59] <_slade_> [^10] ?

[17:01] *** Hor|zon left
[17:04] *** treehug8_ joined
[17:04] *** FROGGS[mobile] left
[17:06] *** immortal joined
[17:06] *** immortal left
[17:06] *** immortal joined
[17:06] *** treehug88 left
[17:06] <moritz> [] is indexing

[17:06] <moritz> and ^10 is like 0..9

[17:07] *** dakkar left
[17:07] *** yeahnoob joined
[17:07] *** immortal left
[17:07] *** erkan left
[17:07] *** erkan joined
[17:07] *** erkan left
[17:07] *** erkan joined
[17:08] <_slade_> moritz: th

[17:08] <_slade_> thanks*

[17:09] *** treehug8_ left
[17:10] *** Hor|zon joined
[17:10] *** fhelmberger left
[17:12] *** treehug88 joined
[17:14] *** Hor|zon left
[17:19] <_slade_> Huh. ^^10 generates the same range as ^10.

[17:19] <_slade_> I was half expecting it to mean 0 ^..^ 10

[17:20] <colomon> _slade_: I think it's probably ^(^10)

[17:21] <colomon> and ^(@a) means 0 .. @a.length-1

[17:21] <_slade_> Isn't it .elems?

[17:22] <colomon> _slade_: probably, I usually don't call it directly.  :)

[17:24] <PerlJam> m: say ^^^^^^^10;   #  :)

[17:24] <camelia> rakudo-moar b5032f: OUTPUT«0..^10␤»

[17:24] *** Exodist joined
[17:26] *** SamuraiJack_ left
[17:26] <_slade_> colomon: my perl6 code is still pretty glossolalic so I use .elems a lot :)

[17:27] *** Hor|zon joined
[17:27] *** [Sno] left
[17:32] *** Hor|zon left
[17:37] *** Mso150_g_s_s joined
[17:37] <japhb> botsnack

[17:37] <yoleaux> 16:35Z <timotimo> japhb: i really need a tool or something to figure out what makes perl6-bench discard data ... i have done a benchmark set for lots and lots and lots of releases now and all i get is a row of 100.0 for all of them :(

[17:38] <japhb> timotimo: I'm about to head out, but you should be able to find the answers in `perldoc analyze`

[17:44] *** molaf left
[17:52] *** bartolin joined
[17:55] <[Coke]> .seen japhb

[17:55] <yoleaux> I saw japhb 17:38Z in #perl6: <japhb> timotimo: I'm about to head out, but you should be able to find the answers in `perldoc analyze`

[17:56] <[Coke]> java seems slightly better today; 2pm and it's up to S05-mass/named-chars.t

[17:56] *** yeahnoob left
[17:58] *** _slade_ left
[17:59] *** Hor|zon joined
[18:02] *** kaleem joined
[18:04] *** M_o_C left
[18:04] <[Coke]> we've got nearly all physical memory in use, and > 1GB of swap at the moment.

[18:04] *** Hor|zon left
[18:04] <[Coke]> and virtually no CPU.

[18:06] <[Coke]> I am so happy to see commits to roast and updates on RT. thank you thank you thank you.

[18:11] <[Coke]> ooh, {Graham TerMarsch}++ fixed TAP::Formatter::JUnit

[18:11] <[Coke]> now I can try again to see if we can use something like jenkins.

[18:12] *** rubio left
[18:13] *** rubio joined
[18:20] *** kaleem left
[18:21] *** pecastro left
[18:22] <[Coke]> https://github.com/perl6/roast/commit/c7679fa71bf7f574fee3ec46465dc05f614def93 - whats the point of merging these tests?

[18:25] *** kjs_ joined
[18:26] <PerlJam> imdb.com

[18:26] <PerlJam> blah

[18:26] *** rubio left
[18:30] *** _slade_ joined
[18:30] <bartolin> [Coke]: No big point in this. I just thought it would reflect the original "say 4!!; say 5!!" from RT #116348 better. do you think it's better to have two single tests?

[18:30] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=116348

[18:31] *** koe joined
[18:31] <[Coke]> no, that's fine.

[18:31] *** atroxaper joined
[18:32] *** kjs_ left
[18:33] <koe> perl-star release 2014.09: how to output to pbc?

[18:34] <[Coke]> (bah. jvm STILL on S05. so sllllow)

[18:34] *** anaeem1_ left
[18:34] <moritz> koe: perl6-p --target=pbc --output=lib/YourModule.pm.pbc lib/YourModule.pm

[18:36] *** atroxaper left
[18:36] *** _slade_ left
[18:36] *** Slade joined
[18:36] <koe> get Unknown compilation target 'pbc' error message in windows shell

[18:37] <koe> moritz: get Unknown compilation target 'pbc' error message in windows shell

[18:38] <moritz> koe: oh, you need to --target=pir

[18:38] <moritz> koe: and then compile pir to pbc

[18:38] *** grondilu joined
[18:39] <moritz> koe: and then parrot -o file.pbc file.pir

[18:39] <moritz> koe: sorry for giving you the wrong information first

[18:39] <timotimo> o/

[18:41] <koe> moritz: thanks - pbc file was created - how can it be executed by parrot?

[18:41] <moritz> koe: parrot file.pbc

[18:42] <moritz> koe: but that usually doesn't work for Perl 6 programs

[18:42] <moritz> koe: you can however precompile modules, and a 'use' will automatically pick up the precompiled version

[18:42] <koe> moritz: get error message: missing or wrong version of dependecy 'src\Perl6\Grammar.nqp'

[18:43] <geekosaur> that would be what moritz just said, you need to precompile all the perl6-specific dependencies as well

[18:44] <moritz> koe: but if you precompile modules by hand, you're doing something wrong

[18:44] <moritz> koe: ufo or panda can do that for you

[18:44] <koe> moritz: just want to make an exe file an example p6 file

[18:44] *** anaeem1 joined
[18:45] <moritz> koe: I don't think that'll work

[18:45] <timotimo> we were a bit closer to that on MoarVM with a little prototype a few months ago

[18:46] <gtodd> moritz: can a whole module be precompiled  into .mbc    .pbc  and distributed that way?

[18:46] <koe> moritz: so of what use in an pbc file or an pir file of the p6?

[18:46] <timotimo> .moar in that case

[18:46] <moritz> koe: nothing at all. It only works for modules right now

[18:47] <dalek> modules.perl6.org: 82d28e9 | moritz++ | web/index.tmpl:

[18:47] <dalek> modules.perl6.org: disable javascript

[18:47] <dalek> modules.perl6.org: 

[18:47] <dalek> modules.perl6.org: Closes issue 5.

[18:47] <dalek> modules.perl6.org: With the javascript, the list of displayed modules is truncated after IO::Something,

[18:47] <dalek> modules.perl6.org: not what we want.

[18:47] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/82d28e999f

[18:47] *** gfldex joined
[18:49] *** Ven_ joined
[18:51] <koe> moritz: in rakudo-star 2014.09: "panda-m search ufo" takes a minute to display an error message:no ICU lib loaded with further messages 

[18:52] <gtodd> I like masak's ufo story .... it has the seeds of an eventual perl6 "killer app" :-)

[18:52] *** [Sno] joined
[18:53] *** darutoko- left
[18:53] <koe> rakudo-star 2014.09: in any module installable without error by panda and how?

[18:53] <moritz> koe: you should really use the moarvm backend

[18:54] <moritz> koe: parrot needs libicu-dev to work properly (see the README)

[18:55] <koe> moritz: how can the moar-vm backend be use; i thought panda-m uses the moar backend like perl6-m versus perl6-p for parrot

[18:56] *** brrt joined
[18:56] *** immortal joined
[18:56] *** immortal left
[18:56] *** immortal joined
[18:57] <moritz> huh, it should

[18:57] <moritz> but the "no ICU lib loaded" is a parrot error message

[18:57] *** anaeem1 left
[18:57] *** erkan left
[18:58] *** noganex_ left
[18:59] <koe> moritz: i just installes the to msi files: first the one with parrot, afterword the one with moar; then opened a shell; set PATH to c:\rakudo\bin;%PATH%; set PERL6LIB=c:\rakudo\lib; the start the commands from c:\rakudo : is something missing from the installation?

[19:01] <moritz> koe: dunno, I'm not a windows expert

[19:01] <moritz> koe: but if I were you, I'd remove the parrot thingy right away

[19:02] <koe> morit: ok and start by installing the moar.msi file on clean maschone?

[19:03] <moritz> koe: yes, that's what I'd try (no guarantuees though)

[19:04] <koe> mortitz: thanks - i ll try this approach - hope to get something working 

[19:04] *** anaeem1_ joined
[19:05] *** treehug8_ joined
[19:05] *** ChoHag joined
[19:06] *** Mso150_g_s_s left
[19:06] *** treehug88 left
[19:07] *** Mso150_g_s_s joined
[19:07] <timotimo> i'm sad to hear you're having trouble :(

[19:08] <timotimo> .tell japhb the only relevant thing i see is --skip-incomplete, but it doesn't change anything :(

[19:08] <yoleaux> timotimo: I'll pass your message to japhb.

[19:10] *** ChoHag left
[19:10] *** fhelmberger joined
[19:13] <dalek> ecosystem: 86a4875 | moritz++ | META.list:

[19:13] <dalek> ecosystem: remove ajs/perl6-log from META.list

[19:13] <dalek> ecosystem: 

[19:13] <dalek> ecosystem: its META.info is not valid JSON, and a pull request to fix that has been opened

[19:13] <dalek> ecosystem: and not merged two years ago

[19:13] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/86a4875229

[19:13] *** ecocode joined
[19:14] *** fhelmberger left
[19:15] *** Slade left
[19:16] *** Slade joined
[19:16] *** Slade left
[19:18] *** spider-mario left
[19:19] *** Mso150_g_s_s left
[19:20] *** Mso150_g_s_s joined
[19:20] *** spider-mario joined
[19:20] *** ChoHag joined
[19:25] *** rindolf left
[19:25] *** kjs_ joined
[19:25] *** koe left
[19:27] *** brrt left
[19:30] <dalek> modules.perl6.org: 445cadb | moritz++ | web/lib/P6Project/Info.pm:

[19:30] <dalek> modules.perl6.org: allow dots in project names

[19:30] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/445cadb850

[19:30] *** kbaker joined
[19:31] *** Mso150_g_s_s_j joined
[19:32] *** kjs_ left
[19:32] *** Mso150_g_s_s left
[19:32] <moritz> tadzik: would it be OK for the ecosystem to allow https:// in addition to git:// URLs?

[19:37] <tadzik> moritz: fine by me :)

[19:46] <colomon> tadzik: would it be okay to make panda work with repos that aren't in the ecosystem?  ;)

[19:46] <tadzik> colomon: doesn't it?

[19:46] <colomon> tadzik: how would you do that now?

[19:46] *** noganex joined
[19:46] <lichtkind> im so excited im buikding rakudo on moar forfirst time :)

[19:46] <tadzik> colomon: hmm, doesn't giving it a URL Just Work[tm]?

[19:46] <tadzik> like, panda install git://foo.bar.baz?

[19:47] * colomon is trying to think of what he has like that handy to try

[19:48] * colomon realizes he can just bogart something from the ecosystem

[19:48] <tadzik> troo

[19:49] <colomon> panda install git://github.com/masak/markdown.git

[19:49] <colomon> … and that seems to work.

[19:49] <colomon> \o/

[19:49] <tadzik> wow :)

[19:49] <lichtkind> panda astill doesnt work here

[19:49] <tadzik> I'm impressed

[19:50] <tadzik> lichtkind: please go on

[19:50] <grondilu> I'm starting something possibly insane with my Geometric Algebra library :  https://github.com/grondilu/clifford/blob/master/lib/Clifford/Conformal.pm6  Yet if it works it will be cool.

[19:50] <colomon> tadzik: it also seems to know it's Text::Markdown.  Which seems a little odd?  Is it just picking it up from the meta info?

[19:50] <colomon> afk # being yelled at by a 6yo

[19:51] *** anaeem1_ left
[19:51] <grondilu> (it's insane in the sense that there are 32 member variable names with barbaric names like $!x032 )

[19:52] <lichtkind> tadzik with what?

[19:54] <tadzik> with "panda doesn't work"

[19:54] <tadzik> I can't fix it if I don't know what's broken

[19:56] *** brrt joined
[19:57] *** Hor|zon joined
[19:57] <vendethiel> oh, mouq++'s a coco user now :P

[20:01] <dalek> modules.perl6.org: 0d08cbd | moritz++ | web/lib/P6Project/Info.pm:

[20:01] <dalek> modules.perl6.org: Allow http(s?) source URLs

[20:01] <dalek> modules.perl6.org: 

[20:01] <dalek> modules.perl6.org: before, only git:// URLs were allowed

[20:01] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/0d08cbdc44

[20:03] *** virtualsue joined
[20:03] *** Hor|zon left
[20:03] *** ecocode left
[20:05] *** spider-mario left
[20:09] <grondilu> m: 0e0 »!=» 0

[20:09] <grondilu> m: say "hi"

[20:09] <camelia> rakudo-moar b5032f: OUTPUT«(timeout)»

[20:09] <camelia> rakudo-moar b5032f: OUTPUT«hi␤»

[20:10] <grondilu> 0e0 »!=» 0 dies with 'Cannot modify an immutable Num' on my machine.

[20:10] *** rmgk_ joined
[20:10] *** rmgk is now known as Guest69959

[20:10] *** Guest69959 left
[20:10] *** rmgk_ is now known as rmgk

[20:11] *** ab5tract joined
[20:11] <grondilu> This is perl6 version 2014.09-78-g5a02987 built on MoarVM version 2014.09-1-g699360b

[20:11] <grondilu> 0e0 X[!=] 0 works fine

[20:13] <[Coke]> finally moved on to S06...

[20:18] <dalek> modules.perl6.org: c81a4c7 | moritz++ | web/lib/P6Project/Hosts/Github.pm:

[20:18] <dalek> modules.perl6.org: Produce better error messages

[20:18] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/c81a4c72c2

[20:21] *** jack_rabbit joined
[20:21] *** kjs_ joined
[20:24] *** Mso150_g_s_s_j left
[20:27] *** odc` joined
[20:27] *** zeropool left
[20:33] *** cosimo left
[20:40] <ab5tract> colomon: i've got the last issue with symmetric difference of bags nailed

[20:40] *** cosimo joined
[20:42] <ab5tract>   is showkv($s (^) $kb), showkv($kb (^) $s) # this bit

[20:43] *** slavik left
[20:46] *** Ven_ left
[20:56] *** slavik joined
[20:59] *** cosimo left
[21:03] *** itz_ joined
[21:05] *** itz left
[21:05] *** virtualsue left
[21:06] *** kaare_ left
[21:06] *** virtualsue joined
[21:07] *** Ven joined
[21:08] *** itz_ left
[21:08] *** itz joined
[21:08] *** ggoebel111118 joined
[21:11] *** cosimo joined
[21:11] *** ggoebel111117 left
[21:16] *** Ven left
[21:17] <grondilu> m: say "hi"

[21:17] <camelia> rakudo-moar b5032f: OUTPUT«(timeout)»

[21:18] <grondilu> my num $x = 1e0; say nqp::p6box_s($x); #  this works

[21:18] <grondilu> my num $x = 1e0; say nqp::p6box_s($_) given $x; #  but not this.  Is this to be expected?

[21:22] *** atroxaper joined
[21:22] *** cosimo left
[21:22] *** cosimo joined
[21:22] <timotimo> well, $_ isn't natively typed

[21:22] <timotimo> so that'd be a difference

[21:27] *** atroxaper left
[21:30] *** gfldex left
[21:32] *** Srt joined
[21:33] *** Mouq joined
[21:35] <[Coke]> moritz: can we get the same version of java running on 08? looks like we're at 1.7, I thought we had 1.8 on previous boxes.

[21:37] *** virtualsue left
[21:37] <lichtkind> good night

[21:38] *** lichtkind left
[21:40] *** kjs_ left
[21:41] *** nbrown_ left
[21:52] *** Mouq left
[22:00] *** Hor|zon joined
[22:00] *** laben joined
[22:01] <laben> hi everyone :)

[22:04] <laben> is "ufo" currently maintained?

[22:04] *** brrt left
[22:04] *** Hor|zon left
[22:06] <timotimo> last time i checked, it worked well, but i haven't used it in ... 2 months?

[22:06] *** firefish5000 left
[22:06] <timotimo> we'll certainly want to support you if you have a problem

[22:06] *** xabbu42_ joined
[22:07] <laben> it gives me a segfault when i use it on Shell::Command module

[22:07] <timotimo> oh, that's Very Bad™

[22:08] <timotimo> are you refering to https://github.com/tadzik/perl6-File-Tools/blob/master/lib/Shell/Command.pm ?

[22:08] <FROGGS> laben: you can also "panda install ." if you just wanna install it, and in case you don't need a makefile

[22:08] <laben> i updated moarvm, nqp and rakudo git to latest commits and it gives me the same results

[22:08] <timotimo> oh wait

[22:08] <timotimo> i'm not 100% sure which of the two repos has The Shell::Command

[22:09] <FROGGS> panda has a submodule, might be best to follow where it is pointing to

[22:09] <laben> no, i get it from tadzik/Shell-Command.git

[22:09] <FROGGS> that's the one: https://github.com/tadzik/Shell-Command

[22:09] <laben> is it the wrong place?

[22:10] <FROGGS> that one is correct, and should work just fine

[22:10] <FROGGS> I use it indirectly, though not with ufo

[22:10] <FROGGS> laben: is you ufo up-to-date?

[22:10] <FROGGS> your*

[22:10] <laben> FROGGS: but panda requires Shell::Command :(

[22:10] <FROGGS> laben: yes, which should just work

[22:11] <laben> FROGGS: it is from some hours ago

[22:11] <FROGGS> hmmm

[22:11] <FROGGS> can you clone panda and run its rebootstrap script?

[22:12] <laben> ok, give me a sec

[22:12] <FROGGS> this will also install Shell::Command (on success)

[22:15] <laben> where does it get installed?

[22:16] <FROGGS> to your prefix (usually nqp or rakudo)/install/languages/perl6/site

[22:16] <FROGGS> at the end it tells you the site/bin which should be put in PATH

[22:16] <FROGGS> site/bin folder*

[22:18] <laben> mmh it seems it put everything in ~/.perl6/2014.09-79-gb5032fc/

[22:18] <FROGGS> hmmmm

[22:18] <laben> should i have passed some options?

[22:18] <FROGGS> no

[22:18] <FROGGS> I wonder...

[22:18] <FROGGS> is your site directory not writeable by your user?

[22:19] * TimToady now in Princeton, NJ

[22:19] <FROGGS> but either way, that should work too

[22:19] <laben> erm, how do i know or config the site directory?

[22:19] <laben> i did not pass anything special to moarvm and nqp

[22:20] <FROGGS> m: say %*CUSTOM_LIB<site>

[22:20] <FROGGS> that's how you query it

[22:20] <camelia> rakudo-moar b5032f: OUTPUT«(timeout)»

[22:20] <FROGGS> (replace m: by perl6-m -e ...)

[22:20] *** guru joined
[22:21] <laben> i get "inst:/usr/languages/perl6/site"

[22:21] *** guru is now known as Guest26826

[22:21] <laben> which i guess is not user writable

[22:21] <FROGGS> ahh

[22:21] *** Guest26826 is now known as ajr_

[22:21] <FROGGS> true

[22:21] <laben> but how do i config the path?

[22:21] <FROGGS> so it picks 'home', which is what you've seen

[22:23] <FROGGS> in theory you can create a json file that contains these paths, but I can't explain the structure well enough right now

[22:24] <laben> is it documente somewhere?

[22:24] <laben> documented*

[22:24] <FROGGS> I don't think so

[22:24] <FROGGS> it is one of the parts of S11/S22 that got implemented but are not yet really in use

[22:26] <laben> mh, going to read S11 and S22 then

[22:27] <laben> but isn't that for every module? i meant if there is an option while building rakudo...

[22:27] <laben> like perl5, you specify the paths at build time

[22:27] *** rurban joined
[22:29] <FROGGS> in rakudo this config file (libraries.json) will be read in every time perl6 boots up

[22:29] <FROGGS> so it is not per module

[22:29] *** _slade_ joined
[22:30] <FROGGS> well, you gave it an option while building rakudo (--prefix probably), and it has put site underneath it

[22:30] <FROGGS> so you asked for it being there

[22:31] <laben> yes, i passed --prefix=/usr because generally that means i want to install the program there

[22:31] <laben> i did not think it would search the modules there too

[22:32] <FROGGS> laben: site belongs to --prefix as you've seen, your home does not

[22:32] <FROGGS> so if you wish to install to site, sudo install the modules

[22:32] <FROGGS> and if you wich to not use sudo, then you install into your home

[22:32] <FROGGS> I think that's fair

[22:33] <FROGGS> s/wich/wish/

[22:33] <FROGGS> gah, getting sleepy

[22:33] <laben> FROGGS: i understand, no problem

[22:34] <laben> btw ufo works fine for basically every other module i tested, it's just Shell::Command that gives this strange problem

[22:34] <FROGGS> in a perfect world we would have --site-prefix and others as well, but we are not there yet :o)

[22:34] <FROGGS> I can test ufo tomorrow

[22:34] <timotimo> laben: you can also "panda install ." inside a module's directory if the meta.json is in there

[22:35] <laben> perl6-debug seems to get lost in the myriad of regexp and whatnot

[22:36] <laben> panda bootstrap worked fine, i just noticed ufo crashed like that

[22:36] <timotimo> i must say, that's strange

[22:37] <laben> i preferred having already the deps before installing panda

[22:37] *** treehug8_ left
[22:37] <FROGGS> panda will use its own, whatever you do

[22:37] <laben> i am somewhat interested in packaging all these things, and it's fundamental not to use bootstraps nor installing to home

[22:38] <timotimo> ooooh

[22:38] <timotimo> ya, ufo is the only way to install modules if you have absolutely nothing but the core setting available

[22:39] <FROGGS> that's unfair

[22:39] <timotimo> if i understand correctly, the perl6 binary itself is going to have the installation mechanism somehow in itself, or something like that

[22:39] <timotimo> FROGGS: you *can* pre-build the dependencies manually ... or not pre-build them at all

[22:39] <FROGGS> you can use the not yet installed panda to install itself and other stuff

[22:39] <laben> and it worked perfectly for json-tiny, term-asnicolor, file-find, debugger-ui, etc

[22:39] <timotimo> heh, term-asn1color? :D

[22:39] <laben> ansicolor* lol

[22:39] <FROGGS> *g*

[22:40] *** bartolin left
[22:40] <FROGGS> laben: bootstrapping panda does not mean you can't bundle the precompiled modules afterwards

[22:40] <FROGGS> because you just ship a compiled panda and other modules

[22:40] <FROGGS> the user does not have to bootstrap anything

[22:41] <FROGGS> ufo is in a way problematic because it cannot run custom installer hooks (Build.pm in a root dir of a module)

[22:41] <laben> ooh, well unfortunately i'm not an official packager, so i don't exactly have a repo

[22:41] <laben> i just make the scripts available

[22:43] <laben> Build.pm? how do you use that? is there a module which uses it like Module::Build in perl5?

[22:43] <FROGGS> we should ship an ufo replacement that installs any module and uses a not yet installed panda under the hood

[22:44] <FROGGS> panda calls the build method within that package, and the module maintainer has the chance to compile C code or do other preparations like that

[22:44] <FROGGS> like a Build.PL with an inc/My/Builder.pm

[22:45] <FROGGS> sort of overriding (extending) the build and/or test routines of the main installer

[22:45] <FROGGS> ewww, 4% laptop battery...

[22:45] <FROGGS> gnight o/

[22:45] *** FROGGS left
[22:45] <laben> seems really like Module::Build in p5

[22:46] <laben> well, if someone is interested, it seems i managed to restrict somewhat the crash

[22:47] <timotimo> m: say "\e".ords

[22:47] <camelia> rakudo-moar b5032f: OUTPUT«(timeout)»

[22:49] <laben> ufo crashes at get_pods(), when it does "gather for ... dirwalk" in find-file-by-ext

[22:49] <timotimo> didn't we just change paths and io handles and stuff?

[22:50] <timotimo> maybe ufo relies on the old behavior

[22:51] <laben> dunno, but the strange thing is that if i hardcode the @modules array in get_modules() and comment out the find-file-by-ext there, it goes perfectly

[22:52] <laben> it also goes well if i sprinkle in some .say to see what's happening, is it a race condition?

[22:53] <timotimo> maybe it's a type you're not expecting and you need to .perl it instead?

[22:53] *** ab5tract left
[22:55] <leont> Build.pm is a hack, IMO

[22:55] <laben> should that just give a type error, why a segfault?

[22:55] <laben> s/should/shouldn't/

[22:56] <leont> And let's please not repeat Module::Build (← maintainer)

[22:56] <laben> wow, you are the leont from Module::Build!?! please sign my screen

[23:00] *** erkan joined
[23:00] *** erkan left
[23:00] *** erkan joined
[23:00] *** immortal left
[23:08] <laben> i really don't understand, even inserting an useless call to find-file-by-ext right after the one in get_modules() makes everything ok

[23:08] <laben> is there really hidden concurrency?

[23:09] *** xabbu42_ left
[23:10] <timotimo> no, but things like our jit or the bytecode specialization thingie may do bad things perhaps

[23:11] *** fhelmberger joined
[23:11] <laben> ouch, so i should try the --optimize=0 when calling ufo

[23:13] <laben> mmh, that's not enough, i'm gonna rebuild moar without jit and retry

[23:13] *** xenoterracide joined
[23:13] <laben> do i also need to rebuild nqp and rakudo?

[23:16] *** firefish5000 joined
[23:16] *** fhelmberger left
[23:20] <timotimo> --optimize=0 only affects the regular optimizer that works on the AST level

[23:21] <timotimo> there's MVM_DISABLE_SPESH to turn off specialization (as well as inlining and jit), there's MVM_DISABLE_INLINE (or INLINING?) and MVM_DISABLE_JIT environment variables you could try

[23:27] <laben> setting those to 1 is enough, right?

[23:31] *** rurban left
[23:32] <timotimo> yeah, or any non-empty string

[23:32] <timotimo> i believe

[23:32] <laben> it seems nothing has changed, still a segfault

[23:34] *** pecastro joined
[23:42] <laben> getting way too sleepy, i'll return on it tomorrow, see you perl6ers :)

[23:42] *** laben left
[23:59] *** daxim joined
