[00:00] *** timotimo left
[00:00] *** timo1 joined
[00:01] *** timo1 is now known as timotimo

[00:01] *** beastd joined
[00:05] *** bfulgham_ joined
[00:06] <timotimo> http://t.h8.lv/p6bench/2014-04-08-spesh.html - got some graphs for y'all

[00:06] <timotimo> did i really build these with spesh? :\

[00:10] <timotimo> it seems like i did; it must be that the first few benchmarks hardly benefit from it

[00:10] <timotimo> but forest fire already got a few percent faster

[00:11] *** rurban joined
[00:11] <timotimo> interesting to see is the apparent regression of for loops?

[00:11] <timotimo> from 2014.02 to 2014.03

[00:13] *** rurban1 joined
[00:15] <timotimo> oh well.

[00:15] *** xenoterracide joined
[00:15] <timotimo> it's still pretty discouraging to see the performance difference between rakudo and nqp

[00:16] *** rurban left
[00:18] *** rurban1 left
[00:21] <timotimo> oh, huh

[00:21] <timotimo> didn't i have something i wanted to offer as low hanging fruit for the weekly this week?

[00:24] <timotimo> still quite a lot of work to do in the optimization department then ...

[00:24] <timotimo> that just means i'll have sufficient amounts of stuff to do in the coming time

[00:30] *** autark joined
[00:44] *** beastd left
[00:48] *** jnap left
[00:55] *** kbaker_ joined
[00:58] *** eternaleye left
[00:59] *** autark left
[00:59] *** autark joined
[01:02] *** dayangkun_ joined
[01:05] *** bfulgham_ left
[01:06] *** dayangkun left
[01:07] *** hoverboard joined
[01:10] *** pmurias left
[01:11] *** Ben_Goldberg joined
[01:14] *** rurban joined
[01:14] *** BenGoldberg left
[01:14] *** Ben_Goldberg is now known as BenGoldberg

[01:19] *** rurban left
[01:28] *** klapperl joined
[01:31] *** klapperl_ left
[01:32] *** thou left
[01:36] *** bfulgham_ joined
[01:41] *** havenwood joined
[01:49] *** jnap joined
[01:51] *** plobsing joined
[01:54] *** jnap left
[01:56] *** btyler joined
[01:57] *** jnap joined
[01:59] *** hoverboard left
[02:01] *** Alula left
[02:01] *** Alula joined
[02:01] *** jnap left
[02:02] *** bfulgham_ left
[02:05] *** raiph joined
[02:07] *** thou joined
[02:09] *** lustlife joined
[02:15] *** rurban joined
[02:20] *** rurban left
[02:25] *** rurban joined
[02:28] *** xragnar_ joined
[02:28] *** xragnar is now known as Guest20786

[02:28] *** xragnar_ is now known as xragnar

[02:31] *** Guest20786 left
[02:55] *** kbaker_ left
[02:56] *** raiph left
[02:58] *** jnap joined
[02:59] *** woosley joined
[03:02] *** jnap left
[03:13] *** hoelzro left
[03:15] *** bfulgham_ joined
[03:22] *** xenoterracide left
[03:34] *** thou left
[03:36] *** havenwood left
[03:36] *** hoverboard joined
[03:43] *** hoelzro joined
[03:48] *** rurban left
[03:58] *** jnap joined
[04:02] *** kaare_ joined
[04:03] *** jnap left
[04:19] *** rurban joined
[04:21] *** pdcawley left
[04:21] *** rurban1 joined
[04:23] *** xenoterracide joined
[04:23] *** pdcawley joined
[04:24] *** rurban left
[04:26] *** rurban1 left
[04:28] *** xenoterracide left
[04:30] *** Psyche^_ joined
[04:31] *** eternaleye joined
[04:34] *** Psyche^ left
[04:49] *** kaare_ left
[04:59] *** jnap joined
[05:03] *** jnap left
[05:04] *** btyler left
[05:10] *** bfulgham_ left
[05:11] *** dylanwh joined
[05:15] *** IllvilJa left
[05:15] *** SamuraiJack joined
[05:17] *** kaare_ joined
[05:23] *** kaleem joined
[05:23] *** IllvilJa joined
[05:23] *** rurban joined
[05:23] *** telex left
[05:26] *** telex joined
[05:28] *** rurban left
[05:28] *** flussence left
[05:28] *** flussence joined
[05:35] *** labster left
[05:36] *** labster joined
[05:40] *** IllvilJa left
[05:50] *** hoverboard left
[05:51] *** kaleem left
[05:52] *** darutoko joined
[06:00] *** jnap joined
[06:04] *** jnap left
[06:08] *** adu joined
[06:12] *** BenGoldberg left
[06:14] *** autark left
[06:16] *** autark joined
[06:45] <jnthn> timotimo: Remember that spesh only kicks in after things are *invoked* a bunch of times. If the main body of the program is just a loop, there's not a lot for it to do, I'd guess...

[06:47] *** kaleem joined
[06:53] *** eternaleye left
[06:53] *** eternaleye joined
[07:01] *** jnap joined
[07:05] *** jnap left
[07:08] *** zakharyas joined
[07:12] *** Ven joined
[07:16] *** Alula left
[07:16] *** Alula joined
[07:19] *** nebuchad` is now known as nebuchadnezzar

[07:20] *** denis_boyun_ joined
[07:25] *** rurban joined
[07:29] *** denis_boyun_ left
[07:29] *** eiro left
[07:29] *** denis_boyun_ joined
[07:30] *** adu left
[07:30] *** rurban left
[07:42] *** dmol joined
[07:48] *** fhelmberger joined
[07:49] *** adu joined
[07:50] *** adu left
[08:00] *** kivutar joined
[08:17] *** kivutar left
[08:18] *** rurban joined
[08:26] *** plobsing left
[08:29] *** WJB left
[08:29] *** kivutar joined
[08:29] *** WJB joined
[08:38] *** brrt joined
[08:49] *** dakkar joined
[09:00] *** Alula left
[09:00] *** Alula joined
[09:02] *** jnap joined
[09:05] *** eiro joined
[09:06] *** jnap left
[09:10] *** denis_boyun_ left
[09:17] *** jlaire_ is now known as jlaire

[09:19] *** Rix joined
[09:22] *** integral_ is now known as integral

[09:23] *** Alina-malina left
[09:24] *** Alina-malina joined
[09:39] *** labster left
[09:39] *** telex left
[09:39] *** hoelzro left
[09:39] *** dayangkun_ left
[09:39] *** ribasushi left
[09:39] *** segomos_ left
[09:39] *** simcop2387 left
[09:39] *** ilbot3 left
[09:39] *** xfix left
[09:39] *** ashleydev left
[09:39] *** renormalist left
[09:39] *** JimmyZ left
[09:39] *** ponbiki left
[09:39] *** TimToady left
[09:39] *** xfix joined
[09:39] *** renormalist joined
[09:39] *** ashleydev joined
[09:39] *** rurban left
[09:39] *** brother joined
[09:39] *** JimmyZ joined
[09:39] *** retupmoca joined
[09:39] *** daxim_ joined
[09:39] *** Woodi joined
[09:39] *** pnu joined
[09:39] *** simcop2387 joined
[09:39] *** dayangkun_ joined
[09:39] *** TimToady joined
[09:39] *** pnu left
[09:39] *** pnu joined
[09:39] *** TimToady left
[09:39] *** dayangkun_ left
[09:39] *** kaare_ left
[09:39] *** colomon left
[09:39] *** jlaire left
[09:39] *** perlpilot left
[09:39] *** aborazmeh left
[09:39] *** Bucciarati left
[09:39] *** araujo left
[09:39] *** SHODAN left
[09:39] *** Alula left
[09:39] *** PZt left
[09:39] *** tadzik left
[09:39] *** dalek left
[09:39] *** FROGGS left
[09:39] *** japhb_ left
[09:39] *** rurban_ left
[09:39] *** stevan_ left
[09:39] *** sivoais left
[09:39] *** anocelot left
[09:39] *** huf left
[09:39] *** LordV left
[09:39] *** xybre left
[09:39] *** takesako____ left
[09:39] *** zamolxes left
[09:39] *** Tene left
[09:39] *** yoleaux left
[09:39] *** Juerd left
[09:39] *** isacloud_ joined
[09:40] *** jlaire joined
[09:40] *** Bucciarati joined
[09:40] *** colomon joined
[09:40] *** atrodo joined
[09:40] *** kaare_ joined
[09:40] *** Util joined
[09:40] *** segomos joined
[09:40] *** anocelot joined
[09:40] *** Juerd joined
[09:40] *** Tene joined
[09:40] *** Tene left
[09:40] *** Tene joined
[09:40] *** huf joined
[09:40] *** yoleaux joined
[09:40] *** ChanServ sets mode: +v yoleaux

[09:40] *** ribasushi joined
[09:40] *** takesako____ joined
[09:40] *** LordV joined
[09:40] *** araujo joined
[09:40] *** japhb_ joined
[09:40] *** stevan_ joined
[09:40] *** tokuhirom joined
[09:40] *** rurban_ joined
[09:40] *** tadzik joined
[09:40] *** xybre joined
[09:41] *** dalek joined
[09:41] *** ChanServ sets mode: +v dalek

[09:41] *** markov joined
[09:41] *** pnu left
[09:41] *** zakharyas left
[09:41] *** flussence left
[09:41] *** woolfy left
[09:41] *** mattp_ left
[09:41] *** sjn left
[09:41] *** prammer left
[09:41] *** mls left
[09:41] *** Rounin left
[09:41] *** atta left
[09:41] *** [Coke] joined
[09:41] *** Rounin joined
[09:41] *** sjohnson joined
[09:41] *** bcode left
[09:41] *** SHODAN joined
[09:41] *** sjn joined
[09:41] *** mls joined
[09:41] *** zakharyas joined
[09:41] *** woolfy joined
[09:41] *** prammer joined
[09:41] *** mattp_ joined
[09:41] *** dagurval joined
[09:42] *** pnu joined
[09:42] *** dagurval left
[09:42] *** segomos left
[09:42] *** Rix left
[09:42] *** autark left
[09:42] *** xragnar left
[09:42] *** klapperl left
[09:42] *** ivan`` left
[09:42] *** yves__ left
[09:42] *** jnthn left
[09:42] *** benabik left
[09:42] *** bjz left
[09:42] *** Yappo__________8 left
[09:42] *** yeltzooo left
[09:42] *** zacts left
[09:42] *** cognominal left
[09:42] *** FROGGS[mobile] left
[09:42] *** Khisanth left
[09:42] *** effbiai left
[09:42] *** slavik left
[09:42] *** cosimo left
[09:42] *** ClarusCogitatio left
[09:42] *** mtj_ left
[09:42] *** klapperl joined
[09:42] *** Yappo__________8 joined
[09:42] *** markov left
[09:42] *** autark joined
[09:42] *** cosimo joined
[09:42] *** jnthn joined
[09:42] *** yves__ joined
[09:42] *** flussence joined
[09:42] *** FROGGS joined
[09:42] *** bjz joined
[09:43] *** mathw joined
[09:43] *** FROGGS[mobile] joined
[09:43] *** Ven left
[09:43] *** dwarring left
[09:43] *** Pleiades` joined
[09:43] *** jercos joined
[09:43] *** xragnar joined
[09:44] *** rurban joined
[09:44] *** bowtie joined
[09:44] *** PerlJam joined
[09:45] *** dagurval joined
[09:45] *** zamolxes joined
[09:45] *** synopsebot joined
[09:46] *** Gothmog_ joined
[09:46] *** jercos_ joined
[09:46] *** mtj_ joined
[09:47] *** atta joined
[09:47] *** bcode_ joined
[09:47] *** ilbot3 joined
[09:47] *** breinbaas joined
[09:47] *** ivan`` joined
[09:48] *** cognominal joined
[09:48] *** bcode_ is now known as bcode

[09:49] *** Rix joined
[09:49] *** revdiablo joined
[09:49] *** telex joined
[09:50] *** yeltzooo joined
[09:50] *** jercos_ left
[09:51] *** Ulti joined
[09:51] *** sivoais joined
[09:51] *** ClarusCogitatio joined
[09:52] *** aborazmeh joined
[09:54] *** hoelzro joined
[09:54] *** ponbiki joined
[09:54] *** ponbiki is now known as Guest65441

[09:54] *** slavik joined
[09:56] *** isacloud_ left
[09:56] *** isacloud_ joined
[09:56] *** japhb_ left
[09:56] *** japhb_ joined
[09:57] *** bcode left
[09:57] *** mls left
[09:57] *** mls joined
[09:57] *** pnu left
[09:57] *** pnu joined
[09:57] *** bcode joined
[09:57] *** effbiai joined
[10:00] *** Khisanth joined
[10:00] <lizmat> it's windy today

[10:00] *** rindolf joined
[10:02] <dalek> roast: baf5685 | (Elizabeth Mattijsen)++ | S17-concurrency/lock.t:

[10:02] <dalek> roast: Add a Thread/lock stress test

[10:02] <dalek> roast: 

[10:02] <dalek> roast: Which so far fails all the time.  Not sure whether the test is ok.

[10:02] <dalek> roast: review: https://github.com/perl6/roast/commit/baf56856eb

[10:02] *** zacts joined
[10:02] *** zacts is now known as Guest59041

[10:03] *** rurban left
[10:03] *** woolfy left
[10:03] *** zakharyas left
[10:03] *** rurban_ left
[10:03] *** japhb_ left
[10:03] *** tokuhirom left
[10:03] *** atrodo left
[10:03] *** isacloud_ left
[10:03] *** dylanwh left
[10:03] *** timotimo left
[10:03] *** mkz left
[10:03] *** sergot left
[10:03] *** hugme left
[10:03] *** sorear left
[10:03] *** raydiak left
[10:03] *** risou left
[10:03] *** zakharyas joined
[10:03] *** mkz joined
[10:03] *** raydiak joined
[10:03] *** rurban joined
[10:03] *** isacloud_ joined
[10:03] *** risou joined
[10:03] *** japhb_ joined
[10:03] *** rurban_ joined
[10:04] *** woolfy joined
[10:04] *** hugme joined
[10:04] *** ChanServ sets mode: +v hugme

[10:04] *** segomos joined
[10:04] *** timotimo joined
[10:05] *** denis_boyun joined
[10:06] *** TimToady joined
[10:08] *** sergot joined
[10:12] *** rurban left
[10:12] *** rurban joined
[10:15] *** japhb_ left
[10:15] *** mkz left
[10:15] *** tokuhirom joined
[10:16] *** mkz joined
[10:17] *** sorear joined
[10:17] *** atrodo joined
[10:19] *** dylanwh joined
[10:23] *** Alula joined
[10:26] *** rurban left
[10:26] *** Ven joined
[10:26] *** cibs left
[10:26] *** effbiai left
[10:26] *** yeltzooo left
[10:26] *** mtj_ left
[10:26] *** xragnar left
[10:26] *** FROGGS left
[10:26] *** bjz left
[10:26] *** jercos left
[10:26] *** yves__ left
[10:26] *** flussence left
[10:26] *** Pleiades` left
[10:26] *** jnthn left
[10:26] *** sjn left
[10:26] *** Rounin left
[10:26] *** huf left
[10:26] *** yoleaux left
[10:26] *** Tene left
[10:26] *** araujo left
[10:26] *** Juerd left
[10:26] *** colomon left
[10:26] *** Woodi left
[10:26] *** retupmoca left
[10:26] *** brother left
[10:26] *** JimmyZ left
[10:26] *** renormalist left
[10:26] *** Alina-malina left
[10:26] *** dakkar left
[10:26] *** eternaleye left
[10:26] *** SamuraiJack left
[10:26] *** woosley left
[10:26] *** lue left
[10:26] *** Exodist left
[10:26] *** frettled_ left
[10:26] *** nebuchadnezzar left
[10:26] *** xinming_ left
[10:26] *** [particle] left
[10:26] *** vendethiel left
[10:26] *** aindilis left
[10:26] *** camelia left
[10:26] *** baest left
[10:26] *** mtk left
[10:26] *** masak left
[10:26] *** arnsholt left
[10:26] *** yogan left
[10:26] *** amkrankruleuen left
[10:26] *** larks left
[10:26] *** apejens left
[10:26] *** crazedpsyc left
[10:26] *** rjbs left
[10:26] *** Celelibi left
[10:26] *** ggherdov_ left
[10:26] *** masak joined
[10:27] *** frettled joined
[10:27] *** jtpalmer joined
[10:27] *** xragnar joined
[10:27] *** amkrankruleuen joined
[10:27] *** amkrankruleuen left
[10:27] *** amkrankruleuen joined
[10:27] *** Celelibi joined
[10:27] *** SamuraiJack joined
[10:27] *** sjn joined
[10:27] *** jercos joined
[10:27] *** jnthn joined
[10:27] *** yves__ joined
[10:27] *** renormalist joined
[10:27] *** vendethiel joined
[10:27] *** larks joined
[10:27] *** yeltzooo joined
[10:27] *** xinming_ joined
[10:27] *** dakkar joined
[10:27] *** effbiai joined
[10:27] *** baest joined
[10:27] *** Exodist joined
[10:27] *** nebuchadnezzar joined
[10:27] *** crazedpsyc joined
[10:27] *** bjz joined
[10:27] *** lue joined
[10:27] *** Tene joined
[10:27] *** yoleaux joined
[10:27] *** retupmoca joined
[10:27] *** colomon joined
[10:27] *** [particle] joined
[10:27] *** Tene left
[10:27] *** Tene joined
[10:27] *** ChanServ sets mode: +v yoleaux

[10:27] *** huf joined
[10:27] *** FROGGS joined
[10:27] *** aindilis joined
[10:27] *** Rounin joined
[10:27] *** rjbs joined
[10:27] *** Pleiades` joined
[10:27] *** apejens joined
[10:27] *** Woodi joined
[10:27] *** mtk joined
[10:27] *** masak is now known as Guest3496

[10:27] *** japhb_ joined
[10:27] *** markov joined
[10:27] *** eternaleye joined
[10:27] *** Alina-malina joined
[10:28] *** camelia joined
[10:28] *** japhb_ left
[10:28] *** japhb_ joined
[10:28] *** mtj_ joined
[10:28] *** woosley joined
[10:28] *** araujo joined
[10:29] <jnthn> lizmat: fails all the time on just Moar?

[10:29] *** ChanServ sets mode: +v camelia

[10:29] <jnthn> lizmat: If it fails on JVM too it's probably the test.

[10:29] *** flussence joined
[10:30] *** brother joined
[10:30] *** Juerd joined
[10:30] *** ggherdov_ joined
[10:32] *** cibs joined
[10:32] *** arnsholt joined
[10:34] *** JimmyZ joined
[10:35] *** SamuraiJack left
[10:35] <dalek> ecosystem: cb659e0 | dagurval++ | META.list:

[10:35] <dalek> ecosystem: Added WebService::Justcoin

[10:35] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/cb659e0bb6

[10:39] *** [particle] left
[10:39] *** effbiai left
[10:39] *** baest left
[10:39] *** amkrankruleuen left
[10:39] *** xragnar left
[10:39] *** jtpalmer left
[10:39] *** frettled left
[10:39] *** Guest3496 left
[10:39] *** rindolf left
[10:39] *** slavik left
[10:39] *** dagurval left
[10:39] *** autark left
[10:39] *** klapperl left
[10:39] *** prammer left
[10:39] *** dalek left
[10:39] *** daxim_ left
[10:39] *** WJB left
[10:39] *** kivutar left
[10:39] *** kaleem left
[10:39] *** Psyche^_ left
[10:39] *** lestrrat left
[10:39] *** cxreg2 left
[10:39] *** integral left
[10:39] *** hummeleB1 left
[10:39] *** salv0 left
[10:39] *** masak_ joined
[10:39] *** cxreg joined
[10:39] *** klapperl joined
[10:39] *** jtpalmer joined
[10:39] *** hummeleBop1 joined
[10:39] *** rindolf joined
[10:39] *** Psyche^ joined
[10:40] *** xragnar joined
[10:40] *** daxim_ joined
[10:40] *** effbiai joined
[10:40] *** kaleem joined
[10:40] *** frettled joined
[10:40] *** autark joined
[10:40] *** prammer joined
[10:40] *** integral joined
[10:40] *** integral left
[10:40] *** integral joined
[10:40] *** baest joined
[10:40] *** dalek joined
[10:40] *** ChanServ sets mode: +v dalek

[10:40] *** amkrankruleuen joined
[10:40] *** amkrankruleuen left
[10:40] *** amkrankruleuen joined
[10:40] *** [particle] joined
[10:40] *** kivutar joined
[10:40] *** salv0 joined
[10:40] *** lestrrat joined
[10:40] *** slavik joined
[10:45] *** dagurval joined
[10:46] *** Alula left
[10:47] *** Alula joined
[10:58] *** yogan joined
[10:59] <lizmat> jnthn: the test fails on the JVM as well, but generally later, as in up to 12 times (rather than the first time already in the moarvm case)

[10:59] *** labster joined
[11:00] *** Alula left
[11:00] *** Alula joined
[11:00] <lizmat> I'm not completely sure the code is ok, but then again, Lock.condition and the ConditionVariable class ate not specced

[11:01] <lizmat> so speccially, (as opposed to technically), I'm not sure what they should do

[11:02] <lizmat> commuting&

[11:02] *** lizmat left
[11:09] *** kurahaupo joined
[11:10] *** markov left
[11:14] <timotimo> o/

[11:16] <timotimo> jnthn: that's a good point that i hadn't considered!

[11:17] *** pecastro joined
[11:19] *** woolfy left
[11:20] *** xragnar left
[11:20] <jnthn> lizmat: They ain't spec'd yet, but they have the semantics you'd expect condvars to have anywhere.

[11:20] <jnthn> (provided you have an expectation ;))

[11:21] <jnthn> timotimo: While my students do exercises I've been looking at some of the benchmarks and the code they call.

[11:21] <jnthn> timotimo: The worst offender is the push one

[11:21] *** xragnar joined
[11:22] <jnthn> Which is 2000 times slower o.O

[11:22] <jnthn> Then I found why: we always slurpy push

[11:22] <jnthn> Even for the single value case.

[11:22] <jnthn> I'll probably fix that one tonight.

[11:22] <jnthn> The other huge pain point that makes assigning to arrays and hashex expensive is:

[11:22] <jnthn> %h<a> = 42;

[11:23] <timotimo> oops, slurpy push is certainly expensive for single values

[11:23] <jnthn> This creates a scalar which a whence, which in turn means taking a closure, which means a Block and CodeRef allocation.

[11:23] <timotimo> oh! oof! :)

[11:23] <jnthn> timotimo: yes, and in push @a, ...; push sub is slurpy and so is push method!

[11:24] <jnthn> Anyway, the whence the triggers the lambda and binds ths scalar

[11:24] <jnthn> But if we know full well we're going to be assigning...which we often can syntactically, that is an insane amount of overhead.

[11:24] <timotimo> ah, i get it now

[11:25] <jnthn> The reason for all this is that:

[11:25] <jnthn> r: my $a := %h<a>; say %h<a>:exists; $a = 42; say %h<a>:exists;

[11:25] <timotimo> it's all autoviv

[11:25] <camelia> rakudo-jvm 2b8977: OUTPUT«(timeout)»

[11:25] <camelia> ..rakudo-parrot 2b8977, rakudo-moar 2b8977: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Variable '%h' is not declared␤at /tmp/tmpfile:1␤------> my $a := %h<a>⏏; say %h<a>:exists; $a = 42; say %h<a>:e␤    expecting any of:␤   …»

[11:26] <jnthn> m: my %h; my $a := %h<a>; say %h<a>:exists; $a = 42; say %h<a>:exists;

[11:26] <camelia> rakudo-moar 2b8977: OUTPUT«False␤True␤»

[11:26] <timotimo> oh!

[11:26] <jnthn> That has to work.

[11:26] <jnthn> But that's *not* the common case

[11:26] <timotimo> yeah, that's certainly something you don't see that often

[11:26] <jnthn> But we pessimize every darn thing.

[11:26] <timotimo> that's what we do :)

[11:26] <timotimo> it may seem easy to syntactically find out, but how do we signal it downwards?

[11:27] <timotimo> also, will the same kind of depessimization help slurpy assignments like %h<a b c> = 1, 2, 3?

[11:28] <jnthn> I'm pondering how to do it

[11:29] <jnthn> I know full well whatever I come up with, Pm and/or TimToady probably won't like it.

[11:29] <jnthn> We already ahve a bind_key and bind_pos; I'm tempted to do assign_keya nd assign_pos...

[11:29] <timotimo> that's new public api?

[11:30] <jnthn> I guess they would be, yeah :S

[11:30] <jnthn> I think we can't afford to not do something like this, though.

[11:32] <timotimo> it'll definitely give us a nice speed boost in the general case

[11:34] <dalek> rakudo-star-daily: bb44ecd | coke++ | log/ (5 files):

[11:34] <dalek> rakudo-star-daily: today (automated commit)

[11:34] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/bb44ecdad5

[11:41] *** daniel-s_ joined
[11:45] <jnthn> Overall, I plan to make a pass through CORE.setting and look carefully at the bytecode we're generating

[11:45] <jnthn> For each of the benchmarks.

[11:47] <jnthn> Finishing up multispec will also help.

[11:48] <nwc10> what's multispec?

[11:50] <[Coke]> we're having enough trouble with a monospec!

[11:51] <jnthn> nwc10: In a multi-dispatch we currently always make a call tot he proto first

[11:51] <jnthn> nwc10: If the proto simply says "look in the cache", then that's a huge waste of a callframe and other things.

[11:52] <jnthn> nwc10: multispec lets us tell the VM how to find the cache out of the code object

[11:52] <nwc10> ah right. Yes, that does sound like a place to win speed

[11:52] <jnthn> So it can completely skip that.

[11:52] <nwc10> which will benefit all 3 backends?

[11:52] <nwc10> oh, how is the JS backend work?

[11:52] <jnthn> Well, in the case of things like infix:<+>, I think the proto is at least as costly as the operation itself.

[11:53] <jnthn> It needs to be implemented per backend...

[11:53] *** kivutar left
[11:53] <nwc10> yes, but how often do we call + :-)

[11:53] <jnthn> I'll likely also do it for JVM.

[11:53] <jnthn> Somebody else can take care of it for Parrot if they want things faster there.

[11:55] <jnthn> guess we can PIC it on the two also

[11:56] <jnthn> to abuse the term PIC a little :)

[11:56] <timotimo> i don't know what that term means :(

[12:00] <[Coke]> position independent code?

[12:04] <nwc10> aha

[12:04] <nwc10> Polymorphic Inline Cache

[12:06] <jnthn> yes, that

[12:06] <jnthn> findmethod calls after spesh either are resolved statically or get a monomorphic cache

[12:07] <jnthn> We use such a technique on JVM too.

[12:07] <timotimo> ah, yes

[12:08] <nwc10> who is doing Star this month?

[12:08] <jnthn> I'm pondering a similar inline cache for multi-dispatch.

[12:08] <timotimo> hmm, spesh is not far-reaching enough to help any with the hash assignment problem, aye?

[12:08] <timotimo> because it doesn't inline?

[12:08] <jnthn> timotimo: I dunno if it can ever really be in general.

[12:08] <jnthn> It's not just inlining, it's a lot of things.

[12:09] <timotimo> mhm

[12:09] <timotimo> it'd be a complicated pattern to match against

[12:09] <jnthn> The mere presence of the closure prevents compile-time lex to loc of self and so forth

[12:09] <timotimo> ah

[12:09] <jnthn> You'd need to thus teach spesh to also do such things

[12:10] <timotimo> anything more simple you could offload onto me for today? :)

[12:10] <timotimo> oh, and what invocation did you use to figure out what exact bytecodes were called? moarvm --dump?

[12:10] <jnthn> yeah but I'm actually reading the spesh log

[12:10] <jnthn> cus it tells me the bytecode on hot paths for free :)

[12:11] <timotimo> ah :)

[12:11] <timotimo> well ... "hot" :)

[12:11] *** kaare_ left
[12:11] <jnthn> more hot than not :)

[12:11] *** SamuraiJack joined
[12:11] <timotimo> since 0K is kind of unreachable ... yeah, you get that property for free :P

[12:11] <jnthn> Did you get anywhere with the NQP opt stuff?

[12:11] <jnthn> So we can lower and spesh the grammar rules?

[12:13] <timotimo> no :|

[12:13] *** rindolf left
[12:13] <timotimo> i had absolutely no clue where to look for the cause of the problem

[12:14] *** Alula left
[12:15] *** Alula joined
[12:16] *** kaare_ joined
[12:16] *** isacloud_ left
[12:17] *** isacloud_ joined
[12:18] *** sorear left
[12:18] *** mkz left
[12:18] *** tokuhirom left
[12:18] *** rurban_ left
[12:18] *** flussence left
[12:18] *** japhb_ left
[12:18] *** dylanwh left
[12:19] *** zakharyas left
[12:19] *** xfix left
[12:19] *** atrodo left
[12:20] *** tokuhirom joined
[12:20] *** atrodo joined
[12:21] *** zakharyas joined
[12:21] *** rurban_ joined
[12:21] *** dylanwh joined
[12:21] *** flussence joined
[12:21] *** araujo left
[12:22] *** sorear joined
[12:22] *** japhb_ joined
[12:23] *** daniel-s_ left
[12:23] *** daniel-s_ joined
[12:26] *** mkz joined
[12:27] *** araujo joined
[12:38] *** daniel-s_ left
[12:40] *** xenoterracide joined
[12:41] *** kbaker_ joined
[12:57] *** guru joined
[12:57] *** guru is now known as ajr_

[13:01] *** rurban joined
[13:06] *** rurban left
[13:15] *** raiph joined
[13:22] *** aborazmeh left
[13:25] *** [particle] left
[13:28] *** kaare_ left
[13:28] <jnthn> timotimo: ah, ok...

[13:28] <jnthn> Guess I'll have to look at that then.

[13:29] <jnthn> timotimo: adding a single-item candidate to sub push shoiuld be eas to do and test

[13:30] <jnthn> multi sub push(@a, \thing) { @a.push(thing) }

[13:30] <jnthn> unshift too

[13:33] *** xenoterracide left
[13:40] *** benabik joined
[13:41] *** thou joined
[13:54] *** btyler joined
[13:56] *** SamuraiJack left
[14:02] *** rurban joined
[14:07] *** rurban left
[14:11] *** jnap joined
[14:12] *** sftp left
[14:13] *** sftp joined
[14:19] *** PZt joined
[14:21] *** rurban joined
[14:22] *** geekosaur left
[14:22] *** geekosaur joined
[14:24] *** jnap left
[14:31] *** rurban left
[14:32] *** jnap joined
[14:36] *** thilp joined
[14:41] *** treehug88 joined
[14:42] *** virtualsue joined
[14:45] *** TimToady left
[14:45] *** mathw left
[14:45] *** cosimo left
[14:45] *** Yappo__________8 left
[14:45] *** mls left
[14:45] *** sjohnson left
[14:45] *** takesako____ left
[14:45] *** anocelot left
[14:45] *** Bucciarati left
[14:45] *** ribasushi left
[14:45] *** simcop2387 left
[14:45] *** dmol left
[14:45] *** brrt left
[14:45] *** darutoko left
[14:45] *** pdcawley left
[14:45] *** lustlife left
[14:45] *** go|dfish left
[14:45] *** Vlavv left
[14:45] *** Timbus left
[14:45] *** gtodd left
[14:45] *** Goodbox left
[14:45] *** Bucciarati joined
[14:45] *** Timbus joined
[14:45] *** Goodbox joined
[14:45] *** pdcawley joined
[14:45] *** TimToady joined
[14:45] *** Yappo__________8 joined
[14:46] *** darutoko joined
[14:47] *** bluescreen10 joined
[14:48] *** simcop2387 joined
[14:48] *** ribasushi joined
[14:48] *** mathw joined
[14:48] *** anocelot joined
[14:49] *** mhasch joined
[14:49] *** dmol joined
[14:49] *** gtodd joined
[14:49] *** brrt joined
[14:50] *** go|dfish joined
[14:50] *** Vlavv joined
[14:50] *** nwc10 joined
[14:50] *** cosimo joined
[14:51] *** sjohnson joined
[14:51] *** takesako____ joined
[14:55] *** mls joined
[14:56] *** dotuser joined
[14:56] *** dotuser left
[14:57] *** ajr_ left
[14:58] *** kaare_ joined
[14:59] *** lustlife joined
[15:02] *** denis_boyun left
[15:05] *** guru joined
[15:05] *** salv0 left
[15:05] *** guru is now known as Guest31987

[15:05] *** Guest31987 is now known as ajr_

[15:16] <cognominal> it seems that rakudo build twice as fast using spesh

[15:17] *** falk0n joined
[15:18] <benabik> Woo!

[15:20] *** salv0 joined
[15:21] <cognominal> just a feeling, I have no  hard numbers. Setting parses in less of 1 min on my macbook. I think it was around 2 minutes

[15:22] *** kaleem left
[15:24] *** kurahaupo left
[15:32] *** zakharyas left
[15:33] *** brrt left
[15:39] *** lustlife left
[15:43] *** lustlife joined
[15:44] *** perigrin left
[15:45] *** perigrin joined
[15:46] <jnthn> cognominal: Don't think it's that dramatic, but yeah, I get the whole setting built in less than a minute on this machine.

[15:47] <cognominal> indeed, but it was two minutes not long ago, so I don't know what made the difference.

[15:49] <cognominal> at least, mesh machinery did not slowed it down  :)

[15:49] *** ldthien0 joined
[15:49] *** ldthien0 left
[15:52] *** bfulgham_ joined
[15:52] *** xinming_ left
[15:53] *** bjz left
[15:53] *** xinming_ joined
[15:58] *** ldthien0 joined
[16:02] *** ribasushi left
[16:03] *** ribasushi joined
[16:03] *** ribasushi left
[16:03] *** ribasushi joined
[16:03] *** ribasushi left
[16:04] <dalek> rakudo/nom: 9eaf468 | jonathan++ | src/core/List.pm:

[16:04] <dalek> rakudo/nom: Greatly cheapen single-item push/unshift subs.

[16:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9eaf4682dc

[16:04] *** ribasushi joined
[16:04] *** ribasushi left
[16:04] *** rurban_ left
[16:04] *** ribasushi joined
[16:04] *** ribasushi left
[16:05] *** ribasushi joined
[16:05] *** ribasushi left
[16:05] *** ribasushi joined
[16:05] *** ribasushi left
[16:05] *** kurahaupo joined
[16:06] *** ribasushi joined
[16:06] *** ribasushi left
[16:06] *** ribasushi joined
[16:06] *** ribasushi left
[16:07] *** ribasushi joined
[16:07] *** ribasushi left
[16:07] *** Ven left
[16:07] *** ribasushi joined
[16:07] *** ribasushi left
[16:08] *** ribasushi joined
[16:08] *** ribasushi left
[16:08] *** ribasushi joined
[16:08] *** ribasushi left
[16:09] *** fhelmberger left
[16:09] *** ribasushi joined
[16:09] *** ribasushi left
[16:09] *** ribasushi joined
[16:09] *** ribasushi left
[16:11] *** rurban joined
[16:12] *** hoverboard joined
[16:13] *** ribasushi joined
[16:13] *** ribasushi left
[16:19] *** ribasushi joined
[16:19] *** ribasushi left
[16:19] *** ribasushi joined
[16:19] *** ribasushi left
[16:24] <timotimo> oh, i seem to have been under the impression that the methods were also pessimized for single element pushes/unshifts

[16:25] <jnthn> timotimo: They are, but that's a harder fix, so I picked the easy thing first. :)

[16:25] *** ajr_ left
[16:25] <timotimo> ah!

[16:25] <timotimo> but the improvement stacks?

[16:26] *** denis_boyun_ joined
[16:26] <timotimo> did you check if our accessor methods for the node classes and such get improved much by spesh or should i have a quick look?

[16:26] *** guru joined
[16:27] *** guru is now known as Guest75024

[16:27] <JimmyZ> Was accessor methods inlined yet? :)

[16:27] *** Guest75024 is now known as ajr_

[16:27] <timotimo> we don't inline methods yet

[16:28] <jnthn> timotimo: Yes, the improvements will stack

[16:28] <[Coke]> jnthn++

[16:30] *** spider-mario joined
[16:31] <timotimo> jnthn: would you be okay with me implementing eqaddr on known values?

[16:31] <timotimo> that opcode is the result of the "unless $value =:= NO_VALUE" things we have in the accessors

[16:32] *** bfulgham_ left
[16:33] <jnthn> timotimo: Yeah, I'm totally fine with that, but I *think* we may be missing one thing for it to trigger

[16:33] <jnthn> timotimo: But I totally forget what, so try it :)

[16:33] <timotimo> hehe.

[16:35] * jnthn thinks he just made @a eqv @b about 3 times faster

[16:36] <timotimo> \o/

[16:38] *** ribasushi joined
[16:38] *** ribasushi left
[16:38] <jnthn> Mighta got several percent improvement on each .new too

[16:38] <jnthn> for the defualt candidate anyway

[16:39] *** thien joined
[16:39] *** bjz joined
[16:40] *** spider-mario left
[16:40] *** spider-mario joined
[16:42] *** ajr_ left
[16:46] *** ribasushi joined
[16:46] <dalek> rakudo/nom: 6b80fe2 | jonathan++ | src/core/Mu.pm:

[16:46] <dalek> rakudo/nom: Optimize new's delegation to make it cheaper.

[16:46] <dalek> rakudo/nom: 

[16:46] <dalek> rakudo/nom: Saves around 5% off Foo.new.

[16:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6b80fe2645

[16:46] <dalek> rakudo/nom: 3e609e0 | jonathan++ | src/core/Mu.pm:

[16:46] <dalek> rakudo/nom: Make @a eqv @b around 3 times faster.

[16:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3e609e0c43

[16:46] <dalek> rakudo/nom: 29bc5f6 | jonathan++ | src/core/Any.pm:

[16:46] <dalek> rakudo/nom: Use = in auto-viv, not &infix:<=>.

[16:46] <dalek> rakudo/nom: 

[16:47] <dalek> rakudo/nom: The latter forces a sub call; the former is compiled inline.

[16:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/29bc5f6cbd

[16:49] *** ldthien0 left
[16:49] <timotimo> was &infix:<=> used to work around some kind of bug perhaps?

[16:50] <ribasushi> sorry for the annoying joinflood earlier

[16:50] <ribasushi> fixed now

[16:50] *** telex left
[16:50] <vendethiel> yay !

[16:50] <vendethiel> that's a lot

[16:51] <jnthn> timotimo: Maybe, but it's a gone bug now

[16:52] <jnthn> At least, so says spectest

[16:52] <timotimo> very well

[16:53] *** denis_boyun___ joined
[16:54] *** denis_boyun_ left
[16:55] <timotimo> hmm. given how many times we call .new on things for basically everything, a 5% win there should translate to a very good win for pretty much everything we do

[16:56] *** telex joined
[16:58] <timotimo> fwiw, my desktop is down to 38.7 seconds for stage parse on moar :)

[16:59] <timotimo> 1:32 for a whole make m-install after a clean

[17:00] *** thou left
[17:04] *** eMBee left
[17:04] *** kurahaupo_mobile joined
[17:08] *** kurahaupo left
[17:08] *** Guest59041 left
[17:08] *** Guest59041 joined
[17:08] *** dakkar left
[17:08] *** Guest59041 is now known as zacts

[17:08] *** kurahaupo_mobile left
[17:12] *** bluescreen100 joined
[17:16] *** bluescreen10 left
[17:17] *** cognominal left
[17:17] *** cognominal joined
[17:19] *** rindolf joined
[17:19] *** a3gis joined
[17:21] *** virtualsue left
[17:21] <dalek> rakudo/nom: dd1f4fa | jonathan++ | src/core/Any.pm:

[17:21] <dalek> rakudo/nom: Add non-slurping candidates for various list subs.

[17:21] <dalek> rakudo/nom: 

[17:21] <dalek> rakudo/nom: Prevent an extra layer of wrapping, and way more likely to inline. For

[17:21] <dalek> rakudo/nom: map on a 5-element list in a loop, around a 5% saving.

[17:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dd1f4fad6b

[17:21] <dalek> rakudo/nom: ad962d0 | jonathan++ | src/core/ (3 files):

[17:21] <dalek> rakudo/nom: Optimize coercion to Order enum.

[17:21] <dalek> rakudo/nom: 

[17:21] <dalek> rakudo/nom: In the long run, it'd be good to emit better code for coercion to an

[17:21] <dalek> rakudo/nom: enum type. For now, this hot-paths it in cmp and <=>, which are used

[17:21] <dalek> rakudo/nom: in a whole range of operations. Knocked 15% off a sort benchmark.

[17:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ad962d0aa2

[17:21] <dalek> rakudo/nom: b37ef4f | jonathan++ | src/core/Any.pm:

[17:21] <dalek> rakudo/nom: Micro-opt on sort sub.

[17:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b37ef4fbf4

[17:22] <vendethiel> Optimization time o/

[17:23] <timotimo> ah, i remember what the LHF was i wanted to put into the p6weekly

[17:30] *** havenwood joined
[17:39] <colomon> jnthn++

[17:40] *** raiph left
[17:40] *** raiph joined
[17:40] *** Rotwang joined
[17:40] *** guru joined
[17:41] <japhb> jnthn: Why no non-slurping version of join?

[17:41] <yoleaux> 2 Apr 2014 08:41Z <jnthn> japhb: yes, the panda p6doc thing is known to fail install on both JVM and MoarVM. It's not entirely clear why yet, but the failures are likely related.

[17:41] *** guru is now known as Guest88401

[17:41] *** Guest88401 is now known as ajr_

[17:42] <jnthn> japhb: optional $sep parameter cannot be followed by slurpy

[17:42] <jnthn> japhb: Though, could find another way :)

[17:45] <jnthn> The array/hash slicing code really, really needs an optimization pass now it's had a correctness one :)

[17:48] <japhb> jnthn: I was thinking: multi join($sep, @values)

[17:48] <japhb> Yeah, I believe that!

[17:49] * timotimo recently did some informal performance measurements in that area and really has to concur

[17:50] <jnthn> japhb: oh, yeah...duh :)

[17:51] <[Coke]> jnthn++ again

[17:51] <jnthn> japhb: Adding it

[17:51] * jnthn slept awfully last night, taught all day, and so isn't the sharpest two short planks in the jar tonight... :P

[17:52] * jnthn spectests a few more changes

[17:54] <japhb> "sharpest two short planks in the jar" -- well that's ... evocative.  :-)

[17:54] * timotimo benchmarks the recent rakudo optimizations

[17:55] <jnthn> hehe

[17:56] <jnthn> I should probably get some dinner :)

[18:00] <japhb> timotimo: It occurs to me that the visit_2d_indices_* microbenchmarks should have both loops doing the sqrt of the usual SCALE, but then it further occurs to me that you'd want to then increase SCALE by 4x each run, rather than 2x, and further it might be good to generalize this so that you can specify a factoring of SCALE (e.g. SCALE_1 * SCALE_2 * SCALE_3) that will DTRT.

[18:00] <timotimo> hmm

[18:01] <timotimo> i'm still not quite getting why the "please do at least 3 runs in every case" code didn't work out

[18:01] <timotimo> it's quite annoying to only see a single data point for the rakudos for example for the parse-json benchmark

[18:03] <japhb> And on a different case, we might want to do e.g. push performance tests for 1, 8, 64 ... length things to push, to see how scaling and micro-optimizations work out for operations on collections of various sorts.

[18:03] <japhb> timotimo: Hmmm, I'd have to go spelunking again to figure out what went wrong there.

[18:03] <japhb> Maybe if I can get a little time later, that would be nice.

[18:04] <japhb> (nice to work on, I mean)

[18:04] <timotimo> i would like that, thanks!

[18:04] *** xinming__ joined
[18:05] <jnthn> going for dinner...bbl

[18:07] *** xinming_ left
[18:14] <ajr_> jnthn appears to be going for a world record in metaphor-garbling; that's >= 3 in 7 words. :-)*

[18:15] *** raiph left
[18:16] <timotimo> ajr_: so *that*'s why that idiom seemed foreign to me!

[18:19] <ajr_> It's at least a combination of "not the sharpest knife in the drawer/pencil in the jar" and "thick as two short planks", ("thick" = stupid) compounded with the meta message of confusion.

[18:21] <timotimo> thanks for clearing that up :)

[18:29] *** falk0n left
[18:37] *** zacts left
[18:45] *** cognominal left
[18:46] *** cognominal joined
[18:50] *** dwarring joined
[18:52] *** mattp__ joined
[18:52] *** mattp_ left
[19:02] *** rurban left
[19:03] *** rurban joined
[19:07] *** darutoko left
[19:15] *** thou joined
[19:15] *** a3gis left
[19:15] *** a3gis_ joined
[19:17] <vendethiel> .u 0x2297

[19:17] <yoleaux> No characters found

[19:17] <vendethiel> .u 2297

[19:17] <yoleaux> U+2297 CIRCLED TIMES [Sm] (⊗)

[19:20] *** [particle] joined
[19:25] <timotimo> ⊕_⊕

[19:25] <timotimo> http://t.h8.lv/p6bench/2014-04-08-rakudo_opt.html - the optimization of push is clearly visible, giving 2x speed in one of the two benchmarks. the other optimizations are not so visible it seems

[19:26] <timotimo> man, our empty for loops have some significant catching up to do

[19:28] *** hoverboard left
[19:30] <jnthn> timotimo: Well, the others came more from me looking through CORE.setting rather than analizing the benchmarks

[19:30] <jnthn> *analyzing

[19:30] *** lizmat joined
[19:32] <dalek> rakudo/nom: 5d74bce | jonathan++ | src/core/Int.pm:

[19:32] <dalek> rakudo/nom: Further optimization of postfix ++ and --.

[19:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5d74bce579

[19:32] <timotimo> yeah, that's fine ;)

[19:33] <timotimo> i had expected to see a good difference in the bigger benchmarks, though

[19:33] <timotimo> forest fire in particular

[19:33] <vendethiel> jnap: what are those # XXX for ?

[19:34] * lizmat has arrived in Zürich and is pleasantly surprised by jnthn++ avalanche of commits today

[19:35] <timotimo> jnthn: do we have any clue why the empty for loop seems to have such massive overhead compared to perl5?

[19:35] <jnthn> lizmat: Given I slept 3 hours last night, so am I ;)

[19:36] <jnthn> timotimo: Yeah, at least somewhat. We don't flatten the block in.

[19:36] <jnthn> timotimo: There is an opt for that, but it's level 3.

[19:38] <timotimo> i run rakudo-moar with --optimize=3 in the benchmarks

[19:38] <jnthn> ah

[19:38] <jnthn> and yeah, it makes a small difference

[19:38] <jnthn> So the cost is elsewhere

[19:39] <jnthn> In Perl 5, iiuc, when you do:

[19:39] <jnthn> for (my $i = 1; $i < 100000; $i++ { }

[19:39] <jnthn> Then $i is allocated once, and you're fiddling wiht the same scalar

[19:40] <jnthn> Whereas in Perl 6 that is a scalar that gets ++'d creating a new Int each time.

[19:40] <timotimo> oh, i see

[19:41] <jnthn> So if we want to get the same we need to work out that we're allowed to cheat :)

[19:41] <jnthn> Not having to support binding *and* assignment turns out to be rather useful.

[19:41] <jnthn> Perl 6 wants both so...we have "fun"

[19:45] <dalek> roast: 6dd6ced | (David Warring [email@hidden.address] | integration/advent2013-day2 (2 files):

[19:45] <dalek> roast: adding advent 2013 days 22 & 23

[19:45] <dalek> roast: review: https://github.com/perl6/roast/commit/6dd6ced135

[19:46] <lizmat> dinner&

[19:46] *** lizmat left
[19:54] *** isBEKaml joined
[20:03] *** pippo joined
[20:04] <pippo> Hi perl6!

[20:04] <vendethiel> o/

[20:04] <PerlJam> hello pippo 

[20:05] <pippo> m: $b=0; my @a; for ^10_000 {@a[$_]=[0,1]}; say time; for ^10_000 {$b+=@a[$_][1]}; say time;

[20:05] <camelia> rakudo-moar b37ef4: OUTPUT«===SORRY!=== Error while compiling /tmp/pViob_i21Z␤Variable '$b' is not declared␤at /tmp/pViob_i21Z:1␤------> $b⏏=0; my @a; for ^10_000 {@a[$_]=[0,1]}; s␤    expecting any of:␤        postfix␤»

[20:06] <pippo> m: my $b=0; my @a; for ^10_000 {@a[$_]=[0,1]}; say time; for ^10_000 {$b+=@a[$_][1]}; say time;

[20:06] <camelia> rakudo-moar b37ef4: OUTPUT«1396987562␤1396987562␤»

[20:06] <pippo> m: my $b=0; my @a; for ^10_000 {@a[$_]="1,2".split(',')}; say time; for ^10_000 {$b+=@a[$_][1]}; say time;

[20:06] <camelia> rakudo-moar b37ef4: OUTPUT«(timeout)1396987604␤»

[20:07] <pippo> ^^anybody know why this takes so much time?? 

[20:08] *** kbaker_ left
[20:08] <vendethiel> creating an array for 2 elems and splitting a string?

[20:08] <PerlJam> pippo: at a guess, all the memory allocations

[20:09] <moritz> one problem is that split compiles a regex, and iirc doesn't cache it

[20:09] <flussence> m: my $b=0; my @a; for ^10_000 {@a[$_]=[0,1]}; say time; for ^10_000 {$b+=@a[$_][1]}; say time; say $b

[20:09] * vendethiel helped a friend fix a performance problem on a Gameoflife in ruby : moved [" ", "x"] outside of the loop (for display) and went from 3 fps to 60+fps

[20:09] <camelia> rakudo-moar b37ef4: OUTPUT«1396987747␤1396987747␤10000␤»

[20:09] <flussence> okay, so it's not just optimising that out...

[20:10] *** isBEKaml left
[20:10] *** spider-mario left
[20:11] <flussence> split has a non-regex special case though, so it's not that problem either. There's a lot of code in there though...

[20:11] <dalek> perl6-roast-data: 0fd5db1 | coke++ | / (6 files):

[20:11] <dalek> perl6-roast-data: today (automated commit)

[20:11] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/0fd5db10f7

[20:14] <pippo> So when the first "say time" is executed @a is not yet constructed?

[20:15] <timotimo> ... huh?

[20:15] <timotimo> in which code exactly?

[20:15] <vendethiel> pippo: trick =>

[20:15] <vendethiel> r: say time - BEGIN time

[20:15] <camelia> rakudo-jvm b37ef4: OUTPUT«Unhandled exception: java.lang.RuntimeException: Missing or wrong version of dependency 'src/Perl6/Grammar.nqp'␤  in  (gen/jvm/main.nqp)␤␤»

[20:15] <camelia> ..rakudo-parrot b37ef4, rakudo-moar b37ef4: OUTPUT«0␤»

[20:15] *** Rotwang left
[20:16] <vendethiel> what do you waaaaaaant from me, rakudo-jvm !

[20:16] <pippo> timotimo: my $b=0; my @a; for ^10_000 {@a[$_]="1,2".split(',')}; say time; for ^10_000 {$b+=@a[$_][1]}; say time;

[20:16] <vendethiel> r: my int $i = 0; for ^100000 { $i += $u }; say time - BEGIN time;

[20:16] <camelia> rakudo-parrot b37ef4, rakudo-moar b37ef4: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Variable '$u' is not declared␤at /tmp/tmpfile:1␤------> my int $i = 0; for ^100000 { $i += $u⏏ }; say time - BEGIN time;␤    expecting any …»

[20:16] <camelia> ..rakudo-jvm b37ef4: OUTPUT«Unhandled exception: java.lang.RuntimeException: Missing or wrong version of dependency 'src/Perl6/Grammar.nqp'␤  in  (gen/jvm/main.nqp)␤␤»

[20:17] <vendethiel> r: my int $i = 0; for ^100000 { $i += $_ }; say time - BEGIN time;

[20:17] <camelia> rakudo-moar b37ef4: OUTPUT«No such method 'STORE' for invocant of type 'Int'␤  in block  at src/gen/m-CORE.setting:16846␤  in block  at /tmp/tmpfile:1␤␤»

[20:17] <camelia> ..rakudo-jvm b37ef4: OUTPUT«Unhandled exception: java.lang.RuntimeException: Missing or wrong version of dependency 'src/Perl6/Grammar.nqp'␤  in  (gen/jvm/main.nqp)␤␤»

[20:17] <camelia> ..rakudo-parrot b37ef4: OUTPUT«Cannot modify an immutable value␤  in block  at gen/parrot/CORE.setting:17045␤  in block  at /tmp/tmpfile:1␤␤»

[20:17] <vendethiel> r: my int $i = 0; for ^100000 { $i = $i + $_ }; say time - BEGIN time; # forgot that ..

[20:17] <camelia> rakudo-parrot b37ef4: OUTPUT«3␤»

[20:17] <camelia> ..rakudo-jvm b37ef4: OUTPUT«Unhandled exception: java.lang.RuntimeException: Missing or wrong version of dependency 'src/Perl6/Grammar.nqp'␤  in  (gen/jvm/main.nqp)␤␤»

[20:17] <camelia> ..rakudo-moar b37ef4: OUTPUT«0␤»

[20:17] <[Coke]> (if you don't need all of rakudo, just use p or m)

[20:18] <pippo> vendethiel: I did not want to time all the proggy. Just the last for cycle part. :-)

[20:19] <pippo> vendethiel: I did not want to time all the proggy. Just the last "for" loop part. :-)

[20:22] <timotimo> also, BEGIN is when the parser hits the code, CHECK is after all code has been compiled

[20:23] <timotimo> so if you compare BEGIN now with CHECK now, you'll get the time between the parser hitting the BEGIN now and the parser finishing and stuff being compiled

[20:24] <pippo> timotimo: any clue on why when I construct the array with split it takes an eternity?

[20:25] *** hoverboard joined
[20:25] <flussence> something is seriously broken there actually... I've been letting that line of code run for several minutes now.

[20:26] <pippo> flussence: I also think so. 

[20:27] <timotimo> hum.

[20:29] *** kbaker joined
[20:31] *** mdiei joined
[20:31] <moritz> pippo: try to split on rx/\,/ instead

[20:32] <pippo> moritz: sorry. How? 

[20:32] <timotimo> i can get 100_000 times the split and put stuff into the array in 45 seconds

[20:33] <moritz> pippo: .split(rx/\,/) instead of .split(',')

[20:34] <pippo> timotimo: th block that takes time is not the array construction but array manipulation one i.e. "for ^10_000 {$b+=@a[$_][1]};"

[20:34] <timotimo> ah, hm.

[20:34] <pippo> moritz: trying

[20:35] <pippo> moritz: trying...

[20:36] <flussence> having said that, the first loop takes some indefinite amount of time in perl6-p too...

[20:36] <flussence> (only 8s in moar)

[20:38] <jnthn> so, I'm re-writing Str.split taking a string delim...

[20:38] *** kivutar joined
[20:40] <pippo> moritz: it is immensly faster!! Thank you! How did you know?

[20:40] *** virtualsue joined
[20:41] <flussence> there's only two code paths to choose from there :)

[20:42] *** a3gis_ left
[20:45] <moritz> pippo: split compiles the separator into a regex internally

[20:45] <moritz> pippo: and that's slow

[20:45] <timotimo> well, it's only slow because it does that every time anew :)

[20:45] *** hummeleBop1 left
[20:45] <moritz> aye

[20:46] <jnthn> uh, the split I'm looking at doesn't...

[20:47] <moritz> oh

[20:47] <moritz> then the regex version is much faster than the Cool version :/

[20:47] <moritz> and my information likely comes from an outdated version

[20:48] <PerlJam> So ... how does this affect the *second* loop?

[20:49] <moritz> does it?

[20:49] <moritz> somehow I read conflicting statements

[20:49] <PerlJam> Assuming pippo's statement is accurate ... <pippo> timotimo: th block that takes time is not the array construction but array manipulation one

[20:49] <dalek> roast: fe727fc | (David Warring [email@hidden.address] | integration/advent2013-day22.t:

[20:49] <dalek> roast: typo

[20:49] <dalek> roast: review: https://github.com/perl6/roast/commit/fe727fc4ab

[20:49] <timotimo> right. good question.

[20:50] <moritz> r: say 'a,b'.split(',').^name

[20:50] <camelia> rakudo-parrot 5d74bc, rakudo-jvm 5d74bc, rakudo-moar 5d74bc: OUTPUT«List␤»

[20:50] <moritz> m: say 'a,b'.split(rx/\,/).^name

[20:50] <camelia> rakudo-moar 5d74bc: OUTPUT«List␤»

[20:51] *** Alula left
[20:52] *** Alula joined
[20:54] <pippo> moritz: yes it does. On my machine the first loop is always done quickly (the first "say time" is executed and time is printed) The second one takes tooooooo long to appear.

[20:55] <pippo> moritz: with your suggestion my CSV manipulation program went from 20 min to 2 min to execute !! Yep! :-)

[20:57] <pippo> moritz: ty.

[20:58] *** kaare_ left
[20:58] <PerlJam> Here's what I get on my computer: https://gist.github.com/perlpilot/10191112

[20:59] <sergot> night night! o/

[21:00] <PerlJam> (that's Moar btw)

[21:02] <PerlJam> though perl6-j appears to exhibit the same behavior

[21:03] *** havenwood left
[21:04] <pippo> PerlJam: Nice! Also here on perl6-{j,m}

[21:07] *** rindolf left
[21:09] <jnthn> r: say "".split(':')

[21:09] <camelia> rakudo-parrot 5d74bc, rakudo-jvm 5d74bc, rakudo-moar 5d74bc: OUTPUT«␤»

[21:09] <jnthn> r: say "".split(':').perl

[21:09] <camelia> rakudo-parrot 5d74bc, rakudo-jvm 5d74bc, rakudo-moar 5d74bc: OUTPUT«("",).list␤»

[21:13] <PerlJam> pippo: btw, are you actually using Text::CSV?

[21:13] *** lizmat joined
[21:13] <pippo> PerlJam: Nope. Is it fast?

[21:13] *** woolfy joined
[21:14] <PerlJam> Dunno how fast it is comparatively.  I just thought you should know about it if you didn't :)

[21:15] <pippo> PerlJam: Thank you. I'll try it on my next proggy :-))

[21:16] *** treehug88 left
[21:18] *** kbaker left
[21:22] <mdiei> hello from finland

[21:22] <mdiei> hows monks doing

[21:24] *** FROGGS[mobile] left
[21:26] <timotimo> hm?

[21:26] *** benabik left
[21:30] <jnthn> pippo, PerlJam: I've now got a version here where https://gist.github.com/perlpilot/10191112 runs faster with Version A than Version B. :)

[21:31] <jnthn> spectesting at the moment

[21:32] *** virtualsue left
[21:33] <pippo> jnthn: \o/ !!! 

[21:34] <pippo> jnthn: jnthn++

[21:37] *** raiph joined
[21:39] <lizmat> r: multi a (int $a) { say "signed $a" }; a(42)   # works

[21:39] <camelia> rakudo-parrot 5d74bc, rakudo-jvm 5d74bc, rakudo-moar 5d74bc: OUTPUT«signed 42␤»

[21:39] <lizmat> r: multi a (uint $a) { say "unsigned $a" }; multi a (int $a) { say "signed $a" }; a(42)  # expected to work as well, but doesn't :-(

[21:39] <camelia> rakudo-parrot 5d74bc: OUTPUT«Cannot call 'a'; none of these signatures match:␤:(uint $a)␤:(int $a)␤  in any  at gen/parrot/BOOTSTRAP.nqp:1219␤  in sub a at /tmp/tmpfile:1␤  in block  at /tmp/tmpfile:1␤␤»

[21:39] <camelia> ..rakudo-moar 5d74bc: OUTPUT«Cannot call 'a'; none of these signatures match:␤:(uint $a)␤:(int $a)␤  in sub a at /tmp/tmpfile:1␤  in block  at /tmp/tmpfile:1␤␤»

[21:39] <camelia> ..rakudo-jvm 5d74bc: OUTPUT«Cannot call 'a'; none of these signatures match:␤:(uint $a)␤:(int $a)␤  in any  at gen/jvm/BOOTSTRAP.nqp:1212␤  in sub a at /tmp/tmpfile:1␤  in block  at /tmp/tmpfile:1␤␤»

[21:40] <lizmat> if we could MMD on uint, then we could make a candidate for [] that  doesn't check the index

[21:40] <jnthn> lizmat: You've broken its ability to compile-time dispatch it by introducing ambiguity.

[21:40] *** hoverboard left
[21:41] <jnthn> lizmat: So it leaves it to runtime and calls it with the boxed Int instead.

[21:41] <jnthn> And that doesn't match int/uint in a multi-dispatch.

[21:41] <jnthn> Otherwise in int vs. Int we'd never reach the Int one.

[21:41] <lizmat> hmmm...

[21:42] <lizmat> m: multi a (uint $a) { say "unsigned $a" }; multi a (Int $a) { say "int $a" }; a(-42); a(42)

[21:42] <camelia> rakudo-moar 5d74bc: OUTPUT«int -42␤unsigned 42␤»

[21:43] <dalek> rakudo/nom: da1ef6e | jonathan++ | src/core/Str.pm:

[21:43] <dalek> rakudo/nom: Optimize split on a literal string.

[21:43] <dalek> rakudo/nom: 

[21:43] <dalek> rakudo/nom: Use native str/int and nqp:: ops to get something of a speedup. Also,

[21:43] <dalek> rakudo/nom: don't use an infinite range, since that makes evaluation of the map

[21:43] <dalek> rakudo/nom: too lazy, causing other performance issues.

[21:43] *** woolfy left
[21:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/da1ef6e545

[21:43] <lizmat> but uint / Int MMD works apparently

[21:43] *** woolfy joined
[21:43] <jnthn> lizmat: Yeah, though...I worry it's by accident ;)

[21:43] <pippo> jnthn: pulling...

[21:44] <jnthn> pippo: Hopefully it helps a bit.

[21:44] <jnthn> I'm still not too happy with it.

[21:44] <lizmat> jnthn: I could try and run a spectest

[21:44] <jnthn> But should be an improvement.

[21:44] <jnthn> lizmat: spectest on...?

[21:44] <pippo> jnthn: I'll test it immeditly and let you how it is here :-)

[21:44] <lizmat> creating a uint / Int candidates for []

[21:45] <jnthn> crazedpsyc: We already have an int candidate afaik

[21:45] <jnthn> oops

[21:45] <jnthn> lizmat: ^^

[21:45] <jnthn> how on earth did I end up with a c instead of an l...

[21:45] <lizmat> well, if we change the int candidate to a uint, then the negative indexes would be caught by the generic Num case

[21:46] <lizmat> and bomb there, while the simple [0] cases would not need to check whether the index is < 0

[21:46] <jnthn> They...won't.

[21:47] <lizmat> ??

[21:47] <jnthn> int and uint are currently treated identically 

[21:47] <jnthn> uint isn't really implemented in general; it's only really native arrays that know what to do wiht it.

[21:48] <jnthn> There's no sense in which uint in a signature is doing any kind of checking.

[21:48] <lizmat> m: multi a (uint $a) { say "unsigned $a" }; multi a (Int $a) { say "int $a" }; a(-42); a(42)  # then why does this work ?

[21:48] <camelia> rakudo-moar 5d74bc: OUTPUT«int -42␤unsigned 42␤»

[21:48] <jnthn> You so don't want to know. :)

[21:49] <jnthn> 42 as a literal is alomorphic

[21:49] <jnthn> The - defeats that and leaves us with an Int, so far as the optimizer is concerned.

[21:49] <jnthn> At present, the only way you ever reach a native multi candidate is if the dispatch is resolved at compile time.

[21:50] <jnthn> Worse, it's done in the optimizer.

[21:50] <lizmat> but, it the negative indexes are caught at run time

[21:50] <pippo> jnthn: lightning fast! Thank you!! :-))

[21:50] <jnthn> Hm, that may not actually be true...

[21:51] <jnthn> m: multi a (uint $a) { say "oops" }; my int $x = -5; a($x)

[21:51] <camelia> rakudo-moar 5d74bc: OUTPUT«oops␤»

[21:52] <lizmat> m:  multi a (uint $a) { say "oops" }; multi a (Int $a) { say "whoopie" }; my int $x = -5; a($x)

[21:52] <camelia> rakudo-moar 5d74bc: OUTPUT«oops␤»

[21:52] *** ajr_ left
[21:52] <lizmat> m:  multi a (uint $a) { say "oops" }; multi a (Int $a) { say "whoopie" }; my int $x = -5; a($x); a(-5)

[21:52] <camelia> rakudo-moar 5d74bc: OUTPUT«oops␤whoopie␤»

[21:52] <jnthn> It really, really, doesn't know about this. It knows enough that it can get $a + $b to the (int, int) candidate if $a and $b are declared as int.

[21:53] <lizmat> ack, got you now

[21:53] <lizmat> so for now, we still need the <0 check in the int candidate, because of the [$x] case

[21:53] <jnthn> The whole area is really...icky. Especially as we probably shoudln't be sending $a + $b to the (int, int) candidate 

[21:54] <jnthn> unless a pragma is in force

[21:54] <jnthn> Generally, we do about enough that native ints are worth using if you're careful.

[21:55] <jnthn> And can be a notable speedup.

[21:55] <jnthn> Same with num.

[21:55] <jnthn> But it's sure as heck not polished.

[21:56] <lizmat> ack, got ya

[21:57] <jnthn> The thing that really needs opt in that area is basic array and hash assignment, though.

[21:58] <lizmat> Files=801, Tests=31033, 189 wallclock secs ( 8.18 usr  3.58 sys + 1257.33 cusr 90.99 csys = 1360.08 CPU)

[21:59] <lizmat> that is significantly down from 200+ wallclock yesterday!

[21:59] <jnthn> \o/

[21:59] <lizmat> that's at least a 5% improvement!

[21:59] <lizmat> wow!

[21:59] <jnthn> Yeah, it's faster on my laptop too :)

[21:59] <jnthn> Down from 464 to 443

[21:59] <jnthn> Poor thing only has 2 cores.

[21:59] <jnthn> Well, 2 physical, 4 virtual.

[22:01] <jnthn> Anyway, we almost got you a 3 minute spectest :)

[22:01] <lizmat> yup

[22:01] <lizmat> what's even better: running a spectest on parrot in the day, would cost me 20% of my battery

[22:02] <lizmat> now it's down to something like 5%

[22:02] <jnthn> :)

[22:02] <jnthn> How fast is the core setting build for you, ooc?

[22:04] *** lustlife left
[22:04] <lizmat> 1:10 last I checked

[22:04] <jnthn> oh

[22:05] <jnthn> 51.67s on my laptop for the lot

[22:05] <lizmat> hmmm....

[22:05] <jnthn> 81.59s for full Rakudo build.

[22:07] <pippo> good night perl6!

[22:07] <jnthn> oh, but I was running with spesh

[22:07] <pippo> exit

[22:07] *** pippo left
[22:08] <timotimo> at some point i'm hopeful we'll be able to propagate knowledge about integers somewhat deep into the innards of ... stuff

[22:08] <timotimo> so that perhaps spesh or jit will be able to remove checks like "is the index < 0 here?"

[22:08] <timotimo> i think that needs either inlining or more facts known at the callsite

[22:08] <jnthn> Just did it without. 53.90s for CORE.setting and 84.63s for the whole build.

[22:09] <lizmat> real	1m40.408s

[22:09] <lizmat> user	1m38.560s

[22:09] <lizmat> sys	0m1.563s

[22:09] <jnthn> r: say 51.67 / 53.90

[22:09] <lizmat> for the whole build

[22:09] <camelia> rakudo-parrot 5d74bc, rakudo-jvm 5d74bc, rakudo-moar 5d74bc: OUTPUT«0.958627␤»

[22:09] <jnthn> r: say 81.59 / 84.63

[22:09] <camelia> rakudo-parrot 5d74bc, rakudo-jvm 5d74bc, rakudo-moar 5d74bc: OUTPUT«0.964079␤»

[22:09] <lizmat> I guess that jnthn has fewer but faster CPU's

[22:09] <jnthn> i7 :)

[22:10] <jnthn> Anyway, seems spesh currently wins about 4%-5% saving. Not bad given it basically can't analyze too deeply into regexes yet.

[22:10] <lizmat> 2.8GHz i7 for me

[22:10] *** hoverboard joined
[22:11] <jnthn> Or deal with named args which show up all over.

[22:11] <timotimo> do you already have an idea what the named args are going to require for us to handle them?

[22:11] <jnthn> yeah

[22:12] <jnthn> We need to get the names made part of the callsite.

[22:12] <jnthn> It's mildly tricky.

[22:12] <jnthn> But not awfully bad.

[22:13] <jnthn> lizmat: 2.9 :)

[22:13] <timotimo> will that just be a MVMString **?

[22:13] <lizmat> that explains then  :-)

[22:13] <jnthn> timotimo: After bytecode loading, I guess yes

[22:14] <jnthn> timotimo: In the mbc file I suspect they are just stored as string heap indexes.

[22:14] <timotimo> bytecode loading? i seem to be missing something

[22:14] <timotimo> oh, of course, the callsites are in the mbc file

[22:14] <jnthn> timotimo: Well, callsites are one segment of the mbc file, which is all handled in bytecode.c.

[22:14] <lizmat> also, I'm running on battery now, so probably not getting overclocked

[22:14] <jnthn> There is one other nice consequence of this refactor, btw.

[22:14] <jnthn> Right now if you call, say, foo(bar => baz)

[22:14] <jnthn> Then it's a 

[22:15] <jnthn> prepargs [cs idx]

[22:15] <jnthn> argconst_s 0, "foo"

[22:15] *** woolfy left
[22:15] <jnthn> arg_o 1, rX

[22:15] <jnthn> invoke_o # or whatever

[22:15] *** woolfy joined
[22:15] <jnthn> And one of those instructions can go away afer this :)

[22:15] <timotimo> mhm, but that's still at least an index into the literals heap?

[22:16] <jnthn> Well, we resolve the index at load time...

[22:16] <jnthn> In the spesh case, though, we know for a given callsite what arg buffer location holds a given name.

[22:16] <jnthn> So we can just use the unsafe sp_getarg_o 

[22:17] <jnthn> Which once we can JIT will probably end up being a few instructions...

[22:18] <timotimo> which part am i going to optimize right now? the caller side or the callee side?

[22:18] *** hoverboard left
[22:19] *** lizmat_ joined
[22:19] <timotimo> well, maybe not "going to", but "supposed to" :P

[22:19] *** woolfy left
[22:20] *** lizmat left
[22:20] <jnthn> Well, it's the callee that's specialized

[22:20] <jnthn> But the caller can have an instruction less per named arg it'll pass too after this.

[22:21] <timotimo> oh, so we have a non-specializer-related opt, which is moving the argconst_s from the bytecode into the callsite storage

[22:22] <timotimo> and after that, the specializer can continue specializing even if it sees named arguments, because it knows about the named parameters from the callsite

[22:22] <jnthn> right

[22:23] <timotimo> i'll have a further look into the code before i decide whether or not i'll take that off of your plate :)

[22:23] *** lizmat_ left
[22:23] <timotimo> do you have a comment on my uthash padding code? i'm not very confident in it, but i've patched all usages of HASH_ functions to decide whether or not padding is needed

[22:23] <timotimo> unfortunately, it now crashes and burns almost immediately

[22:25] *** lizmat joined
[22:25] <jnthn> timotimo: It's hard to say at a casual glance...

[22:26] <jnthn> timotimo: I'm a bit surprised to see modulo show up in there though.

[22:26] <timotimo> well, it's three bytes of 0 and then one with data

[22:26] <timotimo> but we have blocks that go up to 12 bytes

[22:26] <jnthn> ah

[22:26] <jnthn> hm

[22:26] <timotimo> so i could either "if index == 3 || index == 7 || index == 11"

[22:26] <timotimo> or use modulo

[22:27] <jnthn> yeah, I'll need to look more closely.

[22:27] *** rurban left
[22:27] <timotimo> i went for the shorter code forn ow

[22:28] <jnthn> I'm really uncofortable how the change leaks out in https://github.com/MoarVM/MoarVM/commit/846d59e8b2 too

[22:28] <timotimo> yes.

[22:28] <timotimo> so am i

[22:28] <timotimo> didn't have a better idea yet

[22:29] *** BenGoldberg joined
[22:32] <jnthn> time for me to try and sleep...hopefully more than last night

[22:32] <jnthn> o/

[22:32] <timotimo> gnite and good luck!

[22:32] <timotimo> oh, huh

[22:33] <timotimo> if an arg is named, there's actually two args in the callsite and the first is the name and the second is the value, eh?

[22:33] <timotimo> oh, no, it's not "in the callsite", it's passed along

[22:33] <timotimo> i think i get it

[22:33] *** jlaire left
[22:34] *** mdiei left
[22:34] *** rurban joined
[22:35] *** bluescreen100 left
[22:36] *** rurban1 joined
[22:38] *** Ben_Goldberg joined
[22:38] *** BenGoldberg left
[22:38] *** Ben_Goldberg is now known as BenGoldberg

[22:39] *** rurban left
[22:42] *** thou left
[22:42] *** dmol left
[22:43] *** raiph left
[22:45] *** denis_boyun___ left
[22:48] *** jlaire joined
[22:49] <timotimo> i seem to be somewhat tired as well

[22:50] <timotimo> maybe i'll end up getting a decent sleep rhythm again if i get some sleep now?

[22:50] <lizmat> as am I

[22:50] <lizmat> yes, good rhythm is good

[22:50] <lizmat> so good night, #perl6!

[22:50] <timotimo> good rhythm lhyzmhat! :)

[22:51] <lizmat> and you, timotimo timotimo timotimo   :-) 

[22:53] *** kivutar left
[23:04] *** DarthGandalf left
[23:07] *** DarthGandalf joined
[23:09] *** btyler left
[23:11] <timotimo> i have found code that deserializes callsites from the bytecode file (apparently) and i've found a place in the byetcode verifier where it expects a named arg to be followed by its parameter

[23:11] <timotimo> so these things i'll have to change. but i'm not seeing the code that writes out the callsites

[23:18] *** FOAD left
[23:19] *** FOAD joined
[23:40] *** rurban1 left
[23:47] *** cooper- joined
[23:53] *** xenoterracide joined
