[00:02] <lizmat> timotimo: good night

[00:02] * lizmat also calls it a day

[00:02] <lizmat> gnight #perl6!

[00:02] <timotimo> and the same to you

[00:05] *** chenryn left
[00:05] *** thou joined
[00:09] *** thou left
[00:37] *** nbrown left
[00:38] *** nbrown joined
[00:47] *** iarna left
[01:01] *** chenryn joined
[01:12] *** chenryn left
[01:13] *** Akagi201 left
[01:13] *** Akagi201_ joined
[01:19] *** takesako left
[01:34] *** takesako joined
[01:39] *** klapperl_ joined
[01:43] *** klapperl left
[01:44] *** FROGGS_ joined
[01:45] *** ventica joined
[01:47] *** FROGGS left
[01:53] *** thou joined
[01:58] *** thou left
[02:09] *** chenryn joined
[02:12] *** noganex_ joined
[02:15] *** noganex left
[02:22] *** danfinch left
[02:49] *** rurban joined
[03:40] *** rurban left
[03:42] *** thou joined
[03:46] *** thou left
[03:48] *** rurban joined
[03:49] *** rurban left
[03:53] *** BenGoldberg left
[03:54] *** erdic joined
[05:15] *** iarna joined
[05:16] *** rindolf joined
[05:21] *** nbrown left
[05:30] *** thou joined
[05:35] *** thou left
[05:35] *** iarna left
[05:36] *** iarna joined
[05:37] *** iarna left
[05:40] <dalek> roast/S26-WHY: 4b160d2 | (Rob Hoelz)++ | S26-documentation/why-leading (2 files):

[05:40] <dalek> roast/S26-WHY: Integrate new form of why-leading

[05:40] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/4b160d28ae

[05:40] <dalek> roast/S26-WHY: f561680 | (Rob Hoelz)++ | S26-TODO.md:

[05:40] <dalek> roast/S26-WHY: More notes

[05:40] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/f56168080e

[05:45] <dalek> roast/S26-WHY: 4b08f75 | (Rob Hoelz)++ | S26-documentation/why-leading.t:

[05:45] <dalek> roast/S26-WHY: Fix typo

[05:45] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/4b08f756e7

[05:45] <dalek> roast/S26-WHY: 0d07cf2 | (Rob Hoelz)++ | S26-documentation/why-leading.t:

[05:45] <dalek> roast/S26-WHY: Don't fail if the WHY isn't there

[05:45] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/0d07cf23ae

[05:48] *** erkan joined
[06:10] *** xenoterracide left
[06:27] *** Akagi201_ left
[06:33] *** Akagi201 joined
[06:35] *** gfldex joined
[06:51] <dalek> roast/S26-WHY: 7e77b6a | duff++ | S26-documentation/why-trailing-alt.t:

[06:51] <dalek> roast/S26-WHY: add alternate tests for why-trailing

[06:51] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/7e77b6a33a

[07:00] *** darutoko joined
[07:09] *** chenryn left
[07:09] *** bakaseki left
[07:10] *** dmol joined
[07:10] *** akaseki joined
[07:18] *** thou joined
[07:20] *** mr-foobar left
[07:23] *** thou left
[07:33] *** aoseki joined
[07:34] *** akaseki left
[07:39] *** aoseki left
[07:41] *** akaseki joined
[07:44] <Woodi> morning :)

[07:44] *** kurahaupo_ left
[07:47] <Woodi> I was just stracing simple script and found that rakudo do a lot of stat64(...  libperl6_ops_moar.so", 0xbf8eb9a0) = -1 ENOENT (No such file or directory), once per while loop... also a lot of "brk(..............."

[07:47] <Woodi> perl5 script do just stat64 madness, but not so often

[07:48] <timotimo> oh!?

[07:48] <timotimo> that's strange

[07:48] <ChoHag> Is there a built-in time object, like Date?

[07:48] <timotimo> there is Instant and DateTime

[07:48] <ChoHag> Or: Does Date support finer granularity than days?

[07:48] <timotimo> m: say now.WHAT; say time.WHAT;

[07:48] <camelia> rakudo-moar a6e278: OUTPUT«(Instant)␤(Int)␤»

[07:48] <timotimo> m: say DateTime.now.perl

[07:48] <camelia> rakudo-moar a6e278: OUTPUT«DateTime.new(year => 2014, month => 8, day => 3, hour => 7, minute => 48, second => 53.2940583229065e0)␤»

[07:49] <ChoHag> Hmm http://doc.perl6.org/type.html doesn't list DateTime.

[07:49] <ChoHag> (Thus C-f time didn't work)

[07:50] <Woodi> I always look for things via  http://perlcabal.org/syn/index_C.html  :)

[07:50] <ChoHag> Ah that's handy.

[07:50] <ChoHag> Why C?

[07:51] <Woodi> it's probably output from ctags tool or similiar

[07:51] <timotimo> i wonder why it doesn't

[07:51] <timotimo> no, it's the listing of the C<...> tags from POD

[07:51] <ChoHag> To encourage people to write their own Time implementation?

[07:52] <ChoHag> They always work out so well.

[07:52] <timotimo> m)

[07:57] <ChoHag> Bah. There is no obvious Date or DateTime file in the source.

[07:57] *** FROGGS_ is now known as FROGGS

[07:58] <ChoHag> Ah Temporal.pm

[07:58] <FROGGS> ChoHag: rakudo/src/core/Temporal.pm

[07:58] <FROGGS> aye

[07:58] <ChoHag> I see hyphens were in at the time.

[07:58] *** kurahaupo_ joined
[07:59] <timotimo> :)

[08:00] <ChoHag> Whot does Bridge do?

[08:04] *** Celelibi joined
[08:05] *** kivutar joined
[08:08] <timotimo> relates to complex numbers a bit

[08:10] <ChoHag> The DateTime formatter can take a boolean but nothing appears to be set up to send it.

[08:15] <ChoHag> If DateTime has method Str { $!formatter(self) }, what can I do to make it call $!formatter(self, True)?

[08:15] <ChoHag> My first thought was to subclass and override Str, but the child class won't have DateTime's $! variables.

[08:15] <ChoHag> Oh never mind. It's declared &. not &!

[08:25] *** dmol left
[08:50] <ChoHag> Type check failed in binding $min; expected 'Any' but got 'Mu'.

[08:50] <ChoHag> I don't use $min...

[08:53] <FROGGS> you can pass --ll-exception to perl6 so you get a line number of the setting

[08:54] <ChoHag> That doesn't appear to help with caught exceptions.

[08:58] <FROGGS> true

[08:58] <FROGGS> that changes how backtraces are printed

[08:58] <ChoHag> Interesting. It's dying when attempting to produce a backtrace.

[08:59] <FROGGS> ahh, yes, $min is probably part of the error message

[08:59] <FROGGS> so probably something is out of range? 

[08:59] <FROGGS> (less than $min)

[08:59] <ChoHag> The error message is supposed to be 'here', as in: die "here"

[08:59] <FROGGS> O.o

[09:00] <FROGGS> unlikely that that is the spot

[09:00] <FROGGS> I guess it explodes earlier

[09:07] *** thou joined
[09:11] *** thou left
[09:13] *** virtualsue joined
[09:16] <masak> good antenoon, #perl6

[09:18] *** salv0 joined
[09:20] *** ventica left
[09:20] <FROGGS> hi masak 

[09:21] <FROGGS> jnthn: I fixed my bind_sig issue... instead of pushing a hash to the list of params in add_signature_binding_code, the hash flattened (to quite translated nqp code)

[09:44] *** mr-foobar joined
[09:58] *** spider-mario joined
[10:21] *** virtualsue_ joined
[10:22] *** virtualsue left
[10:25] *** virtualsue_ left
[10:27] *** ribasushi left
[10:30] *** ribasushi joined
[10:37] <ChoHag> This shakes my faith in the idea of computers as rational devices.

[10:37] <ChoHag> On friday, my code had a normal bug I needed to find, but otherwise ran fine.

[10:37] <ChoHag> Today I improved the logging to get a better idea of where it's failing and a new, entirely insane bug showed up.

[10:37] <FROGGS> :/

[10:38] <ChoHag> Stripping the new debug code back did not remove the bug, but upgrading perl did.

[10:38] <ChoHag> It's not supposed to work like that!

[10:39] *** ventica joined
[10:42] <FROGGS> ChoHag: when you use HEAD it is always possible that you hit a commit that introduces a regression...

[10:42] <ChoHag> Between not compiling a new perl on Friday afternoon and not compiling a new perl this morning?

[10:43] <FROGGS> err what?

[10:43] <FROGGS> you said that you upgraded perl

[10:45] *** xragnar_ joined
[10:45] *** xragnar left
[10:45] *** xragnar_ is now known as xragnar

[10:45] *** xfix left
[10:46] *** colomon joined
[10:46] *** xfix joined
[10:47] <jnthn> Backtrace printing was busted in HEAD for around 30 mins at some point recently...got patched fairly quickly, but coulda got unlucky...

[10:48] *** ventica left
[10:50] *** user3 joined
[10:55] *** thou joined
[10:57] *** user3 left
[10:59] *** darutoko- joined
[10:59] *** thou left
[11:02] *** darutoko left
[11:15] <lizmat> good *, #perl6!

[11:15] <FROGGS> hi lizmat 

[11:15] <jnthn> o/ lizmat 

[11:16] <FROGGS> Cannot iterate object with P6opaque representation

[11:16] <FROGGS>    at gen/moar/stage2/QRegex.nqp:548  (/home/froggs/dev/nqp/install/languages/nqp/lib/QRegex.moarvm:CAPHASH:4294967295)

[11:16] <lizmat> FROGGS jnthn  o/

[11:16] <FROGGS> :o(

[11:16] <FROGGS> jnthn: you don't wanna rip out CAPHASH nowish? :P

[11:16] <jnthn> :P

[11:16] <jnthn> Still not sure how you've managed that...

[11:16] <FROGGS> no, that's a new one

[11:17] <FROGGS> I'm calling .SET_CAPS with something that does not have a container, but it still explodes

[11:19] *** dwarring left
[11:20] *** virtualsue joined
[11:22] <FROGGS> okay, yeah, when I do not call .SET_CAPS it works...

[11:24] *** kivutar left
[11:28] *** Gothmog_ joined
[11:28] <FROGGS> looks like I am about to fix that one too

[11:28] <jnthn> FROGGS++

[11:28] <FROGGS> ... which means that I can run more of the test infrastructure

[11:30] <FROGGS> src/Perl5/Actions.pm:7177 Hash<1>(

[11:30] <FROGGS>     :$!descriptor((null)),

[11:30] <FROGGS>     :$!storage(BOOTHash<2>( => ▶0))

[11:30] <FROGGS> )

[11:30] <FROGGS> jnthn: does that mean there is a container?

[11:30] <FROGGS> I guess I want its $!storage...

[11:30] *** virtualsue left
[11:32] <dalek> rakudo/nom: 07f142f | (Elizabeth Mattijsen)++ | lib/lib.pm6:

[11:32] <dalek> rakudo/nom: EXPORT needs to be my to prevent conflicts

[11:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/07f142f4f2

[11:33] <jnthn> Looks like a Perl 6 Hash

[11:34] <FROGGS> yeah, patch works :o)

[11:41] *** xragnar_ joined
[11:41] *** xragnar left
[11:41] *** xragnar_ is now known as xragnar

[11:47] <ChoHag> I upgraded perl as a last resort when I couldn't get the heisenbug to go away.

[11:48] <FROGGS> ChoHag: that is what I mean, you were on a bad commit

[11:49] <FROGGS> ChoHag: when you are using HEAD, you should also look at what were the last commits when you encounter weird stuff

[11:49] <ChoHag> Right, except that the same commit apparently did and then didn't work with the same code.

[11:49] <FROGGS> yeah, these bugs are nasty

[11:52] *** kurahaupo_ left
[11:55] *** xfix left
[11:56] *** xfix joined
[11:59] *** oetiker left
[12:01] *** xfix left
[12:03] *** xfix joined
[12:03] *** xfix left
[12:03] *** xfix joined
[12:05] *** PotatoGim joined
[12:06] *** xfix left
[12:09] *** xfix joined
[12:09] *** xfix left
[12:09] *** xfix joined
[12:09] <lizmat> https://gist.github.com/lizmat/29d8530889c35e583318  # is this a bug or not?

[12:11] <lizmat> jnthn ^^

[12:12] <lizmat> in other words: when exporting a sub, should it include any closure of that sub as well or not ?

[12:15] *** kivutar joined
[12:21] *** BenGoldberg joined
[12:24] <jnthn> lizmat: The EVAL isn't doing what you think

[12:24] <jnthn> uh, or maybe it is

[12:24] <lizmat> hehe  :-)

[12:24] <jnthn> But note that it interpolates $serial into the string.

[12:24] <jnthn> Which you may or may not have meant

[12:24] <lizmat> that's the idea

[12:24] <lizmat> I want the value at time of EXPORT

[12:24] <jnthn> Right, meaning that you're capturing the state var

[12:24] <lizmat> yup

[12:24] <lizmat> it apparently isn't capture with sub {}

[12:24] <lizmat> *captured

[12:24] <jnthn> It is

[12:25] <jnthn> It's just you're closing over the same Scalar twice.

[12:25] <lizmat> ah, but the "ref" is, is what you're saying

[12:25] <lizmat> ok

[12:26] <jnthn> m: sub foo() { state $i = 0; $i++; return -> { say $i } }; my ($a, $b) = foo, foo; say $a(); say $b();

[12:26] <camelia> rakudo-moar a6e278: OUTPUT«2␤True␤2␤True␤»

[12:26] <jnthn> oops, too much to say :)

[12:26] <jnthn> m: sub foo() { state $i = 0; $i++; return -> { say $i } }; my ($a, $b) = foo, foo; $a(); $b();

[12:26] <camelia> rakudo-moar a6e278: OUTPUT«2␤2␤»

[12:26] <jnthn> m: sub foo() { state $i = 0; my $cur = ++$i; return -> { say $cur } }; my ($a, $b) = foo, foo; $a(); $b();

[12:26] <camelia> rakudo-moar a6e278: OUTPUT«1␤2␤»

[12:26] <jnthn> You may want something like that

[12:26] <jnthn> m: sub foo() { my $cur = ++state $; return -> { say $cur } }; my ($a, $b) = foo, foo; $a(); $b();

[12:26] <camelia> rakudo-moar a6e278: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/GU0RIHISkA␤Unsupported use of $; variable; in Perl 6 please use real multidimensional hashes␤at /tmp/GU0RIHISkA:1␤------> [32msub foo() { my $cur = ++state $;[33m⏏[31m return -> { say $cu…»

[12:27] <jnthn> m: sub foo() { my $cur = ++(state $); return -> { say $cur } }; my ($a, $b) = foo, foo; $a(); $b();

[12:27] <camelia> rakudo-moar a6e278: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/a5zRzKGtfH␤Unsupported use of $) variable; in Perl 6 please use $*EGID␤at /tmp/a5zRzKGtfH:1␤------> [32msub foo() { my $cur = ++(state $)[33m⏏[31m; return -> { say $cur } }; my ($a, $b) …»

[12:27] <jnthn> oh ffs

[12:27] <jnthn> std: sub foo() { my $cur = ++(state $); return -> { say $cur } }; my ($a, $b) = foo, foo; $a(); $b();

[12:27] <camelia> std 0f2049c: OUTPUT«ok 00:01 133m␤»

[12:27] <lizmat> I get the picture

[12:27] <jnthn> std: sub foo() { my $cur = ++state $; return -> { say $cur } }; my ($a, $b) = foo, foo; $a(); $b();

[12:27] <camelia> std 0f2049c: OUTPUT«ok 00:01 131m␤»

[12:27] <jnthn> How on earth does STD avoid screwing those up...hmm

[12:28] <lizmat> m: ub foo() { my $cur = ++state $ ; return -> { say $cur } }; my ($a, $b) = foo, foo; $a(); $b();

[12:28] <camelia> rakudo-moar a6e278: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/zPSijU9wTh␤Unexpected block in infix position (two terms in a row, or previous statement missing semicolon?)␤at /tmp/zPSijU9wTh:1␤------> [32mub foo() [33m⏏[31m{ my $cur = ++state $ ; ret…»

[12:28] <lizmat> m: sub foo() { my $cur = ++state $ ; return -> { say $cur } }; my ($a, $b) = foo, foo; $a(); $b();

[12:28] <camelia> rakudo-moar a6e278: OUTPUT«1␤2␤»

[12:28] <lizmat> a space does wonders :-)

[12:31] <jnthn> Whee. Provided this next spectest goes fine, then we can have another 16MB off Rakudo's base memory

[12:31] <jnthn> Or half the memory of starting the REPL

[12:31] <lizmat> cool!

[12:34] <carlin> ohh nice

[12:34] *** Alula_ left
[12:41] <jnthn> And not deserializing those saves a bit more off startup too

[12:42] <lizmat> r: sub a { OUTER::<$a> = 1 }; a  # what's wrong with this picture?

[12:42] <camelia> rakudo-moar 07f142: OUTPUT«Cannot modify an immutable Any␤  in method assign_key at src/gen/m-CORE.setting:1794␤  in sub postcircumfix:<{ }> at src/gen/m-CORE.setting:2659␤  in sub a at /tmp/tmpfile:1␤  in block  at /tmp/tmpfile:1␤␤»

[12:42] <camelia> ..rakudo-jvm 07f142: OUTPUT«(timeout)»

[12:42] <camelia> ..rakudo-parrot 07f142: OUTPUT«Cannot modify an immutable value␤  in method assign_key at gen/parrot/CORE.setting:1798␤  in method assign_key at gen/parrot/CORE.setting:1796␤  in sub postcircumfix:<{ }> at gen/parrot/CORE.setting:2664␤  in sub postcircumfix:<{ }> at gen/parrot…»

[12:43] <jnthn> There's no $a? :)

[12:43] *** thou joined
[12:43] <jnthn> And a lexpad is immutable, so we can't make one come to be.

[12:44] <lizmat> so it's more an LTA error message 

[12:44] <jnthn> We could be able to do better than that, yeah.

[12:45] <lizmat> r: sub a { BEGIN UNIT::<$a> = 1 }  # and this?

[12:45] <carlin> jnthn++ memory--

[12:45] <camelia> rakudo-jvm 07f142: OUTPUT«===SORRY!===␤ctxlexpad requires an operand with REPR ContextRef␤»

[12:45] <camelia> ..rakudo-parrot 07f142: OUTPUT«===SORRY!===␤Cannot modify an immutable value␤»

[12:45] <camelia> ..rakudo-moar 07f142: OUTPUT«===SORRY!===␤Cannot modify an immutable Any␤»

[12:46] <spider-mario> oh, I see that * 2014.06 was ready or nearly ready

[12:46] <jnthn> That one arguably could be made to work but it will be highly non-trivial.

[12:46] <spider-mario> why was it not released?

[12:46] <lizmat> FWIW, I'm trying to make the effects of "use lib" lexical

[12:47] *** Alula_ joined
[12:47] *** thou left
[12:49] <jnthn> spider-mario: Some module test failure, iirc

[12:49] <spider-mario> oh

[12:49] *** kurahaupo_ joined
[12:50] <jnthn> lizmat: Is there a spec'd way for writing such lexical pragma-ish things?

[12:50] <lizmat> Good question... not that I know offhand...  will go search spec

[12:51] <jnthn> I mean, it seems if there was a way to have a sub like EXPORT but that is run by the compiler at the point the thingy is going out to scope, then you'd ahve a much easier job :)

[12:52] <lizmat> indeed, a bit like a LEAVE

[12:52] <lizmat> but at compile time

[12:53] <jnthn> UNEXPORT :P

[12:53] *** groky joined
[12:54] <lizmat> still, the effect should also exist at runtime

[12:55] <lizmat> e.g., when doing a "need" inside a scope with a "use lib"

[12:55] *** avar joined
[12:55] <lizmat> afaics, we only have specifications of many lexical pragma's

[12:55] <lizmat> but no specification on how they should be implemented

[13:00] <lizmat> so it feels we need to be able to "freeze" a lexotic value to a scope

[13:00] <lizmat> at compile time, having the same value at runtime

[13:00] <jnthn> Well, exporting said value would do it.

[13:01] <lizmat> but exporting as what?  a lexical var?  a dynamic var?  a lexical sub ?

[13:01] *** gfldex left
[13:07] <jnthn> Whatever suits; I'd thought for lib you're more interested in side-effects (adding/removing search path), though?

[13:13] *** xenoterracide joined
[13:19] *** pmurias joined
[13:20] <FROGGS> m: our @INC; say @*INC # jnthn: is that meant to be like that?

[13:20] <camelia> rakudo-moar 07f142: OUTPUT«␤»

[13:21] <FROGGS> that feels like GLOBAL would be identical to PROCESS, right?

[13:21] <FROGGS> I hit that in v5 currently

[13:23] <lizmat> jnthn: indeed...  adding is no problem, removing is  :-(

[13:25] <FROGGS> m: our @INC; say "@*INC=@*INC[]"; say ' GLOBAL::=' ~ GLOBAL::.gist; say ' PROCESS::<@INC>=' ~ PROCESS::<@INC>

[13:25] <camelia> rakudo-moar 07f142: OUTPUT«@*INC=␤ GLOBAL::=("\@INC" => []).hash␤ PROCESS::<@INC>=/home/p6eval/rakudo-inst-1/languages/perl6/lib /home/p6eval/rakudo-inst-1/languages/perl6␤»

[13:26] <FROGGS> so that means that looking up @*INC means looking for @INC in any package

[13:26] <pmurias> has anyone here used webpack befoe?

[13:26] <FROGGS> no, not any, just GLOBAL

[13:26] <pmurias> * before

[13:26] <FROGGS> I don't even know what it is

[13:28] <lizmat> cycling&

[13:30] <dalek> nqp: 00b94e4 | jnthn++ | src/NQP/ (2 files):

[13:30] <dalek> nqp: Annotate variable usages with types.

[13:30] <dalek> nqp: 

[13:30] <dalek> nqp: This fixes a bug where codegen for $i++ on a variable declared as a

[13:30] <dalek> nqp: native int came out far worse than $i := $i + 1.

[13:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/00b94e4157

[13:30] <FROGGS> ohh nice

[13:30] <jnthn> m: say $?PACKAGE

[13:30] <camelia> rakudo-moar 07f142: OUTPUT«(GLOBAL)␤»

[13:30] <jnthn> Your program starts in GLOBAL

[13:31] <jnthn> So declaring an our var in the mainline will declare soemthing that works as a $*foo lookup fallback

[13:31] <FROGGS> and a dynamic variable should look in GLOBAL and then PROCESS?

[13:31] <carlin> all these fixes, speed ups and memory improvements are wonderful

[13:31] <jnthn> FROGGS: yes

[13:31] <FROGGS> jnthn: okay, then I have to let my v5 blocks not start in GLOBAL :/

[13:37] <pmurias> dynamic variables and non-dynamic variables are declared the same way?

[13:37] *** BenGoldberg left
[13:38] <jnthn> Well, with my, yes. my $*foo = ...

[13:38] *** xinming left
[13:38] *** rurban joined
[13:38] <pmurias> on the QAST level

[13:38] <jnthn> They're really just lexicals.

[13:39] *** avar left
[13:39] *** groky left
[13:39] <jnthn> I'm not sure what happens if you set 'contextual' as the scope on a decl

[13:39] <jnthn> If it handles it, it'll do so by pretending it's lexical, I expect

[13:40] * pmurias checks

[13:40] <jnthn> I glanced QAST -> MAST and it doesn't handle 'contextual' as a kind of declaration.

[13:41] *** avar joined
[13:41] <jnthn> It even goes so far as to rewrite $*foo access in the same scope it's declared in as a normal lexical access

[13:41] *** groky joined
[13:42] <pmurias> this forces a performance penalty on the js backend

[13:43] <jnthn> How so?

[13:44] <jnthn> Also, note that the NQP optimizer kills most lexicals 

[13:44] <jnthn> (They become locals)

[13:45] <timotimo> o/

[13:45] <pmurias> jnthn: and how does the NQP optimizer determin if something is a dynamic variable?

[13:45] <pmurias> * determine

[13:46] <jnthn> Looks for a * in the name, iirc

[13:46] <pmurias> jnthn: non-dynamic variables can be turned into regular variables

[13:48] <jnthn> We could consider making declarations of dynamic variables be done with contextual I guess, so compilers can use the hint

[13:48] <jnthn> Thing is that in Rakudo it's more involved

[13:48] <jnthn> It's not just about the name

[13:48] <jnthn> $/, $_, and $! are contextual for example

[13:49] <jnthn> There's an "is dynamic" trait that controls it

[13:49] *** Akagi201 left
[13:50] <pmurias> it seems to be enforced at runtime too

[13:50] *** xinming joined
[13:50] *** Akagi201 joined
[13:50] <jnthn> Yes

[13:50] <jnthn> Well, for late-bound lookups it is

[13:51] <jnthn> I mean, through pseudostash

[13:55] *** grondilu joined
[13:57] <timotimo> how pessimal is pseudostash anyway?

[13:58] <jnthn> Very.

[13:58] <jnthn> Well, compared to without it :)

[13:58] <timotimo> right

[13:58] <timotimo> good thing we don't use it anywhere performance-specific. right?

[13:58] <jnthn> We'd better not be doing :)

[13:59] <jnthn> OUTER::<$x> is one of those cases where we'll likely get the optimizer to re-write it - or even just the compiler to generate it differently.

[13:59] <jnthn> And thus avoid the pseudostash

[13:59] <timotimo> right, in almost all cases we ought to know the actual outer

[14:31] *** thou joined
[14:32] *** xenoterracide left
[14:36] *** thou left
[14:38] *** xenoterracide joined
[14:38] *** molaf_ joined
[14:41] *** molaf__ left
[14:52] *** nbrown joined
[14:58] *** virtualsue joined
[15:00] *** nbrown left
[15:29] *** xenoterracide left
[15:36] *** xenoterracide joined
[15:37] *** gfldex joined
[15:38] *** nbrown joined
[15:39] *** donghongbo joined
[15:47] *** donghongbo left
[15:48] *** donghongbo joined
[15:48] <donghongbo> ?

[15:50] <itz> MIME::Base64 fails with t/binary-and-long-line.t under version 2014.07-97-g07f142f built on MoarVM version 2014.07-88-gfb13b5e

[15:57] *** thou joined
[16:00] *** xenoterracide left
[16:03] *** chenryn joined
[16:06] <itz> ah "Breaking API change; requires NQP and Rakudo updates." :)

[16:10] *** denis_boyun joined
[16:11] *** Bucciarati joined
[16:11] *** xenoterracide joined
[16:22] *** dong4138 joined
[16:22] *** donghongbo left
[16:23] <dalek> roast/S26-WHY: 981b5b0 | (Rob Hoelz)++ | S26-documentation/why-leading.t:

[16:23] <dalek> roast/S26-WHY: Don't assume that the $=pod entry we need is there

[16:23] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/981b5b0095

[16:23] <dalek> roast/S26-WHY: dca28f6 | (Rob Hoelz)++ | S26-documentation/why-leading.t:

[16:23] <dalek> roast/S26-WHY: Fix plan

[16:23] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/dca28f6ebb

[16:23] <dalek> roast/S26-WHY: 2e04775 | (Rob Hoelz)++ | S26-documentation/why-trailing (2 files):

[16:23] <dalek> roast/S26-WHY: Integrate alternative trailing test

[16:23] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/2e047751bd

[16:23] <dalek> roast/S26-WHY: 0b90da2 | (Rob Hoelz)++ | S26-documentation/why-trailing.t:

[16:23] <dalek> roast/S26-WHY: Don't crash if we're expecting a WHY and there is none

[16:23] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/0b90da2bd4

[16:23] <dalek> roast/S26-WHY: 46e2bb4 | (Rob Hoelz)++ | S26-documentation/why-trailing.t:

[16:23] <dalek> roast/S26-WHY: Fix up trailing test

[16:23] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/46e2bb4634

[16:25] *** thou left
[16:26] *** grondilu left
[16:28] *** denis_boyun left
[16:30] *** nbrown_ joined
[16:33] *** dong4138 left
[16:33] *** nbrown left
[16:35] <dalek> roast/S26-WHY: 75d3ff9 | (Rob Hoelz)++ | S26-documentation/why-leading.t:

[16:35] <dalek> roast/S26-WHY: A note on test levels

[16:35] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/75d3ff977b

[16:46] *** khisanth_ is now known as Khisanth

[16:47] *** thou joined
[16:52] *** thou left
[17:27] *** zakharyas joined
[17:52] *** erkan left
[17:57] *** nbrown_ left
[18:01] *** zakharyas left
[18:06] *** kurahaupo_ left
[18:15] *** Sterver joined
[18:16] *** Rotwang joined
[18:17] *** chenryn left
[18:18] <Sterver> Hi all! I want to learn Perl, and I want to ask, if I should learn Perl 5 before 6 or I can learn Perl 6 without any knowlege of Perl?

[18:19] <FROGGS> Sterver: you can learn Perl 6 right away, we have quite a lot of ppl who do not know Perl 5

[18:21] <Sterver> FROGGS: Ok, thanks. And is there any good tutorial which you recommend?

[18:22] <FROGGS> Sterver: perhaps this? https://github.com/Nami-Doc/learnxinyminutes-docs/blob/master/perl6.html.markdown

[18:23] <FROGGS> this is not what I would call up to date, but it is a start too: https://cloud.github.com/downloads/perl6/book/2012.05.23.a4.pdf

[18:25] *** erkan joined
[18:25] *** erkan left
[18:25] *** erkan joined
[18:25] <Sterver> FROGGS: Yeah, thanks for both :)

[18:26] <FROGGS> Sterver: have fun learning it, and don't hesitate to ask

[18:26] <FROGGS> m: say 42.WHAT # or try things here (or via privmsg to camelia)

[18:26] <camelia> rakudo-moar 07f142: OUTPUT«(Int)␤»

[18:27] <Sterver> FROGGS: Ok, thanks :) 

[18:30] *** vendethiel joined
[18:31] <vendethiel> guess who's back, under the rain ... o/, #perl6.

[18:31] <FROGGS> hi vendethiel 

[18:32] *** nbrown_ joined
[18:34] * vendethiel is pretty depressed to have suffered from greats downpour 2 times already since august started.

[18:35] <FROGGS> hmmmm, I like rain

[18:36] *** liztormato joined
[18:36] <vendethiel> FROGGS: don't get me wrong -- I *love* rain. But not when I'm under it with no way to ... stay safe :p

[18:36] <FROGGS> well, you just get wet then, no? :o)

[18:37] * liztormato is waiting for a thunderstorm to pass

[18:37] <liztormato> For over an hour now :-(

[18:38] <vendethiel> FROGGS: yes, and since I have a cold already, I'd rather avoid spend the only 3 weeks of holidays I have this year in a bed :P.

[18:38] *** nbrown_ left
[18:39] <vendethiel> .oO( Love's like those funny videos: they're funny, until you're the joke )

[18:39] <FROGGS> vendethiel: okay, this is something I can agree with

[18:39] <FROGGS> :o)

[18:39] <vendethiel> Rain. Not love. Keyboard, what are you doing

[18:41] <liztormato> Our cover is getting saturated and is starting to leak :-(

[18:41] <FROGGS> ewww

[18:42] * FROGGS .oO( Make Love, Not Rain )

[18:42] <liztormato> Ah well. We've already given on getting home dry

[18:47] <liztormato> *up

[18:52] *** liztormato left
[18:54] <FROGGS> m: grammar G { token TOP { <?a> }; token a { . } }; class A { method a($/) { say 'ohh?' } }; say G.parse("a", :actions(A))

[18:54] <camelia> rakudo-moar 07f142: OUTPUT«ohh?␤(Any)␤»

[18:54] <FROGGS> jnthn: do we need to call the action method for a look ahead?

[19:04] *** ventica joined
[19:06] *** ventica2 joined
[19:08] <masak> lizmat: hope you get home OK! we're rooting for you back here in .se :)

[19:08] <masak> "all in one piece" and "not struck by lightning" are more important than "completely dry"...

[19:10] *** ventica left
[19:10] *** Sterver is now known as Sterver|AFK

[19:13] *** zakharyas joined
[19:13] *** darutoko- left
[19:15] <jnthn> FROGGS: Well, the action method is called by the rule itself...

[19:15] <jnthn> FROGGS: I'd avoid putting things with side-effects in lookaheads :)

[19:15] <FROGGS> jnthn: I know that I should not do it :o)

[19:16] <FROGGS> jnthn: question was more about saving some method invocation here

[19:16] *** anaeem1_ joined
[19:24] <vendethiel> Idris just got a ruby backend. wow

[19:29] *** beastd joined
[19:31] <dalek> rakudo-star-daily: d3f1bb6 | coke++ | log/ (14 files):

[19:31] <dalek> rakudo-star-daily: today (automated commit)

[19:31] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/d3f1bb6c90

[19:31] <dalek> rakudo-star-daily: a9c0e51 | coke++ | log/ (14 files):

[19:31] <dalek> rakudo-star-daily: today (automated commit)

[19:31] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/a9c0e513cf

[19:31] <dalek> perl6-roast-data: 32a8261 | coke++ | / (5 files):

[19:31] <dalek> perl6-roast-data: today (automated commit)

[19:31] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/32a8261683

[19:31] <dalek> perl6-roast-data: a9ab1d5 | coke++ | / (5 files):

[19:31] <dalek> perl6-roast-data: today (automated commit)

[19:31] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/a9ab1d5c47

[19:34] *** rurban left
[19:43] <[Coke]> .seen moritz

[19:43] <yoleaux> I saw moritz 1 Aug 2014 14:11Z in #perl6: <moritz> you are welcome to make the build system more flexible, but that will also be "marginally" frustrating

[19:45] *** spider-mario left
[19:45] <[Coke]> failures: n: 1386; jvm: 19, moar: 6 , parrot: 1699

[19:45] <[Coke]> Is anyone here interested in keeping niecza green?

[19:48] *** spider-mario joined
[19:50] *** dwarring joined
[19:51] *** iarna joined
[19:56] *** dmol joined
[20:02] *** kurahaupo_ joined
[20:03] *** zakharyas left
[20:10] <vendethiel> looks like Idris is going rakudo's way, and going greatly at it.

[20:10] <vendethiel> C backend, llvm backend, node/js backend, ruby backend ...

[20:14] *** Sqirrel joined
[20:21] *** oetiker joined
[20:27] *** lichtkind joined
[20:28] *** spider-mario left
[20:30] *** spider-mario joined
[20:31] *** spider-mario left
[20:33] *** spider-mario joined
[20:37] <dalek> rakudo/nom: 3a140f0 | (Tobias Leich)++ | src/core/CompUnitRepo/Local/File.pm:

[20:37] <dalek> rakudo/nom: implement CompUnitRepo::Local::File.files()

[20:37] <dalek> rakudo/nom: 

[20:37] <dalek> rakudo/nom: Now we would be in a position to require .pl scripts by path.

[20:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3a140f08e5

[20:37] <dalek> rakudo/nom: 0ce18d6 | (Tobias Leich)++ | src/core/CompUnit.pm:

[20:37] <dalek> rakudo/nom: fix signature of CompUnit.new

[20:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0ce18d6b5b

[20:39] *** spider-mario left
[20:41] *** kivutar left
[20:45] *** anaeem1_ left
[20:50] *** molaf_ left
[20:55] *** xenoterracide left
[20:58] <[Coke]> is Andrew Parker her?

[20:58] <[Coke]> *here

[21:06] *** xenoterracide joined
[21:07] *** dmol left
[21:16] *** rindolf left
[21:20] *** Rotwang left
[21:32] *** rurban joined
[21:36] *** mr-foobar left
[21:41] *** telex left
[21:42] *** telex joined
[21:45] *** gamo joined
[21:47] <gamo> m: $t = time; for (1..100000) -> $i { ; } ; say time-$t;

[21:47] <camelia> rakudo-moar 0ce18d: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/3pj2SNRTHn␤Variable '$t' is not declared␤at /tmp/3pj2SNRTHn:1␤------> [32m$t[33m⏏[31m = time; for (1..100000) -> $i { ; } ; s[0m␤    expecting any of:␤        postfix␤»

[21:47] <[Coke]> gamo: ENOMY

[21:48] <[Coke]> m: my $t = time; for (1..100000) -> $i { ; } ; say time-$t;

[21:48] <camelia> rakudo-moar 0ce18d: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/2ei36twVzx␤Undeclared routine:␤    time used at line 1␤␤»

[21:49] <[Coke]> m: my $t = time; for (1..100000) -> $i { ; } ; say time - $t;

[21:49] <camelia> rakudo-moar 0ce18d: OUTPUT«0␤»

[21:49] <gamo> zero?

[21:50] <hoelzro> ahoy #perl6

[21:50] <jnthn> Probably rounded down?

[21:50] <jnthn> m: for (1..100000) -> $i { ; }; say now - ENTER now

[21:50] <camelia> rakudo-moar 0ce18d: OUTPUT«use of uninitialized value of type Nil in numeric context  in block  at /tmp/zbJxwLJlHG:1␤␤Instant:1407102680.529718␤»

[21:50] <jnthn> ah

[21:51] <jnthn> m: my $t = now; for (1..100000) -> $i { ; }; say now - $t

[21:51] <camelia> rakudo-moar 0ce18d: OUTPUT«0.2909114␤»

[21:51] <jnthn> Yeah

[21:51] <[Coke]> m: say time; say now

[21:51] <camelia> rakudo-moar 0ce18d: OUTPUT«1407102685␤Instant:1407102720.639769␤»

[21:51] <jnthn> time is nearest second I guess

[21:52] <gamo> pretty fast, but I think it's the machine

[21:53] *** gfldex left
[21:53] <jnthn> Dunno how fast the machine it's on is running

[21:55] *** rurban left
[21:59] *** Mr_Cheese joined
[22:00] <gamo> 0.34 in my i7

[22:00] *** lichtkind left
[22:01] <gamo> anyway I think perl6 is slower than perl5

[22:12] <jnthn> Yes, for most things it still is. The difference used to be worse, though, and there's plenty of performance work to come.

[22:13] <gamo> thanks, jnthn 

[22:21] <dalek> roast/S26-WHY: e17049b | (Rob Hoelz)++ | S26-documentation/why-leading.t:

[22:21] <dalek> roast/S26-WHY: Fix multi line test in why-leading

[22:21] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/e17049b80d

[22:21] <dalek> roast/S26-WHY: 5af62dc | (Rob Hoelz)++ | S26-documentation/why-leading.t:

[22:21] <dalek> roast/S26-WHY: Fix broken tests in why-leading

[22:21] <dalek> roast/S26-WHY: review: https://github.com/perl6/roast/commit/5af62dcaa0

[22:25] *** thou joined
[22:26] *** zakharyas joined
[22:27] *** brother left
[22:31] *** integral left
[22:33] *** brother joined
[22:34] *** pmurias left
[22:35] *** xenoterracide left
[22:36] *** beastd left
[22:36] *** xenoterracide joined
[22:38] *** Mr_Cheese left
[22:39] *** smash joined
[22:41] *** virtualsue left
[22:42] *** integral joined
[22:42] *** integral left
[22:42] *** integral joined
[22:42] <PerlJam> [Coke]: ping

[22:42] *** zakharyas left
[22:53] <hoelzro> roles are usually built out of a ParametricRoleHOW, right?

[22:53] <hoelzro> PerlJam: btw, way to go on those test improvements!

[22:53] <hoelzro> I love the idea of the helper function

[22:53] <hoelzro> now we have a lot of broke tests to fix =)

[22:55] <PerlJam> hoelzro: good deal  :)

[23:06] *** nbrown_ joined
[23:08] <[Coke]> PerlJam: PONGPONG

[23:08] *** xenoterracide left
[23:08] <timotimo> o/

[23:11] <dalek> rakudo/nqp-dogfood: 9d5ece5 | duff++ | tools/build/gen-version.nqp:

[23:11] <dalek> rakudo/nqp-dogfood: Create an NQP verison of gen-version.pl (untested)

[23:11] <dalek> rakudo/nqp-dogfood: review: https://github.com/rakudo/rakudo/commit/9d5ece59e1

[23:11] <dalek> rakudo/nqp-dogfood: bcb31fa | duff++ | tools/build/nqp-jvm-rr.nqp:

[23:11] <dalek> rakudo/nqp-dogfood: Create NQP version of nqp-jvm-rr.pl (untested)

[23:11] <dalek> rakudo/nqp-dogfood: review: https://github.com/rakudo/rakudo/commit/bcb31fa2ff

[23:12] <PerlJam> [Coke]: I got to thinking about dogfooding the other perl programs in tools/build, so I started in on a couple of others (as seen in the most recent commits)

[23:13] <PerlJam> [Coke]: I was wondering if you wanted to test them out or give feedback or something

[23:13] <PerlJam> I probably won't have time to play with them much more until late tomorrow

[23:15] <[Coke]> if the build works for you, I'd say push it.

[23:16] <[Coke]> we have the daily runs to catch at least any linux failures.

[23:16] <[Coke]> plus you have a good track record.

[23:16] <[Coke]> Do we have a way to todo rakudo tests based on some condition?

[23:16] <PerlJam> Well, I've not done a build with them yet.  (too busy learning how to do things in NQP :)

[23:17] <PerlJam> maybe I'll do that tomorrow (or late tonight if I have some time)

[23:17] <[Coke]> ah, then sure, leave them in a branch and I'll at least give them a shot on moar.

[23:17] <PerlJam> Coke++ thanks, that would be awesome.

[23:19] <PerlJam> I've got to go get ready for a night out with the family, talk to you guys later

[23:19] * PerlJam &

[23:33] *** vendethiel left
[23:33] *** ventica2 left
[23:34] *** vendethiel joined
[23:34] *** vendethiel left
[23:37] *** virtualsue joined
[23:37] *** vendethiel joined
[23:40] <dalek> roast: 9d14f3c | coke++ | S16-filehandles/filestat.t:

[23:40] <dalek> roast: RT #122467 - conditionally todo on osx

[23:40] <dalek> roast: review: https://github.com/perl6/roast/commit/9d14f3c78f

[23:40] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122467

[23:42] *** virtualsue left
[23:44] *** chenryn joined
[23:45] *** chenryn left
[23:45] <[Coke]> is anyone seeing t/spec/S32-io/IO-Socket-Async.t fail on their box?

[23:45] <[Coke]> (moar/osx here)

[23:54] *** Mouq joined
[23:55] <Mouq> o/

[23:55] <yoleaux> 31 Jul 2014 14:17Z <moritz> Mouq: about broken links on doc.perl6.org, see http://irclog.perlgeek.de/perl6/2014-07-31#i_9113080

[23:59] <dalek> roast: 3d9d73e | coke++ | S32-io/IO-Socket-Async.t:

[23:59] <dalek> roast: moar fudging, some mac specific

[23:59] <dalek> roast: review: https://github.com/perl6/roast/commit/3d9d73ecaa

[23:59] *** BenGoldberg joined
