[00:01] *** kurahaupo left
[00:01] *** kurahaupo joined
[00:03] *** rurban left
[00:05] *** jnap left
[00:09] *** jnap joined
[00:09] *** thou left
[00:17] *** Araq left
[00:32] *** thou joined
[00:32] *** skids left
[00:33] *** rurban joined
[00:34] *** araujo left
[00:35] *** rurban1 joined
[00:37] *** rurban left
[00:39] *** rurban1 left
[00:41] *** amirite joined
[00:43] *** araujo joined
[00:48] <dalek> doc/redesign: 9400c44 | Mouq++ | htmlify.p6:

[00:48] <dalek> doc/redesign: Fix generation of routine-{sub,method}.html

[00:48] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/9400c44b20

[00:48] <dalek> doc/redesign: 2f55811 | Mouq++ | / (2 files):

[00:48] <dalek> doc/redesign: Code clean-up

[00:48] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/2f55811459

[00:53] *** xinming left
[00:59] *** skids joined
[01:03] *** colomon joined
[01:05] *** xinming joined
[01:10] *** Pleiades` left
[01:10] *** FROGGS__ joined
[01:13] *** Sqirrel_ joined
[01:14] *** FROGGS_ left
[01:14] *** Sqirrel left
[01:15] *** Pleiades` joined
[01:16] *** grondilu joined
[01:16] *** grondilu left
[01:16] *** grondilu joined
[01:17] <grondilu> You guys thought you were done with unicode, right?   Well, unicode 7 just came out:  http://unicode-inc.blogspot.fr/2014/06/announcing-unicode-standard-version-70.html

[01:17] <segomos_> i just patched in unicode 7.1

[01:17] <grondilu> oh

[01:18] <segomos_> kidding :)

[01:18] <grondilu> ah

[01:18] <segomos_> i like the billboard character

[01:20] *** Su-Shee_ joined
[01:20] *** sorear joined
[01:23] *** Su-Shee left
[01:23] <grondilu> Today I noticed that panda is installable again.  Yet I failed to install v5.  That's not yet fixed, is it?

[01:27] *** Pleiades` left
[01:28] *** klapperl_ left
[01:30] *** klapperl joined
[01:32] *** Pleiades` joined
[01:45] *** araujo left
[01:49] <grondilu> bah nevermind

[01:49] *** grondilu left
[01:49] *** colomon left
[01:52] *** jjk left
[01:53] *** colomon joined
[01:55] *** btyler joined
[01:56] *** xenoterracide joined
[01:57] *** jjk joined
[02:10] *** thou left
[02:16] *** araujo joined
[02:16] *** araujo left
[02:16] *** araujo joined
[02:16] *** jnap left
[02:19] *** xenoterracide left
[02:30] *** xenoterracide joined
[02:33] *** araujo left
[02:34] <colomon> panda install still broken on moar.  :(

[02:34] <lue> Too bad we're stuck (documentationally at least) with Unicode 6.2 until they decide to actually publish 7, which appears to be set for October :(

[02:39] *** noganex_ joined
[02:40] *** kaare_ joined
[02:42] *** noganex left
[02:43] *** hoverboard joined
[02:47] <btyler> colomon: broken how? just installed both from a local repo and from the ecosystem

[02:48] *** araujo joined
[02:55] <colomon> t/installer.t (Wstat: 0 Tests: 14 Failed: 6)

[02:55] <colomon>   Failed tests:  9-14

[02:55] <colomon>   Parse errors: Bad plan.  You planned 8 tests but ran 14.

[02:55] <colomon> …. actually that seems more promising than it has.

[02:58] <colomon> … and that was because my version of panda was hacked.  sigh.

[02:59] <colomon> I have a working panda on moar-HEAD!

[02:59] <colomon> \o/

[02:59] <colomon> afk # sleep

[02:59] <benabik> colomon: You were hacked?  /o\

[02:59] <benabik> ;-)

[03:02] *** molaf_ left
[03:10] *** colomon left
[03:25] <dalek> doc/redesign: d636000 | Mouq++ | htmlify.p6:

[03:25] <dalek> doc/redesign: Remove "Modules" and "Formalities" for now

[03:25] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/d636000858

[03:25] <dalek> doc/redesign: cb5d7f3 | Mouq++ | htmlify.p6:

[03:25] <dalek> doc/redesign: Abstract and generalize finding definitions in language docs

[03:25] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/cb5d7f3973

[03:30] *** araujo left
[03:34] *** kaare_ left
[03:36] *** araujo joined
[03:40] *** rurban joined
[03:45] *** [Sno] left
[03:57] *** kaare_ joined
[04:08] *** thou joined
[04:10] <dalek> doc/redesign: 1dfd619 | Mouq++ | htmlify.p6:

[04:10] <dalek> doc/redesign: Use find-definitions for Type files

[04:10] <dalek> doc/redesign: 

[04:10] <dalek> doc/redesign: This cuts down on a lot of redundancy and allows for the same procedure

[04:10] <dalek> doc/redesign: to be used in places other than Type files.

[04:10] <Mouq> sorry dalek v_v

[04:11] *** dalek joined
[04:11] *** ChanServ sets mode: +v dalek

[04:12] <Mouq> commit is here, fwiw: https://github.com/perl6/doc/commit/1dfd619f070

[04:19] *** rurban left
[04:20] *** xenoterracide left
[04:23] *** anaeem1_ joined
[04:31] *** SamuraiJack joined
[04:31] *** araujo left
[04:43] <dalek> doc/redesign: 9429392 | Mouq++ | lib/Type/ (108 files):

[04:43] <dalek> doc/redesign: Update Type files as per 1dfd619f070

[04:43] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/9429392746

[04:47] <moritz> [Coke]: I've added a 4GB swap file to host07

[04:50] <[Coke]> moritz: thanks.

[04:50] *** rurban joined
[04:52] *** rurban1 joined
[04:55] *** rurban left
[04:56] *** rurban1 left
[05:05] *** [Sno] joined
[05:08] *** BenGoldberg left
[05:10] *** BenGoldberg joined
[05:12] *** hoverboard left
[05:19] *** BenGoldberg left
[05:30] *** btyler left
[05:43] *** hoverboard joined
[05:52] *** thou left
[05:59] *** rindolf joined
[06:02] *** mr-foobar joined
[06:04] *** dayangkun left
[06:06] *** SamuraiJack left
[06:07] *** dwarring left
[06:12] *** bebus joined
[06:15] *** bebus left
[06:16] *** bebus joined
[06:23] <bebus> Hello all

[06:23] <bebus> I would like to share my achievement with you :)

[06:24] <bebus> During last perl workshop in Poland -> Poznan, on Hackathon, I was working on installing Perl6 on my Ubuntu Touch

[06:24] <bebus> Yup... I failed back then due to lack of build-essentials package

[06:25] <bebus> But finally, now, I've compiled Perl6 on my mobile device directly :D

[06:25] <bebus> and it works :]

[06:27] <bebus> I've tried to compile using moar,parrot and jvm and unfortunatelly, up to now, I've managed to successfully build Perl6 on JVM only :/

[06:29] <bebus> configuring parrot return: value for '@icu_shared@' in config/gen/makefiles/root.in is undef at lib/Parrot/Configure/Compiler.pm line 611, <$in> line 135.

[06:29] *** dayangkun joined
[06:29] <bebus> not checked that yet

[06:30] *** dayangkun_ joined
[06:30] <bebus> configuring moar on the other hand gives: make: *** [gen/moar/stage1/nqpmo.moarvm] Bus error (core dumped)

[06:31] <bebus> so, now some results/feedback

[06:33] *** dayangkun left
[06:34] <Timbus> hah. thats neat

[06:34] <Timbus> what hardware?

[06:34] <bebus> building Perl6 on JVM took ~20h

[06:34] <Timbus> aaa

[06:34] <bebus> NEXUS 4

[06:34] <bebus> ~8h took to configure NQP-j

[06:35] *** FROGGS__ left
[06:36] <xiaomiao> impressive :)

[06:36] <bebus> Stage parse took ~10000

[06:36] *** kaleem joined
[06:37] <bebus> and Stage mast ~20000.... so quite long ;)

[06:37] <bebus> today morning it finished so I wanted to test it ofc :)

[06:38] *** darutoko joined
[06:38] <bebus> running "./perl6 -v" takes 1m2s

[06:38] <bebus> return: This is perl6 version 2014.05-171-ge9e842a built on JVM

[06:39] <bebus> running "./perl6 -e \"say 'Hello Mobile World';\"" takes 4m7s

[06:39] <bebus> so this is not a speed deamon ;p

[06:40] <Timbus> lol

[06:41] <bebus> I think that this should be faster on moarvm if I'll manage to compile it

[06:41] <Timbus> can you cross-compile?

[06:44] <bebus> I didn't try that yet. My idea behind that was: I have a phone with power CPU. I want to connect it to keyboard, mouse, monitor and use is as a true PC.

[06:45] <bebus> I'll try to play with that little more and if I'll fail than I'll cross compile it

[06:47] <bebus> aaa just note... On my Ubuntu Touch phone, there is Perl5 - 5.18.2 -> and it's quite fast

[06:49] <dalek> perl6-bench: f079596 | (Geoffrey Broadwell)++ | nqp/rc-man-or-boy-test:

[06:49] <dalek> perl6-bench: Un-bitrot nqp/rc-man-or-boy-test

[06:49] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/f079596dcc

[06:49] <dalek> perl6-bench: 4dddf4d | (Geoffrey Broadwell)++ | minibenchmarks.pl:

[06:49] <dalek> perl6-bench: rc-man-or-boy-test: Enable nqp-moarvm; raise scale above noise floor

[06:49] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/4dddf4d12b

[06:50] *** FROGGS__ joined
[06:52] <jnthn> segomos_: Well, I don't know exactly what JVM is doing, but I do know writes to async sockets should probably be async 

[06:52] *** igorsutton joined
[07:11] *** dmol joined
[07:13] *** maelus left
[07:16] *** zakharyas joined
[07:21] <masak> 'morning, #perl6

[07:21] <masak> bebus++ # mobile!

[07:21] <masak> is bebus the first one to run Perl 6 on a mobile device? I don't remember.

[07:24] <FROGGS__> hmmm, I'd like to have P6 on my blackberry :/

[07:24] <FROGGS__> (now)

[07:26] *** kurahaupo left
[07:27] <tadzik> bebus: hah, good job! :)

[07:27] <tadzik> would be interesting to investigate the moarvm problem

[07:27] <FROGGS__> is there a walkthrough?

[07:27] <FROGGS__> like this for Perl 5? https://github.com/dex4er/perl5/wiki/android

[07:27] *** virtualsue joined
[07:27] <tadzik> masak: I think supernovus or snarkyboojum ran rakudo on Nokia N900 a couple of years back

[07:28] * jnthn tries to remember what CPU bebus++'s phone had in it

[07:28] <jnthn> I had hoped nwc10++'s porting work woulda covered it :)

[07:29] <tadzik> masak: https://twitter.com/snarkyboojum/status/21738635293

[07:30] <tadzik> that's 4 years ago :o

[07:30] <tadzik> I could try compiling moarvm for my n900 too

[07:31] * FROGGS__ tests r* now

[07:32] <jnthn> FROGGS__++

[07:33] <bebus> tadzik: in fact, moarvm is compiled on my phone... hmmm it fails on building nqp

[07:34] *** maelus joined
[07:35] *** hoverboard left
[07:38] <masak> ok, snarkyboojum++, then. :)

[07:38] <tadzik> ah, hm

[07:46] *** rindolf left
[07:46] <nwc10> bebus: don't bother *building* nqp on your phone

[07:46] <nwc10> build MoarVM for you phone, build Rakudo elsewhere (but with the correct paths) and ship it over

[07:46] <nwc10> MoarVM bytecode files are portable.

[07:46] <nwc10> like JVM

[07:47] <nwc10> the only reason to build NQP and Rakudo on a strange platform is if you want to use the entire build process as an extended regression/stress test

[07:47] <nwc10> (which is a useful thing to do)

[07:48] <nwc10> but if your goal is having Rakudo, rather than "finding and fixing bugs in Rakudo", then take the shortcut

[07:49] *** Ven joined
[07:54] <sergot> morning! o/

[07:57] *** labster left
[07:57] <Ven> o/, *

[08:05] <masak> morning, sergot! \o

[08:10] <masak> here's all the code from yesterday's blog post, if someone wants to play with it: https://gist.github.com/masak/f865b7d9dd33e535b501

[08:10] <masak> (also linked from the post)

[08:11] <sergot> masak++

[08:12] <masak> actually, sergot++ had a part in this, too :)

[08:13] *** denis_boyun joined
[08:16] *** ivanshmakov left
[08:16] *** kaleem left
[08:16] *** [Sno] left
[08:16] *** noganex_ left
[08:16] *** Pleiades` left
[08:16] *** [particle] left
[08:16] *** woolfy left
[08:16] *** maelus left
[08:16] *** darutoko left
[08:16] *** mr-foobar left
[08:16] *** Su-Shee_ left
[08:16] *** Alina-malina left
[08:16] *** pecastro left
[08:16] *** zengargo1le left
[08:16] *** perigrin left
[08:16] *** cibs left
[08:16] *** isacloud__ left
[08:16] *** Bucciarati left
[08:16] *** TimToady left
[08:16] *** lestrrat left
[08:16] *** raydiak left
[08:16] *** sorear left
[08:16] *** mikegrb left
[08:16] *** ivan`` left
[08:16] *** pnu left
[08:18] *** ivanshma` joined
[08:19] *** pdcawley left
[08:20] *** pdcawley joined
[08:20] *** psch joined
[08:20] *** maelus joined
[08:20] *** darutoko joined
[08:20] *** kaleem joined
[08:20] *** mr-foobar joined
[08:20] *** [Sno] joined
[08:20] *** noganex_ joined
[08:20] *** Pleiades` joined
[08:20] *** Su-Shee_ joined
[08:20] *** pecastro joined
[08:20] *** [particle] joined
[08:20] *** zengargo1le joined
[08:20] *** woolfy joined
[08:20] *** perigrin joined
[08:20] *** cosimo joined
[08:20] *** muraiki joined
[08:20] *** ponbiki joined
[08:20] *** camelia joined
[08:20] *** go|dfish joined
[08:20] *** tempire_ joined
[08:20] *** kshannon joined
[08:20] *** firnsy joined
[08:20] *** MilkmanDan joined
[08:20] *** isacloud__ joined
[08:20] *** FOAD joined
[08:20] *** pmichaud joined
[08:20] *** hugme joined
[08:20] *** jercos joined
[08:20] *** Juerd joined
[08:20] *** bowtie joined
[08:20] *** hoelzro joined
[08:20] *** amkrankruleuen joined
[08:20] *** retupmoca joined
[08:20] *** ggherdov joined
[08:20] *** Bucciarati joined
[08:20] *** TimToady joined
[08:20] *** lestrrat joined
[08:20] *** raydiak joined
[08:20] *** wilhelm.freenode.net sets mode: +vv camelia hugme

[08:20] <psch> hi #perl6 

[08:20] <lizmat> hi psch 

[08:21] *** sorear joined
[08:21] *** mikegrb joined
[08:21] *** ivan`` joined
[08:21] *** PZt joined
[08:21] *** japhb_ joined
[08:21] *** ashleydev joined
[08:21] *** pnu joined
[08:21] *** rurban_ joined
[08:21] *** xfix joined
[08:21] *** dylanwh joined
[08:21] *** cooper joined
[08:21] *** profan joined
[08:21] *** clkaoud joined
[08:21] *** mathw joined
[08:21] *** timotimo joined
[08:21] *** atrodo joined
[08:21] *** flussence joined
[08:21] *** yogan_ joined
[08:21] *** tokuhirom joined
[08:21] *** risou joined
[08:21] <ChoHag> Can I define a trait to ack as a sort of filter on an attribute or variable, modifying any attempt to read or write from it?

[08:21] *** Alina-malina joined
[08:21] *** anaeem1_ left
[08:21] *** cibs joined
[08:22] *** ivan`` left
[08:22] <lizmat> ChoHag: you probably mean Proxy

[08:22] <Ven> m: role B { method a { $!a * 5 } }; class A does B { has $.a; }; say A.new(:a(5)).a # <ChoHag 

[08:22] <lizmat> examples e.g. in srr/core/BagHash.pm

[08:22] <ChoHag> ven: Is that all that's needed to augment any attempt to access $!a?

[08:23] <ChoHag> default, direct access, etc.?

[08:23] *** ivan`` joined
[08:23] <Ven> Won't work, actually. B can't find $!a. Duh.

[08:23] <Ven> Uncool.

[08:23] <ChoHag> Proxies look about right.

[08:24] <camelia> rakudo-moar 354c5c: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/s8BhnYfs2v␤Attribute $!a not declared in role B␤at /tmp/s8BhnYfs2v:1␤------> [32mrole B { method a { $!a * 5 } }[33m⏏[31m; class A does B { has $.a; }; say A.new[0m␤    expecting any o…»

[08:24] <Ven> thanks camelia ;_l

[08:25] <psch> i'm still getting the SEGV for .isa(Scalar); https://gist.github.com/peschwa/863b4d839e0024388052

[08:26] *** fhelmberger joined
[08:26] <Ven> psch: works here

[08:27] <Ven> (with a fresh rakudo)

[08:27] *** Pleiades` left
[08:27] *** Pleiades` joined
[08:27] *** cosimo left
[08:29] <psch> the moar version i'm running is the one i should be running though, right? seeing as [Coke] mentioned it was over a month old

[08:31] *** cosimo joined
[08:32] <ChoHag> Hmm. So how can I use a trait to replace an attribute with a proxy?

[08:32] *** anaeem1 joined
[08:32] <ChoHag> core/traits.pm doesn't give me any clues.

[08:33] *** kaleem left
[08:33] *** [Sno] left
[08:33] *** noganex_ left
[08:33] *** [particle] left
[08:33] *** woolfy left
[08:33] *** maelus left
[08:33] *** darutoko left
[08:33] *** mr-foobar left
[08:33] *** Su-Shee_ left
[08:33] *** pecastro left
[08:33] *** zengargo1le left
[08:33] *** perigrin left
[08:33] *** ponbiki left
[08:33] *** camelia left
[08:33] *** kshannon left
[08:33] *** tempire_ left
[08:33] *** MilkmanDan left
[08:33] *** muraiki left
[08:33] *** go|dfish left
[08:33] *** firnsy left
[08:33] *** isacloud__ left
[08:33] *** FOAD left
[08:33] *** pmichaud left
[08:33] *** hugme left
[08:33] *** jercos left
[08:33] *** Juerd left
[08:33] *** bowtie left
[08:33] *** hoelzro left
[08:33] *** amkrankruleuen left
[08:33] *** retupmoca left
[08:33] *** ggherdov left
[08:33] *** Bucciarati left
[08:33] *** TimToady left
[08:33] *** lestrrat left
[08:33] *** raydiak left
[08:34] <lizmat> fitness&

[08:34] <ChoHag> Can I mix a Proxy role in?

[08:36] *** dakkar joined
[08:36] <moritz> I don't think so

[08:36] <ChoHag> Yeah that didn't work.

[08:37] *** anaeem1 left
[08:38] *** anaeem1 joined
[08:39] *** spider-mario joined
[08:41] <masak> Ven: re the private attribute thing above: private attributes can only be accessed in the role/class they were declared. this is a good thing.

[08:41] <masak> Ven: not even subclasses or mixed-in roles are exempted.

[08:42] <masak> Ven: there's a mechanism for sharing information about private attributes. it's (read/write) accessors.

[08:42] <ChoHag> Where can I find documentation on := ?

[08:43] <moritz> S02, I think. And http://doc.perl6.org/language/containers

[08:43] <ChoHag> Thankyou.

[08:44] *** maelus joined
[08:44] *** darutoko joined
[08:44] *** kaleem joined
[08:44] *** mr-foobar joined
[08:44] *** [Sno] joined
[08:44] *** noganex_ joined
[08:44] *** Su-Shee_ joined
[08:44] *** pecastro joined
[08:44] *** [particle] joined
[08:44] *** zengargo1le joined
[08:44] *** woolfy joined
[08:44] *** perigrin joined
[08:44] *** muraiki joined
[08:44] *** FOAD joined
[08:44] *** pmichaud joined
[08:44] *** hugme joined
[08:44] *** jercos joined
[08:44] *** Juerd joined
[08:44] *** bowtie joined
[08:44] *** hoelzro joined
[08:44] *** amkrankruleuen joined
[08:44] *** retupmoca joined
[08:44] *** ggherdov joined
[08:44] *** Bucciarati joined
[08:44] *** TimToady joined
[08:44] *** lestrrat joined
[08:44] *** raydiak joined
[08:44] *** isacloud__ joined
[08:44] *** MilkmanDan joined
[08:44] *** firnsy joined
[08:44] *** kshannon joined
[08:44] *** tempire_ joined
[08:44] *** go|dfish joined
[08:44] *** camelia joined
[08:44] *** ponbiki joined
[08:44] *** wilhelm.freenode.net sets mode: +vv hugme camelia

[08:44] <ChoHag> Boom.

[08:45] <Ven> masak: meh :p

[08:47] <masak> Ven: I think lexical scoping is a really great idea. the scoping of private attributes is much the same, although the memory allocation is per-object.

[08:47] <Ven> masak: that's unrelated, though

[08:48] <masak> how so?

[08:48] <masak> the private attribute is *scoped*, that's why you cannot access it from the outside.

[08:48] <Ven> I mean not lexicall

[08:48] *** anaeem1 left
[08:49] <masak> you're making less and less sense.

[08:50] <moritz> m: class A { has $!priv = 42; method a { class B { method b() { say $!priv } }; B.new.b } }; A.a

[08:50] <camelia> rakudo-moar 354c5c: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Kl0OFxPtw5␤Attribute $!priv not declared in class B␤at /tmp/Kl0OFxPtw5:1␤------> [32m { class B { method b() { say $!priv } }[33m⏏[31m; B.new.b } }; A.a[0m␤    expecting any of:␤    …»

[08:50] <Ven> m: class A { has $!foo; class B { our sub bar($a) { $a!foo = 5; } }; method BUILD { self.bless(foo => 5) }; method m { $!foo; } }; my A $a .= new; B::bar($a); say $a.m;

[08:50] <camelia> rakudo-moar 354c5c: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/YrjK9OKdGk␤No such private method 'foo' for invocant of type 'B'␤at /tmp/YrjK9OKdGk:1␤------> [32ms $!foo; class B { our sub bar($a) { $a![33m⏏[31mfoo = 5; } }; method BUILD { self.bless(…»

[08:50] <Ven> m: class A { has $!foo; class B { our sub bar($a) { $a.foo = 5; } }; method BUILD { self.bless(foo => 5) }; method m { $!foo; } }; my A $a .= new; B::bar($a); say $a.m;

[08:50] *** anaeem1 joined
[08:50] <camelia> rakudo-moar 354c5c: OUTPUT«(timeout)»

[08:50] <Ven> m: class A { has $!foo; class B { our sub bar($a) { $a.foo = 5; } }; method BUILD { self.bless(foo => 5) }; method m { $!foo; } }; my A $a .= new; B::bar($a); say $a.m;

[08:51] <camelia> rakudo-moar 354c5c: OUTPUT«(timeout)»

[08:51] <masak> moritz: yeah, point. that's not very lexical.

[08:51] <Ven> yes, what I mean.

[08:51] <Ven> Except moar doesn't like me much

[08:51] <moritz> masak: it's constrained by both lexicality AND object scope, iirc

[08:51] <sergot> more videos from the plpw14! :) https://www.youtube.com/playlist?list=PLf0lAaAcx8ybKJj_QAnVFvVdu3lHbqGz-

[08:51] <masak> sergot++

[08:52] <moritz> m: class A { has $!p = 42}; use MONKEY_TYPING; augment A { method a () { say $!p } }; A.new.a

[08:52] <camelia> rakudo-moar 354c5c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Type 'A' is not declared␤at /tmp/e1OZVCbSQC:1␤------> [32m$!p = 42}; use MONKEY_TYPING; augment A [33m⏏[31m{ method a () { say $!p } }; A.new.a[0m␤Malformed augment␤at /tmp/e1OZVCbSQC:1␤------> [32m$!p = 42…»

[08:52] <moritz> m: class A { has $!p = 42}; use MONKEY_TYPING; augment class A { method a () { say $!p } }; A.new.a

[08:52] <camelia> rakudo-moar 354c5c: OUTPUT«42␤»

[08:52] <moritz> ok, not restricted lexically

[08:52] <Ven> not lexical

[08:52] *** bebus left
[08:52] <Ven> masak: does that make more sense now :P ?

[08:53] <Ven> masak: I'm really, really tired, so I probably don't make much sense, but that's what I meant

[08:53] <masak> yes, makes more sense.

[08:53] <masak> but the 'lexical' explanation, while not exactly correct, still carries explanatory power.

[08:54] <moritz> I agree; it makes it obvious that subclasses don't get access to the attributes

[08:55] <masak> or roles.

[08:55] <moritz> but the classes get access to the role's attributes, no?

[08:56] <masak> m: role R { has $!x }; class C does R { method foo { say $!x } }; C.new.foo

[08:56] <camelia> rakudo-moar 354c5c: OUTPUT«(Any)␤»

[08:56] <masak> apparently.

[08:56] <masak> but that rhymes well with "roles are literally copied into classes", so I don't mind.

[08:57] <masak> (though I also wouldn't revolt if the above didn't work)

[08:58] <Ven> But I think I'll miss Ruby's power here

[08:58] <masak> please be more specific.

[08:58] <Ven> It's a power VS checking case

[08:59] <Ven> do you want to be able to do lots of stuff, or do you want you stuff to be statically checked

[08:59] <Ven> Basically, it's a "there's a runtime and a compile time" which exists in p6 but doesn't in Ruby

[09:00] *** donaldh joined
[09:00] *** SevenWolf left
[09:02] <masak> so you're saying Ruby is entirely interpreted?

[09:05] <Ven> masak: I am.

[09:05] <ChoHag> What can I do with the container method of Attribute?

[09:06] <Ven> masak: try `class A < [String, Array].sample;end` Dynamic inheritance

[09:06] <ChoHag> In particular, what purpose does its being rw serve?

[09:06] <Ven> m: sub foo is rw { state $a }; foo = 5; say foo; # look ChoHag, it's rw !

[09:06] <camelia> rakudo-moar 354c5c: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/KPziJWFxD1␤Preceding context expects a term, but found infix = instead␤at /tmp/KPziJWFxD1:1␤------> [32msub foo is rw { state $a }; foo =[33m⏏[31m 5; say foo; # look ChoHag, it's rw ![0m␤»

[09:07] <Ven> m: sub foo is rw { state $a }; foo() = 5; say foo; # look ChoHag, it's rw !

[09:07] <camelia> rakudo-moar 354c5c: OUTPUT«5␤»

[09:07] <ChoHag> No, I know that rw means it's settable, but why is Attribute.container settable?

[09:08] <jnthn> It's rw so it can actually return to you the prototype container without it being stipped away

[09:08] <timotimo> sergot: twitter botched your youtube link for the plpw videos :(

[09:09] <ChoHag> Not so that I can fuck about with it then?

[09:11] <ChoHag> Do you know how I can use a trait to replace an attribute with a proxy?

[09:15] <jnthn> I don't know "replace it with a proxy" makes sense

[09:15] <jnthn> An attribute is a storage location

[09:15] <jnthn> It's the accessor that wants to return the proxy.

[09:16] <jnthn> And you can override/control accessor generation.

[09:16] <jnthn> Or just .add_method something there and then

[09:16] <jnthn> Or wrap the generated accessor

[09:17] <jnthn> If you put a Proxy in the storage location then you don't have a place to store the value I guess you're wishing to validate using the Proxy...

[09:20] <sergot> timotimo++: ohh :( thanks

[09:20] <Ven> masak: are you perl6-slow trying to compute what ruby does for that ? :P

[09:20] <timotimo> yeah, why would a legit link ever end in a dash, right?

[09:20] <Ven> timotimo: tweet a mangled link :P

[09:21] <sergot> timotimo: retweeted :)

[09:22] <timotimo> that's not what that word means %)

[09:22] <sergot> ye.. :)

[09:23] <sergot> anyway, you know what I meant

[09:23] <sergot> :)

[09:25] <tadzik> oh, my talk video is 23 minutes long!

[09:26] <tadzik> so I did fill the time slot

[09:26] <ChoHag> jnthn: What'll that do about default values?

[09:26] <ChoHag> Overriding the accessor.

[09:26] <tadzik> or sergot artificially prolonged my video knowing that I probbaly wouldn't watch it but it'd make me feel good that it's so long

[09:26] <timotimo> :3

[09:27] <sergot> :D

[09:27] <jnthn> ChoHag: Default value is a $!foo level thing, not an accessor level thing, iirc

[09:27] <ChoHag> So I'd need to adjust it in BUILD?

[09:28] <jnthn> Well, you can write a submethod BUILD(:$.thing, :$.other) { } to force it to go through the accessor.

[09:35] <FROGGS__> that is supposed to work, correct?

[09:35] <FROGGS__> m: grammar A { token foo is export { a } }; grammar B { token TOP { <foo>+ } }; say B.parse.("aaa")

[09:35] <camelia> rakudo-moar 354c5c: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in method parse at src/gen/m-CORE.setting:13169␤  in block  at /tmp/8z0e23sCpT:1␤␤»

[09:35] <masak> Ven: no, I got it. and Stack Overflow sorta-kinda verifies your stance.

[09:35] <Ven> masak: eh, I do ruby "all day", so I certainly hope my code works

[09:36] <Ven> very very powerful. I once wrote a method to import all methods from submodules with a prefix.

[09:38] <masak> :)

[09:40] <masak> the pull between static and dynamic is something that interests me.

[09:46] *** araujo joined
[09:49] <Ven> masak: P6 ain't no idris yet 

[09:49] <Ven> or agda, for that matters.

[09:52] <dalek> ecosystem: d5f49aa | sergot++ | META.list:

[09:52] <dalek> ecosystem: all HTTP::* modules are now in HTTP::UserAgent

[09:52] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/d5f49aa6f2

[09:52] *** Psyche^ left
[09:52] <masak> Ven: nor is it aiming to be.

[09:52] <masak> Ven: doing something like that sounds more like a slang or a module.

[09:52] <Ven> masak: that's just plain not gonna work

[09:52] <masak> maybe not.

[09:53] <masak> but people have surprised me before in that regard.

[09:53] *** Psyche^ joined
[09:55] *** ivanshma` is now known as ivanshmakov

[09:57] <Ven> masak: well, you need  the support from the VM for some things

[09:57] <sergot> I remind you about upcoming release, update the changelog please :)

[09:57] <Ven> you can't get reified generics on the jvm, for example

[09:57] <Ven> (and it's a good thing.)

[09:57] *** amirite left
[10:06] <masak> sergot++ # comfort and pain relief manager

[10:15] <jnthn> I really miss having proper generics on the JVM. A bunch of stuff that should work simply doesn't 'cus they type erase.

[10:15] <jnthn> One of the things that makes Java just feel plain clunky compared to C#.

[10:15] <masak> aye.

[10:15] <sergot> it seems that only 8 people contributed to this release.

[10:16] <jnthn> so slacking

[10:16] <jnthn> :P

[10:16] * masak notices that he's not one of them

[10:17] <masak> maybe I'll have time to contribute something before Thursday...

[10:17] <nwc10> I hope I'm not one

[10:19] <sergot> nwc10: why so? :)

[10:19] *** Su-Shee_ is now known as Su-Shee

[10:20] <nwc10> because if I am, that means there were only 7 other people active

[10:20] <nwc10> or, I would guess, 5 + liz + jnthn

[10:20] <nwc10> but if I am, then it's 6

[10:20] <nwc10> er, am not

[10:21] <sergot> and only 5 new things in the changelog

[10:22] <nwc10> Su-Shee: I hope I remember correctly that you were one of the people talking about a Perl 6 hackathon in Germany.

[10:22] <Su-Shee> nwc10: yes, I were, but in general. 

[10:23] <nwc10> in that, there's going to be a hackathon, *almost* in Germany: http://act.useperl.at/apw2014/news

[10:23] <Su-Shee> nwc10: make it probably europe...

[10:23] <Su-Shee> haha :)

[10:23] <nwc10> hopefully 4km on the other side of the border isn't a problem.

[10:23] <Su-Shee> "almost!" good enough! well they kind of speak german as well! ;)

[10:23] <Su-Shee> nwc10: no, I love the accent anyways. ;)

[10:23] *** Sqirrel_ left
[10:23] <nwc10> As far as I can tell, they speak it better than the Venese

[10:24] <Su-Shee> nwc10: I'm from Hannover, every other german is "an accent" for me. ;) 

[10:24] <nwc10> Strong Vienna dialect seems to be about as German as a Glaswegian dialect is English.

[10:25] <nwc10> also, Salzburg has trolleybuses. If that matters.

[10:26] <Su-Shee> nwc10: I'm working up to a Mozart pun. 

[10:26] * masak .oO( am I? Deus! )

[10:26] <Su-Shee> masak: yeah ok.. good enough.. ;)

[10:26] <nwc10> oh balls, are we into puns again?

[10:27] <nwc10> (that's a meta-Mozart pun, and probably not obvious)

[10:36] <lizmat> unless you're into chocolate

[10:51] *** colomon joined
[10:54] *** grondilu joined
[10:55] <grondilu> r: say ([1], -> @p { [0, @p Z+ @p, 0] } ... *)[2]

[10:55] <camelia> rakudo-{parrot,jvm,moar} 354c5c: OUTPUT«1 2 1␤»

[10:55] <grondilu> r: say ([1], -{ [0, @_ Z+ @_, 0] } ... *)[2]

[10:55] <camelia> rakudo-jvm 354c5c: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \v: *%_)␤  in any  at gen/jvm/BOOTSTRAP.nqp:1199␤  in sub prefix:<-> at gen/jvm/CORE.setting:4052␤  in block  at /tmp/tmpfile:1␤␤»

[10:55] <camelia> ..rakudo-parrot 354c5c: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \v: *%_)␤  in any  at gen/parrot/BOOTSTRAP.nqp:1206␤  in method Numeric at gen/parrot/CORE.setting:1007␤  in sub prefix:<-> at gen/parrot/CORE.setting:4056␤  in sub prefix:<-> at gen…»

[10:55] <camelia> ..rakudo-moar 354c5c: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \v: *%_)␤  in sub prefix:<-> at src/gen/m-CORE.setting:4052␤  in block  at /tmp/tmpfile:1␤␤»

[10:55] <grondilu> r: say ([1], { [0, @_ Z+ @_, 0] } ... *)[2]

[10:55] <camelia> rakudo-{parrot,jvm,moar} 354c5c: OUTPUT«1 3 2␤»

[10:55] <grondilu> r: say ([1], -> @p { [0, @p Z+ @p, 0] } ... *)[2]

[10:55] <camelia> rakudo-{parrot,jvm,moar} 354c5c: OUTPUT«1 2 1␤»

[10:56] <grondilu> weird, isn't it?

[10:56] <grondilu> r: say ([1], { [0, @^p Z+ @^p, 0] } ... *)[2]

[10:56] <camelia> rakudo-{parrot,jvm,moar} 354c5c: OUTPUT«1 2 1␤»

[10:56] <grondilu> r: say ([1], { [0, @^p Z+ @p, 0] } ... *)[2]

[10:56] <camelia> rakudo-{parrot,jvm,moar} 354c5c: OUTPUT«1 2 1␤»

[10:56] <grondilu> r: say ([1], { [0, @_ Z+ @_, 0] } ... *)[2]

[10:57] <camelia> rakudo-{parrot,jvm,moar} 354c5c: OUTPUT«1 3 2␤»

[10:57] <grondilu> r: say ([1], { [0, @$_ Z+ @$_, 0] } ... *)[2]

[10:57] <camelia> rakudo-{parrot,jvm,moar} 354c5c: OUTPUT«1 2 1␤»

[10:57] <grondilu> oh I see

[11:16] *** kivutar joined
[11:19] <FROGGS__> jnthn: I updated modules-test-m: https://gist.github.com/FROGGS/0ea5537eb675588baaa2

[11:19] <FROGGS__> especially "No object at index 167" is disturbing

[11:20] * Ven likes type erasure

[11:20] <Ven> it's one of the few things the JVM got right ...

[11:20] <Rounin> Hm... I've heard lots of complaints about how JVM does exactly that

[11:20] <Rounin> I suppose C# does it in an even fancier way

[11:20] <Rounin> Generics I mean

[11:21] <Rounin> Can't say I know or care very much how, but still

[11:24] <Ven> FWIW, Haskell has even more type erasure than the JVM and it's never been a problem

[11:24] <Rounin> Ah

[11:24] <Rounin> It is a rather elegant solution, too... In how relatively simple it is

[11:24] <Rounin> And it achieves a lot

[11:25] <Rounin> Wikipedia describes the complaint... It notes that the parameterized types are no longer known at runtime, so one can't use reflection on them

[11:25] <Rounin> Oh well

[11:26] <Ven> Don't break parametricity and all will be well :)

[11:27] *** benabik left
[11:28] *** Tene left
[11:28] *** dmol left
[11:31] <ChoHag> Do I have to use 'is' to define traits?

[11:33] *** skids left
[11:34] <Ven> ChoHag: trait_mod:<is> I think

[11:37] *** FROGGS__ left
[11:46] *** FROGGS joined
[11:50] <jnthn> FROGGS: ah crap...that'll be some kind of pre-comp failure...

[11:50] *** jlaire joined
[11:50] <jnthn> FROGGS: Any chance of bisecting it?

[11:50] <jnthn> I don't *think* anything changed in Moar in regards to serialization.

[11:51] <jnthn> I'm suspecting the S11 changes.

[11:53] <jnthn> Ven: You can't implement the same generic interface multiple times in Java, parameterized differently. You can't parameterize on native types. You can't overlaod methods based on generic parameters. I do all 3 of these frequently in C# (well, not the last one so much as the first two...)

[11:53] <Ven> jnthn: I think overloading methods based on generic parameters is a misfeature and shouldn't be allowed

[11:54] <Ven> Some languages thought it was a good idea to include such overloads, then bit the dust

[11:54] <Ven> (I'm thinking of std::vector<bool>, for example)

[11:54] <moritz> Ven: then you haven't ever written a high performance matrix multiplication library :-)

[11:54] <moritz> Ven: or used on, for that matter :-)

[11:55] <Ven> moritz: by some regards, I probably have never used a "high performance" anything, compared to what people did before I even was born

[11:55] <jnthn> Ven: It's not even a feature, it's a natural consequence of implementing generics properly.

[11:56] <Ven> jnthn: by your definition or "generics", maybe. I stand by parametricity.

[11:57] <Ven> if I have a function [T] -> Int, I want to know that for any list of the same size, I'm gonna get the same result.

[11:57] <jnthn> Last I heard, they're pondering doing things the .Net way in the JVM in the future... Not sure if it'll actually come to pas.

[11:57] <jnthn> *pass

[11:57] <nwc10> will it permit Larry (that one) to buy more yachts?

[11:58] <masak> ooh, parametricity is related to natural transformations! why didn't you just *say* so? :P

[11:58] *** Tene joined
[11:58] *** Tene left
[11:58] *** Tene joined
[12:00] <jnthn> nwc10: Sure; they can sell more training/expensive certifications in the new stuff :P

[12:00] <nwc10> win!

[12:01] *** sqirrel joined
[12:01] <Ven> masak: http://dl.dropboxusercontent.com/u/7810909/media/doc/parametricity.pdf

[12:01] <nwc10> but will it cost more in engineering than it will earn in training revenue? Surely the plan is to optimise the language to maximise the ratio of traning revenue to engineering cost, without making it so hard that long term its popularity drops, jepardising mindshare and hence total revenue

[12:02] <nwc10> (that is not meant as buzzword bingo. That's meant as total cynicism about a certain firm's motivations)

[12:03] <FROGGS> jnthn: this must be something that happened within a timeframe of a week, so its is either about spesh or inline

[12:03] <FROGGS> jnthn: bisecting it in a bit

[12:03] <jnthn> FROGGS: I'm skeptical.

[12:03] <Timbus> ChoHag, no traits don't need is

[12:05] <Timbus> m: multi trait_mod:<be>(Attribute $a, :$aching!) { ... };  class Yarr { has $.bones be aching; }; say 'alive'

[12:05] <camelia> rakudo-moar 354c5c: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/AthFcFezDf␤Two terms in a row␤at /tmp/AthFcFezDf:1␤------> [32mng!) { ... };  class Yarr { has $.bones [33m⏏[31mbe aching; }; say 'alive'[0m␤    expecting any of:␤        scoped decl…»

[12:05] <Timbus> :o

[12:06] *** SamuraiJack joined
[12:06] <jnthn> There are others (will, does, etc.) but you can't just go making up whatever you want :P

[12:06] <jnthn> At least, not *yet*

[12:07] *** djanatyn joined
[12:07] <jnthn> nwc10: Much like at Microsoft, Oracle is big enough to have lots of people with lots of motivations.

[12:08] <jnthn> So plenty can happen even if it's not That Larry's motivation :)

[12:10] *** rurban joined
[12:10] <FROGGS> please +1 https://github.com/FortAwesome/Font-Awesome/issues/3015

[12:11] <masak> Ven: interesting. I skimmed it.

[12:12] <masak> Ven: realized I need to read that Wadler paper (which I've heard a lot about), and also the Danielson et al. I now have them queued up.

[12:12] <Ven> masak: I have so many papers queued up :(.

[12:13] <Ven> masak: https://kippt.com/Vendethiel/prog is my part one

[12:15] *** smls joined
[12:15] *** jnap joined
[12:15] *** pecastro left
[12:18] <masak> life ain't easy for us packrats.

[12:19] <lizmat> r: { my $a="foo"; $a = ::($a); CATCH { say "CAUGHT $_"; default {} } }  # no CATCH???

[12:19] <camelia> rakudo-{parrot,jvm,moar} 354c5c: ( no output )

[12:19] <lizmat> r: { my $a="foo"; ::($a); CATCH { say "CAUGHT $_"; default {} } }  # no CATCH???

[12:19] <camelia> rakudo-{parrot,jvm,moar} 354c5c: OUTPUT«CAUGHT No such symbol 'foo'␤»

[12:19] <lizmat> ah that does catch

[12:20] <lizmat> r: { my $a="foo"; $a = ::($a); CATCH { say "CAUGHT $_"; default {} }; say $a }  # also CAUGHT

[12:20] <camelia> rakudo-{parrot,jvm,moar} 354c5c: OUTPUT«CAUGHT No such symbol 'foo'␤»

[12:20] <lizmat> masak: do you agree something weird is going on here ?

[12:20] <Ven> masak: Uh, that's because I have so much to read that I think life is easy

[12:22] <masak> lizmat: not offhand, no.

[12:22] <Ven> lizmat: what seems to be wrong ?

[12:22] <masak> lizmat: there's no symbol foo. and exception is thrown. it's caught.

[12:22] <lizmat> but that's just it

[12:22] *** dmol joined
[12:23] <lizmat> in the first case, there is *NO* exception

[12:23] <masak> ...hm.

[12:23] <masak> Failure?

[12:23] *** xusia joined
[12:23] <masak> as in, it's not triggered until it's read?

[12:23] <lizmat> ah....

[12:23] <lizmat> hmmm....

[12:23] <masak> sink context makes it trigger immediately?

[12:23] <lizmat> yup

[12:23] <lizmat> that would be it...  masak++

[12:24] <Ven> m: { my $a="foo"; $a = ::($a); CATCH { say "CAUGHT $_"; default {} }; say $a; }  # no CATCH???

[12:24] <camelia> rakudo-moar 354c5c: OUTPUT«CAUGHT No such symbol 'foo'␤»

[12:24] <Ven> I still think it's confusing to have this behavior without :=

[12:27] <FROGGS> hmm, I do not see a connection between binding and exception throwing

[12:28] <FROGGS> if I assing a Failure to a variable, and check that later (for truthness or for its type), then that is totally legal me thinks

[12:30] <lizmat> hmmm.... I seems to be going around in circles

[12:30] <lizmat> I have a string, e.g. "Int"

[12:30] <lizmat> and I want to change that into a type object

[12:30] <lizmat> ::($string) is the way to do that

[12:30] <tadzik> .WHAT

[12:30] <tadzik> oh

[12:30] <tadzik> nvm

[12:31] <FROGGS> .BUTT

[12:31] <lizmat> .BUTT ?

[12:31] <FROGGS> :P

[12:31] <lizmat> did I miss something

[12:31] <FROGGS> hold on

[12:31] <lizmat> but even if that works, it is not defined, as it is a type object

[12:31] <FROGGS> lizmat: https://www.youtube.com/watch?v=fbGkxcY7YFU

[12:33] * lizmat doesn't do Flash, but I get the picture  :-)

[12:33] <FROGGS> lizmat: what are you trying to achieve?

[12:33] <lizmat> changing a given string into a type object, if possible

[12:33] <lizmat> and trying to figure out how to handle it if it *didn't* work out

[12:33] *** smls left
[12:34] <lizmat> m: my $a = "Int"; say ::($a)

[12:34] <camelia> rakudo-moar 354c5c: OUTPUT«(Int)␤»

[12:34] <lizmat> m: my $a = "Intf"; say ::($a)

[12:34] <camelia> rakudo-moar 354c5c: OUTPUT«===SORRY!===␤No such symbol 'Intf'␤»

[12:34] <lizmat> m: my $a = "Intf"; say ::($a); 1

[12:34] <camelia> rakudo-moar 354c5c: OUTPUT«===SORRY!===␤No such symbol 'Intf'␤»

[12:34] *** huf joined
[12:34] <lizmat> m: my $a = "Intf"; my $b = ::($a)

[12:34] <camelia> rakudo-moar 354c5c: OUTPUT«Unhandled exception: No such symbol 'Intf'␤   at src/gen/m-CORE.setting:11391  (/home/p6eval/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:throw:117)␤ from src/gen/m-CORE.setting:12845  (/home/p6eval/rakudo-inst-1/languages/perl6/runtime/CO…»

[12:35] <lizmat> m: my $a = "Intf"; my $b = ::($a); 1

[12:35] <camelia> rakudo-moar 354c5c: ( no output )

[12:35] <lizmat> I guess checking for Failure would be the way, I guess

[12:36] <FROGGS> ahh, yeah

[12:36] *** dmol left
[12:36] <FROGGS> in somebody's code I've see: if ::('IO::Socket::INET') ~~ Failure { ...

[12:37] *** dmol joined
[12:37] * masak is very curious what came next

[12:38] <FROGGS> I forgot

[12:38] <masak> "...hokay, so we don't have that type. then we, um. uh."

[12:38] *** telex left
[12:38] <FROGGS> but it was about using a newly introduced thingy without breaking back compat

[12:38] <masak> ah.

[12:39] *** telex joined
[12:40] <FROGGS> it's not in star

[12:40] *** telex left
[12:40] <FROGGS> panda has this though:

[12:40] <FROGGS> star/modules/panda/lib/Panda/Builder.pm:61:            if ::('Build').isa(Panda::Builder) {

[12:42] *** telex joined
[12:43] <masak> interesting.

[12:43] *** virtualsue left
[12:43] <masak> "build if Build.pm is there and produces a Panda::Builder"

[12:43] <masak> but "do nothing if it's not or doesn't" surprised me a bit :)

[12:44] <FROGGS> it calls Build.pm's build method when the condition holds, otherwise it does what it usually does :o)

[12:44] <masak> no, there's no "otherwise". otherwise it does nothing.

[12:44] <masak> regardless, it does what it usually does.

[12:45] <masak> nice use of 'indir' and 'withp6lib' blocks, by the way.

[12:45] <FROGGS> s/otherwise/and then/

[12:45] <masak> that looks like very mature Perl 6 code.

[12:45] <masak> well, except for the '1;' statements at the end, which remind me of Perl 5 modules :P

[12:47] *** xenoterracide joined
[12:52] *** xusia left
[12:55] *** anaeem1 left
[12:56] <FROGGS> masak: this was about the 'for loop as the last statement' weirdness

[12:56] *** skids joined
[13:02] *** kivutar left
[13:03] *** rurban left
[13:03] <masak> FROGGS: that explains the first '1;' but not the second.

[13:05] <FROGGS> masak: I think tadzik++ was just scared :o)

[13:06] *** [particle] left
[13:06] <sergot> what does ::() do?

[13:06] <tadzik> skerrd

[13:06] *** carlin joined
[13:07] <tadzik> the 1; come from the fact that the last statement used to be sinked

[13:07] <tadzik> or something

[13:07] <tadzik> all in all, didn't work, so instead of trying to understand it I thought I'll wait until the spec changes and put 1;'s in there meanwhile

[13:07] <tadzik> no rugrats

[13:08] <lizmat> sergot: runtime lookup, syntactic sugar for all sorts of mop stuff :-)

[13:08] <donaldh> [Coke]: I reproduced your perl6-roast-data error on an Ubuntu VM with 4GB RAM and no swap.

[13:09] *** simcop2387 left
[13:09] <sergot> lizmat++ thanks :)

[13:10] <lizmat> masak / jnthn probably have a better description of what ::() does

[13:10] *** kaare_ left
[13:12] <FROGGS> it is a runtime symbol lookup, aye

[13:12] <FROGGS> so you have a way to load a class at runtime for example

[13:12] <FROGGS> (or check for its existence)

[13:12] *** simcop2387 joined
[13:13] <FROGGS> m: say ::('Match').new

[13:13] <camelia> rakudo-moar 354c5c: OUTPUT«｢｣␤␤»

[13:13] <FROGGS> m: say ::('Mätch').new

[13:13] <camelia> rakudo-moar 354c5c: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in method new at src/gen/m-CORE.setting:12814␤  in block  at /tmp/1G9j4TEcdj:1␤␤»

[13:13] <FROGGS> m: say ::('Mätch').WHAT

[13:13] <camelia> rakudo-moar 354c5c: OUTPUT«(Failure)␤»

[13:14] <sergot> FROGGS++ thanks :)

[13:14] <lizmat> yup, that's the tricky thing I ran into

[13:14] *** pecastro joined
[13:15] <masak> lizmat: "runtime lookup" sums it up, methinks.

[13:16] <Ven> But it poisons the scope, doesn't it ?

[13:16] <Ven> or is just setting to a dynamic lookup that does ?

[13:16] <Rounin> Poison running through my $var

[13:16] <FROGGS> it is an indirect lookup

[13:17] <FROGGS> I dont understand what "poisons the scope" means btw

[13:17] <lizmat> perhaps with regard to optimizations ?

[13:17] *** rurban joined
[13:17] *** colomon left
[13:18] *** molaf joined
[13:19] <Ven> FROGGS: I mean this https://github.com/rakudo/rakudo/blob/04fe6d75cafc738d1a98ba2b306b53fb85d4f8c7/src/Perl6/Optimizer.nqp#L418

[13:20] <FROGGS> Ven: no idea if it results in that being set

[13:21] <masak> that's exactly the kind of static/dynamic tension that I find myself interested in.

[13:30] <Ven> as a macro guy, I can guess :P

[13:33] *** colomon joined
[13:34] <dalek> rakudo/nom: 5007abc | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo/Locally.pm:

[13:34] <dalek> rakudo/nom: Make sure we can do .Str/gist/perl on type objects

[13:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5007abc5d8

[13:34] <dalek> rakudo/nom: 0c069f5 | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo.pm:

[13:34] <dalek> rakudo/nom: Initial implementation of CompUnitRepo.parse-spec

[13:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0c069f50da

[13:36] <[Coke]> moritz, donaldh: that did it.

[13:36] *** kivutar joined
[13:36] <donaldh> Some swap ?

[13:39] *** Woodi left
[13:39] *** Woodi joined
[13:39] *** xenoterracide left
[13:40] <[Coke]> aye. with 4G "real" 4G swap, it completed normally.

[13:40] <[Coke]> so, running the spec test suite takes more than 4G.

[13:40] <[Coke]> That sounds like something is leaking.

[13:41] <[Coke]> donaldh++ moritz++

[13:42] *** bluescreen10 joined
[13:42] <dalek> rakudo-star-daily: a67ef73 | coke++ | log/ (14 files):

[13:42] <dalek> rakudo-star-daily: today (automated commit)

[13:42] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/a67ef73be8

[13:42] <donaldh> Well the jvm is taking 3GB. Then there is the test harness, the eval-client, the OS, etc.

[13:43] <[Coke]> yes, but when I tried to limit the harness to, say, 2GB, I had the same failure.

[13:43] <donaldh> Yeah, I was surprised at that. Do large tmp files also eat available RAM ?

[13:43] <[Coke]> and the client should hardly be using anything, neh?

[13:44] <jnthn> Using ::(...) will poision some optimizations, yes

[13:44] <jnthn> Use of pseudopackages too

[13:45] <jnthn> The presence of those two just means we can't do certain analyses precisely enough.

[13:45] <[Coke]> moar & parrot R*s are clean; still failing some modules on jvm

[13:48] <jnthn> Hmm...what? FROGGS++ reported moar R* failure a moment ago. Wonder what's the difference...

[13:52] <masak> should END phasers run on ^C ?

[13:52] * masak thinks they should

[13:52] <Ven> jnthn: yeah, so, if I want to do that, I try to should put it in a sub somewhere else to avoid poisoning the whole scope ?

[13:52] * Ven does that in JS when he needs eval or something

[13:53] <jnthn> masak: Probably not by default.

[13:53] <jnthn> masak: but if you really want to make sure of it, then signal(SIG_INT).tap({ exit(1) }); or so

[13:53] <lizmat> and that *would* run the END phasers ?

[13:53] <jnthn> exit makes sure to

[13:54] <lizmat> aha....

[13:54] <jnthn> I learned tapping SIGINIT from your lightning talk :P

[13:54] <lizmat> so normally, control-C is caught outside of rakudo, really?

[13:54] <jnthn> Normally we don't ahve a signal handler, it's not caught, and the default behavior is immediate termination, which is likely a good thing.

[13:55] <ChoHag> In S17 the documentation for a Promise refers to the excuse method, but Promise.pm defines cause.

[13:55] <masak> ah. Perl 5 doesn't run END phasers on ^C. good enough for me.

[13:55] <masak> carry on :)

[13:55] <FROGGS> m: 1 1

[13:55] <camelia> rakudo-moar 354c5c: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/IzMnoZx0fY␤Two terms in a row␤at /tmp/IzMnoZx0fY:1␤------> [32m1 [33m⏏[31m1[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        s…»

[13:57] *** SamuraiJack left
[13:59] *** btyler joined
[13:59] <carlin> I like zypper on opensuse handles ^C, on the first ^C it tries to gracefully exit

[14:00] <carlin> after 2 ^C it says "OK OK! Exiting immediately" and terminates

[14:01] *** woolfy left
[14:02] <[Coke]> jnthn: (moar) I am using moar latest, nqp latest, and modules-latest

[14:02] <[Coke]> the thought being that it's an early warning to let you know if things break.

[14:02] *** sqirrel left
[14:02] * [Coke] hurls https://github.com/coke/rakudo-star-daily/tree/master/log

[14:03] <[Coke]> look at the MoarVM* logs.

[14:03] <[Coke]> the version log .... doesn't have the moarvm version. wtf.

[14:04] *** [particle] joined
[14:04] <[Coke]> odd: this is at the end of a moar config: https://github.com/coke/rakudo-star-daily/blob/master/log/MoarVM-configure.log#L594

[14:04] <[Coke]> why is it complaining about parrot??

[14:04] *** thou joined
[14:05] <[Coke]> sorry, actually the config step of rakudo.moar, that appears to be an nqp complaint. still, odd.

[14:05] <FROGGS> seems like it tries to clean parrot...

[14:05] <Timbus> m: (1..*).sort; #ok

[14:05] <camelia> rakudo-moar 354c5c: OUTPUT«Unhandled exception: Cannot .sort an infinite list␤   at src/gen/m-CORE.setting:11391  (/home/p6eval/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:throw:117)␤ from src/gen/m-CORE.setting:12845  (/home/p6eval/rakudo-inst-1/languages/perl6/ru…»

[14:05] <[Coke]> ;(maybe it's because I'm doing some cheating when building the R*'s individually)

[14:05] <Timbus> m: (5, 1..*).sort; #w

[14:05] <camelia> rakudo-moar 354c5c: OUTPUT«===SORRY!===␤Cannot use negative index -9223372036854775808 on List␤»

[14:06] <[Coke]> m: (5,1...*).sort #q

[14:06] <camelia> rakudo-moar 354c5c: OUTPUT«Unhandled exception: Cannot .sort an infinite list␤   at src/gen/m-CORE.setting:11391  (/home/p6eval/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:throw:117)␤ from src/gen/m-CORE.setting:12845  (/home/p6eval/rakudo-inst-1/languages/perl6/ru…»

[14:07] <dalek> rakudo/nom: 0bea66a | (Elizabeth Mattijsen)++ | docs/ChangeLog:

[14:07] <dalek> rakudo/nom: Mention some more changes in ChangeLog

[14:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0bea66a752

[14:07] <TimToady> different precedence between .. and ...

[14:08] <TimToady> and currently a parcel containing an infinite list is not marked as infinite, it seems

[14:08] <lizmat> can a Parcel have an indefinite number of elems?

[14:08] <TimToady> no

[14:10] <TimToady> since it's tied rather closely to the number of syntactic commas, or equivalent number of operators that do comma-like things

[14:10] <lizmat> looks like it though:

[14:10] <lizmat> m: (5, 1..*).WHAT.say; (5, 1..*).elems.say

[14:10] <TimToady> like X or Z

[14:10] <camelia> rakudo-moar 354c5c: OUTPUT«(Parcel)␤Inf␤»

[14:10] <lizmat> but that;s probably because Parcel.elems inherits from Any, which does .list

[14:10] <TimToady> that's just summing the .elems of each element

[14:11] <TimToady> m: (5,1..3).elems.say

[14:11] <camelia> rakudo-moar 354c5c: OUTPUT«4␤»

[14:11] <lizmat> method elems() { self.flat.elems }

[14:11] <lizmat> indeed

[14:11] <FROGGS> jnthn: the r-m* fails are my fault... I exported PERL6LIB in my .bashrc, so wrong candidates were picked up

[14:12] <FROGGS> jnthn: can we fixes these things together? https://github.com/coke/rakudo-star-daily/blob/master/log/jvm-test-modules.log

[14:12] <FROGGS> jnthn: so that we discuss the issues a bit so that I perhaps have enough to fix something

[14:13] <ChoHag> Is there a standard way to say 'if any($a|$b|$c) { return $it } else { ... }'?

[14:13] <[Coke]> .tell kid51 Pending parrot-nyc-users request that I can't do anything with. it's been pinging me for a few days

[14:13] <yoleaux> [Coke]: I'll pass your message to kid51.

[14:13] <FROGGS> jnthn: ohh, my modules/perl6-lwp-simple still fails on r-m*

[14:14] <[Coke]> FROGGS: not in my run I did 4 hours ago...

[14:14] <[Coke]> are you using the latest version, or the R* recommended version?

[14:14] <FROGGS> [Coke]: using HEAD

[14:15] *** atroxaper joined
[14:15] <atroxaper> Hello, #perl6 !

[14:15] <FROGGS> hi atrodo 

[14:15] <FROGGS> err

[14:15] <FROGGS> hi atroxaper 

[14:15] <atroxaper> I just read Carl's last post. Really cool!

[14:15] <atroxaper> FROGGS: Hi! :)

[14:16] <PerlJam> r: my @stuff = <1 2 3>; ?any(@stuff) || do say "hi";

[14:16] <masak> atroxaper: thank you. :)

[14:16] <camelia> rakudo-{parrot,jvm,moar} 354c5c: ( no output )

[14:16] <atroxaper> masak: thank You :)

[14:16] <atroxaper> masak: but i don't know what is 'so' in Perl 6? In which S can i read about that?

[14:17] <PerlJam> ChoHag: anyway ... like that. But I don't know if I'd call it "standard"

[14:17] <masak> atroxaper: 'so' is just like prefix:<?>, but it's a sub.

[14:17] <Ven> atroxaper: it's prefix:<?>

[14:17] <Ven> atroxaper: basically -- forces boolean context

[14:17] <masak> atroxaper: you'll find me using it when I want to "collapse" a junction into a single Bool.

[14:18] <PerlJam> so, I guess I should have used so in my example to ChoHag   :)

[14:18] * [Coke] dislikes calling those "contexts", though it does seem five-ish to do so.

[14:18] <ChoHag> standard was the wrong word.

[14:18] <atroxaper> masak, Ven: ohh. I didn't know that. Thanks ;)

[14:19] <PerlJam> masak++ btw,  I too just read about boxes and pebbles.  Nice post!

[14:21] <colomon> +1 masak++

[14:21] *** kaare_ joined
[14:26] <sergot> Do you know the "Cannot find method 'Stringy'" error?

[14:28] <sergot> I found out that "use" causes it when used package has i.e. variable-not-declared error.

[14:29] <TimToady> m: class Good { submethod BUILD (:$.allowed?) { } }; class Bad { submethod BUILD (:$prohibited!) { $.prohibited = $prohibited } }

[14:29] <camelia> rakudo-moar 354c5c: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/jYLsmt9_C5␤Virtual call $.prohibited may not be used on partially constructed objects␤at /tmp/jYLsmt9_C5:1␤------> [32mhod BUILD (:$prohibited!) { $.prohibited[33m⏏[31m = $prohibited } }…»

[14:30] <TimToady> jnthn: ^^^ this is kinda odd, thinking about http://irclog.perlgeek.de/perl6/2014-06-17#i_8883668

[14:31] <TimToady> though we do allow self.foo as a workaround in the body, which is not available in the siggy

[14:32] <dalek> nqp: a5894d2 | donaldh++ | tools/jvm/eval-client.pl:

[14:32] <dalek> nqp: Make eval client die on connect failure.

[14:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a5894d2b2b

[14:32] <TimToady> I'm kinda wondering whether people will get into trouble by allowing the . form in the signature

[14:33] *** MilkmanDan left
[14:33] *** MilkmanDan joined
[14:34] *** treehug88 joined
[14:36] *** atroxaper left
[14:36] *** [Sno] left
[14:36] *** atroxaper joined
[14:41] *** atroxaper left
[14:43] *** FROGGS left
[14:51] *** kurahaupo joined
[14:56] *** woolfy joined
[14:57] *** kivutar left
[15:01] <lizmat> commute towards the NRPM meeting&

[15:01] *** lizmat left
[15:01] *** donaldh_ joined
[15:01] *** igorsutton left
[15:02] <masak> PerlJam, colomon: thanks :)

[15:03] <masak> it was a bit of a perfect storm of fun puzzle, inspiration, and a Perl 6 day.

[15:03] <masak> but if I can spend the rest of my life writing such posts about such puzzles, I'll be a very happy masak.

[15:05] * PerlJam wishes masak the blessing of the perfect storm of fun puzzles, inspiration and Perl 6 every day then

[15:06] <masak> \o/

[15:06] *** denis_boyun left
[15:07] *** atroxaper joined
[15:08] <Ven> .oO( I have one happy masak at one, I'll lend it to you someday )

[15:08] <Ven> at home*

[15:09] <Ven> .oO( I'm not lendind it to my keyboard, either way. )

[15:09] <masak> clearly not.

[15:11] *** atroxaper left
[15:16] *** donaldh_ left
[15:20] *** donaldh_ joined
[15:25] *** smls joined
[15:26] <rurban_> parrot-6.5.0 released. nqp should be bumped. fixes for nqp: icu detection, icu workaround for control char namealiases, better GC writer barriers (more in branch pmc2c_orig)

[15:29] <masak> rurban_++

[15:31] *** smls left
[15:31] *** zakharyas left
[15:34] *** smls joined
[15:35] *** brrt joined
[15:35] *** brrt left
[15:37] *** jnap left
[15:37] *** donaldh_ left
[15:44] *** jnap joined
[15:46] *** kaleem left
[15:50] *** kivutar joined
[15:52] *** fhelmberger left
[15:52] *** xinming_ joined
[15:55] *** xinming left
[15:58] *** robinsmidsrod left
[15:59] *** kivutar left
[15:59] *** treehug8_ joined
[16:00] *** robinsmidsrod joined
[16:02] <japhb> Anyone who worked on RC entries or knows them well: I'm looking for more good RC-based tests for perl6-bench.  They should be computationally non-trivial, and preferably scalable in some way (image/board size or frame/turn count for graphics or game simulators, packet size/count for network I/O, and so on).  With hundreds of Perl 6 entries, it's hard to wade through and find the gems ....

[16:02] *** treehug88 left
[16:02] *** xinming_ left
[16:03] *** xinming joined
[16:04] *** donaldh left
[16:09] *** atroxaper joined
[16:14] *** Rotwang joined
[16:14] *** atroxaper left
[16:18] *** FROGGS joined
[16:20] *** atroxaper joined
[16:22] *** dmol left
[16:25] *** molaf_ joined
[16:27] *** molaf left
[16:28] <FROGGS> rurban++ # I'll test rakudo and rakudo-star in a bit with parrot 6.5.0

[16:30] <masak> japhb: maybe http://rosettacode.org/wiki/Maze_generation#Perl_6 http://rosettacode.org/wiki/Maze_solving#Perl_6 http://rosettacode.org/wiki/Ramsey%27s_theorem#Perl_6 http://rosettacode.org/wiki/Self-describing_numbers#Perl_6 http://rosettacode.org/wiki/Dragon_curve#Perl_6 ?

[16:32] *** pdcawley left
[16:32] *** pdcawley joined
[16:38] <japhb> masak, thank you!

[16:38] <masak> (I'm not that often on RC, but that's what stood out from just glancing at the tasks)

[16:38] <timotimo> japhb++ # perl6-bench hacking

[16:39] <japhb> :-)

[16:39] <psch> i might be doing something wrong again, but jakudo doesn't build on 32bit for me. i was trying to reproduce https://gist.github.com/peschwa/5ede3a120d2d4a81141b there

[16:39] <psch> on jakudo that is

[16:40] <timotimo> masak: is there a pun behind the "Meow Room"s in your cat hotel?

[16:43] <dalek> doc/redesign: d77582f | Mouq++ | htmlify.p6:

[16:43] <dalek> doc/redesign: Some fixes after 1dfd619f070

[16:43] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/d77582fb68

[16:47] <jnthn> TimToady: d'oh, yeah, I forgot about the virtual call thing.

[16:48] <jnthn> FROGGS: What is current modules status? Still some r-m failure?

[16:48] <jnthn> FROGGS: Or did you figure out what's the difference between what you have and the [Coke]++ run?

[16:50] *** atroxaper left
[16:50] *** xenoterracide joined
[16:51] *** xenoterracide left
[16:53] *** xenoterracide joined
[16:54] <xenoterracide> http://perlcabal.org/syn/S12.html#Custom_Meta-objects are there working examples of COMPOSE somewhere?

[16:55] <jnthn> xenoterracide: No, 'cus it's NYI

[16:56] <jnthn> I wrote that chunk of the spec a little while ago, but didn't get around to turning it into reality yet

[16:56] <xenoterracide> :/

[16:57] *** Ven left
[16:57] <xenoterracide> jnthn: so am I right in my assumption that applying a role to the metaclass at this point is impossible without directly patching (which seems to be less than straightforward)

[16:59] *** fhelmberger joined
[16:59] <FROGGS> jnthn: still one fail

[16:59] *** btyler left
[16:59] *** erdic left
[16:59] <FROGGS> jnthn: same as last month me thinks: https://gist.github.com/FROGGS/0ea5537eb675588baaa2#file-modules-test-m-sh

[17:00] *** erdic joined
[17:00] <jnthn> xenoterracide: Seems so

[17:00] <jnthn> I can't imagine it's far off working, though

[17:01] <masak> timotimo: not as far as I can remember.

[17:01] <jnthn> FROGGS: OK, but how come you get the error but [Coke]'s run doesn't? Is it the same module version?

[17:01] <masak> timotimo: I mean, not beyond the fact that cats say "Meow".

[17:02] *** fhelmberger left
[17:02] <xenoterracide> jnthn: ok thanks

[17:02] <Mouq> FROGGS: Does versioning on modules work yet? I just made a change to Pod::To::HTML and doc/redesign needs the latest -- can I put a version string on both and now have to worry about others using an old Pod::To::HTML?

[17:02] <segomos_> jnthn: re: moar vs jvm async sockets, was the thought that the jvm is using blocking sockets and that is why the http::server::async is working and that moar is using the io::socket::async ?

[17:03] <Mouq> s/now/not

[17:03] *** dakkar left
[17:03] *** fhelmberger joined
[17:04] *** fhelmberger left
[17:05] <FROGGS> jnthn: it is possible that I updated the module and [Coke] did not

[17:05] <FROGGS> Mouq: versions are not being used yet

[17:05] <FROGGS> they are noops

[17:06] <Mouq> FROGGS: Ok, thank you :)

[17:06] *** xenoterracide left
[17:08] *** lizmat joined
[17:09] <dalek> doc/redesign: 24be2c4 | Mouq++ | / (3 files):

[17:09] <dalek> doc/redesign: Do index.html as lib/HomePage.pod with =Html blocks

[17:09] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/24be2c4a3f

[17:09] *** pecastro left
[17:10] <lizmat> Mouq: versioning on modules doesn't work yet

[17:10] <jnthn> segomos_: My guess was that writing to an async socket may block on JVM, or something happens to make .close be executed later

[17:11] <lizmat> Mouq: that's what I'm working on atm

[17:11] <jnthn> segomos_: But just looking at the code in the module, it looks wrong to me. .write and .send on an async socket return a Promise.

[17:11] <lizmat> but won't have it ready for this month's release  :-(

[17:12] <jnthn> segomos_: And I didn't see that being used.

[17:12] <jnthn> segomos_: So I think the socket really does ahve .close called on it before the .write has chance to happen.

[17:12] <segomos_> jnthn: i'm working on fixing that right now to see if that fixes the problem on moar

[17:13] <dalek> perl6-roast-data: ec0aa1e | coke++ | / (6 files):

[17:13] <dalek> perl6-roast-data: today (automated commit)

[17:13] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/ec0aa1ef07

[17:13] <PerlJam> what's a "role-group"? (From looking at http://perlcabal.org/syn/S12.html#Custom_Meta-objects)

[17:13] <Mouq> lizmat++

[17:13] <masak> timotimo: in retrospect, what should I have called the "Meow Rooms"? :)

[17:14] <dalek> doc/redesign: a6ae155 | Mouq++ | lib/Language/terms.pod:

[17:14] <dalek> doc/redesign: Add some terms from terms.pod

[17:14] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/a6ae155921

[17:14] <masak> PerlJam: it's an internal implementation detail that users generally don't need to worry about.

[17:14] <masak> m: role R[T] {}; role R[S, T] {}; # those two are in the same role-group

[17:14] <camelia> rakudo-moar 0bea66: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/jF__IyUK4_␤Invalid typename 'T' in parameter declaration.␤at /tmp/jF__IyUK4_:1␤------> [32mrole R[T[33m⏏[31m] {}; role R[S, T] {}; # those two are i[0m␤»

[17:14] <masak> er.

[17:15] <masak> m: role R[::T] {}; role R[::S, ::T] {}

[17:15] <camelia> rakudo-moar 0bea66: OUTPUT«Unhandled exception: Could not instantiate role 'R':␤Not enough positional parameters passed; got 1 but expected 3␤   at <unknown>:1  (/home/p6eval/rakudo-inst-1/languages/nqp/lib/Perl6/Metamodel.moarvm:specialize:4294967295)␤ from src/gen/m-Metamode…»

[17:15] <jnthn> Tssk. Bad sinking.

[17:15] <masak> m: role R[::T] {}; role R[::S, ::T] {}; 1

[17:15] <camelia> rakudo-moar 0bea66: ( no output )

[17:15] <masak> there we go.

[17:15] <timotimo> masak: no clue :S

[17:15] * masak hates sinking

[17:15] *** thou left
[17:16] <dalek> doc/redesign: 841c5b5 | Mouq++ | TODO:

[17:16] <dalek> doc/redesign: Update TODO

[17:16] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/841c5b56a7

[17:16] <masak> timotimo: ...probably why I couldn't think of an actual pun there :P

[17:16] <timotimo> mhm

[17:16] *** thou joined
[17:16] <PerlJam> so ... if roles were like multi subs, a role-group would be like all the multis that share the same short name?

[17:17] <jnthn> Pretty much that

[17:17] <timotimo> how do i define a protorole? :P

[17:17] <jnthn> And they are resolved using the multi-dispatcher, so the analagy goes really deep

[17:21] <lizmat> .oO( ah, profiteroles  :-)

[17:23] * [Coke] has a 2 week vacation coming up, and wonders if he'll be able to carve out chunks of time for sixing.

[17:23] <dalek> doc/redesign: c08160a | Mouq++ | lib/Type/Complex.pod:

[17:23] <dalek> doc/redesign: Mark postfix i

[17:23] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/c08160a236

[17:24] <timotimo> Mouq++ # doc redesign implementation

[17:24] <dalek> doc: 88a566a | duff++ | lib/Rat.pod:

[17:24] <dalek> doc: minor typo fix

[17:24] <dalek> doc: review: https://github.com/perl6/doc/commit/88a566af31

[17:25] <cognominal> profiteroles++

[17:25] <[Coke]> https://github.com/coke/perl6-roast-data/blob/master/log/rakudo.jvm_summary.out#L1718 - current rakjvm failures.

[17:26] <[Coke]> ^^ do those require an env var of some kind that might not be set when running from cron?

[17:26] <[Coke]> (they didn't fail when I ran it by hand last night)

[17:26] <[Coke]> donaldh++

[17:27] <[Coke]> .tell donaldh Thanks for perservering and getting the eval server stuff working for me. Having these tests run in a fraction of the time makes it much more usable.

[17:27] <yoleaux> [Coke]: I'll pass your message to donaldh.

[17:27] *** jnap left
[17:27] <[Coke]> currently there are no clue rakudo spec test runs. :(

[17:28] <[Coke]> s/clue/clean

[17:29] *** jnap joined
[17:30] <[Coke]> jvm fails 28, moar fails 3, parrot fails 8.

[17:30] <lizmat> the deprecations fails are on my list

[17:31] <[Coke]> lizmat++ # those are failing on moar/parrot, but not java.

[17:31] *** dmol joined
[17:31] <lizmat> they're casualties of the say/note optimizations

[17:32] <lizmat> r: say $*OS

[17:32] <camelia> rakudo-jvm 0bea66: OUTPUT«(timeout)»

[17:32] <camelia> ..rakudo-{parrot,moar} 0bea66: OUTPUT«linux␤»

[17:32] <[Coke]> ah, maybe we just need a slightly more recent run?

[17:33] <[Coke]> this was with rakudo:354c5c5

[17:34] <[Coke]> https://github.com/perl6/Pugs.hs/issues/29 if someone is haskell handy.

[17:35] <lizmat> dinner&

[17:35] <[Coke]> niecza is failing 1200 tests even. :|

[17:35] *** lizmat left
[17:41] *** rurban left
[17:42] *** denis_boyun_ joined
[17:42] <FROGGS> no regressions with this in star: This is perl6 version Bajor-211-g0bea66a built on parrot 6.5.0 revision 0

[17:43] <rurban_> FROGGS: I just updated my roast pull request also

[17:43] <FROGGS> rurban_++

[17:44] <FROGGS> I am running spectests now, and will then bump and merge

[17:44] <rurban_> I'll do the nqp bump, because I also improved 6model WBs a bit

[17:44] *** Sqirrel joined
[17:44] <dalek> nqp: 898c35f | rurban++ | src/vm/parrot/pmc/ (7 files):

[17:45] <dalek> nqp: pmc2c_orig: optimize 6model pmcs for the new pmc2c

[17:45] <dalek> nqp: 

[17:45] <dalek> nqp: Annotate several PMC methods for unneeded or manual GC write barriers.

[17:45] <dalek> nqp: This requires the new pmc2c from parrot 6.5.0

[17:45] <dalek> nqp: 

[17:45] <dalek> nqp: This is 2-4% faster for the nqp testsuite.

[17:45] <dalek> nqp: $ perf stat -r2 prove -r --exec "./nqp-p --vmlibs=nqp_dyncall_ops" t/nqp t/hll t/qregex t/p5regex t/qast t/serialization

[17:45] <dalek> nqp: review: https://github.com/perl6/nqp/commit/898c35f57d

[17:45] <dalek> nqp: adf65bf | rurban++ | tools/build/PARROT_REVISION:

[17:45] <dalek> nqp: Bump parrot to 6.5.0 with pmc2c_orig improvements and ICU fixes

[17:45] <dalek> nqp: 

[17:45] <dalek> nqp: fixed icu detection on multi-arch systems (newer debians),

[17:45] <dalek> nqp: icu 5.2 workaround for control char namealiases,

[17:45] <dalek> nqp: better GC write barriers in 6model PMCs

[17:45] <dalek> nqp: review: https://github.com/perl6/nqp/commit/adf65bfd24

[17:45] <[Coke]> I am slightly concerned at all the bumping if we have a release RSN.

[17:45] <[Coke]> doesn't give us a lot of time for testing.

[17:45] <rurban_> When is the rakudo release? old didn't pass the tests, new passes

[17:45] <FROGGS> this thursday

[17:46] <rurban_> enough time

[17:46] <dalek> perl6-roast-data: 9504dac | coke++ | README.md:

[17:46] <dalek> perl6-roast-data: Don't call out rakudo.jvm, collapse pugs/niecza

[17:46] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/9504dac4b1

[17:46] <FROGGS> I also think it is really worth it

[17:46] *** Alina-malina left
[17:47] <FROGGS> [Coke]: that is why I tested star before we bumped the version

[17:48] *** Alina-malina joined
[17:48] <rurban_> I also tested nqp/rakudo since Friday

[17:50] <rurban_> FROGGS: I don't understand why perl6-p does not deprecate $*OS. It's enterily backend unspecific: https://github.com/rurban/roast/commit/c0d2692c49552ad7a55cda5a28db5e3104f03573

[17:51] <FROGGS> m: say $*OS

[17:51] <camelia> rakudo-moar 0bea66: OUTPUT«linux␤»

[17:51] <FROGGS> j: say $*OS

[17:51] <camelia> rakudo-jvm 0bea66: OUTPUT«Linux␤»

[17:51] <FROGGS> p: say $*OS

[17:51] <camelia> rakudo-parrot 0bea66: OUTPUT«linux␤»

[17:52] <FROGGS> ??

[17:52] <rurban_> There should be deprecation notice according to the tests

[17:52] <FROGGS> rurban_: <lizmat> the deprecations fails are on my list

[17:52] <rurban_> p: say $*OS; Deprecation.report

[17:52] <camelia> rakudo-parrot 0bea66: OUTPUT«linux␤»

[17:52] <rurban_> m: say $*OS; Deprecation.report

[17:52] <camelia> rakudo-moar 0bea66: OUTPUT«linux␤»

[17:52] <rurban_> m: say $*OS; is Deprecation.report

[17:52] <camelia> rakudo-moar 0bea66: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/R0yob5Z4Np␤Undeclared routine:␤    is used at line 1␤␤»

[17:53] <FROGGS> m: say $*VM<config>

[17:53] <camelia> rakudo-moar 0bea66: OUTPUT«{"ar" => "ar", "arflags" => "rcs", "arout" => "", "asm" => ".s", "asmout" => "-o ", "asmswitch" => "-S", "auxclean" => "\@:", "be" => "0", "can_unaligned_int32" => "1", "can_unaligned_int64" => "1", "can_unaligned_num64" => "1", "cat" => "cat", "cc" => "gc…»

[17:53] <FROGGS> m: $*VM<config>

[17:53] <camelia> rakudo-moar 0bea66: OUTPUT«Saw 1 call to deprecated code during execution.␤================================================================================␤$*VM<config> called at:␤  /tmp/u9Fbs4x1uv, line 1␤Please use $*VM.config instead.␤-----------------------------------…»

[17:53] <FROGGS> p: $*VM<config>

[17:53] <camelia> rakudo-parrot 0bea66: OUTPUT«Saw 1 call to deprecated code during execution.␤================================================================================␤$*VM<config> called at:␤  /tmp/ppypYyZTAf, line 1␤Please use $*VM.config instead.␤---------------------------------…»

[17:53] <FROGGS> so, problem is $*OS itself

[17:53] <rurban_> it's pretty new code I assume

[17:53] <FROGGS> I guess so too

[17:54] <segomos_> jnthn: good call on the promises and socket closing prior to write -

[17:54] <rurban_> Anyway, I skipped those 2 fails for now. todo didnt work

[17:55] <segomos_> HTTP::Server::Async now works on both jvm and moar 

[17:55] <FROGGS> rurban_: when the issue is fixed, I'll leave that specific commit out - I'll cherry pick one-by-one anyway

[17:55] *** thou left
[17:55] *** denis_boyun_ left
[17:56] <jnthn> segomos_: Cool! ab it! ;)

[17:56] <FROGGS> hmmmm, I think I'm going to create a wrapper script for perl6-p also, so I get the executable name+path easily

[17:56] *** liztormato joined
[17:57] <FROGGS> because $*EXECUTABLE is just rubbish for perl6-p

[17:57] <liztormato> Will look at $*OS issue later tonight

[17:58] <segomos_> jnthn: ? ab it?

[17:58] <segomos_> oh apache bench :-)

[17:58] <jnthn> segomos_: apache benchmark? Or was it something else you were using to get the "what can she take" numbers? :)

[18:04] <segomos_> does close return a promise?

[18:04] <segomos_> doesn't look like it..

[18:04] <jnthn> no, close is immediate

[18:05] *** btyler joined
[18:13] <btyler> (logging) I was running wrk against http-server-async, since wrk does a bit better job of concurrent connections than ab (so I've read)

[18:14] *** rurban joined
[18:14] <jnthn> ah, I see :)

[18:15] *** pecastro joined
[18:15] *** hoverboard joined
[18:17] *** kaleem joined
[18:18] *** rurban left
[18:21] <segomos_> hmm

[18:21] <segomos_> jnthn: i may need some more help

[18:21] <segomos_> https://github.com/tony-o/perl6-http-server-async/blob/master/ab.pl6

[18:22] <segomos_> if i run that with moar and then use ab with concurrency set to 1 (1 request at a time), i still segfault

[18:23] *** rurban joined
[18:28] <segomos_> it segfaults on moar after a random number of requests

[18:28] <segomos_> meetings always get in the way of more fun things

[18:39] <dalek> doc/redesign: e0ec0eb | Mouq++ | / (2 files):

[18:39] <dalek> doc/redesign: Code clean-up

[18:39] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/e0ec0eb572

[18:39] <dalek> doc/redesign: 81ef317 | Mouq++ | html (2 files):

[18:39] <dalek> doc/redesign: Fix routines' lists of sources

[18:39] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/81ef31707a

[18:40] *** kaleem left
[18:40] <dalek> doc/redesign: 88a566a | duff++ | lib/Rat.pod:

[18:40] <dalek> doc/redesign: minor typo fix

[18:40] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/88a566af31

[18:40] <dalek> doc/redesign: 32abab9 | Mouq++ | lib/Type/Rat.pod:

[18:40] <dalek> doc/redesign: Merge branch 'master' into redesign

[18:40] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/32abab93be

[18:47] <dalek> doc/redesign: cd88672 | Mouq++ | / (3 files):

[18:47] <dalek> doc/redesign: Add non-faded Camelia image for the home page

[18:47] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/cd88672ccc

[18:48] <[Coke]> n: use Test; throws_like;

[18:48] <camelia> niecza v24-109-g48a8de3: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤    'throws_like' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1502 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P…»

[18:49] *** brrt joined
[18:49] *** anaeem1 joined
[18:52] <[Coke]> m: use Test; throws_like {die "whee"}, "hi";

[18:52] <camelia> rakudo-moar 0bea66: OUTPUT«    1..2␤    ok 1 - code dies␤    not ok 2 - right exception type (Str)␤    # Got:      (X::AdHoc)␤    # Expected: hi␤    # Exception message: whee␤    # Looks like you failed 1 tests of 2␤not ok 1 - did we throws_like Str?␤»

[18:53] <[Coke]> t/spec/S12-methods/private.t says 12 tests, but it should be 14, yes?

[18:54] * moritz just manually counted 11

[18:55] <moritz> [Coke]: throws_like used to run as several tests, now it's one test with subtests

[18:55] <moritz> 12 is correct

[18:55] <FROGGS> 12

[18:56] <FROGGS> [Coke]: even when niecza had throws_like, it does not have typed exceptions

[18:58] <FROGGS> m: my $VERSION = 1; say "LWP::Simple/$VERSION Perl6/$*PERL.compiler.name"

[18:58] <camelia> rakudo-moar 0bea66: OUTPUT«LWP::Simple/1 Perl6/Perl 6.compiler.name␤»

[19:06] <FROGGS> that is what I want to fix tonight:

[19:06] <FROGGS> froggs@TL02L-R8RXTCW-linux:~/dev/rakudo$ echo '1 1' > Hurz.pm

[19:06] <FROGGS> froggs@TL02L-R8RXTCW-linux:~/dev/rakudo$ perl6-m -I. -e 'use Hurz'

[19:06] <FROGGS> Unhandled exception: Cannot find method 'Stringy': no method cache and no .^find_method

[19:06] *** rindolf joined
[19:07] *** darutoko left
[19:07] <FROGGS> only moar is affected, the others show the TTIAR correctly

[19:09] *** labster joined
[19:09] *** dwarring joined
[19:11] <liztormato> I'm pretty sure that will be fixed soon

[19:12] <vendethiel> When I'm reading some old perlmonks post and "[if perl6 hadn't been a rewrite] Had this been done we might have gotten something in 2-4 years that was production ready (ran all of CPAN) and cleaned up the worst warts. ..."

[19:12] <vendethiel> It was in 2010, but even then, py3 was in a pretty bad shape, and I think php6 just got abandoned :D

[19:18] <Mouq> .oO( we might have but what we have now works really well and there's no point in being bitter when we can move forward with such an increadibly powerful language as Perl 6 has become )

[19:20] <liztormato> I think history has shown that bolting on Perl 6 features on Perl 5 doesn't necessarily work out well

[19:21] <vendethiel> haha yeah, pmichaud is actually saying "people like p5.10 because it has ~~ !" :P

[19:21] <vendethiel> we know how history went ...

[19:23] * moritz likes 5.10 for // and say()

[19:23] <liztormato> And state. Or was that later?

[19:23] <geekosaur> some people like smartmatching in p5 a lot. but it was troublesome enough that it's been re-tagged experimental

[19:24] <geekosaur> doesn't help that p5's smartmatching is the early p6 one that had to be thrown out and reworked completely

[19:24] <Su-Shee> never used it. not once..

[19:24] <Su-Shee> neither given when.. never needed it..

[19:28] *** liztormato left
[19:28] * PerlJam wishes given/when didn't trigger an "experimental" warning in P5

[19:29] <PerlJam> I never *needed* them, but they sure were nice to have (with sane semantics :)

[19:29] *** maraisf joined
[19:30] *** maraisf left
[19:33] * vendethiel is ready on "why is perl bad" and sees some of the stuff perl 6 fixed

[19:33] <vendethiel> though it's a c2 page

[19:35] <masak> state was something like 5.14, I think.

[19:35] <rurban_> state is actually used sometimes

[19:36] <vendethiel> it's funny; because I know I read this page before. But I didn't know 'bout p6

[19:37] *** properl6ly joined
[19:37] <masak> vendethiel: ...and what's your honest opinion about p6?

[19:38] <vendethiel> masak: some stuff I don't like, and that's probably never gonna get fixed

[19:38] <PerlJam> vendethiel: oh?  what don't you like?

[19:38] <vendethiel> masak: but if I *have* to use a "scripting language", I'd probably use it.

[19:38] <vendethiel> PerlJam: first one will be flattening. I consider that a terrible misfeature

[19:39] <vendethiel> Because Perl6 makes me really, really, really much more comfortable about my code than the ruby I do during the day.

[19:39] <masak> vendethiel: (a) some things I don't like either, (b) I don't like flattening so much either, (c) no, it's not gonna get fixed

[19:39] <vendethiel> Because I know in 90% of the cases, the typos etc are gonna get catched at compile-time, and I love it.

[19:39] <PerlJam> vendethiel: er, you object to flattening in general, or the sometimes automatic flattening that happens in certain contexts?

[19:39] <vendethiel> PerlJam: flattening. It's a terrible idea.

[19:40] <masak> PerlJam: speaking for myself, I think flattening occasionally helps. but it doesn't "carry its own weight".

[19:40] <vendethiel> And the fact that it sometimes-flatten-sometimes-doesn't (oh, sure, there are rules -- that doesn't mean it's good.)

[19:40] <masak> PerlJam: in that sense, it's a bit like varying sigils.

[19:40] <PerlJam> perhaps.

[19:40] <vendethiel> I don't like $!, because I think it's really, really confusing with !$ and I usually mess them up visually

[19:40] <masak> in Python and JavaScript, the lack of flattening makes me more confident about the at-sight semantics of code.

[19:41] <PerlJam> masak: but do you also not like the ability to pack/unpack data structures?  

[19:41] <masak> vendethiel: oh, that's just a train-the-eye thing. and perhaps a color-scheme-your-editor thing.

[19:41] <vendethiel> .oO( My WTF-counter would sigh "at-sigh" )

[19:41] <masak> PerlJam: that can be done in other ways, such as with destructuring.

[19:41] <vendethiel> masak: haha, my editor (ST) is using a Perl5 highlighter, so yeah, tooling would fix it :)

[19:41] <masak> :)

[19:42] <vendethiel> I don't like the p5 error messages catching a bit too much, but that's probably gonna fixed -- TimToady++ actually made progress on that

[19:43] <vendethiel> I don't really like `BUILD` with `bless`, because I feel like that's something I, as a user, should never have to mess with

[19:43] <masak> Perl 6 error messages are (asymtotically approaching) awesome.

[19:43] <vendethiel> But irrelevant for a non-p5 programmar like me

[19:43] <vendethiel> (I do agree, though <3)

[19:44] <carlin> I like how vim highlights `sub foo($blah) {}` when it doesn't understand you're writing Perl 6

[19:44] <masak> vendethiel: I find it weird that our primitive for creating new objects out of thin air ended up being spelled 'bless'. :)

[19:44] <vendethiel> oh, and I hate P6's interpolation.

[19:44] <masak> I don't love P6's interpolation. but I've also found that I don't love any language's interpolation.

[19:44] <vendethiel> I think I'll keep using the no-interpolation modifier everytime I use `"` (well, except for {}) :c ?

[19:45] <masak> I suspect there's no non-ugly interpolation syntax out there.

[19:45] <vendethiel> #{} in ruby is good. It's reliable, I know where it starts, where it ends, etc

[19:45] <PerlJam> The only interpolation I have issues with is the one with trailing brackets.   We have {}, why not just use them?

[19:45] <japhb> masak: IIRC the original version of that was "bless an object into a class", in which case the verb makes sense (both literally and poetically)

[19:46] <vendethiel> Oh, and I really feel limited with runtime VS compile-time distinction, but I think with the HOWs and the macros, it's okay :).

[19:47] <vendethiel> I think I love every single other of p6. Because it's amazing.

[19:47] <vendethiel> Oh, no, I don't really like the implicit %*, but that's a debate for another day :P.

[19:47] <masak> japhb: "original" for Perl or for Perl 6?

[19:47] * vendethiel shower& while waiting on comments

[19:48] <masak> vendethiel: I'd love to debate the %* thing inside and out. it's one of those really annoying features with a really good intent.

[19:49] <dwarring> r: my @a=(1,2); @a.push: item (3,4); say @a.perl

[19:49] <jnthn> What %* thing?

[19:49] <camelia> rakudo-{parrot,jvm,moar} 0bea66: OUTPUT«Array.new(1, 2, $(3, 4))␤»

[19:49] <jnthn> oh, the implicit *%_?

[19:49] * PerlJam starts to think masak and vendethiel a little crazy  ;)

[19:50] <dwarring> r: my @a=(1,2); my @b = (3,4); @a.push: item @b; say @a.perl

[19:50] <camelia> rakudo-{parrot,jvm,moar} 0bea66: OUTPUT«Array.new(1, 2, 3, 4)␤»

[19:50] <dwarring> ^^ that's flattening when it shouldn't be

[19:54] * dwarring rakudobug

[19:54] <TimToady> m: my @a=(1,2); my @b = (3,4); @a.push: @b.item; say @a.perl

[19:54] <camelia> rakudo-moar 0bea66: OUTPUT«Array.new(1, 2, [3, 4])␤»

[19:54] <TimToady> a workaround for the bug

[19:54] <jnthn> wtf is item doing...

[19:58] <TimToady> m: my @a=(1,2); my @b = (3,4); @a.push: $@b; say @a.perl

[19:58] <camelia> rakudo-moar 0bea66: OUTPUT«Array.new(1, 2, [3, 4])␤»

[19:58] <TimToady> another workaround

[19:59] <jnthn> > my @a=(1,2); my @b = (3,4); @a.push: item @b; say @a.perl

[19:59] <jnthn> Array.new(1, 2, [3, 4])

[19:59] <jnthn> Local fix :P

[20:00] * jnthn builds a non-debug Moar so spectest won't be glacial

[20:01] *** rindolf left
[20:02] <vendethiel> PerlJam: sorry - is it bad to be crazy ?

[20:02] <vendethiel> masak: same here :)

[20:02] <vendethiel> jnthn: yes

[20:02] *** thou joined
[20:03] *** hoverboard left
[20:03] <vendethiel> PerlJam: I want to be able to reason about my code. flattening makes me unable to do so

[20:03] <vendethiel> (not because I'm "used to it", but because I fail to see consistency in it)

[20:03] <PerlJam> no, it's not bad to be crazy.  Many people are crazy and it's awesome! : )

[20:03] <PerlJam> er :)

[20:04] <jnthn> vendethiel: I don't find that to be a problem...never really did in Perl 5 either, tbh.

[20:04] <vendethiel> jnthn: I never did perl 5, sorry

[20:04] <vendethiel> and I'm really happy with ruby2 kwargs, because they remove the typo factor

[20:04] <vendethiel> p6 really carried out this one, so I'd love it to be pushed a bit more :P

[20:05] <jnthn> vendethiel: Sure, just saying I don't find flattening in either language painful.

[20:05] <jnthn> Well, implementation wise, perhaps sometimes :P

[20:05] <vendethiel> jnthn: oh, you mean flattening. I thought, you meant *%_

[20:05] <jnthn> Oh, *%_ mostly bothered me from a "how the heck to optimize it" point of view...

[20:06] <jnthn> Well, partly still does, but I manage to optimize it out in places.

[20:06] <jnthn> Taht's an implementor view though :)

[20:07] <vendethiel> jnthn++ # "Dirty Work"

[20:07] <PerlJam> I don't find flattening painful (or even slightly annoying), but I wonder if it's necessary?  I mean, there are certain times when flattening seems like a "natural" thing to do.  But is that because of my experience with P5?  I dunno.   

[20:08] <PerlJam> Also, it occurs to me that flattening may have been a "root cause" for the issues with lists, but I don't know if that's true.

[20:09] <dalek> rakudo/nom: 293bb50 | jnthn++ | src/core/Any.pm:

[20:09] <dalek> rakudo/nom: Corret item @a, item %h, item (1,2,3).

[20:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/293bb50e07

[20:10] <jnthn> dwarring: ^^ - if you could write it a test, that'd be awesome.

[20:10] <muraiki> I'm a newbie to perl, but is flattening when something like (1, 2, (3, 4), 5) becomes (1, 2, 3, 4, 5) ?

[20:10] <colomon> muraiki: yes

[20:10] <vendethiel> muraiki: yes

[20:10] <vendethiel> except when it's not.

[20:10] <muraiki> heh

[20:10] <dwarring> jnthn: awesome! will do

[20:11] <muraiki> coming to perl from python and clojure, I found that flattening resulted in requiring quite a bit more cognitive overhead when making nested data structures, because I now had to also think about references and using the right sigils and {} / []

[20:12] <muraiki> sorry if I don't have all the terms right

[20:12] *** cognominal left
[20:13] <muraiki> now that I've been using perl professionally for two months, I'm usually ok... but it was hard as a learner

[20:13] *** cognominal joined
[20:14] *** cognominal left
[20:14] <vendethiel> muraiki: are you using p6 professionally :P ?

[20:14] <muraiki> oh, no, haha

[20:14] <muraiki> I haven't actually used perl 6, but I've read a bit about it

[20:14] * vendethiel is

[20:14] <muraiki> I meant perl 5 :)

[20:14] <vendethiel> muraiki: we have even more cookies :D

[20:14] <muraiki> yeah, someday when I have enough free time I'm going to start playing with p6

[20:15] * vendethiel learned perl 6 while commuting

[20:15] <muraiki> coming from a bit of a functional background, I see some really neat things in perl 6

[20:15] <PerlJam> muraiki: such as?  :)

[20:15] <vendethiel> (I guess "clojure" is the functional background part ?)

[20:15] <muraiki> yeah, although it's not fully pure

[20:16] <muraiki> well pretty much everything in the "why perl 6" slides that were on here a week or two ago made me go "awesome!"

[20:16] <moritz> most functional languages aren't fully pure

[20:16] * vendethiel has had the same languages

[20:16] <vendethiel> moritz: most function languages are wrongly called "functional", tbh.

[20:17] <muraiki> yeah, that's why I used that term with reservation

[20:17] *** Alina-malina left
[20:17] <dalek> rakudo/nom: 87333c9 | jnthn++ | docs/ChangeLog:

[20:17] <dalek> rakudo/nom: Various ChangeLog additions.

[20:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/87333c9494

[20:18] *** Alina-malina joined
[20:19] *** pecastro left
[20:19] *** Sqirrel left
[20:19] *** MilkmanDan left
[20:19] *** [particle] left
[20:19] *** djanatyn left
[20:19] *** Psyche^ left
[20:19] *** maelus left
[20:19] *** mr-foobar left
[20:19] *** Su-Shee left
[20:19] *** zengargo1le left
[20:19] *** perigrin left
[20:19] *** ponbiki left
[20:19] *** camelia left
[20:19] *** kshannon left
[20:19] *** tempire_ left
[20:19] *** muraiki left
[20:19] *** go|dfish left
[20:19] *** firnsy left
[20:19] *** isacloud__ left
[20:19] *** FOAD left
[20:19] *** pmichaud left
[20:19] *** hugme left
[20:19] *** jercos left
[20:19] *** Juerd left
[20:19] *** bowtie left
[20:19] *** hoelzro left
[20:19] *** amkrankruleuen left
[20:19] *** retupmoca left
[20:19] *** ggherdov left
[20:19] *** Bucciarati left
[20:19] *** TimToady left
[20:19] *** lestrrat left
[20:19] *** raydiak left
[20:20] *** pecastro joined
[20:20] *** Sqirrel joined
[20:20] *** MilkmanDan joined
[20:20] *** [particle] joined
[20:20] *** djanatyn joined
[20:20] *** Psyche^ joined
[20:20] *** maelus joined
[20:20] *** mr-foobar joined
[20:20] *** Su-Shee joined
[20:20] *** zengargo1le joined
[20:20] *** perigrin joined
[20:20] *** muraiki joined
[20:20] *** ponbiki joined
[20:20] *** camelia joined
[20:20] *** go|dfish joined
[20:20] *** tempire_ joined
[20:20] *** kshannon joined
[20:20] *** firnsy joined
[20:20] *** isacloud__ joined
[20:20] *** raydiak joined
[20:20] *** lestrrat joined
[20:20] *** TimToady joined
[20:20] *** Bucciarati joined
[20:20] *** ggherdov joined
[20:20] *** retupmoca joined
[20:20] *** amkrankruleuen joined
[20:20] *** hoelzro joined
[20:20] *** bowtie joined
[20:20] *** Juerd joined
[20:20] *** jercos joined
[20:20] *** hugme joined
[20:20] *** pmichaud joined
[20:20] *** FOAD joined
[20:20] *** wilhelm.freenode.net sets mode: +vv camelia hugme

[20:21] <brrt> i'm bragging, of course, but https://github.com/MoarVM/MoarVM/commit/216724387c can be jitted completely

[20:21] <brrt> i.e.

[20:21] <PerlJam> vendethiel: I've thought that's because people treat "functional" as more nouny than adjectivey.   i.e. "It's a truck" more than "It's blue"  (as if all "functional langauges" were the same rather than recognizing that there are differences and gradients)

[20:21] <brrt> we have fibonacci

[20:22] <timotimo> brrt: sweet!

[20:23] <jnthn> brrt++

[20:23] <brrt> i think so

[20:23] <brrt> you don't have it from me, but labels / branching where much simpler than i had expected

[20:23] <FROGGS> brrt: does that really work already?

[20:23] <brrt> yes

[20:24] <brrt> please be my guest, try it out

[20:24] *** anaeem1 left
[20:24] *** FROGGS left
[20:24] *** treehug8_ left
[20:24] *** Woodi left
[20:24] *** colomon left
[20:24] *** carlin left
[20:24] *** noganex_ left
[20:24] <Ulti> brrt++

[20:25] <brrt> must say, if anything involved is even slightly object-like, it won't work :-)

[20:25] <vendethiel> brrt++ # HELL YEA.

[20:25] <dalek> doc/redesign: e61284a | Mouq++ | / (2 files):

[20:25] <dalek> doc/redesign: Write Type pages for types defined in lang docs, and check for methods

[20:25] <dalek> doc/redesign: 

[20:25] <dalek> doc/redesign: Type definitions can now be integrated within language documentation,

[20:25] <dalek> doc/redesign: just as routine definitions could already.

[20:25] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/e61284aa2b

[20:25] <vendethiel> PerlJam: I just mean that people saying JS is a functional or something are spouting nonsense

[20:25] <japhb> brrt++

[20:26] <brrt> for object stuff to really work, i'll need to work on return-value-management, and thats.... not so much tricky, as a bit of dividing responsibilities

[20:26] <japhb> masak, re: bless, that was Perl 5-design-era.  I don't know the exact details.

[20:26] <Mouq> brrt++

[20:27] <brrt> thanks, my bragging worked :-D

[20:28] <btyler> brrt: what lib should be installed for lua to be able to find 'bit'? haven't done much lua outside of a game engine

[20:28] <masak> muraiki: you stated quite well what I meant by the feature not "carrying its own weight". thank you.

[20:28] <btyler> http://bitop.luajit.org/download.html seems a likely candidate

[20:28] <masak> in most languages, flattening is opt-in. in Perls 5 and 6, it's opt-out.

[20:28] <brrt> btyler, yes, that is the right lib

[20:28] <[Coke]> (subtests) oh, shit. anything with subtests is probably borked count wise in niecza now. :(

[20:29] <[Coke]> (and pugs)

[20:29] <masak> which overall surprises people, and adds a cognitive burden when learning it.

[20:29] <brrt> you shouldn't /have/ to install that to build, though

[20:29] * [Coke] gives up fudging them.

[20:29] <brrt> oh, and for anyone who wants to test, pass the flag --enable-jit :-)

[20:29] <vendethiel> masak: really, I can see outside of what I learned, and I find it harder to reason about

[20:29] <brrt> (to Configure.pl, that is)

[20:30] <btyler> brrt: hm, ok. well, clang barfs on jit/stub.c

[20:30] <brrt> hmm

[20:30] <brrt> it may well

[20:30] <brrt> i'll fix that

[20:30] *** Woodi joined
[20:30] <btyler> I'll gist it

[20:30] *** properl6ly left
[20:30] <brrt> anyway, if its compiling stub.c,that means Configure thought you don't want jit :-)

[20:30] <brrt> i.e.

[20:30] <btyler> oh

[20:30] <brrt> you can build jit without lua

[20:31] <brrt> because i've checked in the preprocessed files

[20:31] <brrt> (as per jnthn++

[20:31] <brrt> 's good advice)

[20:32] <btyler> ah, ok, found --enable-jit in Configure.pl, sounds promising :)

[20:33] <dalek> roast: b8a32f5 | rurban++ | S (2 files):

[20:33] <dalek> roast: More Parrot-fudge tests that rely on $*EXECUTABLE_NAME

[20:33] <dalek> roast: review: https://github.com/perl6/roast/commit/b8a32f5f1c

[20:34] <brrt> to see the log somewhere, set MVM_JIT_LOG to a non-null value; to see the bytecode, set MVM_JIT_BYTECODE_DIR to some value 

[20:34] *** hoverboard joined
[20:34] <btyler> brrt: hm, even with --enable-jit clang is still choking on stub.c:20

[20:35] <brrt> what platform are you on?

[20:35] <muraiki> masak: yeah, if you consider flattening a mutation of the data structure you've provided, then it's kind of weird to have a mutation that occurs most of the time but not always. I imagine that flattening made something easier in Perl 1.0 back in the day, but perhaps it's not the best feature to retain :)

[20:35] <btyler> osx 10.9.3

[20:35] <segomos_> jnthn: if i run the requests without concurrency (eg i'm waiting for one request to completely close before handling another), i'm still segfaulting after a random number of requests

[20:36] <btyler> mid 2010 mbp, i7

[20:36] <masak> muraiki: it did.

[20:36] <masak> muraiki: it's a wonderful "interface" between arrays and hashes, for example.

[20:36] *** erdic left
[20:36] <masak> muraiki: you just "pour" one into the other and the intermediate list form makes it all just "fit".

[20:36] *** FROGGS joined
[20:36] *** treehug8_ joined
[20:36] *** colomon joined
[20:36] *** carlin joined
[20:36] *** noganex_ joined
[20:36] <muraiki> ah yes, I see

[20:37] <dalek> roast: 4f04da7 | rurban++ | / (2 files):

[20:37] <dalek> roast: Fudge parrot NEXT phasers

[20:37] <dalek> roast: review: https://github.com/perl6/roast/commit/4f04da7953

[20:37] <brrt> hmmm

[20:37] <masak> but that benefit has to be weighed against nested data structures, as you pointed out.

[20:37] <jnthn> segomos_: OK. I'll have to see where it's doing that...

[20:37] <PerlJam> masak: it was also useful when you needed to pass args to subroutines (at least at first it was useful :)

[20:37] <vendethiel> masak: are you coming to YAPC::EU ?

[20:37] <segomos_> jnthn: how are you stepping through this?

[20:37] <masak> vendethiel: with less than 50% certainty.

[20:37] <masak> vendethiel: I will submit talks, and then hope for the best.

[20:37] <vendethiel> masak: I have far less :P

[20:37] <segomos_> i'd be more helpful if i knew, i think

[20:37] <brrt> it is probably that Configure.pl tries to recognise your platform $Config{archname}, and doesn't like it

[20:38] <jnthn> segomos_: Debug build of MoarVM, then VS debugger 

[20:38] <vendethiel> masak: I have to submit talk and maybe I'll get there if it's accepted :P

[20:38] * jnthn needs ot submit YAPC::EU talks

[20:38] <jnthn> But I don't actually know what to talk about yet :)

[20:38] <segomos_> HTTP::Server::Async probably

[20:38] <segomos_> :p

[20:39] <jnthn> hehe

[20:39] <masak> jnthn: talk about category theory! :P

[20:39] * masak is coserious

[20:39] * jnthn is a co-expert in it :P

[20:40] <masak> that's like an expert, but with the arrows reversed?

[20:40] <PerlJam> jnthn: talk about how this Perl 6 thing is coming together and there's not much left for you to do  ;-)

[20:40] *** erdic joined
[20:40] <masak> jnthn: talk about MoarVM.

[20:40] <jnthn> Yeah. The arrow of learning points to me figuring out how little I know about the topic, rather than to the audience :P

[20:41] <brrt> btyler: can you run this? perl -MConfig -e 'print $Config{archname}."\n";'

[20:41] <vendethiel> jnthn: but are you a generalized expert ?

[20:41] <masak> jnthn: what the heck kind of arrow points between you and the audience!?

[20:41] <jnthn> And at the end, I applaud the audience for enduring the session.

[20:41] <masak> :P

[20:41] <btyler> brrt; darwin-2level

[20:41] <vendethiel> masak: "Jnthn - the good parts"

[20:41] <masak> :P

[20:41] <brrt> is that all?

[20:41] <brrt> oei

[20:41] <jnthn> That'd be a short talk :P

[20:41] <brrt> no more?

[20:41] * masak .oO( thank you for coming to this cotalk. would you please coend it now? )

[20:42] <btyler> brrt: that's it, yeah. same for all recent macs I imagine

[20:42] <vendethiel> masak: make the beginning a comonad and the end a monad ! No way to enter or to exit safely !

[20:43] *** hoverboard is now known as pqr

[20:43] <btyler> brrt: successful compile with --enable-jit and adding darwin-2level to the archname match in configure.pl

[20:43] <[Coke]> jnthn: if it were about lizmat, would it be a tall order?

[20:43] <masak> vendethiel: haha

[20:43] *** pqr is now known as hoverboard

[20:43] <btyler> I see a lot of "OH HAI" :)

[20:44] <brrt> ok, i'll add that to the Configure.pl - or if you have a commit bit, feel free to commit youself :-)

[20:44] <brrt> no, thats the wrong script i think

[20:44] <masak> vendethiel: <jnthn> you can try that door over there, but the door is not part of any public interface!

[20:44] <masak> vendethiel: <audience> *gasp*!

[20:44] <vendethiel> masak: you must mean TRY.

[20:45] <vendethiel> EVAL*, even.

[20:45] <masak> yeah.

[20:45] * vendethiel now imagines jnthn screaming EVAL to the top of his lungs

[20:45] * vendethiel ... in the middle of a sentence explaining where to exit safely

[20:45] <masak> jnthn screams a lot since he started using VS 2012.

[20:45] <btyler> brrt: oh, yep, my moar-jit was a little out of date

[20:45] <vendethiel> Why would he do that, though ?

[20:45] <brrt> :-)

[20:45] <brrt> i'l add the line, then

[20:46] <dalek> roast: 26c1a2b | rurban++ | S0 (2 files):

[20:46] <dalek> roast: Fudge more parrot TODOs

[20:46] <dalek> roast: 

[20:46] <dalek> roast: S06-signature/unpack-array.t: [...] does not lose containerization

[20:46] <dalek> roast: S04-declarations/will.t: all for blocks set variable

[20:46] <masak> vendethiel: because the menus are all FILE EDIT VIEW ...

[20:46] <dalek> roast: review: https://github.com/perl6/roast/commit/26c1a2b97c

[20:46] *** molaf_ left
[20:46] <vendethiel> masak: would be better with $ % ! &

[20:46] *** [Sno] joined
[20:47] <jnthn> haha...yeah, I remember the first talk I did with VS 2012

[20:47] <jnthn> Early in a morning, audience still not entirely awake yet

[20:48] <jnthn> "So, we go to do ***DEBUG*** menu..." :D

[20:48] *** cognominal joined
[20:48] <jnthn> That woke everyone up :)

[20:48] <PerlJam> someone should to a tag-team talk with TheDamian

[20:49] *** erdic left
[20:49] <segomos_> that sounds like a rap 

[20:52] <PerlJam> I dunno ... it could be like this:  TheDamian: let me tell you about some thing absolutely amazing if it existed.   jnthn: oh, and by the way, here it is!   (or vice versa)

[20:52] <timotimo> :D

[20:52] <timotimo> that's so you two

[20:52] <brrt> btyler - i've added the line and some documentation

[20:53] <PerlJam> and if there were several amazing things the whole talk could crescendo until everyone's brain explodes  ... ;)

[20:53] <brrt> btyler++ for finding the right option

[20:54] <segomos_> how do i undefine in p6?

[20:54] <jnthn> m: my $a = 42; undefine $a; say $a

[20:54] <camelia> rakudo-moar 0bea66: OUTPUT«(Any)␤»

[20:54] <FROGGS> hehe

[20:54] <timotimo> oh, we really have that?

[20:54] <timotimo> but then $a still exists!

[20:54] <FROGGS> I love these answers :o)

[20:54] <segomos_> i kept trying undef >.<

[20:54] <PerlJam> he didn't ask how to obliterate $a

[20:54] <PerlJam> segomos_: why do you want to undefine something anyway?

[20:55] <cognominal> Perl 6 waits forever that I decide to close my =begin pod. I can construe that as some form of string layziness.

[20:55] <segomos_> trying to figure out if i have a promise somewhere that is causing the segfault in moar

[20:55] <btyler> brrt: that is one speedy fib :)

[20:55] <brrt> you have i7

[20:55] *** rurban left
[20:55] <brrt> i'd be scared if fib wasn't fast

[20:55] <cognominal> I may some day append to the file.

[20:55] <brrt> :-)

[20:56] *** erdic joined
[20:57] *** lizmat joined
[20:57] *** anaeem1 joined
[20:58] <PerlJam> cognominal: yeah, but doesn't that mean that it never gets to runtime, but hangs around waiting to compile more code?

[20:59] <cognominal> too bad.

[21:04] *** ivanshmakov left
[21:04] *** ivanshmakov joined
[21:04] *** rurban joined
[21:05] <segomos_> the moar tests, as long as moar doesn't segfault, are serving 100% of requests within 20ms on my machine

[21:06] <vendethiel> (that's still a bit too much for a real-world use case, but it's a good sign it works !)

[21:06] <segomos_> the jvm version is more like 130ms :

[21:07] <Mouq> segomos_++

[21:08] <segomos_> with brand new jvm build i'm getting 50ms 

[21:09] <timotimo> at some point the moar jit will be cool enough to help even with such workloads :3

[21:09] *** rurban left
[21:09] <vendethiel> segomos_: try to trigger 10k requests now :)

[21:09] <timotimo> we can already do fibonacci! :)

[21:09] <segomos_> single requests produces this: https://gist.github.com/tony-o/83c3d10fefbf50d0b0cd

[21:10] <segomos_> lol 10k errors out with 'too many files open' on the apache bench side

[21:11] <Mouq> "99% served within 25ms"

[21:11] <segomos_> pretty good on the jvm, with 1 request at a time

[21:12] <segomos_> btyler: what were you using ? wrk?

[21:12] <btyler> segomos_: yeah, wrk. multiple concurrent conns seems to hang it, using one conn and one thread gets it around 50 requests before moar segvs

[21:13] <segomos_> i've got moar more stable but it does segfault after a seemingly random number of requests (sometimes it's 12, other times it's 4x, and some other times it will serve 100 some requests)

[21:14] <segomos_> jnthn got me on the right path with leaving promises open

[21:14] <btyler> the jvm JIT is really fun to watch in action. the first 150 requests are dog slow, then things start to pick up rapidly

[21:14] *** kaare_ left
[21:15] *** Rotwang left
[21:16] <lizmat> jnthn: regarding undefine(): I got the impression from TimToady++ that he was not sure whether that should live

[21:16] <btyler> segomos_: https://gist.github.com/kanatohodets/f534ac3a4c18d250f7b5

[21:16] <lizmat> generically, undefining something (which is bringing it back to the original state), is done by assigning Nil

[21:16] <btyler> with a warm-ish JVM JIT

[21:16] <vendethiel> ^ agreed

[21:16] <lizmat> m: my $a = 42; say $a; $a = Nil; say $a

[21:16] <camelia> rakudo-moar 0bea66: OUTPUT«42␤(Any)␤»

[21:17] *** colomon left
[21:17] <lizmat> m: my $a is default(42); say $a; $a = Nil; say $a

[21:17] <camelia> rakudo-moar 0bea66: OUTPUT«42␤42␤»

[21:17] <segomos_> btyler: nice

[21:17] <lizmat> m: my $a is default(42)= 86; say $a; $a = Nil; say $a

[21:17] <camelia> rakudo-moar 0bea66: OUTPUT«86␤42␤»

[21:17] <btyler> segomos_: next up: multiple concurrent conns, yeah? :)

[21:18] <segomos_> m: my $a is default(42)= 86; $a.say; undefine $a; say $a;

[21:18] <camelia> rakudo-moar 0bea66: OUTPUT«86␤42␤»

[21:18] <dalek> doc/redesign: f6fdcdd | Mouq++ | / (6 files):

[21:18] <dalek> doc/redesign: Introduce Sets_Bags_and_Mixes.pod

[21:18] <dalek> doc/redesign: 

[21:18] <dalek> doc/redesign: This includes the definitions of Set, Bag, and Mix, as well as the

[21:18] <dalek> doc/redesign: Set/Bag operators. The pages for Set, Bag and Mix are automatically

[21:18] <dalek> doc/redesign: generated from the documentation

[21:18] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/f6fdcddf59

[21:18] <segomos_> btyler: hell yea, they should work right now with p6-j, just not working so well on moar

[21:18] <btyler> hm, ok

[21:20] *** SevenWolf joined
[21:20] <segomos_> btyler: -c 5 == https://gist.github.com/tony-o/1e5d3b5461c7a69420db

[21:20] <segomos_> that's against a fresh jvm

[21:21] <btyler> segomos_: tried it with default wrk settings? I keep hanging or running into an exception on r-j doing that

[21:22] <hoelzro> I noticed that perl6-m supports $*PROGRAM_NAME, but the specs indicate $*PROGRAM - which one is right?

[21:22] <segomos_> m: $*PROGRAM_NAME.say; $*PROGRAM.say;

[21:23] <camelia> rakudo-moar 0bea66: OUTPUT«/tmp/nlaPhzCURZ␤===SORRY!===␤Dynamic variable $*PROGRAM not found␤»

[21:23] <segomos_> m: $*PROGRAM_NAME.say;;

[21:23] <camelia> rakudo-moar 0bea66: OUTPUT«/tmp/oZ5Rlc2co2␤»

[21:23] <segomos_> r: $*PROGRAM_NAME.say;;

[21:23] <camelia> rakudo-{parrot,jvm,moar} 0bea66: OUTPUT«/tmp/tmpfile␤»

[21:24] <hoelzro> roast seems to support $*PROGRAM_NAME as well

[21:24] <btyler> segomos_: -t 1 and -c 5 work reliably for me, but -t 2 and -c 10 reliably hangs. not sure what's up yet

[21:24] <hoelzro> but according to git blame, $*PROGRAM_NAME became $*PROGRAM in november of last year

[21:25] <FROGGS> hoelzro: wasn't that $*EXECUTABLE and $*EXECUTABLE_NAME?

[21:25] <hoelzro> it's both, I think

[21:25] <hoelzro> hang on

[21:25] <FROGGS> but I'd favor the short name fwiw

[21:25] <segomos_> btyler: checking it out right now

[21:25] *** colomon joined
[21:25] <hoelzro> https://github.com/perl6/specs/commit/6cdd9f3

[21:26] <hoelzro> FROGGS: ^

[21:26] <segomos_> btyler: are you getting Illegal State Exception from jvm?

[21:26] <hoelzro> I favor it as well (esp. considering it's an IO::Path rather than a Str), but I was confused about the status of $*PROGRAM in rakudo

[21:26] <hoelzro> as well as roast

[21:26] <FROGGS> hoelzro: ahh, hmmm

[21:27] <FROGGS> $*PROGRAM should be easy to implement though

[21:27] *** denis_boyun_ joined
[21:27] <hoelzro> I've added it to my growing TODO list =P

[21:28] <FROGGS> *g*

[21:28] <btyler> segomos_: I've seen a few crashes, but they're lost beyond scrollback atm, trying to reproduce

[21:29] <jnthn> segomos_, btyler: I won't have time needed to debug the Moar issues here in the next few days, but will get to it next week. I suspect that reducing the GC nursery size will quickly show if it's GC related or not, but just seeing where it SEGVs can help

[21:31] <btyler> jnthn: no rush :) looking forward to seeing how r-m handles the wrk barrage

[21:31] *** _thou joined
[21:32] *** donaldh joined
[21:32] *** thou left
[21:33] *** anaeem1 left
[21:38] <lizmat> FROGGS: so, $*PROGRAM should be the same as $*PROGRAM_NAME ?

[21:38] <lizmat> and $*PROGRAM_NAME should be deprecated ?

[21:38] <FROGGS> yes

[21:40] <hoelzro> you going to steal the low-hanging fruit away from me, lizmat? =P

[21:40] <lizmat> nononono

[21:40] <lizmat> please take it !

[21:40] <dalek> roast: cf1c647 | (David Warring [email@hidden.address] | S03-operators/context.t:

[21:40] <dalek> roast: test: item @arr; item %hash

[21:40] <dalek> roast: review: https://github.com/perl6/roast/commit/cf1c647253

[21:41] <hoelzro> we'll see if I get around to it!

[21:41] <hoelzro> it doesn't look too hard

[21:41] <lizmat> I seem to recall you have enough tuits already  :-)

[21:41] *** skids left
[21:41] <hoelzro> my only concern (atm) is if the program is found on $PATH

[21:41] <hoelzro> heh

[21:41] <hoelzro> these days, I'm pretty low

[21:42] <hoelzro> then again, with a shebang, perl6 should receive the full path to the script on its command line, right?

[21:42] <hoelzro> so it should be fine, I thinjk

[21:42] <hoelzro> *think

[21:42] <FROGGS> look at how $*EXECUTABLE works on jvm and moar

[21:43] <segomos_> btyler: i'm seeing the problem, i'll work on that.  meanwhile i have timotimo's suggestion of making the registered callbacks fire when the headers are complete

[21:43] <hoelzro> is there a way to DEPRECATED a dynamic variable?

[21:43] <lizmat> well, no

[21:44] <hoelzro> I figured not

[21:44] <hoelzro> well, that's ok

[21:44] <lizmat> I faked it by making the dynamic variable of the Obsolete class

[21:44] *** rurban joined
[21:44] <lizmat> and depend on .gist and .Str doing the deprecation message

[21:44] <lizmat> but that doesn't work anymore with the last say optimization

[21:45] <ChoHag> How do you tell perl to continue after handling an exception in a CATCH block?

[21:45] <lizmat> which doesn't call .gist on single Str arguments anymore

[21:45] <lizmat> ChoHag: add a default block

[21:45] <ChoHag> I have a default block.

[21:45] <lizmat> S04:1033

[21:45] <synopsebot> Link: http://perlcabal.org/syn/S04.html#line_1033

[21:45] <btyler> segomos_: awesome, can't wait to see how it turns out

[21:46] <hoelzro> hmm

[21:46] <hoelzro> what should $*PROGRAM be if it's the perl6 REPL?

[21:46] <segomos_> ChoHag: do you mean similar to vb's resume next ?

[21:46] <hoelzro> $*PROGRAM_NAME is 'interactive'

[21:46] <lizmat> I'm now trying to fix with a separate candidate for Obsolete, but that's not working out for some reason

[21:46] <lizmat> m; $*OS.say

[21:46] <ChoHag> Doesn't that just quell them entirely?

[21:47] <lizmat> m: $*OS.say

[21:47] <camelia> rakudo-moar 87333c: OUTPUT«linux␤»

[21:47] <ChoHag> No, I want to resume execution at the bottom of the CATCH block.

[21:47] <ChoHag> Not just carry on regardless.

[21:47] <segomos_> it does that already

[21:47] <segomos_> m: try { 'hi'.say; die "dead"; CATCH { default { 'caught'.say; } }; }; '/try'.say;

[21:47] <camelia> rakudo-moar 87333c: OUTPUT«hi␤caught␤/try␤»

[21:47] <lizmat> actually, no: if you ignore the exception, it will continue with the line *after* the line causing the exception

[21:47] <lizmat> afaik

[21:48] <segomos_> m: try { 'try'.say; die "dead"; 'after life'.say CATCH { default { 'caught'.say; } }; }; '/try'.say;

[21:48] <camelia> rakudo-moar 87333c: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/JuenfUKe2s␤Two terms in a row␤at /tmp/JuenfUKe2s:1␤------> [32m'try'.say; die "dead"; 'after life'.say [33m⏏[31mCATCH { default { 'caught'.say; } }; }; [0m␤    expecting any of:␤    …»

[21:48] <FROGGS> p: try { die "ohh"; say "well"; CATCH { default { .resume } } };

[21:48] <camelia> rakudo-parrot 87333c: OUTPUT«well␤»

[21:48] <segomos_> m: try { 'try'.say; die "dead"; 'after life'.say; CATCH { default { 'caught'.say; } }; }; '/try'.say;

[21:48] <camelia> rakudo-moar 87333c: OUTPUT«try␤caught␤/try␤»

[21:48] <FROGGS> m: try { die "ohh"; say "well"; CATCH { default { .resume } } }; # broken on moar sadly

[21:48] <camelia> rakudo-moar 87333c: OUTPUT«This representation (VMException) does not support associative access␤  in method resume at src/gen/m-CORE.setting:11405␤  in block  at /tmp/aYEM6TEzWA:1␤  in block  at /tmp/aYEM6TEzWA:1␤␤»

[21:49] <FROGGS> but the parrot line shows that .resume is the right thing

[21:49] <jnthn> FROGGS: Moar knows how to do it, though...

[21:49] <ChoHag> How does the automatic application of a try block affect the leaving of a CATCH?

[21:49] <segomos_> he wants it to resume at the bottom of the CATCH block

[21:49] <FROGGS> yeah, will look at the resume method in rakudo in a bit

[21:49] <ChoHag> segomos_: I don't really mind where, as long as resumption occcurs.

[21:50] *** smls left
[21:50] <segomos_> btyler: weird, the connection.send promise is planned but never kept/broken

[21:50] <TimToady> what does "at the bottom of the CATCH block" mean?  the position of a CATCH block is meaningless

[21:51] <ChoHag> I have a default handler with just say in it, then no further says are said, regardless of where I've spewed them.

[21:51] <segomos_> example?

[21:51] <TimToady> the CATCH block is not anywhere in the normal sequence of execution, in other words

[21:52] <TimToady> it's a "come from"

[21:52] <ChoHag> perl 6 has comefrom?

[21:52] <TimToady> well, COME FROM if yer talking INTERCAL

[21:52] <ChoHag> Oh dear.

[21:52] *** _thou left
[21:52] <TimToady> well, it's a slightly more controlled form :)

[21:54] <dalek> rakudo/nom: 72b1705 | jnthn++ | src/core/Exception.pm:

[21:54] <dalek> rakudo/nom: Fix .resume on MoarVM (and hopefully JVM).

[21:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/72b1705b7f

[21:54] <jnthn> FROGGS: ^^, but I suspect it wnats a test :)

[21:54] <TimToady> that's why we give phasers uppercase names, to indicate they're not part of the normal execution, but get invoked at odd times

[21:55] <btyler> segomos_: with -t > 1?

[21:55] <FROGGS> p: say Exception.new.resumable

[21:55] <camelia> rakudo-parrot 87333c: OUTPUT«This type does not support associative operations␤  in method resumable at gen/parrot/CORE.setting:11332␤  in block  at /tmp/_3fZGrkXoR:1␤␤»

[21:55] <FROGGS> m: say Exception.new.resumable

[21:55] <camelia> rakudo-moar 87333c: OUTPUT«This type does not support associative operations␤  in method resumable at src/gen/m-CORE.setting:11401␤  in block  at /tmp/l9x6Ahy1oN:1␤␤»

[21:55] <FROGGS> j: say Exception.new.resumable

[21:55] <jnthn> FROGGS: The resumable thing wants a look still

[21:55] <segomos_> jnthn: any idea why the async connection.send would be planned but never executed?

[21:55] <jnthn> FROGGS: But .resume should now rok.

[21:55] <camelia> rakudo-jvm 87333c: OUTPUT«java.lang.RuntimeException: This type does not support associative operations␤  in method resumable at gen/jvm/CORE.setting:11342␤  in block  at /tmp/B5aYYwpzO0:1␤␤»

[21:56] <TimToady> note, for instance, that when CATCH is called, you might actually be executing a statement in an entirely different routine

[21:56] <segomos_> btyler: yea, with the default wrk settings

[21:56] <jnthn> segomos_: No, the code in CORE.setting looks OK

[21:57] <jnthn> segomos_: Does the data actually get written?

[21:58] <segomos_> no the promise is just hung in a planned state

[21:58] <TimToady> ChoHag: so, if you really wanted to go to the statement after the CATCH, you probably need to put a label there and goto it...but I don't recommend that

[21:58] <jnthn> Hmm, that'd suggest the actual writing never really takes place...

[21:58] <ChoHag> No I was mixed up.

[21:59] <TimToady> much better to just exit the block containing the CATCH normally

[21:59] <segomos_> i'll look at it with telnet, one sec

[21:59] <TimToady> okay

[21:59] <ChoHag> I should have been paying attention to try blocks, not CATCH blocks.

[21:59] <lizmat> FROGGS: if I git pull and run Configure.pl for parrot, should it then get 6.5.0 or not?

[21:59] <FROGGS> lizmat: only if you pass --gen-parrot, and in case NQP_REVISION was bumped

[22:00] <lizmat> I guess we haven't bumped that yet, right?

[22:00] <TimToady> m: say "one"; { say "two"; CATCH { default {} }; die "oops" }; say "three"

[22:00] <camelia> rakudo-moar 87333c: OUTPUT«one␤two␤three␤»

[22:00] <FROGGS> lizmat: I guess not

[22:00] <TimToady> ^^^ illustration of what I mean, to those playing along at home

[22:01] <TimToady> don't really need a goto to get to the 'say "three"'

[22:02] <FROGGS> n: try { die "ohh"; say "well"; CATCH { default { .resume } } }

[22:02] <camelia> niecza v24-109-g48a8de3: ( no output )

[22:02] <dalek> rakudo/nom: de3cecc | (Elizabeth Mattijsen)++ | src/core/ (3 files):

[22:02] <dalek> rakudo/nom: Fix deprecations of $*OS/$*OSVER

[22:02] <dalek> rakudo/nom: 

[22:02] <dalek> rakudo/nom: Basically:

[22:02] <dalek> rakudo/nom: - expose Obsolete as a proper class

[22:02] <dalek> rakudo/nom: - make sure there are 'say' candidates for Obsolete:D: that do .gist

[22:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/de3cecc6da

[22:03] <Mouq> lizmat: Re: Deprecations and the say optimization: couldn't you... oh, you just did it :)

[22:03] <Mouq> lizmat++

[22:03] <psch> jnthn: can you help me make sense of this? https://gist.github.com/peschwa/863b4d839e0024388052

[22:04] <TimToady> r: try { die "ohh"; say "well"; CATCH { default { .resume } } }

[22:04] <dalek> roast: 1e909c2 | (David Warring [email@hidden.address] | integration/advent2011-day16.t:

[22:04] <dalek> roast: adding 2011 adventy day 16

[22:04] <dalek> roast: review: https://github.com/perl6/roast/commit/1e909c22d3

[22:04] <camelia> rakudo-moar 87333c: OUTPUT«This representation (VMException) does not support associative access␤  in method resume at src/gen/m-CORE.setting:11405␤  in block  at /tmp/tmpfile:1␤  in block  at /tmp/tmpfile:1␤␤»

[22:04] <camelia> ..rakudo-parrot 87333c: OUTPUT«well␤»

[22:04] <camelia> ..rakudo-jvm 87333c: OUTPUT«VMException representation does not implement at_key_boxed␤  in method resume at gen/jvm/CORE.setting:11346␤  in block  at /tmp/tmpfile:1␤  in block  at /tmp/tmpfile:1␤␤»

[22:04] <TimToady> oh, you just fixed that (hopefully)

[22:05] <jnthn> psch: Not really, especially as with exact same Moar version here it's fine :s

[22:06] <dalek> roast: 09ecc5e | (Tobias Leich)++ | S04-statements/try.t:

[22:06] <dalek> roast: add test for Exception.resume in CATCH

[22:06] <dalek> roast: review: https://github.com/perl6/roast/commit/09ecc5e87a

[22:06] <lizmat> testing NQP_REVISION bump on parrot now

[22:06] <psch> that's slightly terrifying; i guess i'll have to understand more of moar

[22:06] <FROGGS> jnthn: works on all backends^^

[22:06] <jnthn> FROGGS: \o/

[22:06] <jnthn> psch: Yeah, hard for me to know why it'd not work elsewhere

[22:07] <jnthn> psch: Maybe a run with ASAN or Valgrind will show something.

[22:07] <jnthn> 'night, #perl6

[22:08] <segomos_> night

[22:08] <lizmat> gnight jnthn 

[22:08] <psch> i'll look at valgrind tomorrow then i guess

[22:08] <psch> night jnthn++ & #perl

[22:08] <FROGGS> gnight jnthn 

[22:08] <FROGGS> gnight psch 

[22:08] <psch> s/$/6/

[22:08] <segomos_> m: ('jnthn' & 'perl6').say

[22:08] <camelia> rakudo-moar 87333c: OUTPUT«all(jnthn, perl6)␤»

[22:09] *** treehug8_ left
[22:09] *** psch left
[22:09] <segomos_> guessing that & doesn't do the bit comparison i thought 

[22:10] <FROGGS> +& would be for numeric stuff

[22:10] <FROGGS> and ~& for string

[22:11] <masak> m: say (0b11001100 +& 0b01100110).fmt("%b")

[22:11] <camelia> rakudo-moar 87333c: OUTPUT«1000100␤»

[22:11] <lue> although ~& really should just be for Bufs :P

[22:11] <lizmat> m: say 4 +& 7

[22:11] <camelia> rakudo-moar 87333c: OUTPUT«4␤»

[22:11] <lizmat> m: say 4 +| 7

[22:11] <camelia> rakudo-moar 87333c: OUTPUT«7␤»

[22:11] <masak> segomos_: +& does bit comparison.

[22:11] *** bluescreen10 left
[22:14] <masak> 'night, #perl6

[22:14] <lizmat> night masak 

[22:15] <brrt> 'night, #perl6

[22:15] *** brrt left
[22:17] *** carlin left
[22:18] *** _thou joined
[22:21] <timotimo> NtaiveCall is *still* giving deprecation messages in the tests

[22:21] <FROGGS> yes

[22:25] <dalek> rakudo/nom: 5aa3c3a | (Elizabeth Mattijsen)++ | t/spectest.data:

[22:25] <dalek> rakudo/nom: Add advent2011-day16 tests

[22:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5aa3c3a0af

[22:27] *** colomon left
[22:29] <dalek> rakudo/nom: 0c861ba | (Elizabeth Mattijsen)++ | tools/build/NQP_REVISION:

[22:29] <dalek> rakudo/nom: Bump NQP_REVISION to get parrot 6.5.0 (rurban++)

[22:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0c861ba039

[22:30] *** colomon joined
[22:34] *** spider-mario left
[22:37] *** woolfy left
[22:42] *** btyler left
[22:43] *** colomon left
[22:43] *** maelus is now known as nnunley

[22:47] *** xragnar is now known as Guest48157

[22:47] *** xragnar_ joined
[22:47] *** Guest48157 left
[22:47] *** xragnar_ is now known as xragnar

[22:48] *** colomon joined
[22:53] *** jnap left
[22:58] <Mouq> How do you disable optimizations in moar?

[22:58] *** woolfy joined
[22:58] <Mouq> It's giving me a huge WTF

[22:59] *** skids joined
[22:59] *** colomon left
[22:59] *** dwarring left
[23:01] <Mouq> It seems to be making "given $var { ... }" so that $var can chage outside of the given, but doesn't always change inside of it...

[23:01] <Mouq> *change

[23:01] <Mouq> I'll re make everything and see if the problem persists

[23:02] <FROGGS> MVM_SPESH_DISABLE=1 perl6-m ...

[23:02] <FROGGS> and: perl6-m --optimize=off ...

[23:02] <Mouq> FROGGS: Thanks :)

[23:02] <FROGGS> good luck :o)

[23:05] <Mouq> .oO( You know you need to optimize your script if Rakudo's build time is refreshing... )

[23:06] *** xenoterracide joined
[23:06] <Mouq> ( Though the change I'm working on should bring it down about 2.5 minutes if I can get it too work again without the bugs... )

[23:08] <Mouq> s/too/to

[23:08] <FROGGS> is that about rendering the docs?

[23:09] <Mouq> Yeah, takes about 7 minutes on the redesign branch atm

[23:10] *** donaldh left
[23:10] <FROGGS> :/

[23:11] <Mouq> I've been seperating out various parts of the process though, which increases the total run time but should make it easier to cache things between runs

[23:11] *** Pleiades` left
[23:15] *** silug joined
[23:16] *** Pleiades` joined
[23:20] *** jnap joined
[23:23] *** denis_boyun_ left
[23:24] *** denis_boyun_ joined
[23:30] <Mouq> Uggghhh. So, it's a recursive sub with `my sub`s inside of it, and whether or not it should've worked by spec, I got it to work by making all the important variables dynamic

[23:30] <FROGGS> ewww

[23:31] <Mouq> Maybe I'll golf it later, my head hurts too much though right now

[23:33] <Mouq> Looks like I fixed the original bug I was trying to hunt down with that code, at least :)

[23:34] <FROGGS> well, that is something :o)

[23:36] * lizmat needs some sleep&

[23:39] <Mouq> night lizmat 

[23:41] <dalek> doc/redesign: 877d74b | Mouq++ | / (2 files):

[23:41] <dalek> doc/redesign: Rewrite find-definition correctly

[23:41] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/877d74bc55

[23:45] *** Alina-malina left
[23:45] *** guru joined
[23:45] *** Alina-malina joined
[23:45] *** guru is now known as Guest54432

[23:46] *** Guest54432 is now known as ajr_

[23:46] * timotimo is building 3xrakudo and 3xnqp for an up to date benchmark run to present in his slides on friday

[23:47] <timotimo> sadly, that will not have CGOTO=1 in the moars, though i think i can retrospectively put that in

[23:47] <timotimo> someone buildsystem-savvy could put detection into the configure script or makefile to turn CGOTO=1 on if we have a compiler that supports it ...

[23:48] <dalek> rakudo/nom: b430911 | (Tobias Leich)++ | src/core/Exception.pm:

[23:48] <dalek> rakudo/nom: fix exception printing by boxing line number

[23:48] <dalek> rakudo/nom: 

[23:48] <dalek> rakudo/nom: A BOOTInt sneaked into it before, so the exeption exploded at the

[23:48] <dalek> rakudo/nom: attempt of being printed, like when we 'use'd a module that had a

[23:48] <dalek> rakudo/nom: syntax error in it.

[23:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b4309113e8

[23:48] <timotimo> oh wow, nice catch!

[23:48] *** rindolf joined
[23:48] <FROGGS> timotimo: well, the error was quite disturbing :o)

[23:49] <FROGGS> gnight

[23:49] *** FROGGS left
[23:51] <dalek> roast/hoelzro/special-var-program: 8ed8c3b | (Rob Hoelz)++ | S (4 files):

[23:51] <dalek> roast/hoelzro/special-var-program: Use $*PROGRAM instead of $*PROGRAM_NAME

[23:51] <dalek> roast/hoelzro/special-var-program: 

[23:51] <dalek> roast/hoelzro/special-var-program: Bring roast up to speed with S28

[23:51] <dalek> roast/hoelzro/special-var-program: 

[23:51] <dalek> roast/hoelzro/special-var-program: The following files still need to be updated, but it's out of my level

[23:51] <dalek> roast/hoelzro/special-var-program: of expertise:

[23:51] <dalek> roast/hoelzro/special-var-program: 

[23:51] <dalek> roast/hoelzro/special-var-program: S02-names/pseudo.t

[23:51] <dalek> roast/hoelzro/special-var-program: S02-magicals/progname.t

[23:51] <dalek> roast/hoelzro/special-var-program: review: https://github.com/perl6/roast/commit/8ed8c3b9c6

[23:51] *** dmol left
[23:52] *** denis_boyun_ left
[23:55] *** SevenWolf left
