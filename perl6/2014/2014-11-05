[00:00] *** lizmat joined
[00:02] *** adu joined
[00:07] *** gfldex joined
[00:10] *** exixt_ is now known as exixt

[00:10] *** colomon left
[00:11] *** cognominal joined
[00:23] <timotimo> hrmpf. lots of fiddling with no good results :\

[00:34] *** thou left
[00:36] *** dayangkun joined
[00:36] *** huf joined
[00:53] *** colomon joined
[01:01] *** huf left
[01:02] *** sftp_ joined
[01:04] *** sftp left
[01:05] *** sftp_ is now known as sftp

[01:07] *** araujo joined
[01:09] *** raiph joined
[01:12] *** grondilu left
[01:16] *** gfldex left
[01:20] *** xenoterracide_ joined
[01:20] *** araujo left
[01:26] *** xenoterracide_ left
[01:27] *** xenoterracide joined
[01:29] *** vendethiel left
[01:30] *** lizmat left
[01:30] *** lizmat joined
[01:36] *** vendethiel joined
[01:37] *** mirjam joined
[01:41] *** Guest48053 left
[01:46] *** raiph left
[01:47] *** huf joined
[01:56] *** thou joined
[01:58] *** vendethiel left
[02:00] *** kaleem joined
[02:00] *** thou left
[02:02] *** mirjam left
[02:07] <raydiak> am I the only one who finds it odd that we numify w/.Numeric but stringify w/.Str, not .Stringy?

[02:08] <colomon> we just don't have much that's Stringy but not Str at the moment.

[02:08] <colomon> while we have lots that's Numeric but not Num

[02:09] <raydiak> I figured it was something like that, it just seems asymettrical in a seemingly needless way

[02:11] <raydiak> I noticed the docs for Stringy mentioned a Cat class which doesn't exist...wonder what that used to be

[02:11] <colomon> it's not been yet

[02:12] <colomon> Cat is a lazy string

[02:12] <raydiak> ah, interesting

[02:13] <colomon> so (for instance) it might make more sense for slurp to return a Cat than a Str

[02:14] <colomon> but I think right now everyone is more interested in getting what we already have working well enough, if you know what I mean.

[02:14] <raydiak> yep...glad we don't *just* run around in circles of reinvention :)

[02:15] <colomon> ;)

[02:17] <colomon> I'm lazily interested in Cat because I've had to sometimes deal with 1 GB text files for work, and it seems like Cat combined with a parse that threw away the "string so far" after ratcheting would be ideal for that.

[02:18] <colomon> but right now Rakudo is still so slow that 1 GB files are kind of out of the question even with extremely clever handling, so I'm not worrying about it.

[02:21] <raydiak> that would be really slick and seamless though, compared to handling small parsable chunks at a time

[02:21] <raydiak> in most cases, laziness is transparent/automatic...why would we need a Cat class?

[02:26] *** vendethiel joined
[02:27] <colomon> to implement the transparent/automatic stuff

[02:28] <colomon> the idea, of course, is that if you're using a Stringy interface, what you write works with Str or Cat.

[02:29] <raydiak> I mean e.g. Lists can be lazy, but there's not like a List and a LazyList, it's just some private attrs and so forth that control whether/how much an instance is lazy

[02:29] <raydiak> (if I understand how it all works correctly)

[02:29] *** xinming left
[02:30] <colomon> huh

[02:30] <colomon> now I'm halfway to convincing myself that's a flaw in List.  ;)

[02:30] <raydiak> hah :)

[02:30] *** xinming joined
[02:31] <colomon> well, really that we could use a list-ish role that allows us to cleanly consume list-y things

[02:31] <colomon> might be that Iterable is that already.

[02:31] <colomon> I dunno.

[02:32] <colomon> anyway, no one has really explored Cat yet

[02:32] <colomon> and Stringy just sort of hangs around based on the notion that it might be a good abstraction someday.

[02:33] <raydiak> yeah I didn't really have a point, I just often learn new stuff with these meandering trains of thought

[02:36] *** raiph joined
[02:41] <colomon> nothing wrong with that in the least.  :)

[02:46] <raydiak> got any ideas or suggestions for math::symbolic other than the obviously missing peices?

[02:46] <raydiak> *pieces

[02:46] <dalek> roast: 9888da3 | (Rob Hoelz)++ | S10-packages/precompilation.t:

[02:46] <dalek> roast: Unfudge test for 122773 on MoarVM

[02:46] <dalek> roast: 

[02:46] <dalek> roast: It's passing now

[02:46] <dalek> roast: review: https://github.com/perl6/roast/commit/9888da34c7

[02:49] *** xenoterracide left
[02:50] *** xenoterracide joined
[02:56] <colomon> raydiak: does it work with panda yet?  :)

[02:56] <raydiak> colomon: um...yes? unless you know something I don't...

[02:56] <colomon> nope.  :(

[02:56] <colomon> resolve stage failed for Math::Symbolic: Project Math::Symbolic not found in the ecosystem

[02:57] <raydiak> do a 'panda update' recently?

[02:57] <colomon> 30 seconds ago

[02:57] <raydiak> weird it just worked for me earlier today

[02:57] <colomon> can you install it from panda?

[02:57] <raydiak> yep, just confirmed it still wfm

[02:58] <colomon> :\

[02:59] <raydiak> other modules install fine still?

[02:59] <colomon> yes

[03:00] <colomon> wonder if panda update is somehow broken on my machine?

[03:00] <raydiak> huh...other than running 'update', I'm kinda clueless right now

[03:01] <raydiak> oh look the github urls are broken

[03:01] <raydiak> https://raw2.github.com/raydiak/Math-Symbolic/master/META.info <-- 404

[03:02] *** kaleem left
[03:02] <raydiak> must not be affecting me b/c supposedly I ran update before they broke

[03:02] <raydiak> we've had stuff break b/c of github changing its urls or even their html before

[03:02] <colomon> can you run panda info Math::Symbolic and post the results?

[03:03] <colomon> errr… maybe you need to do a panda update and see if you still have Math::Symbolic ?

[03:03] <raydiak> Math::Symbolic

[03:03] <raydiak> Symbolic math for Perl 6

[03:03] <colomon> https://raw.githubusercontent.com/raydiak/Math-Symbolic/master/META.info works

[03:03] <raydiak> State: installed

[03:03] <colomon> for me

[03:03] <raydiak> Source-url: git://github.com/raydiak/Math-Symbolic.git

[03:03] <raydiak> Author: raydiak

[03:04] <raydiak> yes, but all the urls in the ecosystem use raw2.github.com 

[03:05] *** atta left
[03:05] *** atta joined
[03:05] * colomon just did panda install git://github.com/raydiak/Math-Symbolic.git and that seems to be working.  :)

[03:06] <raydiak> every single line in https://github.com/perl6/ecosystem/blob/master/META.list is currently a 404 :P

[03:06] *** grettis left
[03:12] *** Mso150 joined
[03:14] *** chenryn joined
[03:22] <raydiak> remember that day we went through this b/c panda wasn't handling redirects or something? https://github.com/perl6/ecosystem/commit/f4865e52fc2243de6dec0a11189ee22650d17810

[03:23] * raydiak goes to s:g/// it again

[03:25] <dalek> ecosystem: 7ff21ca | raydiak++ | META.list:

[03:25] <dalek> ecosystem: Update github URLs (again)

[03:25] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/7ff21ca9c7

[03:25] <raydiak> there, now if I didn't break the whole world, I fixed it :)

[03:34] <colomon> :)

[03:44] *** thou joined
[03:46] *** raiph left
[03:49] *** thou left
[03:54] *** Mso150 left
[04:01] *** rmgk is now known as Guest15015

[04:01] *** rmgk_ joined
[04:01] *** Guest15015 left
[04:01] *** rmgk_ is now known as rmgk

[04:05] <dalek> modules.perl6.org: 8d8a68c | raydiak++ | web/build-project-list.pl:

[04:05] <dalek> modules.perl6.org: Update github URL (again)

[04:05] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/8d8a68cd18

[04:20] *** BenGoldberg left
[04:31] *** dayangkun left
[04:41] *** slavik joined
[04:44] *** tardisx` is now known as TardisX

[05:10] *** adu left
[05:13] *** chenryn left
[05:16] *** xenoterracide left
[05:32] *** thou joined
[05:35] *** chenryn joined
[05:37] *** thou left
[05:40] *** kaare_ joined
[05:42] *** tinyblak left
[05:42] *** tinyblak joined
[05:43] *** tinyblak_ joined
[05:47] *** tinyblak left
[06:10] <dalek> ecosystem: 0b7644a | ugexe++ | META.list:

[06:10] <dalek> ecosystem: Update META.list

[06:10] <dalek> ecosystem: 

[06:10] <dalek> ecosystem: Text::Table::Simple

[06:10] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/0b7644a4d0

[06:24] *** kaleem joined
[06:30] *** virtualsue joined
[06:40] *** hagiri joined
[06:41] <raydiak> ugexe++

[06:47] *** hagiri left
[06:54] *** aborazmeh joined
[07:10] *** bowtie joined
[07:10] *** bowtie is now known as Guest25839

[07:14] *** Guest25839 left
[07:15] *** jfredett left
[07:18] *** FROGGS_ left
[07:20] *** thou joined
[07:22] *** aborazmeh left
[07:24] *** chenryn left
[07:25] *** thou left
[07:26] *** gfldex joined
[07:29] *** chenryn joined
[07:29] *** bowtie_ joined
[07:30] *** DelmoreTheDonkey joined
[07:30] <DelmoreTheDonkey> r: any(11,7,5)-all(1,3)

[07:30] <camelia> rakudo-{parrot,moar} 315ec6: ( no output )

[07:30] <DelmoreTheDonkey> r: say any(11,7,5)-all(1,3)

[07:30] <camelia> rakudo-{parrot,moar} 315ec6: OUTPUT«all(any(10, 6, 4), any(8, 4, 2))␤»

[07:31] <DelmoreTheDonkey> why is the output "all(any(10, 6, 4), any(8, 4, 2))"

[07:31] <DelmoreTheDonkey> I was expecting "any(all(10, 6, 4), all(8, 4, 2))"

[07:34] *** bowtie_ left
[07:39] <moritz> DelmoreTheDonkey: not saying that it's wrong, but why did you expect that?

[07:39] *** ptc_p6 joined
[07:48] *** FROGGS joined
[07:49] *** brrt joined
[07:54] <DelmoreTheDonkey>   If I take everything in B away from anything in A should I expect to have everything(all) or anything(any)?

[07:54] *** rindolf joined
[07:56] *** pecastro left
[07:57] <moritz> DelmoreTheDonkey: you're arguing as if junctions were sets

[07:57] <moritz> DelmoreTheDonkey: they aren't

[07:57] <moritz> junctions only make sense as matchers

[07:57] <DelmoreTheDonkey> ok. 

[07:57] <moritz> all(1, 3) means "a matcher that's true if the number I compare it to is both 1 and 3"

[07:58] <DelmoreTheDonkey> what current uses do we have for junctions of junctions?

[07:59] <moritz> for example   if   $filename ~~ any(none('README', 'LICENSE'), none(/^\./))

[07:59] <moritz> imagine you have several files that you want to filter out by junctions

[07:59] <moritz> and one matcher none('README', 'LICENSE'), and one matcher none(/^\./) for dotfiles

[08:00] <moritz> and then you want to test if a file is exluded by either of those

[08:01] <DelmoreTheDonkey> thanks

[08:04] <DelmoreTheDonkey> r: $filename = "README" ; if   $filename ~~ any(none('README', 'LICENSE'), none(/^\./)) { say "YES" }

[08:04] <camelia> rakudo-{parrot,moar} 315ec6: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Variable '$filename' is not declared␤at /tmp/tmpfile:1␤------> [32m$filename[33m⏏[31m = "README" ; if   $filename ~~ any(none[0m␤    expecting any of:␤        postfi…»

[08:04] *** bowtie joined
[08:04] <DelmoreTheDonkey> r: my $filename = "README" ; if   $filename ~~ any(none('README', 'LICENSE'), none(/^\./)) { say "YES" }

[08:05] <camelia> rakudo-{parrot,moar} 315ec6: OUTPUT«YES␤»

[08:05] *** bowtie is now known as Guest41269

[08:05] <DelmoreTheDonkey> r: my $filename = "COPYRIGHT" ; if   $filename ~~ any(none('README', 'LICENSE'), none(/^\./)) { say "YES" }

[08:05] <camelia> rakudo-{parrot,moar} 315ec6: OUTPUT«YES␤»

[08:06] <FROGGS> m: say "README" ~~ any(none('README', 'LICENSE'), none(/^\./))

[08:06] <camelia> rakudo-moar 315ec6: OUTPUT«True␤»

[08:06] <FROGGS> m: say ".git" ~~ any(none('README', 'LICENSE'), none(/^\./))

[08:06] <camelia> rakudo-moar 315ec6: OUTPUT«True␤»

[08:06] <FROGGS> well, that's always true...

[08:06] <moritz> m: say 'something else' ~~ any(none('README', 'LICENSE'), none(/^\./))

[08:06] <camelia> rakudo-moar 315ec6: OUTPUT«True␤»

[08:06] <FROGGS> m: say (".git" ~~ any(none('README', 'LICENSE'), none(/^\./))).perl

[08:06] <camelia> rakudo-moar 315ec6: OUTPUT«Bool::True␤»

[08:07] <moritz> huh

[08:07] <moritz> oh

[08:07] <raydiak> it's right

[08:07] <moritz> it must be all()

[08:07] <FROGGS> any of them is always true :o)

[08:07] <FROGGS> m: say (".git" ~~ all(none('README', 'LICENSE'), none(/^\./))).perl

[08:07] <camelia> rakudo-moar 315ec6: OUTPUT«Bool::False␤»

[08:07] <moritz> m: say 'something else' ~~ all(none('README', 'LICENSE'), none(/^\./))

[08:07] <camelia> rakudo-moar 315ec6: OUTPUT«True␤»

[08:07] <moritz> m: say '.git' ~~ all(none('README', 'LICENSE'), none(/^\./))

[08:07] <camelia> rakudo-moar 315ec6: OUTPUT«False␤»

[08:07] <moritz> so the all() check tells if you something isn't ignored

[08:08] <moritz> and this, ladies and gentlemen, is why it's probably best not to use nested junctions :-)

[08:09] <FROGGS> moritz: well, it makes sense in case the none() parts are in variables

[08:09] *** Guest41269 left
[08:09] <moritz> possibly

[08:09] <FROGGS> so you keep an array of junctions that specify what should be ignored, and push to that array depending on the platform you are running on or so

[08:09] <moritz> actually

[08:10] <moritz> the junctions specify what to *not* ignore in my example

[08:10] <moritz> which is why we need all(), not any()

[08:10] <FROGGS> or that

[08:11] <moritz> if specify what to ignore, you use any() junctions, and then again any() junctions to combine them

[08:11] <moritz> which is a lot more intuitive, IMHO

[08:11] <moritz> and less spectacular from a "nested junctions" POV, because any(a, any(b, c)) is equivalent to any(a, b, c)

[08:15] *** bowtie_ joined
[08:16] *** rindolf left
[08:18] *** tinyblak_ left
[08:18] *** tinyblak joined
[08:20] *** darutoko joined
[08:28] *** daxim left
[08:30] *** rindolf joined
[08:32] *** gfldex left
[08:34] *** bowtie_ left
[08:40] *** telex left
[08:40] *** bowtie_ joined
[08:40] *** telex joined
[08:44] *** molaf__ joined
[08:48] *** molaf_ left
[08:48] *** sqirrel__ joined
[08:48] *** bowtie_ left
[08:57] *** Mso150 joined
[09:00] *** tinyblak_ joined
[09:01] *** skarn left
[09:03] *** bowtie joined
[09:03] *** bowtie is now known as Guest41562

[09:04] *** tinyblak left
[09:09] *** ghostlines joined
[09:13] *** kjs_ joined
[09:23] *** pdcawley left
[09:24] *** pdcawley joined
[09:25] *** jack_rabbit left
[09:26] *** jack_rabbit joined
[09:26] *** tinyblak_ left
[09:27] *** tinyblak joined
[09:29] *** skarn joined
[09:33] *** chenryn left
[09:40] *** grondilu joined
[09:40] <grondilu> hello, if someone wants to help writing a C parser:  https://github.com/grondilu/C

[09:42] *** jack_rabbit left
[09:42] *** kjs_ left
[09:43] *** jack_rabbit joined
[09:43] <FROGGS> grondilu: I've seen a (huge) C grammar written in Perl 6 already

[09:44] <grondilu> ok

[09:44] <grondilu> where is it?

[09:44] <FROGGS> I am already searching for it

[09:45] *** sqirrel__ left
[09:46] *** dakkar joined
[09:48] <FROGGS> grondilu: http://irclog.perlgeek.de/perl6/2013-03-29#i_6643290

[09:50] <grondilu> ok thanks

[09:58] *** pecastro joined
[09:59] <brrt> grondilu: this because of the c4 thingy?

[09:59] *** fhelmberger joined
[10:00] *** bjz_ joined
[10:00] *** bjz left
[10:00] <FROGGS> c4?

[10:01] *** vike left
[10:03] <brrt> https://github.com/rswier/c4/blob/master/c4.c

[10:04] *** vike joined
[10:04] <FROGGS> interesting

[10:07] *** MalliParitala joined
[10:08] <MalliParitala> Hello

[10:09] <MalliParitala> I want to help Perl6

[10:09] <FROGGS> hi MalliParitala 

[10:10] <MalliParitala> Hello FROGGS

[10:10] <peteretep> MalliParitala: Great! Just send over your CC details, and we'll get started

[10:10] *** thou joined
[10:10] <brrt> hi MalliParitala, what do you want to do? there is a lot to do :-)

[10:11] <brrt> one of the best ways to help perl6 is to start using it, and report to us any issues that you find

[10:11] <MalliParitala> I know Perl5

[10:11] <MalliParitala> i can code in Perl5

[10:12] <MalliParitala> Ok

[10:12] *** jack_rabbit left
[10:12] <FROGGS> MalliParitala: you could for example port a module from Perl 5 to Perl 6, if you want to...

[10:12] <MalliParitala> Okay.

[10:13] <MalliParitala> Do we have list of modules need to be ported to Perl6?

[10:15] *** thou left
[10:15] <brrt> well, anything you like, really

[10:15] <brrt> we have modules.perl6.org  

[10:15] <brrt> http://modules.perl6.org

[10:15] <brrt> if you find that any perl5 module you frequently use is not represented there, you can try and port it

[10:16] <MalliParitala> Cool.

[10:16] <brrt> of course, we already have a list like that: https://github.com/perl6/perl6-most-wanted/blob/master/most-wanted/modules.md

[10:16] <MalliParitala> Thanks brrt

[10:16] *** chenryn joined
[10:17] <brrt> you're welcome :-) i hope you can find something to your liking 

[10:17] <MalliParitala> Do i need to provide my mail ID so that i can get updates about perl6 work?

[10:17] *** kjs_ joined
[10:17] <brrt> no, you can subscribe to one of the mailing lists

[10:17] <MalliParitala> Okay.

[10:18] <brrt> http://perl6.org/community/ this page gives you all the information you might want

[10:18] <brrt> or perhaps, are likely to want

[10:18] <MalliParitala> I will start using Perl6 first. Thanks much.

[10:18] *** kjs_ left
[10:18] <brrt> no problem. please keep us updated with anything you might encounter

[10:22] *** exixt is now known as exixt_

[10:22] *** vike left
[10:23] *** daxim joined
[10:29] *** kjs_ joined
[10:30] *** vike joined
[10:31] <grondilu> brrt: not really.  More that I'd like a C parser to automate X11 bindings

[10:32] <brrt> i see

[10:32] <brrt> :-)

[10:33] *** jack_rabbit joined
[10:41] <dalek> specs: edb565d | (Elizabeth Mattijsen)++ | S32-setting-library/IO.pod:

[10:41] <dalek> specs: Revert "Spec dir() default exclusion to all /^\./"

[10:41] <dalek> specs: 

[10:41] <dalek> specs: It appears the consensus is to just ignore . and ..

[10:41] <dalek> specs: 

[10:41] <dalek> specs: This reverts commit 91c184fbb816b642b9ac724db65352e6cfd2eb3a.

[10:41] <dalek> specs: review: https://github.com/perl6/specs/commit/edb565d38f

[10:42] <dalek> rakudo/nom: 1ad58fc | (Elizabeth Mattijsen)++ | src/core/IO.pm:

[10:42] <dalek> rakudo/nom: Revert "dir primitives exclude anything starting with ".""

[10:42] <dalek> rakudo/nom: 

[10:42] <dalek> rakudo/nom: It appears the consensus is to just ignore '.' and '..' by default

[10:42] <dalek> rakudo/nom: 

[10:42] <dalek> rakudo/nom: This reverts commit f7c7b06a98fdd89ab8686ed52d4d9746fb0b0189.

[10:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1ad58fceeb

[10:42] <grondilu> FROGGS: added a comment on your fork:  https://gist.github.com/FROGGS/5268178#comment-1331609

[10:43] *** chenryn left
[10:43] <grondilu> meh nevermind.  I removed it.  I suspect it was dumb.

[10:44] *** araujo joined
[10:44] *** araujo left
[10:44] *** araujo joined
[10:48] *** raiph joined
[10:55] <grondilu> still, a line like 'token integer-constant:radix(8) { <octal-constant> <integer-suffix>* }' does not compile for me.  Gets 'Colon pair value '8' too complex to use in name'

[10:56] <grondilu> not sure about this :radix() thing means.

[10:56] <grondilu> std: grammar { token integer-constant:radix(8) { <octal-constant>  <integer-suffix>* }

[10:56] <camelia> std 14ad63b: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse block at /tmp/bX0PtG7jJe line 1:␤------> [32mgrammar [33m⏏[31m{ token integer-constant:radix(8) { <oct[0m␤Couldn't find final '}'; gave up at /tmp/bX0PtG7jJe line 1 (EOF):␤------> [32m { <octal-constan…»

[10:56] <grondilu> std: grammar { token integer-constant:radix(8) { .* } }

[10:56] <camelia> std 14ad63b: OUTPUT«ok 00:00 141m␤»

[10:56] *** jack_rabbit left
[11:00] <FROGGS> m: grammar { token integer-constant:radix<8> { .* } }

[11:00] <camelia> rakudo-moar 315ec6: ( no output )

[11:01] <FROGGS> you can use that, it is the same

[11:01] <FROGGS> m: grammar { token integer-constant:radix('8') { .* } }

[11:01] <camelia> rakudo-moar 315ec6: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/io14Bn_gyv␤Colon pair value ''8'' too complex to use in name␤at /tmp/io14Bn_gyv:1␤------> [32mmmar { token integer-constant:radix('8')[33m⏏[31m { .* } }[0m␤»

[11:01] <FROGGS> m: grammar { token integer-constant:radix['8'] { .* } }

[11:01] <camelia> rakudo-moar 315ec6: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/qzLW5hSsJb␤Colon pair value ''8'' too complex to use in name␤at /tmp/qzLW5hSsJb:1␤------> [32mmmar { token integer-constant:radix['8'][33m⏏[31m { .* } }[0m␤»

[11:01] <FROGGS> m: grammar { token integer-constant:radix[8] { .* } }

[11:01] <camelia> rakudo-moar 315ec6: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/XbYIEfq_XH␤Colon pair value '8' too complex to use in name␤at /tmp/XbYIEfq_XH:1␤------> [32mrammar { token integer-constant:radix[8][33m⏏[31m { .* } }[0m␤»

[11:01] <FROGGS> hmmm

[11:01] <dalek> specs: 1d0834c | (Elizabeth Mattijsen)++ | S16-io.pod:

[11:01] <dalek> specs: Remove :test parameter from chdir/tmpdir/homedir

[11:01] <dalek> specs: review: https://github.com/perl6/specs/commit/1d0834c784

[11:04] *** virtualsue left
[11:04] *** Mso150 left
[11:05] *** Mso150 joined
[11:05] *** esaym153 left
[11:06] *** chenryn joined
[11:06] *** MalliParitala left
[11:09] *** Grrrr left
[11:12] *** esaym153 joined
[11:13] *** pdcawley left
[11:13] *** Grrrr joined
[11:18] <dalek> nqp: 92f6783 | (Tobias Leich)++ | tools/build/MOAR_REVISION:

[11:18] <dalek> nqp: bump moar rev (#122896)

[11:18] <dalek> nqp: review: https://github.com/perl6/nqp/commit/92f6783d65

[11:18] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122896

[11:18] <dalek> rakudo/nom: d2e301e | (Tobias Leich)++ | tools/build/NQP_REVISION:

[11:18] <dalek> rakudo/nom: bump nqp/moar rev (#122896)

[11:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d2e301e24a

[11:18] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122896

[11:22] *** psch joined
[11:22] <psch> hi #perl6 o/

[11:22] * lizmat pulls, builds and starts a spectest

[11:23] <lizmat> psch \o

[11:23] <psch> FROGGS: there's a ticket for the colon pair thingy you fiddled with in the clog, but RT is really slow for me atm

[11:23] <psch> lizmat o/

[11:23] <FROGGS> psch: I remember solving a bug in that area...

[11:25] <psch> FROGGS: 50c765 has you putting in the exception

[11:26] <psch> which was about 2 months ago

[11:26] <FROGGS> yeah

[11:26] <psch> i *think* the ticket was noticeably older, let me see if i can convince my phone to let me search on RT... :)

[11:28] *** sqirrel__ joined
[11:30] *** grondilu left
[11:30] <dalek> roast: 11575cc | (Tobias Leich)++ | packages/Test/Util.pm:

[11:30] <dalek> roast: prefer $*EXECUTABLE over $*EXECUTABLE_NAME

[11:30] <dalek> roast: 

[11:30] <dalek> roast: ...since $*EXECUTABLE gives us an absolute path to the perl6 binary, rather than just "perl6".

[11:30] <dalek> roast: review: https://github.com/perl6/roast/commit/11575cc0ed

[11:31] *** denis_boyun_ joined
[11:33] *** Mso150 left
[11:35] *** brrt left
[11:39] <psch> m: (:a['b']).WHAT.say

[11:39] <camelia> rakudo-moar 315ec6: OUTPUT«(Pair)␤»

[11:39] <psch> m: (:a['b']).say

[11:39] <camelia> rakudo-moar 315ec6: OUTPUT«"a" => ["b"]␤»

[11:39] <psch> m: (:a('b')).say

[11:39] <camelia> rakudo-moar 315ec6: OUTPUT«"a" => "b"␤»

[11:39] <psch> those semantics aren't quite right, are they?

[11:40] <psch> specifically, the first one shouldn't have an array as value

[11:41] <psch> oh, it should

[11:41] <psch> S02:3652

[11:41] <synopsebot> Link: http://perlcabal.org/syn/S02.html#line_3652

[11:41] <psch> (assuming lines in vim translate correctly...)

[11:42] <psch> nope, they don't

[11:43] *** kaleem left
[11:47] *** bcode left
[11:48] *** psch left
[11:49] *** azawawi joined
[11:49] <azawawi> hi #perl6

[11:49] <azawawi> im getting "resolve stage failed for $module-name" from panda installs. Is there a problem with latest panda?

[11:50] *** psch joined
[11:50] *** bcode joined
[11:50] *** virtualsue joined
[11:50] <azawawi> panda install Farabi6

[11:50] <azawawi> resolve stage failed for Farabi6: Project Farabi6 not found in the ecosystem

[11:52] <azawawi> latest github panda, and rebootstrapped...

[11:52] <colomon> according to my smoke test run, there's nothing in the ecosystem at all.  though that was as of 5 hours ago.

[11:52] <lizmat> FROGGS: looks like the spectest is significantly slower after this update

[11:52] <lizmat> before: Files=930, Tests=33836, 172 wallclock secs ( 8.98 usr  3.36 sys + 1041.29 cusr 163.08 csys = 1216.71 CPU)

[11:52] <azawawi> i guess it was the latest rakudo when i pulled it

[11:53] <lizmat> after: Files=930, Tests=34048, 208 wallclock secs ( 8.74 usr  3.21 sys + 1276.04 cusr 184.99 csys = 1472.98 CPU)

[11:53] * azawawi rebuilds rakudo

[11:54] <azawawi> the first thing i dont when i log on to play with perl6 is a 'cd ~/rakudo && git pull && (git log | less)' :)

[11:54] <lizmat> looks like bare startup time almost *doubled*

[11:54] <lizmat> before ~ .21 sec, now ~ .34 sec

[11:54] <lizmat> and I'm still seeing flappy tests :-(

[11:56] <azawawi> hmmm projects.json has only []

[11:56] <lizmat> (ok, more like 1.6x slower)

[11:57] <azawawi> after a perl6 rebootstrap, projects.json has only '[]'

[11:57] <azawawi> panda regression?

[11:57] <lizmat> feels to me this version of moar is more like using more and giving less  :-(

[11:57] <lizmat> github URL change wtf ?

[11:58] *** thou joined
[11:58] *** tinyblak_ joined
[11:59] *** denis_boyun_ left
[12:01] *** denis_boyun_ joined
[12:02] *** woolfy left
[12:02] *** woolfy1 joined
[12:03] *** thou left
[12:03] *** tinyblak left
[12:11] *** sqirrel__ left
[12:15] *** darutoko- joined
[12:15] <azawawi> has anyone tried latest panda with latest rakudo?

[12:18] *** darutoko left
[12:23] <FROGGS> lizmat: the consensus was to deprecate $*EXECUTABLE, so, they way forward might be to speedup $*EXECUTABLE if that is possible

[12:23] <FROGGS> lizmat: in what areas are the flapping tests?

[12:23] *** chenryn left
[12:27] <lizmat> azawawi: what are you seeing ?

[12:28] <lizmat> fwiw, a rebootstrap worked for me just now

[12:28] <azawawi> really?

[12:28] <azawawi> sorry i was away a bit

[12:28] * lizmat as well

[12:29] <azawawi> same problem as http://irclog.perlgeek.de/perl6/2014-11-05#i_9612344

[12:29] * lizmat needs to get some other things done before travelling to London for LPW this weekend

[12:30] <FROGGS> problem is that http://feather.perl6.nl:3000/projects.json is empty (and empty json array)

[12:32] <FROGGS> tadzik: ping

[12:33] <FROGGS> tadzik: the service here needs to be adjusted: http://feather.perl6.nl:3000/projects.json you need to apply a patch similar to https://github.com/perl6/modules.perl6.org/commit/8d8a68cd18

[12:33] <azawawi> alright i caught one... FROGGS++

[12:33] * azawawi fishes for other bugs :)

[12:35] <lizmat> the pond is still pretty full  :-)

[12:35] <azawawi> which is good, right? :)

[12:36] *** kaleem joined
[12:38] <azawawi> panda install rakudo # that would be fun :)

[12:39] <azawawi> i was working on integrating perl6-debug-m with farabi6 to provide a gui

[12:40] <azawawi> so far im near its completion... stepping in/out, ...etc

[12:40] <azawawi> ironing some bugs here & there

[12:45] <lizmat> FROGGS: flapping tests are all over the map

[12:46] <lizmat> FROGGS: not sure what you mean with "the consensus was to deprecate $*EXECUTABLE, so, they way forward might be to speedup $*EXECUTABLE if that is possible"

[12:46] <FROGGS> lizmat: I have not a single failing test

[12:46] * lizmat guesses you're not on OSX

[12:47] <FROGGS> lizmat: we want to replace $*EXECUTABLE_NAME by $*EXECUTABLE

[12:47] <lizmat> aha   :-)

[12:47] <FROGGS> sorry :o)

[12:47] <FROGGS> correct, I'm using ubuntu

[12:48] <lizmat> on JVM and Moar, EXECUTABLE depends on $*VM, and that's the costly bit, I guess

[12:49] <lizmat> EXECUTABLE creation is not particularly expensive

[12:49] <FROGGS> tadzik: looks like your modules/updatelist.pl needs to run under PERL_LWP_SSL_VERIFY_HOSTNAME=0

[12:52] *** woolfy1 left
[12:54] <azawawi> was rakudo star 2014.10 released or not?

[12:55] <lizmat> not that I'm aware of

[12:55] <azawawi> it is strange that we deprecate something in 2014.10 and then we dont release it to the public :)

[13:01] <lizmat> azawawi: afaik we only deprecate rakudo compiler versions... not rakudo star

[13:08] *** woolfy joined
[13:11] <moritz> azawawi: though if you want to make a star release for 2014.10, feel free!

[13:12] *** tinyblak_ left
[13:12] *** daxim left
[13:12] *** tinyblak joined
[13:15] *** guru joined
[13:16] *** guru is now known as Guest40587

[13:16] *** Guest40587 is now known as ajr_

[13:17] *** Guest41562 left
[13:26] *** bowtie joined
[13:26] *** bowtie is now known as Guest90992

[13:28] <azawawi> moritz: :)

[13:29] * azawawi is waiting for his home AMD PC to be returned from the repair shop today :)

[13:31] *** Guest90992 left
[13:35] <[Coke]> m: say (10,6,4 X- 8,4,2).sort.uniq

[13:35] <camelia> rakudo-moar 315ec6: OUTPUT«-4 -2 0 2 4 6 8␤»

[13:42] *** lucas__ joined
[13:44] *** raiph left
[13:44] <lucas__> hello #perl6

[13:45] <lizmat> lucas__ o/

[13:45] <PerlJam> greetings lucas__ 

[13:45] <lucas__> thanks!

[13:46] *** thou joined
[13:47] <dalek> specs: 4e09ab8 | (Elizabeth Mattijsen)++ | S16-io.pod:

[13:47] <dalek> specs: Some more :test eradication

[13:47] <dalek> specs: review: https://github.com/perl6/specs/commit/4e09ab808a

[13:47] <lucas__> So, following the conventions of traditional Unix and Perl 5 manpages, would it be interesting to move AUTHORS sections to the very end of the file, instead of leaving them at the very beginning?

[13:48] <lucas__> Having said that, I have to say I fully admire the hard work of the original authors. I hope this is not disrespectful.

[13:49] <lucas__> But I think nowadays, the specs are community-property, rather than the work of sole-authors like it was "In The Beginning".

[13:50] <lizmat> I guess the AUTHORS section also predates anything like "git blame"  :-)

[13:51] *** thou left
[13:51] *** FROGGS left
[13:53] *** kaleem left
[13:53] <lizmat> or automatic author fetching from the git blobs

[13:56] *** tinyblak_ joined
[13:56] *** jfredett joined
[13:59] *** azawawi left
[14:00] *** tinyblak left
[14:00] *** bowtie_ joined
[14:01] *** raiph joined
[14:04] *** bowtie_ left
[14:09] <[Coke]> moar nojit - 10 failing tests. :(

[14:14] <colomon> m: say FatRat.new(1, 10*1000).floor.perl

[14:14] <camelia> rakudo-moar 315ec6: OUTPUT«0␤»

[14:14] <colomon> m: say FatRat.new(10*1000,3).floor.perl

[14:14] <camelia> rakudo-moar 315ec6: OUTPUT«3333␤»

[14:15] *** daxim joined
[14:16] *** bowtie_ joined
[14:20] *** aborazmeh joined
[14:20] *** bowtie_ left
[14:21] *** notfix is now known as xfix

[14:24] <[Coke]> moar jit failing a different 10 tests. no confidence it's fixed, though.

[14:25] <arnsholt> r-m: my $a = 1; { say $a; my $a = 2; say $a; };

[14:25] <camelia> rakudo-moar 315ec6: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/X8vZFxRGjM␤Lexical symbol '$a' is already bound to an outer symbol;␤the implicit outer binding must be rewritten as OUTER::<$a>␤before you can unambiguously declare a new '$a' in this scope␤…»

[14:26] <arnsholt> Aha. That's sensible

[14:30] *** Guest95483 joined
[14:36] <psch> m: 6; $a = 1; { say $a; my $a = 2; say $a }

[14:36] <camelia> rakudo-moar 315ec6: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/CnCEdQ9PNl␤Lexical symbol '$a' is already bound to an outer symbol;␤the implicit outer binding must be rewritten as OUTER::<$a>␤before you can unambiguously declare a new '$a' in this scope␤…»

[14:36] <psch> m: 6; $a = 1; say $a

[14:36] <camelia> rakudo-moar 315ec6: OUTPUT«1␤»

[14:36] *** muraiki left
[14:36] *** Guest95483 left
[14:41] *** JimmyZ joined
[14:41] <lucas__> Do I have an "OK" from someone for moving the AUTHORS section to the end? I think that would be an easy change. Then, I would submit a pull request. I think ownership discourages contributions. I'm just trying to clean up the specs a little bit. This change would unclutter the top of the documents for more useful information like introduction/overview/summary of the text. I won't change anything in the section, just move it to the end. Would such change be ac

[14:43] *** bowtie_ joined
[14:43] <lucas__> And... what about my current spec pull request, any opinions yet?

[14:44] <moritz> lucas__: truncated after "Would such change be"

[14:44] <moritz> lucas__: and yes, you have my +1

[14:44] *** muraiki joined
[14:44] <lucas__> ... Would such change be accepted or be wasted effort? Should I just do it to see how things look? Anyway, it should be easy to hit the close button on my pull request, right?

[14:45] <lucas__> I didn't knew this thing truncates... thanks.

[14:45] <moritz> lucas__: re your pull request, IMHO the feedback infomration belongs to the index page, perlcabal.org/syn/

[14:47] <moritz> lucas__: that page is currentl in the perl6/mu repo, and IMHO should go into the perl6/specs repo, but that requires updating cron-jobs too

[14:47] *** bowtie_ left
[14:48] <dalek> specs: 487e7d4 | (Lucas Buchala)++ | S (12 files):

[14:48] <dalek> specs: Move source/repository information to S01

[14:48] <dalek> specs: review: https://github.com/perl6/specs/commit/487e7d48c3

[14:48] <dalek> specs: 8f5f83a | (Lucas Buchala)++ | S (12 files):

[14:48] <dalek> specs: Move contributions/additions information to S01

[14:48] <dalek> specs: review: https://github.com/perl6/specs/commit/8f5f83a66b

[14:48] <dalek> specs: d7bd63b | moritz++ | S (15 files):

[14:48] <dalek> specs: Merge pull request #72 from lucasbuchala/move-notes

[14:48] <dalek> specs: 

[14:48] <dalek> specs: Move notes around

[14:48] <dalek> specs: review: https://github.com/perl6/specs/commit/d7bd63bce5

[14:48] <moritz> lucas__: but they are an improvement nonetheless, so I'm merging them

[14:48] <lucas__> moritz: Thanks, again.

[14:49] *** ClarusCogitatio left
[14:50] *** ClarusCogitatio joined
[14:51] <moritz> lucas__: also you should have an invitation for a commi bit already

[14:51] *** BooK left
[14:52] *** abraxxa left
[14:53] <lucas__> moritz: Oh, that github organization thing? :D I didn't know it was a commit bit.

[14:53] *** ghostlines left
[14:53] *** ghostlines joined
[14:54] *** bowtie_ joined
[14:54] <moritz> lucas__: it's actually a whole bunch of commit bits (there are many repos in there)

[14:54] <colomon> did we ever get an "is symmetric" or "is commutative"  trait?

[14:56] <psch> ISTR not being able to commit to perl6/nqp even with belonging to the perl6 org.  i think that makes sense, because nqp probably also wants the CLA?

[14:56] <moritz> psch: it simply has separate teams

[14:56] <moritz> psch: if you need an nqp comit bit, let me know

[14:56] <moritz> psch: (and tell me your github ID)

[14:58] *** bowtie_ left
[15:01] <psch> moritz: i don't usually need it, but i'll speak up again in case it looks like i'm doing more in nqp. thanks

[15:02] *** adu joined
[15:04] *** thou joined
[15:04] <psch> fwiw, what i did in nqp up to now was just a failed refactoring attempt and a few overloadable methods for typed exceptions, which is quick enough to review

[15:05] <psch> in contrast to e.g. the rakudo cliparser or tr/// branches

[15:06] *** chenryn joined
[15:06] *** chenryn left
[15:07] * psch .oO( although removing the neccessity of reviewing frees up time for others, and we do have at least reasonable test coverage... )

[15:07] *** bowtie_ joined
[15:09] *** aborazmeh left
[15:11] *** Ven joined
[15:12] <Ven> o/, #perl6.

[15:12] <psch> Ven \o

[15:12] * PerlJam just saw http://xkcd.com/1443/

[15:14] *** bowtie_ left
[15:16] *** guru joined
[15:16] *** ajr_ left
[15:17] *** guru is now known as Guest70470

[15:17] *** Guest70470 is now known as ajr_

[15:22] *** dj_goku_ joined
[15:22] *** Gruber joined
[15:23] *** ClarusCogitatio left
[15:24] *** ClarusCogitatio joined
[15:24] *** dj_goku left
[15:24] *** Grrrr left
[15:24] *** TimToady left
[15:25] *** TimToady joined
[15:25] *** FROGGS joined
[15:28] <FROGGS> tadzik: ping

[15:29] *** ClarusCogitatio left
[15:32] *** ClarusCogitatio joined
[15:33] *** tinyblak_ left
[15:33] *** tinyblak joined
[15:37] <psch> huh.  so for 'sub infix:["a"] { }' World::colonpair_nibble_to_str gets an NQPMatch from the grammar, but NQPMu from the actions...?

[15:43] <tadzik> FROGGS: pong

[15:43] <tadzik> catching up with backlog :)

[15:43] *** adu left
[15:45] <FROGGS> tadzik: please read my last lines :o)

[15:46] <FROGGS> and rerun the updatelist.pl under that env var

[15:46] *** ClarusCogitatio left
[15:47] <timotimo> o/

[15:47] <timotimo> i'm glad that it wasn't my fault the ecosystem suddenly broke

[15:47] <tadzik> oh

[15:47] <tadzik> the URL is actually correct

[15:48] <tadzik> but the env var is necessary, yes

[15:48] *** JimmyZ left
[15:49] <FROGGS> tadzik: sorry that I had to a foot in you home directory :o)

[15:49] <timotimo> disabling https certificate validation sounds like a huge smell ...

[15:49] <tadzik> FROGGS: no worries :)

[15:49] <tadzik> timotimo: yeah, my thoughts exactly

[15:49] <FROGGS> tadzik: I did not look at your p0rn, promise :P

[15:49] <timotimo> what's wrong? is their certificate self-signed? or expired?

[15:49] *** ClarusCogitatio joined
[15:50] <FROGGS> we can install their cert, that should also do I guess

[15:50] <timotimo> i would prefer that, but i don't know how to handle certificate storage and stuff ...

[15:50] <dalek> rakudo/nom: 0f77ebe | (Elizabeth Mattijsen)++ | src/core/IO.pm:

[15:50] <dalek> rakudo/nom: Introduce CHANGE-DIRECTORY primitive

[15:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0f77ebe1ca

[15:50] <dalek> rakudo/nom: 2b57f3f | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[15:50] <dalek> rakudo/nom: Eradicate :test from chdir/indir/tmpdir/homedir

[15:50] <dalek> rakudo/nom: 

[15:50] <dalek> rakudo/nom: As per current consensus / spec

[15:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2b57f3f488

[15:51] <PerlJam> lizmat++ yay!

[15:51] <tadzik> github cert in my browser verifies perfectly well

[15:51] <FROGGS> tadzik: for me too

[15:51] *** tinyblak_ joined
[15:52] <tadzik> is our LWP too old on feather?

[15:52] *** zakharyas joined
[15:52] <tadzik> and using some version of SSL that's not cool anymore?

[15:52] <tadzik> (so, any of them? :P)

[15:52] <FROGGS> ahh btw, depending on the perl 5 ssl module you use, it does not do cert verification at all

[15:53] *** sqirrel__ joined
[15:54] *** tinyblak left
[15:59] <tadzik> I'm using Perl from /usr/local/bin/perl, no local::lib as far as I can see

[15:59] <tadzik> so it's just using feather's system libraries

[16:00] <tadzik> I blame LWP, perhaps it's missing proper TLS support, lacking underlying libraries?

[16:01] <FROGGS> tadzik: do you explicitly use an ssl library before you use lwp?

[16:01] <tadzik> no

[16:01] <tadzik> should I? :)

[16:04] <FROGGS> I am... not sure right now

[16:05] *** atta left
[16:05] <FROGGS> maybe that helps? http://stackoverflow.com/questions/74358/how-can-i-get-lwp-to-validate-ssl-server-certificates

[16:05] <FROGGS> i.e. setting HTTPS_CA_DIR=/usr/share/ca-certificates/ (if that path exists)

[16:06] *** rindolf left
[16:06] *** telex left
[16:07] <FROGGS> no, that does not help

[16:08] *** telex joined
[16:08] <lucas__> Hi there. I've just finished moving authors downstairs. It's a spec pull request now. I hope it's correct.

[16:10] *** atta joined
[16:10] <[Tux]> Failed running perl Configure.pl --backends=moar --gen-moar at /pro/3gl/CPAN/rakudobrew/bin/rakudobrew line 25.

[16:11] *** ClarusCogitatio left
[16:11] <FROGGS> tadzik: I found it!

[16:12] <FROGGS> tadzik:  that works: HTTPS_CA_FILE=/etc/ssl/certs/ca-certificates.crt perl updatelist.pl

[16:12] <tadzik> \o/

[16:12] <FROGGS> so, set it in your script and you are done

[16:12] <tadzik> yeah, should work

[16:12] <FROGGS> tadzik: I tested it on that server :o)

[16:13] <[Tux]> rakudobrew 514 > rakudobrew build moar

[16:13] <[Tux]> Already up-to-date.

[16:13] <[Tux]> Your branch is up-to-date with 'origin/nom'.

[16:13] <[Tux]> make: *** No rule to make target 'm-clean', needed by 'clean'.  Stop.

[16:13] <[Tux]> Failed running make realclean at /pro/3gl/CPAN/rakudobrew/bin/rakudobrew line 25.

[16:13] *** kaleem joined
[16:13] <tadzik> yay, works :)

[16:13] <FROGGS> tadzik: please close https://github.com/perl6/ecosystem/issues/34 when the projects.json contains data :o)

[16:13] <FROGGS> [Tux]: is that error fatal?

[16:14] *** ClarusCogitatio joined
[16:14] <[Tux]> yes: and it happens on the system that was recently upgraded from i686 to x68_64

[16:14] <[Tux]> make distclean and/or git clean -dfx don't work

[16:15] *** Ven left
[16:15] <tadzik> FROGGS: huh, the frontend complains about Cwd.pm

[16:15] <tadzik> the lakc of it, that is

[16:15] <FROGGS> O.o

[16:15] <tadzik> restarted it, now it works :)

[16:15] <FROGGS> yeah, it does not complain in my shell

[16:16] <FROGGS> [Tux]: I nearly know nothing about rakudobrew, but the other guy here does :o)

[16:16] <tadzik> weird

[16:18] *** denis_boyun_ left
[16:18] *** bowtie joined
[16:19] *** bowtie is now known as Guest48172

[16:20] *** lucas__ left
[16:24] *** tinyblak_ left
[16:24] *** cognominal left
[16:29] <tony-o> how would i represent this structure for nativecall?  http://msdn.microsoft.com/en-us/library/windows/desktop/aa383713%28v=vs.85%29.aspx

[16:29] * [Tux] starts from scratch …

[16:31] *** Guest48172 left
[16:32] <psch> m: sub infix:{a} { } # /o\

[16:32] <camelia> rakudo-moar 315ec6: OUTPUT«===SORRY!===␤Internal error: find_var_decl could not find $_␤»

[16:34] <dalek> cpandatesters.perl6.org: 53ca4a4 | (Tobias Leich)++ | / (2 files):

[16:34] <dalek> cpandatesters.perl6.org: implement client side caching via Etags

[16:34] <dalek> cpandatesters.perl6.org: review: https://github.com/perl6/cpandatesters.perl6.org/commit/53ca4a4f82

[16:34] <dalek> specs: 3d64f1a | (Lucas Buchala)++ | S (38 files):

[16:34] <dalek> specs: Move AUTHORS sections to end of file

[16:34] <dalek> specs: review: https://github.com/perl6/specs/commit/3d64f1a099

[16:34] <dalek> specs: 25d0973 | lizmat++ | S (38 files):

[16:34] <dalek> specs: Merge pull request #73 from lucasbuchala/move-authors

[16:34] <dalek> specs: 

[16:34] <dalek> specs: Move AUTHORS sections to end of file

[16:34] <dalek> specs: review: https://github.com/perl6/specs/commit/25d0973b3e

[16:35] <[Tux]> lizmat, feedback on speed for Text::CSV6

[16:35] <[Tux]> 		    i686      i686      x68_64

[16:35] <[Tux]>                     20141007  20141014  20141105

[16:35] <[Tux]> ------------------  -------- --------- ---------

[16:35] <[Tux]> Text::CSV::Easy_XS     0.022     0.021     0.037

[16:35] <[Tux]> Text::CSV::Easy_PP     0.018     0.022     0.028

[16:35] <[Tux]> Text::CSV_XS           0.038     0.039     0.046

[16:35] <[Tux]> Text::CSV_PP           0.651     0.535     0.533

[16:35] <[Tux]> Pegex::CSV             1.947     1.420     1.387

[16:35] <[Tux]> csv.pl                12.543     8.437     9.152

[16:35] <[Tux]> test.pl              256.985   201.621    71.847

[16:35] <tony-o> FROGGS: have you run across representing a union of structs for nativecall yet?

[16:35] <lizmat> [Tux]: will look at it tonight

[16:35] <[Tux]> (the last two are perl6)

[16:35] *** fhelmberger left
[16:36] <[Tux]> my approach gained a factor 3 without changing a single character: pure gain in perl6

[16:36] <lizmat> [Tux]: in case other people want to look at it: what was the repo again?

[16:36] <[Tux]> one sec

[16:37] <[Tux]> https://github.com/Tux/CSV

[16:37] <FROGGS> tony-o: timotimo was working on that

[16:38] <tony-o> FROGGS: i will hold off on these 2 functions then :-)

[16:38] <FROGGS> tony-o: what two functions?

[16:38] * [Tux] carefully pokes tadzik about his promised slang

[16:38] <tony-o> FROGGS: win32 calls to QueryPerformance[Frequency|Counter]

[16:41] <tadzik> [Tux]: I promised a slang? :o

[16:43] <[Tux]> yes: i can haz a space between the function name and the opening paren

[16:43] <psch> m: say\     ("spaaace")

[16:43] <camelia> rakudo-moar 315ec6: OUTPUT«spaaace␤»

[16:43] <tadzik> sure that wasn't timtoady? :D

[16:44] <[Tux]> yes, you promised me in Liz' room in Sofia

[16:44] <FROGGS> [Tux]: are you talking about a grammar by any chance?

[16:44] <[Tux]> did the name change? :P

[16:45] <FROGGS> no :o)

[16:45] <[Tux]> fwiw that promise might have been the main reason I got back into trying perl6

[16:45] <FROGGS> a slang let you write in another language literally subsequent blocks

[16:46] <FROGGS> in subsequent*

[16:46] * [Tux] doesn't care what its called, as long as I can write «function (arg, arg);» instead of «function( arg, arg );»

[16:46] <FROGGS> and a grammar is just a class-like regex

[16:46] <FROGGS> ahh

[16:46] <FROGGS> that's a slang then

[16:47] *** ghostlines left
[16:48] *** treehug88 joined
[16:49] <FROGGS> [Tux]: creating a slang that inherits from the Perl 6 grammar is not easily doable as of today

[16:50] <[Tux]> I want it yesterday, but next week will be good enough :}

[16:50] <FROGGS> :S

[16:50] <[Tux]> seriously: that is the most important issue that is holding me from having FUN in perl6

[16:50] <[Tux]> and I know more people that have similar issues

[16:51] <FROGGS> I am thinking about it... gimme some time

[16:51] <[Tux]> I will

[16:51] <[Tux]> I won't be here very often, but lizmat will know how to reach me

[16:52] <woolfy> FOSDEM 2015 in Brussels will be quite special for us.  Larry Wall will be there (I'm so proud and happy, wow).

[16:52] <woolfy> Look at this schedule:  https://fosdem.org/2015/schedule/track/languages/

[16:52] <woolfy> You might see the first talk, just accepted by the FOSDEM organisation.  Get ready to party.  Yay!

[16:53] <lizmat> https://fosdem.org/2015/schedule/event/get_ready_to_party/

[16:54] <woolfy> Only (minor) problem: the Perl-devroom is also on a Saturday.  Whoever has his/her presentation from 15:00-16:00, might nog have many attendees...

[16:55] <woolfy> I can live with such a problem. :-)

[16:56] <PerlJam> "2015 will be the year that Perl 6 officially launches for production use"  is kind of a bold claim.

[16:56] <PerlJam> (I'm not saying it won't happen, just that any hiccups will be magnified)

[16:57] <colomon> woah, that's only three months away!

[16:57] <woolfy> PerlJam: bold claims can be good!

[16:58] <psch> $ perl6 -e'sub infix:["a"]($,$) { "foo" }; say 1 a 1' 

[16:58] <psch> foo

[16:58] <psch> now for the spectest to see if anything broke :s

[16:58] <[Tux]> having been present with perl6 launch (mug event in Monteray), it would be a good Idea to also be present at fosdem

[16:58] <PerlJam> woolfy: agreed. But the delivery must be close to flawless otherwise we get all the naysayers coming out of the woodwork *worse* than I expect they already will

[16:59] <psch> oh, that talk looks exciting

[16:59] <lizmat> I have no doubt that a lot of shit is going to hit the fan

[16:59] <PerlJam> [Tux]: Do you think there will be flying, breaking mugs at fosdem too? : )

[16:59] <PerlJam> er, :-)

[16:59] <lizmat> but that's only to be expected

[17:00] <[Tux]> PerlJam, nope

[17:00] <lizmat> (thinking about all of the shit that's already flying around on perlmonks, reddit, etc.)

[17:00] <lizmat> .oO( note to self: bring disposable mugs)

[17:01] <PerlJam> lizmat: you know what would make me really happy? (and this is totally irrational)  If chromatic gives Rakudo a try again, likes it, and recants on the negative vibes he's been sending our way.

[17:01] * lizmat is reminded of an Eagles album: hell freezes over

[17:02] <lizmat> I'm just afraid chromatic suffers too much by the "not invented by me" syndrome

[17:02] <lizmat> *from

[17:03] <lizmat> cycling&

[17:04] <PerlJam> chromatic: and if you're watching us from afar (because, say, a google alert was triggered when we mention your name :) ...   *hugs*   :)

[17:05] <tadzik> [Tux]: ah, I remember now :)

[17:05] *** sqirrel__ left
[17:05] <[Tux]> :) ☺

[17:06] <woolfy> PerlJam: we might even want to ask him for a "Modern Perl 6" book.  Along with many other interesting books...  Programming Perl 6 (Larry), Beginning Perl (Curtis 'Ovid' Poe), Perl 6 Best Practices (Damian Conway), etc

[17:07] <woolfy> Flying and breaking mugs...  we buried the meme in Perl, august 2012.  :-)

[17:07] <arnsholt> masak: As our resident category theorist (I guess), what would you recommend as an introductory text to the field?

[17:08] <PerlJam> woolfy: I think we'll have to wait until Perl 6 has been released to the wild for several years before there's enough material for a "Modern Perl 6" book.

[17:09] <PerlJam> woolfy: Though, a "Modern Perl" book that has a chapter on Perl 6 doesn't seem too far out there.

[17:11] <woolfy> PerlJam: either way, chromatic coming back would be lovely

[17:11] <woolfy> cycling&

[17:15] *** dbane joined
[17:16] *** ajr_ left
[17:17] *** guru joined
[17:17] *** guru is now known as Guest25022

[17:17] *** Guest25022 is now known as ajr_

[17:18] <tony-o> is there a way to get a handle for the current process and for a 'start'ed async block (is there a separate handle for that)?

[17:21] *** raiph left
[17:21] <moritz> tony-o: the return value of start { } is a Promise

[17:21] <moritz> tony-o: which you can use to wait for the thread, extract the result, and maybe even cancle the thing

[17:22] <tony-o> moritz: i'm looking to pass a p6 version of C's HANDLE to NativeCall, I'm just not sure where i can get that

[17:22] <moritz> tony-o: oh, so file handles?

[17:22] <tony-o> Process and Thread handles

[17:22] <moritz> rmpf, no idea

[17:22] <tony-o> rmpf?

[17:22] <moritz> noise of dissatisfaction

[17:23] <tony-o> oh, hard to tell what is and isn't an acronym now

[17:23] <moritz> :-)

[17:23] <moritz> lol I blug: http://perlgeek.de/blog-en/perl-6/2014-community-server-funding.html

[17:24] <PerlJam> (moritz's employer)++

[17:25] <PerlJam> looks like I have to make sure I can still use my paypal account now

[17:25] *** oetiker_ joined
[17:26] *** oetiker left
[17:26] *** oetiker_ left
[17:26] *** oetiker joined
[17:28] <arnsholt> tony-o: I don't think there's a way to get the underlying C stuff relating to a Perl 6-level thread ATM

[17:28] <arnsholt> Not sure if that's even a good idea (or feasible, certainly near impossible on JVM I suspect)

[17:28] <ajr_> If I started working through Perl 5 examples, converting them to Perl 6, and asking why when they break, would that be a valuable guide to writing an introduction to Perl 6, or an annoying display of stupidity?

[17:28] <moritz> ajr_: I'd be interested

[17:28] <tony-o> ajr_: sounds pretty useful

[17:30] <tony-o> arnsholt: i'm trying to use NativeCall to get process times on windows, it wants to get Process HANDLE or Thread HANDLE and I'm having trouble figuring out how to use those.  (I'm caling GetProcessTimes and GetThreadTimes specifically) 

[17:30] <ajr_> (I tried working through "Mastering Algorithms" a while back, and crashed and burned so fast it didn't feel worth continuing.)

[17:31] <arnsholt> tony-o: I think you'll have to hack deeply into the NQP guts to get at that, if it's even possible

[17:31] *** pdcawley joined
[17:32] *** bowtie joined
[17:32] *** bowtie is now known as Guest1933

[17:33] *** psch left
[17:33] *** ajr_ left
[17:34] *** psch joined
[17:34] *** treehug8_ joined
[17:35] *** ajr joined
[17:35] *** ajr is now known as Guest22120

[17:36] *** Guest22120 is now known as ajr_

[17:37] *** treehug88 left
[17:39] *** Guest1933 left
[17:43] *** leont joined
[17:43] *** psch left
[17:44] *** psch joined
[17:46] *** bowtie_ joined
[17:46] *** treehug8_ left
[17:47] *** treehug88 joined
[17:49] *** pdcawley left
[17:49] *** treehug8_ joined
[17:50] *** FROGGS_ joined
[17:52] *** ghostlines joined
[17:52] *** treehug88 left
[17:52] *** ghostlines left
[17:53] *** ghostlines joined
[17:54] *** pecastro left
[17:54] *** FROGGS left
[17:56] *** rurban joined
[17:57] *** spider-mario joined
[17:57] *** dakkar left
[17:58] *** zakharyas left
[17:59] *** dbane left
[18:02] *** kjs_ left
[18:13] *** daxim left
[18:15] *** pat_js joined
[18:18] *** daxim joined
[18:19] *** bowtie_ left
[18:24] *** bowtie_ joined
[18:24] <vendethiel> I don't really like python, but I have to admit "python gangsta rap" is the best thing ever

[18:24] <vendethiel> ( https://www.youtube.com/watch?v=FJ7QsEytQq4 )

[18:25] *** ajr_ left
[18:26] *** virtualsue left
[18:28] *** kaleem left
[18:31] *** bowtie_ left
[18:31] *** Sqirrel joined
[18:32] *** bowtie joined
[18:32] *** FROGGS_ is now known as FROGGS

[18:32] *** bowtie is now known as Guest75553

[18:33] *** kjs_ joined
[18:33] <timotimo> hm, what was i working on?

[18:34] <FROGGS> spesh?

[18:34] <FROGGS> profiling json::tiny?

[18:34] <FROGGS> union support?

[18:37] <sjn> memory recall techniques? :)

[18:37] *** grettis joined
[18:37] <FROGGS> sjn++

[18:38] <FROGGS> vendethiel: :P

[18:46] <timotimo> ah, unions in nativecall

[18:46] <timotimo> i've thrown some ideas around, none of them seeming thoroughly satisfying

[18:50] *** rindolf joined
[18:52] *** gfldex joined
[18:57] <arnsholt> timotimo: Might be possible to make them work more or less identically to structs

[18:57] <arnsholt> Except how the read memory, obviously =)

[18:57] <arnsholt> *they

[18:57] *** guru joined
[18:58] *** guru is now known as Guest36392

[18:58] *** Guest36392 is now known as ajr_

[18:58] <timotimo> yes

[18:58] <timotimo> well, only how they lay out the memory

[18:58] <timotimo> i thought i could have a trait "is union" that would have a flag set in the REPRData before compose gets called

[18:58] <timotimo> and that would just make the CStruct begin each member at offset 0

[18:58] *** rurban left
[19:00] *** ghostlines left
[19:02] <arnsholt> Oooh, clever idea!

[19:06] *** kjs_ left
[19:06] *** treehug88 joined
[19:08] *** treehug8_ left
[19:10] <dalek> perl6-roast-data: 61d6f11 | coke++ | / (4 files):

[19:10] <dalek> perl6-roast-data: today (automated commit)

[19:10] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/61d6f116fe

[19:15] <vendethiel> okay, so, the GLR semantics aren't going to change now, right?

[19:15] *** raiph joined
[19:15] <vendethiel> I've been slacking off on the tutorial lately, and by now "waiting to explain the list stuff" is no more an excuse :)

[19:17] *** ptc_p6 left
[19:17] *** ugator joined
[19:17] *** ptc_p6 joined
[19:18] *** Mso150 joined
[19:23] *** kjs_ joined
[19:33] <timotimo> arnsholt: if you like it that much, why not implement it? :))

[19:41] *** kjs_ left
[19:45] *** antigremlin joined
[19:45] <dalek> Perlito: edff284 | (Flavio S. Glock)++ | / (2 files):

[19:45] <dalek> Perlito: Perlito5 - fix BEGIN block namespace

[19:45] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/edff28465f

[19:46] *** antigremlin left
[19:50] <FROGGS> [Tux]: how would you call such a slang... say, in case I just made one up

[19:55] *** raiph left
[19:58] *** Guest75553 left
[19:59] *** bowtie joined
[20:00] *** bowtie is now known as Guest83856

[20:01] *** pecastro joined
[20:03] <[Tux]> FROGGS, I'd go for "banner" - https://en.wikipedia.org/wiki/Indent_style#Banner_style

[20:04] <FROGGS> hmmm, then I have to rename it :o)

[20:04] <[Tux]> thought that is more about indentation than space-use

[20:04] <FROGGS> https://github.com/FROGGS/p6-Slang-Tuxic

[20:04] <[Tux]> Tuxic is fine too ! :)

[20:04] <[Tux]> FROGS++

[20:04] <TimToady> .oO( Tuxecology :)

[20:05] <FROGGS> *g*

[20:05] <FROGGS> and that is how it works: https://github.com/FROGGS/p6-Slang-Tuxic/blob/master/lib/Slang/Tuxic.pm

[20:05] <[Tux]> and yes, I was aware of the need of parens with if/while

[20:05] <FROGGS> kids: don't try that at home :o)

[20:06] <FROGGS> hmmm, it makes the right choice anyway:

[20:06] <FROGGS> perl6-m -Ilib -e 'use Slang::Tuxic; sub if (Int) {}; if (21) { say "ohh" }'

[20:06] <FROGGS> ohh

[20:07] <[Tux]> how do I install that?

[20:07] <FROGGS> clone it, and then: panda install p6-Slang-Tuxic/

[20:07] <vendethiel> wow :P

[20:08] <FROGGS> I'll add it to the ecosystem, and I hope it does no harm :P

[20:08] <psch> FROGGS++

[20:08] <psch> m: say %*LANG.keys

[20:08] <camelia> rakudo-moar 315ec6: OUTPUT«0␤»

[20:09] <psch> right, those only exist in Perl6::Grammar i think as of now?

[20:09] <psch> iirc the user-facing interface is $~LANG..

[20:09] <[Tux]> AWESOME!

[20:09] <psch> or was it $~MAIN

[20:10] <FROGGS> psch: you get your hands at %*LANG only in an EXPORT, because the Perl6::Grammar calls your EXPORT sub directly

[20:10] <FROGGS> there is no $~LANG yet

[20:10] <[Tux]> "Wilt u meer of minder spaties toestan?" MEER! MEER! "Dan gaan we dat regelen!"

[20:10] <FROGGS> O.o

[20:11] <FROGGS> I understand everything but "minder spaties toestan"

[20:11] <[Tux]> toesta*a*n (I was typing too fast)

[20:12] <psch> FROGGS: i knew about $~LANG etc not existing yet, but i hadn't realized that we can get there via EXPORT

[20:12] <FROGGS> [Tux]: that... does not help at all :o)

[20:12] <FROGGS> psch: that's what v5 does for ages :o)

[20:12] <[Tux]> it is based on some Dutch politician, doing political incorrect statements about Maroccans

[20:13] <FROGGS> ahh

[20:13] <FROGGS> spaties eq species?

[20:13] <[Tux]> spaces

[20:14] <FROGGS> ahh, now I got it

[20:15] <dalek> ecosystem: 22a14d9 | (Tobias Leich)++ | META.list:

[20:15] <dalek> ecosystem: added Slang::Tuxic

[20:15] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/22a14d9654

[20:15] <FROGGS> but nice to know that we can hack the Perl 6 grammar that way...

[20:15] <FROGGS> masak: that might be interesting for you too

[20:20] *** kjs_ joined
[20:21] *** virtualsue joined
[20:22] <[Tux]> ===SORRY!=== Error while compiling test-t.pl

[20:22] <[Tux]> Two terms in a row

[20:22] <[Tux]> at test-t.pl:76

[20:22] <[Tux]> ------>             my $msg = $reason.sprintf ⏏(@args);

[20:22] <[Tux]>     expecting any of:

[20:22] <[Tux]> http://www.xs4all.nl/~hmbrand/test-t.pl

[20:22] <FROGGS> ohh

[20:22] <FROGGS> subs only atm... need to look into method calls

[20:23] <psch> m: pi.sprintf("1.5%d").say

[20:23] <camelia> rakudo-moar 315ec6: OUTPUT«Too few directives: found 0, fewer than the 1 arguments after the format string␤␤»

[20:23] <FROGGS> that's probably handles by the 'name' token instead of the 'identifier' token

[20:24] <psch> ^^ seems unintuitive

[20:24] <FROGGS> m: pi.sprintf('1.5%d').say

[20:24] <camelia> rakudo-moar 315ec6: OUTPUT«Too few directives: found 0, fewer than the 1 arguments after the format string␤␤»

[20:24] <psch> oh, also the directive is clearly out of order.. :)

[20:25] <psch> m: sprintf("%1.5d", pi).say

[20:25] <camelia> rakudo-moar 315ec6: OUTPUT«3␤»

[20:25] <psch> ...right

[20:25] <psch> m: sprintf("%1.5f", pi).say

[20:25] <camelia> rakudo-moar 315ec6: OUTPUT«3.14159␤»

[20:25] <FROGGS> m: say pi.sprintf('1.5%d')

[20:25] <camelia> rakudo-moar 315ec6: OUTPUT«Too few directives: found 0, fewer than the 1 arguments after the format string␤␤»

[20:25] <FROGGS> m: say pi.fmt('1.5%d')

[20:25] <camelia> rakudo-moar 315ec6: OUTPUT«1.53␤»

[20:26] <FROGGS> there is no sprintf method, is there?

[20:26] <psch> m: say (~pi).sprintf("%1.5f")

[20:26] <camelia> rakudo-moar 315ec6: OUTPUT«Too few directives: found 0, fewer than the 1 arguments after the format string␤␤»

[20:26] <psch> m: Str.^methods.grep("sprintf")

[20:26] <camelia> rakudo-moar 315ec6: OUTPUT«Unhandled exception: No exception handler located for warn␤   at src/gen/m-CORE.setting:770  (/home/camelia/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:warn:29)␤ from src/gen/m-CORE.setting:766  (/home/camelia/rakudo-inst-1/languages/perl…»

[20:26] <psch> i'm not thinking good right now it seems...

[20:27] <psch> FROGGS: that's probably it, in any case

[20:27] <psch> i blame map and grep and so on...

[20:29] <psch> they've been misguiding me!

[20:30] <vendethiel> soooo, mysql's MATCH sucks. Wow.

[20:32] <dalek> roast: cd74a7c | TimToady++ | S04-statement-modifiers/for.t:

[20:32] <dalek> roast: ensure that "{$_}" for ... sets correct $_

[20:32] <dalek> roast: review: https://github.com/perl6/roast/commit/cd74a7c776

[20:35] *** darutoko- left
[20:39] <psch> m: "%1.5f".sprintf(pi).say

[20:39] <camelia> rakudo-moar 315ec6: OUTPUT«3.14159␤»

[20:39] <psch> i don't know what to think of that

[20:45] <FROGGS> ahh -.-

[20:49] <PerlJam> m: pi.fmt("%1.5f").say

[20:49] <camelia> rakudo-moar 315ec6: OUTPUT«3.14159␤»

[20:49] <PerlJam> TMTOWTDI!  :)

[20:49] <psch> m: say floor(pi * 50000) / 50000

[20:49] <camelia> rakudo-moar 315ec6: OUTPUT«3.14158␤»

[20:49] <psch> aww

[20:49] <PerlJam> m: say floor(pi * 500000)/ 500000

[20:49] <camelia> rakudo-moar 315ec6: OUTPUT«3.141592␤»

[20:49] <psch> m: say floor(pi * 50000 div 10) / 5000

[20:49] <camelia> rakudo-moar 315ec6: OUTPUT«Cannot call 'infix:<div>'; none of these signatures match:␤:(Int:D \a, Int:D \b)␤:(int $a, int $b --> int)␤  in block <unit> at /tmp/o73WG3BfaG:1␤␤»

[20:50] <psch> i don't grok IEEE 754

[20:52] *** raiph joined
[20:53] *** denis_boyun_ joined
[20:54] *** kjs_ left
[20:58] *** exixt_ is now known as exixt

[20:59] <psch> just to reassure myself: we'll never do 'my $foo = "bar"; sub infix:<<$foo>> { $foo }; say 1 bar 1 # prints "foo\n"', because we can't right?

[20:59] <PerlJam> "can't" is such a strong word ...  ;>

[21:00] <TimToady> compile time can't rely on run time like that

[21:00] <TimToady> that's time travel

[21:01] *** spider-mario left
[21:02] <TimToady> now if you said, 'constant $foo = "bar";' that's a different story

[21:03] *** Mso150 left
[21:05] *** Mso150 joined
[21:06] <psch> there's definitely more thinking to be done how to get all the different sub and token colonpair notations to work

[21:07] <FROGGS> [Tux]: I am trying to implement that tomorrow

[21:07] *** Mso150_o joined
[21:07] <FROGGS> gnight #perl6

[21:07] *** FROGGS left
[21:07] <psch> what i have (kinda messily) solves infix:['a'] and infix:['a', 'b'], but doesn't work for token q:sym['q'], to say nothing of the constant bit above...

[21:08] <psch> same from me, g'nite o/

[21:08] *** raiph left
[21:08] *** psch left
[21:09] *** denis_boyun_ left
[21:10] *** exixt is now known as exixt_

[21:10] *** Mso150 left
[21:12] *** kjs_ joined
[21:15] *** rurban joined
[21:16] *** colomon left
[21:17] *** kaare_ left
[21:32] <masak> m: my $foo = 42; constant bar = $foo; say bar

[21:32] <camelia> rakudo-moar 315ec6: OUTPUT«(Any)␤»

[21:33] *** kjs_ left
[21:33] *** cibs left
[21:33] * masak fantasizes about a sufficiently good IDE that would detect and warn on that kind of situation

[21:34] *** cibs joined
[21:34] <PerlJam> masak: Maybe Padre could if given some help

[21:35] <masak> mebbe.

[21:35] <vendethiel> masak: Perl6 will be insanely hard for IDEs, btw :P

[21:36] *** ptc_p6 left
[21:36] <masak> I can see how that's true for the parsing part, because Perl 6 has a lot of fun with the parse/run barrier.

[21:37] <masak> more fun than Perl 5, in some senses.

[21:37] *** colomon joined
[21:37] <masak> after having an AST and something PSI-like, I don't see how it's harder than most other languages, though.

[21:37] <vendethiel> Right. But that's not the hard part -- haskell and scala IDEs are pretty good (seen haskforce?)

[21:37] *** raiph joined
[21:37] <vendethiel> the hard part is macro fun and metamodel fun

[21:39] <masak> granted, those bits are challenging

[21:39] * moritz back from a very fine dinner

[21:39] <arnsholt> I imagine Perl 6 IDE will work more or less like Lisp IDE stuff: The editor talks to a running program image in a background process

[21:39] <vendethiel> well, I certainly hope we can get a rakudo-slave for the IDE :)

[21:40] *** xfix is now known as notfix

[21:42] *** user3 joined
[21:43] <arnsholt> Bah. My clever Python variable handling scheme wasn't clever enough >.<

[21:43] *** user3 left
[21:43] <arnsholt> Action methods are of course executed inside-out, which breaks it

[21:44] <masak> arnsholt: I've made peace with action methods working that way -- maybe if you provided more information, I could help?

[21:45] <arnsholt> I want to mark free variables (that is, those that are referenced before being assigned to) as such

[21:45] <arnsholt> Doing it in action methods mostly works, but something like the for loop also introduces a binding

[21:45] <masak> oh, right.

[21:45] <arnsholt> And marking the variable as declared in the for loop action is too late

[21:45] <masak> yes, I see the problem.

[21:45] <arnsholt> Easy way out is to add the decl out-of-order in the grammar

[21:46] <masak> I think so, yes.

[21:46] <masak> you probably want to keep a dynamical.

[21:46] *** rindolf left
[21:46] <arnsholt> Yeah, already added $*BLOCK

[21:46] <arnsholt> Only sane way to keep track of that

[21:47] <masak> arnsholt++

[21:47] * vendethiel agrees

[21:47] <vendethiel> but I made peace with the order as well :-)

[21:48] <arnsholt> Yeah, I'm at peace with the order. I just brainoed and expected things to work the way I needed them to =)

[21:48] <arnsholt> (Something that happens more frequently than I'd like to admit, I guess =)

[21:50] *** kjs_ joined
[21:51] * masak .oO( brain in a way that sticks )

[21:52] *** kjs_ left
[21:52] <arnsholt> masak: Do you have a recommended category theory introduction, BTW?

[21:53] <vendethiel> arnsholt: "homotopy type theory"

[21:53] <masak> arnsholt: it really started to click for me with http://math.mit.edu/~dspivak/CT4S.pdf

[21:53] <vendethiel> (sorry, I'm kidding, that's a terrible book to start...)

[21:54] <vendethiel> masak: I think I'd start off with set theory

[21:54] <masak> arnsholt: that helped me get further into http://www.amazon.com/Categories-Working-Mathematician-Graduate-Mathematics/dp/0387984038/ -- which I still find dense.

[21:54] <vendethiel> "Algebra chapter 0" by Aluffi is pretty good for a set theory introduction

[21:55] * vendethiel doesn't read a lot of programming books, because most of those are costly...

[21:55] <masak> arnsholt: currently, I'm filling in some glaring gaps in group theory, universal algebra, and algebraic topology, all of which help me appreciate category theory better.

[21:55] <vendethiel> masak: you might be interested in this :). https://www.cs.uoregon.edu/research/summerschool/summer12/curriculum.html

[21:55] <vendethiel> https://www.cs.uoregon.edu/research/summerschool/summer14/curriculum.html

[21:55] <vendethiel> http://www.cs.cmu.edu/~fp/courses/15816-f01/handouts.html

[21:55] <vendethiel> http://www.cs.cmu.edu/~cangiuli/talks/hpt-icfp.pdf

[21:56] <vendethiel> Those contain a lot, category theory, logic, and whatever else.

[21:56] <arnsholt> masak: Cheers!

[21:56] * vendethiel isn't going through to arnsholt, apparently :/

[21:56] <arnsholt> It's one of those things I suspect I'd be better off knowing

[21:56] <arnsholt> vendethiel: Getting there =)

[21:56] <vendethiel> arnsholt: my links are for you

[21:57] <arnsholt> My set theory is a bit rusty, but mostly adequate I think

[21:57] <arnsholt> I should probably brush up on that too, though

[21:57] <vendethiel> alright. I don't have *any* science-y background whatsoever, so... I just learned stuff on top of stuff, and then later I started reading proper stuff

[21:57] <vendethiel> I have a paper version of Homotopy type theory, but I'm still not reading it yet

[21:57] <arnsholt> Yeah, in that case I can see how set theory doesn't come first

[21:58] <vendethiel> it comes before category theory :)

[21:58] <arnsholt> Oh, wow. A linear logic course. Neat!

[21:58] <vendethiel> yes, a friend of mine linked those to me. You might be interested by answers from #idris and #agda, even maybe #nothaskell

[21:59] <masak> haha, #nothaskell :)

[21:59] <vendethiel> ;-)

[21:59] <arnsholt> Linear logic is yet another thing I should learn more about

[21:59] <arnsholt> One of my master's advisors uses it to compute semantics for natural language

[21:59] <arnsholt> The resource sensitive part of the logic is very useful for that

[22:00] <arnsholt> (Also, having an operator called "lollipop" is pretty neat =D)

[22:00] <vendethiel> yeah, logical frameworks are very interesting. Dependently-typed languages and proof assistants use those to great effect

[22:00] <vendethiel> also, yay for logical frameworks where ¬(¬a) is not a :D

[22:00] <arnsholt> Yeah, I remember those

[22:01] <arnsholt> I took a course on (essentially) strategies for automated theorem proving (in FOL) once. That was pretty neat

[22:01] <arnsholt> Also what made me actually grok how models in FOL work

[22:04] <timotimo> o/

[22:04] <arnsholt> \o

[22:05] <vendethiel> arnsholt: when I hear people say "I took a course on *subject*" I always feel sad :P

[22:05] <timotimo> arnsholt: are you interested in building CUnion support for CStruct?

[22:06] <PerlJam> vendethiel: why?

[22:06] <vendethiel> PerlJam: I never took any courses :)

[22:06] <PerlJam> vendethiel: and that makes you sad?

[22:06] <vendethiel> PerlJam: yes.

[22:06] <PerlJam> vendethiel: so take some courses!  :)

[22:06] <arnsholt> timotimo: It sounds like a reasonable plan, certainly

[22:06] <vendethiel> PerlJam: I can't get in university

[22:06] <vendethiel> s/y$/ies/

[22:07] <masak> 'night, #perl6

[22:07] <arnsholt> g'night masak o/

[22:07] <colomon> \o

[22:08] <PerlJam> vendethiel: there are online courses like from coursera an ocw.mit.edu

[22:08] <vendethiel> PerlJam: yes, I've followed some of those

[22:13] *** colomon left
[22:14] * arnsholt heads sleepwards too

[22:14] <arnsholt> Night, night!

[22:14] <lizmat> gnight arnsholt 

[22:14] *** lucas_ joined
[22:15] <timotimo> gnite arnsholt 

[22:15] <lizmat> moritz: why is your blogpost not on http://pl6anet.org ?

[22:16] <vendethiel> g'night

[22:17] <timotimo> hmm. what should i do next?

[22:17] <lucas_> hi

[22:17] <lucas_> About S15 and S26:

[22:18] <lucas_> a) convert everything to Perl 6 Pod in the future

[22:18] <lucas_> b) convert S15 and S26 to Perl 5 POD

[22:18] <lucas_> c) leave it as is at the moment

[22:18] <lucas_> Have you are decided?

[22:18] <lucas_> *already

[22:24] * lizmat also calls it a night

[22:25] *** Mso150_o left
[22:26] <raiph> "I'm also curious how this would look in perl6." Anyone want to respond? http://perlmonks.org/?node_id=1105972 (I plan to do so tomorrow if no one else does.)

[22:31] *** telex left
[22:32] *** telex joined
[22:36] *** virtualsue left
[22:37] <lucas_> I guess I'll just write here my opinion, ok? Yes, I would like to have all the files in the same Perl 5 POD format.

[22:37] *** colomon joined
[22:38] <lucas_> I think Perl 6 Pod format experiments could be done in a different repository.

[22:38] <lucas_> Also, I don't think it's good to right a specification for some format in its own format.

[22:39] <lucas_> Think about a YAML specification written in... YAML. :)

[22:39] <lucas_> If something changes, it would have to be applied recursively in the document.

[22:40] <lucas_> Once in its content, and once in its own format.

[22:42] <lucas_> So... I would like to convert those files to Perl 5 POD. Will such thing be accepted and merged?

[22:43] *** ajr_ left
[22:43] <raiph> "2015 will be the year that Perl 6 officially launches for production use." <-- I hate that.

[22:44] <timotimo> we should definitely nominate some random outsider to be our spokesperson

[22:45] <timotimo> since they seem to know everything better than us

[22:45] <Ulti> doing it now

[22:45] <Ulti> :P

[22:48] <raiph> timotimo: ?

[22:48] <lucas_> *good to write

[22:49] *** gfldex left
[22:51] *** BenGoldberg joined
[22:51] <lucas_> Well, iff anyone wants to answer me that later, write here and I'll read the logs later. Thanks. Bye.

[22:51] *** lucas_ left
[22:57] *** rurban left
[22:59] <tony-o> .tell lucas_ pod is for writing documentation, yaml isn't.  that isn't really a good comparison

[22:59] <yoleaux> tony-o: I'll pass your message to lucas_.

[22:59] <Ulti> hmmm I have reputation 0 on PerlMonks not sure anyone can see my posts

[23:02] <raiph> Ulti: Wow, nice answer.

[23:04] <Ulti> it's a good answer because there is enough material floating about for it to be a good answer ;)

[23:04] <Ulti> also because Perl6 has really nice stuff that people still spend pointless amounts of time faffing with in Perl5 whilst trying to avoid deps

[23:06] *** baest left
[23:08] <raiph> Heh. That's about my all time favorite PerlMonks answer to someone asking something about P6.

[23:09] <raiph> Ulti: You can edit posts. And you can make those text only links clickable.

[23:09] <Ulti> k k

[23:10] <Ulti> also PerlMonks utterly sucks 

[23:10] *** baest joined
[23:11] <Ulti> as in the interface to posting

[23:11] <Ulti> not the content 

[23:12] <Ulti> maybe we need PerlEntomologist

[23:16] *** bonsaikitten left
[23:18] *** rmgk left
[23:18] *** kjs_ joined
[23:18] *** xiaomiao joined
[23:19] *** treehug88 left
[23:19] *** kjs_ left
[23:20] *** rmgk joined
[23:39] *** xiaomiao left
[23:41] *** xiaomiao joined
[23:48] *** dayangkun joined
[23:55] *** raiph left
