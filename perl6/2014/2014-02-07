[00:06] *** raiph left
[00:08] *** ajr_ left
[00:10] *** denis_boyun left
[00:20] *** lizmat_ left
[00:20] *** lizmat joined
[00:25] *** rurban left
[00:28] *** [particle] left
[00:28] *** daniel-s joined
[00:31] *** treehug88 left
[00:33] *** berekuk left
[00:34] *** raiph joined
[00:36] *** vky left
[00:39] *** rurban joined
[00:53] *** Biohazard joined
[01:01] *** hypolin joined
[01:01] *** hypolin left
[01:04] <dalek> perl6-roast-data: 926db80 | coke++ | / (3 files):

[01:04] <dalek> perl6-roast-data: today (automated commit)

[01:04] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/926db8043e

[01:06] *** [particle] joined
[01:09] *** Adriaaan left
[01:11] <[Coke]> pugs has 4691 failures and could use some love.

[01:12] *** cognominal left
[01:21] *** skids joined
[01:27] *** araujo joined
[01:37] *** cognominal joined
[01:46] *** kurahaupo__ left
[01:48] <clsn__> Some odd behavior when doing things I shouldn't be doing...

[01:49] <clsn__> r: sub prefix:<]> ($x) { "-$x-" }; say "alive";

[01:49] <camelia> rakudo-jvm e4e862: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[01:49] <camelia> ..rakudo-parrot e4e862, rakudo-moar e4e862: OUTPUT«alive␤»

[01:49] <clsn__> whoa, that was weird.  Didn't know JVM barfed.  Anyway, that's at least normal (though the sub doesn't work, which is another issue).  But look.

[01:50] <clsn__> r: sub prefix:<]> ($x)  { ">x<" }; say "alive"  # Note: differs only in contents of *string* in sub.

[01:50] <camelia> rakudo-jvm e4e862: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[01:50] <camelia> ..rakudo-parrot e4e862, rakudo-moar e4e862: OUTPUT«alive␤»

[01:50] <clsn__> *blink*.  It broke on my version.

[01:51] <clsn__> oh, wait,

[01:51] <clsn__> r: sub prefix:<]> ($x)  { ">$x<" }; say "alive"  # Note: differs only in contents of *string* in sub.

[01:51] <camelia> rakudo-parrot e4e862, rakudo-moar e4e862: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Unable to parse quote-words subscript; couldn't find right angle quote␤at /tmp/tmpfile:1␤------> [32mers only in contents of *string* in sub.[33m⏏[31m<EOL>[…»

[01:51] <camelia> ..rakudo-jvm e4e862: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[01:51] <clsn__> Actually at least as puzzling, really; I thought it was the <>s in the string that broke it (and it apparently is), but the $ in $x seems to be necessary too.

[01:54] <clsn__> r: sub prefix:<]> ($x) { "-$x-" }; say ]"hello";

[01:54] <camelia> rakudo-jvm e4e862: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[01:54] <camelia> ..rakudo-parrot e4e862, rakudo-moar e4e862: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Unexpected closing bracket␤at /tmp/tmpfile:1␤------> [32msub prefix:<]> ($x) { "-$x-" }; say [33m⏏[31m]"hello";[0m␤»

[01:55] <clsn__> That's probably reasonable, I am being pretty evil here.  ] won't work in prefix or postfix position, nor will ) or ].  Not-already-spoken-for closers like ﴿ or ⦄ work okay.  Similarly, circumfix:<) (> doesn't work.  Again, not really surprising.

[01:55] *** araujo left
[01:56] <clsn__> Note however:

[01:56] <clsn__> r: sub prefix:<)> ($x) { "--$x--" }; say \)"hello"

[01:57] <camelia> rakudo-jvm e4e862: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[01:57] <camelia> ..rakudo-parrot e4e862, rakudo-moar e4e862: OUTPUT«hello␤»

[01:57] <clsn__> Without the \, fail.  With the \, no error, but doesn't run the sub either.  Curious.

[02:02] *** rurban left
[02:03] *** FROGGS_ joined
[02:06] *** FROGGS left
[02:07] *** rurban joined
[02:07] *** rurban left
[02:09] <clsn__> Duh.  OK, I see the problem with the ">$x<".  The $x< looks like the beginning of "$x<something>".  So nevermind, that error is correct.

[02:19] <BenGoldberg> r: sub prefix:<)> ($x) { "--$x--" }; say [)]"hello"

[02:19] <camelia> rakudo-jvm e4e862: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[02:19] <camelia> ..rakudo-parrot e4e862, rakudo-moar e4e862: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Unable to parse expression in array composer; couldn't find final ']' ␤at /tmp/tmpfile:1␤------> [32msub prefix:<)> ($x) { "--$x--" }; say [[33m⏏[31m)]"hello…»

[02:20] <BenGoldberg> r: sub prefix:<)> ($x) { "--$x--" }; say [\)]"hello"

[02:20] <camelia> rakudo-jvm e4e862: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[02:20] <camelia> ..rakudo-parrot e4e862, rakudo-moar e4e862: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤You can't backslash that␤at /tmp/tmpfile:1␤------> [32mub prefix:<)> ($x) { "--$x--" }; say [\)[33m⏏[31m]"hello"[0m␤    expecting any of:␤        argume…»

[02:20] <BenGoldberg> "You can't backslash that"?

[02:22] <clsn__> Yeah, get that error a lot.  Here's another weird one I just found:

[02:22] <clsn__> r: say\("hi")

[02:22] <camelia> rakudo-jvm e4e862: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[02:22] <camelia> ..rakudo-parrot e4e862: OUTPUT«␤No such method 'postcircumfix:<( )>' for invocant of type 'Bool'␤  in any  at gen/parrot/BOOTSTRAP.nqp:1692␤  in any  at gen/parrot/BOOTSTRAP.nqp:1674␤  in block  at /tmp/tmpfile:1␤␤»

[02:22] <camelia> ..rakudo-moar e4e862: OUTPUT«␤Cannot find method 'postcircumfix:<( )>'␤  in block  at /tmp/tmpfile:1␤␤»

[02:22] <clsn__> That's probably at least an LTA message.

[02:23] <clsn__> Spec says that \ should work as unspace even without spaces after it.  It's fine with a space after it.

[02:23] <clsn__> r: \  say "x"

[02:23] <camelia> rakudo-parrot e4e862, rakudo-moar e4e862: OUTPUT«x␤»

[02:23] <camelia> ..rakudo-jvm e4e862: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[02:24] <clsn__> huh, I got You Can't Backslash That I think.  But maybe I was in the REPL.

[02:24] <BenGoldberg> What's wrong the jakudo today?

[02:24] <clsn__> Dunno.  I should stop using r:

[02:25] *** clsn__ is now known as clsn

[02:26] <BenGoldberg> p: sub infix:<d> { "[" ~ @_.join(", ") ~ "]" }; say [d] 1..10

[02:26] <camelia> rakudo-parrot e4e862: OUTPUT«[[[[[[[[[1, 2], 3], 4], 5], 6], 7], 8], 9], 10]␤»

[02:26] <BenGoldberg> p: sub infix:<d> { "[" ~ @_.join(", ") ~ "]" }; say [Rd] 1..10

[02:26] <camelia> rakudo-parrot e4e862: OUTPUT«[10, [9, [8, [7, [6, [5, [4, [3, [2, 1]]]]]]]]]␤»

[02:27] <BenGoldberg> If d were list assoc, the R version would problably, fail, but I forget the syntax :(

[02:27] <BenGoldberg> 'is assoc(List)'?

[02:28] *** raiph left
[02:29] <BenGoldberg> p: say [R,] 1..10

[02:29] <camelia> rakudo-parrot e4e862: OUTPUT«Too many positional parameters passed; got 10 but expected 2␤  in block  at gen/parrot/CORE.setting:16713␤  in sub  at gen/parrot/CORE.setting:16820␤  in block  at /tmp/CigNEozzxl:1␤␤»

[02:31] <clsn> um.  I just looked it up today.

[02:31] * BenGoldberg is looking it up presently.

[02:31] <clsn> p: sub infix:<d> is assoc<list> { "[" ~ @_.join(", ") ~ "]" }; say [d] 1..10

[02:31] <camelia> rakudo-parrot e4e862: OUTPUT«[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]␤»

[02:32] <clsn> p: sub infix:<d> is assoc<list> { "[" ~ @_.join(", ") ~ "]" }; say [Rd] 1..10

[02:32] <camelia> rakudo-parrot e4e862: OUTPUT«Too many positional parameters passed; got 10 but expected 2␤  in block  at gen/parrot/CORE.setting:16713␤  in sub  at gen/parrot/CORE.setting:16820␤  in block  at /tmp/UkNVzYdFBh:1␤␤»

[02:32] <clsn> Guess you're right.

[02:33] * clsn didn't realize/forgot you got a slurpy *@_ for free if you use it; I've been typing it in the signature always.

[02:33] <BenGoldberg> p: sub infix:<d> is assoc('list') { "[@_]" }; say [Rd] 1..4

[02:33] <camelia> rakudo-parrot e4e862: OUTPUT«Too many positional parameters passed; got 4 but expected 2␤  in block  at gen/parrot/CORE.setting:16713␤  in sub  at gen/parrot/CORE.setting:16820␤  in block  at /tmp/WN3bXKIRQm:1␤␤»

[02:34] <BenGoldberg> p: sub infix:<d> is assoc('list') { "[@_]" }; say [d] 1..4

[02:34] <camelia> rakudo-parrot e4e862: OUTPUT«[@_]␤»

[02:34] <BenGoldberg> p: sub infix:<d> is assoc('list') { "["~@_.join(", ")~"]" }; say [d] 1..4

[02:34] <camelia> rakudo-parrot e4e862: OUTPUT«[1, 2, 3, 4]␤»

[02:34] <BenGoldberg> p: sub infix:<d> is assoc('list') { "["~@_.join(", ")~"]" }; say [Rd] 1..4

[02:34] <camelia> rakudo-parrot e4e862: OUTPUT«Too many positional parameters passed; got 4 but expected 2␤  in block  at gen/parrot/CORE.setting:16713␤  in sub  at gen/parrot/CORE.setting:16820␤  in block  at /tmp/d35JhyyvxK:1␤␤»

[02:34] <BenGoldberg> p: sub infix:<d> is assoc('list') { "["~@_.join(", ")~"]" }; say [Rd] 1..2

[02:34] <camelia> rakudo-parrot e4e862: OUTPUT«[2, 1]␤»

[02:35] <BenGoldberg> n: sub infix:<d> is assoc('list') { "["~@_.join(", ")~"]" }; say [Rd] 1..2

[02:35] <camelia> niecza v24-109-g48a8de3: OUTPUT«[2, 1]␤»

[02:35] <BenGoldberg> n: sub infix:<d> is assoc('list') { "["~@_.join(", ")~"]" }; say [Rd] 1..4

[02:35] <camelia> niecza v24-109-g48a8de3: OUTPUT«Unhandled exception: Excess arguments to ANON, used 2 of 4 positionals␤  at /tmp/4XCcsaB85y line 0 (ANON @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2767 (reduceop @ 12) ␤  at /tmp/4XCcsaB85y line 1 (mainline @ 4) ␤  at /home/p6eval/n…»

[02:38] <BenGoldberg> n: srand(42); print 'Ps c,uret neet AJohrkHalr'.comb.pick(*)

[02:38] <camelia> niecza v24-109-g48a8de3: OUTPUT«Just Another Perl Hacker,»

[02:38] <clsn> whoa...

[02:39] <BenGoldberg> magic! :)

[02:39] <clsn> p: sub infix:<m> is assoc<non> { "<@_.join(', ')>" }; say 7 m 8

[02:39] <camelia> rakudo-parrot e4e862: OUTPUT«<7, 8>␤»

[02:39] <clsn> That's fine.

[02:39] <clsn> p: sub infix:<m> is assoc<non> { "<@_.join(', ')>" }; say 7 m 8 m 9

[02:39] <camelia> rakudo-parrot e4e862: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/FIIiv9k_aU␤Operators 'm' and 'm' are non-associative and require parenthesis␤at /tmp/FIIiv9k_aU:1␤------> [32mc<non> { "<@_.join(', ')>" }; say 7 m 8 [33m⏏[31mm 9[0m␤    expecting an…»

[02:39] <clsn> that's also fine.

[02:39] <clsn> p: sub infix:<m> is assoc<non> { "<@_.join(', ')>" }; say [m] 1..5

[02:39] <camelia> rakudo-parrot e4e862: OUTPUT«<<<<1, 2>, 3>, 4>, 5>␤»

[02:39] <clsn> That's weird.

[02:40] <clsn> If it's non-associative, how can we reduce over it?

[02:40] <BenGoldberg> Bug?

[02:40] <clsn> I'm thinking maybe... I'm just exploring edge cases here.

[02:41] <BenGoldberg> m: srand(42); ('a'..'z').pick(*).print

[02:41] <camelia> rakudo-moar e4e862: OUTPUT«wrpmxatygiqsuflonvjedhbzkc»

[02:41] <BenGoldberg> Good

[02:41] <BenGoldberg> p: srand(42); ('a'..'z').pick(*).print

[02:41] <camelia> rakudo-parrot e4e862: OUTPUT«ipbxqyuowgzcfmhlvndatjsekr»

[02:41] <camelia> rakudo-parrot e4e862: OUTPUT«dqhxmjskpytvigawfbczrleuno»

[02:41] <BenGoldberg> Not good.  Still not fixed.

[02:41] <clsn> srand doesn't srand?

[02:42] <BenGoldberg> On parrot, srand only affects rand, not pick

[02:42] <clsn> Ah.

[02:43] <BenGoldberg> If I wanted to, I could make a japh like one I did for niecza, above, but for moar.

[02:43] <BenGoldberg> But until parrot's srand affects pick, I can't do it for parrot.

[02:43] <clsn> Yeah, once you know the sequence you can just work it backwards.

[02:44] <BenGoldberg> Exactly

[02:44] <BenGoldberg> Here's another bug:

[02:44] <BenGoldberg> rn: say (1e-14).fmt('%.18f')

[02:44] <camelia> niecza v24-109-g48a8de3: OUTPUT«0.000000000000010000␤»

[02:44] <camelia> ..rakudo-jvm e4e862: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[02:44] <camelia> ..rakudo-parrot e4e862, rakudo-moar e4e862: OUTPUT«0.000000000000009984␤»

[02:44] <BenGoldberg> That's ok

[02:44] <BenGoldberg> rn: say (1e-14).fmt('%.19f')

[02:44] <BenGoldberg> That's not

[02:44] <camelia> rakudo-parrot e4e862: OUTPUT«0.0000000000000100352␤»

[02:44] <camelia> ..rakudo-jvm e4e862: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[02:44] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«0.0000000000000100000␤»

[02:44] <camelia> ..rakudo-moar e4e862: OUTPUT«0..92233720368548e+19␤»

[02:45] <BenGoldberg> 0.92233 ...

[02:45] <BenGoldberg> Err, 0..92233

[02:45] <clsn> Yeah, but formatting of floats is a catastrophe in rakudo from what I've seen.

[02:47] <BenGoldberg> parrot's output is... well, not perfect, but at least not horribly wrong, considering how many significant bits I'm asking it to output.

[02:48] <BenGoldberg> jvm's, iirc, wasn't horrible either.

[02:48] <clsn> p: say pi.fmt('%.20f')

[02:48] <camelia> rakudo-parrot e4e862: OUTPUT«3.01.4159265358979e+19␤»

[02:48] <BenGoldberg> But that ".." in the formated string, that's just Wrong

[02:48] <clsn> That's slightly horrible.

[02:48] <clsn> m: say pi.fmt('%.20f')

[02:48] <camelia> rakudo-moar e4e862: OUTPUT«3.-1.09223372036855e+2␤»

[02:48] <clsn> So is that.

[02:49] <BenGoldberg> Yeah, that does suck

[02:49] <clsn> It's always the same string in moar; 92233720368548

[02:49] <clsn> Looks like List.pick uses nqp::rand_I and not rand, and I guess that doesn't respect srand.

[02:50] <BenGoldberg> You're right, I just noticed that.  Betcha there's an off by one error in moar, and it's reading beyond the end of the number.

[02:50] <clsn> I don't know why nqp::rand_I and not rand; maybe there's a good reason.

[02:51] <clsn> n: say pi.fmt('%.19f')

[02:51] <camelia> niecza v24-109-g48a8de3: OUTPUT«3.1415926535897900000␤»

[02:51] <japhb__> rand usually has very few actual random bits in many libc's?

[02:51] <BenGoldberg> p6: say pi.Rat

[02:51] <camelia> rakudo-jvm e4e862: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[02:51] <camelia> ..rakudo-parrot e4e862, rakudo-moar e4e862, niecza v24-109-g48a8de3: OUTPUT«3.141593␤»

[02:52] <BenGoldberg> nqp::rand returns a num, nqp::rand_I returns an int

[02:53] <BenGoldberg> Notice how turning a Num into a Rat throws away so many significant digits?  That's pretty suckey ;)

[02:53] <BenGoldberg> p6: say pi.Str.Rat

[02:53] <camelia> rakudo-parrot e4e862, rakudo-moar e4e862: OUTPUT«3.14159265358979␤»

[02:53] <camelia> ..rakudo-jvm e4e862: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[02:53] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«3.141593␤»

[02:53] *** regreg joined
[02:54] <BenGoldberg> Converting to Str first improves the situation on rakudo, but not niecza

[02:55] *** [particle]1 joined
[02:57] *** [particle] left
[03:07] <japhb__> p6: say ~pi.Rat

[03:07] <camelia> rakudo-jvm e4e862: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[03:07] <camelia> ..rakudo-parrot e4e862, rakudo-moar e4e862, niecza v24-109-g48a8de3: OUTPUT«3.141593␤»

[03:07] <japhb__> p6: say pi.Rat.perl

[03:08] <camelia> rakudo-jvm e4e862: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[03:08] <camelia> ..rakudo-parrot e4e862, rakudo-moar e4e862, niecza v24-109-g48a8de3: OUTPUT«<355/113>␤»

[03:08] <japhb__> Well, at least they're consistent

[03:08] *** rurban joined
[03:11] *** jnap left
[03:11] *** skids left
[03:15] *** Timbus joined
[03:27] *** skids joined
[03:41] *** rurban left
[03:58] *** thou left
[04:01] *** cbk joined
[04:06] *** [particle] joined
[04:09] *** [particle]1 left
[04:17] <cbk> What would be the best way to search a line of strings for \#\w+ ( example: #someWord) and put ALL of the matches into an array?

[04:18] <cbk> I have the following but it only works on the first match...

[04:18] <cbk> if $data ~~ m/  (\#\w+) / { @findings.push($/.Str); say "found: $/"; } say @findings;

[04:19] *** ArmBears joined
[04:21] *** ArmBears_ joined
[04:23] *** [particle]1 joined
[04:23] *** [particle] left
[04:27] *** ArmBears left
[04:31] *** [particle] joined
[04:33] *** [particle]1 left
[04:38] *** rurban joined
[04:52] <japhb__> p: my $data = "There are some #hashTags in this #string and I #want_them"; $data ~~ m:g/(\#\w+)/; $/.perl.say

[04:52] <camelia> rakudo-parrot e4e862: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/58YqdqoenO␤Unspace not allowed in regex␤at /tmp/58YqdqoenO:1␤------> [32mring and I #want_them"; $data ~~ m:g/(\#[33m⏏[31m\w+)/; $/.perl.say[0m␤»

[04:52] <japhb__> p: my $data = "There are some #hashTags in this #string and I #want_them"; $data ~~ m:g/('#'\w+)/; $/.perl.say

[04:52] <camelia> rakudo-parrot e4e862: OUTPUT«Match.new(orig => "There are some #hashTags in this #string and I #want_them", from => 47, to => 57, ast => Any, list => (Match.new(orig => "There are some #hashTags in this #string and I #want_them", from => 47, to => 57, ast => Any, list => ().list, ha…»

[04:53] <japhb__> p: my $data = "There are some #hashTags in this #string and I #want_them"; $data ~~ m:g/('#'\w+)/; $/.say

[04:53] <camelia> rakudo-parrot e4e862: OUTPUT«｢#want_them｣␤ 0 => ｢#want_them｣␤␤»

[04:54] <japhb__> p: my $data = "There are some #hashTags in this #string and I #want_them"; .say for $data ~~ m:g/('#'\w+)/;

[04:54] <camelia> rakudo-parrot e4e862: OUTPUT«False␤»

[04:57] *** lue left
[04:57] <japhb__> p: my $data = "There are some #hashTags in this #string and I #want_them"; $data ~~ m/[.*? ('#'\w+)]+/; $/.say

[04:57] <camelia> rakudo-parrot e4e862: OUTPUT«｢There are some #hashTags in this #string and I #want_them｣␤ 0 => ｢#hashTags｣␤ 0 => ｢#string｣␤ 0 => ｢#want_them｣␤␤»

[04:58] <japhb__> There you go.

[04:58] <japhb__> cbk: ^^

[05:02] <cbk> japhb_, ok so that IS what I was looking for.  I was looking into writing a grammar for it... making things harder then they needed to be.

[05:02] <cbk> Thank you very much.

[05:03] <cbk> Wish I knew more about perl6 regex and grammars!

[05:05] <cbk> japhb_++

[05:05] <cbk> or is that still a thing? (the ++)

[05:09] *** lue joined
[05:14] <cbk> japhb_, YES this is working real good: if $data ~~ m/[.*? ('#'\w+)]+/ { @findings.push($0); } say @findings.Str;

[05:14] <cbk> japhb_, Thanks again!

[05:23] *** [Sno] left
[05:27] <moritz> j: say 42

[05:27] <camelia> rakudo-jvm e4e862: OUTPUT«42␤»

[05:30] *** regreg left
[05:39] *** LingeringSouls joined
[05:40] *** grondilu left
[05:58] *** BenGoldberg left
[06:06] <lue> what does WAT stand for? I can't watch the video S99 links to.

[06:11] <moritz> lue: it's short what WHHAAAAAAAAAAAAAAAAAAAAAAT

[06:11] <lue> ah, I thought it might be "Why All This?" or something :)

[06:17] *** dayangkun left
[06:18] <japhb__> cbk, you're quite welcome.  :-)

[06:31] *** dayangkun joined
[06:46] *** rurban left
[06:47] *** [Sno] joined
[07:00] *** berekuk joined
[07:01] *** erkan joined
[07:11] *** berekuk left
[07:13] *** FROGGS_ left
[07:25] *** FROGGS_ joined
[07:31] <masak> morning, #perl6

[07:32] * masak .oO( Why All This Life, Universe, and Everything? )

[07:35] *** darutoko joined
[07:43] *** SamuraiJack__ joined
[07:47] *** rurban joined
[07:50] *** daniel-s left
[07:59] <pmichaud> morning, masak   /o

[07:59] <pmichaud> er,   o/

[08:02] *** zakharyas joined
[08:02] <pmichaud> off to bed, here

[08:04] *** denis_boyun joined
[08:07] *** frettled_ is now known as frettled

[08:08] <frettled> masak morning pmichaud, good.

[08:09] *** berekuk joined
[08:13] *** dmol joined
[08:15] *** SamuraiJack__ left
[08:17] *** raiph joined
[08:20] <jnthn> o/

[08:21] *** rurban left
[08:25] <jnthn> clsn, BenGoldberg: Note that r-m still has failing tests in sprintf.t, which may well relate to the issues you're seeing. Also that it wasn't much more than a month ago when it didn't even run the spectests at all. :)

[08:25] <FROGGS_> o/

[08:36] *** kaleem joined
[08:39] <timotimo> o/

[08:40] <jnthn> commute &

[08:42] <Ulti> headphones | tee <(commute --in park) > work

[08:43] *** denis_boyun left
[08:52] *** berekuk left
[08:56] *** rindolf joined
[08:57] *** sqirrel joined
[08:58] *** raiph left
[09:07] *** regreg joined
[09:17] *** rurban joined
[09:34] *** SamuraiJack__ joined
[09:46] *** dayangkun left
[09:48] *** kivutar joined
[09:50] *** rurban left
[09:50] *** kst left
[10:04] *** kivutar left
[10:08] <Ulti> out of interest what is meant to happen with the ... operator when the interval you pick only fractionally fits the final number in the sequence?

[10:08] <FROGGS_> it should complain about that I think

[10:09] <Ulti> at the moment it just hangs for me rather than complaining or just giving you all the numbers upto before the end

[10:13] <Ulti> https://gist.github.com/MattOates/8860147 an example

[10:14] <Ulti> oh if you wait long enough insane numbers come out

[10:14] <Ulti> I must really really reall be doing something super dumb

[10:19] <jnthn> You have to *match* the end point, not pass it...

[10:20] <jnthn> I think you can use * < 100 or so as an end point, though.

[10:25] *** pecastro joined
[10:28] *** regreg left
[10:32] <moritz> probably * >= @list.end

[10:36] <timotimo> the end point is supposed to give true for "this is the end"

[10:36] <timotimo> so for an increasing series, you'd want something like * > $foo

[10:37] <timotimo> why did i even start watching the ken ham / bill nye debate?

[10:39] <jnthn> timotimo: 'cus you miss your headache and want it back? :)

[10:39] <timotimo> that must be it

[10:40] <timotimo> there's something i find insanely unsettling about mr. ham's claims that we cannot assume that natural laws have been valid in the past, or at least have been the same way they are now

[10:41] <timotimo> he demonstrates this in many pieces of his argumentation, like "you can't trust radiometric dating, because you have to assume 1) ... 2) ... 3) that the rate of radioactive decay was the same back then as it is now"

[10:41] <timotimo> or "you can't trust the rings of a tree as proper information, because you weren't there when they formed!"

[10:44] <timotimo> also, i find it incredibly irritating that he claims that "the laws of logic" could only exist because there is some kind of creator

[10:44] <timotimo> that's just .... what ?!

[10:45] <moritz> that's indeed WTF

[10:46] <moritz> though there is indeed some serious physics/astronomy research that tries to find out if coupling constants have changed in the past

[10:46] <timotimo> interestingly, he says we have to be extra cautious about natural laws being not valid a few thousand years ago, but somehow the translation of the bible is absolutely, completely exact over the same amount of time?

[10:46] <moritz> (so far there's no evidence for that)

[10:46] <timotimo> it's a good thing that such an experiment has been started

[10:47] <moritz> also, http://xkcd.com/386/ :-)

[10:47] <timotimo> https://xkcd.com/154/

[10:48] <timotimo> but somehow it seems to me that no matter how much ground we can take away from people with such extraordinary beliefs (and pitifully few pieces of evidence), they *always* find something they can cling to and convince others with their rethoric capabilities

[10:48] <Ulti> timotimo: its true you can't assume evolution has always been the way it is now though, but really thats more of an argument of making it work faster further back in time :)

[10:48] *** crab2313 joined
[10:48] <timotimo> Ulti: this isn't only about evolution ... tree rings forming, bubbles in ice cores from drillings near the poles ...

[10:49] <Ulti> timotimo: what I dont understand is why they care so much... you can just say God invented evolution and from the start of the Earth knew that humans would come out as a product

[10:49] <timotimo> following this line of beliefs leads down an *incredible* rabbit-hole

[10:49] <timotimo> yes, you *could*, but that's not what's in Genesis

[10:49] <timotimo> and this person is the CEO of Answers in Genesis

[10:49] <Ulti> timotimo: yeah the young earth concept is fairly crazy, but thats what I mean there is nothing saying they have to think that

[10:50] <timotimo> well, apparently if you follow the bible literally (litterally? haha), you find not only the 6 24-hour days interpretation of the creation of the universe, but also the life times of all the major characters would line up to give a figure of about 6000 years age of the universe

[10:51] <Ulti> timotimo making Adam out of clay is consistent with Evolutionary theory :)

[10:51] *** fhelmberger joined
[10:52] <timotimo> yeah. "if eve wasn't formed from a rib stolen off of adam, why do men have one fewer rib than women?"

[10:52] <Ulti> there is a nice bit of the Bible that also says that a day for God is like a thousand days for humans too

[10:52] <Ulti> timotimo: we do

[10:52] <Ulti> well one fewer than many other male mammals

[10:53] <timotimo> that's amusing, but besides the point :)

[10:53] <timotimo> anyway, i'll dig into moarvm smallint work now

[10:54] <hoelzro> morning Perl6 folk

[11:02] * masak .oO( the reclusive Perl 6 folk, hiding in caves in the mountains )

[11:04] *** SamuraiJack__ left
[11:04] *** SamuraiJack__ joined
[11:07] <Ulti> I can't see anything about something like 1,4...*<9 in http://perlcabal.org/syn/S03.html#Range_and_RangeIter_semantics

[11:08] <Ulti> does 1,4...9 do what anyone expects?

[11:08] <jnthn> But ... is about sequences, not ranges

[11:08] <Ulti> sure but I can't do :by on a range

[11:08] <Ulti> and if you want to segment up a list this is nice syntax that's kind of not for you even if you expect it to be

[11:26] *** Ven joined
[11:38] *** FROGGS_ left
[11:52] <Ven> Uuuh. The bug that I noticed last time with perl6-debug disappeared. And I didn't even restart the comp ._. (I guess that's good news, though)

[11:53] <Ven> good news is that my program still can't run with perl6-debug. Need a new test case ...

[12:01] *** denis_boyun joined
[12:09] *** dalek left
[12:10] *** dalek joined
[12:10] *** ChanServ sets mode: +v dalek

[12:15] *** sqirrel left
[12:22] *** Adriaaan joined
[12:29] *** zakharyas left
[12:31] *** crab2313 left
[12:32] *** zakharyas joined
[12:34] *** zakharyas left
[12:35] *** zakharyas joined
[12:38] *** stevan_ joined
[12:38] <timotimo> got some LHF for someone

[12:39] *** ArmBears_ left
[12:39] <timotimo> the nqp test suite is lacking bigint tests for radix_I and tonum_I

[12:39] <timotimo> corecatcher: ^ sounds interesting?

[12:40] <timotimo> also lacks tests for mod_I

[12:43] <timotimo> i just got a full rakudo compile with smallbigint support

[12:43] *** SamuraiJack__ left
[12:43] *** SamuraiJack__ joined
[12:44] *** SamuraiJack__ left
[12:44] *** SamuraiJack__ joined
[12:46] <timotimo> now i made it through the test suite, but forgot to use the summary script, so i won't see if any bigint related fails are happening m)

[12:46] *** SamuraiJack__ left
[12:46] *** SamuraiJack joined
[12:51] <hoelzro> what determines which perl6-? is installed as perl6?

[12:53] <yakudza> hoelzro, #which perl6 maybe ?

[12:53] <hoelzro> yakudza: sorry?

[12:54] <timotimo> whichever is the first one in --backend= or whichever is found first (usually jvm)

[12:54] <hoelzro> ahhhh

[12:54] <timotimo> but it's just a symlink, so AFAICT you can just redirect that

[12:55] <hoelzro> I'm looking at ufo (I'm trying rakudo-star modules with perl6-m and seeing which don't work), and I'm wondering how the case should be handled when the user has multiple backends installed

[12:55] <hoelzro> (although that's probably very infrequent for regular users)

[12:56] *** skids left
[12:57] *** xinming_ joined
[12:57] <hoelzro> so if the backend is parrot, ufo should write a makefile that generates pir files

[12:57] <hoelzro> hmm

[12:58] <hoelzro> I'm guessing that it should just correspond to the backend that's running

[12:58] <hoelzro> and if a user wants to explicitly install for a given backend, they can just do perl6-j ufo

[12:59] <timotimo> the GSoC project "let rakudo handle precomp" would be helpful here

[12:59] <hoelzro> timotimo: link?

[12:59] <timotimo> http://wiki.enlightenedperl.org/gsoc2014/ideas

[13:00] *** xinming left
[13:01] <hoelzro> timotimo: so would that entail a backend-agnostic way of generating precompiled modules from an input?

[13:01] <hoelzro> ex. perl6 --compile-module Module.pm > Module.pmc

[13:01] <hoelzro> (.pmc is taken though, right?)

[13:02] <jnthn> Well, in the end it's just gonna be perl6 --install Foo.pm, once we get the comp unit repo stuff in place?

[13:03] <timotimo> hoelzro: i think so

[13:03] <timotimo> with what jnthn said

[13:03] <hoelzro> I see

[13:03] <hoelzro> so ufo will go away?

[13:05] <timotimo> if rakudo will handle dependencies, as well, yeah

[13:05] <timotimo> but setting up a little test runner and stuff would still be neat

[13:10] *** kaare_ left
[13:12] <hoelzro> for the time being, though, ufo is the way to go, right?

[13:12] <jnthn> hoelzro: yes

[13:12] <hoelzro> ok

[13:13] <hoelzro> now I know what to work on tomorrow =)

[13:13] *** telex left
[13:14] *** telex joined
[13:19] *** ajr joined
[13:19] *** sqirrel joined
[13:19] *** FROGGS joined
[13:19] *** ajr is now known as Guest89848

[13:20] *** Guest89848 is now known as ajr_

[13:20] *** kivutar joined
[13:29] *** kbaker joined
[13:32] *** kurahaupo_mobile joined
[13:54] *** mtk left
[13:57] *** mtk joined
[13:57] <timotimo> if someone wants to spent a little bit of time with moarvm, the jnthn_bigint_opt branch causes a few test failures in the rakudo spectest suite: t/spec/S03-operators/arith.t tests 2-3 (the rest fail in master, too); t/spec/S03-operators/numeric-shift.t (only new failures); t/spec/integration/lazy-bentley-generator.t (1 failure on the branch, 0 on master)

[13:58] <timotimo> you would have to look at src/math/bigintops.c; especially the bigint_shl and bigint_shr opcodes seem to be pretty terribly wrong when it comes to negative numbers

[14:01] *** sqirrel left
[14:06] *** mavcunha joined
[14:18] *** SamuraiJack left
[14:18] *** SamuraiJack joined
[14:22] *** SamuraiJack left
[14:22] *** SamuraiJack joined
[14:22] *** Alina-malina left
[14:23] *** kaleem left
[14:23] *** prevost joined
[14:24] *** Alina-malina joined
[14:29] *** skids joined
[14:32] *** thou joined
[14:34] *** jnap joined
[14:40] *** fhelmberger left
[14:41] *** treehug88 joined
[14:43] *** sqirrel joined
[14:46] *** johnmilton joined
[14:46] *** johnmilton left
[14:48] *** bluescreen10 joined
[14:49] *** denis_boyun left
[14:49] *** ggoebel1115 joined
[14:53] *** ggoebel1114 left
[14:53] *** stevan_ left
[14:56] *** btyler joined
[14:57] *** tengignick joined
[14:59] *** tengignick left
[15:06] *** benabik joined
[15:13] *** regreg joined
[15:28] *** benabik left
[15:33] <timotimo> d'oh

[15:33] <timotimo> i started the benchmark run and it immediately failed

[15:33] <timotimo> i wrote nqp-moar instead of nqp-moarvm

[15:33] <timotimo> so it didn't even build a single backend :(

[15:34] <masak> from the bright side, it ran very quickly :>

[15:35] <timotimo> i ran somewhat quickly, too

[15:35] <timotimo> 5.3 km/h average

[15:37] <PerlJam> 5.3km/h isn't much of a run.  More like a fast walk.

[15:38] <timotimo> yes

[15:38] <timotimo> it was a walk

[15:38] <timotimo> i'm not very good at walking slowly, or at a "normal" pace

[15:44] *** sqirrel left
[15:49] * moritz just got the "jQuery Cookbook", and its author is literally "jQuery community Experts".

[15:50] * moritz likes that

[15:54] *** Woodi___2 joined
[15:54] *** Woodi___2 left
[15:58] *** Woodi joined
[15:59] *** Psyche^_ joined
[16:02] *** Psyche^ left
[16:08] *** mtk left
[16:10] <timotimo> hm, surprisingly little activity in perl6land today

[16:11] <timotimo> seems like i'll have to look into these test failures myself later :\

[16:11] <jnthn> timotimo: Well, I'm doing $dayjob bits today :)

[16:14] *** mavcunha left
[16:18] *** SamuraiJack left
[16:19] *** denis_boyun joined
[16:21] *** mtk joined
[16:24] *** [Sno] left
[16:41] *** fhelmberger joined
[16:45] *** fhelmberger left
[16:46] *** zakharyas left
[16:53] *** smls joined
[16:55] <masak> sorry, I've been stealing jnthn today ;)

[16:56] <smls> jnthn: "in the end it's just gonna be perl6 --install Foo.pm" ... Are you sure it's wise to tie module distribution/installation so closely to the language implementation?

[16:57] <smls> Doesn't experience with other languages suggest that packaging/distribution/installation tools will want (need?) to evolve even long after the language is stable?

[16:58] <timotimo> you have?

[16:59] <TimToady> smls: that's just a SMODI

[17:00] <smls> A what?

[17:00] <nwc10> bad masak, no curry

[17:01] <TimToady> or a SMOIOC

[17:01] <TimToady> which I guess is a SMOCLONE

[17:02] <timotimo> small matter of dependency injection?

[17:02] <timotimo> and inversion of control for the second one?

[17:04] <jnthn> iirc the design is such you can change what --install means

[17:06] <smls> ah

[17:07] <TimToady> jnthn: but who is "you" there?

[17:10] <TimToady> some days it's much easier for me to play the part of a confused person...

[17:10] <TimToady> this would be one of those days

[17:10] * colomon is not playing a part far too often...

[17:11] *** pecastro left
[17:11] *** prevost left
[17:14] <jnthn> TimToady: "somebody other than Rakudo compiler devs" :)

[17:17] <smls> For what it's worth, I think Python has arrived at a pretty good set of distribution/installation tools (pip, virtualenv, ...).

[17:17] <smls> But that wasn't always the case; it evolved separately from the language and asserted itself against competing solutions "in the market", so to speak.

[17:17] <btyler> althougn not without some growing pains (easy_install, etc)

[17:17] <btyler> *although

[17:18] <smls> The point is, some of the use-cases covered by the moden tools were probably not even anticipated by the original creators of Python.

[17:18] *** ajr_ left
[17:18] <geekosaur> what is this "-s"

[17:19] *** ajr joined
[17:19] *** ajr is now known as Guest28458

[17:19] *** Guest28458 is now known as ajr_

[17:25] *** denis_boyun left
[17:29] <timotimo> i would really love to see rakudo come with a nice virtualenv-like solution

[17:35] *** ajr_ left
[17:39] *** alester joined
[17:47] <raydiak> morning

[17:49] *** molaf joined
[17:52] *** [Sno] joined
[17:55] <timotimo> benchmarking rakudo-jvm takes sooooo looooooong >_<

[17:56] <timotimo> actually, i think after that i still have set it up to benchmark nqp-{moarvm,parrot,jvm}

[18:10] <raydiak> I have tried for a couple days to answer this question on my own, but I feel like I'm just wasting time spinning my wheels: is there any way to control how my class behaves in list/item/sink context? specifically I want a subclass of Array to not flatten

[18:11] <moritz> raydiak: well, sink context simply calls method sink

[18:12] <moritz> controlling flattening isn't that easy, I fear

[18:12] <moritz> I'll think about it a bit; dinner first&

[18:12] <timotimo> aye, that indeed seems like a problematic spot

[18:12] <raydiak> moritz: thanks, I'll add that to my notes; I guess my question assumed the answer would be the same for any context...list is the one I have problems with

[18:12] <timotimo> would "is Positional" be a big contributor to that?

[18:13] *** rurban joined
[18:13] <timotimo> i seem to recall at least one piece of code checking for istype Positional before flattening

[18:13] * raydiak cannot figure out what positional even does...the content of core/Positional.pm is not helpful

[18:14] <raydiak> of course I mean "does" from an internals standpoint...I understand what the specs say about it

[18:14] <raydiak> List and Array have methods and private attributes for flat and flattens and such, but overriding them in my class seems to have no effect

[18:15] <raydiak> and reading the comments, it looks like $!flattens has more to do with whether it flattens it's contents, not whether it itself flattens

[18:16] *** telex left
[18:16] *** ajr joined
[18:17] *** ajr is now known as Guest9937

[18:17] <timotimo> well, accessing a private variable will never cross class boundaries

[18:17] *** Guest9937 is now known as ajr_

[18:17] <timotimo> if you access $!flattens in a subclass, you'll get an error, if you define $!flattens in your subclass, it'll be a separate attribute

[18:18] <timotimo> you can nqp::bindattr(self, ParentClass, '$!flattens', 1) and see if that helps any

[18:18] <timotimo> but that's rakudo-specific unfortunately

[18:19] <raydiak> erm...duh; thank you...guess I'm losing track of the "little" stuff in the hunt for my big white whale :P

[18:19] <timotimo> ;)

[18:19] <ajr_> apropos this morning's discussion of distribution tools, I have a little script for downloading & installing rakudo*

[18:19] <timotimo> er, hold on

[18:19] <ajr_> If anyone wants it, they're welcome to it.

[18:19] <timotimo> i seem to remember a discussion very recently about calling private methods in your parent (or child) class

[18:20] <timotimo> i think it didn't work for attributes, though

[18:20] <raydiak> yeah, using trusts

[18:20] <timotimo> i thought it would work without trusts

[18:20] <raydiak> oh that'd be neat

[18:20] <timotimo> ah, no, that's only for if you're in the same class, but try to access a private method of a different instance of your same class

[18:20] <timotimo> i think you're right

[18:21] <timotimo> i think i ought to organise some dinner and maybe do some $dayjob afterwards

[18:21] <timotimo> still benchmarking rakudo-jvm >_>

[18:21] <FROGGS> I am done with $dayjob \o/

[18:22] <raydiak> but again, I don't think $!flattens actually does what I want anyway, if I'm reading correctly

[18:22] <timotimo> may be, aye

[18:22] <raydiak> thank you for the advice timotimo, enjoy dinner :)

[18:22] <timotimo> you can inspect instances with .DUMP, btw

[18:22] <timotimo> it should display the value of flattens and other private attributes clearly

[18:23] <timotimo> it's not too late to go to the less distant grocery store \o/

[18:23] <timotimo> i'ma gettin' me some cukes, aaaaaw yiss!

[18:23] <raydiak> cool, I'll try DUMP while I'm poking around at things

[18:23] <nwc10> FROGGS: is qx{} the only pipe related thing that Panda needs? Or does it use others, but only for rare things?

[18:26] *** SamuraiJack joined
[18:31] *** SamuraiJack left
[18:38] *** smls left
[18:40] <raydiak> r: class Foo is Array { method mkfoo(|a) { my $self = self.new(|a); nqp::bindattr($self, List, '$!flattens', False); return $self; } }; my @foo = (^3).map: {Foo.mkfoo($_,$_)}; say @foo.perl;

[18:40] <camelia> rakudo-moar e4e862: OUTPUT«P6opaque: no such attribute '$!flattens'␤  in method mkfoo at /tmp/tmpfile:1␤  in block  at /tmp/tmpfile:1␤␤»

[18:40] <camelia> ..rakudo-parrot e4e862: OUTPUT«Can not bind attribute '$!flattens' declared in class 'List' with this object␤  in method mkfoo at /tmp/tmpfile:1␤  in block  at /tmp/tmpfile:1␤␤»

[18:40] <camelia> ..rakudo-jvm e4e862: OUTPUT«java.lang.RuntimeException: No such attribute '$!flattens' for this object␤  in method mkfoo at /tmp/tmpfile:1␤  in block  at /tmp/tmpfile:1␤␤»

[18:41] *** zakharyas joined
[18:41] <raydiak> what am I doing wrong?

[18:47] *** araujo joined
[18:53] <timotimo> does Array derive from List?

[18:53] <timotimo> p: say Array.mro;

[18:53] <camelia> rakudo-parrot e4e862: OUTPUT«No such method 'mro' for invocant of type 'Array'␤  in block  at /tmp/leSYYYnZaK:1␤␤»

[18:53] <timotimo> p: say Array.^mro;

[18:53] <camelia> rakudo-parrot e4e862: OUTPUT«(Array) (List) (Iterable) (Cool) (Any) (Mu)␤»

[18:53] <timotimo> ah, indeed.

[18:53] <timotimo> huh.

[18:56] <raydiak> I can at least feel good that I didn't waste all this time on an easy problem :) sometimes I get in these jams and when I finally ask, someone has the answer in 5 seconds

[18:57] <timotimo> i know that feel

[18:57] <timotimo> i also often feel bad for nagging other perl6ers with my problems ;)

[18:58] <TimToady> trying to make a non-flattening array type by derivation from Array just feels all wrong to me

[18:58] <TimToady> arrays naturally are itemized by the itemizing process of putting them in a $ container

[18:59] *** nsh joined
[18:59] <TimToady> that's a user decision, not the class decision

[18:59] *** nsh left
[18:59] *** nsh joined
[18:59] <TimToady> at best, you could do a has instead, possibly delegation to an Array

[19:00] *** grondilu joined
[19:00] <raydiak> when I put it in a $, that works fine...just not when I do @ary.push: DontFlattenMe.new()

[19:00] <grondilu> std: say { { $a ~ $^b }($^a) }("foo");

[19:00] <camelia> std 09dda5b: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable $a is not predeclared at /tmp/E6fDSa03vD line 1:␤------> [32msay { { [33m⏏[31m$a ~ $^b }($^a) }("foo");[0m␤Check failed␤FAILED 00:01 126m␤»

[19:01] <TimToady> functions and methods (such as new()) return parcels, which are officially uncommitted

[19:02] <grondilu> std: say { .($^a) given { $a ~ $^b } }("foo");

[19:02] <camelia> std 09dda5b: OUTPUT«ok 00:01 126m␤»

[19:02] <grondilu> rn: say { .($^a) given { $a ~ $^b } }("foo");

[19:02] <TimToady> you could have the constructor itemize self, but then it'd probably leak out other places

[19:02] <raydiak> wait, what if I just tack '.item' on to the return from the constructor...or all the methods?

[19:02] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862, niecza v24-109-g48a8de3: OUTPUT«foofoo␤»

[19:02] <raydiak> right

[19:03] <TimToady> well, it's not "self" to the constructor, but what bless returns

[19:03] <skids> r: say uint111.^mro # on non-ICU star this gives "no ICU lib loaded" for any bogus uint size, but not for int.

[19:03] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Undeclared routine:␤    uint111 used at line 1␤␤»

[19:03] <TimToady> that'd be more or less what [...] returns

[19:05] <TimToady> of course, you could also just return an ordinary array, put .item on where it's called, and then it's documented to the user :)

[19:05] <raydiak> this is true :)

[19:05] <TimToady> or define a .push-items

[19:06] <TimToady> which just push with a ** instead of a *

[19:06] <TimToady> or, if lol were implemented, push lol ...

[19:07] <raydiak> I know we already had this discussion, but is there something more appropriate than Array, which does not flatten?

[19:07] <TimToady> what do you want it for?

[19:07] <raydiak> vectors and matrices

[19:08] <raydiak> japhb's Math::ThreeD proposal...I've put a lot of work in on it

[19:09] <TimToady> when *do* you want to trate them as plural rather than singular?

[19:09] <TimToady> *treat

[19:10] <raydiak> probably no time, except when they do a zen slice explicitly or something

[19:10] <TimToady> there are lots of objects that are mostly singular on the outside, and plural on the inside

[19:10] <TimToady> we don't generally try to force them into the Array mold

[19:11] *** darutoko left
[19:11] <raydiak> it also needs to be fast and use native types when they are more fully working

[19:11] <TimToady> these guys sound like items that happen to have shaped arrays on the inside, but it's a has-a relationship, not an is-a relationship

[19:11] <TimToady> sure, I have no problem with speed :)

[19:12] <TimToady> the compiler is supposed to be smart about native attributes

[19:12] <timotimo> .o( he doesn't have a problem with drugs^Wspeed, he just doesn't get them^Wit )

[19:12] <raydiak> :)

[19:14] <TimToady> I think this will all become much clearer when we actually have shaped arrays

[19:14] <timotimo> i'm looking forward to that. and native/packed arrays

[19:14] <TimToady> anyone wanna implement S09 this weekend? :D

[19:15] <raydiak> that'd be great...right now the matrices are just implemented as a single array with overloaded subscripting to make it "look" 2D

[19:15] <PerlJam> I sometimes wonder how hard it would be to wire the C bits of PDL to rakudo

[19:15] <timotimo> i wonder if we could do better than that :P

[19:15] <TimToady> raydiak: well, that's basically all APLish languages ever do :)

[19:15] <timotimo> (though all i know about PDL is that it's basically the NumPy equivalent in Perl land)

[19:16] <PerlJam> timotimo: you mean NumPy is the PDL equivalent in python-land  :)

[19:16] <raydiak> TimToady: thanks; I feel less like it's an ugly hack, then

[19:17] <timotimo> PerlJam: whatever :)

[19:17] <TimToady> typical data in, say, J, is a number of dimensions, followed by the sizes of each dimension, followed by a flat list of all the values

[19:18] <timotimo> i'm up to nqp-jvm now \o/

[19:19] <TimToady> so a map over such a shaped array doesn't even have to consider the dimensionality, it just skips dimensional info and maps the flat part

[19:19] <raydiak> hmmm...that sort of structure might be good to put reusably in a separate module from this math stuff I'm working on

[19:19] <TimToady> it is a view that is very antithetical to laziness, but we've already said that shaped arrays are probably not lazy at all

[19:20] <TimToady> it might be what we actually want under shaped arrays most of the time

[19:20] <timotimo> i'm expecting the underlying data structure to look kind of like that

[19:20] <timotimo> numpy has a concept of "strides"

[19:21] <timotimo> which i believe will allow you to map any data ordering (C style or Pascal style, for example) without much extra code

[19:21] <TimToady> yes, well, that's a way to optimize a dim map into a C-ish pointer-increment notion

[19:22] <timotimo> you seem to already know more about it than i do :D

[19:22] <timotimo> so i'll shut up and start cooking

[19:22] <TimToady> when you think about it, the strides are just really cumulative dimensions small than this one

[19:22] <raydiak> save me a piece of cucumber :)

[19:22] <timotimo> cucumber is for breakfast tomorrow :)

[19:23] <raydiak> well fine then...I seem to end up here every day lately anyway

[19:23] <TimToady> shaped arrays with extensible dimensions will, of course, need different treatment

[19:24] <TimToady> we can still do the full arrays of arrays thing internally at need, with loss of efficiency

[19:24] <TimToady> but the *semantics* of shaped arrays stay the same

[19:24] <TimToady> such as it being the natural leaf mapping for hypers

[19:24] * TimToady is writing like his fever is going back up...which it probably is...

[19:25] <raydiak> idk how fast it'd be, but you could do the same mapping over a variable-length list, and splice things in/out...would just have to keep track of where the dimension breaks are as they move

[19:26] <TimToady> sounds much slower than an appropriate AoA structure internally

[19:26] <TimToady> would probably save memory though

[19:26] <TimToady> but that approach doesn't allow for ragged dimensions either

[19:27] <raydiak> it'd get messy, that's for sure

[19:28] <raydiak> what are arrays, internally? linked lists? lookup tables? or I suppose that's up to the specific backend...???...

[19:28] <skids> I always wonders if DFAs for translating indices to scattered pointer/addresses could be compiled with JIT-like speed and reliable performance bounds.

[19:29] <skids> Where it matters of course is when you pass that array to a library with a continuous memory model for arrays.

[19:30] <skids> (last sentence IRT raydiak)

[19:31] <raydiak> oh, right...I always forget that we have all these FFI/nativecall considerations

[19:32] <skids> Well, it also matters if you're compiler/JIT is mature enough to tackle SIMD instructions.

[19:32] <moritz> I'm pretty sure the parrot backend implements arrays as a continuous chunk of memory

[19:33] <moritz> but if you don't use a natively typed array, the elements in there are containers, which means pointers

[19:33] <raydiak> got it

[19:35] <TimToady> pointers are just native containers :)

[19:35] *** jnap left
[19:35] <TimToady> well, C native, not JVM native :)

[19:38] <PerlJam> Is there a way to get a space in a character class?  I thought  <[ ' ' A..Z ]>  might work, but it appears not.  Do I have to use a different representation like hex or something?

[19:38] <moritz> \  maybe?

[19:38] <moritz> r: say ' ' ~~ /<[\ ]>/

[19:38] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«｢ ｣␤␤»

[19:39] <PerlJam> doh!  Overlooked the obvious again 

[19:39] <PerlJam> thanks moritz++

[19:39] <raydiak> note to self: '\ ' is not an unspace in a regex

[19:42] * raydiak goes to splatter '.item' all over the Math::ThreeD branch of Pray

[19:43] <timotimo> test

[19:43] <FROGGS> ok 1 - 

[19:43] <moritz> plan 1..1;

[19:43] <FROGGS> s/;//

[19:43] <FROGGS> :P

[19:45] *** Sqirrel joined
[19:45] *** kst joined
[19:47] <dalek> rakudo/wip-openpipe: 90b3d61 | jnthn++ | tools/build/create-jvm-runner.pl:

[19:47] <dalek> rakudo/wip-openpipe: Fix JVM runner install on Win32.

[19:47] <dalek> rakudo/wip-openpipe: review: https://github.com/rakudo/rakudo/commit/90b3d61a41

[19:47] <dalek> rakudo/wip-openpipe: 2ce599a | raydiak++ | docs/architecture.html:

[19:47] <dalek> rakudo/wip-openpipe: Fix typo

[19:47] <dalek> rakudo/wip-openpipe: review: https://github.com/rakudo/rakudo/commit/2ce599a7a0

[19:47] <dalek> rakudo/wip-openpipe: e4e8625 | moritz++ | docs/architecture.html:

[19:47] <dalek> rakudo/wip-openpipe: Merge pull request #251 from raydiak/nom

[19:47] <dalek> rakudo/wip-openpipe: 

[19:47] <dalek> rakudo/wip-openpipe: Just a trivial typo fix

[19:47] <dalek> rakudo/wip-openpipe: review: https://github.com/rakudo/rakudo/commit/e4e8625db5

[19:47] <dalek> rakudo/wip-openpipe: cdb7dfa | (Tobias Leich)++ | / (2 files):

[19:47] <dalek> rakudo/wip-openpipe: Merge branch 'nom' of github.com:rakudo/rakudo into wip-openpipe

[19:47] <dalek> rakudo/wip-openpipe: review: https://github.com/rakudo/rakudo/commit/cdb7dfa02d

[19:49] *** jnap joined
[19:51] *** nsh_ joined
[19:52] *** nsh_ left
[19:53] <timotimo> wat.

[19:53] <timotimo> i thought my connection w

[19:53] <timotimo> yeah. it was.

[19:53] <timotimo> ./bench time rakudo-moar/e4e8625 rakudo-parrot/e4e8625 rakudo-jvm/e4e8625     20070,57s user 499,63s system 155% cpu 3:40:35,32 total

[19:53] <timotimo> >_<

[19:53] *** nsh left
[19:55] *** nsh_ joined
[19:56] *** nsh_ left
[19:56] *** nsh_ joined
[19:57] *** colomon left
[19:57] *** nsh_ left
[20:03] <FROGGS> http://video.fosdem.org/2014/K3201/Saturday/

[20:04] *** xenoterracide_ left
[20:08] <dalek> Heuristic branch merge: pushed 465 commits to rakudo/eleven by FROGGS

[20:08] *** nsh_ joined
[20:08] *** nsh_ left
[20:08] *** nsh_ joined
[20:09] <dalek> panda/eleven: 41a73f3 | tadzik++ | / (2 files):

[20:09] <dalek> panda/eleven: Merge pull request #60 from FROGGS/master

[20:09] <dalek> panda/eleven: 

[20:09] <dalek> panda/eleven: use $*EXECUTABLE_NAME instead of hard-coded 'perl6'

[20:09] <dalek> panda/eleven: review: https://github.com/tadzik/panda/commit/41a73f3e2a

[20:09] *** dalek left
[20:09] *** nsh_ left
[20:09] <FROGGS> sorry dalek

[20:10] *** nsh_ joined
[20:10] *** dalek joined
[20:10] *** ChanServ sets mode: +v dalek

[20:13] *** grep0r joined
[20:13] <vendethiel> hahahaha

[20:14] *** xenoterracide joined
[20:16] <dalek> rakudo/eleven: 1e9716d | (Tobias Leich)++ | tools/build/Makefile- (2 files):

[20:16] <dalek> rakudo/eleven: build CompUnitRepo on moarv/jvm too

[20:16] <dalek> rakudo/eleven: review: https://github.com/rakudo/rakudo/commit/1e9716db65

[20:17] *** regreg left
[20:24] <dalek> panda/eleven: 2085f7b | (Tobias Leich)++ | lib/Panda/Fetcher.pm:

[20:24] <dalek> panda/eleven: moar does not like to take a substr OOB

[20:24] <dalek> panda/eleven: review: https://github.com/tadzik/panda/commit/2085f7bfd2

[20:24] *** rjbs joined
[20:25] <rjbs> Whoops, I never came back after freenode's ddos!

[20:25] <rjbs> Anyway, I just wanted to note that there's a .cool TLD now, and perl6.cool is probably available...

[20:26] <dalek> panda/eleven: f1b0035 | (Tobias Leich)++ | lib/Panda/Common.pm:

[20:26] <dalek> panda/eleven: fix spello

[20:26] <dalek> panda/eleven: review: https://github.com/tadzik/panda/commit/f1b00350cd

[20:29] <timotimo> rjbs: that's not bad!

[20:29] <timotimo> rjbs: is it prohibitively expensive?

[20:29] <rjbs> I'm afraid I don't know any .cool registrars offhand.

[20:30] * moritz knows a registrar that will try to sign up for any TLD

[20:30] <timotimo> http://www.donuts.co/tlds/ - these people have .cool 

[20:30] <dalek> panda/eleven: 659b62b | (Tobias Leich)++ | lib/Panda/ (2 files):

[20:30] <dalek> panda/eleven: add comptarget(), and also moarvm fileext/target

[20:30] <dalek> panda/eleven: review: https://github.com/tadzik/panda/commit/659b62be3e

[20:30] <rjbs> Oops, a few weeks left.

[20:30] <rjbs> Well, now you've got the info to get in line!

[20:30] <timotimo> it seems like the "sunrise" thing is an auction kind of deal

[20:31] <timotimo> i'd hazard a guess that if we go to the auction and say "we want perl6" someone's going "hey! someone wants perl6! i should get it for as expensive as they are willing to pay, add a bunch more and then offer them an even worse price for it!"

[20:32] *** zakharyas left
[20:33] *** treehug88 left
[20:36] *** treehug88 joined
[20:38] *** xenoterracide left
[20:40] <FROGGS> funny, panda fails on moar like it did once or twice on parrot

[20:41] *** SamuraiJack joined
[20:45] <moritz> "spectacularly"?

[20:45] <FROGGS> no

[20:45] <FROGGS> it does not compile to mbc when invoked via bootstrap.pl

[20:45] <FROGGS> but it does when I do the steps manually

[20:46] <FROGGS> shell() return non-zero in the failing case

[20:46] <FROGGS> but I don't know why yet

[20:49] *** nsh_ left
[20:49] *** nsh_ joined
[20:49] *** nsh_ is now known as nsh

[20:50] *** xenoterracide joined
[20:56] *** colomon joined
[20:56] *** Timbus left
[20:58] *** Timbus joined
[20:58] *** xinming_ left
[20:59] *** virtualsue joined
[21:01] *** stevan_ joined
[21:01] *** rindolf left
[21:01] *** jnap left
[21:02] *** Timbus left
[21:06] <itz> grrr many (most?) of the FOSDEM videos are unwatchable

[21:07] <btyler> itz: for jnthn's the sound sorts itself out after 5 minutes or so

[21:07] <timotimo> yup

[21:07] <timotimo> after half an hour, there's some buzzing again

[21:08] <btyler> also: jnthn - awesome FOSDEM presentation. a small request to repeat audience questions into the mic in the future :)

[21:09] *** Timbus joined
[21:09] <itz> I was at jnthn's talk and it was excellent and shall watch again

[21:11] *** beastd joined
[21:11] <grondilu> rn: say { .($^a) given { $a ~ $^b } }("foo");

[21:11] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862, niecza v24-109-g48a8de3: OUTPUT«foofoo␤»

[21:11] *** regreg joined
[21:12] <grondilu> oops, bad history call

[21:12] <timotimo> ... huh?

[21:13] <timotimo> i don't understand that.

[21:13] <grondilu> I pressed "upper-arrow + return" in the wrong screen window :/

[21:14] <grondilu> sorry

[21:14] <timotimo> i mean i don't understand why it doesn't complain about improper number of arguments

[21:14] <timotimo> i mean

[21:14] <timotimo> oh

[21:14] <timotimo> given actually sets the $_ to a block

[21:15] <grondilu> yeah that's related to something I wanted to try for runge-kutta on RC

[21:15] <grondilu> it won't work, though

[21:15] <timotimo> mh

[21:16] *** regreg left
[21:16] *** treehug88 left
[21:17] <grondilu> because apparently I can't put self-declared parameters at a non-first place

[21:17] <timotimo> huh?

[21:17] <grondilu> std: say { $a + $^a }

[21:17] <camelia> std 09dda5b: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable $a is not predeclared at /tmp/wg6uDlfNl9 line 1:␤------> [32msay { [33m⏏[31m$a + $^a }[0m␤Check failed␤FAILED 00:01 125m␤»

[21:17] <timotimo> well, there you just don't have a $a

[21:18] <timotimo> $^a will not cause a $a to plop into existence

[21:18] *** treehug88 joined
[21:18] <timotimo> but you can write $^a as many times as you like

[21:18] <grondilu> std: say { $^a + $a }

[21:18] <camelia> std 09dda5b: OUTPUT«ok 00:01 125m␤»

[21:18] <timotimo> er ... huh?

[21:18] <timotimo> that doesn't seem sensible to me.

[21:19] <grondilu> you don't have to use $^ several times.  Only once is required

[21:19] <timotimo> i don't like that :(

[21:19] <grondilu> well, it saves some characters

[21:19] <timotimo> at other times, the twigil doesn't change so readily

[21:20] <jercos> well there's the whole $.a/$!a thing...

[21:20] <timotimo> yes, but that's not just "removing a twigil"

[21:21] <grondilu> the ^ is for declaring.  You usually declare things only once, don't you?

[21:21] <lue> grondilu: where does it say that $^a is only needed once?

[21:21] <timotimo> those are implicitly declared, though

[21:21] <lue> note that    say { $a + $^a }    will never work, because one-pass parsing I believe.

[21:22] <grondilu> lue: I don't know where it is specced, but that's how it currently works

[21:22] <TimToady> needing to repeat a parameter is a very good sign that it's time to declare a formal sig

[21:22] <timotimo> hmm.

[21:22] <lue> r: say {$^a + $a}(3)

[21:22] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«6␤»

[21:22] <lue> ew

[21:23] <lue> r: my $a = 5; say {$^a + $a}(3)

[21:23] <grondilu> I could have used pointy block, but calling them requires parenthesis

[21:23] *** virtualsue left
[21:23] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«6␤»

[21:23] <jercos> r: say {[+] $^a x 2}(3)

[21:23] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«33␤»

[21:23] <jercos> erm

[21:23] <jercos> r: say {[+] $^a xx 2}(3)

[21:23] <lue> r: my $b = 5; say {$^a + $b}(3)

[21:23] <grondilu> r: say (-> $a { $a + $a })(2)

[21:23] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«6␤»

[21:23] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«8␤»

[21:23] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«4␤»

[21:23] <grondilu> ??

[21:23] <lue> r: my $b = 5; say {$^a + $b}(3)

[21:23] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«8␤»

[21:24] <jercos> or, y'know...

[21:24] <jercos> r: my $a = 5; say {$_ + $a}(3)

[21:24] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«8␤»

[21:24] <jercos> but that would be too easy >.>

[21:24] <lue> TimToady: I really don't like how $^a clobbers outside $a vars.

[21:24] <grondilu> jercos: that would not have worked with what I had in mind of runge-kutta

[21:25] <jercos> lue: clobbers?

[21:25] <lue> r: my $a = 5; say {$^a + $a}(3); say {$^b + $a}(3);

[21:25] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«6␤8␤»

[21:25] <jercos> ^

[21:25] <timotimo> agreed.

[21:25] <jercos> Looks clobberless to me...

[21:26] <timotimo> it ... does?

[21:26] <jercos> Ideantical to -> $a {}

[21:26] <lue> if  $^a  were spelled  my $a  then I'd be fine, but that's a nasty side effect for a twigil

[21:26] <lue> $^a should always need to be spelled $^a, in my opinion.

[21:26] <jercos> In my mind for it to "clobber", the second example there would have to return 6.

[21:26] <timotimo> i agree with lue, fwiw

[21:27] <lue> jercos: it does clobber what the name "$a" refers to

[21:27] <jercos> But only within the scope of that block.

[21:27] <grondilu> that's fine, imho

[21:27] <timotimo> there's a certain amount of WAT to that

[21:27] <jercos> I mean, I can see what you're saying, but the term "clobber" doesn't seem like it applies here.

[21:27] <timotimo> especially if perl6 doesn't warn if you repeat the $^a form

[21:28] <lue> jercos: previous meaning replaced with new one unintentionally. Sounds like clobbering to me.

[21:28] *** jnap joined
[21:28] <lue> to me the ^ twigil means "implicit parameter", not "implicit declaration of parameter"

[21:29] <TimToady> if it hurts, DON'T DO THAT!

[21:29] <timotimo> i'm 100% with lue so far

[21:29] <lue> don't imitate  no strict  when I didn't ask for it :)

[21:29] <timotimo> TimToady: i think finding the cause of the hurt if you didn't run after every single line you've added to your program can be frustrating

[21:30] <TimToady> don't use ^ parameters where they don't make complete sense, that's not what they're for

[21:30] <timotimo> oh well.

[21:31] <vendethiel> agreed with lue

[21:31] <vendethiel> to me, it seems $^ and $ and two different variables

[21:32] <lue> r: say {$:foo + $foo}(:foo(5))

[21:32] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«10␤»

[21:32] <lue> at least rakudo's consistent

[21:32] <lue> n: say {$:foo + $foo}(:foo(5))

[21:32] <camelia> niecza v24-109-g48a8de3: OUTPUT«10␤»

[21:33] <TimToady> look, both : and ^ say "autogen me a signature

[21:33] <TimToady> they have to be smart about the signature in question

[21:33] <TimToady> std: sub foo() { $^a }

[21:33] <camelia> std 09dda5b: OUTPUT«[31m===[0mSORRY![31m===[0m␤Placeholder variable $^a cannot override existing signature () at /tmp/U9fdb6USi1 line 1:␤------> [32msub foo() { [33m⏏[31m$^a }[0m␤Check failed␤FAILED 00:01 125m␤»

[21:34] <vendethiel> and that could be called $^a, simply

[21:34] <TimToady> the "upness" of ^ is to hoist $a into the sig

[21:34] <lue> fwiw I could see why you'd want the current behavior, though I'm not a fan of the twigil not being a distinct type of variable (same reason for the lesser degree to which I dislike $.foo)

[21:34] <TimToady> std: sub foo($^a) { ... }

[21:34] <camelia> std 09dda5b: OUTPUT«[31m===[0mSORRY![31m===[0m␤You may not use the ^ twigil in a signature at /tmp/SIF1jh66XD line 1:␤------> [32msub foo($[33m⏏[31m^a) { ... }[0m␤    expecting twigil␤Parse failed␤FAILED 00:01 123m␤»

[21:34] <TimToady> not that simple

[21:35] <vendethiel> TimToady: user restrictions doesn't impose compiler restrictions

[21:35] <timotimo> jnthn: i enjoyed your talk a whole lot :)

[21:36] <timotimo> aside from the buzzing, but that's not your fault

[21:36] <lue> TimToady: my only objection to it is that I wouldn't expect {$^a} to have the same effects as sub foo($a){}; I expect $^a to always have to be referenced as $^a

[21:37] <TimToady> well, it's a WAT either way you do that, so I have little sympathy here

[21:37] <TimToady> there's lot's of other WATs as soon as you start abusing placeholders too

[21:38] <TimToady> they are in there specifically for a + b kinds of stuff

[21:38] <TimToady> they are not meant to be a general replacement for siggies

[21:39] <grondilu> I whish there was a version of the pointy block where the arrow is inside the block.

[21:40] <grondilu> something like:  { -> $a, $b: $a + $b }

[21:40] <PerlJam> grondilu: why?

[21:40] <TimToady> Ruby envy?

[21:40] <grondilu> because then it could be called without parenthesis

[21:40] <TimToady> I think you work to hard sometimes to avoid parens :)

[21:40] <TimToady> *too

[21:40] <lue> TimToady: agree with you on the WAT business, I just like my twigils to be a distinct kind of variable :) [$foo != $!foo != $~foo ...]

[21:40] <grondilu> :)  yeah, maybe

[21:42] <TimToady> as long as I'm in a complete bitchy mood, I also don't like when you put whitespace on one side of infix:<*> and not the other

[21:42] <vendethiel> m: my @a = (); say $a.perl;

[21:42] <camelia> rakudo-moar e4e862: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/p33aGhvHau␤Variable '$a' is not declared. Did you mean '@a'?␤at /tmp/p33aGhvHau:1␤------> [32mmy @a = (); say $a.perl[33m⏏[31m;[0m␤    expecting any of:␤        method arguments␤»

[21:42] <TimToady> lessee, anything else I can complain about...

[21:42] <vendethiel> If that doesn't work, I don't think $^a should work for $a

[21:42] <lue> vendethiel: this isn't P5 :)

[21:43] <vendethiel> lue: of course it isn't ! But it's all about consistency

[21:43] <skids> .oO(mmmm.  hobgoblins.)

[21:43] <lue> sigils refer to a type of container, the twigils refer to other details about the variable.

[21:43] <PerlJam> skids++ my thoughts too

[21:44] <lue> I don't agree entirely with how <[.^:]> operate, though I can live with it :)

[21:44] <TimToady> twigils usually mean "strange scoping"

[21:44] <vendethiel> lue: definitely. It doesn't mean we can have a bit of consistency between var prefixes

[21:45] <TimToady> note that $*ENV might end up finding PROCESS::ENV, where'd your * go?

[21:45] * skids thinks that the use of ^ (hat) is an adequate reminder that some masquerading is about to occur.

[21:46] <lue> TimToady: obviously we need to invent package twigils:  PROCESS:*:ENV , OUTER:~:RREGEX  :P

[21:46] <TimToady> there's no consistency to achieve here, and $^a meaning $a in the sig is a very simple rule

[21:46] *** berekuk joined
[21:47] <TimToady> std: my $a; { $a + $^a }

[21:47] <camelia> std 09dda5b: OUTPUT«[31m===[0mSORRY![31m===[0m␤$a has already been used as a non-placeholder in the surrounding block,␤  so you will confuse the reader if you suddenly declare $^a here at /tmp/pEH0v23tZh line 1:␤------> [32mmy $a; { $a + [33m⏏[31m$^a }[0m␤Check fai…»

[21:48] <vendethiel> now that's nice

[21:48] <TimToady> it's a general thing

[21:48] <TimToady> std: my $a; { $a + 42; my $a = 43 }

[21:48] <timotimo> that sounds like an LHF to port to rakudo

[21:48] <camelia> std 09dda5b: OUTPUT«[31m===[0mSORRY![31m===[0m␤Lexical symbol '$a' is already bound to an outer symbol (see line 1);␤  the implicit outer binding at line 1 must be rewritten as OUTER::<$a>␤  before you can unambiguously declare a new '$a' in this scope at /tmp/r1onRgAtlS l…»

[21:48] <lue> rakudo needs to do that :)

[21:49] *** kurahaupo_mobile left
[21:49] <lue> std: my $a; { $^a + $a }

[21:49] <camelia> std 09dda5b: OUTPUT«ok 00:01 126m␤»

[21:49] <TimToady> yes, we treat it as declaration, so all the other declarational mechanism works

[21:50] <TimToady> including "Oh, you changed the meaning of $a from earlier in this block"

[21:50] <TimToady> we don't allow much in the way of retroactive declaration

[21:50] <TimToady> only for things that can be parsed as listop functions

[21:51] *** stevan_ left
[21:51] <TimToady> because mutual recursion is pertty darn useful, but we do it be reserving a syntax at the front, not by retroactively changing anything

[21:52] <lue> .oO(use retcons;)

[21:53] <TimToady> ss/do it be/do it by/

[21:54] <clsn> I could have sworn I saw something in the spec that said that you had to use ^ on all instances of the parameter, not just the first.  Can't find it now.

[21:55] <TimToady> if anything, it says the opposite, or it says "You *may* use ^ on all instances"

[21:55] <dalek> panda/moar-support: 359402d | (Tobias Leich)++ | lib/Panda/Fetcher.pm:

[21:55] <dalek> panda/moar-support: moar does not like to take a substr OOB

[21:55] <dalek> panda/moar-support: review: https://github.com/tadzik/panda/commit/359402dbc1

[21:55] <dalek> panda/moar-support: 3c47a06 | (Tobias Leich)++ | lib/Panda/Common.pm:

[21:55] <dalek> panda/moar-support: fix spello

[21:55] <dalek> panda/moar-support: review: https://github.com/tadzik/panda/commit/3c47a06e25

[21:55] <dalek> panda/moar-support: 1c97f0c | (Tobias Leich)++ | lib/Panda/ (2 files):

[21:55] <dalek> panda/moar-support: add comptarget(), and also moarvm fileext/target

[21:55] <dalek> panda/moar-support: review: https://github.com/tadzik/panda/commit/1c97f0ca86

[21:56] <TimToady> S06:Placeholder_variables is the section

[21:57] <TimToady> S06:2006 is the specific paragraph

[21:57] <synopsebot> Link: http://perlcabal.org/syn/S06.html#line_2006

[21:57] <TimToady> ah, it even gives a justification for leaving out the ^ in the real variable

[21:58] * TimToady forgets that he was sane once

[21:58] *** SamuraiJack left
[21:58] <timotimo> oh!

[21:58] <timotimo> that justification *is* sane, definitely

[21:58] * PerlJam catches an odd bit he'd never noticed before

[21:59] <PerlJam> std: { $^A + 5 }

[21:59] <camelia> std 09dda5b: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of $^A variable; in Perl 6 please use Form module at /tmp/8BTRtB7lCa line 1:␤------> [32m{ $^A [33m⏏[31m+ 5 }[0m␤Parse failed␤FAILED 00:01 123m␤»

[21:59] <TimToady> And Because I Said So!!!  :)

[21:59] <PerlJam> std: { $^X + 5 }

[21:59] <camelia> std 09dda5b: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of $^X variable; in Perl 6 please use $*EXECUTABLE_NAME at /tmp/Rh6dkKIX68 line 1:␤------> [32m{ $^X [33m⏏[31m+ 5 }[0m␤Parse failed␤FAILED 00:01 123m␤»

[21:59] <PerlJam> nice

[21:59] <PerlJam> r: { $^A + 5 }

[21:59] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Unsupported use of $^A variable; in Perl 6 please use Form module␤at /tmp/tmpfile:1␤------> [32m{ $^A[33m⏏[31m + 5 }[0m␤»

[22:01] <lue> timotimo: ^^^ another case for no P5 warnings :)

[22:02] <timotimo> that's not a warning, though

[22:02] <PerlJam> lue: I conclude exactly the opposite.

[22:02] <timotimo> should it *allow* that as a variable if you no warnings :p5?

[22:03] <TimToady> it's not something people run into often enough to worry about, I suspect

[22:03] <TimToady> most people naturally use lowercase placeholders by preference

[22:04] <TimToady> plus there's always the workaround of using a real sig, or using more than one char

[22:05] *** skids left
[22:05] <TimToady> I do expect a lot of Perl 5 programmers to come over eventually, and confuse themselves

[22:05] *** Rotwang joined
[22:06] <timotimo> i'm thinking no warnings :perl5 should only remove warnings, no errors

[22:06] <TimToady> r: ./viv -e 'say "$0 foo bar"'

[22:06] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Bogus statement␤at /tmp/tmpfile:1␤------> [32m.[33m⏏[31m/viv -e 'say "$0 foo bar"'[0m␤    expecting any of:␤        dotty method or p…»

[22:07] <TimToady> r: say "$0 foo bar"

[22:07] <PerlJam> I'm thinking we can wait until Perl 6.2 or so before we have to worry about "no warnings :perl5"   :-)

[22:07] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT« foo bar␤»

[22:07] <TimToady> r: print "$0 foo bar\n"

[22:07] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT« foo bar␤»

[22:07] <TimToady> no undefined warning?

[22:08] <TimToady> that would be a good one to catch, if we could

[22:08] <lue> std: say "$0 bar"

[22:08] <camelia> std 09dda5b: OUTPUT«ok 00:01 123m␤»

[22:08] <lue> r: say $0.WHAT;

[22:08] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«Nil␤»

[22:08] <TimToady> r: say $/.WHAT

[22:08] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«Nil␤»

[22:09] <lue> PerlJam: What I meant was that it's another thing to put in the "I don't know P5, don't act like I do" command I want :)

[22:09] *** bluescreen10 left
[22:09] <TimToady> r: $/ := Match; say "$0 foo"

[22:10] <lue> (Though I suppose one possible implementation of such a command could be Perl 6.1 ...)

[22:10] <camelia> rakudo-moar e4e862: OUTPUT«Invocant requires an instance, but a type object was passed␤  in method at_pos at src/gen/m-CORE.setting:6679␤  in sub postcircumfix:<[ ]> at src/gen/m-CORE.setting:2361␤  in sub postcircumfix:<[ ]> at src/gen/m-CORE.setting:2325␤  in block  at /tm…»

[22:10] <camelia> ..rakudo-jvm e4e862: OUTPUT«Cannot look up attributes in a type object␤  in method at_pos at gen/jvm/CORE.setting:6681␤  in sub postcircumfix:<[ ]> at gen/jvm/CORE.setting:2361␤  in sub postcircumfix:<[ ]> at gen/jvm/CORE.setting:2325␤  in block  at /tmp/tmpfile:1␤␤»

[22:10] <camelia> ..rakudo-parrot e4e862: OUTPUT«Invocant requires an instance, but a type object was passed␤  in method at_pos at gen/parrot/CORE.setting:6683␤  in sub postcircumfix:<[ ]> at gen/parrot/CORE.setting:2365␤  in sub postcircumfix:<[ ]> at gen/parrot/CORE.setting:2329␤  in block  a…»

[22:10] *** itz__ joined
[22:10] *** itz left
[22:11] *** itz_ left
[22:12] <timotimo> i've got a maybe LHF; in perl6-bench, fix nqp/richards so that it works on moarvm; there's some native int/list/object/whatever confusion going on

[22:13] <timotimo> might have to replace all list_i with list or something?

[22:13] *** itz joined
[22:20] * TimToady --> Dr to hopefully cure his grumpiness

[22:20] <FROGGS> :/

[22:20] <PerlJam> There's a cure for grumpiness?!?

[22:20] <TimToady> depends on the cause :)

[22:21] <TimToady> &

[22:21] <PerlJam> TimToady: good luck!

[22:27] *** benabik joined
[22:29] <timotimo> hm, maybe i ought to take up the weekly perl6 changes blog

[22:30] <ashleyde1> timotimo++

[22:30] *** ashleyde1 is now known as ashleydev

[22:30] *** FROGGS left
[22:30] *** btyler left
[22:31] <vendethiel> timotimo++

[22:32] <timotimo> well, i guess that's settled then :P

[22:32] <vendethiel> as a perl (6) beginner, that seems to be a very valuable resource

[22:35] <timotimo> i already have a blog that i could post to ... hmm ...

[22:41] <timotimo> hm. should i start from where GlitchMr left off or from now?

[22:42] <lue> timotimo: depends on when GlitchMr stopped :)

[22:42] <vendethiel> long ago, IIRC

[22:43] <vendethiel> well, I guess it depends what you call long, actually ... 2011 or 2012 I'd say, from what I remember I've seen

[22:43] <timotimo> er, no

[22:43] <timotimo> he stopped at the end of last year, iirc

[22:44] <vendethiel> oh, really ? my bad. I must confuse it with something else, then.

[22:44] <timotimo> mayhaps

[22:48] *** benabik left
[22:49] *** kbaker left
[22:49] <vendethiel> okay, just read about `sub (Mu:D) {}`, that's cool ":D". But sometimes, there's also a closing `:`

[22:50] <timotimo> the closing : means "the thing on the left is the invocant"

[22:50] <timotimo> you can use that to make type constraints on the self

[22:50] <timotimo> like "only call this if the self is not a type object"

[22:50] <timotimo> or "only call this if self.foobar equals 42"

[22:50] *** benabik joined
[22:51] <vendethiel> oh, that's the same `:` as in ($self:) ?

[22:51] <timotimo> yes

[22:51] <vendethiel> fair enough. timotimo++

[22:53] * perigrin hasn't seen a single Perl6 submission for YAPC::NA

[22:53] * perigrin stares at the space that should be occupied by diakopter

[22:56] *** kaare_ joined
[23:00] *** ashleydev left
[23:01] <timotimo> i don't know how to work this jekyll thing :\

[23:07] <timotimo> this doesn't work at all.

[23:17] *** BenGoldberg joined
[23:22] *** treehug88 left
[23:26] * Util submits my Perl (5|6) talk from Perl Oasis for YAPC::NA, for perigrin.

[23:26] <Util> s/my/his/

[23:29] <perigrin> thank you!

[23:30] <timotimo> http://p6weekly.wordpress.com/ ← this is where my work will live

[23:31] <timotimo> i may want to build some tooling to get at the information more easily

[23:31] <dalek> rakudo-star-daily: 9d76a1a | coke++ | log/ (5 files):

[23:31] <dalek> rakudo-star-daily: today (automated commit)

[23:31] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/9d76a1aa28

[23:32] <dalek> perl6-roast-data: ae559b0 | coke++ | / (2 files):

[23:32] <dalek> perl6-roast-data: today (automated commit)

[23:32] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/ae559b0ff3

[23:33] *** Rotwang left
[23:34] *** skids joined
[23:34] *** dmol left
[23:37] <BenGoldberg> p6: (~pi).Rat.say

[23:37] <camelia> rakudo-jvm e4e862: OUTPUT«3.141592653589793␤»

[23:37] <camelia> ..rakudo-parrot e4e862, rakudo-moar e4e862: OUTPUT«3.14159265358979␤»

[23:37] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«3.141593␤»

[23:39] <timotimo> r: say 3.141592653589793 - 3.14159265358979

[23:39] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«0.000000000000003␤»

[23:39] <timotimo> r: say ~3.141592653589793 ~- ~3.14159265358979

[23:39] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«3.141592653589793-3.14159265358979␤»

[23:39] <timotimo> er ... right

[23:39] <timotimo> r: say ~3.141592653589793 ~& ~3.14159265358979

[23:39] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«3.14159265358979␤»

[23:40] <timotimo> er ... that's not helpful either %)

[23:40] <timotimo> r: .ords.join(",").say given ~3.141592653589793 ~^ ~3.14159265358979

[23:40] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51␤»

[23:40] <timotimo> there's probably better ways to do this m)

[23:44] <BenGoldberg> r: (3.141592653589793 - 3.14159265358979).fmt("%f").say

[23:44] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«0.000000␤»

[23:44] <BenGoldberg> r: (3.141592653589793 - 3.14159265358979).fmt("%e").say

[23:44] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«2.000000e-15␤»

[23:44] <BenGoldberg> r: (3.141592653589793 - 3.14159265358979).WHAT.say

[23:45] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«(Rat)␤»

[23:45] <BenGoldberg> r: (3.141592653589793 - 3.14159265358979).nude.say

[23:45] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«3 1000000000000000␤»

[23:46] <jnthn> r: my $a; sub foo() { say $a; my $a; }

[23:46] <camelia> rakudo-parrot e4e862, rakudo-jvm e4e862, rakudo-moar e4e862: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Lexical symbol '$a' is already bound to an outer symbol;␤the implicit outer binding must be rewritten as OUTER::<$a>␤before you can unambiguous…»

[23:46] <jnthn> That's already working, so the palceholder fix should be quite easy :)

[23:46] *** ajr_ left
[23:49] *** daniel-s joined
[23:51] <timotimo> oh well.

[23:51] <timotimo> good night for now! :)

[23:51] <timotimo> corecatcher: ^^ what jnthn just mentioned may be an LHF for you :)  (it's actually about http://irclog.perlgeek.de/perl6/2014-02-07#i_8250030 )

[23:52] *** regreg joined
[23:56] *** nsh left
[23:57] *** jnap left
