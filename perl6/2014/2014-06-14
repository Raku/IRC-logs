[00:09] <Mouq> xenoterracide: Cool :)

[00:14] *** rindolf joined
[00:17] *** cognominal__ left
[00:17] *** cognominal__ joined
[00:27] *** hoverboard joined
[00:29] <japhb> .ask timotimo I've got a hack day, and was planning to spend a chunk of it on perl6-bench.  Any new work on it in the last couple months or plans that I should be aware of?

[00:29] <yoleaux> japhb: I'll pass your message to timotimo.

[00:41] *** jsn_ left
[00:41] *** pecastro joined
[00:55] *** perigrin joined
[01:06] <xenoterracide> https://github.com/xenoterracide/p6-annotations (thought I had left this working, maybe not)  perl6 -Ilib t/persistence.t    Method 'declares_method' not found for invocant of class 'NQPClassHOW'  

[01:15] <xenoterracide> jnthn: might know if he's around, was helping me work on this last time I touched it

[01:18] <dalek> doc/redesign-sketch: 6b0849c | Mouq++ | sketch/html/ (2 files):

[01:18] <dalek> doc/redesign-sketch: Finish off most of sketch for the index page

[01:18] <dalek> doc/redesign-sketch: review: https://github.com/perl6/doc/commit/6b0849cdb6

[01:18] *** Sqirrel_ joined
[01:20] *** FROGGS left
[01:20] *** Sqirrel left
[01:23] *** Su-Shee_ joined
[01:28] *** klapperl_ joined
[01:32] *** FROGGS joined
[01:44] *** FROGGS left
[01:54] *** FROGGS joined
[02:17] <xenoterracide> `oic I can't apply a role to ClassHOW that way

[02:17] <xenoterracide> hmm

[02:22] *** BenGoldberg left
[02:25] *** SamuraiJack_ joined
[02:38] *** xragnar_ joined
[02:38] *** xragnar_ is now known as xragnar

[02:40] *** obra joined
[02:41] *** dj_goku left
[02:45] <dalek> doc/redesign-sketch: cb26885 | Mouq++ | sketch/ (3 files):

[02:45] <dalek> doc/redesign-sketch: Create sketch for type.html page

[02:45] <dalek> doc/redesign-sketch: review: https://github.com/perl6/doc/commit/cb26885a3e

[02:45] <dalek> doc/redesign-sketch: 251df05 | Mouq++ | sketch/html/ (2 files):

[02:45] <dalek> doc/redesign-sketch: Add sub-menu on types page

[02:45] <dalek> doc/redesign-sketch: review: https://github.com/perl6/doc/commit/251df05e18

[02:47] *** treehug88 left
[02:51] <dalek> doc/redesign-sketch: aab3b69 | Mouq++ | sketch/html/type.html:

[02:51] <dalek> doc/redesign-sketch: Fix sub-menu links

[02:51] <dalek> doc/redesign-sketch: review: https://github.com/perl6/doc/commit/aab3b699ec

[02:58] *** rurban joined
[03:03] *** atroxaper joined
[03:24] *** bjz joined
[03:25] <xenoterracide> perl6-debug-m -Ilib t/persistence.t  

[03:25] <xenoterracide> Start argument to substr out of range. Is: -1, should be in 0..0

[03:29] <dalek> perl6-bench: 0c6dde4 | (Timo Paulssen)++ | timeall:

[03:29] <dalek> perl6-bench: try to get at least 3 datapoints

[03:29] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/0c6dde4aa0

[03:29] <dalek> perl6-bench: 6427247 | (Geoffrey Broadwell)++ | timeall:

[03:29] <dalek> perl6-bench: Support for --min-scaling-points in timeall

[03:29] <dalek> perl6-bench: 

[03:29] <dalek> perl6-bench: Add the --min-scaling-points option to timeall (default 3) and use it

[03:29] <dalek> perl6-bench: to ensure that scalable tests are timed at enough different scales to

[03:29] <dalek> perl6-bench: give a decent idea of each compiler's scaling curve, even when a given

[03:29] <dalek> perl6-bench: compiler is performing very poorly on a particular test.

[03:29] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/64272472a1

[03:29] <dalek> perl6-bench: 18f2f85 | (Geoffrey Broadwell)++ | timeall:

[03:29] <dalek> perl6-bench: Merge branch 'minimum_number_runs'

[03:29] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/18f2f85af4

[03:29] <dalek> perl6-bench: 7b3d06f | (Geoffrey Broadwell)++ | bench:

[03:29] <dalek> perl6-bench: Fix $*PERL<compiler> deprecations in `bench config`

[03:29] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/7b3d06fcd9

[03:41] <xenoterracide> so if that doesn't work how can I use the debugger?

[04:09] <dalek> perl6-bench: e5cc12c | (Geoffrey Broadwell)++ | lib/Bench/Handling.pm6:

[04:09] <dalek> perl6-bench: Fix dir expansion in explode-components

[04:09] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/e5cc12c1e0

[04:09] <dalek> perl6-bench: b4be496 | (Geoffrey Broadwell)++ | bench:

[04:09] <dalek> perl6-bench: Fix column widths in list-checkouts

[04:09] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/b4be49634d

[04:10] <japhb> xenoterracide: Last I tried it, the debugger was not working on moar.  I haven't had a chance to test it again, but jnthn does know about it (he's just hip deep in other Moar work right now)

[04:12] <xenoterracide> japhb: well if I run perl6-debug-p -Ilib t/persistence.t I get the same error

[04:12] <dalek> doc/redesign: 505e2e0 | Mouq++ | / (4 files):

[04:12] <dalek> doc/redesign: Start getting handling in place for updated header

[04:12] <dalek> doc/redesign: 

[04:12] <dalek> doc/redesign: This includes setting up the menu and sub-menus, though it currently

[04:12] <dalek> doc/redesign: only displays a selection on the top menu

[04:12] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/505e2e0ee2

[04:13] <xenoterracide> japhb: so I'm guessin that means it's not a moar problem

[04:16] <japhb> xenoterracide: Yup, stands to reason.  I just haven't updated my r-p in a long time, so hadn't tested that

[04:17] <xenoterracide> japhb: I'm running the 2014.05

[04:18] *** SevenWolf joined
[04:19] <dalek> perl6-bench: c9a752f | (Geoffrey Broadwell)++ | components.json:

[04:19] <dalek> perl6-bench: Don't use committer-only URL for rakudo-js repo

[04:19] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/c9a752fed6

[04:20] <japhb> xenoterracide: My r-p is 2014.04-118

[04:20] <xenoterracide> hmm

[04:20] <xenoterracide> myabe I should try rolling back

[04:24] *** kaare_ joined
[04:33] <dalek> perl6-bench: 99bb04d | (Geoffrey Broadwell)++ | bench:

[04:33] <dalek> perl6-bench: Fix tag parsing in `bench extract`

[04:33] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/99bb04dc46

[04:33] <japhb> Apparently there'd been a fair amount of bitrot since the last time I hacked on perl6-bench.  :-(

[04:37] <Mouq> japhb++

[04:41] <atroxaper> What dows it mean 'Asked to remove 8 spaces, but the shortest indent is 4 spaces' when i run some tests?

[04:41] <Mouq> atroxaper: What tests?

[04:41] <Mouq> m: "    test".dedent(8)

[04:41] <camelia> rakudo-moar d8cd80: OUTPUT«No such method 'dedent' for invocant of type 'Str'␤  in block  at /tmp/l95hLipuL2:1␤␤»

[04:42] <atroxaper> Mouq: my own.

[04:42] <Mouq> m: "    test".indent(-4)

[04:42] <camelia> rakudo-moar d8cd80: ( no output )

[04:42] <Mouq> m: "    test".indent(-8)

[04:42] <camelia> rakudo-moar d8cd80: OUTPUT«Asked to remove 8 spaces, but the shortest indent is 4 spaces␤»

[04:42] <Mouq> atroxaper: I have no idea :9

[04:43] <atroxaper> Mouq: :) if I do 8 spaces in my code then all is ok. When 4 then I have that warn.

[04:44] <Mouq> atroxaper: Hmm... are you using heredocs?

[04:45] <Mouq> q:to/XYZ/ ?

[04:45] <atroxaper> yes.

[04:45] *** kaare__ joined
[04:45] <Mouq> Maybe you're getting a LTA error from having your final line indented more than the rest of your heredoc

[04:46] <Mouq> m: say q:to/XYZ/␤   x␤y␤   z␤ XYZ

[04:46] <camelia> rakudo-moar d8cd80: OUTPUT«Asked to remove 1 spaces, but the shortest indent is 0 spaces␤  x␤y␤  z␤␤»

[04:47] *** kaare_ left
[04:48] <atroxaper> Mouq: I have the same indent for q:to, for text block, and for XYZ.

[04:52] <dalek> perl6-bench: c130109 | (Geoffrey Broadwell)++ | lib/Bench/Globals.pm6:

[04:52] <dalek> perl6-bench: Simplify calc of PROGRAM_DIR in Bench::Globals

[04:52] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/c130109491

[04:52] <dalek> perl6-bench: 3da7402 | (Geoffrey Broadwell)++ | lib/Bench/Handling.pm6:

[04:52] <dalek> perl6-bench: Minor whitespace fix in Bench::Handling

[04:52] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/3da7402fd6

[04:54] *** ren1us left
[04:56] *** xenoterracide left
[04:56] <Mouq> m: say EVAL "q:to/XYZ/\n   x\n\ty\n   z\n XYZ"

[04:56] <camelia> rakudo-moar d8cd80: OUTPUT«  x␤       y␤  z␤␤»

[04:57] <Mouq> m: say EVAL "q:to/XYZ/\n   x\n\t y\n   z\n XYZ"

[04:57] <camelia> rakudo-moar d8cd80: OUTPUT«  x␤ y␤  z␤␤»

[04:57] <Mouq> m: say EVAL "q:to/XYZ/\n   x\n\t y\n   z\n\tXYZ"

[04:57] <camelia> rakudo-moar d8cd80: OUTPUT«Asked to remove 8 spaces, but the shortest indent is 3 spaces␤x␤ y␤z␤␤»

[04:57] <Mouq> ... o_O

[04:57] <Mouq> m: $*TABSTOP

[04:57] <camelia> rakudo-moar d8cd80: OUTPUT«Unhandled exception: Dynamic variable $*TABSTOP not found␤   at <unknown>:1  (/home/p6eval/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:throw:4294967295)␤ from src/gen/m-CORE.setting:12907  (/home/p6eval/rakudo-inst-1/languages/perl6/runti…»

[04:58] <Mouq> I thought there was something like that that controls what a tab means in spaces...

[05:02] *** atroxaper left
[05:02] <japhb> m: $?TABSTOP.say

[05:02] <camelia> rakudo-moar d8cd80: OUTPUT«8␤»

[05:03] *** atroxaper joined
[05:04] *** atroxaper left
[05:05] *** atroxaper joined
[05:11] *** ivan`` left
[05:13] *** ivan`` joined
[05:15] *** atroxaper left
[05:16] *** cognominal__ left
[05:17] *** cognominal__ joined
[05:17] *** cognominal__ left
[05:17] *** cognominal__ joined
[05:29] <thou> A simple tool (in perl6) to fork a github repo and add it as a remote: https://gist.github.com/softmoth/1fe9843610f0ea6062d1

[05:32] *** atroxaper joined
[05:34] <rurban> I added now the missing parrot NameAliases. Do you want old abbrevations also, like "LINE FEED"?

[05:34] <rurban> icu doesn't support this so I added a generated perfect hash (via gperf)

[05:35] *** rurban left
[05:47] <thou> .tell FROGGS rurban wrote to the channel (I think it's directed at you): «I added now the missing parrot NameAliases. Do you want old abbrevations also, like "LINE FEED"? icu doesn't support this so I added a generated perfect hash (via gperf)»

[05:47] <yoleaux> thou: I'll pass your message to FROGGS.

[05:55] <thou> .ask tadzik Do you have any feedback on https://github.com/tadzik/panda/pull/80 ?

[05:55] <yoleaux> thou: I'll pass your message to tadzik.

[06:06] <atroxaper> r: class R { has @.d = [1, 2, 3, 4]; }; say R.new.d.join('|');

[06:06] <camelia> rakudo-{parrot,jvm,moar} d8cd80: OUTPUT«1 2 3 4␤»

[06:06] <atroxaper> WHY?

[06:06] <atroxaper> Why isn't 1|2|3|4 ?

[06:07] <Timbus> because you assigned the first element of @.d to an array

[06:07] <atroxaper> Timbus: Really?

[06:07] <Timbus> m: my @a = [1,2,3,4]; say @a.perl

[06:07] <camelia> rakudo-moar d8cd80: OUTPUT«Array.new([1, 2, 3, 4])␤»

[06:07] <Timbus> its an AoA

[06:08] <Timbus> which.. actually used to work as intended, i think.

[06:09] <Timbus> yeah i was sure @a = [...]; was one of the perl 5 code smells that was supposed to be removed, just like %h = {...}

[06:10] <atroxaper> r: class R { has @.d = <1 2 3 4>; }; say R.new.d.join('|');

[06:10] <camelia> rakudo-{parrot,jvm,moar} d8cd80: OUTPUT«1|2|3|4␤»

[06:10] <atroxaper> I understood. Thank you)

[06:12] <Timbus> glad to help :)

[06:17] *** atroxaper left
[06:18] *** atroxaper joined
[06:20] *** atroxaper left
[06:20] *** atroxaper joined
[06:22] *** atroxaper left
[06:22] *** atroxaper joined
[06:25] <dalek> doc/redesign: 6357aa3 | Mouq++ | / (2 files):

[06:25] <dalek> doc/redesign: Use new, simpler index page

[06:25] <dalek> doc/redesign: 

[06:25] <dalek> doc/redesign: Doesn't do anything with actual indices though

[06:25] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/6357aa37b1

[06:25] <dalek> doc/redesign: b9f8592 | Mouq++ | / (2 files):

[06:25] <dalek> doc/redesign: Add indices for the language, type, and routine sections

[06:25] <dalek> doc/redesign: review: https://github.com/perl6/doc/commit/b9f8592438

[06:26] *** atroxaper left
[06:28] *** Mouq left
[06:34] <masak> Timbus: I'm not aware that @a = [...] ever produced anything other than an AoA.

[06:34] <masak> 'morning, #perl6

[06:35] <japhb> morning, masak!

[06:39] <moritz> good morning, masak & japhb & *

[06:39] *** lizmat joined
[06:39] <thou> .t

[06:39] <yoleaux> Sat, 14 Jun 2014 00:39:54 MDT

[06:40] <thou> good *, #perl6 :)

[06:41] <moritz> wtf is MDT?

[06:42] <masak> <colomon> masak: I'm puzzled by Text::Markdown

[06:42] <masak> colomon: how so?

[06:42] <thou> moritz: US/Mountain summer time (Mountain Daylight Time)

[06:44] <moritz> ah, a US-isms

[06:44] * moritz points out that the rest of the world also has mountains :-)

[06:47] <lizmat> .oO( strange guys, those americans, having a timezone dependent on height ;-)

[06:48] <moritz> lizmat: a typical off-by-pi/2 error :-)

[06:48] <japhb> More like a timezone based on utterly dominant feature

[06:50] <lizmat> Ah, a bit like BST then  :-)

[06:50] <lizmat> need to pack, checking out of hotel, before getting back to FPW

[06:50] <lizmat> &

[06:52] *** rindolf left
[06:55] *** lizmat left
[07:08] <dalek> perl6-bench: b7bf31e | (Geoffrey Broadwell)++ | bench:

[07:08] <dalek> perl6-bench: Pass --min-scaling-points through  to timeall

[07:08] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/b7bf31e063

[07:08] <dalek> perl6-bench: 35cd770 | (Geoffrey Broadwell)++ | timeall:

[07:08] <dalek> perl6-bench: Reduce ENOUGH_TIME default to 1.0 seconds

[07:08] <dalek> perl6-bench: 

[07:08] <dalek> perl6-bench: Now that MIN_SCALING_POINTS guarantees even slow compilers will have

[07:08] <dalek> perl6-bench: multiple points to plot, reduce the ENOUGH_TIME default to 1.0 seconds

[07:08] <dalek> perl6-bench: so that benchmarkers don't have to wait quite so long for decent

[07:08] <dalek> perl6-bench: results.

[07:08] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/35cd77050f

[07:08] <dalek> perl6-bench: 28eed23 | (Geoffrey Broadwell)++ | / (3 files):

[07:08] <dalek> perl6-bench: Start tracking work separately from scale

[07:08] <dalek> perl6-bench: 

[07:08] <dalek> perl6-bench: Some benchmarks don't scale workload linearly with SCALE; for example,

[07:08] <dalek> perl6-bench: the workload of '2d' benchmarks increases quadratically with SCALE.

[07:08] <dalek> perl6-bench: This change allows benchmarks to specify their workload scaling formula,

[07:08] <dalek> perl6-bench: and starts tracking work and scale separately in raw timing data.

[07:08] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/28eed2398f

[07:08] <japhb> Oooh, dalek's flood-prevention has been tuned, I see!

[07:09] <japhb> Well, with that pack of changes, time for some rest.

[07:09] <masak> japhb++

[07:09] <japhb> .tell timotimo You might want to pull perl6-bench.  :-)

[07:09] <yoleaux> japhb: I'll pass your message to timotimo.

[07:14] *** brrt joined
[07:15] <[Sno]> FROGGS: you're latest output seems from p5's Unix::Statgrab - if you want, send me config.log (or check self) and see why it doesn't find the lib

[07:19] *** anaeem1 joined
[07:19] *** anaeem1 left
[07:21] *** dmol left
[07:24] *** hoverboard left
[07:27] <FROGGS> [Sno]: this reports nothing: nm /usr/lib/libstatgrab.a | grep sg_get_process_stats_r

[07:27] <yoleaux> 05:47Z <thou> FROGGS: rurban wrote to the channel (I think it's directed at you): «I added now the missing parrot NameAliases. Do you want old abbrevations also, like "LINE FEED"? icu doesn't support this so I added a generated perfect hash (via gperf)»

[07:27] <[Sno]> FROGGS: maybe your libstatgrab is to old ;)

[07:27] <FROGGS> thanks thou

[07:27] <FROGGS> [Sno]: it is the one from Ubuntu 13.10, no idea what version

[07:28] <[Sno]> configure checks for a libstatgrab>=0.90 which contains new, thread-safe API (0.17 is non-reentant)

[07:28] *** hoverboard joined
[07:28] *** hoverboard left
[07:28] <[Sno]> FROGGS: dpkg -l | grep libstatgrab ;)

[07:28] <FROGGS> [Sno]: in your P5's module doc I read: get_fs_stats

[07:28] <FROGGS> Returns statistics about the mounted filesystems. The object it returns is a Unix::Statgrab::sg_fs_stats.

[07:28] <FROGGS> so it returns a single object, right?

[07:29] <[Sno]> an object containing a list of sg_fs_stats, yes

[07:29] <FROGGS> ahh

[07:29] <[Sno]> because I don't convert it into a perl-array automatically

[07:29] <FROGGS> ii  libstatgrab-dev                                             0.17-1ubuntu1                              amd64        development files of library for system statistics

[07:29] <FROGGS> ii  libstatgrab6                                                0.17-1ubuntu1                              amd64        library being useful interface to system statistics

[07:30] *** telex joined
[07:30] <FROGGS> I am not a C expert, but isn't it unusal to return a pointer to a struct when you in fact get a list?

[07:31] *** anaeem1_ joined
[07:31] <[Sno]> FROGGS: each of those returned objects have a as_list() method - they give you a "real" perl list

[07:31] <[Sno]> it's for performance reasons - why convert a long list when you don't need that

[07:32] <xfix> FROGGS: I don't think you return an array in C. The pointer has to work.

[07:32] <[Sno]> pointer and array is in C the same :)

[07:32] <xfix> can return*

[07:32] <FROGGS> I mean I expected sg_fs_stats **fsfuncsg_get_fs_stats(	entries);	 

[07:32] <FROGGS> instead of sg_fs_stats *fsfuncsg_get_fs_stats(	entries);	 

[07:32] <xfix> [Sno]: no, they aren't, unless you mean in function arguments.

[07:33] <[Sno]> FROGGS: no, this would be a list of pointers - not a list of obejcts

[07:33] <[Sno]> sg_fs_stats *f = sg_get_fs_stats(); while(..) { ++f; }

[07:33] <FROGGS> ahh!

[07:33] <xfix> When you define `void something(int array[])`, it's the same thing as `void something(int *array)`. However, this only applies to function signatures.

[07:33] <[Sno]> xfix: try Google or K&R - they are

[07:34] <[Sno]> xfix: check what "Unix"[3] gives you ;)

[07:35] <[Sno]> don't let modern warnings from compiler confuse the facts how the code-generator works ^^

[07:38] <[Sno]> the semantic difference between "int array[]" and "int *array" is the missing const - "int array[]" means "int * const array"

[07:38] <xfix> Uhm, no, it's not quite as simple.

[07:39] <[Sno]> so it requires an initializer (which leads to the assumption that it applies to function signatures)

[07:39] <xfix> You can initialize arrays, but you cannot initialize pointers.

[07:39] <xfix> At least without `malloc` call or something like that.

[07:39] <[Sno]> int foo[5] = { 1, 2, 3, 4, 5 }; int *bar = foo;

[07:39] <[Sno]> this code will work

[07:40] <xfix> Yes, because int[] can be implicitly converted to int *.

[07:40] <xfix> Also, there is a difference in how arrays and pointers are represented in memory.

[07:40] <[Sno]> no, because "bar+1" is identical to "bar[1]"

[07:41] <xfix> bar+1 is identical to &bar[1], but whatever.

[07:41] <xfix> (for pointer/array types)

[07:41] <[Sno]> the original language design (which results in C89) describes that in detail - see K&R for that

[07:41] * FROGGS changes the topic to "Welome to #C! :P"

[07:41] <[Sno]> the array notation has been added later for higher level language constructs

[07:42] <xfix> Also, there is a difference in representation.

[07:42] <xfix> Arrays are on the stack, pointers aren't.

[07:42] <xfix> (unless they point to arrays)

[07:42] <xfix> pointer values*

[07:42] <[Sno]> not really - both are internally hold as a pointer - and the compiler has some meta information about foo

[07:43] <[Sno]> see generated assembly code

[07:44] <[Sno]> I think we're talking from different perspectives - you argue from language (how to express xy) point of view, I argue from result point of view (what assembly output comes out, what is identical to ..)

[07:45] <[Sno]> it is important to understand that bar+1 is identical to &bar[1] - because the entire C memory management relies on that

[07:46] *** cognominal__ left
[07:46] <xfix> Also, there is sizeof.

[07:46] <xfix> http://codepad.org/lVXN2HE9

[07:46] <[Sno]> distinguish between compile time and run time (sizeof is compile time)

[07:46] <xfix> sizeof is compile time in most cases, but that doesn't really matter, does it?

[07:46] <[Sno]> bindling library (NativeCall) is run time

[07:47] <[Sno]> oh, it heavily matters

[07:47] <[Sno]> the compiler is gone when segfaults occur ;)

[07:47] <[Sno]> run time matters

[07:47] <xfix> When dealing with VLA, sizeof is runtime.

[07:48] *** Sqirrel_ left
[07:48] <xfix> Either way, pointers point onto something. Arrays are just simply allocated on stack, without any pointer.

[07:49] <[Sno]> stack is just a pointer

[07:49] <xfix> Well, yes.

[07:49] <[Sno]> sizeof is always compile time

[07:49] <[Sno]> it's specified being that

[07:49] <xfix> sizeof is not always compile time.

[07:50] <xfix> Just in most cases it is.

[07:50] <[Sno]> C11 rational 5.70 page 106

[07:51] <xfix> http://codepad.org/ntHkq5iP

[07:52] <[Sno]> this is C11

[07:52] <xfix> Has it changed?

[07:52] <[Sno]> neither C89 nor C99 accept that

[07:52] <xfix> This is C99.

[07:52] <xfix> I know C89 doesn't accept this. In C89, it's always compile time.

[07:53] <[Sno]> most C99 compilers accept it (did you try sunpro?), but when compiling in ANSI-C99 mode they throw errors

[07:53] <[Sno]> official support came with C11

[07:54] *** atroxaper joined
[07:54] <xfix> Oh, yeah, I forgot <stdio.h> in this example.

[07:54] <xfix> http://codepad.org/VPOmCLWG

[07:54] <[Sno]> lol

[07:55] <[Sno]> variable length arrays have been introduced to get rid of alloca() :D

[07:55] <xfix> Either way, http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf - 6.5.3.4.2.

[07:55] <xfix> alloca() is an extension, not a standard feature.

[07:55] <[Sno]> sure

[07:56] <xfix> "If the type of the operand is a variable length array type, the operand is evaluated; otherwise, the operand is not evaluated and the result is an integer constant."

[07:56] <FROGGS> .tell jnthn I can call that, but I cannot access the elems of the returned thing: sub sg_get_fs_stats(CArray[int]) returns CArray[sg_fs_stats] is native("libstatgrab") { * };

[07:56] <yoleaux> FROGGS: I'll pass your message to jnthn.

[07:58] *** atroxaper left
[07:58] <[Sno]> xfix: ok - so it's C99 indeed, but what does it change?

[07:58] <[Sno]> it simply says: even C99 is able to store meta-information

[07:58] <[Sno]> but for compatible memory layout to C89 or K&C C, it has to store it somehwere else

[08:00] <xfix> But if you want to think arrays are pointers, you are free to. I'm going to claim that chars are integers, because in most cases chars are implicitly converted to integers.

[08:00] <[Sno]> xfix: and you're right

[08:00] <[Sno]> see isspace or isprint for details ;)

[08:02] <[Sno]> don't get me wrong - I like the new semantic features of modern compilers

[08:02] *** lizmat joined
[08:02] <[Sno]> but knowing the history and compat constrains preserve from faling in to many pitfalls

[08:05] <xfix> You may know that signed integer overflow is undefined. But because of implicit conversions of `char`s, this isn't necessarily the case for `char`

[08:05] <xfix> http://codepad.org/wGw2Y5vq

[08:05] *** woolfy joined
[08:05] <xfix> The compilers don't really care about `short` or `char`, unless it's a pointer.

[08:05] <[Sno]> char <= short <= int <= long

[08:05] *** lizmat left
[08:05] <[Sno]> heavily depends on compiler

[08:06] <[Sno]> check SunPro compiler - it cares

[08:06] <xfix> Not quite. When `char` is `unsigned`, the `short` doesn't have to fit all values of `char`.

[08:06] <xfix> Either way, `something += 1;` in this example isn't an overflow, because it's more like `something = (char) ((int) something + 1);`.

[08:07] *** darutoko joined
[08:07] <xfix> Well, `(signed char)`, not `(char)`.

[08:09] <[Sno]> xfix: we had (1-2 years ago) a nasty bug in NetBSD on non-x86 which proves you wrong ;)

[08:09] <xfix> Either way, even if arrays and pointers are mostly similar, you cannot initialize pointer with values. You have to provide an array instead, or some other pointer.

[08:10] <xfix> [Sno]: oh, yeah, this gcc bug.

[08:10] <xfix> It was fixed.

[08:11] <[Sno]> there was an implementation which relies on your demonstrated "lack of contrain" and it bugged

[08:11] <[Sno]> the fix was to use really an int

[08:12] <[Sno]> xfix: yes, there're language level differences between array and pointer in modern compilers - but there's many old code out there which doesn't give a f*** regarding that

[08:12] <xfix> Well, it's just bad code.

[08:13] <[Sno]> meanwhile, maybe - originally, not necessarily

[08:13] <xfix> Which probably triggers undefined behavior, and can do anything.

[08:13] <[Sno]> entire ksh is full of that code

[08:13] <[Sno]> and it works since 40? years meanwhile

[08:14] <[Sno]> my intenstion was to get FROGGS being aware of memory layout in C - not compiler sematics ;)

[08:15] <xfix> Either way, pointers and arrays in struct are different, and it actually matters here.

[08:16] <xfix> In terms of memory layout.

[08:17] <xfix> Even if you are going the function is never going to take array argument (like `(int[])*`), for structs it matters.

[08:18] <[Sno]> indeed - http://codepad.org/4LtGZUeJ - that differs :)

[08:18] *** lizmat joined
[08:19] <xfix> Even if you are going to assume arrays are just constant pointers, when parsing the struct, it's something else.

[08:19] <[Sno]> xfix: but you're argueing to far away from original problem: why returning "sg_fs_stat *" and not "sg_fs_stat **"?

[08:20] <[Sno]> xfix: take a look into the statgrab code how that pointers are created - you might learn that it's not that easy as you demonstrate in 5-liners ;)

[08:21] * lizmat checks whether she wound up on the wrong channel  :-)

[08:22] <[Sno]> ah - come on, you beat nl:spain 5:1 - so we're on the wrong planet

[08:23] <xfix> <[Sno]> xfix: we had (1-2 years ago) a nasty bug in NetBSD on non-x86 which proves you wrong ;)

[08:23] <xfix> Found reference (took a while). http://stackoverflow.com/q/16125660/736054

[08:24] <xfix> Yep, it's a bug.

[08:24] <[Sno]> this is probably a good example why "array and pointers are same" is a better approach that "it differs": https://github.com/tdb/libstatgrab/commit/dd23b3bedf85e59a4a2bc52fb1978c322a6b5cbe

[08:25] <[Sno]> xfix: this is something different, I dig later and update you

[08:26] <[Sno]> got to go for RL :(

[08:26] <xfix> ok

[08:26] <xfix> The discussion was probably pointless anyway.

[08:26] *** rindolf joined
[08:27] *** Rotwang joined
[08:27] <[Sno]> maybe - when you're on a YAPC or similar where I am, too - I would be happy to show you at some examples why I thing "easier approach" > "complicated, but nearer at truth approach"

[08:28] <xfix> I probably think in C too much in terms of spec.

[08:28] *** brrt left
[08:28] <xfix> Thinking that someone may use computer where `sizeof(int) == 1` (this can happen on non-8-bit machines).

[08:34] <dalek> rakudo/nom: 4d0bdd9 | (Elizabeth Mattijsen)++ | / (5 files):

[08:34] <dalek> rakudo/nom: Move CompUnitRepo::Distribution to its own file

[08:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4d0bdd9d5c

[08:44] <[Sno]> hmm xfix - what do you want to show with your example for char overflow: http://codepad.org/cGZfv5L4?

[08:44] <[Sno]> it overflows great :)

[08:44] <xfix> That `char`s are `int`s in most contents, I guess.

[08:45] <xfix> Usually, integer overflows are undefined behavior, but not in this case.

[08:45] <xfix> The conversion from int to char is implementation defined, not undefined.

[08:46] *** Rotwang left
[08:46] <[Sno]> http://codepad.org/lI8wYscd

[08:47] <xfix> [Sno]: well, yes, but this program is undefined.

[08:47] <xfix> `overflow.c:9:5: runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type 'int'`

[08:47] <[Sno]> yes, there several behaviours

[08:52] <[Sno]> I think the root cause of the entire discussion was a bad chosing of phrase to say: "returned pointer is intended to be used as a list of stats, because in C (*p) is the same as p[0]"

[08:57] *** araujo left
[08:59] *** Rotwang joined
[09:07] <dalek> rakudo/nom: eb1d2fd | (Elizabeth Mattijsen)++ | / (6 files):

[09:07] <dalek> rakudo/nom: Put CURL stuff into a role

[09:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eb1d2fdb0c

[09:20] *** SamuraiJack_ left
[09:20] *** SamuraiJack__ joined
[09:21] *** mr-foobar joined
[09:22] <dalek> rakudo/nom: b52642a | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo/Local/File.pm:

[09:23] <dalek> rakudo/nom: Make sure signatures match

[09:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b52642a17d

[09:37] *** brrt joined
[09:37] <FROGGS> lizmat++

[09:40] *** SamuraiJack__ left
[09:43] *** SamuraiJack joined
[09:47] *** Psyche^ joined
[09:49] *** dduncan joined
[09:51] <dduncan> Question: What is the best url to look at that tells how Perl 6 and Not Quite Perl differ?  I know Not Quite Perl is supposed to be a subset of Perl 6, but I'm wanting basically a summary of what parts of Perl 6 that Not Quite Perl doesn't have.  So far Google hasn't been very helpful.

[09:52] <dduncan> Or basically a pair of lists, one showing major things Not Quite Perl does have of Perl 6, and one showing major things it doesn't.

[09:52] *** virtualsue joined
[09:53] <dduncan> The only detail I found so far is Not Quite Perl doesn't have "list context".

[09:54] <dduncan> I also know it lacks a lot of libraries or extensions.  But putting those aside, I'm asking more about the more central language features.

[09:54] <lizmat> NQP doesn't have assignments, only binding

[09:54] <lizmat> NQP doesn't have auto-vivification

[09:55] <dduncan> lizmat, thank yiou, that is helping

[09:55] <lizmat> basically all system features need to be called with nqp::foo

[09:55] *** atroxaper joined
[09:55] <lizmat> all function calls need parens

[09:58] <dalek> rakudo/nom: 1854d5c | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo/Locally.pm:

[09:58] <dalek> rakudo/nom: Make sure we have a lock for each object

[09:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1854d5c16d

[09:59] <dduncan> Related question.  If one has a module written in Not Quite Perl, can one use it in a Perl 6 program such that it is treated as being Perl 6 code?  It is a true subset?  Or is Not Quite Perl code declared differently such that Perl 6 wouldn't treat it as Perl 6 code?

[09:59] *** atroxaper left
[09:59] *** itz joined
[10:00] <lizmat> there's basically two ways:

[10:00] <lizmat> expose it to NQP and Perl6 as nqp:: subs

[10:01] *** SevenWolf left
[10:01] <lizmat> 2. get a Perl6 "handle" by calling nqp::hllize

[10:01] *** SamuraiJack left
[10:02] *** dmol joined
[10:02] <dduncan> Thank you lizmat, I have no further questions now (especially as its 3am), but maybe another day.

[10:03] <lizmat> yw, dduncan, and good night if you decide to get some shuteye

[10:03] <dduncan> that is the plan

[10:03] *** dduncan left
[10:07] <lizmat> I wonder how much sense it would make to have an "is locked" attribute

[10:08] <lizmat> basically, it would add a wrapper to said method, and use the $!lock attribute by default as a lock to to a $!lock.protect( )

[10:08] <lizmat> on the actual method call

[10:09] *** dmol left
[10:09] *** denis_boyun_ joined
[10:10] *** brrt left
[10:14] *** denis_boyun___ joined
[10:14] *** denis_boyun_ left
[10:21] <dalek> rakudo/nom: a5aefa9 | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo/Local/Installation.pm:

[10:21] <dalek> rakudo/nom: Make sure CURL::Installation.install is omnipotent

[10:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a5aefa9a2f

[10:27] *** treehug88 joined
[10:28] *** treehug88 left
[10:41] *** Su-Shee_ is now known as Su-Shee

[10:43] *** itz left
[10:45] *** spider-mario joined
[10:50] *** SamuraiJack joined
[11:05] *** itz joined
[11:14] *** Rotwang left
[11:15] *** dmol joined
[11:27] *** anaeem1_ left
[11:35] <lizmat> m: sub a { say "Foo" }; my &b := &a; b  # so it's easy to alias a sub

[11:35] <camelia> rakudo-moar 1854d5: OUTPUT«Foo␤»

[11:35] <lizmat> m: method a { say "Foo" }; my &b := &a; b  # but how to do this for a method ?

[11:35] <camelia> rakudo-moar 1854d5: OUTPUT«Useless declaration of a has-scoped method in mainline (did you mean 'my method a'?)␤[31m===[0mSORRY![31m===[0m Error while compiling /tmp/pps6TzMMBq␤Undeclared routine:␤    &a used at line 1␤␤»

[11:36] <[Sno]> lizmat: thanks

[11:37] *** anaeem1_ joined
[11:43] *** dmol left
[11:45] *** araujo joined
[11:50] <moritz> m: class A { method a { say 42 } }; A.^add_method('b', A.can('a')[0]); A.^compose; A.b

[11:50] <camelia> rakudo-moar a5aefa: OUTPUT«42␤»

[11:50] <moritz> that's how you alias methods

[11:52] <lizmat> moritz++

[11:52] * TimToady wonders if that's subject to optimizer damage if the compose is at run time

[11:53] * lizmat is thinking a twigil for & to indicate the type of code

[11:54] <lizmat> but maybe that would quickly become a trigil

[11:54] <TimToady> seems wrongish; other twigils mostly indicate strange scoping or binding

[11:54] <TimToady> and type is just in the sigil

[11:54] <lizmat> m: class A { method a { say 42 } }; BEGIN A.^add_method('b', A.can('a')[0]); A.^compose; A.b

[11:54] <camelia> rakudo-moar a5aefa: OUTPUT«42␤»

[11:54] <lizmat> maybe just BEGIN would be enough to prevent optimizer damage ?

[11:55] <lizmat> m: class A { method a { say 42 } }; BEGIN A.^add_method('b', A.can('a')[0]); A.b

[11:55] <camelia> rakudo-moar a5aefa: OUTPUT«42␤»

[11:55] <TimToady> presumably, since optimizations aren't supposed to commit till FINAL check time

[11:56] <lizmat> TimToady: any feelings about changing @*INC into an immutable Parcel that can only be changed with "use lib" ?

[11:57] *** atroxaper joined
[11:57] <TimToady> the scoping of 'use lib' is less clear; one would expect it to be lexically scoped as a 'use', whereas it's obvious @*INC is dynamically scoped

[11:58] <TimToady> otoh @*INC is like giving sharp knives to young kids

[11:58] <lizmat> I tried to export @*INC into the lexical scope in which the 'use lib' is done

[11:59] <lizmat> but for some reason, the value doesn't show up until runtime in the scope

[11:59] <moritz> lexical 'use lib' doesn't sound too useful, IMHO

[11:59] <lizmat> moritz: why?

[11:59] *** xenoterracide joined
[11:59] <moritz> it's a common pattern for a script to include the paths that are needed for the rest of the application

[11:59] <lizmat> it is *essential* in my book

[11:59] <lizmat> which would be in the outer scope

[11:59] <moritz> and the modules just 'use' the rest of the modules, without caring where they come from

[12:00] <lizmat> but that feels like p5 think

[12:00] <moritz> it feels like separation of concern

[12:00] <moritz> you don't want to spread path handling into every module of yours

[12:00] <lizmat> in p6 we need to get used to the idea that each module determines more or less exactly, which version of the modules they use

[12:01] <lizmat> no, I don't

[12:01] <moritz> yes, but that doesn't equate to setting up the search path in every module

[12:01] * TimToady thinks of official modules and unofficial modules very differently from each other

[12:01] *** atroxaper left
[12:01] <moritz> which you'd need, if 'use lib' was actually lexical

[12:02] <lizmat> TimToady: official, as in part of the setting?  or the core distribution?  or something like rakudo* ?

[12:02] <moritz> TimToady: it's not entirely clear to me how and unofficial module graduates to official

[12:02] <moritz> s/and/an/

[12:02] <moritz> in particular, if it involves changing the source code, or if it's a question of meta data

[12:02] <TimToady> when you reveal it to the "world" and give it an immutable identity

[12:02] <TimToady> the defintion of "world" may vary

[12:03] <lizmat> immutable identitiy as in auth/ver combo, right ?

[12:03] <TimToady> when you're done playing with the current version

[12:03] <TimToady> of course, under git, all identities are already immutable

[12:03] <TimToady> yes, basically

[12:04] <TimToady> if you want to edit a file and run it without a commit, you need local mutability

[12:04] <TimToady> where "local" is the opposite of "world", whatever that is :)

[12:05] <TimToady> at some scale we want to force everyone into the git model, not have mutable versions of module Foo floating around the networks

[12:05] <TimToady> so building systems using @*INC feels ucky to me, from that perspective

[12:06] <TimToady> it's find for little temporary stuff, but not good for large systems

[12:06] <TimToady> *fine

[12:06] <lizmat> I'd be in favour of encapsulating @*INC into an object with complete control as to its access

[12:06] <TimToady> but that's my opinion after one jet-lagged cuppa

[12:07] <TimToady> I just know that P5-thinkers are gonna wanna abuse @*INC on the large scale

[12:08] *** cognominal joined
[12:08] <TimToady> of course, I may just be confusing file immutability with path immutability here

[12:09] <TimToady> policy on *which* repos to use tends to be site-wide, whatever "site" means

[12:11] * TimToady goes to see if a second cup o' coffee makes him any less TZ-displaced...

[12:11] <lizmat> indeed..  so maybe we need just a temporary, lexical @*INC functionality

[12:12] <lizmat> or maybe allow for a :inc parameter to "use"

[12:14] * TimToady notes that an import of a lexical into UNIT's lexical scope can import a dynamic variable for the entire application, so the decision about path scoping could conceivably be downstream from that

[12:14] <xenoterracide> perl6-debug-m -Ilib t/persistence.t  # Start argument to substr out of range. Is: -1, should be in 0..0

[12:14] <xenoterracide> anyone have any idea's about hat error? (happens with debug-p too)

[12:14] <TimToady> .oO(it's not nice to start arguments...)

[12:15] <xenoterracide> lol

[12:15] <xenoterracide> alternative is there a Dumper function somewhere?

[12:16] <xenoterracide> ala p5 Data::Dumper/Data::Printer

[12:16] <lizmat> well, in general: .perl

[12:16] <TimToady> or json

[12:17] <lizmat> for internal debugging, there's the unspecced .DUMP

[12:17] <lizmat> m: say 42.DUMP

[12:17] <camelia> rakudo-moar a5aefa: OUTPUT«42␤»

[12:17] <TimToady> would be nice to have yaml

[12:17] <lizmat> m: say { a => 42 }.DUMP

[12:17] <camelia> rakudo-moar a5aefa: OUTPUT«Hash<1>(␤    :$!descriptor((null)),␤    :$!storage(BOOTHash<2>(a => ▶42))␤)␤»

[12:17] <lizmat> TimToady: patches welcome  :-)

[12:17] <moritz> m: ''.substr(*-1)

[12:17] <camelia> rakudo-moar a5aefa: OUTPUT«Unhandled exception: Start argument to substr out of range. Is: -1, should be in 0..0␤   at <unknown>:1  (/home/p6eval/rakudo-inst-2/languages/perl6/runtime/CORE.setting.moarvm:throw:4294967295)␤ from src/gen/m-CORE.setting:12907  (/home/p6eval/rakudo-…»

[12:18] <lizmat> moritz: that seems legit ?

[12:18] <TimToady> lizmat: I agree entirely :)

[12:21] <moritz> lizmat: it does; I just wanted to reproduce the error message that xenoterracide saw

[12:22] <xenoterracide> https://github.com/xenoterracide/p6-annotations

[12:22] <xenoterracide> that's the source I'm running

[12:23] <xenoterracide> if that has anything to do with anything

[12:23] <xenoterracide> (just pushed)

[12:26] *** kivutar joined
[12:30] *** brrt joined
[12:32] <lizmat> off do explain some de-cocooning...

[12:32] *** anaeem1_ left
[12:32] <lizmat> *to

[12:37] <timotimo> so, since it's @*INC, what's the use case for modifying @*INC and "calling" something with the changed dynamic include path?

[12:37] <yoleaux> 00:29Z <japhb> timotimo: I've got a hack day, and was planning to spend a chunk of it on perl6-bench.  Any new work on it in the last couple months or plans that I should be aware of?

[12:37] <yoleaux> 07:09Z <japhb> timotimo: You might want to pull perl6-bench.  :-)

[12:37] <timotimo> japhb: yays :)

[12:39] <xenoterracide> I want to add a role to the metaclass, how would I do that?

[12:40] <timotimo> xenoterracide: you're doing some fairly magical stuff, aren't you? :)

[12:43] <xenoterracide> timotimo: I'm trying to create a rudimentary annotation implementation

[12:43] <dalek> rakudo/nom: 31d31c2 | jnthn++ | / (4 files):

[12:43] <dalek> rakudo/nom: Include proper version info into perl6-debug.

[12:43] <dalek> rakudo/nom: 

[12:43] <dalek> rakudo/nom: The missing version info seems to have caused problems at setting load

[12:43] <dalek> rakudo/nom: time, presumably as it tried to construct some kind of version object.

[12:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/31d31c2ec9

[12:43] <timotimo> what does "annotation" mean here?

[12:44] <xenoterracide> in this case it's a role with a hash that I want to put on the metaclass not the class

[12:44] <TimToady> Any sufficiently advanced technology is indistinguishable from what the founders never imagined...

[12:44] <xenoterracide> because it's class level metadata

[12:45] <dalek> nqp/qast_lazy_annotation: 3df5d0e | (Timo Paulssen)++ | src/NQP/Actions.nqp:

[12:45] <dalek> nqp/qast_lazy_annotation: "has_ann" is better here.

[12:45] <dalek> nqp/qast_lazy_annotation: review: https://github.com/perl6/nqp/commit/3df5d0eb32

[12:49] * TimToady officially values those members of the community who test the design to destruction.  :P

[12:51] <timotimo> lizmat: https://gist.github.com/timo/e435363b9ecc25bb9495

[12:51] <timotimo> ^ (and others, too)

[12:51] *** ribasushi left
[12:57] *** atroxaper joined
[13:01] *** SamuraiJack left
[13:01] *** ribasushi joined
[13:02] *** rurban joined
[13:02] <xenoterracide> wait nqp has some variant of annotations or were they added while I was away being busy

[13:02] *** atroxaper left
[13:04] <timotimo> i'm not sure what you mean :\

[13:05] <timotimo> oh, that branch of mine?

[13:05] <xenoterracide> https://github.com/perl6/nqp/commit/3df5d0eb32 < was just glancing at this commit

[13:05] <timotimo> that's about qast nodes only

[13:05] <xenoterracide> ah

[13:05] <timotimo> qast nodes used to have a hash in them that you could just access like $my_node<foobar> := "hi"

[13:06] <timotimo> but that meant having that hash for every single node, even if it would end up unused

[13:06] <xenoterracide> ah

[13:07] <xenoterracide> trying to do similar for classes I guess

[13:07] <xenoterracide> so then I can build things to use them

[13:07] *** thou joined
[13:10] *** virtualsue left
[13:12] *** ren1us joined
[13:15] *** cognominal left
[13:16] <timotimo> i'm playing around with the thought of adding a HTTP server implementation that does concurrency ...

[13:18] <timotimo> also, i kinda want to see the logotypes of dependencies of modules on modules.perl6.org appear next to the module, maybe further to the left of the module's name?

[13:18] *** cognominal joined
[13:18] <timotimo> and then it'd be nice to have a logo for NativeCall

[13:18] <timotimo> so that it's easy to see which modules depend on a C library and which are "pure-perl"

[13:18] <dalek> doc: 1cc683c | Mouq++ | lib/Mix.pod:

[13:18] <dalek> doc: Headings were switched in Mix.pod

[13:18] <dalek> doc: review: https://github.com/perl6/doc/commit/1cc683c549

[13:21] *** Alula_ joined
[13:22] *** thou left
[13:23] *** virtualsue joined
[13:28] <jnthn> timotimo: I think segomos++ has been working on a concurrent HTTP server, fwiw. :)

[13:28] <yoleaux> 07:56Z <FROGGS> jnthn: I can call that, but I cannot access the elems of the returned thing: sub sg_get_fs_stats(CArray[int]) returns CArray[sg_fs_stats] is native("libstatgrab") { * };

[13:28] <timotimo> oh!

[13:28] <timotimo> did he start when async I/O was already in place?

[13:30] <lizmat> I think so

[13:30] <lizmat> he found the race I theoretically realised

[13:30] <timotimo> ah! :)

[13:30] <lizmat> and that jnthn has fixed / provided an alternative for since then

[13:32] <lizmat> specifically: Supply.on_demand

[13:32] <lizmat> (instead of Supply.new)

[13:33] *** brrt left
[13:56] *** uniejo joined
[14:01] *** uniejo left
[14:04] *** kaare__ left
[14:04] *** xinming joined
[14:04] *** cognominal left
[14:05] <dalek> rakudo/nom: 9ccf3a9 | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo.pm:

[14:05] <dalek> rakudo/nom: Make sure we load one module at a time

[14:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9ccf3a987b

[14:05] <dalek> rakudo/nom: 1bff0d1 | (Elizabeth Mattijsen)++ | tools/build/gen-cat.pl:

[14:05] <dalek> rakudo/nom: Remove all lines that match ^# \w

[14:05] <dalek> rakudo/nom: 

[14:05] <dalek> rakudo/nom: These are all comments that we don't need in the concatenated setting (I don't

[14:05] <dalek> rakudo/nom: think), at least not right now when we don't have line numbering going back to

[14:05] <dalek> rakudo/nom: the constituent modules.  Hopefully, this will mean that there's less of a

[14:05] <dalek> rakudo/nom: setting building penalty for adding some internal documentation to the setting.

[14:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1bff0d1e7b

[14:07] *** anaeem1 joined
[14:11] <lizmat> after this, the Stage parse  for parrot when down from    : 145.547 to 121.377 on my machine

[14:13] *** anaeem1 left
[14:15] <jnthn> Wow

[14:15] <lizmat> hmmm... actually, I think that's exaggerated

[14:16] <lizmat> testing it again, I get a 122.897 for thie original

[14:16] <lizmat> so it's more in the 1% improvement

[14:16] <lizmat> I guess the other time my machine was doing something heavy as well

[14:18] <dalek> specs: 3dabef9 | pmichaud++ | S99-glossary.pod:

[14:18] <dalek> specs: Improve circumfix entry a bit.

[14:18] <dalek> specs: review: https://github.com/perl6/specs/commit/3dabef92ee

[14:19] <timotimo> lizmat: why not also remove ^\w*'#'?

[14:19] <jnthn> uh, \s* ? :)

[14:19] <timotimo> er

[14:19] <timotimo> yes

[14:20] <lizmat> timotimo: I found that ^# \w always indicated real comments

[14:20] <lizmat> anything else usually indicated some code that was disabled

[14:21] <timotimo> hmm

[14:21] <lizmat> I thought there could be value in leaving that in the setting for debugging

[14:21] <lizmat> BTW, some more rakudo testing revealed the parse differnces where just noise

[14:22] <timotimo> so parsing comments is probably rather fast?

[14:22] <lizmat> *parrot

[14:22] <lizmat> yup

[14:22] *** anaeem1_ joined
[14:22] <lizmat> the main reason for doing this patch, is that I want to be writing some more internal documentation in the setting

[14:23] <lizmat> and not have to worry about setting parsing time

[14:23] <timotimo> that does sound nice

[14:23] <lizmat> (specifically on parrot)

[14:24] <lizmat> recently I found myself looking at setting code I wrote about a year ago and not immediately understanding it, because of lack of comments  :-(

[14:28] <dalek> specs: 2f45ae5 | pmichaud++ | S99-glossary.pod:

[14:28] <dalek> specs: More glossary updates ("Synopsis", "TMTOWTDI")

[14:28] <dalek> specs: review: https://github.com/perl6/specs/commit/2f45ae578f

[14:29] <lizmat> pmichaud++ for committing again  :-)

[14:29] *** rurban left
[14:30] <pmichaud> good morning, #perl6

[14:30] <yoleaux> 8 Jun 2014 21:10Z <raiph> pmichaud: I'm trying to encourage a little cleanup of gh/perl6; please delete github.com/perl6/bench-scripts, /reports, and /nqpbook (for a bit more detail see https://questhub.io/realm/perl/quest/534571eabbd0bed24e00006d and http://irclog.perlgeek.de/perl6/2014-06-08#i_8840143)

[14:31] <lizmat> pmichaud o/

[14:31] *** kaare__ joined
[14:32] <jnthn> morning, pmichaud 

[14:34] <colomon> pmichaud!

[14:37] <dalek> rakudo/nom: d1be6d4 | (Elizabeth Mattijsen)++ | README.md:

[14:37] <dalek> rakudo/nom: Mention --gen-nqp for parrot

[14:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d1be6d4c77

[14:39] *** uniejo joined
[14:42] *** uniejo left
[14:54] <timotimo> ohai pmichaud! :)

[14:59] *** kaare__ left
[14:59] *** atroxaper joined
[15:00] *** dmol joined
[15:04] *** BenGoldberg joined
[15:04] *** ren1us left
[15:04] *** atroxaper left
[15:07] <dalek> rakudo/nom: 36b1250 | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo.pm:

[15:07] <dalek> rakudo/nom: Fix CURL::File.new returning Nil one more time

[15:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/36b125043f

[15:07] <timotimo> i'm going to try to build the "combine latest" combinator for supplies now

[15:07] <lizmat> this should fix S11-modules/require.t failures

[15:08] <timotimo> it's supposed to work with a fixed set of supplies, rather than accepting a supply of supplies, right?

[15:08] <timotimo> what happens when a supply gets closed?

[15:09] <lizmat> nothing else comes from that supply ?

[15:09] <timotimo> OK. and if all supplies get closed, the combined supply should close itself, too, right?

[15:09] <lizmat> yes, afaik

[15:09] <jnthn> Wait, there's two directions here

[15:09] <jnthn> Do we mean "done"/"quit", or closing a tap?

[15:10] <timotimo> oh, right, the tappers can close or the supplies can say "i'm done"

[15:10] <timotimo> i was talking only about the latter

[15:10] *** Rotwang joined
[15:10] <lizmat> yup, if the combining supply closes, it should close all the taps it made

[15:10] <timotimo> but i think the former could work the same way, too

[15:10] <jnthn> If the tap of a combined supply is closed, then it should close the taps of all the supplies it was combining that it tapped to do so

[15:10] <jnthn> If one of the supplies we're combining does quit, then we should close all the others and propagate the error

[15:11] <jnthn> The semantics of "done" are more interesting, but I think it wants to be that once *all* of the supplies we're combining are done, then we know we also are done.

[15:11] <lizmat> ++

[15:11] <jnthn> Because the last value something that got done provided is a perfectly good thing to pass one

[15:12] <timotimo> ah. quit is done + error

[15:12] <timotimo> so if any supply quits, we quit. if all supplies done, we done.

[15:13] <timotimo> maybe there should be an "ignore errors" combinator that'll turn any quit into a done :P

[15:13] <lizmat> feels like a modifier to me

[15:14] <jnthn> Oh, many error handling combinators are possible :)

[15:14] <timotimo> "turn any done into a quit" :P

[15:14] <jnthn> .catch(...another supply to tap...) is a nice one

[15:14] <jnthn> .auto_retry($times) is another option :)

[15:14] <jnthn> Depends what you want

[15:15] <jnthn> Probably that latter one could just be called .retry

[15:15] <jnthn> On a quit, it just tries to tap again.

[15:17] <lizmat> jnthn: do you think these should be part of the setting?

[15:17] <jnthn> .catch and .retry seem reasonable, yeah.

[15:18] <jnthn> I mean, it doesn't make that much sense to provide a bunch of nice combinators but then not provide antyhing to help with error handling... :)

[15:18] <lizmat> ok, and then retry with a :$times = 1 named parameters

[15:19] *** uniejo joined
[15:19] *** uniejo left
[15:20] *** kaare__ joined
[15:27] *** atroxaper joined
[15:31] <woolfy> vendethiel++

[15:31] *** kaare__ is now known as kaare_

[15:32] <woolfy> vendethiel just gave a nice presentation, mostly about Perl 6, and my French is not so good that i could understand it all, but most of it was very positive

[15:32] <timotimo> \o/

[15:32] <timotimo> vendethiel++

[15:32] *** xinming left
[15:38] <lizmat> vendethiel++ vraiment  :-)

[15:42] <woolfy> And this was his first presentation ever outside of his schools' classroom...

[15:43] *** guru joined
[15:43] <woolfy> He was amazing, like a pro.  Fast, in French, with humor, people did laugh at some funny stuff.  So, a star is born.

[15:43] <jnthn> \o/

[15:43] <jnthn> vendethiel++

[15:43] *** guru is now known as Guest83335

[15:43] *** Guest83335 is now known as arj_

[15:43] *** arj_ is now known as ajr_

[15:46] *** rurban joined
[15:50] <timotimo> for zip_latest (which is what i'm calling it now), what should be the initial values of supplies to be zipped that have not yet more'd anything?

[15:51] <timotimo> just (Any)?

[15:51] <jnthn> No, you must get at least one value from each

[15:51] <lizmat> that's what I wanted to say

[15:51] <lizmat> otherwise it's not a zip

[15:51] <jnthn> "zip" being the big hint :)

[15:51] <timotimo> fair enough.

[15:51] <lizmat> but how would zip-latest be different from zip?

[15:52] <timotimo> zip will only more a tuple (or zip-result) when all supplies have more'd

[15:52] <timotimo> zip-latest will do one more for every individual more from the supplies

[15:52] <timotimo> and just re-use the previous value for the other supplies

[15:52] <lizmat> ah, ok

[15:52] <jnthn> yup

[15:53] <jnthn> $system_status = $web_server_status.zip_latest($db_status)

[15:53] <lizmat> yeah, got ya  :-)

[15:53] <lizmat> timotimo: please also spec it

[15:54] <timotimo> can do.

[15:54] <timotimo> may be doing @errands before committing anything, though

[15:55] *** kivutar left
[15:57] *** xinming joined
[15:58] *** zacts joined
[15:58] *** zacts is now known as Guest65968

[16:04] <timotimo> m: my @values; @values[5] = 1; say @values[0]:exists; say @values[5]:exists;

[16:04] <camelia> rakudo-moar 36b125: OUTPUT«False␤True␤»

[16:04] <timotimo> it's quite nice to have the :exists thing that differentiates between "has ever had a value set" vs "has a defined value set"

[16:05] <timotimo> should the tests go into zip.t or should i create zip_latest.t?

[16:07] <rurban_> @values[i]:exist requires a trie or such. or only works for the begin or end. Or does rakudo uses sentinel for unasigned array elements as with hashes?

[16:07] <timotimo> i'm not sure how exactly the implementation works

[16:07] *** [particle] joined
[16:07] <masak> vendethiel++

[16:07] <timotimo> lizmat did most of it, iirc?

[16:08] <lizmat> yes

[16:08] <lizmat> nqp::null is the key

[16:08] <lizmat> timotimo: I would create a zip_latest.t

[16:08] <rurban_> do you use a special undef ptyr for arreay elements seperate from NULL?

[16:09] <lizmat> and maybe name it zip-latest ?

[16:09] <timotimo> the method?

[16:09] <rurban_> I see, thanks

[16:09] <timotimo> well, i looked and found "schedule_on", so i thought it'd be underscored

[16:09] <lizmat> well, schedule_on was done by jnthn

[16:09] <lizmat> and he doesn't like kebab :-)

[16:10] <jnthn> Well, I just don't think we should be inconsistent in core...

[16:10] <lizmat> I agree, but which way are we going there...  _ or - ?

[16:10] <lizmat> maybe pmichaud wants to say something about this ?

[16:10] <jnthn> Well, until is-prime showed up, we were doing pretty well with _ :P

[16:15] <lizmat> FPW shutting down&

[16:15] *** lizmat left
[16:20] *** denis_boyun___ left
[16:21] *** Pleiades` left
[16:26] *** Pleiades` joined
[16:37] *** woolfy left
[16:39] *** molaf joined
[16:46] *** itz left
[16:59] * moritz is in favor of going all -

[17:00] <xenoterracide> since I can't figure out how to apply a role to the metaclass maybe I just hack the feature into core

[17:00] <xenoterracide> seems silly though

[17:02] <rindolf> xenoterracide: hi.

[17:02] <rindolf> xenoterracide: what's up?

[17:03] <xenoterracide> rindolf: trying to figure out how to apply a role to the metaclass

[17:03] * colomon agrees with moritz on all -

[17:03] <xenoterracide> and then test that it was applied

[17:05] <xenoterracide> seems that it's not as obviously possible as it is to apply a role to a classs

[17:07] <dalek> rakudo/zip-latest-supply: b99a17a | (Timo Paulssen)++ | / (2 files):

[17:07] <dalek> rakudo/zip-latest-supply: first implementation attempt of zip_latest.

[17:07] <dalek> rakudo/zip-latest-supply: 

[17:07] <dalek> rakudo/zip-latest-supply: currently doesn't parse for some reason ...

[17:07] <dalek> rakudo/zip-latest-supply: review: https://github.com/rakudo/rakudo/commit/b99a17a63c

[17:08] <dalek> roast/zip-latest-supply: e9be5bf | (Timo Paulssen)++ | S17-supply/zip_latest.t:

[17:08] <dalek> roast/zip-latest-supply: draft tests for zip_latest

[17:08] <dalek> roast/zip-latest-supply: review: https://github.com/perl6/roast/commit/e9be5bf9b3

[17:09] <timotimo> (switching computes)

[17:09] <timotimo> (computers)

[17:12] <rindolf> xenoterracide: ah, OK.

[17:12] * rindolf hopes TimToady is not ignoring him.

[17:12] <rindolf> Seems unlikely.

[17:14] *** anaeem1_ left
[17:15] *** dmol left
[17:15] *** bjz left
[17:16] *** anaeem1_ joined
[17:19] *** anaeem___ joined
[17:21] *** anaeem1_ left
[17:22] *** virtualsue left
[17:29] <japhb> pmichaud, raiph: re: http://irclog.perlgeek.de/perl6/2014-06-14#i_8871745 , please don't delete github.com/perl6/bench-scripts until one of us has had the chance to cherry-pick useful tests into perl6-bench.

[17:29] <japhb> (Where 'us' is ... well, anyone, really)

[17:35] *** denis_boyun joined
[17:36] * colomon must resist urge to port p5 script needing fixes to p6…

[17:40] <colomon> arrrgh, so much easier to program in p6...

[17:44] <colomon> ah, heck.  problem was a typo in a variable name with no "use strict".  and adding it gives me screens of error messages.

[17:44] <[Coke]> ugh, the default tabstop is EIGHT? heresy.

[17:45] <japhb> colomon: These days most of the Perl 5 I write is in furtherance of Perl 6.  (He says, currently hacking the Perl 5 part of perl6-bench.)  :-)

[17:45] <colomon> japhb++

[17:46] <colomon> Pretty much any new script I write is in p6.

[17:46] <japhb> Ditto.

[17:46] * japhb can only barely remember what it was like to program in Perl 4.  Talk about a different language!

[17:48] <colomon> same here.  But p5 came out pretty quickly after I started learning perl, I think.

[17:53] <xenoterracide> is make clean the best way to do clean? seems insufficient

[17:55] <colomon> make realclean, maybe?

[17:58] <timotimo> "masak realclean" is even better

[18:00] <moritz> moarvm needs 'make realclean' occasionally

[18:00] <moritz> in most other projects (without submodules), git clean -xdf is fine

[18:03] <japhb> I'm considering making some changes to the format of the perl6-bench timing files that would be non-backwards-compatible (meaning, old timings files wouldn't be readable by new versions of analyze).  Anyone object?

[18:04] *** denis_boyun left
[18:05] <xenoterracide> hmm, aight

[18:12] *** carlin_ is now known as carlin

[18:16] *** hoverboard joined
[18:18] *** kivutar joined
[18:20] *** benabik joined
[18:28] *** zakharyas joined
[18:36] <timotimo> i've doodled up a little nativecall logo suggestion

[18:38] <timotimo> http://t.h8.lv/nativecall_logo.png - should be viewed against a white background if possible

[18:38] <timotimo> though i may add white borders around everything to ensure readability on all backgrounds

[18:40] <timotimo> afk again

[18:42] *** kivutar left
[18:46] <FROGGS> o/

[18:46] <masak> \o

[18:47] * masak realclean

[18:49] <FROGGS> O.o

[18:50] *** rurban left
[18:52] <FROGGS> sooo, v5 written in pure Perl6 with a panda compliant build system can do this atm:

[18:52] <FROGGS> perl6-m -Ilib --optimize=off -e 'use v5; say 1.1 + "24b";'

[18:52] <FROGGS> 25.1

[18:52] <FROGGS> now I'll fix its spectest/test summary target

[18:55] <FROGGS> (built parts of a high sleeper today that looks like a castle, enjoying some relaxing hacking now)

[18:55] <xenoterracide> trying to find the right refence for hashes on objects...if I do class Foo { %.foo } I should be able too do obj.foo.push( $key, $value ) right?

[18:57] *** hoverboard is now known as moistcherry

[18:58] <dalek> perl6-bench: b9aaaf9 | (Geoffrey Broadwell)++ | timeall:

[18:58] <dalek> perl6-bench: Default test->{work} when needed, not always in canonify_tests()

[18:58] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/b9aaaf9eea

[18:58] <dalek> perl6-bench: f906151 | (Geoffrey Broadwell)++ | / (2 files):

[18:58] <dalek> perl6-bench: Get rid of 'cooked' timings

[18:58] <dalek> perl6-bench: 

[18:58] <dalek> perl6-bench: As a convenience, timeall was computing 'cooked' (startup subtracted)

[18:58] <dalek> perl6-bench: timings for each test and saving them to the timings files.  But

[18:58] <dalek> perl6-bench: `timeall` shouldn't be cooking anything -- it's just a data gathering

[18:58] <dalek> perl6-bench: program.  It's also not terribly useful since `analyze` has to handle

[18:58] <dalek> perl6-bench: subtracting compile time for scalable tests anyway.  So just save the

[18:58] <dalek> perl6-bench: compiler startup times in the 'run' section of the timings file, and

[18:58] <dalek> perl6-bench: get rid of the 'cooked' computations and all the cruft that went with

[18:58] <dalek> perl6-bench: them.

[18:58] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/f906151773

[18:58] <dalek> perl6-bench: 1482f59 | (Geoffrey Broadwell)++ | timeall:

[18:58] <dalek> perl6-bench: Add tags for test type (e or f) and size (micro or mini)

[18:58] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/1482f597e0

[18:58] <vendethiel> well. home.

[19:02] <atroxaper> How can I use class name as key in hash or pair? In Java I can write ClassName.class.

[19:04] <masak> m: class Balloon {}; my $b = Balloon.new; say $b.^name

[19:04] <camelia> rakudo-moar 36b125: OUTPUT«Balloon␤»

[19:04] <masak> like that?

[19:05] <atroxaper> masak: mmm. ^name. Yes. That's it!

[19:06] <atroxaper> masak: Thanks!

[19:07] <atroxaper> m: class Balloon(); say Balloon.^name;

[19:07] <camelia> rakudo-moar 36b125: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/E78570ikFw␤Unable to parse class definition␤at /tmp/E78570ikFw:1␤------> [32mclass Balloon[33m⏏[31m(); say Balloon.^name;[0m␤    expecting any of:␤        statement list␤        pr…»

[19:07] <atroxaper> m: class Balloon{}; say Balloon.^name;

[19:07] <camelia> rakudo-moar 36b125: OUTPUT«Balloon␤»

[19:09] <timotimo> http://t.h8.lv/nativecall_logo.png - now with white borders

[19:10] <timotimo> er

[19:10] <timotimo> almost

[19:10] <timotimo> now.

[19:11] <timotimo> now without pink tinted background

[19:11] <dalek> rakudo-star-daily: 695e450 | coke++ | log/ (13 files):

[19:11] <dalek> rakudo-star-daily: today (automated commit)

[19:11] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/695e450e60

[19:11] <dalek> perl6-roast-data: f738213 | coke++ | / (5 files):

[19:11] <dalek> perl6-roast-data: today (automated commit)

[19:11] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/f7382130d4

[19:11] <FROGGS> I don't see a pink tinted back

[19:12] <timotimo> in that case you f5'd late enough

[19:13] <timotimo> jnthn: would you mind if i committed that icon as the nativecall logotype?

[19:15] <vendethiel> (thanks guys :).)

[19:15] <jnthn> What is it? :)

[19:16] <vendethiel> woolfy++ lizmat++ cognominal++ everybody-there++

[19:16] <timotimo> it's an N made out of squares and a circle

[19:17] <timotimo> maybe i could/should turn the circle into a C

[19:17] <FROGGS> and it connects things obviously...

[19:17] * vendethiel got a camel peluche, a perl book, and quite some more ...

[19:17] <FROGGS> no, the circle is P6, the old squares are C :o)

[19:18] <timotimo> oh, right

[19:18] <FROGGS> I'd give the shapes nice borders perhaps (same color, just a little brighter)

[19:18] <FROGGS> and I would not add more details

[19:18] <FROGGS> (like chars)

[19:20] <timotimo> well, the connecting lines are black, so they get borders, too

[19:24] <timotimo> f5 for the new version, FROGGS 

[19:24] <timotimo> ah, this lacks white behind the connecting lines again

[19:25] <FROGGS> hmmm, the brighter borders do not mix well with the white background

[19:26] <timotimo> try now

[19:27] <timotimo> now, finally

[19:28] <timotimo> hmm, that doesn't look so awesome

[19:28] <FROGGS> true

[19:28] <timotimo> now the center line is thicker

[19:28] <FROGGS> does it look better (locally) if you make the background dark(er)?

[19:28] <timotimo> the diagonal one

[19:28] <timotimo> on black it looks okay

[19:29] <xenoterracide> :/

[19:29] <FROGGS> if you want to keep the white the borders should be darker instead

[19:29] <xenoterracide> modifying ClassHOW to apply a role didn't work either, seems to result in a compiletime error

[19:30] <timotimo> how is that?

[19:31] <timotimo> with a black background it looks worse, IMO

[19:32] <FROGGS> hmmmm, IMO my advices were crap :/

[19:32] <timotimo> haha

[19:32] *** dmol joined
[19:34] *** kaare_ left
[19:36] *** colomon joined
[19:38] <timotimo> i can't compile rakudo any more :\

[19:38] <FROGGS> O.o

[19:39] <timotimo> it seems to explode near something in the CompUnitRepo section

[19:39] <FROGGS> ohh

[19:39] <timotimo> never mind

[19:39] <timotimo> configure.pl fixed it

[19:40] <FROGGS> k

[19:41] *** uniejo joined
[19:42] *** uniejo left
[19:49] *** anaeem___ left
[19:51] *** rurban joined
[19:55] *** vendethiel joined
[19:55] *** rurban left
[19:56] *** rindolf left
[19:57] *** liztormato joined
[19:58] <liztormato> vendethiel: You're welcome

[19:59] <liztormato> On the kebab-casing: I'm also in favour of all -

[19:59] <liztormato> Still 3 hours before we're home

[20:01] *** SevenWolf joined
[20:02] *** SevenWolf left
[20:02] <timotimo> in that case, i shall -ify it

[20:04] *** SevenWolf joined
[20:04] <liztormato> I also feel this is a bit of eating our own dogfood

[20:05] <masak> 'night, #perl6

[20:05] <liztormato> If there are parsing issues with kebab-cased names *we* should find out about it

[20:06] <dalek> rakudo/nom: f3ef613 | (Timo Paulssen)++ | / (2 files):

[20:06] <dalek> rakudo/nom: first implementation attempt of zip_latest.

[20:06] <dalek> rakudo/nom: 

[20:06] <dalek> rakudo/nom: currently doesn't parse for some reason ...

[20:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f3ef613938

[20:06] <dalek> rakudo/nom: fe867d6 | (Timo Paulssen)++ | src/core/Supply.pm:

[20:06] <dalek> rakudo/nom: rename zip_latest zip-latest

[20:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fe867d6c4c

[20:08] <benabik> If-this-is-kabob-case, is_this_plate_case?

[20:09] <liztormato> Just about ;-)

[20:09] <benabik> CamelKebabs-on-a_plate?

[20:10] <liztormato> Nom nom

[20:10] <FROGGS> timotimo: what do you mean by "doesn't parse" ?

[20:11] *** darutoko left
[20:11] *** itz joined
[20:17] <timotimo> that was before i Configure.pl'd

[20:17] <timotimo> i didn't realize the parse error was coming from that, i thought it was my fault

[20:17] <timotimo> speccing the method right now

[20:17] <FROGGS> ahh, okay :o)

[20:24] *** igorsutton joined
[20:24] <itz> this came from twitter but is still funny https://github.com/search?q=%22%3Awq%22&ref=cmdform&type=Code

[20:25] <FROGGS> hehe

[20:26] *** benabik left
[20:30] <dalek> specs: 2a277a7 | (Timo Paulssen)++ | S17-concurrency.pod:

[20:30] <dalek> specs: spec zip-latest

[20:30] <dalek> specs: review: https://github.com/perl6/specs/commit/2a277a7b51

[20:33] <liztormato> timotimo++

[20:33] *** liztormato left
[20:33] *** igorsutton left
[20:33] *** liztormato joined
[20:35] <timotimo> http://t.h8.lv/nativecall_logo.png - with forced white background: not terrible

[20:36] *** liztormato left
[20:36] *** Guest65968 left
[20:41] <colomon> m: say "A pple".subst(/"A "/, "A", :global)

[20:41] <camelia> rakudo-moar fe867d: OUTPUT«Apple␤»

[20:41] <colomon> why is this not working in my code?  :|

[20:42] <timotimo> depends; what does your code look like, with what version are you executing it?

[20:42] <timotimo> did you forget to mutate something?

[20:43] <colomon> called it on an array

[20:43] <colomon> instead of a string

[20:43] <colomon> got the join in the wrong place.

[20:43] <timotimo> well, in that case ... :)

[20:44] <vendethiel> liz is crazy. In a terribly good way, but terribly crazy

[20:44] <timotimo> :D

[20:44] <colomon> vendethiel: that's quite well known in these parts.  :)

[20:44] <vendethiel> that's certainly known by me now ...

[20:45] <vendethiel> It was really cool, though :)

[20:45] * vendethiel will learn p5 later

[20:46] <timotimo> what do you want p5 for? :P

[20:46] <vendethiel> knowledge.

[20:46] <colomon> what specifically was she doing that was crazy this time?

[20:47] <vendethiel> colomon: what she did to me

[20:51] *** moistcherry is now known as hoverboard

[20:51] *** hoverboard left
[20:52] *** rurban joined
[20:52] <xenoterracide> $type.HOW.HOW.add_role( $type.HOW, Annotated ); # doesn't work but doesn't throw an error

[20:53] *** liztormato joined
[20:54] <liztormato> I"m pretty sure lizmat didn't do anything to vendethiel

[20:54] <liztormato> Yet.  ;-)

[20:54] <colomon> dum dum dum.....

[20:54] <colomon> (that was soundtrack, mind you)

[20:55] <colomon> (ominous) 

[20:55] <liztormato> My turn to drive &

[20:55] *** liztormato left
[20:55] *** ajr_ left
[20:55] *** atroxaper left
[20:56] *** rurban left
[20:56] *** atroxaper joined
[20:56] *** virtualsue joined
[21:00] *** atroxaper left
[21:03] * colomon is closing down his machine to take it to the Apple store.  May be AFK for a few days.

[21:04] <TimToady> .tell rindolf I just seem to be zigging when you're zagging, but you can always leave a PM, you don't have to ask...

[21:04] <yoleaux> TimToady: I'll pass your message to rindolf.

[21:04] *** igorsutton joined
[21:04] * TimToady is also vacating somewhat right now...

[21:05] *** colomon left
[21:05] <TimToady> looking at the right ocean rather than the left one...

[21:06] <FROGGS> that sounds about right :o)

[21:06] <TimToady> note to burglars monitoring social media: there are still people at my house :)

[21:07] <vendethiel> dang it

[21:07] <vendethiel> I was trying to get one of your hawaiin shirts for my next presentation :s

[21:07] *** Pleiades` left
[21:08] *** igorsutton left
[21:09] <FROGGS> *g*

[21:09] <FROGGS> yes, these shirts are noteworthy :o)

[21:10] *** spider-mario left
[21:11] *** thou joined
[21:11] *** Pleiades` joined
[21:11] * TimToady mostly packed YAPC T-shirts for YAPC::NA because more of 'em fit into the suitcase

[21:12] <dalek> perl6-bench: 0aead85 | (Geoffrey Broadwell)++ | timeall:

[21:12] <dalek> perl6-bench: Fix braino in previous commit

[21:12] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/0aead855e2

[21:12] <dalek> perl6-bench: 98abcc9 | (Geoffrey Broadwell)++ | / (2 files):

[21:12] <dalek> perl6-bench: Compute rates based on work instead of scale

[21:12] <dalek> perl6-bench: 

[21:12] <dalek> perl6-bench: This "unbends" plots for tests whose workload increases superlinearly

[21:12] <dalek> perl6-bench: with SCALE.  Turned out to be a smaller diff than I expected.  Half

[21:12] <dalek> perl6-bench: decent design FTW.  :-)

[21:12] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/98abcc9e90

[21:13] *** molaf left
[21:13] * TimToady is going to be away from home both a week before and a week after YN

[21:14] <japhb> So ... it turns out that r-m is indeed getting quite a bit faster since it was merged to the mainline.  However, 2014.05 and nom both fail to execute rc-forest-fire.  Might be something like bless(*), taking a look.

[21:15] <timotimo> bless(*) was only giving deprecation messages i think

[21:15] <japhb> Yeah, and someone already cleaned that out of the rc-forest-fire code, it looks like.

[21:15] <japhb> Nope, this one is a real segfault.

[21:16] <timotimo> oh my

[21:16] <timotimo> well, forest-fire also gives wrong results

[21:17] <timotimo> i've asked someone to look into it, didn't have tuits to do it myself yet

[21:18] * vendethiel got a round tuit ...

[21:18] <vendethiel> quite literally in both senses ...

[21:19] * timotimo got a whole bag of 'em

[21:19] <timotimo> but not the colored camelia ones

[21:19] <rurban_> parrot 6.5.0 will now also have workarounds for missing control character aliases with icu 5.2. Too many icu bugs to probe for. we just rolled our own hash for this, similar to moar

[21:20] <japhb> "forest-fire gives wrong results"?  What do you mean by that?

[21:20] <TimToady> doesn't propagate fire, I suspect

[21:20] <timotimo> correct

[21:20] <japhb> that's ... odd

[21:20] * japhb wonders what rotted since last I looked at that

[21:21] <TimToady> I played with that on the way to rewriting the whole thing, and ff makes certain assumptions that a set of subscripted references into another array will stay lvalues

[21:21] <TimToady> or at least, will stay the same container

[21:21] <TimToady> and something is replacing containers

[21:21] <TimToady> so when it looks for surrounding fire, it finds only the original forest

[21:22] <timotimo> oh, that'd be an oops

[21:22] <japhb> Is there a fixed version on RC?  If I'm already breaking old expectations, I might just want to pull a fresh one from upstream

[21:22] <TimToady> the one on RC is not comparable performance-wise because it does everything in-place with an extra state

[21:23] <TimToady> (so is much faster)

[21:24] <vendethiel> damn, all the browser hangs on firefox still ? :(

[21:24] <vendethiel> (when one of the tab messes up, that is)

[21:24] <japhb> TimToady: We could always have rc-forest-fire-{copying,inplace}

[21:26] *** rurban joined
[21:26] <TimToady> vendethiel: I'm about to give up on firefox, it consistently eats 50% of one CPU core for me

[21:26] <japhb> As long as there were equivalent versions for all three languages, it would still give useful data.

[21:26] <vendethiel> TimToady: I gave up about chrome. I'm not okay with it eating my privacy more and more these days

[21:26] <timotimo> even with only nqp or only perl6 it would be helpful

[21:26] *** atroxaper joined
[21:27] <vendethiel> TimToady: There's NO WAY I'm gonna let a company decide which extensions I install on my browser and ask me 5$ to force me to publish it to their store

[21:27] <japhb> vendethiel: You could always just use Chromium instead of branded Chrome.

[21:27] <vendethiel> I really don't care at that point

[21:28] <vendethiel> with 2 videos and a livestream it's taking 10% of my cpu; which is less than chrome would take with all the tabs

[21:29] <japhb> Part of that difference is likely the process isolation that Chrome/Chromium do.

[21:29] <vendethiel> takes a lot of cpu for somebody like me with lots of tabs

[21:29] <TimToady> is there any way to tell which ff tab is misbehaving other than closing it and hoping the cached tab doesn't keep running?

[21:30] <japhb> vendethiel: Yeah, I often have hundreds.  (Tabs Outliner extension)++ for making that less than insane.

[21:30] *** rurban left
[21:30] <vendethiel> I don't have anything to manage it because all extensions I found sucked.

[21:31] *** atroxaper left
[21:31] <japhb> Yeah, it took me several before I found that one.  It is limited mildly by the author being paranoid (in a good way), so it won't sync the tab outline between devices automatically, but other than that I find it basically necessary.

[21:33] * japhb considers his next perl6-bench task, having knocked down the first 10 items on his todo list

[21:38] <TimToady> hmm, looks like it's the Google News tab that chews most of the CPU

[21:39] <TimToady> Any sufficiently advanced technology is indistinguishable from an 800 pound snowclone.

[21:39] *** rurban joined
[21:39] *** rurban left
[21:47] <TimToady> -shouldn't-this-be-kebob-casing--o  ?

[21:47] <TimToady> it should stick out on both ends...

[21:48] *** rurban joined
[21:52] *** igorsutton joined
[21:57] *** kurahaupo joined
[21:58] <japhb> Does the apostrophe represent that piece that slid to the side while skewering, and now is just holding on by pressure from either side?

[21:59] *** igorsutton left
[22:09] *** thou left
[22:20] *** xenoterracide left
[22:29] *** atroxaper joined
[22:29] *** zakharyas left
[22:31] *** xenoterracide joined
[22:33] <dalek> perl6-bench: 38589ce | (Geoffrey Broadwell)++ | analyze:

[22:33] <dalek> perl6-bench: Fix relative comparisons in tabular comparison mode

[22:33] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/38589ceafd

[22:33] *** mj41 joined
[22:34] *** atroxaper left
[22:34] <timotimo> timtoady thrres a process manager in chrome

[22:34] <timotimo> it lists tabs with cpu and iirc also memory consumption

[22:43] *** denis_boyun_ joined
[22:47] <timotimo> now with proper typing:

[22:47] <timotimo> TimToady: shift+esc will open this "task manager" thing

[22:49] <timotimo> japhb: can you look into making this sub-module-version-thingie?

[22:51] *** hoverboard joined
[22:51] *** mj41 left
[22:55] *** xenoterracide left
[22:56] *** virtualsue left
[23:04] *** itz left
[23:15] *** xenoterracide joined
[23:16] *** denis_boyun_ left
[23:20] *** xenoterracide left
[23:21] *** Rotwang left
[23:29] <carlin> m: say %*CUSTOM_LIB<site home>

[23:29] <camelia> rakudo-moar fe867d: OUTPUT«(Any) (Any)␤»

[23:29] <carlin> the behaviour of that changed in rakudo f412f8a1e1dedba

[23:30] *** atroxaper joined
[23:30] <carlin> in e030a7bbbc49fb it gave CompUnitRepo::Local::Installation(/home/carlin/rakudo/install/languages/perl6/site) CompUnitRepo::Local::Installation(/home/carlin/.perl6/2014.05-175-ge030a7b)

[23:31] <carlin> panda's bootstrap is broken because now `for grep(*.defined, $destdir, %*CUSTOM_LIB<site home>) -> $prefix {` does nothing unless the directories already exist

[23:31] <vendethiel> FROGGS: ping

[23:32] <timotimo> ah, didn't lizmat or froggs make a change to not have directories show up if they don't exist on the FS?

[23:32] <carlin> yeah I'm guessing that's what f412f8a1e1dedbaf did

[23:33] <timotimo> so here we have a reason why we would be interested in those directories showing up

[23:35] *** atroxaper left
[23:43] *** liztormato joined
[23:43] * liztormato is home

[23:44] <liztormato> Will fix custom lib setting tomorrow

[23:44] *** woolfy joined
[23:45] <liztormato> carlin: Is that soon enough?

[23:45] <carlin> that's fine, no hurry

[23:46] <carlin> just something I found when trying to install panda

[23:46] <jnthn> Glad you got back safely, liztormato :)

[23:46] <liztormato> Thanks for the report

[23:46] <carlin> it's easy enough to checkout an earlier revision

[23:47] <liztormato> jnthn: It's good to be back home safely

[23:47] <jnthn> :)

[23:48] <liztormato> Sleep now&

[23:48] *** liztormato left
[23:53] <japhb> timotimo: What sub-module-version-thingie are you referring to?

