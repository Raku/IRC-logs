[00:27] *** sergot left
[00:27] *** sergot joined
[01:01] *** colomon joined
[01:09] *** iarna joined
[01:12] *** kurahaupo joined
[01:13] *** chenryn joined
[01:15] *** BenGoldberg left
[01:17] *** chenryn left
[01:17] *** chenryn joined
[01:21] *** chenryn left
[01:25] *** zakharyas joined
[01:26] *** Commy joined
[01:26] <Commy> hi all

[01:28] *** pecastro joined
[01:30] *** chenryn joined
[01:32] *** klapperl joined
[01:32] *** BenGoldberg joined
[01:32] *** FROGGS_ joined
[01:34] *** Alina-malina left
[01:35] *** klapperl_ left
[01:35] *** FROGGS left
[01:43] *** colomon left
[01:47] *** zakharyas left
[02:44] *** araujo left
[02:58] *** noganex joined
[03:02] *** noganex_ left
[03:03] *** BenGoldberg left
[03:13] *** xragnar_ joined
[03:13] *** xragnar left
[03:13] *** xragnar_ is now known as xragnar

[03:23] <dalek> panda: ec1a18a | (Rob Hoelz)++ | lib/Panda/Fetcher.pm:

[03:23] <dalek> panda: Add basic schema support

[03:23] <dalek> panda: 

[03:23] <dalek> panda: Works with git://, http+git://, https+git://, and file:// URIs

[03:23] <dalek> panda: review: https://github.com/tadzik/panda/commit/ec1a18a7a9

[03:23] <dalek> panda: 4b11553 | tadzik++ | lib/Panda/Fetcher.pm:

[03:23] <dalek> panda: Merge pull request #94 from hoelzro/master

[03:23] <dalek> panda: 

[03:23] <dalek> panda: Add basic schema support

[03:23] <dalek> panda: review: https://github.com/tadzik/panda/commit/4b11553a1e

[03:25] *** aghbas joined
[03:25] *** aghbas left
[03:29] *** Alina-malina joined
[03:44] *** kaare_ joined
[03:45] *** gr33n7007h left
[03:50] *** cognominal left
[03:56] *** ventica joined
[03:56] <ventica> o/

[04:12] *** thou left
[04:26] *** rurban joined
[04:29] *** SevenWolf joined
[04:46] <avuserow> \o

[04:48] *** [particle]1 left
[04:54] *** khisanth_ joined
[04:57] *** Khisanth left
[05:01] *** [particle] joined
[05:02] *** gfldex joined
[05:13] *** rurban left
[05:37] *** khisanth_ is now known as Khisanth

[05:47] *** chenryn left
[06:08] *** SevenWolf left
[06:14] *** silug left
[06:19] *** silug joined
[06:19] *** kurahaupo left
[06:35] *** dmol joined
[06:48] *** chenryn joined
[06:58] *** chenryn left
[07:00] *** darutoko joined
[07:08] *** denis_boyun_ joined
[07:12] *** virtualsue joined
[07:16] *** chenryn joined
[07:29] *** lizmat left
[07:38] *** virtualsue left
[07:43] *** kurahaupo joined
[07:49] *** itz joined
[07:51] *** virtualsue joined
[07:51] *** itz_ left
[07:54] *** kivutar joined
[07:55] *** anaeem1 joined
[08:00] *** virtualsue left
[08:07] *** virtualsue joined
[08:17] *** virtualsue left
[08:20] *** iarna left
[08:24] *** Rotwang joined
[08:24] *** dmol left
[08:35] *** anaeem1 left
[08:41] *** Rotwang left
[08:41] *** Akagi201 left
[08:42] *** Akagi201 joined
[08:43] *** molaf joined
[08:57] *** Rotwang joined
[09:09] *** kurahaupo left
[09:12] *** FROGGS_ is now known as FROGGS

[09:24] *** pmurias joined
[09:24] <dalek> nqp-js: 22cb065 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[09:24] <dalek> nqp-js: Handle some type coercions, nqp::add_n, nqp::say.

[09:24] <dalek> nqp-js: 

[09:24] <dalek> nqp-js: nqp::say(1+2) works.

[09:24] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/22cb065608

[09:25] <FROGGS> nice

[09:33] *** spider-mario joined
[09:36] <dalek> nqp-js: 44e7846 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[09:36] <dalek> nqp-js: Better unimplemented placeholders.

[09:36] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/44e7846d90

[09:36] <dalek> nqp-js: 7404b04 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[09:36] <dalek> nqp-js: Handle QAST::SVal.

[09:36] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/7404b04e77

[09:38] <pmurias> is #| and #= implemented?

[09:40] <pmurias> they are supposed to attach docs to stuff like 'has $.foo; # This is an example foo attribute'

[09:47] *** colomon joined
[09:50] <dalek> nqp-js: 1793ed7 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[09:50] <dalek> nqp-js: Ignore QAST::VM.

[09:50] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/1793ed7518

[09:52] *** Commy left
[10:05] <colomon> Hmm, smoker run blew up in rakudobrew last night...

[10:05] <pmurias> currently nqp doesn't display/calculate the exact column for errors/backtraces?

[10:06] *** kurahaupo joined
[10:07] <FROGGS> pmurias: hoelzro is working on #|/#= but does that in a rakudo branch... nqp does not know about these things

[10:07] <colomon> make: *** No rule to make target `m-clean', needed by `clean'.  Stop.

[10:07] <colomon> Failed running make realclean at /home/smoker/.rakudobrew/bin/rakudobrew line 23.

[10:09] *** chenryn left
[10:10] <timotimo> colomon: sounds like the configure step itself blew up?

[10:12] <colomon> Dunno.  The backtrace isn't helpful.  Could easily have been line 113 (run 'make realclean')

[10:12] <pmurias> FROGGS: I guess it can be backported to nqp later on, #|, #= seem awesome for generating methods

[10:16] <pmurias> and a unified doc page for the modules (like metacpan has) seems very important for our fledgling module ecosystem not to end up batshit insane ;)

[10:17] <pmurias> with a cute and strange website for every module, like ruby and javascript stuff has

[10:18] <FROGGS> pmurias: it is unlikely that this gets backported to nqp

[10:19] <pmurias> would it be hard?

[10:20] <FROGGS> I think so

[10:20] *** kurahaupo left
[10:20] <timotimo> oh

[10:20] <FROGGS> also, nqp is meant to be minimalistic

[10:20] <timotimo> getting the "no target realclean" happens to me all the time and used to be nonfatal

[10:20] <timotimo> that's in perl6-bench, though

[10:21] *** lizmat joined
[10:21] *** denis_boyun_ left
[10:24] *** chenryn joined
[10:24] *** chenryn left
[10:25] *** chenryn joined
[10:25] *** chenryn left
[10:26] *** cibs left
[10:26] <vendethiel> .u Ξ

[10:26] <yoleaux> U+039E GREEK CAPITAL LETTER XI [Lu] (Ξ)

[10:26] *** chenryn joined
[10:26] *** cibs joined
[10:30] *** chenryn left
[10:32] *** kurahaupo joined
[10:35] *** MilkmanDan joined
[10:49] *** kivutar left
[10:49] *** Rotwang left
[10:53] *** mr-foobar joined
[10:57] *** chenryn joined
[11:00] *** denis_boyun_ joined
[11:03] *** mr-fooba_ joined
[11:04] *** mr-foobar left
[11:09] *** cognominal joined
[11:14] *** kivutar joined
[11:14] *** Rotwang joined
[11:23] *** Rotwang left
[11:33] *** dmol joined
[11:38] *** beastd joined
[11:41] *** colomon left
[11:41] *** chenryn left
[11:42] *** kivutar left
[11:42] *** pmurias left
[11:45] *** chenryn joined
[11:54] *** kivutar joined
[11:55] <dalek> rakudo/qast_restructure: 0cae987 | jnthn++ | src/Perl6/Actions.nqp:

[11:55] <dalek> rakudo/qast_restructure: Toss clone_qast sub; there's a method for that.

[11:55] <dalek> rakudo/qast_restructure: review: https://github.com/rakudo/rakudo/commit/0cae987c66

[12:00] *** gfldex left
[12:01] <moritz> \o

[12:02] *** Akagi201 left
[12:02] *** Akagi201 joined
[12:03] <moritz> [Coke]: what's the use case for making perl6.org more dynamic?

[12:03] <moritz> [Coke]: (re mojo app discussion yesterday)

[12:04] <moritz> [Coke]: my main concern is computing resources; feather2 is pretty small host (0.5GB RAM, one CPU)

[12:04] <moritz> it can handle a static page just fine, even when we get a few more visitors

[12:05] <moritz> if you somehow want to generate static pages from a mojo app, fine by me :-)

[12:05] *** lizmat left
[12:05] <moritz> but it should only be dynamically generated if we have a really good use case

[12:06] *** colomon joined
[12:07] *** colomon left
[12:07] <moritz> (or find some other way to address the question of resource usage)

[12:08] *** slavik left
[12:09] *** lizmat joined
[12:14] *** grondilu joined
[12:14] <grondilu> std: say enum Squ ("a" .. "h" X~ 1 .. 8); say +e4

[12:14] <camelia> std 0f2049c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤ 'e4' used at line 1␤Check failed␤FAILED 00:01 126m␤»

[12:15] * grondilu has hard time understanding how enums work :(

[12:17] *** Woodi left
[12:21] *** slavik joined
[12:25] *** cognome left
[12:26] *** cognome joined
[12:30] *** AndChat-188244 joined
[12:30] *** cognome left
[12:33] *** virtualsue joined
[12:33] *** cognominal left
[12:34] <vendethiel> m:  say enum Squ ("a" .. "h" X~ 1 .. 8); say +e4

[12:34] <camelia> rakudo-moar 356d57: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/1MStgu2NCC␤Undeclared routine:␤    e4 used at line 1␤␤»

[12:34] <vendethiel> m: enum Squ ("a" .. "h" X~ 1 .. 8); say Squ.perl;

[12:34] <camelia> rakudo-moar 356d57: OUTPUT«Squ␤»

[12:37] <vendethiel> m: my @a = ("a" .. "h" X~ 1 .. 8); enum Squ <<@a>>; say a4.perl; # grondilu :P

[12:37] <camelia> rakudo-moar 356d57: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/uI9bPEQPgN␤Undeclared routine:␤    a4 used at line 1␤␤»

[12:37] <vendethiel> m: my @a = ("a" .. "h" X~ 1 .. 8); enum Squ <<@a>>; say a1.perl; # for real tho :P

[12:37] <camelia> rakudo-moar 356d57: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/DAD8nCfvyX␤Undeclared routine:␤    a1 used at line 1␤␤»

[12:37] <vendethiel> well, that works for me :p

[12:42] <FROGGS> m: my @a = ("a" .. "h" X~ 1 .. 8); enum Squ <<@a>>; say ::('a1').perl

[12:42] <camelia> rakudo-moar 356d57: OUTPUT«Cannot modify an immutable Squ␤  in block  at /tmp/bseAjs8iMu:1␤␤»

[12:43] *** denis_boyun_ left
[12:47] *** cognominal joined
[12:49] *** lizmat left
[12:49] *** cognome joined
[12:49] *** AndChat-188244 left
[12:49] *** MilkmanDan left
[12:51] *** AndChat-188244 joined
[12:52] *** cognominal left
[12:52] *** MilkmanDan joined
[12:52] *** aoseki joined
[12:54] *** kuroseki joined
[12:54] *** akaseki left
[12:54] *** cognome left
[12:56] *** aoseki left
[13:00] *** kuroseki left
[13:01] *** chenryn left
[13:01] <grondilu> in Carlsen's game, isn't 15...Nxb4 possible?

[13:01] <grondilu> since if 16. axb4 Qxa1

[13:02] <grondilu> or even 15...Bxb4

[13:02] <dalek> rakudo/qast_restructure: e431829 | jnthn++ | src/Perl6/Actions.nqp:

[13:02] <dalek> rakudo/qast_restructure: Fix is_clearly_returnless for empty block case.

[13:02] <dalek> rakudo/qast_restructure: 

[13:02] <dalek> rakudo/qast_restructure: Not sure how this ever really worked out in the past; perhaps a

[13:02] <dalek> rakudo/qast_restructure: QAST tree mis-construction that's now impossible made it appear

[13:02] <dalek> rakudo/qast_restructure: to work.

[13:02] <dalek> rakudo/qast_restructure: review: https://github.com/rakudo/rakudo/commit/e431829c70

[13:03] <grondilu> oops, wrong channel

[13:03] <grondilu> sorry

[13:05] *** anaeem1 joined
[13:06] *** cognominal joined
[13:08] *** AndChat-188244 left
[13:10] *** chenryn joined
[13:10] *** mr-fooba_ left
[13:12] <flussence> yay, all my modules are green again on the smoketest page :D

[13:15] <flussence> .oO( guess it's time to make a few new red ones... )

[13:29] *** rurban joined
[13:45] *** pecastro left
[13:45] *** virtualsue left
[13:45] *** Alula_ left
[13:46] *** echoprinter joined
[13:46] *** Alula_ joined
[13:46] *** echoprinter left
[13:46] *** cognome joined
[13:47] *** anaeem1 left
[13:47] *** AndChat-188244 joined
[13:50] *** cognominal left
[13:51] *** cognome left
[13:54] *** pecastro joined
[13:56] *** Akagi201_ joined
[13:58] *** anaeem1_ joined
[13:58] *** Akagi201 left
[13:59] <dalek> nqp: 164856c | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/GlobalContext.java:

[13:59] <dalek> nqp: Ensure print/say ops on JVM write UTF-8.

[13:59] <dalek> nqp: 

[13:59] <dalek> nqp: Fixes issues with CORE.setting generation some folks have been seeing.

[13:59] <dalek> nqp: review: https://github.com/perl6/nqp/commit/164856c24f

[14:01] <dalek> nqp: 26f36ac | jnthn++ | / (5 files):

[14:01] <dalek> nqp: Add QAST::NodeList; replace direct QAST::Node use.

[14:01] <dalek> nqp: 

[14:01] <dalek> nqp: This is a prerequisite for moving children out of the QAST::Node base

[14:01] <dalek> nqp: class, which will enable us to save an array allocation and pointer on

[14:01] <dalek> nqp: many node types that don't need children.

[14:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/26f36ac864

[14:01] <dalek> nqp: bd41f62 | jnthn++ | / (22 files):

[14:01] <dalek> nqp: Refactor QAST node structure.

[14:01] <dalek> nqp: 

[14:01] <dalek> nqp: Now only nodes capable of holding children get a slot for them and an

[14:01] <dalek> nqp: array allocated, reducing memory. Also take the time to optimize the

[14:01] <dalek> nqp: new methods so we get away with a lot of the late-bound method calls.

[14:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bd41f62810

[14:01] <dalek> nqp: 2b21569 | jnthn++ | / (25 files):

[14:01] <dalek> nqp: Merge branch 'qast_restructure'

[14:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2b21569419

[14:02] <dalek> rakudo/qast_restructure: 6f42eca | jnthn++ | tools/build/NQP_REVISION:

[14:02] <dalek> rakudo/qast_restructure: Bump NQP_REVISION to for restructured QAST nodes.

[14:02] <dalek> rakudo/qast_restructure: review: https://github.com/rakudo/rakudo/commit/6f42eca951

[14:02] *** anaeem1_ left
[14:07] <dalek> rakudo/nom: 6d23540 | jnthn++ | src/Perl6/Actions.nqp:

[14:07] <dalek> rakudo/nom: Changes to match NQP qast_refactor branch.

[14:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6d23540d20

[14:07] <dalek> rakudo/nom: 54cde6b | jnthn++ | src/Perl6/Actions.nqp:

[14:07] <dalek> rakudo/nom: Merge branch 'qast_refactor' into nom

[14:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/54cde6bfd1

[14:12] *** [Sno] left
[14:26] *** rurban left
[14:28] *** MilkmanDan left
[14:28] *** MilkmanDan joined
[14:28] *** dmol left
[14:29] *** AndChat-188244 left
[14:34] *** avar left
[14:34] *** avar joined
[14:37] <nwc10> MoarVM, debugging build, ASAN:

[14:37] <nwc10> Stage parse      : 183.798

[14:37] <nwc10> Parrot, optimised:

[14:37] <nwc10> Stage parse      : 176.695

[14:38] <timotimo> that is crazy.

[14:38] <nwc10> optimize is faster on MoarVM, mast is 60% of the time of post, mbc less than 10% of the time of pir

[14:39] <jnthn> mast is still too slow

[14:40] <nwc10> I'm not going to argue with you if you say that

[14:42] *** ggoebel1111112 joined
[14:43] <nwc10> t/spec/S06-multi/type-based.rakudo.moar fails the 53rd and final test

[14:43] <jnthn> wtf

[14:43] <jnthn> That's the one I spent today fixing...

[14:43] <nwc10> did I do something stupid?

[14:44] <nwc10> works on parrot

[14:44] *** ggoebel1111111 left
[14:44] <nwc10> Cannot call 'rt107638'; none of these signatures match:

[14:44] <nwc10> :(int $a)

[14:44] <nwc10> :(Str $a where { ... })

[14:45] <nwc10> [etc]

[14:45] <jnthn> wtf, where the hell did that patch go

[14:46] <jnthn> argh

[14:46] <jnthn> I merged the wrong branch...

[14:46] <timotimo> d'oh :)

[14:46] <timotimo> but qast_refactor is also correct, right?

[14:47] <jnthn> uh

[14:47] <jnthn> It's a subset of the things, I think

[14:55] *** kivutar left
[14:56] *** pippo joined
[14:56] <pippo> o/ #perl6

[14:57] *** pmurias joined
[14:58] *** akaseki joined
[14:58] <dalek> nqp-js: 3e803c6 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[14:58] <dalek> nqp-js: Handle nqp::print.

[14:58] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/3e803c64d6

[14:58] <dalek> nqp-js: 471cdcb | (Pawel Murias)++ | / (5 files):

[14:58] <dalek> nqp-js: Basic support for generating source maps, added a --source-map option which generates a json structure that is then preprocessed by src/vm/js/bin/gen_sourcemap.js.

[14:58] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/471cdcba5f

[15:00] <pmurias> http://goo.gl/xze8e4 # source maps example

[15:00] *** colomon joined
[15:00] <vendethiel> pmurias++ #source maps baked in since day 1 ;-)

[15:01] <pmurias> it's day 2 of the rewrite

[15:01] <vendethiel> and not day one of the project. I just meant "while in inception phase"

[15:04] *** colomon left
[15:06] <dalek> rakudo/nom: 1f4cae6 | jnthn++ | src/Perl6/Actions.nqp:

[15:06] <dalek> rakudo/nom: A few changes needed by qast_restructure in NQP.

[15:06] <dalek> rakudo/nom: 

[15:06] <dalek> rakudo/nom: Only one known regressions remains, which is related to compile-time

[15:06] <dalek> rakudo/nom: inlining of multis.

[15:06] *** dalek left
[15:07] <jnthn> That should do the merge properly. :)

[15:07] *** dalek joined
[15:07] *** ChanServ sets mode: +v dalek

[15:07] *** Alina-malina left
[15:08] *** brrt joined
[15:08] <TimToady> dalek seems to have got indigestion there...

[15:09] <nwc10> it's written in Perl 5?

[15:09] *** lichtkind joined
[15:09] <vendethiel> yes

[15:13] <TimToady> n: say enum Squ ("a" .. "h" X~ 1 .. 8); say +e4

[15:13] <camelia> niecza v24-109-g48a8de3: OUTPUT«(Squ)␤35␤»

[15:14] <TimToady> someone should update rakudo to do that right

[15:14] <TimToady> sort of a mid-hanging fruit

[15:14] <jnthn> In theory it's not too hard. In practice, enums show up in CORE.setting...

[15:15] *** Alina-malina joined
[15:17] *** lasse joined
[15:17] *** lasse left
[15:17] *** rurban joined
[15:19] *** brrt left
[15:21] *** rurban left
[15:22] *** zakharyas joined
[15:28] *** ChoHag left
[15:34] <FROGGS> jnthn: when I adopt your qast-*ctor changes, is that the only thing I have to look at? https://github.com/rakudo/rakudo/commit/a33da53bdde5dfe2bdf5ffaa8f9e0f99678d6a03

[15:35] <jnthn> FROGGS: yeah

[15:35] <FROGGS> k

[15:35] <jnthn> It should not be too drastic

[15:36] <jnthn> This is the end of the QAST changes also; I think we've streamlined them about as well as we can in ways that'll be outside-visible.

[15:42] *** rurban joined
[15:43] <lichtkind> kudos to all this make and ast thingy did the whole parsing in one day, but i can imagine that some libs for ast ops would be needed

[15:44] <timotimo> lichtkind: what do you mean? can you give examples?

[15:45] <pmurias> jnthn: $*WANT in the various QAST::Compilers is just convenience to avoid passing :$want around?

[15:45] <jnthn> pmurias: Yeah

[15:45] <jnthn> pmurias: :want is only passed to top-level things

[15:46] *** pecastro left
[15:46] *** zakharyas left
[15:46] <lichtkind> timotimo: something like metaops on ast subnodes

[15:47] *** akaseki left
[15:47] *** chenryn left
[15:48] <timotimo> um ... the asts of your match objects can be anything. lists, hashes, code objects, ...

[15:48] <timotimo> you can already use totally regular metaops on them if you just "make" the right kind of object in your action methods

[15:49] *** itz left
[15:50] <lichtkind> timotimo: theoretically yes but practically its first hashes of the match struckture and  hm have to think more about

[15:51] *** itz joined
[15:52] *** pecastro joined
[15:54] *** nbrown____ joined
[15:54] <timotimo> i don't understand what you mean by that

[15:55] *** anaeem1_ joined
[15:59] <pmurias> jnthn: src/Perl6/Actions.nqp:448 has what appears to be a duplicated CTXSAVE (with comment indicated *both* that it is inherited from HLL::Actions and that it should be moved there)

[15:59] <lichtkind> the  subnode are keys of the local  $/ mut cant metaop on the since i need the subnode .ast of each of them

[15:59] <jnthn> pmurias: haha :)

[16:00] <jnthn> pmurias: Probably leftover historical accident.

[16:00] <lichtkind> i mean values of the $/ hash not keys

[16:00] *** nbrown____ left
[16:01] *** iarna joined
[16:02] *** pecastro left
[16:04] *** pecastro joined
[16:11] <dalek> nqp-js: 8b5718e | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[16:11] <dalek> nqp-js: Detect result of CTXSAVE.

[16:11] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/8b5718ef8a

[16:12] <dalek> nqp-js: 51b027a | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[16:12] <dalek> nqp-js: Fix indentation.

[16:12] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/51b027ad90

[16:12] <pmurias> jnthn: do we have a TODO for such things as removal of that?

[16:13] *** nbrown____ joined
[16:14] <jnthn> No; feel free to put it in RT though

[16:17] <timotimo> do i file a rakudobug or a zavolaj issue for the problem where multiple closures of the same code object will not be distinguished when registered as callbacks and called from C land?

[16:17] <FROGGS> nativecall I'd say

[16:17] <timotimo> a test for that would obviously have to go into the nativecall repo

[16:20] <jnthn> timotimo: Didn't we fix that in Moar already?

[16:20] *** pecastro left
[16:20] <timotimo> in moar, yes

[16:20] <timotimo> i haven't tested if it appears in jvm or parrot

[16:20] <timotimo> do you think these don't have that problem?

[16:20] <pmurias> jnthn: I took the liberty of quoting our irc discussion in the ticket

[16:21] <jnthn> timotimo: I'm not sure about JVM

[16:21] <jnthn> timotimo: Probably in parrot the issue exists

[16:23] *** pecastro joined
[16:24] *** dmol joined
[16:25] <FROGGS> v5 has now the qast-restructure too

[16:26] <FROGGS> currently I try to unbust quantifiers in regexes

[16:27] <pmurias> jnthn: HLL::Compiler.lineof only returns a line but the javascript source maps can also contain a column

[16:28] <timotimo> jnthn: somehow, this thought just popped into my head:

[16:29] <timotimo> at some point, someone pointed out how cool it was that we can just put a "proto sub" into the compiler and pass it into the compiled program to have it become part of it

[16:29] <timotimo> wouldn't that make the SC that's part of the compiler a dependency of the to-be-compiled program?

[16:30] <timotimo> i suppose grepping the moarvm bytecode dump of a file for wval calls would give me a map of which SCIDs from which SCs actually end up being referenced

[16:30] *** gfldex joined
[16:30] <timotimo> i wonder what i'd find

[16:31] <jnthn> timotimo: Yes, but that's not the only situation where such a dependency comes about.

[16:31] <timotimo> OK, so we likely have a whole bunch of dependencies anyway

[16:31] <timotimo> i suppose that's fair

[16:32] <jnthn> Derived grammars are another example

[16:33] <timotimo> ah

[16:33] <timotimo> good thing we derive from HLL::Grammar and not NQP::Grammar :)

[16:33] <FROGGS> yeah

[16:42] <jnthn> Well, I mean when people add cusotm operators

[16:47] *** pecastro left
[16:49] *** pecastro joined
[16:50] *** virtualsue joined
[16:52] *** Alula_ left
[16:54] *** Alula_ joined
[16:56] <timotimo> ah

[16:56] <timotimo> well, a dependency on the core setting is hardly preventable

[17:06] *** cognome joined
[17:12] <pmurias> jnthn: should I add a HLL::Compiler.columnof?

[17:12] *** pecastro left
[17:14] *** pecastro joined
[17:19] <dalek> rakudo-star-daily: 9e969df | coke++ | log/ (13 files):

[17:19] <dalek> rakudo-star-daily: today (automated commit)

[17:19] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/9e969df36c

[17:19] <dalek> perl6-roast-data: adf7668 | coke++ | / (3 files):

[17:19] <dalek> perl6-roast-data: today (automated commit)

[17:19] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/adf7668cca

[17:20] <[Coke]> moritz: the main concern is that it takes a very long time to generate the static site, making development painful.

[17:21] <[Coke]> It's too slow for me to work on as is.

[17:22] <jnthn> pmurias: If it'd be useful to you, but perhaps you want to add a line_and_column_of that returns an array [line, column] so make it cheaper...

[17:27] *** mr-foobar joined
[17:28] <mr-foobar> https://air.mozilla.org/language-composition/ perl6 is inevitable :)

[17:29] *** anaeem1_ left
[17:30] <grondilu> mr-foobar: is he mentioning Perl 6?

[17:31] <mr-foobar> it's about language composition. watching it :/ the idea of unification is there however

[17:33] *** guru joined
[17:34] *** guru is now known as Guest29453

[17:37] *** rindolf joined
[17:37] <rindolf> Hello Perl6ers.

[17:37] <rindolf> TimToady: meow.

[17:39] <pmurias> jnthn: line_and_column_of makes much more sense

[17:39] *** Guest29453 is now known as ajr_

[17:39] *** pecastro left
[17:39] <grondilu> the part about SDE is interesting.  Never heard about something like that.

[17:45] *** akaseki joined
[17:48] *** pecastro joined
[17:49] *** iarna left
[17:49] *** iarna joined
[17:51] <mr-foobar> grondilu: bah RPython + Inline:: 

[17:52] *** virtualsue left
[17:52] <mr-foobar> no static types. I would call it a toy

[17:53] <grondilu> by the way apart from v5 are there currently serious projects to create sublanguages in rakudo? 

[17:54] <grondilu> I mean, if there was a 'use python' that would have a big wow effect.

[17:55] <grondilu> (though I suppose that could be seen as treason from the rest of the perl community)

[17:56] <hoelzro> ahoy #perl6

[17:57] <pmurias> hi

[18:00] <hoelzro> o/ pmurias 

[18:00] <pmurias> grondilu: https://github.com/arnsholt/snake/commits/master

[18:00] <pmurias> * https://github.com/arnsholt/snake/

[18:00] <pmurias> grondilu: but it's not currently developed and it didn't progress much

[18:15] *** virtualsue joined
[18:20] <FROGGS> that's nqp though, no?

[18:21] <FROGGS> I hope that these attempts get ported to Perl 6 when I provide a Slang helper module...

[18:21] *** pippo left
[18:24] *** iarna left
[18:26] *** iarna joined
[18:27] <pmurias> FROGGS: yes, it's a very early attempt

[18:28] *** dwarring joined
[18:31] *** molaf_ joined
[18:32] *** rindolf left
[18:32] *** rindolf joined
[18:35] *** molaf left
[18:44] *** [particle] left
[18:46] *** iarna left
[18:55] *** kivutar joined
[18:55] *** virtualsue left
[18:56] *** iarna joined
[18:57] *** [particle] joined
[19:01] <pmurias> FROGGS: snake isn't developed at the moment, if someone wants to work on that I'm willing to help but I don't want to work on it by myself

[19:04] <FROGGS> well, I am just going to provide some helper that will make it easier to develop such a slang

[19:04] <FROGGS> since I am not really a Python fan I will probably not help much on that fron

[19:04] <FROGGS> t

[19:07] <pmurias> I haven't used Python myself for a long time

[19:07] <FROGGS> I can help setting up the basics, the the hard work - the details - are nothing for me

[19:09] * grondilu feels bad to have brought that up, since v5 is more important to work on first

[19:10] <FROGGS> grondilu: you don't have to feel bad, one reason to do v5 is to explore how slangs can work

[19:11] *** iarna left
[19:14] <moritz> [Coke]: even if you call mowyw --make ?

[19:14] <moritz> (then it only regenerates files that changed, though it doesn't track changes to include files)

[19:15] *** darutoko left
[19:18] <dalek> nqp-js: 9f5f803 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[19:18] <dalek> nqp-js: Handle not yet implemented things with a NYI method.

[19:18] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/9f5f803a63

[19:18] <dalek> nqp-js: 7de6168 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[19:18] <dalek> nqp-js: Move comment.

[19:18] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/7de6168093

[19:20] *** rindolf left
[19:23] *** iarna joined
[19:31] *** rindolf joined
[19:31] *** kaare_ left
[19:32] *** pecastro left
[19:44] *** pecastro joined
[19:50] <pmurias> jnthn: compile_var on both moar and jvm searches all the scopes and sometimes and when it doesn't find the var in any of them it takes the type from returns

[19:50] <pmurias> jnthn: when does such a situation happen?

[19:51] *** dmol1 joined
[19:51] <pmurias> jnthn: it has a comment "If we didn't find it anywhere, it musta been explicitly marked as lexical. Take the type from .returns and rewrite to a more dynamic lookup." but I don't understand what that means

[19:52] *** dmol left
[19:52] *** anaeem1 joined
[19:59] <jnthn> pmurias: "more dynamic lookup" in this case just means "by name"

[20:06] *** telex left
[20:07] <pmurias> jnthn: but why isn't the lexical declared anywhere?

[20:08] <jnthn> pmurias: Normally it is a post-declaration

[20:08] *** telex joined
[20:10] <pmurias> can we post declare lexicals?

[20:11] <pmurias> err, thing other the subs

[20:11] <pmurias> * things other then subs

[20:13] <jnthn> subs are the typical use case

[20:13] <jnthn> In Perl 6 at least

[20:16] *** rindolf left
[20:16] *** rindolf joined
[20:17] *** rindolf left
[20:18] *** rindolf joined
[20:22] *** colomon joined
[20:23] <moritz> m: sub f() { EVAL 'say $x' }; $x = 42; f()

[20:23] <camelia> rakudo-moar a33da5: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/_w8Ry3RVMJ␤Variable '$x' is not declared␤at /tmp/_w8Ry3RVMJ:1␤------> [32msub f() { EVAL 'say $x' }; $x[33m⏏[31m = 42; f()[0m␤    expecting any of:␤        postfix␤»

[20:23] <moritz> m: sub f() { EVAL 'say $x' }; my $x = 42; f()

[20:23] <camelia> rakudo-moar a33da5: OUTPUT«42␤»

[20:23] <moritz> could be considered "post-declared"

[20:25] <jnthn> Ah, yes

[20:30] *** virtualsue joined
[20:33] *** brrt joined
[20:34] *** dalek left
[20:35] *** dalek joined
[20:35] *** ChanServ sets mode: +v dalek

[20:42] *** brrt left
[20:44] *** ajr_ left
[20:46] <masak> only if you consider the string 'say $x' to be code :)

[20:48] <dalek> roast: e38ff49 | (David Warring [email@hidden.address] | integration/advent201 (3 files):

[20:48] <dalek> roast: jvm and parrot fudges for RT #122497

[20:48] <dalek> roast: review: https://github.com/perl6/roast/commit/e38ff4914e

[20:48] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=122497

[20:48] *** iarna left
[20:48] *** iarna joined
[20:57] *** anaeem1 left
[20:58] *** anaeem1__ joined
[21:00] *** iarna left
[21:00] *** iarna joined
[21:02] <lichtkind> goodnight

[21:02] *** lichtkind left
[21:04] *** rindolf left
[21:14] *** dmol1 left
[21:16] *** pmurias left
[21:34] *** grondilu left
[21:40] *** psch left
[21:45] *** woolfy joined
[21:48] *** lizmat joined
[21:57] *** rurban left
[22:02] <dalek> rakudo/nom: e167669 | jnthn++ | src/Perl6/Actions.nqp:

[22:02] <dalek> rakudo/nom: In UNIT, no need for wasteful clone operations.

[22:02] <dalek> rakudo/nom: 

[22:02] <dalek> rakudo/nom: There's only ever going to be one anyway, since it's in UNIT. Avoids

[22:02] <dalek> rakudo/nom: a little work at startup and saves us some allocations, memory, etc.

[22:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e167669a49

[22:06] *** BenGoldberg joined
[22:08] *** kivutar left
[22:10] *** Alina-malina left
[22:11] *** Alina-malina joined
[22:16] <timotimo> calling lines() on a file with a gigantic amount of lines ... that will keep all the lines we've gone through so far in memory, right?

[22:17] <colomon> yes

[22:17] <masak> why?

[22:17] <colomon> because that's how iterators work at the moment.

[22:17] <colomon> unless there have been drastic changes lately I don't know about.

[22:17] <masak> bummer :/

[22:18] <masak> that's not... the mental model I have of an iterator (independent of Perl 6).

[22:18] <jnthn> That...wasn't how they were designed to work...

[22:18] <timotimo> does subparse really not work with a :pos argument?

[22:18] *** woolfy left
[22:18] <masak> an iterator is supposed to be this lightweight cursor-y thing.

[22:18] * colomon admits he might be wrong, and would love to be surprised in a godo way.

[22:18] *** woolfy joined
[22:19] <colomon> …. actually, if you use shift on it it might work?

[22:19] <timotimo> well, lines() uses gather/take

[22:19] * colomon reckons someone is going to have to experiment

[22:19] <timotimo> we don't know we're allowed to, right?

[22:19] <timotimo> unless we get the escape analysis thing going in moarvm %)

[22:19] * colomon is leaving for an outdoor folk festival in about ten minutes.

[22:19] <lue> timotimo: IIRC subparse is still anchored to the start, the 'sub' part is that the whole text doesn't have to match to the grammar.

[22:19] <jnthn> It's mostly about whether the array/list ends up being bound somewhere...

[22:20] <jnthn> And so we would have a chance of referring to its values again.

[22:21] <masak> that's what feels weird to me. it definitely *shouldn't* happen in the lines() case.

[22:21] <jnthn> Indeed.

[22:22] <timotimo> oh, duh, of course

[22:22] <timotimo> lue: thank you.

[22:25] *** colomon left
[22:27] <timotimo> yeah, perl6-m at least keeps growing in memory use for lines()

[22:27] <jnthn> ugh

[22:28] <timotimo> do we do the same thing for range objects? (well, not if we get the range-for-optimization)

[22:32] <lue> timotimo: S05:4484

[22:32] <synopsebot> Link: http://perlcabal.org/syn/S05.html#line_4484

[22:33] <lue> also, "subparse is anchored to the start and end of the target string" is actually the description of parse()  :)

[22:35] *** spider-mario left
[22:35] <timotimo> er

[22:37] <lue> That part of S05 tells me that you can choose where subparse() starts parsing, it's just that the grammar itself has to match from wherever it's told to start.

[22:37] <timotimo> i should seriously put my head deeper into writing application-level perl6, rather than just core/guts %)

[22:37] *** woolfy left
[22:39] *** anaeem1__ left
[22:42] *** virtualsue left
[22:44] *** gfldex left
[22:46] *** huf left
[22:59] *** huf joined
[22:59] *** pecastro left
[22:59] *** avar left
[22:59] *** avar joined
[23:06] *** pecastro joined
[23:17] <masak> 'night, #perl6

[23:18] <timotimo> gnite masak 

[23:40] *** echoprinter joined
[23:45] *** Mouq joined
[23:47] *** rurban joined
[23:48] *** aoseki joined
[23:50] *** akaseki left
[23:50] *** beastd left
[23:53] *** kurahaupo left
