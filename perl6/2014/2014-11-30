[00:04] <raydiak> mvuets: thanks for jumping in and fixing things...glad to have you here :) 

[00:12] <tony-o> invalid status 297373760 in GC orchestrate

[00:28] *** cognominal joined
[00:32] *** gfldex left
[00:43] <jnthn> masak: In answer to "when a class A keeps calling into class B..." - feature envy.

[00:51] * mvuets sleep &

[00:52] *** mvuets left
[00:59] *** prime joined
[01:38] <timotimo> tony-o: can you build your moarvm with ASAN? and before that, maybe turn on MVM_DISABLE_JIT (set it to some non-empty value) or MVM_DISABLE_SPESH

[01:38] *** colomon left
[01:44] *** Util joined
[01:48] *** pmurias left
[01:50] *** bjz left
[01:50] *** bjz joined
[02:01] *** rurban joined
[02:08] * [Coke] notes we have a bunch of flappy tests commented out of t/spectest.data

[02:09] <[Coke]> test -files-, I mean.

[02:09] <jdv79> flabby or flappy?

[02:09] <[Coke]> we should probably re-enable those immediately after the release.

[02:10] <[Coke]> flappy == pass/fail "randomly"

[02:12] <dalek> rakudo/nom: 1385296 | coke++ | tools/update (2 files):

[02:12] <dalek> rakudo/nom: prefer -'s

[02:12] <dalek> rakudo/nom: 

[02:12] <dalek> rakudo/nom: (most of the other tools use -, not _)

[02:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/13852961c2

[02:12] <[Coke]> jnthn++, moar looks much better today.

[02:21] *** kurahaupo left
[02:36] <dalek> perl6-roast-data: d275310 | coke++ | / (4 files):

[02:36] <dalek> perl6-roast-data: today (automated commit)

[02:36] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/d27531053d

[02:45] *** JimmyZ joined
[02:45] *** JimmyZ is now known as Guest84347

[02:45] *** Guest84347 is now known as JimmyZ_

[03:12] *** perturbation left
[03:15] *** noganex_ joined
[03:18] *** noganex left
[03:26] *** skaufman joined
[03:29] *** PZt joined
[03:37] <tadzik> moritz: we should synchronize one day and set up this service properly

[04:03] *** mr-foobar left
[04:04] <ugexe> language: perl

[04:04] <ugexe> perl:

[04:04] <ugexe>     - '5.20'

[04:04] <ugexe> env:

[04:04] <ugexe>     - BACKEND=moar PANDA_SUBMIT_TESTREPORTS=yes

[04:05] <ugexe>     - BACKEND=jvm PANDA_SUBMIT_TESTREPORTS=yes

[04:05] <ugexe>     - BACKEND=parrot

[04:05] <ugexe> matrix:

[04:05] <ugexe>     allow_failures:

[04:05] <ugexe>         - env: BACKEND=jvm

[04:05] <ugexe>         - env: BACKEND=parrot

[04:05] <ugexe>     fast_finish: true

[04:05] <ugexe> before_install: - git config --global user.name "TravisCI" - git config --global user.email $HOSTNAME":not-for-mail@travis-ci.org" - git clone git://github.com/travis-perl/helpers ~/travis-perl-helpers - source ~/travis-perl-helpers/init # helpers for parallel testing/testing dirs - git clone https://github.com/tadzik/rakudobrew ~/.rakudobrew

[04:05] <ugexe> oops, sorry

[04:23] <TimToady> ugexe: if you're using irssi you can set paste_verify_line_count = 1 and it'll ask if you really mean it

[04:31] <ugexe> another notch on the ol irssi config

[04:36] *** j4janicej is now known as j4jackj

[04:37] *** JimmyZ_ left
[04:41] *** j4jackj is now known as j4janicej

[04:50] *** KCL_ joined
[05:01] *** rurban left
[05:10] *** BenGoldberg left
[05:13] *** kaare_ joined
[05:37] *** kurahaupo joined
[05:59] *** gfldex joined
[06:29] *** kurahaupo left
[06:30] *** kurahaupo joined
[06:30] *** kurahaupo left
[06:34] <moritz> tadzik: first step: put the code into a git repo, give me the URL

[06:36] *** kurahaupo joined
[07:07] *** Mso150_p_l_w joined
[07:07] *** Mso150_p_l left
[07:25] *** gfldex left
[07:46] *** JimmyZ_ joined
[08:18] *** darutoko joined
[08:30] *** Possum left
[08:42] *** mr-foobar joined
[08:43] *** Possum joined
[08:48] *** Possum left
[08:55] <dalek> nqp: 817019e | TimToady++ | src/QRegex/NFA.nqp:

[08:55] <dalek> nqp: delete SUBRULE edges after use

[08:55] <dalek> nqp: 

[08:55] <dalek> nqp: Added a better NFA dumper.  Using this, I discovered that the NFA

[08:55] <dalek> nqp: engine was spending 6-7% of its time just ignoring subrule edges.

[08:55] <dalek> nqp: These edges are not used after subrules are merged, so they can be

[08:55] <dalek> nqp: spliced out before the NFA engine ever sees them.

[08:55] <dalek> nqp: review: https://github.com/perl6/nqp/commit/817019ec84

[08:56] *** Possum joined
[08:59] <dalek> nqp: b1cecf6 | TimToady++ | tools/build/MOAR_REVISION:

[08:59] <dalek> nqp: bump moar

[08:59] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b1cecf647f

[09:00] <dalek> rakudo/nom: 25796d2 | TimToady++ | tools/build/NQP_REVISION:

[09:00] <dalek> rakudo/nom: bump nqp

[09:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/25796d2b71

[09:06] *** JimmyZ_ left
[09:08] *** molaf joined
[09:11] *** JimmyZ_ joined
[09:12] <JimmyZ_> TimToady: the above commit increases Stage parse      :  ~62s -> 63.711s here

[09:13] *** lizmat joined
[09:17] <TimToady> do you have anything running in the background?  ran faster here, once I stopped firefox...

[09:18] <JimmyZ_> TimToady: Nope, I exited all things

[09:19] <JimmyZ_> and ran it twice to confirm it

[09:20] <TimToady> interesting...

[09:20] <TimToady> maybe splice is slow on your machine for some reason...

[09:21] <JimmyZ_> Win32 on X86 without jit

[09:22] <JimmyZ_> let me try the old one again

[09:22] *** JimmyZ_ left
[09:22] *** woolfy joined
[09:25] *** rindolf joined
[09:31] *** mvuets joined
[09:32] *** JimmyZ_ joined
[09:34] *** JimmyZ_ left
[09:36] <TimToady> zzz &

[09:36] <lizmat> gnight TimToady 

[09:36] *** JimmyZ_ joined
[09:36] <lizmat> fwiw, I'm not seeing much difference in parse times

[09:37] <JimmyZ_> TimToady: sorry, it's not the above commit, but I can't ~62s now

[09:37] <JimmyZ_> *can't get back

[09:39] <TimToady> well, at best it would be about a 1% improvement, since the nfa is only about 10% of the parse time

[09:40] <TimToady> but there's still a bunch of improvements that can be made, lots of useless epsilons and such that can be eliminated

[09:40] <TimToady> zzz really &

[09:55] <JimmyZ_> good night

[09:56] <dalek> rakudo/newio: 1385296 | coke++ | tools/update (2 files):

[09:56] <dalek> rakudo/newio: prefer -'s

[09:56] <dalek> rakudo/newio: 

[09:56] <dalek> rakudo/newio: (most of the other tools use -, not _)

[09:56] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/13852961c2

[09:56] <dalek> rakudo/newio: 25796d2 | TimToady++ | tools/build/NQP_REVISION:

[09:56] <dalek> rakudo/newio: bump nqp

[09:56] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/25796d2b71

[09:56] <dalek> rakudo/newio: dd6fc0a | (Elizabeth Mattijsen)++ | tools/ (3 files):

[09:56] <dalek> rakudo/newio: Merge branch 'nom' into newio

[09:56] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/dd6fc0adb3

[09:56] <dalek> rakudo/newio: 0f4ec52 | (Elizabeth Mattijsen)++ | src/core/PIO.pm:

[09:56] <dalek> rakudo/newio: PIO.say should return True, not 1

[09:56] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/0f4ec52d99

[10:00] *** cibs left
[10:01] *** cibs joined
[10:03] *** Isp-sec joined
[10:04] *** jluis joined
[10:08] *** psch joined
[10:11] *** brrt joined
[10:11] *** cibs left
[10:12] *** jluis left
[10:15] *** anaeem1 joined
[10:18] *** cibs joined
[10:23] *** jluis joined
[10:25] *** anaeem1 left
[10:26] *** KCL joined
[10:29] *** KCL_ left
[10:34] *** jluis_ joined
[10:35] *** telex left
[10:35] *** jluis left
[10:36] *** telex joined
[10:39] *** jluis__ joined
[10:40] *** brrt left
[10:40] *** jluis_ left
[10:44] *** jluis__ left
[10:46] <masak> antenoon, #perl6

[10:47] <masak> jnthn: re "feature envy" -- I suspected so. but, so the "feature" here is the control flow itself?

[10:50] *** spider-mario joined
[10:52] *** smls joined
[10:53] <smls> o/

[10:54] <smls> Happy Advent Sunday, #perl6!

[10:56] *** jluis__ joined
[10:58] *** Mso150_p_l_w left
[11:00] <moritz> \o

[11:00] <moritz> so far we have only one sign-up for the advent calendar

[11:00] <moritz> that's too few

[11:00] <moritz> I can probably write a "State of Perl 6" for tomorrow

[11:01] <moritz> but we need more, otherwise it won't work

[11:01] <dalek> mu: 069bb68 | moritz++ | misc/perl6advent-2014/schedule:

[11:01] <dalek> mu: [perl6advent] claim day 1

[11:01] <dalek> mu: review: https://github.com/perl6/mu/commit/069bb68e72

[11:02] <mvuets> \o/

[11:03] <mvuets> a pleasant surprise - didn't realize it starts so soon

[11:03] <moritz> it only starts if people commit to contributing

[11:03] *** rurban joined
[11:04] <smls> .oO( idea for an advent calendar post: the special global-ish dynamic variables $*OUT, $*ERR, $*CWD, $*TMPDIR, $*HOME, $*SPEC, $*SCHEDULER etc. and how they can make things more flexible/clear/convenient than in Perl 5 )

[11:05] <moritz> smls: sign up and write about it!

[11:05] <smls> I'm not qualified enough

[11:05] <moritz> sure you are

[11:06] <moritz> just pick those (sub)topics that you know a bit

[11:06] <smls> I'll think about it

[11:07] <moritz> ++smls

[11:10] <timotimo> i wish gtk-simple wasn't broken >_<

[11:10] *** gfldex joined
[11:12] <smls> How come the gtk-simple repo is part of the official perl6 org on github? What's so special about it?

[11:14] * masak enjoyed http://www.slideshare.net/ScottWlaschin/fp-patterns-buildstufflt

[11:17] <timotimo> smls: it was part of a repository jnthn had made for one of his talks, i extracted it for him, but didn't think it'd be fitting to put it under timo/

[11:19] <moritz> smls: also people can put repos in the perl6 org if they want everyone[tm] to have write access

[11:20] *** denis_boyun_ joined
[11:22] <mvuets> what is the state of Test.pm?

[11:22] <mvuets> is there a reference implementation?

[11:22] <moritz> mvuets: there's a Test.pm shipped with rakudo

[11:23] <mvuets> it spits warnings

[11:23] <mvuets> wondering if worth fixing

[11:23] <moritz> mvuets: what kind of warnings?

[11:23] <mvuets> because: ## This is a temporary Test.pm to get us started until we get pugs's Test.pm / ## working. It's shamelessly stolen & adapted from MiniPerl6 in the pugs repo.

[11:24] <moritz> seems it has evolved into a full one by now, with the comment being out of date

[11:24] <mvuets> skip_rest emits this: use of uninitialized value of type Any in numeric context  in sub skip_rest at lib/Test.pm:192

[11:24] <mvuets> yeah, seems so. pugs' one does not even have subtest()

[11:24] <moritz> still something more structured (see Test::Builder in p5) wouldn't be bad

[11:24] <moritz> mvuets: yes, worth fixing

[11:25] <mvuets> so the testing api is defined in s24. does it mean Test implementation is up to language vendors?

[11:26] <moritz> mvuets: correct

[11:26] *** denis_boyun_ left
[11:26] <dalek> rakudo/nom: a9d4c84 | masak++ | lib/Test.pm:

[11:26] <dalek> rakudo/nom: [Test.pm] remove outdated comment

[11:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a9d4c84842

[11:26] <moritz> mvuets: though of course language implementors are free to still from other language implementors (as far as license allows it)

[11:26] <mvuets> hmm, do i understand it right that cannot be a Test distro on CPAN6 then?

[11:27] <dalek> rakudo/nom: 91d8995 | masak++ | lib/Test.pm:

[11:27] <dalek> rakudo/nom: [Test.pm] update copyright date

[11:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/91d8995815

[11:27] <moritz> mvuets: well, not right now, though we do plan to support loading modules by authority (not just name)

[11:27] <timotimo> maybe it'd be good enough to hotfix the GTK::Simple module so that i can guarantee it works for the advent calendar

[11:27] <timotimo> but what cool thing could i build with it? :S

[11:28] <mvuets> another question: perl6/roast.git seems missing subtest() tests - shall i try writing some?

[11:29] <moritz> mvuets: yes please

[11:29] <moritz> timotimo: do you know anything about the run time performance of r-j vs r-m?

[11:30] <mvuets> and how much we care for having smartlinks (those nifty things linking tests back to specs and hence embedding code examples in synopsis-es)?

[11:30] <moritz> mvuets: not very much, at the moment

[11:30] <timotimo> moritz: no :(

[11:30] <timotimo> i haven't touched r-j in a long time

[11:31] <mvuets> ok. because i found much with --check and TODO actually mentions it

[11:33] <masak> who's doing Dec 1 in the Advent calendar? :)

[11:33] <moritz> masak: me

[11:33] *** denis_boyun joined
[11:35] <masak> great

[11:35] <masak> ahh, but the schedule is far too empty for next week -- https://github.com/perl6/mu/blob/069bb68e72e8c04f54ecd917bb44cf097900285c/misc/perl6advent-2014/schedule

[11:36] <moritz> masak: agreed

[11:36] <masak> preferably we should have all of next week, and preferably coming weeks, planned out by the end of today...

[11:36] <moritz> masak: so, sign up :-)

[11:36] <masak> ok, I can volunteer for one or two slots for next week.

[11:36] <masak> just gotta figure out what to write about.

[11:38] <masak> "Perl 5/Perl 6 comparison" sounds like a topic I could do.

[11:39] <moritz> masak: also a summary of your current macro musings would be intersting

[11:40] <masak> yes, but that would work better towards the end of the month, as I expect to have mused quite a bit more by then.

[11:44] <tadzik> moritz: it's on https://github.com/perl6/ecosystem/tree/master/server

[11:44] <moritz> tadzik: ok, great

[11:44] <tadzik> I'll see how out of date it is, but probably not too much

[11:45] <tadzik> it says 2 years ago

[11:46] *** gfldex left
[11:48] <dalek> ecosystem: 82861f8 | tadzik++ | server/ (2 files):

[11:48] <dalek> ecosystem: Update the module server

[11:48] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/82861f8a07

[11:48] <tadzik> now it's up-to-date :)

[11:50] *** JimmyZ_ left
[11:51] <moritz> tadzik++

[11:51] *** JimmyZ_ joined
[11:53] <moritz> huh, perl6-m startup time is 330ms here

[11:54] <moritz> wasn't it down to 150ms or some months ago?

[11:54] <JimmyZ_> moritz: yeah, re-added the eager de serialization due  to some precomp bug

[11:55] <moritz> :(

[11:56] <jnthn> And introduced a different bug in the process, no?

[11:56] * jnthn doesn't know what to write about for advent

[11:57] <jnthn> Don't think I can find time for a post in the first week (too much work/distractions)

[11:57] <jnthn> But can do something after that.

[11:58] <moritz> jnthn: you could always do a summary of what you worked on, or an example from some of the talks you gave, or a braindump what you're working on

[11:58] <JimmyZ_> jnthn: yeah

[11:58] <jnthn> Is this the first advent we've had with Rakudo on Moar?

[11:58] <moritz> it would be awsome if we could get our GSoC students to write about their projects for the p6advent

[11:59] <moritz> jnthn: yes

[11:59] <jnthn> Hah!

[11:59] <moritz> jnthn: I just checked, last year's "state" post said nqp was bootstrapped on MoarVM, but rakudo wasn't running on it

[11:59] <jnthn> Then maybe I should write one about MoarVM :)

[11:59] <moritz> jnthn: you should :-)

[11:59] <jnthn> I know a little about it already, after all... :)

[12:02] <timotimo> we could have a post that we can point annoying naysayers to who say "oh, when's perl6 going to be rewritten from scratch the next time? next week and the week after that again?"

[12:03] <timotimo> as in "how do we know MoarVM is The One™"

[12:03] <moritz> https://gist.github.com/moritz/7df64717d8dd772a87a0 # preview of the first advent post, feedback welcome

[12:04] <moritz> afk

[12:04] <dalek> mu: 3095993 | masak++ | misc/perl6advent-2014/schedule:

[12:04] <dalek> mu: [adv2014/schedule] claim two slots

[12:04] <dalek> mu: review: https://github.com/perl6/mu/commit/30959932d4

[12:04] <masak> others: please claim advent slots for next week!

[12:05] * masak does Uncle Sam pointing-to-YOU pose

[12:05] *** rindolf left
[12:05] <timotimo> moritz: i wouldn't say moarvm is significantly faster at run time against the JVM. i think the jvm gets pretty good when it's heated up. especially for native stuff and tight code

[12:05] <masak> moritz: s/de-factor/de facto/

[12:06] <masak> moritz: s/supported as a backend/supported as backends/

[12:07] *** ab5tract joined
[12:07] <ab5tract> o/ #perl6

[12:07] <yoleaux> 24 Nov 2014 18:59Z <tony-o> ab5tract: fixed the HTML::Parser::XML module, it works as expected and it works with the advent sample ugexe provided

[12:07] <smls> moritz: "make the list-y types more transparent, list iteration faster, and more transparent when a list will flatten" -- maybe avoid repetition of 'transparent'

[12:07] <timotimo> would suggest not using "more transparent" twice

[12:07] <timotimo> %)

[12:08] <masak> maybe not repeat "transparent" in the sentence? :)

[12:08] * masak suggests less repetition

[12:08] <ab5tract> so i was reading about the shortfall of advent entries

[12:08] <ab5tract> in the logs

[12:10] <smls> moritz: s/will in some details/will fill in some details/

[12:10] <timotimo> ab5tract: would you like to contribute? :)

[12:10] <ab5tract> i have some stuff written about the difference between set coercers vs composers in relation to sets

[12:11] * ab5tract suggests to himself less repetition for himself

[12:12] <ab5tract> timotimo: indeed. my goal was to have an async scraper for the advent calendar with a ncurses interface

[12:13] <ab5tract> but i've been repeatedly stymied on that front. it boils down to weird things happening at the HTTP::UserAgent layer.. I could try replacing it with LWP::Simple

[12:13] <masak> ab5tract: please claim a slot in https://github.com/perl6/mu/blob/master/misc/perl6advent-2014/schedule

[12:14] <timotimo> ugh, ncurses

[12:16] <ab5tract> timotimo: :) ... but it's a well-known library that can highlight NativeCall while also potentially wow-ing folks if one were to put an async-y layer over the top

[12:16] <timotimo> mhm mhm

[12:16] <timotimo> don't forget ncurses is not reentrant :)

[12:18] <ab5tract> i doubt ncurses would ever let me forget it :)

[12:18] <ab5tract> masak: pull request sent

[12:18] <itz> lose the Oxford Comma :)

[12:18] <timotimo> that reminds me i wanted to build a nice high-level console UI library thingie

[12:18] <dalek> mu: a907f24 | ab5tract++ | misc/perl6advent-2014/schedule:

[12:18] <dalek> mu: Update schedule

[12:18] <dalek> mu: review: https://github.com/perl6/mu/commit/a907f245cb

[12:18] <dalek> mu: 0323a69 | 唐鳳++ | misc/perl6advent-2014/schedule:

[12:18] <dalek> mu: Merge pull request #5 from ab5tract/patch-1

[12:18] <dalek> mu: 

[12:18] <dalek> mu: Update schedule

[12:18] <dalek> mu: review: https://github.com/perl6/mu/commit/0323a690ac

[12:18] <timotimo> with all the features of ANSI5

[12:19] <ab5tract> timotimo: pure perl?

[12:19] <ab5tract> audreyt moves quickly :)

[12:20] <ab5tract> another thing i can discuss are the (potential) changes to the set comparison operators, of which my patch is sitting in limbo because i get distracted easily

[12:20] <timotimo> pure perl, aye

[12:22] <ab5tract> timotimo: that sounds like fun. hoelzro and i were discussing the repl environment, and "wouldn't it be nice to have an simple plugin interface"

[12:23] <timotimo> to be honest, "pure perl" tends to mean "moarvm with asynchronous IO and multithreading" these days :P

[12:24] <ab5tract> timotimo: i thought that was the whole point of perl 6 :P

[12:24] <ab5tract> ah, i see what you mean.. the moarvm bit

[12:24] <timotimo> that or JVM

[12:24] <timotimo> but as i said, i haven't touched that in a while

[12:25] * psch wonders if it makes sense to make perl6-bench use the evalserver

[12:25] <ab5tract> it feels a bit undernourished, that backend. but that's a surface level observation.. i've never seen a blog post about NativeCall on JVM, for instance. i thought it would be fun to write an interface to Processing, but didn't get much farther than imagining it

[12:28] <timotimo> psch: perl6-bench already subtracts start-up and compile times from benchmarks

[12:29] <psch> timotimo: okay.  but vm-warmup is a big-ish thing on jvm, isn't it?  i guess i'd have to look how perl6-bench does it's benching in the first place

[12:29] <JimmyZ_> http://jnthn.net/papers/2014-yapceu-performance.pdf  said while-empty was 4x slower than perl5, I think now they are the same :P

[12:30] <psch> i guess that's actually the point of good benchmarks, to have code that will be optimized well eventually

[12:33] *** denis_boyun left
[12:34] <psch> huh, ./bench fails with "Missing or wrong version of dependency 'src/gen/m-BOOTSTRAP.nqp'" but the same perl6 from my env works when called directly..?

[12:34] <JimmyZ_> make clean in rakudo ...

[12:35] <JimmyZ_> and then rebuild

[12:35] <psch> yeah, i've nuked install/ and ran git clean -xdf 

[12:36] <timotimo> psch: running a rakudo-j benchmark with all tests takes a LONG time.

[12:36] *** kjs_ joined
[12:37] <psch> timotimo: oh, i expect that - i don't really plan to run everything, i just want to have a hint re: mvm vs jvm on one or two tests

[12:38] *** smls left
[12:38] <timotimo> ah, so like --tests-tagged or --tests?

[12:39] <ab5tract> timotimo: if it takes so long, it surely should use the evalserver ?

[12:39] <psch> uh, probably?  i haven't looked too closely yet at how i have to use perl6-bench... :)

[12:40] <timotimo> the problem with the evalserver is that jit warmup is potentially shared

[12:40] <timotimo> which would make the calculations be off

[12:41] <ab5tract> ah

[12:41] <timotimo> it'd be impossible to remove it just by subtracting timings and startup timings etc

[12:42] <ab5tract> speaking of the spectest... is verbose output stored anywhere? 

[12:42] <psch> heh, maybe advocating the use of jakudo as a service is a good idea, then we can publish evalserver p6bench and claim that's real-world-use... :)

[12:42] <psch> s/service/daemon/

[12:43] <timotimo> you can run the "mumblemumble_summary" script to get verbose output

[12:45] <ab5tract> find . | grep mumble   # nothing

[12:49] <timotimo> yeah, "mumble" stands for "something i don't remember"

[12:49] <ab5tract> :P 

[12:50] <mvuets> haha

[12:50] *** haroldwu left
[12:51] *** haroldwu joined
[12:51] <ab5tract> what's the invocation for running a single test with harness? the quicker i can get the set comparator patch working, the sooner i can write a "how to start hacking on rakudo" advent post :)

[12:52] <timotimo> you can make t/spec/S123-blah/foobar.t

[12:54] *** colomon joined
[12:54] *** jluis__ left
[12:54] <ab5tract> timotimo: doh.. that makes sense. i was trying against the file which failed in spectest, which was moar specific. thanks

[12:55] *** kjs_ left
[12:56] *** denis_boyun_ joined
[12:57] *** gfldex joined
[12:58] *** spider-mario left
[13:01] <bartolin> ab5tract: you can use "perl t/harness --fudge --moar t/spec/S123-blah/foobar.t"

[13:02] <ab5tract> bartolin: for the fudge :)

[13:03] <bartolin> ab5tract: oh, that was not what you wanted. sorry for the noise ;-)

[13:04] <ab5tract> not at all! that probably should have been written as "thank you for the fudge" :)

[13:04] <bartolin> *g*

[13:06] <dalek> mu: c259106 | nige123++ | misc/perl6advent-2014/schedule:

[13:06] <dalek> mu: Update schedule

[13:06] <dalek> mu: review: https://github.com/perl6/mu/commit/c259106523

[13:06] <dalek> mu: c9594ac | moritz++ | misc/perl6advent-2014/schedule:

[13:06] <dalek> mu: Merge pull request #6 from nige123/patch-1

[13:06] <dalek> mu: 

[13:06] <dalek> mu: Update schedule

[13:06] <dalek> mu: review: https://github.com/perl6/mu/commit/c9594ace44

[13:06] <psch> re: advent calender: i guess struggling with understand code-gen for the jvm backend is not quite worthy of a post, but that's about what i can think of i could write about

[13:06] <moritz> ab5tract: please /msg me your email address so that I can invite you to the advent calendar

[13:06] <moritz> psch: I'd like to read that

[13:08] <psch> moritz: alright, i guess i have to pick a day then

[13:08] <psch> and take more extensive notes as well...

[13:10] <psch> i'm thinking an overview of "what does running perl6-j do and how did i get to understand it" is somewhat of a decent title/summary

[13:11] <psch> looking at topic-brainstorming that should probably come before NativeCall-jvm, if anyone writes about that

[13:13] *** noganex joined
[13:13] <psch> i'll try to pin down a date until this evening, got some other stuff to do about now o/

[13:13] *** spider-mario joined
[13:16] *** noganex_ left
[13:20] <dalek> mu: c3bb8dc | (Elizabeth Mattijsen)++ | misc/perl6advent-2014/schedule:

[13:20] <dalek> mu: Commit to doing an advent piece on 5 dec

[13:20] <dalek> mu: review: https://github.com/perl6/mu/commit/c3bb8dcd71

[13:25] <moritz> anybody else in need of a perl6advent.wordpress.com invite?

[13:28] <lizmat> having claimed 5 dec, please note that I'm not stuck to that date and could do it later  :-)

[13:29] <colomon> we don't have a day 1 on the schedule?

[13:29] <moritz> we have

[13:29] <moritz> or did I forget to push?

[13:30] <bartolin> colomon: you probably only looked at the diff?

[13:30] <colomon>  yes

[13:30] <colomon> bartolin++

[13:30] <moritz> that shows only 3 lines of context :-)

[13:31] <colomon> moritz++

[13:31] <moritz> colomon: gist link for a preview is in the backlog

[13:31] *** PZt left
[13:43] *** bjz left
[13:44] *** bjz_ joined
[13:53] *** denis_boyun_ left
[13:53] *** ggoebel111111114 joined
[13:57] *** dj_goku left
[13:59] <ab5tract> hmm.. i get a fair number of failed tests when running make spectest against nom. are there a specific set of steps that need to be taken when switching between branches on rakudo.git in order to have a "clean" run of the spec suite?

[13:59] <ab5tract> s/are there/is there/

[14:01] <ab5tract> i'm already rm'ing all .moar files in t/spec before running make spectest after switching branches. but should i be doing a distclean or something?

[14:02] <timotimo> what symptom are you seeing?

[14:04] <lizmat> ab5tract: are you on OS X ?

[14:04] <tony-o> timotimo: gonna rebuild moar with ASAN, the two envirovars didn't stop the errors

[14:04] <ab5tract> timotimo: https://gist.github.com/ab5tract/211fd789b8071fce9599

[14:04] <ab5tract> lizmat: yup

[14:04] <timotimo> tony-o: OK, thanks

[14:04] <lizmat> welcome to my world  :-(

[14:05] <ab5tract> :/

[14:05] <lizmat> spectests on OS X can only be described as "flaky" at the moment  :-(

[14:05] <tony-o> timotimo: should i just do --moar-options='ASAN=1' ?

[14:05] <ab5tract> ok..

[14:05] <timotimo> i think it has to be --moar-options=--asan

[14:05] <tony-o> ok

[14:05] <timotimo> [Coke]: if i write an article about GTK::Simple - maybe in combination with cairo - could you help me make sure everything works on OSX, too? IIRC you got it to work on your machine

[14:06] <tony-o> i have gtk working on my machine too ..

[14:06] <tony-o> (osx)

[14:06] <dalek> rakudo/newio: b0605fc | (Elizabeth Mattijsen)++ | src/core/IO (2 files):

[14:06] <dalek> rakudo/newio: Add missing .spurt methods

[14:06] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/b0605fc98a

[14:06] <dalek> rakudo/newio: 8b565a6 | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[14:06] <dalek> rakudo/newio: Streamline spurt functionality

[14:06] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/8b565a6456

[14:06] <dalek> rakudo/newio: db00491 | (Elizabeth Mattijsen)++ | src/core/IOU.pm:

[14:06] <dalek> rakudo/newio: Set that on successful open/mkdir/spurt

[14:06] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/db00491834

[14:06] <ab5tract> lizmat: so that begins to explain why they don't even necessarily appear consistent

[14:06] <lizmat> indeed...

[14:07] <ab5tract> makes chasing down the bugs pretty difficult .... :(

[14:07] <timotimo> tony-o: did you have to change anything, like the library name in "is native"?

[14:07] <ab5tract> but, at least my set comparator changes pass the set related tests :D

[14:07] <lizmat> it's some memory corruption that seems related to the way OS X does ASLR (http://en.wikipedia.org/wiki/Address_space_layout_randomization)

[14:07] <timotimo> or build gtk with brew or macports?

[14:07] <tony-o> timotimo: yea just leave off the .dylib or .so 

[14:08] <lizmat> that happens on moment X, but isn't showing up until Y (which is much later in process terms)

[14:08] <tony-o> iirc we checked it in debian and it worked that wre without the .whatever

[14:08] <ab5tract> lizmat: joy :( :(

[14:08] <[Coke]> timotimo: sure, I'll be your os x guinea pig.

[14:08] <timotimo> thank you

[14:08] <lizmat> whether this is a problem of OS X, or simply more prominently visible on OS X due to something like ASLR

[14:08] <lizmat> who knows

[14:08] <tony-o>  s/that wre/there/

[14:09] <lizmat> jnthn at least now has access to an OS X machine so he can look at it

[14:09] <timotimo> i know i can make GTK::Simple compile by removing the "use GTK::Gdk" line, maybe it'll also work to just put the GDK module's contents into the same file

[14:09] * [Coke] does not like this dizzy symptom. yikes.

[14:09] <tony-o> are you sick too [Coke] ?

[14:09] <ab5tract> lizmat: that is indeed good news

[14:10] <timotimo> jnthn already found a few things on os x and made them better

[14:10] <dalek> rakudo/newio: a9d4c84 | masak++ | lib/Test.pm:

[14:10] <dalek> rakudo/newio: [Test.pm] remove outdated comment

[14:10] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/a9d4c84842

[14:10] <dalek> rakudo/newio: 91d8995 | masak++ | lib/Test.pm:

[14:10] <dalek> rakudo/newio: [Test.pm] update copyright date

[14:10] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/91d8995815

[14:10] <dalek> rakudo/newio: 0bdd9f3 | (Elizabeth Mattijsen)++ | lib/Test.pm:

[14:10] <dalek> rakudo/newio: Merge branch 'nom' into newio

[14:10] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/0bdd9f3ddd

[14:10] * lizmat was pretty sick yesterday and this morning...

[14:10] <lizmat> some sleep here at the hackathon helped me a lot

[14:10] <lizmat> fortunately, the office here has a nice area for a quick nap

[14:10] <tony-o> i got sick yesterday on a bike ride still about 2 hours away from home

[14:11] <lizmat> (which wasn't so quick in my case)

[14:11] <lizmat> tony-o: that sucks...

[14:12] <tony-o> timotimo: i get those errors with --asan and both env vars set

[14:13] <tony-o> lizmat: being sick is always gross

[14:13] <ab5tract> it is also good news that i've been worrying about my set changes breaking things, when in fact its endemic

[14:14] <lizmat> as long as the test file runs ok by itself, you should be ok

[14:14] <lizmat> at least, that's what I've been going by

[14:19] <jnthn> Wow, so sickness... Hope y'all get well soon...

[14:20] <jnthn> Yes, the OSX failures are a darn nuisance. Things are far cleaner for me than they were after a couple of patches, but still not clean :/

[14:22] *** dj_goku joined
[14:26] *** dj_goku left
[14:27] *** dj_goku joined
[14:27] *** dj_goku left
[14:27] *** dj_goku joined
[14:31] *** guru joined
[14:31] *** anaeem1_ joined
[14:31] *** guru is now known as Guest20826

[14:31] *** Guest20826 is now known as ajr

[14:32] *** ajr is now known as ajr_

[14:38] <[Coke]> tony-o: vomit and dizziness, that's me. 

[14:40] <ab5tract> jnthn: i'm thinking that these may also explain some of the seemingly random failures i've been having when working on the Adventoratuer

[14:42] <ab5tract> which, in the context of memory, start to make more sense... 'Malformed UTF-8', 'Could not open file: {$impossible-location}', etc

[14:43] <JimmyZ_> that's different thing..

[14:43] <cosimo> mvuets: pong

[14:48] *** Vlavv left
[14:53] *** zakharyas joined
[14:54] <dalek> rakudo/newio: 8c062d1 | (Elizabeth Mattijsen)++ | src/core/IOU.pm:

[14:54] <dalek> rakudo/newio: Pass any extra .new parameter on through

[14:54] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/8c062d159c

[14:54] <dalek> rakudo/newio: c73c0b1 | (Elizabeth Mattijsen)++ | src/core/IO/Dir.pm:

[14:54] <dalek> rakudo/newio: A child of Dir is not necessarily a Dir

[14:54] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/c73c0b1235

[14:54] <dalek> rakudo/newio: 54d2711 | (Elizabeth Mattijsen)++ | src/core/CompUnit (3 files):

[14:54] <dalek> rakudo/newio: Initial IO::Path sanitation of CompUnit and friends

[14:54] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/54d271178f

[14:56] <dalek> rakudo/newio: d027745 | (Elizabeth Mattijsen)++ | src/core/CompUnit.pm:

[14:56] <dalek> rakudo/newio: Remove superfluous reference to $*SPEC

[14:56] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/d027745f8d

[14:57] *** Possum left
[14:59] <ab5tract> JimmyZ_: oh?

[15:00] *** Vlavv joined
[15:00] *** denis_boyun_ joined
[15:01] <lizmat> ab5tract: fwiw, what you describe, sounds familiar to me

[15:01] *** Possum joined
[15:03] *** kjs_ joined
[15:12] *** rindolf joined
[15:14] *** ptc_p6 joined
[15:17] *** anaeem1_ left
[15:18] *** isleofmax joined
[15:21] *** isleofmax left
[15:21] *** anaeem1_ joined
[15:25] *** smls joined
[15:26] <b2gills> m: sub example ( $ --> Int | Failure ){ ... } # Is there a way to get this to work?

[15:26] <camelia> rakudo-moar 91d899: OUTPUT«===SORRY!=== Error while compiling /tmp/kBW6J1HBRU␤Missing block␤at /tmp/kBW6J1HBRU:1␤------> sub example ( $ --> Int ⏏| Failure ){ ... } # Is there a way to g␤    expecting any of:␤        statement list␤…»

[15:27] <lizmat> m: sub a(--> Int) { fail "foo" }: my $a = a'

[15:27] <camelia> rakudo-moar 91d899: OUTPUT«===SORRY!=== Error while compiling /tmp/FTtSlZZom9␤Invocant colon not allowed here␤at /tmp/FTtSlZZom9:1␤------> sub a(--> Int) { fail "foo" }:⏏ my $a = a'␤»

[15:27] <lizmat> m: sub a(--> Int) { fail "foo" }; my $a = a'

[15:27] <camelia> rakudo-moar 91d899: OUTPUT«===SORRY!=== Error while compiling /tmp/D1b8x9o8yZ␤Two terms in a row␤at /tmp/D1b8x9o8yZ:1␤------> sub a(--> Int) { fail "foo" }; my $a = a⏏'␤    expecting any of:␤        argument list␤        postfix␤ …»

[15:28] <lizmat> m: sub a(--> Int) { fail "foo" }; my $a = a

[15:28] <camelia> rakudo-moar 91d899: OUTPUT«Type check failed for return value; expected 'Int' but got 'Failure'␤  in any return_error at src/vm/moar/Perl6/Ops.nqp:649␤  in sub a at /tmp/fjTCKn7wdu:1␤  in block <unit> at /tmp/fjTCKn7wdu:1␤␤»

[15:29] *** kjs_ left
[15:29] <lizmat> hmmm.. that feels like a bug, as I seem to recall a Failure should survive a type check like that...

[15:31] <jnthn> It's up for debate. It really hoses a good bit of compile time optimization if you can't actually trust your types.

[15:31] <jnthn> So I'm generally against such magic.

[15:31] <jnthn> The Nil discontinuity in assignment is already bad enough.

[15:32] <masak> (fewer exceptions in the type system)++

[15:32] <masak> sounds to me like Failure wants to be a bottom type, though.

[15:35] <b2gills> So the only course of action is to fail immediately in that case

[15:36] <b2gills> m: sub a(--> Int) { my $FATAL = True; fail "foo" }; my $a = a

[15:36] <camelia> rakudo-moar 91d899: OUTPUT«Type check failed for return value; expected 'Int' but got 'Failure'␤  in any return_error at src/vm/moar/Perl6/Ops.nqp:649␤  in sub a at /tmp/T1aTovFSDM:1␤  in block <unit> at /tmp/T1aTovFSDM:1␤␤»

[15:36] <b2gills> m: sub a(--> Int) { my $*FATAL = True; fail "foo" }; my $a = a

[15:36] <camelia> rakudo-moar 91d899: OUTPUT«foo␤  in sub a at /tmp/oVOsj4nTzY:1␤  in block <unit> at /tmp/oVOsj4nTzY:1␤␤»

[15:36] *** virtualsue joined
[15:42] *** vendethiel joined
[15:43] *** KCL left
[15:45] <vendethiel> o/, #perl6

[15:46] <dalek> rakudo/newio: d8fe25a | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo/Locally.pm:

[15:46] <dalek> rakudo/newio: Make sure we get a Str for a CompUnitRepo

[15:46] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/d8fe25a6ef

[15:46] <dalek> rakudo/newio: 31040e6 | (Elizabeth Mattijsen)++ | src/core/CompUnit.pm:

[15:46] <dalek> rakudo/newio: Handle path -> abspath migration

[15:46] <dalek> rakudo/newio: review: https://github.com/rakudo/rakudo/commit/31040e609a

[15:47] *** anaeem1_ left
[15:47] *** anaeem1 joined
[15:48] *** anaeem1 left
[15:48] <lizmat> Patch -p2 hackathon dwindling down...

[15:48] *** anaeem1_ joined
[15:51] *** kjs_ joined
[15:52] *** daxim left
[15:56] *** Possum left
[15:57] *** kjs_ left
[16:01] *** kurahaupo left
[16:02] *** Possum joined
[16:07] *** kshannon_ left
[16:07] *** Possum left
[16:08] *** kshannon joined
[16:10] <smls> moritz: Would "Data munging in Perl 6 vs Perl 5" be acceptable as a perl6advent topic?

[16:11] <smls> Rather than focus on any particular Perl 6 feature, I'd do one or two small case studies for contrieved-but-practical usecases that involve reading stuff from a file, putting it into a data structure, transforming said data structure, and printing output.

[16:11] <smls> I.e. the kind of quick-and-dirty scripting that sysadmins/powerusers/students/scientists etc. tend to use Perl 5 for in practice (as opposed to "professional programmers building full-fledged applications").

[16:11] *** JimmyZ_ left
[16:11] <smls> And hopefully show that Perl 6 can be a good replacement for Perl 5 in that area... :)

[16:12] <vendethiel> smls: I actually have bad slides for a talk like that :)

[16:12] <smls> I'd go through the Perl 5 and Perl 6 solutions for the case study side-by-side and step-by-step, noting not just superficial syntax differences, but how one would most idiomatically approach each step in each language.

[16:12] <vendethiel> (that's pretty much 99% of my P6 use at $work)

[16:13] <smls> vendethiel: Are the slide public? :)

[16:13] <smls> *s

[16:13] <vendethiel> smls: no, they're terrible :P

[16:13] *** Possum joined
[16:15] *** denis_boyun_ left
[16:16] <smls> I've already come up with a tiny case-study that allows me to show off «.lines» (as a lazy list!), «.map», a sigspace'd regex, a hash, «.grep», «.classify», «.comb», «.sort», and string interpolation.

[16:16] <lizmat> smls++

[16:16] <smls> (in 12 LOC, some of which are boring 'say' statements...)

[16:17] <smls> But I'd maybe like to have a second case-study for showing off hyper/meta ops and maybe Sets/Bags/Mixes etc.

[16:17] <lizmat> Patch -p shutting down&

[16:17] *** lizmat left
[16:19] <vendethiel> smls: https://gist.github.com/vendethiel/69bad550355ec5455ebd

[16:19] *** dwarring left
[16:19] <vendethiel> few examples if you want 'em

[16:20] <smls> vendethiel: Thanks

[16:25] *** woolfy left
[16:26] *** zakharyas left
[16:30] *** zakharyas joined
[16:35] *** spider-mario left
[16:38] *** raiph joined
[16:43] *** pecastro_ joined
[16:44] *** pecastro left
[16:46] <timotimo> .tell azawawi will you write a post on the advent calendar about farabi6?

[16:46] <yoleaux> timotimo: I'll pass your message to azawawi.

[16:49] <timotimo> a blog post about HTTP::Server::Async could be pretty neat, too

[16:56] *** Possum left
[17:00] <smls> Here's another idea for a perl6advent post I'd like to see: "Language Consistency & Correctness (a.k.a. Less Special Syntax & Magic)"

[17:00] <smls> But someone more knowledgeable than me should write that one... :)

[17:01] <smls> Although I did come up with some initial bullet points: https://gist.github.com/smls/116c4e55de020e17829a

[17:02] <smls> ^^ timotimo? moritz? lizmat? TimToady? :)

[17:02] <b2gills> masak: Perhaps `Failure` could be a Role. 

[17:04] *** KCL_ joined
[17:04] <smls> I know that topic of P6's goal of consistency/correctness (and by extension, extensibility) has been touched on multiple times already, but it would be nice to have a focused blog post written by an expert, that shows just how much that idea permeates P6's design...

[17:05] *** atta left
[17:05] *** atta_ joined
[17:15] *** kurahaupo joined
[17:15] *** kurahaupo left
[17:19] *** dwarring joined
[17:21] <moritz> smls: when I started to realize the reasons and implications around these factors, I wrote the 5-to-6 blog post series to try to explain them

[17:22] *** kurahaupo joined
[17:23] <moritz> smls: though I'm not sure I can summiarze it into a single blog post (espeically without feeling that I'm just rehashing what I wrote on my blog, and on perlmonks and mailing lists)

[17:27] <smls> I don't think rehashing is necessarily bad

[17:30] <smls> Lots of little bits information on a topic floating around various places on the net, don't have the same effect as a dedicated (and concise) blog post covering that topic specifically (and trying to explaining the underlying intentions and general patterns)

[17:34] <timotimo> smls: i like the idea and the bullet points you've found so far :)

[17:35] <smls> timotimo: Then adopt it :)

[17:35] <timotimo> moi?

[17:36] <timotimo> i'm hard at work thinking about potential topics as well

[17:37] <timotimo> what do the cool kids do with async http servers these days?

[17:37] *** zakharyas left
[17:37] <vendethiel> .oO( they scale )

[17:39] <timotimo> well, we don't. we just crash :P

[17:47] <tony-o> timotimo: what did the asan thing do?

[17:48] <tony-o> or what does it do?

[17:50] *** ptc_p6 left
[17:51] *** ptc_p6 joined
[17:52] *** FROGGS__ joined
[17:55] *** Sqirrel left
[17:55] *** Sqirrel joined
[17:56] <tony-o>  

[17:56] *** FROGGS_ left
[17:56] *** ptc_p6 left
[18:03] *** perltricks joined
[18:06] <tony-o> timotimo: also, jvm seems to work fine - i did 25k requests in 5m with wrk (10 threads)

[18:07] <dalek> snake: 11580c8 | (Arne Skjærholt)++ | src/Snake/ (2 files):

[18:07] <dalek> snake: Handle circumfix parens.

[18:07] <dalek> snake: review: https://github.com/arnsholt/snake/commit/11580c818c

[18:07] <dalek> snake: 5570b0b | (Arne Skjærholt)++ | src/Snake/Grammar.nqp:

[18:07] <dalek> snake: Update a TODO.

[18:07] <dalek> snake: review: https://github.com/arnsholt/snake/commit/5570b0b5c5

[18:10] *** ab5tract left
[18:12] *** xinming_ joined
[18:13] <moritz> p6advent post for tomorrow scheduled for publishing

[18:13] <tony-o> a little less than half of what i get from nginx .. 

[18:15] *** xinming left
[18:16] <vendethiel> niiiiice

[18:16] <vendethiel> I'm so excited :3

[18:17] <colomon> \o/

[18:18] <perltricks> ohhh cool. Is there still time to contribute an rticle?

[18:18] <vendethiel> sure :)

[18:19] <perltricks> vendethiel: who should I send it to?

[18:19] <vendethiel> perltricks: https://github.com/perl6/mu/blob/master/misc/perl6advent-2014/schedule

[18:20] <tony-o> ooh the moar server beats out the nginx example in a slightly unfair comparison

[18:20] <perltricks> vendethiel: thx :)

[18:21] <vendethiel> "slightly unfair" hahaha

[18:21] <tony-o> the nginx serves a static file while the moar version just writes out the socket

[18:21] <tony-o> it server 48k requests in 10 minutes tho

[18:21] <tony-o> with only 1 error

[18:22] <tony-o> sorry, 5 minutes ^^

[18:25] <jnthn> tony-o: Wow...

[18:25] <jnthn> So serve.

[18:25] <jnthn> tony-o++

[18:26] <smls> moritz: I just added a comment to your advent post gist (https://gist.github.com/moritz/7df64717d8dd772a87a0), is it too late?

[18:27] <tony-o> hmm still getting this tho: Unhandled exception in code scheduled on thread 4476928000

[18:27] <tony-o> Unhandled exception: When invoking is_bindable, Provided outer frame 0x7fb1b5158bf0 (MVMStaticFrame bind_one_param) does not match expected static frame type 0x7fb1b51589b0 (MVMStaticFrame )

[18:27] <tony-o> only happens in moar

[18:29] <jnthn> Yeah, I've run into that one in my photo app

[18:29] <jnthn> I need to hunt it down

[18:29] <jnthn> bboiab...

[18:29] <jnthn> *bbiab

[18:29] <tony-o> bbiab?

[18:30] <smls> "be back in a bit"

[18:30] <tony-o> ah

[18:30] <tony-o> jnthn: i've tracked mine down to here but i'm not sure what i could do differently to avoid the problem: https://github.com/tony-o/perl6-http-server-async/blob/master/lib/HTTP/Server/Async.pm6#L48

[18:35] *** silug left
[18:43] *** ajr_ left
[18:43] *** Mso150 joined
[18:44] *** rindolf left
[18:45] *** rindolf joined
[18:45] *** zakharyas joined
[18:46] <moritz> smls: not too late, but maybe a bit too much; IMHO that's a topic for another post

[18:47] <moritz> smls: a "Where is rakudo fast? Where is it slow?"-post would be very welcome

[18:47] *** silug joined
[18:51] <timotimo> smls: are you sure we're not much faster than moose - at least on moarvm?

[18:52] <timotimo> maybe something's not being rooted when we do something or other ...

[18:52] <timotimo> yeah, that's unhelpful

[19:01] *** spider-mario joined
[19:01] *** rindolf left
[19:01] *** Possum joined
[19:01] *** rindolf joined
[19:04] <smls> timotimo: Nah I'm not sure about any performance claims as I haven't done any benchmarks myself; it's just things I heard from jnthn's and lizmat's talks etc.

[19:07] *** zakharyas left
[19:08] <colomon> moritz: two more comments (much smaller, thankfully) since smls's.  ;)

[19:08] <timotimo> we don't really have benchmarks that directly contrast the performance of classes in p5 moose vs p6

[19:10] <smls> in any case, the start-up time of perl6 scripts tend to be similar to what I'm used to from perl+moose scripts, so at least in that area the comparison seems valid... :)

[19:11] *** rindolf left
[19:11] <smls> Of course, few things can compete with the 0.00 seconds that perl takes to parse, compile & start a medium-sized Perl 5 script that doesn't use any modules... :P

[19:13] <dalek> mu: 146dee4 | (David Farrell)++ | misc/perl6advent-2014/schedule:

[19:13] <dalek> mu: added new proposed advent article

[19:13] <dalek> mu: review: https://github.com/perl6/mu/commit/146dee43e5

[19:13] <dalek> mu: 574c5fe | colomon++ | misc/perl6advent-2014/schedule:

[19:13] <dalek> mu: Merge pull request #7 from sillymoose/master

[19:13] <dalek> mu: 

[19:13] <dalek> mu: added new proposed advent article

[19:13] <dalek> mu: review: https://github.com/perl6/mu/commit/574c5fe6f7

[19:19] <dalek> perl6-roast-data: ed98fd7 | coke++ | / (4 files):

[19:19] <dalek> perl6-roast-data: today (automated commit)

[19:19] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/ed98fd7685

[19:20] <perltricks> colomon: thx :)

[19:20] <colomon> perltricks++

[19:24] *** Mso150_s joined
[19:24] *** Mso150 left
[19:24] *** Alula left
[19:25] *** PZt joined
[19:25] * colomon just tried out parallel mandelbrot 4 times in a row, getting one success and three different failures.  :(

[19:26] *** Alula joined
[19:35] <moritz> perltricks: /msg me your email address to get an invitation to the p6advent blog

[19:40] <tony-o> jnthn: ping

[19:41] <mvuets> cosimo: hi! i had troubles with LWP::Simple tests yesterday. kind folks helped to overcome problems, and i tried to adjust the test that failed. just sent you a pr, could you please take a look and say if that makes sense

[19:42] *** romel joined
[19:43] *** perturbation joined
[19:50] *** anaeem1_ left
[19:51] *** anaeem1_ joined
[19:55] *** anaeem1_ left
[19:56] *** denis_boyun_ joined
[20:04] *** mvuets left
[20:07] *** telex left
[20:08] *** telex joined
[20:12] <[Coke]> .tell mvuets using .tell is more likely to get heard later.

[20:12] <yoleaux> [Coke]: I'll pass your message to mvuets.

[20:13] *** ab5tract joined
[20:15] *** kurahaupo left
[20:17] *** ab5tract left
[20:21] *** darutoko left
[20:27] *** FROGGS__ left
[20:33] *** guru joined
[20:33] *** guru is now known as Guest13254

[20:34] *** Guest13254 is now known as ajr_

[20:34] *** ajr_ left
[20:35] *** kurahaupo joined
[20:35] *** blackbolt joined
[20:39] *** FROGGS__ joined
[20:42] *** Mso150_s left
[20:43] *** Mso150_s joined
[20:43] <jnthn> tony-o: pong

[20:45] <btyler> nativecall question: for making bindings to APIs that heavily use structs to define options for a given function, is there any way around defining said structs in p6?

[20:45] <arnsholt> Nope

[20:45] <btyler> libgit2 does a lot of that, and many "foo_options" structs embed other structs, which also need defining...all the way down

[20:46] <arnsholt> Yeah, that sucks

[20:46] <arnsholt> Also, are the embedded structs pointers, or just embedded?

[20:46] <arnsholt> ('Cause we don't support embedded structs yet)

[20:47] *** vendethiel- joined
[20:47] <btyler> all the ones I've bumped into so far are pointers

[20:47] <arnsholt> Good

[20:47] <btyler> so I've been stubbing with OpaquePointer until suddenly something tries to read from the pointed-to struct and ...boom :)

[20:47] <arnsholt> But yeah, the struct defining sucks

[20:48] *** vendethiel left
[20:48] <btyler> I had fleeting thoughts of something to automate it, since it's a fairly mechanical process, but I suspect implementing something on that level of magic would take me a long, long time

[20:48] <btyler> and be quite fragile in any case

[20:49] <jnthn> Well, an 80% solution might still be a time-saver

[20:49] <arnsholt> Definitely

[20:50] <arnsholt> I think it should be reasonably doable with something like clangs parser hooks

[20:50] <jnthn> Something that spits out Perl 6 code with XXX comments in places it thonks you'd really better review

[20:50] <jnthn> *thinks

[20:50] <btyler> sounds fun -and- educational

[20:51] <arnsholt> I even have a name for a project like that, but not the tuits to implement it

[20:52] *** smls left
[20:53] <btyler> on the topic of nativecall, I defined helpers '&-in-c' and '*-in-c' that feel like they might belong at a lower level than my binding: https://github.com/kanatohodets/p6-git2/blob/master/lib/Git2.pm#L10

[20:54] *** raiph left
[20:55] <btyler> but I don't know if there's a way to do it that doesn't surprise people with messages about CArrays that they're not expecting

[20:55] <btyler> or needing to define native subs that take CArray[thing]

[20:55] <leedo_> this is a stupid question, but whats the difference between a prefix operator and plain sub in p6?

[20:56] <masak> leedo_: not a stupid question.

[20:57] <psch> m: (1, 2, 3).map(!) # boom

[20:57] <tony-o> jnthn: i've tracked mine down to here but i'm not sure what i could do differently to avoid the problem: https://github.com/tony-o/perl6-http-server-async/blob/master/lib/HTTP/Server/Async.pm6#L48

[20:57] <camelia> rakudo-moar 91d899: OUTPUT«===SORRY!=== Error while compiling /tmp/UrZmrQ5J5M␤Negation metaoperator not followed by valid infix␤at /tmp/UrZmrQ5J5M:1␤------> (1, 2, 3).map(!⏏) # boom␤»

[20:57] <masak> leedo_: hm, let's see. a prefix operator can be symbolic, like `+`

[20:57] <masak> leedo_: also, what psch said.

[20:57] <jnthn> Prefix operators can have different precedences also

[20:57] <psch> although i supposed ! is different than usual prefixes

[20:57] <psch> ? might have been a better example

[20:58] <masak> psch: `!` isn' that different.

[20:58] <jnthn> "foo 1, 2, 3" always means "foo(1, 2, 3)", but depending on precedence the foo might just bind to the 1

[20:58] <tony-o> jnthn: without that $*SCHEDULER.cue bit, i end up with no segfaults or thread errors on moar

[20:58] <leedo_> ok, that all makes sense :) just seemed unclear why &-in-c woudl be a prefix and not a sub

[20:59] <masak> leedo_: it's really a matter of taste and intended usage.

[20:59] <psch> masak: i was mostly going on the error message, it states "metaoperator" and we can do != but not ?=

[20:59] <btyler> (disclaimer about &-in-c: I'm learning p6 as I go, no best practices to be found in my code)

[21:00] <jnthn> tony-o: I'm not at all convinced your code is to blame.

[21:00] <moritz> btyler: they looko fine, but in the long run I'd really prefer a dedicated pointer type

[21:00] <moritz> *looks

[21:01] <btyler> moritz: that was my general feeling, seemed like something that belongs outside a given binding

[21:01] <jnthn> tony-o: It looks like some kind of race condition...somewhere. but I don't think it's in what you've written.

[21:03] *** Mso150_s left
[21:04] <tony-o> jnthn: yea i definitely have a race condition but i'd think that the connection close would just fail and move on

[21:05] *** Mso150_s joined
[21:05] <jnthn> tony-o: I mean, something internal to Rakudo has the race.

[21:05] <tony-o> jnthn: ah

[21:06] <jnthn> I've seen the same thing happen in a completely different code-base using the same primitives you are, but though doing a totally different set of things.

[21:07] <tony-o> think it's a problem with channels?

[21:08] <jnthn> I doubt it; I'm not using those. Just promises and supplies.

[21:08] <jnthn> The thing about wrong outer smells of a race in taking closure clones...

[21:10] *** kaare_ left
[21:23] *** PZt left
[21:32] <colomon> jnthn: for what it's worth, the parallel mandelbrot code, which is just very straightforward promises, I think, is not stable on moar or jvm.  though it's more stable-ish on jvm, it seems.

[21:32] <colomon> that's with rakudos from earlier this afternoon.

[21:36] *** pmurias joined
[21:36] <dalek> nqp-js: fe08dda | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[21:36] <dalek> nqp-js: Add a .log method for logging stuff to nqpjs.log when the env var NQPJS_LOG is set.

[21:36] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/fe08ddad1d

[21:36] <dalek> nqp-js: 224785c | (Pawel Murias)++ | / (12 files):

[21:36] <dalek> nqp-js: Add a mini-nqpmo (a proper nqpmo will be generated properly in future commits).

[21:36] <dalek> nqp-js: 

[21:36] <dalek> nqp-js: The following code works now:

[21:36] <dalek> nqp-js: my class NQPMu {

[21:36] <dalek> nqp-js: }

[21:36] <dalek> nqp-js: my class Foo {

[21:36] <dalek> nqp-js:     method foo() {

[21:36] <dalek> nqp-js:         say("hi");

[21:36] <dalek> nqp-js:     }

[21:36] <dalek> nqp-js: }

[21:36] <dalek> nqp-js: Foo.foo;

[21:36] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/224785ceeb

[21:38] <arnsholt> pmurias++ # nqpjs

[21:38] *** ohcamacj-2 joined
[21:42] *** [Tux] left
[21:48] *** ron1230 joined
[21:49] <ron1230> Have been to the department of energy (doe), nuclear regulatory commission (nrc), and national institute of health (nih) web sites and hate what I see.

[21:50] <ron1230> I am hungry, tired, have no clean clothing and wish you all would go to hell.  I called the Democratic Peoples Republic of Korea.

[21:51] * moritz hugs ron1230 

[21:52] <ron1230> Call to DPRK was this afternoon.  Am ronaldxs on github.  bye.

[21:54] <ron1230> moritz: do you want me to hug you back?  You are wasting my time.  You all look like assholes.

[21:54] <btyler> sounds like someone left a screen unlocked

[21:55] <moritz> ron1230: no; it merely sounds like you need a hug

[21:55] <ron1230> moritz: no you are lying

[21:55] <Timbus> lol

[21:56] *** spider-mario left
[21:57] <ron1230> You are accessories to murder and other crimes by the way and may be appropriate for people to come after you for that.

[21:57] <ron1230> Anyone have a sensible comment.

[21:57] <ron1230> ?

[21:57] <masak> ron1230: you look like you need several hugs.

[21:58] * masak hugs ron1230 

[21:58] * moritz hugs ron1230 again

[21:58] * TimToady hugs ron1230 

[21:58] <ron1230> masak: drop dead

[21:58] *** [Tux] joined
[21:58] <Timbus> no comment

[21:58] * masak hugs ron1230 

[21:58] <masak> ron1230: welcome to #perl6.

[22:01] <masak> ron1230: ooh, I see you contributed to November back in 2011.

[22:01] <masak> ron1230++

[22:01] *** ab5tract joined
[22:02] <ron1230> (doe) http://www.energy.gov/science-innovation/national-labs (nrc) http://www.nrc.gov/ (nih) http://www.nih.gov/health/NIHandSleeplessinAmerica/

[22:02] <ron1230> big trouble 

[22:02] <ron1230> bye

[22:03] <masak> bye, ron1230.

[22:03] *** ron1230 left
[22:03] * moritz points out that NIH is also Not Invented Here

[22:03] <masak> the "Not Invented Here" acronym always gives me cognitive dissonance.

[22:04] <masak> probably because it's a slogan used to *avoid* certain products.

[22:04] <jnthn> Would you like it better if you'd invented it? :P

[22:04] <moritz> masak: I experience NIH as a disguised lack of domain knowledge

[22:05] <masak> jnthn: if I had invented it, "NIH" would mean that a company or group *loved* things they didn't invent themselves!

[22:05] <moritz> I think "this library is total overkill for solving $X, I only need a tiny subset that I can implement quicker than the new dependency is worth"

[22:06] <moritz> and then I start implementing stuff

[22:06] *** ab5tract left
[22:06] <moritz> and realize why the library is a lot bigger than what I'm building: because the domain actually needs it

[22:07] <moritz> anyway, time to sleep

[22:07] <jnthn> 'night, moritz 

[22:08] <masak> sleep well, moritz++

[22:14] *** ab5tract joined
[22:18] *** ab5tract left
[22:20] *** ron1230 joined
[22:23] <ron1230> Hating to waste all of our time and trying to move on.  DOE seems to have changed a bit http://www.energy.gov/articles/national-lab-day-how-national-labs-keep-moving-america-forward-0 (look at all slides)  and http://www.energy.gov/articles/womeninstem-physicist-focuses-scientific-advancement

[22:24] *** Mso150_s left
[22:24] *** blackbolt left
[22:38] <psch> progress \o/

[22:39] <psch> i'm now installing a method that lists the number of candidates existing in the foreign class for the shortname

[22:39] <psch> now i just gotta figure out how to handle the dispatch logic instead of writing that method

[22:43] <psch> i guess that's where i can borrow a bit from IndyBootStrap.methcall_noa and IndyBootStrap.methcallResolve_noa, although variable arity is something i'm not yet sure how to handle

[22:45] <jnthn> psch: If just having the args as an array is helpful, I think there's an asVarArgsCollector or somehting in the MethodHandles combinator set

[22:53] <psch> jnthn: noted, i'll look at that.  i'm still unsure how arguments from p6land end up in jvm-land

[22:54] <psch> the IndyBootStrap.*resolve methods get an Object slurpy, which gets handed to ArgsExpectation.invokeByExpectation, but that's already after the arguments got gathered into the Object[] i gather

[22:54] *** molaf left
[22:54] <jnthn> psch: Yes, but it then updates the callsite with something more specialized for the follow-up invocatin.

[22:54] <jnthn> *invocation

[22:54] <jnthn> iirc

[22:55] <jnthn> A lot of the things in IndyBootstrap work like that.

[22:56] <psch> ooh, methcall_noa is mapped to QAST::Op(:op<callmethod>)

[22:57] <psch> that should maybe have been somewhat obvious

[22:59] <psch> well, i'll look closer tomorrow.  i also have quite a few notes i'll expand to an advent post, which might actually focus on "java multis now prettier" if i have enough tuits to finish the implementation and the post soonish

[23:00] <psch> with that, g'night o/

[23:00] *** psch left
[23:01] *** gfldex left
[23:04] *** Isp-sec left
[23:09] *** KCL_ left
[23:24] *** FROGGS__ left
[23:37] *** Ugator left
[23:46] *** araujo left
[23:53] *** rmgk_ joined
[23:53] *** rmgk left
[23:53] *** rmgk_ is now known as rmgk

[23:59] <ron1230> Hope all ate well at Thanksgiving and are in good health.  Good night.

[23:59] *** ron1230 left
