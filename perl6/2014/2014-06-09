[00:04] *** pippo left
[00:08] *** sivoais left
[00:15] *** cognominal left
[00:16] *** cognominal joined
[00:16] <sjn> r: [+]((11..*)[^14])

[00:16] <camelia> rakudo-{parrot,jvm,moar} 28d672: ( no output )

[00:16] <sjn> r: say [+]((11..*)[^14])

[00:16] <camelia> rakudo-{parrot,jvm,moar} 28d672: OUTPUT«245␤»

[00:17] <sjn> r: say [+] (11..*)[^14]

[00:17] <camelia> rakudo-{parrot,jvm,moar} 28d672: OUTPUT«245␤»

[00:17] <sjn> r: say [+](11..*)[^14]

[00:18] <TimToady> no :)

[00:18] <sjn> confusing, eh

[00:18] <camelia> rakudo-{parrot,jvm,moar} 28d672: OUTPUT«(timeout)»

[00:18] <TimToady> [+]() is just like foo()

[00:18] <sjn> it is? o_O

[00:19] <TimToady> reductions are exactly like list operators, including the rule that parens make it a function call

[00:19] <sjn> when would you want to call a reduction operator as a function?

[00:20] <TimToady> when you want to something else after as a postfix

[00:20] <timotimo> m: say [\+](1, 2, 3, 4, 5)[^2]

[00:20] <camelia> rakudo-moar 28d672: OUTPUT«1 3␤»

[00:20] <timotimo> m: say [\+] (1, 2, 3, 4, 5)[^2] # as opposed to this

[00:20] <camelia> rakudo-moar 28d672: OUTPUT«1 3␤»

[00:20] <TimToady> well, you lucked out :)

[00:20] <timotimo> ...  er

[00:21] * timotimo is quite tired, it seems

[00:21] <colomon> … er indeed

[00:22] <TimToady> you see the difference with the infinite list, what with [+] being somewhat more eager than [\+]

[00:23] <TimToady> m: my $pair = (<this is>, <a list>, <of four>, <sublists>) => "Or is it?"; say $pair.key;

[00:23] <camelia> rakudo-moar 28d672: OUTPUT«this is a list of four sublists␤»

[00:23] * sjn is new to [+] too :-\

[00:23] <TimToady> earlier, it was implied that these lists flatten in the key

[00:23] <TimToady> they don't

[00:23] <TimToady> m: my $pair = (<this is>, <a list>, <of four>, <sublists>) => "Or is it?"; say $pair.key.perl

[00:23] <camelia> rakudo-moar 28d672: OUTPUT«$(("this", "is"), ("a", "list"), ("of", "four"), "sublists")␤»

[00:23] <TimToady> see, the structure is still in the key

[00:23] <colomon> oh!  I missed the \

[00:24] <TimToady> m: say [\+] 1,2,3

[00:25] <camelia> rakudo-moar 28d672: OUTPUT«1 3 6␤»

[00:25] <TimToady> note that it returns the same # of values, hence the [^2] worked either way

[00:25] <TimToady> despite doing the operations in the opposite order

[00:26] <TimToady> why I said "lucked out" :)

[00:26] <colomon> right

[00:29] <sjn> thanks,

[00:30] * sjn also now understands why [+]((11..*)[^14]) worked

[00:32] * sjn thought he was overriding presedence

[00:34] <TimToady> well foo() is very high precedence :)

[00:37] <sjn> r: say [+].WHAT

[00:37] <camelia> rakudo-{parrot,jvm,moar} 28d672: OUTPUT«(Int)␤»

[00:37] <sjn> r: say &[+].WHAT

[00:37] <camelia> rakudo-{parrot,jvm,moar} 28d672: OUTPUT«(Sub+{<anon>}+{Precedence})␤»

[00:37] <TimToady> verb vs noun

[00:38] <TimToady> on top of which, &[+] isn't a reduction

[00:38] <timotimo> it's interesting that it's sometimes easier to verb than to noun in perl6

[00:38] <TimToady> both FP and OO are biased in favor of verbs over nouns, though differently

[00:39] <TimToady> foo bar $baz vs $bas.bar.foo

[00:39] <timotimo> i thought in OO you usually can't have a verb without a noun to accompany it? :)

[00:39] <TimToady> .really?

[00:39] <timotimo> well, in java.

[00:39] * timotimo remembers that article

[00:39] <TimToady> but you often want to call methods on something that is returned

[00:39] <TimToady> FP and OO just have different ways of cascading verbs

[00:40] <timotimo> ah, mhm

[00:41] <TimToady> m: say [+]

[00:41] <camelia> rakudo-moar 28d672: OUTPUT«0␤»

[00:41] <TimToady> m: say [*]

[00:41] <camelia> rakudo-moar 28d672: OUTPUT«1␤»

[00:41] <TimToady> that's the other thing going on here

[00:43] *** sivoais joined
[00:47] *** sivoais left
[00:49] *** hoverboard joined
[00:52] *** sivoais joined
[00:58] <BenGoldberg> m: say [**]

[00:58] <camelia> rakudo-moar 28d672: OUTPUT«1␤»

[00:58] <BenGoldberg> m: say [%]

[00:58] <camelia> rakudo-moar 28d672: OUTPUT«===SORRY!===␤No zero-arg meaning for infix:<%>␤»

[00:59] <BenGoldberg> m: say [!]

[00:59] <camelia> rakudo-moar 28d672: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/N41X2ZKN1f␤Negation metaoperator not followed by valid infix␤at /tmp/N41X2ZKN1f:1␤------> [32msay [![33m⏏[31m][0m␤    expecting any of:␤        argument list␤        prefix or term…»

[01:02] *** sivoais left
[01:02] *** sivoais joined
[01:06] *** rindolf joined
[01:08] *** btyler joined
[01:09] *** kurahaupo joined
[01:12] *** dayangkun joined
[01:19] *** bjz joined
[01:26] *** FROGGS_ joined
[01:28] *** Su-Shee_ joined
[01:30] *** FROGGS left
[01:32] *** Su-Shee left
[01:33] *** klapperl_ joined
[01:35] *** jack_rabbit joined
[01:37] *** klapperl left
[01:38] *** Pleiades` left
[01:43] *** Pleiades` joined
[01:49] *** SamuraiJack_ joined
[01:57] <rindolf> Hi all.

[01:57] <rindolf> TimToady: here?

[01:58] *** btyler left
[02:16] *** Timbus left
[02:17] *** SevenWolf left
[02:38] *** xragnar_ joined
[02:38] *** xragnar is now known as Guest53870

[02:38] *** Guest53870 left
[02:38] *** xragnar_ is now known as xragnar

[02:53] *** ssutch joined
[02:55] *** zengargoyle left
[02:57] *** BenGoldberg left
[03:02] *** BenGoldberg joined
[03:09] *** ssutch left
[03:10] *** ssutch joined
[03:14] *** kaare_ joined
[03:18] *** bjz left
[03:25] *** molaf joined
[03:26] *** hoverboard left
[03:31] *** Alina-malina left
[03:31] *** hoverboard joined
[03:32] *** Alina-malina joined
[03:37] *** Timbus joined
[03:38] *** btyler joined
[03:40] *** bjz joined
[03:48] *** BenGoldberg left
[03:56] *** jack_rabbit left
[04:11] *** jack_rabbit joined
[04:13] *** anaeem1_ joined
[04:27] *** hoverboard is now known as moistcherry

[04:45] *** moistcherry is now known as hoversword

[04:45] *** hoversword is now known as hovercraft

[04:59] *** rindolf left
[05:07] *** SamuraiJack_ left
[05:21] *** kurahaupo left
[05:21] *** telex left
[05:22] *** telex joined
[05:25] *** bjz left
[05:26] *** rgbkrk joined
[05:26] *** dayangkun left
[05:27] <rgbkrk> perl6: say 3;

[05:27] <camelia> rakudo-{parrot,jvm,moar} 28d672, niecza v24-109-g48a8de3: OUTPUT«3␤»

[05:27] <rgbkrk> nice

[05:30] *** btyler left
[05:30] *** woosley left
[05:31] *** woosley joined
[05:35] *** anaeem1_ left
[05:35] *** hovercraft is now known as hoverboard

[05:37] *** bjz joined
[05:41] *** anaeem1 joined
[05:43] *** thou left
[05:53] *** jack_rabbit left
[05:57] *** kaare__ joined
[06:00] *** kaare_ left
[06:00] *** SamuraiJack_ joined
[06:35] *** hoverboard left
[06:39] *** thou joined
[06:44] *** dayangkun joined
[06:44] *** kaleem joined
[06:44] *** thou left
[06:46] *** jsn_ joined
[06:50] <masak> morning, #perl6

[06:52] <cognominal> morning

[06:53] <sergot> morning \o

[06:54] <masak> m: say [max]

[06:54] <camelia> rakudo-moar 28d672: OUTPUT«-Inf␤»

[06:54] <masak> m: say [&&]

[06:54] <camelia> rakudo-moar 28d672: OUTPUT«True␤»

[06:54] *** darutoko joined
[06:59] <DrEeevil> http://outspeaking.com/words-of-technology/why-perl-didnt-win.html that's an interesting interpretation

[07:05] *** zakharyas joined
[07:19] *** jsn_ left
[07:38] <masak> "It's *possible* that one of the Perl 6 works-in-progress will reach a point of usability and gain stability and maturity as a useful product, with documentation, libraries, support, and uptake." -- that was the important one for me.

[07:38] *** dayangkun left
[07:39] <masak> first off, while there have been many parallel efforts during the years, right now basically all the focus is on Rakudo and its backends.

[07:39] <masak> I understand if for a relative outsider that still looks like several works-in-progress. it doesn't feel like that from the inside.

[07:39] <DrEeevil> hrm, it's not as bad as the python3 split, imo

[07:39] <masak> no? interesting.

[07:39] <DrEeevil> perl5 is not deprecated

[07:40] <DrEeevil> python upstream actively tries to get people to use py3, with the usual response of "lol" - who is going to port all the code for us?

[07:40] <masak> deprecation doesn't stop ~85% of the Python community from using Python 2.7

[07:40] <DrEeevil> well, circular - e.g. django, it now has theoretical py3 support, but practically that's still not production-ready

[07:40] <DrEeevil> so if I were starting any py project now, well, I still stick to py2

[07:41] <DrEeevil> thus all my effort goes into improving py2 libs. derp :D

[07:43] <masak> right.

[07:43] <DrEeevil> so the business case for py3 is, hmm, I spend a few hundred to a few thousand hours of effort on no visible progress, and get a performance penalty for that

[07:43] <DrEeevil> not something that interests me

[07:45] <nwc10> masak: is it a public holiday in Sweden today? Or is Austria divergently special?

[07:45] <nwc10> and where is TFM where I can R this?

[07:46] *** brrt joined
[07:47] <masak> nwc10: no, today seems to be a workday. though I know some people who have a day off.

[07:49] *** pecastro left
[07:50] *** Alina-malina left
[07:50] <masak> nwc10: as to TFM, https://en.wikipedia.org/wiki/Public_holidays_in_Sweden seems to cover it fairly well.

[07:51] *** dayangkun joined
[07:51] *** Alina-malina joined
[07:51] <masak> nwc10: that article even mentions "flag days", so it should suit you :P

[07:53] *** Alina-malina left
[07:54] *** Alina-malina joined
[07:55] *** FROGGS_ is now known as FROGGS

[07:59] *** obra left
[07:59] <nwc10> interesting. Articles on outspeaking.com don't have authors. They don't even have dates.

[07:59] *** obra_ joined
[07:59] <masak> how... convenient.

[08:00] *** jsn_ joined
[08:00] <FROGGS> m: "a" ~~ /. { my $s := nqp::findmethod(self, 'orig')(self); say nqp::isstr $s } /

[08:00] <camelia> rakudo-moar 28d672: OUTPUT«[31m===[0mSORRY![31m===[0m␤'self' used where no object is available␤at /tmp/tfNO4ZDT0C:1␤------> [32m"a" ~~ /. { my $s := nqp::findmethod([33m⏏[31mself, 'orig')(self); say nqp::isstr $s }[0m␤'self' used where no object is available␤at /…»

[08:01] <FROGGS> m: grammar G { method TOP { . { my $s := nqp::findmethod(self, 'orig')(self); say nqp::isstr $s } } }; G.parse("a")

[08:01] <camelia> rakudo-moar 28d672: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/zLkfHUnCrR␤Unsupported use of . to concatenate strings; in Perl 6 please use ~␤at /tmp/zLkfHUnCrR:1␤------> [32mgrammar G { method TOP { . [33m⏏[31m{ my $s := nqp::findmethod(self, 'orig'…»

[08:01] <FROGGS> m: grammar G { token TOP { . { my $s := nqp::findmethod(self, 'orig')(self); say nqp::isstr $s } } }; G.parse("a")

[08:01] <camelia> rakudo-moar 28d672: OUTPUT«0␤»

[08:01] <FROGGS> hmmmm

[08:01] *** baest left
[08:01] *** baest joined
[08:03] <FROGGS> ahh, I think I know!

[08:03] *** darutoko left
[08:04] *** ribasushi left
[08:05] <masak> FROGGS: 'method TOP'

[08:05] <FROGGS> yes yes

[08:05] <FROGGS> that was just a thinko

[08:06] <masak> oh, you fixed it later.

[08:06] <FROGGS> I have the problem that a native str is sneaked into the match objects of the token of a slang

[08:06] *** yakudzo left
[08:06] <masak> how sneaky.

[08:06] <FROGGS> yeah....

[08:06] *** yakudzo joined
[08:07] <FROGGS> I turn v5 into pure Perl 6 atm... and that is an issue right now

[08:07] *** darutoko joined
[08:10] *** ribasushi joined
[08:10] *** SamuraiJack_ left
[08:12] *** lue left
[08:12] *** pdurbin left
[08:12] *** lue joined
[08:17] <FROGGS> yay, it works :o)

[08:20] *** telex left
[08:21] *** telex joined
[08:22] *** avuserow left
[08:22] *** avuserow joined
[08:22] *** rjbs left
[08:22] *** rjbs joined
[08:25] *** apejens left
[08:25] *** spider-mario joined
[08:26] *** apejens joined
[08:28] *** thou joined
[08:30] <masak> xfix: https://github.com/perl6/specs/commit/5cad8110c936c392b8a4304781ef767e1a7d7b0c -- the title says one thing (returns Int), but the patch says another (returns Rat).

[08:31] *** FROGGS[mobile] left
[08:32] *** thou left
[08:34] *** FROGGS[mobile] joined
[08:35] *** ssutch left
[08:35] <dalek> specs: 740854e | masak++ | S03-operators.pod:

[08:35] <dalek> specs: actually mention that % does (Int, Int) -> Int

[08:35] <dalek> specs: review: https://github.com/perl6/specs/commit/740854ee4d

[08:35] *** ssutch joined
[08:40] *** ssutch left
[08:41] <moritz> does S03 contain a type matrix somewhere?

[08:41] <yoleaux> 8 Jun 2014 21:11Z <raiph> moritz: I'm trying to encourage a little cleanup of gh/perl6; please search for 'moritz' in https://questhub.io/realm/perl/quest/534571eabbd0bed24e00006d TIA

[08:41] *** dakkar joined
[08:44] *** rgbkrk left
[08:50] *** FROGGS[mobile]2 joined
[08:52] *** FROGGS[mobile] left
[08:53] <moritz> .tell raiph re perl6/p5-modules: you could contact the authors of the invidial modules, tell them to fork the repo (or extract subdirs) if they're still interested

[08:53] <yoleaux> moritz: I'll pass your message to raiph.

[08:54] *** dmol joined
[08:59] *** virtualsue joined
[09:06] *** Util left
[09:06] *** Util joined
[09:06] *** ssutch joined
[09:10] *** ssutch left
[09:17] *** Axord joined
[09:17] <moritz> .tell raiph i've updated rakudo.de a bit

[09:17] <yoleaux> moritz: I'll pass your message to raiph.

[09:19] *** pecastro joined
[09:22] *** ennio joined
[09:23] <ennio> Hi all

[09:23] *** synopsebot left
[09:24] <ennio> I have a noob question

[09:24] *** Timbus left
[09:24] <FROGGS> hi ennio 

[09:24] *** synopsebot joined
[09:25] <ennio> Is there any difference between declaring a string in code and reading a string from a file with slurp

[09:26] <FROGGS> ennio: the string in the code is in a constant table, because it will always be constant in your program

[09:26] <FROGGS> the string from the file is not in that table of course

[09:28] <ennio> I'm not able to read a markdown file and parse it with Text::Markdown 

[09:28] <ennio> But it works with simple embedded strings

[09:29] <FROGGS> so it seems that your are perhaps not reading the file in properly, or the file is misformatted

[09:29] <FROGGS> ennio: can you no-paste your code?

[09:30] <FROGGS> should look a bit like: say parse-markdown( "myfile".IO.slurp ).to_html

[09:30] <ennio> https://gist.github.com/scriplit/7c9e86d0a8361dc41aa9

[09:31] <sergot> ennio: I did this that way: https://github.com/sergot/filip.sergot.pl/blob/dee4c9cd235684e955e41053f20b1b735e531c55/gen.p6#L90

[09:33] <sergot> but I didn't use slurp

[09:33] <FROGGS> From embedded string:

[09:33] <FROGGS> <strong>bold</strong> and <em>italic</em>

[09:33] <FROGGS> From file:

[09:33] <FROGGS> <strong>bold</strong> and <em>italic</em>

[09:33] <FROGGS> ennio: it works on my box

[09:33] <FROGGS> ennio: do you get an error message?

[09:34] <ennio> No such method ast for invocant of type Any

[09:34] <masak> ennio: your gist certainly looks like it *should* work, both ways.

[09:35] <masak> ennio: if someone manages to reproduce your problem, we might be looking at a bug report here...

[09:35] <sergot> ennio: btw. Text::Markdown has only bold, italics and code working iirc

[09:35] <masak> yeah, I should get on that :)

[09:35] <masak> the target feature set is "enough so that I can run my blog on it"...

[09:36] <masak> oh, FROGGS++ managed a non-reproduce above. I missed that.

[09:36] <FROGGS> ennio: what is your perl6 --version?

[09:36] <ennio> 2014.05 on MoarVM

[09:37] *** [Sno]_ joined
[09:37] <FROGGS> hmmmm

[09:37] *** [Sno]_ left
[09:37] <masak> odd.

[09:37] <FROGGS> ennio: can you please also pass --ll-exception when running the script? and then no-paste the backtrace?

[09:38] <masak> yes, that'll likely help a lot.

[09:38] <sergot> ennio: work for me too

[09:38] <sergot> works

[09:38] <FROGGS> I mean, this can only mean that it failed to parse the document...

[09:39] *** ssutch joined
[09:39] *** jsn_ left
[09:41] <FROGGS> arglbargl... porting EXPR from nqp to P6 is not that easy... "This type does not support associative operations"

[09:42] *** [Sno] left
[09:43] <masak> lunch &

[09:44] *** ssutch left
[09:47] *** vendethiel joined
[09:48] <ennio> Ok, sorry my gist works actually - it breaks only if I add a newline at the end

[09:49] <ennio> ...of the md file

[09:49] <sergot> Oh, true, that's weird, same here.

[09:50] <FROGGS> that should be an easy fix to allow empty lines in the grammar at Markdown.pm at the bottom...

[09:51] <FROGGS> ennio: I guess masak would be happy to recieve a pull request :o)

[09:52] *** Psyche^ left
[09:52] *** Psyche^ joined
[09:54] <ennio> Hmmm need to learn how to write a perl6 grammar first :-)

[09:55] *** Timbus joined
[09:57] <FROGGS> ennio: it is just a classy form of a regex :o)

[10:12] *** pdurbin joined
[10:13] *** Axord left
[10:16] *** thou joined
[10:17] *** brrt left
[10:21] *** thou left
[10:22] *** Su-Shee_ is now known as Su-Shee

[10:27] *** dayangkun left
[10:33] <timotimo> good day

[10:33] <FROGGS> hi timotimo 

[10:34] <jnthn> .oO( is it? :P )

[10:36] <FROGGS> I think so :o)

[10:37] <FROGGS> well, except for the air conditioning of our server room at $work

[10:40] *** ssutch joined
[10:44] <timotimo> "classy form of regex", that's a good one

[10:44] <nwc10> FROGGS: is it supposed to be a public holiday in Germany?

[10:44] <nwc10> ie is your server room like the British weather - aware of the calendar

[10:44] *** ssutch left
[10:50] *** anaeem1 left
[10:50] *** anaeem1_ joined
[10:50] *** FROGGS left
[11:03] *** FROGGS joined
[11:07] <FROGGS> nwc10: yes

[11:08] *** brrt joined
[11:08] *** FROGGS[mobile]2 left
[11:18] *** darutoko left
[11:23] *** FROGGS left
[11:32] *** ennio left
[11:33] *** erkan joined
[11:33] *** skids left
[11:35] *** FROGGS joined
[11:37] <FROGGS> nwc10: err, that 'yes' was about the holiday... and no, that air conditioning is just crappy

[11:42] *** darutoko joined
[11:42] *** darutoko left
[11:43] *** darutoko joined
[11:43] *** darutoko left
[11:52] *** colomon left
[11:55] *** lichtkind joined
[11:57] *** anaeem1_ left
[11:58] *** SamuraiJack_ joined
[12:01] *** anaeem1 joined
[12:02] *** pochi joined
[12:04] *** thou joined
[12:09] *** thou left
[12:11] *** colomon joined
[12:24] <masak> newline at the end of file -- yes, happily accepting issues/pull requests for that.

[12:26] <sergot> masak: https://github.com/masak/markdown/pull/1

[12:27] <sergot> ennio++

[12:27] <masak> ooh

[12:29] *** ennio joined
[12:30] *** Vlavv left
[12:31] *** SamuraiJack__ joined
[12:32] *** anaeem1 left
[12:32] <masak> ennio: hm, https://github.com/scriplit/markdown/commit/9c5ff28934d32f2b71acae46fa2f12d0ac19a1d6 doesn't look quite right.

[12:32] <masak> ennio: should probably still be [\n\n+]

[12:33] <masak> ennio:  could you fix that and, um, pull request again or something?

[12:33] *** anaeem1 joined
[12:33] *** jnap joined
[12:33] *** SamuraiJack_ left
[12:34] <ennio> Ithe \n+

[12:35] *** brrt left
[12:35] <ennio> never will use irc fron my phone in the future :-)

[12:35] *** pdcawley left
[12:35] *** ivan`` left
[12:36] <ennio> I don't know why but the constraint \n+ is not applied

[12:36] <sergot> ennio: masak: it'll work with [\n\n+] \n*

[12:37] <ennio> Shouldn't it work without the \n* then?

[12:38] *** pdcawley joined
[12:39] <sergot> If we have no \n there it doesn't work with files containing empty lines, if we have \n+ there it deosn't work with just strings. 

[12:40] *** ivan`` joined
[12:41] <masak> to be precise: I was fine with the addition of \n* -- I don't see why the + inside the [\n\n+] was removed.

[12:41] <masak> that latter change seems unrelated to the PR, and so I don't want to accept it as it stands.

[12:42] <masak> (and if the tests still pass with that + gone, then we're missing a test -- pull requests welcome) :)

[12:42] *** zengargoyle joined
[12:43] *** Vlavv joined
[12:43] <ennio> Nee

[12:44] <ennio> Need to study a bit more to understand what this + does :-)

[12:44] *** colomon left
[12:47] <masak> <paragraph>* % [\n\n+] means "zero or more paragraphs, separated by two or more newline characters"

[12:47] <masak> your change makes that instead "...separated by exactly two newline characters"

[12:47] *** brrt joined
[12:49] <jnthn> I mighta written taht as [\n ** 2..*]

[12:50] <ennio> And more newlines are captured by \n* now

[12:50] <jnthn> Yes, but the \n* after it doesn't fall within the paragraph separator, no?

[12:51] <jnthn> If it's <paragraph>* % [\n\n+] \n*

[12:51] <masak> what jnthn said.

[12:51] <masak> ennio: you don't seem to understand the % construct yet.

[12:52] <masak> ennio: <paragraph>* % [\n\n+] is one unit, tied together by the %

[12:52] <masak> ennio: the thing that comes after the % in the [] is a separator

[12:52] <ennio> Ok 

[12:53] <masak> hope that helps -- if not, ask more questions :)

[12:53] *** anaeem1 left
[12:55] *** skids joined
[12:55] <sergot> m: grammar A { token TOP { ^ <a>* % [\|] $ }; token a { \w } }; say A.parse("q|w|e|r|t|y");

[12:55] <camelia> rakudo-moar 28d672: OUTPUT«｢q|w|e|r|t|y｣␤ a => ｢q｣␤ a => ｢w｣␤ a => ｢e｣␤ a => ｢r｣␤ a => ｢t｣␤ a => ｢y｣␤␤»

[12:56] <sergot> m: grammar A { token TOP { ^ <a>* % \| $ }; token a { \w } }; say A.parse("q|w|e|r|t|y");

[12:56] <camelia> rakudo-moar 28d672: OUTPUT«｢q|w|e|r|t|y｣␤ a => ｢q｣␤ a => ｢w｣␤ a => ｢e｣␤ a => ｢r｣␤ a => ｢t｣␤ a => ｢y｣␤␤»

[12:56] <sergot> m: grammar A { token TOP { ^ <a>* % '|' $ }; token a { \w } }; say A.parse("q|w|e|r|t|y");

[12:56] <camelia> rakudo-moar 28d672: OUTPUT«｢q|w|e|r|t|y｣␤ a => ｢q｣␤ a => ｢w｣␤ a => ｢e｣␤ a => ｢r｣␤ a => ｢t｣␤ a => ｢y｣␤␤»

[12:57] * [Coke] yawns.

[12:57] *** dayangkun joined
[13:00] *** xinming_ left
[13:01] *** ren1us joined
[13:01] *** guru joined
[13:01] *** xinming joined
[13:01] *** guru is now known as Guest73074

[13:01] *** Guest73074 is now known as ajr_

[13:03] *** vendethiel left
[13:05] *** colomon joined
[13:08] *** SamuraiJack__ left
[13:08] *** SamuraiJack__ joined
[13:11] *** SamuraiJack__ left
[13:12] <lichtkind> Segmentation fault

[13:12] <lichtkind> make: *** [gen/parrot/stage1/NQPP6QRegex.pbc] Fehler 139

[13:13] *** SamuraiJack joined
[13:14] *** vendethiel joined
[13:20] *** kaare__ left
[13:20] *** kurahaupo joined
[13:21] <masak> epic fehl.

[13:22] * nwc10 groans

[13:23] *** rurban joined
[13:24] *** kurahaupo left
[13:27] <PerlJam> nwc10: you're in 4th place for what I assume is the p5 code (merlyn wasn't too clear about which code base he was using)  Only about 60,000 more change lines and you'll be in 2nd!   :)

[13:31] *** atroxaper joined
[13:31] *** kurahaupo joined
[13:33] <nwc10> unclear too. ohloh puts me second by whatever metric they use: https://www.ohloh.net/p/perl/contributors/summary

[13:33] <nwc10> which might be number of commits. Not changes, not blame annotation

[13:35] *** enza joined
[13:35] *** ennio left
[13:35] <nwc10> typically, I think I've been making smaller commits than the mean commit size (but more of them)

[13:35] <nwc10> and also I've removed more lines of code that many people

[13:35] <colomon> removal++

[13:36] *** carlin joined
[13:36] <nwc10> although don't confuse "lines of files shipped in the tarball" with "lines of code" - davem removed a lot of Changes files, and I've removed a lot of auto-generated stuff

[13:36] <PerlJam> merlyn's metric using "git blame" won't give you credit for the lines that aren't there, but they are equally important (if not more important sometimes :)

[13:36] <nwc10> also, if I know what merlyn's metric is, I can game it, by systmatically removing or changing lines of code of the people "ahead"

[13:37] <jnthn> :D

[13:38] <moritz> assuming you actually care to game the metric :-)

[13:38] <nwc10> I'm more curious what the stats are for Rakudo, and how to dilute the scors of the current metrics: https://www.ohloh.net/p/rakudo/contributors/summary

[13:38] <nwc10> scores of the current "winners"

[13:38] <nwc10> ie, how to broaden the contributor base

[13:39] *** enza left
[13:39] <jnthn> lizmat++ is beating me in the last 12 months :)

[13:39] <nwc10> in particular, "Other" is slacking off. 17% all time, 15% last 12 months, and a mere 3% in the last month.

[13:40] *** carlin left
[13:40] <PerlJam> I think that Rakudo's code is easier to grok, so that barrier to entry is quite a bit lower than P5.  It seems the "big" problem for contributing is finding useful problems to work on  (or maybe finding problems to work on that aren't being quickly solved by the existing contributor base)

[13:40] *** carlin joined
[13:41] <nwc10> PerlJam: OK, so how could we make it easier to match such tasks to potential volunteers?

[13:42] <moritz> well, I had an approach

[13:42] <moritz> with weekly blog posts that invite people to solve very specific, approachable tasks

[13:42] <PerlJam> I dunno.  Maybe a big list of the known problems along with some hints as to what's need to solve them (knowledge of grammars, concurrent programming, etc.)

[13:42] <moritz> and it got us a few short-term and medium term contributors

[13:42] <PerlJam> moritz++ that's sounds awesome.

[13:43] <moritz> but I ran out of steam and ideas

[13:43] <moritz> http://perlgeek.de/blog-en/perl-6/contribute-now-announce.html # from 2010

[13:46] <PerlJam> IMHO, our biggest lack is documentation, tutorials, and whatever other "educational" materials we can generate to get people started *using* P6.

[13:47] <PerlJam> That's what I intend to do if I can ever find some time and get my head oriented right--write some stuff that helps people get started

[13:48] <FROGGS> ++PerlJam

[13:49] <vendethiel> oh, I'm in that newest list :o)

[13:50] <vendethiel> pmichaud, coke and jnthn are the oldest in there

[13:50] *** donaldh joined
[13:50] <vendethiel> (and probably the most profilic ones)

[13:51] <PerlJam> moritz: re, running out of ideas ...   Couldn't we troll the RT tickets for ideas?  Or does the problem then become the time it takes to specify the problem enough so that someone can solve it?

[13:52] <moritz> PerlJam: well, RT is full of stuff; sifting through it to find something that you are confident that is easy to fix is the problem. Plus writing up, yes

[13:53] *** thou joined
[13:55] <PerlJam> maybe at the next YAPC, instead of a hackathon, there should be a specifiathon where we troll RT and pull out problems for people to solve and specify them enough so that others can contrubute.

[13:56] <PerlJam> well ... by "we" I mean "you guys" because I won't be at YAPC this year :(

[13:56] <moritz> PerlJam: well, the real problem is that this preparation needs to happen *before* the specifiathon

[13:57] *** thou left
[13:58] <PerlJam> aye.  That makes sense.

[13:59] <moritz> we can start crowd-sourcing problems/tickets now, and then either use it for YAPC or blog-driven

[13:59] <PerlJam> The beauty of a whatever-athon is that its designated time.  You know going in what you're going to be doing, so you prepare to do it.  If you try to do the same thing "in your spare time", you never have enough spare time to make significant progress.  (OR maybe that's just my personal problem)

[14:00] *** kaleem left
[14:02] <vendethiel> doing stuff in your spare time requires A LOT of organization

[14:06] <[Coke]> (coke is the oldest where?)

[14:07] *** brrt left
[14:07] *** thou joined
[14:09] <vendethiel> [Coke]: (contributor. one of the)

[14:09] <PerlJam> Coke: ohloh says your first commit was "about 8 years ago"

[14:24] <zengargoyle> http://perl6.org/community/irc -> 'Much real-time discussion happens on our IRC channel, #perl6 or irc.freenode.net.' ~~ s/or/on/ :)

[14:25] <dalek> perl6.org: 625577f | moritz++ | source/community/irc.html:

[14:25] <dalek> perl6.org: Fix typo, zengargoyle++

[14:25] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/625577f044

[14:26] <FROGGS> m: say "a" ~~ / . { $<O> := "ohh" } { $<sym> := $<OPER> } /;

[14:26] <camelia> rakudo-moar 28d672: OUTPUT«｢a｣␤␤»

[14:26] <FROGGS> m: say "a" ~~ / . { $<O> := "ohh";    $<sym> := $<OPER> } /;

[14:26] <camelia> rakudo-moar 28d672: OUTPUT«===SORRY!===␤postcircumfix:<{ }> binding not defined for type Match␤»

[14:26] <FROGGS> jnthn: what kind of bug is that ---^?

[14:27] <zengargoyle> is there a good p6 hacking document like perldoc perlhack* in p5?  

[14:27] <PerlJam> zengargoyle: that's a good question.

[14:28] <zengargoyle> i.e. from git clone to email patch

[14:28] <moritz> you mean, from git clone to pull request? :-)

[14:28] <moritz> no end-to-doc, I'm afraid :(

[14:28] <jnthn> There's a "Submitting Patches" section in README

[14:29] <jnthn> But yeah, it's not end-to-end.

[14:29] <moritz> and docs/arechiture.{svg,html} inside the rakudo repo

[14:29] <PerlJam> zengargoyle: you can start a more comprehensive document if you like  :)

[14:29] <moritz> for a broad overview

[14:29] <jnthn> There is a whole bunch of material on learning how the internals work.

[14:29] <moritz> ah right, the excellent internals workshop

[14:29] <jnthn> https://github.com/edumentab/rakudo-and-nqp-internals-course

[14:29] <jnthn> http://edumentab.github.io/rakudo-and-nqp-internals-course/ # PDFs

[14:30] <moritz> jnthn++ a thousand times over for that

[14:31] <masak> dijkmat++ # for buying the course and allowing it to be open-sourced

[14:31] *** treehug88 joined
[14:32] <moritz> aye

[14:32] <moritz> lizmat++ woolfy++

[14:32] <[Coke]> jnthn++ lizmat++ woolfy++

[14:32] <woolfy> Huh?  :-)

[14:33] <woolfy> jnthn++  everybody++  yeah++

[14:33] <masak> woolfy++! :P

[14:33] <[Coke]> woolfy++ # double plus good.

[14:33] <PerlJam> woolfy++ lizmat++  (because you guys can never have enough karma :)

[14:33] <moritz> woolfy: denial is futile. You're being ++'ed, and you deserve it!

[14:33] <jnthn> Perhaps some day there will be another live running of the course. :)

[14:33] <masak> woolfy++ lizmat++ # indeed

[14:33] <PerlJam> s/guys/gals/  # oops :)

[14:33] <woolfy> (stop that incessant ringing!!!)

[14:33] <masak> woolfy++ # what ringing? I don't head anything.

[14:34] <masak> hear*

[14:34] <woolfy> masak

[14:34] <woolfy> What?

[14:34] <lizmat> :-)

[14:34] <jnthn> mushroom mushroom...

[14:34] <masak> heh. no sound here, just a small red number :)

[14:34] <woolfy> Hummm...

[14:35] * masak is very sensitive to disruptions, and generally turns off any audial cues first thing he does

[14:35] * moritz gets lots of test failures in m-spectest

[14:36] *** Khisanth left
[14:36] <[Coke]> moritz: I have no idea what you're talking about!

[14:37] <dalek> rakudo-star-daily: 7f18ec9 | coke++ | log/ (12 files):

[14:37] <dalek> rakudo-star-daily: today (automated commit)

[14:37] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/7f18ec9ef2

[14:37] <dalek> rakudo-star-daily: 7eee221 | coke++ | log/ (13 files):

[14:37] <dalek> rakudo-star-daily: today (automated commit)

[14:37] <moritz> [Coke]: neither have I, unfortunately

[14:37] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/7eee221d9e

[14:37] <dalek> rakudo-star-daily: a516f08 | coke++ | log/ (10 files):

[14:37] <dalek> rakudo-star-daily: today (automated commit)

[14:37] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/a516f08dcb

[14:37] <dalek> perl6-roast-data: 8875c21 | coke++ | / (6 files):

[14:37] <dalek> perl6-roast-data: today (automated commit)

[14:37] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/8875c21138

[14:37] <dalek> perl6-roast-data: 2780e63 | coke++ | / (6 files):

[14:37] <dalek> perl6-roast-data: today (automated commit)

[14:37] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/2780e63c2f

[14:37] *** rurban left
[14:37] <cognominal> Jus curious, if a program is careful not to use local state, should be it possible to use channels to remember and replay events to create a debbuger that movte in time like swift of elm?

[14:37] <cognominal> * swift or elm

[14:38] <[Coke]> moar's only failure in yesterday's daily run is:

[14:38] <[Coke]> S17-promise/allof.t 10 - got the right order

[14:38] <lizmat> [Coke]: and that's probably not reproducable

[14:39] <[Coke]> bad test!

[14:39] <[Coke]> :)

[14:39] <masak> :/

[14:40] <[Coke]> S05-mass/properties-general.rakudo.jvm aborted 580 test(s)

[14:40] <[Coke]> S05-mass/rx.rakudo.jvm aborted 473 test(s)

[14:40] *** kaare__ joined
[14:40] <[Coke]> (those are probably timeouts)

[14:40] <[Coke]> Shame the bus number on the eval server is < 1

[14:41] <donaldh> Coke: jvm consistently needs more permgen to pass tests for me. I will provide a PR to patch the eval runner

[14:41] <[Coke]> Hey, my show is over, and I might have something resembling rakudo time available…

[14:41] <[Coke]> donaldh: the eval runner is busted, and doesn't work for me.

[14:41] <[Coke]> always craps out about 2/3 of the way through the spec test. (I am using a runner in t/spec, not "make spectest")

[14:41] <[Coke]> would your fix fix that/

[14:41] <[Coke]> ?

[14:42] <donaldh> Yes. I think the eval runner just needs more heap and more permgen to make it through consistently.

[14:42] <donaldh> Just need to test it through some more.

[14:42] <[Coke]> let's just upgrade our java requirement to 8. :P

[14:42] <sergot> m: for 1..* -> $i { last if $i > 5 };

[14:42] <camelia> rakudo-moar 28d672: ( no output )

[14:43] <donaldh> well, yeah, it behaves better on 8

[14:43] <[Coke]> donaldh: any reason why there's no output diagnostics when we run out of permgen?

[14:43] <sergot> :x

[14:43] * hugme hugs sergot, good vi(m) user!

[14:43] <[Coke]> rakudo.parrot also still not clean.

[14:43] <sergot> ;)))

[14:43] <donaldh> When I ^C on OSX I sometimes get a permgen error on the console.

[14:44] <donaldh> (after it has crapped out)

[14:44] <[Coke]> ok. next rakudo thing for me: get a clean spec test run on all tiers. Then, when we get a failing test, go through the diffs in roast & rakudo & maybe nqp & parrot & moar, and start naming names.

[14:44] <[Coke]> s/tiers/backends/

[14:47] <jnthn> "oh no, jnthn, not again!" :P

[14:49] <[Coke]> I KNOW IT'S YOU, JNTHN!!!

[14:49] <[Coke]> seriously, I don't know who it is, but these supply tests are fiddly.

[14:50] <sergot> m: for 1..* -> $i { last if $i > 5; my $s = 'errmsg needed'; }; say $s;

[14:50] <[Coke]> ok, have to go get my work iphone diagnosed, and will return later. (diagnosis: it's a brick)

[14:50] <camelia> rakudo-moar 28d672: OUTPUT«2␤»

[14:50] <sergot> 2?

[14:50] <sergot> m: for 1..* -> $i { last if $i > 5; my $abc = 'errmsg needed'; }; say $abc;

[14:50] <camelia> rakudo-moar 28d672: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/EUZtbIAxFK␤Variable '$abc' is not declared␤at /tmp/EUZtbIAxFK:1␤------> [32m; my $abc = 'errmsg needed'; }; say $abc[33m⏏[31m;[0m␤    expecting any of:␤        postfix␤»

[14:50] <sergot> m: say $s;

[14:50] <camelia> rakudo-moar 28d672: OUTPUT«2␤»

[14:51] <[Coke]> O_o;

[14:51] <[Coke]> m: say $q;

[14:51] <camelia> rakudo-moar 28d672: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/3UPhWK5_ln␤Variable '$q' is not declared␤at /tmp/3UPhWK5_ln:1␤------> [32msay $q[33m⏏[31m;[0m␤    expecting any of:␤        postfix␤»

[14:52] <sergot> $ perl6 -e 'say $s;'

[14:52] <sergot> 2

[14:52] *** rgbkrk joined
[14:52] <jnthn> m: say s

[14:52] <camelia> rakudo-moar 28d672: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/EXNtQuuBu_␤Null regex not allowed␤at /tmp/EXNtQuuBu_:1␤------> [32msay s[33m⏏[31m<EOL>[0m␤    expecting any of:␤        argument list␤        prefix or term␤        prefix or met…»

[14:52] *** Khisanth joined
[14:52] <jnthn> m: say CORE::.keys.grep(/'$'/)

[14:52] <camelia> rakudo-moar 28d672: OUTPUT«$s $?TABSTOP $UINT64_UPPER $sprintfHandlerInitialized $default $NaN $Inf $_ $/ $! $=pod␤»

[14:53] <jnthn> So, who declared a my $s in the setting body? :P

[14:53] <sergot> :D

[14:54] *** rurban joined
[14:54] *** rgbkrk left
[14:55] *** rgbkrk joined
[14:57] <lizmat> src/core/JSON/Pretty.pm

[14:57] <lizmat> 94:my $s = 2;

[14:58] <lizmat> looks like it can be removed

[14:58] <jnthn> Pretty leaky... :P

[14:58] <FROGGS>  /o\

[14:58] <lizmat> sergot: will you remove it or shall I?

[14:58] <sergot> lizmat: I can do this.

[14:59] <PerlJam> m: say $sprintfHandlerInitialized;  sprintf("%d",42); say $sprintfHandlerInitialized;

[14:59] <camelia> rakudo-moar 28d672: OUTPUT«False␤True␤»

[14:59] <masak> so, FROGGS added the $s :)

[14:59] *** ajr_ left
[15:00] <FROGGS> masak: who said that? :P

[15:00] <PerlJam> jnthn:  in that course on rakudo/nqp internals, does it mention that you need to be real careful about declaring variables in the setting?  :)

[15:00] *** guru joined
[15:01] *** guru is now known as Guest23981

[15:01] <masak> ...unless you consider that the module originally comes from https://github.com/FROGGS/p6-JSON-Pretty/ -- in which case FROGGS added the $s :P

[15:01] *** Guest23981 is now known as ajr_

[15:01] <FROGGS> hmpf

[15:01] *** bjz left
[15:02] <sergot> lizmat: have to go, I'll do this later :)

[15:02] <lizmat> ok

[15:05] <jnthn> PerlJam: No :P

[15:05] <Ulti> is there a matrix somewhere for the features Perlito6 supports?

[15:06] *** rurban left
[15:13] *** cognominal left
[15:14] *** cognominal joined
[15:15] <FROGGS> jnthn: <O('%additive')> is supposed to set $<O> since it returns a passing cursor, right?

[15:16] <jnthn> Yeah...soemthing like that

[15:16] <jnthn> I think there may be something a bit funky going on with the match object within it there...forget exactly.

[15:16] <FROGGS> it puts a hash into the $!match

[15:16] <jnthn> ah, yeah...

[15:17] <FROGGS> my problem is that <O> is an empty match :/

[15:17] <jnthn> That's an...interesting trick. :)

[15:21] <jnthn> Have you compared NQPCursor.MATCH vs Cursor.MATCH?

[15:21] <FROGGS> right now

[15:22] <FROGGS> NQPCursor.MATCH also returns $!match when it is a list

[15:22] <FROGGS> so, I should be able to work around that...

[15:23] <jnthn> list? or hash?

[15:24] <FROGGS> hash

[15:24] <FROGGS> sorry :o)

[15:27] *** perlygatekeeper joined
[15:28] <jnthn> walk, shopping...bbl &

[15:29] *** zakharyas left
[15:32] *** SamuraiJack left
[15:37] *** raiph joined
[15:38] *** perlygatekeeper left
[15:39] *** carlin left
[15:40] *** carlin joined
[15:40] *** rgbkrk_ joined
[15:44] *** pecastro left
[15:44] *** rgbkrk left
[15:46] *** rindolf joined
[15:46] *** rgbkrk joined
[15:49] *** rgbkrk_ left
[15:56] *** darutoko joined
[15:58] *** ren1us left
[15:59] *** Timbus left
[15:59] *** ajr_ left
[16:01] *** kaleem joined
[16:07] *** Rotwang joined
[16:08] *** ajr joined
[16:09] *** ajr is now known as Guest47822

[16:09] *** Guest47822 is now known as ajr_

[16:20] *** molaf_ joined
[16:23] *** molaf left
[16:24] *** FROGGS left
[16:25] *** kurahaupo left
[16:30] *** atroxaper left
[16:33] *** treehug8_ joined
[16:35] *** treehug88 left
[16:40] *** FROGGS joined
[16:42] *** virtualsue left
[16:48] <[Coke]> I am kind of surprised to find S20 empty

[16:48] <[Coke]> don't we have a good story on that?

[16:51] <donaldh> Coke: https://github.com/rakudo/rakudo/pull/276

[16:53] <donaldh> Coke: This increases the permgen for the eval server. It works for me on OSX. I plan to run the tests with tweaked values to see if there is an optimal setting.

[16:53] <dalek> rakudo/nom: c75e408 | (Donald Hunter)++ | tools/build/ (2 files):

[16:53] <dalek> rakudo/nom: Give the eval server more heap and permgen.

[16:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c75e408b95

[16:53] <dalek> rakudo/nom: dba10ee | moritz++ | tools/build/ (2 files):

[16:53] <dalek> rakudo/nom: Merge pull request #276 from donaldh/eval_server

[16:53] <dalek> rakudo/nom: 

[16:53] <dalek> rakudo/nom: Give the eval server more heap and permgen.

[16:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dba10ee20d

[16:53] <moritz> ... and fixes a missing dependency. donaldh++

[16:54] <donaldh> yep, that too :)

[16:54] <donaldh> bbl

[16:54] *** donaldh left
[16:55] *** ajr_ left
[16:55] <[Coke]> ok, I'll give that a shot with the test_summary version as soon as today's normal run completes. donaldh++

[16:57] *** kaleem left
[16:57] *** dakkar left
[17:00] <timotimo> any suggestions for this week's weekly?

[17:01] <FROGGS> timotimo: one can switch to a slang now like in this example: https://gist.github.com/FROGGS/2da7263ffe79d2a6465c#file-slang_example-pm6

[17:02] <timotimo> that patch at the top is in rakudo by now?

[17:10] <TimToady> a couple things went into STD that would probably be easy to port to rakudo

[17:10] <TimToady> std: my $;

[17:10] <camelia> std 0f2049c: OUTPUT«ok 00:01 122m␤»

[17:10] <masak> ooh

[17:10] <TimToady> std: / <[ "abc" ]> /

[17:10] <timotimo> FROGGS: FROGGS can a pure-perl6 slang now do lots of stuff or are there still plenty of landmines?

[17:10] <camelia> std 0f2049c: OUTPUT«Potential difficulties:␤  Repeated character (") unexpectedly found in character class at /tmp/4_3k6ggNYX line 1:␤------> [32m/ <[ "abc" ][33m⏏[31m> /[0m␤ok 00:01 123m␤»

[17:11] <masak> TimToady++

[17:11] * TimToady is much more excited about the slangs though :)

[17:12] <FROGGS> timotimo: ahh wait, the needed patch is not yet in! (doh!)

[17:12] <timotimo> quickly! ;)

[17:12] <FROGGS> timotimo: I don't know about landmines... I just see that v5 needs way more love before it will be in a good shape again :o)

[17:12] <timotimo> mhm

[17:15] *** hoverboard joined
[17:17] <lichtkind> rakudo crshes while compiling on recent mint

[17:17] <lichtkind> any confirmation?

[17:18] *** muraiki joined
[17:19] <dalek> rakudo/nom: 186f0e4 | (Tobias Leich)++ | src/Perl6/World.nqp:

[17:19] <dalek> rakudo/nom: fix precomp bug about colonpairs in 'use' statement

[17:19] <dalek> rakudo/nom: 

[17:19] <dalek> rakudo/nom: When we pass a colonpair to a use statement it can land in the compiled

[17:19] <dalek> rakudo/nom: compilation unit before the CU's serialization context is created. Which

[17:19] <dalek> rakudo/nom: means that we cannot have WVal there, since these need the SC of the CU

[17:19] <dalek> rakudo/nom: to be deserialized. This patch cares about strings, i.e. in :from<NQP>.

[17:19] <dalek> rakudo/nom: We need a smarter solution in future to be able to use regexes, versions

[17:19] <dalek> rakudo/nom: and other objects in colonpairs there.

[17:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/186f0e4679

[17:20] <FROGGS> lichtkind: works on my ubuntu, that's all I know

[17:22] <dalek> rakudo/nom: 5fad7c6 | (Tobias Leich)++ | src/Perl6/ModuleLoader.nqp:

[17:22] <dalek> rakudo/nom: fix loading of NQP modules

[17:22] <dalek> rakudo/nom: 

[17:22] <dalek> rakudo/nom: NQP's module loader does not know about the :$line named parameter.

[17:22] <dalek> rakudo/nom: Also, when we run deserialization tasks we have no GLOBALish to pass,

[17:22] <dalek> rakudo/nom: so don't pass any.

[17:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5fad7c6ead

[17:24] <FROGGS> is anybody using v5 atm?

[17:25] <japhb_> FROGGS, in a slide deck, yes.  :-)  Why?

[17:25] <FROGGS> japhb: I was thinking that my next patch might break it, but it does not :o)

[17:25] <FROGGS> so, all is good :o9

[17:25] <FROGGS> :o)

[17:28] <flussence> lichtkind: I can compile rakudo fine on 64-bit gentoo, but panda fails.

[17:29] <flussence> "This is perl6 version 2014.05-151-gdba10ee20da8 built on MoarVM version 2014.05-18-g6b19b4b2a463"

[17:29] *** pdurbin left
[17:29] <lichtkind> FROGGS++

[17:29] <lichtkind> after your last patch it works again

[17:30] <dalek> rakudo/nom: 7606343 | (Tobias Leich)++ | src/Perl6/Grammar.nqp:

[17:30] <dalek> rakudo/nom: allow to switch to a pure Perl 6 slang, not just NQP

[17:30] <dalek> rakudo/nom: 

[17:30] <dalek> rakudo/nom: We are now very careful when calling into the foreign statementlist,

[17:30] <dalek> rakudo/nom: and also when we get the match and the made result back, we turn this

[17:30] <dalek> rakudo/nom: into a NQP-level match. This means that language switching is slightly

[17:30] <dalek> rakudo/nom: more expensive then before, but the other approach would make grammars

[17:30] <dalek> rakudo/nom: in general slower.

[17:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7606343572

[17:30] <FROGGS> lichtkind: that is just coincident :o)

[17:31] <lichtkind> but my data ... :)

[17:31] <FROGGS> :o)

[17:31] <FROGGS> timotimo: here you go :o)

[17:33] <colomon> Right, panda has been failing on Rakudo-moar since last Thursday.

[17:39] <jnthn> colomon: I know it got isolated to a version bump; if it's Moar-version sensitive then re-building Moar at some earlier versions could help track down what commit there broke it (though guess it could be an NQP one also)

[17:48] * masak hugs #perl6

[17:49] <masak> no names, but wow some other IRC channels are puerile

[17:51] <masak> thank you, #perl6, for being worth talking to :)

[17:55] *** beastd joined
[17:56] <vendethiel> I love myself some masak hugging.

[17:57] <japhb_> Saw the patches sometime in the last week that made $*USER and $*GROUP work.  They are objects that .Numeric and .Str appropriately.  Is the 'true dualvar' concept -- single values that ~~ Int and ~~ Str at the same time -- now dead?

[17:58] <jnthn> IntStr may well end up being more dualvar-ish, but doing that for $*USER and $*GROUP feels odd to me.

[17:59] <japhb_> Does IntStr work in Rakudo now?  (Did I just miss that happy moment?  :-)

[17:59] <TimToady> yeah, that's not really the intent of IntStr...

[17:59] <japhb_> Sigh, no joy from 'git grep'

[18:00] <jnthn> NYI

[18:00] <japhb_> TimToady, I know the intent of IntStr was for e.g. command line args, but why *wouldn't* you use that for something like $*USER, assuming it worked?

[18:01] <jnthn> japhb_: I think using IntStr for something that isn't two representations of the same peice of information (like "42" and 42) is probably a bit of a design smell.

[18:02] <japhb_> Ah, I see.  That dividing line makes sense to me.

[18:02] <colomon> +1 to what jnthn says.

[18:02] <masak> +1

[18:03] <masak> the concept you're grasping for is called "an object" with "accessors" :P

[18:03] *** carlin_ joined
[18:03] <masak> s/you/y'all/

[18:05] <japhb_> masak, I'm not grasping for anything -- and certainly not that.  Because for $*USER the stringy and numeric values are (nearly) equivalent identities.  In some sense 'japhb' and '1234' are both id's.

[18:06] *** bluescreen10 joined
[18:06] <japhb_> But I understand jnthn's point of reserving dualvars for 1234 and '1234'

[18:07] <japhb_> I guess my point was based on $*USER being nothing other than a caching container for the two equivalent IDs.

[18:07] <sergot> lizmat: https://github.com/rakudo/rakudo/pull/277 - done :)

[18:07] *** carlin left
[18:07] <japhb_> It would have felt obviously object-ish if it carried other attributes of the user, like home directory, default shell, or full name.

[18:08] *** hoverboard left
[18:09] <masak> I dunno, to me it's clearly a small struct-like object.

[18:10] <vendethiel> oh, chrome disabled extensions installed from outside the store ? Looks like it's time to get back to firefox.

[18:13] <tadzik> huh. JSON::Pretty is core now?

[18:13] <masak> aye.

[18:13] <sergot> tadzik: it is :)

[18:13] <tadzik> wow

[18:13] <tadzik> is JSON core too? :D

[18:13] <masak> ...no

[18:14] <tadzik> I have no words

[18:14] <sergot> tadzik: how should I name the next release? :)

[18:14] <tadzik> sergot: Poznan? Or was there already Poznan, hmm

[18:14] <masak> there was already Poznan.

[18:14] <masak> sorry, already nabbed it last year :>

[18:14] <sergot> that's the problem :P

[18:15] <tadzik> why do we have a json emitter but not a json parser in core-core?

[18:15] <masak> because something core needed the JSON emitter.

[18:15] <masak> and nothing core needs the JSON parser.

[18:15] <tadzik> oh wait, we do have the parser too

[18:15] <jnthn> tadzik: Something to do with it being a dependency of the S11 stuff.

[18:15] <jnthn> tadzik: I'm guessing it's being kept private to that...

[18:15] <tadzik> ah, ok

[18:15] <jnthn> m: say JSON::Pretty

[18:15] <camelia> rakudo-moar dba10e: OUTPUT«===SORRY!===␤Could not find symbol '&Pretty'␤»

[18:16] <jnthn> Yeah.

[18:16] <tadzik> alrighty

[18:16] <jnthn> So it's only there as an implementation detail, afaict. Which feels right, 'cus that's what it is.

[18:16] <tadzik> I guess

[18:17] <rindolf> Hi all.

[18:17] <rindolf> TimToady: here? May I PM you?

[18:18] * masak .oO( IS IT OK IF I WHISPER IN YOUR EAR )

[18:19] <vendethiel> .oO( Talk to me like coders do )

[18:20] * masak .oO( $i++; # increase $i by one )

[18:22] <vendethiel> .oO( Is that why you hugged us all before )

[18:22] <PerlJam> masak: the comment would've actually read "# decrease $i by two" or somesuch because of implementation changes over time  :)

[18:22] <vendethiel> PerlJam: my $four = 5; # set six to seven

[18:22] <masak> :P

[18:23] <jnthn> .oO( $price++; # if it's special-offer Tuesday, the overload of ++ doesn't actually increment )

[18:23] <huf> q"" and qq'' and for (my $i = 0, $i < $n, $i++) {} :D

[18:23] <masak> jnthn: or more likely, that comment was never written.

[18:23] <huf> since we decided to become evil

[18:23] <vendethiel> jnthn: you're the best kind of evil. Like C++ evi.

[18:23] <vendethiel> s/i\./il./

[18:23] *** Sqirrel joined
[18:24] <PerlJam> vendethiel: sorry, I'm having trouble reconciling C++ as "best evil" and somehow relating that to jnthn. 

[18:25] <vendethiel> PerlJam: actually, it's evil operator overloading and C++

[18:25] <tadzik> we can do worse

[18:25] <huf> yes we can!

[18:25] <jnthn> I actually was thinking of C++ when I wrote it, but realized how easy it is to implement in Perl 6

[18:25] <vendethiel> I hope we can, we've had so many years to learn

[18:25] <vendethiel> jnthn: I knew it, somehow :P

[18:25] <PerlJam> vendethiel++ psychic powers

[18:25] <jnthn> multi postfix:<++>(Price $p where Date.today.day == Tuesday) { $p } # :D

[18:25] <tadzik> m: sub infix:<++>($a is rw , $b is rw) { $a++; $b++ }; my $a = 1; my $b = 1; $a++$b; say $a; say $b

[18:26] <camelia> rakudo-moar dba10e: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/unkEiVVcRD␤Two terms in a row␤at /tmp/unkEiVVcRD:1␤------> [32m$a++; $b++ }; my $a = 1; my $b = 1; $a++[33m⏏[31m$b; say $a; say $b[0m␤    expecting any of:␤        postfix␤        …»

[18:26] <tadzik> baww

[18:26] <vendethiel> I guess it can't decide :P

[18:27] <tadzik> yeah'

[18:27] <jnthn> Need whitespace around infixen...

[18:27] <jnthn> As a postfix always wins

[18:27] <tadzik> that ruins the fun

[18:27] <jnthn> You can see that from the error.

[18:28] <tadzik> yeah

[18:28] *** brrt joined
[18:29] *** hoverboard joined
[18:32] *** mr-foobar left
[18:33] <masak> jnthn: I panicked when I saw your suggestion -- I went "what, .day!? we have an enum with Tuesday in it!?"

[18:33] <masak> :P

[18:33] <masak> "...who designed that?"

[18:34] <masak> jnthn: (it's .day-of-week and 2, respectively)

[18:34] *** treehug8_ left
[18:34] <masak> thing is, I tried with 'multi postfix:<++>' locally, and I couldn't get it to work :/

[18:34] <masak> so I'd love to see a working solution.

[18:35] <jnthn> m: say Friday

[18:35] <camelia> rakudo-moar dba10e: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/xVle2siy7g␤Undeclared name:␤    Friday used at line 1␤␤»

[18:35] <jnthn> I...think I'd prefer an enum :P

[18:38] <jnthn> masak: I agree on day-of-week; not sure why an enum of weekdays is alarming you? :)

[18:39] <[Coke]> clearly tuesday should be spelled :2day

[18:39] <vendethiel> m: enum Weekdays <Lundi Mardi Mercredi>;

[18:39] <camelia> rakudo-moar 760634: ( no output )

[18:40] <masak> jnthn: can think of two reasons right off. (a) I didn't want any English names in the Temporal classes, and (b) the weekdays are 1-based, and it would be slightly surprising for an enum to be.

[18:40] <jnthn> masak: I'd say the English day names are much more widely agreed on that which is the first day of the week... :)

[18:41] <jnthn> (Until you said it was 1-based, I'd been assuming Sunday was day 0. Seriously.)

[18:44] <masak> I thought long and hard on that one.

[18:44] <masak> decided that for those who expect Sunday to be 0, they can easily $wd % 7 and get that result.

[18:44] <masak> but the other way is trickier.

[18:45] <masak> I still have no idea what's going on with the parts of the world who figure Sunday is first in the week ;)

[18:45] <masak> that's just... so wrong.

[18:45] *** bbkr_ joined
[18:46] <masak> it doesn't mesh well with the widely accepted meaning of "weekend", for example.

[18:47] <jnthn> From the reliable source of answers that gave us "how is babby formed": https://answers.yahoo.com/question/index?qid=20071014021709AA3MAO7

[18:47] <jnthn> It's so not agreed upon :)

[18:47] <geekosaur> you expected the US to be sane?

[18:48] <jnthn> No, I expect to get an enum of names so I don't have to worry about this :P

[18:48] *** bbkr left
[18:49] <nwc10> so if they are called "ugh", "meh", "bleurg", "wa :-(", "POETS!", "yay", "zzz" it doesn't matter to the program?

[18:50] <masak> jnthn: also from that page: "ISO prescribes Monday as the first day of the week with ISO-8601." -- the rest of DateTime intentionally stays very close to ISO-8601.

[18:50] <masak> nwc10: thank god it's ughday.

[18:50] <jnthn> masak: I'm not arguing for a change to "what is the first day".

[18:50] <masak> *nod*

[18:50] <nickpatch> masak: the CLDR defines the first day of the week for different locales

[18:50] <jnthn> masak: I'm arguing for not leaving people having to guess wrong, like I mighta :)

[18:50] <nickpatch> http://www.unicode.org/reports/tr35/tr35-35/tr35-dates.html#Week_Data

[18:51] <masak> jnthn: I don't have a horse in this particular race. if you can get popular support for introducing a WeekDay enum, go ahead.

[18:51] <jnthn> OK :)

[18:52] <masak> ...though I would prefer for the enum not to mess up the existing integer values, if nothing else for compatibility's sake...

[18:52] <masak> (and because I did ponder it quite a lot, and I believe I got the "right" design choice)

[18:54] <jnthn> Yes, I'm fine with the integer values.

[18:56] *** darutoko left
[19:19] *** lichtkind left
[19:20] *** FROGGS[mobile] joined
[19:21] *** lichtkind joined
[19:23] *** FROGGS left
[19:25] <dalek> perl6-roast-data: 6d46d95 | coke++ | / (3 files):

[19:25] <dalek> perl6-roast-data: today (automated commit)

[19:25] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/6d46d95337

[19:25] *** guru joined
[19:25] *** guru is now known as ajr_

[19:26] <[Coke]> ^^ rakudo.moar is clean again.

[19:26] <[Coke]> parrot & jvm still dirty. 

[19:27] <[Coke]> so, yay for moar!

[19:28] *** lichtkind left
[19:29] *** cognominal left
[19:30] *** cognominal joined
[19:31] *** treehug88 joined
[19:36] <[Coke]> ugh. test changes to use eval server... accidentaly rebuild rakudo-jvm (slooow)

[19:36] <[Coke]> if only we had an eval server for nqp-jvm!

[19:37] *** kaare__ left
[19:41] *** lichtkind joined
[19:50] *** uniejo joined
[19:51] *** rindolf left
[19:52] *** ajr_ left
[19:56] *** FROGGS joined
[19:56] *** uniejo left
[19:56] * [Coke] is into the spec test run with the eval server .whee.

[19:58] <[Coke]> sooo much faster.

[19:58] <FROGGS> it just need to work out

[19:59] *** guru joined
[19:59] *** guru is now known as ajr_

[19:59] *** MilkmanDan left
[20:06] <dalek> rakudo/nom: 7a6d6ec | sergot++ | src/core/JSON/Pretty.pm:

[20:06] <dalek> rakudo/nom: my $s removed

[20:06] <dalek> rakudo/nom: 

[20:06] <dalek> rakudo/nom: We dont want this variable to be in the config

[20:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7a6d6eca98

[20:06] <dalek> rakudo/nom: a7dd964 | (Tobias Leich)++ | src/core/JSON/Pretty.pm:

[20:06] <dalek> rakudo/nom: Merge pull request #277 from sergot/nom

[20:06] <dalek> rakudo/nom: 

[20:06] <dalek> rakudo/nom: my $s removed

[20:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a7dd96476f

[20:07] <masak> an interesting case of the inverse of a once-and-only-once refactor being the right thing to do, due to surrounding forces.

[20:08] <PerlJam> now if only we could get rid of $sprintfHandlerInitialized, $default, $Nan, and $Inf  ...   :)

[20:08] *** treehug88 left
[20:09] <PerlJam> oh, and $UINT64_UPPER

[20:09] *** eMBee left
[20:10] <vendethiel> do we have anything that looks like (delimited) continuations ?

[20:10] <vendethiel> Or are we bound to do this sort of stuff through macros

[20:10] *** eMBee joined
[20:12] *** virtualsue joined
[20:13] *** rgbkrk_ joined
[20:15] <timotimo> gather/take is implemented in terms of delimited continuations

[20:16] <masak> vendethiel: TimToady has said pretty definitively that (beyond gather/take), delimited continuations aren't going to be exposed in Perl 6 as first-class things.

[20:16] <timotimo> oh

[20:16] <vendethiel> mh; I see.

[20:16] <vendethiel> I can guess why, but meh :(

[20:16] <masak> vendethiel: mainly because all VMs we'll want to target won't have them.

[20:16] *** itz_ joined
[20:17] <vendethiel> Good point, actually.

[20:17] *** rgbkrk left
[20:18] <[Coke]> DOH. I didn't update rakudo-jvm before trying this test.

[20:18] <vendethiel> But it's a really, really powerful feature. I guess I still will be able to rewrite stuff in macros, someday

[20:18] <timotimo> d'oh

[20:19] <vendethiel> nqp::continuationcontrol

[20:24] *** treehug88 joined
[20:27] <masak> vendethiel: *nod*

[20:27] <masak> vendethiel: believe me, I'm thinking about it.

[20:28] <vendethiel> masak: which part ?

[20:30] <masak> the precise relations between program fragments, macros, and delimited continuations.

[20:31] *** kst left
[20:33] *** bjz joined
[20:38] *** bjz left
[20:41] *** hummeleB1 left
[20:41] *** treehug8_ joined
[20:43] *** treehug__ joined
[20:43] <vendethiel> masak: I expected you to :)

[20:43] *** treehug88 left
[20:46] *** treehug8_ left
[20:47] *** treehug__ left
[20:49] *** hoverboard left
[20:51] *** molaf_ left
[20:55] <carlin_> perl6-debug appears to be broken, explodes with "Start argument to substr out of range. Is: -1, should be in 0..0"

[20:55] <carlin_> both -m and -j

[21:01] <FROGGS> :/

[21:02] <timotimo> ... again?!

[21:03] *** virtualsue left
[21:05] *** Rotwang left
[21:06] *** itz_ left
[21:07] *** treehug88 joined
[21:09] *** skids left
[21:15] *** kurahaupo joined
[21:18] *** vendethiel left
[21:19] *** donaldh joined
[21:22] *** rgbkrk_ left
[21:22] <FROGGS> yay, looks like v5's EXPR is working...

[21:22] *** rgbkrk joined
[21:23] <FROGGS> now I just need to solve that bloody hang/infiniloop in token statement

[21:26] <[Coke]> weird; rakudo.jvm test runs much faster with the latest eval server tweak, but the failures are different.

[21:28] *** rurban joined
[21:34] * donaldh is experiencing that too.

[21:34] *** telex left
[21:35] *** treehug8_ joined
[21:35] *** FROGGS[mobile] left
[21:36] *** telex joined
[21:37] *** treehug88 left
[21:40] *** hoverboard joined
[21:40] *** beastd left
[21:43] *** Sqirrel left
[21:44] *** jnap left
[21:45] *** jnap joined
[21:51] *** BenGoldberg joined
[21:53] *** dmol left
[21:54] *** hoverboard is now known as moistcherry

[22:03] *** bluescreen10 left
[22:04] *** brrt left
[22:11] *** carlin_ is now known as carlin

[22:11] *** Timbus joined
[22:12] *** rurban left
[22:16] *** spider-mario left
[22:25] *** moistcherry left
[22:27] *** bbkr_ left
[22:28] *** ajr_ left
[22:32] *** treehug8_ left
[22:35] *** bjz joined
[22:35] *** skids joined
[22:36] <FROGGS> m: use QAST:from<NQP>; my $p = QAST::Node.new; sub foo($bar) { }; foo($p) # @jnthn: why? ó.ò

[22:36] <camelia> rakudo-moar a7dd96: OUTPUT«No such method 'item' for invocant of type 'QAST::Node'␤  in method message at src/gen/m-CORE.setting:12595␤  in sub foo at /tmp/_3OiReY811:1␤  in block  at /tmp/_3OiReY811:1␤␤»

[22:36] *** zengargo1le joined
[22:37] <jnthn> FROGGS: 'cus QAST::Node isn't Any, and the NQP <=> Perl 6 interop stuff we could do with having isn't really there yet...

[22:37] <FROGGS> hmmmm

[22:37] <FROGGS> 'in method message'... as if it explodes in a exception

[22:38] <jnthn> m: use QAST:from<NQP>; my $p = QAST::Node.new; sub foo(Mu $bar) { }; foo($p)

[22:38] <camelia> rakudo-moar a7dd96: ( no output )

[22:38] <FROGGS> ahh, yeah

[22:38] <jnthn> Yes, it's exploding trying to report the exception.

[22:38] <FROGGS> of course

[22:38] <FROGGS> jnthn++

[22:38] <jnthn> But the reason for the exception is the bind failure

[22:38] <jnthn> But in general we need to make other-language things appear to be any

[22:38] <jnthn> *Any

[22:40] *** bjz left
[22:40] *** zengargoyle left
[22:44] *** ChoHag joined
[22:44] *** lichtkind left
[22:44] <ChoHag> Does rakudo build on freebsd?

[22:44] <FROGGS> I think so, yes

[22:48] <ChoHag> Does it need anything special?

[22:48] <ChoHag> And/or are there dependencies documented anywhere?

[22:49] <FROGGS> the dependencies depend on what you build

[22:49] <FROGGS> look at moarvm.org when you want to build rakudo@moar

[22:51] <FROGGS> you can also build rakudo for jvm, then you just need the jre and Perl 5 AFAIK

[22:51] <FROGGS> if you build for parrot, then libicu would be nice to have

[22:57] <BenGoldberg> I just had a really crazy idea... perlito allows perl6 to be compiled to javascript; javascript and actionscript are supersets of ECMAScript; how hard would it be to modify perlito to produce ECMAScript which can *either* as javascript *or* as actionscript?

[22:58] <BenGoldberg> Running perl6 in a flash player could be really cool, I think

[23:00] *** rgbkrk left
[23:00] <BenGoldberg> s/ as javascript/ be interpreted as javascript/; s/ as actionscript/ be compiled as actionscript/

[23:02] *** FROGGS left
[23:02] <timotimo> ... flash player, seriously?

[23:02] <timotimo> that crap's gotta die, my friend

[23:05] <timotimo> sadly, the subset of perl6 that perlito can do is quite limited

[23:10] <masak> 'night, #perl6

[23:12] *** dmol joined
[23:13] <flussence> .oO( at least that'd give Lightspark a reason to improve... )

[23:29] *** donaldh left
[23:42] *** BenGoldberg left
[23:44] *** BenGoldberg joined
[23:58] *** raiph left
