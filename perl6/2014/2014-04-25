[00:06] *** kurahaupo joined
[00:06] *** erdic joined
[00:10] *** xenoterracide_ joined
[00:11] *** Ben_Goldberg joined
[00:11] *** BenGoldberg left
[00:11] *** Ben_Goldberg is now known as BenGoldberg

[00:13] *** nebuchad` left
[00:13] *** nebuchad` joined
[00:16] *** kurahaupo left
[00:30] *** adu left
[00:31] *** adu joined
[00:39] *** arturo_ left
[00:41] *** ssutch_ left
[00:44] *** treehug88 joined
[00:48] *** _sri left
[00:48] *** _sri joined
[00:48] *** dayangkun joined
[00:48] *** _sri left
[01:00] *** adu left
[01:07] *** woosley left
[01:07] *** woosley joined
[01:13] *** _sri joined
[01:19] *** FROGGS_ joined
[01:19] <dalek> roast: 0aefc53 | (David Warring [email@hidden.address] | integration/advent2012-day14.t:

[01:19] <dalek> roast: adding 2012 advent day 14

[01:19] <dalek> roast: review: https://github.com/perl6/roast/commit/0aefc534e0

[01:19] *** Sqirrel_ joined
[01:21] *** Sqirrel left
[01:22] *** FROGGS left
[01:26] *** moistcherry joined
[01:28] *** moistcherry is now known as hoverboard

[01:41] *** hoverboard left
[01:58] *** dmol joined
[02:01] *** klapperl_ left
[02:01] *** dmol left
[02:03] *** klapperl joined
[02:03] *** hoverboard joined
[02:05] *** telex left
[02:06] *** telex joined
[02:21] *** plobsing joined
[02:23] *** hoverboard left
[02:26] *** ivan`` left
[02:29] *** jtpalmer joined
[02:30] *** ivan`` joined
[02:32] *** xragnar_ joined
[02:32] *** xragnar left
[02:32] *** xragnar_ is now known as xragnar

[02:33] *** xenoterracide_ left
[02:37] *** xenoterracide_ joined
[02:44] *** adu joined
[02:46] *** hoverboard joined
[02:49] *** xenoterracide_ left
[02:49] *** pdcawley joined
[02:56] *** xenoterracide_ joined
[03:02] *** xenoterracide_ left
[03:04] *** btyler joined
[03:15] *** Ben_Goldberg joined
[03:15] *** BenGoldberg left
[03:15] *** Ben_Goldberg is now known as BenGoldberg

[03:19] *** xenoterracide_ joined
[03:25] *** hoverboard is now known as moistcherry

[03:29] *** moistcherry is now known as hoverboard

[03:35] *** ssutch_ joined
[03:39] *** ssutch_ left
[03:40] *** xenoterracide_ left
[03:53] *** robinsmidsrod joined
[03:53] *** Ben_Goldberg joined
[03:54] *** BenGoldberg left
[03:54] *** Ben_Goldberg is now known as BenGoldberg

[03:56] <avuserow> colomon: I haven't considered a proxy really. I didn't find too much on that. I'll give it a shot.

[03:57] <masak> morning, #perl6

[03:59] <avuserow> good localtime, masak :)

[04:06] *** kaare_ joined
[04:11] *** anaeem1_ joined
[04:15] *** treehug88 left
[04:19] *** hoverboard is now known as moistcherry

[04:20] *** [Sno] left
[04:29] <BenGoldberg> Good mornevenafternnight?

[04:30] *** Psyche^_ joined
[04:34] *** Psyche^ left
[04:35] *** BenGoldberg left
[04:36] *** ssutch joined
[04:40] *** ssutch left
[04:42] <masak> the abigail quote by the end of http://www.perl.com/pub/2005/03/03/pugs_interview.html is funny :>

[04:52] *** moistcherry left
[05:10] <TimToady> a lot of moat water has flowed under that drawbridge

[05:12] <FROGGS_> single moat water, even

[05:14] *** xinming__ joined
[05:17] *** arturo_ joined
[05:17] *** SamuraiJack_ joined
[05:17] *** xinming_ left
[05:17] *** arturo_ left
[05:19] <moritz> \o

[05:20] <FROGGS_> o/

[05:20] *** hoverboard joined
[05:22] *** [Sno] joined
[05:26] *** hoverboard left
[05:31] *** nhayashi joined
[05:37] *** ssutch joined
[05:41] *** ssutch left
[05:43] *** arturo_ joined
[05:45] *** anaeem1_ left
[05:45] *** anaeem1 joined
[05:49] *** kaare_ left
[05:50] <lue> Not very Perl 6-related, and a bit ranty, but I blogged anyway :)    https://rdstar.wordpress.com/2014/04/25/i-just-love-%E2%99%A5-c/

[05:51] <FROGGS_> lue: I commented on that and I'd like to know your opinions... http://rdstar.wordpress.com/2014/03/09/perl6-and-cpan/

[05:56] <lue> FROGGS_: replied

[05:59] *** arturo_ left
[06:00] <FROGGS_> lue: replied again :o)

[06:01] <FROGGS_> lue: whenever you have concerns or anything, please please ping or .tell me/lizmat

[06:03] <raydiak> \o

[06:04] <lue> FROGGS_: ah, I think my mistake was looking at the .pod pages, because that's where your searches always land and they seem like the main feature of search.cpan.org anyway.

[06:04] <lue> ♘ #perl6 o/

[06:06] <FROGGS_> lue: yes, the interface of search.cpan.org is not state of the art :o)

[06:06] <FROGGS_> gnight lue 

[06:07] <FROGGS_> hi raydiak 

[06:09] *** arturo_ joined
[06:13] <sergot> morning #perl6 o/

[06:13] *** hoverboard joined
[06:19] *** Pneuma joined
[06:22] <FROGGS_> morning sergot 

[06:27] *** nebuchadnezzar joined
[06:28] *** denis_boyun_ joined
[06:28] *** nebuchadnezzar left
[06:28] *** nebuchad` left
[06:29] *** nebuchadnezzar joined
[06:30] *** lizmat left
[06:32] *** FROGGS_ left
[06:34] *** xinming__ left
[06:36] *** xinming_ joined
[06:37] *** arturo_ left
[06:39] *** ssutch joined
[06:43] *** ssutch left
[06:44] *** kaare_ joined
[06:46] *** FROGGS joined
[06:47] *** xinming__ joined
[06:50] *** xinming_ left
[06:52] *** hoverboard left
[06:57] <timotimo> hmm

[06:57] <FROGGS> hmm?

[06:57] <FROGGS> timotimo: btw, I made some progress with labels-m last night

[06:59] <FROGGS> it installs the exception handlers in while loops for last/redo/next LABEL (yet without the label), and when it throws the exception (like in `last FOO`), it throws the correct exception category and already attaches the LABEL

[06:59] <timotimo> <3

[07:00] <FROGGS> next is to attach the LABEL to the handler and then when looking for an exception handler I just need to compare for the LABEL's .WHERE (which is its memory address)

[07:01] <FROGGS> I'd love to work on that right now, but... $work :/

[07:04] *** btyler left
[07:07] *** kurahaupo joined
[07:07] *** kurahaupo left
[07:09] *** kurahaupo joined
[07:09] *** kurahaupo left
[07:10] *** kurahaupo joined
[07:16] *** anaeem1 left
[07:16] <moritz> https://stripe.com/blog/stripe-open-source-retreat # maybe somebody wants to work on rakduo or MoarVM for three months in SF? :-)

[07:16] <moritz> (I doubt they'd fund that, but it might be worth a shot)

[07:17] *** kaleem joined
[07:17] *** kurahaupo left
[07:19] <FROGGS> wow

[07:19] <FROGGS> stripe.com++

[07:21] *** Sqirrel_ left
[07:22] *** anaeem1 joined
[07:23] *** anaeem1 left
[07:23] *** darutoko joined
[07:25] *** anaeem1 joined
[07:29] *** rindolf joined
[07:31] *** zakharyas joined
[07:35] *** pecastro left
[07:40] *** ssutch joined
[07:43] <sergot> karma stripe.com

[07:44] *** ssutch left
[07:46] *** cxreg left
[07:49] <FROGGS> .karma stripe.com

[07:49] <FROGGS> .help

[07:49] <yoleaux> FROGGS: I'm yoleaux. Type .commands to see what I can do, or see http://dpk.io/yoleaux for a quick guide.

[07:49] <FROGGS> .commands

[07:49] <yoleaux> Commands are divided into categories: services, general, api, demos, admin. Use .commands <category> to get a list of the commands in each.

[07:49] <FROGGS> .commands services

[07:49] <yoleaux> Commands in services: acronym, add-command, command-help, del-command, dety, geo, leo, moon, ngrams, nokiageo, o, r2r, roll, rot13, shipping, suggest, swhack, thesaurus, title, tw, twho, weather, yi. Use .help to get information about them.

[07:50] <FROGGS> .commands general

[07:50] <yoleaux> Commands in general: ask, at, botsnack, buck, bytes, choose, in, msg, on, pick, ping, seen, supercombiner, t, tell, to, tz. Use .help to get information about them.

[07:50] <FROGGS> hmmm, perhaps only preflex did that

[07:54] *** Pneuma left
[07:56] *** cxreg joined
[08:03] <dalek> roast: 3978e49 | raydiak++ | S02-types/type.t:

[08:03] <dalek> roast: Fix 'Int !~~ Numeric' test description

[08:03] <dalek> roast: review: https://github.com/perl6/roast/commit/3978e49f13

[08:04] *** pdcawley left
[08:04] <FROGGS> hehe

[08:04] <FROGGS> good catch :o)

[08:05] <raydiak> :)

[08:05] *** adu left
[08:06] <raydiak> I noticed on the feature matrix it says rakudo supports an outdated spec of type coercions...what specifically does that mean?

[08:07] *** fhelmberger joined
[08:07] *** pdcawley joined
[08:08] <FROGGS> I dunno

[08:10] *** Ven left
[08:16] <moritz> m: sub f (Cool $x as Int) { say $x }; f '42'

[08:16] <camelia> rakudo-moar 1ae0b2: OUTPUT«42␤»

[08:16] <moritz> by the current spec, that would be written as sub f(Cool(Int) $x) { ... }

[08:17] <raydiak> I see

[08:17] <moritz> it seems to treat those coercion types as first-class objects

[08:17] <moritz> but is pretty much silent on their properties, exception for the coercion aspect

[08:18] <raydiak> hm

[08:20] *** lizmat joined
[08:20] <moritz> so I guess some significant exploring/prototyping is necessary before actualy implementation

[08:21] *** ssutch joined
[08:23] <sergot> For those who don't know about this: I have the pleasure of inviting you for the second Polish Perl Workshop which is held on 17th and 18th of May. http://act.yapc.eu/plpw2014/

[08:23] <FROGGS> moritz: that feels like I could `say Cool(Int)` and would get an coercion object... is that right?

[08:23] <sergot> We'd have nice gadgets for you! :)

[08:23] <FROGGS> yay! I am coming for the gadgets then :o)

[08:24] <sergot> FROGGS: hah, a mug maybe? :)

[08:24] <moritz> FROGGS: yes, if I understand correctly

[08:24] <FROGGS> sergot: ohh, I like mugs

[08:24] <FROGGS> moritz: that could be very very handy

[08:33] *** plobsing left
[08:34] <mhasch> whow, plpw has lots of Perl 6 coverage

[08:35] <FROGGS> that is the new shiny, aye :o)

[08:36] <FROGGS> and, even when somebody is not interested in P6 itself, learning techniques or how it can be done also is more interesting than "Here I show you how we mangle data in company X" IMO

[08:41] *** Tene joined
[08:41] *** Tene left
[08:41] *** Tene joined
[08:44] *** pecastro joined
[08:46] *** djanatyn joined
[08:50] *** ssutch left
[08:51] *** ssutch joined
[08:54] *** denis_boyun_ left
[08:56] *** ssutch left
[08:58] *** ssutch joined
[09:03] *** dmol joined
[09:13] *** ssutch left
[09:16] *** lizmat_ joined
[09:16] *** lizmat left
[09:50] *** spider-mario joined
[10:06] *** denis_boyun joined
[10:27] *** lizmat_ left
[10:40] *** dayangkun left
[10:44] *** dayangkun joined
[10:53] *** chenryn left
[10:58] *** cognominal left
[10:59] *** cognominal joined
[11:09] *** mtj_ joined
[11:24] *** lizmat joined
[11:32] *** dayangkun is now known as dayangkun_afk

[11:48] <dalek> nqp/async_ops: fd6faf9 | (Donald Hunter)++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[11:48] <dalek> nqp/async_ops: Fix Ops.bindsock to test instanceof IIOBindable instead of ServerSocketHandle.

[11:48] <dalek> nqp/async_ops: review: https://github.com/perl6/nqp/commit/fd6faf93ad

[11:48] <dalek> nqp/async_ops: e5b3c06 | (Donald Hunter)++ | src/vm/jvm/runtime/org/perl6/nqp/ (5 files):

[11:48] <dalek> nqp/async_ops: Implement socket asyncconnect, asynclisten on JVM.

[11:48] <dalek> nqp/async_ops: review: https://github.com/perl6/nqp/commit/e5b3c06ec3

[12:26] *** kbaker joined
[12:28] *** kbaker left
[12:29] *** lizmat left
[12:33] <dalek> Perlito: f08aa3e | (Flavio S. Glock)++ | src5/lib/Perlito5/Grammar/Regex5.pm:

[12:33] <dalek> Perlito: Perlito5 - regex - cleanup

[12:33] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/f08aa3e9cd

[12:38] *** xenoterracide_ joined
[12:54] *** anaeem1 left
[12:56] *** guru joined
[12:56] *** guru is now known as ajr_

[13:10] *** fhelmberger left
[13:16] * [Coke] drinks a coffee and lets his brain decompress.

[13:19] *** raiph joined
[13:23] *** dayangkun_afk left
[13:30] * vendethiel is back from a conf where people discussed CMS in java ...

[13:36] *** xenoterracide_ left
[13:38] <raiph> https://www.youtube.com/watch?v=YW75CXY-P3M is a one hour video of jnthn doing his 2014 fosdem talk titled "Perl 6: what can you do today?"

[13:38] <raiph> I believe this is the version with the audio cleaned up as best possible.

[13:39] <raiph> Does someone have the tools to create a new version of this that is just the bit from 4m06s thru 33m59s?

[13:41] <vendethiel> raiph: that's the best part :P ?

[13:46] *** btyler joined
[13:47] *** sftp left
[13:47] *** sftp joined
[13:47] <raiph> vendethiel: yes

[13:54] <raiph> vendethiel: the audio is clean for a few seconds before and after, and there are sporadic clean bits later on

[13:56] <retupmoca> I found another moarvm precomp issue: https://gist.github.com/retupmoca/11290398

[13:57] <retupmoca> I might poke at it this weekend if I have time

[13:57] <raiph> I think the section 4m06s thru 33m59s (of the above video) would make a nice coherent talk titled "Parsing informally structured text into a data model in 36 lines of Perl 6 code"

[13:58] <vendethiel> raiph: usually, I just show people the JSON::Tiny grammar, and they're like "oh. yeah. Uhmmm..."

[13:59] <raiph> vendethiel: as in, a neutral/negative reaction? have you gone thru jnthn's temperature data example, eg watched the video I linked?

[14:00] <vendethiel> raiph: as in, "holy buckets, that would take 100 more lines to write in my language"

[14:00] <vendethiel> -- am I that bad at conveying enthusiasm of other people ?!

[14:00] <vendethiel> (and yeah I've pretty much read every slides jnthn made 'til ~2011)

[14:00] <vendethiel> what I show, in order of appearance : junctions. That always get people a head start. Multi dispatch. Ability to add operator. [+] with range. With "...", they're usually convinced

[14:01] *** kaleem left
[14:01] <vendethiel> and when they ask what could be a really strong point, I show them JSON::Tiny. It's worked everytime, and I think I got 3 people on this channel :)

[14:04] *** erkan joined
[14:04] *** erkan left
[14:04] *** erkan joined
[14:06] <FROGGS> vendethiel: you have very good points there :o)

[14:07] <jnthn> My NLPW talk: http://jnthn.net/papers/2014-nlpw-reactive.pdf

[14:07] <raiph> vendethiel: sounds like a winning strategy. JSON::Tiny makes a point, and very quickly :)

[14:07] <vendethiel> It's like I was a commercial in an older life o/

[14:08] <raiph> advantages of the temp data example over JSON::Tiny include: ad hoc data (so one can't say, well, just use an existing parser); jnthn++; shows more of P6 dev process, especially use of debugger; is a video walk thru; jnthn; shows how to map from parser tree to a different data structure; jnthn

[14:08] <vendethiel> (I'm not sure if you can say "I was a commercial" like I mean it, in english)

[14:08] <jnthn> https://github.com/jnthn/perl6-reactive-samples is the sample code (link in slides too, but that's a clicky :))

[14:08] <vendethiel> jnthn++

[14:11] *** colomon left
[14:13] *** colomon joined
[14:14] <colomon> jnthn++

[14:15] <raiph> jnthn: have you done your recent one hour "Perl 6: what you can do today?" talk anywhere else, with a good recording? (only half the FOSDEM talk is salvageable as discussed above)

[14:16] <jnthn> raiph: no, only did it the one time at fosdem

[14:16] *** bluescreen10 joined
[14:16] <jnthn> today's was recorded fwiw.

[14:16] <vendethiel> nice o/

[14:17] <jnthn> hopefully well...I wore a mic 

[14:17] <vendethiel> How was the Python perl6 grammar called ? I thought it was snake

[14:18] <jnthn> I thought snake too

[14:18] <jnthn> https://github.com/arnsholt/snake

[14:18] <vendethiel> yeah, thanks. Github didn't yield any result.

[14:18] <vendethiel> (and had no "Perl" in the language list ...)

[14:19] *** molaf joined
[14:21] <vendethiel> One more future-perl6er, I guess :]

[14:23] <raiph> jnthn: I would love to see you get a nice break from P6ing, but from the POV of having a longer video to point folk to, a well recorded "Perl 6: what can you do today?" talk this year by you, perhaps with some concurrency too, would be very useful :)

[14:25] <jnthn> raiph: Yeah. Wonder how to arrange it...

[14:25] <jnthn> coffee, bbl

[14:26] <colomon> does IO::Notification actually work today?!

[14:26] <[Coke]> -1 on showing junctions first. (people always want to poke at the internal values, which is a no no)

[14:27] <FROGGS> [Coke]: for perlers I'd show sub signatures and multiple dispatch

[14:27] <moritz> show roles!

[14:27] <FROGGS> that would be like a wow... WOW!!

[14:27] <masak> jnthn! \o/

[14:28] <jnthn> oh, my bad, lightning talks...

[14:28] <jnthn> :)

[14:28] <jnthn> colomon: Yes, all that code works today. :)

[14:28] <colomon> \o/

[14:28] <colomon> jnthn++ indeed!

[14:28] <jnthn> Yes, I really did write a partial GTK binding on the train to the Netherlands.

[14:28] <FROGGS> hehe

[14:28] <colomon> jnthn: I haven't gotten that far yet….

[14:28] <FROGGS> nice :o)

[14:29] <jnthn> oh, sorry for spoiling the surprise :P

[14:29] * colomon thinks we need to figure out how to get jnthn to take more train rides.  ;)

[14:29] <Ulti> buy a model railway...

[14:30] <jnthn> Well, needs to be a train ride with power and preferably internets :)

[14:30] <jnthn> So you can't just send me off on the Trans-Sib...unless it gained power sockets since I last did it :)

[14:30] <masak> vendethiel: arnsholt/snake is still very early days, I'm afraid.

[14:30] <masak> vendethiel: I have vowed to add indentation parsing and a test suite... but haven't gotten that far yet. :/

[14:31] <jnthn> masak: Would it help if we badger you more about it? :)

[14:32] <jnthn> masak: Or give you mushrooms, maybe?

[14:32] <colomon> Ulti: I have a very small, very simple, very desperately in need of scenary work, model railway.

[14:32] <masak> jnthn: aaaaaaaah!

[14:33] <colomon> jnthn: GTK::Simple not yet in ecosystem?

[14:33] * masak .oO( have to make do with GTK::Complicated... )

[14:33] <jnthn> colomon: No, I was wondering if I might delekate that

[14:33] <moritz> then I'll contribute a GTK::Weird

[14:33] <jnthn> uh, delegate

[14:34] <btyler> jnthn++ # just read the reactive programming slides. so cool!

[14:35] <masak> jnthn: sounds like a delekate problem

[14:35] <masak> btyler: url?

[14:35] <jnthn> masak: a defekate problem would be crappier...

[14:35] <btyler> masak: from about 20 minutes ago here: http://jnthn.net/papers/2014-nlpw-reactive.pdf

[14:35] <masak> btyler++ # thanks!

[14:38] <jnthn> masak: You get to see it live next month anyway :)

[14:41] <colomon> jnthn: oh, the GTK::Simple code is already up at perl6-reactive-samples.  nice.

[14:41] <jnthn> yes :)

[14:42] <colomon> is there a way to make a module owned by the perl6 organization on github?

[14:43] <moritz> colomon: yes, you can transfer ownership

[14:43] <moritz> or I can create a fork into the perl6 organization

[14:43] <colomon> hmmm… # definitely would not want to personally own a GTK::Simple module, but….

[14:43] <moritz> colomon: or I can create a new git repo for you, if you want

[14:43] *** chenryn joined
[14:43] <jnthn> yes, I can contribute more to it, but I own enough things ;)

[14:44] <colomon> I think group ownership is best for something like this, at least if you don't want it personally.

[14:44] * colomon is more than willing to let moritz++ do all the work so colomon can $work.  ;)

[14:44] <moritz> also for modules that have been abandonded by their previous owners

[14:44] <moritz> colomon: repo name? perl6/gtk-simple ?

[14:44] <colomon> sounds good

[14:44] <jnthn> wtfm

[14:44] <jnthn> I'm not attached to the name GTK::Simple either

[14:45] <jnthn> Though it...does make for simple code :)

[14:45] <tadzik>  is there any reason why it should be ::Simple?

[14:45] <tadzik> do we have a regular Gtk?

[14:45] <tadzik> LWP::Simple was simple at first, but then more and more features got it, and it isn't any simple now :)

[14:46] <jnthn> Well, given it uses supplies for all the events, Gtk::Reactive isn't a bad name either

[14:47] <jnthn> but doing it *without* supplies is probably not very idiomatic Perl 6 ;)

[14:47] <moritz> https://github.com/perl6/gtk-simple created for your convenience

[14:48] <moritz> tadzik: we can have a module Gtk.pm6 in the gtk-simple repo, and rename the repo once it stops being simple :-)

[14:48] <vendethiel> [Coke]: why not show junctions first ? Why not show them that, finally in 2014, you can say `$a == 1 | 2` ?

[14:48] <moritz> [Coke]: then the next quextion is 'given 1|2, how do I extract the values?'

[14:48] <moritz> sorry, meant vendethiel 

[14:49] <vendethiel> moritz: no, it's not. They don't see it as a value

[14:49] <moritz> vendethiel: and then you link them to http://faq.perl6.org/#eigenstate

[14:49] <vendethiel> yeah, I've seen that already, but I'm not linking anybody to that.

[14:49] <moritz> vendethiel: well, it's been a FAQ in here

[14:49] *** rindolf left
[14:49] <vendethiel> if they ask do ask "how do I extract the values", I say "use an array instead".

[14:50] <vendethiel> s/ask do/do/

[14:52] <vendethiel> (with any(@ari), that is)

[14:57] <timotimo> an array or a set

[14:57] <vendethiel> sure, but that's out of my point here (point itself being in the faq too)

[14:57] * timotimo is reading the slides and is a bit giddy

[14:58] <masak> jnthn++ # http://jnthn.net/papers/2014-nlpw-reactive.pdf is awesome

[14:58] *** rindolf joined
[14:58] <masak> jnthn: so, you took the best bits of Rx, and ported them to Perl 6? :)

[14:59] <jnthn> And TimToady gave us some nice names for things :)

[14:59] <jnthn> Still some combinators to go :)

[15:03] <tadzik> hmm

[15:03] <timotimo> there's something funny about writing "$source.changed.unchaged(1)"

[15:03] <tadzik> so now I just have to port MIDI to Perl 6 and I can rewrite my bachelor's code in Perl 6 :)

[15:03] <jnthn> timotimo: hehe :)

[15:03] <jnthn> unchanged is one of those names TimToady is likely to twiddle anyway

[15:03] *** erkan left
[15:03] <colomon> tadzik:  hmmm.....

[15:04] <tadzik> and use all the nice threading things

[15:04] <masak> tadzik: please please port MIDI to Perl 6

[15:04] *** denis_boyun left
[15:05] <masak> tadzik: I promise that if you do, we'll have the awesomest lightning talk together that ever lightning-talked.

[15:05] <tadzik> hmmmm

[15:05] <masak> synthesizer on stage anyone?

[15:05] <timotimo> jnthn: i don't know why i'm even surprised, but that talk seems pretty darn awesome

[15:05] <jnthn> :D

[15:05] <tadzik> ha :)

[15:05] <timotimo> thank you so much!

[15:05] <tadzik> well, I mostly need MIDI for parsing midi streams

[15:05] <jnthn> masak: ooh, #perl6 band? :)

[15:10] <masak> "Camelia and the wailers"

[15:12] <FROGGS> the first album will be called "Anonymous Monk"

[15:13] <colomon> +1

[15:13] <jnthn> haha

[15:14] <masak> I'd like to see an album called "Swiss Army Chainsaw"

[15:16] * colomon dreams of a tune called "NYI"

[15:17] <jnthn> Or "==SORRY!==" :)

[15:17] <masak> jnthn: :)

[15:17] <masak> we should make a list of these album titles.

[15:18] <jnthn> And, in one of my favorite errors: "Unmarshallable object" :)

[15:18] <masak> moritz: hah! we could have one called "RT #58392" :P

[15:18] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=58392

[15:18] <masak> clearly that will be an album from the "angry era"...

[15:19] <masak> you young'uns have no idea what I'm talking about... :P

[15:19] <jnthn> I hope that isn't the closure bug :P

[15:19] <btyler> speaking of music, I went to a javascript meetup last night and someone was doing live-coding music improv using http://yaxu.org/tidal/ (a haskell dsl). seems to me that nativecall + slangs could make for some really fun bindings to different sound libs

[15:19] *** [Sno] left
[15:19] <jnthn> oh my, it is...

[15:20] <masak> of course it is.

[15:20] <masak> btyler: indeed.

[15:20] <masak> btyler: which is yet another reason we need slangs ASAP for world dom^W^Woptimized for fun.

[15:21] * colomon is going to try rakudobrew on his MBP

[15:24] <colomon> Unhandled exception: While looking for 'ModuleLoader.moarvm': no such file or directory

[15:24] <colomon>    at <unknown>:1  (src/vm/moar/stage0/nqp.moarvm::7)

[15:24] <colomon> make: *** [gen/moar/stage1/nqpmo.moarvm] Error 1

[15:24] <colomon> tthat's a new one for me

[15:27] <vendethiel> m: sub f($l) {    return() if $l <= 0;    say "entering $l";    for 1..3 {        f($l-1);        say "looping in $l";    }}; f(2);

[15:27] <camelia> rakudo-moar 1ae0b2: OUTPUT«entering 2␤entering 1␤looping in 1␤looping in 1␤looping in 1␤looping in 2␤entering 1␤looping in 1␤looping in 1␤looping in 1␤looping in 2␤entering 1␤looping in 1␤looping in 1␤looping in 1␤looping in 2␤»

[15:28] <jnthn> pub &

[15:28] <colomon> rakudobrew doesn't handle the failure well at all, if I try to do rakudobrew build moar again after the above failure 

[15:28] <colomon> it it claims moar is already built.

[15:29] <colomon> pub++

[15:29] *** kaare_ left
[15:36] *** _sri left
[15:40] *** FROGGS left
[15:42] *** bluescreen100 joined
[15:46] *** bluescreen10 left
[15:46] *** _sri joined
[15:51] *** kaleem joined
[15:52] <raydiak> mornin

[15:57] *** grondilu joined
[15:58] <dalek> rakudo-star-daily: e93fd22 | coke++ | log/ (5 files):

[15:58] <dalek> rakudo-star-daily: today (automated commit)

[15:58] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/e93fd22952

[15:58] <grondilu> so I receive a mail telling me that I've automatically been subscribed to https://github.com/perl6/gtk-simple but it appears to be just a placeholder.  So yeah, lol.  Question though:  will it depend on NativeCall (it does not work on my machine)?

[15:59] <timotimo> it does depend on that

[15:59] <[Coke]> Do you have a ticket open for nativecall not working?

[16:00] <grondilu> there's issue #21 already:  https://github.com/jnthn/zavolaj/issues/21

[16:00] <arnsholt> Yeah

[16:00] <arnsholt> Have you tried wrapping some code, BTW?

[16:01] *** donaldh joined
[16:01] <grondilu> not sure what you mean.

[16:03] <arnsholt> I suspect it might be a test bug, rather than an implementation bug

[16:04] <grondilu> oh

[16:05] <donaldh> Since it's Friday, here's "Hello world!". In async socket IO.

[16:05] <donaldh> IO::Socket::Async.listen('localhost', 4000).tap(-> $c { $c.send("Hello world!\n"); $c.close() });

[16:06] <timotimo> \o/

[16:06] <timotimo> jnthn: is there a clever way to abort the eval in the golf helper if it gets replaced?

[16:06] <timotimo> especially if you accidentally an infinite loop?

[16:07] *** zakharyas left
[16:08] <colomon> tadzik: rakudo moar will not build for me under rakudobrew on my MBP, it works fine if I build it by hand.  (parrot on rakudobrew works fine on the MBP, moar on rakudobrew works fine on my Linux box.)

[16:09] <raiph> jnthn++ # awesome reactive presentation

[16:09] <raiph> jnthn: possible improvements: typo? "thread safely" -> "thread safety"; "UI events are exposed as live supplies (since the events happen whether they are tapped or not)" -> "Live supplies rather than on-demand (since the events happen whether they are tapped or not)"; "This means many things can tap a given event" -> "Many things can tap a given ev

[16:09] <raiph> ent" (unless this is really due to "live" aspect)

[16:10] <grondilu> arnsholt: oh you seem to be write.  I change 'long value' to 'long long value' and now the test pass.

[16:10] <grondilu> s/write/right/  # what an awful typo

[16:10] *** denis_boyun_ joined
[16:11] <grondilu> but should the code somehow work also with 'long value' anyway?

[16:11] <grondilu> s/should/shouldn't/

[16:12] * grondilu is talking about line 39 of 05-arrays.c

[16:12] <dalek> nqp/async_ops: 4872cf7 | (Donald Hunter)++ | src/vm/jvm/runtime/org/perl6/nqp/ (2 files):

[16:12] <dalek> nqp/async_ops: First cut at timer cancelling on JVM.

[16:12] <dalek> nqp/async_ops: review: https://github.com/perl6/nqp/commit/4872cf728d

[16:12] <dalek> nqp/async_ops: 704c5c6 | (Donald Hunter)++ | src/vm/jvm/runtime/org/perl6/nqp/ (3 files):

[16:12] <dalek> nqp/async_ops: WIP async read, write ops on JVM.

[16:12] <dalek> nqp/async_ops: review: https://github.com/perl6/nqp/commit/704c5c62ae

[16:12] *** FROGGS joined
[16:13] *** kaleem left
[16:15] <TimToady> surely "unchanged" should be something more like "stable"

[16:16] <TimToady> backing negatives into a name is almost always an ungood idea

[16:16] <TimToady> *baking

[16:16] <TimToady> another bad taipeaux

[16:17] <TimToady> well, the x is probably x-cessive

[16:17] <btyler> unless not unchanged { } ... else { ... }

[16:18] <vendethiel> .changed(:debounce(1)) ?

[16:18] <vendethiel> or :throttle maybe

[16:18] <timotimo> maybe even "stabilize"

[16:19] <FROGGS> unless ... { ... } elsif ... { ... } continue { ... } *shudder*

[16:19] <FROGGS> but it could be worse, it could be PHP or Java

[16:27] <raydiak> heh...OT but amusing...how to tell if something is true or false in PHP: http://php.net/manual/en/types.comparisons.php

[16:28] <FROGGS> that files under the category: if you have to make a table, there is something wrong

[16:29] <timotimo> see also the periodic table of operators :P

[16:29] <vendethiel> bashing php ? what is this, 2006 :-) ?

[16:30] * vendethiel last bashed PHP this afternoon - but in a room full of php devs, it's hard not to :p

[16:30] <timotimo> poor php devs

[16:33] * raydiak is still reading comments on that page and chuckling

[16:34] <grondilu> here is the patch of my local modifications of NativeCall's test suite.  https://gist.github.com/grondilu/11295465  I basically replaced all 'long' in structures with 'long long'.  It made all tests pass.

[16:34] <timotimo> i like how the == thing with strings that look like numbers is fixed in perl 6 in two different ways at the same time

[16:34] <timotimo> first, we have eq, second we have infinite-sized ints.

[16:36] <masak> +1 on "stable"

[16:37] *** Khisanth left
[16:37] <vendethiel> well, I think I can resume one of the biggest warts of php with `assert(in_array(array('7.10'), '7.1'))`

[16:37] *** pecastro left
[16:38] *** ajr_ left
[16:41] * vendethiel thinks having separate operators for separate operations is good

[16:41] *** kurahaupo joined
[16:42] <timotimo> that's for substring containment?

[16:42] <vendethiel> timotimo: no, that checks if a value is an array(/list)

[16:42] <vendethiel> but it does coerce, even if both of them are strings already. go figure ...

[16:43] <timotimo> er, what now?

[16:43] <timotimo> this checks what is an array?

[16:43] <vendethiel> I'm afraid you got PHP'd.

[16:43] <raydiak> checks what is *in* an array

[16:43] <vendethiel> Yes, in_array checks whether the 2nd argument if in the first

[16:44] <vendethiel> is in* the first (the first being an array)

[16:44] <timotimo> ah. that makes more sense

[16:44] <vendethiel> but PHP decides to coerce both operands when comparing it seems, even if they have the same type

[16:44] <timotimo> so you have to coerce the first argument to an array if it's a string, but the second one gets coerced for you?

[16:45] <vendethiel> No, you just use in_array like `any(('7.10', '3')) == 5`

[16:45] <vendethiel> (would be in PHP `in_array(array('7.10', '3'), 5)` - in_array isn't for substring containment. if you want to check substring containment in php, you gotta use strpos)

[16:45] <huf> no it wouldnt

[16:46] <huf> in_array is needle,haystack

[16:46] <huf> and the default is the insane incomprehensible php-ish loose comparison which does whatever the hell it wants

[16:46] <huf> perturbed by leap seconds for all i know

[16:46] <vendethiel> oh yeah, that's strpos which has parameters the other way around :-)

[16:46] <huf> there's an optional boolean 3rd parameter to make it compare strictly

[16:46] <vendethiel> I can never remember the order, for there's *no* order.

[16:46] <huf> because *that* is such a wonderful idea...

[16:46] <timotimo> boolean arguments are great

[16:47] <timotimo> they are always so clear in their meaning

[16:47] <huf> true, true, true, false, null, true true

[16:47] <vendethiel> that's where perl6 shines :-)

[16:47] <timotimo> especially since you've gotten rid of named arguments

[16:47] <timotimo> because they make code harder to understand

[16:47] <timotimo> well

[16:47] <timotimo> they would, if you had them

[16:47] <timotimo> but you don't have them. you've abolished them. you never put them in. and look how your lovely code shines now <3

[16:48] <huf> ha! function x($_) { extract($_); .... } # named params!

[16:48] <huf> just to bring up another god-awful feature

[16:48] *** [Sno] joined
[16:48] *** molaf left
[16:49] <timotimo> does extract do what i fear it does?

[16:50] <huf> creates a bunch of vars from the k/v of the so-called array

[16:50] <huf> also has some random flag options to control how it clobbers your shit

[16:50] <timotimo> i'm quite glad lexpads are frozen at compile-time in perl6

[16:51] <vendethiel> that's why :abc is sooo much better

[16:52] <vendethiel> m: sub defau(:$!lt) { say $lt }; defau();

[16:52] <camelia> rakudo-moar 1ae0b2: OUTPUT«===SORRY!===␤Could not locate compile-time value for symbol $?CLASS␤»

[16:52] <vendethiel> that's an, uh, interesting error.?

[16:52] <vendethiel> oh, okay

[16:52] <timotimo> ah, yes

[16:52] <timotimo> that ought to be more helpful

[16:52] *** Khisanth joined
[16:53] <vendethiel> m: sub defau(:!$lt) { say $lt }; defau();

[16:53] <camelia> rakudo-moar 1ae0b2: OUTPUT«===SORRY!=== Error while compiling /tmp/NuqoayPDmU␤Malformed parameter␤at /tmp/NuqoayPDmU:1␤------> sub defau(⏏:!$lt) { say $lt }; defau();␤    expecting any of:␤        statement list␤        prefix or te…»

[16:53] <timotimo> that seems to happen inside the optimizer

[16:53] <vendethiel> well, I get that it sees $! as a class thingie, but erm

[16:54] <timotimo> nope, it does ot.

[16:54] <timotimo> yes, it does

[16:54] <timotimo> it should warn you that you're using $! variables where no class is available

[16:54] *** SamuraiJack_ left
[16:54] * timotimo is working on a fix already :)

[16:55] *** chenryn left
[16:56] <FROGGS> "Weird-ish use of class private variable outside of a class"

[16:56] <FROGGS> or, in proper english or so

[16:56] <FROGGS> damn, I don't even know how to brane

[16:56] *** SamuraiJack joined
[16:58] <timotimo> cannot use a $! parameter in a signature where no $?CLASS is available

[16:58] <timotimo> ------> sub defau($!lt⏏) { }

[16:58] <vendethiel> timotimo++

[16:59] <vendethiel> erm, I remember a debate here to decide whether `abc(1..10)` should smartmatch or match a range ?

[16:59] <timotimo> i'll clean up the code and put it up

[16:59] <timotimo> why would abc(1..10) smartmatch anything?

[16:59] <vendethiel> sub abc*

[16:59] <timotimo> oh

[17:00] <timotimo> hm. the cleaner code didn't fly

[17:01] *** SamuraiJack left
[17:02] <timotimo> since it doesn't take long at all, i can just as well go ahead and do a spectest run with the change :P

[17:03] <timotimo> actually. nah.

[17:03] <dalek> rakudo/nom: 440739c | (Timo Paulssen)++ | src/Perl6/Actions.nqp:

[17:03] <dalek> rakudo/nom: nice error if $?CLASS isn't there around signatures

[17:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/440739c18f

[17:03] *** SamuraiJack joined
[17:07] <timotimo> does anybody have an idea how to have something like start { try EVAL .text } have a timer that'd abort the evaluation in case of stuff like infinite loops and such?

[17:08] *** hoverboard joined
[17:09] <tadzik> colomon: how does it fail?

[17:10] <timotimo> is there a way for NativeCall to refer to symbols inside the current application?

[17:10] <colomon> tadzik: give me a moment

[17:11] <retupmoca> timotimo: maybe just "is native is symbol('foo')" ?

[17:12] <timotimo> hmm, how to best try this?

[17:14] <timotimo> ah, i could abuse MVM_vm_create_instance

[17:14] <raydiak> timotimo: one way to do a promise timeout: http://perlcabal.org/syn/S17.html#line_320

[17:15] <colomon> tadzik: OH

[17:16] <arnsholt> timotimo: is native(Str) will let you look up symbols in the current executable

[17:16] <arnsholt> What're you trying to do?

[17:16] <colomon> tadzik: and that time it worked.  stupid computers.

[17:16] <timotimo> oh, cool

[17:16] <timotimo> just pass an undefined string?

[17:16] <retupmoca> is native does the same thing as is native(Str)

[17:16] <retupmoca> you don't need the (Str) at the end

[17:17] <timotimo> i want to embed a moarvm in a program and offer C functions to be called to the perl6 program i'm embedding

[17:17] <raiph> .tell lue http://blog.gatunka.com/2014/04/25/character-encodings-for-modern-programmers/

[17:17] <yoleaux> raiph: I'll pass your message to lue.

[17:17] <colomon> when it failed, it looked like http://irclog.perlgeek.de/perl6/2014-04-25#i_8637865

[17:17] <colomon> tadzik: ^^

[17:19] <tadzik> oddness

[17:19] <tadzik> curious though, how building it manually is any different than building on rakudobrew

[17:20] <arnsholt> timotimo: Right. In that case, just exposing them with unadorned is native is probably the right thing, yeah

[17:20] *** SamuraiJack left
[17:20] <timotimo> cool.

[17:20] *** ssutch joined
[17:21] <arnsholt> What're you embedding Moar in, OOC?

[17:21] <timotimo> huh

[17:21] <timotimo> i'll perhaps have something to show at some point, or abandon the program :P

[17:21] <timotimo> it's mostly a program that wants to load scripts and run them, replacing the VM each time

[17:22] <vendethiel> m: sub foo(%foo, :$when) { say :%foo.perl; say :$when.perl; }; foo(a => 1, when => 2);

[17:22] <camelia> rakudo-moar 1ae0b2: OUTPUT«Not enough positional parameters passed; got 0 but expected 1␤  in sub foo at /tmp/zDgc8USZdG:1␤  in block  at /tmp/zDgc8USZdG:1␤␤»

[17:23] <vendethiel> m: sub foo(%foo, :$when) { say :%foo.perl; say :$when.perl; }; foo({a => 1}, when => 2);

[17:23] <camelia> rakudo-moar 1ae0b2: OUTPUT«"foo" => {"a" => 1}␤"when" => 2␤»

[17:23] *** donaldh left
[17:23] <timotimo> you probably want () around the colon pairs there

[17:23] <colomon> tadzik: huh, now the rakudo moar I built isn't working correctly.

[17:23] * grondilu realises there actully is a int32 native type in Perl 6

[17:23] <vendethiel> timotimo: {} is fine too :-)

[17:23] <timotimo> m: sub foo(%foo, :$when) { say (:%foo).perl; say (:$when).perl; }; foo(a => 1, when => 2);

[17:23] <colomon> > rakudobrew build-panda

[17:23] <camelia> rakudo-moar 1ae0b2: OUTPUT«Not enough positional parameters passed; got 0 but expected 1␤  in sub foo at /tmp/kU_owRHqX4:1␤  in block  at /tmp/kU_owRHqX4:1␤␤»

[17:23] <colomon> Missing or wrong version of dependency 'gen/moar/stage2/QRegex.nqp'

[17:23] <timotimo> er, oops :)

[17:23] <timotimo> i was reading that wrong

[17:24] <vendethiel> timotimo: also, no, I don't want () around those :)

[17:24] <vendethiel> I thought you meant in the call

[17:24] <vendethiel> m: my $a = 5; say (:$a).perl; say :$a.perl;

[17:24] <camelia> rakudo-moar 1ae0b2: OUTPUT«"a" => 5␤"a" => 5␤»

[17:24] <vendethiel> m: my $a = "something quoted here"; say (:$a).perl; say :$a.perl;

[17:24] <camelia> rakudo-moar 1ae0b2: OUTPUT«"a" => "something quoted here"␤"a" => "something quoted here"␤»

[17:25] <timotimo> yay, this just segfaults \o/

[17:25] <timotimo> so i can't really tell if i'm doing it right, but it's gonna be all right

[17:28] <arnsholt> Hehe

[17:28] <arnsholt> When I started programming C I was always dismayed at segfaults

[17:29] <arnsholt> Now I'm usually pretty pleased when things segfault, since they're generally quite straightforward to debug =)

[17:29] <colomon> arnsholt: amen

[17:33] <raiph> https://stripe.com/blog/stripe-open-source-retreat # the one (and only) project I can see that I think matches their grant criteria is libperl-embedded-in-moarvm P5 interop for Rakudo/MoarVM

[17:37] *** flussence joined
[17:38] <grondilu> updated version of the patch to have NativeCall's tests pass on 32bits:  https://gist.github.com/grondilu/11295465   Here I changed 'int' to an explicit 'int32'.

[17:38] *** guru joined
[17:39] *** guru is now known as ajr_

[17:39] <grondilu> (the C-files don't need to be modified with this)

[17:40] <grondilu> what I don't get is why 'int' is not a synonym to 'int32' on 32bit systems.  That would make more sense.

[17:41] <ajr_> gronedilu: 12:34:58 would be the Chinese pianist fix. :-)*

[17:41] <nwc10> jnthn: what was that about *modern* OSes providing notification of changes to files?

[17:42] <arnsholt> grondilu: Could be a Moar bug, even. It might use Moar's default integer type, which might be 64 bit

[17:42] <nwc10> jnthn: I think that MacOS Classic did it, and I know that RISC OS did: OMG a value! Do something! 

[17:42] <nwc10> oops

[17:42] <nwc10> did: https://www.riscosopen.org/wiki/documentation/show/OS_UpCall%203

[17:42] <arnsholt> grondilu: And that patch'll break the tests on 64-bit systems =)

[17:42] <nwc10> or arguably "does"

[17:42] <raiph> rakudo debugger bug "Crash when code to highlight includes a completely blank line" (https://github.com/jnthn/rakudo-debugger/issues/19) now includes my candidate for a fix.

[17:46] <[Coke]> yay, rakudo.jvm daily run should be back to normal today.

[17:46] *** cognominal left
[17:47] <[Coke]> It'd be great if someone could open tickets for the few concurrency failures that are still there.

[17:47] <colomon> tadzik: so now build moar appears to work, but build-panda fails

[17:47] *** cognominal joined
[17:48] <tadzik> how?

[17:48] *** kurahaupo left
[17:49] *** kurahaupo joined
[17:49] <colomon> Already up-to-date.

[17:49] <colomon> Missing or wrong version of dependency 'gen/moar/stage2/QRegex.nqp'

[17:49] <colomon> hmmm

[17:50] <colomon> okay, build moar "appears to work" is key, the install is still borked

[17:52] <grondilu> arnsholt: could it be line 15 of nqp/MoarVM/src/6model/reprs/P6int.c?  There is a MVMint64 mention that seems quite arbitrary.

[17:54] *** denis_boyun_ left
[17:57] <grondilu> ah no it seems to be used as such quite a bit so it's more complicated than I thought I guess.  

[17:59] *** denis_boyun joined
[18:02] *** anaeem1 joined
[18:03] *** benabik joined
[18:06] <masak> *sigh* -- no wonder Python people don't have any qualms making fun of Perl. Guido makes Perl the butt of a joke in his PyCon keynote...

[18:07] <arnsholt> grondilu: Actually, I think this might be a problem on all backends

[18:07] <arnsholt> Now that I think about it, it's coming back to me

[18:08] <arnsholt> NativeCall really wants int to correspond to C int, but the rest of Perl 6 often doesn't

[18:08] <moritz> masak: funny enough, $coworker (who is a python dev) complained to me that there are too many options to do OO stuff in python, and he can't learn them all

[18:08] <moritz> multi inheritance, method decorators, class decorators, meta classes, dunno what else

[18:09] <moritz> and often he has trouble finding where stuff is actually implemented

[18:10] <masak> Guido also pleads with the audience to try out Python 3.x, and to please help things forward so that the switch will gradually happen.

[18:13] <masak> "Basically, all the people who can review the patch are already very busy. So the question is how we can grow that core." -- sounds familiar. :)

[18:13] <btyler> masak: the concluding paragraph of the (1600+ page) Programming Python book is a joke at perl's expense. this one: https://www.python.org/doc/humor/#python-vs-perl-according-to-yoda

[18:13] <btyler> so it seems to be Official Canon

[18:15] <masak> I'm not saying it doesn't happen in the other direction, but... not as much, I would say.

[18:15] <masak> there's something interesting psychologically going on there.

[18:15] <masak> almost as if Python people *need* to say "we're not Perl", but Perl people don't need to say "we're not Python".

[18:15] * masak .oO( as to PHP, however... )

[18:16] <lue> hello o/

[18:16] <yoleaux> 17:17Z <raiph> lue: http://blog.gatunka.com/2014/04/25/character-encodings-for-modern-programmers/

[18:16] <masak> hellue \o

[18:22] <dalek> perl6-roast-data: e19395d | coke++ | / (6 files):

[18:22] <dalek> perl6-roast-data: today (automated commit)

[18:22] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/e19395d3e1

[18:22] <nwc10> masak: it often seems to me that many Python folks define their identity as "not Perl". Concentrating as much on what they are not as what they are. Which seems a strange way to prioritise things

[18:23] *** denis_boyun left
[18:23] *** dmol left
[18:24] <masak> nwc10: maybe in some way, the seed of that was sown when Guido decided to create Python in the first place, and *already knew about Perl*.

[18:25] * grondilu watches Van Rossum's keynote:  https://www.youtube.com/watch?v=0Ef9GudbxXY   First Perl joke at 11'10''

[18:25] <nwc10> possibly

[18:26] <grondilu> (followed by a round of applause)

[18:26] <nwc10> I wonder if it also makes it hard, if you define yourself as what you are against, because that thing seems to be bigger/endemic/"the establishment"

[18:26] <vendethiel> Coming back to what I talked about earlier : I literally have a school full of "apprenctice PHP developers"(also c) I'd sure as hell like to do something

[18:26] <nwc10> and then the empire crumbles

[18:26] <masak> grondilu: that's the one I referred to.

[18:27] <nwc10> and now what are you rebelling against?

[18:27] <vendethiel> Most of them seem to like web - the other part is apparently fixated on their language, even if they don't always know why - so I'd be glad to have stuff to introduce them to better stuff - may it be perl6 or anything else

[18:27] <masak> oh, there's another one at around 33:23.

[18:27] <nwc10> "also c" as in "also C" as in that rather useful language for writing fast but subtly insecure code?

[18:27] <masak> a *Perl 6* joke, no less.

[18:28] <nwc10> where's the stuff about Python 3?

[18:28] *** kurahaupo left
[18:28] <vendethiel> nwc10: "also C" as in, they're also c apprentice devs.

[18:28] <nwc10> aha.

[18:29] <masak> ok, so at least now we know how to make Guido sleep bad :P

[18:29] <masak> speaking of which...

[18:29] <vendethiel> masak: so, it really was in a pejorative way :)

[18:29] <grondilu> masak: I remember a GVR talk where he mentioned Perl 6 twice in the first five minutes.  I thought that says something, don't know what exactly but it does say something.

[18:29] <masak> ...'night, #perl6

[18:30] *** Rotwang joined
[18:31] <vendethiel> but tbh, these really seem more like jokes than bashing

[18:33] <lue> I'm not surprised a Pythoner would make jokes :P

[18:34] <vaskozl> masak: night!

[18:35] <grondilu> an other Perl mention at 18:05, but not a joke at all.

[18:37] *** vendethiel left
[18:37] *** vendethiel joined
[18:39] <raydiak> lue++: thanks for the idea to put the perl6-bench test code next to the graphs, it definitely beats having to go dig it up yourself

[18:40] *** darutoko left
[18:40] <lue> raydiak: I would've been fine if, say, the header for the graph linked to it on github. :) Let me see the site...

[18:41] <raydiak> lue: http://cyberuniverses.com/perl6-bench/ is where I was working on it

[18:42] <hoelzro_> jnthn++ # awesome slides

[18:42] *** hoelzro_ is now known as hoelzro

[18:42] <hoelzro> I love the inter-commit tool

[18:42] <lue> raydiak: I notice some of them don't have [code] things, such as zero. Is this intentional?

[18:44] <raydiak> lue: a couple of them don't have strings where the test code is kept, so I just skip those ones; haven't investigated

[18:44] <raydiak> the last few have arrays instead of strings, and I think the first one had nothing but don't recall for sure

[18:45] <lue> OK then. I only saw the first test and the last couple of tests were missing them, from a very quick scroll-thru

[18:45] <raydiak> I just saw the test code in a data::dumper output, and used it...didn't pay much mind to where it comes from or where it goes :)

[18:45] <raydiak> those are the only ones

[18:45] <raydiak> so it seems more spotty than it is

[18:46] *** grondilu left
[18:47] <hoelzro> holy crap

[18:47] <hoelzro> this GTK thing is even better

[18:47] *** grondilu joined
[18:58] *** zakharyas joined
[19:03] *** arturo_ joined
[19:13] <raiph> raydiak++ # making the p6-bench results page so much more useful

[19:15] *** Rotwang left
[19:16] *** ssutch left
[19:17] *** ssutch joined
[19:22] *** baest joined
[19:35] <hoelzro> hmm...bailador on perl6-m does *not* care for concurrent requests =/

[19:36] *** kurahaupo joined
[19:37] <timotimo> hoelzro: it's kinda not easy to make that work in the same codebase as backends that lack these features :(

[19:37] <hoelzro> oh, I know

[19:37] <hoelzro> I'm not blaming =)

[19:37] <tadzik> hoelzro: it wasn't quite designed that way

[19:37] <timotimo> mhm

[19:37] <tadzik> back when I wrote it, concurrency was SF :P

[19:37] <hoelzro> hell, I think it's awesome that I'm getting 40 RPS =)

[19:37] <tadzik> :) nice

[19:38] <timotimo> and as soon as your program does things with data structures that may end up being shared between requests, you'll start cursing :)

[19:38] <hoelzro> I'm thinking of taking an application I wrote in Perl 5 and porting it

[19:38] <tadzik> I could probably make it thread-safe

[19:38] <hoelzro> most of the logic is in angular.js

[19:38] <timotimo> though it may be a nice start to make it use asynchronous sockets?

[19:38] <hoelzro> so this would be a good start

[19:39] <tadzik> the main problem would be that the context object is there all the time, modified on every request

[19:39] <tadzik> to save allocations and all that

[19:39] <hoelzro> is that PSGI-specific, or bailador-specfiic?

[19:40] <tadzik> bailador

[19:40] <hoelzro> maybe you could make it thread-local?

[19:40] <hoelzro> that doesn't help async socks, though =(

[19:40] <tadzik> psgi is not really implementation-bound 

[19:40] <tadzik> I think it's orthogonal

[19:40] <tadzik> well, m

[19:40] <tadzik> you probably want workers

[19:40] <tadzik> async sockets themselves don't solve much

[19:41] <hoelzro> well

[19:41] <timotimo> i suppose we really are cpu-bottlenecked due to rakudos inefficiencies here and there

[19:41] <hoelzro> I'm wondering why multiple concurrent requests mess with bailador

[19:41] <timotimo> (and with "here and there" i really mean "everywhere")

[19:41] <hoelzro> because shouldn't it just wait to accept() each client serially?

[19:42] <hoelzro> or maybe there's some concurrency madness going on?

[19:42] <tadzik> hoelzro: because the context object is shared

[19:42] <tadzik> and modified by each and every one of them

[19:42] <tadzik> and it breks it at some point

[19:42] <hoelzro> tadzik: but is bailador handling requests concurrently?

[19:43] <hoelzro> or rather PSGI

[19:43] <tadzik> nonono

[19:43] <tadzik> psgi is nothing about implementation

[19:43] <tadzik> bailador isn't, because when I wrote it, concurrency in p6 was a distant future

[19:43] <tadzik> so there was no need to bother with it at all

[19:43] <hoelzro> maybe I mean HTTP::Easy::PSGI, then

[19:43] <tadzik> maybe

[19:50] *** rindolf left
[19:51] <raydiak> fwiw, Pray concurrency branch also crashes under moar...I can't speak to the correctness of that code, don't even recall what it does/how it works atm, but it doesn't crash under jvm

[20:04] <dalek> nqp/loop_labels: 8ec9562 | (Andrew Egeler)++ | src/HLL/CommandLine.nqp:

[20:04] <dalek> nqp/loop_labels: Fix perl6 -pe 'stuff'

[20:04] <dalek> nqp/loop_labels: review: https://github.com/perl6/nqp/commit/8ec9562c88

[20:04] <dalek> nqp/loop_labels: b596f16 | (Tobias Leich)++ | tools/build/MOAR_REVISION:

[20:04] <dalek> nqp/loop_labels: bump moar rev for eof fix

[20:04] <dalek> nqp/loop_labels: review: https://github.com/perl6/nqp/commit/b596f16f9e

[20:04] <dalek> nqp/loop_labels: 47ab859 | (Tobias Leich)++ | / (2 files):

[20:04] <dalek> nqp/loop_labels: Merge branch 'master' of github.com:perl6/nqp into loop_labels

[20:04] <dalek> nqp/loop_labels: review: https://github.com/perl6/nqp/commit/47ab859399

[20:04] <dalek> nqp/loop_labels: 4738218 | (Tobias Leich)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[20:04] <dalek> nqp/loop_labels: implement labeled loops and next/redo/last LABEL for nqp itself on moar

[20:04] <dalek> nqp/loop_labels: 

[20:04] <retupmoca> http://modules.perl6.org/ seems rather...empty today O.o

[20:06] <dalek> nqp/loop_labels: 851cb6b | (Tobias Leich)++ | t/nqp/8 (2 files):

[20:06] <dalek> nqp/loop_labels: renumber test file because old num was taken

[20:06] <dalek> nqp/loop_labels: review: https://github.com/perl6/nqp/commit/851cb6b04e

[20:06] <FROGGS> damn, most of the commit msg isnt shown :/

[20:06] <FROGGS> jnthn: so we have loop labels on nqp-m and nqp-p now :o)

[20:08] *** telex left
[20:10] *** anaeem1 left
[20:10] *** telex joined
[20:13] *** rindolf joined
[20:15] *** kurahaupo left
[20:16] <raydiak> heh, so, like retupmoca said, what's up with modules.perl6.org? anyone have access to the error log for the cron job?

[20:24] <[Coke]> raydiak: you can probably grab a copy of the git source and try to build it, maybe you'll see it.

[20:24] <[Coke]> (I just tried, but am not in a position to install mojo5 atm)

[20:25] <raydiak> [Coke]: good idea, trying

[20:26] <colomon> wonder if it's running into the same problem I am with the module smoke results….

[20:29] *** raiph left
[20:30] <vendethiel> do we have a "complicated" URL parser ?

[20:31] <vendethiel> (I mean, able to extract URL parts and such)

[20:31] *** anaeem1_ joined
[20:33] *** treehug88 joined
[20:36] *** [Sno] left
[20:37] *** [Sno] joined
[20:43] *** skids joined
[20:44] *** anaeem1_ left
[20:46] <retupmoca> vendethiel: does URI do what you need?

[20:47] *** zakharyas left
[20:54] *** beastd joined
[20:55] *** hoverboard left
[20:58] <vendethiel> retupmoca: I don't "need" stuff, I'm looking for stuff to do :p

[20:58] *** Rotwang joined
[21:04] <vendethiel> retupmoca: no it doesn't

[21:05] <vendethiel> I mean, `extract('/page/5', ('/page/:id'))` would return `:id(5)`

[21:07] <retupmoca> Ah, that kind of extract

[21:07] *** BenGoldberg joined
[21:07] <vendethiel> could probably use URI's &segments tho

[21:12] *** treehug88 left
[21:14] <dalek> modules.perl6.org: e5af4fc | raydiak++ | web/lib/P6Project.pm:

[21:14] <dalek> modules.perl6.org: Allow HTTP redirection

[21:14] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/e5af4fc724

[21:14] <raydiak> that should fix it, I think

[21:15] *** dmol joined
[21:18] *** bluescreen100 left
[21:29] *** hoverboard joined
[21:30] *** bluescreen100 joined
[21:30] *** bowtie left
[21:31] <[Coke]> raydiak++

[21:32] <raydiak> thanks :)  hope it's actually fixed, can't entirely test due to some github api oauth token thing that I don't entirely understand

[21:35] *** bowtie joined
[21:45] *** dmol left
[22:02] *** btyler left
[22:04] *** denis_boyun_ joined
[22:06] *** btyler joined
[22:08] *** Rotwang left
[22:13] *** araujo left
[22:15] *** hoverboard left
[22:20] <timotimo> what conference was it where jnthn did his talk?

[22:21] *** bluescreen100 left
[22:22] *** denis_boyun_ left
[22:23] <breinbaas> today (friday) he was at NLPW in Utrecht, if that's what you mean

[22:24] <timotimo> that was probably the one i meant

[22:24] <timotimo> the one he gave the reactive programming talk on

[22:24] <timotimo> ah, it's even in the slide filename

[22:24] <breinbaas> yeah, that was today

[22:25] <timotimo> hoping the recording will be up soon :)

[22:38] *** aindilis joined
[22:40] *** bjz left
[22:43] *** cognominal left
[22:44] *** cognominal joined
[22:47] *** rindolf left
[23:03] *** ssutch left
[23:04] *** ssutch joined
[23:06] *** araujo joined
[23:06] *** araujo left
[23:06] *** araujo joined
[23:07] *** spider-mario left
[23:08] *** ssutch left
[23:09] <timotimo> i think in order to chill out a bit i shall build a little nibbles in perl 6

[23:09] <timotimo> but not right now, i don't think

[23:09] *** btyler left
[23:11] <raydiak> with 45 degree angles?

[23:12] <timotimo> i was going to build it with ascii art, actually

[23:12] <timotimo> so that wouldn't be very easy to properly do

[23:12] <raydiak> correct

[23:13] <raydiak> hey, you got '/' and '\', right?  good to go...

[23:13] <timotimo> hah

[23:13] <timotimo> yeah, but i was hoping to use half blocks for the graphics

[23:13] <timotimo> and then slashes and backslashes would look very out of place

[23:14] <raydiak> you could include a custom font, and...

[23:15] <timotimo> yeah right :)

[23:15] <raydiak> or...um...you could raytrace each frame :)

[23:16] <raydiak> guess I'm in a nonsensical mood

[23:16] <timotimo> :)

[23:16] *** donaldh joined
[23:17] <BenGoldberg> m: for (0x0_0000 .. 0x1_0000) { my $n = uniname $_; say .base(16), " ", $n, " ", .chr, ";" if $n ~~ /<<BLOCK>>/ and $n ~~ /<<LEFT>>/; }

[23:17] <camelia> rakudo-moar 440739: OUTPUT«2589 LEFT SEVEN EIGHTHS BLOCK ▉;␤258A LEFT THREE QUARTERS BLOCK ▊;␤258B LEFT FIVE EIGHTHS BLOCK ▋;␤258C LEFT HALF BLOCK ▌;␤258D LEFT THREE EIGHTHS BLOCK ▍;␤258E LEFT ONE QUARTER BLOCK ▎;␤258F LEFT ONE EIGHTH BLOCK ▏;␤»

[23:17] <BenGoldberg> You can use quarter and eighth blocks for the graphics ;)

[23:17] <timotimo> .o( we can now do that without a timeout! )

[23:18] * BenGoldberg blinks

[23:18] <BenGoldberg> yeah, it was faster, wasn't it

[23:18] *** donaldh left
[23:24] <timotimo> aren't there supposed to be upper half blocks as well?

[23:24] *** adu joined
[23:24] *** beastd left
[23:26] <raydiak> .u ▀

[23:26] <yoleaux> U+2580 UPPER HALF BLOCK [So] (▀)

[23:28] *** xenoterracide_ joined
[23:30] *** ajr_ left
[23:31] *** adu left
[23:39] <timotimo> m: say :16<2580>

[23:39] <camelia> rakudo-moar 440739: OUTPUT«9600␤»

[23:40] <timotimo> it's in that range still :\

[23:40] <timotimo> oh, there was an "and $n ** <<LEFT>>" in there

