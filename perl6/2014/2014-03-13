[00:04] *** thou left
[00:08] <timotimo> we can turn lexicals into locals if they are not used by any embedded blocks

[00:08] <timotimo> if we inline embedded blocks, more lexicals get eligible

[00:18] *** daxim joined
[00:22] *** itz_ joined
[00:23] *** adu left
[00:24] *** itz joined
[00:27] *** btyler joined
[00:29] *** yoleaux left
[00:29] *** _sri left
[00:29] *** atrodo left
[00:29] *** __sri joined
[00:29] *** adu joined
[00:29] *** yoleaux joined
[00:29] *** ChanServ sets mode: +v yoleaux

[00:31] *** btyler left
[00:33] *** pnu left
[00:33] *** pnu joined
[00:33] *** tokuhirom left
[00:34] *** tokuhirom joined
[00:34] *** pecastro left
[00:35] *** atrodo joined
[00:38] *** pdcawley joined
[00:39] *** brother left
[00:39] *** brother joined
[00:43] *** pdcawley left
[00:45] *** hoverboard left
[00:52] *** ribasushi left
[00:53] *** dylanwh left
[00:54] *** dylanwh joined
[00:58] *** ribasushi joined
[01:00] * skids tries to suss out how to maintain pod heirarchy while interspersing code.

[01:00] <timotimo> hmm

[01:01] <timotimo> =begin ambient / =end ambient

[01:02] <timotimo> theoretically

[01:04] <skids> Hmm.

[01:07] <skids> Currently that produces a Pod::Block::Named(:name<ambient>)

[01:08] *** PZt left
[01:10] <Mouq> skids: Uhhhhh

[01:10] <Mouq> :/

[01:10] <Mouq> sorry

[01:11] <Mouq> I don't think there's any way to do that

[01:11] <adu> timotimo: it sounds like you need more dataflow analysis

[01:11] *** treehug88 joined
[01:11] <JimmyZ> well, I'm like .ast too.

[01:12] * Mouq likes having both .ast and .made

[01:13] <JimmyZ> so -1 to deprecate .ast

[01:13] <Mouq> JimmyZ: Yes

[01:13] <Mouq> .ast makes a lot of sense when that's what you're building

[01:13] <JimmyZ> aye

[01:14] <Mouq> And if you're parsing something, I don't think it's pretty likely that you *will* be building asts

[01:14] <skids> Mouq: I don't even see that the spec defines a way to do that, though it does seem to say that pod is playing a "cpp"ish role and building the source for the compiler.

[01:14] <Mouq> On the other hand, ast doesn't make a whole lot of sense a lot of the time

[01:14] *** adu left
[01:15] <Mouq> Like this thing I posted last night: http://codegolf.stackexchange.com/a/23787/15012

[01:15] <Mouq> A reducing grammar like that (were that a grammar), doesn't make a whole lot of sense to say AST about

[01:16] <Mouq> So, yeah, -1 to deprecate .ast

[01:16] <Mouq> And +1 to .made

[01:17] <Mouq> skids: If you really need to, you can fake it :P

[01:18] *** hoverboard joined
[01:21] <Mouq> r: =begin pod‚ê§I really enjoy factorials‚ê§=end pod‚ê§say [*] 1..100‚ê§=pod‚ê§(Sometimes I mess up though)‚ê§‚ê§say [*] 0..100;‚ê§say $=pod.reduce(*.content ,= *.content); 

[01:21] <camelia> rakudo-parrot 5b109d, rakudo-jvm 5b109d, rakudo-moar 5b109d: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Two terms in a row‚ê§at /tmp/tmpfile:8‚ê§------> [32m<BOL>[33m‚èè[31msay [*] 0..100;[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        inf‚Ä¶¬ª

[01:22] <Mouq> r: =begin pod‚ê§I really enjoy factorials‚ê§=end pod‚ê§say [*] 1..100;‚ê§=pod‚ê§(Sometimes I mess up though)‚ê§‚ê§say [*] 0..100;‚ê§say $=pod.reduce(*.content ,= *.content); 

[01:22] <camelia> rakudo-parrot 5b109d: OUTPUT¬´93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000‚ê§0‚ê§can only reduce with arity 2‚ê§  in method gist at gen/parrot/CORE.setting:12402‚ê§  in m‚Ä¶¬ª

[01:22] <camelia> ..rakudo-jvm 5b109d: OUTPUT¬´93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000‚ê§0‚ê§can only reduce with arity 2‚ê§  in method gist at gen/jvm/CORE.setting:12381‚ê§  in method ‚Ä¶¬ª

[01:22] <camelia> ..rakudo-moar 5b109d: OUTPUT¬´93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000‚ê§0‚ê§===SORRY!===‚ê§can only reduce with arity 2‚ê§¬ª

[01:22] <Mouq> Hm

[01:22] <Mouq> r: =begin pod‚ê§I really enjoy factorials‚ê§=end pod‚ê§say [*] 1..100;‚ê§=pod‚ê§(Sometimes I mess up though)‚ê§‚ê§say [*] 0..100;‚ê§say $=pod.reduce({$^a.content = ($^a,$^b)¬ª.content}); 

[01:22] <camelia> rakudo-parrot 5b109d, rakudo-jvm 5b109d, rakudo-moar 5b109d: OUTPUT¬´93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000‚ê§0‚ê§Pod::Block::Para‚ê§  I really enjoy factorials‚ê§ ‚Ä¶¬ª

[01:23] <Mouq> r: =begin pod‚ê§I really enjoy factorials‚ê§=end pod‚ê§[*] 1..100;‚ê§=pod‚ê§(Sometimes I mess up though)‚ê§‚ê§[*] 0..100;‚ê§say $=pod.reduce({$^a.content = ($^a,$^b)¬ª.content}); 

[01:23] <camelia> rakudo-parrot 5b109d, rakudo-jvm 5b109d, rakudo-moar 5b109d: OUTPUT¬´Pod::Block::Para‚ê§  I really enjoy factorials‚ê§ Pod::Block::Para‚ê§  (Sometimes I mess up though)‚ê§‚ê§¬ª

[01:23] <Mouq> No?

[01:23] <Mouq> r: =begin pod‚ê§I really enjoy factorials‚ê§=end pod‚ê§[*] 1..100;‚ê§=pod‚ê§(Sometimes I mess up though)‚ê§‚ê§[*] 0..100;‚ê§say $=pod[].reduce({$^a.content = ($^a,$^b)¬ª.content}); 

[01:23] <camelia> rakudo-parrot 5b109d, rakudo-jvm 5b109d, rakudo-moar 5b109d: OUTPUT¬´Pod::Block::Para‚ê§  I really enjoy factorials‚ê§ Pod::Block::Para‚ê§  (Sometimes I mess up though)‚ê§‚ê§¬ª

[01:23] <Mouq> Oh well

[01:23] <skids> The example for declarator blocks seems to imply that those form a nested structure based on the code they are attached to.  But you can't say that for sure from the example because it just shows the results of a hypothetical renderer.

[01:27] *** FOSScookie joined
[01:27] <FOSScookie> Will perl6 be able to access java libraries like Jython does?

[01:27] <FOSScookie> Since it compiles to Java bytecode.

[01:28] <FOSScookie> Could I also use Perl6 to access Java databases like HSQLDB?

[01:28] <Mouq> FOSScookie: Well, only Rakudo on JVM does. I think there was a mechanism by which you could, I'm not sure how developed/syntactically sugared it was

[01:29] <FOSScookie> So, I should probably use Jython or Jruby then?

[01:30] <Mouq> FOSScookie: I don't know much about Jakudo, honestly :) sorry

[01:32] <JimmyZ> yeah, Rakudo on JVM can access Java libs

[01:34] <Mouq> "use org::FOSScookie::FOSScookieFactory:from<java>:jar('FOSScookie.jar');" is it?

[01:37] <Mouq> FOSScookie: http://www.jnthn.net/papers/2013-yapceu-jvm.pdf slide/page 41

[01:37] <Mouq> *41+

[01:38] <TimToady> I have a script that does: use java::awt::MouseInfo:from<java>;

[01:39] <Mouq> FOSScookie: And btw, JVM backend actually had been our implementation that passed the most spectests until it was usurped because of MoarVM's superior Unicode support

[01:39] <Mouq> and because of TimToady++ :)

[01:42] <FOSScookie> slide/page 41 "So, now we can run much of Perl 6 on the JVM, but can we call into Java libraries?" Does that mean it is having problems with compatibility or is that a statement like "At the current moment we can run much of Perl6 on the JVM but more development is needed before the compiler is finished."

[01:43] <Mouq> FOSScookie: http://perl6.org/compilers/features

[01:43] <TimToady> it is certainly Turing complete :)

[01:47] <FOSScookie> So, it is this "At the current moment we can run much of Perl6 on the JVM but more development is needed before the compiler is finished." then.

[01:48] <TimToady> well, nobody's compiler is ever really finished, but you can certainly run all kinds of stuff on it

[01:48] <TimToady> and it seems quite stable

[01:48] <Mouq> FOSScookie: At the time it may have meant the former

[01:48] <TimToady> thing is, the people who work on that bit of it are mostly in .eu, and therefore asleep

[01:49] <TimToady> there was some work on getting Java overloading mapped into Perl 6 multiple dispatch, but I'm not sure how far that is.

[01:49] <TimToady> certainly you can call most any method if you're willing to be specific about the types involved

[01:51] * Mouq out

[01:51] <Mouq> o/ #perl6

[01:51] *** Mouq left
[01:52] * TimToady has to run off pretty soon too

[01:52] <skids> o/

[01:52] <TimToady> but yeah, ask again when the eurofolk are awaker

[01:53] <FOSScookie> Alright, thanks.

[01:53] *** FOSScookie left
[02:08] *** klapperl joined
[02:09] *** klapperl_ left
[02:20] <japhb__> xfix: re: http://irclog.perlgeek.de/perl6/2014-03-12#i_8424386 , are you talking about something like https://github.com/TiMBuS/Net--IRC/blob/concurrency/lib/Net/IRC/Logger.pm but generalized, or are you thinking of something else?

[02:20] <yoleaux> 12 Mar 2014 09:05Z <jnthn> japhb__: We don't have such introspection yet, sadly. Agree its needed. Also at some point the scheduler should start tuning itself based on throughput...

[02:20] <yoleaux> 12 Mar 2014 09:09Z <jnthn> japhb__: It will not spin up a new thread for "then" if there's already a free one, though I guess the current doesn't count as free. The right API design is to make .then take a scheduler to use to schedule the then, though. Then you'd just pass it CurrentThreadScheduler and be done.

[02:22] <japhb__> .ask jnthn I know you've been working on NativeCall for r-m (and jnthn++ for that!) ... what's left to be done for the Moar concurrency work?

[02:22] <yoleaux> japhb__: I'll pass your message to jnthn.

[02:24] *** bjz joined
[02:27] *** xenoterracide_ joined
[02:28] *** xenoterracide left
[02:28] *** xenoterracide_ is now known as xenoterracide

[02:58] *** thilp joined
[03:15] *** kaare_ joined
[03:18] *** clkao left
[03:19] *** clkao joined
[03:32] *** hoverboard left
[03:35] *** grondilu left
[03:35] *** PZt joined
[03:49] *** Ben_Goldberg joined
[03:51] *** BenGoldberg left
[04:01] *** xragnar_ joined
[04:01] *** xragnar left
[04:01] *** xragnar_ is now known as xragnar

[04:02] *** Ben_Goldberg left
[04:06] *** SamuraiJack joined
[04:47] *** thou joined
[04:54] *** FROGGS left
[04:58] *** kaleem joined
[05:03] *** woosley joined
[05:05] *** fhelmberger joined
[05:14] *** kaleem left
[05:23] *** kaare_ left
[05:23] *** dwarring left
[05:36] *** orevdiabl left
[05:36] *** revdiablo joined
[05:36] *** revdiablo left
[05:36] *** revdiablo joined
[05:57] *** aborazmeh joined
[05:58] *** kaare_ joined
[06:00] <TimToady> added a pure FP solution to http://rosettacode.org/wiki/Bernoulli_numbers#Perl_6 just for Ben_Goldberg++

[06:03] <JimmyZ> as fast as the pre one?

[06:03] <TimToady> unlikey

[06:04] <TimToady> *unlikely

[06:05] <TimToady> in fact, about 3.5 times slower :)

[06:05] <TimToady> but people will have their purity :)

[06:06] <JimmyZ> :/

[06:14] *** aborazmeh left
[06:22] *** aborazmeh joined
[06:32] *** aborazmeh left
[06:34] *** kaleem joined
[06:41] *** vincent22 joined
[07:00] *** araujo left
[07:02] *** thou left
[07:10] *** Alina-malina left
[07:26] *** dayangkun joined
[07:30] *** darutoko joined
[07:42] *** Kelder is now known as Ayiko

[07:45] *** Rotwang1 joined
[07:54] <jnthn> .tell japhb the time related bits, debugging the parallel GC (yay fun :P) and then a whole bunch of safety/hardening.

[07:54] <yoleaux> 02:22Z <japhb__> jnthn: I know you've been working on NativeCall for r-m (and jnthn++ for that!) ... what's left to be done for the Moar concurrency work?

[07:54] <yoleaux> jnthn: I'll pass your message to japhb.

[07:58] <jnthn> .tell japhb__ the time related bits, debugging the parallel GC (yay fun :P) and then a whole bunch of safety/hardening.

[07:58] <yoleaux> jnthn: I'll pass your message to japhb__.

[07:58] <jnthn> .tell japhb__ I'll probably prioritize the nativecall bits though...and Star.

[07:58] <yoleaux> jnthn: I'll pass your message to japhb__.

[08:01] *** daniel-s_ joined
[08:06] *** brrt joined
[08:13] *** zakharyas joined
[08:18] *** SamuraiJack left
[08:19] *** SamuraiJack joined
[08:19] <sergot> morning #perl6

[08:22] <moritz> \o *

[08:32] *** FROGGS joined
[08:34] *** [Sno] joined
[08:36] <brrt> \o

[08:36] *** pdcawley joined
[08:38] *** Alina-malina joined
[08:39] *** lizmat joined
[08:44] *** lizmat left
[08:44] *** lizmat joined
[08:46] *** xenoterracide left
[08:49] <lizmat> good * #perl6, from the QA Hackathon in Lyon, France

[08:53] *** lizmat left
[08:55] *** lizmat joined
[08:55] *** dmol joined
[08:55] *** xinming_ joined
[08:55] <moritz> \o lizmat 

[08:57] *** arnsholt left
[08:57] <lizmat> moritz o/

[08:59] *** [Sno] left
[09:00] *** woolfy joined
[09:09] *** BooK_ joined
[09:09] *** BooK_ left
[09:12] *** Rotwang1 left
[09:14] * moritz has started to read http://dreamsongs.net/Files/PatternsOfSoftware.pdf

[09:20] *** [Sno] joined
[09:21] *** denis_boyun joined
[09:27] *** lizmat left
[09:27] *** lizmat joined
[09:28] *** woolfy left
[09:30] <masak> antenoon, #perl6

[09:31] * masak , for a while, thought the URL was http://rosettacode.org/wiki/Bernoulli_numbers#Perl_6_just_for_Ben_Goldberg++, which would've been brilliant :)

[09:31] <jnthn> :D

[09:31] <jnthn> lizmat, FROGGS: Greets to you and l'other hackathoners :)

[09:33] <FROGGS> hi jnthn :o)

[09:34] *** colors joined
[09:35] *** colors is now known as vnctl

[09:36] <masak> did someone say hackathon?

[09:36] <masak> ooh!

[09:36] <masak> hi, Lyon!

[09:36] * masak .oO( and it's the Lyon in France, too. that's my favorite Lyon! )

[09:37] <sjn> \o masak 

[09:37] <sjn> <- in Lyon

[09:38] *** alinbsp joined
[09:38] <sjn> if you have messages for the hackathon, type them in #perl-qa :)

[09:41] *** lizmat left
[09:41] * jnthn is teaching, not hackathoning :)

[09:41] <jnthn> Got at least 3 Perl workshops coming later on in the year though ;)

[09:43] *** woolfy joined
[09:47] *** lizmat joined
[09:49] *** woolfy left
[09:49] *** woolfy joined
[09:50] *** dakkar joined
[10:01] *** denis_boyun left
[10:02] *** alinbsp left
[10:07] *** pecastro joined
[10:08] *** Sqirrel joined
[10:09] *** woolfy left
[10:09] *** woosley left
[10:10] *** Sqirrel_ joined
[10:10] *** Sqirrel left
[10:11] *** Sqirrel joined
[10:12] *** AndChat-458964 joined
[10:12] *** Sqirrel left
[10:12] *** dayangkun left
[10:13] <timotimo> o/

[10:14] *** Sqirrel_ left
[10:17] *** AndChat-458964 left
[10:18] *** Sqirrel joined
[10:25] *** rindolf joined
[10:27] *** Sqirrel_ joined
[10:27] *** Sqirrel left
[10:27] *** Sqirrel_ left
[10:28] *** treehug88 left
[10:30] *** Sqirrel joined
[10:31] *** Sqirrel_ joined
[10:31] *** Sqirrel left
[10:31] *** kurahaupo joined
[10:31] *** Sqirrel joined
[10:31] *** Sqirrel_ left
[10:32] *** Sqirrel_ joined
[10:32] *** Sqirrel left
[10:34] *** Sqirrel_ left
[10:37] *** Sqirrel joined
[10:38] *** Sqirrel_ joined
[10:38] *** Sqirrel left
[10:39] *** Sqirrel joined
[10:39] *** Sqirrel_ left
[10:42] *** Sqirrel_ joined
[10:42] *** Sqirrel left
[10:43] *** rindolf left
[10:50] *** kivutar joined
[10:52] *** rindolf joined
[10:57] *** Sqirrel joined
[10:57] *** Sqirrel_ left
[11:03] *** brrt left
[11:08] *** Sqirrel left
[11:08] <lizmat> FROGGS + lizmat  are considering where to spec the META.info contents

[11:08] <lizmat> for perusal by the community

[11:08] *** Sqirrel joined
[11:08] <lizmat> S11 seems to be the best place, does it not ?

[11:08] <FROGGS> +1 :o)

[11:08] <FROGGS> other ideas? quick!

[11:09] *** Sqirrel left
[11:10] *** denis_boyun joined
[11:10] <dalek> specs: 7cfb3b4 | (Elizabeth Mattijsen)++ | S11-modules.pod:

[11:10] <dalek> specs: Proposed name change for S11

[11:10] <dalek> specs: review: https://github.com/perl6/specs/commit/7cfb3b4fa4

[11:16] <timotimo> so, FROGGS, i didn't look carefully yet, but do you have a smart way to handle extra content, like for a game that has textures and sounds, or for an application that would like to install a .desktop file with icons?

[11:16] *** telex left
[11:16] <FROGGS> timotimo: not yet

[11:17] <timotimo> also, python has an "entry points" list kind of thing where you specify a module(, class and) function to be run and a name for a script to be generated and that will be installed in the system's $PATH, are we getting something like that as well?

[11:17] <FROGGS> there probably should be a section in the META.info called "files" that will be installed as well (like the folder "bin" gets installed)

[11:18] <FROGGS> and then perhaps a CompUnitRepo.where-are-my-files method that gives you the paths/contents

[11:18] <FROGGS> dunno yet

[11:18] *** telex joined
[11:19] <FROGGS> please write down your mind about that and I'll think about how to solve it

[11:19] <FROGGS> (lunchtime now though)

[11:19] <FROGGS> bbiab

[11:19] <timotimo> the python setup.py equivalent allows you to glob for files; i would prefer not to have to manually update the meta.info every time i add/remove/rename a single file or directory with lots of files

[11:20] <tadzik> FROGGS wrote some tools that do that for you

[11:21] <timotimo> ah, that's a start.

[11:26] *** colomon left
[11:40] <timotimo> https://github.com/alexgorbatchev/syntaxhighlighter/blob/dev/src/brushes/perl.js - do we have anything that's directly compatible with this thing? hoelzro?

[11:41] <timotimo> Known Issues

[11:41] <timotimo> Perl formatting is really crappy. Partly because the author is lazy and partly because Perl is hard to parse.

[11:51] *** treehug88 joined
[12:01] <Ven> timotimo: how can you parse stuff that relies on runtime behavior?

[12:01] <masak> moritz++ # https://www.usenix.org/system/files/1403_02-08_mickens.pdf is extremely funny :D

[12:04] *** brrt joined
[12:13] *** lizmat left
[12:20] *** colomon joined
[12:21] <colomon> o/

[12:21] <yoleaux> 12 Mar 2014 23:38Z <Mouq> colomon: re: http://irclog.perlgeek.de/perl6/2014-03-12#i_8423436 There is https://github.com/perl-cldr/cldr-list-pm6/ by patch++, which solves half of your problem

[12:21] <colomon> patch++

[12:21] *** kivutar left
[12:22] <colomon> I wonder why patch hasn't added that module to the ecosystem?

[12:22] <colomon> So, should I be expecting rakudo problems on OS X?

[12:22] <colomon> I've been working on a $work project using rakudo-moar on my Linux box.

[12:23] <colomon> I'm away from the office this morning, and tried to get r/m up and running on my MacBook Pro.

[12:24] <colomon> A fresh rakudo seemed to compile okay, but my (working on the Linux box) code fails with Nominal type check failed for parameter '<anon>'; expected Any but got Mu

[12:25] <colomon> (Trying to build all backends failed in the configure stage every time.)

[12:28] *** AW3i joined
[12:30] *** lizmat joined
[12:31] *** araujo joined
[12:32] <colomon> I'm torn between updating my rakudo build on Linux to see if it fails there now too, and just trying to work logged into the machine at home.  (The auto dealership internet connection is terrible, but this SSH login has seemed stable so far.)

[12:34] *** lizmat left
[12:35] <colomon> cd ..

[12:35] <colomon> argh

[12:36] <colomon> Hmmm, looks like the problem is JSON::Tiny is broken on the latest Rakudo?

[12:39] <jnthn> ugh

[12:39] <colomon> no

[12:39] * jnthn wonders what did it...

[12:39] <colomon> actually, I don't have the latest JSON::Tiny on my Mac

[12:39] *** skids left
[12:39] <colomon> I checked before I left, but somehow I completely failed to get it right.

[12:40] <jnthn> And after that it works? :)

[12:40] <colomon> Huh.  So how can I trick this stupid internet into letting me get the latest JSON?

[12:40] <colomon> jnthn: I can't do git pull

[12:40] <colomon> or access github.com

[12:42] <jnthn> I could gist it to...oh wait...

[12:42] <jnthn> What *can* you access? :)

[12:44] <Ven> jnthn: DCC send :p

[12:45] *** Ven left
[12:46] <colomon> jnthn: sites they haven't thought to block.  :)

[12:47] <colomon> SSH seems to work.

[12:47] <colomon> or at least, SSH to my home machine seems to work.

[12:47] <colomon> it's possible that no https links work at all.

[12:48] <colomon> don't worry about me, I'm fairly confident Rakudo and JSON work and it's just my ancient version of JSON::Tiny that's failing.

[12:49] <colomon> (Well, there was the difficulty trying to build all the backends, but I need to make forward progress on $work instead of investigating that at the moment.)

[12:52] <colomon> r: say .96 ~~ (.95 .. 1.05)

[12:52] <camelia> rakudo-parrot 5b109d, rakudo-jvm 5b109d, rakudo-moar 5b109d: OUTPUT¬´True‚ê§¬ª

[12:52] <jnthn> colomon: http://jnthn.net/tmp/json.tar.gz

[12:53] *** [Sno]_ joined
[12:53] <colomon> jnthn++

[12:54] *** [Sno] left
[12:55] <colomon> and that has me $working on Mac!  jnthn++ again

[12:55] *** [Sno]_ is now known as [Sno]

[12:55] <FROGGS> timotimo: I think we could look into "share" for files to add to META.info and which we would install later

[12:55] *** lizmat joined
[13:00] *** lizmat left
[13:00] *** kurahaupo left
[13:01] *** lizmat joined
[13:02] <colomon> r: say 1.38223e-10

[13:02] <camelia> rakudo-jvm 5b109d: OUTPUT¬´1.3822300000000001E-10‚ê§¬ª

[13:02] <camelia> ..rakudo-moar 5b109d: OUTPUT¬´1.38223e-1‚ê§¬ª

[13:02] <camelia> ..rakudo-parrot 5b109d: OUTPUT¬´1.38223e-10‚ê§¬ª

[13:03] <colomon> yow

[13:03] <colomon> biggish moar-bug there.

[13:03] <colomon> r: say (1.38223e-10).perl

[13:03] <camelia> rakudo-jvm 5b109d: OUTPUT¬´1.3822300000000001E-10‚ê§¬ª

[13:03] <camelia> ..rakudo-moar 5b109d: OUTPUT¬´1.38223e-1‚ê§¬ª

[13:03] <camelia> ..rakudo-parrot 5b109d: OUTPUT¬´1.38223e-10‚ê§¬ª

[13:03] * masak submits moarbug

[13:03] <colomon> masak++

[13:04] <colomon> probably a jvmbug too... not sure how .gist is supposed to work for Num.

[13:04] <masak> I see nothing wrong about that -- just annoying.

[13:05] <colomon> r: say 1.3822300000000001E-10

[13:05] <camelia> rakudo-jvm 5b109d: OUTPUT¬´1.3822300000000001E-10‚ê§¬ª

[13:05] <camelia> ..rakudo-moar 5b109d: OUTPUT¬´1.38223e-1‚ê§¬ª

[13:05] <camelia> ..rakudo-parrot 5b109d: OUTPUT¬´1.38223e-10‚ê§¬ª

[13:05] <FROGGS> when I have a distribution Foo that has :auth<cpan:FROGGS> or :auth<github:FROGGS>, how to call the "cpan"/"github" bit there?

[13:05] *** guru joined
[13:05] * lizmat is considering separating S11's "auth" into an authority and an author

[13:05] <colomon> yeah, I guess the .perl roundtrip works with E-10 instead of e-10

[13:06] *** guru is now known as Guest32048

[13:06] <masak> r: say 1.38223e-10 > 0.1

[13:06] <camelia> rakudo-parrot 5b109d, rakudo-jvm 5b109d, rakudo-moar 5b109d: OUTPUT¬´False‚ê§¬ª

[13:06] *** Guest32048 is now known as ajr_

[13:06] <masak> oh, interesting.

[13:06] <masak> so it has the right number internally...

[13:06] <masak> ...but prints it wrong.

[13:06] <colomon> masak: oh, yes

[13:06] <colomon> sorry I wasn't clear about that

[13:06] <masak> just checking :)

[13:07] <colomon> I noticed it because I was getting 6.72393e-11 / 1.38223e-1 = 0.486455220911136

[13:07] <masak> well, that's better than the alternative.

[13:07] <colomon> I suspect something is deleting trailing zeros when it shouldn't

[13:07] <colomon> r: say 1.38223e-20

[13:07] <camelia> rakudo-moar 5b109d: OUTPUT¬´1.38223e-2‚ê§¬ª

[13:07] <camelia> ..rakudo-parrot 5b109d: OUTPUT¬´1.38223e-20‚ê§¬ª

[13:07] <camelia> ..rakudo-jvm 5b109d: OUTPUT¬´1.38223E-20‚ê§¬ª

[13:07] <colomon> yeah

[13:10] *** LLamaRider joined
[13:21] * colomon just learned something scary about his $work C++ code, thanks to his new coded-in-p6 results comparison test.

[13:21] <FROGGS> (learned something)++

[13:22] <FROGGS> I really do like cross language based learning :o)

[13:22] <colomon> FROGGS: this is about me improving the testing of my C++ code.  Using p6.  :)

[13:22] <FROGGS> colomon++

[13:24] <colomon> though I may end up translating to p5 to get a Dancer UI working.

[13:25] <colomon> I actually started (very briefly) in p5, but got annoyed at it and switched to p6.

[13:26] *** dayangkun joined
[13:26] <FROGGS> yes, I understand that feeling, my problem is it is kinda hard for me at work to switch to p6

[13:26] <FROGGS> at least atm

[13:28] <colomon> I figured worst case I was prototyping it in p6, thereby preserving the remaining shreds of my sanity.

[13:28] <dalek> specs: 800d9f6 | (Elizabeth Mattijsen)++ | S19-commandline.pod:

[13:28] <dalek> specs: Remove pod tags as a source of meta-information

[13:28] <dalek> specs: 

[13:28] <dalek> specs: Meta-information of a compilation unit will need to be specified in the

[13:28] <dalek> specs: (currently being specced) META.info file of a distribution.

[13:28] <dalek> specs: review: https://github.com/perl6/specs/commit/800d9f6512

[13:34] *** woolfy joined
[13:35] <colomon> woolfy and lizmat!

[13:35] <woolfy> colomon!

[13:36] <woolfy> we are at the QA Hackathon in Lyon, France: http://act.qa-hackathon.org/qa2014/

[13:36] <colomon> oooo, nice

[13:37] <woolfy> No no, Lyon, not Nice (http://www.nice.fr/), they are completely different cities

[13:37] <colomon> :p

[13:39] *** SamuraiJack left
[13:39] *** SamuraiJack_ joined
[13:40] *** fridim__ left
[13:41] *** kbaker joined
[13:45] *** daniel-s_ left
[13:48] <moritz> cool slogan for a city: "Lyon, not Nice" :-)

[13:48] *** AW3i left
[13:48] <FROGGS> hehe

[13:49] <lizmat> and vice-versa:  Nice, not Lyon :-)

[13:51] *** LLamaRider left
[13:53] <[Coke]> woolfy++

[13:54] *** araujo left
[13:55] * colomon 's Odyssey is ready to go, afk

[13:55] <FROGGS> p6: say $?PACKAGE:: # bug?

[13:55] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object‚ê§  at Niecza.StashCursor.Core (System.String key, Boolean final, Niecza.StashCursor& sc, Niecza.Variable& v, Niecza.Variable bind_to) [0x00000] i‚Ä¶¬ª

[13:55] <camelia> ..rakudo-parrot 5b109d, rakudo-jvm 5b109d, rakudo-moar 5b109d: OUTPUT¬´(GLOBAL)‚ê§¬ª

[13:56] <FROGGS> p6: say $?PACKAGE.WHO # I've expected this

[13:56] <camelia> rakudo-parrot 5b109d, rakudo-jvm 5b109d, rakudo-moar 5b109d: OUTPUT¬´().hash‚ê§¬ª

[13:56] <camelia> ..niecza v24-109-g48a8de3: OUTPUT¬´Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object‚ê§  at Niecza.StashCursor.Core (System.String key, Boolean final, Niecza.StashCursor& sc, Niecza.Variable& v, Niecza.Variable bind_to) [0x00000] i‚Ä¶¬ª

[13:58] *** AW3i joined
[14:01] *** bluescreen10 joined
[14:03] *** AWei joined
[14:05] *** btyler joined
[14:07] *** thou joined
[14:08] *** araujo joined
[14:12] *** colomon left
[14:12] *** jnap joined
[14:15] *** molaf joined
[14:19] *** mavcunha joined
[14:19] <timotimo> FROGGS: i would have thought that :: accesses the package itself

[14:20] <retupmoca> so I tweaked MIME::Base64 to play nicer with precompilation on multiple backends

[14:21] <retupmoca> and it seems to work (for moar at least)

[14:21] <retupmoca> but I used EVAL to make it play nice - is this a bad idea?

[14:21] <timotimo> well, for moar is moar than befoar

[14:21] *** cooper left
[14:21] *** mavcunha left
[14:21] <retupmoca> https://github.com/perl6/Perl6-MIME-Base64/commit/bb3fb44888991a6fca0854b708120e5b1303a150

[14:21] <timotimo> did you try require?

[14:22] <retupmoca> require doesn't precompile

[14:22] <timotimo> oh

[14:22] <retupmoca> even without the fancy if stuff I had in there

[14:22] <FROGGS> m: module Foo { }; say Foo::

[14:22] <FROGGS> timotimo: :: is package.WHO, no?

[14:22] <camelia> rakudo-moar 5b109d: OUTPUT¬´().hash‚ê§¬ª

[14:22] *** cooper joined
[14:22] <timotimo> it is?

[14:22] *** cooper left
[14:22] *** cooper joined
[14:23] <retupmoca> The way I had it before was working if used directly, but (a) didn't precompile properly, so it died when you used it from another module, and (b) panda still tried to compile the parrot-specific code on other backends

[14:23] <timotimo> aaw :(

[14:24] <timotimo> yeah, it's annoying that this is so hard

[14:24] <retupmoca> now it works, but I don't really like EVAL

[14:25] <hoelzro> timotimo: what do you mean wrt the syntax highlighting thing?

[14:25] <retupmoca> what I really want for this is conditional compilation of some sort

[14:25] *** AWei left
[14:26] <retupmoca> because PIR.pm6 won't compile at all without the EVAL in there

[14:26] *** AWei joined
[14:27] <timotimo> hoelzro: do we have anything written that could just plug into that and give working highlighting?

[14:27] <hoelzro> you mean like a perl6.js?

[14:27] <timotimo> no

[14:28] <timotimo> er ... well, i guess?

[14:28] <timotimo> just for highlighting, though

[14:29] *** kaare_ left
[14:29] <hoelzro> you mean for JS highlighting

[14:29] <hoelzro> right?

[14:29] <timotimo> ...

[14:30] <hoelzro> sorry, I just woke up =/

[14:30] <hoelzro> and my coffee cup is 95% full

[14:30] <timotimo> the codehighlighter is a javascript thing that runs in the browser. and it's very bad at perl highlighting. but since perl6 is a bit nicer to parse and lex, maybe that'd be an option

[14:30] <timotimo> so i was asking if we have anything written in javascript that would do perl6 syntax highlighting that could plug into that given "interface"

[14:30] <timotimo> or if it would have to be built from scratch

[14:34] <hoelzro> I don't think we have anything for Perl 6 highlighting on the JS side of things

[14:34] <hoelzro> but that highlighter looks pretty rudimentary

[14:35] <hoelzro> there's got to be a better JS highlighter out there

[14:35] <timotimo> yes, the project also claims that it sucks

[14:35] <hoelzro> haha

[14:35] <timotimo> the point is that that thing is in widespread use :)

[14:35] <hoelzro> there's probably like 20 other JS syntax highlighters

[14:35] <hoelzro> grrrr

[14:35] <timotimo> so i thought if we could get that for free, we should

[14:35] <timotimo> if not, we can care about it much, much later.

[14:35] <hoelzro> well, even if it's crappy highlighting, it's better than nothing

[14:36] <timotimo> i didn't think so when i saw my first crappy draft of p6 syntax highlighting in kate/qtcreator

[14:36] <timotimo> :P

[14:36] *** AW3i left
[14:36] *** AWei left
[14:36] <hoelzro> heh

[14:37] <hoelzro> have you done anything with that since last we talked about it?

[14:37] <timotimo> no, i was expecting you to take over completely :D

[14:37] <hoelzro> it's on my TODO list, but that's been unaddressable, as I've been in work/living limbo for 3 weeks

[14:37] *** AW3i joined
[14:37] <hoelzro> Rogue Legacy didn't help me there, either =/

[14:37] <timotimo> heh heh heh.

[14:37] <hoelzro> hmm

[14:38] <hoelzro> next time someone asks "Why is Perl 6 taking so long?"

[14:38] <hoelzro> "Steam."

[14:40] <thilp> excuse me, is that a bug or something I missed?

[14:40] <thilp> perl6: my Array[Array[Int]] $a .= new; my Array[Int] $b .= new(1,2); $a.push($b)

[14:40] <camelia> rakudo-parrot 5b109d: OUTPUT¬´Type check failed in .push; expected 'Array[Int]' but got 'Array[Int]'‚ê§  in block  at gen/parrot/CORE.setting:7916‚ê§  in method push at gen/parrot/CORE.setting:7899‚ê§  in method push at gen/parrot/CORE.setting:1614‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[14:40] <camelia> ..niecza v24-109-g48a8de3: OUTPUT¬´Unhandled exception: Excess arguments to List.new, used 1 of 3 positionals‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 0 (List.new @ 1) ‚ê§  at /tmp/tmpfile line 1 (mainline @ 5) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4595 (ANON @ 3) ‚Ä¶¬ª

[14:40] <camelia> ..rakudo-jvm 5b109d: OUTPUT¬´Type check failed in .push; expected 'Array[Int]' but got 'Array[Int]'‚ê§  in block  at gen/jvm/CORE.setting:7893‚ê§  in method push at gen/jvm/CORE.setting:7879‚ê§  in method push at gen/jvm/CORE.setting:1610‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[14:40] <camelia> ..rakudo-moar 5b109d: OUTPUT¬´Type check failed in .push; expected 'Array[Int]' but got 'Array[Int]'‚ê§  in block  at src/gen/m-CORE.setting:7950‚ê§  in method push at src/gen/m-CORE.setting:7936‚ê§  in method push at src/gen/m-CORE.setting:1610‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[14:41] <timotimo> perl6: my Array[Int] @a .= new; my Int @b .= new(1,2); @a.push(@b)

[14:41] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´Unhandled exception: Excess arguments to List.new, used 1 of 3 positionals‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 0 (List.new @ 1) ‚ê§  at /tmp/tmpfile line 1 (mainline @ 5) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4595 (ANON @ 3) ‚Ä¶¬ª

[14:41] <camelia> ..rakudo-moar 5b109d: OUTPUT¬´Type check failed in .push; expected 'Array[Int]' but got 'Int'‚ê§  in block  at src/gen/m-CORE.setting:7950‚ê§  in method push at src/gen/m-CORE.setting:7936‚ê§  in method push at src/gen/m-CORE.setting:1610‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[14:41] <camelia> ..rakudo-parrot 5b109d: OUTPUT¬´Type check failed in .push; expected 'Array[Int]' but got 'Int'‚ê§  in block  at gen/parrot/CORE.setting:7916‚ê§  in method push at gen/parrot/CORE.setting:7899‚ê§  in method push at gen/parrot/CORE.setting:1614‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[14:41] <camelia> ..rakudo-jvm 5b109d: OUTPUT¬´Type check failed in .push; expected 'Array[Int]' but got 'Int'‚ê§  in block  at gen/jvm/CORE.setting:7893‚ê§  in method push at gen/jvm/CORE.setting:7879‚ê§  in method push at gen/jvm/CORE.setting:1610‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[14:41] <timotimo> huh.

[14:41] <timotimo> at some point, we could be writing my Int @a[*;*] to get a 2-dimensional array

[14:43] *** AW3i left
[14:45] *** AW3i joined
[14:47] <thilp> n-dimensional arrays could seem strange in some contexts‚Ä¶ When I first wrote the Array[Array[]] thing, it was precisely for a list of lists, not a matrix. I agree it could be a workaround though

[14:48] <[Coke]> I can write ugly javascript with the best of them, if that syntax highliter is something we'll get some traction on.

[14:52] *** Ulti_ joined
[14:52] *** xinming__ joined
[14:57] *** klapperl_ joined
[15:00] <[Coke]> hoelzro++

[15:02] *** kaleem left
[15:02] *** kaleem joined
[15:03] *** dayangkun left
[15:03] *** bjz left
[15:03] *** bjz joined
[15:04] *** itz__ joined
[15:05] *** [Sno] left
[15:05] *** klapperl left
[15:05] *** Ulti left
[15:05] *** itz_ left
[15:05] *** xinming_ left
[15:07] *** kurahaupo joined
[15:07] *** dayangkun joined
[15:08] *** [Sno] joined
[15:08] *** dayangkun left
[15:09] *** sftp left
[15:09] *** dayangkun joined
[15:09] *** sftp joined
[15:09] *** rindolf left
[15:10] *** dayangkun left
[15:11] *** dayangkun joined
[15:11] <thilp> On perl6.org, I can see [email@hidden.address] but no link to a bugtracker interface listing current bug reports. Does such interface exist?

[15:12] *** spider-mario joined
[15:12] *** dayangkun left
[15:13] *** dayangkun joined
[15:14] *** dayangkun left
[15:14] *** AW3i left
[15:14] *** dayangkun joined
[15:15] *** AW3i joined
[15:15] <moritz> thilp: https://rt.perl.org/

[15:15] *** bluescreen100 joined
[15:15] <thilp> thank you!

[15:16] *** bluescreen100 left
[15:16] *** bluescreen100 joined
[15:17] *** lizmat left
[15:19] *** bluescreen10 left
[15:20] <hoelzro> is there a shorthand for $/[0], like $<foo>?

[15:20] <moritz> $0

[15:21] <hoelzro> ...

[15:21] <hoelzro> thanks moritz 

[15:21] * hoelzro .oO( I really need to wake up )

[15:23] *** kurahaupo_mobile joined
[15:24] *** kurahaupo left
[15:25] *** kurahaupo_mobile is now known as kurahaupo

[15:27] *** colomon joined
[15:27] <colomon> o/

[15:30] *** bluescreen__ joined
[15:30] *** bluescreen100 left
[15:31] *** bluescreen10 joined
[15:34] *** bluescreen__ left
[15:36] *** raiph joined
[15:37] *** Ulti_ is now known as Ulti

[15:39] <japhb__> lizmat, in https://github.com/perl6/specs/commit/800d9f6512 , it does not appear that the commit description matches the diff -- something missing?

[15:39] <yoleaux> 07:58Z <jnthn> japhb__: the time related bits, debugging the parallel GC (yay fun :P) and then a whole bunch of safety/hardening.

[15:39] <yoleaux> 07:58Z <jnthn> japhb__: I'll probably prioritize the nativecall bits though...and Star.

[15:39] <japhb__> jnthn: Gotcha, understood.

[15:40] <japhb__> jnthn: Thanks for the info.

[15:42] <FROGGS> japhb__: she's still writing the spec, so please hold your breath for another commit or two :o)

[15:42] <FROGGS> (or perhaps don't hold your breath)

[15:42] *** mp_ joined
[15:43] *** bjz left
[15:43] *** bjz joined
[15:43] <FROGGS> how far is the NativeCall stuff? I was unable to backlog yet :/

[15:44] <japhb__> FROGGS: I was just noting that it looked like the commit was missing a file or somesuch.  I take it you mean she'll fix that on the next commit?  :-)

[15:44] <FROGGS> japhb__: yeah, she does :o)

[15:45] <japhb__> FROGGS: Some more work by jnthn++ and jimmy++ last night.  Seems to be moving along nicely.

[15:46] *** rindolf joined
[15:46] <FROGGS> that are good news :o)

[15:46] <FROGGS> (also that I have got my luggage now, but that is another topic)

[15:46] <raiph> FROGGS: see commit and plan at http://irclog.perlgeek.de/perl6/2014-03-12#i_8426599

[15:47] <japhb__> luggage \o/

[15:47] <FROGGS> raiph: thanks!

[15:47] <raiph> yw

[15:50] <jnthn> yay, course teached :)

[15:50] *** grep0r left
[15:51] <japhb__> .oO( "I teached persons how to English." )

[15:52] <dalek> specs: 4d963d8 | (Elizabeth Mattijsen)++ | S11-modules.pod:

[15:52] <dalek> specs: First stab at speccing distributions and META.info

[15:52] <dalek> specs: 

[15:52] <dalek> specs: As part of the ongoing work at the QA Hackathon

[15:52] <dalek> specs: review: https://github.com/perl6/specs/commit/4d963d8e65

[15:52] <jnthn> No, just how to write parallel/concurrent software in a refashionliableSIGSEGV

[15:52] *** lizmat joined
[15:53] *** kaleem left
[15:54] *** kaare__ joined
[15:54] *** grep0r joined
[15:56] <japhb__> Heh.

[15:59] * japhb__ added 'Concurrent IRC bot' to his list of Q4/Q1 highlights for perf eval  :-)

[16:03] *** pdcawley left
[16:07] *** fhelmberger left
[16:14] <dalek> specs: a5e7fa1 | (Elizabeth Mattijsen)++ | S11-modules.pod:

[16:14] <dalek> specs: Oops, "author" is not part of META.info

[16:14] <dalek> specs: review: https://github.com/perl6/specs/commit/a5e7fa10e8

[16:15] <lizmat> now on to merge my recent S11 changes with S22  :-(

[16:17] *** clkao left
[16:25] *** lizmat left
[16:25] *** lizmat joined
[16:26] *** clkao joined
[16:27] *** denis_boyun left
[16:32] <dalek> specs: a421930 | (Elizabeth Mattijsen)++ | S11-modules.pod:

[16:32] <dalek> specs: Add dependency info on the interpreter

[16:32] <dalek> specs: review: https://github.com/perl6/specs/commit/a421930903

[16:34] *** treehug88 left
[16:35] *** brrt left
[16:39] *** lizmat left
[16:40] *** lizmat joined
[16:43] *** zakharyas left
[16:44] *** isBEKaml joined
[16:52] <dalek> specs: 1446a94 | (Elizabeth Mattijsen)++ | S11-modules.pod:

[16:52] <dalek> specs: Remove some more pod-based authoritative info

[16:52] <dalek> specs: review: https://github.com/perl6/specs/commit/1446a94285

[16:54] *** kurahaupo left
[16:54] *** kurahaupo joined
[16:54] *** kivutar joined
[16:55] <dalek> specs: f2bf8b1 | (Elizabeth Mattijsen)++ | S02-bits.pod:

[16:55] <dalek> specs: Spec %?META and %?RESOURCE minimally

[16:55] <dalek> specs: review: https://github.com/perl6/specs/commit/f2bf8b1336

[16:56] <masak> lizmat: huh -- tell us more about %?META.

[16:56] <masak> lizmat: maybe -- rather likely, actually -- I'm not backlogged fully. but I hadn't heard of %?META before.

[16:56] <lizmat> it's new

[16:57] <lizmat> it's basically the run-time introspection into the META.info file of the distribution from which the current module was installed / loaded

[16:58] <lizmat> see also the changes I made to S11 today

[16:58] *** vnctl left
[17:00] <lizmat> %?RESOURCE is an easy way to access your resources from your module, e.g. images for a game

[17:00] *** treehug88 joined
[17:00] <masak> ok.

[17:01] <lizmat> so that the installer can install the files, potentially with Unicode file names, onto an ASCII only file system

[17:01] <lizmat> and the module can still access them transparently

[17:03] <masak> *nod*

[17:03] <masak> it beats having to programmatically locate the resources.

[17:03] <lizmat> well, it hides it, really  :-)

[17:05] *** ajr_ left
[17:05] <lizmat> we've also come to the conclusion that in order to really be able to be file system independent

[17:05] <lizmat> we will have to be able to unpack a distribution in memory in Perl 6

[17:05] <lizmat> so I guess that puts Archive::Tar high on the list of modules to be ported to Perl 6  :-)

[17:06] *** kaleem joined
[17:06] <lizmat> or we need to do a temp install of a distribution before we can actually test it

[17:07] <lizmat> probably the latter

[17:07] *** guru joined
[17:07] *** guru is now known as ajr_

[17:07] <masak> lizmat++

[17:08] <lizmat> and FROGGS++    :-)

[17:08] <masak> lizmat: I'm doing a lot of Angular lately. Angular is rich in DI. so when I saw %?META and %?RESOURCE, I immediately thought "oh, the compiler is injecting those things into the program".

[17:08] <masak> oh, FROGGS++

[17:09] <FROGGS> :o)

[17:09] <sjohnson> FROGGS: i like your cute emoticon

[17:10] <masak> sjohnson! \o/

[17:10] <sjohnson> :))

[17:10] <masak> sjohnson: long time no see, man!

[17:10] <sjohnson> ^ double chin emoticon cause i haven't been dieting

[17:10] <sjohnson> masak: indeed, same to you.

[17:12] <isBEKaml> OHHAI, #perl6!

[17:12] <lizmat> masak: well, yes, more like the load module run time functionality  :-)

[17:12] <FROGGS> ohh, I like it too, obviously *g*

[17:14] *** SamuraiJack_ left
[17:16] <FROGGS> m: my %a; %a<foo> = <a b c>; say %a<foo>.=uniq; say %a<foo>

[17:16] <camelia> rakudo-moar 5b109d: OUTPUT¬´a b c‚ê§a b c‚ê§¬ª

[17:16] <FROGGS> m: my %a; %a<foo> = <a b c>; %a<foo>.=uniq; say %a<foo>

[17:16] <camelia> rakudo-moar 5b109d: OUTPUT¬´‚ê§¬ª

[17:16] <FROGGS> masak: please explain the above^^

[17:17] <[Coke]> m: my %a; %a<foo> = <a b c>; %a<foo>.uniq.say

[17:17] <camelia> rakudo-moar 5b109d: OUTPUT¬´a b c‚ê§¬ª

[17:18] <FROGGS> why is it empty when the mutator is called in sink context?

[17:18] <FROGGS> p6: my %a; %a<foo> = <a b c>; %a<foo>.=uniq; say %a<foo>

[17:18] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´a b c‚ê§¬ª

[17:18] <camelia> ..rakudo-parrot 5b109d, rakudo-jvm 5b109d, rakudo-moar 5b109d: OUTPUT¬´‚ê§¬ª

[17:20] <FROGGS> p6: my %a; %a<foo> = <a b c>; %a<foo>.=sort; say %a<foo>

[17:20] <camelia> rakudo-parrot 5b109d, rakudo-jvm 5b109d, rakudo-moar 5b109d, niecza v24-109-g48a8de3: OUTPUT¬´a b c‚ê§¬ª

[17:20] <FROGGS> lizmat++ # a uniq bug!

[17:21] <masak> looks like a bug to me too.

[17:21] * masak submits rakudobug

[17:22] <FROGGS> thank you

[17:23] <masak> r: my @a = <a b b b c c>; @a.=uniq; say @a

[17:23] <camelia> rakudo-parrot 5b109d, rakudo-jvm 5b109d, rakudo-moar 5b109d: OUTPUT¬´a b c‚ê§¬ª

[17:23] <masak> innerestin'

[17:25] *** kaleem left
[17:26] <lizmat> this seems to be caused by having a map {} at the end of the method

[17:26] <lizmat> .squish has the same problem

[17:26] <lizmat> r: my @a = <a b b b c c>; @a.=squish; say @a

[17:26] <camelia> rakudo-parrot 5b109d, rakudo-jvm 5b109d, rakudo-moar 5b109d: OUTPUT¬´a b c‚ê§¬ª

[17:27] <lizmat> r: my $a = <a b b b c c>; $a.=squish; say $a

[17:27] <camelia> rakudo-parrot 5b109d, rakudo-jvm 5b109d, rakudo-moar 5b109d: OUTPUT¬´‚ê§¬ª

[17:27] <lizmat> r: my $a = <a b b b c c>; $a.=uniq; say $a

[17:27] <camelia> rakudo-parrot 5b109d, rakudo-jvm 5b109d, rakudo-moar 5b109d: OUTPUT¬´‚ê§¬ª

[17:27] <lizmat> so, if we're doing it on an array, it works

[17:27] <lizmat> if we do it on a scalar, it doesn't

[17:27] *** hoverboard joined
[17:29] *** kurahaupo left
[17:36] <colomon> r: my %a; %a<X Axis> = 10; say %a.perl

[17:36] <camelia> rakudo-jvm 5b109d: OUTPUT¬´("Axis" => Any, "X" => 10).hash‚ê§¬ª

[17:36] <camelia> ..rakudo-parrot 5b109d, rakudo-moar 5b109d: OUTPUT¬´("X" => 10, "Axis" => Any).hash‚ê§¬ª

[17:37] *** denisboyun joined
[17:38] *** ajr_ left
[17:42] <lizmat> r: my $a=<a b b c>; say uniq($a); say $a.uniq

[17:42] <camelia> rakudo-parrot 5b109d, rakudo-jvm 5b109d, rakudo-moar 5b109d: OUTPUT¬´a b b c‚ê§a b c‚ê§¬ª

[17:42] <lizmat> this seems counter-intuitive

[17:43] <TimToady> $ never, ever, ever, flattens

[17:43] <TimToady> but .uniq is a list method

[17:43] <TimToady> and methods bypass list context that listops have

[17:43] *** raiph left
[17:44] <TimToady> or to look at it another way, you get a free deref on a method call

[17:45] <TimToady> or to look at it yet another way, self is not a slurpy context that cares about $ vs @

[17:48] <TimToady> so yeah, .= should also work on a $a, so I agree it's a bug

[17:51] <FROGGS> what is wrong with this map then? https://github.com/rakudo/rakudo/blob/nom/src/core/List.pm#L407

[17:51] * FROGGS is happy to bug TimToady++ about that, now that he is a rakudo hacker too :P

[17:51] *** lizmat left
[17:52] *** lizmat joined
[17:52] <TimToady> well, it shouldn't be using Nil to mean (), for one

[17:54] <masak> so, Perl 6's Nil, now that it doesn't signify "undefined/empty list", is pretty close to Python's None, right?

[17:54] <TimToady> other than that, it's a map at statementlist level, so maybe you wanna put parens around it, or some such

[17:55] <TimToady> and closer to P5's undef

[17:55] <masak> *nod*

[17:56] <TimToady> in fact, I think it should be using next rather than returning any value

[17:59] *** FROGGS left
[17:59] <lizmat> testing that

[17:59] *** mp_ left
[18:00] <TimToady> I suspect the loops-at-statementlist-level fix is treating map as a loop, when it is obviously intended to produce a value here

[18:00] *** dakkar left
[18:01] <TimToady> and most people would expect map to be exempt from the statementlist rule

[18:01] *** woolfy left
[18:01] <lizmat> empirically, prefixing "lazy" doesn't fix the problem

[18:01] <TimToady> interesting

[18:02] <lizmat> prefixing "eager" does, but then of course doesn't return a lazy list anymore if given a lazy list

[18:02] <TimToady> maybe lazy is defective somehow

[18:03] <TimToady> do parens around it help?

[18:03] <dalek> rakudo/nom: d51edf9 | (Elizabeth Mattijsen)++ | src/core/List.pm:

[18:03] <dalek> rakudo/nom: .uniq and .squish use next rather than Nil to skip

[18:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d51edf9938

[18:03] <lizmat> you mean: lazy( map {.... } ) ?

[18:03] <TimToady> oh, lazy {} will certainly not work

[18:04] <TimToady> the {} introduce a new statementlist

[18:04] <TimToady> just lazy map ...

[18:04] <lizmat> that doesn't work, but you were saying about parens ?

[18:04] <TimToady> re parens, I just meant (map ...)

[18:04] <lizmat> ok, trying

[18:06] * TimToady wonders how many other places still assume Nil means ()

[18:08] *** guru joined
[18:08] <lizmat> will look at that tomorrow afternoon  :-)

[18:08] *** guru is now known as Guest85271

[18:08] *** Guest85271 is now known as ajr_

[18:08] <lizmat> parens don't fix  :-(

[18:09] <lizmat> decommuting and dinner&

[18:09] *** lizmat left
[18:11] <TimToady> so likely an overzealous sink optimization that leapfrogs the mutator and throws the values away before the mutator sees 'em

[18:12] *** [Sno] left
[18:13] *** bjz left
[18:13] *** bjz joined
[18:14] <colomon> r: my $a; say $a.defined

[18:14] <camelia> rakudo-parrot 5b109d, rakudo-jvm 5b109d, rakudo-moar 5b109d: OUTPUT¬´False‚ê§¬ª

[18:17] *** pecastro left
[18:18] *** isBEKaml left
[18:22] <jnthn> The statementlist thing is done on for and statement modifier for only; if it doesn't hit the appropriate statement_control or statement_modifier it won't happen

[18:22] <jnthn> It's not an AST level check like "look for map".

[18:24] <dalek> perl6.org: 3cd8f53 | moritz++ | source/getting-started/index.html:

[18:24] <dalek> perl6.org: Link to the rt.perl.org bug tracker

[18:24] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/3cd8f53d42

[18:24] <dalek> rakudo-star-daily: 5c1f577 | coke++ | log/ (5 files):

[18:24] <dalek> rakudo-star-daily: today (automated commit)

[18:24] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/5c1f5774f4

[18:24] <dalek> perl6-roast-data: cbf8c15 | coke++ | / (6 files):

[18:24] <dalek> perl6-roast-data: today (automated commit)

[18:24] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/cbf8c15e8d

[18:24] <dalek> perl6-roast-data: b77c09c | coke++ | / (6 files):

[18:24] <dalek> perl6-roast-data: today (automated commit)

[18:24] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/b77c09c51b

[18:25] <[Coke]> yay, one less moar segfault.

[18:26] <jnthn> TimToady: The Nil is () thing was/is quite deeply assumed in Rakudo. It was a surprising and, from Rakdu's perspective, quite unfortunate spec change...

[18:26] <jnthn> TimToady: Anyway, feel free to fix it :P

[18:26] *** hoverboard left
[18:26] <dalek> perl6.org: 1c17cc4 | moritz++ | source/getting-started/index.html:

[18:26] <dalek> perl6.org: more semantic markup

[18:26] <dalek> perl6.org: 

[18:26] <dalek> perl6.org: using manual numbering inside an unordered list just screams for <ol> instead.

[18:26] <dalek> perl6.org: And inside a list, no need for manual bullet points

[18:26] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/1c17cc4871

[18:27] <[Coke]> jnthn++

[18:27] <[Coke]> ++TimToady

[18:33] *** nazarko joined
[18:33] <[Coke]> http://devopsreactions.tumblr.com/post/69159499699/when-that-one-cool-python-feature-that-you-need-is-only - this may be relevant to our interests.

[18:34] *** nazarko left
[18:36] *** Rotwang1 joined
[18:36] *** FROGGS[mobile] joined
[18:36] <jnthn> Well, NativeCall.pm compiles on Moar now... 

[18:36] <jnthn> Now we "just" need to make it run tests

[18:38] <TimToady> yeah, who cares if it passes 'em?

[18:38] *** hoverboard joined
[18:39] <jnthn> :P

[18:40] *** xenoterracide joined
[18:41] *** pippo joined
[18:43] *** FROGGS[mobile] left
[18:44] *** skids joined
[18:46] *** FROGGS[mobile] joined
[18:46] *** retupmoca left
[18:47] *** retupmoca joined
[18:47] *** FROGGS[mobile] left
[18:51] *** FROGGS[mobile] joined
[18:55] *** Rix joined
[18:55] *** FROGGS[mobile] left
[18:56] *** clkao left
[18:56] *** clkao joined
[18:59] *** FROGGS[mobile] joined
[19:00] *** AW3i left
[19:01] *** darutoko left
[19:01] *** FROGGS[mobile] left
[19:01] *** arnsholt joined
[19:03] <jnthn> Turns out the thing that was making S14-traits/routine.t fail on Moar also blocked NativeCall. So I fux it. :)

[19:04] <jnthn> Now it's onto trying to get it to compile the test libs... :)

[19:06] *** pippo left
[19:07] <TimToady> .oO(rated R for strong verbs)

[19:12] *** erdic joined
[19:13] <vendethiel> So, I finished reading the synopsis today (yay !) and I wanted to ask : what's `sub a(Int --> Int --> Int) {}` ?

[19:14] <vendethiel> a function that returns a function that returns an Int ?

[19:16] <masak> my guess would be that's not allowed.

[19:16] <masak> std: sub a(Int --> Int --> Int) {}

[19:16] <camelia> std 09dda5b: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unable to parse signature at /tmp/Fklb8QIcvP line 1:‚ê§------> [32msub a[33m‚èè[31m(Int --> Int --> Int) {}[0m‚ê§Couldn't find final ')'; gave up at /tmp/Fklb8QIcvP line 1:‚ê§------> [32msub a(Int --> Int [33m‚èè[31m--> Int‚Ä¶¬ª

[19:16] <masak> seems it ain't.

[19:17] *** mtj_ left
[19:17] <TimToady> we ain't quite Haskell yet

[19:18] <vendethiel> TimToady: haha, I thought about that, too

[19:18] *** mtj_ joined
[19:18] <vendethiel> http://perlcabal.org/syn/S32/Basics.html "multi method clone (::T $self --> T --> Any )"

[19:18] <vendethiel> should that first `-->` be `:` ?

[19:18] <TimToady> looks like

[19:19] <TimToady> actually, I'm not sure what the --> T is supposed to be doing there, or maybe the --> Any

[19:20] <vendethiel> should it just be `::T $self: --> Any` ?

[19:20] <vendethiel> 'cause the double `-->` is repeated below

[19:20] <TimToady> or ::T $self: --> T

[19:20] <vendethiel> uh yeah, T.

[19:20] <masak> right.

[19:20] <TimToady> presumably clone returns something of the same type

[19:21] <masak> I can't think of a case when it doesn't.

[19:33] <[Coke]> m: say Any.clone.signature

[19:33] <camelia> rakudo-moar d51edf: OUTPUT¬´No such method 'signature' for invocant of type 'Any'‚ê§  in block  at /tmp/ZiwWy_dQLr:1‚ê§‚ê§¬ª

[19:33] <[Coke]> m: say Any.&clone.signature

[19:33] <camelia> rakudo-moar d51edf: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/hZSIWeW1t2‚ê§Undeclared routine:‚ê§    &clone used at line 1. Did you mean '&close', '&none'?‚ê§‚ê§¬ª

[19:38] <[Coke]> m: Any.^methods(:all).grep({$^a.name eq "clone"})>>.signature.say

[19:38] <camelia> rakudo-moar d51edf: OUTPUT¬´:(Mu: *%twiddles)‚ê§¬ª

[19:38] <[Coke]> ^^ why doesn't that match any of the signatures in S32::Basics?

[19:46] *** pecastro joined
[19:48] *** yath_ left
[19:50] *** erdic left
[19:51] *** erdic joined
[20:06] <colomon> any hints for intelligently initializing the attributes of a role?

[20:07] <moritz> has $.x = ...;

[20:07] <colomon> I'm thinking more of the equivalent of a method new?

[20:09] <dalek> rakudo/nom: 22a53c2 | jonathan++ | src/vm/moar/ops/perl6_ops.c:

[20:09] <dalek> rakudo/nom: Fix bug involving wrap and traits.

[20:09] <dalek> rakudo/nom: 

[20:09] <dalek> rakudo/nom: Unbusts S14-traits/routine.t; the same bug hurt NativeCall.

[20:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/22a53c2f2a

[20:09] <colomon> more concretely: https://gist.github.com/colomon/b598829a9419bdb5a2ed

[20:10] <dalek> zavolaj: 9e61713 | jonathan++ | t/CompileTestLib.pm:

[20:10] <dalek> zavolaj: Support compiling test libraries on Moar.

[20:10] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/9e61713061

[20:10] <colomon> I'd like to have any class which does this role be able to call initialize-attributes

[20:10] <colomon> (mind you, I understand this layout is probably fundamentally wrong.  but at least it gets the notion across, I hope.)

[20:10] <dalek> zavolaj: f2bc8d3 | jonathan++ | lib/NativeCall.pm6:

[20:10] <dalek> zavolaj: Add Moar hanlding of so/dll/whatever extension.

[20:10] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/f2bc8d3c70

[20:11] <moritz> colomon: did you try if submethod BUILD works in roles?

[20:11] <colomon> moritz: I have not tried BUILD.  It kind of scares me, to be honest.

[20:11] <jnthn> 01-argless.t and 03-simple-returns.t of the NativeCall test suite pass fully now.

[20:11] <moritz> \o/

[20:12] <arnsholt> jnthn++

[20:12] <arnsholt> Oh, I have to pull Zavolaj now. Just sat down to get compiling working on JVM as well

[20:13] <jnthn> And 02-simple-args.t passes the first 9. Then explodes.

[20:13] <arnsholt> jnthn: Any objections to adding the info from nqp::backendconfig to Rakudo's $*VM?

[20:13] <colomon> jnthn: oh, that's on JVM?  I was thinking moar...

[20:14] <jnthn> colomon: My results are for Moar :)

[20:14] <colomon> ah!

[20:14] <colomon> jnthn++ arnsholt++

[20:14] <jnthn> arnsholt: On JVM? Sounds good ot me.

[20:14] <jnthn> *to me

[20:14] <arnsholt> Yeah, JVM

[20:15] <arnsholt> It's kind of weird to me that the JVM has a special op for its config, but this is the easiest way for now

[20:15] <arnsholt> We can remove nqp::jvmgetproperties later =)

[20:20] *** vincent22 left
[20:20] <arnsholt> jnthn: 01, 03 and most of 02 passing means you've got basic arguments done, BTW

[20:20] *** kbaker left
[20:20] <arnsholt> The last few tests of 02 use the CStr REPR, which isn't entirely basic, admittedly

[20:21] <jnthn> arnsholt: Yeah, I just noticed that. Guess it needs CStr fully supporting.

[20:22] <arnsholt> YEp

[20:23] <arnsholt> It's a pretty tiny REPR, admittedly, but not crucial functionality in any way

[20:24] *** spider-mario left
[20:24] <jnthn> yeah, and I know I did a "get basics working" thing there.

[20:25] *** tgt joined
[20:25] <arnsholt> I think I ignored CStr for a while there too

[20:26] <jnthn> I'll probably do 04-pointers.t tonight, and maybe try for 05-arrays.t also

[20:27] <jnthn> Trouble is that it uses the "call a method" approach at the moment, when it needs to use the compose prototocl.

[20:27] <jnthn> *protocol

[20:27] <arnsholt> Yeah, I know

[20:27] <jnthn> Dunno if CStruct already switched voer?

[20:27] <jnthn> *over

[20:27] <arnsholt> I thiiiiink so

[20:28] <arnsholt> I looked into switching CArray over at some point, but couldn't quite figure it out at the time

[20:28] *** rindolf left
[20:29] <jnthn> yeah, CStruct seems to be switched voer

[20:29] <jnthn> Needs clearing up but it's not too bad.

[20:29] <jnthn> (as in, the code ported to Moar needs)

[20:30] <jnthn> Happy JimmyZ++ brought it this far, though.

[20:30] * jnthn wonders how hard 07-writebarrier.t will be :)

[20:30] *** rindolf joined
[20:32] <arnsholt> jnthn: Shouldn't be too bad I think

[20:32] <arnsholt> Also, there's a less subtle approach you can use if you look at the JVM version

[20:32] <jnthn> ok :)

[20:32] <jnthn> Callbacks are the tricky one I guess :)

[20:33] <jnthn> Got tomorrow to work on it though...and I guess Sat too.

[20:34] <arnsholt> Yeah, callbacks I'd expect to be the most fiddly, but even those worked out not too bad

[20:35] <arnsholt> And you can follow the Parrot version a lot closer on Moar. The JVM required some detours into bytecode generation you can skip =)

[20:35] * lue is very glad to discover that rakudo refuses to successfully match things like "SS" ~~ m:i/√ü/  :)

[20:35] <larks> does anyone have a threads perl6 program that works with the jvm backend?  I tried a simple example from the perl6 spec but that didn't work. `~`

[20:36] <larks> actually, hold on, I might have fubar'd something

[20:37] <moritz> larks: I recently built a threaded, recursive directory traversal

[20:37] <jnthn> larks: http://jnthn.net/papers/2013-npw-conc.pdf has some examples

[20:37] <larks> well, is it open source? =]

[20:37] <moritz> larks: https://gist.github.com/moritz/9293475

[20:38] *** rurban__ left
[20:38] <moritz> I haven't added a license header, but hereby I declare that you can use it under the WTFPL

[20:41] *** vendethiel left
[20:41] *** vendethiel joined
[20:42] <larks> thanks

[20:48] <jnthn> detrain &

[20:52] *** kaare__ left
[20:53] <TimToady> testing a fix for $a.=uniq

[20:54] <TimToady> problem is nothing clones an iterator before $a gets overwritten, and a gather/take inside uniq fixes it

[20:55] <TimToady> (and why eager also fixed it, but is overkill)

[20:56] <TimToady> lizmat++ for noticing

[20:57] <TimToady> and FROGGS++

[20:57] <dalek> nqp: 48bc2c2 | (Arne Skj√¶rholt)++ | tools/build/gen-jvm-properties.pl:

[20:57] <dalek> nqp: Add information on how to compile shared libraries.

[20:57] <dalek> nqp: 

[20:57] <dalek> nqp: All of this is extracted from Perl's config database. nwc10++ for pointing me

[20:57] <dalek> nqp: to the right docs, which made this a lot easier than it would've otherwise

[20:57] <dalek> nqp: been.

[20:57] <dalek> nqp: review: https://github.com/perl6/nqp/commit/48bc2c26ee

[20:58] *** takesako___ joined
[21:00] <dalek> rakudo/nom: eebf846 | (Arne Skj√¶rholt)++ | src/core/terms.pm:

[21:00] <dalek> rakudo/nom: Store both nqp::jvmgetproperties and nqp::backendconfig in $*VM on JVM.

[21:00] <dalek> rakudo/nom: 

[21:00] <dalek> rakudo/nom: This exposes information needed by NativeCall in $*VM.

[21:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eebf8465fb

[21:00] <dalek> zavolaj: c774705 | (Arne Skj√¶rholt)++ | t/CompileTestLib.pm:

[21:00] <dalek> zavolaj: Let test suite compile libraries on JVM too.

[21:00] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/c7747054fa

[21:01] <arnsholt> jnthn: Could you give that NQP/Rakudo/Zavolaj combo a whirl on Windows, when you get the chance?

[21:01] <arnsholt> It works on my Linux laptop, but I've no idea if it'll work on Windows, TBH =)

[21:02] *** rurban joined
[21:06] <masak> good night, #perl6

[21:07] <moritz> good night masak, dream of... things!

[21:07] <dalek> rakudo/nom: 5226298 | larry++ | src/core/List.pm:

[21:07] <dalek> rakudo/nom: fix $a.=uniq

[21:07] <dalek> rakudo/nom: 

[21:07] <dalek> rakudo/nom: The referent of $a is getting clobbered before uniq can get any values

[21:07] <dalek> rakudo/nom: from it.  Wrapping the list in gather/take gives us enough indirection

[21:07] <dalek> rakudo/nom: that we can return a new $a without clobbering the old value.

[21:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5226298837

[21:10] *** Rix left
[21:13] <dalek> modules.perl6.org: ef1e109 | (Alexander Moquin)++ | web/index.tmpl:

[21:13] <dalek> modules.perl6.org: Suggest perl6-most-wanted instead of wiki

[21:13] <dalek> modules.perl6.org: 

[21:13] <dalek> modules.perl6.org: The wiki page itself says that it's been replaced by perl6-most-wanted, and modules.md is much more current and fleshed out than the wiki page

[21:13] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/ef1e1090c1

[21:13] <arnsholt> Night, night!

[21:14] <[Coke]> .uniq # is there an RT for that?

[21:15] *** bjz left
[21:16] *** skids left
[21:20] * jnthn makes it home :)

[21:21] <[Coke]> LHF: add a test for that .uniq failure

[21:21] <jnthn> arnsholt: Lemme pull the latest stuffs :)

[21:22] *** BenGoldberg joined
[21:25] <arnsholt> Cheers!

[21:25] <arnsholt> jnthn++

[21:27] <dalek> specs: 59239b2 | (Alexander Moquin)++ | S11-modules.pod:

[21:27] <dalek> specs: "excludes" key formatting consistent with others

[21:27] <dalek> specs: review: https://github.com/perl6/specs/commit/59239b2400

[21:27] *** denisboyun left
[21:28] <rurban> nqp on parrot master is broken. containers decls missings

[21:29] <jnthn> rurban: Is that due to a Parrot change or an NQP change?

[21:31] *** Mouq joined
[21:31] <rurban> https://github.com/perl6/nqp/issues/161

[21:31] <jnthn> Ah, I see the ticket. Parrot change busted it.

[21:31] <rurban> fatalizing a parrot warning

[21:31] <rurban> I'll fix it in nqp

[21:31] <jnthn> OK, thanks.

[21:33] *** denisboyun joined
[21:35] <BenGoldberg> I just thought of the craziest idea... well, you folks tell me if it's crazy.  A perl5 module, Perl6::LineNoise, which causes the . operator to do method calls, ~ to do string concatenation, |, &, and ^ to do Quantum::Superposition::..., +|, +&, and +| to do arithmetic bitwise ops, and so on and so forth.  Obviously it would only have an effect in the lexical context of whatever code 'use'd the 

[21:35] <BenGoldberg> module.

[21:36] <Mouq> rurban++

[21:36] <jnthn> arnsholt: hmm

[21:36] <jnthn> java.lang.UnsatisfiedLinkError: Unable to load library './01-argless.so': Native library (win32-x86-64/./01-argless.so.dll) not found in resource path ([file:/C:/consulting/rakudo/install/languages/perl6/runtime/, file:/C:/consulting/rakudo/install/languages/perl6/lib/, file:/C:/consulting/rakudo/install/languages/nqp/lib/])

[21:37] <rurban> I've setup a private buildbot for several architectures http://perl514.cpanel.net:8010/builders/ this caught it

[21:39] <jnthn> arnsholt: Seems it doesn't build the .dll :(

[21:42] <jnthn> Does get the .obj though

[21:46] <jnthn> arnsholt: I think I see what's up, or some of it at least.

[21:47] <Mouq> TimToady: Str ‚Äì> Buf; Cat -> ??

[21:47] <jnthn> arnsholt: If uses -o01-argless.dll but that option is spelt /Fo01-argless.dll - there'll be an ldout flag or so I think.

[21:48] <jnthn> arnsholt: Also it misses symbols ("01-argless.obj : error LNK2001: unresolved external symbol __imp_printf") and it seems it's 'cus the various libs needed are missing from the link line

[21:49] <lue> Mouq: Cat doesn't exist, as far as I'm concerned (as is Char, and CharLingua, and...). Don't even know what it's supposed to be exactly :) .

[21:49] <Mouq> lue: Cat is LazySttr

[21:49] <Mouq> *Str

[21:49] <jnthn> arnsholt: It's $Config{libs} for the libs

[21:49] * nwc10 was wondering - will Perl 6 be released before Template::Toolkit 3?

[21:49] <lue> ? Since when were lazy strings important? reading files?

[21:49] <Mouq> LazyBuf would be nice for something I'd like to work on, once I get some other Perl 6 stuff off my plate

[21:50] <Mouq> lue: Reading files, indefinitely continued input

[21:50] <Mouq> e.g. remote connections

[21:50] <lue> Mouq: almost feels like it should be a trait or something, unless we really want to double the number of string types :/

[21:51] <Mouq> and I think Cat would encorage work on "Matching streams" stuff, which I think it important

[21:51] <Mouq> *is

[21:52] <Mouq> lue: What are our string types?

[21:52] <lue> Mouq: according to S15: Str, NFC, NFD, NFKC, NFKD, and Uni

[21:52] <dalek> nqp: f94c2da | rurban++ | src/vm/parrot/6model/containers.c:

[21:52] <dalek> nqp: fix GH #161: add missing #include"containers.h"

[21:52] <dalek> nqp: 

[21:52] <dalek> nqp: parrot has now -Werror=missing-prototypes, which caught this omission

[21:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f94c2da207

[21:53] <dalek> Heuristic branch merge: pushed 1000 commits to nqp/new-packfile-api by rurban

[21:53] <jnthn> Mouq: Cat is one of my candidates for "put off until 6.1"

[21:53] <Mouq> Serious question: why are NF* classes?

[21:53] <Mouq> Wouldn't roles be easier?

[21:54] <Mouq> nerm, s/easier/some other word :P/

[21:54] <lue> Mouq: because the non-typed route was a horrible reimplementation of the type system :)

[21:54] <rurban> nqp/new-packfile-api by rurban with 1000 commits? oops. I believe this branch can be purged

[21:56] <lue> fwiw, we're doing the inverse of what you're thinking at the moment: Unicodey and Stringy roles, with classes specializing on those (instead of base types modified by specialized roles).

[21:57] <Mouq> lue: Ok, that makes sense

[21:57] <jnthn> arnsholt: And I don't see anything which carries the /Fo option in %Config in Perl 5. Huh...

[21:57] <Mouq> +1 :P

[21:57] <jnthn> nwc10: Dunno if you know? :)

[21:58] <jnthn> (How Perl 5 handles -ofoo.so not always being -o on differnet platforms as a link arg...)

[21:58] * Mouq wants Grammar::Expression to work without having to mess with src/core/Cursor.pm :(

[22:00] <lue> Mouq: if you're curious, this was how I spec'd handling NF* stuff before TimToady kindly told me I was implementing a poor imitation of the type system :P  https://gist.github.com/lue/7761244/0b84ad07fea7bb9c8912e816f4aad9792d4ef8cb

[22:07] <Mouq> lue: Ahh, yes, this is probably far superior

[22:08] *** tgt left
[22:08] <lue> besides, "thing".NFKD is much shorter than "thing".decompose(:k) anyway :)

[22:09] <Mouq> lue: And if you're using NFKD you probably know "NFKD" pretty well already

[22:11] <lue> The most severe hole in S15 at the moment (which is definitely blocking anyone from implementing the richer collection of string types) is the definition of the Stringy and the Unicodey roles (though listing out the specific methods of the two should probably go in S32::Str)

[22:11] <Mouq> S32::Stringy, you mean ;)

[22:13] *** kivutar left
[22:13] <lue> Yeah, S32::Str should be renamed Strings or Stringy (√† la S32::Containers, S32::Numeric ...)

[22:14] <Mouq> .oO(S32::Containerish)

[22:15] <rurban> ah, cygwin64 support missing in dyncall, libffi is fine

[22:22] <jnthn> rurban: Why are you filing an NQP ticket for that? It's dyncall you should be filing it on, no?

[22:24] <jnthn> Oh, though we bundle, so if it's fixed upstream we should grab latest.

[22:25] <rurban> ok

[22:25] <rurban> latest NativeCall -I7x../ is a,lso wrong. 5x../ it should be

[22:30] <rurban> upstream http://dyncall.org/svn/dyncall/trunk/dyncall/configure has no cygwin part at all

[22:33] <rurban> nqp_bigint_ops.dll and nqp_dyncall_ops.dll are missing the chmod +x treatment on cygwin

[22:33] <jnthn> There's no practical reason why you can't grab a normal Windows build and use it from cygwin, though?

[22:34] <rurban> I rather fix the normal procedures

[22:34] <jnthn> OK. Well, fixes are welcome.

[22:35] <rurban> sure

[22:35] <rurban> fixed both issues now

[22:36] *** pecastro left
[22:37] <rurban> t/nativecall/01-basic.t crashes in cygwin64

[22:38] *** pecastro joined
[22:43] *** skids joined
[22:51] <dalek> nqp: 823fffe | rurban++ | tools/build/Makefile-Parrot.in:

[22:51] <dalek> nqp: fix GH #164. wrong -I../../.../ paths for src/vm/parrot/6model/reprs/

[22:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/823fffe2f3

[22:52] <dalek> nqp: 3d56d2b | rurban++ | 3rdparty/dyncall/configure:

[22:52] <dalek> nqp: fix GH #162: add latest cygwin64 support to dyncall

[22:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3d56d2b05a

[22:55] <dalek> nqp: 2dd4025 | rurban++ | tools/build/Makefile-Parrot.in:

[22:55] <dalek> nqp: fix Makefile-Parrot.in for cygwin GH #163

[22:55] <dalek> nqp: 

[22:55] <dalek> nqp: cygwin linker creates 644 .dlls, need chmod +x them.

[22:55] <dalek> nqp: analog to parrot

[22:55] <dalek> nqp: 

[22:55] <dalek> nqp: Also add a Makefile coda for easier editing

[22:55] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2dd40259f6

[22:56] <dalek> doc: 027778e | (Alexander Moquin)++ | WANTED:

[22:56] <dalek> doc: Update WANTED

[22:56] <dalek> doc: review: https://github.com/perl6/doc/commit/027778e092

[22:57] * Mouq is really enjoying editing from Github

[22:57] *** btyler left
[22:57] <lue> I'm not sure that I like how this requires you to put the module in some official place to be associated with a particular author/ity: https://github.com/perl6/specs/commit/a5e7fa10e8956543d2827b97b961571a3abb346c

[23:00] *** FROGGS joined
[23:01] *** Rotwang1 left
[23:02] <FROGGS> TimToady++ # .=uniq

[23:02] <lue> IIUC, the thing that makes our LTM work is apparently a really special feature in the eyes of Unicode: http://www.unicode.org/reports/tr18/#RL3.9

[23:05] <lue> FROGGS: am I understanding the changes I just saw in my inbox, that you can't specify (or even use?) the auth part of a module anymore?

[23:06] *** bluescreen10 left
[23:06] *** Psyche^_ joined
[23:08] *** treehug88 left
[23:10] *** hoverboard left
[23:10] *** Psyche^ left
[23:11] *** yoleaux left
[23:12] *** yoleaux joined
[23:12] *** ChanServ sets mode: +v yoleaux

[23:15] *** timotimo left
[23:15] *** timotimo joined
[23:17] *** bluescreen10 joined
[23:17] <dalek> perl6-most-wanted: d3783fe | (Alexander Moquin)++ | most-wanted/modules.md:

[23:17] <dalek> perl6-most-wanted: Mention the Perl 6 Lingua::* modules we know about

[23:17] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/d3783fe504

[23:19] *** rindolf left
[23:21] *** [Sno] joined
[23:21] <dalek> perl6-most-wanted: d868712 | (Alexander Moquin)++ | most-wanted/modules.md:

[23:21] <dalek> perl6-most-wanted: Mention some more internationalization modules

[23:21] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/d868712687

[23:29] <dalek> rakudo/nom: 3a30ddb | larry++ | src/core/List.pm:

[23:29] <dalek> rakudo/nom: fix .squish too, duh, same issue

[23:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3a30ddbbd9

[23:31] <lue> m: my token foo($bar) { foo {say $bar} }; say "foo" ~~ /<foo("baz")>/   # any idea why this fails?

[23:31] <camelia> rakudo-moar 522629: OUTPUT¬´Not enough positional parameters passed; got 1 but expected 2‚ê§  in regex foo at /tmp/vcG5Vy7WhO:1‚ê§  in method INTERPOLATE at src/gen/m-CORE.setting:12621‚ê§  in method ACCEPTS at src/gen/m-CORE.setting:12804‚ê§  in method ACCEPTS at src/gen/m-CORE.sett‚Ä¶¬ª

[23:36] *** Quom joined
[23:36] *** ggoebel11112 joined
[23:36] *** colomon_ joined
[23:37] *** jnap1 joined
[23:38] *** cognominal__ joined
[23:39] *** stevan__ joined
[23:40] <timotimo> because of $/?

[23:40] *** Psyche^ joined
[23:40] <timotimo> that does not make sense

[23:42] <dalek> nqp: 5623616 | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[23:42] <dalek> nqp: Decont args to a native call.

[23:42] <dalek> nqp: 

[23:42] <dalek> nqp: Fixes 04-pointers.t from Zavolaj test suite, and likely more.

[23:42] <dalek> nqp: review: https://github.com/perl6/nqp/commit/56236165d3

[23:42] <timotimo> yaaay

[23:43] <lue> timotimo: no clue, works within a grammar though.

[23:43] <TimToady> no, the thing is failing to pass the argument when calling lexically

[23:43] <TimToady> and, oddly, <&foo("baz")> doesn't parse at all

[23:44] *** jnap2 joined
[23:44] <TimToady> m: my token foo($bar = "oops") { foo {say $bar} }; say "foo" ~~ /<foo("baz")>/

[23:44] <camelia> rakudo-moar 522629: OUTPUT¬´oops‚ê§ÔΩ¢fooÔΩ£‚ê§ foo => ÔΩ¢fooÔΩ£‚ê§‚ê§¬ª

[23:45] <TimToady> m: my token foo($bar = "oops") { foo {say $bar} }; say "foo" ~~ /<&foo("baz")>/

[23:45] <camelia> rakudo-moar 522629: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/iNN4hMhvSJ‚ê§Unable to parse expression in metachar:sym<assert>; couldn't find final '>' ‚ê§at /tmp/iNN4hMhvSJ:1‚ê§------> [32m { foo {say $bar} }; say "foo" ~~ /<&foo[33m‚èè[31m("baz")>/[0m‚ê§¬ª

[23:45] *** Psyche^_ left
[23:45] <lue> (by the way, I only used m: to avoid an explosion of slightly different errors; it fails across all backends)

[23:45] *** moises left
[23:45] *** Mouq left
[23:45] *** ajr_ left
[23:45] *** colomon left
[23:45] *** jnap left
[23:45] *** ggoebel11111 left
[23:45] *** colomon_ is now known as colomon

[23:46] *** xenoterracide left
[23:46] *** cognominal left
[23:46] *** stevan_ left
[23:46] *** jnap1 left
[23:47] *** revdiablo left
[23:48] <timotimo> mhm

[23:48] <timotimo> i am kbdless atm

[23:48] *** revdiablo joined
[23:50] <lue> r: grammar G { token TOP { <multiple(2.3)> }; token multiple($by) { (\-? <digit>+ [\. <digit>+]?) <?{ (+$0 / $by).narrow ~~ Int }> } }; G.parse("4.6").say; G.parse("-5").say

[23:50] <camelia> rakudo-parrot 522629, rakudo-jvm 522629, rakudo-moar 522629: OUTPUT¬´ÔΩ¢4.6ÔΩ£‚ê§ multiple => ÔΩ¢4.6ÔΩ£‚ê§  0 => ÔΩ¢4.6ÔΩ£‚ê§   digit => ÔΩ¢4ÔΩ£‚ê§   digit => ÔΩ¢6ÔΩ£‚ê§‚ê§(Any)‚ê§¬ª

[23:50] *** brother left
[23:50] <lue> That's    http://www.unicode.org/reports/tr18/#RL3.11    :)

[23:50] *** brother joined
[23:51] <TimToady> I think it's parsing <&foo> with the <variable> rule rather than a recursive assertion

[23:52] <dalek> nqp: 74c2c59 | rurban++ | tools/build/Makefile-Parrot.in:

[23:52] <dalek> nqp: more Makefile-Parrot.in fixes for cygwin GH #163

[23:52] <dalek> nqp: 

[23:52] <dalek> nqp: CP destroys the -x attribute, because we are not using cp

[23:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/74c2c59968

[23:53] <Quom> m: my sub foo($bar = "oops") { foo {say $bar} }; say "foo" ~~ /<&foo("baz")>/

[23:53] <camelia> rakudo-moar 522629: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/NksBFKP2Mb‚ê§Unable to parse expression in metachar:sym<assert>; couldn't find final '>' ‚ê§at /tmp/NksBFKP2Mb:1‚ê§------> [32m { foo {say $bar} }; say "foo" ~~ /<&foo[33m‚èè[31m("baz")>/[0m‚ê§¬ª

[23:53] <Quom> Huh

[23:53] <Quom> m: my sub foo($bar = "oops") { foo {say $bar} }; say "foo" ~~ /<&foo: "baz">/

[23:53] <camelia> rakudo-moar 522629: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/xl3yVCCpRe‚ê§Unable to parse expression in metachar:sym<assert>; couldn't find final '>' ‚ê§at /tmp/xl3yVCCpRe:1‚ê§------> [32m { foo {say $bar} }; say "foo" ~~ /<&foo[33m‚èè[31m: "baz">/[0m‚ê§¬ª

[23:54] <Quom> std: my sub foo($bar = "oops") { foo {say $bar} }; say "foo" ~~ /<&foo("baz")>/

[23:54] <camelia> std 09dda5b: OUTPUT¬´ok 00:01 136m‚ê§¬ª

[23:54] <TimToady> std calls EXPR there rather than variable

[23:55] <TimToady> though arguably it should be limited to term

[23:56] <TimToady> well, except that postfixes are done by EXPR, duh

[23:57] <timotimo> happi day eu timezone inhabitants

[23:59] *** dmol left
[23:59] *** xenoterracide joined
