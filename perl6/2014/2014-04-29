[00:00] *** dmol joined
[00:01] *** hoverboard joined
[00:06] *** grep0r left
[00:08] *** grep0r joined
[00:11] *** kshannon left
[00:11] *** dmol left
[00:11] *** sftp left
[00:12] *** kshannon joined
[00:16] *** sftp joined
[00:30] *** raiph joined
[00:46] *** cognominal left
[00:47] *** cognominal joined
[00:52] *** woosley joined
[00:55] *** hoverboard is now known as Se7en

[00:55] *** xenoterracide joined
[00:56] *** Se7en is now known as Guest66657

[00:56] *** Guest66657 is now known as hoverboard

[01:03] *** xenoterracide left
[01:05] *** sftp left
[01:07] *** sftp joined
[01:10] *** FROGGS_ joined
[01:14] *** FROGGS left
[01:17] *** hoverboard left
[01:21] *** dayangkun_ joined
[01:21] *** dayangkun_ left
[01:25] *** dayangkun left
[01:38] *** plobsing joined
[01:55] *** Su-Shee_ joined
[01:56] *** klapperl_ left
[01:58] *** klapperl joined
[01:59] *** Su-Shee left
[02:12] *** ClarusCogitatio left
[02:14] *** ClarusCogitatio joined
[02:15] *** ClarusCogitatio left
[02:17] *** sftp left
[02:18] *** sftp joined
[02:19] *** ClarusCogitatio joined
[02:23] *** ClarusCogitatio left
[02:28] *** ClarusCogitatio joined
[02:33] *** xragnar_ joined
[02:33] *** xragnar left
[02:33] *** xragnar_ is now known as xragnar

[02:35] *** ClarusCogitatio left
[02:42] *** rurban joined
[02:47] *** ClarusCogitatio joined
[02:49] *** Pleiades` left
[02:54] *** Pleiades` joined
[02:56] *** ClarusCogitatio left
[03:02] *** ClarusCogitatio joined
[03:02] *** ClarusCogitatio left
[03:02] *** ClarusCogitatio joined
[03:03] *** ClarusCogitatio left
[03:04] *** ClarusCogitatio joined
[03:09] *** ClarusCogitatio left
[03:10] *** ClarusCogitatio joined
[03:11] *** SamuraiJack joined
[03:11] *** ClarusCogitatio left
[03:12] *** ClarusCogitatio joined
[03:12] *** ClarusCogitatio left
[03:12] *** ClarusCogitatio joined
[03:13] *** btyler joined
[03:22] *** adu joined
[03:24] *** kaare_ joined
[03:25] *** Alula_ left
[03:37] *** ClarusCogitatio left
[03:42] *** ClarusCogitatio joined
[03:43] *** ClarusCogitatio left
[03:44] *** ClarusCogitatio joined
[03:46] <dalek> perl6-roast-data: 5bdffcb | coke++ | / (6 files):

[03:46] <dalek> perl6-roast-data: today (automated commit)

[03:46] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/5bdffcbd99

[03:48] *** btyler left
[03:49] *** ClarusCogitatio left
[03:50] *** ClarusCogitatio joined
[04:08] *** sftp left
[04:15] *** ClarusCogitatio left
[04:15] *** sftp joined
[04:18] *** kaare_ left
[04:22] *** ClarusCogitatio joined
[04:22] *** ClarusCogitatio left
[04:22] *** ClarusCogitatio joined
[04:28] *** ClarusCogitatio left
[04:30] *** hoverboard joined
[04:35] *** ClarusCogitatio joined
[04:38] *** Alula_ joined
[04:43] *** kaare_ joined
[04:45] *** pat_js joined
[04:47] *** hoverboard is now known as moistcherry

[04:55] *** rurban left
[04:55] *** pat_js left
[04:57] *** pat_js joined
[05:04] *** denis_boyun_ joined
[05:06] *** adu left
[05:07] *** Mouq joined
[05:08] <Mouq> In progress: http://mouq.github.io/perl6-feast/

[05:10] <Mouq> (This version also seems to run much faster than the old one)

[05:12] <Mouq> My hope is that where it says "(N skipped)" etc., I'd like to actually have the descriptions followed by the code of the actual tests being skipped

[05:13] <Mouq> And, as always, feel free to PR :)

[05:14] *** ClarusCogitatio left
[05:15] <Mouq> (Er, the actual repo is at https://github.com/Mouq/perl6-feast . I should probably link to it from the page)

[05:17] <pat_js> hey I haven't been around lately is panda still the preferred application for installing perl6 modules?

[05:17] <Mouq> pat_js: Yup

[05:17] <pat_js> thanks Mouq++

[05:17] <Mouq> np :)

[05:21] *** [Sno] left
[05:21] <pat_js> do you, by any chance, know which branch is working with an rakudo from yesterday? master doesn't seem to work

[05:21] <Mouq> nom?

[05:21] <Mouq> I'm not sure what you mean

[05:22] <Mouq> The "master" branch for rakudo is nom

[05:22] <Mouq> And then nqp/parrot/moarvm's master branches are actually master

[05:23] <Mouq> Or are you saying the latest Rakudo isn't compiling?

[05:23] <pat_js> panda's bootstrap.pm has errors.

[05:24] *** ClarusCogitatio joined
[05:24] *** ClarusCogitatio left
[05:24] *** ClarusCogitatio joined
[05:24] <Mouq> pat_js: Try rebootstrap.p6

[05:25] *** ClarusCogitatio left
[05:25] *** rurban joined
[05:26] *** ClarusCogitatio joined
[05:26] *** ClarusCogitatio left
[05:26] *** ClarusCogitatio joined
[05:26] *** telex left
[05:26] *** ClarusCogitatio left
[05:27] *** ClarusCogitatio joined
[05:28] *** telex joined
[05:29] *** rurban left
[05:33] <FROGGS_> pat_js: panda was working for me yesterday, I installed latest rakudo and cloned panda on an ubuntu 14.04 box for testing

[05:34] <pat_js> hmm I get an error that $*EXECUTABLE is not defined. I looked it up and it indeed should be $*EXECUTABLE_NAME

[05:34] <tadzik> （　° ー°）

[05:34] <Mouq> pat_js: Then you're using an old Perl6 with a new Panda

[05:35] <tadzik> you can checkout 2693bbc536bb02930a1a2ba38fcd2f194f748b48

[05:35] <tadzik> r: say $*EXECUTABLE

[05:35] <camelia> rakudo-jvm dfd343: OUTPUT«IO::Path</home/p6eval/rakudo-inst-2/bin/perl6-j>␤»

[05:35] <camelia> ..rakudo-moar dfd343: OUTPUT«IO::Path</home/p6eval/rakudo-inst-1/bin/perl6-m>␤»

[05:35] <camelia> ..rakudo-parrot dfd343: OUTPUT«IO::Path</home/p6eval/rakudo-inst/bin/perl6-p>␤»

[05:37] <pat_js> yeah i see it now. I thought I had it updated this weekend but I still have some version from last November. 

[05:37] <pat_js> sorry, my bad.

[05:37] *** SamuraiJack left
[05:37] *** SamuraiJack joined
[05:40] <tadzik> I should probably tag panda, depending on how new $*EXECUTABLE is

[05:40] <tadzik> so one can easily checkout the version that works on their older rakudos

[05:40] <tadzik> I sometimes remember to do that before breaking changes :)

[05:42] <Mouq> pat_js: No sweat :)

[05:42] * Mouq out

[05:42] *** Mouq left
[05:44] *** SamuraiJack left
[05:55] *** SamuraiJack joined
[06:05] *** ivanshmakov joined
[06:07] *** BenGoldberg left
[06:07] *** ivanshmakov left
[06:07] *** ivanshmakov joined
[06:07] *** SamuraiJack left
[06:08] *** sftp left
[06:08] *** sftp joined
[06:21] *** FROGGS_ left
[06:22] *** sftp left
[06:25] *** ClarusCogitatio left
[06:26] *** ClarusCogitatio joined
[06:29] *** dmol joined
[06:31] *** darutoko joined
[06:36] *** anaeem1 joined
[06:37] *** [Sno] joined
[06:37] *** ClarusCogitatio left
[06:38] *** sftp joined
[06:43] *** FROGGS joined
[06:48] *** ClarusCogitatio joined
[06:48] *** zakharyas joined
[06:49] *** ClarusCogitatio left
[06:50] *** ClarusCogitatio joined
[06:52] *** ClarusCogitatio left
[06:52] <jnthn> morning, #perl6

[06:53] <raydiak> morning jnthn

[06:53] *** ClarusCogitatio joined
[06:53] * jnthn slurps coffee

[06:56] <moritz> \o

[06:56] <moritz> jnthn: are you still planning to do the R* release this month?

[06:56] <raydiak> o/

[06:58] <sergot> o/

[06:59] <FROGGS> morning

[06:59] <jnthn> moritz: Yes, though don't have a lot of free time until Thursday, which is not this month any more :/

[07:00] <moritz> ah well, a day or two won't kill anybody

[07:00] <FROGGS> could be a new tradition to do it on the 1st :o)

[07:01] <jnthn> Will see if I have a little time tonight after teaching.

[07:01] *** ClarusCogitatio left
[07:03] *** ClarusCogitatio joined
[07:04] *** kaleem joined
[07:05] *** ClarusCogitatio left
[07:05] *** moistcherry is now known as hoverboard

[07:07] *** ClarusCogitatio joined
[07:08] *** ClarusCogitatio left
[07:09] *** ClarusCogitatio joined
[07:12] *** ClarusCogitatio left
[07:13] *** igorsutton joined
[07:13] <igorsutton> hi

[07:13] *** hoverboard is now known as moistcherry

[07:13] *** ClarusCogitatio joined
[07:14] <moritz> hello igorsutton 

[07:27] *** rurban joined
[07:29] *** spider-mario joined
[07:30] *** dmol left
[07:30] *** rindolf joined
[07:30] <lizmat> good * moritz igorsutton and the rest of #perl6

[07:31] *** dmol joined
[07:31] *** rurban left
[07:36] <raydiak> g'night #perl6

[07:36] *** Su-Shee_ is now known as Su-Shee

[07:40] *** logie left
[07:41] *** darutoko- joined
[07:42] *** anaeem1 left
[07:42] *** anaeem1_ joined
[07:43] *** darutoko left
[07:46] *** hummeleB1 joined
[07:47] *** darutoko- left
[07:48] *** darutoko- joined
[07:50] *** dmol left
[07:51] *** dmol joined
[07:52] *** darutoko joined
[07:52] *** dmol left
[07:54] *** dmol joined
[07:54] *** darutoko- left
[07:55] *** darutoko- joined
[07:56] *** fhelmberger joined
[07:58] *** darutoko left
[08:04] *** moistcherry left
[08:19] *** darutoko joined
[08:21] *** Sqirrel joined
[08:21] *** SamuraiJack joined
[08:22] *** darutoko- left
[08:27] *** darutoko- joined
[08:30] *** darutoko left
[08:37] *** denis_boyun_ left
[08:40] *** bjz left
[09:01] *** bjz joined
[09:07] *** bjz left
[09:10] *** donaldh joined
[09:11] *** fhelmberger_ joined
[09:11] *** fhelmberger left
[09:28] *** rurban joined
[09:33] *** rurban left
[09:40] *** denis_boyun_ joined
[09:54] *** baest left
[10:00] *** kaare_ left
[10:07] *** salv0 left
[10:07] *** baest joined
[10:07] *** salv0 joined
[10:10] *** kaare_ joined
[10:10] *** pat_js left
[10:12] *** woosley left
[10:15] *** Alina-malina left
[10:16] *** Alina-malina joined
[10:16] *** rindolf left
[10:22] * Ulti notices just how many lurkers there are

[10:22] *** darutoko joined
[10:25] *** darutoko- left
[10:27] <lizmat> and then we don't even know how many people lurk on the irclogs

[10:29] *** rurban joined
[10:31] *** rurban1 joined
[10:33] *** rurban left
[10:35] *** rurban1 left
[10:35] <nwc10> Hello to all my friends and fans in domestic surveillanc

[10:35] <nwc10> oops

[10:36] <nwc10> Hello to all my friends and fans in domestic surveillance

[10:36] <Ulti> lizmat well you can probably guess from IP and get requests

[10:36] <Ulti> might be a neat addition to the log website

[10:37] <Ulti> nwc10 highly unlikely they are keeping an eye on #perl6 unless we say BOMB NSA GCHQ TERROR ATTACK NUKE woops...

[10:39] <jercos> proposal: reverse the operand order of %%, rename it to "gozinta"

[10:39] <jnthn> We could just reverse the chars in the operator...

[10:41] * nwc10 worries that this is the start of LOLMOAR

[10:41] <lizmat> .oO( bazinga! )

[10:41] <jercos> r: sub infix:<gozinta>($a, $b) {$b %% $a};say 7 gozinta 14

[10:41] <camelia> rakudo-{parrot,jvm,moar} dfd343: OUTPUT«True␤»

[10:41] <jnthn> I actually just serached for a Unicode char that is a backwards % sign :P

[10:41] <jercos> r: sub infix:<gozinta>($a, $b) {$b %% $a};say 5 gozinta 14

[10:41] <camelia> rakudo-{parrot,jvm,moar} dfd343: OUTPUT«False␤»

[10:42] <jnthn> jercos: Note you can already spell it R%%

[10:42] <nwc10> is there lolcode for a current (enough) NQP toolchain?

[10:42] <jercos> True enough. meta-ops <3

[10:46] *** sqirrel_ joined
[10:49] *** cognominal left
[10:50] *** cognominal joined
[11:01] <dalek> roast: fb627e3 | (Elizabeth Mattijsen)++ | S32-list/first-index.t:

[11:01] <dalek> roast: Add tests for first-index

[11:01] <dalek> roast: review: https://github.com/perl6/roast/commit/fb627e39ce

[11:01] *** sqirrel_ left
[11:07] <dalek> roast: 3fa50a0 | (Elizabeth Mattijsen)++ | S32-list/first-rindex.t:

[11:07] <dalek> roast: Add tests for first-rindex

[11:07] <dalek> roast: review: https://github.com/perl6/roast/commit/3fa50a095e

[11:13] <dalek> rakudo/nom: c9f2239 | (Elizabeth Mattijsen)++ | t/spectest.data:

[11:13] <dalek> rakudo/nom: Add tests for first-(r)index to spectest

[11:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c9f22398c4

[11:24] *** Sqirrel left
[11:26] *** kaleem left
[11:39] *** skids left
[11:40] *** fhelmberger_ left
[11:40] *** fhelmberger joined
[11:43] *** grep0r left
[11:47] *** grep0r joined
[11:54] *** Alina-malina left
[11:55] *** fhelmberger_ joined
[11:55] *** fhelmberger left
[11:58] *** Gothmog_ joined
[12:00] *** kurahaupo joined
[12:01] *** fhelmberger_ left
[12:01] <timotimo> m: my &infix:<gozinta> = &[R%%]; say 5 gozinta 15

[12:01] <camelia> rakudo-moar dfd343: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/1Z_S9wLKcv␤Variable '&infix:<R%%>' is not declared␤at /tmp/1Z_S9wLKcv:1␤------> [32mmy &infix:<gozinta> = &[R%%][33m⏏[31m; say 5 gozinta 15[0m␤    expecting any of:␤        postfix␤»

[12:02] <timotimo> :(

[12:06] <lizmat> jnthn: wrt to S17-supply/delay.t tests: I think something goes wrong internally and the error is not seen

[12:06] <lizmat> the tap gets a "done" too soon, before it can even schedule

[12:07] <lizmat> (this using ThreadPoolScheduler, CurrentThreadScheduler works fine)

[12:08] *** Alina-malina joined
[12:09] <dalek> roast: 8ea1475 | (Elizabeth Mattijsen)++ | packages/Test/Tap.pm:

[12:09] <dalek> roast: Added ":more" and ":done" feature to tap_ok

[12:09] <dalek> roast: 

[12:09] <dalek> roast: Mostly useful for debugging tests, I would think.

[12:09] <dalek> roast: review: https://github.com/perl6/roast/commit/8ea14754ef

[12:14] *** fhelmberger joined
[12:18] *** grep0r left
[12:23] *** grep0r joined
[12:26] <jnthn> lizmat: Hmm...does the done get delayed too?

[12:32] *** rurban joined
[12:33] *** ClarusCogitatio left
[12:33] <lizmat> yes

[12:36] *** ClarusCogitatio joined
[12:36] *** xenoterracide joined
[12:36] *** rurban left
[12:40] *** pat_js joined
[12:46] *** ClarusCogitatio left
[12:49] *** ClarusCogitatio joined
[12:51] <lizmat> jnthn: could it have to do with on-demandness of the Supply ?

[12:53] <jnthn> Don't think so...but maybe

[12:54] <jnthn> Need to teach...so I'll just make a pun about supply and demand and bbl :)

[12:54] *** skids joined
[12:57] <lizmat> hehe... the plot thickens though, as it seems that the done is not delayed  :-(

[13:05] *** xenoterracide left
[13:06] <lizmat> jnthn: could it be that I need to delay a closing as well?

[13:06] *** grep0r left
[13:08] <dalek> roast: cead30e | (Elizabeth Mattijsen)++ | S17-supply/delay.t:

[13:08] <dalek> roast: Some more Supply.delay testing

[13:08] <dalek> roast: review: https://github.com/perl6/roast/commit/cead30e59e

[13:09] *** grep0r joined
[13:13] *** xenoterracide joined
[13:14] *** ClarusCogitatio left
[13:14] *** SamuraiJack left
[13:18] *** xenoterracide left
[13:18] *** ClarusCogitatio joined
[13:21] *** ClarusCogitatio left
[13:22] *** ClarusCogitatio joined
[13:22] *** ClarusCogitatio left
[13:22] *** ClarusCogitatio joined
[13:22] *** kaare_ left
[13:25] *** hummeleB1 left
[13:27] *** guru joined
[13:27] *** ClarusCogitatio left
[13:27] *** guru is now known as Guest28705

[13:28] *** Guest28705 is now known as ajr_

[13:33] *** rurban joined
[13:34] *** ClarusCogitatio joined
[13:34] *** ClarusCogitatio left
[13:34] *** ClarusCogitatio joined
[13:35] <lizmat> afk for a while&

[13:35] *** ClarusCogitatio left
[13:36] *** Alina-malina left
[13:36] *** ClarusCogitatio joined
[13:37] *** ClarusCogitatio left
[13:37] *** Alina-malina joined
[13:37] *** rurban left
[13:37] *** ClarusCogitatio joined
[13:41] *** donaldh left
[13:42] *** ClarusCogitatio left
[13:43] *** Alina-malina left
[13:45] *** ClarusCogitatio joined
[13:47] *** Alina-malina joined
[13:51] *** ClarusCogitatio left
[13:54] *** logie joined
[13:56] *** ClarusCogitatio joined
[13:56] *** ClarusCogitatio left
[13:57] *** ClarusCogitatio joined
[13:57] *** ClarusCogitatio left
[13:57] *** ClarusCogitatio joined
[13:59] *** ClarusCogitatio left
[14:01] *** bluescreen10 joined
[14:01] *** ClarusCogitatio joined
[14:01] *** ClarusCogitatio left
[14:01] *** ClarusCogitatio joined
[14:03] *** btyler joined
[14:03] *** bjz joined
[14:04] *** salv0 left
[14:12] *** skids left
[14:18] *** plobsing left
[14:21] *** xinming__ joined
[14:22] *** salv0 joined
[14:23] *** ClarusCogitatio left
[14:24] *** xinming_ left
[14:26] *** sftp left
[14:26] *** ClarusCogitatio joined
[14:28] *** sftp joined
[14:32] *** ClarusCogitatio left
[14:34] *** rurban joined
[14:35] *** treehug88 joined
[14:35] *** rindolf joined
[14:36] *** kaare_ joined
[14:37] *** kaare_ left
[14:37] *** ClarusCogitatio joined
[14:39] *** ClarusCogitatio left
[14:40] *** ClarusCogitatio joined
[14:40] *** ClarusCogitatio left
[14:40] *** ClarusCogitatio joined
[14:40] *** SamuraiJack joined
[14:41] *** ClarusCogitatio left
[14:41] *** kaare_ joined
[14:42] *** ClarusCogitatio joined
[14:42] *** ClarusCogitatio left
[14:42] *** ClarusCogitatio joined
[14:43] *** ClarusCogitatio left
[14:45] *** kaare_ left
[14:46] *** ClarusCogitatio joined
[14:47] *** ClarusCogitatio left
[14:48] *** ClarusCogitatio joined
[14:48] *** ClarusCogitatio left
[14:48] *** ClarusCogitatio joined
[14:49] *** ClarusCogitatio left
[14:52] *** ClarusCogitatio joined
[14:58] *** ClarusCogitatio left
[15:00] <hoelzro> morning #perl6

[15:00] <hoelzro> timotimo: I have wonderful news for you

[15:00] <hoelzro> I have had this one bug in an application since January that's been on the top of my OSS priority list

[15:00] <hoelzro> and last night I fixed it =)

[15:00] *** raiph left
[15:00] <hoelzro> so guess what's next on the heap?

[15:00] <colomon> hoelzro++

[15:01] <timotimo> \o/

[15:01] *** ClarusCogitatio joined
[15:01] <timotimo> that sounds like i'm going to be enjoying your contributions in the near future :)

[15:01] <hoelzro> in other news, reading all of these posts/talks about supplies just makes me think of Starcraft

[15:01] *** pat_js left
[15:02] <hoelzro> indeed!

[15:02] <timotimo> you must construct additional pylons

[15:02] <hoelzro> use Supply::Depot;

[15:02] <timotimo> :3

[15:03] <hoelzro> I offer up that namespace to whomever puts it to good use =)

[15:04] *** igorsutton left
[15:04] <timotimo> i don't have a good idea as of yet

[15:04] *** igorsutton joined
[15:07] *** denis_boyun_ left
[15:07] *** bjz left
[15:07] <jnthn> hotel &

[15:08] <jnthn> (btw, a gaming application of supplies would be awesome! :D)

[15:09] *** igorsutton left
[15:09] <tadzik> I could probably find some :)

[15:11] *** ClarusCogitatio left
[15:12] *** xinming__ left
[15:17] *** ClarusCogitatio joined
[15:21] *** kurahaupo left
[15:26] *** guru joined
[15:26] *** ajr_ left
[15:26] *** guru is now known as Guest82977

[15:30] *** Guest82977 is now known as ajr_

[15:31] *** [Sno] left
[15:40] *** Vlavv left
[15:44] * timotimo finally gets a fresh linux onto his desktop

[15:44] *** bjz joined
[15:49] * TimToady has been working on that too; installed ubuntu 14.04 on a new partition, but have to copy over a bunch of conf files before really switching...

[15:50] <TimToady> (upgrade in place didn't work for some reason)

[15:51] *** bjz left
[15:51] <timotimo> i've killed the contents of a relatively fresh hard drive and put a fedora onto it

[15:52] <timotimo> i expected the installer to find my old linux again and make it available on the boot menu

[15:52] <timotimo> turns out ... no :)

[15:52] * jnthn just sticks Linux in a VM :)

[15:52] <TimToady> well, fdisk should tell you if the old partition is still there

[15:53] <timotimo> i'm pretty certain they are

[15:53] *** Vlavv joined
[15:53] <TimToady> good time to learn the "mount" command then :)

[15:53] <timotimo> the installer showed a summary of partitioning actions it'd do and changing my sda wasn't on that list :)

[15:53] <FROGGS> I use a linux cd/dvd/stick and then usually gpart to repair disks

[15:53] *** darutoko- joined
[15:53] <timotimo> fortunately i've been using gentoo for a couple years some time ago, so i kind of know what i'm doing :)

[15:54] *** FROGGS left
[15:55] *** rurban left
[15:55] *** denis_boyun_ joined
[15:55] *** darutoko left
[15:58] *** donaldh joined
[15:58] *** rurban joined
[15:58] <masak> hi from... a train! \o

[15:58] <timotimo> heyo masak :)

[15:59] <TimToady> hopefully a train of thoughts

[15:59] <jnthn> masak: have a raily good journey!

[15:59] * TimToady clacks at jnthn

[16:01] <timotimo> now i'll have a system with btrfs, yay

[16:03] <itz> is the czech workshop really on Tue/Wed? or is my calender old

[16:04] <jnthn> It's really a tue/wed

[16:04] <lizmat> yup

[16:05] *** btyler left
[16:07] <lizmat> m: sub term:<1min>() { Duration.new(60) }; say 1min

[16:07] <camelia> rakudo-moar c9f223: OUTPUT«60␤»

[16:07] <lizmat> however, if I put this in the settings, I get:

[16:08] <lizmat> $ perl6 -e 'say 1min'

[16:08] <lizmat> ===SORRY!=== Error while compiling -e

[16:08] <lizmat> Confused

[16:08] <lizmat> at -e:1

[16:08] <lizmat> ------> say 1⏏min

[16:08] <lizmat>     expecting any of:

[16:08] <lizmat>         whitespace

[16:08] <lizmat> suggestions?

[16:08] <jnthn> lizmat: Also need to define it in Grammar.pm

[16:08] <jnthn> uh, .nqp

[16:08] <lizmat> +    token postfix:sym<1min>  { <sym> >> <O('%methodcall')> }

[16:08] <lizmat> like that?

[16:08] <lizmat> oops

[16:09] <jnthn> no, as a term, I think.

[16:09] <lizmat> ack

[16:10] *** zakharyas left
[16:11] *** FROGGS joined
[16:11] *** hummeleB1 joined
[16:11] *** rurban left
[16:12] * TimToady thinks combining numbers and letters like that is a Really Bad Idea

[16:12] <lizmat> ok, I'll take that as a veto then  :-)

[16:13] <FROGGS> I hope it is not too l8 for a veto :o)

[16:14] *** spider-mario left
[16:14] *** spider-mario_ joined
[16:14] <lizmat> TimToady: could you elaborate on why?  Just for my understanding...

[16:15] <TimToady> it seems to be confusing the concepts of term and postfix, and be a low-luminance feature

[16:15] *** spider-mario_ is now known as spider-mario

[16:15] <TimToady> why not make a postfix "min" that can operate on a 1

[16:15] <lizmat> TimToady: this was my diff: https://gist.github.com/lizmat/11404980

[16:15] <TimToady> assuming one wants to introduce units into the setting, which is problematic

[16:15] *** dmol left
[16:16] <timotimo> a "minutes" and "seconds" method for numbers? :)

[16:16] <lizmat> so you could say: 1min or 2mins

[16:16] <TimToady> a postfix is not necessarily a method

[16:16] *** dmol joined
[16:16] <timotimo> well, it could be a method; that'd make it more discoverable, too

[16:16] <FROGGS> 1.min? nooooooo /o\

[16:17] <TimToady> we're not gonna overload numeric methods with all the possible uses of numbers

[16:17] <timotimo> :D

[16:17] <TimToady> units, if we have 'em, should work more like postfixes

[16:17] <raydiak> m: sub postfix:<mins>($count) { Duration.new(60*$count) }; say 3mins

[16:17] <camelia> rakudo-moar c9f223: OUTPUT«180␤»

[16:18] <TimToady> I think the use of plurals on units is somewhat misguided

[16:18] <TimToady> 2.54cm

[16:18] <lizmat> raydiak: this is what is in my gist :-)

[16:18] <TimToady> not 2.54cms

[16:18] <FROGGS> yeah, at least that is consistent with 1st, 2nd, 42rd

[16:18] <raydiak> I dislike the minimum/minutes collision tho

[16:19] <timotimo> i was suggesting to make it a method "minutes".

[16:19] <TimToady> well, there's no "minimum" in the postfix space currently

[16:19] <FROGGS> oh oh oh... do we get the unit 'cups' then also? :D

[16:19] <timotimo> :D

[16:19] <TimToady> presumably you'd only use it where it makes sense

[16:19] <raydiak> true, the collision only exists in my head :)

[16:19] <TimToady> I suspect the sane thing to do is to import the units you're really interested in

[16:20] <lizmat> so how would a unit like "cm" look like?

[16:20] <lizmat> 42.cm ?

[16:20] <TimToady> no, units are not methods!!!!!

[16:20] <masak> I think introducing units postfixes into the setting would require a lot more community buy-in than what we have so far.

[16:20] <lizmat> or 42cm

[16:20] <[Coke]> -1 on this being in core.

[16:20] <moritz> -1 too

[16:21] <TimToady> it's fine to import them

[16:21] *** rurban joined
[16:21] <masak> please do this kind of experimentation outside of core first.

[16:21] <moritz> lizmat: 42.cm looks cute, but IMHO it's not the responsibility of the Int type to know how to turn itself into a length unit

[16:21] <TimToady> and the . isn't necessary

[16:21] <lizmat> well, it would live in Numeric but 

[16:21] <masak> lizmat: number types should not do units -- among the very many things they shouldn't do.

[16:21] <PerlJam> moritz: but ... but ... ruby does it   ;)

[16:21] <TimToady> we use \ on postfixes if they're ambiguous

[16:21] <TimToady> $x\i

[16:22] <masak> FROGGS: you pervert :P

[16:22] <masak> FROGGS: people start talking about units, and the first thing you think about is bra sizes :P

[16:22] * moritz thought something else

[16:22] <TimToady> masak: keep trying...or better yet, don't... :P

[16:23] <moritz> but that would require a 'girls' unit too... 

[16:23] *** thou joined
[16:23] <lizmat> so do we want units in core?  

[16:23] <[Coke]> nope.

[16:23] <masak> no.

[16:24] <moritz> no

[16:24] <lizmat> do we need something like sub unit:<cm>($cm) { ... } ?

[16:24] <TimToady> there you have it :)

[16:24] <lizmat> ok

[16:24] <[Coke]> sorry, lizmat!

[16:24] <masak> lizmat: no.

[16:24] <TimToady> not unless we distinguish units syntactically from postfixes, which we don't currently

[16:24] <lizmat> fwiw, *if* we would do units

[16:25] <masak> I'm still looking forward to an excellent/useful unit module.

[16:25] <lizmat> I feel it should have whitespace between the value and the unit

[16:25] <masak> haven't seen one yet.

[16:25] <PerlJam> Didn't we have the "units" discussion at least once already?  (prior to lizmat joining #perl6 I'm sure)

[16:25] <masak> PerlJam: I think there is one on p6l, far back.

[16:25] <TimToady> lizmat: allowing whitespace would be insane

[16:26] <lizmat> too cobolly ?

[16:26] <masak> PerlJam: I played around with them in http://strangelyconsistent.org/blog/6-builtins-in-perl-6-that-you-never-knew-you-needed

[16:26] <TimToady> don't want to mix postfixes in with infixes

[16:26] <masak> TimToady, defender of the term/op self-clocking.

[16:27] <masak> (TimToady++)

[16:27] <raydiak> what sorts of things do we consider when deciding what does or does not belong in core?

[16:27] <PerlJam> raydiak: Whether TimToady likes it or now ;)

[16:27] <PerlJam> er, s/now/not/

[16:28] <TimToady> or contrariwise, defining them as infixes without a right argument would also be insane

[16:28] <raydiak> PerlJam: beisdes the obvious :)

[16:28] <masak> raydiak: the ratio between use and cost.

[16:28] <PerlJam> masak++ I was going to say "bang buck ratio" next :)

[16:29] * masak .oO( note to self: predicting what PerlJam says and then saying it brings instant karma ) :P

[16:29] <TimToady> even leaving out that "min" is a valid infix

[16:29] <PerlJam> masak: If you can predict what I'm going to say, let me know so that I can not bother saying it.

[16:30] <TimToady> the name belongs in the setting if it's universal, like basic math; this does not necessarily mean that the implementation has to live in core, if we can load the implementation lazily

[16:30] <masak> I place units in the "I'll believe it when I see it" category of possible features. until I see a genuinely useful/interesting implementation, I'm not going to vote for its inclusion in core.

[16:30] *** btyler joined
[16:30] <TimToady> the problem is that some units are nearly universal, while others are deeply cultural

[16:31] <masak> someone pointed out in a talk I went to recently that even if you have matching units, you can have completely incompatible *types*.

[16:32] <timotimo> i'm really, really looking forward to the time when we can finally lazily load in features ...

[16:32] <masak> which makes the naive assumption of "as long as the units match, everything's OK" useless.

[16:32] <moritz> masak: for example Nm can either be an angular momentum, or be reducible to Joule (Energy), and you totally cannot add them up

[16:33] <TimToady> not to be confused with nm :)

[16:33] <moritz> because Nm as angular momentum is actually a vector product, where force and way are perpendicular, whereas in the case of Energy, they must be parallel

[16:33] <TimToady> how does the 'units' program distinguish them?

[16:34] <masak> moritz: that was the example the guy made, actually. in his live demo, the universe exploded as a result of adding the two magnitudes.

[16:34] <TimToady> there's likely prior art on disambig

[16:34] <moritz> anyway, the point is that this whole stuff is much more complicated than it might look on the surface

[16:34] * masak installs units

[16:34] <masak> moritz: exactly.

[16:35] <timotimo> much install ...

[16:36] <TimToady> the user interface of units sucks, but a lot of thought has gone into disambiguation and commensuration...commensurateness...commensurability...

[16:37] * PerlJam suddenly wonders if the planck constant should be "in core"

[16:37] <TimToady> well, we could put c, but physicists usually just define it as 1 anyway :)

[16:37] * lizmat wonders what she stepped into  :-)

[16:38] <TimToady> so to a physicist, it's not E = mc², but just E = m

[16:38] <[Coke]> masak: (not in core) you're such a fiver! ;)

[16:38] <masak> TimToady: how 'units' solves it: `Unknown unit 'Joule'`

[16:39] <PerlJam> and how come we have pi, but not tau?   (or does that cross the line from "universal" to "cultural"? :)

[16:39] <masak> [Coke]: I think I am, yes. I deeply respect Perl 5, and I think they got this part very right.

[16:39] <moritz> TimToady: depends on the context

[16:39] *** fhelmberger left
[16:40] <moritz> CGS, Gauss and SI units are commonly used

[16:40] <moritz> PerlJam: it's universally cultural :-)

[16:40] <masak> [Coke]: but most of all, I really really like Perl 6, and I don't like seeing it encumbered by all kinds of cute-today regrets-tomorrow features.

[16:40] <TimToady> I should qualify that as "theoretical physicists"

[16:40] <moritz> TimToady: even there it depends

[16:41] <PerlJam> masak: That one is almost enough to make me start a masak-quotes file.

[16:41] <moritz> TimToady: those that do particle physics or astronomy or cosmology, yes

[16:41] <moritz> but for example solid state folks all think in eV instead

[16:41] <[Coke]> depending on how theoretically, maybe e= sqrt( (mc²)² + (pc)² ) !

[16:41] <TimToady> well, most of my sampling is from a black-hole quantum thermodynamicist :)

[16:41] <moritz> [Coke]++

[16:42] <masak> PerlJam: having 'tau' would move Perl 6 closer to the "we like to be different for being different's sake!" hair-on-end looks-like-a-hobo box.

[16:42] <lizmat> FWIW, disregarding the whole units discussion

[16:42] <[Coke]> I really like the idea of tau, but that ship is not sailing under our control.

[16:42] <TimToady> all the other theoretical physicists are really applied physicists, they just don't know it :P

[16:42] <lizmat> the reason I wanted to add things like "1min" was to be able to more clearly call subs/methods taking Durations

[16:43] <[Coke]> something(1(Duration))

[16:43] <[Coke]> ?

[16:43] <masak> [Coke]: (pc)² means "player character, squared", right? :P

[16:43] <lizmat> feels to me that since we have Durations, but no units to handle them, we could get rid of Duration altogether for clarity

[16:43] <TimToady> ick²

[16:43] <[Coke]> masak: :P²

[16:43] <TimToady> it's fine to have Durations, but require the units to be imported

[16:44] <masak> m: say Duration.new(1)

[16:44] <camelia> rakudo-moar c9f223: OUTPUT«1␤»

[16:44] <TimToady> Durations are universal, but durational units are often cultural

[16:44] *** [Sno] joined
[16:45] <masak> whether we have units or not, Duration.new(1) is fairly straightforward, if you ask me.

[16:45] <lizmat> TimToady: are you saying that "fortnight" would be a cultural duration ?

[16:45] <PerlJam> masak: that's one femtosecond, right?

[16:45] <timotimo> the difference is that duration actually has a unit, which is seconds (as you can see if you add it to an instant object)

[16:45] <lizmat> masak: that's not very huffman coded, now is it

[16:45] <moritz> German has no notion that corresponds to a fortnight

[16:46] <[Coke]> moritz: no one does. :P

[16:46] <[Coke]> (said the american...)

[16:46] <TimToady> a microfortnight is about 1.72 seconds, iirc

[16:47] <raydiak> sounds like something my son plays with...

[16:47] <itz> "My car gets 40 rods to the hogshead and that's the way I likes it!"

[16:47] <TimToady> no, about 1.2 seconds

[16:47] *** cognominal left
[16:48] <jnthn> lizmat: What are you trying to huffman code, exactly? sleep happily takes a number of seconds, as well as a Duration. The time-related supply methods also do.

[16:48] <jnthn> uh, well, they don't also take a Duration yet

[16:48] *** fhelmberger joined
[16:48] <jnthn> But they should.

[16:48] <masak> lizmat: what jnthn said.

[16:48] <jnthn> And probably just re-dispatch to the number-taking one given that's the more low-level of the two.

[16:48] <lizmat> I would almost argue that sleep should *only* take a duration

[16:48] <masak> feels like we're proposing a solution with no real problem to solve.

[16:49] <jnthn> lizmat: I'd call that "inventing a huffman problem to solve" ;)

[16:49] <lizmat> indeed, sorry everybody for the hubris

[16:49] <lizmat> I will go back to writing tests now  :-)

[16:49] <masak> there's nothing wrong with sleep() expecting seconds, IMHO.

[16:49] <lizmat> sleep expects Any atm

[16:50] <jnthn> And .Num's it, I guess?

[16:50] <masak> I'd be fine with Cool, but whateves.

[16:50] * masak is grateful/happy lizmat is thinking about and hacking on stuff

[16:51] * jnthn also

[16:51] * masak is also grateful that there are community counterbalances in place for a Lone Patcher :)

[16:51] *** fhelmberger left
[16:53] <lizmat> well, this didn't even make it to a commit

[16:54] <masak> :)

[16:54] <lizmat> because I like to test things before I commit and it didn't work

[16:55] <lizmat> afk&

[16:58] <woolfy> Maybe a bit less vagueness and jocularity and a bit more specifics would be helpful for lizmat.  I mean, if not "1min", how else should a timeframe be shortly specified in a Perl6-way?  I don't understand all the fuzz, but I'm not a real programmer anyway.

[17:00] <woolfy> So if somebody would be so nice to tell what it should be, and not just what it should NOT be, that would be extremely helpful and productive.  Thanks.

[17:01] <PerlJam> woolfy: Duration.new(60), or since most things take numbers meaning number of seconds, just 60.

[17:01] <TimToady> that's where I started; 1min is not composed of a number plus a postfix if you define it as a term, which is a design smell

[17:02] <woolfy> PerlJam: that sounds specific and helpful.

[17:02] <woolfy> TimToady: so that's how it should be according to you?

[17:02] <woolfy> Thanks.

[17:02] <TimToady> if the language allows 1min, it should always be parsed as a number plus a postfix

[17:03] <TimToady> mixing them together violates the independence of numbers and names

[17:03] <woolfy> Too bad, I hoped for some shortcuts.  I kinda like the idea of "1min"...  :-)

[17:03] *** hoverboard joined
[17:03] <TimToady> and if you define 1min as a term, what about 2min?

[17:03] <woolfy> 2min seems to be double of 1min...

[17:04] <TimToady> it's not productive if you define it as a term, but it is if you define 'min' as a postfix that can be applied to a number

[17:04] <PerlJam> woolfy: There's nothing that precludes someone from writing a module that makes "1min" work.   It's just living with the consequences that might be annoying  :)

[17:04] <retupmoca> m: sub postfix:<min>($m){ Duration.new(60 * $m) }; say 1min; # something like this, put into a module?

[17:04] <camelia> rakudo-moar c9f223: OUTPUT«60␤»

[17:04] <TimToady> yes

[17:04] <woolfy> you mean "1.min"?  or "1(min)" or "1<min>" or or or?

[17:04] <TimToady> no, 1min, precisely

[17:05] <TimToady> the only alternate form is 1\min

[17:05] <TimToady> m: say 1i

[17:05] <camelia> rakudo-moar c9f223: OUTPUT«0+1i␤»

[17:05] <TimToady> m: say 1\i

[17:05] <camelia> rakudo-moar c9f223: OUTPUT«0+1i␤»

[17:05] <TimToady> m: say 1.i

[17:05] <camelia> rakudo-moar c9f223: OUTPUT«No such method 'i' for invocant of type 'Int'␤  in block  at /tmp/JcGltkjX6h:1␤␤»

[17:05] <woolfy> hmmm...  I don't like slashes and backslashes in such a way, looks too much like we're going into regexes...

[17:05] <TimToady> m: say 1\    i   # well, this too

[17:05] <camelia> rakudo-moar c9f223: OUTPUT«0+1i␤»

[17:05] <TimToady> you only need the backslash (really an unspace) when it's ambiguous

[17:06] <TimToady> m: say (1)i  # also works

[17:06] <camelia> rakudo-moar c9f223: OUTPUT«0+1i␤»

[17:06] <woolfy> PerlJam: there's one thing you can count on, and that is that lizmat will make a lot of modules when things will not go into the core, and this might be very well one of the first...  :-)

[17:06] <jnthn> woolfy: 1foo and 1\foo are always equivalent, but if you have $variable\foo then it's needed to avoid amgiguity.

[17:06] <TimToady> 2.54cm would define an inch just fine

[17:06] <TimToady> and that's how it's usually written anyway

[17:06] <woolfy> TimToady: thanks for the explain

[17:07] * TimToady tends to be too concise sometimes

[17:07] <PerlJam> woolfy: It would be nice to have a Units module

[17:08] <TimToady> we could bikeshed how to import sets of related units :D

[17:08] <jnthn> woolfy: I think a lot of pepole are quite hesitant to see this in core. Especially because it ties into whether we want units to act like types too. And there's arguments for both ways, and I imho it'd be better to leave this stuff in module space.

[17:09] <jnthn> woolfy: At least until we have something enough folks are very comfortable with.

[17:10] <colomon> Units module +1

[17:11] <woolfy> jnthn: I have been programming with units before (15+ years ago) and it was stuff like "1min".  Maybe that was a module that lizmat built back then...  can't remember...

[17:11] <woolfy> jnthn: so if shortcuts are going to be allowed in the core, indeed, enough people should be comfortable with them...

[17:13] <TimToady> or at least the language designer should be comfortable that a lot of people will become comfortable with them eventually :)

[17:13] * woolfy and lizmat were planning to go to Spiderman 2 in our local cinema.  Plan is going to be executed in 10...  9...  8...  :-)

[17:13] <TimToady> o/

[17:13] <woolfy> afk

[17:13] <jnthn> woolfy: Enjoy :)

[17:13] <PerlJam> woolfy, lizmat: have fun!

[17:14] <colomon> Spiderman 2 is in theatres now?  Guess I really need to get around to seeing Spiderman 1.

[17:14] <PerlJam> btw, timotimo mentioned lazy loading ... is that in the spec somewhere?

[17:15] <TimToady> that would be an implementation issue, at the moment

[17:15] <masak> PerlJam: don't think so. it's mentioned now and again as the ultimate thing that would save startup time.

[17:15] <jnthn> Don't we already have enough implemenation issues? :D

[17:16] <TimToady> though, of course, performance is a user-visible interface, alas

[17:16] <jnthn> I think it's worth doing, I just don't have a good design idea.

[17:17] <PerlJam> Seems like it could also cause problems.  How is the compiler to know when to load a module and when to die?  How do you specify which items are to be lazily loaded and from where?  Would that be part of the setting?

[17:18] <TimToady> macros are the answer to everything :)

[17:18] <masak> argh

[17:18] <PerlJam> heh

[17:19] <jnthn> ESPECIALLY when they're called marco!

[17:19] <jnthn> I wonder if somehow trapping the lookup of the symbol would do it.

[17:19] <jnthn> "omg, did he just say Bag?"

[17:20] *** brrt joined
[17:20] <TimToady> well, that's how macros talk

[17:20] <jnthn> Except those aren't actually done as symbol lookups, but wvals..

[17:20] *** rurban left
[17:21] <TimToady> .oO(  quasi-from-disk { ... }  )

[17:21] *** rurban joined
[17:23] *** rurban left
[17:23] <TimToady> "omg, did she just say Bag?"   # channeling au++

[17:24] <timotimo> jnthn: and sadly, Cool would for example pull in hundreds of classes just because there are coercer methods

[17:24] <timotimo> ... except if the trap is placed somewhere more clever than where i'm thinking

[17:24] <moritz> http://stilldrinking.org/programming-sucks # me has been laughing manically

[17:25] <TimToady> Cool would not be a good candidate for this treatment

[17:26] <TimToady> laziness buys you nothing if you're always going to have to do it anyway, and in fact introduces useless overhead

[17:26] *** rurban joined
[17:26] *** Rotwang joined
[17:26] <TimToady> (a problem we need to solve on lists too)

[17:27] *** guru joined
[17:27] * FROGGS .oO( qw(a problem we need to solve on lists too) )

[17:27] <jnthn> I guess on lists a lot of it is knowing when we can chunk, and how chunky we can be.

[17:27] *** guru is now known as Guest6697

[17:28] <TimToady> problem is that it is really a negotation between two parties; one party cannot dictate

[17:28] <TimToady> "I don't care; do you care?"  "Yeah."  "Okay, then I care too."

[17:29] <TimToady> and because context is itself lazy, we have to do that negotiation JIT

[17:29] *** ajr_ left
[17:29] <TimToady> that's the short summary of pm++'s plan for revising list semantics

[17:29] <jnthn> Aye

[17:30] <TimToady> and part of the do-you-care is whether there are side effects

[17:30] *** Guest6697 left
[17:30] <jnthn> I really hope pm++ tuits will emerge...or somebody who groks the plan can supply stand-in tuits. :)

[17:31] * TimToady looks around, and whistles...

[17:32] * colomon wishes he grokked the plan and had tuits….

[17:36] <TimToady> there's something deep going on here with pull semantics vs push semantics too; lazy is pull, but eager is really push--at least, that's how I fixed the over-eager for, by making it the decision of the interator to be eager rather than the decision of 'for'

[17:36] <TimToady> so ranges, for instance, know they can be eager, because they have no side effects

[17:37] *** denis_boyun_ left
[17:38] <TimToady> so when used in a 'for', a range returns a thousand or so values in a batch

[17:38] <TimToady> unfortunately the top end of our iterators is not structured to take much advantage of tht yet

[17:39] <TimToady> hence the need for negotation

[17:40] *** vaskozl joined
[17:40] *** SamuraiJack left
[17:40] *** adu joined
[17:42] <TimToady> the spelling of negotiation is negotable...

[17:42] <ashleydev> it might be useful to note what node.js did with module loading which they initially had as asynchronous and decided to make it as one of the few synchronous things in node.

[17:43] <TimToady> yes, that's the correct default, I think

[17:43] <ashleydev> though that's not lazy/eager it's sync/async

[17:44] <TimToady> to the extent that module loading changes your current language, it must really be synchronous

[17:44] <ashleydev> they tried to hold out on that one for quite a while

[17:45] <[Coke]> colomon: asm2 not here in the US yet, i think.

[17:45] <ashleydev> .oO(this is javascript so we need to be pure!)

[17:45] <[Coke]> I am going to skip ASM2, but will have to see XM:DoFP

[17:45] <TimToady> yes, well, it's not really obvious to most language designers that languages are different from other things :)

[17:46] <colomon> [Coke]: XM:DoFP for sure, I absolutely adored the last XM movie (First Class?)

[17:47] *** bluescreen100 joined
[17:47] *** anaeem___ joined
[17:47] *** anaeem1_ left
[17:48] <raydiak> moritz++: thanks for sharing that link :)

[17:48] *** molaf_ left
[17:49] <[Coke]> colomon: mmm. I also really liked CA:WS (and the M:AoS tie in)

[17:49] <[Coke]> also really looking forward to GoTG.

[17:49] <jnthn> dinner &

[17:50] <masak> moritz: I enjoyed that article; thanks :)

[17:51] <FROGGS> cool, the labels really seem to work in perl6-m!

[17:51] *** bluescreen10 left
[17:54] *** ajr_ joined
[17:55] *** rurban left
[17:56] *** rurban joined
[17:57] <[Coke]> ٩(ಥ_ಥ)۶

[17:58] *** lvfjf joined
[17:58] <dalek> rakudo/loop_labels_test: 2e22d99 | (Tobias Leich)++ | src/core/control.pm:

[17:58] <dalek> rakudo/loop_labels_test: delegate to LABEL's method for redo/next also

[17:58] <dalek> rakudo/loop_labels_test: review: https://github.com/rakudo/rakudo/commit/2e22d996ac

[18:00] <FROGGS> m: my $x = 0; FOO: while $x++ < 1 { say &?BLOCK }

[18:00] <camelia> rakudo-moar c9f223: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/bfOIV2MQGi␤Undeclared routine:␤    &?BLOCK used at line 1␤␤»

[18:00] <FROGGS> n: my $x = 0; FOO: while $x++ < 1 { say &?BLOCK }

[18:00] <camelia> niecza v24-109-g48a8de3: OUTPUT«{ ... }␤»

[18:00] <FROGGS> :/

[18:01] *** rurban left
[18:01] <FROGGS> damnit, another can of worms

[18:06] <TimToady> .oO(the diet coke of worms)

[18:09] * [Coke] ears are burning.

[18:09] <TimToady> shoulda said "the Diet [Coke] of Worms"

[18:09] * [Coke] wonders if there's a way to say "/me's ears"

[18:10] <TimToady> zero-width space?

[18:10] <timotimo> terminals with fixed-width spaces will probably ignore that?

[18:10] <dalek> rakudo/loop_labels_test: b55b500 | (Tobias Leich)++ | src/core/PseudoStash.pm:

[18:10] <dalek> rakudo/loop_labels_test: fudge label ex throwing for parrot/jvm

[18:10] <dalek> rakudo/loop_labels_test: review: https://github.com/rakudo/rakudo/commit/b55b500df6

[18:10] <timotimo> fixed-width fonts*

[18:10] * TimToady 's

[18:11] <TimToady> aw, deletes the backspace

[18:11] <TimToady> maybe you could sneak an ANSI cursor movement through there

[18:12] *** MilkmanDan joined
[18:13] <timotimo> usually not :)

[18:14] *** SamuraiJack joined
[18:15] <TimToady> well, we sneak color escapes through, for some definition of 'through' not including the logs

[18:15] <TimToady> (yet)

[18:16] *** hoverboard is now known as moistcherry

[18:16] <raydiak> I am glad a cleverly crafted IRC message can't draw all over my terminal with abandon

[18:17] * raydiak imagines phishing for root passwords over IRC or other such nonsense

[18:17] <vaskozl> raydiak: what do you mean?

[18:17] * TimToady Password: 

[18:17] <raydiak> vaskozl: ^

[18:17] <vaskozl> oh..

[18:18] *** bakers joined
[18:19] <MilkmanDan> ********

[18:19] <MilkmanDan> That's mine.

[18:19] <timotimo> hunter2

[18:19] <timotimo> mine ^

[18:19] <raydiak> *facepalm*

[18:19] <vaskozl> but in unix the password never appears in plain text on the screen

[18:19] <MilkmanDan> timotimo: Type it again.  All I see are *s.

[18:19] <vaskozl> you never see * either

[18:20] <vaskozl> by default that is :/

[18:20] <raydiak> pretty sure the right control codes can turn echo off

[18:20] <vaskozl> raydiak: have you seen one that works?

[18:21] <raydiak> vaskozl: never tried.  speculating out of ignorance, tbh

[18:21] *** bakers left
[18:22] <vendethiel> "Every programmer starts out writing some perfect little snowflake like this" -- thanks for the laugh, moritz++

[18:22] <vendethiel> (as a student, I can see some great "programmer starting out" codes)

[18:23] <vendethiel> (considering how many teachers there are here (people helping newcomers too !), I'm sure lots of you know it very well too)

[18:23] <vaskozl> vendethiel: you a fellow noob?

[18:24] <vendethiel> vaskozl: I've read the synopsis, but other than that, pretty much :).

[18:24] <vaskozl> haha you are not alone

[18:34] *** SamuraiJack left
[18:35] * raydiak ponders snowflakes and decides Pray needs some attention

[18:40] * [Coke] finds http://www.availlang.org/ through a surprising blog source.

[18:42] * [Coke] quotes "Avail is a multi-paradigmatic general purpose programming language whose feature set emphasizes support for articulate programming."

[18:42] <brrt> so... many... languages

[18:43] <vendethiel> DSLs* :P

[18:44] <brrt> srsly though

[18:44] <brrt> how many languages have come 'out' just the last year?

[18:44] <brrt> or the last five

[18:45] <brrt> julia, rust, avail

[18:45] <TimToady> yes, well, it's not really obvious to most language designers that languages are different from other things :)

[18:46] <vendethiel> it's good that languages come out

[18:46] <vendethiel> it's not like it's "new" either way ...

[18:46] <brrt> well.... no, its not immediately obvious to me either

[18:47] <brrt> (racket)

[18:47] *** rurban joined
[18:49] <brrt> TimToady... i'm curious. what makes languages different from other things?

[18:49] *** darutoko- left
[18:50] *** moistcherry is now known as hoverboard

[18:50] <brrt> to put my question in context, for a recent course i had to learn that no non-human form of communication was equivalent with the complexity of languages

[18:50] <brrt> i.e. apes cannot recurse

[18:51] <nwc10> apes insist that their regular expressions are regular? :-)

[18:51] <[Coke]> that sounds a little hubristic.

[18:51] <[Coke]> not like we speak dolphin or anything. :)

[18:52] <brrt> well... that was my initial reaction, too

[18:52] *** fhelmberger joined
[18:52] <brrt> however, i haven't had an ape to test yet, and it seems that the famous 'nim chimpsky' and other sign-language apes really only ever made rather simple sentences

[18:53] <brrt> that is, non-recursive sentences

[18:55] <brrt> to get back on topic of computer languages - it seems funny that most high-level computer languages also have the 'properties' of human languages - hierarchy, recursion, and polysemy - while 'machine code' does not

[18:56] <vendethiel> why "funny"? that just shows how complex these are, imho

[18:57] *** fhelmberger left
[18:57] <brrt> good question i think

[18:58] <brrt> ok, for one thing, a high level language and its (compiled) machine-code are 'equivalent' in a sense

[18:59] <timotimo> yay, java 1.8 jdk

[18:59] <brrt> i.e. it is possible to express everything you can express with the help of hierarchy, recursion, etc, by a 'simple' sequence - and references

[18:59] <vendethiel> possible ? most definitely. "easy"? most probably not

[19:00] <brrt> not the point i'm trying to make here :-)

[19:00] <brrt> basically, the trick of language is that it allows you  to express anything

[19:01] <brrt> my local linguist argued that this was because of the recursion inherent in human languages

[19:01] <brrt> but machine code does not 'recurse' - or does it?

[19:03] <Gothmog_> there are jumps...

[19:04] <timotimo> i think data-dependent jumps make it what it is, no?

[19:04] <brrt> i don't think thats on the same level, but you might  well argue

[19:04] <Gothmog_> it's not in the syntactical sense

[19:05] *** Rotwang left
[19:05] <Gothmog_> and that what's the chomsky hierarchy is about

[19:05] <Gothmog_> but it can use recursion when you execute it

[19:07] <brrt> (i'll be off now for a bit)

[19:07] *** brrt left
[19:08] *** igorsutton joined
[19:13] *** brrt joined
[19:15] <ashleydev> re: the units discussion, I use a program http://calca.io and you can add arbitrary units to any number and it will keep them as symbols unless it can factor them out

[19:16] <ashleydev> so would it be possible that: `1s / 1s # 1' and `1s / 1h` # 1s/h

[19:16] <TimToady> yes, units are not much use in the absence of dimensional analysis

[19:17] <TimToady> or "dimensionalysis", as some of my professors had it

[19:17] <ashleydev> so can we have arbitrary symbols that stay as symbols unless they are defined?

[19:18] <TimToady> all languages are derivatives of Perl 6 :)

[19:19] <ashleydev> m: say 1s / 1s;

[19:19] <camelia> rakudo-moar c9f223: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Q3BQStQPRt␤Confused␤at /tmp/Q3BQStQPRt:1␤------> [32msay 1[33m⏏[31ms / 1s;[0m␤    expecting any of:␤        whitespace␤»

[19:19] <timotimo> Stage classfile  : java.lang.OutOfMemoryError: GC overhead limit exceeded

[19:19] <timotimo> didn't we just reduced the memory necessary to compile the setting?

[19:19] <timotimo> seems like it's not enough if you're on java8

[19:19] <TimToady> ashleydev: but you have to derive the languages that are derivatives

[19:19] *** brrt left
[19:20] <nwc10> Ooooh, https://twitter.com/elonmusk/status/461199264345903104/photo/1 -- Falcon 9 onboard camera shot right before splashdown. Full vid posting shortly to http://spacex.com .

[19:20] <ashleydev> so maybe that's how the units module works, it just allows you to do symbolic math

[19:20] <TimToady> and I think 1s/1h should reduce to 1/3600; you want different types if the seconds are not commensurate with the hours

[19:21] <nwc10> I'm still wondering how they manage to turn it round from pointy bit forward to firey end forward, while it's travelling at supersonic speeds

[19:21] <ashleydev> h = 60s; 1s/1h # -> 1/3600

[19:21] <ashleydev> it's symbolic

[19:21] <ashleydev> no semantics

[19:22] <TimToady> well, the mathematicians will like that a lot better than the physicists :)

[19:22] <vendethiel> m: sub postfix:<s>(Int $n) { Duration.new($n); }; say 5s / 5s

[19:22] <camelia> rakudo-moar c9f223: OUTPUT«1␤»

[19:23] <vendethiel> m: sub postfix:<s>(Int $n) { Duration.new($n); }; say 5s / 5

[19:23] <camelia> rakudo-moar c9f223: OUTPUT«1␤»

[19:23] <vendethiel> mh, I guess it makes sense

[19:23] <vendethiel> (I'd have expected 1s in the second one, but it probably only prints its value)

[19:24] * ashleydev too

[19:24] <TimToady> m: sub postfix:<s>(Int $n) { Duration.new($n); }; say (5s / 5s).WHAT

[19:24] <camelia> rakudo-moar c9f223: OUTPUT«(Num)␤»

[19:24] <TimToady> m: sub postfix:<s>(Int $n) { Duration.new($n); }; say (5s / 5).WHAT

[19:24] <camelia> rakudo-moar c9f223: OUTPUT«(Num)␤»

[19:25] <TimToady> arguably should return a Duration

[19:25] <TimToady> m: sub postfix:<s>(Int $n) { Duration.new($n); }; say (5s + 5s).WHAT

[19:25] <camelia> rakudo-moar c9f223: OUTPUT«(Duration)␤»

[19:25] <TimToady> at least that's correct

[19:26] <TimToady> m: say (now - now).WHAT

[19:26] <camelia> rakudo-moar c9f223: OUTPUT«(Duration)␤»

[19:26] *** kurahaupo joined
[19:27] *** dwarring joined
[19:27] <vendethiel> I really think 5s/5's WHAT should be duration

[19:27] <vendethiel> 5s / 5s is a ratio, so it's expected to be a num

[19:27] <TimToady> yes, it's just a duration that is 1/5 as long

[19:27] <TimToady> nodnod

[19:28] <TimToady> but we see how easy it is to screw up the dimensional analysis

[19:28] <TimToady> which is why we should really write all these APIs automatically from the units database

[19:29] <TimToady> (and import a few by default)

[19:29] <ashleydev> or do it symolically

[19:30] <TimToady> well, that's basically what dimensional analysis is doing

[19:30] <ashleydev> agreed

[19:30] <ashleydev> I think mathmatica does this quite a bit

[19:30] <TimToady> except a physicist would know that s and h are just different scalar values of the same dimension

[19:31] <kurahaupo> TimToady: so how do I distinguish energy (Joules) from torque (Newton-metres)?

[19:31] <TimToady> and that info is stored in the units database

[19:31] <TimToady> I dunno, been several years since I read that file :)

[19:32] <TimToady> and I don't do many everyday calculations on either energy or torque

[19:32] * TimToady only understands physics; he doesn't know what he's talking about though

[19:33] *** broquaint joined
[19:33] <kurahaupo> actually torque is Newton-metres-per-radian, but the symbol for radian is usually omitted

[19:34] <kurahaupo> s/omitted/forgotten/

[19:35] <raydiak> wikipedia suggests "The use of newton-metres for torque and joules for energy is useful in helping avoid misunderstandings and miscommunications."

[19:35] <raydiak> also mentions "radians are dimensionless"

[19:38] <TimToady> 'man units' is quite instructive, if you've installed the program

[19:38] <kurahaupo> raydiak: yes, well, dimmensionless in terms of not using length, weight or time, however treating radians as a dimension in its own right makes the whole angular moment thing work properly.

[19:40] <raydiak> (man units)++

[19:45] <ashleydev> what are Man Units?

[19:45] <ashleydev> (units DB in Calca: http://calca.io/units )

[19:46] <raydiak> kurahaupo: I want to ask "how so?", but then you'll know how much I don't know what I'm talking about :)

[19:46] <timotimo> in my experience, "man" is usually combined with a time unit, like "man hours"

[19:46] <ashleydev> ah

[19:47] <raydiak> heh

[19:47] <raydiak> as in a man page

[19:47] <ashleydev> no

[19:47] <ashleydev> :P

[19:47] * TimToady is pleased that the units database at least does not define any units with the name 'i', so we don't collide with our current postfixes

[19:47] <PerlJam> .oO( man is usually combined with woman )

[19:48] *** wayne joined
[19:48] <PerlJam> TimToady: It does define e doesn't it?  and not as 2.718281828

[19:48] <TimToady> we can have units like watt-hours, since we allow hyphens, but how do we indicate reciprocol units?

[19:48] <ashleydev> OH Boy, now the math gets strainge, girl

[19:48] <TimToady> with ' maybe

[19:49] <TimToady> well, e is a term in Perl, not a postfix

[19:49] <PerlJam> oh, right

[19:49] <TimToady> but still, it is a collision

[19:49] <TimToady> one or the other of those should be italic :)

[19:50] <TimToady> I'm guess the charge of teh electron should be italic

[19:50] <TimToady> *guessing

[19:50] <TimToady> not to mention *the

[19:51] <TimToady> .u 𝑒

[19:51] <yoleaux> U+1D452 MATHEMATICAL ITALIC SMALL E [Ll] (𝑒)

[19:52] * raydiak re-reads the last few minutes of backlog to study all the cleverness that flew over his head the first time

[19:52] *** denis_boyun_ joined
[19:52] <TimToady> but the mathematicians and physicists have a lot to answer for when it comes to introducing context dependencies into their nomenclature

[19:53] <ashleydev> Maybe that's what makes their nomenclature hard, it's like looking at a decompiled program with single grapheme variable names

[19:54] <TimToady> and most of them localized

[19:54] <ashleydev> they don't allow variable names > 1 char

[19:54] <ashleydev> *grapheme

[19:54] <kurahaupo> raydiak: e.g. angular force (N.m/rad) multiplied oby angular speed (rad/s) = power (W=J/s=N.m/s)

[19:54] <TimToady> that's the big problem with mathematicians--they write for other mathematicians, who they are allowed to assume are intelligent

[19:56] <TimToady> obviously, in hindsight, we shoulda invented computers before we invented math

[19:56] <kurahaupo> ashleydev: but they're allowed *any* grapheme, not just Latin letters

[19:56] <ashleydev> that's the language designer talking

[19:57] * kurahaupo recalls once running out of Latin and Greek letters and starting in on Hebrew

[19:57] <ashleydev> kurahaupo: of course, they need to be able to name a bunch of registers and their units

[19:58] <ashleydev> or the straing unicode fonts :/

[19:59] <FROGGS> what? what makes me read this as unicode farts?

[19:59] <TimToady> > u MATHEMATICAL | wc -l

[19:59] <TimToady> 1007

[19:59] <ashleydev> nice!

[19:59] * jnthn returns from noms

[19:59] *** igorsutton left
[19:59] <ashleydev> would have wondered if it came out 1337

[19:59] <FROGGS> jnthn: hehe, am I allowed to catch your exception?

[19:59] <jnthn> FROGGS: There's probably a combining unicode fart :P

[20:00] <FROGGS> jnthn: possibly *g*

[20:00] <ashleydev> or PILE OF POO

[20:00] <timotimo> hmm. the syntax for an enum doesn't allow pod to be attached to the individual pieces.

[20:01] <TimToady> m: say :9<1337>  # off by 1

[20:01] <camelia> rakudo-moar c9f223: OUTPUT«1006␤»

[20:01] <FROGGS> timotimo: hmmm, sad... woulda been nice to add descriptions to enum's like SDL offers 'em

[20:01] <PerlJam> sounds like a bug to me

[20:01] <[Coke]> TimToady: you just forgot the FENCEPOST character.

[20:01] <timotimo> well, you can add them manually, i would think

[20:01] <timotimo> but it'd be a bit fiddly :(

[20:02] *** lvfjf left
[20:03] <FROGGS> jnthn: do you have an idea how (on earth) I would stick labels to loops?

[20:03] <FROGGS> err, *to for loops

[20:03] <jnthn> FROGGS: Hm. What level are we talking about?

[20:03] <jnthn> Oh, and which language? :)

[20:03] <FROGGS> I am talking about statement_control:sym<for> in P6::A

[20:03] *** denis_boyun__ joined
[20:04] <TimToady> > u THE | wc -l

[20:04] <TimToady> 1325

[20:04] <jnthn> Ah

[20:04] <jnthn> Hmmm

[20:04] <TimToady> off-by-12 error

[20:04] <jnthn> FROGGS: Well, I guess the mapiter needs to know about it?

[20:04] <PerlJam> FROGGS: does jnthn have many non-earthly ideas that you needed to be sure to only get the earthly ones? :)

[20:04] *** denis_boyun_ left
[20:04] *** eternaleye left
[20:05] <timotimo> err on the side of safety :P

[20:05] <TimToady> darn it, I ate my lunch without noticing, and I suspect it would've tasted good

[20:05] <PerlJam> good point

[20:05] <FROGGS> PerlJam: I just wanna sit where I am atm :o)

[20:05] <FROGGS> jnthn: yeah ...

[20:06] <jnthn> Well, on Neptune you'd just shove it into the QAST tree, but on earth it's harder... :P

[20:06] <FROGGS> this is for other loops: (see that and few lines above) https://github.com/rakudo/rakudo/blob/loop_labels_test/src/Perl6/Actions.nqp#L1168

[20:06] <FROGGS> hehe

[20:07] <FROGGS> I guess I'd also pass it as a named arg to .map as the first step

[20:08] <jnthn> How does just pushing the label as a child work out in 2-child vs 3-child loop nodes, ooc?

[20:08] <timotimo> to get rid of nameds?

[20:08] <jnthn> oh, :named('labal')

[20:08] <jnthn> :)

[20:08] <jnthn> Nice enough

[20:08] <jnthn> FROGGS: Yes, that sounds fairly sensible

[20:10] <FROGGS> okay, that MapIter code looks a bit icky but doable

[20:11] <timotimo> i've got a sneaking suspicion that the hard drive i've installed my system to is actually a 5200u one ...

[20:11] *** eternaleye joined
[20:15] <PerlJam> What's the difference between  :named('foo')  and :name('foo')  ??

[20:15] <FROGGS> hmmm, nqp::handle only emits a single MAST::HandlerScope on moar...

[20:15] <jnthn> d

[20:15] <PerlJam> are they semantically identical?

[20:16] <FROGGS> PerlJam: the former mixes in a role, QAST::SpecialArg, which turns it into a named argument

[20:16] <jnthn> PerlJam: No, :named(...) always means "named argument"

[20:16] <PerlJam> got it.

[20:16] <PerlJam> thanks.

[20:16] <FROGGS> the other one let you set the name of the sub, if :op is 'call', and for a method if :op is 'callmethod'

[20:16] <jnthn> :name is on a couple of nodes, and its meaning depends on the node.

[20:17] <jnthn> What FROGGS said for QAST::Op; on QAST::Block it's the name of the block, though.

[20:18] <FROGGS> and for QAST::Var it's the name of the variable including sigils and stuff

[20:18] <jnthn> aye

[20:19] <PerlJam> aye, I guess :name() was clear to me, but :named() wasn't.

[20:20] <FROGGS> ahh, now I see how nqp::handle works... so I could add 'LAST_LABELED' and code for it, and I'm done

[20:20] <FROGGS> that seems to be it for moar (and jvm)

[20:21] <FROGGS> and the pir is also easily done :o)

[20:21] * FROGGS is happy

[20:21] <jnthn> yay 

[20:21] <timotimo> oh yays :3

[20:23] * timotimo can't wait to be confusing people with weird labeled-loop-control-flow :P

[20:23] *** anaeem___ left
[20:26] <FROGGS> timotimo: as I see it only for loops needs doing

[20:26] <FROGGS> the rest is in loops_labels/loops_labels/loop_labels_test (moar/nqp/rakudo)

[20:31] *** rindolf left
[20:31] <timotimo> how's the non-moar status? parrot has it, jvm not?

[20:31] <FROGGS> nqp-p is fine, perl6-p should be but is untested

[20:32] <FROGGS> nqp-j and perl6-j needs doing

[20:42] <dalek> roast: c9f504a | (David Warring [email@hidden.address] | integration/advent2012-day20.t:

[20:42] <dalek> roast: adding 2012 advent day 20

[20:42] <dalek> roast: review: https://github.com/perl6/roast/commit/c9f504a18b

[20:44] *** kurahaupo left
[20:45] *** guest1 joined
[20:46] *** guest1 left
[20:49] *** Khisanth left
[20:52] *** BenGoldberg joined
[20:53] *** BenGoldberg left
[20:54] *** BenGoldberg joined
[20:54] <dalek> roast: c126bf1 | (David Warring [email@hidden.address] | integration/advent2012-day06.t:

[20:54] <dalek> roast: typo+tweaks

[20:54] <dalek> roast: review: https://github.com/perl6/roast/commit/c126bf1169

[21:00] *** anaeem1_ joined
[21:02] *** Khisanth joined
[21:03] *** anaeem1 joined
[21:04] *** anaeem1_ left
[21:19] *** hummeleB1 left
[21:28] *** telex left
[21:30] *** telex joined
[21:35] *** mtj joined
[21:41] *** cognominal joined
[21:44] *** adu left
[21:48] *** cognominal left
[21:52] *** cognominal joined
[22:01] *** donaldh_ joined
[22:21] *** donaldh_ left
[22:25] <timotimo> gnite o/

[22:35] *** ajr_ left
[22:37] *** cosimo joined
[22:37] *** ggherdov_ joined
[22:37] *** pdurbin joined
[22:37] *** ggoebel111112 joined
[22:41] *** bluescreen100 left
[22:47] *** denis_boyun__ left
[22:48] *** arturo` left
[22:58] *** btyler left
[23:00] *** hoverboard left
[23:07] *** spider-mario left
[23:09] *** rurban left
[23:12] <dalek> nqp/async_ops: 65bcfae | (Donald Hunter)++ | src/vm/jvm/runtime/org/perl6/nqp/io/AsyncSocketHandle.java:

[23:12] <dalek> nqp/async_ops: Fix async readChars on JVM.

[23:12] <dalek> nqp/async_ops: review: https://github.com/perl6/nqp/commit/65bcfae2f6

[23:34] *** thou left
[23:35] *** dmol left
[23:39] *** lvfjf joined
[23:48] *** Ben_Goldberg joined
[23:48] *** BenGoldberg left
[23:48] *** Ben_Goldberg is now known as BenGoldberg

[23:50] *** anaeem1 left
[23:51] <BenGoldberg> p6: $_ = "abcdEFghij"; print $0,$2 while s/(.)(.*)(.)/$1/;

[23:51] <camelia> niecza v24-109-g48a8de3: OUTPUT«ajbichdgEF»

[23:51] <camelia> ..rakudo-{parrot,jvm,moar} c9f223: OUTPUT«ajbichdg»

[23:51] <BenGoldberg> What the EF?

[23:53] *** pecastro left
[23:53] *** raiph joined
[23:54] <BenGoldberg> p6: $_ = "ab"; if s/(.)(.*)(.)/$1/ { say "Success: $0,$1,$2,$_" } else { say "fail: $_" }

[23:54] <camelia> niecza v24-109-g48a8de3: OUTPUT«Success: a,,b,␤»

[23:54] <camelia> ..rakudo-{parrot,jvm,moar} c9f223: OUTPUT«fail: ␤»

[23:55] *** pecastro joined
