[00:16] <ingy> TimToady: sshhhh. lizmat's trying to sleepzzz

[00:20] *** kurahaupo joined
[00:30] *** hoverboard left
[00:36] <zacts> so are there any production projects using perl6?

[00:43] *** thou left
[00:56] *** jnap left
[01:06] *** bjz joined
[01:06] *** FROGGS_ joined
[01:06] *** bjz left
[01:07] *** bjz joined
[01:10] *** FROGGS left
[01:16] *** klapperl_ joined
[01:25] *** woosley joined
[01:26] *** jnap joined
[01:36] *** hoverboard joined
[01:48] *** plobsing joined
[01:56] *** thou joined
[01:56] *** molaf left
[01:58] *** Su-Shee_ joined
[02:12] *** rurban left
[02:14] *** rurban joined
[02:30] *** jnap left
[02:45] *** Sqirrel joined
[02:58] *** btyler joined
[03:09] *** treehug88 joined
[03:13] <Timbus> the top perl 6 rosettacode entry for chess960, doesnt work as intended.

[03:13] <Timbus> just backlogging there.

[03:27] *** kurahaupo left
[03:28] <ingy> Timbus: it still looks cool ;)

[03:36] *** Alula joined
[03:39] *** xragnar_ joined
[03:39] *** xragnar_ is now known as xragnar

[03:41] *** kaare_ joined
[04:11] *** thou left
[04:15] *** fhelmberger joined
[04:18] *** anaeem1_ joined
[04:19] *** fhelmberger left
[04:24] *** SamuraiJack_ joined
[04:44] *** kaare_ left
[04:46] <TimToady> Timbus: fixed

[04:46] * TimToady broke it in the first place, trying to avoid uninit warnings

[04:46] <TimToady> but my fix caused the pick loop to always be true, so it never ran

[04:47] <TimToady> now it uses a repeat to always do the pick at least once

[04:48] *** Panda_ joined
[04:51] *** nhayashi joined
[04:52] *** Panda_ left
[04:56] *** BenGoldberg left
[04:59] *** rurban left
[04:59] <TimToady> Timbus++ for noticing

[05:00] <Timbus> thanks fine

[05:02] <Timbus> i think, it would also be good to use the enum to generate the output. somehow feels weird to make all those constants, and then apply it to a not-so-constant list of characters. i guess

[05:05] <Timbus> my headache is hindering my ability to sentence :s

[05:07] <TimToady> otoh it's ready to convert to unicode this way

[05:07] <TimToady> (I didn't write it, btw)

[05:08] *** kaare_ joined
[05:09] <TimToady> check pieces aren't alphabetic, but maybe we could teach enums in non-identifiers to use a term:<‚ôú> to define symbols

[05:09] <TimToady> *chess

[05:09] *** SamuraiJack_ left
[05:10] *** SamuraiJack__ joined
[05:10] <TimToady> though you'd still have to do ‚ôú1 and ‚ôú2 to avoid collisions

[05:13] <Timbus> use an ordinary hash instead of an enummap and just swap the .values around to determine position.

[05:25] <moritz> lizmat: I'm talking about S17-supply/{on,delay,uniq,stable,watch_path}.t which all fail here (some only when run in parallel spectest

[05:26] <moritz> lizmat: and I'm both interested in getting rid of the test failures, and how to fudge tap_ok tests in general

[05:30] *** anaeem1__ joined
[05:31] *** anaee____ joined
[05:32] *** anaeem1__ left
[05:33] *** anaeem1_ left
[05:34] <TimToady> m: my $p = 'BQBRRRNN'; $p = $p.comb.pick(*).join while ($p.rindex('B') - $p.index('B')) %% 2; substr-rw($p,$p.index('R', $p.index('R') + 1), 1) = 'K'; say $p;

[05:34] <camelia> rakudo-moar 1984fd: OUTPUT¬´NRKQBBRN‚ê§¬ª

[05:35] *** anaeem1 joined
[05:39] *** anaee____ left
[05:40] <Timbus> TimToady++ :o

[05:59] *** rurban joined
[06:03] *** rurban left
[06:11] <TimToady> m: repeat until m/B.*B/.chars %% 2 { $_ = <B Q B R R R N N>.pick(*).join } s:2nd/R/K/; say .comb;

[06:11] <camelia> rakudo-moar 1984fd: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/WeG9dNHjq1‚ê§Confused‚ê§at /tmp/WeG9dNHjq1:1‚ê§------> [32m{ $_ = <B Q B R R R N N>.pick(*).join } [33m‚èè[31ms:2nd/R/K/; say .comb;[0m‚ê§    expecting any of:‚ê§        method arguments‚ê§     ‚Ä¶¬ª

[06:11] <TimToady> m: repeat until m/B.*B/.chars %% 2 { $_ = <B Q B R R R N N>.pick(*).join }; s:2nd/R/K/; say .comb;

[06:11] <camelia> rakudo-moar 1984fd: OUTPUT¬´R K B N N B Q R‚ê§¬ª

[06:12] *** denis_boyun_ joined
[06:15] *** toebu joined
[06:23] *** FROGGS_ left
[06:25] *** toebu is now known as oetiker

[06:28] *** treehug88 left
[06:37] *** hummeleB1 joined
[06:37] <TimToady> it's a bit sad that .subst doesn't accept a :2nd argument, only :nth(2)

[06:39] *** SamuraiJack__ left
[06:39] <jnthn> morning, #perl6

[06:40] <ingy> hi jnthn 

[06:41] <ingy> I just wrote a new markup called Kwim that's better syntax than markdown and richer model than pod

[06:41] <ingy> and it converts to both!

[06:41] <ingy> and html of course

[06:42] <ingy> I've been migrating all my pod to kwim and making sure everything converts back

[06:42] <sergot_> morning o/

[06:43] <ingy> anyone know if there is a pod markup for travis badges?

[06:45] <Woodi> morning :)

[06:45] *** igorsutton_ joined
[06:46] *** FROGGS joined
[06:48] *** btyler left
[06:50] <Woodi> zacts: re: so are there any production projects using perl6?  few days I completed perl6 project that work as good as perl5 in calculating weekly "production" here :) only difference is 1 second in execution time. what is annoying a bit becouse > then blink... 

[06:50] *** woolfy left
[06:51] *** woolfy joined
[06:51] <zacts> Woodi: cool

[06:51] <zacts> I'm interested in eventually learning more about perl6

[06:52] <zacts> can I still do one-liners in perl6?

[06:52] <Woodi> with big, unconscious FROGGS++ contribution :o)

[06:52] <Woodi> yes

[06:52] <FROGGS> hmmm?

[06:52] <zacts> I don't understand?

[06:53] <Woodi> I was asking for help *here* and random voluntiers was helping :)

[06:53] <Woodi> perl -e 'code;' works

[06:54] <FROGGS> zacts: you can still do one-liners, but maybe the Perl 5 binary supports some command line flag that the Perl 6 (rakudo) binary does not

[06:54] <FROGGS> and also important: strict is enabled by default and you cannot turn it off atm

[06:54] <FROGGS> even for one-liners

[06:55] <FROGGS> zacts: but we will happily implement stuff for you, if it is specced, and you need it urgently

[06:55] <zacts> oh neat

[06:55] *** zakharyas joined
[06:56] <Woodi> btw. can markdown have colors ? if not html then is better, feature-minimal format :)

[06:56] <zacts> I don't understand what the benefit of using perl6 over perl5 is designed to be, since perl6 isn't supposed to replace perl5, but a sister project?

[06:56] <FROGGS> Woodi: I don't think md supports colours

[06:56] <zacts> for what types of projects is perl6 designed to do well at that perl5 is not?

[06:57] <zacts> I wonder if multimarkdown can do colors

[06:57] <Woodi> zacts: perl6 is kind optimized for readability :)

[06:57] <FROGGS> zacts: it is supposed to be the language for the next 30 years, but we realized that it will not replace P5 entirely because people do not rewrite their stuff when it works

[06:57] <zacts> Woodi: so will it be like a freeform python?

[06:58] <zacts> FROGGS: oh I see

[06:58] <FROGGS> that is why Perl 5 developement is still ongoing, because people love and use it

[06:58] <FROGGS> zacts: but that does not mean that Perl 6 is not awesome... you'll see that its architecture and possibilities are superior to anything known :o)

[06:59] <zacts> ok cool

[06:59] <zacts> will it have Moose like capabilities by default?

[07:00] <zacts> and what is that quantum::superposition stuff I've heard about?

[07:00] <FROGGS> zacts: for example I've heard from a company that has more than 14_000_000 lines of python 2.7 code... they are stuck, they cannot upgrade

[07:00] <FROGGS> same for huge Perl 5 code bases

[07:00] *** rurban joined
[07:00] <TimToady> zacts: yes, the MOP is built in

[07:00] <zacts> FROGGS: yeah I can understand that, but for personal projects, and new projects perl6 sounds cool

[07:00] <FROGGS> zacts: exactly

[07:00] <TimToady> m: say 42.^methods

[07:00] <camelia> rakudo-moar 1984fd: OUTPUT¬´WHY Int Num Rat FatRat abs Bridge chr sqrt base expmod is-prime floor ceiling round lsb msb narrow sign conj rand sin asin cos acos tan atan atan2 sec asec cosec acosec cotan acotan sinh asinh cosh acosh tanh atanh sech asech cosech acosech cotanh acotanh ‚Ä¶¬ª

[07:01] <TimToady> m: my $x = 2;  say "Matches" if $x == 1 | 2 | 3;

[07:01] <camelia> rakudo-moar 1984fd: OUTPUT¬´Matches‚ê§¬ª

[07:01] <FROGGS> m: say &infix:<eq>.WHAT

[07:01] <camelia> rakudo-moar 1984fd: OUTPUT¬´(Sub+{<anon>}+{Precedence})‚ê§¬ª

[07:01] <TimToady> ^^ there's your meta-objects, and there's your junctions (quantum superpositions)

[07:02] *** denis_boyun_ left
[07:02] <FROGGS> zacts: it is not that everything looks like an object, everything is

[07:02] <zacts> oh cool

[07:02] <zacts> how about functional programming?

[07:02] <TimToady> but you can pretend that something isn't an object if you like :)

[07:02] <Woodi> zacts: not like python :) but in Perl spirit !

[07:02] <TimToady> lots of FP

[07:02] <moritz> zacts: supported :-)

[07:02] <FROGGS> from the objects you instanciate over infix operators to the signatures of your subroutine or method

[07:02] <zacts> nice!

[07:02] <zacts> so are subs first class?

[07:03] <moritz> sure

[07:03] <TimToady> including operators

[07:03] <zacts> oh wow

[07:03] <moritz> m: my $x = sub ($a) { $a * 2} ; say $x($_) for 1..4

[07:03] <camelia> rakudo-moar 1984fd: OUTPUT¬´2‚ê§4‚ê§6‚ê§8‚ê§¬ª

[07:03] <zacts> and lambda?

[07:03] *** oetiker left
[07:03] <zacts> or am I thinking too much of (scheme)?

[07:03] <moritz> m: my $x = -> $a { $a * 2 } ; say $x($_) for 1..4

[07:03] <camelia> rakudo-moar 1984fd: OUTPUT¬´2‚ê§4‚ê§6‚ê§8‚ê§¬ª

[07:03] <zacts> :D

[07:03] <moritz> zacts: there's your lambda

[07:03] <zacts> oh wow. well, now I'm totally interested

[07:03] <moritz> if you squint hard enough, the -> looks like a fallen lambda

[07:04] <moritz> also, there's a short form

[07:04] <TimToady> fallen and a bit broken :)

[07:04] <zacts> -/ <- this is my favorite ascii lambda

[07:04] <FROGGS> m: for ^10 -> $x, $y { say $x * $y }

[07:04] <moritz> m: my $x = * + 2 ; say $x($_) for 1..4

[07:04] <camelia> rakudo-moar 1984fd: OUTPUT¬´0‚ê§6‚ê§20‚ê§42‚ê§72‚ê§¬ª

[07:04] <camelia> rakudo-moar 1984fd: OUTPUT¬´3‚ê§4‚ê§5‚ê§6‚ê§¬ª

[07:04] <Woodi> oO( PHP huge codebase ? throw away views-only code ? )

[07:04] <moritz> * + 2 is short for -> $x { $x + 2 }

[07:04] *** rurban left
[07:05] <zacts> how about things like POE / Async::IO / etc..

[07:05] <FROGGS> * is called Whatever

[07:05] <TimToady> that's mostly there now

[07:05] <moritz> zacts: there's some support for async IO in core, currently evolving

[07:05] <FROGGS> zacts: that is where you can help, write modules, because modules.perl6.org could need some helping hands :o)

[07:05] *** denis_boyun_ joined
[07:06] <zacts> and can I start writing my own perl6 CPANish modules?

[07:06] <zacts> oh, I see!

[07:06] <FROGGS> yes

[07:06] <zacts> and artistic 2.0 license?

[07:06] <TimToady> yes

[07:06] <FROGGS> also, I am working hard these days to make use of CPAN, so that we can use its power to distribute our modules

[07:06] <moritz> that's what we use for the compiler

[07:06] <moritz> (AL2)

[07:07] <zacts> nice. It would be cool to try to add hooks to perl6 from vim or neovim I'm thinking.

[07:07] *** oetiker joined
[07:07] * TimToady drools

[07:07] <moritz> there's also perl6 syntax hilighting for vim

[07:07] <moritz> :se ft=perl6

[07:07] <zacts> although, I'm currently using emacs evil-mode.

[07:07] <zacts> oh nice

[07:08] <zacts> well, I'll have to learn me some perl6, and see if I can help with modules.

[07:08] <zacts> but note I'm still intermediate / newbie as far as programming is concerned.

[07:08] <TimToady> is okay, Perl is a learn-as-you-go langauge

[07:08] <zacts> I'm still learning all of this stuff. I haven't written a perl5 module, mainly due to the fact that most everything is already written.

[07:08] * TimToady should learn to spell as he goes...

[07:09] <moritz> zacts: and typically #perl6 is very happy to help you and explain stuff

[07:09] <zacts> cool

[07:09] *** plobsing left
[07:09] <FROGGS> TimToady: I always tell my kids not to do anything else while they go :o)

[07:09] <moritz> (provided that you do some reading on your own too, when we point you to docs)

[07:09] <TimToady> rosettacode.org is a good place to compare p5 code with p6 code that does the same thing

[07:09] <zacts> oh of course, but I've made it through #perl so reading doc isn't a problem for me. ;-)

[07:10] <zacts> TimToady: oh nice.

[07:10] <TimToady> well, and with most every other language too

[07:11] * zacts has even helped others find good doc. I'm also trying to get perldoc perlbooks patched for more up-to-date doc such as chromatic's book and ovid's new book.

[07:12] <TimToady> the biggest change from P5 will be the regex syntax

[07:12] <zacts> oh, I was about to ask about regex.

[07:12] <zacts> and POD / perldoc, I wonder about those too..

[07:12] <TimToady> but S05 is still written largely as a delta from Perl 5, so that's a good place to get the hang of it

[07:13] <zacts> ok, that is the spec for perl6?

[07:13] <zacts> anyway, I'll read more and come back when I've got either a cool idea, or have more questions.

[07:13] <TimToady> yeah, see http://perlcabal.org/syn/

[07:14] <zacts> I love writing documentation, so if you guys need help with that, such as writing POD / perldoc. yeah.

[07:14] <TimToady> cool, we can always use better docs

[07:14] <zacts> (that might help me learn perl6 at the same time also)

[07:14] <moritz> zacts: the perl6/doc repo on github needs lots of love :-)

[07:14] <zacts> ok

[07:14] <zacts> well thanks, laters

[07:14] <TimToady> ciao

[07:15] *** anaeem1 left
[07:15] <FROGGS> o/

[07:15] <Woodi> later !

[07:18] *** kaleem joined
[07:21] *** woolfy left
[07:22] *** anaeem1_ joined
[07:25] *** lizmat left
[07:33] *** telex left
[07:34] *** telex joined
[07:38] *** salv0 joined
[07:39] *** rurban joined
[07:40] *** grondilu joined
[07:41] *** Su-Shee_ is now known as Su-Shee

[07:43] *** rurban left
[07:52] <zacts> hm.. back for a sec. http://perlcabal.org/syn/Differences.html wow this is amazing. I like many of the changes, although some will require me to learn new habits. (similar to learning a new mode or plugin for vim).

[07:54] *** virtualsue joined
[07:54] <FROGGS> true

[07:54] <zacts> oh so I can still use a perl5 compatible mode for regex it looks like

[07:54] <FROGGS> yes, though it is not yet 100% compatible

[07:54] <zacts> (regex was what first got me to learn perl in the first place several years ago)

[07:55] <zacts> FROGGS: well of course, only the perl interpreter can parse perl5, or something like that?

[07:55] <FROGGS> I am working also on a Perl 5 slang, so you can run unmodified Perl 5 code... still in an beta stage though :/

[07:55] <FROGGS> zacts: no, everything that can *run* Perl 5 can properly *parse* Perl 5

[07:55] <FROGGS> because you always do both

[07:56] <FROGGS> BEGIN blocks and use statements are a good example

[07:56] <FROGGS> the same goes for Perl 6

[07:57] <zacts> FROGGS: ah ok

[07:58] <Timbus> i think the perl 5 compatible regex is low priority, because perl 6 regexes are just so much better

[07:59] <zacts> Timbus: oh, yeah that sounds cool. I don't have a problem with learning a new regex syntax/flavor.

[07:59] <zacts> especially since they sound like they are out of this world

[07:59] <grondilu> FROGGS: talking about v5 I was wondering:  could v5 use th perl 5 api via NativeCall instead of reimplementing everything in Perl6/NQP?

[08:01] *** cosimo joined
[08:01] *** hoverboard is now known as moistcherry

[08:02] <zacts> yeah the new regex "rules" look way awesome.

[08:02] <Timbus> they is

[08:03] <Timbus> :)

[08:03] <FROGGS> grondilu: we could, but it will either be very very complex then, or you have the same as qqx{perl -e ...}

[08:03] *** moistcherry is now known as hoverboard

[08:04] <zacts> so what are currently the main setbacks to perl6 development?

[08:04] *** liztormato joined
[08:04] *** darutoko joined
[08:04] <moritz> performance

[08:04] <FROGGS> grondilu: read diakopter++'s grant... I am unable to do it, that's why I reimplement P5's behaviour in rakudo/nqp, which makes it easy to pass vars around for example

[08:04] <moritz> lack of reliability in certain areas (IO, precompilation)

[08:04] <moritz> lack of modules

[08:04] <moritz> lack of documentation

[08:05] <zacts> moritz: like how much performance?

[08:05] <FROGGS> moritz: but we get better about performance these days

[08:05] <zacts> and reliability, hm.. (personally I would be more concerned about reliability at this stage than performance)

[08:05] <moritz> zacts: it really depends on the problem domain, and how you solve stuff in Perl 6, but a factor 10x to 100x slower than perl 5 is not unheard of

[08:05] <moritz> zacts: though, as FROGGS said, improving

[08:05] <zacts> oh cool.

[08:06] <FROGGS> zacts: dunno if it is representable: http://t.h8.lv/p6bench/2014-05-12-spesh_log_and_stuff_sans_startup.html

[08:06] <zacts> does perl6 participate in GSoC? I'm a college student.

[08:06] <zacts> just getting started with comp sci undergrad. right now I'm @ a community college.

[08:06] <FROGGS> zacts: when you look at that stats, compare perl5 to rakudo-moar, not nqp

[08:06] <zacts> ok

[08:06] <Timbus> it does. i think someone even submitted something about bolting on a  hotpath jit of some sort

[08:06] <FROGGS> zacts: we have GSoC students this year, yes :o)

[08:07] <zacts> oh nice!

[08:07] <moritz> one implements a JIT compiler for MoarVM

[08:07] <moritz> the other SSL support for our HTTP modules

[08:07] <moritz> sergot_++

[08:07] <moritz> brrt++

[08:07] *** liztormato left
[08:08] <FROGGS> not only SSL (TLS, really!) support, but the entire LWP toolchain

[08:09] <tadzik> oh, hey zacts 

[08:09] * moritz finds that MTA (Moar Than Awesome)

[08:09] <zacts> tadzik: hey sup? oh you are the dude I was working on that perl-webcasts with iirc.

[08:10] <tadzik> yep

[08:10] <zacts> cool. I haven't made any progress on it, too many projects, and school is going to get busy soon starting in the fall.

[08:10] <zacts> :-)

[08:10] <moritz> school? busy? wait till you have > 1 kids at home! :-)

[08:11] <zacts> but, today reminded me of it because someone mentioned http://pearlbee.org/ or whatever

[08:11] <zacts> moritz: :D

[08:11] *** lizmat joined
[08:12] <zacts> tadzik: http://www.builtinperl.com/ <- the exact layout we planned for the perl-webcast

[08:12] <tadzik> haha, yeah

[08:14] *** cosimo left
[08:15] *** Alula left
[08:15] *** cosimo joined
[08:16] *** Alula joined
[08:16] <lizmat> moritz: maybe we need something like subtests

[08:16] <lizmat> (as in Perl5's Test::More

[08:16] <lizmat> )  will ponder while doing second part of commute to Poznan

[08:28] *** fhelmberger joined
[08:31] <lizmat> commuting&

[08:31] *** lizmat left
[08:40] *** rurban joined
[08:44] *** rurban left
[08:56] <timotimo> http://gentwoo.elisp.net/users/omasanori - huh, interesting concept

[08:57] *** dakkar joined
[09:00] *** dmol joined
[09:01] *** denis_boyun_ left
[09:04] *** berekuk left
[09:05] *** berekuk joined
[09:06] *** SevenWolf left
[09:07] *** zacts left
[09:08] <timotimo> oh, zacts is gone

[09:08] *** zacts joined
[09:08] <timotimo> FROGGS: that benchmark isn't very representable, because it only shows moarvm and that has known problems with string performance

[09:08] <FROGGS> timotimo: then it is very representable

[09:09] <timotimo> you think so?

[09:10] <timotimo> i could make a new graph with only rakudo-moar, rakudo-parrot and rakudo-jvm

[09:10] <FROGGS> and Perl 5 ?

[09:10] <timotimo> yes

[09:11] <FROGGS> I mean, r-m is the fastest we have... and when its string ops are slow, well, then that is what we need to show

[09:11] <timotimo> i didn't even realize rakudo-moar is able to overtake nqp on the while_empty_native benchmark, that's pretty cool

[09:11] <timotimo> well, if you have something that heavily relies on join, you can just switch to parrot

[09:11] <timotimo> if you have something that runs for a long time, just switch to jvm

[09:11] <FROGGS> true

[09:11] <FROGGS> in case you can switch at all

[09:11] <timotimo> right

[09:12] <timotimo> it's more likely you can switch from moar to jvm than from moar to parrot, given moar and jvm share multithreading capabilities

[09:12] <timotimo> zacts: heya

[09:12] <timotimo> zacts: seems like nobody mentioned that perl 6 has multithreading

[09:12] <timotimo> so ... that's a thing that ought to get some people excited

[09:13] <dalek> Perlito: 6cf47b4 | (Flavio S. Glock)++ | TODO-perlito5:

[09:13] <dalek> Perlito: Perlito5 - TODO update

[09:13] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/6cf47b4f59

[09:13] <FROGGS> Perl 5 has that too, but to a different layer of abstraction

[09:13] *** hoverboard left
[09:13] <timotimo> as far as i heard that is either terrible or just "processes"

[09:14] <FROGGS> it is easy to do it very wrong, yes

[09:17] *** SamuraiJack__ joined
[09:19] *** thou joined
[09:23] *** berekuk left
[09:24] *** thou left
[09:37] *** hoverboard joined
[09:40] *** rurban joined
[09:45] *** rurban left
[10:08] *** denis_boyun_ joined
[10:26] *** treehug88 joined
[10:34] *** anaeem1_ left
[10:34] *** anaeem1 joined
[10:41] *** rurban joined
[10:42] *** hoverboard left
[10:45] *** rurban left
[11:11] <daxim> what is the perl6 internal string model called again?  .oO(something normalisation mumble)

[11:11] <yoleaux> 26 Apr 2014 22:04Z <FROGGS> daxim: I have information about √ü.uc... if you are interested please either read your privmsg or ping me

[11:13] <nwc10> daxim: NFG. Normalisation Form for Graphemes

[11:13] <nwc10> (or, probably Normalization Form for Graphemes, because Larry comes from the place with other ideas about spelling

[11:13] <nwc10> nothing implements it yet

[11:14] <nwc10> I think that it's a deliberate joke that it can be confused with other meanings for NFG

[11:15] <daxim> ok, is there a design document for that?  can't find details with a google search

[11:15] <nwc10> that I don't know.

[11:15] <arnsholt> It's in one of the synopses

[11:16] <arnsholt> Which precise one escapes me ATM, but it might be S02

[11:16] <daxim> found S02 S03, but very light on details, no implementation hints

[11:17] <nwc10> the implementation idea that I'm aware of is to use negative code points for the faked up combining characters

[11:17] <daxim> "Documentation for this can hypothetically be found in S15."  # aha, it's clearly a todo

[11:23] <arnsholt> I think lue has been working on a spec for it recently

[11:29] <daxim> http://perl.plover.com/perl67.html

[11:29] *** anaeem1__ joined
[11:29] *** anaeem1 left
[11:31] *** skids left
[11:42] *** rurban joined
[11:46] *** rurban left
[11:56] *** robinsmidsrod joined
[11:59] * jnthn rather suspects the detailed spec will come about as the implementation takes place. :)

[11:59] <jnthn> Just as has happened with S17.

[11:59] <FROGGS> daxim / nwc10: https://raw.githubusercontent.com/perl6/specs/master/S15-unicode.pod

[12:06] *** FROGGS left
[12:08] *** Vendethiel- joined
[12:14] *** colomon joined
[12:18] *** chenryn left
[12:19] *** chenryn joined
[12:44] *** colomon left
[12:48] *** skids joined
[12:57] *** anaeem1__ left
[12:58] <dalek> specs: 64799da | grondilu++ | S05-regex.pod:

[12:58] <dalek> specs: Fixing pod errors in S05

[12:58] <dalek> specs: 

[12:58] <dalek> specs: nested lists were messed up around line 2270

[12:58] <dalek> specs: review: https://github.com/perl6/specs/commit/64799da9a6

[13:09] *** kaleem left
[13:09] *** kaleem joined
[13:10] *** colomon joined
[13:12] <dalek> rakudo-star-daily: ba19091 | coke++ | log/ (5 files):

[13:12] <dalek> rakudo-star-daily: today (automated commit)

[13:12] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/ba19091434

[13:12] <[Coke]> if there's a group of tests that cannot be todo'd individually, we should probably skip the whole block, unfortunately.

[13:13] *** lizmat joined
[13:15] <[Coke]> 'ack -a tap_ok' : nada. 

[13:15] *** skids left
[13:16] <[Coke]> weird. that dir had no t/spec. :)

[13:17] *** rurban joined
[13:18] * lizmat has arrived at the Elephant

[13:18] *** kaare_ left
[13:18] <[Coke]> ~~ lizmat!

[13:19] <lizmat> so, how about implementing sub tests in Test.pm ?

[13:20] <lizmat> is that a plan?  It would immediately fix the issues with tap_ok

[13:20] <lizmat> and other ones, like throws_like

[13:21] *** SamuraiJack__ left
[13:21] <jnthn> lizmat: How's l'elephant?

[13:22] <jnthn> lizmat: Have you unpacked your trunk yet? :P

[13:22] *** molaf joined
[13:22] <lizmat> we're halfway unpacking the trunk

[13:22] * jnthn wonders if the hotel is big and trumpets now and then :)

[13:23] <lizmat> the hotel is much smaller than we thought

[13:23] <jnthn> Just don't try giving it LSD :P

[13:23] <lizmat> but the room is very nice and roomy

[13:23] <jnthn> Cool :)

[13:23] <jnthn> Is it situated kinda central?

[13:23] <jnthn> Will I be able to sanely walk to it from the station tomorrow? :)

[13:23] <lizmat> I have no idea: we selected it by proximity to the venue

[13:23] <jnthn> ah, ok :)

[13:24] <jnthn> I'll look at a map later :)

[13:25] <lizmat> my navigator says 3.3 km from main railway station

[13:25] <lizmat> if that is a sane distance for you, it will be a sane walk  :-)

[13:26] <jnthn> That's a "if it's not raining" walk :)

[13:27] <lizmat> hehe  just don't start looking for a pink polka dotted elephant...

[13:27] <jnthn> aww

[13:27] <lizmat> you won't find the hotel that way

[13:27] <jnthn> Is it well hidden? :)

[13:28] <lizmat> it's in the middle of what I would describe as a suburb

[13:28] <lizmat> feels like it used to be two houses, that they connected through an connection through the basement

[13:28] <lizmat> *a

[13:28] <jnthn> ah, k

[13:30] <jnthn> My train gets in at 18:30 or so tomorrow.

[13:33] *** raiph joined
[13:33] *** anaeem1 joined
[13:34] *** kaleem left
[13:36] *** Vendethiel- left
[13:43] *** btyler joined
[13:44] *** treehug88 left
[13:55] *** xusia joined
[14:00] *** tgt joined
[14:02] *** bluescreen10 joined
[14:05] *** woolfy joined
[14:06] *** guru joined
[14:06] *** salv0 left
[14:06] *** guru is now known as ajr_

[14:09] *** thou joined
[14:15] *** nnunley joined
[14:15] *** xenoterracide_ joined
[14:15] *** rindolf joined
[14:24] *** salv0 joined
[14:27] *** treehug88 joined
[14:29] *** kaare_ joined
[14:31] <btyler> .tell colomon woo for ganging up on panda with pull reqs to fix $*VM.name :)

[14:31] <yoleaux> btyler: I'll pass your message to colomon.

[14:32] <colomon> btyler++

[14:32] <yoleaux> 14:31Z <btyler> colomon: woo for ganging up on panda with pull reqs to fix $*VM.name :)

[14:32] <colomon> message was driving me crazy. :)

[14:33] *** bluescreen100 joined
[14:33] <btyler> tadzik mentioned doing something to accomodate folks on older rakudos

[14:33] <btyler> before merging the VM name tweak

[14:33] * lizmat wonders whether the deprecation messages are too much?

[14:34] <lizmat> please note that everything still works

[14:34] <lizmat> so it you have code that runs on older rakudo's 

[14:34] <lizmat> you don't need to change it

[14:34] <lizmat> or make some special condition to handle both cases

[14:34] <lizmat> and perhaps the deprecation message is too soon?

[14:35] <lizmat> I could undeprecate $VM<name> and $VM<config> for now and wait for a few months before officially deprecating?

[14:35] <btyler> they're great, but for small fixes it is hard to resist opening a pull req to get the message to go away -- they're a pretty strong call to action

[14:35] <btyler> they make it too easy, almost :)

[14:35] *** plobsing joined
[14:37] *** bluescreen10 left
[14:38] <lizmat> sometimes I wonder whether warnings shouldn't work this way as well (or at least optionally so)

[14:42] <lizmat> so I'm looking at implementing subtests in lib/Test.pm

[14:42] <lizmat> and I wonder if there is an easy way to .wrap a PeudoStash like MY::

[14:42] <lizmat> *PseudoStash

[14:45] <lizmat> a "subtest" would then just become a code ref that would wrap proclaim and say, and wrap the entire MY:: PseudoStash

[14:45] <lizmat> until the subtest is done, when proclaim and say would be unwrapped, and the  original MY:: restored

[14:45] <lizmat> jnthn: would that have *any* chance of flying ?

[14:46] <lizmat> the alternative would be to make all necessary my variables dynamic

[14:46] <lizmat> and create new ones inside "subtest"

[14:48] <lizmat> r: our $*a = "foo"; $*a.say; { our $*a = "bar"; $*a.say }; $*a.say

[14:48] <camelia> rakudo-{parrot,jvm,moar} 1984fd: OUTPUT¬´foo‚ê§bar‚ê§foo‚ê§¬ª

[14:50] <lizmat> I guess that has the best chances right now :-)

[14:54] *** scumdog joined
[14:54] *** scumdog left
[14:54] * [Coke] finds some more sixers on gittip.com

[15:03] *** bjz left
[15:04] *** igorsutton_ left
[15:05] *** igorsutton_ joined
[15:09] *** denis_boyun_ left
[15:09] *** igorsutton_ left
[15:10] <dalek> Perlito: add51c9 | (Flavio S. Glock)++ | / (4 files):

[15:10] <dalek> Perlito: Perlito5 - js - emitter for qr()

[15:10] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/add51c9cb9

[15:10] <lizmat> $ perl6 lib/Test.pm

[15:10] <lizmat> Segmentation fault: 11

[15:10] <lizmat> LizyPro-2:rakudo liz$ MVM_SPESH_DISABLE=1 perl6 lib/Test.pm

[15:10] <lizmat> ===SORRY!===

[15:10] <lizmat> Dynamic variable $*done_testing_has_been_run not found

[15:11] <lizmat> should I file a rakudobug for this?  ^^^ jnthn timotimo ?

[15:14] *** molaf_ joined
[15:15] <lizmat> rL our $*a; END { say $*a } # golfed

[15:15] <lizmat> r: our $*a; END { say $*a } # golfed

[15:15] <camelia> rakudo-parrot 1984fd: OUTPUT¬´===SORRY!===‚ê§Dynamic variable $*a not found‚ê§Dynamic variable $*a not found‚ê§current instr.: 'print_exception' pc 140071 (src/gen/p-CORE.setting.pir:59512) (gen/parrot/CORE.setting:11392)‚ê§called from Sub 'throw' pc 411113 (src/gen/p-CORE.setting.pi‚Ä¶¬ª

[15:15] <camelia> ..rakudo-jvm 1984fd: OUTPUT¬´===SORRY!===‚ê§Dynamic variable $*a not found‚ê§Unhandled exception: Dynamic variable $*a not found‚ê§  in print_exception (gen/jvm/CORE.setting:11370)‚ê§  in <anon> (gen/jvm/CORE.setting:11412)‚ê§  in  (gen/jvm/main.nqp:54)‚ê§  in  (gen/jvm/main.nqp)‚ê§  i‚Ä¶¬ª

[15:15] <camelia> ..rakudo-moar 1984fd: OUTPUT¬´(signal )¬ª

[15:17] <masak> lizmat: please, file a rakudobug.

[15:17] <masak> so that used to work, hm?

[15:17] <masak> it's not 100% clear to me that it should.

[15:17] <lizmat> I'm not sure

[15:17] *** molaf left
[15:17] <lizmat> r: our $*a; BEGIN { $*a = "foo" }; END { say $*a }  # here it should find it, no?

[15:18] <camelia> rakudo-{parrot,jvm,moar} 1984fd: OUTPUT¬´===SORRY!===‚ê§Dynamic variable $*a not found‚ê§¬ª

[15:18] <lizmat> apparently the BEGIN does make a difference, as it no longer segfaults

[15:21] <lizmat> S04:1902 : "Therefore you can't reliably refer to run-time variables from these closures even if they appear to be in the scope."

[15:21] <synopsebot> Link: http://perlcabal.org/syn/S04.html#line_1902

[15:21] <lizmat> so I guess it's not supposed to work

[15:21] <lizmat> the segfault is just a LTA error message  :-)

[15:21] <woolfy> I want to see the Poznan city center while the sun is shining...  :-)

[15:21] <dalek> Perlito: 51143f3 | (Flavio S. Glock)++ | / (3 files):

[15:21] <dalek> Perlito: Perlito5 - js - emitter for qr() - simplify

[15:21] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/51143f3d21

[15:25] *** dwarring left
[15:25] <lizmat> seems I'm being abducted&

[15:25] <jnthn> decommute &

[15:30] *** simcop2387 joined
[15:41] <btyler> jnthn++ # panda's happily building/rebootstrapping again on HEAD master/master/nom

[15:42] *** woolfy left
[15:43] *** FROGGS joined
[15:48] *** FROGGS left
[15:53] <dalek> mu: 303759d | TimToady++ | docs/Perl6/Perl5/Differences.pod:

[15:53] <dalek> mu: ' and - just have to be before alpha, not between

[15:53] <dalek> mu: 

[15:53] <dalek> mu: X0123-Y432 is a valid identifier.

[15:53] <dalek> mu: review: https://github.com/perl6/mu/commit/303759d880

[15:54] *** ajr_ left
[15:55] *** guru joined
[15:55] *** guru is now known as ajr_

[15:56] *** zakharyas left
[15:56] *** fhelmberger left
[15:56] <timotimo> huh? what did jnthn even change?

[15:56] <timotimo> i'm confused.

[15:57] <ingy> btyler: hi

[16:02] <btyler> ingy: hi! already used search. life is good. timotimo: I don't know honestly -- there was a commit to moar but it didn't mention panda

[16:02] *** xinming_ left
[16:03] <ingy> btyler: glad you like it. file issues as needed.

[16:04] <ingy> PerlJam: I figured out a simple way and powerful way to do per command help and also usage on command errors. will have it later today.

[16:05] <PerlJam> ingy++

[16:07] <dalek> mu: 611cf01 | TimToady++ | docs/Perl6/Perl5/Differences.pod:

[16:07] <dalek> mu: you mustn't poke multis into GLOBAL, no, no, no!

[16:07] <dalek> mu: review: https://github.com/perl6/mu/commit/611cf01dd6

[16:07] <jnthn> haha

[16:07] <jnthn> Yes, that's quite the bad idea :)

[16:07] <ingy> PerlJam: `git hub help --all` will work like `git help --all`

[16:08] <jnthn> btyler: I...uh...didn't fix anything yet? :S

[16:11] *** ajr_ left
[16:11] <btyler> jnthn: ...bother. upgraded to heisenbug :(

[16:11] *** guru joined
[16:11] *** guru is now known as Guest62740

[16:12] <PerlJam> oh the ways in which we fool ourselves ...  I just accidentally typed  'perl6  and kept wondering why my commands weren't generating any output  :)

[16:13] *** Guest62740 is now known as ajr_

[16:14] <dalek> mu: 040f663 | TimToady++ | docs/Perl6/Perl5/Differences.pod:

[16:14] <dalek> mu: subscripts are now functions, not methods

[16:14] <dalek> mu: review: https://github.com/perl6/mu/commit/040f663e58

[16:21] *** Rotwang joined
[16:26] *** Psyche^ joined
[16:26] *** Psyche^_ left
[16:28] *** rurban left
[16:33] *** rurban joined
[16:35] *** tgt left
[16:47] *** daxim left
[16:48] *** tgt joined
[16:53] *** FROGGS joined
[16:55] <mls> jnthn: in your 'Include SC identifiers in bytecode dump' MoarVM commit, is that commenting out of the 'cached' check intentional?

[16:55] *** kurahaupo joined
[16:55] <jnthn> Hm, no...

[16:55] <jnthn> I wonder if that might be what fixed Panda for btyler though... :)

[17:01] *** denis_boyun joined
[17:01] *** daxim joined
[17:01] *** dakkar left
[17:02] <[Coke]> RT #69492 - marked as fixed, but not testneeded. LHF for someone to write a test...

[17:02] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=69492

[17:05] <[Coke]> hey, can we get a ticketing system that doesn't aggresively reformat code making it impossible to cut and paste?

[17:09] <[Coke]> rakudo: eval "ba"

[17:10] <camelia> rakudo-{parrot,jvm,moar} 1984fd: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling eval_0‚ê§Undeclared routine:‚ê§    ba used at line 1‚ê§‚ê§Saw 1 call to deprecated code during execution.‚ê§================================================================================‚Ä¶¬ª

[17:10] <[Coke]> r: eval "{\n\n\n\n\'}"

[17:10] <camelia> rakudo-{parrot,jvm,moar} 1984fd: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Confused‚ê§at /tmp/tmpfile:1‚ê§------> [32meval "{\n\[33m‚èè[31mn\n\n\'}"[0m‚ê§    expecting any of:‚ê§        postfix‚ê§¬ª

[17:11] <moritz> [Coke]: you realize that those { } introduce a closure?

[17:11] *** ggoebel111115 joined
[17:11] <TimToady> not if it doesn't compile

[17:12] <masak> TimToady: re https://github.com/perl6/mu/commit/040f663e58 -- surely if you s/method/sub/ something, it should have an additional parameter, too?

[17:13] <TimToady> m: say "{\n\n\n\n\'}"

[17:13] <camelia> rakudo-moar 1984fd: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/x6H__0VN2i‚ê§Confused‚ê§at /tmp/x6H__0VN2i:1‚ê§------> [32msay "{\n\[33m‚èè[31mn\n\n\'}"[0m‚ê§    expecting any of:‚ê§        postfix‚ê§¬ª

[17:13] <masak> aka "where'd the invocant go?" :)

[17:13] <[Coke]> .ask cognomial if we can close RT #75592 .

[17:13] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=75592

[17:13] <yoleaux> [Coke]: I'll pass your message to cognomial.

[17:15] <[Coke]> moritz: its the original test code from cognomial in the ticket.

[17:16] <dalek> mu: 2c710e6 | TimToady++ | docs/Perl6/Perl5/Differences.pod:

[17:16] <dalek> mu: missing args spotted by masak++

[17:16] <dalek> mu: review: https://github.com/perl6/mu/commit/2c710e623a

[17:16] <[Coke]> r: say :foo<<string\ here>>.perl

[17:16] <camelia> rakudo-parrot 1984fd: OUTPUT¬´"foo" => $("string", "here")‚ê§Saw 1 call to deprecated code during execution.‚ê§================================================================================‚ê§$*VM<config> called at:‚ê§  gen/parrot/CORE.setting, line 6244‚ê§Please use $*VM.config in‚Ä¶¬ª

[17:16] <camelia> ..rakudo-{jvm,moar} 1984fd: OUTPUT¬´"foo" => $("string", "here")‚ê§¬ª

[17:16] <[Coke]> ^^ hey, we have some internal deprecations. 

[17:22] <[Coke]> r: say callframe().callframe(1).my.perl # RT #77754

[17:22] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=77754

[17:22] <camelia> rakudo-jvm 1984fd: OUTPUT¬´Callframe.callframe not yet implemented. Sorry. ‚ê§  in method callframe at gen/jvm/CORE.setting:14453‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[17:22] <camelia> ..rakudo-parrot 1984fd: OUTPUT¬´Callframe.callframe not yet implemented. Sorry. ‚ê§  in method callframe at gen/parrot/CORE.setting:14710‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[17:22] <camelia> ..rakudo-moar 1984fd: OUTPUT¬´Callframe.callframe not yet implemented. Sorry. ‚ê§  in method callframe at src/gen/m-CORE.setting:14513‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[17:24] <vendethiel> subscripts are functions but they can access this ?

[17:25] *** molaf_ left
[17:25] <vendethiel> ah, masak++ was faster

[17:27] <vendethiel> (what's wrong with having them as method ?)

[17:27] <vendethiel> well, I guess you need them as sub if you want to lexically override the builtin hash ones

[17:32] *** kurahaupo_mobile joined
[17:33] *** kurahaupo left
[17:33] *** kurahaupo_mobile is now known as kurahaupo

[17:34] *** tgt left
[17:35] *** ajr_ left
[17:43] <masak> vendethiel: the way I understand it, there were good arguments for it being methods, too, but what finally made the 'sub' side won was that subs are much easier to inline.

[17:44] <vendethiel> fair enough

[17:47] <jnthn> Also, infix, prefix, and postfix are subs...why not zoid^Wpostcircumfix? :)

[17:54] <masak> well, to be fair, only postfix and postcircumfix would've made sense as methods.

[17:57] <vendethiel> agreed

[18:00] *** hoverboard joined
[18:09] *** SamuraiJack__ joined
[18:11] <ingy> btyler: did your coworkers like the git-hub?

[18:15] *** anaeem1 left
[18:15] <PerlJam> TimToady: Shouldn't the ex-invocant be typed as OrderedHash for those subs?  Otherwise, how is the dispatcher to distinguish them?

[18:15] *** anaeem1 joined
[18:20] <dalek> mu: 51a92da | TimToady++ | docs/Perl6/Perl5/Differences.pod:

[18:20] <dalek> mu: multi needs type on former invocant, PerlJam++

[18:20] <dalek> mu: review: https://github.com/perl6/mu/commit/51a92da2d5

[18:20] <TimToady> obviously you guys should be writing this documentation, not me :)

[18:20] *** anaeem1 left
[18:22] <PerlJam> It's a group effort.  :)

[18:25] *** dwarring joined
[18:26] * masak read that as "it's a grump effort" :)

[18:28] <nwc10> curious. Have you been reading this too? http://theoatmeal.com/comics/grump

[18:28] * nwc10 read that after the 2 parts of http://theoatmeal.com/comics/tesla_model_s

[18:29] *** rurban left
[18:32] *** rurban joined
[18:32] <masak> nwc10: hadn't seen that one, no :)

[18:38] *** hoverboard left
[18:41] *** anaeem1 joined
[18:42] <PerlJam> Is  token foo {  <+:Digit + foo-bar> }  meant to include the foo-bar rule in the character class because of LTM or should that be "add foo, subtract bar"  ?

[18:43] <PerlJam> er ... ignore the poor choice of naming and pretend that one of those "foo" is something else.

[18:43] *** [Sno] joined
[18:44] *** logie_ joined
[18:45] *** [Sno]_ left
[18:45] *** anaeem1 left
[18:49] * vendethiel felt stupid when his internship tutor asked him the password and he answered "swagswag" (:

[18:51] <FROGGS> *g*

[18:53] *** Shazam joined
[18:57] *** anaeem1 joined
[18:58] <masak> you're not supposed to reveal your passwords to other people... :)

[19:05] <grondilu> TimToady: about chess960:  it seems that the code says "done compiling" and yet still takes ages to show the solution.  On my machine anyway.

[19:05] <TimToady> see last edit to add the eager I had on my machine

[19:06] <TimToady> and forgot to copy over

[19:06] <grondilu> oh, ok

[19:06] *** igorsutton_ joined
[19:06] <dalek> roast: ea2fea5 | (David Warring [email@hidden.address] | integration/advent2012-day15.t:

[19:06] <dalek> roast: Don't assume hash key order.

[19:06] <dalek> roast: 

[19:06] <dalek> roast: "The order of hash keys is implementation dependent and arbitrary" - S09

[19:06] <dalek> roast: review: https://github.com/perl6/roast/commit/ea2fea540a

[19:06] *** shanghai2013 joined
[19:07] *** shanghai2013 left
[19:07] <grondilu> .oO( "eager gather" is a bit weird )

[19:07] <TimToady> takes about 12 seconds on my machine to generate all 960 entries

[19:07] <TimToady> just using it for dataflow control here

[19:08] <TimToady> notational convenience...

[19:09] <TimToady> otherwise we'd have to mutate something, or put a bunch of parens to return loop values

[19:09] *** darutoko left
[19:09] <TimToady> just because something is lazy by default doesn't mean it's not useful in an eager context sometimes

[19:10] <TimToady> and a few eagers thrown in is likely to make things run a lot faster once the optimizer learns about it a bit better

[19:11] <TimToady> though in this case ranges already know to generate themselves in batches in a for/map situation

[19:11] *** SamuraiJack__ left
[19:12] <TimToady> with an eager the optimzer could preallocate the output storage, for instance, since it's okay when you're eager to ask for .elems on the right side

[19:12] <grondilu> ok

[19:12] <grondilu> also, shouldn't you use splice instead of insert?

[19:13] <TimToady> no, because I reuse the arrays, and splice is mutational, I think

[19:14] <grondilu> oh yeah it's mutational indeed.

[19:14] <TimToady> we oughta have something like that as a builtin though

[19:14] <TimToady> it would be okay if we were generating a single board, but we're looping

[19:15] <vendethiel> masak: that one, I am :)

[19:15] <masak> .splice is one of the few that "has to" be mutational, because it already uses the return value for something else.

[19:15] <TimToady> well, there's certainly room for a .subst-alike

[19:16] <TimToady> .replacing($pos,$off,@list)

[19:16] <TimToady> or some such

[19:17] <TimToady> or .splicing, if you ignore the mutational metaphor

[19:18] <masak> .splicing feels... not different enough.

[19:20] <grondilu> .clone.splice(...) ?

[19:21] <masak> ah, the jQuery approach.

[19:22] <grondilu> well, I just realize that splice does not return the resulting array anyway

[19:23] <vendethiel> .oO( You must mean jQuery monad ! )

[19:23] <masak> oh, right.

[19:23] <masak> that's what I meant by <masak> .splice is one of the few that "has to" be mutational, because it already uses the return value for something else.

[19:23] <vendethiel> .oO( is there a jQuery backend in the works for rakudo ? )

[19:23] <masak> vendethiel: there's a JS backend in the works.

[19:23] <masak> vendethiel: but it's a long time since I heard any status on that.

[19:24] <vendethiel> masak: 1) that was a joke 2) no, it's not really "in the works"

[19:24] <vendethiel> it even has huge chunks of PIR

[19:24] *** molaf joined
[19:24] <masak> :/

[19:25] <vendethiel> (since I'm doing too much of altJS already, I took a look, and I kept looking at the code like mmhmhmh, yes, yes)

[19:28] <[Coke]> wonder if it would be worth switching the WIP on rakudo-js to moar instead of parrot.

[19:28] <[Coke]> seen pmurias

[19:28] <[Coke]> .seen pmurias

[19:28] <yoleaux> I saw pmurias 13 Apr 2014 19:07Z in #perl6: <pmurias> the coffescript scoping still seems much saner the javascript one

[19:29] <vendethiel> why is there backend-specific stuff even ?

[19:29] <masak> pmurias: famous last words :P

[19:29] <masak> vendethiel: yeah, PIR doesn't make sense in the context of Rakudo-JS.

[19:30] * grondilu is still thinking about the "eager gather"

[19:30] <grondilu> r: say (do for ^2 { for ^2 { rand } });

[19:30] <camelia> rakudo-{parrot,jvm,moar} 1984fd: OUTPUT¬´‚ê§¬ª

[19:30] <grondilu> n: say (do for ^2 { for ^2 { rand } });

[19:30] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´Nil‚ê§¬ª

[19:31] *** anaeem___ joined
[19:31] <grondilu> I thought this would return a list of four random numbers

[19:31] *** igorsutton_ left
[19:31] <grondilu> n: say (do for ^2 { rand });

[19:31] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´Nil‚ê§¬ª

[19:31] <grondilu> n: say [ do for ^2 { rand } ];

[19:31] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´‚ê§¬ª

[19:33] <grondilu> r: say [ do for ^10 { $_ } ];

[19:33] <camelia> rakudo-{parrot,jvm,moar} 1984fd: OUTPUT¬´0 1 2 3 4 5 6 7 8 9‚ê§¬ª

[19:33] <grondilu> :/

[19:33] <jnthn> grondilu: You need to do the inner for too

[19:33] <TimToady> you need to desink each level

[19:34] <TimToady> that's the WAT that goes with the latest DWIM :/

[19:34] <vendethiel> inner for ?

[19:34] <grondilu> r: say [ do for ^2 { $_ } ];

[19:34] <camelia> rakudo-{parrot,jvm,moar} 1984fd: OUTPUT¬´0 1‚ê§¬ª

[19:34] <TimToady> much more straightforward to use gather/take, since that conveys up front what you're intending

[19:34] *** igorsutton_ joined
[19:34] *** anaeem1 left
[19:35] <grondilu> yeah but really "eager gather" is nagging me

[19:35] <vendethiel> what's the inner for ?

[19:35] <grondilu> vendethiel: there were two for in the first attempt

[19:36] <vendethiel> oh, alright

[19:36] <TimToady> that's what eager is there for, to make lazy-by-default things eager

[19:37] <TimToady> we're not gonna double our keywords just to avoid making one default the default

[19:37] <grondilu> ok ok

[19:37] <vendethiel> grondilu: alright, but I don't understand why rand vs $_ works here then

[19:37] <TimToady> if we'd picked eager for the default we'd be scattering lazy's all over

[19:37] <grondilu> vendethiel: neither do I, actually.

[19:38] <TimToady> the rands were on niecza

[19:38] <grondilu> r: say [ do for ^2 { rand } ];

[19:38] <camelia> rakudo-moar 1984fd: OUTPUT¬´0.242092961426072 0.689935728269873‚ê§¬ª

[19:38] <camelia> ..rakudo-jvm 1984fd: OUTPUT¬´0.5510638062724672 0.06658677472904218‚ê§¬ª

[19:38] <camelia> ..rakudo-parrot 1984fd: OUTPUT¬´0.364523359199183 0.709466077891317‚ê§¬ª

[19:39] <grondilu> indeed

[19:39] *** kurahaupo left
[19:39] <masak> 'night, #perl6

[19:39] <TimToady> o/

[19:40] *** brrt joined
[19:42] <vendethiel> you fooled me, grondilu !

[19:43] <vendethiel> it's nice it works :)

[19:44] * lizmat is back from abduction

[19:46] <jnthn> How is the abduction in Poznan?

[19:46] <lizmat> pretty good, actually...

[19:47] <lizmat> the weather turned nice in the afteroon

[19:47] <TimToady> lizmat is now back in induction...production...reduction...whatever the opposite of 'ab' is...

[19:47] <lizmat> baduction ?

[19:48] *** berekuk joined
[19:48] <TimToady> as uctions go that's pretty bad

[19:48] <sergot_> lizmat: Welcome to Poznan! \o/

[19:48] <lizmat> Hi sergot_ !

[19:49] <lizmat> somehow, lctions looks Polish to me now

[19:49] <TimToady> well, if that's the case...

[19:49] <geekosaur> subduction? :p

[19:49] <TimToady> I cede the title to you

[19:50] * TimToady tries to imagine a superduction

[19:50] *** rindolf left
[19:50] <TimToady> the superducting tectonic plates rose hundreds of kilometers into the atmostphere...

[19:51] <lizmat> .oO( Rakudo, the superduction tape of the future internet )

[19:51] *** rindolf joined
[19:51] <jnthn> Well, about 100km inland of the subduction, that's just about what happens...though more in the ~10km region :P

[19:51] <jnthn> A hundred kilometer tall mountain would be a heck of a climb...

[19:53] <lizmat> r: my $a, my $b;  # LTA warning?

[19:53] <camelia> rakudo-{parrot,jvm,moar} 1984fd: ( no output )

[19:53] <TimToady> std: my $a, my $b;  # LTA warning?

[19:53] <camelia> std ec3d853: OUTPUT¬´ok 00:01 125m‚ê§¬ª

[19:53] <FROGGS> LTA silence :o)

[19:54] <TimToady> it's perfectly fine, actually

[19:54] <TimToady> std: my $a, $b;  # LTA warning?

[19:54] <camelia> std ec3d853: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Variable $b is not predeclared (declarators are tighter than comma, so maybe your 'my' signature needs parens?) at /tmp/RhZV2ddXIg line 1:‚ê§------> [32mmy $a, [33m‚èè[31m$b;  # LTA warning?[0m‚ê§Check failed‚ê§FAILED 00:01 12‚Ä¶¬ª

[19:54] <lizmat> r: my $a, my $b; ($a,$b) = (2,3)

[19:54] <camelia> rakudo-{parrot,jvm,moar} 1984fd: OUTPUT¬´WARNINGS:‚ê§Useless use of "," in expression "my $a, my $b" in sink context (line 1)‚ê§¬ª

[19:54] <lizmat> std: my $a, my $b; ($a,$b) = (2,3)

[19:54] <camelia> std ec3d853: OUTPUT¬´ok 00:01 128m‚ê§¬ª

[19:54] <TimToady> that's true enough

[19:55] <lizmat> r: my $a, my $b; .say  # golfed further

[19:55] <camelia> rakudo-{parrot,jvm,moar} 1984fd: OUTPUT¬´WARNINGS:‚ê§Useless use of "," in expression "my $a, my $b" in sink context (line 1)‚ê§Nil‚ê§¬ª

[19:55] <lizmat> ah, I don't need the comma!

[19:55] <PerlJam> std: / <[ a..m '-' n..z ]> /

[19:55] <camelia> std ec3d853: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unsupported use of - as character range; in Perl 6 please use .. (or \- if you mean a literal hyphen) at /tmp/UahnFFRRet line 1:‚ê§------> [32m/ <[ a..m '-'[33m‚èè[31m n..z ]> /[0m‚ê§Parse failed‚ê§FAILED 00:01 123m‚ê§¬ª

[19:55] <lizmat> r: my $a my $b; .say  # huh?   :-)

[19:55] <camelia> rakudo-{parrot,jvm,moar} 1984fd: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Two terms in a row‚ê§at /tmp/tmpfile:1‚ê§------> [32mmy $a [33m‚èè[31mmy $b; .say  # huh?   :-)[0m‚ê§    expecting any of:‚ê§        scoped declarator‚ê§        constraint‚Ä¶¬ª

[19:56] <TimToady> we should have a warning about duplicated chars in a cclass

[19:56] <TimToady> like quotes...

[19:56] <TimToady> lizmat: there's no reason you wouldn't just use a semicolon instead of a comma

[19:57] <lizmat> I know

[19:57] <lizmat> it was more a typo  :-)

[19:57] <TimToady> if it's not in sink context, of course, you might mean it

[19:57] <lizmat> and a WAT afterwards  :-)

[19:58] <PerlJam> TimToady: why not make quoting characters valid in character classes?

[19:59] <lizmat> I guess I sorta expected "my $a, $b" to be an equivalent for "my ($a,$b)"

[19:59] *** berekuk left
[19:59] <lizmat> since Perl 6 does away with parens in many cases

[19:59] <PerlJam> i.e. so that <[ "a".."z" ]>  is the same as <[ a..z ]>

[19:59] <TimToady> p6 doesn't get rid of parens in lvalues

[19:59] *** igorsutton_ left
[20:00] <TimToady> and just 'cuz Python makes , tighter than = on the LHS doesn't mean we're a'gonna do it

[20:01] <lizmat> and completely understood (now)  :-)

[20:01] <dalek> nqp/loop_labels: b616d6c | (Tobias Leich)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[20:01] <dalek> nqp/loop_labels: keep the loop label as a MAST::Local

[20:01] <dalek> nqp/loop_labels: 

[20:01] <dalek> nqp/loop_labels: This means we can check for identical labels in the C code which resolves the handler,

[20:01] <dalek> nqp/loop_labels: and do not need to do that in QAST.

[20:01] <dalek> nqp/loop_labels: review: https://github.com/perl6/nqp/commit/b616d6cc2b

[20:01] * TimToady thinks of Python's consistency on that point in terms of hobgoblins

[20:01] <[Coke]> FROGGS: I assigned you the RT about loop labels.

[20:02] *** hoverboard joined
[20:03] <TimToady> and if you try to get rid of all the parens, you have the opposite problem of Lisp

[20:03] *** berekuk joined
[20:03] <FROGGS> [Coke]: seen it

[20:03] <dalek> rakudo/loop_labels_test: ee0c5ed | (Tobias Leich)++ | src/core/MapIter.pm:

[20:03] <dalek> rakudo/loop_labels_test: decont the label we pass to nqp::handle

[20:03] <dalek> rakudo/loop_labels_test: 

[20:03] <dalek> rakudo/loop_labels_test: Otherwise we compare the payload of the exception with the container of the label.

[20:03] <dalek> rakudo/loop_labels_test: review: https://github.com/rakudo/rakudo/commit/ee0c5ed3ae

[20:04] <FROGGS> will close it hopefully soon :o)

[20:04] <[Coke]> FROGGS++

[20:05] <FROGGS> I think parrot and moar are fine now

[20:06] <FROGGS> only jvm needs to be told what I did to moar right now: keep the label object but not a perhaps outdated mem address

[20:08] *** woolfy joined
[20:10] *** hummeleB1 left
[20:14] *** jnap joined
[20:14] *** jnap left
[20:17] *** cosimo left
[20:18] *** rindolf left
[20:21] <dalek> roast: b3ab04f | (David Warring [email@hidden.address] | integration/advent2010-day12.t:

[20:21] <dalek> roast: adding advent 2010 day 12

[20:21] <dalek> roast: review: https://github.com/perl6/roast/commit/b3ab04f4ee

[20:24] *** molaf left
[20:26] <TimToady> PerlJam: that heads back in the direction of making people memorize a list of metachars; I'd rather keep it down to \ and .. and just warn if we see any duplicated char other than dot

[20:26] *** kaare_ left
[20:27] <TimToady> and it's not like we have to be consistent with normal regex, since .. already means something very different in a cclass

[20:27] <dalek> rakudo/nom: 5e88e5d | (Elizabeth Mattijsen)++ | lib/Test.pm:

[20:27] <dalek> rakudo/nom: Preliminary work to create "subtest code, desc"

[20:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5e88e5d5e8

[20:29] <TimToady> besides, I don't think we want to encourage people to write things like <[ "$a".."$z" ]>

[20:29] <TimToady> that way lies madness

[20:30] <TimToady> and we should keep such madness inside of <{...}>

[20:30] *** cosimo joined
[20:30] <PerlJam> fair enough.   I just expected <[ a..z '-' ]> to work and it seemed odd when it didn't.

[20:32] *** hoverboard is now known as cacopunny

[20:32] <PerlJam> (and the complaint about - being last or escaped didn't help enough because I was thinking, "I've quoted it!  Why does it need to be escaped?")

[20:33] *** denis_boyun left
[20:33] *** cacopunny is now known as hoverboard

[20:36] *** Rotwang left
[20:36] *** bbkr_ joined
[20:37] *** anaeem___ left
[20:38] *** kurahaupo joined
[20:38] *** woolfy left
[20:38] *** woolfy joined
[20:41] *** denis_boyun_ joined
[20:43] <TimToady> std: / <[ a..z]+'-'> /

[20:43] <camelia> std ec3d853: OUTPUT¬´ok 00:01 124m‚ê§¬ª

[20:44] <TimToady> std: / <[ a..z ] + '-'> /

[20:44] <camelia> std ec3d853: OUTPUT¬´ok 00:01 124m‚ê§¬ª

[20:44] <vendethiel> I've been bit by that too, while pretty minor

[20:44] <TimToady> m: / <[ a..z ] + '-'> /

[20:44] <camelia> rakudo-moar 1984fd: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/0El1ELZhgI‚ê§Unable to parse expression in metachar:sym<assert>; couldn't find final '>' ‚ê§at /tmp/0El1ELZhgI:1‚ê§------> [32m/ <[ a..z ] + [33m‚èè[31m'-'> /[0m‚ê§    expecting any of:‚ê§      ‚Ä¶¬ª

[20:44] <vendethiel> s/b/h/|s/$/en

[20:44] <TimToady> I guess rakudo doesn't suppor tthat yet

[20:44] <TimToady> *ort

[20:45] *** raiph left
[20:56] <flussence> r: (^0xFF)¬ª.chr.grep(/ <alpha & lower> /).say

[20:56] <camelia> rakudo-parrot 1984fd: OUTPUT¬´too many positional arguments: 2 passed, 1 expected‚ê§  in any alpha at gen/parrot/stage2/QRegex.nqp:1044‚ê§  in regex  at /tmp/tmpfile:1‚ê§  in method ACCEPTS at gen/parrot/CORE.setting:13051‚ê§  in method ACCEPTS at gen/parrot/CORE.setting:794‚ê§  in b‚Ä¶¬ª

[20:56] <camelia> ..rakudo-jvm 1984fd: OUTPUT¬´Wrong number of arguments passed; expected 1..1, but got 2‚ê§  in method ACCEPTS at gen/jvm/CORE.setting:13028‚ê§  in block  at gen/jvm/CORE.setting:1628‚ê§  in method reify at gen/jvm/CORE.setting:7673‚ê§  in method reify at gen/jvm/CORE.setting:7536‚ê§  i‚Ä¶¬ª

[20:56] <camelia> ..rakudo-moar 1984fd: OUTPUT¬´Too many positional parameters passed; got 2 but expected 1‚ê§  in any alpha at gen/moar/stage2/QRegex.nqp:1050‚ê§  in method ACCEPTS at src/gen/m-CORE.setting:13085‚ê§  in block  at src/gen/m-CORE.setting:1628‚ê§  in method reify at src/gen/m-CORE.setting‚Ä¶¬ª

[20:57] <flussence> .oO( you are in a maze of twisty little backtraces, all different... )

[21:00] <vendethiel> they're all different, yay !

[21:00] <vendethiel> do we need {}-grouping for (non-LT)A error messages ?

[21:03] <flussence> though at least that tells me the regex stuff is very VM-specific :)

[21:03] *** grondilu left
[21:08] <vendethiel> r: sub a($) {}; a(1, 2)

[21:08] <camelia> rakudo-{parrot,jvm,moar} 1984fd: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Calling 'a' will never work with argument types (Int, Int)‚ê§    Expected: :(Any)‚ê§at /tmp/tmpfile:1‚ê§------> [32msub a($) {}; [33m‚èè[31ma(1, 2)[0m‚ê§¬ª

[21:11] <vendethiel> r: sub a($) {}; a(Any, Any)

[21:11] <camelia> rakudo-{parrot,jvm,moar} 1984fd: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Calling 'a' will never work with argument types (Any, Any)‚ê§    Expected: :(Any)‚ê§at /tmp/tmpfile:1‚ê§------> [32msub a($) {}; [33m‚èè[31ma(Any, Any)[0m‚ê§¬ª

[21:12] <dalek> rakudo/nom: 875ce09 | (Elizabeth Mattijsen)++ | lib/Test.pm:

[21:12] <dalek> rakudo/nom: Implement subtest code, desc;

[21:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/875ce09acb

[21:12] <dalek> mu: f5bcc41 | duff++ | docs/Perl6/Perl5/Differences.pod:

[21:12] <dalek> mu: consistent indentation; minor grammar improvement

[21:12] <dalek> mu: review: https://github.com/perl6/mu/commit/f5bcc41818

[21:12] *** igorsutton_ joined
[21:15] *** igorsutton_ left
[21:16] <dalek> mu: c6ec526 | duff++ | docs/Perl6/Perl5/Differences.pod:

[21:16] <dalek> mu: turn tabs into spaces

[21:16] <dalek> mu: review: https://github.com/perl6/mu/commit/c6ec526561

[21:19] *** SevenWolf joined
[21:22] <dalek> roast: 503b612 | (Elizabeth Mattijsen)++ | packages/Test/Tap.pm:

[21:22] <dalek> roast: Make tap_ok use subtest, so it's only 1 test

[21:22] <dalek> roast: 

[21:22] <dalek> roast: Which should make fudging tests with tap_ok more straightforward

[21:22] <dalek> roast: review: https://github.com/perl6/roast/commit/503b61231f

[21:23] *** SevenWolf left
[21:26] <dalek> Perlito: 7afd967 | (Flavio S. Glock)++ | misc/overload.pl:

[21:26] <dalek> Perlito: Perlito5 - misc - 'overload' example

[21:26] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/7afd967379

[21:27] *** virtualsue left
[21:32] <flussence> lizmat++ # just today I was wishing I could do subtest-ish things in p6...

[21:33] <lizmat> yw  :)

[21:33] <lizmat> I still need to find out how to make "tap_ok" skippable

[21:34] <lizmat> I sort of expect a list of names to live somewhere

[21:43] <TimToady> look in fudge

[21:48] <lizmat> found it

[21:48] <lizmat> TimToady++

[21:50] *** ssutch left
[21:51] *** ssutch joined
[21:51] <dalek> roast: 5d24170 | (Elizabeth Mattijsen)++ | S17-supply/ (27 files):

[21:51] <dalek> roast: Change # of tests because tap_ok is now 1

[21:51] <dalek> roast: 

[21:51] <dalek> roast: Which drops us below 32000 tests again  :-(

[21:51] <dalek> roast: review: https://github.com/perl6/roast/commit/5d24170edf

[21:52] <jnthn> Write more tests! :P

[21:52] <moritz> subtests might also be a good solution to throws_like

[21:55] <dalek> roast: e88708b | (Elizabeth Mattijsen)++ | fudge:

[21:55] <dalek> roast: "tap_ok" is now also fudged

[21:55] <dalek> roast: review: https://github.com/perl6/roast/commit/e88708b7a1

[21:55] <dalek> roast: 7ed2ee5 | (Elizabeth Mattijsen)++ | S17-supply/ (2 files):

[21:55] <dalek> roast: Reluctantly skip failing S17-supply tests

[21:55] <dalek> roast: review: https://github.com/perl6/roast/commit/7ed2ee512d

[21:55] *** ssutch left
[21:55] <lizmat> moritz: throws_like is my next target

[21:56] *** bbkr_ left
[21:56] <jnthn> lizmat: That'll cost us even more passes ;)

[21:56] <jnthn> (But agree it makes sense! :))

[21:56] *** dmol left
[21:58] *** SevenWolf joined
[21:59] <lizmat> ok, slightly more tests use throws_like than I thought

[21:59] <lizmat> so I'm moving that work to a later time

[22:00] <lizmat> and call it a day now

[22:00] <lizmat> a day

[22:00] <lizmat> &

[22:01] <jnthn> 'night, lizmat :)

[22:01] * jnthn gets to meet/hack with lizmat and others soon :D

[22:03] *** denis_boyun_ left
[22:05] *** bluescreen100 left
[22:05] *** guru joined
[22:06] *** guru is now known as Guest83167

[22:06] *** Guest83167 is now known as ajr_

[22:12] *** logie_ left
[22:16] *** gtodd joined
[22:28] *** Timbus left
[22:32] *** rurban1 joined
[22:35] *** Timbus joined
[22:36] *** rurban left
[22:37] *** xenoterracide_ left
[22:37] *** SevenWolf left
[22:42] *** BenGoldberg joined
[22:52] *** bluescreen10 joined
[22:55] *** skids joined
[22:55] *** treehug88 left
[23:03] *** bluescreen100 joined
[23:07] *** bluescreen10 left
[23:11] *** SevenWolf joined
[23:15] *** xenoterracide_ joined
[23:15] *** pochi_ joined
[23:17] *** rurban1 left
[23:21] *** rurban joined
[23:25] *** brrt left
[23:28] *** berekuk left
[23:37] *** btyler left
[23:43] *** hoverboard left
[23:52] *** telex left
[23:54] *** telex joined
