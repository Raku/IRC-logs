[00:05] *** tadzik joined
[00:11] *** Mouq joined
[00:13] <Mouq> .tell Ven FWIW, here is what I put together the last time I was creating html from perl6 code: https://github.com/Mouq/perl6-feast/blob/master/bin/feast.pl

[00:13] <yoleaux> Mouq: I'll pass your message to Ven.

[00:13] <Mouq> s/from/within/, but the meaning is conveyed

[00:14] *** xenoterracide_ left
[00:22] <timotimo> would you do it with .&xml nowadays?

[00:22] *** adu joined
[00:23] *** telex left
[00:23] <raiph> m: my Str $foo = 'abc'; say "Hey <a>{$foo}</a>" # vendethiel: why does this warrant a p6-- for too aggressive interpolation?

[00:23] <camelia> rakudo-moar d2dfb6: OUTPUT«Hey <a>abc</a>␤»

[00:23] <Mouq> timotimo: I don't feel bad about using `augement` here, because it really is kind of DSL-y

[00:23] <timotimo> OK

[00:23] <timotimo> what does the output of that look like?

[00:24] <timotimo> oh, i think i recall that

[00:24] <Mouq> timotimo: http://mouq.github.io/feast.html

[00:24] *** telex joined
[00:24] <timotimo> feel like updating that to the newest daily?

[00:25] <Mouq> timotimo: Trying to get the html+css to do what I wanted was the hardest part of it, and it's why I kind of lost enthusiasm

[00:25] <timotimo> ah, yeah :(

[00:25] <timotimo> hate that part, too

[00:25] <Mouq> timotimo: Hmm

[00:25] <timotimo> protip: you can turn the S** headings into "labels" for their checkboxes

[00:25] <Mouq> timotimo: Sure

[00:25] <timotimo> so that you can click the text instead of having to aim for the checkbox

[00:26] <Mouq> timotimo: Thanks!

[00:26] <timotimo> i like that project

[00:26] <timotimo> can you try to add code to figure out a likely line number for an output by finding the text in the code?

[00:26] <timotimo> like for todos and skippeds?

[00:27] <timotimo> also: how long's the run time for that script?

[00:27] <timotimo> i would imagine it takes quite a while >_<

[00:27] <Mouq> timotimo: I was wondering the latter myself…

[00:31] <Mouq> I think my biggest problem was trying to get the tables to work like I wanted and still have it be variable-width... I'm thinking maybe fixed, relative width would work better

[00:31] *** lizmat joined
[00:32] <timotimo> maybe :|

[00:32] <timotimo> i can see how that would be quite fiddly and annoying

[00:34] <Mouq> perl6 bin/feast.pl  125.44s user 0.72s system 99% cpu 2:06.56 total

[00:35] <clkao> `.

[00:36] *** kbaker joined
[00:40] <Mouq> Oh.. Somehow I only did rakudo.jvm and rakudo.parrot?

[00:44] <Mouq> 'k, fixed that. Now for all the other things I left in a broken state…

[00:45] <timotimo> .o( $failure-summary seems to only ever be read, never written )

[00:46] <Mouq> timotimo: Yeah, that was something I apparantly fixed but never committed >_>

[00:47] <Mouq> timotimo: It turns out I tried using a div-based layout… so it's pretty borked visually atm

[00:47] <segomos> Mouq: what are you trying to do?

[00:48] <timotimo> i'll better go to bed now-ish

[00:48] <dalek> rakudo/nom: 631f02e | jnthn++ | src/core/Supply (2 files):

[00:48] <dalek> rakudo/nom: Implement schedule_on.

[00:48] <dalek> rakudo/nom: 

[00:48] <dalek> rakudo/nom: This allows a supply's more/done/quit to be scheduled on another

[00:48] <dalek> rakudo/nom: scheduler. Useful in GUI situations, for example, where the final

[00:48] <dalek> rakudo/nom: stage of some work needs to be done on some UI scheduler in order to

[00:48] <dalek> rakudo/nom: have UI updates run on the UI thread.

[00:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/631f02ebcc

[00:49] <timotimo> ooooh, that seems very handy!

[00:49] <Mouq> 'night timotimo :) whenever that happens

[00:49] <timotimo> if i am not able to fall asleep soon-ish, i'll just get back up, have a stab at the ops that we know do boxing for spesh and see if that changes anything at all

[00:50] <jnthn> sleep &

[00:50] <Mouq> segomos: I wanted to be able to show where the implementations were lacking in Roast, basically. If I pick this back up, I'm probably going to really change my approach from what it was 3 months ago, though

[00:50] <Mouq> jnthn++: 'night

[00:51] <Mouq> perl6 bin/feast.pl  354.87s user 1.74s system 99% cpu 5:58.05 total

[00:51] <segomos> i mean, what are you trying to do with the divs?  just even space them responsively?

[00:51] <Mouq> With everything other than pugs (perl6-m)

[00:51] <Mouq> segomos: Something like that

[00:51] <segomos> do you have a sample page i can play with?

[00:51] <segomos> i'm writing an xpath query thing and it's hurting my brain

[00:52] <Mouq> sergot: XPath always hurts my brain :)

[00:52] <Mouq> lemme push

[00:52] <timotimo> Mouq: if you're running it on moar, maybe it'd be a good idea to try to parallelize it :)

[00:52] <timotimo> (also, might make a good stability testing ground)

[00:52] <timotimo> bbl.

[00:52] <segomos> timotimo: can you link your parallelelizer article from yesterday?

[00:52] <Mouq> segomos: feast.html @ https://github.com/Mouq/perl6-feast/

[00:55] <segomos> basically..you want those boxes to look like a table grid?

[00:55] <segomos> xx tests aborted etc

[00:56] <Mouq> segomos: Yeah, I have no idea what I was trying to do before o_O

[00:57] *** a3gis left
[00:57] *** dayangkun left
[00:57] *** dayangkun joined
[00:59] * Mouq wonders why he has so many needlessly dynamic variables...

[00:59] <segomos> they look cool

[01:00] <Mouq> segomos: :)

[01:00] *** adu left
[01:00] <segomos> that might be easier to just change to a table.. how do you want it to break down if the browser is more narrow than the content

[01:01] <Mouq> segomos: dunno.. I'm too tired to do design right now :P

[01:02] *** klapperl joined
[01:05] *** klapperl_ left
[01:06] *** hoverboard left
[01:06] *** btyler joined
[01:12] *** adu joined
[01:23] *** FROGGS_ joined
[01:26] *** FROGGS left
[01:27] <Mouq> timotimo: I don't think start {} and m// work together well :(

[01:29] <Mouq> timotimo: I have a couple `when m[…] {…}` inside the `start {…}` that seem to think $/ is empty inside the `when`, even though that's nonsensical.

[01:29] <Mouq> (the start {…} is per-file, btw)

[01:32] <Mouq> timotimo: To clarify: they often *do* have $/ set. They also often do not. Declaring `my $/;` inside the start block leads to the error

[01:32] <Mouq> ===SORRY!===

[01:32] <Mouq> No exception handler located for warn

[01:32] <Mouq> Unhandled exception: Cannot call 'say'; none of these signatures match:

[01:32] <Mouq> :(Mu: *%_)

[01:33] <Mouq> So...

[01:33] <Mouq> idk

[01:33] <Mouq> bedtime for Mouq

[01:34] <Mouq> segomos: If you do any work at all, feel free to PR me :) if you are interested I can add you as a collaborator

[01:34] <Mouq> in the mean time, o/ #perl6

[01:34] *** Mouq left
[01:42] *** atroxaper left
[01:48] <BenGoldberg> m: my $p = start { $/ = 123; say "in Promise [$/]"; when /123/ { say 'when' }; say 'after when'; }; say $p.result;

[01:48] <camelia> rakudo-moar 631f02: OUTPUT«in Promise [123]␤after when␤True␤»

[01:49] <BenGoldberg> m: $/ = "123"; say "blah [$/]"; when /123/ { say 'when' }; say 'after when';

[01:49] <camelia> rakudo-moar 631f02: OUTPUT«blah [123]␤after when␤»

[01:49] <BenGoldberg> D'oh

[01:50] <BenGoldberg> m: $_ = 123; say "blah [$_]"; when /123/ { say 'when' }; say 'after when';

[01:50] <camelia> rakudo-moar 631f02: OUTPUT«blah [123]␤when␤»

[01:51] <BenGoldberg> m: my $p = start { $_ = 123; say "in Promise [$_]"; when /123/ { say "when [$/]" }; say 'after when'; }; say $p.result;

[01:51] <camelia> rakudo-moar 631f02: OUTPUT«in Promise [123]␤when [123]␤True␤»

[01:52] <BenGoldberg> m: my $/; $_ = 123; say "blah [$/]"; when /123/ { say "when [$/]" }; say 'after when';

[01:52] <camelia> rakudo-moar 631f02: OUTPUT«Potential difficulties:␤    Redeclaration of symbol $/␤    at /tmp/UTserf2NtG:1␤    ------> my $/⏏; $_ = 123; say "blah [$/]"; when /123/ ␤use of uninitialized value of type Any in string context␤blah []␤when [123]␤»

[01:57] *** adu left
[02:01] *** kbaker left
[02:01] *** [particle] joined
[02:04] *** skids joined
[02:04] <skids> No fair releasing so many neat features when I'm pinned down with $dayjob!

[02:06] *** woosley joined
[02:09] *** adu joined
[02:27] *** hoverboard joined
[02:27] *** atroxaper joined
[02:29] *** Bryanstein joined
[02:31] *** cooper left
[02:32] *** xragnar_ joined
[02:32] *** xragnar is now known as Guest50762

[02:32] *** Guest50762 left
[02:32] *** xragnar_ is now known as xragnar

[02:39] *** rurban joined
[02:42] *** cooper joined
[02:42] *** cooper left
[02:42] *** cooper joined
[02:44] *** cognominal left
[02:44] *** hlin_ joined
[02:44] *** rurban left
[02:44] *** rurban joined
[02:56] *** skids left
[03:24] *** atroxaper left
[03:25] *** atroxaper joined
[03:29] *** atroxaper left
[03:31] *** atroxaper joined
[03:35] *** raiph left
[03:43] <raydiak> it loops, I'd assume

[03:43] <raydiak> erm

[03:43] <raydiak> wrong window

[03:44] <raydiak> as long as I'm here, though, are you around, timotimo?

[03:53] *** plobsing joined
[04:13] *** atroxaper left
[04:14] *** atroxaper joined
[04:19] *** atroxaper left
[04:28] *** darutoko joined
[04:30] *** Psyche^_ joined
[04:34] *** Psyche^ left
[04:35] *** kaleem joined
[04:42] *** Bryanstein left
[04:44] *** kivutar joined
[04:51] *** hoverboard left
[04:52] *** kivutar left
[04:57] *** kivutar joined
[05:02] *** raiph joined
[05:03] *** SamuraiJack_ joined
[05:04] *** denis_boyun_ joined
[05:05] <raiph> "you can never (in any programming language other than COBOL) test a fractional number for “exact equality.”" (from http://perlmonks.org/?node_id=1083255)

[05:06] *** kivutar left
[05:07] *** Bryanstein joined
[05:07] *** btyler left
[05:07] <raydiak> does COBOL have Rat too?

[05:08] * moritz replies

[05:11] *** eiro left
[05:12] *** atroxaper joined
[05:13] *** eiro joined
[05:15] *** Bryanstein left
[05:15] *** BenGoldberg left
[05:17] *** kaare_ joined
[05:19] *** kivutar joined
[05:19] *** rurban left
[05:23] *** SamuraiJack_ left
[05:24] *** Bryanstein joined
[05:38] *** Bryanstein left
[05:42] <raiph> moritz++ # PM post

[05:42] <raiph> (contains fun spello "actual fractual")

[05:43] <raydiak> that was my favorite part :)

[05:43] *** atroxaper left
[05:44] *** atroxaper joined
[05:44] <moritz> it tells something about your writing if people's favorite parts are your typos :-)

[05:45] *** Bryanstein joined
[05:45] <raydiak> hah

[05:47] <raiph> My predictions for sundialsvc4. He will respond. He will A) speak against P6, B) speak against speaking about P6, C) note connection between P6 and COBOL, D) say overflow caveat proves it's useless, E) use italic, bold AND underline. Wonder if I can score 5 out of 5? :)

[05:48] *** atroxaper left
[05:49] <moritz> raiph: it's *not* too /hard/ to make accurate predictions about sundialsvc4 :-)

[05:50] <moritz> raiph: I predict that if he answers, he'll have some totally unrelated paragraph, for example about project management, or the value of accuracy in programming, or something like this

[05:50] *** rurban joined
[05:50] *** atroxaper joined
[05:53] <raiph> moritz: :)

[05:54] *** hoverboard joined
[05:54] *** rurban left
[05:55] *** xinming_ left
[05:56] *** xinming_ joined
[05:57] *** denis_boyun_ left
[06:02] *** xinming__ joined
[06:06] *** xinming_ left
[06:12] *** Bryanstein left
[06:16] *** Bryanstein joined
[06:16] *** kivutar left
[06:21] <avuserow> m: "abc".encode("utf16").bytes # bytes seems to be a bit of a misnomer here?

[06:21] <camelia> rakudo-moar 631f02: ( no output )

[06:21] <avuserow> m: say "abc".encode("utf16").bytes # bytes seems to be a bit of a misnomer here?

[06:21] <camelia> rakudo-moar 631f02: OUTPUT«3␤»

[06:22] <avuserow> I guess I need to continue investigating Bufs and stuff another day...

[06:25] <vendethiel> raiph: it's "too agressive" without the {}. see TimToady's comment

[06:25] <moritz> avuserow: yes, .elems would be the better name, IMHO

[06:26] <avuserow> .elems is also defined

[06:26] <raiph> vendethiel: gotchya and agree

[06:29] *** grep0r left
[06:30] *** grep0r joined
[06:41] *** kaleem left
[06:43] *** salv0 left
[06:43] *** rindolf joined
[06:43] *** kaleem joined
[06:45] *** [Sno] joined
[06:48] *** kivutar joined
[06:48] <raiph> I've golf'd a problem I have with the rakudo debugger.

[06:48] <raiph> I'd appreciate confirmation from someone else.

[06:48] <raiph> Load a three line file:

[06:48] <raiph> {1

[06:48] <raiph> then a completely blank line, no spaces

[06:48] <raiph> }

[06:52] *** zakharyas joined
[06:53] *** rurban joined
[06:57] *** rurban left
[07:04] *** [particle] left
[07:16] *** Ven joined
[07:16] *** logie_ left
[07:16] *** atroxaper left
[07:17] *** atroxaper joined
[07:18] *** Bryanstein left
[07:18] *** salv0 joined
[07:21] *** Bryanstein joined
[07:22] *** atroxaper left
[07:22] *** Bryanstein left
[07:27] *** adu left
[07:36] *** atroxaper joined
[07:36] *** hummeleB1 joined
[07:37] *** atroxaper left
[07:38] *** atroxaper joined
[07:40] *** atroxape_ joined
[07:42] <moritz> slightly off topic, but can anybody recommend a good book on software architecture?

[07:42] *** atroxaper left
[07:44] *** atroxape_ left
[07:44] *** atroxaper joined
[07:53] *** hoverboard left
[07:56] *** atroxaper left
[07:57] *** atroxaper joined
[07:58] *** atroxape_ joined
[07:58] *** atroxaper left
[08:00] *** Bryanstein joined
[08:00] *** gaussblurinc_ joined
[08:01] *** gaussblurinc_ left
[08:04] *** arturo_ joined
[08:06] *** arturo_ left
[08:07] *** [particle] joined
[08:08] *** hlin_ left
[08:27] *** FROGGS_ left
[08:32] *** spider-mario joined
[08:37] *** bjz left
[08:38] *** raiph left
[08:42] *** kivutar left
[08:49] *** dmol joined
[08:51] *** atroxape_ left
[08:52] *** atroxaper joined
[08:53] *** atroxaper left
[08:53] *** atroxaper joined
[08:54] *** rurban joined
[08:54] *** FROGGS joined
[08:59] *** rurban left
[08:59] *** fhelmberger joined
[09:03] *** sqirrel joined
[09:04] *** haroldwu left
[09:04] *** haroldwu joined
[09:09] *** SamuraiJack_ joined
[09:25] *** atroxaper left
[09:27] *** atroxaper joined
[09:28] *** gaussblurinc1 joined
[09:29] <gaussblurinc1> hi! how to parse nested parenthesis with grammar? I thought about '(' ~ ')' <expression>, but it seems not work :(

[09:30] <jnthn> gaussblurinc1: something like that should work...

[09:31] <arnsholt> That bit looks correct. Perhaps you could put a full example in a nopaste?

[09:32] <gaussblurinc1> arnsholt: yes, I want to parse expression like this: - ( 100 - 5 ) + 4 * ( 10 / 7 )

[09:32] <arnsholt> Right. Then it looks like the problem is with your expression rule

[09:33] <FROGGS> '(' <expression> ')'   is sometimes better

[09:33] <gaussblurinc1> FROGGS: what is the difference between them?

[09:34] <FROGGS> gaussblurinc1: what I pasted is slightly smarter about finding the stopper

[09:35] <gaussblurinc1> FROGGS: in formal definition: '(' ~ ')' <expression> will find latest ')' (bigger) sequence that match?

[09:36] <yakudza> hello ppl. Cam I compile perl6 application into native code ? 

[09:36] <yakudza> so I dont need to install any VM on client side

[09:37] <yakudza> ?

[09:37] <gaussblurinc1> yakudza: addition to your question: how fast this code could be?

[09:40] <FROGGS> m: say "(foo)" ~~ / '(' .+ ')' /

[09:40] <camelia> rakudo-moar 631f02: OUTPUT«｢(foo)｣␤␤»

[09:40] <FROGGS> m: say "(foo)" ~~ / '(' ~ ')' .+ /

[09:40] <camelia> rakudo-moar 631f02: OUTPUT«Unable to parse expression in ; couldn't find final ')' ␤  in any FAILGOAL at gen/moar/stage2/QRegex.nqp:1146␤  in method ACCEPTS at src/gen/m-CORE.setting:13029␤  in block  at /tmp/dwUwu_fucr:1␤␤»

[09:40] <FROGGS> gaussblurinc1: see, the .+ eats the ')' and then the goal fails

[09:41] <gaussblurinc1> m: say "foo" ~~ / '('.+?')' /

[09:41] <camelia> rakudo-moar 631f02: OUTPUT«Nil␤»

[09:44] <gaussblurinc1> FROGGS: strange. I try to write a grammar for parsing numeric expression with +-/* signs like this: expression := <expression> [+-*/] <expression> | '('<expression>')' |<number>

[09:44] *** kaare_ left
[09:45] <FROGGS> in your snippet before the last you forgot the parens

[09:50] <gaussblurinc1> FROGGS: hm, yes. I want to parse in final expression like this: ((DEV) ? (10 / 3) : (5.f)). But for now I want to learn how to parse simple numeric expressions with signs and parens

[09:52] <FROGGS> gaussblurinc1: you can look at JSON::Tiny about how to parse numbers, strings, and so on

[09:52] *** atroxaper left
[09:53] *** atroxaper joined
[09:53] <gaussblurinc1> FROGGS: this is what I do now :) but strings and numbers not a problem cause they are simple. problem is parens and nesting :(

[09:53] <FROGGS> I cannot really help right now because I am in a conference :/

[09:54] <gaussblurinc1> oh, sorry. maybe later you can help me. interesting/boring conference?

[09:57] *** atroxaper left
[09:58] *** kaare_ joined
[10:00] <jnthn> yakudza: No, and even if we do provide some AOT support there'll still be a hefty runtime service needed. Essentially, you'd just be bundling the VM in.

[10:00] <jnthn> You gotta put the GC and numerous other bits of runtime support somewhere.

[10:01] <FROGGS> m: my token expr { '(' ~ ')' <expr=&expr> || <[\d\-\+\s\/]>+ || <expr=&expr> <[\d\-\+\s\/]>+ <expr=&expr> }; say '(2 / 3) + 1' ~~ /<expr>/

[10:01] <camelia> rakudo-moar 631f02: OUTPUT«｢(2 / 3)｣␤ expr => ｢(2 / 3)｣␤  expr => ｢2 / 3｣␤␤»

[10:01] <FROGGS> :/

[10:01] <FROGGS> gaussblurinc1: interface testing with a customer (webservices)

[10:02] <FROGGS> so, kinda fun, kinda not :o)

[10:06] *** a3gis joined
[10:06] *** cognominal joined
[10:07] *** anaeem1 joined
[10:10] <Woodi> hallo everyone :)

[10:12] *** salv0 left
[10:19] <sergot> hi Woodi o/

[10:25] *** sqirrel left
[10:26] *** salv0 joined
[10:27] <Woodi>  moritz: you need _books_ :)  "Patterns of Enterprise Application Architecture" by M.Fowler is good "manual". discusions on http://c2.com/ are very good too. but actually every domain have their own patterns/solutions. eg. compilers or dbs. but generally (taken from Christopher Alexander) things are build with centers, cooperative centers

[10:29] <masak> moritz: http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215

[10:29] <Woodi> hi masak !

[10:30] <Woodi> I found Text::CSV and there is grammar there. is it possible to build simpler grammar for parsing data in lines maybe ? I am starting to hate \N...

[10:32] *** denis_boyun_ joined
[10:32] *** pecastro left
[10:39] *** itz_ left
[10:39] *** itz left
[10:39] *** itz joined
[10:46] <moritz> Woodi: I'll look at it, thanks

[10:47] <moritz> masak: I'm looking more for an overview and introduction, not single methodology (which DDD seems to be, to my limited understanding)

[10:51] <dalek> rakudo/nom: e4508d9 | jnthn++ | src/core/Supply (2 files):

[10:51] <dalek> rakudo/nom: Implement start method on supplies.

[10:51] <dalek> rakudo/nom: 

[10:51] <dalek> rakudo/nom: Takes a closure and, for each supplied value, schedules the closure to

[10:51] <dalek> rakudo/nom: run on another thread. It then more's a Supply (resulting in us having

[10:51] <dalek> rakudo/nom: a supply of supplies) that will either have a single value more'd and

[10:51] <dalek> rakudo/nom: then be done if the async work completes successfully, or quit if the

[10:51] <dalek> rakudo/nom: work fails. Useful for kicking off work on the thread pool if you do

[10:51] <dalek> rakudo/nom: not want to block up the thread pushing values at you (maybe 'cus you

[10:51] <dalek> rakudo/nom: are reacting to UI events, but have some long-running work to kick

[10:51] <dalek> rakudo/nom: off).

[10:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e4508d9908

[10:52] *** itz_ joined
[10:54] <FROGGS> jnthn: do you an opinion about https://gist.github.com/FROGGS/a78ff92ec5e7ce2f8fda ?

[10:55] <FROGGS> I mean, it is pretty straight forward, resolves an inconsistency and does no harm

[10:56] *** rurban joined
[11:00] <jnthn> FROGGS: Really needs TimToady++ to make a call on it, since it's a lang design issue.

[11:00] *** rurban left
[11:00] <FROGGS> k

[11:01] <tadzik> oh, it's nice, like _ in Go

[11:02] <FROGGS> before you had to use $ in declarations with assignment and * in assignments only

[11:02] <FROGGS> m: my ($, $, $x) = (1, 2, 3); say $x; (*, *, $x) = 4, 5, 6; say $x

[11:02] <camelia> rakudo-moar 631f02: OUTPUT«3␤6␤»

[11:20] *** kurahaupo joined
[11:24] *** prevost joined
[11:30] <dalek> rakudo/nom: 64f1110 | jnthn++ | src/core/Supply (2 files):

[11:30] <dalek> rakudo/nom: Implement unchanged on supplies.

[11:30] <dalek> rakudo/nom: 

[11:30] <dalek> rakudo/nom: Waits for the value to have been stable for a certain amount of time

[11:30] <dalek> rakudo/nom: before passing it along. If it changes within that time, then the

[11:31] <dalek> rakudo/nom: timer is reset. Useful for any situation where you want the data to

[11:31] <dalek> rakudo/nom: stabalize before doing further work.

[11:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/64f1110a80

[11:31] <jnthn> That was a fun one to write. :)

[11:32] <FROGGS> O.o

[11:32] <FROGGS> that is called debouncing in electronics me thinks

[11:33] *** Alula_ left
[11:34] * moritz imagines a jnthn++ bouncing up and down, and a huge, soft cushion debouncing him

[11:34] *** Alula_ joined
[11:34] *** atroxaper joined
[11:34] <FROGGS> *g*

[11:35] <FROGGS> and who is the one with the soft cushion? ingy?

[11:35] * FROGGS is afraid of that situation now

[11:35] <moritz> sometimes pmichaud, somtimes TimToady :-)

[11:35] <FROGGS> ohh, that it is alright :o)

[11:37] *** kaleem left
[11:42] <dalek> rakudo/nom: 8983aa3 | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm:

[11:42] <dalek> rakudo/nom: Fix a problem with timed schedules and loads

[11:42] <dalek> rakudo/nom: 

[11:42] <dalek> rakudo/nom: We need to look at what .loads is actually supposed to do.

[11:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8983aa3d7e

[11:43] <dalek> roast: 3a83c5f | (Elizabeth Mattijsen)++ | S17-concurrency/scheduler.t:

[11:43] <dalek> roast: Fudge .loads related tests for now

[11:43] <dalek> roast: review: https://github.com/perl6/roast/commit/3a83c5f5e7

[11:45] *** anaeem1 left
[11:46] *** anaeem1_ joined
[11:48] *** apejens joined
[11:52] <Woodi> is it possible to use Supplies to pass data betwin processess ? API is nice, maybe could be reused ?

[11:55] <timotimo> jnthn: do we already know how to fix multiple threads using literal regexes, like m//?

[11:56] <jnthn> timotimo: Got a snippet that shows the problem?

[11:56] *** gaussblurinc1 left
[11:57] <jnthn> oh wait, this was shown earlier...

[11:57] <jnthn> I suspect that we need to declare new $/ and $! somewhere though.

[11:57] <timotimo> may be, aye

[11:57] <timotimo> they are currently declared in the setting

[11:57] <timotimo> mouq wanted to declare his own, but got a mysterious error about no error handler being installed to report a warning

[11:58] <jnthn> oh, *that* one I know

[11:58] <jnthn> Warnings on threads are fatal at the moment.

[11:58] <timotimo> that seems like an easy-ish thing to fix?

[11:58] <jnthn> kinda

[11:58] <timotimo> (for you) :P

[11:58] <jnthn> Well, first I had to think about *where* to fix it

[11:58] <jnthn> I realized it wants to be fixed in class Thread

[11:58] <jnthn> And then the thread pool gets it for free

[11:59] *** atroxaper left
[12:00] *** atroxaper joined
[12:00] *** a3gis left
[12:01] *** a3gis joined
[12:03] <lizmat> masak: jnthn just pointed out to me that List.squish/uniq have "as" as a named parameter, rather than "by" (like e.g. min, just a few lines down in the spec)

[12:03] <lizmat> masak: jnthn thinks it would be more consistent if List.uniq/squish would also use "by" rather than "as"

[12:04] <lizmat> It seems that you specced that last August: was that just reinforcing the then implementation?

[12:04] *** atroxaper left
[12:05] *** a3gis left
[12:06] *** atroxaper joined
[12:06] <retupmoca> how does one use UDP sockets in perl6?

[12:07] * lizmat is thinking of deprecating ":as" in favour of :by

[12:07] <moritz> might not be implemented yet

[12:07] <lizmat> thoughts anyone?

[12:07] <retupmoca> (or better yet, is there a module that uses them that I can use as an example?)

[12:08] <lizmat> one doesn't do UDP sockets in rakudo yet, as nobody implemented them yet

[12:08] * jnthn only did TCP ones for Moar.

[12:08] <timotimo> jnthn: should i also attempt to handle unbox_[ins] by looking at the boxing slot and trying to discover the actual value?

[12:09] <moritz> you could try to open a UDP socket, but it'd fail silently... :-)

[12:09] <retupmoca> alright. If I feel adventurous, I might look at it (but probably not soon)

[12:09] <jnthn> Um...well, if it's unobxing a wval then yeah, we can just take the value as is.

[12:09] <jnthn> And turn it into a const_i64

[12:10] <timotimo> and if it's a known value

[12:10] <timotimo> right?

[12:11] <timotimo> well, "if it's a wval" just means it'll end up with the known value flag when we reach the unbox operation

[12:12] <timotimo> actually, here's an idea for a maybe helpful tool: we could dump all the facts and then collect things like "the op foo_bar had a known_type in its nth slot x times"

[12:13] <yakudza> jnthn, just because of not compiling to bytecode perl6 loose many use cases. So bundling the VM in is also variant if after that it will start to work by double clicking on executable 

[12:14] <timotimo> yakudza: froggs is working on exactly that :)

[12:14] <yakudza> coool 

[12:17] *** xenoterracide_ joined
[12:20] <jnthn> yakudza: I didn't say it couldn't compile to bytecode. I said there's not a Perl 6 -> native code compiler in the "what a C compiler does" sense. 

[12:20] <timotimo> aye. those are very different things

[12:20] <jnthn> timotimo: Yeah, wval is just typical example of "known object value".

[12:21] <dalek> rakudo/nom: 61af179 | jnthn++ | src/core/Supply (2 files):

[12:21] <dalek> rakudo/nom: Implement migrate on supplies.

[12:21] <dalek> rakudo/nom: 

[12:21] <dalek> rakudo/nom: Works on a supply of supplies. Taps the first one that arrives, and

[12:21] <dalek> rakudo/nom: passes on its values. When another one arrives, closes the tap on the

[12:21] <dalek> rakudo/nom: first and starts passing on values from the second, and so forth. Very

[12:21] <dalek> rakudo/nom: useful for preventing race conditions when you have supplies that

[12:21] <dalek> rakudo/nom: represent the latest work needed, and want to ignore previous work

[12:21] <dalek> rakudo/nom: set in motion (e.g. auto-search text box that does some work to make

[12:21] <dalek> rakudo/nom: suggestions).

[12:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/61af179811

[12:21] <timotimo> oooooh

[12:21] <timotimo> all those combinators

[12:22] <timotimo> that's going to be an interesting talk ):

[12:22] <timotimo> :)

[12:22] <jnthn> hah, you figured it's CDD :P

[12:22] <timotimo> oh, what about things like islist, ishash, isint, isnum, isstr?

[12:23] *** rindolf left
[12:23] <timotimo> should i try to spesh those?

[12:24] *** kbaker joined
[12:24] <jnthn> yeah, I think so

[12:25] <jnthn> Time to go cycling &

[12:25] <jnthn> oh, ENOTYET

[12:26] <tadzik> this would be EEKTOOWET in Poland now :P

[12:28] <jnthn> oh, it's sunny here :)

[12:31] *** a3gis joined
[12:33] *** a3gis_ joined
[12:36] *** a3gis left
[12:38] *** a3gis_ left
[12:39] *** bjz joined
[12:43] *** a3gis joined
[12:50] *** rindolf joined
[12:52] <timotimo> hm. i don't get debug output from the isstr/isnum/isint/islist/ishash optimization throughout the whole build process of nqp and rakudo

[12:52] <timotimo> that's not a good sign

[12:53] <FROGGS> :/

[12:55] *** salv0 left
[12:57] *** rurban joined
[12:58] <timotimo> huh.

[12:58] <timotimo> it bails out because it thinks the value is not compile-time-known

[12:58] <timotimo> but it really should

[13:00] <timotimo> ah, it's because it gets decont'd before the is* op is called on it

[13:00] <timotimo> and we lose the known type annotation

[13:01] <timotimo> jnthn: can the decont optimization do something special if the cont'd value is known?

[13:01] *** rurban left
[13:02] <dalek> rakudo/nom: 48937da | (Elizabeth Mattijsen)++ | src/core/Supply (2 files):

[13:02] <dalek> rakudo/nom: Implement Supply.uniq(:expires) for throttling

[13:02] <dalek> rakudo/nom: 

[13:02] <dalek> rakudo/nom: Only for the non :with case so far

[13:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/48937daa66

[13:02] <timotimo> alternatively, perhaps it makes sense to remember the "original" register for decont operations so that would still be accessible?

[13:03] <timotimo> haha, for a moment i thought "wtf is !===&]==="

[13:03] <timotimo> er

[13:03] <timotimo> "wtf is !===&[==="

[13:04] <tadzik> I stil l don't know wtf it is :D

[13:04] <jnthn> timotimo: We never know a cont'd *value*, but if we know it's not cont'd and we eliminate the decont, then yeah, the value is clearly what it was.

[13:04] <timotimo> well, it really is !=== &[===]

[13:04] <timotimo> jnthn: in this case, the decont doesn't get eliminated

[13:04] <timotimo> (not ever, apparently)

[13:04] <timotimo> should i just drop the opt in a branch to perhaps be recovered later?

[13:05] <jnthn> timotimo: yeah...but is the data wval?

[13:05] <jnthn> 'cus then it should know enough to eliminate it...

[13:05] *** xenoterracide_ left
[13:06] <timotimo> oh

[13:06] <timotimo> actually

[13:07] <timotimo> https://gist.github.com/timo/c46c135b040398c32dfa - look at this :D

[13:07] <timotimo> const_s, hllboxtype, box_s, decont, isstr

[13:08] *** anaeem1_ left
[13:09] <timotimo> actually, islist is checking for known value, but should be checking for known type

[13:09] *** anaeem1_ joined
[13:10] <timotimo> which will make this thing work as soon as i put in the known type inference for box_[ins] instructions

[13:11] *** salv0 joined
[13:15] *** anaeem1 joined
[13:15] *** anaeem1_ left
[13:16] <timotimo> jnthn: i also have to make sure i return 0 for objects that are 0; do i have to check for an extra flag in order to do that?

[13:17] *** xenoterracide_ joined
[13:17] <timotimo> or does KNOWN_TYPE imply "not null"?

[13:23] <jnthn> Doesn't imply anything about nullness

[13:24] <timotimo> that means at best i can replace the islist/... ops with an isnotnull

[13:24] <timotimo> (which does not exist)

[13:27] <jnthn> cycling &

[13:27] *** xenoterracide_ left
[13:29] *** pecastro joined
[13:32] *** kaare_ left
[13:39] *** bluescreen10 joined
[13:44] *** btyler joined
[13:48] *** bluescreen100 joined
[13:49] *** salv0 left
[13:50] *** guru joined
[13:50] *** guru is now known as ajr_

[13:52] *** bluescreen10 left
[14:04] *** thou joined
[14:06] *** logie joined
[14:08] *** [Sno] left
[14:10] *** rindolf left
[14:12] *** rindolf joined
[14:15] *** rurban joined
[14:19] *** [particle] left
[14:24] *** [particle] joined
[14:25] *** dwarring left
[14:25] *** a3gis left
[14:27] <masak> today's autopun (from my fortune file): "You're a very redundant person, that's what kind of person you are."

[14:27] *** salv0 joined
[14:29] <tadzik> :D

[14:30] <FROGGS> *g*

[14:31] *** salv0 left
[14:31] *** kaare_ joined
[14:38] *** atroxaper left
[14:38] <dalek> Heuristic branch merge: pushed 240 commits to nqp/loop_labels by FROGGS

[14:39] *** atroxaper joined
[14:40] <timotimo> oooh, you're touching that again :3

[14:40] <FROGGS> yes, so you can haz labels in nqp-p :P

[14:41] <timotimo> only so that you can make me want to have labels in nqp-m :|

[14:41] <PerlJam> what timotimo said

[14:41] <FROGGS> that might even be easier to do than for the jvm

[14:41] <timotimo> sadly, we will only really be able to use it once it's on all three back ends :|

[14:42] <FROGGS> I mean, it is not that much: https://github.com/perl6/nqp/compare/loop_labels

[14:42] <FROGGS> timotimo: and once it left the protective shell of nqp's own grammar

[14:43] *** atroxaper left
[14:44] *** salv0 joined
[14:48] *** treehug88 joined
[14:52] *** atroxaper joined
[15:01] *** SamuraiJack_ left
[15:09] *** denis_boyun_ left
[15:19] *** atroxaper left
[15:20] *** atroxaper joined
[15:22] *** kurahaupo left
[15:23] *** FROGGS left
[15:23] *** raiph joined
[15:24] *** atroxaper left
[15:27] *** FROGGS[mobile] joined
[15:27] *** cooper left
[15:30] *** bluescreen100 left
[15:31] *** bluescreen10 joined
[15:32] *** kaare_ left
[15:37] <japhb> Anyone have a favorite type graph from doc.perl6.org?  I need one as an example for a Perl 6 lightning talk I'm writing, and I want an illustration of how the types are laid out.  Not super wide or tall is better.  My current best is http://doc.perl6.org/images/type-graph-Numeric.svg .  Any other nominations?

[15:40] <japhb> Also, who controls the DNS for perl6.org?  A CNAME from docs.perl6.org to doc.perl6.org would be nice (right now if you type the first one, you get sent to perl6.org, the main web site, but that seems Not Quite Awesome).

[15:46] <raiph> yarr++ (yet another rindolf redux): non XS 5.16 perl targeting Javascript via Emscripten: http://www.shlomifish.org/microperl-web-repl-v1/repl.html

[15:46] <rindolf> raiph: hi.

[15:47] <rindolf> raiph: yes, you can now use some built-in modules there.

[15:47] <rindolf> But if there's an error, it doesn't get displayed.

[15:47] <raiph> hi rindolf. it's great to see someone do that, especially you.

[15:48] <arnsholt> japhb: Numeric is probably a good choice since it's a well known domain as well

[15:49] *** zakharyas left
[15:51] *** arturo_ joined
[15:53] <raiph> rindolf++ # I'll be adding some questions to http://www.reddit.com/r/perl/comments/23qy56/perl_5_for_javascript/ over the next few days. is that the best place to discuss it?

[15:54] *** molaf joined
[16:05] <Ven> FROGGS: can't you avoid duplication like that ?

[16:05] <yoleaux> 00:13Z <Mouq> Ven: FWIW, here is what I put together the last time I was creating html from perl6 code: https://github.com/Mouq/perl6-feast/blob/master/bin/feast.pl

[16:05] *** kst joined
[16:06] <Ven> Ah, I should speak here more often .

[16:06] *** FROGGS joined
[16:07] <Ven> yeah it's basically working the same as mine, except I went one step further to avoid that extra space when there's no attributes :p

[16:07] <Ven> oh actually, that doesn't happen

[16:08] *** kaleem joined
[16:08] <Ven> `<div>.xml` hehe

[16:09] * Ven is not going to use indent stuff because it fails inside textarea, and is more bytes overall

[16:12] <FROGGS> Ven: what should I avoid? I don't know what you are talking about :o)

[16:12] *** arturo_ left
[16:12] *** FROGGS[mobile] left
[16:13] <Ven> FROGGS: I mean, in the loop branches

[16:13] <Ven> for Actions.nqp. but it's pretty minor anyway

[16:13] <FROGGS> ahh, that one

[16:14] <FROGGS> there might be a cleanup possible, but I wanted to make it work first

[16:14] <FROGGS> and when there is a cleanup, it should make the code more readable, not only short

[16:16] *** hoverboard joined
[16:17] <rindolf> raiph: thanks. :-)

[16:18] <Ven> FROGGS: :)

[16:20] *** molaf left
[16:25] <rindolf> raiph: the effort was started by https://github.com/themucker (I added a link to his GitHub page to the credits now).

[16:28] *** [Sno] joined
[16:30] *** [Sno] left
[16:36] *** pecastro left
[16:36] *** arturo_ joined
[16:39] <raydiak> morning #perl6

[16:41] *** kaleem left
[16:42] *** anaeem1 left
[16:42] *** fhelmberger left
[16:42] *** bluescreen10 left
[16:51] *** [Sno] joined
[16:54] *** bluescreen10 joined
[16:55] *** eternaleye left
[16:57] *** Rotwang joined
[16:58] *** vaskozl joined
[16:58] <vaskozl> Hello!

[16:59] <vaskozl> Aheem,.. Hello?

[17:00] <timotimo> hi

[17:00] <vaskozl> timotimo: yo

[17:00] <vaskozl> I'm a perl newbie.

[17:00] <vaskozl> Just over a month or so of learning perl5.

[17:01] <vaskozl> Should I go ahead and install a perl6 interpreter and have a go with writing my scripts with it?

[17:01] <masak> vaskozl: sure, why not?

[17:01] <vaskozl> or should I stick to perl5 and wait till I'm more experienced 

[17:01] <masak> vaskozl: if nothing else, Perl 6 is refreshingly free of some of the long-lasting problems of Perl 5.

[17:02] <masak> vaskozl: I think there are only good things that can come out of knowing a little bit of both.

[17:02] <masak> vaskozl: would you like a tour? :)

[17:02] <vaskozl> masak: so should I expect the same kinda thing I can do with perl every day?

[17:02] <masak> vaskozl: yes, you should expect that and more! :)

[17:02] <vaskozl> writing logic, managing text and piping around with it?

[17:02] <masak> oh yes.

[17:02] <vaskozl> ok thx for all the positive feedback

[17:02] <timotimo> those parts are vastly nicer to write

[17:02] <timotimo> though usually run a bit slower

[17:02] <masak> vaskozl: stick around.

[17:03] <vaskozl> yay thank you!

[17:03] <masak> vaskozl: here, have a look.

[17:03] <masak> m: say 1 / 3

[17:03] <camelia> rakudo-moar 48937d: OUTPUT«0.333333␤»

[17:03] <masak> vaskozl: you know how you do that on a calculator, and then multiply by 3 again, and the answer is 0.999999 ?

[17:03] <vaskozl> and I heard there was an interactive shell as well?

[17:04] <masak> vaskozl: good news: that never happens in Perl 6.

[17:04] <vaskozl> masak: wohoo

[17:04] <masak> m: say (1 / 3) * 3

[17:04] <camelia> rakudo-moar 48937d: OUTPUT«1␤»

[17:04] <raiph> vaskozl: is this for fun or for work? how patient are you? what are your expectations?

[17:04] <masak> why? here's why:

[17:04] <masak> m: say (1 / 3).WHAT

[17:04] <camelia> rakudo-moar 48937d: OUTPUT«(Rat)␤»

[17:04] <masak> behold, our Rats! :P

[17:04] <vaskozl> I also liked the prompt 'Type text witohut needing chomp and <STDIN>!';

[17:04] <masak> vaskozl: oh, oh, and look at this:

[17:04] <vaskozl> and ofcourse say from v10

[17:05] <vaskozl> masak: I'm looking

[17:05] <masak> m: class Dog { method bark { say "woof" } }; Dog.new.bark

[17:05] <camelia> rakudo-moar 48937d: OUTPUT«woof␤»

[17:05] <masak> \o/

[17:05] <timotimo> vaskozl: it can be hard learning perl 5 regexes and perl 6 regexes at the same time; especially since you're going to miss the ease and clarity of perl 6 regexes :)

[17:05] <vaskozl> that's a bit beydong me for now

[17:05] <masak> oh, ok.

[17:06] <raiph> vaskozl: is your interest in perl about fun or $work?

[17:06] <vaskozl> so I'm getting Rakudo right?

[17:06] <vaskozl> raiph: about home fun

[17:06] <masak> vaskozl: right.

[17:06] *** ajr_ left
[17:06] <vaskozl> just writing cool neet scripts, be it for a WM, volume bar, voice app or irc client

[17:07] *** kaare_ joined
[17:07] <masak> nice!

[17:07] <masak> we're all about writing cool neat scripts here.

[17:08] *** hoverboard left
[17:08] <timotimo> and more (hopefully ;) )

[17:08] <vaskozl> ok I'm compiling Rakudo!!!

[17:08] <timotimo> there's no shame in stopping at the "cool neat script" phase, of course

[17:09] <vaskozl> well in the world of .*nix you can do anything with the help of a shell and a few tools

[17:10] <vaskozl> I hated pythong because I couldn't figure out why `` werent working and why the best solution was to right a dozen pointless words

[17:10] <vaskozl> I love perl for the sugar!

[17:11] <vaskozl> and for some reason I've always understood perl better... no matter what they say

[17:11] <vaskozl> everytime I tried to make a python script my own I would fail, but perl and perl6 more so are self explanatory

[17:12] <vaskozl> *this is all comming from a noob

[17:13] <vaskozl> not to mention larry wall

[17:13] <timotimo> larry wall is self explanatory, too?

[17:14] <vaskozl> he alone is the reason to learn perl :D

[17:14] <vaskozl> The first thing I'll do with perl6 is a 4x4x4 3d tic tac toe game

[17:14] <vaskozl> timotimo: huh?

[17:14] <timotimo> :P

[17:14] *** grondilu joined
[17:15] <timotimo> we don't have very advanced gui toolkit libraries, or opengl bindings

[17:15] <timotimo> so that game would have to be http or console or something like that

[17:15] <vaskozl> timotimo: I mean to play it in the console

[17:15] <timotimo> that'll work very well then.

[17:15] <vaskozl> with --- | ---- | ----

[17:15] <vaskozl> and X and O's

[17:15] <timotimo> i'd recommend looking through the unicode characters for better stuff :P

[17:15] <vaskozl> it's going to be 4 of 4x4 squares

[17:15] <vaskozl> labled one trough four

[17:16] <vaskozl> timotimo: yeah I'll do that

[17:16] <timotimo> http://rosettacode.org/wiki/Draw_a_cuboid#Perl_6 - something silly like the braille characters used here :P

[17:16] <vaskozl> so each square would go on top of the other

[17:16] <raydiak> I played a board game like this called Score Four, where you dropped wooden beads on a 4x4 grid of pegs tall enough for 4 beads each

[17:17] <vaskozl> yah that's pretty cool

[17:17] <raydiak> (though the beads fall to the bottommost position in gravity)

[17:17] <vaskozl> 4x4x4 means that you can need to align 4 in any straight line

[17:18] <vaskozl> it can be the long diagonals trough the centre

[17:18] <vaskozl> or along the sides

[17:18] <vaskozl> it's loads of fun on paper!

[17:18] <timotimo> quite similar to this game: https://en.wikipedia.org/wiki/Connect_Four

[17:18] <timotimo> but one dimension more

[17:18] <vaskozl> I guess

[17:18] <raydiak> yep

[17:19] <timotimo> https://en.wikipedia.org/wiki/Connect_4x4 - ah, this is probably it

[17:19] <vaskozl> I like how you liked wikipedia instaed of just saying connect 4 :D

[17:19] *** rurban left
[17:20] <timotimo> well, first i put in the german name into the german wikipedia and clicked the "english" link at the side

[17:20] <timotimo> so i had the url ready to go :P

[17:20] <raydiak> http://en.wikipedia.org/wiki/Score_Four - the one I played

[17:20] <timotimo> hmm, i think i've seen this before

[17:20] <vaskozl> raiph: exactly like taht but I wasn't planning on gravity for now

[17:21] <raydiak> nice, that'll be fun

[17:21] <vaskozl> I think of the hanoi towers when I see that... Oh the spent time as a child..

[17:21] <vaskozl> rakudo is supposed to take some time to download right?

[17:22] <vaskozl> * clone from git that is

[17:23] <raiph> vaskozl: (you meant raydiak) P6 is immature. tech and doc. P6 isn't remotely like P5 from that perspective. if you focus on the Ofun.pm (http://perl6.org/fun/) aspect and treat #perl6 as a home you'll be, er, right at home. :)

[17:24] <timotimo> vaskozl: the biggest part of a rakudo clone is NQP, which has had binary files that have been updated lots of times in the past

[17:24] <vaskozl> raiph: that's what I'm all about

[17:24] <raiph> vaskozl: then welcome home :)

[17:24] <vaskozl> thank you for the warm welcome

[17:26] <raydiak> timotimo: not sure if you saw my latest perl6-bench PR, but just added to it

[17:27] * grondilu updated https://github.com/jnthn/zavolaj/issues/21 as NativeCall fails to pass tests on my 32bits machine.

[17:28] <grondilu> jnthn: maybe if you need access to a 32bit machine, I can give you a ssh access to my PC.  Let me know if you're interested. 

[17:29] <vaskozl> I'm having some trouble compiling the source, should I just use the debian package instead (there is one right)?

[17:29] <timotimo> raydiak: lovely! :)

[17:30] <timotimo> would you like me to merge it now?

[17:30] <raydiak> timotimo: thanks :) was originally going to ask you about the layout of the test code, it looked ugly, but I used the same solution you provided for the checkboxes and stuffed them in a slide-away div

[17:30] <raydiak> timotimo: yep, that's a good stopping point for now

[17:31] <timotimo> yup

[17:31] <timotimo> i thought the code looked a bit out of place

[17:31] <timotimo> but the pull-down is a nice solution indeed

[17:31] <vaskozl> what part of java do I need for rakudo?

[17:31] <dalek> perl6-bench: bb64173 | raydiak++ | analyze:

[17:31] <dalek> perl6-bench: Add global toggles to charts

[17:31] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/bb64173c2e

[17:31] <dalek> perl6-bench: b93234f | raydiak++ | analyze:

[17:31] <dalek> perl6-bench: Show test code under each graph when available

[17:31] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/b93234f15e

[17:31] <dalek> perl6-bench: 875a3d9 | raydiak++ | analyze:

[17:31] <dalek> perl6-bench: Move test code into a pull-down div

[17:31] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/875a3d917a

[17:31] <dalek> perl6-bench: 23d5bca | timo++ | analyze:

[17:31] <dalek> perl6-bench: Merge pull request #7 from raydiak/master

[17:31] <dalek> perl6-bench: 

[17:31] <vaskozl> I get a javac not found error

[17:31] <vaskozl> raiph: nice!

[17:31] <raydiak> vaskozl: you need a jdk

[17:31] <timotimo> you only need java if you want to build a rakudo-jvm; otherwise parrot or moarvm will be good enough

[17:32] <timotimo> also, the java version of rakudo takes hilariously long to start up, so it's not very useful for one-liners on the console

[17:32] <vaskozl> so when the shell tells me javac is not found?

[17:32] <timotimo> japhb: http://cyberuniverses.com/perl6-bench/ ← these are raydiak++ 's changes so far. i really like them!

[17:32] <vaskozl> I have java -v

[17:33] <timotimo> that's the jre - "java run-time environment"

[17:33] <timotimo> but what you need to compile a rakudo is the jdk - "java development kit"

[17:33] <vaskozl> oh I need the development kit!

[17:33] <vaskozl> right

[17:33] <masak> vaskozl: I once wrote a Connect-4 in Perl 6. you can have a look if you want: http://strangelyconsistent.org/blog/june-25-2011-connect-4

[17:33] <vaskozl> masak: thx I'll have a look

[17:35] <raydiak> reminds me, in one random ray-tracing benchmark yesterday, moar matched/barely edged out jvm for the first time

[17:36] <masak> raydiak: nice!

[17:36] <timotimo> glad to hear it

[17:37] <timotimo> just wait for jnthn to port the improvements moar has recently seen to jvm and it will be back on top, perhaps dramatically so

[17:38] <raydiak> I should try it on the concurrency branch soon, since moar does that too now

[17:38] <raydiak> does we have mutable Bufs yet?

[17:39] <masak> I thought Bufs were mutable.

[17:39] <raydiak> last I checked (a couple months ago), not yet

[17:39] <vaskozl> So could someone explain to me the different backend businsess/

[17:40] <masak> vaskozl: sure. Rakudo runs on Parrot, the JVM, and MoarVM.

[17:40] <vaskozl> so I should use parrot right?

[17:41] <masak> up to you.

[17:41] <FROGGS> vaskozl: depends

[17:41] <vaskozl> are there any advantages or disadvantages to each?

[17:41] <masak> yes.

[17:41] <moritz> MoarVM has the lightest memory footprint

[17:41] <moritz> and is generally faster than parrot

[17:41] <masak> JVM is the fastest once it gets going.

[17:42] <moritz> the JVM is usually faster for longer-running processes, but uses more memory than the others

[17:42] <moritz> and the startup time is horrible

[17:42] <masak> but there seem to be some known NullPointerExceptions in Java.

[17:42] <FROGGS> jvm backend takes about 5s to start up

[17:42] <FROGGS> also, see http://perl6.org/compilers/features

[17:42] <masak> s/Java/JVM/

[17:42] <vaskozl> so why should one use parrot instead of moarvm?

[17:42] <moritz> the parrot backend has been around the longest, so it has the best module support at the moment

[17:42] <FROGGS> there you can see that we've not yet implemented threads on parrot

[17:42] <vaskozl> alright

[17:43] <moritz> we expect the module support to change eventually :-)

[17:43] <vaskozl> well that's fine I'm not looking to do heavy stuff

[17:43] <FROGGS> threads are kinda stable on jvm, but more like experimental on moarvm I think (I am not sure about that though)

[17:43] <vaskozl> as long as it's lightweight

[17:43] <FROGGS> choose MoarVM if you wanna lightweight stuff

[17:43] <moritz> moar is the new hotness, and users love it, so module support will improve soon

[17:43] <raiph> vaskozl: note that a big part of the "fun" of P6 dev is dealing with thousands of things that need to be fixed, even in the most basic doc, and constant change. our release approach and procedures offer a stability path for users but we have to ensure we enable rapid lang/compiler/ecosystem evolution

[17:44] <vaskozl> yah I don't think I'll be able to help much in that regard :D

[17:44] <vaskozl> but hopefully, one day...

[17:46] <vaskozl> ideally what would the backend be?

[17:46] <FROGGS> there are many things to tackle, what I'd love to see is a growing number of module authors and users (so we get more feedback)

[17:47] <vaskozl> why are modules different for parrot and moar?

[17:47] <raiph> vaskozl: I wasn't meaning for you to help but to appropriately set your expectations

[17:47] *** benabik left
[17:47] <FROGGS> vaskozl: modules don't have to be different

[17:47] <moritz> vaskozl: there are a few backend-specific bugs

[17:47] <moritz> vaskozl: but not many; most modules work fine on all backends

[17:48] <FROGGS> vaskozl: but you can use backend specific stuff, like PIR code

[17:48] <vaskozl> god these take forever to compile..

[17:48] <vaskozl> I should've probably just inalled one backend to begin with

[17:48] <moritz> try to compile gcc, for comparison :-)

[17:48] <FROGGS> vaskozl: yeah :o)

[17:48] <vaskozl> moritz: how does one compile gcc?

[17:49] <moritz> vaskozl: usually with an older version of gcc, or some other compiler

[17:49] <dalek> rakudo-star-daily: 909ede9 | coke++ | log/ (5 files):

[17:49] <dalek> rakudo-star-daily: today (automated commit)

[17:49] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/909ede96a6

[17:49] <BinGOs> I believe a gcc build is called a tedium

[17:50] <raiph> vaskozl: for most of the last decade parrot was the only backend; for the last year the JVM has been an option; in about a month or two the obvious pick for most folk including newbies will be moarvm

[17:50] <raiph> (and is already probably the right pick)

[17:50] * [Coke] wonders if the java runs have gotten markedly faster.

[17:50] *** rurban joined
[17:51] <raiph> (except for long running programs in which case the JVM will often win)

[17:52] <raiph> (it depends on other stuff too but that's my summary)

[17:53] *** Alula_ left
[17:53] *** Alula_ joined
[17:54] <FROGGS> raiph: that I a good approximation I think

[17:55] * [Coke] was referring to the roast runs, not the ongoing JVM conversation.

[17:55] * [Coke] catches up, for now.

[17:55] *** hummeleB1 left
[17:56] *** rurban left
[17:58] <Ulti> the perl6-bench web results are really nice!

[17:58] *** cognominal left
[17:58] <Ulti> as in the interface, the actual speed improvements are good too ;P

[17:59] *** benabik joined
[18:00] *** anaeem1_ joined
[18:00] <timotimo> oh, moarvm also has a fec asynchronous I/O things that i think are not yet available on jvm

[18:00] *** Sqirrel joined
[18:01] * jnthn back

[18:10] *** denis_boyun joined
[18:11] *** hoverboard joined
[18:12] <vaskozl> so if I wanted to make moar default of parrot I would bo to the bin folder and simply mv perl6 perl6-p;mv perl6-m perl6

[18:12] <FROGGS> vaskozl: no

[18:12] <timotimo> those are symlinks usually

[18:12] <timotimo> so try ln -sf perl6-m perl6

[18:12] <FROGGS> do: perl Configure.pl --backends=moar --gen-moar --make-install

[18:13] <timotimo> but putting moar first in the --backends= will have the same effect and a tiny bit more

[18:13] <timotimo> er, what?

[18:13] <timotimo> that --make-install flag is news to me

[18:13] <FROGGS> vaskozl: when you only want to build moar, do it like I pasted

[18:13] <colomon>  --make-install ?

[18:13] <FROGGS> timotimo: see, even you can still learn :o)

[18:13] <FROGGS> yesh

[18:14] <FROGGS> moritz++ # IMO

[18:14] <vaskozl> when I do make install does the installer actually do anything outside the folder?

[18:15] <FROGGS> no

[18:15] <FROGGS> it install to rakudo/install by default

[18:16] <FROGGS> and then you have to put rakudo/install/bin in PATH

[18:16] *** dwarring joined
[18:16] <FROGGS> installs*

[18:16] <vaskozl> ok did that

[18:16] <vaskozl> what about the man pages?

[18:17] <timotimo> actually, there's a program called "rakudobrew" that automates building rakudo, installing panda and switching between the three back-ends

[18:17] <timotimo> we have man pages?

[18:17] <timotimo> >_<

[18:17] * Ulti comes up with a curl one liner for rakudobrew setup

[18:21] <timotimo> i'd like to popularize putting something like | sha1verify asdfasdfasdfasdasfadsadafs | perl into these curl-based one-liners

[18:22] <timotimo> so that if you spread these, you can be sure that your friends who execute what you paste are not being exploited.

[18:23] <raiph> I'd like to try debug an installed module

[18:23] <raiph> it's in install/languages/perl6/site/lib/Debugger/UI/CommandLine.pm

[18:24] <raiph> can i put my own working copy somewhere which overrides that?

[18:24] <raiph> or, rather, what's typical practice for that?

[18:25] <timotimo> "use lib '.'"?

[18:25] <raiph> thx

[18:25] <colomon> are people using rakudobrew?  It bombed miserably for me the first time I tried it (admittedly quite a while ago) and I hadn't tried it again since.

[18:26] <timotimo> well, i keep recommending it and people don't seem to complain too much

[18:27] <masak> vaskozl: re "I don't think I'll be able to help much in that regard" -- you can help more than you think. even asking questions like you are doing helps us a lot to streamline documentation, FAQs, and on-ramps. so keep at it ;)

[18:27] <raiph> colomon: I just setup a dev env for myself on feather. rakudobrew wfm

[18:28] <colomon> it's true I was missing the last three months of patches.  :)

[18:28] <vaskozl> what am I doing wrong: echo "This is cool" | perl6 -pe 's/cool/nice' ?

[18:30] <moritz> vaskozl: first of all you're not closing the substitution

[18:30] <moritz> vaskozl: second, I'm not sure you can cluster those options

[18:30] <moritz> try -p -e instead

[18:30] <moritz> vaskozl: third, it helps to actually produce an error message

[18:30] <vaskozl> yah I was closing it fucked up when retypin

[18:30] * colomon is trying rakudobrew again

[18:31] <retupmoca> on perl6-m:

[18:31] <retupmoca> > echo "This is cool" | perl6 -p -e 's/cool/nice/'

[18:31] <retupmoca> ===SORRY!===

[18:31] <retupmoca> Error while compiling op callstatic: QAST::Var with scope '' NYI

[18:31] <vaskozl> yah

[18:31] <moritz> eeks

[18:31] <raiph> me too

[18:31] <masak> :/

[18:31] <moritz> does it work with -n and a final ; .say  ?

[18:31] <timotimo> seems like people have not been testing -p at all >_<

[18:31] <retupmoca> echo "This is cool" | perl6 -n -e 'say s/cool/nice/'

[18:31] <retupmoca> ^ that works

[18:32] <retupmoca> (so does ';.say')

[18:32] <vaskozl> the first thing I tried :D

[18:32] <vaskozl> ok got it

[18:32] <vaskozl> so use -n 

[18:32] <masak> vaskozl: see? :)

[18:32] <masak> vaskozl: you're helping already!

[18:32] * masak submits rakudobug

[18:33] <dalek> rakudo/nom: ad4b22b | (Elizabeth Mattijsen)++ | src/core/List.pm:

[18:33] <dalek> rakudo/nom: Implement List.(index|rindex)

[18:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ad4b22b227

[18:35] <lizmat> basically: $ perl6 -e 'my @a = <a b c d e f g>; say @a.index("e"); say @a.rindex("f")'

[18:35] <lizmat> 4

[18:35] <lizmat> 5

[18:35] <moritz> lizmat: that looks wrong to me

[18:35] <moritz> lizmat: .index should be a Cool method that coerces to Str

[18:35] <lizmat> what does?  the name?

[18:35] <moritz> lizmat: yes

[18:36] <lizmat> how would you call it then?

[18:36] <lizmat> first_index ?

[18:36] <moritz> lizmat: it violates the "one operation per name" rule

[18:36] <lizmat> well, it feels like the same operation to me, but not on strings

[18:36] *** isBEKaml joined
[18:36] <lizmat> on lists instead

[18:37] <moritz> but that makes it very relevant if something returns a one-element list or a string

[18:37] *** rurban joined
[18:37] <benabik> I find it reasonable as well, although I’m fairly used to the idea that a string is basically a list of chars with extra operations.

[18:37] *** Ven left
[18:37] <masak> I was wondering "where the heck is this spec'd and how did I miss it?"

[18:37] *** treehug8_ joined
[18:38] *** treehug8_ left
[18:38] <lizmat> it's not specced, but I need the functionality for Supply.uniq( :expires)

[18:38] <moritz> maybe first-index, grep-index

[18:38] <lizmat> actiually Supply.uniq( :&with, :expirees)

[18:39] <masak> :expirees ?

[18:39] *** treehug8_ joined
[18:39] <lizmat> :expires

[18:39] * masak heads to the spec

[18:39] <lizmat> not specced yet

[18:39] <lizmat> the idea is that you get a Supply that only returns unique values

[18:39] <masak> :/

[18:40] <lizmat> maybe I should spec first  :-)

[18:40] *** treehug88 left
[18:40] <masak> possibly. anyway, no wonder I felt confused! :P

[18:40] <moritz> first-index, last-index, grep-index ?

[18:40] *** darutoko left
[18:41] <masak> in almost *any* search operation we're sometimes interested in the index.

[18:41] <lizmat> first-rindex instead of last-index, I would think

[18:41] <lizmat> well, yes, there's the idea of just adding a named parameter :index

[18:41] <masak> maybe a named boolean arg instead of a proliferation of new methods?

[18:41] *** isBEKaml left
[18:41] <masak> max-index, min-index...

[18:41] *** denis_boyun___ joined
[18:41] <colomon> +1 to first-index, grep-index

[18:42] <jnthn> Named parameter for differnet return type is odd

[18:42] <jnthn> first-index wfm

[18:42] *** telex left
[18:42] <jnthn> Agree that calling it index breaks the differnet operation = different name thing.

[18:42] <masak> yeah.

[18:42] <timotimo> if we do a named argument, we could also have :10st and friends

[18:42] <colomon> though I can see an argument for returning index => thing, too

[18:42] *** denis_boyun left
[18:42] <moritz> aye, we had quite some trouble with .reverse would be either string or list reversal

[18:43] <nwc10> we could just call everything "smurf" and be done :-)

[18:43] <yoleaux> 22 Apr 2014 23:08Z <lizmat> nwc10: jnthn and I found the problem that caused t/spec/S17-concurrency/promise.t to fail

[18:43] <yoleaux> 22 Apr 2014 23:09Z <lizmat> nwc10: the fix is going to need some thought in ThreadPoolScheduler

[18:43] <moritz> nwc10: smurf-index :-)

[18:43] <lizmat> first-index, first-rindex and grep-index it will be then

[18:44] <moritz> lizmat: which first-rindex over last-index?

[18:44] <timotimo> will grep-index give you all indices of the thing?

[18:44] <lizmat> that would be the plan, yes, as a lazy list

[18:44] <lizmat> well, as lazy as the original list  :-)

[18:44] *** telex joined
[18:44] <moritz> nwc10: incidentally at $work we used to have a dev with nickname 'smurf' who named a database column 'bla'

[18:47] <lizmat> nwc10: actually, that fix is already committed

[18:52] *** prevost left
[18:54] *** atroxaper joined
[18:56] <timotimo> i'll be afk for a bit; if nobody has had a look at it until then, i'll look for a fix for -p

[18:57] <FROGGS> ++timotimo

[18:58] *** zakharyas joined
[18:59] *** atroxaper left
[19:02] *** denis_boyun___ left
[19:03] *** anaeem1_ left
[19:05] *** anaeem1__ joined
[19:10] *** woolfy1 joined
[19:10] *** denis_boyun joined
[19:13] <colomon> hmmm, rakudobrew won't build jvm on linux for me.  

[19:13] <dalek> rakudo/nom: ed692e3 | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[19:13] <dalek> rakudo/nom: Implement grep-index, first-index, first-rindex

[19:13] <dalek> rakudo/nom: 

[19:13] <dalek> rakudo/nom: Names still provisionally awaiting agreement and spec

[19:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ed692e3c96

[19:13] <moritz> $ echo foo | ./perl6-m -p -e 's:g/o/a/'

[19:13] <moritz> faa

[19:13] <colomon> java.lang.OutOfMemoryError: Java heap space

[19:13] <colomon>   in classfile (gen/jvm/stage2/NQPHLL.nqp:92)

[19:14] <thou> colomon: I had that too, and just rebuilt and it worked. :-/

[19:14] <dalek> rakudo/nom: f724dd5 | moritz++ | src/Perl6/Actions.nqp:

[19:14] <dalek> rakudo/nom: unbreak -p on MoarVM; fixes RT #121719

[19:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f724dd5255

[19:14] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121719

[19:14] <colomon> thou: I will try again once parrot has finished building.  :)

[19:16] *** anaeem1__ left
[19:19] <masak> moritz++ # f724dd5

[19:20] <colomon> vaskozl: you found a bug, it was fixed within an hour.  woo-hoo!

[19:22] *** anaeem1_ joined
[19:24] * moritz looks at the Test::Util is_run calls, and wonders who has designed this... "API". Probably himself.

[19:26] <nwc10> moritz: I found that the docs for a certain JavaScript thing made as much sense with s/asynchronous/smurf/

[19:26] <nwc10> but were a lot less stressful to read with that transformation

[19:26] <nwc10> oh, forgot the g

[19:26] <nwc10> and I can't remmeber how it's done in Perl 6

[19:26] <moritz> s:g///

[19:28] *** rindolf left
[19:30] <moritz> man, rakudo-m IO is weird

[19:31] * moritz reproduces with minimal example, and bugrepots

[19:33] <vaskozl> colomon: it got fixed!

[19:33] <vaskozl> awesome

[19:34] <colomon> vaskozl: Admittedly haven't tested it myself, but I trust moritz++

[19:34] <moritz> but, uhm, if you use it with moarvm, use pipes for input, not redirects :/

[19:35] <arnsholt> How settled is S15? (That's the Unicode one, for those won don't remember)

[19:35] <vaskozl> colomon: so I have to reocompile?

[19:35] <moritz> vaskozl: yes, git pull && make install

[19:35] <moritz> (in rakudo; no need to build nqp or moar or parrot)

[19:36] <FROGGS> arnsholt: I at least the stuff about NFG will not settle as long it is NYI (that is at least my opinion)

[19:37] <moritz> submitted as #121720

[19:37] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121720

[19:38] *** guru joined
[19:38] *** guru is now known as ajr_

[19:39] *** anaeem1_ left
[19:41] <vaskozl> moritz: is it supposed to make jar files again?

[19:41] <masak> moritz: fwiw, the symptom is exactly the same as the recently-fixed #121693.

[19:41] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121693

[19:42] <moritz> vaskozl: if you built the JVM backend too, yes

[19:43] <colomon> ooo, hey, just installed ABC on moar!  \o/

[19:43] * colomon hadn't realized that bug had been fixed.  suspects it is a jnthn++

[19:44] <dalek> Perlito: ddcbb9f | (Flavio S. Glock)++ | src5/lib/Perlito5/Grammar/Regex5.pm:

[19:44] <dalek> Perlito: Perlito5 - Perlito5::Grammar::Regex5 character classes

[19:44] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/ddcbb9f946

[19:44] <dalek> roast: 3c5b51b | moritz++ | S19-command-line-options/03-dash-p.t:

[19:44] <dalek> roast: rewrite dash-p.t to use Test::Util

[19:44] <dalek> roast: 

[19:44] <dalek> roast: hangs on MoarVM due to RT #121720

[19:44] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121720

[19:44] <dalek> roast: review: https://github.com/perl6/roast/commit/3c5b51b96f

[19:48] *** bluescreen10 left
[19:48] *** bluescreen10 joined
[19:50] *** woolfy1 left
[19:50] *** woolfy joined
[19:54] <dalek> rakudo/nom: 261f440 | (Elizabeth Mattijsen)++ | src/core/SupplyOperations.pm:

[19:54] <dalek> rakudo/nom: Implement Supply.uniq( :with, :expires)

[19:54] <dalek> rakudo/nom: 

[19:54] <dalek> rakudo/nom: And fix Supply.uniq( :expires ) (without :with)

[19:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/261f440f0c

[19:56] <raiph> jnthn: I'm trying to debug the CommandLine.pm UI front end to the debugger.

[19:57] <raiph> Is it possible to finagle 'bp add' to work on CommandLine.pm?

[19:57] *** cooper joined
[19:57] *** cooper left
[19:57] *** cooper joined
[19:57] <vaskozl> moritz: yay it works now! Thank you for fixing it

[19:57] <jnthn> raiph: As in, use the debugger to debug CommandLine.pm itself? No.

[19:58] <raiph> thx

[19:58] <timotimo> moritz: thanks for fixing it :)

[19:59] <timotimo> ah, seems like the fix was as simple as i'd anticipated

[20:00] <vaskozl> I've always wondered how the command line flags work

[20:00] <vaskozl> why doesn't -pe work?

[20:00] <vaskozl> obviously -p -e works

[20:00] <timotimo> hm, that must be our command line parsing

[20:01] <timotimo> you can probably find it in perl6/nqp inside the src/HLL folder

[20:02] <vaskozl> timotimo: it even has examples!

[20:06] *** woolfy left
[20:06] <masak> vaskozl: I *do* wish -pe worked. but I haven't bothered to figure out how it works, or if it's difficult to implement, so I'm at least a little bit hypocritical/lazy...

[20:07] <vaskozl> I always wondered how programs like tar do it :D

[20:07] <vaskozl> in the perl5 one liners I'd often see -lpe

[20:10] <masak> yeah, it's useful.

[20:10] <raiph> jnthn: while i'm at the debugger prompt, after the debugger has thrown an exception internally (from within CommandLine.pm), can i do an equivalent of `$s` etc. but for variables in CommandLine.pm via some global or some such?

[20:11] <moritz> vaskozl: it's by design; the specs says that only options that don't take arguments can be clustered

[20:11] <raiph> jnthn: I'm working on https://github.com/jnthn/rakudo-debugger/issues/19

[20:11] <moritz> vaskozl: wouldn't be too hard to change

[20:12] *** woolfy joined
[20:12] <vaskozl> by official perl6 design or?

[20:12] <moritz> aye

[20:12] <moritz> S19

[20:12] <japhb> timotimo: Saw your highlight from earlier (though otherwise 4-5 days backlogged in this channel) -- yes, raydiak's improvements are looking good.  There is a somewhat increased tendency for hover text to get "stuck on", especially when it appears below the key of the graph, rather than inside the graph proper.  Otherwise, very nice indeed.  What all has been changed other than test-global maximum comparison, page-global line toggles, and the color scheme?

[20:12] <vaskozl> so it shouldn't work

[20:12] <vaskozl> alright 2 more characters is not much

[20:13] <FROGGS> r: say $*ARGFILES.eof

[20:13] <camelia> rakudo-jvm ad4b22: OUTPUT«(timeout)»

[20:13] <camelia> ..rakudo-moar ad4b22: OUTPUT«No such method 'opened' for invocant of type 'Any'␤  in method eof at src/gen/m-CORE.setting:14354␤  in block  at /tmp/tmpfile:1␤␤»

[20:13] <camelia> ..rakudo-parrot ad4b22: OUTPUT«No such method 'opened' for invocant of type 'Any'␤  in method eof at gen/parrot/CORE.setting:14323␤  in block  at /tmp/tmpfile:1␤␤»

[20:14] <retupmoca> moritz, masak: I have a nqp patch locally to enable -pe 'stuff' - can push it if we do want to enable that syntax

[20:16] <moritz> retupmoca: I'm of two minds

[20:16] * vendethiel built rakudo for a friend and was like masak++ with his "look at all that shiny stuff you can do !"

[20:16] <retupmoca> (note that right now you can do -pes/foo/bar and it works, so it's a little inconsistant now maybe)

[20:17] <timotimo> i'm looking into the commandline option parser

[20:17] <timotimo> it *does* handle grouped values, but apparently it won't eat an argument after the last grouped or something

[20:17] <moritz> retupmoca: that's compatible with perl 5

[20:17] <moritz> $ echo foo| perl -pe1

[20:17] <moritz> foo

[20:18] <retupmoca> $ echo foo| perl -pe 1 # also works though

[20:18] <dalek> rakudo/nom: 5d8225a | (Elizabeth Mattijsen)++ | src/core/SupplyOperations.pm:

[20:18] <dalek> rakudo/nom: Pass on expires properly to Supply.uniq

[20:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5d8225a4f8

[20:18] <timotimo> ah

[20:18] <timotimo> i think i see why it doesn't work yet

[20:19] <timotimo> oh!

[20:19] <timotimo> -pe'say "hi"' does work

[20:19] <moritz> retupmoca: whatever, go for it

[20:20] <dalek> nqp: 8ec9562 | (Andrew Egeler)++ | src/HLL/CommandLine.nqp:

[20:20] <dalek> nqp: Fix perl6 -pe 'stuff'

[20:20] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8ec9562c88

[20:20] <moritz> not the first time that perl 5 folks are confused by it

[20:20] <timotimo> oh!

[20:20] <timotimo> damnit, i won't get to fixing anything today! :D

[20:21] <vaskozl> you guys are super fast

[20:22] <masak> vaskozl: they are eager to impress the new guy :P

[20:23] <masak> ...or gal, what do I know.

[20:23] <vaskozl> I'm just a guy

[20:23] <masak> anyway, retupmoca++

[20:26] <japhb> .oO( I'm just a gigolo and everywhere I go ... )

[20:26] <timotimo> :)

[20:28] <raiph> vaskozl: most of P6 is written in P6, and most of that is reasonably well written, so fixing compiler things is relatively easy and fun in principle -- it isn't like it is with most other langs where the primary compiler is written in another low level lang

[20:30] <raiph> in P6's case there is a lower lang, namely NQP, which is used for some of the compiler, but even that is a relatively high level lang (it's a simple subset of P6 to a first approximation)

[20:30] *** effbiai left
[20:31] <raiph> so one routinely sees someone turn up, note some bug, and then it's fixed that week (or that hour)

[20:31] <vaskozl> raiph: that's quite awesome

[20:32] <masak> that's the goal.

[20:36] *** effbiai joined
[20:36] <raiph> say 42.WHY # Because lizmat++ saw me say "can we please one day have 42.WHY respond with ..." on Easter Sunday http://irclog.perlgeek.de/perl6/2014-04-20#i_8614800

[20:37] *** pippo joined
[20:38] <pippo> m: my @a = 1..10; say @a.rindex("0"); say @a.index(0);

[20:38] <camelia> rakudo-moar 261f44: OUTPUT«19␤19␤»

[20:38] <pippo> ^^ 19?

[20:38] <pippo> m: my @a = 1..10; say @a.index("0"); say @a.index(0);

[20:39] <camelia> rakudo-moar 261f44: OUTPUT«19␤19␤»

[20:39] <timotimo> that's ... not quite right

[20:40] <moritz> why not?

[20:40] <moritz> m: my @a = 1..10; say @a.Str

[20:40] <camelia> rakudo-moar 261f44: OUTPUT«1 2 3 4 5 6 7 8 9 10␤»

[20:40] <moritz> m: my @a = 1..10; say @a.Str.substr(19, 1)

[20:40] <camelia> rakudo-moar 261f44: OUTPUT«0␤»

[20:40] <moritz> looks fine to me.

[20:43] <PerlJam> pippo: what were you expecting?

[20:44] <pippo> my @a = 1..10; say @a.index(3); say @a.Str.substr(4,1)

[20:45] <pippo> m: my @a = 1..10; say @a.index(3); say @a.Str.substr(4,1)

[20:45] <camelia> rakudo-moar 261f44: OUTPUT«4␤3␤»

[20:46] <raiph> pippo: does that now make sense to you?

[20:46] <pippo> mumbling...

[20:46] <masak> .index is a string operation.

[20:48] <pippo> so the returned index is the position of @a.Str?

[20:48] <pippo> so the returned index is the position in @a.Str?

[20:50] <moritz> yes

[20:50] *** zakharyas left
[20:50] <pippo> moritz: seems not.

[20:51] <PerlJam> m: 3.1415926535.index(9)

[20:51] <camelia> rakudo-moar 261f44: ( no output )

[20:51] <PerlJam> m: 3.1415926535.index(9).say

[20:51] <camelia> rakudo-moar 261f44: OUTPUT«6␤»

[20:51] <lue> pippo: it does. The use of substr proves it :) .

[20:51] <pippo> m: my @a = 1..10; say @a.index(3);

[20:51] <camelia> rakudo-moar 261f44: OUTPUT«4␤»

[20:52] <FROGGS> m: my @a = 1..10; say @a.substr(4,1)

[20:52] <camelia> rakudo-moar 261f44: OUTPUT«3␤»

[20:52] <FROGGS> m: my @a = 1..10; say ~@a

[20:52] <camelia> rakudo-moar 261f44: OUTPUT«1 2 3 4 5 6 7 8 9 10␤»

[20:53] <FROGGS> that seems alright

[20:53] <PerlJam> pippo: strings are indexed from 0  (is that the problem?)

[20:53] <pippo> m: my @a = 1..10; say @a.Str.substr(4,1)

[20:53] <camelia> rakudo-moar 261f44: OUTPUT«3␤»

[20:53] <pippo> m: my @a = 1..10; say @a.Str.substr(4,1); say @a.substr(4,1)

[20:53] <camelia> rakudo-moar 261f44: OUTPUT«3␤3␤»

[20:53] <masak> 'night, #perl6

[20:53] <FROGGS> gnight masak 

[20:54] <PerlJam> good night masak!

[20:54] <FROGGS> and you also have to count the space chars

[20:54] <pippo> OK got it. Thank you all!

[20:54] <FROGGS> you're welcome

[20:55] <PerlJam> FROGGS++

[20:55] *** atroxaper joined
[20:56] <dalek> rakudo/nom: 34cc2d2 | (Elizabeth Mattijsen)++ | src/core/SupplyOperations.pm:

[20:56] <dalek> rakudo/nom: Change semantics of Supply.uniq( :expires )

[20:56] <dalek> rakudo/nom: 

[20:56] <dalek> rakudo/nom: Only after we actually more'd a value, do we reset the expiry.  This

[20:56] <dalek> rakudo/nom: actually makes more real world sense.

[20:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/34cc2d254b

[20:59] *** Rotwang left
[21:00] *** atroxaper left
[21:02] *** dayangkun left
[21:04] *** kaare_ left
[21:07] <vendethiel> m: say [map { " " }, 1..5].perl; say [" " x 4].perl;

[21:07] <camelia> rakudo-moar 261f44: OUTPUT«[" ", " ", " ", " ", " "]␤["    "]␤»

[21:07] <vendethiel> m: say [map { " " }, 1..5].perl; say [" " xx 4].perl;

[21:07] <camelia> rakudo-moar 261f44: OUTPUT«[" ", " ", " ", " ", " "]␤[" ", " ", " ", " "]␤»

[21:07] *** kurahaupo joined
[21:07] <vendethiel> m: my @board = [" " xx 5] xx 5; say @board.perl;

[21:07] <camelia> rakudo-moar 261f44: OUTPUT«Array.new([" ", " ", " ", " ", " "], [" ", " ", " ", " ", " "], [" ", " ", " ", " ", " "], [" ", " ", " ", " ", " "], [" ", " ", " ", " ", " "])␤»

[21:11] * vendethiel is reading masak++'s blog post

[21:13] <vendethiel> m: my @row = " " xx 5; say @row.fmt("%s", " | "); say @row.join(' | ');

[21:13] <camelia> rakudo-moar 261f44: OUTPUT«  |   |   |   |  ␤  |   |   |   |  ␤»

[21:14] <dalek> rakudo/nom: cf82ef2 | (Elizabeth Mattijsen)++ | src/core/SupplyOperations.pm:

[21:14] <dalek> rakudo/nom: Make sure Supply.uniq handles different threads

[21:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cf82ef2f3f

[21:16] <vendethiel> m: my @rows = [[True, False].roll xx 5] xx 5; my $offx = 3; my $offy = 2; say @rows[$offy - 1, $offy, $offy + 1][$offx - 1, $offx, $offx + 1].perl;

[21:16] <camelia> rakudo-moar 261f44: OUTPUT«([Bool::True, Bool::False, Bool::True, Bool::False, Bool::True],)␤»

[21:17] <vendethiel> 5?

[21:17] *** dayangkun joined
[21:17] <timotimo> 5 what?

[21:17] <vendethiel> results in the array

[21:18] <timotimo> oh

[21:18] <timotimo> huh, how does that work.

[21:18] <timotimo> hm

[21:18] <timotimo> that may want to be .>>[...]

[21:18] <timotimo> what you're getting right now is the following:

[21:19] <vendethiel> m: my @rows = [[True, False].roll xx 5] xx 5; my $offx = 3; my $offy = 2; say @rows[$offy - 1, $offy, $offy + 1]>>.[$offx - 1, $offx, $offx + 1].perl;

[21:19] <camelia> rakudo-moar 261f44: OUTPUT«Cannot find method 'postcircumfix:<( )>'␤  in sub METAOP_HYPER_CALL at src/gen/m-CORE.setting:17307␤  in block  at /tmp/FP3tHfsQiL:1␤␤»

[21:19] <timotimo> @rows[1, 2, 3] gives you (first row, second row, third row)

[21:19] <timotimo> and (first row, second row, third row)[3 - 1, 3, 3 + 1] gives you only one result back

[21:19] <timotimo> the third row, that is.

[21:19] <vendethiel> makes sense, I guess

[21:21] <vendethiel> m: my @rows = [[True, False].roll xx 5] xx 5; my $offx = 3; my $offy = 2; say (do for ($offx - 1, $offx, $offx + 1) X ($offy - 1, $offy, $offy + 1) { @rows[$^a][$^b] }).perl;

[21:21] <camelia> rakudo-moar 261f44: OUTPUT«(Bool::True, Bool::False, Bool::False, Bool::True, Bool::False, Bool::False, Bool::False, Bool::True, Bool::False).list␤»

[21:21] <timotimo> m: my @rows = [[True, False].roll xx 5] xx 5; my $offx = 3; my $offy = 2; say @rows[$offy - 1, $offy, $offy + 1].>>[[$offx - 1, $offx, $offx + 1].perl;

[21:21] <camelia> rakudo-moar 261f44: OUTPUT«===SORRY!=== Error while compiling /tmp/4Q177FnZU6␤Unable to parse expression in subscript; couldn't find final ']' ␤at /tmp/4Q177FnZU6:1␤------> ].>>[[$offx - 1, $offx, $offx + 1].perl;⏏<EOL>␤    expecting an…»

[21:21] <vendethiel> that works too.

[21:21] <timotimo> mhh

[21:22] <timotimo> the inner pieces could also be $offx X+ (-1, 0, 1) :)

[21:22] <dalek> rakudo/nom: 9047e09 | (Elizabeth Mattijsen)++ | src/core/SupplyOperations.pm:

[21:22] <dalek> rakudo/nom: Make sure Supply.squish handles different threads

[21:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9047e09573

[21:25] <vendethiel> timotimo : ah, yeah! I still can't really about list flattening :).

[21:26] <dwarring> r: for 42 {NEXT (state $val) = $_; LAST {say $val}}

[21:26] <timotimo> "reason"?

[21:26] <camelia> rakudo-{parrot,jvm} 261f44: OUTPUT«42␤»

[21:26] <camelia> ..rakudo-moar 261f44: OUTPUT«Cannot assign a null value to a Perl 6 scalar␤  in block  at /tmp/tmpfile:1␤␤»

[21:27] <timotimo> r: for 42 {NEXT { (state $val) = $_ }; LAST {say $val}}

[21:27] <camelia> rakudo-{parrot,jvm,moar} 261f44: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Variable '$val' is not declared␤at /tmp/tmpfile:1␤------> XT { (state $val) = $_ }; LAST {say $val⏏}}␤    expecting any of:␤        postfix␤»

[21:27] <timotimo> r: for 42 {NEXT ( (state $val) = $_ ); LAST {say $val}}

[21:27] <camelia> rakudo-{parrot,jvm} 261f44: OUTPUT«42␤»

[21:27] <camelia> ..rakudo-moar 261f44: OUTPUT«Cannot assign a null value to a Perl 6 scalar␤  in block  at /tmp/tmpfile:1␤␤»

[21:27] <timotimo> huh.

[21:27] <vendethiel> timotimo: it's not "fluent". doesn't fit how I think. I always forget about it. (and that's one of the things I don't really like in p6, though I havn't been biten yet by it)

[21:28] <dwarring> golfed that  from http://perl6advent.wordpress.com/2012/12/15/day-15-phasers-set-to-stun/

[21:28] *** denis_boyun left
[21:29] <dwarring> (scores example)

[21:29] <dwarring> I'll put in an RT

[21:29] <FROGGS> dwarring++

[21:32] *** kurahaupo left
[21:33] <dalek> nqp: b596f16 | (Tobias Leich)++ | tools/build/MOAR_REVISION:

[21:33] <dalek> nqp: bump moar rev for eof fix

[21:33] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b596f16f9e

[21:33] <dalek> rakudo/nom: 270088d | (Tobias Leich)++ | tools/build/NQP_REVISION:

[21:33] <dalek> rakudo/nom: bump nqp/moar rev for eof fix

[21:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/270088d82b

[21:38] *** rurban left
[21:41] *** kbaker left
[21:42] *** sftp left
[21:43] *** ajr_ left
[21:46] <dalek> rakudo/nom: 84fecfa | (Elizabeth Mattijsen)++ | src/core/SupplyOperations.pm:

[21:46] <dalek> rakudo/nom: Make sure Supply.rotor handles different threads

[21:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/84fecfa294

[21:49] <timotimo> vendethiel: i think the [...;...] syntax ought to help here

[21:49] <timotimo> but it's (of course) NYI

[21:58] *** donaldh joined
[22:01] *** bluescreen10 left
[22:02] *** sftp joined
[22:07] <dalek> roast: 4d38b1f | (David Warring [email@hidden.address] | integration/advent2012-day15.t:

[22:07] <dalek> roast: adding advent 2012 day 15

[22:07] <dalek> roast: review: https://github.com/perl6/roast/commit/4d38b1f740

[22:07] <timotimo> i'm being asked to give a talk at the GPN

[22:09] *** rurban joined
[22:09] *** a3gis joined
[22:09] *** dmol left
[22:10] *** spider-mario left
[22:12] <lizmat> GPN?

[22:12] <timotimo> gulaschprogrammiernacht

[22:13] <lizmat> ah

[22:13] <lizmat> cool!

[22:13] <timotimo> hacking / art conference party thingie in karlsruhe

[22:13] <timotimo> since i've got nothing else in my life at the moment, it'll probably be ... about perl6 :)

[22:13] <lizmat> :-)

[22:15] *** rurban left
[22:16] <timotimo> "Perl 6 - So schnell werdet ihr mich nicht los!"

[22:16] <dalek> rakudo/nom: 3018590 | (Elizabeth Mattijsen)++ | src/core/SupplyOperations.pm:

[22:16] <dalek> rakudo/nom: Make sure Supply.batch handles different threads

[22:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3018590c3f

[22:16] *** hoverboard left
[22:22] <lizmat> timotimo: sounds interesting, what is it about ?  :-)

[22:22] <timotimo> i have no idea

[22:22] <timotimo> but it should be better than last year's

[22:22] <timotimo> for example: the text ought to be readable on the recorded video

[22:22] * jnthn tries to translate that without knowing much German...

[22:23] <timotimo> "you aint gettin' rid of me that quickly!"

[22:23] <jnthn> So fast...mumble...me not God!

[22:23] <jnthn> oh :)

[22:23] <timotimo> as in: i did one last year already, but i'll do it again, ha-ha!

[22:24] <timotimo> of course parallel programming stuff would be interesting, as well as reactive

[22:27] <lizmat> plenty of primitives now  :-)

[22:29] <pippo> 'night #perl6

[22:29] <timotimo> 'night pippo :)

[22:29] <pippo> :-)

[22:29] <timotimo> lizmat: this time i really ought to start much, much earlier with the preparations

[22:29] *** pippo left
[22:30] <timotimo> and be done more than just 5 minutes before start

[22:30] <lizmat> yes, that helps  :-)

[22:30] * jnthn just started on his slides :P

[22:31] <japhb> timotimo: I think my last year's talks were proof that you can start well ahead of time and still only just finish in time.  I was changing slides pretty much until I walked to the room.

[22:32] <timotimo> i have about 2 months to prepare it, fortunately

[22:38] *** FROGGS left
[22:41] *** thilp left
[22:42] <timotimo> which means i'll spend about 2 months procrastinating and get drunk (on caffeine probably) the night before my talk and then ... :|

[22:43] *** cognominal joined
[22:50] <lizmat> perhaps Gulash would work better under the circumstances ?

[22:51] <timotimo> there's only gulasch during one of the days

[22:55] <lizmat> :-(

[22:57] *** atroxaper joined
[23:01] *** benabik left
[23:01] *** atroxaper left
[23:03] *** treehug8_ left
[23:03] *** rurban joined
[23:05] <timotimo> can i pass a CurrentThreadScheduler to code being run in a different thread and cause the work to be scheduled on the original thread where the CTS has been created from?

[23:05] <timotimo> or is there something for that?

[23:05] *** benabik joined
[23:06] <jnthn> timotimo: No.

[23:06] <jnthn> It means the thread you're currently on.

[23:06] <jnthn> It just does it right away

[23:06] <timotimo> ah

[23:06] <timotimo> i read something in a recent commit message that you could cause stuff to be run, for example, in the gui thread

[23:06] <timotimo> how would that work?

[23:06] <jnthn> Oh

[23:07] <jnthn> That is a custom scheduler.

[23:07] <jnthn> That I did in some other (unpublished) work

[23:07] <jnthn> But we can write an EventLoopScheduler.

[23:07] <jnthn> Where you basically can make a thread sit in a run loop for a bit and give stuff do it.

[23:08] <timotimo> ah

[23:08] <timotimo> that sounds nice to have

[23:08] <timotimo> it could also integrate with other event loops; most event loops offer a "pump one event" function

[23:08] <timotimo> or "poll for events" or stuff like that

[23:09] <jnthn> Right.

[23:12] *** rurban left
[23:15] *** rurban joined
[23:22] *** BenGoldberg joined
[23:24] *** a3gis left
[23:27] *** benabik left
[23:30] <dalek> rakudo/nom: fcedf60 | (Elizabeth Mattijsen)++ | src/core/SupplyOperations.pm:

[23:30] <dalek> rakudo/nom: Code esthetics: make Supply parameter $s

[23:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fcedf602b4

[23:30] <dalek> rakudo/nom: 375404d | (Elizabeth Mattijsen)++ | src/core/SupplyOperations.pm:

[23:30] <dalek> rakudo/nom: Oops, Parcels are immutable

[23:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/375404d8aa

[23:31] *** donaldh left
[23:32] <dalek> roast: 6f8a5d1 | (Elizabeth Mattijsen)++ | S17-concurrency/supply.t:

[23:32] <dalek> roast: Add tests for Supply.uniq( :expires )

[23:32] <dalek> roast: review: https://github.com/perl6/roast/commit/6f8a5d1aee

[23:35] *** xenoterracide_ joined
[23:41] *** benabik joined
[23:42] * lizmat goes to rand.sleep

[23:46] * jnthn figures he'll do similar

[23:46] <jnthn> Presentation steadily tarting to exist :D

[23:46] <jnthn> uh, starting

[23:46] <jnthn> 'naight

[23:47] *** woolfy left
[23:47] *** ivan`` left
[23:48] *** ivan`` joined
[23:48] *** woolfy joined
[23:49] <timotimo> :)

[23:52] *** rurban left
[23:56] *** benabik left
[23:57] *** benabik joined
[23:58] *** xenoterracide_ left
[23:59] <timotimo> a tweet just showed up in my perl6 search because an url shortener happened to use "PeRl6

