[00:01] *** lizmat left
[00:01] <lue> In any case, the only useful place I've seen so far is substr, where you could supply a StrLen for length or a StrPos for endpoint. But that doesn't help the integer cases of substr (you can have Int length but not Int endpoint), and (I hope) :end and :length work better anyway :)

[00:01] *** LLamaRider left
[00:01] *** lizmat joined
[00:03] *** Ben_Goldberg joined
[00:06] *** BenGoldberg left
[00:10] *** ssutch_ left
[00:10] *** ssutch joined
[00:13] *** hoverboard left
[00:14] *** ssutch left
[00:15] *** Ben_Goldberg is now known as BenGoldberg

[00:17] <lue> o_o how old is S32::Str ‽ → " multi trans(List of Pair %data --> Any );"

[00:17] <lue> "List of Pair", a.k.a. "Hash", no?

[00:18] <colomon> they're two different things

[00:19] <lue> well yeah, but why not just call it Hash? (esp. with the % there). Doesn't that mean Hash[Str, List[Pair]] anyway?

[00:19] <lue> r: my List of Pair %h; say %h.WHAT;

[00:19] <camelia> rakudo-parrot e9b185, rakudo-jvm e9b185, rakudo-moar e9b185: OUTPUT«===SORRY!===␤Type List cannot accept type arguments␤»

[00:20] <lue> r: my Array of Pair %h; say %h.WHAT;

[00:20] <camelia> rakudo-parrot e9b185, rakudo-jvm e9b185, rakudo-moar e9b185: OUTPUT«(Hash[Array[Pair]])␤»

[00:21] *** btyler left
[00:24] *** raiph left
[00:30] <retupmoca> re: building native libraries with panda: would something like this for generating Makefiles be a good idea? https://github.com/retupmoca/P6-LibraryMake/blob/master/lib/LibraryMake.pm6

[00:32] *** rurban1 left
[00:35] *** rurban1 joined
[00:38] *** Guest56776 is now known as ponbiki

[00:38] *** thou left
[00:40] *** rurban1 left
[00:56] *** kbaker joined
[00:59] *** jnap left
[01:02] *** rurban1 joined
[01:07] *** rurban1 left
[01:10] *** Ben_Goldberg joined
[01:11] *** BenGoldberg left
[01:14] *** Ben_Goldberg is now known as BenGoldberg

[01:19] *** telex left
[01:20] *** telex joined
[01:21] *** lustlife joined
[01:29] *** jnap joined
[01:30] *** FROGGS_ joined
[01:34] *** FROGGS left
[01:34] *** jnap left
[01:35] *** aindilis left
[01:42] *** klapperl joined
[01:42] *** ssutch joined
[01:44] *** ilbot3 left
[01:46] *** klapperl_ left
[01:46] *** ilbot3 joined
[01:48] *** ssutch left
[01:49] *** ssutch joined
[01:50] *** ssutch left
[01:51] *** ssutch joined
[02:03] *** rurban1 joined
[02:08] *** rurban1 left
[02:16] *** thou joined
[02:18] *** kbaker left
[02:20] *** btyler joined
[02:26] *** xragnar_ joined
[02:26] *** xragnar is now known as Guest26491

[02:26] *** Guest26491 left
[02:26] *** xragnar_ is now known as xragnar

[02:30] *** jnap joined
[02:35] *** jnap left
[02:45] *** hoverboard joined
[02:48] <btyler> is there a general preference for `my Str $foo = 'abc'` vs `my $foo of Str = 'abc'?`

[02:53] *** rurban1 joined
[02:56] *** benabik joined
[03:25] *** robinsmidsrod left
[03:31] *** jnap joined
[03:35] *** robinsmidsrod joined
[03:36] *** jnap left
[04:03] *** kaare_ joined
[04:19] *** hoverboard left
[04:24] *** [Sno] left
[04:30] *** Psyche^_ joined
[04:32] *** jnap joined
[04:34] *** Psyche^ left
[04:34] *** btyler left
[04:36] *** jnap left
[04:41] *** rurban1 left
[04:47] *** thou left
[04:48] *** BenGoldberg left
[05:08] *** xenoterracide left
[05:09] *** kaare_ left
[05:11] *** rurban1 joined
[05:16] *** rurban1 left
[05:18] *** xenoterracide joined
[05:25] *** xenoterracide left
[05:33] *** jnap joined
[05:33] *** kaare_ joined
[05:35] *** kurahaupo joined
[05:36] *** zby_home joined
[05:37] *** jnap left
[05:47] *** kurahaupo left
[05:59] *** aborazmeh joined
[06:02] *** [Sno] joined
[06:08] *** denisboyun joined
[06:09] *** aborazmeh left
[06:11] *** kivutar joined
[06:13] *** AW3i joined
[06:14] *** aborazmeh joined
[06:15] *** denisboyun left
[06:20] *** arnsholtAtHome left
[06:22] *** zby_home left
[06:23] *** woolfy1 joined
[06:23] *** woolfy left
[06:29] *** kaare__ joined
[06:30] *** kaare_ left
[06:33] *** kaleem joined
[06:33] *** jnap joined
[06:35] *** darutoko joined
[06:38] *** jnap left
[06:39] *** kaare__ is now known as kaare_

[07:03] *** dmol joined
[07:06] *** zakharyas joined
[07:13] *** rurban1 joined
[07:15] *** FROGGS_ left
[07:16] <moritz> http://www.minnowboard.org/meet-minnowboard-max/ looks like the 2GB variant would be a nice, low-cost machine for smoking rakudo :-)

[07:18] *** rurban1 left
[07:20] *** brrt joined
[07:29] *** FROGGS_ joined
[07:29] *** AW3i left
[07:34] *** jnap joined
[07:38] <FROGGS_> @all, please test: http://froggs.de/perl6/rakudo-star-2014.03.tar.gz <-- rakudo@parrot star release candidate

[07:38] *** jnap left
[07:39] <FROGGS_> btyler: I prefer the former, because it is shorter and other languages I work with do it this way too

[07:55] *** fhelmberger joined
[07:58] <dalek> star: 499084f | (Tobias Leich)++ | tools/star/release-guide.pod:

[07:58] <dalek> star: remove note about MIME::Base64, add one about LWP::Simple

[07:58] <dalek> star: review: https://github.com/rakudo/star/commit/499084f120

[07:58] <dalek> star: dca1065 | (Tobias Leich)++ | tools/build/Makefile.in:

[07:58] <dalek> star: remove perl6-debug, it is included in rakudo now

[07:58] <dalek> star: review: https://github.com/rakudo/star/commit/dca106504d

[07:59] <dalek> star: f307717 | (Tobias Leich)++ | / (3 files):

[07:59] <dalek> star: bump versions

[07:59] <dalek> star: review: https://github.com/rakudo/star/commit/f307717af9

[08:00] <dalek> star: ce9dfba | (Tobias Leich)++ | docs/announce/2014.03.md:

[08:00] <dalek> star: add announcement for 2014.03

[08:00] <dalek> star: review: https://github.com/rakudo/star/commit/ce9dfba89c

[08:01] <moritz> FROGGS_: star RC built fine, including modules

[08:01] <moritz> now running module-test

[08:02] <dalek> star: 048af2b | (Tobias Leich)++ | modules/ (12 files):

[08:02] <dalek> star: bump submodules to latest versions

[08:02] <dalek> star: 

[08:02] <dalek> star: Except perl6-lwp-simple, we switch to a patched fork here.

[08:02] <dalek> star: review: https://github.com/rakudo/star/commit/048af2bba4

[08:02] <FROGGS_> moritz++ # thank you! :o)

[08:03] <FROGGS_> moritz: would be more than awesome if you could proof read the announcement

[08:03] <moritz> FROGGS_: will do. And sorry for not merging the lwp-simple pull request earlier, I somehow lost track of it

[08:03] <moritz> I've done it now

[08:04] <FROGGS_> ahh, no problem

[08:04] <moritz> github++ # making forking easy

[08:05] <moritz> FROGGS_: since there wasn't a star release in Februar, the release announcement for March could contain compilre impreovements from February

[08:06] <FROGGS_> I did not even know that you have push right to lwp-simple

[08:06] <FROGGS_> ahh, good point!

[08:06] <moritz> Result: PASS

[08:06] <FROGGS_> \o/

[08:06] * moritz worms his way into most p6 projects :-)

[08:06] <nwc10> moritz: congratulations on the new project. How is sleep?

[08:07] <nwc10> "the sleep is a lie"?

[08:07] <moritz> FROGGS_: also, might be worth mentioning that JVM and Moar support for star is being worked on already, and experimental support is expected for the April star release

[08:07] <moritz> nwc10: thanks. Sleep is LTA, but OK (at least for me; $wife and $newborn are still in the hospital, so they don't wake me right now)

[08:07] <nwc10> it's "close" - is it worth saying that?

[08:08] <FROGGS_> I changed a paragraph to: While the other backends

[08:08] <FROGGS_> mostly implement the same features as the Parrot backend, some bits are

[08:08] <FROGGS_> still missing that lead to module build problems or test failures.

[08:08] <FROGGS_> We hope to provide a JVM-based and MoarVM-based Rakudo Star releases soon.

[08:08] <FROGGS_> I add a note about our expectations :o)

[08:12] <dalek> star: 2228882 | (Tobias Leich)++ | docs/announce/2014.03.md:

[08:12] <dalek> star: add changes of 2014.02 and notes about r-m/j* in 2014.04

[08:12] <dalek> star: review: https://github.com/rakudo/star/commit/22288827d0

[08:13] <dalek> star: 8a004b1 | (Tobias Leich)++ | tools/star/release-guide.pod:

[08:13] <dalek> star: update release peeps list

[08:13] <dalek> star: review: https://github.com/rakudo/star/commit/8a004b10ae

[08:14] *** rurban1 joined
[08:17] <moritz> FROGGS_++ # shipt it!

[08:17] <FROGGS_> shipt?

[08:18] <moritz> ship

[08:18] <FROGGS_> I am uploading the updated tarball that contains the fixed announcement

[08:18] <FROGGS_> and I am going to unpack and test again

[08:19] *** rurban1 left
[08:22] *** rindolf joined
[08:25] <FROGGS_> okay, new release tarball is online at http://froggs.de/perl6/rakudo-star-2014.03.tar.gz

[08:25] <FROGGS_> I just wonder why it is 2MB smaller

[08:28] *** dakkar joined
[08:29] *** arnsholt left
[08:35] *** jnap joined
[08:35] <jnthn> FROGGS_: In https://github.com/rakudo/star/commit/22288827d0 it looks like you added changes in the wrong place, under the "stuff that's not quite there" heading

[08:36] <FROGGS_> ohh damn!

[08:36] <FROGGS_> jnthn++

[08:37] <dalek> star: 6363be3 | (Tobias Leich)++ | docs/announce/2014.03.md:

[08:37] <dalek> star: move changes to correct section, jnthn++

[08:37] <dalek> star: review: https://github.com/rakudo/star/commit/6363be3b24

[08:37] <nwc10> FROGGS_: if you want it even smaller, see the notes about 7-Zip etc here http://perl5.git.perl.org/perl.git/blob/fc6712109f60b7466ab6426581de645ee93aff93:/Porting/release_managers_guide.pod#l836

[08:38] <nwc10> FROGGS_: aha, here's a pretty version: https://metacpan.org/pod/release/RJBS/perl-5.18.2/Porting/release_managers_guide.pod#build-the-tarball

[08:38] <FROGGS_> nwc10: dunno if we want to provide .7z

[08:39] <FROGGS_> (I don't want to upset packagers by changing that now)

[08:39] <nwc10> no, point is that the 7z tools make tigher gzip files

[08:39] <nwc10> tighter

[08:39] *** jnap left
[08:39] <FROGGS_> aha, okay

[08:40] *** denis_boyun joined
[08:40] <nwc10> and, rougly, bzip2 isn't worht it any more

[08:40] <nwc10> .gz and .xz seem to be the two with useful CPU/size trade offs

[08:43] <brrt> why is bzip2 out of favor?

[08:43] <nwc10> doesn't get much better compression than gzip, but uses quite a bit more CPU

[08:43] <nwc10> xz gets a lot better compression, for not massively more CPU than bzip2

[08:44] <nwc10> and on modern hardware, CPU speedups outpace disk access speedups, IIRC

[08:44] <nwc10> although SSDs might have skewed that since then

[08:45] <xiaomiao> nwc10: xz/lzma is a bit better on decompression, but afair a bit worse on compression than bzip2

[08:46] <xiaomiao> so for compress-once, uncompress-many it wins, but for compress-and-read it doesn't matter much

[08:48] <nwc10> thanks - I wasn't aware of that detail

[08:57] *** lizmat left
[09:13] *** lizmat joined
[09:15] *** rurban1 joined
[09:19] *** rurban1 left
[09:21] *** kaare_ left
[09:23] *** kaare_ joined
[09:24] *** kurahaupo joined
[09:25] *** denis_boyun left
[09:31] *** virtualsue joined
[09:32] <moritz> FROGGS_: your implementation of $*EXECUTABLE is much better than $*EXECUTABLE_NAME, but it's still dangerous

[09:33] <moritz> FROGGS_: it always points to the installed perl6-{m,j}, but usually you spectest *before* installing

[09:33] <FROGGS_> moritz: I'd love to check for the running process, but I don't know how

[09:33] <moritz> FROGGS_: and the spectests happen to be one of the major users of $*EXECUTABLE_NAME, so probably $*EXECUTABLE soon

[09:34] <moritz> :(

[09:34] <FROGGS_> spectests and panda, yes

[09:34] <FROGGS_> both very important bits

[09:36] *** jnap joined
[09:37] *** lizmat left
[09:37] *** lizmat joined
[09:38] <moritz> pandaspec

[09:40] *** kaare_ left
[09:40] *** jnap left
[09:42] *** kaare_ joined
[09:44] *** SamuraiJack_ joined
[09:49] <lizmat> for some reason, make t/spec/S32-io/IO-Socket-INET.t started failing for me today

[09:49] <lizmat> am I the only one seeing that ?

[09:50] <jnthn> lizmat: Backend?

[09:50] <jnthn> lizmat: It was busted on r-m for a bit; HEAD r-m resolves it.

[09:50] <lizmat> moar

[09:50] <lizmat> will check

[09:51] <jnthn> I hastily did some locking stuff on I/O to get sleep sort in shape for you

[09:51] <jnthn> And unfortunately reacquired a mutex, which is a no-no with pthreads.

[09:51] <jnthn> The whole patch has been re-done now to something more robust/complete. :)

[09:53] <lizmat> cool

[09:53] <lizmat> if that works, should I bump versions again?

[09:54] <jnthn> Feel free :)

[09:58] <lizmat> hmmm... still seeing error

[09:59] <lizmat> s

[09:59] <lizmat> could it be that a failed test leaves behind cruft that will make next tests fail?

[09:59] <jnthn> maybe; I know there's a flag file

[09:59] <lizmat> thinking about servers hanging on a port that the test uses

[09:59] <jnthn> Also, I know there were new tests in that file of late...

[10:00] <jnthn> ..so may be worth checking it's not a new, shoulda-been-fudged one.

[10:00] <jnthn> lizmat: BTW, how was the talk? :)

[10:00] <lizmat> hmmm... it seems that I have 3 moar processes running each eating 100% CPU

[10:00] <lizmat> better killl them first

[10:01] <jnthn> om nom nom

[10:02] <lizmat> killed, no change in tests  :-(

[10:03] *** woolfy joined
[10:03] *** woolfy1 left
[10:06] <lizmat> also, without FROGGS_++ last commit, it also fails

[10:06] <lizmat> for the record: moar on darwin

[10:07] <lizmat> the presentation went fine (for a first real appearance), only a little over time

[10:08] <lizmat> title: "How the camel is de-cocooning:

[10:08] *** Alina-malina left
[10:08] <jnthn> Yes, I liked teh title. :)

[10:08] <jnthn> Look forward to seeing it in a few weeks time :)

[10:08] *** Alina-malina joined
[10:09] <lizmat> # [0s] Testing on port 1024

[10:09] <lizmat> not ok 1 - [2s] echo server and client

[10:09] <lizmat> #      got: 'echo ''Twas brillig, and the slithy toves

[10:09] <lizmat> # Did gyre and gimble in the wabe;

[10:09] <lizmat> # All mimsy were the borogoves,

[10:09] <lizmat> # And the mome raths outgrabe.O frabjous day! Callooh! Callay!' received

[10:09] <lizmat> # '

[10:09] <lizmat> # expected: 'echo '0123456789abcdefghijklmnopqrstuvwxyz' received

[10:09] <lizmat> huh?  why am I getting Lewis Carroll on the horn here ?

[10:11] <lizmat> hmmm.. I still have something running on port 1024?

[10:13] <lizmat> it appaars I had at least 5 more moar processes running, one of them on port 1024

[10:13] <jnthn> oh!

[10:13] <masak> one of them channeling Lewis Carroll... :)

[10:14] <lizmat> tests all ok now after killing all those moars

[10:14] <jnthn> phew!

[10:14] <lizmat> running full spectest now to see if that leaves behind any moar processes

[10:15] *** AW3i joined
[10:16] *** rurban1 joined
[10:19] <lizmat> aha, Ctrl-Cing out of t/spec/S32-io/IO-Socket-INET.t leaves a moar behind

[10:19] <lizmat> I guess we cannot catch that yet, right?

[10:20] *** woolfy left
[10:20] <lizmat> anyway, once you've done that, t/spec/S32-io/IO-Socket-INET.t starts to fail

[10:21] <lizmat> and continues to fail until you killed all the moars

[10:21] *** rurban1 left
[10:23] *** SamuraiJack_ left
[10:24] *** Ven joined
[10:25] <lizmat> feels to me that t/spec/S32-io/IO-Socket-INET.pl should have some sort of expiration feature on the server side

[10:25] <lizmat> don't have time for that now...  going to see some sights&

[10:25] <FROGGS_> lizmat: have fun!

[10:26] <jnthn> Enjoy :)

[10:27] <FROGGS_> sometimes I *hate* windows

[10:28] <FROGGS_> how can it be that windows reboots because of an update and you can only click "later" to interrupt? and then it reboots while you are fetching some lunch

[10:28] <FROGGS_> nice that this happens while I prepare a star msi relase ò.ó

[10:28] <FROGGS_> release*

[10:29] <FROGGS_> that is win xp, mind

[10:29] <jnthn> There are ways to disable that stuff.

[10:29] <FROGGS_> and I hope win7+ does not try to be smarter than me

[10:36] *** jnap joined
[10:38] *** denis_boyun joined
[10:41] *** jnap left
[10:46] <Ven> FROGGS_: win 7+ tries even harder to be smarter than you.

[10:47] <FROGGS_> :/

[10:48] *** hummeleBop1 left
[10:58] *** aborazmeh left
[11:01] *** arnsholt joined
[11:01] <arnsholt> o/

[11:01] <FROGGS_> hi araujo 

[11:01] <FROGGS_> err

[11:01] <FROGGS_> hi arnsholt 

[11:01] <colomon> \o

[11:01] <FROGGS_> o/

[11:03] <simula67> lizmat: or this : https://www.dnorth.net/2012/03/17/the-port-0-trick/

[11:05] <FROGGS_> that is very nice indeed!

[11:05] *** pecastro left
[11:07] *** pecastro joined
[11:08] <simula67> but that will leave the server processes as zombies

[11:10] <dalek> nqp/O-refactor: 7e96389 | (Arne Skjærholt)++ | src/ (2 files):

[11:10] <dalek> nqp/O-refactor: Refactor how the <O()> rule works.

[11:10] <dalek> nqp/O-refactor: 

[11:10] <dalek> nqp/O-refactor: Things brings us closer in line with how STD does things, and does away with

[11:10] <dalek> nqp/O-refactor: the rule taking a string of colonpairs that we then dissect into the

[11:10] <dalek> nqp/O-refactor: precedence information.

[11:10] <dalek> nqp/O-refactor: review: https://github.com/perl6/nqp/commit/7e96389f4c

[11:10] <arnsholt> jnthn: Leaving the O refactor in a branch for now. I get some terribly weird errors compiling the setting with Rakudo when I try to update that

[11:11] <FROGGS_> arnsholt: is there also a rakudo branch?

[11:12] *** census joined
[11:12] *** AW3i left
[11:13] <arnsholt> Not yet

[11:13] <arnsholt> I guess I could commit what I have so far, but it doesn't actually compile, though =

[11:13] <arnsholt> s/=/=)

[11:13] <FROGGS_> but you replaced rakudo's init block in the grammar too?

[11:15] <census> hi masak -- you around?

[11:15] <arnsholt> Yeah, I've made the same kind of changes in Rakudo

[11:16] <arnsholt> But Rakudo has some more complicated things going on (related to user-defined operators, I think), which is where the breakage happens (AFAICT)

[11:17] *** rurban1 joined
[11:18] <FROGGS_> ahh, I see

[11:19] <arnsholt> The actual error I get is "Cannot assign to non-container", which is... weird

[11:20] <FROGGS_> not too weird when you mix nqp and rakudo

[11:21] <arnsholt> True, true

[11:21] *** rurban1 left
[11:21] <masak> census: sort of. is it #perl6-related?

[11:22] <census> masak -- no, quick latex question i wanted to run by you, if that's ok

[11:26] <masak> census: kind of a little busy right now. maybe try on #latex or #help-census?

[11:26] <masak> kthx

[11:26] *** lizmat left
[11:28] <FROGGS_> moritz: can you please upload http://froggs.de/perl6/rakudo-star-2014.03.tar.gz and http://froggs.de/perl6/rakudo-star-2014.03.msi ?

[11:28] <FROGGS_> moritz: please download both afresh because I updated the tar.gz also

[11:31] <census> thanks masak.  yes i'm in the help-census room

[11:31] <census> no worries about it

[11:37] *** jnap joined
[11:42] *** Alina-malina left
[11:42] *** jnap left
[11:42] *** benabik left
[11:43] *** FROGGS_ left
[11:43] *** kivutar left
[11:44] *** arnsholt left
[11:45] *** arnsholt joined
[11:50] *** FROGGS_ joined
[12:02] *** iolympian joined
[12:04] *** brrt left
[12:06] *** colomon left
[12:09] *** fhelmberger left
[12:10] *** Alina-malina joined
[12:14] *** Alina-malina left
[12:15] *** Alina-malina joined
[12:15] *** fhelmberger joined
[12:17] *** colomon joined
[12:18] *** rurban1 joined
[12:22] *** rurban1 left
[12:24] <[Coke]> there was still a hang in the JVM.

[12:25] <[Coke]> yesterday's run now lost as well, today's run compromised from the old running process.

[12:25] <FROGGS_> [Coke]: are you able to upload stuff to http://rakudo.org/downloads/star/?

[12:27] <jnthn> [Coke]: Well, it wasn't fixed until last night, so yesterdays was probably before the fix.

[12:28] *** Alina-malina left
[12:29] *** Alina-malina joined
[12:31] *** toebu joined
[12:32] <[Coke]> jnthn: I had re-started a run yesterday after the fix.

[12:32] <[Coke]> (a full run, not just the JVM stuff, so it re-fetched git, etc.)

[12:32] <[Coke]> so I suspect there is still a hang.

[12:32] <jnthn> [Coke]: Does it get HEAD, or the NQP_REVISION?

[12:33] <jnthn> [Coke]: 'cus that wasn't immediately bumped...

[12:33] <[Coke]> NQP_REVISION only.

[12:33] <[Coke]> muuuuust do the ulimit stuff...

[12:35] <[Coke]> but for now, re-starting today's run.

[12:35] <[Coke]> jnthn++

[12:37] *** colomon left
[12:38] *** jnap joined
[12:41] *** xenoterracide joined
[12:42] *** [Sno]_ joined
[12:42] *** jnap left
[12:43] *** [Sno] left
[12:43] *** [Sno]_ is now known as [Sno]

[12:45] *** arnsholt left
[12:59] *** aborazmeh joined
[13:07] *** brrt joined
[13:10] *** Alula left
[13:12] *** Alula joined
[13:18] *** rurban1 joined
[13:19] *** fhelmberger left
[13:21] *** REPLeffect left
[13:24] *** jnap joined
[13:25] *** rurban1 left
[13:33] *** fhelmberger joined
[13:36] *** kaare_ left
[13:39] *** LLamaRider joined
[13:43] *** kbaker_ joined
[13:44] *** guru joined
[13:45] *** guru is now known as Guest39202

[13:45] *** Guest39202 is now known as ajr_

[13:46] *** btyler joined
[13:54] *** LLamaRider left
[13:55] *** cognominal left
[13:55] *** cognominal joined
[13:56] *** renormalist joined
[13:58] *** mkz joined
[14:01] *** rurban1 joined
[14:02] *** LLamaRider joined
[14:02] *** thou joined
[14:03] *** bluescreen10 joined
[14:03] *** rindolf left
[14:03] *** Alina-malina left
[14:07] *** virtualsue left
[14:08] *** Alina-malina joined
[14:08] *** [Sno] left
[14:09] *** virtualsue joined
[14:30] *** kaleem left
[14:31] *** molaf joined
[14:32] <timotimo> github renders the text as "@ as shortcut for @$, % as shortcut for %$

[14:35] <FROGGS_> is here someone here who can upload http://froggs.de/perl6/rakudo-star-2014.03.tar.gz and http://froggs.de/perl6/rakudo-star-2014.03.msi to http://rakudo.org/downloads/star/?

[14:37] *** bluescreen100 joined
[14:40] *** bluescreen10 left
[14:45] *** aborazmeh left
[14:50] *** woolfy joined
[14:59] *** LLamaRider left
[15:00] *** LLamaRider joined
[15:08] *** kaare_ joined
[15:09] *** xenoterracide left
[15:11] <dalek> Heuristic branch merge: pushed 29 commits to nqp/r2-lex-to-local by timo

[15:18] *** denis_boyun left
[15:20] *** xenoterracide joined
[15:24] *** kurahaupo left
[15:24] *** xenoterracide left
[15:25] *** xenoterracide joined
[15:26] *** iolympian left
[15:29] *** brrt left
[15:29] *** iolympian joined
[15:30] *** Alina-malina left
[15:30] *** iolympian left
[15:30] *** Alina-malina joined
[15:33] *** arnsholt joined
[15:37] *** zakharyas left
[15:37] *** raiph joined
[15:42] *** hoverboard joined
[15:44] *** iolympian joined
[15:45] *** iolympian left
[15:45] *** ajr_ left
[15:45] *** colomon joined
[15:45] *** guru joined
[15:45] *** guru is now known as ajr_

[15:47] <[Coke]> solely from an htop monitoring standpoint, i wonder if we'd be better off setting rakudo.jvm's classpath via env var rather than as a command line arg

[15:48] *** FROGGS_ left
[15:49] *** treehug88 joined
[15:50] *** FROGGS[mobile] joined
[15:52] *** mullinator joined
[15:55] <moritz> [Coke]: that's a bit brittle, because some process might want to spawn a subprocess with a clean env

[15:56] <[Coke]> yup. I'm just selfish and don't expect you to change. :)

[15:56] <[Coke]> also, rakudo.jvm run still reaaaaly slow. :)

[15:57] * moritz tries a j-spectest again

[15:57] <[Coke]> note that I'm not using the eval server, and am doing one-at-a-time testing.

[15:58] <jnthn> moritz: Do you ahve access to upload tarballs to rakudo.org?

[15:59] <moritz> jnthn: yes

[15:59] * moritz backlogs

[15:59] <jnthn> moritz: Could you possibly upload the ones in the backlog? 

[15:59] <jnthn> moritz: I'd do it, but unsure where my key is...

[15:59] <jnthn> Thought it was on this machine.

[15:59] * moritz runs it

[16:00] <moritz> [X] tarball uploaded

[16:00] <moritz> [X] msi uploaded

[16:00] <moritz> jnthn: the comment in ~/.ssh/authorized_keys says [email@hidden.address]
[16:00] <[Coke]> moritz++ jnthn++ FROGGS++

[16:01] <[Coke]> I am reminded - has anyone tried to make a rakudo.jar yet?

[16:01] * moritz hasn't

[16:01] *** kurahaupo joined
[16:01] *** treehug8_ joined
[16:01] <FROGGS[mobile]> moritz++

[16:01] <FROGGS[mobile]> thank you

[16:02] * [Coke] wanted to have something where he could run perl6 code apps inside eclipse.

[16:02] *** toebu left
[16:02] <[Coke]> s/code//

[16:02] <moritz> FROGGS++ # release

[16:02] *** ajr_ left
[16:04] <timotimo> \o/

[16:04] *** guru joined
[16:04] *** treehug88 left
[16:04] *** kurahaupo left
[16:04] *** guru is now known as Guest20811

[16:05] *** Guest20811 is now known as ajr_

[16:05] *** kurahaupo joined
[16:09] *** denisboyun joined
[16:11] *** kaleem joined
[16:11] <[Coke]> .u ಠ

[16:11] <yoleaux> U+0CA0 KANNADA LETTER TTHA [Lo] (ಠ)

[16:14] <[Coke]> .u ‿

[16:14] <yoleaux> U+203F UNDERTIE [Pc] (‿)

[16:15] <[Coke]> .u ʘ

[16:15] <yoleaux> U+0298 LATIN LETTER BILABIAL CLICK [Ll] (ʘ)

[16:22] *** colomon left
[16:29] *** benabik joined
[16:35] *** telex left
[16:36] *** telex joined
[16:36] *** kivutar joined
[16:39] *** [Sno] joined
[16:40] *** fhelmberger left
[16:41] *** virtualsue left
[16:46] * [Coke] just had to implement "can" in coldfusion. whee.

[16:47] <[Coke]> (thankfully, introspection is possible, it's just verbose.)

[16:52] *** SamuraiJack_ joined
[16:53] *** broquaint left
[16:56] <dalek> Perlito: 4fdfade | (Flavio S. Glock)++ | / (3 files):

[16:56] <dalek> Perlito: Perlito5 - js - create ''

[16:56] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/4fdfadecab

[16:56] *** SamuraiJack__ joined
[16:59] *** dakkar left
[17:00] *** SamuraiJack_ left
[17:00] *** broquaint joined
[17:06] <dalek> Perlito: c7afb9d | (Flavio S. Glock)++ | / (3 files):

[17:06] <dalek> Perlito: Perlito5 - syntax - allow '0'

[17:06] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/c7afb9dbbf

[17:11] *** sftp_ left
[17:12] <Ven> perlito's alive ? or the perl5-to-js backend is ? Seems to do a lot of things :p

[17:12] <Ven> :o*

[17:12] *** sftp_ joined
[17:12] *** zby_home joined
[17:16] <Ven> *before installing new rakudo-star * perl6 -v *after 5 seconds+* "2013.09" *install new rakudo star" perl6 -v "2014.03" instantly <3

[17:17] *** xinming__ joined
[17:19] <moritz> \o/

[17:19] <arnsholt> Oh. nqp/O-refactor is broken on Moar. Maybe that's the same reason it's broken on Rakudo *fingers crossed*

[17:20] *** xinming_ left
[17:21] <Ven> I'm really impressed with the huge speedup :). My gameoflife actually runs at a correct pace now. (the version in another language runs at the same speed ... though it has a sleep in it :p)

[17:26] <arnsholt> [Coke]: Ideally, I'd like both NQP and Rakudo on JVM to be shipped as a single JAR, with all the deps inside

[17:26] <arnsholt> Unfortunately, bundling JARs inside another JAR requires a certain amount of hackery to get working =/

[17:26] *** kivutar left
[17:30] <Ven> Though, I really don't know how you can get 60fps on your perl6 games when I get 1fps on my game of life ._.

[17:30] *** molaf left
[17:31] *** FROGGS joined
[17:31] <moritz> does building NQP and Rakudo on top of parrot only feels a lot slower than on moarvm, or is that actually the case?

[17:31] <Ven> perl6-m (and -j) will probably be next month, right ?

[17:32] <Ven> I mean next rakudo star

[17:33] <moritz> Ven: yes, though it'll be still experimental support

[17:33] <moritz> Ven: but the patches (or at least most of them) that are needed for star's build system are already in a branch

[17:33] *** ajr_ left
[17:33] <moritz> FROGGS[mobile], jnthn: now that star is released, what about merging tristar into master?

[17:34] <FROGGS> +1

[17:34] * Ven kinda wants to see the speedup improvement moar will bring

[17:35] <moritz> Ven: you can build a rakudo-moar right now, without star

[17:37] <Ven> Definitely, if you guys are saying it's cool

[17:37] <moritz> it sure is

[17:38] * Ven tastes the water

[17:38] <FROGGS> it is very very cool

[17:38] <jnthn> moritz: +1

[17:39] <jnthn> moritz: And yeah, r-m builds faster

[17:41] <dalek> Heuristic branch merge: pushed 28 commits to star by moritz

[17:42] <moritz> the merge conflicts were pretty trivial to resolve

[17:43] <arnsholt> jnthn: Could you take a look at nqp/O-refactor? I'm not quite sure what's up with the compile error on Moar. Somehow the hash doesn't get flattened properly or somesuch?

[17:46] *** dwarring joined
[17:52] <FROGGS> moritz++

[17:53] <FROGGS> arnsholt: you maybe look at run() or shell() and what we needed to get ha hash without containers (if that is the problem you have, dunno)

[17:53] <FROGGS> in terms.pm or control.pm or where that is

[17:54] *** xinming__ left
[17:56] *** isBEKaml joined
[17:56] <arnsholt> I'm using nqp::hash (the grammar is NQP anyways, so no containers), the old O() returned a containerless hash as well, so not sure if that's it

[17:58] *** guru joined
[17:59] *** guru is now known as Guest36964

[17:59] *** Guest36964 is now known as ajr_

[18:00] <[Coke]> (tristar merging) have to get the daily runs for that doing all three now.

[18:00] <[Coke]> though I get the feeling the release manager is not looking at the failing tests until day of.

[18:00] *** kurahaupo left
[18:02] <jnthn> arnsholt: What backend did it work on?

[18:02] <arnsholt> I did my testing on JVM

[18:02] <jnthn> Hm, I thought that had same semantics as Moar...

[18:02] <arnsholt> Yeah

[18:03] <moritz> [Coke]: depends on the release manager :-)

[18:04] *** spider-mario joined
[18:05] <isBEKaml> [Coke]: Are we really on tristar release this month? I saw only parrot from FROGGS++... 

[18:05] <btyler> isBEKaml: next month is the target, as I understand it

[18:07] <jnthn> Well, "this month" now. It's April today :)

[18:07] <[Coke]> are there any docs in the tristar merge that explain how to build for the various backends?

[18:08] <isBEKaml> btyler: Ah, okay. 

[18:08] <[Coke]> I grepped around for jvm/moar in the top level and in the release guide, nothing stands out.

[18:08] <isBEKaml> jnthn: Sure, I'm not the one picking dates for release. :-)

[18:09] <jnthn> arnsholt: I don't see why you'd be hitting a problem. I wonder if it's a code-gen issue.

[18:09] *** census left
[18:09] <[Coke]> is the star process the same, just the build of the bundle that's different?

[18:10] <[Coke]> (and at that point, just like building for a regular build?)

[18:11] <arnsholt> jnthn: Something codegen-y with hash flattening might fit, yeah

[18:11] <isBEKaml> [Coke]: IIUC, the makefile for star build will have a single command to build all 3 backends. 

[18:12] <isBEKaml> [Coke]: So, the build process remains the same except perhaps an extra step for additional backends. Though, it's really not for me to say. :-)

[18:13] <jnthn> [Coke]: It needs doc'ing, but it takes --backends=... and should be a lot like configuring Rakudo itself.

[18:13] <arnsholt> Huh. It's broken on Parrot as well, actually

[18:14] <FROGGS> isBEKaml: we missed to release a tristar for march by an inch :o)

[18:15] <isBEKaml> FROGGS: Yeah, we don't want people to take this release less seriously now, do we? :P

[18:16] *** kaleem left
[18:17] <dalek> star: aa98b5c | coke++ | tools/star/release-guide.pod:

[18:17] <dalek> star: Fix count, add more markup

[18:17] <dalek> star: review: https://github.com/rakudo/star/commit/aa98b5c268

[18:20] <[Coke]> S17-concurrency/channel.t is still apparently hanging on the jvm.

[18:20] <[Coke]> (it's using no cpu time, but not exiting)

[18:21] <[Coke]> killing it manually so we can get a run today.

[18:21] <jnthn> [Coke]: Weird...it stopped for me after last night's NQP patch

[18:21] <FROGGS[mobile]> the msi build might become interesting 

[18:23] <[Coke]> jnthn: Perhaps it would have eventually, but the 0 cpu utilization was suspect.

[18:24] <dwarring> [Coke]: I  just submitted RT121556 

[18:24] <dwarring> looks like the same problem

[18:24] *** molaf joined
[18:24] <jnthn> [Coke]: No, there was no delay here.

[18:25] <jnthn> [Coke]: What revision is the n-j?

[18:26] * dwarring https://gist.github.com/dwarring/9920038

[18:27] <[Coke]> # HEAD detached at 08e997a

[18:27] <jnthn> [Coke]: And cf3bdf1 came after that and fixed the bug.

[18:27] <jnthn> [Coke]: So it's just an old NQP

[18:28] <[Coke]> jnthn: this is the build script: https://github.com/coke/perl6-roast-data/blob/master/bin/rakudo.jvm.sh

[18:28] <jnthn> Oh!!

[18:28] <jnthn> For some reason I thought an NQP_REVISION bump had been commat after my patch

[18:29] <jnthn> But it hasn't been.

[18:29] <[Coke]> ah, that would 'splain it.

[18:29] <jnthn> [Coke]: Doing revision bumps.

[18:29] <jnthn> Yeah, sorry 'bout that. Musta just misremembered what I saw going by in the commit log...

[18:29] <[Coke]> no worries.

[18:30] <[Coke]> I will try to manually kill the hangs for today's run, we'll get a fresh one tomorrow.

[18:30] <[Coke]> jnthn++

[18:30] <dalek> nqp: 46fab27 | jnthn++ | tools/build/MOAR_REVISION:

[18:30] <dalek> nqp: Get a Moar with various thread/locking fixes.

[18:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/46fab27c78

[18:31] <dalek> rakudo/nom: 358582e | jnthn++ | tools/build/NQP_REVISION:

[18:31] <dalek> rakudo/nom: Bump to latest NQP.

[18:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/358582e32e

[18:33] <[Coke]> (Ծ‸ Ծ) . o O (will this $dayjob project ever end?!)

[18:38] *** Alula left
[18:38] *** rurban1 left
[18:38] *** Alula joined
[18:40] <jnthn> need a walk; bbiab

[18:41] *** rjbs joined
[18:45] *** hiatobr left
[18:48] *** lizmat joined
[18:50] *** isBEKaml left
[18:54] *** LLamalessRider joined
[18:55] <LLamalessRider> Good job to all for the 2014.03 release! And thanks for - the "@ for @$" and "% for %$" shortcuts.

[18:55] <LLamalessRider> also, I apologize if this joke has already been made, but thanks for not making $ a shortcut for $$ :)

[18:59] <FROGGS> *g*

[19:00] <FROGGS> no, there was no joke until yet

[19:00] <FROGGS> we usually do not tend to have humour :o)

[19:01] <moritz> too many Germans around here :-)

[19:07] *** darutoko left
[19:10] *** [Sno] left
[19:11] *** [Sno] joined
[19:16] <jnthn> The joke warfare left a bitter taste... :P

[19:20] *** SamuraiJack__ left
[19:20] *** virtualsue joined
[19:21] * [Coke] wants to make a pun on spec using Kummerspeck, but feels it's a bit of a stretch.

[19:24] <dwarring> jnthn, [Coke] my jvm hang problem has gone away after rakudo rebuild - thanks

[19:25] <jnthn> yays

[19:29] <lizmat> good *, #perl6!

[19:29] <lizmat> looking at: until $server_ready_flag_fn.IO ~~ :e { sleep(0.1) }

[19:30] <lizmat> I wonder whether it makes sense to create a dedicated Promise out of that

[19:30] <lizmat> something like "Promise.e($path)"

[19:31] <jnthn> lizmat: I think watching file system events is more naturally a supply...

[19:32] <lizmat> ah, good point, a promise working on a supply ?

[19:32] <jnthn> And then we make a way to turn any supply into a promise that completes when the supply gives its first result, for example.

[19:34] <lizmat> but the supply would be giving *all* file system events, no?

[19:34] *** rindolf joined
[19:34] <lizmat> and the promise would be kept as soon as the "created file with this path" comes down the supply ?

[19:35] <lizmat> feels more like a tap on a supply, turned promise

[19:35] <jnthn> Right, when you ask for such a promise, it taps the supply, keeps the promise with the first value that arrives, and then untaps.

[19:35] <lizmat> gotcha

[19:35] <jnthn> That's pretty much what Rx's .FirstAsync() does, fwiw. :)

[19:36] <lizmat> except we don't have a supply for file system events (yet)

[19:36] <jnthn> No, but I kinda want it for my reactive talks that are coming up.

[19:36] <jnthn> So I'll probably implement it in the nearish future.

[19:36] <lizmat> ah...  presentation driven development!

[19:36] <jnthn> ;)

[19:36] <lizmat> the season is starting again  :-)

[19:37] <jnthn> Yeah. 3 confs coming up for me! \o/

[19:37] <jnthn> Hm, I should make travel plans for 'em soon too I think.

[19:38] * lizmat wonders whether a reduced Perl 6 (like brian d foy's R) would just be called '6'

[19:39] *** rurban1 joined
[19:39] <lizmat> jnthn: and in the case of Promise.e, check first if the file already exists of course, and don't bother tapping if it is there already

[19:39] <lizmat> hmmm... no, that would probably be a race condition

[19:39] <jnthn> yeah :)

[19:39] <jnthn> .e usually is... :)

[19:40] <lizmat> first tap, then check if it exists, then untap if it already exists

[19:41] <lizmat> I also just realized that the sleep sort test in t/spec/S17-concurrency/promise.t

[19:41] <lizmat> basically also contains a race condition on the @a.push

[19:42] <lizmat> it will most likely never happen, but it could

[19:43] <lizmat> so I was thinking whether to create something like an "is shared" attribute

[19:43] <lizmat> which would turn the array basically into an endpoint of a tap

[19:43] *** rurban1 left
[19:44] <lizmat> and all accesses to it as mores into the supply

[19:44] <lizmat> all write accesses that is

[19:45] <jnthn> Just all.

[19:45] <jnthn> I'm not sure I like an "as shared", but it occurs to me that if we provide a monitor module and an actor module then:

[19:46] <vendethiel> lizmat: isn't it called "nqp" ;)? 

[19:46] <jnthn> actor Wrapper { has $.wrapped handles *; }; sub actorify($wrapped) { Wrapper.new(:$wrapped) }

[19:47] <moritz> lizmat: or just write the results to a Channel, not to an Array

[19:48] <lizmat> moritz: perhaps

[19:48] <lizmat> but that would probably require more typing and would thus be more work that just using @a.push

[19:49] <moritz> not that much more work

[19:49] <lizmat> so people would tend to do the intrinsically wrong thing in this context

[19:49] <lizmat> it also would need a context change in the minds of people

[19:49] <moritz> my $c = Channel.new; ... $c.send($_); ... $c.close; is ~$c.list, '0 1 2 3 '...

[19:49] <lizmat> furthermore, simple examples for parallelising code

[19:50] <lizmat> such as: for @foo { ... } turning into: await do for @foo { start { ... } }

[19:50] *** spider-mario left
[19:50] <lizmat> would not generally work if they access variables outside of the scope, like the sleep sort test

[19:51] <raiph> jnthn (& others thinking about concurrency in P6): i'm curious what you know about http://ptolemy.eecs.berkeley.edu/ or more specifically your reaction to the abstract at http://ptolemy.eecs.berkeley.edu/publications/papers/07/unifying/index.htm

[19:51] <moritz> lizmat: I can see the appeal to that, but I also think there's a danger

[19:52] <moritz> lizmat: a shared array would have to be protected by locks (afaict), and that implies a risk of deadlocks

[19:52] <moritz> so we lose on the composability front

[19:52] <jnthn> Right. There's no free lunch here.

[19:52] <lizmat> not if the array would in fact be an endpoint of a channel or a supply?

[19:53] <moritz> and tracking down the deadlock if everything looks like a standard, non-concurrent variable might be much trickier

[19:54] <moritz> lizmat: I can't imagine how that would work; might be just my limited imagination though

[19:55] <lizmat> all accesses (read/write) to that array, would go through a channel/supply setup

[19:55] <jnthn> s/might/almost certainly will/. One of the things I always find myself at pains to explain when I teach stuff like the concurrent collections, say, in .Net, is that *yes* they are thread safe collection types, but you can't just program with them like you'd program with non-threadsafe ones but just taking away locks.

[19:55] <lizmat> with commands such as GET / STORE and the like going down the channel/supply

[19:56] <lizmat> so basically make sure all accesses are done in order

[19:56] <jnthn> my @results = await (1..10).pick(*).map: start { sleep $_; $_ }; # Channel free, thread safe, sleep sort

[19:56] <jnthn> raiph: I'll have to read that in some detail to have a good answer. Will put it on my to read list, if you think it's worth it :)

[19:57] <jnthn> m: say await (1..6).pick(*).map: start { sleep $_ * 0.5; $_ };

[19:57] <camelia> rakudo-moar e9b185: OUTPUT«(signal ABRT)No such method 'count' for invocant of type 'Promise'␤  in method reify at src/gen/m-CORE.setting:7521␤  in method reify at src/gen/m-CORE.setting:7432␤  in method reify at src/gen/m-CORE.setting:7432␤  in method gimme at src/gen/m-COR…»

[19:57] <jnthn> oops

[19:57] <jnthn> m: say await (1..6).pick(*).map: { start { sleep $_ * 0.5; $_ } };

[19:57] <camelia> rakudo-moar 358582: OUTPUT«(signal ABRT)2 1 5 4 3 6␤»

[19:57] <jnthn> oh lol

[19:58] <jnthn> duh :)

[19:58] * jnthn stops trying to do 5 things at once :)

[20:00] * moritz wonders if   say race (1..6).pick(*).map: { sleep $_; $_ } ;   will eventually work

[20:00] *** mmachenry joined
[20:01] <jnthn> It may but it depends on granularity

[20:01] *** rurban1 joined
[20:01] <vendethiel> moritz: isn't that what's it doing right now ?

[20:01] <vendethiel> "just compute and return it whatever is the order"?

[20:02] * jnthn notes that a Promise.race($p1, $p2, ...) would be useful

[20:02] *** [Sno] left
[20:02] <vendethiel> Allow promises to be passed to race ? `race ($p1, $p2)` ? Looks more composable

[20:03] <jnthn> race is a modifier on a lazy list, like eager/hyper/lazy

[20:04] <moritz> +1 to Promise.race

[20:04] <vendethiel> then +1 to Promise.race too :-)

[20:04] <lizmat> maybe "await" should return the promises in the order they were kept ?

[20:04] <moritz> lizmat: I think that's not usually a good idea

[20:04] <vendethiel> lizmat: that's what it looks to me, compared to hyper/race (?)

[20:05] <jnthn> lizmat: I've had other use cases where I cared for the order.

[20:05] *** rurban1 left
[20:06] <lizmat> mayby await would return in order of given promises, and queue(@p) would return in order of kept ?

[20:06] <timotimo> r: class Foo { has $.name }; my $f = Foo.new(name => "hey there how are you"); say $f ~~ name => /hey/;

[20:06] * vendethiel wonders if actually having `eager (1..6).pick(*).map: { start { sleep $_ * 0.5; $_ } }` would look better

[20:06] *** pecastro left
[20:06] <camelia> rakudo-moar 358582: OUTPUT«Cannot call 'match'; none of these signatures match:␤:(Cool:D: Any $target, *%adverbs)␤  in method match at src/gen/m-CORE.setting:3568␤  in method Bool at src/gen/m-CORE.setting:12874␤  in method Bool at src/gen/m-CORE.setting:829␤  in method AC…»

[20:06] <camelia> ..rakudo-jvm 358582: OUTPUT«(timeout)»

[20:06] <camelia> ..rakudo-parrot 358582: OUTPUT«Cannot call 'match'; none of these signatures match:␤:(Cool:D: Any $target, *%adverbs)␤  in any  at gen/parrot/BOOTSTRAP.nqp:1219␤  in any  at gen/parrot/BOOTSTRAP.nqp:1210␤  in method match at gen/parrot/CORE.setting:3572␤  in method Bool at g…»

[20:06] <timotimo> oh, that's not how that works :(

[20:06] <vendethiel> m: say await (1..6).map: { start { sleep $_ * 0.5; $_ } };

[20:06] <camelia> rakudo-moar 358582: OUTPUT«(signal ABRT)1 2 3 4 5 6␤»

[20:07] <vendethiel> m: say hyper (1..6).map: { start { sleep $_ * 0.5; $_ } };

[20:07] <camelia> rakudo-moar 358582: OUTPUT«Cannot call 'hyper'; none of these signatures match:␤:(Any \op, Any \a, Any \b, Any :dwim-left($dwim-left), Any :dwim-right($dwim-right))␤:(Any \op, Any \obj)␤:(Any \op, Associative \a, Associative \b, Any :dwim-left($dwim-left), Any :dwim-right($dwi…»

[20:07] <moritz> vendethiel: not much fun in sleep-sorting an already sorted list

[20:07] <moritz> hyper is NYI

[20:08] <vendethiel> moritz: I'm just wondering if `await` is actually on the same level as `hyper` and `race` ?

[20:08] <vendethiel> S03 probably

[20:08] <moritz> vendethiel: no

[20:08] <moritz> vendethiel: await is a concurrency primitive; lazy/eager/hyper/race control laziness/eagerness of a list

[20:09] <vendethiel> moritz: doesn't hyper and race imply concurrency, though ?

[20:09] <moritz> vendethiel: potential concurrency

[20:09] <jnthn> Potential, and they're for data parallel rather than task parallel operations.

[20:10] <vendethiel> so, the compiler is free to rewrite `say race (1..6).map: { $_ * 5 }` to `say await (1..6).pick(*).map: { start { $_ * 5 } }` ?

[20:10] *** FROGGS[mobile] left
[20:10] <jnthn> vendethiel: No, it'll be implemented differently.

[20:10] <vendethiel> (not that it's useful, but I mean that it has the correct meaning)

[20:10] <vendethiel> jnthn: Yeah, not *implemented like that*, just "follows semantics"

[20:11] <jnthn> vendethiel: With "await" the implementation is allowed to use the current thread you're on to do other stuff while you wait, and resume the code on another one later...

[20:11] *** [Sno] joined
[20:11] *** molaf left
[20:11] <lue> r: say "abcde" X <f g>

[20:11] <camelia> rakudo-parrot 358582, rakudo-jvm 358582, rakudo-moar 358582: OUTPUT«abcde f abcde g␤»

[20:11] <vendethiel> jnthn: not sure how that answers my question ?

[20:11] <lue> r: say "abcde".comb X <f g>

[20:11] *** kbaker_ left
[20:11] <camelia> rakudo-parrot 358582, rakudo-jvm 358582, rakudo-moar 358582: OUTPUT«a f a g b f b g c f c g d f d g e f e g␤»

[20:11] <lue> r: say "abcde".comb X "fg".comb

[20:12] <camelia> rakudo-parrot 358582, rakudo-jvm 358582: OUTPUT«a f a g b f b g c f c g d f d g e f e g␤»

[20:12] <camelia> ..rakudo-moar 358582: OUTPUT«␤»

[20:12] <lue> I think I found a bug :)

[20:12] <vendethiel> it's nice that the main thread can be used, but why is my 2nd version (beside being stupid) not following semantics?

[20:12] <FROGGS> lue: go on and fix it :o)

[20:13] <lue> I have no clue what's going wrong though

[20:13] <jnthn> vendethiel: The compiler isn't free to re-write it, I don't think

[20:13] <jnthn> vendethiel: But I think they'd be equivalent-ish

[20:13] <vendethiel> jnthn: all I'm asking :). Thanks!

[20:14] <FROGGS> r: say "fg".comb

[20:14] <camelia> rakudo-parrot 358582, rakudo-jvm 358582, rakudo-moar 358582: OUTPUT«f g␤»

[20:14] <vendethiel> (WRT data parallelism VS task parallelism, in the case where you take a range and map over it, isn't it data parallelism ?)

[20:16] <jnthn> vendethiel: Yeah, which is why then using start is odd :)

[20:16] <jnthn> Well, it's not odd in so far as hyper/race are NYI, but... :)

[20:16] <vendethiel> jnthn: oh, just realized you meant you'd use hyper/race instead of await/start here.

[20:16] <jnthn> yes :)

[20:17] <vendethiel> jnthn++ # being patient with me

[20:22] *** mmachenry left
[20:25] *** mmachenry joined
[20:32] <timotimo> can i combine lines() working without an argument and sub MAIN(some stuff here)?

[20:33] *** mullinator left
[20:33] <timotimo> ah it's just a dynamic variable i can do whatever i want with

[20:35] *** effbiai left
[20:41] *** effbiai joined
[20:43] <dalek> roast: b069ef0 | (David Warring [email@hidden.address] | integration/advent2013-day14.t:

[20:43] <dalek> roast: adding 2013 advent day 14

[20:43] <dalek> roast: review: https://github.com/perl6/roast/commit/b069ef04ac

[20:44] *** rurban1 joined
[20:46] <dwarring> jnthn: I've changed one thing in class INIFileActions... 

[20:47] <dwarring> for $<entry> -> $e { %entries{$e<key>} = ~$e<value>  } => for @<entry> -> $e { ... }

[20:47] <dwarring> was giving error:  postcircumfix:<{ }> not defined for type Array

[20:48] *** kbaker_ joined
[20:56] *** xenoterracide left
[20:58] *** kaare_ left
[20:58] *** zby_home left
[20:58] *** pecastro joined
[20:58] <lizmat> jnthn: am I correct in assuming tha: winner * { done @promises { ... } }

[20:58] <lizmat> is NYI ?

[20:59] *** benabik left
[21:00] <jnthn> lizmat: I don't know off hand, but it woudln't surprise me.

[21:03] <lizmat> m: my @p = (^10).map: { start { $_ } }; winner * { done @p { say $:v.result } }

[21:03] <camelia> rakudo-moar 358582: OUTPUT«(signal ABRT)Type check failed in assignment to '&block'; expected 'Callable' but got 'Promise'␤  in method STORE at src/gen/m-CORE.setting:7092␤  in block  at src/gen/m-CORE.setting:18481␤  in sub WINNER at src/gen/m-CORE.setting:18476␤  in block …»

[21:04] <lizmat> something wrong in Actions setting up the parameters to WINNER ?

[21:07] *** simcop2387 joined
[21:08] *** mmachenry left
[21:12] *** _sri left
[21:13] *** _sri joined
[21:21] *** xenoterracide joined
[21:22] <lizmat> jnthn: ^^^

[21:23] <lizmat> perhaps not setting "wild_more" ?

[21:25] <jnthn> lizmat: Hm, good guess.

[21:25] <jnthn> lizmat: I'm not too familiar with the actions code there.

[21:25] <lizmat> ok, I'll delve some more into it

[21:26] <lizmat> I'll get back if I have more questions

[21:26] <jnthn> k

[21:29] *** mmachenry joined
[21:32] <lizmat> setting wild_more manually to 1, doesn't fix the problem

[21:32] *** mmachenry left
[21:32] <lizmat> more complicated than I thought and therefore not the right time to do this

[21:33] <lizmat> so instead, I'll sleep on it&

[21:33] <jnthn> lizmat++ # investigating

[21:33] <jnthn> 'night

[21:35] *** mmachenry joined
[21:36] *** broody joined
[21:36] *** broody left
[21:39] *** bluescreen100 left
[21:40] *** LLamalessRider left
[21:43] *** bluescreen100 joined
[21:43] *** iolympian joined
[21:50] *** d4l3k_ joined
[21:50] *** arnsholt left
[21:50] *** iolympian left
[21:51] *** ggoebel11119 joined
[21:53] *** masak_ joined
[21:54] *** dayangkun left
[21:54] *** dalek left
[21:54] *** masak left
[21:54] *** Alula left
[21:54] *** kbaker_ left
[21:54] *** Alina-malina left
[21:54] *** ggoebel11118 left
[21:55] *** dayangkun joined
[21:55] *** Alina-malina joined
[21:55] *** kbaker_ joined
[21:55] *** d4l3k_ is now known as dalek

[21:57] *** mmachenry left
[21:58] *** bluescreen100 left
[22:01] *** kbaker_ left
[22:01] <dalek> perl6-roast-data: 74de701 | coke++ | / (6 files):

[22:01] <dalek> perl6-roast-data: today (automated commit)

[22:01] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/74de7010b2

[22:03] *** lustlife left
[22:04] *** raiph left
[22:06] *** effbiai left
[22:07] *** virtualsue left
[22:07] *** effbiai joined
[22:07] *** mmachenry joined
[22:12] *** ajr_ left
[22:13] *** baest joined
[22:14] *** iolympian1 joined
[22:15] *** iolympian1 left
[22:19] *** treehug8_ left
[22:21] *** treehug88 joined
[22:23] *** treehug88 left
[22:26] *** colomon joined
[22:37] <dalek> nqp/multispec: 4d20d38 | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[22:37] <dalek> nqp/multispec: Map setmultispec op for MoarVM.

[22:37] <dalek> nqp/multispec: review: https://github.com/perl6/nqp/commit/4d20d381f1

[22:39] *** mmachenry left
[22:41] *** rurban1 left
[22:50] <dalek> rakudo/multispec: baef318 | jnthn++ | src/Perl6/Metamodel/ (2 files):

[22:50] <dalek> rakudo/multispec: Start using setmultispec on MoarVM.

[22:50] <dalek> rakudo/multispec: review: https://github.com/rakudo/rakudo/commit/baef3180a3

[22:50] <dalek> rakudo/multispec: 5bdac8b | jnthn++ | src/Perl6/Actions.nqp:

[22:50] <dalek> rakudo/multispec: Auto-gen'd protos don't need special vars.

[22:50] <dalek> rakudo/multispec: 

[22:50] <dalek> rakudo/multispec: We will never look at them or use them, so don't waste time/space on

[22:50] <dalek> rakudo/multispec: having them.

[22:50] <dalek> rakudo/multispec: review: https://github.com/rakudo/rakudo/commit/5bdac8b9af

[22:50] <dalek> rakudo/multispec: 60d56fa | jnthn++ | src/core/Regex.pm:

[22:50] <dalek> rakudo/multispec: Partial fix to regressions from setmultispec work.

[22:50] <dalek> rakudo/multispec: 

[22:50] <dalek> rakudo/multispec: We need to make onlystar protos consistently not show up in caller

[22:50] <dalek> rakudo/multispec: introspection to make this reliable. We need that for not getting

[23:02] *** dmol left
[23:04] *** BenGoldberg joined
[23:06] *** denisboyun left
[23:07] *** hoverboard left
[23:18] *** rurban1 joined
[23:26] *** hoverboard joined
[23:33] *** jnap left
[23:33] *** btyler left
[23:46] *** Alula joined
[23:48] *** rindolf left
