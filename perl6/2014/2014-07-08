[00:01] *** Adriaaaan left
[00:07] <raiph> are atroxaper and Mouq the same person or at least coordinating their Pod::To::* efforts?

[00:08] *** carlin left
[00:12] *** _slade joined
[00:16] *** hoverboard joined
[00:24] *** myps joined
[00:35] <[Coke]> jnthn++ lizmat++

[00:45] *** BenGoldberg joined
[00:52] *** hoverboard left
[00:53] *** hoverboard joined
[00:54] <[Coke]> r: join ', ', [\//] Any,    0, 1

[00:54] <camelia> rakudo-parrot b014db: OUTPUT«use of uninitialized value of type Any in string context  in block  at /tmp/tmpfile:1␤␤»

[00:54] <camelia> ..rakudo-{jvm,moar} b014db: OUTPUT«use of uninitialized value of type Any in string context␤»

[00:57] <timotimo> [Coke]: did you mean q[\//]?

[00:57] <timotimo> oh, wait, what?

[00:57] <timotimo> that's a triangle reduce %)

[00:57] * timotimo looks at the clock

[00:57] <timotimo> ayup. brain's already asleep-o-clock.

[00:57] <[Coke]> look for "orelse" in the test suite.

[00:59] <timotimo> http://down.me/  >:(

[01:00] *** Akagi201 joined
[01:01] <[Coke]> m: "\x[c]" ~~ m/^ <[\C[FORM FEED (FF)]]>/

[01:01] <camelia> rakudo-moar b014db: ( no output )

[01:01] <[Coke]> m: say "\x[c]" ~~ m/^ <[\C[FORM FEED (FF)]]>/

[01:01] <camelia> rakudo-moar b014db: OUTPUT«｢｣␤␤»

[01:01] *** raiph left
[01:04] <timotimo> m: say '\x[c]' ~~ m/^ \\ <[x]> '[' ~ ']' 'c' $/

[01:04] <camelia> rakudo-moar b014db: OUTPUT«｢\x[c]｣␤␤»

[01:05] *** Akagi201 left
[01:16] <psch> [Coke]: i guess those two tests in reduce.t want something like &make-string in S32-array/delete.t

[01:17] <psch> because (Any) in lists is gone, isn't it

[01:18] *** dayangkun joined
[01:22] *** _slade left
[01:25] <timotimo> gone?

[01:25] <timotimo> no, i don't think so

[01:25] <timotimo> there's still a difference

[01:25] <timotimo> m: my @a = 1, 2, 3; @a[1]:delete; say @a.perl; say @a[1]:exists; say @a[3]; say @a[3]:exists;

[01:25] <camelia> rakudo-moar b014db: OUTPUT«Array.new(1, Any, 3)␤False␤(Any)␤False␤»

[01:26] <timotimo> m: my @a = 1, 2, 3; @a[1] = Any; say @a.perl; say @a[1]:exists; say @a[3]; say @a[3]:exists;

[01:26] <camelia> rakudo-moar b014db: OUTPUT«Array.new(1, Any, 3)␤True␤(Any)␤False␤»

[01:26] <psch> m: my @a = 1, Any, 3; @a.list.say

[01:26] <camelia> rakudo-moar b014db: OUTPUT«1 (Any) 3␤»

[01:26] <psch> right

[01:26] <psch> so does join do the wrong thing?

[01:26] *** _slade joined
[01:27] <timotimo> i didn't even look what you're talking about %)

[01:27] <psch> still the test [Coke] talked about

[01:27] <timotimo> r: join ', ', [\//] Any,    0, 1

[01:27] <camelia> rakudo-parrot b014db: OUTPUT«use of uninitialized value of type Any in string context  in block  at /tmp/tmpfile:1␤␤»

[01:27] <camelia> ..rakudo-{jvm,moar} b014db: OUTPUT«use of uninitialized value of type Any in string context␤»

[01:27] <timotimo> that seems correct

[01:27] <psch> the tests are skipped with "implemented orelse"

[01:28] <timotimo> oh, i think i did something to orelse recently .. didn't i?

[01:28] <psch> err, todo

[01:28] <psch> no skip :)

[01:28] <timotimo> or did i end up not doing anything?

[01:30] <psch> i wouldn't know

[01:30] <psch> m: say [\//] Any, 0, 1

[01:30] <camelia> rakudo-moar b014db: OUTPUT«(Any) 0 0␤»

[01:31] <timotimo> i've watched too many speedruns recently because now i can't read "skip" without ... thinking of that

[01:31] *** Vlavv left
[01:32] <psch> but SGDQ is over for like two weeks already...

[01:32] <timotimo> yes

[01:32] <timotimo> i've watched a bunch live

[01:32] <timotimo> and after that i've been watching bunches of vods

[01:32] <psch> i've been rather selective about what i watch

[01:32] <timotimo> got recommendations?

[01:34] <psch> not really, actually

[01:34] <timotimo> was all of it bad? ;)

[01:34] <psch> i mostly watch the old sidescrollers

[01:34] <psch> but those runs don't really change that much anymore

[01:34] <timotimo> did you see the super metroid xray door glitch?

[01:35] <psch> i don't even remember, actually

[01:35] <timotimo> would you mind if i explained how the trick works?

[01:35] <psch> no

[01:36] <timotimo> wait, that means i can explain it, right? %)

[01:36] <timotimo> damn english :D

[01:36] <psch> i used to explain random people how q3 overbounces work; i understand

[01:36] <psch> *to random people

[01:36] <psch> so, yeah, you can explain 

[01:36] <psch> :9

[01:36] <timotimo> i was expecting you'd prefer to see it first and then get the explanation

[01:36] <timotimo> i didn't expect you'd have a hard time understanding

[01:36] <psch> i'm not really passionate about it

[01:36] <timotimo> aaw

[01:37] <timotimo> so the basic thing that happens is you get out of bounds, fall down a whole bunch of screens and the game keeps interpreting its RAM contents as the level

[01:37] <timotimo> so what ends up happening is you explore the out-of-bounds space and manipulate one specific piece of memory

[01:38] <timotimo> and then ... i forgot how exactly it works, and i also forgot how the xray item is involved ... you end up in the planet self-destruct sequence at the very end

[01:38] <timotimo> except there is no timer

[01:38] <psch> :D

[01:39] <timotimo> someone edited it into a very short video and uploaded it to youtube

[01:39] <psch> "right, so it starts like this... and then there's a few steps, i don't know what they are... but anyway then this thing happens"

[01:39] <timotimo> it'll do a massively better job than me %)

[01:39] <psch> yeah, i think i'd have to watch it :)

[01:39] <timotimo> https://www.youtube.com/watch?v=-GAymJt6KPM - 6 minutes of video to see it

[01:40] <timotimo> out-of-boundsness starts at about 30 seconds

[01:40] *** xenoterracide__ joined
[01:42] *** atroxaper joined
[01:43] <timotimo> oh damn, i think the actual explanation of why xray is so broken is *before* the start of that video?!

[01:43] <timotimo> no, it comes afterwards it seems

[01:43] <Mouq> jnthn++ lizmat++

[01:43] <Mouq> sorry for unexpectedly extended afk

[01:44] *** jack_rabbit joined
[01:44] *** Vlavv joined
[01:44] *** FROGGS_ joined
[01:45] <dalek> roast: 0f90ebd | coke++ | integration/advent2013-day15.t:

[01:45] <dalek> roast: skip all vms implicitly instead of explicitly

[01:45] <dalek> roast: review: https://github.com/perl6/roast/commit/0f90ebd204

[01:45] <dalek> roast: 4bf731f | coke++ | integration/advent2013-day19.t:

[01:45] <dalek> roast: unfudge-passes on moar, marked as #conc

[01:45] <dalek> roast: review: https://github.com/perl6/roast/commit/4bf731febd

[01:45] <dalek> roast: d479879 | coke++ | S05-mass/named-chars.t:

[01:45] <dalek> roast: Fix skip count

[01:45] <dalek> roast: review: https://github.com/perl6/roast/commit/d479879d5a

[01:45] <dalek> roast: ba56bb9 | coke++ | S05-mass/named-chars.t:

[01:45] <dalek> roast: Add RT reference #

[01:45] <dalek> roast: review: https://github.com/perl6/roast/commit/ba56bb9167

[01:45] <dalek> roast: d2f0d4f | coke++ | S05-mass/named-chars.t:

[01:45] <dalek> roast: skip -> todo where possible.

[01:45] <dalek> roast: review: https://github.com/perl6/roast/commit/d2f0d4f8f8

[01:46] *** klapperl_ joined
[01:47] *** atroxaper left
[01:47] <psch> timotimo: definitely interesting glitch

[01:47] <timotimo> aye

[01:47] <psch> the "the lost vikings" run was quite interesting too iirc, although not that glitchy

[01:47] <timotimo> that was the one where the runner held both controllers at the same time, back-to-back?

[01:48] <psch> i think there was more than one run with 1 player 2 controllers, but yeah

[01:48] <psch> (the other was chip & dale, rescue rangers, says the schedule)

[01:48] *** FROGGS left
[01:48] <timotimo> it's kinda sad that games nowadays don't do such dirty things with their memory any more that you can't just walk outside the screen and start overwriting game memory

[01:50] <timotimo> i was kind of disappointed at the octodad: dadliest catch race: misskaddykins got one of those very typical "this has never happened before" moments that forced her to fall back about half a minute or so :(

[01:50] *** klapperl left
[01:50] <Mouq> raiph: We're not quite the same person, no :)

[01:51] *** _slade left
[01:51] <Mouq> raiph: I haven't actually talked to him, but what he wants to do is one of the reasons I want to try to make Pod::Walker work

[01:52] <psch> timotimo: i don't remember if i watched that, but "this has never happened before" did kind of come up a lot in the things i did watch; marathon as usual, i guess

[01:52] <timotimo> yes :)

[01:57] <psch> oh, also because (even horrendously off-topic) clear communication is important: i didn't mean to imply that i wouldn't understand the xray glitch, just that i understand the feeling of wanting to share cools one, hence my referal to q3 overbounces

[01:57] * psch .oO( ...but that's probably enough. )

[01:58] *** chenryn joined
[01:58] <timotimo> ah

[01:58] <timotimo> yes, clear communication *is* important. thank you!

[01:58] <timotimo> what does overbouncing relate to?

[01:59] <timotimo> i've seen videos of people "parkouring" with rocketjumps and the plasma gun and such

[01:59] <psch> basically not accounting for the length of the collision trace vector when trying to determine if the player model is still falling

[02:00] <timotimo> i don't think i've seen that yet

[02:01] *** Akagi201 joined
[02:02] <psch> http://www.youtube.com/watch?v=5DZIkZBTh94

[02:03] <psch> if i remember the code correctly it comes down to the engine assuming that if the trace starts above a surface and ends inside one, it assumes the previous extrapolation already determined that the player must have landed

[02:04] <psch> which means the player is assumed to not have a z component in his impulse, which messes up denormalization

[02:04] <timotimo> oooh

[02:04] <timotimo> "clever" optimization :)

[02:05] <timotimo> it's quite nice that the movement vector ends up being "healthy"

[02:05] *** hoverboard left
[02:05] <psch> yeah, there's tons of entertaining videos around

[02:06] <timotimo> i'm worried with the growing amount of games being developed using "big name" engines like unreal, source, unity ... they're not going to have as many "fun" bugs in (for example) their physich engines

[02:06] *** potatogim joined
[02:06] <timotimo> though physics engines can still get really glitchy even with "big name" engines given sufficiently pessimal collision geometries

[02:06] *** Akagi201 left
[02:07] *** huf joined
[02:07] <timotimo> source engine 1 had this funny thing where you could run + jump backwards and become pretty darn fast :D

[02:07] <timotimo> oh, it's already very late, i ought to go to bed

[02:07] <timotimo> gnite!

[02:08] *** potatogim is now known as PotatoGim

[02:08] <psch> heh, good night :)

[02:08] <timotimo> oh, btw: #perl6-gaming :)

[02:09] <gtodd> the reactive programming talk by jnthn at NL perl workshop made me think of applications of perl6 in games video computer vision ... "grepping" inside streams of  data 'n such

[02:10] <timotimo> we'll have to see if moar can get sequences of supplies well optimized with - perhaps! - inlining and such

[02:15] *** Akagi201 joined
[02:17] *** Akagi201 left
[02:18] *** noganex_ left
[02:24] *** myps left
[02:25] *** cooper_ left
[02:27] *** Tene left
[02:27] *** Tene joined
[02:32] *** _slade joined
[02:33] *** takesako left
[02:36] *** cooper_ joined
[02:45] *** jack_rabbit left
[02:46] *** BenGoldberg left
[02:48] *** takesako joined
[03:00] *** jnap1 left
[03:06] *** noganex joined
[03:08] *** shbng joined
[03:26] *** hoverboard joined
[03:31] *** jack_rabbit joined
[03:33] <[Sno]> FROGGS_, lizmat - HL before you talk then I can disturb better ;)

[03:34] <[Sno]> business hours: 7am-5pm :)

[03:38] *** hoverboard left
[03:42] *** synthkeys2 joined
[03:48] *** xenoterracide__ left
[03:50] *** SevenWolf left
[03:53] *** [Sno] left
[04:00] *** lue left
[04:01] *** gfldex joined
[04:03] *** kaare_ joined
[04:07] *** lue joined
[04:10] <shbng> Hey, could anyone give a guesstimate as to when a full (meets current spec and passes spec-test), unoptimized, implementation of perl6 might be ready? (Hoping within the year but I don't know if that's realistic, We seem really close)

[04:11] <perigrin> there are a number of assumptions in that that are common but full of fallacies

[04:11] <perigrin> the biggest being that the "spec" is somehow static.

[04:13] <perigrin> shbng: http://perl6.org/compilers/features probably is the best answer to your question

[04:14] <perigrin> most of the bits there that are red are bits where the spec itself is still somewhat fluid (afaict)

[04:16] *** sftp left
[04:19] *** sftp joined
[04:19] *** rindolf joined
[04:19] *** anaeem1_ joined
[04:31] <shbng> Hey, could anyone give a guesstimate as to when a full (meets current spec and passes spec-test), unoptimized, implementation of perl6 might be ready? (Hoping within the year but I don't know if that's realistic, We seem really close)

[04:31] <shbng> oops

[04:31] <shbng> I realize the spec is rather fluid, actualy that is one of my biggest reasons for confusion. I have tried using perl6 again last week (after a 2-4 year break) and was happy to see it mostly usable with moarvm, but I am still having problems(mostly with threading) and am looking for a good time to retry. (so I guess, when do you think threads will be better implemented at least)

[04:35] <perigrin> that I can't really say. perhaps leaving examples of the kinds of issues you're specifically having in a place (blog post maybe?) where the people working on it can look and provide feedback would help?

[04:36] <perigrin> I know that jnthn recently (a few months ago) gave http://perltv.org/v/reactive-programming-in-perl-6

[04:44] *** atroxaper joined
[04:46] *** kaare_ left
[04:48] *** atroxaper left
[04:52] *** rurban2 left
[05:00] *** _slade left
[05:01] *** shbng left
[05:03] *** kaleem joined
[05:05] *** rindolf left
[05:06] *** rindolf joined
[05:10] *** kaare_ joined
[05:10] *** rindolf left
[05:16] *** [Sno] joined
[05:23] *** treehug88 joined
[05:31] *** kurahaupo left
[05:37] *** dayangkun left
[05:38] *** denis_boyun joined
[05:39] *** treehug88 left
[05:49] *** dayangkun joined
[05:57] *** dayangkun_ joined
[05:58] *** dayangkun left
[06:13] <sergot> o/

[06:16] *** denis_boyun left
[06:18] *** dayangkun_ left
[06:28] *** dayangkun joined
[06:28] *** dayangkun left
[06:29] *** dayangkun joined
[06:35] *** SevenWolf joined
[06:35] *** dayangkun left
[06:36] *** jack_rabbit left
[06:38] *** ribasushi left
[06:39] *** SevenWolf left
[06:40] *** SevenWolf joined
[06:40] *** teodozjan joined
[06:40] <FROGGS_> there's a regression in r-m*: [...]languages/perl6/lib/Math/Model.pm

[06:40] <FROGGS_> ===SORRY!===

[06:40] <FROGGS_> When pre-compiling a module, its dependencies must be pre-compiled first.

[06:41] *** ribasushi joined
[06:42] *** jack_rabbit joined
[06:48] *** dayangkun joined
[06:49] *** dayangkun left
[06:49] *** dayangkun joined
[06:51] *** jack_rabbit left
[07:01] *** pdcawley left
[07:03] *** pdcawley joined
[07:03] *** [Sno] left
[07:06] *** [Sno] joined
[07:11] *** denis_boyun_ joined
[07:17] *** FROGGS_ left
[07:19] <mathw> good morning!

[07:27] *** dmol joined
[07:30] *** FROGGS_ joined
[07:32] *** synthkeys2 left
[07:33] *** denis_boyun_ left
[07:34] <FROGGS_> that's weird:

[07:34] <FROGGS_> [...]install/languages/perl6/lib/Math/Model.pm

[07:34] <FROGGS_> ===SORRY!===

[07:34] <FROGGS_> When pre-compiling a module, its dependencies must be pre-compiled first.

[07:34] <FROGGS_> Please pre-compile /home/froggs/dev/star/work-m/rakudo-star-2014.06/install/languages/perl6/lib/SVG.pm

[07:34] <FROGGS_> but there is a SVG.moarvm in that path...

[07:34] *** dayangkun left
[07:35] <FROGGS_> lizmat: is it possible that one of your patches did that?

[07:37] *** ivanshmakov left
[07:37] *** ivanshmakov joined
[07:40] *** SamuraiJack_ joined
[07:43] <lizmat> FROGGS_: possibly

[07:43] <FROGGS_> lizmat: I'm not sure how to provide a simple test case though...

[07:43] <lizmat> my patches didn't break any spectest, maybe we need a spectest  :-)

[07:44] <FROGGS_> I guess we have not a single test that tests precompilation

[07:44] <moritz> lizmat: the problem is that precompilation isn't specced

[07:44] <moritz> well, Test.pm6 is precompiled

[07:44] <FROGGS_> moritz: good point

[07:44] <moritz> we need to start rakudo-specific tests

[07:44] <moritz> but Test.pm6 is pretty simple, in terms of precompilation

[07:45] <moritz> most importantly, it doesn't use any other precompiled modules

[07:45] <lizmat> moritz: I started making them in t/spec/S11-modules

[07:45] <lizmat> and t/spec/S22-package-format

[07:46] *** igorsutton joined
[07:48] *** dayangkun joined
[07:48] <moritz> lizmat: are those tests for packaging, or for precompilation?

[07:48] <lizmat> in the future, both actually

[07:48] <FROGGS_> lizmat: the code here assumes that the :$from is always lowercase, that's not true for NQP for example: https://github.com/rakudo/rakudo/commit/c55942ff8928e1830c20eb99ca0157606b3edf80

[07:49] <FROGGS_> that is not our problem here though

[07:49] <lizmat> indeed not, as that behaviour didn't change in that patch

[07:51] <lizmat> so you're saying it should always be :from<NQP>, or that it could also be :from<nqp> ?

[07:54] <FROGGS_> we are using NQP, and I use Perl5 in v5...

[07:55] <FROGGS_> the reason is that this field is about a language, not a compiler or so... and 'use openssl:from<c>' just looks wrong :o)

[07:56] <lizmat> ok, so do you always want "Perl5" then?  and "NQP"  

[07:56] <FROGGS_> I'm back in an hour or two...

[07:56] <lizmat> or should "perl5" and "nQp" also be allowed

[07:57] <FROGGS_> lizmat: that is how the name of the language is written

[07:57] <lizmat> ok

[07:57] <FROGGS_> Perl 6 is strict, so having case insensitive stuff feels weird

[07:59] <dalek> rakudo/nom: 18bb089 | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo/Local/File.pm:

[07:59] <dalek> rakudo/nom: Also allow :from<NQP>

[07:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/18bb089266

[07:59] <dalek> rakudo/nom: 6fab386 | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo/Local/File.pm:

[07:59] <dalek> rakudo/nom: Only allow :from<Perl5 Perl6 NQP>

[07:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6fab386820

[08:06] *** dayangkun_ joined
[08:06] <masak> morning, #perl6

[08:07] <lizmat> masak o/

[08:08] *** dayangkun left
[08:13] *** darutoko joined
[08:16] *** denis_boyun_ joined
[08:20] * masak is in a good mood today

[08:23] *** dmol left
[08:25] *** brrt joined
[08:30] * jnthn grumbles about the warm weather and being awake and stuff

[08:30] <jnthn> uh, morning :)

[08:31] *** virtualsue joined
[08:31] <nwc10> today, you're the anti-masak?

[08:32] *** isBEKaml_mobile joined
[08:33] <jnthn> I might improve with coffee :)

[08:34] *** dakkar joined
[08:38] <nwc10> warm weather, warm coffee? That's illogical

[08:38] <nwc10> You need warm *tea* :-)

[08:38] <lizmat> probably going to rain all day here  :-(

[08:47] *** spider-mario joined
[08:49] <masak> it is warm, I'll grant you that.

[08:52] <Mouq> lizmat: What about :from<JVM>?

[08:52] <Mouq> or <Java> or whatever it is?

[08:53] <lizmat> once we support that, we will add it  :-)

[08:53] <lizmat> do we support that already then?

[08:53] <brrt> morning jnthn :-)

[08:54] <brrt> it's quite nice here, just 17 degrees :-)

[08:57] <jnthn> o/ brrt

[08:57] <jnthn> lizmat: Yes, there is some basic JVM interop support using :from

[08:58] <masak> LiveScript looks crazy, but possibly in a good way.

[08:58] <masak> or, let's say, LiveScript looks like what CoffeeScript *could* have been, if it were ambitious/imaginative enough.

[08:58] *** jack_rabbit joined
[09:05] *** isBEKaml_mobile left
[09:07] *** xinming_ joined
[09:09] <brrt> livescript is?

[09:10] * brrt can't bother to renember all javascript copmilers out by now

[09:10] *** xinming left
[09:10] <masak> brrt: one of those compile-to-JavaScript languages.

[09:10] <masak> brrt: http://livescript.net/

[09:10] <brrt> i see

[09:10] <masak> brrt: I believe au and vendethiel are both involved in it.

[09:10] <nwc10> wonderfully confusing

[09:10] <nwc10> LiveScript was the previous name for JavaScript

[09:10] <brrt> i wish them well :-)

[09:11] <masak> nwc10: oh! I thought you meant the language itself :) it sure has a lot of syntax.

[09:11] <masak> nwc10: but yeah, the naming is deliberate.

[09:11] <masak> as in, whoever chose that name knows about the naming history.

[09:11] <masak> http://livescript.net/#name

[09:12] <dalek> rakudo/nom: 3062bc1 | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo/Local/File.pm:

[09:12] <dalek> rakudo/nom: Allow for :from<JVM>

[09:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3062bc15e7

[09:13] *** dmol joined
[09:17] *** dmol left
[09:18] *** dmol joined
[09:19] *** sqirrel joined
[09:19] *** dmol left
[09:20] <dalek> doc: 240dbdd | Mouq++ | / (14 files):

[09:20] <dalek> doc: Call SUBTITLEs what they are

[09:20] <dalek> doc: review: https://github.com/perl6/doc/commit/240dbdd41b

[09:20] <dalek> doc: eb191dc | Mouq++ | lib/Language/classtut.pod:

[09:20] <dalek> doc: Merge branch 'master' of https://github.com/perl6/doc

[09:20] <dalek> doc: review: https://github.com/perl6/doc/commit/eb191dc988

[09:21] *** dmol joined
[09:22] *** dmol left
[09:23] *** dmol joined
[09:31] *** kkul joined
[09:32] *** teodozjan left
[09:32] *** dmol left
[09:33] *** dmol joined
[09:35] *** dmol left
[09:36] *** kkul is now known as teodozjan

[09:37] *** dmol joined
[09:41] <masak> in 10 days, Perl 6 turns 14.

[09:47] *** Psyche^ joined
[09:47] *** dmol left
[09:49] *** dmol joined
[09:52] *** Psyche^_ left
[09:52] *** dmol left
[09:52] <brrt> we ought to have a birthday cake, then

[09:53] *** dmol joined
[09:54] <masak> or maybe we should get up and throw a mug.

[09:54] *** dmol left
[09:54] <moritz> we should throw mugnetic objects!

[09:54] *** dmol joined
[09:55] *** virtualsue left
[09:57] *** virtualsue joined
[10:06] *** jack_rabbit left
[10:07] <masak> moritz: ...close to copper wires, generating some electricity...

[10:08] *** xinming joined
[10:10] *** xinming_ left
[10:10] *** dmol left
[10:11] *** dmol joined
[10:14] *** dmol left
[10:14] *** FOAD left
[10:15] *** dmol joined
[10:16] *** Akagi201 joined
[10:28] *** sqirrel left
[10:28] *** SevenWolf left
[10:32] *** dmol left
[10:33] *** dmol joined
[10:45] *** atroxaper joined
[10:46] <colomon_> FROGGS_: 

[10:46] <colomon_> ===SORRY!===

[10:46] <colomon_> When pre-compiling a module, its dependencies must be pre-compiled first.

[10:46] <colomon_> Please pre-compile /home/smoker/emmentaler/installlib/lib/NativeCall.pm6

[10:46] <FROGGS_> colomon_: yes, I see that also in my r-m* test

[10:46] <FROGGS_> colomon_: I'm debugging it right now

[10:46] <colomon_> FROGGS_++

[10:47] *** sqirrel joined
[10:47] *** cognominal left
[10:48] <FROGGS_> lizmat: btw, I agree now that a single CUR in an @*INC slot makes more sense...

[10:49] <FROGGS_> lizmat: we can have a CUR::Collection thingy in future, that has some rules to handle multiple CURs, especially when it has to pick an installation CUR

[10:50] *** dmol left
[10:51] *** cognominal joined
[10:51] *** dmol joined
[10:51] *** chenryn left
[10:52] <FROGGS_> ahh, found it

[10:52] <FROGGS_> pretty sure at least

[10:55] <FROGGS_> yes, that seems to work

[10:55] <colomon_> … tell us ...

[10:56] <FROGGS_> https://github.com/rakudo/rakudo/blob/nom/src/core/CompUnitRepo/Local/File.pm#L51-L57

[10:56] <FROGGS_> line 52 is bogus, the {$root} is missing

[10:56] <FROGGS_> and we can reduce line 51 to 57 down to line 56

[10:56] *** cognominal left
[10:58] <colomon_> Are you sure that's it?  smoker's rakudo build doesn't even have that patch...

[10:59] <FROGGS_> colomon_: on what commit is your rakudo?

[11:01] *** Adriaaaan joined
[11:01] <colomon_> FROGGS_: b014db2ebe0c5679b12c5bf709c98a9918f7f430

[11:01] *** Adriaaaan left
[11:01] <colomon_> smoke run started 5-6 hours ago, I haven't updated it since

[11:02] *** tadzik left
[11:04] <dalek> rakudo/nom: 3397a71 | (Tobias Leich)++ | src/core/CompUnitRepo/Local/File.pm:

[11:04] <dalek> rakudo/nom: fix lookup of potential comp unit candidates

[11:04] <dalek> rakudo/nom: 

[11:04] <dalek> rakudo/nom: In case we have already seen a basename of a candidate we dropped

[11:04] <dalek> rakudo/nom: additional candidates. Therefor we missed a precompiled cu when we

[11:04] <dalek> rakudo/nom: already had seen a source file. Since the content of a directory

[11:04] <dalek> rakudo/nom: is not ordered the result depended on the phase of the moon, mostly.

[11:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3397a712af

[11:05] <FROGGS_> colomon_: you have that bit of code: https://github.com/rakudo/rakudo/blob/b014db2ebe0c5679b12c5bf709c98a9918f7f430/src/core/CompUnitRepo/Local/File.pm#L50-L56

[11:07] <FROGGS_> colomon_: feel free to rerun :o)

[11:07] <colomon_> FROGGS_: oh!  sorry, must have read github wrong.  

[11:07] <FROGGS_> colomon_: no problem

[11:08] <colomon_> FROGGS_: I thought it was saying that was lizmat's patch from two hours ago.

[11:08] <colomon_> must actually have been the commit level for the entire file.

[11:08] <FROGGS_> IIRC the bad commit was 15 hours ago

[11:16] <lizmat> FROGGS_++  (good catch)

[11:20] <lizmat> that was definitely a refactor gone wrong

[11:20] <lizmat> .oO( need more tests )

[11:22] <colomon_> FROGGS_++ # that did i

[11:22] <colomon_> *it

[11:22] *** brrt left
[11:22] * colomon_ launches a full smoke test of the latest rakudo

[11:26] *** sqirrel left
[11:27] <lizmat> do we actually have a plan for the case there is a compiled version of a module, but it is out of date?

[11:27] <lizmat> wrt to the current executor?

[11:27] <FROGGS_> lizmat: the current state is that it explodes

[11:28] <FROGGS_> but the plan is to recompile it, in case we can write to the destination

[11:28] *** anaeem1_ left
[11:28] <dalek> rakudo/nom: 9013d8f | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo/Local/File.pm:

[11:28] <dalek> rakudo/nom: Only lookup / once

[11:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9013d8fb5f

[11:28] <FROGGS_> because a .moarvm file is a cache after all, and caches can get invalid and want updating

[11:29] <lizmat> perhaps, but I would be against compiling a new version then

[11:29] <FROGGS_> with the CUR::inst we have enough information to do that actually

[11:29] <lizmat> I'd rather see automatic re-compilation as part of the rakudo upgrade process

[11:30] <FROGGS_> well, such a cache can get only invalid when you recompile rakudo, or you upgrade a module using panda

[11:30] <FROGGS_> in either case there is an installation process running

[11:30] *** anaeem1 joined
[11:30] <FROGGS_> so, would not hurt to hook into that

[11:31] <lizmat> agree

[11:32] *** teodozjan left
[11:36] *** isBEKaml_mobile joined
[11:38] <FROGGS_> but yeah, trigger re recompilation just because a .moarvm in your local lib folder is out of date would scare me as well

[11:39] <lizmat> FROGGS_: what does the :$file paramater in CompUnitRepo.candidates mean ?

[11:39] <FROGGS_> lizmat: that we already know the path to a file to load

[11:40] <FROGGS_> like in require "/foo/bar/baz.pm"

[11:40] <lizmat> but it is not used anywhere ?

[11:40] <FROGGS_> it is used

[11:40] <FROGGS_> in Perl6::Actions

[11:41] <lizmat> aha, so we need to provide elsewhere as well, is what you're saying

[11:41] <FROGGS_> or better in: use Foo:file<blarg>

[11:42] <lizmat> there is no string 'candidates' in Action ?

[11:42] <FROGGS_> no, it just calls load_module

[11:42] <FROGGS_> which calls $*W.load_module which calls CUR.load_module which calls .candidates on the curs

[11:43] <lizmat> ok, get that now (I think)

[11:43] <lizmat> which feels to me it's rather backward: load_module shouldn't call candidates

[11:44] <lizmat> by the time we call load_module, we should already know what module to load

[11:44] <FROGGS_> but yeah, the file param comes from require/use Foo:file<bar>

[11:44] <FROGGS_> lizmat: no, 'use Foo' results in a call to load_module('Foo')

[11:45] <FROGGS_> how do you know the candidates then already?

[11:45] <FROGGS_> we are checking for candidates at the time somebody wants to load a module

[11:46] <lizmat> in my view, load_module should be told which *file* to load

[11:46] <lizmat> so it can be directly used for -require-

[11:46] <lizmat> use Foo would first call candidates, find out the file name, then call load_module

[11:47] <FROGGS_> lizmat: it calls load_module because that is the API of the 'old' module loader

[11:47] <lizmat> indeed

[11:47] <FROGGS_> and the new loader (CUR) just sits in front of it and provides the same API

[11:47] <FROGGS_> it was made pluggable

[11:48] <lizmat> and now the old module loader is obsolete... :-)

[11:48] <FROGGS_> so it is just called load_module

[11:48] *** dayangkun_ left
[11:48] <FROGGS_> lizmat: no, we use it after we found a candidate

[11:48] <lizmat> but is that a desirable situation?

[11:48] <FROGGS_> and pass it a :$file along

[11:49] <FROGGS_> lizmat: yes, because we need to be able to load modules

[11:49] <FROGGS_> you do not want to do that in the CUR

[11:49] <lizmat> why not ?

[11:49] *** isBEKaml_mobile left
[11:49] <FROGGS_> our module loader is written in nqp for one thing, and it delegates to NQP's ML or to MLs of a slang

[11:50] <FROGGS_> you can try to port it to Perl 6, but I'm not sure this will work out

[11:50] <FROGGS_> for example when we want to load BOOTSTRAP.pm, we need an NQP-level module loader to load it

[11:51] <FROGGS_> because we are not in the setting yet

[11:51] <lizmat> I don't actually want to port Perls/ModuleLoader to Perl 6

[11:51] <FROGGS_> note that we are registering our CUR at the end of the setting

[11:51] <lizmat> I want to port Actions/load_module to Perl 6

[11:52] <FROGGS_> what is Actions/load_module?

[11:52] <FROGGS_> also, we need to deserialize CUs when we load a precompiled module, that happens in $*W.load_module

[11:53] *** rurban1 joined
[11:53] <lizmat> World/load_module I meant

[11:53] <FROGGS_> we need the pieces where they are in order to do that

[11:54] <FROGGS_> lizmat: I'm not sure you want to emit QAST in Perl 6 level code: https://github.com/rakudo/rakudo/blob/nom/src/Perl6/World.nqp#L332

[11:55] <lizmat> I'm thinking along these ways:

[11:56] <lizmat> 1. CUR.candidates gives back one ore more CompUnit objects

[11:56] <lizmat> 2. if there is only 1, we try to load that by calling .load on the object

[11:57] <lizmat> 3. the CompUnit object should know which way to load itself (depending on pre-comp, source or external binary)

[11:57] <lizmat> grrr... need to take our cat to the vet  :-(

[11:57] <lizmat> bbl&

[11:58] <FROGGS_> :/

[11:58] *** anaeem1 left
[11:59] *** jnap joined
[12:00] *** dayangkun_ joined
[12:01] *** atroxaper left
[12:05] *** atroxaper joined
[12:09] *** rurban1 left
[12:09] *** teodozjan joined
[12:09] *** rurban1 joined
[12:12] *** virtualsue left
[12:12] *** erkan left
[12:15] *** Ven joined
[12:17] <Ven> o/ #perl6

[12:21] *** sqirrel joined
[12:24] <masak> ahoj, Ven.

[12:37] <atroxaper> Hello, #perl6 !

[12:37] <yoleaux> 7 Jul 2014 20:01Z <lue> atroxaper: assuming L<foo> is a synonym for L<doc:foo> (S26 doesn't say anything about this explicitly), I could see a case for L<C<foo>> being equivalent to L<doc:foo> rather than L<doc:C<foo>>. However, I'd also say L<C<foo>> is wrong, and you deserve whatever broken output results :) You really should do either C<L<foo>> or L<C<foo>|foo>

[12:37] <yoleaux> 7 Jul 2014 21:12Z <Mouq> atroxaper: https://github.com/perl6/Pod-To-HTML/commit/f70c57d29a4301b104f115a659417f07f013a947

[12:37] <atroxaper> Wow

[12:40] <atroxaper> r: (Nil, 0)[0].defined

[12:40] <camelia> rakudo-jvm 9013d8: OUTPUT«(timeout)»

[12:40] <camelia> ..rakudo-{parrot,moar} 9013d8: ( no output )

[12:41] *** carlin joined
[12:41] <atroxaper> r: say (Nil, 0)[0].defined

[12:42] <masak> lue: it feels rather obstinate for the parser to outlaw L<C<foo>> but allow L<C<foo>|foo>, IMHO.

[12:42] <camelia> rakudo-{parrot,jvm,moar} 9013d8: OUTPUT«True␤»

[12:42] <masak> lue: some part of me goes "do what I mean, darnit!"

[12:43] <masak> lue: though I should have started by saying I agree with you in principle: L<C<foo>> feels "wrong".

[12:45] <atroxaper> I thinks I will want to write L<httpC<s>://github.C<com>> for visibility, but without necessity to write |https://github.com 

[12:45] <carlin> https://github.com/rakudo/rakudo/pull/285

[12:47] <masak> atroxaper: a very good point. that won me over to allowing stuff like that.

[12:47] <masak> atroxaper: and (by extension) to providing the service of auto-stripping formatting inside of an L<>

[12:48] <atroxaper> masak: actually, now we have L<C<email>|email> in AUTHOR section

[12:48] <masak> heh.

[12:48] <masak> I wouldn't be surprised if auto-stripping logic were found along some other code path in the Pod parser.

[12:48] <FROGGS_> carlin: wikipedia says: The offset from UTC is given in the format ±[hh]:[mm], ±[hh][mm], or ±[hh]

[12:48] <FROGGS_> carlin: looks like we would not support ±[hh]

[12:51] <atroxaper> masak: as I said a couple days ego, I'm writing system for writing Pod::To::{Something} modules. And I'm rewriting Pod::To::HTML to my system as proof :)

[12:51] *** igorsutton left
[12:51] <atroxaper> masak: Next step will Pod::To::Markdown

[12:52] <masak> atroxaper++

[12:53] <atroxaper> masak: And maybe in future something like JavaDoc generator for Perl6. I feel a lack of documentation. And I'm Java developer and I can read java code with comments of developer any time. And can read html javadoc :)

[12:54] *** fhelmberger joined
[12:54] <masak> atroxaper: re JavaDoc-like generator: very, very yes.

[12:54] <masak> especially if it's savvy to all the neatness of Pod <3

[12:55] <atroxaper> masak: yes!

[12:55] *** guru joined
[12:55] *** guru is now known as Guest22875

[12:55] <atroxaper> masak: I could not understand why there is no system to write comments under code in Perl 5.

[12:56] *** igorsutton joined
[12:56] *** Guest22875 is now known as ajr_

[12:56] <atroxaper> And each developer should be fiction-writer and write some poem et the end of file)

[12:58] <masak> I agree.

[12:59] <masak> “Programs must be written for people to read, and only incidentally for machines to execute.” -- SICP

[13:00] <zengargoyle> atroxaper: how much of Perl6 POD are you supporting?

[13:02] <zengargoyle> awesomely pretty HTML of SICP: http://sarabander.github.io/sicp/

[13:02] <atroxaper> zengargoyle: all of it. I mean all things that current grammar can parse.

[13:02] *** kaare_ left
[13:04] <masak> zengargoyle: wow. I just started re-reading the original HTML, but this is much nicer to read. thank you!

[13:05] <zengargoyle> http://sicpebook.wordpress.com/2014/01/16/introducing-html5-version/  # this was the page about that version, mentions an EPUB version as well.

[13:06] * zengargoyle thinks that's what Pod::To::HTML should look like :)

[13:06] <atroxaper> zengargoyle:  Current Pod::To::HTML version has a hint that it would be nice to have some system that iterates on Pod and call some callbacks. I'm trying to make that system and make it comfortable. And make code of that callbackers more readable and mainteined.

[13:09] <[Coke]> (callbacks) like a pod::sax ?

[13:09] <atroxaper> zengargoyle: I will try to do so ;-)

[13:10] <atroxaper> [Coke]: No. Actually, I don't know about pod:sax.

[13:10] <zengargoyle> i tried to play with POD in code a couple of days ago and got --doc all confused.  think i was the :option<> type things or the = :more<options> continuation lines or something.

[13:12] <zengargoyle> eventually decided to stick with simple stuff ala Perl5 style

[13:14] <atroxaper> [Coke]: Imagine, that you write a bunch of functions (callbacks) and register it on Start, Finish and Content of any Pod's objects. Off course you have shared storage, array for result and some other data.

[13:15] <moritz> sounds like inheriting from a visitor class to me

[13:16] <atroxaper> [Coke]: And each callback will get all data that he want. Callback just need to write name of nessesary data in the header of sub

[13:16] <atroxaper> moritz: yes. With features :)

[13:17] <atroxaper> moritz: nothing rocket-science.

[13:18] *** virtualsue joined
[13:19] <atroxaper> r: say (Nil, 0)[0].defined # btw, why?

[13:19] <camelia> rakudo-{parrot,jvm,moar} 9013d8: OUTPUT«True␤»

[13:20] <psch> r: say (Nil, 0).elems

[13:20] <camelia> rakudo-{parrot,jvm,moar} 9013d8: OUTPUT«1␤»

[13:21] <psch> good afternoon #perl6

[13:22] <atroxaper> psch: hello)

[13:22] <atroxaper> psch: hm...

[13:22] <jnthn> I think Nil is no longer meant to flatten away. Once the spec had Nil as vanishing in List context, which Rakudo's list model relied on. 

[13:22] <jnthn> And in places still does.

[13:22] *** dayangkun_ left
[13:22] <jnthn> It was a rather unfortunate/painful spec change.

[13:24] <jnthn> Anyway, I think these days it wants .elems to be 2 there.

[13:24] <psch> jnthn: yes, that's what S02#Nil says at least: "Nil [..] does not disappear in list context"

[13:24] <jnthn> Yeah. It hadn't used to be that way.

[13:29] *** rurban1 left
[13:30] *** rurban1 joined
[13:34] *** rurban1 left
[13:38] *** teodozjan left
[13:42] *** firefish5000 left
[13:42] *** rurban1 joined
[13:50] *** dmol left
[13:51] <carlin> FROGGS_: you're right, I've pushed another commit to that pull req

[13:52] <FROGGS_> carlin++

[13:53] *** Ven left
[13:54] *** Akagi201 left
[13:54] <dalek> rakudo/nom: 78e1fa3 | Carlin++ | src/core/Temporal.pm:

[13:54] <dalek> rakudo/nom: [Temporal] accept colon in the timezone offset

[13:54] <dalek> rakudo/nom: 

[13:54] <dalek> rakudo/nom: This is valid in ISO 8601

[13:54] <dalek> rakudo/nom: 

[13:54] <dalek> rakudo/nom: http://www.w3.org/TR/NOTE-datetime

[13:54] <dalek> rakudo/nom: https://en.wikipedia.org/wiki/ISO_8601#Times

[13:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/78e1fa3cbc

[13:54] <dalek> rakudo/nom: db37b6f | Carlin++ | src/core/Temporal.pm:

[13:54] <dalek> rakudo/nom: [Temporal] accept timezone offsets with only hours

[13:54] <dalek> rakudo/nom: 

[13:54] <dalek> rakudo/nom: specifying the minutes is optional

[13:54] <dalek> rakudo/nom: eg. 2014-07-09T01:50:05+12 is a valid ISO 8601 timestamp

[13:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/db37b6fc4e

[13:54] <dalek> rakudo/nom: 597f35f | (Tobias Leich)++ | src/core/Temporal.pm:

[13:54] <dalek> rakudo/nom: Merge pull request #285 from carbin/nom

[13:54] <dalek> rakudo/nom: 

[13:54] <dalek> rakudo/nom: [Temporal] accept colon in the timezone offset

[13:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/597f35f079

[13:54] *** Akagi201 joined
[13:54] *** [Sno] left
[13:54] <carlin> thanks FROGGS_++

[13:55] <carlin> I've discovered a new level of laziness

[13:55] <carlin> rather than change my code, patch the compiler to make my code work

[13:55] <FROGGS_> carlin: :o)

[13:55] *** ajr_ left
[13:55] *** dmol joined
[13:55] <FROGGS_> carlin: exactly

[13:55] *** tadzik joined
[13:56] <jnthn> I love that kind of lazy :)

[13:57] *** Akagi201_ joined
[13:57] <psch> that reminds me, was there anything missing still for tr/// jnthn?

[13:58] <psch> (or anyone else, of course :)

[13:58] *** Akagi201_ left
[13:58] <jnthn> psch: Is there a latest PR that needs somebody to review it?

[13:59] * jnthn missed it if so

[13:59] *** Akagi201_ joined
[13:59] <psch> it's the same PR ( https://github.com/rakudo/rakudo/pull/284 ), i've changed the p6store to bind/decont as per your latest review and moritz++ mentioned some debug output

[14:00] <psch> i'm still not sure if the Bool{anon} is a good solution though, but i also don't feel like i can competently judge that :)

[14:00] <psch> for Str.distance that is

[14:01] *** Akagi201 left
[14:06] *** brrt joined
[14:06] *** guru joined
[14:07] *** igorsutton left
[14:07] *** guru is now known as Guest52360

[14:07] *** Guest52360 is now known as ajr_

[14:07] *** igorsutton joined
[14:07] *** kaare_ joined
[14:11] *** isBEKaml_mobile joined
[14:12] <[Coke]> atroxaper: I wasn't implying a specific pod::sax module, i was trying to imply a SAX like parser as opposed to a DOM style (from XML parsing land)

[14:12] *** igorsutton left
[14:12] *** bluescreen10 joined
[14:12] *** MilkmanDan left
[14:14] *** MilkmanDan joined
[14:14] <atroxaper> [Coke]: Oh... Yes. Something like that... And there is good name, I think! Can I get it? ;-)

[14:16] *** btyler joined
[14:17] *** FROGGS_ left
[14:22] <[Coke]> you can write it, sure. :)

[14:22] *** _slade joined
[14:25] *** sqirrel left
[14:28] *** Akagi201 joined
[14:30] *** Akagi201_ left
[14:39] <hoelzro> morning #perl6

[14:40] *** FROGGS joined
[14:41] <psch> jnthn: maybe i missed some other feedback? i only remember the p6store leak, which i fixed

[14:41] <masak> DOM-based parsing results in a tree structure in memory. SAX-based parsing results in a lazy list of "events".

[14:42] <masak> there is also at least one hybrid between DOM and SAX.

[14:43] <timotimo> i would strongly vote for a flag that you can use to prevent "automatic recompilation" if your compile process is more complicated than just "compile to bytecode", for example if you do lots of BEGIN blocks

[14:45] *** rurban1 left
[14:47] *** treehug88 joined
[14:53] *** telex left
[14:54] *** telex joined
[14:54] *** virtualsue left
[14:56] <dalek> roast: 8cc408b | Carlin++ | S32-temporal/DateTime.t:

[14:56] <dalek> roast: [S32-temporal] add tests for more timezone offsets

[14:56] <dalek> roast: 

[14:56] <dalek> roast: Per ISO 8601 timezone offsets can be colonated and minuteless

[14:56] <dalek> roast: review: https://github.com/perl6/roast/commit/8cc408b2b1

[14:56] <atroxaper> masak: timotimo: I will show you when finish :-)

[14:57] *** tadzik left
[14:57] <timotimo> i'm looking forward to it :)

[14:57] <timotimo> i remember my feeble attempts at making the pod stuff better; it only worked partially

[15:01] <atroxaper> I'm getting Pod by current grammar. I just transform Pod to something. For example we still can't parse FormattingCode in Tables by grammar :(

[15:03] *** hoverboard joined
[15:03] <timotimo> yes, it's a hard problem

[15:03] <timotimo> i threw some doodled code tadziks way for parsing tables "simpler", but it wasn't good enough to get him to the "whole thing"

[15:04] *** virtualsue joined
[15:05] *** raiph joined
[15:05] *** SamuraiJack_ left
[15:06] <atroxaper> timotimo: yes... I've tried to understand the Grammar for improoving that (yes, i'm too presumptuous), but I couldn't...

[15:06] <timotimo> i don't think that's presumptuous :)

[15:06] <atroxaper> :)

[15:07] <raiph> didn't someone conclude Pod table syntax requires multi-pass parsing?

[15:08] <timotimo> it *can* be done in one pass

[15:08] <timotimo> but it's ... quirky

[15:08] <masak> why?

[15:08] <timotimo> to implement, anyway

[15:08] <masak> oh, because of things like comments above stuff?

[15:09] <masak> prediction: it will be non-trivial to do it in one pass, but it will be worth it.

[15:10] <timotimo> what does "comments above stuff" mean?

[15:10] <timotimo> this is only about tables right now

[15:11] <masak> I meant something like #| -- I *think* that's the syntax we landed on.

[15:11] <timotimo> ah, that's something else

[15:11] <masak> why do tables want to be two-pass? I don't quite see it.

[15:12] <timotimo> formatting codes inside tables

[15:12] <timotimo> it's not actually quite "two-pass"

[15:12] <timotimo> well, actually i'm pretty sure i don't have a complete understanding of what "one-pass" vs "two-pass" entails

[15:13] <timotimo> the problem is that each cell can span multiple rows and formatting codes inside those tables are allowed to span multiple rows inside that cell, too

[15:13] <timotimo> and formatting codes can lead to cells being merged, which - i believe/suspect - should influence the other cells in those rows, too

[15:14] <masak> ok, I see the challenge/issue now.

[15:14] <raiph> http://irclog.perlgeek.de/perl6/2013-06-25#i_7247199 # timotimo discusses some table parsing challenges

[15:15] *** denis_boyun_ left
[15:16] <masak> raiph: gracias

[15:16] *** isBEKaml_mobile left
[15:16] <timotimo> raiph: the amount of helpfulness per line written to the channel that you have reached astounds me in a really good way

[15:16] <atroxaper> There is annual conversation xD

[15:16] <timotimo> :D

[15:18] <hoelzro> how can one determine whether a type is Mu? $type eqv Mu doesn't seem to do the trick

[15:18] <timotimo> "is" mu in what way?

[15:18] <hoelzro> my $type = Mu;

[15:18] <timotimo> ah

[15:18] <hoelzro> like the Mu object

[15:18] <dalek> rakudo-star-daily: e145f55 | coke++ | log/ (14 files):

[15:18] <dalek> rakudo-star-daily: today (automated commit)

[15:18] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/e145f5534b

[15:19] <hoelzro> well, type object

[15:19] *** fhelmberger left
[15:19] <timotimo> m: my Mu $foo = Mu; say $foo eqv Mu; say $foo.WHAT eqv Mu; say $foo === Mu;

[15:19] <camelia> rakudo-moar 597f35: OUTPUT«Type check failed in binding <anon>; expected 'Any' but got 'Mu'␤  in block  at /tmp/y7jLZIOxMn:1␤␤»

[15:19] <masak> m: my $x = Mu; say $x.WHAT === Mu

[15:19] <camelia> rakudo-moar 597f35: OUTPUT«Type check failed in binding <anon>; expected 'Any' but got 'Mu'␤  in block  at /tmp/J8Mo6t1Jq5:1␤␤»

[15:19] <timotimo> which little anon is that?

[15:19] <[Coke]> m: my $x = Mu; say $x ~~ Mu

[15:19] <camelia> rakudo-moar 597f35: OUTPUT«True␤»

[15:19] <[Coke]> m: my $x = 234; say $x ~~ Mu

[15:19] <camelia> rakudo-moar 597f35: OUTPUT«True␤»

[15:19] <timotimo> [Coke]: that will give true for basically anything ever

[15:20] <masak> [Coke]: ...but anything will give True on that ;)

[15:20] <[Coke]> that's what i was just checking. :)

[15:20] <psch> m: my Mu $x; $x.^mro.elems.say # hackish

[15:20] <camelia> rakudo-moar 597f35: OUTPUT«1␤»

[15:20] <hoelzro> so far, $type.WHERE == Mu.WHERE works

[15:20] <hoelzro> but it's dodgy

[15:20] <timotimo> i realize i'm kind of a topic-nomad ... i go from topic to topic and leave behind unresolved issues and partial implementations of things :S

[15:20] <[Coke]> m: my $x = Mu; say WHAT($x)

[15:20] <camelia> rakudo-moar 597f35: OUTPUT«(Mu)␤»

[15:20] <timotimo> hoelzro: at least Mu never ought to move :)

[15:20] <hoelzro> =)

[15:20] <[Coke]> since I know that jnthn just fixed that ^^

[15:24] <hoelzro> is 'Mu eqv Any' throwing an exception a bug? or should I not expect so much from Mu?

[15:24] <raiph> http://irclog.perlgeek.de/perl6/2013-08-03 # I'd love to hear masak's take on the Pod tables discussion and solution and problem gists from this day

[15:27] *** atroxaper left
[15:28] <[Coke]> here's a not an autopun for masak: "We all have two lives. The second begins when you realize we have only one."

[15:28] *** atroxaper joined
[15:28] <dalek> perl6-roast-data: 8ac5962 | coke++ | / (6 files):

[15:28] <dalek> perl6-roast-data: today (automated commit)

[15:28] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/8ac59628a4

[15:29] <timotimo> bbl

[15:32] *** atroxaper left
[15:37] <hoelzro> if one wanted to do something with an accessor's new value after it's been called, I'm guessing one would have to implement the accessor as 'is rw' and return some sort of container that does something special when storing a value?

[15:37] *** sjn_roadie joined
[15:38] <raiph> https://github.com/rakudo/rakudo/tree/pod-table # most recent attempt at Pod table parsing?

[15:41] *** atroxaper joined
[15:42] *** Akagi201 left
[15:42] <dalek> roast: da034fd | Carlin++ | S32-temporal/DateTime.t:

[15:42] <dalek> roast: [S32-temporal] negative offsets and +/-00 offsets

[15:42] <dalek> roast: review: https://github.com/perl6/roast/commit/da034fdbc3

[15:44] *** kaleem left
[15:49] *** thou joined
[15:56] *** dmol left
[15:57] *** virtualsue left
[15:59] *** [Sno] joined
[16:01] *** denis_boyun joined
[16:09] *** denis_boyun left
[16:09] *** ajr_ left
[16:09] *** ajr joined
[16:10] *** virtualsue joined
[16:10] *** ajr is now known as Guest1355

[16:11] *** sjn_ joined
[16:11] *** sjn_roadie left
[16:13] *** kaleem joined
[16:14] *** Guest1355 is now known as ajr_

[16:20] *** isBEKaml joined
[16:29] *** sjn_roadie joined
[16:30] *** sjn_ left
[16:32] *** molaf joined
[16:33] *** rindolf joined
[16:41] *** atroxaper left
[16:41] *** dmol joined
[16:41] *** atroxaper joined
[16:42] *** brrt left
[16:42] *** virtualsue left
[16:42] *** Akagi201 joined
[16:43] *** _slade left
[16:46] *** atroxaper left
[16:47] *** hoverboard is now known as cholby

[16:48] *** _slade joined
[16:49] *** kaleem left
[16:51] <hoelzro> what's the easiest way in NQP to figure out what type an object is?

[16:52] <jnthn> $obj.HOW.name($obj)

[16:53] <hoelzro> oh perfect

[16:53] <hoelzro> thanks jnthn 

[16:53] *** Akagi201 left
[16:56] *** dakkar left
[17:00] *** cholby is now known as hoverboard

[17:01] *** fhelmberger joined
[17:02] *** treehug88 left
[17:05] *** Rotwang joined
[17:07] *** fhelmberger left
[17:10] *** _slade left
[17:10] *** _slade joined
[17:15] *** rindolf left
[17:19] <FROGGS> ahh, latest perl6_pass_rates.csv looks really really good :o)

[17:19] <colomon_> FROGGS: also http://host07.perl6.com:8080/report

[17:19] <FROGGS> hoelzro: and when you want to check that something is of certain type you do: nqp::istype($x, $type)

[17:20] <FROGGS> colomon_: yeah

[17:20] <FROGGS> though I should perhaps check why Inline is broken

[17:20] <colomon_> FROGGS++

[17:24] *** ajr_ left
[17:27] <carlin> FROGGS++ # merging all my pull requests

[17:27] <FROGGS> carlin: thanks for the PR :o)

[17:27] <FROGGS> and carlin++ for contributing!

[17:27] <[Coke]> yay, now to fudge/RT the remaining rakudo issues.

[17:28] <PerlJam> y

[17:36] <rurban> FROGGS: Is rakudo-p fixed now?

[17:36] <FROGGS> rurban: sort of

[17:36] *** molaf left
[17:36] <rurban> I'll check

[17:37] <FROGGS> rurban: it is relying on an optimization, and this happens again

[17:37] <rurban> we need more realistic benchmarks for our new improvements. I doubt that we only got 2%

[17:37] <FROGGS> some blocks need to be inlined, otherwise very strange things happen

[17:37] <rurban> yes, I saw :)

[17:38] <FROGGS> would be awesome if you guys achieve more than 2%, aye :o)

[17:43] <rurban> sure. I'm sceptical, but we only sped up method calls, last time with the WBs we did vtable and method calls

[17:44] <rurban> and we still have to check the arity at run-time. bad specs unfortunately

[17:45] *** ren1us left
[17:46] *** ren1us joined
[17:46] <ren1us> is there any sort of profiler system in place, or at the very least, something that can help me track down where i've apparently got a massive memory leak?

[17:47] <ren1us> (honestly i suspect the memory leak is a bug in moar's garbage collector, rather than my code)

[17:48] *** Alina-malina left
[17:52] *** kaleem joined
[17:53] <jnthn> It's extremely unlikley to be a GC bug; it'll only keep objects alive if they're actually referenced.

[17:53] <jnthn> Could be some non-gc-managed resource leaking.

[17:55] <ren1us> it's very weird... i would suspect it to be my code if the memory usage popped down to something reasonable after my main recursive stuff hit the base case, but it doesn't.  it just constantly increases over time

[17:56] *** Alina-malina joined
[17:57] <jnthn> Either way, there's not some good profiling support yet.

[17:57] <ren1us> unfortunate.  i'll try running through parrot just to see what happens.

[17:57] *** Akagi201 joined
[17:58] *** guru joined
[17:58] <jnthn> dinner; bbiab

[17:58] <ren1us> because there's really no reason for moar to be getting up to about 4.5 gigs of memory in half an hour

[17:58] *** guru is now known as Guest31724

[17:59] *** Guest31724 is now known as ajr_

[18:00] <jnthn> Well, depends what you're doing, but no, that does sound like a leak of some kind. I just suspect it'll turn out not to be the GC. The last time I fixed leaks, they were of stuff allocated along the way.

[18:00] <jnthn> (At C level)

[18:00] <jnthn> dinner; bbiab

[18:02] *** Akagi201 left
[18:04] *** isBEKaml_ joined
[18:05] *** isBEKaml left
[18:07] *** isBEKaml_ is now known as isBEKaml

[18:07] *** isBEKaml left
[18:07] *** isBEKaml joined
[18:10] *** erkan joined
[18:10] *** Akagi201 joined
[18:10] *** Akagi201 left
[18:11] <ren1us> wow what's with me and breaking literally everything.  hooray for a segfault.

[18:15] *** isBEKaml left
[18:19] *** teodozjan joined
[18:20] *** kurahaupo joined
[18:22] *** kaleem left
[18:31] <TimToady> cool, I get bubble+cryosurgery in half an hour for a detached retina

[18:31] <TimToady> may or may not be visually active during that time...we'll see

[18:31] <ren1us> that sounds really unpleasant and painful.  best of luck, get better soon, etc etc

[18:31] <TimToady> I get to sit in a funny position for five days to keep the bubble in the right place...

[18:31] <nwc10> you keep living in interesting times :-(

[18:32] <nwc10> I hope it goes well

[18:32] <TimToady> well, in other times I'd've been dead by now several ways :)

[18:32] <TimToady> so I'll take interesting :)

[18:32] <TimToady> afk &

[18:32] <jnthn> TimToady: Hope all goes as well as possible. Take care.

[18:33] <colomon_> TimToady: best wishes!

[18:33] <[Coke]> interesting++

[18:34] <retupmoca> TimToady: good luck, I hope it goes well

[18:35] <[Coke]> best wishes.

[18:44] <hoelzro> FROGGS: oh, thanks!  that's good to know

[18:50] <timotimo> best wishes from me, too! that does sound like an amazing feat

[18:51] * [Coke] plays the latest guardians of the galaxy trailer on loop.

[18:51] <timotimo> oh, so there's a gas bubble inside the eye where the "eye fluid" also is?

[18:51] <timotimo> i mean: a gas bubble is put there

[18:52] <timotimo> five days is a long time to keep your head in a particular position ...

[18:56] <woolfy> Oh man, detached retina...  interesting times and all are fun, but this is no fun.  Best wishes.  TimToady++

[18:57] * PerlJam seems to recall that this is not the first time TimToady has had a detached retina.  :-(

[18:58] <timotimo> is there something that predisposes you to get that?

[19:00] <lizmat> having had it before?   in any case, TimToady++ for hanging in there and not giving up on us

[19:00] <FROGGS> what the...

[19:00] <FROGGS> TimToady: I wish you all the best!

[19:01] <hoelzro> TimToady: godo luck!

[19:01] <hoelzro> *good

[19:03] *** SamuraiJack_ joined
[19:08] *** treehug88 joined
[19:09] *** darutoko left
[19:13] <timotimo> i wonder how some surgeries are ... "discovered"

[19:13] *** bluescreen100 joined
[19:13] <PerlJam> After trying it out on cadavers for a while, eventually someone says, "Now let's try it on a live one!"

[19:14] <Mouq> TimToady++

[19:17] *** bluescreen10 left
[19:18] <masak> TimToady: best wishes.

[19:22] *** sftp_ joined
[19:22] <Mouq> m: class A { method @.[*@abcd] { say "ok @abcd[]" } }; say A.postcircumfix:<[ ]>(42) # can we have this sugar for .at_pos instead? same with %.{...}

[19:22] <camelia> rakudo-moar 597f35: OUTPUT«ok 42␤True␤»

[19:22] *** SamuraiJack_ left
[19:23] <lue> .tell atroxaper just so you know, I've already followed that hint in Pod::To::HTML (here it is: https://github.com/lue/pod-walker), and AFAIK Mouq is using it to reimplement Pod::To::HTML too. I'll be interested in seeing what your solution to that hint is! :)

[19:23] <yoleaux> lue: I'll pass your message to atroxaper.

[19:23] *** sftp left
[19:23] *** sftp_ is now known as sftp

[19:24] <Mouq> lue: So, on that topic, what do you think of making Pod::To::HTML actually act like a class instead of a module? and maybe having Pod::Walker be a role it inherits?

[19:24] <lue> Mouq: perhaps, I couldn't say off-hand what route would be best.

[19:26] <Mouq> lue: Ok, I'll try it out. Pod::To::HTML uses a lot of global variables for each document, it seems like some sort of encapsulation somewhere would be for the best

[19:27] <lue> Sounds good. :)

[19:30] *** bluescreen100 left
[19:31] *** itz_ joined
[19:34] *** cognominal joined
[19:37] * Mouq spectests @.() -> at_pos(), %.() -> at_key()

[19:41] *** hoverboard left
[19:42] *** Akagi201 joined
[19:42] *** hoverboard joined
[19:46] *** Akagi201 left
[19:48] <timotimo> "Over time the vitreous changes, shrinking and developing pockets of liquefaction, similar to the way a gelatin dessert shrinks, or detaches, from the edge of a pan over time." - this is a wonderful simile

[19:50] *** xdoctor joined
[19:50] *** teodozjan left
[19:51] *** Akagi201 joined
[19:52] <FROGGS> timotimo: in case you're working on the weekly: jnthn (and me) have tracked down the perl6-p borkage that introduced 1800 spectest fails

[19:55] <dalek> rakudo/nom: 548a9b8 | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo/Local/File.pm:

[19:55] *** Akagi201 left
[19:55] <dalek> rakudo/nom: Add :no-precomp flag

[19:55] <dalek> rakudo/nom: 

[19:55] <dalek> rakudo/nom: This should allow for searches for a non-precompiled version of a module.

[19:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/548a9b8f3f

[19:56] <dalek> roast: 3aa17a3 | (Elizabeth Mattijsen)++ | S22-package-format/local (3 files):

[19:56] <dalek> roast: Some more CURL::File tests

[19:56] <dalek> roast: review: https://github.com/perl6/roast/commit/3aa17a3953

[20:06] *** cognominal left
[20:06] <Mouq> Hmm... My spectest turns up fails for S32-list/pick.t and S32-temporal/local.t

[20:07] *** orevdiabl left
[20:07] <timotimo> i still didn't have an opportunity today, but i think i'll be able to do it in the next 2h

[20:07] *** revdiablo joined
[20:14] *** japhb joined
[20:15] <Mouq> (i may just have a stale Moar, but the dog is insisting I take her for a walk before I find out)

[20:25] <itz_> Brazil is still in with a chance!

[20:25] <itz_> :)

[20:26] <carlin> that S32-list/pick failure is impressive

[20:26] <carlin> *** Error in `/home/carlin/rakudo/install/bin/moar': free(): invalid size: 0x00000000088017e0 ***

[20:28] <FROGGS> scary, aye

[20:31] *** raiph left
[20:37] *** kurahaupo left
[20:38] *** anaeem1 joined
[20:39] *** Alula_ left
[20:39] *** kurahaupo joined
[20:39] *** kurahaupo left
[20:39] *** Alula_ joined
[20:40] <Mouq> Oh? So it's not just me :)

[20:41] *** kurahaupo joined
[20:41] *** kurahaupo left
[20:43] <carlin> pick.t is giving me fireworks, it's very spectacular

[20:43] <dalek> rakudo/nom: fda3461 | Mouq++ | src/Perl6/Actions.nqp:

[20:43] <dalek> rakudo/nom: Use at_{pos,key} for method {@,%}.()

[20:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fda34618fa

[20:45] <Mouq> Oh, wait

[20:46] * timotimo waits

[20:46] <Mouq> perl6 -e'class A { method %.(*@abcd) { say "called" } }; say A.{42, 43}'

[20:46] <Mouq> called

[20:46] <Mouq> (should only be called once, reverting my commit)

[20:47] <jnthn> uh, no

[20:47] <jnthn> at_key is called once per key to access

[20:47] *** kurahaupo joined
[20:47] * vendethiel thinks it's kinda confusing it's not postcircumfix:<{ }> :o)

[20:48] <vendethiel> well, there's <> to take into account I guess

[20:48] <jnthn> That's a sub, not a method, like all the other operator-y things. :)

[20:48] <jnthn> (used to be a method, but consistency and optimizability won over)

[20:48] <vendethiel> right-o

[20:48] <vendethiel> yeah, I think somebody already told me 'bout that, subs for inlining

[20:49] <Mouq> jnthn: Yes, so having %.() call at_key creates the wrong behaviour

[20:50] <jnthn> Mouq: Bit tied up with $dayjob so didn't read the commit, but I'd gueesed you were desugaring %.() to at_pos()

[20:50] <jnthn> uh, at_key

[20:51] *** hoverboard left
[20:51] <dalek> rakudo/nom: 41574ab | Mouq++ | src/Perl6/Actions.nqp:

[20:51] <dalek> rakudo/nom: Revert "Use at_{pos,key} for method {@,%}.()"

[20:51] <dalek> rakudo/nom: 

[20:51] <dalek> rakudo/nom: This reverts commit fda34618fa69e331bfc1ea44785cf4c40843b193.

[20:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/41574ab1c0

[20:51] *** Akagi201 joined
[20:52] <Mouq> "@.[]" really implies the whole postcircumfix, rather than just a single-element access method

[20:53] <jnthn> OK, well...maybe they don't make sense to exist any more, then.

[20:54] <Mouq> Is 'method postcircumfix:<[ ]>' never coming back?

[20:54] <FROGGS> kinda unlikely I guess

[20:54] <jnthn> I don't believe so.

[20:55] <jnthn> If you really wanted to do custom slicing then you'd need to write a sub

[20:55] <jnthn> tbh, though, I really do not think the sugar is worth it.

[20:55] <jnthn> It's quite a special case.

[20:56] *** Akagi201 left
[20:56] <Mouq> I only just realized that you can only define new postcircumfixes in a sub

[20:56] <Mouq> But what about the inconsistency of 'method postcircumfix:<( )>'

[20:58] * zengargoyle spent a few hours trying to get a class attribute to «handle postcircumfix<{ }>» something when it seems it should have been «handle <at_key»

[20:58] <jnthn> Mouq: I think we should rename that INVOKE or something

[20:58] <jnthn> Or jsut invoke

[20:58] *** silug left
[20:59] <masak> +1

[21:01] *** treehug88 left
[21:11] <moritz> same capitalization as at_key, IMHO

[21:11] *** silug joined
[21:12] <timotimo> zengargoyle: i think you need to "does Associative"

[21:19] *** ivanshmakov left
[21:22] *** ivanshmakov joined
[21:28] <zengargoyle> timotimo: tried that on the class at least.  rakudo/src/core/Associative.pm role has a single method of().

[21:31] <timotimo> oh

[21:31] <timotimo> oops

[21:32] <timotimo> yeah, that's a different kind of thing; i think that's the role we use to apply type restraints to hashes

[21:32] *** gfldex left
[21:32] <zengargoyle> i really thought: class A does Associative { has SetHash $!h handles Associative = SetHash.new } # would have DWIMd

[21:33] <zengargoyle> and grepping the specs for clues didn't help much. :P

[21:37] <timotimo> handles is only for methods ;(

[21:39] <zengargoyle> is that NYI?  spec has things like: has $.payload handles <Str Numeric>;

[21:40] <zengargoyle> and: has $.fur is rw handles Groomable;

[21:40] *** anaeem1 left
[21:41] *** anaeem1 joined
[21:43] <zengargoyle> i wanted to do something like: my Flags $flags = Flags.new(one=>0x1,two=>0x2,three=>0x4); $flags<one>=True; $flags<three>=True; # $flags.Int == 5

[21:44] <zengargoyle> where the keys are restricted to the enum of valid flags.

[21:45] <psch> doesn't an enum on its own do that already?

[21:46] <zengargoyle> enum is immutable.

[21:46] *** anaeem1 left
[21:46] <zengargoyle> was thinking: class Flags { has EnumMap $!em; has SetHash $!sh; # enough logic to do stuff }

[21:47] <psch> oh

[21:47] <psch> i guess the accessors could get some logic to restrict, but that's clunky

[21:47] <zengargoyle> where EnumMap holds keys=>values; and SetHash holds the desired subset of available flags.

[21:48] <psch> https://github.com/perl6/roast/blob/master/integration/advent2009-day11.t # here's handles examples, btw

[21:48] <zengargoyle> but wanted $flags to behave just like a SetHash would, $flags.keys, etc.

[21:49] <psch> so each kv from the SetHash should be one kv from the enum?

[21:49] * retupmoca discovers trello: https://trello.com/b/8vpgVKdK/retupmoca-s-perl-6-modules

[21:49] <psch> the use is something like "which flags are of the available flags are set for this instance" i figure

[21:49] <zengargoyle> SetHash hides the values, all set keys are True, keys set to False are deleted.

[21:50] *** dayangkun joined
[21:51] <zengargoyle> so it's like: em = (one=>1,two=>2,three=>4), sh = (<one four>)

[21:51] <zengargoyle> 'tho underneath it may be sh = (one=>true_value,four=>something_true)

[21:52] <zengargoyle> if you ask $sh<one> you'll only get True back.

[21:52] *** Akagi201 joined
[21:53] <zengargoyle> i finally gave up because i was only going to support *one* of the available flags. :P

[21:54] <psch> i don't think i fully understand what you're trying to do :)

[21:54] <psch> (not to mention i might not even be able to help)

[21:54] <zengargoyle> named bitflags.

[21:54] *** dayangkun_ joined
[21:55] <psch> on the surface exporting the enum and having an &addflags(*@) method that checks if the supplied arguments are in the enum and throws otherwise seems enough to me

[21:55] *** itz_ left
[21:55] <psch> although i think not-from-the-enum barewords would throw on their own in the mainline anyway

[21:55] <psch> which makes it not really desireable...

[21:56] <psch> where "it" is "this way of building it"

[21:56] <zengargoyle> well yeah, but not as pretty as. :P

[21:56] <psch> right :)

[21:56] *** Akagi201 left
[21:56] <psch> i guess you could build an accessor for $!sh that checks keys that are to be added for some kind of equality with the enum keys

[21:57] <psch> which might be Stringy equality or something else

[21:57] <zengargoyle> yeah, i had the basics working, just not the make it look like a plain SetHash parts.

[21:58] *** dayangkun left
[22:03] *** Rotwang left
[22:14] *** kaare_ left
[22:28] *** wamiks joined
[22:29] *** _slade left
[22:32] *** jnap1 joined
[22:34] *** jnap left
[22:36] *** ajr_ left
[22:38] *** hoverboard joined
[22:41] *** grondilu joined
[22:41] *** pdcawley left
[22:42] <grondilu> r: constant primes = grep &is-primes, 2 .. *;  # this times out locally on Moar

[22:42] <camelia> rakudo-jvm 41574a: OUTPUT«(timeout)»

[22:42] <camelia> ..rakudo-{parrot,moar} 41574a: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Undeclared routine:␤    &is-primes used at line 1. Did you mean '&is-prime'?␤␤»

[22:42] <grondilu> r: constant primes = grep &is-primes, 2 .. *;  say primes[^10] # but this does not

[22:42] <camelia> rakudo-{parrot,jvm,moar} 41574a: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Undeclared routine:␤    &is-primes used at line 1. Did you mean '&is-prime'?␤␤»

[22:42] <grondilu> r: constant primes = grep &is-prime, 2 .. *;  say primes[^10] # but this does not

[22:43] <camelia> rakudo-{parrot,jvm,moar} 41574a: OUTPUT«2 3 5 7 11 13 17 19 23 29␤»

[22:43] <grondilu> r: constant primes = grep &is-prime, 2 .. *; 

[22:43] <camelia> rakudo-{parrot,jvm,moar} 41574a: OUTPUT«(timeout)»

[22:43] <grondilu> see?

[22:44] <grondilu> r: constant integers = 1 .. *;

[22:44] <camelia> rakudo-{parrot,jvm,moar} 41574a: ( no output )

[22:44] <grondilu> r: constant even-numbers = grep * %% 2, 1 .. *;

[22:45] <camelia> rakudo-{parrot,jvm,moar} 41574a: OUTPUT«(timeout)»

[22:45] <grondilu> r: constant even-numbers = grep * %% 2, 1 .. *; say even-numbers[^10]

[22:45] <camelia> rakudo-{parrot,jvm,moar} 41574a: OUTPUT«2 4 6 8 10 12 14 16 18 20␤»

[22:46] <Mouq> r: constant primes = grep &is-prime, 2 .. *; 1

[22:46] <camelia> rakudo-{parrot,jvm,moar} 41574a: ( no output )

[22:47] <grondilu> it's like the compiler is bored of having nothing to do so it decides to evaluate the lazy list completely :)

[22:48] <Mouq> lol

[22:49] *** pdcawley joined
[22:50] <psch> m: constant n = 1 .. Inf # apparently the compiler feels teased by the grep

[22:50] <camelia> rakudo-moar 41574a: ( no output )

[22:51] <psch> m: constant n = 1 .. * # ... i think? 

[22:51] *** btyler left
[22:51] <camelia> rakudo-moar 41574a: ( no output )

[22:52] *** paraxor left
[22:53] *** Akagi201 joined
[22:53] *** dayangkun_ left
[22:53] <grondilu> r: constant even-numbers = grep * %% 2, 1 .. *; say even-numbers.elems

[22:54] <grondilu> well it can not know the grep will return an infinite number of elements, I guess

[22:54] <camelia> rakudo-{parrot,jvm,moar} 41574a: OUTPUT«(timeout)»

[22:55] <grondilu> so I'm actually not sure about the lazyness of a constant defined with grep.  I supposed I should read the spec about these stuff. 

[22:57] *** Akagi201 left
[23:02] *** dmol left
[23:25] *** mr-foobar left
[23:31] *** spider-mario left
[23:37] *** broquaint left
[23:38] <jnthn> Yay. Got a bunch of stuff off my plate and tomorrow I can spend all day on Perl 6 things. \o/

[23:42] <psch> jnthn++ # finish his plate for good weather

[23:42] <psch> eh, *finishing

[23:43] <psch> as in, weather suitable for butterflies :)

[23:48] *** xragnar left
[23:50] * psch is still trying to find places where the outer chain could break...

[23:50] <psch> but no more today i think

[23:50] *** xragnar joined
[23:51] *** SevenWolf joined
[23:52] *** rurban1 joined
[23:54] *** Akagi201 joined
[23:55] <psch> g'night o/

[23:55] *** sjn_roadie left
[23:57] *** psch left
[23:58] *** Akagi201 left
