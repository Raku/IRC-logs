[00:02] *** sjn_ is now known as sjn

[00:18] *** hoversosmooth is now known as troll_op

[00:18] *** troll_op is now known as hoverboard

[00:32] *** BenGoldberg joined
[00:40] *** dmol left
[00:52] *** hoverboard left
[00:58] *** pippo left
[01:00] *** pippo joined
[01:00] *** pippo left
[01:02] *** aindilis joined
[01:07] *** pippo joined
[01:07] *** pippo left
[01:08] *** hoverboard joined
[01:11] *** berekuk left
[02:09] *** bjz left
[02:21] <[Coke]> https://github.com/coke/mojo6 is no longer empty. (though it's really very mostly empty)

[02:23] <raydiak> [Coke]: are you able to fix my rt account? it has no permissions, even to view the homepage or bugs which I can view as anonymous guest

[02:30] *** FROGGS_ joined
[02:32] *** Sqirrel_ joined
[02:33] *** Sqirrel left
[02:33] *** FROGGS left
[02:34] <TimToady> r: say so '‰∏Ä' ~~ /<:Ideographic>/  say so 'Êµ∑' ~~ /<:Ideographic>/

[02:34] <camelia> rakudo-parrot 45e230, rakudo-jvm 45e230, rakudo-moar 45e230: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Two terms in a row‚ê§at /tmp/tmpfile:1‚ê§------> [32msay so '‰∏Ä' ~~ /<:Ideographic>/  [33m‚èè[31msay so 'Êµ∑' ~~ /<:Ideographic>/[0m‚ê§    exp‚Ä¶¬ª

[02:34] <TimToady> r: say so '‰∏Ä' ~~ /<:Ideographic>/;  say so 'Êµ∑' ~~ /<:Ideographic>/

[02:34] <camelia> rakudo-moar 45e230: OUTPUT¬´True‚ê§False‚ê§¬ª

[02:34] <camelia> ..rakudo-parrot 45e230, rakudo-jvm 45e230: OUTPUT¬´True‚ê§True‚ê§¬ª

[02:34] <TimToady> that's the bug I'm hunting right now...

[02:39] * araujo greets around

[02:40] * araujo sees TimToady is hunting tonight

[02:44] *** klapperl joined
[02:46] *** sctt joined
[02:48] *** klapperl_ left
[02:52] <[Coke]> raydiak: what's your rt account id?

[03:03] <raydiak> [Coke]: I log in with bitcard using [email@hidden.address] ...is that the id you're asking for?

[03:08] <[Coke]> top line: "Logged in as..."

[03:09] <[Coke]> kicking off a daily run on the new box

[03:09] <[Coke]> Group already has member: [email@hidden.address]
[03:10] <[Coke]> You already have full privs. Can you give us a URL you're trying to use that isn't letting you close tickets?

[03:14] <raydiak> oh weird, now I can see my tickets

[03:15] <[Coke]> .... maybe I clicked twice

[03:15] <[Coke]> enjoy. :)

[03:16] <raydiak> thanks :)

[03:25] *** klapperl_ joined
[03:25] *** bjz joined
[03:27] *** ingy left
[03:27] *** ingy joined
[03:27] *** klapperl left
[03:50] *** pdcawley left
[03:52] *** pdcawley joined
[03:56] *** rurban joined
[04:44] *** xinming_ left
[04:46] *** xinming joined
[05:22] *** hoverboard left
[05:34] *** rurban left
[05:47] *** Ejp joined
[05:47] *** Ejp left
[05:56] *** bjz left
[05:57] <moritz> good morning

[06:08] <nwc10> good UGT moritz

[06:19] *** xinming left
[06:21] *** xinming joined
[06:24] *** bjz joined
[06:24] *** bjz left
[06:24] *** bjz joined
[06:27] *** bjz left
[06:27] *** bjz joined
[06:33] *** hoverboard joined
[06:34] *** rurban joined
[06:39] *** rurban left
[06:47] *** rurban joined
[06:51] *** bjz left
[06:52] *** rurban left
[06:54] <moritz> <TimToady> | is not, in that sense, a variadic parameter, because from the standpoint of the binding, it's supposed to consume 0 args, not all of them.

[06:55] <moritz> if that's true, you can't do  sub redispatch(|a) { other(|a) }

[06:55] <moritz> because the |a wouldn't consume any arguments, so calling the sub with non-zero arguments always bind-ails

[06:56] <moritz> (that's from http://irclog.perlgeek.de/perl6/2014-03-01#i_8369448 )

[06:57] <moritz> maybe we need both mechanisms, with different syntax

[07:03] *** BenGoldberg left
[07:24] <TimToady> just be cause a doesn't *consume* the arguments, doesn't mean the arguments aren't in a

[07:24] <TimToady> one must either clone any argments desired after a |a (none in this case), or have referential purity into the remaining capture so that both can use it

[07:25] <TimToady> |a takes a snapshot of the rest of the arguments without consuming them from the standpoint of subsequent parameters

[07:27] <moritz> but that means that   sub a(|x) { }; a(42); is a bind fail

[07:27] <moritz> because nothing consumes the 42

[07:27] <moritz> which is not at all how we handle things today

[07:28] <moritz> p6: sub a(|x) { say x }; a 42

[07:28] <camelia> rakudo-parrot 45e230, rakudo-jvm 45e230, rakudo-moar 45e230: OUTPUT¬´42‚ê§¬ª

[07:28] <camelia> ..niecza v24-109-g48a8de3: OUTPUT¬´\(42)‚ê§¬ª

[07:31] <TimToady> hmm, well then, we have a contradictory spec, who'd'a thunk it?

[07:33] <TimToady> sub a(|x) { my ($first) ::= x; say $first; }; a(42)

[07:33] <TimToady> r: sub a(|x) { my ($first) ::= x; say $first; }; a(42)

[07:33] <camelia> rakudo-parrot 45e230, rakudo-jvm 45e230, rakudo-moar 45e230: OUTPUT¬´42‚ê§¬ª

[07:33] *** darutoko joined
[07:33] <TimToady> I guess there's a workaround

[07:34] <TimToady> but if that can work, why not (|x, $first) ?

[07:35] <TimToady> obviously that can't match a()

[07:35] <TimToady> but that seems to be the intent here

[07:35] <TimToady> (to not match a())

[07:35] <TimToady> and one could say (|x, $first?)

[07:36] <TimToady> well, I need to think about all that s'more

[07:36] *** xinming left
[07:37] <lue> TimToady: maybe |c could be the more general version of *@c, at least based on current behavior in rakudo ? [that is, *@c must be the last positional, and |c would be required to be the last parameter at all.]

[07:37] <lue> ‚ôò #perl6 o/

[07:37] <moritz> if we allow both sub a(|x)  to work as it does now in niecza and rakudo, and allow (|x, $first), then the | does two rather different things in those two cases

[07:38] <moritz> and I wouldn't like that

[07:38] <moritz> maybe we should steal the <?assertion> syntax from regexes and says that |?x binds the rest of the argument list without consuming anything

[07:38] *** xinming joined
[07:39] * moritz has updated the software on feather2

[07:39] *** xinming left
[07:41] *** dalek joined
[07:41] *** ChanServ sets mode: +v dalek

[07:41] <moritz> now feather3...

[07:42] <moritz> ... and host07 (camelia's home)

[07:46] *** xinming joined
[07:46] *** LLamaRider left
[07:46] *** LLamaRider joined
[07:53] <moritz> m: say 'sanity'

[07:53] <camelia> rakudo-moar 45e230: OUTPUT¬´sanity‚ê§¬ª

[07:54] <moritz> feather3 upgrade was more bumpy, since it ran out of disc sapce in the process

[07:57] <moritz> http://wasyl.eu/programming/2014/03/01/introducing-september.html looks interesting

[08:02] *** bjz joined
[08:06] *** pdcawley left
[08:13] *** pdcawley joined
[08:32] *** sctt left
[08:37] <timotimo> o/

[08:41] *** sctt joined
[08:42] <timotimo> which machine hosts dalek?

[08:42] <timotimo> are you going to fix dalek, too, moritz?

[08:46] *** xinming left
[08:48] *** xinming joined
[08:49] *** rurban joined
[08:50] *** FROGGS_ is now known as FROGGS

[08:50] <FROGGS> morning

[08:53] *** berekuk joined
[08:53] *** rurban left
[09:01] *** radhe joined
[09:03] *** rindolf joined
[09:03] <radhe> how i can add two number and print into screen in Perl6

[09:05] <FROGGS> p: say 6 + 3

[09:05] <camelia> rakudo-parrot 45e230: OUTPUT¬´9‚ê§¬ª

[09:05] <FROGGS> p: print 4 + 5

[09:05] <camelia> rakudo-parrot 45e230: OUTPUT¬´9¬ª

[09:06] <radhe> thanks

[09:08] *** radhe left
[09:10] <masak> good antenoon, #perl6

[09:10] <FROGGS> hi masak 

[09:33] *** pdcawley left
[09:33] *** pdcawley joined
[09:35] <masak> moritz: September looks nice.

[09:35] <masak> moritz: I predict there will be interesting corner cases wrt scoping, though.

[09:36] <masak> moritz: like, the 'until' macro he mentions at the end does not seem to give the loop body its own scope. or -- if it does -- what's the difference between it and the condition?

[09:37] <masak> moritz: how would I communicate that things declared in the '(;;)' part of a C-style for loop should be included in the block scope? or is that simply not allowed?

[09:38] <masak> moritz: what about the times when I want to .resolve() a block but have it act like a thunk rather than a block with its own scope? what about the times when I want non-hygienic variable lookup?

[09:39] <dalek> roast: 4b5c5c9 | larry++ | S05-mass/properties-derived.t:

[09:39] <dalek> roast: don't pick a future unified char as non-unified

[09:39] <dalek> roast: 

[09:39] <dalek> roast: The test picked for a non-Unified_Ideograph character the first

[09:39] <dalek> roast: character after the CJK area.  Unfortunately, this is precisly where

[09:39] <dalek> roast: the Unicode Consortium adds new characters (and in fact did).  Instead,

[09:39] <dalek> roast: pick the first character before CJK as a sample non-CJK character.

[09:39] <dalek> roast: review: https://github.com/perl6/roast/commit/4b5c5c9d22

[09:39] <timotimo> dalek \o/

[09:40] <FROGGS> and TimToady++ :o)

[09:43] *** berekuk left
[09:47] *** vendethiel joined
[09:47] <moritz> masak: yes, interesting questions

[09:49] *** berekuk joined
[09:50] *** rurban joined
[09:50] <masak> it's all about scopes. lexical scoping is (as we've discovered over the years) a great way to achieve sanity.

[09:50] <masak> since macros intentionally mess with lexical scoping, they have to do so carefully, with style, and with a higher goal in mind.

[09:51] <moritz> and explicitly

[09:51] <TimToady> r: say so "

[09:51] <camelia> rakudo-parrot 45e230, rakudo-jvm 45e230, rakudo-moar 45e230: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Unable to parse expression in double quotes; couldn't find final '"' ‚ê§at /tmp/tmpfile:1‚ê§------> [32msay so "[33m‚èè[31m<EOL>[0m‚ê§    expec‚Ä¶¬ª

[09:52] <moritz> does anybody still use the apache server on feather3?

[09:52] <FROGGS> moritz: panda perhaps? http://feather.perl6.nl:3000/projects.json

[09:52] <TimToady> r: say so "Êµ∑" ~~ /<:Ideographic>/

[09:52] <camelia> rakudo-moar 45e230: OUTPUT¬´False‚ê§¬ª

[09:52] <camelia> ..rakudo-parrot 45e230, rakudo-jvm 45e230: OUTPUT¬´True‚ê§¬ª

[09:52] * masak has been meaning to a few times

[09:53] <moritz> FROGGS: that's feather1, and not apache :-)

[09:53] <masak> TimToady: moarbug?

[09:53] <TimToady> that should be fixed with the latest MoarVM HEAD

[09:53] <FROGGS> moritz: okay :o)

[09:53] <masak> TimToady: oh, ok.

[09:53] <TimToady> someone needs to bump it though

[09:53] <FROGGS> I can do that in a minute

[09:53] * TimToady already stayed up about 2 hours too late fixing this...

[09:54] <TimToady> t/spec/S05-mass/properties-derived.t is now down to about 4 failing tests

[09:54] <FROGGS> cool!

[09:54] *** rurban left
[09:55] <TimToady> zzz &

[09:55] <FROGGS> TimToady: sleep well

[09:56] <moritz> oh, it seems feather3 used to host try.rakudo.org

[09:56] <moritz> which is defunct anyway

[09:57] <moritz> so I'm going to switch off that apache

[09:58] *** pippo joined
[09:58] *** pippo left
[09:58] *** pippo joined
[10:01] <masak> moritz++

[10:02] <masak> what does http://feather.perl6.nl:3000/projects.json use, if not apache?

[10:03] <moritz> some perl 5 based PSGI/Plack web server, iirc

[10:06] *** grondilu joined
[10:07] <FROGGS> hmmm, TimToady has not pushed to MoarVM it seems

[10:08] <masak> slacker! :P

[10:08] * masak feels a sudden urge to add more ':P's to that...

[10:08] <FROGGS> ahh, he pushed to its own... shall I steal his commits? :P

[10:09] <masak> FROGGS: sure.

[10:09] <TimToady> fixed it alrady

[10:09] <TimToady> *already

[10:09] <moritz> TimToady++

[10:09] <FROGGS> TimToady++ # off you go to bed!

[10:09] <FROGGS> *g*

[10:09] <TimToady> I was kinda wondering why dalek didn't report it on #moarvm

[10:10] <masak> man, I don't like that you can only Ctrl+D once in a program. :/

[10:10] <masak> I have what I feel is a real use case for being able to Ctrl+D several times.

[10:10] <FROGGS> ctrl+d in a program?

[10:10] <TimToady> ^D really

[10:10] <masak> right.

[10:10] <masak> I have a main program which accepts stuff from $*STDIN.

[10:11] <masak> I just threw in a 'use Grammar::Debugger' in the module that the main program uses.

[10:11] <masak> it correctly goes into the debugger, but it (incorrectly) aborts it right away because *we're already ^D'd* :/

[10:11] <masak> feels like the wrong least-surprise...

[10:12] <moritz> libc upgraded on feather1

[10:12] <dalek> nqp: a2324ac | (Tobias Leich)++ | tools/build/MOAR_REVISION:

[10:12] <dalek> nqp: bump moar rev for unicode property fixes

[10:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a2324ac2a6

[10:13] <dalek> rakudo/nom: 652a1fa | (Tobias Leich)++ | tools/build/NQP_REVISION:

[10:13] <dalek> rakudo/nom: bump nqp+moar rev for unicode property fixes

[10:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/652a1fa6c4

[10:19] *** dmol joined
[10:21] *** spider-mario joined
[10:21] <dalek> nqp: 591268e | moritz++ | Configure.pl:

[10:21] <dalek> nqp: [Configure] support --backends=all

[10:21] <dalek> nqp: review: https://github.com/perl6/nqp/commit/591268e537

[10:30] *** kivutar joined
[10:31] *** spider-mario left
[10:35] <moritz> who uses X on feather?

[10:35] <masak> jnthn: Grammar::Debugger appears busted... https://gist.github.com/masak/eccadc58b72cd32f720e

[10:36] <masak> jnthn: (on Rakudo Moar)

[10:36] <masak> jnthn: I golfed my own program down to that. if it'd help, I could also golf down Grammar::Debugger to what's wrong.

[10:38] <FROGGS> a PR might also help :o)

[10:38] <FROGGS> masak: btw: https://github.com/masak/gge/pulls

[10:38] <masak> yes, of course. but golfing comes first.

[10:39] *** denisboyun joined
[10:40] <masak> FROGGS: merged both pull requests. thanks.

[10:40] <FROGGS> cool! thank you

[10:40] *** spider-mario joined
[10:46] *** tgt joined
[10:46] <masak> no, thank *you*.

[10:47] *** aborazmeh joined
[10:47] <timotimo> is gge still functional?

[10:48] <FROGGS> I've not tested it

[10:52] <timotimo> the COOLTHINGS document from docs/ should be reviewed by people with lots of tuits :P

[10:54] <timotimo> (but not built on top of gge; we should now be able to build all that on top of nqp::getcomp and rakudo)

[10:59] <masak> agreed.

[10:59] <masak> GGE was written in a time when Rakudo was a lot less bootstrapping than it is now.

[11:08] *** kivutar left
[11:13] *** aborazmeh left
[11:33] <timotimo> i'm kind of glad i joined the perl6 effort after that period :P

[11:35] <masak> r: say "\0xA0"

[11:35] <camelia> rakudo-parrot 45e230, rakudo-jvm 45e230, rakudo-moar 45e230: OUTPUT¬´‚êÄxA0‚ê§¬ª

[11:35] <masak> r: say "\xA0"

[11:35] <camelia> rakudo-parrot 45e230, rakudo-jvm 45e230, rakudo-moar 45e230: OUTPUT¬´¬†‚ê§¬ª

[11:36] <timotimo> .u ‚êÄ

[11:36] <yoleaux> U+2400 SYMBOL FOR NULL [So] (‚êÄ)

[11:36] <timotimo> ah

[11:38] <masak> so... NUL is the symbol for NULL? :)

[11:40] <FROGGS> how DULL :o)

[11:53] <timotimo> i couldn't read it on my font

[11:53] <timotimo> on this display it looks kind of like a 45¬∞ turned ellipsis

[11:53] <timotimo> .u ¬∞

[11:53] <yoleaux> U+00B0 DEGREE SIGN [So] (¬∞)

[12:02] <timotimo> huh

[12:02] <timotimo>     $config<build-date>     := '2012-08-05T16:57:45Z';

[12:02] <timotimo> that's hard-coded in the debugger

[12:02] <timotimo> interesting choice

[12:02] <tadzik> hah

[12:03] <jnthn> haha

[12:03] <timotimo> oh wow

[12:03] <jnthn> The debugger was built "in secret" and "quickly" 'cus I wanted to show it off in a talk. I probably stole from the generated main.nqp ;)

[12:03] <timotimo> i just realized

[12:04] <timotimo> i could introduce a repr QStringList for list_s and QString for strings and have super simple qt interop

[12:04] <timotimo> that's crazy cool

[12:05] <jnthn> timotimo: That's one of the points of repr poly ;)

[12:05] <timotimo> similarly QMap for nqp::hash

[12:05] <timotimo> yeah, but ... wow

[12:06] <timotimo> well, the string ops are kind of hardcoded to use MVM_string_... functions, are they not?

[12:07] *** arnsholt joined
[12:07] <jnthn> timotimo: Oh, I think the better option is that your QString repr is one that can *unbox* to an MVMString.

[12:07] <timotimo> ah, hm.

[12:07] <jnthn> then you just produce an MVMString on demand and cache it.

[12:08] <jnthn> That's how I'd do it.

[12:08] <timotimo> agreed.

[12:08] <jnthn> Shoudn't be too hard. :)

[12:08] <jnthn> .oO( famous last words )

[12:08] <timotimo> it's not really a sensible thing to do *right now*

[12:08] <timotimo> except it would make a cool blog post at some point

[12:09] <jnthn> yeah :)

[12:09] <jnthn> It is a neat idea. ;)

[12:11] *** jercos joined
[12:15] <jnthn> &

[12:39] *** araujo left
[12:41] *** araujo joined
[12:42] <colomon> masak: Text::CSV is failing in the smoke test

[12:42] <colomon> labster: Lingua::Number is failing in the smoke test

[12:43] <colomon> Sum is still failing as well

[12:45] *** hoverboard left
[12:53] <colomon> skids: Sum is failing in the smoke test

[13:17] *** rurban joined
[13:28] *** denisboyun left
[13:29] *** denis_boyun joined
[13:35] *** molaf joined
[13:35] *** denis_boyun__ joined
[13:36] *** denis_boyun left
[13:53] <masak> colomon: ok, thanks for the heads-up. gonna run the tests locally and see what's up.

[13:54] *** cognominal joined
[14:01] <masak> I managed to locate the error, but I don't know why it's wrong yet. seems there's been some slippage in the underlying grammar semantics.

[14:01] *** virtualsue joined
[14:08] *** beastd joined
[14:15] *** xragnar_ joined
[14:15] *** xragnar is now known as Guest83346

[14:15] *** Guest83346 left
[14:15] *** xragnar_ is now known as xragnar

[14:21] *** xenoterracide left
[14:22] *** sctt left
[14:23] *** xenoterracide joined
[14:31] *** Mouq joined
[14:32] *** virtualsue left
[14:38] *** xenoterracide left
[14:41] *** virtualsue joined
[14:45] *** rindolf left
[15:06] <masak> for people who would like to trailing-comma their JSON: http://json5.org/

[15:06] <Mouq> masak: I was just working on a JSON::Tiny fork to parse it :)

[15:07] <masak> (though I fear the original JSON has extreme simplicity going for it, and that's part of why it has so many parsers. this new proposal loses that, with some-would-argue relatively little gain.)

[15:07] <masak> Mouq: oh wow, cool.

[15:07] <masak> Mouq: if you get it to some relatively ready state, make sure to put in a HN comment about it: https://news.ycombinator.com/item?id=7325735

[15:07] <Mouq> masak: Though I agree, I think it kind of misses the point

[15:07] <Mouq> masak: -ofun

[15:08] <Mouq> *O

[15:09] *** rindolf joined
[15:09] *** telex left
[15:10] *** telex joined
[15:13] * grondilu likes YAML too

[15:13] <masak> Mouq: then I think we are in agreement.

[15:14] <masak> Mouq: I was mostly talking about the amount of uptake you're likely to see on anything JSON5.

[15:14] <vendethiel> YAML indeed does too much with its inheritance system, object etc

[15:14] <vendethiel> if YAML was just "JSON With Meaningful Indentation", I think it'd be better (and it'd make implem. etc not such a pain)

[15:17] <Mouq> perlcabal.org  is down :(

[15:19] *** xinming_ joined
[15:20] <Mouq> https://github.com/Mouq/json5

[15:20] <Mouq> Doesn't actually add change much from JSON::Tiny atm

[15:22] *** xinming left
[15:24] *** denis_boyun__ left
[15:32] <masak> Mouq++

[15:34] *** zakharyas joined
[15:35] <dalek> rakudo/pod-table: 9626115 | Mouq++ | src/Perl6/ (2 files):

[15:35] <dalek> rakudo/pod-table: Get much closer to doing pod table right

[15:35] <dalek> rakudo/pod-table: 

[15:35] <dalek> rakudo/pod-table: There's still some major bug somewhere getting everything serialized

[15:35] <dalek> rakudo/pod-table: correctly

[15:35] <dalek> rakudo/pod-table: review: https://github.com/rakudo/rakudo/commit/96261151f3

[15:35] *** LLamaRider left
[15:35] * Mouq had to commit so he could checkout nom and build a clean perl6

[15:37] <TimToady> r: say so "Êµ∑" ~~ /<:Ideographic>/

[15:37] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´True‚ê§¬ª

[15:37] <TimToady> much better

[15:37] <Mouq> \o/

[15:40] *** virtualsue left
[15:41] *** xinming_ left
[15:41] <Mouq> ...we don't actually have a YAML parser in our ecosystem(?!)

[15:42] *** xinming joined
[15:47] *** xinming left
[15:47] *** xinming joined
[15:49] <grondilu> every time I try to write a grammar for a language, I fail miserably.  I suspect grammars are a bit tough to write and that's how I explain we have so few of them.  And that include YAML.

[15:51] *** [Sno] left
[15:52] <[Coke]> I have most of a test run done... forget I needed a perlbrew setup for post processing.

[15:52] <geekosaur> working grammars take some forethought and design

[15:54] <grondilu> well sometimes it's hard even with *very* simple languages.   Yesterday I tried one here with the basic Wolfram language.  I could not get it to work, FROGGS gave it a go and could not either.

[15:56] <grondilu> (search 'grammar Foo' if you want to know what I'm talking about)

[15:58] <grondilu> (eg. Foo[bar,and[so,on]])

[15:59] *** [Sno] joined
[15:59] <grondilu> if this is not easy, then there is a problem with grammars, imho.

[15:59] <[Coke]> what about that did you get stuck on?

[15:59] <grondilu> I could not get it to work recursively

[15:59] <[Coke]> let's see, you have what look like comma separated lists, and nested brackets?

[16:00] <grondilu> yes

[16:03] * Mouq runs with perl6-debug-m

[16:03] <Mouq> It looks like it's LTM weird...

[16:04] <grondilu> without being recursive, it's easy:

[16:04] <grondilu> r: grammar Wolfram { rule TOP { ^ <expr> $ }; token expr { <symbol> \[ ~ \] [ <symbol>+ % \, ]? }; token symbol { <.alpha>+ } }; say Wolfram.parse("Foo[Bar,cuz]")

[16:04] *** xinming_ joined
[16:04] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´ÔΩ¢Foo[Bar,cuz]ÔΩ£‚ê§ expr => ÔΩ¢Foo[Bar,cuz]ÔΩ£‚ê§  symbol => ÔΩ¢FooÔΩ£‚ê§  symbol => ÔΩ¢BarÔΩ£‚ê§  symbol => ÔΩ¢cuzÔΩ£‚ê§‚ê§¬ª

[16:04] <jnthn> r: my grammar G { token TOP {<ts>}; token ts { <t>+ % ',' }; token t { \w+ [ '[' ~ ']' <ts> ]? } }; say G.parse('Foo[bar,and[so,on]]').Str

[16:04] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´Foo[bar,and[so,on]]‚ê§¬ª

[16:05] <grondilu> r: my grammar G { token TOP {<ts>}; token ts { <t>+ % ',' }; token t { \w+ [ '[' ~ ']' <ts> ]? } }; say G.parse('Foo[bar,and[so,on]]')

[16:05] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´ÔΩ¢Foo[bar,and[so,on]]ÔΩ£‚ê§ ts => ÔΩ¢Foo[bar,and[so,on]]ÔΩ£‚ê§  t => ÔΩ¢Foo[bar,and[so,on]]ÔΩ£‚ê§   ts => ÔΩ¢bar,and[so,on]ÔΩ£‚ê§    t => ÔΩ¢barÔΩ£‚ê§    t => ÔΩ¢and[so,on]ÔΩ£‚ê§     ts => ÔΩ¢so,onÔΩ£‚ê§      t => ‚Ä¶¬ª

[16:05] *** xinming left
[16:07] * [Coke] had started up a little project and started working this out and sees that jnthn just ripped something off his head. Nice.

[16:07] <[Coke]> "ripped something off his head" << clearly I need coffee.

[16:08] <grondilu> I'm amazed he managed to write this without alternation |

[16:09] <jnthn> I did make one mistake in my first attempt. :)

[16:09] <jnthn> I wrote ** intead of %. I'm only 3 years out of date on syntax :P

[16:10] <grondilu> it's kind of a cheat, though

[16:10] <grondilu> r: my grammar G { token TOP {<ts>}; token ts { <t>+ % ',' }; token t { \w+ [ '[' ~ ']' <ts> ]? } }; say G.parse('Foo[bar,and[so,on]],THIS_SHOULD_FAIL')

[16:10] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´ÔΩ¢Foo[bar,and[so,on]],THIS_SHOULD_FAILÔΩ£‚ê§ ts => ÔΩ¢Foo[bar,and[so,on]],THIS_SHOULD_FAILÔΩ£‚ê§  t => ÔΩ¢Foo[bar,and[so,on]]ÔΩ£‚ê§   ts => ÔΩ¢bar,and[so,on]ÔΩ£‚ê§    t => ÔΩ¢barÔΩ£‚ê§    t => ÔΩ¢and[so,on]ÔΩ£‚ê§  ‚Ä¶¬ª

[16:11] <grondilu> the TOP entry is supposed to be only one term

[16:11] <jnthn> grondilu: Oh, then call <t> there instead of <ts>

[16:11] *** __thou joined
[16:11] <grondilu> r: my grammar G { token TOP {<t>}; token ts { <t>+ % ',' }; token t { \w+ [ '[' ~ ']' <ts> ]? } }; say G.parse('Foo[bar,and[so,on]],THIS_SHOULD_FAIL')

[16:11] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´ÔΩ¢Foo[bar,and[so,on]]ÔΩ£‚ê§ t => ÔΩ¢Foo[bar,and[so,on]]ÔΩ£‚ê§  ts => ÔΩ¢bar,and[so,on]ÔΩ£‚ê§   t => ÔΩ¢barÔΩ£‚ê§   t => ÔΩ¢and[so,on]ÔΩ£‚ê§    ts => ÔΩ¢so,onÔΩ£‚ê§     t => ÔΩ¢soÔΩ£‚ê§     t => ÔΩ¢onÔΩ£‚ê§‚ê§¬ª

[16:11] <grondilu> r: my grammar G { token TOP {^<t>$}; token ts { <t>+ % ',' }; token t { \w+ [ '[' ~ ']' <ts> ]? } }; say G.parse('Foo[bar,and[so,on]],THIS_SHOULD_FAIL')

[16:11] <jnthn> Uh, and apparently parse ain't anchoring the end...

[16:11] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´#<failed match>‚ê§¬ª

[16:11] <grondilu> go damned it you're right

[16:13] <grondilu> I struggled a long time with this an you cracked it almost instantly.  That's embarassing.

[16:13] *** circuit joined
[16:13] <jnthn> It's practice, I think. I think debugging them is often hard, though, which is why I've written 3 things by now (sadly, 1 currently busted) to try and help with that.

[16:14] <jnthn> What I'd really like to build is a kind of interactive "grammar assembly tool".

[16:14] <Mouq> perl6-debug++ jnthn++

[16:15] *** berekuk left
[16:20] *** rindolf left
[16:26] *** myfree joined
[16:29] <grondilu> r: my grammar G { token TOP {^<t>$}; token ts { <t>+ % ',' }; token t { \w+ [ '[' ~ ']' <ts> ]? } }; say G.parse('Foo[bar][and]')

[16:29] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´#<failed match>‚ê§¬ª

[16:29] <Mouq> r: my grammar G { token TOP {^<t>$}; token ts { <t>+ % ',' }; token t { \w+ [ '[' ~ ']' <ts> ]* } }; say G.parse('Foo[bar][and]')

[16:29] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´ÔΩ¢Foo[bar][and]ÔΩ£‚ê§ t => ÔΩ¢Foo[bar][and]ÔΩ£‚ê§  ts => ÔΩ¢barÔΩ£‚ê§   t => ÔΩ¢barÔΩ£‚ê§  ts => ÔΩ¢andÔΩ£‚ê§   t => ÔΩ¢andÔΩ£‚ê§‚ê§¬ª

[16:29] <Mouq> woo

[16:30] *** berekuk joined
[16:30] <Mouq> grondilu: sorry if I took the fun out of making that work

[16:31] <grondilu> yeah bu it does not parse Foo[bar] as a token

[16:31] <grondilu> I mean, it's supposed to mean (Foo[bar])[and]

[16:31] *** myfree left
[16:31] <grondilu> so Foo[bar] should stand out in the parse tree

[16:32] *** circuit left
[16:32] <grondilu> though I'm not sure, I should verify on wolframalpha

[16:33] <grondilu> anyway yes it parses, but the logic of the grammar is a bit obfustated 

[16:33] *** xinming_ left
[16:34] <grondilu> *cated

[16:35] *** xinming joined
[16:36] <[Coke]> grondilu: I presume your actions would make that clear.

[16:36] *** circuit joined
[16:38] <dalek> perl6-roast-data: bb81017 | coke++ | / (6 files):

[16:38] <dalek> perl6-roast-data: today

[16:38] <dalek> perl6-roast-data: 

[16:38] <dalek> perl6-roast-data: First run on new host - not yet automated

[16:38] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/bb81017417

[16:38] <dalek> perl6-roast-data: 12ce0cc | coke++ | bin/cull:

[16:38] <dalek> perl6-roast-data: New host, new minor version of perl

[16:38] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/12ce0cc97e

[16:38] <FROGGS> and in the end you would use better token names

[16:39] <[Coke]> +S02-types/baghash.rakudo.parrot aborted 64 test(s)

[16:39] *** molaf_ joined
[16:39] <grondilu> well, yeah I guess.  I'm possibly just trying to rationalize the fact that I was unable to come up with this in the first place :/

[16:40] <grondilu> using alternation seemed so much natural, like in a BNF grammar.  And yet it did not work at all.

[16:40] <FROGGS> only 71 fails left on moar!!!

[16:40] *** virtualsue joined
[16:40] <FROGGS> TimToady++

[16:40] <Mouq> [Coke]++

[16:40] <Mouq> grondilu++

[16:40] <Mouq> FROGGS++

[16:40] <Mouq> jnthn++

[16:40] <Mouq> geekosaur++

[16:41] <FROGGS> 190 ppl to go :o)

[16:41] <FROGGS> 189 perhaps

[16:41] <Mouq> masak++

[16:41] <Mouq> vendethiel++

[16:41] <FROGGS> [Coke]: I'm going to have a look at that

[16:41] <vendethiel> wut wat

[16:41] <Mouq> That's everyone I've seen today

[16:41] <grondilu> (@hacker-in-the-world.grep({$_ ~~ Perl6User}))¬ª++

[16:41] <vendethiel> oh okay Mouq++

[16:42] <geekosaur> well, you do need to know how the grammar machinery works and what model it uses. I'd write a different thing for LR vs. LALR(1)

[16:42] *** molaf left
[16:43] <timotimo> grondilu: i think you can write .grep(Perl6User) instead of .grep({ $_ ~~ Perl6User })

[16:43] <grondilu> timotimo: actually not

[16:43] <timotimo> since grep already uses smartmatch semantics for its argument

[16:43] <grondilu> r: say ('foo', 4).grep(Int)

[16:43] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´4‚ê§¬ª

[16:44] <grondilu> hum

[16:44] <grondilu> I remembered omthing similar that did not work

[16:44] <FROGGS> star: say ('foo', 4).grep(Int)

[16:44] <camelia> star 2013-09: OUTPUT¬´4‚ê§¬ª

[16:44] * Mouq definitely didn't realize that

[16:44] <pippo> o/ #perl6

[16:44] <Mouq> r: say 4 ~~ {$_ ~~ Int}

[16:44] <FROGGS> hi pippo

[16:45] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´True‚ê§¬ª

[16:45] <Mouq> r: say 4 ~~ {$_ ~~ Num}

[16:45] <grondilu> r: subset Even of Int where * %% 2; say (^10).grep(Even)

[16:45] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´False‚ê§¬ª

[16:45] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´0 2 4 6 8‚ê§¬ª

[16:45] <grondilu> r: subset Even of Int where * %% 2; say (^10).grep(Even)

[16:45] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´0 2 4 6 8‚ê§¬ª

[16:45] <grondilu> oh, I remember now

[16:46] <pippo> Can someone explain me what does '[' ~ ']' mean in a grammar. Particularly the "~" ? For me is string concatenation but it does not seem used like this there. 

[16:46] <timotimo> yes, it's the "surrounded by" operator

[16:46] <timotimo> and it operates on three tokens, rather than two

[16:46] <FROGGS> m: say "[abc]" ~~ /'[' ~ ']' \w+/

[16:46] <camelia> rakudo-moar 652a1f: OUTPUT¬´ÔΩ¢[abc]ÔΩ£‚ê§‚ê§¬ª

[16:46] <grondilu> r: subset TenMultiple where * %% 10; say 0, 1 ... TenMultiple

[16:46] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´0‚ê§¬ª

[16:46] <timotimo> so a ~ b c means roughly the same as a c b

[16:47] <FROGGS> pippo it is about '<opener>' ~ '<closer>' <something in the middle>

[16:47] <timotimo> but it gives extra nice error reporting when b doesn't get found

[16:47] <grondilu> r: subset TenMultiple where * %% 10; say 0, 1 ... TenMultiple   # <= here smarmatch does not work as with grep

[16:47] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´0‚ê§¬ª

[16:47] <timotimo> grondilu: 0 is %% 10, so it stops right there

[16:47] <pippo> FROGGS: timotimo: Thank you! 

[16:47] <timotimo> r: subset TenMultiple where * %% 10; say 1, 2 ... TenMultiple

[16:47] <grondilu> r: subset TenMultiple where * %% 10; say 1, 2 ... TenMultiple   # <= here smarmatch does not work as with grep

[16:47] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´1 2 3 4 5 6 7 8 9 10‚ê§¬ª

[16:47] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´1 2 3 4 5 6 7 8 9 10‚ê§¬ª

[16:48] <grondilu> ahh

[16:48] <timotimo> the end point gets matched against the whole sequence on the left of ...

[16:48] <timotimo> r: say 1, 2, 3, 4, 5 ... * > 3;

[16:48] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´1 2 3 4‚ê§¬ª

[16:48] <grondilu> so it must be something else.  I'd swear I once had to write {$_ ~~ SomeType} instead of just SomeType

[16:48] <timotimo> gotta run now

[16:49] <pippo> m: say "[abc[abc]]" ~~ /'[' ~ ']' \w+/;

[16:49] <camelia> rakudo-moar 652a1f: OUTPUT¬´Unable to parse expression in ; couldn't find final ']' ‚ê§  in any FAILGOAL at gen/moar/stage2/QRegex.nqp:1139‚ê§  in method ACCEPTS at src/gen/m-CORE.setting:12724‚ê§  in method ACCEPTS at src/gen/m-CORE.setting:798‚ê§  in block  at /tmp/KfKFKnMN8b:1‚ê§‚ê§¬ª

[16:49] * Mouq thinks someone should definitely fix that '[' ~ ']' parsefail causes the whole program to die

[16:50] <pippo> m: say "[abc[abc]]" ~~ /'[' ~ ']' .+/;

[16:50] <camelia> rakudo-moar 652a1f: OUTPUT¬´Unable to parse expression in ; couldn't find final ']' ‚ê§  in any FAILGOAL at gen/moar/stage2/QRegex.nqp:1139‚ê§  in method ACCEPTS at src/gen/m-CORE.setting:12724‚ê§  in method ACCEPTS at src/gen/m-CORE.setting:798‚ê§  in block  at /tmp/4EvUGTpmwV:1‚ê§‚ê§¬ª

[16:50] <timotimo> actually, i can stay \o/

[16:50] <Mouq> pippo: Your .+ is eating everything to the end

[16:50] <FROGGS> m: say "[abc[abc]]" ~~ /'[' ~ ']' .+?/;

[16:50] <camelia> rakudo-moar 652a1f: OUTPUT¬´Unable to parse expression in ; couldn't find final ']' ‚ê§  in any FAILGOAL at gen/moar/stage2/QRegex.nqp:1139‚ê§  in method ACCEPTS at src/gen/m-CORE.setting:12724‚ê§  in method ACCEPTS at src/gen/m-CORE.setting:798‚ê§  in block  at /tmp/QeGCXYa4vW:1‚ê§‚ê§¬ª

[16:50] <Mouq> Uh

[16:51] <FROGGS> n: say "[abc[abc]]" ~~ /'[' ~ ']' .+?/;

[16:51] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´Unhandled exception: Unable to parse anonymous regex‚ê§Couldn't find final ']'; gave up‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 1536 (die @ 5) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 2962 (Cursor.FAILGOAL @ 6) ‚ê§  at /tmp/SwsOyP3T6‚Ä¶¬ª

[16:51] <FROGGS> n: say "[abc[abc]]" ~~ /'[' ~ ']' <-[\]]>+/;

[16:51] <Mouq> m: say "[abc[abc]]" ~~ /'[' .+? ']'/;

[16:51] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´ÔΩ¢[abc[abc]ÔΩ£‚ê§‚ê§¬ª

[16:51] <camelia> rakudo-moar 652a1f: OUTPUT¬´ÔΩ¢[abc[abc]ÔΩ£‚ê§‚ê§¬ª

[16:52] <Mouq> The problem is that it dies on parsefail >:(

[16:52] <Mouq> So it never gets a chance to backtrack

[16:52] <timotimo> yeah, i think we need a better way to add a failure message to a failed parse

[16:52] <timotimo> better than to die inside the regex

[16:53] <timotimo> (which you can prevent the whole program from crashing with by using try)

[16:55] <pippo> Mouq: Thanks.

[16:56] *** xinming left
[16:57] *** xinming joined
[17:00] <FROGGS> r: say BagHash.new("a", "b", "b").grab: *

[17:00] <camelia> rakudo-moar 652a1f: OUTPUT¬´a b b‚ê§¬ª

[17:00] <camelia> ..rakudo-parrot 652a1f: OUTPUT¬´No such method 'value' for invocant of type 'Any'‚ê§  in method grab at gen/parrot/CORE.setting:15867‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[17:00] <camelia> ..rakudo-jvm 652a1f: OUTPUT¬´b a b‚ê§¬ª

[17:00] *** xfix joined
[17:08] *** xinming left
[17:09] *** xinming joined
[17:10] *** beastd left
[17:13] *** grondilu left
[17:14] *** Rotwang joined
[17:14] *** xinming_ joined
[17:15] *** xinming left
[17:16] *** jnap joined
[17:17] *** denis_boyun joined
[17:20] *** rurban left
[17:23] *** xinming_ left
[17:24] *** xinming joined
[17:24] * Mouq wishes `token type:subtype:subsubtype {*}` worked

[17:25] * Mouq is the one who make `token type:subtype {...}` work in the first place, so you don't have to use `token type:sym<subtype> {...}` when you don't actually need a <sym>

[17:33] *** xinming left
[17:35] *** xinming joined
[17:38] <TimToady> '[' ~ ']' isn't intended to backtrack, but to commit to the '['

[17:38] <TimToady> use the old-fashioned form if you want to backtrack

[17:42] <TimToady> we could maybe do it differently in a regex declaration than in a token declaration, I suppose

[17:44] * vendethiel wondered why we needed `'[' ~ ']'` at first and now knows

[17:44] <TimToady> it's sort of a convenience combinator

[17:45] * vendethiel likes % and %% very much, tho

[17:45] * vendethiel -- even if % is more interesting (IMHO!) than %%

[17:46] <TimToady> it's mostly there so you don't have to repeat yourself, as you generally do in a standard BNF-ish grammar

[17:47] <vendethiel> Expressions: ['Expression', Expression ; Expressions', 'Expression ;'] or something :-p

[17:48] * vendethiel hates working on coffeescript's grammar because of this

[17:51] <vendethiel> There's probably a YAML parser I can look at to see how significant whitespace is handled

[17:51] <vendethiel> (I guess through dynamic variables, though)

[17:53] <vendethiel> Oh, there's a YAML dumper but no parser. Mmh, that cool make for a good project I guess though.

[17:53] <vendethiel> I can probably inherit from the JSON parser

[17:56] *** tgt left
[18:01] *** virtualsue left
[18:03] *** mtk joined
[18:05] <Mouq> Sooo

[18:05] <Mouq> does anyone know why perlcabal.org is down?

[18:06] <FROGGS> no

[18:06] <Mouq> Ok

[18:07] *** tgt joined
[18:17] *** mtk left
[18:20] <Mouq> https://news.ycombinator.com/item?id=7329993

[18:20] *** mtk joined
[18:22] <dalek> rakudo/nom: f4c4d2a | (Tobias Leich)++ | src/core/Baggy.pm:

[18:22] <dalek> rakudo/nom: check for defined elements in Baggy.grab

[18:22] <dalek> rakudo/nom: 

[18:22] <dalek> rakudo/nom: For some reason the hash elements are already deleted on parrot when it is about to access

[18:22] <dalek> rakudo/nom: .value on it.

[18:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f4c4d2a7e4

[18:28] *** sftp joined
[18:44] <pippo> m: grammar G { token TOP {<t>}; token t  { '[' ~ ']' [<-[\]\[]>+ <t>?] };}; say G.parse("[abcd[abcd[abcd]]]");

[18:44] <camelia> rakudo-moar 652a1f: OUTPUT¬´ÔΩ¢[abcd[abcd[abcd]]]ÔΩ£‚ê§ t => ÔΩ¢[abcd[abcd[abcd]]]ÔΩ£‚ê§  t => ÔΩ¢[abcd[abcd]]ÔΩ£‚ê§   t => ÔΩ¢[abcd]ÔΩ£‚ê§‚ê§¬ª

[18:55] <dalek> roast: d626eb7 | larry++ | S05-grammar/parse_and_parsefile.t:

[18:55] <dalek> roast: update parse and subparse tests to match spec

[18:55] <dalek> roast: review: https://github.com/perl6/roast/commit/d626eb7548

[18:55] <dalek> rakudo/nom: 4d8734d | larry++ | src/core/Grammar.pm:

[18:55] <dalek> rakudo/nom: implement subparse, redef parse to require $

[18:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4d8734d4bb

[18:56] <TimToady> there may be a few .parses out there that need to change to .subparse

[19:03] <masak> TimToady++

[19:03] <masak> I think I can guess what that change was about.

[19:04] *** pippo left
[19:06] *** darutoko left
[19:12] <Mouq> r: grammar Foo { grammar Thing is Foo {method gist {"A fooey thing!"}}; method s { say ::Foo::Thing } }; Foo.new.s

[19:12] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´A fooey thing!‚ê§¬ª

[19:12] <Mouq> r: grammar Foo { grammar Thing is Foo {}; method s { say ::Foo::Thing } }; Foo.new.s

[19:12] <camelia> rakudo-moar 652a1f: OUTPUT¬´Cannot invoke null object‚ê§  in sub say at src/gen/m-CORE.setting:13265‚ê§  in method s at /tmp/tmpfile:1‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[19:12] <camelia> ..rakudo-jvm 652a1f: OUTPUT¬´No such method 'gist' for invocant of type 'Thing'‚ê§  in sub say at gen/jvm/CORE.setting:13267‚ê§  in method s at /tmp/tmpfile:1‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[19:12] <camelia> ..rakudo-parrot 652a1f: OUTPUT¬´No such method 'gist' for invocant of type 'Thing'‚ê§  in sub say at gen/parrot/CORE.setting:13309‚ê§  in method s at /tmp/tmpfile:1‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[19:17] *** tgt left
[19:18] <Mouq> r: my $*A := 1

[19:18] <camelia> rakudo-parrot 652a1f, rakudo-jvm 652a1f, rakudo-moar 652a1f: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Cannot use bind operator with this left-hand side‚ê§at /tmp/tmpfile:1‚ê§------> [32mmy $*A := 1[33m‚èè[31m<EOL>[0m‚ê§    expecting any of:‚ê§  ‚Ä¶¬ª

[19:18] <Mouq> n: my $*A := 1

[19:19] <camelia> niecza v24-109-g48a8de3: ( no output )

[19:24] *** mtk left
[19:31] *** tgt joined
[19:33] *** Zaydon joined
[20:00] <FROGGS> p6: my num $alpha = Nil; say $alpha

[20:00] <camelia> rakudo-jvm 4d8734, rakudo-moar 4d8734: OUTPUT¬´Cannot unbox a type object‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[20:00] <camelia> ..niecza v24-109-g48a8de3: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Malformed my at /tmp/tmpfile line 1:‚ê§------> [32mmy[33m‚èè[31m num $alpha = Nil; say $alpha[0m‚ê§‚ê§Parse failed‚ê§‚ê§¬ª

[20:00] <camelia> ..rakudo-parrot 4d8734: OUTPUT¬´0‚ê§¬ª

[20:01] *** virtualsue joined
[20:03] *** __thou left
[20:05] *** kurahaupo_mobile joined
[20:05] <FROGGS> moritz: there?

[20:06] <moritz> FROGGS: yes

[20:06] <FROGGS> perlcabal.org seems to be down

[20:07] <FROGGS> and it points to feather.perl6.nl

[20:07] <FROGGS> can you check that the service is running, or so?

[20:09] *** __thou joined
[20:09] <moritz> FROGGS: willdo

[20:09] <moritz> ...provided I get shell access to feather

[20:09] <moritz> it seems awefully slow

[20:09] <FROGGS> moritz++ # thank you

[20:10] * FROGGS reads S02-bits.pod in the meantime

[20:11] <moritz> [Coke]: I killed a 113h old perl6-p process of yours, seems to have been part of the daily star smoking

[20:11] *** Zaydon left
[20:12] <moritz> (on feather)

[20:18] * timotimo is finally watching Sneakers

[20:21] *** pippo joined
[20:22] <moritz> the apache setup on feather is... interesting

[20:22] *** hoverboard joined
[20:22] <FROGGS> hehe, I bet :o)

[20:23] *** perigrin left
[20:23] <moritz> including some hand-combined authz_* modules of which I never heard, and which stopped working after the libc upgrade

[20:23] *** perigrin joined
[20:23] <FROGGS> ohh well :/

[20:25] <moritz> but the real blocker is that I'm currently inside a gigantic dist-upgrade

[20:25] <moritz> and apache doesn't have a necesary module installed

[20:25] <moritz> and I can't install it until the dist-upgrade is through

[20:25] <moritz> so, patience :(

[20:26] <Mouq> moritz++

[20:26] <FROGGS> no hurry

[20:26] <FROGGS> yeah, moritz++

[20:27] *** circuit left
[20:31] <moritz> perlcabal.org is back... sorta :(

[20:34] <dalek> perl6.org: 324e2e3 | (Alexander Moquin)++ | source/compilers/index.html:

[20:34] <dalek> perl6.org: Add MoarVM to Rakudo description

[20:34] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/324e2e3f14

[20:38] *** mtk joined
[20:42] *** pippo left
[20:42] *** mtk left
[20:43] <moritz> I don't believe this

[20:43] <FROGGS> hmm?

[20:43] <moritz> some part of the upgrade has overwriten /var/www/

[20:43] <FROGGS> ewww

[20:44] <FROGGS> good that we tend to love repositories

[20:45] <timotimo> wat :(

[20:48] *** dmol left
[20:48] *** dmol joined
[20:48] <lue> On doc.perl6.org I just noticed something: why are we using ‚âº (PRECEDES OR EQUAL TO) instead of ‚â§ (LESS-THAN OR EQUAL TO) ? (same for ‚âΩ and ‚â•)

[20:49] <Mouq> lue: For the set op?

[20:49] <lue> Oh? The doc pages don't make any mention about sets though.

[20:50] <dalek> mu: 4b22709 | moritz++ | docs/feather/script/update-syn:

[20:50] <dalek> mu: restructure output dir a bit

[20:50] <dalek> mu: review: https://github.com/perl6/mu/commit/4b2270922c

[20:50] <Mouq> lue: Well, Bag op

[20:50] <lue> those too :)

[20:50] *** kivutar joined
[20:51] <Mouq> lue: Where are you talking about?

[20:51] <lue> The given signatures on the two pages don't have any type constraints, making it look like someone use the wrong characters for Unicode-based <= and >=

[20:51] <lue> http://doc.perl6.org/routine/infix:%3C%E2%89%BC%3E    http://doc.perl6.org/routine/infix:%3C%E2%89%BD%3E

[20:52] <Mouq> lue: They really don't have any type constraints... Their not actually documented, it's just kind of stub documentation

[20:52] <Mouq> r: say ('a','b') ‚âº ('a','b','b')

[20:52] <camelia> rakudo-parrot 4d8734, rakudo-jvm 4d8734, rakudo-moar 4d8734: OUTPUT¬´True‚ê§¬ª

[20:53] <Mouq> Its arguments are made into Bags

[20:53] * lue would argue we should really have ‚â§ and ‚â• in light of these operators :)

[20:53] <lue> and I just now realize I was blind to the use of the word "Bag" on those two pages :P

[20:54] <Mouq> lue: Again, not really your fault; there should be documentation that I haven't yet written

[20:54] <Mouq> r: say ('a','b','b') ‚âº ('a','b')

[20:54] <camelia> rakudo-parrot 4d8734, rakudo-jvm 4d8734, rakudo-moar 4d8734: OUTPUT¬´False‚ê§¬ª

[20:57] <Mouq> lue: I'd first like to fix what I noted here, though: https://github.com/perl6/doc/commit/8c84a

[20:58] <Mouq> lue: Though you can feel free to add documentation ;)

[21:00] <lue> :) Pretty soon I feel that we need to reorganize the docs in doc/ , by the way (namely, actually organize them.)

[21:03] <moritz> lue: why do you think they aren't organized?

[21:05] <lue> So far as I can see, everything is just thrown into lib/, with the only subdirs for namespaces (Backtrace::, X::)

[21:05] *** zakharyas left
[21:08] <lue> It'd be nice if, say, types were in src/types, tutorial docs in src/tuts, etc. (you can probably tell I don't agree with using LIBrary for documentation files, though that's an inconsequential preference :P)

[21:08] <Mouq> lue: I honestly don't see a problem with that, though I definitely think that the doc site should have separate Methods and Routines sections

[21:09] <Mouq> lue: Everything gets loaded into the program that generates the site anyway

[21:09] <Mouq> *at once

[21:09] <lue> I just don't like the looks of everything as it slowly makes `ls` output larger and larger. Seems that might just be preference though.

[21:10] <lue> Also I don't like the feeling of lacking organization I get from having type documentation and tutorial-ish documentation in the same directory :) Again, appears to be just me.

[21:10] <Mouq> lue: I do think having the tutorials somewhere apart from the class-by-class documentation would be a good idea

[21:11] <lue> (Arguably getting the generated website's index to not look like a giant list of everything would be more important ‚ò∫)

[21:13] * Mouq really likes http://imgur.com/a/y1dHo FWIW

[21:14] <lue> timotimo: is flatten_fastpath in master yet? I have to switch to master because of some negative codepoint bug (I recall hearing about something like it and it thus being fixed), but the part of the synopsis generation I could get through still feels like it's going slower.

[21:15] <moritz> can anybody please help me debug the apache2 on feather?

[21:15] <moritz> I get "client denied by server configuration" for all requests

[21:16] <moritz> [Sun Mar 02 22:16:01.772673 2014] [authz_core:error] [pid 22491] [client 182.50.130.100:44049] AH01630: client denied by server configuration: /home/pugscode/html/syn/

[21:17] <Mouq> https://stackoverflow.com/questions/8413042/client-denied-by-server-configuration ?

[21:17] <moritz> and the config contains

[21:17] * Mouq can only guess

[21:17] <moritz>     DocumentRoot /home/pugscode/html/

[21:17] <moritz>     <Directory /home/pugscode/html/>

[21:17] <moritz>         Order Allow,Deny

[21:17] <moritz>         Allow From All

[21:17] <moritz>     </Directory>

[21:18] <Mouq> "Require local"

[21:19] <moritz> Mouq: I still get the same error :(

[21:19] <Mouq> moritz: :(

[21:20] <lue> moritz: in Mouq's link, the "Allow From All" line came before the "Order" line in the broken code. Don't know if that's helpful though.

[21:21] <lue> And then also, the "Order" line in that code was Deny,Allow

[21:23] <lue> moritz: this might be helpful: https://wiki.apache.org/httpd/ClientDeniedByServerConfiguration

[21:23] <moritz> http://serverfault.com/questions/418101/apache-client-denied-by-server-configuration-despite-allowing-access-to-direc "Require all granted" worked

[21:25] <lue> https://stackoverflow.com/questions/10351167/apache-client-denied-by-server-configuration  <-- this says "Require all granted" too, just about to share it :)

[21:26] *** tgt left
[21:27] <dalek> mu: f95f95b | moritz++ | docs/feather/script/update-syn:

[21:27] <dalek> mu: copy more stuff to root

[21:27] <dalek> mu: review: https://github.com/perl6/mu/commit/f95f95b445

[21:28] <dalek> mu: 6b16202 | moritz++ | docs/feather/script/update-syn:

[21:28] <dalek> mu: fix path

[21:28] <dalek> mu: review: https://github.com/perl6/mu/commit/6b16202c57

[21:29] <Mouq> \o/ moritz++

[21:30] <dalek> mu: 8748257 | moritz++ | docs/feather/script/update-syn:

[21:30] <dalek> mu: copy the right index.html

[21:30] <dalek> mu: review: https://github.com/perl6/mu/commit/8748257cfc

[21:32] <dalek> mu: d227369 | moritz++ | docs/feather/script/update-syn:

[21:32] <dalek> mu: another attempt to unconfuse index.html

[21:32] <dalek> mu: review: https://github.com/perl6/mu/commit/d227369a64

[21:35] *** Rotwang left
[21:36] <dalek> mu: 2437389 | moritz++ | docs/feather/script/update-syn:

[21:36] <dalek> mu: another attempt to fix pugscode.org

[21:36] <dalek> mu: review: https://github.com/perl6/mu/commit/2437389123

[21:37] <moritz> next problem: http://perlcabal.org/syn/ references http://dev.perl.org/css/perl.css which is gone

[21:38] <moritz> ok, perlcabal.org seems to be a in a similar state to before the update

[21:38] <moritz> tomorrow I'll try to fix some other websites

[21:38] <moritz> sleep&

[21:40] <Mouq> moritz: Odd, since http://perlcabal.org/syn/perl.css exists

[21:40] <Mouq> and moritz++

[21:40] <Mouq> night

[21:41] *** pippo joined
[21:41] *** pecastro left
[21:44] <timotimo> lue: flatten_fastpath has been merged and now also encompasses more cases of string flattening compared to before

[21:45] *** xinming left
[21:47] *** xinming joined
[21:48] *** kaare_ left
[21:53] *** FROGGS left
[21:54] *** dmol left
[21:59] *** arnsholt left
[22:01] *** vendethiel left
[22:02] *** BenGoldberg joined
[22:03] *** mavcunha joined
[22:07] *** molaf_ left
[22:10] <dalek> doc: 0e7edc8 | Mouq++ | / (4 files):

[22:10] <dalek> doc: Add faded camelia image to bg, move style.css to css/style.css

[22:10] <dalek> doc: review: https://github.com/perl6/doc/commit/0e7edc84de

[22:13] <Mouq> (smls++)

[22:22] <timotimo> hmm

[22:22] <timotimo> maybe it'd be possible to find a distribution of all the topics that one could put in some sort of map form

[22:22] <timotimo> rather than just a list

[22:22] <timotimo> would that help overview?

[22:23] <timotimo> putting all exceptions into a separate group would be a good idea, IMO.

[22:23] <dalek> roast: 9c0f7ec | larry++ | S05-grammar/protoregex.t:

[22:23] <dalek> roast: LTM tests should use subparse

[22:23] <dalek> roast: review: https://github.com/perl6/roast/commit/9c0f7ec379

[22:24] <dalek> roast: 8dbeaec | larry++ | S05-metasyntax/proto-token-ltm.t:

[22:24] <dalek> roast: LTM tests should use subparse, reprise

[22:24] <dalek> roast: review: https://github.com/perl6/roast/commit/8dbeaecbc2

[22:28] <dalek> roast: 4bb8218 | larry++ | S05-mass/charsets.t:

[22:28] <dalek> roast: p-j now passes all these tests

[22:28] <dalek> roast: review: https://github.com/perl6/roast/commit/4bb82185f2

[22:31] <timotimo> parrot-jvm? when did we develop that?!

[22:34] *** denis_boyun left
[22:36] *** kivutar left
[22:42] *** virtualsue left
[22:48] *** virtualsue joined
[22:51] <geekosaur> pugs-jvm? :p

[22:59] <masak> r: for 1..10 { say "*"; NEXT { say "N" } }

[22:59] <camelia> rakudo-parrot 4d8734, rakudo-jvm 4d8734, rakudo-moar 4d8734: OUTPUT¬´*‚ê§N‚ê§*‚ê§N‚ê§*‚ê§N‚ê§*‚ê§N‚ê§*‚ê§N‚ê§*‚ê§N‚ê§*‚ê§N‚ê§*‚ê§N‚ê§*‚ê§N‚ê§*‚ê§N‚ê§¬ª

[22:59] * masak sometimes wishes for a BETWEEN phaser in loops

[22:59] *** rurban joined
[23:01] <lue> masak: couldn't NEXT be that inbetween phaser? (After all, on the last iteration there is no NEXT iteration, is there?)

[23:03] <TimToady> yes, there is, because the NEXT has to happen before the test

[23:04] <lue> ah.

[23:04] *** mavcunha left
[23:05] <TimToady> it's like continue {} in P5

[23:05] <TimToady> so corresponds to the 3rd term of a C-style for

[23:06] *** Psyche^_ joined
[23:10] <dalek> doc: af29967 | Mouq++ | htmlify.pl:

[23:10] <dalek> doc: Look for {in,pre,...}fix operators in type docs

[23:10] <dalek> doc: review: https://github.com/perl6/doc/commit/af2996794d

[23:12] <dalek> doc: 150492b | Mouq++ | lib/Bool.pod:

[23:12] <dalek> doc: Use more readable prefix format in Bool.pod

[23:12] <dalek> doc: review: https://github.com/perl6/doc/commit/150492bb7c

[23:16] *** pecastro joined
[23:18] <Mouq> r: say qc[this works{33.chr}]

[23:18] <camelia> rakudo-parrot 4d8734, rakudo-jvm 4d8734, rakudo-moar 4d8734: OUTPUT¬´this works!‚ê§¬ª

[23:28] <dalek> doc: e76fa11 | Mouq++ | htmlify.pl:

[23:28] <dalek> doc: Have search go to the right place for ops

[23:28] <dalek> doc: review: https://github.com/perl6/doc/commit/e76fa11de5

[23:28] <lue> r: grammar G { regex TOP { <abc>+ }; regex abc { abc } }; G.parse("abcabc"); say $<abc>[0].WHAT, $<abc>[1].WHAT

[23:28] <camelia> rakudo-parrot 4d8734, rakudo-jvm 4d8734, rakudo-moar 4d8734: OUTPUT¬´(Match)(Match)‚ê§¬ª

[23:28] <lue> r: grammar G { regex TOP { <abc>+ }; regex abc { abc } }; G.parse("abcabc"); say $_.WHAT for $<abc>

[23:28] <camelia> rakudo-parrot 4d8734, rakudo-jvm 4d8734, rakudo-moar 4d8734: OUTPUT¬´(Array)‚ê§¬ª

[23:28] <lue> That used to work, but now for some reason for $<rule> won't work properly. :/

[23:29] <Mouq> lue: Yeah...

[23:29] <Mouq> r: say $_.WHAT for [1,2,3]

[23:29] <camelia> rakudo-parrot 4d8734, rakudo-jvm 4d8734, rakudo-moar 4d8734: OUTPUT¬´(Array)‚ê§¬ª

[23:29] <Mouq> star: say $_.WHAT for [1,2,3]

[23:29] <camelia> star 2013-09: OUTPUT¬´(Array)‚ê§¬ª

[23:30] <lue> $<rule>[] works as a workaround, but I'd really love to know how that one broke.

[23:30] <Mouq> lue: See: https://github.com/rakudo/rakudo/commit/7c12aaf817121dc61ef581d7921d370e73504f8b

[23:30] <Mouq> (ammended by https://github.com/rakudo/rakudo/commit/c6227)

[23:32] <lue> Looks to me like an issue with Array rather than matching then.

[23:32] <Mouq> r: say $_.WHAT for [1,2,3][]

[23:32] <camelia> rakudo-parrot 4d8734, rakudo-jvm 4d8734, rakudo-moar 4d8734: OUTPUT¬´(Int)‚ê§(Int)‚ê§(Int)‚ê§¬ª

[23:32] <TimToady> neither $ nor [] are ever going to flatten

[23:33] <Mouq> TimToady: Is for $<abcd> supposed to iterate though?

[23:33] <TimToady> never

[23:33] <lue> I shouldn't have to do    for $<rule>[]    to iterate through rules though.

[23:33] <lue> s/rules/matches/

[23:33] *** perigrin left
[23:33] <TimToady> it's a $ variable

[23:33] <TimToady> would you expect $foo to iterate?

[23:33] *** perigrin joined
[23:33] <Mouq> Curse your logic and consistency :)

[23:34] <Mouq> p6: grammar G { regex TOP { <abc>+ }; regex abc { abc } }; G.parse("abcabc"); .say for @<abc>

[23:34] <camelia> rakudo-parrot 4d8734, rakudo-jvm 4d8734, rakudo-moar 4d8734: OUTPUT¬´ÔΩ¢abcÔΩ£‚ê§ ÔΩ¢abcÔΩ£‚ê§‚ê§¬ª

[23:34] <camelia> ..niecza v24-109-g48a8de3: OUTPUT¬´ÔΩ¢abcÔΩ£‚ê§‚ê§ÔΩ¢abcÔΩ£‚ê§‚ê§¬ª

[23:34] <lue> No, but I still want to iterate through matches without what looks like useless extra characters :/

[23:34] <Mouq> Looks like rakudo doesn't quite get that right

[23:34] <lue> @<abc> is just @($<abc>) though, right?

[23:35] <Mouq> p6: grammar G { regex TOP { <abc>+ }; regex abc { abc } }; G.parse("abcabc"); .say for @$<abc>

[23:35] <camelia> rakudo-parrot 4d8734, rakudo-jvm 4d8734, rakudo-moar 4d8734, niecza v24-109-g48a8de3: OUTPUT¬´ÔΩ¢abcÔΩ£‚ê§‚ê§ÔΩ¢abcÔΩ£‚ê§‚ê§¬ª

[23:35] <Mouq> p6: grammar G { regex TOP { <abc>+ }; regex abc { abc } }; G.parse("abcabc"); .say for %$<abc>

[23:35] <camelia> rakudo-parrot 4d8734, rakudo-moar 4d8734: OUTPUT¬´"abc" => Match.new(orig => "abcabc", from => 3, to => 6, ast => Any, list => ().list, hash => EnumMap.new())‚ê§¬ª

[23:35] <camelia> ..niecza v24-109-g48a8de3: OUTPUT¬´"abc" => #<match from(3) to(6) text(abc) pos([].list) named({}.hash)>‚ê§¬ª

[23:35] <camelia> ..rakudo-jvm 4d8734: OUTPUT¬´"abc" => Match.new(to => 6, hash => EnumMap.new(), ast => Any, list => ().list, orig => "abcabc", from => 3)‚ê§¬ª

[23:37] <Mouq> r: say qc[\{]

[23:37] <camelia> rakudo-parrot 4d8734, rakudo-jvm 4d8734, rakudo-moar 4d8734: OUTPUT¬´\{‚ê§¬ª

[23:38] <Mouq> n: say qc[\{]

[23:38] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´\{‚ê§¬ª

[23:38] <Mouq> wtf

[23:38] <Mouq> n: say qcb[\{]

[23:38] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Unable to parse block at /tmp/Tbs3Fggddh line 1:‚ê§------> [32msay qcb[\{[33m‚èè[31m][0m‚ê§Couldn't find final '}'; gave up at /tmp/Tbs3Fggddh line 1:‚ê§------> [32msay qcb[\{[33m‚èè[31m][0m‚ê§‚ê§Undeclared ‚Ä¶¬ª

[23:38] <Mouq> r: say q:c:b[\{]

[23:38] <camelia> rakudo-parrot 4d8734, rakudo-jvm 4d8734, rakudo-moar 4d8734: OUTPUT¬´\{‚ê§¬ª

[23:39] <TimToady> r: say '\{'

[23:39] <camelia> rakudo-parrot 4d8734, rakudo-jvm 4d8734, rakudo-moar 4d8734: OUTPUT¬´\{‚ê§¬ª

[23:39] *** virtualsue left
[23:39] <TimToady> say "\{"

[23:39] <TimToady> r: say "\{"

[23:39] <camelia> rakudo-parrot 4d8734, rakudo-jvm 4d8734, rakudo-moar 4d8734: OUTPUT¬´{‚ê§¬ª

[23:40] <TimToady> single and double quotes have different \ policies

[23:40] <TimToady> singles only remove backslash from the terminator and backslash

[23:41] <lue> TimToady: I personally see $<abc> more often as "collection of all matches made by <abc>" than "item, either a match or a list". Would like to not need [] for the way I see it :/ (like it used to be...)

[23:43] <TimToady> that's crazy talk

[23:43] <TimToady> you don't really want all the old bugs

[23:45] <lue> Yeah, but I'd still like it if $<abc> were treated like the list it is, without me having to coerce it. (Perhaps @/ ?)

[23:45] <TimToady> it isn

[23:45] <TimToady> it *isn't* a list

[23:45] <TimToady> it's a match object

[23:46] * lue supposes he's just incredibly upset at the moment due to the sudden need for what feels like extraneous characters

[23:46] <TimToady> and didn't Mouq++ just demo @<abc> above?

[23:46] <TimToady> the computer can't read your mind

[23:46] <masak> r: grammar G { regex TOP { <abc>+ }; regex abc { abc } }; G.parse("abcabc"); say $<abc>.^name

[23:46] <Mouq> TimToady: Well, he does have to use extraneous characters until @<abc> is fixed in Rakudo

[23:46] <camelia> rakudo-parrot 4d8734, rakudo-jvm 4d8734, rakudo-moar 4d8734: OUTPUT¬´Array‚ê§¬ª

[23:47] <masak> looks like Array to me.

[23:47] <lue> masak: exactly what I was thinking :)

[23:47] <TimToady> it looks like Scalar of Array to me

[23:47] <masak> TimToady: in what sense is that Array a match object?

[23:47] <TimToady> r: grammar G { regex TOP { <abc>+ }; regex abc { abc } }; G.parse("abcabc"); say $<abc>.VAR.WHAT

[23:47] <camelia> rakudo-parrot 4d8734, rakudo-jvm 4d8734, rakudo-moar 4d8734: OUTPUT¬´(Scalar)‚ê§¬ª

[23:47] <TimToady> there

[23:47] <TimToady> it's like a [], not like Array.new

[23:48] <masak> right.

[23:48] <masak> but it's still not a match object, right? it's an Array.

[23:48] <TimToady> sure, it's an Array (itemized)

[23:48] <TimToady> I don't see a problem with that

[23:48] <masak> oh, you were saying it isn't a *list*. well, I agree with that.

[23:48] <masak> but it seems to me it's an array. not a match object.

[23:49] <lue> ( there's the issue of me feeling too stubborn at the moment for any kind of user-side coercion as a solution, which makes @<abc> (so far as I know) equally unlikable to $<abc>[] )

[23:49] <masak> lue: well, I think itemized things should be explicitly listified.

[23:49] <TimToady> if it did that DWIM it would definitely have an equal and opposite WAT

[23:49] <masak> lue: over the years, that has emerged as basically the only sane thing to do.

[23:50] <masak> 'night, #perl6

[23:50] <TimToady> o/

[23:50] <lue> ‚ôû masak o/

[23:50] <lue> In that case, my argument moves to "the way to access named subrules in a match shouldn't return itemized lists" :)

[23:51] <TimToady> in which case, + and ~ would do very unexpected things

[23:52] <lue> Great, now I've got a "chr codepoint cannot be negative" to deal with in Pod::To::HTML :/

[23:52] <TimToady> afk for a bit &

[23:55] <lue> TimToady: I worded my quoted argument the way I did because I know $<rule> isn't the right answer for what I want :)

[23:55] *** LooneyLemur joined
[23:56] * Mouq tries to fix @<abc> real quick

[23:58] * lue now gets the feeling that $<rule> is too overloaded with different types of things to Do the Right Thing‚Ñ¢ in every usage...

[23:58] *** xenoterracide joined
