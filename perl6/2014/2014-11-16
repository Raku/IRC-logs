[00:06] *** virtualsue left
[00:30] *** gfldex left
[00:50] *** [particle]1 joined
[00:52] *** [particle] left
[00:55] *** molaf_ left
[00:56] *** leont left
[01:11] *** kjs_ joined
[01:13] *** exixt_ is now known as exixt

[01:14] *** ab5tract left
[01:33] *** kurahaupo joined
[01:33] *** kurahaupo left
[01:37] *** kjs_ left
[01:43] *** raiph left
[02:08] <dalek> doc: b0e85c0 | raydiak++ | html/css/style.css:

[02:08] <dalek> doc: Fix clipping of overly-wide SVGs

[02:08] <dalek> doc: review: https://github.com/perl6/doc/commit/b0e85c0c35

[02:17] *** adu joined
[02:21] *** adu left
[02:25] <cognominal> I keep forgetting what is the Perl 6 equivalent of popen(3). Help!

[02:45] *** ilbot3 left
[02:46] *** ilbot3 joined
[02:50] *** JimmyZ joined
[02:53] *** tinyblak joined
[02:54] <JimmyZ> cognominal: openpipe?

[02:58] *** zakharyas joined
[03:12] *** _sri_ is now known as _sri

[03:17] *** JimmyZ left
[03:22] *** JimmyZ joined
[03:34] *** firefish5000 joined
[03:47] *** jerrycheung joined
[03:47] *** jerrycheung left
[03:52] *** JimmyZ left
[03:53] <cognominal> openpipe is a nqp thing

[04:02] <TimToady> http://perlcabal.org/syn/S32/IO.html#IO%3A%3APipe maybe?

[04:04] *** jack_rabbit joined
[04:14] *** raiph joined
[04:27] <cognominal> sounds like it but I don't  see an IO::Pipe in the setting

[04:31] <cognominal> lizmat++ anyway for all her work for IOs

[04:59] *** JimmyZ joined
[04:59] <JimmyZ> cognominal: https://github.com/rakudo/rakudo/blob/nom/src/core/IO/Handle.pm#L12

[05:10] *** KCL_ joined
[05:28] <cognominal> sounds good. Need to sleep on that. JimmyZ++, TimToady++

[05:32] *** [Tux] left
[05:33] *** [Tux] joined
[05:36] *** rurban joined
[05:38] *** adu joined
[05:40] *** raiph left
[05:52] *** kaare_ joined
[05:53] *** dj_goku_ left
[05:54] *** raiph joined
[05:56] *** BenGoldberg left
[05:59] *** firefish5000 left
[06:08] *** adu left
[06:15] *** bjz left
[06:29] *** rurban left
[06:29] *** Ugator1 joined
[06:41] *** adu joined
[06:56] *** Ugator1 left
[06:59] *** rurban joined
[06:59] *** raiph left
[07:07] *** bjz joined
[07:08] *** rurban1 joined
[07:11] *** bjz left
[07:11] *** rurban left
[07:19] *** adu left
[07:32] *** darutoko joined
[07:36] *** dj_goku joined
[07:36] *** dj_goku left
[07:36] *** dj_goku joined
[07:44] *** KCL_ left
[07:44] *** firefish5000 joined
[07:57] *** petercom1and is now known as petercommand

[08:06] *** rurban1 left
[08:08] *** ennio joined
[08:33] *** ennio left
[08:43] *** smls joined
[08:44] <smls> o/

[08:46] <smls> m: say (1..50).grep({"a" x $_ !~~ /^ [a | (aa+) $0+] $/})

[08:46] <camelia> rakudo-moar 7dd729: OUTPUT«2 3 5 7 11 13 17 19 23 29 31 37 41 43 47␤»

[08:46] <smls> ^^ The one true way to do a prime number sieve! :D

[08:50] <huf> meh. just change the definition so the algo is simpler and faster :D all odd numbers are prime.

[08:52] <dalek> nqp/longlit: f4c6cbc | TimToady++ | src/QRegex/NFA.nqp:

[08:52] <dalek> nqp/longlit: correctly propagate longlit info in NFAs

[08:52] <dalek> nqp/longlit: review: https://github.com/perl6/nqp/commit/f4c6cbcb1d

[08:55] *** lizmat left
[08:56] *** kjs_ joined
[08:56] *** kjs_ left
[08:57] <dalek> rakudo/longlit: 7137b21 | TimToady++ | src/Perl6/Actions.nqp:

[08:57] <dalek> rakudo/longlit: replace INDRULE with var carrying actual coderef

[08:57] <dalek> rakudo/longlit: 

[08:57] <dalek> rakudo/longlit: This is so that the nfa routines can call .NFA on the coderef to extract

[08:57] <dalek> rakudo/longlit: the NFA and merge properly when <foo> refers to a lexical regex.

[08:57] <dalek> rakudo/longlit: review: https://github.com/rakudo/rakudo/commit/7137b213f8

[08:57] <dalek> rakudo/longlit: 4da5e49 | TimToady++ | src/Perl6/Grammar.nqp:

[08:57] <dalek> rakudo/longlit: coloncircumfix was stealing :() pseudo-sigs

[08:57] <dalek> rakudo/longlit: 

[08:57] <dalek> rakudo/longlit: (This was due to the new longest-literal tiebreaking rule.)

[08:57] <dalek> rakudo/longlit: review: https://github.com/rakudo/rakudo/commit/4da5e49f6a

[08:58] <TimToady> the longlit branch is mostly done, but still fails 8 tests due in part to not having fixed INTERPOLATE yet

[08:58] *** davido___ left
[08:59] <TimToady> sleep &

[08:59] *** davido___ joined
[08:59] *** woolfy1 left
[09:01] *** telex left
[09:02] *** telex joined
[09:02] *** woolfy joined
[09:02] *** lizmat joined
[09:06] *** lizmat left
[09:10] *** woolfy left
[09:11] *** KCL_ joined
[09:13] *** jack_rabbit left
[09:13] *** jack_rabbit joined
[09:21] *** sqirrel__ joined
[09:22] *** rindolf joined
[09:23] *** zakharyas left
[09:28] *** anaeem1 joined
[09:33] *** FROGGS[mobile] joined
[09:34] *** ptc_p6 joined
[09:37] *** virtualsue joined
[09:39] *** dsm joined
[09:51] *** lizmat joined
[09:52] <lizmat> good *, #perl6 from the Frantic offices in Helsinki for day #0 of the Nordic Perl Workshop

[09:54] *** anaeem1 left
[09:57] *** ghostlines joined
[09:59] <dsm> what's the language NQP compiler written in?

[10:01] <timotimo> NQP

[10:03] <dsm> then who compiles NQP into back-end bytecodes?

[10:03] <timotimo> NQP does

[10:03] <timotimo> it's bootstrapped

[10:04] <timotimo> so in the NQP repository, there's stage0 NQPs for parrot, moarvm and jvm

[10:04] <timotimo> the earliest NQP compiler was written in PIR

[10:10] <dsm> isn't PIR a Parrot Intermediate Representation?

[10:11] <timotimo> yes

[10:12] <dsm> ok, then stage0 NPQ compiler for MoarVM is written in moarvm bytecode?

[10:13] <timotimo> no, we used the parrot stage0 NQP compiler with a cross-compiling setup to generate MoarVM bytecode from NQP source code

[10:13] <timotimo> same with the JVM version

[10:13] *** virtualsue left
[10:14] *** rurban joined
[10:14] <dsm> thank you.

[10:14] <timotimo> you're welcome :)

[10:25] <cognominal> where is the farabia editor?

[10:25] *** sqirrel__ left
[10:26] *** anaeem1 joined
[10:26] <timotimo> i don't think it's up always

[10:27] <cognominal> p6weekly talks about it but gives no  url

[10:27] <timotimo> it's very easy to run off of a git clone of github:azawawi/farabi6 however

[10:27] *** anaeem1 left
[10:27] <cognominal> ho, I kept typing farabia instead of farabi :(

[10:29] *** woolfy joined
[10:30] <timotimo> ah! :)

[10:35] *** spider-mario joined
[10:37] *** ab5tract joined
[10:43] *** FROGGS[mobile] left
[10:43] *** FROGGS joined
[10:43] <rindolf> lizmat: good morning.

[10:45] *** b2gills left
[10:54] *** virtualsue joined
[10:55] *** espadrine_ joined
[10:57] *** denis_boyun_ joined
[11:00] *** b2gills joined
[11:08] *** jack_rabbit left
[11:10] *** firefish5000 left
[11:13] *** dsm left
[11:19] *** ghostlines left
[11:21] *** immortal joined
[11:23] *** sqirrel__ joined
[11:23] *** exixt is now known as exixt_

[11:23] *** erkan left
[11:30] <ab5tract> FROGGS: i'm still struggling with the XML parser.. it hangs somewhere in the elements call. it knows it should return some number of elements, but that part never seems to complete: https://gist.github.com/ab5tract/cbf4867b441ab2ea84d7

[11:31] *** jack_rabbit joined
[11:31] <ab5tract> i swear i'm not trying to make problems ...

[11:31] <FROGGS> ab5tract: I can look at that, but just not now, I try to fix a problem with parrot on windows

[11:31] <FROGGS> :o)

[11:33] <ab5tract> hehe, ok

[11:33] <ab5tract> this is for a (potential) advent calendar entry, which concerns itself with typesetting the advent calendar :)

[11:45] *** [Sno] left
[11:45] *** jack_rabbit left
[11:45] *** [Sno] joined
[11:51] *** Ugator1 joined
[11:54] *** pecastro_ left
[11:58] *** erkan joined
[11:59] <woolfy> lizmat at Nordic Perl Workshop promoting Perl 6.  People did not believe Larry was actually coming to FOSDEM (Myself has same feeling...  :-)  ).  Nice hackathon, 11 people now.

[12:00] <jnthn> woolfy: Cool!

[12:00] * jnthn wishes he coulda made it

[12:01] *** immortal left
[12:01] * woolfy wishes jnthn (and others) coulda made it to NPW2015

[12:01] <colomon> woolfy: \o/

[12:02] <jnthn> woolfy: Nordic? Or Netherlands? :)

[12:02] <jnthn> oh wait, coulda

[12:03] <jnthn> woolfy: It's...still 2014 :P

[12:03] <woolfy> 2014!!!

[12:03] <lizmat> :-)

[12:03] * jnthn is easily confused. It's only early morning in jnthn virtual timezone. :)

[12:03] <woolfy> NPW = Nordic Perl Workshop ; NLPW = NetherLands Perl Workshop.

[12:03] * jnthn hopes to make both of those in 2015 :)

[12:03] * woolfy is happy to confuse everybody

[12:04] <woolfy> jnthn, you and others are already coming to FOSDEM.  When you would come and speak at NLPW, that would be bonus.  \o/   jnthn++

[12:04] <virtualsue> FOSDEM++

[12:05] <woolfy> jnthn: get your 2015 calendar and mark April 10 for NLPW.  Would be nice.

[12:06] <jnthn> bah, so far somebody put exactly one thing in my April schedule and its then. Thankfully, it's something I can easily get moved. :)

[12:06] * jnthn adds NLPW in :)

[12:07] *** smls left
[12:07] <woolfy> jnthn++

[12:07] <jnthn> Cool, it's also the week after easter.

[12:07] <woolfy> (again)

[12:08] <woolfy> And if you are busy with your calendar, you might want to mark 8-11 May 2015 for the Nordic Perl Workshop & OSDC Norway in Oslo, organised by Salve  sjn++

[12:08] <jnthn> woolfy: How long do I have left to think up something to talk about at FOSDEM?

[12:09] <jnthn> woolfy: ooh, thanks. Added that too

[12:09] <woolfy> I set myself the task for the hackathon to get that all done today, send you and the other speakers a mail to ask for title and summary and bio.  I think I want to have that info before the end of the month.

[12:10] <jnthn> eek

[12:10] *** denis_boyun_ left
[12:10] <woolfy> Well, eek d'oh,...  they are going to make a booklet and we really want to be in the booklet.  And they really want all community devrooms to have their schedule ready in the beginning of december.

[12:10] <jnthn> Well, mebbe I'll think up something during some of my work flights/trian trips :)

[12:11] <jnthn> Suggestions/requests are welcome too :)

[12:12] <woolfy> The system of FOSDEM is...  ehmn...  to say polite...  sub-optimal.  People who think that ACT is difficult to work with, should have a look at pentabarf (FOSDEM's system).  Talk about nerdy...  what, easy user interface you ask?  Hmmm...

[12:12] <jnthn> Really? The system has "barf" in its name?

[12:12] <woolfy> Yep

[12:12] <jnthn> Is the slogan "Quickly throw up a conference schedule!"?

[12:13] <woolfy> I hope you are not surprised that I heard that slogan several times already in the past years...

[12:13] *** immortal joined
[12:13] <woolfy> (and some even less polite ones)

[12:14] <lizmat> m: class A { has Nil $!a; method a { $!a = A.new }}; say A.new.a   # jnthn, what's wrong in this picture ?

[12:14] <camelia> rakudo-moar 7dd729: OUTPUT«Type check failed in assignment to '$!a'; expected 'Any' but got 'A'␤  in method a at /tmp/_HZ5prR2yI:1␤  in block <unit> at /tmp/_HZ5prR2yI:1␤␤»

[12:14] <woolfy> My co-organiser, Claudio Ramirez (awesome man!) always does the pentabarf-barf, so I don't have to do it.  This year I had my first experience with it, when I added Larry's talk to the system.  Indeed, it is barf.

[12:15] <timotimo> woolfy: wow, they use pentabarf for fosdem? i thought that was only a thing in CCC events

[12:15] <lizmat> jnthn: are we not allowed to have a Nil as a type in attributes ?

[12:15] <woolfy> Talking about calendars...  it would be very nice if at least some of you would be able to come to the Perl QA Hackathon in Berlin: 16-19 April 2015.

[12:15] <jnthn> lizmat: "as a type"?

[12:15] <timotimo> isn't nil an insatnce?

[12:16] <timotimo> instance*

[12:16] *** erkan left
[12:16] <woolfy> It is mostly invitation-only, and Liz and I have given several of your names to the organisers, so I hope several of you have been contacted by now.

[12:16] <lizmat> m: my Nil $a; say $a

[12:16] <camelia> rakudo-moar 7dd729: OUTPUT«Nil␤»

[12:17] <lizmat> m: my Nil $a; $a = 42; say $a

[12:17] <camelia> rakudo-moar 7dd729: OUTPUT«Type check failed in assignment to '$a'; expected 'Any' but got 'Int'␤  in block <unit> at /tmp/1oea0nomfU:1␤␤»

[12:17] <lizmat> ah, same problem  :-(

[12:17] <jnthn> Why's that a problem?

[12:17] <jnthn> m: say Int ~~ Nil

[12:17] <camelia> rakudo-moar 7dd729: OUTPUT«False␤»

[12:17] <lizmat> I'm trying to get the value Nil into a variable

[12:18] <jnthn> Yes, well, at some point, we ended up with darn magical assignment semantics for Nil

[12:18] <lizmat> I thought "my Nil $a' would be the way

[12:18] <jnthn> Sure, if you *only* want to be able to put Nil in there :P

[12:18] <jnthn> Basically, the design we've ended up with makes Nil just about unassignable.

[12:18] *** jluis_ joined
[12:18] <lizmat> well, let me put it this way:

[12:19] <lizmat> I need an attribute that's Nil until I assign it

[12:19] <jnthn> Which I thought was kinda the point...

[12:19] <jnthn> I'm not sure you can do that.

[12:19] <lizmat> so I can do $!that.method // (fix $!that and try again).method

[12:19] <jnthn> Why not $!that.?method

[12:20] * jluis_ started to make rakudo on moarVM on a raspberry pi 3Gb swap on a usb hardisk Configure ran for an hour 

[12:20] <lizmat> jluis_++

[12:20] <jnthn> jluis_: I'm guessing you gave Configure options like --gen-moar and --gen-nqp, meaning that it spent that hour building dependencies?

[12:21] <lizmat> because the method *may* exist on Any, but I don't want it to use that method then

[12:21] <jnthn> lizmat: Nil inherits from Any and dispatches to those methods normally; the quiet dispatch stuff is failover

[12:21] <jnthn> m: say Nil.list.perl

[12:21] <camelia> rakudo-moar 7dd729: OUTPUT«().list␤»

[12:21] <lizmat> ah, good point

[12:21] <lizmat> hmmm....

[12:21] <lizmat> ok

[12:24] <timotimo> http://principiadiscordia.com/book/11.php ← the origin of pentabarf

[12:24] <ab5tract> jnthn: "Basically, the design we've ended up with makes Nil just about unassignable." couldn't this be addressed with coercer that sets Nil at the nqp level?

[12:24] <ab5tract> *a coercer

[12:25] <jluis_> jnthn, yes just following http://rakudo.org/how-to-get-rakudo/

[12:25] <ab5tract> i guess that still breaks types though...

[12:26] <jnthn> jluis_: OK, then building dependencies explain it. I can't remember how long building on a raspberry pi took, but I know the answer was something like "quite a while" :)

[12:26] <jnthn> jluis_: Though, did you build for a single backend?

[12:27] <jluis_> yes  I'm building it only for moarVM

[12:29] <jnthn> OK

[12:29] <jnthn> That tends to eat the least memory, and so need the least swap, and I guess the build is swap-bound...

[12:31] <jluis_> on my PC javaVM and parrot failed because I didn't have enough memory so I did not try it on the raspi

[12:32] <timotimo> raspi has very low ram indeed

[12:32] <timotimo> but its cpu is also ... quite weak

[12:34] *** sqirrel__ left
[12:37] <ab5tract> jnthn: perl6-debug-m is broken for me: https://gist.githubusercontent.com/ab5tract/cbf4867b441ab2ea84d7/raw/eee8ac6c61613f071b7c0eb2da0e7a88b9e03e6e/And%20perl6-debug-m%20breaks.

[12:38] <jluis_> I think the pi will be on make stage for at least a day 

[12:38] *** btyler_ left
[12:40] <ab5tract> i also needed to install Debugger::UI::CommandLine before it would even load

[12:41] *** pochi joined
[12:44] * ab5tract suspects he may be cursed

[12:44] *** woolfy left
[12:45] *** btyler joined
[12:45] *** woolfy joined
[12:46] *** spider-mario left
[12:47] *** ghostlines joined
[12:47] <woolfy> Exciting...  people asked to start the Rakudo Install Fest at the Nordic Perl Workshop.  Liz is going to show 5 or 6 people on how to install Rakudo.

[12:47] * woolfy is proud!

[12:50] <colomon> lizmat++ woolfy++

[12:50] <woolfy> Ow, it is Liz & pnu together instructing and guiding 8 people (!) how to do this.

[12:50] <woolfy> lizmat++ and pnu++

[12:50] *** ghostlines left
[12:55] <woolfy> (just saw moarvm and nqp being downloaded and built onto 8 computers)

[13:02] *** anaeem1 joined
[13:03] *** spider-mario joined
[13:06] *** anaeem1 left
[13:18] <woolfy> OK, most people here now have MoarVM and NQP installed and got their Perl 6 working.  Nice.  lizmat is helping the people with installation-problems.  Some people really look happy.

[13:20] <FROGGS> :o)

[13:21] <ab5tract> woolfy: sweet! :D

[13:21] <ab5tract> does perl6-debug-m work for any of them? ;)

[13:23] <woolfy> I'm not going to ask.  :-)

[13:24] *** firefish5000 joined
[13:24] <ab5tract> woolfy: :)

[13:24] <woolfy> (they still have to learn Perl 6, like Vendethiel's introduction, before they should be thrown into the deep end, or even the shallow end)

[13:24] <woolfy> Vendethiel++

[13:24] <ab5tract> that is the Perl 5 to Perl 6 series, right?

[13:25] <woolfy> Yep

[13:25] <woolfy> And these people are all Perl 5 people.

[13:25] <ab5tract> great stuff indeed. i have vague plans about bringing in a few notes i've made about learning p6 from a p5 POV

[13:27] <jnthn> ab5tract: I've no idea what's going on there...looks like the kind of thing that happens when there's some version skew with installed things...

[13:29] *** zakharyas joined
[13:29] *** immortal left
[13:30] *** erkan joined
[13:30] *** erkan left
[13:30] *** erkan joined
[13:34] *** denis_boyun_ joined
[13:37] <ab5tract> jnthn: okay, i will try a brand new rakudobrew

[13:42] <FROGGS> cognominal: pipe gives you an IO::Pipe object, but you can only read the stdout of the child process right now

[13:48] *** gfldex joined
[13:56] *** erkan left
[13:57] *** erkan joined
[14:09] *** USERNAME joined
[14:10] <USERNAME> hi

[14:10] <yoleaux> 10 Aug 2014 17:25Z <bondagebrat> USERNAME: <message>

[14:10] <geekosaur> o.O

[14:11] <FROGGS> hi USERNAME 

[14:12] *** raiph joined
[14:15] <ab5tract> jnthn: it works :D

[14:15] *** Alina-malina left
[14:18] <jnthn> ab5tract: \o/

[14:21] *** Alina-malina joined
[14:25] *** USERNAME left
[14:28] *** Alina-malina left
[14:31] *** guru joined
[14:31] *** Alina-malina joined
[14:31] *** guru is now known as Guest85387

[14:31] *** Guest85387 is now known as ajr_

[14:31] *** haroldwu_ is now known as haroldwu

[14:32] *** haroldwu left
[14:32] *** haroldwu joined
[14:37] *** bjz joined
[14:47] *** Vlavv left
[14:50] <woolfy> The Rakudo Install Fest at the Nordic Perl Workshop by lizmat++ and pnu++ has now grown into a "Perl 6 for Beginners" and both lizmat and pnu are teaching the 6 remaining attendees quite a lot of Perl 6 info

[14:51] <woolfy> (interactive session, people are asking good questions)

[14:52] *** sqirrel__ joined
[14:54] *** firefish5000 left
[14:58] <ab5tract> jnthn: so the debugger requires the modules be precompiled to .moarvm . where i just finished writing a shell function to remove moarvm files so that I can see my changes to panda modules

[14:59] *** Vlavv joined
[15:01] <ab5tract> now i will write another to quickly compile new ones :)

[15:02] *** firefish5000 joined
[15:02] *** pecastro joined
[15:03] *** ghostlines joined
[15:10] <dalek> nqp/openpipe: fd8e5ed | (Tobias Leich)++ | / (3 files):

[15:10] <dalek> nqp/openpipe: implement openpipe on parrot+windows

[15:10] <dalek> nqp/openpipe: review: https://github.com/perl6/nqp/commit/fd8e5ed403

[15:10] <dj_goku> FROGGS: testers.perl6.org seems to be down/not responding.

[15:11] <FROGGS> :(

[15:11] <FROGGS> the service seems to get unstable

[15:12] <FROGGS> dj_goku: it works after a restart

[15:13] <dalek> nqp: dd7f5b1 | (Tobias Leich)++ | src/vm/parrot/ (2 files):

[15:13] <dalek> nqp: first (explosive) attempt to port openpipe to nqp@parrot

[15:13] <dalek> nqp: 

[15:13] <dalek> nqp: We need this op to actually open a pipe with a given CWD and ENV,

[15:13] <dalek> nqp: the open("rp") whih parrot provides does not let us pass these.

[15:13] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dd7f5b1728

[15:13] <dalek> nqp: c0bc3d9 | (Tobias Leich)++ | / (27 files):

[15:13] <dalek> nqp: Merge branch 'master' of github.com:perl6/nqp into openpipe

[15:13] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c0bc3d975a

[15:13] <dalek> nqp: 4818829 | (Tobias Leich)++ | / (5 files):

[15:13] <dalek> nqp: add working openpipe op for nqp on parrot on linux

[15:13] <dalek> nqp: 

[15:13] <dalek> nqp: That means that we have openpipe on all platforms/backends except

[15:13] <dalek> nqp: for parrot on windows.

[15:13] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4818829d33

[15:13] <dalek> nqp: 4019ecc | (Tobias Leich)++ | / (6 files):

[15:13] <dalek> nqp: Merge branch 'master' of github.com:perl6/nqp into openpipe

[15:13] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4019ecc2f5

[15:13] <dalek> nqp: fd8e5ed | (Tobias Leich)++ | / (3 files):

[15:13] <dalek> nqp: implement openpipe on parrot+windows

[15:13] <dalek> nqp: review: https://github.com/perl6/nqp/commit/fd8e5ed403

[15:14] <dj_goku> FROGGS: cool thanks

[15:15] <dalek> rakudo/nom: e5ae2e7 | (Tobias Leich)++ | src/core/IO/Handle.pm:

[15:15] <dalek> rakudo/nom: unfudge open("rp") on parrot

[15:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e5ae2e7306

[15:15] <dalek> rakudo/nom: ec665f7 | (Tobias Leich)++ | / (46 files):

[15:15] <dalek> rakudo/nom: Merge branch 'nom' of github.com:rakudo/rakudo into openpipe

[15:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ec665f71b7

[15:15] <dalek> rakudo/nom: 38e77b6 | (Tobias Leich)++ | tools/build/NQP_REVISION:

[15:15] <dalek> rakudo/nom: bump nqp revision for openpipe on parrot

[15:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/38e77b645b

[15:15] *** immortal joined
[15:15] *** immortal left
[15:15] *** immortal joined
[15:16] *** travis-ci joined
[15:16] <travis-ci> NQP build errored. Tobias Leich 'implement openpipe on parrot+windows'

[15:16] <travis-ci> http://travis-ci.org/perl6/nqp/builds/41161103 https://github.com/perl6/nqp/compare/28ff0493c2d6...fd8e5ed403cd

[15:16] *** travis-ci left
[15:16] <rurban> aarg, github again

[15:17] <FROGGS> yeah, "github.com: Temporary failure in name resolution"

[15:17] <FROGGS> though, the other job has passed

[15:17] *** erkan left
[15:18] <rurban> smoked fine on darwin

[15:19] *** ghostlines left
[15:20] <FROGGS> thanks for checking :o)

[15:20] <FROGGS> I build now HEAD on all backends, the will do spectests (except on jvm)

[15:20] <FROGGS> when linux is fine I'll care about the path issues on windows

[15:28] <lizmat> NPW hackathon shutting down&

[15:28] *** lizmat left
[15:29] *** woolfy left
[15:29] *** erkan joined
[15:31] *** immortal left
[15:33] *** spider-mario left
[15:40] *** lucas_ joined
[15:40] *** denis_boyun_ left
[15:41] <lucas_> Good sunday to everyone

[15:41] <lucas_> m: say 1,2,3; say (1,2,3)

[15:41] <camelia> rakudo-moar 7dd729: OUTPUT«123␤1 2 3␤»

[15:41] <lucas_> shouldn't the parcel just disappear in list context?

[15:41] <lucas_> m: say 1,((),(),(),(),()),2

[15:41] <camelia> rakudo-moar 7dd729: OUTPUT«1    2␤»

[15:43] *** zakharyas left
[15:44] * ab5tract shakes his head clear

[15:44] <ab5tract> FROGGS: the XML parser was hanging because i was doing @elements.perl.say

[15:45] <FROGGS> ab5tract: which still can mean that @elements has recursive structures

[15:45] <ab5tract> switching it to @elements.say works.

[15:46] <ab5tract> FROGGS: indeed. perhaps it would be good to have some shortcircuting built into .perl()

[15:46] <TimToady> say is not a slurpy

[15:46] <ab5tract> in short, there hasn't been a problem with the XML parser at all

[15:52] <ab5tract> TimToady: calling .perl() on a list returned from XML::Document causes a hang with or without a 'say' :/

[16:02] <ab5tract> TimToady: can i ask you to clarify how the slurpiness context of say would relate?

[16:03] *** sqirrel__ left
[16:05] *** wtw left
[16:06] *** wtw joined
[16:12] *** H2O1 joined
[16:12] <TimToady> say treats each of its arguments separately without relying on flattening

[16:13] *** anaeem1 joined
[16:13] <FROGGS> ab5tract: somebody was working on that recently

[16:13] <FROGGS> ab5tract: maybe searching in the logs will reveal something

[16:13] <ab5tract> yes, but i'm still confused about how that relates to .perl() hanging on recursive structures

[16:14] <ugexe> heh, i think .perl hanging it got brought up yesterday

[16:14] *** anaeem1 left
[16:14] <FROGGS> m: my @a; @a[0] = @a; say @a

[16:14] <camelia> rakudo-moar 7dd729: OUTPUT«(timeout)»

[16:15] <ab5tract> okay .. so say on any list is going to timeout?

[16:15] <ab5tract> ah crap, sorry, no just on recursive ones

[16:15] <FROGGS> it was also mentioned a few weeks ago, with an attempt to fix it

[16:15] *** H2O1 left
[16:16] <FROGGS> m: my @a; @a[0] = @a; my @b = @a.flat

[16:16] <camelia> rakudo-moar 7dd729: ( no output )

[16:17] <FROGGS> searching for 'Dumper' might give a result... IIRC it was mentioned while talking about how to make .gist and .perl work

[16:17] <ab5tract> FROGGS: i don't actually need this functionality at all. it was just a test i was running at the end of the script so that i could get an idea of the internal structure of @elements

[16:17] <ab5tract> which was hanging, and i didn't realize there might be this issue with .perl()

[16:18] <ab5tract> anyway, now i've been exposed to the (lovely) debugger and written a few help shell functions

[16:18] <ab5tract> *helpful

[16:20] <FROGGS> ab5tract: damn, I wanted to trick you into compiler hacking :P

[16:21] <ab5tract> FROGGS: i'm still writing up my RT ticket for the more dwimmy set comparators :)

[16:21] <FROGGS> :o)

[16:22] *** bjz left
[16:22] *** bjz joined
[16:23] <ab5tract> the patches are ready though, at least afaict

[16:27] *** JimmyZ left
[16:29] *** sqirrel__ joined
[16:31] *** gfldex left
[16:35] *** davido__ joined
[16:38] * [Coke] throws out yesterday's incomplete run and kicks off a new one.

[16:38] *** davido___ left
[16:39] *** vendethiel joined
[16:39] <vendethiel> o/, #perl6

[16:39] <ab5tract> \o vendethiel 

[16:40] *** cognominal left
[16:43] <ugexe> ive somehow got XML segfaulting on parrot

[16:43] * vendethiel afk interstellar &

[16:47] *** immortal joined
[16:48] <ugexe> over continuation

[16:49] *** erkan left
[16:55] *** mrmccrac joined
[16:56] <ab5tract> ugexe: it might be an issue i have run into

[16:57] <ab5tract> https://gist.githubusercontent.com/ab5tract/cbf4867b441ab2ea84d7/raw/d96a38e56abd002c5578504ecd0cc16ed2300c59/diff%20for%20XML.pm6%20debugging

[16:58] <ab5tract> the stuff related to the $doc<xmldecl> .. $doc<xmldecl> is not an array, apparently

[16:58] <ugexe> might be it, its related to .list as well

[16:59] *** darutoko- joined
[16:59] <nebuchadnezzar> m: say Any // Nil // 0 // 5

[16:59] <camelia> rakudo-moar 38e77b: OUTPUT«0␤»

[16:59] <nebuchadnezzar> shouldn't it be 5?

[17:00] <ugexe> 0 is a defined value

[17:00] <ugexe> m: say Any || Nil || 0 || 5;

[17:00] <camelia> rakudo-moar 38e77b: OUTPUT«5␤»

[17:01] <ugexe> ab5tract: Method 'list' not found for invocant of class 'Continuation'

[17:01] <nebuchadnezzar> so there is an error in http://learnxinyminutes.com/docs/perl6/

[17:01] <ugexe> is that what you are running into?

[17:01] <ab5tract> m: say Any // Nil // 0 || 5 # also evocative

[17:01] <camelia> rakudo-moar 38e77b: OUTPUT«5␤»

[17:02] *** darutoko left
[17:02] *** jluis_ left
[17:03] *** mrmccrac left
[17:03] <ab5tract> ugexe: 'use of uninitialized value $v of type Any in string context  in method new at lib/XML.pm6:965'

[17:03] <ugexe> nebuchadnezzar: its explanation is correct (first defiend value) but the codes exclaimed result is indeed wrong

[17:04] <ab5tract> but there was no $v on line 965, just an attempt to access $doc<xmldecl>[0]

[17:04] <ugexe> m: say [//] Nil, Any, False, 0, 5;

[17:04] <camelia> rakudo-moar 38e77b: OUTPUT«False␤»

[17:04] <ugexe> m: say [//] Nil, Any, 0, 5;

[17:04] <camelia> rakudo-moar 38e77b: OUTPUT«0␤»

[17:05] <ab5tract> accessing $doc<xmldecl><*><*> seemed to produce the correct result

[17:05] <ugexe> (as you can see, they contradict themselves earlier)

[17:05] <ugexe> $v makes me think of push but thats a wild guess

[17:06] <ab5tract> ugexe: right, it seemed vaguely autoviv-ish

[17:07] *** erkan joined
[17:07] <ab5tract> tbh, i just assumed that the XML code was in the wrong somehow

[17:08] <ugexe> it could possibly be building the tree wrong based on the xml

[17:08] <ab5tract> and that the grammar returns $doc<*><*>, not $doc<*>[*]<*>[*]

[17:09] <ab5tract> at least for $doc<xmldecl> !

[17:09] <ugexe> like html::parser::xml builds its tree wrong if tags that close themselves <tag />

[17:09] *** immortal left
[17:13] *** Sam______ left
[17:14] *** sqirrel__ left
[17:18] <ab5tract> ugexe: hmmm.. and my patch maybe doesn't work for other cases that i'm testing now. such as installing XML::Query. but that also fails for me even with a clean XML install ...

[17:18] <ugexe> does there happen to be a debian packaging script for p6 and the backends? travis testing modules is taking too long for jvm/parrot due to building :/

[17:19] <ugexe> XML::Query only fails for compiled

[17:19] <ab5tract> ugexe: ah, right

[17:19] <ugexe> i started a panda fork last night to try and and report when that happens

[17:21] <ugexe> you can do it manually though. panda look && prove -e "perl6 -Ilib" t/; panda-build && panda-test;

[17:23] <ab5tract> with my patch to XML, installing XML::Query fails with that same "uninitialized $v" error. however that error appears whenever XML is used (at least on the inputs I have given it so far), including during the running of its own tests

[17:23] <ab5tract> when my patch is *not* applied

[17:24] <ugexe> i used to get that same error but it was just a warning

[17:24] <ugexe> and my tests passed

[17:25] <ugexe> im not sure if we can draw any conclusions from that

[17:25] *** raiph left
[17:25] *** raiph joined
[17:26] <ab5tract> ugexe: fair enough.

[17:27] <ab5tract> i was chasing down the rabbit hole anyway, as i didn't realize what happens to a non-slurpy function when handed a recursive structure.

[17:29] <ugexe> neither did i, i had that same problem yesterday debugging html::parser::xml heh

[17:29] <ugexe> i assumed it had something to do with lazyness

[17:29] <ugexe> although i think froggs mentioned recurssion to both of us yesterday, but in reference to the xml structure

[17:44] *** Rounin_ is now known as Rounin

[17:46] *** hoelzro left
[17:46] *** hoelzro joined
[17:46] <moritz> sergot: re OpenSSL, it shouldn't do that; either throw an error, or be silent

[17:47] *** tinyblak left
[17:47] <moritz> sergot: ... or have some debug flag or evn variable

[17:47] *** tinyblak joined
[17:49] *** eternaleye left
[17:51] *** FROGGS_ joined
[17:51] *** eternaleye joined
[17:53] *** tinyblak_ joined
[17:54] *** FROGGS left
[17:56] *** tinyblak left
[17:57] *** tadzik is now known as jestem_psem

[17:57] *** gfldex joined
[18:00] *** ab5tract left
[18:01] *** tinyblak_ left
[18:01] *** tinyblak joined
[18:04] *** ajr_ left
[18:05] *** molaf joined
[18:11] *** mrmccrac joined
[18:14] <masak> evening, #perl6

[18:18] *** tgt joined
[18:19] *** ghostlines joined
[18:20] *** tgt left
[18:23] *** kurahaupo joined
[18:24] *** woolfy joined
[18:25] *** ab5tract joined
[18:26] *** tinyblak_ joined
[18:27] *** tinyblak left
[18:34] *** tinyblak_ left
[18:34] *** tinyblak joined
[18:34] *** FROGGS_ is now known as FROGGS

[18:35] <FROGGS> evening masak

[18:35] *** lizmat joined
[18:35] *** tinyblak_ joined
[18:37] *** Ugator1 left
[18:38] <masak> our clones and I are all worn out. we need a vacation.

[18:38] <masak> my* clones

[18:38] * masak .oO( having clones is confusing! )

[18:38] *** tinyblak_ left
[18:39] *** tinyblak_ joined
[18:39] <FROGGS> clones?

[18:39] <lizmat> .oO( bring in the clones )

[18:39] *** tinyblak left
[18:39] <lizmat> or rather:

[18:40] <lizmat> .oO( Send in the clones :-)

[18:40] <lizmat> so I talked myself into giving an hour-long presentation about Perl 6 tomorrow at the NPQ

[18:40] <lizmat> *NPW

[18:40] <lizmat> called "Perl 6 for Neophytes"

[18:41] *** tinyblak_ left
[18:41] *** mrmccrac left
[18:41] <woolfy> lizmat++

[18:41] *** tinyblak joined
[18:41] <lizmat> I was thinking of taking vendethiel++'s LearnPerl6inYminutes

[18:41] <lizmat> and turn that into a presentation

[18:42] <FROGGS> +1 :o)

[18:42] <lizmat> hope vendethiel doesn't mind (he should be in other spheres now :-)

[18:44] <jnthn> .oO( Is a neophyte a violent scene from The Matrix? )

[18:46] <lizmat> in my dictionary it is simply someone who is new to a subject or activity

[18:46] *** tinyblak_ joined
[18:46] <lizmat> nothing Matrixy about it...  

[18:46] <virtualsue> neo+fight

[18:46] <lizmat> *sigh*   jnthn++

[18:47] <lizmat> :-)

[18:48] *** telex left
[18:49] *** ab5tract left
[18:49] *** tinyblak left
[18:50] *** telex joined
[19:01] *** ab5tract joined
[19:01] <masak> FROGGS: in my blog queue, I have a blog post coming up about how I'm (secretly) seven identical clones. even so, things are still very busy.

[19:02] <dalek> roast: e75bba5 | (Tobias Leich)++ | S32-io/spurt.t:

[19:02] <dalek> roast: fix fudged block, it must start at BOL

[19:02] <dalek> roast: review: https://github.com/perl6/roast/commit/e75bba5d2f

[19:02] * FROGGS .oO( The Seven Carl Potters )

[19:05] * lizmat suspects masak got something from Hermione at one point in time

[19:07] *** tinyblak_ left
[19:08] *** tinyblak joined
[19:10] *** guru joined
[19:10] *** guru is now known as Guest62929

[19:10] *** Guest62929 is now known as ajr_

[19:15] <masak> lizmat: no, time travel doesn't work. it was all done the hard way, with biological cloning.

[19:15] <lizmat> well, *you* only needed to do it once  :-)

[19:15] <masak> or, um. some "cloning machine" where one steps in and two step out.

[19:16] <lizmat> your clone could have done the others then

[19:16] <masak> sure. if I'm the original one. :P

[19:16] <lizmat> well, that's what you get with lossless cloning  :-)

[19:17] <lizmat> vendethiel++ for http://learnxinyminutes.com/docs/perl6/   # so much more than the last time I looked!

[19:17] <masak> it's not just that. we have a policy among us that none of us is the "primary" copy. even if (of course) one of us is.

[19:20] *** ab5tract left
[19:25] *** raiph left
[19:26] <lizmat> masak: but maybe the primary copy evaporated?  with quantum mechanics, you never know...

[19:27] *** brrt joined
[19:27] <brrt> \o

[19:29] <masak> lizmat: what happened in our case was that 10 seconds after a clone, the copies had diverged and gone out of sync. I guess that tells you something about free will. or not, I dunno.

[19:29] <masak> brrt: o/

[19:30] <moritz> if you consider that genetic identical clones don't grow any faster than regular humans, it stands to reason taht the "original" masak would be as old as masak's father by now...

[19:30] <masak> yeah, I take it back with the biological route.

[19:30] <masak> there was an atom-for-atom copier involved.

[19:30] *** davido___ joined
[19:30] * brrt is obliged to backlog on this discussion

[19:31] <FROGGS> brrt: 1) there is a branch called execname I think, which creates fake executables... 2) I don't like the name perl6-b

[19:32] <masak> what's perl6-b ?

[19:32] <brrt> perl6-binary

[19:32] *** davido__ left
[19:32] <brrt> FROGGS: i had no idea

[19:32] *** immortal joined
[19:33] <moritz> if you consider that genetic identical clones don't grow any faster than regular humans, it stands to reason taht the "original" masak would be as old as masak's father by now...

[19:33] <TimToady> n: say Any // Nil // 0 || 5

[19:33] <camelia> niecza v24-109-g48a8de3: OUTPUT«===SORRY!===␤␤"//" and "||" are non-associative and require parens at /tmp/B39JKmLM_H line 1:␤------> say Any // Nil // 0 || ⏏5␤␤Unhandled exception: Check failed␤␤  at /home/camelia/niecza/boot/lib…»

[19:33] <TimToady> that is the correct response, not rakudo's

[19:34] <TimToady> m: say <a b c> X <d e f> Z <g h i>

[19:34] <camelia> rakudo-moar 38e77b: OUTPUT«a d a g a e a h a f a i b d b g b e b h b f b i c d c g c e c h c f c i␤»

[19:34] *** raiph joined
[19:34] <TimToady> that is also incorrect

[19:34] <TimToady> n: say <a b c> X <d e f> Z <g h i>

[19:34] <camelia> niecza v24-109-g48a8de3: OUTPUT«===SORRY!===␤␤"X" and "Z" are non-associative and require parens at /tmp/j7dtGW7z02 line 1:␤------> say <a b c> X <d e f> Z ⏏<g h i>␤␤Unhandled exception: Check failed␤␤  at /home/camelia/niecza/boo…»

[19:34] <TimToady> niecza++

[19:35] *** erkan left
[19:37] *** rindolf left
[19:40] <raiph> .ask FROGGS Is my answer reasonable? (SO question about P6 equivalent to P5's overload::constant http://stackoverflow.com/questions/26948334/overloading-constants-in-perl-6)

[19:40] <yoleaux> raiph: I'll pass your message to FROGGS.

[19:40] *** raiph left
[19:40] <lizmat> m: my $a = “Foo”  # why don't we allow these quotes ?

[19:40] <camelia> rakudo-moar 38e77b: OUTPUT«===SORRY!=== Error while compiling /tmp/DUyjLTluvr␤Malformed initializer␤at /tmp/DUyjLTluvr:1␤------> my $a = ⏏“Foo”  # why don't we allow these quotes␤    expecting any of:␤        scoped declarator␤ …»

[19:40] <lizmat> n: my $a = “Foo”  # just checking

[19:40] <camelia> niecza v24-109-g48a8de3: OUTPUT«===SORRY!===␤␤Malformed initializer at /tmp/AfXjrQiEPO line 1:␤------> my $a ⏏= “Foo”  # just checking␤␤Parse failed␤␤»

[19:42] <FROGGS> raiph: looks good, and thanks for the pointer

[19:42] <yoleaux> 19:40Z <raiph> FROGGS: Is my answer reasonable? (SO question about P6 equivalent to P5's overload::constant http://stackoverflow.com/questions/26948334/overloading-constants-in-perl-6)

[19:48] *** sqirrel__ joined
[19:55] <masak> someone else is welcome to rakudobug-submit the above lack of non-associativity control in Rakudo.

[19:55] *** ptc_p61 joined
[19:57] *** ptc_p6 left
[19:59] *** lucas_ left
[20:03] *** tinyblak_ joined
[20:04] *** darutoko- left
[20:06] *** tinyblak left
[20:08] *** tinyblak_ left
[20:08] *** tinyblak joined
[20:09] *** Sqirrel joined
[20:15] <dalek> doc: 2d79b9c | moritz++ | lib/Type/Metamodel/C3MRO.pod:

[20:15] <dalek> doc: document Metamodel::C3MRO

[20:15] <dalek> doc: review: https://github.com/perl6/doc/commit/2d79b9cc42

[20:15] <dalek> doc: b5cc1b5 | moritz++ | lib/Type/Metamodel/Naming.pod:

[20:15] <dalek> doc: Fix MRO signatures

[20:15] <dalek> doc: review: https://github.com/perl6/doc/commit/b5cc1b5d46

[20:15] <dalek> doc: 477f3dd | moritz++ | lib/Type/Metamodel/C3MRO.pod:

[20:15] <dalek> doc: MRO example

[20:15] <dalek> doc: review: https://github.com/perl6/doc/commit/477f3dd328

[20:16] <moritz> m: say Int.^mro_unhidden

[20:16] <camelia> rakudo-moar 38e77b: OUTPUT«(Int) (Cool) (Any) (Mu)␤»

[20:17] <moritz> m: say Int.^mro

[20:17] <camelia> rakudo-moar 38e77b: OUTPUT«(Int) (Cool) (Any) (Mu)␤»

[20:17] <moritz> why does that produce the same result?

[20:17] <moritz> what's the point of mro_unhidden?

[20:17] <jnthn> "is hidden"

[20:17] <moritz> oh

[20:18] * moritz thought it was about excluding Cool, Any etc. by default

[20:19] <moritz> jnthn: so .^mro hidens 'is hidden' classes by default, but .^mro_unhidden shows all?

[20:19] *** denis_boyun_ joined
[20:20] <jnthn>     # Introspects the Method Resolution Order without anything that has

[20:20] <jnthn>     # been hidden.

[20:20] <jnthn>     method mro_unhidden($obj) {

[20:20] <jnthn> so .^mro is all

[20:21] <jnthn> .^mro_unhidden is all the not-hidden ones

[20:22] *** firefish5000 left
[20:23] <dalek> doc: 1f5fe3b | moritz++ | lib/Type/Metamodel/C3MRO.pod:

[20:23] <dalek> doc: [mop] fix mro{,_unhidden} bugs, jnthn++

[20:23] <dalek> doc: review: https://github.com/perl6/doc/commit/1f5fe3bed6

[20:26] <dalek> snake: 7e99b4b | (Arne Skjærholt)++ | src/Snake/ (2 files):

[20:26] <dalek> snake: Implemention function parameter default values.

[20:26] <dalek> snake: review: https://github.com/arnsholt/snake/commit/7e99b4b37f

[20:27] <arnsholt> Oh. Ai speel reel gud

[20:27] *** kjs_ joined
[20:33] * brrt is excited about fosdem

[20:35] <timotimo> o/

[20:36] *** mrmccrac joined
[20:38] <brrt> \o timotimo

[20:43] *** tinyblak_ joined
[20:44] *** tinyblak_ left
[20:44] *** someanon left
[20:44] *** someanon joined
[20:44] *** tinyblak_ joined
[20:45] *** sqirrel__ left
[20:45] *** mrmccrac left
[20:45] <brrt> timotimo - i've started working on a binary moar-based perl6. i could use your advice :-)

[20:46] *** pochi left
[20:46] *** tinyblak left
[20:46] <vendethiel> lizmat: right, I'm back, sorry

[20:46] <vendethiel> ugexe++ #fixing my mistakes

[20:47] <lizmat> vendethiel: and how did you like Interstellar ?

[20:47] <vendethiel> didn't like it very much :(. The images were cool, but I found it boring overall

[20:48] <vendethiel> well, it's most probably not my type of movie. To me, it was like a bad copy of 2001 space odyssey

[20:49] <brrt> ot, but it occurs to me that there is some form of consensus of human unsustainability in interstellar and other things (civilization beyond earth), and ehm, that's pretty sad

[20:50] <vendethiel> people want to dream about what they can't reach. let 'em :)

[20:50] <brrt> that's not my point :-)

[20:50] <brrt> my point is that people seem to have given up on a sustainable life on earth

[20:50] <brrt> or it seems that way at least

[20:50] <vendethiel> no. Movie makers have. I think it's very, very different.

[20:51] *** pochi joined
[20:51] <brrt> movie makes live in the same cultural background as the rest of us

[20:51] <lizmat> brrt: I think it's more or less established now that with the current number of people on this planet (and the organic growth of that in the next century), it is basically unsustainable

[20:52] <brrt> hmm. i disagree about the number of people. resource usage, yes. 9 billion people, we can manage

[20:52] <lizmat> in the movie, it doesn't matter what caused the disaster that reduced the population: it's about coping with that and the future

[20:53] <brrt> hmm i see

[20:55] * lizmat concentrates on writing her slides again

[20:55] <vendethiel> lizmat: I've told you already, but I think learnperl6iny is totally unfit for perl5-knowing people

[20:55] <vendethiel> I'm not happy with how it is right now, at all.

[20:55] <lizmat> vendethiel: well, you could be right, 

[20:56] <lizmat> fwiw, I'm following it as a guideline...  it's more about the order of things

[20:56] <vendethiel> I think it's the worst part :(.

[20:56] <dalek> rakudo/longlit: 5f5ddb4 | TimToady++ | src/Perl6/ (2 files):

[20:56] <dalek> rakudo/longlit: <?{}> parse depended on non-lltm ordering

[20:56] <dalek> rakudo/longlit: review: https://github.com/rakudo/rakudo/commit/5f5ddb48f2

[20:56] <lizmat> I'll be talking about the examples from a P5 perspective

[20:56] <lizmat> vendethiel: I disagree (mostly)  :-)

[20:57] <lizmat> anyway, I don't think I'll be able to cover more than the first 25-30% in the hour that I have

[20:57] <vendethiel> right.It's a looong tutorial :)

[21:01] *** ab5tract joined
[21:04] *** KCL joined
[21:07] *** KCL_ left
[21:08] <moritz> what is the longlit branch about?

[21:09] <jnthn> moritz: Longest literal tie-breaking in LTM

[21:12] <TimToady> it causes some misparses where rakudo was relying on ordering rather than the lltm tiebreaker

[21:13] <TimToady> but down to 5 failing tests now

[21:13] *** perltricks joined
[21:14] <japhb> So I have a class with many attributes, each of which is of a specific class, but can sanely be coerced from a standard type (Int, Rat, Str, etc.), similar to how you can get a DateTime from an Int interpreted as a posix time.

[21:15] <japhb> I'd like to be able to initialize those attributes during construction of the big class, but using just the standard types (Foo.new(bar => 12) instead of Foo.new(:bar(Bar.new(12))).  What's the best way to express that?

[21:18] *** jestem_psem is now known as tadzik

[21:21] *** jluis joined
[21:21] <masak> 'night, #perl6

[21:21] *** jluis is now known as Guest40749

[21:22] <perltricks> hey y'all quick question. How do I exec a module sub that is not exported? Module::subname() is not working ...

[21:22] *** Guest40749 is now known as jluis_

[21:23] *** ab5tract left
[21:25] <TimToady> it has to be declared 'our' for that to work

[21:25] <TimToady> otherwise it's private

[21:25] <TimToady> (lexically scoped by default)

[21:25] <vendethiel> night masak

[21:26] <perltricks> TimToady: thanks!

[21:26] * jluis_ raspi is making tests but I was in outside when make ended 309 wall clock seconds <G>

[21:32] *** exixt_ is now known as exixt

[21:33] <moritz> japhb: I'd create a hash with key = attribute and value = coercer function

[21:33] *** ptc_p61 left
[21:33] *** perltricks left
[21:33] <moritz> japhb: and thread that over the named attributes

[21:35] *** kjs_ left
[21:40] *** ghostlines left
[21:40] <japhb> moritz: Hmmm, interesting.

[21:41] <moritz> s/attributes/arguments/

[21:41] * japhb wonders if this can just be done with parameter coersion and a custom new or BUILD

[21:47] <jnthn> m: class A { has Int $.x }; class B { has A $.a; submethod BUILD(:$a, :_($!a) = A.new(x => $a)) { } }; B.new(a => 42).perl.say

[21:47] <camelia> rakudo-moar 38e77b: OUTPUT«B.new(a => A.new(x => 42))␤»

[21:47] <jnthn> Kinda ugly ;)

[21:47] <jnthn> oh, I wonder...

[21:48] <jnthn> Hm, nah 

[21:48] <FROGGS> raiph: http://stackoverflow.com/questions/26948334/overloading-constants-in-perl-6/26962441#26962441

[21:49] <dalek> ecosystem: 50b2821 | (Tobias Leich)++ | META.list:

[21:49] <dalek> ecosystem: added overload::constant to ecosystem

[21:49] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/50b28210fb

[21:49] <FROGGS> quite at an early stage, but should be extendable

[21:50] *** kaare_ left
[21:50] <FROGGS> in short:

[21:50] <FROGGS> sub decimal { $^a.flip }

[21:50] <FROGGS> use overload::constant &decimal;

[21:50] <FROGGS> say .1e-003 # "300-e1."

[21:51] *** ab5tract joined
[21:53] <jnthn> o.O :)

[21:53] <FROGGS> *g*

[21:53] <jnthn> Short module too :)

[21:53] *** ajr_ left
[21:53] <jnthn> FROGGS++

[21:53] <vendethiel> FROGGS++

[21:53] <FROGGS> yeah, I really like the pattern of that thing

[21:53] <FROGGS> (which is identical to Tuxic)

[21:54] <vendethiel> FROGGS: couldn't you have the same name for both overload and %handlers key?

[21:54] <vendethiel> so that the code would effectively be

[21:55] <vendethiel> for <integer decimal radix numish> { if atkeyish($/, $_) -> $v { $/.make(...); last; } }

[21:55] <FROGGS> vendethiel: I need the correct fallback anyway, soo....

[21:55] <vendethiel> FROGGS: the for can just return early :p

[21:55] <vendethiel> or LAST

[21:55] <FROGGS> and dec_number is the original name from the grammar/actions, and that's not very sixy

[21:55] <vendethiel> but yeah, yeah, sorry. That's obfuscating while trying to be clever

[21:56] *** jluis_ left
[21:56] <FROGGS> I might clean it up some day... but I wanted to release it quickly because battery power is at 7% :P

[21:56] *** perltricks joined
[21:58] *** tinyblak joined
[22:00] *** tinyblak_ left
[22:02] *** kurahaupo left
[22:05] <FROGGS> gnight

[22:05] *** FROGGS left
[22:07] *** denis_boyun_ left
[22:10] <japhb> m: sub is-complete($o) { !grep !*.defined, $o.^attributes.map: *.get_value($o) }; class A { has $.a; has $.b = 5; }; say is-complete(A.new); say is-complete(A.new(a => 2));

[22:10] <camelia> rakudo-moar 38e77b: OUTPUT«False␤True␤»

[22:10] <japhb> \o/

[22:10] *** ab5tract left
[22:11] <perltricks> hey has the method for finding $*UID changed since s28? $*UID does not exist ...

[22:11] <perltricks> m: say $*UID

[22:11] <camelia> rakudo-moar 38e77b: OUTPUT«Dynamic variable $*UID not found␤  in method gist at src/gen/m-CORE.setting:13756␤  in sub say at src/gen/m-CORE.setting:16487␤  in block <unit> at /tmp/Mx_pFRwduz:1␤␤»

[22:11] <lizmat> m: say +$*USER

[22:11] <camelia> rakudo-moar 38e77b: OUTPUT«1012␤»

[22:11] <lizmat> m: say $*USER

[22:11] <camelia> rakudo-moar 38e77b: OUTPUT«camelia (1012)␤»

[22:12] <lizmat> m: say ~$*USER

[22:12] <camelia> rakudo-moar 38e77b: OUTPUT«camelia␤»

[22:12] <perltricks> lizmat: very nice, thanks!

[22:12] <lizmat> perltricks: iow, $*UID -> $*USER and the coercion determines what you get

[22:13] <lizmat> m: say ~$*GROUP; say +$*GROUP; say $*GROUP

[22:13] <camelia> rakudo-moar 38e77b: OUTPUT«users␤100␤users (100)␤»

[22:14] <perltricks> lizmat: is there a way to retrieve the user's name? (not username)

[22:14] <lizmat> there is none currently specced, afaik

[22:15] <lizmat> this feels highly system dependent, and I guess we wanted to move away from unix centeredness

[22:15] <perltricks> lizmat: ok thanks. I guess for *nix I can look it up in /etc/passwd using +$*USER anyway

[22:15] <lizmat> a module for that would be nice in the ecosystem  :-)

[22:16] <lizmat> aka, all of P5's getgrpwent() functions and friends  :-)

[22:16] <lizmat> we could also use that for "use v5" support  :-)

[22:16] <perltricks> heh, yah I keep wotking backwards. I wanted to write  Module-Starter, but there is no software::license module. So now I'm writing that. But to get the user's name for the license, I need to write another module and so on ... ;)

[22:17] <lizmat> I know the feeling  :-)

[22:17] <colomon> indeed

[22:19] <jnthn> Bah, when I started here it was like "so I want to write a class...well, better implement a MOP..." :P

[22:19] <perltricks> haha

[22:20] * jnthn is happy to see our ecosystem gradually growing :)

[22:22] *** tinyblak left
[22:22] <perltricks> yeah it seems to be picking up. I'm publishing an article this week on compiling Rakudo on Visual Studio 2013

[22:22] *** tinyblak joined
[22:23] <perltricks> overall it looks like it works fine (I didn't write the article). Which is a pleasant surprise ...

[22:24] <jnthn> Well, having at least one core VM and compiler developer work often on Windows helps... :)

[22:25] *** krunen left
[22:26] <jnthn> MoarVM actually was initially built with MSVC, and then ported to work with GCC, Clang, etc.

[22:35] *** Guest86942 left
[22:46] <[Coke]> I find myself wanting __END__.

[22:47] * [Coke] settles for =begin END , =end END

[22:56] *** colomon left
[23:02] <timotimo> i wrote "o/" but then didn't answer anything

[23:02] <timotimo> turns out i wasn't really there

[23:02] * timotimo backlogs now

[23:04] *** brrt left
[23:08] *** colomon joined
[23:11] <timotimo> and now i'm off to get some early rest

[23:11] <timotimo> gnite!

[23:12] <timotimo> [Coke]: http://perlcabal.org/syn/S26.html#The+%3Dfinish+block

[23:13] <timotimo> i don't actually know if we do that yet :)

[23:13] <jdv79> i wrote __END__ today as well

[23:14] <lizmat> .oO( old habits die at the __END__ )

[23:14] <jdv79> in p5 i use it all the time to chop off the end of a test script and run just the head of it

[23:14] <jdv79> but that's almost the only use i have so meh...

[23:18] <[Coke]> I'm getting an error - if I run my system installed perl6 from a build directory of another perl6, I get Missing or wrong version of dependency...

[23:19] <[Coke]> jdv79: __END__ would be very helpful when converting a five script to six. :)

[23:22] <lizmat> [Coke]: notes that when getting back to the settings loading code

[23:22] <lizmat> *for

[23:23] <lizmat> meanwhile, 20+ slides with code to explain, that should be enough to fill 1 hour and have everybody's head explode

[23:23] <lizmat> so I can get some rest now  :-)

[23:23] <lizmat> good night, #perl6!

[23:23] <jnthn> .oO( The finish block sounds appropriate for NPW this year... :P )

[23:24] <jnthn> 'night, lizmat 

[23:24] <lizmat> :-)

[23:33] *** BenGoldberg joined
[23:49] *** felher left
