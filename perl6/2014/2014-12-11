[00:10] *** Rounin left
[00:16] *** |Tux| joined
[00:18] *** TuxCM left
[00:20] *** robinsmidsrod left
[00:20] *** dayangkun joined
[00:20] *** robinsmidsrod joined
[00:20] *** dayangkun left
[00:20] <jnthn> OK, advent post scheduled at a minute past midnight. :)

[00:21] <jnthn> And I'm gonna sleep :)

[00:21] <jnthn> &

[00:21] <psch> night jnthn 

[00:28] *** gfldex left
[00:38] * timotimo suggests someone puts a "Day 11 - " in front of the title

[00:41] *** atroxaper joined
[00:41] <psch> uh

[00:42] <psch> scheduled for a minute past midnight..?

[00:43] <psch> timotimo: i can do that, but i'm confused regarding when the post should be published at the moment...

[00:44] <psch> because it doesn't look like it is yet, or is that just something on my end?

[00:44] <timotimo> depends on the timezone jnthn has interpreted "midnight" in

[00:45] *** atroxaper left
[00:45] <psch> hm, it says 12/11/2014 @ 00:19 in quick edit

[00:47] <psch> but no TZ info

[00:47] <psch> visible to me at least, but then i hardly know wordpress

[00:48] <timotimo> ah

[00:48] <timotimo> December 11, 2014, 12:48 am

[00:48] <timotimo> this is what it shows in the stats page

[00:48] <timotimo> that must be WP's local timezone

[00:49] <psch> ...now there's 2 autosaves, edited by me, with just the "Day 11 - " added to the title o.o

[00:49] <timotimo> it could very well be that wordpress interprets 12/11/2014 @ 00:19 to be "19 minutes past midnight on the 12th"

[00:49] <timotimo> because, as we all know, 00:19 is 12:19am, which is part of the previous day

[00:50] <psch> i don't follow

[00:50] <psch> 12/11/2014 is american date format

[00:50] *** lue joined
[00:50] <timotimo> oh!

[00:50] <timotimo> derp

[00:50] <timotimo> how do americans cope?!

[00:51] <geekosaur> by being bewildered at sane date formats

[00:51] <geekosaur> >.>

[00:51] <psch> heh

[00:51] <psch> it's still possible to schedule the post for 12/11/2014 @ 00:01

[00:51] <timotimo> or you could just post it immediately; WP thinks the new day has already begun

[00:52] <psch> yeah, i guess that's safe

[00:53] <psch> does it need some magic to appear on the landing page?

[00:53] <geekosaur> the new day started 53 minutes ago, of course...

[00:54] <psch> 'cause it's not there but is in the category 2014...

[00:56] <timotimo> i see it

[00:57] <psch> i can see it in the logged-in browser, but the other only sees it in the category

[00:57] <psch> err, NOW

[00:57] <psch> some caching

[00:57] <psch> probably

[00:58] <timotimo> seems likely

[01:01] <psch> i also updated the ToC

[01:01] <psch> not sure if the link from day 10 to day 11 happens automatically eventually or if that has to be added manually

[01:01] <psch> 'cause that's not there either on my end atm

[01:03] <timotimo> aye, only one of them shows up here; from 11 to 10

[01:05] *** BenGoldberg joined
[01:08] <psch> well, i don't know what to do about that link

[01:08] <psch> i also have to go sleep &

[01:09] <timotimo> gnite psch!

[01:13] *** psch left
[01:42] *** adu joined
[01:46] *** kurahaupo joined
[01:50] <dalek> specs: 23ef17e | TimToady++ | S0 (2 files):

[01:50] <dalek> specs: Add List to 'OKness' types

[01:50] <dalek> specs: review: https://github.com/perl6/specs/commit/23ef17e57a

[01:56] * TimToady changes List.ACCEPTS to return self, to see what breaks

[02:06] <dalek> specs: b40b20c | TimToady++ | S05-regex.pod:

[02:06] <dalek> specs: another fake Match becomes List

[02:06] <dalek> specs: review: https://github.com/perl6/specs/commit/b40b20c683

[02:09] *** rmgk left
[02:13] *** rmgk joined
[02:13] <TimToady> Someone needs to entitle a talk: The following step can take a long time, please be patient.

[02:25] <japhb> .oO( *** Implementing Perl 6 ... )

[02:33] <TimToady> looks like it fails about 6 test files, but passes new TODOs in 5

[02:33] <TimToady> so we almost broken even :)

[02:34] <TimToady> *broke

[02:35] * colomon thinks broken might be more appropriate here...

[02:36] <TimToady> now I just need to figure out what word to name the old whatever-matching code

[02:39] <TimToady> I could just move the ACCEPTS over to Parcel, but that would break as soon as we we get rid of Parcel

[02:42] *** jimmy2 joined
[02:43] *** jimmy2 is now known as JimmyZ_

[02:44] <TimToady> what the hey, maybe it can be a transitional form while we decide what to do with parcel list matchers

[02:45] <TimToady> whoops, I said 'make install' instead of 'make m-install'...

[02:45] * TimToady goofs off, since "he's compiling"

[02:51] <japhb> m: role NewDateish { multi method truncated-to(|) { nextsame } }; class NewDate is Date does NewDateish { }; my $nd = NewDate.today; say $nd.truncated-to('week');

[02:51] <camelia> rakudo-moar 5f6494: OUTPUT«Nil␤»

[02:51] <japhb> OK, what stupid mistake am I making there?  ^^

[02:53] *** aborazmeh_ joined
[02:55] *** aborazmeh_ left
[02:55] *** aborazmeh left
[02:56] <lue> TimToady: is there any written thing out there about this list refactoring you seem to be doing, or is it all kinda being improvised right now?

[02:59] <TimToady> we talked about it some on irc :)

[02:59] <lue> not surprised :)

[03:00] *** chenryn joined
[03:00] *** baest left
[03:01] <lue> I have to say though, it's about time. I've always felt like I had to fiddle around a bit too much when it came to using lists in P6. Here's the last thing I ran into trouble with, from a while ago:

[03:01] <lue> m: say 1,2 X+ 8,9; say [X+] (1,2;8,9);

[03:01] <camelia> rakudo-moar 5f6494: OUTPUT«9 10 10 11␤2 2␤»

[03:03] *** khisanth_ is now known as Khisanth

[03:03] <japhb> TimToady: Can you see a mistake in what I'm doing above (the NewDate class)?

[03:05] *** baest joined
[03:06] *** araujo joined
[03:06] *** araujo left
[03:06] *** araujo joined
[03:07] <TimToady> m: say 1,2 X+ 8,9; say [X+](1,2;8,9);

[03:07] <camelia> rakudo-moar 5f6494: OUTPUT«9 10 10 11␤9 10 10 11␤»

[03:08] <TimToady> lue: you passed a single argument to [X+]

[03:09] <lue> funny, I thought you weren't supposed to leave out the space there. Though I think I see why (spaceless makes it like &sub(1,2;8,9) , right?)

[03:10] *** araujo left
[03:10] *** araujo joined
[03:11] <lue> Doesn't seem to work when the LoL is in a variable, though.

[03:12] *** noganex joined
[03:13] *** grettis left
[03:14] *** noganex_ left
[03:15] *** jimmy_ joined
[03:15] <TimToady> japhb: leave off the 'multi'

[03:16] <TimToady> lue:  or were you asking about the GLR?  pmichaud++ has a blog on that...

[03:16] *** araujo left
[03:17] <lue> GLR? I was just mentioning that [X+] @listoflists wasn't DWIMming; at the time I had to resort to @a[0] X+ @a[1] X+ @a[2] ...

[03:17] <TimToady> okay

[03:17] *** araujo joined
[03:19] *** jimmy_ left
[03:28] <japhb> TimToady: I actually had two multis in the role, so I could add a new truncation boundary ('quarter', in this case).  Am I forced to do it with an if or when in an only method in the role?

[03:29] <TimToady> alternately, try a 'lastcall; nextsame'

[03:31] *** atroxaper joined
[03:32] <TimToady> the basic problem being that nextsame goes to the wrong dispatcher

[03:34] <TimToady> so you have to terminate the multi dispatch to get to the next method dispatch

[03:38] *** adu left
[03:38] *** atroxaper left
[03:49] *** aborazmeh joined
[03:49] *** aborazmeh left
[03:49] *** aborazmeh joined
[03:50] <japhb> I was afraid the workaround would be much uglier.  I'll give lastcall a try.

[03:51] *** jack_rabbit joined
[03:54] <japhb> Dang, no dice.  Is lastcall not implemented?

[03:54] <TimToady> could be

[03:54] <JimmyZ_> m: lastcall

[03:54] <camelia> rakudo-moar 5f6494: OUTPUT«lastcall is not in the dynamic scope of a dispatcher␤  in block  at src/gen/m-CORE.setting:744␤  in block <unit> at /tmp/HXHpxpZu3o:1␤␤»

[03:55] <TimToady> hmm

[03:55] <JimmyZ_> m: nextsame

[03:55] <camelia> rakudo-moar 5f6494: OUTPUT«nextsame is not in the dynamic scope of a dispatcher␤  in block  at src/gen/m-CORE.setting:734␤  in block <unit> at /tmp/6MaViaT6J3:1␤␤»

[03:55] <TimToady> odd

[03:56] * TimToady doesn't see how a role would interfere...

[04:00] <japhb> m: class NewDate is Date { multi method truncated-to(|) { lastcall; nextsame } }; my $nd = NewDate.today; say $nd.truncated-to('week');

[04:00] <camelia> rakudo-moar 5f6494: OUTPUT«Nil␤»

[04:00] <japhb> Role isn't the problem; it's not getting to the right dispatcher it looks like

[04:12] *** anaeem1_ joined
[04:14] *** anaeem1_ left
[04:15] *** anaeem1 joined
[04:17] *** pyrimidi_ joined
[04:32] *** KCL_ joined
[04:47] *** chenryn left
[04:54] *** tinyblak joined
[05:00] <dalek> rakudo/nom: 080b40f | TimToady++ | src/core/ (3 files):

[05:00] <dalek> rakudo/nom: move List.ACCEPTS Parcel and Array for now

[05:00] <dalek> rakudo/nom: 

[05:00] <dalek> rakudo/nom: List.ACCEPTS now indicates a success status.

[05:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/080b40feab

[05:00] <tony-o> m: 'something.min.js'.match(/ '.' .*? $ /).Str.say;

[05:00] <camelia> rakudo-moar 5f6494: OUTPUT«.min.js␤»

[05:02] *** kaare_ joined
[05:03] *** KCL joined
[05:05] *** KCL_ left
[05:08] <tony-o> how do i do [^\.] in a regex for perl6 ?

[05:09] <tony-o> i'm not using the right words and all i'm finding is <!before

[05:11] *** chenryn joined
[05:14] <flussence> <-[.]> ?

[05:17] <tony-o> ah.. missed the < >, thanks flussence 

[05:20] * TimToady wonders if -. would be a useful sugar

[05:21] <TimToady> or something else a bit shorter than 6 chars

[05:24] <TimToady> m: say "foo" ~~ m:g/./

[05:24] <camelia> rakudo-moar 080b40: OUTPUT«｢f｣␤ ｢o｣␤ ｢o｣␤␤»

[05:24] <TimToady> \o/

[05:27] <tony-o> m: say "foo." ~~ m/-'.'/;

[05:27] <camelia> rakudo-moar 080b40: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unrecognized regex metacharacter - (must be quoted to match literally)␤at /tmp/m4R7psleri:1␤------> [32msay "foo." ~~ m/[33m⏏[31m-'.'/;[0m␤Unrecognized regex metacharacter ' (must be quoted to match literally)…»

[05:27] <tony-o> m: say "foo." ~~ m/<-'.'>/;

[05:27] <camelia> rakudo-moar 080b40: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unrecognized regex metacharacter < (must be quoted to match literally)␤at /tmp/_pv56ufYIX:1␤------> [32msay "foo." ~~ m/<-[33m⏏[31m'.'>/;[0m␤Unrecognized regex metacharacter - (must be quoted to match literally)…»

[05:27] <tony-o> m: say "foo." ~~ m/<-['.']>/;

[05:27] <camelia> rakudo-moar 080b40: OUTPUT«Potential difficulties:␤    Repeated character (') unexpectedly found in character class␤    at /tmp/CjtEtL88Cs:1␤    ------> [32msay "foo." ~~ m/<-[33m⏏[31m['.']>/;[0m␤｢f｣␤␤»

[05:30] *** JimmyZ_ left
[05:31] *** rurban joined
[05:35] *** kurahaupo left
[05:39] *** ptc_p6 joined
[05:42] *** adu joined
[05:44] *** [Sno] left
[05:44] *** JimmyZ_ joined
[05:51] *** telex left
[05:51] *** ptc_p6 left
[05:52] *** telex joined
[05:55] *** kaare_ left
[06:08] *** nige joined
[06:10] *** tinyblak left
[06:10] *** tinyblak joined
[06:24] *** kaare_ joined
[06:32] *** ptc_p6 joined
[06:33] *** mr-foobar left
[06:36] *** tinyblak_ joined
[06:40] *** tinyblak left
[06:41] *** ptc_p6 left
[06:48] <TimToady> also need to set $/ to a List if the match or subst returns a list, but some tests seem to think $/ is always a Match, surprise, surprise...

[06:52] <lue> I would almost suggest that a list of matches should rather be in @/ :) .

[06:54] *** atroxaper joined
[06:56] *** kaleem joined
[06:58] *** Isp-sec joined
[07:00] *** atroxaper left
[07:02] <TimToady> @() is sufficient for that

[07:04] <raydiak> amusing typo of the day: "rakudobrew build most"

[07:08] *** BenGoldberg left
[07:09] * TimToady feels as though that should be 'build moast'

[07:12] <raydiak> well if it felt right it wouldn't be a typo :)  happened b/c my left hand was offset one key...amusing that the accident was more correct english than the intended string, yet still so related

[07:14] <TimToady> so 'build niar' would be the opposite mistake...

[07:15] *** bjz joined
[07:17] <raydiak> for one of several interpretations of "opposite", absolutely

[07:18] <Woodi> hallo today :)

[07:19] <Woodi> raydiak: in Polish "most" is "bridge" so "build bridge" is quite correct :)

[07:21] <raydiak> heh funny...hi Woodi

[07:22] *** denis_boyun joined
[07:23] *** darutoko joined
[07:40] *** rurban_ joined
[07:43] *** FROGGS joined
[07:45] * mathw wonders what happens if you rakudobrew build moat

[07:48] <raydiak> fixed it before I hit enter, but iirc it tells you something like "building most is NYI; well volunteered!"

[07:49] *** gtodd joined
[07:50] <TimToady> most appropriate

[07:51] *** vti joined
[07:51] <raydiak> I volunteer to dig the moat (given transportation, room, and board)

[07:56] *** blackbolt joined
[07:56] <TimToady> .oO(you'll never get rich, by digging a ditch...)

[07:57] *** atroxaper joined
[07:58] <raydiak> .oO(it is easier for a camel to go through the eye of a needle, than for a rich man to enter the kingdom of God)

[08:02] *** atroxaper left
[08:02] *** adu left
[08:03] <FROGGS> o/

[08:03] <raydiak> in which case, I ought to slip right through those gates like a carbon nanotube :)\

[08:03] <raydiak> \o

[08:03] *** rindolf joined
[08:04] <mathw> I always thought that quote just encouraged rich people to be really nasty, since they're doomed anyway they might as well be arrogant whatsits

[08:06] <raydiak> He goes on to say "With people this is impossible, but with God all things are possible."

[08:10] *** zakharyas joined
[08:17] <TimToady> well, most people will take any excuse to be nasty, really :)

[08:18] <TimToady> speaking of which, the current implementation of s/// is

[08:21] <TimToady> it returns the current value of $_ rather than the success of the substitution

[08:23] <mathw> Hmm. Seems unhelpful.

[08:24] *** nige left
[08:29] *** nige joined
[08:31] * raydiak finds himself contracted to build a 1-page website for a pole-dancing fitness gym

[08:33] * Woodi is dreaming about web pages making and "normal" programming be a plain, artisan job for few centuries from now ;)

[08:36] <Woodi> btw. internet is in very infancy state at the moment... today I wanted to know prices for wood paint in our small town shops and it's imposible to find this on internet ! ;)

[08:36] *** pecastro left
[08:36] <Woodi> even futuristic to wish such simple information :)

[08:38] <raydiak> all you had to do was call around and put the prices in comments on their google pages and you could have fixed the internet for us! :)

[08:38] *** pecastro joined
[08:39] *** andreoss left
[08:41] <Woodi> raydiak: no! becouse price can change any second and information will be out of data ! all that shops should have some actualization stream in place to update prices and stock !

[08:41] <Woodi> err... do bakerise should do that also ?

[08:41] <nwc10> I'm failing to find this in the documentation - what's the Perl 6 way of writing cat?

[08:41] <nwc10> ie perl -e 'print while <>'

[08:43] <TimToady> m: slurp.print

[08:43] <camelia> rakudo-moar 080b40: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤I mo dhiaidh bhí gleanntáin ghlas’ G…»

[08:43] <TimToady> m: .say for lines

[08:43] <camelia> rakudo-moar 080b40: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤I mo dhiaidh bhí gleanntáin ghlas’ G…»

[08:43] <nwc10> thanks

[08:44] *** Isp-sec left
[08:48] <dalek> rakudo/nom: 6b429b9 | TimToady++ | src/core/Str.pm:

[08:48] <dalek> rakudo/nom: set $/ on listy match too

[08:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6b429b95d9

[08:49] *** [Sno] joined
[08:50] <raydiak> alright enough of my silliness for now, this was one horrific day and I'm thankful it's over...g'night #perl6

[08:51] <FROGGS> gnight raydiak 

[08:52] *** [Tux] joined
[08:53] *** rindolf left
[08:56] <blackbolt> can someone help me with substitution. for (@test){ s/\'//:g;}. it remove only first \'

[08:57] *** brrt joined
[08:58] <TimToady> us s:g/\'// instead

[08:58] <TimToady> *use

[08:59] <blackbolt> ohhh thanks TimToady

[09:00] <TimToady> and you don't need the parens around @test, just spaces

[09:01] *** KCL left
[09:01] *** ptc_p6 joined
[09:02] <mathw> that would require shops to have decent IT systems

[09:02] <mathw> (delayed, sorry, forgot I'd scrolled up)

[09:04] <mathw> The lack of parens there is still one of my favourite syntactic things in Perl 6. It lightens up the code so much

[09:04] <TimToady> scrolling down requires decent IT systems...

[09:04] <mathw> it would help if I had drunk more than a few sips of this delicious hot chocolate already

[09:04] <mathw> then I might be marginally more awake

[09:06] *** ptc_p6 left
[09:06] *** ptc_p6 joined
[09:09] <dalek> roast: bd41b86 | TimToady++ | S05-modifier/ (2 files):

[09:09] <dalek> roast: m:g// can now work under smartmatch, returns List

[09:09] <dalek> roast: review: https://github.com/perl6/roast/commit/bd41b863d8

[09:09] <dalek> rakudo/nom: 1eb7fad | TimToady++ | src/core/List.pm:

[09:09] <dalek> rakudo/nom: fake up .from/.to on List for lists of matches

[09:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1eb7fada84

[09:10] * TimToady leaves the s/// work for tomorrow, assuming he doesn't blow away in this storm...

[09:10] <mathw> My advice is to avoid going kite flying

[09:10] <mathw> Also stay indoors if you're water-soluble

[09:12] * TimToady hopes staying in bed is adequate to stay dry for the next 8 hours or so

[09:12] <TimToady> zzz &

[09:15] <mathw> Depends how sturdy your house is I suppose. Sleep well!

[09:20] *** nige left
[09:23] *** tinyblak_ left
[09:23] *** tinyblak joined
[09:23] *** _4d47 left
[09:27] *** tinyblak left
[09:32] *** fhelmberger joined
[09:32] *** andreoss joined
[09:32] *** fhelmberger left
[09:32] *** fhelmberger joined
[09:32] *** woolfy left
[09:33] <dalek> roast: 5a1239a | (Elizabeth Mattijsen)++ | S05-modifier/perl5_0.t:

[09:33] <dalek> roast: Unfudge passing TODO, TimToady++

[09:33] <dalek> roast: review: https://github.com/perl6/roast/commit/5a1239a325

[09:34] <lizmat> afk&

[09:37] *** robinsmidsrod left
[09:39] *** kurahaupo joined
[09:39] *** robinsmidsrod joined
[09:43] *** Rounin joined
[09:43] *** woolfy joined
[09:49] *** rurban1 joined
[09:53] *** itz_ joined
[09:55] *** rurban1 left
[10:05] *** aborazmeh left
[10:06] *** mvuets joined
[10:09] <mvuets> hello, #perl6

[10:09] *** aborazmeh joined
[10:13] <mathw> hello

[10:14] *** aborazmeh left
[10:17] *** blackbolt left
[10:19] *** JimmyZ_ left
[10:20] *** aborazmeh joined
[10:22] <andreoss> I got "Unhandled exception: const_iX NYI" with huge amount of iterations, but with fewer iterations code runs just fine

[10:23] <andreoss> what is not yet implemented in this case? 

[10:24] *** tinyblak joined
[10:25] *** tinyblak left
[10:31] <masak> antenoon, #perl6

[10:32] <masak> m: sub f { my &b = { return }; return &b }; my &c = f(); &c()

[10:32] <camelia> rakudo-moar 1eb7fa: OUTPUT«Attempt to return outside of any Routine␤  in block  at src/gen/m-CORE.setting:629␤  in block <unit> at /tmp/fyt7jTUWyS:1␤␤»

[10:32] *** Alula left
[10:33] <masak> m: say X::ControlFLow::Return.new.message

[10:33] <camelia> rakudo-moar 1eb7fa: OUTPUT«Could not find symbol '&Return'␤  in method <anon> at src/gen/m-CORE.setting:13810␤  in any find_method_fallback at src/gen/m-Metamodel.nqp:2725␤  in any find_method at src/gen/m-Metamodel.nqp:988␤  in block <unit> at /tmp/JfDtDJj6ni:1␤␤»

[10:33] <masak> m: say X::ControlFlow::Return.new.message

[10:33] <camelia> rakudo-moar 1eb7fa: OUTPUT«Attempt to return outside of any Routine␤»

[10:37] <mvuets> lizmat: re http://paste.scsys.co.uk/451709, it is tricky to reproduce, i filed a ticket with details: #123406

[10:37] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123406

[10:37] <mvuets> lizmat: i think hoelzro made a fix last night

[10:38] <mvuets> yup, hoelzro++ https://github.com/MoarVM/MoarVM/pull/162

[10:46] *** Alula joined
[10:53] *** rindolf joined
[10:54] *** tinyblak joined
[10:58] <masak> today's autopun: "Those who believe in telekinesis, raise my hand."

[10:59] *** tinyblak left
[11:02] *** brrt left
[11:03] <tadzik> :D

[11:04] *** Alula left
[11:09] *** Alula joined
[11:10] *** kurahaupo left
[11:12] *** chenryn left
[11:12] *** psch joined
[11:13] *** robinsmidsrod left
[11:13] <psch> hi #perl6 

[11:15] *** robinsmidsrod joined
[11:20] *** Grrrrrrr joined
[11:23] *** bjz left
[11:23] *** chenryn joined
[11:26] *** kaleem left
[11:26] *** bjz joined
[11:32] *** anaeem1 left
[11:32] *** anaeem1_ joined
[11:33] *** anaeem1_ left
[11:35] *** rindolf left
[11:54] *** pecastro left
[11:55] *** tinyblak joined
[11:59] *** tinyblak left
[12:00] <dalek> nqp: ca209b6 | Carlin++ | 3rdparty/libtommath/ (2 files):

[12:00] <dalek> nqp: use arc4random on platforms that support it

[12:00] <dalek> nqp: 

[12:00] <dalek> nqp: this merges in patches from MoarVM's libtommath

[12:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ca209b6f32

[12:00] <dalek> nqp: 241c631 | (Tobias Leich)++ | 3rdparty/libtommath/ (2 files):

[12:00] <dalek> nqp: Merge pull request #206 from carbin/arc4random

[12:00] <dalek> nqp: 

[12:00] <dalek> nqp: use arc4random on platforms that support it

[12:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/241c63160f

[12:00] *** Grrrrrrr left
[12:00] *** bcode left
[12:02] *** Alula left
[12:02] *** Alula joined
[12:09] *** brrt joined
[12:12] *** Util joined
[12:15] *** eMBee is now known as no-one

[12:15] *** no-one is now known as eMBee

[12:20] *** anaeem1_ joined
[12:33] *** myp joined
[12:38] <andreoss> map and grep don't work within promises? 

[12:39] <andreoss> my $p = start { grep { is-prime $_ },  1..100  };

[12:39] <FROGGS> m: my $p = start { grep { is-prime $_ },  1..100  }; say $p

[12:39] <camelia> rakudo-moar 1eb7fa: OUTPUT«Promise.new(scheduler => ThreadPoolScheduler.new(initial_threads => 0, max_threads => 16, uncaught_handler => Callable), status => PromiseStatus::Kept)␤»

[12:40] <andreoss> say await $p; # empty 

[12:42] *** rurban1 joined
[12:43] *** jack_rabbit left
[12:44] <FROGGS> m: my $p = start { grep { is-prime $_ },  1..100  }; say await $p

[12:44] <camelia> rakudo-moar 1eb7fa: OUTPUT«␤»

[12:44] <FROGGS> m: my $p = start { grep { is-prime $_ },  1..100  }; say (await $p).perl

[12:44] <camelia> rakudo-moar 1eb7fa: OUTPUT«().list␤»

[12:44] <brrt> is camelia allowed to start threads?

[12:44] <FROGGS> it at least looks like

[12:44] <psch> m: await start { say "i think so" }

[12:44] <camelia> rakudo-moar 1eb7fa: OUTPUT«i think so␤»

[12:45] <FROGGS> m: my $p = start { 1..100  }; say await $p

[12:45] <camelia> rakudo-moar 1eb7fa: OUTPUT«1..100␤»

[12:45] <FROGGS> m: my $p = start { (^100).map: 'ö'  }; say await $p

[12:45] <camelia> rakudo-moar 1eb7fa: OUTPUT«␤»

[12:45] *** blackbolt joined
[12:45] <psch> m: await start { say grep .is-prime, [1, 2, 3, 4] }

[12:45] <camelia> rakudo-moar 1eb7fa: OUTPUT«␤»

[12:46] <FROGGS> m: say await start { (^100).map: 'ö' }

[12:46] <camelia> rakudo-moar 1eb7fa: OUTPUT«␤»

[12:46] <FROGGS> j: say await start { (^100).map: 'ö' }

[12:46] <camelia> rakudo-jvm 1eb7fa: OUTPUT«Can't open perl script "/home/camelia/jvm-rakudo/eval-client.pl": No such file or directory␤»

[12:46] <FROGGS> bah

[12:46] <FROGGS> m: say await start { [~] 1, 2, 3 }

[12:46] <camelia> rakudo-moar 1eb7fa: OUTPUT«123␤»

[12:47] <FROGGS> m: say await start { (^3).join: '' }

[12:47] <camelia> rakudo-moar 1eb7fa: OUTPUT«012␤»

[12:47] <FROGGS> okay, it really looks like map and grep are fishy here

[12:48] <andreoss> also 

[12:49] <psch> m: say await start { my $x; $x ~= $_ for 1..10 }

[12:49] <camelia> rakudo-moar 1eb7fa: OUTPUT«Nil␤»

[12:49] <psch> for goes through MapIter as well i think?

[12:49] <psch> hm, am i actually returning $x there..?

[12:49] <psch> m: say await start { my $x; $x ~= $_ for 1..10; $x }

[12:49] <camelia> rakudo-moar 1eb7fa: OUTPUT«12345678910␤»

[12:49] <psch> right, nevermind :)

[12:50] <andreoss> m: my $p = start { gather for 1..1000 { take $_ if $_.is-prime } };say await $p; 

[12:50] <camelia> rakudo-moar 1eb7fa: OUTPUT«␤»

[12:50] <FROGGS> m: say await start { do for 1..10 { $_ } }

[12:50] <camelia> rakudo-moar 1eb7fa: OUTPUT«1 2 3 4 5 6 7 8 9 10␤»

[12:51] <andreoss> gather/take actually gives some results, but not the whole list of primes below 1000

[12:51] <psch> m: say await start { do for 1..1000 { .is-prime ?? $_ !! Nil } }

[12:51] <camelia> rakudo-moar 1eb7fa: OUTPUT«2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 3…»

[12:52] * psch is distracting himself from figuring out list/array boxing from java to rakudo

[12:52] <colomon> m: say grep .is-prime, [1, 2, 3, 4]

[12:52] <camelia> rakudo-moar 1eb7fa: OUTPUT«␤»

[12:52] <colomon> m: say grep .is-prime, 1, 2, 3, 4

[12:52] <camelia> rakudo-moar 1eb7fa: OUTPUT«␤»

[12:53] <FROGGS> m: say await start { (^100).map: 'ö'; 1 } # lol

[12:53] <camelia> rakudo-moar 1eb7fa: OUTPUT«===SORRY!===␤No such method 'count' for invocant of type 'Str'␤»

[12:53] <colomon> m: say (1, 2, 3, 4).grep(*.is-prime)

[12:53] <camelia> rakudo-moar 1eb7fa: OUTPUT«2 3␤»

[12:55] *** chenryn left
[12:55] <FROGGS> m: say await start { (^100).map: 'ö'; 1 } # <--- that happens in MapIter.reify at 'my $argc   := $!block.count;'

[12:55] <camelia> rakudo-moar 1eb7fa: OUTPUT«===SORRY!===␤No such method 'count' for invocant of type 'Str'␤»

[12:55] <FROGGS> ohh, that's actually correct

[12:56] <FROGGS> m: say await start { (^100).map: { 'ö' }; 1 }

[12:56] <andreoss> does "do" mean something special for promises? 

[12:56] <camelia> rakudo-moar 1eb7fa: OUTPUT«1␤»

[12:56] *** tinyblak joined
[12:56] <FROGGS> andreoss: no

[12:56] <FROGGS> 'do' puts a loop in statement context, which means it will produce results

[12:57] <dalek> modules.perl6.org: 427af07 | moritz++ | web/lib/P6Project.pm:

[12:57] <dalek> modules.perl6.org: Try to make UTF-8 handling more robust

[12:57] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/427af075eb

[12:57] <FROGGS> so you can use 'do' to indicate that a while/until/for loop should either produce values or throw them away

[12:58] <FROGGS> m: my $x = 64; say do while $x++ < 85 { .chr }

[12:58] <camelia> rakudo-moar 1eb7fa: OUTPUT«False␤»

[12:58] <FROGGS> huh

[12:58] *** rurban left
[12:59] <moritz> it returns the last evaluated condition

[12:59] <moritz> m: say do while 0 { 42 }

[12:59] <camelia> rakudo-moar 1eb7fa: OUTPUT«0␤»

[12:59] <FROGGS> m: my $x = 64; say do while $x++ < 85 { $x.chr }

[12:59] <camelia> rakudo-moar 1eb7fa: OUTPUT«False␤»

[12:59] <FROGGS> weird

[13:00] <FROGGS> that's not what I expect

[13:00] *** tinyblak left
[13:00] <FROGGS> m: my $x = 64; say do while $x++ < 85 { $x.chr; last }

[13:00] <camelia> rakudo-moar 1eb7fa: OUTPUT«-> (|) { #`(Block|45850752) ... }␤»

[13:00] <moritz> and it's not up to spec, iirc

[13:04] *** Woodi left
[13:04] *** Woodi joined
[13:05] *** pecastro joined
[13:06] <psch> so what do i have to do to create hll array in the vm level?  i'm allocating what i get from Ops.hlllist(tc), but that REPR "does not support bind_pos_boxed"

[13:08] <psch> i did successfully build a BOOTArray, but i didn't figure out how to hllize that properly either :/

[13:09] <hoelzro> morning #perl6

[13:09] <moritz> http://modules.p6c.org/ now running

[13:12] <colomon> o/

[13:15] <dalek> mu: d70722e | moritz++ | misc/svn-search/ (3 files):

[13:15] <dalek> mu: remove outdated svn-search

[13:15] <dalek> mu: review: https://github.com/perl6/mu/commit/d70722ef23

[13:17] *** rindolf joined
[13:20] *** atroxaper joined
[13:27] <dalek> mu: 9c8f365 | moritz++ | util/update-design.perl6.org.sh:

[13:27] <dalek> mu: script for generating design.perl6.org HTML (untested)

[13:27] <dalek> mu: review: https://github.com/perl6/mu/commit/9c8f365a64

[13:28] <dalek> mu: 461f574 | moritz++ | misc/mothballed/yap6/ (29 files):

[13:28] <dalek> mu: remove stuff that has been mothballed for 5 years

[13:28] <dalek> mu: review: https://github.com/perl6/mu/commit/461f574827

[13:32] <sergot> m:say <a b c d>.splice: 0, 2;

[13:32] <sergot> m: say <a b c d>.splice: 0, 2;

[13:32] <camelia> rakudo-moar 1eb7fa: OUTPUT«No such method 'splice' for invocant of type 'Parcel'␤  in block <unit> at /tmp/TEsxO2hsDZ:1␤␤»

[13:32] <sergot> do we have splice for arrays?

[13:32] <psch> m: say [1, 2, 4].splice: 2, 3

[13:32] <camelia> rakudo-moar 1eb7fa: OUTPUT«4␤»

[13:33] <sergot> psch++

[13:33] <psch> m: say @(<a b c>).splice: 0, 2;

[13:33] <camelia> rakudo-moar 1eb7fa: OUTPUT«a b␤»

[13:33] <psch> sergot: the latter one actually relates, i guess :)

[13:34] <sergot> m: say <a b c d>.list.splice: 0, 2;

[13:34] <camelia> rakudo-moar 1eb7fa: OUTPUT«a b␤»

[13:34] <tadzik> you know what we should do, starting next year? Say something like #adventcalendar on the IRC whenever something historical happens, or a question becomes a FAQ

[13:35] <tadzik> this way, at the end of the year, we'll know what to write about :)

[13:36] *** pecastro left
[13:37] <andreoss> how do i declare thread-shared variable? 

[13:37] <andreoss> for promises

[13:39] <andreoss> usual my $var in global scope causes segmentation faults

[13:39] <moritz> andreoss: iirc you can use it, you just have to lock-protect it

[13:39] <moritz> andreoss: but it's better to avoid that, and use some reactive pattern instead

[13:40] <moritz> (though I'm not an expert on concurrency)

[13:43] *** kaleem joined
[13:43] *** kaleem left
[13:44] *** kaleem joined
[13:52] <colomon> tadzik: Typed::Subroutines failed overnight smoke

[13:52] <tadzik> oh noes

[13:52] <tadzik> I'll check it out, thanks

[13:53] <psch> andreoss: http://jnthn.net/papers/2014-nlpw-reactive.pdf and http://jnthn.net/papers/2014-yapceu-async.pdf might be of interest to you

[13:56] *** [Sno]_ joined
[13:56] *** tinyblak joined
[13:57] *** [Sno] left
[13:57] *** [Sno]_ is now known as [Sno]

[13:57] *** atroxaper left
[13:57] <TimToady> tadzik: if the tests rely on the old List semantics under smartmatch, could be my changes

[13:58] *** aborazmeh left
[13:58] <nwc10> TimToady: are you still dry?

[13:59] <tadzik> TimToady: the code uses @types ~~ $s.signature.params.map(*.type)

[13:59] <tadzik> so, might be

[13:59] *** onebitboy left
[14:01] <tadzik> TimToady: what's changed about the list smartwatching?

[14:01] <tadzik> erm, smartmatching

[14:01] *** tinyblak left
[14:21] <TimToady> nwc10: the heavy rain doesn't start for another 10 minutes or so :)

[14:22] <TimToady> List is now a distinguished result type for smartmatching, just like Bool, Match, and Nil

[14:22] <TimToady> so you need to cast it to Parcel or Array to get the same effect currently

[14:23] <TimToady> but that's probably going away eventually too, in favor of a specific match-this-list keyword of some sort

[14:24] <TimToady> overloading the base types for this is kinda wrongish

[14:25] <TimToady> m: say "foo" ~~ m:g/./

[14:25] <camelia> rakudo-moar 1eb7fa: OUTPUT«｢f｣␤ ｢o｣␤ ｢o｣␤␤»

[14:25] <TimToady> the List changes were to make ^^ work

[14:26] <psch> m: "foo" ~~ m:g/./; $/.perl.say

[14:26] <camelia> rakudo-moar 1eb7fa: OUTPUT«(Match.new(orig => "foo", from => 0, to => 1, ast => Any, list => ().list, hash => EnumMap.new()), Match.new(orig => "foo", from => 1, to => 2, ast => Any, list => ().list, hash => EnumMap.new()), Match.new(orig => "foo", from => 2, to => 3, ast => Any, li…»

[14:26] <TimToady> it's a list of match

[14:26] <moritz> TimToady: I thought the desired solution was to return a list-ish Match object from m:g//

[14:26] <TimToady> the other night we put our heads together and decided it was better to make List a result type than to fake up a Match

[14:27] <TimToady> the boolean semantics of List work out very nicely this way, and you don't have to .list the result to use it

[14:27] <tadzik> colomon: fixed, thanks

[14:28] <andreoss> psch: for me it's buggy, i've tried to make my naive solution to be thread-aware, but it seems a with more than two iterations the program segfaults 

[14:28] <psch> m: "abc" ~~ m:g/$<foo=.>/; say $()>><foo>

[14:28] <camelia> rakudo-moar 1eb7fa: OUTPUT«No such method 'ast' for invocant of type 'List'␤  in block <unit> at /tmp/jGNuDOnNWr:1␤␤»

[14:28] *** novice666 joined
[14:28] <andreoss> http://fpaste.org/158752/18307922/ 

[14:28] <psch> m: "abc" ~~ m:g/$<foo=.>/; say @$/>><foo>

[14:28] <camelia> rakudo-moar 1eb7fa: OUTPUT«␤»

[14:28] <psch> hm

[14:28] <psch> m: "abc" ~~ m:g/$<foo=.>/; say $<foo> # this seems not-so-great

[14:28] <camelia> rakudo-moar 1eb7fa: OUTPUT«postcircumfix:<{ }> not defined for type List␤  in method gist at src/gen/m-CORE.setting:13806␤  in sub say at src/gen/m-CORE.setting:16560␤  in block <unit> at /tmp/orqBWKkj13:1␤␤»

[14:30] <novice666> m: say eval("abs(-10)");

[14:30] <camelia> rakudo-moar 1eb7fa: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/nWbC9_1wUV␤Undeclared routine:␤    eval used at line 1␤␤»

[14:30] <TimToady> it's EVAL now

[14:30] <FROGGS> m: say EVAL("abs(-10)");

[14:30] <camelia> rakudo-moar 1eb7fa: OUTPUT«10␤»

[14:30] <novice666> thanks

[14:31] <psch> andreoss: i can't really help with concurrency, i just remembered that these two talks by jnthn++ exist

[14:31] *** smls joined
[14:32] <psch> TimToady: i like the List change, but i wonder about the consistency of $/ semantics.  having to pay attention if the last match was :g seems unwieldy

[14:32] <psch> not sure what to put in there instead, though, considering smartmatch for subst and match checks $/ anyway

[14:32] <TimToady> m: "abc" ~~ m:g/$<foo=.>/; say $/.map: *.<foo>

[14:32] <camelia> rakudo-moar 1eb7fa: OUTPUT«␤»

[14:33] <TimToady> m: "abc" ~~ m:g/$<foo=.>/; .say for @$/

[14:33] <camelia> rakudo-moar 1eb7fa: ( no output )

[14:33] <TimToady> oh, it's malformed

[14:34] <TimToady> m: "abc" ~~ m:g/<foo=.>/; .say for @$/

[14:34] <camelia> rakudo-moar 1eb7fa: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/gHQf7ZgDTz␤Unable to parse expression in metachar:sym<assert>; couldn't find final '>' ␤at /tmp/gHQf7ZgDTz:1␤------> [32m"abc" ~~ m:g/<foo=.[33m⏏[31m>/; .say for @$/[0m␤    expecting a…»

[14:34] <TimToady> m: "abc" ~~ m:g/$<foo=>./; .say for @$/

[14:34] <camelia> rakudo-moar 1eb7fa: ( no output )

[14:34] <TimToady> m: "abc" ~~ m:g/$<foo>./; .say for @$/

[14:34] <camelia> rakudo-moar 1eb7fa: ( no output )

[14:34] <smls> TimToady: What about incremental matching, like we could do with which m//g and m//gc in Perl 5? Is there no replacement planned for that?

[14:34] <TimToady> m: "abc" ~~ m:g/$<foo>=./; .say for @$/

[14:34] <camelia> rakudo-moar 1eb7fa: OUTPUT«｢a｣␤ foo => ｢a｣␤␤｢b｣␤ foo => ｢b｣␤␤｢c｣␤ foo => ｢c｣␤␤»

[14:34] <TimToady> there we go

[14:35] <TimToady> m:g is lazy

[14:35] <smls> you mean it returns a lazy list?

[14:35] <TimToady> yes

[14:35] <smls> ok

[14:35] <TimToady> supposed to, anyway

[14:36] <psch> do we need Cats for that?

[14:36] <TimToady> no

[14:36] <smls> And will it be possible to teach the GC to free elements of lazy lists that have already been iterated over? :P

[14:36] <TimToady> depends on how they're stored

[14:37] <TimToady> that's one of the things we talked about in Salzburg

[14:37] *** anaeem1_ left
[14:37] <TimToady> Cats might be useful for incremental output of s///

[14:37] <psch> ah, right

[14:38] <TimToady> m: "abc" ~~ m:g/$<foo>=./; say $/»<foo>

[14:38] <camelia> rakudo-moar 1eb7fa: OUTPUT«｢a｣␤ ｢b｣␤ ｢c｣␤␤»

[14:38] <TimToady> works if you actually match the pattern

[14:40] <smls> Btw when building moar with rakudobrew, I see a bunch of lines like «gcc -c -fPIC -O1 -DNDEBUG  -D_REENTRANT -D_FILE_OFFSET_BITS=64 ...»

[14:40] <smls> Why "-O1"?

[14:41] <TimToady> m: "abc" ~~ m:g/$<foo>=./; say $1

[14:41] <camelia> rakudo-moar 1eb7fa: OUTPUT«｢b｣␤ foo => ｢b｣␤␤»

[14:41] *** kaare_ left
[14:42] <TimToady> -O2 was getting indigestion on something some number of months ago

[14:42] *** ptc_p6 left
[14:42] <psch> hm, i guess that's ok.  having $0, $1 etc reference the different 'instances' of :g Match objects makes sense to me at least

[14:43] <smls> Interesting; I thought -O2 did only "safe" optimizations?

[14:44] <TimToady> some things are not so safe for large interpreters playing with goto

[14:45] <TimToady> which may or may not have been the problem at the time

[14:46] <brrt> TimToady - already awake :-)

[14:47] <TimToady> yes, alas

[14:47] *** tinyblak joined
[14:51] <TimToady> jnthn,brrt: btw, when trying (and failing) to fix up s/// last night, I was getting some: Spesh: failed to fix up handlers (-1, 556, 556)

[14:51] <TimToady> what does that mean?

[14:51] *** tinyblak left
[14:52] <brrt> iirc, handlers are basically pointers into the bytecode, and they are made 'symbolic' during the bytecode->spesh graph transformation, and back to pointers in the spesh graph->bytecode transformation

[14:53] <brrt> it looks to me as if some blocks were lost, but to be sure i'd have to see the spesh graph

[14:53] * TimToady wonders if something is cheating on s/// in there

[14:54] <TimToady> course it was in the setting, so things can get weird in any case

[14:54] *** andreoss left
[14:54] *** blackbolt left
[14:54] <TimToady> .subst is a bit weird insofar as the proto is not a bare {*}

[14:55] <TimToady> probably has something to do with that...

[14:59] <TimToady> together with futzing around with OUTER::<$/>

[14:59] <brrt> hmmm

[14:59] <brrt> possible, but that would still be an error on moars part imho

[14:59] <brrt> does it persist when MVM_SPESH_DISABLE_INLINE=1

[14:59] <TimToady> didn't try that yet

[15:01] <TimToady> I'll have to reproduce my changes, having backed them out in the interests of finishing up m:g//

[15:06] <smls> TimToady: Is parsing binary blobs part of the long-term vision for Perl 6 grammars? Custom while+unpack+if/else spaghetti code for parsing binary formats, doesn't seem very fun when you've been spoiled with grammars for parsing strings-based formats... :P

[15:12] <TimToady> treating blobs and bufs as strings to the extent it makes sense is part of the intended design

[15:12] <TimToady> the Stringy role is kind of a down payment on that

[15:13] <TimToady> you probably won't get grapheme semantics, or even Unicode codepoints

[15:14] <smls> nor would you probably want it there :)

[15:16] <psch> oh, someone fixed the Day 10 -> Day 11 link

[15:16] <psch> or maybe it does happen automatically?

[15:17] <FROGGS> we should be able to get rid of OUTER::<$/> by passing the $/ around, starting from the actions, at least for s/// and friends

[15:18] <FROGGS> not so for the method forms... but this maybe means that the method forms won't have side effects anymore, as they perhaps shouldn't have anyway

[15:18] <TimToady> I'm guessing we'll end up with a different method anyway

[15:19] <TimToady> subst still sets $/ internally for its replacement, but it's setting a private $/ in the proto

[15:19] <TimToady> if I read it aright

[15:21] *** rurban1 left
[15:22] <masak> TimToady: https://github.com/perl6/specs/commit/23ef17e57a03ff7aaf59dff986d90d3193c847a4 seems to do more than add List to 'OKness' types... was that deliberate?

[15:23] <TimToady> no, but I think it is probably closer to reality wrt PEG rules

[15:24] <TimToady> so we can let it stand

[15:26] *** telex left
[15:28] *** atroxaper joined
[15:28] *** telex joined
[15:32] *** c0nspiracy joined
[15:34] *** atroxaper left
[15:36] *** tinyblak joined
[15:45] <masak> oki.

[15:45] *** andreoss joined
[15:45] <masak> quick poll: do people prefer `die MyException.new` or `MyException.new.throw` ?

[15:46] *** kaleem left
[15:46] <tadzik> die

[15:47] <tadzik> you know what's going on from the first 3 characters

[15:47] <masak> ah, end-weight.

[15:47] <masak> yes, I was thinking the same thing.

[15:49] *** kaare_ joined
[15:50] <masak> what's the standard way to throw a control exception?

[15:50] <masak> `warn MyException.new` ?

[15:53] <smls> TimToady: How would we express something like   «read($fh, $buf, 2); my ($format) = unpack("n", $buf); if ($format == 42) { ...read...unpack...etc. } else { ... }»   in a grammar though?

[15:53] <smls> There would need to be a way to tell the grammar: Gobble up 2 bytes if, interpeted as an unsigned short in network order, they hold the value 42.

[15:53] <masak> haha -- you know you're doing something funky with your program when it stops and says "Trying to unwind over wrong handler". :)

[15:54] *** [Sno]_ joined
[15:55] *** [Sno] left
[15:55] *** [Sno]_ is now known as [Sno]

[15:57] <masak> m: class C is Exception {}; { die C.new; CATCH { default { say .WHAT } } }

[15:57] <camelia> rakudo-moar 1eb7fa: OUTPUT«(C)␤»

[15:58] <masak> m: class C is Exception {}; { warn C.new; CONTROL { default { say .WHAT } } }

[15:58] <camelia> rakudo-moar 1eb7fa: OUTPUT«(X::AdHoc)␤»

[15:58] <moritz> smls: (..) [ <?{ unpack('n', $0) == 42 }> ... | ...]

[15:58] <masak> why do I get the exception itself when I `die` with it, but `X::AdHoc` when I `warn` with it?

[15:58] <moritz> (if the grammar is in byte mode, if that exists)

[15:58] <masak> should I use another base class for control exceptions?

[15:58] *** kaleem joined
[15:59] <moritz> masak: because nobody really worked on warnings yet

[15:59] *** [Sno]_ joined
[15:59] <masak> hm. maybe I'd better stay away from control exceptions, then.

[16:00] *** [Sno] left
[16:00] *** [Sno]_ is now known as [Sno]

[16:00] *** kaleem left
[16:01] <TimToady> smls: nothin' sez we can't have subrules like <unpack('n')>

[16:01] <TimToady> they're just methods, after all

[16:04] <smls> Interesting; Where can I read more on subrules with parameters?

[16:05] *** abraxxa left
[16:09] <TimToady> well, the calling forms are mentioned at S05:1426

[16:09] <synopsebot> Link: http://perlcabal.org/syn/S05.html#line_1426

[16:10] <TimToady> on the recieving end, any regex/token/rule declaration can take an ordinary signature, so it really doesn't need much additional documentation

[16:11] <TimToady> if you write an ordinary method as part of a grammar, you have to know how to deal with cursors correctly, but other than that, it's an ordinary method

[16:12] <TimToady> basically, self in such a method is a cursor, and you're expected to return a new cursor saying how much you matched

[16:13] <smls> Also, if the grammar matched  <format=unpack('n')>  then how would we get at the unpacked integer?  $<format>  would just hold a Buf with the two original bytes, right?

[16:13] *** denis_boyun left
[16:13] <TimToady> would depend on how the method processed it and where it put it

[16:14] <TimToady> the new cursor carries all the match info

[16:14] <TimToady> as well as any ast you're constructing

[16:15] <TimToady> the standard grammar contains many examples

[16:16] <TimToady> though most of the ast making is hidden off in the actions modules instead of the grammar, at least for rakudo

[16:19] <smls> So, you'd let the unpack subrule implicitly call `make` to make the unpacked value available as part of the ast?

[16:21] <smls> Also, does  <unpack('n', :test(42))>  look sensible?

[16:22] <andreoss> why does perl6 run git sometimes? 

[16:23] <smls> Or maybe even <ushort(42)>  for maximum sugar...

[16:25] <tadzik> andreoss: the installation process might, Configure.pl to be exact

[16:26] <tadzik> or 'make spectest'. Perl 6 itself does not run gin :)

[16:26] <tadzik> or git

[16:27] *** mr-foobar joined
[16:29] *** lucas_ joined
[16:29] <lucas_> Hello

[16:29] <lucas_> Having a easter egg like 42 won't make my code less correct-ish if some funny client pass that exact string as input?

[16:30] <hoelzro> what's special about 42, again?

[16:30] <hoelzro> iirc, 42.WHY is special

[16:30] <hoelzro> m: 42.WHY

[16:30] <camelia> rakudo-moar 1eb7fa: ( no output )

[16:30] <hoelzro> m: say 42.WHY

[16:30] <camelia> rakudo-moar 1eb7fa: OUTPUT«(Any)␤»

[16:30] <hoelzro> huh, nvm

[16:30] <masak> m: "Life, the Universe, and Everything".WHY

[16:30] <camelia> rakudo-moar 1eb7fa: ( no output )

[16:30] <lucas_> its WHAT

[16:30] <masak> m: say "Life, the Universe, and Everything".WHY

[16:30] <camelia> rakudo-moar 1eb7fa: OUTPUT«42␤»

[16:30] <lucas_> *it's

[16:30] <psch> m: say 42.WHAT

[16:30] <camelia> rakudo-moar 1eb7fa: OUTPUT«(Int)␤»

[16:30] <andreoss> tadzik: i dont think so, i run some script with git repo, and as its seen in tmux title, perl6 run git 

[16:31] <andreoss> *running

[16:31] *** brrt left
[16:31] <TimToady> "some script" can do anything it pleases

[16:32] *** atroxaper joined
[16:33] <TimToady> the perl6 process itself does not run git for anything

[16:33] <andreoss> but it definitely doesn't have system("git") inside 

[16:33] <TimToady> m: system()

[16:33] <camelia> rakudo-moar 1eb7fa: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/BU7M_5gCvo␤Undeclared routine:␤    system used at line 1␤␤»

[16:33] <TimToady> there is no 'system' in Perl 6

[16:34] <TimToady> there are lots of other ways to run a subprocess

[16:34] <TimToady> including using a module that does so

[16:34] *** zakharyas left
[16:35] <TimToady> doing stuff with panda, for instance

[16:36] <smls> TimToady: I understood correctly, the "only" missing puzzle piece for binary grammars that needs to be provided by Perl6 itself is the support for matching against Bufs and other non-Str's - and then modules could provide all the sugar (like the unpack subroule), right?

[16:37] <smls> so it'd look like  «use Grammar::Binary; grammar BMP does Grammar::Binary { ... <unpack(...)> ... }»

[16:37] *** atroxaper left
[16:39] *** FROGGS left
[16:39] <hoelzro> smls: I had a similar thought

[16:39] <andreoss> my bad, it was bash who ran git, nevermind

[16:40] <lucas_> Well, if the programmer expects a Str typeobject and gets 42 as the answer will be fun anyway. Maybe I should grep 'WHY' in the module ecosystem...

[16:43] <lucas_> Oh, nevermind, I'm making the confusion again about WHAT vs. WHY... I've never used WHY...

[16:44] <psch> .WHY is documentation

[16:44] <lucas_> psch: Like Pod? Oh, thanks!

[16:45] <TimToady> and 42 is cool with pretending to be a string

[16:45] <hoelzro> m: #|(marine) sub yellow {}; say &yellow.WHY

[16:45] <camelia> rakudo-moar 1eb7fa: OUTPUT«marine␤»

[16:47] <psch> i was about to look up how it works... :)

[16:47] <psch> hoelzro++

[16:47] <lucas_> hoelzro: :D

[16:47] <TimToady> m: #| WHY NOT!?!␤ sub philosopher {}; say &philosopher.WHY

[16:47] <camelia> rakudo-moar 1eb7fa: OUTPUT«WHY NOT!?!␤»

[16:48] <psch> m: #|[cut me some slack] sub genius {}; say &genius.WHY

[16:48] <camelia> rakudo-moar 1eb7fa: OUTPUT«cut me some slack␤»

[16:48] * psch back to blog-writing

[16:49] * raydiak worries for TimToady who, at twice my age, seems to get half as much sleep at night

[16:50] <TimToady> only last night, and I plan to take a geezer nap later

[16:50] * raydiak worries somewhat less :)

[16:50] <mvuets> #| is even better in combination with 'multi sub MAIN' → http://paste.scsys.co.uk/451928

[16:52] <raydiak> oh, yeah! mvuets++ ...I should add that to some of my p6 work, kinda forgot about it

[16:53] <hoelzro> mvuets++ # p⬢ post?

[16:53] <mvuets> hoelzro: on my backlog already (-:

[16:53] <hoelzro> =)

[16:55] <raydiak> well, off to the doctor with me, just stopped in to say g'mornin, so...have a good morning, #perl6 \o

[16:55] <lucas_> So P6 has FP pattern matching in subroutine arguments?

[16:55] <TimToady> yup

[16:56] <TimToady> method arguments too

[16:56] <TimToady> in either case, as long as they're declared multi

[16:56] <lucas_> TimToady: nice, thank you

[16:57] *** sporus joined
[16:57] <ugexe> ive been playing with `use`ing multiple modules with multi MAIN (including #| usage) for dynamic plugin type command line arguments. i love multi MAIN more than anything else :)

[16:58] * TimToady remembers being delighted when he realized that multi would work for MAIN

[16:58] <smls> d

[16:59] <smls> [sorry, wrong window]

[17:00] <PerlJam> TimToady: I was delighted too until I realized that subcommands wouldn't quite work like I wanted

[17:00] <TimToady> well, we've had theories on that subject

[17:02] <mvuets> lucas_: check out the rock-paper-scissors example here https://raw.githubusercontent.com/perl6/book/397fd9c7334ff59ad8bc27ab1782045a272056c8/src/multi-dispatch.pod

[17:03] <lucas_> mvuets: Thank you! And nice example the 'multi sub MAIN'...

[17:04] * mvuets → home

[17:05] *** mvuets left
[17:05] *** atroxaper joined
[17:05] *** fhelmberger left
[17:06] *** Isp-sec joined
[17:06] *** c0nspiracy left
[17:08] <psch> btw, i've sent my CLA a few days back.  who do i talk to to confirm arrival?

[17:12] *** lucas_ left
[17:12] *** kurahaupo joined
[17:15] *** treehug88 joined
[17:15] <[Coke]> jnthn: minor nit: "It's job" -> "Its job"

[17:16] *** sporus left
[17:21] <[Coke]> tadzi++ #hashtag the future.

[17:24] <[Coke]> jnthn++ #moarvm blog post

[17:24] <sergot> Does perl6/doc is responsible for generating doc.perl6.org?

[17:25] <sergot> what

[17:25] <sergot> does is?

[17:25] <sergot> I wanted to write somthing else

[17:25] <sergot> is perl6/doc ~ anyway

[17:26] *** raiph joined
[17:26] <smls> sergot: Yes, it's generated fro that git repo

[17:27] <smls> The htmlify.p6 script in the top-level of that repo generates the html (and related) files from the Pod files in the lib/ folder

[17:29] <sergot> smls++ thanks

[17:31] <moritz> psch: I think pmichaud++ has access to the CLA lists

[17:32] <smls> sergot: If you want to view it locally, the simplest way is to pull the perl6/doc repo, run «./htmlify.p6», and then run  «perl ./app.pl daemon» to start a temporary mini-webserver (which will handle the link paths right etc.) that will let you view the generated docs at http://127.0.0.1:3000

[17:32] <sergot> smls++ thank you!

[17:32] <psch> moritz: thanks, i've been contacted already

[17:32] <sergot> smls: I want to add syntax highlighting :)

[17:33] <smls> cool :)

[17:35] *** anaeem1_ joined
[17:35] <smls> btw, is this Pod I wrote really malformatted: https://github.com/perl6/doc/blob/master/lib/Type/Bag.pod  ...or is github just bad at parsing Pod?

[17:36] <smls> (Pod::To::HTML converts it just fine)

[17:36] <PerlJam> I think github is using Perl 5 POD parsing

[17:38] <jnthn> evening, #perl6

[17:39] <[Coke]> pmichaud & I both have access to the CLA lists.

[17:41] <vendethiel> o/, #perl6

[17:42] *** Rounin left
[17:46] *** atroxaper left
[17:46] *** atroxaper joined
[17:46] *** atroxaper left
[17:46] <[Coke]> (bad pod) you can nest =begin/=end in p6?

[17:47] <[Coke]> m: 3.say

[17:47] <camelia> rakudo-moar 1eb7fa: OUTPUT«3␤»

[17:47] <[Coke]> m: =begin pod␤=begin code␤=end code␤=end pod␤say "alive";

[17:47] <camelia> rakudo-moar 1eb7fa: OUTPUT«alive␤»

[17:47] <[Coke]> m: =begin pod␤=begin code␤=end pod␤=end code␤say "alive";

[17:47] <camelia> rakudo-moar 1eb7fa: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/yf_YiCSuRL␤'=begin' not terminated by matching '=end pod'␤at /tmp/yf_YiCSuRL:5␤------> [32msay "alive";[33m⏏[31m<EOL>[0m␤    expecting any of:␤        whitespace␤        horizontal…»

[17:48] <[Coke]> that error message is slightly LTA. Still, nifty.

[17:50] *** ptc_p6 joined
[17:52] *** kurahaupo1 joined
[17:56] <jnthn> [Coke]: Fixed the nit - thank you!

[17:57] <jnthn> I hope the post wasn't too boring/weird...I was tireder than expected when I came to work on it.

[17:58] <dalek> ecosystem: c528917 | moritz++ | server/updatelist.pl:

[17:58] <dalek> ecosystem: [server] reduce dependencies

[17:58] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/c528917991

[17:58] <dalek> ecosystem: 20fa4a7 | moritz++ | server/updatelist.pl:

[17:58] <dalek> ecosystem: [server] make output location configurable

[17:58] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/20fa4a7fa2

[17:58] <moritz> jnthn: I liked it

[17:59] *** kurahaupo1 left
[17:59] <jnthn> moritz: If somebody wanted to set up daily perl6-bench runs on the server, would that be appropriate use?

[17:59] <moritz> jnthn: by all means

[18:00] <jnthn> OK. I guess it's beefy enough that one core busy on that won't cause a big issue...

[18:00] <moritz> right

[18:00] <andreoss> how do i limit amount of threads perl6 spawns? 

[18:00] <jnthn> andreoss: Set up $*SCHEDULER to a ThreadPoolScheduler with the max threads configured as you like it.

[18:03] <jnthn> Of course, some code could go and start a thread directly, or create its own scheduler, but the first is discouraged and the second is kinda anti-social. I guess your question is for keeping your own code bounded rather than enforcing a limit for arbitary code, though :)

[18:06] <dalek> ecosystem: f8b11ba | moritz++ | server/updatelist.pl:

[18:06] <dalek> ecosystem: [server] avoid temporary file

[18:06] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/f8b11bad86

[18:06] <psch> http://perl6advent.wordpress.com/?p=2560&preview=true feedback much apreciated

[18:08] <andreoss> jnthn: thanks a lot!

[18:10] <tadzik> moritz++

[18:11] * psch notices the missing "Day 12 - " in the headline...

[18:11] <moritz> tadzik: my plan is to set up ecosystem-api.p6c.org from it

[18:11] <jnthn> I saw a quesiton about using start with a grep inside of it earlier also. While I don't know why you don't get any data back, I do know thta the Promise will be kept almost immediately, because grep is lazy. If the grep should actually be done as part of the execution of the promise, then make it eager (stick an eager before the grep works I guess).

[18:11] <moritz> tadzik: and once we do the DNS switch of perl6.org to the new server, it will be available as ecosystem-api.perl6.org as well

[18:12] *** onebitboy joined
[18:12] <tadzik> moritz: awesome

[18:12] <jnthn> moritz: What port will it run on? Can we do it in a normal HTTP one nowadays?

[18:12] <jnthn> (Sorry if you already did that and I missed it)

[18:12] *** KCL_ joined
[18:13] <jnthn> Just thinking of the folks behind firewall nastiness.

[18:14] <moritz> jnthn: sure, will be port 80

[18:15] <tony-o> does anyone have good docs or code showing a TLS handshake and the actual structure of a [Client/Server]Hello message?

[18:15] <jnthn> moritz++

[18:15] <moritz> jnthn: if necessary, it could get its own IP address; but if the clients all support name-based virtual hsots, we'll be fine without it

[18:16] <jnthn> In 2014, I'd hope so :)

[18:16] <andreoss> jnthn: why it runs extremply slow and segfaults with out specifing max_threads? 

[18:19] <andreoss> is it trying to do some special scheduling than? 

[18:24] <jnthn> andreoss: The segfaults are mostly due to insufficient reliability engineering. There's quite a backlog of known issues, and way too few people to work on them. By and large, it's mostly me who fixes them, and I've been horribly bogged down with other things in the last couple of months. :/

[18:26] <jnthn> The slow is because the scheduler isn't especially smart yet, and it mostly worries about avoding deadlock rather than optimizing throughput.

[18:26] <jnthn> For the first issue, Rakudo on JVM can offer a decent bit more stability at the moment.

[18:28] <jnthn> It's also less fun to develop on though, due to high startup time.

[18:29] <moritz> tadzik: does the API actually need to run any code? I mean, it seems to support '/list' and '/module/:name', both of which could easily be static files

[18:29] <tadzik> moritz: yep, it could be all static

[18:29] <tadzik> (and p6 generated)

[18:29] <tadzik> BreakDancer could be employed :)

[18:29] <moritz> tadzik: do you have any plans to make it more dynamic?

[18:30] <smls> m: say await start { eager grep *.is-prime, 1, 2, 3, 4 };   # jnthn is right, eager makes it work

[18:30] <camelia> rakudo-moar 1eb7fa: OUTPUT«2 3␤»

[18:30] <moritz> tadzik: if not, I might do a quick p5 rewrite to generate static files

[18:30] <moritz> and save me the trouble of deploying something dynamic

[18:30] <tadzik> moritz: it's untouched for about two years, I think it's likely to stay that way for a while :

[18:30] <tadzik> :)

[18:30] <andreoss> jnthn: i've marked all optimizations which prevent segfaulting http://paste.fedoraproject.org/158853/41832260

[18:31] <andreoss> naive solution can be found in perl6-examples prob027

[18:31] *** mvuets joined
[18:32] <jnthn> andreoss: Thanks; it's nice to have examples that expose problems.

[18:33] <jnthn> Well, it's nicer not to have problems, of course, but... :)

[18:33] *** FROGGS joined
[18:36] *** bcode joined
[18:41] *** bcode left
[18:50] *** ptc_p6 left
[18:53] <dalek> ecosystem/static: 724a0f1 | moritz++ | server/ (18 files):

[18:53] <dalek> ecosystem/static: Generate JSON files statically

[18:53] <dalek> ecosystem/static: 

[18:53] <dalek> ecosystem/static: also generate an errors.json file with error messages per URL

[18:53] <dalek> ecosystem/static: review: https://github.com/perl6/ecosystem/commit/724a0f106f

[18:53] <moritz> shortstats for the commit above: 18 files changed, 34 insertions(+), 652 deletions(-)

[18:53] <moritz> ok, most of the deletions were for automatically generated boilerplate; still feels nice :-)

[18:55] <FROGGS> yeah :o)

[18:55] <FROGGS> I also love to delete code

[18:56] <jnthn> yeah, but I don't really like regressins :)

[18:56] <jnthn> oh wait...mischannel

[18:56] <jnthn> lol

[18:56] <jnthn> FROGGS: Stop being in all the discussions about patches removing code when I'm tired and easily confused :P

[18:57] <FROGGS> jnthn: wait... you are about to blug, no?

[18:57] <FROGGS> jnthn: :P

[18:57] <moritz> FROGGS: do you want to move cpandatatesters to the new machine(s)?

[18:57] <jnthn> FROGGS: I did my advent post last night?

[18:57] <FROGGS> jnthn: just distract me with a blog

[18:57] <FROGGS> ohh

[18:57] <psch> fwiw, i've scheduled my post about 45 minutes ago and was asking for feedback... :P

[18:57] <FROGGS> moritz: I think so... because I am not that happy with the performance of my server

[18:58] <moritz> FROGGS: what's the bottleneck? CPU?

[18:58] <FROGGS> jnthn: see, I am still confused by your 'Ja' answer :o)

[18:58] <FROGGS> moritz: probably... it is a virtual server

[18:59] <FROGGS> so I have four cores, but it does not feel like four cores

[18:59] <moritz> FROGGS: well, {hack,www}.p6c.org are also virtual - but the hypervisor isn't resource-starved

[18:59] <moritz> Stage parse      :  28.386

[18:59] <FROGGS> ohh nice!

[18:59] <moritz> on hack.p6c.org for raudo-moar

[19:00] <FROGGS> my box takes about 70s me thinks

[19:02] *** ab5tract joined
[19:02] <moritz> FROGGS: so, first step would be an account for you, I think :-)

[19:03] <FROGGS> :o)

[19:03] <FROGGS> that'd be sweet

[19:04] *** bcode joined
[19:08] *** rindolf left
[19:09] *** FROGGS_ joined
[19:09] <moritz> psch: fwiw I've quickly read through your post, and liked it. But I'm afraid I have too much other stuff going on right now to do a thorough read-through

[19:10] <moritz> including dinner&

[19:13] *** FROGGS left
[19:14] <ab5tract> psch: is a "longname" a formal thing or a typo? :)

[19:16] <psch> ab5tract: it's in STD.pm6 i've been told, and i think it's also in Perl6/Grammar.nqp

[19:16] <psch> so i'd consider it formal :)

[19:16] <psch> <name> {} [ <?before ':' <+alpha+[\< \[ \« ]>> <colonpair> ]* # that's a longname

[19:17] <FROGGS_> a longname is a thing, yeah

[19:17] <FROGGS_> "infix:<&&>" is a longname for example

[19:19] <japhb> jnthn, moritz: Let me know if you find you need any perl6-bench functionality to make daily runs easier to manage or get useful info from.  I will attempt to prioritize those requests.

[19:20] <japhb> You're also both collaborators on the GitHub project, so you're welcome to just commit anything you need and hack up yourself.

[19:20] <psch> ab5tract: the post is littered with other typos though, as i'm realizing during the 10th proof reading...

[19:28] <ab5tract> psch: in the case of it being formal, a small word or link to it might be cool!

[19:28] <ab5tract> org.perl6.nqp.runtime.BootJavaInterop

[19:28] <ab5tract> the line with that on it is sad :(

[19:30] <ab5tract> also, i know your pain.. i was still proofreading and revising until late writing until ~2am or so

[19:30] <psch> that should also link to the class to encourage following along i guess? :)

[19:30] <ab5tract> (missing a comma there)

[19:31] *** [Sno] left
[19:31] <ab5tract> well, could do, could do ;)

[19:31] *** atroxaper joined
[19:31] <japhb> jnthn: Did you see my example from last night about 'lastcall; nextsame' not seeming to do the right thing?

[19:32] <japhb> m: class NewDate is Date { multi method truncated-to(|) { lastcall; nextsame } }; my $nd = NewDate.today; say $nd.truncated-to('week');

[19:32] <camelia> rakudo-moar 1eb7fa: OUTPUT«Nil␤»

[19:32] <ab5tract> honestly i think it could do with more inline code samples

[19:32] *** grettis joined
[19:33] <ab5tract> unless they are really complicated, i think being able to read along with the code would help my understanding of the story you are telling (of which i am quite interested, by the way!)

[19:34] <jnthn> japhb: Uh...what's the lastcall doing there?

[19:34] <ab5tract> i'm not sure if smls has posted his method of getting such nice code snippets, but that would be icing on the cake, so to speak

[19:35] <nwc10> jnthn++ # bloggage

[19:35] <jnthn> japhb: From S12: "It is also possible to trim the candidate list so that the current call is considered the final candidate."

[19:35] <jnthn> japhb: So you throw away the rest of the candidate list and then do nextsame, which needs the candidate list? :)

[19:35] <psch> ab5tract: the problem with inline code samples is that it's much code, and hard to condense :/

[19:36] <japhb> jnthn: The lastcall was a workaround suggested by TimToady for the problem that since this truncated-to is a multi, and Date's is not, you have to end the current dispatcher and fall back to the other one.  But that idea didn't seem to work.

[19:36] <psch> although maybe i can get at least a heavily cut final version in there somewhere

[19:37] *** gfldex joined
[19:37] <japhb> (Yes, I want a multi in the derived class, there's multiple truncated-to() methods, but this is the fallback method to just use the base class's functionality.)

[19:38] *** atroxaper left
[19:40] <jnthn> Ah

[19:40] <jnthn> I'd be tempted just to fully qualify the call :P

[19:42] <smls> ab5tract: For Java snippets,  [code language="java"] ... [/code]  should work on wordpress.com for syntax highlighting

[19:43] <smls> It doesn't support Perl 6 though

[19:44] <japhb> jnthn: As in: multi method truncated-to(|c) { self.Date::truncated-to(|c) }   ?

[19:45] <smls> ab5tract: So I used pygmentize on the code snippets in my advent post, then hand-edited the result to fix parts where the hgihlighter hadn't done a good job, and then inlined the CSS styles so it would work on wordpress

[19:45] <jnthn> japhb: Yeah

[19:45] <japhb> What is the right way to jump dispatchers that way?

[19:45] <smls> (using these convenience scripts for the first and last step: https://github.com/smls/undef/tree/master/scripts)

[19:45] <ab5tract> .hug smls

[19:46] <jnthn> japhb: Not sure, tbh. Maybe what TimToady suggested is meant to work...but it implies we have some nested model of dispatchers, which is a little tricky to set up :)

[19:48] <ab5tract> psch: then maybe a few examples of the new syntax in use (for JVM neophytes, we don't even know what to call once we do checkout your changes))

[19:49] <bartolin> hi, #perl6

[19:49] <ab5tract> smls: in my opinion, you are a hero. we need a better way :/

[19:49] <psch> ab5tract: that's the point though, with my changes you can just call "$crc.update($myint)" :)

[19:49] <japhb> jnthn: ISTR there are indeed supposed to be multiple levels of dispatchers, but it's been a while since I read through that whole section.

[19:50] <tadzik> psch: show it as example, definitely

[19:50] <tadzik> I read the article, didn't see any example at the end and thought "oh, so this is just a plan then"

[19:50] <psch> well, yes, i probably should

[19:50] <psch> i mean, the "that's the point" kind of made it clear to myself as well :D

[19:50] <ab5tract> psch: yes, but surely there is something more fun than a CRC in the default Java SDK? :)

[19:52] <psch> tadzik++ ab5tract++ # great feedback

[19:52] <psch> ab5tract: i'll have to look, i hardly know the JDK

[19:53] <bartolin> FROGGS_: I pushed some changes for rakudo PR 336. to me those changes look like improvements ;-)

[19:54] <moritz> tadzik: could you please test panda with http://ecosystem-api.p6c.org/ as the API URL?

[19:54] *** Sqirrel joined
[19:54] <FROGGS_> bartolin: will take a look soonish :o)

[19:54] <bartolin> ++FROGGS_

[19:56] <smls> m: for 'Hello, Java'.encode('UTF-8') { .say }

[19:56] <camelia> rakudo-moar 1eb7fa: OUTPUT«Buf:0x<48 65 6c 6c 6f 2c 20 4a 61 76 61>␤»

[19:56] <smls> psch: ^^ is there maybe a «.list» missing there?

[19:57] <smls> for 'Hello, Java'.encode('UTF-8').list { .say }

[19:57] <smls> m: for 'Hello, Java'.encode('UTF-8').list { .say }

[19:57] <camelia> rakudo-moar 1eb7fa: OUTPUT«72␤101␤108␤108␤111␤44␤32␤74␤97␤118␤97␤»

[19:57] <psch> smls: actually, it's complicated

[19:57] <psch> smls: the example that jnthn posted doesn't work anymore nowadays, for two reason

[19:57] <psch> marshaling of arrays back to perl6 is broken

[19:58] <psch> and the method descriptor doesn't exist

[19:58] <psch> i supposed the latter happened because a [ got lost somewhere

[19:58] <psch> ...which means i should probably correct the example 

[19:58] <tadzik> moritz: sure

[19:58] <psch> anyway, the method that would work has the desc "method/update/([I)V"

[19:58] <psch> and that takes an int[]

[19:59] <psch> ...iirc

[19:59] <psch> i'd have to look it up, but yes, the example has to be corrected in any case

[20:01] *** rurban joined
[20:03] <moritz> also there is now http://ecosystem-api.p6c.org/errors.json for a list of errors while fetching / processing META.info files

[20:05] <tadzik> Bytecode validation error at offset 4, instruction 2: register operand index 54 out of range 0..15

[20:05] <tadzik> that's perfect

[20:05] <jnthn> what the...

[20:07] <psch> fwiw, there's now a heavily condensed version of the fallback method in the draft

[20:08] <psch> i'm not sure it really adds something, i think i'll also link to the actual method as it's implemented atm

[20:08] *** kurahaupo left
[20:08] <tadzik> jnthn: how do I get more details out of it, provided I can reproduce it?

[20:08] *** pecastro joined
[20:09] <jnthn> tadzik: Well, --ll-exception may give a stack trace that tells us where it comes from...

[20:10] <jnthn> What are you doing, ooc?

[20:11] *** darutoko left
[20:11] <tadzik> 'panda install .'

[20:11] <tadzik> well, now it worked >_<

[20:11] <jnthn> ^Hgrmbl

[20:11] <jnthn> I hope this isn't going to be The Next Heisenbug...

[20:13] <psch> righto, time to see if i can find something fun and interesting in the jdk

[20:13] *** andreoss left
[20:13] <tadzik> moritz: it doesn't seem like the improvised http client that panda uses is good enough for the new server

[20:13] <moritz> tadzik: does it send the Hostname: header?

[20:14] *** naddiseo joined
[20:14] <tadzik> nope

[20:14] <FROGGS_> no

[20:14] <moritz> tadzik: it's a name-based virtual host, so that's the bare minimum

[20:14] <FROGGS_> it does http 1.0 without that header

[20:14] <tadzik> $s = IO::Socket::INET.new(:host<ecosystem-api.p6c.org>, :port(80));

[20:14] <tadzik> $s.send("GET /projects.json HTTP/1.0\n\n");

[20:14] <FROGGS_> but it is easily tweakable, no?

[20:14] <tadzik> it's just this

[20:14] <tadzik> yep

[20:14] <FROGGS_> give it a whirl then :D

[20:16] <dalek> mu: 201d297 | moritz++ | misc/dalek- (2 files):

[20:16] <dalek> mu: Remove dalek polling config and instruction

[20:16] <dalek> mu: 

[20:16] <dalek> mu: it has not been running for several weeks, and nobody has complained so far.

[20:16] <dalek> mu: 

[20:16] <dalek> mu: Also it seems that the poller was never adapted to github URL changes,

[20:16] <dalek> mu: so it was pretty much broken

[20:16] <dalek> mu: review: https://github.com/perl6/mu/commit/201d2978b1

[20:18] *** raiph left
[20:18] <jnthn> psch: "no method multiple dispatch (MMD)"

[20:19] <jnthn> psch: I had it as meaning "multi-mmethod dispatch"

[20:19] <jnthn> uh, without the spello :)

[20:19] <psch> oh

[20:19] <psch> that's probably because i had "multiple dispatch" from somewhere else

[20:19] <psch> i'll fix that too

[20:20] *** bjz left
[20:20] <jnthn> psch: "except we are supplying a longname () consisting of the module name and the colonpair"

[20:20] <jnthn> I'm guessing something is going on with the empty parens?

[20:20] *** bjz joined
[20:20] <psch> no, i think the parens have to go because they're empty :)

[20:21] <dalek> specs: f6ea401 | duff++ | S99-glossary.pod:

[20:21] <dalek> specs: [S99] Add long name, short name, and multiple dispatch

[20:21] <dalek> specs: review: https://github.com/perl6/specs/commit/f6ea401c87

[20:21] <moritz> my $s = IO::Socket::INET.new(:host<ecosystem-api.p6c.org>, :port(80));

[20:21] <moritz> $s.send("GET /projects.json HTTP/1.0\nHost: ecosystem-api.p6c.org\n\n");

[20:21] <moritz> say $s.recv;

[20:21] <PerlJam> psch: I added some of those term to our glossary in case you want to link to them.

[20:21] <moritz> that seems to work

[20:21] <psch> PerlJam: thanks, will do

[20:22] <PerlJam> And everyone else look at the definitions I just added and update them if they seem a little off.   I just did this off the top of my head :)

[20:22] <tadzik> oh, now I got a segfault

[20:24] <ab5tract> tadzik: OS X?

[20:25] <tadzik> ab5tract: nah, linux

[20:25] <tadzik> now it worked

[20:25] <tadzik> moritz: yeah, now it work

[20:25] <tadzik> s*

[20:27] <tadzik> moritz: do you plan any downtime, or can I commit changes to panda?

[20:27] <moritz> tadzik: no downtimes planned

[20:27] <tadzik> okay

[20:29] <dalek> panda: 9fe5154 | tadzik++ | lib/Panda/Ecosystem.pm:

[20:29] <dalek> panda: Switch ecosytem API host to p6c.org

[20:29] <dalek> panda: review: https://github.com/tadzik/panda/commit/9fe51545a1

[20:29] <tadzik> please test

[20:31] <FROGGS_> why not just ecosystem.p6c.org?

[20:31] <FROGGS_> (I don't like 'API' in any name tbh)

[20:32] <moritz> FROGGS_: because it's not an HTML site

[20:32] <PerlJam> FROGGS_: even if it's ecosystem.p6c.org/api ?

[20:32] <FROGGS_> PerlJam: even then :o)

[20:32] <FROGGS_> moritz: okay, I see

[20:32] <moritz> FROGGS_: and if there is both modules.perl6.org and ecosystem.perl6.org, the difference is not obvious

[20:33] <FROGGS_> true

[20:33] <moritz> FROGGS_: (p6c.org is only meant as a temporary name until perl6.org DNS switches over)

[20:33] <jnthn> psch: I guess "*insert fun example here that works*" is something you know is still to do? :)

[20:34] <jnthn> psch++ # nice post :)

[20:35] <psch> jnthn: yes, i'm working on inserting the fun, working example

[20:35] <dalek> rakudo/nom: 8b85116 | usev6++ | src/core/operators.pm:

[20:35] <dalek> rakudo/nom: Allow chained sequences with closures

[20:35] <dalek> rakudo/nom: and more than one element after last infix:<...> operator

[20:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8b85116017

[20:35] <dalek> rakudo/nom: da8b73d | usev6++ | src/core/operators.pm:

[20:35] <dalek> rakudo/nom: Optimization of chained sequences with closures

[20:35] <dalek> rakudo/nom: FROGSS++; this is closer to the original version;

[20:35] <dalek> rakudo/nom: still passes tests from RT #123329

[20:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/da8b73ddcd

[20:35] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123329

[20:35] <jnthn> \o/

[20:35] <dalek> rakudo/nom: 3fa1bdf | (Tobias Leich)++ | src/core/operators.pm:

[20:35] <dalek> rakudo/nom: Merge pull request #336 from usev6/nom

[20:35] <dalek> rakudo/nom: 

[20:35] <dalek> rakudo/nom: Allow chained sequences with closures

[20:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3fa1bdfe23

[20:35] <FROGGS_> bartolin++

[20:38] <dalek> panda/ecosystem-api: 26f1164 | moritz++ | bin/redpanda:

[20:38] <dalek> panda/ecosystem-api: Start to fill move HTTP communication into a separate module

[20:38] <dalek> panda/ecosystem-api: review: https://github.com/tadzik/panda/commit/26f11646b7

[20:38] <bartolin> oh, great. thanks for reviewing!

[20:38] *** Rounin joined
[20:39] <smls> psch: I just tested it on a private wordpress.com blog, and using   [code language="java"]...[/code]   instead of   <pre>...</pre>  not only adds syntax highlighting, but also line numbers (and a horizontal scrollbar if the code is too wide). Might be nice for the two long-ish Java code snippets in your post.

[20:39] <moritz> tadzik: was it intentional that you didn't update bin/redpanda?

[20:40] <tadzik> moritz: now, I merely forgot about it. Honestly, I'd be surprised if anyone used it, maybe I should just kill it

[20:40] <moritz> tadzik: I don't even know what it does :-)

[20:40] <tadzik> it looks like I wanted to have a cpanm for perl6 :P

[20:40] <psch> smls: thanks, i'll do

[20:40] <tadzik> I'm tempted to leave it like that to see if anyone notices and reports it

[20:41] <tadzik> this way I'll know if there's a single user of it

[20:41] <psch> *that

[20:41] *** kurahaupo joined
[20:43] <psch> i think my test class is good enough - i'm having trouble finding something that'd actually work

[20:44] <psch> because i realized there's another thing still not quite working yet, that is overloaded constructors

[20:44] *** Alula left
[20:47] <tadzik> good thing to note too :)

[20:48] <psch> oh yes, definitely

[20:48] <psch> if had that i could pull out an AWT or Swing example as "look what works now", alas...

[20:48] * psch .oO( THERE'S STILL TIME!!1 )

[20:48] <ab5tract> :D

[20:49] <psch> ooh

[20:49] <psch> yeah

[20:50] <psch> i don't think i'll try that, it'd take more than two hours

[20:53] <moritz> psch: and don't pressure yourself too much; it's just an advent post :-)

[20:57] *** [Sno] joined
[20:58] <psch> moritz: i'm fine, thanks for the reminder though :)

[20:58] *** Alula joined
[21:01] *** FROGGS_ is now known as FROGGS

[21:02] <FROGGS> m: say $_, $/, $! # TimToady: all of them should be Any?

[21:02] <camelia> rakudo-moar 1eb7fa: OUTPUT«NilNilNil␤»

[21:03] <FROGGS> I've got quite some spectest fallout about $/, but need to investigate

[21:06] <psch> alright, i'm done i think

[21:07] * [Coke] is skipping daily run today. will see about moving to the new box before the next run.

[21:07] <FROGGS> TimToady: S02-types/nil.t explicitly checks that these three are Nil...

[21:08] <psch> the fun and working example is rather contrived, but it makes the point i guess

[21:09] <psch> 26 revisions heh

[21:12] <bartolin> FROGGS: what kind of spectest fallout do you see? I've run a spectest two hours ago and saw unexpected results in S05-modifier/overlapping.rakudo.moar (You planned 22 tests but ran 38) plus one passed TODO in S10-packages/precompilation.rakudo.moar

[21:12] <bartolin> FROGGS: that spectest was on moar only

[21:12] <FROGGS> bartolin: the S05-modifier will go away once you pull

[21:13] <FROGGS> but my local patch for RT #123175 makes regexes very unhappy

[21:13] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123175

[21:15] <bartolin> aha, I misunderstood. so it's your local spectest fallout

[21:16] <FROGGS> correct

[21:16] <FROGGS> m: say "\x[846D]" ~~ m/^<:!L>$/

[21:16] <camelia> rakudo-moar 1eb7fa: OUTPUT«False␤»

[21:16] <FROGGS> that, for example, comes out true here O.o

[21:17] <FROGGS> m: $/ = Any; say "\x[846D]" ~~ m/^<:!L>$/

[21:17] <camelia> rakudo-moar 1eb7fa: OUTPUT«False␤»

[21:20] *** konsolebox joined
[21:22] *** telex left
[21:23] <naddiseo> How does one do a left recursive rule, such that "1,2,3" is parsed as "(1, 2), 3" instead of "1, (2, 3)" ?

[21:23] *** bjz left
[21:23] <moritz> naddiseo: you don't

[21:24] *** telex joined
[21:24] <naddiseo> So how would I do that kind of grouping?

[21:25] <PerlJam> naddiseo: why exactly?

[21:25] <naddiseo> a.b.c -> attr( attr('a', 'b'), 'c' )

[21:26] <moritz> naddiseo: you simply parse with  <term>+ % ','

[21:26] <moritz> naddiseo: so you get a flat list

[21:26] <moritz> naddiseo: and then do the grouping outside the grammar

[21:26] *** kaare_ left
[21:26] *** kaare_ joined
[21:29] <naddiseo> Okay, I'll give that a try. Thanks.

[21:35] <FROGGS> m: my @a = <a b c d e f g>; my $r = shift @a; for @a -> $x { $r = [$r, $x] }; say $r.perl

[21:35] <camelia> rakudo-moar 3fa1bd: OUTPUT«[[[[[["a", "b"], "c"], "d"], "e"], "f"], "g"]␤»

[21:38] <PerlJam> looks like a reduce operation to me  :)

[21:38] <smls> m: my @a = <a b c d e f g>; @a.reduce({ [$^a, $^b] }).perl

[21:38] <camelia> rakudo-moar 3fa1bd: ( no output )

[21:38] <smls> m: my @a = <a b c d e f g>; @a.reduce({ [$^a, $^b] }).perl.say

[21:38] <camelia> rakudo-moar 3fa1bd: OUTPUT«[[[[[["a", "b"], "c"], "d"], "e"], "f"], "g"]␤»

[21:38] <PerlJam> apparently to smls too :)

[21:39] <smls> yep

[21:41] <jnthn> detrain; bbiab

[21:42] <moritz> m: my @a = <a b c d e f g>; say @a.reduce(&circumfix:<[ ]>).perl

[21:42] <camelia> rakudo-moar 3fa1bd: OUTPUT«[[[[[["a", "b"], "c"], "d"], "e"], "f"], "g"]␤»

[21:42] *** grettis left
[21:43] <FROGGS> bartolin: I might have been wrong about this one:

[21:43] <FROGGS> t/spec/S05-modifier/overlapping.rakudo.moar ................... Dubious, test returned 255 (wstat 65280, 0xff00)

[21:43] <FROGGS> could it be a regression caused by your patch?

[21:44] <FROGGS> because I am not sure anymore what revision was clean :/

[21:45] *** kaare_ left
[21:46] *** ab5tract left
[21:46] *** dalek2 joined
[21:46] <masak> 'night, #perl6

[21:47] *** d4l3k2_ joined
[21:47] *** d4l3k2_ left
[21:47] *** d4l3k2_ joined
[21:48] <bartolin> FROGGS: I'm also still looking at it.

[21:48] *** d4l3k2_ left
[21:52] <bartolin> FROGGS: I had clean spectests yesterday. maybe it has something to do with TimToady's commits earlier today. Actually I'm not sure 22 is the correct number of tests for S05-modifier/overlapping.t

[21:53] <moritz> overlapping.t was last touched on 2014-07-05, so at least we know it's not a test change

[21:54] <TimToady> my patch caused more tests to be run, I think

[21:54] <bartolin> that would explain it:

[21:54] <bartolin> t/spec/S05-modifier/overlapping.rakudo.moar (Wstat: 65280 Tests: 38 Failed: 16) Failed tests:  23-38 TODO passed:   1-3, 11-14, 22 Non-zero exit status: 255 Parse errors: Bad plan.  You planned 22 tests but ran 38.

[21:54] <moritz> oh, then it's a bad test file

[21:54] <TimToady> people shouldn't really write tests that run only if a previous test succeeds

[21:55] <FROGGS> it might not skip correctly...

[21:55] <moritz> the number of tests shouldn't depend on the correctness of the feature being tested

[21:55] <bartolin> if I change the plan to 38 all is well (some passed TODO)

[21:55] <moritz> https://gist.github.com/moritz/f37058d81010819692d6 # my TODO for the new server; if you miss any service that you think should be migrated, please let me know

[21:56] *** vti left
[21:57] *** mvuets left
[21:59] *** anaeem1_ left
[22:00] *** ab5tract joined
[22:00] *** rurban_ left
[22:02] <bartolin> well, I'll take a look at the test file. if I'm unable to fix it properly, I'll change the plan to 38 for now and open a ticket.

[22:02] <FROGGS> bartolin: wait

[22:03] * bartolin is waiting

[22:03] <bartolin> (especially for rakudo.jvm and rakudo.parrot to build)

[22:03] <TimToady> if you're compiling, you're supposed to be goofing off now

[22:04] <TimToady> that's what compiling is for

[22:05] <bartolin> ;-)

[22:05] *** rurban left
[22:05] *** rurban joined
[22:06] <dalek> roast: e3b109e | (Tobias Leich)++ | S05-modifier/overlapping.t:

[22:06] <dalek> roast: fix skip count via #?DOES

[22:06] <dalek> roast: 

[22:06] <dalek> roast: The skipped tests skipped the wrong number of tests because some of them are in a loop, and

[22:06] <dalek> roast: we dont get the loop right either.

[22:06] <dalek> roast: review: https://github.com/perl6/roast/commit/e3b109e1f2

[22:08] <japhb> moritz: You and jnthn discussed a daily perl6-bench run; also, will [Coke]'s daily smoke test be moved there?

[22:09] <moritz> japhb: it will if somebody moves it

[22:09] <bartolin> FROGGS++

[22:09] <moritz> japhb: I'm trying to not do the things that regular users can do themselves

[22:10] <moritz> japhb: but might be worth mentioning as TODOs for others :-)

[22:10] <jnthn> When it comes to servers, I'm a pretty irregular user... :P

[22:11] <jnthn> I'll mebbe have a look into setting up the perl6-bench thingy at the weekend...

[22:17] <japhb> Cool beans, jnthn.

[22:17] <japhb> Understood, moritz.  And yes, TODOs for others makes sense.

[22:19] <jnthn> Tomorrow I finally have a day when I can (a) sleep in, (b) do Perl 6 things, and (c) not have to care about much else :)

[22:22] <japhb> Sounds like an *excellent* day.

[22:23] * japhb is just watching the flooding slowly rise outside

[22:23] <jnthn> uh-oh

[22:23] <japhb> May flood the garage, but I think the house is safe.

[22:23] <TimToady> just so's it's slow...

[22:24] <timotimo> you reap what you so.

[22:24] <japhb> .oO( waitpid() should have been called reap() ... }

[22:25] <moritz> root@hack:~# grep -iE 'invalid user|failed password' /var/log/auth.log|wc -l

[22:25] <TimToady> he said grimly...

[22:25] <moritz> 2815

[22:25] <moritz> it's a sad internet we live in

[22:25] <dalek> roast: 1bcc540 | usev6++ | S03-sequence/misc.t:

[22:25] <dalek> roast: Unskip passing tests for RT #123329

[22:25] <dalek> roast: review: https://github.com/perl6/roast/commit/1bcc540815

[22:25] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123329

[22:25] <moritz> that host has only been running for two days

[22:25] <timotimo> yeah, that's par for the course

[22:26] <moritz> time for sleep

[22:26] <hoelzro> moritz: =(

[22:26] <moritz> good * everybody

[22:27] <hoelzro> fail2ban to the rescue?

[22:27] <hoelzro> o/ moritz 

[22:27] <bartolin> o/

[22:27] <Ulti> moritz do you know abut fail2ban?

[22:27] <japhb> good * moritz

[22:27] <Ulti> oh hoelzro beat me to it :D

[22:28] <hoelzro> Ulti: that's just more endorsement =)

[22:28] <Ulti> yeah I used to use DenyHosts but its not well supported anymore... been running fail2ban for a few months on a new server and it works well

[22:31] *** FROGGS left
[22:32] *** perturbation joined
[22:32] * TimToady wrote his own one of those

[22:33] <TimToady> just keeps its own private set of subrules in the firewall

[22:38] *** raiph joined
[22:41] *** rurban left
[22:50] <ab5tract> psch: the java code snippets are cut short on the RHS

[22:51] *** smls left
[22:51] <ab5tract> the advent theme breaks on code snippets in general, but usually with overflows (which are jarring but readable)

[22:52] <psch> ab5tract: aren't they scrollable for you?

[22:53] <ab5tract> ah! indeed they are :)

[22:53] <ab5tract> does anyone mind if i polish up the blogroll section?

[22:54] <ab5tract> it still links to planetsix, and is missing 6guts / strangeconsistent / perlgeek / likely more

[22:54] <ab5tract> *strangelyconsistent

[22:54] <[Coke]> ab5tract: go for it

[22:54] <ab5tract> oh, and perl6weekly

[22:54] <ab5tract> cool

[22:56] <jnthn> Hm. Seems the build got slower (NQP and Rakudo) since last time I built on my desktop. :(

[22:57] <TimToady> my fastest times seem about the same, but it also seems more variable

[22:58] <jnthn> It's from about 60s to 66s on Windows for the full Rakudo build.

[22:59] <jnthn> 10% is quite a lot.

[22:59] <psch> i also found a bunch of html entities...

[22:59] <ab5tract> done :)

[23:02] <ab5tract> in other news, snow golf can now automagically use your console width: COLUMNS=$(tput cols) perl6 -e "for 0..Inf { say [~] [ '❆ ','❄ ', '❅ ', ' ' xx 60 ].Bag.roll( %*ENV<COLUMNS> ); }"

[23:04] <TimToady> why not just loop {} ?

[23:04] *** baest left
[23:04] <japhb> And if you're using Bag.roll, why do 'xx 60'?

[23:04] <TimToady> more spaces

[23:04] <japhb> Damn precedence.

[23:05] *** Isp-sec left
[23:05] <ab5tract> japhb: that's the weight of the snowfall :)

[23:06] <japhb> Or its inverse.  :-)

[23:06] <ab5tract> well, the snow falls upside down, doesn't it?  ;)

[23:06] <jnthn> .u ❆❄❅

[23:06] <yoleaux> U+2744 SNOWFLAKE [So] (❄)

[23:06] <yoleaux> U+2745 TIGHT TRIFOLIATE SNOWFLAKE [So] (❅)

[23:06] <yoleaux> U+2746 HEAVY CHEVRON SNOWFLAKE [So] (❆)

[23:07] <ab5tract> TimToady: i guess for `0..Inf` just feels way more epic

[23:07] <jnthn> I didn't know a snowflake could be tight :P

[23:07] <jnthn> TIL... Thanks Unicode :)

[23:09] <ab5tract> everyone has infinite loops, but infinite lists are a rarer breed :)

[23:10] *** baest joined
[23:10] <japhb> Exchange u+274[456] with u+262[0123] and you get the sci-fi apocalypse

[23:11] <psch> .u ☡

[23:11] <yoleaux> U+2621 CAUTION SIGN [So] (☡)

[23:11] <TimToady> falling cuneiform would be cool

[23:12] *** atroxaper joined
[23:12] <TimToady> 'course, it would mostly look like it was raining fish

[23:12] <japhb> fish bones, at least ...

[23:13] *** rurban joined
[23:13] * TimToady wonders if there are any fish swimming in his street...

[23:13] *** colomon left
[23:13] *** colomon_ joined
[23:16] *** oetiker left
[23:17] <ab5tract> the golfed matrix.. now i'm curious

[23:17] *** atroxaper left
[23:18] <TimToady> well, but you have to flip your screen left-to-right without flipping it vertically for that, since the characters are all backwards

[23:20] <TimToady> or you need to flip it vertically too, but put each character back right-side up, but backwards

[23:20] <TimToady> I think you need the green pill for that...

[23:20] <ab5tract> lol

[23:21] *** naddiseo left
[23:23] *** raiph left
[23:27] *** gfldex left
[23:34] *** Rounin left
[23:34] *** treehug88 left
[23:50] *** aborazmeh joined
[23:58] *** rurban left
