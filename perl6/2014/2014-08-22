[00:01] <timotimo> you can make m-spectest/p-spectest/j-spectest

[00:03] <TimToady> btw, I'm still getting a looping test on JVM, S02-lexical-conventions/comments.rakudo.jvm

[00:03] *** immortal joined
[00:03] <TimToady> that one might be worth a fudge

[00:04] *** erkan left
[00:04] <TimToady> no other hangs in the entire suite for moar or parrot

[00:06] <timotimo> hm.

[00:06] *** ajr_ left
[00:07] <timotimo> has anybody investigated patterns that supply a candidate for the "new" method with a defined invocant and do stuff based on that?

[00:13] *** eternaleye joined
[00:14] <[Coke]> timotimo: yes, that takes hours. I want to run -one- test. :)

[00:14] <[Coke]> I will just swap out the ./perl6 for the one with the vm I want.

[00:18] <timotimo> oh, right ...

[00:20] <dalek> roast: b1f2b22 | TimToady++ | S02-lexical-conventions/comments.t:

[00:20] <dalek> roast: skip a test that hangs on jvm

[00:20] <dalek> roast: review: https://github.com/perl6/roast/commit/b1f2b22ce1

[00:21] <TimToady> there also something going wrong with todo annotions on throws_like, it's slipping an extra todo() call into the middle of the statement for some reason

[00:21] <TimToady> *tations

[00:21] <TimToady> but that wasn't causing the hang, just noticed it en passant

[00:24] <TimToady> when I want to run an individual test, I just do something like make m-spectest, wait for it to fudge everything, the ^C it and perl6 t/spec/roast/whatever

[00:24] <TimToady> or I don't bother with the make part if I just want to run the .t

[00:25] <TimToady> though with jvm I had to run it with install/bin/perl6-j

[00:25] <TimToady> the runner in the nom directory didn't work

[00:30] *** chenryn joined
[00:31] *** Akagi201_ left
[00:31] *** eternaleye left
[00:35] <[Coke]> ff

[00:35] <[Coke]> .

[00:36] <[Coke]> Offs.

[00:42] *** chenryn left
[00:42] <carlin> you can `make t/spec/S0X/whatever/foo.t`

[00:45] *** BenGoldberg joined
[00:48] *** eternaleye joined
[00:57] *** thou joined
[00:58] *** Ben_Goldberg joined
[00:58] *** BenGoldberg left
[00:58] *** Ben_Goldberg is now known as BenGoldberg

[01:00] *** eternaleye left
[01:01] *** thou left
[01:06] <dalek> roast: 9a86cfb | TimToady++ | S02-lexical-conventions/comments.t:

[01:06] <dalek> roast: avoid a todo bug in fudge

[01:06] <dalek> roast: 

[01:06] <dalek> roast: for some non-obvious reason fudge puts an extra todo() on the X::Comp::Adhoc line

[01:06] <dalek> roast: review: https://github.com/perl6/roast/commit/9a86cfbcc4

[01:06] <TimToady> carlin: that's just so wrong... :)

[01:08] *** eternaleye joined
[01:15] *** Akagi201 joined
[01:17] <[Coke]> ... why the hell do we do releases off master? :P

[01:18] <dalek> rakudo/nom: 5392029 | coke++ | t/spectest.data:

[01:18] <dalek> rakudo/nom: failing on rakudo.parrot, remove for release

[01:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5392029219

[01:19] *** dayangkun joined
[01:25] *** telex left
[01:26] *** FROGGS_ joined
[01:26] *** telex joined
[01:29] *** FROGGS left
[01:33] *** Possum joined
[01:39] *** klapperl joined
[01:42] *** klapperl_ left
[01:42] <dalek> roast: 5a33f7d | coke++ | S (8 files):

[01:42] <dalek> roast: fudge for rakudo.parrot release

[01:42] <dalek> roast: review: https://github.com/perl6/roast/commit/5a33f7dc94

[01:46] <japhb> Reading the changelog ... why was postcirmcumfix:<( )> changed to .invoke?  (I don't have much of an opinion on this, I'm just curious.)

[02:12] *** pyrimidine joined
[02:17] *** cognome left
[02:17] *** chenryn joined
[02:18] *** cognome joined
[02:22] *** cognome left
[02:24] <dalek> rakudo/nom: 5dd10bb | coke++ | t/spectest.data:

[02:24] <dalek> rakudo/nom: This test is very fiddly, disable for release.

[02:24] <dalek> rakudo/nom: 

[02:24] <dalek> rakudo/nom: On moar/linux, it only runs 5 of the 6 tests,

[02:24] <dalek> rakudo/nom: making it oddly difficult to fudge.

[02:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5dd10bbc9f

[02:25] <dalek> roast: 1268aba | coke++ | S32-list/uniq.t:

[02:25] <dalek> roast: fudge for rakudo.moar release

[02:25] <dalek> roast: review: https://github.com/perl6/roast/commit/1268aba01e

[02:44] *** noganex_ joined
[02:45] *** thou joined
[02:46] *** noganex left
[02:50] *** thou left
[03:00] <pyrimidine> TimToady: re: the “pointer being freed was not allocated” malloc problem, it works if I run ‘make LOLLY=1’

[03:01] <pyrimidine> (also, the make error now seems to be gone, I suppose that got whacked today)

[03:05] *** dayangkun left
[03:10] <[Coke]> (still running java tests. :P)

[03:15] *** xenoterracide left
[03:18] *** dayangkun joined
[03:22] <TimToady> yeah, those take a while, and aren't pretty, last I looked

[03:22] <TimToady> which was earlier today

[03:31] *** raiph joined
[03:46] *** raiph left
[03:51] *** SamuraiJack joined
[03:58] <hoelzro> m: subset EvenNum of Num where { $_ %% 2 }; EvenNum === EvenNum

[03:58] <camelia> rakudo-moar 5dd10b: OUTPUT«Invocant requires an instance, but a type object was passed␤  in method isNaN at src/gen/m-CORE.setting:4988␤  in method ACCEPTS at src/gen/m-CORE.setting:4134␤  in sub infix:<===> at src/gen/m-CORE.setting:5241␤  in block  at /tmp/9Bajy14gBm:1␤␤»

[03:58] <hoelzro> I rebased S26-WHY onto nom earlier today, and some of the tests fail with this error

[03:59] <hoelzro> git bisect points to a82c4076057fb543ec5bd56b06be1ffd67796f26

[03:59] *** raiph joined
[03:59] <hoelzro> but I'm trying to think of the best way to solve this

[03:59] *** raiph left
[03:59] <hoelzro> Num === Num has the same issue

[04:00] <[Coke]> no spec tests failed on nom with that change.

[04:01] <hoelzro> I guess we have a new test to add then =

[04:01] <hoelzro> =)

[04:02] <hoelzro> it's kind of screwy that the multi resolver would even consider that new multi for the call

[04:02] <hoelzro> but I don't necessarily understand it fully myself

[04:05] <hoelzro> it seems we have some spam in RT: https://rt.perl.org/Ticket/Display.html?id=122592

[04:05] *** [Sno] left
[04:06] <[Coke]> hoelzro: gone.

[04:06] <hoelzro> thanks [Coke] 

[04:08] <hoelzro> reported my bug to RT: https://rt.perl.org/Ticket/Display.html?id=122593&results=53c3caa3c52232fce1cef8f92b4bb35c

[04:08] <hoelzro> we can deal with it in the morning =)

[04:08] <hoelzro> just wanted to let others know

[04:08] <hoelzro> bed &

[04:19] *** chenryn left
[04:20] <[Coke]> (still running java tests. :P)

[04:21] <TimToady> are you running them one at a time?

[04:23] <[Coke]> make j-stresstest.

[04:23] <TimToady> though, to be sure, you can't run as many jvm jobs in parallel because TEST_JOBS=2 uses almost 400% of a cpu

[04:23] <TimToady> ah

[04:24] <[Coke]> made the mistake of setting test jobs too high, I think.

[04:25] <[Coke]> really wish I could have done this release on my mac. (16Gig/8core) as opposed to the daily test box, a linux box with 4mb/2core

[04:30] *** xinming joined
[04:30] *** kaleem joined
[04:32] *** xinming_ left
[04:34] *** thou joined
[04:35] *** SamuraiJack left
[04:36] *** kaare_ joined
[04:38] *** thou left
[04:39] *** thou joined
[04:45] *** pyrimidine left
[04:50] *** chenryn joined
[04:57] *** chenryn left
[05:01] *** kaare_ left
[05:04] <TimToady> running it at TEST_JOBS=3 puts my load average on my 6-core to over 5

[05:08] *** gfldex joined
[05:13] <TimToady> I'm up to S17 and so far it's failed about 20 tests

[05:15] *** BenGoldberg left
[05:15] <TimToady> and it's hung

[05:15] <TimToady> no, suddenly made progress again

[05:15] <TimToady> one forgest how slow S17 is

[05:16] <TimToady> t/spec/S06-other/main-usage.rakudo.jvm came out way late, must've hung and timed out, I'm guessin'

[05:22] <[Coke]> yay, done, now I can fudge...

[05:23] <TimToady> I'm on S32 now

[05:24] *** kaare_ joined
[05:24] *** [Sno] joined
[05:27] <TimToady> though load avg now about 7.5 on my 6 cores...

[05:28] <TimToady> so 3 jobs is about the limit for 6 cores

[05:28] <TimToady> (and 8 gig)

[05:29] <TimToady> main java process is 7 gig, half of it resident

[05:29] <TimToady> good thing this'll be done before I start streaming Sophia...

[05:36] <[Coke]> .tell lizmat - had to fudge some of the new throws_like tests for parrot & jvm.

[05:36] <yoleaux> [Coke]: I'll pass your message to lizmat.

[05:40] <TimToady> lemme know when you're done fudging, and I can run another "quick" stresstest

[05:43] *** gfldex left
[05:44] *** chenryn joined
[05:57] *** Khisanth left
[05:58] *** Khisanth joined
[06:13] *** denis_boyun joined
[06:15] *** gmunoz_ left
[06:16] *** thou left
[06:17] <[Coke]> j: my $hash = { '1' => { '2' => 3, '4' => 5 }, };

[06:17] <camelia> rakudo-jvm 5dd10b: OUTPUT«(timeout)»

[06:17] <[Coke]> j: say "OIU@#P$OU#@KJSDF:LKDJSF";

[06:17] <camelia> rakudo-jvm 5dd10b: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/88SqaM8twK␤Variable '$OU' is not declared␤at /tmp/88SqaM8twK:1␤------> [32msay "OIU@#P$OU[33m⏏[31m#@KJSDF:LKDJSF";[0m␤    expecting any of:␤        postfix␤»

[06:20] <TimToady> your first snippet works fine here

[06:21] <[Coke]> if you could try to fudge t/spec/S06-other/anon-hashes-vs-blocks.t

[06:21] <[Coke]> for rakudo.jvm, I would appreciate it.

[06:23] <TimToady> okay

[06:24] <[Coke]> It barfs all over me here, and a naive #?rakudo.jvm emit skip_rest() doesn't cut it.

[06:25] <TimToady> it barfs on my laptop, recompiling on my 6-core at the moment

[06:31] <TimToady> ooh, there's a lollipop in it

[06:31] <TimToady> but setting LOLLY doesn't fix it

[06:32] <TimToady> oh, it's not a lollipop, it's a block {;}

[06:32] <TimToady> hmm

[06:33] <[Coke]> lot of S17 failures under load that work fine one at a time. :(

[06:37] <dalek> roast: db19c85 | TimToady++ | S06-other/anon-hashes-vs-blocks.t:

[06:37] <dalek> roast: jvm chokes on compiling a {;}

[06:37] <dalek> roast: review: https://github.com/perl6/roast/commit/db19c85d01

[06:37] <TimToady> anything else?

[06:39] <[Coke]> t/spec/S05-mass/properties-general.t

[06:39] <[Coke]> t/spec/S05-mass/rx.t

[06:39] <[Coke]> those both generate some JVM opcode dump.

[06:40] <[Coke]> nearly done with the other 20+ files

[06:41] <TimToady> weird errors, we don't have postcircumfix {} anymore...

[06:41] *** bjz left
[06:50] *** anaeem1_ joined
[06:50] *** darutoko joined
[06:50] <[Coke]> thanks for db19c85! very helpful.

[06:54] <TimToady> something about the Khmer chars at the end

[06:56] <[Coke]> good find.

[06:57] <dalek> roast: adc10fd | coke++ | / (23 files):

[06:57] <dalek> roast: fudge for rakudo.jvm release

[06:57] <dalek> roast: review: https://github.com/perl6/roast/commit/adc10fd62b

[06:57] <sergot> hi o/

[06:57] <[Coke]> hi, o

[06:58] <TimToady> I'm starting to think it's just too many things, some of the locals #'s are approaching 65536

[07:00] <[Coke]> ok. I fudged everything else (I think). I'm going forward with the release.

[07:00] <TimToady> yeah, simply putting the 6 khmers in a block fixes it

[07:02] <dalek> roast: 9a3ca7d | TimToady++ | S05-mass/properties-general.t:

[07:02] <dalek> roast: put some tests in a block to cut # of locals

[07:02] <dalek> roast: 

[07:02] <dalek> roast: seems to be hitting a size limit on the jvm

[07:02] <dalek> roast: review: https://github.com/perl6/roast/commit/9a3ca7d6c6

[07:08] <dalek> roast: 94406c9 | TimToady++ | S05-mass/rx.t:

[07:08] <dalek> roast: more blockification to avoid jvm overflow

[07:08] <dalek> roast: review: https://github.com/perl6/roast/commit/94406c965c

[07:08] <TimToady> okay, those two should be good to go for now

[07:08] <masak> good #perl6, antenoon

[07:09] <TimToady> must be about 10:00 am there..

[07:09] <TimToady> or are you in Sophia?

[07:11] *** aindilis left
[07:11] <TimToady> firing off a stresstest

[07:14] * [Coke] pulls the trigger on the release.

[07:16] <masak> [Coke]++ # release

[07:16] <masak> TimToady: I am in Sofia.

[07:16] <masak> TimToady: and a lot of other eerily familiar people, too.

[07:17] <[Coke]> TimToady++ thank you very much for helping with the fudging.

[07:19] <TimToady> well, I was up anyway, waiting for the live-streaming to maybe work

[07:20] * TimToady plans to take a nap between lichtkind++ and jnthn++

[07:20] <masak> :)

[07:21] <[Coke]> is the live streaming getting recorded?

[07:21] *** chenryn left
[07:22] <TimToady> I rather suspect they plan to--whether they succeed is another matter...

[07:23] <TimToady> and then there's the small matter of recording the background cosmic radiation instead of jnthn...

[07:24] <TimToady> *cosmic background

[07:24] <moritz> where's the stream?

[07:24] * TimToady suggests that jnthn++ use the wireless mic, and then it doesn't much matter if the hardwired is on too

[07:25] <TimToady> http://blogs.perl.org/users/yapceu/2014/08/live-streaming.html

[07:25] <TimToady> the other way around is...problematic

[07:26] *** zakharyas joined
[07:26] * [Coke] goes to sleep. laters.

[07:27] <masak> \o

[07:28] <TimToady> o/

[07:30] * masak thinkos s/comb/chars/, not for the first time

[07:31] *** klaas-janstol joined
[07:31] <masak> it seems especially easy to make that thinko after having written 'lines' :)

[07:31] *** thou joined
[07:36] *** thou left
[07:42] *** woolfy joined
[07:43] *** chenryn joined
[07:44] *** pecastro left
[07:50] <sergot> it has just started

[07:50] <sergot> streaming I mean

[07:51] <FROGGS_> ohh!

[07:53] <moritz> it began with the forging of the great streams

[07:53] <moritz> three were given to the perl hackers, immortal, and fairest of all beings

[07:53] <moritz> wait, that doesn't sound quit right :-)

[07:54] <sergot> jnthn and masak are there!

[07:54] <sergot> i can see them :0

[07:54] <TimToady> what direction is teh camera facing?

[07:55] <TimToady> and I dont mean "toward the audience" :P

[07:55] <FROGGS_> to the publikum :p

[07:55] <FROGGS_> wee

[07:55] <FROGGS_> err, eww

[07:56] * masak waves to sergot

[07:56] <FROGGS_> hehe

[07:56] <FROGGS_> I saw it!

[07:56] <sergot> once more masak !

[07:56] <FROGGS_> :D

[07:56] <FROGGS_>  /o/

[07:56] <sergot> thanks masak++ !

[07:56] <sergot> :)

[07:57] <FROGGS_> yeah, praise our jnthn++ :o)

[07:57] <TimToady> thanks for pointing out jnthn

[07:57] <FROGGS_> that man has stile (and a hat)

[07:57] <masak> now jnthn realized that he can't show $sekkrit-project on his screen :)

[07:58] <TimToady> are you guys facing north, south, east, or west?

[07:58] <masak> good question. I have no sense of that.

[07:58] <TimToady> no sound yet...

[07:59] <masak> no, we're just all being very, very quiet :P

[07:59] <FROGGS_> souond \o/

[08:00] <masak> FROGGS_: I shouted your name :)

[08:00] <TimToady> FROGGS_: you have sound?

[08:00] <FROGGS_> TimToady: I had

[08:00] <masak> wifi is slowing to a crawl now.

[08:01] <sergot> I do bit

[08:01] <sergot> not*

[08:01] <FROGGS_> masak: sorry, can't hear you :o)

[08:01] <TimToady> everyone smile

[08:01] <sergot> masak: is tadzik somewhere there?

[08:02] <FROGGS_> I so not spot him...

[08:02] <sergot> yeah

[08:02] *** nine_ joined
[08:03] <TimToady> you'd think it'd be easier to get sound than pix

[08:03] <TimToady> sound!

[08:03] <tadzik> sergot: I am

[08:04] <tadzik> managed to breach the absurd ping barrer

[08:04] <TimToady> the roar of the greasepaint, the smell of the crowd!

[08:04] <TimToady> blonk

[08:04] <TimToady> ow

[08:04] <tadzik> frankly, I don't know where masak is :o

[08:04] <sergot> tadzik: where are you? :))

[08:04] <jnthn> tadzik: He's on row 2, next to me :)

[08:04] <TimToady> masak is on the left side, about 2 rows back

[08:04] <sergot> tadzik: in the third (?) row on you left side

[08:05] <sergot> your*

[08:05] <TimToady> cute

[08:06] * TimToady didn't come... :(

[08:07] <TimToady> [Coke]: they said everything will be recorded

[08:15] *** klaas-janstol left
[08:18] <TimToady> granada1

[08:18] <TimToady> *!

[08:18] <jnthn> Such palace... :)

[08:19] * jnthn likes Granada

[08:21] *** klapperl left
[08:24] <masak> lichtkind up next!

[08:24] <TimToady> Yes, sir!

[08:24] <TimToady> so, at least I have some proxy hecklers on the 2nd row...

[08:25] *** chenryn left
[08:26] *** chenryn joined
[08:28] <sergot> tadzik is hiding somewhere

[08:28] <tadzik> I hid upstairs :)

[08:29] <sergot> ;)

[08:29] <tadzik> checking out speakers I don't know yet :)

[08:31] * TimToady likes retinas

[08:31] <TimToady> especially their plurality

[08:32] *** thou joined
[08:36] * TimToady wants to keep both sides of his brane

[08:36] *** thou left
[08:39] *** Ven joined
[08:42] *** zakharyas1 joined
[08:46] <TimToady> you don't count!

[08:46] <jnthn> oh noes, I don't count

[08:46] * TimToady wonders how much he's lagging realtime...

[08:47] <TimToady> just got to Know More

[08:47] <jnthn> yes, that's where it is here too :)

[08:47] <TimToady> cool, it seems to be keeping up

[08:48] <jnthn> I guess I should pick the same mic lichtkind is using, given it seems to work well with the streaming :)

[08:48] <TimToady> if it's the wireless mic, it prevents tuning into the Universe At Large on the receiver

[08:50] <masak> the xor slide looked wrong...

[08:50] <TimToady> it did

[08:51] <TimToady> doubling means "here be thunks", mostly

[08:52] <jnthn> aye, I was gonna say, it's more short circuiting...

[08:53] <TimToady> well, .succ and cmp are slightly related

[08:54] <FROGGS_> tadzik: is that you behind a guy with a white shirt "use perl or die" ?

[08:54] *** FROGGS_ is now known as FROGGS

[08:55] <TimToady> should be false

[08:56] <jnthn> ...except x was split into x and xx... :)

[08:57] *** anaeem___ joined
[08:57] *** zakharyas1 left
[08:57] *** zakharyas1 joined
[08:58] <TimToady> this is a bit strange

[08:58] <TimToady> (parcel is like siggie)

[08:58] <TimToady> what?

[08:59] <TimToady> this is kinda nonsensical

[08:59] <jnthn> yes, the | and || prefix bit was...kinda huh.

[08:59] *** klaas-janstol joined
[09:00] *** anaeem1_ left
[09:01] <TimToady> this about Range is nice

[09:01] <jnthn> Yes, though I'm not quite sure I'd call it a scalar range; @a = 1..5 is not my $x = 1..5; @a = $x

[09:05] <TimToady> @sum is wrongish

[09:05] <jnthn> yeah; shoulda been a scalar...

[09:06] <masak> m: say 2 S- 18

[09:06] <camelia> rakudo-moar 5dd10b: OUTPUT«Cannot find method 'postcircumfix:<( )>'␤  in block  at /tmp/KAbP5GiOlA:1␤␤»

[09:06] <TimToady> NYI I believe

[09:06] <masak> yeah.

[09:06] <jnthn> That's an odd error.

[09:07] *** pecastro joined
[09:08] <TimToady> wow, already using lol composer

[09:09] <jnthn> hah, wsa thinking NativeCall wsa busted with something, then found a post from somebody using the same API from C and getting the same issue. 

[09:09] * jnthn should trust NativeCall a little more :)

[09:09] *** chenryn left
[09:10] <TimToady> shoulda used eqv there

[09:11] <FROGGS> ilogger2++ # taking notes for lichtkind

[09:11] <TimToady> that's hanging in my liiving room

[09:12] <masak> :)

[09:12] <masak> is it a gnu?

[09:12] <TimToady> yes, Free Software Award

[09:12] <masak> ooh

[09:12] <TimToady> a real trophy :)

[09:13] * jnthn read "is it a gun" :P

[09:13] <TimToady> a head, hanging on the wall

[09:13] <FROGGS> [Coke]++ # release

[09:14] <nwc10> TimToady: pass (except t/spec/S32-list/uniq.rakudo.moar)

[09:15] *** chenryn joined
[09:16] <Ven> are we on?

[09:17] <TimToady> are we on what?

[09:17] * masak .oO( this is your brain on Perl 6. any questions? )

[09:17] <Ven> I was wondering which stream was it that you were looking at

[09:17] * TimToady will take a nap now

[09:18] <Ven> oh, is it lunchtime now?

[09:19] <Ven> ha, missed it.

[09:19] <jnthn> Ven: yes, lunch

[09:19] <jnthn> Ven: You can catch my session this afternoon :)

[09:19] <Ven> I'm afraid the beach is more appealing to me :P

[09:20] <jnthn> .oO( Well, that's a beach... )

[09:20] <Ven> jnthn: which track is it? what hour :) ?

[09:20] <jnthn> Room Vitosha

[09:20] <jnthn> 14:50

[09:20] <tadzik> FROGGS: I dunno, I was in the security talk

[09:21] <tadzik> I don't think there was a use perl or die in fromt of me

[09:21] <Ven> it's 12h20 for you there? So that I don't fail again :P

[09:21] <jnthn> yes

[09:21] <FROGGS> tadzik: ahh, no, I was watching markov's talk

[09:21] *** fhelmberger joined
[09:22] <Ven> Are there others Perl6 talks to look for?

[09:22] * Ven goes on looking for a schedule

[09:23] <sergot> Ven: jnthn will give a talk today

[09:23] <Ven> sergot: you ought to backlog faster :P

[09:23] <sergot> ohhh, sorry :)

[09:24] <TimToady> jnthn++ talks in a little over two hours from now

[09:25] <jnthn> TimToady: Talking in your nap? :)

[09:25] <TimToady> yup

[09:25] <jnthn> time to go find the lunch :)

[09:25] <masak> sleep tight, TimToady 

[09:26] *** spider-mario joined
[09:26] <jnthn> My talk might be a good sleeping aid :P

[09:26] <masak> riiiiiight

[09:27] <FROGGS> one Worthington, two Worthington, three.... ZZZzzzZZzzzz

[09:27] *** kurahaupo joined
[09:27] <TimToady> it's more about XXXxxxXXXxxx

[09:30] <Ven> Well, did they get recorded?

[09:30] <Ven> .tell cognome any updates for the FPW2014 talk videos :P?

[09:30] <yoleaux> Ven: I'll pass your message to cognome.

[09:34] *** zakharyas1 left
[09:35] *** cooper left
[09:37] *** anaeem1_ joined
[09:37] *** anaeem___ left
[09:37] *** gmunoz joined
[09:45] *** kurahaupo left
[09:46] *** j4jackj left
[09:51] <timotimo> jnthns talk is going to happen soon, right?

[09:53] <timotimo> oh, it's in a few hours

[09:58] *** chenryn left
[10:00] *** chenryn joined
[10:00] *** Ven left
[10:02] *** pmurias joined
[10:03] <pmurias> masak: when will be jnthn's sekkrit project unveiled?

[10:04] *** Ven joined
[10:10] <pmurias> jnthn: when do you plan to unveil $sekkrit-project?

[10:17] <Ven> duh, doing common lisp ATM and I'd really like to have scheme-style templates.

[10:20] *** thou joined
[10:22] <masak> pmurias: there is no sekkrit project. what sekkrit project? I don't know what you're talking about. do not mention a sekkrit project again.

[10:23] <huf> so the ufo _did_ land? and you guys are experimenting on it?

[10:23] <masak> I am not at liberty to say!!!

[10:23] <masak> I mean, no!

[10:23] <huf> you pretty much just confirmed that _AND_ that you know who shot kennedy.

[10:23] <jnthn> pmurias: What sekrit project? :P

[10:24] <masak> told you :)

[10:24] *** thou left
[10:25] <jnthn> pmurias: In completely unrelated news, my talk is at 14:50 Bulgarian time (so 13:50 where you are,I guess) and will be live-streated :P

[10:25] <jnthn> uh, streamed

[10:25] <nwc10> http://act.yapc.eu/ye2014/talk/5633

[10:27] * masak .oO( live-streaked )

[10:28] <jnthn> I'm not ingy :P

[10:28] <masak> m: say "jnthn" === "ingy"

[10:28] <camelia> rakudo-moar 5dd10b: OUTPUT«False␤»

[10:28] <masak> no, you're not :)

[10:29] *** chenryn left
[10:29] <nwc10> I assume that this channel will do live text commentary of anything interesting that may (or may not) happen in jnthn's talk

[10:31] <en> Ooh. I like how perl6 is my 6th buffer... heheh.

[10:31] <en> s/perl/#perl/

[10:32] <masak> this is a general notice, completely unrelated to any excitement about jnthn's talk: a sekkrit project does *not* officially exist, and either way, it's sekkrit.

[10:32] <nwc10> can I just ask the NSA?

[10:32] <masak> sssssh!

[10:32] <jnthn> .oO( so long as he doesn't think of asking my SAN... )

[10:33] * masak .oO( jnthn-san )

[10:34] *** chenryn joined
[10:48] *** Ven left
[11:03] *** kurahaupo joined
[11:06] <pmurias> jnthn: why do we have both nqp::atpos and QAST::Var with scope eq 

[11:07] <pmurias> 'positional'

[11:07] <pmurias> ?

[11:11] *** Ven joined
[11:11] <tadzik> sergot: I think HTTP::UA doesn't work for me because chunking

[11:12] <pmurias> masak: do you think polyfilling Math.imul from the nqp runtime would be culturally acceptable in js land?

[11:12] <tadzik> sergot: https://gist.github.com/tadzik/0fe43ae557ab02ff56a0

[11:13] <Ven> I'm kinda afraid my internet is so bad I won't even be able to look at the livestream :P

[11:14] <sergot> hmm

[11:14] <timotimo> o/

[11:14] <sergot> tadzik: so, you dont get an empty response?

[11:14] <sergot> hi timotimo 

[11:14] <Ven> currently stuttering a lot ...

[11:14] <tadzik> sergot: no, I just get headers only

[11:14] <tadzik> like http-ua gave up on the rest of it

[11:14] <timotimo> i'm seeing curtis poe on the stream now

[11:15] <lizmat> Ven: FWIW, crystal clear reception here

[11:15] <yoleaux> 05:36Z <[Coke]> lizmat: - had to fudge some of the new throws_like tests for parrot & jvm.

[11:15] <Ven> lizmat: I'm def. blaming my internet connection -- nothing else :).

[11:15] <sergot> we handle chunking outside the SSL module.

[11:15] <lizmat> just saying you're probably right  :-)

[11:15] <sergot> tadzik: so it should fail on non-ssl connection too.

[11:16] <sergot> does it?

[11:16] <tadzik> sergot: well, non-ssl don't call github, do they

[11:16] <sergot> let's try something else

[11:16] <tadzik> chunked transfers are supported, right?

[11:16] <sergot> yes

[11:17] <sergot> FROGGS++ has done this in HTTP::UA

[11:17] <sergot> tadzik: https://github.com/sergot/http-useragent/blob/master/lib/HTTP/UserAgent.pm6#L110

[11:17] <sergot> it is here

[11:18] <tadzik> I'll debug it

[11:18] <colomon> Oh, right, YAPC::EU must be well underway by now?

[11:19] <sergot> tadzik++ 

[11:20] <tadzik> colomon: it is

[11:20] <tadzik> it's actually my first time using perl6-debu

[11:20] <tadzik> g

[11:20] <colomon> tadzik: just found a schedule

[11:21] *** prevost joined
[11:22] <colomon> tadzik: jnthn's got a talk in 30 minutes?

[11:22] <tadzik> colomon: yes

[11:22] <colomon> \o/

[11:22] <lizmat> http://yapc.getclouder.com/vitosha.html

[11:22] <colomon> I was thinking I wouldn't be able to watch anything, but the timezone difference is very much to my advantage for afternoon talks.

[11:22] <lizmat> should give you the stream

[11:23] <colomon> tadzik++, lizmat++

[11:23] <tadzik> sergot: tada! https://gist.github.com/tadzik/a149ff234286f05fbba8

[11:23] <tadzik> it says Nil

[11:24] <sergot> ohh

[11:25] <tadzik> $response.header doesn't seem to have the chunked thingy inside

[11:26] <tadzik> so it's like it read some of the headers, didn't see the chunked marker, so it fetched the rest of the headers and thought it's content

[11:26] <tadzik> I'm half-guessing, but you get the idea

[11:27] <sergot> I get it

[11:27] <sergot> trying to fix this

[11:27] <tadzik> awesome

[11:27] <tadzik> ++sergot

[11:28] *** telex left
[11:28] <tadzik> "# Find the header/body separator in the chunk, which means we can parse the header seperately"

[11:28] <tadzik> this doesn't seem to be doing what it claims to be doing :)

[11:30] *** telex joined
[11:33] <sergot> tadzik: seems like I have just fixed it... but... give me a sec

[11:33] <timotimo> i looked a tiny bit at colomon's nativecall weirdness and couldn't figure out WTH happens yet.

[11:33] <sergot> I think there should be if ~$response..... 'chunked' {

[11:33] <sergot> tadzik: ~ is missing there

[11:33] <colomon> timotimo++

[11:33] <sergot> tadzik: watch out, it hangs now.

[11:34] <FROGGS> tadzik: can you put the data you already received in that gist too?

[11:36] <tadzik> FROGGS: I think so

[11:37] <sergot> say $response.header.field('Transfer-Encoding').values[0]; returns "chunked"

[11:37] <tadzik> FROGGS: https://gist.github.com/tadzik/ce0bcc1d4bc6c7036b46 I think that's what you're after

[11:37] <tadzik> $header is what's passed to .parse in that code

[11:38] <FROGGS> sergot: how can that be true? do you also receive the snippet like tadzik that does not include the transfer-encoding header?

[11:39] <sergot> tadzik: your gist is about the first test

[11:39] <sergot> not the second oone

[11:40] <tadzik> uh oh

[11:40] <FROGGS> ahh

[11:40] <tadzik> I must've set a breakpoint too soon

[11:41] <tadzik> wow, debugging stuff is slooow

[11:41] <FROGGS> m: say ['chunked'] eq 'chunked'; say ~['chunked'] eq 'chunked' # sergot: I don't think we need to stringify the lhs

[11:41] <camelia> rakudo-moar 5dd10b: OUTPUT«True␤True␤»

[11:41] <tadzik> ah, got it

[11:41] <FROGGS> tadzik: don't get nostalgic :o)

[11:42] <tadzik> :P

[11:42] <tadzik> ok, now it knows it's chunked

[11:42] <FROGGS> :(

[11:42] <dalek> nqp-js: b896123 | (Pawel Murias)++ | src/vm/js/ (2 files):

[11:42] <dalek> nqp-js: Implement nqp::x and nqp::isnull

[11:42] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/b896123c22

[11:42] <dalek> nqp-js: b84189f | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[11:42] <dalek> nqp-js: Implement nqp::atpos, nqp::push, nqp::pop, nqp::shift.

[11:42] <dalek> nqp-js: 

[11:42] <dalek> nqp-js: Add add_sideffect_op helper so that we can define ops with sideffects easily.

[11:42] <dalek> nqp-js: review: https://github.com/pmurias/nqp-js/commit/b84189fc50

[11:42] <timotimo> yay, jnthn talk coming up in ~10 minutes

[11:42] <FROGGS> T-8

[11:42] <tadzik> hmm

[11:43] <timotimo> vitosha is the right stream, yes?

[11:43] <timotimo> seems like

[11:43] <TimToady> yes

[11:43] <FROGGS> ohh, that was a short nap

[11:44] <TimToady> yes

[11:44] * TimToady blames jnthn

[11:44] <sergot> FROGGS++: yeah. we dont have to stringify this, thanks

[11:44] <TimToady> he should've considered that when he decided to become a good speaker

[11:44] <FROGGS> what I am wondering about... if this is going to be a 50 minutes talk, will he be able to improve it so that it will take 30 minutes next time?

[11:45] <TimToady> we'll have added enough content by then to pad it out again

[11:45] <timotimo> good point: repeat questions into the microphone

[11:45] <FROGGS> ahh, moar features, yeah :o)

[11:45] <timotimo> but jnthn has heard that hint a billion times before i bet

[11:51] *** \00 joined
[11:52] <TimToady> hey, where's my jnthn talk?  I'm just getting the blue-ish screens

[11:52] <FROGGS> me too

[11:52] <Ven> go :-)

[11:52] <itz> there is the first slide visible but not yet started

[11:53] <colomon> I'm getting pre-talk info on jnhtn and the talk?

[11:53] <TimToady> hopefully it's pre-talk...

[11:53] <TimToady> and not someone just forgetting to turn it on

[11:53] <Ven> considering the background noise, it has to :)

[11:53] * lizmat is seeing the same thing

[11:54] <masak> talk ain't started yet.

[11:55] <TimToady> we need some performance enhancement here...

[11:55] <FROGGS> yeah, let him perform!

[11:56] <TimToady> yes, okay

[11:56] <FROGGS> I could 'ear something

[11:56] <colomon> I hear him?

[11:56] <timotimo> how long ago was the "A Rakudo Performance" talk?

[11:56] <TimToady> that's jnthn

[11:56] <FROGGS> ahh, better

[11:56] <itz> starting

[11:56] <sergot> yay!

[11:56] <FROGGS> go jnthn++

[11:56] <Ven> yay :)

[11:57] <tadzik> TimToady: it's starting now

[11:57] <sergot> polish perl workshop jnthn++

[11:57] <sergot> :)

[11:57] <woolfy> Hey!!!  jnthn++

[11:57] <TimToady> yes, I know

[11:57] <tadzik> err

[11:57] <tadzik> tabfail

[11:57] <tadzik> I meant timotimo 

[11:57] <Ven> Aaaand I can't watch it because it's incredibly stuttering

[11:57] <TimToady> You feel old!?!

[11:57] <FROGGS> TimToady: he's even younger than me >.<

[11:58] <timotimo> oh?

[11:58] <timotimo> i'm already watching :)

[11:59] <tadzik> timotimo | how long ago was the "A Rakudo Performance" talk?

[11:59] <tadzik> this confused me

[11:59] <colomon> go jnthn++!

[11:59] <psch> hi #perl6 o/

[11:59] <sergot> is this a t-shirt from 2014 or 2013?

[11:59] <sergot> hi psch!

[11:59] <psch> jnthn++ talk 

[11:59] <timotimo> there was a talk called that

[12:00] <psch> hey sergot \o

[12:00] *** chenryn left
[12:00] <tadzik> sergot: 2013 I think, it looked embroidered

[12:00] <psch> hm, the "who talks about what"-bar at the bottom doesn't go away for me?

[12:01] <Ven> same here.

[12:01] <colomon> surprise coming!  \]o/

[12:01] <FROGGS> \o/

[12:01] <colomon> …. errr, third arm on me?

[12:02] <psch> colomon: maybe it's an ear? :)

[12:02] <FROGGS> or a huge mobile...

[12:02] <timotimo> noooo why buffering! :(

[12:03] <colomon> psch: my ears are pretty big, but they are also roughly symmetrical.  ;)

[12:03] <masak> \]o[/

[12:03] <timotimo> hah

[12:03] <psch> colomon: clearly your head was turned sideways a bit :)

[12:04] *** gmunoz is now known as zoosha

[12:07] <timotimo> jnthns slides are really pretty to look at

[12:07] *** cognome joined
[12:07] <masak> I was thinking the same thing.

[12:07] <masak> jnthn++

[12:08] <timotimo> actually, let me rephrase that

[12:08] *** thou joined
[12:09] <timotimo> they are structured very clearly, but also very pretty to look at for purely aesthetic reasons

[12:10] <masak> aye.

[12:10] *** biff_ joined
[12:12] <biff_> hello, I'm a Perl 5.x programmer who wants to learn about Perl 6 but who is confused about where to start

[12:12] <tadzik> hello biff_ 

[12:12] <sergot> tadzik: yeah, this is the 2013 one

[12:12] *** thou left
[12:12] <sergot> :)

[12:12] <tadzik> oh, he showed his back? :P

[12:13] <biff_> hello tadzik

[12:13] <sergot> almost :)

[12:13] <tadzik> biff_: we have a set of articles aimed at p5 programmers

[12:13] <tadzik> biff_: it's a bit aged, but they're a very good resource nonetheless

[12:13] <tadzik> biff_: http://perlgeek.de/en/article/5-to-6

[12:14] <biff_> Thanks tadzik!

[12:14] <tadzik> you're welcome :)

[12:14] <psch> biff_: http://learnxinyminutes.com/docs/perl6/ is another great overview, without reference to perl5

[12:15] <tadzik> hmm, we don't have that on http://perl6.org/documentation/

[12:15] <timotimo> why does this damn stream keep buffering, then jumping a tiny bit ahead? :(

[12:15] <Ven> timotimo: feel you :(

[12:15] * lizmat doesn't see buffering...

[12:15] <TimToady> mine is fine

[12:15] <biff_> I still know lots of companies using Perl 5.x but none moving to Perl 6

[12:15] <TimToady> had some buffering for lichtkind's talk though

[12:16] <biff_> Does anyone have examples of companies using Perl 6?

[12:16] <tadzik> someone should kick the projector

[12:16] <masak> biff_: you might also be interested in https://github.com/perl6/mu/blob/master/docs/other/porting_howto

[12:16] <moritz> suffering from buffering, the good old favorite

[12:16] <Ven> biff_: I use some perl6 in prod :)

[12:17] <sergot> Ven++

[12:17] <Ven> lots of little CLI snippets here and there that do one thing, deploying, installing, copying, whatever

[12:17] <biff_> thanks Ven and sergot

[12:18] <timotimo> my almost earliest optimization i made is again used as an example \o/

[12:18] <biff_> Any IDE

[12:18] <lizmat> TheDamian converted his "rename" script to Perl 6 and uses it daily

[12:18] <sergot> biff_: you meant tadzik I gues :)

[12:18] <colomon> timotimo++

[12:18] <sergot> s

[12:18] <Ven> lizmat: link :p ?

[12:18] <colomon> lizmat: his rename script?

[12:19] <biff_> any ide's support Perl 6?

[12:19] <lizmat> will look up after jnthn's talk, ok?

[12:19] <sergot> biff_: I know about vim plugins

[12:19] <sergot> biff_: https://github.com/vim-perl/vim-perl

[12:19] <biff_> sergot yes :)

[12:19] <sergot> padre highlights p6 iirc

[12:19] <itz> and vim

[12:19] <biff_> ahh vim

[12:20] <Ven> padre does??

[12:20] <sergot> Ven: I think so, checking

[12:20] <masak> the slide that is up at the moment is awesome.

[12:21] <masak> notice how highlighting is working both in the left and top frames.

[12:21] <colomon> masak: bytecode deep dive?

[12:21] * flussence arrives late and frantically looks for stream links in the backlog :)

[12:21] *** dwarring left
[12:21] <colomon> flussence: http://yapc.getclouder.com/vitosha.html

[12:21] <masak> colomon: yes.

[12:22] <flussence> found it anyway, but thanks colomon++

[12:23] <masak> heat-seeking optimizer!

[12:23] <tadzik> now write a module to warm code up so optimizer catches it :D

[12:24] <tadzik> Class::Heater

[12:24] * lizmat realizes there's at least a 20 second delay on the video stream

[12:24] <masak> tadzik: for ^1000_000 { module() }

[12:24] <biff_> I just saw that P6 is supposed to run in the JVM as well as Parrot, any opinions about which is better or does it seem to matter?

[12:24] <masak> lizmat: no, I'm just slow ;)

[12:24] <tadzik> biff_: MoarVM is the best :)

[12:24] <Ven> biff_: moarvm ;)

[12:25] <masak> biff_: moarvm!

[12:25] <lizmat> biff_: YMV, JVM is not really usable for CLI script

[12:25] <Ven> .o( take care of your variations ) # YMV

[12:25] <biff_> sweet thanks all

[12:26] <flussence> biff_: they all have their useful points; JVM has the most stable threading (because it's... java), but it also takes forever to start up

[12:26] <psch> luckily it comes with an eval-server, if you need it all the time anway

[12:26] <psch> *anyway

[12:26] <masak> biff_: let us know if you run into any kind of trouble! we're happy to assist.

[12:26] <biff_> oh I will I will :)

[12:27] <flussence> (does r-p do threads yet?)

[12:28] <Ven> erm, the very basic thread, it should.

[12:28] <Ven> I think I read something from the advent of 2y ago

[12:28] <lizmat> r-p is not doing S17

[12:28] <masak> why not?

[12:29] <lizmat> bcause it's threads are incompatible

[12:29] <lizmat> *its

[12:29] <masak> curious.

[12:30] <lizmat> no, not really

[12:30] <Ven> hey people in the room

[12:30] <Ven> not that many people there :-)

[12:31] <timotimo> BRRT!

[12:31] <timotimo> \o/

[12:31] <Ven> \o/

[12:32] <timotimo> oh god

[12:32] <colomon> ooo ooo ooo!

[12:32] <timotimo> will this be the reveal

[12:32] <timotimo> OH YES

[12:32] <colomon> sounds like

[12:32] <tadzik> *drum roll*

[12:32] <FROGGS> now!

[12:32] <colomon> YES!!!!!

[12:32] <timotimo> HOLY YES

[12:32] <Ven> YES

[12:32] <TimToady> wowee

[12:32] <timotimo> i wanted to do something like this, too

[12:32] <nwc10> oh, that was good luck, I just rstarted the stream

[12:32] <timotimo> but it wouldn't have ended up as good at all :D

[12:32] <moritz> what did jnthn++ reveal?

[12:33] <colomon> moritz: profiler

[12:33] <Ven> the truth]

[12:33] <nwc10> no, "Statistics"

[12:33] <colomon> moritz: that knows about everything down to JIT

[12:33] <nwc10> the one after lies and damn lies

[12:33] <moritz> \o/

[12:34] <timotimo> I LOVE THIS.

[12:34] <Ven> .o( I hope it uses rakudo-js )

[12:34] <tadzik> :D

[12:34] <tadzik> I wonder if we can build a nytprof-like view in this

[12:34] <tadzik> where it shows you the code in green and red

[12:34] <moritz> OMG please yes

[12:34] <moritz> and a flamegraph

[12:34] <tadzik> and a vim plugin that does that :D

[12:35] <nwc10> and a pony?

[12:35] <tadzik> yes please

[12:36] <timotimo> this does everything i wished for and more

[12:36] * colomon had hoped this would be the surprise, but this is even better than I had imagined

[12:36] <tadzik> literally a pony

[12:37] <Ven> "figuratively literally"

[12:37] <Ven> \o/

[12:37] <tadzik> I'm warming up the CPU for the git pull

[12:37] <colomon> "I will push this right after the session."  !!!!!

[12:37] <colomon> tadzik++

[12:38] <timotimo> why is the talk almost over already? ;(

[12:38] <tadzik> happy time passes fast

[12:38] <colomon> timotimo: so I can get on with my day?  :)

[12:38] *** kaare_ left
[12:38] <masak> I've never seen #perl6 this happy about a talk ever :D

[12:38] <tadzik> since the debugger? :P

[12:38] <TimToady> it's all the smileys

[12:38] <flussence> the talk got profiled and optimized down to 40% as long

[12:38] <masak> tadzik: no, ever.

[12:39] <lizmat> :-)

[12:39] <Ven> 355x o/

[12:39] <colomon> !!!!!

[12:43] <moritz> masak: the first R* release comes to mind

[12:45] <Ven> any ETA for the recording? I see the camera now :-0

[12:45] <timotimo> perl6-becnh, is that something jnthn built in secret, too? :)

[12:45] <lizmat> :-)

[12:46] <sergot> jnthn++ that was really awesome

[12:47] <lizmat> jnthn++ indeed...

[12:47] <FROGGS> jnthn++ # --profile++ is awesome

[12:47] <cognome> jnthn++ # great presentation

[12:47] <yoleaux> 09:30Z <Ven> cognome: any updates for the FPW2014 talk videos :P?

[12:47] <lizmat> no I need to rewrite my talk  :-)

[12:47] <cognome> sofia people, thx for the feed.

[12:47] <timotimo> kinda sad only so few people were actually attending that session

[12:47] *** RandalSchwartz left
[12:48] <lizmat> timotimo: I don't think there are as many people at YACP::EU in total

[12:49] <timotimo> oh

[12:49] <lizmat> and there's at least one less at jnthn++ 's talk than planned  :p(

[12:49] <timotimo> OK

[12:49] <lizmat> :-(

[12:49] <timotimo> yes :(

[12:49] <TimToady> two

[12:49] <TimToady> and my cat died the day after my 2nd retinal surgery... :(

[12:49] * lizmat hugs TimToady 

[12:50] * TimToady hugs lizmat

[12:50] * Ven hugs hugs

[12:50] <lizmat> good seeing jnthn wearing his hat  :-)

[12:50] <TimToady> hugme: hug all the hugs!

[12:50] * hugme hugs all the hugs!

[12:50] * Ven timtoadies hugme

[12:51] *** donaldh joined
[12:51] <masak> hugme: hug hugging!

[12:51] * hugme hugs hugging!

[12:51] * TimToady wanders off to hug his pillow smoar

[12:51] <masak> 'night, TimToady 

[12:51] <moritz> hugme: hug going meta

[12:51] * hugme hugs going

[12:53] <flussence> and a *++ to whoever's operating the streams this time; I appreciate having an easy-to-find rtmp url inside a plain <video> tag

[12:54] * timotimo is also happy the sound quality was pretty much perfect

[12:54] *** xenoterracide joined
[12:54] <sergot> tadzik: have you tried to do some more debugging?

[12:54] *** guru joined
[12:55] *** guru is now known as Guest50994

[12:55] *** Guest50994 is now known as ajr_

[12:57] <flussence> .oO( methinks someone's font is missing a U+2615 HOT BEVERAGE glyph... )

[12:57] * timotimo awaits the push notification eagerly

[12:58] <donaldh> darn, Sofia is two hours ahead of me. Missed jnthn++'s talk

[12:58] <cognome> Ven: you should ask elbeho

[12:59] <FROGGS> timotimo: you have something new to play with? :D

[12:59] <timotimo> FROGGS: yes! :)

[13:00] *** ajr_ left
[13:00] <cognome> Ven: here, http://www.dailymotion.com/user/journeesperl/1

[13:00] <FROGGS> I have v5 one liners that takes 1.1s where the P6 equivalent takes .3s or so... I'm eager to --profile that

[13:00] <timotimo> oooh, Ven did a talk

[13:01] *** ajr joined
[13:01] <timotimo> oh no, it's completely in french

[13:01] *** ajr is now known as Guest13217

[13:02] *** Guest13217 is now known as ajr_

[13:02] *** Ven left
[13:02] <flussence> a few years ago in here I said one day I was going to port frozen-bubble to perl6... and I'm running out of excuses to put it off /o\

[13:02] <timotimo> :D

[13:02] <cognome> timotimo: According to him, he did it almost at gunpoint.

[13:02] <FROGGS> flussence: I have some frozen-bubble knowledge fwiw :o)

[13:02] <timotimo> oh my

[13:04] <flussence> (that game was one of the first times I'd seen perl5 code... and it scared me away from it for a good few years :)

[13:05] <moritz> wow, I even understand those talk titles

[13:05] <sergot> masak's screen

[13:05] <sergot> oh, it's gone now

[13:07] <FROGGS> flussence: yeah, I helped rewriting it... use that as a base: https://github.com/kthakore/frozen-bubble

[13:13] *** ggoebel11111116 joined
[13:14] * timotimo can't wait to look at the implementation of the profiler

[13:14] *** fhelmberger left
[13:15] *** ggoebel11111115 left
[13:16] <timotimo> oooh, masak has a lightning talk in this upcoming session

[13:17] <tadzik> sergot: no, I got overexcited with other things :)

[13:19] <sergot> hope I will be able to see masak's lighting talk, I have a train in an hour.

[13:19] <sergot> tadzik: I think I know what made you overexcited. :)

[13:23] <Ulti> 7/win 2

[13:23] <Ulti> erk

[13:23] <Ulti> :'(

[13:24] *** Ven joined
[13:24] <Ven> cognome: thanks!

[13:24] <Ven> timotimo: yep, sorry :P

[13:25] <[Coke]> jnthn++, and I've only seen people jnthn++, not the original jnthn++ thing . :)

[13:26] *** xenoterracide left
[13:27] <dalek> Heuristic branch merge: pushed 22 commits to nqp by jnthn

[13:27] <Ven> jnthn++

[13:27] <sergot> jnthn++

[13:27] <flussence> jnthn++

[13:29] <flussence> ooh, that moosex thing was neat

[13:29] <sergot> sjn++

[13:31] * woolfy hugz TimToady because of cat AND retina AND not being in Sofia

[13:33] <colomon> oooooo

[13:33] <woolfy> cognome: it was me plus 1 other person (you?  maddingue?) who convinced Ven to do a talk...  It was fun.

[13:34] <Ven> woolfy: elbeho, iirc.

[13:34] <masak> Ven++ # giving a talk

[13:34] <Ven> well, now I can get laughed at on video, yay :P

[13:34] <Ven> it was a fun day !

[13:34] <woolfy> Ven: no no, not laughed at, applauded at and hugged and ++

[13:35] <Ven> I only talked with Maddingue at the post-conf (he was talking about how js is terrible =P)

[13:36] *** jnap joined
[13:36] *** jnap left
[13:38] <jnthn> Note that perl6-bench was started by japhb++, and wasn't one of my secret projects. :)

[13:38] <timotimo> .tell japhb it'll now be very interesting to be able to run benchmarks with nqp-m --profile (and perl6 --profile later when it works) with a given (or default (big)) work load

[13:38] <yoleaux> timotimo: I'll pass your message to japhb.

[13:39] <masak> japhb++ # perl6-bench

[13:39] <masak> jnthn++ # profiler

[13:43] *** jnap joined
[13:43] *** [Sno] left
[13:47] <sergot> masak! :)

[13:47] <flussence> :D

[13:49] <Maddingue> me? badmouthing JS? I can't believe that :3

[13:49] <lizmat> moarving the pictures?

[13:50] *** kaare_ joined
[13:51] <timotimo> why does the stream hang _<

[13:52] <timotimo> i missed it!

[13:52] <timotimo> damn ti!

[13:52] <timotimo> timo is now sadface

[13:52] <FROGGS> me too :o(

[13:52] <woolfy> masak++

[13:52] <colomon> masak++

[13:53] <woolfy> I liked the caml _> coccoon morph!

[13:53] <jnthn> cute :)

[13:53] <jnthn> masak++

[13:53] <donaldh> masak++ # that was really nice :-)

[13:53] <lizmat> and another part of my talk that I can throw away  :-)

[13:53] <woolfy> coccoon?  Well, I've seen an important somebody spell it that way...

[13:53] <masak> I think I spelled it right...

[13:54] <masak> oh, woolfy didn't above, I see :)

[13:55] <woolfy> masak: lizmat and I have a nice piece of paper where TimToady wrote "coccoon"!!!

[13:55] <Ven> link? What's happening

[13:55] <masak> woolfy: yes, I remember now :)

[13:55] <masak> lizmat: talked about it on PLPW.

[13:55] *** molaf joined
[13:57] *** thou joined
[13:57] *** molaf left
[14:01] *** thou left
[14:02] <timotimo> btw: rc-forest-fire *still* doesn't burn trees properly

[14:04] <masak> timotimo: probably for environmental reasons. :P

[14:05] <timotimo> of course

[14:05] <gtodd> errm reviewing notes to self don't trust my terminology so dumb question ...   if I do   perl6 -e 'say $*ARGFILES.lines.elems' file.txt    ... I'm calling lines as a 'method' on the input file(s) ??  but if I do:  perl6 -e 'say lines().elems' file.txt  it's a function

[14:05] <timotimo> aye, lines exists both as a method on IO objects as well as a global subroutine

[14:05] <gtodd> actually not concerned about the ontological status :-)  just want to know what words to use

[14:06] <timotimo> ah, ok

[14:06] <gtodd> yay!

[14:06] <masak> gtodd: correct.

[14:06] <masak> gtodd: ontological status is also correct :)

[14:06] <gtodd> heh

[14:07] <gtodd> timotimo: masak: thanks .... I wrote that note almost a year ago so it stuck :-)

[14:07] <timotimo> :)

[14:07] *** thou joined
[14:08] <masak> gtodd: at some point in the distant past, the idea was that if you "exported" a method, it would be available as a global sub. that idea didn't work so well, so subs and methods are ontologically distinct. (although they get more identicat again the deeper you dig.)

[14:08] <lizmat> otoh, "is export" on methods still work

[14:08] <lizmat> which I found out the other day  :-)

[14:09] <gtodd> perl6 ideas, syntax, etc. seems more "sticky" (there must be a language design concept that describes this) even if you don't use it too often ... 

[14:09] <masak> that's news to me. :)

[14:11] <lizmat> $ ack 'is export' | grep method | wc -l

[14:11] <lizmat>      113

[14:11] <gtodd> maybe it's just that when learning perl5 you get a internal psychic reward every time you master an idiom ... whereas perl6 has less of a jolt but is longer lasting 

[14:12] <donaldh> what do double square brackets do? e.g. [[ &with ]]

[14:16] *** biff_ left
[14:17] <gtodd> masak: presumably separating them that way doesn't make perl6 messier/harder to maintain ... :-)

[14:18] <tadzik> > perl6 --profile SpaceInvaders 

[14:18] <tadzik> No profiling support

[14:18] <tadzik> :(

[14:18] <tadzik> I recompiled rakudo and all the things, even redownloaded

[14:18] <tadzik> does it need a commandline switch to compile it with profiling support?

[14:18] <carlin> HEAD nqp and HEAD moar?

[14:19] <tadzik> oh, HEAD moar

[14:19] <timotimo> tadzik: also, you need to be in the nqp folder for it to find the html template it'll use to create the profile

[14:19] <timotimo> (or put the template in the same relative directory)

[14:19] <tadzik> hhuh

[14:20] <tadzik> oh well, I'll listen to the keynote for now

[14:20] <lizmat> .oO( Viva La Revolution! )

[14:24] <dalek> nqp: c830eaf | jonathan++ | / (2 files):

[14:24] <dalek> nqp: Install profiler template; use it.

[14:24] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c830eafd20

[14:28] <dalek> rakudo/nom: b61700d | jonathan++ | tools/build/NQP_REVISION:

[14:28] <dalek> rakudo/nom: Bump NQP_REVISION to get MoarVM profiler support.

[14:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b61700d33f

[14:28] <dalek> rakudo/nom: ce71b85 | jonathan++ | src/Perl6/Actions.nqp:

[14:28] <dalek> rakudo/nom: Some frame names for better profiler output.

[14:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ce71b85d8f

[14:29] <jnthn> That should make it rather easier. :)

[14:31] * donaldh was thinking about adding profiling to the JVM backend. Will look at this and see if I can port it.

[14:32] <timotimo> without a bytecode specializing phase ... no, you won't be able to :(

[14:32] *** Ven left
[14:32] <donaldh> ?

[14:33] <timotimo> well, the trick for the profiler on moarvm is that it just uses our existing "spesh" framework

[14:33] <timotimo> the first time it encounters a frame, it adds instrumentation bytecodes throughout that frame

[14:34] <donaldh> ah. in-frame profiling?

[14:34] *** Mouq joined
[14:34] <timotimo> something like that

[14:34] <timotimo> i don't know if that refers to something that ... is a thing

[14:35] <donaldh> Well you can do method profiling but that gives no visibility of loops or expensive instructions within a method.

[14:35] <jnthn> donaldh: Really, the profiler is providing a lot of insight into what Moar's dynamic optimizer is doing.

[14:35] <timotimo> ah

[14:36] <Mouq> japhb: re: http://irclog.perlgeek.de/perl6/2014-08-22#i_9225656 because "method postcircumfix:<[ ]>" and "…:<{ }>" no longer mean anthing special, so it's inconsistent to have "method postcircumfix:<( )>" be special

[14:36] * donaldh used to use quantify for C/C++ code that gave statement level profiling.

[14:36] <donaldh> jnthn: as opposed to profiling perl 6 code? or both?

[14:37] <[Coke]> anyone has a URL for jnthn's talk, please let me know.

[14:37] <jnthn> donaldh: It does that too

[14:38] <timotimo> jnthn: it just doesn't show up in the profile output yet?

[14:38] <jnthn> timotimo: huh?

[14:38] <timotimo> statement-level profiling?

[14:38] <jnthn> Oh

[14:38] <jnthn> No, we don't do that.

[14:38] <timotimo> all i see is callees summed up

[14:38] <jnthn> That's not immediately interesting for now.

[14:39] *** anaeem1_ left
[14:39] <jnthn> Though you could insert statement recording things too

[14:39] <jnthn> Probably wants to be an option.

[14:39] <timotimo> right; but it'd be easy to put into the profiler itself, right? just add a little profiler slot for each line annotation that shows up in the frame and put "i'm spending time on this line now" bytecodes where the line number annotations are

[14:40] <jnthn> Yeah, it's do-able without too much effort. But I think we want a --profiler-option=... or so to turn such things on.

[14:40] <timotimo> aye

[14:40] <jnthn> Since it'd be more coslty.

[14:40] <jnthn> But yeah, not hard to add overall

[14:41] <timotimo> wow, there's only 4 ops the jit has to know about for profiling to work properly?

[14:41] <gtodd> donaldh: re: [[ &with ]]  it is  hard to find a canonical syntax reference for perl6 ...  hopefully there will be an even a better than perldoc documentation system for perl6 preinstalled and easy to use (maybe it will be a "killer app"and people will install perl6 just to use it!) ...  BTW if your question gets answered in here it will be logged on the interweb :)

[14:41] <jnthn> sure

[14:42] <jnthn> less is more :)

[14:42] <timotimo> there used to be this WITCH thing

[14:42] <timotimo> it could mention "[[&" as "a thing"

[14:43] <hoelzro> morning #perl6

[14:44] <hoelzro> where do regression tests go for Rakudo? I would like to write one for https://rt.perl.org/Ticket/Display.html?id=122593

[14:44] <timotimo> ... didn't we put a rc-forest-fire implementation in that uses a "warming" state?

[14:44] <timotimo> it seems like we don't have the correct rc-forest-fire for perl6 in perl6-bench

[14:45] <timotimo> .tell TimToady do you know something about the status of perl6/rc-forest-fire in perl6-bench? i thought it was supposed to have a "warming" state

[14:45] <yoleaux> timotimo: I'll pass your message to TimToady.

[14:46] <dalek> rakudo/nom: 60cd9da | (Rob Hoelz)++ | src/core/Numeric.pm:

[14:46] <dalek> rakudo/nom: Check for definedness before invoking isNaN

[14:46] <dalek> rakudo/nom: 

[14:46] <dalek> rakudo/nom: Otherwise, things like Num === Num fail

[14:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/60cd9dafdb

[14:46] <timotimo> interesting, the nqp version of rc-forest-fire goes through all the neighbours to check for a burning tree, but doesn't short-circuit

[14:46] <Mouq> hoelzro: Maybe after NaN === NaN in S02-types/nan.t ?

[14:46] <Mouq> hoelzro: Since it's related to that

[14:47] <Mouq> hoelzro: Though S02-types/num.t looks like a better fit

[14:47] <hoelzro> Mouq: yeah, I think num.t would be better

[14:48] <dalek> roast: f59d8d8 | (Rob Hoelz)++ | S02-types/num.t:

[14:48] <dalek> roast: Add regression test for RT 122593

[14:48] <dalek> roast: review: https://github.com/perl6/roast/commit/f59d8d8982

[14:50] *** Mouq left
[14:50] <masak> lizmat: how can I run an 'is export'ed method as a sub?

[14:51] <masak> m: class C { method foo is export { say "OH HAI" } }; foo

[14:51] <camelia> rakudo-moar 5dd10b: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/ddZCwd3Byj␤Undeclared routine:␤    foo used at line 1␤␤»

[14:51] <gtodd> donaldh:   something like   ack '\[\[' docs/*   might give a hint 

[14:52] <jnthn> masak: You didn't import

[14:52] <jnthn> m: class C { method foo is export { say "OH HAI" } }; import C; foo(C)

[14:52] <camelia> rakudo-moar 5dd10b: OUTPUT«OH HAI␤»

[14:52] <masak> I suspected it was something like that.

[14:52] <masak> wow, you can import a class like that? cool.

[14:52] <masak> lizmat++ jnthn++

[14:52] <masak> TIL.

[14:52] <jnthn> Module too

[14:53] <masak> *nod*

[14:54] * [Coke] can't build nom-moar .

[14:55] <[Coke]> Stage parse      : Cannot invoke this object (REPR: P6opaque, cs = 0)

[14:55] * [Coke] tries a super dooper clean.

[14:55] <masak> bus &

[14:55] <colomon> PROFILE!

[14:56] <jnthn> bus &

[14:56] <[Coke]> does that make a bus number of 2?

[14:57] *** kaleem left
[14:58] *** ajr_ left
[14:59] <colomon> 5% of ABC's time is going to prefix:<+> ?!?!

[15:00] <moritz> probably Str->Num conversion?

[15:00] * colomon is going to need to try again with jit

[15:00] <colomon> moritz: I hope so.

[15:00] <colomon> but even so, that's pretty extreme

[15:00] <colomon> afk # off to store

[15:01] <donaldh> no, that's two bus numbers of 1.

[15:01] <timotimo> parse-json spends 7.77% of its time in CAPHASH (all jitted), 7.28% in MATCH (also all jitted) and 6.73% in parse-json's "str" (all spesh'd), which is there to match ""-delimited strings

[15:01] *** guru joined
[15:02] *** guru is now known as Guest66747

[15:02] *** Guest66747 is now known as ajr_

[15:03] <timotimo> jnthn: the number of deoptimizations on the "front page" doesn't seem to correspond with the number of local deoptimizations in the deopt panel; is that because it's "times run into deopt" vs "frames that ended up being deopt'd"?

[15:05] <Ulti> benchmark of one of my bioinfo tests :3 http://mattoates.co.uk/files/profile-1408719865.79293.html jnthn++ !

[15:08] <timotimo> listiter's reify takes up a quarter of your run time exclusively ... :S

[15:09] <timotimo> the GC is very happy about your program, though

[15:09] <dalek> roast: 2cc1341 | (Rob Hoelz)++ | S02-types/num.t:

[15:09] <dalek> roast: Bump test count in num.t

[15:09] <dalek> roast: review: https://github.com/perl6/roast/commit/2cc134138a

[15:09] <Ulti> yeah I endlessly split apart strings and put them back together again

[15:09] <Ulti> well put new ones back together again

[15:10] <gtodd> donaldh: I'm just letting you know some of my strategies for dealing with documentation while being a mere user of perl6 :-)  ...   anyway  [[ &with ]]  has something to do with infix functions of which I know nothing :-P

[15:10] <Ulti> guess I should implement it with substr or something instead

[15:10] <dalek> Heuristic branch merge: pushed 96 commits to rakudo/S26-WHY by hoelzro

[15:10] *** denis_boyun left
[15:13] <donaldh> gtodd: yeah, I know [+] is a reduce operator. I think [&with] is a reduce operator that uses a supplied function, but don't get the [[&with]] syntax.

[15:15] <gtodd> .oO( maybe it's an array of infixes! errm ... ) 

[15:15] <gtodd> ;)

[15:16] *** Mouq joined
[15:16] <psch> m: sub sum($a, $b) { $a + $b }; say 3 [&sum] 4; #`[[ infixify ]]; say [[&sum]] 6, 7 # and meta op

[15:16] <camelia> rakudo-moar 5dd10b: OUTPUT«7␤13␤»

[15:16] <psch> array of infixes doesn't sound so wrong in my understanding 

[15:17] <gtodd> :-D

[15:17] <psch> m: sub sum($a, $b) { $a + $b }; say [&sum] 6, 7 # and meta op

[15:17] <camelia> rakudo-moar 5dd10b: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/I41buWCkNf␤Two terms in a row␤at /tmp/I41buWCkNf:1␤------> [32msub sum($a, $b) { $a + $b }; say [&sum] [33m⏏[31m6, 7 # and meta op[0m␤    expecting any of:␤        postfix␤        …»

[15:17] <psch> so [[&func]] is [&func] as a list meta op, and [&func] is &func as infix

[15:17] * Mouq enjoys that if one translates http://rosettacode.org/wiki/Mandelbrot_set#Perl to Perl 6, it's many times faster, especially as the accuracy ("1 .. 20") is increased

[15:18] <psch> that's what i was trying to show with these examples; i'm not sure it's 100% correct, but it seems pretty close

[15:18] <Mouq> psch: That's right :)

[15:18] <donaldh> I guess I'd have guessed<&func> as an infixy.

[15:19] * gtodd copy/pastes psch's explanation into ~/Perl6-notes-to-self.txt  

[15:20] <gtodd> donaldh: yes but I think that <&foo> was ambiguous syntax in someway 

[15:20] <donaldh> So it ended up reusing [ ] 

[15:21] <psch> <&foo> is qw[ &foo ]

[15:21] <donaldh> It's seems to be a special case which is a shame, but now I get it.

[15:22] <donaldh> here's the context for the question: https://github.com/rakudo/rakudo/pull/304/files

[15:23] *** anaeem1 joined
[15:24] *** Mouq left
[15:24] *** biff_512 joined
[15:25] *** Ven joined
[15:26] <gtodd> Perl6 syntax [[&functiion]]  In perl6  custom functions can operates as an infix so ... [&func] as a list meta op, and [&func] is &func as infix.

[15:26] <gtodd>  EXAMPLE:  sub sum($a, $b) { $a + $b }; say 3 [&sum] 4 ; say [[&sum]] 6, 7 # and meta op

[15:26] <gtodd> oops ..

[15:27] <gtodd> oh well now it is documented on the interweb :)

[15:27] *** anaeem1 left
[15:29] <Ven> were there other talks to look for ?

[15:29] <Ven> or in the incoming days?

[15:29] <timotimo> oh, interesting

[15:30] <timotimo> reify takes a :$sink; named arguments make spesh bail out iirc ... so we get the benefit of passing ":$sink" on to other reify's, but we won't be speshing that frame

[15:31] <timotimo> actually, i do see spesh'd frames in there

[15:31] <timotimo> oh, of course, if :$sink is *not* passed, it'll be interned and spesh'd

[15:32] *** [Sno] joined
[15:33] <donaldh> what's the runtime overhead of the moar profiler?

[15:33] <Ulti> yeah so going through all the bits of my call graph ListIter.reify is the super painful bit in all of my tests 

[15:34] <Ulti> donaldh: I'm just checking that :)

[15:35] <Ulti> donaldh 13 seconds ontop of 32 seconds it takes for my test to run without profiling

[15:36] <Ulti> ~40% of runtime

[15:37] <timotimo> Ulti: that also includes the time it takes to dump the json data into the template, though

[15:37] <Ulti> yeah

[15:37] <timotimo> can you run something that takes more like a minute, perhaps?

[15:37] <donaldh> that's quite good. JVM profilers often cause a bigger slowdown.

[15:39] <[Coke]> verified, nom is broken on osx on moar.

[15:39] <Ulti> ... I built it on OSX like 5 minutes ago

[15:39] <donaldh> [Coke]: what's broken. I might have some time to take a look.

[15:39] <[Coke]> is there a missing version bump post release?

[15:40] <Ulti> I have the profiler output to prove it 

[15:40] <Ulti> I get the same old make error I always get though

[15:40] <[Coke]> https://gist.github.com/coke/6e2bf325f6af232394bb #donaldh

[15:40] <[Coke]> ^^ new make error, followed by the old one.

[15:41] *** zakharyas left
[15:41] <Ulti> [Coke] what OSX/XCode version are you on?

[15:41] <[Coke]> that was with a rm -rf install, and perl Configure.pl --gen-nqp --gen-moar --backends=moar

[15:41] <[Coke]> os x 10.9.4

[15:41] <Ulti> ah I was using rakudobrew so might have been a lot of cached stuff

[15:41] <[Coke]> xcode 5.1.1

[15:42] <Ulti> same as me

[15:42] <[Coke]> crap. one local change... one moment...

[15:42] <Ulti> but yeah I haven't done a completely clean build

[15:42] <btyler> building master/master/nom r-m on 10.9.4, results in a bit

[15:42] <Ven> while I think about it... jnthn++'s done some web, now :P

[15:43] <[Coke]> crappity. "that couldn't possible be..." "oh, yes, it is"

[15:43] <[Coke]> my bad.

[15:43] <Ulti> fancy web too jnthn++

[15:43] <Ulti> where bootstrap is always fancy enough

[15:43] <timotimo> %)

[15:44] <[Coke]> m: multi infix:<===>(NaN:D, NaN:D) { True } ; say Num === Num

[15:44] <camelia> rakudo-moar 5dd10b: OUTPUT«===SORRY!===␤Cannot invoke this object (REPR: P6opaque, cs = 0)␤»

[15:44] <donaldh> yeah, jnthn++ didn't just write a profiler. He polished its UI too.

[15:44] <[Coke]> masak, rakudobug? 

[15:44] <Ulti> im tempted to have a play and see if I can do something for the call graph in d3

[15:45] <gtodd> re: <&foo> is qw[ &foo ]  so we use [[&foo]]  ... I wonder if it is it a workaround or spec'ed in stone ... :) anyway thanks for the examples and explanation

[15:45] <gtodd> psch: ^^

[15:45] <donaldh> Ulti: that's what I was thinking too. I've wanted to write a d3 call profile graph for a while but just not made the time.

[15:46] <gtodd> Ulti: !! nice :)

[15:46] <Ven> [Coke]: didn't that just got fixed?

[15:47] <Ulti> hmm maybe some form of sequence plot would be good

[15:47] <donaldh> wow, moar is getting fast. I've not done  moar nqp / rakudo build for a while.

[15:48] <timotimo> that's been kind of a focus recently :)

[15:48] <donaldh> :D

[15:49] <psch> gtodd: the [] for qw can be anything brackety except parens

[15:49] <timotimo> better build times and spectest times would increase developer satisfaction and turn-around times, was the thought (speculation on my part)

[15:49] <psch> gtodd: it's just that < > is q:words{ }

[15:49] <Ulti> donaldh: something like this might work if it folded out and zoomed http://greencracker.net/?p=1685

[15:49] <donaldh> Well that's why I'm desperate to improve JVM backend in that regard.

[15:50] <psch> i'm fairly sure that < > doing word quoting is not really up for debate, but i'm not that involved in writing the spec, only a bit in implementing it

[15:52] <psch> gtodd: http://perlcabal.org/syn/S02.html#Angle_quotes_%28quote_words%29

[15:53] <psch> special casing <&func> as infix and keeping < > as qw// seems really headache-y, in any case, so the latter would likely have to go

[15:54] <gtodd> right

[15:55] *** biff_512 left
[15:56] <timotimo> donaldh: and your contributions are definitely appreciated! by me at least :)

[15:57] <donaldh> with a bit of guidance from jnthn I might have another go at removing priorInvocation. It's fairly futile looking for performance improvements while that's still there.

[15:57] <timotimo> donaldh: if you're looking for something else that'd be less of a "hide and seek", you can look into what i haven't yet implemented for the BootInterop

[15:58] <timotimo> i'm pretty sure having some amazing code example that starts with "use Blah::Blubb:from<Java>" would be something that'll raise a few eyebrows

[15:58] <donaldh> yes, indeed.

[15:58] <timotimo> currently we don't have sugary invocation for overloaded methods where we'd have to inspect types

[15:59] <donaldh> Do we need some type inspection nqp primitives?

[15:59] <psch> we also have broken outers on precompiled modules that use a module below their own namespace 

[15:59] <psch> i've looked at it but i don't understand why...

[15:59] *** denis_boyun joined
[16:00] <psch> that seems like a bit of R* show stopper; URI e.g. breaks in that way

[16:01] <psch> https://gist.github.com/peschwa/e5aee72dcce9d4b60ec1 the symptoms 

[16:01] <psch> i'll better check if that's still happening though... :)

[16:03] <timotimo> donaldh: we do have istype/isint/islist/isstr/isnum/ishash

[16:03] <gtodd> donaldh: I know nothing about Java development tools and techniques but I guess in the enterprise java world there are lots of cool ways for speeding up builds etc. .?

[16:04] <donaldh> what about JVM type inspection?

[16:04] <gtodd> ..  it would be really cool if hardcore Java developers started  looking to perl6 as a go to quick scripting language :-)

[16:04] <donaldh> gtodd: It's too slow for that just now.

[16:05] <donaldh> gtodd: That is where I'd like to get to.

[16:05] <gtodd> donaldh: yeah

[16:06] <gtodd> it depends on your esthetics but I think it's nicer to look at than scala :)

[16:06] <timotimo> i know of at least one person who says java people would look to jython to write test code ...

[16:06] <timotimo> but that was said like 3 or 4 years ago

[16:06] <Ulti> yeah if the whole of the Java API was easily available from Perl 6 that would make it attractive to Java types desperate to write equally verbose code in Perl :/

[16:06] <donaldh> $dayjob is quite a conservative java house. i.e. no scala or clojure or anything.

[16:07] <donaldh> I can envisage using Perl 6 to compose new things out of existing Java libraries.

[16:07] <gtodd> donaldh: scala sure starts up fast compared to perl6-j but it doesn't seem to build must faster 

[16:07] <gtodd> donaldh: cool 

[16:08] <donaldh> And using Perl 6 for things that Java sucks at like writing parsers.

[16:08] <gtodd> donaldh: Grammars, tests, ... ?

[16:08] <donaldh> yeah

[16:09] <gtodd> hmm could one use NativeCall ?

[16:10] <gtodd> I guess if you're inside the JVM the Java API is what people want to be able to access ...

[16:11] <gtodd>  I guess scala clojure do that nicely

[16:11] <donaldh> That's what timotimo's BootInterop does.

[16:11] <donaldh> It's just that we don't have nice method signature sugar. You need to use JVM name mangling to form the function signatures.

[16:13] <timotimo> it's not "timotimo's bootinterop" :)

[16:13] <donaldh> oh, apologies.

[16:14] <timotimo> sorear started it, jnthn continued working on it and i added a bit more stuff

[16:14] <gtodd> nicely volunteered ?

[16:15] <Ven> clojure's JNI lib is still a bit better, btw :P

[16:16] <donaldh> I think we're using JNA for C native calling.

[16:17] <colomon>  Huh.  Just looked at the allocations for ABC.

[16:17] <donaldh> lots?

[16:17] <timotimo> loads and loads of BootArray?

[16:17] <colomon> ABC::Grammar is being allocated 97,544 times reading a 7335 byte file.  That seems very, very wrong.

[16:18] <colomon> parsing, not reading.

[16:18] <timotimo> one instance gets allocated for every cursor we build

[16:18] <timotimo> if the number appears too high, it may be due to too much backtracking perhaps?

[16:18] <colomon> that still seems very high, doesn't it?

[16:18] <colomon> could be, I doubt the grammar is optimized

[16:18] <timotimo> possibly

[16:18] <timotimo> well, we do have a grammar optimizer :P

[16:19] <timotimo> but it doesn't do terribly much yet

[16:21] *** FROGGS[mobile] joined
[16:22] <psch> alright, apparently that was one of those rare cases of "ignore it and it goes away" 

[16:22] *** klaas-janstol left
[16:22] <psch> (whoever fixed the precompiled-modules-on-jvm breakage)++

[16:22] *** hoelzro left
[16:23] *** hoelzro joined
[16:28] <donaldh> decommute&

[16:28] *** donaldh left
[16:31] *** PotatoGim_Home joined
[16:36] <[Coke]> ven: that one bug was fixed, but this regressed:

[16:36] <[Coke]> r: say Num===Num

[16:36] <camelia> rakudo-jvm 60cd9d: OUTPUT«(timeout)»

[16:36] <camelia> ..rakudo-{parrot,moar} 60cd9d: OUTPUT«True␤»

[16:36] <[Coke]> ... dafuq?

[16:37] <moritz> anythin' wrong with it?

[16:37] *** PotatoGim_Home left
[16:37] <[Coke]> ah, missed that hoelzro++ already fixed the bug he reported.

[16:38] <dalek> rakudo/nom: 5bd2d48 | coke++ | docs/release_guide.pod:

[16:38] <dalek> rakudo/nom: minor relguide updates

[16:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5bd2d48eee

[16:41] *** Akagi201 left
[16:41] <dalek> rakudo-star-daily: 9c78db0 | coke++ | log/ (14 files):

[16:41] <dalek> rakudo-star-daily: today (automated commit)

[16:41] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/9c78db08e2

[16:41] <dalek> perl6-roast-data: a072123 | coke++ | / (6 files):

[16:41] <dalek> perl6-roast-data: today (automated commit)

[16:41] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/a072123173

[16:41] *** dayangkun left
[16:41] *** Akagi201 joined
[16:41] <[Coke]> moar, parrot, moar-jit have clean spectest runs. jvm failing 1 test.

[16:43] <[Coke]> fudged a lot of stuff yesterday; LHF - pick a file with a rakudo fudge that doesn't mention a ticket, and open a ticket pointing back at the test explaning what the symptom is.

[16:43] <[Coke]> (then update the fudge marker to refer to RT #whatever)

[16:43] *** Rotwang joined
[16:46] *** Akagi201 left
[16:50] <[Coke]> r: perl6: sub foo { my $s; for 1..3 { $s += $_ } } ; say foo()

[16:50] <[Coke]> perl6: sub foo { my $s; for 1..3 { $s += $_ } } ; say foo()

[16:50] <camelia> rakudo-{parrot,jvm,moar} 60cd9d: OUTPUT«Nil␤»

[16:50] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«Use of uninitialized value in numeric context␤  at /home/p6eval/niecza/lib/CORE.setting line 1389 (warn @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 301 (Any.Numeric @ 8) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/tmpfile line…»

[16:53] <[Coke]> m: say

[16:53] <camelia> rakudo-moar 60cd9d: OUTPUT«␤»

[16:53] <[Coke]> m: ord

[16:53] <camelia> rakudo-moar 60cd9d: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/kOMsz9M_DX␤Calling 'ord' requires arguments (if you meant to operate on $_, please use .ord or use an explicit invocant or argument)␤    Expected: :(Cool $s)␤at /tmp/kOMsz9M_DX:1␤------> [3…»

[16:54] *** Ven left
[16:56] *** treehug88 joined
[16:56] * TimToady enteres a Warming state

[16:56] <yoleaux> 14:45Z <timotimo> TimToady: do you know something about the status of perl6/rc-forest-fire in perl6-bench? i thought it was supposed to have a "warming" state

[16:56] *** kaleem joined
[16:56] * [Coke] tries to figure out how ord does that.

[16:57] <TimToady> timotimo: perl6-bench still has the old one because it exercises the optimizer so hard :)

[16:57] <TimToady> or doesn't yet, as the case may be

[17:00] <[Coke]> m: say ( { 1 + 1 }, { 2 + 2 } ).>>.()

[17:00] <camelia> rakudo-moar 60cd9d: OUTPUT«2 4␤»

[17:02] *** kaare_ left
[17:03] *** Ven joined
[17:04] *** ajr_ left
[17:04] <Ven> [Coke]: I was indeed talking about hoelzro++'s fix ;)

[17:04] *** pecastro left
[17:11] *** denis_boyun left
[17:13] *** kaleem left
[17:13] *** telex left
[17:14] *** telex joined
[17:20] *** grettis joined
[17:25] *** hoelzro_phone joined
[17:27] *** hoelzro_phone left
[17:27] *** hoelzro_phone joined
[17:28] *** hoelzro_phone left
[17:28] * Ven looks at his slide saying "rakudo-js (sadly abandoned)" thinking he's wrong now o/

[17:28] <Ven> (being wrong)++

[17:28] *** hoelzro_phone joined
[17:34] <TimToady> Progress depends on being wrong frequently, but not always.  :)

[17:35] <TimToady> This is why most managers hate progress, though there are two different failure modes here.

[17:36] <TimToady> ...named "never" and "always"...

[17:37] <timotimo> TimToady: do you want to figure out why the version perl6-bench has doesn't spread fires?

[17:40] <TimToady> oh, that's a bug I fixed at some point; something to do with losing the identity of the neighbors through an assignment rather than a binding, I think

[17:41] <TimToady> since it precalculates all the neighbors by reference, it has to make sure the main array continues to refer to those same containers

[17:41] <TimToady> otherwise you're always checking your original unburning neighbors, not the currently burning ones

[17:42] *** Ven left
[17:42] * TimToady is trying to remember how to fix it

[17:43] <TimToady> unfortunately the current RC entry is the Warming algorithm

[17:51] <TimToady> and I don't really see offhand where the problem is; it copies the state back into @!grid[$i][$j], so it should retain the identity of the container in the step function

[17:58] <TimToady> maybe that's why I changed the algo, because I couldn't figure out why this one didn't work anymore...

[18:12] <TimToady> the problem seems to be that all the neighborhoods end up with the same list, so something is getting reused that shouldn't

[18:16] *** Ven joined
[18:21] <TimToady> but if I fix that, it still doesn't work :(

[18:30] *** Akagi201 joined
[18:30] <TimToady> I suspect the problem is take-rw being busted

[18:31] <TimToady> I know how to work around that now, so maybe I'll just do that for now

[18:32] *** BizarreCake joined
[18:35] *** Akagi201 left
[18:37] <dalek> perl6-bench: c5a7716 | TimToady++ | perl6/rc-forest-fire:

[18:37] <dalek> perl6-bench: make forest fire propagate

[18:37] <dalek> perl6-bench: 

[18:37] <dalek> perl6-bench: work around an apparent bug in take-rw

[18:37] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/c5a7716719

[18:38] <timotimo> do we test take-rw in spectests much?

[18:39] <TimToady> dunno

[18:39] <timotimo> hm.

[18:40] <TimToady> m: my $x = 42; my $y := (gather take-rw $x)[0]; $y = 43; say $x;

[18:40] <camelia> rakudo-moar 5bd2d4: OUTPUT«43␤»

[18:40] <TimToady> well, that works

[18:42] <TimToady> m: my $x = 42; my @y := gather take-rw $x; @y[0] = 43; say $x;

[18:42] <camelia> rakudo-moar 5bd2d4: OUTPUT«43␤»

[18:42] <TimToady> that works too, hmm

[18:44] *** guru joined
[18:44] *** guru is now known as Guest42167

[18:45] *** Guest42167 is now known as ajr_

[18:49] <timotimo> RT #77334 is probably due to "for" no longer returning values if it's the last statement in a function

[18:49] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=77334

[18:49] <timotimo> r: sub foo { my $s; do for 1..3 { $s += $_ } } ; say foo()

[18:49] <camelia> rakudo-jvm 5bd2d4: OUTPUT«(timeout)»

[18:49] <camelia> ..rakudo-{parrot,moar} 5bd2d4: OUTPUT«6 6 6␤»

[18:50] <TimToady> that's just aliasing

[18:51] <TimToady> r: sub foo { my $s; do for 1..3 { nqp::decont($s += $_) } } ; say foo()

[18:51] <camelia> rakudo-{parrot,jvm,moar} 5bd2d4: OUTPUT«1 3 6␤»

[18:51] <TimToady> r: sub foo { my $s; do for 1..3 { +($s += $_) } } ; say foo()

[18:51] <camelia> rakudo-{parrot,jvm,moar} 5bd2d4: OUTPUT«1 3 6␤»

[18:52] <TimToady> but yeah, needs the do there

[18:54] <TimToady> maybe we should have a value() function or some such

[18:55] <TimToady> nqp::decont is a bit unwieldy

[18:56] <TimToady> now I'm wondering whether :kv should be called :kc if it returns the containers

[18:56] <TimToady> and :kv if it deconts

[18:58] <TimToady> it's always been kind of a pity that var and val start with the same letter...

[19:01] <FROGGS> hehe

[19:02] <timotimo> νal and var? :)

[19:03] <geekosaur> sounds like an 80s primetime soap opera to me :p

[19:06] <FROGGS> that --profile is so awesome!

[19:06] <TimToady> .u ν

[19:06] <yoleaux> U+03BD GREEK SMALL LETTER NU [Ll] (ν)

[19:06] *** pecastro joined
[19:17] *** klaas-janstol joined
[19:25] *** hoelzro_phone left
[19:25] *** hoelzro_phone joined
[19:31] *** Ven left
[19:31] *** Akagi201 joined
[19:31] *** darutoko left
[19:33] *** darutoko joined
[19:33] *** hoelzro_phone left
[19:34] *** Ven joined
[19:35] *** Akagi201 left
[19:36] *** darutoko left
[19:46] <lizmat> m: say Num === Num

[19:46] <camelia> rakudo-moar 5bd2d4: OUTPUT«True␤»

[19:48] <masak> the way forward with macros got quite a bit clearer during the attendees' dinner.

[19:48] <lizmat> m: say $*PERL.compiler.version

[19:48] <camelia> rakudo-moar 5bd2d4: OUTPUT«v2014.8.4.g.5.bd.2.d.48␤»

[19:49] <masak> the missing piece that has now fallen into place (and there will be a blog post about this at some point) is that no, we're not going with QAST as the syntax-builder API.

[19:49] <masak> we're going with something that's a facade of that, and a good bit above that in abstraction.

[19:50] <masak> as a first approximation, for every syntactic construct in the STD.pm6 grammar, there will be some type in this API.

[19:50] <masak> (hi #perl6)

[19:50] <TimToady> yeah, QAST actually starts cheating pretty early :)

[19:52] <masak> the winning argument for me was that a macro author doesn't "think" in QAST. it's way too low-level.

[19:52] <masak> a macro author thinks in the primitives of individual language constructs.

[19:52] <TimToady> and new slangoids get new types somehow

[19:53] <masak> yep.

[19:53] <masak> yes, the whole API should be written with extensibility in mind.

[19:53] <TimToady> so it's not a Quasi AST :)

[19:53] <FROGGS> hmmm, I think I have to see it... can't imagine what you have in mind

[19:53] <TimToady> it's an Offical AST, one before 'P' :)

[19:53] <masak> and the actions need to be in on this too -- they'll probably end up generating more PST than QAST.

[19:54] * gtodd wonders if anyone has written lectured or blogged about macros 

[19:54] <masak> gtodd: blogged.

[19:54] <TimToady> never

[19:54] <TimToady> oooh, you mean Perl macros...

[19:55] <gtodd> heh http://perl6advent.wordpress.com/2012/12/23/day-23-macros/

[19:55] <masak> gtodd: http://strangelyconsistent.org/blog/macros-progress-report-a-bit-of-d1 http://strangelyconsistent.org/blog/macros-progress-report-interesting-things http://strangelyconsistent.org/blog/macros-progress-report-d1-merged http://strangelyconsistent.org/blog/macros-progress-report-quantum-yak-shaving http://strangelyconsistent.org/blog/macros-progress-report-d2-merged http://strangelyconsistent.org/blog/lexpads-and-why-roles-need-fixups

[19:55] <gtodd> hehehe

[19:56] <Ven> masak: it,s funny how you say that while I'm doing some Common Lisp trickery :)

[19:57] <sergot> evening o/

[19:57] <masak> [Coke]: https://rt.perl.org/Ticket/Display.html?id=77334 is not valid any more, at least not with that kind of for loop.

[19:57] <sergot> masak++: nice lighting talk :)

[19:57] <masak> m: sub foo { my $s; ($s += $_ for 1..3) } ; say foo()

[19:57] <camelia> rakudo-moar 5bd2d4: OUTPUT«6 6 6␤»

[19:57] <gtodd> .. macros from the Lisp gods of yore  ...

[19:57] <sergot> the last one I could have seen

[19:58] <masak> [Coke]: need to do it that way instead :)

[19:58] <masak> sergot: thanks :)

[19:58] <masak> sergot: "last one I could see", I think you mean.

[19:58] <Ven> well, I definitely think scheme/racket templates are easier than CL macros.

[19:58] <masak> Ven: I will need to have a look at those. I glanced at them when last we spoke about Racket.

[19:58] <sergot> uh, yeah, this is it :)

[19:59] <Ven> masak: I don't know if I still have my little examples...

[19:59] <Ven> the guide has a lot of template macros tho, look at them :)

[19:59] <Ven> even macro-generating macros using templates

[20:00] * Ven is probably going back to racket after this CL project...

[20:01] <timotimo> masak: the stream stopped right when you were explaining the last bit and started the demonstration and i only got it f5'd when you were about done ;(

[20:02] <Ven> oooh, I didn't know masak was talking :(

[20:02] <masak> timotimo: well, what can I say. that was a once-in-a-lifetime opportunity.

[20:02] *** BizarreCake left
[20:02] <timotimo> ;_;

[20:02] * masak hugs timotimo 

[20:02] <timotimo> obviously the code has been pushed onto a memory-hole?

[20:03] <masak> what, I should push it? that insignificant bit of code?

[20:03] <masak> hokay.

[20:03] <timotimo> i'd like to see it locally, too!

[20:03] <timotimo> (and also feed it into the profiler

[20:03] <timotimo> of course :)  )

[20:03] <flussence> profile all the things!

[20:03] <masak> timotimo: https://github.com/masak/camel-butterfly

[20:04] <masak> timotimo: two things:

[20:04] <masak> timotimo: you should probably start by loading https://github.com/masak/camel-butterfly/blob/master/canvas.html into a browser.

[20:04] <Ven> masak: what was your talk about? any link?

[20:04] <Ven> I didn't see it somehow (on the schedule) :o)

[20:04] <masak> timotimo: also, https://github.com/masak/camel-butterfly/blob/master/minimize currently blows up spesh, but it runs under `export MVM_SPESH_OSR_DISABLE=1`

[20:05] <sergot> how does the profiler work? it throws "no file/dir" here

[20:05] <masak> Ven: http://act.yapc.eu/ye2014/talk/5678

[20:06] <Ven> ooh, it's a lightning one, that's why

[20:07] <masak> yeah, the real talk is on Sunday.

[20:08] <timotimo> i may miss the live version of that! :o

[20:09] <japhb> jnthn, masak: Slide links, pretty please?  For those of us in a timezone where "live stream" is not quite so easy ....

[20:09] <yoleaux> 13:38Z <timotimo> japhb: it'll now be very interesting to be able to run benchmarks with nqp-m --profile (and perl6 --profile later when it works) with a given (or default (big)) work load

[20:09] <timotimo> maybe i can streamdump it

[20:09] <japhb> Um ... methinks I can't wait to see those slides now.  :-)

[20:09] <timotimo> yep.

[20:10] <timotimo> big parts were just showing something in a browser ... hint hint :)

[20:10] <sergot> Oh, it doesn't work for perl6, rigth. so my previous question is expired :))

[20:10] <timotimo> it does

[20:10] <masak> japhb: no slides for my lightning talk. just pure Perl 6.

[20:10] <timotimo> since nqp learnt how to install the template for the profiler

[20:10] <masak> japhb: you really should get ahold of jnthn's slides, though.

[20:11] <masak> japhb: I don't think they're online yet.

[20:11] <timotimo> AFK

[20:13] <japhb> When you see him, tell him I will be standing on the other side of the planet with arms akimbo tapping my foot impatiently until he uploads his slides.  ;-)

[20:14] <masak> well, I left him in a bar, and won't be seeing him until tomorrow.

[20:14] <japhb> Awww

[20:14] <masak> so, you'll have to tap away in the meantime...

[20:15] <japhb> My ankle will get really tired.  :-P

[20:18] <masak> practice makes perfect.

[20:18] <TimToady> his ankle will get perfectly tired

[20:19] * masak .oO( tapping corrupts. perfect tapping corrupts perfectly. )

[20:22] <lizmat> hmmm.... must be a double entendre in here, which involves supplies of beer

[20:24] * lizmat is clearly too tired to make funny jokes

[20:25] <lizmat> sleep&

[20:27] *** Ven left
[20:30] <dalek> perl6-bench: 3b60830 | (Geoffrey Broadwell)++ | perl6/rc-forest-fire:

[20:30] <dalek> perl6-bench: Untabify perl6/rc-forest-fire

[20:30] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/3b60830158

[20:30] <japhb> TimToady: Thanks for the rc-forest-fire fix!  :-)

[20:32] *** Akagi201 joined
[20:33] *** Ven joined
[20:34] <masak> trees burning properly now?

[20:34] <Ven> masak: https://github.com/Nami-Doc/readlist.cl/blob/master/readlist.lisp#L39 this is what racket macros

[20:34] <Ven> *don't* look like.

[20:34] <Ven> I really, really, really like scheme/racket by-default hygiene...

[20:35] <masak> Ven: got it.

[20:36] <Ven> masak: (just linking it because I just finished it, and it kinda looks cool. First time I do some Common Lisp o/)

[20:36] <Ven> (though a bit unwiedly)

[20:36] <gtodd> so inside a macro  one may encounter ...  "unquotes"  {{{ say "dread me?" }}}

[20:36] *** Akagi201 left
[20:36] *** anaeem1 joined
[20:37] <Ven> gtodd: everywhere.

[20:37] <gtodd> which seems to make sense in that it looks like some kind of template syntax  ... 

[20:37] <Ven> less with scheme's templates, though.

[20:38] <gtodd> Ven: yeah the idea of macros seems pretty standard in "functional" langugage ...

[20:38] <Ven> no, not really

[20:39] <Ven> only a few of them. Mostly because ... There aren't many homoiconic languages

[20:39] <Ven> (common lisp is far from being functional)

[20:40] <dalek> rakudo/nom: e950e75 | TimToady++ | / (2 files):

[20:40] <dalek> rakudo/nom: move LOLLY hack from parser down into harness

[20:40] <dalek> rakudo/nom: 

[20:40] <dalek> rakudo/nom: This causes our new version to default to LOLLY without having to set

[20:40] <dalek> rakudo/nom: LOLLY=1, but the test harness now forces LOLLY=1 for fudging, so we're

[20:40] <dalek> rakudo/nom: testing against the new semantics.  At the same time, the latest tests

[20:40] <dalek> rakudo/nom: can still be used by old versions for now if that is desired, since

[20:40] <dalek> rakudo/nom: the harness is version specific and the old harness doesn't set LOLLY.

[20:41] <dalek> rakudo/nom: In a month or so we can delete all mention of LOLLY from the harness

[20:41] <dalek> rakudo/nom: and from roast.  But no harm if we forget. :)

[20:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e950e75441

[20:41] <Ven> haskell has template haskell, but that's string programming

[20:41] <gtodd> I thought I read that the unquote part of perl6 macros was going to go away but aren't macros and some kind of unquoting tied together somehow?

[20:41] <gtodd> oh

[20:42] <TimToady> we just want to revise the {{{}}} syntax

[20:42] <TimToady> it's ugly as a sinful coyote.

[20:42] <gtodd> Ven:  ahh so it can be done different ways under the hood ...

[20:42] <Ven> and hard to type :D

[20:43] <TimToady> well, I care more about hard to read

[20:43] <Ven> gtodd: depends on the language. Common Lisp macros, for one, are really "only" quoting/unquoting. Full power, but full pain.

[20:43] <gtodd> TimToady: OK :-D  not sure why I thought {{{}}} looked normalish

[20:43] <masak> 'night, #perl6

[20:43] <FROGGS> gnight masak 

[20:43] <TimToady> o/

[20:43] <Ven> Scheme offers an alternative, the templates, where you have patterns etc. Deals with repeating, replacing, and hygiene for you

[20:43] <gtodd> sleep well

[20:43] * Ven kinda wishes he was at sofia right now... :)

[20:44] * TimToady was supposed to be there, but became a bubblehead.

[20:44] *** BenGoldberg joined
[20:44] <gtodd> Ven: but it is not like just running eval or perl5 code filtering

[20:45] <Ven> no, those are c-like macros

[20:45] *** SamuraiJack joined
[20:45] <Ven> string programming, as I said :)

[20:45] <TimToady> unclean!

[20:46] <gtodd> ok good so perl6 is going to do the real best thing :-)  in the tradition of excellence it has established :-)

[20:46] <Ven> I sure hope so :P.

[20:46] <flussence> maybe we should have ｢...｣ for unquotes the way we allow «...» for <<...>> :)

[20:46] <TimToady> can't, that's a real thing already

[20:46] <flussence> it is? oh nuts.

[20:46] <TimToady> m: say ｢...｣

[20:46] <camelia> rakudo-moar 5bd2d4: OUTPUT«...␤»

[20:47] <TimToady> the short form of Q//

[20:47] <Ven> please, least utf8 :(

[20:47] <gtodd> are those katakana "quotes" ?  

[20:47] <flussence> (kinda neat that that's there, though)

[20:47] <Ven> .u ｢

[20:47] <yoleaux> U+FF62 HALFWIDTH LEFT CORNER BRACKET [Ps] (｢)

[20:47] <TimToady> oh, by all means, we want to make it hard to write macros, because people *will* abuse them. :)

[20:47] <TimToady> yes, the halfwidth ones

[20:47] <TimToady> so very rarely used in real text :)

[20:47] <Ven> don't make it hard, make it thoughtful :)

[20:48] <gtodd> Ven: but there's some cool IPA Cherokee and Canadian Syllabics  characters that would set perl6 appart :-)

[20:48] <TimToady> well, I was thinking something in the latin-1 range

[20:48] <Ven> It's just so hard for me to type... Not worth the trouble.

[20:48] <TimToady> at the time I was considering ¤

[20:48] <TimToady> which is just COMPOSE-ox

[20:48] <flussence> along that line of thinking, those're a bad choice anyway since they're semi-easy-to-get-at (via «say 'a' ~~ /./»)

[20:48] <Ven> I was doing some agda last time, and it was really painful having to type \lambda \r \all etc for all its utf8-ness

[20:49] <TimToady> so get a real keyboard

[20:49] <Ven> you mean an APL keyboard? That's not a real keyboard.

[20:49] <TimToady> actually, just define yourself a compose key

[20:49] <TimToady> or use an editor with those chars

[20:49] <gtodd> haha or several 

[20:49] <TimToady> like in vi, « is just ^K<<

[20:49] <Ven> don't want to. It's painful. I shouldn't have to do painful stuff

[20:50] <TimToady> yes, you should!!!!

[20:50] <TimToady> it's good for your immortal soul!

[20:50] *** kuroseki is now known as Salai

[20:50] <Ven> no it's not, it just makes me want to use better tools ;)

[20:50] <TimToady> anyway, huffman coding says some things have to be hard

[20:50] <Ven> perl6 doesn't want me to suffer because of how I think, that's why I like it.

[20:50] <TimToady> thre are no better tools :)

[20:50] <Ven> than perl6?

[20:51] <TimToady> waterbed theory says if you huffmanize differently, you just make other things hard instead :)

[20:51] <TimToady> anyway, if you want hard, invent a time machine and go install some more characters into ASCII :)

[20:52] <Ven> "I don't want to argue about this" is another way of saying what you're saying

[20:52] <TimToady> or just teach everyone to use a language that makes everything else hard instead, and like it :)

[20:52] <TimToady> what, I'm arguing, or didn't you notice :)

[20:52] <gtodd> as long as comes with a script or instructions to get those extra characters working in an xterm with vim or emacs on some old version of openbsd ... it'd be cool  :-)

[20:53] <pmurias> Ven: how is template haskell string programming?

[20:53] <TimToady> basically, in another ten years you'll be dictating your program, and it won't matter

[20:53] <flussence> (space cadet keyboards are obsolete these days anyway, since Xorg has the useful/Eldritch-horror ability to differentiate between altgr-shift and shift-altgr...)

[20:53] <Ven> pmurias: the types are terrible

[20:54] <TimToady> anyway, we always provide ugly ASCII workarounds anyway, like the set operators

[20:55] <TimToady> so maybe if we use ¤ we also reserve XO or some such

[20:55] <Ven> TimToady: well, it's your language anyway. You're free to pick any kind of symbol you like. I'm free to disagree with that pick ;). (I disagree with several other things in perl6 anyway)

[20:55] * TimToady oh noes!

[20:56] <pmurias> TimToady: having a concise/good way to quasi quote languages other then perl6 would be greate

[20:56] <TimToady> let me guess, « and », and ∪ and ∩  :)

[20:57] <TimToady> pmurias: that's not the Perl 6 view; the Perl 6 view is that all these other languages are merely dialects of Perl 6, so no problem :)

[20:58] <geekosaur> ␁␄ :p

[20:58] *** zoosha left
[20:58] <Ven> .u ␁

[20:58] <yoleaux> U+2401 SYMBOL FOR START OF HEADING [So] (␁)

[20:58] <FROGGS> do we need different kinds of unquotes? if yes, then we could do it like the assertions in regexes and combine something...

[20:58] * TimToady suspect the APL dialect will use a few more Unicode characters :)

[20:59] *** klaas-janstol left
[20:59] <TimToady> we'll certainly make it as productive as it needs to be

[20:59] <TimToady> at one point we were going to include the syntactic category, but that might come for free with the type of the object

[20:59] <TimToady> depending on what masak++'s AST ends up looking like

[20:59] <pmurias> quasi:lang(Ruby) {...} doesn't seem very concise

[21:00] <Ven> pmurias: but macros will get you there :P

[21:00] <Ven> I don't even really mind these symbols now that I have this comp, but old-me-on-windows would be screaming inside :P

[21:00] <Ven> :P

[21:00] <Ven> wow, that's a lot of :P.

[21:01] <TimToady> use ruby; ... quasi { ruby { } }

[21:01] <TimToady> jsut as you might say ruby { } in normal code after you've pulled it in with use

[21:02] <BenGoldberg> .u ␄

[21:02] <yoleaux> U+2404 SYMBOL FOR END OF TRANSMISSION [So] (␄)

[21:02] <TimToady> or whatever you choose for the language shifter; it can be a single Unicode character if you like :)

[21:02] <pmurias> quasi { ruby {...}} seems even worse than quasi:lang(Ruby) {...}

[21:03] <TimToady> you're only writing this macro once, how hard to you have to try to golf it?

[21:04] <TimToady> and if it's that hard, write your own macro to implement your own quasi-to-ruby and call it *anything*

[21:04] <TimToady> there are no limits to what you can do

[21:05] <TimToady> we intend to give you all the tools to nuke yourself in everyone's feet, if you so choose.

[21:05] <TimToady> but...don't do that :)

[21:05] <Ven> we shall (:

[21:06] <TimToady> the aim is to give a perfectly extensible language, and then give sane people very little motivation for extending it by including everything already...but I reconize the joys of insanity as well

[21:06] <TimToady> *cog

[21:07] <TimToady> well, I had a short night last night for some reason, and *now* I don't want to argue about it :)

[21:07] * TimToady -> nap

[21:16] *** gmunoz joined
[21:16] *** SHODAN joined
[21:16] *** SHODAN left
[21:16] *** SHODAN joined
[21:24] *** pecastro left
[21:30] *** biff_512 joined
[21:33] *** Akagi201 joined
[21:33] *** SamuraiJack left
[21:35] *** biff_512 left
[21:37] *** Akagi201 left
[21:38] *** avuserow left
[21:39] *** Ven left
[21:39] *** Alula_ left
[21:45] <timotimo> japhb: all you need to do is --profile after perl6 or nqp and it'll tell you what you have to look out for

[21:45] <timotimo> oh, i wasn't scrolled down

[21:47] *** avuserow joined
[21:48] *** prevost left
[21:57] *** Alula_ joined
[21:58] *** anaeem1 left
[22:08] *** Alula_ left
[22:20] *** gfldex joined
[22:21] *** Alula_ joined
[22:31] *** Psyche^_ joined
[22:32] *** xenoterracide joined
[22:33] <TimToady> m: say (1,2; 3,4).perl

[22:33] <camelia> rakudo-moar e950e7: OUTPUT«lol($(1, 2), $(3, 4))␤»

[22:33] *** Akagi201 joined
[22:33] <TimToady> there we are

[22:35] *** Psyche^ left
[22:35] <TimToady> though now we should just teach that to output (1,2; 3,4)

[22:38] *** Akagi201 left
[22:38] *** ajr_ left
[22:43] <jnthn> Slides from my talk now at http://jnthn.net/papers/2014-yapceu-performance.pdf

[22:43] <jnthn> japhb: ^^

[22:45] <TimToady> jnthn++ for 0..1000000 :)

[22:47] <TimToady> m: say [1,2; 3,4].perl

[22:47] <camelia> rakudo-moar e950e7: OUTPUT«[$(1, 2), $(3, 4)]␤»

[22:57] *** xragnar_ joined
[22:57] *** xragnar left
[22:57] *** xragnar_ is now known as xragnar

[23:03] *** kurahaupo left
[23:11] *** Akagi201 joined
[23:14] *** spider-mario left
[23:16] *** Akagi201 left
[23:19] *** biff_512 joined
[23:24] *** biff_512 left
[23:27] *** Mouq joined
[23:38] <dalek> rakudo/nom: c793d80 | TimToady++ | src/core/ (2 files):

[23:38] <dalek> rakudo/nom: use lollipop syntax for .perl where appropriate

[23:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c793d80233

