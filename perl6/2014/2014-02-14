[00:08] *** rurban left
[00:10] *** virtualsue left
[00:18] * jnthn is tired...

[00:18] <jnthn> Will look some more tomorrow

[00:18] <jnthn> 'night

[00:25] *** ens left
[00:25] *** ens joined
[00:28] <hoelzro> night

[00:31] *** rindolf joined
[00:32] *** panchiniak left
[00:33] <lue> I still can't install panda at all :(  Cannot call 'postcircumfix:<{ }>'; none of these signatures match:

[00:48] *** xenoterracide left
[00:51] *** thou left
[01:00] *** dmol left
[01:03] *** jnap left
[01:08] *** xenoterracide joined
[01:09] *** rurban joined
[01:13] *** btyler left
[01:25] *** tgg joined
[01:25] *** tgg left
[01:34] *** jnap joined
[01:37] *** kbaker joined
[01:45] *** kbaker left
[01:52] *** woosley joined
[01:58] *** jnap left
[02:00] *** lizmat joined
[02:00] *** lizmat left
[02:05] *** eternaleye left
[02:14] *** johnmilton left
[02:27] *** logie left
[02:41] *** rurban left
[02:50] *** FROGGS_ joined
[02:51] *** ens is now known as SELL

[02:52] *** Sqirrel_ left
[02:52] *** Sqirrel joined
[02:54] *** FROGGS left
[03:03] <japhb> timotimo: https://gist.github.com/timo/544d3d75bd92932e635d has entered the realm of pure unadulterated awesome.  Now do it for gen2.  ;-)

[03:04] <japhb> hoelzro: https://gist.github.com/anonymous/8982533 is also very nice to see.  Now to get it to 100% OK.  :-)

[03:06] *** SELL is now known as ens

[03:11] *** aindilis left
[03:46] *** woosley1 joined
[03:48] *** woosley left
[03:48] *** apejens joined
[03:49] *** nwc10 left
[03:49] *** nwc10 joined
[03:54] *** ens is now known as SELL

[03:59] *** rurban joined
[04:08] *** HazMat_ joined
[04:08] <raydiak> jnthn: just noticed the backlog about typed arrays from 20 hours ago...thank you for showing us how to do it properly, and I will try not to disseminate any more ignorance :)

[04:09] *** HazMat_ left
[04:12] <raydiak> s/20/19/

[04:13] *** xenoterracide left
[04:21] *** woosley1 left
[04:22] *** araujo left
[04:22] *** SamuraiJack joined
[04:23] *** eternaleye joined
[04:29] *** dayangkun left
[04:30] * timotimo has to take a break from sleeptrying

[04:35] *** woosley joined
[04:36] *** SamuraiJack left
[04:36] <TimToady> http://rosettacode.org/wiki/Parsing/Shunting-yard_algorithm#Perl_6

[04:37] <TimToady> of which the most interesting point is that it overrides the meaning of "shift" and "reduce" in an inner scope

[04:38] <timotimo> what were you thinking, overriding keywords just like that! ;)

[04:39] * TimToady blames it on the flu :)

[04:39] *** xenoterracide joined
[04:40] <TimToady> I suppose I coulda made them multis

[04:41] <timotimo> i was just about to ask for a cool implementation of wrapping a list of True/False up in a hilbert curve and displaying them with the unicode upper/lower half block + full block

[04:41] <timotimo> but then i remembered i have to do this in python

[04:41] <lue> PL/I, Perl 6, and REXX have the nicest at-a-glance outputs imo

[04:42] * TimToady bows, having considered various options

[04:42] *** dayangkun joined
[04:45] * timotimo has a sneaking suspicion that 256 buckets per page and 32 different object size buckets makes for a whole lot of untaken space

[04:47] <timotimo> i quite hope that that's the main contributor to 100 megabytes of ram for "say 1" in perl6-m

[04:47] <timotimo> because that would make for easy tuning :P

[05:03] *** SELL is now known as ens

[05:26] *** [Sno] left
[05:27] *** ponbiki_ is now known as ponbiki

[05:33] *** BenGoldberg left
[05:34] <moritz> \o

[05:34] <timotimo> o/

[05:36] *** btyler joined
[05:38] <raydiak> morning moritz

[05:47] *** kaleem joined
[05:55] <raydiak> timotimo: it's not python, but as a point of interest, there is hilbert ordering and combining multiple points into single characters in the concurrency branch of Pray

[05:56] <raydiak> it's messy for 2 or 3 different reasons, though, so "cool implementation" not included :)

[06:01] <timotimo> https://en.wikipedia.org/wiki/Hilbert_curve ← i ported xy2d from this article

[06:01] <timotimo> what can i say ... it hilberts :D

[06:03] <raydiak> timotimo: wouldn't have helped much, then...I ported from the same article...though only the d2xy, now that I think about it

[06:03] <timotimo> i must admit, this is darn pretty

[06:04] <raydiak> what are you drawing, anyway?

[06:04] <timotimo> https://gist.github.com/timo/1f4fa4bc76b270829382

[06:04] <timotimo> how much of the gen2 pages are used vs allocated

[06:05] <timotimo> kind of not so nice that it takes up so much space vertically if there's only one page for all the size buckets

[06:05] <timotimo> but oh well

[06:05] <raydiak> ah, right, the heap analyzer

[06:05] <timotimo> i ought to run a longer program that actually punches a few holes in there

[06:06] <raydiak> Pray is great for punching holes in things :P

[06:06] <timotimo> perl6-m doesn't do permutations yet :(

[06:06] <timotimo> r: say [1, 2, 3, 4].permutations()

[06:07] <camelia> rakudo-moar 1ce379: OUTPUT«Cannot call 'postcircumfix:<[ ]>'; none of these signatures match:␤:(Any \SELF, int $pos)␤:(Any \SELF, int $pos, :BIND($BIND)!)␤:(Any \SELF, int $pos, Any :SINK($SINK)!, *%other)␤:(Any \SELF, int $pos, Any :delete($delete)!, *%other)␤:(Any \SELF,…»

[06:07] <camelia> ..rakudo-parrot 1ce379, rakudo-jvm 1ce379: OUTPUT«1 2 3 4 1 2 4 3 1 3 2 4 1 3 4 2 1 4 2 3 1 4 3 2 2 1 3 4 2 1 4 3 2 3 1 4 2 3 4 1 2 4 1 3 2 4 3 1 3 1 2 4 3 1 4 2 3 2 1 4 3 2 4 1 3 4 1 2 3 4 2 1 4 1 2 3 4 1 3 2 4 2 1 3 4 2 3 1 4 3 1 2 4 3 2 1␤»

[06:07] <timotimo> r: say (1, 2, 3, 4).permutations()

[06:07] <camelia> rakudo-moar 1ce379: OUTPUT«Cannot call 'postcircumfix:<[ ]>'; none of these signatures match:␤:(Any \SELF, int $pos)␤:(Any \SELF, int $pos, :BIND($BIND)!)␤:(Any \SELF, int $pos, Any :SINK($SINK)!, *%other)␤:(Any \SELF, int $pos, Any :delete($delete)!, *%other)␤:(Any \SELF,…»

[06:07] <camelia> ..rakudo-parrot 1ce379, rakudo-jvm 1ce379: OUTPUT«1 2 3 4 1 2 4 3 1 3 2 4 1 3 4 2 1 4 2 3 1 4 3 2 2 1 3 4 2 1 4 3 2 3 1 4 2 3 4 1 2 4 1 3 2 4 3 1 3 1 2 4 3 1 4 2 3 2 1 4 3 2 4 1 3 4 1 2 3 4 2 1 4 1 2 3 4 1 3 2 4 2 1 3 4 2 3 1 4 3 1 2 4 3 2 1␤»

[06:12] *** aindilis joined
[06:14] *** thou joined
[06:17] *** woosley left
[06:18] <timotimo> ████████████████

[06:18] <timotimo> ████████████████

[06:18] <timotimo> ██████▄█████████

[06:18] <timotimo> ████████████████

[06:18] <timotimo> ████████████████

[06:18] <timotimo> ████████████████

[06:18] <timotimo> ████████████████

[06:18] <timotimo> ████████████████

[06:18] <timotimo> look!

[06:18] <timotimo> a hole! :D

[06:18] <Pleiades`> I was going to interrupt it, but idk if that would be considered rude here 

[06:18] <timotimo> (and 1426 empty pages) (freelist with 1 entries) 

[06:18] <timotimo> that doesn't seem right?! o_O

[06:18] <JimmyZ> moarvm?

[06:18] <timotimo> yup

[06:21] <timotimo> those pages all seem to have been allocated. huh.

[06:22] <timotimo> hm, maybe with null pointers though

[06:23] *** [Sno] joined
[06:26] <timotimo> holy jesus, this is a HUGE free list

[06:26] *** cognominal__ left
[06:27] <timotimo> or i'm just infinilooping

[06:28] <timotimo> yup.

[06:34] <timotimo> cur_page doesn't get bumped

[06:37] <timotimo> wow.

[06:37] <timotimo> this size bucket gets quite some use out of it.

[06:49] <timotimo> https://gist.github.com/timo/1f4fa4bc76b270829382 - what sayeth you?

[06:57] *** FROGGS_ left
[07:01] *** darutoko joined
[07:03] <moritz> \o from a car

[07:03] <moritz> timotimo: did you mean "what sayeth thou?" :-)

[07:04] <moritz> high latency is annoying

[07:04] *** kaleem left
[07:27] *** fhelmberger joined
[07:34] *** btyler left
[07:48] *** woosley joined
[07:51] *** virtualsue joined
[07:52] *** FROGGS joined
[07:59] *** denis_boyun joined
[08:02] *** zakharyas joined
[08:02] *** pdcawley joined
[08:04] * timotimo resumes his sleeps

[08:05] *** cognominal joined
[08:05] *** thou left
[08:10] <tadzik> FROGGS: pong

[08:11] *** virtualsue left
[08:11] <FROGGS> tadzik: are the File::Find tests supposed to pass on windows boxes?

[08:12] <tadzik> FROGGS: I think so

[08:12] <FROGGS> because these are hardcoded to forward slashes :/

[08:13] <tadzik> oh

[08:14] <FROGGS> I am just considering making another test file for windows only, and make the current one unix only

[08:15] <tadzik> I'd rather have cross-platform paths everywhere

[08:15] <tadzik> if they're too much of a hassle, let's think how can we make them less hassl

[08:15] <FROGGS> what do you mean by cross platform paths?

[08:16] <FROGGS> you are supposed to get a lib\File back on windows instead of lib/File, no?

[08:17] <FROGGS> I mean, windows does understand forward slashes nowadays... but...

[08:25] *** dmol joined
[08:25] *** kaleem joined
[08:26] *** SamuraiJack joined
[08:26] *** mtk left
[08:28] <tadzik> I mean, stop using "path strings", use proper path objects everywhere necessary

[08:30] *** lizmat joined
[08:30] <FROGGS> well, then we should just adjust the tests to not compare against strings, no?

[08:31] <tadzik> yes

[08:31] <FROGGS> r: say so "foo/bar".IO.path ~~ "foo\\bar".IO.path

[08:31] <camelia> rakudo-parrot 1ce379, rakudo-jvm 1ce379, rakudo-moar 1ce379: OUTPUT«False␤»

[08:31] <FROGGS> :o(

[08:32] *** pecastro left
[08:34] <tadzik> perhaps we need something like https://github.com/odyniec/File-PlainPath :)

[08:34] <tadzik> otoh, we may just want it in core

[08:35] <FROGGS> I'd propose that IO::Path.ACCEPTS should compare the volume/directory/file components without caring about the path separator

[08:35] <tadzik> sounds good to me

[08:39] *** Sqirrel left
[08:40] *** kshannon_ left
[08:40] *** arnsholt joined
[08:40] <arnsholt> o/

[08:40] *** kshannon joined
[08:42] <FROGGS> moin arnsholt 

[08:43] *** kaleem left
[09:02] *** woosley left
[09:11] <arnsholt> Ooooh... it's working =D

[09:11] <arnsholt> (Sort of)

[09:12] <masak> good morning, #perl6

[09:12] <masak> Perl 6 day today! \o/

[09:12] <masak> finally!

[09:13] <nwc10> what awesomeness are you going to cook up for us?

[09:13] <nwc10> (or for yourself)

[09:13] <nwc10> or is it a surprise?

[09:14] <arnsholt> I've got callbacks returning void working to the point where I need to implement the delegation back to the NQP/Perl 6 callback function

[09:14] <masak> nwc10: 50% p6cc/t4, 50% secret project :)

[09:15] <arnsholt> Something wrong with the code generated for non-void return callbacks though

[09:18] *** SamuraiJack left
[09:23] *** woosley joined
[09:23] <arnsholt> JVM segfault! \o/

[09:24] <arnsholt> That usually means my code is at least doing *something* =D

[09:24] *** Alina-malina left
[09:29] *** aindilis left
[09:29] <FROGGS> \o/

[09:29] <FROGGS> progress++

[09:29] <FROGGS> err

[09:29] <FROGGS> arnsholt++

[09:29] <FROGGS> :o)

[09:30] *** denis_boyun left
[09:30] <tadzik> :)

[09:35] *** denis_boyun joined
[09:35] *** Alina-malina joined
[09:35] *** Alina-malina left
[09:35] *** Alina-malina joined
[09:38] <mathw> masak: secret project! Nooooo

[09:39] * mathw is too impatient for secret projects

[09:39] *** denis_boyun left
[09:40] <masak> mathw: ok, allow me to be a bit more specific.

[09:40] <masak> mathw: it's a tool for $work, that I'm writing on my spare time because I want to spring it on my colleagues.

[09:41] *** darutoko- joined
[09:43] <mathw> I hope they appreciate it then :)

[09:43] *** darutoko left
[09:44] <masak> I'm probably gonna blog about it, too.

[09:46] *** Alina-malina left
[09:46] *** Alina-malina joined
[09:47] <mathw> I wonder if I can get a job where I don't have to do .NET web development anymore

[09:49] <masak> mathw: we're hiring.

[09:49] *** nsh_ joined
[09:49] <masak> (and we're a really cool company, with two Perl 6 core devs in it.)

[09:51] <mathw> And you're in Sweden, which is slightly inconvenient

[09:51] *** nsh left
[09:51] <mathw> (not for you, obviously)

[09:53] * mathw wonders, does being in Sweden make you more cool? Probably.

[09:54] *** xenoterracide left
[09:54] *** pdcawley left
[09:54] *** pecastro joined
[09:56] *** denisboyun joined
[09:58] *** rurban left
[09:58] <masak> from the perspective of Sweden, Sweden is not that cool. unless you mean literally cool.

[09:59] *** kivutar joined
[09:59] *** woosley left
[09:59] *** pdcawley joined
[10:00] *** denis_boyun joined
[10:01] <nwc10> from the perspsective of outside Sweden, Sweden generally seems to be cool.

[10:01] *** denisboyun left
[10:03] <nwc10> although it's not actually clear what or why. :-)

[10:03] <cosimo_> well, ABBA to start with

[10:03] *** lizmat left
[10:04] <nwc10> that's almost like saying that Austria is cool because it has Franz Joseph, Sissy and Mozart

[10:04] <nwc10> which they are very big on.

[10:04] *** denis_boyun left
[10:04] <nwc10> but are a little bit history

[10:04] <cosimo_> roxette, a nice princess, cheap meat, ikea kjøttboller

[10:04] <nwc10> and very dead. Unlike the (former) members of Abba

[10:04] *** denisboyun joined
[10:05] <cosimo_> not to mention karolinska institute and chalmers

[10:06] <FROGGS> and salmiak "sweets"?

[10:06] <masak> hehe, "kjøttboller" is the Danish spelling :P

[10:06] <masak> also, salmiak totally rocks.

[10:06] <FROGGS> >.<

[10:06] <FROGGS> like roxette?

[10:07] * FROGGS hates roxette

[10:07] <cosimo_> unnskyld

[10:07] <masak> ;)

[10:07] <masak> FROGGS: I've never had a big crush on Roxette. they're OK, I guess. but nothing special.

[10:08] <FROGGS> the problem is that I was forced to hear it in my childhood

[10:08] <FROGGS> the radio stations played it like every 30mins

[10:08] *** denis_boyun joined
[10:08] <FROGGS> sleeping in my car *shudder*

[10:09] *** denisboyun left
[10:09] <jnthn> morning...ish... o/

[10:10] <FROGGS> morning jnthnish

[10:10] <FROGGS> (you are not yourself when you are hungry)

[10:10] <masak> FROGGS: yeah... "sleeping in my car" is cringeful.

[10:10] <jnthn> Well, it's more coffee that's needed...

[10:12] <FROGGS> jnthn: that is the right attitude :o)

[10:12] <FROGGS> masak: exactly ó.ò

[10:13] *** denis_boyun left
[10:14] <jnthn> Wow, those lyrics are...uh...to the point...

[10:15] <masak> and the video leaves nothing to the imagination.

[10:19] *** denisboyun joined
[10:19] *** Sqirrel joined
[10:24] *** denisboyun left
[10:24] *** nsh_ left
[10:24] *** nsh_ joined
[10:25] *** nsh_ is now known as nsh

[10:25] *** SamuraiJack joined
[10:36] *** grondilu joined
[10:37] <mathw> masak: I suspect if I actually lived in Sweden I'd quickly find out that it's not so cool as it seems from the outside.

[10:38] <masak> let's just say I seldom hear people exclaim "oh, it's so cool to live here in Sweden!" :P

[10:38] <masak> except perhaps if their basis of comparison is Syria or Somalia.

[10:40] <mathw> lots of places are better than Syria or Somalia at the moment

[10:40] <mathw> Even the parts of England currently under water

[10:41] <masak> yeah.

[10:41] <mathw> despite what our gutter press would have you believe

[10:42] <jnthn> Ugh...the English press...

[10:43] <mathw> quite

[10:43] <mathw> not my favourite part of living here

[10:43] <jnthn> Yeah, that's one thing I certainly don't miss.

[10:43] <mathw> I generally attempt to ignore it, but that's not always possible

[10:44] <mathw> And some things have to be actively countered

[10:49] *** kaleem joined
[10:50] *** kivutar left
[10:55] <tadzik> mathw: .NET? Around here, it's practically impossible to find something other than C++ :)

[11:02] <masak> tadzik: that's because Sweden has sold out to Microsoft and is their obedient lapdog.

[11:02] <tadzik> :)

[11:02] <masak> tadzik: similarly, in Norway it's mostly Java.

[11:02] <tadzik> I'd imagine Norway would sell _everything_ for some Sun...

[11:03] <tadzik> otoh, they seem unimpressed when the sun is there :)

[11:05] <masak> when the sun is there, it's time to Gå På Tur.

[11:07] <mathw> Nottingham seems to be .NET land, but that might be my perceptions because of what recruiters see on my LinkedIn profile

[11:07] <mathw> there is a fair bit of PHP around, but I'm not that desperate

[11:08] *** sqirrel_ joined
[11:11] <tadzik> I always thought England is a magical Perl wonderland, but maybe that's just London

[11:11] <jnthn> Not to mention that PHP pretty much promises you'll be doing web dev...

[11:13] <masak> getting some warnings when I run Rakudo's Configure.pl: https://gist.github.com/masak/8999395

[11:13] <masak> haven't looked at the cause, but I think warnings from a Configure.pl script are suspect by default.

[11:14] <masak> it's $nqp_config{'nqp::version'} that's undefined.

[11:14] <masak> and then $nqp_config{"moar::dll"}

[11:15] <mathw> jnthn: yeah that's not even why I avoid it

[11:15] <mathw> tadzik: there's a lot of Perl in London. Really seriously a lot.

[11:15] <masak> yeah, turns out I couldn't `make` either, because it's missing NQP.

[11:16] <masak> needed to add --gen-nqp to the Configure.pl script.

[11:16] <masak> ...now I'm getting an error instead :(

[11:16] <jnthn> masak: What're you trying to get?

[11:16] <masak> help! https://gist.github.com/masak/8999434

[11:17] * masak tries with a clean Rakudo repo

[11:17] <jnthn> I have to follow a link??!

[11:17] <jnthn> masak: You need to --gen-moar also

[11:17] <jnthn> masak: Or specify a --prefix=...

[11:17] <jnthn> masak: To where you installed Moar

[11:17] <masak> oh ffs

[11:17] <masak> used to be the Configure.pl script told me what was missing.

[11:17] <masak> now it just errors out? :(

[11:18] <jnthn> That is unfortunate

[11:18] <jnthn> otoh, README does give you the exact thing you need... :)

[11:18] * masak submits rakudobug

[11:18] <jnthn> But nobody reads that, of course :P

[11:18] <masak> I'm a core dev, I don't read the README! :P

[11:19] <nwc10> that's kind of rule 0 of programming - no one reads the docs

[11:19] <nwc10> and some people have a rule 1, of not reading the error message either

[11:19] <masak> anyway, I think this is orthogonal.

[11:19] <nwc10> but those folks should be issued with an Etch-A-Sketch

[11:19] <masak> I *did* read the error message, and it sucked.

[11:19] <mathw> LTA error message is LTA

[11:19] <nwc10> yes, that's a legitimate bug

[11:19] <nwc10> or, I agree, that's a bug.

[11:21] <jnthn> It did say:

[11:21] <jnthn> ===SORRY!===

[11:21] <jnthn> No suitable MoarVM (moar executable) found using the --prefix

[11:21] <masak> yeah. that's not enough.

[11:21] <jnthn> OK, what should it have said? 

[11:21] <jnthn> "(Maybe you want --gen-moar?)"

[11:21] <masak> I mean, you're *intended* to use Configure.pl in a certain way, and the error message doesn't give enough hints as to how.

[11:21] <masak> jnthn: yes, something like that.

[11:21] <masak> whatever message would have saved me a trip to #perl6 for help would have been fine ;)

[11:22] <mathw> Welcome to the Rakudo Perl 6 configuration system

[11:22] <mathw> Press 1 to gen-moar

[11:22] <mathw> Press 2 to gen-parrot

[11:22] <masak> ;)

[11:22] <tadzik> :)

[11:22] <mathw> Press 3 if you're really patient and want to gen-jvm

[11:22] <jnthn> masak: Like, "(Maybe you should RTFM?)" :D

[11:23] <FROGGS> Press * to talk to an operator

[11:23] <FROGGS> ( Hi, Mr. Tight And is speaking... )

[11:23] <masak> jnthn: I'm all for reading the docs too, it's not that.

[11:23] <tadzik> yeah, I'd just keep pressing 0 until I can talk to a human :)

[11:23] <masak> jnthn: but a decent bet is that 'perl Configure.pl && make && make install' works in a project.

[11:23] <mathw> I've actually written those telephone menu systems

[11:24] <jnthn> mathw: Those systems are even more fun when they're not in your first language :)

[11:24] <masak> jnthn: and the current Configure.pl breaks that expectation, without giving an error message that guides the user right.

[11:24] <mathw> Designing the options and flow is really hard

[11:24] * FROGGS throws a num pad at mathw 

[11:24] <masak> jnthn: think of it as saving or losing all the other potential Rakudo users that happened to take the same path as I did.

[11:24] <masak> jnthn: (and who don't know to go to #perl6 for help, or check the README)

[11:25] <masak> redundancy is a good thing here.

[11:26] <mathw> FROGGS: it's highly unlikely you've used one of mine, unless you're a Special Constable or you are unlucky enough to work for companies who use a certain automated sickness notification system

[11:26] <dalek> nqp: 1658541 | jnthn++ | Configure.pl:

[11:26] <dalek> nqp: Give a hint about --gen-moar when no moar is found

[11:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/16585410c9

[11:27] <mathw> and who weren't particularly fond of listening to feedback on their design, so never listened to us saying 'you know, the chance any given company has two employees with the same date of birth is pretty high'

[11:27] <jnthn> masak: Hopefully 1658541 helps a little

[11:28] <masak> jnthn++

[11:28] <masak> ok, resolving the rakudobug.

[11:28] <jnthn> masak: Does a straight "perl Configure.pl" with no options say something sane, ooc?

[11:28] <mathw> that might be the first time I've seen an all-numeric git hash

[11:29] <masak> jnthn: dunno, didn't try that.

[11:29] *** denisboyun joined
[11:29] <jnthn> Hm

[11:29] <masak> jnthn: lemme try with a clean rakudo.

[11:29] <jnthn> C:\consulting\rakudo>perl Configure.pl

[11:29] <jnthn> No suitable nqp executables found! Please specify some --backends, or a --prefix that contains nqp-{p,j,m} executables

[11:30] <jnthn> I suspect that one can be more awesome.

[11:30] <masak> aye.

[11:30] <masak> because I did specify --backends=moar

[11:31] <masak> and when that didn't work, I thought to specify --gen-nqp

[11:31] <masak> and when *that* didn't work, I lost my patience and started kvetching here. :)

[11:31] <jnthn> ugh, yeah, just --backends=moar has a bad failure mode.

[11:32] <masak> aye. it has warnings about undef values.

[11:32] <masak> &

[11:35] *** sisar joined
[11:35] <sisar> o/

[11:35] <sisar> MoarVM build fail : https://gist.github.com/Siddhant/8999646 Thoughts ?

[11:36] <jnthn> Well, that's a new one...

[11:36] <sisar> I'm on Cygwin, 32-bit

[11:36] <jnthn> sisar: Platform?

[11:36] *** darutoko joined
[11:36] <jnthn> Oh.

[11:36] <sisar> oh wait, 32-bit ain't supported ?

[11:37] <jnthn> 32-bit seems to have problems in some places, but not all. 32-bit Linux x86 seems to work out fine, for example

[11:37] <jnthn> Looking at the error, it's actually libuv that seems to run into trouble.

[11:38] <jnthn> sisar: https://github.com/joyent/libuv/issues/845 is the libuv issue

[11:38] * sisar looks

[11:39] <jnthn> Which seems to boil down to, "Cygwin doesn't really provide pthreads"

[11:39] *** darutoko- left
[11:41] <sisar> jnthn: yeah. Well, that's disappointing. -(

[11:46] <jnthn> sisar: Yeah. I guess the best hope is that somebody will want Node.js on Cygwin enough to do the libuv port in aid of that...

[11:46] <jnthn> sisar: For building it there, anyway

[11:47] <jnthn> sisar: I suspect the best way to get Moar usable from Cygwin will be to build a native Windows binary and just make it available in the path, so it can be used from cygwin.

[11:47] <sisar> jnthn: hmm, I can try that.

[11:49] <sisar> jnthn: Well, i get a Parrot build fail too ! https://gist.github.com/Siddhant/8999784

[11:55] <moritz> \o

[12:07] *** Adriaaan joined
[12:15] <timotimo> o\

[12:19] *** dayangkun left
[12:21] *** dayangkun joined
[12:23] *** felher joined
[12:34] <masak> /o\

[12:36] <moritz> |o|

[12:37] <timotimo> lol

[12:41] <FROGGS> \o\

[12:42] <timotimo> meeeeh, reading out the size of every single bucket in every single page is likely going to take minutes if not hours

[12:42] <timotimo> i should somewhat randomly sample.

[12:44] <jnthn> In gen2?

[12:44] <timotimo> yes

[12:44] <jnthn> The pages are sized?

[12:44] <jnthn> So all the objects on a given page have the same size

[12:44] <timotimo> the size bucket of 32 to 39 has 1423 completely filled pages

[12:45] <timotimo> oh?

[12:45] <jnthn> Oh, yeah

[12:45] <jnthn> You're right, they may vary a bit

[12:45] <jnthn> I thought it was organizzed so the sizes would be more like 33..40 though?

[12:46] <jnthn> So each 8 byte increment gets non-wasting...

[12:46] <timotimo> oh?

[12:46] <timotimo> well, that may very well be

[12:46] <timotimo> i didn't check especially thoroughly

[12:46] <timotimo> that makes a whole lot more sense than having 32-40

[12:47] <perigrin> http://www.yapcna.org/yn2014/talks/tag/perl6 # just gonna mention the deadline is tomorrow at midnight EST

[12:47] <perigrin> util++

[12:47] <timotimo> yes, you're right

[12:47] <jnthn> timotimo: OK, good.

[12:48] <timotimo> should i still go ahead and do the sampling?

[12:48] <jnthn> timotimo: Well, good in so far as "I implemented it sanely". Not so good as in, "no easy win here" :)

[12:48] <jnthn> timotimo: I think more useful is looking at fragmentation.

[12:48] <timotimo> right

[12:48] <timotimo> yeah, i'm doing that

[12:48] <timotimo> i see almost zero fragmentation in my example program, which is not especially carefully designed

[12:48] <timotimo> do you have a suggestion for something that would fragment heavily?

[12:49] *** benabik left
[12:49] <jnthn> Yeah...something that makes loads of objects of a certain size, then stops making them and does other stuff, may well cause it.

[12:50] <jnthn> At the moment it doesn't make any attempt to say, "oh, this entire page is on the freelist, let's free it"

[12:51] <jnthn> But what yo're doing can probably tell us how pressing it is to implement that.

[12:51] <timotimo> yes

[12:51] <timotimo> <3

[12:52] <timotimo> i don't have a metric for how many pages "in between" are empty yet

[13:00] <timotimo> my stuff already helped me find out that the cur_page value isn't being updated at all

[13:01] <FROGGS> yeah

[13:01] <FROGGS> analysis++

[13:01] <timotimo> a truly tremendous oversight! :P

[13:02] <jnthn> timotimo: this:

[13:02] <jnthn>     /* The current page number that we're allocating in. */

[13:02] <jnthn>     MVMuint32 cur_page;

[13:02] <jnthn> That appears to be completely unused.

[13:02] <timotimo> i use it! :)

[13:02] <timotimo> in my analysis

[13:03] <jnthn> Yeah but...the rest of the VM doesn't :)

[13:03] <timotimo> aaw

[13:03] <jnthn> I suspect it's fossil

[13:03] <timotimo> well, we can save 32 bits * 32 buckets if we get rid of it!

[13:04] <jnthn> Every little helps :)

[13:04] <dalek> rakudo/nom: c50a2e8 | (Tobias Leich)++ | tools/build/Makefile-Moar.in:

[13:04] <dalek> rakudo/nom: do not touch ./perl6-m, only the one in install/

[13:04] <dalek> rakudo/nom: 

[13:04] <dalek> rakudo/nom: Because touching the runner in the rakudo build directory means triggering a rebuild

[13:04] <dalek> rakudo/nom: of lib.pm, Test.pm and Pod/to/Text.pm.

[13:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c50a2e8863

[13:04] <jnthn> timotimo: Feel free to remove it, anyways, given it seems unrequired.

[13:05] <jnthn> timotimo: If we don't find something in the free list, then it's clear that the "current" page to try allocating on is the final one.

[13:05] <jnthn> So num_pages is sufficient.

[13:05] <timotimo> i suppose i can make it work without that attribute somewhat easily

[13:06] <timotimo> but first, i have other stuff to do with this

[13:07] <FROGGS> perl6-m -e 'say IO::Path::Win32.new("foo\\bar") ~~ "foo/bar/".IO.path'

[13:07] <FROGGS> True

[13:07] <FROGGS> p: say IO::Path::Win32.new("foo\\bar") ~~ "foo/bar/".IO.path

[13:07] <camelia> rakudo-parrot 1ce379: OUTPUT«False␤»

[13:08] <timotimo> i shall sample the REPRs there as well, aye?

[13:08] <jnthn> timotimo: aye, that'll tell us what's in there

[13:14] <moritz> FROGGS: .path is enough, no need for .IO

[13:15] <FROGGS> moritz: but it feels better to use .IO somehow :o)

[13:15] <moritz> FROGGS: but eventually it'll be wrong

[13:16] <moritz> FROGGS: the problem with a path-based API is that it's prone to race conditions

[13:16] <FROGGS> I am pushing the added IO::Path.ACCEPTS when no p-spectests fail

[13:16] <moritz> FROGGS: so the long term plan is to use .IO to offer a file-handle based API

[13:16] <FROGGS> ahh, I see

[13:16] <moritz> which won't be as convenient, but will be safer for some scenarios

[13:22] <hoelzro> r: 'ш'.encode('latin-1').decode('utf-8')

[13:22] <camelia> rakudo-jvm 1ce379, rakudo-moar 1ce379: ( no output )

[13:22] <camelia> ..rakudo-parrot 1ce379: OUTPUT«Lossy conversion to single byte encoding␤  in method encode at gen/parrot/CORE.setting:6281␤  in block  at /tmp/tmpfile:1␤␤»

[13:22] <hoelzro> r: say 'ш'.encode('latin-1').decode('utf-8')

[13:22] <camelia> rakudo-jvm 1ce379, rakudo-moar 1ce379: OUTPUT«?␤»

[13:22] <camelia> ..rakudo-parrot 1ce379: OUTPUT«Lossy conversion to single byte encoding␤  in method encode at gen/parrot/CORE.setting:6281␤  in block  at /tmp/tmpfile:1␤␤»

[13:22] <hoelzro> what *should* that output?

[13:23] <jnthn> I prefer the JVM/Moar answer

[13:23] <hoelzro> I think that a :strict option would be nice

[13:23] <jnthn> Yeah, same

[13:24] <moritz> no, :strict shoudl be the default

[13:24] <moritz> there could be a :lax option which uses a replacement character

[13:24] <hoelzro> r:  "\x[82]".encode('latin-1').decode('utf-8')

[13:24] <camelia> rakudo-jvm 1ce379, rakudo-moar 1ce379: ( no output )

[13:24] <camelia> ..rakudo-parrot 1ce379: OUTPUT«Malformed UTF-8 string␤␤  in method decode at gen/parrot/CORE.setting:5117␤  in block  at /tmp/tmpfile:1␤␤»

[13:24] <hoelzro> moritz: I agree that it should be the deafult

[13:24] <hoelzro> *default

[13:24] <hoelzro> r:  say "\x[82]".encode('latin-1').decode('utf-8')

[13:24] <camelia> rakudo-moar 1ce379: OUTPUT«?␤»

[13:24] <camelia> ..rakudo-jvm 1ce379: OUTPUT«�␤»

[13:24] <camelia> ..rakudo-parrot 1ce379: OUTPUT«Malformed UTF-8 string␤␤  in method decode at gen/parrot/CORE.setting:5117␤  in block  at /tmp/tmpfile:1␤␤»

[13:24] <jnthn> moritz, hoelzro: That's a fine default until the day you meet real world data that sucks... :/

[13:24] <hoelzro> ok, now *that's* interesting

[13:25] <moritz> jnthn: then you start to set the :lax flag :-)

[13:25] <hoelzro> that's what the problem was with URI

[13:25] <hoelzro> I'm looking to create an NQP test for this

[13:25] <hoelzro> but I don't know what the results *should* be

[13:25] <jnthn> hoelzro: The "malformed UTF-8 string" error doesn't make a lot of sense there

[13:25] <jnthn> p: say "\x[82]".encode('latin-1')

[13:25] <camelia> rakudo-parrot 1ce379: OUTPUT«Buf:0x<82>␤»

[13:26] <hoelzro> yeah, I think Parrot's doing something stupid there

[13:26] <jnthn> Oh

[13:26] <jnthn> No, it's right to complain I think.

[13:26] <jnthn> 82 is not a valid UTF-8 sequence.

[13:26] <jnthn> Well

[13:26] <FROGGS> everything > 0x80 is invalid, yes

[13:26] <jnthn> But is it valid in latin-1?

[13:26] *** Sqirrel left
[13:27] <FROGGS> p: say "\x[82]"

[13:27] <camelia> rakudo-parrot 1ce379: OUTPUT«␤»

[13:27] <moritz> isn'T every byte squence valid Latin-1?

[13:27] <jnthn> moritz: Well, it's more about if Unicode codepoint 0x82 has a mapping in latin-1

[13:27] <jnthn> "\x[82]" is a string so we're clearly talking Unicode codepoint there.

[13:28] <moritz> I kinda thought the first 256 Codepoints map directly to the same byte values in Latin-1

[13:28] <moritz> seems I'm wrong though; Latin-1 has holes

[13:28] <timotimo> the first 127 surely do :P

[13:29] <jnthn> moritz: No, the mapping ain't that simple

[13:29] <hoelzro> I think that 0x82 encoding to 0x82 in latin-1 is the bad behavior, right?

[13:29] <jnthn> U+0082 is Break Permitted Here in Unicode.

[13:30] <moritz> it seems that windows-1252 (a latin-1 superset) is closer to what I though

[13:31] <jnthn> And looking at http://en.wikipedia.org/wiki/ISO/IEC_8859-1 suggests that this character doesn't have a latin-1 representation.

[13:31] <jnthn> hoelzro: So yes, codepoint 0x82 encoding to latin-1 byte 0x82 seems wrong

[13:33] <hoelzro> ok, good

[13:34] <jnthn> I agree we should support strict and lax modes for encoding/decoding

[13:34] <jnthn> I'll leave TimToady++ to decide the default :)

[13:35] <nwc10> http://en.wikipedia.org/wiki/ISO/IEC_8859-1 isn't totally helpful, as it seems to omit the C0 and C1 control codes from its table. 

[13:36] <jnthn> nwc10: C0 and C1? It defines those as À and Á

[13:38] <nwc10> no, these: http://en.wikipedia.org/wiki/C0_and_C1_control_codes

[13:39] *** skids left
[13:39] <jnthn> nwc10: Oh. :/

[13:39] <jnthn> nwc10: So if you include those, 0x82 is valid...

[13:42] <TimToady> I count latin-1 as the first 256 codepoints of Unicode, and I don't really seem much problem in doing so

[13:43] <TimToady> *see

[13:43] <jnthn> TimToady: So...all the clever mapping code in https://github.com/MoarVM/MoarVM/blob/master/src/strings/latin1.c is bogus?

[13:44] <jnthn> "clever" :)

[13:44] <dalek> rakudo/nom: 6a6a5bd | (Tobias Leich)++ | src/core/IO.pm:

[13:44] <dalek> rakudo/nom: add IO::Path.ACCEPTS

[13:44] <dalek> rakudo/nom: 

[13:44] <dalek> rakudo/nom: A path will match another path if their volume/directories/file portion matches.

[13:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6a6a5bd64b

[13:45] *** Khisanth left
[13:45] <TimToady> yeah, I think it's bogus

[13:46] <jnthn> That seems to mean we get to delete code :)

[13:46] <timotimo> \o/

[13:46] <jnthn> http://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block) seems to agree also

[13:50] *** fhelmberger left
[13:50] <nwc10> jnthn: is that mapping Windows 1252?

[13:50] *** FROGGS left
[13:52] <jnthn> nwc10: Oh...hmm

[13:52] <jnthn> nwc10: That is entirely possible.

[13:53] <jnthn> nwc10: Which I guess is fine to support but...it should not be claiming to be latin-1...

[13:54] *** sqirrel_ left
[13:54] <nwc10> unless of course you are HTML 5, IIRC

[13:54] <TimToady> .oO(ISO-8859-MS)

[13:55] <timotimo> m)

[13:57] <mathw> yeah HTML 5 says that if something declares latin-1 parse it as windows-1252

[13:57] <mathw> I think I'd've been tempted to say if it claims to be anything that's not unicode, insult them, but I suppose backwards compatibility might have suffered

[13:58] <TimToady> ick

[13:58] *** Khisanth joined
[13:59] <TimToady> and if it doesn't claim to be anything, it's probably shift-jis  :P

[14:00] <nwc10> I find it utterly ick too.

[14:00] <TimToady> so if it's ambiguous, perhaps we should simply disallow 'latin-1', and require clarity

[14:01] <TimToady> it's either that, or swing our Bat of Cultural Imperialism one way or the other

[14:01] <nwc10> actually, it's worse. HTML 5 "requires that documents advertised as ISO-8859-1 actually be parsed with the Windows-1252 encoding."

[14:02] <TimToady> AGHHH!

[14:02] <nwc10> not "Latin 1", but a declaratio of a *real* ISO standard.

[14:02] <nwc10> yes. urge to kill.

[14:03] <TimToady> well, maybe we've lost that battle, and need ascii-256 or so

[14:04] * TimToady wonders which circle in hell is reserved for people who write standards...

[14:04] <nwc10> hopefully not a round one.

[14:05] <moritz> probably depends on the standard

[14:05] * moritz doesn't wish hell for the guy who standardized JSON

[14:06] * TimToady wishes JSON allowed trailing commas

[14:06] * timotimo too

[14:07] * moritz too, but that's not a hell-banning reason

[14:07] <sjn> maybe the upper levels of heck then? :)

[14:08] <TimToady> most of us at least deserve some penance in purgatory :)

[14:09] * sjn has always had a thing for limbo

[14:09] * TimToady was never very good at it

[14:10] <moritz> is the purgatory still in the newe testament?

[14:11] <TimToady> not in the protestant canon

[14:12] <TimToady> dunno about the NT apocrypha

[14:13] * TimToady always thought of it as an accretion that went along with indulgences

[14:16] <TimToady> my basic feeling is that, if HTML-5 wants to lie to itself, that HTML-5's problem, and not ours (unless we're writing an HTML-5 module)

[14:17] <TimToady> so unless the whole industry buys the lie, we should distinguish iso-8859-1 from windows-1252

[14:18] <TimToady> (and latin-1 with it)

[14:18] <mathw> There's a certain rightness to saying "Well it said it was ISO-8859-1, if it was lying that's not our problem"

[14:20] <TimToady> then there's all the iso-8859-1 that's really iso-8859-15

[14:22] <arnsholt> jnthn: Will the JVM invoke ops DTRT if I use an ARG_OBJ (with corresponding Integer object) to invoke a function that takes a native int?

[14:23] <masak> sjn: I've always had a thing for limbo, too!

[14:23] <masak> a place to chill.

[14:23] <masak> I imagine if I brought a few books...

[14:24] <jnthn> arnsholt: As in, Java Integer? No

[14:24] <timotimo> masak: http://dresdencodak.com/2010/05/05/a-degenerate-prepares-for-hell/ <- :)

[14:25] <masak> timotimo: that must have been where I got that from, yes :)

[14:26] <arnsholt> Darn. That'll complicate the callback logic a bit, but nothing more code can't solve =)

[14:26] *** FROGGS[mobile] joined
[14:27] *** kaleem left
[14:30] *** jnap joined
[14:32] *** lowpro30 joined
[14:36] *** SamuraiJack left
[14:39] *** guru joined
[14:39] *** guru is now known as Guest63253

[14:39] *** sftp left
[14:39] *** Guest63253 is now known as ajr_

[14:41] <mathw> arnsholt: nothing can't be solved by more layers of abstraction! Nothing!

[14:42] <masak> is there an RT ticket for lines() not being lazy, or for loops not being lazy or something in that area not being lazy?

[14:42] *** sftp joined
[14:42] * moritz is pretty sure tehre is at least one

[14:42] <masak> can't demonstrate it on the evalbot, I think.

[14:42] <masak> but it stands out as a rather big, long-standing unsolved annoyance.

[14:43] * masak tries making it a while loop

[14:43] *** lowpro30_ joined
[14:43] <masak> yup, that's a feasible workaround.

[14:44] <masak> replace 'for $*IN.lines { ... }' with 'while defined( $_ = $*IN.get ) { ... }'

[14:44] * masak goes hunting for the RT ticket

[14:44] <masak> https://rt.perl.org/Ticket/Display.html?id=112716

[14:45] <masak> filed in May 2012.

[14:45] <arnsholt> mathw: Apart from having too many abstraction layers =)

[14:45] <mathw> didn't I see something about being able to say "eager for" recently, or was I imagining it?

[14:45] <mathw> arnsholt: nonsense! you can abstract away from that!

[14:45] <arnsholt> =D

[14:46] <moritz> mathw: there's a difference between for being eager, and for eagerly evaluating its input list before starting to iterate

[14:46] <masak> oh, so it's the workahead that causes the problem.

[14:47] *** lowpro30 left
[14:47] <masak> and pmichaud was working on a fix two years ago, two days after the bug was filed.

[14:47] <masak> wonder what happened to that fix...

[14:48] <mathw> moritz: oh yes, of course.

[14:48] <mathw> moritz: I have a cold that's rapidly getting worse, my brain's not working very well

[14:48] <masak> mathw: no, it's just that these things are tricky :)

[14:49] <moritz>  tricky to implement, too

[14:55] <dalek> rakudo-star-daily: 31275d4 | coke++ | log/ (5 files):

[14:55] <dalek> rakudo-star-daily: today (automated commit)

[14:55] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/31275d49b2

[14:55] <dalek> rakudo-star-daily: 30943a2 | coke++ | log/ (5 files):

[14:55] <dalek> rakudo-star-daily: today (automated commit)

[14:55] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/30943a257f

[14:55] <dalek> perl6-roast-data: 0d6a615 | coke++ | / (3 files):

[14:55] <dalek> perl6-roast-data: today (automated commit)

[14:55] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/0d6a6159d5

[14:56] *** molaf joined
[14:57] *** erkan left
[14:57] *** erkan joined
[14:57] <masak> [Coke]++ # hero

[14:57] <TimToady> I suppose the first 256 codepoints should be called "UCS-1"  :)

[15:00] * [Coke] got to see Alton Brown in concert last night. Whee!

[15:00] <TimToady> pity you couldn't hear too

[15:02] *** xinming_ joined
[15:04] *** thou joined
[15:05] *** xinming left
[15:05] *** pdcawley left
[15:06] *** btyler joined
[15:08] *** kbaker joined
[15:14] *** kaare_ left
[15:15] *** skids joined
[15:16] <[Coke]> thankfully he had a projection screen with words most of the time, so you could follow along.

[15:18] <PerlJam> [Coke]: What is an Alton Brown concert like?   

[15:18] * PerlJam imagines a live version of his Good Eats show

[15:18] *** logie joined
[15:20] *** lowpro30 joined
[15:21] <PerlJam> never mind, google gave me a better idea of it :)

[15:24] *** lowpro30_ left
[15:30] <[Coke]> PerlJam: that's a pretty good first approximation, though. ;)

[15:37] <[Coke]> we have no implementations spec testing clean.

[15:39] <btyler> masak: if you've got perl6 time today, perhaps consider taking a look at hoelzro++'s pull against ufo to support multiple backends: https://github.com/masak/ufo/pull/10

[15:42] *** daniel-s_ joined
[15:43] *** arnsholt left
[15:45] <raydiak> morning all

[15:47] <jnthn> o/ raydiak 

[15:48] <raydiak> \o jnthn...doing anything incredible today?

[15:49] <jnthn> raydiak: Lots of $dayjob bits right now, but I'll get to Perl 6 later on and continue with the MoarVM IO work. :)

[15:50] *** lizmat joined
[15:51] <raydiak> :)

[15:53] *** molaf left
[16:00] <masak> btyler: ok, opening it in a tab. might get to it, but no guarantees.

[16:02] *** daniel-s_ left
[16:02] *** Alula left
[16:03] *** Alula joined
[16:06] <masak> hoelzro: interesting use of both a class and a group of roles.

[16:06] *** sftp left
[16:06] <hoelzro> thanks

[16:08] *** denisboyun left
[16:09] *** sftp joined
[16:10] *** dmol left
[16:12] *** dmol joined
[16:13] <jnthn> hoelzro: Well, you should check if it's "may you live in interesting times" interesting before saying thanks :P

[16:13] <hoelzro> jnthn: ah, good point =)

[16:13] <hoelzro> masak: is it that kind of interesting?

[16:13] <hoelzro> I'm always looking for critiques on my Perl 6 style

[16:17] *** treehug88 joined
[16:18] *** tgt joined
[16:20] <masak> hoelzro: it has more moving parts than I would've had, but since it's an improvement I'm going to merge it in.

[16:20] <hoelzro> masak: cool!  how would you have done it?

[16:20] <masak> hoelzro: and if I ever get around to adding my improvements, I'll link you the commit ;)

[16:20] <hoelzro> =)

[16:21] <masak> hoelzro: I would have used a sub instead of a class with a method in it. and a hash of hashes instead of three roles mixed in at runtime.

[16:21] <dalek> ufo: 2a37cef | (Rob Hoelz)++ | bin/ufo:

[16:21] <dalek> ufo: Move backend-specific stuff into roles

[16:21] <dalek> ufo: review: https://github.com/masak/ufo/commit/2a37ceffce

[16:21] <dalek> ufo: 82067db | (Rob Hoelz)++ | bin/ufo:

[16:21] <dalek> ufo: Use $*EXECUTABLE_NAME instead of perl6

[16:21] <dalek> ufo: review: https://github.com/masak/ufo/commit/82067db59d

[16:21] <dalek> ufo: c0f2741 | (Rob Hoelz)++ | bin/ufo:

[16:21] <dalek> ufo: Move away from Parrot-specific language

[16:21] <dalek> ufo: review: https://github.com/masak/ufo/commit/c0f27412b8

[16:21] <hoelzro> ah

[16:21] <dalek> ufo: dc80392 | (Rob Hoelz)++ | bin/ufo:

[16:21] <dalek> ufo: Flesh out JVM role

[16:21] <dalek> ufo: review: https://github.com/masak/ufo/commit/dc8039203c

[16:21] <dalek> ufo: 05bd121 | (Rob Hoelz)++ | bin/ufo:

[16:21] <masak> hoelzro: pull request merged.

[16:21] <dalek> ufo: Strip out POD before looking for dependency modules

[16:21] <dalek> ufo: review: https://github.com/masak/ufo/commit/05bd121922

[16:21] <dalek> ufo: a4bd3f4 | (Carl Mäsak)++ | bin/ufo:

[16:21] <dalek> ufo: Merge pull request #10 from hoelzro/master

[16:21] <dalek> ufo: 

[16:21] <dalek> ufo: Make ufo work with non-Parrot backends

[16:21] <dalek> ufo: review: https://github.com/masak/ufo/commit/a4bd3f4696

[16:21] <hoelzro> thank you

[16:21] <masak> sorry for flooding #perl6, didn't think of that ;)

[16:23] *** [Sno] left
[16:23] <raydiak> is there a way to merge things without flooding?

[16:25] <jnthn> Do it at the command line and --squash, if you don't care for history... ;)

[16:25] <raydiak> ew

[16:25] *** mtk joined
[16:26] <PerlJam> why ew?

[16:26] <raydiak> makes thing like bisecting difficult if not impossible

[16:26] <raydiak> unless I'm confused

[16:26] <PerlJam> He did qualify it with "if you don't care for history"  :)

[16:27] <flussence> Figure out what the threshold for dalek's "heuristic branch merge" message is, and cross that...

[16:27] <raydiak> indeed he did

[16:27] *** woolfy joined
[16:28] <PerlJam> .oO( I had to make 23 minor commits so that dalek wouldn't report the 7 "real" commits on channel  )

[16:29] <raydiak> was just wondering...still figuring out how things work around here (and got dalek kicked last time I merged something)

[16:30] <timotimo> haha

[16:30] <timotimo> yeah, dalek tends to do that :)

[16:31] <jnthn> raydiak: Thing is, if you do branches to break things for a while, *not* squashing at merge makes bisecting harder. And unfortunately, there's no --first-parent option to bisect...

[16:32] <raydiak> ah, I see what you mean

[16:34] * raydiak will start squashing simple stuff like docs work

[16:35] *** colomon left
[16:36] <masak> there should totally be a --first-parent option to bisect.

[16:37] *** tgt left
[16:39] <jnthn> Yeah...

[16:39] <dalek> nqp: 1235a65 | (Elizabeth Mattijsen)++ | src/QRegex/Cursor.nqp:

[16:39] <dalek> nqp: Introduce .made in favour of .ast, but keep .ast for now

[16:39] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1235a65a5e

[16:39] <dalek> nqp: fb4ffa9 | (Elizabeth Mattijsen)++ | src/ (4 files):

[16:39] <dalek> nqp: Change .ast to .made where it seemed appropriate

[16:39] <dalek> nqp: review: https://github.com/perl6/nqp/commit/fb4ffa9492

[16:39] *** ajr_ left
[16:39] * jnthn wonders how hard it'd be to write that patch...

[16:40] *** guru joined
[16:40] *** guru is now known as Guest20329

[16:43] <[Coke]> is .ast deprecated?

[16:44] *** xenoterracide joined
[16:44] *** zakharyas left
[16:45] <PerlJam> I thought .ast was staying but now there's a .made synonym

[16:45] <TimToady> I don't see much point in keeping both

[16:45] <jnthn> My muscle memory :P

[16:46] <jnthn> But tbh, that only means we keep it in NQP :)

[16:47] <jnthn> There's a lot of code out there using .ast already, though.

[16:47] *** nsh left
[16:48] <PerlJam> .ast really makes sense when you're building a compiler  ;)

[16:48] *** Guest20329 is now known as ajr_

[16:50] <jnthn> Yeah.

[16:50] *** woolfy left
[16:51] *** lizmat left
[16:53] <dalek> ufo: d019a08 | masak++ | bin/ufo:

[16:53] <dalek> ufo: [bin/ufo] turn class/method into nested sub

[16:53] <dalek> ufo: 

[16:53] <dalek> ufo: Limits the scope of this subroutine and shows where it belongs.

[16:53] <dalek> ufo: 

[16:53] <dalek> ufo: Also put the lexically scoped regexes into the sub, since they're

[16:53] <dalek> ufo: only used from in there.

[16:53] <dalek> ufo: review: https://github.com/masak/ufo/commit/d019a0842f

[16:53] <dalek> ufo: 0b3a26e | masak++ | bin/ufo:

[16:53] <dalek> ufo: [bin/ufo] replace mixins with hash and attrs

[16:53] <dalek> ufo: 

[16:53] <dalek> ufo: Prefer the order of the declarations of this variant. In the

[16:53] <dalek> ufo: previous version, it wasn't clear where the $.target and $.extension

[16:53] <dalek> ufo: methods were coming from.

[16:53] <dalek> ufo: 

[16:53] <dalek> ufo: Also, a net removal of 13 lines of code. Neat!

[16:53] <dalek> ufo: review: https://github.com/masak/ufo/commit/0b3a26e5d3

[16:53] <masak> hoelzro: ^^^

[16:53] <masak> anyway, hoelzro++ for contributing the multi-backend functionality.

[16:53] <masak> oh!

[16:53] <masak> one more thing I meant to do.

[16:59] *** lizmat joined
[16:59] *** woolfy joined
[17:00] *** nsh joined
[17:00] *** nsh left
[17:00] *** nsh joined
[17:01] <dalek> ufo: a73a527 | masak++ | bin/ufo:

[17:01] <dalek> ufo: [bin/ufo] give an error if running on unknown VM

[17:01] <dalek> ufo: 

[17:01] <dalek> ufo: Also replace the 'constant' by 'my' scope modifiers, as the

[17:01] <dalek> ufo: former doesn't seem to work at all in this case. So the check

[17:01] <dalek> ufo: is already being useful!

[17:01] <dalek> ufo: review: https://github.com/masak/ufo/commit/a73a527444

[17:03] *** Zaydon joined
[17:07] <hoelzro> masak: thanks for pointing that out!

[17:08] <masak> my pleasure. thanks again for the PR.

[17:11] *** tgt joined
[17:11] <moritz> masak++ # p6 coding again

[17:13] *** arnsholt joined
[17:13] *** bluescreen10 joined
[17:14] *** tgt_ joined
[17:15] *** virtualsue joined
[17:15] *** integral joined
[17:15] *** integral left
[17:15] *** integral joined
[17:16] *** tgt left
[17:17] <arnsholt> jnthn: Another JVM callsite question. I assume that for something with signature (int, num, object), I'll make a callsite {ARG_INT, ARG_NUM, ARG_OBJ} but the object array passed to the invoke op will contain SMOs for all arguments. That right?

[17:17] *** benabik joined
[17:19] *** tgt_ left
[17:19] <jnthn> arnsholt: No, a Java Integer and Float for the first two

[17:19] <jnthn> arnsholt: In the good cases we can optimize away that boxing.

[17:20] <arnsholt> Ah, neat. Less work for me

[17:20] *** tgt joined
[17:23] <arnsholt> jnthn: Hmm, does it have to be Integer/Float, or are Byte, Short, Long and Double accepted too?

[17:23] <jnthn> Hmmm

[17:23] <jnthn> I think it actually wants Double rather than Float...

[17:23] <jnthn> I guess it casts to unbox

[17:23] <jnthn> I don't know exactly what happens if you (long) a Byte

[17:28] *** virtualsue left
[17:29] <arnsholt> Right, and maybe Long rather than Integer?

[17:29] <arnsholt> That'd make sense, since we use longs and doubles for numeric types internally

[17:30] <timotimo> i long for a good byte of food right now

[17:31] <jnthn> arnsholt: Yds, sorry, meant Long.

[17:31] *** lowpro30_ joined
[17:35] *** lowpro30 left
[17:35] <dalek> nqp: 15869c8 | (Elizabeth Mattijsen)++ | src/ (12 files):

[17:35] <dalek> nqp: "past" is now a thing of the ast

[17:35] <dalek> nqp: review: https://github.com/perl6/nqp/commit/15869c89e2

[17:43] *** bluescreen100 joined
[17:44] *** denisboyun joined
[17:46] *** bluescreen10 left
[17:46] *** tgt left
[17:47] *** woolfy left
[17:49] *** lizmat left
[18:00] *** denisboyun left
[18:02] *** SamuraiJack joined
[18:10] *** tgt joined
[18:20] *** zakharyas joined
[18:21] *** FROGGS[mobile] left
[18:22] *** FROGGS[mobile] joined
[18:23] *** pecastro left
[18:24] *** [Sno] joined
[18:31] *** nsh left
[18:43] *** ajr_ left
[18:44] *** guru joined
[18:45] *** guru is now known as ajr_

[18:47] *** darutoko left
[18:53] *** tgt left
[18:53] *** tgt joined
[19:01] *** benabik left
[19:02] *** pmurias joined
[19:04] *** benabik joined
[19:05] *** treehug88 left
[19:06] *** treehug88 joined
[19:08] *** ajr_ left
[19:14] *** tgt left
[19:19] *** SamuraiJack left
[19:27] *** FROGGS[mobile] left
[19:30] *** FROGGS[mobile] joined
[19:41] *** tgt joined
[19:41] *** guru joined
[19:42] *** guru is now known as ajr_

[20:01] *** jnap left
[20:12] *** bluescreen__ joined
[20:14] *** [particle]1 left
[20:15] *** bluescreen100 left
[20:17] *** bluescreen__ left
[20:21] *** rylinaux joined
[20:24] *** kaare_ joined
[20:24] *** [particle] joined
[20:24] *** FROGGS joined
[20:25] *** telex left
[20:26] *** lowpro30__ joined
[20:26] *** telex joined
[20:27] *** rurban joined
[20:29] *** lowpro30_ left
[20:30] *** benabik left
[20:30] <timotimo> moarvm now has a constant pool for integer values between 0 and 15 inclusive

[20:31] <timotimo> takes the memory usage of perl6-m -e 'say 1' down to ~89 from ~92

[20:31] <timotimo> megabytes*

[20:31] *** lowpro30 joined
[20:32] <PerlJam> timotimo++ every little bit helps!  :)

[20:32] <jnthn> m: say 89/92

[20:32] <camelia> rakudo-moar 6a6a5b: OUTPUT«0.967391␤»

[20:32] *** jnap joined
[20:34] *** lowpro30__ left
[20:36] *** jnap left
[20:37] <FROGGS> good evening

[20:38] <masak> evenin', FROGGS 

[20:38] <timotimo> hey FROGGS 

[20:39] <jnthn> o/ FROGGS 

[20:39] <FROGGS> hey, what a greeting :o)

[20:40] <timotimo> i kind of feel like i've drained my energy resources for the day

[20:41] <timotimo> feel free to entertain me with cool commits, though :)

[20:41] <FROGGS> hmmm, I will probably only send a PR for File::Find to make its tests pass under windows

[20:41] <FROGGS> not very enternainy :/

[20:42] <dalek> ufo: 25c12a6 | masak++ | bin/ufo:

[20:42] <dalek> ufo: [bin/ufo] fix typo

[20:42] <dalek> ufo: 

[20:42] <dalek> ufo: itz++

[20:42] <dalek> ufo: review: https://github.com/masak/ufo/commit/25c12a6b01

[20:48] *** benabik joined
[20:49] <FROGGS> huh, perl6-m builds faster on windows in a vm than on my linux host O.o

[20:51] <jnthn> o.O

[20:59] <FROGGS> it only took 47s for stage parse and on my linux it usually takes 51s

[21:03] *** Rotwang joined
[21:03] <lue> FROGGS: what's the margin of error for those times? :)

[21:03] <FROGGS> the what? I dont event understand the question :o)

[21:05] <lue> https://en.wikipedia.org/wiki/Margin_of_error

[21:05] <jnthn> FROGGS: Did you applied most holy statistical tests to your results? :P

[21:05] <lue> (don't know if that would help you understand :P)

[21:06] <FROGGS> ummm

[21:06] * FROGGS continues smiling :o)

[21:06] <lue> FROGGS: basically, is the difference between 47s and 51s significant, or could that just be within the realm of fluctuating times.

[21:07] <FROGGS> lue: I've perl6-m loads of times on my linux box and the fastest ever was 49s

[21:08] <FROGGS> but I need to rebuild it on both machines soon, so I will have an eye on that

[21:08] <lue> If the slowest VM time is greater than 49s, you'll know the difference isn't too significant :)

[21:15] <FROGGS> the win7 in the vm took 47s where its host takes >49s (without a vm running)

[21:19] <dalek> rakudo/nom: ca35ec8 | (Tobias Leich)++ | src/core/IO.pm:

[21:19] <dalek> rakudo/nom: cleanup paths to get os specific delimeter

[21:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ca35ec8512

[21:21] *** rurban left
[21:27] *** jnap joined
[21:27] *** benabik left
[21:33] *** [Sno] left
[21:34] *** [Sno] joined
[21:35] *** arnsholt left
[21:42] <FROGGS> tadzik: I PR'd you

[21:43] *** lowpro30_ joined
[21:44] *** rindolf left
[21:47] *** lowpro30 left
[21:53] *** lowpro30__ joined
[21:54] *** sisar left
[21:57] *** lowpro30_ left
[22:05] *** Alina-malina left
[22:05] *** Alina-malina joined
[22:06] *** pecastro joined
[22:09] *** immortal joined
[22:09] *** immortal left
[22:09] *** immortal joined
[22:10] *** kbaker left
[22:10] *** erkan left
[22:13] *** skids left
[22:14] *** Zaydon left
[22:15] <tadzik> hmm

[22:16] <tadzik> ok, alright :)

[22:16] <FROGGS> :o9

[22:16] <tadzik> I tagged panda as 2014.01, and will update the submodule in the newer panda

[22:16] <FROGGS> :o) *

[22:17] <FROGGS> cool!

[22:17] *** denisboyun joined
[22:17] <tadzik> so it still works for people using released rakudo

[22:17] *** zakharyas left
[22:18] <dalek> panda: 934a4f3 | tadzik++ | ext/File__Find:

[22:18] <dalek> panda: Update File::Find

[22:18] <dalek> panda: review: https://github.com/tadzik/panda/commit/934a4f3152

[22:19] *** lowpro30__ left
[22:20] <tadzik> FROGGS++

[22:21] <FROGGS> now there might only be the STable problem left to fix...

[22:21] *** grondilu left
[22:24] *** virtualsue joined
[22:24] <jnthn> FROGGS: I'm busy on IO things, but I can give you a hint on how to gather some info on what the problem might be there, if you like?

[22:24] <FROGGS> sure I do!

[22:25] <FROGGS> it does not seem to be about augmenting or custom infixes this time btw

[22:25] <jnthn> FROGGS: https://gist.github.com/jnthn/a09d2b3beb70866be1bd

[22:25] <jnthn> Add that patch

[22:25] <jnthn> You can't build Rakudo itself with it applied (it legit triggers this)

[22:26] <jnthn> But you should be able to try going through the Panda build

[22:26] <jnthn> When it blows up, use --ll-exception to get a backtrac

[22:26] <FROGGS> k

[22:26] <jnthn> *backtrace

[22:27] *** colomon joined
[22:27] <colomon> o/

[22:27] <vendethiel> Is there a binary unpacking syntax in perl ? Could that be done with macros ?

[22:29] <FROGGS> vendethiel: Buf has a method unpack

[22:29] <raydiak> hi colomon

[22:30] <jnthn> o/ colomon 

[22:30] <colomon> any excitement in the p6 world today?  I've been awa from the Internets

[22:32] <jnthn> timotimo++ came up with an optimization in Moar that shaved 3MB off Rakudo's base memory

[22:32] <jnthn> And likely has performance benefits too

[22:34] *** grondilu joined
[22:37] <FROGGS> jnthn: it might be related to an enum State <...>

[22:38] <jnthn> Hm

[22:38] <FROGGS> jnthn: I will do a lot of testing tomorrow with this

[22:38] <jnthn> Got a backtrace?

[22:38] <FROGGS> yeah

[22:38] <jnthn> Somewhere in EnumHOW?

[22:38] <FROGGS> https://gist.github.com/FROGGS/ba492ddbaa876aaf9aed

[22:39] <FROGGS> more in Perl6/Metamodel.moarvm:add_method

[22:39] <jnthn> um, huh

[22:39] <jnthn> That's not the exception we added though...

[22:39] <FROGGS> true

[22:41] *** virtualsue left
[22:41] <FROGGS> perhaps our added exception got swallowed by a try/CATCH or it happens in a shell("$*EXECUTABLE_NAME[...]

[22:41] <FROGGS> I will play with it tomorrow

[22:41] <FROGGS> and then I will report to you :o)

[22:42] <jnthn> ok :)

[22:42] <jnthn> FROGGS++

[22:43] *** denisboyun left
[22:45] *** denisboyun joined
[22:55] *** rurban joined
[22:58] * raydiak knows better than to ask for opinions on his designs (especially incomplete ones), but must be in a reckless mood today...

[22:58] <raydiak> http://p6doc.cyberuniverses.com/ # is this pleasing or ugly?

[22:58] <PerlJam> It's not ugly.

[22:58] <PerlJam> It looks nice.  

[22:59] <PerlJam> Not as colorful as camelia  :)

[22:59] <raydiak> couldn't decide if it's soothingly soft, or bland in that "lukewarm water, spit it out" kinda way :)

[23:00] <raydiak> wasn't sure how colorful/contrasty to go, since it's documentation (local html docs will look like this too, for now)

[23:00] *** dmol left
[23:01] <lue> raydiak: could/should be more colorful (esp. if it goes on the perl6.org domain), but the layout looks great.

[23:01] <jnthn> raydiak: Thanks for looking at making doc.perl6.org more attractive. The search facility stands out a lot better wiht this.

[23:02] <raydiak> jnthn: aye, that was one of the goals

[23:03] <dalek> perl6-roast-data: 9fce7cb | coke++ | / (3 files):

[23:03] <dalek> perl6-roast-data: today (automated commit)

[23:03] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/9fce7cbc63

[23:03] <jnthn> raydiak: One thing I note is that the link/heading color scheme is blue, but the rest is green. I wonder (but I'm *not* a designer!) if tweaking the links/heading colors might be nice also.

[23:03] <jnthn> It doesn't look that bad with them different, though.

[23:04] <raydiak> yeah I thought about that...wasn't sure either

[23:04] <jnthn> I'd maybe make the Search word / box a little larger. Or maybe just wider.

[23:04] <raydiak> PerlJam, lue, jnthn: thanks for the input, I'll play with the colors some more

[23:05] <raydiak> I could make it larger, but I'd also like to avoid wrapping...not really happy with how the header looks when it wraps yet

[23:05] <jnthn> What I think might be nice in the end is if we could have a left hand "navigation" area for browsing.

[23:05] <jnthn> So if you're looking at a method in a certain class you see other methods in that class to browse to

[23:05] <PerlJam> aye

[23:06] <jnthn> That's a much bigger thing, though.

[23:06] <lue> raydiak: just steal the pastel color values from perl6.org, no problem :)

[23:06] <raydiak> ah, that would be nice

[23:07] <PerlJam> raydiak++

[23:07] <raydiak> lue: that *would* be a sensible approach, wouldn't it? no wonder it didn't occur to me :)

[23:08] * raydiak starts ripping styles from perl6.org

[23:09] <raydiak> (or maybe the whole stylesheet)

[23:10] <lue> IIRC I once tried (and failed) to work on a doc.perl6.org style, and I believe I just modified the base perl6.org stylesheet.

[23:13] <raydiak> it's looking like there are at least several things I can cannibalize from it...also need to merge in parts of the perlcabal.org/syn stylesheet, which is just being linked to directly right now (I'm assuming b/c both use Pod2HTML or something)

[23:13] <lue> yeah, though I'd appreciate a pretter perlcabal.org/syn to come out of this :)

[23:13] <lue> *prettier

[23:15] <raydiak> good idea, would be smart to put all the Pod stuff in its own stylesheet, and perhaps include it with Pod2HTML as a default or something

[23:16] <lue> I don't think the stylesheet is linked to the generation process, but I could be wrong.

[23:17] *** denisboyun left
[23:18] <raydiak> Pod::To::HTML generates an inline stylesheet, AND links to the perlcabal.org one, whether you want it to or not...hacking on that is probably going to come up real soon

[23:18] <raydiak> so far I've just been overriding it all with higher-precedence CSS rules

[23:19] <lue> raydiak: just so you know, I have a project that I should start working on again real soon (perhaps even right now) to replace our crusty old Pod2HTML generator.

[23:21] <raydiak> lue: I request a way to generate the content without the surrounding head/body/html tags and such...for embedding into other stuff...and a way to choose whether it spits out html or xhtml

[23:22] <lue> I could probably flip a switch between Pod::To::HTML and ::To::XHTML, but I'm not in charge of how the generator(s) themselves work.

[23:23] <raydiak> I didn't know the old one was old and crusty...now I know why it feels crusty :)

[23:23] <lue> The only one who knows anything about the current one is moritz, and that's simply because he's the one who's been hammering it into working condition every once in a while :)

[23:24] * lue feels like working on his generator again :)

[23:25] <raydiak> I've been reading it over, it's actually not that bad, except it's meant to only generate whole independent pages...making it hard to integrate into other non-Pod-generated things

[23:25] <lue> My new one, once it works, will require all our current synopses to be converted to pod6 format, that'll be the best part :) [but as moritz requested, I'm not doing that until we have a generator that works]

[23:28] <raydiak> I will hold off directly hacking Pod::To::HTML for a while and see where lue++ goes :)

[23:29] <raydiak> have more than enough on my plate for now anyway...Math::ThreeD's matrix support is still broken, for need of like an hour of my time...and Pray hasn't been touched in like a month, which is sad

[23:30] <lue> raydiak: again, I'm not touching Pod::To::HTML, so go ahead :)

[23:30] *** treehug88 left
[23:30] <raydiak> oh heck, realizing I never even posted an actual release anouncement on the Pray site :P

[23:30] <raydiak> lue: is your generator not something which would replace it?

[23:31] <lue> raydiak: no, I'm replacing the thing in perl6/mu that pushes all the synopses through the generation process.

[23:31] <raydiak> ah, now I see

[23:31] <lue> If you could make it so I could use Pod::To::HTML from within perl6, instead of resorting to shell() and the like... :P

[23:32] *** Araq joined
[23:32] <raydiak> lue: that's how it's being done in perl6/doc/htmlify.pl, iirc

[23:32] <raydiak> "that" as in "being used as a module instead of a shell script"

[23:33] *** tgt left
[23:33] <lue> (As an aside, trying perl6-m on my generator, just to get familiar with the generator again, caused it to be Killed by kernel after taking 80% of my memory. I'll complain more once I make the code public.)

[23:33] *** tgt joined
[23:34] * raydiak tried to gen the docs w/perl6-m, but is not nearly patient enough

[23:34] <raydiak> it works, just (very) slowly

[23:36] <lue> raydiak: ah, I guess I just didn't see what function in ::HTML I needed to call, I'll look at htmlify.pl more closely in a bit to see how to do it specifically :)

[23:36] *** btyler left
[23:37] *** tgt left
[23:39] <raydiak> lue: it's pod2html, but looks like it's building up a Pod object to pass, not just source text, so it may not be as simple as we'd hope

[23:40] <lue> If it's building up an object to send through the rest of ::HTML, maybe it could be backported to that module? Seems like it'd be useful, I know of two projects that do or would use it :D

[23:42] *** Araq left
[23:43] <raydiak> I'm hoping it's just a choice, and that there are facilities to do that already...if not, then yes, they certainly should exist

[23:44] <lue> raydiak: it'd be nice if something like that were standardized, but I'm not too familiar with DOC stuff (which is where I'm guessing it would be)

[23:44] <raydiak> well, maybe there isn't yet: https://github.com/perl6/Pod-To-HTML/blob/master/lib/Pod/To/HTML.pm#L17

[23:47] <lue> I think that comment's more about the internal programming of that module, and less so using the module.

[23:47] <raydiak> *blink*...*reread*...yeah, I suppose I should slow down and carefully read words one at a time :)

[23:50] <raydiak> alright, break time, and then colorfullness, and then we'll see what comes next; thanks lue++ for giving me a few future targets to start aiming at while I'm moving in those directions anyway

[23:50] *** Adriaaan left
[23:51] <lue> no problem :)

[23:54] *** BenGoldberg joined
