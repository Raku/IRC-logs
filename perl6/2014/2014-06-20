[00:01] <Mouq> lizmat: Same, though for me it probably has something to do with my sleep schedule having shifted to begin around 5AM every day :/

[00:02] * lizmat is displaced -6h from her usual TZ

[00:02] <Mouq> That might do it :)

[00:10] *** xenoterracide_ joined
[00:10] *** btyler left
[00:11] *** jack_rabbit_ joined
[00:14] *** carlin left
[00:18] *** jnap joined
[00:22] *** dmol joined
[00:31] *** xenoterracide_ is now known as xenoterracide

[00:32] * xenoterracide back at poking getting this working https://github.com/xenoterracide/rakudo/compare/topic;annotations

[00:39] <lizmat> Mouq: it has nothing to do with .push (or unshift): it has to do with Parcel generation:

[00:39] <lizmat> r: my $c=42; my $a = $($c,1); $c=43; my $b = $($c,2); .perl.say for $a, $b

[00:39] <camelia> rakudo-{parrot,jvm,moar} 8812ca: OUTPUT«$(43, 1)␤$(43, 2)␤»

[00:40] <lizmat> r: my $c=42; my $a = $(+$c,1); $c=43; my $b = $(+$c,2); .perl.say for $a, $b

[00:40] <camelia> rakudo-{parrot,jvm,moar} 8812ca: OUTPUT«$(42, 1)␤$(43, 2)␤»

[00:40] <lizmat> r: my $c=42; my $a = $($c,1); $c=43; my $b = $(+$c,2); .perl.say for $a, $b

[00:40] <camelia> rakudo-{parrot,jvm,moar} 8812ca: OUTPUT«$(43, 1)␤$(43, 2)␤»

[00:40] <lizmat> r: my $c=42; my $a = $(+$c,1); $c=43; my $b = $($c,2); .perl.say for $a, $b

[00:40] <camelia> rakudo-{parrot,jvm,moar} 8812ca: OUTPUT«$(42, 1)␤$(43, 2)␤»

[00:42] <lizmat> ah, timotimo and Mouq already established that  :-)

[00:46] <timotimo> for my use case i kinda wish for a zip-latest combinator that doesn't require each supply to have pushed something once

[00:46] <timotimo> i *could* merge an initiator supply into both combined supplies, but that seems like a terrible hack

[00:46] <Mouq> std: &("sigilicious")

[00:46] <camelia> std 0f2049c: OUTPUT«ok 00:01 127m␤»

[00:47] * Mouq wonders what Code context would mean...

[00:47] *** dmol left
[00:48] <dalek> doc: 97c9057 | Mouq++ | lib/Language/variables.pod:

[00:48] <dalek> doc: Fix twigils table

[00:48] <dalek> doc: 

[00:48] <dalek> doc: The "=" messed up the pod parser

[00:48] <dalek> doc: review: https://github.com/perl6/doc/commit/97c9057873

[00:48] <dalek> doc: 17e8eaf | Mouq++ | lib/Language/variables.pod:

[00:48] <dalek> doc: Some adjustments and additions to variables.pod

[00:48] <dalek> doc: review: https://github.com/perl6/doc/commit/17e8eafa95

[00:49] <lizmat> timotimo: perhaps that should be the default behaviour

[00:51] <lizmat> with a named parameter to only return complete ?

[00:57] *** jnap left
[00:59] *** jnap joined
[00:59] *** colomon joined
[00:59] <colomon> aha!

[01:00] <colomon> the power of turning it off and back on again

[01:01] *** _thou left
[01:06] <lizmat> haha

[01:08] <colomon> it logged into #perl6 automatically and quickly.  

[01:08] *** ivanshmakov left
[01:11] *** btyler joined
[01:13] *** ivanshmakov joined
[01:16] *** jnap left
[01:17] *** Su-Shee_ joined
[01:18] *** araujo joined
[01:20] *** Su-Shee left
[01:20] <hoelzro> I think I found a bug: https://gist.github.com/hoelzro/4a904953f9d8de749185

[01:21] *** klapperl_ joined
[01:23] <xenoterracide> :/

[01:23] *** atroxaper joined
[01:24] *** klapperl left
[01:26] <Mouq> hoelzro: Smartmatch doesn't curry with *

[01:27] <Mouq> hoelzro: Use .grep({$_ ~~ TestRole}) or just .grep(TestRole) instead

[01:27] <Mouq> hoelzro: It's a definite WAT though

[01:28] *** atroxaper left
[01:28] <Mouq> m: say *.isa(Str)

[01:28] <camelia> rakudo-moar 8812ca: OUTPUT«WhateverCode.new()␤»

[01:28] <Mouq> m: say * ~~ Str

[01:28] <camelia> rakudo-moar 8812ca: OUTPUT«False␤»

[01:28] <Mouq> And that'll never match anything, since Anything ~~ False is False

[01:29] *** araujo left
[01:29] <Mouq> m: say * ~~ False # Why does this warn

[01:29] <camelia> rakudo-moar 8812ca: OUTPUT«Potential difficulties:␤    Smartmatch against False always fails; if you mean to test the topic for truthiness, use :!so or *.not or !* instead␤    at /tmp/uQh51csgZ7:1␤    ------> [32msay * ~~[33m⏏[31m False # Why does this warn[0m␤Whatever…»

[01:30] <Mouq> m: say * ~~ (False) # But this doesn't?

[01:30] <camelia> rakudo-moar 8812ca: OUTPUT«False␤»

[01:33] <hoelzro> oh, it doesn't?

[01:33] <hoelzro> ok, that's kinda good, then =)

[01:33] <hoelzro> good that it's not a bug, I mean

[01:44] <xenoterracide> what's :=

[01:44] <xenoterracide> not documented in operators

[01:44] *** rindolf joined
[01:44] <xenoterracide> I'm thinking it's just assignment

[01:47] <Mouq> xenoterracide: Binding

[01:48] <xenoterracide> what's the difference between that and assignment?

[01:48] <Mouq> xenoterracide: It's assignment, but less magical. It binds the variable directly to whatever's on the other side, rather than putting it in a container

[01:48] <Mouq> xenoterracide: http://doc.perl6.org/language/containers#Binding

[01:49] * Mouq will add it to operators.pod

[01:49] *** woolfy joined
[01:49] *** woolfy1 left
[01:51] <benabik> $x = $y  puts the value in $y into $x.  $x := $y makes $x and $y the same thing.

[01:51] <lizmat> m: my $a = 42; my $b := $a; say $b

[01:51] <camelia> rakudo-moar 8812ca: OUTPUT«42␤»

[01:51] <lizmat> m: my $a = 42; my $b := $a; say $b; $b = 43; say $a

[01:51] <camelia> rakudo-moar 8812ca: OUTPUT«42␤43␤»

[01:51] <benabik> lizmat++

[01:54] *** ivanshmakov left
[01:54] *** ivanshmakov joined
[01:54] <Mouq> benabik: :D can I steal your explaination and use it in operators.pod?

[01:55] <benabik> Mouq: Sure.  It's not the best explination, but it's succinct.

[01:56] <xenoterracide> Mouq: thanks, hmm immutable pointer... just trying to figure out what to compare this to in my brain

[01:57] <BenGoldberg> The := operator of perl6 is a bit like using the Devel::LexAlias module of perl5.

[01:57] <BenGoldberg> But more type-safe, of course.

[01:57] <xenoterracide> heh, I've never used that either

[01:59] <BenGoldberg> Or putting it another way, $x := $y of perl6 is similar to *x = \$y of perl5, except that it works with any type of $x, not just lexical variables.

[01:59] <lizmat> BenGoldberg: don't you mean Data::Alias ?

[02:09] *** hoverboard joined
[02:10] <dalek> doc: 9604d40 | Mouq++ | lib/Language/operators.pod:

[02:10] <dalek> doc: Add := and ::=. xenoterracide++ benabik++ lizmat++

[02:10] <dalek> doc: review: https://github.com/perl6/doc/commit/9604d400f3

[02:10] <dalek> doc: 34e002e | Mouq++ | / (2 files):

[02:10] <dalek> doc: Some adjustments and additions to "Using Objects"

[02:10] <dalek> doc: review: https://github.com/perl6/doc/commit/34e002eba2

[02:11] <Mouq> (Feel free to add to my definitions)

[02:13] <dalek> doc: 4f55f66 | Mouq++ | lib/Language/operators.pod:

[02:13] <dalek> doc: Fix formatto

[02:13] <dalek> doc: review: https://github.com/perl6/doc/commit/4f55f660aa

[02:21] <dalek> doc: bcf69ec | Mouq++ | htmlify.p6:

[02:21] <dalek> doc: If a link has no letters, it's probably a routine

[02:21] <dalek> doc: review: https://github.com/perl6/doc/commit/bcf69ecc44

[02:24] *** grondilu left
[02:25] <btyler> hi all. the first example in 'classtut' (with the task dependencies) is broken at the moment. I've found the handful of tweaks needed to get it working again, but I don't have a great 'idiomatic perl6' sense. would appreciate feedback/suggestions: https://github.com/kanatohodets/doc/commit/e115f9f9949a64041e3bd87ce43f5dd975675afb

[02:26] <btyler> Mouq++'s work on the docs lately got me looking at the issue list for them, this one seemed like LHF

[02:26] *** orafu left
[02:29] *** raiph left
[02:31] <benabik> I'm somewhat curious why you had to make the attributes public.

[02:33] *** cognominal left
[02:33] <btyler> me too. from the baby perl perspective, it just "didn't work" with private ones. I'll put it back in that state to grab the errors

[02:34] <btyler> for the callback, I got 'Cannot invoke this object (REPR: Uninstantiable, cs = 0)' on the line where it gets called

[02:34] <btyler> flipping it public fixed that

[02:34] <btyler> well, public + accessor method

[02:35] <btyler> I suppose I should try r-j

[02:35] <btyler> hm, indeed, r-m specific bug

[02:36] *** noganex joined
[02:38] <Mouq> :/ Weird... also btyler++ :D

[02:38] <btyler> wrong again. cannot invoke this object on r-j as well. not sure what the deal there is

[02:39] *** noganex_ left
[02:41] *** cognominal joined
[02:45] *** dayangkun_ joined
[02:52] <Mouq> btyler: Try "has &!callback = {;}"

[02:53] <Mouq> m: *()

[02:53] <camelia> rakudo-moar 8812ca: OUTPUT«Cannot find method 'postcircumfix:<( )>'␤  in block  at /tmp/D_xqqqpapO:1␤␤»

[02:54] <xenoterracide> $obj, :$local, :$excl, :$all what does the : by you? does that mean you can pass those in any order so long as you specify with some fat arrow named variant?

[02:54] <xenoterracide> s/by/buy

[02:54] <Mouq> xenoterracide: Yup

[02:55] <Mouq> We should have an Adverbs language doc

[02:55] <xenoterracide> been reading s02

[02:55] *** raiph joined
[02:57] <Mouq> http://perlcabal.org/syn/S02.html#Adverbial_Pair_forms

[02:57] <Mouq> But in signatures you can't use the fat arrow form

[02:57] <Timbus> m: my $foo = 'bar'; say (:$foo)

[02:57] <camelia> rakudo-moar 8812ca: OUTPUT«"foo" => "bar"␤»

[02:58] <Mouq> m: sub add-two (num => $num) { $num + 2 }; add-two num => 4

[02:58] <camelia> rakudo-moar 8812ca: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/m3c0RsRypF␤Preceding context expects a term, but found infix > instead␤at /tmp/m3c0RsRypF:1␤------> [32msub add-two (num =>[33m⏏[31m $num) { $num + 2 }; add-two num => 4[0m␤»

[02:58] <Mouq> m: sub add-two (:$num) { $num + 2 }; say add-two num => 4

[02:58] <camelia> rakudo-moar 8812ca: OUTPUT«6␤»

[02:58] <Mouq> m: sub add-two (:$num) { $num + 2 }; say add-two :num(4)

[02:58] <camelia> rakudo-moar 8812ca: OUTPUT«6␤»

[02:58] <Mouq> m: sub add-two (:$num) { $num + 2 }; say add-two :4num

[02:58] <camelia> rakudo-moar 8812ca: OUTPUT«6␤»

[02:59] <Mouq> Ok, that last one is kind of abuse

[02:59] <Timbus> its a scary one to look at

[03:00] <Mouq> m: my &x; &x()

[03:00] <camelia> rakudo-moar 8812ca: OUTPUT«Cannot invoke this object (REPR: Uninstantiable, cs = 0)␤  in block  at /tmp/DcGDGMLcsU:1␤␤»

[03:00] <xenoterracide> any feature powerful enough will be abused

[03:00] <benabik> s/powerful enough //

[03:00] <xenoterracide> heh

[03:08] <zengargoyle> ... sufficiently powerful feature ... indistinguishible from magic ...

[03:08] <benabik> use DWIM; doit();

[03:11] *** benabik left
[03:12] *** BenGoldberg left
[03:15] *** molaf_ left
[03:19] *** atroxaper joined
[03:23] *** _thou joined
[03:24] *** xenoterracide left
[03:26] *** kaare_ joined
[03:40] <dalek> doc: ced282d | Mouq++ | lib/Language/objects.pod:

[03:40] <dalek> doc: More fiddling with objects.pod

[03:40] <dalek> doc: review: https://github.com/perl6/doc/commit/ced282d21d

[03:48] *** atroxaper left
[03:48] *** atroxaper joined
[03:53] *** atroxaper left
[03:53] <btyler> ok, pretty sure the basic issue is that you can't use auto-bind private attributes through adverbs in bless

[03:54] <btyler> so &!callback and @!dependencies were empty and defaulting to the type object that they were initialized as

[03:55] <btyler> that's something you can do with BUILD in the signature, but that gives up the slurpy 'dependencies' and the nice little tree structure for creating the task objects

[03:56] *** atroxaper joined
[03:56] <btyler> Mouq, benabik ^

[04:07] <Timbus> submethod BUILD(:&!callback, :@!dependencies){ }

[04:07] <Timbus> makes it all work

[04:07] <btyler> except for the positional params, right?

[04:07] <Timbus> i only ran the example

[04:08] <btyler> hum, objects.pod said that you can't have positional arguments to BUILD, which is what the example is

[04:08] <btyler> oh, you mean keeping the new 

[04:08] <Timbus> you keep the new

[04:08] <Timbus> you just let build set the private attributes

[04:09] <btyler> right

[04:09] <Timbus> you dont need any code inside build. its uh, magical

[04:09] <btyler> right, saw that in objects.pod

[04:09] <btyler> ok, yeah, that seems nicest

[04:14] *** _thou left
[04:14] *** [Sno] left
[04:17] <Timbus> i find it easier to just make attributes public, i guess.

[04:18] *** kaare_ left
[04:21] <Mouq> (BUILD isn't that magical)

[04:22] *** raiph left
[04:22] <Mouq> m: class Foo { has $.bar; class baz (:$!baz) {} }; my Foo $foo .= new; $foo.baz :bar(42); say $foo

[04:22] <camelia> rakudo-moar 8812ca: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/vddfCTymPZ␤Unable to parse class definition␤at /tmp/vddfCTymPZ:1␤------> [32mclass Foo { has $.bar; class baz [33m⏏[31m(:$!baz) {} }; my Foo $foo .= new; $foo.[0m␤    expecting any of:…»

[04:23] <Mouq> m: class Foo { has $.bar; method baz (:$!baz) {} }; my Foo $foo .= new; $foo.baz :bar(42); say $foo

[04:23] <camelia> rakudo-moar 8812ca: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/ibXB5MxR3e␤Attribute $!baz not declared in class Foo␤at /tmp/ibXB5MxR3e:1␤------> [32moo { has $.bar; method baz (:$!baz) {} }[33m⏏[31m; my Foo $foo .= new; $foo.baz :bar(42);[0m␤    e…»

[04:23] <Mouq> Blah, sorry

[04:23] <Mouq> m: class Foo { has $.bar; method baz (:$!bar) {} }; my Foo $foo .= new; $foo.baz :bar(42); say $foo

[04:23] <camelia> rakudo-moar 8812ca: OUTPUT«Foo.new(bar => 42)␤»

[04:25] <btyler> right, I just added some doc to classtut about the BUILD param-attribute binding trick

[04:25] <btyler> is there a way to link to a subheading of another piece of doc?

[04:25] <Mouq> L<...>?

[04:26] <Mouq> L</path/to/doc#subheading>

[04:26] <Mouq> I wish there was a better way, but that's the best you can do for now

[04:26] *** _thou joined
[04:27] <btyler> ok

[04:27] <btyler> path relative to the originating doc, or relative to the doc repo root?

[04:32] <Timbus> i know its not BUILD being magical here. i just feel it would have been more sensible to be more simple.  has $!var can init;  .. or something. ¯\(°_o)/¯

[04:33] <Mouq> btyler: Do it relative to root

[04:34] <btyler> Mouq: great, thanks

[04:34] <Mouq> btyler: Stuff gets copied between documents, and its easy for a link to point to the wrong place if its relative

[04:34] <btyler> ok. I saw |/ syntax, so I did this: L<objects|/lib/Language/objects#Object Construction>

[04:34] <btyler> seem reasonable?

[04:35] <Mouq> L<objects|/language/objects#Object Construction>

[04:35] <btyler> roger

[04:35] <Mouq> btyler++

[04:39] <btyler> Mouq: https://github.com/perl6/doc/pull/19

[04:39] *** kaare_ joined
[04:39] <btyler> I think I actually have a commit bit there, but last time was just some spelling correction, I'd rather have a set of eyes on doc for things that I'm no expert in

[04:41] *** labster left
[04:43] <dalek> doc: 4356451 | Mouq++ | lib/Language/objects.pod:

[04:43] <dalek> doc: More tweeks, and role application example

[04:43] <dalek> doc: review: https://github.com/perl6/doc/commit/4356451271

[04:44] <dalek> doc: e115f9f | (Ben Tyler)++ | lib/Language/classtut.pod:

[04:44] <dalek> doc: Small tweaks to un-bitrot classtut's first example.

[04:44] <dalek> doc: 

[04:44] <dalek> doc: Some of these tweaks may change the message that the example is

[04:44] <dalek> doc: sending, so this commit is mostly to show a changeset to the fine

[04:44] <dalek> doc: people of #perl6 for feedback.

[04:44] <dalek> doc: review: https://github.com/perl6/doc/commit/e115f9f994

[04:44] <dalek> doc: d99e1cf | (Ben Tyler)++ | lib/Language/classtut.pod:

[04:44] <dalek> doc: Improve classtut example again

[04:44] <dalek> doc: 

[04:44] <dalek> doc: * Bring back private attributes (BUILD submethod needed to bind them properly).

[04:44] <dalek> doc: * Add some doc explaining the BUILD usage in the example.

[04:44] <dalek> doc: review: https://github.com/perl6/doc/commit/d99e1cfad0

[04:44] <dalek> doc: c4ba4e6 | (Alexander Moquin)++ | lib/Language/classtut.pod:

[04:44] <dalek> doc: Merge pull request #19 from kanatohodets/master

[04:44] <dalek> doc: 

[04:44] <dalek> doc: Fix up classtut example

[04:44] <dalek> doc: review: https://github.com/perl6/doc/commit/c4ba4e6b51

[04:44] <Mouq> I like it :)

[04:44] <btyler> woo! thanks for the review

[04:45] <Mouq> I'll have it sync'd up in ~8 min

[04:45] <Mouq> Oh, wait, jk

[04:46] <Mouq> Sync'd :)

[04:47] *** atroxaper left
[04:48] <btyler> awesome

[05:06] *** Alina-malina left
[05:08] *** raiph joined
[05:13] <dalek> doc: 917136d | Mouq++ | lib/Language/ (2 files):

[05:13] <dalek> doc: Move Quoting Constructs to its own document

[05:13] <dalek> doc: review: https://github.com/perl6/doc/commit/917136d313

[05:14] *** btyler left
[05:14] *** atroxaper joined
[05:20] <dalek> doc: e311356 | Mouq++ | lib/Language/operators.pod:

[05:20] <dalek> doc: Reference Term#Pair in infix => definition

[05:20] <dalek> doc: review: https://github.com/perl6/doc/commit/e31135683f

[05:24] *** telex left
[05:26] *** telex joined
[05:29] * Mouq discovers `ack --bar`

[05:31] *** gfldex joined
[05:32] *** atroxaper left
[05:32] *** atroxaper joined
[05:33] *** atroxaper left
[05:33] *** atroxaper_ joined
[05:38] <PerlJam> Mouq: it's a relatively new addition I think. (at least I don't remember it in the 1.xx versions)

[05:44] <Mouq> PerlJam: Maybe once they decided to add it, they realized it was worthy of a major version change and upped to Ack 2

[05:46] <PerlJam> no, petdance made ack 2 for much nobler reasons.  But I can see how a version bump would be a natural place to include the --bar option.

[05:46] <Mouq> petdance++ in any case

[05:51] *** virtualsue joined
[05:52] *** atroxaper_ left
[05:52] *** atroxaper joined
[05:53] *** atroxaper left
[05:53] *** atroxaper_ joined
[05:56] *** anaeem1 joined
[06:08] *** [Sno] joined
[06:20] *** labster joined
[06:20] *** woolfy left
[06:20] *** lizmat left
[06:23] *** woolfy joined
[06:32] *** sftp joined
[06:34] *** lizmat joined
[06:53] *** igorsutton joined
[06:58] *** FROGGS joined
[06:58] <dalek> doc: f2b0a68 | Mouq++ | lib/Type/Str.pod:

[06:58] <dalek> doc: Update Str a bit

[06:58] <dalek> doc: review: https://github.com/perl6/doc/commit/f2b0a68818

[06:58] <dalek> doc: 7920acd | Mouq++ | lib/Language/terms.pod:

[06:58] <dalek> doc: Add Whatever to terms.pod

[06:58] <dalek> doc: review: https://github.com/perl6/doc/commit/7920acd3e9

[06:59] <masak> good morning, #perl6

[07:02] <FROGGS> o/

[07:02] *** lizmat left
[07:04] <FROGGS> who volunteers to port Archive::Tar?

[07:04] *** zakharyas joined
[07:05] <FROGGS> anybody?

[07:05] * FROGGS mumbles

[07:05] *** woolfy left
[07:07] *** jercos left
[07:08] <FROGGS> .tell lizmat this is the state of panda+CPAN: https://gist.github.com/FROGGS/197b7747f3594079712a - now I am going to port Archive::Tar

[07:08] <yoleaux> FROGGS: I'll pass your message to lizmat.

[07:08] *** lizmat joined
[07:09] *** jercos joined
[07:11] *** virtualsue left
[07:12] *** zakharyas1 joined
[07:13] *** zakharyas left
[07:14] *** nnunley left
[07:18] *** lizmat_ joined
[07:19] *** lizmat left
[07:20] *** lizmat_ left
[07:21] *** lizmat joined
[07:21] *** woolfy joined
[07:28] <sergot> morning o/

[07:28] <FROGGS> morning

[07:28] <atroxaper_> Common operation section in S07 is empty. Is there something like q{ [1, 2, 3].last == 3 } ?

[07:29] <atroxaper_> morning!

[07:29] <atroxaper_> m: my @d = <1 2 3>; say @d.last;

[07:29] <camelia> rakudo-moar 8812ca: OUTPUT«No such method 'last' for invocant of type 'Array'␤  in block  at /tmp/RoWpUwjxVA:1␤␤»

[07:30] <moritz> m: my @d = 1, 2, 3; say @d[*-1]

[07:30] <camelia> rakudo-moar 8812ca: OUTPUT«3␤»

[07:30] <atroxaper_> Oh... I didn't thought about *. I tried just '-1' ;)

[07:30] <atroxaper_> moritz: thatnks!

[07:31] <FROGGS> but is should warn with a nice message..

[07:31] <moritz> m: my @d; @d[-1]

[07:31] <camelia> rakudo-moar 8812ca: OUTPUT«Unhandled exception: Cannot use negative index -1 on Array␤   at src/gen/m-CORE.setting:11395  (/home/p6eval/rakudo-inst-2/languages/perl6/runtime/CORE.setting.moarvm:throw:117)␤ from src/gen/m-CORE.setting:12845  (/home/p6eval/rakudo-inst-2/languages/…»

[07:31] <FROGGS> m: my @a = ^10; say @a[-1]

[07:31] <camelia> rakudo-moar 8812ca: OUTPUT«===SORRY!===␤Cannot use negative index -1 on Array␤»

[07:31] <FROGGS> :/

[07:32] <FROGGS> p: my @a = ^10; say @a[-1]

[07:32] <camelia> rakudo-parrot 8812ca: OUTPUT«Cannot use negative index -1 on Array␤  in method gist at gen/parrot/CORE.setting:12776␤  in method gist at gen/parrot/CORE.setting:1038␤  in sub say at gen/parrot/CORE.setting:13704␤  in sub say at gen/parrot/CORE.setting:13691␤  in block  at …»

[07:32] <atroxaper_> moritz: Yes. I think about empty Array...

[07:32] <moritz> atroxaper_: @d && @d[*-1]

[07:32] <atroxaper_> moritz: Right!

[07:33] * FROGGS fixing...

[07:33] <atroxaper_> FROGGS++

[07:34] <FROGGS> std: my @a = ^10; say @a[-1]

[07:34] <camelia> std 0f2049c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of [-1] subscript to access from end of array; in Perl 6 please use [*-1] at /tmp/rZBrx32vqz line 1:␤------> [32mmy @a = ^10; say @a[-1][33m⏏[31m<EOL>[0m␤Parse failed␤FAILED 00:01 126m␤»

[07:36] <FROGGS> m: my @a = ^10; say (try @a[-1]).WHAT # also wants to be typed I guess...

[07:36] <camelia> rakudo-moar 8812ca: OUTPUT«(Failure)␤»

[07:37] <moritz> m:  my @a = ^10; say @a[-1].payload

[07:37] <camelia> rakudo-moar 8812ca: OUTPUT«===SORRY!===␤Cannot use negative index -1 on Array␤»

[07:37] <moritz> m:  my @a = ^10; say @a[-1].exception

[07:37] <camelia> rakudo-moar 8812ca: OUTPUT«Cannot use negative index -1 on Array␤  in block  at src/gen/m-CORE.setting:12851␤  in sub postcircumfix:<[ ]> at src/gen/m-CORE.setting:2459␤  in block  at /tmp/p8fliazcy2:1␤␤»

[07:37] <moritz> m:  my @a = ^10; say @a[-1].exception.^name

[07:37] <camelia> rakudo-moar 8812ca: OUTPUT«X::AdHoc␤»

[07:39] *** pecastro left
[07:41] *** lizmat_ joined
[07:42] *** lizmat left
[07:43] *** dmol joined
[07:43] *** Fabian____ joined
[07:45] <Fabian____> Hi there. Has anyone used the DBIish module to connect to an SQLite database?

[07:45] *** darutoko joined
[07:45] <FROGGS> isnt sqlite even in one of its tests?

[07:46] <Fabian____> I'm not sure. I am looking for an example of how to get a connection to a SQLite db.

[07:47] <FROGGS> Fabian____: https://github.com/perl6/DBIish/blob/master/t/40-sqlite-common.t

[07:47] <FROGGS> and https://github.com/perl6/DBIish/blob/master/t/99-common.pl6

[07:50] <FROGGS> perhaps we could post an example to https://github.com/perl6/DBIish/wiki ?

[07:50] <Fabian____> Thank you. I think that will help me.

[07:51] <Fabian____> An example in the wiki would be nice.

[07:52] <moritz> Fabian____: I'd put such things in the README... do you want to contribute one?

[07:53] <Fabian____> Sure.

[07:53] <dalek> roast: 130b447 | (Tobias Leich)++ | S (2 files):

[07:53] <dalek> roast: Revert "fudge failing tests, only for release purposes"

[07:53] <dalek> roast: 

[07:53] <dalek> roast: Release was done, problems need to be fixed now.

[07:53] <dalek> roast: This reverts commit f7b42fbbe918589dfbed9d938f80276c9b7c6132.

[07:53] <dalek> roast: review: https://github.com/perl6/roast/commit/130b44706c

[07:56] <Fabian____> Do i just add an example to the readme and send it to you?

[07:57] *** atroxaper_ left
[07:57] *** atroxaper joined
[07:57] <FROGGS> fork the repo, modify and send a pull request... or moritz gives you a commit bit

[07:58] <Fabian____> ok.

[07:58] <moritz> Fabian____: what's your github ID?

[08:00] <Fabian____> The id is the user name? That is fbou.

[08:00] *** atroxaper left
[08:01] *** atroxaper joined
[08:10] <moritz> Fabian____: ok, you can push to DBIish now

[08:10] <moritz> (and a bunch of other repos)

[08:10] <Fabian____> Thanks.

[08:18] *** spider-mario joined
[08:21] *** nnunley joined
[08:22] *** rindolf left
[08:23] *** rindolf joined
[08:24] <dalek> ecosystem: f942537 | softmoth++ | META.list:

[08:24] <dalek> ecosystem: Add Template::Mustache to META.list

[08:24] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/f942537fba

[08:25] *** Sqirrel joined
[08:25] *** _thou is now known as thou

[08:26] *** nnunley left
[08:27] *** mtj left
[08:27] <thou> ^ That's me, I'm open to any feedback on it. In particular, I'd like to know if I can reduce backtracking and make the grammar cleaner.

[08:27] <thou> But at the moment I need to quit and go to bed!

[08:27] <dalek> rakudo/nom: ec743ce | (Tobias Leich)++ | src/core/ (4 files):

[08:27] <dalek> rakudo/nom: throw a X::Subscript::FromEnd for @foo[-1]

[08:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ec743cee4f

[08:27] <thou> o/ good night, #perl6

[08:28] *** mtj joined
[08:33] *** atroxaper left
[08:33] *** atroxaper joined
[08:33] *** Su-Shee_ is now known as Su-Shee

[08:37] *** atroxaper left
[08:37] *** atroxaper joined
[08:39] *** Sqirrel left
[08:50] *** SamuraiJack joined
[08:55] *** thou left
[08:58] *** pecastro joined
[08:58] *** SamuraiJack left
[09:00] *** kaleem joined
[09:00] *** lizmat joined
[09:02] *** lizmat_ left
[09:07] *** Fabian____ left
[09:12] *** donaldh joined
[09:22] <donaldh> o/ perl6

[09:24] <yakudzo> o/

[09:26] <FROGGS> o/

[09:30] <atroxaper> o/

[09:35] *** jack_rabbit_ left
[09:36] *** hoverboard left
[09:38] *** raiph left
[09:46] * donaldh blogged: http://donaldh.github.io/blog/2014/06/20/embedding-perl-6-in-eclipse/

[09:47] *** Psyche^_ joined
[09:49] <moritz> donaldh++

[09:49] * moritz tweets it

[09:51] *** Psyche^ left
[09:53] <FROGGS> donaldh++

[09:58] *** mr-foobar left
[09:58] *** mr-foobar joined
[10:00] *** Rotwang joined
[10:01] *** SevenWolf left
[10:09] *** tokuhirom left
[10:10] *** nnunley joined
[10:11] *** tokuhirom joined
[10:13] <atroxaper> donaldh++

[10:13] <atroxaper> donaldh: I have tried do something like that for IntellijIDEA

[10:15] *** nnunley left
[10:19] <donaldh> It should be possible to create a simple jar / OSGi bundle that can reference an existing rakudo installation. That should be useable anyhwere

[10:21] <donaldh> The perl6-eclipse-plugin relies on  Eclipse-BundleShape: dir so that I can embed the installation and still resolve files off the filesystem

[10:21] <donaldh> I think it is possible for an OSGi bundle to unpack into a 'bundle repository' directory but I have not tried.

[10:22] <donaldh> we could also repack all of the module jars into a single perl6.jar so that they can be easily classloaded.

[10:22] <donaldh> many possibilities

[10:38] <dalek> panda: 4073c98 | (Kamil Kułaga)++ | t/builder.t:

[10:38] <dalek> panda: typo in test

[10:38] <dalek> panda: review: https://github.com/tadzik/panda/commit/4073c98d8f

[10:38] <dalek> panda: f184335 | (Tobias Leich)++ | t/builder.t:

[10:38] <dalek> panda: Merge pull request #86 from teodozjan/patch-1

[10:38] <dalek> panda: 

[10:38] <dalek> panda: typo in test messaage

[10:38] <dalek> panda: review: https://github.com/tadzik/panda/commit/f18433530b

[10:47] *** atroxaper left
[10:47] *** atroxaper joined
[10:51] *** atroxaper left
[10:56] *** atroxaper joined
[10:56] *** salv0 left
[10:59] *** atroxaper left
[11:00] *** atroxaper joined
[11:02] <timotimo> lizmat: i was told that wouldn't be a zip if it behaved like that by default

[11:04] *** atroxaper left
[11:05] *** anaeem1 left
[11:05] *** anaeem1 joined
[11:12] *** salv0 joined
[11:46] *** newbie_Perl6 joined
[11:48] <newbie_Perl6> something incosistent with the specs

[11:48] <newbie_Perl6> p: Cool.HOW

[11:48] <camelia> rakudo-parrot ec743c: ( no output )

[11:49] <newbie_Perl6> Cool.HOW.HOW

[11:49] <newbie_Perl6> p: Cool.HOW.HOW

[11:49] <camelia> rakudo-parrot ec743c: ( no output )

[11:49] <newbie_Perl6> p: Cool.HOW.HOW.HOW

[11:49] <camelia> rakudo-parrot ec743c: ( no output )

[11:50] <newbie_Perl6> why no output in camelia?

[11:52] <newbie_Perl6> p: '1,2,3' ~~ m / <digit>+% ',' /

[11:52] <camelia> rakudo-parrot ec743c: ( no output )

[11:53] <newbie_Perl6> p: '1,2,3' ~~ m / <digit>+%% ',' /

[11:53] <camelia> rakudo-parrot ec743c: ( no output )

[11:56] <newbie_Perl6> p: '1,2,3,' ~~ m / <digit>+% ',' /

[11:56] <camelia> rakudo-parrot ec743c: ( no output )

[11:56] <FROGGS> newbie_Perl6: you have to 'say' it

[11:56] <newbie_Perl6> AHA~

[11:56] <FROGGS> m: say Cool.HOW

[11:56] <camelia> rakudo-moar ec743c: OUTPUT«Perl6::Metamodel::ClassHOW.new()␤»

[11:56] <FROGGS> m: say Cool.HOW.HOW

[11:57] <camelia> rakudo-moar ec743c: OUTPUT«No such method 'gist' for invocant of type 'NQPClassHOW'␤  in sub say at src/gen/m-CORE.setting:13761␤  in block  at /tmp/0mFlgSYc7u:1␤␤»

[11:57] *** psch joined
[11:57] <FROGGS> ahh

[11:57] <psch> hi #perl6

[11:57] <FROGGS> hi psch 

[11:57] <FROGGS> m: say '1,2,3,' ~~ m / <digit>+% ',' /

[11:57] <camelia> rakudo-moar ec743c: OUTPUT«｢1,2,3｣␤ digit => ｢1｣␤ digit => ｢2｣␤ digit => ｢3｣␤␤»

[11:57] <psch> i've decided i'm not being useful by poking at all those low-level vm-specific things 

[11:57] <newbie_Perl6> thank you FROGGs

[11:58] <FROGGS> newbie_Perl6: you're welcome

[11:58] <psch> NativeCall works if i supply specific native types afaict, so i'll just skip the tests for installing it with panda

[11:58] <FROGGS> psch: the are a lot of high level things waiting too :o)

[11:58] <FROGGS> yes, that one is tricky

[11:58] <FROGGS> (even when it doesn't look like on the first glance)

[12:00] <psch> FROGGS: yes, i have no idea how to figure out where Moar gets the nativesize for the P6int repr, no matter if it's explicit or not

[12:00] <psch> i think that would be the place to start

[12:00] <FROGGS> yes, and that is also the place where I failed last time

[12:01] <newbie_Perl6> m: say Str.^attributes

[12:01] <camelia> rakudo-moar ec743c: OUTPUT«No such method 'gist' for invocant of type 'BOOTSTRAPATTR'␤  in method gist at src/gen/m-CORE.setting:7178␤  in sub say at src/gen/m-CORE.setting:13755␤  in block  at /tmp/bPm3aET6Tw:1␤␤»

[12:01] <FROGGS> p: say Str.^attributes

[12:01] <camelia> rakudo-parrot ec743c: OUTPUT«No such method 'gist' for invocant of type 'BOOTSTRAPATTR'␤  in method gist at gen/parrot/CORE.setting:7125␤  in method gist at gen/parrot/CORE.setting:1038␤  in sub say at gen/parrot/CORE.setting:13714␤  in sub say at gen/parrot/CORE.setting:137…»

[12:02] <FROGGS> m: say Str.^attributes>>.Str

[12:02] <camelia> rakudo-moar ec743c: OUTPUT«No such method 'Str' for invocant of type 'BOOTSTRAPATTR'␤  in method dispatch:<hyper> at src/gen/m-CORE.setting:1244␤  in block  at /tmp/6zbqYcenqt:1␤␤»

[12:02] <FROGGS> hmpf

[12:02] <moritz> m: say ~<<Str.^attributes

[12:02] <camelia> rakudo-moar ec743c: OUTPUT«No such method 'item' for invocant of type 'BOOTSTRAPATTR'␤  in method message at src/gen/m-CORE.setting:12543␤  in sub deepmap at src/gen/m-CORE.setting:17547␤  in sub METAOP_HYPER_PREFIX at src/gen/m-CORE.setting:17493␤  in block  at /tmp/mbo2Gsl…»

[12:02] <moritz> wtf

[12:03] *** dmol left
[12:05] <newbie_Perl6> m: say Cool.HOW.HOW.HOW

[12:05] <camelia> rakudo-moar ec743c: OUTPUT«No such method 'gist' for invocant of type 'KnowHOW'␤  in sub say at src/gen/m-CORE.setting:13761␤  in block  at /tmp/WF_tGsI0AE:1␤␤»

[12:07] <newbie_Perl6> Can anyone fix it?

[12:07] <moritz> I'm sure somebody can, yes

[12:08] <newbie_Perl6> that's great. it's too hard for me.

[12:10] *** sqirrel joined
[12:10] <timotimo> well, a KnowHOW is a very low-level thing that's only needed for bootstrapping, and if you're trying to introspect that deep, you're doing stuff you maybe shouldn't be doing

[12:10] <colomon> donaldh++ indeed!

[12:11] <newbie_Perl6> it's inconsistent with the specs

[12:12] <moritz> aye; it shouldn't leak out

[12:13] <newbie_Perl6> donaldh++ , i like the idea of the single perl6.jar

[12:14] *** FROGGS left
[12:14] <newbie_Perl6> yes moritz, that's the very point i want to say.

[12:15] *** mr-foobar left
[12:15] *** mr-foobar joined
[12:17] <betterworld> say I've built a parser using Perl 6 grammars.  How do I get the line number of a parse error?

[12:17] *** rindolf left
[12:18] *** rindolf joined
[12:27] <dalek> rakudo-star-daily: d29735b | coke++ | log/ (14 files):

[12:27] <dalek> rakudo-star-daily: today (automated commit)

[12:27] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/d29735b006

[12:30] *** Khisanth left
[12:30] <dalek> roast: a3db7d2 | (Pepe Schwarz)++ | S06-signature/introspection.t:

[12:30] <dalek> roast: Test narrower for RT #69492

[12:30] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=69492

[12:30] <dalek> roast: review: https://github.com/perl6/roast/commit/a3db7d281a

[12:36] *** kaare_ left
[12:39] <psch> m: sub foo(:$) { }; say &foo.signature.params[0].name # related to the ticket above

[12:39] <camelia> rakudo-moar ec743c: OUTPUT«Failed to write to filehandle: NULL string given␤  in method print at src/gen/m-CORE.setting:14014␤  in sub say at src/gen/m-CORE.setting:13750␤  in block  at /tmp/WZeahPqi3B:1␤␤»

[12:39] <psch> segfaults in the Moar repl

[12:40] <psch> checking for definedness of $!variable_name in Parameter.name is enough here? or should the Parameter get a Str for $!variable_name even if it's empty?

[12:41] *** xusia joined
[12:43] *** newbie_Perl6 left
[12:44] *** Khisanth joined
[12:45] *** Khisanth is now known as Guest51034

[12:47] *** ChoHag left
[12:47] <[Coke]> ... did someone really unfudge failing tests in roast so they fail again? that seems wrong.

[12:47] <[Coke]> Instead, there should be a ticket, and the test should stay fudged.

[12:48] <[Coke]> (this was a post-release unfudge)

[12:50] *** Guest51034 is now known as Khisanth

[12:53] *** prevost joined
[12:53] <psch> oh, for consistency an anon named should have a Str bound to its $!variable_name and that string should just contain the sigil

[12:53] <psch> m: sub foo(:$bar) { }; &foo.signature.params[0].name.say

[12:53] <camelia> rakudo-moar ec743c: OUTPUT«$bar␤»

[12:53] <psch> so for foo(:$) { } it should print '$'

[12:54] <moritz> aye

[12:54] * psch is horribly reliant on rubber-ducking it seems.

[12:58] *** BenGoldberg joined
[13:00] *** araujo joined
[13:03] <colomon> I'm getting really weird results trying to run my smoke tests on rakudo-parrot.  This time around:

[13:03] <colomon> ==> Installing JSON::Tiny

[13:03] <colomon> Segmentation fault (core dumped)

[13:04] *** skids left
[13:06] *** brrt joined
[13:06] *** brrt left
[13:07] *** skids joined
[13:10] *** FROGGS joined
[13:10] *** guru joined
[13:10] *** guru is now known as jr_

[13:10] *** jr_ is now known as ajr_

[13:15] *** kaleem left
[13:16] *** molaf joined
[13:18] *** fhelmberger left
[13:23] *** btyler joined
[13:26] *** jnap joined
[13:27] *** anaeem___ joined
[13:28] *** [Sno] left
[13:29] *** anaeem1 left
[13:37] *** sqirrel left
[13:42] *** kaare_ joined
[13:45] *** btyler_ joined
[13:47] *** btyler left
[13:51] *** thou joined
[13:51] *** daniel-s joined
[13:54] *** sjn_ joined
[13:56] *** thou left
[14:00] *** rindolf left
[14:03] *** treehug88 joined
[14:04] *** sjn_ left
[14:13] *** daniel-s left
[14:20] *** anaeem___ left
[14:23] <hoelzro> is this a bug? https://gist.github.com/hoelzro/2a6de4f56618754c6de2

[14:29] *** thou joined
[14:30] *** anaeem1 joined
[14:31] <timotimo> it could very well be that the method you find there is not, in fact, a multi method, but the proto method that's automatically generated

[14:31] <[Coke]> m: class Foo { multi method test(Str $) { } multi method test(Str $) { } }

[14:31] <camelia> rakudo-moar ec743c: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/35qYQOEK_q␤Two terms in a row␤at /tmp/35qYQOEK_q:1␤------> [32mlass Foo { multi method test(Str $) { } [33m⏏[31mmulti method test(Str $) { } }[0m␤    expecting any of:␤        statem…»

[14:31] <[Coke]> m: class Foo { multi method test(Str $) { } ; multi method test(Str $) { } }

[14:31] <camelia> rakudo-moar ec743c: ( no output )

[14:31] <timotimo> should that work?

[14:31] <hoelzro> it makes sense that a proto is automatically generated, but shouldn't that proto.multi be true?

[14:32] <[Coke]> shouldn't that be a compile time error with the duplicated sig?

[14:32] <timotimo> could very well be

[14:32] *** anaeem1__ joined
[14:32] * hoelzro consults source

[14:33] *** anaeem1 left
[14:34] *** treehug8_ joined
[14:34] *** treehug8_ left
[14:35] *** treehug88 left
[14:35] <FROGGS> there are no compile time errors about multiple sigs atm

[14:35] *** treehug88 joined
[14:35] *** treehug88 left
[14:35] *** anaeem1_ joined
[14:36] <FROGGS> std: multi a { }; multi a { }

[14:36] <camelia> std 0f2049c: OUTPUT«ok 00:01 123m␤»

[14:36] <psch> m: sub foo(:($)!) { say "ok" }; say baz :<1>; say baz :''<1> # ...how?

[14:36] <camelia> rakudo-moar ec743c: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/jaxTpGjri_␤Two terms in a row␤at /tmp/jaxTpGjri_:1␤------> [32m)!) { say "ok" }; say baz :<1>; say baz [33m⏏[31m:''<1> # ...how?[0m␤    expecting any of:␤        argument list␤    …»

[14:36] *** anaeem1__ left
[14:36] *** treehug88 joined
[14:36] *** treehug88 left
[14:36] <psch> both calls (obviously?) complain about "Required named parameter '' not passed"

[14:37] <psch> i can't find anything specced about required anon nameds

[14:37] *** treehug88 joined
[14:37] <psch> (the first actually only complains, the seconds doesnt parse..)

[14:37] <FROGGS> m: say (:<1>)

[14:37] <camelia> rakudo-moar ec743c: OUTPUT«1␤»

[14:37] <FROGGS> m: say (:<1>).perl

[14:37] *** treehug88 left
[14:37] <camelia> rakudo-moar ec743c: OUTPUT«"1"␤»

[14:37] <FROGGS> m: say (:''<1>).perl

[14:37] <camelia> rakudo-moar ec743c: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/dxW986CDuH␤Bogus statement␤at /tmp/dxW986CDuH:1␤------> [32msay ([33m⏏[31m:''<1>).perl[0m␤    expecting any of:␤        semicolon list␤        prefix or term␤        prefix or me…»

[14:37] *** bluescreen10 joined
[14:37] <psch> m: sub foo(:($)!) { say "ok" }; baz (:<1>)

[14:37] <camelia> rakudo-moar ec743c: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/MBmpg1swaZ␤Undeclared routine:␤    baz used at line 1. Did you mean 'bag'?␤␤»

[14:37] <FROGGS> m: say (:''(<1>)).perl

[14:37] <camelia> rakudo-moar ec743c: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/v1LovvjlM9␤Bogus statement␤at /tmp/v1LovvjlM9:1␤------> [32msay ([33m⏏[31m:''(<1>)).perl[0m␤    expecting any of:␤        semicolon list␤        prefix or term␤        prefix or …»

[14:37] <psch> m: sub foo(:($)!) { say "ok" }; foo (:<1>)

[14:38] <camelia> rakudo-moar ec743c: OUTPUT«Required named parameter '' not passed␤  in sub foo at /tmp/x6BEGwzGPG:1␤  in block  at /tmp/x6BEGwzGPG:1␤␤»

[14:38] <psch> FROGGS: ^^

[14:38] <psch> i'm not seeing it

[14:38] *** treehug88 joined
[14:38] *** treehug88 left
[14:38] <FROGGS> :<1> is not "" => 1, that is the problem

[14:38] <psch> yes, but "" => 1 isn't :($)

[14:38] <Timbus> an unfortunate consequence of having a lot of working features

[14:39] <psch> or rather, a Parameter :($) doesn't accept "" => 1

[14:39] *** treehug88 joined
[14:39] *** treehug88 left
[14:39] <FROGGS> but what is :($) ?

[14:39] <psch> an anon named.. :)

[14:39] <FROGGS> O.o

[14:40] *** treehug88 joined
[14:40] <psch> see RT #69492

[14:40] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=69492

[14:40] <FROGGS> m: sub foo(:($)!) { say "ok" }; foo('' => 1)

[14:40] <camelia> rakudo-moar ec743c: OUTPUT«Required named parameter '' not passed␤  in sub foo at /tmp/oi4YFNAtSO:1␤  in block  at /tmp/oi4YFNAtSO:1␤␤»

[14:40] *** treehug88 left
[14:40] <Timbus> in video game development, when you waggle controls or do something very crazy to cause  a strange bug, its called a 'psychotic user behavior' bug

[14:40] <Timbus> so this is a.. 'psychotic API designer' bug?

[14:40] *** treehug88 joined
[14:40] *** treehug88 left
[14:41] <psch> seeing as spectest says anon named are supposed to be tested, which i infer means theyre allowed and have to be specifically implemented...

[14:41] *** treehug88 joined
[14:41] *** treehug88 left
[14:42] *** prevost left
[14:42] <Timbus> anon named...

[14:42] <psch> Timbus: yes, psychotic design doesn't sound wrong

[14:42] *** treehug88 joined
[14:42] *** treehug88 left
[14:43] <psch> i guess being able to look at the signature and say "ok, there's anon named, upstream is crazy" is a worthy feature in its own right

[14:43] *** treehug88 joined
[14:43] *** treehug88 left
[14:44] *** dmol joined
[14:44] *** treehug88 joined
[14:44] <Timbus> if you want to make a function that takes a param no one can possibly pass. more power to you. imo.

[14:44] *** treehug88 left
[14:45] *** treehug88 joined
[14:45] <[Coke]> writing univokable code is not a good thing.

[14:45] *** treehug88 left
[14:45] <[Coke]> *uninvokable

[14:45] <Timbus> if i wrote it? its probably a good thing

[14:45] <dalek> perl6-roast-data: 3dd21e7 | coke++ | / (5 files):

[14:45] <dalek> perl6-roast-data: today (automated commit)

[14:45] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/3dd21e76a5

[14:45] <Timbus> :p

[14:46] <[Coke]> LHF: niecza has a bunch of 'todo passed' tests now.

[14:46] *** treehug88 joined
[14:46] *** treehug88 left
[14:47] *** treehug88 joined
[14:47] *** treehug88 left
[14:49] *** treehug88 joined
[14:49] *** atroxaper joined
[14:49] *** treehug88 left
[14:50] <psch> m: sub foo(:($)!) { say "ok" }; my %h = '' => 1; foo |%h # this used to work according to the ticket

[14:50] <camelia> rakudo-moar ec743c: OUTPUT«Not enough positional parameters passed; got 0 but expected 1 in sub-signature␤  in sub foo at /tmp/FwmyaWufKp:1␤  in block  at /tmp/FwmyaWufKp:1␤␤»

[14:51] <hoelzro> 'multi foo' is always shorthand for 'multi sub foo', right? even within a class/role decl?

[14:51] <psch> n: sub foo(:($)!) { say "ok" }; my %h = '' => 1; foo |%h # niecza++ for sanity

[14:51] <camelia> niecza v24-109-g48a8de3: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Abbreviated named parameter must have a name at /tmp/UgB0PstNMA line 1:␤------> [32msub foo(:($)[33m⏏[31m!) { say "ok" }; my %h = '' => 1; foo |%[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6e…»

[14:52] <timotimo> i fail at promises :S

[14:52] *** treehug88 joined
[14:52] *** treehug88 left
[14:52] <FROGGS> hoelzro: yes

[14:52] <FROGGS> timotimo: what's up?

[14:53] <FROGGS> std: sub foo(:($)!) { say "ok" }

[14:53] <camelia> std 0f2049c: OUTPUT«ok 00:01 127m␤»

[14:54] *** treehug88 joined
[14:54] *** treehug88 left
[14:55] <psch> FROGGS: so the actual bug in rakudo here is that foo(:($)!) somehow build a positional and calling with %h = '' => 1; foo |%h is what should work

[14:55] <sergot> std: 0

[14:55] <camelia> std 0f2049c: OUTPUT«ok 00:00 121m␤»

[14:56] <psch> that might actually be related to anon nameds not getting a $!variable_name i think

[14:56] <psch> because create_signature_object in Actions only builds a parameter when it has a variable_name

[14:56] <timotimo> m: multi sub collatz(1) { 1 }; multi sub collatz($n) { $n %% 2 ?? collatz($n / 2) !! collatz($n * 3 + 1) }; say await (^10).map: { start { collatz($_) } }

[14:56] <camelia> rakudo-moar ec743c: OUTPUT«(signal )»

[14:56] <timotimo> oops?

[14:57] <timotimo> m: multi sub collatz(1) { 1 }; multi sub collatz($n) { $n %% 2 ?? collatz($n / 2) !! collatz($n * 3 + 1) }; say (^10).map: {  collatz($_)}

[14:57] <camelia> rakudo-moar ec743c: OUTPUT«(timeout)»

[14:57] <timotimo> m: multi sub collatz(1) { 1 }; multi sub collatz($n) { $n %% 2 ?? collatz($n / 2) !! collatz($n * 3 + 1) }; say (^4).map: {  collatz($_)}

[14:57] <camelia> rakudo-moar ec743c: OUTPUT«(timeout)»

[14:57] <timotimo> why.

[14:58] <timotimo> m: multi sub collatz(1) { 1 }; multi sub collatz($n) { say $n; $n %% 2 ?? collatz($n / 2) !! collatz($n * 3 + 1) }; collatz(10);

[14:58] <camelia> rakudo-moar ec743c: OUTPUT«(timeout)10␤5␤16␤8␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4␤2␤1␤4…»

[14:58] <timotimo> why doesn't that end at 1?

[14:59] <timotimo> because of rat?

[14:59] <timotimo> m: multi sub collatz(1) { 1 }; multi sub collatz($n) { say $n; $n %% 2 ?? collatz($n div 2) !! collatz($n * 3 + 1) }; collatz(10);

[14:59] <camelia> rakudo-moar ec743c: OUTPUT«10␤5␤16␤8␤4␤2␤»

[14:59] *** nnunley joined
[14:59] <timotimo> ah, of course

[14:59] *** anaeem1_ left
[15:01] *** rindolf joined
[15:01] *** rindolf left
[15:01] <timotimo> i'm confused still

[15:01] *** rindolf joined
[15:04] *** treehug88 joined
[15:04] *** pecastro left
[15:05] *** pecastro joined
[15:06] *** [Sno] joined
[15:09] <timotimo> Internal error: invalid thread ID in GC work pass   - grrrrrr

[15:11] *** guru joined
[15:11] *** guru is now known as Guest3130

[15:14] *** ajr_ left
[15:15] <FROGGS> kill it! kill it with fire!

[15:18] <psch> m: sub foo(:$, :$) { } # kinda sane i guess?

[15:18] <camelia> rakudo-moar ec743c: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/HxtazFBsp1␤Name  used for more than one named parameter␤at /tmp/HxtazFBsp1:1␤------> [32mub foo(:$, :$) { } # kinda sane i guess?[33m⏏[31m<EOL>[0m␤    expecting any of:␤        state…»

[15:23] *** user6 joined
[15:24] *** Alina-malina joined
[15:25] *** igorsutton left
[15:25] *** raiph joined
[15:26] *** zakharyas1 left
[15:26] *** user6 left
[15:26] *** amirite left
[15:29] <timotimo> why do things go wrong when i try to do stuff ...

[15:29] <timotimo> this is just my luck

[15:29] *** treehug88 left
[15:29] *** treehug8_ joined
[15:30] <timotimo> m: $_ = "hello how are you today?"; s[\w+] = *.uc; say $_

[15:30] <camelia> rakudo-moar ec743c: OUTPUT« how are you today?␤»

[15:31] <timotimo> m: $_ = "hello how are you today?"; s:g[\w+] = *.uc; say $_

[15:31] <camelia> rakudo-moar ec743c: OUTPUT«    ?␤»

[15:31] <timotimo> how do i do this again?

[15:31] <timotimo> m: $_ = "hello how are you today?"; s:g[\w+] = { .uc }; say $_

[15:31] <camelia> rakudo-moar ec743c: OUTPUT«    ?␤»

[15:32] <timotimo> oh, it seems like i want $() instead of $_

[15:32] <timotimo> m: $_ = "hello how are you today?"; s:g[\w+] = { $().uc }; say $_

[15:32] <camelia> rakudo-moar ec743c: OUTPUT«    ?␤»

[15:32] <timotimo> m: $_ = "hello how are you today?"; s:g[\w+] = $().uc; say $_

[15:32] <camelia> rakudo-moar ec743c: OUTPUT«HELLO HOW ARE YOU TODAY?␤»

[15:33] *** treehug8_ left
[15:34] <timotimo> with -p -e that doesn't seem to work at all

[15:34] <timotimo> i get Nil for $/ and "" for $()

[15:35] *** sqirrel joined
[15:37] <hoelzro> oh, another thing!

[15:37] <hoelzro> last night I tried any('foo', 6) ~~ Str, which returns False

[15:37] *** treehug88 joined
[15:37] <hoelzro> I'm guessing that's similar to why * ~~ Something doesn't work?

[15:37] *** treehug88 left
[15:38] *** treehug88 joined
[15:38] *** treehug88 left
[15:39] <timotimo> ~~ known stuff about junctions

[15:39] *** carlin joined
[15:40] <timotimo> it won't autothread in this context

[15:41] *** treehug88 joined
[15:41] *** treehug88 left
[15:42] *** treehug88 joined
[15:42] *** treehug88 left
[15:42] *** stux left
[15:43] *** treehug88 joined
[15:43] *** treehug88 left
[15:44] *** treehug88 joined
[15:44] *** treehug88 left
[15:45] *** treehug88 joined
[15:49] <lizmat> good *, #perl6!

[15:49] <yoleaux> 07:08Z <FROGGS> lizmat: this is the state of panda+CPAN: https://gist.github.com/FROGGS/197b7747f3594079712a - now I am going to port Archive::Tar

[15:49] <lizmat> timotimo: wrt zip-latest, that was before I realized your use case

[15:50] *** rurban joined
[15:50] <lizmat> perhaps it would be more transparant, if you could supply the initial state when you create the tap

[15:50] <lizmat> if you don't, then it would wait until there's a value from each constituent

[15:51] <lizmat> if you do, then the condition for passing on values, has been met and everything still works according to spec  :-)

[15:52] <lizmat> something like :initial(Any,Any,Any)

[15:52] <lizmat> if you're zipping 3 supplies

[15:53] <timotimo> i'm annoyed that i have to for lines() -> $_ is copy to make s etc work

[15:54] *** xdoctor joined
[15:55] <Mouq> FROGGS: Not sure how far you've gotten on Archive::Tar, but I did start it the *tiniest* bit in March: https://github.com/Mouq/Archive-Tar

[15:55] <Mouq> So you can use that

[15:56] <Mouq> afk&

[15:56] *** rurban left
[15:58] *** xinming left
[15:58] *** gtodd joined
[15:59] *** xinming joined
[15:59] <timotimo> looking for cute little tasks i could show off with one-linerson the commandline

[15:59] <timotimo> with -e, -n and -p

[16:07] <hoelzro> ahoy lizmat 

[16:08] <cognominal> timotimo, "strict" mode is still on by default on Perl 6 for lack of non stricture? Oneliners are not so cute with  you need to define every single variable

[16:08] *** sqirrel left
[16:08] <timotimo> that's no biggie

[16:08] <timotimo> you can just define them at the earliest convenient point

[16:11] *** treehug88 left
[16:14] *** atroxaper left
[16:18] *** raiph left
[16:20] <hoelzro> timotimo: if I understand your tweet correctly, are you asking if anyone's interested in the slides for your talk?

[16:20] <gtodd> masak: ++ your talk YAPC::NA:2013 on grammars ...  excellent

[16:21] <gtodd>  "regex me once or twice, shame on you ... regex 1000 times shame on me "  heh 

[16:22] *** mr-foobar left
[16:23] <timotimo> no

[16:23] <timotimo> if anybody wants to attend at all :P

[16:26] *** silug left
[16:26] *** molaf_ joined
[16:30] *** molaf left
[16:32] <dalek> Perlito/gh-pages: 596c947 | (Flavio S. Glock)++ | index.html:

[16:32] <dalek> Perlito/gh-pages: Perlito5 - web - add mailing list

[16:32] <dalek> Perlito/gh-pages: review: https://github.com/fglock/Perlito/commit/596c947545

[16:41] *** stux joined
[16:41] *** dmol left
[16:43] *** REPLeffect left
[16:43] *** cibs_ joined
[16:43] *** REPLeffect joined
[16:45] *** sftp_ joined
[16:47] *** sftp left
[16:47] *** sftp_ is now known as sftp

[16:47] *** cibs left
[16:47] *** treehug88 joined
[16:47] *** treehug88 left
[16:48] *** donaldh left
[16:48] *** treehug88 joined
[16:48] *** cibs joined
[16:48] *** treehug88 left
[16:49] *** treehug88 joined
[16:49] *** silug joined
[16:49] *** treehug88 left
[16:50] *** treehug88 joined
[16:50] *** treehug88 left
[16:51] *** treehug88 joined
[16:51] *** treehug88 left
[16:51] *** cibs_ left
[16:51] *** pecastro left
[16:52] *** treehug88 joined
[16:52] *** treehug88 left
[16:52] *** treehug88 joined
[16:53] *** treehug88 left
[16:53] *** treehug88 joined
[16:54] *** treehug88 left
[16:54] *** Guest3130 left
[16:54] *** treehug88 joined
[16:54] *** treehug88 left
[16:55] *** treehug88 joined
[16:55] *** treehug88 left
[16:56] *** BenGoldberg left
[16:56] *** treehug88 joined
[16:56] *** treehug88 left
[16:57] *** treehug88 joined
[16:58] *** treehug88 left
[16:58] <timotimo> damnit, tried to build a simple markov chain walker and it only spews completely random fallback chains

[16:58] *** treehug88 joined
[16:59] *** BenGoldberg joined
[17:00] <lizmat> :-(

[17:02] <dalek> rakudo/nom: 04b2b13 | (Elizabeth Mattijsen)++ | src/core/CompUnitRepo/Locally.pm:

[17:02] <dalek> rakudo/nom: Make .WHICH also work on type objects

[17:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/04b2b13c98

[17:04] <timotimo> the source material is far from perfect

[17:05] *** atroxaper joined
[17:10] <dalek> rakudo/nom: 49ba989 | (Elizabeth Mattijsen)++ | t/spectest.data:

[17:10] <dalek> rakudo/nom: Add first tests for S22

[17:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/49ba989f3f

[17:16] <FROGGS> Mouq: nice! I have not started yet, but will now

[17:18] *** woolfy left
[17:18] *** woolfy1 joined
[17:19] <FROGGS> Mouq: is that a direct P5->P6 translation? doesnt seem so

[17:21] <dalek> specs: 11a7087 | (Elizabeth Mattijsen)++ | S22-package-format.pod:

[17:21] <dalek> specs: Tweaks to parse-spec specification

[17:21] <dalek> specs: review: https://github.com/perl6/specs/commit/11a70879d8

[17:21] <dalek> specs: 2fd8ca0 | (Elizabeth Mattijsen)++ | S17-concurrency.pod:

[17:21] <dalek> specs: Spec Supply.zip-latest(:initial(42,63)) named

[17:21] <dalek> specs: review: https://github.com/perl6/specs/commit/2fd8ca02f5

[17:24] *** treehug8_ joined
[17:24] *** treehug88 left
[17:25] *** treehug8_ left
[17:25] *** dmol joined
[17:26] *** treehug88 joined
[17:26] *** treehug88 left
[17:27] *** treehug88 joined
[17:27] *** treehug88 left
[17:27] *** treehug88 joined
[17:28] *** treehug88 left
[17:28] *** treehug88 joined
[17:28] *** treehug88 left
[17:29] *** treehug88 joined
[17:29] *** treehug88 left
[17:30] *** treehug88 joined
[17:30] *** treehug88 left
[17:30] <dalek> roast: d03dc25 | (Elizabeth Mattijsen)++ | S17-supply/zip (2 files):

[17:30] <dalek> roast: It's called zip-latest, not zip_latest  :)

[17:30] <dalek> roast: review: https://github.com/perl6/roast/commit/d03dc25de0

[17:30] <dalek> roast: 1780cf5 | (Elizabeth Mattijsen)++ | S22-package-format/parse-spec.t:

[17:30] <dalek> roast: Small opt

[17:30] <dalek> roast: review: https://github.com/perl6/roast/commit/1780cf5e19

[17:31] <cognominal> nqp-m:  my $_ := "a" ~~ /a/;  say(nqp::what($/))

[17:31] <camelia> nqp-moarvm: OUTPUT«(signal )»

[17:31] *** treehug88 joined
[17:31] *** treehug88 left
[17:32] <dalek> rakudo/nom: f873410 | (Elizabeth Mattijsen)++ | t/spectest.data:

[17:32] <dalek> rakudo/nom: It's zip-latest, not zip_latest  :-)

[17:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f8734101d0

[17:32] *** treehug88 joined
[17:32] *** mr-foobar joined
[17:32] *** treehug88 left
[17:38] <atroxaper> I just updated all Rakudos and my panda started saing my 

[17:38] <atroxaper> Missing or wrong version of dependency 'src/gen/m-CORE.setting'

[17:38] <atroxaper> saing me*

[17:39] <FROGGS> atroxaper: run: perl6 rebootstrap.pl in the panda dir

[17:39] *** labster left
[17:41] <psch> hrm, digging after the anon named stuff gets me down into moar again

[17:41] <psch> apparently $!variable_name is used for lexical lookup

[17:41] <atroxaper> Oh... Works! Thank you. I decided to start using debuger :)

[17:42] <psch> so neither Parameter.name for anon nameds nor the deref hash assignment seem in reach for me

[17:42] <psch> where "assignment" here means "passing argument into a sub"

[17:42] <psch> i'll just update the ticket i guess

[17:45] *** anaeem1_ joined
[17:46] <dalek> roast: 43a7620 | (Elizabeth Mattijsen)++ | S17-supply/zip-latest.t:

[17:46] <dalek> roast: Add tests for zip-latest(:initial)

[17:46] <dalek> roast: review: https://github.com/perl6/roast/commit/43a7620a4c

[17:46] <dalek> rakudo/nom: d370d01 | (Elizabeth Mattijsen)++ | src/core/Supply.pm:

[17:46] <dalek> rakudo/nom: Implement Supply.zip-latest(:initial)

[17:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d370d0104c

[17:47] *** itz joined
[17:48] <lizmat> timotimo: ^^^

[17:49] <psch> m: sub foo(:bar($bar)!) { }; sub baz(:($)!) { }; &foo.signature.say; &bar.signature.say # this doesn't seem right either

[17:49] <camelia> rakudo-moar 04b2b1: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/FJUiT6laGo␤Undeclared routine:␤    &bar used at line 1. Did you mean '&bag', '&baz'?␤␤»

[17:49] <psch> m: sub foo(:bar($bar)!) { }; sub baz(:($)!) { }; &foo.signature.say; &baz.signature.say # this doesn't seem right either

[17:49] <camelia> rakudo-moar 04b2b1: OUTPUT«:(Any :bar($bar)!)␤:(Any :($)! (Any))␤»

[17:49] <timotimo> the bitrot has found the reactive samples' golf helper

[17:49] <psch> what's the second any in the second signature?

[17:51] <lizmat> cognominal: segfault confirmed here, so it seems a bug

[17:51] <timotimo> have to rebuild the whole shebang. parrot, nqp-j, nqp-p, nqp-m, rakudo-m, rakudo-p, rakudo-j

[17:51] <thou> timotimo: By the way, I spent a lot of time on .subst problems, too. Basically, $/ doesn't work properly in subst closures yet.

[17:51] <lizmat> timotimo, thou: rakudobug it?

[17:51] <timotimo> thou: ah, that thing!

[17:51] <timotimo> i remember now ... :(

[17:52] <cognominal> nqp:  my $_ := "a" ~~ /a/;  say(nqp::what($/))

[17:52] <camelia> nqp-jvm: OUTPUT«(signal )#␤# There is insufficient memory for the Java Runtime Environment to continue.␤# pthread_getattr_np␤# An error report file with more information is saved as:␤# »

[17:52] <camelia> ..nqp-moarvm: OUTPUT«(signal )»

[17:52] <camelia> ..nqp-parrot: OUTPUT«Can only use get_what on a SixModelObject␤current instr.: '' pc 129 ((file unknown):69) (/tmp/tmpfile:1)␤»

[17:52] <timotimo> lizmat: thanks for :initial

[17:53] <timotimo> speccing List.rotor would be an LHF for anybody; can cargocult the explanation of Supply.rotor

[17:56] <timotimo> and if somebody wants to make the golf helper from jnthn/perl6-reactive-samples work with current gtk-simple, that would be nice.

[18:15] *** carlin left
[18:20] <FROGGS> m: $>

[18:20] <camelia> rakudo-moar 04b2b1: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/4LZnhPWAtl␤Unsupported use of $> variable; in Perl 6 please use $*EUID␤at /tmp/4LZnhPWAtl:1␤------> [32m<BOL>[33m⏏[31m$>[0m␤    expecting any of:␤        statement list␤        pre…»

[18:21] <FROGGS> m: say $*EUID

[18:21] <camelia> rakudo-moar 04b2b1: OUTPUT«===SORRY!===␤Dynamic variable $*EUID not found␤»

[18:21] <FROGGS> ó.ò

[18:21] <Mouq> FROGGS: I don't remember -- I think a lot of it is direct P5 -> P6 and I wanted to try and make it idiomatic, but school happened

[18:22] * Mouq is going to a lake o/

[18:22] <FROGGS> I just trying to make it work... making it idiomatic might be easier when you have working code :o)

[18:23] <FROGGS> have fun!

[18:23] *** hoverboard joined
[18:30] *** dmol left
[18:30] <FROGGS> m: say { * +& 0o777 }

[18:30] <camelia> rakudo-moar 04b2b1: OUTPUT«-> ($_? is parcel) { #`(Block|140632954503816) ... }␤»

[18:30] <FROGGS> m: say { * +& 0o777 }(0o666)

[18:30] <camelia> rakudo-moar 04b2b1: OUTPUT«WhateverCode.new()␤»

[18:30] <FROGGS> m: say { $^a +& 0o777 }(0o666)

[18:30] <camelia> rakudo-moar 04b2b1: OUTPUT«438␤»

[18:31] <FROGGS> m: say umask

[18:31] <camelia> rakudo-moar 04b2b1: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/MikfJV62JP␤Undeclared routine:␤    umask used at line 1␤␤»

[18:32] *** igorsutton joined
[18:32] <BenGoldberg> Wouldn't umask be a method (of IO, or whatever), not a subroutine?

[18:33] <BenGoldberg> Err, a method of $*PROCESS

[18:35] <lizmat> $*PROCESS ??

[18:35] <lizmat> you mean $*DISTRO?

[18:35] <BenGoldberg> Hmm...

[18:36] <BenGoldberg> Well, a method of one of those $*somethings, rather than being a globally available subroutine.

[18:36] <lizmat> feels more like a class / instance method on IO to me

[18:36] <FROGGS> I was just hoping for a hint actually :o)

[18:37] <BenGoldberg> m: say length

[18:37] <camelia> rakudo-moar d370d0: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/AO5VjOdDjU␤Undeclared routine:␤    length used at line 1. Did you mean 'elems', 'chars', 'graphs', 'codes'?␤␤»

[18:37] <lizmat> S32/IO:1479 says method

[18:46] *** k1lldash9 joined
[18:46] <k1lldash9> hola

[18:46] <FROGGS> hi k1lldash9 

[18:49] *** k1lldash9 left
[18:50] *** hwdy joined
[18:57] *** hwdy left
[18:58] *** labster joined
[19:02] *** pecastro joined
[19:04] <dalek> rakudo/nom: 847bd58 | (Elizabeth Mattijsen)++ | src/core/IO.pm:

[19:04] <dalek> rakudo/nom: Naive implementation of IO.umask

[19:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/847bd58a9d

[19:05] <FROGGS> O.o

[19:05] <lizmat> $ 6 'say IO.umask.fmt("%04o")'

[19:05] <lizmat> 0022

[19:06] <lizmat> purely informational at this point

[19:06] <FROGGS> lizmat++

[19:06] <lizmat> not sure how this works on Win

[19:07] <FROGGS> nor do I

[19:07] <psch> timotimo: what are you seeing broken with the golf-helper? the only thing wonky here seems to be the initial size and resizing when user input reaches the edge of the input field

[19:08] <psch> the former GTK::Simple allows to change, the latter not really afaict

[19:12] <psch> maybe that just means my GTK::Simple isn't the 

[19:12] <psch> +new one

[19:16] <psch> although i did only install it about half an hour ago or so via panda

[19:17] <lizmat> sightseeing and dinner and drinks and whatever&

[19:20] *** darutoko left
[19:21] <atroxaper> Is Rakudo with MoarVM stable? I think I found some strange behavior.

[19:21] *** Sqirrel joined
[19:22] <FROGGS> atroxaper: it is almost stable

[19:22] <atroxaper> All my tests pass ok on Parrot. On MoarVM 1 didn't pass. If I remove one 'say "--"' then Moar works well.

[19:22] <FROGGS> that is weird though

[19:23] <atroxaper> Yes.

[19:23] <FROGGS> would be interesting to see valgrinds output of that...

[19:24] <atroxaper> What?

[19:25] <FROGGS> ohh, valgrind is a tool to check if some C code read uninitialized memory... and MoarVM is written in 

[19:25] <FROGGS> C

[19:25] <FROGGS> atroxaper: can you paste the code?

[19:26] <atroxaper> Actually... yes. If you have a few minutes for check... https://github.com/atroxaper/PodMaster

[19:27] * [Coke] is so happy his vacation is about to start. :P

[19:27] <atroxaper> I can tell you what works strange.

[19:27] <FROGGS> do tell

[19:27] <FROGGS> [Coke]: :D

[19:27] <nwc10> [Coke]: will we see more of you? Or are you *really* having a vacation?

[19:29] <[Coke]> I will have at least a batteries worth of time in the car to hack on things remotely. probably won't see me more in the channel.

[19:30] <nwc10> (other people driving)++

[19:30] * [Coke] needs to get away from $DAYJOB, though.

[19:31] *** felher joined
[19:35] *** igorsutton left
[19:42] *** Rotwang left
[19:43] *** amirite joined
[19:49] *** anaeem1_ left
[19:49] *** Rotwang joined
[19:57] *** rindolf left
[19:58] *** amirite left
[19:59] *** Rotwang left
[20:01] *** dmol joined
[20:04] *** silug left
[20:04] *** ivanshmakov left
[20:05] <dalek> ecosystem: 5b58fc3 | (Kamil Kułaga)++ | META.list:

[20:05] <dalek> ecosystem: added PerlStore

[20:05] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/5b58fc35e6

[20:07] *** atroxaper left
[20:10] *** psch left
[20:17] *** cognominal left
[20:18] *** cognominal joined
[20:18] *** silug joined
[20:19] *** ivanshmakov joined
[20:22] *** guru joined
[20:22] *** guru is now known as ajr_

[20:23] *** Sqirrel left
[20:23] *** kst left
[20:25] <hoelzro> is there an easier way to get a Routine object other than Class.^method_table<method_name>?

[20:26] <moritz> hoelzro: Class.^can('name')[0]

[20:26] <hoelzro> ah, right!

[20:26] <hoelzro> thanks moritz 

[20:28] *** anaeem1_ joined
[20:34] *** hami joined
[20:36] *** Maddingu1 joined
[20:37] *** hami left
[20:50] *** bluescreen10 left
[21:00] *** kaare_ left
[21:02] *** ivanshmakov left
[21:05] * Mouq is back

[21:07] <Mouq> FROGGS: I realized why I stopped working on Archive::Tar: I was trying to figure out some way to do unpacking in a better way that using unpack :P

[21:07] <Mouq> FROGGS: How goes it?

[21:07] <FROGGS> ahh :o)

[21:07] <FROGGS> well, it does not explode, but does not yet do anything

[21:07] <FROGGS> Archive::Tar::Constant exports all its stuff though

[21:08] <Mouq> That's a good start :)

[21:09] *** ivanshmakov joined
[21:11] *** smls joined
[21:13] <smls> Mouq: Can you have a look at my pull request for perl6/doc ?

[21:18] <Mouq> smls: Looks good -- though the <hr>s on the index page end up being very big. Is this intentional?

[21:19] <Mouq> I like the changes overall, makes it look more professional than what I hacked together :)

[21:20] *** smls left
[21:21] *** smls_ joined
[21:21] <Mouq> smls_: http://irclog.perlgeek.de/perl6/2014-06-20#i_8907097

[21:22] <smls_> Yeah, I may have possibly over-done the circle sizes for the hr's. You can tweak them using the background-size attribute.

[21:22] <Mouq> I just wanted to check

[21:23] <dalek> doc: e55a481 | smls++ | / (2 files):

[21:23] <dalek> doc: Style tweaks for front-page content

[21:23] <dalek> doc: review: https://github.com/perl6/doc/commit/e55a4818c1

[21:23] <dalek> doc: 7e70dd6 | smls++ | html/css/style.css:

[21:23] <dalek> doc: Polish the menu item spacing and separator style

[21:23] <dalek> doc: review: https://github.com/perl6/doc/commit/7e70dd61f4

[21:23] <dalek> doc: 96e373d | smls++ | / (3 files):

[21:23] <Mouq> smls++

[21:23] <dalek> doc: Make footer stick to bottom of page

[21:23] <dalek> doc: review: https://github.com/perl6/doc/commit/96e373da4b

[21:23] <dalek> doc: 467b878 | (Alexander Moquin)++ | / (4 files):

[21:23] <dalek> doc: Merge pull request #20 from smls/master

[21:23] <dalek> doc: 

[21:23] <dalek> doc: Some style polishing

[21:23] <dalek> doc: review: https://github.com/perl6/doc/commit/467b87820b

[21:24] <Mouq> smls_: Do you have a commit bit?

[21:24] <smls_> no

[21:24] <Mouq> Not that I can add you anyway :/

[21:25] <Mouq> moritz: ^^

[21:26] <Mouq> (I don't know who has this power)

[21:32] *** EmilPer joined
[21:33] <EmilPer> hello

[21:34] <FROGGS> hi EmilPer 

[21:34] <EmilPer> new to perl6

[21:34] <EmilPer> what is the difference between  time and time() ? 

[21:35] <EmilPer> time() fails, time without () does not and works like in perl5

[21:35] <FROGGS> the latter is a subroutine call, the former could be a term (or a sub call)

[21:35] <FROGGS> and time is defined as a term

[21:35] <EmilPer> yes, saw it being called "term" ... what is a "term" ? a reserved word, build-in function ?

[21:36] <FROGGS> a term (like in human languages) is a word

[21:37] <FROGGS> so, 'time' acts like a function, but cannot take arguments for example

[21:37] <EmilPer> ok

[21:37] <FROGGS> we could have made it a sub though

[21:38] <EmilPer> thank you

[21:38] <FROGGS> you're welcome

[21:48] <Mouq> m: sub term:<later> { Date.today + 15 }; say later

[21:48] <camelia> rakudo-moar 847bd5: OUTPUT«2014-07-05␤»

[21:48] <Mouq> m: sub term:<later> { Date.today + 15 }; say later()

[21:48] <camelia> rakudo-moar 847bd5: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/WAopnBJpKR␤Undeclared routine:␤    later used at line 1. Did you mean 'eager'?␤␤»

[21:48] <Mouq> 'later' should probably be included in that error message for complete awesomeness :)

[21:49] <thou> smls_ or Mouq: Not sure you worked on it, but I notice on doc.perl6.org that many types show up only on the All page, but not in any of the sub-pages. E.g., Bag, Backtrace. Not sure if that's known and/or intentional.

[21:52] *** smls_ left
[21:54] <Mouq> thou: Backtrace does show up in Exceptions, fwiw, but I'm not sure why Bag isn't showing up in Composite...

[21:55] *** ajr_ left
[21:56] <Mouq> thou: In any case, where it shows up is specified in type-graph.txt

[21:59] *** spider-mario left
[22:00] *** btyler_ left
[22:02] <dalek> doc: 49955d8 | Mouq++ | htmlify.p6:

[22:02] <dalek> doc: Make sure all type definitions get a category, if they have one

[22:02] <dalek> doc: 

[22:02] <dalek> doc: thou++

[22:02] <dalek> doc: review: https://github.com/perl6/doc/commit/49955d8627

[22:06] *** SevenWolf joined
[22:08] <vendethiel> so, now, reading the advent - yet again - I have a question ...

[22:08] <vendethiel> I know this will fail :

[22:09] <vendethiel> wat.

[22:09] <vendethiel> p6: role Foo { method bar { ... } }; class B does Foo {}; 1;

[22:09] <camelia> rakudo-{parrot,jvm,moar} 847bd5: OUTPUT«===SORRY!===␤Method 'bar' must be implemented by B because it is required by a role␤»

[22:09] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Method 'bar' must be implemented by 'B' because it is required by role 'Foo[curried][...]' at /tmp/tmpfile line 1:␤------> [32method bar { ... } }; class B does Foo {}[33m⏏[31m; 1;[0m␤␤Unhandled exceptio…»

[22:10] <vendethiel> okay, my 2014.03.01 is that bad I guess.

[22:10] <vendethiel> Well, yeah, that's expected to fail, but I thought about a construct for this kind of thing

[22:10] <vendethiel> when you want B to be abstract, really, without specifying every method it inherits somehow so

[22:10] <vendethiel> p6: role Foo { method bar { ... } }; class B does Foo { ... }; 1;

[22:10] <camelia> rakudo-{parrot,jvm,moar} 847bd5: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤The following packages were stubbed but not defined:␤    B␤at /tmp/tmpfile:1␤------> [32m { ... } }; class B does Foo { ... }; 1;[33m⏏[31m<EOL>[0m␤    expecting …»

[22:10] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Package was stubbed but not defined at /tmp/tmpfile line 1:␤------> [32mrole Foo { method bar { ... } }; class[33m⏏[31m B does Foo { ... }; 1;[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval…»

[22:11] <vendethiel> Could that be an option ?

[22:11] <vendethiel> or is that reserved for the current behavior

[22:12] <Mouq> vendethiel: Then B should B a role

[22:12] <Mouq> vendethiel: Also, the 1 at the end is superstitious in P6, AFAIK

[22:12] <vendethiel> but sometimes it doesn't make sense semantically for it to be a role

[22:13] <vendethiel> Mouq: no, not quite supersitious

[22:13] <vendethiel> m: role Foo { method bar { ... } }

[22:13] <camelia> rakudo-moar 847bd5: OUTPUT«Unhandled exception: Method 'bar' must be implemented by Foo because it is required by a role␤   at <unknown>:1  (/home/p6eval/rakudo-inst-2/languages/nqp/lib/Perl6/Metamodel.moarvm:compose_method_table:4294967295)␤ from src/gen/m-Metamodel.nqp:2318  (…»

[22:13] <vendethiel> m: role Foo { method bar { ... } }; 1

[22:13] <camelia> rakudo-moar 847bd5: ( no output )

[22:13] <Mouq> Wut?

[22:13] <vendethiel> it tries to instantiate it

[22:13] <Mouq> Huh

[22:16] *** btyler joined
[22:23] *** jack_rabbit_ joined
[22:26] <BenGoldberg> m: say role Foo { method bar { ... } }

[22:26] <camelia> rakudo-moar 847bd5: OUTPUT«Method 'bar' must be implemented by Foo because it is required by a role␤  in any compose_method_table at src/gen/m-Metamodel.nqp:2308␤  in any apply at src/gen/m-Metamodel.nqp:2318␤  in any compose at src/gen/m-Metamodel.nqp:2463␤  in any make_pun…»

[22:26] <BenGoldberg> m: say role Foo { }

[22:26] <camelia> rakudo-moar 847bd5: OUTPUT«(Foo)␤»

[22:27] <BenGoldberg> m: (role Foo { }).WHAT.say

[22:27] <camelia> rakudo-moar 847bd5: OUTPUT«(Foo)␤»

[22:27] <BenGoldberg> m: (role { }).WHAT.say

[22:27] <camelia> rakudo-moar 847bd5: OUTPUT«(<anon>)␤»

[22:28] *** dayangkun_ left
[22:30] <timotimo> my talk ... happened

[22:33] <vendethiel> timotimo++

[22:33] <vendethiel> (same story for me. "stuff happened" :P)

[22:36] *** lucas joined
[22:38] <dalek> doc: 61332e9 | Mouq++ | type-graph.txt:

[22:38] <dalek> doc: Give everything defined in type-graph a category

[22:38] <dalek> doc: review: https://github.com/perl6/doc/commit/61332e936c

[22:38] <dalek> doc: 6bdd5a3 | Mouq++ | / (5 files):

[22:38] <dalek> doc: Make sure all types are listed in type-graph.txt

[22:38] <dalek> doc: review: https://github.com/perl6/doc/commit/6bdd5a3c6c

[22:43] <tadzik> timotimo: how was it? :)

[22:51] *** dayangkun joined
[22:53] <Mouq> m: role Foo { method bar { ... } }; class B does Foo { method bar { ... } }; 1

[22:53] <camelia> rakudo-moar 847bd5: ( no output )

[22:53] <Mouq> vendethiel: ^^^

[22:53] <vendethiel> Mouq: which is exactly what I'm trying to avoid :)

[22:54] <Mouq> vendethiel: Ah, ok :)

[22:54] <vendethiel> Mouq: that's all fine when you have only one method, but if you want a class that's an aggregate of roles, it's started to get dizzying

[22:54] <Mouq> vendethiel: Haha, I bet

[22:56] *** dayangkun left
[22:56] <dalek> roast/hoelzro/fix-multi: 34c6600 | (Rob Hoelz)++ | S12-methods/multi.t:

[22:56] <dalek> roast/hoelzro/fix-multi: Test that Routine.multi returns true for multi dispatch routines

[22:56] <dalek> roast/hoelzro/fix-multi: review: https://github.com/perl6/roast/commit/34c6600091

[23:00] <BenGoldberg> m: multi sub collatz(1) { 1 }; multi sub collatz(Int $n where (* %% 2)) { say "$n even"; collatz($n div 2) }; multi sub collatz(Int $n) { say "$n odd"; collatz($n * 3 + 1) }; collatz(10);

[23:00] <camelia> rakudo-moar 847bd5: OUTPUT«10 even␤5 odd␤16 even␤8 even␤4 even␤2 even␤»

[23:02] *** xenoterracide joined
[23:05] *** lucas left
[23:05] *** anaeem1_ left
[23:07] *** amirite joined
[23:08] <Mouq> m: multi sub collatz(1) { 1 }; multi sub collatz(Int $n where (* %% 2)) { say "$n even"; collatz($n div 2) }; multi sub collatz(Int $n) { say "$n odd"; collatz($n * 3 + 1) }; collatz(2 but role {method Str {"I can't"}});

[23:08] <camelia> rakudo-moar 847bd5: OUTPUT«I can't even␤»

[23:09] <vendethiel> It's interesting to see how perl has started going out of trend (from google trends) since 2008

[23:09] <vendethiel> but it was much, much, much more searched back in 2004.

[23:10] *** itz left
[23:10] <vendethiel> oh, but it's cheating a lot. Ruby's first results are pokemon and ruby tuesday.

[23:11] <vendethiel> python's most searched term is "monty python", by a very long shot

[23:11] <vendethiel> while for perl, it's only the language itself.

[23:12] <vendethiel> Oh, Now I get a much, much different answer. Perl actually had more searches everytime 'til 2012, and it's a close tie these days.

[23:13] <vendethiel> Who said perl was dead ? I'm surprised (or impressed)

[23:14] <BenGoldberg> If you don't have a distinctive name, it's hard to use web searches as a metric.

[23:15] <BenGoldberg> If you wanted compare, say, types of coffee, and you looked to see how often Java was searched for, there's no way to distiniguish the coffee from the programming language :)

[23:21] *** btyler left
[23:26] *** xragnar_ joined
[23:26] *** xragnar left
[23:26] *** xragnar_ is now known as xragnar

[23:26] <vendethiel> BenGoldberg: I found a way to just look for the programming lang in google trends :)

[23:27] <BenGoldberg> Oh?

[23:28] <BenGoldberg> I suppose if you include the word "programming"

[23:28] <xenoterracide> I want a runtime configuration for reversing a stack trace

[23:28] <vendethiel> no, click on it > "programming language"

[23:28] <xenoterracide> because I always see the bottom first and half to find the top

[23:29] <vendethiel> BenGoldberg: http://www.google.com/trends/explore#q=%2Fm%2F06ff5%2C%20%2Fm%2F05zrn&cmpt=q

[23:29] <xenoterracide> have*

[23:32] *** dmol left
[23:35] *** uniejo joined
[23:37] *** jack_rabbit_ left
[23:40] *** uniejo left
[23:49] *** ccverg joined
[23:55] <timotimo> tadzik: not a huge success, also not very good

[23:59] <timotimo> people laughed when i said our jit can already do hello world and fibonacci

