[00:05] *** virtualsue left
[00:12] *** Mouq joined
[00:12] <Mouq> r: ÔΩ¢works already?ÔΩ£

[00:12] <camelia> rakudo-parrot 41cd5e, rakudo-jvm 41cd5e, rakudo-moar 41cd5e: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Bogus statement‚ê§at /tmp/tmpfile:1‚ê§------> [32m<BOL>[33m‚èè[31mÔΩ¢works already?ÔΩ£[0m‚ê§    expecting any of:‚ê§        statement list‚ê§  ‚Ä¶¬ª

[00:13] <Mouq> Oh, I understand that roast commit, ok

[00:13] <Mouq> ++lue :)

[00:16] <lue> Not a very hard fix, just need to update everything, and then spectest the before and after :)

[00:19] <dalek> nqp/moar-conc: b918e81 | jnthn++ | src/vm/jvm/ (5 files):

[00:19] <dalek> nqp/moar-conc: Add ReentrantMutex REPR and lock/unlock ops on JVM

[00:19] <dalek> nqp/moar-conc: review: https://github.com/perl6/nqp/commit/b918e8178d

[00:19] <TimToady> I presume we still have to be careful about putting big codepoints into CORE directly

[00:20] <jnthn> TimToady: Probably, but (in theory) Moar and JVM aren't vulnerable...

[00:20] <TimToady> Moar deals with it by slowing down all strings instead?  :P

[00:21] <jnthn> TimToady: Well, Moar used to have a simple immutable string model, then diakopter++ added ropes, which didn't actually work properly and so are flattened away immediately after creation as a hack, which is SLOW. :/

[00:22] <jnthn> TimToady: At this point, I dunno what's going to happen there. The code is macro'd to the point of being a bloody nuisance to debug. :(

[00:23] <jnthn> Not one of the bits of the codebase I'm happy with.

[00:24] <lue> jnthn: I suppose there isn't an easy way to switch back to simple immutable in the meantime, is there?

[00:24] <jnthn> lue: Not easily.

[00:25] <jnthn> I just need to throw some time at understanding what's there and working out a way forward with it.

[00:30] <dalek> rakudo/moar-conc: 9afc8c3 | jnthn++ | src/vm/jvm/core/Lock.pm:

[00:30] <dalek> rakudo/moar-conc: Use ReentrantMutex REPR and new ops for Lock.

[00:30] <dalek> rakudo/moar-conc: 

[00:30] <dalek> rakudo/moar-conc: Means it is no longer tied to the JVM.

[00:30] <dalek> rakudo/moar-conc: review: https://github.com/rakudo/rakudo/commit/9afc8c3585

[00:30] <dalek> rakudo/moar-conc: 89ff343 | jnthn++ | / (3 files):

[00:30] <dalek> rakudo/moar-conc: Move Lock.pm out of src/vm, now it's VM-generic.

[00:30] <dalek> rakudo/moar-conc: review: https://github.com/rakudo/rakudo/commit/89ff343f39

[00:36] <dalek> roast: ef25233 | coke++ | S12-class/augment-supersede.t:

[00:36] <dalek> roast: add test for RT #117165

[00:36] <dalek> roast: review: https://github.com/perl6/roast/commit/ef2523311d

[00:36] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=117165

[00:41] <pippo> jnthn: does Configure.pl for MoarVM check for presence of libreadline? 

[00:42] <jnthn> pippo: Doesn't look like it

[00:43] *** colomon left
[00:44] <pippo> on my box it does not seem detecting it. Is it trying to compile a test program to detect libredline? Does it include linking to libncurses?

[00:44] *** colomon joined
[00:45] <jnthn> pippo: It simply isn't looking for it right now and always using the bundled linenoise instead.

[00:45] <jnthn> pippo: So I guess the problem on Linux is with that...

[00:47] <pippo> I have used --use-libreadline and added linking to include libncurses and it works!

[00:47] <jnthn> Oh...

[00:47] <pippo> I have used perl Configure.pl --use-libreadline and added linking to include libncurses and it works!

[00:47] <jnthn> Nice :)

[00:48] <jnthn> yeah, I see it is in there...

[00:48] <jnthn> OK, so it doesn't probe for it, but you can configure it.

[00:49] <pippo> yes! but you have to add linking to libncurses afterwards manuallly. At least on my box.

[00:50] <jnthn> Oh. Wouldn't it be libreadline, though?

[00:50] <pippo> both. On my box libreadline requires also libncurses dont know why.

[00:51] <geekosaur> because libncurses includes the low level terminal routines

[00:51] <jnthn> geekosaur: Is that typical/normal? So if you link against one you should always link against the other?

[00:51] <geekosaur> they dropped the separate libtinfo years ago

[00:52] <jnthn> geekosaur: Uh, to phrase it better, if you like to libreadline you should always link to libncurses too?

[00:52] <geekosaur> typical for ncurses systems, yes. if using bsd or original sysv curses (which probably only means commercial unixes) then it'd be libtermcap, libtermlib, or libtinfo

[00:53] <geekosaur> but on a syste, with ncurses, ncurses subsumes the old low level libraries

[00:53] <[Coke]> huh. where is rakudo's STD.pm ?

[00:54] <geekosaur> (and on at least some System Vs, libcurses is preferred with libtinfo only there for backward compat and a symlink to libcurses)

[00:54] <lue> [Coke]: src/Perl6/Grammar.nqp ?

[00:56] <pippo> jnthn: sorry the configure param is --use-readline and not --use-libreadline. Good night!

[00:56] *** pippo left
[00:56] <geekosaur> so, upshot: except on some (mostly older) commercial unixes, readline uses curses/ncurses for the low level terminal stuff. you may well not even care about supporting those older ones

[00:57] <jnthn> geekosaur: OK, thanks.

[00:57] <geekosaur> since they're at least 10 years behind current standards (I think both POSIX and the last X/Open standard specced curses as holding the former terminfo library)

[00:58] <[Coke]> lue++

[00:59] <geekosaur> heck, I think SVR2 was the last release where terminfo was separate from curses, it was merged by SVR3.1 with only a compat symlink left. does anyone really care about anything pre-SVR4?

[01:05] <timotimo> jnthn: do you think i could do the same jvm-interop-to-REPR-plus-op for "the next thing" if i looked at your code?

[01:06] <jnthn> timotimo: Hmm, depends which one we make the next thing I guess :)

[01:07] <hoelzro> I found some oddness with the compiled URI on MoarVM

[01:07] <hoelzro> 'need URI::DefaultPort; URI::DefaultPort::scheme_port("https")' works fine

[01:08] <hoelzro> *unless* you 'use URI' in that script

[01:10] <jnthn> hoelzro: Urgh.

[01:10] <hoelzro> if I remove the 'need URI::DefaultPort' in URI.pm, it works

[01:11] <hoelzro> I'll try to create a minimal example

[01:11] <hoelzro> there's no RT ticket for this, is there?

[01:11] <timotimo> jnthn: i'd leave that up to you. or you tell me which one would be the easiest ;)

[01:12] <hoelzro> I'm guessing that it's something with the %default_port hash being loaded twice?

[01:12] <timotimo> jnthn: on the other hand, i'm going to go full-on sleep-deprivation mode this weekend :P

[01:15] <jnthn> timotimo: Does that mean you're going to sleep a lot, or a little?

[01:15] <jnthn> timotimo: Semaphore is easiest one I think

[01:15] <jnthn> timotimo: You can follow same pattern as for lock

[01:15] <timotimo> little, probably ;)

[01:19] *** dmol left
[01:20] <timotimo> jnthn: how do i best get the initial number of slots into the semaphore?

[01:20] *** grondilu left
[01:20] <timotimo> i don't think i can give allocate more parameters, aye?

[01:20] <hoelzro> jnthn, timotimo: here's a minimal example for the URI module

[01:21] <timotimo> oh, you're hunting a crash

[01:21] <hoelzro> https://rt.perl.org/Ticket/Display.html?id=121298

[01:21] <timotimo> ?

[01:21] <hoelzro> it's that "cannot invoke null object" issue that I saw with URI

[01:21] <hoelzro> I reduced it to a simple example and attached it to the ticket

[01:21] <timotimo> oh, ok

[01:22] <timotimo> thank you. i don't have the smarts to look into it right now

[01:22] <hoelzro> it looks like two loads messes up a module-level data structure

[01:22] <hoelzro> no rush =)

[01:23] <timotimo> jnthn: since set_int is used to preallocate lists to a given size, should allocate set null for the semaphore and set_int should create the actual semaphore with the given number?

[01:24] <timotimo> set_elems, actually

[01:24] *** daniel-s_ left
[01:25] <hoelzro> family time &

[01:25] *** tgt joined
[01:25] *** daniel-s_ joined
[01:26] <jnthn> timotimo: No, overloading those feels odd

[01:26] <jnthn> timotimo: Well, set_int could work in which case you nqp::box_i(1, SemaphoreType) :)

[01:28] <jnthn> timotimo: I've just been looking at the libuv semaphore API and how we use them in Promise and...hmm.

[01:29] <timotimo> jnthn: not even set_elems?

[01:29] <jnthn> timotimo: set_elems is worse than set_int... :)

[01:29] <jnthn> I think I can live with set_int being used for it

[01:30] *** daniel-s__ joined
[01:30] <jnthn> The problem is that Promise relies on being able to post a big value to the semaphore

[01:30] <jnthn> Whihc libuv's API doesn't let you do.

[01:30] *** daniel-s_ left
[01:33] <jnthn> pthreads defines a post_sem_multiple

[01:35] <timotimo> why would it post a big value to the semaphore?

[01:36] *** berekuk joined
[01:36] <jnthn> timotimo: When you .result on a Promise that ain't done yet, it tries to acquire the semaphore

[01:36] <jnthn> timotimo: It posts a big value 'cus it doesn't know how many times that has been done.

[01:37] <timotimo> d'oh %)

[01:38] <jnthn> Anyway, seems on OSX the semaphore API doesn't have an equivalent of that.

[01:38] <timotimo> so really we want an event instead

[01:38] <jnthn> "event"? :)

[01:38] <timotimo> er

[01:38] <timotimo> "condition variable"?

[01:38] <timotimo> the one where any amount of things wait and one signals

[01:38] <jnthn> Yeah. That may be the best way.

[01:38] <timotimo> so why am i trying to implement a semaphore right now? :)

[01:38] <jnthn> Right.

[01:39] <jnthn> Semaphores are used elsewhere, iirc

[01:39] <jnthn> Yeah, thread pool uses them too

[01:39] <timotimo> OK

[01:39] <timotimo> it won't get us further to promises, though, just to 100% ;)

[01:39] <timotimo> ah well.

[01:42] <jnthn> Well, we need the scheduler before we can have promises

[01:42] <timotimo> the ops for the semaphore go into rakudo, rather than nqp?

[01:43] <jnthn> No, NQP

[01:44] <jnthn> Use moar-conc branch

[01:44] <timotimo> OK

[01:44] <timotimo> ah yes indeed

[01:44] <timotimo> i didn't look correctly

[01:45] <dalek> nqp/moar-conc: bd253e0 | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[01:45] <dalek> nqp/moar-conc: Map lock and unlock ops on MoarVM.

[01:45] <dalek> nqp/moar-conc: review: https://github.com/perl6/nqp/commit/bd253e09af

[01:45] <dalek> rakudo/moar-conc: c8d8475 | jnthn++ | tools/build/Makefile-Moar.in:

[01:45] <dalek> rakudo/moar-conc: Add Lock.pm to Rakudo Moar build.

[01:45] <dalek> rakudo/moar-conc: 

[01:45] <dalek> rakudo/moar-conc: With this we pass S17-concurrency/lock.t under Moar.

[01:45] <dalek> rakudo/moar-conc: review: https://github.com/rakudo/rakudo/commit/c8d84755a5

[01:46] <TimToady> \o/ here too :)

[01:46] *** berekuk left
[01:47] <timotimo> should i use lock and unlock for semaphores or rather have ops "verhogen" and "proberen"?

[01:48] <jnthn> uh...neither? :)

[01:48] <timotimo> semacquire and semrelease?

[01:48] <jnthn> I like those more.

[01:48] <jnthn> They're not the traditional terms.

[01:48] <timotimo> ok

[01:48] <timotimo> java has "acquire" and "release"

[01:48] <jnthn> Yeah.

[01:48] <timotimo> i think the ones that are traditional are post and something else

[01:49] <jnthn> wait

[01:49] <timotimo> maybe sempost and semwait

[01:49] <timotimo> but not post and wait

[01:49] <skids> Every time I read a pthread manual page I despair at how much gets sacrificed for portability to platforms that don't implement it.

[01:49] <jnthn> Could do those. I think acquire and release are better names though.

[01:50] <timotimo> without "sem"?

[01:50] <jnthn> with :)

[01:50] <jnthn> semacquire and semrelease

[01:51] <timotimo> thanks

[01:51] <jnthn> The scheduler is a pretty fearsome porting job...

[01:51] <jnthn> Well, ThreadPoolScheduler

[01:52] <timotimo> :(

[01:53] <TimToady> found a workaround for the overeager for bug: gather for @primes xx * -> $factor { ... }

[01:53] <jnthn> o.O

[01:53] <jnthn> Wow

[01:54] <jnthn> timotimo: Well, scheduler takes care of a lot of hard things so other places don't have to.

[01:55] <dalek> rakudo/moar-conc: 5b0b70d | jnthn++ | tools/build/Makefile-Moar.in:

[01:55] <dalek> rakudo/moar-conc: Add Scheduler role to the build.

[01:55] <dalek> rakudo/moar-conc: 

[01:55] <dalek> rakudo/moar-conc: Doesn't contain anything JVM-specific already.

[01:55] <dalek> rakudo/moar-conc: review: https://github.com/rakudo/rakudo/commit/5b0b70db05

[01:57] <jnthn> timotimo: We'll need semtryacquire also

[01:57] <timotimo> where do i get ExceptionHandling from? o_O

[01:58] <timotimo> i thought for every symbol there is there should be an import line

[01:58] <jnthn> org.perl6.nqp.runtime.ExceptionHandling

[01:58] *** berekuk joined
[01:58] <timotimo> weird, i didn't see that :|

[01:59] <timotimo> is it legitimate to call it SemaphoreRepr?

[01:59] <timotimo> because java seems to complain about importing Semaphore and then declaring a class called Semaphore :)

[01:59] <jnthn> Yeah, it will... :S

[02:00] <jnthn> I think you'll just have to fully qualify its one

[02:00] <jnthn> Oh

[02:00] <timotimo> hm, ok

[02:00] <jnthn> Actually, on JVM the REPR's string name isn't actually the class name

[02:00] <jnthn> See REPRRegistry.java

[02:00] *** klapperl_ joined
[02:00] <jnthn> So yeah, you can get away with that.

[02:00] <timotimo> right

[02:00] <timotimo> i saw that

[02:00] <timotimo> that's why i asked :)

[02:01] <timotimo> oh, i think i made it work

[02:02] <jnthn> Timers are going to be kinda fun...

[02:02] <timotimo> how should i best handle the InterruptedException? use acquireUninterruptable instead or just dieInternal when i get interrupted?

[02:03] <jnthn> The latter is probably more sociable

[02:03] <timotimo> good

[02:04] <timotimo> oh, i need to box a bool for that

[02:04] <timotimo> probably an int instead

[02:04] *** klapperl left
[02:04] <timotimo> then i'd have to pass in an Int SMO, right?

[02:07] *** Mouq left
[02:07] <timotimo> or just use BOOTint from the tc?

[02:08] *** berekuk left
[02:09] *** tgt left
[02:09] *** berekuk joined
[02:10] <timotimo> jnthn: can you wait another night for the semaphore code?

[02:11] <jnthn> timotimo: Box a bool for what?

[02:11] <jnthn> timotimo: Sure; gonna go sleep in a moment

[02:11] <timotimo> the return value of tryacquire

[02:13] *** FROGGS_ joined
[02:13] <timotimo> gnite!

[02:13] <dalek> nqp/moar-conc: 9264434 | (Timo Paulssen)++ | src/vm/jvm/runtime/org/perl6/nqp/ (4 files):

[02:13] <dalek> nqp/moar-conc: beginning of a semaphore instantce

[02:13] <dalek> nqp/moar-conc: review: https://github.com/perl6/nqp/commit/92644346d5

[02:13] <jnthn> Oh, just have the op return a long, and mark it as $RT_INT in the ops file

[02:13] <jnthn> (Compiler.nqp I mean)

[02:15] *** Sqirrel joined
[02:16] <jnthn> 'night, #perl6

[02:16] <TimToady> o/

[02:17] *** FROGGS left
[02:17] *** Sqirrel_ left
[02:20] *** berekuk left
[02:25] *** rurban left
[02:31] *** colomon left
[02:32] *** colomon joined
[02:38] *** berekuk joined
[02:48] *** berekuk left
[02:59] *** klapperl joined
[03:01] *** colomon left
[03:03] *** klapperl_ left
[03:09] *** kurahaupo_mobile left
[03:11] *** berekuk joined
[03:13] *** mtj_ left
[03:18] *** mtj_ joined
[03:22] *** berekuk left
[03:38] *** kurahaupo_mobile joined
[03:43] *** colomon joined
[03:50] <dalek> rakudo/nom: 7b43e38 | Mouq++ | src/Perl6/ (2 files):

[03:50] <dalek> rakudo/nom: Abbreviated Pod blocks can't have configurations

[03:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7b43e38e3a

[03:50] *** Mouq joined
[04:05] *** fridim_ joined
[04:15] *** xenoterracide joined
[04:30] *** kurahaupo_mobile left
[04:58] <lue> Running make -j3 spectest, the wallclock seconds in order of parrot, jvm, moar:  13505, 11311, 3723  :)

[05:13] *** Mouq left
[05:34] *** BenGoldberg left
[05:36] *** hoverboard left
[05:46] *** hoverboard joined
[05:51] *** rurban joined
[06:05] *** Mouq joined
[06:08] *** rhr left
[06:08] *** rhr joined
[06:09] *** Mouq left
[06:10] *** raiph left
[06:18] *** darutoko joined
[06:32] <dalek> roast: 0265e51 | lue++ | S26-documentation/09-configuration.t:

[06:32] <dalek> roast: [S26-documentation] Change abbreviated to paragraph

[06:32] <dalek> roast: 

[06:32] <dalek> roast: Abbreviated can't take config options, which is what's being tested

[06:32] <dalek> roast: here, so change it to paragraph.

[06:32] <dalek> roast: review: https://github.com/perl6/roast/commit/0265e5194f

[06:32] <dalek> roast: d97551f | lue++ | S12-class/augment-supersede.t:

[06:32] <dalek> roast: Merge branch 'master' of https://github.com/perl6/roast

[06:32] <dalek> roast: review: https://github.com/perl6/roast/commit/d97551f038

[06:34] *** SamuraiJack joined
[06:37] *** daniel-s__ left
[06:38] *** daniel-s__ joined
[06:44] <dalek> rakudo/nom: 8b435d3 | lue++ | src/Perl6/ (2 files):

[06:44] <dalek> rakudo/nom: Add support for short-form Q strings.

[06:44] <dalek> rakudo/nom: 

[06:44] <dalek> rakudo/nom: You should now be able to type out your Q-based strings as ÔΩ¢...ÔΩ£,

[06:44] <dalek> rakudo/nom: similar to '...' and "...".

[06:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8b435d3860

[06:44] <dalek> rakudo/nom: 44f3569 | lue++ | .gitignore:

[06:44] <dalek> rakudo/nom: Add missing perl6-debug-p to .gitignore

[06:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/44f3569651

[06:44] <dalek> rakudo/nom: bfe22c4 | lue++ | / (2 files):

[06:44] <dalek> rakudo/nom: Fix localtest targets

[06:44] <dalek> rakudo/nom: 

[06:46] <lue> ? I think dalek got caught on something.

[06:51] <dalek> roast: 4f3dfd4 | lue++ | S02-literals/quoting-unicode.t:

[06:51] <dalek> roast: Unfudge test for ÔΩ¢...ÔΩ£

[06:51] <dalek> roast: review: https://github.com/perl6/roast/commit/4f3dfd42ff

[07:19] *** rurban left
[07:22] *** daniel-s__ left
[07:26] *** daniel-s__ joined
[07:31] *** daniel-s__ is now known as daniel-s_

[07:34] *** hoverboard left
[07:48] *** kst joined
[07:53] *** Mouq joined
[07:54] *** slavik left
[07:56] *** berekuk joined
[07:57] *** Mouq left
[08:08] *** virtualsue joined
[08:17] *** kivutar joined
[08:28] *** sqirrel_ joined
[08:31] *** bjz_ left
[08:32] *** telex left
[08:34] <raydiak> colomon++ # your idea that my mysterious test failure might be a precompilation bug was absolutely correct

[08:35] *** telex joined
[08:36] <raydiak> FROGGS_: ^ found the cause of my test failure :P

[08:39] <FROGGS_> raydiak: that was my guess too... we'd just need to golf it down so we know what breaks when precomp'd

[08:39] <FROGGS_> p: say ÔΩ¢...ÔΩ£

[08:39] <camelia> rakudo-parrot bfe22c: OUTPUT¬´...‚ê§¬ª

[08:40] <FROGGS_> that is interesting

[08:41] *** rindolf joined
[08:42] <raydiak> forgot I was running panda install with jvm, and ran panda-test with moar, thus my "why doesn't it break with panda-test" confusion

[08:43] <FROGGS_> raydiak: that is what my S11 implementation is supposed to solve

[08:43] <raydiak> ?

[08:43] <FROGGS_> you will automatically get the -m/-j/-p suffix when installing a binary/script

[08:43] <FROGGS_> so there would be a panda-test-j, that will always delegate to perl6-j

[08:44] <raydiak> that sounds handy

[08:50] *** molaf_ left
[08:54] *** kurahaupo_mobile joined
[08:57] *** kivutar left
[08:58] <FROGGS_> hoelzro / colomon: there?

[08:59] <FROGGS_> raydiak: this might even be your issue: https://rt.perl.org/Ticket/Display.html?id=121298

[09:00] *** kurahaupo_mobile left
[09:00] *** kurahaupo_mobile joined
[09:02] <raydiak> FROGGS_: looking

[09:09] *** bjz joined
[09:09] <raydiak> hmmm...I can check to see if the things being passed as params are defined then, so I know if it's the same problem

[09:09] <raydiak> or better yet, I'll try precompiling this test as a jar and running it again...if this works under jvm, it must not be my problem

[09:10] *** bjz_ joined
[09:10] *** bjz left
[09:14] <raydiak> also broken under jvm, so it could be my issue...still investigating

[09:19] <raydiak> eh? when not logged in I can view the ticket but when logged in I get "No permission to display that ticket"?

[09:21] <FROGGS_> O.o

[09:23] <raydiak> haha I get the weirdest obstacles lately...was just gonna add "also broken under jvm"

[09:26] <raydiak> my problem looks different, though...like it's not seeing the overloaded infix:<+>

[09:30] *** berekuk left
[09:36] <raydiak> will finish pinning this down when I can think better...tis late; g'night FROGGS++ and #perl6 o/

[09:36] *** berekuk joined
[09:37] <masak> antenoon, #perl6

[09:37] <yoleaux> 21 Feb 2014 21:24Z <raiph> masak: I filed #121296; plz lemme know if I could have done better

[09:37] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121296

[09:38] <masak> raiph: looks very good to me.

[09:45] <timotimo> i'll fix the return type of the tryalloc right away

[09:47] <dalek> nqp/moar-conc: 326d6dc | (Timo Paulssen)++ | src/vm/jvm/ (2 files):

[09:47] <dalek> nqp/moar-conc: have semtryacquire return an INT, map sem{{try,}acquire,release}

[09:47] <dalek> nqp/moar-conc: review: https://github.com/perl6/nqp/commit/326d6dc223

[10:04] *** klapperl_ joined
[10:07] *** klapperl left
[10:24] *** cognominal left
[10:29] *** espadrine joined
[10:30] *** espadrine left
[10:32] <timotimo> and now the rakudo part

[10:34] *** sqirrel_ left
[10:36] *** dmol joined
[10:39] <timotimo> jnthn: is it really box_i or box_I?

[10:39] * timotimo would try, but has to build nqp first

[10:40] <jnthn> timotimo: box_i; box_I = bigint.

[10:41] <timotimo> good

[10:41] <timotimo> i'll leave the Promise.pm to have the jvm interop for semaphore for now, aye?

[10:41] <jnthn> Yeah

[10:42] <jnthn> We may want to spec and make semaphores available too.

[10:43] <jnthn> Not because I want people to use them day to day, just because I want folks to be able to build new concurrency abstractions as the whole industry learns better ways to do things.

[10:43] <timotimo> sure. this is work in a branch so far, so i'll get it to work and then worry about making it perfect

[10:43] <jnthn> Sure :)

[10:45] *** _thou left
[10:52] *** virtualsue left
[10:55] *** berekuk left
[10:57] <timotimo> we need some adjustments so that we can somehow run the individual spectests with just make without being required for the parrot build to work

[10:57] <timotimo> because right now parrot won't touch the Semaphore due to an unknown repr :P

[10:58] <jnthn> timotimo: They are marked # jvm right now

[10:58] <jnthn> timotimo: I suggest we add # conc

[10:58] <jnthn> timotimo: And pass --conc to the harness for JVM/Moar.

[10:59] <timotimo> that's not what i mean :)

[11:00] <timotimo> the **/*.t ruel in the makefile depends on P_HARNESS_WITH_FUDGE or something

[11:00] <timotimo> that P_ is what i meant

[11:00] <timotimo> jnthn: how do you feel about AtomicInteger getting its own REPR?

[11:01] *** berekuk joined
[11:02] <jnthn> timotimo: It shouldn't.

[11:02] <timotimo> that's right :)

[11:02] <timotimo> but how do e differentiate if "make t/spec/foo/bar.t" means "do it with parrot" or whatever?

[11:02] <jnthn> Oh, no idea

[11:02] <jnthn> I never use that :)

[11:03] <timotimo> should the method for tryAcquire have that same capitalization in perl6 as it does in java?

[11:03] <jnthn> No

[11:03] <jnthn> nqp::semtryacquire

[11:03] <timotimo> i've given Semaphore a method to do that

[11:07] <jnthn> ?

[11:08] <jnthn> Oh, you mean at Perl 6 level?

[11:08] <jnthn> Should be try_acquire there most probably...

[11:08] <timotimo> good

[11:08] <jnthn> Though really it doesn't matter what we call it; TimToady++ will spring up with a better name anyway. :D

[11:08] <timotimo> This representation can not unbox to a native int   - that's what i get for my tryacquire ... huh

[11:09] <timotimo> oh, i may need to recompile nqp perhaps?

[11:09] <timotimo> nope :|

[11:09] <jnthn> Unbox? Hm

[11:10] <jnthn> Don't know we should be trying to do that.

[11:10] <timotimo> yeah, i'm not sure what's causing the error

[11:10] <timotimo> i'll try to golf it and see if that gives me any insight

[11:11] <timotimo> ./perl6-j -e 'Semaphore.new(1).tryAcquire()'

[11:11] <timotimo> that triggers it already

[11:14] <jnthn> .tell hoelzro I think https://rt.perl.org//Public/Bug/Display.html?id=119877 is fixed - please can you check?

[11:14] <yoleaux> jnthn: I'll pass your message to hoelzro.

[11:14] <timotimo> should i just push it to see what you think?

[11:16] *** Rotwang joined
[11:16] <jnthn> timotimo: Yeah, that may be the easiest way.

[11:18] <dalek> rakudo/moar-conc: 51fb614 | (Timo Paulssen)++ | / (3 files):

[11:18] <dalek> rakudo/moar-conc: first (nonworking) draft of Semaphore class

[11:18] <dalek> rakudo/moar-conc: review: https://github.com/rakudo/rakudo/commit/51fb614af6

[11:18] <timotimo> there we go. good luck :)

[11:19] <timotimo> oh, is that from "int $permits"?

[11:20] <jnthn> timotimo: Hmm, I'm thinking the problem may not be in that code

[11:20] <jnthn> Moment

[11:21] <jnthn> QAST::OperationsJAST.map_classlib_core_op('semtryacquire', $TYPE_OPS, 'semtryacquire', [$RT_INT], $RT_OBJ, :tc);

[11:21] <jnthn> There you are.

[11:21] <jnthn> The thing in the square brackets are the op argument types

[11:21] <jnthn> And the one to the right is the result type.

[11:21] <timotimo> oooooh

[11:21] <timotimo> haha :)

[11:22] <jnthn> So your tryacquire is an i -> o op, not an o -> i one like you wanted :)

[11:22] <timotimo> thanks

[11:22] <jnthn> np :)

[11:22] <timotimo> i'm kinda groggy >_

[11:22] <timotimo> >_<

[11:29] <jnthn> Maybe it's the low-sleep thing ;)

[11:29] <timotimo> the amount fo sleep was sufficient, i think

[11:29] <timotimo> but it was a mattress that was much softer than i'm used to and a pillow that was much smaller than i'm used to

[11:30] <timotimo> well, it was a bit bigger, but it compressed much moar

[11:30] <jnthn> ah

[11:33] <timotimo> i should have seen that the stuff in the [ ] is the arguments, because that's a list and a list can also hold multiple things

[11:33] <timotimo> unlike a retur nvalue, which is usually one thing

[11:33] <timotimo> even if it's a list

[11:35] <dalek> nqp/moar-conc: 00e4d36 | (Timo Paulssen)++ | src/vm/jvm/QAST/Compiler.nqp:

[11:35] <dalek> nqp/moar-conc: confused returnval and argument types

[11:35] <dalek> nqp/moar-conc: review: https://github.com/perl6/nqp/commit/00e4d36ea7

[11:36] <timotimo> jnthn: the test file scheduler.t doesn't seem to terminate after the 55th test

[11:37] <jnthn> timotimo: On JVM?

[11:37] <jnthn> timotimo: Did you fudge it?

[11:37] <timotimo> i didn't :(

[11:37] <jnthn> oh, it's no fudge marks.

[11:37] <timotimo> that would be it.

[11:38] <timotimo> right, no fudge marks

[11:38] <jnthn> timotimo: Did it terminate before your changes?

[11:38] <jnthn> It does here...

[11:38] <timotimo> didn't test :P

[11:38] *** beastd joined
[11:40] <timotimo> takes so long :(

[11:40] <timotimo> i really liked the quick turnaround times on moarvm during development

[11:41] <timotimo> i should probably support acquiring and try-acquiring more than 1 permit, right?

[11:41] <timotimo> even though that's not needed yet

[11:41] *** Zaydon joined
[11:42] <jnthn> timotimo: No, don't add those

[11:42] <jnthn> timotimo: They're not portably available.

[11:42] <timotimo> oh, ok

[11:42] <timotimo> that's good then

[11:42] <jnthn> Well, it's not good, but it's how it is...

[11:45] <timotimo> it does not terminate without my changes

[11:47] <jnthn> Um.

[11:48] * jnthn tries it

[11:49] <jnthn> uh, once I have a JVM build...

[11:51] <timotimo> that could take a while, aye :)

[11:52] <jnthn> nah, 'tis done

[11:55] <timotimo> the next thing we're going to see are mappings for the semaphore ops in nqp?

[11:55] *** berekuk left
[11:56] *** virtualsue joined
[11:58] <Ven> next thing to do is build a jvm in perl6, I guess :)

[11:58] *** SamuraiJack left
[11:58] <jnthn> timotimo: Feel free to add those, I don't have them here yet.

[11:59] <Ven> you'd get the best perfs ever

[12:00] <Ven> (that really seems like an interesting research project though)

[12:01] <jnthn> timotimo: Hmm. I get the exit hang too when running the test solo, but not under the eval server. Huh...

[12:11] *** pdcawley joined
[12:11] *** pdcawley_ left
[12:17] <timotimo> jnthn: huh.

[12:18] <timotimo> because the thread the test starts lives past the single program and reaches the 10000 seconds timeout? perhaps?

[12:18] <timotimo> jnthn: i'll map them

[12:19] *** kshannon joined
[12:19] <jnthn> timotimo: Yeah, but they should be background/daemon threads, meaning they don't block termination.

[12:20] <timotimo> ah, huh

[12:21] <jnthn> timotimo: I'll have to dig a bit deeper on it.

[12:21] <jnthn> timotimo: Currently researching/planning for the concurrent blocking queue thing we need for channels and the scheduler.

[12:22] <timotimo> aye, that does sound good :)

[12:23] *** berekuk joined
[12:27] <Timbus> hm. i just stumbled into this today: http://rosettacode.org/wiki/Luhn_test_of_credit_card_numbers#Perl_6

[12:28] <Timbus> and surely this is wrong:  my $s1 = [+] @digits[0,2...@digits.end];

[12:28] <Timbus> the sequence, that is

[12:30] <jnthn> timotimo: Yeah. I think I'll go for a 2-lock approach (separate head/tail locks) for now. That's what the JVM one is doing (turns out JVM one's source is public domain :))

[12:31] <Timbus> m: my @a = <0 9 8 7>; say @a[0,2...@a.end];

[12:31] <camelia> rakudo-moar bfe22c: OUTPUT¬´(timeout)¬ª

[12:33] <Timbus> m: my @a = <0 9 8 7>; say @a[0,2...*];

[12:33] <camelia> rakudo-moar bfe22c: OUTPUT¬´0 8‚ê§¬ª

[12:33] <Timbus> oh.

[12:35] <jnthn> m: my @a = <0 9 8 7>; say @a[0,2...+@a];

[12:35] <camelia> rakudo-moar bfe22c: OUTPUT¬´0 8 (Any)‚ê§¬ª

[12:35] <jnthn> m: my @a = <0 9 8 7>; say @a[0,2...^+@a];

[12:35] <camelia> rakudo-moar bfe22c: OUTPUT¬´0 8‚ê§¬ª

[12:35] <jnthn> That may be better.

[12:38] *** berekuk_ joined
[12:38] *** berekuk left
[12:38] *** tgt joined
[12:40] <timotimo> i might need to write a test file for semaphores to ensure that the moarvm implementation is even right

[12:41] <jnthn> We need one anyway.

[12:41] <Timbus> m: my @a = <0 9 8 7>; say @a[1,3...^+@a];

[12:41] <camelia> rakudo-moar bfe22c: OUTPUT¬´(timeout)¬ª

[12:42] <jnthn> Timbus: The ending condition has to be met exactly

[12:42] <jnthn> Can put a code block there with a comparison op

[12:43] <timotimo> i'm surprised ...* doesn't actually infiniloop; ... should interpret * manually, should it not?

[12:43] <timotimo> m: say (0,2...*)[^50]

[12:43] <camelia> rakudo-moar bfe22c: OUTPUT¬´0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98‚ê§¬ª

[12:43] <timotimo> m: say (0,1...20)[(0,2...*)[^10]]

[12:43] <camelia> rakudo-moar bfe22c: OUTPUT¬´0 2 4 6 8 10 12 14 16 18‚ê§¬ª

[12:43] <timotimo> interesting

[12:44] <timotimo> i'm not sure i understand.

[12:45] <JimmyZ> libuv has a good queue.h file but it's without lock

[12:45] <Timbus> at a guess its a whatevercode block inside the [], not a whatever being passed to the seq

[12:46] <timotimo> Timbus: i know how the whatevercode generation code looks like :)

[12:47] <timotimo> in my mental model, it shouldn't know about that there's a [ ] around it at the point where it encounters the ... operater

[12:48] <Timbus> i think i follow you. after it's been given the size it.. huh.  why doesnt it infiniloop

[12:49] <Timbus> m: my @a = <0 9 8 7>; say @a[1,3...*];

[12:49] <camelia> rakudo-moar bfe22c: OUTPUT¬´9 7‚ê§¬ª

[12:50] <Timbus> well im going to use that then. because: @a[1,3...^*>=@a] this is bad and i feel bad

[12:58] <jnthn> JimmyZ: I don't see anything showing that's threadsafe, though. Plus it's not, afaict, public API.

[13:01] <JimmyZ> oh, yeah, I didn't realize it's not public API

[13:02] <JimmyZ> btw, will we need rwlock?

[13:02] <jnthn> Don't think so.

[13:10] *** kaare_ left
[13:25] *** rindolf left
[13:30] *** hugme left
[13:30] *** virtualsue left
[13:31] *** hugme joined
[13:31] *** ChanServ sets mode: +v hugme

[13:34] <dalek> nqp/moar-conc: cd2f5c7 | (Timo Paulssen)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[13:34] <dalek> nqp/moar-conc: map semacquire, semtryacquire and semrelease on moar

[13:34] <dalek> nqp/moar-conc: review: https://github.com/perl6/nqp/commit/cd2f5c7406

[13:38] <hoelzro> good * #perl6

[13:38] <yoleaux> 11:14Z <jnthn> hoelzro: I think https://rt.perl.org//Public/Bug/Display.html?id=119877 is fixed - please can you check?

[13:39] <hoelzro> jnthn: thanks, I'll check

[13:42] <timotimo> jnthn: would a test file for semaphores help you/us? should it be a spectest or an nqp test?

[13:45] <jnthn> timotimo: Since we're adding a user-visible Semaphore class, should be spectest.

[13:46] <jnthn> timotimo: It warrants an S17 addition to.

[13:46] <jnthn> *too

[13:47] <hoelzro> timotimo, jnthn: did either of you get a chance to look at that multiple import moar bug I reported last night?

[13:47] <hoelzro> https://rt.perl.org/Ticket/Display.html?id=121298

[13:50] <jnthn> hoelzro: No, but got it open in a browser tab here. It's on my "to do soon" list

[13:51] <hoelzro> ok, cool

[13:51] <hoelzro> it was late when I reported it, so I wanted to make sure one of you had seen it =)

[13:53] <timotimo> hoelzro: i did not get to it :(

[13:53] <timotimo> but thank you kindly for golfing it

[13:53] <hoelzro> np, it was interesting

[13:55] <timotimo> i'll write a bit for the semaphore

[13:55] <timotimo> the same kind of "use higher level instead if you can, but if you really, really, really need it, take this"

[13:56] <timotimo> actually, time to attend a presentation

[13:56] <jnthn> "Typically you should acquire a higher level solution; this is just a release valve." :P

[14:02] <timotimo> :)

[14:06] *** hoverboard joined
[14:06] * timotimo puts lock and semaphore under a common section

[14:07] <jnthn> wfm

[14:11] *** xinming joined
[14:11] <timotimo> do i need a code example to spice up the text or will an explanation of the operations suffice?

[14:12] <timotimo> i'll also write that acquiring and releasing multiple permits at once is not supported on all backends, so will not be offered

[14:14] <JimmyZ> Do we need AtomicInteger repr too?

[14:14] <dalek> specs: 7f3f23c | (Timo Paulssen)++ | S17-concurrency.pod:

[14:14] <dalek> specs: semaphore spec draft

[14:14] <dalek> specs: review: https://github.com/perl6/specs/commit/7f3f23c8ee

[14:15] <timotimo> JimmyZ: i asked it already and got no answer :P

[14:15] <JimmyZ> :/

[14:15] <timotimo> jnthn: there seems to be public interest in this :P

[14:16] <jnthn> 10:59 <timotimo> jnthn: how do you feel about AtomicInteger getting its own REPR?

[14:17] <jnthn> 11:00 <jnthn> timotimo: It shouldn't.

[14:17] <jnthn> :P

[14:17] *** tgt left
[14:17] <timotimo> oh

[14:17] <timotimo> thank you! i didn't see that

[14:17] <jnthn> ;)

[14:17] <jnthn> We'll get rid of it for now by doing a lock, and later we'll add CAS primitives.

[14:17] <JimmyZ> I didn't see the Q&A :P

[14:18] <jnthn> np :)

[14:19] *** beastd|2 joined
[14:19] <JimmyZ> I'm just thinking how to do CAS ...

[14:19] *** [Sno]_ joined
[14:20] <jnthn> JimmyZ: Needs rather careful design, as it needs to co-opt REPRs too...

[14:20] *** beastd|3 joined
[14:21] <timotimo> we'll be able to atomically CAS any P6opaque?

[14:21] <hoelzro> jnthn: thanks, it's fixed

[14:22] <jnthn> timotimo: Not sure at present. I need to look at where the boundaries lie on JVM.

[14:23] *** kst` joined
[14:23] *** FROGGS__ joined
[14:24] *** takesako___ joined
[14:30] *** Psyche^_ left
[15:12] *** ilogger2 joined
[15:13] *** xfix left
[15:13] *** Ulti_ left
[15:13] *** bjz left
[15:13] *** nwc10 left
[15:13] *** cooper left
[15:13] *** sftp left
[15:13] *** mattp__ left
[15:13] *** Ven left
[15:13] *** Zaydon_ left
[15:13] *** Alina-malina left
[15:13] *** Exodist left
[15:13] *** bonsaikitten left
[15:13] *** PerlPilot left
[15:13] *** Sqirrel_ left
[15:13] *** avuserow3 left
[15:13] *** flussenc1 left
[15:13] *** darutoko- left
[15:13] *** kst` left
[15:13] *** kshannon left
[15:13] *** pdcawley left
[15:13] *** dmol left
[15:13] *** klapperl_ left
[15:13] *** dagurval left
[15:13] *** Timbus left
[15:13] *** dalek left
[15:13] *** tadzik left
[15:13] *** risou_awy left
[15:13] *** integral left
[15:13] *** daniel-s__ left
[15:13] *** skids1 left
[15:13] *** rhr left
[15:13] *** LordVorp left
[15:13] *** takesako___ left
[15:13] *** FROGGS__ left
[15:13] *** xenoterracide left
[15:13] *** fridim_ left
[15:13] *** pecastro left
[15:13] *** Pleiades` left
[15:13] *** Gothmog_ left
[15:13] *** nebuchadnezzar left
[15:13] *** felipe left
[15:13] *** clsn left
[15:13] *** grep0r left
[15:13] *** timotimo left
[15:13] *** tokuhirom left
[15:13] *** hoelzro left
[15:17] *** Vlavv joined
[15:17] *** mtk joined
[15:19] *** jnthn joined
[15:20] *** bakedb joined
[15:20] *** lizmat joined
[15:20] *** ilbot3 joined
[15:20] *** Nei joined
[15:24] *** cxreg joined
[15:26] *** silug__ joined
[15:26] *** hugme joined
[15:28] *** ilbot3 left
[15:29] *** cosimo joined
[15:29] *** robinsmidsrod joined
[15:29] *** pochi joined
[15:33] *** [Coke] joined
[15:34] *** [particle] joined
[15:47] *** flussence joined
[15:47] *** cxreg left
[15:51] *** Nei left
[15:51] *** jnthn left
[15:51] *** sunnavy joined
[15:52] *** flussence left
[15:52] *** cosimo left
[15:52] *** perigrin joined
[15:52] *** silug__ left
[15:53] *** itz joined
[16:13] *** ilogger2 joined
[16:13] *** ChanServ sets mode: +v ilogger2

[16:13] *** colomon joined
[16:13] *** gfldex joined
[16:13] <tadzik> fwiw, the Threads module has some example programs written with Semaphores

[16:13] *** Tene joined
[16:13] *** Tene left
[16:13] *** Tene joined
[16:14] *** Rotwang1 joined
[16:18] *** cxreg joined
[16:18] *** amkrankruleuen joined
[16:19] *** japhb_ left
[16:19] *** rurban_ left
[16:20] *** silug__ joined
[16:20] *** Nei_ joined
[16:20] *** ruoso left
[16:20] *** lestrrat left
[16:20] *** japhb_ joined
[16:21] *** simcop2387 left
[16:21] *** pnu_ left
[16:21] *** hoelzro left
[16:21] *** bakedb_ joined
[16:21] *** Nei_ is now known as Nei

[16:22] *** rurban_ joined
[16:22] *** hoelzro joined
[16:22] *** lestrrat joined
[16:22] *** cxreg left
[16:23] *** raydiak__ joined
[16:24] *** ashleydev left
[16:24] *** ribasushi left
[16:24] *** Grrrr left
[16:24] *** vendethiel joined
[16:24] *** hugme joined
[16:25] *** gfldex_ joined
[16:25] *** retupmoc1 joined
[16:26] *** apejens joined
[16:27] *** kurahaupo_mobile joined
[16:27] *** berekuk joined
[16:28] *** clkao joined
[16:29] *** cooper- joined
[16:30] *** lestrrat left
[16:30] *** gfldex_ left
[16:31] *** Zaydon joined
[16:31] *** timotimo left
[16:31] *** cooper- left
[16:31] *** Grrrr joined
[16:32] *** apejens left
[16:32] *** Nei_ joined
[16:32] *** ashleydev joined
[16:32] *** lestrrat joined
[16:32] *** Nei left
[16:32] *** Nei_ is now known as Nei

[16:32] *** rurban1 joined
[16:32] *** itz_ joined
[16:33] *** itz__ joined
[16:33] *** sunnavy joined
[16:34] *** amkrankruleuen left
[16:34] *** amkrankruleuen joined
[23:41] *** ilogger2 joined
[23:41] *** ChanServ sets mode: +v ilogger2

[23:43] <Mouq> lue: What I mean is that <?{}> can put the AST of its contents into the tree. Quantifiers work by creating a partial AST node with how many repetitions it allows as named params, and then whatever it's quantifying injects itself into that node

[23:44] <Mouq> lue: So the way things are now, AFAIK you'd have to get **{}'s compile time value

[23:44] <Mouq> or something

[23:44] <Mouq> :/

[23:45] <lue> Hrm, compile time won't cut it, 'cos you could always use bare ** for those :)

[23:45] <Mouq> r: =for pod :test(1+12)‚ê§content‚ê§‚ê§say $=pod.perl

[23:45] <camelia> rakudo-parrot b2b333, rakudo-jvm b2b333, rakudo-moar b2b333: OUTPUT¬´Array.new(Pod::Block::Named.new(name => "pod", config => ("test" => "1+12").hash, content => Array.new(Pod::Block::Para.new(config => ().hash, content => Array.new("content")))))‚ê§¬ª

[23:46] <Mouq> lue: Yeah, I didn't think so

[23:46] <Mouq> lue: So something would have to be restructured

[23:46] *** erkan joined
[23:46] *** bjz joined
[23:46] *** timotimo joined
[23:46] *** pnu_ joined
[23:46] *** ruoso_ joined
[23:46] *** sftp_ joined
[23:46] *** Celelibi joined
[23:46] *** __sri joined
[23:46] *** zamolxes joined
[23:46] <lue> I wonder if **{} would require a retooling of how quantifiers work, or a separate node type

[23:47] <Mouq> also see

[23:47] <Mouq> r: say "a b c" ~~ /:s(True) \w +/

[23:47] <camelia> rakudo-parrot b2b333, rakudo-jvm b2b333, rakudo-moar b2b333: OUTPUT¬´Nil‚ê§¬ª

[23:48] <Mouq> r: say "a b c" ~~ /:s \w +/

[23:48] <camelia> rakudo-parrot b2b333, rakudo-jvm b2b333, rakudo-moar b2b333: OUTPUT¬´ÔΩ¢a b cÔΩ£‚ê§‚ê§¬ª

[23:49] <Mouq> (although that's partially an issue with the way the grammar handles :s)

[23:51] <Mouq> n: say "a b c" ~~ /:s(True) \w +/

[23:51] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Action method mod_arg not yet implemented at /tmp/Lpz5NyMx2P line 1:‚ê§------> [32msay "a b c" ~~ /:s(True)[33m‚èè[31m \w +/[0m‚ê§‚ê§Unhandled exception: Cannot parse number: (True)‚ê§  at /home/p6eval/niecza/bo‚Ä¶¬ª

[23:51] <Mouq> std: say "a b c" ~~ /:s(True) \w +/

[23:51] <camelia> std 09dda5b: OUTPUT¬´ok 00:01 126m‚ê§¬ª

[23:56] *** bnebheni joined
[23:58] *** bnebheni left
[23:58] *** erkan left
[23:58] *** bjz left
[23:58] *** timotimo left
[23:58] *** pnu_ left
[23:58] *** ruoso_ left
[23:58] *** sftp_ left
[23:58] *** Celelibi left
[23:58] *** __sri left
[23:58] *** zamolxes left
