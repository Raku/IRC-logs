[00:00] *** pdcawley joined
[00:00] * TimToady doesn't even see where <.foo()> is parsed, offhand

[00:00] <TimToady> must be coming from deeper down

[00:01] <jnthn> Inherited from QRegex::P6Regex::Grammar iirc

[00:02] <TimToady> if we just change that to parse EXPR instead of variable, will it magically do the right thing with <&foo('stuff')> ?

[00:02] <TimToady> the other is obviously a different bug

[00:02] <TimToady> that is, the :var variant

[00:02] <Quom> TimToady: Doubt it :(

[00:02] <Quom> TimToady: I was looking at the code yesterday

[00:02] <jnthn> Is it a parsing bug, or is it that the re-write done with we have a lexical rule messes things up?

[00:03] <Quom> In... Cursor.pm?

[00:03] <Quom> But maybe I'm completely wrong

[00:03] <TimToady> the <&foo()> is a parsing bug, the <foo()> is a rewrite problem, likely

[00:03] <rurban> I get the same t/nativecall/01-basic.t problem with 32bit cygwin also

[00:03] <rurban> I'll look at it tomorrow

[00:03] <Quom> rurban++ again :)

[00:03] *** Quom is now known as Mouq

[00:04] <TimToady> <&foo('bar')> attempts to parse with the MAIN variable rule, which of course can't understand the postfix

[00:04] <TimToady> the <foo('bar')> actually makes the call, but fails to pass the arguments

[00:04] <rurban> I like my new smokers: http://perl514.cpanel.net:8010/one_line_per_build

[00:06] <jnthn> TimToady: Only in the lexical case, though?

[00:07] <TimToady> presumably

[00:08] <TimToady> I think we rely on passing args sometimes in the method case

[00:08] <lue> r: grammar G { token TOP { <multiple(2.3)> }; token multiple($by) { (\-? <digit>+ [\. <digit>+]?) <?{ (+$0 / $by).narrow ~~ Int }> } }; G.parse("4.6").say;  # jnthn: works here

[00:08] <camelia> rakudo-parrot 522629, rakudo-jvm 522629, rakudo-moar 522629: OUTPUT¬´ÔΩ¢4.6ÔΩ£‚ê§ multiple => ÔΩ¢4.6ÔΩ£‚ê§  0 => ÔΩ¢4.6ÔΩ£‚ê§   digit => ÔΩ¢4ÔΩ£‚ê§   digit => ÔΩ¢6ÔΩ£‚ê§‚ê§¬ª

[00:08] <jnthn> Well, yeah, and the Rakudo grammar does it plenty too :)

[00:10] *** pdcawley left
[00:11] <lue> jnthn: that's why I was initially confused as to why the my token version failed :) "but Grammar.nqp can do it!"

[00:11] <jnthn> Urgh

[00:11] <jnthn> INTERPOLATE doesn't know what to do with args. Worse, it uses args to convey stuff it needs to know to delegate correctly.

[00:12] <jnthn> I suspect we shouldn't be using that here, though.

[00:16] <jnthn> > my token foo($bar = "oops") { foo {say $bar} }; say "foo" ~~ /<foo("baz")>/

[00:16] <jnthn> baz

[00:16] <TimToady> \o/

[00:16] <jnthn> Guess I should spectest :)

[00:16] <TimToady> me is testing a parsing patch for <&foo()>

[00:16] * jnthn is kinda ready for sleep :)

[00:17] <lue> I have a grammar fix that's about ready to be committed and pushed too :D

[00:17] <jnthn> Got all day tomorrow for Perl 6 things. Planning to work on Moar nativecall and maybe some Star prep bits.

[00:17] *** [Sno] left
[00:18] *** telex left
[00:18] <Mouq> jnthn: Yeah, sorry I wasn't very specific earlier with why it wouldn't Just Work

[00:18] <Mouq> jnthn: I was doing stuffs

[00:18] *** telex joined
[00:19] <jnthn> np

[00:19] <jnthn> I'm not especially fast tonight either :)

[00:19] <TimToady> one can force <&foo()> to parse by changing it to use EXPR at a= precedence, but the semantics are wrong, since it wants it to return the function pointer to call

[00:20] <TimToady> when it thinks of it as a variable

[00:20] <TimToady> so that will also take a deeper solution

[00:22] <dalek> rakudo/nom: 20193f6 | jnthn++ | src/ (2 files):

[00:22] <dalek> rakudo/nom: Fix arg passing of <foo(...)> where foo is lexical

[00:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/20193f6027

[00:23] <jnthn> Could use a test, but I'm heading off for the night :)

[00:23] <jnthn> 'night o/

[00:24] <lue> ‚ôû jnthn o/

[00:24] <TimToady> o/

[00:25] *** telex left
[00:25] *** ggoebel11113 joined
[00:26] *** denisboyun left
[00:26] *** ggoebel11112 left
[00:26] *** telex joined
[00:27] *** hoverboard joined
[00:36] *** aje_ left
[00:37] *** daxim left
[00:38] *** pecastro left
[00:49] *** yoleaux left
[00:49] *** atrodo left
[00:49] *** telex left
[00:49] *** ggoebel11113 left
[00:49] *** dylanwh left
[00:49] *** atrodo joined
[00:50] *** Ulti left
[00:50] *** awwaiid_ left
[00:50] *** Ulti joined
[00:50] *** Mouq left
[00:50] *** yoleaux joined
[00:50] *** ChanServ sets mode: +v yoleaux

[00:50] *** awwaiid joined
[00:51] *** dylanwh joined
[00:51] *** rurban left
[00:51] *** daxim joined
[00:51] *** clkao left
[00:52] *** clkao joined
[00:52] *** Mouq joined
[00:54] *** btyler joined
[00:55] *** awwaiid left
[00:55] *** ggoebel11114 joined
[00:56] *** btyler left
[00:57] *** Mouq left
[01:00] *** btyler joined
[01:00] *** awwaiid joined
[01:01] *** telex joined
[01:01] *** daxim_ joined
[01:02] *** daxim left
[01:03] *** _thou joined
[01:04] *** btyler_ joined
[01:08] *** thou left
[01:08] *** btyler left
[01:08] *** rurban joined
[01:08] *** Mouq joined
[01:11] *** btyler_ left
[01:13] *** Quom joined
[01:14] *** atrodo left
[01:14] *** dylanwh left
[01:14] *** Mouq left
[01:14] *** atrodo joined
[01:17] *** rurban left
[01:18] *** rurban joined
[01:20] *** dylanwh joined
[01:30] *** atrodo left
[01:30] *** dylanwh left
[01:30] *** tokuhirom left
[01:30] *** rurban left
[01:31] *** tokuhirom joined
[01:31] *** dylanwh joined
[01:31] *** rurban joined
[01:31] *** atrodo joined
[01:37] *** rurban left
[01:38] *** woosley joined
[01:39] *** bluescreen10 left
[01:42] *** sbauer left
[01:43] *** rurban joined
[01:47] *** bjz joined
[01:52] *** sbauer joined
[01:55] *** Alina-malina left
[01:56] *** Alina-malina joined
[02:01] *** SHODAN left
[02:02] *** grep0r left
[02:04] *** atrodo left
[02:07] *** felher left
[02:07] *** grep0r joined
[02:07] *** Alina-malina left
[02:07] *** atrodo joined
[02:08] *** rurban left
[02:08] *** dylanwh left
[02:08] * Quom has most of a GIF decoder written. Why? Dunno, why not?

[02:08] *** dylanwh joined
[02:08] *** sbauer left
[02:08] *** sbauer joined
[02:09] <dalek> rakudo/nom: 656089e | lue++ | src/Perl6/Grammar.nqp:

[02:09] <dalek> rakudo/nom: More descriptive failure for missing block

[02:09] <dalek> rakudo/nom: 

[02:09] <dalek> rakudo/nom: This brings Rakudo in line with STD on this matter, and fixes

[02:09] <dalek> rakudo/nom: long-standing RT bug #66776.

[02:09] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=66776

[02:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/656089e0ed

[02:09] *** felher joined
[02:10] *** klapperl_ left
[02:11] <Quom> lue++

[02:11] *** rurban joined
[02:12] *** klapperl joined
[02:40] <Quom> m: my $x = Nil; $x //= 1; say $x

[02:40] <camelia> rakudo-moar 20193f: OUTPUT¬´1‚ê§¬ª

[02:40] <Quom> m: my $x := Nil; $x //= 1; say $x

[02:40] <camelia> rakudo-moar 20193f: OUTPUT¬´Nil‚ê§¬ª

[02:40] <Quom> n: my $x := Nil; $x //= 1; say $x

[02:40] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´Unhandled exception: Writing to readonly scalar‚ê§  at /tmp/bD_8rvcImF line 1 (mainline @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4595 (ANON @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4596 (module-CORE @ 576) ‚ê§  at /home/p6e‚Ä¶¬ª

[02:45] *** ilbot3 left
[02:46] *** ilbot3 joined
[02:49] <lue> holy d√©j√† vu! :D    https://rt.perl.org/Ticket/Display.html?id=77152

[03:15] *** rurban1 joined
[03:15] <rurban1> That's now my public buildbot url: http://perl514.cpanel.net/build/one_line_per_build

[03:15] *** molaf left
[03:16] <rurban1> rakudo fails with parrot=master because nqp is hardcoded to a failing version. nqp=master works fine

[03:18] *** woosley1 joined
[03:18] *** woosley1 left
[03:18] <Quom> rurban1: git describe > tools/build/PARROT_REVISION or some such in the nqp repo

[03:18] <Quom> err jk

[03:19] <Quom> git describe in the parrot repo

[03:19] *** woosley left
[03:19] <Quom> and then it goes into tools/build/PARROT_REVISION

[03:21] * Quom is super unhelpful tonight

[03:47] *** aindilis joined
[03:48] *** kaare__ joined
[03:55] *** SamuraiJack_ joined
[03:56] *** xragnar_ joined
[03:56] *** xragnar is now known as Guest42235

[03:56] *** Guest42235 left
[03:56] *** xragnar_ is now known as xragnar

[03:59] <lue> Looking at UTS#18, RL1.3: union would be <rule + rule>, set difference would be <rule - rule>, but I can quite figure out set intersection, except perhaps [<rule> & <rule>]

[04:00] <Quom> lue: "Terms may also be combined using & for set intersection, | for set union, and ^ for symmetric set difference"

[04:00] <lue> Quom: within <> rules?

[04:00] <lue> ooh, we actually have symmetric set difference? Cool!

[04:01] <Quom> lue: Mmhm. Very NYI though

[04:01] <Quom> std: /<+ :HexDigit & :Upper >/

[04:01] <camelia> std 09dda5b: OUTPUT¬´ok 00:01 123m‚ê§¬ª

[04:01] <Quom> m: /<+ :HexDigit & :Upper >/

[04:01] <camelia> rakudo-moar 656089: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/n4x0yRgf7J‚ê§Unable to parse expression in metachar:sym<assert>; couldn't find final '>' ‚ê§at /tmp/n4x0yRgf7J:1‚ê§------> [32m/<+ :HexDigit [33m‚èè[31m& :Upper >/[0m‚ê§    expecting any of:‚ê§ ‚Ä¶¬ª

[04:01] <Quom> n: /<+ :HexDigit & :Upper >/

[04:01] <camelia> niecza v24-109-g48a8de3: ( no output )

[04:02] <Quom> std: /<+ (:HexDigit & :Upper) + [q] >/

[04:02] <camelia> std 09dda5b: OUTPUT¬´ok 00:01 124m‚ê§¬ª

[04:02] <Quom> m: /<+ (:HexDigit & :Upper) + [q] >/

[04:02] <camelia> rakudo-moar 656089: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unrecognized regex metacharacter < (must be quoted to match literally)‚ê§at /tmp/owzrtsaIgX:1‚ê§------> [32m/<+ [33m‚èè[31m(:HexDigit & :Upper) + [q] >/[0m‚ê§Unrecognized regex metacharacter + (must be quoted to match l‚Ä¶¬ª

[04:03] <lue> I'm assuming + is almost, but not quite, like |

[04:03] <Quom> lue: So riddle me this, what's the difference between "." and "<.>" in a regex?

[04:04] <lue> According to S05, one grapheme. So i.e., /<.>/ == /./ == /:nfg ./ == /:nfc <.>/ == /:nfd <.>/ == ...

[04:05] <lue> (<rule + rule> probably is handled slightly differently than <rule | rule>, to be clear about that statement of mine)

[04:07] <lue> almost forgot, <.> is also equivalent to <G/./> :P

[04:08] <Quom> std: /:HexDigit:Upper/

[04:08] <camelia> std 09dda5b: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unrecognized regex modifier :HexDigit at /tmp/0YqZRwBeD8 line 1:‚ê§------> [32m/:HexDigit[33m‚èè[31m:Upper/[0m‚ê§Unrecognized regex modifier :Upper at /tmp/0YqZRwBeD8 line 1:‚ê§------> [32m/:HexDigit:Upper[33m‚èè[31m/[0m‚Ä¶¬ª

[04:09] <Quom> std: /<:HexDigit:Upper>/

[04:09] <camelia> std 09dda5b: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unable to parse metachar at /tmp/_Cuno0zRTF line 1:‚ê§------> [32m/[33m‚èè[31m<:HexDigit:Upper>/[0m‚ê§Couldn't find final '>'; gave up at /tmp/_Cuno0zRTF line 1:‚ê§------> [32m/<:HexDigit[33m‚èè[31m:Upper>/[0m‚ê§    expect‚Ä¶¬ª

[04:09] <Quom> m: /<:HexDigit:Upper>/

[04:09] <camelia> rakudo-moar 656089: ( no output )

[04:09] <Quom> Yeah

[04:09] <Quom> >_>

[04:09] <Quom> m: /<:HexDigit|:Upper>/

[04:09] <camelia> rakudo-moar 656089: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/zvKHyeOtcm‚ê§Unable to parse expression in metachar:sym<assert>; couldn't find final '>' ‚ê§at /tmp/zvKHyeOtcm:1‚ê§------> [32m/<:HexDigit[33m‚èè[31m|:Upper>/[0m‚ê§    expecting any of:‚ê§      ‚Ä¶¬ª

[04:09] <Quom> m: /<:HexDigit | :Upper>/

[04:09] <camelia> rakudo-moar 656089: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/vGwm5DOYk_‚ê§Unable to parse expression in metachar:sym<assert>; couldn't find final '>' ‚ê§at /tmp/vGwm5DOYk_:1‚ê§------> [32m/<:HexDigit [33m‚èè[31m| :Upper>/[0m‚ê§    expecting any of:‚ê§    ‚Ä¶¬ª

[04:09] <lue> std: /<:HexDigit | :Upper>/

[04:09] <camelia> std 09dda5b: OUTPUT¬´ok 00:01 123m‚ê§¬ª

[04:09] <Quom> Rakudo cheats hardcore

[04:11] <Quom> the rule for that assertion is about as sophisticated as /[<[+-]>['['<bla>']' | ':'<bla>]]+/

[04:15] <lue> Ooh, I wonder how many people would object if I spec'd unicode set ops for those subrules, ‚à™ (union), ‚à© (intersection), and ‚äñ (symmetric difference)  :)

[04:15] <Quom> Compare: https://github.com/perl6/nqp/blob/master/src/QRegex/P6Regex/Grammar.nqp#L345 and https://github.com/perl6/std/blob/master/STD.pm6#L5220

[04:16] <lue> oh, and ‚àñ for set difference of course

[04:17] <lue> Quom: yeah, I'd say nqp's version could use some work :)

[04:18] <Quom> lue: Some people may look at you funny, but I don't think anyone would redact those set changes

[04:18] <Quom> s/set/spec/

[04:18] <Quom> Unless they do, of course

[04:18] <lue> Quom: either of set and spec works there though :)

[04:19] <lue> That's why I haven't already made the changes, I'd rather other people knew ahead of time.

[04:20] <lue> ( by the way, P6 only has (-) for set difference, not the non-Texas ‚àñ version. I imagine "looks too much like backslash" may be the answer ‚òπ)

[04:21] <Quom> lue: Waaat?

[04:21] <lue> Last I checked, anyway

[04:21] <Quom> m: say set(1,2,3,42) ‚àñ set(2,3) # pretty sure otherwise...

[04:21] <camelia> rakudo-moar 656089: OUTPUT¬´set(1, 42)‚ê§¬ª

[04:21] <Quom> n: say set(1,2,3,42) ‚àñ set(2,3)

[04:21] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´set(1, 42)‚ê§¬ª

[04:21] <Quom> std: say set(1,2,3,42) ‚àñ set(2,3)

[04:21] <camelia> std 09dda5b: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Confused at /tmp/vfk9Ow5J65 line 1:‚ê§------> [32msay set(1,2,3,42) [33m‚èè[31m‚àñ set(2,3)[0m‚ê§    expecting any of:‚ê§  feed_separator‚ê§ infix or meta-infix‚ê§    infixed function‚ê§       statement modifier loop‚ê§Parse failed‚ê§FA‚Ä¶¬ª

[04:21] <lue> oh! That's cool  :)

[04:22] <Quom> std: say set(1,2,3,42) ‚à™ set(2,3)

[04:22] <camelia> std 09dda5b: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Confused at /tmp/tqY6sQyPdw line 1:‚ê§------> [32msay set(1,2,3,42) [33m‚èè[31m‚à™ set(2,3)[0m‚ê§    expecting any of:‚ê§  feed_separator‚ê§ infix or meta-infix‚ê§    infixed function‚ê§       statement modifier loop‚ê§Parse failed‚ê§FA‚Ä¶¬ª

[04:22] <Quom> Silly STD

[04:22] <lue> m: say set(1,2,3,42) ‚äñ set(2,3) # betcha perl6 doesn't have THIS!

[04:22] <camelia> rakudo-moar 656089: OUTPUT¬´set(1, 42)‚ê§¬ª

[04:22] <lue> well then

[04:22] <Quom> lue: :)

[04:22] <lue> m: say set(1,2,3,42) (^) set(2,3)

[04:22] <camelia> rakudo-moar 656089: OUTPUT¬´set(1, 42)‚ê§¬ª

[04:23] <Quom> lue: https://github.com/rakudo/rakudo/blob/nom/src/core/set_operators.pm

[04:23] <Quom> Or http://doc.perl6.org/type/Set + http://doc.perl6.org/type/Bag

[04:24] <Quom> I should really do the operator documentation for Bag there :/

[04:24] <lue> [in retrospect, having the grapheme (de-)exploders use a leading alphabetic character may not be the best of choices. Though I can't think of a proper ASCII(ish) leading symbol]

[04:25] <Quom> lue: What's wrong with just scoped :nfkd?

[04:25] <Quom> etc

[04:26] <lue> Ask TimToady :) I think the idea is to explicitly check just one grapheme, instead of potentially many.

[04:26] <lue> r: constant term:<<"\x2205">> = set();

[04:27] <camelia> rakudo-jvm 656089: OUTPUT¬´(timeout)¬ª

[04:27] <camelia> ..rakudo-parrot 656089, rakudo-moar 656089: ( no output )

[04:29] *** BenGoldberg left
[04:31] <Quom> r: constant term:["\x2205"] = set();

[04:31] <camelia> rakudo-moar 656089: OUTPUT¬´===SORRY!===‚ê§Cannot find method 'ast'‚ê§¬ª

[04:31] <camelia> ..rakudo-parrot 656089, rakudo-jvm 656089: OUTPUT¬´===SORRY!===‚ê§No such method 'ast' for invocant of type 'NQPMu'‚ê§¬ª

[04:31] <Quom> Dang :(

[04:32] <Quom> r: my $x = s; constant term:<<"$x">> = set(); say s

[04:32] <camelia> rakudo-jvm 656089, rakudo-moar 656089: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unrecognized regex metacharacter = (must be quoted to match literally)‚ê§at /tmp/tmpfile:1‚ê§------> [32mmy $x = s; constant term:<<"$x">> [33m‚èè[31m= set(); say s[0m‚ê§Couldn't find terminator ;‚ê§a‚Ä¶¬ª

[04:32] <camelia> ..rakudo-parrot 656089: OUTPUT¬´‚êÄ‚êÄ‚êÄ[‚êÄ‚êÄ‚êÄ3‚êÄ‚êÄ‚êÄ1‚êÄ‚êÄ‚êÄm‚êÄ‚êÄ‚êÄ=‚êÄ‚êÄ‚êÄ=‚êÄ‚êÄ‚êÄ=‚êÄ‚êÄ‚êÄ‚êÄ‚êÄ‚êÄ[‚êÄ‚êÄ‚êÄ0‚êÄ‚êÄ‚êÄm‚êÄ‚êÄ‚êÄS‚êÄ‚êÄ‚êÄO‚êÄ‚êÄ‚êÄR‚êÄ‚êÄ‚êÄR‚êÄ‚êÄ‚êÄY‚êÄ‚êÄ‚êÄ!‚êÄ‚êÄ‚êÄ‚êÄ‚êÄ‚êÄ[‚êÄ‚êÄ‚êÄ3‚êÄ‚êÄ‚êÄ1‚êÄ‚êÄ‚êÄm‚êÄ‚êÄ‚êÄ=‚êÄ‚êÄ‚êÄ=‚êÄ‚êÄ‚êÄ=‚êÄ‚Ä¶¬ª

[04:32] <Quom> r: my $x = s; constant term:<<$x>> = set(); say s

[04:32] <camelia> rakudo-parrot 656089: OUTPUT¬´‚êÄ‚êÄ‚êÄ[‚êÄ‚êÄ‚êÄ3‚êÄ‚êÄ‚êÄ1‚êÄ‚êÄ‚êÄm‚êÄ‚êÄ‚êÄ=‚êÄ‚êÄ‚êÄ=‚êÄ‚êÄ‚êÄ=‚êÄ‚êÄ‚êÄ‚êÄ‚êÄ‚êÄ[‚êÄ‚êÄ‚êÄ0‚êÄ‚êÄ‚êÄm‚êÄ‚êÄ‚êÄS‚êÄ‚êÄ‚êÄO‚êÄ‚êÄ‚êÄR‚êÄ‚êÄ‚êÄR‚êÄ‚êÄ‚êÄY‚êÄ‚êÄ‚êÄ!‚êÄ‚êÄ‚êÄ‚êÄ‚êÄ‚êÄ[‚êÄ‚êÄ‚êÄ3‚êÄ‚êÄ‚êÄ1‚êÄ‚êÄ‚êÄm‚êÄ‚êÄ‚êÄ=‚êÄ‚êÄ‚êÄ=‚êÄ‚êÄ‚êÄ=‚êÄ‚Ä¶¬ª

[04:32] <camelia> ..rakudo-jvm 656089, rakudo-moar 656089: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unrecognized regex metacharacter = (must be quoted to match literally)‚ê§at /tmp/tmpfile:1‚ê§------> [32mmy $x = s; constant term:<<$x>> [33m‚èè[31m= set(); say s[0m‚ê§Couldn't find terminator ;‚ê§at ‚Ä¶¬ª

[04:32] <Quom> Oh

[04:32] <Quom> I'm dumb

[04:32] <Quom> r: my $x = "s"; constant term:<<"$x">> = set(); say s

[04:32] <camelia> rakudo-parrot 656089, rakudo-jvm 656089, rakudo-moar 656089: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Colon pair value '"$x"' too complex to use in name‚ê§at /tmp/tmpfile:1‚ê§------> [32mmy $x = "s"; constant term:<<"$x">>[33m‚èè[31m = set(); say‚Ä¶¬ª

[04:33] <Quom> At least it's a nice error :)

[04:33] *** rurban1 left
[04:41] *** Quom left
[04:42] *** rurban1 joined
[04:47] *** xinming__ left
[04:54] <lue> Hrm, looks like to get \n to work properly, I'd have to modify VM-specific stuff in NQP. I think I found where the change needs to happen, just no clue how :/

[04:56] <lue> (for those curious, the full list \n needs to support in P6 is  <[\xA..\xD]> | \xD\xA | \x85 | \x2028 | \x2029  )

[05:02] *** FROGGS left
[05:37] *** rurban1 left
[05:38] *** kaare__ left
[05:40] *** clkao left
[05:41] *** clkao joined
[05:45] *** xenoterracide left
[05:57] *** hoverboard left
[06:10] *** kaare__ joined
[06:11] *** fridim__ joined
[06:19] *** Vlavv left
[06:31] *** vincent22 joined
[06:31] *** xenoterracide joined
[06:32] *** Vlavv joined
[06:33] *** vincent22 left
[07:06] *** brrt joined
[07:20] *** Alina-malina joined
[07:22] *** takesako___ left
[07:24] *** darutoko joined
[07:38] *** takesako___ joined
[07:49] *** denisboyun joined
[07:54] *** denis_boyun joined
[07:54] *** denisboyun left
[07:55] *** FROGGS joined
[07:56] *** zakharyas joined
[07:58] *** SHODAN joined
[08:11] *** zakalwe left
[08:11] *** arnsholt left
[08:16] *** zakalwe joined
[08:16] *** rafail joined
[08:22] *** rafail left
[08:26] *** Alina-malina left
[08:26] *** Alina-malina joined
[08:29] <FROGGS> .tell lue The current understanding is that this field is either set by pause/cpan or by panda when installing from github

[08:29] <yoleaux> FROGGS: I'll pass your message to lue.

[08:34] *** kaleem joined
[08:39] *** pdcawley joined
[08:46] *** denis_boyun left
[08:47] *** AW3i joined
[08:49] *** xinming_ joined
[08:52] *** fhelmberger joined
[08:55] <FROGGS> p6: my %a; %a<foo> = <a b c>; %a<foo>.=uniq; say %a<foo>

[08:55] <camelia> rakudo-parrot 656089, rakudo-jvm 656089, rakudo-moar 656089, niecza v24-109-g48a8de3: OUTPUT¬´a b c‚ê§¬ª

[08:55] <FROGGS> \o/

[09:26] *** dmol joined
[09:35] <jnthn> morning, #perl6

[09:36] <JimmyZ> morning, jnthn

[09:37] <JimmyZ> parrot.org is down?

[09:39] <FROGGS> morning

[09:40] <FROGGS> JimmyZ: seems like

[09:50] <brrt> morning all

[09:50] <brrt> what

[09:50] <brrt> such fuuu

[09:51] <brrt> ehm...

[09:51] <brrt> parrot's channel was irc.parrot.org right

[09:51] <brrt> ehm

[09:51] <brrt> irc.perl.org #parrot

[09:53] <FROGGS> right

[09:54] *** pecastro joined
[09:55] <brrt> well, thats empty, too

[09:58] *** pecastro_ joined
[10:00] *** pecastro left
[10:06] <masak> quick, someone get rurban to assert that Parrot is still alive and well!

[10:09] <brrt> warning: sarcasm detection is ambigous

[10:09] <brrt> ambiguous

[10:10] <masak> sorry, I should take care not to kick a sleeping Parrot.

[10:10] <brrt> ‚Ä¶ poor parrot :-(

[10:10] <brrt> anyway

[10:10] <brrt> moving on

[10:10] <brrt> :-)

[10:11] *** pdcawley left
[10:18] *** pdcawley joined
[10:24] *** xenoterracide left
[10:24] <jnthn> m: for lines { .say }

[10:24] <camelia> rakudo-moar 656089: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Function 'lines' needs parens to avoid taking the block‚ê§at /tmp/fHufTTh2cc:1‚ê§------> [32mfor lines { .say }[33m‚èè[31m<EOL>[0m‚ê§Missing block (apparently taken by 'lines')‚ê§at /tmp/fHufTTh2cc:1‚ê§------> [32mfor ‚Ä¶¬ª

[10:24] <jnthn> nice :)

[10:24] <jnthn> lue++

[10:40] *** Woodi joined
[10:41] <Woodi> morning and have a nice spring :)

[10:42] <FROGGS> hi Woodi 

[10:46] *** denisboyun joined
[10:51] *** daniel-s joined
[11:02] *** pippo joined
[11:05] *** rurban1 joined
[11:11] *** rurban1 left
[11:12] <FROGGS> m: my %foo = a => 1, b => 2; say %foo{ (%foo (&) %foo).keys }.kv # how do I get the keys back?

[11:12] <camelia> rakudo-moar 656089: OUTPUT¬´0 1 1 2‚ê§¬ª

[11:12] <FROGGS> ohh, adverbs ftw!

[11:12] <FROGGS> m: my %foo = a => 1, b => 2; say %foo{ (%foo (&) %foo).keys }:kv

[11:12] <camelia> rakudo-moar 656089: OUTPUT¬´a 1 b 2‚ê§¬ª

[11:13] <FROGGS> m: my %foo = a => 1, b => 2; say %foo{ (%foo (&) %foo).keys }:kv.perl

[11:13] <camelia> rakudo-moar 656089: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/ksH6fcJB5T‚ê§Two terms in a row‚ê§at /tmp/ksH6fcJB5T:1‚ê§------> [32m> 2; say %foo{ (%foo (&) %foo).keys }:kv[33m‚èè[31m.perl[0m‚ê§    expecting any of:‚ê§        pair value‚ê§        infix stop‚Ä¶¬ª

[11:13] <FROGGS> m: my %foo = a => 1, b => 2; say (%foo{ (%foo (&) %foo).keys }:kv).perl

[11:13] <camelia> rakudo-moar 656089: OUTPUT¬´(("a", 1), ("b", 2))‚ê§¬ª

[11:28] *** AW3i left
[11:35] *** brrt left
[11:36] *** daniel-s left
[11:36] *** daniel-s joined
[11:40] <colomon> m: role A { method a() { say self.WHAT; }; }; class B does A { }; B.new.a

[11:40] <camelia> rakudo-moar 656089: OUTPUT¬´(B)‚ê§¬ª

[11:40] <colomon> m: role A { method a() { say "{ self.WHAT }"; }; }; class B does A { }; B.new.a

[11:40] <camelia> rakudo-moar 656089: OUTPUT¬´use of uninitialized value of type B in string context‚ê§‚ê§¬ª

[11:40] <colomon> :/

[11:41] <FROGGS> m: role A { method a() { say "{ self.WHAT() }"; }; }; class B does A { }; B.new.a

[11:41] <camelia> rakudo-moar 656089: OUTPUT¬´use of uninitialized value of type B in string context‚ê§‚ê§¬ª

[11:41] <FROGGS> well, that is correct

[11:42] <FROGGS> m: role A { method a() { say "{ self.WHAT.^name }"; }; }; class B does A { }; B.new.a

[11:42] <camelia> rakudo-moar 656089: OUTPUT¬´B‚ê§¬ª

[11:43] <jnthn> colomon: .Str vs .gist

[11:44] <colomon> jnthn++ # that fixed my code

[11:50] * colomon is sure he has made that mistake before...

[11:51] *** daniel-s left
[11:51] *** daniel-s joined
[12:04] *** daniel-s left
[12:05] *** daniel-s joined
[12:08] *** rurban1 joined
[12:11] *** kurahaupo joined
[12:12] *** rurban1 left
[12:13] *** mscha joined
[12:13] <mscha> perl6: say i**2;

[12:13] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´-1+1.2246063538223773E-16i‚ê§¬ª

[12:13] <camelia> ..rakudo-parrot 656089, rakudo-moar 656089: OUTPUT¬´-1+1.22464679914735e-16i‚ê§¬ª

[12:13] <camelia> ..rakudo-jvm 656089: OUTPUT¬´-1+1.2246467991473532E-16i‚ê§¬ª

[12:14] <mscha> perl6: say i*i;

[12:14] <camelia> rakudo-parrot 656089, rakudo-jvm 656089, rakudo-moar 656089, niecza v24-109-g48a8de3: OUTPUT¬´-1+0i‚ê§¬ª

[12:17] *** daniel-s_ joined
[12:17] *** daniel-s left
[12:21] *** kaare__ left
[12:21] <dalek> rakudo-star-daily: 3afb94d | coke++ | log/ (5 files):

[12:21] <dalek> rakudo-star-daily: today (automated commit)

[12:21] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/3afb94d8d0

[12:29] *** daniel-s_ left
[12:30] *** daniel-s_ joined
[12:30] *** skids left
[12:30] *** colomon left
[12:34] *** colomon joined
[12:34] *** xinming__ joined
[12:36] *** xinming_ left
[12:36] *** daniel-s_ left
[12:41] *** daniel-s_ joined
[12:44] <masak> perl6: say 0.5 + 0.5

[12:44] <camelia> rakudo-parrot 656089, rakudo-jvm 656089, rakudo-moar 656089, niecza v24-109-g48a8de3: OUTPUT¬´1‚ê§¬ª

[12:44] <masak> perl6: say (0.5 + 0.5).^name

[12:44] <camelia> rakudo-parrot 656089, rakudo-jvm 656089, rakudo-moar 656089, niecza v24-109-g48a8de3: OUTPUT¬´Rat‚ê§¬ª

[12:44] <jnthn> perl6: say (0.5 + 0.5).narrow.^name

[12:44] <camelia> niecza v24-109-g48a8de3: OUTPUT¬´Unhandled exception: Unable to resolve method narrow in type Rat‚ê§  at /tmp/tmpfile line 1 (mainline @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4595 (ANON @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4596 (module-CORE @ 576) ‚ê§‚Ä¶¬ª

[12:44] <camelia> ..rakudo-parrot 656089, rakudo-jvm 656089, rakudo-moar 656089: OUTPUT¬´Int‚ê§¬ª

[12:44] <masak> oh, .narrow

[12:44] <masak> r: say (i*i).narrow.^name

[12:44] <dalek> zavolaj: 4f32216 | jnthn++ | lib/NativeCall.pm6:

[12:44] <dalek> zavolaj: Guess .dll on Windows when no data.

[12:44] <dalek> zavolaj: 

[12:44] <dalek> zavolaj: If you ignore the link error and use a DLL from another platform's

[12:44] <dalek> zavolaj: build, this gets things working on JVM on Windows.

[12:44] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/4f32216d5c

[12:44] <dalek> zavolaj: ea7f1fb | jnthn++ | lib/NativeCall.pm6:

[12:44] <camelia> rakudo-parrot 656089, rakudo-jvm 656089, rakudo-moar 656089: OUTPUT¬´Int‚ê§¬ª

[12:45] <dalek> zavolaj: Updates to CArray to convey type to REPR compose.

[12:45] <dalek> zavolaj: 

[12:45] <dalek> zavolaj: This will be needed for Moar to be able to handle CArray. Can maybe

[12:45] <dalek> zavolaj: get some further cleanups here in the future once everyone switches

[12:45] <dalek> zavolaj: over to the compose protocol. Didn't try on Parrot yet, but no JVM

[12:45] <dalek> zavolaj: regression on CArray tests with this patch.

[12:45] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/ea7f1fbac7

[12:45] <masak> Rakudo++

[12:45] <jnthn> Suddenly dalek :)

[12:48] *** guru joined
[12:48] *** guru is now known as Guest5186

[12:48] *** xinming_ joined
[12:48] *** Guest5186 is now known as ajr_

[12:49] *** lizmat joined
[12:50] *** xinming__ left
[12:52] *** lizmat left
[12:52] *** lizmat joined
[12:54] *** kaare__ joined
[12:54] *** daniel-s_ left
[13:02] *** daniel-s_ joined
[13:03] *** [Sno] joined
[13:06] <dalek> specs: 8fdda4d | (Elizabeth Mattijsen)++ | S11-modules.pod:

[13:06] <dalek> specs: Rename META.info -> META6.json

[13:06] <dalek> specs: 

[13:06] <dalek> specs: Andreas Koenig pointed out that .info is being used for quite some other things

[13:06] <dalek> specs: on the Open Source world.  So we (FROGGS + lizmat) decided to change the name

[13:06] <dalek> specs: in such a way, that it is more in line with the world and still an easy way to

[13:06] <dalek> specs: distinguish a Perl 6 distribution from other distributions.

[13:06] <dalek> specs: review: https://github.com/perl6/specs/commit/8fdda4d629

[13:06] <dalek> specs: 9acccd1 | (Elizabeth Mattijsen)++ | S11-modules.pod:

[13:06] <dalek> specs: Merge branch 'master' of https://github.com/perl6/specs

[13:06] <dalek> specs: review: https://github.com/perl6/specs/commit/9acccd183f

[13:14] *** lizmat left
[13:15] *** lizmat joined
[13:16] <[Coke]> where is the GSOC channel? irssi seems to think it's dead, and isn't telling me the name of the channel it used to be.

[13:21] <masak> so... .IO.l tells me if something is a symlink -- but how do I answer the question "what does it link to?" -- either using Perl 5/6 itself, or with a Unix command.

[13:21] <masak> ...?

[13:22] <moritz> perldoc -f readlink

[13:23] <moritz> p5

[13:23] <moritz> in unix, 'ls -l' tells you where it goes, and 'chase' recursively follows symlinks

[13:23] *** bluescreen10 joined
[13:23] <masak> hm, I don't seem to have `chase` installed.

[13:24] <masak> what I'm writing is a Perl 6 program, so I guess I'll just invoke Perl 5 from it for now.

[13:24] <masak> moritz++

[13:24] <moritz> mlenz@mlenz-workstation:~/p6/rakudo$ git grep readlink

[13:24] <moritz> src/core/IO.pm:        # NYI: requires readlink()

[13:24] *** bluescreen10 left
[13:25] <masak> heh.

[13:25] *** bluescreen10 joined
[13:25] *** bluescreen10 left
[13:26] *** bluescreen100 joined
[13:26] *** bluescreen100 left
[13:26] *** bluescreen10 joined
[13:28] *** kaare__ left
[13:28] *** kbaker_ joined
[13:31] *** dayangkun left
[13:35] <FROGGS> [Coke]: #soc-help on irc.perl.org

[13:35] <dalek> specs: 1ebc34a | (Elizabeth Mattijsen)++ | S11-modules.pod:

[13:35] <dalek> specs: Use "perl" to indicate necessary Perl version

[13:35] <dalek> specs: review: https://github.com/perl6/specs/commit/1ebc34a04b

[13:35] <masak> what's the way to die without a stacktrace in Perl 6 again?

[13:36] <[Coke]> 

[13:36] *** [Coke] joined
[13:36] <FROGGS> m: die "huh"

[13:36] <camelia> rakudo-moar 656089: OUTPUT¬´huh‚ê§  in block  at /tmp/47ffYxdZ6v:1‚ê§‚ê§¬ª

[13:36] <FROGGS> m: fail "huh"

[13:36] <camelia> rakudo-moar 656089: OUTPUT¬´Unhandled exception: huh‚ê§   at src/gen/m-CORE.setting:11018  (/home/p6eval/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:throw:129)‚ê§ from src/gen/m-CORE.setting:12444  (/home/p6eval/rakudo-inst-1/languages/perl6/runtime/CORE.setting.moarvm:‚Ä¶¬ª

[13:37] <[Coke]> ah. -all- my irc.perl.org connections were dead.

[13:37] <FROGGS> masak: perhaps just say() and exit 1 :o)

[13:37] <jnthn> note and exit 1, I guess

[13:47] <masak> bah

[13:47] <masak> stacktraces, whether you want it or not.

[13:47] *** [Sno] left
[13:47] <masak> they're absolutely useless when the script is a small Unix-like tool with no call stack at all.

[13:47] *** [Sno] joined
[13:47] <jnthn> I just told you how to do a mesage and exit without one.

[13:47] <jnthn> *message

[13:48] <masak> right.

[13:48] <jnthn> If you're going to do it in a bunch of places, factor it out into a sub.

[13:48] <masak> in other words, Perl 6's &die is not up to the task.

[13:48] <jnthn> If you're doing it a lot and have a good name for said sub, suggest it for inclusion i core.

[13:48] <masak> &die-without-the-bloody-stacktrace :)

[13:49] <jnthn> Right, it's for throwing an exception, which means the situation is *exceptional*.

[13:49] * masak looks up synonyms of 'die'

[13:49] <masak> "conk" :P

[13:49] <jnthn> hehe

[13:50] <masak> "expire" is pretty good, because it looks a bit like "exit".

[13:50] <jnthn> Bit overloaded with things like cache expiration though...

[13:50] <jnthn> perish :)

[13:51] <masak> "stop"

[13:51] <masak> no, that doesn't convey "with a message" well enough...

[13:51] <masak> "halt" could work.

[13:51] <jnthn> yeah

[13:52] *** lizmat left
[13:52] <jnthn> terminate is a bit long

[13:52] <jnthn> choke :)

[13:53] <masak> a bit graphic, pehaps.

[13:53] *** btyler joined
[13:53] <jnthn> Yeah, true :)

[13:54] *** lizmat joined
[13:55] <lizmat> actually, in one of my custom test modules

[13:55] <lizmat> I've used "urgh" as the name of a sub to quit testing immediately without any stack / reports

[13:56] <lizmat> "urgh" being the sound the bad guy makes when he bites the dust in a comic

[13:57] *** skids joined
[13:57] <flussenc1> "exeunt" would be close to exit, while having strong textual connotations...

[13:58] *** flussenc1 is now known as flussence

[13:58] *** tgt joined
[13:59] *** [Sno]_ joined
[13:59] *** flussence left
[13:59] *** [Sno]_ left
[13:59] *** flussence joined
[13:59] <lizmat> dwfa   as in die without further ado

[13:59] *** [Sno]_ joined
[13:59] *** [Sno]_ left
[14:00] *** [Sno]_ joined
[14:00] *** [Sno]_ left
[14:00] *** [Sno] left
[14:06] <lizmat> r: my $a = <a b b c>; say $a.uniq.perl; say uniq($a).perl  # still not sure whether this inconsistency is correct

[14:06] <camelia> rakudo-parrot 656089, rakudo-jvm 656089, rakudo-moar 656089: OUTPUT¬´("a", "b", "c").list‚ê§(("a", "b", "b", "c"),).list‚ê§¬ª

[14:06] <jnthn> lizmat: Yes, that one is

[14:06] <colomon> lizmat: do you think it makes sense to call uniq on a list of lists?

[14:08] <jnthn> lizmat: A method call is always on the contents of a scalar, whatever it may be. 

[14:08] <lizmat> ok, that makes sense

[14:09] *** kivutar joined
[14:10] *** tgt left
[14:12] * masak kinda likes "urgh"

[14:12] * dylanwh has used bork() in similar contexts.

[14:12] *** [Sno] joined
[14:12] *** [Sno] left
[14:13] *** [Sno] joined
[14:14] *** rindolf joined
[14:19] *** treehug88 joined
[14:19] *** [Sno]_ joined
[14:20] <dalek> specs: 2168510 | (Elizabeth Mattijsen)++ | S99-glossary.pod:

[14:20] <dalek> specs: Add lemma's for PAUSE and CPAN

[14:20] <dalek> specs: review: https://github.com/perl6/specs/commit/2168510b02

[14:21] *** [Sno] left
[14:21] *** [Sno]_ is now known as [Sno]

[14:23] <mscha> Why not simply: exit "something went wrong"

[14:24] <mscha> or if you want a different value: exit "something went very wrong", 2

[14:24] *** salv0 left
[14:24] <moritz> has .stop been proposed already?

[14:25] <masak> TimToady: S09 suggestion: rename :map to :project

[14:25] <masak> mscha: I kinda like that -- but I'd want it as `exit 2, :message("something went very wrong");`

[14:26] <[Coke]> (die with a message) ABEND

[14:26] *** SamuraiJack_ left
[14:28] *** kaleem left
[14:40] *** fhelmberger left
[14:42] *** salv0 joined
[14:47] *** guru joined
[14:47] *** ajr_ left
[14:48] *** guru is now known as Guest11659

[14:48] *** Guest11659 is now known as ajr_

[14:59] * lizmat notices that TimToady's uniq/squish changes cause regressions in uniq.t/squish.t

[15:00] <lizmat> FROGGS++ seems to think it may be a problem in gather take

[15:00] <lizmat> wlll, actually it appears to be a subtle difference between .take and take($_)

[15:04] *** Rix joined
[15:04] <masak> r: $_ = (1, 2, 3); .say for gather .take

[15:04] <camelia> rakudo-parrot 656089, rakudo-jvm 656089, rakudo-moar 656089: OUTPUT¬´1‚ê§2‚ê§3‚ê§¬ª

[15:04] <masak> r: $_ = (1, 2, 3); .say for gather take($_)

[15:04] <camelia> rakudo-parrot 656089, rakudo-jvm 656089, rakudo-moar 656089: OUTPUT¬´1 2 3‚ê§¬ª

[15:04] <masak> yep.

[15:05] <masak> same as we talked about before with $a.uniq vs uniq($a), I think.

[15:05] <FROGGS> masak: yes, maybe it takes a while until it sinks in :o)

[15:07] *** kivutar left
[15:11] *** rurban1 joined
[15:15] *** rurban1 left
[15:20] <dalek> rakudo/nom: 01f1ca4 | (Elizabeth Mattijsen)++ | src/core/List.pm:

[15:20] <dalek> rakudo/nom: Fix test failures on uniq.t/squish.t

[15:20] <dalek> rakudo/nom: 

[15:20] <dalek> rakudo/nom: Calling .take flattens, whereas take($_) doesn't.  So when taking a hash with

[15:20] <dalek> rakudo/nom: a single key/value pair, only the pair was taken in the .take case.  This broke

[15:20] <dalek> rakudo/nom: the tests.

[15:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/01f1ca4502

[15:20] <dalek> roast: 76bf067 | (Elizabeth Mattijsen)++ | S32-list/uniq.t:

[15:20] <dalek> roast: Remove reference to discussion on p6l

[15:20] <dalek> roast: review: https://github.com/perl6/roast/commit/76bf067ccc

[15:20] <dalek> roast: c241c7d | (Elizabeth Mattijsen)++ | S32-list/ (2 files):

[15:20] <dalek> roast: Add tests for #121434, can now be closed

[15:21] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=121434

[15:21] <dalek> roast: review: https://github.com/perl6/roast/commit/c241c7dd9b

[15:22] *** takesako___ left
[15:23] *** kurahaupo left
[15:30] *** raiph joined
[15:30] <colomon> m: my @a := 1, -> $x { $x + 2, $x + 2 } ‚Ä¶ * ; say @a[^10]

[15:30] <camelia> rakudo-moar 656089: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/8ROSl8Qn4B‚ê§Two terms in a row‚ê§at /tmp/8ROSl8Qn4B:1‚ê§------> [32mmy @a := 1, -> $x { $x + 2, $x + 2 } [33m‚èè[31m‚Ä¶ * ; say @a[^10][0m‚ê§    expecting any of:‚ê§        postfix‚ê§        st‚Ä¶¬ª

[15:31] <dalek> rakudo/nom: 4a3a406 | (Elizabeth Mattijsen)++ | docs/ChangeLog:

[15:31] <dalek> rakudo/nom: Changelog entry for .=uniq/squish fix

[15:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4a3a406840

[15:32] <colomon> m: my @a := 1, -> $x { $x + 2 } ‚Ä¶ * ; say @a[^10]

[15:32] <camelia> rakudo-moar 656089: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/bHTAEEDjL9‚ê§Two terms in a row‚ê§at /tmp/bHTAEEDjL9:1‚ê§------> [32mmy @a := 1, -> $x { $x + 2 } [33m‚èè[31m‚Ä¶ * ; say @a[^10][0m‚ê§    expecting any of:‚ê§        postfix‚ê§        statement ‚Ä¶¬ª

[15:33] <colomon> ack, bad Colloquy, bad.

[15:34] *** rurban1 joined
[15:35] <colomon> m: https://gist.github.com/colomon/9550146

[15:35] <camelia> rakudo-moar 656089: OUTPUT¬´(timeout)¬ª

[15:35] <colomon> whoops

[15:35] <colomon> m: https://gist.github.com/colomon/9550146

[15:35] <camelia> rakudo-moar 656089: OUTPUT¬´0.5 0.75 0.5625 0.703125 0.585938 0.683594 0.598145 0.672913 0.605621 0.666183‚ê§¬ª

[15:37] <colomon> m: https://gist.github.com/colomon/9550146

[15:37] <camelia> rakudo-moar 656089: OUTPUT¬´0.633506773205973‚ê§¬ª

[15:39] <colomon> m: https://gist.github.com/colomon/9550146

[15:39] <camelia> rakudo-moar 656089: OUTPUT¬´3.15703017645517‚ê§¬ª

[15:39] *** pecastro_ is now known as pecastro

[15:39] <colomon> there we go

[15:39] <colomon> there we go

[15:39] <colomon> m: https://gist.github.com/colomon/9550146

[15:39] <camelia> rakudo-moar 656089: OUTPUT¬´3.1493784731686‚ê§¬ª

[15:39] *** takesako___ joined
[15:40] <colomon> m: https://gist.github.com/colomon/9550146

[15:40] <camelia> rakudo-moar 656089: OUTPUT¬´3.14472328668891‚ê§¬ª

[15:41] <colomon> m: https://gist.github.com/colomon/9550146

[15:41] *** yoleaux left
[15:41] <camelia> rakudo-moar 656089: OUTPUT¬´3.14316070553226‚ê§¬ª

[15:42] <masak> [\*] @b Z/

[15:42] <masak> looks like a very confused \o/ :)

[15:44] <TimToady> doesn't look like it converges very fast...

[15:44] <colomon> TimToady: you can say that again

[15:44] <colomon> but it's a cool equation, easily implemented, at any rate.

[15:45] <TimToady> 1,2,2,4,4,4,4,... is a cool sequence

[15:45] *** yoleaux joined
[15:45] *** ChanServ sets mode: +v yoleaux

[15:45] *** yoleaux left
[15:45] <colomon> (note that this one is 2, 2, 4, 4, 6, 6, 8, 8 ‚Ä¶ )

[15:45] <TimToady> though I'd guess people would expect the next number to be 8 rather than 6 

[15:45] *** yoleaux joined
[15:45] *** ChanServ sets mode: +v yoleaux

[15:46] <TimToady> m: my @a := 1, -> $x { $x + 2, $x + 2 } ... *; say @a[^20]

[15:46] <camelia> rakudo-moar 656089: OUTPUT¬´1 3 3 5 5 7 7 9 9 11 11 13 13 15 15 17 17 19 19 21 21 23 23 25 25 27 27 29 29 31 31 33 33 35 35 37 37 39 39‚ê§¬ª

[15:46] <colomon> right

[15:47] <TimToady> why doesn't that double the number of entries each time?

[15:47] <colomon> TimToady

[15:47] <colomon> ack

[15:47] <masak> TimToady: because the block only takes one parameter?

[15:47] <colomon> TimToady: sequence op takes the last thing on the sequence

[15:47] <colomon> doesn't matter how many you add

[15:48] <masak> TimToady: you're thinking of some different semantics :P

[15:48] <japhb__> I have an array of strings.  I want to check for certain special strings, do something in response to finding them, and remove them from the array.  Array order is not critical -- it's effectively a set in disguise -- and array identity is not important (I can create a new array if needed).  What's the most idiomatic and terse way to do this?  In Perl 5, I would do "my %hash = map {($_ => 1)} @array; thing_a() if delete $hash{key_a}; thing_b() if delete $hash{ke

[15:49] * TimToady goes for a second cup of coffee to see if that doubles his previous output

[15:49] *** erdic left
[15:50] * colomon just hopes TimToady doesn't come back and re-spec the sequence op

[15:50] *** erdic joined
[15:51] <TimToady> nope, I figgered it out while I was pouring the second cup of coffee

[15:51] *** Mouq joined
[15:51] <colomon> japhb__: @array.grep({ if Test($_) { something($_); False; } else { True; })

[15:52] <colomon> japhb__: though sideeffects in grep make me kind of queasy

[15:52] *** btyler left
[15:53] <colomon> japhb__: my @special = @array.grep({ Test($_) }); @special.map({ something($_) }); @array = (@array (-) @special).lis

[15:53] <colomon>   errr, .list

[15:53] <Mouq> @array.map: {when "key_a" { thing_a }; when "key_b" { thing_b } }

[15:53] *** treehug8_ joined
[15:54] * colomon has been using (-) a good bit in his $work code

[15:54] *** treehug88 left
[15:56] *** kivutar joined
[15:59] <japhb__> Mouq: Deleting the special values from the array is a key part of the question.  :-)

[15:59] *** ajr_ left
[16:00] <japhb__> Colomon's first answer is interesting, despite his queasiness at suggesting it.  :-)

[16:00] <colomon> japhb__: and my second answer doesn't work -- it's effectively also calling uniq on the array

[16:00] <Mouq> japhb__: Just use a Set and :delete?

[16:01] <colomon> Mouq: that too is like calling uniq on the array

[16:01] <colomon> of course, if it really is a set in meaning anyway...

[16:01] <Mouq> my $set = set @array; thing_a if $set<key_a>:delete; etc

[16:02] <japhb__> colomon: Yeah, the values were already uniq at the start (it's a list of active capability flags, effectively)

[16:03] <japhb__> Mouq: Hmmm, I'd forgotten that :delete works on sets.

[16:04] * colomon wonders if that has been tested

[16:04] <TimToady> sets are immutable

[16:04] <TimToady> might work on a SetHash

[16:04] <japhb__> m: my @array = <a b c>; my $set = set @array; say "saw a" if $set<a>:delete; say "saw q" if $set<q>:delete; @array = $set.list; say @array;

[16:04] <camelia> rakudo-moar 656089: OUTPUT¬´Cannot call 'delete_key' on an immutable 'Set'‚ê§  in block  at src/gen/m-CORE.setting:1932‚ê§  in sub postcircumfix:<{ }> at src/gen/m-CORE.setting:2554‚ê§  in sub postcircumfix:<{ }> at src/gen/m-CORE.setting:2541‚ê§  in block  at /tmp/aKpwHgkY4t:1‚ê§‚ê§¬ª

[16:04] *** guru joined
[16:05] *** guru is now known as Guest1628

[16:05] <lizmat> r: (<a b c>.Set)<a>:delete

[16:05] <camelia> rakudo-parrot 656089: OUTPUT¬´Cannot call 'delete_key' on an immutable 'Set'‚ê§  in block  at gen/parrot/CORE.setting:1936‚ê§  in sub postcircumfix:<{ }> at gen/parrot/CORE.setting:2558‚ê§  in sub postcircumfix:<{ }> at gen/parrot/CORE.setting:2545‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[16:05] <camelia> ..rakudo-jvm 656089: OUTPUT¬´Cannot call 'delete_key' on an immutable 'Set'‚ê§  in block  at gen/jvm/CORE.setting:1932‚ê§  in sub postcircumfix:<{ }> at gen/jvm/CORE.setting:2554‚ê§  in sub postcircumfix:<{ }> at gen/jvm/CORE.setting:2541‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[16:05] <camelia> ..rakudo-moar 656089: OUTPUT¬´Cannot call 'delete_key' on an immutable 'Set'‚ê§  in block  at src/gen/m-CORE.setting:1932‚ê§  in sub postcircumfix:<{ }> at src/gen/m-CORE.setting:2554‚ê§  in sub postcircumfix:<{ }> at src/gen/m-CORE.setting:2541‚ê§  in block  at /tmp/tmpfile:1‚ê§‚ê§¬ª

[16:05] <japhb__> TimToady: What's the idiom for making a SetHash from an array?

[16:05] <colomon> .SetHash

[16:05] * colomon hopes he has it right today

[16:06] <lizmat> r: <a b c>.SetHash.perl.say

[16:06] <camelia> rakudo-parrot 656089, rakudo-moar 656089: OUTPUT¬´SetHash.new("a","b","c")‚ê§¬ª

[16:06] <camelia> ..rakudo-jvm 656089: OUTPUT¬´SetHash.new("b","a","c")‚ê§¬ª

[16:06] <japhb__> m: my @array = <a b c>; my $set = @array.SetHash; say "saw a" if $set<a>:delete; say "saw q" if $set<q>:delete; @array = $set.list; say @array;

[16:06] <camelia> rakudo-moar 656089: OUTPUT¬´saw a‚ê§b c‚ê§¬ª

[16:06] <japhb__> Oooh, that will work nicely.

[16:06] <TimToady> usually you're building up a SetHash one value at a time, so $sethash{$key}++ is the normal thing :)

[16:07] <colomon> $sethash{$key}-- works too?

[16:07] <lizmat> yes

[16:07] <TimToady> specced to

[16:07] <colomon> afk # "Now now now READ!" -- a certain five year old, over and over again

[16:07] <TimToady> and lizmat++ put a lot of work into making it work

[16:07] <lizmat> r: my $s= <a b c>.SetHash; $s<a>--; say $a.perl

[16:07] <japhb__> TimToady: Nah, my array is actually the result of a parser (match objects thrown away by that point, the parser is a separate module).

[16:07] <camelia> rakudo-parrot 656089, rakudo-jvm 656089, rakudo-moar 656089: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Variable '$a' is not declared‚ê§at /tmp/tmpfile:1‚ê§------> [32ms= <a b c>.SetHash; $s<a>--; say $a.perl[33m‚èè[31m<EOL>[0m‚ê§    expecting any‚Ä¶¬ª

[16:07] <lizmat> r: my $s= <a b c>.SetHash; $s<a>--; say $s.perl

[16:07] <camelia> rakudo-parrot 656089, rakudo-jvm 656089, rakudo-moar 656089: OUTPUT¬´SetHash.new("b","c")‚ê§¬ª

[16:08] <lizmat> r: my $s= <a b c>.SetHash; $s<a>++; say $s.perl

[16:08] <camelia> rakudo-parrot 656089, rakudo-moar 656089: OUTPUT¬´SetHash.new("a","b","c")‚ê§¬ª

[16:08] <camelia> ..rakudo-jvm 656089: OUTPUT¬´SetHash.new("b","a","c")‚ê§¬ª

[16:08] <lizmat> r: my $s= <a b c>.BagHash; $s<a>++; say $s.perl

[16:08] <camelia> rakudo-jvm 656089: OUTPUT¬´("b"=>1,"a"=>2,"c"=>1).BagHash‚ê§¬ª

[16:08] <camelia> ..rakudo-parrot 656089, rakudo-moar 656089: OUTPUT¬´("a"=>2,"b"=>1,"c"=>1).BagHash‚ê§¬ª

[16:09] *** Guest1628 is now known as ajr_

[16:10] *** denisboyun left
[16:11] <dalek> specs: 7b30bf2 | (Elizabeth Mattijsen)++ | S11-modules.pod:

[16:11] <dalek> specs: Make CPAN/Github more generic "autorities"

[16:11] <dalek> specs: review: https://github.com/perl6/specs/commit/7b30bf29a4

[16:11] <lizmat> oops, *authorities

[16:12] <Mouq> m: my @array = gather for <a b c> {when "a" {say "saw a"};when "q" {say "saw q"}}; say @array

[16:12] <camelia> rakudo-moar 656089: OUTPUT¬´saw a‚ê§‚ê§¬ª

[16:12] <Mouq> m: my @array = gather for <a b c> {when "a" {say "saw a"};when "q" {say "saw q"};default{.take}}; say @array

[16:12] <camelia> rakudo-moar 656089: OUTPUT¬´saw a‚ê§b c‚ê§¬ª

[16:14] *** Mouq left
[16:16] *** rurban1 left
[16:22] *** arnsholt joined
[16:25] *** kivutar left
[16:26] *** benabik left
[16:26] *** rurban1 joined
[16:29] *** daniel-s_ left
[16:29] *** daniel-s_ joined
[16:31] <lizmat> while working again on S11/S22, I'm coming to the conclusion that "auth" (such as cpan:JRANDOM)

[16:32] <lizmat> is really a combination of "authority" and "userid"

[16:32] <lizmat> and that "author" would be an optional (possibly real name) of the author / last maintainer

[16:33] <lizmat> to add to this, I think we need to split off the content delivery part from the authority

[16:33] <lizmat> CPAN in Perl 5 is an example of being an authority *and* a content delivery

[16:34] <lizmat> what we're doing now at the QA hackathon, is starting to use CPAN as a content delivery system, but not yet as an authority

[16:34] <lizmat> the current Perl6 ecosystem / panda, is an example of an authority only

[16:34] <lizmat> the content delivery there is done by github

[16:34] <TimToady> we mainly have to be careful to preserve the concept of "identity", so we never accidentally install two different things thinking they're the same thing

[16:35] <TimToady> but github hashes mostly solve that

[16:36] <lizmat> so the combination of the auth cpan:JRANDOM and ver 1.0 would be an identity ?

[16:36] <TimToady> well, and the module name

[16:36] <lizmat> of course, yes

[16:36] <TimToady> that's assuming cpan never allows v1.0 to be redefined

[16:36] <TimToady> but maybe we should be pushing cpan toward cryptochecksums

[16:37] <lizmat> techincally, PAUSE only checks the names of tarballs

[16:37] <lizmat> you can only upload a tarball with the same name once

[16:38] <lizmat> PAUSE already does checksums (SHA1, SHA256 and MD5)

[16:38] *** kaare__ joined
[16:39] <lizmat> in my view, an authority is responsible for selecting the content for a given distribution request

[16:40] <lizmat> specifically, if there is *no* auth and/or no version, it should give the content that is best for the requestor

[16:40] <lizmat> whatever the authority decides is best

[16:40] <lizmat> in the Perl 5 CPAN case, this is from the module list

[16:41] <TimToady> that is something different from auth, so should probably have a different name

[16:41] <lizmat> for Perl 6 I was thinking we need to generalize that into functionality that an authority (CPAN / ecosystem / some company's own authority) would mean

[16:41] <TimToady> it's something that decides what a wildcard auth meatns

[16:41] <TimToady> *means

[16:41] <lizmat> indeed

[16:42] <TimToady> auth as a concept has nothing to do with retrieval, only who says what that name/version mean exactly

[16:42] <TimToady> mixing that up with retrieval seems like a confusion to me

[16:43] <TimToady> yes, it's a kind of authority, but I'd rather give it a different name to avoid confusion

[16:43] <lizmat> ecosystem ?

[16:44] <TimToady> well, it's a decider of wildcards, like a path searcher, or some such

[16:44] <TimToady> it's a recommender, an oracle, a travel agent

[16:45] <lizmat> hmmm...  I see this process as non-automatic, essentially community driven

[16:45] <TimToady> it's an editorial function, yes

[16:45] <TimToady> it's like an editor picking which authors you get to read

[16:46] <lizmat> use Novel;

[16:46] <lizmat> indeed

[16:46] <lizmat> however, this is not during runtime, this is to pick for installation

[16:46] <lizmat> once it is installed, we already have all bases covered (I think)

[16:47] <TimToady> it's like a book's identity is its author, its name, its revision

[16:47] <TimToady> that's the S11 meaning of auth

[16:47] *** ajr_ left
[16:47] <TimToady> just that some authors are, like, companies or groups

[16:47] <lizmat> indeed, but if somebody says: "give me a good book on Foo", which one will one get ?

[16:47] <TimToady> but we should keep the publishing/bookselling as a separate concept

[16:47] *** ajr joined
[16:48] *** ajr is now known as Guest24638

[16:48] <TimToady> just don't want to usurp "auth" for that somebody instead of the original author

[16:48] *** Guest24638 is now known as ajr_

[16:49] <[Coke]> "what's up?" http://explosm.net/comics/3493/ ISTR this might relate to masak.

[16:49] <lizmat> what we need, is some community driven / accepted way of handling incomplete identity requests

[16:49] <lizmat> similar to Perl5's module list

[16:49] <TimToady> oh, btw, lizmat++ for fixing the .take thing

[16:49] <lizmat> yw  :-)

[16:50] <dalek> nqp/rotwang/parallel-make-gh152: 6ad73ae | (Bart≈Çomiej Palmowski)++ | / (3 files):

[16:50] <dalek> nqp/rotwang/parallel-make-gh152: Fix parallel make GH #152

[16:50] <dalek> nqp/rotwang/parallel-make-gh152: 

[16:50] <dalek> nqp/rotwang/parallel-make-gh152: just not on netbsd

[16:50] <dalek> nqp/rotwang/parallel-make-gh152: 

[16:50] <lizmat> FROGGS++ found the fix, really

[16:50] <dalek> nqp/rotwang/parallel-make-gh152: Analysis and Patch by Rotwang:

[16:50] <dalek> nqp/rotwang/parallel-make-gh152: 1) Inside nqp's main makefile three libraries have the same make recursive

[16:50] <dalek> nqp/rotwang/parallel-make-gh152: jump.  Which means that more than one make instance (separate processes)

[16:50] <dalek> nqp/rotwang/parallel-make-gh152: will try to build the same objects.

[16:50] <dalek> nqp/rotwang/parallel-make-gh152: 

[16:50] <dalek> nqp/rotwang/parallel-make-gh152: 2) dyncall makefiles fail due to:

[16:50] <dalek> nqp/rotwang/parallel-make-gh152: http://lists.gnu.org/archive/html/bug-make/2013-12/msg00019.html

[16:50] <dalek> nqp/rotwang/parallel-make-gh152: review: https://github.com/perl6/nqp/commit/6ad73ae944

[16:50] <arnsholt> jnthn: FYI, I've started a branch to skip the stringification step of JAST to bytecode compilation

[16:50] <TimToady> but sure, especially when an author goes silent and a different author's fork becomes the new standard

[16:50] *** treehug8_ left
[16:50] <arnsholt> I think it should be mostly a matter of putting in the elbow-grease (knock on wood)

[16:51] <TimToady> you need such editorial control not just at the community level, but at the company level as well, maybe more so than community control even

[16:51] <TimToady> since companies tend to be more risk adverse than the community

[16:51] <lizmat> I was using community in a loose sense here

[16:52] <TimToady> okay, just wanted to make sure the concept stays multi-level :)

[16:52] <lizmat> the way I see it, is that the first part of the auth

[16:52] <lizmat> is something that indicates what I just called "authority"

[16:52] <lizmat> but maybe "ecosystem" is better

[16:52] *** pecastro left
[16:52] <TimToady> it's a false indication, I think

[16:52] *** treehug88 joined
[16:52] <lizmat> in the sense that we can have multiple ecosystems

[16:52] <lizmat> from which to install distributions

[16:53] <TimToady> the editorial function really has very little to do with the original naming authority

[16:53] <lizmat> true

[16:53] <lizmat> but we need something here to really have things starting to work

[16:53] <TimToady> think about how URLs work; editorial work is almost always done with other people's URLs, not one's own

[16:53] <jnthn> arnsholt: Awesome. Did you see my "why things don't quite work on Windows for perl6-j NativeCall" from yesterday?

[16:54] <TimToady> so trying to read more into the URL than original authorship would be mistake

[16:54] <TimToady> same with the "cpan:" or the "github" prefix, it should only be identity, not editorial

[16:55] <lizmat> so you would only see CPAN and github as content delivery systems

[16:55] <lizmat> or any place where to get distributions

[16:55] <TimToady> and how would you pick between those if the editor has to be one or the other?

[16:55] <lizmat> and just have a single editor ?

[16:56] <skids> .oO(other environments use "publisher")

[16:56] <TimToady> would just prefer that the editor not be given a name that would confuse it with "auth"

[16:56] <TimToady> which is more of a URL concept

[16:56] <lizmat> when you're installing a module, you most likely already have selected the content delivery system to install from

[16:57] <TimToady> sure, but there are maybe two different things called 'cpan' here.  or maybe the auth should be 'pause:' instead of 'cpan:'

[16:58] <lizmat> indeed, the content delivery part, and the part that tells you which distribution to download for "Foo" (any author/any version)

[17:00] <arnsholt> jnthn: No, I didn't

[17:01] * arnsholt scrollbacks

[17:01] <lizmat> QA hackathon midway standup time&

[17:04] * TimToady has to go watch the new Miyazaki movie now :)

[17:06] <arnsholt> jnthn: Cheers, those are exactly the kinds of thing I expected might happen

[17:10] <lizmat> TimToady: recommendation manager (as a term instead of authority)

[17:11] *** ajr_ left
[17:11] *** guru joined
[17:12] *** guru is now known as ajr_

[17:15] <colomon> TimToady++

[17:15] <rurban> TimToady: I cried at this movie. Very good

[17:15] * colomon is several Miyazaki movies behind at this point.

[17:21] *** zakharyas left
[17:31] *** [Sno] left
[17:32] <dalek> specs: 14ba243 | (Elizabeth Mattijsen)++ | S11-modules.pod:

[17:32] <dalek> specs: Spec "production" flag in META6.json

[17:32] <dalek> specs: review: https://github.com/perl6/specs/commit/14ba2432b6

[17:34] <lizmat> QA hackathon dinner&

[17:34] *** lizmat left
[17:41] *** ajr_ left
[17:45] *** Khisanth left
[17:46] *** Khisanth joined
[17:47] *** FROGGS left
[17:49] *** Rotwang1 joined
[17:50] <arnsholt> jnthn: Bah. There's no ldout in Perl's %Config

[17:50] <arnsholt> Maybe it's in ExtUtils somewhere

[17:50] *** Khisanth left
[17:51] *** Khisanth joined
[18:05] *** xenoterracide joined
[18:07] *** SamuraiJack_ joined
[18:10] *** SamuraiJack_ left
[18:12] <timotimo> o/

[18:13] *** rom1504 left
[18:16] *** guru joined
[18:16] *** guru is now known as ajr_

[18:21] *** pecastro joined
[18:24] *** fridim__ left
[18:24] *** FROGGS joined
[18:28] <lue> hello world o/

[18:28] <yoleaux> 08:29Z <FROGGS> lue: The current understanding is that this field is either set by pause/cpan or by panda when installing from github

[18:29] <lue> FROGGS: I've just come to the conclusion that I should wait for all the hackathon-related dust to settle, and to read the resultant changes, before really complaining about anything. :)

[18:30] <lue> [I suppose I was just surprised that a critical part of identifying any given module was suddenly changed in how it's set]

[18:31] <FROGGS> lue: yes you are right, it is likely to change again because we are just in the transition from speccing to implementing it

[18:33] *** tgt joined
[18:39] <dalek> zavolaj: ef713c4 | jnthn++ | t/06-struct.c:

[18:39] <dalek> zavolaj: Tweak 06-struct.c to cope with MSVC.

[18:39] <dalek> zavolaj: 

[18:39] <dalek> zavolaj: Treats long as 32-bit even on a 64-bit box.

[18:39] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/ef713c4942

[18:39] <dalek> zavolaj: be4edd4 | jnthn++ | t/06-struct.t:

[18:39] <dalek> zavolaj: Fix assignment/binding confusion.

[18:39] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/be4edd4f99

[18:39] <dalek> zavolaj: b970480 | jnthn++ | t/06-struct.t:

[18:39] <dalek> zavolaj: Correct test message.

[18:39] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/b970480390

[18:39] <dalek> zavolaj: 2454ace | jnthn++ | t/07-writebarrier.t:

[18:39] <dalek> zavolaj: Another container avoidance in binding.

[18:39] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/2454ace547

[18:39] <timotimo> i still need to find some place to stay for the GPW in 2 weeks

[18:48] *** kurahaupo joined
[18:49] *** FROGGS left
[18:53] *** zakharyas joined
[18:54] *** bluescreen10 left
[18:54] *** bluescreen10 joined
[18:58] *** darutoko left
[18:58] <nwc10> OK, so I have a nice fresh perl6-m

[18:58] <nwc10> how do I gest zavolaj?

[18:59] *** hoverboard joined
[19:02] <nwc10> test

[19:14] <moritz> nwc10: since it has no dependencies, cloning the zavolaj repo and building it is probably faster than using panda

[19:14] <nwc10> it's not clear how to "build" it

[19:14] <nwc10> but I sort of answered the question on #moarvm

[19:17] <raiph> m: for $*IN {.say}

[19:17] <camelia> rakudo-moar 4a3a40: OUTPUT¬´Failed to write bytes to filehandle: bad file descriptor‚ê§  in method print at src/gen/m-CORE.setting:13550‚ê§  in method print at src/gen/m-CORE.setting:13548‚ê§  in method say at src/gen/m-CORE.setting:13562‚ê§  in method say at src/gen/m-CORE.setting:1‚Ä¶¬ª

[19:17] <raiph> ww

[19:19] <raiph> m: lines

[19:19] <camelia> rakudo-moar 4a3a40: OUTPUT¬´(signal SEGV)¬ª

[19:19] <moritz> for $*IN {.say}   is like   $*IN.say

[19:20] <raiph> moritz: yeah, didn't mean that to be in public channel

[19:20] <raiph> r: lines

[19:21] <camelia> rakudo-parrot 4a3a40, rakudo-jvm 4a3a40: ( no output )

[19:21] <camelia> ..rakudo-moar 4a3a40: OUTPUT¬´(signal SEGV)¬ª

[19:21] <moritz> that one, OTOH, shouldn't segv :-)

[19:22] <raiph> p: for lines {.say}

[19:22] <camelia> rakudo-parrot 4a3a40: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Function 'lines' needs parens to avoid taking the block‚ê§at /tmp/YGrlngaxqh:1‚ê§------> [32mfor lines {.say}[33m‚èè[31m<EOL>[0m‚ê§Missing block (apparently taken by 'lines')‚ê§at /tmp/YGrlngaxqh:1‚ê§------> [32mfor ‚Ä¶¬ª

[19:23] <raiph> p: for .lines {.say}

[19:23] <camelia> rakudo-parrot 4a3a40: OUTPUT¬´Cannot call 'lines'; none of these signatures match:‚ê§:(Cool:D: *%_)‚ê§  in any  at gen/parrot/BOOTSTRAP.nqp:1219‚ê§  in any  at gen/parrot/BOOTSTRAP.nqp:1210‚ê§  in method lines at gen/parrot/CORE.setting:3581‚ê§  in block  at /tmp/Y6Fmu9jg9c:1‚ê§‚ê§¬ª

[19:23] <raiph> p: for lines() {.say}

[19:23] <camelia> rakudo-parrot 4a3a40: OUTPUT¬´There were three men came out of the West‚ê§Their fortunes for to try‚ê§And these three men made a solemn vow‚ê§John Barleycorn must die‚ê§‚ê§They've ploughed, they've sewn, they've harrowed him in‚ê§Threw clouds upon his head‚ê§And these three men made ‚Ä¶¬ª

[19:23] <raiph> p: say for lines() %{$_}++

[19:23] <camelia> rakudo-parrot 4a3a40: OUTPUT¬´No such method 'succ' for invocant of type 'Block'‚ê§  in sub postfix:<++> at gen/parrot/CORE.setting:1791‚ê§  in sub postfix:<++> at gen/parrot/CORE.setting:1790‚ê§  in block  at /tmp/bPExxr09VN:1‚ê§‚ê§¬ª

[19:24] <raiph> p: for lines() my %a{$_}++ and say %a

[19:24] <camelia> rakudo-parrot 4a3a40: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Nqb_O8K1zv‚ê§Missing block‚ê§at /tmp/Nqb_O8K1zv:1‚ê§------> [32mfor lines() [33m‚èè[31mmy %a{$_}++ and say %a[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        infix stopper‚ê§        inf‚Ä¶¬ª

[19:24] <raiph> p: for lines() { my %a{$_}++} and say %a

[19:24] <camelia> rakudo-parrot 4a3a40: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/7WgtoBb1bm‚ê§Invalid hash shape; type expected‚ê§at /tmp/7WgtoBb1bm:1‚ê§------> [32mfor lines() { my %a{$_}[33m‚èè[31m++} and say %a[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        stat‚Ä¶¬ª

[19:25] <raiph> p: my %a; for lines() { %a{$_}++}; say %a

[19:25] <camelia> rakudo-parrot 4a3a40: OUTPUT¬´("There were three men came out of the West" => 1, "Their fortunes for to try" => 1, "And these three men made a solemn vow" => 2, "John Barleycorn must die" => 1, "" => 9, "They've ploughed, they've sewn, they've harrowed him in" => 1, "Threw clouds upo‚Ä¶¬ª

[19:25] <raiph> darn it, sorry for spam, ww again :(

[19:27] *** kurahaupo left
[19:28] *** kurahaupo joined
[19:29] *** treehug88 left
[19:31] *** treehug88 joined
[19:53] *** colomon left
[19:54] *** colomon joined
[20:00] <colomon> m: say lines().Bag

[20:00] <camelia> rakudo-moar 4a3a40: OUTPUT¬´(signal SEGV)¬ª

[20:00] <colomon> p: say lines.Bag

[20:00] <camelia> rakudo-parrot 4a3a40: OUTPUT¬´bag(There were three men came out of the West, Their fortunes for to try, And these three men made a solemn vow(2), John Barleycorn must die, (9), They've ploughed, they've sewn, they've harrowed him in, Threw clouds upon his head, John Barleycorn was de‚Ä¶¬ª

[20:00] <colomon> p: say lines.Bag.perl

[20:00] <camelia> rakudo-parrot 4a3a40: OUTPUT¬´("There were three men came out of the West"=>1,"Their fortunes for to try"=>1,"And these three men made a solemn vow"=>2,"John Barleycorn must die"=>1,""=>9,"They've ploughed, they've sewn, they've harrowed him in"=>1,"Threw clouds upon his head"=>1,"Jo‚Ä¶¬ª

[20:01] <retupmoca> panda on moarvm won't bootstrap for me: ===SORRY!===\n!cursor_start_cur cannot restart a cursor

[20:01] <retupmoca> does anyone else see this, or did I break something locally?

[20:07] <lue> retupmoca: does panda work with other backends?

[20:08] <jnthn> It's first time I've seen that issue mentioned here

[20:16] <lue> Just got it trying to use ufo on zavolaj too, affecting all backends :/

[20:17] <lue> Yeah, as I suspected, it seems to be my fault :(

[20:21] <lue> jnthn: anything about    {$*BORG<culprit> := $*BORG<culprit> // $<EXPR>.CURSOR.at(self.pos)}    that makes you recoil in horror? :)

[20:22] *** zakharyas left
[20:22] <lue> STD's version of the same is  https://github.com/perl6/std/blob/master/STD.pm6#L1215

[20:22] <jnthn> Hmm. I'm sure .at is what you're looking for there

[20:22] <jnthn> What are you tyring to do?

[20:22] <jnthn> Shift the cursor to that position?

[20:22] <jnthn> .'!cursor_pos' may do it if so

[20:23] *** erdic left
[20:23] *** erdic joined
[20:23] <lue> At that point, I'm trying to set $*BORG<culprit> to a position that gets used in reporting when a block is missing.

[20:24] <jnthn> ah, then at certainly sounds wrong.

[20:25] <lue> (this is in xblock in the grammar, for context)

[20:25] <jnthn> See if the method I suggested might do it

[20:25] <jnthn> But I don't know what it returns

[20:26] <lue> jnthn: I use .'!cursor_pos' in pblock to move the position for the error, so I'm certain that's wrong.

[20:26] <jnthn> Oh, what's not what you wnat to do?

[20:27] <jnthn> oh...

[20:27] <lue> jnthn: I think I may just want $<EXPR>.CURSOR.pos

[20:27] <jnthn> It looks like whatever_thingy.cusror(self.pos) will just make a cursor that is set to that position.

[20:27] <jnthn> uh, the current position.

[20:28] <lue> jnthn: I feel silly. I'm not actually using <culprit> :P

[20:30] <lue> jnthn: STD uses <culprit> to accomplish an error message with two "this is the code that fails" things; I opted for making existing error functions do that for me, thus negating the need for culprit.

[20:30] <jnthn> ok :)

[20:31] <jnthn> Then, easy fix?

[20:31] *** denisboyun joined
[20:31] <lue> Yeah, just deleted all the stuff with <culprit>. Testing to see if it builds, and then try to run ufo.

[20:35] <lue> cool, now I get a totally different error for ufo :)

[20:36] <dalek> rakudo/nom: a2db06e | lue++ | src/Perl6/Grammar.nqp:

[20:36] <dalek> rakudo/nom: Remove useless code from grammar.

[20:36] <dalek> rakudo/nom: 

[20:36] <dalek> rakudo/nom: Better yet, it was causing errors!

[20:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a2db06eb02

[20:36] <lue> retupmoca: pull latest rakudo and try again, should work :)

[20:36] * lue afk

[20:46] *** raiph left
[20:48] *** treehug88 left
[20:49] <jnthn> arnsholt: I think explicitly-manage will want a re-visit at some point in terms of its implementation details...

[21:00] *** bluescreen10 left
[21:04] <arnsholt> jnthn: I want to remove it entirely, once I get a chance to refactor some bits, actually

[21:04] <arnsholt> It's a terrible, terrible hack

[21:11] *** clkao left
[21:13] *** clkao joined
[21:16] *** kbaker_ left
[21:18] <timotimo> o/

[21:18] <jnthn> arnsholt: Yeah, tell me about it... And my way of making it sorta-work on Moar is an even worse hack.

[21:19] <jnthn> arnsholt: As in, "every single call pays the price for the hack" 

[21:20] <[Coke]> that sounds... bad

[21:21] <jnthn> Yeah. It needs to die.

[21:21] <jnthn> We can worry about that once the test suite passes on Moar though.

[21:21] *** skids left
[21:26] <dalek> nqp: f71ff29 | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[21:26] <dalek> nqp: Add decont for nativecallrefresh.

[21:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f71ff293a1

[21:26] <dalek> nqp: 5cafc1d | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[21:26] <dalek> nqp: Hack to make the cstr thing work out.

[21:26] <dalek> nqp: 

[21:26] <dalek> nqp: The plan is to make that go away, but for now we depend on it to get

[21:26] <dalek> nqp: the NativeCall tests passing.

[21:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/5cafc1dd6d

[21:27] *** BenGoldberg joined
[21:28] *** rindolf left
[21:30] <jnthn> With latest Moar/NQP/Rakudo/NativeCall, on my box at least we now pass everything except the callback tests.

[21:30] <nwc10> NQP build midway

[21:30] <jnthn> Trying out DBIish on Moar is greatly encouraged, if anybody has the tuits :)

[21:32] <jnthn> arnsholt: What is the role of the callback cache, roughly?

[21:34] * jnthn is trying to work out what it's keyed on...

[21:35] *** Mouq joined
[21:37] *** Bucciarati left
[21:37] *** Bucciarati joined
[21:38] <rurban1> mingw32 has perl 5.8.8. // fails there. (nqp Configure git-options)

[21:38] <nwc10> jnthn: presumably it's LHF to get the zavolaj tests to report the correct test numbers for the ok's

[21:39] <nwc10> (ie resetting the Test.pm idea of current test after the C tests)

[21:39] <jnthn> nwc10: Yes, if it causes issues.

[21:39] <nwc10> "it's not pretty" and 2 of us have mistaken it

[21:39] <nwc10> jnthn++ # "works on my machine too"

[21:39] <nwc10> 01-07 all happy

[21:39] <jnthn> yay

[21:40] *** kaare__ left
[21:40] <jnthn> Now I just have callbacks left, then... :)

[21:40] <nwc10> beer and curry?

[21:41] <jnthn> Well, already full of steak from dinner ))

[21:41] <jnthn> But beer...now there's a good idea.

[21:41] <nwc10> I think you deserve it

[21:42] *** clkao_ joined
[21:43] * jnthn picks out an imperial IPA

[21:44] <jnthn> http://www.ratebeer.com/beer/omnipollo-nebuchadnezzar/184949/ :)

[21:44] <nwc10> works on "my" machine with ASAN

[21:44] <nwc10> (that's all the way to zavolaj)

[21:44] <jnthn> yay

[21:47] *** clkao left
[21:54] *** flussence left
[21:54] *** flussence joined
[21:55] *** yoleaux left
[21:55] *** yoleaux joined
[21:55] *** ChanServ sets mode: +v yoleaux

[21:56] *** telex left
[21:58] *** telex joined
[22:02] *** pippo left
[22:15] *** fridim__ joined
[22:17] *** colomon left
[22:18] *** colomon joined
[22:18] *** tgt left
[22:18] *** Vlavv left
[22:19] *** Vlavv joined
[22:20] *** aindilis left
[22:20] *** aindilis joined
[22:23] *** Bucciarati left
[22:23] *** jnap joined
[22:24] <arnsholt> jnthn: From memory, it's keyed on the function. It's caching the stuff needed to pass a given function as a callback

[22:24] *** jnap2 left
[22:24] <jnthn> arnsholt: Yeah, figured enough...I think. Working on porting it.

[22:25] <arnsholt> jnthn: FWIW, my plan for killing CStr and friends requires a way of signalling to NativeCall whether the memory associated with a thing should be freed on GC or not

[22:26] <arnsholt> Then we can just unmarshal strings to a CArray[int8] corresponding to an encoding (via Buf, is my thinking) and signal freeing semantics on the array

[22:26] <timotimo> the Yen character no longer means Z since when?

[22:28] <nwc10> r: printf "%x\n", 911352958828937218

[22:28] <camelia> rakudo-parrot a2db06, rakudo-jvm a2db06: OUTPUT¬´ca5c6b000000002‚ê§¬ª

[22:28] <camelia> ..rakudo-moar a2db06: OUTPUT¬´ca5c6b000000000‚ê§¬ª

[22:28] <nwc10> one of these is not like the others

[22:29] *** Bucciarati joined
[22:29] <jnthn> nwc10: Dunno if that specific case is to blame, but we still have a few failing sprintf tests.

[22:30] <arnsholt> nwc10: Any idea if there's a place in Perl's config stuff where I can get the linker's flag to specify output file? (-o on Unix, but crucially not on Windows)

[22:30] <arnsholt> Doesn't appear to be in Config.pm

[22:31] <nwc10> I don't know. Ask leont

[22:31] <nwc10> but the answer might be "didn't exist in Config.pm, so got hard coded by platform"

[22:31] <nwc10> but I think that leont will know

[22:31] <nwc10> he's probably asleep in Lyon currently

[22:32] <arnsholt> Yeah, might be. Thanks

[22:32] <lue> timotimo: since putting it in Sc made more sense :)

[22:32] <arnsholt> Looks like ExtUtils::CBuild knows, but doesn't look like it's part of the public API

[22:33] <nwc10> I should go to bed

[22:33] <arnsholt> Me too =)

[22:33] <nwc10> in case the small alarm clock repeats her performance from this morning and is climbing on me before 7am

[22:35] <dalek> nqp: ce3915e | rurban++ | tools/lib/NQP/Configure.pm:

[22:35] <dalek> nqp: [Configure] omit unneeded 5.10ism, needed for mingw (5.8.8 perl)

[22:35] <dalek> nqp: 

[22:35] <dalek> nqp: Fixes GH #165

[22:35] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ce3915e273

[22:35] <jnthn> nwc10: Sounds wise :)

[22:35] <jnthn> nwc10: Sleep well

[22:35] <nwc10> thanks. you too

[22:36] <jnthn> Eventually :)

[22:42] <rurban> parrot has such a config flag

[22:42] <arnsholt> Yeah, but it has it specified in its own config files, so it's not that easy to get to for the JVM backend

[22:42] <rurban> cc_o_out it is

[22:43] <rurban> and ld_out also

[22:43] <jnthn> Moar has one too, but if you're only buildin gthe JVM backend neither of those help much...

[22:43] <rurban> hmm, Configure could pass that around

[22:43] <arnsholt> Which is why I wanted to find it in Perl's stuff, for the JVM backend

[22:44] <jnthn> *nod*

[22:44] <jnthn> Well, to a first approximation MSVC is /Fo and everything else is -o :)

[22:44] <arnsholt> True, true

[22:44] <jnthn> .oO( I pity the /Fo... )

[22:45] <arnsholt> What's the value of $^O on Windows?

[22:45] <rurban> well, since perl uses -o everywhere just not in win32, it should be easy

[22:45] <rurban> mswin32

[22:46] <rurban> MsWin32 exaclty

[22:46] <rurban> perldoc perlport

[22:46] <arnsholt> Cool. Then it should be easy to specialcase for Windows

[22:46] <rurban> Uuh, MSWin32

[22:47] <rurban> link has -out:, the rest /Fo afaik

[22:47] <Mouq> lizmat, FROGGS: Since META.info/META6.json is going to be hooked to the spec, does that mean it itself should be versionable?

[22:47] <rurban> see win32/Makefile

[22:48] *** rurban1 left
[22:48] <lue> Mouq: perhaps the perl6 version parameter takes care of it?

[22:51] <Mouq> lue: True enough, I just wanted to put it up for consideration

[22:54] *** mscha left
[23:02] *** [Sno] joined
[23:06] *** Psyche^_ joined
[23:07] *** kurahaupo left
[23:08] <Mouq> p6: my $x; say $x++, $x++

[23:08] <camelia> rakudo-parrot a2db06, rakudo-jvm a2db06, rakudo-moar a2db06, niecza v24-109-g48a8de3: OUTPUT¬´01‚ê§¬ª

[23:08] <Mouq> p6: my $x; say {$x++}(), {$x++}()

[23:09] <camelia> rakudo-parrot a2db06, rakudo-jvm a2db06, rakudo-moar a2db06, niecza v24-109-g48a8de3: OUTPUT¬´01‚ê§¬ª

[23:10] *** Psyche^ left
[23:14] *** daniel-s_ left
[23:14] *** daniel-s_ joined
[23:18] *** skids joined
[23:19] *** jnap left
[23:20] *** rurban1 joined
[23:38] *** daniel-s__ joined
[23:38] *** klapperl_ joined
[23:39] *** xragnar_ joined
[23:39] *** xragnar left
[23:39] *** xragnar_ is now known as xragnar

[23:39] *** erdic_ joined
[23:41] *** xinming__ joined
[23:41] *** guru joined
[23:42] *** guru is now known as Guest48370

[23:43] *** Shozan joined
[23:43] *** daniel-s__ left
[23:44] *** daniel-s__ joined
[23:44] *** daniel-s_ left
[23:44] *** erdic left
[23:44] *** ajr_ left
[23:44] *** Khisanth left
[23:44] *** arnsholt left
[23:44] *** takesako___ left
[23:44] *** xinming_ left
[23:44] *** Woodi left
[23:44] *** SHODAN left
[23:44] *** klapperl left
[23:44] *** rurban left
[23:44] *** sbauer left
[23:44] *** dylanwh left
[23:44] *** atrodo left
[23:44] *** tokuhirom left
[23:44] *** rurban1 left
[23:44] *** Psyche^_ left
[23:44] *** Bucciarati left
[23:44] *** Vlavv left
[23:44] *** yoleaux left
[23:44] *** mtj_ left
[23:44] *** tadzik left
[23:44] *** sbauer_ joined
[23:45] *** erdic_ left
[23:45] *** erdic_ joined
[23:45] *** hoverboard left
[23:45] <dalek> zavolaj: 20e50da | jnthn++ | t/08-callbacks.c:

[23:45] <dalek> zavolaj: Another Win32 hack/workaround.

[23:45] <dalek> zavolaj: 

[23:45] <dalek> zavolaj: Will solve these properly shortly.

[23:45] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/20e50dabae

[23:46] *** pecastro left
[23:47] *** d4l3k_ joined
[23:48] *** pecastro joined
[23:49] *** sftp_ joined
[23:49] *** Ben_Goldberg joined
[23:49] *** Ulti_ joined
[23:50] *** bowtie_ joined
[23:50] *** Psyche^ joined
[23:51] *** erdic joined
[23:51] *** Util_ joined
[23:52] *** dwarring joined
[23:52] *** Khisanth joined
[23:53] *** retupmoc1 joined
[23:53] *** thilp_ joined
[23:53] *** rurban joined
[23:53] *** FROGGS joined
[23:54] *** ribasushi_ joined
[23:55] *** cooper_ joined
[23:55] *** Woodi joined
[23:55] *** mtj_ joined
[23:55] *** sbauer_ left
[23:55] *** xinming__ left
[23:55] *** erdic_ left
[23:55] *** skids left
[23:55] *** colomon left
[23:55] *** fridim__ left
[23:55] *** BenGoldberg left
[23:55] *** ilbot3 left
[23:55] *** felher left
[23:55] *** awwaiid left
[23:55] *** ggoebel11114 left
[23:55] *** Ulti left
[23:56] *** vendethiel left
[23:56] *** retupmoca left
[23:56] *** sftp left
[23:56] *** cooper left
[23:56] *** thilp left
[23:56] *** ribasushi left
[23:56] *** Util left
[23:56] *** dalek left
[23:56] *** Ayiko left
[23:56] *** bowtie left
[23:56] *** cooper_ is now known as cooper

[23:56] *** ribasushi_ is now known as ribasushi

[23:56] *** cooper left
[23:56] *** cooper joined
[23:56] *** d4l3k_ is now known as dalek

[23:56] *** Mouq left
[23:56] *** thilp_ left
[23:56] <dwarring> r: https://gist.github.com/dwarring/9559508

[23:56] <camelia> rakudo-parrot a2db06, rakudo-jvm a2db06, rakudo-moar a2db06: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile‚ê§Undeclared routine:‚ê§    is used at line 12‚ê§‚ê§¬ª

[23:57] *** Guest48370 left
[23:59] *** FROGGS left
[23:59] <TimToady> needs a 'use Test;' presumably

