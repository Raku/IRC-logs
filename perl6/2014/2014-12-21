[00:36] *** ab5tract left
[00:42] *** ninjazach left
[00:53] *** Mso150_d joined
[00:53] *** Mso150 left
[00:54] *** atroxaper joined
[01:01] *** atroxaper left
[01:03] *** Mso150_d left
[01:04] *** Mso150 joined
[01:41] <TimToady> m: subset Foo of (Str|Int);

[01:41] <camelia> rakudo-moar fb9127: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/bivxMS7qfi␤Invalid typename␤at /tmp/bivxMS7qfi:1␤------> [32msubset Foo of [33m⏏[31m(Str|Int);[0m␤    expecting any of:␤        statement list␤        prefix or term␤        pref…»

[01:41] *** bjz_ joined
[01:41] <TimToady> better, but the 'expecting' is still kinda bogus

[01:41] *** [Sno] joined
[01:52] *** ninjazach joined
[02:09] <raydiak> tremendously more informative than 'missing semicolon'.  TimToady++

[02:10] <vendethiel> TimToady++!

[02:17] *** rmgk_ joined
[02:17] *** rmgk_ is now known as rmgk

[02:18] *** telex joined
[02:46] *** atroxaper joined
[02:53] *** atroxaper left
[03:08] *** ninjazach left
[03:12] *** ninjazach joined
[03:17] *** jack_rabbit joined
[03:27] *** ninjazach left
[03:51] *** atroxaper joined
[03:56] *** noganex joined
[03:59] *** atroxaper left
[04:11] *** Sqirrel left
[04:22] *** atroxaper joined
[05:29] *** atroxaper left
[05:32] *** araujo left
[05:34] <raydiak> .tell moritz when I look at this non-validating Frankenstein of HTML 4 Transitional, XHTML 1 Strict, multiple p5 modules spitting out html from multiple layers and using shell commands to copy files, I just have to ask...is there any future in sight for pod6ify? :)

[05:34] <yoleaux> raydiak: I'll pass your message to moritz.

[05:35] *** atroxaper joined
[05:40] *** atroxaper left
[05:55] *** nige joined
[05:56] <raydiak> .tell lue weren't you working on pod6ify a while ago?  how is that/where did it leave off?  I'm giving design.perl6.org a makeover in the nearish future like I did for docs, so I'm wondering if we were close enough to consider finishing it before/with the redesign

[05:56] <yoleaux> raydiak: I'll pass your message to lue.

[06:06] *** erkan left
[06:08] *** erkan joined
[06:18] *** davido___ joined
[06:18] *** dj_goku joined
[06:33] *** Mso150 left
[06:36] *** Mso150 joined
[06:39] *** atroxaper joined
[06:44] *** atroxaper left
[07:01] <moritz> raydiak: only the future we create for it

[07:01] <yoleaux> 05:34Z <raydiak> moritz: when I look at this non-validating Frankenstein of HTML 4 Transitional, XHTML 1 Strict, multiple p5 modules spitting out html from multiple layers and using shell commands to copy files, I just have to ask...is there any future in sight for pod6ify? :)

[07:09] *** erkan left
[07:12] *** erkan joined
[07:12] *** erkan left
[07:12] *** erkan joined
[07:13] <dalek> rakudo/nom: 7136001 | TimToady++ | src/Perl6/Grammar.nqp:

[07:13] <dalek> rakudo/nom: highexpect should not survive whitespace at least

[07:13] <dalek> rakudo/nom: 

[07:13] <dalek> rakudo/nom: Highwater expectations should be reset as soon as we've committed to a match at

[07:13] <dalek> rakudo/nom: a particular position.  In lieu of proper commit semantics, we'll at least reset

[07:13] <dalek> rakudo/nom: on whitespace for now.

[07:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7136001260

[07:30] *** molaf joined
[07:36] *** bartolin joined
[07:45] *** kaare_ joined
[08:02] <raydiak> moritz: guess I was wondering if you knew specifically what kind of state it was in or if anyone had a fork somewhere they were actively working on more recently than April or anything like that

[08:03] *** FROGGS[mobile] joined
[08:04] <raydiak> moritz: also wondering if your offer of assistance extends to helping me work on that if it's close to being a reality, or if you think I should just not worry about all this right now and work around what we already have in place regardless of cruftyness

[08:05] <moritz> raydiak: I'm mildly interested in improving the generation of the pages, and will help you with that

[08:06] <moritz> raydiak: if you have some specific pain points, I can look into them

[08:08] *** gtodd joined
[08:11] *** darutoko joined
[08:11] <raydiak> sounds good, I'll at least look at where the pod6 stuff was at, and figure out if it makes sense to pursue that right now for a job that would otherwise only take me a couple days or so

[08:12] <raydiak> (under optimal conditions, that is)

[08:14] <raydiak> thought about seeing if there was much general interest in it, but I suspect doing that would be less fruitful until after the holidays

[08:27] <moritz> raydiak: iirc lue has/had a branch that converted some synopses to pod6

[08:29] <raydiak> moritz: yeah I remembered and found some of the things he was working on...he had started all the relevant parts, I just haven't tried them to see how much they work yet

[08:29] <lue> The pod6ify branch is so old that, if I get to it soon enough, I'd be re-converting the current POD synopses to Pod6 (and by the way, it'd be nice if the synopses didn't have a computer-generated feel to them in the end)

[08:29] <yoleaux> 05:56Z <raydiak> lue: weren't you working on pod6ify a while ago?  how is that/where did it leave off?  I'm giving design.perl6.org a makeover in the nearish future like I did for docs, so I'm wondering if we were close enough to consider finishing it before/with the redesign

[08:30] <raydiak> lue: but that was a mostly-automated job already, wasn't it?

[08:31] <lue> Nope, whenever I updated I merged in the changes from master, resolving conflicts as they came, and then tidied up any Pod6 errors that resulted.

[08:32] <moritz> lue: what about the tooling to generate HTML?

[08:33] <raydiak> ah, I see, thought you had a conversion script done that handled most of it

[08:33] * lue wonders how many deprecation warnings she'd get out of pod_vvi if she tried running it now :P .

[08:33] <lue> Oh hey, guess I should push some commits I made a little while back.

[08:35] <lue> mortiz: https://github.com/lue/synopsis-generator  <-- the Pod6-to-HTML converter

[08:35] <moritz> lue: how well does it work? is it robust?

[08:36] <lue> I don't remember what the times were when I last seriously worked on it (back around April, IIRC!), but a recent run put it at (536.98240537 seconds) for my machine.

[08:36] <lue> I *think* that last time, it was ≈1500s or so.

[08:37] <moritz> not awesome, but workable from a cron job

[08:37] <raydiak> lue: looked like most of your work on pod stuff besides Walker stopped in april...things are sure to be substantially faster w/all the optimization work in the past 8 months, no?

[08:37] <lue> moritz: it works fine, though considering its eventual intended use I'd feel much better if someone made sure there wasn't anything dumb in the code.

[08:38] <raydiak> oh, I'm behind :)

[08:38] <lue> raydiak: yes, I was very pleased to dust off syngen after months and see a much lower runtime :)

[08:40] <lue> The one thing I wouldn't be surprised to see go away in a more polished version of syngen would be the colored output; I don't know what others' opinions are on that.

[08:40] <raydiak> oh and now we have a monster server of awesome...

[08:42] <moritz> raydiak: in fact I was just installing a shared(ish) rakudo on the new server, in the hopes of using it in several website generation scripts

[08:42] <moritz> raydiak: ... and came across the error described in https://github.com/tadzik/rakudobrew/issues/21

[08:43] <lue> My computer's not the best, fwiw. For reference, when I last compiled rakudo, I got 148.970 and 430.632 for stage parse (I'm pretty sure the larger number is JVM). On a better computer that 537s might drop a bit.

[08:44] <moritz> lue: http://perlgeek.de/blog-en/perl-6/2014-community-server-live.html you can get an account if you want to work on something beefy(ish)

[08:45] <raydiak> oh hrm

[08:47] <lue> I should probably get an account there some time, it'd be nice to see how something like syngen operates where one would expect it to run all the time :) .

[08:47] *** sqirrel joined
[08:54] *** erkan left
[08:56] *** erkan joined
[08:56] *** erkan left
[08:56] *** erkan joined
[08:56] *** nige left
[08:58] <raydiak> moritz: did you try rm -rf ~/.rakudobrew/moar-2014.12?

[08:59] <moritz> raydiak: I know how to recover from that error, but I want it fixed nonetheless

[09:00] <raydiak> moritz: oh I see...don't think I've run in to that one before

[09:02] <raydiak> moritz: you're working on the www server? any big exciting take-over-the-world-with-another-cms plans or anything? :)

[09:04] <timotimo> o/

[09:05] <raydiak> \o timo

[09:06] <JimmyZ> \o timotimo 

[09:06] <moritz> FROGGS_: any reason the advent post isn't published yet?

[09:06] <JimmyZ> timotimo: I profiled add2, and found OSRS isn't happened ..

[09:06] <JimmyZ> *OSR

[09:07] <moritz> seems it was scheduled, but didn't actually went live

[09:07] <moritz> published now

[09:08] <moritz> raydiak: no take-over-the-world plans except with Perl 6 in general :-)

[09:08] * raydiak looks at a clock and goes to bed

[09:08] <moritz> good night, sleep of dreaming

[09:08] <moritz> or

[09:08] <timotimo> JimmyZ: that's strange. any clue what could have happened?

[09:08] <moritz> you know, whatever :-)

[09:08] <JimmyZ> timotimo: no yet

[09:08] <raydiak> thanks I'll try :)

[09:10] *** molaf_ joined
[09:12] *** haroldwu joined
[09:12] *** atroxaper joined
[09:13] *** molaf left
[09:16] <timotimo> mhm

[09:18] *** atroxaper left
[09:21] <FROGGS_> moritz: but I've scheduled it! O.o

[09:22] <FROGGS_> weird

[09:22] <moritz> FROGGS_: I've seen it scheduled, yes

[09:23] <FROGGS_> next time I just publish it manually :o)

[09:24] *** FROGGS[mobile] left
[09:25] <moritz> https://github.com/tadzik/rakudobrew/pull/22

[09:25] *** FROGGS[mobile] joined
[09:28] *** rurban joined
[09:31] *** sqirrel left
[09:32] *** spider-mario joined
[09:32] *** adu joined
[09:32] *** haroldwu left
[09:33] *** haroldwu joined
[09:47] *** adu left
[09:49] *** Mso150 left
[09:49] *** erkan left
[09:50] *** Mso150 joined
[09:52] *** erkan joined
[10:07] <bartolin> g'day, #perl6

[10:08] <timotimo> hello bartolin 

[10:09] <bartolin> I created this PR recently: https://github.com/rakudo/rakudo/pull/339. it would be great if someone finds some time to take a look at it

[10:10] <moritz> bartolin: what does that <![i]> do?

[10:10] * bartolin goes reading todays advent post . ## FROGGS++

[10:11] <moritz> bartolin: sounds like it wants <!postfix> instead

[10:11] <moritz> or <!postfixish>, or whatever the rule is called

[10:11] <moritz> special-casing postfix:<i> feels fragile

[10:12] *** erkan left
[10:13] <bartolin> moritz: yes, I had that feeling, too. but in S32/Numeric it's explicitely mentioned that there is no .i method

[10:14] *** erkan joined
[10:15] <bartolin> moritz: I wonder where could <!postfix> or <!postfixish> go in this context to get the desired result

[10:16] <moritz> bartolin: in the place where <![i]> currently is

[10:16] <bartolin> moritz: ah, you meant <!postfix> instead of <![i]>.

[10:16] <bartolin> moritz: but my goal is to match postfix operaters after dot.

[10:17] <bartolin> (just not postfix:<i> since there is no .i method)

[10:17] <moritz> bartolin: that seems like an odd goal

[10:17] <moritz> bartolin: either all postfixes allow an optional dot, or none

[10:17] <moritz> bartolin: I mean, if there's no .i method, it could still call the i postfix

[10:18] <moritz> bartolin: or maybe the whole idea of using ».++ is wrong, and it should just be »++ (with a good error message for the former)

[10:19] *** ptc_p6 joined
[10:22] <bartolin> moritz: first I tried without special case for .i but I got a spectest failure somewhere, since in one test file method i was called via $obj.i().

[10:22] <bartolin> but to discard the whole idea of ».++ would have larger implications, I guess

[10:26] <bartolin> ahh it was in S12-class/inheritance-class-methods.t (and unrelated to postfix:<i>)

[10:26] <moritz> bartolin: maybe the compromise would be to only allow non-word-y postfixes

[10:26] <moritz> bartolin: which automatically rules out any methods

[10:27] <bartolin> m: my class D { method i { 42 } }; say D.i();

[10:27] <camelia> rakudo-moar 713600: OUTPUT«42␤»

[10:28] <bartolin> moritz: that sounds good (though I don't know yet, how to achieve it)

[10:28] <bartolin> ^^ that test blowed up without the special case for postfix:<i>

[10:29] <timotimo> moritz: how come you have a git in /etc, but are not using etckeeper?

[10:29] <moritz> bartolin: <!before \w> instead of <![i]>

[10:29] *** ptc_p6 left
[10:30] <moritz> timotimo: I don't to track all the files, and I don't want automatic commits

[10:30] <timotimo> OK

[10:30] <moritz> timotimo: though do you think I should?

[10:30] <bartolin> moritz: ahh, just like that, great.

[10:30] <moritz> bartolin: or even just <!alpha>

[10:31] *** atroxaper joined
[10:32] <bartolin> moritz: thanks a lot! I'll test with those and eventually update the PR

[10:33] <moritz> bartolin: also you could look at how STD.pm6 does it (if at all)

[10:33] <moritz> timotimo: maybe I'll try etckeeper on hack.p6c.org, and compare experiences

[10:34] <timotimo> OK :)

[10:34] <moritz> timotimo: one motivation was also to be able to push the repo somewhere else (github), but I don't want /etc/shadow in there

[10:34] <timotimo> ah, that's definitely a point

[10:35] <bartolin> moritz: I looked at the output of 'viv -e' but actually didn't look in STD.pm6. will do that ...

[10:38] *** mvuets joined
[10:44] *** Mso150 left
[10:52] *** rindolf joined
[10:54] *** erkan left
[10:57] *** erkan joined
[10:57] *** erkan left
[10:57] *** erkan joined
[11:01] *** \Grrr joined
[11:10] *** \Grrr left
[11:10] <masak> afty, #perl6

[11:33] *** Mso150 joined
[11:49] *** bjz_ left
[11:50] *** bjz joined
[11:51] *** psch joined
[11:52] <psch> hey #perl6 o/

[11:52] *** hekmek joined
[11:53] <masak> \o

[11:53] <psch> <!alpha> for methods after unary hyper would break quoted methods, wouldn't it?

[11:53] <psch> o/ masak

[11:55] * psch tries to actually wake up first

[11:56] <psch> std: @a>>."!weird_methodß"()

[11:56] <camelia> std 76ccee1: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable @a is not predeclared at /tmp/v4lkHhEqxC line 1:␤------> [32m<BOL>[33m⏏[31m@a>>."!weird_methodß"()[0m␤Check failed␤FAILED 00:00 137m␤»

[11:56] <psch> std: my @a; @a>>."!weird_methodß"()

[11:56] <camelia> std 76ccee1: OUTPUT«ok 00:00 137m␤»

[11:57] <masak> m: sub foo(@L) { say +@L }; foo «A B C D E F G»; say "alive"

[11:57] <camelia> rakudo-moar 713600: OUTPUT«7␤alive␤»

[11:57] <masak> hm.

[11:58] * masak upgrades his Rakudo

[11:58] <psch> m: my @a = 1..3; say @a>>."atan"()

[11:58] <camelia> rakudo-moar 713600: OUTPUT«0.785398163397448 1.10714871779409 1.24904577239825␤»

[11:59] <psch> well, that works, it's probably a different case

[11:59] <masak> pro tip: do not write `perl6 Configure.pl` -- it does not work. :P

[12:00] *** erkan left
[12:00] <psch> of course it doesn't, we need "use v5;", not "use 5.008;" :)

[12:02] *** erkan joined
[12:07] *** isBEKaml joined
[12:08] <bartolin> psch: yes, the above is a different case. the code in question explicitly matches a postfix operator -- so >>."!weird_methodß"() shouldn't match at all

[12:08] <bartolin> psch: the only problem is >>.i -- since there is a postfix:<i> _and_ there could be a method i

[12:09] <bartolin> (at least that's how I understand the problem)

[12:09] * bartolin is speaking about https://github.com/usev6/rakudo/commit/27a9887f63

[12:11] <psch> std: my @a; @a>>.i

[12:11] <camelia> std 76ccee1: OUTPUT«ok 00:00 137m␤»

[12:11] <psch> std: my @a; @a>>.i()

[12:11] <camelia> std 76ccee1: OUTPUT«ok 00:00 137m␤»

[12:11] <psch> bartolin: not sure if std does the actual right thing, but seeing as you looked at viv you probably know more there already :)

[12:13] <psch> it does seem kind of weird to call operators (which are subs) as methods after hyper-ing, but i might be missing some insight that makes it sound obviously justified

[12:13] <psch> m: sub foo($) { say "foo'd" }; my @a = 1..3; @a>>.foo

[12:13] <camelia> rakudo-moar 713600: OUTPUT«No such method 'foo' for invocant of type 'Int'␤  in method dispatch:<hyper> at src/gen/m-CORE.setting:1352␤  in block <unit> at /tmp/flDp9MoGLz:1␤␤»

[12:14] <psch> m: sub postfix:<foo>($) { say "foo'd" }; my @a = 1..3; @a>>.foo

[12:14] <camelia> rakudo-moar 713600: OUTPUT«No such method 'foo' for invocant of type 'Int'␤  in method dispatch:<hyper> at src/gen/m-CORE.setting:1352␤  in block <unit> at /tmp/C4enGeQwD6:1␤␤»

[12:14] * psch shrugs

[12:15] <psch> that's actually what i expect i think

[12:15] <bartolin> sorry, have to look after kids; bbl

[12:15] <psch> m: sub postfix:<foo>($) { say "foo'd" }; my @a = 1..3; @a>>foo # and this works

[12:15] <camelia> rakudo-moar 713600: OUTPUT«foo'd␤foo'd␤foo'd␤»

[12:16] *** denis_boyun_ joined
[12:17] *** sqirrel joined
[12:18] *** Mso150 left
[12:19] *** mr-foobar joined
[12:21] *** Mso150 joined
[12:33] *** denis_boyun_ left
[12:35] *** FROGGS[mobile] left
[12:36] *** FROGGS[mobile] joined
[12:37] *** Mso150 left
[12:38] *** erkan left
[12:39] <lizmat> m: my $a; sub a { $a = $^b }; a 42   # works

[12:39] <camelia> rakudo-moar 713600: ( no output )

[12:39] <lizmat> m: my $a; sub a { $a = $^a }; a 42   # does not work

[12:39] <camelia> rakudo-moar 713600: OUTPUT«Cannot assign to an immutable value␤  in block <unit> at /tmp/DCMAx3q212:1␤␤»

[12:40] <lizmat> I guess $a and $^a take the same lexpad spot

[12:40] <lizmat> and the $^a this masks the outer $a

[12:40] <lizmat> *thus

[12:40] <lizmat> still, an LTA error

[12:41] *** erkan joined
[12:41] *** erkan left
[12:41] *** erkan joined
[12:41] <lizmat> rakudobuggable?  or DIHWIDT ?

[12:41] <FROGGS_> std: my $a; sub a { $a = $^a }; a 42

[12:41] <camelia> std 76ccee1: OUTPUT«[31m===[0mSORRY![31m===[0m␤$a has already been used as a non-placeholder in the surrounding sub block,␤  so you will confuse the reader if you suddenly declare $^a here at /tmp/yAB7rEr43U line 1:␤------> [32mmy $a; sub a { $a = [33m⏏[31m$^a }; a 42…»

[12:42] <FROGGS_> I was about to say something like that :o)

[12:43] <vendethiel> std++

[12:44] <FROGGS_> ohh yeah, TimToady++

[12:44] <FROGGS_> std is a very awesome piece of work, every layer of it

[12:44] <psch> "you will confuse the reader" - that's pretty great

[12:45] <psch> "i as a computer don't have any problem with this, but you poor humans will scratch your head, so don't do that" :D

[12:45] <isBEKaml> yeah, that reads like "DIHWIDT"

[12:51] *** isBEKaml left
[12:51] <psch> TimToady++ for cute SORRIES

[12:51] <lizmat> ok, so rakudobuggable since not std compliant 

[12:57] *** jack_rabbit left
[12:59] <FROGGS_> lizmat: feel free to buggle it... I am attempting to fix it right now

[13:00] <dalek> roast: e7857a4 | lizmat++ | integration/advent2014-day13.t:

[13:00] <dalek> roast: Add tests for advent day #13

[13:00] <dalek> roast: review: https://github.com/perl6/roast/commit/e7857a4bae

[13:02] <lizmat> buggled as #123470

[13:02] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123470

[13:03] *** sqirrel left
[13:18] <dalek> roast: 89a9309 | lizmat++ | integration/advent2014-day16.t:

[13:18] <dalek> roast: Add tests for advent day #16

[13:18] <dalek> roast: review: https://github.com/perl6/roast/commit/89a9309771

[13:23] <dalek> rakudo/nom: 08c2b0f | lizmat++ | t/spectest.data:

[13:23] <dalek> rakudo/nom: Add tests for advent days #13/#16

[13:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/08c2b0f9c7

[13:24] *** denis_boyun_ joined
[13:29] *** Isp-sec joined
[13:32] *** prime joined
[13:32] <lizmat> there's still a slot open for tomorrow's advent

[13:32] <lizmat> brb

[13:47] *** zakharyas joined
[13:54] <lizmat> errands&

[13:57] *** jack_rabbit joined
[14:04] *** zakharyas left
[14:06] *** rindolf left
[14:06] <masak> m: say [1, 2, 3].grep-index(3)

[14:06] <camelia> rakudo-moar 713600: OUTPUT«2␤»

[14:06] <masak> m: say [1, 2, 3].index(3)

[14:06] <camelia> rakudo-moar 713600: OUTPUT«4␤»

[14:06] <masak> took me a while to understand what .index(3) does there :)

[14:07] <masak> loose typing, a blessing and a curse :)

[14:08] <psch> m: "123".index(3).say

[14:08] <camelia> rakudo-moar 713600: OUTPUT«2␤»

[14:08] <psch> m: say [1,2,3].Str

[14:08] <camelia> rakudo-moar 713600: OUTPUT«1 2 3␤»

[14:08] <psch> right

[14:16] *** jack_rabbit left
[14:22] <masak> m: my @a = <A B C>; say @a.grep-index("A") >= @a.grep-index("C")

[14:22] <camelia> rakudo-moar 713600: OUTPUT«True␤»

[14:22] <masak> this threw me for a while.

[14:22] * masak submits rakudobug

[14:22] <masak> m: my @a = <A B C>; say @a.grep-index("A").^name

[14:22] <camelia> rakudo-moar 713600: OUTPUT«List␤»

[14:22] <masak> m: my @a = <A B C>; say @a.grep-index("A")[0] >= @a.grep-index("C")[0]

[14:22] <camelia> rakudo-moar 713600: OUTPUT«False␤»

[14:23] <masak> hm, maybe what I was after was .first-index...

[14:23] <masak> yeah, this appears to be to spec.

[14:25] *** atroxaper left
[14:25] <masak> unless a case can be made for single results from .grep-index to be returned as themselves, not as a list of 1.

[14:25] <masak> but I'm not such such a case can be made.

[14:26] *** BenGoldberg joined
[14:31] *** erkan left
[14:33] *** erkan joined
[14:33] *** erkan left
[14:33] *** erkan joined
[14:33] *** Lasse joined
[14:36] *** denis_boyun_ left
[14:42] *** hekmek left
[14:44] *** Lasse left
[14:44] *** bjz_ joined
[14:44] *** bjz left
[14:47] <moritz> it seems that some SSH password brute-forcing scripts detect fail2ban, and lower their attempt rate accordingly

[14:50] <tadzik> heh, business must be slow for botnets if they bother to brute force ssh passwords

[14:52] <moritz> tadzik: especially if they try it with a pasword every 2 minutes

[14:58] <mathw> there may well be enough weak passwords out there that it's worthwhile

[14:59] *** raiph joined
[15:02] <masak> success rate doesn't have to be that high for it to be worthwhile.

[15:03] <El_Che> moritz: spammers also take xmas holidays :)

[15:08] *** rurban left
[15:10] <tadzik> moritz: yeah, I can't imagine how long would that take

[15:11] <tadzik> unless they count on some early successes like "toor" or "admin1"

[15:21] *** erkan left
[15:22] *** Akagi201 joined
[15:23] *** erkan joined
[15:25] *** atroxaper joined
[15:25] <timotimo> moritz: they probably have a sufficient amount of potential targets so that they'll just have to shuffle targets more agressively between attempts

[15:26] <timotimo> i think they'll still keep the outgoing attempts "per second" at the same level

[15:26] <tadzik> true

[15:26] <timotimo> or maybe trying a second and third password over the same ssh connection is cheaper because it doesn't need to build a new tcp connection?

[15:27] *** salv0 joined
[15:31] <FROGGS_> perl6-m -e 'my $a; sub a { $a = $^a }; say a 42'

[15:31] <FROGGS_> ===SORRY!=== Error while compiling -e

[15:31] <FROGGS_> $a has already been used as a non-placeholder in the surrounding block,

[15:31] <FROGGS_>   so you will confuse the reader if you suddenly declare $^a here

[15:31] <FROGGS_> at -e:1

[15:31] <FROGGS_> ------> my $a; sub a { $a = $^a }⏏; say a 42

[15:32] <FROGGS_> \o/

[15:32] <FROGGS_> now spectest run and then I finally have something to commit again

[15:33] *** atroxaper left
[15:34] <timotimo> <3

[15:34] <timotimo> feels good, doesn't it?

[15:34] <FROGGS_> it does :D

[15:36] <FROGGS_> I mean, I did a lot in the evenings programming wise, just not for perl6 :/

[15:44] *** atroxaper joined
[15:46] *** nige joined
[15:47] *** rurban joined
[15:59] *** pecastro joined
[15:59] *** telex left
[16:00] *** telex joined
[16:01] *** FROGGS[mobile] left
[16:01] *** virtualsue joined
[16:01] *** FROGGS[mobile] joined
[16:11] *** erkan left
[16:14] *** erkan joined
[16:15] *** rurban1 joined
[16:15] *** rurban1 left
[16:17] *** anaeem1_ joined
[16:18] *** rindolf joined
[16:20] *** dwarring left
[16:21] *** DarthGandalf joined
[16:24] *** psch left
[16:26] *** psch joined
[16:31] *** anaeem1_ left
[16:32] * moritz still waits for a commit from FROGGS_++

[16:33] *** jack_rabbit joined
[16:33] *** anaeem1_ joined
[16:38] <FROGGS_> :o)

[16:38] <FROGGS_> currently slightly distracted by $guests

[16:39] *** raiph left
[16:39] <moritz> no hurry then

[16:40] <dalek> rakudo/nom: 4569b17 | FROGGS++ | src/ (2 files):

[16:40] <dalek> rakudo/nom: throw ex for usage of $foo before $^foo in sub body (RT #123470)

[16:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4569b17b29

[16:40] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123470

[16:40] <FROGGS_> test will come later

[16:41] *** raiph joined
[16:44] *** carlin joined
[16:46] *** anaeem1_ left
[16:55] *** nige left
[17:00] *** kjs_ joined
[17:04] <dalek> doc: 41cd4a9 | moritz++ | lib/ (2 files):

[17:04] <dalek> doc: uniq is deprecated in favor of unique

[17:04] <dalek> doc: review: https://github.com/perl6/doc/commit/41cd4a9a24

[17:04] <dalek> doc: a71b7ec | moritz++ | sync:

[17:04] <dalek> doc: do not sync with feather2 anymore

[17:04] <dalek> doc: 

[17:04] <dalek> doc: feather is being phased out

[17:04] <dalek> doc: review: https://github.com/perl6/doc/commit/a71b7ec1d7

[17:07] <moritz> m: say unique <a b a>

[17:07] <camelia> rakudo-moar 08c2b0: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/6bRtTUjpb8␤Undeclared routine:␤    unique used at line 1. Did you mean 'uniq'?␤␤»

[17:08] <moritz> it's a bit LTA that the method form of 'uniq' is deprecated, but in the sub form, 'unique' doesn't exist :(

[17:08] <psch> m: say uniq <a b a>

[17:08] <camelia> rakudo-moar 08c2b0: OUTPUT«a b␤Saw 1 call to deprecated code during execution.␤================================================================================␤Method uniq (from List) called at:␤  src/gen/m-CORE.setting, line 2149␤Deprecated since v2014.11, will be removed…»

[17:09] <dalek> doc: ac21f7f | moritz++ | lib/Perl6/TypeGraph/Viz.pm:

[17:09] <dalek> doc: use uniq() again, because unique() does not exist

[17:09] <dalek> doc: review: https://github.com/perl6/doc/commit/ac21f7f76b

[17:10] *** pecastro left
[17:13] <bartolin> psch, moritz: sorry for disappearing earlier today. just wanted to note that I didn't succeed in making <!alpha> or <!before \w> work, but <?before \W> does what I want. I'll backlog and think a bit further about it.

[17:15] <moritz> bartolin: no problem, we all have "real life"/family/friends

[17:16] <moritz> bartolin: maybe <!before> and <?before> LTM differently

[17:17] <psch> S05:2880

[17:17] <synopsebot> Link: http://perlcabal.org/syn/S05.html#line_2880

[17:18] <psch> probably the paragraph before that as well

[17:18] <psch> positive lookahead matters for LTM, negative doesn't

[17:18] <psch> at least that's how i understand that

[17:19] <moritz> psch++

[17:19] <bartolin> psch++ (I have to read that a few times ;-)

[17:19] <moritz> psch: yes, that's my understanding from reading that as well

[17:19] *** vanila joined
[17:20] *** erkan left
[17:22] <dalek> rakudo/nom: d9ae1dd | moritz++ | src/core/Any.pm:

[17:22] <dalek> rakudo/nom: Introduce sub form of unique, deprecate sub uniq

[17:22] <dalek> rakudo/nom: 

[17:22] <dalek> rakudo/nom: Deprecated since 2014.12 because it currently shows a deprecation warning

[17:22] <dalek> rakudo/nom: from calling the deprecated mesage uniq.

[17:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d9ae1dd1c6

[17:23] *** erkan joined
[17:23] *** erkan left
[17:23] *** erkan joined
[17:24] *** nige joined
[17:25] <FROGGS_> m: my $a; sub a { $a = $^a }; say a 42

[17:25] <camelia> rakudo-moar 4569b1: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/1rbgv3HUwS␤$a has already been used as a non-placeholder in the surrounding block,␤  so you will confuse the reader if you suddenly declare $^a here␤at /tmp/1rbgv3HUwS:1␤------> [32mmy $a; …»

[17:26] <masak> nice error message.

[17:30] <moritz> m: my $a; my $block = { $a = 42; $^a * 2 }

[17:30] <camelia> rakudo-moar 4569b1: ( no output )

[17:30] <moritz> FROGGS_: seems not to work for blocks :(

[17:32] <dalek> roast: c4a1041 | moritz++ | S06-signature/positional-placeholders.t:

[17:32] <dalek> roast: Tests for RT #123470

[17:32] <dalek> roast: review: https://github.com/perl6/roast/commit/c4a1041831

[17:32] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123470

[17:34] <FROGGS_> hmmm

[17:35] <FROGGS_> std: my $a; my $block = { $a = 42; $^a * 2 }

[17:35] <camelia> std 76ccee1: OUTPUT«[31m===[0mSORRY![31m===[0m␤$a has already been used as a non-placeholder in the surrounding block,␤  so you will confuse the reader if you suddenly declare $^a here at /tmp/7uBFNtvzmS line 1:␤------> [32mmy $a; my $block = { $a = 42; [33m⏏[31m$^a *…»

[17:35] <FROGGS_> okay, at least I think I know what to fix

[17:36] <FROGGS_> (and where)

[17:46] <moritz> FROGGS_: and you have a test case in roast :-)

[17:47] <FROGGS_> yeah, which is a very nice thing to have :o)

[17:51] <moritz> fwiw there's now an hourly cron job that rebuilds the doc.perl6.org contents

[17:52] *** colomon joined
[17:56] <dalek> infrastructure-doc: 24592c0 | moritz++ | hosts/hack.p6c.org.pod:

[17:56] <dalek> infrastructure-doc: Document rakudobrew and doc.perl6.org cron job

[17:56] <dalek> infrastructure-doc: review: https://github.com/perl6/infrastructure-doc/commit/24592c0db9

[17:57] <dalek> infrastructure-doc: 97f69e4 | moritz++ | hosts/www.p6c.org.pod:

[17:57] <dalek> infrastructure-doc: Document the doc.perl6.org cron job

[17:57] <dalek> infrastructure-doc: review: https://github.com/perl6/infrastructure-doc/commit/97f69e435c

[18:03] *** atroxaper left
[18:03] <dalek> doc: 3588c9b | moritz++ | htmlify.p6:

[18:03] <dalek> doc: Mention license in footer

[18:03] <dalek> doc: review: https://github.com/perl6/doc/commit/3588c9bc97

[18:03] *** mj41 joined
[18:14] <dalek> rakudo/nom: 039652b | moritz++ | docs/ChangeLog:

[18:14] <dalek> rakudo/nom: update ChangeLog

[18:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/039652b84e

[18:16] <lizmat> moritz++ for catching a stray uniq()

[18:16] <dalek> rakudo/nom: 4d9771f | moritz++ | src/core/Promise.pm:

[18:16] <dalek> rakudo/nom: Give promise-related exceptions more information

[18:16] <dalek> rakudo/nom: 

[18:16] <dalek> rakudo/nom: some of that is not visible in the error message, but it might still be useful

[18:16] <dalek> rakudo/nom: for a deeper analysis

[18:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4d9771fcf0

[18:17] <dalek> roast: d859717 | moritz++ | S17-promise/basic.t:

[18:17] <dalek> roast: Test for specific types of Promise-related exceptions

[18:17] <dalek> roast: review: https://github.com/perl6/roast/commit/d859717804

[18:20] <lizmat> moritz: what is the reason for copying $!status in Promise.cause ?

[18:21] *** pmurias joined
[18:21] <pmurias> hi

[18:21] <moritz> lizmat: it might change between checking it and reporting the error, no?

[18:21] <lizmat> I mean the most common case the if would match, not needing a copy

[18:21] <pmurias> moritz: if I want to setup automatic nqp-js smoke testing how should I do that?

[18:22] <lizmat> moritz: ah...hmmm....

[18:22] <moritz> pmurias: apply for an account (see http://perlgeek.de/blog-en/perl-6/2014-community-server-live.html), write a small shell script, run it as a cron job

[18:23] <moritz> lizmat: but since method cause is for broken promises, I somehow suspect it's not likely to be a very hot path

[18:23] <lizmat> moritz: then we would need to do the same in e.g .result

[18:25] <moritz> lizmat: I hope $!result can only be set once

[18:25] <lizmat> but method result checks $!status several times

[18:25] <moritz> lizmat: oh, method result

[18:25] <lizmat> yup

[18:26] <moritz> lizmat: oh, but it checks for Planned first, and if it's Planned, wait until it's not Planned anymore

[18:26] <moritz> lizmat: and after that, $!result won't change

[18:26] <lizmat> but $!status might

[18:26] <moritz> lizmat: sorry, I meant $status

[18:26] <moritz> $!status

[18:27] <moritz> lizmat: the only $!status transition that Promise allows is from Planned to Kept or Broken

[18:27] <lizmat> m: my $p=Promise.new; $p.keep; $p.break; say $p.status

[18:27] <camelia> rakudo-moar d9ae1d: OUTPUT«Access denied to keep/break this Promise; already vowed␤  in method vow at src/gen/m-CORE.setting:20804␤  in method break at src/gen/m-CORE.setting:20832␤  in block <unit> at /tmp/gbgB1PeXw8:1␤␤»

[18:28] *** erkan left
[18:28] <moritz> m: Promise.allof(42)

[18:28] <camelia> rakudo-moar d9ae1d: OUTPUT«No such method 'then' for invocant of type 'Int'␤  in method until_n_kept at src/gen/m-CORE.setting:20941␤  in method allof at src/gen/m-CORE.setting:20932␤  in block <unit> at /tmp/cZ_ft1s_JV:1␤␤»

[18:28] <lizmat> hmmm....

[18:29] <moritz> Promise tries to type-check its arguments, but doesn't success

[18:29] <moritz>     method allof(Promise:U: *@promises) {

[18:29] <moritz>         X::Promise::Combinator.new(combinator => 'allof').throw

[18:29] <moritz>             unless @promises >>~~>> Promise;

[18:29] <lizmat> indeed

[18:29] * moritz found it by trying to write tests for it

[18:29] <lizmat> same for anyof, btw

[18:30] <moritz> yes

[18:30] *** erkan joined
[18:31] <dalek> roast: c2bc1a2 | moritz++ | S17-promise/a (2 files):

[18:31] <dalek> roast: TODO tests for Promise.anyof/allof type checking

[18:31] <dalek> roast: review: https://github.com/perl6/roast/commit/c2bc1a2632

[18:33] <lizmat> moritz: I also don't understand why that check doesn't live in !until_n_kept

[18:33] <moritz> lizmat: me neither

[18:33] <moritz> lizmat: but I'm working on tests and Channel exceptions now, so feel free to fix

[18:34] *** FROGGS[mobile] left
[18:34] <moritz> vendethiel: ping

[18:37] <lizmat> moritz: will do

[18:37] *** FROGGS[mobile] joined
[18:38] *** raiph left
[18:39] <vendethiel> moritz: pong

[18:39] <moritz> vendethiel: are you writing the advent post for tomorrow?

[18:39] <vendethiel> no

[18:39] <moritz> :(

[18:39] <vendethiel> got stuck with what I wanted to do

[18:40] <moritz> vendethiel: can I help?

[18:40] <vendethiel> moritz: oh, yes, even I can help, I just need the time to do it

[18:40] <vendethiel> which shouldn't be long - I'm just with the family atm

[18:41] <moritz> vendethiel: ok. Maybe next year :-)

[18:42] <vendethiel> moritz: or maybe you'll have a better idea. Basically what I got stuck on was - giving a better error message when a MAIN argument doesn't match, using MMD

[18:42] <vendethiel> so I tried adding "looser" MAIN MMD candidates. only problem is - they're displayed in the --help

[18:43] <moritz> vendethiel: for exceptions, we have a trait is hidden_from_backtrace

[18:44] <vendethiel> moritz: here's my gist/draft: https://gist.github.com/vendethiel/32057dc3750fc670937f

[18:44] <moritz> vendethiel: you could add a corresponding hidden_from_USAGE trait

[18:44] <vendethiel> yes, that's what I plan to do

[18:44] <vendethiel> but as I said... Needs a bit more time

[18:47] <moritz> vendethiel: would you make it if you a day more?

[18:48] <vendethiel> probably not :) with everybody here, I probably won't be on the computer very much 

[18:48] <dalek> rakudo/nom: cc9f35a | moritz++ | src/core/Channel.pm:

[18:48] <dalek> rakudo/nom: Include reference to Channel object in Channel-related errors

[18:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cc9f35ab67

[18:49] <dalek> roast: a0bfc72 | moritz++ | S17-channel/basic.t:

[18:49] <dalek> roast: channels: test more error conditions, test exception types

[18:49] <dalek> roast: review: https://github.com/perl6/roast/commit/a0bfc728b5

[18:49] *** PZt joined
[18:52] <vendethiel> moritz: if you're fine with "currently specced but not yet implemented", it might work

[18:52] <moritz> vendethiel: if it's just the trait, I'll implement it for you

[18:52] *** mvuets left
[18:52] <vendethiel> moritz: well, yeah, there's only that

[18:53] <vendethiel> something along the lines of "is :$hidden_from_usage! can be applied to MAIN multis, to prevent gen-usage() from displaying them"

[18:53] <vendethiel> that's all there's to it

[18:54] *** FROGGS[mobile] left
[18:54] <pmurias> moritz: account request made

[18:55] *** FROGGS[mobile] joined
[18:55] <moritz> pmurias: I haven't gotten an email yet, but it might take 15min due to greylisting

[18:56] <dalek> rakudo/nom: 4fa65d4 | moritz++ | src/core/ (2 files):

[18:56] <dalek> rakudo/nom: implement trait "is hidden_from_USAGE"

[18:56] <dalek> rakudo/nom: 

[18:56] <dalek> rakudo/nom: MAIN candidates marked with this trait will not appear in the USAGE message

[18:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4fa65d4542

[18:56] <moritz> vendethiel: ^^ there you go

[18:56] <vendethiel> :D

[18:56] <vendethiel> moritz++ # much love

[18:57] <pmurias> moritz: I mistyped the email adress, sent again

[18:57] *** raiph joined
[19:00] <timotimo> the last time i wanted to implement a trait that's useful for MAIN i was told not to :(

[19:03] <lizmat> timotimo: things like that happen... 

[19:03] *** rindolf left
[19:03] *** mvuets joined
[19:03] *** atroxaper joined
[19:05] <moritz> timotimo: maybe we want a more generic "is ignored-by" trait

[19:05] *** mj41 left
[19:07] <vendethiel> moritz: or a more generic "is usage-options(:!display)"?

[19:08] *** atroxaper left
[19:12] *** Ben_Goldberg joined
[19:13] *** BenGoldberg left
[19:14] <timotimo> i'm not as sour about that fact as it may seem from what i wrote, btw

[19:14] <timotimo> especially since hoelzro is building a module that does what i'd've wanted MAIN to do

[19:14] <timotimo> (subcommander)

[19:16] <moritz> timotimo: I didn't interpret it as sour/annoyed, just as a warning that ir migth not be good design

[19:17] <moritz> *it

[19:17] <moritz> typing with one hand is frustrating

[19:19] <masak> I knew it! :)

[19:21] *** rurban left
[19:22] <lizmat> .oO( I thought gradual typing was something else? )

[19:24] <dalek> roast: 0ab7746 | moritz++ | S17-channel/basic.t:

[19:24] <dalek> roast: Type-based test for Channel.fail/receive exception throwing

[19:24] <dalek> roast: review: https://github.com/perl6/roast/commit/0ab77467c5

[19:24] <dalek> rakudo/nom: 70cf4f5 | lizmat++ | src/core/control.pm:

[19:24] <dalek> rakudo/nom: Add helper sub NOT_ALL_DEFINED_TYPE

[19:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/70cf4f5dd2

[19:24] <dalek> rakudo/nom: b902e0d | lizmat++ | src/core/Promise.pm:

[19:24] <dalek> rakudo/nom: Add proper type checks on anyof/allof

[19:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b902e0d2a2

[19:26] <dalek> rakudo/nom: c908f98 | moritz++ | src/core/traits.pm:

[19:26] <dalek> rakudo/nom: add new trait to highexpect list

[19:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c908f98ba4

[19:26] <vendethiel> what's <![i]> ?

[19:27] <moritz> vendethiel: a char class that's negated as a zero-width assertion

[19:27] <moritz> so "the next char isn't allowed to be i"

[19:27] <vendethiel> uh

[19:28] <vendethiel> right. but the "new version" doesn't seem to correspond - hence my "uh"

[19:29] *** virtualsue left
[19:29] <moritz> well, it's more generic in the new version

[19:31] <bartolin> we discussed that earlier today and moritz++ suggested to use this more generic approach as a compromise: http://irclog.perlgeek.de/perl6/2014-12-21#i_9836607

[19:33] <bartolin> actually, if I read S03#Method_postfix_precedence correctly, it should be possible to call _every_ postfix operator with a dotted form.

[19:33] <bartolin> but S32/Numeric says that there is no .i method for postfix:<i>

[19:34] <bartolin> so I first tried to special case postfix:<i>

[19:35] *** raiph left
[19:38] <moritz> bartolin: and I'm much happier know, but still want a third opinion (preferably by TimToady++)

[19:38] <bartolin> moritz: I'm very fine with that!

[19:38] <dalek> roast: 98aa348 | moritz++ | S17-promise/a (2 files):

[19:38] <dalek> roast: unfudge two now-passing tests, lizmat++

[19:38] <dalek> roast: review: https://github.com/perl6/roast/commit/98aa348e84

[19:39] *** Ven joined
[19:41] <bartolin> somehow it feels to me like this is the wrong place to fix the issue. the other place I thought about was in src/Perl6/Actions.nqp, method postfixish

[19:41] <psch> "dotted form of any other postfix operator" doesn't that mean that «Numeric @a; @a>>.i» should explicitly work..?

[19:42] <moritz> psch: no, you'd have to write >>i to distnighs it from a method call

[19:43] <psch> ooh, the order in S03 is the resolution order

[19:44] <psch> m: sub postfix:«:<+>» { say "not prefix!" }; my $x; $x.:<+>

[19:44] <camelia> rakudo-moar 4fa65d: OUTPUT«use of uninitialized value of type Any in numeric context  in block <unit> at /tmp/WFk3Bf9AXL:1␤␤»

[19:44] <psch> m: sub postfix:«:<+>» { say "not prefix!" }; my $x = 5; $x.:<+>

[19:44] <camelia> rakudo-moar 4fa65d: ( no output )

[19:44] <bartolin> ooh! so it's more like "if there is a dotted form for some postfix operators, than it has this precedence" instead of "there is a dotted form for all postfix operators"?

[19:44] <psch> that's a bug too then, no?

[19:44] <psch> or am i only outsmarting myself again? :P

[19:46] <bartolin> s/than/then/

[19:46] <psch> yeah, i think i am.  : clearly introduces a colonpair

[19:47] <psch> m: sub postfix:«:<+>» { say "not prefix!" }; my $x = 5; $x :<+> # this shouldn't work, but would have to

[19:47] <camelia> rakudo-moar 4fa65d: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/vOYmplxscr␤You can't adverb that␤at /tmp/vOYmplxscr:1␤------> [32m say "not prefix!" }; my $x = 5; $x :<+>[33m⏏[31m # this shouldn't work, but would have t[0m␤»

[19:47] *** hekmek joined
[19:48] *** FROGGS__ joined
[19:50] *** FROGGS[mobile] left
[19:51] *** FROGGS_ left
[19:52] <Ven> moritz: I feel like I asked already but.. Is there an advent post about POD?

[19:53] *** FROGGS[mobile] joined
[19:55] *** nige left
[19:55] <Ven> hoelzro: not sure I understand from s26... Is any of #= or #| prefered?

[19:58] *** Isp-sec left
[19:58] *** araujo joined
[19:58] <Ven> seems like #= doesn't add anything to subs

[19:59] *** cooper- joined
[20:01] <Ven> moritz: okay, I think I have my post. https://gist.github.com/vendethiel/32057dc3750fc670937f can you give me your opinion?

[20:03] <lizmat> Ven: first line has a Windows quote in it, rather than an apostrophe: Perl 6 itâ€™s

[20:03] *** anaeem1_ joined
[20:04] <vendethiel> whoops. thanks lizmat

[20:06] <lizmat> Ven: maybe not mention IO::Path, just say that .IO.e will be true if there is a directory entry?

[20:07] *** Ven left
[20:07] <woolfy> vendethiel++ for his first Perl 6 Advent blog post ever!!!  Woohoo!!

[20:07] <vendethiel> it's so that they can look up which other methods are there on doc.perl6.org. is that a problem for the future?

[20:07] <vendethiel> woolfy: i'm trying :()

[20:07] <woolfy> I'm not, and therefore my deepest respect that you do!

[20:08] <lizmat> vendethiel: hmmmm....  maybe I should just make IO::Path a role, and it would still be true  :-)

[20:08] <lizmat> ok, leave it then as is  :-)

[20:08] <vendethiel> alright.

[20:08] <hoelzro> timotimo: I really need to get back on that =)

[20:09] <hoelzro> Ven: #= *should* work

[20:09] <hoelzro> m: sub foo { #=(hello) } ; say &foo.WHY

[20:09] <camelia> rakudo-moar 4fa65d: OUTPUT«hello␤»

[20:09] <hoelzro> I would say that #| is more common

[20:09] <hoelzro> I think #= really shines when it comes to attributes and parameters

[20:10] <vendethiel> hoelzro: maybe gen-usage doesn't pick it up somehow?

[20:10] <vendethiel> my rakudo is like 2weeks old, also

[20:10] <FROGGS__> wow, my current patch totally adds more cowbell :P

[20:11] <lizmat> .oO( FROGGS__ rocks )

[20:11] <FROGGS__> *g*

[20:11] <lizmat> vendethiel: no further comments, looking good!

[20:12] <vendethiel> nice.

[20:13] <FROGGS__> s/expresiveness/expressiveness/

[20:13] *** Mso150 joined
[20:15] <vendethiel> FROGGS_++ #fixed

[20:16] <FROGGS__> s/The target file doesn't exist/The source file doesn't exist/ ?

[20:16] <vendethiel> FROGGS__: changed

[20:16] <FROGGS__> s:g/existant/existent/

[20:16] <masak> so... still no one doing tomorrow's advent post?

[20:17] <masak> oh, vendethiel is. awesome!

[20:17] * masak reads

[20:19] <masak> nice -- MAIN and subsets. hadn't really occurred to me.

[20:19] <masak> vendethiel++

[20:19] <FROGGS__> and the shown usage is quite awesome too!

[20:19] <vendethiel> masak: I design all my P6 programs around subsets :)

[20:19] <FROGGS__> doing these checks in or via a signature is sweet :o)

[20:20] <FROGGS__> vendethiel: so you look for problems you can apply your solution to? :P

[20:20] <vendethiel> I found this solution because I had problems.

[20:20] <masak> vendethiel: `say "Not quite enough.";` was the only thing in the post that momentarily confused me.

[20:20] <masak> vendethiel: usually, "not quite enough" and "not quite small enough" are opposites :)

[20:21] <vendethiel> masak: alright, corrected

[20:21] <dalek> rakudo/nom: e2adfae | lizmat++ | src/core/Supply.pm:

[20:21] <dalek> rakudo/nom: Add sanity test on Supply.merge/zip/zip-latest

[20:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e2adfaeed1

[20:22] <moritz> vendethiel: you should mention that the hidden_from_USAGE trait is pretty new (not included in the 2014.12 release)

[20:22] <lizmat> APDD

[20:22] <vendethiel> moritz: mentioned you ;-)

[20:22] <vendethiel> apdd?

[20:22] <lizmat> Advent Post Driven Development  :-)

[20:22] <vendethiel> :-)

[20:22] <moritz> vendethiel: not necessary

[20:23] <vendethiel> moritz: yes it is

[20:23] <dalek> roast: 63fcaaa | lizmat++ | S17-supply/ (3 files):

[20:23] <dalek> roast: Add sanity tests of Supply.merge/zip/zip-latest

[20:23] <dalek> roast: review: https://github.com/perl6/roast/commit/63fcaaac31

[20:23] <vendethiel> moritz: tbh, I didn't do it myself because I thought I'd need to create a role and then smartmatch that role

[20:24] <dalek> rakudo/nom: c0dd8ae | FROGGS++ | src/Perl6/Actions.nqp:

[20:24] <dalek> rakudo/nom: move check for post decl placeholder to add_param helper

[20:24] <dalek> rakudo/nom: 

[20:24] <dalek> rakudo/nom: This is a more direct theft^Wtranslation of std, and it will show the eject near the

[20:24] <dalek> rakudo/nom: polaceholder and not right after the entire block/routine the placeholder is in.

[20:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c0dd8ae59c

[20:24] <vendethiel> FROGGS__++

[20:25] *** ab5tract joined
[20:26] *** molaf_ left
[20:27] <dalek> roast: 8694d0b | FROGGS++ | S06-signature/positional-placeholders.t:

[20:27] <dalek> roast: RT #123470 unfudge now passing test

[20:27] <dalek> roast: review: https://github.com/perl6/roast/commit/8694d0ba41

[20:27] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=123470

[20:27] *** darutoko left
[20:28] *** koo6 joined
[20:29] <masak> I feel pretty comfortable matching regexes and subrules from methods in a grammar at this point.

[20:30] <masak> it even works to put a rule <foo> in the missle of a regex in a method, and it matches the surrounding grammar! o.O

[20:30] <masak> didn't expect that.

[20:31] <masak> but now here's my next question: if I match <foo> in that way, how do I capture it in such a way that I find it in $/ in the usual way in the action method?

[20:31] <masak> I hope the question makes sense. I suspect it has something to do with Match objects, and I've only been dealing with cursors so far.

[20:31] <FROGGS__> masak: you do /<foo>/ where foo is a method that passes?

[20:32] <FROGGS__> err, matches

[20:32] <masak> foo is a rule in this case.

[20:32] <masak> but the /<foo>/ is found in a method in the grammar.

[20:32] <FROGGS__> ohh

[20:32] <FROGGS__> I see

[20:33] <masak> and I basically want to capture the <foo> matching in the normal way, as I would from a rule.

[20:33] <FROGGS__> so you have a subcapture that you want to pass along

[20:33] <masak> yes.

[20:33] <masak> right now I'm doing `return $cursor."!reduce"("mymethod");`

[20:34] <masak> I'm not sure where in that picture registering subcaptures fits in.

[20:35] <FROGGS__> hmmm, there is  method !cursor_start_subcapture($from) {  and  method !cursor_capture($capture, $name) {

[20:35] <masak> yeah, just found those myself...

[20:36] <FROGGS__> ohh, you are calling reduce?

[20:36] <masak> yes.

[20:36] <masak> I found if I did that, the action method triggered.

[20:36] <FROGGS__> yes, you are actually calling it that way

[20:36] <masak> yes.

[20:37] <FROGGS__> but I'd call !cursor_pass($pos, 'mymethod') instead

[20:37] <FROGGS__> that should also call it afterwards

[20:37] <masak> ok

[20:37] <FROGGS__> and that afterwards is important here I think

[20:38] <FROGGS__> can you check that the action method is still called that way?

[20:39] <FROGGS__> m: grammar G { method TOP { self."!cursor_pass"(3, 'bar') } }; class A { method bar($/) { say "42 $/" } }; G.parse('foo', :actions(A))

[20:39] <camelia> rakudo-moar c908f9: OUTPUT«42 foo␤»

[20:41] <FROGGS__> m: grammar G { method TOP { self."!cursor_pass"(self.foo.pos, 'bar') }; token foo { .+ } }; class A { method bar($/) { say $/ } }; G.parse('abc', :actions(A))

[20:41] <camelia> rakudo-moar c908f9: OUTPUT«｢abc｣␤␤»

[20:46] * masak considers re-entrant parsing as a stopgap solution for what he wants

[20:51] <FROGGS__> okay, getting the capture from a Perl 6 level token and pass that as an NQPCapture is not easy doable it seems

[20:53] <masak> my reentrant solution works for now.

[20:53] <masak> it's essentially re-parsing a piece of text in the action methods.

[20:53] <masak> I can always iterate on a better solution later.

[20:56] <vendethiel> dang it, my pseudos are already taken on wp :(

[20:57] <FROGGS__> :o(

[20:57] *** felher joined
[20:58] *** felher is now known as Guest19298

[20:59] *** nige joined
[21:01] * lizmat takes some R&R

[21:03] <moritz> ruby & rails?

[21:03] <masak> rock & road

[21:03] <moritz> rest & resource

[21:03] <masak> riboflavin & RNA

[21:08] *** erkan left
[21:11] *** erkan joined
[21:16] <hoelzro> vendethiel: could be

[21:16] *** PZt left
[21:17] *** kaare_ left
[21:21] <moritz> m: say Channel.for(1..5).list

[21:21] <camelia> rakudo-moar c908f9: OUTPUT«No such method 'count' for invocant of type 'Range'␤  in method reify at src/gen/m-CORE.setting:8397␤  in block  at src/gen/m-CORE.setting:8305␤  in method reify at src/gen/m-CORE.setting:8280␤  in block  at src/gen/m-CORE.setting:8305␤  in metho…»

[21:22] <moritz> oh, it's a Supply method

[21:24] <moritz> m: my $l = Lock.new; say $l.lock for ^3

[21:24] <camelia> rakudo-moar c0dd8a: OUTPUT«Lock.new()␤Lock.new()␤Lock.new()␤»

[21:25] <moritz> is it normal that you can lock a Lock multiple times?

[21:26] <moritz> m: my $l = Lock.new; await (^3).map: { start { $l.lock } }; say 'done'

[21:27] *** raiph joined
[21:27] <camelia> rakudo-moar c0dd8a: OUTPUT«(timeout)»

[21:27] <moritz> ... apparently only from within the same thread

[21:28] <moritz> m: my $l = Lock.new; await (^3).map: { start { $l.lock; say "Locked $_"; $l.unlock } }; say 'done'

[21:28] <camelia> rakudo-moar c0dd8a: OUTPUT«Locked 0␤Locked 1␤Locked 2␤done␤»

[21:36] <moritz> m: say Lock.protect({ say 42 })

[21:36] <camelia> rakudo-moar c0dd8a: OUTPUT«(signal SEGV)»

[21:37] *** camelia joined
[21:37] <moritz> m: say Lock.new.condition.^name

[21:37] *** camelia left
[21:41] *** raiph left
[21:43] *** ab5tract left
[21:44] *** kjs_ left
[21:48] *** camelia joined
[21:48] *** camelia left
[21:50] <moritz> m: say Lock.lock

[21:51] *** camelia joined
[21:51] *** psch left
[21:52] <moritz> m: say Lock.lock

[21:52] *** ChanServ sets mode: +v camelia

[21:52] <camelia> rakudo-moar c0dd8a: OUTPUT«(signal SEGV)»

[21:53] <dalek> doc: 8ae79be | moritz++ | lib/Type/Lock.pod:

[21:53] <dalek> doc: document Lock

[21:53] <dalek> doc: review: https://github.com/perl6/doc/commit/8ae79bea42

[21:54] <nine> moritz: I'm trying to write a systemd service file for camelia. Got some reboot the server for security updates and don't want to leave it up to you to start camelia every time I do that.

[21:56] *** camelia left
[21:56] *** camelia joined
[21:56] *** camelia left
[21:59] *** camelia joined
[21:59] *** camelia left
[22:00] *** nine left
[22:03] *** virtualsue joined
[22:06] <moritz> .tell nine you can use service templates (file ends in @) and use the config file name as the template variable

[22:06] <yoleaux> moritz: I'll pass your message to nine.

[22:06] *** cooper- left
[22:07] <moritz> .tell nine see for example https://wiki.archlinux.org/index.php/systemd#Using_units search for %i

[22:07] <yoleaux> moritz: I'll pass your message to nine.

[22:08] *** cooper joined
[22:09] *** anaeem1_ left
[22:09] *** raiph joined
[22:14] *** dolmen joined
[22:15] *** cooper left
[22:16] <masak> 'night, #perl6

[22:17] <timotimo> gnite masak

[22:24] *** FROGGS__ left
[22:24] *** ptc_p6 joined
[22:30] *** hekmek left
[22:31] *** FROGGS[mobile]2 joined
[22:31] *** FROGGS[mobile]2 left
[22:35] *** FROGGS[mobile] left
[22:36] *** Ben_Goldberg left
[22:36] *** camelia joined
[22:38] *** nine joined
[22:38] *** ChanServ sets mode: +v camelia

[22:38] <nine> m: say 'alive!'

[22:38] <yoleaux> 22:06Z <moritz> nine: you can use service templates (file ends in @) and use the config file name as the template variable

[22:38] <yoleaux> 22:07Z <moritz> nine: see for example https://wiki.archlinux.org/index.php/systemd#Using_units search for %i

[22:38] <camelia> rakudo-moar c0dd8a: OUTPUT«alive!␤»

[22:39] <nine> Back again! Oh how I love bootloader problems on servers where I don't have a remote KVM

[22:44] *** atroxaper joined
[22:44] *** eternaleye joined
[22:48] <moritz> there and back again, a server's tale

[22:50] *** Akagi201 left
[22:50] *** atroxaper left
[22:59] <dalek> rakudo/nom: 284c098 | moritz++ | src/core/Lock.pm:

[22:59] <dalek> rakudo/nom: Allow methods in Lock only on definite objects

[22:59] <dalek> rakudo/nom: 

[22:59] <dalek> rakudo/nom: they segfault on the type object

[22:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/284c098cfd

[23:01] <vendethiel> okay, I need to set the advent post up now!

[23:01] <moritz> ++vendethiel

[23:01] <vendethiel> I can't seem to accept your invitation, tho, moritz

[23:01] <vendethiel> just redirects me back to my dashboard

[23:02] <moritz> vendethiel: should I resend it?

[23:02] <moritz> vendethiel: or send one to another email address?

[23:02] *** eternaleye left
[23:02] <vendethiel> okay, actually, it worked now. Dunno, lol.

[23:02] <moritz> I'll also go to bed soon

[23:02] <vendethiel> The 3rd try is the best?

[23:03] <moritz> "third time pays for all"

[23:03] <vendethiel> moritz: should I just publish it now :)?

[23:03] *** koo6 left
[23:03] <moritz> vendethiel: well, it's still one hour until UTC midnight :-)

[23:05] <moritz> vendethiel: but I don't care if you publish now, it's already the 22nd in 11/24th part of the world :-)

[23:05] <vendethiel> moritz: well, should be up in 1hr

[23:05] <moritz> \o

[23:05] <vendethiel> whoops. the HTML doesn't render correctly at all :D

[23:05] * moritz -> sleep

[23:05] *** ptc_p6 left
[23:05] <vendethiel> okay, should be "better" now

[23:06] <vendethiel> no indentation though, uuhh

[23:07] * vendethiel adds a finishing note

[23:08] *** jack_rabbit left
[23:11] *** BenGoldberg joined
[23:14] *** mvuets left
[23:23] *** eternaleye joined
[23:23] *** dolmen left
[23:45] *** eternaleye left
[23:50] *** eternaleye joined
[23:55] *** virtualsue left
[23:56] <raiph> vendethiel: yr gist ... # Prints "Not quite enough." -- er, does it?

[23:56] <vendethiel> raiph: oh whoops :)

[23:56] <raiph> ;)

[23:57] <raiph> vendethiel++, moritz++ # nice MAIN with subset advent

[23:59] *** spider-mario left
