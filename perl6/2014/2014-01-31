[00:00] *** kivutar left
[00:02] *** berekuk left
[00:03] *** berekuk joined
[00:11] *** btyler left
[00:15] <clsn> Whyfor aren't ⸨⸩ considered a bracketing pair?  They're Ps/Pe and all.  But they aren't in  the lists of openers/closers in Rakudo or in Std.  I think there are others too.  Std does mention in a comment that the list should be based directly on Unicode tables, but isn't yet.

[00:15] *** Vlavv_ left
[00:16] *** aindilis left
[00:16] *** aindilis joined
[00:20] *** lue left
[00:22] *** jeffreykegler joined
[00:27] *** rurban1 left
[00:27] <TimToady> clsn: it was not added till Unicode 5.1, so probably after we generated that list

[00:29] <TimToady> the STD list was just copied out of pugs, which came even ealier

[00:29] <TimToady> *earlier

[00:29] <TimToady> feel free to automate that now that we actually have Unicode props :)

[00:31] <smls> Does P6 support P5-style subpattern recursion within a single regex (i.e. without defining a full-fledged grammar with multiple tokens)?

[00:32] <TimToady> in theory

[00:33] <jnthn> Well, you can always define it as my token foo { ... <&foo> ... } or so to lighten it

[00:33] <jnthn> Otherwise there's <~~>

[00:33] <TimToady> I think smls is looking more for <~~1> and such to reuse whatever matched $1

[00:33] <jnthn> Ah

[00:33] <jnthn> I'm not sure that's implemented

[00:33] <smls> see http://rosettacode.org/wiki/Balanced_brackets#Perl for example

[00:34] <jnthn> 'cus it's...hard to do.

[00:34] <smls> subpattern recursion allows the P5 solution to be nice and pretty :)

[00:34] <jnthn> Like many other things, but this one is rarely asked for :)

[00:35] <smls> sub balanced { shift =~ /^ (\[ (?1)* \])* $/x; }

[00:35] <timotimo> hard to do? :(

[00:35] * timotimo has a hard-to-do thing already on his plate

[00:35] <smls> well ok, in my editor with syntax highlighting it looks nice :)

[00:36] *** daniel-s left
[00:38] <jnthn> timotimo: It's not greedy to have more than one... :P

[00:38] *** Vlavv_ joined
[00:39] <smls> in this example, P5 subpattern-recursion vs P6 grammars is just a stylistic difference

[00:39] <smls> but the P5 recursion allows backtracking across subpatterns

[00:39] <smls> and P6 tokens prevent that, right?

[00:42] <jnthn> token does, regex don't

[00:42] <smls> ah ok

[00:44] <TimToady> but you don't really want backtracking here anyway

[00:44] <TimToady> the current P6 solution using a grammar is busted, fixing

[00:44] <smls> yeah, that's why I said in this example there's no difference

[00:46] <TimToady> see new http://rosettacode.org/wiki/Balanced_brackets#Parsing_with_a_grammar

[00:47] <TimToady> reduced the grammar to a one-liner

[00:47] <TimToady> since TOP now implicitly checks ^ and $

[00:47] <TimToady> or rather, .parse does

[00:48] <smls> nifty :)

[00:50] <TimToady> in fact, wouldn't work if TOP implicitly checked, since we call TOP recursively

[00:52] *** berekuk left
[00:52] <smls> Of course the main problem with P5 recursive regexes, is that they discard all information about what they matched - except for the *last* *top-level* match of each capture group.

[00:55] <grondilu> TimToady: isn't there a way to shorten brace expansion as well?  I suspect the "meta" rule is not really necessary.

[00:56] <TimToady> grondilu: I couldn't make it work; the different terminators mess up the levels

[00:57] <TimToady> and doing things like passing a $level arg didn't seem to pan out

[00:57] <TimToady> also, didn't work with the '{' ~ '}' idiom

[00:58] *** rurban1 joined
[00:58] <TimToady> because that commits in a way that seems detrimental to backtracking

[00:58] <TimToady> I tried a *lot* of things before the initial entry...

[00:59] <TimToady> though most of that was trying to build up the X during the parse, which didn't work out well at all, because I think rakudo is biased towards action routines that are not inlined

[00:59] <TimToady> so I ended up with a separate walker

[01:00] <grondilu> well, if there's room for improvement, someone will find them eventually.

[01:00] <jnthn> TimToady: If you tried it on JVM, until a couple of weeks ago there was a serious bug with closures inside of regexes.

[01:00] <TimToady> the walker could probably be simplified/obfuscated too to make it "pointless"

[01:00] <jnthn> TimToady: Which could well have gotten in the way of inline actions

[01:00] <TimToady> but I didn't want to explain [X~]

[01:01] <TimToady> I tried it on all three, in fact

[01:01] <TimToady> dunno what I was running into

[01:01] <TimToady> but { make ... } would not pass an ast up

[01:01] <TimToady> and all my attempts to set a $<foo> directly met with failure

[01:02] <TimToady> it's probably better to do it outside with a separate walker anyway, because then you don't have to throw stuff away on backtracking

[01:02] <timotimo> oh my

[01:02] <timotimo> "not" xx not $balanced

[01:02] <TimToady> smls: yes, we notice that problem with P5, which is why P6 does it differently :)

[01:03] * TimToady grins at timotimo

[01:03] <smls> :)

[01:03] <TimToady> you can do the same trick, kinda, in P5

[01:03] <TimToady> only of course it's x there

[01:04] <konnjuta> how many types of encoding does rakudo currently have?

[01:04] <TimToady> three: the Good, the Bad, and the Ugly

[01:05] *** jnap left
[01:05] <TimToady> seriously, it's probably highly platform dependent at the moment

[01:06] <jnthn> Yeah, I think it'll depend by backend somewhat

[01:06] <jnthn> I imagine latin-1, ascii and utf-8 can re relied upon to exist

[01:07] <konnjuta> is it possible to create custom encoding?

[01:07] <konnjuta> say come up with my own charmps

[01:07] <konnjuta> to read legacy data

[01:07] *** arnsholt left
[01:08] <TimToady> r: say "foo".encode('ISO-8858-15').decode('UTF-8')

[01:08] <timotimo> that's backend-specific, but there should be a way; even if not yet

[01:08] <camelia> rakudo-jvm d6a93b: OUTPUT«Unknown encoding 'iso-8858-15'␤  in method encode at gen/jvm/CORE.setting:6275␤  in block  at /tmp/tmpfile:1␤␤»

[01:08] <camelia> ..rakudo-parrot d6a93b: OUTPUT«encoding #-1 not found␤  in method encode at gen/parrot/CORE.setting:6279␤  in block  at /tmp/tmpfile:1␤␤»

[01:08] <camelia> ..rakudo-moar d6a93b: OUTPUT«Unknown string encoding: 'iso-8858-15'␤  in method encode at src/gen/m-CORE.setting:6275␤  in block  at /tmp/tmpfile:1␤␤»

[01:09] <TimToady> not "euro"-centric :)

[01:09] <TimToady> r: say "foo".encode('ISO-8858-1').decode('UTF-8')

[01:09] <camelia> rakudo-moar d6a93b: OUTPUT«Unknown string encoding: 'iso-8858-1'␤  in method encode at src/gen/m-CORE.setting:6275␤  in block  at /tmp/tmpfile:1␤␤»

[01:09] <camelia> ..rakudo-jvm d6a93b: OUTPUT«Unknown encoding 'iso-8858-1'␤  in method encode at gen/jvm/CORE.setting:6275␤  in block  at /tmp/tmpfile:1␤␤»

[01:09] <camelia> ..rakudo-parrot d6a93b: OUTPUT«encoding #-1 not found␤  in method encode at gen/parrot/CORE.setting:6279␤  in block  at /tmp/tmpfile:1␤␤»

[01:09] <TimToady> oops

[01:09] <TimToady> r: say "foo".encode('ISO-8859-1').decode('UTF-8')

[01:09] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«foo␤»

[01:09] <TimToady> r: say "foo".encode('ISO-8859-15').decode('UTF-8')

[01:09] <camelia> rakudo-jvm d6a93b: OUTPUT«Unknown encoding 'iso-8859-15'␤  in method encode at gen/jvm/CORE.setting:6275␤  in block  at /tmp/tmpfile:1␤␤»

[01:09] <camelia> ..rakudo-moar d6a93b: OUTPUT«Unknown string encoding: 'iso-8859-15'␤  in method encode at src/gen/m-CORE.setting:6275␤  in block  at /tmp/tmpfile:1␤␤»

[01:09] <camelia> ..rakudo-parrot d6a93b: OUTPUT«encoding #-1 not found␤  in method encode at gen/parrot/CORE.setting:6279␤  in block  at /tmp/tmpfile:1␤␤»

[01:10] <TimToady> n: say "foo".encode('ISO-8859-15').decode('UTF-8')

[01:10] <camelia> niecza v24-109-g48a8de3: OUTPUT«foo␤»

[01:10] <TimToady> niecza++

[01:11] <TimToady> n: say "foo".encode('UTF-32')

[01:11] <camelia> niecza v24-109-g48a8de3: OUTPUT«Buf.new(...)␤»

[01:12] <TimToady> n: say "foo".encode('UTF-32').chrs

[01:12] <camelia> niecza v24-109-g48a8de3: OUTPUT«Unhandled exception: Cannot unbox a BigInteger from an object of repr P6box[Byte[]]␤  at /home/p6eval/niecza/lib/CORE.setting line 1496 (chr @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1498 (ANON @ 4) ␤  at <unknown> line 0 (KERNEL map …»

[01:12] <TimToady> huh

[01:12] <TimToady> n: say "foo".encode('UTF-32')[]

[01:12] <camelia> niecza v24-109-g48a8de3: OUTPUT«Buf.new(...)␤»

[01:12] <TimToady> n: say "foo".encode('UTF-32')[*]

[01:13] <camelia> niecza v24-109-g48a8de3: OUTPUT«Buf.new(...)␤»

[01:13] <konnjuta> perl6 -e 'open("-",:!chomp).lines>>.encode("ascii").say' < /tmp/utffile

[01:13] <TimToady> sigh

[01:13] <konnjuta>  Lossy conversion to single byte encoding   in method encode at gen/parrot/CORE.setting:6277   in method dispatch:<hyper> at gen/parrot/CORE.setting:1245   in block  at -e:1

[01:13] <konnjuta> can't lossy conversion be done with a subchar?

[01:13] <TimToady> n: say "foo".encode('UTF-32')[^3]

[01:13] <camelia> niecza v24-109-g48a8de3: OUTPUT«Buf.new(...) (Any) (Any)␤»

[01:13] <TimToady> p: say "foo".encode('UTF-32')[^3]

[01:13] <camelia> rakudo-parrot d6a93b: OUTPUT«encoding #-1 not found␤  in method encode at gen/parrot/CORE.setting:6279␤  in block  at /tmp/zo6MU4Vysi:1␤␤»

[01:13] <TimToady> that message is LTA

[01:14] <jnthn> r: say "foo".encode('UTF-32')[^3]

[01:14] <camelia> rakudo-moar d6a93b: OUTPUT«Unknown string encoding: 'utf32'␤  in method encode at src/gen/m-CORE.setting:6275␤  in block  at /tmp/tmpfile:1␤␤»

[01:14] <camelia> ..rakudo-jvm d6a93b: OUTPUT«102 111 111␤»

[01:14] <camelia> ..rakudo-parrot d6a93b: OUTPUT«encoding #-1 not found␤  in method encode at gen/parrot/CORE.setting:6279␤  in block  at /tmp/tmpfile:1␤␤»

[01:14] <jnthn> Moar message seems better, and it works on JVM

[01:15] <TimToady> j: say "foo".encode('UTF-32').chrs

[01:15] <camelia> rakudo-jvm d6a93b: OUTPUT«No such method 'chrs' for invocant of type 'utf32'␤  in block  at /tmp/2Vm7XH8XTP:1␤␤»

[01:15] <jnthn> What does .chrs on a Buf mean?

[01:15] <TimToady> nothin'

[01:15] <jnthn> OK, so that's correct... :)

[01:16] <TimToady> j: say "foo".encode('UTF-32').list

[01:16] <camelia> rakudo-jvm d6a93b: OUTPUT«102 111 111␤»

[01:16] <konnjuta> lta = long term abuse?

[01:17] <TimToady> less than awesome

[01:17] <jnthn> haha :)

[01:17] <TimToady> http://perlcabal.org/syn/S99.html#LTA

[01:18] <TimToady> hah: 17:17 < TimToady> less than awesome

[01:18] <TimToady> 17:17 < jnthn> haha :)

[01:18] <TimToady> 17:17 < TimToady> http://perlcabal.org/syn/S99.html#LTA

[01:18] <TimToady> er, wrong paste

[01:18] <jnthn> haha :)

[01:19] <TimToady> but if you follow that link, you'll find an autopun

[01:19] *** arnsholt joined
[01:20] <timotimo> hm. i wonder if :!chomp would have helped me ~1 year ago when i tried to handle $a_socket.lines on top of parrot

[01:20] <TimToady> though as definitions go, it's a bit LTA

[01:22] <timotimo> (the problem i ran into was not being able to differentiate "a full buffer's read, or just one line that ended on a newline"

[01:23] <timotimo> and since i was reading some json data that was sent to me via the wire, i ran into some trouble trying to parse it ...

[01:29] *** rurban2 joined
[01:32] *** rurban1 left
[01:35] <konnjuta> r: "\x41".print

[01:35] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«A»

[01:36] <konnjuta> r: "\x41\xE2\x82\xAC".print

[01:36] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«Aâ¬»

[01:44] *** lue joined
[01:46] *** jnap joined
[01:55] <TimToady> grondilu: I added a point-free version of crosswalk at the end of the http://rosettacode.org/wiki/Brace_expansion entry for Perl 6

[01:55] * TimToady wonders why it doesn't build a TOC till there's four languages...

[02:02] *** rurban2 left
[02:05] <konnjuta> perl -e 'print "\x41\xE2\x82\xAC"' | perl -le 'print unpack("H*",<>)'

[02:05] <konnjuta> 41e282ac

[02:05] <konnjuta>  perl6 -e 'print "\x41\xE2\x82\xAC"' | perl -le 'print unpack("H*",<>)'

[02:06] <konnjuta> 41c3a2c282c2ac

[02:06] <konnjuta> whats happening here?

[02:07] <skids> wide unicode characters?

[02:08] <jnthn> \xE2 in a string refers to Unicode code-point E2, not a byte E2

[02:08] <jnthn> If you want to work with bytes, use Buf, not strings.

[02:08] <smls> TimToady: yikes, what happened to this solution: http://rosettacode.org/wiki/First-class_functions#Perl_6

[02:09] <konnjuta> thank you

[02:10] <jnthn> yay, I think I'm an hour so so's more work of having a deliverable FOSDEM talk. 

[02:10] <jnthn> I guess that means I should get some sleep before the flight.. :)

[02:10] <jnthn> 'night, #perl6

[02:11] <skids> sleep tight.  Don't let the unicode byte

[02:17] <smls> TimToady: never mind, I fixed it.

[02:20] *** FROGGS left
[02:21] *** smls left
[02:25] *** kbaker joined
[02:34] *** FROGGS joined
[02:36] *** Alula left
[02:38] *** Alula joined
[02:38] <TimToady> smash: yeah, someone was using a bad browser and/or editor that thought it would helpfully decode to ASCII

[02:39] <TimToady> I saw them getting told in another discussion page somewhere, so it shouldn't happen again soon

[02:39] <TimToady> but we'll need to keep our eyes peeled for other such damage

[02:42] <TimToady> didn't ingy++ have a download stashed somewhere?

[02:44] <TimToady> or maybe I can figure out whose edits did it and look at those pages

[02:44] *** regreg joined
[02:54] *** dayangkun_ left
[02:57] *** thou left
[03:04] *** grondilu left
[03:06] *** rurban1 joined
[03:22] <konnjuta> r: (<[ ]> xx 5).pick(*).join.say

[03:22] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«[][][][][]␤»

[03:22] <konnjuta> r: (<[ ]> xx 5).pick(*).join.say

[03:22] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«[][][][][]␤»

[03:22] <konnjuta> r: (<[ ]> xx 5).pick(*).elem

[03:22] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«No such method 'elem' for invocant of type 'List'␤  in block  at /tmp/tmpfile:1␤␤»

[03:23] <konnjuta> r: (<[ ]> xx 5).pick(*).elems

[03:23] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: ( no output )

[03:23] <konnjuta> r: (<[ ]> xx 5).pick(*).elems.say

[03:23] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«5␤»

[03:24] <lue> Apparently I signed up for RosettaCode way back in 2010 :P

[03:28] <konnjuta> seems like list is not flatten?

[03:29] <konnjuta> r: (<[ ]> xx 5).pick(*).list.elems.say

[03:29] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«5␤»

[03:29] <konnjuta> r: (<[ ]> xx 5).list.pick(*).elems.say

[03:29] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«5␤»

[03:30] <konnjuta> r: (<[ ]> xx 5).list.elems.say

[03:30] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«5␤»

[03:31] <konnjuta> r: @(<[ ]> xx 5).list.elems.say

[03:31] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«5␤»

[03:36] <konnjuta> r: (<[ ]> xx 5).flat.elems.say

[03:36] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«10␤»

[03:37] <konnjuta> r: my @a=(<[ ]> xx 5);

[03:37] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: ( no output )

[03:37] <konnjuta> @a.elems.say

[03:37] <konnjuta> r: my @a=(<[ ]> xx 5); @a.elems.say

[03:37] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«10␤»

[03:37] <konnjuta> r: (<[ ]> xx 5).elems.say

[03:37] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«5␤»

[03:40] <raydiak> r: my @a=(<[ ]> xx 5); @a.perl.say;

[03:40] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«Array.new("[", "]", "[", "]", "[", "]", "[", "]", "[", "]")␤»

[03:41] <raydiak> r: (<[ ]> xx 5).perl.say

[03:41] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«(("[", "]"), ("[", "]"), ("[", "]"), ("[", "]"), ("[", "]")).list␤»

[03:42] <konnjuta> seems like (<[ ]> xx 5) does not flatten

[03:42] <konnjuta> r: (<[ ]> xx 5).flat.perl.say

[03:42] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«("[", "]", "[", "]", "[", "]", "[", "]", "[", "]").list␤»

[03:42] <raydiak> it's not supposed to flatten, it's a parcel until you assign it to something else, like an array

[03:43] <TimToady> it's actually a parcel of 5 parcels

[03:43] <lue> konnjuta: it does flatten when you use .flat

[03:43] <TimToady> r: (<[ ]> xx 5).perl.say

[03:43] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«(("[", "]"), ("[", "]"), ("[", "]"), ("[", "]"), ("[", "]")).list␤»

[03:44] <TimToady> which is why I changed it for the RC entry

[03:44] <TimToady> I note that the .roll($n*2) entries don't have this problem

[03:44] <TimToady> otoh, they don't guarantee an even number of opening/closing brackets

[03:45] <TimToady> which is okay for that problem

[03:46] <TimToady> r: say pick, *, <[ ]> xx 5

[03:46] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Calling 'pick' requires arguments␤    Expected any of:     :(Any $n, *@values)␤at /tmp/tmpfile:1␤------> [32msay [33m⏏[31mpick, *, <[ ]>…»

[03:46] <TimToady> r: say pick *, <[ ]> xx 5

[03:46] <camelia> rakudo-parrot d6a93b: OUTPUT«[ ] [ ] ] [ ] [ ] [␤»

[03:46] <camelia> ..rakudo-moar d6a93b: OUTPUT«[ ] [ ] ] ] ] [ [ [␤»

[03:46] <camelia> ..rakudo-jvm d6a93b: OUTPUT«[ ] ] ] [ ] [ [ ] [␤»

[03:46] <TimToady> that works too

[03:46] <TimToady> since a slurpy flattens

[03:49] <konnjuta> under what condition in addition to (<[ ]> xx 5) does it no flatten?

[03:50] <TimToady> parcels never flatten until bound into something that flattens it

[03:50] <konnjuta> ok

[03:50] <TimToady> and xx is defined to return a parcel for each iteration

[03:50] <TimToady> the outer parens have nothing to do with it

[03:51] <TimToady> r: given <[ ]> xx 5 { .perl.say }

[03:51] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«(("[", "]"), ("[", "]"), ("[", "]"), ("[", "]"), ("[", "]")).list␤»

[03:51] <TimToady> see, no outer parens, still not flat

[03:52] <TimToady> r: given (((<[ ]> xx 5))) { .perl.say }

[03:52] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«(("[", "]"), ("[", "]"), ("[", "]"), ("[", "]"), ("[", "]")).list␤»

[03:52] <TimToady> extra parens don't matter either, unless there's a comma

[03:52] <TimToady> r: given (((<[ ]> xx 5),),) { .perl.say }

[03:52] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«(((("[", "]"), ("[", "]"), ("[", "]"), ("[", "]"), ("[", "]")).list,),)␤»

[03:56] *** jnap left
[04:02] *** BenGoldberg left
[04:11] *** regreg left
[04:19] *** colomon left
[04:21] *** colomon joined
[04:26] *** jnap joined
[04:31] *** jnap left
[04:48] *** SamuraiJack joined
[05:02] *** btyler joined
[05:18] <TimToady> okay, turned in my SOTO application for OSCON, though now I see that Geoffrey has also proposed it with the Lightning Talks

[05:23] *** [Sno] left
[05:23] *** kbaker left
[05:27] *** jnap joined
[05:31] *** jnap left
[05:36] *** jeffreykegler left
[05:44] *** mcglk left
[05:55] *** Alina-malina joined
[06:04] <konnjuta> how to convert string to buf?

[06:04] <moritz> with .encode

[06:04] <moritz> with .encode($encoding) to be precise

[06:17] *** sqirrel_ joined
[06:27] *** [Sno] joined
[06:28] *** jnap joined
[06:29] * lue grumbles in the direction of all things list-like in Perl 6

[06:29] *** zby_home_ joined
[06:32] *** jnap left
[06:35] * raydiak contemplates putting together a list behaviour matrix which crosses parcel, list, array, capture, etc, with mutable, lazy, flattening, context-imposing, and so forth

[06:38] *** kaleem joined
[06:39] *** darutoko joined
[06:41] <TimToady> revised http://rosettacode.org/wiki/ABC_Problem#Perl_6 to be correct in the face of different blocksets

[06:41] *** rurban1 left
[06:41] <lue> I can make Nil disappear anytime I want to, so long as it's not the code I'm trying to fix >_<

[06:42] <konnjuta> r: (<1 2>, <1 2>).WHAT

[06:42] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: ( no output )

[06:42] <konnjuta> r: (<1 2>, <1 2>).WHAT.say

[06:42] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«(Parcel)␤»

[06:42] <konnjuta> r: (<1 2>, <1 2>).elems.say

[06:42] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«4␤»

[06:43] <konnjuta> r: (<1 2>, <1 2>).list.WHAT.say

[06:43] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«(List)␤»

[06:43] <konnjuta> r: (<1 2>, <1 2>).list.elems.say

[06:43] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«2␤»

[06:43] <konnjuta> r: (<1 2> xx 2 ).WHAT.say

[06:43] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«(List)␤»

[06:43] <konnjuta> r: (<1 2> xx 2 ).elems.say

[06:43] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«2␤»

[06:44] <konnjuta> r: (<1 2> xx 2, ).WHAT.say

[06:44] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«(Parcel)␤»

[06:44] <konnjuta> r: (<1 2> xx 2, ).elems.say

[06:44] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«4␤»

[06:44] <konnjuta> So parcel flattens but list don't?

[06:45] <lue> If someone can tell me why I can't make the Nils disappear, that'd be great:    https://gist.github.com/lue/2761b448d04219e23cc4

[06:48] <moritz> how about not using 'make Nil' if you don't want Nils? :-)

[06:50] <TimToady> what moritz sez

[06:51] *** sqirrel_ left
[06:51] *** bibifuc_ is now known as bibifuc

[06:51] <TimToady> neither parcels nor lists are interested in flattening

[06:51] <TimToady> it's how you use them

[06:52] <lue> moritz: I haven't experimented as much with not doing make Nil, though I didn't have much success there either.

[06:52] <TimToady> what do you want instead of the Nil?

[06:53] <lue> nothing, that's why I was counting on Nil's "disappear from the array" trick

[06:53] <TimToady> Nils have not disappeared from lists for most of a year now...

[06:53] <TimToady> except as fossilized bugs

[06:53] <lue> (the list will be turned into a Bag later, and I don't want (Any)=> to be an entry)

[06:53] <lue> r: say (1, Nil, 3).Array

[06:53] <TimToady> did you try () instead?

[06:53] <camelia> rakudo-parrot d6a93b, rakudo-jvm d6a93b, rakudo-moar d6a93b: OUTPUT«1 3␤»

[06:54] <lue> TimToady: no, testing...

[06:54] <TimToady> interesting, something is itemizing it

[06:57] <TimToady> I'm guessing there's an itemize somewhere in make, when maybe there shouldn't be

[06:58] <lue> TimToady: that might explain it, $() and things refusing to flatten seem to be plaguing me at the moment.

[06:59] <lue> It could be I'm using not-the-absolute-latest builds of rakudo, my p6 is 2014.01-25-gfd8316f

[07:01] <TimToady> sub make(Mu $ast) {  <-- the $ is itemizing what you make, so () turns into $()

[07:02] <TimToady> that should probably be using a \ instead of a $

[07:02] *** regreg joined
[07:03] <lue> TimToady: replacing 'make Nil' with 'make ()' and using 'make $<word>».ast».Array.flat.Bag;' works for me.

[07:05] <TimToady> testing a patch

[07:07] *** FROGGS left
[07:08] *** konnjuta left
[07:09] * lue goes for the night

[07:09] <raydiak> goodnight lue

[07:26] *** crab2313 joined
[07:29] *** jnap joined
[07:33] *** jnap left
[07:35] *** aindilis left
[07:41] *** kaare_ left
[07:42] *** rurban1 joined
[07:46] *** kaare_ joined
[07:51] *** dmol joined
[07:52] *** FROGGS joined
[07:56] *** kaare_ left
[08:01] *** kaare_ joined
[08:05] *** zakharyas joined
[08:10] <dalek> rakudo/nom: 8128f6a | larry++ | src/core/Match.pm:

[08:10] <dalek> rakudo/nom: Don't itemize make's ast argument

[08:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8128f6a5aa

[08:12] <FROGGS> morning

[08:12] <raydiak> \o morning FROGGS

[08:14] <TimToady> o/

[08:15] *** berekuk joined
[08:15] *** rurban1 left
[08:21] <dalek> rakudo/nom: 1d6accc | moritz++ | CREDITS:

[08:21] <dalek> rakudo/nom: larry is typically known as TimToady++

[08:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1d6acccc63

[08:22] <moritz> 07:58 < lue> TimToady: that might explain it, $() and things refusing to flatten

[08:22] <moritz> of course it doesn't flatten, it begins with a $ !

[08:25] *** tgt joined
[08:29] *** jnap joined
[08:33] *** BooK left
[08:34] *** jnap left
[08:34] *** BooK joined
[08:37] *** pdcawley joined
[08:39] *** rindolf joined
[08:41] *** dmol left
[08:42] *** fhelmberger joined
[08:44] *** berekuk left
[08:46] *** berekuk joined
[08:50] *** tgt left
[08:58] <hoelzro> morning #perl6!

[08:59] <raydiak> good morning hoelzro

[08:59] <hoelzro> moritz: raydiak 

[09:00] *** berekuk left
[09:03] <timotimo> i can sense making make not itemize by default is going to chang lots of user code

[09:03] <timotimo> but i agree that it's more sensible to use \foo rather than $foo for make.

[09:04] <hoelzro> oops

[09:04] <hoelzro> that was supposed to be "morning raydiak" =P

[09:05] <timotimo> why didn't it autocomplete to "mroing" or something? :P

[09:05] *** bjz left
[09:05] *** bjz_ joined
[09:05] <raydiak> b/c it's not a cellphone? :)

[09:08] *** bjz_ left
[09:08] *** bjz joined
[09:12] <moritz> because my nick isn't 'MRoing'

[09:14] <timotimo> :)

[09:20] <timotimo> can't you just interpolate @foobar into a regex?

[09:20] <timotimo> rather than evaling "/" ~ .comb.join('|') ~ "/"?

[09:20] *** rurban1 joined
[09:21] <FROGGS> timotimo: you can

[09:21] <FROGGS> who says the opposite?

[09:24] *** lestrrat left
[09:25] <timotimo> the ABC problem code from RC does that :)

[09:25] <timotimo> gotta run now.

[09:25] *** lestrrat joined
[09:27] *** sqirrel_ joined
[09:29] *** tgt joined
[09:30] *** jnap joined
[09:35] *** jnap left
[09:37] *** dmol joined
[09:38] *** dmol left
[09:39] *** zby_home_ left
[09:39] <masak> mroing, #perl6

[09:40] *** dmol joined
[09:40] <FROGGS> mroing mrask!

[09:40] <raydiak> good method resolution order, masak

[09:42] <masak> (masak) (RT-bot) (bot) (Mu)

[09:45] *** rurban1 left
[09:48] <masak> "Blocks are stored as precompiled regexes." -- the code seems to have obsoleted the description here. http://rosettacode.org/wiki/ABC_Problem#Perl_6

[09:48] <masak> oh wait.

[09:48] <masak> no, there it is, EVAL and slashes.

[09:48] <masak> never mind. :)

[09:48] * masak ponders if macros could do that

[09:49] <diakopter> macros can do anarthing

[09:57] <masak> except when they can't

[09:58] <diakopter> .. but you can do anything within a macro :)

[09:59] <masak> hehe

[10:00] <masak> by that argument, subs and class declarations can do anarthing too

[10:00] <diakopter> classes can do subs!

[10:00] <diakopter> subs can do classes!

[10:00] <diakopter> such do

[10:05] <masak> p: class C1 { has $.x = sub { my class C2 { has $.y = sub { say "OH HAI" } }; return C2 } }; C1.new.x()().new.y()()

[10:05] <camelia> rakudo-parrot 1d6acc: OUTPUT«OH HAI␤»

[10:05] <masak> \o/

[10:06] <diakopter> lolz

[10:06] <moritz> subs in attributes in clases in subs in attributes in classes

[10:06] <moritz> such inception

[10:13] *** btyler left
[10:28] * jnthn waves from l'airport

[10:28] *** tgt left
[10:29] * FROGGS waves back from l'office

[10:29] <jnthn> Late flight is late

[10:29] <jnthn> Not much, thankfully

[10:30] <masak> hi, jnthn from l'airport

[10:31] *** jnap joined
[10:31] <moritz> L'ate flight is late :-)

[10:31] <moritz> \o jnthn, FROGGS, *

[10:31] *** crab2313 left
[10:32] <jnthn> J'ai l'ate un cookie

[10:33] *** zby_home_ joined
[10:33] * masak .oO( how l'ame )

[10:33] *** zby_home_ left
[10:35] *** jnap left
[10:47] *** daniel-s joined
[10:50] *** rurban1 joined
[10:56] *** daniel-s_ joined
[10:56] *** daniel-s left
[10:57] * masak sometimes wishes he could declare named lexical rules and invoke them from a // regex

[10:57] *** fhelmberger left
[10:58] <FROGGS> masak: what do you mean?

[10:58] <jnthn> /<&foo>/ ?

[10:59] <dalek> rakudo/nom: 1a44ca6 | jonathan++ | tools/build/Makefile-Moar.in:

[10:59] <dalek> rakudo/nom: Install the debugger on MoarVM.

[10:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1a44ca69ac

[10:59] <FROGGS> p: my &foo = regex { \w+ }; say "ohh?" ~~ / <&foo> /

[10:59] <camelia> rakudo-parrot 1d6acc: OUTPUT«｢ohh｣␤␤»

[11:00] <jnthn> r: my regex foo { \w+ }; say "ohh?" ~~ / <&foo> /

[11:00] <camelia> rakudo-parrot 1d6acc, rakudo-jvm 1d6acc, rakudo-moar 1d6acc: OUTPUT«｢ohh｣␤␤»

[11:00] <diakopter> masak: I wanted that so badly, I thought we already had it

[11:01] *** Alula left
[11:01] <jnthn> OK, time to wander gate-wards I guess...

[11:01] <jnthn> bbl

[11:02] <masak> jnthn: I suspected there was a syntax for it, thanks.

[11:02] * FROGGS resists to ask "Wie gates?"

[11:02] <masak> haha

[11:02] * masak .oO( look to gate-wards )

[11:02] <FROGGS> r: my regex foo { \w+ }; say "ohh?" ~~ / <foo> /

[11:02] <camelia> rakudo-parrot 1d6acc, rakudo-jvm 1d6acc, rakudo-moar 1d6acc: OUTPUT«｢ohh｣␤ foo => ｢ohh｣␤␤»

[11:02] <masak> FROGGS++

[11:02] <FROGGS> :o)

[11:03] <masak> wow, I don't even need the &

[11:03] <FROGGS> ENOSPECIALSYNTAX

[11:03] <FROGGS> the hardest thing about it is the "my"

[11:03] <FROGGS> though I think the errmsg would point you in the right direction nowadays

[11:03] <FROGGS> r: regex foo { \w+ }; say "ohh?" ~~ / <foo> /

[11:03] <camelia> rakudo-moar 1d6acc: OUTPUT«Useless declaration of a has-scoped method in mainline (did you mean 'my regex foo'?)␤No such method 'foo' for invocant of type 'Cursor'␤  in method ACCEPTS at src/gen/m-CORE.setting:12552␤  in method ACCEPTS at src/gen/m-CORE.setting:782␤  in bloc…»

[11:03] <camelia> ..rakudo-parrot 1d6acc: OUTPUT«Useless declaration of a has-scoped method in mainline (did you mean 'my regex foo'?)␤No such method 'foo' for invocant of type 'Cursor'␤  in regex  at /tmp/tmpfile:1␤  in method ACCEPTS at gen/parrot/CORE.setting:12575␤  in method ACCEPTS at gen…»

[11:03] <camelia> ..rakudo-jvm 1d6acc: OUTPUT«Useless declaration of a has-scoped method in mainline (did you mean 'my regex foo'?)␤No such method 'foo' for invocant of type 'Cursor'␤  in method ACCEPTS at gen/jvm/CORE.setting:12554␤  in method ACCEPTS at gen/jvm/CORE.setting:782␤  in block  at…»

[11:04] <FROGGS> yeah :o)

[11:05] <masak> wow, that made the code lots more readable. nice!

[11:07] <FROGGS> yeah, I mean named captures already are nice in a sense of self-documenting code (/$<date>=.../), but declaring these rules somewhere and use these as captures is nice in several ways

[11:08] <masak> indeed.

[11:09] *** tgt joined
[11:12] * diakopter thinks the camelia smudger could make responses equivalent if they're errors and the first two lines of the error/backtrace are the same

[11:13] <masak> aye.

[11:13] <masak> p: my regex t { \s+ <(foo|bar)> }; say "    bar" ~~ / <t> /

[11:13] <camelia> rakudo-parrot 1d6acc: OUTPUT«｢bar｣␤ t => ｢bar｣␤␤»

[11:14] <masak> p: my regex t { \s+ <(foo|bar)> }; say "    bar" ~~ / <t>? /

[11:14] <camelia> rakudo-parrot 1d6acc: OUTPUT«｢｣␤␤»

[11:14] <masak> I'm... wondering if the that second one is correct?

[11:15] <FROGGS> does not feel right

[11:15] <FROGGS> n: my regex t { \s+ <(foo|bar)> }; say "    bar" ~~ / <t>? /

[11:15] <camelia> niecza v24-109-g48a8de3: OUTPUT«｢｣␤␤»

[11:15] <FROGGS> n: my regex t { \s+ <(foo|bar)> }; say "    bar" ~~ / <t> /

[11:15] <camelia> niecza v24-109-g48a8de3: OUTPUT«｢bar｣␤ t => ｢bar｣␤␤»

[11:15] <FROGGS> hmmmm

[11:15] <FROGGS> rn: my regex t { \s+ <(foo|bar)> }; say "    bar" ~~ / <t>* /

[11:15] <masak> consistent across implementations.

[11:15] *** rurban1 left
[11:15] <camelia> rakudo-parrot 1d6acc, rakudo-jvm 1d6acc, rakudo-moar 1d6acc, niecza v24-109-g48a8de3: OUTPUT«｢｣␤␤»

[11:15] <FROGGS> rn: my regex t { \s+ <(foo|bar)> }; say "    bar" ~~ / <t>+ /

[11:15] <masak> I'm feeling we're missing something.

[11:15] <camelia> rakudo-parrot 1d6acc, rakudo-jvm 1d6acc, rakudo-moar 1d6acc, niecza v24-109-g48a8de3: OUTPUT«｢bar｣␤ t => ｢bar｣␤␤»

[11:16] <FROGGS> rn: my regex t { <(foo|bar)> }; say "bar" ~~ / <t>? /

[11:16] <camelia> rakudo-parrot 1d6acc, rakudo-jvm 1d6acc, rakudo-moar 1d6acc, niecza v24-109-g48a8de3: OUTPUT«｢bar｣␤ t => ｢bar｣␤␤»

[11:16] <FROGGS> rn: my token t { \s+ <(foo|bar)> }; say "        bar" ~~ / <t>? /

[11:16] <camelia> rakudo-parrot 1d6acc, rakudo-jvm 1d6acc, rakudo-moar 1d6acc, niecza v24-109-g48a8de3: OUTPUT«｢｣␤␤»

[11:17] <FROGGS> I dunno

[11:17] <FROGGS> rn: my token t { \s+ }; say "        bar" ~~ / <t>? /

[11:17] <camelia> rakudo-parrot 1d6acc, rakudo-jvm 1d6acc, rakudo-moar 1d6acc, niecza v24-109-g48a8de3: OUTPUT«｢        ｣␤ t => ｢        ｣␤␤»

[11:17] <FROGGS> at least that makes sense to me :o)

[11:18] <masak> then please explain it to me :)

[11:18] <masak> rn: my token t { \s+ <(foo|bar)> }; say "        bar" ~~ / <t>? /

[11:18] <camelia> rakudo-parrot 1d6acc, rakudo-jvm 1d6acc, rakudo-moar 1d6acc, niecza v24-109-g48a8de3: OUTPUT«｢｣␤␤»

[11:18] <masak> in the above, why isn't 'bar' captured?

[11:19] *** tgt left
[11:19] <FROGGS> rn: my token t { \s+ (foo|bar) }; say "        bar" ~~ / <t>? /

[11:19] <camelia> rakudo-parrot 1d6acc, rakudo-jvm 1d6acc, rakudo-moar 1d6acc, niecza v24-109-g48a8de3: OUTPUT«｢        bar｣␤ t => ｢        bar｣␤  0 => ｢bar｣␤␤»

[11:19] * masak is thinking how this relates to https://github.com/perl6/specs/commit/4128913f2b0c02386066a591ffbb933fb4260f43

[11:20] *** sqirrel_ left
[11:21] <FROGGS> rn: my token t { \s+ <(foo|bar) }; say "        bar" ~~ / <t>? /

[11:21] <camelia> rakudo-parrot 1d6acc, rakudo-jvm 1d6acc, rakudo-moar 1d6acc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Malformed regex␤at /tmp/tmpfile:1␤------> [32mmy token t { \s+ <(foo|bar[33m⏏[31m) }; say "        bar" ~~ / <t>? /[0m␤    expecting an…»

[11:21] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unable to parse regex; couldn't find right brace at /tmp/tmpfile line 1:␤------> [32mmy token t { \s+ <(foo|bar[33m⏏[31m) }; say "        bar" ~~ / <t>? /[0m␤␤Parse failed␤␤»

[11:21] <FROGGS> rn: my token t { \s+ <((foo|bar) }; say "        bar" ~~ / <t>? /

[11:21] <camelia> rakudo-parrot 1d6acc, rakudo-jvm 1d6acc, rakudo-moar 1d6acc, niecza v24-109-g48a8de3: OUTPUT«｢        bar｣␤ t => ｢bar｣␤  0 => ｢bar｣␤␤»

[11:22] <FROGGS> rn: my token t { \s+ <((foo|bar))> }; say "        bar" ~~ / <t>? /

[11:22] <camelia> rakudo-parrot 1d6acc, rakudo-jvm 1d6acc, rakudo-moar 1d6acc, niecza v24-109-g48a8de3: OUTPUT«｢        bar｣␤ t => ｢bar｣␤  0 => ｢bar｣␤␤»

[11:22] <FROGGS> interesting

[11:23] <FROGGS> rn: my token t { \s+ <(foo|bar)> }; say "        bar" ~~ / <t>? /; say $/.perl

[11:23] <camelia> rakudo-parrot 1d6acc, rakudo-moar 1d6acc: OUTPUT«｢｣␤␤Match.new(orig => "        bar", from => 0, to => 0, ast => Any, list => ().list, hash => EnumMap.new())␤»

[11:23] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«｢｣␤␤#<match from(0) to(0) text() pos([].list) named({}.hash)>␤»

[11:23] <camelia> ..rakudo-jvm 1d6acc: OUTPUT«｢｣␤␤Match.new(to => 0, hash => EnumMap.new(), ast => Any, list => ().list, orig => "        bar", from => 0)␤»

[11:23] <masak> niecza is wrong there. <( and )> are supposed to be independent.

[11:24] <FROGGS> but <( is a thing on its own

[11:24] <FROGGS> so <(foo) is invalid

[11:24] <masak> ah, troo.

[11:25] <masak> anyway, I think there was a bug in there, but I'm too fuzzy-headed to analyze it.

[11:25] <FROGGS> yeah, me too

[11:29] *** tgt joined
[11:30] <daniel-s_> perl6: say 'hi'

[11:30] <camelia> rakudo-parrot 1d6acc, rakudo-jvm 1d6acc, rakudo-moar 1d6acc, niecza v24-109-g48a8de3: OUTPUT«hi␤»

[11:31] <daniel-s_> :-)

[11:32] *** jnap joined
[11:32] <FROGGS> hi daniel-s_ 

[11:32] <daniel-s_> Hey

[11:33] <daniel-s_> I figure, camelia is always reliable about saying hi... even if it's only because she's running the code that tells her to do it.

[11:34] *** tgt left
[11:36] *** jnap left
[11:36] <masak> oh hai daniel-s_ 

[11:37] <masak> some of us humans are fairly reliable too ;)

[11:37] <masak> albeit admittedly less so

[11:37] <smash> TimToady: huh?! ah, that wasn't for me, roger

[11:41] *** daniel-s_ left
[11:42] *** daniel-s_ joined
[11:43] <Ulti> [Coke] what did you get up to re. bioperl people?

[11:44] <Ulti> last time I spoke to them they said they weren't going to push for bioperl6 yet but would get back to me

[11:58] *** tgt joined
[12:02] *** tgt left
[12:10] *** atroxaper joined
[12:13] *** beastd joined
[12:22] *** tgt joined
[12:27] * masak , for perhaps the first time ever, uses TDD purely to map out a domain

[12:31] *** darutoko- joined
[12:32] *** jnap joined
[12:33] *** darutoko left
[12:37] *** jnap left
[12:38] <timotimo> hm, it would appear that's one of its strengths, no?

[12:38] <masak> yes, it is.

[12:38] <masak> but I usually do it mainly to implement something.

[12:38] <masak> here I do it simply to *understand* what the domain *is*.

[12:38] <masak> as in, I primarily expect the TDD process to *tell* me things.

[12:38] <masak> (and it does)

[12:38] <timotimo> as in "what is the exact size and shape of the domain"?

[12:39] <masak> more like "how the heck does the domain work"

[12:39] <masak> note, "domain" as in "problem domain", not as in "domain of a function".

[12:39] <timotimo> that's what i thought, too

[12:41] *** zacts left
[12:47] * lizmat is off to FOSDEM

[12:47] <lizmat> see you there or be square  :-)

[12:47] *** lizmat left
[12:48] * masak .oO( □ )

[12:48] <moritz> .oO( is that square fair? )

[12:48] * FROGGS is now known as froggsbob nottherepants

[12:54] *** kaare_ left
[13:03] * colomon is a well-known square

[13:07] *** kaare_ joined
[13:15] *** tgt left
[13:15] *** tgt joined
[13:19] *** ajr joined
[13:20] *** ajr is now known as Guest47646

[13:20] *** Guest47646 is now known as ajr_

[13:25] *** denis_boyun joined
[13:28] *** kaleem left
[13:29] *** Ven joined
[13:30] *** tgt left
[13:33] *** jnap joined
[13:38] *** jnap left
[13:40] *** tgt joined
[13:40] *** kbaker joined
[13:42] <Ven> Hi ! I wanted to know if there was a "special variable" that contains the (lexically scoped) current loop iteration (like in awk)

[13:44] <masak> Ven: no, we usually do @array.kv for that

[13:45] <masak> p: my @array = <A B C D>; for @array.kv -> $i, $val { say "On index $i we have $val" }

[13:45] <camelia> rakudo-parrot 1a44ca: OUTPUT«On index 0 we have A␤On index 1 we have B␤On index 2 we have C␤On index 3 we have D␤»

[13:46] <masak> the "key" in an array is simply the index, as if it were a (non-sparse) Int-keyed hash.

[13:48] <masak> it's a nicer solution, in my opinion. a hidden special variable would affect everyone's performance, not just those who used the feature.

[13:49] *** woolfy1 left
[13:50] * moritz brings up the sufficiently smart compiler straw-man

[13:51] <Ven> "a SSC would statically determine that the variable isn't used and not generate it" ?

[13:51] <moritz> yes

[13:52] <masak> yes, sure.

[13:52] <masak> but even considering that, there's something to be said for being explicit.

[13:52] <moritz> but we still hate special variables enough to reduce their number, not increase it

[13:52] <moritz> it's down to 4

[13:52] <masak> if someone really liked the idea of a special variable, they could module it.

[13:52] <moritz> ... with a macro

[13:52] * moritz ducks

[13:52] <masak> ooh, that's a nice example.

[13:53] <masak> yes, because they'd essentially be creating their own for loop, so it's legit.

[13:53] <masak> moritz++

[13:56] <moritz> "rebaes linearizes history" # 3 words

[13:56] <moritz> one of them missspelled

[13:58] <masak> ww?

[13:59] <moritz> yes

[14:01] *** telex left
[14:01] <[Coke]> Ulti: nothing happened, I am just in that channel. no substantial discussion.

[14:02] *** telex joined
[14:04] *** tgt left
[14:05] *** denis_boyun left
[14:09] <[Coke]> I did hear that a lot of people doing bio in perl5 are rolling their own instead of using BioPerl.

[14:09] <[Coke]> (because NIH, not for good reasons)

[14:09] <moritz> because perl is so expressive, that in the beginning it's less of a hurdle to roll something on your own

[14:10] <moritz> instead of reading docs, and finding the stuff in the first place

[14:10] *** kaare_ left
[14:10] <moritz> and getting acquainted with the module author's terminology

[14:12] <masak> indeed.

[14:12] <masak> just because there's a module out there doesn't mean it's the right fit for everyone.

[14:13] *** faceblaster joined
[14:14] *** tgt joined
[14:17] <ajr_> In a field close the experimental edge, the terminology might not have settled down to the point that people discussing the same subject would recognise the fact.

[14:17] <moritz> most bioperl tasks don't seem to apply to that

[14:17] <ajr_> (Not to mention professional competition generating a struggle over definitions.

[14:24] *** SamuraiJack left
[14:24] *** SamuraiJack joined
[14:25] *** bjz left
[14:25] *** bjz joined
[14:29] <Ven> mmh, `class` syntax is a new perl6-feature, right ? It's kinda hard to google things sometimes haha, I got onto Moo's page

[14:30] <[Coke]> if you're looking for perl6 docs, the advent calendar, doc.perl6.org and perlcabal.org/syn are good places to poke about.

[14:30] <[Coke]> (plus also the roast test suite)

[14:30] <[Coke]> (but to navigate that, you need the ../syn)

[14:31] * [Coke] hasn't done moo programming in a loooong time.

[14:31] <Ven> [Coke]: yeah, that's there I navigate, roast test suite + github finder usually brings good result. I have doc.perl6 and perlcabal open and I get often on the advent calendar. (is it up-to-date with new standarts etc?)

[14:32] <moritz> yes, 'class' syntax is a new feature in Perl 6

[14:33] * geekosaur is somewhat amused, considering that if you follow Moo backwards you end up back here

[14:34] *** jnap joined
[14:35] *** SamuraiJack left
[14:37] <masak> geekosaur: I'm so old on this channel, I remember when stevan_++ was active around here, cooking up Moose. :)

[14:37] <geekosaur> yep :)

[14:37] <masak> Ven: the advent calendar is up-to-date, except in very rare cases.

[14:37] <masak> Ven: if you think you've found such a case, we're interested to hear about it.

[14:38] * [Coke] is reminded that we have some roast tests for older advents, butnot newere.

[14:38] *** tgt left
[14:38] <[Coke]> *but not newer

[14:39] *** jnap left
[14:47] <Ven> moritz: what are the "4 special variables" still left ? Do you still count $^ variables ? $\d, $`, $' etc ?

[14:47] <moritz> Ven: there are $`, $' etc. variables in Perl 6

[14:47] <moritz> Ven: $!, $_, $/ and $¢

[14:47] <moritz> the latter one is usually only used inside the regex engine

[14:49] <Ven> uuh. :D

[14:50] <moritz> sorry

[14:50] <moritz> there are *no* $`, $' etc. variables in Perl 6

[14:50] <moritz> missed that one, unimportant word

[14:50] <masak> those two are simply attributes on $/ these days.

[14:50] <masak> forgotten what exactly...

[14:51] <masak> I just remember there was quite some discussion over the names :)

[14:51] <FROGGS> $¢ might be $/.CURSOR

[14:51] <moritz> $/.prematch and $/.postmatch iirc

[14:52] <FROGGS> ahh, these

[14:52] <moritz> m: 'abcdef' ~~ /c/; say $/.prematch

[14:52] <camelia> rakudo-moar 1a44ca: OUTPUT«ab␤»

[14:52] <Ven> very interesting :)

[14:52] <FROGGS> p: 'abcdef' ~~ /c/; say $`

[14:52] <camelia> rakudo-parrot 1a44ca: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/i5f432KmM2␤Unsupported use of $` variable; in Perl 6 please use explicit pattern before <(␤at /tmp/i5f432KmM2:1␤------> [32m'abcdef' ~~ /c/; say [33m⏏[31m$`[0m␤    expecting any of:…»

[14:52] <masak> right .prematch and .postmatch -- moritz++

[14:52] <FROGGS> std: $'

[14:52] <camelia> std 09dda5b: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of $'variable; in Perl 6 please use explicit pattern after )> at /tmp/W9f_2P1c5X line 1:␤------> [32m$'[33m⏏[31m<EOL>[0m␤Parse failed␤FAILED 00:01 121m␤»

[14:53] <masak> Ven: Perl 6 is very thought-through. it is extremely earnest in trying to improve on and fix Perl 5.

[14:55] <FROGGS> and I try to get all the nice P5 things back :o)

[14:55] <Ven> masak: I'm afraid the only knowledge of perl is a IRC bot I did when I was 12 ;). Coming to perl 6 directly without experience from perl 5 (except some snippets I've read here and there)

[14:55] <tadzik> ok, time for Star release :)

[14:55] <Ven> But sometimes I think it's a hard and steep choice to do (like python did)

[14:56] <masak> Ven: you are right.

[14:56] <masak> Ven: and there's a long way for Perl 6 to go still.

[14:56] <masak> Ven: what you see here is a group of enthusiasts who really believe in the idea, and carry it forward day by day.

[14:56] <moritz> and the python step from 2 to 3 isn't nearly as steep as p5 to p6

[14:57] <masak> and yet people seem embittered and disappointed even by Python's small step.

[14:59] <dalek> star: 9ed36f1 | tadzik++ | tools/star/release-guide.pod:

[14:59] <dalek> star: Fix release guide

[14:59] <dalek> star: 

[14:59] <dalek> star: git submodule sync doesn't have a --force option

[14:59] <dalek> star: review: https://github.com/rakudo/star/commit/9ed36f160d

[14:59] <masak> Ven: I think the best way to approach Perl 6 is with a curiosity of what's possible. Perl 5 is awesome, but it has some known limitations. Perl 6 is all about thinking bigger and further than that, and to create a language which transcends Perl 5 while still remaining Perl.

[15:00] *** skids left
[15:00] <moritz> tadzik: oh, 'git submodule update' has the --force option

[15:00] <masak> Ven: if that ends up sounding interesting, feel free to use Perl 6. if it sounds *very* interesting, feel free to get involved. :>

[15:00] <tadzik> moritz: not here

[15:00] <moritz> git 1.7.9.5

[15:00] <tadzik> oh, update

[15:00] <Ven> masak: definitely why I approached it

[15:00] <tadzik> should it be 'update --force' then?

[15:01] <masak> Ven: \o/

[15:01] <masak> Ven: let me know if I can be of some assistance. I was once where you are right now.

[15:02] <masak> Ven: experience tells is that newcomers/volunteers have the best change of being helpful/useful by (a) doing what they like and (b) asking questions freely.

[15:03] <Ven> masak: seems like a lot of fun. also used an altJS with a perl-like syntax, so several things feel home. I'm also interested in a lot of programming languages (generally), so generally I just think "oh that's like X in language Y", which helps a lot. But there are a *lot* of features. Read 4 synapses yet, I'll get some as PDFs.

[15:04] <FROGGS> Ven: it feels like as if you belong to us :o)

[15:04] *** btyler joined
[15:05] <moritz> you have been 6ieted. Resistance is normal.

[15:06] *** treehug88 joined
[15:07] <TimToady> r: my regex foo { \w+ }; say "ohh?" ~~ / <foo> /

[15:07] *** tgt joined
[15:07] <Ven> One thing for sure, this community's reputation isnt stolen

[15:07] <camelia> rakudo-parrot 1a44ca, rakudo-jvm 1a44ca, rakudo-moar 1a44ca: OUTPUT«｢ohh｣␤ foo => ｢ohh｣␤␤»

[15:07] <TimToady> masak: don't need the & either

[15:07] <TimToady> unless you want to force it to not mean a grammar rule, but here it's not ambiguous in any case

[15:08] *** jnap joined
[15:08] <FROGGS> just ooc, are dynamic subs specced? like &*foo?

[15:08] <dalek> star: 35aca2d | tadzik++ | tools/star/Makefile:

[15:08] <dalek> star: Update Makefile for 2014.01

[15:08] <dalek> star: review: https://github.com/rakudo/star/commit/35aca2dd19

[15:08] <dalek> star: ebaa7e5 | tadzik++ | docs/announce/2014.01.md:

[15:08] <dalek> star: Add the new release announcement

[15:08] <dalek> star: review: https://github.com/rakudo/star/commit/ebaa7e541b

[15:08] <tadzik> proofreading will be welcome

[15:08] <FROGGS> not that I'd need it, just wanted to know

[15:08] *** thou joined
[15:09] <TimToady> well, you have to call it using &*foo()

[15:09] <FROGGS> yes yes

[15:09] <FROGGS> I am aware of that

[15:09] <TimToady> to me it just falls out of everything else; dunno if it's specced

[15:09] <FROGGS> p: my &*foo = sub { 42 }; &*foo()

[15:09] <camelia> rakudo-parrot 1a44ca: ( no output )

[15:09] <FROGGS> p: my &*foo = sub { 42 }; say &*foo()

[15:09] <camelia> rakudo-parrot 1a44ca: OUTPUT«42␤»

[15:10] <FROGGS> mkay

[15:10] <FROGGS> (fall out)++

[15:10] <moritz> tadzik: I've skimmed it, looks good

[15:10] <tadzik> moritz: thank you

[15:10] <TimToady> in S06 it has things like &*saith($next_id);   # print the lexical $next_id;

[15:10] <dalek> star: 9f13743 | tadzik++ | / (2 files):

[15:10] <dalek> star: Update version numbers

[15:10] <dalek> star: review: https://github.com/rakudo/star/commit/9f137438b1

[15:11] *** raiph joined
[15:12] *** tgt left
[15:12] <TimToady> oh, I see you discovered the lack of need for &, nevermind :)

[15:12] * TimToady never knows whether to respond to the backlog now, or later after he's forgotten to...

[15:12] <FROGGS> hehe

[15:12] <FROGGS> better now than never

[15:12] <moritz> redundant replies don't hurt.

[15:13] <FROGGS> except when they do

[15:13] * FROGGS .oO( just wanted to say a Toadism )

[15:13] <timotimo> hi Ven 

[15:13] <timotimo> what does "this community's reputation isn't stolen" mean?

[15:13] <TimToady> the problem is, if your pride takes a hit point, and it was already negative, you start taking the absolute value as a source of pride

[15:14] <TimToady> (re redundant replies)

[15:14] <tadzik> urgh, my star doesn't like my ICU, it seems

[15:15] <tadzik> auto::icu -           Is ICU installed...error: icushared not defined

[15:15] <tadzik> does that ring a bell?

[15:15] <tadzik> I also had to give it --icuheaders so it'd find them

[15:15] <FROGGS> tadzik: you've got the /usr/include/unicode symlink?

[15:15] <FROGGS> ahh, hmmm

[15:15] <tadzik> FROGGS: I don't think so

[15:16] <timotimo> tadzik++ # star release 2014.01

[15:16] <tadzik> FROGGS: but adding it helpde

[15:16] <tadzik> might be worth telling people that 

[15:16] <tadzik> I'll check if it's in the readme

[15:17] *** tgt joined
[15:17] <TimToady> I do think a lot of our community's reputation was stolen at the beginning, but all new communities do that...

[15:17] <timotimo> i don't know what "stolen" means in this context

[15:17] <TimToady> not earned, I suspect

[15:17] <timotimo> oh, of course

[15:17] *** kaleem joined
[15:18] <TimToady> at the start, Perl 6 was riding on the Perl 5 community's reputation, for instance

[15:18] <timotimo> geekosaur is somewhat amused, considering that if you follow Moo backwards you end up back here  --  is that because Moo backwards reads OOM and that's what perl6 tends to do for bigger programs? :P

[15:18] <moritz> :-)

[15:18] <timotimo> Ven: btw, i've come from python directly to perl6 and i'm quite happy here

[15:18] <TimToady> and Perl 1 was riding on a whole heap of borrowed Unix memes

[15:18] <moritz> timotimo++

[15:18] <TimToady> not to mention Henry Spencer's regex engine :)

[15:19] <dalek> star: c2982ee | tadzik++ | README:

[15:19] <dalek> star: Note potential Parrot ICU problems in the README

[15:19] <dalek> star: review: https://github.com/rakudo/star/commit/c2982ee34a

[15:19] <timotimo> next month's rakudo star may be the first rakudo jvm star and i'm very excited about that possibility

[15:20] <masak> TimToady: re "stolen at the beginning" -- I disagree, to the extent that au++ single-handedly bootstrapped a community around Pugs.

[15:20] <tadzik> in the long run it would be nice to have fixed on Parrot side

[15:20] <moritz> masak: afiact Perl 6 started way before au++ was involved

[15:21] <masak> oh, of course.

[15:21] <moritz> sadly I wasn't there

[15:21] <masak> me neither.

[15:21] <masak> but up until Pugs, it was basically the Perl 5 and/or Parrot community building Perl 6.

[15:21] <moritz> masak: when did you join, roughly?

[15:21] <raiph> re perl6 advent bitrot: http://perlmonks.org/?node_id=1067940

[15:21] <TimToady> well, au borrowed heavily from Haskell culture at that point too :)

[15:21] *** tgt left
[15:21] <moritz> for me it must have been in 2006 or 2007

[15:22] <masak> moritz: I was aware of Perl 6 already sometime around 2003-2004. I was reading apocalypses in 2004. I joined the #perl6 channel in 2005.

[15:22] <TimToady> and certainly we've been avoiding success at all costs since then :)

[15:22] <moritz> the first rakudo commit mentioning me is from 2008

[15:22] *** REPLeffect left
[15:22] <masak> TimToady: was gonna say. people self-identified as "lambdacamels"; half Perlers, half Haskellers.

[15:23] <moritz> first mu patch mentioned me in 207-02

[15:23] <TimToady> wow, that was a long time ago :P

[15:23] <moritz> erm

[15:23] <moritz> 2007-02 :-)

[15:23] <tadzik> :D

[15:23] <moritz> and first roast patches in 2008-01

[15:25] <FROGGS> I started recognizing Perl 6 at the YAPC in frankfurt 2012 :o)

[15:25] <FROGGS> (and fell in love)

[15:26] *** atroxaper left
[15:26] <TimToady> you probably had heatstroke

[15:26] *** atroxaper joined
[15:27] *** aindilis joined
[15:28] <masak> that would explain the warm feelings

[15:28] <PerlJam> http://blogs.perl.org/users/damian_conway/2014/01/back-to-zurich.html

[15:29] <PerlJam> I see Damian will be giving an intro to perl6 course.

[15:29] *** daniel-s_ left
[15:29] <PerlJam> Maybe that will garner some new contributors :)

[15:31] *** kaleem left
[15:31] <FROGGS> well, my projects before involved hacking threaded stuff in xs (SDL game library), and so the talk about parrot's threads by seven++ where kinde sweet :o)

[15:32] <FROGGS> I either had ignored Perl 6 before or I have missed its existence for other reasons

[15:35] *** denis_boyun joined
[15:43] *** denis_boyun left
[15:43] <dalek> rakudo-star-daily: 064a2c7 | coke++ | log/ (5 files):

[15:43] <dalek> rakudo-star-daily: today (automated commit)

[15:43] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/064a2c78a4

[15:44] <[Coke]> lots of failures. :(

[15:45] <moritz> :(

[15:47] <[Coke]> panda, lwp-simple, dbiish... json?

[15:47] *** census joined
[15:47] <timotimo> how did that happen?

[15:47] <[Coke]> I just report 'em.

[15:48] <timotimo> ah

[15:48] <timotimo> yeah, we changed make

[15:48] <timotimo> to not automatically itemize any more

[15:48] <moritz> oh dammit

[15:48] <moritz> that'll break json

[15:49] <[Coke]> note: i'm testing with the latest rakudo, not the last rakudo-compiler tag.

[15:49] <timotimo> http://irclog.perlgeek.de/perl6/2014-01-31#i_8202738

[15:50] <[Coke]> so perhaps this doesn't matter for the star release.

[15:50] <moritz> likely not

[15:50] <timotimo> it doesn't, luckily

[15:50] * moritz builds a parrot again

[15:51] <Ven> timotimo: Sorry, just got back. That's a french phrase I tried to translate, what I meant is that you didn't usurp your reputation, if that makes more sense. ya'all are nice and fun folks

[15:51] <Ven> (also hi and thanks for the help yesterday :P)

[15:51] <timotimo> that's a part of what kept me here :P

[15:51] *** dmol left
[15:52] <PerlJam> Ven: #perl6 was founded on fun :)

[15:52] <tadzik> uhh, it doesn't seem like modules got updated in the star release I prepared

[15:52] <tadzik> json, Bailador and others still warn about EVAL

[15:52] <timotimo> ah, you were vendethiel yesterday?

[15:52] <tadzik> while it was clearly fixed recently

[15:52] <timotimo> tadzik: i personally recommend "git submodule foreach gitk --all"

[15:53] <timotimo> er, actually

[15:53] <timotimo> "git submodule foreach git fetch\; gitk --all"

[15:53] <timotimo> or ... some kind of quoting or something?

[15:53] <timotimo> that'll give you a gui that shows where the checkout is, what's available, and you can right-click on any of the commits and select "check out this commit"

[15:53] <tadzik> but well, at least the old ones all work :)

[15:53] *** kbaker left
[15:54] <FROGGS> hoelzro: ping

[15:54] <FROGGS> hoelzro: I palyed around with your openpipe... and I was wondering if using the macros from procops.c would help

[15:54] <FROGGS> hoelzro: so the result is this, which even seems to work: https://gist.github.com/FROGGS/998bacca7b3d3abab644

[15:54] <FROGGS> palyed*

[15:54] <FROGGS> played*

[15:54] <FROGGS> -.-

[15:56] <tadzik> ah, the instructions are RONG agian

[15:56] <FROGGS> aww, not agian

[15:56] <timotimo> toldya its tyop day!

[15:57] <FROGGS> \o{

[15:58] <dalek> star: f269c3f | tadzik++ | modules/ (11 files):

[15:58] <dalek> star: Update modules, all but MIME::Base64

[15:58] <dalek> star: review: https://github.com/rakudo/star/commit/f269c3f473

[15:58] <dalek> star: 89ae451 | tadzik++ | tools/star/release-guide.pod:

[15:58] <dalek> star: Fix release guide to not tell releaser to rollback module updates

[15:58] <dalek> star: review: https://github.com/rakudo/star/commit/89ae4517f8

[15:58] *** Psyche^ joined
[16:01] <tadzik> I think I need to take a break and go buy some foods :o

[16:02] *** faceblaster left
[16:02] *** Psyche^_ left
[16:13] *** panchiniak joined
[16:13] *** FROGGS left
[16:13] *** kbaker joined
[16:16] <dalek> specs: fcaf02c | larry++ | S05-regex.pod:

[16:16] <dalek> specs: make uses parcel semantics

[16:16] <dalek> specs: review: https://github.com/perl6/specs/commit/fcaf02c2cf

[16:17] <tadzik> http://rakudo.org/downloads/star/rakudo-star-2014.01.tar.gz is out!

[16:17] <moritz> tadzik++

[16:17] <TimToady> \o/

[16:17] <moritz> it has escaped!

[16:17] <tadzik> I'll quickly go and grab something to eat; I'll post all the announcements after the shoptrip :)

[16:18] <tadzik> so there's still time to find a critical bug that'll make me crazy :P

[16:18] <tadzik> shop &

[16:23] <TimToady> testing

[16:23] <TimToady> (on Linux Mint)

[16:23] *** [Sno] left
[16:28] <moritz> I have pushed a json fix; it should not even break on old rakudo

[16:29] *** jeffreykegler joined
[16:29] <timotimo> i expected as much

[16:30] <timotimo> but i also expect some more breakage to show up in the smoker

[16:36] <[Coke]> moritz++ tadzik++ TimToady++

[16:40] <TimToady> I am very glad we found this one before 6.0.0 :)

[16:40] <[Coke]> is there a test?

[16:40] <TimToady> not yet

[16:40] <TimToady> but it's specced now :)

[16:41] <[Coke]> not without a test it's not. :P

[16:41] * TimToady hopes at some point some minions will go through the specs and figure out what doesn't have a test yet :P

[16:41] <[Coke]> you've only synned. :)

[16:42] <tadzik> . o O ( without a test it's snot )

[16:42] <timotimo> got some good noms, tadzik? :)

[16:42] <tadzik> TimToady: does it seem to work well?

[16:42] <tadzik> timotimo: yeah :)

[16:42] <timotimo> yay

[16:42] <tadzik> timotimo: also, it's so freezing that I think I'll design a plan to always have a 2-weeks-worth of food at home

[16:42] <tadzik> canned or whatever

[16:43] <TimToady> tadzik: you mean the 'make' parcel patch?

[16:43] <tadzik> TimToady: um, I mean the new star :)

[16:43] <TimToady> it spectested before I pushed it

[16:44] <timotimo> hah

[16:44] <timotimo> i hope the weather will nicen up soon :)

[16:44] <TimToady> it seems to have finished 'make install' successfully

[16:45] <tadzik> okay

[16:45] <tadzik> I'll send out the good enws

[16:46] <tadzik> not sure if I have wordpress' http://rakudo.org/ account tho

[16:46] <TimToady> trying a make modules-test

[16:48] *** kaleem joined
[16:49] <tadzik> moritz: do you have a writeaccess to rakudo.org?

[16:50] <TimToady> passes modules-test

[16:51] *** panchiniak left
[16:51] <PerlJam> tadzik: do you need an invite?

[16:52] *** FROGGS[mobile] joined
[16:52] <stevan_> masak: I am so old in this channel I remember when masak++ first arrived ;)

[16:53] <tadzik> PerlJam: I think so

[16:55] <vendethiel> timotimo: yes, that's me :P

[16:56] <dalek> star: a48e619 | tadzik++ | tools/star/release-guide.pod:

[16:56] <dalek> star: Update release guide

[16:56] <dalek> star: review: https://github.com/rakudo/star/commit/a48e619755

[16:56] *** FROGGS[mobile]2 joined
[16:58] <tadzik> ok, now http://rakudo.org/2014/01/31/rakudo-star-2014-01-released/ is out too :)

[16:59] *** FROGGS[mobile] left
[17:00] <[Coke]> Much of synopsis 9/11

[17:01] <timotimo> =o

[17:02] * masak .oO( never forget )

[17:02] <[Coke]> m: say 9/11

[17:02] <camelia> rakudo-moar 1a44ca: OUTPUT«0.818182␤»

[17:02] *** rindolf left
[17:03] *** rindolf joined
[17:03] <tadzik> .oO( miecza )

[17:04] <diakopter> m: say e - 2

[17:04] <camelia> rakudo-moar 1a44ca: OUTPUT«0.718281828459046␤»

[17:04] <diakopter> m: say e - 1.9

[17:04] <camelia> rakudo-moar 1a44ca: OUTPUT«0.818281828459046␤»

[17:06] <tadzik> m: say e - (9/11 + 1)

[17:06] <camelia> rakudo-moar 1a44ca: OUTPUT«0.900100010277227␤»

[17:06] <tadzik> m: say e - (9/11 + 1.9)

[17:06] <camelia> rakudo-moar 1a44ca: OUTPUT«0.00010001027722728␤»

[17:07] *** panchiniak joined
[17:07] <timotimo> m: say chr(0b0_000100010)

[17:07] <camelia> rakudo-moar 1a44ca: OUTPUT«"␤»

[17:07] <PerlJam> Who does the R* MSIs typically?

[17:07] *** kaleem left
[17:08] *** rindolf left
[17:08] <FROGGS[mobile]2> I am able to

[17:08] *** rindolf joined
[17:09] <PerlJam> The last one appears to be from September 2013.  It would be nice to have one for the first R* of the new year.

[17:10] <tadzik> any volunteers for Star 2014.02, or should I pick one? :>

[17:10] <FROGGS[mobile]2> I think I can do that this weekend

[17:10] <tadzik> thanks FROGGS[mobile]2!

[17:10] <tadzik> :P

[17:10] <FROGGS[mobile]2> nooooo!!!!

[17:10] <FROGGS[mobile]2> >.<

[17:11] <tadzik> that'd be a daily R* release

[17:12] <timotimo> :D

[17:15] *** beastd left
[17:16] *** skids joined
[17:18] *** denisboyun joined
[17:30] *** ajr_ left
[17:33] *** zakharyas left
[17:34] *** denisboyun left
[17:37] *** Vlavv_ left
[17:39] *** erkan left
[17:42] *** atroxaper left
[17:45] <TimToady> the current http://rosettacode.org/wiki/Brace_expansion#Perl_6 solution makes the Haskell solution look rather cluttered :)

[17:45] *** denisboyun joined
[17:49] *** Vlavv_ joined
[17:49] <moritz> TimToady++

[17:50] <moritz> though the use of try is a bit hacky :-)

[17:50] <diakopter> rosettacode-driven idiom/language design

[17:50] *** grondilu joined
[17:51] <grondilu> perl6: say ++(my$ ) Ror 2

[17:51] <camelia> niecza v24-109-g48a8de3: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤This macro cannot be used as a function at /tmp/tmpfile line 1:␤------> [32msay ++(my$ ) Ror[33m⏏[31m 2[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1502…»

[17:51] <camelia> ..rakudo-parrot 1a44ca, rakudo-jvm 1a44ca, rakudo-moar 1a44ca: OUTPUT«1␤»

[17:51] <TimToady> well, hey, Haskell uses try :)

[17:52] * grondilu was expecting 2

[17:52] <TimToady> besides, the whole brace substitution meme is hacky in the first place :)

[17:54] <TimToady> in this case, the try saves the redundancy of evaluating $<meta><alts> twice, and makes it read better, so I judged it to be worth it

[17:54] *** denisboyun left
[17:54] <timotimo> TimToady: what's the try needed for, ooc?

[17:55] <TimToady> was just noticing that it works without the try too :)

[17:55] <moritz> \o/

[17:55] <timotimo> ah, ok

[17:55] <TimToady> since it cascades Nil, I presume, even through the »

[17:56] <TimToady> anyway, seems to work

[17:56] <timotimo> i wonder, can we ».?&crosswalk

[17:57] *** SamuraiJack joined
[17:57] <TimToady> what, you think crosswalk might not be defined?  :P

[17:57] <timotimo> er ... hah

[17:58] <TimToady> I can see some use for ».?&*dynasub

[17:58] <timotimo> :D

[17:58] <TimToady> but I'll be surprised if that parses currently

[17:58] <TimToady> maybe it will

[17:58] <timotimo> here we go again with the line noise :)

[17:58] <FROGGS[mobile]2> *g*

[17:58] <FROGGS[mobile]2> feels home

[18:00] <TimToady> okay, try removed, and now it really is quite pretty

[18:01] *** dmol joined
[18:04] *** FROGGS joined
[18:06] *** bjz left
[18:06] *** bjz joined
[18:07] *** benabik joined
[18:09] *** [Sno] joined
[18:10] *** tgt joined
[18:11] <PerlJam> reading the description for brace expansion ... "$<meta> is likewise short for $/<meta>" while entirely true, saying it's "short for" when it's only one character seems weird.  :)

[18:16] *** arnsholt left
[18:16] *** arnsholt joined
[18:17] *** ajr joined
[18:17] <grondilu> TimToady: have you tried using || instead of | in the grammar in order enforce resolution order?

[18:17] *** ajr is now known as Guest5682

[18:18] *** Guest5682 is now known as ajr_

[18:18] <TimToady> I decided I don't care if it does LTM instead in this case

[18:18] <TimToady> in fact, probably does the 2nd bracket matcher first

[18:19] <TimToady> but it gets a pretty quick reject if there's something in the middle

[18:20] <TimToady> also, need to propagate the LTMs to the other rules so | works right there; if I put || into meta, I'd have to put || everywhere

[18:21] <TimToady> with LTM I don't actualy have to try meta if the dfa won't match, it goes straight to the . (in TOP)

[18:22] <TimToady> well, nfa, but yeah

[18:23] *** panchiniak left
[18:23] *** kivutar joined
[18:23] <lue> TimToady: I'm going to hazard a guess and say that code I plan on putting on RC probably shouldn't bother using ANSI colors to make things prettier :)

[18:24] <TimToady> .oO(A character here, a character there, pretty soon you're talking real bloat.)

[18:28] *** SamuraiJack left
[18:28] *** denisboyun joined
[18:29] <TimToady> I wanna test the Haskell version, but I've forgotten how to download Text.Parsec (have ghc)

[18:29] <TimToady> oh wait, aptitude found it

[18:30] <geekosaur> normally you'd want to install haskell-platform but ubuntu broke it

[18:30] <diakopter> it's a conspiracy.

[18:31] *** jeffreykegler1 joined
[18:31] *** rindolf left
[18:32] *** berekuk joined
[18:32] *** rindolf joined
[18:32] *** darutoko- left
[18:32] *** berekuk left
[18:32] *** berekuk joined
[18:32] *** jeffreykegler left
[18:33] *** denisboyun left
[18:37] *** rindolf left
[18:38] *** rindolf joined
[18:40] *** arnsholt left
[18:41] *** jeffreykegler joined
[18:41] *** vendethiel left
[18:42] *** rindolf left
[18:43] *** Alina-malina left
[18:43] *** rindolf joined
[18:43] *** jeffreykegler1 left
[18:44] *** Alina-malina joined
[18:49] *** erkan joined
[18:52] *** arnsholt joined
[18:56] *** rindolf left
[18:56] *** rindolf joined
[18:57] *** arnsholt left
[19:00] *** denisboyun joined
[19:08] *** arnsholt joined
[19:10] *** zakharyas joined
[19:10] *** rindolf left
[19:11] *** rindolf joined
[19:12] *** arnsholt left
[19:15] *** erkan left
[19:17] *** rindolf left
[19:18] *** rindolf joined
[19:18] *** araujo joined
[19:18] *** jeffreykegler left
[19:20] *** araujo left
[19:24] *** arnsholt joined
[19:33] *** smls joined
[19:35] *** census left
[19:37] *** jeffreykegler joined
[19:38] *** jeffreykegler left
[19:43] *** jeffreykegler joined
[19:43] *** jeffreykegler left
[19:47] *** arnsholt left
[19:48] *** tgt left
[19:49] *** tgt joined
[19:50] *** rindolf left
[19:51] *** arnsholt joined
[19:51] <raiph> 10 python idioms: https://news.ycombinator.com/item?id=7151433

[19:52] *** bluescreen10 joined
[19:53] <PerlJam> raiph: btw, thanks for fighting the good fight on perlmonks 

[19:55] <timotimo> PerlJam, raiph, was that about the post on the advent calendar uptodateness?

[19:57] *** arnsholt left
[19:57] <PerlJam> timotimo: well, the original was about "Perl 7", but yeah.

[19:58] <timotimo> i remember seeing that

[19:58] <timotimo> that was pretty good, indeed

[19:58] <timotimo> i kind of thought the reply by the anonymous monk was kind of lackluster

[19:58] <timotimo> but oh well.

[19:59] *** arnsholt joined
[19:59] <PerlJam> Sometimes I think "Just ignore the anonymonk"  but then I think "It's good that the anonymonk wasn't ignored because others might think his word true"

[19:59] <PerlJam> (but I tend to ignore anonymonks anyway because I don't frequent perlmonks much these days :)

[20:00] * lue has never really been to perlmonks, barring the occasional passing-by.

[20:00] <timotimo> i was refering to the anomonk that answered raiphs stuff

[20:01] <timotimo> i don't think that person understood the concept of the advent calendar; although it would probably be a good idea to put a short snippet of text in a colored box on top of every advent calendar post if there's something outdated in it and explain (as exactly as seems prudent) what's the new status

[20:03] <PerlJam> aye.

[20:04] <lue> timotimo: and/or a general site-wide disclaimer at the top of each page saying "Posts are contemporaneous, not current." :)

[20:04] <timotimo> right.

[20:05] <timotimo> but that does seem like an LTA to me

[20:05] <lue> timotimo: it's one of those "It should be obvious" things

[20:05] * lue likes how  make -j3  in the nqp repo builds all three nqps at once :D

[20:05] *** arnsholt left
[20:05] <timotimo> that's very enjoyable, indeed

[20:05] <PerlJam> I think the anonymonk's point was that "Perl 6 isn't usable because the language isn't stable (enough)" or something.

[20:06] * timotimo re-reads

[20:06] <lue> Could I have a link to this thing we're discussing? :)

[20:06] <timotimo> http://perlmonks.org/?node_id=1067940

[20:06] <lue> danke

[20:06] <timotimo> okay, i don't think i actually know what that anonymonk referred to with "a significant portion of the important documentation you keep claiming that people will be working on in 2013"

[20:08] *** pdcawley left
[20:09] <PerlJam> I think that was a mistake.  The anonymonk conflated the Synopses with the Advent articles.  (that's just my guess anyway)

[20:09] <timotimo> wow, that'd cause a pretty grave misunderstanding

[20:09] <[Coke]> no change in rakudo/moar log files on daily roast.

[20:09] <timotimo> "these crazy fools are only working on the specification on 24 days in the whole year!"

[20:10] *** tgt left
[20:10] <lue> timotimo: that "sig portion of imp. doc" thing is likely in response to "I'm not currently willing to go thru all 100+ articles."

[20:11] *** tgt joined
[20:11] * [Coke] points at https://github.com/perl6/roast/tree/master/integration //advent*

[20:12] <[Coke]> we have at least partial coverage in the test suite for 2009&2010

[20:12] <lue> As far as I can tell, Perl 7 is an idea by people who want a shiny new major version on their favorite language, but are peeved that the next major version of a language is taking so long :)

[20:12] <[Coke]> LHF to add the rest (and we probably should)

[20:13] *** kaare_ joined
[20:13] <PerlJam> [Coke]++

[20:13] <[Coke]> but: If I go ahead and do that (which needs doing) that will not satsify anonymonk.

[20:13] <[Coke]> so anyone who does it, do it because it's right, not because he's wrong.

[20:13] * PerlJam cares not for anonymonk's desires

[20:13] <lue> [Coke]: my senses tell me anonymonk does not want to be satisfied.

[20:13] <FROGGS> [Coke]: pretty much nothing satisfies haters

[20:14] <FROGGS> just go on and deliver an awesome product

[20:14] <[Coke]> FROGGS: exactly.

[20:14] * [Coke] sets up some quests for the various advent stuff.

[20:16] <timotimo> lue: Anonymonk is probably in THERE IS SOMEONE WRONG ON THE INTERNET mode

[20:16] * [Coke] hurls http://questhub.io/player/coke

[20:16] <lue> timotimo: agreed

[20:16] <[Coke]> feel free to join in any of those.

[20:16] <timotimo> some stuff to +1 \o/

[20:16] <masak> 'night, #perl6

[20:16] <[Coke]> +1 ALL MY THINGS!

[20:17] <timotimo> FWIW, i looked through a bunch of advent calendar posts for testable code to copypaste and came up with not much

[20:17] <[Coke]> *\[oo]/

[20:17] <timotimo> i'd say whoever goes with that will have to do a more thorough reading and thinking than i did :)

[20:17] <lue> [Coke]: should advent tests be contemporaneous or current? (e.g. leave eval($stuff) or change to EVAL($stuff))

[20:17] <[Coke]> I had a bunch of code in 2013 that's testable.

[20:17] <[Coke]> lue: IMO, the code in the article should be updated to match current code.

[20:18] <[Coke]> that's a lot of work, which is why it isn't done. (ditto RC code)

[20:19] <[Coke]> but we shoudl either update the article in situ, or at least have a box at the top saying something like "This article displays an older style of code. <link to roast tests showing current style>"

[20:19] <lue> [Coke]: by "RC code" you mean "script that downloads all completed tasks from RC one-by-one and tests them", right?

[20:20] <lue> I think updated articles should update code + a box somewhere detailing the changes.

[20:20] <PerlJam> lue: +!

[20:20] <PerlJam> er, +1

[20:20] <[Coke]> lue: something like that. ingy has work in that direction. also see integration/rose* in roast.

[20:21] * moritz turns 2013 day 02 into tests

[20:21] <[Coke]> moritz++

[20:21] <[Coke]> sweet, now I get credit for doing less work! ;)

[20:21] <lue> .oO(We clearly need gitblog for our advent posts, so we don't have to NIH changelogs)

[20:21] <PerlJam> day 24 is going to be a little harder to turn into a test :)

[20:21] <FROGGS> is somebody willing to test this? http://froggs.de/perl6/rakudo-star-2014.01-RC0.msi

[20:21] <FROGGS> e.g., test panda

[20:22] <colomon> isn't it released already?

[20:22] <FROGGS> colomon: not the msi :o)

[20:22] <lue> colomon: the MSI is specifically released "sometime after the main release"

[20:22] <FROGGS> colomon: it is the compiled version for windows

[20:23] <[Coke]> FROGGS++ trying now.

[20:23] <FROGGS> awesome!

[20:23] <FROGGS> [Coke]: thank you

[20:23] <[Coke]> (don't tell anyone I have a sometimes win box)

[20:23] <timotimo> i'd like to see the test that verifies "Clever dogs can do up to 10 words a minute, with surprisingly few typos." :P

[20:23] <FROGGS> *g*

[20:23] <[Coke]> I'd love for us to get a publisher cert.

[20:23] <FROGGS> yeah

[20:23] * colomon is also downloading it

[20:23] <dalek> roast: 1ff6d63 | moritz++ | integration/advent2013-02.t:

[20:23] <dalek> roast: turn advent 2013 day 02 into a test

[20:23] <dalek> roast: review: https://github.com/perl6/roast/commit/1ff6d633e5

[20:24] <lue> Rakudo doesn't do the same "all three rakudos at once with -j3" though :(

[20:24] <moritz> lue: it doesn't?

[20:24] <lue> oh, nevermind, I just wasn't patient enough for when it starts :)

[20:24] <FROGGS> lue: my does

[20:24] <FROGGS> hehe

[20:24] <FROGGS> lue: yeah, you have to wait for parrot kicking in :o)

[20:25] <[Coke]> FROGGS: installed it, C:\rakudo\bin\perl6.exe seems to work ok.

[20:25] <FROGGS> cool, I hope the repl and panda is fine... then we can ship it

[20:25] <lue> Well, it wavers between "3 jvm", "all three", and "2 jvm + 1 parrot" for me

[20:25] <PerlJam> Can we fudge tests for just one rakudo implementation?

[20:25] <FROGGS> PerlJam: yes

[20:25] <moritz> yes

[20:25] <lue> PerlJam: rakudo.parrot (etc.)

[20:25] <moritz> #?rakudo.parrot 'OH NOEZ'

[20:25] <FROGGS> #?rakudo.jvm skip

[20:25] <PerlJam> nice.

[20:26] <FROGGS> or todo or emit...

[20:26] <raiph> timotimo: the anonymonk in question is almost certainly educated_{f,p}oo

[20:26] <[Coke]> panda fails here, but EFIREWALL

[20:26] <FROGGS> hmmm

[20:26] <[Coke]> moritz++ is missing a todo or skip there.

[20:27] <moritz> aye

[20:27] <timotimo> raiph: well, if he aint got any other hobbies, let's share a moment of silence for his pitiful existence ...

[20:27] <raiph> timotimo: he's a dedicated and unreasonable P6 troll

[20:27] <[Coke]> FROGGS: but the REPL and the command line seem fine.

[20:27] *** vendethiel joined
[20:27] <lue> Funny thing, I still don't care about the troll :)

[20:27] <FROGGS> [Coke]++ # thank you very much

[20:27] <[Coke]> r: say [*] 2..1000000

[20:28] <[Coke]> ^^ returns 0 on win7

[20:28] <FROGGS> panda seems to work here

[20:28] *** denisboyun left
[20:28] <camelia> rakudo-parrot 1a44ca, rakudo-jvm 1a44ca, rakudo-moar 1a44ca: OUTPUT«(timeout)»

[20:28] <raiph> lue: right, I try (and generally succeed I think) in following au++to go with

[20:28] * [Coke] wonders if http://questhub.io/realm/perl/quest/511a56703a5ec3060700005f is worth doing these days - is there another smolder-alike that doesn't have the maintenance issues smolder does?

[20:29] <lue> raiph: what does au say on the matter?

[20:29] <colomon> can confirm I get working REPL on * 2014.1 on Windows Vista

[20:29] *** treehug88 left
[20:29] <raiph> lue: hug trolls: answer the substance, acknowledge any authentic feelings, ignore the rest

[20:29] <FROGGS> colomon++ # thanks for testing

[20:30] <colomon> FROGGS: trying to use it to install ABC module at the moment.

[20:31] <FROGGS> moritz: can you please upload http://froggs.de/perl6/rakudo-star-2014.01-RC0.msi with s/-RC0// ?

[20:31] <FROGGS> Please pre-compile C:\rakudo\.work\1391200250_1\lib/ABC/Header.pm

[20:31] <FROGGS> build stage failed for ABC: Failed building lib\ABC\Actions.pm

[20:32] *** cooper_ joined
[20:32] *** arnsholt joined
[20:33] *** treehug88 joined
[20:34] <tadzik> my dream: when rakudo says "Please pre-compile", it's followed by "because I tried to do it myself and failed"

[20:35] <FROGGS> tadzik: I want to implement proper cache invalidation some day...

[20:36] <FROGGS> tadzik: I've made the msi btw

[20:36] <tadzik> FROGGS: that's awesome :)

[20:36] <tadzik> it's like windows is almost a first-class citizen

[20:36] <FROGGS> *g*

[20:38] <raiph> http://perlmonks.org/?node_id=1072014 # chromatic "secretly" "publicly" aplogogizes to educated_

[20:38] <PerlJam> FROGGS: When you put it on rakudo.org, add a short article that says it's there with a link to it.

[20:38] <colomon> FROGGS: ABC installation via panda failed, I suspect because the perl6 command is not in the path

[20:38] <colomon> is it suppose to be.

[20:38] <FROGGS> PerlJam: I can't upload it, but I can add a link to the post

[20:39] <FROGGS> colomon: it is in my path

[20:39] <FROGGS> panda does not get the deps right for some reason

[20:39] <colomon> give me a moment

[20:39] *** cooper_ is now known as cooper

[20:39] *** cooper left
[20:39] *** cooper joined
[20:39] <tadzik> oh!

[20:40] <dalek> roast: 90ed0c3 | moritz++ | integration/advent2013-04.t:

[20:40] <dalek> roast: Add tests for advent 2013 day 04 (incomplete)

[20:40] <dalek> roast: review: https://github.com/perl6/roast/commit/90ed0c37e8

[20:40] <PerlJam> FROGGS: let me know the URL of the final MSI and I'll upload it to rakudo.org

[20:41] <FROGGS> PerlJam: that is the final IMO

[20:41] <FROGGS> http://froggs.de/perl6/rakudo-star-2014.01-RC0.msi with the -RC0 stripped

[20:41] <PerlJam> okay.

[20:42] <FROGGS> because I can't fix panda and/or ABC in a reasonable timeframe

[20:42] <dalek> rakudo/nom: 8ea845b | moritz++ | t/spectest.data:

[20:42] <dalek> rakudo/nom: run new advent tests

[20:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8ea845b0ad

[20:43] <PerlJam> FROGGS: uploaded.  See http://rakudo.org/downloads/star/

[20:43] <FROGGS> PerlJam++ # :o)

[20:44] *** psch joined
[20:44] *** arnsholt left
[20:44] <psch> hi #perl6

[20:44] <PerlJam> hello psch 

[20:45] *** arnsholt joined
[20:46] <dalek> roast: dacd397 | moritz++ | integration/advent2013-06.t:

[20:46] <dalek> roast: Add test for advent 2013 day 06

[20:46] <dalek> roast: review: https://github.com/perl6/roast/commit/dacd397c51

[20:47] <dalek> rakudo/nom: 2f948dd | moritz++ | t/spectest.data:

[20:47] <dalek> rakudo/nom: run another advent test

[20:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2f948dd371

[20:48] *** rindolf joined
[20:50] *** arnsholt left
[20:50] *** arnsholt joined
[20:50] <dalek> roast: a78a516 | (Pepe Schwarz)++ | S32-exceptions/misc.t:

[20:50] <dalek> roast: Added test for RT #98854

[20:50] <dalek> roast: review: https://github.com/perl6/roast/commit/a78a516609

[20:50] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=98854

[20:52] <colomon> FROGGS: I don't see any sign that c:\rakudo\bin has been added to my oath

[20:52] <colomon> path

[20:53] <colomon> (obviously I can do it manually….)

[20:53] <FROGGS> ohh, I might have done that in the past

[20:54] *** kbaker left
[20:57] <hoelzro> FROGGS: nice, I like it!

[20:57] <hoelzro> I had just started to look at procops =/

[20:57] <hoelzro> tadzik++ # release

[20:57] <FROGGS> hoelzro: cool!

[20:57] <colomon> tadzik++

[20:57] <colomon> # indeed

[20:58] <FROGGS> hoelzro: though the output of "perl6-p -e 'use v5; say `ls`'" and "perl6-m -e 'use v5; say `ls`'" looks a bit different

[20:58] <FROGGS> maybe perl6-p's openpipe does not spawn a shell?

[20:58] <hoelzro> try echo $$

[20:59] <FROGGS> an btw, I did no test except v5 stuff so far

[20:59] <hoelzro> ok

[20:59] <psch> lines 135ff in S14-roles/parameterized-basic.t look like they kinda-sorta test for RT #84492. can someone explain what's different if there is anything?

[20:59] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=84492

[20:59] <hoelzro> I'm hoping to finish it up at FOSDEM

[21:00] <FROGGS> hoelzro: I get the pid on both backends

[21:00] <FROGGS> hmmm, then I dunno why `ls` displays in column on parrot but not on moar

[21:01] <hoelzro> hmm

[21:01] <hoelzro> well

[21:01] <hoelzro> ls will columnize in a tty

[21:02] *** arnsholt left
[21:04] <clsn> r: my \φ; say "alive"

[21:04] <camelia> rakudo-moar 1a44ca: OUTPUT«===SORRY!===␤Cannot find method 'ast'␤»

[21:04] <camelia> ..rakudo-parrot 1a44ca, rakudo-jvm 1a44ca: OUTPUT«===SORRY!===␤No such method 'ast' for invocant of type 'NQPMu'␤»

[21:04] <dalek> perl6-roast-data: 45afbfa | coke++ | / (3 files):

[21:04] <dalek> perl6-roast-data: today (automated commit)

[21:04] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/45afbfa869

[21:04] <clsn> Hm, when I tried earlier it worked for moar and jvm, but failed for parrot.

[21:04] <FROGGS> clsn: huh

[21:05] <clsn> Maybe I'm wrong; moar just SEGVd when I tried it now.

[21:05] <[Coke]> looks like additionally, moar has a LTA LTA error.

[21:05] <[Coke]> (those 3 errors should be identical)

[21:06] <lue> somehow, the +x on perl6-debug-m wasn't carried over when I did 'make install'

[21:07] <clsn> huh, I thought it worked for me for -j and -m before... Guess not.

[21:07] *** zakharyas left
[21:07] <FROGGS> $<term_init> in token declarator is null

[21:10] *** havenwood joined
[21:11] * FROGGS tries a fix

[21:13] *** arnsholt joined
[21:13] <FROGGS> r: my \φ

[21:13] <camelia> rakudo-moar 1a44ca: OUTPUT«===SORRY!===␤Cannot find method 'ast'␤»

[21:13] <camelia> ..rakudo-parrot 1a44ca, rakudo-jvm 1a44ca: OUTPUT«===SORRY!===␤No such method 'ast' for invocant of type 'NQPMu'␤»

[21:13] <FROGGS> r: my \φ = 7

[21:13] <camelia> rakudo-parrot 1a44ca, rakudo-jvm 1a44ca, rakudo-moar 1a44ca: ( no output )

[21:13] * FROGGS scratches his head

[21:13] *** DarthGandalf left
[21:13] <clsn> Oh right, maybe I was trying it with a value...

[21:13] <FROGGS> std: my \φ

[21:13] <camelia> std 09dda5b: OUTPUT«[31m===[0mSORRY![31m===[0m␤Term definition requires an initializer at /tmp/Zn96AjnSG9 line 1 (EOF):␤------> [32mmy \φ[33m⏏[31m<EOL>[0m␤Check failed␤FAILED 00:01 121m␤»

[21:15] <clsn> Yeah, I guess all looks well... I could have sworn I was getting weird errors from parrot...

[21:15] <FROGGS> still weird that it does not complain about the missing initializer

[21:16] <clsn> And I was getting different behavior for my \x vs my \φ, that was the cool thing.... Wonder what I was doing differently.

[21:17] <lue> $ ./bootstrap.pl

[21:17] <lue> ==> Bootstrapping Panda

[21:17] <lue> Cannot call 'postcircumfix:<{ }>'; none of these signatures match:

[21:17] <lue> Anyone else get this?

[21:19] <dalek> rakudo/nom: d5f7c71 | (Tobias Leich)++ | src/Perl6/Grammar.nqp:

[21:19] <dalek> rakudo/nom: need to panic now!

[21:19] <dalek> rakudo/nom: 

[21:19] <dalek> rakudo/nom: Otherwise it would continue and complain about missing method NQPMu.ast because of lacking $<term_init>.

[21:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d5f7c71dbb

[21:19] <FROGGS> clsn++

[21:20] <moritz> FROGGS++

[21:20] <clsn> moritz++

[21:20] * moritz isn't a big fan of continuing to parse after errors

[21:21] <FROGGS> well, it *is* nice to get a list of error, like "unknown sub foo used in line 223, 448 and 976"

[21:21] <FROGGS> because you can fix all in one go

[21:21] <timotimo> agreed. as long as there are no BEGIN blocks in between :P

[21:22] <moritz> FROGGS: aye. But I can also fix them all in one go by using the search function in my editor

[21:22] <lue> I am I the only one getting that random "cannot call postcircumfix" error with panda?

[21:23] <FROGGS> lue: possible, and I don't even use panda O.o

[21:23] *** DarthGandalf joined
[21:25] <lue> r: class Foo { }; say Foo ~~ Any

[21:25] <camelia> rakudo-parrot 1a44ca, rakudo-jvm 1a44ca, rakudo-moar 1a44ca: OUTPUT«True␤»

[21:25] <clsn> r: my @all=(1...*); my @ones:=(1,@all) Z- @all; say @ones[^10]

[21:25] <camelia> rakudo-parrot 1a44ca, rakudo-jvm 1a44ca, rakudo-moar 1a44ca: OUTPUT«0 -1 -1 -1 -1 -1 -1 -1 -1 -1␤»

[21:26] <clsn> r: my @all=(1...*); my @ones=(1,@all) Z- @all; say @ones[^10]

[21:26] <clsn> But it's Bad if you don't use :=.  Which indicates that I don't really understand = vs :=.

[21:26] <camelia> rakudo-parrot 1a44ca, rakudo-jvm 1a44ca, rakudo-moar 1a44ca: OUTPUT«(timeout)»

[21:27] <timotimo> using = with a list on the LHS will eagerly assign

[21:28] <timotimo> := replaces the listy thing with the lazy thing

[21:28] <clsn> Apparently.  And I guess := doesn't project eagerness.

[21:28] <timotimo> rather than asking the lazy thing to fill up the listy thing

[21:28] <clsn> Can only use := in declarations though, right?  as in my @foo :=... not with things already declared.

[21:29] <timotimo> nope. you can do := as often as you want

[21:29] <timotimo> NQP only has :=, no = at all

[21:30] <dalek> rakudo/nom: aa72afa | moritz++ | CREDITS:

[21:30] <dalek> rakudo/nom: fix typo in credits

[21:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aa72afaf36

[21:30] <clsn> I knew that about NQP.  Yes, I just tried out and see what you mean about :=.  Once again, I was misled by REPL weirdness, since I do most of my tinkering in the REPL.  The REPL won't let you use := most places.

[21:30] <timotimo> yeah, the repl is usually trouble :(

[21:31] <clsn> Yeah, I'm starting to understand that.  I really need to test out anything anomalous non-REPLly more carefully.

[21:34] <timotimo> yes :(

[21:34] <timotimo> i've started using a vim buffer and having a :!perl6 % on hand

[21:34] *** raiph left
[21:34] <PerlJam> timotimo: do you map that to one of the function keys or type it out by hand each time?

[21:36] <timotimo> neither

[21:36] <timotimo> i type :!<Up>

[21:36] <timotimo> well, actually i usually type :w<CR>:!<Up>

[21:36] <timotimo> which is pretty bad as far as huffmanization goes :)

[21:39] <grondilu> TimToady: trying to do brace-expansion with a simpler grammar.  Doesn't quite work yet, but works for a few examples at least.   https://gist.github.com/grondilu/8743717

[21:41] *** rurban1 joined
[21:41] <PerlJam> grondilu: did the "redundancy" in the original grammar inspire you?  :)

[21:42] <grondilu> not sure what you mean

[21:42] <diakopter> repetition of the < >

[21:42] <diakopter> er <[ ]>

[21:44] <grondilu> well, there are definitely a few things I don't like in the current entry.  It's great that we have something that works, but the logic behind it is hard to grasp, imho.

[21:44] *** arnsholt left
[21:44] <grondilu> I really have the feeling it's possible to write something more elegant.

[21:45] <grondilu> (thus my modest attempt)

[21:45] *** arnsholt joined
[21:45] <diakopter> grondilu: well, idiomacy trades off with elegance..

[21:46] *** smls left
[21:46] <diakopter> sometimes.

[21:48] <timotimo> since i can't decide between organisation and organization, i'll write organißation

[21:48] <clsn> TIL: (just now, really)  It's faster to say sub blah($a, $b) { if $a > $b ... else ... } than it is to say multi sub blah($a, $b where $a>b) { ...} and multi sub blah($a, $b) { ... }.

[21:48] <clsn> i.e. it executes faster.

[21:48] <timotimo> get it? because ß is "sz"

[21:49] <FROGGS> Missing test file: t/spec/integration/advent2013-day02.t

[21:49] <FROGGS> Missing test file: t/spec/integration/advent2013-day04.t

[21:49] <FROGGS> Missing test file: t/spec/integration/advent2013-day06.t

[21:49] <FROGGS> the files don't have a "day" in their names

[21:49] <colomon> clsn: yes, definitely

[21:49] <FROGGS> moritz: ^^

[21:50] <clsn> Makes sense.  But it had to be experimented with.

[21:50] <lue> That panda error in more detail ==> https://gist.github.com/lue/1029c4d379bb8143b8f3

[21:54] <dalek> rakudo/nom: 257e61a | moritz++ | t/spectest.data:

[21:54] <dalek> rakudo/nom: fix file names, FROGGS++

[21:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/257e61a0ef

[21:54] <moritz> I shouldn't hack this late in the week anymore

[21:56] <timotimo> ... but it's friday?

[21:56] <timotimo> friday night isn't in the week :)

[21:56] *** rindolf left
[21:56] <moritz> well, that's the problem, aint it? :-)

[21:56] *** rindolf joined
[21:57] *** treehug88 left
[22:02] *** benabik left
[22:06] *** smls joined
[22:10] *** berekuk left
[22:13] <smls> moritz: re "continuing to parse after errors", why not do it like Perl: Continue parsing, but stop at the first thing that's not safe after an error.

[22:14] <smls> --> "line 5: Error X; line 17: Error Y; line 33: BEGIN not safe after errors; aborting."

[22:17] *** BenGoldberg joined
[22:17] <vendethiel> is this good ?

[22:17] <vendethiel> subset FilledArray of Array where *.elems > 0;

[22:19] <tadzik> why don't you try it out? :)

[22:21] <[Coke]> can we pick a consistant way to name the advent files?

[22:21] <vendethiel> tadzik: yeah that works but I'm looking for a way to convert an Array to FilledArray

[22:21] <[Coke]> (rather than some day, some not?)

[22:21] <vendethiel> I tried .FilledArray, FilledArray([1,2])

[22:22] <[Coke]> if no objections, I'll unify them later this even.

[22:23] <smls> vendethiel: I don't think subsets are types that you can instantiate, but merely meant as restrictions for parameters/attributes

[22:23] <vendethiel> smls: ah, okay :). thanks !

[22:23] <smls> r: subset FilledArray of Array where *.elems > 0; sub foo (FilledArray $x) { say $x }; foo [1, 2]; foo []    # like this

[22:24] <camelia> rakudo-parrot 2f948d, rakudo-jvm 2f948d, rakudo-moar 2f948d: OUTPUT«1 2␤Constraint type check failed for parameter '$x'␤  in sub foo at /tmp/tmpfile:1␤  in block  at /tmp/tmpfile:1␤␤»

[22:24] <smls> I'm new to Perl 6 as well, though :)

[22:25] <vendethiel> smls: thanks

[22:26] *** arnsholt left
[22:29] *** mcglk joined
[22:38] *** btyler left
[22:47] *** FROGGS[mobile]2 left
[22:48] *** FROGGS[mobile] joined
[22:54] *** arnsholt joined
[22:56] *** kaiz joined
[22:57] *** kaiz left
[22:58] *** grondilu left
[22:58] *** dmol left
[22:58] *** tgt left
[23:00] <Ulti> [Coke] yeah the only part of bioperl that I use is the parsers, the more analytical things I don't trust at all

[23:01] <lue> I really have no clue why panda suddenly breaks on postcircumfix:<{ }>  :(

[23:01] <Ulti> which is why Perl6 is neat because a module filled with well tested grammars for different file formats would be really great

[23:12] *** bluescreen10 left
[23:14] *** btyler joined
[23:15] <dalek> roast: 1ccbe07 | coke++ | integration/advent2013- (6 files):

[23:15] <dalek> roast: follow naming convention of other advents.

[23:15] <dalek> roast: review: https://github.com/perl6/roast/commit/1ccbe072c0

[23:15] <vendethiel> is ==>> not implemented yet ?

[23:15] <dalek> rakudo/nom: dc42ad8 | coke++ | t/spectest.data:

[23:15] <dalek> rakudo/nom: track file rename

[23:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dc42ad849c

[23:16] <[Coke]> easy enough to check with the evalbot.

[23:16] <vendethiel> (did not mean "yet", sry)

[23:16] * [Coke] looks up the syntax

[23:16] <vendethiel> r: my @a; 1..2 ==> @a; 3..4 ==>> @a;

[23:16] <camelia> rakudo-parrot 257e61, rakudo-jvm 257e61, rakudo-moar 257e61: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤==>> feed operator not yet implemented. Sorry. ␤at /tmp/tmpfile:1␤------> [32mmy @a; 1..2 ==> @a; 3..4 ==>> @a[33m⏏[31m;[0m␤    expecti…»

[23:16] <vendethiel> oh okay :)

[23:16] <diakopter> n: my @a; 1..2 ==> @a; 3..4 ==>> @a;

[23:16] <camelia> niecza v24-109-g48a8de3: OUTPUT«Unhandled exception: Feed ops NYI␤  at /home/p6eval/niecza/lib/CORE.setting line 1536 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3571 (infix:<==>> @ 4) ␤  at /tmp/_dW_Xtvh9G line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CO…»

[23:17] <[Coke]> there ya go.

[23:17] <[Coke]> vendethiel++

[23:17] <vendethiel> [Coke]++

[23:17] <vendethiel> (now I know where au got this habit of ++'ing people :p

[23:17] *** arnsholt left
[23:18] <[Coke]> ;)

[23:18] *** jeffreykegler joined
[23:18] <TimToady> r: 1..2 ==> my @a; 3..4 ==> @a.push; say @a

[23:18] <camelia> rakudo-parrot 257e61, rakudo-jvm 257e61, rakudo-moar 257e61: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tmpfile␤Sorry, do not know how to handle this case of a feed operator yet.␤at /tmp/tmpfile:1␤------> [32m1..2 ==> my @a; 3..4 ==> @a.push[33m⏏[31m…»

[23:18] <TimToady> r: 1..2 ==> my @a; 3..4 ==> push @a; say @a

[23:18] <camelia> rakudo-parrot 257e61, rakudo-jvm 257e61, rakudo-moar 257e61: OUTPUT«1 2 3 4␤»

[23:18] <TimToady> there ya go

[23:19] <smls> http://www.dlugosz.com/Perl6/web/info-model-TOC.html

[23:19] <smls> ^^ How up-to-date is this?

[23:19] <vendethiel> I don't even understand what ==>> does compared to ==> :P

[23:19] <vendethiel> r: 1..2 ==> my @a; 3..4 ==> @a; say @a

[23:19] <TimToady> it may be a syntax in search of a feature

[23:19] <[Coke]> smls: it says right there :)

[23:19] <camelia> rakudo-parrot 257e61, rakudo-jvm 257e61, rakudo-moar 257e61: OUTPUT«1 2 3 4␤»

[23:19] <vendethiel> r: 1..2 ==> my @a; 3..4 ==> @a; say @a.perl

[23:20] <camelia> rakudo-parrot 257e61, rakudo-jvm 257e61, rakudo-moar 257e61: OUTPUT«Array.new(1, 2, 3, 4)␤»

[23:20] <smls> [Coke]: I mean, does it still apply to today's Rakudo more or less

[23:20] <vendethiel> nah, this is not a LoL. So I'm not sure why it's there

[23:20] <TimToady> vendethiel: we might decide that implicit "push" semantics are  abug

[23:20] <[Coke]> smls: yah, I know, I'm just being snarky.

[23:20] *** Pleiades` left
[23:20] <vendethiel> TimToady: and make my last case [1, 2, [3, 4]] ?

[23:20] <[Coke]> (and I don't know the answer)

[23:21] *** rurban1 left
[23:21] <vendethiel> (==> actually is like F#'s |>, I like it)

[23:21] <TimToady> vendethiel: depends on how we implement it; mind end up just 3,4

[23:22] <TimToady> *might

[23:22] <vendethiel> oh yeah, just overwrite, makes sense !

[23:22] <TimToady> but I shouldn't do design while I'm sick :)

[23:22] <vendethiel> while it could just be `1..2 ==> my @a; 3..4 ==> (@a = [])`, couldn't it ?

[23:23] <vendethiel> to "just end up 3,4". (I don't say that's practical, I'm just asking if how I see evaluation order is correct)

[23:23] <TimToady> we haven't really nailed down the most desired semantics of ==> yet, specwise

[23:23] <TimToady> especially since ==> may end up representing channels

[23:23] <TimToady> and behave even more like Unix pipes that way

[23:23] <vendethiel> TimToady: I see. Does it append to the arglist of the following call, kind of like a macro, or does the right operand's function needs to be curried ?

[23:24] <vendethiel> like 1..2 ==> map({$_ * 2})

[23:24] <TimToady> right, that's the debate :)

[23:24] *** arnsholt joined
[23:24] <TimToady> and to what extent do we recognize different targets at compile time vs run time

[23:24] <vendethiel> not sure I'm getting that last bit

[23:25] <vendethiel> you mean, semantics to decide if it should just call the function or append to arglist ?

[23:25] <TimToady> to what extent to we limit visibility of data structures outside that might need locking or lock-free consideration?

[23:25] <vendethiel> oh, okay.

[23:25] *** Pleiades` joined
[23:25] <TimToady> the original idea was just appending to an arglist

[23:26] <TimToady> the ==>> spec-ese came from groping our way toward inter-thread communication, which jnthn++'s more recent stuff serves as a good basis for

[23:27] <TimToady> so we'll need to revisit whether ==> represents channels, and how we target multiple feeds to the same target

[23:27] <TimToady> and whether push semantics even make sense in that context

[23:27] <TimToady> or whether push semantics are in some sense mandatory

[23:28] <TimToady> also whether we specifically recognize declarations like my @a, or need something around that

[23:29] <TimToady> exactly at what point do we figure out the nature of the function or object that we're passing values to...

[23:30] <TimToady> and what are the optimization tradeoffs for each approach?

[23:30] *** arnsholt left
[23:30] *** arnsholt_ joined
[23:30] <TimToady> I can come up with lots of questions while I'm running a fever, but I'd better not come up with any answers... :)

[23:31] <vendethiel> TimToady: you're still interesting to read tho :)

[23:31] <TimToady> thanks, and welcome to the research project

[23:35] *** ponbiki left
[23:40] <dalek> roast: 2162736 | (Pepe Schwarz)++ | S12-methods/delegation.t:

[23:40] <dalek> roast: Added tests for RT #95514.

[23:40] <dalek> roast: review: https://github.com/perl6/roast/commit/2162736cfe

[23:40] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=95514

[23:41] *** xinming left
[23:42] *** ajr_ left
[23:42] *** xinming joined
[23:42] *** ponbiki joined
[23:43] *** ponbiki is now known as Guest62859

[23:43] *** colomon left
[23:50] *** havenwood left
[23:54] *** arnsholt joined
[23:54] *** arnsholt_ left
[23:55] *** jnap left
[23:58] <dalek> roast: 84c4742 | (Pepe Schwarz)++ | S14-roles/parameterized-type.t:

[23:58] <dalek> roast: Added test for RT #84492.

[23:58] <dalek> roast: review: https://github.com/perl6/roast/commit/84c4742e9c

[23:58] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=84492

[23:59] * psch has run out of things he understands how to write tests for

