[00:09] *** colomon left
[00:11] *** ajr_ left
[00:11] *** atta joined
[00:31] *** bjz_ left
[00:31] *** bjz joined
[00:37] *** jnap left
[00:37] *** pdcawley left
[00:40] *** pdcawley joined
[00:42] *** MrMeek left
[00:45] *** jnap joined
[00:45] *** MrMeek joined
[00:49] *** colomon joined
[01:07] *** rurban left
[01:10] *** rurban joined
[01:12] *** rurban1 joined
[01:15] *** rurban left
[01:17] *** raiph joined
[01:18] *** dwarring left
[01:24] *** FROGGS_ joined
[01:28] *** FROGGS left
[01:29] *** vendethiel left
[01:30] *** vendethiel joined
[01:36] *** thou left
[01:38] *** klapperl joined
[01:41] *** klapperl_ left
[01:47] *** lustlife joined
[01:59] <flussence> I got a bit annoyed by the startup time of bin/perl6 (which turned out to be a copy of perl6-j), and I'm too lazy to type out perl6-{m,p} every time, so I wrote a replacement for it: https://gist.github.com/flussence/9966581

[02:08] *** WJB left
[02:12] *** WJB joined
[02:30] *** xragnar_ joined
[02:30] *** xragnar is now known as Guest71064

[02:30] *** Guest71064 left
[02:30] *** xragnar_ is now known as xragnar

[02:47] *** evstigneev joined
[02:48] <xiaomiao> flussence: interesting hack. Not sure if that makes sense in general - makes reproducing things potentially confusing

[03:02] *** raiph left
[04:02] *** evstigneev left
[04:10] *** subbota joined
[04:12] *** kaare_ joined
[04:13] *** jnap left
[04:18] *** xenoterracide left
[04:22] *** dayangkun left
[04:25] *** [Sno] left
[04:26] *** [Sno] joined
[04:26] *** [Sno] left
[04:27] *** BenGoldberg left
[04:30] *** Psyche^_ joined
[04:34] *** Psyche^ left
[04:35] *** dayangkun joined
[04:43] *** jnap joined
[04:47] *** jnap left
[05:28] *** [Sno] joined
[05:37] *** woosley left
[05:40] <moritz> [Coke]: I'm installing libpcre3-dev on host07; no idea if that has UTF-8 support

[05:40] <yoleaux> 3 Apr 2014 21:29Z <[Coke]> moritz: if we can get a recent pcre on host07 with UTF support to try to fix Pugs. Thanks!

[05:44] *** dayangkun_ joined
[05:48] *** dayangkun left
[05:54] *** WJB left
[05:54] *** denis_boyun joined
[06:03] *** WJB joined
[06:10] *** kaare_ left
[06:15] *** hoverboard left
[06:46] *** kaleem joined
[06:50] *** dmol joined
[06:57] *** subbota left
[07:07] *** darutoko joined
[07:13] <sergot> Hey!

[07:13] <masak> ohayo

[07:13] <sergot> Please help me :)

[07:13] <sergot> http://irclog.perlgeek.de/perl6/2014-04-03#i_8534489

[07:15] *** zakharyas joined
[07:17] *** fhelmberger joined
[07:18] <sergot> got 3 answers so far :)

[07:20] <moritz> sergot: my answer would be the same as FROGGS++'s, except that I'd list "mature concurrency support" as a plus for the JVM

[07:20] <moritz> as well as "interop with java"

[07:20] <sergot> Ok, thanks moritz++ 

[07:20] <sergot> :)

[07:24] <arnsholt> flussence: The perl6 script will be linked to whatever backend you listed first in --backends

[07:25] <arnsholt> So if you prefer Parrot or Moar, just put one of those first

[07:27] <sergot> r: multi sub infix:<->(Str $a, Str $b) { return $a.split($b).join; }; say "abcdbe" - "b";

[07:27] <camelia> rakudo-parrot 972ef0, rakudo-jvm 972ef0, rakudo-moar 972ef0: OUTPUT«acde␤»

[07:27] *** pecastro left
[07:28] <sergot> What do you think about such a built-in sub?

[07:28] <sergot> r: multi sub infix:<->(Str $a, Str $b) { return $a.split($b).join; }; say "abcdbe" - "b" - "a";

[07:28] <camelia> rakudo-parrot 972ef0, rakudo-jvm 972ef0, rakudo-moar 972ef0: OUTPUT«cde␤»

[07:33] *** kaare_ joined
[07:33] <masak> sergot: nice set of questions. I will try to fill it in later :)

[07:33] <masak> &

[07:38] *** denis_boyun left
[07:40] <sergot> masak++: thanks in advance :)

[07:41] <Woodi> hallo everyone

[07:41] <sergot> hi Woodi 

[07:42] <Woodi> sergot: poll is via irc ? :)

[07:43] <Woodi> ah, damn

[07:43] <Woodi> gist have some functionality I was not aware off...

[07:45] <sergot> Woodi: you can comment or fork it or just write here :)

[07:46] *** jnap joined
[07:46] <Woodi> just unforgotting my github pass. they tell me my password is "commonly guessed by hackers"...

[07:48] <xiaomiao> o_O

[07:48] <Woodi> if I brain-random choose subsets of pwgen generated passwords I make better pass or worse ? :)

[07:50] *** jnap left
[07:52] <Woodi> hmm, I see Java is now "run everywhere" ;)

[07:55] <xiaomiao> run faster!

[07:55] <xiaomiao> run away!!1

[08:11] *** virtualsue joined
[08:17] *** rurban1 left
[08:36] *** FROGGS_ left
[08:43] *** sftp_ left
[08:46] *** sftp joined
[08:46] *** jnap joined
[08:47] *** rurban joined
[08:49] *** grondilu joined
[08:50] * grondilu just learnt that microsoft has released C# source code:  http://roslyn.codeplex.com/

[08:50] *** pecastro joined
[08:51] *** jnap left
[08:52] <grondilu> (the compiler I mean)

[08:56] *** rurban left
[09:18] <Woodi> sergot: looks I messed some buttons so  https://gist.github.com/slunski/9970983  answers are

[09:26] <Woodi> grondilu: Netscape and Sun opened some code just before going down...

[09:26] *** hummeleB1 joined
[09:27] <Woodi> but MS case is probably bit different, they plan for mobile market domination. or everywere demination with "fuller" versions of products...

[09:28] <Woodi> would be better companies just develop open source products constantly...

[09:28] <xiaomiao> Woodi: "but how can you profit"

[09:29] <Woodi> by selling hardware of course :)

[09:31] <xiaomiao> hnurgh.

[09:33] <Woodi> by selling _individual_ support maybe ? anyway, by doing hard things and not plain, easy and overpriced... 

[09:34] <xiaomiao> by building good products?

[09:35] <xiaomiao> man, I amuse myself too easily

[09:47] *** jnap joined
[09:52] *** jnap left
[09:52] *** pecastro left
[09:52] <grondilu> Woodi: fwiw, I was mentioning this because I wondered if that could be good news for Perl 6, as maybe some new ideas could be stolen for rakudo.   

[09:54] <timotimo> o/

[09:54] <Woodi> hej

[09:55] <timotimo> i'd love to make a living doing support for companies to use Perl 6 and use "down time" for development :)

[09:57] <Woodi> what rosylyn exactly is ? it is C# 4.0 compiler or something other ?

[09:58] <Woodi> btw. are "assembiles" code compiled for native machine executable packs ?

[09:59] <timotimo> i think assemblies is their name for any packaged bytecode and/or native code, but i'm not sure

[10:04] *** pecastro joined
[10:04] <masak> assemblies are a kind of unit of deployment, IIUC.

[10:05] <timotimo> heyo masak 

[10:05] <timotimo> how's t4 coming along btw? :)

[10:06] <masak> timotimo: my vacation starts today. it's entirely possible that during it, I'll be $dayjob-detoxed enough to turn to t4.

[10:06] <masak> the coming ten days will tell :)

[10:09] <timotimo> ooh

[10:09] <timotimo> i wish you a pleasant vacation, whether or not you end up doing t4 :)

[10:14] <timotimo> now i'm building nqp-moarvm with latest master and then with jnthn-lex-loc to run the benchmarks

[10:14] <timotimo> and, i suppose, i could run them again with moarvm/spesh on top of that

[10:14] <timotimo> since they would hopefully synergize well

[10:14] *** denisboyun joined
[10:15] * grondilu wonders wth is wrong with rosettacode.  It's very rarely online :/

[10:15] <timotimo> #rosettacode is on this network :)

[10:15] * grondilu goes there

[10:26] *** virtualsue left
[10:31] <masak> sergot: https://gist.github.com/sergot/9951466#comment-1205398

[10:36] <sergot> masak: thank you! :)

[10:36] <sergot> Woodi++: thank you too :)

[10:38] <timotimo> stay tuna'd for benchmarks in about half an hour

[10:39] <timotimo> actually, i could also run master-spesh today

[10:39] <timotimo> just to see how spesh+l2l would be more than the sum of its parts

[10:42] <sergot> I've just updated the gist - added something to 3rd question. Will be great if you update your answers - but it is not necessary if you don't have enough time.

[10:44] <timotimo> that's question 2 :)

[10:44] <sergot> Oh, right, I'm sorry, 2nd :)

[10:45] <sergot> thanks timotimo 

[10:48] *** jnap joined
[10:52] *** jnap left
[10:56] *** FROGGS[mobile] joined
[10:56] <timotimo> i'm a dummy sometimes :)

[10:56] <timotimo> just because i named the folder something doesn't mean git automagically read my mind as to what branch to check out

[10:57] <timotimo> and i was wondering why lex-loc + spesh was slower than just lex-loc

[11:02] *** LLamaRider joined
[11:05] *** rindolf joined
[11:09] <timotimo> interesting results.

[11:11] <timotimo> http://t.h8.lv/p6bench/2014-04-03-spesh.html - yesterday's rakudo master vs spesh

[11:12] <timotimo> http://t.h8.lv/p6bench/2014-04-04-lexloc-spesh.html - today's nqp-master vs nqp-lexloc X moar-master vs moar-spesh

[11:13] <timotimo> it's interesting that ll+spesh seems to actually be slower than ll-only for forest-fire

[11:13] <masak> I get 9 failig spectests on an up-to-date Rakudo-Moar.

[11:14] <masak> failing*

[11:14] <timotimo> that seems about right

[11:17] *** colomon left
[11:17] <masak> that seems about 9 steps from right. :)

[11:18] <timotimo> well, it seems like you haven't made it worse somehow in your local setup s'all

[11:20] <timotimo> jnthn: does it discourage you that the work of several weeks (in the form of spesh) seems to give almost no benefit and the work of one evening (in the form of lex-loc) gives a 50% performance boost in the microbenchmark that it most directly impacts? :P

[11:20] <LLamaRider> timotimo: it would be nice to also have the "target" you're aiming for in those plots. E.g. the P5 runtime

[11:21] *** colomon joined
[11:26] *** fhelmberger_ joined
[11:28] *** fhelmberger left
[11:46] *** txt-file joined
[11:49] *** jnap joined
[11:53] *** jnap left
[11:54] *** rurban joined
[11:57] <daxim_> perl6: '|'.quotemeta.say

[11:57] <camelia> rakudo-parrot 972ef0, rakudo-jvm 972ef0, rakudo-moar 972ef0: OUTPUT«No such method 'quotemeta' for invocant of type 'Str'␤  in block  at /tmp/tmpfile:1␤␤»

[11:57] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«Unhandled exception: Unable to resolve method quotemeta in type Str␤  at /tmp/tmpfile line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4595 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4596 (module-CORE @ 576) …»

[11:59] *** rurban left
[12:07] *** pdcawley left
[12:12] <lizmat> daxim_: everything non alphanumeric is meta in Perl 6, afaik

[12:14] <lizmat> there is one specced in S32/Str:259, but there's also the question whether it is needed

[12:15] <[Coke]> sergot: I would agree with moritz++'s modifications to FROGG++'s response.

[12:21] *** benabik left
[12:21] *** xenoterracide joined
[12:35] <sergot> [Coke]++: thanks! :)

[12:35] *** pdcawley joined
[12:37] <[Coke]> sergot: I am also interested in rakudo on jvm because it will give the opportunity (eventually) to deploy perl 6 code in an J2EE-only environment.

[12:37] *** virtualsue joined
[12:37] <[Coke]> *a

[12:39] <daxim_> it is needed for porting code, p5 has quotemeta and \Q, python has re.escape

[12:40] <daxim_> writing the whole time text.replace() like in ecmascript is unattractive

[12:42] <lizmat> daxim_: so, for my understanding, do you need P5 or P6 semantics in .quotemeta?

[12:42] *** SamuraiJack__ joined
[12:42] <lizmat> in other words a .p5quotemeta or .quotemeta

[12:42] <moritz> note that strings don't interpolate as regexes into regexes, but as literals

[12:43] *** mtk joined
[12:43] <moritz> lizmat: I don't think there's much difference; p5 quotemeta escapes everything except word characters and digits

[12:50] *** jnap joined
[12:51] *** kbaker_ joined
[12:51] *** eiro_ joined
[12:54] *** jnap left
[12:55] *** rurban joined
[12:57] *** ajr joined
[12:58] *** ajr is now known as Guest80680

[12:58] *** Guest80680 is now known as ajr_

[12:59] *** eiro_ left
[13:00] *** rurban left
[13:05] *** kbaker_ left
[13:10] *** falk0n joined
[13:10] *** mtk left
[13:11] *** kaleem left
[13:12] *** FROGGS[mobile] left
[13:13] *** FROGGS[mobile] joined
[13:13] *** falk0n left
[13:13] *** mtk joined
[13:18] * lizmat is almost ready to unleash her new winner {} implementation on the world

[13:20] *** kaleem joined
[13:22] *** fhelmberger joined
[13:22] <PerlJam> lizmat: take the leash off!  Let it run wild!  :)

[13:22] *** fhelmberger left
[13:23] <dalek> rakudo/nom: 6768b72 | (Elizabeth Mattijsen)++ | src/core/asyncops.pm:

[13:23] <dalek> rakudo/nom: Re-implement WINNER, support "done @promises"

[13:23] <dalek> rakudo/nom: 

[13:23] <dalek> rakudo/nom: Much of the logic existed twice in the sub, this has now been simplified.  Also,

[13:23] <dalek> rakudo/nom: any parameter sanity tests are now performed *before* looking for a Promise/Channel

[13:23] <dalek> rakudo/nom: so that problems in parameters do not stay hidden if they just did not happen to hit

[13:23] <dalek> rakudo/nom: that case.

[13:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6768b72701

[13:23] <dalek> rakudo/nom: e09c87d | (Elizabeth Mattijsen)++ | src/core/Supply.pm:

[13:23] <dalek> rakudo/nom: Simplify Supply.list, like Channel.list now

[13:23] <dalek> rakudo/nom: 

[13:23] <dalek> rakudo/nom: This seems now possible after the WINNER refactor

[13:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e09c87d1d9

[13:25] *** fhelmberger_ left
[13:25] *** xfix left
[13:26] <timotimo> LLamaRider: f5 to see p5 as well

[13:27] <timotimo> lizmat: thanks for improving WINNER

[13:27] <timotimo> i'm amazed i still have commit access to rakudo and nqp :P

[13:28] <lizmat> timotimo++ for the initial implementation

[13:28] <timotimo> you have pity on me, how nice ;))

[13:28] <lizmat> I couldn't have refactored it without it, nor written it from scratch as easily

[13:31] <PerlJam> timotimo++ lizmat++

[13:32] * PerlJam builds a new rakudo

[13:34] *** xfix joined
[13:46] <LLamaRider> timotimo++ awesome, thanks for adding P5 to that! :)

[13:48] *** kbaker_ joined
[13:49] <LLamaRider> P5 is quite respectable in the benchmark in comparison, some way to go still

[13:49] <LLamaRider> but definitely great visuals 

[13:50] *** jnap joined
[13:54] *** jnap left
[13:55] *** rurban joined
[13:56] *** colomon left
[13:58] *** thou joined
[14:01] *** jnap joined
[14:02] <hoelzro> morning #perl6!

[14:02] <PerlJam> gutentag hoelzro 

[14:05] *** btyler joined
[14:05] *** kaare_ left
[14:05] *** salv0 left
[14:05] <timotimo> LLamaRider: except almost all benchmarks are very poor for comparison's sake

[14:06] *** rindolf left
[14:08] <LLamaRider> how come?

[14:12] *** jnap left
[14:15] <dalek> rakudo/nom: a544f29 | (Elizabeth Mattijsen)++ | src/core/asyncops.pm:

[14:15] <dalek> rakudo/nom: Oops, $:k should contain ordinal, not promise

[14:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a544f2901f

[14:21] *** kaleem left
[14:21] *** falk0n joined
[14:21] <timotimo> LLamaRider: if you look at japhb/perl6-bench on github, you'll see that they really are just microbenchmarks

[14:22] *** salv0 joined
[14:23] *** rindolf joined
[14:24] <timotimo> in fact, they are in the microbenchmarks.pm (or .json?) file

[14:24] <timotimo> the big majority of them

[14:29] *** bluescreen10 joined
[14:33] *** raiph joined
[14:37] <LLamaRider> timotimo: I see. But they are still quite valuable to test the core of the language, so that's fine

[14:37] <LLamaRider> I would even propose adding the super-slow example I found yesterday

[14:38] <LLamaRider> r: (^10000).pick(*).sort;

[14:38] <LLamaRider> P5 gets that done in 0.02 seconds 

[14:38] <camelia> rakudo-parrot 972ef0, rakudo-jvm 972ef0, rakudo-moar 972ef0: OUTPUT«(timeout)»

[14:38] <lizmat> r: ^10000.sort

[14:39] <camelia> rakudo-jvm e09c87: OUTPUT«Error while reading '/home/p6eval_eval/p6eval-token': Permission denied at /home/p6eval/jvm-rakudo/eval-client.pl line 10.␤»

[14:39] <camelia> ..rakudo-parrot e09c87, rakudo-moar e09c87: ( no output )

[14:39] <lizmat> r: ^10000.list.sort

[14:39] <camelia> rakudo-jvm e09c87: OUTPUT«(timeout)»

[14:39] <camelia> ..rakudo-parrot e09c87, rakudo-moar e09c87: ( no output )

[14:39] *** isBEKaml joined
[14:40] *** FROGGS[mobile] left
[14:40] *** treehug88 joined
[14:44] *** fhelmberger joined
[14:45] *** virtualsue left
[14:48] *** FROGGS[mobile] joined
[14:52] *** FROGGS[mobile] left
[14:53] <timotimo> LLamaRider: i would merge a pull request for you :)

[14:53] *** FROGGS[mobile] joined
[14:55] <moritz> eeks, somebody broke rakudo-j again on camelia 

[14:56] <timotimo> if it stays that way until monday, i'll put simplifying the sort function into the LHF of the p6weekly

[14:57] <moritz> j: say 1

[14:57] <camelia> rakudo-jvm e09c87: OUTPUT«(timeout)»

[14:58] *** guru joined
[14:58] *** guru is now known as Guest22852

[14:59] *** ajr_ left
[15:02] *** Guest22852 is now known as ajr_

[15:08] <timotimo> r: my $test; for ^5 -> $OUTER::test { say $test }; say $test;

[15:08] <camelia> rakudo-parrot e09c87, rakudo-jvm e09c87, rakudo-moar e09c87: OUTPUT«===SORRY!=== Error while compiling /tmp/tmpfile␤Malformed parameter␤at /tmp/tmpfile:1␤------> my $test; for ^5 -> $OUTER:⏏:test { say $test }; say $test;␤    expecting …»

[15:09] *** fhelmberger_ joined
[15:11] *** fhelmberger left
[15:21] *** [Sno] left
[15:21] *** kaare_ joined
[15:27] *** isBEKaml left
[15:28] *** fhelmberger_ left
[15:36] *** denisboyun left
[15:40] *** zakharyas left
[15:42] *** jeffreykegler joined
[15:46] <jeffreykegler> I wonder if someone on the list could help me -- recently there circulated what was (I thought) an excellent blog post (web page?) circulated on C language gotchas for those not used to programming at the von Neumann level: having to do your own memory allocation; track your own array bounds; make sure string lengths are correct; etc., etc.  Does anyone remember where that was?

[15:47] *** kbaker_ left
[15:51] <moritz> jeffreykegler: I've read several such guides, mostly links from reddit.com/r/programming

[15:52] <moritz> jeffreykegler: there are several big institutions / companies that publish C coding guides with hints like the ones you mentioned

[15:52] <timotimo> reddit annoys me. once you found something interesting, it's basically gone forever

[15:52] <timotimo> unless you comment

[15:54] <timotimo> or use internet 1.0 style bookmarks

[15:54] <jeffreykegler> moritz: this may have been a reddit thing.  Any suggestions for how/where I might search?

[15:54] <timotimo> forget it, having something on reddit actually removes it from all search engines and indices

[15:54] <timotimo> basically the text might as well never have existed

[15:55] <jeffreykegler> timotimo: I know of many alternatives, but the particular one I have in mind was especially good, and I'd like to find it again ...

[15:55] <moritz> jeffreykegler: http://stackoverflow.com/questions/4780873/secure-c-coding-practices#4781724

[15:55] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=4781724

[15:55] <jeffreykegler> unfortunately my memory these days is as much of a sieve as reddit appears to be

[15:56] <moritz> jeffreykegler: http://www.reddit.com/r/programming/search?q=coding+c&restrict_sr=on&sort=relevance&t=all

[16:00] *** jeffreykegler1 joined
[16:01] <jeffreykegler1> This was not security-focused -- it was aimed at someone who could reasonably call himself a programming expert, but was not fully aware of the pitfalls of programming down to the metal.

[16:01] *** jeffreykegler left
[16:01] * jeffreykegler1 has a flaky internet connection and is apologetic about popping in and out

[16:03] <geekosaur> find a friendly vps provider and set up a znc. does wonders for me

[16:04] <timotimo> a bnc?

[16:04] <timotimo> weechat in a screen session works very well

[16:04] <timotimo> i imagine a tmux session would be even nicer

[16:05] <btyler> jeffreykegler: was it "ctraps": http://www.literateprogramming.com/ctraps.pdf ?

[16:06] <jeffreykegler1> btyler: another excellent resource, but not the specific one.

[16:06] <jeffreykegler1> Anyway, I didn't give you guys much to go on,

[16:07] <jeffreykegler1> and was hoping to get lucky anyway, so I perhaps should accept that the link has moved on into an alternative universe.

[16:11] <jeffreykegler1> I did look follow up on all the links, and just didn't find it.  Thanks for trying!!

[16:14] <segomos> irssi+screen wins

[16:15] *** pecastro left
[16:16] <timotimo> screen is so last century

[16:16] <timotimo> and weechat has convinced me 100% that it's more awesome than irssi :P

[16:16] *** xenoterracide left
[16:17] <Woodi> I tried two timesto use tmux but screen keybinds are perfect :) 

[16:21] <dalek> rakudo-star-daily: f45aea1 | coke++ | log/ (5 files):

[16:21] <dalek> rakudo-star-daily: today (automated commit)

[16:21] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/f45aea1d0b

[16:21] <Woodi> btw. for me we are still at Web 1.xx until it is fully Semantic or with _data_ separated from implementation :) scrapping included, etc...

[16:26] <moritz> Woodi: then you might be interested in a project I'm pondering

[16:26] <moritz> Woodi: basically twitter, but for JSON messages, not just text

[16:27] <moritz> (and then format strings for human readable representations, possibly multi-lingual)

[16:27] *** ajr_ left
[16:32] *** guru joined
[16:33] *** guru is now known as Guest33452

[16:33] *** SamuraiJack__ left
[16:33] *** Guest33452 is now known as ajr_

[16:33] *** denis_boyun_ joined
[16:38] *** denis_boyun__ joined
[16:38] *** falk0n left
[16:43] *** xfix left
[16:49] *** [Sno] joined
[16:52] *** xfix joined
[16:56] *** rurban left
[17:05] *** pdcawley left
[17:07] *** pdcawley joined
[17:14] *** denis_boyun__ left
[17:16] *** kivutar joined
[17:26] *** rurban joined
[17:27] *** kbaker_ joined
[17:31] *** rurban left
[17:31] *** ajr_ left
[17:35] *** xenoterracide joined
[17:37] *** FOSScookie joined
[17:44] <FOSScookie> I remember there being a link to a page that had the current state of rakudo  and niecza development status. I cannot find it in the pidgin logs can you give me that link again?

[17:46] *** dwarring joined
[17:47] <timotimo> is that perl6.org/compilers/features or what's it?

[17:47] *** kurahaupo joined
[17:47] *** zakharyas joined
[17:48] <FOSScookie> Yes, that is it. Thanks :)

[17:48] <dalek> roast: 6a78aa6 | (David Warring [email@hidden.address] | integration/advent2013-day18.t:

[17:48] <dalek> roast: completing 2013 advent day 18

[17:48] <dalek> roast: review: https://github.com/perl6/roast/commit/6a78aa6a0e

[17:49] *** kivutar left
[17:57] *** FROGGS joined
[18:01] *** xinming__ joined
[18:03] *** FOSScookie left
[18:04] *** xinming_ left
[18:06] *** guru joined
[18:06] *** guru is now known as Guest34620

[18:07] *** Guest34620 is now known as ajr_

[18:11] <jnthn> o/ from a train

[18:11] <FROGGS[mobile]> o/ from a hotel

[18:12] <nwc10> \o from a balcony

[18:12] <timotimo> ô

[18:13] <nwc10> (but I'm back in Vienna, after a breif dalliance in the UK (sort of), care of a roaming 3G)

[18:14] <grondilu> r: say (rand xx 10)[0, 2 ... *] # is it ok to subscript a finite array with an infinite list of indexes?

[18:14] <camelia> rakudo-moar a544f2: OUTPUT«0.690761385209 0.945037371008574 0.785832695826018 0.738640810376016 0.305420903360923␤»

[18:14] <camelia> ..rakudo-jvm a544f2: OUTPUT«0.6956918283244483 0.6913481913265194 0.5712483954682283 0.5415502470378891 0.7891892362012431␤»

[18:14] <camelia> ..rakudo-parrot a544f2: OUTPUT«0.211881146623881 0.0478726747414342 0.384264605105258 0.578718755202395 0.247960562410981␤»

[18:15] * grondilu wondered this as he was looking at http://rosettacode.org/wiki/Fast_Fourier_transform#Perl_6

[18:15] <jnthn> grondilu: Apparently :P

[18:15] *** telex left
[18:16] *** telex joined
[18:21] <nwc10> FROGGS[mobile]: a hotel in Germany? Or further afield?

[18:22] * [Coke] hopes to get some spare time back after $dayjob project goes live this weekend. fingers crossed.

[18:27] *** rurban joined
[18:28] <jnthn> timotimo: spesh is a O(months) project building something that will enable/do dozens of different opts, lex2loc is a O(days) single opt. :)

[18:29] * grondilu rewrote FFT on RC:  http://rosettacode.org/wiki/Fast_Fourier_transform#Perl_6

[18:30] <grondilu> (no loop :-)

[18:30] <[Coke]> http://rosettacode.org/wiki/Fast_Furious#six

[18:31] *** raiph left
[18:32] *** rurban left
[18:33] <PerlJam> grondilu: nice.

[18:34] <PerlJam> (of course, I don't know what it looked like before, but that particular implementation is very concise and understandable)

[18:38] <grondilu> yeah it's going to be hard to make it simpler

[18:38] <PerlJam> .oO( Just use the built-in fft() routine!  ;)

[18:38] *** FROGGS[mobile] left
[18:40] <grondilu> though maybe a geometric sequence could be written 1, [\*] $r xx *

[18:40] <timotimo> it seems like i didn't write it on the channel >_>

[18:40] <timotimo> wait, i can find out!

[18:41] <timotimo> 1bc is on moarvm/master

[18:41] <timotimo> so blue is spesh

[18:41] <timotimo> hold on

[18:41] <timotimo> both are on master

[18:41] <timotimo> wat.

[18:41] *** kurahaupo left
[18:41] <timotimo> looks like i dun goofed up :)

[18:41] <timotimo> did you see i was unable to build rakudo on top of lex-loc?

[18:42] <jnthn> No

[18:42] <jnthn> It's odd 'cus I built it just fine.

[18:42] * grondilu keeps thinking the degenerate case of [*] should be 1

[18:42] <[Coke]> m: say [\*]

[18:42] <camelia> rakudo-moar a544f2: OUTPUT«␤»

[18:42] <[Coke]> m: say [*]

[18:42] <camelia> rakudo-moar a544f2: OUTPUT«1␤»

[18:42] <timotimo> but the output of triangle reduce is a list

[18:42] <[Coke]> m: say [\+]

[18:42] <camelia> rakudo-moar a544f2: OUTPUT«␤»

[18:43] <timotimo> the empty list is just fine in my opinion

[18:43] <timotimo> m: say [\*] 1

[18:43] <camelia> rakudo-moar a544f2: OUTPUT«1␤»

[18:43] <timotimo> m: say [\*] 1, 2

[18:43] <[Coke]> timotimo++

[18:43] <camelia> rakudo-moar a544f2: OUTPUT«1 2␤»

[18:43] <timotimo> m: say [\*] 1, 2, 3

[18:43] <camelia> rakudo-moar a544f2: OUTPUT«1 2 6␤»

[18:43] <grondilu> sorry, I meant the first term of [\*] should always be 1 

[18:43] <timotimo> oh?

[18:43] <jnthn> timotimo: How did it fail?

[18:43] <timotimo> so you're saying triangle reduce should always include one invocation of the operator with no arguments?

[18:43] <grondilu> m: say [\*] 2 xx *

[18:44] <grondilu> oops

[18:44] <grondilu> m: say [\*] 2 xx 5

[18:44] <camelia> rakudo-moar a544f2: OUTPUT«(timeout)»

[18:44] <camelia> rakudo-moar a544f2: OUTPUT«2 4 8 16 32␤»

[18:44] <grondilu> well, maybe that's a bit too much to ask.

[18:45] <timotimo> m: say &[*](), [\*] 2 xx 5

[18:45] <camelia> rakudo-moar a544f2: OUTPUT«12 4 8 16 32␤»

[18:45] <timotimo> oops :)

[18:45] <timotimo> m: say (&[*](), [\*] 2 xx 5)

[18:45] <camelia> rakudo-moar a544f2: OUTPUT«1 2 4 8 16 32␤»

[18:46] <timotimo> m: sub fixed_tri_red(&operator, @list) { &operator(), [\&operator] @list }; fixed_tri_red(&[*], (1, 2, 3, 4, 5));

[18:46] <camelia> rakudo-moar a544f2: OUTPUT«===SORRY!=== Error while compiling /tmp/M8Izodv1Af␤Two terms in a row␤at /tmp/M8Izodv1Af:1␤------> tor, @list) { &operator(), [\&operator] ⏏@list }; fixed_tri_red(&[*], (1, 2, 3, 4␤    expecting any of:␤    …»

[18:46] <timotimo> m: sub fixed_tri_red(&operator, @list) { &operator(), [\&operator] |@list }; fixed_tri_red(&[*], (1, 2, 3, 4, 5));

[18:46] <camelia> rakudo-moar a544f2: ( no output )

[18:46] <timotimo> m: sub fixed_tri_red(&operator, @list) { &operator(), [\&operator] |@list }; say fixed_tri_red(&[*], (1, 2, 3, 4, 5));

[18:46] <camelia> rakudo-moar a544f2: OUTPUT«1 any(sub+{<anon>}+{precedence} infix:<*>(Any $a?, Any $b?) { ... }, 1 2 3 4 5)␤»

[18:46] <grondilu> more generally, I was thinking the first term of a triangular reduce metaoperation should always be the degenerate case of the applied operator.

[18:46] <timotimo> what the f? :)

[18:47] <timotimo> we should introduce a full triangle reduce metaoperator: [\\*]

[18:49] *** darutoko left
[18:49] <grondilu> so that arithmetic and geometric progressions could be written naturally [\+] $_ xx * and [\*] $_ xx *  starting respectively with 0 and 1 (the two degenerate cases of [+] and [*]

[18:49] <grondilu> )

[18:49] <timotimo> rectangle reduce? [|*]

[18:50] <grondilu> and factorial could be written  [\*] 1 .. *    (? not sure about thi one though)

[18:50] * grondilu thinks

[18:50] <dalek> rakudo/nom: 3325bb1 | (Elizabeth Mattijsen)++ | src/core/asyncops.pm:

[18:50] <dalek> rakudo/nom: Test for Promise/Channel on first one as well

[18:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3325bb1d82

[18:50] <grondilu> yes, factorial would then be [\*] 1 .. *

[18:51] <jnthn> timotimo: It builds fine here.

[18:52] <jnthn> timotimo: Just tried it again from scratch

[18:52] <grondilu> timotimo: I think it must still look triangular, but maybe with a ° to mean that we want the degenerate case as well.  So [°\*]

[18:52] <grondilu> or [.\*]

[18:55] <grondilu> though to be fair I do remember TimToady has aready stated that it would be more difficult to teach, so I won't insist.  It's just that this FFT code made me think about it and it keeps nagging me a little bit.

[18:57] <jnthn> timotimo: It's hard to infer much from http://t.h8.lv/p6bench/2014-04-03-spesh.html at present.

[18:57] <jnthn> timotimo: I suspect most of the differences are noise-ish.

[19:01] *** Araq joined
[19:01] <nwc10> I have uploaded a picture of the view from here: https://www.flickr.com/photos/34063820@N00/13628965234/

[19:01] <nwc10> I would add notes

[19:01] <nwc10> but it seems that flickr-- has removed tha useful feature.

[19:01] *** Rotwang joined
[19:02] <nwc10> the bright circle just to the right of the tree is the Riesenrad

[19:02] <jnthn> nwc10: ooh, nice :)

[19:02] <nwc10> everything else is a bit to hard to describe easily.

[19:02] <timotimo> gotta run for now

[19:02] *** xenoterracide left
[19:02] *** xenoterracide joined
[19:02] <nwc10> if I had notes I could stick one on where the airport control tower is.

[19:03] *** Araq left
[19:04] *** zakharyas left
[19:08] *** xenoterracide left
[19:12] *** rurban joined
[19:13] <dalek> rakudo/nom: 8908784 | (Elizabeth Mattijsen)++ | src/core/asyncops.pm:

[19:13] <dalek> rakudo/nom: Some more cleanup in WINNER

[19:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8908784333

[19:19] <[Coke]> WINNER WINNER

[19:20] <dalek> perl6-roast-data: ad1cb0c | coke++ | / (6 files):

[19:20] <dalek> perl6-roast-data: today (automated commit)

[19:20] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/ad1cb0cec1

[19:21] <moritz> http://h3.gd/ctrace/

[19:21] <lizmat> [Coke]: well, actually I'm working on .winners

[19:21] <lizmat> $ perl6 -e 'say (^10).pick(*).map( { start { .sleep; $_ } } ).winners'

[19:21] <lizmat> 0 1 2 3 4 5 6 7 8 9

[19:22] <lizmat> given a list of Promises / Channels, it returns a lazy list with the values as they come in

[19:22] <moritz> lizmat++

[19:22] <moritz> is that -j or -m?

[19:23] <lizmat> eh, it's built on winner {}, so should work on both

[19:23] <lizmat> I've only tested -m

[19:23] <timotimo> jnthn, did you look at the nqp benches?

[19:23] <timotimo> or only at the rakudo ones?

[19:23] <lizmat> now my plan was to allow for an optional code block to be passed to .winners

[19:24] <[Coke]> Found out they opened a "Brits R Us" about 5m from my $dayjob. will be swinging by later to see if I can find prawn crisps. :)

[19:24] <lizmat> similar to the winner {} syntax

[19:24] <lizmat> but alas, this fails with an error I don't quite get

[19:25] <lizmat> $ perl6 -e 'say (^10).pick(*).map( { start { .sleep; $_ } } ).winners: { $:v.say }'

[19:25] <lizmat> Required named parameter 'k' not passed

[19:25] <jnthn> timotimo: Looked at both. The NQP ones didn't show a great deal

[19:25] <jnthn> timotimo: I mean, I mostly pay attention to the right hand side of them since that's where you see the trend

[19:26] <timotimo> mhm

[19:26] <timotimo> the native 2d loop one was really happy

[19:26] <jnthn> yeah, it was

[19:26] <jnthn> Beat Perl 5.

[19:26] <lizmat> ah, duh, thank you all for being a wall  :-)

[19:27] <timotimo> liz, it used only v?

[19:28] <jnthn> lizmat: It's TimToady immitation day, didn't y'know? :P

[19:31] *** treehug8_ joined
[19:31] *** treehug88 left
[19:33] *** fhelmberger joined
[19:34] <jnthn> lizmat: Curius, are you developing the WINNER stuff on j or m?

[19:35] <lizmat> on ,

[19:35] <lizmat> on m

[19:35] <lizmat> rather  :-)

[19:36] <lizmat> jnthn: is that important at this level ?  it shouldn't, should it ?

[19:37] <jnthn> lizmat: In terms of "will it work", shouldn't matter.

[19:37] <jnthn> lizmat: But folks using the conc stuff a bit on Moar matters to me in so far as it helps me get an idea of its stability, weak points, etc.

[19:38] <lizmat> the only odd thing I found so far, is interaction with gather / take

[19:38] <jnthn> Ah

[19:38] <jnthn> segv? )

[19:38] *** fhelmberger left
[19:38] <lizmat> not what I expected... but I abandoned that approach in favour of map {}

[19:40] <dalek> nqp/execname: 1454654 | (Tobias Leich)++ | tools/build/Makefile-Moar.in:

[19:40] <dalek> nqp/execname: call the gen-runner provided my moar

[19:40] <dalek> nqp/execname: review: https://github.com/perl6/nqp/commit/1454654388

[19:40] <jnthn> detrain, bbiab

[19:41] <dalek> nqp/execname: 26686a4 | (Tobias Leich)++ | .gitignore:

[19:41] <dalek> nqp/execname: ignore nqp-m.c

[19:41] <dalek> nqp/execname: review: https://github.com/perl6/nqp/commit/26686a44bd

[19:43] *** btyler left
[19:43] *** denis_boyun_ left
[19:45] *** denis__ joined
[19:47] *** denis__ left
[19:47] *** denis_boyun_ joined
[19:51] *** btyler joined
[19:55] <moritz> FROGGS: I don't know what you're doing right now, but the exec name finding could happen in the shell script wrapper

[19:55] <moritz> currently perl6-m is a wrapper that calls moar ... perl6.moarvm "$@"

[19:56] <moritz> it could pass  --execname="$0" to moar

[19:56] <moritz> no idea if windows has an equivalent

[19:57] <moritz> and the same approach might work for the JVM too

[20:00] *** treehug88 joined
[20:03] *** treehug8_ left
[20:03] *** treehug8_ joined
[20:03] *** treehug8_ left
[20:04] *** treehug8_ joined
[20:05] *** treehug88 left
[20:15] *** jeffreykegler1 left
[20:22] *** rindolf left
[20:30] *** treehug8_ left
[20:32] *** treehug88 joined
[20:38] *** xenoterracide joined
[20:41] *** jdv79 left
[20:45] <dalek> roast: dab8862 | (David Warring [email@hidden.address] | integration/advent2013-day19.t:

[20:45] <dalek> roast: adding advent 2013 day 19

[20:45] <dalek> roast: review: https://github.com/perl6/roast/commit/dab8862bc8

[20:48] <dalek> rakudo/nom: 69109d2 | (Elizabeth Mattijsen)++ | src/core/asyncops.pm:

[20:48] <dalek> rakudo/nom: Move &invoke_right to global INVOKE_KV

[20:48] <dalek> rakudo/nom: 

[20:48] <dalek> rakudo/nom: So List.winners can use it also

[20:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/69109d228f

[20:48] <dalek> rakudo/nom: 883145d | (Elizabeth Mattijsen)++ | src/core/List.pm:

[20:48] <dalek> rakudo/nom: Naive implementation of .winners()

[20:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/883145d27d

[20:49] <lizmat> $ time perl6 -e '(^10).pick(*).map( { start { .sleep; $_ } } ).winners: { $:v.print }'

[20:49] <lizmat> 0123456789

[20:49] <lizmat> real	0m9.339s

[20:49] <lizmat> user	0m0.773s

[20:49] <lizmat> sys	0m0.090s

[20:51] *** BenGoldberg joined
[20:51] <lizmat> jnthn: seems we got a .winners  !

[20:52] *** hoverboard joined
[20:52] <jnthn> lizmat: Hmm. Did S17 get one too? ;)

[20:52] <lizmat> no, not yet, but from your question I gather it should  ?

[20:52] <jnthn> lizmat: What are its semantics, rough?

[20:52] *** rurban left
[20:52] <jnthn> *roughly

[20:53] <lizmat> given a list of Promises / Channels, it returns a lazy list with results in the order they were seen

[20:53] <lizmat> optionally calling a code block when each Promise is kept / a Channel has something to mention

[20:54] <jnthn> What's the code block do?

[20:54] <jnthn> Does it have map semantics?

[20:54] <jnthn> That is, the lazy list gets its return values?

[20:54] <lizmat> it works the same as the code block in winner

[20:55] <lizmat> yup, the lazy list gets its return values

[20:55] <jnthn> Oh, so you can optionally take the thing that spake?

[20:55] <lizmat> $ perl6 -e 'my @a; (^10).pick(*).map( { start { .sleep; $_ } } ).winners: { @a.push: $:v }; say @a

[20:55] <lizmat> 0 1 2 3 4 5 6 7 8 9

[20:55] <lizmat> so you can safely push to an array in that code block

[20:56] <lizmat> or take, indeed

[20:56] <jnthn> ah, actor semantics.

[20:56] <jnthn> Though the lazy list surely hsa them too?

[20:56] <jnthn> *has

[20:56] <jnthn> Uh, is safe to iterate I mean...

[20:57] <lizmat> $ perl6 -e 'my @a = gather { (^10).pick(*).map( { start { .sleep; $_ } } ).winners: { take $:v } }; say @a'

[20:57] <lizmat> 0 1 2 3 4 5 6 7 8 9

[20:57] <jnthn> nice

[20:57] <BenGoldberg> What about: say gather { (^10).map( { start { .sleep; $_ } ).winners: { } };

[20:58] <BenGoldberg> Err\

[20:58] <BenGoldberg> What about: say gather { (^10).map( { start { .sleep; take $_ } ).winners: { } };

[20:58] *** IllvilJa joined
[20:59] <lizmat> $ perl6 -e 'my @a = gather { (^10).pick(*).map( { start { .sleep; take $_ } } ) }; say @a'

[20:59] <lizmat> that's indeed one of those cases where it just doesn't work

[20:59] <BenGoldberg> I didn't really expect it to, honestly

[20:59] <BenGoldberg> The gather is in one task/thread, and the take is in another

[20:59] <lizmat> if the take is in a different thread, it won't work

[21:00] <jnthn> I suspect the problem is that the take isn't in the dynamic scope of the gather

[21:00] <jnthn> Since it's on a different thread.

[21:00] <jnthn> Though it's in the lexical scope, so...

[21:00] *** denis_boyun_ left
[21:01] <lizmat> well, if that isn't supposed to work, then it should warn / die

[21:02] <lizmat> $ time perl6 -e 'my @a := (^10).pick(*).map( { start { .sleep; $_ } } ).winners: { $:v.print }; say @a[5]'

[21:02] <lizmat> 0123455

[21:02] <lizmat> real	0m5.357s

[21:02] <lizmat> user	0m0.689s

[21:02] <lizmat> sys	0m0.096s

[21:02] <lizmat> which shows it is a lazy list indeed

[21:02] <jnthn> lizmat: I'm surprising it doesn't die.

[21:02] *** dayangkun_ left
[21:02] <jnthn> *surprised

[21:03] <jnthn> lizmat: Like, really surprised...

[21:03] <lizmat> you mean because we exit before waiting for all the threads ?

[21:03] <jnthn> No, I'm surprised the take doesn't die.

[21:03] <jnthn> With a nasty internal error if nothing else.

[21:04] <lizmat> maybe it just takes to a copy in the local thread that we never see?

[21:05] <jnthn> maybe

[21:06] <jnthn> I'll try and get the exit time stuff fixed up this weekend in moar-conc

[21:06] <jnthn> Though I only get a half-weekend...gotta go travel to Stockholm on Sunday.

[21:06] <lizmat> but other than that, you're happy with .winners ?

[21:07] <jnthn> lizmat: Well, it is a cute combinator 

[21:07] <jnthn> lizmat: I think we'll need to discuss its error semantics at some point

[21:09] <lizmat> it's basically the same error semantics as winner {...}

[21:09] *** Rotwang left
[21:11] *** dmol left
[21:11] *** denis_boyun_ joined
[21:13] <dalek> rakudo/nom: e6f73eb | (Elizabeth Mattijsen)++ | docs/ChangeLog:

[21:13] <dalek> rakudo/nom: Add entries for winner {} fix and new .winners()

[21:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e6f73eb941

[21:17] *** dayangkun_ joined
[21:18] <segomos> did caller get renamed?

[21:22] <lizmat> not that I know of

[21:23] <segomos> is it just 'caller.whatever' or ?, i'm starting to find references to %CALLER, $.caller, $CALLER, and various other combinations

[21:23] <jnthn> segomos: What are you trying to achieve?

[21:24] *** denis_boyun_ left
[21:24] <jnthn> (there's more than one mechanism in this space and it's hard to know what to point you at without knowing the use case)

[21:26] <dalek> rakudo/nom: a757718 | (Elizabeth Mattijsen)++ | t/spectest.data:

[21:26] <dalek> rakudo/nom: Adding dwarrings++ advent 2013 tests to roast

[21:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a757718d99

[21:26] <segomos> jnthn: i'm trying to do something similar to perl5's Web::Scraper and in doing so, i need the 'process' blocks to be bound to an objects, though i'd like the syntax to be plain and clean like web::scraper

[21:27] <lizmat> for moar: Files=799, Tests=31002

[21:27] <segomos> https://metacpan.org/pod/Web::Scraper

[21:27] <jnthn> segomos: Thanks, looking

[21:28] <jnthn> segomos: It's still not clear why you need CALLER

[21:28] <jnthn> segomos: I think I'd used dynvars to handle this.

[21:28] <jnthn> sub scraper(&decls) { my %*SCRAPER_STUFF; decls(); ...process them... }

[21:29] <jnthn> sub process($thing, *%adverbs) { %*SCAPER_STUFF{$thing} = %adverbs; } # or whatever

[21:30] *** hummeleB1 left
[21:30] <segomos> i c, i think i get it - i'll screw around with it some more that way - thank you

[21:30] <jnthn> I think that'll be much neater than using caller.

[21:30] <jnthn> Well, CALLER I guess

[21:30] <lue> How do I write up a function (or chain of functions), and throw an array of filenames at it and say "process these in parallel" (i.e. a parallel  do_stuff($_) for @names)? I tried messing with Channel, but it doesn't seem to be what I want.

[21:30] <jnthn> But I tend to see that as a last resort.

[21:31] <segomos> jnthn: that is way better, and it works as desired - tyvm

[21:31] <jnthn> segomos: Welcome. Look forward to seeing the module :)

[21:31] <jnthn> lue: Do you need to get results back, or not?

[21:31] <segomos> jnthn: this one and my csv::query are fighting for my attention atm :-)

[21:32] <lue> jnthn: no, the process just outputs a file in the end, I don't need to get anything back from the function. (This is for that synopsis generator of mine, wanting to see if paralleling it speeds it up any.)

[21:34] *** denis_boyun joined
[21:35] *** bluescreen10 left
[21:35] <dalek> nqp/jnthn-lex-loc: 4dd7814 | jnthn++ | src/NQP/Optimizer.nqp:

[21:35] <dalek> nqp/jnthn-lex-loc: Walk default defaults in the optimizer.

[21:35] <dalek> nqp/jnthn-lex-loc: review: https://github.com/perl6/nqp/commit/4dd78145ff

[21:35] <dalek> specs: 9e4c566 | (Elizabeth Mattijsen)++ | S17-concurrency.pod:

[21:35] <dalek> specs: Also mention MoarVM

[21:35] <dalek> specs: review: https://github.com/perl6/specs/commit/9e4c566b7e

[21:36] <jnthn> lue: await @files.map: -> $file start { ...process $file... };

[21:36] <lue> Ah, didn't catch the await keyword :) .

[21:38] <jnthn> uh, I screwed up the syntax

[21:38] <jnthn> await @files.map: -> $file { start { ...process $file... } }

[21:38] <lizmat> lue: or now: @files.map( -> $file start { ... process file; $result } ).winners: { ... process $:v }

[21:39] <jnthn> lizmat: I think that end-weights it less well in this case, mind...

[21:40] <jnthn> lizmat: Especially if you don't care for processing the files.

[21:40] <jnthn> lizmat: uh, I mean processing the results

[21:40] <lizmat> ah, ok

[21:40] <jnthn> lizmat: Which thread is the block invoked on, ooc?

[21:41] <lizmat> the thread doing .winners

[21:41] <lizmat> :q

[21:41] * hugme hugs lizmat, good vi(m) user!

[21:41] <lizmat> .winners is basically:

[21:42] <lizmat> map { winner * { done @awaitables { $:v } } }

[21:42] <jnthn> ah, k.

[21:42] <jnthn> Makes sense.

[21:42] <lizmat> with some work reducing @waitables and exiting when there are no awaitables left

[21:42] <jnthn> If you want thread affinity, there's supplies.

[21:43] <jnthn> Uh, the other kind of... :)

[21:43] <lizmat> hehe

[21:43] <lizmat> also, note lines 383-384:

[21:43] <lizmat> # for some reason we cannot check &block for definedness

[21:43] <lizmat>                     # as it will bomb on a signature mismatch *without* being called

[21:44] <lizmat> hence the INVOKE_KV( &block // sub {},  # yuck

[21:44] <lizmat> something to be investigated later, haven't been able to golf that just yet

[21:45] <BenGoldberg> Maybe you could just provide a default value for &block?

[21:45] <lizmat> well, that's what I'm doing essentially

[21:46] <lizmat> I'd rather not have to invoke INVOKE_KV if it's not necessary

[21:46] <jnthn> Odd...

[21:46] <BenGoldberg> Provide a default value for &block, then check whether block is equal to that default value.

[21:46] <jnthn> Maybe it's golfable?

[21:47] <lue> on my few-days-old rakudo, this segfaults on perl6-m and hangs on perl6-j after everything is done: https://gist.github.com/lue/9886068

[21:47] <lizmat> lue: please prefix the .map with await

[21:48] <lizmat> until jnthn++ has had time to fix up the exiting when threads still running issues

[21:48] <lue> Of course I forget the Important Keyword™ :P

[21:48] <jnthn> Or get yourself a newer perl6-j to fix its exit hang.

[21:49] <lue> yeah, I'll be sure to update in a moment :) .

[21:49] <lizmat> jnthn: I just realized that $:v is specced to contain the promise

[21:49] <lizmat> I implemented it as having the value, to be more in line with channels

[21:50] <lizmat> if one would want the actual promise, the $:k value should allow fetching it from the original list

[21:50] <lizmat> fwiw, I've had little use for the Promise itself, other than getting its result

[21:51] <jnthn> lizmat: Well, it's mostly useful to unpack it yourself to get control over the exception.

[21:52] <lizmat> perhaps .winners should not return the values

[21:52] <lizmat> but the promises in order ?

[21:52] <lizmat> hmmm... but that wouldn't work with Channels

[21:53] <BenGoldberg> List if pairs, with Promise or Channel as the key, and values as the values?

[21:53] <BenGoldberg> s/if/of

[21:54] <lizmat> I guess jnthn's point was that if you return the value, you've already died if the Promise was broken

[21:55] <lizmat> by just passing the Promise, you have control on when the Promise is checked

[21:55] <BenGoldberg> Hmm

[21:56] <lizmat> FWIW, the longer I'm working on winner {} and .winners, I find trying to force handling of Channels and Promises into the same syntax

[21:56] <lizmat> rather contrived

[21:56] <BenGoldberg> How about: If the Promise was broken, then the value of the pair would be a Failure object.

[21:58] <lizmat> the Promise.excuse   hmmm...

[21:59] <BenGoldberg> IIRC, the excuse is an exception... the value of the pair would be that exception, wrapped in a Failure

[22:00] <BenGoldberg> IIUC, attempting to use a Failure as a normal value results in an exception being thrown

[22:04] *** lustlife left
[22:04] *** hoverboard left
[22:05] *** Mouq joined
[22:08] *** kaare_ left
[22:09] <lizmat> hmmm... I always thought that Promise.excuse returned a Failure

[22:10] <jnthn> No, returns the Exception itself.

[22:10] <jnthn> No point lazifying it, I think.

[22:11] <lizmat> so no point in doing:

[22:11] <lizmat> $contestant.status == Kept

[22:11] <lizmat> +                                ?? $contestant.result

[22:11] <lizmat> +                                !! $contestant.excuse

[22:11] <lizmat> ?

[22:11] <lizmat> or should I wrap the .excuse in a Failure ?

[22:12] <lizmat> and if so, how do I do that ?  Failure.new( $contestant.excuse ) ?

[22:13] <jnthn> lizmat: No, I don't think excuse should wrap it in a failure

[22:13] <jnthn> lizmat: You're asking for the exception there

[22:14] <BenGoldberg> I don't think excuse itself should wrap the exception in the failure... rather .winner should wrap the exception in a failure when putting it as the value of a paire.

[22:14] <lizmat> please note that winner {} should also work on channels

[22:15] <BenGoldberg> Err, I meant to say, .winners

[22:15] <jnthn> A Promise is kinda a one-value channel.

[22:15] <lizmat> so, if it is a Channel returning a value, you would want a pair of Channel => value ?

[22:16] <BenGoldberg> Right

[22:16] <jnthn> Not entirely sure about pairs...

[22:16] <lizmat> me neither, seems like a lot of extra work that may not be needed

[22:17] <BenGoldberg> Maybe .winners should take an extra argument, so that the user can say whether they want a list of Channels/Promises, or a list of values, or ...

[22:18] <BenGoldberg> D'oh, I know.  Just have .winners examine the prototype of the block it's passed.

[22:19] <lizmat> that's what INVOKE_KV does

[22:32] <dalek> rakudo/nom: 567105e | (Elizabeth Mattijsen)++ | src/core/asyncops.pm:

[22:32] <dalek> rakudo/nom: For now, wrap failed Promises in a Failure

[22:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/567105e373

[22:32] *** hoverboard joined
[22:33] <lizmat> and with that, I'm going to sleep on the ramifications of handling both Channels and Promises with winner {} and .winners

[22:33] <lizmat> gnight #perl6!

[22:34] *** treehug88 left
[22:36] <jnthn> 'night, lizmat++

[22:37] *** LLamaRider left
[22:38] <dalek> nqp/jnthn-lex-loc: d317008 | jnthn++ | src/vm/jvm/ModuleLoader.nqp:

[22:38] <dalek> nqp/jnthn-lex-loc: Eliminate epic hack in JVM ModuleLoader.

[22:38] <dalek> nqp/jnthn-lex-loc: 

[22:38] <dalek> nqp/jnthn-lex-loc: The optimizer now got clever enough to see through the hack.

[22:38] <dalek> nqp/jnthn-lex-loc: review: https://github.com/perl6/nqp/commit/d317008d0c

[22:43] <dalek> nqp: 44181ad | jonathan++ | src/NQP/Optimizer.nqp:

[22:43] <dalek> nqp: Start recording var decls/usages.

[22:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/44181ada13

[22:43] <dalek> nqp: d062aa3 | jonathan++ | src/NQP/Optimizer.nqp:

[22:43] <dalek> nqp: Implement lexical => local lowering.

[22:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d062aa3ca9

[22:43] <dalek> nqp: a83cec1 | jonathan++ | src/NQP/Optimizer.nqp:

[22:43] <dalek> nqp: Can lower $/ and self also.

[22:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a83cec12bc

[22:43] <dalek> nqp: 39e7a00 | jonathan++ | src/NQP/Optimizer.nqp:

[22:43] <dalek> nqp: Fix spello; [Coke]++.

[22:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/39e7a006bf

[22:43] <dalek> nqp: 4dd7814 | jnthn++ | src/NQP/Optimizer.nqp:

[22:43] <dalek> nqp: Walk default defaults in the optimizer.

[22:45] *** denis_boyun left
[22:45] <dalek> rakudo/nom: 39a18e2 | jnthn++ | tools/build/NQP_REVISION:

[22:45] <dalek> rakudo/nom: Bump to an NQP with lex->loc optimization.

[22:45] <dalek> rakudo/nom: 

[22:45] <dalek> rakudo/nom: Gets us faster builds/compiles/spectests.

[22:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/39a18e2b93

[22:50] *** pecastro joined
[22:57] *** btyler left
[23:24] <Mouq> [lizmat, jnthn]»++

[23:24] <Mouq> p6: return 1;

[23:24] <camelia> rakudo-parrot 890878, rakudo-jvm 890878, rakudo-moar 890878: ( no output )

[23:24] <camelia> ..niecza v24-109-g48a8de3: OUTPUT«Unhandled exception: Illegal control operator: return␤  at /tmp/tmpfile line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4595 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4596 (module-CORE @ 576) ␤  at /home/…»

[23:25] <Mouq> ^^ Segfaults on Moar in -e

[23:32] *** ssutch left
[23:35] *** grondilu left
