[00:02] *** __Ace__ joined
[00:06] *** theorb joined
[00:15] *** njbartlett joined
[00:18] *** theorbtwo left
[00:21] *** penk left
[00:23] *** jedai left
[00:28] *** AzureBOT joined
[00:29] *** LimbicRegion joined
[00:31] *** Limbic_Region left
[00:31] *** lisppaste3 left
[00:31] *** qmole left
[00:31] *** jiing left
[00:31] *** cookys left
[00:31] *** AzureBOT_ left
[00:31] *** c9s left
[00:31] *** rgs left
[00:31] *** Kattana left
[00:31] *** pugs_svn left
[00:31] *** exp_evalbot left
[00:31] *** buu left
[00:31] *** broquaint left
[00:31] *** nipotaway left
[00:31] *** LimbicRegion is now known as Limbic_Region

[00:32] *** c9s joined
[00:32] *** broquaint joined
[00:33] *** buu joined
[00:33] *** jiing joined
[00:34] *** Limbic_Region left
[00:34] *** Limbic_Region joined
[00:34] *** lisppaste3 joined
[00:34] *** qmole joined
[00:34] *** cookys joined
[00:34] *** AzureBOT_ joined
[00:34] *** Kattana joined
[00:34] *** pugs_svn joined
[00:34] *** exp_evalbot joined
[00:34] *** nipotaway joined
[00:34] *** LimbicRegion joined
[00:38] *** Limbic_Region left
[00:38] *** LimbicRegion is now known as Limbic_Region

[00:48] *** AzureBOT_ left
[00:53] <pugs_svn> r19279 | ruoso++ | [yap6] More documentation in the TODO file...

[00:55] *** dduncan joined
[00:56] *** nipotaway is now known as nipotan

[01:01] <pugs_svn> r19280 | ruoso++ | [yap6] bool is not a type, false is just a const, everything else is true.

[01:14] *** penk joined
[01:15] *** lyokato_ joined
[01:18] *** cnhackTNT joined
[01:35] *** justatheory left
[01:39] *** devogon left
[01:48] *** muixirt2 joined
[01:49] *** han__ joined
[01:51] *** han_ left
[02:00] *** skids joined
[02:01] <skids> use v6-alpha; async { sleep 1; "a" ~~ m/a/; } sleep 2; yields a segfault on pugs 6.2.13.  FWIW.  In case there's a big "list o' bugs" somewhere.

[02:02] <skids> (any attempt to run a .match inside an async.

[02:04] *** Muixirt left
[02:07] *** amnesiac joined
[02:07] *** penk left
[02:12] *** Limbic_Region left
[02:12] *** Limbic_Region joined
[02:14] *** `nipra joined
[02:17] *** skids left
[02:23] *** muixirt2 is now known as muixirt

[02:25] *** turrepurre joined
[02:25] *** muixirt left
[02:52] *** xinming left
[03:00] *** jferrero left
[03:14] *** amnesiac left
[03:23] *** justatheory joined
[03:34] *** Romney_08 joined
[03:35] *** Romney_08 left
[03:52] *** __Ace__ left
[04:05] *** penk joined
[04:20] *** jjore-m left
[04:21] *** Limbic_Region left
[05:17] *** Auzon left
[05:18] *** spinclad left
[05:25] *** chacha_chaudhry joined
[05:25] *** spinclad joined
[05:29] *** poppper joined
[06:09] *** alc joined
[06:21] *** alc left
[06:35] *** amnesiac joined
[06:36] *** araujo left
[06:37] *** jjore-m joined
[06:38] *** jjore-m left
[06:44] *** devogon joined
[07:18] *** justatheory left
[07:34] *** drrho joined
[07:47] *** xinming joined
[07:53] *** iblechbot joined
[08:19] *** drrho left
[08:22] *** dduncan left
[08:22] *** lyokato_ left
[08:23] *** lyokato_ joined
[08:52] *** jisom joined
[09:01] *** poppper left
[09:04] *** iblechbot left
[09:42] <nothingmuch> http://arcanux.org/lambdacats/dumb.jpg

[09:58] *** amnesiac left
[09:59] *** lyokato_ left
[10:06] *** cnhackTNT left
[10:23] *** jedai joined
[10:38] *** Grrrr left
[10:43] *** Grrrr joined
[10:46] *** Muixirt joined
[10:58] *** njbartlett left
[11:01] *** chacha_chaudhry left
[11:05] *** pmurias joined
[11:06] *** fglock_ joined
[11:06] *** fglock_ is now known as fglock

[11:07] *** nipotan is now known as nipotaway

[11:10] *** jisom left
[11:15] *** cognominal_ left
[11:15] *** cognominal_ joined
[11:18] *** pmurias left
[11:30] *** chris2 joined
[11:58] *** barney joined
[12:01] *** Lorn left
[12:01] *** Aankhen`` joined
[12:05] *** agjal joined
[12:23] *** pmurias joined
[12:54] *** Limbic_Region joined
[13:05] *** cognominal_ left
[13:05] *** cognominal_ joined
[13:07] *** Lorn joined
[13:08] *** xinming left
[13:08] *** xinming joined
[13:11] <pugs_svn> r19281 | pmurias++ | fixed typo

[13:14] *** fglock left
[13:16] *** njbartlett joined
[13:18] *** test left
[13:18] *** moritz_ left
[13:23] *** pen1 joined
[13:30] *** xinming left
[13:31] *** agjal left
[13:31] *** agjal joined
[13:39] *** Limbic_Region left
[13:39] *** Psyche^ joined
[13:40] *** penk left
[13:47] *** fglock_ joined
[13:48] *** fglock_ is now known as fglock

[13:51] *** xinming joined
[13:51] *** BinGOs_ joined
[13:53] *** xinming left
[13:55] *** Patterner left
[13:55] *** Psyche^ is now known as Patterner

[13:55] *** BinGOs left
[14:11] *** han__ left
[14:31] *** drrho joined
[14:41] *** ofer joined
[14:44] *** nipra joined
[14:47] *** gbacon joined
[14:54] *** gongyiliao joined
[15:01] *** `nipra left
[15:03] *** jhorwitz joined
[15:07] *** rindolf joined
[15:47] <ruoso> fglock, so... did you take a look in yap6?

[15:48] <fglock> ruoso: not yet, sorry

[15:48] <fglock> but I'm thinking about an alternate implementation

[15:48] <fglock> adding kp6-specific ops and objects to PIR

[15:52] <fglock> though I'd rather have these things added to plain parrot, instead of having them as extensions

[16:03] *** Patterner left
[16:03] *** alester joined
[16:03] <PerlJam> welcome alester

[16:04] *** pmichaud_ joined
[16:04] *** acmoore joined
[16:04] <fglock> hi

[16:06] <fglock> the irclog seems broken: http://irclog.perlgeek.de/perl6/today

[16:06] <lambdabot> Title: IRC log for #perl6, 2007-12-28

[16:08] *** Psyche^ joined
[16:08] *** Psyche^ is now known as Patterner

[16:10] *** __Ace__ joined
[16:13] *** araujo joined
[16:16] *** drrho left
[16:22] *** justatheory joined
[16:26] *** kanru joined
[16:35] <pmurias> fglock: hi

[16:37] *** justatheory left
[16:37] *** gbacon left
[16:37] *** exp_evalbot left
[16:37] *** pugs_svn left
[16:37] *** qmole left
[16:37] *** cookys left
[16:37] *** nipotaway left
[16:37] *** Kattana left
[16:37] *** lisppaste3 left
[16:37] *** Patterner left
[16:37] *** Lorn left
[16:37] *** devogon left
[16:37] *** buu left
[16:37] *** c9s left
[16:37] *** dwave_ left
[16:37] *** r0bby left
[16:37] *** felipe left
[16:37] *** polettix left
[16:37] *** f0rth left
[16:37] *** aindilis left
[16:37] *** takanori0 left
[16:37] *** Helios- left
[16:37] *** jrockway left
[16:37] *** zev left
[16:37] *** nothingmuch left
[16:37] *** gugod left
[16:37] *** Yappo_ left
[16:37] *** awwaiid left
[16:37] *** pravus left
[16:37] *** rafl left
[16:37] *** Gothmog_ left
[16:37] *** cj left
[16:37] *** shachaf left
[16:37] *** lambdabot left
[16:37] *** chris2 left
[16:37] *** obra left
[16:37] *** funktio left
[16:37] *** Southen left
[16:37] *** jedai left
[16:37] *** dmq left
[16:37] *** SamB left
[16:37] *** [particle] left
[16:37] *** TimToady left
[16:37] *** buubot left
[16:37] *** mattz left
[16:37] *** kolibrie left
[16:37] *** djm left
[16:37] *** szbalint left
[16:37] *** pasteling left
[16:37] *** Daveman left
[16:37] *** Aankhen`` left
[16:37] *** spinclad left
[16:37] *** drbean left
[16:37] *** ting left
[16:37] *** zamolxes left
[16:37] *** integral left
[16:37] *** orevdiabl left
[16:37] *** bbkr__ left
[16:37] *** thepler left
[16:37] *** zostay left
[16:37] *** araujo left
[16:37] *** __Ace__ left
[16:37] *** rindolf left
[16:37] *** ofer left
[16:37] *** cognominal_ left
[16:37] *** turrepurre left
[16:37] *** AzureBOT left
[16:37] *** Caelum left
[16:37] *** ruoso left
[16:37] *** ead left
[16:37] *** kcwu left
[16:37] *** cognominal left
[16:37] *** rhc left
[16:37] *** baest_ left
[16:37] *** wolverian left
[16:37] *** reltuk left
[16:37] *** arguile left
[16:37] *** Eidolos left
[16:37] *** dalek left
[16:37] *** kanru left
[16:37] *** acmoore left
[16:37] *** jhorwitz left
[16:37] *** fglock left
[16:37] *** barney left
[16:37] *** Grrrr left
[16:37] *** broquaint left
[16:37] *** bloonix left
[16:37] *** pbuetow left
[16:37] *** Schwern left
[16:37] *** alester left
[16:37] *** sri_ left
[16:37] *** allbery_b left
[16:37] *** charsbar_ left
[16:37] *** silug left
[16:37] *** nnunley left
[16:37] *** Casan_ left
[16:37] *** chruck left
[16:37] *** GeJ left
[16:37] *** avar left
[16:37] *** nipra left
[16:37] *** gongyiliao left
[16:37] *** Tene left
[16:37] *** sunnavy left
[16:37] *** yath left
[16:37] *** yahooooo left
[16:37] *** jql left
[16:37] *** clkao left
[16:37] *** agjal left
[16:37] *** pen1 left
[16:37] *** hcchien left
[16:37] *** marmic left
[16:37] *** mtve left
[16:37] *** tewk_ left
[16:37] *** stevan__ left
[16:37] *** Khisanth left
[16:37] *** Lunchy left
[16:37] *** dvorak left
[16:38] *** kanru joined
[16:38] *** justatheory joined
[16:38] *** araujo joined
[16:38] *** __Ace__ joined
[16:38] *** Patterner joined
[16:38] *** acmoore joined
[16:38] *** alester joined
[16:38] *** rindolf joined
[16:38] *** jhorwitz joined
[16:38] *** gongyiliao joined
[16:38] *** gbacon joined
[16:38] *** nipra joined
[16:38] *** ofer joined
[16:38] *** fglock joined
[16:38] *** agjal joined
[16:38] *** pen1 joined
[16:38] *** Lorn joined
[16:38] *** cognominal_ joined
[16:38] *** Aankhen`` joined
[16:38] *** barney joined
[16:38] *** chris2 joined
[16:38] *** Grrrr joined
[16:38] *** jedai joined
[16:38] *** devogon joined
[16:38] *** spinclad joined
[16:38] *** turrepurre joined
[16:38] *** nipotaway joined
[16:38] *** exp_evalbot joined
[16:38] *** pugs_svn joined
[16:38] *** Kattana joined
[16:38] *** cookys joined
[16:38] *** qmole joined
[16:38] *** lisppaste3 joined
[16:38] *** buu joined
[16:38] *** broquaint joined
[16:38] *** c9s joined
[16:38] *** AzureBOT joined
[16:38] *** dwave_ joined
[16:38] *** r0bby joined
[16:38] *** dmq joined
[16:38] *** hcchien joined
[16:38] *** marmic joined
[16:38] *** bloonix joined
[16:38] *** drbean joined
[16:38] *** SamB joined
[16:38] *** felipe joined
[16:38] *** pbuetow joined
[16:38] *** Caelum joined
[16:38] *** Schwern joined
[16:38] *** obra joined
[16:38] *** polettix joined
[16:38] *** Southen joined
[16:38] *** ting joined
[16:38] *** mtve joined
[16:38] *** f0rth joined
[16:38] *** aindilis joined
[16:38] *** tewk_ joined
[16:38] *** ruoso joined
[16:38] *** stevan__ joined
[16:38] *** takanori0 joined
[16:38] *** Helios- joined
[16:38] *** [particle] joined
[16:38] *** szbalint joined
[16:38] *** Khisanth joined
[16:38] *** zamolxes joined
[16:38] *** integral joined
[16:38] *** sri_ joined
[16:38] *** Tene joined
[16:38] *** TimToady joined
[16:38] *** sunnavy joined
[16:38] *** allbery_b joined
[16:38] *** ead joined
[16:38] *** charsbar_ joined
[16:38] *** jrockway joined
[16:38] *** silug joined
[16:38] *** rhc joined
[16:38] *** kcwu joined
[16:38] *** nnunley joined
[16:38] *** buubot joined
[16:38] *** chruck joined
[16:38] *** cognominal joined
[16:38] *** mattz joined
[16:38] *** dvorak joined
[16:38] *** Lunchy joined
[16:38] *** yath joined
[16:38] *** clkao joined
[16:38] *** jql joined
[16:38] *** yahooooo joined
[16:38] *** avar joined
[16:38] *** reltuk joined
[16:38] *** wolverian joined
[16:38] *** Eidolos joined
[16:38] *** thepler joined
[16:38] *** djm joined
[16:38] *** kolibrie joined
[16:38] *** pasteling joined
[16:38] *** Daveman joined
[16:38] *** arguile joined
[16:38] *** baest_ joined
[16:38] *** dalek joined
[16:38] *** zostay joined
[16:38] *** GeJ joined
[16:38] *** Casan_ joined
[16:38] *** bbkr__ joined
[16:38] *** orevdiabl joined
[16:38] *** lambdabot joined
[16:38] *** Gothmog_ joined
[16:38] *** gugod joined
[16:38] *** cj joined
[16:38] *** Yappo_ joined
[16:38] *** shachaf joined
[16:38] *** nothingmuch joined
[16:38] *** zev joined
[16:38] *** rafl joined
[16:38] *** pravus joined
[16:38] *** awwaiid joined
[16:38] *** funktio joined
[16:41] <pmurias> ruoso: in the TODO 'the should it be implemented as low-level?' part referes to the whole of the string or just the 3 methods? 

[16:44] *** amnesiac joined
[16:47] *** justatheory left
[16:53] *** gongyiliao left
[16:54] <rindolf> PerlJam: ping

[17:00] <avar> fglock: hi there

[17:01] <pasteling> "avar" at 212.30.222.56 pasted "RuleConstantFold.pm" (79 lines, 1.9K) at http://sial.org/pbot/29452

[17:01] <pmurias> ruoso: i think you could have most of yap6 in p6 but the stage1 (or should it be called stage0) language would we very low level (maybe extending p6 in couple of places)

[17:01] *** Psyche^ joined
[17:01] <pasteling> "avar" at 212.30.222.56 pasted "fold-rule-constant.pl" (18 lines, 256B) at http://sial.org/pbot/29453

[17:01] <fglock> avar: hi

[17:01] <avar> that's a post-processor and a broken ast walker I made to optimize rule output

[17:02] <fglock> looking

[17:02] <avar> basically fold consecutive constants to one so you have /\Gtoken/g not /\Gt/g && /\Go/g && /\Gk/g ....

[17:03] <pmurias> avar: the alternative to fixing the grammar? ;)

[17:03] <fglock> I think we'd rather optimize at the ast level :)

[17:03] <PerlJam> rindolf: pong

[17:03] <avar> fglock: anyway if you could fix it up that would be neat

[17:04] <avar> maybe we should have Visitor/Optimize/*.pm

[17:05] <rindolf> PerlJam: hi.

[17:05] <PerlJam> What's up?

[17:05] <rindolf> PerlJam: do you know anyway to reach MJD/yrlnry except IRC and email?

[17:05] <rindolf> PerlJam: I'm fine.

[17:05] <PerlJam> nope, those are the methods I would use.

[17:06] <rindolf> PerlJam: I sent a new Perl QOTW, but there seems to be email problems on plover.com

[17:06] <rindolf> Is it "there seems to be email problems" or "there seem to be email problems"?

[17:07] <fglock> avar: Visitor::Optimize::* is nice

[17:10] <pmurias> avar: shouldn't push @$nodes, $stmt; be also done if $constant ne ''

[17:10] <pmurias> ?

[17:12] *** jjore-m joined
[17:13] <PerlJam> rindolf: I recieved it.  What email problem do you think there is?

[17:14] <rindolf> PerlJam: well:

[17:14] <avar> pmurias: it's totally broken:)

[17:15] <rindolf> Oh. http://news.gmane.org/gmane.comp.lang.perl.qotw.discuss

[17:15] <lambdabot> Title: Gmane Loom

[17:15] <avar> the main problem is that I didn't call .emit if the node wasn't a constant, it only work at the "first level" as it were

[17:16] <avar> I was hoping someone better in ast optimization would have a go:)

[17:16] <pmurias> avar: i can try to fix it

[17:16] <pasteling> "avar" at 212.30.222.56 pasted "ast output" (58 lines, 2.8K) at http://sial.org/pbot/29454

[17:16] *** Patterner left
[17:16] *** Psyche^ is now known as Patterner

[17:17] <avar> What it should be doing is merging all consecutive Rule::Constant calls into one

[17:17] <rindolf> PerlJam: it was delayed by 5 hours.

[17:17] <rindolf> PerlJam: guess I should start working on the solution now.

[17:17] <rindolf> PerlJam: and my subscription request from my gmail.com address still didn't receive the confirmation.

[17:19] <avar> pmurias: great

[17:22] <amnesiac> AVARZ

[17:22] <pugs_svn> r19282 | pmurias++ | [kp6] the still broken avar's regex optimising visitor

[17:22] <fglock> you might need to refactor the regex escapes, they currently only work for specific characters - may not recognize more complex strings

[17:23] <pmurias> the build sytem dosn't want to compile that file

[17:23] <pmurias> printing the compilation output instead of saving to file

[17:23] <avar> did you put it in Visitor/Optimize/ ?

[17:23] *** REPLeffect joined
[17:23] *** justatheory joined
[17:24] <pmurias> yes

[17:24] <pmurias> fixed the problem

[17:26] <pugs_svn> r19283 | pmurias++ | [kp6] created Optimize/ in the compiled files directory

[17:26] <pmurias> fixing the visitor now ;)

[17:26] *** Ace_ joined
[17:26] *** [particle1 joined
[17:29] *** jjore-m left
[17:31] *** barney left
[17:31] *** jjore-m joined
[17:32] <pugs_svn> r19284 | pmurias++ | [kp6] fixed Visitor::Optimize::RuleConstantFold

[17:33] <pmurias> avar: you can now test it

[17:40] *** [particle] left
[17:45] *** __Ace__ left
[17:50] *** justatheory left
[17:52] *** jjore-m left
[17:53] <pmichaud_> the articles about Perl 6 on the perlfoundation wiki all seem to be fairly Pugs-centric.  Anyone have any suggestions about refactoring these to include perl6 on Parrot?

[17:54] <araujo> which article?

[17:56] <pmichaud_> http://www.perlfoundation.org/perl6/index.cgi?perl_6

[17:56] <lambdabot> Title: Perl 6 / Perl 6

[18:02] *** Psyche^ joined
[18:03] <pugs_svn> r19285 | pmurias++ | [kp6] fixed another error in RuleConstantFold

[18:14] *** Patterner left
[18:14] *** Psyche^ is now known as Patterner

[18:16] *** jisom joined
[18:27] *** _sprocket_ joined
[18:29] *** pbuetow left
[18:30] *** justatheory joined
[18:30] *** qmole left
[18:30] *** pugs_svn left
[18:30] *** exp_evalbot left
[18:30] *** nipotaway left
[18:30] *** cookys left
[18:30] *** Kattana left
[18:30] *** lisppaste3 left
[18:30] *** gbacon left
[18:31] *** gbacon joined
[18:31] *** lisppaste3 joined
[18:31] *** Kattana joined
[18:31] *** pugs_svn joined
[18:31] *** exp_evalbot joined
[18:31] *** nipotaway joined
[18:31] *** cookys joined
[18:31] *** qmole joined
[18:33] *** Daveman left
[18:38] *** cookys_ joined
[18:40] *** Daveman joined
[18:44] <_sprocket_> could somebody explain (or point out a url that explains) the differences between the pugs/not quite perl/kinda perl 6/and the perl6 in the parrot languages directory?

[18:44] *** chacha_chaudhry joined
[18:44] <_sprocket_> i'm a little confused as to how they all fit together

[18:45] <pmurias> _sprocket_: they are diffrent implementations

[18:45] <pmurias> not quite perl is a limited subset

[18:46] <pmichaud_> pugs is the "most complete" implementation, but development on it seems to have stalled

[18:46] <pmichaud_> languages/perl6 is the official "Perl 6 on Parrot" implementation

[18:46] <pmichaud_> it's still primitive but increasing rapidly

[18:46] <pmichaud_> "Not Quite Perl" is a tool to help compiler writers create subroutines for Parrot

[18:47] <_sprocket_> so if i were wanting to start helping out on one of the projects, is there one to pick over another?

[18:47] *** fglock left
[18:47] <pmichaud_> we use NQP to help build compilers; it's not intended to be an end-user programming language

[18:47] <pmurias> _sprocket_: depends what do you want to work with

[18:48] <_sprocket_> pmichaud_: ah ok.  do some the perl impelementations leverage NQP then?

[18:48] <pmichaud_> a big way to help out all of the projects would be to write up something that explains the differences :-)

[18:48] <pmichaud_> spinclad: the perl6 implementation is using NQP

[18:48] <pmichaud_> sorry, that was meant for _sprocket_  (bad tab completion)

[18:48] <_sprocket_> pmichaud_: that would probably be a helpful document, yes. :)

[18:49] *** orevdiabl is now known as revdiablo

[18:49] <pmichaud_> it could go on the wiki:  http://www.perlfoundation.org/perl6/index.cgi?perl_6

[18:49] <lambdabot> Title: Perl 6 / Perl 6

[18:50] <_sprocket_> pmichaud_: okay, i should have some time later this weekend, i'll try to get something up there

[18:50] *** cookys left
[18:50] <pmichaud_> actually, I'll start one here:  http://www.perlfoundation.org/perl6/index.cgi?Perl%206%20implementations

[18:50] <lambdabot> Title: Perl 6 implementations / Perl 6, http://tinyurl.com/3bl3g7

[18:51] *** justatheory left
[18:52] *** chacha_chaudhry_ joined
[18:52] <_sprocket_> pmichaud_: is there anything that can be brought over from the other perl6 implementations (say, pugs) that can be used in the office perl6 one in parrot?

[18:53] <_sprocket_> ie) could i start porting tests over?

[18:53] <_sprocket_> there doesn't seem to be nearly as many tests in languages/perl6 as are distributed with pugs

[18:53] <[particle1> this speaks to the relative maturity of the two implementations

[18:53] <pmichaud_> _sprocket_: we're going to be refactoring the test suite.  The current plan is that the test suite will continue to live in the pugs repo and that the parrot repo will export them from the pugs repo

[18:53] *** [particle1 is now known as [particle]

[18:54] <_sprocket_> pmichaud_: ah, okay

[18:54] <[particle]> we could use help refactoring the test suite

[18:54] <pmichaud_> so, the pugs repo holds "the official test suite", and we have some make targets in perl6 that cause it to import the official tests and run them

[18:54] <[particle]> _sprocket_: do you have a pugs commit bit?

[18:54] <pmurias> _sprocket_: as for kp6 it can access some parts of the test suit as it lives in the same repo

[18:55] <_sprocket_> [particle]: no, i don't at the moment.  i have a very old parrot one, but i've probably forgotten all the info

[18:55] <pmurias> v6/v6-KindaPerl6

[18:55] *** drrho joined
[18:55] <[particle]> _sprocket_: send me your email and preferred username, and i'll give you a pugs commit bit now

[18:56] <[particle]> grr, commitbit is acting up again

[18:57] <_sprocket_> [particle]: [email@hidden.address] should work

[18:57] <[particle]> any feather admins here?

[18:57] <[particle]> Juerd_: ping

[19:00] *** rindolf left
[19:02] <pmichaud_> here's a draft page describing the various implementations:   http://www.perlfoundation.org/perl6/index.cgi?perl_6_implementations

[19:02] <lambdabot> Title: Perl 6 implementations / Perl 6, http://tinyurl.com/34fg4j

[19:03] <_sprocket_> pmichaud_: cool, ok.  i was planning on prodding the various implementations this weekend, so i'll fill it out a bit

[19:05] <pmichaud_> that would be excellent.

[19:05] <pmichaud_> thanks.

[19:05] <_sprocket_> no problem

[19:05] <pmichaud_> I'll be away from irc most of the weekend, but others can help, and feel free to send me email

[19:05] <_sprocket_> will do, thanks :)

[19:05] *** chacha_chaudhry left
[19:07] *** pbuetow joined
[19:10] *** chris2 left
[19:13] *** acmoore left
[19:15] *** chacha_chaudhry joined
[19:17] *** _sprocket_ left
[19:23] *** Limbic_Region joined
[19:26] *** jjore-m joined
[19:27] <jjore-m> This is an utter newbie-ism but what is proper way to read [1..9] three at a time to produce [[1..3],[4..6],[7..9]]?

[19:28] *** chacha_chaudhry_ left
[19:29] <alester> so pmichaud: Got some time?

[19:29] <pmichaud_> alester: alas, I was about to head off to lunch

[19:29] <pmichaud_> I should be back in 60, though

[19:29] <alester> OK.

[19:29] <alester> Although, I think that we should blame the delays in Perl 6 on your excessive lunching.

[19:29] <alester> just ping me when yr back.

[19:30] <alester> And we'll hope that I don't have any fires here.

[19:33] <pmichaud_> (blame excessive lunches)  I entirely agree.  Lunch is the reason Perl 6 is delayed :-)

[19:33] <alester> scapegoat.perl6.org

[19:34] <PerlJam> I thought it was being delayed by all of the people asking when it will be here.

[19:35] <[particle]> all those people are out to lunch

[19:36] <pmichaud_> http://www.perlfoundation.org/perl6/index.cgi?perl6_tasks

[19:36] <lambdabot> Title: perl6 tasks / Perl 6

[19:36] *** ofer left
[19:36] <alester> pmichaud: Is that our scratchpad?

[19:37] <pmichaud_> I'm going to use it as one, yes.

[19:37] *** pmichaud_ is now known as pmichaud

[19:37] <alester> ok

[19:38] <pmichaud> of course, there's a question as to whether the scratchpad makes more sense in the repo or in the wiki

[19:39] <PerlJam> pm: did I see you say that you're going to be incommunicado over the weekend?

[19:40] <PerlJam> pm: I'm thinking of some things I want to write and I may email them to you over the weekend.

[19:41] <pmichaud> PerlJam: I should still have email access, but irc time may be limited.  I'm headed to CRP for the weekend

[19:41] <pmichaud> but please do email me

[19:41] <PerlJam> pm: heh, tired of the cold?

[19:43] <pmichaud> pj: no, I'm attending a wedding

[19:43] <pmichaud> we fly down tomorrow morning, fly back sunday afternoon

[19:43] <PerlJam> ah.

[19:45] <pmichaud> afk # lunch

[19:46] <alester> pmichaud: For this first draft, I think wiki will be fine.

[19:53] *** justatheory joined
[19:54] *** jisom left
[19:55] *** amoore joined
[20:05] *** jferrero joined
[20:06] *** drrho left
[20:09] <TimToady> PerlJam: the reason Perl 6 is taking so long is the same reason I can keep going as long as it takes.  In my view, Perl 6 is simply the result of a protracted negotiation among everyone who wants to participate, from RFC authors to implementors.

[20:09] <TimToady> It really is still the community's rewrite, as first proposed.

[20:10] <TimToady> I am merely the language designer.

[20:11] <[particle]> hey, we could use your help implementing, too :P

[20:13] <TimToady> see toke.c for a sample of my work.  :)

[20:13] <wolverian> oh come on, that was forgiven ages ago.. 

[20:13] <[particle]> okay, we'll ask you again when it comes to optimization

[20:14] <[particle]> ^Wobfuscation

[20:14] <wolverian> so I take it writing the perl6 script in perl6 would be a bad idea at this point..

[20:14] <[particle]> i can't parse that

[20:15] <TimToady> well, STD.pm is written in Perl 6, but I seriously doubt perl6 can parse it.

[20:15] <wolverian> the simplified cli, from the wiki page. if one writes it in perl6, it'd be hard to launch it. 

[20:15] <wolverian> and the whole idea was to make it easier to launch perl6 :)

[20:16] <wolverian> well, a shebang line would work, I suppose.

[20:17] <[particle]> nope, perl6 can't parse std yet, but we're getting there

[20:17] <[particle]> need to get <alias=rule> working, for one

[20:18] <[particle]> and, ya know, hashes

[20:19] <TimToady> anyway, the only part of the implementation I'm focusing on right now is the longest-token matcher, which is suitable for my optimization^Wobfuscation style.

[20:19] <[particle]> well said

[20:20] <TimToady> basically, I only deal with implementation where it impacts the semantics of syntax

[20:20] <TimToady> since that's the part that all the implementations *must* agree on exactly

[20:21] <[particle]> so, the closures inside STD.pm are there (instead of in an action grammar) because everyone must do it that way?

[20:22] <TimToady> presumably, though that's certainly negotiable in spots

[20:22] <TimToady> and certainly there could be room for "as long as it's equivalent to this"

[20:23] <TimToady> in which case the correctness is determined by testing instead

[20:23] <[particle]> yes, we have equivalencies in perl6

[20:23] <[particle]> so we've left the closures out of the rules

[20:24] <TimToady> and we all know how well "separate but equal" works in practics  :P

[20:24] <[particle]> it seems less cluttered to us that way, but i understand the need for some closures

[20:24] <TimToady> *practice

[20:25] <[particle]> sure, that's why we have unisex bathrooms everywhere :P

[20:26] <TimToady> well, in that case, usually the same person is doing QA on all the implementations...

[20:28] <Limbic_Region> I feel like I must be missing where all the cool kids hang out

[20:28] <TimToady> anyway, the purpose of STD at this point is to guide convergence where the test suite is inadequate, in some cases necessarily so

[20:29] <Limbic_Region> I have seen lots of posts lately talking about a large surge in folks asking where perl 6 is or complaining, etc - but I haven't seen the actual inquiries/complaints/etc

[20:29] <wolverian> perlbuzz, perlmonks mostly 

[20:29] <Limbic_Region> no, not really

[20:29] <wolverian> that is where I have seen them, that is

[20:29] <TimToady> well, perlmonks is mostly just Cop

[20:29] <Limbic_Region> there is 1 article on perlbuzz

[20:29] <TimToady> and perlbuzz is mostly just Andy :)

[20:29] <wolverian> true enough :)

[20:29] <alester> TimToday: Not at all.

[20:29] <Limbic_Region> and the recent stuff on perlmonks is about 5.10.0 - not 6

[20:30] <wolverian> but individuals can generate a lot of noise 

[20:30] <TimToady> alester: it was a joke</hint>

[20:30] <alester> Take a look at what's getting posted, and what's getting replied to.

[20:30] <Limbic_Region> wolverian - to be more specific, I see people talking in those places about all the hub bub (as well as use.perl), but I am missing the actual hub bub

[20:30] <alester> TimToady: Ok, forgive my diminished joke detector.  I'm taking a lot of shit for what I'm trying to get going.

[20:30] <wolverian> Limbic_Region, oh, I dunno. echo chamber, perhaps.

[20:31] <[particle]> it's a myth. nobody wonders when perl 6 will be done.

[20:31] <Limbic_Region> alester - well, I appreciate what your doing

[20:31] <TimToady> but I personally never respond to second-hand worries.  I have enough trouble with the first-hand worries.

[20:31] <alester> Limbic_Region: Thanks.

[20:32] <Limbic_Region> alester - <joke>Besides, even bad PR is good PR</joke>

[20:32] <[particle]> of course people wonder. they just don't ask outloud, because they've been shouted down so many times already.

[20:32] <TimToady> comes of growing up in a culture where people frequently said "I'm not offended by that, but I'm worried someone else might be offended by it, so you shouldn't do it."

[20:32] <alester> TimToady: Let me ask a crazy question.  If you were to put a percentage of how far we are from Day 1 of P6 and putting perl-6.0.0.tar.gz on CPAN, how far along are we?

[20:33] <[particle]> <timtoady>well into the second 80%</timtoady>

[20:33] <Limbic_Region> heh

[20:33] <alester> [particle]: :-P

[20:34] <alester> Are we closer to 10% or 90%?

[20:34] <TimToady> I refuse to make time estimates; historically, any time estimate I have ever made about anything guarantees that it will be completely wrong.

[20:34] <alester> Because at this point, I can't even answer THAT question with any authority.

[20:34] <alester> I'm not asking for a time etsimate.

[20:34] <TimToady> people can multiply

[20:34] <alester> I'm looking for order of magnitude-level guessing.

[20:35] <TimToady> well, you already have my estimate, somewhere between 50% and 100%

[20:35] <Limbic_Region> well, most of the work is out of TimToady's hands once the language specification is done

[20:35] <TimToady> and if it takes another 7 years, I won't be any worse than Tolkien

[20:36] <Limbic_Region> AFAIK, the last major hurdle in that is longest token matcher

[20:36] <Limbic_Region> after that - lots and lots of tests need to be written

[20:36] <alester> I'd never heard 50% before.

[20:36] <Limbic_Region> and bootstrapping needs to happen

[20:36] <Limbic_Region> then it is all gravy

[20:36] <TimToady> "into the 2nd 80%"

[20:36] <alester> I didn't know that was an actual quote.  I thought he was kidding.

[20:36] <TimToady> assuming, of course, there's no 3rd 80%

[20:37] <alester> Of course.

[20:37] <TimToady> well, that's part of the problem, people don't know what we've already said, over and over

[20:37] <[particle]> yes, it's an actual quote.

[20:37] <pmurias> wolverian: by the perl6 script you mean the perl6 compiler?

[20:38] <wolverian> pmurias, the thing you invoke to run the compiler 

[20:38] <alester> TimToady: And that's part of what I'm trying to do is to make some sort of "Here's what's happened in the last 7 years"

[20:38] <[particle]> answer: promises, promises, promises.

[20:39] <TimToady> well, we thought we were working to marry Rachel, and got Leah.  :)

[20:39] <TimToady> we'll get Rachel before the next 7 years are out, but we'll still have to work another 7 years...

[20:41] <TimToady> speaking of wasting time, lunch &

[20:41] <[particle]> oh, great, another delay for perl 6

[20:42] <Limbic_Region> TimToady - when you come back.  Regarding junctions, multi-threading, etc.  Is there anything in the language specification dictating it is "ok to parallelize" - not just implied parallelization of junctions but keyword stuff.

[20:43] <[particle]> limbic_region: i think [] meta_circumfix does that

[20:43] <[particle]> [+] etc

[20:43] <Limbic_Region> hrm

[20:44] <Limbic_Region> I don't think that's what I mean

[20:45] <Limbic_Region> for @links { @page.push($_.fetch_page) }

[20:45] <Limbic_Region> something that tells perl it doesn't have to do those in order or sequentially

[20:45] <[particle]> ok, like a trait saying this block can be parallelized

[20:45] <Limbic_Region> right

[20:45] <[particle]> is ordered or somesuch

[20:46] <Limbic_Region> just jumping on the "parallelization is the future" bandwagon and wondering if there is something in the language specification to future proof perl 6

[20:47] <Limbic_Region> last time I talked to TimToady about it, most of the coroutine, threads, etc was being relegated to implementation (parrot) team

[20:48] <TimToady> you're looking for the "hyper" contextualizer

[20:48] <Limbic_Region> which synopse?

[20:49] <[particle]> S06? S03?

[20:49] *** chacha_chaudhry left
[20:49] * Limbic_Region will find it

[20:49] <[particle]> maybe add them and look at S09

[20:49] <TimToady> see S02:3004

[20:49] <Limbic_Region> thanks

[20:50] <[particle]> ah, i knew eager, but forgot hyper

[20:50] <TimToady> and, of course, hyper is implied by hyperops

[20:50] <gbacon> TimToady: an elder from my church who's also having eye problems greatly enjoyed your transplant diary

[20:51] <TimToady> (but not by reduce)

[20:52] <wolverian> I remember @page.push(«@links») was considered at some point

[20:52] <Limbic_Region> I realized hyper was implied in hyperops

[20:52] <wolverian> or maybe I'm confusing it with junctions again :)

[20:52] <TimToady> gbacon: thanks.  I should really update it with recent history, which includes two cataract surgeries

[20:52] <TimToady> Limbic_Region: of course, that's why I said "of course"  :P

[20:53] *** iblechbot joined
[20:53] <Limbic_Region> sorry, I am still in the "sleep is an illusion" phase of having a newborn home

[20:53] <TimToady> I empathize deeply

[20:53] <TimToady> four times over

[20:54] <Limbic_Region> oh, and I know another example of when 1 + 1 != 2 (not just for sufficiently high values of 1)

[20:54] <Limbic_Region> it also doesn't equal 2 when the ones in question are children under the age of 2

[20:54] *** REPLeffect left
[20:55] <gbacon> Limbic_Region: when it gets bad, just be thankful you don't have quadruplets :-)

[20:55] * gbacon shudders

[20:55] <Limbic_Region> well, my wife stays at home and does the vast majority of the work

[20:55] <TimToady> yes, those particular 1s are really boolean answers to the question "is all my time occupied?"

[20:56] *** REPLeffect joined
[20:56] <[particle]> talk about hyper...

[20:56] <gbacon> mine too.. which is a good thing because my wife has a tremendous helping of patience

[20:56] <gbacon> but still, I feel your pain

[20:58] * Limbic_Region wanders off

[21:03] <avar> avar@oe:~/src/pugs/v6/v6-KindaPerl6$ make;perl script/kp6 --do Emit::Perl5Regex -e 'token meh { proto [ foo | bar ] }' | perltidy -pro=util/perltidyrc | grep '_pos.*/g'

[21:03] <avar>                 (   (   /\Gp/g && /\Gr/g && /\Go/g && /\Gt/g && /\Go/g && do { my $_pos = pos(); ( ( /\Gf/g && /\Go/g && /\Go/g ) ) || ( ( ( pos() = $_pos ) || 1 ) && ( /\Gb/g && /\Ga/g && /\Gr/g ) ) }

[21:03] <avar> avar@oe:~/src/pugs/v6/v6-KindaPerl6$ make;perl script/kp6 --do Optimize::RuleConstantFold,Emit::Perl5Regex -e 'token meh { proto [ foo | bar ] }' | perltidy -pro=util/perltidyrc | grep '_pos.*/g'

[21:03] <avar>                 (   (   /\Gproto/g && do { my $_pos = pos(); ( (/\Gfoo/g) ) || ( ( ( pos() = $_pos ) || 1 ) && (/\Gbar/g) ) }

[21:03] <avar> yay constant folding :)

[21:04] <TimToady> interestingly, I have to do just the opposite to make an efficient longest token matcher :)

[21:05] <TimToady> where if all the tokens are constant it degenerates to a trie lookup

[21:07] <avar> does rt have an openid thingy? Wondering if I can use an existing account for the http://www.perlfoundation.org/perl6/index.cgi?perl6_tasks wiki

[21:07] <lambdabot> Title: perl6 tasks / Perl 6

[21:08] <wolverian> rt being an openid provider? dunno. I use my lj account. ;)

[21:08] <[particle]> i use bitcard with rt

[21:08] *** aaaa joined
[21:08] <wolverian> but the wiki doesn't support bitcard iirc

[21:14] *** aaaa left
[21:28] *** avar left
[21:28] *** iblechbot left
[21:29] <obra> RT hasn't ever been an openid provider, but I'd love a plugin and happy to help with comments on the rt side of things

[21:32] <pmurias> TimToady: is it possible to detail the type of a subroutine? something like has Code[Int,Int --> Int] $.addition

[21:33] <pmurias> s/detail/further specify/

[21:36] *** Lorn left
[21:40] <pmurias> S03:2006 seems to suggest it would be Code:(Int,Int --> Int)

[21:40] <pmichaud> according to #parrot it looks like the perl6_tasks page may become an RT query

[21:40] *** jferrero left
[21:41] <TimToady> yes, though inside [] is just a parameter list, not a sig, so it'd be more like Code[:sig( :(Int, Int --> Int)] in the parametric type form

[21:41] <TimToady> but we can probably allow the Code:(...) form too if it's not to ambiguous

[21:42] <TimToady> or maybe &:(...) is the short form

[21:43] <TimToady> In any case it has to know it's parsing a sig, not an expression

[21:44] *** gbacon is now known as php-barbie

[21:45] *** php-barbie is now known as gbacon

[21:45] <pmurias> thanks, i was think if it was possible to map a subset of perl6 to c

[21:46] <pmurias> s/think/wandering/

[21:50] *** Aankhen`` left
[21:51] <TimToady> lessee, kp6 is p5like, nqp is parrotlike, so you want something like "crap", C Rendered As Perl  :)

[21:52] <pmichaud> and here I figured it would be "parc"  (Perl Rendered As C)

[21:52] <pmichaud> oh, "prac"

[21:52] <pmichaud> "drat".

[21:53] <pmichaud> ah, we could just have our own PAC.   (Perl as C)

[21:58] <alester> pmichaud: THANKS FOR TELLING ME YOU WERE BACK.

[21:59] <alester> NOW WE ARE EVEN LATER!

[21:59] <pmichaud> oh, sorry

[21:59] * pmichaud blames pmichaud.

[21:59] <alester> NOW YOU MUST PAY

[22:00] <pmichaud> I done paid already. :-)

[22:01] *** pmurias left
[22:03] <alester> ok, so http://www.perlfoundation.org/perl6/index.cgi?perl6_tasks

[22:03] <lambdabot> Title: perl6 tasks / Perl 6

[22:03] <alester> Part of what we need is not a "start to do X" but just "X"

[22:03] <alester> So "start to refactor test suite" is really "refactor test suite"

[22:03] <pmichaud> yes, but "X" is often a much bigger task than "start to do X"

[22:04] <alester> Yes, I know.

[22:04] <alester> But then we can break up X.

[22:04] <pmichaud> right, that's what we really need here

[22:04] <alester> But let's get the highest, biggest-level rocks.

[22:04] <alester> Things like 

[22:04] <pmichaud> the tasks list is intended to be "things we can get done relatively quickly" as opposed to "implement Perl 6"

[22:04] <alester> "Have the language definition complete", which my understanding is not done.

[22:05] <alester> Then we're going after two things.

[22:05] <pmichaud> "complete language definition" is outside of the realm of perl6

[22:05] <pmichaud> "complete language definition" is a Perl 6 task, but not a perl6 one

[22:05] <alester> But does the releas of 6.0.0 rely on it?

[22:05] <alester> does the release of perl6 rely on it?

[22:05] <pmichaud> if you're looking for milestones, I put those in the dashboard article

[22:05] <pmichaud> as opposed to perl6_tasks

[22:06] <pmichaud> we're moving perl6_tasks to RT anyway, so I should probably delete that page

[22:06] <pmichaud> yes, the release of 6.0.0 relies on completing the language definition

[22:06] <alester> So even though it's outside the realm of perl6, it's still a requirement.

[22:06] <pmichaud> correct

[22:07] <pmichaud> but I don't know who decides when it's complete

[22:07] <alester> Nor I

[22:07] <alester> doesn't matter right now.

[22:07] <pmichaud> personally, I don't think that "complete language definition" is a milestone that stands on its own

[22:08] <alester> because there are sub milestones?

[22:08] <pmichaud> I really think that what will happen is that the language spec and the language implementation(s) will converge to a point where we decide "okay, this is enough to say that we have 6.0.0"

[22:08] <alester> That's fine.

[22:08] <pmichaud> i.e., 6.0.0 isn't yet a fixed target

[22:08] <alester> And then that milsteone is done.

[22:08] <alester> These don't imply order, either.

[22:09] <pmichaud> fair enough, as long as we can make the co-dependency clear

[22:10] <alester> yup, and even THAT is beyond right now.

[22:10] <alester> Do we need docs?

[22:10] <alester> Is there going to be a perl6doc?

[22:10] <pmichaud> what sort of docs?

[22:10] <alester> Dunno.

[22:10] <alester> What kind of docs will there be?

[22:10] <pmichaud> we have the synopses, and others are working on the perl 6 camel

[22:11] <alester> Are those requirements?

[22:11] <alester> Will there be a perl6doc?

[22:11] <alester> Can I say perl6doc perl6op?

[22:11] <pmichaud> let's say yes, there will be a perl6doc

[22:11] <pmichaud> although some would argue that it should just be perldoc

[22:11] <alester> ok

[22:12] <pmichaud> but yes, we need a perl6 version of perldoc

[22:12] <alester> ok

[22:13] <pmichaud> tentatively I'd say that we need "perl6doc perlop" to work for a 6.0.0 release, although we may have lots of workable pre-perl-6.0.0 releases before then

[22:13] <alester> where "perlop" stands for whatever list of pages we need.

[22:13] <pmichaud> correct

[22:13] <alester> Oh, I'm sure we'll have plenty

[22:13] <alester> ok, how about perlbug?

[22:13] <alester> perl6bug?

[22:14] <pmichaud> it's probably worth (me) reviewing the history of how Perl 5 was birthed to see what lessons/guidelines can be learned from that

[22:14] <pmichaud> perl6bug, yes

[22:14] <pmichaud> however

[22:14] <pmichaud> perl6bug may be difficult to handle given that there are multiple implementations

[22:15] <pmichaud> do we have just one perl6bug for all of the various implementations, or is each implementation simply need to provide its own?

[22:15] <[particle]> it can include $?COMPILER

[22:15] <pmichaud> do all of the implementations use RT?

[22:15] <[particle]> heck, it can dispatch on $?COMPILER

[22:15] *** njbartlett left
[22:16] <[particle]> that seems to be more detail than desired at this point

[22:16] <alester> But it's a good question.

[22:16] <pmichaud> anyway, yes, we need a standard mechanism for bug reporting.

[22:16] <pmichaud> any given implementation should provide a bug report mechanism

[22:17] <pmichaud> whether each uses its own or there's a common shared one can be left for later

[22:17] <alester> ok so we're getting somewhere

[22:17] <alester> http://www.perlfoundation.org/perl6/index.cgi?development_dashboard

[22:17] <lambdabot> Title: Development Dashboard / Perl 6, http://tinyurl.com/276go6

[22:18] <alester> Is the p5 compatibility a requirement for p6.0.0?

[22:18] <pmichaud> historically that's been a "yes"

[22:18] <[particle]> does perl 6.0.0 need a cp6an?

[22:18] <alester> Will we delay a release of p600 if there isn't one?

[22:18] <pmichaud> I don't think cp6an is a requirement.  I think it will happen pre-6.0.0 anyway.

[22:19] <alester> ok

[22:19] <[particle]> we need a definition of 'core' perl

[22:19] <[particle]> and a way to make distros

[22:19] <pmichaud> for 6.0.0?

[22:20] <pmichaud> my opinion:  anything that passes the test suite is 'core' perl

[22:20] <alester> ok

[22:20] <[particle]> 'core' definition is for scope

[22:20] <alester> same as p5?

[22:20] <[particle]> core as in, no modules shipped

[22:20] <alester> Pragmata?

[22:20] <[particle]> or, 12 modules shipped, whatever

[22:20] <[particle]> perl 5 regex support

[22:20] <[particle]> *we need ...

[22:21] <alester> ?

[22:21] <pmichaud> I don't think 6.0.0 needs a definition of distros or what consitutes 'core' perl

[22:21] <pmichaud> we may not know what 'core perl' is until well after we have a 6.0.0 release

[22:21] <alester> Then what goes in the tarball?

[22:21] <alester> Yes, but to know what the release is, we have to know what the modules are.

[22:21] <alester> Again, it may be a converger.

[22:22] <pmichaud> sure, but knowing what modules we put into a tarball is a functionof a distro, not of a definition of 'core perl'

[22:22] <alester> I'm talking about shipping perl-6.0.0.tar.gz

[22:22] <pmichaud> correct

[22:22] <alester> Is that not "core perl" in your mind?

[22:22] <pmichaud> not necessarily

[22:22] <alester> ok

[22:22] <alester> I'm trying to focus just on that tarball.

[22:23] <alester> updated http://www.perlfoundation.org/perl6/index.cgi?development_dashboard

[22:23] <lambdabot> Title: Development Dashboard / Perl 6, http://tinyurl.com/276go6

[22:23] <pmichaud> I think the way to focus on the tarball is to ignore questions about what is "in the core" versus "not in the core".  That's been a rathole discussion on perl6-languages for some time.

[22:23] <alester> You said "core" not me. :-)

[22:23] <[particle]> ok, then let's call it a distro

[22:23] <[particle]> i said core

[22:23] <pmichaud> actually, particle brought up "core"  

[22:23] <pmichaud> and I'm saying "ignore core"

[22:23] <alester> OK.

[22:23] <alester> I don't even know what "core" means nayway.

[22:24] <alester> Right now I'm just looking through /usr/src/perl-5.10.0

[22:24] <alester> x2p?

[22:24] <pmichaud> alester: exactly my point :-)  And if we try to define it, we'll get caught in all sorts of arguments about core vs. non-core that don't help us get to a distro :-)

[22:24] <alester> h2xs?

[22:24] <alester> README.*?

[22:24] <[particle]> embedding/extension mechanisms

[22:24] <pmichaud> x2p, h2xs:  not required

[22:25] <[particle]> cross-language functionality

[22:25] <wolverian> http://www.gnu.org/software/lightning/ woot, new stuff

[22:25] <lambdabot> Title: GNU lightning - GNU Project - Free Software Foundation (FSF)

[22:25] *** njbartlett joined
[22:25] <pmichaud> cross-language functionality:  not required, except to the extent that it's part of the spec

[22:26] <wolverian> six registers, heh.

[22:26] <alester> Embedding headers, like perl.h?

[22:27] <pmichaud> not required, except as indicated in spec

[22:27] <pmichaud> (i.e., I don't think the spec has anything about cross-language functionality or embedded headers)

[22:27] <pmichaud> of course, that might change between now and 6.0.0 :-)

[22:27] <alester> Headline of the day: http://www.linuxjournal.com/node/1005966

[22:27] <lambdabot> Title: Perl Puts Out For The First Time In Five Years | Linux Journal

[22:27] <alester> pmichaud: Yes, of course, everything might change.

[22:28] <wolverian> nice title

[22:28] <pmichaud> actually, I'm a little disappointed in the title

[22:28] <alester> emacs dir?

[22:28] <alester> pmichaud: Yeah, me too

[22:28] <pmichaud> it makes it sound like nothing has been done in five years

[22:28] <pmichaud> I don't think the 5.8.* releases are "nothing"

[22:28] <[particle]> editor highlighting files

[22:29] <alester> Yes, but also "puts out" means "allows to have sex with"

[22:29] <pmichaud> editor highlighting:  nice to have, not a requirement

[22:29] <wolverian> alester, slightly confused an article 

[22:30] <pmichaud> alester: agreed, I caught that connotation of "puts out" also.  I think it was intended to be cute, but it's just crass.

[22:30] <alester> Porting/ dir?

[22:31] <[particle]> porting is for the vm

[22:31] <pmichaud> porting:  not a requirement.  That will tend to be a requirement of the underlying engine or individual implementations

[22:31] <pmichaud> s:2nd/requirement/feature/

[22:32] <pmichaud> as I read the spec, a Perl 6 implementation doesn't require a minimal set of supported platforms to be considered Perl 6

[22:33] <pmichaud> for the perl6 on Parrot implementation, it will be portable to all platforms that Parrot is portable to

[22:34] <alester> I'm putting this on linuxjournal.com

[22:34] <alester> I understand that the headline "Perl puts out for the first time in five years" is intended to be cute, but it's very disrespectful to the countless hours of work that have gone into this ubiquitous tool that has been around for twenty years now and shows no sign of stopping.

[22:34] <alester> The Perl community deserves better.

[22:34] *** SCalimlim joined
[22:34] <alester> Sound OK?

[22:34] <pmichaud> seems okay to me

[22:35] <pmichaud> I wasn't going to publicly comment, personally

[22:35] <pmichaud> (other than to the extent that #perl6 is publicly logged :-)

[22:35] *** njbartlett left
[22:36] <alester> posted.

[22:37] <alester> pmichaud: is s:2nd/requirement/feature/ valid syntax?

[22:37] <pmichaud> alester: i tis.

[22:37] <pmichaud> "it is".

[22:37] <alester> That's just craziness.

[22:37] <pmichaud> see S05.  :-)

[22:37] <alester> Enjoyable craziness, but craziness nonetheless.

[22:38] <pmichaud> one can even use junctions and closures:    s:nth(1|2|3|5|8|13|21|34)/foo/bar/

[22:39] <pmichaud> s:nth{rand()}/foo/bar/

[22:39] <wolverian> wait, when is the closure executed? 

[22:39] <alester> http://www.perlfoundation.org/perl6/index.cgi?development_dashboard

[22:39] <lambdabot> Title: Development Dashboard / Perl 6, http://tinyurl.com/276go6

[22:39] <alester> now has install targets.

[22:40] <pmichaud> perl.h can't be a milestone

[22:40] <pmichaud> because most of the implementations won't have a perl.h :-)

[22:41] *** njbartlett joined
[22:41] <pmichaud> wolverian: I don't know when the closure gets executed for :nth

[22:41] <pmichaud> wolverian:  I need to re-read the spec on that

[22:42] <pmichaud> there's been some issue about some adverbs needing resolution at compile-time while others need resolution at runtime, but I don't recall how that worked out

[22:43] <alester> If we don't have to have a CP6AN (and there could not possibly be a worse name for it), then what about the cpan executable?

[22:44] <pmichaud> "the cpan executable" implies there can be only one, somehow

[22:46] <alester> One that ships with it, at least.

[22:46] <alester> I8 mean, I know we're being flexible, but at some point someone's gotta start saying "this is in, this is out"

[22:46] <alester> see http://www.perlfoundation.org/perl6/index.cgi?development_dashboard for more pain

[22:47] <lambdabot> Title: Development Dashboard / Perl 6, http://tinyurl.com/276go6

[22:47] <pmichaud> I don't think we're at that point.

[22:50] <pmichaud> we already have a queue set up for perl6 bugs  (perl6-bug@perl.org)

[22:51] <pmichaud> we don't have a perl6bug front-end script

[22:51] <TimToady> s:nth{...} is illegal syntax in any case, it'd have to be s:nth({...}), in which case the closure obviously deferred

[22:51] <pmichaud> TimToady: ah, thanks.

[22:52] <alester> Obviously. :-)

[22:52] <pmichaud> does the regex engine need to support things like   s:i($foo) ... ?

[22:52] <TimToady> closures are always deferred, until they're not

[22:53] <pmichaud> fwiw, S05 has :   "So are closures: :nth{.is_fibonacci}"

[22:53] <TimToady> if :i cares it can raise an exception on something that is not compile-time constant

[22:53] <pmichaud> okay, raising exception works for me

[22:54] <TimToady> that would be a fossil

[22:54] <pmichaud> that's where I grabbed my example from :-)

[22:55] <pmichaud> I can adapt PGE so that it can accept runtime values for adverbs -- I was just curious if it would need it

[22:56] <TimToady> well, least-surprise would make $foo run-time there, I expect.

[22:56] <pmichaud> correct

[22:57] <TimToady> easy enough to dup for True/False, but some of the others might not be so easy

[22:57] <pmichaud> currently PGE optimizes assuming that flags are compile-time constants, but we could give flags to PGE that mean "don't optimize this"

[22:57] <pmichaud> and then it could dtrt based on the runtime value of the flag

[22:57] <TimToady> :nth() is just a smartmatch, though

[22:58] <pmichaud> correct -- that one doesn't pose me any particular difficult

[22:58] <pmichaud> *y

[22:58] <TimToady> unless you want to know when n is too large to match ever again

[23:01] <TimToady> though in a pinch any($n..*) == $MATCH would do, I suppose.  might be slow though

[23:18] *** jferrero joined
[23:19] *** alester left
[23:22] *** amnesiac left
[23:34] *** LimbicRegion joined
[23:50] <LimbicRegion> w

[23:50] *** Limbic_Region left
[23:50] *** LimbicRegion is now known as Limbic_Region

