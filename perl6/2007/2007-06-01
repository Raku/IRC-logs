[00:00] <spinclad> ?(wait with bated breath|ask the odds)

[00:00] <lambdabot> Unknown command, try @list

[00:00] <spinclad> ?eval ?(wait with bated breath|ask the odds)

[00:00] <evalbot_r16587> Error: No such subroutine: &wait

[00:07] *** weinigLap joined
[00:10] <dduncan> so I just made more p6l posts ... feedback welcome ... particularly there

[00:22] *** Eidolos joined
[00:36] *** [particle1 joined
[00:37] *** nipotaway is now known as nipotan

[00:39] *** miyagawa joined
[00:42] *** thoughtp1lice joined
[01:03] *** dolmans joined
[01:11] *** stevan__ joined
[01:15] *** weinigLap joined
[01:18] *** mr_ank joined
[01:31] *** amnesiac joined
[01:40] *** mjk joined
[02:02] *** weinigLap joined
[02:18] *** mako132_ joined
[02:20] <svnbot6> r16590 | Darren_Duncan++ | ext/QDRDBMS/ : relicensed QDRDBMS under the GPL version 3 or later rather than version 2 or later ... but that takes effect after June 29th 2007; meanwhile, QDRDBMS is covered by an expiring simple permissive proprietary license

[02:33] *** offby1 joined
[02:40] *** thoughtpolice joined
[02:41] *** Khisanth joined
[02:47] *** mako132_ joined
[03:00] *** vel joined
[03:02] <rhr> ?eval my @a = [1,2],[3,4]; [~] [,] [Z] @a

[03:02] <evalbot_r16590> "1 32 4"

[03:02] <rhr> should that be "1324"?

[03:02] *** kolibrie joined
[03:02] *** QtPlatypus joined
[03:02] *** haelix joined
[03:02] *** takesako___ joined
[03:02] *** cls_bsd joined
[03:02] *** jql joined
[03:03] <TimToady> yes, but Z is still implemented the old-fashioned way

[03:03] <rhr> ?eval my @a = [1,2],[3,4]; [~] [~]« [Z] @a

[03:03] <TimToady> it's returning [1,3],[2,4] rather than 1,3,2,4

[03:03] <evalbot_r16590> Error: ␤Unexpected "\171"␤expecting dot, ":", "(", term postfix, operator or ","

[03:04] <rhr> oh, it only does that in @@ context?

[03:04] <TimToady> supposed to flatten in @ context, but doesn't yet

[03:05] <TimToady> List of Capture is supposed to be sensitive to @ vs @@

[03:05] <rhr> what context do reduce ops provide?

[03:05] <TimToady> and a number of routines are redefined to return List of Capture, such as map

[03:05] <TimToady> and gather

[03:06] <TimToady> ordinary list context, which is @ context

[03:06] <rhr> ok

[03:07] *** spinclad joined
[03:07] <rhr> does [,] flatten a multidim list?

[03:08] *** toshinori_ joined
[03:08] *** ofer joined
[03:08] *** semifor joined
[03:08] <TimToady> [,] is a no-op

[03:09] <rhr> that makes sense :) I was looking at S03 and couldn't figure out why you'd use it

[03:09] <TimToady> but yes, it probably turns 1,2;3,4 into 1,2,3,4

[03:10] <TimToady> I'm actually still not entirely happy with the @@ sigil...

[03:10] <TimToady> for @@: 1..3 X 'a'..'z' is pretty darn ugly

[03:11] <rhr> yeah, that's a little strange

[03:11] <TimToady> for clumps 1..3 X 'a'..'z' is slightly better

[03:11] <TimToady> for some 'clumps' or other

[03:12] <rhr> groups? lists?

[03:12] <TimToady> I considered "each" at one point

[03:12] <TimToady> for each gather ...

[03:13] <rhr> is each entirely gone now?

[03:13] <TimToady> it doesn't quite read right though

[03:13] <TimToady> we still have the conjectural 1 < each(@foo) < 10

[03:13] <TimToady> as an inside-out grep

[03:13] <TimToady> but I think a readable @@ is likely more important

[03:14] <TimToady> it would be doubly nice if it composed into a metaoperator

[03:14] <TimToady> so you could write for 1..3 [X] 'a'..'z'

[03:14] <TimToady> except [] is probably not going to work there.

[03:15] <TimToady> can't use [] as a prefix operator

[03:15] <TimToady> since it would be mistaken for an empty array

[03:16] <TimToady> and oddly, most of the other keys on the keyboard already mean something...

[03:16] <rhr> :)

[03:17] *** prism joined
[03:17] <japhb> Clearly, we need foot pedals

[03:17] <TimToady> so for now I'm sticking with making it a funny kind of list context, and using @@: as the placeholder for that...

[03:18] <TimToady> could make some word an alias for @@:

[03:18] <dduncan> so I have finally put a QDRDBMS on CPAN ... but because the code isn't done yet, I made v0.0.0 a POD-only release

[03:18] <dduncan> should be easier reading it htmlized than in pod

[03:18] <dduncan> still, that's a step up from where I was before

[03:19] <dduncan> does anyone know these days how often search.cpan.org is updated?

[03:20] <dduncan> the newest thing on it now was added 2 hours ago

[03:21] <TimToady> well, today's a Blue Moon, so I guess "once in a Blue Moon" is about how often.

[03:22] <japhb> Cue oldies music ...

[03:23] * japhb is getting sufficiently annoyed at perl5 that my favorite part of 6-on-6 may be actually being able to understand the guts of the system, thus having a chance to know how to work around it when it is being stupid.

[03:26] <japhb> TimToady: if and when you get around to thinking about NCI ... one of those cognitive things I humbly ask you keep in mind when designing the syntax is not to make really cheap and really expensive operations look too similar.

[03:27] <TimToady> not sure how to tell them apart, considering most of the overhead is external

[03:27] * Aankhen`` doesn't really understand @@ anyway.

[03:27] <dduncan> as far as I know, @@ is just about multi-part keys

[03:27] <dduncan> or indexes

[03:27] <japhb> I've had quite a bit of frustration figuring out what macros/functions in the XS API just fiddle a bit here and there and which ones decide to make an entire new copy of a huge PV

[03:27] <dduncan> same thing in a generic sense

[03:27] <TimToady> yes, it's more about keys than values

[03:28] <Aankhen``> I see.

[03:28] <Aankhen``> NCI == Native Call Interface?

[03:28] <TimToady> multidimensional slices only have to go as deep as List of List, and that's what semicolon creates, and @@ unpacks

[03:28] <dduncan> often

[03:29] <TimToady> I keep trying to read it as Norweigan Cruise Lines...

[03:29] <japhb> TimToady: I mean "expensive operations within the API itself".  Like what I mentioned above -- it's not always clear when you are copying data and when you are slinging pointers.  And MHO is that it comes from extremely huffmanized macro names that then don't give enough info about their actual operation.

[03:30] <dduncan> that's NCL

[03:30] <japhb> Especially stuff where deep differences in meaning are stored in capitalization ....

[03:30] <TimToady> NCI would be glued by Perl 6 code, not by C code

[03:30] <japhb> Aankhen``: yes, Native Call Interface

[03:30] <Aankhen``> Sorry for harping on this, but: for @@: 1..3 X 'a'..'z' # what does this do?  1..3 X 'a' .. 'z' creates three lists of a-z?

[03:30] <Aankhen``> japhb: Thanks.

[03:31] <TimToady> part of the reason for having an optional type system is the ability to specify the interface from within Perl

[03:31] <japhb> TimToady: nodnod, I just meant, when designing the API, please consider making it somewhat self-documenting, not just golfer-friendly

[03:31] <TimToady> ?eval 1..3 X 'a' .. 'c'

[03:31] <evalbot_r16590> ((1, "a"), (1, "b"), (1, "c"), (2, "a"), (2, "b"), (2, "c"), (3, "a"), (3, "b"), (3, "c"))

[03:31] <Aankhen``> Oh, hum.

[03:32] * Aankhen`` goes to read the Synopsis again.

[03:32] <Aankhen``> Ah.

[03:33] <TimToady> S03:1172

[03:33] <Aankhen``> Yeh, found it.

[03:33] <Aankhen``> Hence the "Ah".

[03:33] <TimToady> Ah

[03:33] <Aankhen``> -ha!

[03:34] <japhb> Oh, and while I'm asking for things ... please can we have all NCI-related design in one S doc, as opposed to spread out over so many docs as it is now, so searching becomes a massive pain?  ;-)

[03:34] <Aankhen``> Wait, you want it in one doc so searching becomes a massive pain? :-(

[03:34] * Aankhen`` ducks.

[03:34] <japhb> s/so searching becomes/causing searching to be/

[03:34] <TimToady> No, he wants the entire design of Perl 6 in one doc...

[03:34] <Aankhen``> That's easy, just use `cat`.

[03:34] <japhb> TimToady: Thbbbpt.  I know you know what I mean.

[03:34] <japhb> :-)

[03:35] <japhb> perlxs/perlembed/perlguts/... drive me insane

[03:35] <TimToady> not really, the whole point of NCI is to do away with XS baggage

[03:35] * japhb steps back and thinks ....

[03:36] <japhb> Hmmm, perhaps the problem is a lack of imagination on my part.

[03:36] * Aankhen`` waits for the explosion.

[03:37] <japhb> I literally can't imagine a situation in which a simple NCI design can possibly contain the complexity that exists in the real world.  Mind you, I *can* see an 80% solution.

[03:37] <japhb> Or even a 99% solution.

[03:38] <japhb> But what I'm talking about is the other 1%.

[03:38] <japhb> Because of the waterbed problem

[03:38] <japhb> Simplifying how we treat NCI is going to be great,

[03:38] <Aankhen``> Hmm, waterbed problem?

[03:38] <japhb> but essentially we're pushing down hard on a big lump in the waterbed.

[03:38] <japhb> And the other parts of the bed *will* go up.

[03:39] <Aankhen``> Ah.

[03:39] <TimToady> only if it's full of water.  XS has a lot of gas...

[03:39] <japhb> OK, I'll buy that.

[03:39] <Aankhen``> Does that mean it's going to smell really bad?

[03:39] <japhb> Except ....

[03:39] <Aankhen``> Or maybe cause people to pass out?

[03:39] <japhb> When you compress a gas, you increase the pressure.

[03:39] *** weinigLap_ joined
[03:39] <wolverian> Aankhen``, yes, I think XS fits that description.

[03:39] <japhb> So if you've got a weak point, you're going to have a blowout.

[03:39] <japhb> Regardless,

[03:40] <Aankhen``> wolverian: I figured as much. ;-)

[03:40] <japhb> getting away from the pure metaphor:

[03:40] <Aankhen``> Never touched XS myself.

[03:40] <japhb> There will be things that require deep fiddling.  Like requesting zero-copy operations.

[03:40] <japhb> (just for instance)

[03:40] *** thoughtp1lice joined
[03:40] <japhb> Hopefully these fiddly bits will have an API of their own.

[03:41] <japhb> Let's please not make the fiddly bits as ugly as XS.

[03:41] <Aankhen``> Come to the daxs side, japhb.

[03:42] <japhb> anyway, that was really all I was trying to say.  Still don't know if I was clear ....

[03:42] <Aankhen``> We'll find out eventually!

[03:42] <Aankhen``> It'll probably be too late then, but at least we'll know.

[03:42] <japhb> LOL

[03:43] <Aankhen``> Have no fear.

[03:43] <japhb> ph34r

[03:43] <TimToady> for the sounds of the daxs side, see http://www.daxo.de/

[03:43] <lambdabot> Title: start

[03:43] <Aankhen``> That's alright, you can have all the ph34r you want.

[03:43] <Aankhen``> Just not fear.

[03:43] <japhb> heh

[03:45] *** daxim joined
[03:46] *** justatheory joined
[03:46] * japhb goes back to trying to figure out how to keep his perl5 process from ballooning up an order of magnitude bigger than all of the readily apparent live variables add up to ....

[03:46] <Aankhen``> TimToady: What... is that?

[03:47] <daxim> japhb, <http://search.cpan.org/dist/Devel-Leak>?

[03:51] <japhb> "This little utility module was part of Tk until the variable renaming in perl5.005 made it clear that Tk had no business knowing this much about the perl internals."

[03:51] <japhb> heh

[03:54] *** Alias_ joined
[03:56] *** weinigLap_ is now known as weinigLap

[03:57] *** thoughtp1lice is now known as thoughtpolice

[03:58] *** tewk joined
[03:58] *** cognominal joined
[04:01] <Aankhen``> japhb: LOL.

[04:16] *** weinigLap_ joined
[04:17] *** weinigLap joined
[04:36] *** Yappo joined
[04:49] *** justatheory joined
[05:06] *** BooK joined
[05:11] <gaal> spinclad: thanks, but still orz. shift-insert works as long as I don't change screen window, I forgot to mention.

[05:20] *** jisom joined
[05:34] *** kanru joined
[05:36] *** walksAtNight joined
[05:41] *** avarab joined
[05:54] *** Jmax joined
[05:59] *** buetow joined
[06:05] <meppl> good morning

[06:08] *** cozwei joined
[06:25] *** Averell joined
[06:30] <dduncan> good morning

[06:31] *** Alias__ joined
[06:33] <Tene> Sure is.

[06:42] <thoughtpolice> i suppose :p

[06:58] *** renormalist joined
[07:13] *** mj41 joined
[07:15] <svnbot6> r16591 | renormalist++ | - cperl-mode: token/regex (indenting+highlighting)

[07:18] *** cozwei joined
[07:28] *** rho joined
[07:29] <mj41> Hi, are there any disadvantages of PHP's hashs as arrays. I know that internals are different, but from users point of view? Any url?

[07:31] *** jisom_ joined
[07:33] <wolverian> mj41, PHP doesn't have arrays.

[07:35] <wolverian> imagine perl didn't have arrays.. and fear :)

[07:36] <wolverian> dduncan, I see you uploaded QDRDBMS, yay, looks good.

[07:37] <dduncan> yes

[07:37] <dduncan> it took a full year too, since the last Rosetta release, which it rewrites

[07:37] <wolverian> btw, I think s/rationales/rationale/ is more accepted

[07:38] <dduncan> are you talking to me?

[07:38] <wolverian> yeah, sorry.

[07:39] <wolverian> that's in QDRDBMS.pm

[07:39] <dduncan> I wasn't sure if you were refering to a #perl6 thread

[07:39] <dduncan> I'll look into what you mentioned ...

[07:40] <dduncan> so "providing rationales" should end in rationale?

[07:40] <dduncan> sure, I can do that

[07:40] <wolverian> ryes.

[07:40] <wolverian> s/r//

[07:41] <dduncan> okay, the next commit will have that fix

[07:42] <dduncan> I also changed a similar statement in Language.pod

[07:42] <dduncan> thank you

[07:42] <wolverian> you're welcome

[07:44] <mj41> hmm, not real arrays at all? what about performance?

[07:45] <wolverian> I don't know about the implementation, but the semantics are those of hashes

[07:50] <mj41> I found http://spyced.blogspot.com/2005/06/why-php-sucks.html ... O(1) vs. O(lg n) -> O(n)

[07:50] <lambdabot> Title: Spyced: Why PHP sucks: Jonathan's Python Blog

[07:53] <wolverian> mj41, right. there's really no way around that.

[07:53] <wolverian> (except, I suppose, special casing integer-keyed hashes, but that is a heuristic, and heuristics break.)

[07:58] <dduncan> generally speaking, I find that posting something on cpan leads me to re scanning the now htmlized documentation, and I notice small mistakes that I didn't before

[07:58] <dduncan> what you pointed out I wouldn't have noticed, but I did find a runoff sentence further below

[07:58] <dduncan> er, a sentence without an ending

[07:59] <wolverian> dduncan, "define the balance" is awkward. I don't know what it means. (QDRDBMS.pm)

[07:59] <dduncan> looking ...

[08:00] <dduncan> found it

[08:00] <wolverian> also, s/saavy/savvy/

[08:02] <wolverian> a bit later: "... nor have objects in separate threads try to access..." would that be better with "trying"? I can't quote a rule why it's wrong, it just sounds wrong as it is :)

[08:02] <dduncan> its basically saying that the database API is partly in the list of Perl routines provided by QDRDBMS.pm and AST.pm, and is partly in the data you define with the ASTs

[08:02] <dduncan> using an analogy of another DBMS ...

[08:02] <dduncan> say SQLite for example

[08:03] <dduncan> part of its API is the C functions you invoke, and part of its API is expressed in the SQL strings you pass in

[08:03] <wolverian> right. I get it now

[08:03] <dduncan> in this case, my SQL replacement is the main api, and the perl classes provide the balance

[08:03] <dduncan> okay

[08:03] <wolverian> I think it is more opaque because that's the first time you speak about ::AST

[08:03] <dduncan> looking up savvy

[08:04] <wolverian> but I'm just nitpicking, really

[08:05] <dduncan> savvy is now fixed

[08:06] <dduncan> that's fine ... its good to know if something even initially confuses someone

[08:06] <dduncan> of course, like with reporting bugs, it can also help if an alternative is suggested

[08:06] <dduncan> for now I won't change it

[08:06] <dduncan> pending such a suggestion

[08:07] <dduncan> fyi, if you're looking through all the files, I suggest visiting in this order: README, QDRDBMS.pm, AST.pm, Language.pod, SeeAlso.pod, whatever

[08:08] <dduncan> Language is the longest

[08:10] <wolverian> s,prominant,prominent,

[08:10] <wolverian> (same file)

[08:12] <wolverian> s,langugaes,languages, in Language.pod

[08:13] <Aankhen``> s,wolverian,lolcat,

[08:13] <Aankhen``> Har har.

[08:13] <Aankhen``> I kill me.

[08:14] <wolverian> I has speeling aids!

[08:14] <Aankhen``> ROTFL.

[08:14] <Aankhen``> I CAN HAZ :STDIO PLZ

[08:15] <wolverian> the : is brilliant

[08:15] <Aankhen``> Oh, wait.  s/PLZ/?/

[08:15] <Aankhen``> And s/ \?/?/

[08:15] <thoughtpolice> KTHXBYE

[08:15] <Aankhen``> lolcode++

[08:18] <thoughtpolice> definately

[08:18] *** devogon joined
[08:19] <wolverian> definitely

[08:19] <thoughtpolice> a lolcode implementation would be fun to write :)

[08:20] <Aankhen``> Heh.

[08:20] <gaal> there are a few already

[08:20] <gaal> I think there's one in python on lolcode.com

[08:20] <thoughtpolice> yeah

[08:20] <thoughtpolice> there're several

[08:20] <thoughtpolice> .net, python, perl, there's a BNF

[08:21] <Aankhen``> Perl 6: Because we need a platform to build language interpreters upon. =)

[08:21] <dduncan> you know, I suppose if I actually ran a spell-checker on my docs it would catch some things

[08:21] <thoughtpolice> one guy is actually working on getting it to run on the JVM

[08:21] <thoughtpolice> which would be pretty awesome imo

[08:21] <Aankhen``> LMAO, that would be funny.

[08:21] <dduncan> but I usually count on having good spelling in my brain, or if I'm not sure about something, i google it at time of writing

[08:21] <rgs> AWSUM THX <- at least, a polite language

[08:21] <Aankhen``> From Java to lolcode.

[08:21] <thoughtpolice> :)

[08:21] <thoughtpolice> if lolcode's turing complete: why not?!

[08:22] <Tene> Would be nice to have a "Build your own language interpreter on Perl 6!" document.

[08:22] <thoughtpolice> hah.

[08:22] <Aankhen``> Since it looks like eric256 has abandoned the BASIC implementation, I was thinking of working on it.

[08:23] <thoughtpolice> just take the haskell route; make it a DSL with a LOLmonad like dons showed :)

[08:24] <gaal> yeah

[08:27] <thoughtpolice> I would probably try to write an implementation in perl 6 or haskell, but I probably would suck at writing a grammar or somesuch. :/ I could always have fun with Parsec, though.

[08:34] <Aankhen``> <thoughtpolice> just take the haskell route; make it a DSL with a LOLmonad like dons showed :) # wha?

[08:34] <Aankhen``> I suck at writing grammars too, and I don't even know BASIC.  I figure I'll learn as I go along. :-)

[08:34] <thoughtpolice> :)

[08:35] <thoughtpolice> maybe I should try this as a little haskell side project. :)

[08:36] <gaal> looks like it has a pretty straightforward ast

[08:36] *** offby1 joined
[09:02] <dduncan> so I'm now running a spell-checker

[09:07] *** franck__ joined
[09:13] *** haelix left
[09:15] *** andara joined
[09:16] *** andara joined
[09:19] *** andara joined
[09:22] *** ahmadz joined
[09:24] *** andara joined
[09:39] <gaal> nothingmuch: ping

[09:48] *** chris2 joined
[10:06] *** Lunchy joined
[10:09] *** BooK_ joined
[10:20] *** baest joined
[10:55] *** dduncan left
[10:55] *** ruoso joined
[11:04] *** dduncan joined
[11:08] <svnbot6> r16592 | Darren_Duncan++ | ext/QDRDBMS/ : various spelling and other small fixes in 7 pod files

[11:12] *** dduncan left
[11:20] *** DrSlump joined
[11:20] <DrSlump> hiho

[11:29] *** fglock joined
[11:31] *** avarab is now known as avar

[11:34] <DrSlump> is there a "push" operator? like @a=qw/a b c/; @b=qw/d e f/; @a ,= @b wich would be @a = (@a, @b) so @a =  'a', 'b', 'c', 'd', 'e', 'f'???

[11:36] <DrSlump> or the same as push @a, @b

[11:36] <moritz> DrSlump: I think you can use a <== notation or something

[11:36] *** bonesss joined
[11:37] <moritz> DrSlump: but I'm not sure about it

[11:38] <DrSlump> moritz: oh ok, i'm having a look about it in the archives

[11:40] <DrSlump> wasnt it <~?

[11:40] <moritz> S03:1418

[11:40] *** mako132_ joined
[11:40] <moritz> "Feed operators"

[11:41] <moritz> <<== is the appending form unless I'm mistaken here

[11:41] *** andara joined
[11:43] <DrSlump> well, looking at http://dev.perl.org/perl6/doc/design/syn/S03.html , it looks like it for me too

[11:43] <lambdabot> Title: Synopsis 3: Perl 6 Operators - perl6:

[11:48] <renormalist> do feed operators work in Pugs yet? Last time I checked it seemed not. 2 weeks ago

[11:49] *** SCalimlim joined
[11:49] *** Arathorn joined
[12:13] *** mjk joined
[12:16] *** nipotan is now known as nipotaway

[12:34] *** araujo joined
[12:43] *** IllvilJa joined
[12:52] <moritz> ?eval my @a = <a b>; @a <<== <c d>

[12:52] <evalbot_r16592> Error: ␤Unexpected "<<=="␤expecting operator

[12:52] <moritz> ?eval my @a <== <a b>

[12:53] * moritz pokes evalbot_r16592 

[13:09] *** stevan__ joined
[13:12] *** andara joined
[13:15] *** [particle] joined
[13:17] <svnbot6> r16593 | moritz++ | implemented problem97.t

[13:20] *** prism joined
[13:32] *** PerlJam joined
[14:00] *** kanru joined
[14:01] *** iblechbot joined
[14:09] *** thoughtpolice joined
[14:26] <thoughtpolice> mornin'

[14:26] <moritz> hi thoughtpolice ;)

[14:27] <moritz> nearly tea time ;)

[14:27] <thoughtpolice> :)

[14:28] <thoughtpolice> here it's only 9:30am

[14:29] <thoughtpolice> and I haven't slept since like, yesterday at 5:00pm or so. so if for some reason during today I'm talking or something and I suddenly stop I probably walked off to do something and fell asleep without meaning to.

[14:29] <moritz> ;-)

[14:32] <thoughtpolice> it's happened before. pretty annoying to be honest.

[14:45] *** amnesiac joined
[15:02] *** spmane joined
[15:06] <svnbot6> r16594 | daxim++ | implemented problem46.t

[15:30] <TimToady> ?eval ?eval ?eval "6"

[15:32] <moritz> is there a canonical way how a true value stringifies? in ~?$expression for example

[15:32] <moritz> ?eval ~?5

[15:33] <moritz> TimToady: did you read the perlmonks thread on linguistic influences on perl?

[15:33] <TimToady> I think evalbot is still trying to figure out what my @a <== <a b>

[15:33] <TimToady>  means

[15:33] <moritz> ;)

[15:33] <moritz> http://www.perlmonks.org/?node_id=618673 that is

[15:33] <TimToady> I wonder if it parsed it as <= =<a b>

[15:33] <lambdabot> Title: The Germanic language form

[15:34] <TimToady> no, I usually bl before pm

[15:35] <moritz> bl?

[15:36] <TimToady> backlog

[15:36] <moritz> ok

[15:43] *** SubStack joined
[15:50] *** ml8128_ joined
[15:53] *** blaze-x_ joined
[15:53] *** Maddingu1 joined
[15:54] *** ntgrl joined
[15:54] *** gugod_ joined
[15:54] *** rgs_ joined
[15:54] *** audreyt_ joined
[15:54] *** moritz_ joined
[15:54] *** statico joined
[15:54] *** Steve_p joined
[15:55] *** rgs_ is now known as args

[15:55] *** kcwu joined
[15:57] *** f0rth joined
[15:57] *** tewk joined
[15:57] *** Psyche^ joined
[15:57] *** Psyche^ is now known as Patterner

[15:57] *** devogon joined
[15:58] *** toshinori_ joined
[15:58] *** prism joined
[16:00] *** cognominal joined
[16:02] *** f0rth_ joined
[16:06] *** andar1 joined
[16:06] <svnbot6> r16595 | andara++ | [runpugs] - Settings now go in $HOME/.webtermrc (using Config::General).

[16:06] <svnbot6> r16595 | andara++ | 	    Look at webtermrc for example settings.

[16:06] <svnbot6> r16595 | andara++ | 	  - Prompt detection now more robust.

[16:06] <svnbot6> r16595 | andara++ | 	  - Easier back-end testing with command-line REPLs (see /bin).

[16:13] *** Averell joined
[16:18] *** audreyt_ is now known as audreyt

[16:18] <svnbot6> r16596 | audreyt++ | * Pugs.Internals: Massive cleanup of the import/re-export directives

[16:18] <svnbot6> r16596 | audreyt++ |   for better readability/maintainability; no semantic changes.

[16:18] <svnbot6> r16597 | audreyt++ | * Pugs.Prim: More concise, warning-free and point-free definition of perlReplicate.

[16:18] <svnbot6> r16598 | audreyt++ | * Pugs.hs: Restructure a series of boolean tests to be more lazy

[16:24] *** weinigLap joined
[16:34] *** justatheory joined
[16:34] <japhb> audreyt: Have you done the O(1) pad and MO merges yet?  Or are they still pending?

[16:37] *** zamolxes joined
[16:39] *** rindolf joined
[16:43] *** PerlPilot joined
[16:43] *** Juerd joined
[16:43] *** wolverian joined
[16:43] <TimToady> O(1) pad is I think in, MO is not

[16:43] <TimToady> if not, O(1) is close

[16:46] *** buetow joined
[16:49] *** PerlPilot is now known as PerlJam

[17:00] *** blaze-x_ is now known as blaze-x

[17:14] *** jisom joined
[17:17] *** fglock joined
[17:20] *** justatheory_ joined
[17:23] *** [particle1 joined
[17:37] *** weinigLap_ joined
[17:38] *** weinigLap_ joined
[17:38] *** Psyche^ joined
[17:38] *** Psyche^ is now known as Patterner

[17:45] <gaal> > concat $ replicate 5 " <3 audreyt! }:)"

[17:45] <lambdabot>  " <3 audreyt! }:) <3 audreyt! }:) <3 audreyt! }:) <3 audreyt! }:) <3 audreyt...

[17:48] <daxim> cute

[17:53] <gaal> hee, r16596 is like renaming the project to XModule

[17:54] <gaal> re: perlReplicate, too bad Integer hasn't got infinity

[17:55] <gaal> then we could easily do what Chas was looking at

[17:56] <gaal> w/o a cast try to VNum

[17:59] <gaal> ugh, isn't there monadic golf to be played for the "<- and return if ok" pattern in 16598?

[17:59] <gaal> (can't think of any, but the pattern looks ugly now)

[17:59] *** iblechbot joined
[18:09] *** _bernhard joined
[18:12] <lumi> Wow, didn't know you could do that (as X)

[18:14] *** vel joined
[18:14] <svnbot6> r16599 | fglock++ | kp6-Perl6-roadmap.txt - added "development tracks"

[18:17] <gaal> for some reason, this kills the build on my snapshot 6.7 :( (doesn't like the # in unsafeCoerce#)

[18:17] <gaal> trying to work around

[18:22] <gaal> the clever thing isn't the as X, it's the overlap in X :)

[18:24] *** hatsuseno is now known as crashmatrix

[18:24] *** moritz_ is now known as moritz

[18:30] *** renormalist joined
[18:30] <lumi> That's what I meant, I didn't know you could do the overlap

[18:30] *** crashmatrix is now known as hatsuseno

[18:31] <lumi> But I guess it's only natural, normally the overlap is on epsilon

[18:31] *** electrogeek joined
[18:33] <svnbot6> r16600 | gaal++ | * Unbreak the build

[18:33] <moritz> gaal: what a cool commit message ;-)

[18:33] <lumi> gaal: I have a monadic golf for that pattern, but it's actually one line longer :P

[18:34] <lumi> Well, it's 4 lines of setup, and then a punchline

[18:34] <gaal> CPS? :-p

[18:34] <lumi> Where do we nopaste nowadays?

[18:34] <gaal> moritz: it's a pretty common one if you check the logs :)

[18:34] <lumi> nopaste?

[18:34] <lumi> Er

[18:34] <lumi> @paste

[18:34] <gaal> perlbot nopaste

[18:34] <lambdabot> Haskell pastebin: http://hpaste.org/new

[18:34] <perlbot> Paste your code at http://sial.org/pbot/perl and #perl will be able to view it

[18:35] <lambdabot> Title: sial.org Pastebot - pasteling

[18:35] <lumi> hpaste is down

[18:35] <pasteling> "lumi" at 192.115.131.248 pasted "Monadic pseudogolf" (7 lines, 246B) at http://sial.org/pbot/25306

[18:35] <moritz> gaal: nevertheless it's cool ;)

[18:36] <renormalist> gaal: does the commit msg mean I can do make install again?

[18:36] <lumi> renormalist: The build, not the install...

[18:36] <gaal> it means you can make again. :-)

[18:37] <lumi> Err, it's actually borkened I think, but you get the gist

[18:37] <lumi> The 'a x' should be just 'a'

[18:37] <gaal> lumi: needa Just

[18:38] <lumi> Right, and tryWith should return (b, Just $ f x)

[18:38] <gaal> uh, the /topic is FUDful. make install does need fixing, but that means someone should actually fix it.

[18:39] <gaal> you don't Just the result of the last application

[18:40] *** lumi changes topic to: http://pugscode.org | Brave souls needed to fix 'make Install'! Non-brave souls should avoid it for now

[18:40] <lumi> Better?

[18:40] <gaal> lumi++

[18:40] <moritz> lumi++ # indeed!

[18:40] <gaal> what happened to everything else that used to be on the topic, anyway?

[18:40] <gaal> like, paste, moose, etc.

[18:41] <lumi> gaal: Which last application?

[18:42] <gaal> findHelper xs is not Justified

[18:43] <lumi> gaal: That's recursion, I don't think it wants a Just?

[18:43] <gaal> yes, what I'm saying

[18:43] <lumi> I don't follow

[18:44] <moritz> gaal: Juerd++ swept the topic away when he announced that feather was up again ;)

[18:44] <moritz> or so I think I recall

[18:44] <gaal> lumi: ok, sorry, my mind has melted in the last heat wave and hasn't really reformed correctly

[18:44] <gaal> off for a film &

[18:46] *** SubStack joined
[18:46] *** rindolf joined
[18:46] <lumi> I'm not sure if it works, would depend on the associativity of orElse

[18:49] <gaal> (also prolly better find another name since orElse is an stm thing. re&)

[18:49] <renormalist> does anyone know what's wrong with the make install or can describe it a bit?

[18:50] <renormalist> Is there a chance to fix it or do we need special skills? Which ones?

[18:50] <rindolf> Hi all.

[18:50] <rindolf> Hi gaal 

[18:50] *** isaacd joined
[18:50] <rindolf> gaal: can you get a testimonial from the previous workplace of yours (the one with the net monitoring) about Perl?

[18:52] <Tene> rindolf: I'm curious about what you're asking for and why.

[18:52] <rindolf> Tene: I'm looking for short Perl testimonials.

[18:52] <rindolf> Tene: preferably with longer ones.

[18:52] <offby1> I testify: perl is kewl

[18:52] <offby1> can't beat that for shortness

[18:53] <Tene> rindolf: what for?

[18:54] <rindolf> Tene: for http://perl-begin.org/

[18:54] <lumi> offby1: Perl rocks!

[18:54] <lambdabot> Title: Perl Beginners' Site

[18:55] <rindolf> Every good technology site should have testimonials.

[18:55] <rindolf> Tene: have you read http://www.sparkthis.com/2006/02/slides_the_hack.html ?

[18:55] <lambdabot> Title: Spark This: Slides: The Hacker's Guide to Marketing

[18:55] <Tene> nope

[18:56] <offby1> lumi: OK, OK; you win

[18:56] <lumi> gaal: How about `failingThat` ?

[18:56] <lumi> Oh, he's gone

[18:57] <rindolf> Tene: you should - it's not very long.

[18:58] <Tene> I will once I get internet access again. :)

[18:58] <moritz> Tene: I want to be able to chat in IRC without internet access too ;)

[18:59] <Tene> using my cellphone. incompetent ISP at the office.

[18:59] <lumi> What's another way of saying "or" or "or else"?

[18:59] <rindolf> Tene: oh.

[18:59] <rindolf> Tene: firewall?

[18:59] <rindolf> lumi: otherwise?

[18:59] <rindolf> lumi: nor?

[18:59] <lumi> Yes, but that mean "true" in Haskell

[18:59] <moritz> aye

[19:00] <moritz> Tene: did't think of that, I don't have a cellphone ;)

[19:00] <rindolf> Hi moritz 

[19:00] <rindolf> moritz: what's up?

[19:00] <moritz> hi rindolf ;)

[19:00] <Tene> rindolf: net access completely down. they screwed up our routing and brainwiped their equipment here.

[19:00] <lumi> Eh, maybe I can steal otherwise for a coupla lines

[19:00] <moritz> rindolf: hacked my first two lines of pugs haskell code the other day, and I'm still proud of it ;)

[19:00] <rindolf> moritz: OK.

[19:00] <rindolf> moritz: the Pugs Haskell code scares me.

[19:01] <rindolf> I once tried to look for something there.

[19:01] <rindolf> expert Haskell is pretty scary.

[19:01] <rindolf> I like to use recursion and declaration a lot in my Haskell.

[19:01] <rindolf> But people tend to use the built-ins.

[19:01] <moritz> rindolf: I'm far form understanding that... I just fixed one builtin

[19:02] <rindolf> moritz: Haskell built-ins.

[19:02] <rindolf> moritz: like zip, etc.

[19:02] <rindolf> There are tons of htem.

[19:02] <rindolf> You can find them on zvon.org

[19:02] <moritz> rindolf: funny enough I fixed p6's zip ;)

[19:02] <Tene> moritz: specifically, cellphone+ssh+screen

[19:03] <rindolf> moritz: I'm beginning to think I'm psychic.

[19:04] <rindolf> moritz: I also called my friend just when he was thinking about me.

[19:04] <rindolf> moritz: to help someone on #perl with an Oracle problem.

[19:04] <rindolf> Who wrote god-damn awful Perl code.

[19:04] <pasteling> "lumi" at 192.115.131.248 pasted "Latest attempt -- tell me if this can be improved (or if it just sucks)" (7 lines, 336B) at http://sial.org/pbot/25307

[19:05] <lumi> rindolf: Wait, did your friend write awful Perl code, or did the someone, or did Oracle?

[19:05] <lumi> Or the problem

[19:05] <moritz> perl code stored in an oracle db?

[19:06] <rindolf> lumi: no it was the one with the problem.

[19:06] <lumi> Running a wacky ecore, possibly

[19:06] <rindolf> lumi: my friend is kind-of still experienced, but he's very intelligent and bright.

[19:06] <rindolf> s/experienced/in\0/

[19:09] <svnbot6> r16601 | fglock++ | kp6-Perl6-roadmap.txt - high level steps

[19:11] *** ludan joined
[19:15] *** penk joined
[19:19] *** japhb joined
[19:20] *** lisppaste3 joined
[19:24] *** prism joined
[19:25] <lumi> @tell gaal Circularity problem with Meta.List :/ Meta.Class defines an instance for Boxable a => Boxable [a], and also needs it locally.

[19:25] <lambdabot> Consider it noted.

[19:27] *** weinigLap joined
[19:27] <svnbot6> r16602 | audreyt++ | * Pugs.Monads: Add MonadIO instance to the MaybeT monad.

[19:27] <svnbot6> r16602 | audreyt++ |   Also simplify the `mplus` operation so the second action

[19:27] <svnbot6> r16602 | audreyt++ |   is only run when the first operation returns Nothing.

[19:27] <svnbot6> r16602 | audreyt++ |   (It used to run both and then needlessly discards the second.)

[19:27] <svnbot6> r16603 | audreyt++ | * Pugs.hs: Solve the monadic guard riddle with MaybeT.

[19:28] <lumi> Aw

[19:34] <lumi> It's certainly a more elegant solution

[19:34] <svnbot6> r16604 | audreyt++ | * Pugs.hs: Further solve the monadic guard riddle by avoiding

[19:34] <svnbot6> r16604 | audreyt++ |   an unneccessary boolean-test step.

[19:41] <svnbot6> r16605 | audreyt++ | * unobe++ changed %*CONFIG<perl5path> into %*CONFIG<perl5_path>,

[19:41] <svnbot6> r16605 | audreyt++ |   so we need to chase that in order for pugs -CPerl5 etc to work. 

[19:44] *** [particle] joined
[19:45] <rindolf> audreyt: here?

[19:45] <rindolf> TimToady: ping.

[19:45] <TimToady> pong

[19:47] <TimToady> or pung, if you prefer mah jong

[19:49] <moritz> .oO( "no pung intended" )Oo.

[19:50] *** ahmadz_ joined
[20:09] *** dduncan joined
[20:15] <fglock> english question - is pugs "Perl6-in-Haskell" or "Perl6-on-Haskell"?

[20:17] <PerlJam> fglock: it's haskell wearing a perl6 cloak

[20:30] <kolibrie> fglock: Perl6-(written-)in-Haskell or Perl6-(running-)on-Haskell

[20:31] <kolibrie> I would go for the written/implemented in Haskell name

[20:32] <moritz> yes, that's better because if it has a different backend, it's not "on haskell" any more - in some ways

[20:32] <fglock> so "6-in-6" is the compiler, and "6-on-6" is the runtime?

[20:33] <kolibrie> sounds about right

[20:33] <moritz> 6-$foo-6 ;)

[20:34] <moritz> you could always use junctions

[20:34] <moritz> 6-any<in on>-6 ;)

[20:38] <lumi> 6-{<in on>any>-6

[20:38] <lumi> Erk

[20:38] <lumi> 6-{<in on>.any}-6

[20:38] <moritz> <in on>.pick

[20:38] <fglock> 6..*

[20:39] <PerlJam> pick 6?

[20:39] <moritz> <6 6 6 6 6 6 6 6>.pick

[20:46] *** silug joined
[20:50] *** sergio joined
[20:51] *** sergio left
[21:03] *** [particle1 joined
[21:05] *** jasenger joined
[21:08] *** weinigLap joined
[21:10] *** jasenger left
[21:14] <svnbot6> r16606 | lwall++ | [STD.pm] Allow $obj.@candidates form.

[21:15] <moritz> @karma lwall

[21:15] <lambdabot> lwall has a karma of 82

[21:15] *** ruz_ joined
[21:16] <TimToady> that guy's head is getting too big for his britches...er, wait...

[21:16] <PerlJam> What's his head doing in his britches to begin with?!?!?

[21:17] <diakopter> reminds me of something my grandmother often said - 'my eyes were too big for my stomach.'

[21:17] <moritz> I'd think two eyes fit easily into a stomach ;)

[21:17] <moritz> diakopter: we have that saying in German as well

[21:18] <diakopter> (on her failure to eat her apportioned selections from Luby's buffet)

[21:20] <lumi> We have a similar expression

[21:21] *** penk joined
[21:36] <japhb> moritz: For the topic change right after http://moritz.faui2k3.org/irclog/out.pl?channel=perl6;date=2007-06-01#id_l496 , the topic doesn't actually appear.  And this time I checked View Source to make sure it actually was missing from the HTML.  ;-)

[21:36] <lambdabot> Title: IRC log for #perl6, 2007-06-01, http://tinyurl.com/yv284k

[21:36] *** Corion joined
[21:37] <moritz> japhb: you're right... investigating...

[21:37] *** Corion left
[21:38] *** prism joined
[21:40] <Aankhen``> for 1 .. 10 -> $x { our &::("foo" . $x) := regex { $x } }; # is this a valid way to create a bunch of regexes dynamically?  Will it close over $x correctly?

[21:41] *** ilbot_test joined
[21:41] <TimToady> well, you need ~ rather than .

[21:41] <Aankhen``> Er, yes, sorry.

[21:42] <Aankhen``> Stupid brain is still half stuck in P5.

[21:42] <TimToady> other than that I don't see why it shouldn't work

[21:42] <Aankhen``> Kewl.

[21:42] *** IllvilJa joined
[21:42] *** moritz changes topic to: http://pugscode.org/ | Brave souls needed to fix 'make Install'! Non-brave souls should avoid it for now

[21:42] <Aankhen``> And since grammars can export rules, IIRC, is this also valid: for 1 .. 10 -> $x { our &::("foo" . $x) is export(:DEFAULT) := regex { $x } };

[21:43] <Aankhen``> Ugh, again with a s/ \. / ~ /

[21:44] *** ilbot_test joined
[21:49] *** ilbot_test joined
[21:50] <svnbot6> r16607 | moritz++ | [irclog] now topic changes should be reported correctly, japhb++

[21:51] *** irclogbot joined
[21:54] <japhb> Thx, moritz++

[21:58] *** weinigLap joined
[22:11] <renormalist> does the smart-match ~~ work for every type of arguments or are there argument of any kind that are forbidden to match with ~~ ?

[22:12] *** dmitriy joined
[22:13] <PerlJam> renormalist: nothing is forbidden in perl : )

[22:13] <PerlJam> er, :-)

[22:14] <renormalist> PerlJam: I know. I just have a look over an article and don't whether it's ok to say smartmatch works for every argument.

[22:14] <renormalist> s/don't/don't know/

[22:15] <japhb> Well, it should "work", but that doesn't mean it will actually be "smart" and DWYM.

[22:15] <moritz> ?eval class A {} class B {} A.new ~~ B.new

[22:15] <PerlJam> renormalist: the last section of S05 is entitled "Matching against non-strings" and says, in part, "Anything that can be tied to a string can be matched against a regex."

[22:17] <PerlJam> renormalist: and S03 has big table that tells you how smart matching works among the various standard things

[22:18] <PerlJam> (in a section entitled "Smart matching" oddly enough)

[22:19] <PerlJam> I'd be more definitive, but the information contained in the Synopses has changed since I last read them  :)

[22:21] <renormalist> I see. So I will use the term "practically everything"     (not sure whether "practically" is used the same way as it is in german)

[22:21] <renormalist> Although "practically everything" can practically mean everything. :-)

[22:21] <moritz> renormalist: "quasi" is a nice word ;)

[22:22] <moritz> renormalist: in both english and german ;)

[22:22] <renormalist> moritz: naaaaaaja :-)

[22:27] *** penk joined
[22:41] *** lumi joined
[22:49] *** weinigLap joined
[23:09] *** buetow joined
[23:14] *** weinigLap_ joined
[23:17] *** demq joined
[23:45] *** [particle] joined
[23:46] <renormalist> TimToady: What is the official state of the STD grammar. Is "nearly complete" a correct term in an article?   I want to correct the term "a large part of Perl6 is already defined...". That sounds too lame IMHO.

[23:46] <renormalist> the "large part" term is from someone else, not me :-)

[23:47] <renormalist> (damn, did I miss the timezone shift again?)

[23:48] *** mr_ank joined
[23:49] <japhb> renormalist: It is just before 5 PM in this timezone (US west coast)

[23:53] <[particle]> renormalist: as timtoady has said before, "we're done with the first 80%, and well into the second 80%"

[23:54] <renormalist> [particle]: then I leave it "a large part" :-)

