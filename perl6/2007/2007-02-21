[00:13] *** charsba__ joined
[00:15] *** nbrown04 joined
[00:16] *** neonse joined
[00:17] *** justatheory joined
[00:29] * Debolaz looks at the new ruby benchmarks.

[00:30] <moritz> Debolaz: the ones that appeared on /.?

[00:30] <avar> parrot be sloww:)

[00:31] <avar> and very incomplete

[00:31] <[particle]> *extremely* incomplete

[00:31] <[particle]> it can do 2 + 2

[00:31] <moritz> but for arbitrary integers... I can't do that ;))

[00:35] <Debolaz> moritz: Yes.

[00:41] *** Aankhen`` joined
[00:59] *** nipotaway is now known as nipotan

[01:09] *** nothingmuch joined
[01:28] <putter> Hmm.  Looks like src/perl6/Perl-6.0.0-STD.pm doesn't have regex aliases yet.  fudging...

[01:37] <TimToady> regex aliases?

[01:38] <TimToady> I'm just about to check in a major overhaul on symbol processing that uses less magic

[01:41] <TimToady> you mean the {*} #= thingies?

[01:44] <svnbot6> r15315 | lwall++ | symbol processing now uses normal capture.

[01:44] <svnbot6> r15315 | lwall++ | endsyms are done with context sigs on the proto tokens.

[01:44] <svnbot6> r15315 | lwall++ | the only magic is now that proto sig contexts are expected to propagate

[01:44] <svnbot6> r15315 | lwall++ |     context var declarations even if the multi adds a (--> Foo) sig.

[01:46] *** UWC joined
[01:51] <TimToady> putter: or do you mean naming a [...] and calling back to it?

[01:55] <putter> mumble := construct   where mumble is a named/numbered scalar, array, or hash alias, or an external scalar, array, or hash alias. ;)

[01:55] <putter> $3 := (foo)

[01:57] <TimToady> oh, yeah, it's missing...

[01:57] <TimToady> hmm

[01:59] <putter> arg.  the parrot rx_ tests repeatedly use a target string.  which starts with \n and continues through $% on to 0123 etc.  so the question is, what can you do toi this string so that \n is expanded but $% isn't.  ($% expands as "0", so guess where the first <alnum> hit is :).  weeeeee.

[02:00] <putter> ah, well.  special casing coming up.

[02:01] <putter> re alias, I used a modified version of misc/Grammars/rx_grammar.pm's.

[02:10] <TimToady> took a whack at adding it.

[02:10] <svnbot6> r15316 | lwall++ | Added regex binding

[02:10] <TimToady> decommuting &

[02:12] <putter> :)

[02:34] *** REPLeffect joined
[02:40] *** Caelum joined
[02:40] *** Limbic_Region joined
[02:45] *** weinig is now known as weinig|zZz

[03:06] <putter> Anyone around who understands the p6 "logical newline" concept?

[03:07] <avar> in say and such?

[03:09] *** justatheory joined
[03:09] <svnbot6> r15317 | lwall++ | fixed syntax error, added more #= to regex

[03:11] <avar> TimToady: Do you recall when in perl history you brought in Henry Spencer's regexp code? It's for an evolving joke in re::engine::POSIX docs

[03:11] * avar snickers

[03:11] <putter> it initially seems like p5's /\n/ has a different concept of what \x0a and \x0d patterns should be matched than p6 does

[03:12] <avar> # $1 works too, but one should never half-ass nostalgia

[03:12] <avar> s/\(.*\)/string: \1/g;

[03:12] <avar> :)

[03:12] <putter> (or so I'm currently interpreting some rx_ test failures)

[03:13] <TimToady> I believe that was version 2

[03:14] <TimToady> but the switch from \(...\) to (...) was version 1

[03:14] <TimToady> putter: \n is intentionally different in p6

[03:15] <TimToady> \n is "newline character" in Perl 5.

[03:15] <TimToady> in P6 it's "logical newline", even if that's more than one character

[03:15] <putter> or even if it's just \r?

[03:15] <TimToady> or a newline character from another culture

[03:16] <putter> k

[03:16] <TimToady> \x0D was newline on old macs

[03:16] <TimToady> maybe new macs too

[03:16] *** silug joined
[03:17] <TimToady> so a bare \r is interpreted as a newline as well.

[03:18] * putter very very (blow of the dust decades old) fuzzy recollection is that one can't unambiguously count "platform independent newlines".  no idea what the screw case was.  i could easily be wrong.

[03:18] <TimToady> in p5 \n was just \x0A on most machines but \x0D on macs

[03:19] <allbery_b> windows ises 0x0d 0x0A as newline, but you sometimes get unixy files or even files which mix them

[03:19] <allbery_b> and then there's the question of what to do with 0x0A 0x0D..

[03:20] * putter just needs a regex for p6 n and N ... sigh

[03:21] <TimToady> \N is just [<!before \n>.]

[03:22] <putter> :)

[03:23] <TimToady> \n to the first approx is \r\n?|\n\r?|\x2028|\x2029

[03:24] <TimToady> probably reverse the first two to put the common case first

[03:26] <putter> someone has a  LF-CR convention?  if not, is it worth risking off-by-one out of sync problems.

[03:27] <avar> putter: working or P::C::R?

[03:28] <putter> misc/pX/Common/yet_another_regex_engine

[03:29] <putter> ach, but I'm really all set for now.  knock off a few more tests and call it a night.

[03:30] <putter> current design principle is "don't do it right, just pass the tests".  Did I mention we really really need more regex tests?  Maybe we can scavange some from all the perl compatible regex libraries out there.  Or write a generator.  Or...

[03:31] <TimToady> except, of course, they'd do \n wrong from our perspective...

[03:33] <TimToady> dinner &

[03:33] <putter> cheers

[03:33] <putter> (easiest bug fix is removing a broken test:)

[03:55] <tene> argh

[03:55] <tene> it really bugs me when people say "astericks" instead of "asterisk"

[03:55] <tene> wow.  mischan.

[03:55] * tene fails.

[03:56] <revdiablo> Haha

[03:56] <revdiablo> I was about to chime in agreement

[03:58] *** mr_ank joined
[03:59] <putter> getting there.  but the next bit (overhauling captures to be spec) will be painful (because the engine itself is using the current, non-spec, capture behavior).  ah well.

[03:59] <svnbot6> r15318 | putter++ | misc/pX/Common/yet_another_regex_engine - some progress.  p6 rx_ tests currently 75% ok, 11 sec.

[04:00] <putter> and whitespace handling is a complete kludge.  and no ratchet.  and... enough unto the day. ;)

[04:04] <putter> good night &

[04:06] *** forsaken joined
[04:07] *** stevan__ joined
[04:31] *** amnesiac joined
[04:48] *** CardinalNumber joined
[04:50] *** avarab joined
[04:54] *** avarab is now known as avar

[05:51] *** charsbar_ joined
[06:01] *** silug joined
[06:15] *** BooK joined
[06:30] *** jisom joined
[06:32] *** jisom joined
[06:32] *** jisom left
[06:33] *** jisom joined
[06:43] *** dduncan joined
[06:46] *** rfordinal_ is now known as rfordinal

[07:04] *** devogon joined
[07:11] *** forsaken joined
[07:32] *** czth_ joined
[07:43] *** polettix joined
[07:48] *** iblechbot joined
[08:15] *** ProperNoun joined
[08:27] *** TimToady joined
[08:33] *** CardinalNumber joined
[08:49] *** marmic joined
[09:03] *** silug joined
[09:03] *** rashakil_ joined
[09:03] *** rfordinal joined
[09:03] *** wilx joined
[09:03] *** rhr joined
[09:03] *** takesako__ joined
[09:03] *** cookys joined
[09:03] *** SamB joined
[09:03] *** TreyHarris joined
[09:03] *** kolibrie joined
[09:03] *** spo0nman joined
[09:03] *** stef_ joined
[09:03] *** mugwump joined
[09:03] *** Odin- joined
[09:03] *** jamessan joined
[09:03] *** Gothmog_ joined
[09:03] *** nnunley joined
[09:09] *** rafl joined
[09:36] *** elmex joined
[09:41] *** silug joined
[09:41] *** rashakil_ joined
[09:41] *** rfordinal joined
[09:41] *** wilx joined
[09:41] *** rhr joined
[09:41] *** takesako__ joined
[09:41] *** cookys joined
[09:41] *** SamB joined
[09:41] *** TreyHarris joined
[09:41] *** kolibrie joined
[09:41] *** spo0nman joined
[09:41] *** stef_ joined
[09:41] *** mugwump joined
[09:41] *** Odin- joined
[09:41] *** jamessan joined
[09:41] *** Gothmog_ joined
[09:41] *** nnunley joined
[09:41] *** TreyHarr1s joined
[10:05] *** the_dormant joined
[10:13] *** ruoso joined
[10:35] *** dduncan left
[10:48] *** ruoso joined
[11:05] *** nipotan is now known as nipotaway

[11:10] *** drbean joined
[12:02] *** IllvilJa joined
[12:04] *** chris2 joined
[12:11] *** Caelum_ joined
[12:13] *** buetow joined
[12:14] *** ProperNoun joined
[12:23] *** rhizo joined
[12:43] *** drupek12212 joined
[12:50] *** sunnavy joined
[13:07] *** the_dormant joined
[13:12] *** iblechbot joined
[13:18] *** elmex joined
[13:19] *** integral_ is now known as integral

[13:21] *** lisppaste3 joined
[13:28] *** Limbic_Region joined
[13:44] *** Psyche^ joined
[13:50] <Limbic_Region> @tell audreyt grats on getting out of the hospital, thanks for the journal updates, and well wishes towards a speedy and permanent recovery

[13:50] <lambdabot> Consider it noted.

[14:02] *** Psyche^ is now known as Patterner

[14:04] <devbot6> planet6: Audrey Tang: Pugscode.org services. <http://pugs.blogs.com/pugs/2007/02/pugscodeorg_ser.html>

[14:13] *** VanilleBert joined
[14:17] *** CardinalNumber joined
[14:22] *** stevan__ joined
[14:24] <VanilleBert> /eval multi infix:<zip> ($a, $b) { zip($a, $b) }; multi infix:<ZZ> ($a, $b) { zip($a, $b) }; [1,2] zip <a b> ZZ <A B>

[14:24] <moritz> VanilleBert: try it with ?eval ;)

[14:24] <VanilleBert> ?eval multi infix:<zip> ($a, $b) { zip($a, $b) }; multi infix:<ZZ> ($a, $b) { zip($a, $b) }; [1,2] zip <a b> ZZ <A B>

[14:24] <VanilleBert> :D

[14:24] <evalbot_r15314> (((1, "a"), "A"), ((2, "b"), "B"))

[14:25] <VanilleBert> ZZ looks ugly

[14:25] <[particle]> so does &&

[14:25] <[particle]> so use 'zip'

[14:26] <VanilleBert> ?eval [1,2] Y <a b> zip <A B> ZZ <chees beast>

[14:26] * Limbic_Region votes for creating a new unicode character that looks like a zipper

[14:26] <evalbot_r15314> Error: ␤Unexpected "zip"␤expecting operator

[14:27] <VanilleBert> oh

[14:27] <VanilleBert> damn eval dont use past definitions

[14:28] <jamessan> ¥ almost looks like a zipper

[14:28] <VanilleBert> i think Y also looks like a zipper...

[14:28] <Limbic_Region> VanilleBert - do you know have pugs installed locally?  

[14:29] <VanilleBert> not on this machine... but currently i use run.pugscode

[14:29] <Limbic_Region> VanilleBert - perhaps http://feather.perl6.nl:8080/runpugs/? would work better for you

[14:29] <lambdabot> Title: Run Perl 6 Now -- in your browser!

[14:29] <Limbic_Region> heh

[14:30] <VanilleBert> yes i use it right now

[14:30] *** weinig|zZz is now known as weinig|bbl

[14:31] <gaal> Limbic_Region: in light of U+2336..2395, hell, why stop at one character.

[14:32] <gaal> the APL has the bestest smileys, too! ⍨

[14:32] <gaal> s/APL /APL plane /

[14:33] *** the_dormant joined
[14:39] *** awwaiid joined
[14:43] *** vel joined
[14:54] *** Psyche^ joined
[14:57] *** xdg_ joined
[15:08] *** Psyche^ is now known as Patterner

[15:10] *** Psyche^ joined
[15:14] *** ScuderiaKimi joined
[15:14] *** ScuderiaKimi left
[15:15] <gaal> @tell audreyt can you link me to a paper with the kind of typing you have in mind as alternative for V{Pure,Mut,Ext}? Or is this some simpler encoding?

[15:15] <lambdabot> Consider it noted.

[15:17] *** kanru joined
[15:27] *** Psyche^ is now known as Patterner

[15:35] *** thepler joined
[15:58] *** chris2 joined
[16:00] *** VanilleBert left
[16:01] *** mj41 joined
[16:10] *** ProperNoun joined
[16:26] *** nipra joined
[16:26] <specbot6> r13699 | larry++ | ?\194?\165 is replaced by Z.  XX becomes simply X and old X must now be spelled X~X.

[16:27] <TimToady> ooh, specbot fails its unicode roll...

[16:30] *** chris2 joined
[16:41] *** ashelyb_ joined
[17:09] *** theorbtwo joined
[17:27] *** macli joined
[17:28] *** bonesss joined
[17:40] *** mrossetti joined
[17:45] *** rashakil__ joined
[17:55] *** araujo joined
[17:56] *** mrossetti left
[18:01] <Limbic_Region> TimToady audreyt et all - a question from tye at PerlMonks on the CB

[18:01] <Limbic_Region> tye - "Java finalizers are defined to be untimely, unordered, and even unrequired. This makes me more curious how Perl6's finalizers are supposedly better than destructors on at least some of those points."

[18:07] <Limbic_Region> anyone?

[18:20] *** bonesss joined
[18:33] *** weinig|bbl is now known as weinig

[18:38] *** Xad joined
[18:39] *** Xad left
[18:41] *** weinig is now known as weinig|away

[18:47] *** eric256 joined
[18:48] <eric256> is there an easy way to access the last value of a for loop? without doing state $last; and then $last = $_ at the bottum of the loop. i remember a discusion about that before but i'll be darned if i remember how to do it

[18:52] <diotalevi> If your for loop is really just a search then first{} will get you there directly.

[18:52] <diotalevi> er, wait. I thought this was #cbstream. dang.

[19:01] <gaal> eric256: I think the solution was to write the loop with while rather than for...

[19:03] *** mr_ank joined
[19:03] <eric256> hmm i'm not sure that a while buys me much more that for with the states, but i'll give it a shot

[19:05] *** jisom joined
[19:06] *** jisom left
[19:06] *** awwaiid_ joined
[19:06] *** jisom joined
[19:07] <eric256> is http://pugs.kwiki.org/?ConvertingPerl5ToPerl6 dead?

[19:11] <wolverian> hm, scala's Iterable trait has an .exists method that is basically any(). I find the naming quite convenient, so there's e.g. Set.exists. </random observation> 

[19:12] *** CardinalNumber joined
[19:25] *** justatheory joined
[19:30] *** CardinalNumber is now known as ProperNoun

[19:33] * [particle] has 10 unexpectedly succeeding tests

[19:33] <[particle]> 9 in t/pmc/mmd.t

[19:33] <[particle]> 1 in t/pmc/threads.t

[19:39] <moritz> I'll have to update and smoke again ;)

[19:39] * [particle] thinks his unexpected successes are due to having built languages/perl5

[19:40] <jisom> what would be the right regex/rule/whatever to match any byte over 0x80?

[19:40] <[particle]> something that works in perl 6 as specced, or today on parrot?

[19:40] <jisom> parrot

[19:41] <jisom> to see is something's text or binary, I'm using <cntrl-[\t\r\n ]+[\x80..\xff]>

[19:41] <jisom> until parrot get's something better

[19:44] <[particle]> checking...

[19:44] <[particle]> you can do a pir closure

[19:45] <eric256> are there sets ?  like can i have a set of 1-9 and then remove other sets from it?  /me is thinking of a soduko solver ;)

[19:46] <jisom> I'm just trying to figure out if a line is binary or ascii with an error prone heuristic

[19:47] <[particle]> isn't there a printable?

[19:47] <[particle]> so, you want to match non-ascii, basically

[19:47] <[particle]> actually, non latin-1 (>255)

[19:48] <jisom> print fails on tabs I believe....

[19:49] <[particle]> your overall goal is to determine whether a file is binary or text, correct?

[19:49] <jisom> yes

[19:49] <[particle]> eric256: there is a sudoku solver already, i think

[19:49] <[particle]> coke and leo may know more

[19:49] <jisom> in parrot, examples/pir/sudoku.pir :)

[19:49] <[particle]> but you can use an array or a string to do that set

[19:52] *** theorbtwo joined
[19:53] *** UWC joined
[19:53] <svnbot6> r15319 | lwall++ | Some precedence cleanup, some sublanguage reworking.

[19:53] <eric256> particle yes, but that doesn't mean it can't be doe agian ;) besides the one there is labeled specificaly as not working

[19:54] <eric256> it was the removing elements from sets etc that i was interested in, i can program them, but if we had set and set operators built in then that would be better to use ;)

[19:55] <[particle]> eric256: we have arrays, which you can use

[19:55] <[particle]> or stringss

[19:56] <eric256> yes particle i read that the first time you said it.  it isn't a SET but it can be used as one, there was talk before about adding actual real sets to the language which would have set operators associated with them..hence why i asked here to see if someone knew what became of that,

[19:56] <eric256> i found some stuff in the docs but they appear to refer to useing <<+>> and >>+<< on sets, but those are now hyperops...hard to track stuff and how it changes sometimes

[19:57] <[particle]> that's perl 6, not parrot

[19:57] <[particle]> if you're looking for perl 6 syntax, go to #perl6 on freenode

[19:57] <[particle]> and yes, perl 6 has sets

[19:57] <jisom> isn't this?

[19:57] <moritz> [particle]: this _is_ #perl6

[19:57] <[particle]> aw, crap

[19:58] <[particle]> sorry!

[19:58] * jisom wants to know how to get '<cntrl-[trn]> | <[x80..xff]>' to do what he expects

[19:58] <moritz> eric256: normally [particle] gives quite good answers, give him another chance ;-)

[19:58] * [particle] had the plaster in his office blown off the walls by insulation installers today. he's more than a bit frazzled

[19:58] *** stevan__ joined
[19:59] <moritz> jisom: perhaps define a rule for that?

[19:59] <eric256> hehe lmao

[20:00] <eric256> sorry about the plaster particle, but that is a funny image (i was laughing about your "this IS perl6" ;)

[20:00] <eric256> http://groups.google.com/group/perl.perl6.language/browse_frm/thread/e87485ee422a60ee/764a84ba937bd73f?#764a84ba937bd73f seems to talk about sets, but i'll be darned if i can tell if they've been included, or not, or morphed into something else

[20:01] <lambdabot> Title: perl.perl6.language | Google Groups, http://tinyurl.com/2fjovd

[20:01] <tene> See, I thought it was a joke.

[20:01] <[particle]> there is a Set role, but dunno if there's a Set object in pugs atm

[20:01] <[particle]> ?eval my $foo is Set;

[20:01] *** evalbot_r15314 is now known as evalbot_r15319

[20:01] <evalbot_r15319> \undef

[20:02] <[particle]> well, seems to compile

[20:02] <wolverian> the type is ignored currently, I think

[20:02] <eric256> lol i'll look around and see what i can find. thanks.  /me goes to dig through tests and examples in the hope of finding something

[20:02] <wolverian> ?eval my $foo is Bar

[20:02] <evalbot_r15319> \undef

[20:02] <eric256> ?eval my $lunch is Now;

[20:03] <eric256> per poetry will never be the same agian

[20:03] <evalbot_r15319> \undef

[20:03] <[particle]> eric256: feel free to use http://run.pugscode.org to play, too

[20:03] <lambdabot> Title: Run Perl 6 Now -- in your browser!

[20:03] <[particle]> jisom: i'm rebuilding parrot now, but may soon have a rule with pir closure that works

[20:03] <jisom> alright

[20:03] <eric256> yea i'm on feather playing...run.pugscode.org didn't like me the other day, kept timing out

[20:04] <[particle]> ah, great. feather++

[20:04] <jisom> I'm a little surprised not to see a "ascii" rule

[20:04] <eric256> yea i was amazed my account didn't get pruned after the 8 months of innactivity, trying to catch up on the changes since then is....daunting

[20:05] <[particle]> i hope the few things that haven't changed give you comfort :)

[20:05] <jisom> still ghc?

[20:05] <[particle]> yeah, but different version

[20:08] *** xdg_ joined
[20:12] *** xdg_ joined
[20:15] *** xdg_ is now known as xdg

[20:21] *** xdg joined
[20:24] *** Caelum_ is now known as Caelum

[20:30] *** awwaiid joined
[20:31] *** dduncan joined
[20:36] *** miyagawa joined
[20:53] *** buetow joined
[21:00] *** bombastic1 joined
[21:05] *** vel joined
[21:17] *** weinig|away is now known as weinig

[21:19] *** awwaiid joined
[21:22] *** ruz joined
[21:27] *** dduncan left
[21:33] *** Aankhen`` joined
[21:49] *** pdcawley joined
[21:50] *** dduncan joined
[21:52] *** TreyHarr1s is now known as TreyHarris

[21:57] *** DebolazX joined
[22:06] *** Caelum joined
[22:10] *** awwaiid joined
[22:33] *** Psyche^ joined
[22:42] *** Psyche^ is now known as Patterner

[22:43] *** orbit_ joined
[22:49] *** orbit_ left
[22:51] <wolverian> http://thread.gmane.org/gmane.comp.lang.scala/4142 hm, nice

[22:51] <lambdabot> Title: Gmane Loom

[23:00] *** UWC_ joined
[23:03] *** UWC_ is now known as UWC

[23:05] *** |newbie| joined
[23:06] *** CardinalNumber joined
[23:24] *** CardinalNumber is now known as ProperNoun

[23:28] *** BooK joined
[23:28] *** stevan_ joined
[23:33] *** IllvilJa left
[23:37] *** Limbic_Region joined
[23:42] *** xdg joined
[23:50] *** stevan_ joined
