[00:14] *** amnesiac joined
[00:41] *** baest joined
[00:45] <dduncan> fyi, I made a p6l post proposing an alteration to how the @ and % sigils are used ... feedback there is appreciated

[00:49] <Juerd> Didn't like it, because much of the present day expressive power for sigils is in signatures

[00:49] <Juerd> And I expect signatures to play a big role.

[00:50] *** nipotaway is now known as nipotan

[00:51] <dduncan> my impression was that the current use of @foo and %bar was rather limited situations, and that @$foo or %$foo are a fine or superior alternative

[00:51] <dduncan> in the same places

[00:54] *** justatheory joined
[00:55] <dduncan> so then, @$foo would just be the new spelling for @foo in places where the distinction matters ... while that is longer, the @ isn't used everywhere the variable name is, just in the minority of places where it has something to say

[00:55] <dduncan> you lose nothing

[01:34] <obra> timtoady++ # Language design is hard.  Let's go shopping!  :-)

[01:39] *** baest joined
[01:39] *** edenc joined
[01:39] *** IllvilJa joined
[01:39] *** mr_ank joined
[01:39] *** qmole joined
[01:39] *** bones`cochilo joined
[01:39] *** dduncan joined
[01:39] *** drupek12 joined
[01:39] *** penk joined
[01:39] *** Patterner joined
[01:39] *** azawawi joined
[01:39] *** jjore-w joined
[01:39] *** stevan_ joined
[01:39] *** araujo joined
[01:39] *** svnbot6 joined
[01:39] *** zamolxes joined
[01:39] *** BooK joined
[01:39] *** rfordinal joined
[01:39] *** offby1 joined
[01:39] *** fridim joined
[01:39] *** rashakil_ joined
[01:39] *** wolverian joined
[01:39] *** lumi joined
[01:39] *** Casan joined
[01:39] *** ofer joined
[01:39] *** kolibrie joined
[01:39] *** Gothmog_ joined
[01:39] *** QtPlatypus joined
[01:39] *** TreyHarris joined
[01:39] *** arguile joined
[01:39] *** pasteling joined
[01:39] *** cls_bsd joined
[01:39] *** buu joined
[01:39] *** orafu joined
[01:39] *** takesako___ joined
[01:39] *** Yaakov joined
[01:39] *** allbery_b joined
[01:39] *** kcwu joined
[01:39] *** SamB joined
[01:39] *** GeJ joined
[01:39] *** rgs joined
[01:39] *** masak joined
[01:39] *** Caelum joined
[01:39] *** perlbot joined
[01:39] *** gaal joined
[01:39] *** nothingmuch joined
[01:39] *** mtve joined
[01:39] *** takanori joined
[01:39] *** Daveman joined
[01:39] *** cernd joined
[01:39] *** Tene joined
[01:39] *** shachaf joined
[01:39] *** Maddingue joined
[01:39] *** LCamel joined
[01:39] *** dvorak joined
[01:39] *** Lunchy joined
[01:39] *** drbean joined
[01:39] *** evalbot_r16296 joined
[01:39] *** clkao joined
[01:39] *** wilx joined
[01:39] *** statico joined
[01:39] *** pjcj joined
[01:39] *** Loro_ joined
[01:39] *** nekokak joined
[01:39] *** TimToady joined
[01:39] *** mj41 joined
[01:39] *** ingy joined
[01:39] *** Southen joined
[01:39] *** blaze-x joined
[01:39] *** tewk joined
[01:39] *** idiotmax joined
[01:39] *** cognominal joined
[01:39] *** jikuty joined
[01:39] *** ruz joined
[01:39] *** cj joined
[01:39] *** rlb3_work joined
[01:39] *** awwaiid joined
[01:39] *** Teratogen joined
[01:39] *** mugwump joined
[01:39] *** Kattana joined
[01:39] *** ajs_ joined
[01:39] *** gnuvince joined
[01:39] *** JarJarBinks joined
[01:39] *** rhr joined
[01:39] *** catch23 joined
[01:39] *** bas joined
[01:39] *** lidden joined
[01:39] *** nelhage joined
[01:39] *** specbot6 joined
[01:39] *** buubot joined
[01:39] *** jql joined
[01:39] *** amnesiac joined
[01:39] *** stef__ joined
[01:39] *** ashleyb joined
[01:40] *** Aankhen`` joined
[01:40] *** oceanlab joined
[01:40] *** Khisanth joined
[01:40] *** diakopter joined
[01:40] *** electrogeek joined
[01:40] *** theorbtwo joined
[01:40] *** avar joined
[01:40] *** f0rth joined
[01:40] *** frobnitz joined
[01:40] *** charsbar joined
[01:40] *** autark joined
[01:40] *** jvoorhis joined
[01:40] *** Grrrr joined
[01:40] *** tokuhirom_ joined
[01:40] *** yves_ joined
[01:40] *** spinclad joined
[01:40] *** scw joined
[01:40] *** Juerd joined
[01:40] *** Eidolos joined
[01:40] *** nnunley joined
[01:44] *** trippeh joined
[01:44] *** meppl joined
[01:46] *** japhb joined
[01:46] *** SubStack joined
[01:46] *** ddwagnz joined
[01:56] *** ddwagnz left
[02:01] *** toshinori joined
[02:02] *** khisanth_ joined
[02:03] *** khisanth_ is now known as Khisanth

[02:04] *** b00t joined
[02:17] *** Khisanth joined
[02:30] *** REPLeffect joined
[02:36] *** stevan__ joined
[03:00] *** perlDreamer joined
[03:04] *** justatheory joined
[03:09] <perlDreamer> in t/TASKS there's a task for removing all the :todo marks and marking the tests as failing or using todo subs.

[03:09] <perlDreamer> If I wanted to use the subs, which version should they marked as to be done?

[03:13] *** mako132_ joined
[03:38] *** REPLeffe1t joined
[03:40] *** REPLeffe1t joined
[03:43] *** REPLeffe1t left
[03:45] *** REPLeffect joined
[04:13] *** REPLeffect joined
[04:17] *** REPLeffect joined
[04:18] <azawawi> ?eval say "hello!";

[04:18] <evalbot_r16296> OUTPUT[hello!␤] Bool::True

[04:18] <azawawi> ?eval say "Perl is cool!";

[04:18] <evalbot_r16296> OUTPUT[Perl is cool!␤] Bool::True

[04:18] *** b00t joined
[04:25] *** the_dormant joined
[04:48] *** edenc joined
[05:06] *** BooK_ joined
[05:09] *** nop joined
[05:22] *** jisom joined
[05:39] *** frobnitz joined
[05:52] <svnbot6> r16297 | agentz++ | [t/TASKS]

[05:52] <svnbot6> r16297 | agentz++ | - removed the "todo" sub task since we're moving to

[05:52] <svnbot6> r16297 | agentz++ |   jerry's smart comments like "### todo: pugs 6.28.0"

[05:52] <svnbot6> r16297 | agentz++ |   or something like that. thanks perlDreamer++ for

[05:52] <svnbot6> r16297 | agentz++ |   pointing that out.

[05:52] *** agentzh joined
[05:57] <rhr> if I say something like $s = \x[1234] what controls the encoding?  something like use utf8?  is utf8 always the default if no encoding is specified?

[05:58] <rhr> and how would you specify a different encoding for one string without changing the default?

[05:58] <svnbot6> r16298 | agentz++ | [t/TASKS]

[05:58] <svnbot6> r16298 | agentz++ | * added a new task for implementing Jerry's TODO smart

[05:58] <svnbot6> r16298 | agentz++ |   comments in the test harness. some examples are

[05:58] <svnbot6> r16298 | agentz++ |   also added.

[06:02] *** agentzh left
[06:12] *** jisom_ joined
[06:14] <rhr> Str.chars doesn't appear in S02, should it? I'm assuming it should mean whichever of .bytes/.codes/.graphs/.langs is selected by use bytes/codes/etc., and that the default is .graphs

[06:15] <rhr> in pugs, .codes, .graphs, and .chars all mean .codes at present

[06:16] <rhr> ?eval my $u = "\x[0041,0300]"; say $u; $u.graphs

[06:16] *** evalbot_r16296 is now known as evalbot_r16297

[06:16] <evalbot_r16297> OUTPUT[À␤] 2

[06:16] <rhr> also, how do you specify unicode normalization forms?

[06:20] <Aankhen``> rhr: From S02, "In the abstract, Perl is written in Unicode, and has consistent Unicode semantics regardless of the underlying text representations.", so I guess it works out to `use utf8` on steroids. :-)

[06:20] <lambdabot> Aankhen``: You have 1 new message. '/msg lambdabot @messages' to read it.

[06:20] <Aankhen``> @messages

[06:20] <lambdabot> agentzh said 16h 48m 33s ago: could you take a look at that load event handler when you have the tuits? it's indeed running 10+ or even 20+ times during a single loading. (location.hash = '...' is

[06:20] <lambdabot> not the cause)

[06:23] <rhr> Aankhen``: that's fine until you do IO :)

[06:25] <rhr> Str.bytes doesn't make any sense if no encoding is specified

[06:25] <Aankhen``> @tell agentzh I'm not seeing the load handler run more than once on Firefox; a profiling session shows that it runs once, calling addEvent 83 times (or more, or less, depending on the number of smartlink snippets).  Which browser did you see this behaviour under?

[06:25] <lambdabot> Consider it noted.

[06:46] <svnbot6> r16299 | rhr++ | misc unicode tests, add smartlinks

[06:50] *** buetow joined
[06:52] <ingy> seen gaal

[06:52] <ingy> seen gaal?

[06:52] <japhb> @seen gaal

[06:52] <lambdabot> gaal is in #haskell and #perl6. I don't know when gaal last spoke.

[06:52] <japhb> ETOOMANYBOTSYNTAXES

[06:52] <Aankhen``> LOL.

[07:03] *** iblechbot joined
[07:06] <Aankhen``> Heh.

[07:06] <Aankhen``> Un-heh, I just realized what I thought was funny really wasn't. :-(

[07:07] <japhb> :-)

[07:07] <Aankhen``> Don't laugh at me!

[07:09] <Aankhen``> Man, Perl 6 regexes look like a parsing nightmare.

[07:12] *** REPLeffe1t joined
[07:13] <japhb> Not when you can use them to parse themselves.  ;-)

[07:13] <Aankhen``> Fair enough.

[07:13] <Aankhen``> I'd hate to be the one bootstrapping them, though. :-P

[07:14] *** franck__ joined
[07:14] <Aankhen``> I wonder how it'll work if and when Perl 6 regexes are used in other languages.  I guess every language would have to specify its own parser for { ... }?

[07:14] <Aankhen``> Or rather, re-use its parser.

[07:14] <japhb> In fact, I'd say that STD itself is a fair test of the rubber-to-the-road value of the grammar design, exercising a lot of the features that make grammars more useful than mere regexen

[07:15] <Aankhen``> Such as?

[07:16] <japhb> I'm basing that comment on the fact that $Larry has updated the grammar design several times to make STD cleaner.

[07:16] <Aankhen``> Ahh.

[07:18] *** justatheory joined
[07:22] <Aankhen``> I don't understand the bit about multi regexes.

[07:22] <Aankhen``> proto token sigil; multi token sigil:sym<$>  { <sym> } # what is the "sym" there?

[07:22] <Aankhen``> I mean… what does `sigil:sym<$>` break down to?

[07:24] <japhb> I believe it allows him to use a single rule body for multiple possible symbols ($ @ % and so on, in this case).  I'm not looking at STD at the moment, so I'm not sure that's correct, but I seem to recall that reasoning

[07:25] <Aankhen``> Right, but I don't understand the long name. :-S

[07:25] * Aankhen`` cries.

[07:25] <Aankhen``> (I'm reading S05, BTW.)

[07:32] *** dduncan left
[07:34] *** buetow joined
[07:34] * Aankhen`` wonders if the greatly increased expressive power of Perl 6 regexes will lead to a lot of mixing of logic, not unlike mixing presentational logic with business logic.

[07:35] <Aankhen``> I know that you can use (?{...}) and (??{...}) in Perl 5 today—however limited they might be—but it seems to be much easier to do that sort of stuff (squared) in P6.

[07:38] <rhr> Aankhen``: look at regex cmd in examples/password-manager.p6 for an example of that

[07:39] <Aankhen``> Heh, I see that.

[07:40] <Aankhen``> That doesn't work, does it?

[07:40] <rhr> Aankhen``: the sym thing has something to so with wanting to distinguish the symbol being parsed from the name of the rule that parses it, but I don't understand the details...

[07:40] *** the_dormant joined
[07:40] <rhr> no, it doesn't work with pugs yet

[07:40] <Aankhen``> I see.

[07:41] <Aankhen``> Yeh, I figured the $<...> at the very least would break it.

[07:41] <rhr> I don't even really know what does and doesn't work in regexes in pugs

[07:43] <Aankhen``> subset NumberBase of Int where /^ (\d+) { 2 <= $0 <= 64 || fail } $/;

[07:43] <Aankhen``> Er.

[07:43] <Aankhen``> I suppose that was a bad example, since numbers aren't the best thing to run regexes on.

[07:44] <Aankhen``> Regardless, I'm trying to figure out whether something like that is a fair use of regexes, or something that will come back to haunt me.

[07:45] <rhr> subset Identifier of Str where /^ <ident> $/

[07:45] <Aankhen``> Well, that seems like a basic, logical subtype.

[07:46] <Aankhen``> What about this?  subset User of Str where /^ <ident> { check_database_for_user($<ident>) or fail } $/

[07:46] <Aankhen``> That's on the other extreme, isn't it?

[07:47] <rhr> could be useful

[07:47] <Aankhen``> Well, it seems like it would give you more useful error info if that sort of logic weren't within the regex.

[07:48] <Aankhen``> sub foo (User $bar) { ... } vs. sub foo (Str $bar) { check_database_for_user($bar) || fail "User does not exist"; }

[07:48] <rhr> I think you can do ... or fail "No such user"

[07:48] <Aankhen``> First case, you just get an error saying $bar must satisfy the User type constraint.  Second case, you get a message explicitly saying the user does not exist.

[07:49] <Aankhen``> Yeah, you could.  Maybe I'm just reaching.

[07:49] <rhr> but that probably doesn't print the error for you

[07:50] <rhr> and you may not want to print it anyway

[07:50] <Aankhen``> True.

[07:53] <Aankhen``> Eh, you could possibly write your entire program within one giant rule, much beyond password-manager.p6 =)

[07:54] <Aankhen``> Oh, I actually wanted this earlier: /^ (\d+) <?{ 2 <= $0 <= 64 }> $/;

[07:56] <rhr> well, regex cmd is already 99% of the main loop :)

[07:57] <Aankhen``> True, but the full program has too much non-regex stuff in it. <G>

[07:59] <Aankhen``> regex unescaped_slash { <!after <~~>> \\ } # does this look right?

[08:03] <rhr> slash or backslash?

[08:04] <Aankhen``> Well, backslash.

[08:04] <rhr> what does ~~ have to do with backslash?

[08:05] <Aankhen``> "A leading ~~ indicates a recursive call back into some or all of the current rule."

[08:05] <Aankhen``> <~~>       # call myself recursively

[08:05] <rhr> oh, didn't know that

[08:07] <Aankhen``> regex unescaped_backslash { <!after <~~>> \\ }; regex unescaped_string (Str $str) { <!after unescaped_backslash> $str }; # don't I have imaginative names? :-D

[08:10] <Aankhen``> All this stuff about controlling backtracking makes my head hurt.

[08:10] <Aankhen``> One second it all makes sense, the next I'm left reeling again.

[08:11] <rhr> I've had that feeling.  Need to write some code, but too much doesn't work yet...

[08:12] <Aankhen``> Heh.

[08:29] *** kunwon1 joined
[08:35] *** lichtkind joined
[08:39] *** buetow joined
[08:39] *** b_jonas joined
[08:59] <svnbot6> r16300 | rhr++ | Lots of failing unicode bytes/codes/chars tests

[09:10] *** riffraff joined
[09:10] <riffraff> hi

[09:10] <moritz> hi riffraff ;)

[09:13] <riffraff> it seem I found a wonderful heisenbug related to returning junctions from routines and depending on the want'ed type

[09:14] <riffraff> from time to time $foo =some_routine_returning_jun().values will end up with "()" but if I assign to a @array everything alays work fine

[09:28] *** ruoso joined
[09:28] <moritz> ?eval ((1,2,3) Z (5,4,3)).map(&infix:<+>)

[09:28] *** evalbot_r16297 is now known as evalbot_r16300

[09:28] <evalbot_r16300> (4.0, 2.0)

[09:29] <moritz> not what I expected ;)

[09:29] <moritz> but propably it works how it should

[09:29] <riffraff> really unexpected :)

[09:30] <moritz> ?eval ((1,2,3) Z (5,4,3)).map([+] $_)

[09:30] <evalbot_r16300> Error: Cannot cast from VList [VUndef] to Pugs.AST.Internals.VCode (VCode)

[09:30] <moritz> or do I have to use some kind of @$_?

[09:32] <riffraff> ?eval [[1,2]].map(&infix:<+>)

[09:32] <evalbot_r16300> (2.0,)

[09:33] <riffraff> mh

[09:33] <riffraff> ?eval &infix:<+>(1,2)

[09:33] <evalbot_r16300> 3

[09:34] <riffraff> ?eval &infix:<+>([1,2])

[09:34] <evalbot_r16300> Error: No compatible multi variant found: &infix:+

[09:54] *** nferraz joined
[09:59] *** rindolf joined
[10:19] *** buetow joined
[10:51] *** DarkWolf84 joined
[10:54] *** ruoso joined
[10:54] *** ddwagnz joined
[10:58] *** chris2 joined
[11:00] <spinclad> ?eval ((1,2,3) Z (5,4,3)).map({[+] $_})

[11:00] <evalbot_r16300> (6, 6, 6)

[11:04] *** fridim joined
[11:04] *** rashakil_ joined
[11:04] *** wolverian joined
[11:04] *** lumi joined
[11:04] *** Casan joined
[11:04] *** ofer joined
[11:04] *** kolibrie joined
[11:04] *** Gothmog_ joined
[11:04] *** QtPlatypus joined
[11:04] *** TreyHarris joined
[11:04] *** arguile joined
[11:04] *** pasteling joined
[11:04] *** cls_bsd joined
[11:04] *** buu joined
[11:04] *** orafu joined
[11:04] *** takesako___ joined
[11:04] *** Yaakov joined
[11:04] *** allbery_b joined
[11:04] *** kcwu joined
[11:04] *** SamB joined
[11:04] *** GeJ joined
[11:04] *** rgs joined
[11:04] *** masak joined
[11:04] *** Caelum joined
[11:04] *** perlbot joined
[11:04] *** gaal joined
[11:04] *** nothingmuch joined
[11:04] *** mtve joined
[11:04] *** takanori joined
[11:04] *** Daveman joined
[11:04] *** cernd joined
[11:04] *** Tene joined
[11:04] *** shachaf joined
[11:04] *** Maddingue joined
[11:04] *** LCamel joined
[11:04] *** dvorak joined
[11:04] *** Lunchy joined
[11:04] *** drbean joined
[11:04] *** evalbot_r16300 joined
[11:04] *** clkao joined
[11:04] *** wilx joined
[11:04] *** statico joined
[11:04] *** pjcj joined
[11:04] *** Loro_ joined
[11:04] *** nekokak joined
[11:04] *** TimToady joined
[11:04] *** mj41 joined
[11:04] *** ingy joined
[11:04] *** Southen joined
[11:04] *** blaze-x joined
[11:04] *** tewk joined
[11:04] *** idiotmax joined
[11:04] *** cognominal joined
[11:04] *** jikuty joined
[11:04] *** ruz joined
[11:04] *** cj joined
[11:04] *** rlb3_work joined
[11:04] *** awwaiid joined
[11:04] *** Teratogen joined
[11:04] *** mugwump joined
[11:04] *** Kattana joined
[11:04] *** ajs_ joined
[11:04] *** gnuvince joined
[11:04] *** JarJarBinks joined
[11:04] *** rhr joined
[11:04] *** catch23 joined
[11:04] *** bas joined
[11:04] *** lidden joined
[11:04] *** offby1 joined
[11:04] *** rfordinal joined
[11:04] *** zamolxes joined
[11:04] *** svnbot6 joined
[11:04] *** araujo joined
[11:04] *** jjore-w joined
[11:04] *** Patterner joined
[11:04] *** penk joined
[11:04] *** drupek12 joined
[11:04] *** qmole joined
[11:04] *** mr_ank joined
[11:04] *** IllvilJa joined
[11:04] *** baest joined
[11:04] *** nelhage joined
[11:04] *** specbot6 joined
[11:04] *** buubot joined
[11:04] *** jql joined
[11:04] *** stef__ joined
[11:04] *** oceanlab joined
[11:04] *** diakopter joined
[11:04] *** electrogeek joined
[11:04] *** theorbtwo joined
[11:04] *** avar joined
[11:04] *** f0rth joined
[11:05] *** charsbar joined
[11:05] *** autark joined
[11:05] *** jvoorhis joined
[11:05] *** Grrrr joined
[11:05] *** tokuhirom_ joined
[11:05] *** yves_ joined
[11:05] *** spinclad joined
[11:05] *** scw joined
[11:05] *** Juerd joined
[11:05] *** Eidolos joined
[11:05] *** nnunley joined
[11:05] *** trippeh joined
[11:05] *** meppl joined
[11:05] *** japhb joined
[11:05] *** stevan__ joined
[11:05] *** BooK_ joined
[11:05] *** frobnitz joined
[11:05] *** iblechbot joined
[11:05] *** REPLeffe1t joined
[11:05] *** franck__ joined
[11:05] *** kunwon1 joined
[11:05] *** b_jonas joined
[11:05] *** riffraff joined
[11:05] *** rindolf joined
[11:05] *** ruoso joined
[11:05] *** chris2 joined
[11:18] *** Alias_ joined
[11:21] <svnbot6> r16301 | rhr++ | [t/builtins/strings/unicode.t] Readability improvements to substr tests

[11:37] *** fglock joined
[11:37] <Tene> ?eval (1,2,3) Z (4,5,6)

[11:37] <evalbot_r16300> ((1, 4), (2, 5), (3, 6))

[11:38] <Tene> ?eval map (1,2,3) Z (4,5,6), {[+] $^a}

[11:39] <evalbot_r16300> Error: Cannot cast from VList [] to Pugs.AST.Internals.VCode (VCode)

[11:39] <Tene> ?eval map {[+] $^a}, (1,2,3) Z (4,5,6)

[11:39] <evalbot_r16300> ((1, 4), (2, 5), (3, 6))

[11:39] <Tene> ?eval ((1,2,3) Z (4,5,6)).map: {.say}

[11:40] <evalbot_r16300> OUTPUT[14␤25␤36␤] (Bool::True, Bool::True, Bool::True)

[11:40] <Tene> ?eval ((1,2,3) Z (4,5,6)).map: {[+] $^a}

[11:40] <evalbot_r16300> (5, 7, 9)

[11:44] *** wolverian joined
[11:53] *** nipotan is now known as nipotaway

[11:57] *** the_dormant joined
[12:33] *** [particle] joined
[12:36] *** ddwagnz joined
[12:37] <pasteling> "rhr" at 65.94.38.10 pasted "pugs syntax error I don't understand" (63 lines, 2.9K) at http://sial.org/pbot/24890

[12:41] <kolibrie> that's weird that it works in the interactive shell but not on the command-line

[12:41] <rhr> yes, it is

[12:44] <moritz> does it work if you remove the Int before @combining?

[12:44] <rhr> nope

[12:45] <moritz> weird

[12:45] <rhr> I'm a magnet for weird pugs bugs, apparently

[12:45] <moritz> I can't spot either a syntax error nor a particularly sophisticated syntax

[12:46] *** ddwagnz left
[12:47] *** buetow joined
[12:48] <rhr> hmm, deleting most of the numbers in the array gets rid of the error

[12:49] *** iblechbot joined
[12:51] <rhr> nevermind, there's a missing comma

[12:51] <Tene> Heh.

[12:53] <rhr> not sure how it went missing, that was all generated by a perl script

[12:56] <moritz> and perl scripts are bug free[tm]

[12:58] <rhr> actually, I probably hit x in vim or something by mistake

[13:03] <lumi> But the useless error is sil la bug, right?

[13:03] <svnbot6> r16302 | rhr++ | [Prelude.pm] add Str.graphs, make Str.chars return Str.graphs

[13:04] <lumi> s/sil la/still a/

[13:04] <rhr> yeah, that was a pretty confusing error message

[13:07] *** jerrylee joined
[13:14] *** thepler joined
[13:21] *** stevan__ joined
[13:42] *** chris2 joined
[13:42] *** fglock joined
[13:43] *** rfordinal_ joined
[13:44] *** zzzz joined
[13:45] <zzzz> ?eval print "Hello World"

[13:45] *** evalbot_r16300 is now known as evalbot_r16302

[13:45] <evalbot_r16302> OUTPUT[Hello World] Bool::True

[13:45] <zzzz> ?eval print "Hello World" . (1+1);

[13:45] <evalbot_r16302> Error: ␤Unexpected "."␤expecting operator, ":" or ","

[13:45] <zzzz> ?eval print "Hello World" . (1+1)

[13:45] <evalbot_r16302> Error: ␤Unexpected "."␤expecting operator, ":" or ","

[13:46] <zzzz> ?eval print "Hello World" + (1+1)

[13:46] *** ashleyb joined
[13:46] <evalbot_r16302> OUTPUT[2] Bool::True

[13:46] <diakopter> ?eval print "Hello World" ~ (1+1)

[13:46] <evalbot_r16302> OUTPUT[Hello World2] Bool::True

[13:50] *** lisppaste3 joined
[13:50] *** ashelyb_ joined
[14:04] *** veritos joined
[14:06] *** Tanktalus joined
[14:10] *** amnesiac joined
[14:20] <Teratogen> is Perl 6 just gonna end up another flavor of Lisp?

[14:24] <blaze-x> is man "just" going to be another flavor of ape?

[14:24] <blaze-x> :)

[14:26] <Teratogen> man is going away, it's all gonna be "info" now

[14:28] <Teratogen> can we expect Perl 6 by Christmas

[14:28] <Teratogen> make it, like, a big Christmas present to the world

[14:29] <Teratogen> before we blow ourselves up or get hit by an asteroid or global warming runs rampant

[14:29] <Teratogen> I mean, you know, we could all go before you get this thing done

[14:30] <Teratogen> did you know that there are huge whirlpools of discarded plastic (the size of Texas) in our oceans? That could kill the oceans?

[14:30] <[particle]> PHEAR.

[14:30] <Teratogen> and that honeybee colonies are dieing off in record numbers?

[14:30] <Teratogen> you gotta get a move-on or there'll be nobody to use Perl 6!

[14:30] <kolibrie> we're in this for the fun

[14:31] <Teratogen> oh well that's a totally different story then

[14:31] <Teratogen> have fun =)

[14:31] <Teratogen> let the world crumble around you

[14:32] <Teratogen> the yellowstone caldera could erupt!

[14:35] <Teratogen> it will be neat though

[14:35] <Teratogen> I assume Perl 6 will be an interpreter AND a compiler?

[14:35] <Teratogen> compile to native code?

[14:36] <Juerd> It will compile to Parrot native code, probably.

[14:36] *** jisom joined
[14:36] <Juerd> Something else can, if needed, take care of compiling parrot bytecode to system native code, but I doubt it's very useful.

[14:37] <[particle]> we call that JIT

[14:38] <Teratogen> right

[14:38] <Teratogen> hi Juerd =)

[14:38] <Teratogen> I'm trolling this morning

[14:39] <[particle]> i see that

[14:39] <Teratogen> about to take my medz, eat some food, and crash.

[14:39] <Juerd> [particle]: Not everything is jit'ed, I thought

[14:39] <Teratogen> am bored.

[14:39] <[particle]> i'm sure perl 6 (the product) will be fun someday. perl 6 (the journey) is fun now.

[14:39] <Teratogen> the only thing I don't like is sigil invariance

[14:39] <Teratogen> it isn't Perlish!

[14:40] <[particle]> i disagree

[14:40] *** Loro_ joined
[14:40] <Teratogen> the way sigils work in Perl 5 make a Perlish kind of sense

[14:40] <[particle]> juerd: not everything *yet* (if ever)

[14:40] *** b_jonas joined
[14:41] <Teratogen> and how do you do a slice now?

[14:41] <Teratogen> (in Perl 6)

[14:41] <[particle]> teratogen: don't get so hung up on syntax. perl 6 expresses a much wider set of semantics in a much friendlier way

[14:42] <Teratogen> ok

[14:42] <[particle]> so, the syntax changed a bit--that doesn't make it less perlish

[14:42] <gnuvince> Teratogen: my @slice = %hash<foo bar baz>;

[14:42] <[particle]> it might make it less perl 5-ish

[14:43] <jisom> not everything needs to be jitted, optimization isn't always guaranteed, plus do you really expect to jit "add_parent" for a class?

[14:43] * jisom goes back to his amd64 jit attempt

[14:44] <[particle]> jisom: how's that going, btw?

[14:44] <blaze-x> in relation to that, whould it somehow be possible to use . on a string for concatination (I only know perl5, but assuming that maybe the string object protoype could be overridden somehow?)

[14:44] <[particle]> blaze-x: syntax that looks something like "foo".concat("bar") ?

[14:44] <blaze-x> although that would probably make it "foo".("bar")? I'm not up to speed with perl6 development

[14:45] <jisom> eh, no longer working 58 hours a week at work, so now have time.......got a decent collection of whitepapers from AMD about it all......so now it's actually coding

[14:45] <[particle]> jisom: i noticed you've  been quiet. glad to see it's a good quiet :)

[14:46] <blaze-x> [particle]: well, no, that would be too php'ish for my taste, but then again, I'm so used to . for concat, I might get used to ',' , but '~' ... hmm.. I though about ways around it as I had read it :p 

[14:47] <jisom> well, we can always use a perl5 compiler

[14:47] <[particle]> blaze-x: yes, i'm sure there will be something like that. maybe like "foo".~("bar", "baz")

[14:47] <blaze-x> also, although those ~ probably look quite nice on mac, I'm using a dos font from waaay back, I'm addicted to it, my consoles look like back in the bbs days, with ~ on the topline very high

[14:47] <[particle]> i'd have to read the SYN to know for sure though

[14:48] <[particle]> ole!

[14:48] <Juerd> blaze-x: Why do you want . for concatenation?

[14:48] <blaze-x> Juerd: third-finger-going to . brainwash?

[14:48] <Juerd> blaze-x: Takes just a week to get used to the new operators

[14:48] <[particle]> oh, you mean just '.'. i thought you meant a method form of concat

[14:49] <Juerd> Andthat's a very broad guess.

[14:49] <Juerd> estimation

[14:49] <blaze-x> [particle]: no, indeed

[14:49] <Juerd> It took me two days.

[14:49] <Juerd> Really, brainwashing isn't a big problem.

[14:50] <blaze-x> hmmm, you could be right, I'm not there yet, bu-ut (being on qwerty), concatination is done with one hand ([",\.']), if you include ~ using both is required

[14:51] <blaze-x> although whilest typing, I must say that I probably will get used to it :)

[14:51] <Juerd> Switch to dvorak

[14:51] <Juerd> Where "', is on the left side :)

[14:51] <Juerd> As is ~`

[14:51] <blaze-x> hehe, myes, that's on my todo list for like soo long :)

[14:51] <jisom> then go to work and type, people will call you crazy

[14:51] <Juerd> blaze-x: How much spare time do you have next two weeks?

[14:52] <Juerd> blaze-x: Could you make room for one hour per day? I have a great dvorak course for you

[14:52] <Juerd> I'll buy you a beer at a Perl event if you don't manage to touch type dvorak within those two weeks, with practicing only one hour a day.

[14:53] <blaze-x> Juerd: have a few projects which need to finish (they are on the laptop) once I switch to my desktop pc, I'm willing to give it a go

[14:53] <Juerd> blaze-x: Contact me by that time then :)

[14:53] <blaze-x> oh and btw, I'm probably the only hacker who doesn't drink beer (being from belgium and al, that's unusual :))

[14:53] <Juerd> I don't drink any myself. It's an expression

[14:53] <Juerd> "Favourite not too expensive beverage."

[14:54] * kolibrie doesn't drink beer, but he does type dvorak

[14:54] <blaze-x> sure, just thought it was curious, but seems i'm not alone :)

[14:54] <Juerd> kolibrie++

[14:54] <Juerd> blaze-x: Where in .be do you live?

[14:54] <blaze-x> Juerd: flemisch brabant

[14:54] <Juerd> Oh, that's not far from where I live

[14:54] <blaze-x> like 20mins from the capital

[14:55] <Juerd> I live a few km from the Dutch (N-)Brabant border, in Zuid-Holland.

[14:55] <blaze-x> ah, I see, cool.

[14:55] <blaze-x> wasn't there an upcoming YAPC in europe>

[14:55] <Juerd> Yes, in August

[14:55] <Juerd> In Vienna

[14:56] <blaze-x> darn, /me hates traveling (don't ask why :))

[14:56] <blaze-x> but since my gf has been nagging like crazy to go on holiday, this might be a perfect opportunity

[14:56] <blaze-x> she's a geek too (well math geek actually) so she might even like the meetings

[15:00] <blaze-x> btw, I'm interested in the possible uses of perl6 conversion to other languages, esp javascript. could someone enlighten me about the implications of this, 

[15:00] <Juerd> It's compilation, not conversion

[15:01] <blaze-x> ie: will we see some kind of CGI which can reform itself into a hybrid client/server model, pushing to the client what it wants and keeping serverside what it wants

[15:01] <Juerd> It's theoretically possible to compile any language to any other language, if external features like I/O are either sufficiently supported, or not used.

[15:02] <Juerd> Compiling C to ELF isn't much different from compiling Perl 6 to Javascript, from an extremely high level view.

[15:02] <Juerd> But don't think it's translation, because it's not.

[15:02] <blaze-x> ok, compilation, my bad.

[15:03] <blaze-x> but I'm wondering about the impact of this, will this create new opportunities for the web?

[15:03] <Juerd> 1 + 5 may wind up as enoaenuth(notehuoe(1), notehuoe(5)), or something even much more complex.

[15:03] <Juerd> Not unless Javascript gets MUCH faster soon.

[15:04] <obra> Juerd: see the new VM adobe's contributeed to the mozilla project

[15:04] <Juerd> Compiling to javascript is a few steps backwards in execution speed.

[15:04] <Juerd> obra: Ooh, interesting. I think I might look up some reading material on that tonight.

[15:04] <obra> tamarind.

[15:04] <Juerd> noted

[15:04] <obra> though the work ms has done with the DLR (not clr) is interesting for many of the same reasons.

[15:05] <blaze-x> Juerd: unless you distribute the payload over the clients, and reading about @[1,2,3] ~ @[a,b,c] (syn?) being split up in 3 separate concats...

[15:05] <Juerd> I don't know what @[] is.

[15:05] <blaze-x> probably the wrong syntax, sorry

[15:06] <blaze-x> but I meant that it is done in 3 independant calls, so you execute them parralell, no?

[15:06] <blaze-x> I'm probably using bad terminology, need to do some more reading...

[15:10] <[particle]> you mean hyper operators

[15:11] <blaze-x> yes, (or I think so :)

[15:12] <[particle]> S03?

[15:12] <[particle]> rats, i was hoping somebody made that specbot i've been talking about

[15:15] <blaze-x> indeed, a hyper operator

[15:16] <Juerd> [particle]: Specbot?

[15:17] <[particle]> i'd like a bot that can recite the spec

[15:17] <Juerd> That's way too much data for irc

[15:17] <[particle]> a query like "S03?" would give you a link to the spec

[15:17] <Juerd> Ah

[15:17] <Juerd> I use tnx.nl/S03

[15:18] <[particle]> one like "S03:1127-29" would give you those lines

[15:18] <Juerd> Erh

[15:18] <[particle]> and maybe it'd be limited to 10 or 15 lines, so as not to drive folks mad

[15:18] <Juerd> The specs don't have line numbers. It has floated paragraphs.

[15:19] <[particle]> the pod is canon

[15:19] <Juerd> Bah

[15:19] <Juerd> Nah, I don't like that idea

[15:19] <[particle]> well, there could be "S03/Hyper Operators" queries, too, if you like

[15:20] <[particle]> TimToady and others (me included) use line numbers

[15:20] <[particle]> until each verse (like the bible) is numbered, that's the best way to be clear and succinct so far

[15:21] <Juerd> Sure, but reciting on irc is a bad idea.

[15:21] <[particle]> well, i think otherwise :)

[15:21] <[particle]> would you prefer nopaste?

[15:22] <Juerd> I'd prefer a link to the entire document, properly #'ed

[15:23] <[particle]> the html is generated. i want quick and easy access to the source.

[15:23] <Juerd> Then the source needs to be htmlified <pre> with <a id>

[15:23] <[particle]> but, i'm unlikely to write it

[15:23] <Juerd> Or something like that, but not lines on irc

[15:23] <[particle]> what's wrong with irc?

[15:24] <Juerd> Nothing's wrong with irc as long as such bots aren't written ;)

[15:24] <Juerd> Multiline stuff on irc is problematic because it disturbs normal conversations.

[15:24] <Juerd> IRC is line based

[15:25] <Juerd> It's not even *possible* to flood 15 lines at once, so you need a delay. During the delay, people will talk, and it'll be a mess.

[15:25] <[particle]> i can write

[15:25] <[particle]> more than one line at once

[15:26] <Yaakov> You need a separate channel, moderated, for the output.

[15:26] <[particle]> oh, heh, that's a client thing.

[15:26] <Juerd> You can't output 15 lines in one go, pasteling 

[15:26] <Juerd> eh, [particle] 

[15:26] <Juerd> example... 1

[15:26] <Juerd> example... 2

[15:26] <Juerd> example... 3

[15:26] <Juerd> example... 4

[15:26] <Juerd> example... 5

[15:26] <Juerd> example... 6

[15:26] <Juerd> example... 7

[15:26] <Juerd> example... 8

[15:26] <Juerd> example... 9

[15:27] <Juerd> example... 10

[15:27] <Juerd> example... 11

[15:27] <Juerd> example... 12

[15:27] <Juerd> example... 13

[15:27] <Juerd> example... 14

[15:27] <Juerd> example... 15

[15:27] <Juerd> That was: /exec -o perl -le'print "example... $_" for 1..15'

[15:27] <Juerd> You'll notice how the first few lines were floodod at once, while the others are delayed a second each, by my client, to prevent that I'm killed by the server (excess flood)

[15:28] <[particle]> what i'm after is a mechanism for sharing information when discussing the spec

[15:29] <[particle]> so everyone in the channel can be a part of it without having a copy of the spec on their machine for reference

[15:29] <Juerd> I think URLs are great for that.

[15:29] <[particle]> if the response from the bot is nopasted, fine.

[15:30] <Juerd> Why nopaste it if you can have static documents online?

[15:30] <Juerd> It's a piece of cake to wrap some html around the literal pod

[15:30] <[particle]> if we have line-numbered pod documents online, that's fine too

[15:30] <Juerd> Yea

[15:30] <Juerd> I think that's much easier AND much better than such a bot.

[15:31] <Juerd> The line numbers should be links to the lines

[15:31] <[particle]> still be nice to get a link made up for you

[15:31] <Juerd> So you can easily copy/paste that.

[15:31] <Juerd> You shouldn't have to manually type in line numbers.

[15:31] <Juerd> I'll see if I can build something like this today.

[15:32] <[particle]> juerd++

[15:32] <Juerd> Probably less than 30 minutes work

[15:33] *** rhandom joined
[15:35] <jerrylee> any good tutorials on teaching Haskell?

[15:36] <Juerd> jerrylee: http://svn.perl.org/perl6/pugs/trunk/docs/01Overview.html, under "Where can I learn more about Haskell?"

[15:36] <lambdabot> Title: Pugs Apocryphon 1

[15:37] <jerrylee> Juerd: thanks :D

[15:38] <Juerd> The pleasure of googling is all mine.

[15:44] *** iblechbot joined
[15:45] *** silug joined
[16:06] *** jisom_ joined
[16:09] *** jisom joined
[16:13] *** azawawi joined
[16:13] *** azawawi is now known as zperl

[16:14] *** bernhard joined
[16:16] *** fglock joined
[16:16] <svnbot6> r16303 | rhr++ | [Prelude.pm] in Str.graphs, comment the future need for units in substr

[16:16] <rhr> what kind of object is 1.as(Codes) (S02:620) supposed to be?

[16:17] *** fglock left
[16:18] <Tene> ?eval 1.as(Codes)

[16:18] <evalbot_r16302> Error: No such method in class Int: &as

[16:18] <rhr> I remember from way back there was conjecture that arbitrary units for Nums would be supported via something like 42`mm + 23`furlongs

[16:18] *** fglock joined
[16:18] *** veritos joined
[16:18] <[particle]> ?eval 1.returns(Codes)

[16:19] <veritos> hello

[16:19] <evalbot_r16302> Error: No such method in class Int: &returns

[16:19] <Tene> That's an interesting suggestion

[16:19] <rhr> might 1.as(Codes) fit into the same scheme?  that would be cool

[16:22] <zperl> hi

[16:22] <Tene> zperl: Hi!

[16:23] <xinming_> lwall++ I finally realized what the powfulness roles have. perl6 rocks really. :-) >_<

[16:28] <TimToady> xinming_: please blame chromatic for introducing roles to Perl 6

[16:28] <TimToady> Codes(1)

[16:31] <jerrylee> bye guys

[16:31] <fglock> hi

[16:31] <TimToady> howdy

[16:32] <xinming_> It's fun to get the new understanding of a technoligy... >_<

[16:32] <japhb> fglock: refreshed from time off?

[16:32] <xinming_> how to spell technoledgy correctly? >_<

[16:32] <TimToady> probably tired out... :)

[16:32] <japhb> "I need a vacation from that vacation!"

[16:32] <TimToady> xinming_: whatever communicates is fine

[16:33] <fglock> I've been taking a look at history of computer languages - interesting read

[16:33] <fglock> mostly smalltalk & lisp

[16:33] <gnuvince> smalltalk++

[16:34] <rindolf> Hi fglock, TimToady, xinming_, gnuvince 

[16:34] <fglock> rindolf: hi

[16:34] <rindolf> gnuvince: my problem with Smalltalk is that Squeak is so much different from anything I'm used to.

[16:34] <rindolf> fglock: what's up?

[16:35] <gnuvince> rindolf: Squeak isn't the only Smalltalk.

[16:35] <rindolf> gnuvince: yes.

[16:35] <rindolf> gnuvince: is there anything better?

[16:36] <japhb> Well, Squeak is the one to be installed on many millions of OLPC laptops, so it will be the de facto main one in the not too distant future, methinks.

[16:36] <gnuvince> Depends on what you mean by better; you have Cincom Smalltalk, VisualAge Smalltalk, Dolphin Smalltalk, Abrai Smalltalk

[16:36] <rindolf> gnuvince: and GNU Smalltalk...

[16:36] <TimToady> rhr: yes, Str.bytes would fail unless the object in question had a visible encoding mixed in or delegated.

[16:36] <fglock> rindolf: just trying to see Perl 6 from a different angle; perhaps from an evolutional POV

[16:36] <gnuvince> Cincom Smalltalk is probably the most widespread 

[16:37] <rhr> TimToady: ok, so it's $str does utf8

[16:37] <japhb> You know, I wonder if it's doable to get Parrot released in time to go on OLPC 2 (2009 or later, I think ...)

[16:38] <rhr> is there a 'use utf8' to make that a default?

[16:38] <zperl> ?eval $z=1+2

[16:38] *** evalbot_r16302 is now known as evalbot_r16303

[16:38] <evalbot_r16303> \3

[16:38] <zperl> $eval $z

[16:38] <zperl> ?eval $z

[16:38] <[particle]> japhb: join us!

[16:38] <evalbot_r16303> \undef

[16:38] <fglock> isn't Parrot usable right now?

[16:39] <TimToady> you can't really force a string to be utf-8 if it doesn't want to be

[16:39] <TimToady> in general it should be the generator of the string deciding whether to supply the bytes abstraction layer.

[16:40] <xinming_> rindolf: hi

[16:40] <rhr> ok, good enough

[16:40] <fglock> re Parrot: my point is that Perl 6 implements it's own object system, and it works fine without threads

[16:40] <TimToady> pragmas can really only set defaults for the generators in the current scope

[16:40] <japhb> fglock: I mean, released so that the OLPC guys would consider replacing CPython, so that the kids would have more than just Python and Squeak available.

[16:40] <rindolf> I personally think OLPC is stupid.

[16:41] * japhb blinks

[16:41] <japhb> I've heard OLPC called a lot of things.  "Stupid" is a new one.

[16:41] <rhr> TimToady: what did you mean by Codes(1)?  Are Codes/Graphs/etc. roles also?

[16:41] <TimToady> @tell Aankhen`` I'd just write "subset NumberBase of Int where 2..64"

[16:41] <lambdabot> Consider it noted.

[16:42] *** Averell joined
[16:42] <TimToady> most of the built-in types are really roles punning with classes of the same name

[16:43] <TimToady> And Codes(1) would be a control-A

[16:43] <xinming_> BTW, what is the difference between these 2 situations in perl 5 and perl 6? one is using a role (perl 6 way).... another is make a class without new in perl 5. and when we want the Mixin, we just use 'use base qw/Pkg1 Pkg2 Pkg3/;' to "act" as mixin?

[16:43] <rindolf> japhb: it's a computer that's not quite a computer, running a very unorthodox GUI, and incredibly crippled.

[16:43] <rindolf> japhb: interesting idea. Very bad execution.

[16:43] <TimToady> Codes(32) is a space regardless of the current encoding of the script

[16:43] <rhr> TimToady: control-A?  I don't understand

[16:43] <TimToady> "consistent Unicode semantics"

[16:44] <TimToady> codepoint 1 in Unicode is a ^A

[16:44] <rhr> how does that jive with S02:620?

[16:44] <xinming_> hmm, May I ask here or I should ask in #perl? >_<

[16:45] <japhb> unorthodox GUI -- true.  Crippled -- less so now that they are running the Geode LX instead of Geode GX.  Also, they have some parts that are considerably more advanced than any other laptop available.  Not quite a computer -- not so.  It's a fully functional Fedora.  In fact, Red Hat is doing a "95% shared" version that runs using the standard Gnome desktop instead, for sale in developing countries.

[16:46] *** veritos joined
[16:46] <TimToady> okay, Code(1) is ^A, not Codes(1).  sorry

[16:46] *** stef_ joined
[16:46] <rindolf> japhb: next time please adress me.

[16:47] <japhb> rindolf: basically a few months ago, the various purchasing nations got together and decided to dump OLPC 1 in favor of just starting immediately with OLPC 1.5, paying the price delta and accepting a couple months delay.  And it's now a WAY more functional box

[16:47] <rindolf> japhb: rin[tab]

[16:47] <rindolf> japhb: oh.

[16:47] <TimToady> but I think people usually just use Char(1) to get it in the current abstraction level.

[16:47] <japhb> rindolf: I generally use ri[tab].  :-)  But that was forgetfullness, not ignorance.

[16:47] <rindolf> japhb: OK.

[16:48] <TimToady> 'course, now I'm contradicting the types in S26, sigh...

[16:48] <rhr> TimToady: isn't that all just "\x[...]"?  How exactly is Code($n) different from Graph($n)?

[16:48] <TimToady> so maybe I should say Uni(1)

[16:49] <TimToady> \x is always hex

[16:49] <rhr> ok, so Uni($n) === "\d[$n]"

[16:50] <TimToady> er, only if you eval the right side

[16:50] <rhr> huh?

[16:50] <TimToady> \d wants literal digits

[16:50] <rhr> oh, right

[16:50] <TimToady> interpolation isn't two pass.

[16:51] <TimToady> you'd have to double the \ too before the eval

[16:51] <rhr> but back to 1.as(Codes) :)

[16:51] <TimToady> and 2.54`cm and all that

[16:52] <rhr> did that idea die?

[16:52] <TimToady> the ` is currently reserved for user use, but I think a lot of users might opt to say "use units".  :)

[16:53] <rhr> but should 1.as(Codes) be part of that?

[16:53] <rhr> 1`Code

[16:54] <TimToady> well, it's a dimensional constant, it's just not a linear dimension necessarily.

[16:54] <rhr> GNU units does nonlinear units :)

[16:55] <rhr> like tempF

[16:55] <rhr> not exactly the same thing

[16:55] <TimToady> well, I'd call those linear, but not commensurable

[16:55] <TimToady> or something like that

[16:55] <TimToady> have different 0 origin, so can't just multiply

[16:56] <TimToady> but the basic idea is that you can take a number and mix in a preferred interpretation of that number somehow

[16:56] <rhr> yup

[16:56] <[particle]> $Feb.days.as(Months)

[16:56] <rhr> heh

[16:56] <TimToady> and then hopefully the type logic can sort things out, or at least know when it can't

[16:57] <TimToady> and some conversions can happen either eagerly or lazily

[16:57] <rhr> nod

[16:58] <TimToady> all the length units might just convert immediately to meters internally

[16:58] <rhr> that's what units(1) does, I believe

[16:58] <TimToady> or maybe they would prefer to do it lazily, much like we say that / could pretend to be a Num but really store a Rat until the value is needed.

[16:58] * xinming_ hopes people not ignores him. :'(

[17:00] <fglock> [particle]: is perl6-language the right place to discuss Perl 6 in Parrot?

[17:00] <TimToady> xinming_: I don't understand your question.  I'm not an expert on how Perl 6 types map to Perl 5...

[17:00] <Yaakov> Hello, TimToady.

[17:00] <[particle]> perl6-compilers, i'd say

[17:01] <rhr> afk a few mins

[17:03] <fglock> [particle]: ok 

[17:03] <fglock> I'd really prefer online chat

[17:04] *** diakopter joined
[17:05] <[particle]> fglock: we can chat online

[17:05] <[particle]> it's likely pmichaud will be around in ~1-2hrs

[17:05] <fglock> oh, nice

[17:05] <[particle]> parrot team has weekly status tuesday @ 1830gmt

[17:06] <[particle]> usually we're all around at that time

[17:06] <TimToady> moritz: the Z operator (and operators like it) do not currently respect @ vs @@ context according to spec.

[17:06] <moritz> TimToady: ok, thanks

[17:06] <b_jonas> I wonder what Z will be renamed to next. perhaps \/\/\/

[17:06] <TimToady> moritz: and arguably defaulting all of them to @ is wrong

[17:07] *** veritos joined
[17:07] <TimToady> hmm, I wonder if there's a Unicode that looks like that... :)

[17:07] <[particle]> fglock: pmichaud is on #parrot now

[17:08] <fglock> [particle]: trying to find out how to connect to irc.perl.org from irssi :)

[17:09] <veritos> fglock: only 1 server at a time i think. open another screen.

[17:09] <fglock> veritos: thanks

[17:10] <moritz> fglock: just type /connect irc.perl.org

[17:10] <moritz> fglock: and then join -perl #parrot

[17:10] <b_jonas> I don't know why we need an operator for it. could we just have that functionality built in map like in scheme? (I think foreach can already do multiple lists paralelly)

[17:10] <veritos> ooh--nice.

[17:10] <moritz> irssi is perfectly capable of handling many servers at once

[17:10] <fglock> moritz: that worked - thanks

[17:11] <b_jonas> though of course there's the problem of how to distinguish between the many things iterating on many lists can mean

[17:11] <xinming_> TimToady: hmm, what is the difference between role composition and multi inheritance. I think this is what I mean in my previous question.

[17:11] <moritz> b_jonas: this beeing perl we want to implement _every_ convenient method ;)

[17:11] <b_jonas> sure, implement zip, but why an operator with a silly name?

[17:12] <b_jonas> btw, I quite like standard ml's list and listpair library

[17:12] *** REPLeffect joined
[17:12] <b_jonas> oh well

[17:13] <b_jonas> I would like to have a large standard library too

[17:14] <b_jonas> large standard libraries rock

[17:15] *** Aankhen`` joined
[17:16] <rhr> so would there be something like role furlongs does meters {...}?  obviously role Codes doesn't do Bytes, they'd each be fundamental units

[17:16] <rhr> hmm, Code already means somethng else

[17:18] *** justatheory joined
[17:20] *** elmex joined
[17:21] <xinming_> hmm, thanks, I think I got it. :-)

[17:28] *** stef_ joined
[17:28] *** stef_ left
[17:34] *** franck__ joined
[17:38] *** SubStack joined
[17:41] *** stef_ joined
[17:47] *** Psyche^ joined
[17:54] *** stef_ joined
[18:03] *** Aankhen`` joined
[18:04] *** Psyche^ is now known as Patterner

[18:10] *** the_dormant joined
[18:39] *** chris2 joined
[18:43] <gaal> ingy: moose! I later realized why my suggestion was bogus :)

[18:44] *** chris2_ joined
[18:46] *** chris2_ joined
[18:50] *** diakopte1 joined
[18:53] *** PerlJam joined
[18:59] *** Psyche^ joined
[18:59] <svnbot6> r16304 | rhr++ | [t/builtins/strings/unicode.t] use utf8 -> does utf8 etc.

[18:59] <TimToady> xinming_: role composition resolves method collisions at compile time, and has no trouble with diamond inheritance.  multiple inheritance can't make such guarantees.

[19:10] *** ruz_ joined
[19:14] *** Psyche^ is now known as Patterner

[19:20] <svnbot6> r16305 | rhr++ | [t/builtins/strings/unicode.t] most of these are :todo

[19:33] *** Teratogen joined
[19:33] *** dduncan joined
[19:34] <xinming_> TimToady: The best answer I ever got is from you. :-)  Check google, and found many articles. But none touched my itchy points

[19:34] <xinming_> Sleep for now, bye all.

[19:34] <xinming_> Just googled the answer, and now, I can sleep well. :-)

[19:34] <xinming_> thanks all

[19:42] *** Jedai joined
[19:47] *** veritos joined
[19:52] *** ruoso joined
[20:01] *** buetow joined
[20:12] *** diakopter joined
[20:14] *** renormalist joined
[20:27] <ingy> gaal?

[20:27] <ingy> what suggestion

[20:27] <ingy> <- too lazy to read back

[20:50] *** edenc joined
[20:55] *** jjore-w joined
[20:55] *** polettix joined
[21:00] *** rashakil joined
[21:10] *** lichtkind joined
[21:14] *** polettix left
[21:14] *** REPLeffe1t joined
[21:18] *** iblechbot joined
[21:25] <lichtkind> moritz: now has time?

[21:29] <moritz> lichtkind: yes

[21:29] <lichtkind> moritz fine

[21:29] <moritz> lichtkind: would you care to join an irc server where we can /msg ?

[21:29] <lichtkind> moritz good but how?

[21:30] <moritz> lichtkind: /connect irc.perl.org

[21:31] <lichtkind> moritz:  good moment reconnecing

[21:32] *** lichtkind joined
[21:32] <lichtkind> moritz:  it was /server  irc.perl.org

[21:33] <moritz> lichtkind: depends on your client ;)

[21:53] *** rhandom left
[21:55] *** fax joined
[21:55] <fax> hello

[21:55] <fax> I just watched http://video.google.com/videoplay?docid=-3876155376103839772

[21:55] <lambdabot> Title: Audrey Tang - Perl 6 Today - Google Video

[21:55] <fax> looks really amazing!

[21:57] <fax> very excited about perl6 :D

[21:57] <moritz> fax: that's because perl6 _is_ cool ;)

[21:58] <Tene> Hello, fax!

[21:58] <PerlJam> You mean "Perl 6" don't you moritz?  ;)

[21:58] <PerlJam> Today, the role of chromatic will be played by PerlJam on #perl6.

[21:58] <moritz> PerlJam: I do, ;)

[21:58] <fax> I wish I was a master haskell programmer so I could help :p

[21:59] <PerlJam> fax: you don't need to be a master haskell programmer to help!

[21:59] <fax> is it likley that perl 6 will always be in haskell?

[22:00] <fax> PerlJam: oh?

[22:00] <stevan__> PerlJam: quick hyperoperator question

[22:00] <PerlJam> There's lots of non-haskell work that needs doing.

[22:00] <stevan__> [++] @minions

[22:00] <stevan__> does that ++ all my minions

[22:00] <stevan__> or do some kind of reduction

[22:00] * stevan__ hasnt looked at the hyperoperator spec in a while

[22:01] <PerlJam> stevan__: if it works, it should do a reduction and ++ all of your minions 

[22:01] <moritz> stevan__: I think you'd need @minions>>.++ or something

[22:01] <PerlJam> :-)

[22:01] <PerlJam> I'm not sure [++] is what you want.

[22:01] <PerlJam> what moritz said

[22:01] <stevan__> cool

[22:01] <stevan__> I knew I had it wrong :)

[22:01] <moritz> I think [...] expect a binary operator

[22:01] <stevan__> thanks

[22:01] <stevan__> ah

[22:02] *** pbuetow joined
[22:02] <stevan__> so [] is more akin to fold, then map

[22:02] <moritz> right

[22:02] <moritz> erm, reduce

[22:03] <moritz> at least in p6 reduce is roughly equivalent to reduce

[22:03] <PerlJam> foldl

[22:03] *** Limbic_Region joined
[22:03] <PerlJam> foldr would be weird.

[22:03] <stevan__> PerlJam: yes,.. agreed :)

[22:03] <PerlJam> or do I have those backwards again?

[22:03] <stevan__> no,.. fold_left is the normal one :)

[22:04] * stevan__ is speaking in Ocaml sorry,.. foldl

[22:05] <Tene> stevan__: spec says @minions»++

[22:06] <Tene> ?eval @m = 1..3; @m>>++

[22:06] *** evalbot_r16303 is now known as evalbot_r16305

[22:06] <evalbot_r16305> (*** Can't modify constant item: VInt 1␤    at <eval> line 1, column 12 - line 2, column 1, *** Can't modify constant item: VInt 2␤    at <eval> line 1, column 12 - line 2, column 1, *** Can't modify constant item: VInt 3␤    at <eval> line 1, column 12 - line 2, column 1)

[22:09] <fax> will perl6 always be implemented in haskell?

[22:09] <Tene> fax: no

[22:09] <fax> :(

[22:09] <fax> why?

[22:09] <stevan__> fax: nope, it will be implemented in Perl 6

[22:09] <fax> ahh thats ok then :D

[22:09] <Tene> fax: well, there will likely always *be* a Perl 6 implementation in haskell

[22:09] * diakopter wonders how to de-implement pugs

[22:09] *** japhb joined
[22:09] <Limbic_Region> diakopter - bootstrapping of course

[22:09] <fax> so the plan is to write in haskell then write it in perl 6?

[22:10] <PerlJam> fax: There are multiple Perl 6 implementations.

[22:10] <Tene> the most "official" implementation will be in Perl 6, yes.

[22:10] <fax> so it will be a perl 6 compiler as well as an interpreter?

[22:10] <Tene> Sure.

[22:10] <fax> wow

[22:10] <moritz> fax: it will have multiple backends, propably

[22:10] <PerlJam> fax: As soon as we get the right amount of perl 6 implemented (in any language) such that we can write perl 6 in perl 6, we're good to go.

[22:11] <fax> sounds fantastic

[22:11] <moritz> fax: and because of BEGIN {...} blocks you can't write a pure compiler

[22:11] <PerlJam> fax: and I think we'll reach that point some time this year.

[22:11] <moritz> fax: because it can change syntax at compile time

[22:11] <fax> moritz: what do you mean? I heard about BEGIN in the video but what problem does it cause?

[22:11] <fax> whats wrong with that though?

[22:11] <moritz> fax: if you do something like BEGIN { sub infix:<*> {...} }

[22:11] <moritz> fax: you change the meaning of the operator "*"

[22:12] <moritz> before the rest is compiled

[22:12] <fax> hm maybe I dont understand what you mean by a pure compiler

[22:12] <moritz> which means that the BEGIN {...} part must be _executed_ at compile time...

[22:12] <fax> oh I understand

[22:15] <PerlJam> moritz: that doesn't mean you can't make a pure compiler, just that you have to ship it as part of your executable  ;-)

[22:16] <moritz> PerlJam: but if code is executed at compile time, that's normally called "interpreted" ;)

[22:21] <TimToady> sub infix:<*> changes the language even if you don't use BEGIN

[22:21] <moritz> right

[22:22] <TimToady> BEGIN is just the final safety valve, like eval, only the opposite

[22:23] <diakopter> TimToady: I don't see a SoTO listed at http://conferences.oreillynet.com/pub/w/58/sessions.html

[22:23] <lambdabot> Title: O'Reilly Open Source Convention 2007 &#8226; July 23-27, 2007 &#8226; Portland,  ...

[22:23] <TimToady> just as we try to make it unnecessary to use eval, we also try to make it unnecessary to use BEGIN

[22:23] <TimToady> diakopter: it's not usually considered part of the sessions

[22:24] <TimToady> it's normally been part of the Tuesday night bash

[22:24] <diakopter> TimToady: oh!  okay

[22:24] <TimToady> not sure where it's tucked this year though

[22:25] <diakopter> a couple of the tutorials I had preferred are already full. :(

[22:26] * diakopter looks for an evening bash (anywhere)

[22:29] <diakopter> oh, I see.  Opening night last year.

[22:39] *** mncharity joined
[22:41] *** justatheory joined
[22:45] *** perlDreamer joined
[22:49] <perlDreamer> TimToady or other enlightened folk: in t/TASKS it says to update the closure tests w.r.t changes in S04.  Which changes does that refer to?

[22:52] <TimToady> not sure

[22:52] *** ludan joined
[22:53] <perlDreamer> TimToady: I'll try to narrow down when the task was added.  Would that help?

[22:53] <TimToady> probably double check all the named blocks at S04:853 since some of them got renamed along the way

[22:53] <TimToady> START used to be FIRST, for instance

[22:54] <TimToady> (though I think I changed that one at the time)

[22:54] <perlDreamer> The task was added 8/18/06.  I'll try to cross reference with S04 now.

[22:55] <perlDreamer> oh, and from what I've seen the block renaming was done.

[23:05] *** marmic joined
[23:26] *** buetow joined
[23:30] *** bsb joined
[23:40] *** ben joined
[23:41] *** guinex joined
[23:43] *** weinig_ joined
[23:52] *** IllvilJa joined
