[00:00] *** devogon left
[00:01] *** Limbic_Region left
[00:16] *** kanru left
[00:29] *** Lunchy joined
[00:41] <nothingmuch> gaal_: moose

[00:46] *** nipotaway is now known as nipotan

[00:52] *** gaal_ left
[01:09] *** weinig left
[01:09] *** theorbtwo left
[01:21] *** ruz left
[01:23] <agentzh> gaal, nothingmuch: elk :)

[01:26] <nothingmuch> hola agentzh 

[01:26] <nothingmuch> long time no chat

[01:45] *** flavio left
[01:51] <bsb> moosen

[01:59] <agentzh> nothingmuch: *nod*

[02:01] <nothingmuch> hola bsb, likewise =)

[02:08] *** jisom joined
[02:09] *** f0rth left
[02:12] *** weinig joined
[02:17] *** f0rth joined
[02:22] *** Squern joined
[02:39] *** Schwern left
[02:40] *** REPLeffect joined
[03:05] *** Partizx joined
[03:17] *** lyokato joined
[03:23] *** amnesiac joined
[03:28] *** jisom left
[03:29] *** REPLeffect left
[03:41] *** buetow left
[03:42] *** buetow joined
[04:14] *** Squern left
[04:14] <gaal> yo yo yo

[04:15] <gaal> ell oh ell, it takes ghc 6.6.1 apparently to compile ghc g.7 nowadays

[04:17] <allbery_b> yep.  annoying

[04:18] <gaal> as long as it doesn't take 6.8, we're good

[04:19] <allbery_b> actually, last I tried it, it wouldn't build itself

[04:19] <gaal> also i noticed I typed "g" instead of "6". it may be the four hours of driving, but I think my typing may be deteriorating

[04:19] <gaal> that's what happens when you neglect your haskell

[04:42] *** polettix left
[04:46] *** IllvilJa joined
[04:58] *** buetow left
[05:16] *** xinming_ joined
[05:22] *** devogon joined
[05:29] *** xinming left
[05:44] *** Ashizawa joined
[05:46] *** baest joined
[05:48] *** masak joined
[05:58] *** Daveman left
[06:00] *** thoughtpolice left
[06:04] *** GeJ joined
[06:32] *** JarJarBi1ks joined
[06:42] *** JarJarBinks left
[06:53] *** cognominal_ left
[07:22] *** elmex joined
[07:29] *** iblechbot joined
[07:33] *** amnesiac left
[07:33] *** Aankhen`` joined
[07:35] *** drrho joined
[07:39] *** flokuehn joined
[07:44] *** Daveman joined
[07:45] *** rfordinal_ joined
[07:46] *** drrho left
[07:56] *** rfordinal left
[07:59] *** nipra left
[08:09] <moritz_> good morning everybody ;)

[08:11] <masak> good morning moritz_ 

[08:26] <DarkWolf84> goodmorning moritz_ 

[08:28] *** nipra joined
[08:28] *** ruz joined
[08:34] *** cognominal_ joined
[08:34] *** franck___ joined
[09:02] *** fglock joined
[09:22] <Juerd> Heh, I made a mistake in crontab

[09:22] *** Sizur joined
[09:22] <Juerd> Which made feather0 start the backup program every hour...

[09:22] <Juerd> It doesn't finish in an hour

[09:22] <Juerd> So 3 backup processes were running.

[09:22] <Juerd> Has anyone noticed that feather became slower?

[09:22] <moritz_> ;)

[09:22] <Juerd> :)

[09:22] <moritz_> I didn't use it ;)

[09:23] <Juerd> I did, and haven't noticed

[09:23] <moritz_> cool ;)

[09:23] *** masak left
[09:23] *** masak joined
[09:25] <Juerd> I discovered it only because I saw the almost-continuous 60 Mb/s data flow in the charts

[09:29] *** chris2 joined
[09:48] <pugs_svnbot> r17732 | fglock++ | [kp6] fixed namespace in APPLY

[09:48] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17732

[09:48] <lambdabot> Title: Changeset 17732 - Pugs - Trac

[09:50] *** masak left
[09:56] <Juerd> http://juerd.nl/berg.png  # feather0 backup gone bezerk

[09:58] <moritz_> that looks a lot like RRD-Tools ;)

[09:59] *** cognominal_ left
[09:59] <moritz_> or collectd (which uses rrdtools): http://collectd.org/

[09:59] <lambdabot> Title: collectd - The system statistics collection daemon

[10:00] <Juerd> moritz_: cacti, which uses rrdtools :)

[10:00] <fglock> i'm wondering - if kp6 were ported to run in pugs, how would it detect side-effects of BEGIN blocks

[10:04] <moritz_> fglock: why would it be different from what it is using now?

[10:05] <fglock> kp6-perl5 uses custom-built containers which do logging, but pugs already has it's containers

[10:06] <moritz_> er.. what exactly do you mean by "run in pugs"?

[10:06] <moritz_> just that pugs executes the kp6 source files, or something else?

[10:06] <fglock> run perl6-in-perl6 over pugs

[10:07] *** Sizur left
[10:09] <fglock> when 6-in-6 finds a BEGIN block, it needs to eval() it and emit code to replicate the side-effects at INIT time

[10:13] <fglock> running in pugs has the same problem as running in bootstrapped kp6

[10:14] *** cognominal_ joined
[10:18] <fglock> re what it is using now - kp6 is implemented over mp6, just like pugs is implemented over haskell - this makes it very easy to access low-level data structures

[10:19] <fglock> but 6-in-6 should work with plain perl6 data

[10:19] <moritz_> so the problem is that kp6 relies on the underlying semantics of mp6?

[10:20] *** Ashizawa_ joined
[10:21] <fglock> kp6 relies on the underlying semantics that was built using mp6/perl5/whatever, which is not plain Perl 6 semantics - it was extended to allow BEGIN blocks to work

[10:22] <fglock> the problem is, can we do that without extending Perl 6?

[10:26] *** Ashizawa left
[10:29] *** cognominal_ left
[10:29] <fglock> the kp6 extension is the Pad object:

[10:30] <fglock> you can do Pad.eval( $code ) 

[10:30] <fglock> and then Pad.side_effects returns a list of variables that were modified

[10:32] <moritz_> so Pad has to be implemented in pure perl 6, right?

[10:32] <fglock> yes, in order to run in pugs

[10:32] <fglock> otherwise it would have to be implemented in haskell

[10:34] <fglock> which is bad, because you would also need parrot, javascript and jvm versions

[10:38] <moritz_> which means the desired solution is really a perl 6 one, right?

[10:38] <fglock> yes

[10:38] <moritz_> so that the AST is transformed to a BEGIN-free AST

[10:38] <fglock> the current solution is really a perl6-over-miniperl6 solution

[10:39] *** araujo left
[10:39] <fglock> which would use pugs as a VM

[10:56] *** Ashizawa_ left
[11:16] <pugs_svnbot> r17733 | fglock++ | [kp6] .side_effects is a Pad method

[11:16] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17733

[11:16] <lambdabot> Title: Changeset 17733 - Pugs - Trac

[11:40] *** drupek12 left
[11:43] *** iblechbot left
[11:45] *** theorbtwo joined
[11:47] *** kanru joined
[11:49] *** elmex left
[11:50] *** IllvilJa left
[11:52] *** IllvilJa joined
[11:54] *** |Jedai| joined
[11:56] *** drupek12 joined
[11:59] *** franck___ left
[12:00] *** cognominal_ joined
[12:00] *** nipotan is now known as nipotaway

[12:03] *** theorbtwo left
[12:03] *** cognominal_ left
[12:06] *** theorbtwo joined
[12:11] *** jedai left
[12:13] *** franck___ joined
[12:14] *** franck___ left
[12:14] *** franck___ joined
[12:15] *** ruoso joined
[12:16] *** franck___ left
[12:18] *** |Jedai| left
[12:18] *** polettix joined
[12:29] *** drupek12 left
[12:31] *** franck___ joined
[12:33] *** lyokato left
[12:38] * ruoso notices a big changeset after 4 days off

[12:38] * ruoso also notices run_tests_kp6_kp6 fails some tests now

[12:38] <pugs_svnbot> r17734 | fglock++ | [kp6] Pad.eval_ast() - refactor some vm-specific code out of COMPILER

[12:38] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17734

[12:38] <lambdabot> Title: Changeset 17734 - Pugs - Trac

[12:39] <moritz_> ruoso: it never worked completeley

[12:39] <ruoso> moritz_, yeah it didn't

[12:39] <ruoso> s/didn't/did/

[12:39] <moritz_> which revision?

[12:39] <ruoso> it was working last week

[12:39] <fglock> ruoso: i think Pad can be used to abstract the VM

[12:39] <ruoso> fglock, yep... that's the core idea of that diagram I wrote.

[12:40] <fglock> ah :)

[12:40] <ruoso> fglock, but you think we should do that on kp6 already?

[12:40] <fglock> yes

[12:40] <ruoso> shouldn't we leave that for kp6+1

[12:40] <ruoso> ?

[12:40] <fglock> we need a working prototype

[12:41] *** drupek12 joined
[12:41] *** jhorwitz joined
[12:41] <ruoso> my idea was to do that using kp6 as runtime

[12:41] *** hakobe is now known as hkb_lab

[12:42] <fglock> ruoso: you can still use kp6 as a runtime, this is just internals

[12:42] <ruoso> fglock, I mean, changing that in kp6 would be a large refactoring

[12:56] <fglock> the compiler structure will not change, i'm just moving the vm-specific code to a single place

[12:57] *** lesterc left
[13:03] *** Partizx left
[13:06] *** cmarcelo joined
[13:09] *** awwaiid left
[13:09] *** awwaiid joined
[13:18] *** cognominal_ joined
[13:28] *** drupek12 left
[13:48] *** vel joined
[13:56] *** ferreira joined
[14:03] *** amnesiac joined
[14:08] *** masak joined
[14:21] <pugs_svnbot> r17735 | fglock++ | [kp6] finish separating mp6/kp6 runtimes

[14:21] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17735

[14:21] <lambdabot> Title: Changeset 17735 - Pugs - Trac

[14:29] *** zamolxes left
[14:30] *** zamolxes joined
[14:31] <fglock> obra: ping

[14:34] *** TJCRI joined
[15:01] *** weinig left
[15:02] *** weinig joined
[15:05] *** hcchien left
[15:05] *** hcchien joined
[15:10] *** kanru left
[15:13] *** iblechbot joined
[15:13] *** broquaint left
[15:13] *** pmurias joined
[15:13] <pmurias> hello

[15:13] <fglock> hi

[15:14] <masak> howdy

[15:16] *** araujo joined
[15:23] <pmurias> fglock: will need to specify whether GLOBAL:: gets prepended to modules names when they are encoded into perl5 modules

[15:24] <pmurias> if 'module Foo' ends up GLOBAL::Foo or Foo

[15:24] <fglock> it's just Foo

[15:25] <pmurias> so it's a bug in Global that vars get mangled?

[15:26] <pmurias> nice :) it's fixed

[15:26] <masak> that's what I call service

[15:31] *** rafl left
[15:33] <pugs_svnbot> r17736 | pmurias++ | [kp6] 51-Test.pm GLOBAL:: is no longer appended unnecessarly

[15:33] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17736

[15:33] <lambdabot> Title: Changeset 17736 - Pugs - Trac

[15:34] *** rafl joined
[15:36] <pugs_svnbot> r17737 | pmurias++ | [kp6] GLOBAL::Test renamed to Test

[15:36] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17737

[15:36] <lambdabot> Title: Changeset 17737 - Pugs - Trac

[15:39] *** REPLeffect joined
[15:44] *** DarkWolf84 left
[15:45] *** DarkWolf84 joined
[15:45] *** flokuehn left
[15:48] *** broquaint joined
[15:50] *** masak left
[15:51] *** f0rth left
[15:52] *** f0rth joined
[15:53] <fglock> pmurias: there is a problem with using kp6 as perl6-in-perl6, that it requires the containers to set the modified-flag

[15:54] <fglock> so we can't just run kp6 over pugs, for example

[15:57] <pmurias> fglock: one would need wrapers over pugs containers

[15:57] <fglock> but then, you would be using pugs as just another VM

[15:58] <pmurias> would kp6 under pugs generate perl5 code?

[15:59] <moritz_> if you don't modify it any further: yes

[15:59] <fglock> BEGIN blocks would generate perl6 code, but the compiler would generate whatever

[15:59] <pmurias> i see

[16:00] <pmurias> what's the benefit in running kp6 on pugs?

[16:00] <fglock> it's the same thing as running kp6 on kp6 - it's 6-in-6

[16:01] <fglock> running on pugs keeps it honest 

[16:01] <fglock> no kp6-specific hacks

[16:03] <fglock> i think there is something wrong with requiring a layer between kp6 and perl6 

[16:05] <pmurias> fglock: mental layer?

[16:05] <fglock> i mean, we should be able to use unmodified Perl 6 containers

[16:07] <pmurias> one could keep a md5 checksum for every variable and check if it's modified

[16:07] <pmurias> not sure how fast/slow would it be

[16:08] <moritz_> if I'd compile a program like this: 'my $time = BEGIN { time }' in Perl 6, should $time be startup time of the program, or the compilation time?

[16:08] <fglock> compilation time

[16:08] <moritz_> ok

[16:08] <PerlJam> (compilation time as of the execution of that statement :)

[16:09] <pmurias> fglock: or have all access to outer lexical be made via COMPILING which would return wrapers

[16:09] <fglock> also:  my $time; BEGIN { $time = time }

[16:09] <moritz_> right

[16:10] <moritz_> Juerd, diakopter: the SVN web front end seems broken

[16:10] <moritz_> Warning: License check failed! in /data/home/audreyt/pugs/docs/feather/repos/errors/404/index.php on line 0

[16:10] <moritz_> at least for 404 errors

[16:10] *** barney joined
[16:11] <Juerd> whuh

[16:11] <Juerd> license... check...?

[16:11] <fglock> pmurias: i think the current algorithm is efficient enough, the problem is that it requires more access to the VM than Perl 6 supports

[16:11] <Juerd> ...failed...?

[16:12] <Juerd> moritz_: url?

[16:12] <moritz_> Juerd: http://svn.pugscode.org/pugs/src/perl6/Perl-6.0.0-STD.pm

[16:13] <Juerd> I really have no idea which thing requires this license, who got it, and why it's broken

[16:13] <moritz_> it's that fancy svn frontend

[16:14] <moritz_> I think diakopter++ installed it, but I'm not entirely sure

[16:14] <moritz_> http://moritz.faui2k3.org/irclog/out.pl?channel=perl6;date=2007-07-11#i_60074

[16:14] <lambdabot> Title: IRC log for #perl6, 2007-07-11, http://tinyurl.com/252nfb

[16:15] <Juerd> diakopter: I think you can fix this :)

[16:15] <pmurias> fglock: the methods i suggested are probably any faster but they would require less support from the vm

[16:15] <Juerd> (I hope you can...)

[16:16] *** weinig left
[16:16] <pmurias> fglock: at least the checksum method

[16:16] <fglock> pmurias: we could the way you implemented Bind in the perl5 emitter

[16:16] <fglock> calling MODIFIED explicitly

[16:16] <diakopter> Juerd: oh; heh.  I guess they don't want to renew our license. :(

[16:17] <diakopter> <sigh>

[16:17] <pmurias> fglock: MODIFIED is called explicitly only for Bind

[16:17] <fglock> s/could/could do it/

[16:17] <moritz_> diakopter: but why is it just for 404 errors?

[16:17] <pmurias> i thought other ways of modification are more difficult to handle

[16:17] <fglock> yes, but in 6-in-6 we'd have to call it explicitly every time

[16:17] <[particle]> moritz_: that file was renamed, is that part of the problem?

[16:17] <pmurias> k

[16:18] <pmurias> i don't think kp6-in-pugs is a priority

[16:18] <pmurias> ?

[16:18] <pmurias> s/?//

[16:18] <moritz_> [particle]: no, arbitrary non-existing files produce that error

[16:18] <pmurias> it would restrict kp6 code base to kp6/pugs feature set intersection

[16:19] <moritz_> pmurias: don't do that, pugs has some weird OO bugs

[16:19] <Juerd> diakopter: The license file suggests it should expire not before October...

[16:20] <fglock> i mean kp6-in-perl6, where perl6 = any( kp6, pugs, p6parrot )

[16:20] <diakopter> Juerd: well, I disabled it for now anyway

[16:21] <diakopter> back to boring old non-xslt html

[16:21] <diakopter> ;)

[16:21] <PerlJam> Why is it that we need a "browser interface" to subversion?

[16:22] <moritz_> PerlJam: no need, it's just nice to have eye candy ;)

[16:23] <fglock> pmurias: it should work on anything that can eval perl6 code (so we can build Pad objects)

[16:23] *** franck___ left
[16:26] <pmurias> fglock: i think kp6-in-kp6 is the most important right now

[16:26] <diakopter> PerlJam: I'm afraid you weren't around to voice any objections to the proposal to implement that, back when I asked.

[16:26] <pmurias> the ran on any( kp6, pugs, p6parrot) would IMHO require a lot of workarounds

[16:27] <pmurias> as they each implement a different feature set

[16:27] <fglock> i don't think you can go very far without portability

[16:27] <PerlJam> diakopter: Had I been around, I would have asked the same question  :)

[16:30] <pmurias> fglock: does portablility across diffrent perl6 compiler actually give us anything

[16:30] <pmurias> ?

[16:31] <pmurias> * compilers

[16:31] <moritz_> pmurias: robustness

[16:32] <pmurias> how?

[16:32] <fglock> it gives you... perl6-in-perl6

[16:33] <pmurias> pugs and p6parrot aren't perl6 for that definition of perl6

[16:34] <pmurias> as they don't implement the whole synopsis

[16:34] <moritz_> but kp6's aim is to implement p6 in a subset of p6, afaict

[16:34] <moritz_> and p6parrot would give you speed, presumably ;)

[16:34] <fglock> yes, and we've achieved that goal

[16:35] <fglock> now it's time to start 6-in-6

[16:35] <fglock> which is not exactly kp6-in-kp6

[16:36] <pmurias> completing the bootstrap and changing the name is a good starting point IMHO

[16:37] <fglock> bootstrapped kp6 is still not 6-in-6

[16:37] <pmurias> why?

[16:38] <fglock> because 6-in-6 should not depend on vm-specific code

[16:38] *** vel left
[16:38] <pmurias> fglock: you have to, to some extend

[16:39] <pmurias> emitters have to be vm-specific

[16:40] <pmurias> targeting a second backend would seperated it more cleanly

[16:40] <fglock> pmurias: i guess i'll start an experiment

[16:41] <pmurias> fglock: what sort of?

[16:41] <fglock> targetting pugs is good because you can't easily sneak haskell code in

[16:41] <pmurias> emitting pugs code?

[16:42] <fglock> i'll try writing the kp6 low level libs over pugs

[16:42] <pmurias> ok

[16:44] *** weinig joined
[16:46] <obra> fglock: pong

[16:46] <obra> sorry for the delay

[16:46] <fglock> np

[16:48] <fglock> obra: http://svn.pugscode.org/pugs/v6/v6-KindaPerl6/docs/IDEAS-HACKATHON

[16:48] <lambdabot> http://tinyurl.com/ys259y

[16:48] *** hkb_lab is now known as hakobe

[16:48] <obra> looking

[16:49] <obra> so. you'd talked about there being 3 possible ways forward in your mail

[16:49] <fglock> yes, 

[16:50] <fglock> follow the roadmap as-is - fix some bugs, merge with the STD grammar, then optimize

[16:50] <fglock> or, bootstrap 6-in-6 before proceeding with the plan

[16:50] <fglock> or work on the parrot backend

[16:51] <obra> ok. why is your confidence in the existing roadmap shaken?

[16:51] <fglock> there is a new idea, which is to bootstrap over pugs

[16:52] <fglock> i noticed kp6 needs a new container model, because what we have today is too tied to the underlying vm

[16:52] <fglock> this is a portability problem

[16:53] <fglock> and it makes it difficult to have 'real' perl6-in-perl6

[16:53] <fglock> the current roadmap doesn't address that

[16:53] <obra> *nod*

[16:54] *** justatheory joined
[16:54] <obra> Personally, I'd love to see an implementation that's actually fully using the standard grammar.

[16:54] <obra> but I want to understand what really makes sense for kp6

[16:54] <fglock> we could just fix this small problem, and then proceed with the plan

[16:55] <fglock> ruoso and pmurias really want a bootstrapped kp6

[16:56] <fglock> and i don't want to stop them :)

[16:56] <obra> ok.

[16:56] <obra> Good :)

[16:56] *** mattwg joined
[16:56] <obra> fixing the small problem seems clever.

[16:57] <obra> proceeding with the plan rather than getting distracted by something else shiny feels clever, too

[16:57] <obra> unless you feel like the current plan will end in sadness

[16:58] <fglock> it could make sense to fork the project for a while

[16:58] *** mattwg left
[16:58] * [particle] wishes pugs repo supported branches

[16:58] <fglock> and work both in bootstrapping and STD

[16:58] <fglock> it's kind of forked already

[16:59] <[particle]> but not so easy to manage merges

[17:01] <obra> how much forking is really required for both projects?

[17:02] <ruoso> [particle], I'm having success with the two branches merging so far

[17:02] <ruoso> because the codes aren't that differente

[17:02] <nothingmuch>  /w 24

[17:03] <fglock> we've been merging back and forth in the last week or so

[17:03] <ruoso> obra, the fork only happens in the runtime part

[17:03] <ruoso> as kp6-mp6 uses explicitly mp6 runtime

[17:03] <ruoso> while kp6-kp6 uses kp6 runtime

[17:04] <ruoso> which means calling conventions and object meta protocol

[17:04] <ruoso> s/object meta/meta object/

[17:04] <obra> Is there a good visiolization of this?

[17:05] <ruoso> obra, not really...

[17:05] <ruoso> everytime we draw some diagram

[17:05] <ruoso> it looks like kp6+1

[17:05] <ruoso> instead of document kp6 itself

[17:06] <fglock> obra: it's still compatible with http://svn.pugscode.org/pugs/v6/docs/kp6.jpg

[17:06] <ruoso> fglock, 

[17:07] <ruoso> hmm

[17:07] <ruoso> after merge I get a Undefined subroutine &Main::say called at lib-kp6-mp6-p5//KindaPerl6/Grammar.pm line 64,

[17:07] <fglock> ruoso: i think i found a way to make the runtime compatible with plain perl6, so it would possibly run in pugs

[17:08] <ruoso> fglock, hm?

[17:08] <fglock> ruoso: looking

[17:08] <ruoso> kp6-mp6 fails one test right now

[17:08] <fglock> ruoso: we can call 'MODIFIED' explicitly, instead of hiding it inside the Container code

[17:09] <ruoso> kp6-kp6 fails in the use of lib-modules

[17:09] <ruoso> and it's because we need to compile lib-modules to two different targets

[17:09] <ruoso> we need a lib-modules-kp6-p6

[17:09] <ruoso> p5

[17:09] <ruoso> we need a lib-modules-kp6-p5

[17:09] <ruoso> and a lib-modules-mp6-p5

[17:10] <fglock> ruoso: i'd rather have completely separate directories, this is confusing me

[17:10] <ruoso> fglock, but lib-modules will be the same

[17:10] <ruoso> it's just the compiled versions that are different from each other

[17:10] <ruoso> I mean

[17:10] <ruoso> they shouldn't

[17:10] <ruoso> hmmm

[17:11] <ruoso> why is test 51 failing with kp6-kp6?

[17:13] <ruoso> fglock, I was wrong... there's no need for two lib-modules

[17:13] <fglock> obra: i think we will proceed with the plan *and* get distracted

[17:14] <obra> sounds good :)

[17:14] <fglock> we probably need a roadmap for kp6-kp6

[17:15] <ruoso> fglock, that's just "create tests that reproduces the features of kp6-kp6"

[17:15] <pugs_svnbot> r17738 | ruoso++ | [kp6] merge kp6-mp6 to kp6-kp6 -r17697:HEAD

[17:15] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17738

[17:15] <lambdabot> Title: Changeset 17738 - Pugs - Trac

[17:18] <ruoso> fglock, it's kinda hard to write down a ROADMAP (besides what is in docs/KP6-Bootstrap/Notes

[17:19] <ruoso> fglock, it's kinda hard to write down a ROADMAP (besides what is in docs/KP6-Bootstrap-Notes.txt

[17:19] <ruoso> because we don't know exactly what's missing

[17:19] <ruoso> I really think it's just a matter of converting the runtime files

[17:19] <ruoso> to the new calling convention

[17:24] <pugs_svnbot> r17739 | fglock++ | [kp6] fixed kp6-mp6 runtime

[17:24] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17739

[17:24] <lambdabot> Title: Changeset 17739 - Pugs - Trac

[17:28] <fglock> ruoso: re MODIFIED, how would kp6 run in pugs, for example?

[17:29] <ruoso> pugs would have a namespace management that would take care of it

[17:30] <ruoso> and parrot already does it

[17:30] <ruoso> the Emitter (if any) should take care of getting that values for the specific runtime

[17:31] <ruoso> in kp6+1 we would implement that completely in p6

[17:31] <ruoso> and each runtime would optimize it for its own runtime

[17:32] *** ahmadz joined
[17:32] <ahmadz> hi there

[17:32] <moritz_> hi ahmadz 

[17:32] <ahmadz> hi moritz ;-)

[17:33] *** Psyche^ joined
[17:33] <ahmadz> quick question: i tried to compile pugs today and it told me i need ghc 6.6.1 [i had 6.6 before and it used to work]

[17:33] <moritz_> ahmadz: things change ;)

[17:34] <DarkWolf84> ~from some time

[17:34] <fglock> ruoso: so we would use MODIFIED for backends that don't support it natively

[17:34] <ahmadz> yeah they sure do ;-)

[17:34] <DarkWolf84> I had such problem

[17:34] <ahmadz> ghc take a lot of time to compile...

[17:35] <DarkWolf84> get the binary then

[17:35] <moritz_> ahmadz: DarkWolf84 is right ;)

[17:35] <ruoso> fglock, but that would be used just in that backend's implementation

[17:37] <fglock> which is true for kp6-perl5 and for a possible kp6-pugs and kp6-p6parrot

[17:37] <ruoso> not for kp6-parrot

[17:37] <ruoso> parrot takes care of it by itself

[17:37] <fglock> i mean kp6-p6parrot

[17:37] <[particle]> :)

[17:37] <ruoso> a

[17:37] <ruoso> I see

[17:38] <fglock> perl6-in-parrot is just plain perl6

[17:38] <fglock> it doesn't keep track of side-effects

[17:39] <ruoso> parrot does

[17:39] <ruoso> yep

[17:39] <ruoso> the same for kp6-parrot

[17:40] <fglock> so 6-in-6 will always need an emulation layer 

[17:40] <ruoso> yes...

[17:40] <ruoso> kp6 would be a runtime provider for p6-p6

[17:42] <ferreira> obra: ping

[17:42] <ruoso> kp6-parrot would provide a runtime for pk6+1 to run on top of parrot

[17:42] <obra> ferreira: pong

[17:43] <ferreira> I thought about a proposal for a Perl 6 microgrant, but I am not sure about its validity and details.

[17:44] <obra> rough description?

[17:44] <ferreira> Could you take a look before I officially submit it to perl6-microgrants@perl?

[17:44] <obra> sure, though that just goes to me and acme :)

[17:44] <obra> submitting a bad one won't result in us turning you down ;)

[17:45] <obra> or rather

[17:45] <obra> it won't stop you from being able to submit a new one after our response

[17:45] <ferreira> well, then I will post it. But I would look to keep it open for finishing details.

[17:45] <PerlJam> ferreira: I'd like to read it :)

[17:46] <obra> ok

[17:47] <PerlJam> obra: what's the turn-around time on responses?

[17:47] <fglock> obra: in short, i will keep the roadmap as-is, and the big changes will go into an alternate implementation and will be merged later

[17:50] <ahmadz> is it normal to get a lot of warnings when compiling pugs on feather?

[17:50] <moritz_> I get some on my maschine

[17:50] <moritz_> about 20..30 lines per compiled file

[17:50] *** Patterner left
[17:50] *** Psyche^ is now known as Patterner

[17:51] <obra> fglock: seems sane

[17:51] <obra> PerlJam: varies from 5 minutes to never

[17:51] <ferreira> obra: I posted it

[17:52] <ruoso> fglock, i found why the 51-Test was failing

[17:53] <ruoso> the -Ilib-modules-p5 was missing in the run_tests calll

[17:53] <ruoso> but there's still a test failing in both kp6-mp6 and kp6-kp6

[17:54] <pugs_svnbot> r17740 | ruoso++ | [kp6] fixed run_tests_kp6_kp6 to -Ilib-modules-p5

[17:54] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17740

[17:54] <lambdabot> Title: Changeset 17740 - Pugs - Trac

[17:55] <obra> ferreira: will discuss with acme

[17:56] <ferreira> thanks

[17:57] *** vel joined
[17:57] <ruoso> fglock, BTW... kp6 can't compile its own grammar anymore

[17:58] <ruoso> fglock, the problem is in lit_code 

[17:58] <ruoso> ops

[17:58] <ruoso> lit_object

[17:59] <ruoso> does it means the ::Object() constructor ?

[17:59] <fglock> looking

[18:00] <fglock> ruoso: this seems to be unchanged

[18:07] <ruoso> fglock, take a look at the new test

[18:07] <ruoso> grammar/08

[18:08] <ruoso> it fails with a weird symptom

[18:08] <pugs_svnbot> r17741 | ruoso++ | [kp6] a new test failing with a weird symptom

[18:08] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17741

[18:08] <lambdabot> Title: Changeset 17741 - Pugs - Trac

[18:11] *** cmarcelo left
[18:11] <fglock> ruoso: the named params implementation was not finished

[18:11] <ruoso> fglock, is ::Lit::Object a new object?

[18:12] <fglock> yes, it calls the constructor

[18:13] <fglock> currently parses using mp6-ish syntax

[18:13] *** ahmadz_ joined
[18:13] <ferreira> pugs: my @a = <a b c>; my @x = <x y>; @a Z @x

[18:13] <exp_evalbot> OUTPUT[(("a", "x"), ("b", "y"))␤]

[18:14] <DarkWolf84> now it works with :

[18:14] <DarkWolf84> ?

[18:14] <ferreira> pugs: my @a = <a b c>; my @x = <x y>; @a Z (@x, *)

[18:14] <exp_evalbot> OUTPUT[(("a", "x"), ("b", "y"), ("c", Inf))␤]

[18:15] <ruoso> fglock, it seems that ::Lit::Object doesn't have a method "true" that returns true

[18:15] <DarkWolf84> strange

[18:15] <DarkWolf84> why is inf there

[18:16] <ferreira> It must have been ( ("a", "x"), ("b", "y"), ("c", "y") ) by the rule of extending arrays. Or not?

[18:16] <DarkWolf84> hm

[18:16] <fglock> ruoso: why do you need .true?

[18:18] <ruoso> fglock, wait... maybe I had a wrong premise

[18:18] <ruoso> I thought it was matching

[18:18] <ruoso> but maybe the match is indeed failing

[18:19] <ferreira> Also, in run.pugscode.org, evaling <a b c> Z <x y> gives a wrong answer ( (<a x>), (<b y>), ('c', undef) ). That means pugs there is outdated while the Perl 6 bot may be using newer (fixed) sources.

[18:20] <DarkWolf84> ?eval my @a = <a b c>; my @x = <x y>; @a Z (@x, *);

[18:21] *** ahmadz left
[18:21] <DarkWolf84> why evalbot is not responding?

[18:22] <ferreira> which implementation evalbot uses?

[18:22] <DarkWolf84> maybe the old evalbot is gone for some reason

[18:23] <ferreira> if the extended list (@x, *) is not treated lazily, it recurses forever. pugs (in run.pugscode.org) also has problems with 1..*

[18:23] <moritz_> pugs: my @a = <a b c>; my @x = <x y>; @a Z (@x, *);

[18:23] <exp_evalbot> OUTPUT[(("a", "x"), ("b", "y"), ("c", Inf))␤]

[18:23] <ferreira> pugs: my @ints = (1..*); @ints.first

[18:24] <exp_evalbot> OUTPUT[pugs: out of memory (requested 1048576 bytes)␤]

[18:24] <ferreira> well, here is the same. It probably is trying to flatten the infinite list.

[18:24] *** polettix left
[18:24] <moritz_> pugs: my @ints := (1..*); print @ints[0]

[18:24] <exp_evalbot> OUTPUT[1]

[18:24] <moritz_> pugs: my @ints = (1..*); print @ints[0]

[18:25] <exp_evalbot> OUTPUT[pugs: out of memory (requested 1048576 bytes)␤]

[18:25] <ruoso> fglock, it seems that the problem is in the val_int toke

[18:25] <ruoso> token

[18:25] <ferreira> pugs: my @ints := (1..*); @ints.first

[18:25] <exp_evalbot> OUTPUT[pugs: out of memory (requested 1048576 bytes)␤]

[18:25] <moritz_> ferreira: it seems that the lazyness of lists stands on shaky grounds

[18:26] *** REPLeffect left
[18:27] *** danga joined
[18:28] <ferreira> I thought this laziness was for free when writing pugs in Haskell. I believed we should only take care to not do something that flattened the infinite list, like producing one as the final result which would be dumped (crashing the interpreter).

[18:29] <moritz_> ferreira: I think it's not so easiy to use builtin types for p6 land...

[18:29] *** REPLeffect joined
[18:29] <moritz_> ferreira: it all has to be mapped to pads etc

[18:29] *** riffraff joined
[18:30] <ferreira> fglock: how about the construction of these infinite at v6, mp6, kp6?

[18:30] <ferreira> What are those pads? I only knew the term in connection with lexical pads or something like that.

[18:31] <fglock> ferreira: only PIL-Run supports that

[18:31] <moritz_> ferreira: lexical pads, yes

[18:31] <fglock> PIL-Run = re infinite lists

[18:31] <moritz_> basically environment and their variables

[18:32] <fglock> yes, Pad is the high level representation of a lexical pad, it's used by the kp6 compiler to track things defined in BEGIN blocks

[18:33] <fglock> home &

[18:34] <ferreira> moritz_: and... Sorry, I haven't understood why storing the objects in pads did not allow to take advantage of the Haskel features

[18:34] <pugs_svnbot> r17742 | ruoso++ | [kp6] syntax error message more usefull

[18:34] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17742

[18:34] <lambdabot> Title: Changeset 17742 - Pugs - Trac

[18:35] <fglock> s/kp6/perl6/

[18:35] <moritz_> ferreira: I don't either, but if it were that simple it would be implemented

[18:35] <moritz_> ferreira: but maybe the problem is something different...

[18:36] <moritz_> ferreira: btw .first is not a vaild array method

[18:36] *** jisom joined
[18:36] <ferreira> pugs: my @ints := (1..*); @ints.start

[18:37] <exp_evalbot> OUTPUT[pugs: out of memory (requested 1048576 bytes)␤]

[18:37] <moritz_> maybe .start tests if length >= 0 ;)

[18:40] *** rindolf joined
[18:42] *** cmarcelo joined
[18:43] *** danga left
[18:57] *** fglock left
[18:57] *** barney left
[19:01] *** Schwern joined
[19:16] *** riffraff left
[19:25] *** ferreira left
[19:29] *** cmarcelo left
[19:43] *** ferreira joined
[19:43] *** jisom left
[19:47] *** cmarcelo joined
[19:56] *** polettix joined
[19:57] *** ruoso left
[20:04] *** weinig_ joined
[20:04] *** weinig left
[20:06] *** xinming joined
[20:23] *** thoughtpolice joined
[20:23] *** rindolf left
[20:27] *** pmurias left
[20:31] *** ferreira left
[20:48] *** iblechbot left
[20:54] *** IllvilJa left
[20:56] *** Aankhen`` left
[20:57] *** TJCRI left
[21:19] <wolverian> S02 should be named Types, at least in parentheses..

[21:22] *** stevan_ left
[21:26] *** weinig_ left
[21:27] *** weinig joined
[21:28] *** stevan_ joined
[21:35] *** weinig left
[21:35] *** weinig_ joined
[21:37] *** DaGo joined
[21:38] <Caelum> what does "Setup: cannot satisfy dependency pugs-hsregex-any" mean? do I need another ghc lib?

[21:43] *** Limbic_Region joined
[21:51] <TimToady> @tell ferreira pugs does not yet implement Range objects, nor does it really treat * as anything other than Inf, so 0..* is pretty much doomed at the moment

[21:51] <lambdabot> Consider it noted.

[21:57] <Limbic_Region> TimToady - how was Vienna?

[21:58] <Limbic_Region> oh, and you're photo gallery appears to be b0rk

[22:01] <Juerd> your

[22:08] <amnesiac> mine?

[22:17] <TimToady> yeah, has been b0rk since I the last disk upgrade...lack of round tuition

[22:17] <TimToady> Vienna was lovely

[22:18] <TimToady> strange, but lovely

[22:24] <REPLeffect> strange in a good, or bad way (or, just strange?)

[22:26] *** justatheory left
[22:26] *** justatheory joined
[22:27] *** amnesiac left
[22:31] *** chris2 left
[22:32] <Caelum> Anyone know what library I need for this to go away: "Setup: cannot satisfy dependency pugs-hsregex-any"

[22:33] <TimToady> strange in a way that only a lot of money over a long period of time spent by many architects of violently clashing tastes can accomplish

[22:34] *** Schwern left
[22:34] *** allbery_b left
[22:34] *** justatheory left
[22:34] *** justatheory joined
[22:36] *** riffraff joined
[22:36] *** justatheory left
[22:37] *** riffraff left
[22:37] *** justatheory joined
[22:38] *** jhorwitz left
[22:51] *** justatheory left
[22:51] *** justatheory joined
[22:53] *** DaGo left
[23:07] *** vel left
[23:11] *** justatheory left
[23:26] *** cmarcelo left
[23:30] *** justatheory joined
[23:37] *** devogon left
[23:57] *** weinig_ left
