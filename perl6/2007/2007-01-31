[00:09] *** ashleyb joined
[00:17] *** Ziggy6 left
[00:50] *** lisppaste3 joined
[00:53] *** putter joined
[00:53] *** nipotaway is now known as nipotan

[01:01] *** drupek12167 joined
[01:08] <putter> Hmm.   http://en.wikipedia.org/wiki/Pugs  says "Due to licensing and concerns about the lack of copyright assignments from contributors, it is unlikely that The Perl Foundation will bless Pugs as the official implementation of Perl 6."

[01:09] <putter> It was added in early Nov by anon.

[01:12] <putter> Does this strike anyone else as bogus?  Ie, if they meant the haskell implementation, it seems to underestimate how much of the codebase will be churned before xmas, and overestimate the number of people who have made substantial contributions.  Either of which would mitigate the concern expressed.

[01:45] <TimToady> that's funny, considering S01 specifies that we not consider any implementation "the official Perl 6 implementation".  An implementation can be "an official implementation" if it passes the test suite.

[01:47] <dduncan> TimToady, regarding r13553, I suggest you reformat that cascaded conditional example so that the !! is on the leading end of lines rather than the trailing end

[01:47] <dduncan> and they line up vertically with the assignment

[01:49] <dduncan> I refer to the example under: +A tabular form is also popular for cascaded conditionals:

[01:49] <TimToady> gonna sic Perl::Critic on me?  :)

[01:49] <dduncan> I noticed it myself, without the help of a program

[01:49] <dduncan> and I agree with the rationale of the change

[01:49] <TimToady> I don't always follow PBC myself... :)

[01:50] <dduncan> but was your choice here arbitrary, or did you have the trailing !! on purpose?

[01:50] *** drupek12167 joined
[01:50] *** TimToady joined
[01:50] <dduncan> but was your choice here arbitrary, or did you have the trailing !! on purpose?

[01:51] <TimToady> I just threw the pieces of gold into the fire, and lo! out came this Golden Calf...

[01:52] <putter> re "official"/"that's funny": correcting...

[01:53] <TimToady> I probably shouldn't be putting stylistic notes into the S's in any event.

[01:54] <dduncan> but the examples could still be consistent with PBP if you don't oppose them

[01:54] <dduncan> leading by example isn't leading by doctrine

[01:56] <SamB> TimToady: that is the lamest excuse evar!

[01:57] <SamB> it was lame the first time, and it is really really lame this time!

[01:59] <putter> Hmm,  S01 was probably not written in the month of "Nob".  No, I cant say that.  It does seem likely to be a typo however.

[02:01] <TimToady> SamB: so break the stone tablets again. :)

[02:02] <SamB> do I look like my face glows?

[02:02] <SamB> no!

[02:02] * SamB hasn't got any stone tablets

[02:02] <SamB> anyway, if I had one, I'd want to run programs on it

[02:03] * allbery_b thinks decent laptops are heavy enough as is, thanks :)

[02:09] *** Schwern joined
[02:20] <putter> "flintstones, meet the..."

[02:37] <putter> in p6 rules, can <{ }> interpolated regexs be modifiers?  eg  /<{/:i/}> GoOd ThInG ThAt InTeRpOlAtEd/ ?

[02:38] <TimToady> sure, but they're scoped to the subrule, which doesn't do you much good.

[02:38] <putter> ah, ok

[02:39] <TimToady> making pretty good progress on the Official Grammar, btw

[02:39] <putter> :)

[02:39] <TimToady> to keep "actions" from cluttering things, I'm writing the rules such that they can be preprocessed

[02:40] <putter> good choice :)

[02:40] <TimToady> so we have rules like:

[02:40] <TimToady>     when    => rule { <block> {*} },                    #ACT sc when

[02:41] <TimToady> the {*} is a placeholder where you might want an action

[02:41] <TimToady> and #ACT sc when is the identifier of that action

[02:41] <TimToady> in this case "statement_control when"

[02:42] <putter> ah.  I can live with that.  hopefully nothing with have two actions?

[02:42] <TimToady> the hope is that the grammar can be used as-is for mere syntax validation, but preprocessed into various derivative grammars for other purposes

[02:42] <putter> yes

[02:43] <TimToady> nothing says the preprocess couldn't s/<'{*}'>/{...} {...}/

[02:43] <TimToady> looked at various ways of sneaking the identifier into the rule, but it really cluttered things up.

[02:44] <putter> <action 42> ?

[02:44] <TimToady> prefer symbolic

[02:44] *** dmq joined
[02:45] <putter> <action-42> ....  rule action-42 { <null> }  ?

[02:45] <TimToady> also it doesn't look like a longest-token stopper

[02:45] <TimToady> and {*} looks like a closure because it is one

[02:45] <TimToady> just doesn't do much.

[02:46] <TimToady> so you really only have to translate the ones that you want to add an action to.

[02:48] <putter> hmm, do we have a way to "inline" a subrule?  eg,   gram Acts does Base { rule when { <inline Base::when> {random cruft} }

[02:49] <TimToady> well, there's always eval...

[02:49] <putter> I suppose inline'ing is merely bonus.  could just   rule when { <Base::when> {somewhat different code} }

[02:49] <pasteling> "TimToady" at 71.139.17.198 pasted "Top of the grammar to ya!" (181 lines, 6.4K) at http://sial.org/pbot/22748

[02:50] <putter> oooo, looking...

[02:50] <TimToady> there's probably some form of textual macroing, but it could *really* screw up the visual semantics of which field is $3

[02:51] <TimToady> now all I need is define all my terms.

[02:53] <putter> chuckle

[02:53] <TimToady> oh, the ' ' key in a magic hash tells it what to check for between the key and the value.

[02:54] <putter> hmm, one thing I've never understood about token... actually a couple of things....

[02:54] <TimToady> so it's easy to force word boundaries there, for instance

[02:54] <putter> is the non-backtracking here needed for a correct parse, or merely efficiency?

[02:56] <TimToady> not sure.  there may be other things that token implies that regex wouldn't.

[02:56] <TimToady> for a while was considering that token/rule implied longest token on | while regex didn't, but decided consistency was better

[02:57] <putter> so is there any reason all those tokens could be rules instead?

[02:57] <TimToady> but mostly it's "token" to keep reminding you that it doesn't do whitespace like "rule".

[02:58] <putter> ah

[02:58] <TimToady> tokens don't do :sigspace

[02:59] <TimToady> though "token { \{ <expression> \} }" automatically gets whitespace inside because <expression> is a rule

[02:59] <TimToady> presumably with auto-ws fore and aft

[02:59] *** justatheory joined
[02:59] <putter> so when users locally modify the p6 grammar, they have a fighting chance against backtracking rules, but if they run afoul of a token, they lose?

[03:00] <TimToady> we try to push as many tokens into hashes as possible to keep them officially independent.

[03:00] <TimToady> and deletable as well as addable

[03:02] *** Ziggy6 joined
[03:02] <TimToady> dinner, so entering attention deficit mode. &

[03:02] <putter> in redsix each grammar just collected all the locally visible rules named  token_foo and put them in the token hash.  what's the real way one does  gram B does A { ...let me fiddle with the token set... }

[03:03] <putter> ah, bye.  cheers.

[03:09] *** ayrnieu joined
[03:46] *** Ziggy6 left
[03:59] *** bcorn joined
[04:13] *** mako132_ joined
[04:21] *** finchely joined
[04:28] *** ProperNoun joined
[04:54] <svnbot6> r15162 | putter++ | misc/pX/Common/yet_another_rules_engine - progress.  re_tests.t is 60% okay.  See README.

[04:55] *** Lunchy_ joined
[04:59] *** leed joined
[05:00] *** amnesiac joined
[05:03] *** Lunchy__ joined
[06:13] *** BooK joined
[06:20] <TimToady> @tell putter backtracking vs not doesn't have anything much to do with mutability, nor does token vs rule.  rules don't backtrack by default either.

[06:20] <lambdabot> Consider it noted.

[06:21] <TimToady> @tell putter we're not changing the grammar out from under ourselves in any case.  we're only changing the grammar to parse the rest of the block.

[06:21] <lambdabot> Consider it noted.

[06:22] <TimToady> @tell putter it's sort of a continuation idea.  But yes, how one actually does the overrides is the real question.  The problem with the hash approach is it tempts us to reinvent inheritance badly.

[06:22] <lambdabot> Consider it noted.

[06:25] <TimToady> @tell putter and the old <%foo|%bar> notation is really a form of MI.  even the new /%foo|%bar/ is still kinda MIish.  anyway, will think on this derivation mechanism s'more.

[06:25] <lambdabot> Consider it noted.

[06:52] *** bsb left
[07:05] <tene> ?eval say "foo"

[07:06] *** evalbot_r15161 is now known as evalbot_r15162

[07:06] <evalbot_r15162> OUTPUT[foo‚ê§] Bool::True

[07:29] *** Lorn_ joined
[07:29] *** idiotmax_ joined
[07:39] *** drrho joined
[07:44] *** ofer0 joined
[07:45] *** Southen joined
[07:47] *** marmic joined
[07:56] *** rgs joined
[08:00] *** Yappo joined
[08:13] *** devogon joined
[08:16] *** iblechbot joined
[08:56] *** kanru joined
[08:59] *** andara joined
[09:02] *** elmex joined
[09:10] *** nipra joined
[09:18] *** |Lupin| joined
[09:18] *** rfordinal_ joined
[09:27] *** rfordinal_ joined
[09:29] *** andara left
[09:55] *** SCalimlim joined
[09:56] *** SCalimlim joined
[10:10] *** ruoso joined
[10:18] *** howl joined
[10:20] *** howl is now known as cornelius

[10:21] *** drupek12167 joined
[10:29] *** buetow joined
[10:29] *** shayx joined
[11:07] *** shayx_ joined
[11:13] *** jferrero joined
[11:25] *** dduncan left
[11:45] *** iblechbot joined
[11:45] *** nipotan is now known as nipotaway

[11:54] *** drupek12167 joined
[12:03] *** chris2 joined
[12:13] *** pbuetow joined
[12:23] *** TimToady joined
[12:47] *** nipra joined
[12:51] *** Cornelius joined
[12:58] *** Cornelius is now known as z0889

[13:04] *** sunnavy joined
[13:08] *** kisu joined
[13:19] *** z0889 is now known as z090

[13:20] *** Limbic_Region joined
[13:57] *** shayx joined
[14:02] *** seano joined
[14:03] *** VanilleBert joined
[14:23] *** [particle] joined
[14:29] *** ayrnieu joined
[14:32] *** iblechbot joined
[14:36] *** jferrero joined
[14:43] *** vel joined
[14:55] *** bonesss joined
[15:13] <|Lupin|> 4/part

[15:13] <|Lupin|> oops, sorry

[15:13] *** |Lupin| left
[15:18] *** ProperNoun joined
[15:22] *** nipra joined
[15:34] *** hexmode joined
[15:45] *** amnesiac joined
[15:54] *** VanilleBert left
[16:03] *** justatheory joined
[16:13] *** ProperNoun joined
[16:29] *** thepler joined
[16:53] *** nipra joined
[17:03] *** elmex joined
[17:20] *** kanru joined
[17:22] *** ofer1 joined
[17:44] <beppu> @babel en es perl is funny

[17:44] <lambdabot>   el Perl es divertido

[17:45] <allbery_b> just off the top of my head, that looks slightly odd :)

[17:47] <beppu> @babel en es pythonistas are not to be underestimated.  they are devious and sly.

[17:47] <lambdabot>   los pythonistas no deben ser subestimados. son desviados y sly.

[17:49] <TimToady> @babel jp en „Åô„Åî„ÅÑ

[17:49] <lambdabot> Plugin `babel' failed with: IRCRaised Error: Language jp not supported

[17:50] <TimToady> „Å°ÔºÅ

[17:51] <xinming> ÈÉÅÈó∑„ÄÇ„ÄÇ„ÄÇ

[17:51] <xinming> Áù°Ëßâ‰∫ÜÔºå Â§ßÂÆ∂ÊôöÂÆâ„ÄÇ :-D

[17:54] <TimToady> „Åä‰ºë„Åø„Å™„Åï„ÅÑ„ÄÇ

[17:56] *** xinming_ joined
[17:58] <Juerd> I see funny characters.

[18:06] *** Teratogen joined
[18:06] <Teratogen> will Perl 6 have winged comments?

[18:06] <[particle]> yes

[18:07] <[particle]> code; # comment

[18:07] <TimToady> never heard them called that...

[18:07] <[particle]> it's a c thing... /* comment */

[18:07] <Teratogen> winged comments are like /* comment */

[18:07] <TimToady> end-of-line comments is what I call them

[18:07] <Teratogen> err, what [particle] said

[18:08] <TimToady> do you mean #{...} comments then?

[18:08] <Teratogen> probably

[18:08] *** nipra joined
[18:08] <Teratogen> code /* comment */ code

[18:08] <TimToady> code #[[[ comment ]]] code

[18:08] <TimToady> where any set of brackets works

[18:08] <Teratogen> ah

[18:08] <Teratogen> nice

[18:09] <TimToady> is disallowed if # is in column 1 though.

[18:09] <TimToady> that's always line-end comment even if followed by bracket

[18:10] <TimToady> because people do 'a,'zs/^/#/ and expect it to work

[18:10] <TimToady> also, we encourage people to use pod for block comments

[18:15] *** BooK_ joined
[18:16] *** theorbtwo joined
[18:17] *** nipra joined
[18:20] <Juerd> #(((((((((( hug comment ))))))))))

[18:21] <Juerd> Hm, no

[18:21] <Juerd>  #(((((((((( hug comment ))))))))))

[18:21] <Juerd> :)

[18:33] *** gene9_ joined
[18:33] *** nipra joined
[18:35] *** CardinalNumber joined
[18:47] *** theorbtwo joined
[18:53] *** theorbtwo joined
[18:54] *** bonesss joined
[18:56] *** hexmode` joined
[19:12] *** hexmode`` joined
[19:12] *** ezraburgh joined
[19:15] *** GabrielVieira joined
[19:30] *** justatheory joined
[19:43] *** theorb joined
[19:49] *** drupek12167 joined
[19:50] *** bernhard joined
[20:00] *** REPLeffect joined
[20:07] <masak> perl6 cleans up the following things: regexes, OO and functional declarations

[20:08] <masak> with "cleans up", I mean something like "wholly replaces old with new"

[20:09] <masak> those three areas alone are reason enough to upgrade

[20:09] *** ProperNoun joined
[20:09] <masak> but then perl6 makes a whole lot of other improvements too

[20:12] *** nipra joined
[20:12] <PerlJam> masak: you make a good argument for upgrading but it has one important flaw ... no perl6 compiler.  :)

[20:19] *** elmex joined
[20:23] *** hexmode`` joined
[20:40] <TreyHarr1s> i thought there was a perl 5 backport of given/when, but I can't find it on cpan.  am i hallucinating?  if not, what's the model name?

[20:41] <TreyHarr1s> s/model/module/

[20:41] *** hexmode`` joined
[20:41] <wolverian> TreyHarr1s, 5.10 will have it; right now you can use Switch.pm

[20:42] *** Daveman joined
[20:42] <wolverian> (note that Switch is a source filter)

[20:42] <TreyHarr1s> wolverian: ahh, i missed the 'Perl6' import when i looked at Switch.pm a moment ago.  

[20:42] <wolverian> :)

[20:43] *** VanilleBert joined
[20:44] *** rashakil__ joined
[20:48] *** VanilleBert left
[21:03] *** miyagawa joined
[21:28] *** buetow joined
[21:28] <masak> PerlJam: true. But pugs is enough of a taste of one for me to feel excited. I want to show its goodness to people

[21:29] <masak> realistically, how far away is a real p6 compiler written in p6?

[21:29] <TimToady> I'm working on the official grammar right now.

[21:29] <masak> sounds good

[21:30] <TimToady> but a compiler is a lot more than just a grammar...

[21:30] <SamB> yes, but a grammar is a good starting point for a compiler

[21:31] <TimToady> there are lots of good starting points, and we've started at most of 'em already.  :)

[21:31] <SamB> heh

[21:31] <SamB> has everyone had a chance to start at each of them yet?

[21:32] <TimToady> a chance? sure.

[21:32] * SamB is referring to the saying "everything has been said, but not everyone has had a chance to say it yet"

[21:33] <TimToady> you can say that again

[21:33] <TimToady> that goes without saying

[21:33] <SamB> why would I want to say it again? not everyone has had a chance to say it yet!

[21:33] <TimToady> "Say it again, Sam!"

[21:34] * [particle] has joined #puns

[21:34] *** hexmode joined
[21:35] * TimToady has joined #pun6

[21:37] *** mdiep joined
[22:01] *** mdiep joined
[22:07] *** nipra joined
[22:13] *** CardinalNumber joined
[22:14] *** luqui joined
[22:14] *** CardinalNumber joined
[22:31] *** dduncan joined
[22:36] *** sahadev left
[22:38] *** justatheory joined
[22:44] *** REPLeffect_ joined
[22:46] *** weinig|away is now known as weinig

[22:46] *** fridim joined
[22:46] <fridim> hi.

[22:55] *** polettix joined
[23:06] *** Aankhen`` joined
[23:06] *** Psyche^ joined
[23:08] *** weinig is now known as weinig|away

[23:15] *** Psyche^ is now known as Patterner

[23:27] *** ProperNoun joined
[23:35] *** Odin- joined
[23:39] *** bonesss is now known as bonesss`away

[23:50] *** davidfetter joined
[23:50] <davidfetter> Lorn_, oi

[23:52] *** CardinalNumber joined
