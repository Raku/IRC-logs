[00:05] *** drupek12 joined
[00:06] *** mg joined
[00:21] *** Limbic_Region joined
[00:22] *** SamB joined
[00:31] <svnbot6> r16669 | lwall++ | Attribute not declared rw needs to write via @!n, not @.n

[00:33] <Aankhen``> Er, what? :-S

[00:33] <Aankhen``> Isn't !foo only for private attributes?

[00:40] <dduncan> !foo is how you spell a private attr

[00:40] <dduncan> or invoke a private method

[00:40] <Aankhen``> <svnbot6> r16669 | lwall++ | Attribute not declared rw needs to write via @!n, not @.n # does that mean even otherwise public but ro attributes are accessed with !foo?

[01:21] *** `Sean left
[01:27] *** drupek12 joined
[01:37] *** REPLeffect joined
[01:42] *** Lorn joined
[01:47] *** sunnavy joined
[02:05] *** jaapweel joined
[02:22] *** mako132_ joined
[02:29] *** edenc joined
[02:32] <dduncan> @tell TimToady it seems that S03 does not include the 'before' and 'after' generic ordering operators in its precedence table, where it should be in 'chaining infix' ... they also aren't listed with the reduce identity operators like their less generic familiars ... also, in the "chaining binary precedence" section of S03 that does mention before|after, I think a few C<> in list item names are missing the C, such as <==> and <eq>

[02:32] <lambdabot> Consider it noted.

[02:32] <lambdabot2> Consider it noted.

[02:33] <dduncan> seen TimToady

[02:33] <jabbot> dduncan: TimToady was seen 8 hours 35 minutes 30 seconds ago

[02:41] *** lambdabot2 left
[02:42] *** lambdabot left
[02:43] *** dolmans joined
[02:45] <PerlJam> dduncan: if S03 doesn't include them, then they don't exist  :-)  

[02:46] <dduncan> S03 does include them

[02:46] <PerlJam> I thought it was "looser" and "tighter" or somesuch anyway though.

[02:46] <dduncan> just not consistently

[02:46] <PerlJam> ah, I see. 

[02:46] <dduncan> this is a situation where some things should be mentioned in several places, but are actually only in some of those

[02:47] <dduncan> before|after is to <|>|lt|gt etc as ===|eqv are to ==|eq etc

[02:47] <SamB> PerlJam: that librarian pisses me off

[02:48] <SamB> real librarians aren't that stupid

[02:48] <SamB> a robot could be

[02:54] *** Aankhen`` joined
[02:54] *** Alias__ joined
[02:56] *** hcchien_ joined
[02:56] *** shachaf_ joined
[02:57] *** Frances joined
[02:57] *** shachaf_ is now known as shachaf

[02:57] *** obvio171 joined
[02:58] *** drbean joined
[03:07] <TimToady> Aankhen``: every declaration of @.n declares both @.n() the virtual method and @!n the actual private storage for that variable.  If you use the virtual method, and its not declared rw, it's not clear it should be allowed.

[03:08] <TimToady> (as an lvalue)

[03:18] *** Psyche^ joined
[03:25] *** daxim_ joined
[03:30] *** hcchien_ is now known as hcchien

[03:34] *** Psyche^ is now known as Patterner

[03:59] <Aankhen``> TimToady: Ah.

[04:05] *** Khisanth joined
[04:14] <svnbot6> r16670 | lwall++ | "for @foo -> my $a {...}" doesn't need the "my"

[04:25] <dduncan> ping TimToady

[04:25] <dduncan> I had used @tell, but the bots subsequently left and didn't tell you

[04:25] <dduncan> see irc backlog a few hours

[04:25] <dduncan> re before|after ops

[04:32] <TimToady> the prec table itself is only meant to be representative, but yes, there are holes in the rest of S3

[04:44] <dduncan> ack

[04:53] *** lambdabot joined
[04:58] *** kunwon1 joined
[05:17] *** buetow joined
[05:25] *** weinigLap joined
[05:26] *** weinigLap joined
[05:28] *** araujo joined
[05:38] <Tene> ?eval ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[05:38] *** evalbot_r16668 is now known as evalbot_r16670

[05:38] <evalbot_r16670> undef

[05:41] <meppl> good morning

[05:41] <Tene> Sure is!

[05:42] <meppl> good morning

[05:42] <meppl> good morning tene

[05:42] <meppl> Tene, ah, its just the wish

[05:43] *** Jmax joined
[05:57] *** jedai joined
[06:00] *** thoughtp1lice joined
[06:07] *** thoughtpolice joined
[06:11] *** buetow joined
[06:24] *** Averell joined
[06:31] <gaal> moose

[06:33] *** iblechbot joined
[06:37] <Aankhen``> lemur

[06:38] *** thoughtp1lice joined
[06:47] *** kane_ joined
[06:56] *** devogon joined
[07:01] *** unobe joined
[07:07] *** baest joined
[07:22] *** jisom joined
[07:34] *** dduncan left
[07:44] *** marmic joined
[07:53] *** serdan joined
[07:54] *** unobe is now known as unobe_away

[08:06] *** Salzh joined
[08:23] *** sebastian joined
[08:33] *** theorbtwo joined
[08:34] *** offby1 joined
[09:00] *** aharoni_ joined
[09:00] *** aharoni_ left
[09:01] *** aharoni joined
[09:05] *** akreal joined
[09:06] *** leo_ joined
[09:07] *** rfordinal joined
[09:17] *** gogonkt1_ joined
[09:17] *** gogonkt1_ is now known as gogonkt1

[09:25] *** polettix joined
[09:25] *** IllvilJa joined
[09:26] *** nipotan is now known as nipotaway

[09:29] *** BooK joined
[09:30] *** gogonkt1 joined
[09:39] *** gogonkt1_ joined
[09:41] *** sebastian joined
[09:58] *** gogonkt1_ left
[09:59] *** kanru joined
[10:13] *** crashmatrix joined
[10:19] *** aharoni left
[10:23] *** jisom_ joined
[10:38] *** rindolf joined
[10:46] *** ruz joined
[11:01] *** chris2 joined
[11:15] *** Alias_ joined
[11:17] *** iblechbot joined
[11:23] *** kanru joined
[11:24] *** cmarcelo joined
[11:43] *** fglock joined
[11:47] <leo_> audreyt: ping

[11:47] <lambdabot> leo_: You have 1 new message. '/msg lambdabot @messages' to read it.

[11:57] *** REPLeffect joined
[11:59] *** baest joined
[12:00] *** baest joined
[12:02] *** Psyche^ joined
[12:08] <thoughtp1lice> morning. :)

[12:08] *** thoughtp1lice is now known as thoughtpolice

[12:13] *** Aankh|Clone joined
[12:18] *** Psyche^ is now known as Patterner

[12:31] *** |Jedai| joined
[12:40] *** b_jonas joined
[12:41] <moritz> hi thoughtpolice ;)

[12:42] *** baest joined
[12:44] *** aharoni joined
[12:45] <aharoni> rindolf?

[12:45] <rindolf> Hi aharoni 

[12:45] <aharoni> oh yeah

[12:45] <rindolf> aharoni: are you Amir Aharoni?

[12:45] <aharoni> that's right

[12:45] <rindolf> aharoni: I'm Shlomi Fish.

[12:45] <aharoni> i finally made IRC work

[12:45] <rindolf> aharoni: ah nice.

[12:45] <aharoni> i know

[12:45] <rindolf> aharoni: you should register your nick.

[12:45] <aharoni> i did

[12:45] <rindolf> aharoni: OK.

[12:47] <rindolf> aharoni: what's up?

[12:47] <aharoni> i've been excited about perl6 / pugs / and all that for quite long

[12:47] <aharoni> and i can't connect to IRC through my usual ISP (HUJI)

[12:47] <rindolf> aharoni: oh.

[12:47] <aharoni> so finally i can see what the excitement is about

[12:48] <aharoni> i've been browsing through the pugs source tree

[12:48] <rindolf> aharoni: I'm not much into p6 and stuff, but I still like to hang out here.

[12:49] <rindolf> aharoni: have you been to any Perl-IL meetings?

[12:49] <rindolf> aharoni: there's a Ruby-IL meeting on Sunday.

[12:49] <rindolf> I have to be there to set up the room and stuff.

[12:50] <moritz> aharoni: we are all excited ;-)

[12:51] <aharoni> i live near Jerusalem, so i don't have time to meetings in TA, but i went to a couple of meetings in J-M

[12:51] <aharoni> i even gave a talk about using Perl for linguistics

[12:51] <moritz> cool ;)

[12:52] <aharoni> so anyway, i've been browsing through the pugs source tree ...

[12:52] <aharoni> and it's really eye-opening

[12:53] <aharoni> for years i've been coding Perl, C#, Java ... Haskell is really something different

[12:54] *** pjcj joined
[12:54] <moritz> completly different - that's why I contribute to the test suite and infrastructure, because it somewhat scares me ;)

[12:55] <rindolf> aharoni: I've written some Haskell code.

[12:55] <aharoni> i am usually very picky about coding standards and readability, but the Pugs code is very readable

[12:55] <rindolf> aharoni: http://www.shlomifish.org/haskell/ among other things.

[12:55] <aharoni> and i don't even know much Haskell! but i'm learning

[12:55] <lambdabot> Title: Index of /haskell

[12:56] <rindolf> aharoni: I have yet to understand what $ in Haskell means. I keep forgetting.

[12:56] <b_jonas> rindolf: I think it's just a parenthesis or something

[12:56] <aharoni> rindolf: that's just what i've been looking for.

[12:56] <rindolf> aharoni: I once wrote a log analyzer in Haskell, which caused a stack overflow.

[12:56] <b_jonas> but I don't know haskell

[12:56] <moritz> rindolf: the $ just modifies precedence

[12:56] <rindolf> b_jonas: hi.

[12:56] <rindolf> b_jonas: OK.

[12:56] <aharoni> yeah, that's how i understood it.

[12:56] <rindolf> moritz: oh.

[12:56] <moritz> rindolf: so foo (bar baz) can be written as foo $ bar baz

[12:57] <rindolf> moritz: hmmm...

[12:57] <moritz> it's like a noop with lowest precedence

[12:57] <aharoni> so it's mostly for optimizing for readability?

[12:57] <moritz> right

[12:57] <aharoni> OK, so i got it right.

[12:57] <moritz> but I'm not a haskell guru by any means, that's just what I read in YAHTj

[12:57] <aharoni> i am used to perl's man pages - perlop, perlfunc, etc.

[12:57] <moritz> s/j$//

[12:58] <aharoni> and i couldn't find anything like this in Haskell docs, but eventually i just found it in the source code of Prelude

[12:58] <aharoni> and right - ($) is a function that does pretty much nothing

[12:59] <moritz> YaY, I understood something correctly!

[12:59] <thoughtpolice> haskell is an amazing language

[12:59] <jaapweel> i wrote some haddock documentation into HsSyck, which is in the pugs tree, and i sent the darcs patch to audrey. is that the Right Thing to do with pugs patches?

[13:00] <jaapweel> or should they go to some mailing list?

[13:00] <aharoni> jaapweel: that's exactly what i came to ask too :)

[13:00] <thoughtpolice> jaapweel: get a commit bit and just commit directly :)

[13:00] <moritz> jaapweel: /msg me your email, and you'll get a commit bit

[13:00] <aharoni> i'm too much of a noob to hack into Haskell code, but i really wanted to help with documentation

[13:00] <thoughtpolice> aharoni: i'll send you one too

[13:01] <thoughtpolice> moritz: what's the commitbit interface?

[13:01] <moritz> or write it here if you don't mind spam ;)

[13:01] <thoughtpolice> i lost the url :(

[13:01] <moritz> commitbit.pugscode.org iirc

[13:01] <moritz> http://commitbit.pugscode.org/admin/project/Pugs/people

[13:01] <jaapweel> thoughtpolice, thanks for the advice; is this commit bit for some non-darcs VCS? 

[13:01] <thoughtpolice> pugs uses svn

[13:01] <moritz> jaapweel: it's svn ;)

[13:01] <jaapweel> i see

[13:01] <thoughtpolice> the darcs repo is purely there for looks :)

[13:01] <jaapweel> damn

[13:02] <thoughtpolice> it's cool

[13:02] <thoughtpolice> pulling the svn repo shouldn't take long at all

[13:02] <jaapweel> and i thinkin you guys are being all fancily distributed...

[13:02] <thoughtpolice> probably a bit faster since you won't have to download about 15,000 patch files :)

[13:02] <jaapweel> the darcs pull wasn't so bad with --partial

[13:02] <moritz> jaapweel: I don't think distribute SCM scales well for a project like pugs

[13:03] <thoughtpolice> i prefer the distributed model

[13:03] <moritz> just too many different people with repositories

[13:03] <thoughtpolice> well

[13:03] <thoughtpolice> look at the linux kernel :)

[13:03] <jaapweel> moritz, the concept, or darcs in particular? kernel.org uses distributed SCM

[13:03] <thoughtpolice> jaapweel: he means the concept of distributed source control

[13:03] <moritz> jaapweel: yes, but they have a central repository as well

[13:03] <moritz> I'm not an darcs expert though

[13:04] <thoughtpolice> well, darcs is about as easy as simply putting it on the internet

[13:04] <thoughtpolice> as it is with most repo's

[13:04] <jaapweel> thoughtpolice, i don't think the concept doesn't scale; in fact, i would say it scales better, and svn is acceptable exactly for smaller projects

[13:04] <thoughtpolice> and that is your 'central reposetory'

[13:04] <thoughtpolice> although in reality

[13:04] <thoughtpolice> jaapweel: neither do I; I love distributed VCS's

[13:04] <thoughtpolice> in reality, it's not really a central repo

[13:04] <thoughtpolice> it's just another repo

[13:04] <moritz> can I tell darcs to pull patches from every repository that I ever pulled from?

[13:05] <thoughtpolice> in svn lexicon you actually have the central repo on a server

[13:05] <jaapweel> but anyway, i didn't mean to start the big version control debate, i was just wondering how to contribute my little patch ;-)

[13:05] <thoughtpolice> moritz: you have to give it a specific repo.

[13:05] <b_jonas> lol, vcs wars

[13:05] <thoughtpolice> since in the distributed model patches can conflict if you're not careful

[13:05] <thoughtpolice> of course,

[13:05] <thoughtpolice> in that model you should be well organized

[13:05] <thoughtpolice> in that respect I can see why pugs took the centralized model:

[13:05] <thoughtpolice> everybody has the same access, same code, same stuff.

[13:06] <thoughtpolice> you don't have to worry about pulling from here or there. the linux kernel is particular because while it's a *huge* project

[13:06] <thoughtpolice> the developers are more organized

[13:06] <jaapweel> patches can conflict either way, though. i remember using CVS for a project in college and we continuously had these conflicts that required complicated CVS dances to resolve

[13:06] <thoughtpolice> so they don't have to worry about the conflicting problems inbetween their branches since just about every kernel dev has a specific part they work on alone. normally your changes won't reach far outside those bounds.

[13:06] <moritz> well, CVS sucks ;)

[13:06] <thoughtpolice> yeah

[13:06] <thoughtpolice> as linus said:

[13:07] <thoughtpolice> ".patch files and tarballs are what we originally used for the kernel"

[13:07] <thoughtpolice> "which is in fact a much superior source control model than CVS"

[13:07] <b_jonas> the ilnux kernel can't have lots of people with commit bits like pugs

[13:07] <b_jonas> or parrot

[13:08] <moritz> right

[13:08] <thoughtpolice> true

[13:08] <moritz> and their git is really cool IMHO ;)

[13:08] <thoughtpolice> but then again,

[13:08] <jaapweel> anyhow, my email address is weel at ugcs dot caltech dot edu

[13:08] <thoughtpolice> linux isn't a "community effort" in the same sense that pugs is I suppose

[13:08] <b_jonas> yeah

[13:09] <aharoni> linux is not -Ofun

[13:09] <thoughtpolice> the linux kernel has a dedicated group of people who work on it alone; most people outside that group aren't going to want commit access or probably even hack on the project as liberally,

[13:09] <thoughtpolice> since the linux kernel tbh is a pretty hard project

[13:09] <moritz> thoughtpolice: can you access commitbit? it times out for me :(

[13:09] <thoughtpolice> i accessed it

[13:09] <thoughtpolice> yeah hold on

[13:10] <thoughtpolice> aharoni & jaapweel: you might have to wait a couple minutes. commitbit's interface is kind of slow (well, understatement, but okay)

[13:11] <thoughtpolice> on the vcs note, i still prefer the distributed model for a couple reasons, but for a project that's as free-form as pugs, having that many individual repositories is asinine. a distributed model would be better suited amongst a small sect of developers.

[13:11] <thoughtpolice> also, moritz, I'll agree git is pretty awesome. :)

[13:12] <thoughtpolice> pretty much 0 windows support is kind of a killer though for a lot of stuff.

[13:13] <moritz> not for linux kernel dev ;)

[13:13] <thoughtpolice> yeah :)

[13:13] <thoughtpolice> the linux kernel kind of has special needs though

[13:13] <moritz> or debian packages and stuff

[13:13] <thoughtpolice> git *is* fast and branching is pretty critical; a solution like darcs wouldn't scale well to a code base that tremendous.

[13:14] <thoughtpolice> both in speed and handling that code base

[13:15] <thoughtpolice> aharoni: invited. :)

[13:15] <thoughtpolice> check your inbox in a few minutes

[13:15] <thoughtpolice> be sure to add your name to AUTHORS as your first commit; from there on in have a blast.

[13:16] <thoughtpolice> and now it's time to eat some cereal

[13:16] <thoughtpolice> jaapweel: gimmie a minute and I'll get yours as well. i assume the name to just be 'jaapweel'?

[13:19] <aharoni> thoughtpolice: thanks!

[13:19] <aharoni> wow it is indeed very slow

[13:19] <thoughtpolice> np

[13:19] <thoughtpolice> yes, it is.

[13:19] <thoughtpolice> :(

[13:19] <thoughtpolice> kind of a killer

[13:19] <aharoni> is it always like that ??

[13:20] <thoughtpolice> it seems so unfortunately. :(

[13:20] <thoughtpolice> btw aharoni, on the haskell note earlier: http://haskell.org/ghc/docs/latest/html/libraries/index.html

[13:20] <moritz> aharoni: we have load problems on the server that hosts it

[13:20] <thoughtpolice> that lists the full stock libraries that come with ghc

[13:20] <moritz> aharoni: but that only affects commitbit, other applications (like svn) are not that slow

[13:20] <thoughtpolice> you should also probably know about this link: http://haskell.org/hoogle/

[13:20] <lambdabot> Title: Hoogle

[13:20] <thoughtpolice> speaking of that

[13:21] <thoughtpolice> @where+ haskelldocs http://haskell.org/ghc/docs/latest/html/libraries/index.html

[13:21] <lambdabot> Done.

[13:21] <thoughtpolice> @where+ hoogle http://haskell.org/hoogle

[13:21] <lambdabot> Done.

[13:21] <thoughtpolice> for easy access later. :)

[13:22] <thoughtpolice> jaapweel: I sent yours. I just put your name under 'jaapweel' if that's not much trouble

[13:23] <moritz> thoughtpolice++ # invinting people ;)

[13:23] <thoughtpolice> :)

[13:23] <aharoni> so commitbit is slow, but SVN is not; what is commitbit, then? the interface for setting preferences?

[13:24] <thoughtpolice> aharoni: it's essentially a simple way to add authors to a project, administer that project, etc. etc..

[13:24] <thoughtpolice> so yeah you could say that

[13:27] *** sunnavy_ joined
[13:31] <aharoni> thoughtpolice: OK, i changed the password

[13:31] *** sunnavy__ joined
[13:31] <aharoni> thoughtpolice: now to commit i need to use this username/password in SVN?

[13:34] <moritz> aharoni: when you type 'svn ci' it will ask you for both

[13:34] <aharoni> thanks!

[13:34] <moritz> aharoni: it is custom to add your name to the AUTHORS file in the first commit to check if it works

[13:34] <thoughtpolice> yep

[13:34] *** sunnavy__ joined
[13:35] <aharoni> OK

[13:35] <thoughtpolice> svnbot6 rose from the dead

[13:35] <thoughtpolice> so the commit should fly by in here too :)

[13:35] <moritz> with a few seconds delay, that is ;)

[13:37] <thoughtpolice> oi

[13:37] <thoughtpolice> this whole gplv3 nonsense is exploding

[13:37] <moritz> I think gplv3 is necessary, but overhyped

[13:38] <thoughtpolice> the gplv2 doesn't reflect what the fsf wants, so the gplv3 is the 'logical conclusion'

[13:38] <thoughtpolice> (at least for now)

[13:38] <thoughtpolice> I mean in the sense of what's going on right now with all the controversy with it involving people like sun and linus

[13:39] <thoughtpolice> it's getting insane. i'm sort of tired hearing about it. :(

[13:40] *** sunnavy__ joined
[13:40] <moritz> thoughtpolice: stop reading /. then ;)

[13:40] <moritz> *SCNR*

[13:40] <thoughtpolice> it's also reddit. :)

[13:40] <thoughtpolice> but it doesn't explode as much as it does on /.

[13:41] *** sunnavy__ is now known as sunnavy

[13:41] <thoughtpolice> (i'm more programmer than I am 'computer guy' in general, so reddit appeals to me more.)

[13:41] <thoughtpolice> what I want to know is why everybody's throwing it around like it's the obligation of those using the v2 to switch to v3 -- especially linus.

[13:42] <thoughtpolice> (although linus has talked about using the v3 for the kernel for technologies like ZFS and dtrace and the like, since sun is really profiting off of using linux's drivers)

[13:42] <thoughtpolice> i'd be willing to be $20 (USD) linus won't relicense anything though.

[13:43] <thoughtpolice> and the whole 'tivoization' thing is weird in it's own right.

[13:43] <thoughtpolice> there's so much drama even before it's release i kind of want to see what'll happen after it's release,

[13:44] <moritz> thoughtpolice: I will not bet against that ;)

[13:44] <thoughtpolice> yeah

[13:44] <moritz> linus is sometimes pretty stubborn, and he does not see a reason for the trouble atm

[13:44] <thoughtpolice> well

[13:44] <thoughtpolice> opinionated people get things done

[13:45] <moritz> maybe if opensolaris adapts gplv3

[13:45] <moritz> then it would enable code sharing between linux and solaris

[13:45] <moritz> ZFS in linux, YaY!

[13:45] <thoughtpolice> opensolaris is going to use it iirc

[13:45] <thoughtpolice> (zfs looks rad.)

[13:46] *** Jmax joined
[13:46] <moritz> thoughtpolice: that's not decided yet

[13:46] <thoughtpolice> what i find particularly funny is that people are all getting linux all 'gussied up' for the big time and stuff, but treat linus like he's insane or something. he openly admits he's a bastard and he embraces that.

[13:47] <thoughtpolice> moritz: oh yeah? hm

[13:47] <thoughtpolice> well for technologies like zfs and dtrace in linux

[13:47] <thoughtpolice> it definately couldn't hurt

[13:47] <moritz> thoughtpolice: iirc the sun ceo just said they might consider it

[13:47] <thoughtpolice> ah.

[13:47] *** TJCRI joined
[13:47] <thoughtpolice> he actually invited linus to dinner at his house. :)

[13:47] <moritz> but as long as the license is not final, they obiviously can't decide ;)

[13:48] <b_jonas> sure

[13:48] <TJCRI> this may be a crazy question but is perl6 released (stable/production version) already?

[13:48] <thoughtpolice> the final draft will probably be pretty spot on as to what's going to be in the release.

[13:48] <moritz> TJCRI: it is not

[13:48] <thoughtpolice> TJCRI: negative

[13:49] <thoughtpolice> i haven't bothered reading the gpl3 draft fully though. i don't know if i particularly agree with the whole tivoization thing though

[13:49] <TJCRI> any time line or an estimate to when?

[13:49] <thoughtpolice> i mean, I can see where they're coming from; adding a restriction like that automatically removes a lot more of them (example: banning slavery,) but i dunno.

[13:49] <thoughtpolice> TJCRI: not really, unfortunately

[13:50] <thoughtpolice> TJCRI: but nothing stops you from playing around with it now: http://run.pugscode.org

[13:50] <TJCRI> its ok.. I was just wondering

[13:50] <lambdabot> Title: Run Perl 6 Now -- in your browser!

[13:50] <TJCRI> what are some of the big changes in perl6?

[13:51] <moritz> TJCRI: rules to implement grammers, easily definable new operators...

[13:52] <moritz> TJCRI: autoparallelisation...

[13:52] <moritz> TJCRI: easy integration of other languagues

[13:52] <rindolf> aharoni: here?

[13:53] <moritz> TJCRI: take a look at http://dev.perl.org/perl6/faq.html - there are tons of new features

[13:53] <lambdabot> Title: Perl 6 FAQ - perl6

[13:53] <TJCRI> yeah I will check that out!

[13:53] <TJCRI> thanks

[13:53] <thoughtpolice> new stuff is fun. :)

[13:54] <moritz> you're welcome

[13:55] *** franck__ joined
[13:56] <TJCRI> oh sweet perl6 will be compiled language :)

[13:56] <moritz> TJCRI: yes and no ;)

[13:56] <thoughtpolice> well, to parrot, but yes. :) (I suppose it depends on your formal definition of 'compile,' it seems some people can be pretty fussy about it.)

[13:57] <moritz> TJCRI: there is no spec that says perl 6 hast to be compiled, and every implemenation that passes the test suite will be "official"

[13:57] <moritz> TJCRI: but the goal is to build a compiler that outputs parrot PIR or bytecode

[13:58] <b_jonas> I think there's too much fuss about the word "compiled". they seem to say that as if it was automatically a good thing if you compile anything.

[13:58] <moritz> b_jonas: I think compiling is a good thing[tm], but we have to be clear what "compiled" means

[13:59] <moritz> b_jonas: perl 5 is mostly compiled to byte code as well

[13:59] <b_jonas> it can definitely be a good thing if you compile the right thing and in a right way

[13:59] <TJCRI> but perl5 is done on the fly right? will perl6 be done the same way then? (in other words - not much difference)? or will it be compiled before hand?

[13:59] *** serdan left
[13:59] <thoughtpolice> b_jonas: yes, some people can get pretty picky on the use of that word.

[14:00] <moritz> TJCRI: I don't know, that's not yet implemented... perhaps like python where it's compiled on the fly and the bytecode is stored

[14:00] <thoughtpolice> i.e. "it's not compiled if it's run through a virtual machine; it must be native code, etc"

[14:01] <TJCRI> ya that makes sense... I am by no means an expert but when I think of compiled I usually think of like the way c/c++ is compiled.. into an executable

[14:01] <moritz> TJCRI: but I guess it will let you dump and execute the byte code if you want that

[14:01] <thoughtpolice> i assume jit-compilation of the source will probably be done if you want it (i.e. perl6 file.pl), but TimToady or [particle] may be in a better position to answer that

[14:01] <TJCRI> but said the way thoughtpolice just said it, I guess java is compiled but then run through a vm

[14:01] <moritz> think of it more like java, without the crazyness ;)

[14:01] <thoughtpolice> i'd assume you could do it either way that's preferable to you

[14:02] <thoughtpolice> TJCRI: well, depends on the implementation. you *can* compile java to native code; sun's implementation is just 'the' implementation

[14:02] <TJCRI> moritz: your python example... isnt that similar to what mod_perl does for apache and perl modules on the web? pretty much keeps 1 copy available for faster running

[14:02] <thoughtpolice> but in general i've seen some people fairly fussy over that particular word. i'm pretty lax about it; if it is translated to a form that runs on some sort of execution platform (be it parrot, neko, .net, jvm, etc) then I would probably consider it 'compiled'

[14:02] <moritz> TJCRI: the difference is that mod_perl keeps it in memory, while python keeps it on disk

[14:03] <thoughtpolice> that includes an actual processor architecture

[14:03] <TJCRI> moritz: ah ok I dont do much in python so I dont know how its handled

[14:04] <moritz> same for me.. I just observed it creats .pyc files when .py files are run, and they are updated when you change the .py file

[14:04] <moritz> so I guess it's a byte code representation of the source file

[14:04] <thoughtpolice> yeah python has a byte code representation

[14:04] <thoughtpolice> in the REPL iirc you can 'dump' the bytecode of a particular expression

[14:04] <TJCRI> yeah well that makes sense... if the byte code is newer than the source code, why re-translate it all again?>

[14:04] <thoughtpolice> but I can't remember how to do it.

[14:05] *** amnesiac joined
[14:05] <TJCRI> ok so here is a great hypothetical question... perl is at least at v5.8.5  ... what happened when it gets to 5.9.9 ? ;)

[14:06] <moritz> TJCRI: the next maint release will be 5.10

[14:06] <thoughtpolice> 5.10

[14:06] <thoughtpolice> :)

[14:06] <moritz> TJCRI: and even minor version number is always maint, an odd development...

[14:06] <thoughtpolice> now, if it gets up to 5.99,

[14:06] <thoughtpolice> well

[14:06] <moritz> TJCRI: the current dev track is it 5.9.5, but they want to release 5.10 soonish

[14:06] <thoughtpolice> that may hint at something

[14:07] <TJCRI> well there ya go, an easy answer/solution :) guess there is still lots of time

[14:07] * TJCRI should have known that too because of mapserver being on 4.10

[14:07] <moritz> but I don't expect a 5.14 release before Perl 6 is out ;)

[14:08] <moritz> perhaps not even a 5.12 - the minor releases take their time as well

[14:08] <TJCRI> well I hope I can handle perl6 :) I like using perl for scripts like reports and also doing backups etc. of data

[14:08] <thoughtpolice> i propose we call the last release before 6 is out, 'perl 5000'

[14:09] <thoughtpolice> or I suppose it'd be perl5k

[14:09] <moritz> TJCRI: it's by no means harder than perl 5

[14:09] <moritz> TJCRI: nearly all features are optional

[14:09] <moritz> and 'say $foo' is just easier to type than 'print $foo, "\n"' ;-)

[14:10] <thoughtpolice> $foo.say ftw!

[14:10] <moritz> or that, yes

[14:10] <TJCRI> ftw?

[14:10] *** prism joined
[14:10] <TJCRI> oh ya $foo.say would be similar to the way java is written

[14:10] <TJCRI> I could go for that

[14:11] <moritz> but you can still use the non-method syntax

[14:11] <moritz> so "say $foo" and "$foo.say" are exactly the same

[14:12] <moritz> same for static types - you can use them if you want, or ommit them when they don't fit your needs

[14:12] <thoughtpolice> TJCRI: 'ftw' == 'for the win'

[14:12] <moritz> ?eval 'wtf'.reverse

[14:12] <TJCRI> thoughtpolice: still doesn't make sense to me? must be something I am not aware of

[14:12] <evalbot_r16670> "ftw"

[14:13] <thoughtpolice> TJCRI: i meant it in the sense '$foo.say' > 'say $foo'

[14:13] <thoughtpolice> TJCRI: if you want a quick dose of perl 6 you can check my blog:

[14:13] <moritz> TJCRI: you can live without ;)

[14:13] <thoughtpolice> http://diveintoperl6.blogspot.com

[14:13] <lambdabot> Title: Dive into Perl 6

[14:13] <thoughtpolice> that should hopefully give you some background in writing a little perl 6 code. :)

[14:14] <TJCRI> how is it greater if moritz said the sytanx are exactly the same? *major confusion* hehe

[14:14] <thoughtpolice> speaking of that, the next round is going to be looong and tiresome to write.

[14:14] <moritz> TJCRI: maybe thoughtpolice thinks it's more "idiomatic"

[14:14] <thoughtpolice> not really

[14:15] <moritz> thoughtpolice: cooler?

[14:15] <moritz> shorter?

[14:15] <thoughtpolice> that might be one way to explain it

[14:15] <moritz> easier to type?

[14:15] <thoughtpolice> in all honesty I just like to stir things up

[14:16] <thoughtpolice> i guess my mission is accomplished :)

[14:16] <moritz> it always depends on what you do. If you write [email@hidden.address] ").say" you write it the way the data flows

[14:16] <TJCRI> ok I have one more question before I get back to doing some of my work... what type of editor/ide do you guys use?  I used to use textpad with perl syntax at my old job but the last year or so I have been using eclipse with epic

[14:16] <thoughtpolice> TJCRI: emacs. :)

[14:16] <moritz> TJCRI: vim wtf!

[14:16] <moritz> *LOL*

[14:16] <thoughtpolice> apparently, there is something wrong here

[14:16] <thoughtpolice> moritz: we must fight to the death

[14:16] <thoughtpolice> sorry it had to end this way, but my editor is better than your editor :(

[14:17] * TJCRI laughs

[14:17] <moritz> *LOL*

[14:17] <moritz> thoughtpolice: s/editor/operating system/

[14:17] <thoughtpolice> that only gives me more of an edge. :)

[14:17] <TJCRI> well I just picked epic with eclipse because I also do some java coding and I understand eclipse fairly well

[14:18] <thoughtpolice> eclipse is pretty nice tbh.

[14:18] <thoughtpolice> i'm just a terminal guy myself

[14:18] <moritz> vim and emacs both have perl 6 modes ;)

[14:18] <TJCRI> alright well it was fun chatting with ya... time to get back to my maps

[14:19] <moritz> TJCRI: have fun

[14:19] <thoughtpolice> TJCRI: bye. drop in any time with questions. :)

[14:19] <TJCRI> oh I will :)

[14:20] <moritz> thoughtpolice: time for us to start our stupid flame war, is it? *g*

[14:20] <thoughtpolice> moritz: undoubtly. :)

[14:24] *** pmurias joined
[14:26] <thoughtpolice> oi. i'm definately going to have to split round 4 into two parts I think.

[14:28] <pmurias> ($) is right associative function application

[14:29] <thoughtpolice> pmurias: i think you may be an hour or so too late for that convo :)

[14:31] <pmurias> just that anybody reading the log dosn't get a wrong idea

[14:32] <moritz> so what does "right associative" mean?

[14:32] * moritz is not a CS guy, just a programmer ;)

[14:32] <moritz> but I try real hard ;)

[14:33] <pmurias> a $ b $ c = a(b(c))

[14:33] <moritz> ok

[14:33] <pmurias> in haskell a b c = (a(b))(c)

[14:34] <pmurias> so "$" is the eqivalent of " " in perl

[14:35] * pmurias isn't a CS guy either

[14:35] <moritz> ok

[14:35] <thoughtpolice> it's related to how the function is applied in relation to the parameters.

[14:36] *** gogonkt1 joined
[14:36] <thoughtpolice> if there was an inverse of ($), let's call it, say, (#), it would be left associative, as (a(b(c))) (or a $ b $ c) would be written c # b # a

[14:37] <moritz> like the dot notation in perl

[14:37] <moritz> @list.sort.say

[14:37] <lambdabot> Unknown command, try @list

[14:37] <moritz> lambdabot: shut up ;)

[14:38] <thoughtpolice> if you notice in the haskell docs there are multiple (seemingly innocuous) different definitions of functions like fold; the distinction is important, as it says in what way that particular function is "associated"

[14:38] <moritz> ok, I know of foldl and foldr or whatever they are called ;)

[14:38] <thoughtpolice> yeah :)

[14:38] <thoughtpolice> the expression, for example

[14:39] <thoughtpolice> foldr (+) 0 [1..5]

[14:39] <thoughtpolice> would evaluate to:

[14:39] <thoughtpolice> > foldr (+) 0 [1..5]

[14:39] <lambdabot>  15

[14:39] <moritz> .. + 4 + ( 5 + 0)

[14:39] <moritz> right?

[14:39] <thoughtpolice> well, in reality, that's a lot like saying (1 + (2 + (3 + (4 + ( 5 + 0)))))

[14:40] <moritz> > foldr + $ 0 [1..5]

[14:40] <lambdabot>  Parse error

[14:40] <moritz> ok, + is infix

[14:40] <thoughtpolice> in the case of other functions,

[14:40] <thoughtpolice> it's automatically 'infixed' in haskell using the backtick notation

[14:40] <moritz> >let plus = (+); foldr plus $ 0 [1..5]

[14:41] <thoughtpolice> > let plus = (+) in foldr plus 0 $ take 5 [1..]

[14:41] <lambdabot>  15

[14:41] <thoughtpolice> :)

[14:41] <moritz> thanks ;)

[14:41] <moritz> > let plus = (+) in plus `foldr`  0 $ take 5 [1..]

[14:41] <lambdabot>  15

[14:41] <thoughtpolice> there ya go. :)

[14:42] <moritz> the haskell talk yesterday was not in vain ;)

[14:42] *** gogonkt1 joined
[14:42] <thoughtpolice> hm

[14:43] <thoughtpolice> > let plus = (+) in (plus 0 $ take 5 [1..])`flip foldr` plus

[14:43] <lambdabot>  Parse error

[14:43] <thoughtpolice> aw :(

[14:43] * pmurias wishes he could use haskell in browsers instead of javascript

[14:43] <thoughtpolice> > let flipper = (flip foldr) in (+ 0 $ take 5 [1..])`flip foldr` plus

[14:43] <lambdabot>  Parse error

[14:43] <thoughtpolice> > let flipper = (flip foldr) in (+ 0 $ take 5 [1..])`flipper` plus

[14:43] <lambdabot>   Not in scope: `plus'

[14:44] <thoughtpolice> > let flipper = (flip foldr) in (0 $ take 5 [1..]) `flipper` (+)

[14:44] <lambdabot>   add an instance declaration for (Num ([t] -> a))

[14:44] <thoughtpolice> aw :(

[14:44] <thoughtpolice> but you get the idea

[14:44] <thoughtpolice> foldl is the exact opposite in that it reduces a list from left to right.

[14:44] <moritz> yes, that haskell is picky of the types ;)

[14:44] <thoughtpolice> the type system is the best part. :)

[14:44] *** mico_ joined
[14:44] <thoughtpolice> no runtime bugs, just about, uh, ever. take that, null pointers!

[14:45] <moritz> but empty lists passed to tail ;)

[14:47] <thoughtpolice> well, you still have no worries that your code has actual 'bugs' in the programmatic sense; passing an empty list to something is just faulty coding. :)

[14:47] <thoughtpolice> either that or something from the realworld is messing with you (like say doing [arg] <- getArgs, pass more than one args and it won't work that well :/ )

[14:47] <moritz> thoughtpolice: that might be correct, but it doesn't stop your software from not doing what you want it to do ;)

[14:48] <thoughtpolice> true is such

[14:48] <thoughtpolice> luckily for us though,

[14:48] <thoughtpolice> haskell just works :)

[14:49] <pmurias> valgrind + cgdb is an excelent combination for tracing down null pointer

[14:49] <thoughtpolice> valgrind is slick

[14:50] <moritz> valgrind++

[14:50] <thoughtpolice> definately

[14:50] <pmurias> firing up the debuger when segfault happens is realy cool

[14:50] <pmurias> s/happens/happen/

[14:51] <moritz> without valgrind and gdb I'd had to use perl all the time ;)

[14:51] <thoughtpolice> you make it sound bad.

[14:51] <thoughtpolice> :o

[14:52] <pmurias> &

[14:52] <moritz> that was intentionally but not really serious ;)

[14:52] <moritz> thoughtpolice: I like perl, but there are applications where performance is just too important

[14:52] <thoughtpolice> absolutely.

[14:53] <moritz> thoughtpolice: I wrote a little C program that detects eyes in images of faces - I tried it in perl first, but I got bored to wait for the result all the time ;)

[14:54] <thoughtpolice> i'm still young (and unemployed,) so in general performance is a concern to me, just not a huge one. to put another way: i've never really worked on things like minimalistic hardware (embedded stuff) or in very intensive applications where your apps have to be bleeding edge

[14:54] <thoughtpolice> for some reason though I doubt if one of those careers or jobs ever land in my lap, that my outlook on the situation will change a great deal overall.

[14:54] <moritz> thoughtpolice: unemployed? apply for a perl 6 microgrant!

[14:54] <thoughtpolice> :)

[14:55] <moritz> not the same payment as "real work"

[14:55] <moritz> but 500$ are better than nothing

[14:55] <moritz> and if you want to work on pugs, you can code haskell!

[14:55] <thoughtpolice> perl 6 microgrant?

[14:55] <thoughtpolice> do they take 17 year olds? :x

[14:55] <moritz> iirc there are microgrants left, and pugs people are encouraged to apply

[14:55] <Juerd> Age is irrelevant.

[14:55] <moritz> thoughtpolice: why not?

[14:56] <Juerd> Skills, tuits, and actual work are important.

[14:56] <thoughtpolice> fun stuff. :)

[14:56] <moritz> see http://use.perl.org/article.pl?sid=07/03/22/1542235

[14:56] <lambdabot> Title: use Perl | Perl 6 Microgrants

[14:57] <moritz> Juerd: did you keep track of how many are available?

[14:57] <thoughtpolice> hm seems good. a nice way to get some cash doing some awesome stuff over the summer. :)

[14:58] <moritz> right

[14:58] <Juerd> moritz: No

[14:58] <moritz> actually I applied for some "real work" over the summer, and if I don't the job, I apply for one as well

[14:59] <Juerd> I wonder if upgrading feather would be within the microgrant program's ideas

[14:59] <thoughtpolice> well a microgrant like that may be a good idea (i wanted to apply for the SoC but you have to be 18.) if I come up with any good ideas i'll give a shot emailing them. :)

[14:59] <moritz> Juerd: upgrading to what?

[14:59] <Juerd> moritz: More CPU

[14:59] <moritz> thoughtpolice: repair the .PIR backend

[15:00] <thoughtpolice> 17 is like the worst age. there are some restrictions that're lifted; but for the most part, it only makes you want that golden status of '18' moreso. :(

[15:00] <Juerd> moritz: But mostly, data backup space is needed

[15:00] <moritz> thoughtpolice: you'll do haskell and learn PIR

[15:00] *** prism joined
[15:00] <thoughtpolice> moritz: plausable. :)

[15:00] <moritz> Juerd: do I have to travel to the netherlands? *g*

[15:00] <thoughtpolice> i talked with gaal about getting some public haddock docs of the pugs source up, as well as a index of the functions in the source (hasktags)

[15:01] <thoughtpolice> btw, Juerd, did you get my email?

[15:01] <Juerd> moritz: Oh, I can de the upgrade in an hour. It's the hardware expenses that I'm considering applying for...

[15:01] <Juerd> thoughtpolice: No

[15:01] <thoughtpolice> :(

[15:01] <moritz> Juerd: ok ;)

[15:01] <Juerd> moritz: The current motherboard is maxxed out, CPU wise, and new things use DDR2 memory.

[15:02] <Juerd> So that would all need replacement: mainboard, CPU, memory.

[15:02] <Juerd> That, and some hard drives for data backups, could be done for $500, I think

[15:02] <moritz> Juerd: if there are services that could be factored out to different maschines I might contribute some hosting

[15:02] <moritz> Juerd: problem is I don't have root access, so I can't give other shell access :(

[15:03] <Juerd> moritz: I have several spare machines myself. That's not really the issue

[15:03] <moritz> Juerd: ok

[15:03] <Juerd> The big issue is that there's a limit to my tuits as a sysadmin.

[15:03] <Juerd> And this limit is becoming more of a problem, as feather's hardware resources are used more.

[15:03] <[particle]> ddr2++

[15:10] <thoughtpolice> Juerd: I resent the email.

[15:10] <thoughtpolice> maybe it'll get through this time.

[15:13] *** REPLeffect joined
[15:14] <gaal> regarding version control and pugs: the main repo is svn. there is a read only darcs mirror. for folks who prefer distriuted version control, there's svk, which happens to work seamlessly with svn backend :)

[15:16] <Juerd> "happens to". heh.

[15:17] <moritz> what a coincidence ;)

[15:17] <Juerd> thoughtpolice: If you're Michele, I've received the message

[15:17] <thoughtpolice> no, I would be Austin. :(

[15:17] <Juerd> Then I haven't

[15:18] <thoughtpolice> damnit. :(

[15:18] <thoughtpolice> [email@hidden.address] right?

[15:18] <Juerd> Yes

[15:18] <Juerd> Or [email@hidden.address] :)

[15:19] <Juerd> Somehow some people seem to use that address even though I don't advertise it :)

[15:19] <moritz> that's the "bow for me 'cause I am root' - effect ;)

[15:28] *** aharoni joined
[15:30] <aharoni> rindolf: still here?

[15:30] <aharoni> i'm back

[15:30] <aharoni> windows crashed ;)

[15:37] <moritz> windows sucks ;)

[15:37] <moritz> when it crashes, at least ;)

[15:38] *** barney joined
[15:40] <thoughtpolice> crashes suck in general I've found

[15:40] <aharoni> i tried to pick up haskell a couple of years ago and it seemed like complete gibberish

[15:41] <aharoni> i don't know what happened since. now that i try to read haskell docs, it looks so simple and intuiitve

[15:41] <aharoni> and i'm not a CS guy

[15:41] <moritz> aharoni: perhaps you changed? *g*

[15:42] <aharoni> maybe.

[15:42] <aharoni> i tried to go back to it, 'cause i kept checking www.pugscode.org from time to time ...

[15:43] <moritz> CSS seemed complicated and useless to me first and now I couldn't do without ;)

[15:43] <aharoni> and then one time i read the "-Ofun" presentation and it just knocked me off

[15:43] <aharoni> so i thought that i have to try and look into pugs again, and then some magic happened

[15:44] <moritz> I'm still waiting for that magic ;)

[15:47] <aharoni> good luck. i'll have something more significant to say after a few commits

[15:47] <aharoni> in the meantime i'm a mere noob

[15:48] <moritz> well, begin by commiting AUTHORS ;-)

[15:48] <aharoni> even before i did anything else?

[15:48] <moritz> yes

[15:48] <moritz> just to check that your commitbit works

[15:48] <moritz> it's a custom ;)

[15:49] <aharoni> i thought of adding hebrew to Earendil translations, but i don't have a hebrew LOTR anywhere around

[15:49] <moritz> ;)

[16:04] *** isaacd joined
[16:07] <gaal> I thought of translating that myself, but got stuck on it.

[16:09] <thoughtpolice> aharoni: I tried haskell several years ago as well (when I was about 15 maybe.) i saw it somewhere and I liked the lambda logo. needless to say I couldn't understand a thing. :(

[16:10] <thoughtpolice> so I think I opted for something like python instead

[16:11] <thoughtpolice> i can't quite remember; when I started programming I tried a few languages, then there's this big hazy area, then where I am about now. you may wonder what happened in that middle area; so do i.

[16:11] * moritz started with quick basic :(

[16:12] * thoughtpolice started with php :X

[16:15] *** jhorwitz joined
[16:15] <thoughtpolice> perl was my second though. :)

[16:16] * aharoni started with Turbo Pascal 7, not counting GW-BASIC

[16:16] *** buetow joined
[16:16] <moritz> I can't rember exactly.. I think I had pascal as a second language, then C

[16:18] <thoughtpolice> C was my third as well.

[16:18] <thoughtpolice> i already feel old. :( i'll be in a wheelchair by the time i'm 25 due to being tired out from coding so much

[16:18] <thoughtpolice> but at least I'll probably end up happy :)

[16:19] *** weinigLap joined
[16:21] *** lordarthas joined
[16:21] *** rindolf joined
[16:22] *** lordarthas left
[16:26] *** justatheory joined
[16:27] *** justatheory joined
[16:38] * cj started with turbo pacal, but doesn't recall the version number

[16:39] <cj> then turbo c++ then gcc

[16:47] <thoughtpolice> i always found talking to those who started with punch cards to be very enlightening. :)

[16:48] *** the_dormant joined
[16:49] <rindolf> cj: I started with the XT ROM's BASIC.

[16:49] <rindolf> cj: back in 1987

[16:53] <thoughtpolice> okay, you guys have put me back in perspective. i'm pretty young.

[16:53] <thoughtpolice> :)

[17:00] *** mico_ joined
[17:04] <fglock> I did start with punch cards

[17:04] <lambdabot> fglock: You have 1 new message. '/msg lambdabot @messages' to read it.

[17:06] <mico_> I too started with punchcards. Copying software was so hard :-)

[17:13] *** weinig_ joined
[17:14] <thoughtpolice> i would bet so

[17:15] *** weinig_ joined
[17:16] *** weinig_ is now known as weinigLap

[17:18] *** weinigLap is now known as bradee-oh

[17:19] *** bradee-oh is now known as weinigLap

[17:19] <TimToady> I started with paper tape...punchcards were reserved for the real programmers...

[17:20] *** t3x joined
[17:21] <b_jonas> good. I'll quote that as "I started perl with paper tape..."

[17:21] *** t3x left
[17:22] *** weinigLap joined
[17:26] *** Psyche^ joined
[17:40] *** aharoni left
[17:42] *** Psyche^ is now known as Patterner

[17:44] *** fglock_ joined
[17:45] *** gogonkt1_ joined
[17:45] *** rindolf joined
[17:47] *** gogonkt1_ joined
[17:49] *** crashmatrix_ joined
[17:49] *** weinigLap joined
[17:54] *** gogonkt1__ joined
[18:01] *** the_dormant_ joined
[18:12] *** justatheory joined
[18:22] *** dduncan joined
[18:24] *** TJCRI joined
[18:43] *** justatheory joined
[18:43] *** lvh joined
[18:45] *** rlb3_work joined
[18:47] *** unobe_away is now known as unobe

[18:55] *** Alchemy joined
[18:57] *** thestarslookdown joined
[18:57] *** unobe is now known as unobe_away

[19:00] *** prism joined
[19:10] *** aharoni joined
[19:10] *** aharoni left
[19:18] *** japhb joined
[19:18] *** REPLeffect joined
[19:28] *** mj41 joined
[19:32] *** dduncan joined
[19:34] <svnbot6> r16671 | lwall++ | [STD] add pseudoops to catch P5 migratos.

[19:37] *** Corion joined
[19:38] *** Corion left
[19:46] *** mtve joined
[19:52] *** IllvilJa joined
[20:03] *** isaacd_ joined
[20:18] *** weinigLap joined
[20:19] *** weinigLap joined
[20:21] *** justatheory joined
[20:33] *** the_dormant joined
[20:47] *** uno_be joined
[20:49] *** Psyche^ joined
[20:52] *** the_dormant joined
[20:53] *** amadeus joined
[20:55] *** Psyche^ is now known as Patterner

[21:23] *** avarab joined
[21:23] *** mico_ joined
[21:27] <meppl> good night

[21:34] *** buetow joined
[21:50] *** Aankh|Clone is now known as Aankhen``

[21:57] *** avarab is now known as avar

[22:01] *** sebastian joined
[22:08] *** avarab joined
[22:13] *** buetow joined
[22:16] <dduncan> ?eval sub of of Bool () {...}

[22:17] *** evalbot_r16670 is now known as evalbot_r16671

[22:17] <evalbot_r16671> undef

[22:22] *** avarab is now known as avar

[22:29] <TimToady> ?eval sub of () of Bool { True }; of();

[22:29] <evalbot_r16671> Bool::True

[22:30] <TimToady> ?eval our Bool sub of { True }; of()

[22:30] <evalbot_r16671> Bool::True

[22:31] <moritz> is True the same as Bool::True?

[22:31] <TimToady> True is imported from Bool

[22:31] <TimToady> though it might be hardwired in pugs

[22:31] <moritz> ?eval False = Bool::True; False ?? "foo" !! "bar"

[22:32] <evalbot_r16671> Error: Can't modify constant item: VBool False

[22:32] <dduncan> fyi, my above example was that I wanted to name my method 'of'

[22:32] <dduncan> it is an accessor for an attribute named 'of'

[22:32] <TimToady> yes, I was just showing you how I'd write it

[22:33] <dduncan> okay, I'll try it that way

[22:33] <TimToady> actually, these days I'd use (--> Bool)

[22:33] <moritz> how's that written?

[22:34] <TimToady> ?eval sub of (--> Bool) { True }; of()

[22:34] <evalbot_r16671> Error: ␤Unexpected "-->"␤expecting formal parameter or ")"

[22:34] <TimToady> bug in pugs

[22:34] <TimToady> ?eval sub of (*@none --> Bool) { True }; of()

[22:34] <evalbot_r16671> Bool::True

[22:35] <TimToady> in fact, that's one of the "cheats" that cheat does.

[22:39] <TimToady> actually, it turns (--> Foo) into (*%_ --> Foo)

[22:40] <avar> ?eval our Bool sub eek { True } eek;

[22:40] <evalbot_r16671> Bool::True

[22:40] <avar> ?eval sub eek (--> Bool) { True } eek;

[22:40] <evalbot_r16671> Error: ␤Unexpected "-->"␤expecting formal parameter or ")"

[22:41] <TimToady> ?eval sub eek (*%_ --> Bool) { True } eek;

[22:41] <evalbot_r16671> Bool::True

[22:41] <TimToady> just doesn't like the empty list in front of -->

[22:42] <avar> but aside from that --> Type is the same as my/our Type sub ... 

[22:43] <TimToady> yes

[22:44] <svnbot6> r16672 | lwall++ | [STD] missing require, no, and trusts

[22:50] *** avarab joined
[22:50] <TimToady> if someone is looking for a good weekend project, translating the regex part of STD.pm into Haskell and calling it from Parser.hs at about line 240 would be cool.  extra points for making it run.  :)

[22:51] <moritz> regex to haskell compiler? or manually?

[22:52] <TimToady> manually, for bootstrapping

[22:53] <moritz> maybe I find some crazy haskell hackers at debconf that I can convince

[22:53] <TimToady> the main impediment to running STD in pugs seems to be the lack of a regex engine that can handle it.

[22:53] <moritz> s/that/whom/

[22:53] <TimToady> should be trivially easy in a language with continuations :)

[23:23] *** explorer joined
[23:25] <dduncan> fyi, its not very scientific, but it appears that the speed of Pugs is about 1/100th the speed if Perl 5 ...

[23:25] <dduncan> judging by the wallclock time for the Perl 6 and Perl 5 versions of the Muldis-DB test suite

[23:26] <dduncan> they are 201 secs vs 2 secs on my machine

[23:26] <dduncan> that said, in either case, the majority of each test to date is just compilation, not runtime

[23:26] <dduncan> for a runtime heavy test, the comparison may differ a lot, probably in Pugs' favor

[23:27] <dduncan> has anyone else tried compiling or running equivalent code in the 2 languages on their machines?

[23:28] *** avarab is now known as avar

[23:30] <dduncan> that said, comparing CPU time rather than wallclock, it is 196.95 for Pugs vs 1.33 for Perl 5

[23:30] <dduncan> in that case, Pugs is 1/148th the speed of Perl 5

[23:30] <dduncan> perhaps a more accurate figure

[23:38] <svnbot6> r16673 | Darren_Duncan++ | ext/Muldis-DB/ : in AST.pm, added new node types [Default,Treat], fixed bugs ; in Example.pm, replaced ::Value class with ::Var class

[23:42] *** justatheory joined
[23:59] *** mncharity left
