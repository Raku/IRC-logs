[00:49] *** thoughtpolice joined
[00:50] *** buetow joined
[00:51] <japhb> Finally figured out a syntax that would work for the dispatch tables, so now have current benchmark results:

[00:52] <japhb> 'step075' benchmark (values in FPS):

[00:52] <japhb> REVISION    NOGFX   STUBBED    FULL

[00:52] <japhb> r15908     13.796     9.390   5.170

[00:52] <japhb> r16189     14.003     9.534   5.084

[00:52] <japhb> r16322     11.784     8.228   3.890

[00:52] <japhb> r16421     18.164     8.828   error

[00:52] <japhb> r16447     22.089     9.861   4.595

[00:52] <dduncan> and my smoke is done

[00:53] <dduncan> oddly enough, smokeserv-client.pl seemed to hang after it uploaded the data, and eventually died with error: 500 read timeout ... but prior to that, I could already see the smoke on the server

[01:00] *** mjk joined
[01:13] *** polettix joined
[01:18] <Aankhen``> Is there an easy way to test out changes to smokeserv-server.pl?

[01:18] <lambdabot> Aankhen``: You have 2 new messages. '/msg lambdabot @messages' to read them.

[01:20] *** SubStack joined
[01:21] <thoughtpolice> what exactly is the difference between 'use v6' and 'use v6-alpha'? from the pod, v6 is used for pure perl6 code that is not valid perl5, and v6-alpha is just a perl5 module to implement perl6; is there a real difference?

[01:23] *** japhb joined
[01:23] <thoughtpolice> v6-alpha is a p5-2-p6 compiler front end (experimental) that implements a small fraction of p6 semantics and syntax; does pugs implement more than this, thus the distinction?

[01:23] *** Caelum joined
[01:25] <japhb> pugs does implement more than v6.pm.  pugs is p6-on-haskell.  v6 is p6-on-p5.  mp6/kp6 are p6-on-p6 (ask fglock for all the gory details).  And then there's parrot's native perl6 implementation, which is bottom up instead of top down (as pugs more or less is)

[01:26] <japhb> but the line 'use v6;' tells p6 or p5 that you want to speak p6 now.

[01:26] <thoughtpolice> so basically v6-alpha is used when you want perl6, but you may lack pugs since perl5 will just call the module to execute properly?

[01:27] <thoughtpolice> easy enough; I saw the two use clauses used many places so I didn't exactly know if there was a definitive difference or somesuch

[01:27] <japhb> when you say 'use v6-alpha;' you are actually making use of valid p6 syntax and "just happens to work" p5 syntax to do the right thing no matter which actual executable you use

[01:28] <thoughtpolice> IOW, v6.pm is just 'perl on perl action'

[01:29] <japhb> Because pure 'use v6;' under p5 would tell you that your perl is too old.  But 'use v6-alpha;' loads v6.pm and starts compiling your p6 code to p5.

[01:29] <Aankhen``> Hmm, I thought v6-alpha indicated that the code was written using unstable P6 syntax.

[01:29] <japhb> Notionally, you're correct.

[01:30] <Aankhen``> Yay.

[01:30] <thoughtpolice> ah. so basically the difference is if you would rather use pugs as your implementation (v6) as opposed to just compiling to p5 (v6-alpha)

[01:30] <japhb> But it has to be that way to make p5 not just error out.  Happy accident.

[01:30] <Aankhen``> Heh.

[01:30] <japhb> thoughtpolice: I suppose you could think of it that way, sure.

[01:30] <thoughtpolice> japhb: thanks.

[01:31] <thoughtpolice> japhb++

[01:31] <japhb> But I'm sure TimToady or fglock would give you some deeper concept.  :-)

[01:31] <thoughtpolice> delicious.

[01:32] <thoughtpolice> japhb: thanks for the distinction; the difference is clear.

[01:37] <thoughtpolice> japhb: i'm mainly asking due to the fact I wish to add my little prompt app to examples/, but I simply did not know which would be more appropriate; since I'm more interested in using pugs, I'll just go the 'use v6;' route I suppose.

[01:40] <svnbot6> r16452 | thoughtpolice++ | added examples/promptr.p6

[01:40] <thoughtpolice> that would be the one.

[01:41] <Jmax> do i need ghc-extralibs?

[01:46] <svnbot6> r16453 | Aankhen++ | util/smartlinks.pl:

[01:46] <svnbot6> r16453 | Aankhen++ | * removed spurious `display: block` CSS.

[01:46] <svnbot6> r16453 | Aankhen++ | * made JS logic a bit more intelligent about replacing the trailing :.

[01:46] <svnbot6> r16453 | Aankhen++ | * tweaked the display of line numbers and test results in the snippet labels.

[01:47] <Aankhen``> I think my commit messages are longer than the lines of code I write.

[01:48] *** [particle1 joined
[02:12] *** justatheory joined
[02:20] *** charsba__ joined
[02:31] *** [particle] joined
[02:43] *** perlDreamer joined
[02:46] *** kanru joined
[02:49] *** mako132_ joined
[02:52] *** kanru joined
[02:53] <perlDreamer> Has anyone noticed changes in the scoping of $_ since the last big merge?

[02:54] <perlDreamer> There are some closure_trait tests failing because $_ looks like it's undef all of a sudden

[03:03] <dduncan> there were some $_ scope things checked in according to comments

[03:03] *** jvoorhis1 joined
[03:03] <dduncan> for eval blocks for one thing

[03:09] <perlDreamer> sounds right

[03:09] <perlDreamer> the test wraps an eval

[03:09] <perlDreamer> it's the very first test in t/closure_traits/start.t

[03:16] *** araujo joined
[03:16] *** jql joined
[03:16] *** nelhage joined
[03:17] *** araujo joined
[03:17] *** buubot joined
[03:18] *** jql joined
[03:18] *** buu joined
[03:18] *** QtPlatypus joined
[03:18] *** kolibrie joined
[03:18] *** TreyHarris joined
[03:18] *** takesako___ joined
[03:18] *** SamB joined
[03:18] *** arguile joined
[03:18] *** allbery_b joined
[03:20] *** pasteling joined
[03:20] *** shachaf joined
[03:20] *** LCamel joined
[03:21] *** Lunchy joined
[03:21] *** Maddingue joined
[03:21] *** nelhage joined
[03:22] *** nothingmuch joined
[03:22] *** takanori joined
[03:22] *** gaal joined
[03:22] *** cernd joined
[03:22] *** rgs joined
[03:22] *** obvio171 joined
[03:23] *** haelix joined
[03:23] *** cls_bsd joined
[03:23] *** orafu joined
[03:23] *** Gothmog_ joined
[03:24] *** Caelum joined
[03:25] *** mtve joined
[03:26] *** Tene joined
[03:28] *** TreyHarris joined
[03:36] *** Yaakov joined
[03:39] *** REPLeffect joined
[03:43] *** zgh joined
[03:43] <svnbot6> r16454 | Aankhen++ | t/syntax/unicode.t:

[03:43] <svnbot6> r16454 | Aankhen++ | * added a Hindi test

[03:43] *** drupek12 joined
[03:52] <svnbot6> r16455 | Aankhen++ | util/smartlinks.pl:

[03:52] <svnbot6> r16455 | Aankhen++ | * removed `name` attribute on anchors in favour of `id` attribute.

[03:57] *** offby1 joined
[03:59] *** zperl joined
[04:01] *** weinigLap joined
[04:17] *** bonesss joined
[04:22] *** justatheory_ joined
[04:27] *** [particle] joined
[04:27] *** bonesss joined
[05:08] *** BooK_ joined
[05:58] <meppl> guten morgen

[05:59] <Aankhen``> Namaste meppl. :-)

[05:59] <meppl> :D

[05:59] <meppl> good morning aankhen

[05:59] <Aankhen``> Kaise hai aap? ^_^

[05:59] <Aankhen``> (Translation: how are you?)

[06:00] <meppl> im fine

[06:00] <meppl> i cant speak indian

[06:01] <Aankhen``> It's Hindi, actually.

[06:01] <meppl> k

[06:01] <Aankhen``> India has about 20 official languages, and hundreds more spoken all over, so calling a language "the Indian language" would be a tad inaccurate. ;-)

[06:03] <meppl> i see

[06:04] *** perlbot joined
[06:15] <spinclad> TimToady: S12:1650 could perhaps explain 'basal' as 'non-final' or such; i tripped over its lack of definition for a while today.

[06:25] *** Averell joined
[06:33] *** devogon joined
[06:43] *** tokuhirom_ is now known as toku_away

[07:00] *** zperl joined
[07:05] *** cybercobra joined
[07:06] <cybercobra> could anyone give an example of how UNDO would be used?

[07:22] <Aankhen``> Hmm.  This isn't the best example, but: try { $successful_transactions++; ...some code that might blow up...; UNDO { $successful_transactions--; } }

[07:22] <Aankhen``> Er, forget the `try`.

[07:24] <Aankhen``> Meh, I'm not good at useful examples  when I'm sleepy.

[07:25] <Aankhen``> s/  / /

[07:40] *** iblechbot joined
[07:54] *** demq joined
[07:58] *** elmex joined
[08:05] *** jisom joined
[08:07] *** dduncan left
[08:09] <Aankhen``> From S04: "Note though that the first expression within parens or brackets is parsed as a statement".  So does that also work for, e.g. my @foo = 'bar', ($_ for <a b c d e>), 'baz'

[08:09] <Aankhen``> ?

[08:10] <Aankhen``> (Yes, I realize what a contrived example that is.)

[08:33] <svnbot6> r16456 | Aankhen++ | util/smartlinks.pl (JS):

[08:33] <svnbot6> r16456 | Aankhen++ | * combined a couple conditionals.

[08:33] <svnbot6> r16456 | Aankhen++ | * moved the location.hash bit outside the loop.

[08:33] <svnbot6> r16456 | Aankhen++ | * fixed the line anchors!

[08:36] *** larsen_ joined
[08:55] <Aankhen``> Ah, reading about `do` in rvalues answered my question.

[08:56] *** araujo joined
[08:59] <Aankhen``> ?eval my @uniq = gather for <a a b a c d d> { state $previous = take $_; next if $_ === $previous; $previous = take $_; }

[08:59] <Aankhen``> Aiye.

[08:59] <Aankhen``> Where's evalbot?

[08:59] <Tene> dead, apparently

[09:00] <Aankhen``> O noes, it's on another server.

[09:00] <Aankhen``> Or something.

[09:00] <Aankhen``> * evalbot_r16443 (i=audreyt@feather.perl6.nl) Quit (anthony.freenode.net irc.freenode.net)

[09:01] <Aankhen``> BTW, need someone to help me figure this out... in the snippet I was eval'ing above, it basically discards consecutive duplicates, right?

[09:01] <Aankhen``> So if the input were <a a b a c d d>, I'd get <a b a c d>?

[09:02] <Aankhen``> Er, actually.

[09:02] <Aankhen``> Now I'm confused.

[09:02] <Aankhen``> I just don't understand that code.

[09:02] <Aankhen``> Too many `take $_`s in there.

[09:04] *** rindolf joined
[09:08] *** penk joined
[09:16] *** kanru joined
[09:44] <buu> Take three $_ and call me in the morning.

[09:45] *** VanilleBert joined
[09:48] *** prism joined
[09:58] <zperl> hi

[09:58] <zperl> im trying to build pugs from ubuntu distro... cant i do it using ghc 6.6?

[10:00] *** CindyLinz joined
[10:01] *** audreyt joined
[10:01] *** DarkWolf84 joined
[10:08] <avar> zperl: afaik yes

[10:09] <avar> well, I'm building it with 6p6 on debian so yes

[10:13] *** trunix joined
[10:15] *** BooK joined
[10:15] *** elmex joined
[10:19] *** chris2 joined
[11:15] *** bernhard joined
[11:20] *** buetow joined
[11:49] *** VanilleBert left
[12:02] *** pbuetow joined
[12:15] *** lisppaste3 joined
[12:25] *** Jedai joined
[12:31] *** Jedai666 joined
[12:32] *** Jedai666 is now known as Jedai

[12:42] *** Limbic_Region joined
[12:48] *** pmurias joined
[12:48] <pmurias> hi

[12:49] <pmurias> how difficult would it be to have a progress bar during the pugs build process?

[12:49] <pmurias> (thought about it while watching ghc being built from source)

[12:51] * Limbic_Region doesn't see the need

[12:51] <Limbic_Region> the N out of 112 works for me

[12:52] <pmurias> explain the phrase please

[12:54] <Limbic_Region> pmurias, when I build pugs it tells me that it is on 1 of 112, then 2 of 112, then 3 of 112, etc

[12:55] <Limbic_Region> that is sufficient for me to know how much progress it has made

[12:57] <pmurias> sorry for a stupid suggestion (I last built pugs a long time ago)

[12:58] *** buetow joined
[12:58] * pmurias is waiting for ghc6.6 to compile to check if having 10x more ram will speed it up

[13:01] <Limbic_Region> why 6.6 then?

[13:02] <Limbic_Region> I would think 6.7 would be the way to go

[13:06] *** pbuetow joined
[13:08] <pmurias> i used the newest one in portage

[13:10] <pmurias> the newest on haskell.org/ghc is 6.6.1

[13:10] <pmurias> bike trip&

[13:14] *** xern joined
[13:19] *** prism joined
[13:30] <pasteling> "Limbic_Region" at 68.48.99.41 pasted "Build failure and subsequent smoke test issues on Win32/MinGW as of r16456" (59 lines, 4.5K) at http://sial.org/pbot/24983

[13:31] <Limbic_Region> @tell audreyt Build failure and subsequent smoke test issues on Win32/MinGW as of r16456 - http://sial.org/pbot/24983

[13:31] <lambdabot> Consider it noted.

[13:42] <Jmax> Makefile.PL in pugs svn has a pod error

[13:59] *** ggoebel joined
[14:24] <moritz> how do you validate pod?

[14:24] <Jmax> Test::Pod iirc

[14:25] <Jmax> but that's not how I know :)

[14:25] <moritz> cpan++

[14:25] <moritz> so how do you know?

[14:26] <wolverian> podchecker if you don't need to automate it

[14:26] <Jmax> perldoc warns one

[14:26] <Jmax> *** ERROR: Spurious text after =pod at line 3 in file Makefile.PL

[14:26] <moritz> debian++ # for providing libtest-pod-perl ;-)

[14:26] <Jmax> neat, podchecker++

[15:02] *** bonesss joined
[15:05] *** maskd joined
[15:52] *** araujo joined
[15:53] *** franck___ joined
[15:59] <pmurias> i get

[15:59] <pmurias> Can't call method "load_all_extensions" on an undefined value at inc/Module/Install.pm line 128.

[15:59] <pmurias> BEGIN failed--compilation aborted at Makefile.PL line 49.

[15:59] <pmurias> when i run Makefile.PL

[16:06] <TimToady> whoops, forgot to spinclad++ on s:g/basal/super/

[16:10] <rindolf> Hi all.

[16:10] <rindolf> Hi moritz, TimToady 

[16:10] <moritz> hi rindolf ;)

[16:11] <rindolf> moritz: what's up?

[16:11] <rindolf> I submitted three grant applications for TPF.

[16:11] <moritz> rindolf: cool ;)

[16:11] <moritz> rindolf: for what projects?

[16:11] *** justatheory joined
[16:11] <rindolf> moritz: here they are: http://www.shlomifish.org/Files/files/text/tpf-grants/

[16:11] <moritz> rindolf: I'm just coding glue scripts atm, nothing special ;)

[16:12] <lambdabot> Title: Index of /Files/files/text/tpf-grants

[16:12] <rindolf> moritz: OK.

[16:12] <rindolf> NEXT:: is causing me trouble.

[16:12] *** justatheory joined
[16:13] <moritz> rindolf: I noticed that File::Find::Rule is sometimes horribly slow - can you confirm that?

[16:15] *** Ixodes joined
[16:17] <rindolf> moritz: no, I never benchmarked it.

[16:18] <moritz> well, I didn't profile it, so I don't really know if it really is slow, or if the calling application made some mistakes

[16:20] <Jmax> uploading openbsd smoke :)

[16:21] <moritz> Jmax++

[16:21] <Jmax> any other requests? does haskell run on SCO?

[16:21] *** xinming joined
[16:22] *** Yappo joined
[16:24] <moritz> SCO is evil ;)

[16:26] *** Yappo joined
[16:26] <Jmax> evil, yes

[16:26] <Jmax> but that's what makes it fun

[16:26] <Jmax> much like VMS

[16:26] <moritz> ;)

[16:27] <moritz> did you do some parrot smokeing?

[16:27] <Jmax> i'm going to do that now

[16:28] <Jmax> i 'make fulltest', right?

[16:28] <Jmax> or just make smoke?

[16:28] *** [1]jaffa joined
[16:28] <moritz> make smoke does the trick

[16:28] <[1]jaffa> hi

[16:28] <[1]jaffa> how is perl6 going?

[16:28] <moritz> hi [1]jaffa 

[16:29] <moritz> well, it's developing ;)

[16:29] <[1]jaffa> who is it made for?

[16:29] <moritz> for every programmer how is lucky enough to be allowed to use it ;)

[16:31] <[1]jaffa> why do you say that?

[16:32] <moritz> well, there will always be companies that find perl "scary"

[16:32] <moritz> because it gives you enough rope to hang yourself if you want to

[16:32] <moritz> and a few kilometers more ;)

[16:32] <[1]jaffa> well, that is not good, is not it?

[16:32] *** VanilleBert joined
[16:33] <moritz> that was always perl's philosphy - to allow everything you could possibly want

[16:33] <[1]jaffa> it does not sound bad...

[16:34] <[1]jaffa> but it is looking like an abandoneware

[16:34] <[1]jaffa> why is it going to be finished?

[16:34] <moritz> did you mean "when"?

[16:35] <Tene> moritz: how many commits have we had in the past couple of days? ;)

[16:35] <[1]jaffa> when. when.

[16:35] <[1]jaffa> that is right

[16:35] <moritz> Tene: perhaps 10 I'd guess...

[16:35] <moritz> Tene: a few irclog patches, a few testcases on operator precedence, and a few fixes in ext/

[16:36] <moritz> [1]jaffa: christmas, but we don't know which christmas ;)

[16:36] <Tene> [1]jaffa: http://cia.vc/stats/project/perl6

[16:36] <lambdabot> Title: perl6 - CIA.vc

[16:36] <moritz> Tene: whey are you asking?

[16:36] <Tene> moritz: he was suggesting it was abandoned.

[16:37] <[1]jaffa> ok, I see something is happening.

[16:38] <moritz> [1]jaffa: pugs and parrot are both moving

[16:38] <moritz> [1]jaffa: pugs in a top down fashion, parrot bottom up

[16:38] <moritz> and hopefully they'll meet in the middle ;)

[16:39] <[1]jaffa> I though they already met

[16:39] <[1]jaffa> just more connections are needed

[16:40] <moritz> pugs has a parrot backend, but atm that's bit rotten

[16:41] <[1]jaffa> I see

[16:41] <pmurias> audreyt has done work on her private branches and was begining to merged them recently

[16:41] <[1]jaffa> ok

[16:42] <[1]jaffa> I am going.

[16:42] <[1]jaffa> bye all

[16:42] <moritz> bye

[16:43] <Tene> Odd.

[16:43] <moritz> maybe we should write and FAQ on perl6 status?

[16:43] <Tene> Perhaps.

[16:46] *** prism joined
[16:52] <moritz> why do have the feeling that I've seen such a FAQ somewhere?

[16:57] <Jmax> parrot r18582 has been smoked on openbsd

[16:59] <TimToady> yay

[16:59] <Jmax> http://smoke.parrotcode.org/smoke/parrot-smoke-0.4.12-devel-r18582-unknown--i386-openbsd-cc-default--1179593746-955--7175-7155-20-253-609-0--2d443430202d2d67632d6465627567--727e9a5660ab8ec0311177b365a1dd9e.html not a bad success rate either

[16:59] <lambdabot> Title: TAP Matrix - Sat May 19 16:55:04 2007 GMT, http://tinyurl.com/yoh8dt

[16:59] *** jisom joined
[17:01] <moritz> Jmax: yes, the parrot++ folk are very serious about quality ;)

[17:02] <Jmax> i'm surprised that the smoke util doesn't acquire more hardware information

[17:03] <Jmax> i imagine things like CPU arch/speed/build and ram/swap can put the times in proper perspective

[17:03] *** xinming_ joined
[17:04] <moritz> right

[17:04] <moritz> you could propose that on #parrot on irc.perl.org or [email@hidden.address]
[17:04] *** semifor joined
[17:04] <moritz> here your parrot ideas are likely to be forgotton :(

[17:05] <TimToady> unless [particle]++ sees them...

[17:05] *** prism joined
[17:05] <moritz> of course ;)

[17:07] <TimToady> but we mustn't observe [particle] or we'll break the quantum entanglement between pugs and parrot

[17:20] *** Psyche^ joined
[17:24] <moritz> how feature complete is STD.pm?

[17:29] *** amnesiac joined
[17:32] *** weinigLap joined
[17:33] *** tzoa joined
[17:34] <TimToady> it's feature complete except for whatever I've forgotten.  :)

[17:34] <TimToady> but it's only a parser

[17:34] <moritz> ok

[17:34] *** buetow__ joined
[17:35] <TimToady> I also need to go back and retrofit some of the decisions there back into the synopses, which are a little out-of-date on the grammatical categories

[17:36] <TimToady> the todo at the beginning still lists four things

[17:36] <moritz> "only a parser" - I just remeber a quote by damian about parsing perl... ;)

[17:37] *** Psyche^ is now known as Patterner

[17:37] <moritz> any ideas for a status faq? I currently have "is perl 6 dead?", "what about perl 6 implementations?", "when will it be released?" and "why pugs? why haskell?"

[17:38] <TimToady> status faqs tend to go out of date rather rapidly, which says something about the status :)

[17:39] <moritz> TimToady: you're right about that, but I keep answering the same questions here on #perl6 over and over again

[17:41] <TimToady> but how people respond to the answers often tells us whether they would be good contributors, so it might be worth it

[17:41] <TimToady> especially if we can share the load

[17:42] <obra>  Has anyone played with http://www.cs.rit.edu/~bja8464/lambdavm/ ?

[17:42] <lambdabot> Title: LambdaVM - The Haskell to Java Translator

[17:42] <TimToady> sending people to a faq immediately sort of says "go away and don't bother me"

[17:42] *** justatheory joined
[17:43] <moritz> TimToady: ok, you convinced me

[17:43] <moritz> *not commiting status-faq.html*

[17:44] <TimToady> maybe we can tell people they can get a status update for free if they sign up for a commit bit :)

[17:45] <moritz> ;-)

[17:45] <ingy> good morning

[17:46] <moritz> good evening ingy ;)

[17:47] *** buetow joined
[17:48] <ingy> :)

[17:48] <TimToady> obra: looks interesting as an intermediate solution, though we can perhaps do better with direct P6-to-Java.  But it at least shows it's possible, I think.

[17:48] <TimToady> I wonder how much emulation it has to do?

[17:49] <amnesiac> to Java bytecode? or to Java assembly?

[17:50] <TimToady> it says bytecode

[17:50] <moritz> aren't they isomorphic?

[17:51] <amnesiac> not really, you can look at some Java assembly using javap

[17:51] <amnesiac> somewhat more readable

[17:53] *** rashakil joined
[17:53] <obra> *nod* It was more "eenteresting" than "oh my god. we need to use this Now"

[17:54] <TimToady> "how to make a sow's ear out of a silk purse"

[17:54] <obra> *laugh*

[17:55] *** buetow joined
[17:59] *** pbuetow joined
[18:09] *** zperl joined
[18:14] *** weinigLap joined
[18:14] *** renormalist joined
[18:24] <rindolf> Can anyone tell me when overload q{""} => \&_stringify() allows it to return undef?

[18:25] <rindolf> Because from a naive script I'm trying it keeps translating undefs to "".

[18:26] <Jmax> is this p5?

[18:29] <rindolf> Jmax: yes, it is.

[18:29] <Jmax> what package did you "use overload" in?

[18:29] <rindolf> Jmax: let me nopaste my code.

[18:30] <pasteling> "rindolf" at 88.152.120.36 pasted "Trying that stringification will return undef." (64 lines, 741B) at http://sial.org/pbot/24990

[18:31] <Jmax> you're not acutally using package B; are you?

[18:32] <Jmax> if you are, try changing it to C :)

[18:35] <rindolf> Jmax: I am - look below.

[18:35] <rindolf> my $b_instance = B->new("Hello");

[18:36] <Jmax> I don't recall exactly, but there was an issue on perlmonks that I had read a while back regarding a basic example of objects where the user used the B package as an example.  

[18:37] <Jmax> the issue turned out to be that there already exists a package B, and that something he was doing was interfering with it.  just a thought

[18:37] <rindolf> Jmax: oh OK.

[18:37] <Jmax> see perldoc B

[18:37] <Jmax> (it doesn't mention anything about the topic, but it exists)

[18:38] <rindolf> Jmax: OK.

[18:39] <rindolf> Jmax: http://sial.org/pbot/24991

[18:39] <lambdabot> Title: Paste #24991 from "rindolf" at 88.152.120.36

[18:42] *** araujo joined
[18:47] <Jmax> seems to work fine here, print Child->new->text, "\n"; print Child->new("Hello")->text, "\n"; # undef, "Hello"

[18:49] <rindolf> Jmax: yes, but I'm interested in the stringification that happens at NEXT::AUTOLOAD.

[18:49] <rindolf> Jmax: my problem is that it doesn't fail.

[18:51] <Jmax> set a fallback?

[18:51] <Jmax> maybe I misunderstand, heh

[18:53] <rindolf> Jmax: in line 53 I'm calling NEXT::_initialize before the {text} is inited.

[18:53] <rindolf> Jmax: at this point NEXT:: stringifies $self, and I'd like the "$self" to return undef.

[18:54] <rindolf> Jmax: however, it returns the empty string (q{""})

[18:56] <Jmax> how do you know that it stringifies $self ?

[18:57] <rindolf> Jmax: I studied the code.

[18:58] <Jmax> NEXT.pm ?

[18:58] <rindolf> Jmax: $NEXT::NEXT{$self,$wanted_method}

[18:58] <rindolf> Jmax: yes, of NEXT.pm

[18:59] <Jmax> oh, I see

[18:59] *** Aankhen`` joined
[18:59] <Jmax> but it doesn't it behave as desired?

[19:04] *** bonesss joined
[19:18] *** nothingmuch joined
[19:30] *** dduncan joined
[19:38] *** isaacd__ joined
[19:54] *** devogon joined
[20:04] *** justatheory joined
[20:14] <dduncan> @tell TimToady thanks for the S02 update to clarify type/role specific sigil binding

[20:14] <lambdabot> Consider it noted.

[20:14] <dduncan> that is such a handy utility

[20:17] <TimToady> though of course I always backlog...

[20:17] <lambdabot> TimToady: You have 1 new message. '/msg lambdabot @messages' to read it.

[20:17] <TimToady> @messages

[20:17] <lambdabot> dduncan said 3m 26s ago: thanks for the S02 update to clarify type/role specific sigil binding

[20:18] <dduncan> sure, and sometimes I have counted on backlogging ... but I also think it unreasonable to assume people will as there can be a lot of stuff to wade through

[20:19] <TimToady> maybe we could have a micro tell that just tells you to backlog with a link to the irc logger

[20:19] <dduncan> I only occasionally backlog myself

[20:19] <TimToady> I figure if someone stays logged in they intend to backlog, probably

[20:19] <dduncan> so that, if your name is mentioned, you are informed?

[20:19] *** pjscott joined
[20:19] <dduncan> well I do to an extent ...

[20:20] <dduncan> I sleep my computer every night, and don't typically backlog stuff during that time ... however, I open IRC when I wake the computer and keep it up while I'm up, and tend to backlog what happened, but then it doesn't get too old

[20:20] <dduncan> sleep=disconnect

[20:21] <dduncan> when I want to check the other period, there is the web logs

[20:21] <TimToady> when I type dd<tab> and it doesn't autocomplete, I figure you're not on and @tell you

[20:22] <dduncan> now I have a question concerning the S02 addition ...

[20:23] <dduncan> you said that, eg, @ is for anything that does the Array role, then including some immutable types in the lsit

[20:23] <TimToady> I'm thinking the Array role doesn't provide rw, just the Array class

[20:24] <dduncan> I see ... that could be confusing

[20:24] <TimToady> but it might be some other name

[20:24] <dduncan> or could "but" or some such be used for an exclusion, to say you just partially compose a role

[20:25] <dduncan> eg, does Array but ro

[20:25] <TimToady> seems not very monotonic to allow removals

[20:25] <dduncan> what is better, when if someone tries to mutate a Seq, that this be caught at compile time as no-such-method or a runtime exception

[20:26] <dduncan> such as when someone mutates a parameter which is a mutable type but marked readonly

[20:26] <dduncan> is a runtime exception, at least now

[20:26] <moritz> if it's possible error detection at compile time is always preferable

[20:27] <TimToady> well, it's potentially a compile-time error if deducable

[20:27] <TimToady> "error: this will certainly fail at run time"  :)

[20:27] <dduncan> yes ... so in the general case it is runtime, but also compile time in limited cases where we can determine

[20:28] <moritz> dduncan: I think that applies to all but syntax errors (which are always at compile time)

[20:28] <dduncan> yes

[20:28] <TimToady> but yes, this comes back to the same question of whether mutability is really a role

[20:29] <TimToady> in the abstract, a mutable object is always just a container for the current immutable value

[20:29] <dduncan> as roles are currently defined, to consist of a set of methods, I would say mutability is not a role

[20:29] <dduncan> I agree

[20:30] <TimToady> however, if you implement it that way, it can be very slow

[20:31] <TimToady> well, I need to wander off, but I'll think about it some

[20:31] <moritz> why does this smell like haskell?

[20:32] <moritz> ;-)

[20:32] <TimToady> perhaps because I was thinking of haskell when I said it?

[20:32] <dduncan> conceptually values and containers are 2 completely different things

[20:32] <dduncan> fyi, my database language tends to emphasize that

[20:32] <TimToady> I noticed... :)

[20:33] *** justatheory joined
[20:33] <dduncan> while a language can provide the appearance of mutation, it is just a shorthand for the concept of deriving a new value from another one with a small difference ... and could be implemented that way behind the scenes ... but officially it is a new value

[20:34] <TimToady> well, that is the FP view.  the OO view is that a container is a stateful object, not just a reference

[20:35] <TimToady> but the two views are duals of each other

[20:35] <TimToady> anyway, vamoosification &

[20:35] <dduncan> in the terminology of my language, what perl 6 calls a view, I call a "possible representation"

[20:36] <dduncan> s/view/role/

[20:36] <dduncan> mind you, possreps only apply to "scalar" types ... which are analagous to objects with just private attributes

[20:37] <dduncan> collection types that are transparent do not have possreps, just a single representation

[20:38] <dduncan> this is all user-pov of course ... my language doesn't dictate implementation, only what the users see

[20:38] <dduncan> as afaik most/all languages do

[20:38] * dduncan back to work

[20:45] *** marmic joined
[20:46] *** freezone joined
[20:47] <svnbot6> r16457 | unobe++ | fixed Makefile.PL pod (JMax++)

[20:47] <Jmax> :)

[20:51] *** iblechbot joined
[20:54] *** pjscott left
[21:05] <diakopter> Matthew

[21:05] <diakopter> GTalk

[21:05] <diakopter> 12:09

[21:05] <diakopter> okay

[21:05] <diakopter> 12:10

[21:05] <diakopter> can you summarize your view of a System Analysis (as you said would be good to do)

[21:05] <diakopter> AudreyT

[21:05] <diakopter> GTalk

[21:05] <diakopter> 12:10

[21:05] <diakopter> ok.

[21:05] <diakopter> 12:12

[21:05] <diakopter> it's really very simple

[21:05] <diakopter> 12:12

[21:06] <diakopter> I'd like to quantify the problem definition more than the casual descriptions you gave me about the old system

[21:06] <diakopter> 12:12

[21:06] <diakopter> i.e. exactly _how_ it makes your life miserable

[21:06] <diakopter> 12:13

[21:06] <diakopter> in measurable terms

[21:06] <diakopter> 12:13

[21:06] <diakopter> then after that, I'd like to talk about requirements -- external ones

[21:06] <diakopter> 12:13

[21:06] <diakopter> that does not involve any technical details such as qpsmtpd or danga

[21:06] <diakopter> Matthew

[21:06] <diakopter> GTalk

[21:06] <diakopter> 12:13

[21:06] <diakopter> yep

[21:06] <diakopter> AudreyT

[21:06] <diakopter> GTalk

[21:06] <diakopter> 12:14

[21:06] <diakopter> but rather things that must happen, and how you expect to solve the things in the problem definition with those things-if-they-happen

[21:06] <diakopter> 12:14

[21:06] <moritz> diakopter: could you please nopaste that?

[21:06] <diakopter> NOOO

[21:06] <diakopter> sorry :(

[21:06] * diakopter begs forgiveness from all

[21:06] <diakopter> moritz: it was an accident

[21:07] <diakopter> didn't mean to paste at all.

[21:07] <moritz> diakopter: ok

[21:07] * diakopter requests that it be purged from your log, also :)

[21:08] <moritz> diakopter: ok, I'll do it

[21:08] <diakopter> moritz: thanks.  how embarassing for me. thank you again.

[21:09] <moritz> mysql> delete from irclog where id >= 20702 and id <= 20732;

[21:09] <moritz> Query OK, 31 rows affected (0.00 sec)

[21:27] *** Psyche^ joined
[21:35] *** Psyche^ is now known as Patterner

[21:43] * trippeh got paste-protection in his irc-client

[21:43] <trippeh> :)

[21:44] <moritz> irssi++ ;)

[21:53] *** buetow joined
[22:05] *** renormalist joined
[22:16] <renormalist> where do I fix typos in the synopses? In pugs/docs/Perl6/Spec/*.pod? Are these the files that are used for http://perlcabal.org/syn/?

[22:16] <lambdabot> Title: Official Perl 6 Documentation

[22:17] <moritz> renormalist: I'm not quite sure... they live in a different repository, but are somehow synced with the ones in pugs/docs/Perl6/Spec...

[22:18] <moritz> renormalist: easiest way is to /msg, @tell or mail TimToady 

[22:19] <renormalist> moritz: hm, it's just a missing newline that breaks an =item list. I don't want to spam someone with minor stuff. I fix it in pugs and wait what happens. :-)

[22:20] <moritz> ok ;)

[22:20] <renormalist> ah, they aren't in pugs, just sync'd from somewhere :-) now I know ...

[22:22] <renormalist> @tell TimToady S11/Modules misses a newline at 249 which breaks the following =over/=item list

[22:22] <lambdabot> Consider it noted.

[22:22] <renormalist> :-)

[22:38] <svnbot6> r16458 | Darren_Duncan++ | ext/QDRDBMS/ : updated Operators.pm to normalize sum|product as nary functions ; updated AST.pm to add Quasi(Set|Seq|Bag) node types

[22:41] <dduncan> renormalist, it is a limited group of people that can update the synopsis, so you have to ask them to do it, in general ... usually Larry

[22:41] <dduncan> also Audrey

[22:45] <renormalist> dduncan: k, thx

[22:47] *** jisom joined
[22:50] *** Limbic_Region joined
[22:55] <diakopter> moritz: I *am* using irssi; putty/right-click is to blame.

[22:56] <moritz> putty-- ;-)

[22:57] <offby1> *gasp*

[22:57] <offby1> I _love_ PuTTY

[22:57] <offby1> what did it do wrong?

[22:57] <Jmax> i've had that happen so many times

[22:57] <Jmax> i just set putty to a different mode (right click == menu, not paste)

[22:57] <offby1> accidental paste?  _All_ terminal programs that I know of allow that

[22:57] <meppl> good night

[22:58] <Jmax> Settings -> Window -> Selection

[22:58] <Jmax> you can still accidentally mispaste, it's just one more step to do so :)

[22:59] <moritz> offby1: usually when you paste more than $n lines, irssi asks you to confirm it...

[23:00] <moritz> offby1: so if diakopter says that putty is to blame, I assume that it sends the past line by line, so that the warning didn't work

[23:00] <diakopter> Jmax: thanks; good point

[23:03] <offby1> moritz: hmm.

[23:05] <moritz> offby1: perhaps that's a premature conclusion ;)

[23:05] <Jmax> you're welcome

[23:05] <offby1> you think "hmm" is a premature conclusion?  I assure you, I pondered long and hard before coming up with that.

[23:05] *** theorb joined
[23:05] <moritz> offby1: *g*, no my conclusion ;)

[23:05] <offby1> *swat*    yeah, I knew what ya meant.

[23:07] <moritz> and I started to think that perl hackers where witless ;) *SCNR*

[23:07] <Limbic_Region> salutations all

[23:07] <offby1> .oO("SCNR"?)

[23:07] <offby1> Societé Chemins National de Railway?

[23:08] <moritz> hi Limbic_Region ;)

[23:08] <moritz> @google SCNR

[23:08] <lambdabot> http://de.wikipedia.org/wiki/Liste_der_Abk%C3%BCrzungen_(Netzjargon)

[23:08] <lambdabot> Title: Liste der Abkürzungen (Netzjargon) - Wikipedia

[23:08] <offby1> aaah

[23:08] <moritz> does lambdabot ask google germany?

[23:12] <renormalist> Google knows who asks because they read this irc log real time and know what you want before you do :-)

[23:13] <moritz> renormalist: that would be funny if it wasn't so close to the truth :(

[23:13] <renormalist> only way to escape is to tell lambdabot commands in Perl6 because Google is still Perl5

[23:19] *** justatheory joined
[23:19] *** nicodaemos joined
[23:24] <renormalist> moritz: collecting every public information isn't bad by itself as long as it's really public. It's just unimaginable for us poor humans that some thing really sees all the information as a whole. We are just confused because we thought "public" would mean just the daily reallive "a bit public" for the neighborhood not "that really public" as google makes it. Some day google will just explode once they forget to exclude searching in itself

[23:29] *** ggoebel joined
[23:29] *** [particle1 joined
[23:54] *** REPLeffect joined
