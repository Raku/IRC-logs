[00:05] <dduncan> re the latest synopsis update, that option to have an extra short label for a longer named parameter looks useful

[00:05] <dduncan> as I've found that the best internal name is often too long to be used repeatedly as a named argument

[00:06] <dduncan> and hence I've been using shorter names throughout

[00:06] <dduncan> on the other hand, trying to figure out a name that is both short and descriptive allows for some more thinking about what works well

[00:16] *** YetAnotherEric left
[00:16] *** buubot joined
[00:18] *** buubot joined
[00:18] <TimToady> dduncan: it seems like it was the logical way to get at :g($global) adverbs as well, and I decided it shouldn't have too much impact if the long names are just the fallback.

[00:18] <TimToady> and I wanted it for STD

[00:19] <dduncan> ok

[00:22] *** weinig|bbl is now known as weinig

[00:23] *** Schwern joined
[00:24] *** CardinalNumber joined
[00:32] *** macli left
[00:43] <svnbot6> r15329 | lwall++ | modifiers for regex, trans and p5regex

[00:43] <svnbot6> r15329 | lwall++ | long modifiers in :g($global) named parameter form

[00:44] *** CardinalNumber is now known as ProperNoun

[00:44] <Limbic_Region> hey TimToady - is hash/array slices in scalar context documented anywhere (perl5 and/or perl6)?

[00:45] <TimToady> don't think it's documented in P5

[00:45] <TimToady> if it is, probably documented to take the last value

[00:45] * Limbic_Region couldn't find it in perldata

[00:46] <TimToady> in P6 would always turn into [...]

[00:46] <Limbic_Region> thanks

[00:46] <TimToady> there's nothing in P6 that automatically returns the last value of a list except [-1]

[00:47] <TimToady> well, any maybe pop

[00:47] <Limbic_Region> reverse shift

[00:47] <TimToady> but none of those are "automatic"

[00:48] <Limbic_Region> yeah

[00:48] <Limbic_Region> I was just thinking that you had to be wrong though

[00:48] <Limbic_Region> since that would imply there is only one way to do it

[00:48] <Limbic_Region> :P

[00:50] <TimToady> I'm trying to think what's there that would only give you one way.  .WHICH and .WHAT maybe

[00:50] <TimToady> though you could always write macros...

[00:50] <TimToady> actually, those come in functional forms too, so I guess they don't work

[00:50] <tene> could you manually dig them out of a symbol table or some such?

[00:51] <Limbic_Region> speaking of which, what synopses speak to introspection?

[00:51] <Limbic_Region> s/what/which/

[00:51] <TimToady> mostly S12, some in S02

[00:52] <TimToady> a lot of it is intentionally punted off to .HOWland, which is where MO and Moose come in.

[00:53] <Limbic_Region> audreyt has indicated that 6.28 release is RSN so I will read S12 in detail RSN too

[00:53] <TimToady> S12 won't talk about MO

[00:53] * Limbic_Region has mostly held off

[00:53] <TimToady> well, not much...

[00:54] <TimToady> presumably .HOW.methods is returning something from MO

[00:54] <Limbic_Region> who was the prime mover in the meta object work - stvn?

[00:54] <TimToady> yes

[00:55] <tene> "prime mover"

[00:55] <TimToady> with a lot of help from audreyt and, putter was it?

[00:55] * tene things of Thomas Aquinas.

[00:55] <Limbic_Region> I think so

[00:55] <tene> s/thing/think/

[00:56] *** nipotaway is now known as nipotan

[00:56] <TimToady> and of course nothingmuch is at one level the prime mover of MO

[00:56] <TimToady> sort of the Moose porter

[00:56] <Limbic_Region> so has perl 6 fully adopted the MO model?

[00:56] <Limbic_Region> and if so, shouldn't S12 cover it in greater detail

[00:57] <TimToady> no, Perl 6 is completel agnostic on the subject of metaobject models.

[00:57] <TimToady> s:5th/ /y /

[00:57] <TimToady> s:5th/ <sp> /y / rathre

[00:57] <TimToady> er

[00:58] <TimToady> "Pay no attention to the MOP behind the .HOW curtain..."

[00:59] <Limbic_Region> ok

[00:59] <Limbic_Region> well, I then don't much care about MO as the means by which pugs delivers an S12 perl 6

[00:59] <TimToady> of course, the fact that P6 uses MO for its default MOP should likely be documented somewhere eventually...

[00:59] <Limbic_Region> I just hadn't followed S12 too closely until it was something I could actually use

[01:00] <Limbic_Region> perl 5 was my first dive into OO

[01:00] <Limbic_Region> and while I speak Java relatively fluently

[01:00] <TimToady> you can use most of S12 now, it's just a handrolled MOP that's not very introspectible

[01:00] <TimToady> (in pugs)

[01:01] <Limbic_Region> I don't quite grok things that are that abstract without some practical implementation to play with

[01:01] <Limbic_Region> oh, I realize that now

[01:01] <TimToady> 6.28 should change that part

[01:01] <Limbic_Region> but not when I wanted to

[01:01] <Limbic_Region> pugs OO was changing daily when I was interested

[01:01] <TimToady> indeed, the abstraction barrier is precisely why MO is swept behind the .HOW curtain.

[01:01] *** buetow joined
[01:02] <TimToady> but I admit that the distinction is firmer in my mind than in reality.  :)

[01:02] *** bsb left
[01:03] <Limbic_Region> I think the flavor of my code will strongly be affected by perl 6 OO once I grok it completely

[01:03] <Limbic_Region> I rarely resort to OO in perl 5

[01:03] <Limbic_Region> mostly imperative with a strong functional flavor

[01:03] <TimToady> well, if not, we didn't design it right... :)

[01:03] <Limbic_Region> despite never having learned a truly functional language

[01:04] <TimToady> just think of objects as strange monads and you'll be fine.  :)

[01:05] <Limbic_Region> heh

[01:05] <Limbic_Region> I kinda need to learn ML

[01:06] *** mjk joined
[01:06] <allbery_b> haskell!

[01:06] <TimToady> mooskell!

[01:07] <TimToady> MoosekelL

[01:07] <Limbic_Region> allbery_b - Alice is based of ML and since Alice has the features I need, it wins

[01:07] <TimToady> well, what about Bob?

[01:08] <Limbic_Region> http://en.wikipedia.org/wiki/Alice_programming_language

[01:08] <Limbic_Region> Bob - http://imdb.com/title/tt0103241/

[01:08] <lambdabot> Title: What About Bob? (1991)

[01:13] <TimToady> someone should port Perl 6 to run on top of Alice someday.  :)

[01:13] <TimToady> futures in Perl 6 are generally spelled "==>"

[01:14] <tene> Does that make "<==" "pasts"?

[01:15] * TimToady is not sure whether he should cry or swear.  :)

[01:16] <tene> Both!

[01:27] <TimToady> decommuting &

[01:33] *** putter joined
[01:37] <putter> can one create a A.pm which when used, causes a B.pm's import() to run as if it had been called directly?

[01:38] <putter> if B has an actual import() sub, rather than getting it via inheritance, one could simply goto() it.

[01:38] <putter> and if !UNIVERSAL::can(B,'import'), you are done.

[01:39] <putter> but if B's import() comes via inheritance, perhaps from Exporter... (visions of special casing that pushed aside for just now), what can one do?

[01:39] <[particle]> damian has a perl 5 module for that

[01:40] <putter> !!! :)

[01:40] <devbot6> putter: Error: "!!" is not a valid command.

[01:40] <putter> do tell

[01:40] <[particle]> lemme see if i can remember, with cpan to aid me

[01:40] <[particle]> http://search.cpan.org/~dconway/

[01:40] <lambdabot> Title: Damian Conway - search.cpan.org

[01:41] <[particle]> Toolkit

[01:41] <[particle]> http://search.cpan.org/~dconway/Toolkit-0.0.2/lib/Toolkit.pm

[01:41] <lambdabot> Title: Toolkit - Keep your handy modules organized - search.cpan.org

[01:48] <putter> :)

[01:48] <putter> [particle]: my thanks

[01:49] <putter> he took the source filter approach.  i tried that, but though I encountered problems when B was itself a filter.  but perhaps i was confused.  will try again.

[01:49] <putter> tnx

[01:49] <putter> s/though/thought

[01:53] *** bsb joined
[01:53] *** Squern joined
[01:57] *** rashakil__ joined
[02:00] *** avar joined
[02:15] *** REPLeffect_ joined
[02:16] <putter> oh drat.  that commit note should have been [particle]++. ;)

[02:16] *** lpwave joined
[02:27] *** Schwern joined
[02:35] <svnbot6> r15330 | putter++ | misc/pX/Common/v6.pm - Created.  A v6.pm delegator.  This small module flexibly delegates "use v6-alpha;" requests to actual implementation modules.

[02:35] <svnbot6> r15330 | putter++ | It defaults to a Pugs::Compiler::Perl6::v6, where the current v6.pm could be moved.

[02:35] <svnbot6> r15330 | putter++ | First draft - largely untested.

[02:38] *** xdg joined
[02:41] *** Schwern joined
[02:42] *** Schwern joined
[02:43] *** [particle] joined
[03:20] *** REPLeffect_ joined
[03:23] *** Aankhen`` joined
[04:03] <putter> how about yet another variable scope?  "nested local".

[04:04] <putter> consider a regex / (...{local $a=3}...{X}... ) ... {Y} /

[04:04] <putter> currently both X and Y can see $a=3.

[04:05] <putter> the objective is a scope such that X can see $a=3, but not Y.

[04:05] <putter> a "local" scope which respects the regex group nesting.

[04:06] *** ashleyb joined
[04:07] *** weinig is now known as weinig|bbl

[04:08] <putter> is there a spare twigil in the house....? :)

[04:10] <Patterner> U+2325 is cute

[04:11] <Patterner> -= as an ascii alternative :)

[04:11] <putter> looking...

[04:13] <putter> people are going to be writing some truely bizarre code soon.... (apropos unicode)

[04:14] <putter> Patterner: :)

[04:14] <TimToady> Â¥ just came available.  :)

[04:14] <putter> lol

[04:14] <putter> zipper gone?

[04:14] <TimToady> Z

[04:14] <putter> ah

[04:14] <TimToady> even looks like "row major"

[04:15] <TimToady> gotta run, though.

[04:15] <TimToady> bbl &

[04:15] * putter considers looing for a reflected Z, resists...

[04:15] <putter> bye

[04:17] * allbery_b doesn't see one (osx makes it easy...)

[04:20] <putter> unicode isn't complex enough yet.  let's add reflection and rotation combinators.

[04:21] <Patterner> I thought Unicode already supports reflection/mirrored characters.

[04:21] <Patterner> putter: what about U+16CE/RUNIC LETTER Z? :)

[04:25] <putter> or RUNIC LETTER JERAN J

[04:26] <putter> I wonder if ( ) parens are a combining char.  for (+) analogy to $+x.

[04:29] <Patterner> I wish I had a font to see those runic letters...

[04:30] *** lpwave joined
[04:31] <putter> á ?

[04:32] <Patterner> [] is probably not really the letter :)

[04:32] <putter> :)

[04:46] <putter> anyone know order of magnitude how expensive the method first-use, scan ISA, is? 10x sub call, 100x, 1000x?

[04:49] * putter is contemplating an architecture which would have all of the Prelude, Perl.foo grammar rules, and maybe even a p6 runtime api, all ISA()ed into _every_ package (well, every one which is using p6).

[04:50] *** amnesiac joined
[04:50] <putter> scary from a runtime performance perspective.  but nice from a development perspective.  want to do yet another p6 on p5 variant,  "package Foo; use base SomeExistingOne; sub mumble {...mutant mumbling...}"

[04:54] <putter> @tell TimToady  re extensibility of the p6 grammar, one needs to be able to retract as well as extend, no?  So one can play games like starting with the quick and dirty, or stable, version of token/rule/regex x, and then others selectively override it with more real, or experimental, variants.

[04:54] <lambdabot> Consider it noted.

[04:55] *** ashleyb joined
[04:56] <TimToady> sure, but the overriding is based on longnames including longest token match.

[04:56] <lambdabot> TimToady: You have 1 new message. '/msg lambdabot @messages' to read it.

[04:56] <putter> I find myself writing   regex inherited_hack_rule_no_longer_needed { <fail> }  overrides.

[04:57] <putter> no longest token

[04:58] <TimToady> 'only' or 'proto' would cause this rule to hide all rules with the same short name

[05:00] <TimToady> oh, $<foo> already scopes to the current (...)

[05:01] <putter> class A { regex statement_control { if ...havent implemented else yet...} } class B does A { regex statement_control { if ...full version...} }   where does the only go?

[05:02] <TimToady> in front of the 2nd "regex"

[05:02] <TimToady> same place "proto" or "multi" would go

[05:02] <putter> re $<foo>  !!!  :)  *pause*  user hat replaced with have to code it over the weekend hat.  ?!?! oh, sigh.

[05:04] <putter> how would B get rid of if entirely?  regex statement_control { if...and whatever else might be contributing to the token left intact... <fail> }  ?

[05:13] *** REPLeffect_ joined
[05:14] <TimToady> something like that, or use proto that intelligently calls SUPER somehow

[05:15] <cj> 1~9ohgefgfffffffffffffffffffffffffffffffffff

[05:15] <cj> (scarlet says hi)

[05:18] * putter wonders if linux/X has a "recognize and filter cat on keyboard" program, like dos once did.

[05:22] <allbery_b> doesn't look like it

[05:23] <putter> :)

[05:27] <putter> @tell audreyt To get a feeling for your current thinking on the p6 ast, where is the best place to look?  kp6?

[05:27] <lambdabot> Consider it noted.

[05:29] * putter ponders a p6  class A is reblessable {...}

[05:33] <putter> re |,|| ...  "YACC is stealing my |, and I want it back!" ;)

[05:34] <putter> people are going to be soooooo confused.  sigh.

[05:39] <putter> end of day.  g'night all. &

[05:40] *** zgh joined
[05:55] <obra> 'evening

[06:13] *** BooK_ joined
[06:20] <gaal> mornin'

[06:27] *** jisom joined
[06:28] *** jisom left
[06:28] *** jisom joined
[07:12] *** rfordinal_ joined
[07:21] *** marmic joined
[07:52] *** elmex joined
[07:53] *** devogon joined
[08:07] *** drrho joined
[08:30] *** rfordinal_ is now known as rfordinal

[08:41] *** allbery_b joined
[08:52] *** dduncan left
[09:22] *** mj41 joined
[09:25] *** pdcawley joined
[09:33] *** IllvilJa joined
[09:35] *** Schwern joined
[09:37] *** IllvilJa joined
[09:41] *** lisppaste3 joined
[09:55] *** buetow joined
[10:04] *** chris2 joined
[10:12] *** ruoso joined
[10:29] *** ruoso_ joined
[10:31] *** ruoso_ is now known as ruoso

[10:56] *** nipotan is now known as nipotaway

[11:09] *** rindolf joined
[11:09] <rindolf> Hi all.

[11:10] <moritz> hi rindolf ;)

[11:10] <shay> hey moritz :)

[11:10] <moritz> hi shay ;)

[11:11] <rindolf> Hi moritz 

[11:11] <rindolf> moritz: what's up?

[11:11] <moritz> nothingmuch ;)

[11:12] <moritz> .oO(sorry for hilight-spamming ;)

[11:12] <shay> hehe

[11:13] <Patterner> we forgive, but we won't forget

[11:14] <moritz> ;)

[11:14] <moritz> my irclogs don't forget either

[11:14] <moritz> unless the hds crash ;)

[11:15] *** nipotaway is now known as nipotan

[11:19] <rindolf> moritz: don't you have backups?

[11:20] <moritz> rindolf: yes, but irregularly

[11:20] <rindolf> "Only wimps use tape backup: real men just upload their important stuff on ftp, and let the rest of the world mirror it." -- Linus B. Torvalds

[11:20] <rindolf> moritz: I see.

[11:20] <rindolf> moritz: I'm backin up my hard-disk every month.

[11:21] <moritz> rindolf: I don't administer my server and don't have too fast access to it...

[11:21] <rindolf> moritz: rsync?

[11:22] <moritz> rindolf: I'm currently in a student's hall with approx. 24kB/s downstream...

[11:22] <moritz> rindolf: that's no fun...

[11:22] <moritz> I mirror the most important data with unison

[11:23] <moritz> (which is really two-way rsync)

[11:23] <rindolf> moritz: OK.

[11:24] <rindolf> moritz: why so low a bandwidth?

[11:24] <rindolf> moritz: where do you live?

[11:24] <moritz> normally I live in WÃ¼rzburg, Germany but now I'm in Edinburgh...

[11:24] <moritz> and the university doesn't seem to be interested in providing faster internet

[11:26] <moritz> yesterday the http proxy start killing connections randomly :(

[11:32] <rindolf> moritz: ouch. :-(

[11:32] <rindolf> moritz: do you have a faster Inet-connection at home?

[11:33] <moritz> rindolf: yes, normal DSL-1024

[11:34] <moritz> wich gives about 124kB/s downstream via ftp

[11:34] <moritz> not ideal, but much better ;)

[11:36] <rindolf> moritz: OK.

[11:36] <rindolf> moritz: I have more than that.

[11:36] <rindolf> 200 KB or even more.

[11:39] *** ruoso_ joined
[12:18] *** ruoso joined
[12:23] *** IllvilJa joined
[13:10] *** drbean joined
[13:15] *** Limbic_Region joined
[13:29] <rindolf> moritz: what are you doing in Edinburgh?

[13:35] *** cookys joined
[13:44] <stevan_> any of our chinese hackers familiar with "quad byte" format?

[13:48] <stevan_> oh wow,.. its basically UTF-32... how strange (at least to me)

[13:48] <stevan_> (Dan Kogai)++ # Encode handles it :)

[14:14] <moritz> rindolf: studying physics ;)

[14:22] <rindolf> moritz: are you studying in Edinburgh during your entire degree?

[14:23] <moritz> rindolf: no, just one year... hopefully long enough to make my "master of physics"

[14:23] *** mdiep joined
[14:26] *** [particle] joined
[14:28] <moritz> rindolf: and where do you live?

[14:30] <moritz> when trying to upload smoke reports, I get an error message "no space left on device"

[14:31] <moritz> is there anybody here who can fix that?

[14:31] <rindolf> moritz: I live in Tel Aviv, Israel.

[14:33] <moritz> rindolf: how much does the israel<->palestians conflict affect your daily life?

[14:33] <rindolf> moritz: not much.

[14:33] <moritz> rindolf: I only know isreal from TV, and I don't have a clue ;)

[14:33] <moritz> that's luck ;)

[14:33] <rindolf> moritz: it's usually quiet here.

[14:34] *** Limbic_Region joined
[14:35] <moritz> rindolf: it's cool that the perl dev is so international ;)

[14:36] <moritz> is anybody from africa here?

[14:38] <rindolf> moritz: my homesite is http://www.shlomifish.org/

[14:38] <lambdabot> Title: Shlomi Fish' Homepage

[14:41] *** vel6608 joined
[14:44] <moritz> rindolf: quit interesting ;)

[14:46] *** mdiep joined
[14:51] <allbery_b> aha, you're shomifish!  the world shrinks a bit more :)

[14:55] <rindolf> allbery_b: Shlomi Fish.

[14:57] <allbery_b> sorry, I'm good at typoes :)

[14:58] <rindolf> allbery_b: typos. ;-P

[14:58] * Limbic_Region hasn't been to a YAPC yet but I suspect name tags should include real name and then a list of online AKAs

[15:02] <moritz> what happend to the default filehandles? IIRC they used to be $*DEF{IN,OUT,ERR}, but now none of the appear in the specs

[15:02] <[particle]> STDIN?

[15:03] <moritz> [particle]: in perl6?

[15:03] <moritz> ?eval STDIN

[15:03] <evalbot_r15324> Error: No compatible subroutine found: "&STDIN"

[15:03] <[particle]> 176:    use GLOBAL <$IN $OUT $ERR>; 

[15:03] <[particle]> 180:    #     my ($IN, $OUT, $ERR) ::= ($*IN, $*OUT, $*ERR)

[15:03] <[particle]> S11.pod

[15:04] <moritz> [particle]: thanks

[15:05] <[particle]> ack to the rescue!

[15:05] <allbery_b> moritz: isn't DEFIN ruby or something? :)

[15:06] <moritz> allbery_b: I remeber that I wrote testcases for say and print using $*DEFOUT, it worked and nobody complained ;)

[15:06] <moritz> allbery_b: and I thought I found it somewhere in the specs

[15:07] <moritz> it's in t/builtins/io/say_and_print.t

[15:10] *** ruoso joined
[15:13] *** REPLeffect_ joined
[15:13] *** baest joined
[15:18] <moritz> what is the recommended way to iterate over a filehandle for reading?

[15:18] <moritz> while defined (my $line = $fh.readline()) is somewhat ugly...

[15:19] <[particle]> for =$fh -> $line {...}

[15:19] <moritz> [particle]: thanks

[15:22] *** IllvilJa left
[15:24] *** bonesss joined
[15:36] <svnbot6> r15331 | kudra++ | Late, but finally here

[15:54] *** amnesiac joined
[15:54] <svnbot6> r15332 | kudra++ | I always have to correct this line break in the completed summaries, so I'm fixing it in the prototype

[15:57] *** ruoso joined
[15:58] <svnbot6> r15333 | kudra++ | Full thread listing but no summaries yet

[15:58] <svnbot6> r15334 | kudra++ | Partial darft

[15:58] <svnbot6> r15335 | kudra++ | Placeholder; week isn't complete yet

[16:02] <devbot6> planet6: Audrey Tang: Weekly Perl 6 mailing list summary for 21-28 January, 2007 <http://pugs.blogs.com/pugs/2007/02/weekly_perl_6_m.html>

[16:10] *** REPLeffect_ joined
[16:14] *** REPLeffect_ is now known as REPLeffect

[16:14] *** REPLeffect left
[16:14] *** REPLeffect joined
[16:16] *** bonesss joined
[16:27] *** turrepurre joined
[16:30] *** nipra joined
[16:39] *** ruoso joined
[16:39] *** falesca joined
[16:41] *** turrepurre joined
[17:02] *** iblechbot joined
[17:11] *** ashleyb joined
[17:28] *** ProperNoun joined
[17:36] *** falesca joined
[17:41] *** macli joined
[17:45] *** justatheory joined
[18:01] *** Xaduha joined
[18:15] *** nipra joined
[18:17] *** orafu joined
[18:23] *** jisom joined
[18:23] *** jisom left
[18:24] *** jisom joined
[18:30] <kolibrie> ingy: is it planned for the Perldoc module on CPAN to be able to process Perl 6 perldoc?

[18:33] *** justatheory joined
[18:34] <ingy> kolibrie: yes

[18:34] <kolibrie> oh, goody

[18:34] <TimToady> probably want to wait till Damian comes out with his parser

[18:34] <ingy> nod

[18:35] <TimToady> and just embed that.

[18:35] <ingy> it's not really in my brain at the moment, but yes

[18:35] <TimToady> he's just about done with it, I believe.

[18:35] <ingy> awesome

[18:35] <kolibrie> very nice

[18:35] <TimToady> I'll need to install a translated version of it into the P6 parser as well.

[18:36] <TimToady> since P6 is supposed to be able to access its surrounding pod via %= variables

[18:36] <ingy> oh cool. so perldoc is parser into the ast?

[18:36] <ingy> parse*d*

[18:37] <TimToady> yes, has to be an official subset of P6 grammar

[18:37] <TimToady> which is of course extensible...

[18:37] <ingy> :)

[18:37] <ingy> moment of panic relieved

[18:37] <TimToady> It occurred to me that you might take that wrong.  :)

[18:37] <ingy> it was a very short moment

[18:38] <TimToady> have to observe the kwidities, after all...

[18:38] *** neonse joined
[18:39] <ingy> :)

[18:39] <TimToady> I guess that should be spelled kwiddities

[18:42] <TimToady> does anyone remember how to get a web svn diff of the synopses?  seems like something there should be a top-level page for somewhere...

[18:42] <TimToady> wanted to mention it on perlmonks but couldn't find it...

[18:43] *** beppu joined
[18:51] <Limbic_Region> TimToady - couldn't find what on PerlMonks?

[18:51] * Limbic_Region pretty much has PerlMonks in memory at all times

[18:52] <Limbic_Region> oh nevermind

[18:52] <Limbic_Region> you wanted to put something on PerlMonks that doesn't currently exist (there)

[18:56] *** IllvilJa joined
[19:02] <baest> TimToady: can you explain what %= does or is a specification available somewhere (couldn't find it in the synopsis). Very curious on precisly what it does

[19:05] <PerlJam> baest: %= looks like mod-equals to me.  

[19:05] <PerlJam> baest: i.e.,  $a %= b  is the same as $a = $a % b;

[19:05] <baest> PerlJam: oh, yes, I'm not precise I was thinking about: 19:36:21 < TimToady> since P6 is supposed to be able to access its surrounding pod via %= variables

[19:05] <TimToady> = is a twigil indicate a file-scoped document variable.  The = is meant to remind you of =begin/=end

[19:05] <Limbic_Region> ?eval my $num = 100; $num %= 3; $num

[19:05] *** evalbot_r15324 is now known as evalbot_r15335

[19:05] <evalbot_r15335> \1

[19:06] <PerlJam> oh! POD context

[19:06] <TimToady> no, term context

[19:06] <TimToady> so @=DATA could be the new <DATA>

[19:07] <TimToady> but it would be a =begin DATA/=end DATA podstream

[19:07] <[particle]> so, =$filehandle becomes $=filehandle?

[19:07] <TimToady> no

[19:07] <TimToady> has nothing to do with filehandles anymore

[19:07] <[particle]> 's confusing, though

[19:07] <baest> that makes sense. So why would you access the pod info. Is that instead of repeating yourself? Not sure I understand the effects of it

[19:08] <PerlJam> baest: literate programming comes to mind  :-)

[19:08] <TimToady> you can think of it as a displaced heredoc

[19:08] <PerlJam> baest: other forms of introspection too

[19:08] <TimToady> and autodocs can refer to pod comments near them

[19:09] <TimToady> so a function could have a method to return its documentation, for instance.

[19:09] <PerlJam> runnable examples are always nice

[19:09] <TimToady> some languages kludge this in with an extra declaration in the header of the function

[19:09] <baest> TimToady: that's very cool. That is something that really bugged, that you had to repeat the options for a script twice or be _very_ creative

[19:10] <TimToady> or by processing comments

[19:10] <baest> bugged *me

[19:10] <PerlJam> TimToady: are you making digs at python there?  :-)

[19:10] <TimToady> not intentionally

[19:10] <TimToady> but if the shoe fits

[19:10] <PerlJam> If you'd said something about semantic whitespace I would have been sure you were targeting python 

[19:11] <TimToady> python is sort of self-targeting that way... :)

[19:11] <baest> :)

[19:11] <PerlJam> TimToady: so, how is your day going so far?  (What is it that you do for a living these days?)

[19:12] <TimToady> I'm almost awake by now.

[19:12] <TimToady> my blood pressure started too high this morning, so I'm taking it pretty easy, apart from posting to perlmonks, which can raise anyone's blood pressure

[19:13] <tene> perhaps give functions an "is documented" trait?

[19:13] <TimToady> I officially work for Netlogic Microsystems

[19:13] <TimToady> but they pay me to work on Perl 6 a lot. :)

[19:13] <TimToady> tene: that is precisely what I'd like to avoid.

[19:13] <PerlJam> well (Netlogic Microsystems)++ then

[19:14] <jisom> that'd require as "is documented where" trait

[19:15] <TimToady> or if there is such an "is documented where" it would default to "the preceding pod block"

[19:15] <TimToady> or the pod block links it the other direction instead

[19:16] <tene> that could also work.

[19:16] <tene> or support both

[19:17] <jisom> and if you have some of your pod inside the function and some outside because you want the comments to be close to the code?

[19:17] *** diakopter joined
[19:17] <TimToady> main point is, pod is a data structure navigable by the program.

[19:17] <TimToady> everything else is convention

[19:17] <jisom> how strict is the parsing going to be?

[19:17] <TimToady> how strict do you want it?

[19:18] *** Belaf joined
[19:18] <diakopter> TimToady: how would one go about making a pragma to embed interdependent tests in/among their corresponding methods/subs?

[19:18] <TimToady> certainly the default for documentation can be a little more forgiving.

[19:18] <PerlJam> TimToady: did you see chromatic's recent use.perl post?

[19:18] <jisom> the stricter it is, the easier to write a parser(even if harder to write for beginners)

[19:19] <PerlJam> jisom: perl is/has a parser

[19:19] * [particle] agrees with jisom -- let's not go the direction of HTML 1.0

[19:19] <jisom> except be strict in the release stuff.....perl5 sort of has that issue, bad pod in the released in the tarball

[19:19] <jisom> *in the release tarball

[19:19] <diakopter> TimToady: I mean, if pod will be runtime accessible by the module and vice versa ... why not tests as well

[19:20] * PerlJam suddenly experiences some deja vu

[19:20] <TimToady> diakopter: it's been mentioned before as a possibility, but for the moment I'm lumping that in the "conventions to be established at some point" category.

[19:22] <TimToady> PerlJam: which post is that?

[19:23] <PerlJam> TimToady: http://use.perl.org/~chromatic/journal/

[19:23] <lambdabot> Title: Journal of chromatic (983)

[19:24] <PerlJam> TimToady: you were talking about high blood pressure and the link in that article about "Why perl is a bad language" might raise yours if you read it.

[19:25] <PerlJam> But the sad thing is is that even on perlmonks, you find people like David Cameron

[19:25] <jisom> "why is perl a bad language"....I can't write my kernel in it?

[19:27] <PerlJam> heh, http://www.adequacy.org/public/stories/2001.12.20.165434.32.html

[19:27] <lambdabot> Title: Pearl vs. Python: A Technical Review

[19:27] <PerlJam> That one *has* to be a joke :)

[19:27] *** REPLeffect left
[19:28] <PerlJam> anyway ...

[19:29] * PerlJam goes back to patiently waiting for perl6

[19:29] <[particle]> this is more fun to read: http://www.barcodeart.com/art/clock/launch_small.html 

[19:29] <lambdabot> Title: Scott Blake

[19:30] * jisom just figured out where "TimToady" came from

[19:30] <PerlJam> jisom: Did you ride the short bus to school?  ;-)

[19:30] <TimToady> not to mention http://www.barcodeart.com/art/clock/launch_large.html

[19:30] <lambdabot> Title: Scott Blake - Bar Code Clock

[19:31] *** CardinalNumber joined
[19:32] <PerlJam> I wish I could find a job that would a) pay me enough to keep my family happy and b) let me work on perl-related stuff all the time.

[19:33] <TimToady> Cheop's Law: everything costs more and takes longer

[19:34] <jisom> unless you make it open source and get people to work on it for free, then it just takes longer

[19:35] <PerlJam> jison: the costs just change from monetary to something else.

[19:36] <TimToady> mostly opportunity cost of letting others get ahead, which can raise your blood pressure.  :)

[19:37] <kolibrie> PerlJam: my boss is looking for someone, but I'm not sure exactly what he's looking for

[19:37] <TimToady> a lot of people are looking for someone...

[19:38] * kolibrie never found his childhood kindred spirit -- too late now

[19:39] <TimToady> some of us just stay children until we do.  :)

[19:39] <kolibrie> hmm, have to think about that

[19:43] <xerox> TimToady: that law seem to be related to the second principle of thermodynamics. There's space for developement (-:

[19:44] <Limbic_Region> xerox - I know you from ##java land right?

[19:44] <xerox> Limbic_Region: YUCK. Here and #haskell.

[19:44] <moritz> xerox: the principle basically says that the universe will end as a homogenous mass - not a good place to live in ;)

[19:45] <Limbic_Region> hrmmm

[19:45] * Limbic_Region is trying to remember the helpful soul in ##java whose handle started with an x

[19:46] <jisom> but the universe is mostly homogenous, empty space, we're an anomaly in the homogeneousness of the universe

[19:46] <jisom> my spell checker says it's a word and spelled right!

[19:47] <xerox> I think both are oversemplification, but then I don't have a better theory of everything to propose. I can reccommend Penrose stuff to read, and watch, though.

[19:47] <TimToady> no, the universe is mostly a seething mass of virtual particles.  we are merely persistent accounting errors.

[19:47] * [particle] *coughs*

[19:47] <TimToady> some are more persistent than others...

[19:47] <moritz> TimToady: that explains a lot ;)

[19:48] * [particle] seeths

[19:48] <moritz> xerox: does penrose lectures thermodynamics? I always thought he did some QM or unified theories...

[19:49] <TimToady> well, the fact is whenever we say "an electron started here and ended up there", it's mostly wrong.

[19:49] <moritz> TimToady: that's why we talk of wave functions ;)

[19:49] <moritz> or at leas I do ;)

[19:49] * [particle] waves

[19:49] <xerox> moritz: some of his ideas are explained in a quite funny way in his special talks for the MSRI (<http://msri.org>)

[19:49] <[particle]> electrons travel backwards in spacetime

[19:49] *** justatheory joined
[19:50] <TimToady> nah, they just obey Spacetime Transactional Memory

[19:50] <moritz> [particle]: or forward - it so hard to tell since the schroedinger equation is invariant under time inversion ;)

[19:51] <allbery_b> there is that thing where an electron moving backward in time is indistinguishable from a positron

[19:51] <TimToady> STM is what keeps the accounting errors persistent, lucky for us.

[19:51] <xerox> Ladies and gentleman, here it is the Spontaneous Symmetry Breaking.

[19:52] <TimToady> by the way, my son Aron just had his first physics paper published: http://www.arxiv.org/abs/hep-th/0702124

[19:52] <moritz> Aron++ ;)

[19:53] <obra> TimToady: congrats.

[19:53] <xerox> What a title!

[19:53] <obra> TimToady: What's his Erdos #?

[19:53] <TimToady> dunno, I'll have to ask him

[19:53] <moritz> obra: physicists don't care, only mathematicians do

[19:53] <TimToady> I used to work with someone whose number was 1

[19:54] <moritz> (or at least I think so)

[19:54] <obra> TimToady: did you co-publish with him? ;)

[19:54] <TimToady> but never published anything with him, alas

[19:54] <obra> alas.

[19:54] <obra> moritz: it varies

[19:54] <moritz> obra: ok ;)

[19:55] <obra> my girlfriend is a physicist by training and she cares :)

[19:55] <moritz> I know a computer science guy with erdÃ¼l 1 - I never met anyone else who was more crazy ;)

[19:55] * obra ponders an April 1 hoax to get citeseer to add erdos as the author on every paper

[19:56] <TimToady> I've just asked him if any of his coauthors know their ErdÃ¶s number.

[19:56] <moritz> he once hold a lecture in ancient greek and afterwards told his collegeas: "It did'nt make a differnce" ;)

[19:56] <moritz> obra: cool idea ;)

[19:56] *** CardinalNumber is now known as ProperNoun

[19:56] <obra> http://www.oakland.edu/enp/ErdosA and http://www.oakland.edu/enp/thedata.html For those playing the home game

[19:57] <obra> Only two Walls with a # <= 2.

[19:57] <obra> Wall, Curtiss E.

[19:57] <obra> Wall, James R.

[19:57] <TimToady> I guess that's ErdÅs instead

[19:57] <obra> ...now I want to know how many CPAN authors have co-authored with audrey.

[19:58] <moritz> TimToady: your son isn't a professor by any chance?

[19:59] <moritz> TimToady: usually the last author on a paper is the prof who did nothing but nod and said "good work, folks" ;)

[19:59] <moritz> (or at least in germany, that is)

[20:00] *** Caelum joined
[20:00] <TimToady> no, he's the grad student slave labor who wrote a lot of the paper.

[20:03] <obra> moritz: in the US, usually that prof gets first billing.

[20:06] *** elmex joined
[20:14] <moritz> obra: how sad ;)

[20:16] <TimToady> yeah, we screw up the dates too.  :)

[20:18] <jisom> and measuring distance too

[20:18] <TimToady> at least the traditional European dates are consistently little endian.

[20:18] <jisom> and weight

[20:18] <TimToady> though I think I prefer big endian dates anymore

[20:18] <TimToady> 2007/12/25

[20:18] *** blueagnes joined
[20:18] <jisom> and if you type 01/02/03 you have no clue when it is :-p

[20:19] <jisom> big endian, little endian, or mixed like the US

[20:35] *** Xaduha joined
[20:38] *** ashelyb_ joined
[20:41] *** blueagnes left
[20:45] *** as joined
[20:46] <moritz> @tell rindolf on your homepage on the decss page there is at least one broken link

[20:46] <lambdabot> Consider it noted.

[20:48] *** miyagawa joined
[20:48] *** mncharity joined
[20:48] *** mncharity is now known as putter

[20:50] <TimToady> @mess

[20:50] <lambdabot> Maybe you meant: messages messages? msg

[20:50] <TimToady> @moosages

[20:50] <lambdabot> putter said 15h 55m 58s ago: re extensibility of the p6 grammar, one needs to be able to retract as well as extend, no? So one can play games like starting with the quick and dirty, or stable,

[20:50] <lambdabot> version of token/rule/regex x, and then others selectively override it with more real, or experimental, variants.

[20:52] *** buubot joined
[20:53] <putter> *startlement*  '@moosages" worked!?!?!

[20:53] <putter> hack attack time.  let's see if the neurons are up for it.

[20:54] *** amnesiac joined
[20:54] <allbery_b> sure.  lambdabot has(limited) edit distance heuristis

[20:55] <putter> is there really no Filter::WithSub (or somesuch)?  it seems like an obvious good thing.

[20:55] *** integral joined
[20:56] <TimToady> you mean grep?

[20:56] <putter> ... use Filter::WithSub INSERT,sub{join(",",map{...}@mumble}; ...

[20:58] <putter> ... use Filter::WithSub sub { filter::simple code to create a bit of abstraction in this file };

[20:58] <putter> wraps nice #line around it.

[20:59] <putter> use Filter::WithSub method=>'mumble', debug_to=>STDERR;

[20:59] *** polettix joined
[21:01] <putter> there's Macro  http://search.cpan.org/~segv/Macro-0.2/Macro.pod

[21:01] <lambdabot> Title: Macro - Simple code templating mechnism - search.cpan.org

[21:03] <putter> basically I need some better metaprogramming for p5, or doing nontrivial ast's will make me run away.

[21:03] <putter> TT: btw, for myself, feel free to use simple text macros in STD.  :)

[21:04] *** weinig|bbl is now known as weinig

[21:08] <TimToady> well, that's essentially what the PrecOp role is doing currently...

[21:09] <putter> k

[21:09] <TimToady> and the return-type coercions could be copied down to the {*} stub.

[21:10] <TimToady> pugs supports neither parameterized roles nor &.() methods yet.

[21:10] <tene> if you really need those in pugs, check out a revision from the future.

[21:11] <TimToady> well, sure, but the checkout takes longer than just waiting.

[21:12] <putter> (the more developers you have sitting around twiddling thumbs waiting for next release, the longer it seems to take...)

[21:12] <putter> oo, there's an idea...

[21:14] <[particle]> ...hire some monkeys to code haskell?

[21:15] <jrockway> i don't think monkeys are able to inderstand polymorphic type classes

[21:15] <putter> I was hoping for a unicode "thumbs up" glyph, so we could have a thumb twigle.  :)

[21:17] <putter> Twiggling our thumbs.

[21:19] <tene> Heh.

[21:20] <putter> Ok, I hallucinate a fuzzy vision of a componentized p6 impl on p5.  so assorted folks can push things in assorted directions, without the past/current constraints of their being "one big thing" (which must not be broken, etc).

[21:20] <putter> s/their/there/

[21:21] <putter> not sure if it can be usefully brainstormed without a whiteboard.  :(

[21:21] <putter> big downside of non-local development for me.

[21:22] <putter> @tell stevan Was talking to someone at boston-pm about Moose.  any interest in doing the proverbial boston-area p6 users group meeting?

[21:22] <lambdabot> Consider it noted.

[21:22] <putter> (there would be a whiteboard there... *wistfully*)

[21:23] <moritz> putter: like... a wiki?

[21:24] <putter> :)

[21:25] <putter> nifty ("nifti"?), but... for a complex conversation, you really need to be in the same room, to handwave at each other will waving at a whiteboard.  don't know of any substitute with current tech.  the video wall stuff I guess.

[21:25] <putter> s/will/while/

[21:38] <putter> btw, is it just me, or does this seem odd:  rule x / {env $x=3;return 'foo';} /; rule y /{env $x =2} <x> {$+x is now 3}/;

[21:39] <putter> the "return isn't really exiting the stack frame" thing... cognitive dissonance.

[21:42] *** Caelum joined
[21:44] *** stevan_ joined
[21:45] *** Aankhen`` joined
[21:47] * putter attempts to local()ize a symbol table entry.  eg, A::new.

[21:48] <putter> local *A::new = \&B::new;

[21:48] <putter> woot

[21:50] <putter> so we can have a p5  Perl6::Match  for instance, which individual implementations can say "for Match, please use  Pugs::Junk::ImplB::Match'), which should @ISA Perl6::Match, and it all just works.

[21:53] *** CardinalNumber joined
[21:54] *** KD-Misafir311 joined
[21:54] <putter> still, it would be nice to have a scoping mechanism local(), but only in some specified set of package/lexical scopes.  p7.

[21:55] *** KD-Misafir311 is now known as nurii

[21:58] <putter> sort of "just works".  really want to localize the ISA of Perl6::Match.  but that does fly with current p5 impl.

[22:00] <putter> anyone see any problems with local()ing new() to permit a standard set of names (Perl6::Foo) to be used by everyone, despite there being multiple implementations?

[22:01] <putter> Their .class will have to lie, but that was needed anyway.

[22:07] <putter> In p6, a p5 package Foo is named perl5::Foo.  Any objections to a p6 Bar being named perl6::Bar in p5?

[22:12] <putter> @seen audreyt

[22:12] <lambdabot> audreyt is in #perl6 and #haskell. I last heard audreyt speak 1d 7h 8m 29s ago.

[22:12] *** CardinalNumber is now known as ProperNoun

[22:31] *** Psyche^ joined
[22:32] <putter> @seen gaal

[22:32] <lambdabot> gaal is in #perl6 and #haskell. I last heard gaal speak 16h 11m 34s ago.

[22:32] <kolibrie> putter: in november, clkao and audreyt at the prodding of cj? suggested a boston meeting in early May

[22:32] <kolibrie> if we can get dates, I may swing up

[22:33] <kolibrie> stevan also expressed interest

[22:36] * kolibrie cycles home

[22:43] <putter> kolibrie: awesome.

[22:43] <putter> but... 2+months away...

[22:45] <putter> beautiful sunset.  cloud cap 15deg up in the west, deep red, against windblown bare deciduous and waving tall pines.  :)

[22:47] *** Psyche^ is now known as Patterner

[22:48] <putter> its unfortunate, but the difference in visual complexity between   a.foo(...)   and  $a->foo(...)   (as a way of mixing sublanguages (here "a")),  has me wanting to make different architectural decisions. :/

[22:49] <SamB> ???

[22:49] *** jrockway joined
[22:49] <SamB> what does -> do?

[22:49] <tene> putter: elaborate?

[22:49] <putter> a.foo(b.bar("fribble",3),"up")   I can read, but

[22:50] <putter> $a->foo($b->bar("fribble",3),"up")   not so much

[22:50] <SamB> that just makes me think "Python"...

[22:50] <SamB> for some reason...

[22:51] <putter> sublanguages meaning domain specific languages.  eg, mixing PIL1 in with something else.  $pil1->stmts  vs pil1.stmts  pil.stmts  p.stmts

[22:54] <putter> Hmm, mixed results in experiment re Tufte's "minimal ink" guideline: http://portal.acm.org/ft_gateway.cfm?id=1125090&type=pdf&coll=&dl=ACM&CFID=15151515&CFTOKEN=6184618

[22:54] <lambdabot> http://tinyurl.com/ywtjxn

[23:06] *** lampus joined
[23:12] *** pjcj_ joined
[23:13] <TimToady> I suspect it's the > more than the - that interferes, since it's more vertical.

[23:13] <TimToady> and it's more of an ascender

[23:14] <TimToady> I'd say -> IS making THE same mistake AS putting your keywords IN all caps.

[23:15] *** miyagawa joined
[23:16] <TimToady> infix operators should be huffman coded vertically.  :)

[23:16] <TimToady> I don't think this applies so much to prefixes, however.

[23:16] <TimToady> since you're not trying to connect two sides so much

[23:17] <TimToady> (hence, I'm not too worried about sigils, which typically signal the start of a noun phrase.)

[23:17] <TimToady> $x.foo.bar.baz()  has a nice shape.

[23:18] <TimToady> especially when trying to pick out what will interpolate

[23:22] <putter> :)

[23:23] <putter> $a.foo($b.bar("fribble",3),"up")

[23:23] <putter> a.foo(b.bar("fribble",3),"up")

[23:24] *** mako132 joined
[23:24] <putter> could be.  interesting.  hadn't thought of it that way.

[23:25] <TimToady> interesting that all our interpolaters are "strong" vertically

[23:25] <TimToady> $ @ % & { \

[23:25] <TimToady> and | for interpolating a caputre

[23:25] <TimToady> *capture

[23:26] <TimToady> though caputre is a cool word

[23:26] <putter> lol.

[23:26] <TimToady> caputrÃ©

[23:26] <putter> and ./foo  blends away, atleast in my typeface

[23:27] <TimToady> certain $.foo and .foo have a very different shape on the front.

[23:27] <TimToady> s/<sp>/ly /

[23:30] *** prism joined
[23:30] <TimToady> I was worried about the vertical visual parsing of 1,2,3 Z 4,5,6 until I realized that was artificial

[23:30] <TimToady> and you usually have @foo Z @bar

[23:31] *** Squern joined
[23:31] <TimToady> mixed with letters the Z stands out adequately, I think.

[23:31] <TimToady> same for @foo X @bar

[23:32] <putter> indeed

[23:32] <TimToady> part of my unstating reasoning for going from XX to X

[23:32] <TimToady> unstated even

[23:33] <TimToady> I don't usually talk about half the things I think about...

[23:33] <TimToady> but your bargraphs brought it back to mind

[23:33] <putter> if you journal any of them, that might make for an interesting post/book/mumble sometime

[23:34] <TimToady> I worry that those experiments are measuring the amount of time to produce a number, not an understanding.

[23:34] <putter> yes indeed.

[23:34] <TimToady> but it's hard to measure how well people integrate the areas under the "curve", and a lot easier to measure how long it takes them to say 12.2

[23:35] <TimToady> the bars are there for "bulk" reasons that are more accessible to the backbrain than the front.

[23:35] *** xinming joined
[23:35] <putter> hmm, there's a question.  one-laptop-per-child is getting closer to release.  what could one collect/write to facilitate graph _understanding_.  "graph as language".  hmm

[23:36] <TimToady> much like some people still prefer analog clocks even though it's faster to say 6:36

[23:36] <TimToady> but then they have trouble translating the numbers back to the "feel" of time.

[23:37] <putter> and lots of folks liked my http://www.vendian.org/envelope/dir2/day_of_dots_clock/

[23:37] <lambdabot> Title: A dot for every second in the day - a clock

[23:38] *** krod joined
[23:38] <putter> objective was to help folks develop a feel for order of magnitude time.  ie, what's 10^5 seconds.

[23:38] <krod> Could someone tell me the proper way of doing this: http://pastebin.ca/369643 ... I am trying to store the output of exec(uptime) somehow

[23:38] <buubot> The paste 369643 has been copied to: http://erxz.com/pb/1512

[23:39] <putter> that doesn't *look* like perl6...

[23:39] <allbery_b> perl5 questions are best asked in #perl

[23:40] <putter> `uptime`

[23:41] <jrockway> maybe people think perl5.6 == perl6

[23:41] <putter> anyone know if PIL2JS is still working at the moment?

[23:42] <putter> "after all, the 5 is part of the language name, isn't it?  been there forever". :)

[23:43] * allbery_b rolls his eyes

[23:44] <TimToady> hmm, that does make me wonder whether foo1.2.3 should be consistenly parsed as a token.

[23:44] <TimToady> v1.2.3 would then fall out of that

[23:44] *** krod left
[23:45] <TimToady> maybe even foo.1.2.3

[23:45] <[particle]> and v1.2.3b1.4_209f

[23:46] <putter> strawman hypothesis:  if PIL2JS is working, or can be easily repaired, that seems a good way (the best way?) to drive development of a new front end.  take tests, emit old PIL1, if PIL2JS works on it no less well than with pugs -CPIL, you are golden.  can immediately use entire pugs t/.  without conflating runtime development (much).

[23:47] <putter> thoughts?  questions?  "you forgots"?

[23:47] * [particle] wonders what *-* is

[23:47] <xinming> 06:32:52 < putter> objective was to help folks develop a feel for order of magnitude time.  ie, what's 10^5 seconds.

[23:47] <xinming> 06:33:04 < krod> Could someone tell me the proper way of doing this: http://pastebin.ca/369643 ... I am trying to store the output of exec(uptime) somehow

[23:47] <buubot> The paste 369643 has been copied to: http://erxz.com/pb/1512

[23:47] <putter> re token, hmm.  no opinion.  don't really understand the space

[23:47] <TimToady> the dumbell operator?

[23:48] <putter> err, the design space :)

[23:48] <xinming> Oops. sorry.

[23:48] <TimToady> well .1 can never be a method call.

[23:48] <xinming> Mis click

[23:49] <TimToady> it either has a number on the front or something else.

[23:49] <putter> hmmmm

[23:49] <TimToady> so if it has a non-number, we could treat them all consistently.

[23:50] <putter>  .1  is 0.1 or $_.1 ?

[23:50] <TimToady> could also be a canonical namemangling for things like infix:<+> somehow

[23:50] <TimToady> at the moment bare .1 is outlawed.

[23:50] <putter> k

[23:50] <TimToady> er, no, that was 1.

[23:51] <TimToady> .1 is 0.1

[23:51] <TimToady> least surprise

[23:51] *** stevan__ joined
[23:51] <putter> but a bit of a gotcha here

[23:51] <TimToady> but foo.1 can't be a method call

[23:51] <TimToady> a listop requires a space, foo .1

[23:52] <putter> ^.^

[23:52] <putter> (eyebrow non-method call)

[23:54] <xinming> TimToady: I'd suggest 0.1 for number. using .1 form is not as good as it should be. At least. I don't think people will think It's tedious for just a '0' more

[23:54] <putter> oh, right.  confused.  eyebrows down.

[23:55] <TimToady> xinming: you could be right, if only to prevent people from wondering if .1 means $_.1 somehow.

[23:55] <putter> no comments/questions on the strawman in the corner?

[23:56] <TimToady> I don't understand really.

[23:56] <putter> np

[23:56] <TimToady> I just push arbitrary symbols around.

[23:56] <TimToady> My mind is sort of a Chinese Room.  :)

[23:56] <putter> :)

[23:58] <TimToady> are you proposing a way of working on new frontends without knowing Haskell?

[23:58] <putter> let's see...

[23:58] <TimToady> and what do you mean by a "frontend"?

[23:59] <putter> the objective is to have a "second" p6 parser.  mostly because

