[00:03] <TimToady> @tell agentzh something seems to be wrong with the SYN links on the smokeserver.  it's ending up in a directory with only S04.html and no index

[00:03] <lambdabot> Consider it noted.

[00:03] <Khisanth> perl6 implemented with markov chains? o_O

[00:04] <TimToady> yeah, it's a real travesty

[00:04] <geoffb> TimToady: did your children inherit your punning?

[00:06] <TimToady> no, they just inherited the ability to amused by things that aren't terribly amusing.  :)

[00:06] <TimToady> s/to/to be/

[00:06] <wolverian> does Perl6::Perldoc tell perldoc(1) how to read perl6docs?

[00:06] <wolverian> I guess not. :)

[00:06] <TimToady> unlikely

[00:40] *** justatheory joined
[00:45] *** dmpk2k joined
[00:51] *** geoffb joined
[01:04] <avar> wolverian: no

[01:18] *** [particle] joined
[01:36] *** revdiablo joined
[01:37] *** SubStack joined
[01:44] *** DarkWolf84 is now known as DW-Chidori

[01:44] *** DW-Chidori is now known as DarkWolf84

[01:45] <DarkWolf84> oops wrong server

[02:08] <rhr> TimToady: proposal for EntangledIO objects: .getc/.iterate use the read side, .print/.say/.printf use the write side, .shutdown unentangles, .fileno returns a disjunction

[02:08] <rhr> does that cover all the important stuff?

[02:09] <rhr> it still seems to me that whatever Pipe.fork returns needs to bool-ify in the expected way for parent/child

[02:17] <rhr> I guess the question is whether it should return a Proc obj for the child, or if there's another way to get that if you really need it

[02:19] <rhr> hmm, I see in p5 the child's read side is hooked up to stdin, I assume $*DEFIN could be used for that?

[02:34] <rhr> another crazy idea: instead of ungetc, how about Str IO.peek(Int $nchars = 1)

[03:00] <dduncan> what does $nchars mean in this case?  what is a char?

[03:02] <rhr> current unicode level etc.

[03:02] <dduncan> from what I understand, it doesn't make sense to talk about individual chars in Perl 6, it only makes sense to talk about character strings

[03:03] <rhr> graphemes by default, I believe

[03:05] <rhr> a "char" can be a byte, codepoint, grapheme or lang-dependent char

[03:06] <dduncan> yes, so saying "get a single char" doesn't make sense by itself

[03:06] *** mako132_ joined
[03:06] <dduncan> you need to say "get 1 graph or one codepoint or whatever

[03:06] <dduncan> if that is possible

[03:06] <rhr> sure it does, it's defined by the program's current unicode abstraction level

[03:07] <rhr> which defaults to graphs

[03:07] <dduncan> but on the other hand there is no routine to just get the length of a string at the current abstraction level, one must say .graphs or whatever ... or maybe that's not true?

[03:08] <dduncan> looking ...

[03:08] <rhr> I'm assuming it picks n of whatever the current unicode level specifies

[03:09] <dduncan> looking at synopsis 3, there is a .chars in an example

[03:09] <rhr> getc has to do the same thing

[03:09] <dduncan> well, if get/put can do a character at a time, I would expect a .chars to exist for parity, and it does

[03:10] <dduncan> no matter, on to other things ...

[03:21] <rhr> getc and peek should probably take an option to do something other than the current default char, though

[03:22] <rhr> in fact, it would be cool if getc took an $nchars arg, it would remove much of the need for sysread

[03:36] *** drupek12 joined
[03:53] *** amnesiac joined
[04:07] *** torz joined
[04:11] *** obvio171 joined
[04:25] *** CindyLin1 joined
[04:25] *** scw_ joined
[04:29] *** autin joined
[04:41] *** dolmans joined
[04:46] <svnbot6> r16181 | Darren_Duncan++ | ext/QDRDBMS/ : added or large-updated docs sections in SeeAlso.pod, README, Copying.pod

[04:56] *** drupek12 joined
[05:33] *** rfordinal joined
[05:40] *** agentzh joined
[05:45] <agentzh> feather is so slooooow :(

[05:45] <lambdabot> agentzh: You have 1 new message. '/msg lambdabot @messages' to read it.

[05:45] <agentzh> TimToady: fixing

[05:47] *** devogon joined
[05:57] *** marmic joined
[06:07] <svnbot6> r16182 | Darren_Duncan++ | ext/QDRDBMS/ : added QDRDBMS::Engine::Role* roles to QDRDBMS.pm, updated Example.pm to compose them

[06:11] *** buetow joined
[06:11] <svnbot6> r16183 | agentz++ | smartlinks.pl - made Perl6::Perldoc a soft dependency so as to fix the SYN links on the smokeserv (diakopter++ didn't do it quite right :))

[06:17] <svnbot6> r16184 | agentz++ | docs/feather/script/contab.txt - now autosmoke starts at 22:32 (feather localtime)

[06:17] *** ozo joined
[06:18] *** Alias_ joined
[06:19] *** Psyche^ joined
[06:19] *** Psyche^ is now known as Patterner

[06:23] *** devogon joined
[06:23] *** Phocean_ joined
[06:32] <agentzh> Hmm, i think only iblech++ can actually fix the SYN links on the smoke server. I don't have shell access :(

[06:33] <agentzh> already fire off an email to him.

[06:33] <agentzh> *fired

[06:34] <agentzh> &

[06:34] *** agentzh left
[06:41] *** polettix joined
[06:44] *** SubStack joined
[06:50] <svnbot6> r16185 | moritz++ | [irclog] added simple recognition of anchors in URLs, minor template change

[06:57] *** elmex joined
[07:05] *** geoffb joined
[07:14] *** theorb joined
[07:16] *** iblechbot joined
[07:22] *** jisom joined
[07:26] *** pbuetow joined
[07:29] <rhr> @tell TimToady was thinking out loud about IO stuff http://moritz.faui2k3.org/irclog/out.pl?channel=perl6;date=2007-05-04#id_l21

[07:29] <lambdabot> Consider it noted.

[07:30] *** BooK joined
[07:44] *** demq joined
[07:50] *** REPLeffect joined
[07:56] *** dduncan left
[08:21] *** Phocean_ joined
[08:33] <svnbot6> r16186 | moritz++ | [irclog] now spaces are inserted into long URLs. This should fix most problems

[08:33] <svnbot6> r16186 | moritz++ | with too long lines.

[08:35] *** dolmans joined
[08:37] *** offby1` joined
[08:56] *** andara joined
[09:03] *** toshinori joined
[09:12] *** obvio171 joined
[09:19] *** the_dormant joined
[09:25] *** rindolf joined
[09:30] *** obvio171 joined
[09:46] *** IllvilJa joined
[09:47] <rindolf> Hi all.

[09:47] <moritz> hi rindolf ;)

[09:47] *** IllvilJa joined
[09:47] <rindolf> moritz: hi.

[09:47] <rindolf> moritz: I'm about to lunch.

[09:47] <rindolf> moritz: and am listening to "The Ultimate Showdown of Ultimate Destiny"

[09:48] <moritz> rindolf: sounds... final ;)

[09:48] <moritz> or umltimate ;)

[09:48] <rindolf> moritz: it's very funny.

[09:49] *** obvio171 joined
[09:50] <rindolf> moritz: http://www.flashportal.com/movies/the_ultimate_showdown.html and http://www.albinoblacksheep.com/audio/showdown

[09:50] <lambdabot> Title: The Ultimate Showdown

[09:52] <moritz> rindolf: *downloading*

[09:53] *** ruoso joined
[09:57] *** penk joined
[09:57] <rindolf> moritz: OK. :-)

[09:59] *** riffraff joined
[10:01] <riffraff> mh.. logs are unreadable at the moment: an't read configuration in cgi.conf: No such file or directory

[10:01] <riffraff>  at /data/www/moritz.faui2k3.org/irclog/out.pl line 22

[10:01] *** obvio171 joined
[10:02] <moritz> damned

[10:02] <moritz> riffraff: thanks 

[10:02] <riffraff> thank _you_

[10:03] <moritz> works again

[10:08] *** franck__ joined
[10:09] *** obvio171 joined
[10:10] <riffraff> yep, abusing it :)

[10:12] <moritz> .oO(riffraff abuses websites ;)

[10:13] <riffraff> ehe

[10:14] <riffraff> is there some intelligent web interface to svn.pugscode? Basically I'm thinking of trac, but in general anything that would allow me to see what where the commits would be cool, withoith the need to fire up svn

[10:15] <moritz> riffraff: there should be a track interface, but it seems to be disabled :(

[10:15] <moritz> s/track/Trac/

[10:16] <moritz> riffraff: that's where the r\d+ link to

[10:17] <riffraff> the what?

[10:18] *** obvio171 joined
[10:18] <riffraff> I can0't see the link to revisions

[10:19] <moritz> I'm talking about links like this: http://moritz.faui2k3.org/irclog/out.pl?channel=perl6#id_l55

[10:19] <lambdabot> Title: IRC log for #perl6

[10:20] <moritz> the r16181 should be a link 

[10:20] <moritz> and for me it is ;)

[10:20] <moritz> but apparently feather has problems with load, and therefore trac was disabled - or something

[10:21] <riffraff> ah ok

[10:21] <riffraff> I was thinking of the one in svn.pugscode.org

[10:30] *** obvio171 joined
[10:35] *** obvio171 joined
[10:36] *** lichtkind joined
[10:40] *** obvio171 joined
[10:44] *** rfordinal_ joined
[10:44] *** obvio171 joined
[10:47] <rindolf> Hi moritz, riffraff 

[10:47] <moritz> hi rindolf ;)

[10:48] *** obvio171 joined
[10:48] <riffraff> hei rindolf 

[10:48] <rindolf> moritz: what's up?

[10:49] <rindolf> moritz: have you listened to the "Ultimate Showdown" song?

[10:49] <moritz> rindolf: yes I did, but not very intently

[10:50] <rindolf> moritz: ah OK.

[10:50] <riffraff> "this is the ultimate showdown/of ultimate destiny" ?

[10:50] <rindolf> moritz: I'm now listening to http://www.youtube.com/watch?v=JdxkVQy7QLM

[10:50] <rindolf> moritz: it's hilarious.

[10:50] <rindolf> riffraff: yes, I love it.

[10:50] <riffraff> it is very funny :)

[10:50] * moritz starts clive

[10:51] <rindolf> moritz: you can use youtube-dl

[10:51] <riffraff> it is in my top 3 videos found on internet otgether with "everyone else has had more sex then me" & "the internet is for porn"

[10:52] <rindolf> riffraff: "more sex than me" rather than "more sex then me"

[10:52] <riffraff> yep, of course

[10:52] <rindolf> riffraff: common mistake.

[10:53] *** obvio171 joined
[10:53] <moritz> rindolf: that's quite cool ;)

[10:53] <moritz> that youtube video

[10:53] <rindolf> moritz: yes. :-)

[10:54] <rindolf> riffraff: see the "Pachelbel's Rant"

[10:54] <rindolf> riffraff: have you seen the "Writing Perl using Vista's Voice Recognition"?

[10:55] <riffraff> no. I want it

[10:55] <riffraff> please :)

[10:55] <rindolf> riffraff: http://www.youtube.com/watch?v=KyLqUf4cdwc

[10:58] *** obvio171 joined
[11:01] *** chris2 joined
[11:04] *** obvio171 joined
[11:09] <moritz> rindolf: nice ;)

[11:09] *** IllvilJa is now known as IllvilJaLunch

[11:10] <rindolf> moritz: I'm glad you like it.

[11:10] *** fglock joined
[11:10] <rindolf> moritz: some other funny videos are the Klein-Four Group: http://www.kleinfour.com/

[11:11] <lambdabot> Title: The Klein Four Group

[11:11] <rindolf> I like "Finite Simple Group of Order Two" and "Just the Four Us".

[11:13] * moritz _hates_ flash

[11:13] <rindolf> moritz: they also have a plain-HTML site.

[11:14] <rindolf> moritz: but I share your sentiments regarding Flash.

[11:14] <rindolf> moritz: although I like it on Flickr.

[11:14] <moritz> rindolf: ... which is not updated anymore, since 2005 or something...

[11:14] <rindolf> moritz: it's still OK.

[11:14] <rindolf> moritz: for getting the videos.

[11:15] <moritz> rindolf: ok, I'll try that one

[11:16] <rindolf> moritz: http://www.youtube.com/watch?v=CCThtUg2zBc

[11:16] <rindolf> Hmmm... there seems to be a problem with my connection lately.

[11:21] <moritz> rindolf: together we are incredible in hijacking irc channels ;)

[11:21] <rindolf> moritz: yes.

[11:21] <rindolf> Welcome to #funny-videos

[11:22] <rindolf> Hmmm... #humour is not taken yet.

[11:22] <rindolf> Maybe #humor

[11:22] *** TimToady joined
[11:22] <moritz> maybe #perl6

[11:23] <rindolf> Hi TimToady 

[11:26] <fglock> I've got a problem with PERL6LIB x PERL5LIB, 

[11:26] <fglock> PCR-in-p6 needs a perl5 file,

[11:27] <fglock> how do I organize the distro in order to have p5 code installed in the right place?

[11:27] <fglock> assuming I'm using ext/

[11:28] <moritz> fglock: perl5/ ?

[11:28] <fglock> do I have to split the module in two?

[11:28] <fglock> s/module/distro/

[11:29] <fglock> otoh, I think I'll upload it all to perl5/

[11:30] *** renormalist joined
[11:30] <fglock> hmm - this would be ok for v6.pm, but not for pugs

[11:43] <renormalist> fglock: I'm a bit behind in understanding the mp6/kp6 projects but I want to write some words about it as part of a pugs article. Can u suggest some docs or readme or else, which explains the project?

[11:44] <renormalist> damn :)

[11:46] <moritz> renormalist: you are german, right?

[11:46] <moritz> renormalist: as a start I wrote something here: http://perl-6.de/kp6

[11:46] <lambdabot> Title: Perl 6 - kp6 - Perl 6-Compiler in Perl 6

[11:47] <renormalist> yes

[11:47] <renormalist> ah, nice, I will have a look

[11:50] <renormalist> ok, I've read it

[11:51] <renormalist> when mp6 is written in mp6, does it need another perl6, eg. the haskell based pugs for a first biitstrap step?

[11:51] <renormalist> bootstrap

[11:52] <avar> it's self-hosting

[11:52] <moritz> no, therese a perl5 version as well

[11:52] <avar> which means that you have a p6 compiler parse it and it emits p5 code that can parse itself again

[11:52] <avar> p5 can then be replaced by whatever, pir, python, ..

[11:53] <moritz> so atm only p5 really works (at least that's the last thing fglock said on that topic)

[11:53] <moritz> s/so/though/

[11:54] <avar> yep

[11:54] <avar> but if you look at the emitter for p5 and compare it to say pir you'll see that it's very easy-ish to write a new emitter

[11:55] * moritz looks

[11:56] <renormalist> so, is the p5 variant of mp6 the omnipresent v6-alpha? or do I intermix yet another thing here?

[11:56] <moritz> renormalist: that's something different....

[11:57] <moritz> renormalist: if you use 'use v6;' in a perl5 program a source filter will be called...

[11:57] <moritz> renormalist: and that one tries to execute perl6 code

[11:57] <moritz> renormalist: that's this module: http://search.cpan.org/~fglock/v6-alpha-0.016/lib/v6.pm

[11:57] <lambdabot> Title: v6 - An experimental Perl 6 implementation - search.cpan.org

[11:57] <renormalist> moritz: But it's also from fglock and looks similar in what it doesm therefore I thought it

[11:58] <moritz> renormalist: it's from fglock, sure... but afaict it's rather an interepreter than a compiler

[11:59] <renormalist> moritz: is the v6-alpha still also a relevant project or is it some kind of deprecated experiment

[11:59] <renormalist> ?

[11:59] <rindolf> Hi avar 

[11:59] <rindolf> avar: still in Iceland?

[11:59] <moritz> renormalist: afaict it's still maintained and a bit developed, but it's not aimed to be a full featured p6 implementation

[12:03] <renormalist> ok, I understand a bit more. so back to mp6 :-), if mp6 is selfhosting, how is the bootstrap chain started? with the p5 variant? so is the chain mp6-in-p5 ... mp6 ... kp6 ?

[12:04] <moritz> right

[12:05] <renormalist> ok

[12:06] <renormalist> and what's each projects goal? mp6 seems "only" to be the helper for kp6. right so far?

[12:07] <renormalist> kp6 doesn't want to be a full perl6 (at least it's name implies this), so what's it's goal? a bootstrap step for yet another perl6 implementation? the final one?

[12:08] <moritz> I think so, yes

[12:09] <moritz> but last I heard fglock was still unsure what to do with kp6

[12:09] <moritz> another option would be to incorporate STD.pm in kp6's parsing

[12:13] *** do7 joined
[12:16] <renormalist> ok, thx so far, I understand a bit more about it

[12:21] *** obvio171 joined
[12:21] <moritz> yw

[12:37] <avar> rindolf: yes

[12:38] *** obvio171 joined
[12:40] *** franck__ joined
[12:41] *** polettix joined
[12:41] *** obvio171 joined
[12:44] *** yumiko joined
[12:51] *** IllvilJaLunch is now known as IllvilJa

[12:51] *** dolmans joined
[12:51] *** iblechbot joined
[12:52] *** obvio171 joined
[12:53] <rindolf> avar: what's up?

[12:53] <rindolf> avar: I saw your email to p5p about %+ and %-

[12:53] <avar> ook

[12:58] <avar> rindolf: and?

[12:58] *** the_dormant joined
[13:01] <riffraff> someone knows the number of people with commit bit for pugs?

[13:02] <moritz> looking up...

[13:02] <integral> 314 accoridng to the htpasswd

[13:03] <moritz> but less than 220 in AUTHORS

[13:03] <riffraff> thanks

[13:03] <moritz> which means that many are probably inactive

[13:03] <integral> either way, it's pretty impressive

[13:03] <moritz> yes ;)

[13:04] <riffraff> or that people are shy and don't add themselve to AUTHORS

[13:04] * integral likes using AUTHORS as a UTF-8 test

[13:08] <riffraff> lol

[13:09] <riffraff> btw I should add myself to AUTHORS now, yay

[13:10] <moritz> of course you should ;)

[13:10] *** obvio171 joined
[13:12] *** Khisanth joined
[13:12] <svnbot6> r16187 | gabriele++ | I'm an AUTHOR too

[13:14] <moritz> all('riffraff'|'gabriele')++

[13:19] <riffraff> :)

[13:24] *** offby1` is now known as offby1

[13:46] *** [particle] joined
[13:46] *** yves joined
[13:53] *** vel joined
[13:59] *** rlb3_work joined
[13:59] *** zamolxes joined
[14:00] *** turrepurre joined
[14:06] *** rfordinal_ is now known as rfordinal

[14:17] *** bonesss joined
[14:27] *** amnesiac joined
[14:30] *** the_dormant joined
[14:41] *** jerrylee joined
[14:41] *** IllvilJa joined
[15:06] *** bonesss is now known as bonesss`out

[15:10] *** dmq joined
[15:10] *** scsibug` joined
[15:10] *** audreyt joined
[15:10] *** toshinori joined
[15:15] *** catch23 joined
[15:15] *** CindyLinz joined
[15:15] *** zamolxes joined
[15:15] *** rhr joined
[15:15] *** spinclad joined
[15:15] *** BooK joined
[15:15] *** revdiablo joined
[15:30] <yumiko>  /msg nickserv set unfiltered on

[15:30] <yumiko> space included :(

[15:33] <moritz> Spaces kill ;)

[15:33] <TimToady> space, the final frontier

[15:33] <lambdabot> TimToady: You have 1 new message. '/msg lambdabot @messages' to read it.

[15:50] <TimToady> rhr: I still don't think it makes much sense to put .fork under Pipe

[15:50] <TimToady> but yes, fork should return a Proc object

[15:50] <TimToady> as for getc, it's a bit problematic

[15:50] <TimToady> most people want it for single character input from the terminal, but it historically doesn't do that

[15:51] <TimToady> and, in fact, it won't work well for single character input if we have to wait to see whether we have a complete grapheme

[15:51] <TimToady> just because we see an 'a' doesn't mean the next codepoint won't put an accent on it.

[15:52] <TimToady> the current length of a string under the default unicode level is always .chars

[15:52] <TimToady> which always means the most abstract chars allowed in the current scope

[15:53] <TimToady> peek is not as powerful an interface as unget

[15:53] <TimToady> because you can unget things that were never there in the first place

[15:53] <TimToady> and a peek interface forces you to keep the "next token" in the IO stream rather than in a conveniently typed variable

[15:55] <TimToady> reading N bytes is not the same as sysread, because sysread explicitly has no buffering, while normal input tends to use stdio buffers

[15:56] <TimToady> if we did unify the ideas, we'd have to attach the buffering to the handle as an attribute; but that's probably a good idea anyway, and then we can throw out the sysread/syswrite variants entirely

[16:01] <TimToady> basically, to the first approximation, a binary handle works only with Buf and uses "sys" semantics, while a text handle always works in terms of Str, and assumes buffering

[16:02] <TimToady> the upshot of which is that you really can't do character-by-character input from the terminal with Str, you have to use Buf and be ready to modify the previously input character.

[16:03] <TimToady> otherwise you can't recognize a keypress till the next one comes in

[16:06] *** kanru joined
[16:12] <TimToady> j

[16:12] <TimToady> j, the final frontier

[16:12] <TimToady> bbl &

[16:22] *** justatheory joined
[16:31] *** torz joined
[16:35] *** bernhard joined
[16:37] *** VanilleBert joined
[16:45] *** bonesss`out is now known as bonesss

[16:49] *** franck__ joined
[17:13] <TimToady> @tell agentzh the other problem I noticed is that the build_info line is excessively long, with embedded \n sequences that could probably be turned into <br> at some point

[17:13] <lambdabot> Consider it noted.

[17:13] *** rindolf joined
[17:14] *** VanilleBert left
[17:18] *** IllvilJa joined
[17:18] *** SubStack joined
[17:22] *** fglock joined
[17:23] *** andara left
[17:31] *** ircmiks joined
[17:35] *** Psyche^ joined
[17:36] *** buetow joined
[17:43] *** Psyche^ is now known as Patterner

[17:52] *** ircmiks left
[17:57] *** veritos joined
[18:11] *** dakkar joined
[18:34] *** dduncan joined
[18:39] *** tewk joined
[18:52] *** qmole joined
[18:55] *** pack|pizza joined
[18:57] *** jisom joined
[18:58] *** theorbtwo joined
[19:04] *** franck__ joined
[19:31] <rhr> TimToady: re: Pipe.fork, I wasn't suggesting it as a replacement for the general fork, just p5's open "|-"

[19:32] <rhr> maybe a better way would be the ability to hand an async closure to an IO object and have it installed as a filter

[19:33] <rhr> $io.filter(async { for =<> { s/foo/bar/; .print; } })

[19:33] <rhr> and if you need something else, DIY a la C

[19:33] <qmole> hah that's beautiful

[19:34] <qmole> i love async in perl6

[19:34] <rhr> :)

[19:36] <[particle]> async io is like continuations, yes?

[19:36] <rhr> re: getc etc.  I only ever used p5 sysread to process files on disk in fixed-size chunks, the lack of buffering is more an annoyance than a feature

[19:37] <rhr> and the partial graph problem doesn't arise there.  but for tty/pipes/sockets...  io is hard, let's go shopping

[19:38] <[particle]> couldn't you use read with $/ = \some_integer_constant to get fixed-size with buffering?

[19:38] <PerlJam> [particle]: still can in perl5

[19:38] <[particle]> yeah, that's what i meant.... no reason to use sysread in that case

[19:38] <rhr> didn't think of that

[19:39] <[particle]> it might be worth looking at parrot's io pdd, but for the most part it's mum on async stuff still

[19:40] <[particle]> ...presumably it's waiting for a perl 6 spec :)

[19:41] <rhr> I never knew $/ could do that, that's interesting

[19:41] <[particle]> i've used it more than a few times

[19:41] <rhr> still not sure how that should work in p6

[19:43] <[particle]> here's parrot's docs: http://www.parrotcode.org/docs/pdd/pdd22_io.html

[19:43] <lambdabot> Title: Document parrot's I/O subsystem - parrotcode:

[19:43] <rindolf> Hi all.

[19:44] <rindolf> Can you guys help fill this - http://perl.net.au/wiki/List_of_all_known_Perl_Wikis

[19:44] <lambdabot> Title: List of all known Perl Wikis - PerlNet

[19:44] <qmole> woah. i didnt know that about $/ either

[19:46] <rhr> was it always like that?  It was several years ago that I used sysread for that

[19:46] <PerlJam> great!  we're teaching people about perl5 just in time for its obsolescence  ;-)

[19:46] <[particle]> since 5.005_03 as far as i knew

[19:46] <PerlJam> rhr: not *always*, but for many years now.

[19:46] *** araujo joined
[19:46] <qmole> heh

[19:46] <rhr> I just missed it then

[19:53] *** benny joined
[20:20] <dduncan> question: does Pugs currently support macros, or certain kinds of lexical aliasing that can make a constructor look like a function? ... I'll give a specific example of what I desire ...

[20:21] <dduncan> essentially, I have a class named Foo::Bar::Baz , and I want to have something that looks like an exportable subroutine named Baz with identical parameters which simply invokes the constructor

[20:22] <dduncan> eg, sub Baz { return Foo::Bar::Baz(); }

[20:22] <geoffb> dduncan: Text replacement macros currently work in pugs

[20:22] <dduncan> the only reason for the sub to exist is to allow user code more brevity

[20:22] <geoffb> Or at least, they did a couple hundred revs ago.  :-)

[20:23] <dduncan> but I'd prefer to save that performance hit of an extra routine call, when this is really just syntactic sugar

[20:23] <geoffb> ?eval macro blurg { 'say' } blurg "foo";

[20:23] *** evalbot_r16171 is now known as evalbot_r16187

[20:23] <evalbot_r16187> OUTPUT[␤] Bool::True

[20:23] <geoffb> hmm, I clearly have forgotten the right syntax

[20:23] <dduncan> the key thing is that we need to be able to pass arbitrary arguments, and I get the impression the existing version won't work for that

[20:24] <dduncan> mind you, this request is purely performance oriented, and it could be substituted in later

[20:24] <dduncan> meanwhile I'll just do actual subs, or have done that

[20:24] <geoffb> ?eval macro smurf($bar) { say $bar }  smurf("smurfy!")

[20:24] <evalbot_r16187> OUTPUT[smurfy!␤] Error: ␤Unexpected end of input␤expecting ":"␤Macro did not return an AST, a Str or a Code!

[20:25] <geoffb> ?eval macro smurf($bar) { 'say $bar' }  smurf("smurfy!")

[20:25] <dduncan> see ext/QDRDBMS/lib/QDRDBMS/AST.pm as an example of where I'd want to do this

[20:25] <evalbot_r16187> OUTPUT[␤] Bool::True

[20:25] <geoffb> ?eval macro smurf($bar) { 'say "$bar"' }  smurf("smurfy!")

[20:25] <evalbot_r16187> OUTPUT[␤] Bool::True

[20:25] <geoffb> grrr

[20:25] <geoffb> ?eval macro smurf($bar) { return 'say "$bar"' }  smurf("smurfy!")

[20:25] <evalbot_r16187> OUTPUT[␤] Bool::True

[20:25] <theorbtwo> ?eval macro thundercat($foo) { "say '$foo'" } thundercat("roar!")

[20:25] <evalbot_r16187> OUTPUT[roar!␤] Bool::True

[20:26] <dduncan> in fact, I don't necessarily even need a macro, just an alias ...

[20:26] <geoffb> OK, what the heck did I have wrong

[20:26] <Tene> ?eval macro bleh($bar) { return q:code { say $bar } }; bleh('foo')

[20:26] <evalbot_r16187> OUTPUT[␤] Bool::True

[20:26] <[particle]> you need to evaluate it, right?

[20:26] <theorbtwo> You returned 'say "$bar"'.  I don't know why it didn't complaign that $bar isn't defined later.

[20:26] <dduncan> eg, if it were possible to say Baz ::= Foo::Bar::Baz.new

[20:27] <dduncan> then that's all I really need, as the params are identical

[20:27] <geoffb> theorbtwo: oh, duh.  Sigh.

[20:27] <geoffb> But yes, it would have been obvious what was wrong with a proper error message

[20:44] *** Aankhen`` joined
[20:47] *** larsen_ joined
[20:48] <fglock> ?eval macro smurf($bar) { 'say "\$bar"' }  smurf("smurfy!")  # interpolate at run-time

[20:48] <evalbot_r16187> OUTPUT[$bar␤] Bool::True

[20:49] <fglock> oops :)

[20:50] <fglock> ?eval macro smurf($bar) { 'say "' ~ $bar ~ '"' }  smurf("smurfy!")

[20:50] <evalbot_r16187> OUTPUT[smurfy!␤] Bool::True

[21:02] <svnbot6> r16188 | Darren_Duncan++ | ext/QDRDBMS/ : updated the INTERFACE pod of AST.pm, QDRDBMS.pm

[21:13] *** qmole joined
[21:13] <svnbot6> r16189 | rhr++ | Add fdopen to IO.pod (stolen from parrot)

[21:26] *** namenlos joined
[21:29] *** franck__ joined
[21:29] *** kanru joined
[21:29] *** dduncan joined
[21:32] *** stevan_ joined
[21:34] *** stevan_ joined
[21:47] *** SubStack joined
[21:49] *** nperez joined
[21:57] *** scsibug`` joined
[21:57] *** rhr joined
[21:57] *** JarJarBinks joined
[21:57] *** Psyche^ joined
[21:57] *** audreyt joined
[21:57] *** Psyche^ is now known as Patterner

[21:57] *** nperez joined
[21:57] *** cognominal joined
[21:57] *** toshinori joined
[21:57] *** mj41 joined
[21:57] *** amnesiac joined
[21:57] *** catch23 joined
[21:58] *** geoffb joined
[21:58] *** edenc joined
[21:58] *** ofer joined
[21:58] *** bonesss joined
[22:17] *** Grrrr joined
[22:17] *** clkao joined
[22:17] *** lidden joined
[22:17] *** idiotmax joined
[22:17] *** bas joined
[22:17] *** wilx joined
[22:22] *** electrogeek joined
[22:22] *** larsen_ joined
[22:25] *** lichtkind joined
[22:26] *** CindyLin1 joined
[22:26] *** dmq joined
[22:26] *** catch23_ joined
[22:26] *** rhr joined
[22:26] *** autark joined
[22:26] *** cognominal joined
[22:26] *** toshinori joined
[22:26] *** ofer joined
[22:26] *** scsibug`` joined
[22:26] *** geoffb joined
[22:26] *** charsbar joined
[22:26] *** bonesss joined
[22:26] *** araujo joined
[22:26] *** kanru joined
[22:26] *** penk joined
[22:41] *** polettix joined
[22:45] *** explorer joined
[22:48] *** lumi joined
[22:54] *** edenc joined
[22:58] *** SubStack joined
[23:18] *** geoffb joined
[23:19] *** geoffb joined
[23:19] <dduncan> question: which is a preferred routine signature format:  "foo of Bar (...)" or "foo (... --> Bar)" ?

[23:20] <[particle]> i prefer 'of', but maybe grep t/ ?

[23:20] * Tene prefers 'of', but both are valid.

[23:22] <dduncan> I have been using 'of' so far, but am considering changing all my code to use the --> form instead

[23:22] <[particle]> --> seems too haskelly to me

[23:23] <dduncan> do you know if they have the same semantics?

[23:23] <[particle]> i believe they're equivalent

[23:24] <[particle]> i can't think of a case offhand where they're different

[23:24] <dduncan> from what I got out of S02, that is so

[23:24] *** geoffb_ joined
[23:24] <dduncan> that --> is another way of saying 'of', and that the caller pays attention to it

[23:24] <TimToady> --> is the "of" type, but I prefer "my Bar foo (...)"

[23:24] <[particle]> will the real geoffb please stand up?

[23:24] * geoffb_ raises his hand

[23:24] <dduncan> oh yes, there is that option too

[23:24] <TimToady> sort of the C option...

[23:25] <dduncan> I notice that the Synopsis use a variety of forms, but in my scanning, the --> seems to be the most commonly used there

[23:25] <TimToady> actually, I like the --> too

[23:25] <[particle]> i think it should point the other way

[23:25] <TimToady> I don't like my foo of Bar (...), in fact I didn't realize it was legal.  :)

[23:25] <geoffb_> [particle]: were you trying to reach me?

[23:25] <dduncan> so it sounds like 'of' is the least of the 3 favorites 

[23:25] <TimToady> but maybe I'm just not used to it.

[23:25] <[particle]> geoffb_: the signoff message said nick collision

[23:26] <geoffb_> Sigh

[23:26] <TimToady> I like the fact that --> inside the (...) implies it's officially part of the sig

[23:26] <[particle]> i like my Bar foo better than foo of Bar

[23:26] <geoffb_> I need to come up with a new nick

[23:26] <dduncan> that's why I'm thinking of movint to -->

[23:26] <geoffb_> I just like my nick to be short but transparent

[23:26] <[particle]> i_am_geoff

[23:27] <[particle]> :)

[23:27] * geoffb_ chuckles

[23:27] <Yaakov> begoff?

[23:27] *** geoffb_ is now known as i_am_geoffb_here

[23:28] <i_am_geoffb_here> awww, it truncated it

[23:28] *** i_am_geoffb_here is now known as effeff

[23:28] <dduncan> separately, I'm having trouble finding the part in the synopsis where it says how to make a method signature that says an argument or return type is the same type as the invocant object ... eg, something like $?CLASS but not that

[23:29] <[particle]> timtoady (Bar <-- Int $foo) looks better to me... it looks more like returns

[23:29] *** effeff is now known as geoff_japh

[23:30] <dduncan> personally, I like having the return type next to the routine name

[23:30] <[particle]> but that's probably my c bias: Bar my_sub(int foo)

[23:30] <geoff_japh> hmm, this might work

[23:30] <dduncan> as I prefer to name conversion functions as foo_from_bar rather than bar_from_to

[23:30] <dduncan> then the 'from' and 'to' ends are next to what they describe

[23:31] <dduncan> if <-- could be made to work in signatures, or does work, as an alternative to -->, I would probably use it

[23:31] *** geoff_japh is now known as geoffb_japh

[23:31] <geoffb_japh> or heck, just extend the old nick ...

[23:31] <[particle]> it doesn't work now

[23:31] <[particle]> geoffb_japh: :)

[23:31] <Yaakov> geoffb_japh: geophb?

[23:32] <geoffb_japh> japhb?

[23:32] <[particle]> jageoffb

[23:32] <geoffb_japh> LOL

[23:32] <dduncan> eg, I think it is easy to understand if we say: sub Foo Foo_from_Bar (Bar $arg) { ... }

[23:32] <[particle]> how do you do anon subs returning Foo?

[23:33] <dduncan> sub Foo {...}

[23:33] <[particle]> ...and taking args

[23:33] <dduncan> or sub Foo (...) {...}

[23:33] <[particle]> yeah, hrmm

[23:33] <dduncan> or you can use -> rather than sub

[23:33] <[particle]> it means Foo_from_Bar must be next to (...) though, no ws

[23:33] <[particle]> Foo_from_Bar(...) # legal

[23:33] <geoffb_japh> [particle]: I think that works best with the in-signature syntax: sub (Int $a, Int $b --> Int) { ... }

[23:33] <[particle]> but that's true now

[23:33] <dduncan> that's for invocation

[23:34] <dduncan> I'm referring to how to declare

[23:34] <[particle]> i don't think you can declare a sub foo (...) {...}, i think you must have foo(...)

[23:34] <[particle]> but maybe i'm wrong

[23:35] <dduncan> so to invoke, it looks easy to understand to have my Foo $foo = Foo_from_Bar( $bar );

[23:35] <geoffb_japh> OK, it's down to geoffb_japh, japhb, and ja_geoffb ... anyone care to vote (not that the vote is binding, I'm just curious)?

[23:35] <[particle]> i'm biased toward the third

[23:36] <geoffb_japh> I kinda like the punniness of the second one, myself

[23:37] <[particle]> go for it!

[23:37] *** geoffb_japh is now known as japhb

[23:40] *** mr_ank joined
[23:43] <TimToady> dduncan: sub (::T $a, T $b --> T) is how you capture a type 'en passant'

[23:44] <dduncan> yes, but that isn't what I wanted to know in this case

[23:44] <dduncan> I will give an example ...

[23:45] *** explorer left
[23:45] *** kunwon joined
[23:46] <TimToady> S06:1170 is the spot

[23:46] <dduncan> instead of "class Foo { method equal (Foo $other --> Bool) {...} }", I want to say something like "class Foo { method equal (::T $other --> Bool) {...} }"

[23:47] <dduncan> then I can use that same method unchanged in a varieity of classes

[23:47] <dduncan> the question is what to say instead of ::T

[23:47] <TimToady> method equal (::T $self, T $other --> Bool)

[23:47] <TimToady> method equal (::T $self: T $other --> Bool)

[23:47] <TimToady> rather

[23:47] <dduncan> oh, so the ::T is like capturing the current type?

[23:48] <TimToady> yes, that is the current notation for that within a sig

[23:48] <dduncan> okay, and actually that looks more generic than what I asked for, which is useful

[23:48] <dduncan> thank you

[23:48] <dduncan> then it works for subroutines too where there is no current class

[23:49] <TimToady> see S06:1170

[23:49] <dduncan> doing that ...

[23:52] *** zzz_reaper joined
[23:59] *** awwaiid joined
