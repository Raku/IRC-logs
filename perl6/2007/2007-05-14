[00:05] *** DarkWolf84 joined
[00:09] *** pbuetow joined
[00:47] *** nipotaway is now known as nipotan

[00:49] *** B0HR1 joined
[01:00] <jrockway> B0HR1: try to be civil, please

[01:00] <B0HR1> fuck you jrockway 

[01:00] <B0HR1> you got me banned in #perl

[01:00] <B0HR1> i'm not saying a thing in #perl6 due to my own consideration

[01:00] <Juerd> This is not #perl.

[01:00] <Juerd> If you're not here for Perl 6 stuff, please do leave.

[01:00] <B0HR1> this is not #perl.  i'm not saying anything here.

[01:01] <B0HR1> i'm a fan of anything perl

[01:01] <buu> Juerd: He was accusing people of not using perl6 because of audrey's sexuality in #perl. He was then banned.

[01:02] <Juerd> buu: Could you add some parens so I know how to read that?

[01:02] <wolverian> meh. trolls these days. no class at all.

[01:02] <Juerd> Big precedence issue there.

[01:02] <buu> Juerd: Which part is confusing?

[01:02] <jrockway> Juerd: in #perl == location of accusing, sexuality == reason for not using perl6

[01:02] <Juerd> buu: because of--relates to accusing people, or to not using perl 6?

[01:03] <jrockway> anyway, i think it would be best to drop the subject

[01:03] <Juerd> Probably

[01:03] <B0HR1> i'm not saying a thing while son of a bitch jrockway frothing his mouth

[01:03] <jrockway> the people in question don't need their time wasted with this shit

[01:03] <B0HR1> then demand civility

[01:03] <Juerd> B0HR1: You are saying things here, and frankly what you say makes me a bit angry.

[01:04] <Juerd> The way you say it isn't great either

[01:04] <B0HR1> i have to defend myself out of neccesity

[01:04] <jrockway> B0HR1: please either sit back and listen or contribute intelligently

[01:04] <jrockway> perl6 will be released faster if *you* help

[01:20] *** B0HR1 left
[01:20] <meppl> gute nacht

[01:29] <jrockway> guess he got bored :)

[01:30] *** navigator joined
[01:58] <rhr> Juerd: does feather swap much?  swapstorms could cause what you're seeing

[01:59] <rhr> processes in R or D state contribute to loadavg, you can find them with ps uaxw|grep ' [RD][ slLN<+]'

[02:00] <rhr> also, 18/sec timer tick hasn't been around for years, it's either 100, 250, or 1000Hz

[02:02] <rhr> actually they're in the process of eliminating periodic ticks altogether

[02:06] *** audreyt_ joined
[02:13] *** khisanth_ joined
[02:15] *** jisom joined
[02:16] *** araujo joined
[02:17] *** khisanth_ is now known as Khisanth

[02:27] <rhr> Juerd: anyway, next time the load spikes just do: while :; do ps uaxw|grep ' [RD][ slLN<+]'; done  (from a reniced root shell) it gives a much clearer picture than top of what's chewing cpu or getting stuck in io

[02:28] <jrockway> why in a while loop?

[02:29] <rhr> to catch things that only run for a little while, top misses a *lot*

[02:29] <jrockway> ah, i see

[02:30] <jrockway> i might have to run that on our work dev server, which routinely has load averages of 3000-5000 for no apparent reason

[02:31] <rhr> wow

[02:31] <jrockway> (other than 60 developers with their own apache + huge mod_perl app)

[02:38] *** ggoebel joined
[02:44] *** araujo joined
[02:45] <Khisanth> jrockway: lots to short lived processes?

[02:45] <jrockway> no idea

[02:45] <jrockway> fortunately i am not a sysadmin, so i get to complain without trying to fix the problem ;)

[02:46] <jrockway> the sysadmins are uber-incompetent, that's probably the problem

[02:46] <jrockway> we have a huge app that uses no CPAN modules because apparently the sysadmins didn't know how to setup CPAN (and admittedly the early developers weren't that bright either)

[02:46] <jrockway> now we just copy the CPAN modules into our app because the sysadmins won't install them

[02:46] <jrockway> (etc.)

[02:46] <jrockway> it's painful

[02:46] <Khisanth> things seem to crawl even at 10, I don't think I would have the patience for 3000

[02:47] <jrockway> it sucks at 3000

[02:47] <jrockway> even at 1 it's terribl

[02:47] <jrockway> it takes about 15 seconds to load a static page

[02:47] <Khisanth> I can tolerate 2 :)

[02:47] <jrockway> imagine how fun the debugging cycle is (with no unit tests of course)

[02:47] <Khisanth> I think we are living in the same world :)

[02:47] <jrockway> i'm trying to move everything to my workstation; much easier

[02:47] <Khisanth> well mine is slightly better!

[02:48] <jrockway> unfortunately that has to be windows because we have a dumbass VPN at work

[02:48] <jrockway> they go out of their way to make it impossible to write good software, sadly

[02:48] * jrockway <-- slightly bitter

[02:48] <Khisanth> s/slightly/much/

[02:48] * Khisanth is playing around with Catalyst :)

[02:50] <Khisanth> I guess you aren't using that for work? Catalyst and no modules seem like a match made in Hell

[02:51] <jrockway> yeah, we use mason

[02:51] <jrockway> it's basiclly PHP with perl syntax

[02:51] <jrockway> very depressing

[02:51] <Khisanth> it almost sounds like we work for the same company :)

[02:51] <jrockway> i unfortunately started programming professionally right when frameworks were becoming popular, so i never really experienced the horrors of "web 1.0" websites

[02:52] * jrockway is performics / doubleclick (now google)

[02:52] <Khisanth> I don't think Mason is that terrible, I mean you don't HAVE to mix stuff like that ...

[02:52] <jrockway> right

[02:52] <jrockway> we're trying to factor things out into modules

[02:52] <jrockway> but everyone is very junior and just plain can't program

[02:53] <jrockway> (not everyone, but the bulk of people that write code everyday)

[02:53] <buu> jrockway: Come play with us

[02:53] <buu> We're way cooler.

[02:54] <Khisanth> impossible, you're there!

[02:54] <jrockway> Khisanth: ah, but people that know how to program have meetings all day

[02:54] <jrockway> plus i have to work against the coworkers that don't know how to program

[02:54] <jrockway> it sort of sucks

[02:54] <Khisanth> that makes no sense at all do they really enjoy the meetings?

[02:55] <jrockway> i don't understand meetings

[02:55] <jrockway> imagine spending 2 hours talking about what day to have a "test driven development" training session

[02:55] <jrockway> uh oh that paves the way for a new rant

[02:56] <jrockway> so a few weeks ago we paid some consultant to come in and talk about TDD

[02:56] <Khisanth> I thought you said there were not unit tests?

[02:56] <jrockway> i'm getting there :)

[02:56] <Khisanth> s/not/no/

[02:56] <jrockway> i capitalized on the "testing excitement" and said "we can't do TDD if nobody knows that Test::More is"

[02:56] <jrockway> so for the next 3 weeks, we're having training for all perl devs to learn how to test

[02:56] <jrockway> which is great

[02:57] <jrockway> unfortunately

[02:57] <jrockway> this week the guy is coming back to teach us how to write tests

[02:57] <jrockway> except he only knows java

[02:57] <jrockway> and none of the devs here even know what a test is

[02:57] <jrockway> can you say, poor planning?

[02:57] <jrockway> *sigh*

[02:57] <Khisanth> this sounds very confusing

[02:57] <Aankhen``> Ouch.

[02:58] <jrockway> mangement thinks that paying some consultant will magically write tests for us

[02:58] <Khisanth> only if you are paying the consultant to write tests!

[02:58] <jrockway> i say we should learn the syntax first, and then tweak our skills after we've gotten some experience with Test::* and friends

[02:58] <jrockway> Khisanth: exactly, we're not :)

[02:58] <jrockway> he is providing small-group training sessions

[02:59] <jrockway> training = "here's how i would test your code"

[02:59] <jrockway> it's really going to be a nightmare since all of our logic is in mason

[02:59] <jrockway> and we have a homegrown ORM

[02:59] <Aankhen``> Double ouch.

[02:59] <jrockway> which ... uh ... i'm not even going to comment on

[02:59] <jrockway> it's really weird

[02:59] <jrockway> most of the developers have never heard of "refactoring"

[02:59] <jrockway> they don't know that programmers NEVER cut-n-paste

[03:00] <jrockway> i guess... nobody ever told them that?

[03:00] <jrockway> it's scary.

[03:00] <jrockway> i'm mostly sticking around to accumulate capital for a consulting company or something :)

[03:02] <jrockway> google just bought us, which could be good... but C++/Java/python suck pretty hard... *sigh*

[03:04] <Khisanth> C++ and Java? I guess it's not so bad that I have no chance of getting hired by Google :)

[03:05] <jrockway> google is not that great

[03:05] <jrockway> they don't pay very well

[03:05] <jrockway> you're stuck in a cube all day

[03:05] <jrockway> the code is a mess

[03:05] <jrockway> it's pretty depressing, i'm told

[03:05] <Khisanth> that does sound inferior to current situation

[03:05] <jrockway> (i won't know for another few months)

[03:05] <jrockway> cubes suck for developers... worst idea ever

[03:05] <Khisanth> which isn't really bad :)

[03:06] <Khisanth> just slightly messy code

[03:11] <jrockway> i think the key to good code is working someplace where all the software is haskell or lisp :)

[03:11] <jrockway> people that write bad code don't tend to be interested in those langauges :)

[03:15] *** perlDreamer joined
[03:24] *** thoughtpolice joined
[03:25] <rhr> ?eval sub baz(Code $x, *@y) { $x.(@y) } baz { say @^x } , 1, 2, 3

[03:25] *** evalbot_r16281 is now known as evalbot_r16282

[03:25] <evalbot_r16282> OUTPUT[123␤] Bool::True

[03:26] <rhr> TimToady: it looks to me like Perl-6.0.0-STD.pm doesn't allow the space before the , there, is that right?

[03:26] <rhr> i.e. it has to be unspace?

[03:27] *** weinig joined
[03:27] <rhr> ?eval sub baz(Code $x, *@y) { $x.(@y) } baz { say @^x }\ , 1, 2, 3

[03:27] <evalbot_r16282> Error: ␤Unexpected ","␤expecting "."

[03:32] <rhr> in fact, shouldn't I need a ; before I call the sub?

[03:33] <rhr> or \n

[03:38] <spinclad> heh. that does look like { $x.(@y) } is taken as the last arg of &sub; i expect that's how it's parsed; le'me see if that's what the synopses say.

[03:41] <rhr> how is S04:167 implemented in Perl-6.0.0-STD.pm? agentzh++

[03:43] <rhr> the endlist part of token block allows anything, no?

[03:55] <spinclad> yes, S04:167 applies, in that C< sub ... {...} baz ... > is two terms in a row.

[03:55] <spinclad> i think you're right, there.

[03:56] <rhr> yep, I'll trust S04 here

[03:58] *** araujo joined
[04:08] *** araujo joined
[04:11] *** penk joined
[04:11] *** dduncan joined
[04:11] *** stevan_ joined
[04:17] *** offby1` joined
[04:26] <svnbot6> r16283 | rhr++ | Add tests for space/unspace after blocks

[04:47] *** audreyt_ is now known as audreyt

[04:58] *** offby1` is now known as offby1

[05:05] *** BooK joined
[05:14] <svnbot6> r16284 | agentz++ | [docs/feather/script]

[05:14] <svnbot6> r16284 | agentz++ | - niced all the shell commands demanded by Juerd++

[05:17] *** amnesiac joined
[05:23] *** lisppaste3 joined
[05:50] <rhr> ?eval sub named_array2(:@x, @y) { (+«@x, 42, +«@y) }; named_array2(:x, :x)

[05:50] *** evalbot_r16282 is now known as evalbot_r16284

[05:50] <evalbot_r16284> Error: Missing required parameters: @y

[05:50] <rhr> should the second :x bind @y to (:x), or is it an error?

[05:52] <rhr> I'll write the test assuming it should succeed, let me know if that's wrong...

[05:57] *** rfordinal joined
[05:59] <rhr> ?eval sub named_array2(:@x, @y) { (+«@x, 42, +«@y) }; named_array2(1, 2)

[05:59] <evalbot_r16284> (42, 1)

[06:00] <rhr> is that what it's supposed to do?

[06:15] <svnbot6> r16285 | agentz++ | [docs/feather/script]

[06:15] <svnbot6> r16285 | agentz++ | - more nice :)

[06:27] <svnbot6> r16286 | rhr++ | Add tests for foo(:x, :x) and foo(:x, (:x)) type stuff

[06:29] <rhr> @tell TimToady could you check the tests marked XXX in t/blocks/sub_named_params.t for correctness?  thanks!

[06:29] <lambdabot> Consider it noted.

[06:31] <Juerd> rhr: Reniced root shell isn't even needed; the box stays responsive!

[06:32] <Juerd> rhr: But thanks a lot for the hint!

[06:32] <Juerd> rhr: And nope, it doesn't swap at all. Once it starts swapping, it's just half an hour away from dieing

[06:34] <rhr> good to hear it's doing better :)

[06:36] <Juerd> Killing idle pugs processes helped

[06:36] <Juerd> I don't know if the constant sigalrms they had, or something else, kept the system boiling

[06:37] <Juerd> But it wasn't visible on any of my radars (top, vmstat, iostat, dstat)

[06:37] <Juerd> Yet killing them did help instantly

[06:38] <rhr> yeah, I'm not surprised to hear that was the problem

[06:39] <Juerd> I'm partially surprised

[06:39] <rhr> things can get synchronized so they always run when top's alseep, so you never see them

[06:39] <Juerd> You'd think a performance should show up somewhere, as cpu load, or as io load

[06:40] <Juerd> But the box could be 85% idle and still be slow.

[06:40] <Juerd> s/performance/performance problem/

[06:40] <rhr> cpu load is very hard to calculate accurately...

[06:40] <Juerd> And smart people like audreyt and some people over in #haskell said it wasn't the problem, and that it was benchmarked before

[06:41] *** agentzh joined
[06:41] <Juerd> Hi agentzh 

[06:41] <Juerd> agentzh: Thanks for nicing your processes

[06:41] <agentzh> Juerd: hi, now only cp and cd are not nice'd.

[06:41] <lambdabot> agentzh: You have 1 new message. '/msg lambdabot @messages' to read it.

[06:41] <agentzh> :)

[06:42] <agentzh> in case you think there is a need...

[06:42] <Juerd> agentzh: You could just have used a single wrapper :P

[06:42] <Juerd> I don't think there is

[06:43] <agentzh> right, from cron table.

[06:43] <Juerd> e.g.

[06:46] *** iblechbot joined
[06:48] <Juerd> audreyt: Please nice evalbot, svnbot, and svk (if only at "1", that's better than "0")

[06:49] <audreyt> Juerd: please nice them for me

[06:49] <svnbot6> r16287 | agentz++ | update-syn - no longer nice individual commands, we now nice the whole script from cron.

[06:49] <Juerd> audreyt: o

[06:49] <Juerd> audreyt: ok

[06:50] *** franck__ joined
[06:51] <audreyt> I had niced them at 20 before but apparently missed that from the prev start

[06:51] <audreyt> so 20 is just fine

[06:51] *** gugod joined
[06:52] * agentzh uses 5.

[06:53] <Juerd> 5, 10, 20, as long as non-interactive processes don't get 

[06:53] <Juerd> <= 0, it's fine :)

[06:53] <Juerd> 20 may be a bit overkill

[06:53] * agentzh grins.

[06:53] <dduncan> audreyt, haven't read you here in awhile ... how are things in general with you?

[06:54] <audreyt> dduncan: family health issues has been dominoeing

[06:54] <audreyt> so did not get much hack cycle

[06:54] <dduncan> that's unfortunate ... I hope the health issues improve

[06:55] <audreyt> they shall... I'm again @hospital atm

[06:55] <audreyt> so will have to run in a bit

[06:55] <dduncan> is it just other family members, or are you also unwell?

[06:55] <Juerd> Does anyone have tuits to implement http://manuals.textdrive.com/read/book/8 on feather?

[06:56] <lambdabot> Title: Running Trac on TxD |

[06:56] <audreyt> aside from sleep deprivation and mild depression I think I'm doing rather well

[06:56] <audreyt> also, hacking on 6.28.0 local branch helps

[06:56] * audreyt is atm fixing the long-standing "$_ is not truly lexical" problem

[06:56] <dduncan> that part's good, at least

[06:57] <audreyt> yeah :)

[06:57] <agentzh> audreyt: take care :)

[06:57] <audreyt> will do :)

[06:59] <dduncan> please keep us appraised regularly as you can or is appropriate

[06:59] <Tene> Juerd: can you give a name/description to the task instead of that url?

[07:00] <Juerd> Tene: Implement tracd and proxy apache2 to it

[07:00] <audreyt> dduncan: will try to do better at this regard :)

[07:00] <Juerd> trac currently uses cgi scripts, which are slow

[07:00] <Juerd> Which is very noticeable in http://dev.pugscode.org/

[07:00] <lambdabot> Title: Pugs - Trac

[07:02] <Tene> Hmm.  Doesn't look too bad.

[07:06] <Tene> I've never worked with trac before, though.

[07:07] <Tene> Juerd: I could manage an hour or so of tuits right now.

[07:08] <Juerd> Tene: Great

[07:08] <Juerd> Tene: What's your feather login?

[07:09] <Tene> I don't have an account on feather.

[07:13] <Juerd> Let's get you one

[07:14] <Tene> 'tene' is preferred.

[07:14] <Juerd> Could you email your realname and preferred login to [email@hidden.address]
[07:14] <Tene> I will.

[07:15] <Tene> sent

[07:20] <Juerd> Tene: You've got mail

[07:20] <agentzh> wow, load average on feather drops to 1.02 :)

[07:21] <Tene> wtf you're right!  are you spying on my inbox?!

[07:21] <rhr> t/operators/precedence.t is saying "Test header seen more than once!"  does anyone know what that's about?

[07:21] <Juerd> Tene: Oops. Pretend I said nothing.

[07:22] <agentzh> rhr: TAP headers like "1..10"?

[07:22] <rhr> agentzh: I don't understand

[07:23] <agentzh> @google TAP

[07:23] <lambdabot> http://www.flytap.com/

[07:23] <lambdabot> Title: TAP Portugal

[07:23] <agentzh> sigh

[07:24] <agentzh> rhr: you're running prove6?

[07:24] <rhr> yup

[07:24] <agentzh> try prove6 -v t/.../.t ?

[07:24] <rhr> that's what I'm running

[07:25] <agentzh> it supports the -v option?

[07:25] <rhr> yes

[07:25] <Juerd> @google test anything

[07:25] <lambdabot> http://search.cpan.org/dist/Test-Harness/lib/Test/Harness/TAP.pod

[07:25] <lambdabot> Title: Test::Harness::TAP - Documentation for the TAP format - search.cpan.org

[07:27] <agentzh> rhr: there's an extra 1..10 at the end of the TAP output.

[07:27] <agentzh> sorry, i mean "1..42"

[07:27] <rhr> yeah, where is that coming from?

[07:27] <rhr> I see it when I run it with pugs

[07:27] <agentzh> rhr: have you planned the test number?

[07:27] <rhr> yeah, the plan is correct

[07:28] <rhr> I don't see anything in the .t that should print that

[07:28] <agentzh> looking

[07:28] <rhr> let me commit some fixes first...

[07:30] <rhr> look at r16289, it doesn't parsefail

[07:30] <agentzh> k

[07:32] * rhr kicks svnbot

[07:34] *** rfordinal joined
[07:37] <agentzh> it's interesting

[07:38] <Juerd> ?eval 1+1

[07:38] *** evalbot_r16284 is now known as evalbot_r16288

[07:38] <evalbot_r16288> 2

[07:39] <Tene> Juerd: what user should tracd run as?

[07:40] <agentzh> rhr: debug Test.pm?

[07:40] * agentzh currently doesn't have a good machine.

[07:40] <Juerd> Tene: The user that used to execute the cgi, so you don't have to change permissions, or a new user of your choice, if you don't mind digging up which permissions need to be changed

[07:40] <rhr> it must be Test.pm:306

[07:40] <agentzh> rhr: nod

[07:41] <agentzh> $Test::num_of_tests_planned should have been set by sub plan, but in case it has been destroyed by the tests or...

[07:42] <rhr> yeah, but I don't see anything that could clobber it..

[07:42] <Tene> Juerd: any preference on the port it should run on?

[07:42] <agentzh> rhr: add a warn statement to Test.pm:306 ?

[07:43] <agentzh> not sure if it helps.

[07:43] <Juerd> Tene: < 7000

[07:43] <Tene> kk

[07:45] <rhr> agentzh: what kind of warning?  not sure what you mean

[07:45] <rhr> is sub proclaim what gets run for each test?

[07:47] <agentzh> yes

[07:47] <rhr> k

[07:49] <rhr> strange, adding 

[07:49] <Tene> Juerd: do you know what domain name trac wants for its realm?

[07:50] <rhr> warn "XXX "~$Test::num_of_tests_run~"\n" to proclaim shows it stays defined

[07:50] <Juerd> Tene: dev.pugscode.org

[07:50] <agentzh> rhr: adding debugging code to proclaim may help tracing $Test::num_of_tests_planned's value.

[07:50] <rhr> what else happens after all the tests are run?

[07:50] <rhr> agentzh: that's what I just did :)

[07:51] <agentzh> rhr: the END block triggers.

[07:51] <agentzh> rhr: that's what END is for. :)

[07:51] *** DarkWolf84 joined
[07:51] *** DarkWolf84 is now known as OmegaKO

[07:52] <rhr> it's still 49 in END

[07:52] <rhr> very strange

[07:53] <agentzh> rhr: what if at the beginning of sub test_ends?

[07:53] <agentzh> i mean the sub body

[07:54] <agentzh> and it could be a bug in the defined builtin ;)

[07:54] <rhr> yup, it's still 49 inside test_ends

[07:54] <agentzh> then write a test for defined?

[07:54] <rhr> how come this doesn't affect other tests!?!?

[07:55] <agentzh> maybe defined dislikes 49?

[07:55] * agentzh shrugs

[07:55] <agentzh> or ! or if..

[07:55] <agentzh> you can trace further :)

[07:56] <rhr> I'm stumped

[07:57] <agentzh> anyway

[07:59] <rhr> ok, 16290 commits a fix that I don't understand at all

[08:00] <agentzh> svnbot6 is not here, hence r16290

[08:02] <agentzh> heh, it looks funny :)

[08:02] <agentzh> rhr: write specific test for it?

[08:02] <agentzh> (as long as you can reproduce it in a new context)

[08:03] <rhr> I'll try, I haven't been able to reproduce yet

[08:03] *** lichtkind joined
[08:03] <agentzh> rhr++ # locating a subtle bug

[08:06] <rhr> ?eval module XXX; my $x=2; if(!defined($XXX::x)) { say "wtf" }

[08:06] *** evalbot_r16288 is now known as evalbot_r16289

[08:06] <evalbot_r16289> OUTPUT[wtf␤] Bool::True

[08:06] <rhr> that's it

[08:07] <agentzh> my?

[08:07] <Juerd> $Foo::bar can refer to lexicals?

[08:07] * agentzh doesn't think so.

[08:08] <Juerd> Then why would it be defined?

[08:08] <rhr> no, that's not it

[08:08] *** buetow joined
[08:09] <agentzh> it's "$Test::num_of_tests_planned;" in Test.pm:18

[08:09] <rhr> I honestly have no idea

[08:10] <agentzh> ?eval module Foo; $Foo::x; $Foo::x = 49; if ! defined($Foo::x) { say "oops" }

[08:10] <evalbot_r16289> undef

[08:11] <agentzh> it's much more complicated to reproduce than i thought. :(

[08:12] * rhr agrees

[08:12] <agentzh> ?eval module Foo; $Foo::x; sub bar { $Foo::x = 49; } bar(); if(!defined($Foo::x)) { say "oops" }

[08:12] <evalbot_r16289> undef

[08:12] <lichtkind> le

[08:13] * agentzh gives up.

[08:13] <agentzh> maybe we should call bar() from another namespace. who knows?

[08:14] <agentzh> or it may be a bug related to yaml precompilation.

[08:14] <rhr> I'll add some more comments to Test.pm describing what's wrong

[08:14] <agentzh> audreyt once said the yaml compilation stuff had some peculiarities.

[08:14] <Tene> Juerd: potential problem.  you still around/

[08:14] <Tene> ?

[08:14] <agentzh> rhr: you have precompiled Test.pm to yaml, right?

[08:16] <agentzh> the last bug i found in Test.pm in last summer was that END {} did not trigger at the exit time.

[08:16] <agentzh> and it was related to yaml precompilation.

[08:18] <Tene> @tell Juerd tracd uses a literal 'md5crypt' to check passwords in the htpasswd file.  Patching tracd to recognize the '{SHA}' sequence in the htpasswd file is an option?

[08:18] <lambdabot> Consider it noted.

[08:19] <rhr> agentzh: yes, I'm precompiling.  let me try without...

[08:19] <agentzh> rhr: cool

[08:20] <Tene> @tell Juerd python-support/trac/trac/web/auth.py:268

[08:20] <lambdabot> Consider it noted.

[08:21] <Juerd> Tene: Certainly an option, please document it

[08:21] <lambdabot> Juerd: You have 2 new messages. '/msg lambdabot @messages' to read them.

[08:21] <rhr> I still get a 1..49 not precompiled

[08:21] <agentzh> rhr: okay

[08:21] <Juerd> Tene: Consider sending the patch to the trac people, there are probably more who would benefit from this hack

[08:21] *** BooK joined
[08:21] <rhr> I changed config.yml and did make, that's all I needed to do, right?

[08:22] <agentzh> rhr: no

[08:22] <rhr> what else?

[08:22] <agentzh> rhr: remove .yml in blib6/lib/

[08:22] <rhr> k

[08:22] <agentzh> or move them to other places.

[08:22] <agentzh> in case there are more...a find -name *.yml may help.

[08:22] <agentzh> or *.yaml

[08:23] <agentzh> another way is use -I or set the env.

[08:23] <agentzh> *to use

[08:23] <agentzh> the latter is easier :)

[08:24] <Tene> Okay, it looks like I get to learn python tomorrow.

[08:24] <rhr> ok, I did find blib6/lib -name '*.yml' -exec rm {} \; make and I still get a 1..49

[08:25] <agentzh> it runs much slower, is it?

[08:25] <rhr> can't tell, it's a very fast machine

[08:25] <agentzh> k

[08:25] <Tene> Juerd: looks like there are three instances of trac libraries installed on feather (locate auth.py), which should I modify, or should I make a new copy elsewhere?

[08:26] <rhr> should I do a make realclean to be sure?

[08:26] <agentzh> rhr: one tip: bundle the old buggy Test.pm to t/ and write a test for it.

[08:26] <Juerd> Tene: I have no idea which one(s) is/are in use

[08:26] <rhr> good idea

[08:26] <Juerd> Tene: Perhaps audreyt knows

[08:30] *** elmex joined
[08:30] <Tene> http://dev.pugscode.org:6543/trac/ -- runs fine, just can't log in

[08:30] <lambdabot> Title: Pugs - Trac

[08:31] <Tene> I'll look into it tomorrow.  Sleep now.

[08:37] <agentzh> rhr: morning or afternoon in your place?

[08:38] <rhr> agentzh: err... 4:40am, but I woke up "today" at 9pm

[08:38] <rhr> my sleep schedule is busted lately...

[08:38] <agentzh> rhr: oh

[08:39] <agentzh> rhr: lambdabot told me it was 4:39 and i was shocked.

[08:39] <rhr> :)

[08:40] <rhr> after a realclean and fresh make I still get a 1..49

[08:40] <agentzh> rhr: okay, time to write a test for the buggy Test.pm :)

[08:41] <rhr> what' the easiest way to run a different Test.pm?

[08:41] <agentzh> rename it?

[08:41] <agentzh> then use it?

[08:41] <agentzh> that way you can't get confused yourself :)

[08:41] *** dduncan left
[08:42] <rhr> do I need to make a new ext/Test-bug and s/Test/Test-bug/ everywhere within?

[08:42] <agentzh> rhr: ext/ is not the right place for Test-bug

[08:42] <agentzh> rhr: t/ is.

[08:43] <rhr> ok.  does anything special need to be done to load a module from t/?

[08:43] <agentzh> t/xx-uncategorized, maybe.

[08:44] <agentzh> use t::blah::Foo?

[08:44] <agentzh> not sure.

[08:44] <agentzh> in perl 5, we can write use lib 'blah/blah'; or use blah::blah::Foo

[08:44] *** IllvilJa joined
[08:45] <agentzh> or write a .t which does a system call.

[08:46] <rhr> I'll give it a try and see what foes wrong :)

[08:46] <agentzh> system "$*EXCUTABLE_NAME -It/path/to/buggy/test-pm t/some/test.pl" or something like that.

[08:46] <rhr> *goes

[08:46] <agentzh> rhr++

[08:47] *** the_dormant joined
[08:49] <rhr> hold on, I re-fixed Test.pm but I still got a 1..49 so it must still be using a precompiled one somehow...

[08:49] <agentzh> ah

[08:50] <agentzh> rhr: use the following command:

[08:50] <agentzh>  ./pugs -Iext/Test/lib t/operators/precedence.t

[08:52] <agentzh> rhr: it works on feather and i didn't see the "1..14" stuff at the bottom.

[08:53] <rhr> ok, hold on, I just started another fresh make... I had removed Test.pm from precompile_modules:, now I'm trying precompile_prelude: false

[08:54] <agentzh> rhr: well, i believe you needn't do that...it's a bit overkill ;)

[08:54] <rhr> but it must have been getting precompiled... or my fix no longer works?

[08:55] <agentzh> it works on my side.

[08:55] <agentzh> (my side == feather)

[08:56] <rhr> yeah, I noticed the last smoke before mine at r16273 didn't show the problem

[08:57] <rhr> mine was r16286

[08:58] <agentzh> rhr: there is a trick to prevent using the wrong version of Test.pm

[08:58] <agentzh> cd t

[08:58] <agentzh>  ../pugs -I../ext/Test/lib operators/precedence.t

[08:59] <rhr> [106 of 112] almost there :)

[08:59] <agentzh> rhr: how long does your smoke take?

[08:59] <agentzh> 6 min?

[09:00] <rhr> ~6.5 min

[09:00] <agentzh> wow, a dual-core machine?

[09:00] <rhr> 2xdual core xeon 3GHz

[09:01] <agentzh> aha, mine is core2duo 2.4GHz, but it's at home.

[09:01] <rhr> ok, ../pugs -I../ext/Test/lib operators/precedence.t shows no 1..49 now

[09:01] <agentzh> rhr: nice

[09:02] <rhr> and the unfixed gets no 1..49 either!

[09:03] <agentzh> we need a tool that can updates Test.pm.yml.

[09:03] <rhr> so it must be precompile

[09:03] <agentzh> rhr: are you using the proper -I ?

[09:04] <agentzh> or you're updating the same Test.pm?

[09:05] <rhr> same command as before

[09:05] <agentzh> okay, another yaml precompilation nit. :)

[09:05] <agentzh> maybe gaal or audreyt or lumi or other haskell people can fix it soon

[09:05] <rhr> yep, I haven't made a copy of Test.pm yet

[09:05] <rhr> so a test won't show the bug :(

[09:06] <rhr> unless it's precompiled somehow

[09:06] <agentzh> rhr: save a copy of Test.pm and leave a note there.

[09:07] <rhr> I'll leave the old code in the comments

[09:07] <agentzh> when someone has the tuits to do some haskell hacking, direct him/her there. :)

[09:07] <rhr> k

[09:08] <agentzh> rhr: preferrably a whole copy since others may update Test.pm and change the context

[09:09] <agentzh> well, it's just a suggestion

[09:09] * agentzh goes to supper &

[09:09] *** agentzh left
[09:13] <rhr> wait a minute...when it was precompiled, I was able to insert debugging code in Test.pm and it was run, but the bug was still there

[09:14] <rhr> and my change fixed the bug...so..WTF?!

[09:14] * rhr cries in his soup

[09:16] *** zamolxes joined
[09:39] *** bloonix joined
[09:43] <rhr> ok, I re-enabled precompiling for Test.pm and did a realclean in the hope that the bug was a one-off cosmic ray-type fuckup, and we could all just forget this ever happened

[09:43] <rhr> but the bug is back

[09:46] <rhr> this time editing Test.pm to re-enable my fix doesn't fix it, which is expected with precompiling

[09:47] <rhr> so WTF was happening at the beginning of this fiasco?

[09:49] <rhr> but ./pugs -Iext/Test/lib t/operators/precedence.t gets the fix as expected

[09:49] <rhr> ./util/prove6 -v t/operators/precedence.t sees the bug again

[09:50] <rhr> and that's what I was using at the beginning

[09:53] * rhr gives up for the 3rd or 4th time

[10:00] *** ddwagnz joined
[10:04] <audreyt> prove6 uses the pugs in path

[10:04] <audreyt> and hence will use the installed Test.pm.yml

[10:04] <audreyt> usually in sitelib

[10:06] <rhr> makes sense

[10:08] <rhr> what's confusing is that when I was first debugging I wasn't using -I or anything, but I was able to insert debug statements that worked

[10:09] <rhr> later testing seemed to show that the bug only occured when precompiled, but that doesn't jive with the above in any way

[10:11] <audreyt> gotcha.

[10:11] <rhr> it's too weird for my little brain

[10:12] * audreyt is still backlogging

[10:12] *** svnbot6 joined
[10:13] <audreyt> ok, I think I get it

[10:14] <audreyt> can you do a pugs -V and rm -rf the sitelibs and see if it occurs again?

[10:17] <rhr> I never did make install, so there's no /usr/local/share/perl6, if that's what you mean

[10:17] <audreyt> ok. do this:

[10:17] <audreyt> find . | grep Test.pm.yml

[10:17] <audreyt> in the pugs path

[10:17] *** araujo joined
[10:17] <audreyt> and see if there's more than one

[10:17] <rhr> ./blib6/lib/Test.pm.yml

[10:17] <rhr> that's it

[10:18] <rhr> rm it?

[10:18] <audreyt> yeah. "make blib6/lib/Test.pm.yml" can recreate it

[10:18] <audreyt> but rm it for now and see of prove6 agrees with command line

[10:18] <audreyt> *see if

[10:20] <rhr> prove6 doesn't show the bug now

[10:20] <audreyt> good. now make that .yml

[10:20] <audreyt> and then run prove6 again

[10:20] <audreyt> and see if it reoccurs

[10:20] <rhr> k

[10:21] <rhr> bug's back

[10:21] <audreyt> ok, so it's precomp bug. you've commited all local changes?

[10:21] <audreyt> it's known that precompilation can't deal with closures, nor END blocks

[10:21] <audreyt> it's also fixed here ;)

[10:21] <rhr> yes, no local changes

[10:22] <rhr> did you ever see the bug?

[10:22] <audreyt> ./pugs -Iblib6/lib t/operators/precedence.t

[10:22] <audreyt> try that?

[10:22] <audreyt> (with .yml intact)

[10:22] <rhr> bug is present

[10:22] <audreyt> ok, so it's not mysterious

[10:23] <rhr> ok, I must have screwed something up

[10:23] <audreyt> my local branch does not exhibit the bug with precomped Test.pm.yml

[10:23] *** ddwagnz left
[10:23] <audreyt> so I think the best course of action for me is simply to get some food, continue hacking tonight

[10:23] <rhr> nobody has seen it but me...

[10:23] <audreyt> and pushback ASAP :)

[10:23] <rhr> audreyt++

[10:25] <audreyt> afk, bbl

[10:27] <rhr> ohhh, I'm an idiot! I was (of course) doing makes after my edits with the debugging, that's why it worked

[10:28] <rhr> no mystery indeed

[10:30] *** ruoso joined
[10:36] <rhr> thought of something.  let me try a build in my 32bit chroot

[10:42] *** xern joined
[10:52] *** the_dormant joined
[10:57] *** nferraz joined
[11:00] *** penk joined
[11:05] <rhr> hmm, nope.  bug is still present in 32bit build

[11:08] *** chris2 joined
[11:09] <svnbot6> r16293 | rhr++ | Update comments in Test.pm; bug wasn't quite as mysterious as thought

[11:20] *** bonesss joined
[11:35] *** ggoebel joined
[11:40] *** nipotan is now known as nipotaway

[11:47] *** rindolf joined
[12:02] *** ggoebel joined
[12:02] *** fglock joined
[12:03] *** polettix joined
[12:13] *** kanru joined
[12:14] *** penk joined
[12:26] *** the_dormant joined
[12:53] *** nferraz joined
[13:29] *** agentzh joined
[13:29] <agentzh> heh, glad to see audreyt speaking here :)

[13:31] <agentzh> @tell Aankhen`` could you take a look at that load event handler when you have the tuits? it's indeed running 10+ or even 20+ times during a single loading. (location.hash = '...' is not the cause)

[13:31] <lambdabot> Consider it noted.

[13:32] *** fglock joined
[13:32] *** weinig joined
[13:37] *** araujo joined
[13:38] *** stevan_ joined
[13:41] *** DarkWolf84 joined
[13:41] *** agentzh left
[13:55] *** [particle] joined
[13:59] <moritz> re

[14:21] *** kanru joined
[14:30] *** shafire joined
[14:30] <shafire> hi

[14:30] <shafire> when will be perl6 avialable?

[14:31] <masak> shafire: by christmas.

[14:31] <moritz> shafire: we don't know which christmas, though ;)

[14:32] <masak> a better question would perhaps be: what would it take for it to be this christmas?

[14:32] <moritz> if you prefer a more serious answer: hopefully next year ;) 

[14:32] <moritz> masak: a miracle? *SCNR*

[14:32] <shafire> Haskell?

[14:33] <moritz> well, that's one step

[14:33] <moritz> but we want an offical perl6 implementation in perl6

[14:33] <masak> shafire: I like that :)

[14:33] <moritz> so one possibilty is to finish pugs, and then reimplement it in perl6

[14:33] <moritz> shafire: do you want a commit bit?

[14:43] *** REPLeffect joined
[15:04] *** polettix joined
[15:06] *** rindolf joined
[15:16] *** ifnotwhynot joined
[15:17] <ifnotwhynot> hello

[15:18] <moritz> hi

[15:24] <ifnotwhynot> hi moritz

[15:25] <ifnotwhynot> are you the perl of the ocean?

[15:25] <moritz> ifnotwhynot: no, I'm just a grain of sand at its shores ;)

[15:26] <ifnotwhynot> oneday you will be a perl, its only time

[15:26] <ifnotwhynot> is this the perl elite on mirc or just general chat?

[15:27] <[particle]> yes

[15:28] <moritz> ifnotwhynot: "this" is just a channel for perl 6 development - partly perl "elite", partly not

[15:28] <PerlJam> Anyone who uses perl is elite if you ask me :)

[15:28] <[particle]> mostly not :)

[15:28] * moritz certainly isn't elite, just an interested user ;)

[15:28] *** chris2 joined
[15:29] <moritz> PerlJam: only if you compare it to PHP ;)

[15:29] <[particle]> ifnotwhynot: wanna help implement perl 6? be a member of the perl elite?

[15:29] <[particle]> GET A COMMIT BIT NOW!!!

[15:29] <[particle]> free, for a limited time only*

[15:30] <[particle]> *until the heat death of the universe

[15:31] <ifnotwhynot> anyone want to help a perldummy(description- thought perl is pruduced by mother nature)

[15:31] <PerlJam> ifnotwhynot: We'll help with perl 6 problems but your best bet for perl 5 problems is to try #perl or #perlhelp etc.

[15:32] <moritz> #perlhelp is better than #perl for that matter, propably ;)

[15:33] <ifnotwhynot> thx let me go bug them rather

[15:34] *** rio_41de joined
[15:35] *** shafire left
[15:50] *** jjore-w joined
[15:50] *** the_dormant joined
[15:53] *** rhandom joined
[15:54] *** perlDreamer joined
[16:00] <masak> moritz: re larry quote "everyone wants the semicolon" -- you do indeed have it wrong: it was not the semicolon but the colon, and it was about everyone wanting to use it as part of new syntax for some proposed feature for perl6 during the RFC phase

[16:00] *** marmic joined
[16:01] *** buetow joined
[16:01] <moritz> masak: ok, thanks

[16:09] <rhandom> I do like the semi-colon/period analogy though.  When I say semi-colon - you don't need to try and parse if the things that come next were in someway part of the current sentences.  It imposes finality.

[16:10] <rhandom> I think with a well written recursive grammar they could be made optional - but at the loss of syntax errors for other common errors.

[16:11] <[particle]> foo($a) if $b == 3 bar($c)

[16:12] <moritz> rhandom: how on earth could you decide if 'foo bar' means 'foo() bar()' or 'foo(bar())'?

[16:12] <[particle]> er... foo($a) if $b == 3 { bar($c) }

[16:12] <rhandom> you can't disambiguate all cases

[16:12] <[particle]> right

[16:12] <[particle]> i'm agreeing, with code :)

[16:13] <[particle]> perl 6 tries to disambiguate everything

[16:13] <moritz> rhandom: but then intuitivity suffers

[16:13] <rhandom> A year ago I wrote a TT3 (Template Toolkit) parser - in TT3 semi-colons on continued statements are optional. 

[16:13] <rhandom> However,

[16:13] <rhandom> they are required if you need to disambiguate a post-operative directive which is the same thing as a statement modifier

[16:14] <rhandom> So I do have a working, recursive TT3 grammar, that works without semi-colons - but you can use them as well.

[16:15] <moritz> but is it worth the effort to do that for perl6? 

[16:15] <rhandom> Some cases you can't disambiguate without a semi-colon - but in those cases it would fall to the longest token rule.

[16:15] <rhandom> Which is what the TT3 grammar does.

[16:16] <rhandom> The foo($a) if $b == 3 { bar($c) } would be a parse error

[16:16] <rhandom> because foo($a) if $b==3 was the longest token

[16:16] <moritz> but { bar($c) } is allowed in "normal" code

[16:16] <rhandom> you then found a bare block - which I guess isn't an error - but would instead run straight away

[16:17] <rhandom> so like I said - you "could" optionally not require them - but at the loss of valuable syntax errors

[16:17] <rhandom> that catch errors when you actually want them too.

[16:17] <rhandom> By saying could, I don't mean that Perl 6 should make them optional

[16:17] <rhandom> I'm more a fan of having them there

[16:18] <moritz> rhandom: but then 'if' would nearlly always be parsed in the form "$statement if $cond"

[16:18] <moritz> even when it's followed by a block

[16:18] <rhandom> right - and in the TT grammar - you MUST put a semi-colon in that case

[16:18] <moritz> ok

[16:18] <rhandom> the case that you don't want it to be a post-operative directive

[16:20] <rhandom> I personally prefer having the lines end with semicolons, or periods, or braces - it is a simple way to disambiguate that I don't really mean for anything else to follow.

[16:21] <moritz> same for me

[16:23] *** veritos joined
[16:25] <perlDreamer> How do I get my SVN password reset?

[16:26] <perlDreamer> I'm coming up on some spare time during $dayJob, and I'd like to work on the test suite.

[16:26] *** fglock joined
[16:27] <moritz> perlDreamer: I hope I can do it via commitbit

[16:28] <moritz> if it would only answer...

[16:28] <moritz> damned, I though feather's performance problems were mostly solved

[16:29] <veritos> it's been taking me ~15s to open a shell

[16:30] *** franck__ joined
[16:31] <moritz> perlDreamer: I just sent the POST request to reset/resend your password

[16:31] <perlDreamer> ++moritz.  Thank you very much.

[16:32] <perlDreamer> It will be nice to hack for a project that appreciates tests again

[16:32] <moritz> hopefully it will arrive before it times out

[16:32] <moritz> oh yes, we do ;)

[16:32] <moritz> and parrot does as well ;)

[16:32] <perlDreamer> will it email me with instructions?

[16:32] <moritz> I think so

[16:33] <moritz> if not, you can ask again

[16:33] <perlDreamer> that's cool, I heard the test suite is supposed to be broken out into its own distribution for cross-project use.

[16:33] <moritz> well, the perl6 test suite currently is a bit pugs specific, and there is work going on to amend that

[16:33] <[particle]> perlDreamer: that's a bit off

[16:33] <[particle]> moritz is right

[16:34] <moritz> and perl6 on parrot ("not onion") and perhaps kp6 might use parts of it

[16:35] <perlDreamer> what is kp6?

[16:35] *** rodi joined
[16:35] <moritz> perlDreamer: fglock++'s perl6 implementation in perl6

[16:35] <moritz> uhm, in miniperl6 that is

[16:35] <[particle]> "kinda-perl 6"

[16:35] *** azawawi joined
[16:36] <[particle]> kp6 is a subset of perl 6, built on mp6 (a smaller subset of perl 6)

[16:37] <perlDreamer> so it bootstraps like lisp then

[16:37] <moritz> its in v6/v6-KindaPerl6/ in the pugs repository

[16:37] <moritz> s/its/it's/ # english--

[16:38] <[particle]> perlDreamer: yes

[16:44] <moritz> can somebody else please try to reinvite perlDreamer? my http proxy has fairly strict timeouts :(

[16:45] <[particle]> trying now

[16:45] <moritz> now it worked

[16:45] <[particle]> okie

[16:46] <TimToady> @massages

[16:46] <lambdabot> rhr said 10h 17m 27s ago: could you check the tests marked XXX in t/blocks/sub_named_params.t for correctness? thanks!

[16:51] *** justatheory joined
[16:51] *** ashleyb joined
[16:55] *** thepler joined
[16:58] *** ifnotwhynot left
[16:59] <TimToady> @tell rhr You're running into trouble with those tests because they're based on an illegal declaration.  Arguments are allowed in any order, but parameters are not.  Positionals must always be declared before named parameters.  See S06:581 and S06:619.

[16:59] <lambdabot> Consider it noted.

[17:02] <ingy> hola

[17:02] <ingy> TimToady: sorry for telespamming you the other day

[17:03] <ingy> that was really weird

[17:03] <ingy> I was so confused for a minute

[17:03] *** kanru joined
[17:03] <rhr> oops, I had thought I remembered reading that it was legal but ill-advised.  obviously not, I'll fix

[17:03] <lambdabot> rhr: You have 1 new message. '/msg lambdabot @messages' to read it.

[17:03] <rhr> @moosages

[17:03] <lambdabot> TimToady said 3m 56s ago: You're running into trouble with those tests because they're based on an illegal declaration. Arguments are allowed in any order, but parameters are not. Positionals must

[17:03] <lambdabot> always be declared before named parameters. See S06:581 and S06:619.

[17:07] <azawawi> ?eval say "hello!";

[17:07] *** evalbot_r16289 is now known as evalbot_r16293

[17:07] <evalbot_r16293> OUTPUT[hello!␤] Bool::True

[17:09] *** rhandom left
[17:09] *** rhandom joined
[17:13] <rhr> TimToady: still a question.  I've changed the sub to named_array2(@x, :@y), what should named_array2(:y, :y) do?

[17:13] <svnbot6> r16294 | lwall++ | allow \h* between block and comma/colon

[17:13] <TimToady> fail for lack of a positional

[17:13] <rhr> k

[17:14] <TimToady> also fixed your block vs comma question

[17:17] <rhr> TimToady++

[17:17] <svnbot6> r16295 | rhr++ | Fixes to t/blocks/sub_named_params.t

[17:24] <moritz> perlDreamer: did the mail arrive?

[17:24] <svnbot6> r16296 | rhr++ | Fix comma/colon after block in arglist tests

[17:24] <perlDreamer> Yes, all 4 of them :).  Thanks, moritz.

[17:24] *** the_dormant joined
[17:24] <moritz> perlDreamer: ok, then olny the response timed out, not the request. I had no way of telling which one did ;)

[17:35] *** ozo joined
[17:41] *** kunwon1 joined
[17:45] *** b_jonas joined
[17:48] *** Psyche^ joined
[17:53] *** veritos joined
[17:55] *** kunwon1 joined
[17:58] *** sreeram joined
[18:05] *** Psyche^ is now known as Patterner

[18:07] *** IllvilJa joined
[18:07] *** sreeram_ joined
[18:08] *** sreeram_ is now known as sreeram

[18:08] *** bernhard joined
[18:11] *** edenc joined
[18:35] *** oceanlab joined
[18:35] *** justatheory joined
[18:50] *** jisom joined
[18:51] *** penk joined
[18:55] *** japhb joined
[19:01] *** drupek12 joined
[19:08] *** ludan joined
[19:28] *** explorer joined
[19:42] *** dduncan joined
[19:42] *** edenc joined
[19:42] *** kanru joined
[19:46] *** polettix left
[19:50] *** Aankhen`` joined
[20:05] *** kanru joined
[20:08] *** bonesss joined
[20:09] *** REPLeffect joined
[20:13] *** veritos joined
[20:18] *** as joined
[20:37] *** rhandom left
[20:38] *** bonesss is now known as bones`cochilo

[20:59] *** edenc joined
[21:01] *** ruoso joined
[21:03] *** justatheory joined
[21:04] *** justatheory_ joined
[21:05] *** qmole joined
[21:05] *** the_dormant joined
[21:05] *** SubStack joined
[21:08] *** justatheory_ joined
[21:28] <Tene> Hmm.  Are there still microgrants available?

[21:29] <moritz> I didn't hear of any more being used up

[21:29] <moritz> so you'd have a good chance

[21:29] <Tene> Looks like I'll be suddenly unemployed soon.

[21:40] <perlDreamer> Are all of the tasks in t/TASKS up to date and still valid?

[21:42] <[particle]> tene: yes, there's still a pile of money waiting

[21:44] *** mr_ank joined
[21:50] *** buetow joined
[21:50] *** catch23_ is now known as catch23

[22:02] <Aankhen``> ?eval "\n".say

[22:02] *** evalbot_r16293 is now known as evalbot_r16296

[22:02] <evalbot_r16296> OUTPUT[␤␤] Bool::True

[22:03] *** larsen_ joined
[23:09] *** justatheory joined
[23:11] *** Limbic_Region joined
[23:13] *** stef__ joined
[23:17] <Limbic_Region> anyone know where audreyt's presentation(s) are available for direct download - http://perlmonks.org/?node_id=615432

[23:17] <lambdabot> Title: Re^2: What's wrong with Perl 6?

[23:22] <wolverian> Limbic_Region, doesn't google video let you download?

[23:23] <moritz> just use ``clive -y $youtube_url''

[23:23] <moritz> damned, wrong one

[23:25] <moritz> which presentation exactly?

[23:28] <Limbic_Region> wolverian - if you read the note, there was a reason google video was suboptimal

[23:29] <moritz> http://vp.video.google.com/videodownload?version=0&secureurl=uAAAANE1IIWUNnNJ5VHY3QS-0TbsngSO89baaJ0qYWJvwqk7X-XYIhdkeEoySFfwPyjkb3EmQQNBFD4K5l1x9SUpk4-KrMF27WNcmoQXhQODyxpmzLXOpduRGh48AEHDGvnN6XskFbQNI985HEC49rMTUGjOxPM9dHKfm-voSCoxAZQTpVeXy9CHDwUR1-y7kAfXuZ9UUxwl0rcL3Ym9Hi0H9lGBUTKM5chvC0xSKQDr1MbiSZmf3IlJpcWo4kPDDZfKIg&sigh=nhqOt7vXWUYWESUT3Fr9ZwLzN-8&begin=0&len=3360900&docid=-3876155376103839772&messagesUrl\u003dhttp://video.google.com/FlashUiStrings.x

[23:29] <lambdabot> http://vp.video.google.com/videodownload?version=0&secureurl=uAAAANE1IIWUNnNJ5VHY3QS-0TbsngSO89baaJ0qYWJvwqk7X-XYIhdkeEoySFfwPyjkb3EmQQNBFD4K5l1x9SUpk4-KrMF27WNcmoQXhQODyxpmzLXOpduRGh48AEHDGvnN6XskFbQ

[23:29] <lambdabot> NI985HEC49rMTUGjOxPM9dHKfm-voSCoxAZQTpVeXy9CHDwUR1-y7kAfXuZ9UUxwl0rcL3Ym9Hi0H9lGBUTKM5chvC0xSKQDr1MbiSZmf3IlJpcWo4kPDDZfKIg&sigh=nhqOt7vXWUYWESUT3Fr9ZwLzN-8&begin=0&len=3360900&docid=-3876155376103839

[23:29] <lambdabot> 772&messagesUrl\u003dhttp://video.google.com/FlashUiStrings.x

[23:29] <Limbic_Region> that worked out well

[23:30] <moritz> sorry about that

[23:30] <Limbic_Region> besides, this isn't for me but for a monk on perlmonks

[23:30] <Limbic_Region> replying there will help him and many more

[23:30] <moritz> the link is "perl 6 today"

[23:30] <moritz> and too damned long :(

[23:31] * Limbic_Region wanders off

[23:32] <offby1> whatever happened to lambdabot's magical tiny-url-ification?

[23:33] <lumi> It gave up in disgust?

[23:34] <moritz> perhapos tinyurl doesn't handle URLs that long ;)

[23:34] <lumi> That's what I said! :)

[23:35] <moritz> http://tinyurl.com/ypuwv5

[23:37] *** mr_ank joined
[23:51] *** IllvilJa joined
[23:56] *** edenc joined
