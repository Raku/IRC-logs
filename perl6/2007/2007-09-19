[00:00] *** justatheory joined
[00:03] *** eosp joined
[00:06] *** theorb joined
[00:06] <eosp> hey...i came up with a new control structure that seems amusing. http://pastebin.ca/702665

[00:06] <buubot> eosp: The paste 702665 has been copied to http://erxz.com/pb/4412

[00:08] <eosp> seems a bit Tcl-inspired, even though i haven't actually done much tcl.

[00:09] *** eosp left
[00:13] *** r0bby is now known as r0bbyarrr

[00:14] *** r0bbyarrr is now known as r0bby

[00:15] *** r0bby is now known as r0bbyarrr

[00:17] *** theorbtwo left
[00:22] *** r0bbyarrr left
[00:23] *** bsb left
[00:24] *** bsb joined
[00:24] *** Caelum joined
[00:27] *** devogon_ left
[00:34] *** Psyche^ joined
[00:37] *** kanru left
[00:37] *** kanru joined
[00:42] *** platypus joined
[00:50] *** weinig left
[00:51] *** nipotaway is now known as nipotan

[00:51] *** Patterner left
[00:51] *** Psyche^ is now known as Patterner

[00:55] *** Schwern joined
[00:59] *** thoughtp1lice left
[01:01] *** lyokato joined
[01:02] *** polettix joined
[01:03] *** polettix is now known as poletti

[01:04] *** poletti left
[01:06] *** dduncan left
[01:09] *** mncharity joined
[01:24] *** weinig joined
[01:37] *** theorb left
[01:39] *** jhorwitz left
[01:40] *** Caelum left
[01:43] *** Caelum joined
[01:44] *** Schwern left
[01:52] *** kanru left
[02:01] *** vel joined
[02:02] *** ashleyb left
[02:08] *** justatheory left
[02:20] *** Partizx joined
[02:30] *** weinig left
[02:39] *** Caelum is now known as Caelum_beard

[02:44] *** araujo joined
[02:46] *** weinig joined
[02:47] *** weinig left
[02:47] *** weinig joined
[02:49] *** kanru joined
[03:04] *** elmex joined
[03:08] *** Caelum_beard is now known as Caelum

[03:14] *** nipotan is now known as nipotaway

[03:20] *** elmex_ left
[03:38] *** amnesiac joined
[04:06] * PerlJam just sent off a perl6 micro-grant proposal.

[04:06] <PerlJam> We'll see how it goes.

[04:21] *** justatheory joined
[04:37] *** auro_ joined
[04:46] <platypus> PerlJam: What is if for?

[04:46] <PerlJam> an article on perl6 regex

[04:47] * platypus nods and looks forward to its approval and my reading it.

[04:48] <PerlJam> as part of my proposal I said that I'd vet the article on #perl6, so people here will be the first to read it  :)

[04:50] * platypus nods

[04:52] *** c9s joined
[05:04] *** REPLeffect joined
[05:20] *** devogon joined
[05:24] *** Ashizawa joined
[05:28] <pugs_svnbot> r17915 | azawawi++ | [runpugs] added support for iceweasel/debian to TESTING

[05:28] <pugs_svnbot> r17915 | azawawi++ | [runpugs] port mod_perl2/apache2/mod_deflate task to TODO

[05:28] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17915

[05:28] <lambdabot> Title: Changeset 17915 - Pugs - Trac

[05:38] *** cognominal_ left
[05:55] *** REPLeffect_ joined
[05:56] *** REPLeffect left
[05:56] *** c9s left
[05:56] *** REPLeffect_ is now known as REPLeffect

[06:04] *** kanru left
[06:06] *** amnesiac left
[06:09] *** REPLeffect_ joined
[06:16] *** auro_ left
[06:17] *** nipotaway is now known as nipotan

[06:18] *** moritz__ is now known as moritz_

[06:23] *** REPLeffect_ left
[06:23] *** REPLeffect left
[06:34] *** justatheory left
[06:43] *** marmic left
[06:46] *** kane_ joined
[06:47] *** marmic joined
[06:49] *** dduncan joined
[06:54] *** iblechbot joined
[06:58] *** rfordinal left
[07:02] *** BinGOs joined
[07:02] *** rfordinal joined
[07:11] *** penk joined
[07:13] *** Grrrr left
[07:14] *** Grrrr joined
[07:14] *** DarkWolf84 left
[07:18] *** pdcawley joined
[07:29] *** jisom joined
[07:34] *** pdcawley left
[07:53] *** cognominal_ joined
[07:53] *** cognominal_ left
[07:53] *** cognominal_ joined
[08:07] *** ting joined
[08:07] *** ting__ left
[08:09] *** Aankhen`` joined
[08:11] *** franck___ joined
[08:14] *** hkb_zz is now known as hakobe

[08:15] *** hakobe is now known as hkb_lab

[08:18] *** cognominal_ left
[08:28] *** autin joined
[08:37] *** mj41 joined
[08:39] *** theorbtwo joined
[08:47] *** Blwood joined
[08:48] *** IllvilJa left
[08:48] *** elmex_ joined
[08:48] *** elmex left
[09:05] *** jisom left
[09:12] *** nekokak joined
[09:30] *** nekokak_ left
[09:42] *** kanru joined
[09:46] *** dduncan left
[09:55] *** Southen joined
[10:10] *** drrho joined
[10:12] *** autin left
[10:17] *** ruoso joined
[10:26] *** cognominal_ joined
[10:30] *** ft left
[10:34] *** ft joined
[10:35] *** rindolf joined
[10:39] <ruoso> fglock_, where is the gather/take specs?

[10:42] <fglock_> hmm - not sure, there is Perl6::Take and Perl6::Gather in cpan

[10:42] *** rindolf left
[10:43] <ruoso> fglock_, found it... S04

[10:48] <ruoso> fglock_, why are we going through coroutines to implement gather/take?

[10:49] <ruoso> isn't it doable just with a "local @*GATHER_LIST_OF_TAKES" and "@*GATHER_LIST_OF_TAKES.push"?

[10:49] <ruoso> I mean 

[10:49] <ruoso> I understand that it may be lazy

[10:49] <fglock_> because it looks a bit like coro/yield

[10:49] <ruoso> but do we need it to be lazy right now?

[10:50] <fglock_> yes, because it is used in STD

[10:50] <ruoso> the lazyness is used?

[10:51] <fglock_> i think it is used in the desugared version

[10:51] <ruoso> hmmm

[10:52] * ruoso . o O (does that mean that side-effects are syncronized by the lazyness of gather/take?)

[10:52] * ruoso fears...

[10:53] <ruoso> TimToady, ping

[10:56] *** Blwood left
[10:57] <allbery_b> @localtime TimToady

[10:57] <lambdabot> Local time for TimToady is Wed Sep 19 05:57:05 2007

[10:57] <ruoso> oops

[10:57] <allbery_b> thought it might be a bit early :)

[11:01] <ruoso> fglock_, I've just looked at the STD related files

[11:01] <ruoso> and it doesn't seems to depend on the lazyness

[11:02] *** drrho left
[11:04] *** hkb_lab_ joined
[11:04] *** hkb_lab_ left
[11:04] <fglock_> i think it works the other way, desugared STD doesn't use lazy gather because it's not properly implemented

[11:05] *** hkb_lab_ joined
[11:07] *** ferreira joined
[11:07] *** iblechbot left
[11:07] *** IllvilJa joined
[11:11] *** hkb_lab left
[11:13] *** lyokato left
[11:20] *** lidden joined
[11:21] *** lidden left
[11:23] *** pmurias joined
[11:23] *** ruoso left
[11:24] *** penk left
[11:25] *** nipotan is now known as nipotaway

[11:25] *** ruoso joined
[11:28] <moritz_> PerlJam++

[11:29] * moritz_ is going to have a talk on P6 regexes at the 10th German Perl Workshop (if they want it)

[11:43] <pmurias> whats does _PLUSf mean in src/perl6/Cursor.pm

[11:43] <pmurias> _PLUSg is greedy, _PLUSr is ratchet, am i right?

[11:48] *** iblechbot joined
[11:49] *** flokuehn joined
[11:50] <pmurias> fglock_: where should i put a function which print the call stack from perl6 perspective

[11:50] <pmurias> something like carp

[11:50] <moritz_> pmurias: something like caller?

[11:50] *** Blwood joined
[11:50] <pmurias> is GLOBAL::print_backtrace ok?

[11:50] *** sunnavy left
[11:51] <pmurias> moritz_: it could be implemented in terms of caller

[11:51] <moritz_> pmurias: is caller implemented in kp6?

[11:51] <ruoso> moritz_, nope

[11:52] <pmurias> not yet ;)

[11:52] <ruoso> the problem is that kp6 today depends too much in p5 contexts

[11:52] <ruoso> so it would be actually hard to implement it

[11:53] *** vel left
[11:53] <ruoso> and also, the ast is not keeping source code information

[11:55] <ruoso> but this should be simpler to solve

[11:58] <pmurias> ruoso: one could implement caller in terms of perl5 caller

[12:01] <ruoso> what would that be usefull for?

[12:01] <ruoso> almost everything would be in MOP.pm line 35

[12:01] <ruoso> which is the DISPATCHER 

[12:02] <fglock_> pmurias: GLOBAL::carp ?

[12:03] <pmurias> fglock_: k

[12:04] <pmurias> carp is not speced

[12:04] <fglock_> i'm reading through http://library.readscheme.org/page8.html

[12:04] <lambdabot> Title: Compiler Technology/Implementation Techniques and Optimization

[12:05] <pmurias> it's a lot of stuff

[12:05] <ruoso> hmmm

[12:05] <ruoso> kp6-mp6 is failing compilation

[12:06] <ruoso> when I try a forcerecompile

[12:08] <pmurias> re carp: the amount of diagnostics die prints is probably implementation specific

[12:10] <pmurias> we probably need a namespace for internal subroutines like match_p5rx

[12:14] *** flokuehn left
[12:15] *** Blwood left
[12:16] *** Blwood joined
[12:18] <pugs_svnbot> r17916 | pmurias++ | [kp6] primitive longmess

[12:18] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17916

[12:18] <lambdabot> Title: Changeset 17916 - Pugs - Trac

[12:20] *** cmarcelo joined
[12:21] <ruoso> fglock_, I had to add $::Array and $::Hash prototypes in MOP.pm

[12:21] <ruoso> to do a forcerecompile

[12:21] <ruoso> just as there were for $::Signature and $::Signature::Item

[12:22] <fglock_> ruoso: makes sense, it is starting to be more circular

[12:22] *** Ashizawa left
[12:22] <ruoso> this is an important bootstrap aspet

[12:22] <ruoso> s/aspet/aspect/

[12:23] <ruoso> we need to define which classes needs a runtime backend prototype to bootstrap

[12:26] <ruoso> or maybe just splitting this classes as Class_Prelude and Class_Complete

[12:26] <ruoso> to be loaded in sequence

[12:26] <fglock_> we can just declare all protos

[12:26] <fglock_> the circularity fixes itself if we allow method redefinition

[12:27] <ruoso> we don't need to, if we break the class definitions in two steps

[12:28] <fglock_> but each backend will provide different predefined features

[12:28] <pugs_svnbot> r17917 | ruoso++ | [kp6] fixed typo in Runtime/Perl6/Grammar and forcerecompiled... 

[12:28] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17917

[12:28] <lambdabot> Title: Changeset 17917 - Pugs - Trac

[12:29] <ruoso> hmmm... after the force recompile some other tests start to fail

[12:29] <ruoso> the junction tests

[12:29] <fglock_> ruoso: lunch?

[12:30] <ruoso> yep... 

[12:30] <ruoso> and we have yet another deep recursion in kp6-kp6

[12:30] * ruoso *sigh*

[12:30] <avar> yes, forcerecompile breaks everything as I pointed out $earlier

[12:30] <ruoso> avar, fixed that already

[12:30] <ruoso> with prototypes declaration

[12:31] <ruoso> lunch &

[12:40] *** ahmadz joined
[12:40] *** mj41 left
[12:45] *** Blwood left
[13:09] <fglock_> b

[13:17] *** jhorwitz joined
[13:18] *** drupek1253 left
[13:28] *** TJCRI joined
[13:31] <fglock_> is anyone here familiar with Scheme?

[13:33] * moritz_ not really

[13:34] <[particle1> don't tell me you want to implement scheme on kp6?

[13:34] *** [particle1 is now known as [particle]

[13:34] <moritz_> I learned it in school, but not in depth

[13:34] <moritz_> [particle]: perhaps use its VM as a backend ;)

[13:34] <moritz_> just a guess, though ;)

[13:35] *** Partizx left
[13:35] <fglock_> moritz_: yes

[13:45] <avar> fglock_: common lisp would be more practical as a backend, you could use cl-ppcre and stuff like that

[13:45] <avar> and there are a lot more VMs for CL

[13:46] <[particle]> sure, there's one on parrot :) kea-cl

[13:46] <fglock_> re familiar: i mean, do we have lisp hackers around?

[13:47] *** ahmadz_ joined
[13:47] <fglock_> [particle]: nice

[13:48] <fglock_> avar: hmm - can we reuse the object system?

[13:48] <avar> [particle]: sure there is:)

[13:49] <avar> fglock_: I'd be interested in hacking on a CL emitter, started doing one for kp6 the other day but didn't get anywhere with it:)

[13:50] <avar> fglock_: I'm not familiar enough with clos and the perl6 object system, but a lot of it could be reused probably

[13:50] <avar> fglock_: CLOS is very flexible, and it's written in CL itself so you can replace it

[13:51] *** TJCRI left
[13:51] <fglock_> avar: i'd like to try it out, do you have some code already?

[13:51] <avar> not really:)

[13:51] <fglock_> which compiler do you use? (i'm on osx)

[13:51] *** TJCRI joined
[13:51] <avar> (no)

[13:52] <avar> I recommend clisp or sbcl, clisp is easier for testing since it's more script-like, sbcl is a CL->machine code compiler

[13:53] <Aankhen``> SBCL is a much better choice, except that its Windows support leaves something to be desired…

[13:53] <Aankhen``> And CLISP has weird licensing issues.

[13:53] <Aankhen``> Both CLISP and SBCL can create native executables.

[13:53] <fglock_> aren't they source-code compatible?

[13:53] <avar> they both implement common lisp, but that's like saying "I implement C" :)

[13:54] <Aankhen``> :-)

[13:54] <avar> implementations differ in subtle ways

[13:54] <Aankhen``> Especially since things like sockets aren't in the spec.

[13:54] <avar> and some things aren't std, like threads, so sbcl has its own thread mechanism

[13:54] <Aankhen``> Aye.

[13:54] <Aankhen``> CLISP just doesn't support threading.

[13:54] <Aankhen``> CLISP has better Unicode support and better Windows support, AFAIK.

[13:54] <avar> http://www.cliki.net/Common%20Lisp%20implementation

[13:54] <lambdabot> Title: CLiki : Common Lisp implementation

[13:55] <Aankhen``> SBCL has threads and a very advanced type-inferencing compiler.

[13:56] <avar> Yes the compiler is better, but I find clisp more comfortable for some stuff, like running random .lisp files

[13:56] <avar> it fits better into a perl(1) like workflow as opposed to a gcc(1) or ghc(1) like workflow IMHO

[13:56] <Aankhen``> How so?

[13:57] <fglock_> looking

[13:57] <pugs_svnbot> r17918 | ruoso++ | [kp6] removed print from GLOBAL.pm

[13:57] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17918

[13:57] <lambdabot> Title: Changeset 17918 - Pugs - Trac

[13:57] <avar> Quicker compile times and some stuff you run on it is snappier, stumpwm is faster on clisp for some reason

[13:58] <avar> and clisp has a much lower resource hit, sbcl takes ~30MB of memory usually

[13:58] <avar> fglock_: One thing that helps alternate emitter backends a lot is writing more stuff in p6, like Perl6/Match.pm 

[13:59] <ferreira> God, I am going to hate MovableText after my experiences at ONLamp.

[13:59] <fglock_> avar: we are working on that :)

[13:59] <avar> fglock_: I know:)

[14:00] <ferreira> Sometimes I change something and then accessing the previous URL gives me a MySQL database error :/ It fixes after some nonsense/useless changes

[14:00] <moritz_> ferreira: sorry for the off-list mail, that wasn't intentional

[14:01] <moritz_> is that some fancy ajax stuff?

[14:01] * avar dreams of developing perl 6 in slime:)

[14:02] <fglock_> slime?

[14:02] <avar> common lisp IDE for emacs, it's awesome:)

[14:02] <ferreira> moritz_: I haven't noticed it was off-list. Because I am used to add the p6l list because Gmail don't help me.

[14:02] *** cognominal_ left
[14:02] <moritz_> ferreira: ok ;)

[14:03] <moritz_> I'd expect gmail to have 'reply to list' button :/

[14:03] <[particle]> moritz_: upper right on the message body

[14:03] <fglock_> hmm - we need a more efficient way to support multiple backends; recompiling all of kp6 is not fun

[14:04] <Aankhen``> avar: That'd have to be SPIME, wouldn't it? :-P

[14:04] <Aankhen``> And we'd need a PIME first.

[14:05] <fglock_> avar: i'll try to compile a hello-World and see how it goes

[14:05] <ruoso> fglock_, we need to split what's core and what's other features

[14:05] <ruoso> probably taking things from lib/ to lib-modules/

[14:06] * avar cheers fglock_ on

[14:06] *** ahmadz left
[14:06] <avar> ruoso: You mean moving ::Runtime:: stuff?

[14:06] <ruoso> probably creating a lib-backend

[14:06] <ruoso> too

[14:06] <ruoso> or something like that

[14:10] <avar> copying the backend files around is not taking up time, it's just a copy operation

[14:11] <avar> not that segregating stuff wouldn't be a good idea ...

[14:11] <pugs_svnbot> r17919 | fglock++ | [kp6] cp EmitPerl5 EmitLisp 

[14:11] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17919

[14:11] <lambdabot> Title: Changeset 17919 - Pugs - Trac

[14:13] <fglock_> looking for how to create a Str in CLOS

[14:14] <fglock_> google thinks 'CLOS' is 'close'

[14:14] <avar> mockup of blib/ plans: http://sial.org/pbot/27575 http://sial.org/pbot/27576

[14:15] <lambdabot> Title: Paste #27575 from Someone at 208.78.101.240

[14:15] <avar> (defpackage Str) ?

[14:15] <avar> hrm, or defclass?

[14:15] * avar rusty

[14:17] <Aankhen``> (defclass perl6-string () ())

[14:17] <Aankhen``> That'll create a new, pretty useless class.

[14:20] <pugs_svnbot> r17920 | ruoso++ | [kp6] %*ENV{"KP6_TOKEN_DEBUGGER"} turns on printing of the tokens it enters... new test recursing

[14:20] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17920

[14:20] <lambdabot> Title: Changeset 17920 - Pugs - Trac

[14:22] *** vel joined
[14:22] <pugs_svnbot> r17921 | ruoso++ | [kp6] more specific on the failing test

[14:22] <pugs_svnbot> r17922 | ruoso++ | [kp6] more specific on the failing test

[14:22] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17922

[14:22] <lambdabot> Title: Changeset 17922 - Pugs - Trac

[14:22] *** sunnavy joined
[14:23] *** sunnavy left
[14:24] *** sunnavy joined
[14:27] *** ahmadz_ left
[14:27] <pugs_svnbot> r17923 | ruoso++ | [kp6] p5 token not working as expected

[14:27] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17923

[14:27] <lambdabot> Title: Changeset 17923 - Pugs - Trac

[14:28] <ruoso> pmurias, please take a look at the grammar/14 test

[14:28] <pugs_svnbot> r17924 | ruoso++ | [kp6] added more tests to grammar/14

[14:28] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17924

[14:28] <lambdabot> Title: Changeset 17924 - Pugs - Trac

[14:36] *** rindolf joined
[14:36] <pugs_svnbot> r17925 | ruoso++ | [kp6] p5 tokens offer debug too...

[14:37] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17925

[14:37] <lambdabot> Title: Changeset 17925 - Pugs - Trac

[14:39] *** sunnavy_ joined
[14:41] *** sunnavy left
[14:41] *** sunnavy_ left
[14:41] <fglock_> i'm probably missing a couple (hundred) things - this doesn't work ( DEFCLASS Str (STRING) () )

[14:41] *** sunnavy joined
[14:41] *** sunnavy left
[14:42] *** jhorwitz left
[14:43] *** jhorwitz joined
[14:44] *** sunnavy joined
[14:48] <bloonix> ll

[14:50] <avar> fglock_: http://sial.org/pbot/27577

[14:50] <lambdabot> Title: Paste #27577 from Someone at 208.78.101.240

[14:51] <avar> so (defclass Str () (string)) (setf instance (make-instance 'Str)) ...

[14:51] *** Blwood joined
[14:51] <avar> fglock_: http://cl-cookbook.sourceforge.net/clos-tutorial/index.html

[14:51] <lambdabot> Title: Fundamentals of CLOS

[14:52] *** vel left
[14:53] *** kanru left
[15:00] *** amnesiac joined
[15:00] <pugs_svnbot> r17926 | ruoso++ | [kp6] fixed bug in p5 token

[15:00] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17926

[15:00] <lambdabot> Title: Changeset 17926 - Pugs - Trac

[15:00] <moritz_> ruoso++

[15:01] <ruoso> kp6-kp6 no longer recurses when parsing a 'say "Hello!"', but the match simply fails

[15:01] <pugs_svnbot> r17927 | ruoso++ | [kp6] fixed test count order

[15:01] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17927

[15:01] <lambdabot> Title: Changeset 17927 - Pugs - Trac

[15:02] *** ahmadz joined
[15:02] <ruoso> echo 'say "Hello!"' | KP6_TOKEN_DEBUGGER=1 perl -Ilib-kp6-kp6-p5 kp6-kp6.pl 

[15:02] <ruoso> :)

[15:03] <moritz_> this rocks ;)

[15:04] * ruoso adding more details in the debugger

[15:04] * fglock_ is now in #lisp...

[15:06] *** vel joined
[15:11] *** ashleyb joined
[15:20] *** hkb_lab_ is now known as hkb_aw

[15:21] *** Blwood_ joined
[15:22] *** Blwood_ left
[15:22] <pmurias> ruoso: back

[15:22] *** Blwood_ joined
[15:22] <ruoso> pmurias, take a look at the p5 token failing tests

[15:22] <ruoso> :)

[15:23] *** vel left
[15:23] <pugs_svnbot> r17928 | ruoso++ | [kp6] token debugging is now really usefull

[15:23] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17928

[15:23] <lambdabot> Title: Changeset 17928 - Pugs - Trac

[15:23] <ruoso>  echo -n 'say "Hello!"' | KP6_TOKEN_DEBUGGER=1 perl -Ilib-kp6-kp6-p5 kp6-kp6.pl 

[15:24] *** vel joined
[15:24] <pmurias> ruoso: ok

[15:24] <pmurias> why did you create test 14?

[15:25] <pmurias> there is 06

[15:25] <pmurias> ?

[15:25] <pmurias> s/?//

[15:27] <ruoso> pmurias, because 06 was not failing when I created it... but after some recompilations, 06 started failing too

[15:27] <ruoso> so they're probably dup

[15:28] *** vel left
[15:29] *** vel joined
[15:29] <moritz_> pugs: %*ENV.keys.join('|').say

[15:29] <exp_evalbot> OUTPUT[*** Can't modify constant item: VUndef␤    at /tmp/auDwL4kKMv line 1, column 1 - line 2, column 1␤       /tmp/auDwL4kKMv line 1, column 1 - line 2, column 1␤]

[15:31] <avar> kp6: %*ENV.keys

[15:31] <exp_evalbot> r17928: OUTPUT[[ 'HOME', 'LOGNAME', 'SHLVL', '_', 'PATH', 'LS_COLORS', 'SHELL', 'MAIL', 'PWD', 'TERM', 'USER', 'HISTCONTROL',  ]␤]

[15:31] <avar> kp6: %*ENV.keys.join("|").say

[15:31] <exp_evalbot> r17928: OUTPUT[syntax error at position 10, line 1 column 10:␤%*ENV.keys.join("|").sa␤          ^ HERE␤]

[15:32] <avar> kp6: my @keys := %*ENV.keys; @keys

[15:32] <exp_evalbot> r17928: OUTPUT[[ 'HOME', 'LOGNAME', 'SHLVL', '_', 'PATH', 'LS_COLORS', 'SHELL', 'MAIL', 'PWD', 'TERM', 'USER', 'HISTCONTROL',  ]␤]

[15:32] <avar> kp6: my @keys := %*ENV.keys; @keys.join("|")

[15:32] <exp_evalbot> r17928: OUTPUT['HOME|LOGNAME|SHLVL|_|PATH|LS_COLORS|SHELL|MAIL|PWD|TERM|USER|HISTCONTROL'␤]

[15:32] <avar> kp6: my @keys := %*ENV.keys; @keys.join("|").say

[15:32] <exp_evalbot> r17928: OUTPUT[syntax error at position 39, line 1 column 39:␤my @keys := %*ENV.keys; @keys.join("|").sa␤                                       ^ HERE␤]

[15:32] <fglock_> avar: needs parenthesis

[15:32] <avar> kp6: (%*ENV.keys).join(", ")

[15:33] <exp_evalbot> r17928: OUTPUT['HOME, LOGNAME, SHLVL, _, PATH, LS_COLORS, SHELL, MAIL, PWD, TERM, USER, HISTCONTROL'␤]

[15:33] <avar> ah

[15:33] <avar> will be fixed with STD I guess

[15:33] <fglock_> yes, it's a grammar bug

[15:34] <pmurias> ruoso: did the Match specific change?

[15:34] <pmurias> lately

[15:35] <avar> fglock_: cl-cookbook being helpful?

[15:36] <pmurias> ruoso: returned true is being printed but the match returned is treated as false

[15:36] *** Blwood left
[15:36] <ruoso> pmurias, $MATCH.to(val) doesn't work... must use $MATCH.to = val

[15:37] <fglock_> avar: looking

[15:37] <avar> fglock_: It's the best clos reference I've found for people who understand the concepts involved

[15:38] <avar> slot = class variable

[15:41] <pmurias> ruoso: are you changing GLOBAL.pm

[15:41] <pugs_svnbot> r17929 | ruoso++ | [kp6] added a little script kp6-token-debug to allow: echo -n 'say "Hello!"' | ./kp6-token-debug

[15:41] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17929

[15:41] <pmurias> ?

[15:41] <lambdabot> Title: Changeset 17929 - Pugs - Trac

[15:41] <ruoso> pmurias, not right now

[15:41] <pmurias> to fix it

[15:41] <ruoso> but I did

[15:41] <avar> fglock_: but please bug me if you have any CL questions, I'll pretend to know something:)

[15:41] <ruoso> and I didn't fixed... ;)

[15:41] <fglock_> avar: is a "string" already an object, or is it a low level thing?

[15:42] *** Blwood_ left
[15:42] <avar> string is a seperate object, not Everything Is An Object(TM) in CL, but it has a different sense of what objects are than most

[15:42] <avar> You can't call methods on strings for example

[15:43] <pmurias> ruoso: should i fix it?

[15:43] <avar> strings are sequences in CL, similar to array-of-bytes in C but more high level

[15:43] <ruoso> pmurias, please

[15:43] <pmurias> ok

[15:45] <avar> CL-USER> (subseq "foobar" 3)

[15:45] <avar> "bar"

[15:45] <avar> CL-USER> (subseq '(f o o b a r) 3)

[15:45] <avar> (B A R)

[15:47] <pmurias> avar: aren't methods multis in CLOS?

[15:47] <avar> CL-USER> (let ((string "foobar"))

[15:47] <avar>            (setf (subseq string 0 3) "bewbs")

[15:47] <avar>            string)

[15:47] <avar> "bewbar"

[15:47] <avar> pmurias: yeah, they are

[15:48] <avar> so substr() in lvalue context in CL would just be a slice-like thingy

[15:49] <ruoso> pmurias, btw... this seems to be where kp6-kp6.pl is breaking too...

[15:49] <pugs_svnbot> r17930 | fglock++ | [kp6] kp6-token-debug - 4-space tab

[15:49] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17930

[15:49] <lambdabot> Title: Changeset 17930 - Pugs - Trac

[15:50] <fglock_> avar: so i'd better create a Str class, right?

[15:50] <ruoso> I think I'll start to write tests that uses the kp6 grammar itself

[15:51] <avar> fglock_: Yeah

[15:51] <avar> fglock_: where's the current string class?

[15:51] <pmurias> MOP

[15:51] <fglock_> it's defined in MOP.pm

[15:53] <ruoso> double_quoted is now recursing...

[15:53] * ruoso *sigh*

[15:53] <avar> (defclass Str (Value) (value))

[15:53] <avar> the first list after the name is a list of parent classes

[15:55] <fglock_> avar: how do i call make-instance on it?

[15:55] <pugs_svnbot> r17931 | pmurias++ | [kp6] fixed match creation for p5 tokens

[15:55] <pugs_svnbot> r17931 | pmurias++ | EmitLisp is precompiled

[15:55] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17931

[15:55] <lambdabot> Title: Changeset 17931 - Pugs - Trac

[15:56] *** hkb_aw is now known as hakobe

[15:56] <avar> (defmethod chars (self) (length (slot-value self 'value))) 

[15:56] <avar> fglock_: did you see my paste earlier?

[15:56] <pmurias> i think our rule engine tests are to simple/incomplete now

[15:56] <ruoso> pmurias, your fix broke the same thing again...

[15:57] <ruoso> ident_digit keeps recursing

[15:57] <fglock_> avar: yes, i'm reading

[15:58] <ruoso> pmurias, you just undid my change

[15:58] <pmurias> ruoso: it shouldn't have broken anything

[15:58] <pmurias> ruoso: sorry

[15:58] <pmurias> ?

[15:58] <ruoso> the "to" is not going forware

[15:58] <ruoso> forward*

[15:58] <ruoso> it always keep in "0"

[15:58] <fglock_> avar: should this work? (make-instance 'Str :value "x"  )

[16:00] <avar> fglock_: You have to do something more to make :value work there, you'll have to set up a constructor-thingy

[16:01] <pmurias> ruoso: the changes to lib look clean

[16:01] <ruoso> probably one of the tests is now making a deep recursion

[16:01] <pmurias> i could have screwed up -p5

[16:02] <ruoso> pmurias, take a look at test 13

[16:02] <ruoso> is not your changes that make it recurse

[16:02] <ruoso> it was recursing before

[16:02] <ruoso> my change made it stop, but it was simply failing

[16:03] <avar> (defclass Str ()

[16:03] <avar>   ((value :initarg :value)))

[16:03] <avar> (defmethod chars (self)

[16:03] <avar>   (length (slot-value self 'value)))

[16:03] <avar> then:

[16:03] <avar> CL-USER> (defparameter *my-str* (make-instance 'Str :value "foobar"))

[16:03] <avar> *MY-STR*

[16:03] <avar> CL-USER> (slot-value *my-str* 'value)

[16:03] <avar> "foobar"

[16:04] <avar> You can also specify more stuff, like (value :initarg :value :initform "This is the default string)

[16:04] <fglock_> trying it here

[16:05] <avar> there's also stuff to set up singletons and stuff like that

[16:05] <avar> fglock_: what editor do you use?

[16:05] <fglock_> xcode

[16:06] <avar> ok:)

[16:06] <fglock_> why?

[16:06] <avar> Because this stuff is really exponentially easier in emacs with slime:)

[16:06] <avar> slime++

[16:07] <avar> But you don't need to enter the church of emacs right at this moment:)

[16:10] <fglock_> i wonder which Perl 6 things don't map cleanly to Lisp

[16:10] <moritz_> rules?

[16:11] <avar> no rules map to cl

[16:11] <fglock_> that's not a problem, we have rules-to-method

[16:11] <avar> BEGIN {} END {} maybe?

[16:11] <pmurias> ruoso: found the bug

[16:12] <pmurias> you removed /g from the regex so it didn't update the pos

[16:12] <fglock_> that's ok too, BEGIN is compile-time

[16:12] <fglock_> END may be a problem

[16:13] <ruoso> pmurias++ nice

[16:14] <pmurias> i've got to do homework now as i go to the mountains for the weekend

[16:14] <pugs_svnbot> r17932 | pmurias++ | [kp6] fixed :P5 tokens

[16:14] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17932

[16:14] <lambdabot> Title: Changeset 17932 - Pugs - Trac

[16:14] <pmurias> you can add $_ support to p5 tokens

[16:14] <[particle]> mountains++

[16:14] <ruoso> ok... seeya

[16:15] <pmurias> seeya

[16:15] *** pmurias left
[16:15] <moritz_> bye

[16:16] <avar> CL-USER> (defun infix-<~> (one two) (string-concat one two))

[16:16] <avar> INFIX-<~>

[16:16] <avar> CL-USER> (infix-<~> "a" "b")

[16:16] <avar> "ab"

[16:16] <avar> C

[16:17] <avar> yay odd characters in functions:)

[16:17] <fglock_> does it support unicode?

[16:17] <avar> CL-USER> (defun infix\:<~> (one two) (string-concat one two))

[16:17] <avar> |INFIX:<~>|

[16:17] <avar> CL-USER> (infix\:<~> "a" "b")

[16:17] <avar> "ab"

[16:17] <avar> fglock_: Implementation defined, most do

[16:18] <avar> CL-USER> (code-char 198)

[16:18] <avar> #\LATIN_CAPITAL_LETTER_AE

[16:18] <avar> clisp and sbcl use unicode for everything

[16:20] <avar> fglock_: Just assume that unicode works for everything, it can be fixed later

[16:22] <fglock_> ok

[16:23] <ruoso> fglock_, in Grammar::Quote::double_quoted

[16:23] <ruoso> ahmm

[16:23] <ruoso> forget it

[16:23] <ruoso> I just saw the "."

[16:29] <pugs_svnbot> r17933 | fglock++ | [kp6] EmitLisp - very basic Value objects

[16:29] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17933

[16:29] <lambdabot> Title: Changeset 17933 - Pugs - Trac

[16:38] <pugs_svnbot> r17934 | fglock++ | [kp6-lisp] more values

[16:38] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17934

[16:38] <lambdabot> Title: Changeset 17934 - Pugs - Trac

[16:41] *** DarkWolf84 joined
[16:44] *** cognominal_ joined
[16:45] *** nipra is now known as ni-pra

[16:46] *** justatheory joined
[16:46] *** franck___ left
[16:47] <pugs_svnbot> r17935 | fglock++ | [kp6] kp6-mp6-perl5.pl --lisp

[16:47] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17935

[16:47] <lambdabot> Title: Changeset 17935 - Pugs - Trac

[16:50] <pugs_svnbot> r17936 | fglock++ | [kp6] updated image

[16:50] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17936

[16:50] <lambdabot> Title: Changeset 17936 - Pugs - Trac

[16:55] <avar> w 2

[17:01] <fglock_> avar: can you help me with hash table initialization?

[17:01] <pugs_svnbot> r17937 | ruoso++ | [kp6] new failing test... ExtratRuleCodeBlock should pass $MATCH somehow...

[17:01] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17937

[17:01] <lambdabot> Title: Changeset 17937 - Pugs - Trac

[17:01] <avar> fglock_: sure, what do you need?

[17:02] <avar> you could use a plist, alist or a hash. the former two are just a list of key-value pairs

[17:02] <fglock_> i've got a list of key/values, i need to build an anon hash

[17:03] <fglock_> a perlish hash

[17:03] <avar> { @values } basically?

[17:04] <fglock_> yes, but i have separate key and value if necessary

[17:04] <fglock_> EmitLisp:106

[17:06] * avar looks

[17:08] *** REPLeffect joined
[17:11] <avar> CL-USER> (let ((hash (make-hash-table)))

[17:11] <avar>            (setf (gethash 'key-one hash) "value-one")

[17:11] <avar>            (setf (gethash 'key-two hash) "value-two")

[17:11] <avar>            hash)

[17:11] <avar> #S(HASH-TABLE :TEST FASTHASH-EQL (KEY-TWO . "value-two") (KEY-ONE . "value-one"))

[17:11] <avar> there's probably a better way to do this

[17:12] <fglock_> thanks

[17:12] <avar> but you could make the current for-loop add those setf statements and have hash returned at the end..

[17:12] <fglock_> sure, it works

[17:12] <avar> but to construct this you'll need to loop over a list as pairs which I've forgotten how to do too:)

[17:13] <[particle]>  /join #lisp ??

[17:13] <pugs_svnbot> r17938 | fglock++ | [kp6-lisp] s/perl5/lisp/g

[17:13] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17938

[17:13] <lambdabot> Title: Changeset 17938 - Pugs - Trac

[17:14] <avar> (make-instance 'Pair :value '(key . value)) is probably the best way to do a pair

[17:14] <avar> [particle]: This is relevant right now:)

[17:14] *** kaether left
[17:14] <[particle]> i mean, to construct a list of pairs, join #lisp and ask

[17:15] <[particle]> i know it's very relevant

[17:15] <[particle]> fglock wants to implement a new kp6 back end in <3 hours :)

[17:15] <[particle]> MADMAN!

[17:16] <fglock_> in a language i don't know

[17:16] <[particle]> GENIUS!

[17:16] <avar> #lisp frowns upon questions on lisp that couldn't be answered by reading PCL, ACL, The Common Lisp Standard and playing with slime for a month

[17:16] <fglock_> :P

[17:16] <avar> :)

[17:19] <fglock_> avar is implementing it, i'm just typing

[17:19] *** drupek12 joined
[17:21] <fglock_> avar: { a => 2 } compiles to (let ((hash (make-hash-table))) (setf (gethash '(make-instance 'Str :value "a")) "(make-instance 'Int :value 2)") hash)

[17:21] <fglock_> should it use ' ?

[17:22] *** rindolf left
[17:23] <fglock_> i'm removing the ""

[17:24] <avar> I don't think it needs a quote, could be..

[17:24] <avar> nah, the object can be evaluated without screwing stuff up

[17:25] <avar> oh for the first argument of gethash? probably

[17:25] <avar> or, no

[17:25] <avar> :)

[17:26] <avar> keys can be any symbols IIRC and (make-instance) returns a symbol

[17:26] <pugs_svnbot> r17939 | fglock++ | [kp6-lisp] hash composer

[17:26] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17939

[17:26] <lambdabot> Title: Changeset 17939 - Pugs - Trac

[17:26] <fglock_> echo '{ a => 2, }' | perl kp6-mp6-perl5.pl --lisp 

[17:26] *** weinig left
[17:26] <fglock_> still emits the perl5 initialization

[17:28] <avar> looks good...

[17:33] * avar updates it a bit

[17:34] <avar> why my $_MODIFIED; BEGIN { $_MODIFIED = {} } ?

[17:35] <pugs_svnbot> r17940 | avar++ |  r63535@t:  avar | 2007-09-19 17:33:54 +0000

[17:35] <pugs_svnbot> r17940 | avar++ |  Make the EmitLisp initialization a bit lispier

[17:35] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17940

[17:35] <lambdabot> Title: Changeset 17940 - Pugs - Trac

[17:36] *** kjwcode joined
[17:36] <fglock_> it is meant to log the side-effects of BEGIN blocks

[17:38] <fglock_> hmm - can lisp dump the program and restart later?

[17:39] <avar> implementation defined but yes, they usually allow you to dump the current image

[17:39] <avar> or do you mean like precompiling?

[17:40] <fglock_> like precompiling, keeping the lexical side effects

[17:42] <fglock_> that is, keeping the changes made by BEGIN blocks

[17:42] <pugs_svnbot> r17941 | fglock++ | [kp6-lisp] hash -> Hash

[17:42] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17941

[17:42] <lambdabot> Title: Changeset 17941 - Pugs - Trac

[17:42] <avar> lexical side effects?

[17:42] <fglock_>  { my $x; BEGIN { $x = 1 } ... }

[17:44] <avar> what will that stuff turn into in the p5 emitter?

[17:44] <fglock_> something like  { my $x; INIT { $x = 1 } ... }

[17:45] <fglock_> but there are more complex cases

[17:45] <ruoso> that's one of the reasons I'm thinking that generating plain code may not be completely viable

[17:47] <avar> Yes I like the current kp6 architechture but some of the stuff it emits at least seems to piggy-back too much on p5

[17:47] <avar> e.g. this

[17:48] *** weinig joined
[17:49] <fglock_> a lisp backend should force fixing that

[17:50] <avar> indeed

[17:51] <pugs_svnbot> r17942 | fglock++ | [kp6-lisp] Pair

[17:51] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17942

[17:51] <lambdabot> Title: Changeset 17942 - Pugs - Trac

[17:51] <ruoso> kp6++

[17:51] <ruoso> it's complaining about $$<x>

[17:51] <fglock_> what is the proper way to load a library in lisp?

[17:51] <ruoso> because prefix:<$> is not defined

[17:52] <avar> fglock_: like this I guess

[17:52] *** penk joined
[17:52] <pugs_svnbot> r17943 | avar++ |  r63537@t:  avar | 2007-09-19 17:51:16 +0000

[17:52] <pugs_svnbot> r17943 | avar++ |  the hello world case now looks a whole lot better, but the BEGIN stuff needs implementing

[17:52] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17943

[17:52] <avar> (load (compile-file "lib/KindaPerl6/Runtime/Lisp/Runtime.lisp"))

[17:52] <lambdabot> Title: Changeset 17943 - Pugs - Trac

[17:53] *** cognominal__ joined
[17:53] <fglock_> avar++

[17:53] <ruoso> fglock_, which would be the correct way of implementing $$<x> in kp6?

[17:53] <pugs_svnbot> r17944 | ruoso++ | [kp6] ExtractRuleCodeBlock now passes $MATCH to the block

[17:53] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17944

[17:53] <lambdabot> Title: Changeset 17944 - Pugs - Trac

[17:53] <fglock_> did you create Runtime.lisp?

[17:54] <ruoso> fglock_, at this moment it resolves to GLOBAL::prefix:<$> call

[17:54] <fglock_> ruoso: you can implement prefix:<$>

[17:54] <fglock_> which calls, hmm  ITEM i think

[17:54] <pugs_svnbot> r17945 | avar++ |  r63542@t:  avar | 2007-09-19 17:54:27 +0000

[17:54] <pugs_svnbot> r17945 | avar++ |  stub runtime file

[17:54] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17945

[17:54] <lambdabot> Title: Changeset 17945 - Pugs - Trac

[17:54] <avar> fglock_: nothing it it at the moment..

[17:55] <fglock_> ruoso: or .scalar

[17:55] * ruoso will try

[17:57] *** Psyche^ joined
[17:57] <ruoso> hmmm it is already a scalar

[17:57] <ruoso> alway

[17:57] <ruoso> s

[17:58] <ruoso> hmm

[17:58] <ruoso> actually

[17:58] <ruoso> a container

[17:58] <ruoso> kp6 still don'

[17:58] <ruoso> don't implement context

[17:58] <ruoso> so there's no "scalar context" to be enforced

[17:58] <avar> fglock_: poking it some more..

[17:58] <ruoso> fglock_, I left it just returning the first argument for now

[18:00] <fglock_> ruoso: it must call the method, because that's how Match works

[18:00] <pugs_svnbot> r17946 | ruoso++ | [kp6] prefix:<$>, but for now it does nothing...

[18:00] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17946

[18:00] <lambdabot> Title: Changeset 17946 - Pugs - Trac

[18:00] <ruoso> Match doesn't have a "scalar" method

[18:01] <ruoso> woooooohoooooooooooo

[18:01] <fglock_> yes, it needs one (see the p5 impl)

[18:01] <pugs_svnbot> r17947 | fglock++ | [kp6-lisp] named argument

[18:01] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17947

[18:01] <lambdabot> Title: Changeset 17947 - Pugs - Trac

[18:01] <fglock_> ruoso: wo+ho+ ?

[18:02] <ruoso> no method 'declaration' in Class 'Pad'

[18:02] <ruoso> this means the matching part works

[18:02] <ruoso> because it's failing because Pad is not yet implemented in kp6-kp6

[18:03] *** cognominal_ left
[18:03] <pugs_svnbot> r17948 | avar++ |  r63545@t:  avar | 2007-09-19 18:02:28 +0000

[18:03] <pugs_svnbot> r17948 | avar++ |  { a => 1 } world now compiles with clisp, but doesn't do anything

[18:03] <pugs_svnbot> r17949 | ruoso++ | [kp6] WoooHooo... matching of say "Hello" stops on Pad non implementation... 

[18:03] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17949

[18:03] <lambdabot> Title: Changeset 17949 - Pugs - Trac

[18:03] <avar> urgh, actually it doesn't

[18:03] * avar fix

[18:06] <ruoso> ahmm...

[18:06] <pugs_svnbot> r17950 | avar++ |  r63552@t:  avar | 2007-09-19 18:05:26 +0000

[18:06] <pugs_svnbot> r17950 | avar++ |  (gethash) needed a second param

[18:06] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17950

[18:06] <lambdabot> Title: Changeset 17950 - Pugs - Trac

[18:06] <ruoso> not exactly

[18:06] *** jisom joined
[18:06] <avar> fglock_: http://sial.org/pbot/27581

[18:06] <lambdabot> Title: Paste #27581 from Someone at 208.78.101.240

[18:07] <fglock_> yay! avar++

[18:07] <pugs_svnbot> r17951 | ruoso++ | [kp6] actually, the match is stopping because of the known new-in-rule-block problem...

[18:07] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17951

[18:07] <lambdabot> Title: Changeset 17951 - Pugs - Trac

[18:07] <avar> echo 'say "foo"' | perl kp6-mp6-perl5.pl --lisp

[18:08] <fglock_> works here too :)

[18:08] <avar> I guess this needs subroutine dispatch and stringify

[18:08] <avar> stringify can just be (slot-value (make-instance 'Str "foo") 'value) for now

[18:09] <fglock_> stringify should return the object

[18:09] <fglock_> say() does the unboxing

[18:10] <fglock_> but now home... &

[18:10] <ruoso> fglock_, any clue on how to fix tests grammar/08 and 09?

[18:10] <fglock_> ruoso: i'll take a look later

[18:11] <ruoso> nice...

[18:11] <ruoso> that's the known stopper for kp6-kp6 at the moment

[18:12] *** ruoso left
[18:13] <avar> Aankhen``: Want to play?:)

[18:15] *** Patterner left
[18:15] *** Psyche^ is now known as Patterner

[18:23] *** hakobe is now known as hkb_zz

[18:26] *** blindfish joined
[18:31] *** pmurias joined
[18:32] *** riffraff joined
[18:33] <pmurias> instead of emitting side effects of BEGIN as BEGIN blocks one could store the default value in the Pad

[18:34] *** Blwood joined
[18:36] <[particle]> does pugs allow sub-second sleep?

[18:45] *** c9s joined
[18:48] *** c9s left
[18:48] *** vel left
[18:48] *** c9s joined
[18:48] *** [particle1 joined
[18:48] *** c9s left
[18:49] *** c9s joined
[18:51] *** dduncan joined
[19:03] *** [particle] left
[19:04] *** weinig_ joined
[19:04] *** weinig_ left
[19:05] *** weinig_ joined
[19:06] *** calin joined
[19:13] *** weinig left
[19:15] *** theorbtwo left
[19:16] *** theorbtwo joined
[19:34] *** nekokak_ joined
[19:38] *** jisom left
[19:38] *** weinig_ left
[19:52] *** nekokak left
[19:54] <Aankhen``> avar: Sorry, wha?

[20:01] *** fglock joined
[20:05] *** franck___ joined
[20:06] *** franck___ left
[20:19] *** polettix joined
[20:23] *** ferreira left
[20:24] *** c9s left
[20:24] *** c9s joined
[20:24] *** blindfish left
[20:27] *** weinig joined
[20:28] *** pmurias left
[20:29] <fglock> Aankhen``: re play - v6/v6-KindaPerl6$ echo ' [ 1, 2, 3 ] ' | perl kp6-mp6-perl5.pl --lisp

[20:29] *** c9s_ joined
[20:29] *** IllvilJa left
[20:31] *** iblechbot left
[20:32] <Aankhen``> Ah, kewl.

[20:38] <avar> @tell pmurias I guess, I really don't know how this stuff all works:)

[20:38] <lambdabot> Consider it noted.

[20:39] <avar> Aankhen``: Want to help hack the CL backend?:)

[20:41] <Aankhen``> avar: Not tonight, but perhaps tomorrow. :-)

[20:41] *** TJCRI left
[20:41] <avar> :)

[20:43] *** calin left
[20:44] *** IllvilJa joined
[20:45] *** c9s left
[20:46] <fglock> avar: how to use namespaces in Lisp? (a link is ok)

[20:46] <pugs_svnbot> r17952 | fglock++ | [kp6-lisp] added Array

[20:46] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17952

[20:46] <lambdabot> Title: Changeset 17952 - Pugs - Trac

[20:47] <avar> fglock: You use packages

[20:47] <avar> (defpackage and (in-package

[20:49] * avar ponders what needs doing for C<say "hello, world"> to work

[20:50] *** Casan joined
[20:52] <pugs_svnbot> r17953 | fglock++ | [kp6-lisp] added GLOBAL

[20:52] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17953

[20:52] <fglock> say() is a code object, which accepts .APPLY

[20:52] <lambdabot> Title: Changeset 17953 - Pugs - Trac

[20:53] <fglock> &GLOBAL::say = Code.new(...)

[20:55] <pugs_svnbot> r17954 | fglock++ | [kp6-lisp] added Code

[20:55] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17954

[20:55] <lambdabot> Title: Changeset 17954 - Pugs - Trac

[20:56] <fglock> we can use &GLOBAL::say := Code.new(...) - so we don't need containers

[20:56] <avar> w 13

[20:59] *** [particle1 is now known as [particle]

[21:01] <pugs_svnbot> r17955 | fglock++ | [kp6-lisp] added the GLOBAL visitor to lisp 

[21:01] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17955

[21:01] <lambdabot> Title: Changeset 17955 - Pugs - Trac

[21:04] * avar kicks pugs_svnbot 

[21:04] <pugs_svnbot> r17956 | avar++ |  r63561@t:  avar | 2007-09-19 21:02:33 +0000

[21:04] <pugs_svnbot> r17956 | avar++ |  lame say() implementation

[21:04] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17956

[21:04] <lambdabot> Title: Changeset 17956 - Pugs - Trac

[21:12] <fglock> avar: you need to read :value from str, i think

[21:12] <avar> CL-USER> (say "foo" "bar" "zar")

[21:12] <avar> foobarzar

[21:12] <avar> T

[21:12] <avar> is this right or should there be spaces?

[21:13] <fglock> i think it is right

[21:13] <avar> but ah, they'll be Str objects..

[21:13] <fglock> spaces are inserted by the list/array stringifier

[21:18] <avar> I'm stringifying it manually for now

[21:18] <pugs_svnbot> r17957 | avar++ |  r63563@t:  avar | 2007-09-19 21:17:03 +0000

[21:18] <pugs_svnbot> r17957 | avar++ |  variadic say() and have it stringify Str objects

[21:18] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17957

[21:18] <lambdabot> Title: Changeset 17957 - Pugs - Trac

[21:23] <fglock> avar: can you create a Code object that accepts .APPLY ? 

[21:23] <fglock> sorry, not enough lisp-fu yet

[21:24] <avar> I'm supposed to know this stuff?:)

[21:24] * avar looks at Code.pm

[21:24] <fglock> Code.value is a lisp fun

[21:27] * avar doesn't get what the interface should be or what this stuff actually does

[21:28] <avar> The code class needs an apply method which does...

[21:29] <fglock> .APPLY calls the native function (which is the Code.value)

[21:30] <fglock> instead of (defun say ... )

[21:31] <fglock> you use:

[21:31] <fglock>  &GLOBAL::say := Code.new( value => (defun say ... ) )

[21:31] <fglock> (mixing Perl 6 and Lisp here)

[21:32] <[particle]> implementation via delegation

[21:32] <fglock> and use it:

[21:32] <fglock>   &GLOBAL::say.APPLY( Str.new( value => "hello W." ) )

[21:33] <fglock> google isn't helping much with my learning lisp

[21:35] <avar> CL-USER> (defun say (str)

[21:35] <avar>            (format t "~a~%" str))

[21:35] <avar> SAY

[21:35] <avar> CL-USER> (funcall 'say "a")

[21:35] <avar> a

[21:35] <avar> NIL

[21:36] <avar> So I guess apply would funcall the :value member with the args given to it

[21:36] <fglock> yup

[21:40] <fglock> is it called with ( "APPLY" GLOBAL::say (make-instance 'Str :value "hello") ) ?

[21:42] <avar> (defparamater *MYCODE* (make-instance 'Code :value 'GLOBAL::say))

[21:43] <avar> then (apply *MYCODE* (make-instance 'Str :value "hello"))

[21:50] * avar fails

[21:51] <fglock> avar: i'm working on it

[21:52] <fglock> (defparamater say (make-instance 'Code :value (defun ... ) ) )

[21:52] <fglock> this defines the &GLOBAL::say variable, right?

[21:53] *** Blwood left
[21:53] <avar> You'd have to use '(lambda instead of (defun

[21:53] <avar> I think..

[21:54] <avar> bug #lisp ?:)

[21:54] <avar> Aankhen``: halp?!:)

[21:59] <avar> apply is a built-in b.t.w. so you'll have to call it something else

[21:59] <pugs_svnbot> r17958 | fglock++ | [kp6-lisp] fixed method call syntax

[21:59] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17958

[21:59] <lambdabot> Title: Changeset 17958 - Pugs - Trac

[22:00] <avar> .. I think..

[22:00] *** justatheory left
[22:00] <fglock> i think i'll need to encode the names, lisp seems to be case-insensitive

[22:01] <avar> it is

[22:06] <Aankhen``> avar: Wha?

[22:07] *** REPLeffect_ joined
[22:08] *** REPLeffect left
[22:08] <Aankhen``> (defparameter say (make-instance 'code :value #'(lambda (...) ...)))

[22:08] *** REPLeffect_ is now known as REPLeffect

[22:08] <Aankhen``> (funcall say arg1 arg2 arg3)

[22:08] <Aankhen``> Or (apply say (list arg1 arg2 arg3))

[22:09] *** ashleyb_ joined
[22:10] *** ashleyb_ left
[22:11] *** amnesiac left
[22:13] *** DarkWolf84 left
[22:13] *** DarkWolf84 joined
[22:13] *** r0bby joined
[22:15] <pugs_svnbot> r17959 | fglock++ | [kp6-lisp] (non-working) Code, say

[22:15] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17959

[22:15] <lambdabot> Title: Changeset 17959 - Pugs - Trac

[22:15] *** riffraff left
[22:18] <pugs_svnbot> r17960 | fglock++ | [kp6-lisp] say() returns True

[22:18] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17960

[22:18] <lambdabot> Title: Changeset 17960 - Pugs - Trac

[22:19] *** ashleyb left
[22:24] <pugs_svnbot> r17961 | fglock++ | [kp6-lisp] method parameters are (list ...)

[22:24] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17961

[22:24] <lambdabot> Title: Changeset 17961 - Pugs - Trac

[22:27] <pugs_svnbot> r17962 | azawawi++ | [runpugs] added mod_perl/apache -> mod_perl2/apache2 migration instructions

[22:27] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17962

[22:27] <lambdabot> Title: Changeset 17962 - Pugs - Trac

[22:30] <pugs_svnbot> r17963 | fglock++ | [kp6-lisp] Str.str, &say -> Code_say

[22:30] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17963

[22:30] <lambdabot> Title: Changeset 17963 - Pugs - Trac

[22:33] <pugs_svnbot> r17964 | fglock++ | [kp6-lisp] Bit class

[22:33] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17964

[22:33] <lambdabot> Title: Changeset 17964 - Pugs - Trac

[22:35] <avar> (funcall (slot-value say 'value) (make-instance 'Str :value "foo"))

[22:35] <avar> foo

[22:35] <avar> T

[22:36] <avar> 9(SETF FIND-CLASS)(BIT): #1=#<PACKAGE COMMON-LISP> is locked

[22:36] <avar>    [Condition of type SYSTEM::SIMPLE-PACKAGE-ERROR]

[22:36] <avar> bit is a built-in

[22:36] <fglock> can we use ::Bit ?

[22:36] <avar> or :Bit

[22:38] <avar> no, ::Bit

[22:38] <allbery_b> if you're translating Perl6 types into new Lisp types, maybe you should use a prefix, e.g. P6Bit

[22:38] <Aankhen``> Yes, why does the type name have to be identical?

[22:38] <Aankhen``> Give it a Lispy name, e.g. perl6-bit. :-)

[22:39] <fglock> it will need to be mangled anyway

[22:39] <avar> we're just screwing around atm

[22:39] <Aankhen``> OK.

[22:44] <avar> fglock: I commited something that seems to work..

[22:44] <pugs_svnbot> r17965 | avar++ |  r63574@t:  avar | 2007-09-19 22:44:31 +0000

[22:44] <pugs_svnbot> r17965 | avar++ |  uhm, this thing seems to work, sucks a lot though

[22:44] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17965

[22:44] <lambdabot> Title: Changeset 17965 - Pugs - Trac

[22:45] <avar> for some insane definition of works

[22:45] <avar> CL-USER> (my-apply say "bewbs")

[22:45] <avar> bewbs

[22:45] <avar> #<:BIT #x000333F417F0>

[22:45] <avar> my-apply because apply is a built-in

[22:47] <avar> (load (compile-file "lib/KindaPerl6/Runtime/Lisp/Runtime.lisp"))

[22:47] <avar> ( APPLY $GLOBAL::Code_say (list (make-instance 'Str :value "foo")

[22:47] <avar> ) )

[22:49] <fglock> sleep &

[22:49] <fglock> more tomorrow 

[23:05] *** cmarcelo left
[23:06] *** fglock left
[23:07] *** elmex_ left
[23:07] *** araujo left
[23:08] *** Schwern joined
[23:11] <avar> oh crap nothing works

[23:24] *** Aankhen`` left
[23:27] <avar> @tell fglock http://www.flownet.com/gat/packages.pdf

[23:27] <lambdabot> Consider it noted.

[23:30] *** Schwern left
[23:32] *** ahmadz left
[23:44] *** weinig left
[23:51] *** weinig joined
