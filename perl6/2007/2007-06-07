[00:00] <[particle]> you have access to the match object inside the closure

[00:01] <[particle]> see t/compilers/pge/p6regex/closure.t

[00:08] <Coke> If I'm going to much directly with the Match object, I can do that from PGE. I was hoping for something cleaner.

[00:08] <Coke> s/much/muck/

[00:13] * dduncan now starting smoke of r16641

[00:20] *** avarab joined
[00:23] * Coke wanders back into #parrot.

[00:23] *** avarab joined
[00:42] *** weinigLap joined
[00:45] *** amnesiac joined
[00:53] *** nipotaway is now known as nipotan

[00:53] *** unobe joined
[00:56] *** unobe is now known as unobe_away

[00:56] *** amnesiac joined
[01:08] *** mjk joined
[01:15] *** japhb joined
[01:26] *** justatheory joined
[01:26] *** agentzh joined
[01:27] *** agentzh changes topic to: http://pugscode.org/ | http://sial.org/pbot/perl6

[01:27] <agentzh> unobe++ seems to have fixed it :)

[01:27] <lambdabot> agentzh: You have 2 new messages. '/msg lambdabot @messages' to read them.

[01:27] <agentzh> @messages

[01:27] <lambdabot> Aankhen`` said 22d 19h 2m 33s ago: I'm not seeing the load handler run more than once on Firefox; a profiling session shows that it runs once, calling addEvent 83 times (or more, or less, depending

[01:27] <lambdabot> on the number of smartlink snippets). Which browser did you see this behaviour under?

[01:27] <lambdabot> perlDreamer said 21d 21h 14m 18s ago: I think that the closure work is done in t/TASKS, but I'd like to double check with you since you added it. What specific things were you thinking of?

[01:28] <agentzh> lambdabot is insane now?

[01:29] <agentzh> yay, autosmoking is working again :)

[01:50] *** weinigLap joined
[01:53] *** agentzh left
[01:56] *** REPLeffect joined
[02:07] *** BooK joined
[02:11] *** dolmans joined
[02:12] <meppl> good night

[02:16] *** sunnavy joined
[02:32] *** audreyt_ joined
[02:38] *** audreyt__ joined
[02:47] *** Alias_ joined
[02:58] <Limbic_Region> salutations audreyt

[03:01] <amnesiac> saludaciones!

[03:04] *** unobe_away is now known as unobe

[03:25] *** daxim_ joined
[03:37] <dduncan> so it looks like my smoke finished in 97 min

[03:39] <Limbic_Region> last time I ran one - less than a week ago, it took under about 33 min

[03:39] <dduncan> so that's the first smoke post the rename of my dbms project

[03:40] <dduncan> my machine's almost 5 years old ... though probably one of the better ones of its time

[03:40] * Limbic_Region wasn't attempting to brag

[03:40] <Limbic_Region> what version of ghc are you using and how much memory free

[03:41] <dduncan> don't worry about it

[03:41] <Limbic_Region> those are usually the 2 factors that dictate how fast a smoke goes

[03:41] <dduncan> my machine has usually over 1GB of RAM free, and it is GHC 6.6.0 on Power PC G4 dual-1Ghz, using concurrent=4

[03:42] <dduncan> that is, the smoke is concurrent=4, on 2 cpus

[03:42] <dduncan> I think the bottleneck is the relatively slow cpu

[03:43] <Limbic_Region> could be

[03:43] <dduncan> as for ram ... I found that compiling pugs tended to use a lot more than actually running pugs

[03:43] <dduncan> and the smoke times are just for runs

[03:44] <dduncan> back when I had 0.75GB RAM total (I now have 1.75GB), compiling eg Pugs.Parser sometimes started to use the swap ... under GHC 6.4 anyway

[03:44] <Limbic_Region> come to think of it, I haven't profiled memory usage during smoke

[03:45] <dduncan> I didn't do anything formal ... just observed what "top" said while it ran

[03:45] <Limbic_Region> I have dual 1.73 Ghz with 1GB total physical memory on winbugs

[03:46] <Limbic_Region> and concurrent=1 because there is a bug in Parallel::ForkManager I haven't been able to track down

[03:46] <TimToady> mine usually runs in ~30 minutes, but now it's taking 80 because something's wrong on fedora...

[03:46] <dduncan> perhaps the cpu architecture has a role to play ... if that is a single core cpu

[03:46] * Limbic_Region hacked in support for concurren > 1 on Win32 using Parallel::ForkManager but it intermittently loses track of one of its forks

[03:46] <Limbic_Region> so I don't use it

[03:47] <Limbic_Region> dual core

[03:47] <dduncan> in the older days, concurrent > 1 didn't work on mac os x even when it was supposed to ... that combined with an older ghc and/or less ram made Pugs smokes take about 5 hours on otherwise the same machine

[03:48] <dduncan> getting the concurrent working brought it down to about 2.5 hours

[03:48] <dduncan> and the rest may have been due to better ghc or more optimized pugs

[03:49] <dduncan> actually, I don't think my ram amount ever affected smoke speed, just compile speed

[03:50] *** LimbicRegion joined
[03:50] *** bpalmer` left
[03:50] *** LimbicRegion is now known as Limbic_Region

[03:50] <dduncan> we now have a core-2-duo 2.1 ghz iMac in the house, so some point I'll have to try running pugs on that (I haven't yet, as its not my machine)

[03:52] <dduncan> does anyone here think that Pugs will be next released during the month of june, or would july or later be more likely?

[03:53] <Limbic_Region> IIRC, audreyt's plan was for the next release to be 6.28

[03:53] <dduncan> yes

[03:53] <dduncan> I mean that one

[03:53] <japhb> dduncan: he's joking

[03:53] <Limbic_Region> was getting to that

[03:53] <japhb> :-)

[03:53] <Limbic_Region> no I am not

[03:53] <japhb> Limbic_Region: ... and I'm pulling your leg

[03:54] <Limbic_Region> oh, wait

[03:54] <dduncan> I recall that 6.28.0 was going to be the next one for awhile

[03:54] <Limbic_Region> 6.28 could be interpreted as June 28

[03:54] <Limbic_Region> in any case

[03:54] * japhb smiles barely innocently

[03:54] <dduncan> oh that's what you meant

[03:54] <Limbic_Region> the major hurdle for 6.28 was the pad refactor IIRC, which went in a couple of weeks ago

[03:54] <japhb> Limbic_Region: in all seriousness, I think we're waiting for the MO merge

[03:54] <Limbic_Region> unfortunately, audreyt hasn't had a lot of time to devote to pugs recently

[03:55] <japhb> Pad refactor was item 1, MO was item 2

[03:55] <Limbic_Region> right

[03:55] <japhb> And somewhere in the middle was the "minor" O(1) pad item, which I've been waiting on

[03:55] <Limbic_Region> but the MO merge wasn't expected to be difficult from my understanding

[03:55] <dduncan> anyway, for any release after june 29th, we'll want to include a copy of the GPL-3 in the licenses folder rather than or in addition to the GPL-2

[03:55] <Limbic_Region> dduncan - 2007-06-28 is not a scheduled release date

[03:55] <japhb> Limbic_Region: I recall something like her needing 8 hours or so to do the MO merge

[03:55] <Limbic_Region> but it would be nice if 6.28 was released on 6.28

[03:56] <dduncan> june 29th is the GPLv3 release date, and is scheduled

[04:04] <Alias_> WE'RE ALL GUNNA DIE!!!

[04:04] <Alias_> Sorry about that, but the drama levels on this whole GPL3 thing were getting critically low

[04:08] <SamB> Alias_: what GPL3 thing?

[04:08] <SamB> was there a problem with GPL2

[04:09] <Alias_> yeah, apparently

[04:10] <japhb> SamB: Several things.  I haven't followed it all in detail, but IIRC: some internationalization issues, changes in the patent landscape to handle, license compatibility improvements, suchlike

[04:22] <lidden> http://gplv3.fsf.org/rms-why.html

[04:22] <lambdabot> Title: Why Upgrade to GPL Version 3 &mdash; GPLv3

[04:27] *** vel joined
[04:28] *** vel joined
[04:33] *** unobe is now known as unobe_away

[04:47] *** hcchien joined
[04:51] *** vel joined
[04:55] *** unobe_away is now known as unobe

[05:05] *** BooK joined
[05:10] *** SubStack_ joined
[05:12] *** justatheory joined
[05:18] *** sunnavy joined
[05:19] *** justatheory joined
[05:20] *** justatheory joined
[05:27] *** devogon joined
[05:34] *** SubStack_ is now known as SubStack

[05:47] *** Jmax joined
[05:54] *** elmex joined
[05:55] *** sparvu joined
[05:56] *** kanru joined
[05:57] *** Gothmog_ joined
[06:25] *** Averell joined
[06:26] *** franck__ joined
[06:29] *** araujo joined
[06:35] *** franck___ joined
[06:42] *** felipe joined
[07:04] *** aukjan|gone is now known as aukjan

[07:06] *** dduncan left
[07:09] *** franck__ joined
[07:30] *** hcchien joined
[07:32] *** riffraff joined
[07:33] *** sunnavy_ joined
[07:34] <riffraff> hi everyone

[07:37] <Tene> Hi!

[07:43] *** unobe is now known as unobe_away

[07:44] *** renormalist joined
[07:59] *** cognominal_ joined
[08:04] *** rho joined
[08:07] *** jisom joined
[08:23] *** iblechbot joined
[08:38] *** b_jonas joined
[09:07] *** buetow joined
[09:10] *** Maddingu1 is now known as Maddingue

[09:14] <moritz> good morning ;)

[09:16] *** BooK_ joined
[09:19] *** trunix joined
[09:28] *** xern joined
[09:43] <Tene> Hmm.  It's not just pugs that's segfaulting for me.  Even ldd is segfaulting on this box.

[09:46] <Tene> oh, nevermind, that's an application segfault, not an ldd segfault.

[10:07] *** IllvilJa joined
[10:10] *** Southen_ joined
[10:10] *** Southen joined
[10:10] *** jmlin joined
[10:24] *** sunnavy joined
[10:25] *** rindolf joined
[10:31] *** laye joined
[10:57] <meppl> good morning

[10:58] <moritz> good morning meppl ;)

[11:03] *** mj41 joined
[11:06] *** b_jonas joined
[11:09] *** Aankhen`` joined
[11:11] <moritz> did anybody fix "make install"?

[11:11] *** trunix left
[11:14] <lumi> 04:28 < agentzh> unobe++ seems to have fixed it :)

[11:15] <meppl> good morning moritz

[11:15] <moritz> lumi: thanks ;)

[11:25] *** cognominal__ joined
[11:35] *** the_dormant joined
[11:35] *** pnu joined
[11:41] *** aukjan is now known as aukjan|gone

[11:47] *** scw joined
[11:47] *** elmex joined
[11:49] *** nipotan is now known as nipotaway

[11:57] *** REPLeffect joined
[12:04] *** chris2 joined
[12:05] *** iblechbot joined
[12:52] *** avarab is now known as avar

[13:06] *** araujo joined
[13:17] *** penk joined
[13:17] *** penk left
[13:35] *** isaacd joined
[13:43] <gaal> what revision was the make install fix? svk log -l 100 doesn't show anything to suggest it; I think unobe just reported it worked for him.

[13:44] <moritz> I don't know, but it might have a different log entry than "fixed 'make install'" ;-)

[13:44] <gaal> I did actually read the log entries. :)

[13:45] <gaal> it *might* have been r15831, but only accidentally if so.

[13:46] <moritz> is it right that my (@a, @b) = .. generates slice context for the RHS?

[13:46] * gaal doesn't know

[13:50] *** REPLeffect joined
[13:56] *** japhb joined
[14:14] *** amnesiac joined
[14:42] <rindolf> Hi gaal 

[14:44] *** penk joined
[14:52] *** cognominal__ left
[14:55] *** cognominal joined
[14:58] <TimToady> moritz: no, ()= generates list context

[14:58] <TimToady> and the first @ would slurp up all the arguments as in P5

[14:59] <moritz> TimToady: so how would I achieve something like my (@a, @b) = my_function(); sub my_function { return @a, @b } ?

[14:59] <TimToady> and a ; would likely terminate the statement anywa

[14:59] <TimToady> use binding

[14:59] <TimToady> not assignment

[15:00] <moritz> no way with slice context?

[15:00] <TimToady> my ($a, $b) = @@ my_function()

[15:01] <TimToady> or my (*@@ab) := my_function()

[15:01] <moritz> is something like my(\@a, \@b) = @@ my_function() possible?

[15:01] <[particle]> or my ($a, $b) = slice my_function()

[15:05] <moritz> backslash are not references anymore, right?

[15:05] <moritz> so my (\@a, \@b) wouldn't do what I wanted

[15:13] <TimToady> we've never made \ mean anything in an lvalue, though the thought is ancient.  but I don't think we should encourage people to use assignment where they probably should be using binding

[15:14] <TimToady> the closest we got to \ in assignment is the \@ prototype in Perl 5

[15:15] <rhr> something like my :(@a is copy, @b is copy) := \(my_function()) ?

[15:17] *** iblechbot joined
[15:23] <TimToady> the \() around my_function is redundant; functions always return captures

[15:23] <TimToady> unsless you want a capture of a capture...

[15:23] <TimToady> wait, didn't see the colon

[15:24] <TimToady> but I don't think that changes anything, it just makes the sig more explicit

[15:25] <TimToady> and it really should be my_function's responsibility not to return the same arrays repeatedly

[15:25] <Aankhen``> I thought Perl 6 was going to be family-safe!

[15:25] <Aankhen``> Family friendly?

[15:25] <Aankhen``> It's too early for me to think coherently.

[15:26] <TimToady> I have the advantage of never thinking coherently, so I'm used to it...

[15:26] <Aankhen``> I can see where that would be a major evolutionary step up.

[15:28] *** kanru joined
[15:29] <Aankhen``> Hmm, properly formatted HTML mail s actually quite nice to look at.

[15:29] <Aankhen``> s/s/is/

[15:30] <Aankhen``> Is /<( ... )>/ == / $0 := (...) /?

[15:30] <TimToady> no

[15:30] <rhr> ok, I thought one or both of : and \ were probably redundant.  my always takes a signature?

[15:30] <TimToady> essentially

[15:31] <Aankhen``> Okey.

[15:31] <Aankhen``> I shall figure out whether I asked the right question, as well as ask more, when I'm back from college and reasonably awake.

[15:31] * Aankhen`` wanders off.

[15:32] <TimToady> <(...)> sets the return value of $$/, not @$/[0]

[15:34] <TimToady> actally, <( just sets $/.from, and )> just sets $/.to, and that string is what $/ returns in scalar context by default, but you can change it with an explicit {return $this}

[15:35] <rhr> do any of eq === eqv imply unicode normalization on strings?

[15:38] <TimToady> it's a good question, to which I haven't got a coherent answer yet.

[15:38] <TimToady> I think certainly eqv is defined in terms of canonicalization, so probably yes

[15:39] <TimToady> not so sure about the others

[15:39] <TimToady> don't want to slow everything down if we know everything was canonicalized coming in

[15:39] <rhr> ok.  expect a lot of unicode questions in the near future, I'm reading the spec in preparation for parsing UCD etc.

[15:39] <TimToady> btw, CRLF is not a grapheme

[15:39] <TimToady> those are both base characters in unicode

[15:40] <rhr> I was assuming "grapheme" was a unicode "extended grapheme cluster", and they explicitly include CRLF

[15:41] <TimToady> that would be a cluster of graphemes...

[15:41] <TimToady> but I haven't seen that term used yet, so I must be behind the times

[15:41] <rhr> I'm looking at 5.0

[15:42] <rhr> CRLF is the only instance of two base chars in an extended grapheme cluster AFAICS

[15:43] <rhr> but I'm not done reading the spec...

[15:43] <TimToady> sounds like a hack

[15:44] <TimToady> but the question is, what semantics do they imply by calling it that...

[15:44] <rhr> yup, kinda makes sense though.  I can remove it.

[15:44] <TimToady> we have a similar hack in making \n match CRLF, but \n interpolates to a native newline

[15:45] <rhr> I was wondering about that, S02 says it's LF

[15:46] <TimToady> where?

[15:47] <TimToady> I don't find "LF" or "linefeed" anywhere in the synopses

[15:47] <rhr> S02:2352

[15:48] <rhr> "LINE FEED" :)

[15:48] <avar> What do you mean by native newline? Something determined at configure time to be the \n on the system?

[15:48] *** jedai joined
[15:48] <avar> I'm considering the case where I build on windows and have a grammar with \n parse a unix-formatted file

[15:48] <TimToady> hmm

[15:49] <TimToady> avar: that should work fine

[15:49] <rhr> if \n is logical, should we have \l to go with \r?

[15:50] <avar> Not if the \n means the C-string "\r\n" and the rest of the grammar doesn't grok that

[15:50] <avar> like token { ^^ \n $$ }

[15:50] <TimToady> \n as a patterm match always matches all customary line endings

[15:50] <moritz> why not just use \v

[15:50] <TimToady> regardless of the native meaning of \n

[15:50] <TimToady> and in windows \n doesn't mean CRLF anyway

[15:50] <moritz> are there any vertical spaces that are not line ends?

[15:51] <TimToady> it still means LF, and you get the CR when the text file is written out

[15:51] <avar> So where does this kick in? At the IO level like in perl5?

[15:51] <avar> moritz: Yes, vertical tabs?

[15:51] <moritz> avar: ok, good point (I'm not very familiar with unicode)

[15:51] <avar> it's in ascii:)

[15:51] <moritz> so it's unicode as well ;)

[15:52] <avar> It's very frequent in GNU source code since emacs inserts it automatically in some cases (I think)

[15:52] <TimToady> the only machines that mix up the meaning of \n and \r are old Macs, and EBCDICish machines

[15:52] <TimToady> and S02 is more or less ignoring them

[15:52] <avar> Yeah, luckily diversity is dying:)

[15:53] <TimToady> now if we could only settle on / as universal path separator...

[15:54] *** prism joined
[15:54] <avar> TimToady: But if you really mean that this should do the equivalent of p5 perlio that should probably be spelled out, I always thought my Str $str = "\n"; would give me the C str { '\r', '\n' } on windows and { '\n' } on *nix

[15:54] <avar> or maybe it has been fixed and I just haven't read them in a while:)

[15:54] <rhr> TimToady: so should we declare that CRLF isn't a Perl grapheme?  or should we stick to some particular unicode definition of grapheme?

[15:55] <TimToady> I need to figure out what Unicode 5.0 is up to with "grapheme clusters"

[15:56] <TimToady> but for now, CRLF is not a grapheme

[15:56] <rhr> http://www.unicode.org/reports/tr29/tr29-11.html

[15:56] <lambdabot> Title: UAX #29: Text Boundaries

[15:57] *** weinigLap joined
[15:57] <TimToady> since they're talking about "user perceived boundaries", maybe that's just a minimal language level rather than a grapheme level

[15:58] <TimToady> though if it's universal, it sounds graphemish

[15:58] *** weinigLap joined
[16:01] <rhr> that's not the document I was reading yesterday, and now I can't find it...

[16:03] <TimToady> well, perhaps there's a "use cluster" level between graphemes and languages

[16:05] <rhr> hmm.  would anybody use it?  how would it be different from graphs other than CRLF?

[16:06] <TimToady> but it's really just a "default universal language", I think

[16:06] <TimToady> since "use CharMyLanguage" overrides it

[16:07] <TimToady> so I think we should just treat it as a generic language

[16:07] <TimToady> when you set a language level, it doesn't undo the underlying codepoints or graphemes, so those levels are different

[16:08] <TimToady> Note: As with the other default specifications, implementations may override (tailor) the results to meet the requirements of different environments or particular languages.

[16:09] <TimToady> since the emphasis there is on override, not tailor, I think it's a destructive replacement of a generic language with a specific language

[16:09] <moritz> well, the generic language is perl ;)

[16:10] <rhr> I'm still figuring out what all is affected by changing the default language...

[16:10] <rhr> btw, what I was reading yesterday was p.32 of http://www.unicode.org/versions/Unicode5.0.0/ch03.pdf

[16:11] *** lisppaste3 joined
[16:16] <TimToady> okay, I see that they've made CRLF a special grapheme cluster, but an "extended grapheme cluster" is something else

[16:16] <TimToady> I hate Unicode's naming conventions...

[16:17] <rhr> "grapheme cluster" doesn't include control chars, extended does

[16:17] <TimToady> grapheme cluster now include (a) CRLF

[16:19] <TimToady> the only ramification I can think of is that under "use graphs" we can make . match CRLF as a unit

[16:19] <rhr> right

[16:20] <TimToady> unless we say that all files on Windows are opened by default in binary, in which case we would have to make "\n" or something else produce CRLF

[16:20] <TimToady> but that seems wrong to me

[16:21] <TimToady> Perl should be biased towards text files

[16:23] <TimToady> and I think the CRLF decision of Windows should be pushed out of the language, except for the conciliatory \n matching

[16:23] <TimToady> and now maybe . matching

[16:24] <TimToady> this also means that \h can refuse to match CRLF while continuing to match CR!

[16:24] <TimToady> since those are now different graphemes

[16:25] <TimToady> and \v should match CRLF and LF but not CR

[16:25] <TimToady> (under the default grapheme level)

[16:26] <rhr> so are you leaning toward going with "extended grapheme cluster"?

[16:26] <TimToady> what do you mean "going with"?

[16:26] <TimToady> it's an allowable language

[16:27] <rhr> define Perl grapheme as?

[16:27] <TimToady> it's not the default

[16:27] <TimToady> as defined on your p.32

[16:27] <TimToady> Grapheme cluster: A maximal character sequence consisting of a grapheme base fol-

[16:27] <TimToady> lowed by zero or more grapheme extenders or, alternatively, the sequence <CR, LF>.

[16:28] <TimToady> CRLF is a "grapheme cluster" under use graphs

[16:28] <rhr> right, but a lot of chars aren't included in the plain "grapheme base", so e.g. DEL isn't counted as a grapheme

[16:28] <TimToady> but use graphs is agnostic towards "extended grapheme clusters"

[16:28] <TimToady> it's a base character

[16:29] <TimToady> as far as Perl is concerned

[16:31] <rhr> Cc - Cf - Cs - Co - Cn - Zl - Zp aren't included in "grapheme base", I think that's what "extended" is about, otherwise you'd count sequences of those as 0 graphs, no?

[16:32] *** unobe_away is now known as unobe

[16:33] <TimToady> Perl defines a grapheme as <!M> <M>* or some such

[16:34] <TimToady> and maybe now with CRLF mixed in

[16:34] <rhr> ok (that's what the current .graphs does, more or less)

[16:34] <TimToady> in which case your current \r\n test is probably okay

[16:35] <unobe> gaal, lumi, moritz : I fixed the make install back when agentzh first mentioned it, so quite a few revisions ago

[16:35] <rhr> but aside from spacing marks (which I don't understand) I think that's very close to "extended grapheme cluster"

[16:35] <unobe> i just didn't have time to try it out

[16:35] <rhr> whoops, I just reverted the CRLF stuff

[16:42] <unobe> gaal, moritz: r16249

[16:44] *** unobe is now known as unobe_away

[16:45] <moritz> unobe_away: thanks

[16:47] <moritz> r(16248 to 16850) only modify util/smartlinks.pl

[16:47] <moritz> is that really involved in the build process?

[16:48] *** rindolf joined
[16:50] *** dwave joined
[16:54] *** chris2 joined
[17:00] *** bonesss joined
[17:06] *** penk joined
[17:08] *** amnesiac joined
[17:10] *** larsen_ joined
[17:11] *** Psyche^ joined
[17:12] *** justatheory joined
[17:28] *** Psyche^ is now known as Patterner

[17:30] *** weinigLap joined
[17:36] *** awwaiid joined
[17:49] <gaal> unobe++ # r16205 :-)

[17:50] <gaal> clkao++ # svk desc r$upsream@ on svk 2.x

[17:52] *** dduncan joined
[18:02] *** penk joined
[18:07] *** ssotka joined
[18:27] *** thoughtpolice joined
[18:28] *** macli joined
[18:35] <thoughtpolice> afternoon

[18:36] <dduncan> in about 20 minutes it will be here

[18:44] <thoughtpolice> s'already here for me.

[18:44] <thoughtpolice> you people and your time zones and stuff.

[18:47] <rindolf> Hi thoughtpolice 

[18:48] <thoughtpolice> hey rindolf 

[18:48] <rindolf> Man! I cannot figure out Eclipse.

[18:49] <thoughtpolice> :/ just being difficult (usability)?

[18:49] <thoughtpolice> because that happens to me all the time

[18:49] <thoughtpolice> (i only use eclipse for radrails but it has issues like freezes frequently.)

[18:50] <rindolf> thoughtpolice: Eclipse doesn't freeze.

[18:50] <moritz> eclipse? the Java OS? *g*

[18:50] <rindolf> thoughtpolice: not at the moment at least?

[18:50] <rindolf> moritz: it's not an IDE - it's an operating system.

[18:50] <rindolf> I'm trying to work on FOP.

[18:50] <rindolf> And Eclipse is DOA.

[18:50] <rindolf> I don't seem to have an existing Eclipse project.

[18:50] *** ssotka joined
[18:51] <rindolf> And the README does not mention it.

[18:51] <thoughtpolice> hm eclipse pulls stuff like that on me all the time

[18:51] <rindolf> And I have no idea how to import an Ant file.

[18:51] <thoughtpolice> then again at any given time, a lot of my memory is used up

[18:51] <thoughtpolice> so ymmv :p

[18:51] <rindolf> And no one on #eclipse is any help.

[18:51] <rindolf> Someone told me "Import Project".

[18:51] <rindolf> But there isn't anything like that.

[18:53] *** takanori joined
[18:54] <sparvu> hey all

[18:54] <rindolf> Hi sparvu 

[18:54] <thoughtpolice> g'day

[18:54] <sparvu> I have reported my problem about pugs on Solaris 10

[18:54] <thoughtpolice> ever get your solaris build worked out?

[18:54] <thoughtpolice> ah

[18:54] <sparvu> well looked a problem with ghc ditribution and a static libray wrong build

[18:55] <sparvu> Im working with Sun and the maintainer of ghc for Solaris 10 to get this sorted out

[18:55] <thoughtpolice> ah. at least you're getting somewhere. :)

[18:55] <sparvu> when I will have a working pugs, Im planning to make a Solaris 10 package

[18:55] <sparvu> Lets see

[18:55] <sparvu> One question: Im a bit confused about parrot and pugs

[18:56] <sparvu> So is pugs a temporary step towards parrot ?

[18:56] <thoughtpolice> it's a method to bootstrap perl 6.

[18:56] <sparvu> or is it to stay here even when parrot is ready ?

[18:57] <moritz> sparvu: parrot is "Just" a virtual maschine

[18:57] <moritz> sparvu: and pugs is a perl 6 compiler

[18:57] <moritz> sparvu: so the question is "is pugs going to stay when 6-in-6 is ready?"

[18:57] <thoughtpolice> the plan is if it's needed, once pugs milestones are 'done' it'll be rewritten in perl 6 so you have a fully bootstrapped compiler.

[18:58] <sparvu> moritz: correct

[18:58] <sparvu> got the point.

[18:58] <[particle]> sparvu: there will probably be more than one implementation of perl 6

[18:58] *** po_boy joined
[18:58] <[particle]> sparvu: no "official" implementation

[18:59] <moritz> everything that passes the test cases is considered to "official"

[18:59] <sparvu> right, thanks. So we have to wait until Parrot is ready 

[18:59] <sparvu> Yeah, so it is important to get pugs running on Solaris :)

[18:59] <thoughtpolice> parrot is already looking interesting

[18:59] * moritz planned to write a toy interpreter that just read the "plan $n" statements and print n times "okn", so it would pass the test suite ;)

[18:59] <thoughtpolice> I have a build on my openbsd box now iirc

[19:00] <thoughtpolice> moritz: sneaky

[19:00] <moritz> thoughtpolice: it is indeed

[19:00] <sparvu> parrot build 100% ok on Solaris 10 x86 and SPARC

[19:00] <moritz> cool

[19:00] <moritz> parrot++

[19:00] <sparvu> pugs is a bit more triky because of ghc

[19:00] <moritz> thoughtpolice: would have been a nice april fool joke ;)

[19:00] <TimToady> so we'll have to put in an obfuscated test that prints 0..1 some other way...

[19:00] <thoughtpolice> moritz: :)

[19:00] *** lidden joined
[19:01] * [particle] is currently getting parrot to build on x64

[19:01] * sparvu curious: can you run any Perl 6 now in parrot ?

[19:01] <moritz> TimToady: a BEGIN { $a = 2 }; plan $a; would be a good start ;)

[19:01] <thoughtpolice> parrot is a virtual machine.

[19:02] <moritz> sparvu: there is a perl 6 implementation in languagues/perl6/ in the parrot svn...

[19:02] <thoughtpolice> it's only 1/2 the equation in the case of your question; the compiler is the other.

[19:02] <thoughtpolice> i've been meaning to give a shot to the parrot toolchain

[19:02] <thoughtpolice> it looks pretty interesting

[19:02] <moritz> sparvu: so there is some kind of "6-on-parrot"

[19:03] <moritz> sparvu: and pugs has a parrot backend, which needs brave souls to unbreak ;)

[19:03] <thoughtpolice> yes, most def.

[19:03] <moritz> and iirc mp6 has an experimental PIR emitter as well

[19:03] <moritz> fglock++

[19:03] <moritz> anyway, gotta go, learing :( &

[19:03] <thoughtpolice> later

[19:03] <sparvu> moritz: cheers. I will try to build a parrot Solaris package for x86 and sparc

[19:04] <sparvu> cya

[19:04] <moritz> sparvu: btw there is #parrot in irc.perl.org

[19:04] <sparvu> aha. Thx. 

[19:04] <moritz> & # (now for real ;)

[19:11] *** the_dormant joined
[19:17] *** lvh joined
[19:17] <lvh> hi

[19:18] <sparvu> Here you can see the original report about pugs and ghc: http://www.opensolaris.org/jive/thread.jspa?threadID=32325&tstart=0

[19:18] <lambdabot> Title: OpenSolaris Forums: Perl 6 on snv_55b x86 ..., http://tinyurl.com/2hu8oy

[19:18] <lvh> could anyone point me to a page where the rationale is explained for moving to @foo[3] from $foo[3]?

[19:18] *** bonesss joined
[19:19] <Tene> lvh: one of the apocalypses, probably.

[19:21] <Tene> lvh: the main reason is basically "People are regularly confused by this, and it doesn't seem to offer any concrete advantage." as I recall.

[19:21] <spinclad> lvh: ambiguity, for one: in Perl 5, if you have $foo holding an arrayref and @foo as an array, which does $foo[3] mean?

[19:22] <Tene> spinclad: is $arrayref[0] valid?  Is -> not required?

[19:22] <spinclad> (sorry, that's a rationale, not a page)

[19:23] <TimToady> Tene: that is correct

[19:23] <spinclad> you may be right.  i seem to recall the Perl 6 designers wanting to drop the ->/. though.

[19:23] <lvh> spinclad: indeed, i was wondering if that was even valid

[19:23] <PerlJam> spinclad: in perl 5 it's not a problem because you need the ->

[19:23] <Tene> PerlJam++

[19:24] <TimToady> $array.[0] and $array[0] are equivalent

[19:24] <lvh> anything with a @ in front of it is an array, with a $ in front of it its a scalar. alway.s

[19:24] <Tene> but perl5 $array[0] and $array->[0] are not equivalent.

[19:24] <lvh> $array[0] seems strange to me

[19:24] <lvh> err

[19:24] <lvh> nvm :P

[19:24] <lvh> i was quoting the wrong thing

[19:24] <Tene> lvh: also, you *can* store arrays and hashes in scalars in Perl 6.

[19:24] <PerlJam> lvh: now the rules is a little different but still very consistent.

[19:25] <PerlJam> s/rules/rule/

[19:25] <lvh> $arrayref[0]

[19:25] <Tene> ?eval my $a = 1..10; $a[0]

[19:25] <lvh> what does that mean?

[19:25] *** evalbot_r16637 is now known as evalbot_r16643

[19:25] <evalbot_r16643> \1

[19:25] <lvh> unless arrayref is secretly an array

[19:25] <PerlJam> lvh: in perl 6 "arrayrefs" are transparent

[19:25] <TimToady> there are no refs in Perl 6, officially

[19:25] <Tene> lvh: that's what I was saying.  i was refuting spinclad's claim of ambiguity.

[19:25] <lvh> Tene: ah.

[19:25] <lvh> awww.

[19:25] <lvh> ok

[19:25] <lvh> seems confusing, but ok

[19:26] <lvh> the interpreter figures out what it needs by itself internally?

[19:26] <TimToady> it's very easy to get used to, and you don't have to match an early @ with a later slice subscript

[19:26] <PerlJam> lvh: it's not confusing at all.  Anytime you see @, you know you're dealing with an array in some fashion.

[19:26] <TimToady> using the sigil to indicate slice was a vestige of when Perl only handled flat data structures

[19:26] <PerlJam> lvh: same thing with % for hashes.

[19:26] <lvh> PerlJam: even if its secretly not an array but an element of i?

[19:27] <lvh> PerlJam: it*

[19:27] <lvh> meh, maybe. i'm not convinced but i'll give it a try

[19:27] <PerlJam> lvh: @foo[0]  # you're still doing something with the @foo array.

[19:27] <TimToady> in P5 you have to do @{much stuff}[0] to get a slice

[19:28] <TimToady> in P6 it's just much stuff[0]

[19:28] <PerlJam> lvh: @foo[1,2,3]   # more mucking with @foo

[19:28] <lvh> PerlJam: $foo[0] # this is a scalar

[19:28] <TimToady> sliceness is now entirely determined by the subscript

[19:28] <PerlJam> lvh; the sigil no longer describes what you get back, but what data structure you're using.

[19:28] <TimToady> so you only have to look in one place to know

[19:29] <lvh> i suppose. i got use to $this_is_a_scalar_no_matter_what['moo'] syntax fast enough

[19:29] <lvh> PerlJam: i suppose its easier in the sense that in perl5 i have to remember if $ref is a hashref or an array ref

[19:29] <TimToady> indeed

[19:29] <PerlJam> lvh: And now you can do things like (@a,@b) = (@c,@d) and it makes more sense to more people  :)

[19:30] <TimToady> hmm, you probably want := there

[19:30] <PerlJam> yeah, I mistyped

[19:30] <lvh> that new syntax too?

[19:30] <lvh> is there a compendium of everything shiny and new a perl5 addict needs to know before he can write perl6?

[19:30] <TimToady> yes, binding instead of assignment.  It's just the same as what happens between actual arguments and formal parameters

[19:31] <lvh> like, what is this := thing

[19:31] <TimToady> depends on whether you want rationale

[19:31] <spinclad> lvh: that would be the synopses, i think

[19:31] <TimToady> apocalypses for rationale, synopses for bare facts

[19:31] <lvh> TimToady: whats the difference between (@a,@b) = (@c,@d) and (@a,@b) := (@c,@d) for @a,@b,@c,@d?

[19:32] <lvh> but i can have a hash of hashes of arrays of hashes in perl6 without using any references?

[19:36] <TimToady> someone else will have to explain, gotta run &

[19:38] <Tene> ?eval {foo => { bar => ({baz => 1, qux => 2},{fl => 3, bn => 4})}}

[19:38] <evalbot_r16643> ("foo" => {("bar" => ({("baz" => 1), ("qux" => 2)}, {("bn" => 4), ("fl" => 3)})),})

[19:38] <[particle]> lvh: evalbot evaluates perl 6 using pugs

[19:39] <[particle]> the _rXXXXX is the pugs subversion revision number

[19:41] <Tene> ?eval (:foo(:bar( (:baz<1>, :frotz<2>), (:w<3>,:b<4>) )))

[19:41] <evalbot_r16643> ("foo" => ("bar" => (("baz" => "1"), ("frotz" => "2"), ("w" => "3"), ("b" => "4"))))

[19:43] <[particle]> ?eval my %hash = 'foo' => 'bar'; my @array = <<1 2 3>>; @array.push(%hash); print @array.perl

[19:43] <evalbot_r16643> OUTPUT[["1", "2", "3", ("foo" => "bar")]] Bool::True

[19:44] <[particle]> see, no messy backslashes... no references.

[19:45] <[particle]> ?eval my %hash = 'foo' => 'bar'; my @array = <<1 2 3>>; @array.push(%hash); print @array[-1]{'foo'}

[19:45] <evalbot_r16643> OUTPUT[bar] Bool::True

[19:45] * Tene used the wrong brackets.

[19:45] <lvh> so, what state is perl6 in?

[19:45] <[particle]> the spec is under development, and so is the implementation

[19:45] <lvh> I know its going to be released when its ready, but if you'd have to make an educated guess, would it be in the order of magnitude of months or years?

[19:46] <[particle]> you should check out the docs at http://spec.pugscode.org

[19:46] <lambdabot> Title: Official Perl 6 Documentation

[19:47] <[particle]> it will show you what state the docs are in, and what state the implementation is in (spec test coverage)

[19:48] <[particle]> lvh: maybe sometime in 2008 there will be a beta... that's my guess

[19:49] <[particle]> we need your help. want to join us?

[19:50] <lvh> [particle]: im quite sure i don't know enough perl to be a candidate

[19:50] <lvh> [particle]: but, meh, why not

[19:50] <lvh> [particle]: i have too much time on my hands as it is

[19:51] <[particle]> you can help in many ways, not just perl code

[19:51] <[particle]> however, writing perl 6 is fun :)

[19:51] <[particle]> msg me your email address, and i'll give you a pugs commit bit

[19:52] <lvh> [particle]: done, check your privmsgs

[19:52] <lvh> [particle]: where do i get the tshirt? :-P

[19:54] <spinclad> 'my folks went off to code Perl 6 and all they sent back was this damn shirt'

[19:59] <[particle]> lvh: commit bit invite sent. expect an email whenever the server gets around to it

[20:14] *** Aankh|Clone joined
[20:16] *** conradvermeule1 joined
[20:17] <lvh> [particle]: got it, thanks.

[20:18] <[particle]> it's customary to modify the AUTHORS file to make sure your commit bit works

[20:19] *** conradvermeule1 left
[20:22] <lvh> [particle]: ill get right at it

[20:23] <lvh> [particle]: commitbit works? you mean, not over subversion?

[20:24] <[particle]> use subversion, check out a working copy of pugs

[20:24] <[particle]> modify AUTHORS, commit

[20:24] <lvh> [particle]: ok, thats what i was doing :-)

[20:28] <lvh> djeez, my wifis practically dead out here

[20:28] *** gilby joined
[20:31] *** weinigLap joined
[20:32] *** rindolf joined
[20:33] *** elmex joined
[20:44] *** weinigLap joined
[20:50] <rhr> another way to phrase my previous question: are two Grapheme objects === if they're canonically equivalent?

[20:50] <rhr> if so, eqv might compare Strs as arrays of Graphs (or Codes or ...) so it would get normalization "for free" at the appropriate unicode levels (graphs or higher)

[21:09] *** weinigLap_ joined
[21:18] *** |Jedai| joined
[21:29] *** devogon_ joined
[21:40] *** polettix joined
[21:48] *** offby1 left
[22:25] *** weinigLap joined
[22:26] *** polettix is now known as polemix

[22:27] *** polemix is now known as polettix

[22:27] *** polettix is now known as polemix

[22:27] *** polemix left
[22:32] *** iblechbot joined
[22:59] <TimToady> rhr: I think in general grapheme level should pretend that everything is normalized, and codepoint level should probably not

[23:01] *** larsen_ joined
[23:05] *** polemix joined
[23:07] *** falesca joined
[23:16] *** weinigLap_ joined
[23:18] *** weinigLap joined
[23:41] <rhr> TimToady: sounds good.  Is there a way to get an array view into a Str other than by doing e.g. $s ~~ m:codes/ @<codes> := (.)* / ?

[23:42] *** polemix is now known as polettix

[23:42] *** polettix is now known as poletti

[23:42] *** poletti is now known as polemix

[23:46] <TimToady> can probably eventually convert to Buf32

[23:47] <TimToady> presuming codes and not graphs, which wouldn't fit

[23:49] <TimToady> but that would be a conversion, not a view

[23:49] <TimToady> I suppose one could have a magical Buf32ish type that did a view

[23:50] <TimToady> 'course, substr et al are supposed to give you most of that if you're at "use codes" level.

[23:54] <rhr> my concern is that substr could turn an O(n) scanning algorithm into O(n**2), e.g. my implementation of Str.graphs

[23:55] <rhr> and how is substr itself implemented?

[23:55] <TimToady> would be nice to have some way of telling a string "analyze yourself for indexing"

[23:55] <rhr> right

[23:55] <TimToady> equiv to your (.)*

[23:57] <TimToady> Perl 5's substr does some caching of the last used position, I think

[23:57] <rhr> and for lang-specific processing you might want to look at an arrary of graphs

[23:57] <TimToady> since you generally have pretty good locality

[23:58] <TimToady> interesting that cat() kind of goes the other direction, so maybe a kind of decat...

