[00:23] *** dduncan joined
[00:24] *** dduncan left
[00:24] *** obvio171 joined
[00:28] *** dduncan joined
[00:42] *** b00t joined
[00:45] *** nipotaway is now known as nipotan

[00:49] *** amnesiac joined
[01:13] *** dolmans joined
[01:33] *** japhb joined
[01:50] *** mako132_ joined
[01:52] *** yumiko joined
[02:05] *** justatheory joined
[04:09] *** SubStack joined
[04:25] *** vel joined
[04:44] *** [particle] joined
[05:12] *** ofer joined
[05:19] *** Alias_ joined
[05:33] *** SubStack joined
[05:59] *** [particle] joined
[06:09] *** marmic joined
[06:29] *** rindolf joined
[07:03] *** jamhed joined
[07:14] *** iblechbot joined
[07:23] *** jisom joined
[07:25] *** obvio171 joined
[07:28] *** obvio171 joined
[07:29] *** BooK_ joined
[07:36] *** obvio171 joined
[07:44] *** dmq joined
[07:47] *** SubStack joined
[07:57] *** obvio171 joined
[08:01] *** Belaf joined
[08:04] *** obvio171 joined
[08:11] *** buetow joined
[08:29] *** andara joined
[08:46] *** dduncan left
[09:02] *** obvio171 joined
[09:03] *** riffraff joined
[09:03] <riffraff> ciao

[09:10] *** baest_ joined
[09:11] *** baest joined
[09:13] *** shady joined
[09:17] *** franck__ joined
[09:32] *** b_jonas joined
[09:33] *** obvio171 joined
[09:53] *** obvio171 joined
[09:53] *** polettix joined
[09:56] *** obvio171 joined
[10:06] <dolmans> test(1,2,3) may differ from test (1,2,3), is it a bad design or not?

[10:07] <riffraff> I think 

[10:10] <dolmans> language designing is a very hard homework, tossing to those talents.

[10:12] <riffraff> ops sorry 

[10:12] <riffraff> wrong chan

[10:15] *** obvio171 joined
[10:18] *** obvio171 joined
[10:22] <dmq> answer to fglock from yesterday: yes

[10:22] <riffraff> is doesn't make sens that junctions work "sometimes" but not always, right?

[10:22] <riffraff> ouch

[10:22] <riffraff> how comes?

[10:22] <dmq> $subrule=qr/.*/; /a (??{$subrule}) b/

[10:23] <dmq> or: /(?(DEFINE)(?<subrule>.*)) a (?&subrule) b/

[10:24] *** ruoso joined
[10:25] *** obvio171_ joined
[10:27] *** buetow joined
[10:32] <riffraff> dmq, sorry, what is that? answer to me, dolmans or what?

[10:34] *** jisom_ joined
[10:36] <dmq> no thats in reply to fglock's question from last night/yesterday

[10:36] <riffraff> oh sorry

[10:41] <dmq> nothing to be sorry about. :-)

[10:42] <riffraff> that is very ugly, if I put a junction in a variable and do is $j, $foo I get a result

[10:42] <riffraff> but if I do is make_function(),$foo 

[10:42] <riffraff> I get another

[10:42] <riffraff> is this expected behaviour?

[10:44] *** hareldvd joined
[10:52] *** b_jonas joined
[10:54] *** chris2 joined
[10:56] * riffraff notices that junctions sometime don't have a proper .values()

[11:00] *** buetow joined
[11:17] *** fglock joined
[11:18] <svnbot6> r16224 | fglock++ | [PCR] - implemented <?{...}> and <!{...}> in backtracking mode

[11:18] <fglock> dmq: thanks

[11:19] <avar> fglock: that works?

[11:21] <fglock> avar: yes - perl -e ' $subrule=qr/.*/; "axxxb" =~ /a ((??{$subrule})) b/x; print $1 '

[11:23] <fglock> just to be sure it is not interpolating: perl -e ' my $subrule; my $rule=qr/a((??{$subrule}))b/; $subrule=qr/.*/; "axxxb" =~ /$rule/x; print $1 '

[11:33] <svnbot6> r16225 | fglock++ | Pugs-Compiler-Rule-0.23 in CPAN

[11:43] *** nipotan is now known as nipotaway

[11:50] *** MarLaw joined
[11:50] <MarLaw> Hello

[11:52] *** zafoeta joined
[11:52] <zafoeta> hi guys

[11:52] <moritz> hi

[11:52] <MarLaw> I'm with a friend, we've done some haskell at university and we like it, we're thinking of joining pugs if help is needed and i've did  (a little)  on Language Processors again at university

[11:54] <dmq> no it doesnt interpolate.

[11:54] <dmq> thats the infamous bizarre parsing code that avar bumped into a while back.

[11:55] <dmq> and its worth noting that Perl5 and PCRE have different behaviour for named-recursion.

[11:55] <dmq> specifically in PCRE named recursion is atomic. wheras in perl5 much work was done to make it backtrackable.

[11:55] <dmq> of course we really need a superlinear cache for named recursion/(??{...})

[11:56] <dmq> but nobody seems to have the both the inclination and tuits.

[11:57] <dmq> you might find that translating subrules to named recursion brings a speedup...

[11:57] <moritz> MarLaw: do you want a commit bit?

[11:58] <dmq> iow: /(?(DEFINE)(?<subrule>$subrule)) a ((?&subrule)) b/x

[11:58] <MarLaw> yeah that would be great moritz 

[11:58] <zafoeta> had one yesterday ... 

[11:59] *** obvio171_ joined
[11:59] <dmq> that will interpolate, but to your benefit

[11:59] *** obvio171_ is now known as obvio171

[11:59] <moritz> MarLaw: just /msg me your email adress

[11:59] * dmq pokes fglock

[11:59] <zafoeta> hey, i was reading yesterday the syopsis

[11:59] <zafoeta> there seems a lot to read

[12:00] <zafoeta> do we have to knows it first very good before we can help with any implementation coding ... ?

[12:00] <moritz> MarLaw: btw on freenode you need to be registered to /msg... if you are not (and not keen on it either), just write it in the channel

[12:00] <moritz> MarLaw: unless you are afraid of spam, that is ;)

[12:01] <MarLaw> moritz: i'm sending with /msg

[12:01] <MarLaw> not getting any ?

[12:01] <MarLaw> I think i'm registered

[12:01] <moritz> MarLaw: no :(

[12:01] <MarLaw> ok

[12:03] <MarLaw> 'x'.$mynickname .'x@gmail.com' is enough antispam ?

[12:04] <moritz> it is indeed ;)

[12:04] <zafoeta> and what if @gmail is an array?

[12:04] <MarLaw> what do you mean ?

[12:04] <moritz> MarLaw: sadly you need a bit patience because commitbit.pugsocode.org times out :(

[12:04] <moritz> MarLaw: ignore him...

[12:05] <moritz> '..' is non-interpolating ;)

[12:05] <fglock> dmq: i'm back 

[12:06] <dmq> did you see those comments i made?

[12:06] <fglock> dmq: re subrules, I need them to be lexically redefinable, so I prefer not to inline

[12:07] <fglock> that is, no named recursion

[12:07] <moritz> can anybody else invite MarLaw? I just get timeouts

[12:07] <dmq> i dont see why it wouldnt be lexically redefinable.

[12:07] <moritz> what the hell is going on on feather?

[12:07] <dmq> its just a different approach to how you embed it.

[12:08] <dmq> the advantage of the named recursion approach being that it is optimizable by the compiler.

[12:08] <dmq> essentially its a question of latebinding versus early binding.

[12:08] <fglock> dmq: isn't $subrule interpolated there?

[12:08] <dmq> yes.

[12:09] <dmq> but thats ok. it shouldnt change for the duration of the match should it?

[12:10] <dmq> the thing that is special about (??{..}) is that the regex engine has to deal witht he possibility that the returned pattern could be different every time.

[12:10] <dmq> but if you are doing (??{ $some_qr }) then it doesnt change every time.

[12:11] <dmq> also (??{ ... }) has the potential for tricky bugs pre 5.10 

[12:11] <fglock> consider $rule = qr((?(DEFINE)(?<subrule>$subrule))a((?&subrule))b);

[12:12] <fglock> $rule will not be recompiled later

[12:12] <fglock> reinterpolated

[12:12] <dmq> right, yeah if you are storing the rule then its different.

[12:16] <fglock> ok - but I'll still consider the optimization when possible

[12:18] <dmq> actually, it makes me think maybe we could do something to deal with scenario.

[12:18] <dmq> *maybe*

[12:19] <fglock> hmm - I can't update v6.pm on CPAN; depends on Module::Compile and Sub::Multi fixes :(

[12:22] *** riffraff joined
[12:22] <riffraff> hello

[12:22] <riffraff>  is it possible to define my own subroutine traits in current pugs?

[12:22] *** sonorous joined
[12:23] <riffraff> I see I can do sub bar is foo {} and it always eval's correctly but I don't think it does anything

[12:24] <fglock> riffraff: you can use it with a 'role'; this is being refactored, not sure how much works

[12:25] <riffraff> so I just follow S12's trait description ?

[12:27] <moritz> MarLaw: commit bit is finally sent, it will take a few minutes until you receive an email

[12:27] <MarLaw> ok

[12:27] <MarLaw> thanks moritz 

[12:27] <moritz> no problem ,)

[12:29] *** iblechbot joined
[12:33] <fglock> I fixed the v6.pm Makefile.PL on CPAN, but I didn't update the code

[12:35] <fglock> @tell audreyt: have you registered the 'Pugs' namespace in CPAN? I need comaint in order to have the v6.pm modules indexed

[12:36] <lambdabot> Consider it noted.

[12:37] <avar> MarLaw: welcome:)

[12:39] <fglock> @tell audreyt: actually, the problem is specific to Pugs::Grammar::P6Rule - you are the owner; I need comaint

[12:39] <lambdabot> Consider it noted.

[12:42] *** buetow joined
[12:47] *** JarJarBinks joined
[12:48] *** kanru joined
[12:51] *** vel joined
[12:51] <moritz> MarLaw: did you receive an email?

[12:55] <MarLaw> nope

[13:00] <moritz> damned

[13:00] <fglock> @tell clkao: would you upload Sub::Multi to CPAN? I've made a small fix

[13:00] <lambdabot> Consider it noted.

[13:01] <moritz> fglock: can you try to invite MarLaw? connection times out for me :(

[13:01] <fglock> trying...

[13:04] <zafoeta> moritz: if i want to start looking at code of pugs, where do i better start of? i am reading the synopsis and want to see some examples to learn perl6. i just know perl5

[13:05] <zafoeta> also, i am quite new in Haskell

[13:05] *** Khisanth joined
[13:06] <moritz> zafoeta: first, check out pugs repository...

[13:06] <moritz> in docs/ there are a few interesting things...

[13:06] <zafoeta> i have ti checked out already

[13:06] <moritz> mainly  docs/Pugs/Doc/

[13:07] <fglock> zafoeta: take a look at the tests, under t/

[13:07] <zafoeta> just have to install the ghc 6.6

[13:07] <zafoeta> ok .. 

[13:07] <moritz> then examples/ is a good place to start

[13:07] <zafoeta> any mac user here?

[13:08] <riffraff> zafoeta, yep

[13:08] <riffraff> need help to install ghc6.6?

[13:08] <zafoeta> i had installed ghc 6.4

[13:08] <riffraff> remove it

[13:08] <zafoeta> updated to 6.6 and get an error

[13:09] <fglock> MarLaw: sorry, it looks like the invitation page is not working at the moment

[13:09] <MarLaw> no problems, i'll get it from zafoeta 

[13:09] <riffraff> I had some problems too, my solution was to remove ghc 6.4 completely then install the binaries from audreyt

[13:09] <zafoeta> how do i remove it? sorry for the stupid question

[13:09] <MarLaw> his the man

[13:10] <MarLaw> he's

[13:10] <zafoeta> i am actually sitting with Lawrence in the room

[13:10] <zafoeta> :)

[13:10] <riffraff> how did you install it? I used the .dmg package IIRC

[13:10] <riffraff> for 6.4

[13:10] <riffraff> otherwise I'm afraid you have to hunt it around the file system

[13:13] <zafoeta> i used the .dmg, but it seems it has a problem removing the libraries

[13:14] <zafoeta> i think it has to do with the update i did

[13:14] <riffraff> I see

[13:14] <riffraff> don't nkow how to help then, I'm sorry

[13:21] <zafoeta> anybody knows a good haskell editor for os x?

[13:22] <zafoeta> and perl6 editor for os x?

[13:22] <gnuvince> zafoeta: vim or Emacs?

[13:22] <lumi> zafoeta: I use emacs with haskell-mode

[13:23] <moritz> zafoeta: vim and emacs both have perl 6 modes, but I think the vim one is better supported atm

[13:24] <zafoeta> i see, i prefer vim then. but does vim have haskell mode as well?

[13:24] <rindolf> zafoeta: it does, sure.

[13:25] <zafoeta> cool

[13:26] <moritz> vim has a mode for anything you can think of - nearly ;-)

[13:26] <moritz> ls -1 /usr/share/vim/vim70/syntax/|wc -l

[13:26] <moritz> 482

[13:29] <Patterner> Are there other editors than TextMate on OS X?

[13:30] <avar> emacs

[13:36] *** Casan joined
[13:36] <moritz> avar: Patterner was asking for editors, not for OSes ;)

[13:36] <moritz> *SCNR*

[13:36] <Patterner> "Emacs is a good OS, but it lacks a decent editor"

[13:39] <svnbot6> r16226 | fglock++ | [PCR] - fixed serialized form of '^^' '$$'

[13:43] *** chris2 joined
[13:44] *** jerrylee joined
[13:44] <riffraff> moritz, I have something that vim doesn't have a mode for

[13:44] <riffraff> NesC

[13:44] *** [particle] joined
[13:45] <riffraff> a C-dialect for embeded systems with concurrency & component-based development 

[13:45] <riffraff> (I had to write my small syntax.vim when doing my bachelor thesis :)

[13:48] <moritz> riffraff: well, commit it to perl.org ;)

[13:48] <moritz> riffraff: of course there are many things that vim doesn't hilight...

[13:48] <riffraff> not many really

[13:48] <riffraff> :)

[13:49] <moritz> but when I work with it, most files are colorfull ;)

[13:49] <[particle]> it even highlights the need for aid in uganda

[13:49] <[particle]> ;)

[13:50] <moritz> ;)

[13:51] <andara> riffraff: there is a nesC mode ...

[13:52] <riffraff> wow, it must have appeared in the last year

[13:52] <riffraff> how lovely :)

[13:52] <andara> riffraff: 2004, Joao Girao [email@hidden.address]
[13:54] *** kunwon1 joined
[13:54] <riffraff> mh

[13:54] <riffraff> I don't have it on my vim7 

[13:55] <andara> riffraff: http://www.vim.org/scripts/script.php?script_id=899

[13:55] <lambdabot> Title: nesC - nesC syntax highlighting : vim online

[13:55] <riffraff> oh I see, exists but not included

[13:57] <moritz> and http://www.vim.org/scripts/script.php?script_id=1847

[13:57] <lambdabot> Title: NesC Syntax Highlighting - The Syntax Highlighting for NesC Files : vim online

[13:59] <[particle]> nesc: c for nintendo?

[14:00] <[particle]> wouldn't that be something dangerous....

[14:06] <moritz> are PIR and PASM syntax files uploaded to perl.org?

[14:08] *** veritos joined
[14:09] *** justatheory joined
[14:19] <svnbot6> r16227 | fglock++ | [PCR] - fixed closure call-as-method

[14:26] <[particle]> uploaded to perl.org?

[14:26] <[particle]> parrot has vim syntax files under editors/

[14:26] <[particle]> so, i guess you can get them from svn.perl.org/parrot/trunk/editor/

[14:27] <moritz> [particle]: s/perl\.org/vim\.org/

[14:27] <moritz> [particle]: that's where I'd look first for syntax files

[14:27] <[particle]> ah, no. not that i know of.

[14:29] *** fglock joined
[14:29] *** veritos joined
[14:33] <zafoeta> sorry for bothering again about this problem

[14:33] <zafoeta> has any of you experienced this error when leaunching ghc Library not loaded: GMP.framework/Versions/A/GMP ?

[14:34] <zafoeta> precisely

[14:34] <zafoeta> $ ghc

[14:34] <zafoeta> dyld: Library not loaded: GMP.framework/Versions/A/GMP

[14:34] <zafoeta>   Referenced from: /usr/local/lib/ghc-6.6/ghc-6.6

[14:34] <zafoeta>   Reason: image not found

[14:34] <zafoeta> Trace/BPT trap

[14:39] *** amnesiac joined
[14:40] <[particle]> is there some other package you need to download?

[14:41] <[particle]> i haven't installed ghc in a year or two, but i seem to recall needing something more than just the ghc base

[14:42] <[particle]> however, it looks funny, since you're just calling ghc

[14:42] <[particle]> i'd assume it should Just Work

[14:44] <moritz> is there no packaging software (like apt) for mac os that does the dependency handling?

[14:44] <veritos> Fink?

[14:45] <veritos> written in perl too.

[14:45] <riffraff> macports is nice

[14:45] <riffraff> and has ghc6.6 IIRC

[14:48] *** DrSlump joined
[14:48] <DrSlump> hi

[14:51] <moritz> hi DrSlump ;)

[14:52] <DrSlump> hello Moritz :)

[14:53] <moritz> DrSlump: I'm case sensitive ;)

[14:56] *** lisppaste3 joined
[15:02] *** bonesss joined
[15:16] *** crashmatrix joined
[15:29] *** fglock joined
[15:40] <svnbot6> r16228 | andara++ | [runpugs] -Slight hitch: no Moose on feather. So installed it locally.

[15:40] <svnbot6> r16228 | andara++ | 	  -New release going live RSN.

[15:41] <offby1> ooh ooh

[15:41] *** penk joined
[15:41] <offby1> moose don't have feathers!

[15:45] <TimToady> oh, horsefeathers...

[15:45] <svnbot6> r16229 | fglock++ | [v6.pm] - minor fix in hash declaration

[16:03] <fglock> the 'unspace' rule from STD now loads in perl5 without warnings; doesn't mean it works, yet

[16:10] <avar> fglock: It looks pretty easy-ish to turn PCR into a Parse::Yapp sort of thingy, you'd define a grammar and it would emit p5/p5-rx/XS which you could then ship with your module without any Pugs:: deps

[16:10] <avar> fglock: is that a fair assessment?

[16:11] <fglock> avar: sure

[16:11] <avar> kewl

[16:11] <fglock> actually, just use v6.pm ?

[16:11] *** andara left
[16:12] <avar> nah, it would be better if there were no deps aside something that implemented the match object maybe..

[16:12] <fglock> avar: see Rule2.pm in the PCR source; it's PCR own grammar

[16:12] <fglock> it is compiled into Rule.pmc (the Rule2.pm name avoids the circular dependency at installation)

[16:15] <fglock> avar: there is an old script that does this; I think it's somewhere in the misc/pX directory

[16:16] <avar> yeah, that's exactly what I mean

[16:16] <fglock> ah, here: compile_p6grammar-token.pl and compile_p6grammar.pl in perl5/PCR/

[16:17] <fglock> not sure if it still works

[16:17] *** sonorous left
[16:17] <avar> I really like the src->ast->some_emitter architecture:)

[16:21] <fglock> avar: I'll move the scripts to perl5/PCR/util/ ok?

[16:24] <svnbot6> r16230 | fglock++ | [PCR] move the grammar-compiler scripts into util/

[16:30] <svnbot6> r16231 | fglock++ | [PCR] - cleanup base directory

[16:32] <fglock> avar: feel free to modify those grammar compiler scripts

[16:34] <fglock> now taking a look at Ook :)

[16:36] *** kunwon1 joined
[16:37] *** obvio171 joined
[16:38] <avar> fglock: it's incomplete:), very

[16:42] *** obvio171_ joined
[16:42] *** obvio171_ is now known as obvio171

[16:43] *** elmex joined
[16:44] *** kanru joined
[16:45] <TimToady> Juerd: I am amused that feather's /var/log has files that were last modified in 2012 and 2016...

[16:45] <TimToady> I suspect a wormhole

[16:46] <gnuvince> @seen audreyt

[16:46] <lambdabot> audreyt is in #perl6 and #haskell. I don't know when audreyt last spoke.

[16:46] <TimToady> maybe sabotage from future python programmers time travelers

[16:47] <TimToady> that might explain why jifty/commitbit suddenly started taking 45 cpu seconds per transaction...

[16:48] <TimToady> gnuvince: at the moment audreyt is preoccupied with Real Life™

[16:49] <moritz> what's feathers load average?

[16:49] <TimToady> about 9

[16:49] <gnuvince> TimToady: thanks.

[16:49] <moritz> TimToady: does comitbit work for you at least?

[16:49] <TimToady> I did eventually get a commitbit sent to MarLaw

[16:49] <moritz> great

[16:50] <TimToady> (a correct one, with x on both ends)

[16:50] <TimToady> but I had to wait till the loadavg dropped to 5

[16:51] <[particle]> what are those numbers in, fahrenheit? i never understood that scale

[16:51] <TimToady> currently backups are running

[16:52] <TimToady> loadavg?

[16:52] <[particle]> yeah.

[16:52] <gnuvince> [particle]: if memory serves rights, it's the number of CPU secs a process has to wait before being processed

[16:52] <TimToady> er, no...

[16:52] <gnuvince> the three numbers show the average for the last 1, 5 and 15 minutes.

[16:53] <TimToady> it's a time-decayed average of number of processes wishing to use the CPU right now

[16:53] <[particle]> ah

[16:53] <moritz> ... and other resources apart from CPU iirc

[16:53] <[particle]> do processes typically get an equal timeslice?

[16:54] <moritz> [particle]: that depends on their "nice" value

[16:54] <TimToady> depends on the work profile

[16:54] <TimToady> if several processes are completely CPU bound, and have the same nice, they should share equally

[16:54] <TimToady> but IO always screws things up

[16:55] <moritz> bad IO ;)

[16:55] <[particle]> everybody hates io

[16:55] * moritz too

[16:56] <TimToady> when I run top on feather, the load avg seems artificially high compared to the number of processes in R state, so it seems that it's counting in IO waits somehow.  maybe processes that are done with IO are counted but don't show as R yet...

[16:57] <moritz> TimToady: sometimes zombies contribute to the load avg as well

[16:57] <TimToady> or maybe the algorithm has changed in the last 20 years or so.

[16:58] <TimToady> zombies shouldn't be putting any load on the CPU

[16:58] <TimToady> they just occupy table space

[16:59] <moritz> TimToady: yes, but sometimes they do increase the load avarage parameter by one

[16:59] <TimToady> I'd call it a bug if so

[17:00] <moritz> can't be, linux is perfect[TM] ;)

[17:00] <TimToady> ™

[17:00] *** veritos joined
[17:01] <moritz> whatever ;)

[17:01] <TimToady> I wish I could get my compose key to use vim digraphs...

[17:01] *** bernhard joined
[17:01] <veritos> TimToady: i wish i could bind keystrokes to Perl keywords

[17:02] <moritz> veritos: that should not be too hard

[17:02] <veritos> moritz: i know, i'm trying to write something that does that

[17:02] <TimToady> vim has macros, but irssi isn't vim...

[17:03] <veritos> #i<stdio.h> \n imain(v){printf("Hello");r0;}

[17:05] <TimToady> and last time I tried changing the compose key table, it had no effect at all.  apparently there's a mysterious compilation step known to the cognizenti

[17:07] <TimToady> and my compose key doesn't, in fact, even do everything that the table I'm supposedly using specifies, but I think that's input method damage, probably

[17:07] <TimToady> doesn't recognize any triple key sequences for instance

[17:08] <TimToady> so it won't do em-dash, among other things

[17:08] <veritos> TimToady: so you use all of those nifty << >> brackets and stuff?

[17:09] <TimToady> « and » are the only latin-1 chars we use currently

[17:09] <TimToady> and we don't use them as heavily as we used to

[17:09] <TimToady> we got rid of ¥

[17:09] <moritz> is that 'zip' now?

[17:10] <TimToady> zip() or 

[17:10] <TimToady> Z

[17:10] <veritos> can't we still use as a type of quote mark? q<<foo>> or whatever?

[17:10] <TimToady> sure

[17:10] <TimToady> ?eval say «a b c»

[17:10] <moritz> can't you define that as a macro?

[17:11] *** evalbot_r16219 is now known as evalbot_r16231

[17:11] <evalbot_r16231> OUTPUT[abc␤] Bool::True

[17:11] <TimToady> ?eval say q«a b c»

[17:11] <evalbot_r16231> OUTPUT[a b c␤] Bool::True

[17:11] <veritos> ah, i see.

[17:11] <moritz> circumfix:<q«...»> or something?

[17:12] <TimToady> the q language is productive and extensible.  a macro wouldn't be, at least not without complicating it

[17:13] <[particle]> "q language"... can you make it turing complete?

[17:13] <TimToady> ?eval say q:c «here is { 1+2 }»

[17:13] <evalbot_r16231> OUTPUT[here is 3␤] Bool::True

[17:13] <moritz> [particle]: all perl DSLs have to be turing complete ;)

[17:14] <dmq> whats wit the hl thingee on the output

[17:14] <TimToady> I just added 1+2 inside single quotes

[17:14] <TimToady> with the help of :c

[17:14] <Tene> dmq: ␤ you mean?

[17:14] <moritz> dmq: it's N/L and stands for new line

[17:14] <Tene> that's "NL" for "newline"

[17:14] <dmq> ah

[17:15] <dmq> thats a unicode character is it?

[17:15] <TimToady> indeed

[17:15] <dmq> interestink

[17:15] <dmq> :-)

[17:15] <TimToady> ␤       2424            SYMBOL FOR NEWLINE

[17:16] <dmq> so the question is does it match \n :-)

[17:16] <TimToady> I surely hope not. :)

[17:16] <Tene> ?eval '␤' ~~ m/\n/

[17:17] <evalbot_r16231> Match.new(␤  ok => Bool::True, ␤  from => 0, ␤  to => 0, ␤  str => "", ␤  sub_pos => (), ␤  sub_named => {}␤)

[17:17] <TimToady> crap

[17:17] <TimToady> it's emphatically *not* whitespace

[17:18] <dmq> heh.

[17:18] <Tene> TimToady: from 0 to 0

[17:18] <moritz> and str => "", but ok => Bool::True

[17:18] <TimToady> that's just evalbot character class braindamage

[17:18] <Tene> also, it's Bool::False on my local pugs

[17:18] <TimToady> mine too, whew!!!

[17:19] <TimToady> I think something in PCR is deemed 'unsafe'

[17:19] <TimToady> but fails "gracefully" instead of not matching

[17:19] <Tene> We could just stop running evalbot in safe mode.  What's the worst that could happen? ;)

[17:20] <TimToady> system "rm -rf /"

[17:20] <moritz> Tene: feather doesn, pugs repository lost

[17:20] <moritz> s/doesn/down/

[17:20] <TimToady> how 'bout run in chroot dir?

[17:20] <moritz> or even worse, somebody could implement a trojan horse in one of the per/haskell files...

[17:21] <moritz> and compromise all developer's maschines ;)

[17:21] <TimToady> well, if someone does that we're basically hosed anyway

[17:21] <TimToady> fortunately most script kiddies don't know Haskell...

[17:21] <moritz> TimToady: yes, but without a trojan horse we can read svn diffs...

[17:22] <TimToady> "can", but don't generally

[17:22] <moritz> yes

[17:22] <TimToady> I read maybe 1 in 50

[17:23] <TimToady> usually when something tickles my "that's odd" detector

[17:23] <TimToady> which could well be tickled by a trojan

[17:23] *** fglock joined
[17:24] <TimToady> 'course if fglock installed a trojan we'd never know...

[17:24] <moritz> TimToady: same for you ;)

[17:24] <veritos> at least code in perl 5 is somewhat readable. perl 5 core c code, now...

[17:32] <dmq> its readable.

[17:33] <dmq> just your eyes glaze very very quickly...

[17:34] <veritos> tokenizer code = cancer in rats. so says Camel.

[17:34] <TimToady> yeah, it's readable like I read Chinese.  I recognize most of the radicals, but haven't the foggiest idea what it means...

[17:36] <Juerd> TimToady: Hmmm... :)

[17:36] <Juerd> TimToady: Interesting. Probably wasn't ntp synched at some point

[17:37] <Juerd> TimToady: During bootup, after its crash

[17:37] <Juerd> TimToady: I knew its system clock was screwy, but not this screwy :)

[17:39] <TimToady> I just wonder whether some locking scheme used by jifty/commitbit relies on a stable clock, is all...

[17:39] <TimToady> but it's a long shot

[17:40] <TimToady> and if it were that far off, you'd think the transactions would just fail

[17:40] <TimToady> rather than taking 45 CPU seconds

[17:41] <TimToady> unless it's a discretionary lock that is getting forced after some period of time

[17:41] <TimToady> haven't got up the gumption yet to try to strace it...

[17:43] <TimToady> heh, didn't know "gumption" came from Scots...

[17:46] <TimToady> I guess a lot of them settled in Appalachia

[17:50] *** [particle1 joined
[17:51] *** electrogeek joined
[17:54] <TimToady> しゃあしゃあ &

[17:56] *** Psyche^ joined
[18:06] *** marmic joined
[18:14] *** Psyche^ is now known as Patterner

[18:15] *** MarLaw joined
[18:15] *** SubStack joined
[18:21] *** franck__ joined
[18:23] *** MarLaw joined
[18:38] *** Aankhen`` joined
[18:38] *** mncharity joined
[18:49] <fglock> mncharity: hey

[18:56] *** oceanlab joined
[18:56] *** justatheory joined
[19:01] *** obvio171 joined
[19:02] <TimToady> MarLaw: did you get your commit bit?

[19:03] <MarLaw> i did!

[19:03] <TimToady> previous try left out the second x...

[19:04] <moritz> MarLaw: it is a custom that you add yourself to AUTHORS to test the commit bit ;)

[19:04] <MarLaw> moritz: Wouldn't that be premature ?

[19:05] <TimToady> sure, that's why it's enforced by custom  :)

[19:05] <moritz> MarLaw: no, we encourage new committer to do it ;)

[19:05] *** jisom joined
[19:05] <MarLaw> ok ;P

[19:05] <[particle1> once you've committed, you are an author :)

[19:05] <TimToady> we're trying to encourage a culture of brazen committers, after all

[19:08] *** rindolf joined
[19:09] *** obvio171 joined
[19:13] *** obvio171 joined
[19:18] *** obvio171 joined
[19:19] <jisom> other than the "FreeBSD/amd64 registerised running" thread on the ghc mailing list, has anyone heard anything since about ghc on FreeBSD/amd64?

[19:24] *** obvio171 joined
[19:24] *** chris2 joined
[19:27] <TimToady> maybe you're the sucker...er, the pioneer...

[19:28] <jisom> judging by what I read, I'm not going to try :)

[19:29] <jisom> others have tried and failed to get that far......someone finally succeeded in getting that far, but nothing publicly usable

[19:29] <moritz> there's a good reason that pugs will not be the only and final implementation of perl6 ;)

[19:30] <lumi> jisom: They tried and failed?

[19:30] <jisom> lumi: some did, poor abstraction

[19:30] <jisom> was linked to the regex stuff

[19:31] <lumi> I guess it's a bit obscure

[19:31] <jisom> had a similar segfault in parrot recently, though, sizeof(int) != sizeof(void*)

[19:31] *** obvio171 joined
[19:33] <TimToady> maybe someone should write a good regex engine in Perl 6.  :)

[19:34] <jisom> I use PGE for the complicated stuff, and hand crafted for the rest.......one time wrote a module that parsed http uploads using hand crafted regex, just without the expressions

[19:34] <moritz> where can I find a good tutorial "how to write a good regex engine"? *g*

[19:34] *** weinig joined
[19:34] <TimToady> I know lots of ways not to...

[19:35] <jisom> perldoc -f index && perldoc -f substr

[19:36] <jisom> a lot of regexes do nothing that couldn't be done with one index call

[19:37] *** zafoeta_ joined
[19:37] *** riffraff joined
[19:37] <riffraff> hi

[19:38] <moritz> hi riffraff ;)

[19:38] <moritz> jisom: but regexes are just more convenient ;))

[19:39] <jisom> but index/substr is so much faster and obscure :)

[19:39] *** MarLaw joined
[19:39] *** obvio171 joined
[19:40] <moritz> is it compariable in speed to strstr?

[19:40] <moritz> index, i mean

[19:40] *** crashmatrix joined
[19:40] <riffraff> I have a spellchecker.p6 with both regex-based and substr-based impl, so much fun :)

[19:42] *** SubStack joined
[19:42] <riffraff> especially because I have to eval the regexen all the time so it takes ages to work 

[19:44] *** obvio171 joined
[19:44] <fglock> jisom: what are you working on?

[19:50] *** Loro_ joined
[20:00] <jisom>   nothing at the moment, too much work

[20:04] *** dduncan joined
[20:08] *** veritos joined
[20:15] *** b_jonas joined
[20:17] *** rashakil__ joined
[20:21] *** justatheory_ joined
[20:22] *** prism joined
[20:32] *** obvio171 is now known as obvio171_

[20:32] *** veritos joined
[20:33] *** obvio171_ is now known as obvio171

[20:38] *** dduncan left
[20:58] *** dolmen joined
[21:00] *** marmic joined
[21:02] *** dolmen left
[21:13] *** japhb joined
[21:20] *** IllvilJ1 joined
[21:21] *** lichtkind joined
[21:24] *** weinig joined
[21:28] *** polettix joined
[21:29] *** Aankhen`` joined
[21:39] *** IllvilJa joined
[21:58] *** bazbax joined
[22:00] *** larsen_ joined
[22:30] *** Belaf joined
[22:35] *** veritos joined
[22:57] *** dduncan joined
[23:00] *** zafoeta joined
[23:02] *** polettix joined
[23:11] *** SubStack joined
[23:12] *** veritos joined
[23:34] <veritos> TimToady: would you even consider having syntactically significant indentation in Perl 7? or dropped semicolons?

[23:35] <avar> veritos: due to the design of perl6 you don't need a new language for those features

[23:35] <avar> you just change the language grammar in your scope and call it Perl6::Pythonic or something

[23:35] <veritos> avar: no, i mean Perl 7 as the dream perl.

[23:35] <riffraff> dropped semicolons... yeeees

[23:36] <veritos> or is Perl 7 like TeX pi, that will never come around until Larry kicks the bucket?

[23:36] <veritos> and then Perl 6 becomes 7 automatically?

[23:46] <TimToady> I think (or at least hope) that Perl 6 gives the community the tools to decide what language they like best over the long haul.

[23:47] <TimToady> if we get the grammar and versioning stuff right, all the rest is negotiable

[23:48] <polettix> TimToady: is this what you meant with "rewrite of the community"? (IIRC)

[23:56] <TimToady> no, I originally thought the community would do the redesign.  the community tried, it was obviously not going to work.

[23:57] <TimToady> too many things depended on too many other things, and all the proposed solutions had tunnel vision

[23:57] <dduncan> when did the community try to do the rewrite?

[23:57] <TimToady> in the several months after the announcement in 2000

[23:57] <TimToady> a lot of mailing lists were set up...

[23:57] <dduncan> afaik, there were meetings between people, and an RFC process for what people want in the next Perl, then TimToady took that and wrote Apocalypses from them

[23:59] <dduncan> maybe that explains why there are so many Perl 6 language sublists that don't seem to be in use

[23:59] <TimToady> indeed

[23:59] <TimToady> all you have to do is read through the 361 RFCs to realize what a mess it was.

[23:59] <TimToady> and how much bigger a mess it would have been if we'd adopted the various solutions piecemeal

