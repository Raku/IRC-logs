[00:08] *** Patterner left
[00:11] *** hkb_zz is now known as hakobe

[00:11] *** DarkWolf84 left
[00:12] *** Psyche^ joined
[00:12] *** Psyche^ is now known as Patterner

[00:43] *** sunnavy joined
[00:49] *** avar left
[00:50] *** avar joined
[00:54] *** weinig_ joined
[00:54] *** nipotaway is now known as nipotan

[01:04] *** weinig left
[01:04] *** weinig joined
[01:06] *** weinig_ left
[01:07] *** weinig_ joined
[01:14] *** weinig_ left
[01:14] *** weinig_ joined
[01:21] *** weinig left
[01:31] *** weinig_ left
[01:39] *** Limbic_Region left
[01:52] *** jiing joined
[02:06] *** weinig joined
[02:07] *** weinig left
[02:07] *** cmarcelo joined
[02:10] *** weinig joined
[02:16] *** Schwern left
[02:30] *** kjwcode joined
[02:41] *** agentzh joined
[02:42] *** agentzh left
[02:59] *** agentzh joined
[03:00] *** b2gills left
[03:09] *** cmarcelo left
[03:10] *** cmarcelo joined
[03:13] *** ron_ joined
[03:21] *** araujo joined
[03:24] *** cauchy left
[03:49] *** sunnavy_ joined
[04:02] *** sunnavy left
[04:10] *** sunnavy joined
[04:28] *** sunnavy_ left
[04:29] *** crashmatrix left
[04:31] *** justatheory joined
[04:32] *** crashmatrix joined
[04:37] *** devogon joined
[04:39] *** thoughtpolice left
[04:53] *** thoughtpolice joined
[05:11] *** kanru left
[05:18] *** elmex joined
[05:20] *** Daenyth` left
[05:20] *** masak joined
[05:25] *** stevan_ joined
[05:29] <masak> DarkWolf84++ # for writing his first tests

[05:32] *** ron_ left
[05:33] *** ron_ joined
[05:36] *** sunnavy left
[05:39] *** jisom joined
[05:42] *** hakobe is now known as hakob

[05:43] *** hakob is now known as hakobe

[05:43] *** justatheory left
[05:48] *** kanru joined
[05:50] *** kanru left
[05:51] *** kanru joined
[05:52] *** jql left
[05:52] *** jql joined
[06:06] *** ron_ left
[06:25] *** cognominal_ left
[06:28] *** hakobe is now known as hkb_aw

[06:35] *** rgs left
[06:38] *** Aankhen`` joined
[07:09] *** weinig left
[07:12] *** penk left
[07:18] *** cmarcelo left
[07:18] *** zamolxes joined
[07:24] *** dduncan joined
[07:30] *** weinig joined
[07:34] *** weinig left
[07:48] *** flokuehn joined
[07:49] *** kanru2 joined
[07:49] *** kanru left
[08:04] *** rgs joined
[08:12] *** jisom_ joined
[08:20] *** buetow joined
[08:29] *** jisom left
[08:34] *** Daenyth` joined
[08:37] *** Daenyth` is now known as Daenyth

[08:58] *** dwave left
[09:02] *** cognominal_ joined
[09:08] *** cognominal_ left
[09:15] *** dwave joined
[09:22] *** cognominal_ joined
[09:41] <bloonix> 21 hours left

[09:41] <bloonix> then holiday

[09:46] <Daenyth> ?eval my @foo = ( '!', '@' ); my @bar = ( '!blah', '@blah' ); for @bar { when m/@foo.any/ { say 'wtfhax' } default { say 'ohnoz' } }

[09:46] <pugsbot_r17185> *** Cannot parse regex: @foo.any‚ê§*** Error: Error: interpolation of @foo not implemented at /home/evalbot/svk/pugs/perl5/Pugs-Compiler-Rule/lib/Pugs/Emitter/Rule/Perl5.pm line 291.‚ê§‚ê§OUTPUT[ohnoz‚ê§*** Cannot parse regex: @foo.any‚ê§*** Error: Error: interpolation of @foo not implemented at /home/evalbot/svk/pugs/perl5/Pugs-Compiler-Rule/lib/Pugs/Emitter/Rule/Perl5.pm line 291.‚ê§‚ê§ohnoz‚ê§] undef

[09:46] <Daenyth> well that would explain it..

[09:48] <Aankhen``> ?eval my @foo = <! @>; my @bar = <!blah @blah>; for @bar -> $elm { if /@foo/ { say "Gotcha" } else { say "Didn't gotcha" } }

[09:48] <Aankhen``> Oops.

[09:48] <pugsbot_r17185> *** Cannot parse regex: @foo‚ê§*** Error: Error: interpolation of @foo not implemented at /home/evalbot/svk/pugs/perl5/Pugs-Compiler-Rule/lib/Pugs/Emitter/Rule/Perl5.pm line 291.‚ê§‚ê§OUTPUT[Didn't gotcha‚ê§*** Cannot parse regex: @foo‚ê§*** Error: Error: interpolation of @foo not implemented at /home/evalbot/svk/pugs/perl5/Pugs-Compiler-Rule/lib/Pugs/Emitter/Rule/Perl5.pm line 291.‚ê§‚ê§Didn't gotcha‚ê§] undef

[09:48] <Aankhen``> ?eval my @foo = <! @>; my @bar = <!blah @blah>; for @bar -> $elm { if $elm ~~ /@foo/ { say "Gotcha" } else { say "Didn't gotcha" } }

[09:48] <pugsbot_r17185> *** Cannot parse regex: @foo‚ê§*** Error: Error: interpolation of @foo not implemented at /home/evalbot/svk/pugs/perl5/Pugs-Compiler-Rule/lib/Pugs/Emitter/Rule/Perl5.pm line 291.‚ê§‚ê§OUTPUT[Didn't gotcha‚ê§*** Cannot parse regex: @foo‚ê§*** Error: Error: interpolation of @foo not implemented at /home/evalbot/svk/pugs/perl5/Pugs-Compiler-Rule/lib/Pugs/Emitter/Rule/Perl5.pm line 291.‚ê§‚ê§Didn't gotcha‚ê§] undef

[09:48] <Aankhen``> Ah.

[09:48] <Aankhen``> Sorry, I didn't see the "not implemented" till the second time.

[09:48] <Daenyth> hehe

[09:48] <Daenyth> yeah

[09:48] <Daenyth> mine just.. does nothing

[09:48] <Daenyth> doesn't even tell me it's not implemented

[09:49] <Aankhen``> I don't have a recently built Pugs, unfortunately.

[09:49] <Aankhen``> Hmm, I think I might as well try a build.

[09:49] <Daenyth> mine is yesterday or day-2

[09:56] *** dduncan left
[10:03] *** chris2 joined
[10:20] *** rindolf joined
[10:24] <Aankhen``> 80,6947570real    27m23.491s

[10:24] <Aankhen``> 80,6947570user    22m0.387s

[10:24] <Aankhen``> 80,6947570sys     1m41.238s

[10:46] <bloonix> I dont understand the error message:

[10:46] <bloonix> Must only use named arguments to new() constructor

[10:46] <bloonix> new(1)

[10:46] <bloonix> submethod BUILD (*@pids) {

[10:48] <Aankhen``> You can't use positional arguments in BUILD, only named arguments.

[10:48] <Aankhen``> You can write your own `new` method that takes positional arguments and turns them into named arguments for BUILD.

[10:49] <bloonix> named arguments are +@pids ?

[10:51] <bloonix> a

[10:51] <bloonix> *ARG*

[10:53] <masak> bloonix: t/blocks/sub_named_params.t:80:is(eval('named_array(:x)'), (1), 'named array taking one named arg');

[10:54] <masak> named parameters are identified by their name, not by their position in the param list

[10:57] *** thoughtpolice left
[11:02] <bloonix> okay, now I understand

[11:02] <bloonix> http://perlcabal.org/syn/S06.html#Named_arguments

[11:02] <lambdabot> Title: S06

[11:03] <bloonix> "You may use either the adverbial form, :name($value), or the autoquoted arrow form, name => $value."

[11:03] <masak> yes

[11:03] <bloonix> "These must occur at the top "comma" level, and no other forms are taken as named pairs by default."

[11:05] *** drrho joined
[11:06] <bloonix> is it possible to say that I expect (pids => @pids) ?

[11:06] <bloonix> except

[11:07] <bloonix> no, expect was right :)

[11:07] <masak> looks sane to me

[11:07] <wolverian> yes

[11:09] <bloonix> okay, then I have to check for key pids in the submethod?

[11:10] <bloonix> or can I write this in the declaration? example:

[11:10] <bloonix> submethod BUILD (I expect "pids => @pids) {}

[11:11] <wolverian> submethod BUILD (@pids) { ... }

[11:11] <bloonix> or is that not possible=

[11:12] <wolverian> though generally you don't need to do that; a has @.foo; is enough. 

[11:12] <bloonix> but its only possible to call new(pids => @pids) ?

[11:12] <wolverian> the default BUILD will then initialise it if .new is passed a foo

[11:13] *** pmurias joined
[11:13] <wolverian> bloonix, yes, because that's how the object initialisation is specified. your own functions can take the @pids as a positional parameter too.

[11:13] <wolverian> but when constructing an object, the attributes have to be named.

[11:13] <bloonix> how?

[11:13] <wolverian> sub foo (@pids) { ... } foo(pids => @pids); foo(@pids); # same thing

[11:14] <bloonix> now I am really confused, but I understand

[11:15] <wolverian> see http://perlcabal.org/syn/S06.html#Parameters_and_arguments

[11:15] <lambdabot> Title: S06

[11:15] <wolverian> that pertains to regular functions and methods 

[11:15] <wolverian> object construction is in S12

[11:19] *** rindolf left
[11:20] <bloonix> getpwuid() is nyi ?

[11:20] <wolverian> nyi?

[11:20] <wolverian> not yet implemented?

[11:22] <wolverian> anyway, see getpw in S29

[11:22] <wolverian> S29 is a lot better than it used to be just a few months ago. (whoever did it)++

[11:22] *** bsb left
[11:24] *** agentzh left
[11:25] <bloonix> wolverian: yes not yet ... :)

[11:31] *** cognominal_ left
[11:31] *** cognominal_ joined
[11:37] *** ruoso joined
[11:37] *** nipotan is now known as nipotaway

[11:40] <pmurias> ruoso: hi

[11:41] <ruoso> hi

[11:41] * ruoso have been thinking a lot about tree transformation in the last days

[11:45] <masak> pugs is an amazing project. the READTHEM file alone is amazing

[11:59] *** lichtkind joined
[12:00] *** Shillo joined
[12:00] <Shillo> Hullo all

[12:05] <pmurias> hullo

[12:05] <lichtkind> hi

[12:06] <masak> hi

[12:09] <lichtkind> was there any movement with the perl6 doku or tutorial in last weeks?

[12:09] <pmurias> ruoso: any interesting fruits of you thinking?

[12:10] <pmurias> lichtkind: not any i heard of

[12:11] <lichtkind> pmurias: cool because the perl6 tutorial i announced im currently writing as an series of articles, i want to revisit them and then write as tut

[12:12] <pmurias> by the way have you heard of perlhints?

[12:12] <lichtkind> nope

[12:12] <lichtkind> whtasthat

[12:12] <Shillo> http://dilbert.com/comics/dilbert/archive/dilbert-20070804.html -- describes a number of meetings I've heard. :>

[12:12] <lambdabot> Title: Dilbert Comic Strip Archive - Dilbert.com - The Official Dilbert Website by Scot ...

[12:13] <pmurias> lichtkind: a project to creat a tool which explains snippets of perl6

[12:13] <lichtkind> pmurias:  cool its that a p5 module?

[12:15] <pmurias> misc/perlhints

[12:15] <pmurias> also annotations in STD.pm

[12:16] <lichtkind> pmurias: the last i didnt understand

[12:16] <pmurias> wait

[12:17] <pmurias> lunch&

[12:21] *** Shillo left
[12:28] <pmurias> look at src/perl6/Perl-6.0.0-STD.pm and grep for perlhints

[12:36] *** jisom_ left
[12:37] *** zamolxes left
[12:41] *** jhorwitz joined
[12:43] *** ruoso left
[12:59] *** Aankh|Clone joined
[13:17] *** Aankhen`` left
[13:40] *** cognominal_ left
[13:40] *** hkb_aw is now known as hakobe

[13:42] *** TJCRI joined
[13:44] *** lumi left
[13:54] *** kanru2 is now known as kanru---

[13:54] *** dwave left
[14:03] *** IllvilJa left
[14:03] * drrho is away: (shopping food)

[14:04] *** dwave joined
[14:07] *** cognominal_ joined
[14:11] <Linux\2> hi

[14:12] <buetow> hi

[14:14] *** kjwcode left
[14:18] <pmurias> hi

[14:18] *** IllvilJa joined
[14:22] *** [particle] left
[14:22] *** [particle] joined
[14:29] *** lumi joined
[14:32] *** ruoso joined
[14:32] <ruoso> pmurias, I'm back... I had some connection problems

[14:33] *** daxim joined
[14:33] <pasteling> "ruoso" at 77.54.10.109 pasted "Some thoughts about tree transforming" (120 lines, 3.5K) at http://sial.org/pbot/26743

[14:38] * Khisanth wonders if all the 6's are going to be sticking around

[14:38] <masak> ruoso: that's XSLT in Perl :)

[14:42] *** kanru--- left
[14:45] <diakopter> ruoso: check out http://www.cduce.org/design_features.html

[14:45] <lambdabot> Title: CDuce: Design and features

[14:47] <masak> diakopter: cool!

[14:53] <masak> Khisanth: probably until p6 replaces p5 in number of users, and then some

[14:55] <Khisanth> masak: it would have be before perl6's release or never

[14:55] <masak> Khisanth: you think so? must have been a similar situation with p4->p5 once

[14:55] <masak> the list is still p5p, isn't it?

[14:56] <Khisanth> perl4 had a bunch of p4foo functions?

[14:56] <masak> no, but some things were named perl5something, is my point

[14:56] <masak> not exactly functions, though

[14:57] <masak> does perl6 have a bunch of p6foo functions?

[14:57] <pmurias> no

[14:57] <Khisanth> actually function was not the right word :)

[14:58] <masak> I think the situations are comparable

[14:58] <Khisanth> the thought came up when seeing the p6r thing in the paste

[14:58] <masak> yes, I gathered

[14:58] <Khisanth> and 6 -> 7 not 5-> 6 :)

[14:59] <masak> Khisanth: huh?

[15:00] *** cognominal_ left
[15:00] <masak> no, I meant that there will be a *reason* to call p6 p6 as long as p5 has greater market share

[15:00] * Khisanth probably shouldn't be wondering about perl7 before perl6 is released

[15:00] <masak> when will perl7 be ready? :)

[15:00] <Khisanth> Christmas!

[15:01] <masak> yes, probably

[15:01] <masak> because once p6 is out, every day will be christmas, right?

[15:02] <masak> so, by tautology, p7 would be released by christmas

[15:02] <Khisanth> definitely no :)

[15:03] *** kanru joined
[15:04] *** hakobe is now known as hkb_aw

[15:06] <ruoso> masak, actually XSLT doesn't provide much ways for a complex match

[15:07] <masak> ruoso: define "complex match"

[15:08] <ruoso> in that example I pasted

[15:08] <ruoso> line 77

[15:09] <masak> I was just looking at that :)

[15:09] <masak> what's the exclamation mark?

[15:09] <ruoso> not

[15:09] <masak> well,

[15:09] <masak> XPath does that

[15:09] <masak> and thus XSLT

[15:10] <masak> select="p6r:elem[ strm:number and not strm:operator]"

[15:10] *** kjwcode joined
[15:10] <ruoso> can you represent all of that examples with XPath?

[15:10] *** iblechbot joined
[15:11] <masak> ruoso: I think so

[15:11] <masak> XSLT + XPath

[15:11] * masak really likes XPath 1.0

[15:12] <moritz_> re

[15:12] <masak> lightweight, and (seemingly) picks the best of and extends Unix path

[15:15] <masak> & # home

[15:15] *** masak left
[15:26] * drrho is back

[15:29] *** cognominal_ joined
[15:40] *** flokuehn left
[15:49] *** hkb_aw is now known as hakobe

[15:49] *** smash_ joined
[15:51] *** Limbic_Region joined
[16:03] <Aankh|Clone> XPath++

[16:04] <Aankh|Clone> Possibly the only thing to like about XML, come to think of it.

[16:07] <moritz_> XML is not too bad... xhtml is a vast improvement over the sgml based html 4

[16:07] <Aankh|Clone> Uhm, how?

[16:07] <moritz_> in sgml there are things allowed that I wouldn't recognize as valid

[16:08] <Aankh|Clone> So?

[16:08] *** Aankh|Clone is now known as Aankhen``

[16:08] <pasteling> "moritz_" at 84.148.44.188 pasted "example of weird but valid html" (5 lines, 93B) at http://sial.org/pbot/26745

[16:09] <moritz_> it's no fun to maintain html pages written in way you don't really understand

[16:09] * Aankhen`` shrugs.

[16:09] <moritz_> Aankhen``: did you take a look at the nopaste? ugly, if you ask me

[16:09] <Aankhen``> Could make the same argument with a simple s/html pages/Perl code/.

[16:10] <Aankhen``> Yes, it's ugly, but I don't think that XML's restrictiveness is a good argument in favour of it.

[16:10] <Aankhen``> Draconian error handling is a futile effort.

[16:10] <moritz_> Aankhen``: with the differnce that there is only _one_ perl5 interpreter, but many html "interpreters"

[16:10] <Aankhen``> Fair enough.

[16:11] <Aankhen``> There's a formal spec for handling HTML.  Where it's lacking is in error handling.

[16:11] <Aankhen``> On the other hand, XML is not lacking in error handling at all, since it just says "die horribly".

[16:12] <moritz_> which is better imho

[16:12] *** aindilis joined
[16:12] <moritz_> because if you say "this is html" you should mean it

[16:12] <Aankhen``> That doesn't work.

[16:12] <moritz_> it would work if most implementations honoured the standard

[16:13] <Aankhen``> Creating well-formed and valid HTML isn't difficult, but it does require an investment in terms of time and effort to learn it.

[16:13] <moritz_> s/most implementations/Internet Explorer/

[16:13] <moritz_> like every markup

[16:13] <Aankhen``> How would it work?

[16:13] *** poky joined
[16:13] <Aankhen``> (If most implementations honoured the standard.)

[16:13] *** TJCRI left
[16:13] <Aankhen``> You'd still have nine out of ten pages with tag soup.

[16:14] <moritz_> if they just outright died on invalid html, webmasters would update their pages

[16:14] <Aankhen``> No, they wouldn't.  One of two things would happen.

[16:14] <moritz_> just imagine what would happen if google would only index valid pages

[16:14] *** TJCRI joined
[16:14] <Aankhen``> a) The Web dies out.  Unlikely.

[16:14] <moritz_> webmasters want their pages viewed, that's why they write them

[16:14] <Aankhen``> b) Someone builds an implementation that *doesn't* choke on invalid HTML, and everyone switches to that instead, since they'd rather have the content.

[16:15] *** TJCRI left
[16:15] <Aankhen``> Heck, they wouldn't even need to build an implementation from scratch; they could just fork one of the existing open source engines.

[16:15] *** DarkWolf84 joined
[16:16] <moritz_> sadly, yes

[16:16] <moritz_> it's so much harder to write forgiving parsers than validating ones

[16:16] <Aankhen``> No, actually, it isn't.

[16:17] <Aankhen``> A forgiving parser tries to figure out what the author intended.

[16:17] <moritz_> perhaps I just don't know the theory

[16:17] <Aankhen``> Well, think about it.

[16:17] <Aankhen``> <b><i>foo</b></i>

[16:17] <moritz_> well, that's a simple example

[16:17] <moritz_> try to parse the output for ms frontpage of anno 1998 or something

[16:18] <Aankhen``> Validating parser: okay, let's see‚Ä¶ aha!  You closed the `b` element before closing the `i` element!  ERROR!

[16:18] <moritz_> with wrongly nested tables that _I_ don't understand

[16:18] <moritz_> how in the seven heavens should I write a parser for tag soup I don't understand myself?

[16:18] <Aankhen``> Forgiving parser: okay, let's see‚Ä¶ the `i` element hasn't been closed, but the `b` element is being closed here‚Ä¶ uh‚Ä¶ I wonder if that means they want to create a new `b` element and new `i` element, or just close the original ones, or‚Ä¶ ARGH ITS ALL TOO MUCH

[16:19] <moritz_> Aankhen``: ok, I get your point, but once you start to forgive, you have to forgive more and more, until it's just plain guess work

[16:20] <Aankhen``> Indeed.

[16:20] <Aankhen``> That's why it's much harder to write a forgiving parser than a validating parser.

[16:20] <Aankhen``> Oh, jeez.

[16:20] <moritz_> didn't I say that previously? *g*

[16:21] <Aankhen``> I swear I read your original sentence as "it's so much harder to write validating parsers than forgiving ones".

[16:21] <moritz_> *ROFL*

[16:21] * Aankhen`` hangs his head in shame.

[16:22] <Aankhen``> Believe me, I advocate well-formed, valid, semantic HTML (note: that's *not* XHTML ;-) at all times, and I can't stand tag soup.

[16:22] <moritz_> .oO( let's write a forgiving perl 6 parser... )Oo.

[16:22] <Aankhen``> I just don't like XML overly much.

[16:22] <Aankhen``> Isn't that what you get when you start a file with a bare version number? <G>

[16:23] <moritz_> I didn't like it previsously, but then at $work I had to parse the "universal file format" written by a CAD/CAE program

[16:23] <moritz_> and convert it to xml

[16:23] <moritz_> and the xml was just way easier to handle

[16:24] <Aankhen``> In what way?

[16:24] *** zamolxes joined
[16:24] * ruoso brb

[16:24] *** ruoso left
[16:24] <moritz_> for example these .unv used variable length blocks that contained lines that were treated as comments...

[16:25] <moritz_> but only the relative position inside the block marked them as comments

[16:25] <Aankhen``> Ah.

[16:25] <moritz_> and that was different for every type of block

[16:25] <Aankhen``> That sounds like a pretty stupid format.

[16:25] <moritz_> it is indeed, but I-DEAS uses it to store its material data

[16:25] <Aankhen``> :-(

[16:25] <moritz_> whereas Ansys just uses MatML, which is an xml "standard"

[16:26] <moritz_> I could just download the schema and validate my generated files with that 

[16:26] <moritz_> (only at the beginning... later I discovered that they diverted from the standard :( - still better than .unv, though)

[16:27] <Aankhen``> That's an advantage of better tools available for the format, not an advantage of the format itself.

[16:27] <Aankhen``> (Unless you consider widespread existing use of a format as an advantage, in which case XML certainly wins by a landslide.)

[16:27] <moritz_> not quite - I don't think that "universal files" are that easy to validate

[16:28] <Aankhen``> Sure, but that's comparing one bad format to another, worse, format.

[16:28] <Aankhen``> (XML being the bad format, of course. :-)

[16:28] <moritz_> so which format would you use to store material data?

[16:28] <Aankhen``> S-Expressions! ;-)

[16:29] <Aankhen``> ‚Ä¶honestly, I don't know what material data looks like.  But if it can be described with XML, it can be described much more concisely and robustly with S-Expressions.

[16:30] <moritz_> maybe

[16:30] <diakopter> Aankhen``: did you take a look at cduce?

[16:30] * moritz_ is not entirely convinced

[16:30] <Aankhen``> diakopter: I don't believe I've heard of that.

[16:30] <Aankhen``> diakopter: What is it?

[16:31] <diakopter> oh; I mentioned it to ruoso and masak earlier

[16:31] <Aankhen``> moritz_: That's alright, I'm not trying to convince anyone, I just enjoy debating things. ;-)

[16:31] <Aankhen``> diakopter: Ah, I'll backlog.

[16:31] *** smash__ joined
[16:31] <moritz_> Aankhen``: same for me, most of the time

[16:31] <Aankhen``> moritz_: Are you an opinionated jerk too?! :-D

[16:31] * moritz_ just wanted to emphasize that working with xml is not as bad as with some other, broken file formats

[16:32] <Aankhen``> Oh, sure.

[16:32] <moritz_> Aankhen``: of course, that's why I like #perl6... or something ;)

[16:32] * Aankhen`` grins.

[16:33] <Aankhen``> diakopter: That looks nice.

[16:34] <moritz_> Aankhen``: btw feb, the maker of the "old" irclogs on colabti.de asked if he could steal some of our CSS ;-)

[16:34] <Aankhen``> moritz_: If you want my answer, it *is* in the Pugs repo, isn't it? =)

[16:37] <moritz_> Aankhen``: I assumed it's just artistic2 as the rest of the repo... I just wanted to tell you that somebody else liked it and adoped parts of it ;)

[16:38] * Aankhen`` cheers!

[16:38] *** smash_ left
[16:54] *** elmex left
[17:01] *** TJCRI joined
[17:02] *** jjore-w left
[17:02] *** jjore-w joined
[17:08] *** justatheory joined
[17:12] *** ScriptS joined
[17:13] *** ScriptS left
[17:22] *** REPLeffect joined
[17:24] *** cognominal_ left
[17:28] *** daxim left
[17:30] *** daxim joined
[17:39] *** yahooooo left
[17:40] *** iblechbot left
[17:40] *** Psyche^ joined
[17:40] *** yahooooo1 joined
[17:42] *** yahooooo1 is now known as yahooooo

[17:53] *** rindolf joined
[17:57] *** Patterner left
[17:57] *** Psyche^ is now known as Patterner

[18:00] *** flokuehn joined
[18:02] *** franck___ joined
[18:14] *** franck____ left
[18:15] *** franck____ joined
[18:17] *** REPLeffect_ joined
[18:19] *** REPLeffect left
[18:19] *** REPLeffect_ is now known as REPLeffect

[18:26] <TimToady> Gah, just misread my spam as "Do you have any used data types?"

[18:28] *** drrho left
[18:28] <Tene> Heh.

[18:29] * kjwcode offers up an int.

[18:29] * spinclad offers a used condo.

[18:30] <kjwcode> So long as there's not an 'm' on the end, spinclad.  :)

[18:30] <spinclad> carefully not

[18:30] <DarkWolf84> :)

[18:31] *** franck___ left
[18:32] <DarkWolf84> :prompt for filehandler in S02 is not implemented and no tests for it

[18:33] <diakopter> grr, pp on cygwin didn't link in cygwin.dll

[18:34] *** mj41 left
[18:37] * Tene compiles parrot.

[18:38] *** franck___ joined
[18:40] <DarkWolf84> what is capture?

[18:41] <TimToady> in which context?

[18:41] <DarkWolf84> and what is diference between captue and reference

[18:42] <DarkWolf84> difference*

[18:42] <DarkWolf84> in prerl6 context

[18:43] <DarkWolf84> perl6*

[18:43] <TimToady> well, there are no references in Perl 6, but captures can fill the same role, only more generally

[18:43] <TimToady> a capture is a kind of frozen argument list that hasn't been bound to a signature yet

[18:44] <TimToady> it might have an invocant, plus positional parameters, plus named parameters

[18:44] *** franck____ left
[18:44] *** Aankhen`` left
[18:47] <TimToady> and it happens that a match object is also a kind of capture

[18:48] <TimToady> in either case it's a bunch of associated data you haven't figured out what to do with yet

[18:49] *** weinig joined
[18:50] *** IllvilJa left
[18:51] <moritz_> where can I read more on capture semantics?

[18:53] <TimToady> well, lessee, S02, S03, S04, S05, S06, S09, and S12 for a start

[18:53] <moritz_> I feared that ;)

[18:54] <DarkWolf84> I just found some in S03

[18:54] <DarkWolf84> and that's why I asked

[18:55] <TimToady> well, I just used grep...

[18:55] <Linux\2> smart use of unix tools (tm)

[18:55] <moritz_> TimToady: I noticed in S05 the term "regex _syntax_" rather often, although in many cases the semantics are meant as well

[18:56] <TimToady> hmm

[18:56] <Linux\2> wait, did TimToady just say he used something else than Perl?!

[18:56] <moritz_> TimToady: or is that again our different understanding of syntax and semantic?

[18:56] <moritz_> Linux\2: what do you think he wrote perl in the first place?

[18:57] <TimToady> well, different syntax implies different semantics

[18:57] <Linux\2> moritz_: for sure not with grep

[18:57] <TimToady> but saying "inside regex syntax" is really talking about the lexical scope of regexes

[18:58] <Linux\2> i guess Perl and Perl6 are written in ... C, arent they?

[18:58] <TimToady> pugs is written in Haskell

[18:58] <moritz_> Linux\2: parrot is written in C, but p6 will be written in p6

[18:58] <lichtkind> parrot in C

[18:59] <moritz_> TimToady: "This document summarizes Apocalypse 5, which is about the new regex

[18:59] <moritz_> syntax.  "

[18:59] <TimToady> the p6 compiler in p6, the rest depends on the backend

[18:59] <SamB> so perl6 has static typing available?

[18:59] <Linux\2> lichtkind: du zipfelm¸tze. wieso bist du nicht auf #perl6de??

[18:59] <moritz_> TimToady: but it's about semantics as well, isn't it?

[18:59] <lichtkind> SamB:  yea but optionall

[18:59] <Linux\2> TimToady: interesting to write a language and build the language with itself :)

[18:59] <SamB> not too optional when you are implementing a programming language...

[19:00] <moritz_> "The new C<:Perl5>/C<:P5> modifier allows Perl<C2><A0>5 regex syntax to be

[19:00] <TimToady> that's interesting as in the ancient chinese curse.  :)

[19:00] <moritz_> used instead"

[19:00] <SamB> at least, one of such complexity

[19:00] <Linux\2> TimToady: heh

[19:00] <moritz_> that's semantics as well, isn't it?

[19:00] <TimToady> it's using "syntax" to mean "language"

[19:01] <moritz_> ah

[19:01] <Linux\2> can "syntax" be seen as "language grammar"?

[19:01] <lichtkind> SamB: i thougt you talked yout the language perl 6

[19:02] *** gene9 joined
[19:02] *** gene9 left
[19:02] <Linux\2> Perl 6 should be written in Pascal so i can at least understand how the procedures and functions are defined :P

[19:02] <SamB> Linux\2: crazy

[19:02] <Tene> Linux\2: then why not just use Pascal?

[19:02] <Linux\2> yeah, thats me. i first learned Pascal and this kept being the only concept i understood entirely

[19:03] <Linux\2> Tene: because i want to be elite and use at least some Perl snipets

[19:04] <DarkWolf84> for me will be good only bootstraped perl

[19:04] <DarkWolf84> :)

[19:05] <Linux\2> bootstrapped Perl? is that a Perl with a strap ... on?

[19:05] <moritz_> the second thing I noticed in S05 is that <$var> and <&var> have different semantics, although in "normal" p6 list and hash subscripts both have the same semantics regardless of the sigil

[19:05] <rhr> Pascal is not my favorite programming language :√æ

[19:05] <Linux\2> oh nooo, he uses Gentoo. its all said :P

[19:05] <DarkWolf84> I mean perl6 in perl6

[19:06] <moritz_> I mean $foo[$index] and @foo[$index] mean the same thing - so why the different semantics for the & sigil in assertions in regexes?

[19:06] *** jisom joined
[19:06] <TimToady> those don't mean the same thing

[19:07] *** weinig left
[19:07] <moritz_> ok

[19:08] <moritz_> but the & sigil is meant to be used to hold anonymous rules (amongst others), right?

[19:08] <TimToady> the assertion parser is not looking for a random expression inside the <

[19:09] *** IllvilJa joined
[19:10] <TimToady> <& and <$ are essentially two different tokens

[19:15] <moritz_> it reminds me a bit of (?, which means differnt things depending depending on the following char

[19:16] <moritz_> but < is more readable ;)

[19:16] <TimToady> yes, it's the "next char" trick.  we also use it after <foo

[19:16] <TimToady> <foo()> vs <foo ...> vs <foo: ...>

[19:17] <bloonix> hello

[19:18] <TimToady> howdy.  cooking lunch, so a bit distracted...

[19:18] <bloonix> holiday & # until in 2 weeks ;)

[19:19] <TimToady> does that mean we'll see more of you or less of you? :)

[19:21] <Linux\2> TimToady: why dont you have one of these famous Freenode cloaks that says [email@hidden.address]
[19:21] <bloonix> TimToady: I have holiday since last week and I was a lot of time here on learn p6, but now I fly 2 week far far away from home :)

[19:21] <bloonix> s/on/and/

[19:21] <bloonix> so you see less of me

[19:22] <moritz_> I quite like <before ...> and <after ...> because they are rather intuitive

[19:22] <moritz_> a bit like pascal - you know what the program does without ever learning the syntax

[19:23] <bloonix> but if I come back I'll have another 1000 questions "to be a pain in the neck"

[19:23] <bloonix> moritz_: war das korrekt ausgedr√ºckt? :)

[19:23] <moritz_> bloonix: I don't know.. I think it's "pain in the ass" ;)

[19:24] <bloonix> na so schlimm sind meine fragen auch nun wieder nicht :)

[19:24] <TimToady> pain in the neck is slightly more polite :)

[19:24] <moritz_> ok ;)

[19:24] *** rindolf left
[19:24] <TimToady> anyway, we don't mind pains around here, as long as they're nice pains

[19:24] <moritz_> I tend to be more direct than polite ;)

[19:25] <bloonix> yes. I had pain enough the last weeks. brain pain :)

[19:26] *** gene9 joined
[19:26] <DarkWolf84> I have a hadache too

[19:26] *** gene9 left
[19:26] *** hjertnes joined
[19:26] <bloonix> okay, bye then

[19:28] *** rintaro joined
[19:28] *** thoughtpolice joined
[19:28] <Linux\2> now we have it. the thoughtpolice is in

[19:30] * thoughtpolice fears

[19:30] * Linux\2 fears the fear

[19:34] *** renormalist joined
[19:38] *** hjertnes left
[19:42] *** jisom left
[19:54] *** weinig joined
[20:28] <renormalist> Did anyone try to use the new 5.9.5 features of defining subrules in regexes with (?(DEFINE)...)   ? I thought it might be a nice equivalent to Perl6's rules but I'm not successful in using it. So did anyone already use 5.9.5 advanced regexes?

[20:29] <renormalist> s/subrules/subpatterns/   when speaking of 5.9.5

[20:37] *** theorbtwo joined
[20:38] <DarkWolf84> now I got it, cptures can be used as args pattern

[20:44] <DarkWolf84> captures*

[20:44] <DarkWolf84> uf

[20:52] *** TJCRI left
[20:54] *** iblechbot joined
[21:09] *** lichtkind left
[21:12] *** pmurias left
[21:18] *** dduncan joined
[21:29] *** flokuehn left
[21:48] *** iblechbot left
[21:55] *** aindilis left
[22:11] *** chris2 left
[22:13] *** mj41 joined
[22:20] *** buetow left
[22:26] *** renormalist left
[22:31] *** andyboy joined
[22:37] *** cognominal_ joined
[22:51] *** weinig left
[22:54] *** REPLeffect left
[22:57] *** marmic left
[23:00] *** marmic joined
[23:04] *** jiing left
[23:20] *** weinig joined
[23:42] *** daxim_ joined
[23:56] *** daxim left
