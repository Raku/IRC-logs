[00:05] *** theorbtwo joined
[00:06] *** weinig_ joined
[00:09] *** REPLeffect left
[00:18] *** theorb left
[00:20] *** ludan left
[00:20] *** drbean joined
[00:22] *** weinig left
[00:32] *** polettix left
[00:38] *** lyoungz joined
[00:39] *** kulp joined
[00:39] *** justatheory left
[00:40] *** drupek12 left
[01:19] *** kanru2 left
[01:23] *** Limbic_Region left
[01:26] *** lascasas joined
[01:28] *** Maddingu1 joined
[01:29] *** Maddingue left
[01:38] *** lyoungz left
[01:43] *** hkb_zz is now known as hkb_lab

[01:46] *** Partizx joined
[01:47] *** daxim_ left
[02:24] *** Partizx left
[02:28] *** lascasas left
[02:30] *** lumi left
[02:40] *** xinming` is now known as xinming

[02:43] *** weinig_ left
[02:51] *** idiotmax left
[02:59] *** [particle1 joined
[03:05] *** elmex_ joined
[03:18] *** [particle] left
[03:19] *** elmex left
[03:27] *** drupek12 joined
[03:51] *** nipotaway is now known as nipotan

[03:57] *** kyon left
[03:58] *** kyon joined
[04:04] *** kyon left
[04:04] *** justatheory joined
[04:34] *** kulp left
[04:43] *** yves__ left
[04:48] *** iblechbot joined
[04:55] *** yves joined
[05:30] *** Aankhen`` joined
[05:38] *** rfordinal_ joined
[05:56] *** BinGOs_ joined
[05:56] *** BinGOs left
[05:56] *** rfordinal left
[06:02] *** jisom joined
[06:07] *** zakame joined
[06:10] *** Maddingu1 is now known as Maddingue

[06:10] *** iblechbot left
[06:22] *** rgs left
[06:26] *** BinGOs_ is now known as BinGOs

[06:26] *** marmic left
[06:26] *** rgs joined
[06:27] *** miyagawa joined
[06:37] *** justatheory left
[06:44] *** marmic joined
[06:52] *** devogon joined
[07:07] *** mr_ank left
[07:11] *** integral left
[07:15] *** drrho joined
[07:17] *** mncharity left
[07:42] *** devogon left
[07:42] *** PerlJam left
[07:42] *** nipra left
[07:42] *** f0rth_ left
[07:42] *** hkb_lab left
[07:42] *** broquaint left
[07:42] *** shmem left
[07:42] *** perlbot left
[07:42] *** beppu left
[07:42] *** ingy left
[07:44] *** franck___ joined
[07:44] *** ingy joined
[07:44] *** f0rth joined
[07:45] *** devogon joined
[07:45] *** PerlJam joined
[07:45] *** nipra joined
[07:45] *** hkb_lab joined
[07:45] *** broquaint joined
[07:45] *** beppu joined
[07:45] *** perlbot joined
[07:45] *** broquaint left
[07:45] *** broquaint joined
[07:50] *** f0rth_ joined
[07:52] *** f0rth left
[07:52] *** shmem joined
[08:00] *** jisom left
[08:16] *** bsb left
[08:33] <pugs_svnbot> r18158 | avar++ |  r65522@t:  avar | 2007-09-25 08:30:53 +0000

[08:33] <pugs_svnbot> r18158 | avar++ |  hacky script to compile tests for lisp with sbcl, run this then prove -r t-lisp-exe

[08:33] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18158

[08:33] <lambdabot> Title: Changeset 18158 - Pugs - Trac

[08:41] *** snearch joined
[08:55] *** dwave joined
[09:00] *** ruoso joined
[09:02] *** snearch left
[09:03] *** drupek12 left
[09:18] *** lichtkind joined
[09:19] <lichtkind> ?eval 3 div 4

[09:20] <lichtkind> bot is dead

[09:20] <lichtkind> long live the bot :)

[09:27] *** fglock joined
[09:40] <avar> Aankhen``, fglock: svk pull, perl compile_tests_kp6_mp6-lisp.pl; prove -r t-lisp-exe

[09:40] <fglock> avar: looking

[09:43] <avar> it creates stand-alone executables of all the test files with sbcl

[09:43] <fglock> installing sbcl

[09:48] <pugs_svnbot> r18159 | avar++ |  r65524@t:  avar | 2007-09-25 09:45:36 +0000

[09:48] <pugs_svnbot> r18159 | avar++ |  Put the main body in (defun Main) and run it by default, this allows for creation of stand-alone-executables with sbcl

[09:48] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18159

[09:48] <lambdabot> Title: Changeset 18159 - Pugs - Trac

[09:51] <pugs_svnbot> r18160 | fglock++ | [kp6] Scope.pm cleanup

[09:51] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18160

[09:51] <lambdabot> Title: Changeset 18160 - Pugs - Trac

[10:01] *** chris2 joined
[10:03] *** masak joined
[10:07] <avar> fglock: the ones that aren't valid lisp are just skipped atm

[10:08] <avar> maybe it would be better to add a stup fail test...

[10:18] *** idiotmax joined
[10:24] *** mr_ank joined
[10:29] *** bsb joined
[10:36] *** integral joined
[10:44] *** iblechbot joined
[11:06] <pugs_svnbot> r18161 | fglock++ | [kp6] Visitor::Scope stub

[11:06] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18161

[11:06] <lambdabot> Title: Changeset 18161 - Pugs - Trac

[11:09] * avar cheers fglock

[11:10] <avar> write more stuff in p6 so I don't have to work so hard:)

[11:13] *** bsb_ joined
[11:14] *** bsb left
[11:14] *** bsb_ is now known as bsb

[11:15] *** Kattana left
[11:18] <Aankhen``> avar: It's asking me to confirm whether I want to remove 10,000 write-protected files, one at a timeâ€¦ all in t-lisp-exe/*/.svn

[11:19] <avar> SAY YES

[11:19] <avar> the compile_test script is a dirty evil hack

[11:19] <Aankhen``> I am, but why is it asking so much?

[11:20] <Aankhen``> Also, SBCL is giving me tons of "unhandled condition in --disable-debbuger-mode, quitting".

[11:20] <avar> because it was written by a monkey low on banana

[11:20] <BinGOs> because you forgot the "shut it bitch and just do it" switch

[11:20] <avar> what version of sbcl?

[11:20] <avar> $ sbcl --version

[11:20] <avar> SBCL 1.0.9

[11:20] <Aankhen``> 80,69135888$ sbcl --version

[11:20] <Aankhen``> 80,69135888SBCL 1.0.9

[11:20] <avar> I'm making standalone executables for all the tests because I don't know how to tell sbcl to shut the fuck up

[11:21] <Aankhen``> From CVS, if that matters.

[11:23] <Aankhen``> --noinform and --noprint are supposed to do that.

[11:23] <Aankhen``> But I guess they don't work for you either, eh?

[11:23] *** penk left
[11:27] <avar> http://sial.org/pbot/27716 # faaaast :)

[11:27] <lambdabot> Title: Paste #27716 from Someone at 208.78.101.240

[11:28] <Aankhen``> But not particularly correct?

[11:28] <avar> who needs correctness when you have awesomely fast failures

[11:28] <Aankhen``> Hehe.

[11:28] <Aankhen``> That's CLISP?

[11:28] *** masak left
[11:29] <avar> no I compiled the tests to stand-alone executables using sbcl

[11:29] <avar> they're executing at around or above the speed perl(1) would run them at

[11:30] <Aankhen``> Ah.

[11:30] <avar> 03-equals.t is 0.023 secs on my machine

[11:31] <avar> most of it load time, 30mb executable:)

[11:31] <fglock> avar: would you bootstrap, please

[11:31] <avar> bootstrap what?

[11:31] <fglock> the compiler

[11:31] <fglock> :P

[11:31] <avar> uh, after lunch?:)

[11:32] <fglock> i think i can wait a few minutes

[11:32] *** pmurias joined
[11:32] <Aankhen``> How do you bootstrap the compiler? :-S

[11:32] <avar> Make it support enough perl 6 to compile its own files

[11:32] <Aankhen``> Oh.

[11:33] <pmurias> avar: you mean the speed perl(1) would run them if they were in p5?

[11:33] <avar> then the generated CL code will be a p6 compiler..

[11:34] <Aankhen``> I'm a little unclear on how much is the responsibility of the emitter with regards to variables.

[11:35] <Aankhen``> What is Visitor::Scope et all about?

[11:35] <pmurias> you shouldn't use 01-sanity-modified

[11:35] <Aankhen``> s/is/are/

[11:35] <avar> pmurias: well, p5 is 0.006 secs:)

[11:35] <fglock> Aankhen``: use hashes to implement static/dynamic scopes

[11:35] *** hkb_lab is now known as d

[11:36] <avar> Aankhen``: fglock has been making more stuff into perl6 which means we have to implement less to get more working

[11:36] *** d is now known as hkb_lab

[11:36] <avar> just need more primitives to run more complex stuff

[11:36] <Aankhen``> I see.

[11:36] <avar> Array.uniq is in p6 and only requires looks, return, hashes

[11:36] <Aankhen``> Is there an example of hooking up whatever's been written in Perl 6 already?

[11:37] <Aankhen``> And, sorry for being dense, but what is static scope?

[11:37] <fglock> lexical variables

[11:37] <fglock> my $things

[11:37] <Aankhen``> Oh, okay.

[11:37] <Aankhen``> That's what Visitor::Scope takes care of?

[11:37] <pmurias> yes

[11:37] <fglock> yes (but not yet)

[11:37] <Aankhen``> Ah.

[11:37] <Aankhen``> So in the mean time, I should do what I can to get them working in CL?

[11:38] <avar> Aankhen``: does compile test work for you?

[11:39] <Aankhen``> avar: Not yet; I'm trying again.

[11:39] <fglock> native CL will be faster

[11:40] *** randomity joined
[11:47] <pmurias> fglock: what's the state of --perl5rx?

[11:49] <fglock> it used to run an example/ script

[11:49] <fglock> with backtracking

[11:50] <fglock> examples/token-test.pl

[11:51] <pmurias> it dosn't now

[11:53] <fglock> pmurias: see instructions (updated)

[11:53] <pugs_svnbot> r18162 | fglock++ | [kp6] fixed examples/token-test.pl instructions

[11:53] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18162

[11:53] <lambdabot> Title: Changeset 18162 - Pugs - Trac

[11:58] <pmurias> fglock: thanks

[11:58] <pmurias> had my -I's in the wrong order

[11:59] <fglock> pmurias: i think it would be reasonable to bootstrap with perl5rx

[12:01] <pmurias> either with --perl5rx or with CL

[12:02] <pmurias> the bootstraped grammar takes ages to compile the simplest things

[12:02] <avar> it'll be a lot faster once we bootstrap CL:)

[12:02] <avar> But is it bootstrapped now hoshit?:)

[12:02] <avar> tried profiling it?

[12:03] <pmurias> avar: hoshit?

[12:03] <avar> "oh shit"

[12:03] *** kanru joined
[12:04] <fglock> kp6-mp6 compiles itself to kp6-kp6, but kp6-kp6 doesn't compile itself yet

[12:04] <fglock> almost there

[12:05] <avar> it'll be awesome when it does:)

[12:05] <avar> I promise to release it on CPAN then:)

[12:10] <pmurias> i've got do my ajax chores now

[12:10] <pmurias> i'll looked into --perl5rx later today

[12:12] *** riffraff joined
[12:12] <riffraff> hi

[12:25] <pmurias> riffraff: hi

[12:28] <fglock> lunch &

[12:31] *** iblechbot left
[12:37] *** lichtkind_ joined
[12:44] *** cmarcelo joined
[12:48] *** lichtkind_ left
[12:48] *** fglock left
[12:55] *** lichtkind left
[13:12] *** drupek12 joined
[13:38] *** jhorwitz joined
[13:56] *** iblechbot joined
[14:11] *** sahadev joined
[14:14] *** b_jonas joined
[14:17] <b_jonas> pity <%foo> syntax is used up in rules

[14:18] <PerlJam> why?

[14:18] <b_jonas> it would be nice if they meant scanf-like conversion formats, 

[14:18] <b_jonas> like <%d> reading an integer and capturing it as an integer not a string

[14:18] <b_jonas> that doesn't make much difference for <%d> but for like <%x> it does

[14:19] <b_jonas> of course we can still define such things with some other rule syntax

[14:19] <PerlJam> I don't understand the benefit

[14:20] *** masak joined
[14:20] <pmurias> b_jonas: you can define your own <scanf('format')> rule

[14:21] <b_jonas> this way, instead of first matching something like /(<xdigit>+)/ and then reading it with hex($1), you'd match and read a hex number in one step

[14:21] <b_jonas> pmurias: yes, you can define it of course

[14:22] <pmurias> <hex> and <oct> would do most of what scanf adds

[14:22] <b_jonas> yep, I'd probably define ones like that

[14:22] <b_jonas> <dec> and <hex> and <oct> and <float>

[14:22] <b_jonas> and stuff like that

[14:22] <pmurias> isn't dec \d+?

[14:23] <b_jonas> pmurias: (\d+) captures a string

[14:23] <b_jonas> I want to capture a number istead

[14:23] <pmurias> the is not much difference

[14:23] <b_jonas> with decimal numbers, it doesn't make a big difference because they autoconvert

[14:23] <pmurias> *there

[14:23] <b_jonas> but with like hexadecimal

[14:23] <b_jonas> or a user type

[14:23] <b_jonas> it does make a difference

[14:23] <pmurias> yes

[14:23] <b_jonas> I might introduce read syntax like that for a user type I define

[14:24] <b_jonas> even if scanf doesn't classically support that type

[14:25] <pmurias> b_jonas: do you particulary like the scanf syntax?

[14:25] <b_jonas> no

[14:25] *** ahmadz joined
[14:25] <b_jonas> but I like a way to read data

[14:26] <b_jonas> not neccessary with scanf syntax

[14:26] <ahmadz> hi

[14:26] <pmurias> ahmadz: hi

[14:26] <b_jonas> but in some way that I can combine it with matching

[14:27] <b_jonas> so I can just read a pair of numbers as token /( <num> , <num> )/

[14:27] <pmurias> b_jonas: token /(\d+),(\d+)/ does it

[14:27] <b_jonas> (or something like that)

[14:28] <b_jonas> pmurias: yes, for positive decimal integers, but what if I want to read a pair of whatever datatypes I have defined

[14:28] <b_jonas> like /\( <foo> , <foo> \)/

[14:29] <b_jonas> it's probably easy to define a rule foo like that

[14:29] <b_jonas> so it not only matches a string rep of a Foo but reads it as a Foo as well

[14:29] <pmurias> token foo { foo {make Foo.new()} }

[14:30] <b_jonas> yep

[14:30] <b_jonas> that's it

[14:39] *** rafl left
[14:42] *** rafl joined
[14:52] <rhr> b_jonas: there are rules in STD you could use for that, e.g. <hexint>, <dec_number>, etc. (see line 1521 and following)

[14:52] <lambdabot> rhr: You have 1 new message. '/msg lambdabot @messages' to read it.

[14:53] <rhr> @messages'

[14:53] <lambdabot> Maybe you meant: messages messages?

[14:53] <rhr> @messages

[14:53] <lambdabot> ferreira said 7d 1h 29m 26s ago: Thanks. Fixed.

[14:53] <rhr> silly lambdabot, you already told me that

[14:59] <ahmadz> is there a way to speed up the 'make' in v6/v6-KindaPerl6?

[15:00] <avar> work on the CL backend:)

[15:00] <ahmadz> avar: ;-)

[15:01] <ahmadz> avar: im playing with EmitParrot.pm atm

[15:03] <avar> I thought you wanted to make it faster?:)

[15:04] <ahmadz> atm the make is too slow on my P4 2Ghz Linux VM

[15:04] <ahmadz> even though i have 1GB...

[15:04] *** Kattana joined
[15:06] <avar> try running devel::dprof on it

[15:06] <b_jonas> paralel make it?

[15:06] <b_jonas> dunno if it's allowed

[15:07] <avar> it's allowed

[15:08] <ahmadz> dont think '-j' will help since im only editing one .pm

[15:08] <ahmadz> i will try profiler on it... maybe i can find something ;-)

[15:09] <b_jonas> well, you can probably see if make runs more than one slow commands

[15:10] <ahmadz> try -j2 same thing; since 100% CPU i dont think i will gain much on a 2Ghz

[15:12] <b_jonas> dunno

[15:12] <b_jonas> you could try breaking that file down to smaller files

[15:12] * ahmadz is inspecting makefile

[15:13] <b_jonas> or you can try compiling with less optimization

[15:13] <b_jonas> (with gcc for example, -O is much faster than -O2)

[15:14] <pmurias> b_jonas: kp6 dosn't do any optimization

[15:14] <pmurias> it's only the parsing which takes significant time

[15:15] <b_jonas> well, then breaking it down to smaller files is all I can think of

[15:17] <ahmadz> real: 1m54s, user:1m35s sys:0m7s for a single .pm make on kp6

[15:17] <avar> The parser is going to be replaced soon-ish anyway

[15:17] <pmurias> avar: with?

[15:17] <avar> STD.pm

[15:17] <pmurias> it won't help much

[15:17] <pmurias> well it might

[15:18] <pmurias> but it's the parse engine which is slow not the grammar

[15:18] <ahmadz> hmmm, alias perltidy='cat' during dev? ;-)

[15:18] <pmurias> ahmadz: not compiling the kp6-kp6 version would be a speedup

[15:19] <avar> http://sial.org/pbot/27721

[15:19] <lambdabot> Title: Paste #27721 from Someone at 208.78.101.240

[15:19] <avar> you could add perl Makefile.PL --without-kp6-kp6

[15:19] *** weinig joined
[15:20] <pmurias> avar better a make target

[15:20] <ahmadz> avar: yeah that would be cool

[15:21] <avar> yeah, target

[15:21] <avar> sub to   { @_ == 1 ? ( $_data{refaddr $_[0]}{to}   ) : ( $_data{refaddr $_[0]}{to}   = $_[1] ) };

[15:26] *** fglock joined
[15:27] <avar> it's probably backtracking like crazy

[15:28] <pmurias> i dosn't backtrack much i think

[15:28] <pmurias> :ratchet is the only choice in mp6

[15:33] <pmurias> the problem is that kp6 is not bootstraped yey

[15:33] <pmurias> *yey

[15:33] <pmurias> *yet ;)

[15:34] *** riffraff left
[15:34] <avar> the cause of the speed problem?

[15:35] <pmurias> in order to make kp6 compile faster one would have to work on mp6

[15:36] <pmurias> which is wasted effort in the long run

[15:36] <pmurias> mp6 is semi-frozen, and has (not so) slightly more evil internals

[15:38] *** kanru left
[15:46] <pmurias> the bootstrap is blocking or is bound to block on the speed of kp6-kp6

[15:47] <avar> real    20m41.047s

[15:47] <avar> user    22m13.800s

[15:47] <avar> sys 0m17.080s

[15:47] <pmurias> as rules are even slower in kp6 then in mp6

[15:47] <pmurias> avar: this is the time for?

[15:48] <avar> make forcerecompile; make

[15:48] *** barney joined
[15:50] *** kanru joined
[15:53] *** elmex joined
[15:57] <pugs_svnbot> r18163 | fglock++ | [kp6] Visitor::Scope just do something

[15:57] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18163

[15:57] <lambdabot> Title: Changeset 18163 - Pugs - Trac

[16:01] *** nipotan is now known as nipotaway

[16:03] <avar> that didn't work out very well..

[16:03] <avar> tried to s/refaddr /0 + /g and the comp almost crashed:)(

[16:03] <avar> kernel killed the process

[16:04] <pmurias> avar: trying to optimize mp6?

[16:06] *** cerridwen left
[16:07] *** cerridwen joined
[16:10] *** elmex_ left
[16:11] <avar> failing:)

[16:12] <fglock> the refaddr thing is mostly useless, it was there to permit using inside-outs, which were there for perl5ish reasons (inherited from the v6.pm impl)

[16:14] <avar> What are the people that are hacking kp6 working on atm anyway?

[16:14] <avar> me an Aankhen`` are hacking cl...

[16:14] <avar> fglock: You're doing p5->p6 of the runtime, general clenup or aimed at STD?

[16:14] <fglock> i'm working on - hmmm

[16:14] <fglock> all that

[16:15] <fglock> trying to allow more p6-level emulation, in order to make backends easier to implement

[16:16] <avar> yeah that's great

[16:16] <fglock> in order to implement p6-level coro and gather/take

[16:16] <fglock> in order to run desugared STD

[16:16] <fglock> and then STD

[16:17] <fglock> looks like some kind of piramid

[16:17] <fglock> pyramid

[16:17] *** c9s joined
[16:18] <Tene> avar: what's the status of kp6-clisp?

[16:19] <avar> Tene: http://sial.org/pbot/27722

[16:19] <lambdabot> Title: Paste #27722 from Someone at 208.78.101.240

[16:19] <avar> still near the hello world stage

[16:19] <avar> more runtime/emitter stuff needs to be written

[16:19] <Tene> avar: thanks

[16:20] *** Blwood joined
[16:22] *** drrho left
[16:23] <avar> But writing a backend is easy-ish mostly

[16:26] <fglock> implementing closures in high level is silly, isn't it?

[16:28] *** penk joined
[16:28] <fglock> reading about it

[16:31] *** masak left
[16:36] *** pmurias left
[16:38] *** blindfish joined
[16:38] <fglock> it probably needs a different p5 runtime

[16:38] <fglock> need

[16:39] *** fridim joined
[16:39] <fglock> needs :)

[16:40] <fridim> hi

[16:48] *** zakame left
[16:48] <fglock> hi

[16:56] *** justatheory joined
[17:08] *** arrowax joined
[17:16] *** cerridwen left
[17:19] *** vbattsAtWork joined
[17:22] *** vbattsAtWork left
[17:27] *** vbattsAtWork joined
[17:52] *** rindolf joined
[17:54] *** blindfish left
[17:56] *** Psyche^ joined
[17:57] *** fridim left
[18:05] *** blindfish joined
[18:06] *** ruoso left
[18:06] *** jisom joined
[18:07] *** sahadev left
[18:08] *** Patterner left
[18:08] *** Psyche^ is now known as Patterner

[18:08] *** sahadev joined
[18:19] *** drupek12 left
[18:19] *** b_jonas_ joined
[18:25] *** b_jonas left
[18:25] *** b_jonas_ is now known as b_jonas

[18:28] *** jasonmay left
[18:41] *** drupek12 joined
[18:46] *** baest joined
[18:47] *** daxim_ joined
[18:51] *** IllvilJa left
[19:04] *** willo left
[19:06] *** drupek12 left
[19:06] <pugs_svnbot> r18164 | azawawi++ | [kp6] 'make kp6-mp6' added

[19:06] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18164

[19:07] <lambdabot> Title: Changeset 18164 - Pugs - Trac

[19:10] *** IllvilJa joined
[19:16] *** drupek12 joined
[19:19] *** rindolf left
[19:20] *** fglock left
[19:26] *** pmurias joined
[19:32] *** BinGOs left
[19:32] *** BinGOs joined
[19:36] *** rindolf joined
[19:36] *** ferreira joined
[19:39] <ferreira> For those following the series of micro-articles on Perl 6 operators, I have a draft ready for comments and suggestions. This will be published yesterday by 10:30 GMT-0300. It is at http://feather.perl6.nl/~ferreira/perl6-operators/coercion.html or http://feather.perl6.nl/~ferreira/perl6-operators/coercion.pod6

[19:39] <lambdabot> Title: coercion.pod6

[19:40] *** jisom left
[19:41] *** dduncan joined
[19:41] <PerlJam> ferreira: s/This can be lead to/This can lead to/

[19:42] <allbery_b> "this will be published yesterday"?

[19:42] <PerlJam> allbery_b: he's traveling backwards while we go forwards in time :)

[19:46] <ferreira> allbery_b: that was an error due to me feeling guilty. It should have been published yesterday. It slipped by and then tomorrow will have to be good enough.

[19:50] <pmurias> what's a good name for a visitor which turns Rules into C code?

[19:52] <[particle1> Visitor::Rules2C :)

[19:52] *** [particle1 is now known as [particle]

[19:52] <pmurias> could be

[19:52] <allbery_b> .oO { consultant }

[19:52] *** BinGOs left
[20:12] *** rindolf left
[20:31] *** blindfish left
[20:32] *** randomity left
[20:33] *** randomity joined
[20:34] <pugs_svnbot> r18165 | azawawi++ | [kp6] 'make kp6-mp6' now actually works ;-)

[20:34] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18165

[20:34] <lambdabot> Title: Changeset 18165 - Pugs - Trac

[20:45] *** sunnavy left
[20:47] *** sunnavy joined
[20:47] <ahmadz> pmurias, avar: 'make kp6-mp6' now works and is pretty much faster ;-)

[20:52] *** barney left
[20:58] <pmurias> ahmadz: nice

[21:02] * pmurias is working on compiling rules to c

[21:03] *** rindolf joined
[21:10] *** b_jonas left
[21:10] *** devogon left
[21:12] *** devogon joined
[21:14] <pmurias> sleep&

[21:14] *** pmurias left
[21:14] *** rindolf left
[21:25] <pugs_svnbot> r18166 | azawawi++ | [kp6] 'make kp6-mp6' is now 'make kp6_mp6'

[21:25] <pugs_svnbot> r18166 | azawawi++ |   *   added pod doc for it

[21:25] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18166

[21:25] <lambdabot> Title: Changeset 18166 - Pugs - Trac

[21:32] *** xinming left
[21:40] <ahmadz> @karma

[21:40] <lambdabot> You have a karma of 1

[21:40] <pugs_svnbot> r18167 | azawawi++ | [kp6-parrot] project start... cleaned unused dies

[21:40] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18167

[21:40] <lambdabot> Title: Changeset 18167 - Pugs - Trac

[21:43] *** c9s_ joined
[21:49] <pugs_svnbot> r18168 | Aankhen++ | * [kp6-lisp] added error handling functions.

[21:49] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18168

[21:49] <lambdabot> Title: Changeset 18168 - Pugs - Trac

[21:50] *** devogon left
[21:51] *** devogon joined
[21:59] <Aankhen``> Hmm, still not optimal.

[21:59] <pugs_svnbot> r18169 | Aankhen++ | * [kp6-lisp] reworked error handling structure.

[21:59] <pugs_svnbot> r18170 | Aankhen++ | * [kp6-lisp] left out an argument.

[21:59] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18170

[21:59] <lambdabot> Title: Changeset 18170 - Pugs - Trac

[22:00] *** c9s left
[22:00] <Aankhen``> Oh well, it'll have to do.

[22:05] *** dvorak left
[22:08] *** arrowax left
[22:08] <pugs_svnbot> r18171 | Aankhen++ | * [kp6-lisp] better KP6-PREFIXED-ERROR-MESSAGE.

[22:08] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18171

[22:08] <lambdabot> Title: Changeset 18171 - Pugs - Trac

[22:11] <pugs_svnbot> r18172 | Aankhen++ | * [kp6-lisp] error functions should take a typespec.

[22:11] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18172

[22:11] <lambdabot> Title: Changeset 18172 - Pugs - Trac

[22:12] *** chris2 left
[22:15] *** iblechbot left
[22:20] *** dvorak joined
[22:26] *** randomity left
[22:26] *** Limbic_Region joined
[22:27] *** polettix joined
[22:28] *** elmex left
[22:31] *** drupek12 left
[22:50] <pugs_svnbot> r18173 | lwall++ | Skeleton of new autolexer (doesn't really do dfa yet, so STD doesn't run)

[22:50] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18173

[22:50] <lambdabot> Title: Changeset 18173 - Pugs - Trac

[22:53] *** vbattsAtWork left
[22:57] *** drupek12 joined
[23:00] *** Aankhen`` left
[23:13] *** BinGOs joined
[23:25] *** cmarcelo left
[23:45] *** justatheory left
[23:50] *** ferreira left
[23:58] *** devogon left
