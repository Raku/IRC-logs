[00:02] <QtPlatypus> Is my's scope "THings that follow it" or "Things that follow it and are to the right of it?"

[00:03] <QtPlatypus> In other words.

[00:04] <QtPlatypus> my $sub = sub { $sub->() }; # What $sub gets called? 

[00:12] *** aukjan|gone joined
[00:18] <svnbot6> r15871 | lwall++ | compensate for pugs not parsing '{' and '}' correctly in rules

[00:19] <TimToady> QtPlatypus: that's a syntax error in Perl 6, and in any case the answer depends on whether you're talking about Perl 5 or Perl 6.  (Hint: Perl 5 does it wrong. :)

[00:19] <geoffb> ?eval my $sub = sub ($a = 5) { say $a }; my $sub = sub { $sub->(4) }; $sub->(3)

[00:19] <evalbot_r15831> Error: ‚ê§Unexpected "$sub"‚ê§expecting "=", "::", term postfix, operator, "}", context, ":" or "("

[00:20] <geoffb> ?eval my $sub = sub ($a = 5) { say $a }; my $sub = sub { $sub.(4) }; $sub.(3)

[00:20] <geoffb> I'm guessing recursion just occured.

[00:21] <evalbot_r15831> pugs: out of memory (requested 1048576 bytes)

[00:21] <geoffb> yep

[00:21] <TimToady> indeed, that's what you just asked it to do

[00:21] <TimToady> in any case the two "my $sub" declarations declare the same variable.

[00:21] <geoffb> Actually, I was hoping to get a redecleration eror

[00:21] <geoffb> er, error

[00:22] <TimToady> not impl

[00:22] <geoffb> nodnod

[00:22] <QtPlatypus> TimToady: I was asking about Perl6

[00:23] <TimToady> but to clarify to QtPlatypus, in Perl 5 "my $sub" is not introduced till after the statement, whereas

[00:23] <TimToady> in Perl 6 the $sub is introduced immediately, so is visible in the body.

[00:23] <QtPlatypus> So I should be able to do something like this in perl6 (Syntax correct fix if needed)

[00:23] <geoffb> I wish there was something I could do to help audreyt ... Haskell just doesn't ~~ my coding style

[00:24] <[particle]> ...join parrot...

[00:24] <[particle]> ;)

[00:24] <TimToady> QtPlatypus: yes, that sort of thing should work fine in P6 (modulo the infinite recursion).

[00:24] <QtPlatypus> my @fib = gather { take 1; take 1; my $i = 0; while (1) { take @fib[$i++] + @fib[$i] } };

[00:25] <QtPlatypus> ?eval my @fib = gather { take 1; take 1; my $i = 0; while (1) { take @fib[$i++] + @fib[$i] 

[00:25] <evalbot_r15831> Error: ‚ê§Unexpected "@fib"‚ê§expecting "=", operator, ":", ",", "}", context or "("

[00:26] <Aankhen``> ?eval my @fib = gather { take 1; take 1; my $i = 0; while (1) { take @fib[$i++] + @fib[$i] } }

[00:26] <TimToady> it might need to be a := instead

[00:26] <QtPlatypus> ?eval my @fib := gather { take 1; take 1; my $i = 0; while (1) { take @fib[$i++] + @fib[$i] } }; say @fib

[00:26] <Aankhen``> Um.

[00:26] <geoffb> [particle]: things may have changed, but last I looked adding features to languages/perl 6 was not terribly approachable ... and I can only spend time in small slices.  Not enough to go deep and study the existing code for a week.

[00:26] <QtPlatypus> TimToady: Why?

[00:26] <TimToady> = is probably going to try to be eager

[00:26] <Aankhen``> QtPlatypus: You might want to stop the loop at some time.

[00:26] *** whooosh joined
[00:26] <Aankhen``> ?eval my @fib = gather { take 1; take 1; my $i = 0; while ($i < 10) { take @fib[$i++] + @fib[$i] } }

[00:26] <QtPlatypus> ?eval my @fib := gather { take 1; take 1; my $i = 0; while (1) { take @fib[$i++] + @fib[$i] } }; say @fib[5]

[00:27] <Aankhen``> ?eval my @fib := gather { take 1; take 1; my $i = 0; while ($i < 10) { take @fib[$i++] + @fib[$i] } }; @fib.say

[00:27] <[particle]> geoffb: i'll keep you in mind for when we get Test.pm passing

[00:27] <geoffb> [particle]: do.

[00:27] <[particle]> then you should be able to do more coding in perl 6

[00:27] <Aankhen``> Bah.

[00:27] * QtPlatypus thinks we have gilled eval bot?

[00:27] <Aankhen``> :-(

[00:27] <geoffb> I'm just *itching* to convert a buttload of P5 to P6, but too many features are currently not impl

[00:27] <Aankhen``> ?eval 1

[00:28] <Aankhen``> Looks like it.

[00:28] <TimToady> probably an infinite loopish thing, so needs to exceed CPU limit

[00:28] <Aankhen``> 80,69404230pugs> my @fib := gather { take 1; take 1; my $i = 0; while ($i < 10) { take @fib

[00:28] <Aankhen``> 80,69404230[$i++] + @fib[$i] } }; @fib.say

[00:28] <Aankhen``> 80,69404230110000000000

[00:30] <TimToady> I suspect lazy array specs aren't implemented yet either.

[00:31] <moritz> is 1..* a lazy list or a range?

[00:31] <geoffb> In fact, a long time ago I had to add source filtering to some of my most complex P5 code to bring a little of the P6 syntax.  Because dozens of lines containing 'my $self =shift;' and '$self->foo' just drive me insane.

[00:31] <TimToady> moritz: it's both, presumably.

[00:32] <moritz> TimToady: ok ;-)

[00:32] <geoffb> TimToady++ # Now, less insane.  Or rather, less verbose in his insanity.

[00:33] <moritz> @karma TimToady 

[00:33] <lambdabot> TimToady has a karma of 27

[01:08] *** nipotaway is now known as nipotan

[01:12] *** dolmans joined
[01:29] *** nipotan joined
[01:35] *** avar joined
[01:36] *** avar joined
[01:47] *** Polar joined
[02:34] *** amnesiac joined
[02:59] *** mako132_ joined
[03:01] *** Eidolos_ joined
[03:10] *** Eidolos_ joined
[03:15] *** perlmonkey2 left
[03:26] *** ccc8 joined
[03:32] *** ccc6 joined
[03:34] *** justatheory joined
[03:37] *** SubStack joined
[04:05] *** esstone joined
[04:19] *** geoffb joined
[04:24] *** ortmage_ joined
[04:24] <cj> anybody done any work on compiling to .NET bytecode yet?

[04:49] *** agentz joined
[04:54] <agentz> @tell audreyt ~audreyt/pugs/ on feather is no longer auto-updated? yes, i see svnbot6 is still working, but your pugs_version.h has shown r15831 for days and ~audreyt/pugs/t is obviously out of date according to the snippets in http://perlcabal.org/syn/S04.html

[04:54] <lambdabot> Consider it noted.

[05:03] *** agentz left
[05:11] *** devogon joined
[05:28] *** the_dormant joined
[05:34] *** rfordinal joined
[05:49] *** mjk joined
[06:00] *** tokuhirom is now known as toku_away

[06:20] <pasteling> "evalbot_r15871" at 194.145.200.126 pasted "Pugs build failure" (329 lines, 18K) at http://sial.org/pbot/24110

[06:21] *** evalbot_r15871 joined
[06:23] *** toku_away is now known as tokuhirom

[06:23] <nothingmuch> masak: i stopped in the middle but the plan was to make tarballs for every chapter based on the source code history

[06:24] <nothingmuch> masak: you can make a branch in which you pull the code patches incrementally

[06:24] <nothingmuch> but the project was abandoned half way when I realized that forth is too beautiful to need a parser or anything interesting in haskell ;-)

[06:25] <nothingmuch> the thing is that forth only needs a very small bootstrap, just enough to get the ':' and ';' words working

[06:25] <nothingmuch> and you can even define these words in forth

[06:25] <nothingmuch> and sort of hack it in using a bootstrap compiler

[06:25] <nothingmuch> once you have that, you can just run a prelude, and when you're done loading that, save the memory image

[06:25] <nothingmuch> that's a typical forth system

[06:26] <nothingmuch> the interpreter could have been written in haskell, but I had intended it to be parrot

[06:26] <nothingmuch> however, I found learning parrot  an investment too big for my curiousity levels

[06:26] <nothingmuch> masak: </rant>

[06:27] <gaal> nothingmuch: moose

[06:28] <nothingmuch> moose!

[06:29] <nothingmuch> didn't go rowing today

[06:29] <nothingmuch> well, i did *go*, i just didn't row

[06:29] <nothingmuch> i was unsure whether or not we had actually made an appointment

[06:29] <nothingmuch> so I just went

[06:29] <nothingmuch> but it turns out we didn't finalize it

[06:29] <gaal> oh :(

[06:29] <nothingmuch> nevermoose, I had a nice morning bike ride

[06:30] <gaal> yeah, that path's great.

[06:30] <nothingmuch> how was yours?

[06:30] <gaal> short but sweet.

[06:32] *** ortmage_ joined
[06:35] <specbot6> r14368 | pmichaud++ | Add leading whitespace to lines so that the table

[06:35] <specbot6> r14368 | pmichaud++ | actually ends up looking like a table instead

[06:35] <specbot6> r14368 | pmichaud++ | of wrapping the text onto a single line.

[06:35] <specbot6> r14369 | larry++ | Reorganization suggested by Jonathan Lang++

[06:43] *** franck__ joined
[06:55] *** dduncan joined
[06:59] *** marmic joined
[07:08] *** SubStack joined
[07:13] *** iblechbot joined
[07:17] *** silug joined
[07:22] *** jisom joined
[07:42] *** xinming_ joined
[07:49] *** ortmage__ joined
[07:53] *** pnu joined
[07:55] *** frobnitz joined
[07:59] *** the_dormant joined
[08:03] <svnbot6> r15872 | franck++ |  r21212@franck-mbp:  franck | 2007-04-10 09:58:47 +0200

[08:03] <svnbot6> r15872 | franck++ |  ported File::Util to p6

[08:06] *** SCalimlim joined
[08:08] *** buetow joined
[08:38] *** andara joined
[09:10] *** Belaf joined
[09:28] *** ruoso joined
[09:41] *** tuna joined
[09:59] *** f0rth joined
[10:06] *** elmex joined
[10:56] *** chris2 joined
[11:01] *** xinming joined
[11:05] *** lichtkind joined
[11:22] *** nipotan is now known as nipotaway

[11:27] *** TimToady joined
[11:31] *** dduncan left
[11:33] <masak> nothingmuch: anyway, I'm grateful for what you did write, and like it so far @ 04.kwid

[11:37] *** lisppaste3 joined
[11:38] *** yiwin joined
[11:41] *** mako132_ joined
[11:48] *** fglock joined
[11:50] *** the_dormant joined
[11:51] *** mjk joined
[11:53] *** FurnaceBoy joined
[11:55] <nothingmuch> masak: cool

[12:01] *** Zaba joined
[12:01] <Zaba> hi all

[12:01] <Zaba> ?eval [~] <m oo se>

[12:01] *** evalbot_r15871 is now known as evalbot_r15872

[12:01] <evalbot_r15872> "moose"

[12:01] <Zaba> heh

[12:01] *** nekokak_ joined
[12:02] <Zaba> is there an approx. release date for perl6?

[12:04] *** iblechbot joined
[12:05] <moritz> Zaba: christmas ;-)

[12:05] *** Lunchy_ joined
[12:06] <Zaba> moritz, o'rly?

[12:06] *** prly_ joined
[12:06] *** MikeJS__ joined
[12:06] <moritz> Zaba: well, we don't know which year's christmas ;-)

[12:06] <Zaba> oh heh

[12:06] <Khisanth> o'reilly!

[12:06] <moritz> Zaba: and once perl6 is released, _ever_ day is christmas ;-)

[12:06] <Zaba> :D

[12:07] <Khisanth> then it will mutate into Lisp

[12:07] <Zaba> nooo

[12:07] <Zaba> lisp--

[12:07] <moritz> "Perl 6 is just another dialect of Lisp" -- larry wall ;-)

[12:08] <Zaba> =/

[12:09] <Zaba> well

[12:09] <Zaba> i don't like lisp, and i don't see perl any similiar to it

[12:09] <Khisanth> well even when that is true it is often misleading :)

[12:09] <moritz> Zaba: that's the beauty of perl: it's everything to eveyone ;-)

[12:10] <Zaba> and will i have to write in p*thon is perl will become lisp? ;-)

[12:10] * moritz doesn't even know lisp ;-)

[12:10] <Zaba> (and about python, the only thing i *really* miss in perl is interactive mode

[12:10] <Zaba> )

[12:11] *** xinming joined
[12:11] *** rashakil joined
[12:11] <Khisanth> pugs already has that!

[12:11] <moritz> Zaba: well, pugs has an interactive mode

[12:11] <Zaba> nice

[12:11] <Khisanth> and there is or at least someone is working on a module that provides that for perl5

[12:11] <moritz> Zaba: http://run.pugscode.org/ if you want to test it without installing

[12:12] <lambdabot> Title: Run Perl 6 Now -- in your browser!

[12:12] *** Limbic_Region joined
[12:12] <Khisanth> you can just use evalbot for that :P

[12:13] <moritz> Khisanth: it's a bit too annoying if you want to test many features

[12:14] * Khisanth never found much need for an interactive mode

[12:14] <Zaba> it doesn't handle ansi escapes ._.

[12:15] <Zaba> e[32;01mTest

[12:15] <Zaba> is pugs the only implementation?

[12:16] <moritz> Zaba: no, but the most complete one

[12:16] <moritz> Zaba: there is v6 and kp6/mp6 in the pugs repository

[12:16] <Zaba> and parrot?

[12:16] <moritz> Zaba: and "onion" = perl6 on parrot in the parrot repos

[12:17] <moritz> Zaba: parrot is a virtual maschine, designed as perl6 backend...

[12:17] *** buetow joined
[12:17] *** fglock joined
[12:17] <Zaba> heh

[12:17] <moritz> and pugs did support compiling to parrot code

[12:17] <Khisanth> also "Failed to create a new terminal", only one visitor at a time?

[12:17] <moritz> that's currently bit rotted

[12:18] <Khisanth> after selecting development version

[12:20] <moritz> same for me

[12:21] *** tokuhirom joined
[12:32] *** mdiep joined
[12:36] *** Belaf_ joined
[12:43] *** jisom_ joined
[12:44] *** riffraff joined
[12:44] <riffraff> hi

[12:45] <moritz> hi riffraff ;-)

[12:53] *** the_dormant joined
[12:53] *** rfordinal joined
[12:57] <Zaba> > reverse (show (scanl (*) 1 [1..] !! 4))

[12:58] <lambdabot>  "42"

[12:58] <Zaba> aha

[12:58] <Zaba> and the point is?

[13:00] <riffraff> Zaba, read douglas adams

[13:00] <spinclad> ? 4*3*2*1 s'tahw

[13:00] <Zaba> riffraff, ?

[13:00] <Zaba> ?eval 4*3*2*1

[13:00] <spinclad> [what's 6*9]

[13:00] <evalbot_r15872> 24

[13:00] <spinclad> ?eval 6*9

[13:00] <moritz> Zaba: "the hitchhiker's guide to the galaxy" ;-)

[13:00] <Zaba> spinclad, 54

[13:00] <evalbot_r15872> 54

[13:01] <Zaba> moritz, nooo i don't like it

[13:01] <spinclad> eval gets it ?wrong?

[13:01] <riffraff> well, it is humor based n his novels, you can't get it until you read those :) 

[13:01] <Zaba> ?eval print "I'm ok"

[13:01] <evalbot_r15872> OUTPUT[I'm ok] Bool::True

[13:01] <Zaba> :D

[13:01] <lumi> ?eval :13(6*9)

[13:01] <evalbot_r15872> 69

[13:01] <Zaba> 0,0

[13:02] <lumi> I think it doesn't work

[13:02] <Zaba> ?eval 9*6

[13:02] <evalbot_r15872> 54

[13:02] <Zaba> 0,.

[13:02] <lumi> ?eval :13(54)

[13:02] <evalbot_r15872> 69

[13:02] <Zaba> ?eval 6*9

[13:03] <evalbot_r15872> 54

[13:03] <spinclad> ?eval :13(10_

[13:03] <evalbot_r15872> Error: ‚ê§Unexpected ":13"‚ê§expecting "::"

[13:03] <spinclad> ?eval :13(10)

[13:03] <evalbot_r15872> 13

[13:04] <moritz> what's :13(10)? a pair 13 => 10?

[13:05] <andara> Khisanth: No, but the development version is broken for PUGS_SAFEMODE=1

[13:07] *** qu1j0t3 joined
[13:07] *** jweyrich joined
[13:10] *** fglock joined
[13:10] <spinclad> ?eval :13(100)

[13:10] <evalbot_r15872> 169

[13:10] <spinclad> read a number in base 13

[13:12] <spinclad> don't think you can write 13 => 10 as an adverb phrase

[13:13] <spinclad> ?eval :13(5+5)

[13:13] <evalbot_r15872> 13

[13:13] <spinclad> number -> string -> number

[13:16] <moritz> ?eval :2(1001)

[13:16] <evalbot_r15872> 9

[13:17] *** jweyrich left
[13:17] <moritz> ?eval :13(20)

[13:17] <evalbot_r15872> 26

[13:18] <spinclad> ?eval :13(1c)

[13:18] <evalbot_r15872> Error: ‚ê§Unexpected ":13"‚ê§expecting "::"

[13:19] <spinclad> ?eval :13('1c')

[13:19] <evalbot_r15872> 25

[13:20] <spinclad> now we need the opposite

[13:20] <spinclad> write a number in base 13

[13:21] <moritz> spinclad: I think that can easily be done in a library function 

[13:21] <moritz> no need to put that into the core

[13:23] <Zaba> ?eval `ls`

[13:23] <evalbot_r15872> Error: Unsafe function 'Pugs::Internals::runShellCommand' called under safe mode

[13:23] <Zaba> heh

[13:23] <Zaba> i would except that

[13:28] <fglock> a recent discussion on regex algorithms: http://lambda-the-ultimate.org/node/2064

[13:28] <lambdabot> Title: Regular Expression Matching Can Be Simple And Fast | Lambda the Ultimate

[13:31] *** vel joined
[13:32] *** qu1j0t3 left
[13:37] <[particle]> ?eval :10(:13(5+5))

[13:37] <evalbot_r15872> 13

[13:42] <spinclad> ?eval :13(1*10**2)

[13:42] <evalbot_r15872> 169

[13:42] <spinclad> oddly, this meets the spec

[13:43] <spinclad> oop no it doesn't

[13:43] <spinclad> pugs specbug

[13:43] <spinclad> should be 100

[13:43] <[particle]> i think it should be 100, too

[13:44] <spinclad> ?eval :13(1*:13(10)**2)

[13:44] <evalbot_r15872> 256

[13:46] *** falseep joined
[13:46] <spinclad> the arithmetic -> number coerce-to string -> number is wrong

[13:47] <spinclad> ?eval :13(1C)

[13:47] <evalbot_r15872> Error: ‚ê§Unexpected ":13"‚ê§expecting "::"

[13:48] <Zaba> ?eval 10^100

[13:48] <evalbot_r15872> (10 ^ 100)

[13:48] <Zaba> >_<

[13:48] <Zaba> ?eval (10 ^ 100)

[13:48] <evalbot_r15872> (10 ^ 100)

[13:48] <Zaba> ?eval print (10 ^ 100)

[13:49] <spinclad> that's an xor-junction

[13:49] <moritz> Zaba: use **

[13:49] <Zaba> ah

[13:49] <Zaba> ?eval print (10 ** 100)

[13:49] <evalbot_r15872> OUTPUT[one(VInt 10,VInt 100)] Bool::True

[13:49] <evalbot_r15872> OUTPUT[10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000] Bool::True

[13:49] <Zaba> yayay!

[13:49] <Zaba> ?eval 10 ** (10 ** 100)

[13:49] <evalbot_r15872> Inf

[13:49] <Zaba> o.o

[13:49] <Zaba> googolplex will be it!

[13:50] <spinclad> you can't have everything, where would you put it?

[13:50] <Zaba> ?

[13:50] <Zaba> well

[13:50] <Zaba> let's give the bot another 100**100 TB ram and seeif it can calculate that in a year then

[13:51] <Zaba> and we'll maybe get $googolplex if we will discover it's possibleto store it in mem :P

[13:52] <moritz> Zaba: it's easier to implement it algebraicly ;-)

[13:52] <spinclad> lazy arithmetic would be nice here

[14:08] *** kanru joined
[14:10] *** Casan joined
[14:21] *** perlmonkey2 joined
[14:23] *** rlb3_work joined
[14:24] <TimToady> ?eval :13<1C>

[14:24] <evalbot_r15872> 25

[14:25] <TimToady> :13(1C) doesn't work because 1C is not a valid token

[14:26] <Zaba> ?eval :10(1C)

[14:26] <evalbot_r15872> Error: ‚ê§Unexpected ":10"‚ê§expecting "::"

[14:27] <Zaba> ?eval :10(10)

[14:27] <evalbot_r15872> 10

[14:32] <Juerd> ?eval :13(1B)

[14:32] <evalbot_r15872> Error: ‚ê§Unexpected ":13"‚ê§expecting "::"

[14:32] <Juerd> ?eval :13<1B>

[14:32] <evalbot_r15872> 24

[14:32] <Juerd> I don't understand why this isn't 13 => "1B"

[14:34] <TimToady> the difference is that :13() is parsed as a function with an argument while :13<> is parsed as pair with a string argument.

[14:34] <TimToady> ?eval :foo(1+2)

[14:34] <evalbot_r15872> ("foo" => 3)

[14:34] <TimToady> ?eval :foo<1+2>

[14:34] <evalbot_r15872> ("foo" => "1+2")

[14:35] <TimToady> but the () form must have a valid expression inside, and 1B ain't one.

[14:36] <TimToady> but the :<digit> form is forced to be radix notation, not pairs

[14:37] <TimToady> you have to use fatarrow if the left side is a number.

[14:37] <TimToady> (and you want a pair)

[14:37] *** amnesiac joined
[14:39] *** bonesss joined
[14:40] <TimToady> that's just part of the generalization that adverb notation only allows identifiers on the left; any other expression there needs to use => instead, including 13 => '1B'

[14:43] *** xinming joined
[14:43] <TimToady> hmm, we could possibly allow $num.^13 to go the other way.

[14:44] <TimToady> might be too confusing with metamethods though

[14:45] <masak> so where does the '24' come from?

[14:45] <[particle]> 5.^13

[14:45] <masak> ?eval :13<1B>

[14:45] <evalbot_r15872> 24

[14:45] <TimToady> 13 + 11

[14:46] <masak> ok

[14:46] <lumi> ?eval 13:<42>

[14:46] <evalbot_r15872> Error: ‚ê§Unexpected ":<42"‚ê§expecting "_", fraction, exponent, term postfix or operator

[14:46] <lumi> Erk

[14:46] <lumi> ?eval :13<42>

[14:46] <evalbot_r15872> 54

[14:46] <masak> is there anything special in the <...> that forces hexadecimal?

[14:46] <TimToady> no

[14:46] <[particle]> string context

[14:46] <lumi> masak: qw

[14:47] * masak a bit quizzical

[14:47] <TimToady> :13['42']

[14:47] <masak> seems a lot of constructs conspire here

[14:47] <masak> TimToady: yes...

[14:47] <TimToady> ?eval :13['42']

[14:47] <evalbot_r15872> 42

[14:47] <TimToady> er...

[14:47] <masak> right

[14:47] <masak> this is getting simpler and simpler :)

[14:48] <TimToady> :13{'42'}

[14:48] <TimToady> ?eval :13{'42'}

[14:48] <evalbot_r15872> 54443306934741

[14:48] <masak> oh...

[14:48] <moritz> nice one ;-)

[14:48] <masak> I see

[14:48] <lumi> Now all becomes clear

[14:48] <masak> not

[14:48] <masak> yes, I'm glad you provide clear examples

[14:48] <TimToady> looks like <> is hardwired, not generalized to the other subscript forms

[14:49] <TimToady> but then that's probably not specced, so it's making up random numbers.

[14:49] <TimToady> :)

[14:49] <masak> back to :13<1B>

[14:49] <masak> what happens, step by step?

[14:49] <masak> it's a pair, yes?

[14:49] <TimToady> parsed as one initially

[14:49] <masak> like 13 => '1B'

[14:49] <TimToady> so '13' => '1B'

[14:49] <masak> yes

[14:50] <masak> whence 24?

[14:50] <TimToady> then because of : and because of it being a number and not and identifier

[14:50] <TimToady> it's forced to mean radix conversion

[14:50] <masak> <1B> is?

[14:50] <TimToady> 1B in base 13 is 13 + 11

[14:50] <masak> aha

[14:50] <TimToady> 1A would be 13 + 10

[14:51] <masak> for some reason I thought the radix conversion went the other way

[14:51] <masak> and it confused me that the radix was in (what looked like) hex

[14:51] <TimToady> no, it's for specifying the number in whatever base is convenient.

[14:51] <TimToady> mostly for literals, but the functional form fell out of it.

[14:51] <masak> so :13<1B> simply means "1B parsed as a base-13 number"

[14:52] <TimToady> ?eval :13('1B')

[14:52] <evalbot_r15872> 24

[14:52] <TimToady> yes

[14:52] * masak understands

[14:52] <masak> thx

[14:52] *** stevan__ joined
[14:52] <moritz> ?eval my $b = 5; :$b('11')

[14:52] <evalbot_r15872> Error: Cannot cast from VList [VStr "b",VInt 5] to Pugs.AST.Internals.VCode (VCode)

[14:53] <TimToady> have to use the radix() function for that.

[14:53] <moritz> ok ;-)

[14:53] *** rindolf joined
[14:54] *** jerrylee joined
[14:55] *** buetow joined
[14:57] <jerrylee> how's everything going on perl6 now?

[14:59] <moritz> well, it's evolving ;-)

[14:59] <masak> at quite a steady pace, actually

[15:00] *** yxam joined
[15:00] <TimToady> there's a steady baseline pace defined by the tortoises, with occasional bursts of speed defined by the hares.

[15:01] <TimToady> we don't expect the tortoises to go fast, nor do we expect the hares to go constantly.

[15:02] <masak> true. hacker-like creativity is a bit like rocket fuel in that sense

[15:02] <[particle]> TimToady: don't forget about the mooses

[15:02] <TimToady> mooses generally don't go at all

[15:02] <[particle]> but they're nice to look at

[15:02] <jerrylee> the development is mainly in parrot?

[15:03] <jerrylee> I have been waiting it for about 5 years ;)

[15:03] <TimToady> that's okay, I've been waiting for 6.5 years.  :)

[15:03] <jerrylee> TimToday: :D cool

[15:04] <jerrylee> and I am still waiting

[15:04] <masak> jerrylee: have you tried pugs lately?

[15:04] <TimToady> basically, parrot is working bottom up, and pugs is working top down, and someday they'll meet in the middle.

[15:04] <masak> ?eval "hello from pugs"

[15:04] <evalbot_r15872> "hello from pugs"

[15:04] *** yxam left
[15:04] <jerrylee> masak: latest version? not yet

[15:05] <jerrylee> i will go take one

[15:05] <[particle]> how close is 6.28 release?

[15:05] <masak> [particle]: guess it depends mostly on the hares right now

[15:06] *** xinming joined
[15:06] <jerrylee> well, run it in browser is really cool

[15:07] <masak> jerrylee: writing small scripts is cool too

[15:07] <masak> the holes are only noticeable once you start toying with OO

[15:07] <jerrylee> masak: interesting thing, is it a really pug machine behind?

[15:08] <jerrylee> or just some cgi?

[15:08] <[particle]> yes, the hampsters weren't cute enough

[15:08] <[particle]> y/p//

[15:08] <masak> jerrylee: not sure what you mean by that

[15:08] <masak> it's pugs that's running there through that web page, yes

[15:08] <masak> but it's also some cgi

[15:09] <jerrylee> masak: then it's really cool

[15:09] <masak> of course

[15:09] <masak> that's what we do here

[15:09] <masak> :)

[15:09] <jerrylee> pugs> :e print 'hello'

[15:09] <jerrylee> Loading Prelude... done.

[15:09] <jerrylee> helloVBool True

[15:09] <jerrylee> this is really strange ;)

[15:09] <masak> jerrylee: you probably don't want the ":e"

[15:10] <TimToady> ?eval say 'hello'

[15:10] <evalbot_r15872> OUTPUT[hello‚ê§] Bool::True

[15:10] <masak> ?eval 'hello'

[15:10] <evalbot_r15872> "hello"

[15:10] <jerrylee> ha, i got it

[15:11] <TimToady> jerrylee: would you like a commit bit?

[15:11] <jerrylee> all features of perl6 are loaded?

[15:11] <TimToady> all the implemented features... :/

[15:11] <jerrylee> TimToady: commit bit?

[15:11] <masak> jerrylee: writing permissions for the pugs project

[15:11] <TimToady> to be able to check in fixes/tests to pugs

[15:12] <masak> most people in here have one

[15:12] <TimToady> we hand 'em out like candy

[15:12] <jerrylee> TimToady: sounds good thing to try

[15:12] <masak> that's the spirit!

[15:12] <TimToady> msg me your email and we'll add you

[15:12] <jerrylee> TimToady: I might need some candy

[15:12] <moritz> you virtually can'T hang around here longer than 5min without getting one ;-)

[15:13] <masak> it's such a wonderful system

[15:13] <masak> most people who are in the least interested are committers

[15:13] <jerrylee> how to register freenode?

[15:13] <jerrylee> I cannot send private message

[15:14] <riffraff> write /msg nickserv help

[15:14] <moritz> and it works... at least it encouraged me to do a few commits

[15:14] <jerrylee> riffraff: thanks, trying now

[15:14] <riffraff> I think to register is /ns register email paswsord or something like that

[15:15] <jerrylee> TimToady: did you get that?

[15:15] <rindolf> Hi TimToady , moritz 

[15:15] <moritz> hi rindolf ;-)

[15:16] <rindolf> moritz: what's up?

[15:16] <rindolf> An Israeli friend told me "sup with you?" on IM.

[15:16] <rindolf> It sounded strange.

[15:16] <TimToady> yes, commit bit is on its way

[15:16] <moritz> rindolf: I'm writing a german webpage on perl6 ;-)

[15:16] <rindolf> His English is relatively bad.

[15:16] <rindolf> moritz: oh nice.

[15:17] <TimToady> jerrylee: it is customary to add yourself to AUTHORS as first checkin to see if it all works.

[15:18] <jerrylee> TimToady: no problem

[15:18] <andara> hi all

[15:19] <moritz> hi andara ;-)

[15:19] <andara> moritz: do you have an account on feather?

[15:22] <jerrylee> svn-ing now

[15:22] <moritz> andara: no

[15:23] <rindolf> moritz: I've invested some time on http://perl-begin.berlios.de/ - also a bit today.

[15:23] <rindolf> moritz: I hope I can give it a more official status soon.

[15:23] <lambdabot> Title: Perl Beginners' Site

[15:23] <andara> moritz: shame. I'm looking for someone who could build pugs on feather for me.

[15:24] <moritz> andara: and do you think I'am qualified? ;-)

[15:25] <andara> moritz: why not? you have a commit bit :-)

[15:25] <moritz> andara: ;-)

[15:25] <moritz> andara: I have debian packages, but I don't know if you can install them on feather...

[15:26] <moritz> andara: they install globally, eg in /usr/bin/, not the kind of thing you want on a multi user maschine

[15:26] <andara> moritz: I know how to build pugs just fine, but because I host runpugs, my account is ulimit'ed 

[15:27] <andara> moritz: so I can't build pugs while running runpugs :-(

[15:27] <jerrylee> pugs is really a big thing

[15:27] <moritz> andara: maybe you should ask Juerd for another account

[15:27] <moritz> andara: that might be the cleanest solution

[15:27] <andara> moritz: I agree.

[15:28] <masak> jerrylee: yes. and a lot of things in it already work

[15:28] <andara> moritz: BTW, are you still in Heriot-Watt?

[15:28] <moritz> andara: yes

[15:28] <masak> ie they implement perl6 correctly

[15:28] <andara> moritz: I'm at Glasgow

[15:28] <moritz> andara: hey, cool

[15:28] <jerrylee> masak: it's still svn=ing, maybe my internet connection is too slwo

[15:31] <masak> jerrylee: maybe, or maybe pugs takes a while to download regardless of connection

[15:31] <masak> but only the checkout, of course

[15:31] <jerrylee> it looks so ;)

[15:32] <masak> subsequent updates are much speedier

[15:33] <jerrylee> masak: it's not running on windows, is it?

[15:34] <TimToady> jerrylee: for where it runs and how well, see http://m19s28.vlinux.de/cgi-bin/pugs-smokeserv.pl?

[15:34] <lambdabot> Title: Pugs Smoke Reports

[15:34] <TimToady> looks like it's working as well on Windows as on Linux

[15:34] <TimToady> (look at the repository lines, not the release lines)

[15:34] *** DarkWolf84 joined
[15:36] <jerrylee> can i make it on windows?

[15:37] <TimToady> if you have ghc installed, yes

[15:37] <[particle]> TimToady: pmichaud has been converting pge tests to use active comments (# todo). based on this work, we're thinking about some extensions to the syntax

[15:37] <[particle]> for an example of what's done, see http://svn.perl.org/parrot/trunk/t/compilers/pge/perl6regex/rx_charclass

[15:37] <lambdabot> http://tinyurl.com/292jz2

[15:38] <[particle]> near the bottom, there's a bunch of todo for pugs, all the same. a block syntax would be prettier

[15:39] <[particle]> C<<# todo :pugs<feature> {>> paired with C<<# todo :pugs<feature> }>> maybe?

[15:39] <TimToady> could get confusing if different platforms want different blocks...

[15:39] <[particle]> or, make block syntax TODO

[15:40] <[particle]> uppercase would make it similar to p5

[15:40] <[particle]> as you say, you definitely need some way to distinguish between overlapping todo blocks

[15:40] <TimToady> similarity to p5 is not necessarily a recommendation around here.  :)

[15:42] <[particle]> it'd be nice to have the block be easily visually distinguished from non-block

[15:42] <[particle]> i think it should be different near the front, and not near the back

[15:43] <[particle]> # todo-block-begin :pugs<feature> seems too verbose

[15:43] <TimToady> I'm not yet convinced the blocks are needed.  There's something to be said for ugly when you want to motivate people to untodo things.  :)

[15:44] <masak> jerrylee: how's the downloading going?

[15:44] <jerrylee> masak: i am now learning how to build it on my xp pc

[15:45] <jerrylee> masak: all downloaded

[15:45] <jerrylee> 58MB, hweh

[15:47] <[particle]> TimToady: how about # skipall :parrot<not yet implemented>

[15:47] * jerrylee is wondering why GHC is so big

[15:47] <masak> jerrylee: you can still make that AUTHORS file commit, you know

[15:48] <masak> even without building pugs

[15:48] <[particle]> hurry, before your bit runs out!!!! ;)

[15:48] <masak> :)

[15:48] <[particle]> TimToady: i'm not sure about skipall, but i'd like to see # spec

[15:48] <jerrylee> masak: oh haha ;)

[15:49] <[particle]> have any thoughts about that?

[15:49] <jerrylee> masak: how shall i do that is fastest?

[15:49] <TimToady> [particle]: what does it do?

[15:50] <masak> jerrylee: add yourself to AUTHORS using your favorite editor

[15:50] <masak> and then do "svn ci AUTHORS"

[15:51] <masak> that's "svn commit AUTHORS" -- either works

[15:51] <jerrylee> masak: ok, i will make it happen asap

[15:51] <masak> jerrylee: swell

[15:51] <TimToady> jerrylee: on the other hand, don't let the gang give you grief.  :)

[15:52] <jerrylee> TimToady: :D

[15:52] <jerrylee> i am beating them

[15:53] <TimToady> that will not, of course, prevent them from giving you grief.  :)

[15:53] <masak> in fact, beating a gang has been known to make it give even more grief

[15:53] <masak> not this gang, though

[15:54] <masak> we just assimilate

[15:54] <TimToady> we're all either thick-skinned or thin-skinned around here as the need arises.  :)

[15:55] <masak> exactly :) we don't take offense so easily, because we evaluate insults lazily

[15:55] <[particle]> TimToady: a new smartlink syntax, eg. # spec PDD15<Role PMC API>

[15:56] <[particle]> (i forgot a colon)

[15:56] <jerrylee> ;)

[15:57] <TimToady> I'd try to make the syntax as close to the current smartlink syntax as possible.  Basically these comments are standing in for what would be in the .t file, except that the .t file is using a data file of some sort.

[15:58] <TimToady> and in fact I'd like to get the :todo entries out of the tests in the .t files as well.

[15:58] <[particle]> ok. then we need a new pod smartlink syntax

[15:58] <[particle]> TimToady: you were the one who argued *for* them last time around, you big fence-sitter :P

[15:58] <TimToady> I think currently they're using L<DOC/section/searchstring>

[15:58] <TimToady> or some such

[15:59] <[particle]> yes, which isn't even valid p5 pod syntax (but an easy extension)

[15:59] <TimToady> argued for which?  I was arguing for todo() on a separate line back then too.

[15:59] <[particle]> oh, i missed the colon in your message

[15:59] <TimToady> something that can in theory just be visually grepped out when you aren't interested

[16:00] * jerrylee is doing svn cleanup

[16:00] <[particle]> so, you'd like to see # todo in .t files?

[16:00] <TimToady> oh, okay

[16:00] <TimToady> either # todo or todo(...) as a function call

[16:01] <masak> jerrylee: why?

[16:01] <[particle]> i thought todo/skip/spec looked nice together

[16:01] <TimToady> todo(:pge<feature>) could work

[16:01] <jerrylee> masak: ha, I used cygwin to do svn, it failed ;)

[16:02] <TimToady> using todo() rather than # todo has the advantage of being processable without preprocessing the .t file

[16:02] <jerrylee> masak: i have cygwin in windows as linux emul

[16:02] <TimToady> smart comments would require a pass over the text

[16:02] <[particle]> right, in data files, # todo works better

[16:02] <TimToady> important thing is to get it out to a separate line.

[16:02] <[particle]> ...so you don't have to execute the data file

[16:03] <TimToady> maybe we could have skip and unskip

[16:03] * jerrylee has update AUTHORS, new build is 15873 ;)

[16:03] <svnbot6> r15873 | jerrylee++ | Added Jerry Lee

[16:03] <masak> wei!

[16:03] <TimToady> sugoi!

[16:04] <jerrylee> sorry for my slow motion ;)

[16:04] <TimToady> no problem, most of us here are tortoises

[16:04] <masak> yes. welcome

[16:04] <TimToady> the hares are mostly sleeping right now

[16:05] <TimToady> or should be...

[16:05] <jerrylee> :) interesting

[16:06] <[particle]> jerrylee: f·ilte

[16:06] <jerrylee> i guess tomorrow I should try to build it

[16:06] <jerrylee> irish?

[16:08] <[particle]> yep, irish

[16:08] *** xinming joined
[16:08] *** falesca joined
[16:08] <TimToady> it ain't japanese...

[16:08] <masak> jerrylee: good luck. that windows thing sure sounds like a pain

[16:08] * masak curses under his breath for missing obvious pun moment

[16:08] <TimToady> if you have trouble look up Lanny or Limbic_Region 

[16:08] <jerrylee> no problem

[16:09] <[particle]> you can also use the many bots hanging out here

[16:09] <[particle]> @tell jerrylee hello

[16:09] <lambdabot> Consider it noted.

[16:09] <[particle]> jerrylee: say something

[16:09] *** xinming joined
[16:09] <[particle]> @tell particle hello

[16:09] <lambdabot> Consider it noted.

[16:09] <moritz> ?eval say "something" # ;-)

[16:09] <[particle]> hee

[16:10] <evalbot_r15872> OUTPUT[something‚ê§] Bool::True

[16:10] <jerrylee> bots?

[16:10] <lambdabot> jerrylee: You have 1 new message. '/msg lambdabot @messages' to read it.

[16:10] <[particle]> see

[16:10] <masak> @tell evalbot_r15873 hello

[16:10] <lambdabot> Consider it noted.

[16:10] <moritz> ?eval 1

[16:10] *** evalbot_r15872 is now known as evalbot_r15873

[16:10] <evalbot_r15873> 1

[16:10] <lambdabot> evalbot_r15873: You have 1 new message. '/msg lambdabot @messages' to read it.

[16:10] <masak> he he

[16:10] *** xinming joined
[16:10] <moritz> ?eval "@messages"

[16:10] <evalbot_r15873> "\@messages"

[16:10] <[particle]> @tell evalbot_r15873 ?eval fork while fork;

[16:10] <lambdabot> Consider it noted.

[16:11] <jerrylee> very interesting bot

[16:11] <Juerd> Sigh :)

[16:11] <masak> [particle]: now that's just eeevil

[16:11] <[particle]> :)

[16:11] <masak> &

[16:11] <TimToady> ?eval fork

[16:11] <evalbot_r15873> Error: Unsafe function 'fork' called under safe mode

[16:11] <lambdabot> evalbot_r15873: You have 2 new messages. '/msg lambdabot @messages' to read them.

[16:17] *** prly joined
[16:22] <Zaba> dude

[16:22] <Zaba> it's evil >_>

[16:22] <Zaba> it can't read its messages

[16:22] *** prly__ joined
[16:22] <[particle]> somebody will just have to commit something

[16:22] <Tene> ?eval @moosages

[16:22] <evalbot_r15873> []

[16:22] <Tene> ?eval \@moosages

[16:22] <evalbot_r15873> []

[16:23] <Tene> ?eval "@moosages"

[16:23] <evalbot_r15873> "\@moosages"

[16:23] <jerrylee> ?eval 

[16:23] <evalbot_r15873> No code to eval given.

[16:23] <jerrylee> ?eval "say hi"

[16:23] <evalbot_r15873> "say hi"

[16:23] <jerrylee> ?eval sleep

[16:23] <evalbot_r15873> Error: ‚ê§Unexpected end of input

[16:24] <jerrylee> ?eval exit

[16:24] <evalbot_r15873> Error: Unsafe function 'exit' called under safe mode

[16:27] *** prly___ joined
[16:28] *** ludan joined
[16:29] <jerrylee> ?eval say hi while (1)

[16:29] <evalbot_r15873> Error: No such subroutine: &hi

[16:29] <jerrylee> ?eval print  while (1)

[16:29] <jerrylee> what's going on

[16:30] <DarkWolf84> while(1) ^^

[16:30] <jerrylee> ?eval fork

[16:30] <evalbot_r15873> OUTPUT[

[16:30] <DarkWolf84> thats cruel :)

[16:30] <evalbot_r15873> Error: Unsafe function 'fork' called under safe mode

[16:30] * [particle] pokes evalbot_r15873

[16:30] <jerrylee> but it did works

[16:31] <jerrylee> maybe it's no safe enough ;)

[16:32] *** lichtkind_ joined
[16:32] <jerrylee> ? eval print "hi"

[16:32] <jerrylee> ?eval print "hi"

[16:32] <evalbot_r15873> OUTPUT[hi] Bool::True

[16:33] * jerrylee is really sleepy

[16:33] <jerrylee> time to say goodnight :)

[16:33] <moritz> jerrylee: night ;-)

[16:33] <jerrylee> bye guys :)

[16:34] <jerrylee> bye moritz

[16:38] *** bernhard joined
[16:40] *** franck__ joined
[16:41] *** justatheory joined
[16:47] *** DarkWolf84 joined
[16:49] *** kane_ joined
[16:50] *** Lunchy_ is now known as Lunchy

[16:54] *** ortmage_ joined
[17:16] *** toshinori joined
[17:39] <Limbic_Region> @seen audreyt

[17:39] <lambdabot> audreyt is in #perl6 and #haskell. I last heard audreyt speak 11h 21m 44s ago.

[17:42] *** Psyche^ joined
[17:44] *** jamhed joined
[17:52] <svnbot6> r15874 | fglock++ | - updated v6/yapc-sa-hackathon.txt

[17:53] *** explorer joined
[17:54] *** Psyche^ is now known as Patterner

[17:57] *** fglock joined
[18:05] *** xdg joined
[18:05] <spinclad> ?eval :13<1*:13<10>**2>

[18:05] *** evalbot_r15873 is now known as evalbot_r15874

[18:05] <evalbot_r15874> 406616

[18:06] <Limbic_Region> reverse (show (scanl (*) 1 [1..] !! 4))

[18:06] <Limbic_Region> reverse (show (scanl (*) 1 [1..] !! 4))

[18:06] <Limbic_Region> grrr

[18:07] <moritz> Limbic_Region: I think you need a '> ' in front

[18:07] <Limbic_Region> moritz, no - it is this terrible IRC client I am forced to use

[18:07] <spinclad> ?eval :13<113102>

[18:07] <evalbot_r15874> 406616

[18:08] <Limbic_Region> but c'est la vie

[18:08] <moritz> oui, c'est vrai ;-)

[18:09] <spinclad> so pugs doesn't have the specced exponential form...

[18:13] *** jisom joined
[18:29] *** the_dormant joined
[18:35] <svnbot6> r15875 | lwall++ | Don't need to indirect stoppers when <?before($stop)> can take arg directly.

[18:35] <svnbot6> r15875 | lwall++ | Teach cheater to translate $.expect* calls to subrule calls.

[18:38] <pasteling> "evalbot_r15874" at 194.145.200.126 pasted "Pugs build failure" (15 lines, 593B) at http://sial.org/pbot/24119

[18:40] <TimToady> strange, builds here

[18:41] <moritz> usually a "make realclean" will do ;-)

[18:52] <jisom> anyone have any clue as to how to get ghc running on freebsd/amd64

[18:54] <TimToady> looks like clkao was doing smokes on freebsd back in October

[18:55] <TimToady> but he's probably in bed right now

[18:57] <jisom> there's an x86 version in ports for freebsd, but it's i386 only(probably a bootstrapping problem)

[18:57] *** yiwin left
[18:57] <TimToady> on the bright side, the smokes look like 64bit

[18:57] <TimToady> says archname: i386-freebsd-64int

[18:58] <TimToady> perhaps you will be doing "original research"

[18:59] <jisom> eh, doubtfully, but maybe independent research

[19:00] <jisom> but that's worse

[19:00] <gaal> jisom: funny, there's a thread on that on ghcusers just now

[19:00] <gaal> [email@hidden.address]
[19:01] <gaal> the short of it, in libraries/base/Text/Regex/Posix.hs change

[19:01] <gaal> -      nsub <- ((\hsc_ptr -> peekByteOff hsc_ptr 4)) regex_ptr

[19:01] <gaal> +      nsub <- ((\hsc_ptr -> peekByteOff hsc_ptr 8)) regex_ptr

[19:01] <gaal> if you're building your own ghc

[19:01] <gaal> but look out for further patches.

[19:02] <jisom> yeah, it's fairly high up on google for "ghc freebsd amd64" actually....

[19:02] <gaal> (and a binary...)

[19:02] <TimToady> fix one hardwired constant with another...cool... :/

[19:03] <gaal> TimToady: it's a generated constant, but the unfortunate thing is that it's generated on a different machine

[19:03] <TimToady> that would be a problem

[19:03] <jisom> so the cross compiler part doesn't really do enough cross compiling?

[19:03] <TimToady> but you'd think the Haskell folks would be about the last to fall into the trap of too little abstraction.  :)

[19:04] <gaal> "This will be fixed as a side effect of http://hackage.haskell.org/trac/ghc/ticket/1160."

[19:04] *** ortmage_ joined
[19:04] <lambdabot> Title: #1160 (drop regex-posix in favour of regex-tdfa?) - GHC - Trac

[19:04] <gaal> jisom: the compiler doesn't see it, it's in hsc2hs

[19:04] <TimToady> tdfa?  to-die-for algorithm?

[19:05] <jisom> then I'll get to look into the other issues with freebsd/amd64, which might involve freebsd using amd64 instead of x86_64

[19:05] <xdg> quick question: how is v6.pm going?

[19:07] *** the_dormant joined
[19:08] *** the_dormant joined
[19:08] <TimToady> xdg: quick answer: fglock has mostly been working on mp6 and kp6 recently.

[19:09] <xdg> Could I please get a translation of  mp and kp?  

[19:09] <TimToady> miniperl and kindaperl

[19:10] <TimToady> subsets intended for bootstrapping

[19:10] * xdg watches the Perl 6 learning curve get steeper...

[19:10] <TimToady> you don't have to learn them unless you're into bootstrapping.  :)

[19:11] <xdg> I was going to mention v6.pm on Win32 for my Vanilla Perl talk, but I may not if development on it is stalled or if its irrelevant

[19:13] <TimToady> well, the main problem with v6 is the same as all the other current implementations, which is that they're not using a parser written in p6.

[19:13] <fglock> hi

[19:13] <TimToady> I'll let fglock answer for the rest of it... :)

[19:13] <fglock> :)

[19:14] <fglock> v6.pm got some maintenance lately, but it needs a cpan upload

[19:14] <TimToady> to what extent is v6 blocking on issue in the p5 runtime?

[19:14] <fglock> it currently depends on an update of Sub::Multi

[19:14] <TimToady> *issues

[19:15] <fglock> it's not really blocking; I plan to replace parts of v6 with kp6 routines

[19:15] <fglock> maybe depending on the yapc::sa hackathon results

[19:15] *** prism joined
[19:17] *** polettix joined
[19:17] <fglock> the long-term idea is to start sharing more code between kp6 and v6, until v6 and 6-on-6 become almost the same thing

[19:17] <xdg> fglock: thanks for the overview.  So if I mention in in a Win32 talk, it's still a relevant project, then...

[19:18] <xdg> *it

[19:18] <fglock> xdg: mp6 also runs on perl5; but it is written in a subset of perl6

[19:19] <xdg> I feel doomed to step into the Escher and ask what parses mp6

[19:20] <fglock> re using a parser written in perl6, it is in the works; but currently it is not worth the trouble, there are some things to do first

[19:20] *** rhr joined
[19:21] <fglock> xdg: mp6 parses mp6; see http://svn.pugscode.org/pugs/v6/docs/

[19:21] <lambdabot> Title: Revision 15875: /v6/docs

[19:23] <xdg> And the mp6 emitter to backend "X" isn't written yet?

[19:24] <fglock> it depends on X

[19:26] <fglock> by the end of the week there will be a hackathon, we plan to port mp6 to pugs (and possibly parrot)

[19:26] <xdg> For which X are there emitters?

[19:26] <fglock> currently perl5 (bootstrapped), parrot (incomplete)

[19:27] <fglock> I started some C work, but it doesn't look promising 

[19:28] * xdg glances around the twisty maze of passages in despair

[19:28] <[particle]> re: parrot (incomplete) ...i see that all too often :(

[19:29] <fglock> I need to find out what is the current state of perl6-in-parrot, in order to write code for it

[19:30] <xdg> fglock: thanks for walking me through all that.  I've got to get back to real work now, but look forward to seeing how it all turns out.  

[19:30] * kattana_ runs around a corner in the maze and bumps into xdg

[19:30] <fglock> xdg: ok :)

[19:36] <[particle]> fglock: feel free to join us on #parrot for answers

[19:37] *** larsen_ joined
[19:41] <spinclad> fglock: pmichaud mentioned in #parrotsketch today :

[19:41] <svnbot6> r15877 | franck++ |  r21237@franck-mbp:  franck | 2007-04-10 21:38:17 +0200

[19:41] <svnbot6> r15877 | franck++ |  File::Find : follow (or not) symlink with follow attribute

[19:41] <svnbot6> r15877 | franck++ |  File::Util : code for isbin filetype

[19:41] <spinclad> 14:36:40 < pmichaud> * I also spent a fair bit of time examining fglock++'s "miniperl6" implementation in pugs, now that  I understand what it's doing

[19:41] <spinclad> 14:36:43 < pmichaud> * I may see about taking a miniperl6-like approach with some of Parrot's translation tools

[19:41] *** baest joined
[19:41] <spinclad> 14:36:46 < pmichaud> * I also spent some time looking at generator/iterator ideas over the weekend so that I can get that  part of perl6 implemented

[19:54] *** rashakil_ joined
[19:57] <fglock> [particle]: thanks; I'm installing a newer parrot

[19:59] <fglock> hmm - I hope we could join forces some day

[20:00] <fglock> anyway, if there is some reuse it's ok

[20:00] *** ortmage_ joined
[20:01] *** Aankhen`` joined
[20:01] <fglock> TimToady: I found out I can implement regex "|" using the current <%hash> code

[20:01] <fglock> only doing some pre-processing

[20:04] *** ortmage_ joined
[20:07] *** geoffb joined
[20:08] <fglock> spinclad: miniperl6 was actually meant for parrot

[20:08] <fglock> I wonder if pm would help with kp6

[20:08] *** pjcj joined
[20:09] <fglock> but it is nice to see he is interested :)

[20:09] <spinclad> ask him -- i want to see you two working together

[20:09] <[particle]> meetoo

[20:10] *** Chatterman joined
[20:12] *** Chatterman left
[20:15] *** lichtkind joined
[20:17] *** offby1` joined
[20:17] *** diakopter joined
[20:32] *** offby1` is now known as offby1

[20:37] *** dduncan joined
[20:41] *** c6rbon joined
[20:58] *** pjcj_ joined
[21:00] *** buetow joined
[21:05] *** fglock left
[21:20] *** Limbic_Region joined
[21:29] *** larsen_ joined
[21:45] *** lichtkind joined
[21:45] <lichtkind> ?eval do{}

[21:45] *** evalbot_r15874 is now known as evalbot_r15877

[21:45] <evalbot_r15877> undef

[21:45] <lichtkind> ?eval do{1}

[21:45] <evalbot_r15877> 1

[21:45] <lichtkind> ?eval do{...}

[21:45] <evalbot_r15877> Error: Cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode)

[21:45] *** Polar joined
[21:45] <lichtkind> ?eval sub arg{...}

[21:46] <evalbot_r15877> undef

[21:46] <lichtkind> ?eval sub arg{}

[21:46] <evalbot_r15877> undef

[21:46] <lichtkind> ?eval sub arg{!!!}

[21:46] <evalbot_r15877> undef

[21:46] <lichtkind> ?eval sub arg{}; arg;

[21:46] <evalbot_r15877> undef

[21:46] <lichtkind> ?eval sub arg{!!!}; arg;

[21:46] <evalbot_r15877> Error: !!! - not yet implemented

[21:46] <lichtkind> ahhh

[21:47] <Tene> ?eval sub arg{...}; arg;

[21:47] <evalbot_r15877> *** ... - not yet implemented‚ê§    at <eval> line 1, column 9-12

[21:51] *** FurnaceBoy joined
[23:01] *** Odin- joined
[23:02] *** Polar joined
[23:10] *** perlmonkey2 left
[23:10] <prly___> ?eval 

[23:10] <prly___> sub f1($a,$b){say "$a:$b"}; sub invo($f,*@args){$f(|@args)}; invo(&f1,2,5)

[23:10] <evalbot_r15877> No code to eval given.

[23:10] <prly___> ?eval sub f1($a,$b){say "$a:$b"}; sub invo($f,*@args){$f(|@args)}; invo(&f1,2,5)

[23:10] <evalbot_r15877> OUTPUT[2:5‚ê§] Bool::True

[23:11] <prly___> ?eval sub f1($a,$b){say "$a:$b"}; class foo{has $.f; method invo(*@args){$.f.(|@args)}}; foo.new(f=>&f1).invo(2,5)

[23:11] <evalbot_r15877> OUTPUT[2 5:‚ê§] Bool::True

[23:14] <prly___> there must be something I didn't understand properly

[23:14] <prly___> shouldn't they produce the same result ?

[23:23] <TimToady> I'd think so.  I can't even get it to compile in my pugs though... :(

[23:24] *** mr_ank joined
[23:24] <TimToady> says: *** Undeclared variable: $b at try line 1, column 22-30

[23:25] <Limbic_Region> TimToady - do you know since what build?

[23:25] * Limbic_Region hasn't tried in a few days because there didn't appear to be any significant updates

[23:25] <TimToady> no, I'm at 15875

[23:26] <Limbic_Region> ok - will check my current pugs (which is built)

[23:26] <Limbic_Region> hrm, this doesn't look right

[23:26] <Limbic_Region> r15836

[23:27] <Limbic_Region> will attempt to build anyhow

[23:27] *** meppl joined
[23:27] *** marmic joined
[23:31] <Limbic_Region> pugs built fine for me as of r15837

[23:31] <Limbic_Region> er

[23:31] <Limbic_Region> r15877

[23:35] *** gnuvince_ joined
[23:36] <gnuvince_> > reverse (show (scanl (*) 1  [1..] !! 4))

[23:36] <lambdabot>  "42"

[23:36] <gnuvince_> > scanl

[23:36] <lambdabot>  Add a type signature

[23:38] <TimToady> hmm, it actually parses, it's the |@args that isn't binding right, so it seems to be roughly the same error that prly___ is getting.

[23:39] <TimToady> except I'm getting a strictness error

[23:39] <TimToady> and evalbot seems not to care about the unbound $b

[23:41] <TimToady> would be nice if pugs didn't report an undefined parameter as undeclared though...

[23:41] <TimToady> by the way, changing the example to use (*$a, *$b) makes it work.

[23:42] <TimToady> ?eval sub f1 (*$a, *$b) { say "$a:$b" }; class foo { has $.f; method invo (*@args) { $.f.(@args) } }; foo.new(f=>&f1).invo(2,5)

[23:42] <evalbot_r15877> OUTPUT[2:5‚ê§] Bool::True

[23:43] <TimToady> so it appears that |@args in a method call is what is hosed.

[23:46] *** buetow joined
[23:48] *** MikeJS__ is now known as MikeJS

