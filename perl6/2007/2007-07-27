[00:23] *** weinig joined
[00:24] *** weinig left
[00:24] *** weinig joined
[00:32] *** sysdef left
[00:32] *** meppl left
[00:32] *** pjcj left
[00:32] *** demq left
[00:32] *** Patterner left
[00:32] *** pugs_svnbot left
[00:32] *** dduncan left
[00:32] *** idiotmax left
[00:32] *** ashleyb left
[00:32] *** BinGOs left
[00:32] *** gaal left
[00:32] *** Eidolos left
[00:32] *** F7 left
[00:32] *** Yappo left
[00:32] *** PerlJam left
[00:32] *** wolverian left
[00:32] *** Juerd left
[00:32] *** integral left
[00:32] *** theorbtwo left
[00:32] *** JarJarBinks left
[00:32] *** mr_ank left
[00:32] *** BooK left
[00:32] *** statico left
[00:32] *** clkao left
[00:32] *** audreyt_ left
[00:32] *** GeJ left
[00:32] *** rhr left
[00:32] *** sri_ left
[00:32] *** args left
[00:32] *** blblack left
[00:32] *** Gothmog_ left
[00:32] *** takanori left
[00:32] *** SubStack left
[00:32] *** felipe left
[00:32] *** pjcj joined
[00:32] *** demq joined
[00:32] *** Patterner joined
[00:32] *** pugs_svnbot joined
[00:32] *** dduncan joined
[00:32] *** idiotmax joined
[00:32] *** ashleyb joined
[00:32] *** BinGOs joined
[00:32] *** gaal joined
[00:32] *** Gothmog_ joined
[00:32] *** blblack joined
[00:32] *** args joined
[00:32] *** sri_ joined
[00:32] *** rhr joined
[00:32] *** sysdef joined
[00:32] *** GeJ joined
[00:32] *** audreyt_ joined
[00:32] *** clkao joined
[00:32] *** takanori joined
[00:32] *** meppl joined
[00:32] *** statico joined
[00:32] *** felipe joined
[00:32] *** BooK joined
[00:32] *** mr_ank joined
[00:32] *** SubStack joined
[00:32] *** JarJarBinks joined
[00:32] *** theorbtwo joined
[00:32] *** integral joined
[00:32] *** Juerd joined
[00:32] *** wolverian joined
[00:32] *** PerlJam joined
[00:32] *** Yappo joined
[00:32] *** F7 joined
[00:32] *** Eidolos joined
[00:35] *** sunnavy joined
[00:35] <pugs_svnbot> r17148 | perlDreamer++ | Test for when the list is explicit, and not a variable. This

[00:35] <pugs_svnbot> r17148 | perlDreamer++ | fails on parrot currently.

[00:35] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17148

[00:35] <lambdabot> Title: Changeset 17148 - Pugs - Trac

[00:35] *** timbunce left
[00:37] *** Schwern left
[00:45] *** weinig left
[00:45] *** weinig joined
[00:47] *** justatheory left
[00:56] *** Schwern joined
[00:57] *** Schwern left
[00:57] *** nipotaway is now known as nipotan

[01:17] *** weinig left
[01:19] *** devogon left
[01:20] *** Limbic_Region left
[01:24] *** Southen left
[01:25] *** thoughtpolice joined
[01:34] *** nekokak left
[01:36] *** nekokak joined
[01:42] *** nekokak left
[01:44] *** Jmax joined
[01:44] *** nekokak joined
[01:49] *** dolmans joined
[02:02] *** Caelum joined
[02:18] *** weinig joined
[02:27] *** kanru left
[02:31] *** Schwern joined
[02:31] *** Schwern left
[02:46] *** aindilis joined
[02:49] *** dduncan left
[02:51] *** kanru joined
[03:13] *** xinming left
[03:40] *** dduncan joined
[03:43] *** Schwern joined
[03:47] <thoughtpolice> hm. seems to have been pretty quiet lately. then again i've not been around too much I suppose :x

[03:49] <diakopter> thoughtpolice: remind me again, you're good with haskell?

[03:55] *** amnesiac joined
[03:55] *** Khisanth left
[03:57] *** jiing joined
[03:59] *** TheSocialistAven joined
[04:01] *** Khisanth joined
[04:04] *** TheSocialistAven left
[04:07] *** xinming joined
[04:08] *** weinig left
[04:11] *** awwaiid left
[04:14] <thoughtpolice> diakopter: i wouldn't exactly call myself 'advanced' but i feel i can manage ;)

[04:19] <diakopter> thoughtpolice: neat.  I'd like to schedule a bit of an irc meeting among the haskellites

[04:20] <diakopter> sometime in the next week or two...

[04:24] <thoughtpolice> diakopter: cool.

[04:24] <thoughtpolice> diakopter: if you can alert me ahead of time; my schedule's been a little crazy lately so a forecast would be appreciated :)

[04:26] *** BinGOs left
[04:26] <diakopter> yes, there's no hurry (within reason).  I'd like to try to find a time when everyone interested can be involved in realtime.

[04:27] <diakopter> any tips on scheduling logistics for globally synchronized meetings? :)

[04:27] <Tene> thoughtpolice: I bet it would help diakopter if you gave him some idea of when you might be available.

[04:29] <diakopter> Tene: there you go :)

[04:29] <Tene> diakopter: date -d "Sun Jul 10 20:00:00 UTC 2007"

[04:29] <thoughtpolice> in general if you just tell me i can make myself available then

[04:29] <thoughtpolice> but with no warning i have no guarantees.

[04:29] <Tene> Give datetime with an explicit timezone (preferrable UTC) and use date -d to display it in local time.

[04:32] *** BinGOs joined
[04:32] <Tene> (the datetime I gave as an example was, of course, just an example)

[04:38] <diakopter> Tene: oh, you mean you can't be available two weeks ago?

[04:38] <diakopter> oh, but the 10th wasn't a Sunday...

[04:38] *** BinGOs left
[04:43] *** BinGOs joined
[04:48] *** BinGOs_ joined
[04:50] *** justatheory joined
[05:03] *** Schwern left
[05:04] *** BinGOs left
[05:05] *** zamolxes left
[05:10] *** Schwern joined
[05:11] *** Schwern left
[05:15] <lumi> diakopter: What's the meeting for

[05:17] <lumi> s/$/?/

[05:34] *** devogon joined
[05:41] *** jisom joined
[05:47] *** nipotan is now known as nipotaway

[05:56] <diakopter> lumi: I'm interested in asking some questions of the former-lambdacamels as well as the haskellites who came along recently... about Perl 6 on Haskell.  I have some ideas about different backend/frontend ideas that I'd like to run by folks who know functional programming (and Haskell and GHC in particular)...

[05:57] *** elmex joined
[05:57] <diakopter> er, different backend/frontend models, I mean.

[05:58] <diakopter> ideas about ideas? ;)

[05:58] * diakopter winks at himself, he's so sleepy.

[06:01] *** jisom_ joined
[06:02] *** kanru left
[06:04] *** kanru joined
[06:10] *** awwaiid joined
[06:14] *** Aankhen`` joined
[06:18] *** amnesiac left
[06:19] *** jisom left
[06:26] *** iblechbot joined
[06:26] *** cognominal_ left
[06:36] *** buetow joined
[06:44] *** tcliou is now known as tcliouAway

[06:48] *** justatheory left
[06:51] *** masak joined
[06:53] *** masak left
[06:54] *** masak joined
[07:09] *** torz joined
[07:11] <torz> hey all.

[07:12] <masak> torz: hello

[07:13] *** buetow left
[07:16] *** polettix joined
[07:20] *** masak left
[07:21] *** masak joined
[07:24] *** masak left
[07:25] <polettix> masak: hello :) yesterday I lost connection but I didn't realise, did you ask me something? I have no log here

[07:25] *** masak joined
[07:25] <polettix> rotfl

[07:25] <polettix> masak: hello :) yesterday I lost connection but I didn't realise, did you ask me something? I have no log here

[07:25] <masak> polettix: um, yes, but it was a fairly impertinent question. I asked if you could help me debugging something

[07:26] <masak> solely on the grounds that you seemed to have time on your hands and that it's more fun and speedier to debug with someone

[07:26] <polettix> I have some time now, but I fear you'll have to wait until I get my pugs refreshed

[07:27] <masak> no problem

[07:27] *** BinGOs_ is now known as BinGOs

[07:28] <masak> when you're ready, I'd like to turn your attention towards ext/DateTime/t/basic.t

[07:28] <polettix> ok, I'll give you a call

[07:29] <masak> great

[07:35] <polettix> uhm, I was a bit behind... and now it seems that I have to upgrade ghc as well

[07:35] <masak> polettix: ah, yes. the 6.6.1 thing

[07:36] <masak> take your time. I'm sitting here studying Latin in the meantime

[07:36] <polettix> Latin? amazing

[07:36] *** franck____ left
[07:36] <masak> polettix: Latin is an eye-opener. highly recommended if you like languages

[07:36] <polettix> I Vitelli dei romani sono belli

[07:37] <masak> that sounded very italian to me. was it?

[07:37] <polettix> this sentence has a meaning in Latin, and a completely different meaning in Italian :)

[07:37] <masak> polettix: oh. what meanings?

[07:38] <polettix> In Latin it's: "Go, Vitellio, (now that you can hear) the sound of war of romans gods"

[07:38] <polettix> more or less

[07:38] <masak> ok -- I guess that must be medieval latin

[07:39] <masak> never seen imperative "I" for "go" before

[07:39] <polettix> in Italian it's pretty lame: "romans' calves are handsome"

[07:39] <polettix> eo is ivi itum ire

[07:39] <masak> polettix: :)

[07:39] <polettix> don't really remember the imperative form, anyway :)

[07:40] <masak> so "vitelli" is "calves" in italian?

[07:40] <polettix> only if "calves" is the plural of "calf" :)

[07:40] <masak> :)

[07:41] * masak is fairly certain it is

[07:41] <masak> yup, it is

[07:41] <polettix> I guessed right, I hope

[07:41] <masak> interesting sentence

[07:41] * masak is reading Augustus' Momentum Ancyranum

[07:43] <polettix> ok, I'm compiling pugs at last

[07:44] <polettix> meanwhile, I think I can go and take a look at the test you pointed me to

[07:45] <polettix> please take into account that I know very little of Perl 6

[07:46] <masak> polettix: no problem. that's the beauty of the tests, they tell you if things are working or not

[07:46] <masak> I'm hardly an expert either, I'm just fervently eager to help triaging

[07:48] *** franck___ joined
[07:49] <polettix> just for curiosity, why the eval-s in test #2?

[07:50] <masak> hold on

[07:50] <masak> could be a fossil from where that syntax broke pugs in some way

[07:51] <masak> I don't see why it would be needed for #2 and not for #3 and #4

[07:51] *** jsmock joined
[07:51] <polettix> yep

[07:51] * masak would like a (jump-to-test number) function in emacs

[07:52] <masak> anyway

[07:52] <polettix> now... the second block of tests and the third one are a repetition?

[07:52] <polettix> ah no

[07:52] <polettix> new() in the first, now() in the second

[07:52] <masak> yep

[07:52] <masak> it's the now() that screws up, I think

[07:53] <masak> have you run the tests?

[07:53] <masak> or are you still compiling?

[07:53] <polettix> not yet, I'm looking at the smoke results

[07:53] <polettix> http://m19s28.vlinux.de/iblech/stuff/pugs-smokes/pugs-smoke-6.2.13-r17147-linux-normal--1185491801-9496--18817-17553-1264-1965-742-46--2a438ce684ce329a6200f7e4e6620cfe.html

[07:53] <lambdabot> Title: TAP Matrix - Thu Jul 26 23:16:16 2007 GMT, http://tinyurl.com/yq9tbq

[07:54] <masak> polettix: that's fine

[07:54] *** dduncan left
[07:55] <masak> now you see why I was attracted to this test file

[07:55] <masak> it's the first one with red entries

[07:56] <polettix> ahahah starting from the beginning

[07:56] <masak> yes

[07:57] <masak> there are 1264 tests failing :)

[07:57] <masak> many of the probably for the same reason, though

[07:58] <polettix> what does   $!year = $time.year    mean?!?

[07:59] <masak> polettix: I must punt to S12 on that one

[07:59] <polettix> ok

[07:59] <masak> but I asked myself that as well

[08:00] <masak> ok, so what can we say generally?

[08:01] <masak> the Date objects are created

[08:01] <polettix> but I still don't get it fully

[08:01] <masak> which accounts for the green boxes in between the red ones

[08:01] <polettix> I mean, the declaration is   has Int $.year;

[08:01] <masak> yes

[08:01] <polettix> so it does not seem to be a private variable

[08:02] <masak> was the ! for private variables?

[08:02] <polettix> Private attributes use an exclamation to indicate that no public accessor is generated.

[08:02] <polettix>         has $!brain;

[08:02] <masak> ok

[08:03] <polettix> compilation complete

[08:03] <masak> I tried replacing the '!'s with '.'s in my Date.pm but that didn't help much

[08:03] *** pro21ms4 joined
[08:04] <polettix> if you can help me a tiny bit I'll be operative in a snap

[08:04] <masak> sure

[08:04] <masak> if I can

[08:04] <polettix> how can I quickly run the tests for Date?

[08:04] <masak> ah

[08:04] <masak> I do this

[08:04] <polettix> ensuring that I use the recently compiled pugs, of course

[08:05] *** lambdabot left
[08:05] *** Schwern joined
[08:05] <masak> ./pugs -Iblib6/lib ext/DateTime/t/basic.t

[08:06] <polettix> ok, it run

[08:06] <masak> (actually I have made an alias pugs='./pugs -Iblib6/lib')

[08:06] <masak> cool

[08:07] <polettix> the test output does not show the difference between the expected and the got values, this is annoying

[08:07] *** Schwern left
[08:07] <masak> polettix: I noticed that too

[08:08] <masak> maybe I should start by fixing that :)

[08:08] <masak> should be Test.pm

[08:08] <polettix> yep. It seems that it thinks we're in 2000 instead of 2007

[08:08] <masak> polettix: it does?

[08:08] <polettix> I added a couple of say()s 

[08:08] <masak> I think I got undef as an actual value

[08:09] <masak> ah

[08:09] <masak> now for the $1000 question: why?

[08:09] <polettix> 2000/1/1 to be exact

[08:09] <polettix> which BUILD method/methods is/are triggered?

[08:10] <masak> polettix: that looks like zero fields

[08:10] <masak> polettix: not sure that any are. you could check that too

[08:10] <polettix> I'm trying to add some say()s to the lib too

[08:11] <masak> good.

[08:11] <masak> meanwhile, I'm in Test.pm

[08:11] *** pdcawley left
[08:13] <masak> seems report_failure is using &?CALLER::CALLER::ROUTINE.name to determine whether it should print the expected value

[08:14] <polettix> the Int|Num BUILD() is called, instead of the bare one

[08:14] <masak> polettix: not both? I thought the latter called the former

[08:14] <polettix> yep, I thought this as well

[08:15] <masak> hm.

[08:15] <masak> still, the instance variables should be initiated

[08:17] *** daxim_ is now known as daxim

[08:19] <masak> aha!

[08:19] <masak> &?CALLER::CALLER::ROUTINE.name isn't "&Test::is" anymore, but "&is"

[08:20] <masak> changing Test.pm to reflect this

[08:20] <masak> that worked :)

[08:23] *** bsb left
[08:24] <polettix> I'm stuck

[08:24] <polettix> Int|Num BUILD() with epoch ''

[08:25] <polettix> the Int|Num version of BUILD() is called

[08:25] <polettix> but $epoch is empty

[08:25] <masak> polettix: does it matter?

[08:25] <masak> polettix: or rather, would you expect it to be empty?

[08:26] <polettix> I expected that another method would be called

[08:26] <polettix> that is, the one with the empty parameter list

[08:26] <masak> yes

[08:27] <masak> but doesn't that one just delegate to the one with $epoch?

[08:28] <polettix> so there is a quick hack to make the whole thing work, but we should probably investigate why it does not call the expected method

[08:28] <masak> polettix: yes

[08:28] <masak> definitely

[08:28] <masak> I looked a bit at the tests for BUILD methods

[08:29] <masak> to see if there were corresponding failing tests for what we see

[08:29] <masak> didn't find much

[08:29] <masak> but maybe you will fare better if you look

[08:32] <masak> aha again: according to the tests (t/magicals/subname.t) the Test.pm as it stands is actually correct, and &?CALLER::CALLER::ROUTINE.name is wrongly implemented

[08:33] <masak> seems like names should always be fully qualified

[08:35] <polettix> wow, there's a real mess in calling those BUILD methods

[08:35] <polettix> the call inside now() actually triggers the year/month/day version

[08:35] <masak> um

[08:36] <masak> sounds uncalled for

[08:36] <masak> if you see an easy way of cleaning up the call chain while passing the tests, don't hesitate

[08:39] * masak is lost in Eval.hs now

[08:40] <polettix> I have to go to a presentation now, but I'll think about it and return in the afternoon

[08:40] <masak> polettix: excellent

[08:40] <polettix> thank you for giving me yet another time drain :D

[08:40] <masak> polettix: np

[08:40] <masak> thanks for the help so far

[08:40] <masak> it was fun

[08:40] <masak> :)

[08:40] <polettix> yep, and it was useful too: you corrected Test.pm at last!

[08:41] <masak> polettix: actually, no

[08:41] <masak> Test.pm is correct

[08:41] <masak> I'm looking at where pugs is going wrong now

[08:41] <masak> (I have a simple fix, but I don't want to apply it since it will break as soon as Pugs unbreaks -- better to fix Pugs)

[08:42] <masak> but Haskell... still confuses me

[08:42] <masak> calling all competent Haskell people -- could someone lend a teeny, tiny hand? :/

[08:43] <masak> actually, it's not as much unfamiliarity with Haskell that is the bottleneck in this case, as unfamiliarity with the structure of the Pugs source tree

[08:44] <spinclad> (i vitelli...) 'Go, Vitellius, because of (hearing) the sound of the roman god of war'  (one roman god)

[08:44] <masak> I need to find where &?CALLER::CALLER::ROUTINE.name is evaluated, and make it a qualified name (such as "&Test::is") instead of a local name (such as "&is")

[08:44] <spinclad> yes, an interesting sentence

[08:45] <masak> spinclad: is it "because of" because "sono" is ablative?

[08:45] <spinclad> that's how i read it

[08:45] <masak> makes sense

[08:46] <masak> spinclad: you don't happen to be intimately familiar with the Pugs source, do you?

[08:46] <spinclad> 'from the sound', as it were

[08:46] <polettix> spinclad: absolutely, one god! See, "dei" in italian is also "gods", it was easy to get tricked :)

[08:46] <masak> spinclad: something like that

[08:46] <spinclad> not intimately by a long shot

[08:46] <masak> spinclad: but maybe enough for the above little excursion?

[08:47] <masak> I need to find where .name is evaluated for ROUTINEs

[08:47] <masak> any idea where to start?

[08:47] <spinclad> i can look, without promises

[08:48] <masak> :)

[08:48] <polettix> ttfn, byez

[08:48] *** polettix left
[08:49] *** larsen joined
[08:50] <masak> anyone know how to invite lambdabot to a freenode channel?

[08:51] <masak> @tell masak something

[08:51] <spinclad> you can tell yourself!

[08:51] <spinclad> :)

[08:51] <masak> :D

[08:52] <masak> spinclad: substituting for lambdabot... now there's an unenviable task

[08:53] <spinclad> i'd probably forget the message, or be asleep, or such

[08:54] <masak> :)

[08:55] <masak> actually, the homepage of lambdabot is down, not sure if that's related

[08:56] * masak asks on #haskell

[08:57] *** Aankhen`` left
[08:58] *** mr_ank left
[08:59] *** ashleyb left
[09:00] <masak> turns out lambdabot is down due to power shutdowns until sunday

[09:01] <spinclad> you'll _have_ to tell yourself, then

[09:01] <masak> ok

[09:02] <masak> masak: something

[09:02] <masak> masak: what?

[09:02] <masak> masak: nvm

[09:02] <masak> masak: ok... :/

[09:02] <spinclad> masak: stop mumbling!

[09:02] <masak> :)

[09:02] <spinclad> ext/Test/lib/Test.pm?

[09:02] <masak> spinclad: well, sort of

[09:03] <masak> it relies on the results of ROUTINE.name being qualified

[09:03] <spinclad> sub report_failure ...

[09:03] <masak> as in "&Test:is"

[09:03] <masak> spinclad: yes

[09:03] *** jsmock left
[09:03] <masak> right now they are only local

[09:03] <masak> as in "&is"

[09:03] <masak> see also t/magicals/subnames.t

[09:04] <masak> which hints at the same thing

[09:05] <spinclad> right

[09:06] <masak> where to turn in src/ to rectify?

[09:10] <spinclad> 'ack -l ROUTINE src' gives six hits: AST/CapInternals.hs, Prim.hs, Monads.hs, Eval.hs, Val.hs, Parser.hs

[09:11] <masak> yes. already tried that

[09:11] *** Schwern joined
[09:11] <masak> even looked a bit inside Eval.hs, which seemed a likely candidate

[09:11] <masak> that only yielded a heightened respect for Haskell programmers

[09:12] * masak would like to start hacking Pugs, but the learning curve is steep

[09:12] *** flokuehn joined
[09:20] <masak> spinclad: ok, let's reason this out

[09:20] <masak> I don't know what AST/CapInternals.hs, but it sounds like it has something to do with Captures, which is probably not what I want

[09:21] <masak> Prim.hs actually also sounds like a likely candidate, assuming it actually handles primitive things and ROUTINE is such a thing

[09:21] <masak> by the same token, it could be in Val.hs

[09:22] <masak> Eval.hs felt like a likely candidate because it should handle evaluation of things

[09:22] <masak> Parser.hs feels like too early a stage

[09:22] <masak> I don't know where Monads.hs gets into it

[09:23] * masak checks Prim.hs and Val.hs

[09:30] *** zamolxes joined
[09:32] <spinclad> i'm looking at 'data Var = ... VarDynamic { v_name, v_packageName }', defined in AST/CapInternals, used in ... Eval and Parser that i see

[09:32] <spinclad> (Val's is a comment)

[09:32] *** jisom joined
[09:33] <spinclad> (Prim is for the prelude, maybe)

[09:33] <masak> spinclad: ok

[09:34] * spinclad suspicious of Pa4rser.hs:2100

[09:34] <masak> I've found at Var.hs:88 the place where CALLER is returned

[09:34] <masak> ok, heading there

[09:34] <spinclad> s/4//

[09:35] <masak> spinclad: yep, that's it

[09:35] <masak> now to figure out how to get the package in there

[09:35] <spinclad> v_packageName should already be in the Var

[09:36] <masak> why?

[09:38] <masak> I mean, "hm?"

[09:39] <spinclad> hm... this is converting a $.foo to a method &foo call... i don't think this is it

[09:39] <masak> dang

[09:39] <masak> so close

[09:39] <masak> is it reasonable to think that v_name would be involved in the code we are looking for, though?

[09:40] <spinclad> it's a guess...

[09:40] <masak> spinclad: it's in most .hs files, it seems :)

[09:40] <masak> I'll have a look in Val/Code.hs, that sounds like a likely name

[09:41] <spinclad> thinking that our problem is lack of reporting v_packageName when it should

[09:42] <masak> spinclad: exactly

[09:42] <masak> it returns v_name instead of v_packageName ++ "::" ++ v_name (not sure if that's correct Haskell syntax)

[09:43] <spinclad> i'd like to track down how '.name' is defined; if that's just pulling out v_name, we would never hear a package name

[09:43] <masak> spinclad: sounds like a plan

[09:43] <masak> that's why I homed in on Val/Code.hs, but right now that does not seem to be it

[09:45] <masak> there are also vars called v_package and v_longname which might be of interest

[09:50] *** jisom_ left
[09:54] *** dolmans left
[10:00] <spinclad> the var should constructed by the lexer - parser chain ...

[10:01] <masak> another Maybe Clue: &?ROUTINE returns a value of type Sub, and this word exists in only a few .hs files

[10:02] <masak> Sub, in turn seems closely related to VCode

[10:03] <masak> ...which is basically everywhere :/

[10:10] <masak> & # lunch

[10:10] *** jisom left
[10:10] <spinclad> &?ROUTINE is MScalarRoutine, AST/CapInternals/Instances.hs ... 

[10:11] *** SixF9 joined
[10:11] <spinclad> but that seems to be backend, emitting side stuff

[10:13] <spinclad> s:7th/ /-/

[10:24] *** chris2 joined
[10:37] *** pro21ms4 left
[10:47] * spinclad now thinks '.name' is Prim.hs:625: op1 "Code::name"

[10:48] <meppl> gugu

[10:48] *** pjcj left
[10:48] <spinclad> gugu tuyutu, meppl

[10:48] <meppl> hello spinclad

[10:48] <meppl> :-P

[10:49] <spinclad> good morning meppl

[10:51] <spinclad> '.name' is op1CodeName in Prim/Code.hs:23

[10:53] <spinclad> which packages up subName, which is everywhere...

[10:55] <spinclad> AST/Internals.hs:1039:    , subName           :: !ByteString

[11:01] <spinclad> a field in VCode

[11:01] <spinclad> set in many places

[11:03] *** kanru left
[11:04] *** larsen_ joined
[11:11] *** toshinori left
[11:13] <masak> meppl: gugu

[11:14] <masak> spinclad: sounds good. cheching Prim.hs:625

[11:15] *** pjcj joined
[11:17] *** nothingmuch left
[11:18] <masak> spinclad: wonder if anything else will break if I just redefine op1CodeName to return subPackage::subName instead of just subName

[11:19] <masak> it really depends on what calls op1CodeName

[11:19] <spinclad> Parser.hs:314 ruleSubDeclaration: ...

[11:20] <masak> what about it?

[11:20] <spinclad> 348: nameQualified ... | otherwise = name  

[11:20] *** larsen left
[11:20] <spinclad> 366: builds the VCode

[11:22] <spinclad> 351: | otherwise = name  looks like the place to change to   (something pkg) ++ "::" ++ name

[11:23] *** pjcj left
[11:23] <masak> I'll give it a shot

[11:24] *** pjcj joined
[11:24] *** toshinori joined
[11:27] <spinclad> or your change to op1CodeName might be the thing to do

[11:28] <masak> yes

[11:28] <masak> I seem to have broken things now

[11:29] *** flokuehn left
[11:31] * spinclad doesn't grok 'cast' yet

[11:32] * masak struggles against GHC's typechecker

[11:32] <masak> how do I create a ByteString from [Char]?

[11:34] <spinclad> sorry, haven't gone there yet.

[11:34] * masak is really close now

[11:35] * spinclad not qualified for brain surgery.  YMMV.  objects in mirror are closing fast.

[11:36] <masak> :)

[11:36] <masak> we're in this together

[11:36] <spinclad> but once it typechecks, that's already proof of some kind of correctness

[11:36] <masak> there's got to be a way!

[11:36] <masak> if audreyt++ can do it...

[11:38] <spinclad> indeed.  but i'm still looking at the code and its design through a narrow window

[11:39] *** asksh is now known as dwave

[11:40] <masak> spinclad: me too

[11:41] <spinclad> running design inference on the code; dual to code generation

[11:44] *** cognominal_ joined
[11:46] <spinclad> there should be a haskell module Data::ByteString already available

[11:46] <spinclad> or some such name

[11:47] <masak> spinclad: yes, sure. the question is how to "cast" from String

[11:48] <masak> all I get so far is that both are compatible with List

[11:48] *** rindolf joined
[11:48] <masak> but I haven't found any single function to convert

[11:49] <masak> the situation is further complicated by dons's site (with the API and all the explanations) being down for maintenance. relying on Google cache

[11:49] *** cmarcelo joined
[11:50] <spinclad> pack?  (from the name)

[11:51] <masak> spinclad: yes, just found it :)

[11:51] * masak tries

[11:53] *** falseep_ joined
[11:55] <masak> ah! cast does Whatever -> ByteString

[11:56] <spinclad> does Whatever -> ThisType, maybe

[11:57] <masak> I was adding my code before this conversion, instead of after

[11:57] <masak> now it seems to be working much better :)

[11:58] <spinclad> UTF8.hs has pack etc

[11:58] <masak> no need, I think

[11:58] <masak> the whole thing compiles

[11:59] * masak tests

[11:59] * spinclad sees (cast :: Type1 -> Type2) various places

[11:59] <masak> ...almost

[11:59] <masak> I now get Main::&foo instead of &Main::foo

[11:59] <masak> this is a great part victory, however

[12:00] <masak> I suppose deconstructing subName is no problem

[12:00] *** sunnavy left
[12:00] <masak> tail should do it

[12:00] * masak attempts this

[12:01] <masak> I realize I'm probably not writing the best solution here, and likely implementing the fix on the wrong level, etc etc

[12:01] <masak> but frankly, I don't care

[12:01] <masak> this is fun!

[12:02] <spinclad> (growing new lambdacamels)++

[12:03] <masak> I don't know about that

[12:03] <masak> I still have no innate sense of the difference between `a $ b` and `a (b)`

[12:04] <masak> I basically have to permute between them until I get it right

[12:04] <spinclad> no?  it's a start.  once you've made one patch you can never go back

[12:04] <wolverian> just write foo . bar $ baz and you're fine :)

[12:05] <rindolf> wolverian: what does the "." do in Haskell/

[12:05] <rindolf> ?

[12:05] <masak> wolverian: oh yeah, I forgot `a . b`, I don't grok that either

[12:05] <wolverian> rindolf, composes functions.

[12:05] <wolverian> @type (.)

[12:05] <wolverian> oh, lambdabot is sleeping

[12:05] <masak> yes

[12:05] <masak> for the weekend

[12:06] <spinclad> (a -> b) -> (b -> c) -> (a -> c)

[12:06] <wolverian> masak, it takes the lhs, which must be a function that is missing one parameter whose type is that which the rhs returns, and composes the rhs and lhs together. 

[12:06] <wolverian> that's the rough explanation. :)

[12:06] <wolverian> "a function" should be replaced with "a section", I think. 

[12:06] <masak> spinclad: still substituting for lambdabot, eh? :)

[12:07] <spinclad> yup

[12:07] <masak> wolverian: I'll have to think about that

[12:07] <wolverian> e.g. map (foo bar) . filter (baz quux) $ list 

[12:07] <masak> spinclad: I now pass tests #1 and #2 in subname.t

[12:07] <spinclad> good show

[12:07] <wolverian> (since the 'foo bar' is not composed, it means that bar is an argument to foo)

[12:07] <masak> tests #3 and #4 fail in new interesting ways that make me realise that my fix is naive

[12:07] <wolverian> masak++

[12:08] <masak> :)

[12:08] <masak> however,

[12:11] <spinclad> (bug in spincladbot: the two args to (.) should be switched, i think: (b -> c) -> (a -> b) -> (a -> c) )

[12:12] <wolverian> spinclad, yes.

[12:22] *** rindolf left
[12:23] * spinclad -> bed &   # sunrise

[12:24] <masak> spinclad++ # hacker rythm

[12:26] *** cognominal_ left
[12:29] *** iblechbot left
[12:29] *** drrho joined
[12:42] *** falseep_ left
[12:51] <pugs_svnbot> r17149 | masak++ | [Code.hs]

[12:51] <pugs_svnbot> r17149 | masak++ | * made subName qualified so that Test.pm reports expected values as intended

[12:51] <pugs_svnbot> r17149 | masak++ | before

[12:51] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17149

[12:52] *** BinGOs left
[12:52] *** sysdef left
[12:52] *** meppl left
[12:52] *** devogon left
[12:52] *** Caelum left
[12:52] *** thoughtpolice left
[12:52] *** Eidolos left
[12:52] *** F7 left
[12:52] *** Yappo left
[12:52] *** PerlJam left
[12:52] *** wolverian left
[12:52] *** Juerd left
[12:52] *** integral left
[12:52] *** theorbtwo left
[12:52] *** JarJarBinks left
[12:52] *** BooK left
[12:52] *** statico left
[12:52] *** clkao left
[12:52] *** audreyt_ left
[12:52] *** GeJ left
[12:52] *** rhr left
[12:52] *** sri_ left
[12:52] *** args left
[12:52] *** blblack left
[12:52] *** Gothmog_ left
[12:52] *** gaal left
[12:52] *** idiotmax left
[12:52] *** pugs_svnbot left
[12:52] *** Patterner left
[12:52] *** demq left
[12:52] *** takanori left
[12:52] *** SubStack left
[12:52] *** felipe left
[12:52] *** devogon joined
[12:52] *** BinGOs joined
[12:52] *** Caelum joined
[12:52] *** thoughtpolice joined
[12:52] *** demq joined
[12:52] *** Patterner joined
[12:52] *** pugs_svnbot joined
[12:52] *** idiotmax joined
[12:52] *** gaal joined
[12:52] *** Gothmog_ joined
[12:52] *** blblack joined
[12:52] *** args joined
[12:52] *** sri_ joined
[12:52] *** rhr joined
[12:52] *** sysdef joined
[12:52] *** GeJ joined
[12:52] *** audreyt_ joined
[12:52] *** clkao joined
[12:52] *** takanori joined
[12:52] *** meppl joined
[12:52] *** statico joined
[12:52] *** felipe joined
[12:52] *** BooK joined
[12:52] *** SubStack joined
[12:52] *** JarJarBinks joined
[12:52] *** theorbtwo joined
[12:52] *** integral joined
[12:52] *** Juerd joined
[12:52] *** wolverian joined
[12:52] *** PerlJam joined
[12:52] *** Yappo joined
[12:52] *** F7 joined
[12:52] *** Eidolos joined
[12:55] <masak> oops, confuzzled commit comment

[12:55] <masak> masak-- # thought I removed that last line

[13:23] *** TJCRI joined
[13:24] *** kanru joined
[13:27] <masak> @tell spinclad ...

[13:27] *** ruoso joined
[13:27] <masak> dang

[13:27] <masak> spinclad: changing the other place, in Parser.hs, seems to break a lot of things

[13:28] <masak> so I won't do that

[13:29] *** turrepurre joined
[13:40] *** xinming left
[13:42] *** chris2 left
[13:45] *** xinming joined
[13:48] *** agentzh joined
[13:49] <spinclad> masak: good -- since VCode has both subPackage and subName and as long as they stay cleanly split, then op1CodeName is clearly the righter place

[13:50] <masak> yay

[13:50] <masak> now Test.pm works again

[13:50] <masak> try running ext/DateTime/t/basic.t

[13:50] <masak> it now shows expected values again

[13:51] <masak> so, back to the original issue: why do some tests in ext/DateTime/t/basic.t fail?

[13:51] *** masak left
[13:52] <spinclad> sorry, been talking in my sleep again

[13:52] <spinclad> will look 'tomorrow'

[13:53] <agentzh> yay, auto-smoke works again :)

[13:53] <agentzh> http://perlcabal.org/smoke.html

[13:54] <agentzh> oh, lambdabot has gone off...

[13:54] * spinclad &  # really

[13:54] <agentzh> spinclad: sleep well

[13:56] *** polettix joined
[13:57] *** TJCRI left
[14:00] *** amnesiac joined
[14:02] <agentzh> @seen audreyt

[14:03] *** agentzh left
[14:10] *** TJCRI joined
[14:13] *** masak joined
[14:18] *** cmarcelo left
[14:23] *** daxim_ joined
[14:26] *** drrho left
[14:27] *** turrepurre left
[14:27] *** kanru left
[14:27] *** turrepurre joined
[14:28] *** daxim left
[14:28] *** daxim_ is now known as daxim

[14:29] *** masak left
[14:30] *** sk joined
[14:30] *** kanru joined
[14:39] *** buetow joined
[14:43] *** drrho joined
[14:49] <rhr> masak: I looked at the ext/DateTime/t/basic.t failures once.  The problem is in pugs' MMD impl, it picks the wrong BUILD when called with no args iirc.

[14:50] *** [particle] left
[14:50] *** [particle] joined
[14:53] <polettix> rhr: it seems to pick the wrong BUILD when called with args as well, at least inside one method

[14:55] *** xinming left
[14:56] *** xinming joined
[15:01] *** iblechbot joined
[15:08] *** ruoso left
[15:09] *** ruoso joined
[15:10] <pasteling> "polettix" at 81.174.12.28 pasted "some weirdness about new() and BUILD()" (82 lines, 1.5K) at http://sial.org/pbot/26477

[15:10] *** kcwu left
[15:11] <polettix> this is what I mean. Sorry for not putting it as a test, but I don't know how to redirect output to variable quickly.

[15:21] *** araujo left
[15:27] <rhr> yeah, that's pretty strange.  MMD with named args is just broken, I think.  Has the MMD spec been completed yet?

[15:37] *** Eidolos_ joined
[15:39] *** kcwu joined
[15:48] *** Eidolos left
[15:48] *** Eidolos_ is now known as Eidolos

[15:58] *** hkb_lab is now known as hakobe

[16:07] <diakopter> rhr: it's my understanding that Larry is pretty happy with the MMD spec, until further implementation uncovers more cases.

[16:17] *** jhorwitz joined
[16:20] *** jhorwitz left
[16:20] *** jhorwitz joined
[16:21] *** justatheory joined
[16:22] *** polettix left
[16:22] *** justatheory left
[16:24] *** bloonix left
[16:30] *** cmarcelo joined
[16:32] *** iblechbot_ joined
[16:38] *** polettix joined
[16:41] *** mr_ank joined
[16:44] *** IceS joined
[16:44] *** iblechbot left
[16:46] *** nothingmuch joined
[16:54] *** IceSham[a]n joined
[16:59] *** IceShaman left
[16:59] *** IceSham[a]n is now known as IceShaman

[17:02] *** Psyche^ joined
[17:02] *** justatheory joined
[17:04] *** IceS left
[17:07] *** audreyt left
[17:14] *** kaether joined
[17:18] *** Patterner left
[17:18] *** Psyche^ is now known as Patterner

[17:26] *** chris2 joined
[17:26] *** polettix left
[17:30] *** dduncan joined
[17:36] *** iblechbot_ left
[17:39] *** rindolf joined
[17:48] *** solar345 joined
[17:49] <solar345> hi all ! 

[17:50] <diakopter> solar345: hi

[17:54] <rindolf> Hi solar345, diakopter 

[17:54] <rindolf> Hi all.

[17:57] <solar345> hi diakopter

[17:57] <solar345> hi rindolf

[18:01] *** buubot left
[18:01] *** buubot joined
[18:04] *** szbalint left
[18:09] *** franck____ joined
[18:18] *** weinig joined
[18:18] *** franck___ left
[18:24] *** iblechbot joined
[18:28] *** franck____ left
[18:29] *** Jmax left
[18:32] *** franck___ joined
[18:33] *** franck___ left
[18:33] *** franck___ joined
[18:37] *** jisom joined
[18:38] *** solar345 left
[18:50] *** the_dormant joined
[18:50] *** Jmax joined
[19:04] *** the_dormant left
[19:24] *** jisom left
[19:24] *** aindilis left
[19:27] <rindolf> What does [+] [6,7,8] supposed to do in p6?

[19:27] <PerlJam> rindolf: 21

[19:27] <PerlJam> (6 + 7 + 8)

[19:27] <rindolf> PerlJam: 

[19:28] <rindolf> pugs> [+] [6,7,8]

[19:28] <rindolf> (6, 7, 8)

[19:28] <rindolf> pugs> [+] (6,7,8)

[19:28] <rindolf> 21

[19:28] <rindolf> pugs on feather

[19:28] <PerlJam> oh.  I didn't even notice the brackets  Hmm.

[19:29] <rindolf> Where is the pugs bug tracker?

[19:31] <rindolf> pugs> [5,6,[10,20]]

[19:31] <rindolf> (5, 6, (10, 20))

[19:31] <rindolf> What sort of notation is this?

[19:31] <rindolf> With the parentheses?

[19:31] <rindolf> Instead of the sq brackets?

[19:34] <TimToady> should return 3

[19:35] <TimToady> or maybe it should just return the single arg

[19:35] *** miyagawa left
[19:35] <TimToady> looks like that's kinda what pugs does

[19:36] *** miyagawa joined
[19:36] <PerlJam> TimToady: and what would  [+] [1,2,3], [4,5,6]  give us ?

[19:36] <TimToady> same as [1,2,3] + [4,5,6]

[19:36] <TimToady> that is, 6

[19:37] <rindolf> perlbot: pugs bugs

[19:37] <PerlJam> TimToady: then I think [+] [6,7,8] should return 3

[19:37] <TimToady> depending on whether the numeric context is implied for a single arg

[19:39] *** franck____ joined
[19:40] <TimToady> for an operator x that has an identity value returned by [x]() we could define [x]($value) to be [x]() x $value perhaps

[19:40] *** franck___ left
[19:41] *** Eidolos left
[19:42] <rindolf> Hi TimToady 

[19:42] <TimToady> howdy

[19:43] <rindolf> I want to try and fix a pugs bug.

[19:43] <rindolf> Where should I go to look for one?

[19:43] <rindolf> I mean a list.

[19:43] <rindolf> TimToady: what's up?

[19:44] <TimToady> http://m19s28.vlinux.de/iblech/stuff/pugs-smokes/pugs-smoke-6.2.13-r17147-linux-normal--1185491801-9496--18817-17553-1264-1965-742-46--2a438ce684ce329a6200f7e4e6620cfe.html

[19:46] <TimToady> just wrapping up OSCON here

[19:46] *** drrho left
[19:51] *** justatheory left
[19:53] <rindolf> TimToady: nice.

[20:07] *** Schwern left
[20:09] <PerlJam> TimToady: Did you give a SotO?

[20:11] *** ashleyb joined
[20:11] *** Eidolos joined
[20:16] <TimToady> something like that

[20:18] <PerlJam> I hope it went well.

[20:19] <dduncan> as do I

[20:24] *** weinig left
[20:24] *** weinig joined
[20:25] *** chris2 left
[20:27] *** franck____ left
[20:31] *** rlpeacock joined
[20:32] *** ashleyb left
[20:34] <TimToady> OSCON over, massive decommute &

[20:36] *** jhorwitz left
[20:36] *** cmarcelo left
[20:42] *** dduncan left
[20:43] *** rlpeacock left
[20:51] *** TJCRI left
[20:53] *** Blwood joined
[20:57] *** weinig_ joined
[21:05] *** ashleyb joined
[21:08] *** weinig left
[21:18] <meppl> good night

[21:20] *** ruoso left
[21:25] *** weinig joined
[21:34] *** cognominal_ joined
[21:36] *** iblechbot left
[21:39] *** cj left
[21:39] *** cj joined
[21:45] *** weinig_ left
[21:46] *** nperez joined
[21:50] *** weinig_ joined
[21:51] *** weinig left
[21:52] *** weinig joined
[21:55] *** dmq joined
[22:04] *** cj left
[22:04] *** demq left
[22:08] *** weinig_ left
[22:12] *** cj joined
[22:24] *** rindolf left
[22:33] *** Blwood left
[22:37] *** amnesiac left
[22:54] *** szbalint joined
[23:07] *** devogon left
[23:10] *** weinig is now known as jibot

[23:10] *** jibot is now known as weinig

[23:16] *** weinig_ joined
[23:16] *** elmex left
[23:16] *** weinig left
[23:17] *** weinig joined
[23:17] *** thoughtpolice left
[23:30] *** devogon joined
[23:32] *** weinig_ left
[23:51] *** devogon left
[23:51] *** devogon joined
[23:56] *** justatheory joined
