[00:00] *** rlb3 joined
[00:03] *** weinig_ joined
[00:03] *** rlb3 left
[00:04] *** weinig left
[00:11] <Limbic_Region> diakopter - no, right after your comment about using the compiled version - I got disconnected and my only attempt at reconnecting bombed

[00:13] <diakopter> Limbic_Region: <sigh>

[00:15] *** fglock joined
[00:15] <pugs_svnbot> r17078 | fglock++ | [kp6] Prelude - implemented Match.str()

[00:15] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17078

[00:15] <lambdabot> Title: Changeset 17078 - Pugs - Trac

[00:25] *** Limbic_Region left
[00:39] <avar> fglock: is an unless () {} implementation outside the scope of kp6?

[00:39] <avar> fglock: I.e. are you strictly keeping it to the subset that's needed to desugar real p6?

[00:39] *** sunnavy joined
[00:46] *** Blwood left
[00:51] *** devogon left
[00:52] *** pro21ms4 left
[00:53] *** nipotaway is now known as nipotan

[00:57] <pugs_svnbot> r17079 | avar++ |  r52303@t:  avar | 2007-07-17 00:54:30 +0000

[00:57] <pugs_svnbot> r17079 | avar++ |  Use $^X instead of perl

[00:57] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17079

[00:57] <lambdabot> Title: Changeset 17079 - Pugs - Trac

[00:59] <diakopter> weird: Use $<sup>X instead of perl <br />

[00:59] <diakopter> </sup>

[01:00] <diakopter> (says Trac)

[01:14] <fglock> avar: it's outside the scope of mp6; for kp6 it's ok

[01:19] *** explorer left
[01:19] <fglock> kp6 "phase 5 - improved grammar"

[01:21] * avar wonders why the unless patch isn't working: http://sial.org/pbot/26348

[01:22] <lambdabot> Title: Paste #26348 from Someone at 208.78.101.240

[01:22] <avar> ast dump: http://sial.org/pbot/26349

[01:22] <lambdabot> Title: Paste #26349 from Someone at 208.78.101.240

[01:25] <fglock> avar: looking

[01:27] <fglock> hmm - you could reuse ::If, with reversed actions 

[01:27] *** miyagawa left
[01:30] <avar> It could be more succinct yes. But I'm wondering why my ast/code gen doesn't show something like "If"

[01:30] *** miyagawa joined
[01:31] *** pbuetow left
[01:33] <fglock> avar: did you compile Control.pm ?

[01:34] <fglock> the lib5 version is not in the patch

[01:35] <fglock> Control.pm seems to be missing in the Makefile

[01:37] * avar tries

[01:39] <pugs_svnbot> r17080 | fglock++ | [kp6] added Control.pm, Mapping.pm to Makefile

[01:39] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17080

[01:39] <lambdabot> Title: Changeset 17080 - Pugs - Trac

[01:40] <avar> not Regex.pm?

[01:40] <fglock> it was there already

[01:46] <fglock> avar: did it work?

[01:49] <avar> $ echo 'class Main { my $x = "0"; if ($x eq $x) { say "hello world" } else { say "moo" }; }' | perl5.9.5 kp6-perl5.pl | perl5.9.5 -Ilib5

[01:49] <avar> in Class: Bit

[01:49] <avar> no method: p5landish

[01:49] <avar> mm, shouldn't that work..

[01:50] <fglock> p5landish was creates by pmurias, I think - looking

[01:50] <avar> $ cat t/01-sanity/04-if.t | perl5.9.5 kp6-perl5.pl |perl5.9.5 -Ilib5

[01:50] <avar> 1..2

[01:50] <avar> in Class: Bit

[01:50] <avar> no method: p5landish

[01:53] <fglock> it looks like only Int and Str have p5landish - I'll add to Bit

[01:55] <fglock> done

[01:56] <fglock> though it probably belongs to ::Value instead

[01:56] <pugs_svnbot> r17081 | fglock++ | [kp6] added 'p5landish' method to Bit

[01:56] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17081

[01:56] <lambdabot> Title: Changeset 17081 - Pugs - Trac

[01:56] <fglock> s/creates/created/

[01:56] *** thestarslookdown left
[01:59] <fglock> avar: fixed

[01:59] <pugs_svnbot> r17082 | fglock++ | [kp6] MOP - 'p5landish' is inherited from ::Value

[01:59] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17082

[01:59] <lambdabot> Title: Changeset 17082 - Pugs - Trac

[02:02] <avar> which parts should I be reusing?

[02:03] <avar> the emitter class?

[02:04] <fglock> in Control.pm you could generate an ::If with reversed body/otherwise - everything else would be reused

[02:05] <fglock> like:  ::If( cond => $$<exp>, body => $$<block2>, otherwise => $$<block1>, )

[02:06] *** nixfu joined
[02:07] <avar> ah

[02:11] <pugs_svnbot> r17083 | fglock++ | [kp6] EmitPerl5 - If.block can be undef

[02:11] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17083

[02:11] <lambdabot> Title: Changeset 17083 - Pugs - Trac

[02:23] <pugs_svnbot> r17084 | avar++ |  r61186@t:  avar | 2007-07-17 01:58:12 +0000

[02:23] <pugs_svnbot> r17084 | avar++ |  Added Grammar/*.pm files

[02:23] <pugs_svnbot> r17085 | avar++ |  r61190@t:  avar | 2007-07-17 02:22:25 +0000

[02:23] <pugs_svnbot> r17085 | avar++ |  implemented unless

[02:23] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17085

[02:23] <lambdabot> Title: Changeset 17085 - Pugs - Trac

[02:25] <fglock> avar++

[02:25] <avar> maybe the if/unless tokens can be merged into ifunless?

[02:26] *** nperez left
[02:26] <avar> $<action> := [ if | unless ] and then if ($<action> eq "if") { return { ... } }

[02:26] <avar> would that work?

[02:28] <fglock> yes - please note that this code will be replaced by a multi-regex (as in Perl6-STD), later

[02:28] *** revdiablo joined
[02:29] <avar> how is parsing p6-std going?

[02:36] <fglock> the implementation of Signature/Capture will be used to implement multi-dispatch, which is then needed by multi-regexes

[02:36] <fglock> the regex engine will likely be p6rx-in-p5rx

[02:44] *** weinig_ is now known as weinig

[02:45] *** Schwern left
[02:45] <fglock> if all goes well, kp6-v5 would be running something very close to P5-STD

[02:45] <fglock> P6-STD

[02:49] *** vel joined
[02:57] <fglock> sleep &

[03:02] *** justatheory joined
[03:05] *** bonesss left
[03:15] *** aindilis left
[03:18] *** fglock left
[03:24] *** amnesiac joined
[03:25] *** bonesss joined
[03:36] *** vel left
[03:48] *** dduncan joined
[04:13] *** monomorph joined
[04:14] *** daxim joined
[04:43] *** stevan_ joined
[04:46] *** dduncan left
[05:08] *** bonesss left
[05:19] *** devogon joined
[05:23] *** pro21ms4 joined
[05:25] *** jisom joined
[05:35] *** idiotmax left
[05:36] *** idiotmax joined
[05:37] *** thoughtp1lice joined
[05:37] *** thoughtpolice left
[05:42] *** crashmatrix joined
[05:43] *** kanru joined
[05:44] *** masak joined
[05:52] *** justatheory left
[05:55] *** rfordinal joined
[06:08] *** chaoslawful joined
[06:09] *** moritz_ is now known as moritz

[06:16] *** jisom_ joined
[06:21] *** Schwern joined
[06:25] *** masak left
[06:28] *** thoughtp1lice left
[06:28] *** thoughtpolice joined
[06:33] *** jisom left
[06:36] *** rfordinal_ joined
[06:45] *** funktio joined
[06:48] <meppl> good morning

[06:48] <moritz> good morning meppl ;)

[06:50] <beppu> .

[06:51] <meppl> good morning moritz and beppu

[06:52] <beppu> well, it's almost midnight in Los Angeles.

[06:57] *** iblechbot joined
[06:57] <moritz> it's almost 9am in middle europe ;)

[07:01] *** chaoslawful left
[07:01] <pugs_svnbot> r17086 | moritz++ | [irclog] more tests

[07:01] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17086

[07:01] <lambdabot> Title: Changeset 17086 - Pugs - Trac

[07:03] *** masak joined
[07:07] *** rindolf joined
[07:08] *** weinig left
[07:11] <moritz> should r0123 linkify to the svn changeset?

[07:11] <moritz> eg with leading 0s

[07:12] <beppu> who's generating them w/ leading 0s ?

[07:12] <moritz> I don't know, all automatically generated ones are without leading 0s

[07:12] *** jhorwitz left
[07:13] <moritz> which leads me to the conclusion that linkifiying r0\d+ might be a false positive

[07:13] *** thoughtpolice left
[07:13] <beppu> http://c2.com/cgi/wiki?YagNi

[07:13] <lambdabot> Title: Yag Ni

[07:13] <masak> moritz: but there is no such occurrence in the wild?

[07:13] <masak> beppu: that's what I thought too

[07:14] *** thoughtpolice joined
[07:16] <moritz> masak: I don't know, never saw one

[07:16] <masak> moritz: then you probably aren't gonna need it

[07:17] <masak> it actually seems harder for an automatic tool to generate a zero-padded revision number than one that is not zero-padded

[07:17] <moritz> masak, beppu: Aye, I'll change my regex ;)

[07:18] <masak> ;)

[07:18] <beppu> if it's easy to handle 0-padding, then do it...  otherwise, don't bother.  

[07:20] <moritz> it both equally easy to handle, I'm just worried about false positives 

[07:20] <moritz> probably there's no reason to bother...

[07:20] <moritz> but I'm writing test cases atm and I'm thinking about edge cases

[07:21] * masak can't recall anyone ever writing anything starting with r0 in #perl6

[07:24] <moritz> masak: you changed that now ;)

[07:25] <pugs_svnbot> r17087 | moritz++ | [irclog] r0\d+ isn't turned into links any more

[07:25] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17087

[07:25] <lambdabot> Title: Changeset 17087 - Pugs - Trac

[07:25] <masak> moritz: dang :)

[07:27] <moritz> ;)

[07:41] *** JarJarBinks left
[07:41] *** JarJarBinks joined
[07:41] *** _meppl joined
[07:43] *** franck___ joined
[07:50] *** rindolf left
[07:51] *** BooK left
[07:52] *** jisom_ left
[07:55] *** rfordinal left
[07:56] *** jisom joined
[08:05] *** franck____ joined
[08:05] *** amnesiac left
[08:21] *** franck___ left
[08:27] <Aankhen``> masak: For future reference, my nick has two backticks. ;-) I usually read the logs, so I got the message you sent anyway, but as you can see I'm rather late.

[08:30] *** ask__ left
[08:30] <masak> Aankhen``: oh. yes, I remember having to enter it manually since you were out-of-bounds from the Tab Completer, and checking your nick to make sure I spelled it right. guess I wasn't careful enough with the backticks, though

[08:30] <Aankhen``> Yeah, I'd left the building.

[08:31] <masak> yes

[08:31] <moritz> ;)

[08:31] <masak> what was it I @told you again? was it important? :)

[08:31] <moritz> well, `` expands to the empty string on the shell ;)

[08:31] <Aankhen``> And I didn't check the logs for a while because I was completing my reading of the Dark Tower series.

[08:31] <Aankhen``> masak: Trick question! :-P It was the abbr.dat thing.

[08:32] <masak> right

[08:33] <masak> @tell masak Can I leave messages to myself?

[08:33] <lambdabot> You can tell yourself!

[08:33] <masak> :)

[08:34] <masak> @tell lambdabot Can I leave messages to lambdabot?

[08:34] <lambdabot> Nice try ;)

[08:34] <moritz> Aankhen``: btw you introduced a subtle bug with the abbr.dat thing - when the file is not found (or empty), $re_abbr remains the empty string, which always matches, and makes output_process loop

[08:34] <masak> lambdabot: you have a good sense of humor

[08:34] <Aankhen``> moritz: Yup.  I'm pretty sure I mentioned that when I added the abbrevations thing.

[08:34] <moritz> Aankhen``: I (nearly) fixed that by defaulting to (?!), which never matches - fglock++

[08:35] <Aankhen``> moritz: Oh, nice one.

[08:35] <Aankhen``> So that's why you were asking about a never matching regex.

[08:35] <moritz> Aankhen``: I dont' remember

[08:35] <moritz> anyway, I think it is a rather cool solution, that's why I'm telling you the whole story ;)

[08:36] <Aankhen``> fglock++ # indeed

[08:36] <Aankhen``> moritz++ # indeed as well ^_^

[08:37] <moritz> I just realized I fixed it only for the case where abbr.dat is not found, not for empty abbr.dat

[08:38] <Aankhen``> Whoops.

[08:38] <pugs_svnbot> r17088 | moritz++ | [irclog] fixed handling of empty abbr.dat / links.dat

[08:38] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17088

[08:39] <lambdabot> Title: Changeset 17088 - Pugs - Trac

[08:41] *** elmex joined
[08:49] <thoughtpolice> how goes it

[08:50] <moritz> wie geht es? *g*

[08:51] *** devogon left
[08:51] *** devogon joined
[08:51] <moritz> I'm doing some irc log hacking (mainly QA atm), and closely watching kp6

[08:52] <moritz> and perhaps I'll write a small kp6 homepage

[08:52] <thoughtpolice> fun stuff.

[08:52] <moritz> this week I still have time for hacking, then I'll work the next 6 weeks to get some money

[08:59] *** |Jedai| joined
[08:59] *** moritz left
[08:59] *** moritz joined
[09:00] *** moritz left
[09:00] *** Blwood joined
[09:04] *** moritz_ joined
[09:06] *** chris2 joined
[09:12] *** Alias_ joined
[09:16] *** jedai left
[09:22] *** _meppl is now known as meppl

[09:23] *** Alias_ left
[09:23] *** funktio left
[09:23] *** funktio joined
[09:33] *** ruoso joined
[09:39] *** jisom left
[09:43] *** Aankhen`` left
[09:46] <moritz_> what is + for a twigil?

[09:46] <moritz_> multi method sym (Str $pat = $+sym) {

[09:49] <thoughtpolice> iirc it was the previous way of marking named parameters

[09:49] <thoughtpolice> i think, at least

[09:49] <moritz_> hm, that's from STD.pm

[09:49] <thoughtpolice> oh. :x

[09:50] <masak> thoughtpolice: I think that would have been +$sym

[09:51] <thoughtpolice> masak: it might have been.

[09:51] <masak> $+sym is different, something having to do with env variables or something

[09:51] *** |Jedai| is now known as jedai

[09:51] <masak> I don't remember exactly, check the synopses :)

[09:51] <thoughtpolice> i've only ran across much older code that such a style

[09:51] <thoughtpolice> so yeah, i figured i was wrong in that instance

[09:51] <masak> & # lunch

[09:52] *** qmole joined
[09:55] <TimToady> moritz_: yes, it's a context variable, which is visible throughout a dynamic scope

[09:55] <moritz_> TimToady: thanks

[10:01] <moritz_> '<->' is the same as '-> is rw', right?

[10:01] <TimToady> yes, if you distribute rw across all args

[10:02] <moritz_> I'm starting to annote STD.pm with perlhints POD blocks, so you can expect more weird questions ;)

[10:03] <TimToady> ok, I'll be distracted off and on today because I'm giving a talk, but I'll backlog

[10:03] <moritz_> sure, thanks

[10:03] *** buetow joined
[10:05] <Juerd> moritz_: I like to think of it the other way around: -> is like <->, but readonly :)

[10:06] <moritz_> Juerd: ;)

[10:06] <Juerd> Because <-> is the default thing if you use no arrow

[10:06] <moritz_> ?eval -> { 2 }

[10:06] <Juerd> for @foo { $_ is rw here!! }

[10:06] <evalbot_r17041> ->{Syn "block" {2}}

[10:06] <Juerd> ?eval <-> { 5 }

[10:06] <evalbot_r17041> Error: ␤Unexpected "{"␤expecting operator

[10:06] <Juerd> I think current pugs predates <-> approval :)

[10:09] *** masak left
[10:11] <moritz_> ?eval my &func = -> { 42 }; &func()

[10:11] <evalbot_r17041> Error: Can't modify constant item: VStr "MkCode {isMulti = True, subName = \"&\", subType = SubPrim, subEnv = Nothing, subAssoc = ANil, subParams = [], subBindings = [], subSlurpLimit = [], subReturns = (mkType \"Any\"), subLValue = False, subBody = Prim ([Pugs.AST.Internals.Val] -> Pugs.AST.Eval.Eval Pugs.AST.Internals.Val), subCont = Nothing, subTraitBlocks = MkTraitBlocks {subPreBlocks = [], subPostBlocks = [], subFirstBlocks = [], subLastBlock

[10:11] <moritz_> ?eval my $func = -> { 42 }; $func()

[10:11] <evalbot_r17041> 42

[10:11] <moritz_> is &func right but NYI?

[10:11] <TimToady> my &func := -> { 42 }; &func()

[10:12] <TimToady> ?eval my &func := -> { 42 }; &func()

[10:12] <evalbot_r17041> 42

[10:12] <TimToady> func is not rw, so can't assign to it

[10:16] <Juerd> &func.push:&postprocess ;)

[10:21] <TimToady> that would require a space after the :

[10:22] <TimToady> because listops always require the space

[10:23] *** flokuehn joined
[10:24] <Juerd> Makes sense

[10:24] <Juerd> Is .foo:{ } an exception then?

[10:25] <Juerd> I'm sure I've seen that somewhere

[10:25] <TimToady> it is parsed as .foo :{ }

[10:25] <TimToady> not as .foo: { }

[10:26] <TimToady> so it's an adverbial block, not the first positional arg

[10:28] <Juerd> Sneaky :)

[10:32] <moritz_> I want to start a new perlhints discussion - should I do that on perl6-users oder p6c?

[10:32] <pugs_svnbot> r17089 | moritz++ | [STD] added the first perlhints POD blocks

[10:32] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17089

[10:32] <lambdabot> Title: Changeset 17089 - Pugs - Trac

[10:33] <TimToady> p6c, ich glaube...

[10:33] <TimToady> but you might get more response on p6u

[10:46] *** sunnavy left
[10:53] *** chris2 left
[10:54] <Gothmog_> moritz_: :423s/liste/list/ :)

[10:55] <moritz_> Gothmog_++ 

[10:55] <moritz_> thanks

[10:56] <moritz_> YaY, a contributer ;)

[10:56] <Gothmog_> ;)

[11:08] <pugs_svnbot> r17090 | moritz++ | [STD.pm] perlhints typo fix spotted by Gothmog_++

[11:08] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17090

[11:08] <lambdabot> Title: Changeset 17090 - Pugs - Trac

[11:09] *** Alias_ joined
[11:27] *** pro21ms4 left
[11:31] *** masak joined
[11:37] *** iblechbot left
[11:37] *** chris2 joined
[12:05] *** comet joined
[12:11] *** cognominal_ left
[12:18] *** DarkWolf84 joined
[12:19] *** DarkWolf84 left
[12:20] *** cognominal_ joined
[12:20] *** DarkWolf84 joined
[12:22] *** comet is now known as szbalint

[12:48] *** nipotan is now known as nipotaway

[13:01] *** masak left
[13:01] *** masak` joined
[13:03] *** masak` is now known as masak

[13:13] *** Alias_ left
[13:15] *** aindilis joined
[13:17] *** Alias_ joined
[13:20] *** aindilis left
[13:23] *** szbalint left
[13:24] *** aindilis joined
[13:28] *** iblechbot joined
[13:35] *** TJCRI joined
[13:42] *** szbalint joined
[13:42] <devbot6> planet6: Stevan Little: Class::MOP/Moose now works in 5.9.5 <http://use.perl.org/~Stevan/journal/33829?from=rss>

[13:45] <moritz_> Moose!

[13:45] <TimToady> gonna start my talk in about 15 minutes

[13:45] <[particle]> where it's at?

[13:45] <moritz_> TimToady: good luck

[13:45] <masak> TimToady: good luck. what's it about?

[13:45] <TimToady> Iceland

[13:45] <stevan_> masak: I suspect perl, but I may be wrong

[13:45] <moritz_> is there a video streaming URL?

[13:45] <TimToady> thought I'd talk about Perl for a change

[13:46] *** franck___ joined
[13:46] <stevan_> Python!!

[13:46] <masak> :)

[13:46] <TimToady> by the way, you guys are onscreen

[13:46] <masak> "Perl for a change" -- nice subject

[13:46] <[particle]> ah, the land of fire and ice and perl

[13:46] <TimToady> say hi to WG2.8

[13:46] <moritz_> on my screen anyway ;)

[13:46] <masak> hello, WG2.8

[13:46] <moritz_> ?eval say 'hi to WG2.8'

[13:46] <evalbot_r17041> OUTPUT[hi to WG2.8␤] Bool::True

[13:46] <[particle]> hello from seattle

[13:47] *** drupek12 joined
[13:48] <[particle]> <shameless_plug> i'll be releasing parrot 0.4.14 today </shameless_plug>

[13:48] <masak> [particle]: not entirely off topic, if you ask me

[13:49] <masak> I've heard parrot and perl6 are connected somehow

[13:49] <moritz_> [particle]: cool - any idea when 0.5 will be out?

[13:49] <szbalint> hello WG2.8 :)

[13:49] <avar> TimToady: Where in .is are you? I'm there and didn't know about this;/

[13:49] <masak> moritz_: is there something special about 0.5 that makes you wait for it?

[13:49] <[particle]> moritz_: when the oo implementation is considered done, which is when all the tests pass (we're above 85% now)

[13:49] <masak> avar: you can make it!

[13:49] <TimToady> I'm right on the mid-Atlantic ridge

[13:49] <moritz_> masak: the notion that it might be half-way finished then ;)

[13:50] <TimToady> lots of hydrogen sulfide around here

[13:50] <masak> moritz_: :)

[13:50] <avar> What event?

[13:50] <TimToady> WG 2.8

[13:50] <avar> oh so you said, it just sounded like some wifi device :)

[13:51] <moritz_> ;)

[13:51] <[particle]> moritz_: we have monthly releases, but our minor version numbers are tied to features.

[13:52] <avar> Let me know if you feel like getting coffee in Reykjavík with a random perl hacker:)

[13:52] <TimToady> we're about 40k east of Reykjavic

[13:52] <TimToady> at a geothermal plant

[13:52] <avar> Near a large lake?

[13:52] <TimToady> just north of us

[13:53] * [particle] wonders if avar can be there in nine minutes....

[13:53] <avar> Ah, that's Nesjavellir, I cycle there frequently:)

[13:53] <TimToady> lots of interesting geology here

[13:53] <TimToady> yes, that's the place

[13:53] <avar> http://www.nat.is/travelguideeng/nesjavellir_geothermal_heating_project_reception.htm

[13:54] <TimToady> alas, it's invite-only

[13:54] <TimToady> and the room's already packed

[13:55] <TimToady> 'sides, you already know this

[13:55] <avar> And I was just getting my point-to-point transporter heated up, alas

[13:55] <avar> :)

[13:55] <szbalint> please stop reading my mind avar

[13:55] <szbalint> :)

[13:56] * diakopter barely avoids lolspeak about languages and paradigms

[13:56] <TimToady> you guys wanna give the talk instead of me?

[13:56] <[particle]> an interesting propositoin :)

[13:56] <moritz_> TimToady: that would render your long preparations useless

[13:56] <moritz_> TimToady: so please go ahead ;)

[13:56] <TimToady> darn

[13:57] <[particle]> we'll happily provide running commentary :)

[13:57] <[particle]> doesn't matter that we can't see or hear it

[13:57] *** TJCRI left
[13:57] <TimToady> unfortunately I'll have to take you offscreen in 3 minutes

[13:57] <diakopter> just post a one word topic or two every few minutes?

[13:58] <diakopter> heh

[13:58] <[particle]> WIRES.

[13:58] <masak> BITS

[13:58] <szbalint> PERL

[13:58] * szbalint ducks

[13:58] <masak> :)

[13:58] <moritz_> PYTHON

[13:58] * moritz_ ducks even further

[13:58] <diakopter> Perl for Proles

[13:59] <[particle]> What's New in Vaporware Design :)

[13:59] * Alias_ ponders Vapour Wear

[13:59] <thoughtpolice> INTERCAL

[14:00] <thoughtpolice> I win.

[14:00] <moritz_> I lost, damned!

[14:00] *** TJCRI joined
[14:01] <TimToady> these folks are gonna be so impressed with all the lambdacamels

[14:01] <TimToady> okay, signing off now

[14:01] <[particle]> goodbye from seattle

[14:01] <masak> good luck again

[14:02] *** mncharity joined
[14:02] <diakopter> avar: perl.is/unreachable?

[14:02] <thoughtpolice> later

[14:02] <thoughtpolice> have fun

[14:02] <avar> diakopter: hrm?

[14:03] <diakopter>  perl.is

[14:04] <avar> Yeah, it sort of is:)

[14:04] <avar> diakopter: want to use it for domain hacking?:)

[14:05] <diakopter> sure... why not

[14:05] <avar> I'll probably let the registration expire next year

[14:05] <diakopter> perl.is/gooder-than-you

[14:05] * masak hasn't seen that many .is puns, now that you mention it

[14:05] * avar isn't using it for anything

[14:05] <avar> masak: that's because they're so expensive. And you have to be in .is to register one

[14:06] <masak> avar: oh

[14:06] <moritz_> i.dont.know.what.perl.is

[14:06] <masak> moritz_: good for a FAQ or tutorial :)

[14:06] <avar> bitches.dont.know.what.perl.is

[14:06] <masak> avar: good for female dogs

[14:06] <[particle]> my.perl.is.better.than.your.perl.is

[14:06] *** franck____ left
[14:07] <thoughtpolice> my.perl.is/great

[14:07] <[particle]> perl.is/ # perl is whack

[14:08] <thoughtpolice> actually that's a little too egotistical, how about oh.my.perl.is/great

[14:08] <avar> you can see why I don't use it for anything

[14:08] <masak> forth.language.stackbased.a.is

[14:08] <avar> use.perl6.perl.is/obsolete

[14:09] <szbalint> I tried to aquire perl.hu but the owner although looks willing to sell, they didn't reply to my inquiry :\

[14:10] <[particle]> is there a .fu ?

[14:10] <thoughtpolice> perl.is.not.fu/gly

[14:10] <avar> [particle]: no

[14:10] <[particle]> rats. perl.fu looks great

[14:11] <thoughtpolice> increase.your.perl.fu

[14:11] * moritz_ wants perl.xxx

[14:11] <masak> [particle]: use greasemonkey to make your own addresses :)

[14:11] <[particle]> object-on-object action!

[14:11] <masak> cheaper, too

[14:12] <thoughtpolice> iirc .xxx domains are one of the most expensive you can get though

[14:12] <thoughtpolice> :( what a bummer

[14:12] *** _meppl joined
[14:13] <thoughtpolice> someone should just get the exact opposite of my domain, you could create all sorts of fun stuff from that

[14:13] <thoughtpolice> perl.youaresuperior.<blank>

[14:14] <szbalint> now that you mention it, I should change my ident to perlh

[14:14] *** meppl left
[14:15] <moritz_> thoughtpolice: I don't think .xxx domains are available at all

[14:16] <masak> moritz_: that would explain why they are so expensive

[14:16] <moritz_> masak: right. You have to bribe a lot of people first ;)

[14:17] * masak doesn't want to know the details

[14:18] <thoughtpolice> moritz_: ah no it isn't a TLD

[14:18] <thoughtpolice> it was going to become one but I guess they axed it

[14:18] <masak> thrice

[14:18] * masak ducks

[14:19] *** franck____ joined
[14:22] *** Blwood left
[14:25] *** cjeris joined
[14:26] <Patterner> there will be no .xxx as long as the USA is in charge.

[14:26] *** iblechbot left
[14:27] <cjeris> USA--

[14:27] <masak> Patterner: not sure there's a need for one given the current contents of the 'net

[14:28] <Patterner> and that too

[14:30] * diakopter wonders about folks who can't find what they're looking for without a special .tld

[14:30] <diakopter> I know I know, it's purely to get more revenue by increasing the namespace size.

[14:31] <diakopter> I mean, I know I know, it's so parents can block all .xxx sites, b/c we all know the non .xxx xxx will all be willing to switch.

[14:32] <moritz_> aye ;)

[14:32] <masak> diakopter: yes, porn site owners are known for their trustworthiness

[14:35] *** franck___ left
[14:35] <Patterner> you can buy a lot of trust for $39.99 per month.

[14:36] <masak> Patterner: yes, but there will probably never come a day when you can only buy it from .xxx sites

[14:37] <szbalint> that'd be censorship

[14:37] <szbalint> :)

[14:37] *** Yaakov left
[14:37] *** moritz__ joined
[14:37] <Patterner> Yeah right.

[14:38] *** moritz__ left
[14:39] *** amnesiac joined
[14:40] <moritz_> and being freedom loving, .xxx wembasters will never accept censorship

[14:41] <moritz_> did you notice how our topic drifted once we weren't onscreen anymore in .is?

[14:42] <masak> that's us. as soon as we go offscreen in .is, we talk about porn

[14:42] <moritz_> to return to our original topic: any comments on my p6c mail?

[14:44] <diakopter> oscon?

[14:44] <diakopter> OSCON?

[14:45] <masak> moritz_: well, at least in changeset 17089, the # seems to be missing in a few #}'s

[14:45] * diakopter kicks purl in the shins

[14:45] <[particle]> ENOPURL

[14:46] <[particle]> what's the lambdaish way to do ++$x multiple times?

[14:46] <masak> moritz_: maybe I misunderstood something. or maybe you noticed already

[14:46] <masak> [particle]: $x += $n;

[14:46] <[particle]> masak: even on strings?

[14:46] <masak> [particle]: don't see why not

[14:47] <moritz_> masak: thanks, but that was not was I was asking for ;)

[14:47] <[particle]> ?eval my $x= 'perl'; say $x += 5;

[14:47] <evalbot_r17041> OUTPUT[5␤] Bool::True

[14:47] <[particle]> nope.

[14:47] <masak> moritz_: I know. I don't really have comments on your three questions, but I found that one thing odd

[14:47] <[particle]> ?eval my $x= 'perl'; say ++$x

[14:47] <evalbot_r17041> OUTPUT[perm␤] Bool::True

[14:48] <moritz_> masak: ok, thanks

[14:48] <masak> [particle]: ah, I see what you mean now

[14:48] <moritz_> [particle]: '+' always enforces numerical context

[14:48] <[particle]> but prefix:++ doesn't

[14:48] <masak> ++$x for ^$n;

[14:49] <[particle]> hrmm. no way to >> or [] that?

[14:49] <masak> [particle]: can't think of any

[14:50] *** thoughtpolice left
[14:50] *** thoughtpolice joined
[14:52] <[particle]> ?eval my $x='perl'; ++$x for ^6762; say $x

[14:52] <evalbot_r17041> OUTPUT[porn␤] Bool::True

[14:52] <[particle]> :)

[14:53] <moritz_> lol

[14:53] <masak> [particle]: priceless

[14:53] *** buetow left
[14:54] *** buetow joined
[14:54] <masak> ?eval my $x='perl'; ++$x for ^6762;

[14:54] <pugs_svnbot> r17091 | moritz++ | [STD.pm] perlhints for block and regex_block, braino fix spotted by masak++

[14:54] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17091

[14:54] <evalbot_r17041> undef

[14:57] *** daxim_ joined
[14:58] <masak> ?eval my $x='perl'; ++$x for ^45565; $x

[14:58] *** dwave joined
[14:58] <evalbot_r17041> \"ruby"

[14:58] <masak> hm

[14:58] <moritz_> masak--

[14:59] <moritz_> ;)

[14:59] <masak> :) no offence intended

[14:59] *** Yaakov joined
[14:59] <moritz_> ?eval my $x='ruby'; $x-- for ^45565; $x

[15:00] <evalbot_r17041> \-45565.0

[15:00] <masak> clearly not irreversible

[15:00] <masak> wonder why

[15:01] <moritz_> old p5 legacy? NYI?

[15:01] <masak> ?eval my $x='ruby'; --$x for ^45565; $x

[15:01] <masak> moritz_: bet it's correctly implemented but the ++ and -- are assymetric

[15:02] <evalbot_r17041> \-45565.0

[15:02] <masak> probably for some good reason

[15:02] *** asksh joined
[15:05] <moritz_> ?eval my @l=<a b c d>; @l.pick(*)

[15:05] <evalbot_r17041> ("c", "d", "a", "b")

[15:06] <masak> ?eval my $a = 'a'; --$a

[15:06] <evalbot_r17041> -1.0

[15:06] <masak> er...

[15:07] <[particle]> that's a pugsbug. it should be ''. i think string decrement is unimpl

[15:07] <masak> [particle]: ah, thx

[15:09] <pugs_svnbot> r17092 | moritz++ | [STD.pm] perlhints for label and whatever

[15:09] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17092

[15:09] *** asksh left
[15:11] *** daxim left
[15:12] <masak> moritz_: question 2

[15:12] <masak> due to the nature of perl6, it seems that almost no matter what delimiters you choose, you'll clash with some perl6 syntax

[15:13] <masak> but using just barewords makes it difficult to determine what's parametrized and what isn't

[15:13] <moritz_> d'oh, you're probably right

[15:13] <masak> have you considered just using $good_variable_names ?

[15:13] <masak> would that suffice?

[15:13] <moritz_> $ suggests scalar context

[15:14] <masak> question 3: no

[15:14] <masak> moritz_: right. which pretty much excludes @, % and & too

[15:14] <moritz_> masak: sadly, yes

[15:16] <masak> maybe just use {{ ... }} and [[ ... ]], for mandatory and optional parts respectively

[15:16] <moritz_> .oO( as long as I don't write about macros...)Oo,

[15:17] <moritz_> I'll think about it

[15:17] <masak> sounds good -- seems there's no excellent solution

[15:18] *** dwave left
[15:21] <diakopter> is the Perldoc grammar in the same file as Perl-6.0.0-STD.pm?

[15:21] <diakopter> er, [going to be]

[15:21] <pugs_svnbot> r17093 | moritz++ | [STD] perlhints for pair

[15:21] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17093

[15:22] <moritz_> diakopter: there is a # XXX we need to parse perldoc ehere  comment in STD.pm

[15:22] <moritz_> s/eh/h/

[15:24] <diakopter> ah. ok.

[15:24] * diakopter wonders when that open thread will be resolved/continued on p6l

[15:25] * [particle] wonders if the hints could be stored in a separate file and parsed by using {*} action stubs

[15:26] <Alias_> [particle] You know, for some reason I always say your name in my head to the tune of Queen's "Bicycle"

[15:26] <masak> [particle]: aren't the {*} action stubs a temp fix?

[15:27] <[particle]> i want to split my particle, i want to split my part...

[15:27] <Alias_> right

[15:27] <Alias_> something like that

[15:27] <[particle]> masak: they're standard perl 6. pge uses them

[15:27] <masak> [particle]: oh.

[15:28] <masak> what do they mean, semantically?

[15:28] <[particle]> pge keeps the action methods in a grammar subclass

[15:28] <[particle]> it means, whatever closure

[15:28] <[particle]> there's semantic comments embedded in them, where appropriate to do different actions within a rule

[15:29] <[particle]> lemme get an example...

[15:29] <moritz_> [particle]: is it a problem that not all annotated tokens have a {*}?

[15:30] <[particle]> if there's no action to do, no {*} needed

[15:30] <[particle]> rule foo { <bar> <baz> } # perhaps

[15:30] <moritz_> I'll wait for the example ;)

[15:32] <[particle]> see http://svn.perl.org/parrot/trunk/languages/abc/src/abc-2.pg

[15:33] <[particle]> that's a smaller grammar for an example of the action stubs you're familiar with

[15:34] <[particle]> and http://svn.perl.org/parrot/trunk/languages/abc/src/abc-2a.txt is an example of a subclass providing the methods to build the parse tree and ast

[15:35] <[particle]> shortly, pmichaud should be committing the first working prototype of 'nqp', a kp6-like language for performing these transformations.

[15:35] <[particle]> nqp := not quite perl

[15:35] <masak> [particle]: so there's an implicit parallel between the {*} things and the methods?

[15:35] <[particle]> yes. pge understands these.

[15:35] <masak> neat

[15:35] <moritz_> cool

[15:35] <[particle]> see 'term' for example

[15:36] <[particle]> see the semantic comments in action?

[15:36] <moritz_> I was just looking at that

[15:37] <[particle]> perhaps the same could be done for the perlhints

[15:37] <[particle]> it would facilitate localization

[15:37] <[particle]> well, internationalization, anyway

[15:39] <moritz_> [particle]: look at token lambda in STD.pm - who would that work with perlhints?

[15:40] <[particle]> btw the parrot commit that allows pge to support this is here: http://perlcabal.org/svn/parrot/revision/?rev=19282

[15:40] <[particle]> moritz_: looking...

[15:41] <[particle]> i think that would need a {*}. probably everything should have them, come to think of it.

[15:41] <[particle]> however, i'd have to review that parrot commit to see if it's necessary

[15:44] <[particle]> the tool we'd need is one that could use the keyed action stubs to associate the pod with the rules

[15:44] <[particle]> as i see it, every rule should  have an action stub in order for that to work universally.

[15:45] <moritz_> you mean for the current approach?

[15:45] <[particle]> however i suppose there could be deeper magic, but i don't see a need for it. we're only adding four characters '{*}'

[15:45] <[particle]> *' {*}'

[15:45] *** franck____ left
[15:45] <moritz_> erm, forget what I just said

[15:47] <moritz_> so when I create a subclass, all I have to do is to run STD.pm over a piece of code with my subclass instead of the perl6 compiler

[15:47] <[particle]> i mean, if every rule has an action stub, you can (perhaps) use the same mechanism to merge actions, or docs.

[15:48] <[particle]> well, note that there's a grammar for abc, and a class where the actions live

[15:48] <pmichaud> TimToady can correct me, but I think the original intent was that {*} would be stubs, yes.

[15:48] <pmichaud> however, I decided to make them active tokens in PGE -- because it allows switching the actions at runtime

[15:49] <pmichaud> (and we can still do the preprocessing step on the grammar if we decide to go that route)

[15:49] <[particle]> perhaps there could be a file starting something like =pod Perl-6.0.0-STD-hints

[15:51] <[particle]> ...and it could contain '=begin perlhints ; token: lambda' (or whatever the pod syntax should be)

[15:52] <pmichaud> afk # errands

[15:52] <[particle]> and those docs could be merged by some tool to display them together, or as a popup in our shiny refactoring browser

[15:52] <[particle]> thanks, pm

[15:52] <moritz_> aye

[15:53] *** flokuehn left
[15:53] <moritz_> that would be perfect

[15:54] <moritz_> I just don't know if you could still parse fraI just don't know if you could still lookup parts of statement

[15:55] <moritz_> sorry, damn lagging connection :(

[15:55] <[particle]> oh, you mean the alternations

[15:55] <[particle]> i see

[15:55] <[particle]> i thought you meant that token lambda {...} was missing {*}

[15:55] <[particle]> but, hrmm.

[15:55] <moritz_> for example :! instead of :!sigsspace

[15:56] <[particle]> yes

[15:56] <moritz_> but that would be a tradeoff i'm willing to make

[15:56] <moritz_> and yes, that's what I meant originally

[15:56] <[particle]> i don't see a way to do it, as it stands.

[15:57] <[particle]> if you are working from a parse tree, then the info is there

[15:57] <[particle]> perhapse you could introspect the match object and do the proper doc lookup

[15:57] <moritz_> I currently don't see how a compiler could distinguish -> and <->

[15:58] <diakopter> anyone here interested in #perl6 becoming a registered group(/channel) with freenode?  or has that been discussed/nixed already?

[15:58] <[particle]> diakopter: probably best to raise that with audreyt or audreyt_ :)

[15:58] <diakopter> I'm fishing for interest, not authorization

[15:59] <[particle]> okay. i have no idea what it means, and thought she might :)

[15:59] <diakopter> I mean, the channel owner isn't the benefactor

[15:59] <diakopter> oops, beneficiary, I mean

[16:00] <diakopter> the group members/participants are, from what I can tell.

[16:00] <moritz_> what's the gain?

[16:01] <diakopter> more visibility for the channel? hostname cloaks for recognized members?

[16:01] <diakopter> not too much, really.  just more official-ness.

[16:02] <moritz_> I'm totally happy with beeing unofficial ;)

[16:02] <PerlJam> does #perl6 need more visibility?

[16:02] <moritz_> no, more contributers ;)

[16:03] <PerlJam> if one begets the other, then I'm all for it.  :)

[16:03] <avar> TimToady: Flying straight out of .is after the meeting?

[16:03] <integral> Is there some kind of status report thing showing where all the hacking is at the moment?

[16:04] <diakopter> TimToady: how was the talk?

[16:04] <TimToady> yes, back to Boston Friday night

[16:04] <TimToady> went well

[16:04] <PerlJam> integral: better would be a report that shows where the hacking needs to be  :)

[16:04] <avar> TimToady: So it's a two-day thing?

[16:04] <TimToady> 5

[16:04] <integral> PerlJam: maybe

[16:04] <moritz_> integral: do you mean in terms of svn activity?

[16:05] <[particle]> integral: svn log ??

[16:05] <integral> moritz_: I don't find that very useful, I just see a bunch of strange names

[16:06] <PerlJam> integral: Are you looking for something to do or just trying to document the state of things?

[16:06] <diakopter> TimToady: any insights/feedback from the audience?  or will that come later?

[16:06] <integral> PerlJam: The former unless the latter is part of the former

[16:06] <TimToady> the returns will dribble in over the next few days

[16:06] <moritz_> integral: audreyt does a bit of pugs hacking, fglock and other are hacking kp6

[16:07] <avar> integral: If I were you I'd try hacking kp6

[16:07] <avar> integral: I implemented unless () {} yesterday in it, it was relatively simple

[16:07] <moritz_> integral: so do you want to code in haskell, perl5 or perl6?

[16:07] <integral> So is there still things happening with pugs?

[16:07] <integral> moritz_: Any of the three

[16:07] <avar> integral: It's the project that'll hopefully become the perl6-in-perl6 compiler

[16:07] <TimToady> but I think Perl 6 is growing on some folks a bit

[16:07] <avar> integral: There's p5 and p6 to write..

[16:07] <silug> i think i figured out that pugs doesn't build on fedora 7 last night

[16:08] <TimToady> I use f7

[16:08] <silug> at least the last release doesn't

[16:08] <integral> So is there any particular part of kp6 to hack on?  I don't really know what's needed in it

[16:08] <TimToady> get ghc661

[16:08] <integral> ah, is the v6/v6-KindaPerl6/TODO a good place to start?

[16:08] <avar> integral: sort of

[16:08] <diakopter> silug: use the latest svn revision of pugs

[16:08] <silug> diakopter: that's my plan.

[16:08] <TimToady> and ghc661

[16:08] <moritz_> integral: first skim over http://moritz.faui2k3.org/pugs/v6/docs/kp6-roadmap.pod.html

[16:09] <integral> hmm, actually I need to go back a step.  I don't even have any idea how to test it

[16:09] *** barney joined
[16:09] <avar> integral: Some things I'd like to see are packaging it up into a cpan-ready package, more internals hacking like emitters

[16:09] <silug> i'm trying to build fedora packages, so it would have been better to work on a released version, but if i have to use a snapshot, so be it

[16:09] <TimToady> it's in the fedora repo

[16:09] <avar> integral: `make test'

[16:09] <silug> TimToady: way ahead of you.  :)

[16:09] <TimToady> or behind, depending on how you look at it. :)

[16:09] <integral> avar: So are all the v6/* things separate from the toplevel build?

[16:10] <avar> integral: yes

[16:10] <diakopter> silug: oh you're *that* silug. ;)

[16:10] <integral> ah okay.

[16:10] <silug> hopefully by then end of the month you'll be able to "yum install pugs"

[16:10] <TimToady> anyway, latest pugs works fine on f7

[16:10] <avar> integral: v6/v6-KindaPerl only depends on v6-MiniPerl6, and that's only for generating the compiler

[16:10] *** dvj left
[16:10] <TimToady> well, as of a day or so ago

[16:11] <moritz_> I don't think there were pugs commits in the last 24H

[16:11] <avar> integral: Feel free to ask me any questions about it if you're interested:)

[16:11] <TimToady> starting a new smoke

[16:11] <integral> thanks avar :-)

[16:12] <TimToady> but actually, the only changes since last smoke aren't involved

[16:12] <diakopter> does anyone have url for a non-low-res image of the interphylic hybrid logo that audreyt uses in talks sometimes?

[16:12] <avar> integral: but basically it's on my todo to help a bit with that now that I'm mostly done hacking perl 5.10. Doing cpan -i v6::KindaPerl6; kp6 --ast -e 'class Main { say "foo" }' would be neat:)

[16:12] <silug> does anyone know if there's a ETA on an actual pugs release?

[16:13] <integral> that sounds something fun to look at

[16:13] <diakopter> silug: it's waiting on a big milestone

[16:13] <moritz_> silug:

[16:13] <moritz_> sorry

[16:13] <silug> diakopter: something specific, or just something big?  :)

[16:14] * diakopter defers to others...

[16:14] <diakopter> yes, something specific.

[16:14] <masak> silug: http://otierney.net/images/perl6.gif

[16:15] <TimToady> it's basically waiting on audreyt to get healthy enough to finish merging the new metaobject protocol

[16:15] <avar> integral: are you fluent in any other language than perl?

[16:15] <integral> avar: perl, haskell, c/c++

[16:15] <avar> integral: if so you might giving writing an emitter a try:)

[16:16] <integral> makefiles too

[16:16] <integral> now that sounds fun

[16:16] <moritz_> kp6 could use a better makefile

[16:16] <integral> and a test harness

[16:16] <avar> integral: look at kp6.pl and search for /\@.*Token/ that's the default visitor pattern

[16:17] <integral> kp6.pl?  mp6.pl or kp6-perl5.pl?

[16:17] <avar> so you'd write EmitHaskell or something:)

[16:17] <diakopter> I posted a bug about the realclean target on trac the other day.

[16:17] <avar> kp6-perl5.pl sorry

[16:17] <moritz_> (and a makefile emitter as kp6 backend would be fun as well ;)

[16:17] <integral> I suppose there's also parrot, they seem to have some more bits of the object system done now

[16:18] *** chris2 left
[16:20] <avar> integral: There could be, but there isn't afaik

[16:25] <avar> integral: http://dev.pugscode.org/changeset/17085 # unless () implementation

[16:25] <avar> the confusing code is autogenerated:)

[16:25] <[particle]> integral: yeah, we're passing ~85% of our object tests with the new model.

[16:25] *** franck___ joined
[16:26] <integral> [particle]: excellent!  Just need tidy up the debugging tools now :-)

[16:26] <avar> integral: I'd settle for them not segfaulting:)

[16:26] <[particle]> the parrot source is getting both nicer to look at and safer to code with.

[16:27] <[particle]> fewer gc segfaults would 

[16:27] <[particle]> fewer gc-related segfaults would make me more productive

[16:27] * integral doesn't think the gc's poor quality looks very good

[16:28] <[particle]> we welcome your assistance in any way.

[16:28] <[particle]> tcl can't run it's test suite now due to an assert() failure

[16:29] <[particle]> TimToady: see anything wrong with adding action stubs ("{*}") to all the STD tokens?

[16:30] <[particle]> *rules, even

[16:30] <TimToady> it can potentially interfere with longest token analysis

[16:30] <TimToady> though that's not a problem for lambda

[16:30] <[particle]> really? hrm.

[16:30] <TimToady> {*} is a side effect, so procedural

[16:31] <TimToady> so we're careful not to put {*} after sigiltwigil, for instance

[16:31] <[particle]> crud. yeah.

[16:31] <TimToady> since we'd like $*foo to be a token, probably

[16:32] <[particle]> i suppose an ast transformation could flatten the sigiltwigil structure into a token

[16:32] <[particle]> then longest token analysis could be performed

[16:33] *** justatheory joined
[16:34] *** masak left
[16:38] <TimToady> assertions don't interfere with longest-tokens, so maybe <?{*}> could be a stub too (assuming * is true)

[16:39] <TimToady> or maybe <?> could be a degenerate "always true" assertion

[16:39] <[particle]> it's whatever you want it to be

[16:40] <TimToady> hmm, <*> isn't taken yet

[16:40] *** dduncan joined
[16:41] <TimToady> but in general {*} stands for side effects, and should terminate the token

[16:42] <[particle]> oh, how i love the extensibility of perl 6 grammars

[16:43] <TimToady> well, not until we bootstrap it.  :)

[16:43] <[particle]> aka "independence day"

[16:47] *** weinig joined
[16:56] *** elmex_ joined
[16:56] *** jhorwitz joined
[17:00] *** cjeris left
[17:03] *** Psyche^ joined
[17:08] *** fglock joined
[17:10] *** elmex left
[17:11] *** sysdef is now known as s

[17:12] *** s is now known as SysDef

[17:12] *** Blwood joined
[17:13] *** kanru left
[17:16] <avar> TimToady: So are you at WG 2.8 for the whole duration in .is? Can't find anything about it on their website

[17:16] * avar pesters:)

[17:16] <avar> TimToady: Don't worry, I'm not going to show up and scare the crap out of you:)

[17:17] <TimToady> yeah, WG is for *working* group.  :)

[17:18] <avar> presumably you're showing off p6 functional features or..?

[17:19] <TimToady> that, and p6 non-functional features.  :)

[17:19] *** drupek12 left
[17:20] *** Patterner left
[17:20] *** Psyche^ is now known as Patterner

[17:28] *** Blwood left
[17:31] *** bonesss joined
[17:32] *** drupek12 joined
[17:33] *** IceShaman joined
[17:34] *** AzuiSleet joined
[17:34] *** Neophyte[Away] joined
[17:35] <Neophyte[Away]> Thank you thoughtpolice, I did not know this channel existed. :-)

[17:36] <thoughtpolice> np

[17:39] *** dwave joined
[17:40] *** dwave left
[17:42] <integral> Is there someone who could reset my commitbit password for me?

[17:43] <[particle]> bsmith?

[17:43] <integral> yes, bsmith/bsmith@vtrl.co.uk

[17:44] <[particle]> msg sent

[17:44] <integral> thanks

[17:46] <integral> excellent!  thanks, [particle]

[17:46] <avar> how do I make svk save my password? It kept asking me multiple times yesterday on svk push

[17:46] *** dwave joined
[17:48] <dduncan> did your commit succeed afterwards?

[17:49] <avar> yup

[17:49] <clkao> avar: use once with svn first.  what version of svk is this?

[17:49] <dduncan> I've found that it only multi-prompted if it had trouble talking to the server ... or if svk wasn't installed right

[17:49] <avar> This is svk, version v2.0.1 (using Subversion bindings 1.4.2)

[17:49] <dduncan> I look forward to a svk with a git backend rather than svn

[17:49] <diakopter> TimToady: did you backlog the question (I asked) here about return type being part of a code object signature?

[17:50] <avar> dduncan: why wouldn't you just use git directly?

[17:50] <dduncan> I do use git directly, for a different project

[17:50] <avar> clkao: Yeah, I guess I'll try with svn

[17:50] *** weinig left
[17:50] * integral would like svk to be as fast as git :)

[17:50] <dduncan> but I understand that svk does provide some nice porcelain

[17:51] <dduncan> and compatibility ... a point is, I'd like to be able to use the svk interface perhaps, but use git for plumbing rather than svn

[17:51] <avar> I haven't noticed:)

[17:51] <avar> but then again I just use pull, push, ci, mi, co

[17:52] <szbalint> dduncan: do you work with git in a smaller project?

[17:52] <dduncan> I use git for the Perl 5 version of Muldis DB

[17:52] <dduncan> its stated in the common README with the Perl 6 version under Pugs

[17:52] <pugs_svnbot> r17094 | avar++ | woohoo commit test

[17:52] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17094

[17:53] <dduncan> in that case, the whole system is git, my end and public server

[17:53] <dduncan> the latter provided by mugwump

[17:53] <pugs_svnbot> r17095 | avar++ |  r61232@t:  avar | 2007-07-17 17:53:17 +0000

[17:53] <pugs_svnbot> r17095 | avar++ |  rming commit test

[17:53] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17095

[17:53] <avar> still asked for the passwd

[17:53] <avar> I only checked out /misc with svn though

[17:53] <szbalint> dduncan: how does the decentralized model work out with relation to merging changes into a main codebase?

[17:53] <dduncan> I would suggest similar tech for pugs if it were possible

[17:53] <TimToady> diakopter: the --> type is both for external info and for coercion

[17:54] <diakopter> avar, you can do svn co -N http://path

[17:54] <szbalint> what I'm specifically interested is the pull/push thing, is it possible to push instead of pull changes?

[17:54] <TimToady> STD uses it for coercion

[17:54] <[particle]> if only git worked on windows....

[17:54] *** weinig joined
[17:54] <avar> [particle]: it does

[17:54] <integral> the perl5-porter's are having a reposithon at some point ot figure out moving perl5 to svn+svk or git

[17:54] <[particle]> avar: last i knew, it was cygwin only windows support

[17:54] <dduncan> indeed, which re-inspired me to bring up the topic here

[17:54] <avar> [particle]: So what?:)

[17:55] <avar> [particle]: there's a mingw port it progress, but I don't see the problem with cygwin

[17:55] * diakopter gets lost

[17:55] <clkao> i am so tired of this

[17:55] <dduncan> szbalint, anyone using svk now, with local branches, is already working distributed ... but git does it better

[17:55] <[particle]> avar: cygwin is not windows

[17:56] <dduncan> audrey does it effectively, for example

[17:56] <[particle]> i hate cygwin. i use an ubuntu vm instead of that crap.

[17:56] <dduncan> distributed that is

[17:56] <avar> [particle]: You can apperently intstall it so that you can use git-* transperently in cmd.bat

[17:56] <szbalint> dduncan: what I mean is, is it possible to push into a repository, instead of having a maintainer pull from various people based on knowledge outside the SCM system?

[17:56] * integral has found disconnected working the most useful advantage

[17:56] <avar> dduncan: svk isn't really distributed, it's disconnected

[17:57] <dduncan> okay

[17:57] <avar> It really just provides a buffer for pulling/commiting as opposed to making it just as easy for other people to pull from you as it is to pull from the central repos

[17:57] <dduncan> everyone can push their commits into the same repository, but it keeps better track of history

[17:57] <avar> Although it adds merging stuff that svn doesn't have as I understand it

[17:57] <clkao> you can generate patches with push -P

[17:58] <integral> does svk have something which works like git-rebase?

[17:58] <integral> avar: it tracks merges whereas svn doesn't

[17:58] <diakopter> TimToady: help the feeble here; does that mean the return type is[n't] part of the signature?

[17:59] <dduncan> to be honest, I found using svk merges to be troublesome when I tried working disconnected, so I stopped and now just use svk in mirror mode only

[17:59] <obra> TimToady: is Iceland treating you ok?

[17:59] <dduncan> the main advantage here being is I can make a clean checkout dir ... and have a copy of all revisions on my machine, without hitting the server

[17:59] <dduncan> I think the problem I had with svk is related to svns limitations

[18:00] <dduncan> svn only has a single history line, afaik

[18:00] <avar> yes

[18:00] <avar> svk suffers for its crappy backend

[18:00] <avar> clkao: is anyone working on alternative backends currently?

[18:00] <diakopter> avar: did you try the svn co -N path

[18:00] <TimToady> diakopter: see S02:1021

[18:00] <avar> diakopter: later..

[18:01] <TimToady> obra: yes, it's fine now that I've given my talk :)

[18:01] <dduncan> so if svk was repurposed to use git as a main backend, I think the picture would be improved, while such a svk would provide ease of migration to current svk svn users

[18:01] <dduncan> I think

[18:01] <obra> TimToady: excellent. Did you get through all your slodes?

[18:01] <integral> What I do like about svk/svn is that I can svn rm a branch, but all its history is still kept, whereas git seems much more lax about keeping history of tags and branches

[18:01] <szbalint> I kind of paid attention to git in the very first weeks of its development but then lost track of it, that is why I was wondering about the push thing. LK folk don't really use that :)

[18:01] <obra> slides, even

[18:02] <dduncan> there is no 'rm' with git ... you simply don't have the file in your checkout dir, and the next commit notes that it was deleted

[18:02] <TimToady> I got to all the ones I expected to, and got to flash through the ones I thought I'd have to flash through

[18:02] <dduncan> git works on whole dirs rather than files

[18:02] * integral meant deleting a branch, not a file in a branch

[18:02] <dduncan> okay

[18:03] <dduncan> still, I don't think anything is actually lost

[18:03] <TimToady> "we did a major refactor of regexes <flash> <flash> <flash> <flash> <flash> <flash> <flash> was pretty effective

[18:04] <avar> dduncan: git itself has compatability tools for svn, you really don't need svk to complicate matters

[18:05] <avar> dduncan: Check out cogito if you want a more svn/cvs like interface

[18:05] <dduncan> okay

[18:06] <dduncan> well for the record I do like git just fine by itself, though I have so far been using it somewhat minimalist ... mainly I thought the svk thing might help other people adopt svk

[18:06] <dduncan> I mean git

[18:07] <avar> Ya, perl people maybe:)

[18:09] <thoughtpolice> question: if variables don't interpolate, would there be a way for example, to define a Regex object explicitly where I could use some sort of user-defined string and 'interpolate it' from there?

[18:09] <TimToady> diner &

[18:10] <thoughtpolice> i realize variables don't interpolate, I'm just kind of spit-balling as to how the same effect could be acheived (aside from using a :P5 modifier)

[18:10] <integral> variables don't interpolate?

[18:10] <TimToady> s:3rd/<null>/n/

[18:10] <diakopter> TimToady: fg

[18:10] <thoughtpolice> integral: nope

[18:10] <thoughtpolice> integral: http://perlcabal.org/syn/S05.html#Variable_(non-)interpolation

[18:10] <avar> use { $var } ?

[18:11] <TimToady> do you want the variable interpreted as regex?

[18:11] <TimToady> if so, that's <{$var}>

[18:11] <TimToady> (brackets must balance tho)

[18:11] <TimToady> &

[18:13] <thoughtpolice> TimToady: where $var would be something like "[a-z]" (trivial) just as a string

[18:14] <BinGOs> this has so reminded me.

[18:14] *** REPLeffect joined
[18:14] <BinGOs> I've added a pugs smoke on netbsd to my smoking rotation.

[18:15] <IceShaman> thoughtpolice, thought that was a..z now :/

[18:16] <PerlJam> it's actually <[a..z]>

[18:17] *** funktio left
[18:18] <thoughtpolice> IceShaman: i'm just confused. :( either way if what TimToady said acheives what you want then I guess that it's NYI in pugs

[18:18] <PerlJam> doesn't pugs just punt to PGE?

[18:18] *** explorer joined
[18:18] <thoughtpolice> you can set it to use PGE via PUGS_REGEX_ENGINE if you have parrot installed

[18:18] <thoughtpolice> although

[18:19] <thoughtpolice> on my openbsd box any sort of regex-operation just seemed to hang :/

[18:19] <thoughtpolice> so that might need a little work

[18:19] <BinGOs> ouch

[18:19] <IceShaman> dunno, the apocalypse is doing a pretty nifty job of distorting reality enough for me to swallow it whole without question

[18:20] <thoughtpolice> IceShaman: in either case since <{ }> is really taking a closure and interpolating it yeah, I suppose that's the desired result

[18:20] <BinGOs> openbsbd can be a real fucktard at times.

[18:20] <thoughtpolice> BinGOs: i've been pretty happy so far

[18:21] <thoughtpolice> BinGOs: if I ever manage to find the time to get parrot and pugs built on my dragonflybsd box then we'll see if something similar happens

[18:21] <thoughtpolice> of course this will require me to port ghc first

[18:21] <thoughtpolice> which is why I need to find the time :(

[18:22] <BinGOs> I'm doing smoking pugs on netbsd 

[18:22] <BinGOs> pkgsrc++ # for the shininess regarding ghc

[18:22] <thoughtpolice> yeah pkgsrc is pretty nice

[18:23] <thoughtpolice> but I can't install ghc from pkgsrc since as pkgsrc tells me, it's not supported. a bummer, really.

[18:23] <thoughtpolice> i'll have to do an unregistered build first

[18:23] <[particle]> you don't need ghc for parrot, and i think it builds on dragonfly now

[18:23] <thoughtpolice> [particle]: cool. but I need ghc for pugs

[18:23] <BinGOs> it is a show-stopper really.

[18:23] <thoughtpolice> i figure when I get around to getting ghc on there which I know I eventually will

[18:24] <thoughtpolice> i might as well just be the maintainer for it since I'll probably be using dragonfly in the future

[18:24] <[particle]> thoughtpolice: we'd appreciate dragonflybsd smokes down the hall at #parrot ;)

[18:24] <BinGOs> freebsd must have ghc surely.

[18:24] *** uj joined
[18:24] <TimToady> .oO(ghc on parrot)

[18:24] <thoughtpolice> BinGOs: yes, but i can't install ghc from pkgsrc, and hence I have no copy of ghc on there period

[18:24] <BinGOs> I missed a comma there >:)

[18:25] <thoughtpolice> so i'll just have to port it, basically

[18:25] * [particle] shivers

[18:25] <integral> TimToady: It's possibly, there's a "LambdaVM" which is GHC on java

[18:25] <thoughtpolice> but I doubt I'll run into much trouble anyway

[18:25] <thoughtpolice> [particle]: cool on that note.

[18:25] <BinGOs> dragonfly is freebsd under the skin though

[18:25] <integral> I think technically it's actually trivial to do :)

[18:25] <integral> *possible

[18:25] <BinGOs> or wings or whatever

[18:25] <thoughtpolice> like I said, when I get a free weekend or a day or two or something I'll get around to getting parrot on there and getting ghc onto it

[18:26] <thoughtpolice> man, I remember the last time I compiled ghc. I had to compile it twice actually. :(

[18:26] <[particle]> pugs-on-parrot

[18:26] <BinGOs> 12 hours or so on netbsd ( for ghc ).

[18:26] <thoughtpolice> first I had to compile ghc 6.2.2 from obsd's ports so I could build 6.6.1

[18:26] <thoughtpolice> not cool :(

[18:27] <BinGOs> 6.2.4 to do 6.6.1

[18:27] <thoughtpolice> [particle]: when I get around to it though yeah I can run some smoke's for parrot

[18:27] <[particle]> thanks, thoughtpolice

[18:27] <thoughtpolice> BinGOs: meh

[18:27] <thoughtpolice> either way it still kind of sucked

[18:27] <thoughtpolice> [particle]: np

[18:27] *** uj left
[18:27] <BinGOs> but a pugs smoke is pretty swift once ghc is set up.

[18:27] <BinGOs> hurrah!

[18:28] <thoughtpolice> i figure I'll probably spend at least a half a day getting all that set up

[18:29] <thoughtpolice> hopefully the ghc port will be reletively painless (and if it isn't then I'll curse a lot and hope that does something)

[18:29] <thoughtpolice> the other matters are just ones of letting the hours of compilation go by.

[18:31] <thoughtpolice> [particle]: actually I figure I'll go ahead and just compile parrot on my dragonfly box. it's not doing much other than irssi anyway ;)

[18:31] <BinGOs> a pugs smoke on my netbsd vmware machine at the end of a smoking cycle is the best I can offer

[18:31] <[particle]> thoughtpolice++

[18:31] <pugs_svnbot> r17096 | fglock++ | [kp6] added Prelude.pm to Makefile; 

[18:31] <pugs_svnbot> r17096 | fglock++ | - added return type to Signature and renamed some attributes

[18:31] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17096

[18:32] <BinGOs> it is the end of a rotation of CPAN smoking machines.

[18:32] * BinGOs has to keep his stats up.

[18:33] <BinGOs> I have an OpenBSD machine in this rotation. So I could consider a pugs smoke in there somewhere

[18:33] <thoughtpolice> oi

[18:33] <thoughtpolice> i really need to get out of vmware

[18:34] <thoughtpolice> i mean it's served me well and all, but physical computers are, well, preferable

[18:34] <BinGOs> It is my only choice really.

[18:34] <thoughtpolice> mine too

[18:34] <BinGOs> I have a viable OpenBSD-4.1 image running.

[18:34] <thoughtpolice> except i'm probably a little more limited than you are in the fashion that my boxes have fairly damn small disk space

[18:34] *** Alias_ left
[18:34] <thoughtpolice> i'm running archlinux, dragonflybsd and openbsd

[18:35] <BinGOs> hell, if the OS runs it is viable, no ?

[18:35] <thoughtpolice> iirc my archlinux box has like 5gb, openbsd like 8 and dragonflybsd like 10. that's all I could spare really.

[18:35] <thoughtpolice> yeah. it works great, but a bigger disk would be appreciated to be honest. this xp system only has an 80gb drive

[18:35] <thoughtpolice> need to get like a 500

[18:36] <BinGOs> I'm on a laptop >:)

[18:36] <thoughtpolice> luckily i don't use any sort of graphical environments

[18:36] <BinGOs> oh I am on W2K3 >:)

[18:36] <thoughtpolice> so that saves some space and plus I can just use putty rather than have to keep switching in and out of vmware

[18:37] *** _meppl is now known as meppl

[18:38] <[particle]> thoughtpolice: i saw 500gb for $99 today

[18:38] <BinGOs> I use VNC Viewer to access my running images.

[18:38] <thoughtpolice> [particle]: i saw one about two weeks ago

[18:38] <thoughtpolice> when I get some money I think I'll just indulge myself and go insane with like 4x1TB drives

[18:39] <BinGOs> http://use.perl.org/~BinGOs/journal/33718 # covers my recent woes.

[18:39] <Juerd> thoughtpolice: Better to do 8x500GB, usually

[18:39] <Juerd> thoughtpolice: Unless you don't have the physical space.

[18:40] <thoughtpolice> Juerd: hm i'll keep it in mind.

[18:40] <Juerd> thoughtpolice: With 8 channels, you could have better performance, and a broken disk would only be a loss of 500 GB.

[18:40] <thoughtpolice> yeah good point

[18:40] <Juerd> And it's probably cheaper too :)

[18:40] <thoughtpolice> you have converted me

[18:41] <BinGOs> when I think of our bladeframe at $work and start thinking, I get all excited until I remember it only runs RedHat, Windows 2K3 and Solaris 10

[18:41] <thoughtpolice> i'll just say I have the equivilant of 4x1tb drives.

[18:41] <Juerd> Are you going for hardware raid (to avoid saturating your PCI bus) or software raid (portability, rescuability)?

[18:41] <thoughtpolice> actually i've got solaris 10 on a computer in my room

[18:41] <thoughtpolice> Juerd: probably software

[18:41] * Juerd does only software raid atm btw

[18:41] <thoughtpolice> and on the note of solaris 10

[18:41] <thoughtpolice> zfs is remarkably nice :)

[18:42] <BinGOs> yes, I have a Solaris 10 image running here in this vmware server as well.

[18:42] <Juerd> I like being able to pick any controller, or multiple controllers, and continue to use existing arrays.

[18:42] <Juerd> I think zfs is very interesting.

[18:42] * Juerd wants linux to support zfs natively

[18:42] <BinGOs> and Solaris 11 >:)

[18:42] * thoughtpolice does too

[18:42] <Juerd> User space makes having it for your root fs way too complex

[18:43] <BinGOs> that woudl be shiny.

[18:43] <thoughtpolice> i mean, zfs-via-fuse is an option and fuse can do really good performance file systems (ntfs3g is an example)

[18:43] <thoughtpolice> but just native support would be better in the long run

[18:43] <thoughtpolice> imo, at least

[18:43] * BinGOs goes to make food.

[18:43] * integral ponders putting a fuse server inside parrot/perl5 and serving the objects like /sys does for kernel objects

[18:43] <Juerd> Fuse is nice, but I wouldn't use it for /

[18:44] <BinGOs> speaking as a Solaris admin, zfs is very shiny.

[18:44] <thoughtpolice> i don't even think you can boot off zfs in solaris yet. well, actually I think you can but it's not working to the level everybody wants it

[18:44] <Juerd> BinGOs: Isn't it scary, that it does everything so... automagically? :)

[18:44] <thoughtpolice> yeah it really is. it's a nice filesystem and some of the features are really slick

[18:44] <integral> BinGOs: awww, your USB enclosure's called integral

[18:45] <BinGOs> heh

[18:45] <thoughtpolice> i saw the example they had of creating a pool with a mirror and the automatic recovery

[18:45] <BinGOs> I have a little blue light flashing at me, integral all day!

[18:45] <thoughtpolice> they had me at that

[18:45] <thoughtpolice> :)

[18:45] <Juerd> thoughtpolice: Same here :)

[18:45] <thoughtpolice> good stuff

[18:45] <Juerd> But I have mostly root filesystems :)

[18:46] <Juerd> (Lots of tiny virtual machines)

[18:46] <thoughtpolice> i've also been looking into experimenting more with dtrace

[18:46] <thoughtpolice> but i haven't gotten around with it

[18:46] <thoughtpolice> Juerd: uml?

[18:46] *** SysDef is now known as sysdef

[18:46] <BinGOs> integral: it makes me think of you. ( and not just when I see drain covers ).

[18:46] <Juerd> thoughtpolice: Xen

[18:46] <BinGOs> youch.

[18:47] <Juerd> http://www.rot13.org/~dpavlin/fuse_dbi.html  # omg

[18:47] <BinGOs> ignore me. I have been playing too much with egenera's bladeframes recently

[18:47] <thoughtpolice> ah

[18:47] *** bonesss left
[18:48] <thoughtpolice> i've wanted to try xen for a while

[18:48] *** jisom joined
[18:48] <thoughtpolice> i need some more horsepower though

[18:48] <BinGOs> which include xensource for 'vBlades'

[18:48] <Tene> Juerd: yeah, Fuse::DBI is pretty nifty.

[18:48] *** fglock left
[18:49] *** amnesiac left
[18:49] <Juerd> Tene: I wish I had a use for it!

[18:50] <Juerd> thoughtpolice: I'm going to xenify feather when I get the microgrant money

[18:50] <integral> does feather have HVM?  I guess it was built before the chips were out

[18:50] <Juerd> integral: What is HVM?

[18:51] <integral> hrm, hardware virtual machine.  I guess it was the wrong term to use

[18:51] <Tene> virtualization support on the cpu

[18:51] <Juerd> Oh, the VT stuff

[18:51] <Juerd> integral: No, but feather is getting a core2 duo

[18:51] <Juerd> IIRC it has that

[18:51] <integral> oooh, nice

[18:51] <Tene> yep

[18:51] <Juerd> integral: What would you need it for? :)

[18:52] <BinGOs> damn I have spelt it so wrong. Egenera: http://www.egenera.com/

[18:52] <integral> I just wondered if you've be running just paravirtualised or fully

[18:52] <Juerd> integral: Para.

[18:52] <thoughtpolice> yeah

[18:52] <Juerd> integral: Has several advantages that I wouldn't want to miss :)

[18:52] <thoughtpolice> c2d has VT

[18:52] <thoughtpolice> actually VT's been before core duo even

[18:52] <BinGOs> shiny, but expensive.

[18:52] <thoughtpolice> iirc

[18:53] <Juerd> integral: But if I understand it correctly, VT would allow us to set up something like openbsd or windows, which could be useful for testing one day.

[18:53] <thoughtpolice> [particle]: i've got a baby parrot, it seems. :)

[18:54] <integral> *nod*

[18:54] <thoughtpolice> [particle]: i'm installing the needed perl modules now but I'll get around to running a smoke here pretty quick

[18:54] <integral> and one day ParrotOS

[18:54] <Juerd> (Windows only if someone else is going to pay for the license. I'm not.)

[18:55] <Juerd> afk

[19:01] *** weinig is now known as weinig|bbl

[19:04] *** iblechbot joined
[19:11] *** rhandom joined
[19:17] <Juerd> re

[19:23] *** Blwood joined
[19:27] *** explorer left
[19:35] <Juerd> TimToady: What would you say to someone who thinks "subtleties" like operator precedence are built into languages especially to distinguish "die hards" from "newbies"?

[19:36] <Juerd> TimToady: You're a language designer, so why do you have operator precedence - is it just because C had it, or do you actually think it's very useful?

[19:37] <Juerd> (I'm finding it hard to argue with this guy, because I take differences in operator precedence for granted and don't know any better.)

[19:37] *** Aankhen`` joined
[19:37] <[particle]> operator precedence is like mental parentheses

[19:38] <zamolxes> Juerd: so 2+2*2  should be 8?

[19:38] <Juerd> Apparently, yes.

[19:38] <[particle]> instead of?

[19:38] <Juerd> [particle]: This guy argues in favour of adding parens everywhere because that's clearer.

[19:39] <Juerd> [particle]: Instead of 6.

[19:39] <zamolxes> That should confuse any 3rd grader

[19:39] <zamolxes> let alone 'newbies'

[19:39] <szbalint> too many parens would result from that imo

[19:40] <Juerd> I agree

[19:40] <szbalint> I don't like writing too much of them :)

[19:40] * Juerd thinks bracketing constructs hurt readability in many cases.

[19:40] <[particle]> yeah, the precedence is a parenthesis cache

[19:40] <Juerd> When you indent along with it, it's no problem.

[19:41] <Juerd> But I like to avoid nested parens.

[19:41] <Juerd> (on a single line)

[19:41] <Juerd> foo(bar(), baz()) sucks

[19:41] <Juerd> Gimme foo bar, baz :)

[19:41] <Aankhen``> I like foo(bar(), baz()). :-(

[19:42] <Juerd> I don't like the ))))) you eventually get at the end.

[19:42] <Aankhen``> Well, I do love Lisp, so.

[19:42] <Juerd> I don't want to count parens, and editor highlighting is too interactive to be fast.

[19:42] <Juerd> foo(

[19:42] <Juerd>     bar(

[19:42] <Juerd>     ),

[19:42] <Juerd>     baz(

[19:42] <Juerd>     )

[19:42] <Juerd> )

[19:42] <Juerd> that's readable :)

[19:42] <Juerd> But very long.

[19:43] <[particle]> it's a vertical language

[19:45] *** jisom left
[19:49] <Aankhen``> That's ugly.

[19:51] <Aankhen``> Just use Emacs, you'll never worry about matching parens again. :-P

[19:53] *** statico joined
[19:54] <monomorph> won't we get a lot of parens in perl 6 with nested method calls (/me remembers reading that method calls require parens in many cases, maybe that's old info)

[19:54] <monomorph> x.foo(y.bar(), z.baz())

[19:54] *** marmic left
[19:57] <monomorph> instead of  just foo bar, baz if these were top-level functions

[19:58] <Aankhen``> I don't believe you need parens on a method call without any arguments.

[19:58] <Aankhen``> So I *think* this could also work: foo: $x, y.bar, z.bar

[19:59] <Aankhen``> Uhm, that's: foo: $x, $y.bar, $z.bar

[19:59] <monomorph> found it in s12: Parentheses (or a colon) are required on the dot notation if there are any arguments

[19:59] <Aankhen``> Hmm, then maybe you could say: $x.foo: $y.bar, $z.bar

[20:00] <Aankhen``> But I'm not sure.  Will need to reread S12.

[20:00] <monomorph> yeah, that example is right in the next paragraph

[20:00] <monomorph> no, you're right

[20:00] <Aankhen``> Kewl.

[20:00] *** marmic joined
[20:01] <monomorph> it's a tiny bit inconsistent with function calls, but the colon notation works well enough

[20:06] *** pmurias joined
[20:17] *** devogon_ joined
[20:18] *** devogon left
[20:18] <Juerd> I don't think "foo: LIST" would work instead of foo(LIST), and it's not necessary either.

[20:18] <Juerd> It's ambiguous with labels :)

[20:18] *** weinig|bbl is now known as weinig

[20:18] <Juerd> With an invocant, however, something is needed to visually separate the two things, and to disambiguate the whole from a function call.

[20:21] *** devogon joined
[20:22] *** devogon_ left
[20:28] *** barney left
[20:33] *** lambdabot left
[20:48] *** fglock joined
[20:51] *** TJCRI left
[20:52] *** amnesiac joined
[20:59] *** AzuiSleet left
[21:05] <pmurias> fglock: hi

[21:05] <fglock> pmurias: hi

[21:08] <fglock> commuting &

[21:08] *** fglock left
[21:08] *** idiotmax left
[21:10] *** shachaf joined
[21:12] *** bonesss joined
[21:17] *** explorer joined
[21:18] <Juerd> Heh.

[21:18] <Juerd> I love that several people help maintain feather now (esp diakopter)

[21:18] <Juerd> I was about to update /etc/resolv.conf, and read:

[21:18] <Juerd> # we use our own local caching nameserver now...

[21:18] <Juerd> Perfect :)

[21:19] <Juerd> (I had just installed an external local caching nameserver)

[21:25] <diakopter> hee hee

[21:27] <diakopter> Juerd: let me know if you change resolv.conf, and I'll shut off the other local one

[21:27] <Juerd> diakopter: Why would I?

[21:27] <diakopter> I dunno

[21:27] *** jferrero joined
[21:27] <Juerd> As long as it's cached, I don't care much who does it :)

[21:27] <Juerd> And dnscache is light weight and secure

[21:28] <[particle]> is feather under heavy load ? svn diff viewer seems unresponsive

[21:28] <Juerd> [particle]: Not at all

[21:28] <[particle]> ah, better now

[21:28] <Juerd> Heh.

[21:28] <Juerd> Magic uptime.

[21:29] <diakopter> I like dnscache (the one I put on there), b/c it's absurdly trivial to override domains' NS records (instead of it looking them up in the root hints).

[21:29] *** SubStack left
[21:29] <diakopter> particular domains, I mean.

[21:29] <Juerd> I wish it could more easily listen on multiple interfaces.

[21:29] <Juerd> Like, er, 0.0.0.0 :)

[21:30] <Juerd> I have another box here with 48 interfaces

[21:30] <diakopter> it'll do that easily...

[21:31] <diakopter> find that instance's env/ dir, and s/127.0.0.1/0.0.0.0/ in env/IP

[21:32] <Juerd> Tried that. Didn't listen at all after that

[21:36] *** explorer left
[21:38] <diakopter> something else on that port preventing it on any of the interfaces?

[21:38] <Juerd> nafaik

[21:39] <Juerd> But I have to delay this migration anyway

[21:39] <Juerd> I just found out it hosts zones too.

[21:39] *** jferrero left
[21:39] <diakopter> ah, well, that would do it.

[21:39] <Juerd> It has to host zones, so I don't think I'll switch to djbdns on that box

[21:48] *** pmurias left
[21:55] *** rhandom left
[22:09] *** weinig left
[22:09] *** weinig joined
[22:10] <meppl> good night

[22:15] *** SubStack joined
[22:19] *** elmex_ left
[22:29] *** iblechbot left
[22:30] *** weinig left
[22:33] *** weinig joined
[22:40] *** amnesiac left
[23:10] *** devbot6` joined
[23:10] *** d4l3k_ joined
[23:10] *** devbot6 left
[23:10] *** devbot6` is now known as devbot6

[23:10] *** dalek left
[23:11] *** d4l3k_ is now known as dalek

[23:13] *** monomorph left
[23:24] *** Schwern left
[23:43] <Aankhen``> Oooh, I never knew pmurias is a Pratchett reader. :-D

[23:49] <Juerd> Fucking hell

[23:49] <Juerd> Our router just died

[23:49] <Juerd> That is: the hard disk is broken

[23:49] <Juerd> The kernel still runs, so routing is functional

[23:49] <Juerd> But expect feather to be unreachable at some point

[23:54] * diakopter expects feather to be unreachable at some point

[23:55] *** Neophyte[Away] left
[23:55] * Aankhen`` expects diakopter to expect feather to be unreachable at some point.

[23:55] *** Schwern joined
[23:58] *** thorat joined
