[00:00] <[particle]> perlers aren't used to dimensions greater than one

[00:01] <TimToady> having one level of auto-list-interpolation also fits in well with the notion that Perl likes interpolative solutions

[00:02] <TimToady> people grok "Answer = $answer\n" a lot better than "Answer = " ~ $answer ~ "\n"

[00:03] <[particle]> which is why we now have $?LINE etc

[00:04] <TimToady> P6 is supposed to be more like Perl than P5.  :)

[00:05] <TimToady> (in the good ways...)

[00:05] *** statico joined
[00:06] <[particle]> p6 is definitely trending in the interpolative direction

[00:06] <putter> re learning monads, one approach is to learn arrows first.  they are a later generalization of monads, and at least to me, make far more sense.  then one can work backward to understanding the more limited and twisted monads. ;)

[00:07] <putter> http://www.cs.chalmers.se/~rjmh/afp-arrows.pdf  http://www.haskell.org/arrows/ etc

[00:11] *** [particle] joined
[00:13] <Ziggy6> pugs has a lexer?

[00:14] <Ziggy6> found it, Lexer.hs :D

[00:15] <[particle]> not many languages without lexers exist

[00:15] <[particle]> written latin almost qualifies

[00:16] <putter> Ziggy6: also Parser/*

[00:16] <[particle]> GALLIAESTOMNISDIVISAINPARTESTRES

[00:16] <Ziggy6> i guess it's too hard to learn monads, parsec and to try to understand the complex pugs parser at the same time :)

[00:19] * allbery_b has monads and parsec down, but the lexer has defeated him

[00:20] <putter> the parser can certainly be skimmed.  one can get a feel for it's structure without yet knowing enough to write or modify bits...

[00:20] <allbery_b> specifically, trying to fix "- f" being parsed as filetest operator "-f" without breaking everything else

[00:21] *** bonesss joined
[00:21] <allbery_b> couple of us tried to attack it last weekend, managed to break things in such a way that the test suite went into an infinite loop :/

[00:23] <TimToady> languages with mandatory endings tend to be self clocking

[00:24] <TimToady> provided the endings can usually be disambiguated from the roots

[00:24] <TimToady> kanji vs okurigana works that way too

[00:25] <allbery_b> <-- learning Hebrew.  suffixes and prefixes can *usually* be unambiguously removed from the roots... but not always

[00:25] <[particle]> there are always irregular forms to gum up the works

[00:27] <allbery_b> not to mention the incredible is-it-a-vowel-or-a-consonant-here? vav

[00:29] <putter> [particle]: re "YOUONLYNEEDVOWELSORSPACESBUTNOTBOTH", "Y NLY ND VWLS R SPCS BT NT BTH".  my fuzzy impression is ancient greek went back and forth a bit.

[00:30] <putter> though the human reader may do an entirely separate pass at the first in order to "tokenize" it...

[00:31] <putter> or read aloud and use language auditory word recognition

[00:31] <allbery_b> took 'em a while to all agree to appropriate otherwise unused phoenician/aramaic letters for vowels :) it's not like the ancient Greeks were particularly unified

[00:31] *** marcususesthis joined
[00:33] <luqui> @pl \a -> (>>= b a)

[00:33] <lambdabot> (=<<) . b

[00:33] <[particle]> nope, plenty of city/states

[00:34] <allbery_b> interesting that it parsed that, I think it's illegal (need parens around (>>=) to use it as a prefix op)

[00:34] <allbery_b> @pl \a -> b >>= a

[00:34] <lambdabot> (b >>=)

[00:35] <allbery_b> @pl \a -> (>>=) b a

[00:35] <lambdabot> (b >>=)

[00:35] <allbery_b> aha

[00:35] <allbery_b> @unpl (=<<) . b

[00:35] <lambdabot> (\ d g -> g >>= (b d))

[00:36] <allbery_b> ah, right

[00:36] <allbery_b> duh

[00:36] * luqui didn't know about unpl

[00:41] <allbery_b> @. redo unpl (=<<) . b

[00:41] <lambdabot> (\ d g -> do { a <- g; (b d) a})

[00:49] <luqui> what's that?

[00:49] <luqui> expands even more?

[00:50] <luqui> (that's a great learning tool though)

[01:00] <allbery_b> redo converts >>= form back to do form; . is composition (it's a haskell lambdabot, of *course* it does composition...)

[01:00] *** lyokato joined
[01:01] <allbery_b> sadly, only in prefix form

[01:07] *** b00t joined
[01:13] <putter> random musing (as I continue to try to picture how all the pieces we have could be variously assembled to get us nearer to xmas)...

[01:14] <putter> pil2run is our best backend after pugs itself.  its jsperl5 allows it to

[01:15] <putter> use p5.  a r5r (p5 regexs with <rules>) exists.  the redsix p5 grammar is written in r5r.

[01:15] <putter> err, that's "a r5r implementation exists for p5".

[01:17] <putter> redsix was passing not quite 20% of tests, but the grammar was ripped/derived/kludged from the pugs one, so it should be not horribly incomplete. 

[01:18] *** miyagawa joined
[01:18] <putter> though it has flaws, such as not integrating ast generation with parsing, so arity-based parse decisions don't work.

[01:20] <putter> so anyway, one random thought is one might translate the redsix grammar and opp from ruby to p5, combine it with Regexp::Engine::Reentrant (or some such), and give jsper an alternate front end.  one which, unlike pugs/pil1, could provide object info.

[01:20] <putter> s/object info/class declarations./

[01:21] <putter> pil2js already heavily uses p6 and oo.  it just can't get oo info through the pugs/pil1 parser bottleneck.  this way it could.

[01:22] <putter> and p5 could be rewritten as p6, providing a bootstrap.  much of what is currently js code could also be rewritten as p6.

[01:32] *** bonesss joined
[01:50] *** Mk150 joined
[01:54] *** Mk150 is now known as L0v31n

[01:57] *** marcususesthis joined
[01:59] *** Ziggy6 left
[01:59] *** Ziggy6 joined
[02:13] *** theorbtwo joined
[02:17] *** buetow joined
[02:32] <svnbot6> r15140 | putter++ | project_planning/TALK - added "redsix on PIL2JS".  Feedback encouraged.

[02:33] *** bonesss joined
[02:34] <Ziggy6> ?eval use v5; print "hello"

[02:34] <evalbot_r15139> 1.0

[02:35] *** mako132_ joined
[02:40] <putter> Does anyone know approximately when pil2js stopped working?  I'd like to svn back to then and run a pil2js smoke.  tnx.

[02:41] <putter> Else I'll just start walking back through the releases.

[02:42] <wolverian> binary search is better than linear :)

[02:43] <putter> unless one expects a small k :)

[02:47] <Ziggy6> hmm, strange, when i try the same thing in my pugs build, i get "Undefined subroutine &main:: called."

[02:47] <putter> no, you're right.  also essential is the implicit context that for this I don't really care just when it broke.  since pil2js is rather stable (aka wedged waiting for pugs oo ast), any version pre breakage would be fine.  releases tend to be less broken than random, so any release from last year should serve.

[02:49] <putter> Ziggy6: me too.  let's see...

[02:50] <allbery_b> same here.  r15101 fwiw

[02:50] <putter> only two t/perl5/ smoke failures - modify_*

[02:51] <putter> odd

[02:52] <Ziggy6> perl5 embedding is supposed to be fully functional?

[02:52] <putter> for some value of "fully"

[02:53] <putter> bbiab

[02:58] <allbery_b> interesting.  it's the use that triggers the error

[02:58] <luqui> ?eval use v5;  my %h = (a => 1);  $h{a}

[02:58] *** evalbot_r15139 is now known as evalbot_r15140

[02:58] <evalbot_r15140> 1

[02:58] <luqui> neat

[02:58] *** dduncan joined
[03:00] * allbery_b wonders what's up that it works in evalbot

[03:02] <allbery_b> huh.  the tests don't test for this case

[03:06] *** scw joined
[03:14] <allbery_b> pugs -e 'use v5;' fails, pugs -e '{use v5;}' fails, pugs -e 'sub foo ($x) {use v5;} foo(0)' succeeds

[03:14] *** marcusus1sthis joined
[03:17] <allbery_b> pugs -e 'eval "use v5;"' succeeds, likely explaining evalbot (and also the test suite)

[03:25] *** nekokak joined
[03:25] *** Tene joined
[03:29] <Ziggy6> should I add a test?

[03:30] <allbery_b> probably a good idea

[03:30] *** nipra joined
[03:33] <putter> about to commit one...

[03:35] <putter> actually, you know...

[03:38] <putter> 'use v5' simply isn't implemented.  all the eval is doing is hiding that from us.  and the bug is that pugs -e 'sub foo ($x) {use v5;} foo(0)' compiles.  no?

[03:39] <putter> ./perl5/modify_* is what tests 'use v5', and that's failing.

[03:40] <putter> so no new test needed.

[03:44] <allbery_b> hm, yep, use v5 doesn't actually work

[03:46] <Ziggy6> well, then mp6 won't run on pugs

[03:50] <putter> mp6?  isn't the idea to try kp6?  ie, use pugs instead of, or in addition to, mp6, in supporting kp6 development.

[03:50] <svnbot6> r15141 | putter++ | TALK - putter argues with himself about "redsix on PIL2JS".  Other participants welcome.

[03:51] <Ziggy6> they have almost the same runtime

[03:52] <putter> ah.  try replacing "use v5; ..." with "eval('...,:lang<perl5>)"?

[03:53] <allbery_b> actually, I did.

[03:54] <allbery_b> ./pugs -e 'eval "my \@a = (1, 2); print \$a[0]", :lang<perl5>' # empty string output

[03:54] <allbery_b> I might be doing somethng else silly though

[03:55] <putter> allbery_b: sorry, "try replacing" was regards kp6 :)

[03:55] <allbery_b> fails with <> quotes too

[03:55] <allbery_b> ah

[03:55] <allbery_b> but I think this demonstrates that perl5 mode doesn't quite DTRT

[04:03] <putter> looks like the last line of output disappears if it doesn't end in a newline.

[04:03] <putter> ?eval eval(q/print "a\nb\n";/,:lang<perl5>)

[04:03] *** evalbot_r15140 is now known as evalbot_r15141

[04:03] <evalbot_r15141> 1.0

[04:04] <allbery_b> ah, yes, there it is

[04:05] <allbery_b> oh, and use v5; works in eval with that

[04:06] <allbery_b> so use v5 works, but something's wrong at the very beginning of a file (or -e).  but beginning of an eval works.

[04:06] <putter> really...?

[04:06] <Ziggy6> ?eval 1; use v5; print "test";

[04:06] <evalbot_r15141> OUTPUT[test] Bool::True

[04:06] <Ziggy6> nice

[04:07] <Ziggy6> hmm

[04:07] <Ziggy6> ?eval 1; use v5; my %h = (a => 'b')  print ${a};

[04:07] <evalbot_r15141> Error: ␤Unexpected "print"␤expecting operator or ","

[04:07] <Ziggy6> ?eval 1; use v5; my %h = (a => 'b');  print $h{a};

[04:07] <allbery_b> mress:10028 Z$ ./pugs -e 'eval <use 5; my @a = (1, 2); print $a[1], "\n">;'    

[04:07] <allbery_b> 2

[04:07] <evalbot_r15141> Error: No compatible subroutine found: "&a"

[04:08] <allbery_b> (I presume that v6 does the v6 thing with sigils)

[04:08] <Ziggy6> ?eval 1; use v5; my %h = (a => 'b');  print $h{'a'};

[04:08] <evalbot_r15141> OUTPUT[] Bool::True

[04:08] * putter thinks 'use v5' is a noop for p6 (unintentional), and a noop for p5 (intentional).

[04:09] <allbery_b> if I remove the "use 5" I get an empty string as output (v6 mode variable parsing)

[04:10] <allbery_b> it may ntot be fully implemented, maybe, but it's doing *something*

[04:10] <Ziggy6> ?eval use v5; my %h = (a => 'b');  print $h{'a'};

[04:11] <evalbot_r15141> 1.0

[04:11] <Ziggy6> odd

[04:12] <putter> (evalbot may have p5 embedding disabled for security...)

[04:15] <putter> end of day for me

[04:15] <putter> anyone: any feedback on redsix on pil2js proposal welcome.

[04:15] <putter> &

[04:26] *** b00t joined
[05:03] *** justatheory joined
[05:07] *** jamhed joined
[05:14] *** Aankhen`` joined
[05:24] *** miyagawa joined
[05:40] *** stevan_ joined
[05:48] *** miyagawa joined
[06:15] *** BooK_ joined
[06:33] *** jdv79 joined
[06:40] *** marcususesthis joined
[06:44] *** jdv79_ joined
[06:44] *** GabrielVieira joined
[06:53] *** leed joined
[07:04] *** Southen joined
[07:06] <svnbot6> r15142 | szabgab++ | optionally generate index.html by smartlinks.pl

[07:13] *** marmic joined
[07:34] *** xinming joined
[07:38] *** marcususesthis joined
[07:44] *** bons joined
[07:44] *** spo0nman joined
[07:45] *** iblechbot joined
[07:46] *** devogon joined
[08:01] *** luqui left
[08:21] *** Aankh|Clone joined
[08:25] *** drrho joined
[08:31] *** bons is now known as bons_away

[09:21] *** andara joined
[09:29] *** elmex joined
[09:31] *** xinming joined
[10:20] *** sri_ joined
[10:22] *** ruoso joined
[10:22] *** Aankh|Clone is now known as Aankhen``

[10:23] *** cmarcelo joined
[10:24] *** Aankh|Clone joined
[10:25] *** xinming joined
[10:30] *** c6rbon_ joined
[11:05] *** iblechbot joined
[11:05] *** theorbtwo joined
[11:07] *** kanru joined
[11:14] *** dduncan left
[11:18] *** devogon_ joined
[11:42] *** meppl joined
[12:11] *** explorer joined
[12:16] *** chris2 joined
[12:41] *** BooK joined
[12:48] *** nipra joined
[13:04] *** iblechbot joined
[13:15] *** baest joined
[13:23] *** baest joined
[13:25] *** Odin- joined
[13:39] *** Ziggy6 left
[13:54] *** buetow joined
[13:54] *** penk joined
[14:09] *** stevan_ is now known as stevan

[14:09] *** devogon joined
[14:17] *** gour joined
[14:18] <ingy> gour: it's been dead in here for some hours

[14:18] <gour> ingy: well, i'll ask anyway ;)

[14:18] <ingy> but it usually wakes up in bursts...

[14:18] <ingy> yeah

[14:19] <gour> audreyt: are haskell bindings for yaml available somewhere?

[14:20] <[particle]> wikipedia says yes

[14:20] <[particle]> look for HsSyck iirc

[14:23] <gaal> gour: http://svn.pugscode.org/pugs/third-party/HsSyck/

[14:23] <lambdabot> Title: Revision 15142: /third-party/HsSyck

[14:23] <gour> thanks, i just got it

[14:24] <gour> long live yaml ;)

[14:24] <[particle]> death to yaml! long live syck!

[14:26] <gaal> gour: you may also find this useful: http://svn.pugscode.org/pugs/src/DrIFT/YAML.hs

[14:27] <gaal> and an example usage -- binding Perl 6 to HsSyck -- at http://svn.pugscode.org/pugs/src/Pugs/Prim/Yaml.hs

[14:27] * gour is a bit confused with syck vs. yaml :-(

[14:28] <[particle]> syck is an easier to parse subset of yaml

[14:29] <gour> where is some syck spec available?

[14:33] <[particle]> look at yaml.org

[14:36] <gour> [particle]: i saw that and dl-ed yaml spec, but what is missing in syck?

[14:37] <[particle]> actually, maybe it's not a subset anymore, based on the stuff i'm reading now

[14:37] <[particle]> it is much faster

[14:38] <[particle]> oh, here: http://whytheluckystiff.net/syck/

[14:38] <lambdabot> Title: ( Syck ): YAML for Ruby, Python, PHP and OCaml

[14:38] <[particle]> look at the Progress Meter section

[14:38] *** bonesss joined
[14:39] <gour> [particle]: thanks a lot. this one is very helpful

[14:54] *** gour left
[14:57] <gaal> hmm? syck's a library that parses and emits yaml.

[14:57] <gaal> it's written in c and has bindings for lots of moose

[14:58] *** vel joined
[14:58] <gaal> you may have been thinking of JSON, [particle]

[14:58] <[particle]> no, syck doesn't support all yaml

[14:59] <[particle]> see the link i just posted -- however it's much more complete than the last time i looked

[14:59] <gaal> yeah, but near enough

[14:59] <[particle]> indeed

[14:59] <gaal> it's not subset in the sense that it's a well defined intentional part of yaml

[14:59] <[particle]> death to yaml! long live syck!

[15:14] *** pdcawley joined
[15:26] *** GabrielVieira2 joined
[15:47] *** Ziggy6 joined
[15:48] *** Ziggy6 left
[15:48] *** Ziggy6 joined
[16:05] *** L0v31n joined
[16:08] *** TimToady joined
[16:10] *** weinig is now known as weinig|away

[16:18] *** buetow left
[16:20] *** nipra joined
[16:30] *** Limbic_Region joined
[16:42] *** L0v31n joined
[16:44] *** weinig|away is now known as weinig

[16:47] *** nipra joined
[16:52] *** VanilleBert joined
[17:10] *** kanru joined
[17:42] *** elmex joined
[18:01] *** xinming_ joined
[18:02] * xinming_ misses audreyt. >_< Can anyone tell me if audreyt is busy with work? <-- Sorry If I resend the message. :-)

[18:04] *** nanonyme joined
[18:08] *** nipra joined
[18:16] *** bernhard joined
[18:35] *** bernhard joined
[18:35] *** nipra joined
[18:35] *** nanonyme joined
[18:35] *** xinming_ joined
[18:35] *** elmex joined
[18:35] *** kanru joined
[18:35] *** VanilleBert joined
[18:35] *** L0v31n joined
[18:35] *** TimToady joined
[18:35] *** Ziggy6 joined
[18:35] *** pdcawley joined
[18:35] *** vel joined
[18:35] *** bonesss joined
[18:35] *** devogon joined
[18:35] *** penk joined
[18:35] *** Odin- joined
[18:35] *** baest joined
[18:35] *** iblechbot joined
[18:35] *** BooK joined
[18:35] *** chris2 joined
[18:35] *** explorer joined
[18:35] *** meppl joined
[18:35] *** theorbtwo joined
[18:35] *** ruoso joined
[18:35] *** sri_ joined
[18:35] *** spo0nman joined
[18:35] *** marmic joined
[18:35] *** Southen joined
[18:35] *** jdv79_ joined
[18:35] *** miyagawa joined
[18:35] *** stevan joined
[18:35] *** Tene joined
[18:35] *** nekokak joined
[18:35] *** scw joined
[18:35] *** [particle] joined
[18:35] *** statico joined
[18:35] *** Patterner joined
[18:35] *** ingy joined
[18:35] *** pjcj joined
[18:35] *** lambdabot joined
[18:35] *** neonse joined
[18:35] *** avar joined
[18:35] *** cognominal joined
[18:35] *** spinclad joined
[18:35] *** lisppaste3 joined
[18:35] *** ofer0 joined
[18:35] *** rafl joined
[18:35] *** DebolazX joined
[18:35] *** cdfh_ joined
[18:35] *** araujo joined
[18:35] *** SamB joined
[18:35] *** rashakil joined
[18:35] *** ashelyb_ joined
[18:35] *** awwaiid joined
[18:35] *** jrigby joined
[18:35] *** mdiep joined
[18:35] *** mako132 joined
[18:35] *** Debolaz2 joined
[18:35] *** diotalevi joined
[18:35] *** mj41 joined
[18:35] *** stef_ joined
[18:35] *** drbean joined
[18:35] *** mr_ank joined
[18:35] *** weinig joined
[18:35] *** Teratogen joined
[18:35] *** prism joined
[18:35] *** Khisanth joined
[18:35] *** silug joined
[18:35] *** ayrnieu joined
[18:35] *** cls_bsd joined
[18:35] *** spoop joined
[18:35] *** jabbot joined
[18:35] *** idiotmax joined
[18:35] *** evalbot_r15141 joined
[18:35] *** svnbot6 joined
[18:35] *** Lorn joined
[18:35] *** jiing_ joined
[18:35] *** jql joined
[18:35] *** Yappo joined
[18:35] *** PerlJam joined
[18:35] *** Juerd joined
[18:35] *** wolverian joined
[18:35] *** lumi joined
[18:35] *** yves joined
[18:35] *** takesako__ joined
[18:35] *** Grrrr joined
[18:35] *** takanori joined
[18:35] *** sonorous joined
[18:35] *** perlbot joined
[18:35] *** glasser joined
[18:35] *** buubot joined
[18:35] *** pasteling joined
[18:35] *** nnunley joined
[18:35] *** broquaint joined
[18:35] *** LCamel_ joined
[18:35] *** Gothmog_ joined
[18:35] *** audreyt joined
[18:35] *** hcchien joined
[18:35] *** jamessan joined
[18:35] *** knewt joined
[18:35] *** Steve_p joined
[18:35] *** dvorak joined
[18:35] *** gaal joined
[18:35] *** gugod joined
[18:35] *** rgs joined
[18:35] *** Maddingu1 joined
[18:35] *** arguile joined
[18:35] *** zgh joined
[18:35] *** felipe joined
[18:35] *** SCalimlim joined
[18:35] *** mtve joined
[18:35] *** Eidolos joined
[18:35] *** tcliou joined
[18:35] *** jrockway joined
[18:35] *** masak joined
[18:35] *** jiing joined
[18:35] *** buu joined
[18:35] *** kcwu joined
[18:35] *** GeJ joined
[18:35] *** cj joined
[18:35] *** kolibrie joined
[18:35] *** revdiablo joined
[18:35] *** greenail_ joined
[18:35] *** nipotaway joined
[18:35] *** clkao joined
[18:35] *** obra joined
[18:35] *** orafu joined
[18:35] *** nothingmuch joined
[18:35] *** Caelum joined
[18:35] *** Shabble joined
[18:35] *** TreyHarris joined
[18:50] *** nferraz joined
[18:56] <nferraz> hello!

[18:56] <nferraz> anybody here working with perl6 in perl5?

[18:56] <ofer0> hey

[19:00] <kolibrie> nferraz: I'm doing a bunch of grammar stuff under v6.pm

[19:01] *** VanilleBert left
[19:03] <nferraz> cool

[19:04] <nferraz> I was trying a simple map...

[19:04] <nferraz> since it didn't work as I expected, I built a small test case...

[19:09] <pasteling> "nferraz" at 194.65.5.240 pasted "map.t (test case)" (22 lines, 325B) at http://sial.org/pbot/22634

[19:18] *** pdcawley joined
[19:20] *** jferrero joined
[19:29] *** weinig is now known as weinig|away

[19:38] *** neonse left
[19:42] *** ashleyb joined
[19:48] *** justatheory joined
[19:55] *** nferraz left
[20:03] *** nipra joined
[20:09] *** neonse joined
[20:11] *** Schwern joined
[20:24] *** kanru_ joined
[20:38] <audreyt> TimToady: S04:93 has this form -- is it archaic?

[20:38] <audreyt>     constant Num PI { 3 }

[20:39] <audreyt> I thought we removed block-init from "has"

[20:39] <audreyt> seems strange to only allow it for constant decl

[20:44] <TimToady> seems somewhat archaic

[20:44] <TimToady> but the block-init of has was '= { 3 }'

[20:45] <TimToady> I think the idea was more that you could put either a block or an = on any declaration.

[20:45] <audreyt> my $x { 123 };

[20:45] <TimToady> but in the case of a sub, it doesn't autocall.

[20:45] *** DHGE joined
[20:45] <TimToady> but I think that was before we had state = FIRST semantics

[20:46] *** cdfh joined
[20:46] <audreyt> right. pseudoassign seems to obsolete this form

[20:46] <TimToady> and it conflicts with hash decl now.

[20:46] <audreyt> yup.

[20:46] <TimToady> so it's dead

[20:47] <TimToady> any feelings on recent design changes?

[20:48] <audreyt> autotokening etc makes sense.

[20:48] <audreyt> a two-level list context seems a little bit bizzare.

[20:49] <audreyt> what happens when you have multislices composed from multislices

[20:49] <audreyt> and you use them in smooth (linear list) context?

[20:49] <audreyt> does it flatten all the way recursively?

[20:49] <TimToady> As far as they're captures, I think.

[20:50] <TimToady> which is one level for ordinary list return, two for mappish things

[20:50] <audreyt> no, what I mean is (probably not Capture related)

[20:51] <audreyt> @@multislice := map { $_, map { $_ * $^moose}, 1..5  }, 1..3

[20:51] <audreyt> does it flatten to 1,2,3,4,5,2,4,6,8,10, ... ?

[20:51] <TimToady> I believe the inner map is flatted by that list context by default

[20:52] <TimToady> unless you chunky it inside

[20:52] <audreyt> ok, so mlist context doesn't propagate

[20:52] * gaal mooses

[20:53] * stevan moves quickly away from gaal and covers his nose

[20:53] <audreyt>     @@multislice := map { $_, $_ * 10 }, 1..3

[20:53] <audreyt>     @@multislice.perl   # ( (1, 10) ; (2, 20) ; (3, 30) )

[20:53] * [particle] thinks stevan should cover his own nose

[20:54] <audreyt> correct?

[20:54] <audreyt> and there's currently no easy way to make three-dimensional literal?

[20:55] <TimToady> sec...

[20:56] <TimToady> sorry, sitting in a tire store getting a tire repaired...

[20:57] <TimToady> using GoogleWiFi that Mountain View provides, yay

[20:57] <audreyt> cool

[20:57] <TimToady> um, isn't (1,2;3,4;5,6) 3-D?

[20:57] <TimToady> @foo[1,2; 3,4; 5,6]

[20:58] <lambdabot> Unknown command, try @list

[20:58] <audreyt> well, in arglists it's 2d...

[20:58] <audreyt> it's 3d when dereferencing

[20:58] <audreyt> yay inconsistency

[20:59] <TimToady> well, my tire's done, so I need to wander on down the road...

[20:59] <audreyt> k

[20:59] <TimToady> thanks

[20:59] <TimToady> pocketa, pocketa, pocketa &

[20:59] <audreyt> maybe we call it a Matrix containing 3 derefs.

[20:59] <audreyt> 3d-slices

[21:00] <audreyt> which is really just a matrix with 3 rows

[21:00] * audreyt ponders "matrix context"

[21:02] <audreyt> in which case

[21:02] <audreyt> sub f (*@_) { ... flattens into Seq ... }

[21:02] <audreyt> sub f (*@@_) { ... nonflattens into Matrix ... }

[21:02] *** bonesss joined
[21:16] *** autark_ joined
[21:29] *** shayx joined
[21:29] *** Schwern joined
[21:32] *** stevan_ joined
[21:37] *** penk joined
[21:45] *** devogon_ joined
[21:59] *** justatheory joined
[22:15] *** miyagawa joined
[22:35] *** dduncan joined
[22:44] * bonesss is away: banho

[23:05] <audreyt> miyagawa: JSON::syck now raises proper exception when passed circular refs

[23:05] *** Psyche^ joined
[23:05] <miyagawa> audreyt: great

[23:05] <audreyt> also I finally effected the license change to MIT

[23:06] <audreyt> which is iirc okay with you, I hope

[23:06] <miyagawa> sure

[23:07] <audreyt> also finally structures like

[23:07] <audreyt> [ $unicode_string, $some_raw_octets ]

[23:07] <audreyt> can be dumped fine in YAML::Syck

[23:07] <audreyt> (the raw octets gets !binary typed and base64 encoded)

[23:07] <audreyt> (with $YAML::Syck::ImplicitBinary)

[23:08] <audreyt> but sadly JSON::Syck has no bytebuffer support

[23:08] <audreyt> so we're still stuck with either/or there

[23:08] *** devogon__ joined
[23:08] <miyagawa> ah

[23:08] <audreyt> limitation of json spec

[23:08] <miyagawa> hmm

[23:08] <audreyt> no support for x'001234ff' literals

[23:08] <miyagawa> 1) dump both as UTF-8

[23:09] <miyagawa> 2) dump bytes as UTF-8 and unicode string as \uXXX?

[23:09] <audreyt> uhm

[23:09] <audreyt> problem is that json has no \xff form

[23:10] <miyagawa> yeah

[23:10] <audreyt> so you can't tell \uff from \xff

[23:10] <audreyt> so it's mostly moot :/

[23:10] <miyagawa> I remember that the spec suggests all bytes should be in UTF-8

[23:10] <audreyt> that I think is what we currently do

[23:11] <audreyt> bbiab

[23:18] * bonesss is back (gone 00:33:43)

[23:21] *** Psyche^ is now known as Patterner

[23:36] *** buetow joined
