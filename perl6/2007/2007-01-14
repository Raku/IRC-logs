[00:02] *** Psyche^ joined
[00:05] *** andara left
[00:06] *** prism joined
[00:18] *** Psyche^ is now known as Patterner

[00:25] *** nekokak joined
[00:44] *** mako132_ joined
[00:47] *** jferrero joined
[00:54] *** lisppaste3 joined
[00:58] *** yaxu joined
[00:59] *** Psyche^ joined
[01:13] *** Limbic_Region joined
[01:16] *** Psyche^ is now known as Patterner

[01:29] *** yaxu left
[01:35] *** Schwern joined
[01:47] *** buubot joined
[01:48] *** mako132_ joined
[02:24] *** mako132_ joined
[02:33] *** takesako__ joined
[02:34] *** buubot joined
[02:46] *** buubot joined
[02:56] *** neonse left
[03:04] *** Schwern joined
[03:04] *** cmarcelo joined
[03:06] *** trym joined
[03:06] *** gnuvince joined
[03:11] *** ayrnieu joined
[03:50] *** pbuetow joined
[04:00] *** ProperNoun joined
[04:11] *** b00t joined
[04:14] *** nipra joined
[04:14] <svnbot6> r15070 | cmarcelo++ | * MO: More stuff for autoboxing (in MO/si.hs), now accepting

[04:14] <svnbot6> r15070 | cmarcelo++ | monadic functions in the mkBoxClass constructor too (via new

[04:14] <svnbot6> r15070 | cmarcelo++ | syntax sugar).

[04:14] <avar> ?eval 1

[04:15] <evalbot_r15069> 1

[04:49] *** spx2 joined
[05:04] *** b00t joined
[05:29] <svnbot6> r15071 | Darren_Duncan++ | ext/Rosetta/ : minor doc edits, and copyright date updates ... nothing worth mentioning in the ChangeLog

[05:30] *** Psyche^ joined
[05:39] *** pbuetow joined
[05:45] *** Psyche^ is now known as Patterner

[06:14] *** BooK_ joined
[06:30] *** leed joined
[06:38] *** luqui joined
[06:45] *** rhizo joined
[07:07] *** trym joined
[07:12] *** nipra_ joined
[08:02] *** dduncan left
[08:07] *** nipra_ is now known as nipra

[08:33] *** Hgud is now known as greenslap

[08:56] *** elmex joined
[08:58] *** iblechbot joined
[09:15] *** miyagawa joined
[09:18] *** trym joined
[09:20] *** AlexLibman joined
[09:32] *** andara joined
[09:48] *** daddye1 joined
[09:48] <daddye1> hello

[09:49] *** daddye1 left
[10:30] *** andara joined
[10:41] *** sunnavy joined
[10:42] *** spx2 joined
[10:50] *** sunnavy joined
[11:14] *** sunnavy joined
[11:49] *** sunnavy joined
[11:52] *** GabrielVieira joined
[11:59] *** elmex joined
[12:25] *** iblechbot joined
[12:26] *** GabrielVieira2 joined
[12:31] *** larsen_ joined
[12:33] *** andara joined
[12:36] *** chris2 joined
[12:37] *** CardinalNumber joined
[12:52] *** dmq joined
[12:59] *** ozo joined
[13:10] *** neonse joined
[13:22] *** buetow joined
[13:27] *** buetow joined
[13:31] *** ProperNoun joined
[13:38] *** trym joined
[13:43] *** trym_ joined
[14:00] *** bernhard joined
[14:13] *** Limbic_Region joined
[14:39] *** nipra joined
[15:01] *** nipra_ joined
[15:23] *** jan joined
[15:27] *** spx2 joined
[15:47] *** jan joined
[15:53] *** xinming_ joined
[16:00] *** nipra_ is now known as nipra

[16:18] *** spx2 joined
[16:19] *** spx2 joined
[16:27] *** spx2 joined
[16:51] *** spx2 joined
[16:52] *** spx2 joined
[16:53] *** spx2 joined
[16:54] *** spx2 joined
[17:01] *** spx2 joined
[17:02] *** andara joined
[17:04] *** spx2 joined
[17:05] *** spx2 joined
[17:11] *** glasser joined
[17:15] *** spoops joined
[17:17] *** marmic joined
[17:26] *** luqui joined
[17:43] *** cmarcelo joined
[17:45] *** zekvent joined
[17:52] *** weinig|bbl is now known as weinig

[17:54] *** ktne joined
[18:10] *** ludan joined
[18:14] <ktne> hello

[18:14] <ktne> is there any IDE supporting perl6 for win32?

[18:17] <cmarcelo> ktne: Not exactly what you're asking, but there are Perl 6 syntax files for Emacs and VIM.

[18:18] <ktne> hmm, i was thinking more about something like integrated debugger and such

[18:18] <ktne> and not emacs :)

[18:24] *** weinig is now known as weinig|food

[18:29] *** Vex joined
[18:34] <svnbot6> r15072 | kudra++ | The summary

[18:52] *** rdice joined
[18:56] *** luqui joined
[18:56] *** luqui_ joined
[19:04] *** ozo joined
[19:07] *** [particle] joined
[19:10] *** weinig|food is now known as weinig

[19:33] *** elmex joined
[19:40] *** araujo joined
[19:51] *** ProperNoun joined
[20:06] *** mncharity joined
[20:12] *** mncharity is now known as putter

[20:14] *** Limbic_Region joined
[20:30] *** justatheory joined
[20:34] <putter> anyone around?

[20:34] * putter looks for insight into "the path to Christmas"

[20:35] * allbery_b is around but not useful for that question

[20:36] <allbery_b> (in any sense...)

[20:37] * Limbic_Region is far too around

[20:38] <putter> allbery_b: hi.  are you a perl person?  haskell?  p6? ;)

[20:38] * Limbic_Region shudders to think of how much weight he has gained since getting married

[20:38] <putter> hi LR

[20:38] <Limbic_Region> salutations putter

[20:38] <allbery_b> I've done a little bit of stuff with p6 and am learning haskell.  wouldn't have a clue about roadmaps or etc.

[20:39] <putter> I'm trying to figure out what the state of the (p6) universe is...

[20:39] <allbery_b> ...and have been reticent abotu touching the tree because I don't really know what's up with mp6/kp6/etc. (i.e. is the haskell tree now a lame duck?)

[20:40] <Limbic_Region> putter - from what perspective, spec or implementation or some other vantage point all together?

[20:40] <putter> allbery_b: (potential developer survey:)  do you have a commit bit?  if you had say an hour to do some coding, any idea where you would look for tasks to do?

[20:41] * Limbic_Region knows the answer to that

[20:41] * Limbic_Region keeps silent until asked though

[20:41] <putter> LR: big picture project management

[20:41] <Limbic_Region> putter - I think this xmas is the xmas

[20:42] <Limbic_Region> the spec is converging more rapidly

[20:42] <putter> allbery_b: re "...and[...]duck?", very useful observation

[20:42] <Limbic_Region> putter - but I think you should likely be talking to someone from any(@Larry)

[20:43] * allbery_b honestly doesn't know

[20:43] <putter> sounds like the "don't worry about breaking the tree" property doesn't exist anymore?

[20:43] <allbery_b> mp6 and kp6 are steps somewhere in making perl6 self-booting.  is the haskell version part of that chain, or just aprimordial botstrap that will be discarded?  I've never known

[20:44] <lumi> I think the tree is Audrey-insured, less Audrey means less tree breaking

[20:44] <allbery_b> or are haskell-pugs and mp6 and/or kp6 parallel tracks?

[20:44] <putter> lumi: makes sense

[20:44] <Limbic_Region> allbery_b no one is putting all their eggs in one basket

[20:45] <lumi> So afaict mostly there's just fglock moving [mk]p6 along

[20:45] <lumi> atm

[20:45] * Limbic_Region AFK &

[20:45] <putter> tnx LR

[20:46] <putter> lumi: hmm...

[20:46] <lumi> One thing I thought about touching is the 1..10:by(5) parsing, but I don't know enough to do it

[20:46] <putter> allbery_b: any other "things you've wondered about"?

[20:47] <allbery_b> not really; been concentrating on becoming more proficient in haskell

[20:47] <putter> k

[20:47] <putter> lumi: it's haskell side?

[20:47] <lumi> Yeah, the haskell parser

[20:48] <putter> any idea the state of Moose?

[20:48] <allbery_b> I did poke at the parser a bit (misparsing of file tests) a couple months ago, swing and a miss, decided I needed to understand what was going on better first --- hence the focus on haskell

[20:49] <putter> ah...

[20:49] <allbery_b> (specifically:  "- f" is parsed as "-f" currently, because the guts of the parser ignore whitespace)

[20:50] <lumi> I don't know about Moose, I think stephan, nothingmuch and gaal are prime vict^Winterviewees for that

[20:50] <putter> :)

[20:50] <lumi> allbery_b: Where does this happen? test? I can have a look?

[20:51] <allbery_b> there's a test for it at the bottom of the file tests, yes.  what happens is that when a '-' is seen it goes back to check for file test ops, but reenteringt he parser discards leading whitespace.  I wasn't able to figure out how to avoid it

[20:52] * allbery_b no longer recalls the chain of calls he was playing with that handled filetest parsing

[20:54] <putter> one possibility might be to move it to p6 side.  sub prefix:<-f>(mumble){Pugs::Internals::filetest_f(mumble)} or

[20:54] <putter> some such.

[20:55] <putter> checking to see if (1) the p6 version works, and (2) it still works if placed in the Prelude.

[20:55] <allbery_b> Pugs/Parser/Operator.hs

[20:56] <allbery_b> the actual problem is that the parser beng used is following haskell rules, so e.g. "-f" can't be parsed as a single symbol --- Haskell doesn't permit punctuation and word characters to be combined in a symbol.  (This is also the root cause of Haskell's odd parsing wrt negative numbers.)

[20:56] *** Aankhen`` joined
[20:57] <allbery_b> so the low level lexical analysis sees e.g. "-f" and returns the "-", another token must be read to get the "f" and whitespace will be discarded automatically when that is done

[20:58] * allbery_b could try switching the low level stuff to use different rules but is terrified of what that might break...

[20:59] <allbery_b> since it can'

[20:59] <allbery_b> t be done on a case-by-case basis easily.  although if I've picked up enough haskell and parsec guts it might be possible to come up with a special case

[21:11] * putter wonders if it would help to have one day a week which is _the_ day for pugs development.  some time when one can count of everyone being available.

[21:12] *** andara joined
[21:13] <allbery_b> right, Pugs/Lexer.hs, definition of "symbol" needs a special case for first character (only!) being '-', followed by a letter, followed by a non-word character of some kind.

[21:13] <allbery_b> I might actually be up to that now...

[21:13] <lumi> Oh, I see

[21:13] <allbery_b> note that the existing special casing works anywhere inside a "token" as far as I can tell

[21:13] <lumi> Are you doing that?

[21:14] <allbery_b> not yet, I've just been retracing my tracks

[21:14] <avar> When I do \x00..\x1f in rule {} will that always mean that range in ascii?

[21:14] <lumi> It does say "horrible, horrible kluge"

[21:14] <lumi> But I don't understand the bit about prec levels

[21:16] *** weinig is now known as weinig|bbl

[21:16] <gaal> uh, what is this -f whereof you speak? I don't think it means the same thing as it did in p5

[21:16] <lumi> gaal:  No?

[21:16] <gaal> anyway: the convention is ruleX is a token parser (ie, takes following whitespace), whereas verbatimX does not.

[21:17] <gaal> there was a thread on this subject on p6 with a lot of contention, but it ended with a ruling

[21:17] <gaal> unfortunately, i remmeber neither the actual ruling nor the title of the thread :)

[21:18] <lumi> makeOp1 in Pugs/Parser/Operator.hs for those following at home

[21:18] <lumi> It parses the "-" as a token, and then tries to parse which filetest it is if any

[21:18] <lumi> So it will have eaten the whitespace already

[21:19] <cmarcelo> putter: did you heard of parrot the (montly) Parrot Bug Day? maybe something like that for the rest of p6 (pugs, mp6, etc) would be what you want...

[21:19] <lumi> symbol has neither "ruleX" nor "verbatimX" form

[21:19] <gaal> yeah, that's a parsec-originated combinator

[21:21] <lumi> But it can't be right there.. -X should be a token

[21:21] <allbery_b> that's far too late

[21:21] <allbery_b> the damage is done when name <- symbol returns the "-"

[21:21] <gaal> I still think -X doesn't work like it did in p5

[21:21] <lumi> Exactly

[21:22] <allbery_b> symbol needs to recognize the filetest ops itself,m which will also fix the (broken) "horribe, horrible kluge"

[21:22] <gaal> partly because Larry wanted to avoid the special moose

[21:23] <gaal> zz&

[21:23] <lumi> I think it isn't symbol's job

[21:23] * allbery_b is hacking Pugs/Lexer.hs:symbol to parse '-' + letter + nonletter

[21:23] <lumi> Night gaal

[21:23] <allbery_b> but if you dont' do it in symbol then whitespace will be able to intervene

[21:23] <gaal> I think you should find the spec :) re-z&

[21:24] <lumi> I think special-casing before running deciding what to run symbol on would be better

[21:24] <allbery_b> the filetest ops break the assumption that a punctuation character follwoed by a word character makes two tokens

[21:24] <putter> cmarcelo:  i had not heard.  interesting idea.  the motivation is that as people (eg, audreyt) have less time available, rather than scattering through calendar time, and things bogging down, perhaps it could be concentrated, providing normal, albeit 1/7 speed, progress.

[21:24] <allbery_b> and symbol is already filled with special cases of that variety...

[21:25] <lumi> allbery_b: My reading of symbol is, it will parse any string you give it, and then check whether there's a boundary

[21:25] <allbery_b> yeh

[21:26] <lumi> Asking symbol to parse "-" and having it return "-f" instead might break things

[21:26] <allbery_b> which is where it breaks as '-' followed by a word character is a break by its rules

[21:26] <allbery_b> so that has to be suppressed

[21:26] <lumi> allbery_b: Because makeOp1 asks it to parse "-"

[21:26] <allbery_b> hm, it shouldn't be

[21:26] <lumi> But makeOp1 knows it's doing something iffy, because it checks in lookAheadLiterals for the "-" case

[21:27] <allbery_b> no, makeOp1 passes it e.g. "-f".  symbol decides that that doesn't make sense because it's punct followed by word and returns "-"

[21:27] * allbery_b went through that last time he did this

[21:27] <allbery_b> hence the horrible hack

[21:27] <lumi> Are you positive? That's not what it looks like to me

[21:28] <allbery_b> I banged my head against it for close to a week last time before I worked it out.

[21:28] <putter> or some other pattern instead of once a week.  say particular hours on MWFSS?

[21:28] <allbery_b> the "name" parameter to makeOp1 is the full operator, e.g. "-f"

[21:28] <lumi> The hack specifically asks whether the parameter name, which is passed to symbol, is *exactly* "-"

[21:28] <allbery_b> and that's what is passed to symbol

[21:28] <allbery_b> and symbol parses that, then decides it makes no sense and returns "-"

[21:29] <allbery_b> which si then trapped and the parser is reentered to get the rest of the operator name, but than eats whitespace

[21:29] <allbery_b> because symbol checks for punct followed by word and says "wait, that can't be a single token"

[21:29] <allbery_b> and returns the punct

[21:30] *** luqui joined
[21:30] <lumi> name is a parameter for makeOp1; it's passed to symbol, which tries to parse that string, making sure there's a word boundary, and then passes it to, er

[21:30] <lumi> It doesn't pass it (sorry) it returns it but it's ignored

[21:31] <lumi> symbol first of all parses all of the string, and then compares the next character to the string's last character

[21:31] <lumi> It doesn't look inside the string at all other than that

[21:33] * allbery_b sighs

[21:34] <lumi> allbery_b: Where in symbol do you see it looking inside s?

[21:34] <allbery_b> so, I'm back to being thoroughly confused as to how file test ops are parsed at all

[21:34] *** ruoso joined
[21:34] <lumi> I'm confused too why makeOp1 gets "-" as the name

[21:34] <cmarcelo> putter: what's MWFSS (mon wed fri sa su)?

[21:34] <allbery_b> or perhaps I should say "why does it bother to define them as operators since the claim is that it never *parses* them as operators, but only a shacks appended to "-"?

[21:35] <putter> cmarcelo: yes

[21:35] <lumi> I think just moving the "Are we in '-'?" check to outside the call to symbol might make things better

[21:36] <allbery_b> oh, *that's* what the comment means

[21:37] <allbery_b> unary '-' has hgher precedence than filetest ops, I think, so it wins

[21:37] <lumi> What does it mean?

[21:37] <lumi> Oh..?

[21:38] <allbery_b> basically when it's parsing it recognizes '-' before e.g. '-f'

[21:38] <luqui> you could do a negative lookahead... that's ugly though

[21:39] <allbery_b> but once again that leads back to symbol, because it eats trailing whitespace immediately

[21:40] <cmarcelo> putter: I think starting simpler (with a day or weekend) like Parrot maybe a good way to measure if this "arrangement" will work.. IMHO, as important as this is try to keep STATUS/TASKS files (or their substitutes) more "alive"..

[21:40] <allbery_b> so you can't check for it after it's parsed '-'

[21:40] <luqui> allbery_b, well, you could "try" before parsing the -

[21:40] <putter> cmarcelo: agreed and agreed

[21:40] <luqui> btw, what parser are we talking about?

[21:40] <lumi> That wouldn't uneat the whitespace

[21:41] <allbery_b> luqui: no, we'd need a custom case to parse with char '-' instead of with symbol, because with symbol we can never learn tif there is followeing whitepsace or not

[21:41] <lumi> Okay, I have some kinda something

[21:42] <lumi> Where do we nopaste?

[21:42] <luqui> allbery_b, oh, I see the problem.  you're having trouble with automated parser generation

[21:42] <allbery_b> the parser in question is Pugs/Parser/Operator.hs, where filetest ops currently don't parse quite right ("- f"is parsed as th filetest op "-f")

[21:42] <luqui> i mean, given a list of operators, parse them

[21:43] <luqui> this is inside a OPP parser, not a top-down, right?

[21:43] <luqui> (well, the OPP is inside the top-down)

[21:44] *** larsen_ joined
[21:44] <allbery_b> erm, tis is not debugging a parser written in pugs; this is debugging pugs' own parser

[21:44] <luqui> hmm, that's weird; doesn't look like it should do that

[21:44] <lisppaste3> lumi pasted "Some kind of fix?" at http://paste.lisp.org/display/35292

[21:45] * luqui understands

[21:45] <lumi> Does this look vaguely correct?

[21:45] <allbery_b> not sure.  I was angling toward ``char '-''' though which amoutns t the same thing (except possibly safer, haven't checked to see if string eats whitespace like symbol does)

[21:46] <lumi> It doesn't

[21:47] <lumi> It's Parsec's string

[21:47] <allbery_b> oh wait, that's not going to work anyway

[21:47] <lumi> What isn't?

[21:47] <cmarcelo> lumi: what the guard C<< | "-" <- name = >> means? (right in the beginning of lookAheadLiterals defition)

[21:47] <lumi> cmarcelo: It's a pattern guard, and it was already there

[21:48] <allbery_b> the problem is that "-f " or "-f(" should be a filetest op, but "-foo" should be the value of "foo" negated

[21:48] *** CardinalNumber joined
[21:48] <allbery_b> although the existing code might deal with that properly

[21:49] <lumi> allbery_b: You're right, my fix is wrong

[21:49] <lumi> m

[21:49] * luqui can understand why it might misparse "-foo"

[21:49] <luqui> but not why it would misparse "- f"

[21:49] <lumi> Possibly not? parseFileTestOp checks the following

[21:50] <lumi> luqui: It tries to parse "-", kills any whitespace, then comes back to us

[21:50] <luqui> oh, I can see how it might do that

[21:50] <lumi> Where we try to see if it's a filetest

[21:50] * allbery_b is trying it anyway just to see what breaks, but seems to recall something like that causing passive parse breakage

[21:50] <lumi> allbery_b: No, I think my fix *is* right

[21:51] <allbery_b> er, *massive* parse breakage

[21:51] <lumi> Haha

[21:51] <lumi> I was wondering about that passive breakage :)

[21:52] <lumi> Okay, I've got to go

[21:52] <lumi> zz&

[21:55] * allbery_b sighs as pugs decides it must rebuild the known universe --- this gonna be slow

[21:55] *** jferrero joined
[21:58] *** Aankhen`` joined
[21:58] <cmarcelo> considering C<name> is a String in makeOp1, anyone knows what does << "-" <- name >> means?

[22:01] *** larsen__ joined
[22:02] <allbery_b> ``| val <- expr'' is a pattern match guard

[22:03] <allbery_b> the val is actually a pattern, if the pattern matches the guard succeeds

[22:03] <luqui> cmarcelo,  it means if name == "-"

[22:03] <allbery_b> except it's faster because it uses a pattern match

[22:03] <luqui> i.e.  | "-" <- name = foo   -- returns foo if name == "-"

[22:03] <allbery_b> (and you can use other pattern matching tricks but the code in question doesn't)

[22:04] <allbery_b> *sigh* right, I'd svn up'd.  this is going to take forever

[22:04] <allbery_b> (g4 macmini...)

[22:05] <cmarcelo> Thanks, I see know. I didn't knew this syntax, my head was focused on "<-" as monadic sugar only..

[22:06] <luqui> allbery_b, aye, I had a g4 two years ago at the hackathon

[22:06] <luqui> it was unreasonable to do pugs development on it

[22:06] <luqui> I ended up sshing to audreyt's machine

[22:07] <allbery_b> pattern match guards are an extension, IIRC, so you might not have runinto them

[22:07] <luqui> yeah, not part of haskell 98

[22:07] <allbery_b> (in fact I googled and got SPJ's paper intoducing the extension)

[22:09] <cmarcelo> Yep, it's an extension, for GHC it's described in User Guide, section 7.3.2.

[22:10] <allbery_b> it's actually related to <- syntax in do, btw, since that is also a pattern match

[22:10] <allbery_b> (which invokes "fail" if the pattern doesn't match)

[22:12] <allbery_b> it's just that in most cases it's used in the trivial case x <- expr which will never fail

[22:14] <cmarcelo> They are related but in Pattern Guards both side have the same type, while in list comprehensions (and do-notation), that's not the case..

[22:15] <cmarcelo> That was confusing to see at first time.

[22:15] <luqui> cmarcelo, well, it's almost the case.  pattern guards you have a <- a; do notation and list comprehensions you have a <- m a

[22:15] <luqui> they still have to match; there's just an "m" in front sometimes :-)

[22:16] <cmarcelo> :)

[22:22] <cmarcelo> the problem with today's code is that it parses "- f " as being -f operator and it should instead parse as being "f" negated? or there are more problems?

[22:23] <allbery_b> that's the problem, there's already a parse test for it

[22:23] <allbery_b> I tried to attack it a couple months ago, and decided I needed to learn more haskell first

[22:23] <allbery_b> so I've been poking at it again (nd re-confusing myself over the slightly bizarre interactions in lexing and parsing)

[22:25] <cmarcelo> where in t/ is the test for this?

[22:29] <allbery_b> syntax/parsing/filetest.t

[22:29] <allbery_b> (sorry, machine being hammered flat by pugs compile :)

[22:32] <cmarcelo> tks.

[22:39] *** Dana77 joined
[22:39] *** Dana77 left
[22:41] <cmarcelo> allbery_b: why would the propose fix misparse "-foo", or it's just speculation?

[22:41] <cmarcelo> *proposed

[22:41] <allbery_b> just speculation

[22:42] <allbery_b> I added some tests to the local t/syntax/parsing/filetest.t to check for it, when the build finishes (someday...)

[22:43] <cmarcelo> ok. (reading here I didn't get why it would fail)

[22:44] *** trym__ joined
[22:46] <allbery_b> basically, for the same reasn "- f" does:  because something might recognize an identifier first (although it arguably "shouldn't")

[22:47] * allbery_b is just being paranoid because the parser keeps confusing him every time he tries to untangle it

[22:49] <cmarcelo> (I tried here and I'm getting the << Unexpected " f" >>)

[22:52] <cmarcelo> looks like, if it's not a file operator, we need to consume the whitespace as the rest of code was expecting..

[22:54] <putter> I'm trying to understand p6 project bottlenecks.  Ie, a partial answer to "why isn't p6 done yet?".

[22:55] *** larsen_ joined
[22:55] <putter> Anyone have thoughts?

[22:55] <cmarcelo> allbery_b: actually I missed a "whiteSpace" call in the original fix.. re-testing

[22:56] <putter> Actually, a better motivating questions is "why isn't p6 progressing more rapidly?".

[22:56] <allbery_b> "because audreyt is the motivator and she's being attacked by real life(tm)"?

[22:57] <allbery_b> well, not really

[22:57] <putter> one thing mentioned has been lack of transparency and out of date task lists, leading to people not knowing what to do and drifting off.

[22:57] <allbery_b> there's a fair amount of work going on, but it's all in mpp6 and kp6 which are self-bootstrapping perl6 compilers

[22:58] * allbery_b suspects a certain part of it is just that haskell's a pretty formidable bar to participation

[22:58] <putter> allbery_b: re audreyt, it does definitely look like total commits tracks audreyt's commits, with the largest excursion being the p5/js backends, which eventually again blocked on availability of audreyt.

[23:00] <putter> audreyt availability == "free time" given past lack of success in finding a way to give her $3k/mo to work full time.

[23:01] <cmarcelo> allbery_b: the fix worked here for the cases mentioned..

[23:01] <putter> Is the above widely know do you think?  p6 progress rate ~~ audreyt time available == audreyt's "free time" because we can't find measly funding?

[23:02] <allbery_b> well, I'd also claim it's an indication that we need an @Audrey

[23:02] <putter> lol :)

[23:03] <cmarcelo> note that, while haskell maybe a barrier for some participators ("bar" means that, right?), it captured people from Haskell/Functional world to participate...

[23:03] <allbery_b> close enough.  (think pole vaulting)

[23:04] <allbery_b> actually the haskell world credits pugs with bringing more people into haskell

[23:04] <putter> cmarcelo, allbery_b: were you already aware of the "can't find $3k/mo, so no FT audreyt" concept?

[23:05] * putter wonders whether it needs to be more widely known.  which might fix it.

[23:05] *** trym___ joined
[23:05] * allbery_b was not specifically aware but is not especially surprised

[23:05] <allbery_b> gnome started moving much faster when there were people paying developers

[23:06] <cmarcelo> putter: I was aware of the correlation, not the specifics. Did she "self-funded" her participation last year?

[23:06] <putter> cmarcelo?

[23:06] <putter> yes

[23:07] <putter> I'm not sure how much % time that represented.

[23:07] <putter> It also seems to perhaps over-extend her a bit?  maybe.

[23:08] <putter> what would an @audreyt look like.

[23:08] <putter> I don't have a clear idea of how @Larry works.

[23:08] <cmarcelo> putter: sorry, i didn't get (understand) your two last messages..

[23:08] <cmarcelo> three

[23:08] *** nelhage joined
[23:09] <putter> Which was going to be another question.  Regards what are bottlenecks in getting the spec written.

[23:09] <putter> cmarcelo: you know the @Larry concept/

[23:09] <putter> err, concept?

[23:10] <cmarcelo> putter: I don't know much, but looks like the spec was getting lots of feedback/corrections/etc from pugs effort itself ("let's try use and see what happens")..

[23:10] <allbery_b> basically we need more than one person who understands the code well enough to not only work on it, but also help othrs work on it

[23:10] *** jisom joined
[23:10] <cmarcelo> putter: no.

[23:11] <allbery_b> one person is a serious bottleneck not only when that one person doesn't have time, but if that quake a coupel weeks ago had been farther north then pugs might be in serious trouble right now

[23:11] * putter googles...

[23:11] <cmarcelo> putter: (sorry, i'll google it..)

[23:11] <allbery_b> larry was "executive director" for perl <= 5.  for perl6 the job has been spread out, hence @Larry

[23:12] <putter> not something google is good at :/

[23:12] <allbery_b> it's mentioned somewhere in the perl6 web pages IIRC

[23:12] <cmarcelo> re @Larry: I think I get the idea..

[23:13] <putter> allbery_b: are all(@Larry) equivalent?  or are they specialized?

[23:13] *** lisppaste3 joined
[23:13] <allbery_b> http://dev.perl.org/perl6/people.html is a start

[23:13] <lambdabot> Title: Who's Who in Perl 6, parrot, & Pugs - perl6

[23:15] <putter> so it sounds like "specialized, maybe"

[23:16] <allbery_b> looks like it

[23:16] <allbery_b> I'm not sure what part of that set is actually "@Larry", might just be Larry & Damian

[23:16] <cmarcelo> I agree with you that more people with "project global understanding" would help. In a sense, STATUS/TASK works as a Stub for these people presence... (makes sense?)

[23:16] <allbery_b> (larry's probably gonna come back and thwack me for being a clueless yutz :> )

[23:17] <putter> makes sense

[23:17] <allbery_b> complicating things is that ther's perl6, then there's pugs and parrot

[23:18] <putter> I'm not actually sure whether *anyone* has "project global understanding" at this point, except maybe audreyt.

[23:18] <putter> :/

[23:18] <allbery_b> in terms of pugs, that's likely correct

[23:18] <allbery_b> hence my @Audrey comment

[23:18] <cmarcelo> A question: is someone helping fglock with mp6/etc?

[23:19] <putter> good question

[23:19] <allbery_b> no idea, really; I know there's activity but don't know who's been involved (as I said, I've mostly been concentrating on haskell skills)

[23:20] <putter> re what is determining the pace at which the spec matures.  one factor is pugs serves as a forcing factor.  anything else?

[23:21] <putter> If Larry had a FT p6 job, would the spec mature N times faster?

[23:21] <allbery_b> pugs; parrot; people noticing things in the spec and asking questions, leading to discussion on the p6 list (quite a lot of activity in the smart matching spec recently due to that)

[23:22] <putter> So speed pugs by N, and spec'ing speeds by N?

[23:23] <allbery_b> or speed parrot by N --- seems to me from the weeklies that there's a fair amount of activity over there currently

[23:23] <cmarcelo> putter: when we have pugs 6.28 (are you aware of this version numbering milestones for pugs?), probably the specs on Objects et al will get more discussion...

[23:24] <putter> aware.  though I've never been too clear on how much we are using them, or how useful they are...

[23:26] <putter> the last? release was said to be the one just prior to overhauling the AST.  did the ast overhaul actually happen?  or did audreyt run low on tuits?

[23:27] <cmarcelo> I asked about mp6 because with an updated STATUS/TASKS, and more people knowing what's going on it would be easy to point someone what to do for helping, even not knowing details.. Today we just point the person to fglock (for example) or to the code, which isn't enough sometimes...

[23:27] <putter> indeed

[23:28] <putter> hmm, there is a little utility app.  something which grovels over the irc log and summaries when the best time to catch someone here is.

[23:29] <putter> has nothingmuch or anyone been working on the p6 compiler?

[23:30] * putter contemplates adding an "Availability" subsection to the Implementations section of http://en.wikipedia.org/wiki/Perl_6

[23:31] <cmarcelo> (what's "tuits"?)

[23:31] <putter> "get to it"s

[23:31] <putter> "tuit" - a unit of available effort

[23:31] <allbery_b> 'round tuits' in the circles I normally hang out in

[23:32] <putter> "get a round to it"

[23:32] <allbery_b> yep

[23:33] *** Aankhen`` joined
[23:33] <putter> erps, that should have been  "get around to it" ->  "get a round toit" -> "get a round tuit"

[23:33] <putter> sigh

[23:34] <cmarcelo> AST overhaul is related to MO, which even has a bootstrap plan (docs/notes/mo-boo*), which I'm trying to help getting done, but the lack of global understanding is "holding" me a bit.. (we translated nothingmuch's MO to Haskell at YAPC::SA and imported the code to pugs tree) 

[23:34] <putter> there's another whole angle of people not appreciating how significant p6 is computer science wise.  but that doesn't seem to be the bottleneck just now.

[23:34] *** perlbot joined
[23:35] * putter looks at mo...

[23:35] <cmarcelo> hehe, thanks for the "tuits" explanation :)

[23:37] <cmarcelo> right now I'm "playing" with autoboxing stuff (at src/MO/si.hs -- but watchout because the code is a little messy)

[23:38] *** penk joined
[23:39] <putter> are gaal and iblech around much lately?

[23:40] <putter> actually, a better question,

[23:40] <allbery_b> gaal was around earlier

[23:40] <allbery_b> dunno about activity

[23:40] <cmarcelo> putter: since looks like you're collecting suggestions => lots of people seem to miss pugs.blogs.com posts (i don't know how this affects outsiders, since there are weekly reports of the mailing lists).

[23:41] <cmarcelo> They called people's attetion for some aspects, "capturing" people interested in this aspects to contribute..

[23:42] <putter> good suggestion.  I think there was an effort to get more people than just audreyt to post, but I'm not sure it gelled.

[23:42] <cmarcelo> allbery_b: did your compilation finished?

[23:42] <allbery_b> yes, I'm running full test suite now

[23:43] <cmarcelo> Mark Stoberg(?) posted very nice things there for a while..

[23:43] <allbery_b> although I'm wondering what missing whiteSpace you noticed earlier, suggesting I'll trip over the same issue

[23:43] * putter notices p6 has two wikis at the moment.  one spammed.

[23:44] *** bsb joined
[23:44] <putter> so how does the MO stuff fit into the project...?   MO permits X which permits Y which....?

[23:44] <cmarcelo> allbery_b: I think was my mistake. The whiteSpace is only needed inside the C<< "-" <- name >> case.. (which the fix have)

[23:46] <allbery_b> ahhh, first breakage found

[23:46] <allbery_b> pointy blocks

[23:47] <cmarcelo> putter: as I understand, MO gives a framework to implement OO/meta-OO stuff. Which means getting pugs 6.28 release. But the integration between MO code and Pugs isn't that clear for me (even with the notes/mo-boo* file) :P

[23:47] *** jisom joined
[23:48] *** rhizo joined
[23:48] <cmarcelo> allbery_b: which test? (for example)

[23:49] <allbery_b> t/blocks/statement_control.t parse error at line 7 is the first one I noticed

[23:53] *** sonorous joined
[23:59] * allbery_b observes that looking fr an operator called "->" in haskell source is not especially rewarding...

