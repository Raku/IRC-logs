[00:01] <mncharity> fglock: re reorganizing, great.  if you ever want to reorg Common, feel entirely free.  I keep meaning to move my stuff there to Aside/.

[00:01] <stevan_> hey mncharity 

[00:01] <mncharity> hi steven_ :)

[00:01] <stevan_> hows things with you

[00:01] <fglock> heh - no, I'm just trying to keep v6/ usable

[00:01] <mncharity> pictured jumping mooses, and though of you

[00:02] <stevan_> :)

[00:02] <stevan_> fglock: where is the talk?

[00:02] <mncharity> re heh, ah, ok

[00:02] <fglock> hmm - it's in Portuguese

[00:03] <mncharity> re things, I'm still in jobsearch avoidance mode (like thesis avoidance but more expensive).  Helping out with One Laptop Per Child.

[00:03] <avar> mncharity: what are you doing there?

[00:04] *** araujo left
[00:05] *** theorb joined
[00:05] <mncharity> avar: I want to say random application development.  But since I got an actual box, it seems I spend more time on testing and doing bug reports.  The rest on wiki work, especially regards running stuff in emulation.

[00:06] *** Notrix left
[00:06] <mncharity> mass production nominally starts in a couple of weeks.  so there's rather a push to get things nailed down.

[00:07] <mncharity> spent a week or two generating static slices of wikipedia.

[00:10] <pugs_svnbot> r18412 | fglock++ | [kp6] re-add lib-kp6-mp6-p5 temporarily, until evalbot gets @LIB fixed

[00:10] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18412

[00:10] <lambdabot> Title: Changeset 18412 - Pugs - Trac

[00:10] <mncharity> http://wiki.laptop.org/   http://wiki.laptop.org/go/OLPC_Peru/Arahuay  http://wiki.laptop.org/go/Software_components http://wiki.laptop.org/go/Emulating_the_XO http://wiki.laptop.org/go/Current_events http://xogiving.org/ http://wiki.laptop.org/go/Test_issues #olpc #sugar #olpc-content

[00:11] <lambdabot> Title: The OLPC Wiki - OLPCWiki

[00:11] <fglock> kp6: "ping?"

[00:11] * mncharity wonders what lambdabot is going to make of that...

[00:11] <exp_evalbot> r18412: OUTPUT['ping?'␤]

[00:11] <fglock> kp6: my $a = gather { while 1 { take 123; take 456; } }; say $a[3]

[00:11] <exp_evalbot> r18412: OUTPUT[456␤]

[00:12] <fglock> mncharity: that's the current "Perl 6 in Perl 6"

[00:12] <mncharity> :)

[00:12] <mncharity> kp6: ...hmm...

[00:12] <exp_evalbot> r18412: OUTPUT[syntax error at position 0, line 1 column 0:␤...hmm..␤^ HERE␤]

[00:12] <mncharity>  /me tries to remember how to print all globals...

[00:13] <fglock> kp6: say %*ENV

[00:13] <exp_evalbot> r18412: OUTPUT[HOME     /home/evalbot␤LOGNAME     evalbot␤SHLVL     2␤LESSCLOSE       /usr/bin/lesspipe %s %s␤_       /usr/bin/perl␤PATH        /usr/local/bin:/usr/bin:/bin:/usr/games␤LS_COLORS

[00:13] <exp_evalbot> ..no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lz...]

[00:15] <mncharity> kp6: Int, Num, Complex, Rat, Str, Bit, Regex, Set, Junction, Code, Block, List, Seq;

[00:15] <exp_evalbot> r18412: OUTPUT[syntax error at position 3, line 1 column 3:␤Int, Num, Complex, Rat, Str, Bit, Regex, Set, Junction, Code, Block, List, Seq␤   ^ HERE␤DISPATCH: calling APPLY on invalid object:$VAR1 = {};␤␤ at lib-kp6-mp6-p5/KindaPerl6/Runtime/Perl5/MOP.pm line 33␤   main::DISPATCH('undef', 'APPLY')

[00:15] <exp_evalbot> ..called at - line 16␤]

[00:15] <mncharity> kp6: foo(Int, Num, Complex, Rat, Str, Bit, Regex, Set, Junction, Code, Block, List, Seq);

[00:15] <exp_evalbot> r18412: OUTPUT[DISPATCH: calling APPLY on invalid object:$VAR1 = {};␤␤ at lib-kp6-mp6-p5/KindaPerl6/Runtime/Perl5/MOP.pm line 33␤   main::DISPATCH('undef', 'APPLY') called at - line 16␤]

[00:15] <mncharity> kp6: Str

[00:15] <exp_evalbot> r18412: OUTPUT[DISPATCH: calling APPLY on invalid object:$VAR1 = {};␤␤ at lib-kp6-mp6-p5/KindaPerl6/Runtime/Perl5/MOP.pm line 33␤   main::DISPATCH('undef', 'APPLY') called at - line 16␤]

[00:16] <fglock> kp6: ::Int

[00:16] <exp_evalbot> r18412: OUTPUT[syntax error at position 0, line 1 column 0:␤::In␤^ HERE␤]

[00:16] <fglock> kp6: ::Int(10)

[00:16] <exp_evalbot> r18412: OUTPUT[Died at compiled/perl5/lib/KindaPerl6/Grammar.pm line 3590, <> line 1.␤Can't locate object method "parsing" via package "Constructor" (perhaps you forgot to load "Constructor"?) at - line 1.␤]

[00:16] <fglock> pff

[00:16] <mncharity> :)

[00:16] <mncharity> work in progress :)

[00:17] *** theorbtwo left
[00:17] <mncharity> I've been repeatedly reminded lately that 'civilization is a bootstrap exercise'.  One step at a time.  With the critical path very often starved for resources.

[00:19] <mncharity> btw, I saw audreyt's planet post go by the other day.  is there a kp6 interactive read-eval-print loop, and if not, would you like one?

[00:19] <fglock> kp6: say (10.HOW).methods

[00:19] <exp_evalbot> r18412: OUTPUT[increment perl str true HOW WHAT␤]

[00:19] <fglock> no, it would be nice

[00:21] <mncharity> ok.  I'll try to whip one up.

[00:22] <avar> whee

[00:28] <mncharity> fglock: http://wiki.laptop.org/go/OLPC_Brazil :)

[00:28] <lambdabot> Title: OLPC Brazil - OLPCWiki

[00:28] <fglock> it would be nice if it were written in kp6-ish

[00:28] <fglock> looking

[00:28] *** REPLeffect_ left
[00:30] <fglock> cool - are you going to Brazil some day?

[00:30] *** cmarcelo left
[00:31] <fglock> I studied at UFRGS

[00:33] <mncharity> ah, neat.  no, others are off to Peru and China, but I just sit in Cambridge and hack.

[00:34] <fglock> re written in kp6-ish, we plan to bootstrap in Lisp too

[00:34] <avar> the lisp backend will take over!

[00:35] *** Torment left
[00:36] <mncharity> the other thing vaguely near the top of my p6 todo list was setting up so the pugs test suite can be run against arbitrary programs.  Just set an ENV variable.  Rather than each implementation having to frob a couple of files for itself.

[00:37] <mncharity> re lisp, yes, sbcl is a nice environment.

[00:38] <fglock> we are heading to a common Makefile.PL, that you can run with an ENV set to which backend you want; then 'make test' just works

[00:39] <avar> well preferrably we'll be able to do that at runtime

[00:39] <fglock> this is what I was working today (instead of writing my talk)

[00:39] <avar> but in the future we may want to compile the kp6 frontend with a given backend..

[00:41] <mncharity> ah, ok.  I was just going to take the existing(still?) redsix lines and multate them into a more general "other".  but a more principled approach would be nice.

[00:43] <fglock> no problem - we can replace the syntax later

[00:45] *** arcady joined
[00:45] <mncharity> fglock: don't let me distract you from talk. ;)    /me watches  cpan -f -i KindaPerl6  tests scroll by.  Then maybe just take misc/old_pugs_perl5_backend/PIL-Run/pugs-p5.pl and strip it down to just use  print open(| kp6 > tmp); eval(`cat tmp`).  

[00:46] <mncharity> low hanging fruit, leaving the kp6-ish for another day.

[00:46] <SamB> what does sbcl have that cmucl hasn't?

[00:47] * mncharity tries to think of a polite way to say it...

[00:47] <SamB> don't bother

[00:47] <avar> SamB: active development?

[00:47] <mncharity> cleaner code and an active community

[00:47] <SamB> I don't care if you insult cmucl

[00:47] <SamB> ah. that's nice!

[00:48] *** weinig_ left
[00:49] <mncharity> stevan_: do you every get up to boston?  we should do lunch or something.

[00:50] * mncharity tries to remember who else is in the Boston area...  nominal members of the Perl6 Users Group...

[00:51] <fglock> the talk is going on well - distraction actually helps

[00:52] <avar> there's a p6 user's group?

[00:53] <stevan_> mncharity: I dont often get up to Boston, but I do plan on trying to make a Boston.pm meeting sometime in the near future

[00:55] *** justatheory left
[00:57] <mncharity> fglock: :)

[00:58] * avar needs to design a better kp6 interface

[00:58] <mncharity> avar: it turned out there were several pugs developers near Boston, so it was sort of a running joke.  I don't think we ever actually met.

[00:58] <avar> something with -e, and backend options

[00:58] <avar> having sbcl compile to a binary and so on..

[00:59] <mncharity> stevan_: cool.  though ruby group unfortunately now lands each month in conflict, so my attendance gets split.

[01:00] *** Limbic_Region joined
[01:00] <mncharity> avar: I found having an interactive eval loop invaluable for testing.  Makes random exploration/play/testing much easier.

[01:01] <fglock> heh - I read rugby

[01:01] <mncharity> :)

[01:01] <avar> mncharity: yeah, then there's that..

[01:02] <stevan_> mncharity: I wouldnt mind hitting up a ruby users meeting etiher :)

[01:02] <mncharity> "give blood, play rugby^Wruby"

[01:03] <mncharity> second tuesday of each and every month (for both)

[01:05] <mncharity> re much easier, well, at least for me.  puts it above threshold for "maybe I'll just sit here for a while and try different things and see how they work".  the kp6: bot is great. :)

[01:06] <fglock> perl6: 1+1

[01:06] <exp_evalbot> kp6: OUTPUT[2␤]

[01:06] <exp_evalbot> ..pugs: OUTPUT[2␤]

[01:06] <exp_evalbot> ..p6: OUTPUT[sh: ./parrot: No such file or directory␤]

[01:06] <exp_evalbot> ..nqp: OUTPUT[sh: ./parrot: No such file or directory␤]

[01:07] <mncharity> wow. :)

[01:07] <fglock> we have lots of bots

[01:07] <fglock> it's the perl6: bot community

[01:07] *** araujo joined
[01:08] <mncharity> :)  /me wonders if there's a QUOTES file... :)

[01:08] * SamB wonders where oleg got his URL from

[01:09] <avar> how do I run the kp6-perl5 backend now?

[01:09] <fglock> avar: I was thinking, how about renaming MiniPerl6 to nqp-perl5 :)

[01:09] <mncharity> avar: is that this one: http://planetsix.perl.org/ ?

[01:09] <lambdabot> Title: Planet Perl Six

[01:10] <avar> Let's rename kp6 to onion:)

[01:10] <fglock>  $ echo ' say "hi" ' | perl script/kp6 | perl -I -Ilib-modules-kp6-mp6-p5 -I compiled/perl5/lib

[01:11] <fglock>  $ echo ' say "hi" ' | perl script/kp6 | perl  -I compiled/perl5/lib

[01:11] *** devogon left
[01:11] <avar> kp6: my sub x { "bar" } say x()

[01:11] <exp_evalbot> r18412: OUTPUT[DISPATCH: calling APPLY on invalid object:$VAR1 = {};␤␤ at lib-kp6-mp6-p5/KindaPerl6/Runtime/Perl5/MOP.pm line 33␤   main::DISPATCH('undef', 'APPLY') called at - line 48␤]

[01:11] <avar> kp6: my sub xyz { "bar" }; say xyz()

[01:11] <exp_evalbot> r18412: OUTPUT[bar␤]

[01:12] *** thoughtpolice left
[01:12] <avar> oh stupid parser

[01:12] <mncharity> re onion, layers upon layers?

[01:12] <avar> yup

[01:13] <avar> And I think we need to drop the "Kinda" stigma:)

[01:13] <mncharity> :) ah, good thought.

[01:14] <avar> and the perl logo has been an onion for a while..:)

[01:15] <mncharity> perl6 goulash: add onion, jerked parrot, leg of pug, ...

[01:15] *** cognominal_ left
[01:16] <avar> fglock: what do you think?:)

[01:16] <fglock> i'm ok :)

[01:17] <fglock> how about adopting nqp-xxx for the MiniPerl6 backends?

[01:17] <fglock> let's integrate with Parrot

[01:17] <avar> I think it's better if the parrot people own "nqp" :)

[01:17] <fglock> in some way

[01:17] <avar> aren't they using nqp as an embedding language anyway

[01:19] <fglock> I see the minis as close-to-the-metal, whatever subset works better in that platform

[01:19] *** lyokato joined
[01:19] <fglock> MiniPerl6-lisp would be very lispish

[01:20] *** daxim_ left
[01:20] <avar> sh-3.1$ make kp6_mp6

[01:20] <avar> cp src/KindaPerl6/Visitor/EmitLisp.pm compiled/perl5/lib/KindaPerl6/Visitor/EmitLisp.pm

[01:20] <avar> # /usr/bin/perl script/mp6.pl < src/KindaPerl6/Visitor/EmitLisp.pm | perltidy -pro=util/perltidyrc > compiled/perl5/lib/KindaPerl6/Visit\

[01:20] <avar> or/EmitLisp.pm

[01:20] <avar> hrm, makefile broken

[01:20] <fglock> oops - sorry

[01:20] <avar> fixed it

[01:23] *** polettix left
[01:25] <pugs_svnbot> r18413 | avar++ | [kp6] make `make kp6_mp6' work again, compile not copy

[01:25] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18413

[01:25] <lambdabot> Title: Changeset 18413 - Pugs - Trac

[01:31] *** weinig joined
[01:31] <fglock> avar: I think we could add onion as a new directory, for bootstraping work - and keep KindaPerl6 as the bootstrapping compiler

[01:31] <fglock> so we start with onion-kp6 and later onion-onion

[01:33] <avar> aren't we going to move kp6 itself to full-p6?

[01:37] *** luqui left
[01:37] *** arcady left
[01:37] *** arcady joined
[01:39] <fglock> yes, but moving it over itself is harder; I think keeping a near-frozen version makes it easier

[01:39] <avar> when should we do that? when it bootstraps STD?

[01:39] <fglock> like, how we are using mp6 now

[01:40] <fglock> it could be done right now, we only have minor problems

[01:40] <fglock> we can port fixes back from onion to kp6 if needed

[01:46] <avar> can it be partly done?

[01:48] <fglock> hmm - what you mean?

[01:49] <avar> nm

[01:49] <avar> ugh, I'll have to rewrite aankhen's Code.lisp, it only does package variables

[01:53] <fglock> the idea is to start onion as a separate project, developing it in parallel with kp6; when onion gets usable, then we freeze kp6

[01:53] <fglock> if onion fails, we just move it to misc/ and go on

[01:54] <fglock> I need examples of companies that have an open-source R&D department

[01:54] <fglock> not directly related to the company business

[01:56] *** jferrero left
[01:57] <avar> fglock: Isn't onion just coninuing where kp6 is going?

[01:58] *** kanru left
[01:58] * mncharity goes by briefly, notices fun concept of a frozen onion.  frosty onion.

[01:59] <avar> fglock: planning major changes with onion incompatable with kp6?

[02:01] *** marmic left
[02:01] <fglock> there are some things that might break kp6 - fixing the parameter passing format, for example

[02:02] <fglock> and experimenting with the regex engine

[02:04] *** marmic joined
[02:04] <fglock> these things require changes in the runtime

[02:10] <avar> but first we want to bootstrap:)

[02:10] <avar> and having std will be neat since we can parse more stuff

[02:15] *** mr_ank left
[02:16] *** mr_ank joined
[02:18] *** kanru joined
[02:27] <fglock> bootstrapping is easier if you have a compiler that works as a safe net

[02:28] <fglock> my talk is finished - now sleep for 3 hours or so &

[02:49] *** weinig left
[02:49] *** weinig joined
[02:50] *** amnesiac joined
[02:51] *** Limbic_Region left
[02:52] *** fglock left
[03:07] <mncharity> re creating a repl, there is also ./misc/old_pugs_perl5_backend/pilrun2-leftovers/repl.pl  ./misc/runpugs/lib/Repl.pm  (all p5) and examples/eval.pl (in p6) to draw from.  perhaps also examples/promptr.p6.

[03:13] *** cognominal_ joined
[03:56] *** kanru left
[03:57] *** justatheory joined
[04:25] *** funktio joined
[04:45] *** Jamtech joined
[04:52] *** Jamtech left
[05:01] *** weinig is now known as weinig|zZz

[05:02] *** c9s joined
[05:02] *** c9s left
[05:13] <funktio> I think it would be a nice if string.chars returned an array in list context

[05:14] <funktio> would be much more elegant than split "", string

[05:29] *** Ashizawa joined
[05:45] <spinclad> mncharity: putter! yes, here's one nominal member (not paying attention here, clearly, tho i am caught up from a month-long 2 week backlog)

[05:46] <spinclad> and about ready to start playing with kp6

[05:55] *** elmex joined
[05:58] *** jisom joined
[06:01] *** jisom left
[06:02] *** jisom joined
[06:08] <moritz_> btw Junction.str is broken

[06:08] <moritz_> I'm trying to fix it, but it's...weird

[06:08] *** justatheory left
[06:11] <moritz_> no method 'type' in Class 'Int'

[06:13] <moritz_> ah, the problem is that Junction.str autothreads

[06:13] <moritz_> but it shouldn't

[06:14] <moritz_> changing it to return "placeholder" and calling 'say' on (1|2|3) yields "placeholder\nplaceholder\nplaceholder\n"

[06:15] <moritz_> so the problem is not in class Junction, but somewhere in the dispatcher

[06:25] *** marmic left
[06:29] *** marmic joined
[06:41] *** drupek12 left
[06:43] *** Aankhen`` joined
[06:45] *** iblechbot joined
[06:51] *** zamolxes left
[06:55] *** tewk left
[07:11] *** bsb left
[07:12] *** jisom_ joined
[07:14] *** zamolxes joined
[07:21] *** weinig|zZz left
[07:21] *** IllvilJa left
[07:22] *** weinig joined
[07:29] *** gorax joined
[07:30] *** jisom left
[07:31] *** dduncan left
[07:33] *** franck___ joined
[07:37] *** amnesiac left
[07:40] *** devogon joined
[07:57] *** tewk joined
[08:42] *** jisom joined
[08:46] *** cognominal_ left
[08:48] *** mj41 left
[09:00] *** jisom_ left
[09:08] <funktio> whoops, I forgot the sigil; I meant $string.chars

[09:19] *** jisom left
[09:24] *** fglock joined
[09:26] *** cathya joined
[09:31] *** drupek12 joined
[09:41] *** ruoso joined
[09:44] *** andara joined
[09:53] *** fglock left
[09:56] *** fglock joined
[09:59] *** rfordinal_ joined
[10:12] *** rfordinal left
[10:12] *** Ashizawa left
[10:12] <cathya> you guys do haskell?

[10:15] *** r0bby left
[10:16] *** ruoso left
[10:18] <integral> We do haskell?  Pugs has a copious amount of haskell in it :-)

[10:18] <cathya> interesting

[10:19] <cathya> im just reading the halting problem

[10:19] <cathya> and there's a quote from larry

[10:19] *** r0bby joined
[10:20] <szbalint> hey regh :)

[10:21] <cathya> hi

[10:21] <cathya> oh

[10:21] <cathya> hehe

[10:21] <cathya> hi

[10:21] <cathya> here too huh

[10:35] *** cognominal_ joined
[10:38] <moritz_> pong

[10:43] <cathya> guess what

[10:45] *** cognominal_ left
[10:47] *** IllvilJa joined
[11:05] *** fglock left
[11:07] <moritz_> what

[11:11] *** stevan_ left
[11:36] *** lyokato left
[11:38] *** mikeKnight joined
[11:38] <mikeKnight> hi,every one

[11:39] *** iblechbot left
[11:39] *** mikeKnight left
[11:46] *** pmurias joined
[11:59] <cathya> question OT doesnt linux have a gui that's hardware-accelerated yet?

[12:02] <cathya> besides x

[12:06] <moritz_> I don't know, perhaps a framebuffer can use 2D acceleration

[12:08] <pmurias> moritz_: doubt it

[12:12] <pmurias> moritz_: x and DirectFB on framebuffer can do hardwar acceleration apartantly 

[12:13] <cathya> ah ok

[12:15] <pmurias> cathya: i just goolg'ed after my initial stupid response ;)

[12:15] <pmurias> * googled

[12:16] <pmurias> kp6 Makefile is broken

[12:16] <pmurias> it copied KindaPerl6/Visitor/EmitPerl5Regex.pm instead of compiling it

[12:18] <Aankhen``> pmurias: Thanks for the macro answer last night. :-)

[12:19] <Aankhen``> AIUI from the answer, in the case of that particular macro, at least, the processing would mostly be in the regex, since that would return an appropriate AST, yes?

[12:21] <pmurias> it could

[12:22] <pmurias> what i wanted to do was to wrap the result in a quasi-quote

[12:22] <pmurias> so that the regex would return a list and a quasi-quote would turn it into an AST node

[12:23] <Aankhen``> Ah.

[12:29] <pmurias> i'm not sure if do {my $a:=1;say q:code {say $a;}} returns q:code {say 1};

[12:32] <avar> Aankhen``: Your sub implementation is teh broke:)

[12:38] *** iblechbot joined
[12:44] <pugs_svnbot> r18414 | pmurias++ | [kp6-perl5rx] token-test.pl works

[12:44] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18414

[12:44] <lambdabot> Title: Changeset 18414 - Pugs - Trac

[13:09] *** gorax left
[13:25] <Aankhen``> avar: What sub implementation?

[13:25] <Aankhen``> And what's b0rked about it?

[13:28] *** chris2 joined
[13:30] <avar> Aankhen``: Code.lisp, it only does packages, should just dispatch to sub objects

[13:30] <avar> hrm

[13:30] <avar> I was trying to implement my $s = sub {}; $s.()

[13:30] *** weinig left
[13:33] *** weinig joined
[13:36] *** weinig left
[13:36] *** araujo left
[13:37] *** weinig joined
[13:40] <Aankhen``> avar: Eh?

[13:40] <Aankhen``> Code.lisp contains KP6-CODE and MAKE-KP6-SUB.

[13:40] <Aankhen``> It doesn't have anything to do with packages.

[13:41] <avar> kp6-apply-function needs to look it up in a package

[13:41] <avar> (defmethod kp6-dispatch ((invocant kp6-Code) (method (eql :apply)) &rest parameters)

[13:41] <avar> (defmethod kp6-dispatch ((invocant kp6-Code) (method (eql :apply)) &rest parameter  "Run some code with ::Apply, this is used by my $sub = sub {};

[13:42] <avar> $sub.() for instance"

[13:42] <avar>   (let ((interpreter (first parameters))

[13:42] <avar>         (arguments (rest parameters)))

[13:42] <avar>     (kp6-apply-function interpreter invocant (list (make-instance 'kp6-positional-parameter :value (make-kp6-cell arguments))))))

[13:42] <avar> I was trying to do that

[13:42] <Aankhen``> Ah, KP6-APPLY-FUNCTION.

[13:42] <Aankhen``> Wait, you *want* it to look it up in a function, or do you want it to run the code itself?

[13:42] <Aankhen``> It's supposed to do the latter at present.

[13:43] <avar> run the code

[13:43] <Aankhen``> And instead of that LET, use this: (destructuring-bind (interpreter &rest arguments) parameters ...)

[13:44] <avar> Aankhen``: http://sial.org/pbot/28011

[13:44] <lambdabot> Title: Paste #28011 from Someone at 208.78.101.240

[13:45] <Aankhen``> Hmm, I'm not sure why KP6-APPLY-FUNCTION is looking it up in a package.

[13:45] <Aankhen``> That's just silly.

[13:45] *** fglock joined
[13:47] <cathya> jesus

[13:47] <cathya> knuth is online

[13:47] <cathya> lol

[13:47] *** cmarcelo joined
[13:50] <szbalint> hm?

[13:50] *** amnesiac joined
[13:53] <avar> Aankhen``: If you could get methods and $sub.() working that would be super rad:)

[13:55] <Aankhen``> avar: Give me some time.  I'm a little swamped at the moment. :-S

[13:59] *** blindfish joined
[14:00] <pmurias> you can treat ::Apply as a ::Call if it helps

[14:02] <Aankhen``> I plan to. :-)

[14:06] <cathya> kiddin szbalint

[14:06] <cathya> heh

[14:11] * avar wants to kill "this is not implemented"

[14:11] <pugs_svnbot> r18415 | fglock++ | [kp6-perl5] fixed a problem with nested gather{...}

[14:11] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18415

[14:11] <lambdabot> Title: Changeset 18415 - Pugs - Trac

[14:11] *** turrepurre joined
[14:13] *** cognominal_ joined
[14:13] <fglock> avar: there is an alternative to making yet another compiler, which is to port some stuff back to mp6 

[14:14] <fglock> this would make possible to "fix" the kp6 compiler runtime 

[14:15] <avar> what stuff?

[14:16] <fglock> the kp6 compiler uses the mp6 runtime internally

[14:16] <fglock> this makes some things very difficult - macros for example

[14:17] <fglock> we could make mp6 compile to kp6 runtime

[14:17] <avar> couldn't this also be fixed by bootstraping kp6 and running it on the kp6 runtime?

[14:18] <fglock> yes, but the bootstrapping itself would be easier to do if this were fixed

[14:18] <pmurias> fglock: fixing of what is nessary?

[14:19] *** Ashizawa joined
[14:19] <fglock> pmurias: replacing the kp6 compiler runtime 

[14:24] <fglock> pmurias: this is needed in order for the AST to be a Perl 6 land object; we need this in order to have macros

[14:25] *** justatheory joined
[14:27] *** penk left
[14:29] *** justatheory left
[14:30] *** ofer left
[14:30] *** ofer joined
[14:33] <pmurias> fglock: it isn't clear to me, do you want the code emitted by kp6 to use the mp6 runtime?

[14:33] <pmurias> i understood

[14:34] <Aankhen``> I'm glad one of us did. :-D

[14:34] *** dconway joined
[14:34] <dconway> so this is what irc looks like

[14:34] * dconway waves to larry

[14:35] <Aankhen``> Beautiful, isn't it?

[14:35] <pmurias> although " replacing the kp6 compiler runtime" part confuses me

[14:36] <pmurias> fglock: the plan is to make the mp6 emitted code use the kp6 runtime?

[14:36] <moritz_> fglock: how do need to modify evalbot's @INC?

[14:37] <moritz_> fglock: for the new dir layout

[14:37] <fglock> pmurias: yes (a possible plan)

[14:37] <[particle]> hey there dconway! how's things?

[14:38] <pmurias> lib-mp6-p5 changed to compiled/perl5/lib

[14:38] <pmurias> * lib-kp6-mp6-p5

[14:38] <fglock> moritz_: the lib dir is now compiled/perl5/lib/

[14:38] <pmurias> fglock: i think it's a bad plan

[14:38] <fglock> so we can have several compiled lib versions

[14:38] <pmurias> s/plan/idea

[14:39] *** cognominal_ left
[14:39] <dconway> hello moritz_:)

[14:39] <fglock> pmurias: how would you do it?

[14:39] <fglock> dconway: hi :)

[14:39] <moritz_> hi dconway ;)

[14:39] <pmurias> dconway: hi ;)

[14:39] <fglock> pmurias: hi :)

[14:39] * [particle] wonders if dconway is here looking for yet another way to avoid the pod spec ;)

[14:40] <dconway> hi pmurias:)

[14:40] <fglock> [particle]: hi :)

[14:40] <dconway> it'll take me awhile to get used to this thing

[14:40] <dconway> [particle]: not at all

[14:40] <pugs_svnbot> r18416 | moritz++ | [evalbot] fixed include path for evalbot (reflects kp6 dir layout changes)

[14:40] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18416

[14:40] <lambdabot> Title: Changeset 18416 - Pugs - Trac

[14:41] *** exp_evalbot joined
[14:41] <moritz_> kp6: say "hi"

[14:41] <exp_evalbot> r18416: OUTPUT[hi␤]

[14:42] <moritz_> fglock: kp6 with new include path at your service ;)

[14:42] <dconway> be back in a bit, need to reboot

[14:42] <pugs_svnbot> r18417 | fglock++ | [kp6] rm old lib

[14:42] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18417

[14:42] *** dconway left
[14:42] <lambdabot> Title: Changeset 18417 - Pugs - Trac

[14:42] <fglock> moritz_: thanks!

[14:43] <moritz_> you're welcome

[14:44] <cathya> that was the real damian conway?

[14:45] <[particle]> yes

[14:45] <fglock> running out of battery...

[14:46] * [particle] hands fglock a solar charger

[14:46] <cathya> what is with the perl community

[14:46] <cathya> all the perl developers started showing up here?

[14:46] <cathya> hehe

[14:46] <moritz_> cathya: not all I think ;)

[14:46] <moritz_> was rafael ever here? or nicholas clark?

[14:47] <fglock> moritz_: yes

[14:47] <rgs> I'm yes

[14:47] <rgs> here

[14:47] <moritz_> rgs: right

[14:47] <cathya> rafael is

[14:47] <cathya> lol

[14:47] <cathya> there

[14:47] <moritz_> sometimes it's hard to match abbreviations ;)

[14:47] <rgs> nicholas is, sometimes, too

[14:47] <[particle]> rgs: did rc1 happen?

[14:47] <Aankhen``> <cathya> what is with the perl community # you don't approve of the developers showing up here? :-)

[14:48] <rgs> not yet

[14:48] <pmurias> fglock: i don't think changing mp6 would be worth it

[14:48] <cathya> haha i dont mind at allll

[14:48] <cathya> if it happens  good, it'll make this place bigger than debian

[14:48] <[particle]> rgs: good luck with it. looking good so far, but i know it's a lot of work

[14:48] <pmurias> as developing kp6 is easier and the result isn't temporary

[14:48] <rgs> shouldn't take long

[14:49] <cathya> so this isnt the real rafael?

[14:49] <fglock> pmurias: how about creating the onion thing; and freezing kp6 as the bootstrap compiler?

[14:49] <pmurias> sounds good

[14:49] <fglock> k

[14:49] <rgs> I'm the one and only rafael!!

[14:49] <[particle]> cathya: what's this "real" business. we're all real people, except the bots.

[14:49] <cathya> real as in the perl developer

[14:49] <pmurias> isn't onion as a name taken by the parrot folks?

[14:50] <fglock> perl6: "I'm here"

[14:50] <exp_evalbot> kp6: OUTPUT['I'm here'␤]

[14:50] <exp_evalbot> ..pugs: OUTPUT["I\'m here"␤]

[14:50] <exp_evalbot> ..p6: OUTPUT[sh: ./parrot: No such file or directory␤]

[14:50] <exp_evalbot> ..nqp: OUTPUT[sh: ./parrot: No such file or directory␤]

[14:50] <Tene> [particle]: Hey, I'm plenty real!

[14:50] <[particle]> what's up with nqp and p6?

[14:51] <Aankhen``> Whoo.

[14:51] <fglock> no parrot there

[14:51] <Aankhen``> Tene: Liar.

[14:51] <[particle]> yeah, where is there, and how does it get fixed?

[14:51] <[particle]> by the way, we're ~14 failing tests away from merging the new oo model into parrot trunk

[14:51] <fglock> [particle]: please help moritz_ :)

[14:52] <fglock> [particle]: cool

[14:52] <[particle]> fglock: gladly! what's wrong, moritz_?

[14:52] * Tene segfaults on Aankhen``.

[14:52] <Aankhen``> Ewww.

[14:52] * [particle] reboots Tene

[14:52] <pmurias> fglock: won't changing the kp6 be nessesary for getting onion to compile

[14:53] <fglock> bye bye in 2 minutes

[14:53] <fglock> pmurias: maybe, but it's less complex than fixing it and making it compile itself at the same time

[14:54] <fglock> it's very easy to break the bootstrap

[14:55] * [particle] thinks kp6 needs a version number, a published roadmap, and proper cpan-ification

[14:55] <pmurias> fglock: a stable version could be kept, updated only when the HEAD is proved to work

[14:56] *** cathya left
[14:56] <[particle]> it'd be nice to have a repo that allowed branches, wouldn't it :)

[14:57] <Aankhen``> Needs moar Mercurial.

[14:58] <pmurias> [particle]: you can branch a single directory in subversion

[15:00] <pmurias> the pugs repository is so diversified that branching the whole thing dosn't make sense

[15:01] <Tene> <3 git

[15:02] *** vbattsAtWork joined
[15:02] <Aankhen``> Git it off me!

[15:11] *** cognominal_ joined
[15:14] <[particle]> pmurias: perhaps it's time to set up v6/branches then

[15:18] *** fglock left
[15:21] *** fglock joined
[15:22] <fglock> b

[15:24] <pasteling> "fglock" at 87.103.27.203 pasted "error in irc.pugscode.org" (4 lines, 367B) at http://sial.org/pbot/28014

[15:27] <fglock> how about making 3 separate Makefiles: Makefile.PL for the CPAN distro, doesn't attempt to recompile; Makefile-mp6.PL for current development; Makefile-kp6.PL for bootstrapping

[15:30] <[particle]> you could have Makefile.PL take options, and generate the appropriate Makefile

[15:30] <[particle]> or perhaps different targets within the Makefile?

[15:30] <[particle]> s/the/one/

[15:31] <fglock> we current have different targets, but the Makefile gets hard to maintain

[15:31] <moritz_> looking...

[15:33] <[particle]> you think three makefiles will be easier to maintain?

[15:33] <[particle]> (it may be, iunno.)

[15:33] *** pnu joined
[15:34] <fglock> good point - not sure

[15:34] <[particle]> parrot has a Makefile.PL that calls Configure.pl to keep cpan happy

[15:35] <[particle]> and Configure.pl takes many options which affect makefile generation

[15:35] *** barney joined
[15:35] <[particle]> it even includes a 'make Makefile' target, which allows us to modify the makefile templates and regenerate without reconfiguring

[15:36] <moritz_> while compiling parrot: 

[15:36] <[particle]> however, kp6 doesn't really need configuring in the first place, just makefile generation

[15:36] <moritz_> compilers/imcc/imcparser.c:1: error: expected identifier or '(' before '<<' token

[15:36] <moritz_> make: *** [compilers/imcc/imcparser.o] Error 1

[15:36] <moritz_> [particle]: any ideas?

[15:36] <[particle]> moritz_: sure!

[15:36] <[particle]> it's likely a merge conflict

[15:37] <[particle]> anytime you see compiler errors with << or >>

[15:37] *** rindolf joined
[15:37] <[particle]> try svn revert

[15:37] <moritz_> ok, thanks

[15:37] *** Ashizawa left
[15:42] *** lichtkind joined
[15:43] *** vel joined
[15:55] <fglock> looking for the next interesting problem™

[15:57] <[particle]> loop { do_something_useful( find_something_interesting() ); };

[16:01] <fglock> can we have loop as a statement modifier?

[16:01] <fglock>  $x++ loop;

[16:02] <TimToady> no

[16:02] *** weinig left
[16:03] <TimToady> at least, not in Standard Perl

[16:03] *** xinming left
[16:03] *** xinming joined
[16:04] <[particle]> $x++ for loop; # self-documenting :)

[16:04] *** drupek12 left
[16:05] <[particle]> would $x++ for *; work?

[16:05] <TimToady> $x++ for ^*

[16:05] <[particle]> ah, right

[16:06] <[particle]> i see a macro somewhere that converts a 'loop' statement modifier to ^* :)

[16:06] <TimToady> 'course, that could also be construed as the metaobject for Whatever.

[16:07] <TimToady> so maybe the metaobject just happens to return an infinite list in list context.  :)

[16:07] <TimToady> more likely we just force ^* and ^Whatever to mean different things

[16:07] <[particle]> sometimes you just can't resist a good hack

[16:08] <TimToady> Whatever is the concept, while * is the use of the concept

[16:09] <TimToady> basically, the ^ shortcut for .HOW only works on bare identifiers

[16:09] <pmurias> fglock: not keeping kp6 and mp6 runtimes in the same directory might be a good idea

[16:09] <TimToady> and then only if they're already declared as classes

[16:10] <pmurias> they are currently kept together in Runtime/Perl5

[16:10] <TimToady> otherwise ^ just has an MMD candidate on Whatever that handles it

[16:10] <amnesiac> metaobjects!

[16:10] <TimToady> what about 'em?

[16:11] <TimToady> and then, what about that?

[16:11] <amnesiac> just checking the conversation, and thinking how that could be constructed as the metaobject for Whatever

[16:14] <TimToady> well, when you say MyType, it's returning the protoobject (a variant of undef), and * is actually just the Whatever protoobject

[16:15] <TimToady> so if there were not a specific prefix:<^> (Whatever) rule, it would default to what ^ does on normal protoobjects

[16:15] <TimToady> which is to return the metaobject, Mytype.HOW

[16:17] <amnesiac> I see

[16:18] <TimToady> likewise ^42 and ^"zzz" dispatch to different candidates depending on the type being Num or Str

[16:18] <amnesiac> so the metaobject just defines the abstract representation of ANY class? (or any object)

[16:18] <amnesiac> like how to dispatch HOW and WHAT?

[16:19] <TimToady> no, those are built-in macros

[16:19] <TimToady> .HOW tells you how to do all the rest of the OO stuff

[16:19] <TimToady> so .HOW can't specify how to call .HOW

[16:20] <amnesiac> .HOW tells you how to do all the rest of the OO stuff ---> but for a given type, or any type?

[16:21] <TimToady> every object carries a .HOW, which may or may not be unique, depending on whether you're doing prototype or class-based programming

[16:21] <TimToady> default is class-based

[16:21] <TimToady> but .HOW doesn't care

[16:22] <amnesiac> I see

[16:22] <TimToady> in terms of MO it only has to hand a responder interface

[16:22] <TimToady> back

[16:22] <TimToady> and the object doesn't care where the responder interface's methods happen to come from

[16:23] <fglock> hmm - the problem with implementing STM in perl 5 is possibly related to finding side effects of BEGIN blocks

[16:23] *** Jamtech joined
[16:26] *** franck___ left
[16:26] *** araujo joined
[16:34] *** TJCRI joined
[16:39] *** weinig joined
[16:43] <avar> 14:55:20  * [particle] thinks kp6 needs a version number, a published roadmap, and proper cpan-ification

[16:43] <avar> [particle]: I put it on cpan, granted it could be a lot better..

[16:43] <[particle]> yep, good start :)

[16:44] <avar> what more does it need?

[16:44] <[particle]> portability

[16:44] <avar> Wanna hack it?:)

[16:45] <fglock> we have a roadmap

[16:45] <fglock> v6/docs/kp6-roadmap.pod

[16:45] <[particle]> you should put the roadmap in the cpan distro

[16:45] * avar TODO: move docs/ to KindaPerl6::Doc

[16:46] <[particle]> yeah

[16:46] <fglock> avar: please do!

[16:46] <[particle]> i can try to hack it

[16:46] <avar> I've been doing so, slooowly:)

[16:46] <avar> [particle]: please do:)

[16:46] <fglock> [particle]: does Coro.pm works in windows?

[16:46] <[particle]> where's Coro.pm, i can try?

[16:47] <fglock> it's used in the current gather/take impl

[16:47] *** chris2 left
[16:47] <fglock> Coro from CPAN

[16:47] <[particle]> okay, just updated v6 from the repo

[16:47] <[particle]> fglock: check the build reports there

[16:47] <fglock> you don't need v6

[16:47] *** justatheory joined
[16:47] <fglock> looking

[16:48] <avar> [particle]: If you want to make it portable to windows just have it not write all the makefile stuff out if $^O eq 'Win32', it won't support building (development) but install will work

[16:48] <Aankhen``> avar: I'm going to give KP6-DISPATCH a required INTERPRETER parameter.

[16:48] <avar> oh, and I think `make install' might be broken in general 

[16:48] <fglock> pass 2, fail 13

[16:48] <fglock> but it's a cool module

[16:48] <Aankhen``> avar: I trust that won't break anything?

[16:48] <Aankhen``> (Obviously, I'll update all calls and so on.)

[16:49] <[particle]> Coro has a lot of platform failures, just within linux

[16:49] <avar> Aankhen``: Why does the lisp implementation need interpreter anyway?

[16:50] <avar> Aankhen``: Won't break anything if you add it everywhere

[16:50] <Aankhen``> avar: Futureproofing.

[16:50] <avar> threads?

[16:50] <Aankhen``> Aye.

[16:50] <Aankhen``> An interpreter is a self-contained P6 world.

[16:50] <fglock> it's possible to emulate what Coro does, but it takes a lot of work

[16:51] *** justatheory left
[16:52] <fglock> brb

[16:53] <Aankhen``> avar: I'm curious.  Why convert everything to use KP6-DISPATCH?

[16:54] *** andara left
[17:05] <avar> Aankhen``: To match the p5 backend, and it makes the MOP stuff easier

[17:06] <avar> Aankhen``: And to write the internals at the same level "user space" code is written in

[17:07] <Aankhen``> I still don't understand how it makes the MOP stuff easier, or how we're writing at the same level "user space" code is written at.

[17:08] <Aankhen``> Are you planning to evaluate DEFMETHOD forms at runtime to define new user methods?

[17:16] *** fglock left
[17:17] *** GeJ_ joined
[17:19] <avar> Aankhen``: Everything in p6 works on an object model where you ask the object for its string form, int form, whatever

[17:20] <pugs_svnbot> r18418 | Aankhen++ | [kp6-lisp]

[17:20] <pugs_svnbot> r18418 | Aankhen++ | * added INTERPRETER parameter to KP6-DISPATCH lambda list.

[17:20] <pugs_svnbot> r18418 | Aankhen++ | * added INTERPRETER parameter to KP6-FOR-LOOP-STRUCTURE; also changed lambda list to group non-body forms within a list.

[17:20] <pugs_svnbot> r18418 | Aankhen++ | * regenerated EmitLisp.pm

[17:20] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18418

[17:20] *** GeJ left
[17:20] <lambdabot> Title: Changeset 18418 - Pugs - Trac

[17:20] <avar> Aankhen``: Doing that via one dispatch protocol just seems easier

[17:20] <avar> Aankhen``: same level = all the stuff returns p6 objects under MOP, and we explicitly ask the class for the CL version now

[17:20] <avar> as opposed to kp6-true returning t or nil

[17:21] <avar> so a p6 class with method true {} doesn't need any special handling on ::If or other stuff like that

[17:22] <Aankhen``> How do we handle multiple invocants?

[17:23] <Aankhen``> Hmm, wait, I don't think that's around any more

[17:23] <Aankhen``> .

[17:23] <Aankhen``> kp6: (1, 2, 3, 4).map: -> $a { $a + 1 }

[17:23] <exp_evalbot> r18418: OUTPUT[syntax error at position 0, line 1 column 0:␤(1, 2, 3, 4).map: -> $a { $a + 1 ␤^ HERE␤]

[17:23] <Aankhen``> Dang, can't remember the syntax.

[17:24] <Aankhen``> kp6: [1, 2, 3, 4].map: -> $a { $a + 1 }

[17:24] <exp_evalbot> r18418: OUTPUT[[ 2, 3, 4, 5 ]␤]

[17:24] <Aankhen``> Goodie.

[17:26] <avar> Aankhen``: i was trying to get @a.map(sub { $_ ~ "meh" }) working earlier:)

[17:26] <avar> that's (kp6-dispatch array :map ..)

[17:26] *** Psyche^ joined
[17:26] *** fglock joined
[17:37] *** Patterner left
[17:37] *** Psyche^ is now known as Patterner

[17:38] <pasteling> "Aankhen" at 122.162.197.94 pasted "return (::Call.new(invocant =>" (3 lines, 177B) at http://sial.org/pbot/28019

[17:38] <Aankhen``> How do I fix that code so that KP6 accepts it?

[17:38] <Aankhen``> At present I get a syntax error near ::Call.

[17:38] <Aankhen``> Oh, I guess I mean MP6.  This is for the emitter.

[17:39] <avar> try breaking it down into smaller parts

[17:39] <avar> and add more parens

[17:39] <Aankhen``> Do the individual parts look okay to you, though?

[17:40] <avar> ::Call() not ::Call.new() ?

[17:40] <avar> but otherwise yes

[17:40] <fglock> avar: yes

[17:40] <fglock> it's an mp6ism

[17:40] <avar> tell Aankhen`` :)

[17:40] * fglock thinks about fixing

[17:42] <pasteling> "Aankhen" at 122.162.197.94 pasted "my $call = ::Call(invocant =>" (4 lines, 196B) at http://sial.org/pbot/28021

[17:42] <Aankhen``> That still gives me an error.

[17:43] <avar> try := 

[17:43] <Aankhen``> Err.

[17:43] <Aankhen``> Hmm.

[17:44] <Aankhen``> It keeps complaining about this: Call.

[17:44] <Aankhen``> But that doesn't exist in the file.

[17:44] <Aankhen``> (The "." is part of what it complains about.)

[17:48] <fglock> Aankhen``: must use := instead of =

[17:48] <Aankhen``> I'm using that.

[17:48] <Aankhen``> Still no go.

[17:48] *** justatheory joined
[17:50] *** TJCRI left
[17:50] <avar> paste the patch

[17:55] <Aankhen``> You asked for it. :-)

[17:56] <pasteling> "Aankhen" at 122.162.197.94 pasted "Index: src/KindaPerl6/Visitor/" (202 lines, 9.4K) at http://sial.org/pbot/28022

[17:56] <Aankhen``> Note that the KP6-CALL-FUNCTION is still not okay.

[17:56] *** silug joined
[18:00] *** xinming left
[18:00] *** xinming joined
[18:02] *** funktio left
[18:05] <fglock> fixed - committing

[18:08] <moritz_> nqp: say("Hello");

[18:08] <exp_evalbot> OUTPUT[Hello␤]

[18:08] <pugs_svnbot> r18419 | fglock++ | [mp6] implemented .new()

[18:08] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18419

[18:08] <lambdabot> Title: Changeset 18419 - Pugs - Trac

[18:08] <moritz_> ok, parrot compiled fine 

[18:16] *** IllvilJa left
[18:38] *** jisom joined
[18:38] *** cognominal_ left
[18:39] *** TJCRI joined
[18:46] *** cognominal_ joined
[18:51] *** fglock left
[19:02] *** cmarcelo_ joined
[19:03] *** cmarcelo left
[19:03] *** cmarcelo_ is now known as cmarcelo

[19:12] *** daxim_ joined
[19:19] *** weinig left
[19:34] *** jisom left
[19:43] *** Jamtech left
[19:48] *** dduncan joined
[19:49] *** Jamtech joined
[19:50] *** weinig joined
[20:01] *** barney left
[20:04] *** weinig left
[20:04] *** weinig_ joined
[20:19] *** rindolf left
[20:24] *** shoe joined
[20:25] *** jjore-1 joined
[20:28] *** [particle] left
[20:36] *** fridim left
[20:37] *** IllvilJa joined
[20:40] *** jjore-w left
[20:46] *** penk joined
[20:47] *** thoughtpolice joined
[20:53] *** fridim joined
[20:57] *** TJCRI left
[20:58] *** cmarcelo left
[21:09] *** cognominal_ left
[21:10] *** [particle] joined
[21:21] *** fridim left
[21:25] *** drupek12 joined
[21:31] *** blindfish left
[21:43] *** Jamtech left
[21:49] *** vbattsAtWork left
[22:01] <pmurias> exit

[22:01] <pmurias> meant \/exit

[22:01] *** pmurias left
[22:05] *** lichtkind left
[22:08] *** iblechbot left
[22:13] *** IllvilJa left
[22:18] *** amnesiac left
[22:18] *** elmex left
[22:18] *** Qiang left
[22:18] *** _Helios left
[22:18] *** Casan left
[22:18] *** zostay left
[22:18] *** _go_ left
[22:18] *** onebadoze left
[22:18] *** drbean left
[22:18] *** aindilis left
[22:18] *** wilx left
[22:18] *** buubot left
[22:18] *** melissa left
[22:18] *** shachaf left
[22:18] *** jeremyb left
[22:18] *** lisppaste3 left
[22:18] *** theorb left
[22:18] *** f0rth left
[22:18] *** pjcj_ left
[22:18] *** cj left
[22:18] *** turrepurre left
[22:18] *** r0bby left
[22:18] *** Aankhen`` left
[22:18] *** takanori left
[22:18] *** felipe left
[22:18] *** mncharity left
[22:18] *** szbalint left
[22:18] *** jjore-1 left
[22:18] *** Lunchy_ left
[22:18] *** audreyt left
[22:18] *** Eidolos left
[22:18] *** penk left
[22:18] *** daxim_ left
[22:18] *** GeJ_ left
[22:18] *** araujo left
[22:18] *** ofer left
[22:18] *** rfordinal_ left
[22:18] *** marmic left
[22:18] *** arcady left
[22:18] *** ajs left
[22:18] *** kolibrie left
[22:18] *** gugod left
[22:18] *** drupek12 left
[22:18] *** [particle] left
[22:18] *** dduncan left
[22:18] *** Patterner left
[22:18] *** zamolxes left
[22:18] *** kcwu left
[22:18] *** Daveman left
[22:18] *** diakopter left
[22:18] *** nelhage left
[22:18] *** hcchien left
[22:18] *** TreyHarris left
[22:18] *** mtve left
[22:18] *** LCamel left
[22:18] *** thoughtpolice left
[22:18] *** justatheory left
[22:18] *** vel left
[22:18] *** exp_evalbot left
[22:18] *** mr_ank left
[22:18] *** awwaiid left
[22:18] *** nipra_ left
[22:18] *** nothingmuch left
[22:18] *** yahooooo left
[22:18] *** Tene left
[22:18] *** jiing left
[22:18] *** silug left
[22:18] *** pnu left
[22:18] *** devogon left
[22:18] *** nekokak left
[22:18] *** Khisanth left
[22:18] *** moritz_ left
[22:18] *** statico left
[22:18] *** nnunley_ left
[22:18] *** buu left
[22:18] *** obra left
[22:19] *** TimToady joined
[22:19] *** gugod joined
[22:19] *** kolibrie joined
[22:19] *** ajs joined
[22:19] *** cls_bsd joined
[22:19] *** SubStack joined
[22:19] *** dalek joined
[22:19] *** baest joined
[22:19] *** arcady joined
[22:19] *** marmic joined
[22:19] *** rfordinal_ joined
[22:19] *** ofer joined
[22:19] *** araujo joined
[22:19] *** GeJ_ joined
[22:19] *** daxim_ joined
[22:19] *** penk joined
[22:19] *** yahooooo joined
[22:19] *** Tene joined
[22:19] *** jiing joined
[22:19] *** jBoofy joined
[22:19] *** ft joined
[22:19] *** bloonix joined
[22:19] *** nothingmuch joined
[22:19] *** nipra_ joined
[22:19] *** awwaiid joined
[22:19] *** mr_ank joined
[22:19] *** exp_evalbot joined
[22:19] *** vel joined
[22:19] *** justatheory joined
[22:19] *** thoughtpolice joined
[22:19] *** buu joined
[22:19] *** nnunley_ joined
[22:19] *** statico joined
[22:19] *** obra joined
[22:19] *** moritz_ joined
[22:19] *** SamB joined
[22:19] *** Caelum joined
[22:19] *** Juerd joined
[22:19] *** Khisanth joined
[22:19] *** nekokak joined
[22:19] *** devogon joined
[22:19] *** pnu joined
[22:19] *** silug joined
[22:19] *** mtve joined
[22:19] *** TreyHarris joined
[22:19] *** LCamel joined
[22:19] *** hcchien joined
[22:19] *** nelhage joined
[22:19] *** orafu joined
[22:19] *** pugs_svnbot joined
[22:19] *** ingy joined
[22:19] *** irc.freenode.net sets mode: +o TimToady

[22:19] *** broquaint joined
[22:19] *** sri_ joined
[22:19] *** avar joined
[22:19] *** diotalevi joined
[22:19] *** diakopter joined
[22:19] *** Daveman joined
[22:19] *** kcwu joined
[22:19] *** zamolxes joined
[22:19] *** Patterner joined
[22:19] *** dduncan joined
[22:19] *** [particle] joined
[22:19] *** drupek12 joined
[22:19] *** wilx joined
[22:19] *** buubot joined
[22:19] *** melissa joined
[22:19] *** shachaf joined
[22:19] *** jeremyb joined
[22:19] *** lisppaste3 joined
[22:19] *** idiotmax joined
[22:19] *** PerlJam joined
[22:19] *** wolverian joined
[22:19] *** dvorak joined
[22:19] *** thepler joined
[22:19] *** shmem joined
[22:19] *** beppu joined
[22:19] *** perlbot joined
[22:19] *** jjore-1 joined
[22:19] *** Lunchy_ joined
[22:19] *** audreyt joined
[22:19] *** CindyLinz joined
[22:19] *** rafl joined
[22:19] *** pravus joined
[22:19] *** lumi joined
[22:19] *** arguile joined
[22:19] *** jrockway joined
[22:19] *** Eidolos joined
[22:19] *** amnesiac joined
[22:19] *** elmex joined
[22:19] *** Qiang joined
[22:19] *** _Helios joined
[22:19] *** Casan joined
[22:19] *** zostay joined
[22:19] *** _go_ joined
[22:19] *** onebadoze joined
[22:19] *** drbean joined
[22:19] *** aindilis joined
[22:19] *** lambdabot joined
[22:19] *** test joined
[22:19] *** sunnavy joined
[22:19] *** charsbr joined
[22:19] *** agentzh joined
[22:19] *** qmole joined
[22:19] *** vsmatck joined
[22:19] *** lidden joined
[22:19] *** platypus joined
[22:19] *** ruz joined
[22:19] *** Maddingue joined
[22:19] *** allbery_b joined
[22:19] *** liffey joined
[22:19] *** clkao joined
[22:19] *** jql joined
[22:19] *** nipotaway joined
[22:20] *** turrepurre joined
[22:20] *** r0bby joined
[22:20] *** theorb joined
[22:20] *** takanori joined
[22:20] *** felipe joined
[22:20] *** f0rth joined
[22:20] *** pjcj_ joined
[22:20] *** mncharity joined
[22:20] *** Gothmog_ joined
[22:20] *** Grrrr joined
[22:20] *** ting joined
[22:20] *** meppl joined
[22:20] *** cerridwen joined
[22:20] *** knewt joined
[22:20] *** rhr joined
[22:20] *** jernster joined
[22:20] *** tcliou joined
[22:20] *** szbalint joined
[22:20] *** cj joined
[22:20] *** ChanServ sets mode: -o TimToady

[22:24] *** amnesiac left
[22:27] *** Limbic_Region joined
[22:27] *** garulfounix joined
[22:27] *** garulfounix left
[22:35] *** [particle] left
[22:37] *** REPLeffect_ joined
[22:38] *** arrowax joined
[22:44] *** [particle] joined
[22:48] *** REPLeffect_ is now known as REPLeffect

[23:31] *** REPLeffect left
[23:33] *** xinming_ joined
[23:34] *** xinming left
[23:39] *** arrowax left
[23:47] *** justatheory left
[23:51] *** thoughtpolice left
