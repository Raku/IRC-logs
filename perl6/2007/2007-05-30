[00:04] *** theorbtwo joined
[00:41] <thoughtpolice> has .wrap not been implemented yet? pugs is reporting no .wrap method in class Sub, although .wrap is defined for Routine's. Anybody got an idea?

[00:41] <perlmonkey2> Is there a way to force perl5 to give back memory from its memory hash?

[00:43] <perlmonkey2> heap deallocation :)

[00:46] *** nipotaway is now known as nipotan

[01:05] <Caelum> perlmonkey2: if you compile it with the system malloc on a system that supports it

[01:15] <thoughtpolice> woo, done with round 2 :)

[01:15] <thoughtpolice> http://diveintoperl6.blogspot.com/2007/05/perl-6-round-2.html

[01:15] <lambdabot> Title: Dive into Perl 6: Perl 6: Round 2

[01:17] <avar> You might want to mention after "The above could also have been started with:" that ($a, $b, $c --> String makes them all String, not just $c

[01:17] <avar> that is what it does, right?

[01:22] <daxim> give a reminder what the ~ does when you use it for the first time

[01:22] <avar> but this is very cool:)

[01:23] <avar> thoughtpolice++

[01:27] <daxim> there's a HTML escaping mistake in the cool refrigerator example

[01:28] <Aankhen``> avar: Haven't read the post yet, but is the --> String from a signature?  If so, it indicates the return type.

[01:28] <avar> ah

[01:29] <avar> has sub ($x) return Str {} been dropped?

[01:29] <Aankhen``> No, you can still say sub foo (...) returns Bar { ... }

[01:29] <Aankhen``> I don't remember the relationship between returns Bar, of Bar and --> Bar, I'm afraid.

[01:31] <TimToady> those three are now synonymous, and the coercion type, if any, is the "as" type

[01:31] <Aankhen``> Ah, okay.

[01:31] <Aankhen``> "coercion type" means it tries to automatically coerce the return value, right?

[01:31] <TimToady> basically just saves you from having to put the same coercion on all the return statements

[01:32] <Aankhen``> Okey.

[01:32] <TimToady> but generally you just want to declare the return type officially, which also coerces, I think

[01:32] <avar> ?eval sub anon as Str { 5 } anon

[01:32] <Aankhen``> I see.

[01:32] *** evalbot_r16553 is now known as evalbot_r16560

[01:32] <evalbot_r16560> Error: ␤Unexpected "as"␤expecting "handles", "is", bare trait, subroutine parameters, trait or block

[01:32] <TimToady> not implemented that way yet, of course

[01:33] <avar> hrm, anyway the version that works would mean "" ~ 5 basically?

[01:33] <TimToady> since it was just renamed last week...

[01:33] <TimToady> yes

[01:33] <avar> neat

[01:34] <TimToady> "as" is basically for being more strict in what you return than in what you claim to return.

[01:34] <TimToady> dunno if it's actually a useful context...

[01:34] <TimToady> *concept

[01:37] *** araujo joined
[01:40] *** dolmans joined
[02:01] <dduncan> TimToady, having now caught up with p6l posts, I've replied to r14407 and recommend renaming Object to Universal ... also, I agree with Any being the complement of Junction under Universal/Object

[02:01] <dduncan> rationale was given there

[02:02] *** SubStack joined
[02:14] <Aankhen``> Maybe "Any" should be "Scalar".

[02:14] * Aankhen`` ducks.

[02:35] *** kaether_ joined
[02:55] *** ilogger2 joined
[02:55] *** kaether_ joined
[02:55] *** kaether_ is now known as kaether

[03:17] *** mako132_ joined
[03:20] *** kanru joined
[03:21] *** amnesiac joined
[03:26] *** daxim_ joined
[03:30] <perlmonkey2> Is it too late to have Perl6 with dynamic heap allocation that will both grow and shrink?

[03:31] <dduncan> that's an implementation detail

[03:31] <dduncan> and generally not something that users worry about

[03:32] <dduncan> or please clarify your question

[03:33] <perlmonkey2> dduncan: I just spent the last 5 days straight tracking down a "memory leak" in Perl5 that wasn't a leak at all.  I was simply at one point using 1.4 gigs of ram, which mean the perl interpreter kept 1.4 gigs of ram in the hash, even though it only needed it for a few seconds.

[03:34] <perlmonkey2> dduncan: Apparently I'm mildly retarded and should have known that most languages don't normally give back memory once allocated to the process.  This was a painful lesson and not intuative.

[03:34] <dduncan> the behaviour you refer to is implementation dependent ... but I would anticipate that smart backends will handle memory efficiently

[03:34] <dduncan> that's why virtual address spaces are useful, one reason

[03:35] <dduncan> er

[03:35] <dduncan> whatever

[03:35] <dduncan> on this discussion point, maybe you will want to experiment with Pugs

[03:36] <dduncan> try making a really big hash, then deallocate it and see what happens

[03:36] *** stevan_ joined
[03:36] <perlmonkey2> I'm supposed to be helping test Pugs, but I'm drowning at work (at least until this Friday) and then I'm committed to a small WebGUI project.  Then I'll have time to work on Pugs/P6.

[03:44] <dduncan> okay

[04:10] <Aankhen``> rhr: Looking at unitsdat-grammar.pm again, and wondering if there was a reason for using `die` instead of `fail`??

[04:10] <Aankhen``> s/\?//

[04:17] *** justatheory joined
[05:02] *** buetow joined
[05:04] *** devogon joined
[05:06] *** BooK_ joined
[05:30] *** kanru joined
[05:38] *** obvio171 joined
[05:42] <svnbot6> r16561 | Darren_Duncan++ | ext/QDRDBMS/ : added the Tuple and Relation node types to AST.pm

[05:45] *** obvio171 joined
[05:48] *** mjk joined
[05:54] *** obvio171 joined
[06:00] *** obvio171 joined
[06:04] *** obvio171_ joined
[06:05] *** obvio171_ is now known as obvio171

[06:06] *** ahmadz joined
[06:08] *** jisom joined
[06:10] <meppl> good morning

[06:14] <ahmadz> good morning

[06:16] <meppl> good morning ahmadz

[06:17] <dduncan> good morning

[06:18] *** franck__ joined
[06:21] *** buetow joined
[06:25] *** Averell joined
[06:26] <gaal> moose all

[06:27] <lumi> Merry moose to you, too

[06:28] <meppl> good morning dduncan

[06:28] <dduncan> aye

[06:35] *** franck___ joined
[06:37] *** weinigLap joined
[06:38] *** bpalmer joined
[06:40] *** pbuetow joined
[06:41] *** dolmans joined
[06:43] *** miyagawa joined
[06:44] *** VanilleBert joined
[06:59] *** iblechbot joined
[07:09] <svnbot6> r16562 | Darren_Duncan++ | ext/QDRDBMS/ : in AST.pm, fleshed out the Set|Seq|Bag node types

[07:38] <Tene> So, I've got a PEG, do I transform it to Perl 6 rules with vim or by writing a Perl 6 grammar to transform it for me?

[07:38] <svnbot6> r16563 | Darren_Duncan++ | ext/QDRDBMS/ : in AST.pm, added Maybe node type

[07:57] <Tene> ?eval 'foo' ~~ /<!before f> ./

[07:58] <evalbot_r16562> *** Cannot parse regex: <!before f> .␤*** Error: ␤Match.new(␤  ok => Bool::False, ␤  from => 0, ␤  to => 0, ␤  str => "", ␤  sub_pos => (), ␤  sub_named => {}␤)

[07:58] <Tene> Oh, right.

[07:59] <ahmadz> hi... how do i get commit access to svn?

[08:00] <Tene> ahmadz: just ask here in the channel!

[08:00] <ahmadz> Tene: cool

[08:00] <Tene> let's see if the web interface to add people to svn is loading today.

[08:01] <Tene> The box it runs on has load issues sometimes.

[08:01] *** buetow joined
[08:02] <Tene> Also to discover if it works in a text-only browser. ;)

[08:03] <Tene> Hmm.  It's not loading in links... anyone else up to give out a commit bit, or should I give in and load X?

[08:04] *** rindolf joined
[08:06] <Tene> Hi, shlomi!

[08:06] *** rissy joined
[08:13] <rindolf> Hi Tene 

[08:13] <dduncan> I can give out commit bits, assuming I remember the url

[08:13] <rindolf> Tene: please call me rindolf here so your addressing will be highlighted.

[08:14] <dduncan> whomever needs one, state your email address

[08:14] <Tene> dduncan: http://commitbit.pugscode.org/

[08:14] <dduncan> yes

[08:14] <dduncan> I just found that out via Google too

[08:14] <Tene> rindolf: okay.

[08:14] <dduncan> "commitbit pugs"

[08:14] <lambdabot> Title: Welcome to CommitBit for PugsCode

[08:15] <dduncan> that said, its being slow to load

[08:15] <Tene> ahmadz: please give dduncan your email address so that he can give you svn commit access

[08:15] <rindolf> Tene: thanks.

[08:27] <dduncan> I seem to be having trouble logging into that site ... as I recall it used to work a few months ago

[08:27] <dduncan> but I do know I have admin privs

[08:28] <dduncan> I'll try again tomorrow, good night

[08:35] <ingy> hola

[08:37] <rindolf> Hi ingy 

[08:37] <rindolf> ingy: I saw you uploaded a new ver of YAML::LibYAML

[08:38] <ingy> rindolf: yes

[08:39] <ingy> handles blessed stuff

[08:39] <ingy> basically handles 98% of perl stuff

[08:39] <ingy> now time for the fun stuff :)

[08:40] <gaal> ingy: cool! REs, too?

[08:40] <gaal> cycles?

[08:40] <gaal> streaming docs?

[08:41] * Aankhen`` streams gaal at 96 Kbps.

[08:41] <ingy> cycles are done

[08:41] <gaal> ossum

[08:41] <Aankhen``> rindolf: Can't your IRC client handle highlighting something that isn't necessarily your nick?

[08:41] <gaal> Aankhen``: moose! Is that VBR?

[08:42] <Aankhen``> gaal: No, sorry, it's CBR. :-(

[08:42] <Aankhen``> And mono, at that.

[08:43] <gaal> sonds ike i'l b chppy

[08:43] <Aankhen``> Yeh.

[08:43] <Aankhen``> I had to work with the materials I was given.

[08:43] <Aankhen``> On the plus side, how many people do you know who can be streamed?

[08:44] <Tene> Aankhen``: probably, but perhaps he doesn't want to bother setting it up to do so.

[08:44] <Aankhen``> Tene: Seems like it would be easier than telling people to say "rindolf" if they want to get his attention. *shrugs*

[08:44] <gaal> telling's the easy part

[08:44] <rindolf> Aankhen``: maybe it can.

[08:45] <rindolf> Aankhen``: but it's good practice to address someone by my nick.

[08:45] <ingy> > ysh -MYAML::LibYAML

[08:45] <ingy> ysh > --- &foo [*foo]

[08:45] <ingy> yaml> ...

[08:45] <ingy> $VAR1 = [ $VAR1

[08:45] <ingy> ];

[08:45] <lambdabot>   Not in scope: type constructor or class `LibYAML'

[08:45] <Tene> Aankhen``: I've learned to avoid asking questions about people's IRC habits and client preferences.  It's worse than religion sometimes.. ;)

[08:45] <ingy> :)

[08:45] <Aankhen``> Tene: LOL. True, true.

[08:45] <rindolf> It's similar to the fact you need to paste fully-qualified URLs.

[08:45] <Aankhen``> No, not really.

[08:45] <Aankhen``> URIs are intended for consumption by computers.

[08:46] <ingy> gaal: nice eh?

[08:46] <gaal> it's only good practice if the someone is you, otherwise it could get really confusing

[08:46] <gaal> yay :)

[08:46] <gaal> the cat is chasing its tail

[08:46] <Aankhen``> LMAO gaal.

[08:46] <gaal> ingy: typeglobs are easy though, aren't they?

[08:47] <gaal> just make the switch-case nonterminal

[08:47] <gaal> I did that in Class::Rebless, iirc

[08:47] <ingy> ysh > *foo

[08:47] <ingy> --- !!perl/glob:

[08:47] <ingy> PACKAGE: main

[08:47] <ingy> NAME: foo

[08:47] <ingy> SCALAR: 1

[08:48] <ingy> that's YAML.pm

[08:48] <ingy> I need to do that

[08:48] <pasteling> "rindolf" at 82.81.224.167 pasted "Question to Paul Graham" (29 lines, 1.2K) at http://sial.org/pbot/25246

[08:48] <ingy> convert the glob into a hash

[08:48] <ingy> a 6 sided hash

[08:48] <ingy> ;)

[08:48] <gaal> sounds much easier than what you'd already accomplished here...

[08:49] <ingy> the perl_syck code seems pretty unclean

[08:49] <ingy> I'm taking code from there

[08:49] <ingy> but want to clean it up

[08:49] <ingy> make it sexy

[08:50] <ingy> there doesn't seem like too much is hard

[08:51] <gaal> remember though that perl distinguishes between an undef value and a missing slot in globs too

[08:51] <ingy> I don't like the New/SafeFree stuff from tags

[08:51] * gaal isn't familiar with that

[08:52] <ingy> gaal: can you express that in code?

[08:52] <ingy> not sure I follow

[08:52] <gaal> "unsupported: Format refs" !?!! lol

[08:52] <gaal> do you mean Perl 5 formats?

[08:52] <ingy> yes

[08:53] <gaal> ingy: oh, just the minor thing that AFAIR, once you do *foo = \1, *foo has a SCALAR slot that can't be removed

[08:53] <gaal> but it doesn't exist before that

[08:53] <gaal> likewise for code etc.

[08:53] <ingy> I'm surprised at how sexy Dumps from the libyaml emitter look

[08:53] <ingy> it knows when to keep stuf on the same line

[08:53] <gaal> as opposed to? ah

[08:53] <gaal> cool

[08:54] <ingy> syck isn't quite as good at that

[08:54] <gaal> is its throughput better than syck's? if it is we might use libyaml to speed up pugs

[08:54] <ingy> so far

[08:55] <gaal> we inline everything in the bytecode emitter so that's not an issue there at least

[08:55] <gaal> because it results in smaller bytecode which directly translates to faster startup in pugs

[08:55] <ingy> i want to start s/syck/libyaml/ in pugs soon

[08:55] <gaal> audrey also put in that mad compressor

[08:55] *** andara joined
[08:56] <gaal> did you see that stuff? it's crazy

[08:56] <ingy> no

[08:56] <ingy> what is it?

[08:57] <gaal> maximal sharing; it caches objects and anchors back to things that had already been emitted

[08:57] <gaal> &1 moose and *1 all over the place

[08:57] <gaal> utterly impossible to read for humans, really

[08:58] <ingy> oh neat

[08:59] <ingy> ysh > [[42]]

[08:59] <ingy> ---

[08:59] <ingy> - - 42

[08:59] <ingy> that's libyaml

[08:59] <ingy> syck is

[08:59] <ingy> --- 

[08:59] <ingy> - 

[08:59] <ingy>   - 42

[09:01] <ingy> wow. the dump of {foo => [[42]]} is better too

[09:01] <gaal> cool; sounds like userland .yaml would benefit from it, too

[09:01] <ingy> it uses the zero indent array in hash feature

[09:01] <ingy> foo:

[09:01] <ingy> - - 42

[09:01] <gaal> what does that look like? /me isn't up to spec

[09:02] <gaal> you can do that? huh.

[09:02] <gaal> looks a little anti-yaml

[09:02] <gaal> what ends foo? another :   ?

[09:02] <ingy> yes, technically the '-' counts towards the indentation

[09:02] <gaal> nod

[09:02] <ingy> or somesuch

[09:02] <ingy> it all works out nicely

[09:03] <ingy> do you know about yaml set notation?

[09:04] <gaal> nope, what's it like?

[09:04] <gaal> need the parser enforce uniqueness?

[09:04] <ingy> {foo, bar}

[09:04] <ingy> same as {foo: ~, bar: ~}

[09:05] <ingy> and ordered map notation

[09:05] <gaal> hmmm that sounds slow to parse

[09:05] <gaal> or maybe you can get away with only looking ahead one token

[09:05] <gaal> like, {foo} is a singleton set, not a map

[09:06] <gaal> and {foo:} is an error

[09:06] <ingy> well it's still a map really

[09:06] *** felipe joined
[09:06] <gaal> ordered maps would be [foo: bar, elk: caribou], yes?

[09:06] <gaal> # guess

[09:07] <ingy> yes!

[09:07] <ingy> you++

[09:07] <Aankhen``> perlbot, karma you

[09:07] <perlbot> Karma for you: -11

[09:07] <jabbot> Aankhen``: you has karma of 9

[09:07] <gaal> so, that's sugar to [{foo: bar}, {elk: caribou}]

[09:07] <ingy> right

[09:07] <ingy> clark realized that they were useful invalid yaml

[09:07] <gaal> heh

[09:08] <ingy> this was the last time we met in Portland

[09:08] <gaal> the question is when to emit them that way

[09:09] <ingy> syck does these both right

[09:09] <ingy> libyaml makes the set values '' instead of undef

[09:09] <gaal> e.g. if one dataset happens to be unique, but isn't schemed to be a Set, then emitting it as if it were is slightly bogus

[09:09] * ingy writes a test :)

[09:10] <gaal> because it can give the impression that this node always represents a set

[09:10] <gaal> brrb

[09:10] <gaal> nub r

[09:10] <ingy> y emitters do this

[09:10] <ingy> I'm not sure any emitters do this

[09:11] <ingy> more of a human written and yaml loaded kind of thing

[09:11] <lumi> rindolf: Your client supports arbitrary highlights

[09:11] <rindolf> lumi: yes, I know.

[09:12] <rindolf> lumi: but people should still address people by their nick.

[09:12] <gaal> ok, i'm off to lunch &

[09:12] <ingy> gaal: yaml really needs a schema language

[09:12] <ingy> bye

[09:12] <gaal> i thought it had one?

[09:12] <gaal> but yeah, bye :)

[09:18] *** elmex joined
[09:26] <moritz> ahmadz: did you get a commit bit by now?

[09:31] <Tene> moritz: I don't think so.  dduncan couldn't get it to work, and said he'd try again tomorrow.

[09:31] <ahmadz> moritz: sorry i was away in a meeting

[09:32] <ahmadz> moritz: i need a commit bit... i sent you my email address...

[09:32] * moritz didn't receive anything

[09:33] <moritz> ahmadz: you can't /msg on freenode unless you are registered :(

[09:33] <ahmadz> no problem... it is [email@hidden.address]
[09:33] <Tene> moritz: /msg nickserv set unfiltered on

[09:33] <moritz> Tene: thanks ;)

[09:34] <ahmadz> the commit pugs site is slow since feather had an uptime of 11 at one time

[09:34] <moritz> I'm not registered either, so that doesn't work ;)

[09:34] <Tene> heh

[09:34] <moritz> ahmadz: ok, I send the request, hopefully in a few minutes time you'll receive a mail

[09:35] <moritz> ahmadz: if not, please poke me again

[09:35] <ahmadz> moritz: thx

[09:35] <ahmadz> i will be working on updating runpugs this weekend to a true ajax interface with examples

[09:36] <ingy> gaal: fixed loading plain empty as undef instead of empty string

[09:37] <moritz> ahmadz: cool ;)

[09:37] <ingy> YAML-LibYAML-0.14

[09:37] <moritz> it says "Created

[09:37] * ingy always skips 0.13

[09:37] <moritz> " that's a good sign

[09:38] <ahmadz> quick question: do we have a perl6 pretty printer or syntax highlighter?

[09:38] <Tene> ahmadz: there's a syntax file for vim

[09:39] <moritz> and you can use Text::VimColor to turn perl 6 code into hilighted html

[09:40] <ahmadz> moritz, tene: cool i'll check it out

[09:40] <ahmadz> i got my commit bit but the server is so slow...

[09:40] <moritz> ahmadz: we know :(

[09:41] <moritz> but we haven't really found the bottleneck

[09:41] <ahmadz> runpugs does between 20-50 forked processes btw in the default config...

[09:43] <andara> ahmadz, hi!

[09:44] <ahmadz> andara: hi

[09:44] <andara> ahmadz: I'm back from hols. Good to see you got the commit bit

[09:45] <ahmadz> andara: i have been busy but i looked at runpugs yesterday and i found some things to fix in the documentation for a start

[09:46] <andara> great! I won't be able to work on it for the next few weeks, but then I'll get a better scheduler in

[09:48] <svnbot6> r16564 | azawawi++ | updated README to include required CPAN modules

[09:48] <andara> in practice, there are on average 10 pugs processes active for runpugs,  asleep most of the time, so that should not slow down feather much.

[09:48] <ahmadz> andara: looking forward to it... we're using termserv4.pl right?

[09:49] <andara> ahmadz: let me check...

[09:50] <ahmadz> andara: remind me again... where is the near-AJAX version of runpugs?

[09:52] <andara> ahmadz: I run termserv.pl; the near-AJAX version is in htdocs/runpugs/index.html with script runpugs.js

[09:52] <andara> ahmadz: and the mod_perl front-end is  perl/runpugs.pl

[09:55] <andara> ahmadz: in meeting now, back in an hour or so

[09:56] *** xinming joined
[09:56] *** isaacd joined
[09:59] <ahmadz> andara: ok

[10:07] *** bpalmer left
[10:17] *** VanilleBert left
[10:18] <gaal> ingy's an elevator?

[10:30] <Tene> ingyvator?

[10:31] <moritz> andara: are you going to visit debconf in edinburgh?

[10:33] *** mj41 joined
[10:35] *** beppu joined
[10:46] *** ruoso joined
[10:51] *** mj41 is now known as logs-parrot-lgp

[10:51] *** logs-parrot-lgp is now known as mj41

[10:52] *** mj41 joined
[10:53] *** mj41 left
[10:57] *** mj41 joined
[10:58] *** nipotan is now known as nipotaway

[10:59] *** prism joined
[11:00] *** chris2 joined
[11:09] <gaal> ingy: where's yaml-libyaml's svn?

[11:11] <gaal> ingy: uhhh tests seem to depend on YAML::Tiny...

[11:11] <gaal> not mentioned in the makefile

[11:31] *** avar joined
[11:45] *** zzzz joined
[11:45] *** zzzz is now known as ahmadz

[11:50] *** Limbic_Region joined
[11:51] *** isaacd_ joined
[11:58] <Limbic_Region> salutations all

[11:58] <moritz> hi L_R ;)

[12:02] <rindolf> Hi Limbic_Region 

[12:02] <rindolf> Limbic_Region: what's up?

[12:11] *** buetow joined
[12:11] <andara> moritz: I didn't know about it. Are non-debbers welcome? ;-)

[12:12] <moritz> andara: I think so ;)

[12:12] <moritz> andara: 17th to 24th of june iirc

[12:13] <andara> moritz: I could go on Wednesday or Thursday. How about you?

[12:14] <moritz> andara: I can/will go on all days, propably ;)

[12:14] <moritz> andara: my last exam is on 11/6/07, so if nothing goes wrong I have much time left ;)

[12:15] <andara> moritz: good for you :-)

[12:15] <moritz> yes ;)

[12:16] <andara> moritz: are these your finals?

[12:16] <moritz> andara: depends on your defintion of "final" ;)

[12:16] <moritz> andara: they are my master exams...

[12:16] <moritz> andara: but back home in germany I'll do my "Diplom" as well

[12:17] <andara> moritz: I see. You'll be multi-degreed ;-)

[12:17] <moritz> andara: hopefully... Heriot Watt's master degrees are not that good, so I try not to rely on them

[12:18] <Limbic_Region> sorry rindolf, wasn't paying attention.  Just getting settled into work and thinking about parallelized junctions 

[12:18] <moritz> andara: you can buy them for 40 Pounds ;)

[12:18] <rindolf> Limbic_Region: do you monitor the use.perl.org journals feed?

[12:18] <andara> moritz: I don't think Glasgow's are any better :-)

[12:18] <rindolf> Limbic_Region: I wrote this - http://use.perl.org/~Shlomi+Fish/journal/33364

[12:18] <lambdabot> Title: Journal of Shlomi Fish (918)

[12:19] <moritz> andara: depends on which "Glasgow" you mean...

[12:19] <rindolf> And it deteriorated into a personal criticism of me.

[12:19] <moritz> andara: I think glasgow university is better, calle perhaps not

[12:19] <andara> moritz: Glasgow Uni Comp Sci. The Advanced MSc is really good, the others less so

[12:20] <Limbic_Region> rindolf - it happens.  Humans by nature are subjective not objective.  I wouldn't worry about it too much

[12:23] <Limbic_Region> and rather, I should have said - I open ever single journal entry - I don't always read them.  

[12:24] <rindolf> Limbic_Region: OK.

[12:24] <rindolf> Limbic_Region: I personaly think that while humans are subjective they should always strive for objectivity.

[12:25] <rindolf> Limbic_Region: and there's a different between Objective/Factual/Moral and things that are a matter of taste.

[12:25] <rindolf> For example, Perl vs. Python is not always an objective discussion.

[12:25] <rindolf> Or chocolate ice cream vs. vanilla ice cream.

[12:26] <rgs> only if you deal with those disgusting heathens who pretend to like chocolate ice cream.

[12:28] *** theorbtwo joined
[12:29] <Limbic_Region> I can remember riding in the back seat of a car at night staring out the window looking at all the houses go by with the lights on

[12:29] <Limbic_Region> it was the first time I realized people had lives that existed outside of my own

[12:29] <moritz> Limbic_Region: you only imagine that ;)

[12:29] <Limbic_Region> it was much later in life that I realized people experienced the world differently from myself

[12:29] *** rfordinal_ joined
[12:30] <Limbic_Region> I still struggle with the fact that people do not think the same way I do, that there moral compass is not the same as my own, that - even after laying out a concrete argument for a position - they would still fail to see things my way

[12:32] <Limbic_Region> so sorry rindolf if you were attacked for no reason but humans are funny creatures

[12:34] <rindolf> Limbic_Region: I realise there are other people, but I still think Ethics is absolute and objective.

[12:36] *** knewt joined
[12:37] <Limbic_Region> wow

[12:37] <Limbic_Region> unfortunately, this is not the forum for exploring that statement but I could not disagree more

[12:38] <Limbic_Region> just to be clear though, you use the word Ethics as defined by http://dictionary.reference.com/browse/ethics right?  

[12:38] <lambdabot> Title: ethics - Definitions from Dictionary.com

[12:43] *** sahadev joined
[12:46] *** vel joined
[12:56] *** fglock joined
[13:05] *** rfordinal__ joined
[13:08] *** rfordinal__ is now known as rfordinal

[13:08] <svnbot6> r16565 | fglock++ | kp6-Perl6-roadmap.txt - added unsorted tasks after __END__

[13:08] <svnbot6> r16565 | fglock++ | - "phase III" needs to be split

[13:30] *** rodi joined
[13:34] *** stevan_ joined
[14:00] <rhr> Aankhen``: thanks for looking at it!  re: die vs. fail, that's a good question, I'm not sure exactly how error handling should work.

[14:00] *** SubStack joined
[14:01] <rhr> I think it should be more or less equivalent to normal type errors, since that's basically what they are

[14:04] <rhr> but I don't understand how exceptions work yet, etc. The one thing I have tried to do is to report all errors at unit-compile-time (which happens to often be runtime...)

[14:06] <rhr> suggestions are welcome :)

[14:06] *** fglock joined
[14:09] <fglock> I wonder if is it too late to add 'Inf' and 'NaN' to Perl 5

[14:10] <fglock> as core keywords or functions

[14:10] <rgs> yes it is

[14:10] <rgs> but you could use a module :)

[14:15] *** ruoso_ joined
[14:16] <fglock> rgs: I do - Set::Infinite and DateTime::Infinite implement their own "Inf"

[14:18] <fglock> rgs: thanks

[14:19] <rgs> fglock: you could also use bigint

[14:20] <rgs> actually perl 5 understands NaN

[14:21] <rgs> perl -wle 'print "NaN"=="NaN"'

[14:21] <rgs> prints nothing

[14:21] <rgs> which is the right thing

[14:22] <Limbic_Region> really?

[14:22] <Limbic_Region> I would have thought the right thing would have been the return code

[14:23] <rgs> the return code ?

[14:23] <fglock> rgs: weird - I never tried it with quotes :)

[14:23] <rgs> also, "Inf" works.

[14:23] <fglock> Inf seems to work too

[14:23] <fglock> yep

[14:23] <Limbic_Region> well, the return value of the evaluation as in 1 == 1 is true

[14:24] <rgs> Limbic_Region: certainly

[14:24] <rgs> but NaN is not equal to itself

[14:24] <rgs> according to the IEEE

[14:24] <Limbic_Region> so why is nothing the right thing?

[14:25] <Limbic_Region> oh, nevermind then.  If you had said, it prints nothing which in perl's world is "false" which is the right thing - I would have understood

[14:25] <fglock> rgs: is this documented? ( "Nan" and "Inf" do the right thing )

[14:25] <rgs> yes

[14:25] <clkao> *yawn*

[14:25] <rgs> hi cl

[14:25] <offby1> clkao: don't start that!!

[14:25] <fglock> clkao: yawn

[14:25] * offby1 barely stifles a yawn

[14:25] <clkao> sorry, all my fault

[14:25] <clkao> hello rgs!!

[14:29] <fglock> rgs: otoh, would it be possible to define what these values stringify to, instead of relying on the C library? Windows, OSX and Linux have different results

[14:30] <rgs> like what?

[14:31] <fglock> perl -e ' use strict; my $a = "NaN" + 0; print $a '  # nan on OSX

[14:31] <rgs> on my linux and freebsd too

[14:34] <fglock> hmm - it just doesn't work in windows - 'NaN' is just a string (perl 5.8.7)

[14:34] <fglock> isn't this relying on atof() or something?

[14:37] <rgs> yes

[14:38] <fglock> so it depends on which C library my perl uses

[14:44] *** kanru joined
[14:53] <svnbot6> r16566 | fglock++ | kp6-Perl6-roadmap.txt - 2 more phases

[14:56] *** b_jonas joined
[14:56] <b_jonas> this is wierd

[14:56] <b_jonas> http://www.perlmonks.com/?node_id=618036 says that $foo.$bar is an indirect method call like $foo->$bar in p5

[14:56] <lambdabot> Title: Re^3: &#91;Perl 6&#93; Any provision for a "dereferencing object"?

[14:57] <b_jonas> for some reason, I had the impression that $foo.$bar called the method <bar> in scalar context, and the indirect call was written as $foo.<$bar>

[14:57] <b_jonas> did that change or is that only my imagination?

[15:02] <b_jonas> hmm

[15:02] *** silug joined
[15:03] <b_jonas> S12 says it's $.foo that calls self.foo in scalar context

[15:03] <moritz> but that's not what you meant

[15:04] <moritz> ?eval class Foo { method bar { say "bar" } } my $f = Foo.new(); my $b="bar"; $f.$b

[15:04] <evalbot_r16565> OUTPUT[bar␤] (Bool::True,)

[15:04] <moritz> so if pugs is correct, it is an indirect method call indeed

[15:07] <b_jonas> yep

[15:07] <b_jonas> doe the .<$b> form work too?

[15:07] <b_jonas> ?eval class Foo { method bar { say "bar" } } my $f = Foo.new(); my $b="bar"; $f.<$b>

[15:07] <evalbot_r16565> \undef

[15:08] <moritz> <...> is an array constructor

[15:08] <moritz> ?eval class Foo { method bar { say "bar" } } my $f = Foo.new(); $f.<bar>

[15:09] <evalbot_r16565> \undef

[15:12] *** pbuetow joined
[15:12] <b_jonas> and .<$b> is hash indexing anyway

[15:14] <lumi> .<$b> is like .{'$b'}

[15:14] <b_jonas> yep

[15:24] * moritz wants circumfix<.oO( )Oo.> ;-)

[15:32] *** ruoso__ joined
[15:34] *** aukjan|gone joined
[15:35] <offby1> ℠®™©Or this©™®℠

[15:38] *** araujo joined
[15:40] <gaal> that's what, the encumberence operator?

[15:41] <moritz> virtual reality operator?

[15:42] <gaal> your one is pronounced "hmmm", I guess

[15:42] *** weinigLap joined
[15:52] <offby1> gaal: it's the if-I-sprinkle-enough-magical-anti-lawyer-fairy-dust-maybe-I-won't-get-sued operator

[15:56] <gaal> is it maybe i won't get sued, or maybe i can take money just by suing others?

[16:13] <spinclad> offby1: looks to me like lawyer-fairy-dust rather than anti-

[16:13] *** aukjan|gone joined
[16:15] <gaal> omnivisiblol: http://www.ee0r.com/lolckyhorror/index.html

[16:15] <lambdabot> Title: "The LOLcky Horror Picture Show" by Elliott C. Evans

[16:22] *** fglock joined
[16:23] *** justatheory joined
[16:30] *** andara left
[16:32] *** weinigLap joined
[16:33] <svnbot6> r16567 | moritz++ | [irclog] color reform: the 5 most active nicks get colors assigned statically,

[16:33] <svnbot6> r16567 | moritz++ | and a few more color combinations are avlable.

[16:33] <svnbot6> r16567 | moritz++ | If the contrast ist too low for a nick, please tell me so

[16:33] *** franck__ joined
[16:38] <gaal> what, no color auction? :)

[16:39] <moritz> there are 3 or 4 colors left over that will go to the highest bidding nick ;)

[16:40] *** weinigLap joined
[16:41] <gaal> whee i got silver

[16:48] *** ruz joined
[17:00] <thoughtpolice> oi

[17:00] <thoughtpolice> i have i missed anything in about, the past 18 hours? i hope not.

[17:05] *** aukjan211 joined
[17:05] *** aukjan211 is now known as aukjan

[17:08] <fglock> thoughtpolice: you can find out at http://irc.pugscode.org/

[17:08] <lambdabot> Title: IRC log for #perl6

[17:09] <thoughtpolice> hah. :o

[17:10] *** rodi left
[17:13] *** isaacd__ joined
[17:17] *** drupek12 joined
[17:20] *** ahmadz joined
[17:20] <ahmadz> hi

[17:26] <gaal> hello ahmadz 

[17:37] *** Lunchy joined
[17:41] *** Psyche^ joined
[17:41] *** Psyche^ is now known as Patterner

[17:44] <moritz> hi

[17:45] <fglock> hi

[17:45] <TimToady> lo

[17:47] <Tene> I'm having some severe performance problems with some p6 rules iin pugs.  Is that likely to be poor architecture (machine translated from PEG) or problems with pugs' implementation?

[17:48] <avar> p6 rules in pugs seem to be pretty slow

[17:48] <fglock> Tene: most likely related to Pugs::Compiler::Rule performance, or the bridging code; but can you give an example?

[17:49] *** dduncan joined
[17:49] <fglock> do you mean PGE?

[17:49] *** dduncan left
[17:50] <Tene> It's a pretty complicated grammar.  It was heavily modified by someone who didn't have any experience with parsers.  I spent a few horus last night trying to track down a specific subset of rules that seem to terminate and rules that don't, but I didn't get very far.

[17:50] *** dduncan joined
[17:50] <moritz> Tene: if you can't how should the compiler to it? *g*

[17:50] <Tene> Heh. :)

[17:51] <Tene> fglock: no, I mean PEG

[17:51] <Tene> http://en.wikipedia.org/wiki/Parsing_expression_grammar

[17:51] <lambdabot> Title: Parsing expression grammar - Wikipedia, the free encyclopedia

[17:53] <Tene> I finally decided to get some sleep and see if there was a "rules have many known problems right now" response to that question after I woke up.

[17:54] <moritz> Tene: "rules have many known proglems right now"

[17:55] <Tene> http://allalone.org/lojban-parse.pl btw

[17:55] <Tene> The parts that do work are quite promising.

[18:00] *** iblechbot joined
[18:02] <TimToady> the current definition of p6 rules is quite PEGlike, but pugs doesn't really do longest-token yet.  though we can emulate that to some extent by rule ordering at the moment.

[18:03] *** [particle] joined
[18:04] *** [particle] left
[18:06] *** [particle] joined
[18:14] *** PapaChub joined
[18:18] *** Loro_ joined
[18:27] *** jisom joined
[18:38] *** japhb joined
[18:47] *** jisom_ joined
[18:47] <svnbot6> r16568 | Darren_Duncan++ | ext/QDRDBMS/ : in AST.pm, removed all the (Set|Seq|Bag|Maybe)Sel node types, now redundant with the RelationSel node type

[18:51] <japhb> moritz: noticing http://moritz.faui2k3.org/irclog/out.pl?channel=perl6;date=2007-05-30#id_l357 , you may want to do automatic email address hiding for the logs ....

[18:51] <lambdabot> Title: IRC log for #perl6, http://tinyurl.com/yuk69w

[18:55] *** vel joined
[19:00] <lumi> japhb: There already is -- that @ is a picture

[19:01] <japhb> lumi: nice!  It fit the font perfectly, so I didn't notice.

[19:01] * japhb is duly impressed

[19:01] <TimToady> sneaky!

[19:02] *** rindolf joined
[19:02] <japhb> But it brought up another apparent bug -- either lambdabot or tinyurl did not capture the #fragment identifier, so the tinyurl just points to the top of the page ....

[19:03] <daxim_> for some reason, konqueror doesn't jump there

[19:04] <daxim_> though it should

[19:05] *** the_dormant joined
[19:19] *** jhorwitz joined
[19:36] *** larsen_ joined
[19:38] *** perlmonkey2 joined
[19:38] <perlmonkey2> Anyone know if the Perl5 memory heap suffers from fragmentation problems if many large data structures are quickly allocated and deallocated?

[19:45] *** penk joined
[19:47] *** ahmadz_ joined
[19:55] <japhb> perlmonkey2: I believe that depends completely on whether you are using the system malloc or Perl's internal malloc ... 

[19:56] <japhb> It has been quite some time since I read about it, but IIRC on most modern platforms perl by default uses the system malloc, because current mallocs are usually pretty well tuned.

[19:57] <Tene> What bot is producing the web-visible logs?

[19:58] <perlmonkey2> japhb: Cool, thanks.  

[19:58] <Tene> it's not examples/network/logbot.pl

[20:00] <Tene> oh, examples/irclog2html.pl

[20:01] *** weinigLap_ joined
[20:01] <svnbot6> r16569 | fglock++ | kp6-Perl6-roadmap.txt - prioritize the Perl6-STD devel track

[20:02] *** weinigLap_ joined
[20:06] *** Jmax joined
[20:06] <fglock> I read that "prioritizing can be time well-spent or a useful excuse for procrastinators"

[20:07] <daxim_> I'm too lazy to think about that, I'll do it later

[20:08] *** ahmadz joined
[20:08] <offby1> I'll think about that, but only after I've thought about lunch, and my trip

[20:10] *** polettix joined
[20:12] <moritz> japhb: re email hiding... I already do. The '@' is displayed as an image

[20:12] <moritz> japhb: I hope that's enough ;)

[20:12] <moritz> japhb: it you didn't notice it's fairly unobstrusive at least ;)

[20:14] <japhb> moritz: yep, lumi already pointed that out.  Works perfectly.  :-)

[20:15] <moritz> ok, I didn't backlog all the way, just scrolled to the hilighted line ;)

[20:28] <thoughtpolice> should zip not truncate a resulting list if one of the two being zipped is of a shorter length than the other? i.e. "zip 1..50,'a'..'z'" produces 50 sets of pairs, rather than 26. i'm wondering because otherwise you're just left with extraneous values afterwords that have an undef stuck inside.

[20:29] <thoughtpolice> my thoughts are leaning towards this being a bug, rather than a feature.

[20:30] <Tene> thoughtpolice: consider various usage scenarios for 'zip'

[20:34] <moritz> thoughtpolice: if want to do something like map {$_[0] + $_[1]} (@a zip @b), then the extraneous values are propably what you want

[20:34] <moritz> of course you could do that with a hyperoperator, but you get the picture

[20:34] <Tene> It's generally bad practice to silently discard values, I believe.

[20:35] <thoughtpolice> what about if you were doing something along the lines of an infinate list? i.e. zip 1...,@a if you wanted to give an order to an array of values (something like haskell's Data.Map)

[20:36] <moritz> thoughtpolice: then you'll get an "out of memory" exception :(

[20:36] <thoughtpolice> :(

[20:36] <moritz> but good point

[20:37] <thoughtpolice> maybe it's just because I come from Haskell.

[20:37] <TimToady> the default changed on this but pugs hasn't caught up

[20:38] <fglock> thoughtpolice: the "pil-run" implementation handled such things as special cases; most of the time it just worked

[20:38] <TimToady> you can replicate the final value of a list by putting ,* on the end

[20:38] <moritz> actually I don't know if lazy lists in p6 are just a tool to do cool iterator stuff, or if they should be as tightly integrated as in haskell

[20:38] <TimToady> so the spec switched to "shortest" semantics

[20:39] <moritz> ?eval 1..2 Z 'a'..'c'

[20:39] <evalbot_r16569> ((1, "a"), (2, "b"), (undef, "c"))

[20:39] <TimToady> that's the old semantics

[20:40] <Tene> And what if you don't know which list might be longer?  add ,* to both?

[20:40] <moritz> was that undef really specced?

[20:40] <Tene> ?eval 1..3,* Z 'a'..'c',*

[20:40] <moritz> I always assumed the last array should contain just one value

[20:40] <evalbot_r16569> ((1, "a"), (2, "b"), (3, "c"), (Inf, Inf))

[20:40] <TimToady> ?eval 1..2,undef,* Z 'a'..'c'

[20:41] <evalbot_r16569> ((1, "a"), (2, "b"), (undef, "c"), (Inf, undef))

[20:41] <thoughtpolice> it's just I was dealing with doing somewhat functional programming in perl 6 (blog interlude) and laziness came up, i messed around with zip and it didn't work as expected (in haskell, values are truncated if one list is longer than the next)

[20:41] <thoughtpolice> so I was primarily wondering; I wrote a filter function as an example, so if I need to I might just chain zip to my filter if I can.

[20:41] <TimToady> as I say, it's newly specced to truncate but pugs does the old spec

[20:41] <fglock> hmm - pil-run is gone from pugs

[20:42] <thoughtpolice> so it should act like haskell's zip, but it just doesn't. :)

[20:42] <thoughtpolice> answered my question

[20:43] <Aankhen``> <rhr> Aankhen``: thanks for looking at it!  re: die vs. fail, that's a good question, I'm not sure exactly how error handling should work. # based on the Synopses, my understanding is that whenever you want to basically indicate "I couldn't match anything", you want to use `fail`.

[20:43] <Aankhen``> Of course, I could be wrong.  So sue me. :-)

[20:43] <moritz> fail in rules is fine

[20:43] <moritz> if you don't want to abort your program, as die does

[20:44] <Aankhen``> Yeh, that was my thought.

[20:45] <fglock> ext/Perl6-Value-List - has the old behaviour too; gotta fix

[20:46] *** weinigLap joined
[20:57] *** perlmonkey2 left
[21:05] *** SubStack joined
[21:05] *** vel joined
[21:08] <svnbot6> r16570 | fglock++ | [ext/Perl6-Value-List] - updated .zip behaviour

[21:08] * moritz stares at op0Zip' in Prim/List.hs

[21:09] <moritz> functional programming is _so_ different :(

[21:11] *** obvio171 joined
[21:12] <fglock> &

[21:18] *** weinigLap joined
[21:23] <svnbot6> r16571 | Darren_Duncan++ | ext/QDRDBMS/ : added part 1/2 of a test block (resembling actual user code) to Validator.pm, fixed bugs in AST.pm that this exposed

[21:24] <lumi> I'm trying to write Pugs.Meta.List

[21:25] <moritz> what are the Pugs.Meta.* modules for?

[21:26] <lumi> Does anyone grok (...) any?

[21:26] <lumi> They're for the MOP methods

[21:26] <lumi> moritz: If you look at Pugs.Meta.Str you'll note it's absolutely beautiful

[21:28] <lumi> But.. I don't know how to use it right yet

[21:28] <moritz> it's beatiful alright - but I have no idea what it does and how to use it ;)

[21:29] <lumi> I was hoping someone could clue me

[21:29] *** iblechbot joined
[21:31] * moritz hasn't got a clue himself

[21:31] <svnbot6> r16572 | moritz++ | fixed zip to truncate to the shortest list

[21:32] <moritz> that's my first haskell hack, so I really don't know if it works

[21:32] <moritz> at least on my maschine it still compiles ;)

[21:32] <lumi> moritz: Good sign :)

[21:33] <moritz> pugs> 2,3 Z 4

[21:33] <moritz> ((2, 4),)

[21:33] <lumi> Success!

[21:33] <moritz> for that one test case, yes

[21:34] <thoughtpolice> moritz: nice :)

[21:34] *** prism joined
[21:34] <thoughtpolice> moritz: where was the fix anyway? i was going to find it, but I had to get food. :x

[21:35] <moritz> thoughtpolice: in src/Pugs/Prim/List.hs

[21:35] <thoughtpolice> ah

[21:35] <thoughtpolice> man, my chair is totally screwed. :(

[21:35] <moritz> op0Zip' lists | any null lists = []

[21:35] <moritz> that was "all" instead of "any" before

[21:35] <moritz> so it was just two characters ;)

[21:36] <thoughtpolice> i guess my next goal is to find something else to sit in :(

[21:36] <moritz> thoughtpolice: if I knew you'd fix it I would have waited for you ;)

[21:37] <thoughtpolice> hah, i haven't gotten into really hacking the pugs source yet.

[21:37] <thoughtpolice> so i wouldn't even have a clue where to have looked first ;)

[21:37] <moritz> that was not too hard - grep is your fried ;)

[21:37] <moritz> s/fried/friend/

[21:38] <moritz> thoughtpolice: that was my first dive into pugs sources as well ;)

[21:38] <thoughtpolice> well at least now I have -some- idea I guess.

[21:38] <thoughtpolice> :)

[21:38] <thoughtpolice> but like I was saying; I need a new device to put myself in so I may use this beastly thing called a computer.

[21:39] <thoughtpolice> moritz: but from the look of your change that 'any' is all that was needed

[21:40] <moritz> thoughtpolice: I sincerly hope so ;)

[21:42] <thoughtpolice> moritz: well it's just from a quick look and what haskell-mode is telling me from a few function types.

[21:42] * moritz looks at t/builtins/lists/zip.t - that's weird

[21:43] <moritz> it just tests the stringification

[21:45] *** lisppaste3 joined
[21:51] <thoughtpolice> well at least I got a new chair.

[21:51] <thoughtpolice> :)

[22:17] <meppl> good night

[22:22] <moritz> damned, my comit broke each()

[22:22] <moritz> it loops infinitely on 'each()'

[22:23] <moritz> does each uses zip internally?

[22:23] <moritz> I don't understand that

[22:25] <lumi> op0Each = fmap (VList . concat . op0Zip') . mapM fromVal

[22:25] <moritz> oh, indeed

[22:31] <lumi> If those are the only place it's used, you could, at a hack, parameterize if on the different function

[22:31] <lumi> s/if/it/

[22:32] <lumi> It's only ever used in those two and in op0RoundRobin

[22:32] <lumi> moritz: ^^

[22:33] <moritz> lumi: I don't know how to do that :(

[22:33] <moritz> and I don't understand why it should loop infinitely on empty lists

[22:33] <lumi> moritz: I don't get why it's looping either

[22:34] <moritz> lumi: is zipRest identical to tail?

[22:34] <lumi> moritz: But you could either pass a function (either 'all' or 'any') or a boolean

[22:34] <moritz> it looks like to me

[22:34] <lumi> moritz: I thought so too for a second, but: 

[22:34] <lumi> > tail []

[22:34] <lambdabot>  Exception: Prelude.tail: empty list

[22:34] <moritz> right

[22:35] <lumi> @type all

[22:35] <lambdabot> forall a. (a -> Bool) -> [a] -> Bool

[22:35] *** vel joined
[22:36] <lumi> Meh, better to pick either all or any based on a bool, perhaps

[22:36] <moritz> @type any

[22:36] <lambdabot> forall a. (a -> Bool) -> [a] -> Bool

[22:36] <moritz> as expected

[22:36] <moritz> lumi: that's ugly

[22:36] <lumi> Like: op0Zip' b lists | (if b then any else all) null lists = []

[22:37] <lumi> True :/

[22:37] * moritz is trying op0Zip' []    = []

[22:37] <lumi> > all (const False) []

[22:37] <lambdabot>  True

[22:38] <moritz> that might be the problem

[22:38] <lumi> moritz: That might be it

[22:38] <moritz> I'm compiling right now

[22:38] <moritz> > any (const False) []

[22:38] <lambdabot>  False

[22:38] <moritz> > any null []

[22:38] <lambdabot>  False

[22:39] <TimToady> note that each() as a variant of zip() is not supposed to exist anymore...zip() is supposed to be context sensitive to @ vs @@

[22:40] * moritz is happy if stops each() from looping, correctness considerations come later

[22:40] <moritz> first make it run, than make it right ;)

[22:40] <moritz> s/than/then/

[22:40] <japhb> ... then make it fast.

[22:40] <japhb> ;-)

[22:40] <moritz> then make it correct again ;)

[22:41] <japhb> heh

[22:41] <moritz> commiting...

[22:41] <thoughtpolice> in the middle of all that just don't shoot your foot off

[22:42] <thoughtpolice> 'cause that's bad, last time I heard.

[22:42] <svnbot6> r16573 | moritz++ | fixed looping each() with empty arg list, introduced in previous commit

[22:47] *** weinigLap_ joined
[22:55] <moritz> ?eval class F { has $.f is rw = 1; }

[22:55] <evalbot_r16572> undef

[22:59] <moritz> in HTTP.pm it's the other way round, syntax error

[22:59] *** mmk[null] joined
[23:04] <TimToady> yes, the pseudo assignment must follow the traits

[23:05] <TimToady> otherwise we'd have to throw all the possible traits in as expression terminators

[23:06] *** devogon joined
[23:06] <moritz> and the traits seem to be more important than the initial value

[23:06] <TimToady> and they happen "first" notionally

[23:06] *** devogon joined
[23:08] *** devogon joined
[23:11] <moritz> t/blocks/goto.t fails to compile 

[23:11] <moritz> a ref to sub is used before that sum is declared

[23:11] <moritz> is that a bug in the test file?

[23:12] <moritz> to me itlooks like a wrong/outdated test

[23:14] <moritz> audreyt++ # compile time checking if variables are declared

[23:14] <svnbot6> r16574 | moritz++ | t/blocks/lvalue_subroutines.t: fixed two brainos that prevented it from

[23:14] <svnbot6> r16574 | moritz++ | compiling (undeclared variables)

[23:17] *** demq joined
[23:18] *** Caelum joined
[23:18] <svnbot6> r16575 | moritz++ | t/builtins/io/open.t: fixed undeclared variable

[23:22] <moritz> should try { &nonexisting_subroutine } still produce a compile time error?

[23:23] <moritz> that's in t/magicals/dollar_underscore.t

[23:28] <svnbot6> r16576 | moritz++ | t/regex/from_perl6_rules/subst.t: removed localization of $_ at top level.

[23:28] <svnbot6> r16576 | moritz++ | If that should be possible it should be tested somewhere else.

[23:33] <japhb> moritz: I should think  try { &nonexisting_subroutine } should still fail at compile time, because to my understanding try handles runtime errors, not compile time.  If you want to ignore compile time errors, I would think you'd need eval or more advanced trickery

[23:33] <japhb> s/ignore/catch/

[23:34] <moritz> japhb: I agree, but I will not change that test without TimToady's approval...

[23:35] <japhb> nod

[23:35] <moritz> japhb: if you are certain, you can change it by yourself ;)

[23:35] <japhb> actually not -- for some reason I've been having trouble committing to the repo.  Of course, last time I checked was a couple weeks ago ...

[23:37] <moritz> japhb: a couple of weeks ago pugscode.org had DNS problems

[23:37] <japhb> moritz: fair enough

[23:37] <moritz> due to a registrat that lost his licence or something

[23:44] *** daxim_ joined
[23:54] *** weinigLap_ is now known as weinigLap

