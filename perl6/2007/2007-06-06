[00:29] *** sunnavy joined
[00:40] *** weinigLap joined
[00:50] *** nipotaway is now known as nipotan

[00:51] *** weinigLap joined
[01:20] *** Khisanth joined
[01:23] *** [particle1 joined
[01:34] *** takanori_ joined
[02:05] *** f0rth_ joined
[02:15] *** weinigLap joined
[02:18] *** [particle] joined
[02:33] *** bsb left
[02:35] *** nekokak_ joined
[02:37] *** REPLeffect joined
[02:42] *** shachaf joined
[02:51] *** Saris-m joined
[02:56] *** justatheory joined
[02:57] *** offby1` joined
[02:59] *** offby1` is now known as offby1

[02:59] *** offby1 is now known as offby2

[03:00] *** offby2 is now known as offby1

[03:33] *** Coke joined
[03:33] <Coke> what's the name of the thing that's pointed at in for @joe -> $bag_o_donuts {stuff} ?

[03:33] <Aankhen``> Whatcha mean?

[03:33] <Aankhen``> Oh, $bag_o_donuts?

[03:34] <Aankhen``> I'm not sure.  Isn't it just a loop variable?

[03:35] <Tene> a block parameter

[03:35] <Tene> ?

[03:36] * Aankhen`` shrugs.

[03:40] <Coke> "loop variable" it is. lame, but servicable.

[03:42] <Jmax> "Enterprise temporary reliable iterator variable container"

[03:43] <Jmax> ... "With aliasing*"  "* only in Pugs Enterprise Edition"

[03:44] <Coke> I'm trying to the 07-for.t sanity test passing on parrot.

[03:45] <Coke> er, to *get*

[03:50] *** amnesiac joined
[04:22] <gaal> it's indeed a block parameter, and more generally, -> SIG BLOCK

[04:25] <TimToady> a functional programmer should probably be calling it a lambda parameter...

[04:26] * Aankhen`` wonders if you could pass other types of Routine objects.

[04:26] <Aankhen``> (Routine is what all of them inherit from, right?)

[04:28] <TimToady> sure, as long as you call it via statement_control:<for>(@list, &routine)

[04:28] <Aankhen``> Awww.

[04:37] *** pjcj_ joined
[04:47] *** igoestoucf joined
[04:58] *** weinigLap joined
[05:04] <Tene> Okay, I've completely rebuilt pugs from scratch, and I'm still getting a segfault immediately on startup.

[05:05] *** BooK_ joined
[05:05] <pasteling> "tene" at 24.2.71.129 pasted "pugs segfault" (27 lines, 2.5K) at http://sial.org/pbot/25385

[05:09] *** devogon joined
[05:16] <TimToady> hmm, a SEGV at 0 often means that something tried to jump through a null pointer

[05:17] <TimToady> but I'd guess the problem is likelier to be in libperl.so than in pugs

[05:20] <TimToady> I wonder if it's possibly related to the problems I've been having with looping and slow tests on both FC6 and F7.  When was your last update?

[05:22] <Tene> A couple of days ago.

[05:22] <Tene> On FC

[05:22] <Tene> Well, now on F, I suppose

[05:23] *** jisom joined
[05:28] <Coke> http://nopaste.snit.ch:8001/10315

[05:31] <TimToady> it's claiming that all 6 versions of Perl suck, I guess... :)

[05:38] <TimToady> Tene: I wonder if it's finding the wrong libperl.so.  I have a sneaking suspicion they may have rearrange the library search order to put site_perl and vendor_perl before the top-level lib, and maybe there's an old libperl.so out there?

[05:39] <TimToady> when I built my own perl and put it into /usr/local/bin and /usr/local/lib it ran fine

[05:40] <Caelum> strace it and see where it dies

[05:40] <Tene> Caelum: I posted an strace

[05:40] <Caelum> oh duh

[05:40] <Tene> Heh. :)

[05:41] <TimToady> on my machine all the previous versions of libperl.so are symlinks to the 5.8.8 version

[05:42] <Caelum> I noticed that there's an inconsistency in the pugs build process, if you do /usr/bin/perl Makefile.PL it uses that perl to link with, but in other parts it does just "perl Makefile.PL" using the perl in your path instead of the one it built with

[05:42] <TimToady> but that hasn't changed since Jan

[05:42] <Tene> also, I only have one perl

[05:42] <Caelum> maybe I should fix this...

[05:44] <TimToady> I don't think that can be this problem, since I'm having trouble on an F7 machine with only one perl

[05:45] <TimToady> and I had no trouble when I did /usr/local/bin/perl Makefile.PL on my other machine

[05:45] <Caelum> no, different problem...was just making an observation

[05:46] <Caelum> it builds fine, but some of the extensions are built with "perl Makefile.PL"

[05:47] <TimToady> as long as they don't try to link in a different perl...

[05:47] <TimToady> could introduce some other subtle differences, I suppose

[05:48] <Caelum> they do

[05:56] * Caelum figured out how to build pugs without totally freezing his computer... turns out if I have folding@home running at the same time, the pugs build can't coexist with it

[06:01] <Aankhen``> Oh, I'd forgotten all about Folding@Home.

[06:01] <Aankhen``> I could probably speed up my builds if I'd just remember to turn it off.

[06:01] <TimToady> it's just really weird that my FC6 machine slowed down at exactly the same time as my F7 machine...makes me think it isn't really fedora.  my yum update log doesn't show any thing perly...

[06:02] <TimToady> though of course the F7 upgrade touched all kinds of stuff

[06:02] <amnesiac> TimToady, FC is evil :(

[06:02] <amnesiac> FC is the root of all evil :)

[06:25] *** Averell joined
[06:29] <TimToady> of all the files pugs has open while running the slow test (propcharset takes 40 minutes), none of them has been updated recently except pugs.

[06:30] *** penk joined
[06:31] *** rho joined
[06:34] *** nekokak joined
[06:34] <TimToady> so I think it's either pugs or the linux kernel itself, which did get an update a few days ago

[06:37] *** aukjan|gone is now known as aukjan

[06:40] *** aukjan is now known as aukjan|gone

[06:51] *** franck__ joined
[06:58] <Jmax> should i test on openbsd?

[07:00] <TimToady> nobody can stop you. :)

[07:01] <Jmax> ok :)

[07:06] <Aankhen``> Jmax: Come on, no one sane tries to do anything on OpenBSD except route packets. ;-)

[07:10] *** franck___ joined
[07:19] <thoughtpolice> i use openbsd :(

[07:19] <thoughtpolice> OpenBSD stormwind.youareinferior.net 4.1 GENERIC#104 i386

[07:19] *** unobe joined
[07:23] <unobe> just did a 'make install' for r16634 and everything installed correctly into /Library/Perl/5.8.6/Perl6 and /Library/Perl6

[07:25] *** dduncan joined
[07:27] *** audreyt joined
[07:27] <Tene> audreyt++

[07:29] *** franck__ joined
[07:29] *** polettix joined
[07:34] *** iblechbot joined
[07:36] *** torz joined
[07:37] *** torz left
[07:37] *** torz joined
[07:37] <Jmax> warning: implicit declaration of function `perl5_newSViv'

[07:37] *** ahmadz joined
[07:37] <Jmax> from compiling Pugs.Parser.Charnames and Pugs.AST.Internals

[07:38] <Jmax> there's a few of those for different functions

[07:38] <TimToady> ignore

[07:38] <torz> ello

[07:39] <Tene> Hi, torz!

[07:39] <torz> hey Tene :D

[07:40] <torz> whats up?

[07:46] *** dduncan left
[07:51] *** franck__ joined
[08:06] *** unobe joined
[08:16] *** cognominal joined
[08:16] *** cognominal_ joined
[08:22] <Jmax> failed a few, seems to be stuck on t/examples/99problems/problem90

[08:22] *** buetow joined
[08:22] <Jmax> oh, there it goes

[08:27] <Caelum> yay, I made my first commit :)

[08:27] <Tene> :D

[08:52] *** jisom_ joined
[08:52] *** rindolf joined
[08:59] *** miyagawa joined
[09:03] *** riffraff joined
[09:19] *** trunix joined
[09:21] *** b_jonas joined
[09:44] <thoughtpolice> Caelum: congrats :)

[09:48] <Aankhen``> Caelum: Welcome aboard. :-) Now please complete Perl 6.0.0, kthx.

[09:52] <moritz> Caelum: did you add your name to the AUTHORS file? if not, please do it!

[10:00] <thoughtpolice> where's svnbot6?

[10:00] <moritz> thoughtpolice: gone with the wind :(

[10:01] <thoughtpolice> :(

[10:01] <moritz> thoughtpolice: same with specbot and evalbot

[10:01] <thoughtpolice> a sad day

[10:01] <thoughtpolice> i guess I must have missed the requiem

[10:03] <thoughtpolice> at least lambdabot is still with us

[10:03] <Aankhen``> What good is it without a P6 eval?

[10:03] <moritz> thoughtpolice: you missed it indeed: http://moritz.faui2k3.org/irclog/out.pl?channel=perl6;date=2007-06-05#id_l204

[10:03] <lambdabot> Title: IRC log for #perl6, 2007-06-05, http://tinyurl.com/yo9vc5

[10:04] <Aankhen``> LOL.

[10:04] * Aankhen`` takes a bow.

[10:04] * Aankhen`` collapses and falls asleep.

[10:08] <thoughtpolice> @remember Aankhen`` What good is it without a P6 eval?

[10:08] <lambdabot> Done.

[10:08] <thoughtpolice> :)

[10:08] <Aankhen``> o_O

[10:08] <Aankhen``> What does that do?

[10:10] <moritz> wow, I want to be able to type english text while I'm sleeping too ;)

[10:10] <thoughtpolice> @quote Aankhen`` 

[10:10] <lambdabot> Aankhen`` says: What good is it without a P6 eval?

[10:10] <thoughtpolice> that's what it does

[10:10] <Aankhen``> Heh.

[10:10] <Aankhen``> Neat.

[10:10] <thoughtpolice> lambdabot is pretty fun :)

[10:11] <thoughtpolice> http://www.cse.unsw.edu.au/~dons/code/lambdabot/COMMANDS

[10:11] <thoughtpolice> there're some pretty useful commands in there

[10:12] *** isaacd joined
[10:14] <moritz> @slap thoughtpolice "Just a test"

[10:14] * lambdabot beats up thoughtpolice "Just a test"

[10:14] <moritz> nice one ;)

[10:15] <thoughtpolice> :'[

[10:16] <thoughtpolice> @tell moritz leave me alone

[10:16] <lambdabot> Consider it noted.

[10:16] <thoughtpolice> the useful thing about that is people can leave you memo's pretty easily :)

[10:17] <moritz> thoughtpolice: that's what we use most of the time

[10:17] <lambdabot> moritz: You have 1 new message. '/msg lambdabot @messages' to read it.

[10:18] <moritz> @massages

[10:18] <lambdabot> thoughtpolice said 1m 59s ago: leave me alone

[10:19] <thoughtpolice> eval is one of the funnest though

[10:19] * Aankhen`` heads to bed.

[10:21] <thoughtpolice> there're some that're weird though

[10:21] <thoughtpolice> @unlambda

[10:21] <lambdabot> Done.

[10:21] <thoughtpolice> :/

[10:21] <thoughtpolice> @elite

[10:21] <lambdabot> Say again?

[10:21] <thoughtpolice> @elite test

[10:21] <lambdabot> tes+

[10:21] <thoughtpolice> hah.

[10:25] *** franck__ joined
[10:43] <moritz> I'm look at examples/mandel.pl

[10:43] <moritz> loop ($L = 0;; $L++) { last() if $L > 0;

[10:44] <moritz> $L is not modified in the body of the loop

[10:44] <moritz> wtf is that?

[10:50] <masak> moritz: looks like a fairly silly way of doing a one-pass loop

[10:50] <masak> maybe it grew to look that way

[10:51] <moritz> masak: seems like

[10:56] *** kanru joined
[10:57] *** b_jonas joined
[10:59] *** mjk joined
[11:03] *** mj41 joined
[11:03] *** rhizo joined
[11:13] *** franck__ joined
[11:41] *** nipotan is now known as nipotaway

[11:49] *** rashakil joined
[11:57] *** rafl joined
[11:58] *** REPLeffect joined
[12:17] *** kanru joined
[12:19] *** fglock joined
[12:28] *** the_dormant joined
[13:02] *** b_jonas joined
[13:06] *** Schwern joined
[13:07] *** jedai joined
[13:17] *** [particle] joined
[13:20] *** orafu joined
[13:25] *** [particle] joined
[13:38] *** jerrylee joined
[13:40] *** ayrnieu joined
[13:44] *** buetow joined
[13:56] *** Loro_ joined
[14:03] *** franck___ joined
[14:04] *** jabbot joined
[14:09] *** amnesiac joined
[14:10] *** cognominal__ joined
[14:16] <gaal> fun project: since Pugs is cabalized, write a lambdabot plugin to it

[14:17] <gaal> shouldn't be vry difficult even, just make sure to have the plug set PUGS_SAFEMODE.

[14:25] <lumi> What does cabalization have to do with \b plugindom?

[14:29] *** iblechbot joined
[14:35] *** mncharity joined
[15:03] *** REPLeffect joined
[15:13] *** rodi joined
[15:16] *** schmalbe joined
[15:22] *** franck__ joined
[15:28] *** elmex joined
[15:45] <gaal> lumi: easy to link against pugs

[15:46] <gaal> just -package pugs, import Pugs, call its -e or whatever

[15:47] <gaal> iirc plugs, \bot's run dynamically moosed thing thing, handles limits

[16:05] <TimToady> attempting to restart evalbot on feather

[16:05] <moritz> TimToady++

[16:06] <TimToady> but it's gonna have to recompile the world

[16:06] <avar> 1

[16:06] <moritz> "the world is not enough"

[16:10] *** jerrylee_ joined
[16:13] *** ahmadz joined
[16:18] *** justatheory joined
[16:21] *** evalbot_r16637 joined
[16:26] <spinclad> ?eval say "I'm baaack"

[16:26] <evalbot_r16637> OUTPUT[I'm baaack␤] Bool::True

[16:26] <moritz> YaY

[16:28] *** penk joined
[16:31] *** rindolf joined
[16:31] *** fglock joined
[16:32] *** franck__ joined
[16:41] <TimToady> someone who is an operator needs to invite svnbot6

[16:44] <TimToady> I don't know how to be an operator...

[16:49] <spinclad> rather short on operators here...

[16:50] <spinclad> sub prefix:<@> { .can('invite') }

[16:50] <[particle]> i know audrey can op herself

[16:51] *** vel joined
[16:54] <fglock> I'm trying to understand  method &.(Match $m) {...}  in Perl-6.0.0-STD:132 

[16:59] *** weinigLap joined
[17:03] <TimToady> well, svnbot6 isn't gonna work in an svk directory in any case...

[17:04] * wolverian wants a gitbot

[17:04] <fglock> I can't tell what &.() is doing - is it declaring a method named from the match contents? (doesn't look so)

[17:04] *** weinigLap joined
[17:05] <wolverian> I'd assume it's declaring a method named ".", the & being there to make the . a code name. but TimToady probably knows better... 

[17:05] <TimToady> see S13:144

[17:05] <fglock> looking

[17:06] *** vel left
[17:06] <fglock> aha

[17:08] *** bonesss joined
[17:10] *** schmalbe is now known as barney

[17:12] *** barney is now known as rubble

[17:12] *** Psyche^ joined
[17:12] *** rubble is now known as schmalbe

[17:16] <gaal> AFAIK only audreyt can op herself; I think we need her help if we want to, uh, viopdoers

[17:29] *** Psyche^ is now known as Patterner

[17:30] *** chris2 joined
[17:34] *** vel joined
[17:36] *** dduncan joined
[17:37] *** larsen_ joined
[17:42] *** justatheory_ joined
[17:43] *** penk joined
[17:47] *** nekokak_ joined
[17:47] *** justatheory_ joined
[17:52] *** |Jedai| joined
[17:56] *** thoughtpolice joined
[18:18] *** daxim joined
[18:27] *** weinigLap_ joined
[18:27] *** zamolxes joined
[18:28] *** weinigLap_ joined
[18:29] *** kanru joined
[18:36] *** jisom joined
[18:37] *** bonesss joined
[19:02] *** b_jonas joined
[19:16] *** franck__ joined
[19:23] *** weinigLap joined
[19:25] *** japhb joined
[19:29] *** pelagic joined
[19:30] *** the_dormant joined
[19:43] *** yrlnry joined
[19:46] *** franck___ joined
[19:53] *** bpalmer` joined
[19:54] <b_jonas> hi, 

[19:54] <moritz> hi

[19:54] <b_jonas> I'm asking a question about junctions that integral asked on #perl and we're disputing:

[19:55] <b_jonas> in this code, how many times is the function called: sub f ($x) { $x == 3 ?? "hello" :: "goodbye" } f(2 | 3);

[19:55] <b_jonas> the relevant passage from S09 is this:

[19:55] <b_jonas> "In particular, if a junction is used as an argument to any routine (operator, closure, method, etc.), and the scalar parameter you are attempting to bind the argument to is inconsistent with the Junction type, that routine is "autothreaded", ..."

[19:56] <b_jonas> but I don't know what "inconsistent" means there, that is, whether that simple declaration of the argument is inconsistent with junctions or not

[19:56] <[particle]> seems to me that $x is untyped, so it can accept a Junction

[19:57] <b_jonas> right, so it's called only once

[19:57] <b_jonas> thanks

[19:57] <integral> curiously I str the answer being the other way around originally: you have to explictly declare the type to include a junction to get a junction; so it'd be called twice.  I guess it's changed.

[19:57] <moritz> I agree

[19:57] <PerlJam> moritz: with whom?

[19:57] <[particle]> i think my $x is like saying my Any $x

[19:58] <moritz> PerlJam: with [particle] 

[19:58] <[particle]> where Any is the base type

[19:58] <moritz> PerlJam: nobody else answered the question ;)

[19:58] <PerlJam> sorry, I was threading #perl and #perl6  :)

[20:00] <moritz> no problem ;)

[20:00] <PerlJam> aha!

[20:00] <PerlJam> S02: Any         Perl 6 object (default parameter type, excludes Junction)

[20:00] <[particle]> hrmm

[20:00] <b_jonas> ooh

[20:01] <PerlJam> b_jonas: so, again.  My answer is f() gets called twice  :)

[20:01] <[particle]> perljam: you sank my battleship!

[20:01] <b_jonas> wow

[20:01] <integral> so I remembered right.  I guess my brain's not that tired yet

[20:01] <b_jonas> so what about sub f () { $_[0] == 3 ?? "hello" :: "goodbye" } f(2 | 3);

[20:01] <b_jonas> um

[20:01] <b_jonas> so what about sub f () { @_[0] == 3 ?? "hello" :: "goodbye" } f(2 | 3);

[20:01] <b_jonas> I mean

[20:02] <[particle]> huh?

[20:02] <PerlJam> b_jonas: that's an error.  You've declared that your subroutine takes no parameters, but you've given it one

[20:02] <moritz> what about sub f { $^val == 3 ?? "foo" :: "bar" } ?

[20:02] <b_jonas> oh

[20:02] <b_jonas> yeah, I'm stupid

[20:02] <PerlJam> moritz: that's another Any type.

[20:03] <moritz> PerlJam: are $^ variables always Any?

[20:04] <PerlJam> moritz: AFAIK

[20:05] <bpalmer`> so how would you declare that a variable could be a junction or not, you don't care? Or do you just declare it a Junction and accept a junction of one ?

[20:05] <PerlJam> bpalmer`: eh?

[20:06] <PerlJam> sub foo (Junction|Any) { ... }  # there's some irony there :)

[20:06] <integral> sub foo (Any|Junction $foo) { ... }

[20:06] <bpalmer`> ah

[20:06] <[particle]> Whatever

[20:07] <[particle]> actually, it's my Object $foo

[20:07] <PerlJam> [particle]: if you mean that it's typed as Whatever, I don't think so.

[20:07] <PerlJam> right.

[20:07] <[particle]> but Whatever sounds cleverer

[20:07] <[particle]> ererer

[20:08] <b_jonas> PerlJam: thanks for cleating it up then

[20:09] <PerlJam> b_jonas: thanks for making me look at the docs :-)  I need to do that every once in a while 

[20:22] *** [particle1 joined
[20:30] *** [particle1 joined
[20:45] *** mako132_ joined
[20:48] <dduncan> svnbot appears to be down

[20:49] *** [particle1 is now known as [particle]

[20:49] *** justatheory_ is now known as justatheory

[21:01] <moritz> dduncan++ # adding ext/Muldis-DB/

[21:01] <dduncan> better name, no?

[21:02] <moritz> better than QDIDONTKNOWHOWTOSPELLIT

[21:10] <dduncan> indeed

[21:10] <dduncan> the previous name was bad on purpose and meant to be temporary, the new name is meant to be quasi-permanent

[21:26] *** weinigLap_ joined
[21:33] *** renormalist joined
[21:36] *** polettix joined
[21:40] *** qmole joined
[21:45] *** wilx` joined
[21:56] *** weinigLap joined
[22:02] *** kunwon1 joined
[22:08] *** mako132_ joined
[22:20] *** mako132_ joined
[22:20] *** kunwon1 joined
[22:29] *** mako132_ joined
[22:56] *** kunwon1 joined
[22:58] *** weinigLap_ joined
[23:00] *** penk joined
[23:02] *** wilx` joined
[23:03] *** crashmatrix joined
[23:18] *** crashmatrix is now known as hatsuseno

[23:22] *** nperez joined
[23:30] *** Limbic_Region joined
[23:33] *** weinigLap joined
[23:40] *** justatheory_ joined
[23:44] *** wilx` joined
[23:48] *** Coke joined
[23:49] <Coke> I have a p6-like rule (PGE) for a pointy_block:

[23:49] <Coke> token pblock { <?ws> [<'->'> <?ws> <signature> <?ws>]? <block>

[23:49] <Coke> }

[23:50] <Coke> ... is there a way in PGE/rules to make the signature read as if it were a literal $_ if that optional []? doesn't match at all?

[23:51] <Coke> (got the explicit -> version parsing and passing in parrot now. Trying to sneak the default as $_ in.)

[23:55] <TimToady> usually such annotation would be done in semantic analysis rather than faking it up syntactically.  That's what STD.pm assumes with '->'

[23:55] <TimToady> so first chance is in the closure attached to the rule as its "action"

[23:57] <Limbic_Region> salutations all

[23:57] <Coke> yes, but TGE has me boxed in a corner here, and if I could cheat, I was gonna. =-)

[23:58] *** pbuetow joined
[23:58] <TimToady> to do it within the rule you'd have to find some way of $<signature> := something that isn't there

[23:58] <Coke> right!

[23:58] <TimToady> and that current requires a closure

[23:58] <Coke> but I don't think that works. =-)

[23:58] <TimToady> *currently

[23:59] <Coke> at least not in PGE.

[23:59] <[particle]> sure, you can do closures in pge

[23:59] <Coke> Ok, back to the drawing board. 

[23:59] <[particle]> {{ pir here }}

[23:59] <[particle]> there's examples in the test suite

[23:59] <Coke> ... I don't want to run PIR - what would i run?

