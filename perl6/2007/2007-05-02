[00:00] <[particle]> it is SLOOOOOWWWW

[00:00] <[particle]> in fact it just timed out

[00:00] <TimToady> same here

[00:00] <TimToady> so maybe something on feather end

[00:00] <[particle]> likely

[00:01] <TimToady> there are now 4 copies of commitbit running on feather

[00:01] <[particle]> what are the anglicized japanese words for plan and ok?

[00:01] <TimToady> 3 in R state

[00:01] <[particle]> eew

[00:03] <TimToady> well, "puran" and "ookei" are both understood, but of course they have lots of other words

[00:05] <geoffb> How does a word containing r and l together get converted?  For example, how would a native Japanese speaker pronounce "url" or for that matter "perl"?

[00:07] <pasteling> "[particle]" at 144.81.84.216 pasted "japanese imports ;-)" (19 lines, 494B) at http://sial.org/pbot/24640

[00:08] <geoffb> [particle]: You switched them?  Evil.

[00:08] <[particle]> parrot++

[00:09] <[particle]> i'm writing an example of subclassing the Exporter PMC i recently created

[00:09] <TimToady> depends on whether the r is vocalic or not.  English vocalic r just results in lengthening so that perl comes out "paaru"

[00:10] <TimToady> I don't know how they pronounce "url"

[00:11] *** prism joined
[00:11] *** veritos joined
[00:13] <TimToady> 'course, you should really spell them プラン and OK to match typical usage...

[00:14] <[particle]> my irc client no likey unicode

[00:15] <veritos> [particle]: what client

[00:15] <[particle]> trillian

[00:15] <veritos> ah, i see. mirc maybe a better bet?

[00:15] <DarkWolf84> it's fine in my client

[00:15] <[particle]> is that win-friendly?

[00:15] <veritos> yeah

[00:15] <DarkWolf84> I use Xchat

[00:16] <[particle]> hrmm, does it do aim/yahoo/msn as well?

[00:16] <veritos> [particle]: no :( meebo.com for those tho

[00:16] <DarkWolf84> no but it do irc well

[00:21] <DarkWolf84> I don't know katakana but I think プラン is pronounce paru not paaru

[00:22] <TimToady> that's "plan"

[00:22] *** veritos left
[00:23] <DarkWolf84> oh fine my mistake

[00:23] <TimToady> paaru would be パール

[00:24] <DarkWolf84> i saw the little circle on the first chana

[00:24] <TimToady> but almost certainly spelled "Perl" since it's a proper name

[00:25] <DarkWolf84> and make mistake

[00:25] *** bonesss joined
[00:26] <DarkWolf84> and made mistake*

[00:26] <DarkWolf84> my english again

[00:28] <DarkWolf84> May be is's time lo learn katakana

[00:28] *** bonesss is now known as bonesss`out

[00:34] <TimToady> basically, there are three makes running on feather right now...

[00:34] <TimToady> so the load avg is bouncing between 10 and 17

[00:35] <TimToady> and it appears that jifty can't wake up commitbit fast enough (or vice versa) to respond in what firefox thinks is a timely fashion

[00:38] <TimToady> agentzh++ for running his make niced

[00:56] <TimToady> well, I reniced karhu's background make, and the load avg dropped to 9, but after 50 cpu seconds commitbit still can't make my firefox happy, so there must be some spinlocking or some such contention going on

[00:57] <TimToady> I note that there seems to be two base copies of commitbit running, so maybe one is blocking the other

[00:59] <TimToady> I'm giving up for now.  Need a commitbit expert...

[00:59] <[particle]> obra: ping

[01:00] <[particle]> hrmm, actually i think it was audrey who did that coding

[01:05] *** |OUF|HiTech69 joined
[01:13] *** rissy joined
[01:15] *** drupek12 joined
[01:24] *** SubStack joined
[01:28] <audreyt> looking into it (commitbit).

[01:30] * davidfetter waves to audreyt

[01:31] <audreyt> hi.

[01:32] * obra really needs to find the cycles for another round of commitbit hacking

[01:33] <obra> I removed 30% of the code last week. about  3 more hours and I'll have something that hrts less than what we have today

[01:38] <rhr> re pipes: I'm thinking $io = Pipe.to/from: "cmd" for auto-fork+exec; ($r, $w) = Pipe.pair for no-fork; ($proc, $r, $w) = Pipe.fork for auto-fork without exec.  Is that a good interface?

[01:42] <avar> is there any debugger for perl6 yet? 

[01:42] <audreyt> avar: no, currently there's only pugs -d which is more of a tracer than a debugger

[01:42] <avar> ;(

[01:43] <audreyt> a debugger for Pugs.Eval can be done rather painlessly by introducing a new argument to envEval

[01:43] <audreyt> i.e. swap out the current tracer with something that resembles the interactive shell

[01:47] *** laye joined
[01:55] <avar> are there any modulen in p6 on cpan? how would I go about adding some?:)

[01:55] <avar> language: in META.yml would be neato:){

[01:56] <audreyt> :D yes.

[01:59] <geoffb> audreyt: back just to fix commitbit, or back for a while?

[02:05] <Yaakov> audreyt: Hello!

[02:05] <Yaakov> audreyt: Will you be at YAPC::NA this year?

[02:07] <audreyt> Yaakov: unfortunately no. will be at oscon though.

[02:07] <Yaakov> Ah. Well, that's a disappointment.  I was hoping to see you.  Maybe next year.

[02:08] <gnuvince_> audreyt: Quick note, the YAPC::Asia presentation was amazing

[02:08] <audreyt> geoffb: yes, back just to fix commitbit... maybe back for a while. but need to get some sleep first (3hr.)

[02:08] <audreyt> gnuvince_: thanks. I was actually having a nervous breakdown of sorts toward the end

[02:08] <audreyt> but the presentation slides themselves is I'd say not bad :)

[02:08] <geoffb> Yes, please, do sleep!

[02:08] <gnuvince_> Really?  I must admit I did not notice.  I guess the material was too absorbing :)

[02:08] <Yaakov> audreyt: I hope you are well.  I watched your very compact YAPC::Asia video.  I was enjoyable.

[02:09] <audreyt> danke.

[02:09] <Yaakov> Heh, "it", of course.

[02:09] <rhr> indeed, that was a great talk

[02:09] <Yaakov> Though I hope I am also enjoyable occasionally.

[02:09] <gnuvince_> I made a joke on your blog about the number of slides you have in your presentation, but I thought that it actually helped.

[02:09] <gnuvince_> It really "flowed" well

[02:10] <audreyt> oh yes. it's all about the subtle subconsciousness hints and brainwashing

[02:10] <gnuvince_> :)

[02:10] <audreyt> glad you enjoyed it :) really glad :)

[02:10] * audreyt restarts apache and hope it fixes commitbit

[02:11] <Yaakov> audreyt: Sleep well.

[02:20] <rhr> I was also thinking it would be cool if there were some way to specify arbitrary io redirection for things like system, Pipe.to/from, etc. without having to do close/dup/fork/whatever by hand, or getting into weird sh syntax

[02:21] *** nipotaway is now known as nipotan

[02:22] <rhr> something like: system "cmd", :ioredirect( :stdin($some_io), :stderr('/dev/null'), :fd42($secret_channel, :r) )  Is that too unwieldy?

[02:40] *** geoffb joined
[02:53] *** mako132_ joined
[03:02] *** justatheory joined
[03:16] *** REPLeffect joined
[03:31] *** awwaiid joined
[03:39] *** stevan__ joined
[03:45] *** kunwon1 joined
[04:06] *** quantboy joined
[04:08] *** agentzh joined
[04:09] <agentzh> Hmm, i see 4 broken smartlinks appear over the night. anyone here willing to offer a quick fix? ;)

[04:13] <agentzh> auto-smoking on feather tends to take many hours recently :(

[04:14] <agentzh> Juerd: 1:00 ~ 4:00 AM (feather localtime) is a very busy time period for the feather world?

[04:29] <rhr> another IO question: is there a way to do io to/from a variable (both scalars and lists)?

[04:30] <rhr> example: $decrypted_data = Pipe.from "gpg --passphrase-fd 3", :ioredirect( :fd3( IO.fromstr($passphrase) ) )

[04:52] *** goban joined
[04:53] *** Alias_ joined
[04:55] *** SubStack joined
[04:58] *** agentzh left
[04:59] <rhr> yet another: IO.tee(IO) to link output streams, e.g. $*ERR.tee($logfile)

[05:09] *** dduncan joined
[05:33] *** Southen_ joined
[05:42] *** devogon joined
[05:48] *** nelhage joined
[05:58] *** rfordinal joined
[06:03] *** SubStack_ joined
[06:07] *** iblechbot joined
[06:09] *** SubStack_ is now known as SubStack

[06:22] *** marmic joined
[06:25] *** CindyLin1 is now known as CindyLinz

[06:26] <TimToady> rhr: we will probably end up doing most such IO redirections using feed operators.

[06:26] <TimToady> (commitbit finally sent, by the way)

[06:30] <rhr> got it, $thanks xx 1e6

[06:31] <rhr> how would that work with a feed?

[06:37] *** ozo joined
[06:38] <TimToady> io("filespec") ==> $variable kinda things

[06:39] <Alias_> TimeToady: For a second there I thought you'd gotten involved with CommitBit :)

[06:40] <TimToady> nah, just wondering why feather wasn't keeping up, mainly.  as soon as the going got tough, I quit...

[06:41] <rhr> ah, that's a better way to do that.  what do you think of the whole :ioredirect thing?

[06:42] <TimToady> seems a bit heavy

[06:43] <TimToady> but doubtless something like that is going on underneath, even if we have the notation convenience of feed ops

[06:44] <moritz> TimToady: yesterday I saw a pice of rubbish on eweek.com (iirc) titled "the 100 most influential people in it", you were no. 100 ;)

[06:44] <TimToady> basically, the feeds can give us directionality, but can't establish the type of the io handle

[06:45] <TimToady> yeah, I'm just famous for almost being not famous

[06:45] *** buetow joined
[06:47] <moritz> TimToady: which means you don't have to spend too much time in interviews, so you can do more perl stuff ;)

[06:49] <rhr> actually, I don't quite see how your feed example would work in my gpg example.  How would you declare an IO object that reads from a scalar, but could be passed as an fd to a child process?

[06:52] *** elmex joined
[06:53] <rhr> or should you have to do the piping explicitly?

[06:53] <TimToady> my guess is that feeds can handle the ordinary connection of one thing's stdout to the next thing's stdin, but you'd have to use adverbs to modify stderr and extra fds

[06:54] <TimToady> io(...) ==> run("cmd") ==> $result for instance

[06:54] *** franck__ joined
[06:54] <rhr> yeah, that would get rid of the clunky syntax in most cases

[06:55] <TimToady> io(...) ==> run("cmd", :err</tmp/foo>) ==> $result for instance

[06:55] <TimToady> something like that

[06:55] <TimToady> alas, my eyes are going crossed

[06:56] <TimToady> so I should probably turn in for the night

[06:56] * Alias_ accidentally encountered the $foo = { $^a }; notation today in a Perl6:: module, is that still in the Perl 6 language?

[06:56] <TimToady> yes

[06:56] <Alias_> where it makes the { } block into sub ($a) { $a }

[06:57] <Alias_> It feels ... wrong...

[06:57] <TimToady> well, except not a real sub

[06:57] <Tene> Alias_: howso?

[06:57] <TimToady> more like -> $a { $a }

[06:57] <Alias_> or inelegant, or something 

[06:57] <Alias_> Tene: I'm not entirely sure

[06:57] <Alias_> I think possibly that I could see them getting too seperated form the subject of their impact to remain not-confusing

[06:58] <Alias_> $foo = { $^a ... 25 lines of code ... $^b }

[06:58] <TimToady> the subject of their impact?

[06:58] *** SubStack joined
[06:58] <TimToady> "doctor, it hurts when I do this..."

[06:58] <Alias_> Their impact is to transform the block to a sub and modify the argument list

[06:58] <TimToady> placeholders are for little blocks, not big blocks

[06:58] <TimToady> they're for when the order of params is obvious

[06:58] <Alias_> When was the last time people didn't take a good idea way too far :)

[06:59] <TimToady> if it hurts to use them, use -> instead

[06:59] <Alias_> Lets just say I could see MYSELF being tempted into abusing them thusly :)

[06:59] <TimToady> when was the last time I prevented them from it?

[06:59] <TimToady> :)

[06:59] <Alias_> I think also that maybe it was that there's two effects, not one

[06:59] <TimToady> I think the culture will enforce a reasonable balance here

[06:59] <Alias_> the sub'ification and the argument addition

[07:00] <Alias_> Honestly, I find it hard to put a precise argument in place

[07:00] <TimToady> no, it's already a block

[07:00] <Alias_> ah

[07:00] <Alias_> maybe it was the docs then

[07:00] <TimToady> $a = { ... } is just the same, only defaults to $_

[07:00] <Alias_> Seemed to imply a double effect

[07:00] <Alias_> And that without a $^a the { } was not a sub

[07:01] <TimToady> it's not really a sub with either...

[07:01] <Alias_> (in perl5 parlance)

[07:01] <TimToady> if you return from it, it doesn't see those curlies

[07:01] <Alias_> One of these days I need to sit down and read the Perl 6 syntax stuff end to end

[07:01] <Tene> Alias_: you can do horribly twisted things with macros, too.

[07:01] <TimToady> shh!

[07:01] <Alias_> macros just seem like syntactic sugar for currying to make C coders more at home

[07:01] <TimToady> Lisp, actually... :)

[07:02] <Alias_> right

[07:02] * Alias_ is also learning a little Oz atm

[07:02] <Tene> Alias_: if you want the language to prevent you from doing awkward things when you explicitly want to, perl isn't the language for you. ;)

[07:02] <Alias_> I couldn't help thinking that Oz needed TimToady's linguistic touch to it

[07:02] <Alias_> It's nice, but it's terminology feels hideous to me

[07:02] <TimToady> the main reason P6 has macros is that P5 has source filters.

[07:03] <Alias_> ya

[07:03] <Alias_> And don't think I'm not supremely greatful we're killing source filters

[07:03] <Alias_> grateful

[07:03] <TimToady> and a common p6 theme is reducing the scope of damage in every dimension possible, including grammatical

[07:03] <Alias_> ya

[07:03] <Tene> Hmm... could we implement source filters in p6? ;)

[07:04] <TimToady> if something doesn't scope right, it's probably indicative of a missing scoping concept

[07:04] <TimToady> shh!

[07:04] <TimToady> .oO(don't anyone tell Tene that you could implement "use Python" in p6...)

[07:07] *** rissy joined
[07:08] <TimToady> well, now my mouth is flopping open, so

[07:08] <TimToady> zzz &

[07:18] *** ozo joined
[07:22] *** jisom joined
[07:25] <rhr> to answer my own question, I guess it would look like my IO $pphr = io <== $passphrase; $decrypted_data = Pipe.from: "gpg --passphrase-fd $pphr.fileno()";

[07:25] <rhr> so maybe there's no need for more sugar

[07:30] *** BooK joined
[07:32] *** franck__ joined
[07:39] *** bsb left
[07:41] *** polettix joined
[07:48] <goban> guys i want to learn perl, but should i start with perl 5 or wait til 6 comes out?

[07:49] <Alias_> Perl 5

[07:49] <goban> also i know there is no official date but is there an estimate how long?

[07:49] <wolverian> yup. it won't be a wasted effort.

[07:49] <goban> k thanks

[07:49] <moritz> goban: nobody knows when perl6 will be final, so don't wait until then

[07:49] <Alias_> goban: Next yearish

[07:49] <Alias_> not this christmas, but some christmas

[07:50] <moritz> cause every day will be christmas once p6 is out ;)

[07:50] <goban> fed up with java after starting a game server in it :(

[07:50] <moritz> well, servers are not always the best start ;)

[07:51] <Alias_> hmm

[07:51] <moritz> but learning perl is never a bad idea ;)

[07:51] <Alias_> I think I might go home early today and work on my repository issues

[07:51] <goban> yeah was a tough first project but it runs many games and has a good GUI :)

[07:51] <Alias_> goban: Perl is basically a "get stuff done" language

[07:51] *** qmole joined
[07:52] <Alias_> no nonsense, no pretentions, fast development, not always as low level as you'll need for some tasks

[07:52] <moritz> goban: a good place to start with many links is this one: http://perl-begin.org/

[07:52] <lambdabot> Title: Perl Beginners' Site

[07:52] <Alias_> But Perl isn't afraid to let you use other languages where appropriate

[07:52] <goban> yeah watching the perl 6 today video and excited about classes, fp, being able to use haskell/other stuff ...

[07:52] <Alias_> Speaking of which I need to get Oz.pm working

[07:53] <Alias_> or released or something

[07:53] <Tene> goban: well, quite a bit of Perl 6 is available now.

[07:55] <dduncan> Alias_, what does that do?

[07:57] <Alias_> dduncan: Wrapper for the Mozart Oz compiler

[07:58] <Alias_> Which is a fairly neat multi-paradigmic language that seems like a cleaner and more usable language for logic/constraint programming than Prolog :)

[07:58] <Alias_> And also apparently has built-in network-transparent parrelism support

[07:58] <dduncan> okay

[07:58] <moritz> sounds quite cool ;)

[07:59] <Alias_> I have a constraint problem in a project I'm working on, and Perl isn't really going to cut it

[07:59] <moritz> yaltl - yet another language to learn

[07:59] <Alias_> So I'm looking for a good language to write logic programs in

[07:59] <Alias_> moritz, I try to only learn languages when I have a concrete problem I can't solve effectively in any languages I already know

[08:00] <Alias_> I started "coding" with HTML, then learnt JavaScript when I hit the limits of HTML, then learned Perl when I hit the limits of JavaScript

[08:00] <Alias_> Ignoring some basic of several variations in childhood

[08:01] <Juerd> No, PM

[08:01] <Alias_> ?

[08:01] <Juerd> Eh

[08:01] <Juerd> Is for agentzh, but he isn't here so the nick completion didn't work :)

[08:01] <Alias_> ah

[08:02] * Alias_ googles for "programming language PM" and got www.wall.org/~larry/pm.html

[08:02] <moritz> Alias_: I learned a wide variety of languages, partly because I needed them, or other sucked for the job I wanted to do, or because they were used in school/university

[08:02] <Alias_> I try to avoid learning new languages as such

[08:02] *** rfordinal_ joined
[08:02] <moritz> Alias_: and I quite like learning new languages - as long as I have enough time ;)

[08:03] <Alias_> I just try to get enough of a feel to slot them into my mental database of "what things are good for"

[08:05] <Alias_> hrm

[08:05] * Alias_ fixes YAML::Tiny bugs

[08:05] <Alias_> Empty Comments: check

[08:05] <Alias_> Hash Keys With Spaces: check

[08:06] <Alias_> Now I just have yet another module that works on my laptop but isn't released due to repository-fu

[08:06] *** franck__ joined
[08:10] *** buetow joined
[08:24] *** rfordinal_ is now known as rfordinal

[08:35] *** pbuetow joined
[08:40] *** andara joined
[08:58] *** demq joined
[09:06] *** pbuetow joined
[09:22] *** chris2 joined
[09:40] *** dduncan left
[09:42] *** buetow__ joined
[09:43] *** zamolxes joined
[09:49] *** penk joined
[09:57] *** pbuetow joined
[10:04] *** rissy joined
[10:05] *** iblechbot joined
[10:27] *** rissy joined
[10:28] *** rissy joined
[10:30] *** rissy left
[10:57] *** ofer joined
[11:03] *** agentzh joined
[11:04] *** flyby5 joined
[11:12] *** rindolf joined
[11:28] *** rfordinal joined
[11:35] *** nipotan is now known as nipotaway

[11:39] *** VanilleBert joined
[11:45] *** VanilleBert left
[11:53] *** ruoso joined
[11:56] *** buetow joined
[11:56] <flyby5> The news is that our beloved Head of Freenode Staff _christel_ works together with the anti Rob Levin network OFTC now to fight against trolls.

[11:56] <flyby5> And all your donations are used to pay a lawyer, so that Freenode can be a home of script kiddies like trelane, while people with justified complaints are removed.

[12:00] *** Limbic_Region joined
[12:02] <Limbic_Region> salutations all

[12:03] *** fglock joined
[12:10] <Limbic_Region> ?seen audreyt

[12:10] <lambdabot> audreyt is in #haskell and #perl6. I last heard audreyt speak 9h 59m 54s ago.

[12:10] <Limbic_Region> ok, good

[12:12] <moritz> oh, lambdabot recognizes commands starting with '?'?

[12:12] <moritz> that's rather new, isn't it?

[12:18] <svnbot6> r16158 | fglock++ | Perl-6.0.0-STD.pm - fixed a few mismatched brackets

[12:21] <svnbot6> r16159 | fglock++ | [PCR]

[12:21] <svnbot6> r16159 | fglock++ | - regex grammar: added <rule: string...> and <rule( params, ... ) syntax

[12:21] <svnbot6> r16159 | fglock++ | - new ast node 'call'

[12:21] <svnbot6> r16159 | fglock++ | - rules can have positional parameters

[12:21] <svnbot6> r16159 | fglock++ | - "Whatever" {*}

[12:21] <svnbot6> r16159 | fglock++ | - fixed ratchet quantifier - rollback .pos on fail

[12:21] <svnbot6> r16159 | fglock++ | - added an initial double-quoted parser

[12:21] <svnbot6> r16159 | fglock++ | - allow aliasing to a literal

[12:21] <svnbot6> r16160 | fglock++ | [v6.pm]

[12:21] <svnbot6> r16160 | fglock++ | - grammar - added prefix:<|>

[12:21] <svnbot6> r16160 | fglock++ | - added: proto token rx { ... }

[12:21] <svnbot6> r16160 | fglock++ | - fixed signature parsing

[12:21] <svnbot6> r16160 | fglock++ | - added: Module::CompileV6

[12:21] <svnbot6> r16160 | fglock++ | - fixed unicode << ... >> parsing

[12:22] <svnbot6> r16160 | fglock++ | - allow [ ... ] as regex delimiter

[12:22] *** drupek12 joined
[12:23] <moritz> fglock: are you working on STD.pm in order to use it in kp6?

[12:24] *** stef_ joined
[12:28] <fglock> moritz: there are several possibilities,

[12:28] <fglock> STD -> pugs is one likely target,

[12:29] *** iblechbot joined
[12:30] <fglock> but STD -> v6.pm -> perl5 could work

[12:31] <fglock> ( STD -> kp6 -> mp6 -> Any ) would be nice, but the kp6 project is not  good enough yet

[12:31] *** lisppaste3 joined
[12:32] <moritz> from what I've read the regex integration of pugs is not so very well developed atm

[12:34] <fglock> the plan is to desugar regexes into perl6 code, 

[12:34] <fglock> like mp6 does

[12:35] <fglock> "token" is a macro in mp6

[12:35] <moritz> so you want to use kp6 for desugaring, so that pugs can parse its output?

[12:39] *** Zaba joined
[12:39] <Zaba> No. In the foreseeable future all Perl 6 programs will require the resources of the Parrot engine. (in official FAQ)

[12:39] <Zaba> is it true?

[12:40] <fglock> will likely use PCR for parsing, and write a PCR-Pugs backend

[12:40] <Zaba> hm ok

[12:40] <fglock> Zaba: don't know

[12:41] <moritz> Zaba: since there can be an arbitrary number of perl6 implementations that statement is just a guess

[12:42] <Zaba> hm

[12:42] <Zaba> is the test suite included in official pugs distribution?

[12:42] <fglock> v6.pm currently chokes at two methods in STD; the regexes parse ok

[12:43] <moritz> Zaba: it's not ready yet, and it lacks generallity...

[12:43] <Zaba> isn't v6.pm for perl5?

[12:43] <moritz> Zaba: but it's in the pugs repository under t/

[12:43] *** Debolaz joined
[12:43] <Zaba> okok

[12:44] <fglock> Zaba: yes, it is a perl6-in-perl5

[12:44] <Zaba> and i'm about pugs

[12:45] <fglock> re STD: the problems are in 'method heredoc' and 'method EXPR' 

[12:47] <fglock> Zaba: 'pugs' is perl6-in-haskell, 'Pugs' is the project which includes many other goodies

[12:47] <Zaba> yeah

[12:50] <fglock> moritz: re STD - but running 'regex' macros in pugs requires some libraries, that are not written yet

[12:50] <moritz> fglock: ok, thanks

[12:52] <rindolf> Hi all.

[12:52] <rindolf> Hi fglock, moritz, Zaba 

[12:52] <Zaba> moin

[12:56] <rindolf> Zaba: moin moin

[12:59] *** stevan__ joined
[12:59] *** DarkWolf84 joined
[13:05] <moritz> hi rindolf ;)

[13:05] <rindolf> moritz: what's up?

[13:05] <rindolf> I'm going out to bike soon.

[13:07] <fglock> ?eval macro token ( $a ) { ' "macro returned " ~ ' ~ $a } token '123'

[13:07] *** evalbot_r16152 is now known as evalbot_r16157

[13:07] <evalbot_r16157> "macro returned 123"

[13:07] *** diakopter joined
[13:08] <moritz> rindolf: not much, having vacations at my girlfriend's...

[13:10] * Zaba slaps GHC around with a industrial-strength trout with nuclear fishhead, super ultra dragon plus(tm)

[13:10] <moritz> Zaba: did ghc survive?

[13:10] <moritz> ;-)

[13:10] <Zaba> moritz, i hope

[13:10] <Zaba> NO

[13:27] <Zaba> sux

[13:35] *** miyagawa joined
[13:36] <Zaba> why does ghc lag so much?

[13:38] <moritz> what do you mean by "lag"?

[13:38] <moritz> that it takes long to compile something?

[13:38] <moritz> how much memory does your computer have?

[13:42] <Limbic_Region> moritz - perhaps you missed Zaba's departure

[13:49] *** fglock left
[13:51] <moritz> Limbic_Region: I did... I /ignore joins and leaves, that's too much line noise IMHO ;)

[13:53] *** Zaba joined
[13:55] *** franck___ joined
[14:01] <mj41_> Hi, so I definitely lost my commit passwd . User name rootmj ( rootmj_konf <a_t> seznam.cz ). Audrey once tried to changed it, but it didn't work. Any sugestions?

[14:01] *** vel joined
[14:02] <moritz> do you want a new username?

[14:02] *** Arathorn joined
[14:04] *** veritos joined
[14:05] <mj41_> yes, i don't care. I prefer mj41

[14:05] <mj41_> you can user email rootmj <a_t> seznam.cz , thanks

[14:06] <veritos> we giving you a commit bit?

[14:06] <moritz> why not?

[14:07] <veritos> i'm just asking if that's what's happening.

[14:07] <Zaba> hmm

[14:07] <Zaba> ghc sucks

[14:07] <veritos> Zaba: why now

[14:07] <moritz> I'm trying, but I can't reach commitbit.pugscode.org

[14:07] <moritz> track seems to be down as well :(

[14:07] <Zaba> veritos, lags the whole system

[14:08] <moritz> Zaba: not enough memory?

[14:08] <Zaba> moritz, no, just does

[14:08] <Zaba> even on few-liners

[14:09] <[particle]> moritz: timtoady and i haven't been able to reach commitbit since yesterday

[14:09] <kolibrie> I wonder if that is part of the stuff Juerd disabled - though I think he was only trying to disable trac

[14:09] <[particle]> even via http://svn.pugscode.org:9999 it's timing out

[14:09] *** buetow joined
[14:10] <moritz> mj41_: then I can't help you atm, sorry :)

[14:11] <kolibrie> I am almost getting something for http://svn.pugscode.org:9999, but feather's load is at 14, so it's not finishing

[14:12] <moritz> now I reached the web page, and submitted the data

[14:12] <moritz> mj41_: please tell me if an email reached you

[14:13] <veritos> anyways, welcome to our little project.

[14:19] *** fglock joined
[14:21] <Zaba> pugs: user error (*** *** Can't locate strict.pm in @*INC (@*INC contains: /usr/lib64/perl6/x86_64-linux /usr/lib64/perl6 /usr/lib64/perl6/site_perl/x86_64-linux /usr/lib64/perl6/site_perl /usr/lib64/perl6/auto/pugs/perl6/lib /usr/lib64/perl6/site_perl/auto/pugs/perl6/lib .).

[14:21] *** goban joined
[14:22] <Zaba> mh

[14:22] *** vel6608 joined
[14:22] <Zaba> is it wrong to use strict;?

[14:22] <ayrnieu> seems like a reasonable Perl6 error.  What's wrong?

[14:22] <ayrnieu> zaba - 'use v6;'

[14:22] <Zaba> is it wrong to use strict; in perl6?

[14:22] <Zaba> ayrnieu, i'm using pugs, do i really need?

[14:23] <kolibrie> Zaba: yes, strict is on by default 

[14:23] <kolibrie> 'use strict' will fail

[14:23] <Zaba> okay

[14:23] <Zaba> no need to use v6; in pugs?

[14:23] <Zaba> it's aready v6 -,-

[14:24] <kolibrie> it is nice to specify 'use v6' or 'use v6-alpha' so that you know it is a perl 6 program

[14:24] <kolibrie> required, of course, if you are using v6.pm

[14:24] <ayrnieu> Which also allows perl5s to fail nicely, after perl6 starts to go by binaries named 'perl' and people shebang accordingly.

[14:26] <ayrnieu> he set it on fire as a sacrifice to the gods of sticking to a set budget.

[14:26] <ayrnieu> mischan.

[14:26] <Zaba> hm

[14:27] <Zaba> ayrnieu, does it need pugs in shebang atm?

[14:27] <ayrnieu> It needs whatever binary you installed, which is probablt 'pugs'.

[14:27] *** amnesiac joined
[14:27] <kolibrie> unless you call it as 'pugs script.pl'

[14:28] <Zaba> hm ok

[14:28] <kolibrie> since I use pugs and v6.pm, I rarely put in the shebang line

[14:33] *** franck__ joined
[14:37] *** riffraff joined
[14:37] <riffraff> hi

[14:38] <riffraff> someone has an idea on why if I do "use Test" from interactive pugs I get *** user error (*** 

[14:38] <riffraff>         Unexpected "(@"

[14:38] <riffraff> ?

[14:38] <moritz> riffraff: set PERL6LIB correctly

[14:39] <Zaba> riffraff, i got undef

[14:39] *** mj41 joined
[14:39] <moritz> that is, to blib/lib/ of the pugs repository

[14:39] <Zaba> pugs 6.2.13 though

[14:40] <riffraff> moritz, was this needed two weeks ago? I don't remeber ever doing that

[14:41] <riffraff> and I gues is blib6/lib, right?

[14:42] <Zaba> is 6.2.13 old?

[14:42] <moritz> riffraff: no, it was not needed

[14:42] <moritz> and blib6/lib/, yes

[14:42] <riffraff> Zaba, I am on the development version, I think you are on the last release

[14:43] <Zaba> riffraff, o'rly?

[14:43] <riffraff> moritz, I see thank you 

[14:43] *** amnesiac joined
[14:43] <moritz> np

[14:46] *** veritos joined
[14:50] *** zamolxes joined
[14:50] <riffraff> would it make sense if I implement Str.subst as a dummy "make local copy, use s//" and commit it? 

[14:51] <riffraff> it is annoying that it is missing but I suck at haskell hacking more than I do at perl's, and this is telling a lot

[14:53] <TimToady> eventually we'll want everything implemented in Prelude.pm, even if circular

[14:53] <TimToady> then various implementations can optimize more or less of that into lower-level code

[14:54] <TimToady> and break the circularity

[14:54] <TimToady> nothingmuch's "circularity saw"

[14:54] <TimToady> so that would be fine

[14:55] <riffraff> yay

[14:56] *** Zaba joined
[15:00] <Zaba> shall i change my isp?

[15:02] <Zaba> eh..

[15:02] <Zaba> hmm

[15:02] <Zaba> is there socket library for perl6?

[15:02] <Zaba> yet*

[15:02] <Zaba> or..

[15:03] <riffraff> by the way, I remeber a Pattern role, is there also a Replacement thingy, covering the things that can be used in substitution (or maybe substitution-like things that I can't imagine now) ?

[15:05] <Zaba> hmm

[15:05] <Zaba> how does s/// work in perl6?

[15:05] <TimToady> Zaba: you can get at most p5 libraries by saying "use perl5:Socket" currently

[15:05] <Zaba> ah ok

[15:05] <Zaba> TimToady, it's IO::Socket btw

[15:06] <Zaba> thanks

[15:06] <TimToady> s/// works the same as long as you don't use brackets

[15:06] <TimToady> the bracketed form wants a pseudo assign for the 2nd half

[15:06] <TimToady>  s[foo] = "bar"

[15:07] <Zaba> ok

[15:07] <TimToady> ?eval $_ = "1 2 3"; s:g[\d+] += 42; $_

[15:07] *** evalbot_r16157 is now known as evalbot_r16160

[15:07] <evalbot_r16160> \"1 2 3"

[15:07] <TimToady> hmm, yeah, that was broken for some reason...

[15:08] <TimToady> ?eval $_ = "1 2 3"; s:g[2] += 42; $_

[15:08] *** vel joined
[15:08] <evalbot_r16160> \"1 44 3"

[15:09] <TimToady> something wrong with \d+ in evalbot, probably thinks generating Unicode aware \d is unsafe

[15:11] <TimToady> ?eval $_ = "1 2 3"; s:g[<[0..9]>+] += 42; $_

[15:11] <evalbot_r16160> \"1 2 3"

[15:12] <TimToady> ?eval $_ = "1 2 3"; s:g[ [ 0 | 1 | 2 | 3 | 4 ]+ ] += 42; $_

[15:12] <evalbot_r16160> \"43 44 45"

[15:13] <TimToady> hmm, now that I recall, it was more on the order of not returning the match pos correctly

[15:13] <TimToady> ah well

[15:14] <svnbot6> r16161 | karhu++ | Greatly fixed perlintro.

[15:17] <svnbot6> r16162 | mj41++ | [util/PaP6-testing]

[15:17] <svnbot6> r16162 | mj41++ | * fix some bugs, some cleanup

[15:17] <svnbot6> r16162 | mj41++ | * die -> croak

[15:17] <svnbot6> r16162 | mj41++ | * document verbose level

[15:30] *** goban joined
[15:31] *** xern joined
[15:33] <moritz> karhu++ #good job 

[15:58] <riffraff> is it possible to make a regex into a string?

[15:58] <riffraff> interpolation just gives "<Regex>"

[15:59] <moritz> perhaps .perl?

[16:00] <moritz> doesn't work atm in pugs

[16:00] <moritz> ?eval my $a=regex {\d+}; $a.perl

[16:01] <evalbot_r16160> "\\\{regex}"

[16:01] <riffraff> because I don't know how to use a regex object in s, so I was trying s/$rgx/rplcement/ but it cannot interpolate.. thought of converting to str

[16:01] <riffraff> now I understand the problem is much deeper

[16:01] <avar> ?eval my $a = token { \d+ } ; ("123" ~~ $a).perl

[16:02] <moritz> avar: that's just the Match object

[16:02] <avar> ya

[16:03] <evalbot_r16160> *** Cannot parse regex: :ratchet(1)[ \d+ ]␤*** Error: ␤"Match.new(\n  ok => Bool::False, \n  from => 0, \n  to => 0, \n  str => \"\", \n  sub_pos => (), \n  sub_named => \{}\n)"

[16:03] <moritz> ?eval my $s='\d+'; m/<$s>/ ~~ "123"

[16:04] <riffraff> I think a regexen object doesn't hold a copy of the string it was created from

[16:04] <riffraff> but it should, imo

[16:04] <evalbot_r16160> *** Cannot parse regex: <$s>␤*** Error: ␤Match.new(␤  ok => Bool::False, ␤  from => 0, ␤  to => 0, ␤  str => "", ␤  sub_pos => (), ␤  sub_named => {}␤)

[16:04] <moritz> riffraff: at least its AST

[16:05] <riffraff> I'd prefer the string, so it is eval'able again

[16:05] <riffraff> like numbers or strings

[16:05] <riffraff> but maybe .perl would be enough

[16:06] <riffraff> and it is just my ruby background showing :)

[16:06] <TimToady> in p6 regexen are not string, they're programs

[16:07] <TimToady> if you want to use another regex in yours, use /<$rgx>/

[16:07] <TimToady> bare $rgx is always a literal match

[16:07] <moritz> TimToady: so .perl shouldn't reproduce everthing?

[16:07] <TimToady> so it wouldn't do what you want anyway

[16:08] <TimToady> it should, but there's little point in decompiling and recompiling when you can just use a ref

[16:08] <riffraff> makes sense

[16:08] <TimToady> arguably, treating regex as strings was the biggest design mistake in Perl 1..5

[16:08] <moritz> so does m/<$regex>/ only works when $regex is a regex, or should it work with a string as well?

[16:09] <TimToady> it should work if it's a string

[16:09] <TimToady> don't know if it's implemented tho

[16:09] <moritz> ok

[16:10] <TimToady> ?eval my $pat = "abc"; $pat ~~ /<$pat>/

[16:10] <avar> TimToady: I guess you'll be happy to know that I've recently been fixing your screwups in 5.10 :)

[16:10] <moritz> it seems <$foo> is not implemented at all in pugs

[16:10] <avar> regexes can be objects now

[16:10] <avar> (or any scalar)

[16:10] <TimToady> but not the assumption that $foo interpolates before regex compilation

[16:11] <TimToady> I carefully avoided the multiple interpolation bugs of shell scripting, only to fall into the same trap with regexen

[16:11] <evalbot_r16160> *** Cannot parse regex: <$pat>␤*** Error: ␤Match.new(␤  ok => Bool::False, ␤  from => 0, ␤  to => 0, ␤  str => "", ␤  sub_pos => (), ␤  sub_named => {}␤)

[16:13] <avar> TimToady: yup, but you can do "str" =~ sub { $re => "(ook|eek)" } I guess

[16:13] <avar> but ya, I haven't changed the parser/tokenizer

[16:15] *** bernhard joined
[16:16] <TimToady> biab &

[16:22] *** veritos joined
[16:24] *** cognominal joined
[16:26] *** justatheory joined
[16:30] <riffraff> looking at src/Pugs/Eval.hs: I can see a reduceSyn "subst" doesn't this mean that this should be actually parsed ?

[16:30] *** cognominal joined
[16:39] *** cognominal joined
[16:43] *** cognominal joined
[16:46] *** ofer is now known as concept11

[16:46] *** concept11 is now known as ofer

[16:53] *** lichtkind joined
[16:55] *** franck__ joined
[17:05] *** fglock joined
[17:06] *** kanru joined
[17:07] *** cognominal joined
[17:08] *** Debolaz joined
[17:11] *** sapir joined
[17:12] <fridim> is there an argument of the choice of haskell over ocaml (more perf?), or did you choose it just because you love it more ? :)

[17:12] <moritz> fridim: audreyt implemented pugs as a haskell exercise first ;)

[17:13] <riffraff> is there an obvious way of calling pugs' internal functions fro perl6? I can use Pugs::Internals::sprintf, for example, but how do I call mkRegex defined in RRegex.hs

[17:13] <fridim> moritz, ok :)

[17:18] <Zaba> hmm

[17:18] <Zaba> snowing.pl from examples doesn't work here

[17:18] <Zaba> pugs 6.2.13

[17:18] <Zaba> ah

[17:18] <Zaba> does

[17:18] <Zaba> just Slooow

[17:19] *** justatheory joined
[17:22] <gaal> riffraff: you... don't, but if you need it for exploratory purposes just add something to Prim.hs

[17:22] <riffraff> yeah I was thinking of that

[17:22] <Zaba> pugs is so slow =(

[17:23] <Zaba> it idles when i start some script for about 1/3 of minute eating CPU a lot

[17:23] <gaal> riffraff: re: reduceSyn, that's a hacky thing. Something (Parser.hs) had constructed a Syn node and reduceSyn is the evaluator moosing it

[17:23] <Zaba> then begins to slowly execute it

[17:23] <Zaba> any ideas why?

[17:23] <gaal> Zaba: do you have a blib6/lib/Prelude.pm.yml file?

[17:23] <gaal> also, did you build with "make soon"?

[17:23] <gaal> or just "make"?

[17:24] <sapir> what's make soon?

[17:24] <Zaba> gaal, i installed it from portage

[17:24] <riffraff> point is: if I want to implement X in perl6 I need Y (available in haskell) at the perl level. Otherwise I can implement X at the haskell level but then we have less portability no?

[17:24] <gaal> make soon happens faster but gives a much slower pugs

[17:24] * Zaba greps logs

[17:24] <sapir> make fast?

[17:24] <gaal> sapir: renamed to make soon, because it built a _slow_ pugs :)

[17:24] <gaal> riffraff: well, yes, that's the tradeoff.

[17:24] <sapir> ah, I think in 6.2.13 it's still make fast

[17:25] <gaal> probably, yes.

[17:25] <Zaba> is 6.2.13 very old?

[17:25] <sapir> because make soon doesn't work here :)

[17:25] <gaal> kinda.

[17:25] <Zaba> well

[17:25] <sapir> also that would explain why it's slow for me too :)

[17:25] <Zaba> build was VERY time and mem/cpu consuming

[17:25] <Zaba> i'm not sure if it was fast soon whatever

[17:26] <gaal> Zaba: how much free RAM does your machine have?

[17:26] <Zaba> gaal, 768mb

[17:26] <gaal> pugs can easily eat half a gig at build time

[17:26] <Zaba> and the build was _veeeery_ mem/cpu consuming

[17:26] <gaal> oh, another tip: use a snapshot GHC 6.7

[17:26] <Zaba> so even GNU screen _lagged_

[17:27] <gaal> well, builds that aren't CPU consuming aren't doing their jobs...

[17:27] <sapir> and I have 256megs . . .

[17:27] <Zaba> ghc seems to be an excessive hog here

[17:27] <Zaba> even on fewliners

[17:27] <gaal> sapir: you *might* get away with an optimized build, but you'll have to tweak the heap size in config.yml

[17:27] <Zaba> 03:33:43 < gaal> Zaba: do you have a blib6/lib/Prelude.pm.yml file? <-- yeah it loads Prelude

[17:27] <gaal> and don't run anything else at the time :)

[17:28] <riffraff> gaal, about reduceSyn: we are er.. abusing the parser to parse a method call? Anyway, does it actually work? :)

[17:28] <gaal> riffraff: dunno, what does smoke.pugscode.org say? :)

[17:28] <riffraff> ?eval subst("hello",/h/,'f')

[17:28] <Zaba> it's even slow on saying it can't find something in @*INC

[17:28] <gaal> Zaba: okay, but note it won't find it if you cd elsewhere

[17:28] <sapir> do I have to make clean to fix whatever make fast did, or is just making enough?

[17:28] *** evalbot_r16160 is now known as evalbot_r16162

[17:28] <evalbot_r16162> Error: No such subroutine: &subst

[17:29] <riffraff> not working :)

[17:29] <gaal> sapir: better make clean.

[17:29] <Zaba> time pugs -MNonexisting

[17:29] <Zaba> real    0m2.244s

[17:29] <Zaba> user    0m2.120s

[17:29] <Zaba> sys     0m0.060s

[17:29] <sapir> ah well

[17:29] <gaal> that isn't a meothd call. :)

[17:29] <Zaba> it's use Nonexisting;

[17:29] <Zaba> and it takes THAT long

[17:29] <sapir> so ghc_heap_size is the size of the heap that ghc uses when it compiles?

[17:30] <Zaba> time perl -MNonexsisting

[17:30] <Zaba> real    0m0.006s

[17:30] <Zaba> user    0m0.004s

[17:30] <Zaba> sys     0m0.000s

[17:30] <gaal> sapir: yes.

[17:30] <Zaba> that's a REAL difference!

[17:30] <riffraff> gaal, well, it does'nt work the other way either IIRC 

[17:30] <riffraff> ?eval "hello".subst(/h/,'f')

[17:30] <sapir> so if I set it lower it uses less memory? won't it run out?

[17:30] <evalbot_r16162> Error: No such method in class Str: &subst

[17:31] <gaal> Zaba: there have in fact been improvements in pugs in that area. on my machine time pugs -e1 is a little under a second now. sure, could be much better. and should, eventually.

[17:31] <moritz> riffraff: did you commit your changes?

[17:31] <riffraff> I don't have changes :)

[17:31] <Zaba> gaal, yes it should be

[17:31] <moritz> riffraff: ok :(

[17:31] <Zaba> and it's not now

[17:31] <gaal> sapir: it'll do its best to GC more aggressively

[17:31] <Zaba> perl5 lacks a lot of perl6 features i need

[17:31] <sapir> ok

[17:31] <Zaba> though perl6 is unusuable

[17:31] <gaal> sapir: thus avoiding swap, which if you hit, you might as well leave the computer and go on vacation

[17:32] <riffraff> I need to either: understand how to use a pattern object with s, or pull VSubst (I think) to the perl level 

[17:32] <gaal> riffraff: looking

[17:32] <Zaba> question is, what should i use before christmas?

[17:32] <sapir> gaal: practically what I did when I compiled it. closed basically everything (including X) and left it going for the day

[17:33] <gaal> Zaba: that's up to you, your goals and the environment you're running in.

[17:33] <riffraff> Zaba, perl with some perl6 modules ?

[17:33] <riffraff> s/perl$/perl5

[17:33] <gaal> sapir: pugs encourages longer vacations :)

[17:33] <sapir> gaal: ah. it's a feature :)

[17:33] <Zaba> no

[17:34] <gaal> sapir: seriouslier now, if you're planning on a lot of Hs dev work, you pretty much want lots of ram.

[17:34] *** SubStack joined
[17:35] <gaal> otherwise - use make soon, or be content with pugses others build...

[17:35] <gaal> and, try a ghc 6.7 -- creates faster pugsed faster

[17:35] <gaal> but don't build your own ghc ;-)

[17:36] <gaal> Zaba, sapir: bottom of this page: http://www.haskell.org/ghc/dist/current/dist/

[17:36] <lambdabot> Title: Index of /ghc/dist/current/dist

[17:36] <sapir> ok next question: I run make, it gets up to PIL2JS which tells me the 'name' method doesn't exist and to rerun Makefile.PL, which I'm pretty sure I've already done

[17:37] <gaal> unpack in ~ , cd to the dir, follow the README

[17:37] <gaal> uh, I think you can ignore PIL2JS

[17:37] <gaal> for now.

[17:37] <sapir> I mean the make tells me

[17:38] <gaal> does the make die?

[17:38] <sapir> yup. I'm trying make -k now

[17:38] <gaal> if it happens again nopaste the log please

[17:39] <sapir> if so, it'll probably be after I clear out everything, get ghc from that link, and get pugs from svn

[17:40] <gaal> ok. while you're at it maybe "make realclean" or even wipe out the working copy and re-co

[17:43] <gaal> riffraff: I'm getting the feeling that Syn "substr" is a fossil

[17:43] <gaal> making sure...

[17:43] *** Psyche^ joined
[17:44] <gaal> ah, no. substLiteral

[17:44] <gaal> P.P.Literal:626

[17:45] <riffraff> 626?

[17:45] <gaal> line

[17:45] <gaal> src/Pugs/Parser/Literal.hs line 626

[17:45] <riffraff> yes yes I was trying to understand what it means:)

[17:45] <gaal> that's where the parser sees s/elk/moose/

[17:46] <gaal> (or tr///) and puts the Syn "substr" thing

[17:46] <Zaba> hmm

[17:46] <riffraff> ok

[17:46] <gaal> anyway: the reason your "substr" wasn't working is because you were talking about the other substr

[17:46] <gaal> the function that has the same name in p5

[17:46] <Zaba> ?eval my $s = "Hello wotld!\n"; $s =~ s/tl/rl/; print $s

[17:47] <evalbot_r16162> OUTPUT[<Subst>] Bool::True

[17:47] <Zaba> doh i hate it

[17:47] <riffraff> gaal, subst, no 'r'

[17:47] <gaal> "~~"

[17:47] <gaal> riffraff: well. no such prim...

[17:47] <riffraff> exactly :)

[17:47] <gaal> let me see if the prelude knows it

[17:47] <Zaba> where did the old s/// behavior go?

[17:48] <riffraff> no, it does not AFAICT, I was just trying to implement it on t of s///

[17:48] <Zaba> ?eval my $s = "Hello wotld!\n"; print $s ~ s/tl/rl/; print $s;

[17:48] <evalbot_r16162> OUTPUT[Hello wotld!␤<Subst>Hello wotld!␤] Bool::True

[17:48] <gaal> Zaba: "=~" is spelled "~~" now

[17:48] <riffraff> but since I suck, I could not get how to make the magic happen and go down to pugs internal behaviour, the one used for s///

[17:48] <Zaba> ?eval my $s = "Hello wotld!\n"; print $s ~~ s/tl/rl/; print $s;

[17:48] <evalbot_r16162> OUTPUT[1Hello world!␤] Bool::True

[17:49] <Zaba> gaal, porting is pain.

[17:49] <Zaba> ?eval my $s = "Hello wotld!\n"; $s ~~ s/tl/rl/; print $s;

[17:49] <gaal> a lot of it is mechanical.

[17:49] <evalbot_r16162> OUTPUT[Hello world!␤] Bool::True

[17:49] <Zaba> it seems different still to me

[17:49] <gaal> this particular case will be taught to raise a warning...

[17:49] <gaal> Zaba: what does?

[17:50] <Zaba> gaal, nothing, and it's why 30% of people will stick with perl5 which 'is enough for their purposes'

[17:50] <Zaba> s/nothing/everything/

[17:50] <gaal> Zaba: that's okay

[17:50] <gaal> took a while to transition from Perl 4, too.

[17:51] <Zaba> which kind of interpreter does perl 5 use? and perl 6?

[17:51] <gaal> what do you mean?

[17:51] <Zaba> on kind i meant, how does it work

[17:52] <Zaba> like, does it just go by character and see what's it, or uses some kind of flex/bison/antlr-like tools?

[17:52] <gaal> Zaba: Perl 5 has a heavily hacked yacc grammar

[17:53] <Zaba> oh

[17:53] <Zaba> and pugs?

[17:53] <Zaba> gaal, then why is it so fast?.. ;-)

[17:53] <gaal> Zaba: Pugs has a parser built with Parsec, a Haskell library. But Perl 6 will eventually parse itself with Rules

[17:53] <Zaba> compared to pugs even, perl5 is flying

[17:53] <Zaba> to current pugs that is

[17:54] <gaal> Zaba: speed isn't the top priority now.

[17:54] <Zaba> gaal, then it's another reason to stick with perl5 ;-)

[17:54] <gnuvince> -Ofun

[17:54] <gaal> Perl 5 is based on code that's been tweaked for very, very long.

[17:54] <Zaba> i see

[17:55] <Zaba> gaal, i see, and rewriting everything from scratch in better way is better than tweaking on

[17:55] <Zaba> though the question is, doesthe new attempt really work better, or at least same fast/wahever criteria as the previous?

[17:55] <gaal> we have kind of a large feature set. some of it was very hard to do in c

[17:55] *** Psyche^ is now known as Patterner

[17:56] <Zaba> gaal, C isn't really good for fast and advanced parsing/lexing

[17:56] <Zaba> at least it might be fast, then code turns unreadable

[17:57] <gaal> riffraff: okay, the thing is s/// works at the AST level and Prim looks like it doesn't -- but it can :)

[17:57] <gaal> riffraff: what you do is create your Syn "substr" node

[17:58] <gaal> then evaluate it, in Prim

[17:58] <gaal> with evalExp

[17:59] <gaal> riffraff: see for example Prim:315, try

[17:59] <gaal> basically it guards the code with a exception moose, but the point is it runs it

[17:59] <gaal> evalExp $ App (Val $ VCode sub) Nothing []

[18:00] <gaal> that means,

[18:00] <gaal> "evalExp (this function call)"

[18:01] <gaal> you'll need something like evalExp $ Syn "substr" str subst adverbs

[18:01] <gaal> look at the code in Literal.hs to see how to create default adverbs

[18:02] <riffraff> I see but I don't think I need to do that, the parsing should be correctly handled by the current parser, I just need to fill in the code for the method, more like "say"

[18:02] <riffraff> then try

[18:02] <riffraff> or am I wrong?

[18:02] * Zaba just wants to implement an irc bot in perl, with real man's OO, not perl5's

[18:03] <gaal> Zaba: well, nobody's claimed pugs was the righteous heir to the throne. so far no other implementation has some close to pugs' coverage.

[18:03] <gaal> Zaba: but that said, look into Moose.pm (perl 5)

[18:03] <rindolf> Hi gaal 

[18:03] <Zaba> gaal, i did

[18:03] <Zaba> and i decided to take a look at perl6 before diving into dirt

[18:04] <gaal> riffraff: you are wrong :) what you want is to fire the evaluator code at runtime that deals with substitutions

[18:04] <gaal> hello riffraff 

[18:04] <gaal> hello rindolf 

[18:04] <gaal> <- another tabcompletion casualty

[18:04] <rindolf> gaal: hi hi.

[18:04] <rindolf> gaal: are you at home now?

[18:04] <gaal> riffraff: you're right in that you need no special parser support

[18:05] <gaal> rindolf: I am.

[18:05] <rindolf> gaal: nice.

[18:05] <Zaba> cya

[18:05] <rindolf> gaal: say hi to Foo for me.

[18:05] <gaal> thanks

[18:05] <gaal> rindolf: the point is to reuse the actual substitution implementation

[18:06] <gaal> grrr

[18:06] <gaal> riffraff: see above.

[18:06] <riffraff> yep

[18:06] <sapir> gaal: the advantage of mp6 etc. is? they bootstrap from perl5?

[18:07] <riffraff> but would'n that cause misterious effects related to when the regexen are interpolated, when the code is executed and so on, that don't exactly match the semantics of the method?

[18:08] <gaal> by the time you hit Prim, your rx is already parsed

[18:08] <riffraff> ok

[18:09] <sapir> gaal: or do they?

[18:10] <gaal> sapir: you'll have to talk with fglock, but I think their idea is that they are very quickly Perl 6

[18:10] <sapir> easier to complete p6 in a p6-like than in haskell?

[18:11] <gaal> that is, there's the minimum possible p5 code in them and they are mostly implemented in successively more comlpex subsets of p6

[18:12] <gaal> sapir: completing p6 take a lot of moose; possibly the parser will be easiest in p6. but the hs runtime does a lot of thing well, and gives it to pugs for free

[18:12] <gaal> examples: GC, concurrency, io...

[18:13] *** Casan joined
[18:13] <sapir> so Parrot is intended to replace Haskell for that purpose?

[18:13] <gaal> btw, our runtime is a hybrid one; we *also* have a perl5 interpreter available to do what it's good at

[18:13] <gaal> for example, unicode stuff

[18:14] <gaal> Zaba would have been happy; it takes 0 wallclock secs to load :-)

[18:14] <gaal> well, parrot is one backed

[18:15] <gaal> pugs can compile to several things

[18:15] *** jisom joined
[18:15] *** laye joined
[18:16] <integral> hmm, what's the current status of pugs's compilation stuff?  Has it fully moved to the new internals yet, and is pir output broken or working?  Or, how do I find out these answers?

[18:17] <gaal> integral: re PIR I don't know. re the other stuff, backlog ~two days ago 

[18:17] <gaal> a discussion between cmarcelo and myself

[18:17] *** theorbtwo joined
[18:19] <integral> thanks

[18:19] <gaal> sure

[18:22] *** buetow joined
[18:24] *** bonesss joined
[18:24] *** Arathorn left
[18:33] <rindolf> gaal: are you still developing on Windows?

[18:49] *** [particle] joined
[18:50] *** atp joined
[18:52] *** geoffb joined
[18:59] *** Decker joined
[19:18] *** Yappo joined
[19:19] *** Limbic_Region joined
[19:19] <svnbot6> r16163 | rhr++ | First commit, added myself to AUTHORS

[19:20] *** jisom joined
[19:21] *** theorbtwo joined
[19:28] <Limbic_Region> hey theorbtwo

[19:40] <svnbot6> r16164 | rhr++ | Rough draft spec of Pipe.to and Pipe.from

[19:42] <rhr> TimToady: comments?

[19:44] <rhr> what about my ideas for Pipe.pair and Pipe.fork?  should the latter return a (IO $r, IO $w) but True/False for parent/child?

[19:48] <TimToady> it's a good start.  Pipe.fork doesn't feel right.  the objects in question are processes, and pipes just happen to connect them some of the time

[19:49] <TimToady> (I also think solutions involving "but True" are a code smell showing the wrong class is being asked to do something.)

[19:50] <rhr> agreed, I was hoping you'd come up with something better :)

[19:51] <rhr> how about Pipe.pair?

[19:52] *** benny joined
[19:53] <TimToady> sure, that's just a wrapper around the pipe() syscall.

[19:54] <rhr> ok, I'll add it.  does the interface (returns List of IO) sound good?

[19:55] *** penk joined
[19:55] <TimToady> good enough for now, but maybe we should have some official way of combining multiple one-way pipes into something more like a two-way socket pair.

[19:55] <rindolf> Hi TimToady 

[19:55] <TimToady> rindolf: howdy

[19:55] <rindolf> TimToady: what's up?

[19:56] <TimToady> oh, the usual

[19:56] <rindolf> TimToady: BTW, did you phrase the Perl Artistic licence yourself?

[19:56] <TimToady> the original one?  yes.  it was written sloppily on purpose.

[19:56] <rindolf> TimToady: hmmm...

[19:56] *** penk joined
[19:56] <rindolf> TimToady: why?

[19:56] <rindolf> TimToady: the FSF considers it non-free.

[19:57] <TimToady> I wanted corporate lawyers to be able to see 50 ways to wriggle out of it so they'd let their programmers use Perl

[19:57] <rindolf> TimToady: heh

[19:59] *** Aankhen`` joined
[19:59] *** SubStack joined
[20:01] <wolverian> has anyone gone to fsf about artistic 2, by the way? I think they still haven't updated it 

[20:01] <svnbot6> r16165 | rhr++ | Add Pipe.pair

[20:01] <wolverian> that is, they still have this: "The Artistic License 2.0 is currently in a draft phase with The Perl Foundation. ..."

[20:01] <rhr> so we want some EntangledIO role, with .closer and .closew or some such?

[20:04] <rhr> or do we just add options to IO.close?

[20:04] <TimToady> phone&

[20:05] <rhr> but if we use normal IO objects for that, .fileno doesn't know what to return...

[20:09] *** veritos joined
[20:22] <veritos> heya

[20:24] <riffraff> in pugs internals is there a generic way to lift a val from a generic type Val to something specific like VStr ?

[20:26] <SamB> riffraff: why don't you see what typeclasses VStr is an instance of?

[20:29] <riffraff> bvecause I want to pass a Val that I know is a VStr to something that just wants that 

[20:30] <riffraff> but probable I'm approaching the thing from a wrong perspective :)

[20:31] <SamB> what I mean is that any generic mechanism must be in a typeclass that the various value types, like VStr, are instances of

[20:31] <svnbot6> r16166 | rhr++ | Spec Socket.pair, analogous to Pipe.pair

[20:32] *** Xach joined
[20:32] <riffraff> dunno what to look for :)

[20:34] <veritos> riffraff: search for a line "type VStr"

[20:36] *** fglock joined
[20:37] <riffraff> i was looking for instance  vstr 

[20:37] <riffraff> but nevermind, I sidestepped the problem :)

[20:38] *** veritos left
[20:40] *** pack|pizza joined
[20:43] <fglock> hmm - I'm back to 'what to do next?'

[20:43] *** Xach left
[20:45] *** marmic joined
[20:47] <TimToady> fglock: either pick the easiest thing, or the hardest thing, or something in the middle.  :)

[20:48] <fglock> kp6-in-C with embedded perl5 seems to be -Ofun, for some weird reason

[20:49] <fglock> I guess I like "fast", rather than "features"

[20:49] <fglock> but "eval" in C is difficult

[20:50] <fglock> kp6-in-parrot would be duplicated effort

[20:50] <fglock> kp6-in-pugs is very slow

[20:52] <fglock> STD-in-PCR-in-Pugs would need some serious backtracking-library implementation & profiling

[20:52] <riffraff> feature I'd like today: variable interpolation in regexen :)

[20:53] <fglock> riffraff: I don't think I can fix that; it depends heavily on the haskell/perl5 bridge

[20:55] <[particle]> kp6-in-parrot should be faster, no?

[20:56] <[particle]> fglock: think you could team up with pmichaud and implement something together?

[20:56] <fglock> [particle]: re faster: not sure, kp6 implements OO at high level

[20:56] <[particle]> it seems one path you haven't really pursued is multiple hackers on the same project :)

[20:57] <[particle]> well, parrot implements oo at low level

[20:57] <[particle]> you should be able to modify kp6 to take advantage of that

[20:57] <fglock> re team: sure, but I'd like to keep an eye on 6-in-6

[20:57] <fglock> rather than implement perl6 *with* parrot

[20:58] <[particle]> okay, then the parrot emitter can be smarter about oo

[20:58] <fglock> the PMC would need some extra goodies, 

[20:59] <fglock> like "modified" flags that kp6 needs at BEGIN time

[20:59] <[particle]> parrot classes have an 'instantiated' flag

[21:00] <[particle]> hrmm, i guess you want that for objects, though

[21:00] <fglock> ok

[21:00] <fglock> for containers

[21:00] <[particle]> you could certainly build a Ref pmc that has a 'modified' flag

[21:00] <fglock> but that's just a detail

[21:01] <[particle]> s/Ref/Container/ # whatever

[21:01] <beppu> http://lolgeeks.com/wp-content/uploads/2007/05/lolgeeks016.jpg

[21:03] <fglock> otoh, p6-in-parrot already has a plan and a history, I don't think it would reuse much of my work

[21:04] <gaal> riffraff: does fromVal do what you want?

[21:05] <gaal> it's monadic, so you need pureStr <- fromVal x

[21:05] <gaal> used all over Prim

[21:05] <[particle]> is running Test.pm enough to say you've implemented enough of p6 to build p6-on-p6?

[21:05] <fglock> [particle] any ideas on how we can help each other?

[21:05] <fglock> [particle]: no

[21:06] <gaal> rindolf: did you mean pugs? rarely

[21:06] <[particle]> i guess the problem with defining a subset of p6 is *which* subset

[21:07] <riffraff> gaal, I'll check it pout, thank you

[21:08] <[particle]> fglock: pm is planning a more kp6-like approach to parsing STD, iirc

[21:08] <[particle]> you should probably email him, as he hasn't been reliably on irc lately

[21:09] <[particle]> i'd be happy to be part of the conversation, if it'll help

[21:09] <gaal> np

[21:09] <fglock> btw, kp6 can be desugared to the current p6parrot, using lots of workarounds

[21:10] <[particle]> i wonder if that's any faster than pugs

[21:10] <fglock> which means it could run 6-on-6

[21:11] <gaal> z&

[21:11] <fglock> I'm not reliably on mail :) irc is easier

[21:12] <[particle]> perhaps tomorrow, then. he's not available now

[21:17] *** miyagawa joined
[21:19] <fglock> [particle]: I think my problem with p6parrot is that it depends heavily on parrot,

[21:20] <fglock> that is, you can't work around bugs

[21:20] <fglock> in kp6 you have the emulation layer until everything is fine

[21:21] <fglock> of course, this doesn't help much for parrot's development

[21:22] <fglock> got to go home &

[21:22] <[particle]> ok, we'll talk more later

[21:25] *** SubStack joined
[21:35] *** dduncan joined
[21:41] *** autark joined
[21:41] <riffraff> pouch, fromVal was so much easy to spot, I wonder why I missed it

[21:47] <riffraff> what type declaration is x :: !Foo ?  

[21:50] <gaal> riffraff: same as x :: Foo, except the field is strict

[21:54] <riffraff> ok, I think I understand :)

[21:54] <gaal> you can ignore it for most purposes

[21:54] <gaal> basically it's an optimization thing

[21:54] <avar> ook

[21:54] <gaal> apart from some cases where it influences semantics

[21:55] <svnbot6> r16167 | avar++ | testing commit

[21:55] <gaal> (for some algorithms it radically influences space behavior)

[22:00] <riffraff> ok

[22:00] *** drupek12 joined
[22:03] *** jjore-w joined
[22:06] *** ruoso joined
[22:07] *** mr_ank joined
[22:18] *** lichtkind joined
[22:19] * avar fails at writing a module in p6

[22:19] <avar> stupid build systems...

[22:22] *** polettix joined
[22:26] *** Limbic_Region joined
[22:30] * Limbic_Region wonders if the bold green (TimToady) and bold red (audreyt) in the irclog coloring has anything to do with perl 6 coming out on Xmas

[22:36] *** MindUs joined
[22:36] <MindUs> Free phone calls all around the world ----->  http://callfree.point-serv.com/en/

[22:36] <lambdabot> Title: Free phone calls all around the world | Free Calls

[22:37] *** MindUs left
[22:40] *** MindUs joined
[22:40] <MindUs> Free phone calls all around the world ----->  http://callfree.point-serv.com/en/

[22:40] <lambdabot> Title: Free phone calls all around the world | Free Calls

[22:40] *** MindUs left
[22:41] <offby1> *sigh*

[22:41] <offby1> that guy was spamming #emacs a day or so ago too

[22:41] *** justatheory joined
[22:42] *** dduncan joined
[22:51] *** gnuvince_ joined
[22:51] *** cmarcelo joined
[22:52] <gnuvince_> Hey, weird thing, I'm trying to install pugs on my new Feisty Fawn installation, and I get this message: Can't locate v6.pm in @INC

[22:53] <gnuvince_> Any hint?

[22:54] <[particle]> maybe install is broken?

[22:54] <qmole> cpan install v6?

[22:54] <gnuvince_> qmole: cpan won't run because of the same error :)

[22:54] <[particle]> you can install v6 from pugs, too

[22:55] <qmole> not sure where you'd get that message, i thought v6 and pugs were separate

[22:55] <[particle]> cd v6/v6-alpha or something

[22:55] <Tene> gnuvince_: 'make install' is broken right now

[22:56] <Tene> you've got perl6 stuff in your perl5 lib/site_perl/auto 

[22:56] <Tene> you'll need to remove it manually.

[23:00] <gnuvince_> Tene: so what do I do?

[23:00] <gnuvince_> reinstall perl5?

[23:00] <Tene> gnuvince_: I just told you what you needed to do.

[23:00] <Tene> reinstalling perl5 won't help

[23:01] <Tene> try this:

[23:01] <Tene> find /usr/lib/perl5 -ctime -1

[23:01] <Tene> that will show you all the files in /usr/lib/perl5 that were created in the past day

[23:02] <gnuvince_> Thank you

[23:10] *** drupek12 joined
[23:17] *** justatheory joined
[23:38] *** catch23 joined
[23:46] *** goban joined
