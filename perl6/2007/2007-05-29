[00:01] <meppl> good night

[00:04] *** weinigLunch joined
[00:05] *** weinigLunch is now known as weinigLap

[00:17] *** jisom joined
[00:18] *** Psyche^ joined
[00:27] *** Psyche^ is now known as Patterner

[00:39] *** nipotaway is now known as nipotan

[01:23] *** ruz joined
[01:33] *** dolmans joined
[01:36] *** stevan_ joined
[01:52] *** mako132 joined
[02:30] *** Aankhen`` joined
[03:08] *** stevan__ joined
[03:26] *** daxim_ joined
[03:27] *** obvio171 joined
[03:29] *** nekokak_ joined
[03:39] *** nekokak__ joined
[03:48] *** jisom_ joined
[03:50] *** tokuhirom_ joined
[04:08] *** nekokak joined
[04:52] *** ssd7 left
[04:53] *** weinigLap joined
[05:06] *** BooK joined
[05:12] *** araujo joined
[05:27] *** devogon joined
[05:29] *** weinigLap joined
[05:44] *** obvio171_ joined
[06:09] *** Alias_ joined
[06:24] <mj41> good morning from Czech republic

[06:24] <dduncan> I respond

[06:25] *** Averell joined
[06:26] <Alias_> I express surprise

[06:35] <dduncan> I notice

[06:37] *** audreyt joined
[06:41] <Aankhen``> I like chicken.

[06:41] <gaal> I, moose.

[06:48] * Aankhen`` wallabies gaal.

[06:49] <Tene> good night from far away from Czech republix

[06:49] <Tene> "republic"

[06:50] <Aankhen``> G'night Tene.

[06:51] *** kane_ joined
[07:08] *** buetow joined
[07:09] *** franck__ joined
[07:09] *** obvio171_ is now known as obvio171

[07:10] <meppl> good morning

[07:10] <moritz> good morning indeed ;)

[07:12] <meppl> good morning moritz

[07:16] *** iblechbot joined
[07:29] *** BlackSabbath joined
[07:30] <dduncan> good morning indeed

[07:33] *** rho joined
[07:49] *** obvio171 joined
[08:11] <svnbot6> r16553 | Darren_Duncan++ | ext/QDRDBMS/ : updated AST.pm : EntityName type no longer impl over other Node types, expanded TypeInvo type ; other small changes

[08:12] *** buetow joined
[08:20] *** rissy joined
[08:22] *** polettix joined
[08:30] *** dduncan left
[08:41] *** iblechbot joined
[08:45] *** drupek12 joined
[09:14] *** lisppaste3 joined
[09:17] *** the_dormant joined
[09:26] *** buetow joined
[09:26] *** ofer joined
[09:28] *** ml8128 joined
[09:28] *** chris2 joined
[09:36] *** isaacd joined
[09:44] <dolmans> i think Perl 6 will be my favorit tool! when Perl 6 is out, the Python's ONLY advantage is its simplicity! and we all know that saying a subset language is encouraged in Perl's culture, but can Perl 6's compiler itself provide some compile level, so that one can only write a subset syntax of Perl 6(which we call baby talk, but still is valid Perl 6, it just disable some avanced syntax)? i think a source filter is not very good in compiling.

[09:46] <moritz> dolmans: I think restricting the compiler to a subset of the language is against perl philosphy ;-)

[09:47] <dolmans> moritz: just a `use' feature, you can use it or not.

[09:47] <dolmans> it's just my wish, perhaps not good.

[09:47] <Aankhen``> Why would you want to disable certain portions completely?

[09:47] <Aankhen``> Don't use them if you don't need or want them.

[09:48] <Aankhen``> Selectively disabling parts of the language would probably break any other modules you use anyway.

[09:49] * Aankhen`` heads to bed.

[09:49] <dolmans> in some team, the leader can define a subset, so he will not encounter syntax surpress.

[09:49] *** zamolxes joined
[09:50] <dolmans> ah, module is a good example i did not consider.

[09:52] <dolmans> any comments?

[09:54] <dolmans> i think Perl 6 is too powerfull, and have a lot of mysterious syntax feature, perhaps some company will not use it because of its complexity. i just worry about that.

[10:06] <moritz> I can understand your worries...

[10:06] <moritz> but I think it's the same for perl 5 - if you used all features of the language, I couldn't read your code

[10:07] <moritz> but in practice, a very high percentage of the code is readable without knowing the more advanced parts of the langauge

[10:09] <buu> dolmans: Perl is like every other programming language. It's possible to write bad code.

[10:11] <dolmans> buu: i know one can write good code, but you cannot prevent somebody else to write bad code, if there isn't a mechnism to sign a treaty.

[10:12] <buu> dolmans: What's your point?

[10:13] <dolmans> buu: if there is mechanism to define a subset that when module use this progma, then he must say languages suitble in this subset.

[10:13] <buu> Yes, but that has nothing to do with good code.

[10:14] <mj41> dolmans: what about Perl::Critic ? http://search.cpan.org/~thaljef/Perl-Critic/ 

[10:14] <lambdabot> Title: Jeffrey Ryan Thalhammer / Perl-Critic - search.cpan.org

[10:14] <dolmans> at least the program will not look too strange.

[10:15] <moritz> "strange things should look strange" ;-)

[10:17] <dolmans> for example, Perl 6 has >>-<<, ==>,etc.,but Perl 6 also has some english version for these functions, if one team want only to use english version, they need some mechism to do that, perhaps they need to write their own Critic modules. thanks to mj41 for the link

[10:18] <dmq> in perl 5 "advanced knowledge" generally comprises things shouldnt be doing unless you know what they are in the first place.

[10:19] <dmq> btw moritz thanks for your bug report and commentary on PM about the /.*\z/ thing (and confirmation it works somewhere other than here).

[10:20] <dolmans> what i am talking is about convention, not one man, one man can do whatever he want.

[10:20] <dmq> the bug report especially was useful as it reminded me about fixing it. :-)

[10:21] <moritz> dmq: you're welcome, the real attribution should go to betterworld++ who discovered it by proof reading bloonix++'s modules

[10:21] <moritz> he was just not couragous enough to label it as a perl bug ;-)

[10:21] <dmq> yeah but he didnt file a bug report. anyway i thanked him too.

[10:21] <moritz> ok ;)

[10:22] <moritz> I don't know if you've seen it, I already posted on pm that it is fixed in blead

[10:22] <dmq> im just hopeful i did completely fix it. the code involved has about a million codepaths and is opaque beyond belief so its hard to say its completely fixed.

[10:23] <moritz> ah, so did you ;)

[10:23] <dmq> yes i saw. i replied to your node noting that that PM supports the APC:// linktype.

[10:23] <dmq> so if you want to link to the apc you can do so easily on pm.

[10:24] <moritz> ok, I'll remeber that ;)

[10:24] <dmq> we should probably set up some handlers for perl 6 related stuff too. 

[10:25] <dmq> for the APC linktype you can use change numbers or filenames.

[10:25] <moritz> like S05:100 links? ;-)

[10:25] <dmq> yeah whatever.

[10:26] <dmq> post a PMD with a list of useful targets and ill get them set up.

[10:26] <moritz> what's a PMD?

[10:26] <moritz> perl monks discussion?

[10:27] * moritz is pretty new to perlmonks

[10:28] <dmq> yes

[10:28] * dmq is an admin there

[10:29] <moritz> I thought so ;)

[10:30] <dmq> although these days im not very active

[10:30] *** obvio171 joined
[10:32] <moritz> is the code that runs perlmonks.org somewhere on CPAN?

[10:33] <dmq> no

[10:34] <dmq> theres a sister codebase that is public but the pm code is private.

[10:34] *** BlackSabbath joined
[10:34] <dmq> or semi private.

[10:34] <moritz> ok ;)

[10:35] <dmq> you can become a "pm-dev" by asking to be one, but we dont allow free access to the code

[10:35] *** BlackSabbath joined
[10:35] <dmq> since code is stored in the db just like posts are its difficult and potentially insecure to allow totally free access to it.

[10:36] <moritz> I don't have specific interest in the code, was just curious ;)

[10:37] <dmq> its a common question

[10:37] <dmq> :-)

[10:46] *** nipotan is now known as nipotaway

[10:56] *** pjcj joined
[11:04] *** franck__ joined
[11:05] <avar> dmq: Insecure to allow access a copy of it not running on pm.org?

[11:11] *** obvio171 joined
[11:15] *** obvio171 joined
[11:19] *** fglock joined
[11:22] *** obvio171 joined
[11:25] *** obvio171 joined
[11:27] <moritz> sounds scary ;)

[11:38] *** the_dormant joined
[11:49] *** franck___ joined
[11:50] *** franck__ joined
[11:50] *** andara joined
[11:51] *** buu joined
[11:56] *** Limbic_Region joined
[12:10] *** rindolf joined
[12:42] *** buetow joined
[12:44] *** vel joined
[13:00] *** franck___ joined
[13:17] *** obvio171 joined
[13:21] *** riffraff joined
[13:21] <riffraff> hi

[13:22] <riffraff> do we have a spec for the various sigil roles?

[13:23] <riffraff> i mean $ Object, @ Positional, % Associative and so on

[13:33] *** jerrylee joined
[13:34] <avar> riffraff: The synopsis just got updated very recently in that area, check out perl6-language

[13:34] <riffraff> yep I saw that

[13:34] <riffraff> but it doesn't say a lot

[13:35] <riffraff> I was thinking of adding a dummy t/builtins/sigl that just checks that <sigil>name does what it is supposed to do

[13:38] *** tuna joined
[13:45] *** perlmonkey2 joined
[14:01] <masak> riffraff: sounds like a good idea to me -- go right ahead

[14:23] *** isaacd_ joined
[14:31] *** mj41 joined
[14:47] *** silug joined
[15:00] <riffraff> ?eval multi foo {...}; foo()

[15:00] *** evalbot_r16539 is now known as evalbot_r16553

[15:00] <evalbot_r16553> *** ... - not yet implemented␤    at <eval> line 1, column 12-15

[15:00] <fglock> hmm - gcc now comes with GOMP and GC

[15:00] <riffraff> masak, I will do that, and add some empty roles in Prelude.pm 

[15:02] <riffraff> ?eval role R{multi f{...}}; class C does R {}; C.new.f

[15:02] <evalbot_r16553> *** ... - not yet implemented␤    at <eval> line 1, column 16-19

[15:02] <riffraff> I wonder why in my box ... becomes "undef"

[15:03] <moritz> riffraff: i get nyi in both cases

[15:03] <moritz> riffraff: maybe your pugs build is outdated?

[15:03] <riffraff> I think so

[15:03] <riffraff> but wait, I have a difference

[15:04] <riffraff> ?eval role R{multi postcircumfix:<[ ]> {...} }; class C does R {}; C.new[1]

[15:04] <evalbot_r16553> \undef

[15:05] <riffraff> ok, this is what I get and don't understand :)

[15:05] <riffraff> probably C.new[1] is parsed somehow differently

[15:09] <moritz> even if I use (C.new)[1] I get undef

[15:09] * moritz wonders if custom circumfix and postcircumfix operators work at all

[15:11] <riffraff> ?eval class D {}; D.new[1]

[15:11] <evalbot_r16553> \undef

[15:11] <riffraff> ok, they don't I believ :)

[15:11] <moritz> ?eval multi circumfix:<bla alb> (Str $x) { say $x} bla"foo"alb

[15:11] <evalbot_r16553> Error: ␤Unexpected "\""␤expecting "::", dot, ":", "(", term postfix or operator

[15:12] <moritz> I'm a bit lost... which parenthesis characters are left for (post)circumfix operators that don't interfere with builtin ops?

[15:13] *** weinigLap joined
[15:14] <riffraff> I guess you have to be creative, there are the banana, lenses and barbed wire brackets

[15:14] <riffraff> as for similarly named paper 

[15:14] <moritz> ;-)

[15:16] <riffraff> and maybe we could use those ceiling anf floor characters which I don't know how to type

[15:17] <riffraff> actually thos wodule be fun to use with their real meaning I believe :)

[15:17] <moritz> →propably, yes←

[15:18] <riffraff> lol

[15:18] <moritz> who needs windings anyway? we have unicode!

[15:18] <fglock> anyone knows of a comparison between 'JIT' vs a 'direct C code generator'?

[15:19] <riffraff> (I especially appreciate how you understood "wodule" for "would")

[15:20] <moritz> riffraff: the "module" interpretation didn't fit, so my parser did a bit of backtracking ;)

[15:20] <moritz> fglock: do you mean in terms of speed?

[15:20] <fglock> yes, mostly

[15:23] <riffraff> if I declare a class in PRelude is it automagically visible or should I export it ?

[15:23] <fglock> riffraff: you need to export, afaik

[15:24] <Limbic_Region> ?seen TimToady

[15:24] <lambdabot> TimToady is in #perl6. I last heard TimToady speak 18h 4m 58s ago.

[15:25] <fglock> moritz: I'm comparing Parrot JIT with a possible kp6-in-C implementation

[15:26] <moritz> fglock: maybe you should ask in #parrot - but afaik the optimization in parrot is not very mature

[15:26] <moritz> correct me if I'm wrong, though

[15:26] <moritz> ?seen [particle]

[15:26] <lambdabot> I saw [particle] leaving #perl6 5d 21h 38m 20s ago, and .

[15:27] <moritz> fglock: so would you rewrite kp6 in C, or just write a backend?

[15:27] <fglock> write a backend, and then bootstrap

[15:30] * Aankhen`` bootstraps for massive damage.

[15:31] <moritz> fglock: I think atm C should be faster (without really knowing, I admit), but PIR would be more interesting because it's made for dynamic languages

[15:32] <fglock> yes, parrot bytecode is kind of an Intermediate Language

[15:33] <fglock> lunch &

[15:34] <japhb> fglock: Also, in your readings remember: standard C compiling and JIT both can only do static analysis.  Profile-directed C compiling can optimize based on past aggregate behavior.  Self-optimizing JIT can continue to optimize at runtime as conditions change.  This turned out to make at least one processor emulator emulating its own architecture run faster than raw code -- because it kept reordering branches and such as runtime behavior b

[15:34] <japhb> ecame clear ....

[15:35] <japhb> Looks like I just missed him.  Oh well, hope he's the backlog type ....

[15:36] <Limbic_Region> he typically does backlog yes

[15:36] *** pbuetow joined
[15:42] *** devogon joined
[15:46] *** blaze-x_ is now known as blaze-x

[15:48] *** ruz joined
[15:53] <Limbic_Region> @tell TimToady I have sent you a personal email from my gmail account, please let me know if it did not arrive or was eaten by spam filters

[15:53] <lambdabot> Consider it noted.

[15:54] <TimToady> yes, got it

[15:54] <lambdabot> TimToady: You have 1 new message. '/msg lambdabot @messages' to read it.

[15:54] <TimToady> @massages

[15:54] <lambdabot> Limbic_Region said 57s ago: I have sent you a personal email from my gmail account, please let me know if it did not arrive or was eaten by spam filters

[15:58] <Limbic_Region> thanks

[16:03] *** buetow joined
[16:13] *** bernhard joined
[16:21] *** justatheory joined
[16:21] *** fglock joined
[16:24] <fglock> japhb: ok

[16:32] <fglock> japhb: I've been looking at strongtalk and psycho

[16:33] *** pbuetow joined
[16:33] <fglock> pypy actually looks a bit like 6-in-6, in that it has several alternate implementations

[16:37] *** buetow__ joined
[16:37] <avar> fglock: So you opted for going sideways I take it?:)

[16:42] *** buetow__ joined
[16:42] <fglock> hmm - sideways?

[16:42] <avar> multiple emitters for mp

[16:43] *** charsbar joined
[16:45] *** elmex joined
[16:45] <fglock> yes

[16:46] <avar> how big a subset is it covering now, able to run Test.pm?

[16:48] <fglock> avar: no, kp6 is mostly about architecture - it has vary little runtime

[16:48] <fglock> s/vary/very/

[16:49] <fglock> mp6 builds top-down from MiniPerl6; kp6 builds bottom-up from there

[16:50] <perlmonkey2> Anyone know why Moose no longer calls BUILDALL even though my package has "sub BUILD"?

[16:51] <avar> fglock: so what needs to happen to get it closer to something that "actually works"?

[16:52] <fglock> avar: agree on a "final" architecture; and then finish the implementation

[16:52] <fglock> I hope to be able to discuss the architecture in the YAPC::EU hackathon

[17:02] <avar> neat, hopefully I'll be there

[17:02] <avar> depends on whether my blathering^Wtalk gets accepted:)

[17:13] *** ruoso joined
[17:14] <fglock> avar: the architecture is not "too" important, but it would be nice to have some community participation

[17:15] <rindolf> Hi all.

[17:15] <rindolf> Hi fglock, avar , perlmonkey2 

[17:16] <fglock> re what works - v6/v6-KindaPerl6/t/kp6/ is not that bad

[17:16] *** amnesiac joined
[17:16] <fglock> rindolf: hey

[17:18] <avar> fglock: get it to pass some tests:)

[17:20] <fglock> avar: perl kp6-perl5.pl < t/kp6/01-tap.t | perl -I lib

[17:20] *** franck__ joined
[17:21] <fglock> avar: is it failing?

[17:23] <avar> nope, works

[17:24] <avar> One thing I might poke is to try to get all this stuff packaged, kp6 --backend=perl5|parrot|jvm

[17:24] <avar> would be nice to cpan -i kp6 and get a very limited p6:)

[17:25] <avar> seems to be a lot of duplication in all these mp6-whatever.pl's :)

[17:26] <fglock> sure

[17:27] *** kanru joined
[17:28] <fglock> but it's also a bit distracting; I'm trying to pay attention to the core compiler

[17:28] <fglock> and v6.pm is a place holder in the meanwhile

[17:29] <fglock> avar: I'm trying to make a project roadmap

[17:29] <fglock> obra: ping

[17:30] <avar> I'd be interested in helping out with some of this stuff

[17:30] <obra> fglock: pong!

[17:30] <fglock> obra: I'd like some help from the Perl 6 project manager

[17:30] <obra> Ok. What can I do for you?

[17:31] <fglock> help making a roadmap for v6/mp6/kp6

[17:32] <obra> Ok. You know more about the technology than me. How can I help with the roadmap

[17:32] <obra> is there a current braindump of what needs doing?

[17:34] <fglock> obra: there is some in http://svn.pugscode.org/pugs/v6/docs/ and http://svn.pugscode.org/pugs/v6/v6-KindaPerl6/docs/FAQ.pod

[17:34] <lambdabot> Title: Revision 16553: /v6/docs

[17:34] <fglock> but I'm having trouble integrating into something readable

[17:37] *** sahadev joined
[17:37] <obra> Ok. So. Is there a particular order things need to be developed in?

[17:38] <fglock> there are a few parallel tasks:

[17:39] <ingy> ?seen gaal

[17:39] <lambdabot> gaal is in #perl6. I last heard gaal speak 10h 58m 22s ago.

[17:40] <rindolf> Can anyone point me to the list of examples of perl4 code that won't work on perl5 anymore.

[17:40] <rindolf> Hi ingy 

[17:40] <ingy> hi rindolf 

[17:40] <gaal> moose

[17:40] <rindolf> ingy: what's up? How do you feel?

[17:40] <rindolf> gaal: hi. What's up?

[17:40] <fglock> runtime and MOP; regex engine runtime; grammar; the compiler itself; the code evaluator

[17:40] <ingy> I feel good

[17:40] <rindolf> gaal: how's work?

[17:40] <ingy> I'm in love

[17:40] <ingy> with libyaml ;)

[17:40] <gaal> yay :)

[17:41] <rindolf> gaal: I'm thinking of getting a new laptop for games and presentations and stuff.

[17:41] <rindolf> gaal: but it will run Linux.

[17:41] <ingy> I think I will soon join the Perl6 effort again by bringing in libyaml

[17:41] <rindolf> gaal: though it should dual-boot into WinXP or win2003 or whatever.

[17:41] <ingy> I can use it to teach me haskell

[17:41] <rindolf> ingy: is libyaml written in C?

[17:41] <ingy> for now I'm using it to teach me C :)

[17:41] <ingy> yeah

[17:41] <gaal> ingy: awesome

[17:41] <rindolf> ingy: what's wrong with Syck?

[17:42] <ingy> rindolf: YAML::LibYAML

[17:42] <gaal> rindolf: laptop for games doesn't sound effective

[17:42] <rindolf> ingy: oh.

[17:42] <rindolf> gaal: in a way.

[17:42] <obra> fglock: ok. let's step back. of all the kp6/mp6/v6, which ones are needed to get to your endgame?

[17:42] <rindolf> gaal: I can hook a keyboard and a mouse to it.

[17:42] <ingy> rindolf: syck is not perfect

[17:42] <ingy> well not even close actually

[17:42] <rindolf> gaal: but I need one for presentations.

[17:42] <gaal> I'm off to dinner w/ kudra; bbl...

[17:42] <rindolf> ingy: I see.

[17:42] <rindolf> ingy: is libyaml a rewrite?

[17:42] <ingy> libyaml appears to be perfect

[17:42] *** Psyche^ joined
[17:42] <rindolf> ingy: or is it a fork?

[17:42] <ingy> rindolf: it's a write :P

[17:43] * rindolf prefers forks over rewrites.

[17:43] <rindolf> ingy: I see.

[17:43] <rindolf> ingy: does it have a test suite?

[17:43] <ingy> rindolf: just google and read :)

[17:43] <rindolf> ingy: asking you is faster.

[17:43] * gaal prefers writes to wrongs

[17:43] <fglock> obra: kp6 is the current version; v6 is the published version; mp6 is a bootstrapper

[17:43] <ingy> it was a 2005 SoC project

[17:44] <gaal> though reads are just andy

[17:44] *** obvio171 joined
[17:44] <gaal> dandy, too

[17:44] <gaal> moose &

[17:44] <obra> fglock: from here to the future, which of the three will be involved? is v6 still relevant?

[17:44] <fglock> obra: kp6 is the current version; v6 is the published version; mp6 is a bootstrapper

[17:45] *** fglock left
[17:46] *** fglock joined
[17:46] <fglock> sorry, lost connection

[17:47] <obra> it's ok

[17:47] <obra> so. those three terms don't explain to me very well what the work plan looks like.

[17:47] <fglock> v6 will be replaced by 6-in-6

[17:47] <obra> ok. so v6 is no longer part of the roadmap, it sounds like

[17:48] <fglock> kp6 is a path to "full" 6-in-6

[17:48] <fglock> mp6 is "stable"

[17:49] <rindolf> ingy: why have you decided to call yourself "Ingy döt Net" instead of Brian Ingerson?

[17:49] <obra> ok. so right now, mp6 is a stable ~complete 6on5 implementation and work is ongoing to implement kp6 on top of mp6?

[17:49] <rindolf> ingy: reminds me of chromatic.

[17:49] <ingy> because it's my name :P

[17:50] <rindolf> ingy: is it also your new legal name?

[17:50] <rindolf> ;-)

[17:50] *** Psyche^ is now known as Patterner

[17:50] <ingy> yes

[17:50] <daxim_> ¨

[17:51] <rindolf> ingy: some people think Shlomi Fish is not my real name.

[17:51] <rindolf> But I'm very happy with it.

[17:51] <rindolf> It has a nice ring.

[17:51] <rindolf> ingy: have you read my "Human Hacking Field Guide" story?

[17:51] <fglock> kp6 is already built on top of mp6; work is ongoing to provide "full Perl 6" on top of kp6

[17:52] * ingy has a nice ring ;)

[17:52] <ingy> rindolf: no

[17:52] <rindolf> ingy: well, there's a girl there (in the 12th grade) called Eve Siegel who decides she wants to be called "Erisa".

[17:52] <obra> ok. so kp6 and mp6 are pretty stable and there's a new third implementation on top of kp6?

[17:53] <obra> rindolf: a nice discordian name

[17:53] *** pbuetow joined
[17:53] <rindolf> ingy: because she believes people should have a choice of getting their own names.

[17:54] <ingy> I was just trying to remember if I or audrey changed our names first

[17:54] <ingy> it was very close

[17:54] <ingy> but now I remember it was me first...

[17:54] <ingy> I think so anyway

[17:55] <fglock> obra: I think kp6 --> 6-in-6 can be developed incrementally

[17:56] <obra> ok

[17:56] <obra> so it sounds like most of the work is in "kp --> 6-in-6"

[17:56] <obra> Is that right?

[17:56] <fglock> yes

[17:56] <obra> ok :)

[17:57] <obra> So we're getting somewhere.

[17:57] <obra> of those parallel tracks you mentioned earlier, are they everything that needs to be done in  the arrow?

[17:58] <fglock> yes; things like optimization are included there

[17:59] <fglock> and "runtime" is pretty generic

[17:59] <obra> ok.

[18:00] <obra> Next step: can you check in a document called " KindaPerl6 --> full 6-in-6 Roadmap" 

[18:00] <fglock> ok

[18:00] <ingy> I just found out that libyaml is 2.75 times faster with -O3

[18:00] <ingy> :)

[18:00] <obra> Of those areas, is there one that MUST be done first?

[18:01] <obra> are there any that can be ~fully done withot the other areas being done or started?

[18:01] <ingy> is -O3 a problem with Perl XS modules?

[18:01] <ingy> should I ask p5p?

[18:02] <obra> sure. you'll get good answers

[18:04] <fglock> the general architecture must be specified first

[18:04] <svnbot6> r16554 | fglock++ | [kp6] KindaPerl6 --> full 6-in-6 Roadmap - obra++

[18:04] <fglock> there are some diagrams of the current architecture,

[18:04] <fglock> but it wasn't really discussed here

[18:04] <obra> ok. I'd steer clear of the diagrams of the architecture

[18:04] <fglock> re fully done, no

[18:04] <obra> for this

[18:04] <obra> ok.

[18:05] <obra> which chunk needs to be ~mostly done first

[18:05] <obra> are there two chunks that will help the most? 

[18:07] <fglock> there are some chunks that are mostly done; it's the "kp6 Milestones" in the top of http://svn.pugscode.org/pugs/v6/v6-KindaPerl6/TODO

[18:07] <fglock> BEGIN blocks, lexical subs, the "environment"

[18:08] <perlmonkey2> hello rindolf

[18:09] <obra> ok. extract that section to the new document :)

[18:09] * obra updates his pugs checkout to play with the doc

[18:10] <fglock> actually, these are mostly done; we need a plan for what to do after that

[18:10] *** cmarcelo joined
[18:11] <obra> sure

[18:11] <obra> but a roadmap that starts with completed bits inspires people

[18:12] <obra> showing people where they're coming from makes it a little easier to see where you're going

[18:12] <fglock> done

[18:12] <obra> cool

[18:12] <svnbot6> r16555 | fglock++ | [kp6] updated roadmap

[18:13] <obra> I am MANY revs behind, so I'm pulling

[18:14] <fglock> obra: http://svn.pugscode.org/pugs/v6/docs/kp6-Perl6-roadmap.txt

[18:15] <obra> like what pugs did, we want to come up with 5-10 major "steps" to go from here to done

[18:15] <obra> Whcih subsystem do you want to hack on next?

[18:15] <obra> which one really has to be last?

[18:17] <rindolf> perlmonkey2: hi.

[18:17] <rindolf> perlmonkey2: wattcha doing in #perl6?

[18:18] <perlmonkey2> watching

[18:19] <perlmonkey2> rindolf: 

[18:19] <fglock> obra: there are some possible paths;

[18:20] <perlmonkey2> rindolf: Hoping to see Stevan Little or Christian Hansen.

[18:20] <fglock> my initial goal was to make as much of the modules reusable by p6-pugs and p6-parrot

[18:20] *** tabris|away joined
[18:21] <fglock> but this is making much harder to make a plan

[18:22] <fglock> rather than a subsystem, maybe it could be organized based on language features (syntax + semantics)

[18:22] <obra> ok. that's reasonable

[18:22] <obra> I wouldn't worry about making it magically reusable if it's going to hurt your 6 on 5 plan too badly.

[18:23] <obra> planning for reusability when the other projects aren't ready for you is going to burn a lot of cycles

[18:23] <obra> when they're ready, they can ptich in and help refactor toward what you need

[18:24] <obra> but sure. let's start with language features.

[18:25] <obra> ...I wonder if it makes sense to use the synopses

[18:26] <fglock> I think a reasonable first goal would be to integrate the regex-parser into the Perl6-parser; this is more or less what Perl6-STD does

[18:26] <fglock> this simplifies the architecture a bit

[18:27] <obra> Ok. put down Milestone 1: Integrate Regex Parser

[18:27] <obra> once you've got that, what becomes easy?

[18:29] <obra> or easier ;)

[18:29] <fglock> integrating the Lazy list code from the old pil-run would be nice

[18:30] <fglock> not sure if it's easy enough

[18:31] <fglock> I guess next step would be implementing multis - STD needs that

[18:32] <obra> ok. so is it just multis or is it all of subroutine dispatch?

[18:32] * obra asks handwavey questions, he knows

[18:33] <fglock> it's all in the "Code" and "Signature" objects

[18:34] <fglock> btw, "Array" and "Hash" need to be finished first, so that's Milestone 1

[18:35] <fglock> and "P6opaque"

[18:35] <obra> does Array and Hash objects come before  the regex stuff?

[18:36] <fglock> this is parallelizable

[18:37] <obra> sure.

[18:37] <obra> we might end up with people completing work on milestone 6 before milestone 1.

[18:38] <TimToady> STD doesn't use Array or Hash, or do you mean that more generally?

[18:38] <obra> but trying to lump all the different systems into one milestone because they don't have dependencies will make it harder for people to understand

[18:38] <fglock> TimToady: generally

[18:38] <obra> and the goal of a milestones document is (presumably) for people to have a grasp on what's being done and what needs doing ;)

[18:40] *** renormalist joined
[18:42] <fglock> brainstorming - another (parallel) milestone would be to make kp6 runnable over parrot and pugs

[18:43] <obra> is that critical to kp6 working?

[18:43] <obra> if not, add it in a new section: "Bonus Milestones"  as "Bonus Milestone 1" "make kp6 run over parrot and pugs"

[18:44] <obra> The goal here is to get the things that are critical to the system working listed out

[18:44] <obra> in rough dependency order

[18:44] <fglock> it could be good for the whole Perl 6 project in general

[18:44] <obra> sure

[18:44] <obra> I agree that it's a GOOD thing.

[18:44] <obra> But is it 100% mandatory to get 6in6 working?

[18:45] <obra> If not, it goes in "bonus milestones".  it's an extra project you don't need to do

[18:45] <obra> it's always ok for somebody to do the bonus bits early

[18:45] <obra> but we don't want them to cloud the way for getting to "it runs"

[18:45] <fglock> obra: sorry, I've got a meeting in a few minutes

[18:47] <obra> fglock: no problem

[18:47] <obra> I have to leave in about an hour

[18:47] <obra> will be back late tomorrow

[18:47] <obra> happy to pick this up by mail (jesse@perl.org) if you want

[18:47] <fglock> obra: actually "it runs" right now; we need a better definition for "runs" :)

[18:47] <obra> sure :)

[18:48] <fglock> obra: thanks!

[18:48] <obra> we'll get there. thanks for all the hard work hacking :)

[18:48] *** drupek12 joined
[18:48] <fglock> obra: I'll be organizing a hackathon in YAPC::EU, I hope to have the plan sorted out by then

[18:51] *** fglock left
[18:53] *** jisom joined
[19:07] *** the_dormant joined
[19:08] *** IllvilJa joined
[19:13] *** theorbtwo joined
[19:24] <gaal> rehi

[19:35] *** dduncan joined
[19:36] <dduncan> opinion question: what might be a good name for a set-like collection type which can have at most 1 element (that is, it can have either zero or one elements)?

[19:37] <dduncan> I might go with Set1 or some such, but wondered if there was a better name

[19:37] <TimToady> that would have to be either a Bet or a Soolean

[19:38] <gaal> Oneohton?

[19:38] <dduncan> technically, this type is a set, specifically it is like: subtype of Set where { .elems <= 1 }

[19:39] <dduncan> er subset of Set

[19:39] <TimToady> Element and rely on implicit maybeness of P6?

[19:40] <gaal> in Haskell at least, a container X with one element is called a singleton X

[19:40] <dduncan> does the singleton refer to having exactly one element or at most one element?

[19:40] <gaal> one exactly.

[19:41] <gaal> although when you think of lists as a monad, failure = an empty list

[19:42] <gaal> that's probably not helpful here thouhg :)

[19:43] <dduncan> fyi, this question relates to my database language

[19:43] <gaal> but really, a collection limited to an element count of one is a set, sure, but it's also other things. do you _need_ to think of it as a set?

[19:43] <dduncan> said language has no concept of an undefined variable, ...

[19:44] <gaal> eg do you use this object in set calculations?

[19:44] <dduncan> so I thought one way to represent a variable that conceptually has no value is to make it hold a set value

[19:44] <dduncan> or other collection

[19:44] <dduncan> where if it is empty, that represents having no value

[19:44] <dduncan> and if it has one element, that is the value it otherwise would have if it had to always have one

[19:45] *** isaacd__ joined
[19:45] *** bpalmer joined
[19:45] <dduncan> now I don't need a type for this ...

[19:45] <dduncan> simply having a set-valued variable that holds an empty set is sufficient

[19:45] <dduncan> but what I was talking about now was meant to be a definers shorthand

[19:45] <gaal> haskell has the parametric type Maybe a exactly for this purpose

[19:45] <dduncan> for saying set where elem count <= 1

[19:46] <dduncan> perhaps Maybe is my answer then

[19:46] <dduncan> I'll look into it ... thank you

[19:46] <gaal> in hs syntax: data Maybe a = Nothing | Just a

[19:47] <gaal> there's a host of standard functions that operate on Maybe values

[19:47] <gaal> @hoogle Maybe a

[19:47] <lambdabot> Prelude.Nothing :: Maybe a

[19:47] <lambdabot> Prelude.Just :: a -> Maybe a

[19:47] <lambdabot> Maybe.listToMaybe :: [a] -> Maybe a

[19:47] <gaal> those are just some.

[19:48] <gaal> listToMaybe, for example, yields Nothing when the input list was emtpy, and Just x if the list was not and x was at the head.

[19:48] <dduncan> in my case, were I to use Maybe, then Maybe isa Set, and any ops specific to Maybe would be shorthand for some Set ops

[19:48] <dduncan> for that matter, Set is a unary Relation

[19:48] <dduncan> and so a Maybe would be a unary Relation with a nullary key

[19:49] <dduncan> a nullary key resulting in a Relation that can have at most one value

[19:49] <dduncan> er, one tuple

[19:50] *** daxim joined
[19:50] *** devbot6 joined
[19:51] <gaal> I don't know enough about what you call Relation to see whether that makes sense. :)

[19:51] <TimToady> note that P6 defaults the other way; every Object is a Maybe, and you have to use "subset" to express a type that can't be undefined.

[19:51] <gaal> hee, that PM post made it into Syn!

[19:52] <TimToady> well, sure, why not?

[19:52] <gaal> it now lives in Syn

[19:52] <dduncan> Relation, in logic and philosophy, a property or predicate ranging over more than one argument.

[19:52] *** fglock joined
[19:52] <dduncan> in appearance in my language, it is like a set of Mapping

[19:52] <dduncan> where every mapping has the same keys

[19:53] <dduncan> sort of like a SQL table

[19:53] <dduncan> a unary relation is like a table with one column

[19:53] <dduncan> which for all intents and purposes is a set

[19:53] <dduncan> that is, a plain set

[19:54] <dduncan> a nullary key is a key over zero attributes/columns

[19:55] <dduncan> that constrains a relation/set/table to at most one tuple/element/row

[19:55] <dduncan> my language doesn't have undefined values since it keeps logic simpler in the general case

[19:55] <dduncan> this thing about pretending to have undefined is basically a huffmanization

[19:56] <Limbic_Region> OT - does anyone know of a utility that will pull data from a database into an LDAP directory and keep it syncronized lazily?

[19:56] <dduncan> since that would be used less frequently, it is more verbose than one that can't be empty

[20:02] *** rlb3_work joined
[20:03] *** polettix joined
[20:05] *** japhb joined
[20:11] *** GeJ_ is now known as GeJ

[20:11] <gaal> sorry, phone

[20:16] <gaal> hee, dons' cute code is.

[20:16] <gaal> > > take 10 $ Control.Monad.Fix.fix ((1:) . scanl (+) 1)

[20:16] <lambdabot>  Parse error

[20:19] <gaal> > let fix y = y (fix y) in take 10 $ fix ((1:) . scanl (+) 1)

[20:19] <lambdabot>  [1,1,2,3,5,8,13,21,34,55]

[20:22] <svnbot6> r16556 | rhr++ | [unitsdat-grammar.pm] Associativity fixes.  Misc fixes and cleanups.

[20:23] *** elmex_ joined
[20:27] *** thoughtpolice joined
[20:28] <daxim> hey thoughtpolice

[20:31] <thoughtpolice> yo :)

[20:31] <daxim> I got some improvement suggestions for the blog entry

[20:31] <thoughtpolice> shoot

[20:31] <daxim> explain how the <> nee qw() operator works and why it's used, because that's not obvious from the code example

[20:31] <daxim> say it splits the inner stuff on any amount of whitespace

[20:31] <daxim> say it's used so a programmer can be lazy and does not need to quote strings with special characters like " or '

[20:31] <daxim> some paragraphs below you explain redo with an real world use case, but only with abstract words.  back this up with a code snippet

[20:32] <thoughtpolice> got it

[20:34] <Tene> there's a blog entry?

[20:34] <daxim> http://diveintoperl6.blogspot.com/

[20:34] <lambdabot> Title: Dive into Perl 6

[20:35] <Tene> So, who's going to write a Perl 6 compiler for http://lolcode.com/ ?

[20:35] <lambdabot> Title: home · LOLCODE

[20:36] <daxim> damn, that one's all over relay chat space

[20:36] <gaal> IM IN YR STRINGS / NTRPOLATING YR CLOSURZ

[20:36] <qmole> heh

[20:36] <thoughtpolice> sweet

[20:38] <gaal> someone was asking how to spell currying there. INVISIBLE ARG, surely.

[20:38] <svnbot6> r16557 | fglock++ | kp6-Perl6-roadmap.txt - divided in "phases"; added past work

[20:43] <gaal> z&

[20:48] *** riffraff joined
[20:53] *** SubStack joined
[20:55] <avar> SV* yaml = newSVpvn("", 0); <= newSVpvs("") is cheaper for creating an empty SvPV

[20:56] <avar> whoa, /me reading old scrollback accidentally

[20:56] <riffraff> anyone has ide of how to define a class or role in Prelude.pm and have it available at the repl (having it bulitin) ? I tried is export is primitive is builtin and the permutations but I failed miserably

[20:57] <avar> ingy: that was for you

[21:03] <fglock> avar: http://svn.pugscode.org/pugs/v6/docs/kp6-Perl6-roadmap.txt # work in progress

[21:03] <svnbot6> r16558 | fglock++ | kp6-Perl6-roadmap.txt - added "related work" for reference

[21:03] <fglock> home &

[21:07] <japhb> thoughtpolice: weren't there previously more entries than currently appear on the diveintoperl6 blog?

[21:08] *** weinigLap is now known as weinig|bbl

[21:09] <thoughtpolice> japhb: ? no. the ones I published are the ones up there

[21:09] <thoughtpolice> i had to test some earlier versions of articles out by quickly publishing them to see how they'd look with the layout, though

[21:10] <thoughtpolice> so if you for some unknown reason stumbled upon one, that might be the reason

[21:10] <japhb> Weird, a few minutes ago "Perl 6: Round 1" wasn't there

[21:10] <avar> fglock: awesome:)

[21:13] <thoughtpolice> hm.

[21:26] *** weinig|bbl is now known as weinigLap

[21:39] <svnbot6> r16559 | rhr++ | [unitsdat-grammar.pm] Fix linear interpolator.

[21:41] *** Limbic_Region joined
[21:50] *** drupek12 joined
[21:51] * riffraff wonder why Prelude hates him

[21:55] *** buetow joined
[21:56] *** nelhage left
[21:56] *** xinming_ joined
[22:06] <meppl> good night

[22:10] <thoughtpolice> daxim: annotations complete. thanks :)

[22:17] <riffraff> someone knows why Set.pm is not preloaded into the Prelude?

[22:18] <TimToady> perhaps because the set operators are not part of standard perl 6?

[22:19] <TimToady> at least, not the Unicode versions...

[22:20] *** Southen joined
[22:20] <riffraff> but the Set class is, isn't it?

[22:21] <TimToady> yes, but unless the parser is taught about the various operators, they wouldn't be parsed in any particular lexical scope

[22:21] <TimToady> it's possible they'll be in there eventually

[22:21] <TimToady> but we're trying to keep Unicode operators hushhush for now, just to avoid scaring people too much

[22:21] <svnbot6> r16560 | Darren_Duncan++ | ext/QDRDBMS/ : in Language.pod, added new Maybe data type

[22:22] <TimToady> anyway, at most they'll be a "use" away

[22:22] <moritz> which is not far away if it's distributed as "core" 

[22:22] *** TreyHarr1s is now known as TreyHarris

[22:23] <TimToady> certainly they'll be in the core, since otherwise people would reinvent them poorly

[22:23] <riffraff> I see

[22:23] <TreyHarris> anyone with a MBP 15" in front of them on right now?  if so, please message me

[22:24] <moritz> are they implemented non-poorly atm?

[22:24] <riffraff> and what about the other containers such as Bag? all in ext ?

[22:24] <wolverian> thoughtpolice, s/frusteration/frustration/ in perl6: round 1

[22:25] <thoughtpolice> wolverian: :o

[22:25] <thoughtpolice> :x

[22:25] <thoughtpolice> my bad

[22:25] <dduncan> I would expect for Set, Bag to be in Prelude et al, but just with ascii/text names for their operators

[22:25] <riffraff> +1

[22:25] <dduncan> and ext/ just declares unicode aliases for them

[22:25] <japhb> moritz: even if they are implemented poorly now, we should be able to get them pretty nice by xmas

[22:26] <moritz> japhb: I know ;)

[22:26] <moritz> dduncan: "use names utf8" ;-)

[22:26] <TimToady> P6 distinguishes Set/Bag values which are immutable from containers for sets and bags that are defined in terms of the hash interface.

[22:27] <TimToady> see S02:759 and following

[22:28] <moritz> oh no, that was "set names utf8" ;)

[22:28] <TimToady> so it would be illegal to say $set<foo>++ if $set were a Set, but not if it were a KeySet

[22:28] <dduncan> moritz, in your case, you would want use/set names unicode

[22:29] <moritz> I just wanted to paraphrase mysql syntax ;)

[22:29] <dduncan> since encoding issues are abstracted away

[22:29] <wolverian> TimToady, is there a difference between hashes and KeySets?

[22:29] <dduncan> and so unicode is just a character set

[22:29] <TimToady> and the difference between a KeySet and KeyBag is then just the type of the value in the KeyHash

[22:29] <dduncan> or should I say, a repertoire

[22:30] <TimToady> yes, in list context a hash returns pairs, while a keyset returns just the keys

[22:31] <TimToady> just as a Set in list context returns a list of the elements

[22:31] <PerlJam> TimToady: Do you try to focus on particular aspects of the Synopses or do you just flit from topic to topic as they occur to you? (Just curious about how you push through the work; organized or random)

[22:32] <TimToady> both/neither.  my work pattern is of fractal dimensionality

[22:33] <TimToady> drives all my bosses nuts  :)

[22:33] <PerlJam> Even Gloria? :)

[22:33] <TimToady> from time to time

[22:34] <TimToady> but then, she's already nuts about me, so it's hard to tell the difference. :)

[22:34] <japhb> awwww

[22:35] <PerlJam> TimToady++ (lucky man)

[22:35] <PerlJam> My wife has put up with me for 12 years so far ... I'm hoping she goes the distance :-)

[22:35] <PerlJam> well, 12 years of marriage anyway

[22:37] * Caelum started compiling pugs 15 hours ago, and it still hasn't finished, also makes computer unbearably slow when compiling :(

[22:37] <Tene> Caelum: what hardware?

[22:37] <moritz> Caelum: how much memory does your maschine have?

[22:37] <Limbic_Region> Caelum - less than a gig of ram?

[22:37] <moritz> ;-)

[22:37] <Caelum> it's a 64bit p4 with a gig of ram

[22:38] <Caelum> I have 4 gigs of swap, which is probably a bad idea...

[22:38] <moritz> that's unusual

[22:38] <Limbic_Region> Caelum - extremely odd, even if you were compiling GHC from source it shouldn't take that long

[22:38] <Tene> Huh.  I can compile it in about an hour on a P3 with 1 gig.

[22:38] <moritz> Caelum: that shouldn't be used

[22:38] <Caelum> weird

[22:38] <japhb> Caelum, is the swap being actively used?

[22:39] <moritz> pugs build takes about 600MB on my maschine (which has only 512M or ram :())

[22:40] <Caelum> I probably have too much crap running (vmware and such)

[22:40] <japhb> Caelum: Oh heck yeah, vmware will definitely do it,

[22:40] <thoughtpolice> vmware++

[22:40] <thoughtpolice> :)

[22:40] <japhb> as it grabs a big chunk of ram and holds on to it

[22:40] * Limbic_Region has found that 1GB is more than enough to compile pugs assuming it is available

[22:40] <wolverian> Caelum, how much memory did you give to vmware?

[22:40] <moritz> vmware-- # (eating RAM)

[22:41] <thoughtpolice> i have 1gb running two virtual machines; pugs doesn't take too long to compile.

[22:41] <Caelum> wolverian: 256mb

[22:41] <japhb> Caelum: would you mind pasting a few lines of 'vmstat 5', please?

[22:42] <moritz> Caelum: and are you compiling inside the vm? *g*

[22:42] *** prism joined
[22:42] <Caelum> japhb: while pugs is compiling?

[22:42] <japhb> Caelum: yeah.

[22:42] <Caelum> moritz: nah :)

[22:42] *** Alchemy joined
[22:42] *** prism joined
[22:49] *** SubStack joined
[22:52] *** prism joined
[22:57] <Aankhen``> moritz: Can't you set a memory limit for each virtual machine?

[22:59] <moritz> Aankhen``: the problem (with all vms) is that you have to allocate the memory at startup time of that vm...

[22:59] <Aankhen``> Right.

[22:59] <moritz> Aankhen``: which means that if you run linux inside the vm, it will use _all_ available memory

[22:59] <Aankhen``> Ah.

[22:59] <Caelum> now it finished... for some reason it did "-Iinc runjs.pl --precompile-only --p6preludepc=blib/lib/Prelude.js --testpc=blib/lib/Test.js -e 1" and "-Iinc util/src_to_blib.pl" with a different perl than I ran Makefile.PL with

[23:00] <Caelum> the perl that was in my path

[23:01] <Caelum> oh I see it just calls perl, nm

[23:03] *** mr_ank joined
[23:13] *** shachaf joined
[23:17] *** demq joined
