[00:33] <Caelum> can you use perl5 modules transparently in pugs?

[00:33] <Tene> Yes.

[00:33] <Tene> use perl5:DBI;

[00:34] <Caelum> wow, cool

[00:34] <Tene> you can also use java libraries in pugs

[00:35] <Tene> use java:System.Something.Whatever.

[00:35] <Aankhen``> O RLY?

[00:35] <Tene> Yeah, for a while now.  I thoguht audreyt blogged about it when she added it.

[00:35] <Tene> "thought"

[00:36] *** amnesiac joined
[00:36] <Aankhen``> Ah.

[00:59] <Caelum> ?eval my Str $foo = "foo"; $foo = 42; $foo

[01:00] <Caelum> ah evalbot is gone...

[01:00] <Caelum> how come you can assign an int to a scalar declared as string?

[01:26] <Tene> Caelum: because pugs doesn't check that yet.

[01:27] <Caelum> ok :)

[01:28] <TimToady> and arguably, it oughta autocoerce it to "42", given Perl's dwimminess around Str/Num

[01:28] <Tene> my Num $x = "fourty two";

[01:29] <Aankhen``> Heh.

[01:31] *** mako132_ joined
[01:48] <pasteling> "TimToady" at 71.139.8.243 pasted "Test.pm.yml damage; blows up on 1st test; removing .yml and rebuilding doesn't help; possible clue: just upgraded to Fedora 7" (6 lines, 448B) at http://sial.org/pbot/25340

[01:49] *** justatheory joined
[01:50] *** justatheory joined
[02:01] *** jisom joined
[02:03] *** meppl joined
[02:03] *** felipe joined
[02:05] *** chylli joined
[02:23] *** nze299 joined
[03:11] *** ahmadz joined
[03:26] *** daxim_ joined
[03:48] *** SubStack joined
[03:49] *** gilby joined
[03:51] *** gilby left
[04:00] <thoughtpolice> from my logs I can tell this has been a very exciting day

[04:06] <Caelum> heh

[04:10] <thoughtpolice> :)

[04:25] *** REPLeffect joined
[04:28] *** sunnavy joined
[04:28] <TimToady> well, it's not the fedora upgrade.  my FC 6 machine also can't run its Test.pm.yml

[04:33] <amnesiac> why FC? :(

[04:33] <nze299> heh, my machine is still FC2

[04:33] <nze299> perhaps I should just wipe it entirely, get one of those live cd things, and install it to the hard drive.

[05:06] *** BooK joined
[05:16] *** Caelum joined
[05:41] *** dduncan joined
[05:42] *** rfordinal joined
[05:47] <dduncan> fyi, I've pretty much thought through now that carrying on further with a purposefully-bad temp name for my DBMS project is a fool's errand, so I'll go straight to using my previously planned long-term name now ... Muldis::DB

[05:47] <dduncan> if for some reason that doesn't work and another name needs picking, I'm not any worse off than the old plan, not really

[06:05] *** r0bby joined
[06:07] *** franck__ joined
[06:12] *** xinming joined
[06:25] *** Averell joined
[06:26] *** devogon joined
[06:28] *** ofer joined
[06:34] *** franck___ joined
[06:34] <svnbot6> r16626 | gaal++ | * chase breakage from r16625, reported by TimToady++

[06:34] <gaal> sorry about that

[06:50] *** kane_ joined
[07:02] *** Grrrr joined
[07:11] *** jisom joined
[07:22] *** drrho joined
[07:34] *** weinigLap joined
[07:45] *** mj41_ joined
[07:46] *** idiotmax joined
[07:51] *** iblechbot joined
[08:06] <svnbot6> r16627 | gaal++ | * reintroduce the description field in CompUnit, and chase codeGens

[08:06] <svnbot6> r16627 | gaal++ |   to use the filename where possible.

[08:06] <svnbot6> r16627 | gaal++ |   You may need to "rm blib6/lib/*yml" with this revision.

[08:06] <svnbot6> r16627 | gaal++ |   TODO: think about adding a parser revision number to the compunit

[08:08] *** weinigLap joined
[08:15] <gaal> ?eval 42

[08:17] <gaal> ?eval 43

[08:18] <lumi> gaal: Did you knock the emitted code version number?

[08:18] <gaal> yes

[08:18] <gaal> i think it's still building though

[08:19] <gaal> involved a P.A.Internals change after all :/

[08:19] <lumi> So oughtn't the *yml be rebuilt?

[08:19] <lumi> I might be mistaken

[08:19] <gaal> I oughta, yes

[08:19] <gaal> but this being software

[08:20] <lumi> Right

[08:21] <gaal> and indeed it wasn't on audreyt's autopugs. fising

[08:21] <gaal> fixing to

[08:21] <gaal> o

[08:39] <gaal> ?eval 44

[08:39] <Tene> gaal: no evalbot

[08:40] <gaal> why?

[08:41] <gaal> I mean, did someone take it down intentionally?

[08:41] <Tene> hmm

[08:42] <Tene> looks like it might have been lost in a netsplit

[08:43] <gaal> I'm finishing up a rebuild in audreyt's home dir. do you know if there's a preferred command to (re)start the bot?

[08:43] <Tene> I'm not aware.

[08:44] <gaal> okay, thanks

[08:44] <gaal> wow feather's loaded :(

[08:45] <Tene> should just run examples/network/evalbot/evalbot-loop from the pugs root

[08:46] <gaal> prolly nohupped or something, still checking

[08:46] <Tene> make sure to nice it. ;)

[08:46] <Juerd_> gaal: Loaded? Its load is < 2

[08:47] <gaal> then just slow :/

[08:47] <Juerd_> Yes, something's wrong with it and I can't figure out what.

[08:48] <gaal> possibly disk errors.

[08:48] <Juerd_> The least of activity makes its system load explode

[08:48] <Juerd_> Well, I thought that too, but SMART says everything's allright

[08:48] <Juerd_> And the disks in general work well.

[08:48] <Juerd_> Pure IO works perfectly and fast.

[08:49] <gaal> how do i in sudo get an environment that's real close to another user's? I did -u audreyt and -s, but that looked at my svk dir and stuff.

[08:49] <gaal> ah, -i

[08:50] <Juerd_> I just sudo -s, and then su - audreyt

[08:50] <gaal> "be yourself"

[08:50] <Tene> 'sudo su - user' is my idiom

[08:52] <gaal> sudo -i looks good.

[08:53] <meppl> good morning

[08:53] <gaal> hi meppl

[08:53] <meppl> good morning gaal

[08:55] *** OuLouFu joined
[08:56] *** chylli` joined
[09:04] *** buetow joined
[09:07] <gaal> so, evalbot should be up longly.

[09:09] *** integral joined
[09:14] *** rff joined
[09:14] *** riffraff joined
[09:28] *** evalbot_r16627 joined
[09:34] *** chylli` left
[09:46] <gaal> ?eval 45

[09:46] <evalbot_r16627> 45

[09:47] <moritz> gaal: I could have told you that as well ;)

[09:47] <gaal> ?moritz-eval 45

[09:47] <lambdabot> Unknown command, try @list

[09:47] <moritz> 45

[09:48] <moritz> admittedly my response time is bit worse ;)

[09:48] <gaal> ?moritz-eval $?VERSION

[09:48] <lambdabot> Unknown command, try @list

[09:48] <moritz> gaal: 1.0-RC2

[09:50] <Aankhen``> ?moritz-eval $*OS

[09:50] <lambdabot> Unknown command, try @list

[09:51] <moritz> BrainOS 1.0-RC2 (with proprietary extensions) build 1

[09:51] <gaal> ?moritz-eval sub oo ($mse is copy) { $mse ~~ s:g/m/moo/; $mse } oo("mse")

[09:51] <lambdabot> Unknown command, try @list

[09:52] <moritz> moose

[09:52] <gaal> yay

[09:52] <gaal> it works

[09:53] <Aankhen``> It needs a little optimization though.

[09:53] <Aankhen``> I wonder if there are any profilers for BrainOS.

[09:53] <gaal> Aankhen``: you're right. we should spec a language in which all programs that emit the output "moose" have a fast path and do it in O(1).

[09:53] <Aankhen``> Exactly.

[09:53] <moritz> ;)

[09:54] <gaal> for implementations to work, though, we have so solve the antler problem.

[09:54] <Aankhen``> Actually, that's fairly simple.

[09:54] *** chylli joined
[09:54] <gaal> *to

[09:54] <Aankhen``> I think I can write an optimizer for that in Perl 5.

[09:54] <Aankhen``> print "moose";

[09:54] <Aankhen``> (Why would you ever write a program that *didn't* print "moose"?)

[09:54] <gaal> well, no, it should still be able to emit other... ah, good point

[09:54] <Aankhen``> :-D

[09:55] <gaal> your implementation works nicely for all but pathological cases.

[09:55] <gaal> even then, it has a nice failure mode.

[09:55] <Aankhen``> I'm not following you. :-(

[09:56] <gaal> well, the program "1+1" is supposed to emit "2", but in your implementation it emits "moose". not the correct output, but not a *bad* output either.

[09:56] <Aankhen``> That's a very contrived example.

[09:56] <Aankhen``> I can't imagine anyone wanting to print anything but "moose" in practice.

[09:56] <gaal> I agree

[09:56] <moritz> most programs aren't that complex

[09:56] <Aankhen``> One pathological case deserves another. ;-)

[09:56] <gaal> and let's not forget that the language guarantees program that print "moose" run very quickly.

[09:57] <Aankhen``> Yes.

[09:57] <moritz> or rather 'say "moose";'

[09:57] <gaal> It's a purely mooseful language.

[09:57] <Aankhen``> moritz++ # P6 version

[09:57] <Aankhen``> LOL.

[09:58] *** asksh joined
[09:59] * Aankhen`` ==> bed()

[09:59] <moritz> we could teach perl 5 to call the $SIG{__SYN__} handler if it encounteres a syntax error, and set $SIG{__SYN__} = sub { print "moose\n" }

[09:59] <moritz> Aankhen``: good night

[09:59] <Aankhen``> ROTFLMAO.

[09:59] *** asksh is now known as dwave

[09:59] <Aankhen``> G'night.

[10:00] <gaal> night

[10:01] *** kanru joined
[10:05] *** mtve joined
[10:06] *** Yaakov joined
[10:25] *** IllvilJa joined
[10:36] *** mjk joined
[11:34] *** araujo joined
[11:38] *** prism joined
[11:39] *** kanru joined
[11:39] *** penk joined
[11:48] *** penk joined
[11:54] *** franck__ joined
[11:58] *** REPLeffect joined
[12:01] *** deq` joined
[12:03] *** kanru joined
[12:12] *** buetow joined
[12:23] *** Aankhen`` joined
[12:33] *** isaacd joined
[12:34] *** jasenger joined
[12:42] *** Loro_ joined
[12:51] *** mtve joined
[13:03] *** zamolxes_ is now known as zamolxes

[13:13] <mncharity> anarchistic development ++  (having just tripped on its absence elsewhere)

[13:13] <mncharity> hmm, re access control rather than project planning. ;)

[13:24] *** fglock joined
[13:24] <svnbot6> r16628 | fglock++ | kp6-roadmap.pod - refactored from kp6-Perl6-roadmap.txt

[13:25] *** penk joined
[13:30] <svnbot6> r16629 | fglock++ | [v6] - added docs/kp6-Notes.txt 

[13:34] <mncharity> http://svn.pugscode.org/pugs/v6/docs/kp6-roadmap.pod

[13:43] <avar> kp6 is bootstrapped?

[13:45] *** buetow joined
[13:50] *** PerlJam joined
[14:05] *** sunnavy joined
[14:07] <fglock> avar: yes, kp6 is a superset of mp6

[14:07] <avar> I thought you meant directly bootstrapped

[14:08] <fglock> avar: the plan has changed a bit - supporting Perl-6.0.0-STD seems to be higher priority

[14:08] <svnbot6> r16630 | fglock++ | [v6] - kp6-roadmap.pod - finished phase III plan

[14:09] <fglock> avar: comments are much welcome, this is not final

[14:11] *** andara joined
[14:12] <fglock> avar: direct bootstrap requires heavy optimization, which is scheduled for later

[14:13] *** obvio171_ joined
[14:13] <avar> fglock: I've been looking at some of your PCR code after I wrapped it in a re::engine, specifically wondering about the best way to make perl5 a runtime for rules. I saw that you had made an incomplete emitter for p5rx

[14:14] <avar> If you're working on regexp emitters I'd love to help with the p5 one

[14:14] <fglock> avar: sure, it would be nice to have the p5rx backend working

[14:15] <avar> In the long run I want something that can be ripped out and run on p5. Which a Rules => p5 emitter could do

[14:17] <fglock> hmm - how is that different from PCR+p5rx ?

[14:17] <avar> It's not really

[14:20] <gaal> @tell audreyt I'm puzzled by the differing treatment of parse results in op1Eval and op1EvalP6Y. 1. why doesn't op1EvalP6Y run INIT sections? 2. why does it do unionPads on two globs, where op1Eval makes do with mergeStmts?

[14:20] <lambdabot> Consider it noted.

[14:23] <fglock> mncharity: ping

[14:23] <mncharity> fglock: pong :)

[14:24] <fglock> mncharity: I just factored out the anarchistic part of the roadmap

[14:24] <fglock> it looks more like a plain project now

[14:26] <mncharity> lol

[14:26] <mncharity> :)

[14:26] <fglock> the roadmap sets a "main track", but it doesn't tell people what they should not to do. 

[14:27] <fglock> I hope it works better

[14:28] <mncharity> reading...

[14:29] *** REPLeffect joined
[14:32] <fglock> btw, the old version was renamed to http://svn.pugscode.org/pugs/v6/docs/kp6-Notes.txt

[14:38] <mncharity> avar: btw, I don't know the status of p5rx, but you might look at misc/pX/Common/yet_another_regex_engine/Regexp_ModuleA.pm.  The runtime (top of file, "RMARE") is separate from ast-rmare glue ("RMARE_emit"), which is separate from from the ast def, w.i.s.f the ast prep passes.  Crufty code (though the runtime is cleaner that some other parts of the file).  So you could just snarf the runtime.  Upsides: fast, well tested, featurful.  

[14:38] <mncharity> let me know if you have any questions at all

[14:39] * mncharity goes back to reading...

[14:40] <mncharity> "HoH"?

[14:42] <mncharity> (random thought: if anyone is looking for a random web service to create, a "paste the url of a pod file and I'll ->html it for you" might be nice.  or not - user "remember where it is" overhead may be too high?)

[14:43] <daxim_> a hash of hashes, if you wanted to know what that means

[14:44] <mncharity> ah, thank you

[14:45] <mncharity> re Target speed is 1/200x Perl 5, what is the current speed?

[14:47] <fglock> mncharity: there are no measurements yet; 1/200x was about the speed of the old PIL-RUN

[14:48] <pasteling> "gaal" at 192.115.25.249 pasted "patch, broken, towards a precomp cache" (145 lines, 5.7K) at http://sial.org/pbot/25351

[14:48] <avar> mncharity: Interesting, did you write that?

[14:49] <gaal> @tell audreyt If you could give http://sial.org/pbot/25351 some cycles, that'd be awesome

[14:49] <lambdabot> Consider it noted.

[14:49] <svnbot6> r16631 | fglock++ | [v6] - 'hash-of-hashes' instead of 'HoH', mncharity++

[14:51] <gaal> darn, forgot to add implementation of SHA1

[14:51] <fglock> mncharity: I wonder if rmare could be rewritten in (Mini)Perl 6?

[14:51] <fglock> for 6-in-6 reuse

[14:52] <fglock> lunch &

[14:52] <pasteling> "gaal" at 192.115.25.249 pasted "patch, broken, towards a precomp cache. with sha1 this time" (319 lines, 12.2K) at http://sial.org/pbot/25352

[14:54] <mncharity> Milestone 1 is "AST replaced with new OO version, and test suite still runs".  I'm not entirely clear what Milestone 2 is?

[14:56] <mncharity> I think of "milestones" as testable/falsifiable assertions about the state of the code/project.

[15:00] <gaal> gotta go, moose all &

[15:00] <mncharity> bye gaal

[15:01] <mncharity> Can P3 Milestone 3 really be separated from P4?  Ie, how do you test ast transforms if you don't have a runtime?  Actually examine the graph structure?

[15:03] <mncharity> fglock: re no measurements yet, if it wasn't too costly, it would be nice to have at least a factor of ten estimate.  eg, 1/1000?  1/10000? ...

[15:03] <mncharity> just for context

[15:03] <mncharity> avar: re write that, yes

[15:04] <avar> hrm, is it emitting p5?

[15:04] <avar> p5rx

[15:06] *** veritos joined
[15:06] <veritos> yo.

[15:06] <veritos> i got an idea.....subs are simply lists of statements.

[15:07] *** silug joined
[15:07] <veritos> so you can do something like { unshift &foo, { say 'testing' } } or the like

[15:07] *** rindolf joined
[15:07] <veritos> seem feasible or useful?

[15:08] <avar> the {} Code block would be folded into &foo's block?

[15:08] <veritos> yep! in that case, that line (or more than one) would be prepended to the function

[15:08] <avar> sub foo { say "ook" }; push &foo, { say "eek" }; = sub foo { say "ook"; say "eek" }

[15:08] <veritos> yep, that's right

[15:09] <veritos> full on line-by-line reflection

[15:10] <mncharity> fglock: re rmare rewritten in mp6...  not the right thing i think.  while some bits of thought or architecture might be used, it's essence is wrestling with p5.  eg, to get local() to work properly in embedded code.  and running fast on p5.  given a clean language, fewer nasty constraints, you can write something much cleaner.

[15:11] <avar> if you generalized this to all code things you could implement a lisp-like macro system:)

[15:11] <avar> veritos: I think you should write up on it and send it to perl6-language

[15:11] <mncharity> avar: re p5rx emitting p5?  dunno, sorry

[15:11] <veritos> avar: so you like the idea?

[15:11] <avar> veritos: yes

[15:11] <veritos> what use would it have?

[15:12] <veritos> debugging ( say 'this function is called' ) is the only thing i can think of

[15:12] <rindolf> Hi all.

[15:12] <rindolf> Hi avar 

[15:12] <avar> If it was general enough it would be an API to modify the AST

[15:12] <veritos> yo 'dolf

[15:12] <veritos> avar: hmm.

[15:13] <veritos> maybe if everything was a list: $foo = 'hi'; unshift $foo, 'bar'; $foo == 'barhi'

[15:13] <moritz> that reminds me of stack based languages

[15:14] <moritz> like forth and postscript

[15:14] <rindolf> moritz: what's up?

[15:14] <veritos> moritz: what do you mean?

[15:14] <moritz> rindolf: had my third master exam today... don't want to talk about it ;)

[15:15] <rindolf> moritz: OK. :-(

[15:15] <rindolf> moritz: anything else?

[15:15] <rindolf> moritz: do you know #perlcafe  or #lispcafe ?

[15:15] <rindolf> moritz: or #linguistics 

[15:15] <moritz> veritos: it looks a bit like '2; 3; +; print' which would push 2 and 3 onto a stack, + would take two args from the stack, prints takes one from the stack etc

[15:15] <moritz> rindolf: no, no, no and no ;-)

[15:16] <veritos> moritz: you don't need to do that ;)

[15:16] <rindolf> moritz: OK.

[15:16] <rindolf> :-P

[15:16] <avar> moritz: like perl, only it has syntax sugar around that:)

[15:16] <moritz> rindolf: but now I know of their existance ;)

[15:16] <rindolf> moritz: I'm here to serve.

[15:16] <moritz> avar: exactly ;)

[15:16] <mncharity> fglock: maybe fold P3M3 into P4?  So P3 becomes 'bootstrap on new ast'.  P4 'run STD'.  P5 'bootstrap on STD'. ?

[15:16] <rindolf> "Are you being served?"

[15:16] <moritz> rindolf: and I'm here to enerve... and to code ;)

[15:17] <rindolf> moritz: code by chatting on the IRC?

[15:17] <rindolf> Maybe I'll work on XML-Grammar-Screenplay.

[15:17] <rindolf> Drop the P::RD parser and convert it to use a quick-and-dirty one-pass parser I have in mind.

[15:17] <moritz> rindolf: yes... I pipe IRC messages through a random filter, and sometimes the output is valid perl code ;)

[15:25] <mncharity> fglock: was that the kind of feedback you were looking for?  /me scrolls back... hmm... err, _were_ you looking for feedback?? ;)

[15:27] <mncharity> Actually, P3 "regex compiler refactoring" is fine, it's P3 M1 which could be "Bootstrap on new OO AST".  though I'm still not sure what P3 M2 is, so I may be missing the point.

[15:28] <mncharity> avar: well, let me know if you have any questions about y.a.r.e or the runtime.

[15:28] <mncharity> bbl

[15:31] <mncharity> fglock: re creating roadmap, yay! nifty! great! :)

[15:43] *** drupek12 joined
[15:50] *** bonesss joined
[15:58] *** fglock joined
[16:00] <fglock> avar: re p5rx - yes, it builds a plain Perl 5 regex

[16:01] <avar> r5rx = the stuff in PCR?

[16:01] <fglock> mncharity: re P3/P4 - it does have a small runtime

[16:01] <fglock> avar: yes

[16:01] <avar> Yes, I saw that emitter

[16:03] <avar> fglock: What I'd like to do with PCR is the ability to map perl6 rules to perl5 packages, writing grammars in a mix of token/rule/regex and p5 subs. Ideally something that makes generated code (zero deps)

[16:03] <fglock> mncharity: re feedback - thanks!

[16:03] *** buetow joined
[16:03] * moritz just found an inaccuracy in the blead perlsyn

[16:03] <avar> Something like Rule.pmc{0,1}. Just a little cleaned up:)

[16:03] <moritz> line 558 and 559 are outdated

[16:04] <fglock> avar: did you see http://svn.pugscode.org/pugs/perl5/Pugs-Compiler-Rule/util/ ?

[16:05] <lambdabot> Title: Revision 16631: /perl5/Pugs-Compiler-Rule/util

[16:05] <fglock> it's a grammar-to-perl5 compiler

[16:05] <fglock> though it's a bit old

[16:05] <avar> oh, cool

[16:07] <fglock> I guess this compiler, combined with PCR-plain-regex might give interesting results

[16:07] <fglock> "compile_p6grammar.pl" was obsoleted by v6.pm

[16:11] *** elmex joined
[16:12] *** obvio171_ joined
[16:14] <rindolf> ingy: here?

[16:20] <avar> fglock: I want to be able to write something like this essentially: http://nopaste.snit.ch:8001/10304

[16:21] <avar> Then I'd run a compiler on that file that would generate a .pmc file with the same name. I could then ship the code on CPAN with zero-deps

[16:22] *** franck__ joined
[16:22] <fglock> avar: I think compile_p6grammar.pl can be modified to do that; you can use Text::Delimited to isolate perl 5 code

[16:23] <avar> Yup, looks like it

[16:24] <avar> I'm mainly thinking about the API that perl6 uses for subs in a grammar to inform the rest of the grammar whether they failed, where they should continue matching etc.

[16:25] <avar> but synopsis 5 doesn't spec out all the needed parts at all, for instance it just says that perl6 has match objects but doesn't go into what methods it should have and how it should all operate

[16:26] <fglock> avar: yes - PCR was mostly made based on irc discussions

[16:27] *** bernhard joined
[16:27] <avar> $ perl5.9.5  -E 'my $_ = "foofoofoo"; $_ =~ /foo/g; pos($_) = 6; /foo/g; say pos'

[16:27] <avar> 9

[16:27] <fglock> a known bug is that PCR expects the string as a parameter, instead of using $_

[16:28] <avar> I'm guessing you can do most of this with just a pos method on the passed match object

[16:28] <avar> $ perl5.9.5  -E 'my $_ = "foofoofoo"; /foo/g; pos($_) = undef; /foo/g; say pos'

[16:28] <avar> 3

[16:29] <fglock> avar: re pos() et al, see http://svn.pugscode.org/pugs/perl5/Pugs-Compiler-Rule/lib/Pugs/Compiler/RegexPerl5.pm

[16:29] <lambdabot> http://tinyurl.com/2d3mqm

[16:29] <avar> But a lot of this isn't clear at all in s5 or in test cases I've seen, like how do I set up captures such a sub?

[16:30] <fglock> this module compiles a PCR wrapper for perl5 regexes

[16:30] <avar> s/such/in such/

[16:30] <obra> fglock:  Got your mail. Will try to review and comment today

[16:30] <fglock> avar: not sure if it answers this question

[16:31] <fglock> obra++ - thanks!

[16:31] <avar> sort of, at least how I can write a very simple sub that updates a position. But other details on match objects aren't clear:)

[16:32] <avar> but I might try implementing some of this later-ish:)

[16:33] <obra> thanks for doing all the actual work ;)

[16:33] <TimToady> ext/Perl6-Grammar/t/basic.t seems to be looping...

[16:33] * avar prods TimToady with the above discussion:)

[16:34] <TimToady> I've been watching it go by and .oO(but that's the part the implementors are supposed to spec...)Oo.  :)

[16:34] <fglock> avar: the other details are mostly hidden in P::C::Runtime::Match.pm

[16:34] <fglock> :)

[16:35] <avar> yeah, I saw that:)

[16:35] <TimToady> anyway, ext/Perl6-Grammar/t/basic.t already has 18 minutes of runtime... :/

[16:36] <TimToady> and my fedora 7 testing still isn't getting off the ground...

[16:37] <TimToady> ext/Algorithm-TokenBucket/t/test.t

[16:37] <TimToady> Can't locate object method "new" via package "Test::Harness::Results" (perhaps you forgot to load "Test::Harness::Results"?) at /usr/lib/perl5/site_perl/5.8.8/Test/TAP/Model.pm line 174, <FILE> line 2.

[16:38] <TimToady> probably f7 "upgraded" me to an older p5 package somewhere...

[16:38] <fglock> re ext/Perl6-Grammar - how about replace is with Perl-6.0.0-STD

[16:39] <TimToady> 'cuz it's not "ext"?

[16:39] *** veritos joined
[16:39] <TimToady> it's kinda core if you ask me... :)

[16:40] <veritos> TimToady: eh?

[16:41] <TimToady> I think the Perl grammar is not "external" or "extra"... :)

[16:41] *** andara left
[16:42] <TimToady> but you'll have to backlog to see why I said that...

[16:42] <veritos> TimToady: you see the subs-as-lists thing?

[16:42] <TimToady> veritos: on the list of statements idea, it has some wrinkles

[16:43] <TimToady> it would either have to violate lexical scoping, or it would be equivalent to the existing "wrap" mechanism.

[16:43] <TimToady> it pretty much prevents the optimizer from doing any code movement.

[16:44] *** justatheory joined
[16:44] <fglock> TimToady: 'backlog' related to ext/ ?

[16:44] <fglock> I guess 'ext' just means 'modules' to me

[16:44] <TimToady> and the overhead of keeping each statement in its own structure would be hard to deal with

[16:44] <TimToady> considering the inside of every .{} subscript is considered a statement

[16:44] <TimToady> and these days, the inside of every () and [] as well.

[16:45] <TimToady> (at least syntactically)

[16:45] <TimToady> so maybe that part doesn't matter

[16:45] <gaal> rehi

[16:45] <veritos> so in other words it's essentially too slow and hard to implement and/or optimize to be of any use ?

[16:45] *** zamolxes joined
[16:45] <TimToady> but the killer is, are lexicals going to leak out of {...}?  If so, it's a non-starter

[16:47] <TimToady> the others can potentially be worked around, but we're trying to keep to the rule that "my never, ever leaks out of {...}"

[16:47] <veritos> might be a better idea in e.g. Tcl, where everything's a string and adding more code is just concatenation?

[16:47] <TimToady> and it would be nice for closures to close when they get to the end...

[16:48] <TimToady> Tcl has always preferred the "everything is a string" metaphor to the exclusion of optimizability

[16:48] <veritos> TimToady: actually in more recent ones it does parse the code in such constructs.

[16:48] <rindolf> Hi gaal 

[16:48] <rindolf> Hi T 

[16:49] <rindolf> Hi TimToady 

[16:49] <rindolf> TimToady: how was your weekend?

[16:49] <rindolf> gaal: I went biking yesterday.

[16:49] <rindolf> gaal: not too many foxen during a weekday.

[16:49] <TimToady> veritos: yes, they were pretty much forced into that by real world considerations.  :)

[16:49] <rindolf> not too many people period.

[16:50] <veritos> TimToady: one beauty of Tcl is that i can write an interpreter in Perl in like 100 lines b/c it's so simple.

[16:50] <veritos> basically just recursively call an eval-equivalent for every block

[16:51] <TimToady> yes, I call it a "delagational" language

[16:51] <TimToady> it shares that with Lisp, which can have an even simpler eval loop :)

[16:51] <TimToady> *delegational

[16:52] <veritos> TimToady: heh!

[16:52] *** ahmadz joined
[16:52] <TimToady> however, Lisp has a slightly more powerful semantic model underneath.  :)

[16:52] <veritos> i still like the idea of a parser being built into the language core tho

[16:52] <TimToady> well, er, yes...

[16:53] <avar> And lisp shows that you can have very powerful intospection but still have speed

[16:53] <TimToady> yes, which is why I didn't push the optimizability issue, but the scoping issue.

[16:54] <TimToady> you can always play tricks like conditional optimization and run-time pessimization, but you can't unbreak broken scoping.

[16:55] <veritos> what i thought about the scope was that if a statement was being pushed, it wouldn't be a self-contained unit, it would actually be a part of the function.

[16:56] <veritos> if you wanted to push a do {} block on top, then it could have its own scope

[16:56] <veritos> but if you added a single statement with a my declaration, that wouldn't really affect the rest of the function anyway

[16:56] <veritos> (usually)

[16:57] <moritz> veritos: I don't see how we could gain from such a system...

[16:57] *** veritos is now known as karhu

[16:57] <moritz> veritos: do you have a simple example?

[16:57] *** karhu is now known as veritos

[16:57] <veritos> sub foo { implementation here };

[16:58] <veritos> unshift &foo, { say 'calling foo' }

[16:58] <veritos> real time debugging support maybe?

[16:58] <TimToady> &foo.wrap: { say 'calling foo'; callsame; }

[16:58] <moritz> you can get that with wrap

[16:58] <moritz> right

[16:58] *** veritos joined
[16:59] <TimToady> basically, a block is immutable, but a sub (a container of a block) is mutable.

[16:59] <TimToady> the optimizer can know at the end of the block all the uses of the "my" variables in that block and make assumptions

[17:00] <fglock> btw, a wrap can't see the lexical variables inside the sub, right?

[17:00] <moritz> I think that's the point about lexical variables, isn't it?

[17:01] <TimToady> not easily, nor can it modify the pad after it's done

[17:01] <TimToady> it's actually easier to see a parent's pad than a child's

[17:02] <TimToady> there's CALLER::<$x> but not CALLEE::<$x>

[17:02] <TimToady> and in fact, the child's pad might not even be created yet...

[17:03] <TimToady> there's probably a way to cheat by appending a LEAVE to the block though.

[17:03] <rindolf> avar: who is this biker?

[17:03] <rindolf> avar: is that .is?

[17:04] <avar> rindolf: wrong channel:)

[17:04] <rindolf> avar: oh.

[17:07] <TimToady> shawaa shimasu &

[17:09] <veritos> eh?

[17:12] *** stevan_ joined
[17:15] *** Psyche^ joined
[17:23] *** weinigLap joined
[17:26] *** [particle] joined
[17:32] *** Psyche^ is now known as Patterner

[17:34] <fglock> is there a place where I can access Pugs 'pod' documents, formatted as html?

[17:35] <fglock> I want to link from a blog

[17:35] <moritz> which document?

[17:36] <fglock> moritz: http://svn.pugscode.org/pugs/v6/docs/kp6-roadmap.pod

[17:37] <moritz> fglock: I can quickly setup this one, and let others follow if you want to

[17:37] <fglock> moritz: sure :)

[17:38] <moritz> http://moritz.faui2k3.org/pugs_pod/kp6-roadmap

[17:38] <lambdabot> Title: kp6-roadmap - The "KindaPerl6" Project Roadmap

[17:38] <mncharity> avar: was your pasted ipv4 code intended to be p5 or p6?

[17:39] <avar> p5

[17:39] <fglock> moritz++  # that was fast :)

[17:39] <avar> but obviously 'token' and such would need preprocessing

[17:40] <moritz> fglock: single documents _are_ fast ;)

[17:40] <avar> *ipv4 = Pugs::Compiler::Rule->compile($str)->code;

[17:40] <TimToady> hmm, t/regex/from_perl6_rules/propcharset.t has 30 minutes of runtime today...

[17:40] <mncharity> sure.  it just had ~~ and say() too, so I wondered.

[17:40] <moritz> mncharity: no problem in 5.10 ;)

[17:40] <avar> mncharity: I write perl 5.10 style these days:)

[17:40] <TimToady> fglock: something in regexen is looping, I think...

[17:40] <mncharity> ??? huh ???

[17:40] * mncharity wonders if he missed a memo...

[17:40] <fglock> TimToady: looking

[17:41] <mncharity> 5.10 has say and ~~ ??

[17:41] <moritz> mncharity: yes ;)

[17:41] <mncharity> wowwwwww

[17:43] <avar> given ("foo") { when ($_ ~~ %hash) { say $_ } } # valid 5.10 :)

[17:43] <moritz> TimToady: my smoke (r16631) didn't loop

[17:43] <avar> mncharity: also: http://search.cpan.org/~avar/re-engine-PCR-0.02_01/PCR.pm :)

[17:43] <lambdabot> Title: re::engine::PCR - Pugs::Compiler::Rule regex engine - search.cpan.org

[17:44] <TimToady> I did do a yum update on the FC 6 box, so it could conceivably have replaced something Unicodey

[17:44] *** jisom joined
[17:44] <TimToady> but it seems a completely different failure mode than my F7 laptop...

[17:47] <TimToady> hmm, t/regex/from_perl6_rules/properties.t seems to be hung too.  could be test harness related, I suppose.  I'll have to run those directly and see if they hang on their own.

[17:48] <TimToady> nope, it started progressing again

[17:49] <TimToady> maybe I was fooled by a contiguous set of successes, since I'm waching undefs go by...

[17:49] <fglock> TimToady: it works here with latest PCR and old Pugs (r14504); it takes just 29s

[17:49] <TimToady> *watching

[17:49] <TimToady> well, it usually take 5-10 minutes on my machines, but 30 minutes seems excessive

[17:50] *** iblechbot joined
[17:50] <TimToady> something has been pessimized...

[17:50] <fglock> I tested propcharset.t only

[18:01] <gaal> I don't think it's in my stuff...

[18:04] <TimToady> not looping, just excruciatingly slow here for some reason

[18:04] <TimToady> properties now up to 20 minutes...

[18:04] <TimToady> with nothing else running

[18:04] <moritz> is there a "mkdir -p" equivalent in perl5?

[18:05] <TimToady> system "mkdir -p $dir"  :P

[18:05] <gaal> moritz: File::Path

[18:05] <gaal> mkpath there

[18:05] <moritz> gaal: thanks

[18:06] <gaal> TimToady: long shot, but does strace say anything fishy?

[18:06] <gaal> moritz: sure

[18:06] <TimToady> was about to try it--I suspect it'll indicate it's reloading my unicode swashes repeatedly...

[18:10] <TimToady> seems to be getting a lot of repeated stat failures:

[18:10] <TimToady> stat64("/usr/lib/perl5/vendor_perl/5.8.6/unicore/lib/gc_sc/InTagalo.pl", 0xbfee9f3c) = -1 ENOENT (No such file or directory)

[18:11] *** penk joined
[18:12] <TimToady> ooh finally completed after 1825 seconds

[18:12] <gaal> I CAN HAS TAGALOG?

[18:13] <TimToady> also does a lot of repeated stat64("/home/larry/pugs/perl5/Pugs-Compiler-Rule/lib", {st_mode=S_IFDIR|0775, st_size=4096, ...}) = 0

[18:13] <TimToady> but maybe that's PCR cache related

[18:14] <TimToady> hmm, why is it looking in vendor_perl/5.8.6?

[18:15] <TimToady> my vendor perl is 5.8.8

[18:15] <moritz> perhaps it wants to sell you another perl version ;)

[18:15] <fglock> hmm - maybe a broken Cache::Cache - I've seen something like this before, but I don't know how to fix it

[18:16] <fglock> it worked right as root, but didn't cache as a normal user

[18:16] <TimToady> Actually, it's searching backwards 5.8.8, 5.8.7, 5.8.6, 5.8.5

[18:16] <TimToady> so I think my vendor has clobbered the unicode database :(

[18:17] <moritz> TimToady: did you do a "make realclean" after your upgrade?

[18:17] <TimToady> yes

[18:17] <TimToady> I think fedora has borken Perl 5.8.8...

[18:18] <TimToady> at least on FC 6, and possibly on F7

[18:20] *** ludan joined
[18:23] <amnesiac> TimToady, don't use FC :(

[18:31] *** [particle] joined
[18:33] *** electrog1ek joined
[18:34] *** REPLeffe1t joined
[18:42] <moritz> http://moritz.faui2k3.org/pugs/ # index of HTMLized pod files from the pugs repository

[18:42] <lambdabot> Title: Index of POD files in pugs repository

[18:43] <moritz> I intend to build a cron job that updates them regularly

[18:44] *** obvio171_ is now known as obvio171

[18:46] <moritz> fglock: you seem to have quite a few .pod files under v6/ that don't contain any pod... would you object to rename them to .txt? or creating real .pod?

[18:56] *** IllvilJa joined
[19:03] <mncharity> avar: ping?

[19:03] <mncharity> remind me where the "official pastebot of #p6" is?  (it's not in the topic, snif)

[19:04] <moritz> nopaste

[19:04] <moritz> paste?

[19:04] <moritz> ?paste

[19:04] <lambdabot> Haskell pastebin: http://hpaste.org/new

[19:04] <moritz> perlbot: paste?

[19:04] <perlbot> Paste your code to http://sial.org/pbot/perl or http://erxz.com/pb and #perl will be able to view it.

[19:04] <lambdabot> Title: sial.org Pastebot - pasteling

[19:05] <moritz> mncharity: sial.org is the "official" one 

[19:06] <fglock> moritz: those files need a revision; I'll create real pod

[19:06] *** mncharity changes topic to: http://pugscode.org/ | Brave souls needed to fix 'make Install'! Non-brave souls should avoid it for now | http://sial.org/pbot/perl6

[19:06] <mncharity> ahhhh

[19:06] <moritz> fglock: ok

[19:06] <moritz> mncharity++ # you were faster ;)

[19:06] <mncharity> lol

[19:07] <gaal> the /topic always runs over. I propose compressing it to "moose".

[19:08] <gaal> you kinda knew I'd say that, but somehow the only reponse you can make to that is moose

[19:08] <moritz> moose

[19:08] <moritz> *SCNR*

[19:13] <pasteling> "mncharity" at 24.128.48.3 pasted "avar: a modified version of your code" (59 lines, 1.1K) at http://sial.org/pbot/25355

[19:13] <svnbot6> r16632 | putter++ | Regexp_ModuleA.pm - repaired recognition of  token x {\n...\n}.  avar++

[19:14] <pasteling> "mncharity" at 24.128.48.3 pasted "avar: the Hack it uses" (53 lines, 1.4K) at http://sial.org/pbot/25356

[19:15] <pasteling> "mncharity" at 24.128.48.3 pasted "avar: output" (21 lines, 439B) at http://sial.org/pbot/25357

[19:16] <moritz> now I'm confused... mncharity eq putter?

[19:17] <mncharity> avar: re changes to your code: some were to 

[19:17] <mncharity> moritz: t

[19:18] *** |Bernhar| joined
[19:18] <|Bernhar|> hi all, hi bernhard !

[19:18] <mncharity> avar: re changes to your code: some were to run it on my p5.8, others seemed obvious bugs, some I'm not sure about (ie, the capture semantics), the $noop is a kludge (I handn't gotten around to api

[19:19] <daxim_> annocpan is down, meh

[19:19] <mncharity> to api'ing it yet;  the sub { sub { is there for inheritance to work, and to permit  Foo::ipv4->("target string"), though here you obviously don't get that (another thing not wrapped up).  let's see...

[19:22] <mncharity> <Mumble::ipv4> -> <ipv4>  because I never told the grammar about <pkg::name>.  But I believe al the infrastructure is there for it to work.

[19:22] <mncharity> $c is the continuation.  so local() is properly scoped.

[19:22] <bernhard> Hi Bernhar

[19:23] <mncharity> BacktrackMacros for FAIL

[19:23] *** silug joined
[19:23] <mncharity> I think that's just about it.

[19:23] <mncharity> Let me know if you have any questions.

[19:24] <|Bernhar|> Bernhard, you use my nick and i thought it would be ok, to tell you that, bevor ghost you ;-)

[19:24] <mncharity> Hack is just a, err, hacked version of PugsRegexTestA.pm

[19:24] *** jubao joined
[19:25] <mncharity> moritz: sorry for the confusion ;)

[19:26] <mncharity> gaal: groan

[19:26] <mncharity> (long delayed)

[19:27] <bernhard> Sorry, I also ran across 'Bernhard' in http://cia.vc/stats/author/Bernhard

[19:27] <lambdabot> Title: Bernhard - CIA.vc

[19:27] <gaal> mncharity: moose

[19:27] <bernhard> I suppose I need to think of a new nick

[19:27] <|Bernhar|> want to bet ?

[19:28] <mncharity> avar: inheritance of rules should work properly.  then again, it's unclear anyone other than me has ever run the thing, and I don't remember if I ever banged on it.  But it does use inheritance internally (p6 grammar is modified p5+rules grammar is modifed p5 grammar).

[19:28] * bernhard is trying to be creative

[19:28] <pasteling> "infamy" at 189.10.158.31 pasted "inf" (1 line, 57B) at http://sial.org/pbot/25358

[19:29] * |Bernhar| owns the nick password

[19:30] <fglock> kp6 blog - http://pugs.blogs.com/pugs/2007/06/kindaperl6_proj.html

[19:30] <lambdabot> Title: Pugs: "KindaPerl6" project roadmap

[19:30] * avar returns

[19:30] <avar> mncharity: going through those links:)

[19:31] <mncharity> :)

[19:32] <gaal> dinner &

[19:32] <mncharity> oooo, a shiny new pugs blog post.  fglock++

[19:32] <mncharity> moose?

[19:32] <fglock> mncharity: I think I lost your previous comment on: how about reusing your regex engine for kp6?

[19:33] <|Bernhar|> bernhard : http://german-bash.org/2921

[19:33] <lambdabot> Title: German-bash.org - Krasse Chat-Zitate/Quotes (IRC + IM) - Zitat #2921

[19:33] *** takesako___ joined
[19:33] <avar> urgh, is sial.org down?

[19:34] <avar> pbotutil.pl hasn't worked for sial for me in some time, and I can't reach it in a regular browser either..

[19:34] <avar> hrm, works on another Ip

[19:34] <avar> maybe they banned me because I past so much there:)

[19:36] <mncharity> fglock: previous comment?

[19:37] *** schmalb joined
[19:37] <fglock> mncharity: ah, found it: http://moritz.faui2k3.org/irclog/out.pl?channel=perl6;date=2007-06-04#id_l280

[19:37] <lambdabot> Title: IRC log for #perl6, 2007-06-04, http://tinyurl.com/29z5fh

[19:37] *** |Bernhar| is now known as Bernhard

[19:38] *** Bernhard left
[19:38] <mncharity> ah :)

[19:40] <fglock> mncharity: is there an architecture overview? I'm specially interested in backtracking 

[19:40] <avar> mncharity: I'll try to make sense of those later:)

[19:40] <mncharity> fglock: of y a r e?

[19:41] <avar> mncharity: But generally that's what I'm thinking about, except I want to generate code at module::install time not with a source filter, but it can obviously be done either way:)

[19:41] <fglock> mncharity: yes

[19:42] <mncharity> avar: re later, :/  :)  well, just let me know if you have any questions.

[19:43] <mncharity> re source filter, DEBUG_Hack=1 perl ...  will give you a copy of the code. ;)  My fuzzy recollection is audreyt did a hack to .pmc-ify source filter output, but I could well be wrong.

[19:43] <avar> mncharity: have you looked at the re::engine stuff I've been making?:)

[19:43] <avar> Would be nice to have your engine via re::engine::Plugin :)

[19:43] <avar> http://search.cpan.org/src/AVAR/re-engine-PCR-0.02_01/PCR.pm # it's easy!:)

[19:43] <mncharity> fglock: re architecture... (pause)

[19:44] <avar> mncharity: Ya, source filtering would be nice for prototyping:)

[19:44] <mncharity> avar: re looked at, no, I haven't been following it since the first prototype, and some of audreyt's re-override mods.

[19:45] <mncharity> Has it been run with an identity plugin against the p5 test suite?

[19:45] <avar> But mainly I want to get a Rules implementation that feels native on p5 that doesn't scare the hell out of perl 5 people, and is fast

[19:45] <avar> and PCR => generated code that mostly runs on the p5 rx engine could do that:)

[19:45] <avar> identity stuff?

[19:46] <mncharity> I saw all sorts of fun affects like subst() mangling the op tree before calling exec, so, for example, accessing a lexical would cause later segfaults.

[19:46] <mncharity> re identity, a plugin which simply calls the usual p5 regex engine.

[19:46] <avar> hrm, I'm not familiar with that. Haven't seen any odd segfaults

[19:47] <avar> is it on cpan? what does it do?

[19:47] *** Aankh|Clone joined
[19:47] <mncharity> failures of indentity plugin - failures of normal p5 = problems with re::override (well, with respect to hairy p5 core)

[19:48] <avar> oh you mean re::override changing?

[19:48] <avar> or screwing up?

[19:48] <mncharity> um, it's not (that I know of, may well be) an actual pluggin module on cpan.  it's something you write for testing.

[19:48] <avar> that was a super-hackish way to replace the engine by overriding symbols that audrey made, before the plugin interface in blead

[19:50] <mncharity> re super hackish, yes.  but, at least months ago when I was paying attention, it didn't seem the blead interface was really being tested.  that may well have changed.  but at the time, it appeared they had only done the easy part (the override), and not the pain (the p5 vm fixes).

[19:50] <mncharity> and specifically, had not yet tried to pour the p5 test suite through the override.

[19:51] * mncharity wonders whether to try saying that all again, for clarity

[19:53] <mncharity> normally one has  -> engine.   now we have -> override -> something.  one can test how well override works by setting up -> override -> engine, and checking that the p5 test suite doesn't have regressions.

[19:53] <avar> Yeah, it was super untested, but that changed when I started working on it:)

[19:53] <mncharity> :)

[19:53] <avar> re::engine::Plan9 for example is very well tested

[19:54] <avar> and after my latest blead patch which makes named captures overridable I'm going to finish the wrapper around ::PCRE and run it through the perl testsuite

[19:54] <mncharity> s/// is well tested too?  with embedded code regexes and all?

[19:55] <avar> Plan9 doesn't support embedded code:)

[19:55] <avar> but no, I haven't tested anything that uses (?{}). But the debug engine uses that so I guess it works

[19:55] <avar> in any case I like "str" =~ sub {} better :)

[19:55] <avar> "str" =~ \@AoC; :)

[19:56] <mncharity> "specific cases working" ne "test suite passes", no?

[19:57] <avar> Well, there are things that work and then things I'm pretty sure work:)

[19:57] <avar> But generally this stuff is very well tested by now. But some edge cases remain probably

[19:57] <mncharity> ok

[19:58] *** buu joined
[19:58] <avar> http://search.cpan.org/src/AVAR/re-engine-Plan9-0.07/Plan9.xs # writing engines is simple too

[19:58] *** riffraff joined
[19:58] <riffraff> ciao

[19:58] <avar> The stuff in Plan9_exec is sufficient to get s/// working correctly

[19:59] * avar loathes rx->nparens in that function

[19:59] <mncharity> would it be trivial to do a  'just call the regular p5 regex engine' pluggin?

[19:59] <avar> unix done right my ass:)

[19:59] <mncharity> lol

[19:59] <riffraff> plan9? we're starting to port pugs to alternative OSes?

[19:59] <mncharity> (a long lol - indeed)

[19:59] <avar> riffraff: No, perl 5.10 will support plan9 regexes:)

[19:59] <avar> (via cpan)

[19:59] <avar> mncharity: Yeah, that's the really cool thing too:)

[20:00] <avar> mncharity: I'm going to make re::engine::Perl::* stuff that uses the perl engine but provides alternative interfaces

[20:00] <avar> for instance by making captures be match objects

[20:00] <avar> me => me or someone else:)

[20:01] <mncharity> nifty. 

[20:01] <avar> Of course that might be somewhat hacky at times do to the code structuring of the perl engine itself, some things are probably easier by just forking it

[20:01] <riffraff> plan9 regexes.. url where I can learn something?

[20:02] <avar> http://swtch.com/plan9port/unix/man/regexp97.html

[20:02] <lambdabot> Title: regexp9(7) - Ported from Plan 9

[20:02] <avar> oh, and http://swtch.com/~rsc/regexp/regexp1.html :)

[20:02] <lambdabot> Title: Regular Expression Matching Can Be Simple And Fast

[20:02] <avar> http://search.cpan.org/search?query=re%3A%3Aengine&mode=all # but mostly this

[20:02] <lambdabot> Title: The CPAN Search Site - search.cpan.org

[20:02] <avar> it's not just plan9, you can have posix, pcre, whatever

[20:02] <avar> I've yet to finish ::TRE and I haven't started on ::Rx yet, if anyone's interested:)

[20:03] *** Aankh|Clone is now known as Aankhen``

[20:03] * mncharity looks over shoulder, wondering of whom avar speaks :)

[20:04] <avar> Anyone that's interested:)

[20:05] <avar> It would also be easy-ish to do C<use re::engine::Perl ':5.5'> and such:)

[20:05] <riffraff> avar, thanks

[20:07] <avar> It would be useful to have a generalized test suite for different regex implementations that could be included at make dist time

[20:07] <avar> http://search.cpan.org/src/AVAR/re-engine-Plan9-0.07/t/re_tests # I ripped these out of blead and cut out all the stuff that didn't work on plan9

[20:07] <mncharity> anyway, I'll silence for now my longstanding (year?) pitch "that the way you need to test re overrides, is by running them against the p5 test suite.  and if that is not trivial to do, then something is wrong.  and if it isn't tested, then, as always, it doesn't work.".  ;)

[20:07] <avar> use Regexp::Test::Plan9; ...

[20:08] <fglock> heh - I got a recruiting mail from google, I thought it was spam

[20:08] <avar> Yeah, that's what I've been doing sort of, like this: http://search.cpan.org/src/AVAR/re-engine-Plan9-0.07/t/subst.t

[20:08] *** SubStack joined
[20:08] <avar> But if you compare those with the core tests they're changed because the engine underneath isn't the same, so you have to edit them somewhat

[20:09] *** audreyt joined
[20:09] <mncharity> avar: every time my irc client renders Test:: Plan9, I see Test:<face with tongue hanging out the side>lan9.  :)

[20:09] <avar> hehe

[20:09] <mncharity> fglock: :)

[20:10] <riffraff> avar, now I see. Non-backtracking regexen a-la awk, right?

[20:11] <avar> yup

[20:11] <mncharity> re "because the engine underneath isn't the same, so you have to edit them somewhat", umm... I... can't... resist... "and that's the reason for trying it with the engine underneath the same". ;)

[20:11] <avar> mncharity: hrm, I don't understand

[20:12] <avar> riffraff: http://search.cpan.org/src/AVAR/re-engine-Plan9-0.07/t/pathological.t :)

[20:12] <lambdabot> http://tinyurl.com/ywddmh

[20:12] <riffraff> but IIRC non-backtracking are not as powerful as perl5 regexen, so you're telling me that perl5.10 uses a different engine depending on input?

[20:12] <avar> no, you can write cpan modules to replace the engine

[20:13] <riffraff> ah ok now everything makes sense :)

[20:13] <riffraff> thanks for taking time to explain

[20:13] <mncharity> if the plugin uses the usual p5 regex engine, then the tests don't need to be edited.

[20:13] <avar> so you can do package my::module; sub { use re::engine::POSIX; if "str" =~ /\(.*\)/ { ... :)

[20:13] <avar> and that'll be just as fast as the perl engine since it's resolved at parse time

[20:14] <mncharity> fglock: let's see, re architecture...

[20:16] <mncharity> no docs.  the backtracking api is all in the few BacktrackMacros.  basically it's

[20:19] <fglock> I read there is a "stream model" and a "two-continuation model" for backtracking (among others)

[20:20] *** dduncan joined
[20:21] <mncharity> it's a one continuation model

[20:21] <mncharity> success is returned up the stack

[20:22] <mncharity> as is failure (reserved return values)

[20:23] <mncharity> oh, except for the sequence/group/rule/match non-local failures, which are exceptions

[20:23] <mncharity> single argument passed down, the continuation.  the str/pos/etc/etc/etc are all local() vars.

[20:26] <pasteling> "mncharity" at 24.128.48.3 pasted "engine foundation" (32 lines, 1.2K) at http://sial.org/pbot/25360

[20:31] <mncharity> $noop is just because the if !defined($c) test has non-trivial performance cost, and code can be simpler if it can assume $c is always callable, rather than always doing   defined($c) ? $c->(whatever) : mumble;.  I'm actually not sure what the current level of support for $c->() is (ie, giving it an undefined continuation).  I first tried avar's code without the $noop.  Went boom.  It's a corner which needs to be cleaned up.

[20:32] <avar> if (ref $c eq "CODE") ?

[20:33] <mncharity> perhaps faster?  could be

[20:34] <mncharity> basically calling  $c->($noop)  is saying "let's see if the rest of the regex can succeed now".

[20:35] <mncharity> one uses $cfoo->($cbar)  when one wants the $cfoo to run, using $cbar as the "rest of the regex".

[20:39] <mncharity> so given an arbitrary sub which follows this convention, and calling $f->($g),  if g calls FAIL(), backtracking happens in f.  if g returns a value for which FAILED($value) is false, the regex is done and f has succeeded.  FAILED is (!defined($1)||(!ref($1)&&($1<=0)))  so undef and negative numbers.  the neg nums are just in case exceptions (for FAIL_GROUP, etc) turn out to be too expensive

[20:40] <mncharity> s/case exceptions/case using exceptions to implement FAIL_GROUP, etc, turns out to...

[20:42] <mncharity> if g calls FAIL_GROUP etc, an exception is thrown.  particular flavors of f subs may catch some of them.  eg, sub's which do groups will catch FAIL_GROUP and convert it to a simple FAIL.

[20:44] <mncharity> rephrase: one uses $cfoo->($cbar)  when one wants the $cfoo to run, with it considering $cbar as the "rest of the regex".

[20:45] <mncharity> fglock: how are you doing?

[20:46] <mncharity> anyone: just how unclear am I being?

[20:46] <ingy> hola

[20:46] <mncharity> hi ingy :)

[20:46] <ingy> hello mr charity

[20:47] <mncharity> looks like the n lost a descender there ;)

[20:47] <ingy> just trimmed it up a bit

[21:02] <fglock> mncharity: sorry - meeting (on perl6) - will backlog

[21:11] *** jedai joined
[21:23] *** perlbot joined
[21:24] <mncharity> fglock: np.  I got distracted too

[21:28] *** perlbot joined
[21:30] *** thoughtpolice joined
[21:31] *** prism joined
[21:35] <gaal> ouch, comment spam on the blog :(

[21:40] *** [particle] joined
[21:41] *** weinigLap_ joined
[21:54] *** Limbic_Region joined
[21:56] *** Aankhen`` is now known as Aankhen

[21:57] *** Aankhen is now known as Aankhen``

[22:15] <Limbic_Region> fglock++ # roadmaps are always nice

[22:27] *** ron__ joined
[22:29] <ron__> ?eval class Chozzle {has $a; method set_a { $::a = 1 }} $c.set_a;

[22:30] <gaal> you need $.a there, I believe

[22:30] <ron__> ?eval class Chozzle {has $a; method set_a { $::a = 1 }} my $c = Chozzle.new; $c.set_a;

[22:30] <Limbic_Region> evalbot has been dead for sometime

[22:31] <gaal> I wonder why it's dying; I revived it earlier today

[22:31] <ron__> I am trying to submit some bug reports and [email@hidden.address] does not seem to be reachable.

[22:32] <Limbic_Region> gaal - out of curiosity, does the config.yml for it have Test.pm in precompiled list?

[22:32] <Limbic_Region> gaal - I ask, because I think I have found the reason why Win32/MinGW was failing after the pad refactor went in

[22:32] <gaal> checking

[22:33] <gaal> (I wasn't aware that it was failing there.)

[22:33] <Limbic_Region> gaal - it isn't now

[22:33] <Limbic_Region> gaal - basically I started doing rmdir /s everywhere

[22:33] <Limbic_Region> and one of the files I removed was config.yml and magically it started working

[22:34] <gaal> feather isn't responding to ssh :(

[22:34] <Limbic_Region> but I just recently added in Test.pm to config.yml again and now it is apparently b0rk again

[22:34] <Limbic_Region> doing a realclean now

[22:34] <gaal> nor to ping for that matter

[22:34] <Limbic_Region> if it still fails I will remove it and try yet again

[22:34] <Limbic_Region> if it works after removing it, I will know for sure

[22:35] <Limbic_Region> yes, feather appears to be offline

[22:35] *** REPLeffect joined
[22:35] <gaal> ron__: in the meanwhile please write to p6-compiler -- or just mention them here.

[22:37] <ron__> thx - I will try back in a bit and if feather is still down I will probably write to p6-compiler.  thx again for checking

[22:37] *** ron__ left
[22:39] *** japhb joined
[22:42] <thoughtpolice> grr. blogger's compose mode is seriously starting to get on my nerves. :(

[22:42] *** Qjimbo joined
[22:42] <Qjimbo> Hi

[22:42] <Qjimbo> I've been trying to install ilbot on my server but the svn link doesn't appear to be working

[22:44] <Tene> Qjimbo: svn.pugscode.org ?

[22:45] <Qjimbo> yeah

[22:45] <Qjimbo> b03s45le irclog # svn co http://svn.pugscode.org/pugs/misc/irclog/

[22:45] <Qjimbo> svn: PROPFIND request failed on '/pugs/misc/irclog'

[22:45] <Qjimbo> svn: PROPFIND of '/pugs/misc/irclog': could not connect to server (http://svn.pugscode.org)

[22:45] <Limbic_Region> is svn.pugscode.org hosted on feather?

[22:45] <Limbic_Region> we just went through that

[22:45] <Tene> Yes.

[22:45] <Limbic_Region> feather is apparently offline ATM

[22:45] <Qjimbo> aah I see

[22:46] <Qjimbo> any idea when it will be back?

[22:46] <Tene> We don't know why it's down, so no. ;)

[22:51] <Limbic_Region> gaal - so far, everything is pointing to an attempt at precompiling Test.pm

[22:51] <Limbic_Region> doing last recompile now

[22:52] <gaal> Limbic_Region: okay, any further hints would be appreciated. i'm off to bed (and don't have a windows buid system handy) but please do keep us posted

[22:53] <Limbic_Region> gaal - sure, but I have previously nopasted the error

[22:53] <Limbic_Region> gaal - I guess I will just repost that

[22:57] *** wolverian joined
[22:58] *** PerlJam joined
[22:59] *** Juerd joined
[22:59] *** diakopter joined
[23:02] <Limbic_Region> hey Juerd, feather was offline for a while

[23:03] *** ron___ joined
[23:03] <ron___> ?eval say 'running'

[23:04] *** ron___ left
[23:06] *** pbuetow joined
[23:07] <Limbic_Region> @tell gaal it certainly was the precompiled Test.yml - see http://sial.org/pbot/24983

[23:07] <lambdabot> Consider it noted.

[23:08] <Limbic_Region> @tell audreyt the problem I encountered after the pad refactor on Win32/MinGW http://sial.org/pbot/24983 that magically went away when I indiscriminently deleted files and directories and did an svn up came back again as soon as I added Test.pm to the list of precompiled modules in config.yml - don't know why, but that's the problem

[23:08] <lambdabot> Consider it noted.

[23:09] <Qjimbo> haha cool bot

[23:09] <Limbic_Region> could anyone who has a current pugs build check to see if Test.pm is in their list of precompiled modules in config.yml ?

[23:10] * Limbic_Region assumes it is a Win32/MinGW problem but perhaps not

[23:16] <Qjimbo> aaah pugscode is back

[23:22] <Qjimbo> "Install all dependencies, among them are Config::File, CGI, DBI, Net::IRC, CGI::Carp, Encode::Guess, HTML::Entities, HTML::Template and Regexp::Common" how would I go about doing this?

[23:22] <Qjimbo> I'm using gentoo

[23:23] <moritz> Qjimbo: as root, cpan -i Config::File

[23:23] <moritz> etc

[23:23] <moritz> Qjimbo: what are you about to install?

[23:24] <moritz> in debian, some of the modules are prepacked, libconfig-file-perl for Config::File etc.

[23:24] <Qjimbo> ooh just the irclogbot that mortiz made

[23:25] <Qjimbo> aah I see

[23:25] <thoughtpolice> is there a general way to specify a function which takes a variable number of blocks? basically 'variadic-closure' parameters.

[23:26] <moritz> Qjimbo: atm you shouldn't use ilbot2.pl

[23:26] <thoughtpolice> what would also work is a way to specify how to execute a given block; i.e. something like '$b.exec'

[23:27] <moritz> ilbot.pl will do just fine

[23:27] <Qjimbo> oh ok =)

[23:27] <Qjimbo> it'll be cool if you decide to support more than one channel

[23:28] <Qjimbo> I'd love to use this on my whole irc net (only 2 channels at the moment so I should just be able to run 2, but you never know about future growth =)

[23:29] <moritz> Qjimbo: you can use two instances of ilbot, the cgi scripts support multiple channels 

[23:29] <avar> thoughtpolice: $b() ?

[23:30] <Qjimbo> ooh right, so I can use the same database?

[23:30] <moritz> Qjimbo: yes

[23:30] <Qjimbo> cool ^^

[23:30] <moritz> Qjimbo: call ilbot as perl ilbot.pl <nick> <server> <channel>

[23:31] <Qjimbo> right

[23:31] <thoughtpolice> avar: oh, yes. :)

[23:31] <thoughtpolice> ty

[23:32] <thoughtpolice> avar: I must have had a quick brain fart. :p

[23:34] <moritz> Qjimbo: I think the databease def is not up date.. give me 15 more minutes and I'll upload a new one

[23:34] <Qjimbo> ooh ok

[23:34] <Qjimbo> you mean the .sql file?

[23:34] <moritz> yes

[23:34] <Qjimbo> right

[23:35] <avar> who maintains the irc log thingy again?

[23:35] <moritz> if you run both ilbot.sql and add_id.sql in that order everything should be fine

[23:35] <moritz> avar: /me

[23:36] <Qjimbo> oh right ok

[23:36] <moritz> I didn't knew I'd ever get that many users ;)

[23:37] <Qjimbo> I like the way it uses mysql =)

[23:37] <Qjimbo> very handy for what I plan to do eventually, which is scan the logs for links to topics on my forum and have the chat that followed displayed on the forum

[23:38] <Qjimbo> if that makes any sense

[23:38] <moritz> you can basically achive that by changing revision_linkify and synopsis_linkify in IrcLog.pm

[23:39] <moritz> and chaining more functions like that

[23:39] <Qjimbo> well I was thinking of just using a LIKE %topiclinkhere% command on the database

[23:40] <moritz> so you don't want to display them in the normal links?

[23:40] <Qjimbo> oooh

[23:40] <Qjimbo> you mean have it so there's a link from the topic to the irc log, yeah that'd be nifty

[23:41] <Qjimbo> might be easier to just rewrite the linkgenerating routine in php though if it's based off an id in the database or something

[23:41] <moritz> Qjimbo: s/php/perl/ ;-)

[23:41] <avar> moritz: ew net::irc :)

[23:41] <moritz> that's what out.pl does

[23:41] <Qjimbo> lol

[23:41] <meppl> good night

[23:43] <moritz> avar: you can use the Bot::BasicBot based version if you don't like Net::IRC ;)

[23:46] <moritz> Qjimbo: now an up to date version of ilbot.sql is in the svn, no need for add_id.sql any more

[23:46] <Tene> Is that the one that crashes on nick changes?

[23:48] <moritz> Tene: that's the one that formerly crashed on nick changes... for now it just 'return undef' before the crashing line...

[23:48] <Tene> 'kay

[23:49] <moritz> Tene: I need to figure out how to do that properly, but currently I don't have the time

[23:49] <moritz> if I'm bored tomorrow... ;)

[23:51] <moritz> anyway, sleep&

