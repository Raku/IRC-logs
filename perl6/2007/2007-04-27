[00:11] *** stef__ joined
[00:28] *** coke joined
[00:28] * coke wonders if the range behavior in S03 is fer real. =-P

[00:29] <avar> which?

[00:34] <coke> that you can pull from either end, and the behavior depends on which end you pull form.

[00:35] <avar> example?

[00:37] *** stevan__ joined
[00:44] <coke> ... the one in S03. =-)

[00:45] <coke> http://perlcabal.org/syn/S03.html#Range_semantics :: $range = 1..^42.5;

[00:45] <lambdabot> Title: S03

[00:57] *** geoffb joined
[01:03] <TimToady> if by "for real" you mean implemented in pugs, I don't think pugs even implements range objects yet.

[01:10] <coke> I actually kind of meant, "is larry really that crazy." =-)

[01:10] <coke> I'm trying to craft a PIR implementation of that right now.

[01:11] <coke> I had started down the happy path of "ranges must be like iterators", but now I'm just kind of huddled in the corner crying. =-)

[01:11] <coke> to clarify, it doesn't say this, but if you try to shift or pop a value after the range is exhausted, do you just get undef?

[01:12] <TimToady> you get a Fail, which is a variety of undef that includes what went wrong.

[01:12] <TimToady> an "unthrown exception"

[01:13] <coke> Ok. Given the current state of perl6 on parrot, that's "Undef". =-)

[01:13] <Tene> coke: "pull" doesn't appear in S03, as far as I can tell

[01:14] <coke> ... ok.... (did I say pull somewhere?) Oh. right. "which end you pull from" == "do you shift or pop"

[01:14] <Tene> Oh.

[01:15] <Tene> I really should have been able to figure that out.

[01:16] <coke> I wasn't being particularly precise.

[01:16] <coke> TimToady: what if you check "min" after you're exhausted... does that also just Fail?

[01:28] *** laye joined
[01:29] *** dolmans joined
[01:31] <laye> msg nickserver info

[01:33] <TimToady> coke: don't think so, I'd just expect it to return a min greater than its max, which if you turned it into a new range would just be a null range.

[01:33] *** agentzh joined
[01:33] <TimToady> oh, and I guess it's specced as Failure, not Fail.

[01:34] * TimToady .oO(just what we need, a computer that remembers all your failures... :/ )

[01:35] *** avar changes topic to: Upgrade to YAML::Syck 0.85 before smoking | http://pugscode.org | http://sial.org/pbot/perl6 | ?eval [~] <m oo se> | We do Haskell, too | > reverse (show (scanl (*) 1 [1..] !! 4)) | "Perl 6 Today" video from YAPC::Asia: http://xrl.us/vw3p

[01:37] *** krishna joined
[01:38] * agentzh has restricted himself via ulimit on feather.

[01:39] <agentzh> does anyone know how to restart svnbot?

[01:43] *** kunwon1 joined
[01:47] *** [particle] joined
[01:54] *** TimToady joined
[01:58] <agentzh> oh, i'm not a channel operator...can't invite svnbot6...

[01:59] *** TimToady joined
[02:00] *** bsb joined
[02:02] <agentzh> &

[02:02] *** agentzh left
[02:04] *** TimToady joined
[02:09] *** TimToady joined
[02:18] *** mdiep joined
[02:30] <avar> avar@Arsia:/var/src/pugs.svn$ ./pugs -CPIR -e 'say "ook"'

[02:30] <avar> pugs: user error (VError (VStr "Compile error -- invalid Pugs.PIL1.PIL_Expr: Stmts (Syn \"=\" [Var $removed,Ann (Pos (MkPos \"<prelude-pir>\" 17 18 17 41)) (App (Var &substr) Nothing [Ann (Pos (MkPos \"<prelude-pir>\" 17 30 17 34)) (Var $str),Ann (Pos (MkPos \"<prelude-pir>\" 17 36 17 38)) (App (Var &prefix:-) Nothing [Val (VInt 1)]),Ann (Pos (MkPos \"<prelude-pir>\" 17 40 17 41)) (Val (VInt 1))])]) (Var $removed)") [(MkPos "-e" 1 1 1 1)])

[02:32] *** stevan_ joined
[02:32] <coke> ... damnit. I got distracted by talisker. no more range for me this evening. ^_^

[02:32] <avar> "Version: 6.2.13 (r16135)"

[02:34] <Tene> talisker--

[02:38] *** krishna_ joined
[02:38] <coke> ~~ # nite

[02:39] *** bonesss joined
[03:00] *** elmex_ joined
[03:01] *** ariks joined
[03:16] *** chr1s_ joined
[03:35] *** bonesss joined
[03:37] *** mako132_ joined
[03:38] *** stevan__ joined
[03:47] *** kunwon1 joined
[04:00] *** amnesiac joined
[04:10] *** Therac-25 joined
[04:23] <pasteling> "bsb" at 203.214.67.82 pasted "make break" (5 lines, 257B) at http://sial.org/pbot/24544

[04:59] *** buetow joined
[05:17] *** devogon joined
[05:19] *** Aankhen`` joined
[05:30] *** rfordinal joined
[05:42] *** rubyroshi joined
[05:43] *** rubyroshi left
[06:08] *** buetow joined
[06:30] *** lisppaste3 joined
[06:31] *** stevan_ joined
[06:36] *** iblechbot joined
[06:38] *** [particle] left
[06:42] *** myavuzselim joined
[06:43] *** myavuzselim is now known as nonick

[06:43] *** nonick is now known as nonickname

[06:44] *** nonickname is now known as ank

[06:46] *** ank is now known as nickyok

[06:48] *** nickyok_ joined
[06:49] *** nickyok_ is now known as nickyok

[07:30] *** BooK joined
[07:32] *** jisom joined
[07:40] *** [particle] joined
[07:45] *** the_dormant joined
[07:47] *** SubStack joined
[08:03] *** larsen_ joined
[08:07] *** drbean_ joined
[08:34] *** coke_ joined
[08:37] <dduncan> seen bsb

[08:37] <bsb> dduncan: here

[08:38] <dduncan> I don't think your s/::/-/ change did anything useful

[08:38] <dduncan> lots of other module makefiles still have :: in their name ... do they give you any trouble?

[08:38] <dduncan> afaik, the name in the makefile is normally the package name of the main module, not the distro file name

[08:38] <bsb> no, although I haven't made clean to tell

[08:39] <bsb> I've not used Module::Install much myself, I was going from the cpan docs...

[08:39] <dduncan> now, I don't think your change to LKT hurt anything, but I saw it as unnecessary, and your problem was probably something else

[08:40] <bsb> http://search.cpan.org/~adamk/Module-Install-0.65/lib/Module/Install.pod#name

[08:40] <lambdabot> Title: Module::Install - Standalone, extensible Perl module installer - search.cpan.org, http://tinyurl.com/yrd67m

[08:40] <dduncan> I will not reverse it, however, given that some other ext/ use - too, though most that I sampled used ::

[08:40] <dduncan> looking ...

[08:41] <bsb> I'm not sure what other environment factors might be involved (make version, EMM, etc)...

[08:41] <dduncan> more generally speaking, if there is an actual "best practices" declaration about whether - or :: is better for this, I will follow that ...

[08:41] <bsb> I'll try another ext with name =~ /::/

[08:41] <dduncan> generally speaking, I follow everything in PBP that I don't have an express reason to do otherwise

[08:41] <dduncan> it didn't speak on this issue

[08:44] <bsb> I just tried the same in Text-Glob and got the same error

[08:44] <bsb> Makefile:520: *** target pattern contains no `%'.  Stop.

[08:44] <dduncan> whereas, I get no such errors

[08:45] <dduncan> but if I did, I'm sure the problem isn't related to what is in 'name'

[08:45] <dduncan> I think the only purpose of 'name' is to help the CPAN indexer

[08:45] <dduncan> not the build system

[08:46] <bsb> I just did s/::/-/ in Text::Glob and the make error went...

[08:47] <dduncan> afaik, using :: in name is the usual practice in CPAN distros, and so I did likewise

[08:47] <bsb> DISTVNAME = Text::Glob-6.00  [..later..]  tardist : $(DISTVNAME).tar$(SUFFIX)

[08:48] <bsb> It looks that way, and I've not had problems before so I don't know what would be casuing it

[08:48] <bsb> pmvers ExtUtils::MakeMaker

[08:48] <bsb> 6.30_01

[08:48] <bsb> make -v

[08:48] <bsb> GNU Make 3.81

[08:49] <dduncan> the :: have been in the makefiles for a long time, and so if problems only started appearing recently, then the problem is somewhere else ... unless :: are officially deprecated, and I'm fairly sure they're not

[08:50] <dduncan> all I can suggest is that you try building from a clean repository ... maybe try building the Pugs-6.2.13 tarball as a test case

[08:50] <bsb> if no one else has trouble then I'm happy for you to revert the change

[08:51] <dduncan> my preference is for people to revert their own changes if they change their minds

[08:51] <dduncan> reverting other people's changes can be bad form

[08:51] <dduncan> and I'm currently ambivilent about it, so I won't do it without prompting

[08:52] <dduncan> or rather I should say I have no preference

[08:54] <bsb> I'll try a clean checkout first.  If I can make ext it should be quick

[08:58] <dduncan> bsb, do you use svk?

[08:58] <dduncan> if so, clean checkouts are a quick affair ... if you use svn, that's a big server hit by contrast

[08:59] <dduncan> well, I'm off, 2am and all ...

[08:59] *** dduncan left
[09:11] *** franck__ joined
[09:16] *** diakopter left
[09:20] *** drbean joined
[09:27] *** ruoso joined
[09:31] *** chris2 joined
[09:35] *** bsb left
[09:36] *** benny joined
[09:57] *** demq joined
[10:12] *** RHainsworth joined
[10:12] *** RHainsworth left
[11:17] *** polettix joined
[11:44] *** mako132_ joined
[11:55] *** fglock joined
[12:02] *** Yaakov joined
[12:04] <Yaakov> Hello, audreyt.

[12:04] *** iblechbot joined
[12:04] *** ElPenguin joined
[12:10] *** ofer joined
[12:16] <Yaakov> Does anyone know the best way to get GHC running under OS X?

[12:17] <kolibrie> generally it is best to start with a binary build, then compile a new one if you need a more recent version

[12:18] <ElPenguin> that's the only way to do it since ghc is written in haskell

[12:18] <ElPenguin> beware it takes a lot of memory to compile, so don't mount it on a memory filesystem

[12:18] <ElPenguin> unless you have 2gb

[12:19] <chris2> swappetyswap

[12:19] <Yaakov> Well, in my foolhardy and ignorant fashion I have typed "sudo port install ghc" and it is doing *something*.

[12:20] <chris2> it worked for me

[12:20] <Yaakov> Maybe it won't explode.

[12:20] <chris2> but it takes its time

[12:21] <kolibrie> it's the kind of thing to let your computer do overnight

[12:22] <chris2> if you like to sleep for three days straight given an poor ibook :-)

[12:22] *** HiTech69 joined
[12:22] <Yaakov> Well, this one is a 1.25GHZ PowerBook.  I think I will start it on the Dual 2GHz G5.  It has 4GB of RAM.

[12:22] <chris2> yeah

[12:23] <chris2> use the g5

[12:23] <chris2> i did it with 1.25g ram

[12:23] <chris2> but 1.25ghz ibook g4

[12:23] <Yaakov> I have 1GB.

[12:23] <Yaakov> But the same machine otherwise.

[12:24] <Yaakov> I'll just be patient. :)

[12:26] <chris2> :)

[12:31] *** DarkWolf84 joined
[12:33] <Yaakov> Heh.  Perl 5.8 is a GHC dependency.

[12:41] *** gnuvince joined
[12:44] <coke_> I thought *parrot* took a while to build. =-)

[12:44] *** coke_ is now known as Coke

[12:44] <Yaakov> gcc 4.0 is also a dependency...

[13:01] <allbery_b> yep, the Evil Mangler is written in perl

[13:06] <DarkWolf84> Interesting topic

[13:08] <gnuvince> For the redditors in here, you can vote up audreyt++'s Perl 6 Today talk video: http://programming.reddit.com/info/1lbbr/comments

[13:08] <lambdabot> Title: Audrey Tang - Perl 6 Today (Google Video) (reddit.com)

[13:08] <gnuvince> </shameless attempt at getting more karma>

[13:09] *** jerrylee joined
[13:12] <avar> the up/down rating links aren't regular links *annoyance*

[13:13] <ayrnieu> avar - submit the URL (not the /comments one, but http://video.google.com/videoplay?docid=-3876155376103839772&hl=en ); reddit will take it as an upvote.

[13:13] <lambdabot> Title: Audrey Tang - Perl 6 Today - Google Video, http://tinyurl.com/2j79ep

[13:13] <avar> eek, long url

[13:14] *** foof joined
[16:17] *** ilogger2 joined
[16:17] *** buetow joined
[16:19] <Yaakov> I guess I will run it overnight on the PowerBook.

[16:20] *** ilogger2 joined
[16:21] *** veritos joined
[16:21] <veritos> morning

[16:22] <Yaakov> afternoon

[16:33] <DarkWolf84> for me is evening

[16:33] <DarkWolf84> :)

[16:34] <masak> "good undetermined time of day" doesn't quite have that special ring to it...

[16:34] <Yaakov> Good $local_time_of_day!

[16:36] <veritos> 'good ' . scalar localtime

[16:37] <Yaakov> veritos: But that's not a fuzzy time.

[16:38] <[particle]> good +-4hrs

[16:38] <TimToady> *.tz.good

[16:38] <integral> 'good ' . ((localtime)[2] > 12 ? 'afternoon' : 'morning')

[16:38] <Yaakov> integral: Can you work Math::Fuzzy into that?

[16:39] <offby1> in #emacs they just say "yo" or "'sup" and be done with it.  Those are universal.

[16:39] <TimToady> when I say "sup" it does an svn update...

[16:39] <Yaakov> Heh.

[16:39] * integral can't see that on search.cpan.org, is there search.cpan6.org yet?

[16:39] * [particle] considers rand()..rand() and wonders what min and max might be :)

[16:41] <TimToady> hmm, I wonder if rand should be 0-ary

[16:42] <TimToady> always meaning 1.0.rand

[16:42] <offby1> something about rand in perl5 irks me ... I can't remember what though

[16:42] <offby1> it caused me to write a note in my camel book!

[16:42] <TimToady> 7.0.rand would be rand * 7

[16:42] <Yaakov> integral: Hrm.  It is a Cocoa library, it seems.

[16:42] <Yaakov> integral: You will have to use Mac::Glue.

[16:42] <TimToady> and 7.rand would be (0..6).pick

[16:43] <[particle]> and (1,2).rand ?

[16:43] <geoffb> TimToady: that dwim makes it hard for $foo.rand to dwim correctly

[16:44] <TimToady> yeah, should just mean rand * 7, and you write 7.rand.int for the other

[16:44] * geoffb having to deal YET AGAIN with XS code that tries to dwim IV v. NV, and trips over NV + NV = IV if the result is an exact integer in range

[16:45] <avar> XS will eat your family!

[16:45] <TimToady> still bugs me that ^7.pick doesn't work

[16:45] <avar> speaking of which, what is planned for xs-ish stuff for p6?

[16:45] <TimToady> 'cause it parses as ^(7.pick)

[16:45] <TimToady> some variant of Native Call Interface

[16:46] <geoffb> How should 0..^7.pick parse.  Same way?

[16:46] <TimToady> same problem

[16:46] <geoffb> bah

[16:46] <TimToady> 0..^(7.pick)

[16:46] <TimToady> nothing is tighter than postfix dot

[16:46] <geoffb> gotcha

[16:47] *** avar joined
[16:47] <TimToady> ?eval pick ^7

[16:48] <TimToady> looks like it's still computing that 1..* from the last ?eval :(

[16:48] <geoffb> I don't see evalbot in the channel user list, actually

[16:48] <veritos> lol

[16:48] <TimToady> or perhaps it has solved the halting problem.

[16:48] <geoffb> never started after feather got hupped?

[16:49] <Yaakov> My programs solve that problem with regularity.

[16:51] <DarkWolf84> where is evalbot btw

[16:51] <TimToady> examples/network/evalbot

[16:51] <TimToady> (just did the find myself...)

[16:51] <DarkWolf84> i know the code is there

[16:52] <DarkWolf84> but why it don't respond

[16:52] <TimToady> it's in the nether world

[16:52] <DarkWolf84> :>

[16:52] <TimToady> we need a medium to call it up

[16:52] <Yaakov> It may be in an uninstantiated state.

[16:52] <rindolf> Hi all.

[16:52] <rindolf> Hi TimToady 

[16:52] <Yaakov> TimToady: Perhaps a large would be more effective.

[16:53] <TimToady> rofl

[16:53] <DarkWolf84> evalbot don't have many sins (bugs)

[16:53] <DarkWolf84> :P

[16:53] <TimToady> as far as I know, it has only one sin

[16:54] <TimToady> pugs> say sin 1

[16:54] <TimToady> 0.8414709848078965

[16:54] <DarkWolf84> ahaha :>

[16:54] <DarkWolf84> LOL

[16:54] <demq> doesnt sin have a cos?

[16:55] <TimToady> "...but if anyone has kept the whole law but stumbles in one point, he is guilty of all..."

[16:55] <offby1> sin has a cost, yes

[16:56] <DarkWolf84> maybe it has a cos not cost :)

[16:56] <TimToady> maybe it was a cosθ 

[16:56] <demq> yeah its a cos, cos tan.

[16:57] <geoffb> We've all been transported to #pun, apparently

[16:58] <demq> 'pun my manners

[16:58] <TimToady> actually, θ  was likely pronounced as an aspirated t originally

[16:58] <DarkWolf84> maybe the eavalbot is retired actualy

[16:59] <TimToady> has it got tired more than once?

[16:59] <[particle]> no, it's tires are worn.

[16:59] <demq> it tried more than once

[17:00] <[particle]> ?evil sin 1

[17:00] <TimToady> tͪsk, tͪsk

[17:00] <demq> . o O ( Why are they always picking on us lefties )

[17:01] <geoffb> Because you're sinister?

[17:01] <TimToady> a dyslexic is a Greek with a broken right hand

[17:01] <geoffb> LOL

[17:01] <demq> heh

[17:04] <demq> timtoady is there anything left that i can do to make the p5 engine closer to the p6 semantics?

[17:04] <DarkWolf84> moose

[17:04] <TimToady> implement the /p6 modifier?

[17:04] <TimToady> :

[17:04] <TimToady> :)

[17:04] <demq> heh.

[17:05] <demq> i thought avar was all over that?

[17:05] <TimToady> basically /p6 would turn off all string interpolation

[17:05] <TimToady> and rely on the re engine for variable processing

[17:05] <demq> oh yes, then avar has been working on that. sortof

[17:05] <DarkWolf84> oh right

[17:06] <DarkWolf84> the regex interpolation

[17:06] <demq> i think the plan is to pass in an AV of vars. long termish.

[17:06] <TimToady> it's the Big Fat Design Bug in perl 5...

[17:06] <demq> then let the regex engine do what it likes. is that not good enough?

[17:07] <TimToady> why do you need an AV of vars?

[17:07] <demq> er.

[17:07] * demq pleads the 5th, or is it the 4th.

[17:08] <TimToady> just don't plead the 2nd...

[17:08] <demq> i think its just cause it what already happens.

[17:08] <TimToady> that's the Big Fat Design Bug!!!

[17:08] <demq> except that current the vars are joined before regcomp gets called.

[17:08] <demq> currently

[17:08] <TimToady> the lexer should just keep it's cotton pickin' hands off the regex language

[17:09] <demq> ok.

[17:09] * DarkWolf84 is waiting for cristmas

[17:10] <demq> i can have a look.

[17:11] <demq> anything else? i was more thinking along the lines of \v and \h and stuff. i mean are you ok with \R?

[17:12] <TimToady> well, it's okay in p5.  it won't get into p6, since it violates a fundamental regularity there.

[17:13] <TimToady> well, not so fundamental, but a regularity nonetheless

[17:13] <TimToady> but p5 already has things like \A that violate it

[17:13] <TimToady> so what's one more...

[17:13] <demq> ok. i can understand that.

[17:14] <TimToady> and the p5 to p6 translator will just have to translate \R to \n

[17:14] <demq> \R is actually asymetrical in behaviour.

[17:15] <TimToady> as long as \n encompasses \R, it's probably still the right translation

[17:15] <demq> in the sense that not \R is the same as \V

[17:15] <TimToady> nor is \n

[17:15] <TimToady> but p6 defines \n as logical newline on all the major platforms, basically.

[17:16] <demq> so is there a \N?

[17:16] <TimToady> sure

[17:16] <demq> and is the same as \V?

[17:16] <TimToady> no

[17:16] <demq> shouldnt it be?

[17:16] <TimToady> carriage return is arguably not vertical whitespace

[17:17] <TimToady> but \n recognizes CRLF among other things

[17:17] <demq> its in the \v spec for parrot tho?

[17:18] <demq> cause if when negated its different from \V then IMO \j and \J make more sense (for p5 with a more p6 behaviour)

[17:19] <demq> i couldnt find a rationale for \v and \h, so i just took the definition that particle provided. 

[17:19] <demq> should i change it to remove \r from \v?

[17:19] <TimToady> I tend to think that \r is horizontal whitespace, albeit negative...

[17:20] <demq> . O ( macintosh uses \r as \n doesnt it? )

[17:20] <TimToady> when I say \r I mean \x0d

[17:20] <demq> what you say makes sense to me on one level.

[17:20] <demq> yes i mean \x0d too. :-)

[17:20] <TimToady> but I see the other side too

[17:21] <TimToady> CR is rarely used except in conjunction with LF

[17:21] <allbery_b> os9 and earlier used \x0D as newline, yeh

[17:21] <TimToady> but there are uses for it

[17:21] <allbery_b> osx uses \x0A, since it's more or less unix under the hood

[17:21] <demq> im ok with either. id say that if \x0d isnt in \v then it should be in \R which should really be renamed to \j so it can be reversed to \J.

[17:21] <TimToady> which is probably why Unicode ignored older macs with \R

[17:21] <avar> TimToady: there's more than just getting the tokenizer to leave the regex alone and stopping interpolation, you still have to map grammars to p5 somehow

[17:22] <avar> which I guess you could do with packages and telling a regex to call its methods when it needs a rule/token/regex specified in it

[17:23] <TimToady> well, that's essentially how p6 does it, by unifying grammars and classes

[17:23] <demq> btw unicode defines \0xd as a lineboundary.

[17:23] <TimToady> I don't like this business of re-inventing grammars inside of regexland

[17:23] <avar> I've been cleaning up some of the stuff I'll need to get p6-ish engines to work on p5, I'm doing what I need for :rw next for instance

[17:24] <TimToady> well, that would be a good argument for keeping it in \v

[17:24] <avar> TimToady: You can make an engine now that supports scalars, like if ($x =~ sub {}), that'll get you pretty far..

[17:24] <demq> which leaves \R (p6 \n) assymetrical.

[17:24] <TimToady> arguably it could be in both \v and \h

[17:24] <avar> just by that you can have yer closures and everything without p5 mucking with it

[17:24] <avar> demq: can you think of anything else?

[17:25] <demq> adding it to \h is ok. i can do that easily.

[17:26] <avar> if ("str" =~ [ [ qw(ignorecase continue 3rd) ] => \&matcher ]) {}

[17:26] <demq> i was thinking that the whole \r \n thing is conceptually quite similar to unicode case folding.

[17:26] <TimToady> note that :rw is considered optional for p6 if it causes too much pain to the implementors

[17:26] <avar> it's trivial-ish to implement on p5, I implemented it already with some obscure failing tests

[17:27] <avar> but basically you treat the string being matched against as a scalar and do what substr does

[17:28] <avar> is <foobar> in p6 regex always a method call basically? Well, that or CODE that the regexp language executes itself..

[17:28] <TimToady> well, but some implementations of P6 may find it difficult to map one string into the middle of another.

[17:29] <avar> as a simple example, how would I make a rule implemented as a function in p6 that does what token { a* } does?

[17:29] <TimToady> yes, basically always a method, with an implicit invocant representing the current match context

[17:29] <avar> you get some ref to the string, set .pos ?

[17:29] <avar> it should be noted that I don't know p6:)

[17:29] * offby1 duly notes

[17:30] <TimToady> the match context has to be established by the outermost invoked rule and propagated downward.

[17:30] <TimToady> there's more to it than just the current position in the current string

[17:31] <avar> yeah, you might want to set match vars and whatnot, call other rules..

[17:31] <TimToady> basically it represents the dynamic scope of the match

[17:32] <TimToady> and it looks like "self" to the closures embedded in the regex

[17:32] <avar> But I've found it pretty hard just from reading s05 to understand what I'll need to do to get p6 semantics working in a non-sucky way on p5. Maybe I should look at some of the engines people have been writing:)

[17:32] <avar> ah

[17:32] <avar> that or test cases, any reading suggestions?

[17:33] <TimToady> fglock probably has a better notion of that

[17:33] <avar> I should bug him:)

[17:33] <avar> but in blead now you can construct an object of your choosing, match that against a custom engine and set $1, $& et al to be objects. not %+ and %- though currently, but working on it

[17:34] <demq> that reminds me i wanted to make it possible to use nested numbering on the capture buffers.

[17:34] <avar> http://sial.org/pbot/24554

[17:34] <lambdabot> Title: Paste #24554 from Someone at 85.197.228.236

[17:35] <TimToady> I consider %+ and %- to be a botched API

[17:35] <avar> demq: stuff like like that looks easy-ish when you can use the p5 engine but with your own exec/comp funcitons

[17:35] <demq> eek.

[17:36] <avar> any reason you can't do it with the current regex opcode? 

[17:36] <TimToady> parallel arrays are usually a code smell

[17:36] <avar> how about ->from and ->to

[17:36] <avar> TimToady: ya

[17:36] <TimToady> submatches should look like objects, yes, with such methods

[17:36] <avar> something like $/ in p5 would be nice, you currently have to use ${^MATCH} for that

[17:36] <TimToady> and I can never remember whether + comes before - or vice versa...

[17:37] <avar> %+ is the first? named capture, values in %- are arrays of all captures with a specific name

[17:37] <TimToady> well, if you're gonna get serious about it, the $/ stand-in had better be lexically scoped.

[17:37] <avar> @{ $-{ook } }

[17:37] <lambdabot> Maybe you meant: . v

[17:38] <demq> lexically and not dynamically like $1?

[17:38] <avar> TimToady: it's not, and it really can't be without some *major* changes

[17:38] <TimToady> $1 is lexical in P6

[17:38] <avar> demq: amiright?

[17:38] *** jisom joined
[17:39] <avar> the only solution I can think of is to bind alter a qr// object you're matching against

[17:39] <TimToady> yeah, at some point you cut it off and say you can't get the rest of P6 without P6...

[17:39] *** edenc joined
[17:39] <TimToady> but we're talking about emulating semantics, and at least the match object should be lexical

[17:39] <avar> my $re = qr/(<[a .. z]>)*/; if ("ookoekaeou" =~ $re) { $re->[0]->from }

[17:40] <TimToady> even if $1 doesn't map to it and you have to write ${^MATCH}[0] or some such

[17:40] <demq> hrm, making matches lexically scoped, if i understand what that means properly is a simplification, and not a complication. as far as i understand things.

[17:40] <avar> the "match object" in p5 is just $& currently

[17:40] *** VanilleBert joined
[17:41] *** fglock joined
[17:41] <TimToady> well, if I recall, p5 is most of the way to having $_ be lexical, so other magicals could also do that.

[17:41] <avar> TimToady: In case you didn't know ${^MATCH} is just another name for $& that doesn't trigger sawampersand, there are aliases for $` and $' too

[17:41] <avar> $_ is lexical

[17:42] <avar> But to be honest I don't know how much work it is, all that code does PM_GETPM which operates on the dynamic scope currently, don't know how hard it would be to make it a lexical

[17:42] <TimToady> $! is also lexical in P6

[17:43] <avar> is anything not lexical?:)

[17:43] <demq> i dont see why it would be hard.

[17:43] <TimToady> um...

[17:43] <demq> the tricky part in the current implementation is dealing with PL_curpm in the first place.

[17:44] <demq> bypassing it seems to me to be quite simply.

[17:44] <avar> yup

[17:44] <demq> er, theoretically.

[17:44] <TimToady> anything that's not lexical in P6 tends to be named $*PID and such

[17:44] <TimToady> nearly all the punctuation vars are just gone

[17:45] <demq> i guess when i say simple i mean from the pov of the engine, not the toker/lexer. i have no idea what would be involved there. i guess that could be hard.

[17:45] <avar> Not to steamroll all over your fancy new language but why aren't $* and such just READONLY scalars in as scope that's considered to be the scope before your main scope?

[17:46] <avar> Sort of like you'd to it in scheme iirc, everything is just a nested lexical let binding:)

[17:46] <avar> but I haven't been involved in p6 design so I'm not familiar with the tradeoffs, so please excuse any dumb questions:)

[17:47] <avar> demq: Yeah, it's simple for the engine of course, it doesn't have to care :)

[17:48] *** VanilleBert left
[17:48] <avar> s/main scope/top level scope/

[17:48] <TimToady> avar: well, that's more or less what they are, but not necessarily read only

[17:49] <TimToady> you can modify %*ENV for instance

[17:49] *** OwlEye joined
[17:49] <demq> im worried about what you said about %+ and %-.

[17:49] <TimToady> but we don't automatically import global vars into the file's lexical scope.

[17:49] <avar> so perl -e 'say $*PID' would really mean -e 'my $*PID = CORE::SCARY::COMPILER::STUFF::ZOMG::getpid(); { say $*PID }'

[17:50] <TimToady> well, it's just copying the botch from @+ and @-, so it's not your fault. :)

[17:50] <avar> TimToady: ya, readonly is beside the point though:)

[17:50] <demq> heh. thats true. :-)

[17:50] *** Psyche^ joined
[17:50] <TimToady> if I recall, it was an Ilyaism

[17:51] <demq> its funny actually, @+ and @- maps directly to the old internal C representation.

[17:51] <avar> how is magic like %*ENV done in p6? Just an object that knows to to getenv/setenv on fetch/assignment

[17:51] <demq> but now its unified internally.

[17:51] <avar> demq: yours maybe, but not mine for long!

[17:52] <avar> that last one needed a "?" 

[17:52] <TimToady> yes, just an object that does the Hash role

[17:52] <fglock> hi

[17:52] <demq> yes ive been meaning to get up to speed on what youve been doing. 

[17:52] <avar> I've been screwing up your code

[17:53] <TimToady> let's you and him fight. :)

[17:53] <offby1> Gentlemen, you can't fight here.  This is the War Room. 

[17:53] <avar> offby1++

[17:54] * demq wonders what avar has been up to

[17:55] <offby1> avar: I have that quote bound to a "dynamic abbrev" in Emacs, so I can just type "wr" :-)

[17:55] <TimToady> fglock: hi, avar was wondering earlier what additional improvements to p5 regexen would aid emulating p6 regexen

[17:56] <TimToady> I figgered you'd have the worm's eye view of that problem space...

[17:56] * [particle] thinks porting PCR to blead would be instructive

[17:57] <avar> [particle]: Do you want to help with that?:)

[17:57] <[particle]> want? yes.

[17:57] <avar> I have a re::engine::Plugin interface (latest not on cpan) that should be able to do it along with Parrot::Embed or whatever

[17:57] <[particle]> PCR is Pugs::Compiler::Rule

[17:58] <[particle]> no parrot needed

[17:58] <avar> if you can show me how to use the PGE object from p5 space with that it should be eeeasy

[17:58] <[particle]> it's written in p5

[17:58] <avar> I read that as PGE

[17:58] <avar> I already have a re::engine::PGE

[17:58] <[particle]> hrmm

[17:59] * avar urls

[17:59] <[particle]> i think that can be arranged

[17:59] <avar> I still meant PGE, I know how to use PCR, almost:)

[18:00] * avar notices parrot/lib/Parrot/Test/PGE.pm

[18:01] <[particle]> that'll give you access to the basics

[18:01] <avar> [particle]: http://sial.org/pbot/24555

[18:01] <lambdabot> Title: Paste #24555 from Someone at 85.197.228.236

[18:02] <fglock> there is also a version of PCR in Perl6, under MiniPerl6; it compiles to plain perl5

[18:03] *** Psyche^ is now known as Patterner

[18:03] <fglock> re improvements, I had notes somewhere - looking

[18:03] <avar> but I broke my ::Plugin with my recent blead patches. If anyone's interested in writing pure-perl5 engines for blead I can get it cpanned sooner than later..

[18:04] <avar> http://colabti.de/irclogger/irclogger_log/perl6?date=2007-04-27,Fri&sel=248#l378

[18:04] <lambdabot> Title: #perl6 2007-04-27,Fri, http://tinyurl.com/29o6pa

[18:04] <avar> fglock: that's for you

[18:04] *** ruoso joined
[18:04] <TimToady> fglock: how different is that PCR from the one used by pugs?

[18:04] <avar> it uses fancy emitted code:)

[18:06] <fglock> it translates regex->miniperl6; it would probably useful for implemening "native" regexes in pugs itself

[18:08] <pasteling> "TimToady" at 71.139.1.42 pasted "what PCR currently says about cheated STD.pm" (571 lines, 48.5K) at http://sial.org/pbot/24556

[18:09] <fglock> it looks like it needs a bugfix or two

[18:09] <TimToady> not too worried about the "masks earlier" warnings...

[18:10] <TimToady> it's the last "cannot parse" that puzzles me

[18:11] <TimToady> but that's probably a result of one of the earlier messages

[18:12] <fglock> I think PCR 'before' requires a whitespace after it

[18:13] <fglock> yes it does - http://svn.pugscode.org/pugs/perl5/Pugs-Compiler-Rule/lib/Pugs/Grammar/Rule2.pm

[18:13] <lambdabot> http://tinyurl.com/2fgmop

[18:13] <TimToady> well, but then how do you pass the parameter as an ordinary parameter?  :)

[18:14] *** Yaakov joined
[18:14] <TimToady> I suppose <?before <$stop>> should also work in this case, but I think that fails to parse also...

[18:14] <fglock> in short: modify the grammar; recompile; patch; implement the runtime changes

[18:15] <fglock> it takes some work

[18:15] <demq> avar your latest patch applies and compiles clean, im runing test now.

[18:15] <fglock>  $stop points to a rule, right?

[18:18] <TimToady> I believe so

[18:19] <ingy> hola

[18:19] <TimToady> changing to <?before <$stop>> gets the same error

[18:19] <fglock> looking...

[18:20] <TimToady> ingy: how's the validity of the invalid?

[18:21] <ingy> undervalued

[18:21] * ingy is high on life

[18:21] <ingy> http://ingy.net

[18:21] <lambdabot> Title: Ingy 2.ö

[18:22] <ingy> :)

[18:23] <ingy> TimToady: I'm not so much invalid as a bionic noob

[18:23] <TimToady> lol

[18:24] <ingy> bionics like Perl6 take a while to get used to

[18:24] <ingy> 6 Million Dollar Perl

[18:25] <rindolf> Hi ingy 

[18:25] <rindolf> ingy: how are you feeling now?

[18:26] <ingy> rindolf: my bionic arm weighs too much

[18:26] <ingy> kinda hurts

[18:26] <ingy> just to carry

[18:26] <rindolf> ingy: bionic arm?

[18:26] <rindolf> ingy: you've lost your hand?

[18:27] <ingy> no

[18:27] <ingy> just some wrist bone

[18:27] <ingy> http://gugod.org/blog/2007/04/ingys-staus.html

[18:27] <lambdabot> Title: gugod: Ingy's status

[18:28] <ingy> there's a pic

[18:28] <ingy> more action pics comin soon

[18:29] <fglock> hmm - <before <$stop>> works, <?before <$stop>> doesn't

[18:29] <TimToady> I could get rid of the ?, but I also use <!before...>

[18:31] <[particle]> ingy: air travel should be more fun now

[18:32] <TimToady> still doesn't like it without the ?

[18:34] <TimToady> now that I have bionic eyes, can we get stereoscopic pix?

[18:35] <TimToady> a hologram would do in a pinch

[18:35] <pasteling> "fglock" at 201.54.129.80 pasted "before-scalar test" (15 lines, 337B) at http://sial.org/pbot/24557

[18:36] <fglock> hmm - maybe pugs/perl5 are not seeing each other variables

[18:37] *** edenc joined
[18:38] *** franck__ joined
[18:47] *** justatheory joined
[18:47] <fglock> TimToady: fixing, but I need some coffee first

[18:49] <TimToady> first things first.  :)

[18:52] <jisom> anyone here know how to get an insane amount of debugging output with gdb to help track down a bug that occurs sporadically with parrot?

[18:53] <jisom> or any help with gdb other than a backtrace

[19:01] *** vel joined
[19:06] <fglock> dunno - my test works in perl5, but it doesn't work in pugs

[19:11] *** justatheory joined
[19:12] <fglock> I've been thinking about parsing STD with v6.pm, and then emitting 'pugs' code (PCR works better under v6.pm)

[19:13] <TimToady> that'd be cool

[19:13] <fglock> otoh, pcr could be used to generate pugs code, that could be eval'ed by pugs

[19:13] <TimToady> we can always do more cheats to make it easier

[19:14] <TimToady> hmm, might get you continuations for free

[19:14] <fglock> TimToady: I'll take a look; it will need some runtime libs too

[19:15] <fglock> but those can be written in p6 :)

[19:16] <TimToady> I think a top-down bootstrap might motivate people more, when they can actually see their P6 code parsed by P6

[19:16] <TimToady> kp6 was already headed in that direction, seems like

[19:17] <fglock> mp6 can already compile a grammar into plain p6-pugs, it can be used to build a pcr-on-pugs

[19:18] <TimToady> that might integrate better too

[19:18] <TimToady> not having to fight passing vars back and forth between p5 and p6, for instance

[19:19] <fglock> TimToady: kp6 has a problem, the plan should be better documented for people to be able to help

[19:19] <fglock> yes

[19:20] <fglock> so do you think pcr-on-pugs would help?

[19:20] <TimToady> I believe it would

[19:21] <TimToady> how much work would it be?

[19:21] <fglock> I've got a 4-day holiday ahead :)

[19:21] <TimToady> are there any semantics missing from pugs that PCR would want to rely on?

[19:21] <fglock> TimToady: it's almost straightforward, if you reuse the mp6 version

[19:22] <fglock> the backtracking engine need to be implemented

[19:22] <fglock> mp6 is ratchet only

[19:23] <TimToady> not sure how close pugs continuations are to working...

[19:23] *** mauke joined
[19:25] <TimToady> looks like t/unspecced/cont.t passes all its tests

[19:26] <TimToady> so I guess you could rely on continuations

[19:26] <TimToady> of course, might not be the most efficient way to implement a backtrack...

[19:26] *** dduncan joined
[19:26] <fglock> is there something in pugs/ext/ that could be used?

[19:27] <TimToady> used for what?

[19:27] <fglock> for the regex engine

[19:27] <TimToady> dunno

[19:27] <TimToady> could probably rely on pcre for bits of it

[19:28] <TimToady> or could rely on bits of p5-pcr for well understood matches

[19:29] <TimToady> pcre might do the DFAish bits for us

[19:29] <TimToady> but that linkage is probably not via ext/

[19:30] <fglock> pure pugs would be easier to mix with p6 closures

[19:30] <TimToady> seems like a reasonable first approx anyway

[19:31] <TimToady> and as pugs speeds up will automatically speed up as well

[19:31] *** polettix joined
[19:32] <TimToady> and repeated bits can be factored out into Haskelland by lambdacamelids

[19:32] <fglock> otoh, can STD be parsed with tokens only? then you don't need to start with a backtracking engine 

[19:33] <TimToady> good question

[19:33] <TimToady> STD itself only uses backtracking in a couple of spots

[19:33] <TimToady> to interpolate $foo.bar.baz()

[19:33] <TimToady> and to recognize certain hyperoperators

[19:33] <TimToady> we can certainly avoid those in the short term

[19:34] *** edenc joined
[19:34] <[particle]> maybe do a Perl-6.0.0-MIN first

[19:34] <TimToady> well, and the cheated version assumes that a failed longer-token rule progresses to looking for a shorter token

[19:35] <TimToady> cheat STD.pm > MIN.pm

[19:37] <fglock> ... > plain-pugs.pm

[19:37] <TimToady> well, it's just >foo when I do it.  :)

[19:38] <fglock> I guess a beefed-up mp6 could do that

[19:38] *** the_dormant joined
[19:38] <fglock> with some help (parentheses, etc)

[19:38] <TimToady> STD does heavily rely on the grammar/class unification though

[19:39] <TimToady> since <EXPR> is just written as a method, for instance

[19:39] <fglock> no problem I think - mp6 compiles regex to methods

[19:39] <TimToady> also relies a lot on the <foo($bar,$baz)> form

[19:40] <TimToady> k

[19:40] <TimToady> <EXPR(%assignment)> calls bottom up but stops if looser than assignment, for instance

[19:41] <TimToady> and that's something that doesn't translate to <EXPR regex> form

[19:41] <TimToady> you don't have to worry about multi-rules, since cheat turns those into sequenced rules for you.

[19:42] <TimToady> (assuming they're ordered reasonably)

[19:42] *** justatheory joined
[19:46] <fglock> the plan is to expand rules and tokens into plain-perl6, and don't touch the existing perl6 code

[19:46] <fglock> just like mp6-regex does

[19:47] <TimToady> basically, a better cheater. :)

[19:48] <fglock> does EXPR assumes $_ := string-being-parsed ?

[19:49] <TimToady> yes, currently

[19:50] <fglock> and current position is $_.pos

[19:54] <fglock> MiniPerl6::Grammar takes almost 20s to load in pugs; I'll try precompiling to yaml

[19:54] <TimToady> which is currently not implemented, I think

[19:56] *** ashleyb joined
[19:56] <fglock> MiniPerl6 will need to declare it's own $/, because pugs $/ is read-only

[19:59] <fglock> TimToady: is this the correct way to create a P6opaque?  P6opaque.new( ... ) 

[20:00] <TimToady> P6opaque is not a type really.  it's a layout

[20:00] <TimToady> but that's probably okay for now

[20:01] <fglock> I'm trying to create objects from scratch, for 6-in-6

[20:01] <TimToady> maybe it's just a function

[20:01] <fglock> P6opaque.new( ... , class => ^Int, dispatcher => $default_dispatcher ) 

[20:02] <fglock> macro?

[20:02] <TimToady> could well be

[20:03] <fglock> ok

[20:03] <TimToady> it's just a "don't look behind this curtain" abstraction

[20:03] <TimToady> so a macro would certainly do for now

[20:04] <TimToady> long term this will have to be negotiated with the MOifiers

[20:04] <TimToady> who are in charge of the Modus Operandi

[20:04] *** benny joined
[20:06] <TimToady> btw, $/ looks writable in my pugs

[20:07] <TimToady> biab &

[20:08] <fglock> I can't find out how to set a named capture

[20:11] <fglock> I didn't understand what <sym> does in STD

[20:11] <TimToady> basically, sets up a $+sym context var

[20:12] <TimToady> two uses:

[20:12] *** veritos joined
[20:12] <TimToady> can match against <sym> without repeating

[20:12] <TimToady> and when the eventual P6 routine is written, can be used for the name of the operator

[20:12] <TimToady> so prefix:sym<+> ends up producing prefix:<+>

[20:13] <TimToady> but the rule has a different name so we don't confuse them

[20:13] <TimToady> otherwise we wouldn't know whether prefix:<+> meant the current + operator or the rule to parse it

[20:14] <fglock> ok

[20:14] <TimToady> and within the grammar it would be ambiguous, even if the user doesn't see the ambiguity

[20:14] <TimToady> I suppose Match objects are immutable

[20:15] <TimToady> we need a mutable CurrentMatchState that ends up snapshotted into an immutable Match result somehow, I guess

[20:15] <fglock> yes; $/ itself is mutable

[20:17] <fglock> btw, I need help with feather svk

[20:18] <TimToady> someone will have to help with that, I'm svk-ignorant.

[20:18] <TimToady> biab, really &

[20:18] <fglock> thanks! have a nice weekend

[20:25] <veritos> fglock: try 'svk help intro'

[20:25] <veritos> you can also (iirc) use it exactly like svn

[20:25] <[particle]> there's also #svk

[20:26] <fglock> yep - I'm loggin in there

[20:27] <fglock> the problem is: "(in cleanup) Svndiff data ends unexpectedly: Unexpected end of svndiff input"

[20:31] <kolibrie> my feather svk is stuck at r15257 with the same error

[20:31] <kolibrie> (has been for months)

[20:31] <[particle]> aha, maybe that's why evalbot is gone, too

[20:31] <kolibrie> but it would be nice to get it working again

[20:32] <[particle]> can you just update to head, without getting all the past revisions?

[20:33] <kolibrie> I have no idea (and isn't that a bad idea?)

[20:33] <fglock> [particle]: do you know how to do that? I can try

[20:33] <[particle]> i don't know svk

[20:33] <[particle]> try svk help pull

[20:34] <veritos> [particle]: most commands are svn-compatible

[20:34] <[particle]> yes, but this one isn't

[20:34] <[particle]> it seems svk is trying to sync with svn

[20:34] <[particle]> by updating each revision in order

[20:35] <[particle]> but there's a busted revision in svn mucking up the sync

[20:35] <veritos> oh, i see.

[20:35] <[particle]> at least, that's what it seems like to me.

[20:37] <[particle]> maybe it's svk sync -s WORKINGREV

[20:38] <veritos> why's feather being so slow now anyway?

[20:38] <[particle]> maybe somebody's not nice

[20:42] <fglock> "svk up -r 16140" works

[20:42] <[particle]> ah, yay

[20:43] <[particle]> funny, that one *is* svn-compatible :)

[20:43] <veritos> it takes me like 30s to start a new screen, and one of my consoles is frozen

[20:44] <kolibrie> fglock: does it get all the revisions in between, or just skips to that revision?

[20:44] <fglock> it seems to be skipping

[20:46] <veritos> if you're on feather, isn't offline work kind of pointless? if your connection's down you won't be logging on anyway.

[20:46] <TimToady> looks like the load average on feather is about 10

[20:47] <TimToady> several trac.cgi processes running in parallel

[20:49] <fglock> veritos: I work offline, then I need to upload to feather in order to commit

[20:49] <TimToady> maybe some bot is tickling trac.cgi?

[20:49] <veritos> fglock: you have an excuse.

[20:49] <veritos> fglock: can you not commit from your home pc?

[20:49] <fglock> veritos: macbook -> computer-with-a-modem -> feather -> svn :P

[20:50] <veritos> ah.

[20:50] <veritos> textmate?

[20:50] <fglock> the macbook doesn't have a modem, and my neighbours use wep :)

[20:51] <fglock> for editing? I'm finally getting used to vim

[20:59] <TimToady> heh, looks like both googlebot and msnbot are grilling feather

[21:01] <TimToady> looks like googlebot is downloading changesets from trac...

[21:04] <TimToady> so is msnbot, looks like

[21:04] *** larsen_ joined
[21:04] <TimToady> commuting &

[21:06] <cj> commuting--

[21:10] <kolibrie> short commutes aren't too bad

[21:10] * kolibrie does his on a recumbent bicycle and finds them quite enjoyable

[21:13] <fglock> kolibrie: nice - I used to commute by bicycle year ago; now it's 30min by car

[21:13] <fglock> years

[21:14] <kolibrie> I did the car thing, but didn't find it to my liking

[21:14] <cj> kolibrie: http://maps.google.com/maps?f=d&hl=en&saddr=2225+Walnut+St,+Everett,+WA+98201&daddr=701+5th+Ave,+Seattle,+WA+98104&sll=37.0625,-95.677068&sspn=46.409192,82.265625&layer=&ie=UTF8&z=10&om=1

[21:14] <lambdabot> Title: Google Maps, http://tinyurl.com/27ytod

[21:15] <kolibrie> cj: that does not look like a nice commute

[21:16] <cj> kolibrie: there's a train that travels along the water.  It's better than the drive, but still sucks up the day

[21:18] *** randomity joined
[21:28] <fglock> &

[21:32] *** SubStack joined
[21:32] *** devogon joined
[21:34] *** Aankhen`` joined
[21:34] *** aggregat4 joined
[21:46] *** gnuvince_ joined
[22:02] *** rashakil joined
[22:05] <TimToady> well, as it happens, I walk to work when I commute...

[22:11] *** thorat joined
[22:21] *** thorat left
[22:21] *** thorat joined
[23:33] <Eidolos> walking to work is great. used to live across the street from my current place of employment

[23:40] *** davem joined
[23:58] <avar> biking++

