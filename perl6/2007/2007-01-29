[00:02] *** Ziggy6 joined
[00:04] *** Ziggy6 left
[00:19] *** marmic joined
[00:24] *** cdfh joined
[00:34] *** thepler joined
[00:42] *** thepler joined
[01:13] *** lyokato joined
[01:44] *** Ziggy6 joined
[01:45] *** Ziggy6 left
[01:57] *** _Jack_ joined
[02:00] <svnbot6> r15153 | kudra++ | Placeholder

[02:01] *** jisom joined
[02:13] *** REPLeffect joined
[02:18] *** justatheory joined
[02:27] *** jisom joined
[02:34] *** jisom_ joined
[02:44] *** kanru joined
[02:44] *** dmq joined
[03:04] *** mako132_ joined
[03:18] *** BooK joined
[03:22] *** luqui joined
[03:25] *** thepler joined
[03:46] *** b00t joined
[03:48] *** REPLeffect joined
[03:51] *** Khisanth joined
[04:13] *** putter joined
[04:19] *** awwaiid joined
[04:23] *** jdv79 joined
[04:42] *** Ziggy6 joined
[05:03] *** Ziggy6 left
[05:21] *** Ziggy6 joined
[05:21] *** Ziggy6 left
[06:06] *** iblechbot joined
[06:14] *** BooK_ joined
[06:18] *** araujo joined
[06:19] *** rfordinal joined
[06:42] *** REPLeffect joined
[07:03] *** b00t joined
[07:03] <svnbot6> r15154 | putter++ | misc/pX/Common/yet_another_rules_engine/ - created.  See README.  Help welcome.

[07:07] *** ofer0 joined
[07:12] *** marmic joined
[07:35] *** devogon joined
[07:38] *** REPLeffect left
[07:42] *** leed joined
[07:48] *** drrho joined
[07:49] *** dduncan left
[07:52] *** stef__ left
[07:53] <luqui> @pl \eq -> eq f eq

[07:53] <lambdabot> join ($ f)

[07:53] *** cognominal joined
[08:13] *** nipra joined
[08:16] *** ayrnieu joined
[08:22] *** iblechbot joined
[08:41] *** elmex joined
[09:10] *** lisppaste3 joined
[09:27] *** Ziggy6 joined
[09:27] *** Ziggy6 left
[09:39] *** Lorn joined
[09:44] *** stef_ joined
[09:48] *** andara joined
[09:52] *** cdfh_ joined
[09:57] *** cdfh__ joined
[10:27] *** cdfh joined
[10:36] *** cdfh_ joined
[10:41] *** andara joined
[10:42] *** cdfh__ joined
[10:45] *** jferrero joined
[10:47] *** ruoso joined
[10:47] *** chris2 joined
[10:57] *** cdfh joined
[11:03] *** cdfh_ joined
[11:09] *** mr_ank joined
[11:16] *** theorbtwo joined
[11:19] *** cdfh joined
[11:29] *** chris2 joined
[11:31] *** cdfh_ joined
[11:32] *** buetow joined
[11:40] *** cdfh__ joined
[11:46] *** cdfh joined
[11:51] *** theorbtwo joined
[11:55] *** cdfh_ joined
[12:01] *** sonorous left
[12:01] *** cdfh__ joined
[12:07] *** cdfh joined
[12:16] *** cdfh_ joined
[12:22] *** cdfh__ joined
[12:22] *** TimToady joined
[12:22] *** Schwern joined
[12:41] *** mako132_ joined
[13:01] *** ayrnieu joined
[13:03] *** VanilleBert joined
[13:06] *** rgs joined
[13:18] *** VanilleBert left
[13:56] *** rashakil__ joined
[13:58] *** Limbic_Region joined
[13:58] *** elmex joined
[14:24] *** __Ace__ joined
[14:46] *** vel joined
[15:33] *** bonesss joined
[15:51] *** jferrero joined
[16:09] * DebolazX sees http://en.wikipedia.org/w/index.php?title=Pugs&curid=1532361&diff=104103089&oldid=100787152

[16:09] <lambdabot> http://tinyurl.com/2htmfr

[16:14] *** VanilleBert joined
[16:15] *** jiing joined
[16:28] *** c6rbon joined
[16:31] <elmex> rafl: are you there?

[16:33] <Limbic_Region> ?seen rafl

[16:33] <lambdabot> rafl is in #perl6 and #haskell. I don't know when rafl last spoke.

[16:33] <Limbic_Region> @seen rafl

[16:33] <lambdabot> rafl is in #perl6 and #haskell. I don't know when rafl last spoke.

[16:33] <elmex> hm, jabber.org is unfortunately down :(

[16:33] <Limbic_Region> .seen rafl

[16:33] <Limbic_Region> ah

[16:34] <rafl> elmex: I am.

[16:34] *** chris2 joined
[16:35] <elmex> rafl: yay, is jabber.org dead for you too? well.. whatever, i wanted to send the patch for Net::SSLeay with the test

[16:36] <elmex> rafl: want it via smtp or http?

[16:37] <Limbic_Region> <rafl> Will Perl 6 have something like perl5's as.pm? 

[16:37] <elmex> wtf.?

[16:37] <Limbic_Region> wholly fubar'd client

[16:37] <Limbic_Region> wow, the last time rafl spoke in the channel (prior to today) was 2006-12-11 saying that

[16:38] <elmex> thats not soo long ago

[16:38] <rafl> elmex: Yes, it was.

[16:39] <rafl> elmex: http

[16:39] * Limbic_Region shuts up for fear of flooding or sounding incoherent or both

[16:39] *** nipra joined
[16:39] <rafl> Limbic_Region: I didn't have much time and motivation for Perl 6 related things in the past months.

[16:41] <TimToady> can't do anything about the time, but what motivates you?

[16:41] <elmex> rafl: will you be at the GPWS ?

[16:45] <rafl> TimToady: My motivation is mostly fun. I was somewhat depressed in the past months and lost track on the current development. After that I didn't want to catch up because lots of things happened and there were other fun projects for me to do.

[16:45] <rafl> TimToady: I haven't lost the interest, though. But I fear there will be lots of boring stuff to do before I can actually get involved again.

[16:45] <rafl> elmex: Yes.

[16:46] <elmex> nice, i will be too

[16:47] * Limbic_Region is mostly interested in pmichaud's work on perl6 -> parrot compiler.  It currently is only failing 4 of the 27 sanity tests

[16:47] <rafl> elmex: Were will you sleep?

[16:47] <Limbic_Region> once all sanity tests are passing, the entire perl 6 test suite (pugs) minus a handful of implementation specific tests will be opened up

[16:49] <elmex> rafl: hm, in a hotel, i don't know which.

[16:49] <Limbic_Region> then there will be at least 2 HLL (tcl being the other) driving parrot development

[16:49] <rafl> Limbic_Region: That's interesting, indeed.

[16:49] <Limbic_Region> then there will be at least 2 HLL (tcl being the other) driving parrot development

[16:49] <Limbic_Region> grrrr

[16:50] <elmex> rafl: well, btw. you've got a privmsg :)

[16:50] <rafl> I have writing some parrot glue around libxmmsclient (the xmms2 client library) on my TODO. That'll probably be fun as well :-)

[16:50] *** VanilleBert left
[16:51] <elmex> hehe

[16:51] * Limbic_Region is also very much interested in the return of audreyt++

[16:51] <[particle]> Limbic_Region: it will also open the doors to hll interoperability

[16:51] <[particle]> we can implement C<use tcl:what::ever>

[16:52] <Limbic_Region> [particle] - yeah, also good stuff but there is nothing like failing tests to motivate development

[16:53] *** cmarcelo joined
[16:57] <Limbic_Region> oh, and all of the work from fglock++ is interesting too

[16:59] <Limbic_Region> TimToady - what would be S14 is now covered under S10-S13 ?

[17:00] <TimToady> what's chapter 14 about?

[17:00] <Limbic_Region> sorry - tied variables

[17:01] <TimToady> yes, those are now implementation types

[17:01] <TimToady> my %hash is MyStrangeHash;

[17:02] *** amnesiac joined
[17:02] <TimToady> and variable are assumed to be untieable unless declared tieable in some way

[17:02] <TimToady> s//s/

[17:03] <TimToady> well, s:13th/<null>/s/ I mean

[17:03] <Limbic_Region> also, where does S26 (POD) live - I thought Damian released it already?

[17:04] <TimToady> a recent copy of almost any spec can be found in docs/Perl6/Spec

[17:04] <TimToady> not sure if there's a more official place for it yet

[17:05] <Limbic_Region> http://dev.perl.org/perl6/doc/synopsis.html

[17:05] <lambdabot> Title: Synopses - perl6

[17:06] <Limbic_Region> I thought that officially released synopses lived there and works in progress were in the pugs repo

[17:07] <TimToady> Well, Functions is "official" but still lives in pugs

[17:07] <TimToady> dev.perl.org specs are slightly more frozen, or at least have a smaller set of people that can dicker with 'em

[17:08] <TimToady> but there's no concept of "officially released" as in completely frozen

[17:08] <TimToady> some of them are in a hard slush though.

[17:09] <Limbic_Region> ok, so on dev.perl.org is S1 through S6, S9 through S13 where Pugs repo has S16, S17, S22, S26, and S29

[17:09] <Limbic_Region> S7 (formats) and S8 (references) are obsolete

[17:11] <TimToady> at some point I'll probably throw an Offical Grammar out there into some S or other.  Last night I finished the "top" of the sandwich.

[17:12] *** Cafe_ joined
[17:12] <Cafe_> hi all

[17:12] <TimToady> howdy

[17:12] <TimToady> what are your interests?

[17:13] <Cafe_> will perl6 have a compiler?

[17:13] <Limbic_Region> will there be a need for S15 (unicode), S18 (compiling), S19 (command line interface), S20 (debugger), S21 (internals and externals), S23 (security), S24 (common practices), S25 (portable perl), S27(perl culture), S28(special names), S30 (standard perl library), S31 (pragmatic modules), S32 (standard modules), S33 (diagnostic messages)?

[17:13] <TimToady> Cafe_: it will have lots of compilers

[17:14] <[particle]> (synopses) it may be nice to have a note saying which synopses are intentionally left blank, and which have not yet been written

[17:14] <Cafe_> i mean, today with perl5 we cant generate working executables like C programming, right?

[17:14] <[particle]> evolving vs deprecated

[17:14] <xinming> Cafe_: yes.

[17:15] <Cafe_> will it be like C programming?

[17:15] <xinming> Cafe_: No. Perl 6 will have a compiler.

[17:15] <Cafe_> (sorry the bad english, i'm not native english speaker)

[17:15] *** Azure-BOT joined
[17:15] <xinming> Cafe_: We just compile perl 6 to parrot or to javascript. :-)

[17:15] <xinming> Cafe_: Me neither.

[17:16] <[particle]> Cafe_: at least one implementation of perl 6 will allow you to compile to bytecode, and use a virtual machine (parrot) similar to how java works

[17:16] <Limbic_Region> [particle] - WRT the Synopses intentionally left blank - exactly what I was getting at

[17:16] <xinming> Cafe_: And even... Better than java. :-P

[17:17] <TimToady> I expect fglock will eventually make it compile to C code.

[17:17] *** bons joined
[17:17] * [particle] expects that too

[17:18] <xinming> TimToady: Do you mean It compile to pasm, and then, compile pasm to C? Or, Just compile perl 6 to C?

[17:18] <TimToady> Limbic_Region: I will >>todo that

[17:18] <xinming> Compile perl 6 to c directly.

[17:18] <Cafe_> ok, but i will need to install the VM anyway, right?

[17:19] <Limbic_Region> [particle] - cause from a pure numbers perspective, it looks like 16/33 aren't written yet

[17:19] <[particle]> Cafe_: yes, with parrot, unless an exe is created which contains the vm and the bytecode

[17:19] <TimToady> I suspect fglock would do direct to C, but of course there would have to be library support that might well be from parrot (or...)

[17:19] <xinming> Cafe_: Don't worry about vm. It's even possible to compile perl 6 to perl 5.

[17:20] <Cafe_> my willing is to make an reliable, independent exe

[17:20] <[particle]> s/willing/desire/

[17:20] <Gothmog_> If it will be possible to compile it to C, you might need the VM to compile it, but you won't need it to execute it.

[17:20] <Cafe_> thanks!! ;)

[17:21] <Cafe_> you mean convert the perl code to C code, and then use gcc to compile the C code?

[17:21] <Limbic_Region> heh, wouldn't it be something if perl 5 compiled to perl 6 which is compiled to perl 5 outperforms the original?

[17:21] <Limbic_Region> TimToady - not looking to make work for you but it is something I have been wondering about

[17:22] <[particle]> ...talk about a pony!

[17:23] <xinming> Cafe_: possibly... If someone did something amazing. which compile perl 6 to C directly. Then, I'll think If we can write a OS using dynamic language. :-P

[17:23] <[particle]> Cafe_: there is a perl 5 module called PAR which let's you compile once, distribute, and run on machines without perl installed

[17:23] <[particle]> Cafe_: i expect perl 6 will have *at least* that functionality, too, and maybe more

[17:24] <Cafe_> i have tried PAR and others alike

[17:24] <TimToady> Limbic_Region: http://feather.perl6.nl/syn/ is a more up-to-date snapshot of the state of the synopses.

[17:24] <lambdabot> Title: Official Perl 6 Documentation

[17:24] <Cafe_> but only worked with simple codes

[17:26] <Limbic_Region> TimToady - except that the pugs repo has S17 and S22 which isn't reflected there

[17:36] <TimToady> Limbic_Region: yes, but that html page can be changed by anyone with pugs commit; see note at the bottom of the page.  Arguably that's why it's more up-to-date than the other page.

[17:36] *** thepler joined
[17:45] *** justatheory joined
[17:48] <Cafe_> when will we be using perl6??? 

[17:50] *** awwaiid joined
[17:51] *** justatheory joined
[17:53] <TimToady> Cafe_: using it for what?  I've already used it at work...

[17:54] <TimToady> pugs already implements a large portion of the language

[17:54] <TimToady> and it's quite usable, though not terribly fast

[18:12] *** Cafe_ joined
[18:15] <TimToady> Cafe_: would you like to participate in development?

[18:17] <TimToady> if so, ask here and someone will send you a pugs commit bit

[18:19] *** weinig|away is now known as weinig

[18:20] *** larsen_ joined
[18:20] <TimToady> biab &

[18:22] *** jferrero joined
[18:22] *** bernhard joined
[18:23] <Cafe_> man, i dont think i can contribuite with my perl skills

[18:24] <Cafe_> but i'll be happy to help on other ways

[18:24] <lumi> You can contribute just by writing a test, or reading the documentation and finding places where it's fuzzy

[18:24] <lumi> Want a commit bit?

[18:25] <PerlJam> Cafe_: There are lots of opportunities to contribute even if you don't know perl (5 or 6), haskell, etc.

[18:27] <Cafe_> we will discuss it in a minute

[18:27] <Cafe_> i'm just finishing some lines of code

[18:29] *** larsen_ joined
[18:36] * bonesss is away: out

[18:44] <gaal> nothingmuch++ # smoke test modules fixed

[18:44] <gaal> everyone who's been getting errors, please reinstall Task::Smoke

[18:44] <nothingmuch> err, wait for CPAN

[18:45] <gaal> {sleep 7200 ; !! }

[18:49] <nothingmuch> goddamn hippies

[18:49] <nothingmuch> i want my BSG! why can't people be better seeders? *sniff*

[18:50] *** REPLeffect joined
[18:50] <gaal> they want to protect you from the rapidly declining to pathetic levels series.

[18:53] <nothingmuch> it's bad?

[18:53] <nothingmuch> now you took the fun out of it

[18:53] <lumi> It starts out good

[18:54] <gaal> then gets bad

[18:54] <gaal> a devil of a series

[18:55] <lumi> True

[18:56] <lumi> Meanwhile, would changing Pugs/Prim.hs, line 341 from "retEmpty" to something like "return v" make it comply with the new en passant spec?

[18:57] <gaal> without looking, looks promising. :-)

[18:59] *** weinig is now known as weinig|away

[19:04] <lumi> And, does an en passant take test belong in t/statements/gather.t? (probably not)

[19:18] *** Eidolos joined
[19:22] <gaal> it belongs somewhere...

[19:23] <gaal> heh i wonder whether should update my ghetto Perl6::Gather

[19:26] <svnbot6> r15155 | lwall++ | Add more info on missing chapters.

[19:26] *** chris2_ joined
[19:27] *** amnesiac_ joined
[19:27] *** chris2_ is now known as chris2

[19:29] *** amnesiac joined
[19:31] <gaal> TimToady: the Syn example has "take $_", but doesn't "take" default to taking the topic?

[19:33] <gaal> ugh. i don't know how to express the p5 version of take's prototype.

[19:34] <gaal> "take 42, 45": what's taken?

[19:36] *** miyagawa joined
[19:38] <Juerd> gaal: IIRC, there is no $_ defaulting anymore, in arguments.

[19:38] <Juerd> gaal: So .take 

[19:38] <Juerd> I expect take 42, 45 to take both.

[19:38] <Juerd> i.e. take LIST

[19:39] <gaal> well, isn't that now dependent on whether the take is en passant?

[19:40] <gaal> (see recent Syn commit)

[19:40] <Juerd> What is en passant?

[19:40] * bonesss is back (gone 01:03:36)

[19:40] <allbery_b> "in passing", in this case meaning it returns what it's passed

[19:40] <Juerd> Don't know. No tuits for following commits anymore

[19:40] <allbery_b> and "takes" as a side effect to that

[19:41] <gaal> what I don't understand is the comment about the take happening in void context, unless it's an en passant assignment

[19:41] <gaal> what would it mean for the take to be in void context?

[19:41] <gaal> i mean, does this affect the taken values in any way?

[19:42] <allbery_b> void context means any value returned will be discarded

[19:42] <allbery_b> this is significant mainly because the trivial gather ... {take ...} would otherwise return the last thing taken

[19:42] <allbery_b> as the result of the gather

[19:42] <allbery_b> which is probably not intended

[19:43] <allbery_b> hm, phrased poorly, since obviously that cannot happen)

[19:43] <gaal> how so? gather returns the gathered list.

[19:43] <gaal> gather ..... { $x = { 42; take 7; } }

[19:43] <gaal> what's $x?

[19:44] <gaal> (heh, should have said "take 5")

[19:44] <allbery_b> suppose you could say that it's being pedantic about what is going on exactly:  a void context is one in which any expression will be ignored aside from side effects, the inside of a gather is a void context (so you know any finall value will be ignored, only the effect of a take is important)

[19:44] <allbery_b> and in that case, the result is the result of take because it's the last thing in the block, no?

[19:44] <allbery_b> i.e. $x == 7

[19:45] <gaal> okay, so what's the meaning of the take happening in void context?

[19:45] <allbery_b> in gather ... { <- right after that open brace is void context

[19:45] <allbery_b> meaning no value is expected, also meaning take's context does not affect scalar vs. list (I think)

[19:45] *** avarab joined
[19:45] <gaal> my Q is not about the gather at all, it's in about the take

[19:45] <allbery_b> but mostly I think it's being pedantic

[19:46] <allbery_b> gaal:  take is only meaningful within a gather, no?

[19:46] <gaal> sure, sure

[19:46] <allbery_b> they go together, the affect each other in particular ways, "I don't care abouut the gather:" == "tell me something meaningless"

[19:46] <gaal> but why is the context of take important? surely the context in which take's arguments are reduced is not void!

[19:47] <allbery_b> fine.  meaningless answer:  "it doesn;t matter"

[19:47] <gaal> thank you.

[19:47] <allbery_b> it's also wrong, I suspect, bhut at the level you're insisting on, there is no right answer

[19:48] <gaal> in that case, the right answer is not to mention the context of take in the spec.

[19:48] <allbery_b> my strong suspicion is that the void context means take does not try to enforce any kind of scalar/list "shape" on what you pass it or what passes through it

[19:48] <gaal> now, is "take;" an error? simply a dispatch failure?

[19:49] <gaal> so, can "@x = take EXPR;" gather something different from "$x = take EXPR"?

[19:49] <allbery_b> that is indeed the question

[19:49] <gaal> because in that case, I don't understand how to express take's Signature in Perl

[19:50] <allbery_b> and it's why context is important.  if gather did not explicitly supply null context then the assumed context would be thatr in which the gather exists

[19:50] <gaal> since gather gather lists, I was under the impression its, uh, takands should be evaluated in list context always.

[19:50] *** kanru joined
[19:50] <lumi> In Pugs there's currently an op0 "take", I saw

[19:51] <gaal> s:2nd/gather/gathers/

[19:51] <allbery_b> you might want to bounce that one off @Larry

[19:51] <gaal> yup, hoping they'll remoose here

[19:53] <lumi> @a =  gather { $x = take f() } # What context does f return in?

[19:53] <lambdabot> Maybe you meant: activity activity-full admin all-dicts arr ask . v

[19:53] <lumi> Or is that what you were just discussing?

[19:53] <lumi> Thanks \b

[19:53] <allbery_b> lumi: that's the question

[19:53] <allbery_b> absent the $x it has no imposed context.  this makes me think that $x is intended to provide context

[19:53] <allbery_b> not sure if that was actually the intent\

[19:54] <lumi> Ah

[19:54] <gaal> which is crazy to express

[19:54] <gaal> and, I think, impossible to implement in p5

[19:54] *** avarab is now known as avar

[19:54] <lumi> So: @a = gather { $: take f() } # same as take $: f()

[19:54] <lumi> To use the syntax of the week

[19:55] <allbery_b> hm?  p5 can express it, I think

[19:55] <gaal> wouldn't it be nice if p5 prototpyes had some autothunking feature, like sub take (&) { if wantarray...}

[19:55] <allbery_b> if you mean prototypes, that should be the behavior of @

[19:55] <allbery_b> whereas \@ forces list and provides a listref

[19:56] <allbery_b> (I think.  if not, well, this is why p5 protos suck and should be avoided :)

[19:56] <gaal> in this case they can't be, if I want to allow these to look like builtins and not require "sub" and parens.

[19:56] <lumi> autothunking, as in lazifying?

[19:56] <gaal> yeah

[19:57] <gaal> not to be evaluated at call time, but by take according to its wantarray

[19:57] *** hexmode joined
[19:58] <gaal> so, $x = take 1,2 would gather [1,2], wheras @x = or no en passant would do the usual flattening ...1, 2...?

[19:59] <gaal> ok p6-lling.

[20:09] *** nipra joined
[20:28] *** dduncan joined
[20:47] *** penk joined
[20:54] *** Aankhen`` joined
[21:17] *** polettix joined
[21:18] *** iblechbot joined
[21:40] *** justatheory joined
[21:45] *** qmole_ joined
[21:51] *** mr_ank joined
[21:54] *** larsen__ joined
[21:54] <svnbot6> r15156 | lwall++ | formatting tweaks to syn index.

[21:59] *** hexmode joined
[22:05] <wolverian> http://anyterm.org/ -- webirc replacement, perhaps

[22:05] <lambdabot> Title: Anyterm - Introduction

[22:11] *** chris2_ joined
[22:13] *** Limbic_Region joined
[22:14] *** REPLeffect_ joined
[22:32] *** cdfh joined
[23:07] *** diotalevi joined
[23:08] *** jferrero joined
[23:08] *** Psyche^ joined
[23:12] *** putter joined
[23:13] *** awwaiid joined
[23:16] *** Psyche^ is now known as Patterner

[23:17] *** cdfh_ joined
[23:22] *** justatheory joined
[23:34] *** cognominal joined
[23:52] *** mako132_ joined
