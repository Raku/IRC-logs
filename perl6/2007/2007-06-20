[00:00] <japhb> Or three, to include kp6 ...

[00:02] <ibrown> looking at example.

[00:03] <ibrown> so you need folks to run the tests, to populate these docs?

[00:03] <japhb> info pulled from smoke runs.

[00:03] <ibrown> or is the process just confusing me?

[00:03] <japhb> ibrown: many cronjobs that make magic.  :-)

[00:04] <japhb> see http://m19s28.vlinux.de/cgi-bin/pugs-smokeserv.pl

[00:04] <lambdabot> Title: Pugs Smoke Reports

[00:04] <japhb> Ignore the release lines, it's been a while since a release.  Go for repo snapshot lines.

[00:06] <ibrown> ubuntu eq linux?

[00:07] <japhb> ubuntu isa debian isa linux, more or less

[00:07] <ibrown> yeah. figured as much.

[00:07] <ibrown> just wanted to make sure.  i'm new to deb, migrated from slack

[00:08] <japhb> welcome to the light side of the force

[00:09] <ibrown> lol

[00:09] <ibrown> yeah we all grow up.

[00:09] <ibrown> its been slack since the early 90's tho.  so its like hard to part.

[00:09] <ibrown> all these damn pretty pictures.

[00:11] <thoughtpolice> i'm an archlinux guy myself. although i also like gentoo and bsd. never tried just vanilla slack.

[00:12] <ibrown> start with disk,video,keyboard.  

[00:12] <ibrown> compile what you need

[00:12] <ibrown> let it be a rock

[00:13] <ibrown> albeit it does suck as a desktop

[00:13] <ibrown> but my bnc wireless card is supported by ubuntu pretty easily, so i said wth

[00:14] *** kunwon1 joined
[00:15] <ibrown> so they release a svn #.  you check it out, do the tests, and commit the results which are stored in .pod files?

[00:16] <ibrown> then that information is given back to the assembler interpreter guys? who take it and elaborate their project?

[00:19] <japhb> I believe that when you 'make smoke' it uploads your test results to the smoke server, and when the pods are converted to HTML, the test sources and smoke results are incorporated

[00:20] <ibrown> ah

[00:22] <ibrown> so how do i get commit access to help out?

[00:22] <japhb> ask anyone for a commitbit.  You need to give us your preferred user name, and an email address

[00:22] <japhb> private message works best.

[00:23] <japhb> Hold on, lets see if I can get into the invite manager ....

[00:24] <japhb> (the invite manager and the server its hosted on seem to be at odds, resulting in VERY slow response times, so hold on)

[00:24] <japhb> s/its/it's/

[00:25] <ibrown> i still don't exactly follow i guess what the tests are doing per say.  and the like but i'm sure i'll get it after watching a min.

[00:25] <[particle]> what the tests are doing?

[00:26] <[particle]> there's a utility called 'smartlinks.pl' that takes as input the test files and spec files and matches smartlinks in the test files to locations in the spec files.

[00:27] <ibrown> well. 

[00:27] <ibrown> here's a good example:

[00:27] <[particle]> html is generated which includes the test file source inside the htmlified pod

[00:27] <ibrown> i run grep -RL 'L<' t/* | $PAGER

[00:27] <ibrown> which i understand, kind of, 

[00:27] <ibrown> what do i do with $PAGER

[00:27] <ibrown> to dtermine the results.

[00:28] <ibrown> unelss that just meant | less lol

[00:28] <[particle]> is $PAGER set to 'less'?

[00:28] <ibrown> or more or whatever

[00:28] <japhb> er, I think $PAGER is supposed to mean 'less'

[00:28] <ibrown> that's what i figured.  ok that makes sense.

[00:28] <[particle]> yes, it's an env var, like $EDITOR

[00:29] <ibrown> tru i don't normally call it by its var my fault on that one

[00:33] <japhb> OK, ibrown, I'm ready to invite. /msg me your username and email?

[00:38] <japhb> ibrown: having trouble /msg'ing?

[00:39] <ibrown> i msg'd you

[00:39] <ibrown> did it not go through

[00:39] <japhb> nope, didn't arrive.

[00:39] <japhb> Are you signed in with nickserv?

[00:39] <ibrown> neg

[00:40] <japhb> required on freenode to msg ...

[00:40] <ibrown> oh

[00:40] <ibrown> that explains.

[00:40] <japhb> You can also send in-channel ... our logbot hides emails.

[00:40] <japhb> most people just prefer not to send in-channel, of course ....

[00:40] <ibrown> [email@hidden.address] ibrown: is fine

[00:40] <japhb> k, hold on.

[00:40] <ibrown> i don't care.

[00:40] <ibrown> whatever, spam me some more!

[00:41] <japhb> heh

[00:42] * offby1 launches a can of spam ibrown-ward

[00:42] <japhb> The server is chewing on your invite

[00:44] <japhb> So here's the deal.

[00:44] <japhb> (brought from priv msg land)

[00:44] *** f0rth joined
[00:44] <japhb> The tests are just Perl 6 scripts.

[00:44] <japhb> They have various bits of magic in them, including these 'smart links'.

[00:45] <ibrown> yeah little routines testing functions it looks like.

[00:45] <japhb> Once the smart links are added once, they don't need to be updated again, unless the spec changes overmuch.

[00:45] <TimToady> heh, heh

[00:45] <japhb> Once added, they are automatically managed by the cronjobs.

[00:45] <japhb> so the spec annotation that you see is all automated.

[00:46] <japhb> We just need more granularity and completeness to the 'smartlinks'.

[00:46] <japhb> Perhaps it will help to consider them HTML <a> tags.  Someone needs to put a lot of anchors in the tests.  After that, the hyperlinking Just Works.

[00:47] <japhb> Oh, and don't listen to TimToady, he's just here to pull your leg.  ;-)

[00:48] <TimToady> I never do anything useful around here except cause more trouble.

[00:48] <japhb> 'xactly

[00:48] <ibrown> i feel yeah

[00:48] <ibrown> i'm doing a lot of analysis lately and swear by perl

[00:49] <ibrown> but this cat i'm workign with is pressuring me hardcore to give it up

[00:49] <ibrown> and swtich to something else, i'm like ugh. no.  but the perl6 language i'm liking.

[00:49] <offby1> I swear at perl

[00:49] <ibrown> aye me too

[00:49] <offby1> my cat doesn't care which language I use

[00:49] <ibrown> collegue? 

[00:49] <japhb> My cat needs her nails clipped.  I think she just put a hole in my pants leg

[00:51] <ibrown> i can def do the smartlinks

[00:51] <japhb> <burns>Excellent...</burns>

[00:51] <ibrown> i just hope there's a bit more daunting tasks up the road. =P

[00:52] <TimToady> you could write me a regex engine in Haskell tonight if you like. :)

[00:52] <ibrown> shiit. why didn't you just ask.

[00:53] <ibrown> i believe there's one under the sofa. brb

[00:54] <offby1> mine's outside calling for his buddies

[00:57] <japhb> dinner &

[00:58] <offby1> renice -20 %1

[00:58] *** rintaro joined
[00:58] <offby1> ha!  now let's watch him eat really fast

[01:06] *** nipotaway is now known as nipotan

[01:11] *** rintaro_ joined
[01:20] *** cognominal_ joined
[01:25] <offby1> gaah.  I wish #parrot were on this server

[01:33] *** dolmans joined
[01:34] *** uno_be joined
[01:37] <japhb> Mmmm, good dinner.  And I did, in fact, eat really fast, so it must have worked.  I was done well before everyone else was half done.

[01:37] <offby1> well, you burned up all my CPU.  I tried to SIGHUP you but you blocked it

[01:38] <japhb> heh

[01:40] *** rintaro joined
[01:44] * japhb yells at perl5: "What do you mean, 'Flash Gordon approaching'?!?"

[01:48] * japhb fervently hopes that Perl 6 will make it stunningly easy to redirect open filehandles for child processes *without* involving the shell or requiring use of some module to do what should be easy.

[01:55] *** rintaro__ joined
[02:00] <offby1> scsh is great at that sorta thing

[02:06] *** rintaro_ joined
[02:07] *** nipotan is now known as nipotaway

[02:16] <ibrown> ok so not to beat a dead horse, but checkout source, configure,make,make test, make smoke, add smartlinks, checkout

[02:25] *** REPLeffect joined
[02:26] *** TimToady joined
[02:28] <ibrown> timtoady: so got a quick question if you got a spare second.

[02:29] <TimToady> I do

[02:30] <ibrown> so i run grep in 01-sanity and it opens up: 02-counter.t which to me appears to be an increment test. : then i open up the document for 02 on that URL you submitted, and find in the document where it references increment.  then I create a link to the test result and that's essentially what's being committed

[02:31] <ibrown> i guess i'm just confused at what document i reference for the link. i understand the link syntax now etc.

[02:32] <TimToady> well, the link is from the .t back into the various synopses

[02:33] <ibrown> so like http://feather.perl6.nl/syn/S02.html that page

[02:33] <lambdabot> Title: S02

[02:34] <ibrown> true but where are they at in the src tree? docs?

[02:35] <TimToady> it's probably working with the pod versions.  they're in the source tree but have different names there

[02:35] <japhb> ibrown: see how its done in e.g. pugs/t/operators/eq.t

[02:36] <TimToady> docs/Perl6/Spec has the pod files, but like Operators is really S03

[02:36] <japhb> At the top of each spec doc is the correct number, they are numbered S<nn>

[02:36] <ibrown> ok so docs/Perl6/Spec

[02:36] <TimToady> you can also check out the most official ones under the S names from svn.perl.org

[02:36] <ibrown> gotcha

[02:36] <ibrown> been searching for that location

[02:37] <TimToady> the official synopses live at https://svn.perl.org/perl6/doc/trunk/design

[02:37] <japhb> As with that e.g. test file above, make sure you use S#/Section/string_to_match.

[02:39] <ibrown> but there's not pods for everything yet?

[02:39] <TimToady> semi-official and unofficial still live in docs/Perl6/Spec

[02:39] *** sunnavy joined
[02:39] <ibrown> can i check those docs out at that svn url?

[02:40] <TimToady> yes

[02:40] <ibrown> awesome.

[02:41] <TimToady> and then grep is your friend

[02:41] <ibrown> sorry for the annoying questions, i'm just starting to branch out into the community from my cave.

[02:41] <ibrown> rgr

[02:41] <ibrown> i'm checking out the docs. shouldn't be that big of a deal.

[02:42] <TimToady> no problem; we're down with branching out

[02:42] <ibrown> i just don't wanna switch to ruby.

[02:43] <TimToady> boku mou...

[02:43] *** mako132_ joined
[02:43] <ibrown> ?

[02:43] <TimToady> "me too" in Japanese...

[02:43] <ibrown> rgr

[02:44] <ibrown> if you want help with things on the regex engine let me know and i'll find some docs on the language you were speaking of earlier.

[02:44] <ibrown> i'm not terrible with the regexes.

[02:44] <TimToady> it was sort of a joke

[02:44] <TimToady> if you haven't programmed in Haskell yet, it would be a long learning curve...

[02:45] <TimToady> Haskell is even differenter than Ruby

[02:46] <ibrown> that's pseudo amusing.

[02:50] <ibrown> uhm.

[02:50] <ibrown> yeah that's a curve buddy

[02:55] *** rintaro joined
[03:00] *** rintaro__ joined
[03:02] <japhb> Hmmm, am I correct in reading the Parrot release announcement that Parrot is released *only* with Artistic License 2.0, and *not* a disjunction of AL 2 | GPL n?

[03:09] <Eidolos> in my (admittedly crusty) parrot checkout it has both AL and GPL

[03:10] <PerlJam> japhb: hmm. that's a good question.

[03:11] <PerlJam> Eidolos: there was a release today.

[03:11] <Eidolos> yeah

[03:12] <Eidolos> it's a lot of work to change the license on an open source multimultideveloper project though

[03:12] <Eidolos> see angband :)

[03:14] <Eidolos> "Updated Parrot distribution to Artistic License 2.0, from dual Artistic 1/GPL license."

[03:14] <Eidolos> hmmm

[03:19] * PerlJam asks #parrot and the mailing lists

[03:19] <Eidolos> wow

[03:19] <Eidolos> it looks like they did drop the GPL

[03:19] *** justatheory joined
[03:20] <Eidolos> LICENSES/ became LICENSE which now contains just the AL2

[03:21] <PerlJam> Ah ... http://groups.google.com/group/perl.perl6.internals/browse_thread/thread/655185fb525fb994/41ca94fc8ba6d29b?lnk=gst&q=Parrot+license&rnum=3#41ca94fc8ba6d29b

[03:21] <lambdabot> Title: [TODO] replace dual Artistic/GPL license with Artistic 2.0 only - perl.perl6.int ..., http://tinyurl.com/2go2ge

[03:22] <PerlJam> thank you lambdabot!

[03:22] * offby1 <3 automatic tiny-url-ification

[03:23] *** the_dormant joined
[03:24] <japhb> Ah, that's cool

[03:24] <japhb> Someone have a link to LICENSE?  My parrot checkout is WAY out of date, and I don't feel like waiting for pull ...

[03:25] <PerlJam> http://foundation.perl.org/legal/licenses/artistic-2_0.txt

[03:25] <japhb> Thanks, PerlJam

[03:25] <PerlJam> See section 4 is the part that's relevant to why they aren't dual licensing anymore I believe.

[03:25] <PerlJam> 4.c.ii specifically

[03:26] * japhb reading it now

[03:26] <Eidolos> perl6 is dual-licensed under AL2 and GPL1+

[03:27] <Eidolos> or was at rfc-response time

[03:28] <Eidolos> only 7 years out of date, not such a good source, I think I'll just go to bed then :)

[03:28] <TimToady> AL2 is officially "GPL compatible" so doesn't need to be dual licensed

[03:29] <Eidolos> ahh

[03:34] <japhb> TimToady: Is there a list of what licenses match 4.c.ii?

[03:37] <TimToady> dunno, you'd have to ask Allison probably

[03:37] <TimToady> I try to stay away from licenses these days.  :)

[03:39] <beppu> i can has public domain?

[03:40] <TimToady> I don't stay that far away from licenses... 

[03:40] <PerlJam> TimToady: heh

[03:47] <dduncan> indeed

[03:47] <dduncan> AL2 is considered a free non-copyleft license, and so is GPL-any compatible

[03:47] <dduncan> so I agree this change makes sense

[03:48] <dduncan> compatible without special cases too, so a AL2 work can on its own be relicensed GPL

[03:49] <dduncan> on that note, the general Pugs license could probably stand to see a similar change

[03:49] <dduncan> the Pugs readme currently says dual AL2/GPL, could just be AL2

[03:50] <dduncan> though on that note it should be AL2, not some pre-release AL

[03:50] <dduncan> assuming that AL2 is finalized already and legal to use

[03:50] *** dwave joined
[03:51] <dduncan> that is, the Pugs README still says "2.0beta5" and that seems out of date, should just say 2.0 if that is final

[03:51] <PerlJam> "legal to use"?

[03:52] <beppu> maybe "production ready" would make more sense to our programming-warped minds.

[03:53] <beppu> has AL2 gone through QA and been thoroughly debugged?  ;-)

[03:53] <PerlJam> beppu: indeed

[03:57] <dduncan> I would think so, if Parrot and that Oreilly book are now officially released with it

[03:57] <dduncan> so is there any reason for the Pugs repo and docs to now not just reference the final AL2?

[03:58] <dduncan> for that matter, would anyone complain if I made that change, or should we wait for audreyt to do it?

[04:00] <PerlJam> dduncan: I wouldn't complain.  In fact, I was going to suggest someone just do it earlier (being to lazy myself :)

[04:00] <PerlJam> s:2nd/to/too/

[04:00] <dduncan> right then ... so I'll get started on that now ...

[04:01] *** perlbot joined
[04:09] *** mako132_ joined
[04:15] *** devogon joined
[04:16] *** amnesiac joined
[04:28] *** justatheory joined
[04:28] <dduncan> so I've replaced the license file itself, and updated references in README and ChangeLog

[04:30] <dduncan> I'm also assuming that docs/01Overview.html isn't a frozen point-in-time doc, so that will be updated too

[04:34] *** pmichaud joined
[04:38] *** mako132_ joined
[04:39] *** monomorph joined
[04:42] <dduncan> committing ...

[04:43] <dduncan> done

[04:43] <svnbot6> r16694 | Darren_Duncan++ | the Pugs main license is now simply Artistic 2.0 (final) rather than Artistic 2.0b5 disjoint GPL

[04:43] <dduncan> in case there are any concerns about having the right version, the new license text is from http://www.perlfoundation.org/page/perlfoundation/legal/attachments/20061112063921-3-29352/artistic-2_0.txt 

[04:43] <lambdabot> http://tinyurl.com/28rwar

[04:43] <dduncan> which afaik is the official source

[04:45] *** mako132_ joined
[05:31] <ibrown> so after you add a smartlink, and run the smartlink --check *.t it spits out a html file correct?

[05:38] *** |Azure| joined
[05:39] *** |Azure| left
[05:40] *** |Azure| joined
[05:41] *** _Azure_ joined
[05:42] <_Azure_> hello

[05:42] *** _Azure_ is now known as Azure

[05:45] *** Azure left
[05:48] *** rintaro__ is now known as rintaro

[05:49] *** rintaro joined
[05:53] <ibrown> i don't get why i created a link in S02, but when smartlinks ran the output was named S26.html

[05:53] <ibrown> diff page.

[05:54] *** hirschnase joined
[05:58] *** _Azure_ joined
[06:02] <_Azure_> How to contribute 

[06:02] <_Azure_> I'm the first time use irc

[06:03] <diakopter> hi _Azure_

[06:03] <diakopter> how would you like to contribute

[06:03] <_Azure_> I'm come from perlchina

[06:03] <diakopter> do you have a commit bit for pugs?

[06:04] <_Azure_> no 

[06:04] <diakopter> have you registered your freenode nickname with NickServ?

[06:04] <_Azure_> how to do that

[06:04] <diakopter> (so you can send a /msg to myself with your email address and preferred username)

[06:05] *** hoowa joined
[06:05] <diakopter> _Azure_: http://freenode.net/faq.shtml#nicksetup

[06:05] <lambdabot> Title: freenode: frequently-asked questions

[06:07] <diakopter> _Azure_: /msg nickserv register <your-password>

[06:08] <_Azure_> I see

[06:08] <_Azure_> have a try

[06:08] <diakopter> or, you can just say your email address and username here..

[06:13] *** kanru joined
[06:14] *** |Azure| joined
[06:14] *** |Azure| is now known as Azure

[06:14] *** Azure left
[06:15] *** Azure joined
[06:16] <diakopter> Azure: did you find a nickname that hadn't previously been registered?

[06:16] <Azure> no 

[06:17] <diakopter> well then, good luck.  try _|Azure|_ ?

[06:17] <Tene> Heh.

[06:18] *** diakopter is now known as _|Azure|_

[06:18] *** _|Azure|_ is now known as diakopter

[06:19] <Azure> when I input /msg nickserv register  second times it show  azure already registered

[06:19] <Azure> success?

[06:20] <diakopter> try sending a msg to me

[06:20] <diakopter>  /msg diakopter test

[06:21] *** perlbot joined
[06:21] <diakopter> probably it is registered by someone else.  you'll need to change your nickname to something else and then try registering again

[06:21] <diakopter> I just tried _|Azure|_ - it's not taken. ;)

[06:22] <diakopter>  /nick _|Azure|_

[06:22] *** Azure joined
[06:23] *** Azure is now known as azure

[06:23] *** azure is now known as Azure

[06:23] <Azure> why I login with no password

[06:24] <diakopter> you're not yet logged in. those nicknames are not registered to you, it appears.

[06:25] <Azure> how to login

[06:27] *** |Azure| joined
[06:30] <|Azure|> ping

[06:30] *** |Azure| is now known as azure1st

[06:31] *** azure1st is now known as aaaasfsfsdf

[06:31] *** aaaasfsfsdf is now known as azure1st

[06:32] *** azure1st is now known as acprp

[06:38] *** uno_be is now known as unobe

[06:48] *** BooK joined
[06:48] *** acprp is now known as azure

[06:49] *** azure is now known as acprp

[06:49] *** acprp is now known as azure

[06:49] *** azure is now known as Azure

[06:50] *** buetow joined
[06:51] *** Azure is now known as acprp

[06:51] *** acprp is now known as Azure

[06:52] *** Azure is now known as azure1st

[06:52] *** nipotaway is now known as nipotan

[06:54] *** |Azure| joined
[07:01] *** unobe is now known as unobe_away

[07:03] *** franck__ joined
[07:04] *** acprp joined
[07:06] *** acprp is now known as Azure

[07:07] *** iblechbot joined
[07:07] *** franck__ joined
[07:07] *** Azure is now known as wwwwwwwwwwwwwww

[07:11] *** |Azure| joined
[07:11] <|Azure|> azure1st is me how to kill it

[07:11] *** franck___ joined
[07:12] <|Azure|> I want register it

[07:12] *** |Azure| is now known as acprp

[07:13] *** acprp is now known as azure1st

[07:18] <azure1st> "you have already identified" I've register success?

[07:18] <azure1st> ping

[07:18] <Tene> Hi!

[07:20] <Tene> By the way, everyone, if you have trouble with unregistered people not being able to message you, /msg nickserv set unfiltered on

[07:20] *** |Azure| joined
[07:21] <|Azure|> ?

[07:21] <Tene> Hi!

[07:21] <diakopter> Tene: thanks

[07:22] * Tene is experiencing failure loading commitbit

[07:22] * diakopter has commitbit loaded

[07:23] <|Azure|> why azure1st not me 

[07:23] <Tene> I've never had any problems with freenode spammers, so I've had my nicks et unfiltered almost since the filtering was first put in place.

[07:28] *** jisom joined
[07:30] *** bsb left
[07:30] *** rho joined
[07:37] *** |Azure| is now known as acprp

[07:37] <acprp> hi

[07:38] <Tene> Hi!

[07:46] *** acprp is now known as auzre1st

[07:47] *** auzre1st is now known as azure1st

[07:50] <azure1st> Hi  I already registered. How to contribute 

[07:52] *** |Azure| joined
[07:53] *** tlb joined
[07:53] <Tene> diakopter: still around?

[07:58] *** mico joined
[07:59] *** diakopter joined
[08:03] *** daxim joined
[08:20] <svnbot6> r16695 | Darren_Duncan++ | ext/Muldis-DB/ : updated Operators.pm, fixed bugs in AST.pm and PhysType.pm

[08:27] *** dduncan left
[08:44] <svnbot6> r16696 | tene++ | Minor change in tutorial.

[08:46] *** diakopter is now known as diakopter_afk

[08:47] <Tene> yay, git-svn works!

[08:47] <Aankhen``> Wassat?

[08:53] <Tene> use svn repositories through git.

[08:56] <Aankhen``> Ah.

[08:56] <Aankhen``> I wonder how many different SCM systems are actually used to interface with the Pugs repo.

[09:06] *** BenjaminZou joined
[09:33] *** buetow joined
[09:36] *** Southen_ joined
[09:43] *** isaacd joined
[09:44] *** chris2 joined
[10:18] *** rfordinal_ joined
[10:33] *** gaal joined
[10:48] *** lidden joined
[10:59] *** ruz joined
[11:17] *** lumi joined
[11:45] *** nipotan is now known as nipotaway

[12:00] *** araujo joined
[12:06] *** Lunchy joined
[12:12] *** diakopter_afk is now known as diakopter

[12:35] *** qmole joined
[12:42] *** BooK_ joined
[12:52] *** isaacd_ joined
[13:05] *** ofer joined
[13:34] *** unobe_away joined
[13:51] *** diakopter is now known as diakopter_afk

[14:04] *** diakopter_afk is now known as diakopter

[14:11] *** explorer joined
[14:18] *** vel joined
[14:25] *** ruoso joined
[14:34] *** BooK joined
[14:57] *** fglock joined
[14:59] <fglock> TimToady: re "write me a regex engine in Haskell tonight" - http://svn.pugscode.org/pugs/perl5/Pugs-Compiler-Rule/lib/Pugs/Emitter/Rule/Parsec.pm might be a good starting point for a quick implementation

[14:59] <lambdabot> http://tinyurl.com/24mutj

[15:10] *** deq` joined
[15:14] *** REPLeffect joined
[15:18] *** perljunkie joined
[15:20] *** kanru joined
[15:30] *** buetow joined
[15:31] *** iblechbot joined
[15:49] *** mj41 joined
[15:56] *** fglock joined
[15:58] *** diakopter joined
[15:58] *** marmic joined
[16:02] *** franck__ joined
[16:04] *** agentzh joined
[16:04] *** charsb___ joined
[16:04] <agentzh> Aankhen``: no, i'm no longer seeing the strange onload behaviour in the smartlinked pages. you've fixed it? hehe

[16:04] <lambdabot> agentzh: You have 1 new message. '/msg lambdabot @messages' to read it.

[16:05] <agentzh> @messages

[16:05] <lambdabot> moritz said 2d 3h 1m 31s ago: I converted your chinese translation of S01 to HTML using Pod::Tree::HTML, and the output is horribly garbeled <http://moritz.faui2k3.org/pugs/docs/zh-cn/syn/S01.pod.

[16:05] <lambdabot> html> - do you know any pod2html converter that can handle your pod?

[16:05] <agentzh> moritz: i've been using Pod::Simple::HTML here: http://perlcabal.org/syn/zh-cn/S01

[16:05] <lambdabot> Title: S01

[16:05] <agentzh> moritz: it looks fine to me :)

[16:06] <agentzh> the Chinese version of S01 is in UTF-8.

[16:06] <sunnavy> agentzh: will you translate all of syns?

[16:07] <agentzh> sunnavy: well, not really

[16:08] <agentzh> but i do love to help ;)

[16:08] <agentzh> .oO( translating is a daunting task )

[16:09] <agentzh> afaik, fayland has translated most of the synopses to Chinese in his personal repos: http://www.fayland.org/Perl6/Synopsis/zh_cn/

[16:09] <lambdabot> Title: Index of /Perl6/Synopsis/zh_cn

[16:09] <agentzh> it's a bit old though

[16:09] <agentzh> he did the translation in early days of pugs.

[16:10] <sunnavy> I think it's a bit hard to translate

[16:11] *** barney joined
[16:11] <agentzh> pretty hard

[16:11] <agentzh> i've finished a Chinese transcript for S26

[16:11] <agentzh> in my notebook

[16:11] <agentzh> haven't entered them into my machine...

[16:12] <agentzh> but...translating is a good way to study the synopses...

[16:12] <moritz> agentzh: thanks, I'll have a look at it

[16:12] <sunnavy> especially some technical terms, it's hard to find corresponding chinese words.

[16:12] <agentzh> audreyt used to learn by translation...

[16:12] <agentzh> moritz: okay :)

[16:12] <agentzh> sunnavy: indeed!

[16:13] <agentzh> i've been creating terms along the way

[16:14] <agentzh> The slides for my talk "Contribute to Pugs" at YAPC::Beijing 2007 is now on feather:

[16:14] <sunnavy> I read syns last year but not finished, and I am going read through them soon.

[16:14] <agentzh> http://perlcabal.org/agent/slides/contr_pugs/contr_pugs.xul

[16:14] <agentzh> sunnavy: great

[16:15] <agentzh> sunnavy: maybe you can submit a lot of patches to p6l while reading

[16:15] <agentzh> that's what i did.

[16:15] <sunnavy> what's p6l?

[16:15] <moritz> perl6-language

[16:15] <moritz> the mailing list

[16:15] <agentzh> mailing list

[16:16] <sunnavy> well, wish I will :-)

[16:16] <moritz> [email@hidden.address]
[16:16] <agentzh> see http://dev.perl.org/perl6/lists/ for other info

[16:16] <lambdabot> Title: Mailing Lists - perl6

[16:16] <sunnavy> your presentation on YAPC::Beijing 2007 is great, I love that.

[16:16] <agentzh> sunnavy: thanks!

[16:16] <agentzh> sunnavy: do you have a commit bit to pugs?

[16:17] <sunnavy> no

[16:17] <moritz> want one?

[16:17] <sunnavy> sure :-)

[16:17] <agentzh> wow, moritz is faster than me ;)

[16:18] <moritz> sunnavy: /msg agentzh your email address, and he'll invite you

[16:18] <sunnavy> agentzh: do you like BBS?

[16:18] <sunnavy> moritz: thanks

[16:18] <moritz> I would if my proxy timeout wasn't that tight :(

[16:19] <agentzh> sunnavy: not very

[16:21] <agentzh> sending out commit bits is no longer a trivial task these days...

[16:21] <moritz> yay, commitbit works for me, so you can send me your email as well (if you want two accesses ;-)

[16:22] <agentzh> moritz: commit bit sent?

[16:22] <agentzh> it's very slow here...

[16:23] <sunnavy> ok, I'll send my email to moritz.

[16:24] <moritz> sunnavy: ok, tell me if the mail arrived. If it did not arrive in 15min or something I'll retry

[16:26] *** ayrnieu joined
[16:27] <sunnavy> moritz: I got it :-)

[16:28] <sunnavy> thanks

[16:28] <agentzh> sunnavy: add your name to AUTHORS to test the commitbit

[16:28] <sunnavy> ok

[16:28] <agentzh> and...welcome aboard!

[16:29] <sunnavy> I'm glad to help. I love Perl.

[16:29] <agentzh> yay

[16:32] *** amnesiac joined
[16:33] <agentzh> wow, 162 people in the room...

[16:33] <agentzh> more than before...it used to be 148 or so.

[16:34] <moritz> agentzh: more people reading our bullshit? *g*

[16:34] <agentzh> lol

[16:36] <moritz> and I have about a hundret hits per day on the web irc logs

[16:36] *** fglock joined
[16:36] <agentzh> that's cool

[16:37] <agentzh> moritz: when will full-text search land to your irclog?

[16:37] <moritz> agentzh: good question... next question... ;)

[16:37] <agentzh> will the search results be properly paged?

[16:38] <moritz> which of those two features would you like to have implemented first? *g*

[16:38] * agentzh dodges.

[16:39] <moritz> I think the paging is easier to implement for a start

[16:40] <agentzh> that might be

[16:40] *** jisom joined
[16:40] *** justatheory joined
[16:41] <agentzh> end of day for me &

[16:41] *** agentzh left
[16:47] <svnbot6> r16698 | sunnavy++ | add sunnavy to AUTHORS

[16:48] <sunnavy> seems commit bit worked :-)

[16:48] <moritz> yay

[16:48] <moritz> sunnavy++

[16:48] *** drupek12 joined
[16:48] <sunnavy> thanks, moritz

[16:49] <sunnavy> or should I say moritz++ ?

[16:49] <moritz> whatever you want ;)

[16:49] <sunnavy> moritz++

[16:51] <sunnavy> I'll dive into pugs and do something soon, wish the `something' is not bad ;-)

[16:53] <moritz> sunnavy: are you more a perl or more a haskell coder?

[16:54] <sunnavy> moritz: perl

[16:55] <sunnavy> I know a bit about haskell but I don't think that's enough to hack pugs :-)

[16:55] <TimToady> even perl programmers are welcome here.  :)

[16:56] <moritz> sunnavy: same for me.. maybe you/we could help fglock with kp6...

[16:56] <moritz> or helping the parrot folks to reorganize/verify/update the test suite

[16:56] *** chris2 joined
[16:57] <[particle]> last night at seattle.pm somebody mentioned that he started coding perl so he didn't have to write large c programs anymore.

[16:58] <sunnavy> TimToady: so much honour to you! I love your language very much.

[16:58] <[particle]> i recalled that i started for the same reason.

[16:58] <[particle]> then i realised that i'm now writing a large c program (parrot)

[16:58] <pmichaud> me also

[16:58] <[particle]> ...so i can program in perl!

[16:58] <pmichaud> (perl to avoid writing large C programs :-)

[16:59] <sunnavy> moritz: I'll make a dicision soon, but not now :-)

[16:59] <moritz> sunnavy: ok

[17:00] <moritz> ... what was perl written in again? *g*

[17:00] <Jmax> MS VB?

[17:03] *** weinigLap joined
[17:07] <TimToady> It's all about being Lazy rather than lazy.

[17:08] <TimToady> People who are Lazy work very hard at it.

[17:10] <shachaf> TimToady: Haskell is very Lazy. :-)

[17:10] <[particle]> you mean i have to use the shift key? i'll stick with lazy :P

[17:11] <[particle]> btw i won't be doing much string concatenation in perl 6. ~ is hard to reach.

[17:14] <Tene> [particle]: just remap it to your 'a' key

[17:15] <TimToady> ++ is twice as hard as ~

[17:15] <spinclad> for me it's RAlt+Shift+~, which is a bit of a stretch for one hand

[17:15] <TimToady> (well, not really...)

[17:15] <TimToady> in any case, I don't mind discourage people a bit from using ~

[17:15] <TimToady> *discouraging

[17:16] <TimToady> usually it's much more readable to use interpolation

[17:17] <[particle]> yeah, even though interpolation requires shift to get a quoting op, my muscle memory takes care of that, and i only need two quotes when i may need multiple tildes

[17:17] <spinclad> ?eval ~ reverse 4!

[17:17] *** evalbot_r16681 is now known as evalbot_r16698

[17:17] <evalbot_r16698> Error: ␤Unexpected "!"␤expecting "_", fraction, exponent, term postfix, operator, ":" or ","

[17:18] <TimToady> O(2) often beats O(n) for large values of n

[17:18] <TimToady> it's tempting to make postfix:<!> a builtin

[17:18] <fglock> I need help with a piece of perl 5 code - http://svn.pugscode.org/pugs/v6/v6-KindaPerl6/lib/KindaPerl6/Perl5/Pad.pm

[17:18] <lambdabot> http://tinyurl.com/ysae7e

[17:18] <TimToady> I don't know anything about Perl 5

[17:19] <fglock> I guess the equivalent Perl 6 code will have the same problem

[17:19] <fglock> which is how to create closures incrementally

[17:19] <spinclad> ?eval sub postfix:<!> { [*] ^ $^n }; ~ reverse 4!

[17:19] <evalbot_r16698> Error: ␤Unexpected "!"␤expecting "_", fraction, exponent, term postfix, operator, ":" or ","

[17:19] <fglock> as in the compiler environment with BEGIN blocks and declarations

[17:20] <fglock> I've got working code, but it could look better

[17:21] <spinclad> oop

[17:21] <spinclad> ?eval sub postfix:<!> { [*] ^ $^n }; reverse ~ 4!

[17:21] <evalbot_r16698> Error: ␤Unexpected "!"␤expecting "_", fraction, exponent, term postfix, operator, ":" or ","

[17:23] *** Mankod joined
[17:23] *** Psyche^ joined
[17:29] <TimToady> sorry, a bit distracted today; one of our kitties is in the final stage of kidney failure and will probably not last till tomorrow... :(

[17:29] *** justatheory joined
[17:35] <fglock> TimToady: sorry about that

[17:35] <fglock> TimToady: I think I found a way to fix the technical problems I had with my p6regex-to-p5regex compiler (backtracking with large match objects was expensive)

[17:36] <TimToady> cool!

[17:37] * spinclad says metta for kitty

[17:37] <TimToady> spinclad: you want:

[17:37] <TimToady> ?eval sub postfix:<!> ($n) { [*] 1..$n }; reverse ~ 4!

[17:37] <evalbot_r16698> "42"

[17:38] <TimToady> placeholders don't work there yet

[17:38] <TimToady> and [*] ^$n is always 0

[17:38] <Tene> Heh.

[17:40] <spinclad> ah.  (right: 1 +>> ^ $^n or so.)  here i was enjoying the confusing flow of punctuation...

[17:40] *** Psyche^ is now known as Patterner

[17:41] *** rindolf joined
[17:42] <TimToady> according to current spec ^$n + 1 should do that too

[17:42] <TimToady> but we don't really have Range objects yet

[17:43] <[particle]> $deer..$antelope

[17:44] *** justatheory joined
[17:45] <spinclad> $home ~~ ^$^n

[17:45] *** justatheory joined
[17:46] <TimToady> shouldn't that be $home x 2

[17:47] <spinclad> and in o/~ brackets o/~

[17:49] <spinclad> o/~ ($Home x 2, $deer, $antelope) ~~ ^$^n o/~

[17:50] <spinclad> loses a bit in this recension, maybe

[17:50] <TimToady> that's a discouraging word

[17:51] <spinclad> :(

[17:51] <TimToady> fortunately it's seldom heard

[17:51] <[particle]> $skies !~~ 'cloudy all day'

[17:52] *** ruoso joined
[17:52] *** vel joined
[17:53] <spinclad> for @day -> $_ { !cloudy(@skies) }

[17:55] <lidden> ?eval sub postfix:<!> ($n) { [*] 1..$n }; 0!

[17:55] <evalbot_r16698> 1

[17:56] <lidden> ?eval sub postfix:<!> ($n) { [*] 1..$n }; -1!

[17:56] <evalbot_r16698> 1

[17:57] <spinclad> lost a pole

[17:57] <spinclad> ?eval sub postfix:<!> ($n) { [*] 1..$n }; 0.5!

[17:57] <evalbot_r16698> 1/1

[17:57] <spinclad> damnit.  i wanted 1/sqrt(pi) or whatever it is

[17:58] <diakopter> Tene: returning your msg

[17:58] <TimToady> -1! should have come out -1 because ! should have defaulted to ++ precedence

[17:58] <TimToady> which is tighter than -

[17:58] <Tene> diakopter: you were mentioning having commitbit open right before.  The person asking for commit access seemed to finally have his client situation sorted out.

[18:00] <[particle]> how would you assert than $n is a positive integer?

[18:00] <Tene> 'where'

[18:00] <[particle]> i mean, what's the perl 6 idiom for that, in a subroutine definition

[18:00] <Tene> I believe

[18:00] <Tene> subset

[18:01] <[particle]> foo (Int $n where $n >= 1)?

[18:03] <Tene> I believe so.  Might want to check synopses.  Don't know if pugs implements it yet.

[18:04] <[particle]> yeah, that's what i'd do if i weren't lazy :)

[18:12] *** dduncan joined
[18:14] *** isaacd__ joined
[18:17] * fglock wonders how to split big questions into smaller answerable things

[18:18] <moritz> fglock: use split() ;-)

[18:21] <fglock> may I try to explain the problem to you? this would help me to write a readable question

[18:22] <moritz> fglock: of course

[18:22] <moritz> though I'll probably not able to answer it ;)

[18:23] <fglock> when the compiler finds this:  {  my $x;

[18:24] <fglock> it needs to construct a runnable representation

[18:24] <fglock> one way to do it is:  $env = eval ' sub { $x } '

[18:25] <fglock> I mean: $env = eval ' sub { my $x } '

[18:25] <fglock> ok?

[18:26] <moritz> I don't quite understand why that works

[18:26] <moritz> $env is closure after that, right?

[18:26] <moritz> does this do scoping right?

[18:27] <fglock> yes - $env is a representation of the current state of the program under compilation

[18:27] <moritz> but doesn't that overwrite existing variables in that (dynamic) scope?

[18:28] <moritz> or are they stored in another $env?

[18:28] <fglock> no, because the variables only exist inside the closure 

[18:29] <moritz> but other could, that were previously stored in $env

[18:29] <fglock> things outside $env are not affected, so the compiler and the program don't mix (much)

[18:29] <moritz> ok

[18:29] <fglock> yes, I'll get there

[18:29] <moritz> go ahead, then

[18:30] <fglock> the compiler proceeds, and it sees the next statement:  {  my $x; BEGIN { $x = 1 }

[18:31] <fglock> now you have to tell $env to change the value in $x

[18:31] <fglock> you can't to this easily, so I wrote a module that works around it

[18:32] <moritz> is it really a good idea to store local variables in closures?

[18:32] <moritz> as opposed to, say hashes?

[18:33] <fglock> that's the point - I don't really know; I'd like to discuss that

[18:33] <fglock> one advantage of closures is that you can execute real code inside them

[18:33] <fglock> hashes would require some emulation

[18:33] <moritz> and they are fast, I presume

[18:34] <fglock> otoh, closures require an eval(), which can be expensive

[18:34] <moritz> but you could store ASTs in the hashes, and execute / emit them when you need the value

[18:35] <moritz> was  that the question you wanted to ask initially?

[18:36] <fglock> yes - I have a working implementation, but I'd like to sanity check the architecture

[18:38] <moritz> so how much magic (or braindamage) do you need to modify the closures?

[18:38] <fglock> re AST - I keep both the AST and $env, because I need them for different things

[18:39] <fglock> it's easier to explain if you look at the code

[18:39] <moritz> in v6-KindaPerl6 ?

[18:40] <fglock> http://svn.pugscode.org/pugs/v6/v6-KindaPerl6/lib/KindaPerl6/Perl5/Pad.pm

[18:40] <lambdabot> http://tinyurl.com/ysae7e

[18:41] <moritz> looking...

[18:41] <moritz> so this is specific to the Perl5 backend, right?

[18:42] <fglock> it's a prototype, I'll rewrite it in MiniPerl6

[18:43] <moritz> so you are limiting possible backends to languages that have closures?

[18:44] <fglock> yes, but languages that don't have closures would have to emulate anyway; this is solved at the MiniPerl6 level

[18:44] <moritz> ok

[18:44] <fglock> you create a Pad with something like: my $env1 = Pad->new( outer => undef, lexicals => [ ::Var(...) ] );

[18:44] <fglock> where ::Var is the AST for a variable

[18:45] <moritz> ok

[18:45] <moritz> the could is very readable

[18:45] <moritz> s/could/code/

[18:45] <fglock> outer is a possible outer pad

[18:45] <moritz> or undef if none

[18:46] <fglock> you add more lexicals with: $env1.add_lexicals( [ ::Pad(...) ] )

[18:47] *** iblechbot joined
[18:47] *** buetow joined
[18:48] <fglock> the hack is that when the closure is defined, it returns a sub that does an eval()

[18:48] <moritz> which sounds scary

[18:48] <fglock> this way you can execute things in the closure environment

[18:48] <moritz> but that again is very perl5 specific, isn't it?

[18:49] <fglock> it works under Perl 6 too

[18:49] <fglock> which is what I need, for 6-in-6

[18:49] <moritz> ok ;)

[18:50] <fglock> correction - you add more lexicals with: $env1.add_lexicals( [ ::Var(...) ] )

[18:51] <moritz> that makes more sense, yes

[18:53] <spinclad> (having read Pad.pm -- yes, it's good clear code)

[18:53] <fglock> this way, you have access to the whole pad stack, with introspection; and you can incrementally execute code inside that environment

[18:54] <moritz> sounds clever, but somwhat... still scary ;)

[18:54] <spinclad> it makes sense to me you have to build an 'evaluator' closure

[18:55] <moritz> *shudder* somebody on #debconf just posted and `uptime` output - with a load > 3000 ;)

[18:56] <moritz> on one of the debian webservers

[18:56] <spinclad> i could imagine that on a Thinking Machine, with its N thousand processors...

[18:57] <fglock> moritz: what does it mean?

[18:57] <rindolf> Hi moritz 

[18:57] <moritz> fglock: maybe you could/should ask the same question on p6c, perhaps partly using copy&paste from the irclogs...

[18:57] <moritz> fglock: if you break down that "compiler review" question into smaller questions that can be answered in half an hour each, you'll get more feedback

[18:58] <moritz> load = number of processess waiting for CPU and/or IO resources

[18:58] <fglock> ok - I'll try this question first

[18:58] <fglock> then I'll come back here with the other ones :)

[18:59] <moritz> of course ;)

[19:00] <spinclad> ... and i see you're taking advantage of Perl 5's  eval($expr)  in a package context ...

[19:01] <moritz> fglock: and be sure to add the direct link to Pad.pm ;)

[19:01] *** unobe_away is now known as unobe

[19:02] <fglock> spinclad: yes, it needs to execute in the appropriate run-time package - the current package is the compiler's one

[19:02] <fglock> s/package/namespace/

[19:05] <fglock> what's the appropriate mailing list? perl6-language is generic, and perl6-compiler is for Parrot things, right?

[19:06] <spinclad> ... i look for a way to build a Perl 5 structure for the pad, have a fixed algorithm to lookup($var) in it, and build up translated expressions with $var ==> lookup($var)

[19:06] <moritz> no, parrot folks have their own mailing list

[19:06] <pmichaud> definitely not perl6-language

[19:06] <pmichaud> perl6-compiler would seem most appropriate.  It's not necessarily Parrot specific

[19:07] <fglock> pmichaud: ok

[19:07] <moritz> fglock: I think p6c is fine

[19:07] *** obvio171 joined
[19:08] <fglock> spinclad: thanks :)

[19:09] <fglock> pmichaud: I wonder if you had a similar problem in parrot

[19:09] <pmichaud> I haven't been following the discussion that closely

[19:09] <pmichaud> chances are that I haven't encountered the problem in parrot, though

[19:10] <fglock> in short, how do you handle the compiling environment - where do you store lexical things that were just compiled

[19:11] <fglock> such that BEGIN block can see it

[19:11] <fglock> blocks

[19:11] <pmichaud> oh.  I haven't dealt with that yet

[19:12] <fglock> cool - we could try to find that out together :)

[19:12] <pmichaud> indeed!

[19:13] <fglock> I have a working fix, but it looks too complicated

[19:13] <spinclad> whatever structure (AST) you translate code into, you need to be able to .eval it and capture its effects in the compiler, as well as defer that to runtime

[19:14] <pmichaud> spinclad: exactly.  That makes it a bit tricky :-)

[19:14] <fglock> spinclad: yes

[19:14] <fglock> pmichaud: this covers 2/3 of my question in the list :)

[19:15] <fglock> the other 1/3 is easier

[19:16] <fglock> pmichaud: if you have some time, I'd love to guide you through kp6

[19:17] <pmichaud> fglock: I'll be happy for a tour, but it may be Friday before I can easily get to that

[19:17] <fglock> sure

[19:18] <pmichaud> fglock: if not Friday or Sat, it may need to wait until Tuesday

[19:18] <pmichaud> I'm trying to get all of my stuff ready for YAPC::NA 

[19:18] <fglock> np - I need kp6 for YAPC::EU :P

[19:19] <moritz> I'll to to be there (EU)

[19:19] <fglock> moritz: cool

[19:19] <moritz> s:1st/to/try/

[19:20] *** pbuetow joined
[19:20] <fglock> pmichaud: I'm looking for a more solid architecture, which would allow kp6 to evolve to full-p6

[19:23] <pmichaud> fglock: sure thing -- walking through kp6 would probably help both of us in that respect

[19:25] <fglock> pmichaud: I found a way to plug PGE into the architecture, such that kp6-parrot can use it (and I need to update the plan)

[19:25] <pmichaud> oh, excellent!

[19:25] <pmichaud> I just added (but haven't committed) some features to PGE to let it handle things like {*} at runtime :-)

[19:26] *** theorbtwo joined
[19:26] <fglock> can you plug a language parser for the thing inside {...} ?

[19:26] <fglock> PCR does this with subclassing

[19:26] <pmichaud> yes

[19:27] <fglock> nice

[19:27] <pmichaud> you can pass another object that has methods to be called when the {*} is encountered

[19:30] <fglock> interesting - how about multiple {*} occurrences?

[19:30] <pmichaud> it understands the "#= key"  comments as well

[19:30] <pmichaud> and passes the key to the method

[19:30] <fglock> :)

[19:30] <pmichaud> so then the method can switch off of the key

[19:32] <fglock> looks useful - it will end up being specced :)

[19:36] <svnbot6> r16699 | moritz++ | [irclog] fixed adding of linebreaks to long URLs to prevent horizontal

[19:36] <svnbot6> r16699 | moritz++ | scrolling

[19:54] <fglock> pmichaud: {*} should actually be removed by a preprocessor; implementing it is a workaround, right?

[19:54] <pmichaud> fglock: I'm thinking {*} might end up in the spec

[19:55] <pmichaud> there could be some advantages to being able to call a grammar with its actions disabled

[19:55] <spinclad> a preprocessor could replace it with its method call, perhaps?

[19:56] <spinclad> and an underived grammar would have those methods as stubs

[19:56] <pmichaud> at any rate, calling {*} when no special object is passed equates to a no-op, as if it had been removed by a preprocessor

[19:57] <pmichaud> (or an empty method stub)

[19:57] <TimToady> in theory, the only effect {*} has to have is to terminate a longest-token match

[19:58] <pmichaud> as PGE currently has it, it would be able to do this

[19:58] <TimToady> so a preprocessor might need to treat it as a ::

[19:58] <pmichaud> essentially PGE is saying that it'll understand {*} even if it's not preprocessed out, and do something intelligent with it

[19:58] <TimToady> sounds good

[19:59] <pmichaud> and thus we can compile the grammar even if it has {*} in it, and use different "backends" for the stubs at runtime

[19:59] <pmichaud> this turned out to be easier (for now) than writing the preprocessor :-P

[19:59] <TimToady> phone call?

[20:00] <pmichaud> earlier I was playing with using something like  {*#<key>}   instead of {*} # =key

[20:00] <pmichaud> but as it stands now, PGE uses the #= key format

[20:00] <pmichaud> (phone...on my way)

[20:01] *** justatheory joined
[20:01] <fglock> hmm -  &{ action() }

[20:01] *** vel joined
[20:07] *** tlb joined
[20:09] <PerlJam> fglock: {*} is much simpler than &{ action() }

[20:09] <PerlJam> :-)

[20:11] <fglock> yes, but it adds yet another type of comment

[20:11] <fglock> how about {*(key)}

[20:12] <fglock> or simply <action(key)>

[20:12] <fglock> this is very regexy

[20:12] <pmichaud> isn't   #<foo> a comment already?

[20:14] *** japhb joined
[20:15] <fglock> I mean, why not introduce a new word for "action"; comments are "out of the language"

[20:15] <fglock>  <action {...}>

[20:16] <fglock>  <action {*}>   # placeholder

[20:16] <PerlJam> What was ... meant to be exactly?

[20:16] <PerlJam> actual code?

[20:16] <fglock> yes

[20:17] <PerlJam> in what language?

[20:17] <fglock> the language is pluggable, just like normal {...}

[20:19] <fglock> placing the {...} inside <action> makes it possible to turn the {...} execution on/off

[20:19] <fglock> it's just a conditional

[20:19] <pmichaud> this would mean that <action ...> needs special parsing, to be able to add the rule name into the call

[20:20] <fglock> yes, or you can use <action: {...}>

[20:20] <PerlJam> not putting actual code in the grammar also allows the exact same grammar to be used with multiple languages easily.

[20:22] <pmichaud> regexes already allow other languages to be in the {...}  via the :lang adverb

[20:22] <fglock> you could use a method for that; language-specific inheritance will define the actual code

[20:23] <[particle]> ho! look what i walked in on. time for a trip to scrollbackland!

[20:24] <fglock> I was missing the old long technical discussions :)

[20:24] <moritz> fglock: time for YAPC ;)

[20:25] <pmichaud> not putting actual code in the grammar allows allows the grammar to be re-purposed for different purposes easily (yes, subclassing can do this also)

[20:25] <pmichaud> (however, subclassing also requires re-writing the rule)

[20:25] <fglock>  <my_action>  # subclassable

[20:25] *** thoughtpolice joined
[20:25] <pmichaud> fglock:  how would you distinguish

[20:25] <fglock>  <My::action>  # defined at link-time 

[20:25] * PerlJam suddenly expects Damian to appear and start PODing the grammar  (speaking of re-purposing things :)

[20:25] <pmichaud> regex foo { foo <my_action> }

[20:26] <pmichaud> regex bar { bar <my_action> }

[20:26] *** weinigLap_ joined
[20:27] <fglock> it's actually: regex bar { bar <bar_action> }   # if it is a different action

[20:27] <thoughtpolice> anybody have a particular news reader they like? i've been trying to find one; if it runs from the terminal then the better I suppose. :)

[20:27] <fglock> just like a different comment

[20:27] <pmichaud> fglock:  and how do we indicate that it's okay for <bar_action> to be missing?

[20:28] <pmichaud> part of the point of {*} is that it's okay to have a null action

[20:28] <PerlJam> pm:  <> seems logical in fglock's fantasy

[20:28] <pmichaud> fglock:  and do we really want....

[20:28] <pmichaud> rule prefix_meta_infix:sym<*> { <sym>  <prefix_meta_infix_action> }   ?

[20:28] <fglock> pmichaud: maybe with:  method bar_action {*}

[20:28] <PerlJam> in any case, regex foo { foo <foo_action> } regex foo_action { ... }  # could cause some accidental conflict if we aren't careful.

[20:29] <Aankhen``> @tell agentzh I didn't fix it… I couldn't even reproduce it. :-S

[20:29] <lambdabot> Consider it noted.

[20:29] <PerlJam> {*} has the benefit of being ordinarily illegal (except for the specific purpose of being ignored or substituted)

[20:30] <[particle]> fglock: pmichaud briefly considered: action bar {...}

[20:30] <pmichaud> anyway, I'm sticking with {*} until Larry changes it :-)

[20:30] *** offby1 left
[20:30] <fglock> pmichaud: sure

[20:30] <[particle]> but i like {*}, and it's what's specced anyway?

[20:30] <[particle]> s/\?/:\)/

[20:30] <pmichaud> actually, I don't think {*} is "specced" outside of STD.pm yet

[20:30] <PerlJam> yeah, specced by convention

[20:30] <[particle]> de facto

[20:31] <[particle]> the head cheese put it in writing.

[20:31] <pmichaud> PGE goes a step further by actually parsing it in non-preprocessed-regexes and doing something with it

[20:31] *** riffraff joined
[20:31] <moritz> specced the perl 5 way 

[20:31] <pmichaud> as opposed to having a pre-processor do it

[20:31] <riffraff> hi

[20:31] <moritz> hi riffraff 

[20:31] <[particle]> pmichaud: is it desirable to make that configurable?

[20:31] <pmichaud> [particle]: configurable how?

[20:32] <PerlJam> [particle]: if a preprocessor has gotten to it before PGE, there's nothing to configure  :)

[20:32] <pmichaud> you mean, such that PGE strictly honors the spec and treats {*} as a closure?  Sure

[20:32] <[particle]> well, i suppose preprocessor selection, but maybe pge won't control that

[20:32] <[particle]> and yes, also what you said

[20:32] <fglock> pmichaud: in any case, if you are doing it the OO way there is no need for {*} or <action>; it just works

[20:32] <[particle]> that's what i was initially thinking of.

[20:34] *** Alias_ joined
[20:42] *** mico joined
[21:09] *** explorer joined
[21:12] *** polettix joined
[21:13] *** jferrero joined
[21:14] *** hirschnase joined
[21:21] *** explorer joined
[21:31] <dduncan> Do any of you know of a web-connected perltidy utility, so one can just paste perl code into a form and have it processed by the site ... as an alternative to installing perltidy on one's own machine?

[21:32] <[particle]> maybe a nopaste somewhere?

[21:32] <moritz> dduncan: I could set one up, it would just take me some time

[21:33] <dduncan> don't worry about it

[21:33] <dduncan> and I didn't think of nopaste, since this was just for my own reading, not for sharing ... though I could pick a bogus channel

[21:34] <[particle]> some nopastes allow you not to specify a channel at all

[21:34] <dduncan> or it has a 'none' option ... nice

[21:37] <dduncan> hm, the 2 pastebots I tried didn't have any filtering options ... will look for others ...

[21:39] *** weinigLap joined
[21:39] *** [particle] joined
[21:44] <meppl> good night

[21:47] *** Limbic_Region joined
[21:48] <pasteling> "test" at 24.69.53.198 pasted "test" (76 lines, 1.7K) at http://sial.org/pbot/25693

[21:48] <dduncan> oops

[21:48] <dduncan> forgot 'none'

[21:49] <dduncan> anyway, I got it to work, thanks anyone

[22:16] <Yaakov> This is a great spot.  I really like it.  http://www.youtube.com/watch?v=ANfFwFqTS9o

[22:18] *** Psyche^ joined
[22:18] *** Psyche^ is now known as Patterner

[22:18] *** ibrown joined
[22:18] <ibrown> what's good guys?

[22:18] *** Psyche^ joined
[22:18] *** Psyche^ is now known as Patterner

[22:18] <ibrown> i got a question, i tried to add a smartlink, how do i check it's correct before commit?  i did a svn committ but the url: http://dev.perl.org/perl6/doc/design/syn/S02.html doesn't reflect the changes.

[22:18] <lambdabot> Title: Synopsis 2: Bits and Pieces - perl6:

[22:19] <Tene> ibrown: that's updated daily, I believe.

[22:19] <moritz> ibrown: see t/README

[22:19] <[particle]> ibrown: i think there's an option on smartlinks.pl to check your links

[22:19] <ibrown> yeah i did the commit this am, or last night i thought.  just didn't know if there was a better way to verify the smartlink was in place right.

[22:20] <ibrown> yeah there's a --check option... it outputs a file called S26.html in whatever dir i run it in tho

[22:20] <ibrown> after it states, "3 smartlinks found 0 errors"

[22:20] <moritz> which means it worked ;)

[22:20] <ibrown> cool.

[22:20] <ibrown> i was more worried about placement ;)

[22:21] <moritz> ibrown: ah, that. Look at http://perlcabal.org/syn/

[22:21] <moritz> that's where you can see the smartlinks

[22:22] <ibrown> oh awesome.

[22:22] <ibrown> i can see where it added the counter test to S02.

[22:22] <ibrown> that test passed on my box tho, that's where the make smoke comes in?

[22:22] <Tene> Maybe we should set it to be rebuilt on every svn commit.  feather can handle the extra load, right? ;)

[22:22] <moritz> Tene: no, it can't :(

[22:22] <[particle]> at the current rate of commits? sure! :P

[22:22] <moritz> ibrown: there's a daily smoke on feather.perl6.nl

[22:23] <moritz> ibrown: that provides the success/failure markings

[22:23] <perljunkie> I have one application. It is split into 2 parts. A data collection suite, and data explorer. Currently split into 2 databases. generally. Would a 1 or 2 database design be standard?

[22:23] <moritz> ibrown: and your own reports are at smoke.pugscode.org

[22:23] <perljunkie> damn. wrong channel. sorry

[22:25] <ibrown> well.  it appears as if i get it now.

[22:25] <ibrown> hoorah.

[22:25] *** lambdabot joined
[22:25] <ibrown> nifty process from what i can tell too.  

[22:26] <moritz> indeed ;)

[22:26] <moritz> Aankhen``++ , agentzh++

[22:27] <[particle]> (spec-based testing)++

[22:28] <ibrown> what's the integers on the http://m19s28.vlinux.de/cgi-bin/pugs-smokeserv.pl page.  after the % ok? is that test-suite information?  like # passed vs. # failed etc?

[22:28] <lambdabot> Title: Pugs Smoke Reports

[22:32] <moritz> looking...

[22:32] <Limbic_Region> ibrown - number of tests total, passed, etc

[22:32] <ibrown> rgr

[22:32] <Limbic_Region> if you click the >> link to expand the view

[22:32] <Limbic_Region> it will make much more sense

[22:32] <moritz> pugs revison : spec revison  fail pass todo

[22:33] <moritz> or something

[22:33] <Limbic_Region> nope

[22:33] <Limbic_Region> after the %

[22:33] <Limbic_Region> not before

[22:33] <moritz> Pugs 6.2.13    18 Oct 2006 02:09 Wed  90.03 min  100.00 % ok  17954:  17954,  0,  4638,  747,  0

[22:33] <[particle]> oh, yeah.

[22:33] <moritz> there the 17954 look like revison numbers to me

[22:33] <[particle]> revision first

[22:34] <Limbic_Region> total test case, passed cases, failed cases, todo cases, skipped cases, unexpectedly succeeded cases

[22:34] <[particle]> then failed, total, todo, skipped, iirc

[22:34] <[particle]> right, unexpected success, thanks lr

[22:34] <ibrown> so from what i can tell PIR is perl6 on parrot, which is the way i've got pugs running i thought... so the last make-smoke done on a linux kernel was 10 feb 2k7.  maybe you need a new smoke?

[22:34] <Limbic_Region> oh, my eye just skipped over the rev:

[22:34] <Limbic_Region> heh

[22:34] <moritz> ibrown: not quite

[22:34] <moritz> ibrown: PIR is just parrot assembler

[22:35] <moritz> ibrown: and the PIR backend of pugs is currently b0rked

[22:35] <[particle]> right-o

[22:35] <ibrown> oh.

[22:35] <Limbic_Region> actually, ibrown is talking about "PIR (Perl 6 on Parrot)"

[22:35] <moritz> ok

[22:35] <Limbic_Region> which if I had waited for moritz to finish

[22:36] <Limbic_Region> and the PIR backend of pugs is currently b0rked

[22:36] <Limbic_Region> It wouldn't have mattered

[22:36] * Limbic_Region is slow on the uptake today

[22:36] <moritz> and Perl 6 on Parrot lives in the parrot repository

[22:36] <moritz> in languages/perl6/

[22:36] <Limbic_Region> ibrown - the good news is that pmichaud has a perl 6 implementation on parrot written in PGE that is now passing all the sanity tests

[22:36] <Limbic_Region> and very soon going to be taking on the rest of the perl 6 test suite in pugs

[22:37] <Limbic_Region> again, moritz is beating me to the punch

[22:38] <moritz> ;)

[22:38] <Limbic_Region> and even better news is that pmichaud has been gaining ground with contributors

[22:38] <[particle]> i'm modifying Test.pm in perl6/parrot now, and pm is writing a script to download selective tests from the pugs repo

[22:38] <[particle]> soon you'll be able to write perl 6 in perl 6, on parrot

[22:39] <moritz> you can do that with kp6/mp6 as well

[22:39] <moritz> on perl6, that is

[22:39] <moritz> though mp6 is bootstrapped to parrot as well, iirc

[22:39] <[particle]> no, not fully.

[22:40] <moritz> how sad

[22:40] <moritz> I thought it was done at a YAPC hackaton

[22:40] <[particle]> patrick and flavio are working together now, though.

[22:40] <moritz> which is a great thing as well

[22:41] <[particle]> we should soon see the same kind of convergence that gets folks hot about the iphone :)

[22:41] <moritz> p6-on-parrot is now evolving so fast that I have trouble svn up'ping in a timely manner ;)

[22:41] <pmichaud> moritz: thanks for your comments on p6c.  Any further thoughts about how we might organize pugs-specific (and parrot-specific) tests?

[22:41] <[particle]> pmichaud: i say impl-specific tests should not be in the official repo

[22:41] <moritz> pmichaud: perhaps specially regression-test files

[22:42] <moritz> pmichaud: things that are known bugs in one implementation

[22:42] <[particle]> since the official repo is in pugs now, perhaps we can put it in a separate dir

[22:42] <moritz> of course all others have to pass them as well ;)

[22:42] <pmichaud> well, we can use things like :pugs<todo> and :parrot<todo> to mark specific tests as per-implementation todo

[22:42] <[particle]> i'm sorry, i was thinking about implementation-specific non-spec behavior

[22:42] <moritz> pmichaud: I know, but that's beside the point...

[22:42] <[particle]> duh.

[22:43] <pmichaud> [particle]: yes, that's what I'm thinking about also

[22:43] <moritz> pmichaud: the ternary test you came up with is just _weird_

[22:43] <pmichaud> here, the test is really testing for a pugs-specific parsing bug

[22:43] <moritz> right

[22:43] <[particle]> *unspecced behavior

[22:43] <[particle]> yeah.

[22:43] <[particle]> that test should not be in the official repo

[22:43] <pmichaud> so, I'm thinking (hoping) it can go somewhere else

[22:43] <moritz> so it is specced, and the test is needed, but its' not primarily a ternary test

[22:44] *** weinigLap joined
[22:44] <moritz> maybe we should move that discussion back to p6c...

[22:45] <pmichaud> moritz: probably we should.  I'm not sure what to add at the moment (but have also been focused on other things today)

[22:45] <moritz> before I move such tests I'd like to have a green light from TimToady or audreyt, because it's a rather large policy change

[22:45] <moritz> pmichaud: I'll write another mail before going to be

[22:45] <pmichaud> oh, I've already been given a bit of a green light to refactor tests

[22:45] <moritz> s/be/bed

[22:45] <pmichaud> moritz: yes, I'd appreciate that very much

[22:45] <moritz> pmichaud: ok

[22:53] <moritz> [X] Mail sent

[22:55] <pmichaud> moritz++

[22:55] <moritz> cool, blead passes all smoke tests on my maschine ;)

[22:56] *** larsen_ joined
[22:56] <moritz> pmichaud: I help wherever I can without any compiler building knowledge... so if I can help more with the test suite, be sure to let me know

[22:58] <ibrown> so where does perl6 really need dev help?

[22:58] <ibrown> i guess is a good question from what i read while away

[22:58] <moritz> ibrown: what do you want to code?

[22:59] <moritz> ibrown: haskell, c, perl5, perl6?

[22:59] <ibrown> well.

[22:59] <moritz> doc?

[22:59] <ibrown> i do perl5, php, ruby, some C, i could probably adapt to C++ my english and explanatory skills are lacking, normally i delegate doc projects lol

[23:00] <ibrown> haskell i looked at yesterday for the first time, and first thing i thought was, how fucking cool, second thing was i agreed with toady, big learning curve from a more atypical structured language

[23:00] *** obvio171_ joined
[23:00] <moritz> ibrown: there are quite a lot things you can do...

[23:00] <ibrown> i mean here's the deal.  i don't want to switch from perl.

[23:01] <moritz> ibrown: you could help fglock with his v6.pm, mp6 and kp6 compilers

[23:01] <ibrown> so whatever i can do to ensure that A: it gets released. B: it doesn't fail on the web i'm kosher for

[23:01] <moritz> ibrown: or you could learn perl 6, and port helpfull modules from p5 to p6...

[23:01] <ibrown> i was hoping to get involved in some module writing, for 2 reasons, A: to do it, and B: to ensure that i understand perl6 at a much greater level than 5

[23:02] <ibrown> well, the .pm's i know the most are dbi, and ldap/ad pms.  heh.

[23:02] <moritz> then translating modules from 5 to 6 might be a very good idea to start with

[23:02] <ibrown> i heard a podcast that the guy that wrote the DBI module is actually writing the perl6 dbi module, is that confirmed or was he speaking out his arse?

[23:02] <moritz> ibrown: maybe you should start with a simpler one ;)

[23:02] <[particle]> tim bunce is working on dbi 2.0 for perl 6

[23:03] <moritz> cool ;)

[23:03] <[particle]> he wants a jdbc-like api

[23:03] <[particle]> but it hasn't been designed yet, and help is welcome there

[23:03] <ibrown> haha oh i dont' want to write DBI/LDAP off the bat, i'll start with more simple things, data::dumper, and b.s. like that, along with whatever other standardized modules need work.

[23:03] <ibrown> any spot to see a good TODO?

[23:04] <moritz> ibrown: Data::Dumper is not needed, you have the .perl method ;)

[23:04] <moritz> ?eval <a b c>.perl

[23:04] <Limbic_Region> well, actually Tim said one of the things blocking him was a Java -> Perl 6 translator

[23:04] *** evalbot_r16698 is now known as evalbot_r16699

[23:04] <evalbot_r16699> "(\"a\", \"b\", \"c\")"

[23:04] <ibrown> hrm.

[23:04] <Limbic_Region> and phil crow took up that torch

[23:04] <Limbic_Region> and has put his work to date on CPAN

[23:04] <ibrown> so do print Dumper($a) now you just ?eval <a>.perl ?

[23:04] <Limbic_Region> it mostly just does interfaces ATM - not classes

[23:05] <moritz> ibrown: the '?eval' part is only to start the bot...

[23:05] <daxim> what's the recent talk on the free perl6 book?

[23:05] <ibrown> oh my bad lol

[23:05] <moritz> ibrown: so Dumper($foo) is $foo.perl or perl $foo

[23:05] *** weinigLap joined
[23:05] <ibrown> haha that's awesome

[23:05] <moritz> daxim: that's "Perl 6 and Parrot Essentials"...

[23:05] <Limbic_Region> daxim - the Perl 6 and Parrot Essentials from O'Reilly has been re-licensed if that's what you mean

[23:05] <Limbic_Region> mortiz - stop that

[23:05] <Limbic_Region> :P

[23:05] <ibrown> so finish reading perl6, and then pick a pm and get to cruxing eh?

[23:05] <moritz> daxim: you can find the perl6 parts in the pugs repository in pugs/docs/tutorial/

[23:05] <daxim> so much I know, what are the details?

[23:06] <moritz> ibrown: right

[23:06] <moritz> daxim: http://www.nntp.perl.org/group/perl.perl6.language/2007/06/msg27767.html

[23:06] <ibrown> along with documenting the test scripts ;)

[23:06] <lambdabot> Title: Perl 6 & Parrot Essentials as project documentation - nntp.perl.org, http://tinyurl.com/ynvlty

[23:06] <Limbic_Region> ibrown - I wrote Config::Tiny in Perl 6 before pugs supported an object system - not hard at all

[23:06] <moritz> daxim: and http://moritz.faui2k3.org/pugs/docs/tutorial/ch01_overview.pod.html 

[23:06] <lambdabot> Title: , http://tinyurl.com/2s96ys

[23:06] <ibrown> limbig_region: suggestions for .pm's that need immediate attention?

[23:06] <moritz> that's the first chapter as .html

[23:07] <moritz> perhaps HTTP.pm?

[23:07] <ibrown> http.pm right.

[23:07] <moritz> but you should ask Juerd about that

[23:08] <Limbic_Region> ibrown - I don't have any suggestions but you should browse the ext/ directory in pugs as well as the examples/ directories

[23:12] <ibrown> kk running to bodega, i'll check into some stuff til dinner time with the grrl when i get back.  i'll shoot my .pm decision through the IRC channel and then throw it up on the perl-internals list?

[23:13] <ibrown> or is that a perl-language related issue?

[23:15] <moritz> you could use perl6-users oder perl6-compiler

[23:15] <moritz> or perl6-language if you have questions about perl 6

[23:24] *** thestarslookdown joined
[23:26] <moritz> anyway, I'm gonna get some sleep

[23:28] *** REPLeffect joined
[23:32] *** felipe joined
[23:32] *** marmic joined
[23:38] *** prism joined
[23:42] *** REPLeffect joined
[23:45] *** Eidolos joined
