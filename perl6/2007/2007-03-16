[00:02] <TimToady> heh, I'm famous for almost being famous, I gues... http://www.eweek.com/slideshow_viewer/0,1205,l=&s=26831&a=203045&po=2,00.asp?p=y?kc=EWEWEMNL031507EP35A

[00:02] <lambdabot> Title: Top 100 Most Influential People in IT, Part 1 - Top 100 Most Influential People  ..., http://tinyurl.com/2qhnnt

[00:03] <TimToady> *guess

[00:03] <Aankhen``> LOL.  Congrats.

[00:03] <TimToady> or maybe almost not being famous, is more like...

[00:06] *** weinig|bbl is now known as weinig

[00:07] *** ofer0 joined
[00:11] *** bsb joined
[00:16] *** Zareallygone joined
[00:19] *** nekokak joined
[00:20] <geoffb> Reading back to audreyt & TimToady's discussion about pads, I was confused until I realized they were refering to a 'padentry', not to 'pedantry'.

[00:22] <TimToady> the two are not mutually exclusive

[00:25] <diakopter> TimToady: is Conway's pod parser far off?

[00:28] <tene> Heh.

[00:28] *** mako132_ joined
[00:29] <Aankhen``> Does !~ have a particular meaning?

[00:30] <TimToady> don't concatenate?  er...

[00:30] <Aankhen``> I was just wondering why it can't have the same meaning as !~~

[00:31] <offby1> ~~~:     <-- snake!  Run.

[00:31] <TimToady> Aankhen``: 'cuz I'm cruel.

[00:31] <Aankhen``> Ah, that explains it. :-D

[00:33] <TimToady> diakopter: it's close, but he's had various distractions including father-in-law in the hospital with a heart attack, and generating copious feedback on current synopses

[00:34] <Aankhen``> Okay, quick, someone make a couple of commits so I can test my patch to svnbot. :-P

[00:34] <TimToady> seriously, since we're making everyone change from =~ to ~~ it didn't seem like a problem to switch !~ to the more regular !~~ syntax at the same time

[00:35] <TimToady> didn't seem worth it in the case of != or ne though

[00:35] <TimToady> especially since != goes all the way back to C

[00:36] <TimToady> decommuting &

[00:37] <Aankhen``> Makes sense; it's just that !~ is a whole character shorter. =)

[00:42] *** lumi joined
[00:55] <TimToady> heh, GoogleWiFi works pretty good in a car...

[00:55] <TimToady> (not driving)

[00:57] <TimToady> doesn't like sound walls though.

[01:24] *** miyagawa joined
[01:38] <offby1> well, who does?

[01:53] <allbery_b> ?eval 1

[01:53] <evalbot_r15727> 1

[01:54] * allbery_b pushes the button...

[01:54] *** avar joined
[01:57] *** offby1 joined
[01:58] <svnbot6> r15728 | diakopter++ | Restoring XHTML validation for an html page.

[01:58] <svnbot6> r15728 | diakopter++ | And testing Aankhen``'s new svnbot.

[02:00] <Aankhen``> diakopter: I had to give up on that... couldn't get it working properly.

[02:06] *** forsaken joined
[02:12] <allbery_b> @tell audreyb still getting lots of "does not export ..." messages with 6.7.  giving up on it

[02:12] <lambdabot> Consider it noted.

[02:13] <Khisanth> audreyb?

[02:14] <allbery_b> duh

[02:14] <allbery_b> @tell audreyt still getting lots of "does not export ..." messages with 6.7.  giving up on it

[02:14] <lambdabot> Consider it noted.

[02:15] * allbery_b still can';t type worth a damn :>

[02:18] * Khisanth has the same problem with no,now,not

[02:18] * allbery_b just does typoes a lot.  some fatfingers, some he has no idea how they happen

[02:43] *** kanru joined
[02:44] *** avar joined
[02:47] *** alc joined
[03:00] *** avar joined
[03:08] *** mako132_ joined
[03:50] *** Alias__ joined
[04:00] *** justatheory joined
[04:05] <allbery_b> @tell audreyt the good news is, ext/HTML-Entities/t/entities.t no longer loops

[04:05] <lambdabot> Consider it noted.

[04:06] *** geoffb joined
[04:36] *** forsaken joined
[04:37] *** amnesiac joined
[05:13] *** forsaken joined
[05:13] *** nxu7 joined
[05:15] <svnbot6> r15729 | bsb++ |  r301@ogum:  bsb | 2007-03-16 16:13:15 +1100

[05:15] <svnbot6> r15729 | bsb++ |  started adding URLs to a_dependency_graph.dot

[05:19] <Alias__> audreyt: FYI, I just did a M:I release and added recursive tests

[05:19] <Alias__> only dev release for now

[05:22] *** forsaken joined
[05:31] *** xerox joined
[05:33] *** jisom joined
[05:41] *** dmpk2k joined
[05:51] *** ofer0 joined
[05:57] <svnbot6> r15730 | bsb++ |  r310@ogum:  bsb | 2007-03-16 16:55:17 +1100

[05:57] <svnbot6> r15730 | bsb++ |  Instructions to make a clickable a_dependency_graph.html

[06:15] *** BooK_ joined
[06:28] *** RHainsworth joined
[06:28] *** RHainsworth left
[06:39] *** DHGE joined
[06:41] *** Schwern joined
[06:51] *** bsb left
[07:02] *** the_dormant joined
[07:20] *** avar joined
[07:37] *** the_dormant joined
[07:38] *** the_dormant joined
[08:13] *** the_dormant joined
[08:15] *** UWC joined
[08:20] *** devogon joined
[08:39] *** avar joined
[08:43] *** offby1 joined
[08:59] *** avar joined
[09:20] *** dakkar joined
[09:25] *** Kattana joined
[09:31] *** iblechbot joined
[09:38] *** rfordinal joined
[09:38] *** buetow joined
[09:56] *** baest joined
[10:10] *** chris2 joined
[10:12] <audreyt> interesting p5 tidbit: ${...} is a cheaper way to write do{...}

[10:12] <audreyt> i.e. when you say

[10:12] <audreyt> condition(...) or do { action; action; next };

[10:12] <audreyt> it's equally valid to say

[10:13] <audreyt> condition(...) or ${ action; action; next }

[10:16] * audreyt goes back cleaning up pads

[10:17] <audreyt> allbery_b: I see, mtl has changed layout. I'll deal.

[10:37] *** LCamel joined
[10:47] <audreyt> hm. perl5's \&z always works as \&THIS_PACKAGE::z and never padsv &z

[10:48] <audreyt> so it already treats sigils nonuniformly

[10:48] <audreyt> ah, that was because &z never lives in the pad.

[10:48] <dakkar> subs are always package-level...

[10:49] <audreyt> well, 5.10 has my $_, which can leads to my subs

[10:49] <audreyt> but yeah.

[10:49] <audreyt> the fun thing is that with pugs refactoring, subs are never looked up in package level unless you use &qualified::subs notation

[10:50] <audreyt> which hopefully means even faster dispatch. we'll see

[10:50] <dakkar> subs get imported into pads?

[10:50] <dakkar> at compile time, I suppose...

[10:50] <audreyt> yes, import is _always_ lexical

[10:51] <audreyt> the only difference is whether you also put it into qualified scope, i.e. you can import to OUR

[10:51] <audreyt> but it's always lexical.

[10:51] <dakkar> ok, I used the wrong verb...

[10:51] <audreyt> but that is fantastic as you can say

[10:51] <audreyt> { use CGI; ...a lot of symbols ... } ... not leaked ...

[10:52] <audreyt> and they won't pollute YourPackage::symbol

[10:52] <audreyt> since they don't, by default, enter into OUR scope.

[10:52] <dakkar> sub stuff {...}; sub another {stuff()}; <-- «stuff» is looked for in «another»'s pad, then in the container pad?

[10:52] <audreyt> correct.

[10:52] <audreyt> and the lookup is calculated at compile time

[10:53] <audreyt> at runtime we can use O(1) representation.

[10:53] <audreyt> (as a consequence, "sub stuff{...}; sub another {stuff(); sub stuff{...}}" is error)

[10:53] <audreyt> not merely warning but error

[10:53] <dakkar> so how do we do that delightfully horrible thing of overriding a sub in someone else's packages?

[10:53] <audreyt> if you switch the inner "sub stuff" with "stuff()" call, then it's merely warning

[10:53] <audreyt> you do it explicitly...

[10:54] <audreyt> &another_package::symbol := ...

[10:54] <dakkar> and it writes into all the pads?

[10:54] <audreyt> no

[10:54] <audreyt> when you declare

[10:54] <audreyt> our &foo

[10:54] * dakkar is getting confused

[10:54] <audreyt> which is the default for "sub foo"

[10:54] <audreyt> it creates a padentry

[10:54] <dakkar> oh! we can't override a 'my' sub

[10:55] <audreyt> it's stored in both pkg and lex pad

[10:55] <audreyt> if you rebind it in one it's of course reflected in another

[10:55] <audreyt> correct. you cannot modify somebody else's lexical pad.

[10:55] <audreyt> not without that somebody's consent.

[10:55] <audreyt> that somebody can declare consent saying 

[10:56] <audreyt> my sub foo (...) is context<rw> { ... }

[10:56] <audreyt> but you can't introduce new symbols

[10:56] <audreyt> nor can you rebind symbols in other pads, without some other route to reach its entry

[10:56] <audreyt> e.g. by OUR:: or by CALLER:: navigation

[10:57] <audreyt> which are both off-limits by default when you say "my sub foo".

[10:57] <audreyt> which is good :)

[10:57] <dakkar> yes, definitely

[10:57] <dakkar> all this means that the powerful-but-don't-do-it things that we can do in Perl 5 will still be possible, but they won't happen by accident ;-)

[10:59] <audreyt> yes :)

[11:00] <audreyt> the imported-subs-conflicting-with-your-subs

[11:00] <audreyt> and import-subs-masquerading-as-your-methods

[11:00] <audreyt> and overrideen-methods-accidentally-destroys-imported-subs

[11:00] <audreyt> problems are naturally gone

[11:00] <audreyt> :)

[11:13] *** fglock joined
[11:31] *** mjk joined
[11:49] *** BooK joined
[12:37] <[smash]> audreyt: ping

[12:38] *** diakopter joined
[12:42] <audreyt> [smash]: pong!

[12:44] *** IllvilJa joined
[12:45] <audreyt> [smash]: have some cycles?

[12:47] <[smash]> audreyt: cycles !?

[12:48] <audreyt> i.e. time to work on Capture/Signature compatibleness checke

[12:48] <audreyt> checker

[12:48] <[smash]> not yet.. didn't you read the private messages i sent you ?

[12:51] <audreyt> oh ok

[12:51] <audreyt> got it now

[12:55] <fglock> the 6on6 compiler seems to need first-class namespaces and pad-stacks; I wonder if is this due to a wrong choice of internal architecture

[12:57] <mj41> Google Summer of Code 2007 is on! http://code.google.com/soc

[12:57] <lambdabot> Title: Google Code - Summer of Code - Google Summer of Code

[12:58] <fglock> I mean, because first-class namespaces and pad-stacks are not in the p6 spec

[12:59] <integral> mj41: No TPF this year though

[12:59] <fglock> re Google - no perl?

[13:03] <audreyt> no perl no pugs :)

[13:03] <audreyt> <- signed up to be mentor at haskell.org side for people who'd work on pugs

[13:03] <integral> there's some pugs ideas on the haskell.org ideas page fwiw

[13:14] *** iblechbot joined
[13:24] *** lichtkind joined
[13:24] <fglock> re 6on6 - closures are currently created with eval(), which calls the compiler recursively

[13:26] *** xinming joined
[13:30] <lichtkind> morjn guys and audrey :)

[13:31] <lichtkind> audreyt had any notes?

[13:31] <fglock> lichtkind: hi

[13:32] <lichtkind> hi fglock

[13:32] *** DHGE left
[13:33] <audreyt> lichtkind: try adding in the http://spec.pugscode.org/ link somewhere :)

[13:33] <lambdabot> Title: Official Perl 6 Documentation

[13:34] <lichtkind> audreyt thats a nobrainer since there is an linklist below it wasnt because some unready textblocks were between text and linklist and i dont wanted to send you this

[13:34] <audreyt> ok

[13:34] <audreyt> Ann's name is Ann not Anne

[13:34] <fglock> 6on6 actually calls eval( "...", :lang<vm-language>) 

[13:35] <audreyt> fglock: the compiler would need first class ns/pad objects

[13:35] <audreyt> doesn't mean we need to expose it to userland

[13:35] <audreyt> that sounds like not a problem

[13:35] <lichtkind> Audreyt yes and btw http://spec.pugscode.org/ was already in :)

[13:35] <lambdabot> Title: Official Perl 6 Documentation

[13:35] <fglock> audreyt: ah, ok

[13:35] <audreyt> lichtkind: I mean s/Anne/Ann/ in your article

[13:35] <audreyt> oh cool.

[13:36] <lichtkind> audrey yes been there done that :)

[13:37] <fglock> audreyt: would you have a use for 6-on-java?

[13:37] <lichtkind> audreyt i currently rewritten some parts and want to finish it today , you want it again then?

[13:37] <audreyt> sure

[13:37] <audreyt> lichtkind: it may be good to mention that pugs is no longer only a haskell-based interpreter

[13:38] <lichtkind> it is ? *surprised*

[13:38] <lichtkind> its now pugs based ?

[13:38] <audreyt> it's hybrid: the perl5 vm and GHC vm is linked together

[13:38] <audreyt> so perl5 modules and haskell modules can both run natively

[13:39] <audreyt> and we can link in other interpreters if needed (SpiderMonkey for JavaScript modules, JVM for Java modules)

[13:39] <audreyt> so we glue VMs together (in the same process) to achieve multi language interoperability

[13:39] <moritz_> ... to produce pugs executables with arbitrary sizes ;)

[13:39] <audreyt> rather than glue languages together into one VM

[13:40] *** [particle] joined
[13:40] <audreyt> why yes but at least you asked for it :)

[13:40] <lichtkind> thats great feature but what type are the vm files?

[13:40] <audreyt> .so, .dll

[13:40] <audreyt> dynamic libraries, usually

[13:40] <lichtkind> ah

[13:40] <audreyt> perl58.dll on windows, libperl.so on unix

[13:40] <audreyt> so pugs is a compiler that targets multiple, maybe hybrid VMs

[13:41] <lichtkind> yes thats ge mentioned in the second unwritten part of the pugs chapter

[13:41] <audreyt> parrot is a vm that can be targetted by multiple, maybe hybrid compilers

[13:41] <audreyt> each aims to achieve language interop mandated by p6, but in opposite directions

[13:41] <audreyt> fglock: not atm :)

[13:42] <lichtkind> so we get 2 platforms or there any pülans to let grow togehter?

[13:42] <audreyt> pugs has a parrot backend but it only supports a very limited range of perl6

[13:42] <audreyt> same applies to kp6/mp6

[13:42] <fglock> audreyt: ok - just checking; there seems to be some interest on $job here

[13:43] <audreyt> fglock: I've found Inline::Java to be too good :)

[13:43] <audreyt> fglock: once you use its AUTOSTUDY and JNI together, the overhead and hassle becomes negligible

[13:43] <audreyt> so probably won't look for another solution beyond that

[13:44] <fglock> oh, nice - I should try it then

[13:44] <audreyt> atm

[13:44] <audreyt> it's surprisingly sane :)

[13:44] <audreyt> (it's also been under development for 6 years.)

[13:44] <audreyt> (more, if you count the ancestors such as JPL)

[13:45] <fglock> this makes possible eval(..., lang:<Java>) 

[13:45] <audreyt> fglock: pugs now does that :)

[13:45] <fglock> cool

[13:45] <audreyt> it's just

[13:46] <audreyt> use Inline ( Java => 'STUDY', AUTOSTUDY => 1, JNI => 1, STUDY => ['java.module.here'] );

[13:46] <audreyt> java::module::here->new(...)

[13:46] <moritz_> wow, that's way cool

[13:46] <audreyt> is all.

[13:46] <moritz_> are there any examples/test cases in the repository?

[13:46] <audreyt> (that's if you are in the main package. otherwise, YourPackage::java::module::here->new)

[13:46] <audreyt> moritz_: no, the code was just in yesterday. want to write some?

[13:47] <audreyt> moritz_: the current syntax to write tests for is

[13:47] <audreyt>      use java:java.lang.System;

[13:47] <audreyt>      say "Greetings from Java ", System.getProperty('java.version');

[13:47] <audreyt> which should get

[13:47] <audreyt>      Greetings from Java 1.5.0_07

[13:47] <audreyt> by all means write tests and/or examples :)

[13:47] <moritz_> audreyt: I'd like to, but my girlfriend is here for ~ 1 week, and I have nearly no time for such things ;)

[13:47] <audreyt> oh. that's okay, code can wait :)

[13:47] <moritz_> audreyt: but when she's gone again I might write some

[13:47] <lichtkind> audreyt: ehat please is kp6/mp6?

[13:48] <audreyt> lichtkind: http://svn.pugscode.org/pugs/v6/v6-KindaPerl6/docs/FAQ.pod

[13:53] <lichtkind> k

[13:57] <lichtkind> fglock++

[13:59] <lichtkind> bye

[13:59] <moritz_> lichtkind: bye

[14:07] *** vel joined
[14:18] *** rindolf joined
[14:18] <rindolf> Somebody talk to me!

[14:18] <rindolf> ;-)

[14:18] <moritz_> rindolf: foo()

[14:18] <rindolf> moritz_: return undef;

[14:19] <moritz_> die "Can't use undef as numerical value in RINDOLF line 3"

[14:19] <svnbot6> r15731 | fglock++ | kp6 - FAQ: </vacations>

[14:19] <moritz_> ;-)

[14:21] *** Limbic_Region joined
[14:22] <rindolf> moritz_: OK, I'm not fluent in PerlSpeak. Shall we talk in English, instead?

[14:22] <rindolf> moritz_: what's up?

[14:22] <moritz_> rindolf: not much..

[14:22] <moritz_> I'm currently generating 12x12-Sudokus for my website :-)

[14:23] <rindolf> moritz_: with "digits" up to 12?

[14:23] <moritz_> rindolf: with letters instead of digits

[14:23] <rindolf> moritz_: but how are they divided?

[14:23] <moritz_> rindolf: in 4x3-blocks

[14:24] <rindolf> moritz_: ah.

[14:24] <moritz_> rindolf: empty grids of various sizes are already available

[14:24] <moritz_> rindolf: http://sudokugarden.de/en/info/flavours

[14:24] <lambdabot> Title: About Sudoku - Different Flavours :: Sudoku Garden

[14:25] <moritz_> rindolf: no I'm working on a script that generates arbitrary sized sudokus into pdf files

[14:25] <rindolf> moritz_: ISTR that Sudoko is NP-complete.

[14:25] <rindolf> At least I read it in the wikipedia.

[14:25] <moritz_> rindolf: it isn't if you can assume that a single solution exists

[14:26] <moritz_> rindolf: or at least that's what I read some time ago

[14:28] <rindolf> Although typical Sudoku puzzles (with 9×9 grid and 3×3 regions) can be solved quickly by computer, the generalization to larger grids is known to be NP-Complete. Various optimisation methods have been proposed for large grids.

[14:28] <rindolf> http://en.wikipedia.org/wiki/Sudoku

[14:28] <lambdabot> Title: Sudoku - Wikipedia, the free encyclopedia

[14:29] <moritz_> rindolf: ok, the _generation_ is NP-complete

[14:29] <rindolf> moritz_: no generali*sa*tion

[14:38] <moritz_> ?eval say 17/81

[14:38] <evalbot_r15731> OUTPUT[0.2098765432098765432098765432098765432099␤] Bool::True

[14:47] <Limbic_Region> ooh neat

[14:47] <Limbic_Region> ?evaly my

[14:47] <Limbic_Region> er

[14:47] <evalbot_r15731> Error: ␤Unexpected end of input␤expecting "=", formal parameter, context, ":" or "("

[14:47] <Limbic_Region> ?eval my $pi = atan(2,2) * 4; $pi

[14:47] <evalbot_r15731> \3.141592653589793

[14:48] <Limbic_Region> ?

[14:48] <Limbic_Region> ?eval say atan(2,2) * 4.0

[14:48] <evalbot_r15731> OUTPUT[3.141592653589793␤] Bool::True

[14:48] * Limbic_Region feels cheated

[14:49] <moritz_> Limbic_Region: why?

[14:51] <Limbic_Region> why should 17/18 get more digits than pi - everyone loves pi, I eat it when ever I can

[14:51] <Limbic_Region> but with so little pi to go around, I am not getting my fair share

[14:52] <moritz_> $ pi|wc -c

[14:52] <moritz_> 108

[14:53] <Limbic_Region> oh, you mean it is just evalbot

[14:53] <Limbic_Region> hrm

[14:54] <Limbic_Region> or what?

[14:54] <moritz_> Limbic_Region: no, I have a program "pi" installed, that gives 106 digits per default

[14:55] <moritz_> Limbic_Region: so if you love pi, use this program ;)

[14:55] <moritz_> time pi 10000|wc -c

[14:55] <moritz_> 10010

[14:55] <moritz_> real    0m0.095s

[14:55] <Limbic_Region> oh, well - calculating pi isn't terribly difficult

[14:56] <Limbic_Region> I'm just confused as to why pugs would be giving different levels of precision

[14:56] <moritz_> Limbic_Region: well, atan2 is certainly more difficult than a fraction

[15:00] *** diakopter2 joined
[15:01] *** diakopter2 is now known as diakopter

[15:07] *** forsaken joined
[15:14] *** kanru joined
[15:32] *** amnesiac joined
[15:34] <svnbot6> r15732 | audreyt++ | * Pugs.AST.Internals: Remove the envClasses field as it does

[15:34] <svnbot6> r15732 | audreyt++ |   not add to anything; we'll switch to MO-based type narrowness

[15:34] <svnbot6> r15732 | audreyt++ |   dispatch anyway, so the notion of "global type-distance" can

[15:34] <svnbot6> r15732 | audreyt++ |   be obsoleted now.

[15:34] <svnbot6> r15733 | audreyt++ | * regen instances.

[15:36] <Limbic_Region> audreyt - don't know what the rest of the field looks like, but Win32 was about 412 failing tests last night (but nearly 90 min smoke time)

[15:36] <svnbot6> r15734 | audreyt++ | * Pugs.Run.Args: Repair -p and -n.

[15:38] <rindolf> Hi audreyt 

[15:38] <svnbot6> r15735 | audreyt++ | * Pugs.AST.Pos: Switch to a ByteString representation of

[15:38] <svnbot6> r15735 | audreyt++ |   the source file name to avoid unneccessary heap use.

[15:40] <pasteling> "evalbot_r15731" at 194.145.200.126 pasted "Pugs build failure" (406 lines, 21.8K) at http://sial.org/pbot/23530

[15:40] <svnbot6> r15736 | audreyt++ | * Pugs.Types: Memoize all type-distance calls since we no

[15:40] <svnbot6> r15736 | audreyt++ |   longer have a Env-global class tree.

[15:41] <TimToady> Limbic_Region: the fraction of pi is probably using rationals, and just cuts off the division arbitrarily at 40 digits, since it's a repeating fraction.  atan2 is using floaters

[15:43] <svnbot6> r15737 | audreyt++ | * Pugs.*: Chase the envClasses change.

[15:43] <svnbot6> r15737 | audreyt++ |   This concludes the envClasses batch.

[15:45] <Limbic_Region> thanks TimToady.  Is there anything in the spec that speaks to precision?

[15:45] <integral> hmm, continued fractions

[15:47] *** araujo joined
[15:49] <TimToady> S02:549 talks about how division can be forced to return a rational by pragma, but doesn't specify the pragma

[15:50] <TimToady> Num is assumed to be floating point.

[15:50] <TimToady> which has built-in precision limitations

[15:51] <Limbic_Region> ok

[15:51] <TimToady> how precision is specified to the Rational class is underspecified

[15:51] <TimToady> current Rat seems to like the number 40 for some reason

[15:51] <rindolf> Hi TimToady 

[15:51] <rindolf> TimToady: what's up?

[15:51] <TimToady> foo()

[15:52] <rindolf> TimToady: you've started speaking in Perl too?

[15:52] <TimToady> I dreamed in Perl once...

[15:52] *** VanilleBert joined
[15:52] <rindolf> TimToady: so did my friend.

[15:52] <TimToady> sorry to hear your friend is going insane

[15:52] <svnbot6> r15738 | audreyt++ | * util/yaml_harness.pl: Speed up concurrent smoking by

[15:52] <svnbot6> r15738 | audreyt++ |   assigning interleaving tasks (instead of consecutive ones)

[15:52] <svnbot6> r15738 | audreyt++ |   across childrens.

[15:53] <rindolf> TimToady: he dreamed in Perl once.

[15:54] <rindolf> I never dreamed in Perl, but I sometimes dreamed in gvim.

[15:54] <rindolf> Thinking I was sitting next to gvim being able to type stuff on the keyboard.

[15:54] <rindolf> Wow! I commited over 20 revisions today to the Test::Run repository.

[16:00] *** weinig_ joined
[16:07] <TimToady> hmm, shouldn't the noun for a rational number just be Ratio?

[16:08] <TimToady> then we can snigger when the newbies pronounce it "rat I/O"

[16:09] <audreyt> that's the name Haskell uses...

[16:09] <audreyt> whew, smoke time back to <20min

[16:09] <TimToady> Ratio?

[16:09] <TimToady> or Rat?

[16:09] <audreyt> yeah

[16:09] <audreyt> Ratio

[16:10] <audreyt> arbitrary-precision rationals (Ratio Integer) is type-synonymed to "Rational"

[16:10] <audreyt> but you can have (Ratio Int) too if you want

[16:10] <audreyt> which is fixed-precision

[16:10] <TimToady> I'd be more inclined to alias Ratio to Rat

[16:11] <audreyt> ok...

[16:11] <audreyt> Perl 6, the first language to have built in Rat and Cat types.

[16:11] <TimToady> where does H get the 40 digit precision from?

[16:11] <TimToady> just hardwired somewhere?  (somehow I doubt it)

[16:12] <audreyt> Double I think

[16:12] <audreyt> same as C

[16:13] *** turrepurre joined
[16:13] <TimToady> why would Ratio have anything to do with Double?

[16:13] <audreyt> oh, nvm.

[16:13] <audreyt> it's hardcoded alright

[16:14] <audreyt> src/Pugs/AST/Utils.hs:135

[16:14] <audreyt> and :137

[16:14] <audreyt> forgot how/why we did it :)

[16:15] <TimToady> well, we can probably allow $x / $y :rat(42) as a micropragma

[16:15] <audreyt> mmm more multi variants to write

[16:15] <TimToady> but that might slow it down

[16:15] <audreyt> now we actually _have_ to allow named multi resolution...

[16:15] <TimToady> do we require it for anything else yet?

[16:16] <TimToady> ignoring my usage in STD.pm

[16:17] <TimToady> we can probably just "use Rat :prec(582)" and avoid committing adverbial pragmacide.

[16:21] *** weinig_ is now known as weinig|bbl

[16:26] <audreyt> well :p

[16:27] <audreyt> I mean hash :p

[16:27] <audreyt> not the smiley

[16:27] <Limbic_Region> hrm, concurrent doesn't appear to be doing the right thing on Win32

[16:32] <TimToady> pity we don't have a 3-letter word for Complex

[16:33] *** prly joined
[16:34] <TimToady> course, whoever called them "complex numbers" in the first place had no clue about the notion of the problems of using too general of a word...

[16:34] <Limbic_Region> use a synonym that can be crammed into 3 chars?

[16:35] <specbot6> r14352 | larry++ | The ratio type is now a noun, not an adjective.

[16:35] <specbot6> r14352 | larry++ | No longer spec that / must pragmatically produce a Rat.

[16:35] <specbot6> r14352 | larry++ | Instead, Int div Int is now guaranteed to return a Rat.

[16:35] <specbot6> r14352 | larry++ | An integerized Rat is a truncated Rat.

[16:35] <Limbic_Region> IIRC, I first hacked in concurrency support on Win32 using Parallel::ForkManager

[16:36] <TimToady> Rpi "real plus imaginary"  not pronouncable.  There are cultural problems with "Real and imaginary", though.

[16:36] * Limbic_Region wonders why it doesn't work quite right now

[16:38] <TimToady> Real Imaginary Number, a Rin.  Now just need a Tin type to really go to the dogs...

[16:39] <jrockway> maybe we should add a unicode symbol for these types :)

[16:43] <diakopter> how about %

[16:43] <diakopter> oh wait, we're done with ratio, on to complex; sorry

[16:45] <TimToady> Both Imaginary and Real Data

[16:45] <rindolf> TimToady: Rin, heh

[16:45] <rindolf> TimToady: can we also have a Dolf?

[16:46] <TimToady> Dolphin, maybe

[16:46] <rindolf> Rindolphin?

[16:50] <TimToady> maybe complex should be Dodo, for "double double".  :)

[16:50] <Limbic_Region> hrm - I suspect Parallel::ForkManager

[16:52] <TimToady> but that's not 3 letters...

[16:52] <TimToady> lessee.  if the type actually tries to optimize non complex into a num, then we could call it a "Real Or Complex", that is, a Roc.

[16:53] *** Kinbote joined
[16:54] <TimToady> Complex has too many consonants to abbreviate to three letters, alas.

[16:55] <TimToady> C5x would work.  :)

[16:55] *** VanilleBert left
[16:55] <TimToady> biab &

[16:55] *** jamhed joined
[16:56] *** forsaken joined
[17:01] <jrockway> Cmplx :)

[17:08] <TimToady> Nim

[17:09] <TimToady> Nums and Nims

[17:09] * geoffb imagines his declarations reading like Jabberwocky or Dr. Seuss

[17:10] <TimToady> I wonder how you play Nim with imaginary numbers?

[17:10] <Limbic_Region> I kind of liked c5x

[17:10] <TimToady> looks like some kind of cable

[17:10] <geoffb> TimToady: two piles, taking from either one or the other each turn?

[17:10] <Limbic_Region> of course - it would only work for those who could s/5/omple/

[17:11] <geoffb> TimToady: That would be c5e, of course.

[17:11] <geoffb> Wow, c5e is 40 words in /usr/share/dict/words

[17:12] <TimToady> I think having an unrelated digit in the middle of nimeric computations would be a mistake.

[17:12] <geoffb> Interestingly 

[17:12] <geoffb> Oh, doh, stupid me

[17:12] <TimToady> there's that 40 again.

[17:13] <geoffb> It's 110 words.  c5x, however, is only two: complex and chamoix

[17:14] <Limbic_Region> geoffb - we could generalize it to c2x

[17:14] <TimToady> 18 words here

[17:14] <geoffb> I'm guessing the chamoix type does proactive garbage collection

[17:14] <Limbic_Region> where instead of 2 being two chars

[17:14] <Limbic_Region> it is to

[17:14] <Limbic_Region> so starts with c and ends with x

[17:14] <TimToady> cakebox carapax carefox casebox cashbox centrex chamoix chevaux choenix ciseaux coalbox coannex complex conflux corebox coteaux cow-pox curtlax

[17:14] <geoffb> TimToady: clearly your dict is bigger than mine

[17:15] <TimToady> er

[17:15] <geoffb> Oh see, now there are several non-english words there

[17:15] <geoffb> Unless carapax is actually english, hmmm

[17:16] <geoffb> Yeah, looks to be German

[17:16] <TimToady> I have some German blood in me--that might explain it.

[17:18] <geoffb> Jokes aside, where did your dictionary come from?  Is it system default, or something you installed separately?

[17:18] <TimToady> fedora 6

[17:18] <geoffb> hmm

[17:20] * geoffb raises his eyebrows: Apparently Google is using wikipedia as a dictionary now too ... it's giving it as responses to define: queries

[17:23] <TimToady> @tell audreyt my smoke of 15738 only went from 64 min to 60 min.  but at least that's the right direction. :) 

[17:23] <lambdabot> Consider it noted.

[17:31] <Limbic_Region> TimToady - are you able to take advantage of concurrency in your smoke?

[17:31] <TimToady> nope

[17:33] <Limbic_Region> it took nearly 90 minutes last night - I set concurrency to 2 (as I have 2 procs) and I am testing again as of the most recent rev

[17:33] <TimToady> Language question for the day: How come people talk about "serial killers" but not "parallel killers"?

[17:33] <Limbic_Region> provided it doesn't "get stuck", I should have the results soonish

[17:33] *** Lorn joined
[17:36] <TimToady> Hmm, if ratios were a generic type we could have the Rats of Nim(h)

[17:38] <Limbic_Region> TimToady - and with built in cryptography, we could have the secrets too

[17:40] <TimToady> shower power &

[17:43] *** jisom joined
[17:47] *** nxu7-wrk joined
[17:53] *** rashakil_ joined
[17:57] <Limbic_Region> @tell audreyt smoke concurrency intermittently breaks on Win32.  I will look into it if I get some round tuits

[17:57] <lambdabot> Consider it noted.

[18:11] *** forsaken joined
[18:13] *** forsaken joined
[18:14] *** forsaken joined
[18:15] *** forsaken joined
[18:16] *** forsaken joined
[18:26] *** jrockway joined
[18:27] *** justatheory joined
[18:29] *** delon joined
[18:34] *** ozo_ joined
[18:46] *** pmurias joined
[18:46] <pmurias> hi

[18:46] <offby1> ho

[18:49] <pmurias> why dosn't TPF take part in the google summer of code?

[18:49] *** justatheory joined
[18:49] <TimToady> nobody volunteered to mentor, basically.

[18:52] * pmurias is too young to apply this year, but hopes that things will be different next summer

[18:55] *** forsaken joined
[18:56] <spinclad> TimToady: Cpx came to mind and stuck there

[18:58] <spinclad> now i want to type some gaussian ints and rats:  Z[i] and Q[i] ?

[18:59] <spinclad> Complex of Int, Complex of Rat, Rat of Complex Int ...

[18:59] *** justatheory joined
[19:00] *** the_dormant joined
[19:00] <spinclad> TimToady: in r14352:S02:540:  s/C<infix:/C<< infix:/

[19:05] <spinclad> TimToady: in r14350:S02:1521: I don't see what `, and so on transitively´ is about.

[19:08] <spinclad> and in line 1525, s/^/visible /  i think.

[19:11] *** moritz joined
[19:15] *** fglock joined
[19:24] *** the_dormant joined
[19:28] <pmurias> fglock: hi

[19:33] <specbot6> r14353 | larry++ | Fixes suggested by spinclad++.

[19:34] *** dmpk2k joined
[19:38] <fglock> pmurias: hey

[19:39] *** geoffb joined
[19:45] *** ruz joined
[19:46] *** fglock joined
[19:47] <TimToady> ?eval <good fast cheap>.pick(rand 3)

[19:47] <evalbot_r15738> ()

[19:47] <TimToady> ah, the government solution

[19:47] <TimToady> ?eval <good fast cheap>.pick(rand 3)

[19:47] <evalbot_r15738> ("fast",)

[19:47] <TimToady> extreme programming

[19:47] <TimToady> ?eval <good fast cheap>.pick(rand 3)

[19:47] <evalbot_r15738> ("cheap", "good")

[19:47] <TimToady> there's Perl 6

[19:48] <TimToady> ?eval <good fast cheap>.pick(rand 3)

[19:48] <evalbot_r15738> ("good", "fast")

[19:49] <TimToady> that'd be a Cray of some sort, I suppose

[19:50] <TimToady> I love this language.  :D

[19:50] <kolibrie> :)

[19:50] <fglock> :)

[19:52] <Limbic_Region> yes, certainly not cheap

[19:53] <TimToady> or maybe a PS3

[20:00] *** rindolf joined
[20:00] <rindolf> Hi all!

[20:00] <rindolf> A bit OT, but on-topic because it's TAP-related.

[20:00] <rindolf> Is there a Ruby way to attach meta-data to certain methods, similar to Perl 5's attributes?

[20:26] *** the_dormant joined
[20:29] *** Aankhen`` joined
[20:29] *** devogon joined
[20:40] *** devogon joined
[20:41] <kolibrie> I am creating an object ::Resource(url => 'http://' ~ $domain ~ '/path'), and class Resource { has $.domain, $.url }, but domain is not assigned until after url is, so my url is incorrect.

[20:41] <kolibrie> how can I make this lazy

[20:42] <kolibrie> or do it a different way?

[20:42] *** IllvilJa joined
[20:44] <kolibrie> ::Resource(url => lazy('http://' ~ self.domain ~ '/path'))

[20:45] * kolibrie does not think the self will point to the object he means

[20:52] *** bonesss joined
[20:54] *** iblechbot joined
[20:58] *** weinig|bbl is now known as weinig

[21:30] <dmpk2k> Are there any perl6 list summaries more recent than Feb 12, 2006?

[21:30] <tene> dmpk2k: http://pugs.blogs.com/

[21:30] <lambdabot> Title: Pugs

[21:30] <diakopter> @tell audreyt you've got mail.  the good kind.

[21:30] <lambdabot> Consider it noted.

[21:31] <tene> I don't know why they're not posted to dev.perl.org or whatever anymore

[21:31] <dmpk2k> tene: oh, thanks. :)

[21:31] * dmpk2k was worried that had died off somehow.

[21:31] <tene> Rather confusing to me, too, before I subscribed o the mailing lists

[21:31] <tene> Thought that Perl 6 had died off.

[21:32] <dmpk2k> Maybe someone should update dev.perl.org. For a long time I thought that perl6 had finally kicked the bucket.

[21:32] <dmpk2k> It's not a hard conclusion to come to if you're on the outside.

[21:36] <tene> dmpk2k: are you volunteering to maintain dev.perl.org if given access?

[21:36] <tene> ;)

[21:37] <dmpk2k> Disaster!

[21:39] *** lichtkind joined
[21:42] *** miyagawa joined
[21:42] <lichtkind> please what was the difference betweent PAST and POST again?

[21:49] *** Psyche^ joined
[21:51] *** diakopter is now known as diakopter_afk

[21:52] *** diakopter_afk is now known as diakopter2

[21:54] <dmpk2k> Auto-accessors are analogous to properties?

[22:01] <TimToady> Properties are just methods.

[22:01] <TimToady> Adding properties to an object is just mixins.

[22:02] *** Psyche^ is now known as Patterner

[22:02] <TimToady> However, mixins are not just mixins.  :)

[22:02] <pmurias> lichtkind: the POST is the low-level AST representing parrot bytecode, PAST represents high-level language constructs

[22:03] <TimToady> A for abstract, O for operators

[22:04] <lichtkind> pmurias: so PAST ~~ PIR ; POST ~~ PASM ?

[22:05] <pmurias> PAST ~~ perl6|python|ruby ; POST ~~ PIR

[22:05] *** weinig is now known as weinig|bbl

[22:05] <lichtkind> thanks a lot 

[22:05] <lichtkind> for what they need PASM now?

[22:07] <pmurias> i'm not really a parrot guy, but PASM has mostly been replaced by PIR

[22:07] <pmurias> i'm not sure if i'm looking in the right implementation , but POST is emitted to PIR at compilers/past-pm

[22:09] <pmurias> the transformation process is i think source --> PAST --> POST --> PIR --> bytecode

[22:09] <pmurias> makes any sense?

[22:14] <pmurias> sleep&

[22:15] <lichtkind> good night

[22:16] <lichtkind> thanks but some things i still saw in PASM but it looked like some constant definitions ans older benchmarkes

[22:17] <lichtkind> pmurias: yes your transform chart is correct

[22:31] <lichtkind> bye

[22:55] <meppl> good night

[23:03] *** buetow joined
[23:11] *** diakopter2 is now known as diakopter

[23:26] *** Limbic_Region joined
[23:36] <rindolf> TimToady: here?

[23:45] <avar> rindolf: use the async powers of irc and @tell :)

[23:51] <rindolf> http://www.frappr.com/freenodeperl/

[23:53] *** rindolf joined
[23:58] *** polettix joined
[23:59] *** geoffb joined
