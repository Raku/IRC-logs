[00:02] <dduncan> fyi, I just did another smoke, my first of March afaik ... normal Haskell backend, snapshot/darwin, r15788 ... all but 554 tests pass ... interestingly, the smoke completed considerably faster than the last time I smoked ... it was 63 minutes this time, vs 90 or 135 (forget) minutes last time ... maybe the new way that tasks are handed out to concurrent smoker threads has something to do with it?

[00:03] <dduncan> nothing about my environment really changed since the last smoke ... same hardware and GHC etc

[00:04] <moritz> dduncan: did you compile with GHC 6.7?

[00:04] <dduncan> no

[00:04] <dduncan> last time and this, it is 6.6.0

[00:05] <tene> dduncan: pugs startup time has decreated quite a bit.

[00:05] <moritz> anyway, audreyt talked about speeding up startup by un-atomifying things

[00:05] <tene> decreased

[00:05] <dduncan> and it is the pre-packaged 6.6.0 at that

[00:07] <dduncan> in any event, it will be good, whenever that happens, that Perl 6 performs no slower than Perl 5 on the same hardware with equivalent code

[00:08] <geoffb> dduncan: It will be a great while before we reach that point.

[00:09] <geoffb> Pugs is currently about 1000x slower than Perl 5 by my measurement

[00:09] <dduncan> sure ... but "good enough" is also good enough

[00:09] <moritz> probably it will only be reached when parrot is used as backend and parrot optimizes well ;-)

[00:09] <dduncan> eg, if one can run an application written in it regularly and not have it feel slower to the user

[00:10] <dduncan> this includes web apps

[00:10] <geoffb> dduncan: Oh, I know that measure well -- I just meant, we're a ways from that point.  I *do* think we will get there.

[00:12] <dduncan> for my purposes, if a web program compiles and finishes a page request in less than 1 clock second with a load of 1 user, that's good enough to begin using for production

[00:12] <dduncan> that's considerably less demand than a full server

[00:12] <geoffb> nodnod

[00:13] <moritz> dduncan: it's the same for me, but pray to god that you'll never have to scale ;-)

[00:14] <dduncan> the thing is, if the system becomes fast enough to tolerate with a small number of users, then its actual use should increase exponentially, and then we have a much larger base that can focus on optimizing it for scaling

[00:14] <dduncan> s/users/concurrent users/

[00:15] <dduncan> s/base/developer base/

[00:23] <dduncan> FYI, a revised GPLv3 process time table has finally been announced, via the mailing list, [email@hidden.address] ... draft 3 will come out in 2 days, with 60 day discussion, then last call draft, then 30 days, then final publication ... so we should be able to start using GPLv3 in about 92 days!

[00:23] <dduncan> I'm happy to see that revised timetable.

[00:23] *** dmpk2k joined
[00:24] <moritz> hey, cool

[00:24] <dduncan> the web site isn't updated yet, though

[00:24] <dduncan> or not the front page

[00:24] <moritz> and I hope sun will release opensolaris, especially ZFS under GPLv3

[00:24] <dduncan> indeed

[00:25] <dduncan> and barring any major problem, unlikely that is, I will be using GPLv3 for all my important stuff

[00:25] <dduncan> afaik, the Perl Foundation plans to make the Perl 6 license the disjunction of GPL v3 and Artistic v2, which would be good

[00:26] <dduncan> ... or later

[00:26] * moritz still likes the WTFPL ;-)

[00:27] <dduncan> that sounds like the BF of licenses

[00:28] <moritz> "WTFPL - Do What The Fuck You Want To Public License"

[00:28] *** H0LE joined
[00:28] <moritz> just another name for public domain ;-)

[00:37] *** justatheory joined
[00:39] <offby1> "Do What The F*** Thou Wilt" shall be the whole of the law

[00:41] <dmpk2k> It'd certainly make things... exciting.

[00:44] *** encryptio joined
[00:59] *** Khisanth joined
[01:04] <specbot6> r14354 | larry++ | Suggestions from TheDamian++ and Juerd++ and others.

[01:04] <specbot6> r14354 | larry++ | All punctuation is now treated as potentially meta.

[01:04] <specbot6> r14354 | larry++ | <'foo'> form is gone; just use 'foo'.

[01:05] <specbot6> r14354 | larry++ | Conjectural syntax positive and negative submatches of isolated substring.

[01:05] <specbot6> r14354 | larry++ | Conjectural syntax for recursive calls to anonymous substructures.

[01:05] <specbot6> r14354 | larry++ | < a b c > is now just a list of strings.

[01:11] *** Psyche^ joined
[01:14] <specbot6> r14355 | larry++ | typo from dduncan++

[01:18] *** Psyche^_ joined
[01:19] *** Alias_ joined
[01:21] *** amnesiac joined
[01:24] *** justatheory_ joined
[01:25] *** Psyche^_ is now known as Patterner

[01:27] *** nekokak joined
[01:29] *** bonesss joined
[01:37] *** nperez joined
[01:38] *** stevan_ joined
[02:37] *** justatheory joined
[02:56] *** ruoso joined
[03:08] *** xern joined
[03:09] *** xern joined
[03:15] *** esstone joined
[03:20] *** mako132_ joined
[03:58] *** ProperNoun joined
[04:04] *** rofl joined
[04:04] *** rofl is now known as mathlord

[04:18] *** Debolaz2 joined
[04:20] *** kavelot joined
[04:20] <pasteling> "kavelot" at 200.158.87.162 pasted "how can "A" be printed but "B" not (the script is, for some reason, stopping on second line)" (3 lines, 55B) at http://sial.org/pbot/23806

[04:24] *** Debolaz joined
[04:29] *** prly joined
[05:07] *** esstone joined
[05:18] *** prly_ joined
[05:25] *** prly__ joined
[05:25] *** Psyche^ joined
[05:30] *** kanru joined
[05:31] *** baest joined
[05:31] *** prly joined
[05:36] *** penk joined
[05:38] *** Psyche^ is now known as Patterner

[05:41] *** prly_ joined
[05:44] *** rfordinal joined
[05:44] *** amnesiac joined
[05:46] *** prly__ joined
[05:49] *** justatheory joined
[05:55] *** kanru joined
[05:57] *** beppu joined
[06:07] *** carson joined
[06:14] *** BooK joined
[06:19] *** devogon joined
[06:24] *** nxu7 joined
[06:30] *** carson_ joined
[07:04] *** buetow joined
[07:05] *** Psyche^ joined
[07:11] *** iblechbot joined
[07:19] *** Psyche^ is now known as Patterner

[07:21] <gaal> I like spec:r14354 :-)

[07:25] *** jisom joined
[07:41] *** Psyche^ joined
[07:41] *** xinming_ joined
[07:44] *** nxu7 left
[07:54] *** jisom_ joined
[07:55] *** Psyche^ is now known as Patterner

[07:55] *** dduncan left
[08:03] *** ntgrl joined
[08:04] *** ntgrl is now known as integral

[08:14] *** the_dormant joined
[08:32] *** buetow joined
[08:37] *** elmex joined
[08:37] *** the_dormant joined
[08:38] *** the_dormant joined
[08:41] *** offby1 joined
[08:47] *** chris2 joined
[09:09] *** buetow joined
[09:36] *** IllvilJa joined
[10:32] *** ayrnieu joined
[10:35] *** Psyche^ joined
[10:51] *** autin joined
[10:52] *** Psyche^ is now known as Patterner

[11:10] *** lisppaste3 joined
[11:16] *** autin joined
[11:21] *** thorat joined
[11:41] *** mako132_ joined
[11:42] *** Psyche^ joined
[11:45] *** xinming_ is now known as xinming

[11:54] *** Psyche^ is now known as Patterner

[11:56] *** Khisanth joined
[11:58] *** JeeBee joined
[11:58] *** JeeBee left
[12:01] <svnbot6> r15789 | fglock++ | PCR - fixed Match deref (perl5.9.5 is more strict)

[12:01] *** the_dormant joined
[12:04] *** buetow joined
[12:14] *** iblechbot joined
[12:15] *** Limbic_Region joined
[12:20] *** fglock joined
[12:38] *** rfordinal_ joined
[12:39] *** marmic joined
[12:52] *** charsbar_ joined
[12:53] *** Psyche^ joined
[13:04] *** autin joined
[13:08] *** Psyche^ is now known as Patterner

[13:09] *** [particle] joined
[13:15] *** buetow joined
[13:41] *** ofer0 joined
[13:44] *** VanilleBert joined
[13:48] *** ruoso joined
[13:48] *** DarkWolf84 joined
[13:49] *** drupek12178 joined
[13:59] *** vel joined
[14:06] <DarkWolf84> hi there

[14:06] <DarkWolf84> :)

[14:07] <moritz> hi DarkWolf84 ;)

[14:08] <DarkWolf84> is there any way to convert perl6 code to binary or byte code

[14:08] <moritz> DarkWolf84: there is pugs with parrot backend if you mean that

[14:08] <DarkWolf84> yes

[14:09] <DarkWolf84> but i just compiled parrot and pugs

[14:09] <DarkWolf84> and pugs gives me an error

[14:09] <moritz> there is a bit of bit rot in the parrot backend :(

[14:10] <DarkWolf84> when i'm converting program it ends with an error

[14:12] <moritz> and don't even know if there is somebody actively working on the parrot backend

[14:12] <DarkWolf84> maybe that's the point

[14:13] <DarkWolf84> nvm pugs is running fine :)

[14:13] <moritz> DarkWolf84: do you have a commit bit?

[14:13] <DarkWolf84> what is commit bit

[14:14] <DarkWolf84> may be i haven't

[14:14] <moritz> DarkWolf84: it allows you to commit changes to the pugs svn repository

[14:14] <moritz> DarkWolf84: if you /msg me your email address I can invite you

[14:15] <DarkWolf84> is it included in svn version

[14:15] <DarkWolf84> ok

[14:17] <DarkWolf84> hm know only perl(original perl) for now and little perl6

[14:17] <svnbot6> r15790 | lanny++ | * from_perl6_rules

[14:17] <svnbot6> r15790 | lanny++ |   + turn fails into todo's.  There are so many todo's already

[14:17] <svnbot6> r15790 | lanny++ |     in existence I /think/ this is the intention.

[14:17] <moritz> btw on freenode you need to be registered to be allowed to /msg :(

[14:18] <DarkWolf84> i've registered yet

[14:18] <DarkWolf84> my english is not good because i'm not english

[14:19] <moritz> then you're in good company, the perl6/pugs people come from all over the world

[14:20] <DarkWolf84> sorry

[14:20] <moritz> I'm from Germany, but we have hackers from the US, Taiwan, Isreal etc

[14:20] <DarkWolf84> i forgot to identify myself

[14:21] <DarkWolf84> i think now it's done

[14:22] <DarkWolf84> i send the my email two times

[14:22] *** Jedai joined
[14:22] <DarkWolf84> ok

[14:24] <moritz> DarkWolf84: got it now

[14:24] <moritz> DarkWolf84: email is on its way

[14:24] <DarkWolf84> fine :)

[14:24] <moritz> DarkWolf84: it's custom to add yourself to the AUTHORS file on first commit as a test if commit works

[14:26] <DarkWolf84> how work this

[14:26] <DarkWolf84> i'm not familiar whit it

[14:27] <DarkWolf84> with it*

[14:28] <moritz> DarkWolf84: http://www.google.com/search?hl=en&q=svn+tutorial

[14:28] <lambdabot> Title: svn tutorial - Google Search

[14:28] <DarkWolf84> tu

[14:58] *** bonesss joined
[15:00] *** amnesiac joined
[15:00] *** weinig|bbl is now known as weinig

[15:07] <avar> ?eval 1

[15:10] *** perlmonkey2 joined
[15:11] *** kanru joined
[15:13] <moritz> avar: the answer is 1 (and Bool::True) ;-)

[15:14] <avar> return "The answer to life, the universe, and everything" but 42

[15:14] <DarkWolf84> :)

[15:26] *** chris2 joined
[15:26] *** VanilleBert left
[15:31] *** marmic joined
[15:36] *** seano joined
[15:37] *** prly joined
[15:39] *** justatheory joined
[16:05] *** weinig is now known as weinig|away

[16:24] *** fglock joined
[16:41] *** buetow joined
[16:50] <svnbot6> r15791 | fglock++ | PCR - version 0.22 in CPAN

[16:51] *** diakopter joined
[16:56] *** evalbot_r15790 joined
[17:14] *** vel joined
[17:14] *** falesca joined
[17:15] *** vel6608 joined
[17:18] *** lichtkind joined
[17:19] *** vel6608 joined
[17:24] <svnbot6> r15792 | fglock++ | v6.pm - fixed precedence of ';' separator

[17:24] *** justatheory joined
[17:48] *** offby1 joined
[17:50] *** bernhard joined
[17:51] *** falesca joined
[17:54] *** diakopter joined
[17:54] <lichtkind> Leibsle: soso das leibsle

[17:54] *** offby1 joined
[18:00] *** justatheory joined
[18:25] *** justatheory_ joined
[18:28] *** jisom joined
[18:34] *** chris2 joined
[18:36] *** dduncan joined
[18:38] *** jisom_ joined
[18:44] <kolibrie> I am trying to add values to a match object as a named capture, as a side effect

[18:44] *** justatheory_ is now known as justatheory

[18:44] <kolibrie> I did not see any examples of this in the spec, but think it should look something like: 

[18:44] <kolibrie> $<numeral> := <roman_numeral>  { $<notation> := 'roman' }

[18:44] <pasteling> "kolibrie" at 66.166.118.50 pasted "attempting to add values to match object as a side-effect" (82 lines, 1.4K) at http://sial.org/pbot/23818

[18:47] *** frobnitz joined
[18:48] <kolibrie> is there a canonical way of doing this?

[19:13] *** geoffb joined
[19:14] *** perlmonkey2 left
[19:24] *** fglock joined
[19:24] <kolibrie> fglock: any insights into http://sial.org/pbot/23818 ?

[19:25] <lambdabot> Title: Paste #23818 from "kolibrie" at 66.166.118.50

[19:27] <fglock> kolibrie: looking

[19:28] <kolibrie> fglock: not sure if it is specced, but it seemed like it might work

[19:33] *** buubot joined
[19:37] <fglock> kolibrie: I think it is specced; but Pugs::Runtime::Match->hash returns a copy of the hash - assigning to the hash doesn't change the Match object, unfortunately

[19:38] <kolibrie> fglock: so the syntax is okay, but not currently implemented in PCR?

[19:39] <fglock> yes

[19:39] * kolibrie will try to find another way, then

[19:40] <kolibrie> (unless fglock has a solution already in mind)

[19:41] <fglock> hmm - we could use tie, if it weren't slow

[19:41] *** geoffb joined
[19:41] <fglock> otoh, everything is slow these days

[19:43] *** prism joined
[19:44] * kolibrie chose Perl regexes mostly because the syntax is so nice - was not expecting speed for a little while

[19:44] <fglock> the solution I'm thinking about is to make a flexible emitter, that does some cost-benefit analysis, based on the kp6 compiler

[19:45] <DarkWolf84> i like much regexp too :)

[19:46] <DarkWolf84> maybe because i haven't learned the new ones

[19:47] <kolibrie> DarkWolf84: I am using Perl 6 regexes, which are a great improvement over Perl 5 regexes

[19:47] <kolibrie> though the spec and implementation are not finished yet

[19:47] <DarkWolf84> I said i haven't learned them yet

[19:49] *** riffraff joined
[19:49] <DarkWolf84> but there is a lot of time to leran new things

[19:49] <DarkWolf84> :)

[19:50] <kolibrie> a lifetime

[19:50] <fglock> kolibrie: tieing the result of 'sub hash' in Pugs::Runtime::Match is not too bad

[19:50] <DarkWolf84> life is a big school for me

[19:51] <kolibrie> fglock: cool

[20:08] <fglock> kolibrie: done 

[20:08] <svnbot6> r15793 | fglock++ | PCR - minor hack to make %($/) rw - kolibrie++

[20:08] <kolibrie> fglock: thank you

[20:08] * kolibrie pulls

[20:08] <fglock> didn't need tie :)

[20:08] <kolibrie> nice

[20:12] *** Aankhen`` joined
[20:15] <kolibrie> fglock: fewer lines of code, too

[20:17] <svnbot6> r15794 | fglock++ | PCR - ChangeLog update

[20:22] *** Psyche^ joined
[20:24] <DarkWolf84> strange

[20:24] <DarkWolf84> let vars don't work

[20:25] <ingy> seen audreyt 

[20:25] <DarkWolf84> it gives me no such subroutine

[20:26] <DarkWolf84> is it removed

[20:27] <moritz> @seen audreyt 

[20:27] <lambdabot> audreyt is in #haskell-soc, #haskell and #perl6. I don't know when audreyt last spoke.

[20:27] <moritz> ingy: the sigils are very important here ;-)

[20:27] <ingy> @gracias

[20:27] <lambdabot> Unknown command, try @list

[20:28] <kolibrie> ?eval my $x; for 1..4 { let $x = $_ } say $x;

[20:28] *** evalbot_r15790 is now known as evalbot_r15794

[20:28] <evalbot_r15794> Error: No such subroutine: &let

[20:28] <DarkWolf84> yes

[20:28] <DarkWolf84> the same error

[20:28] <moritz> what should 'let' be good vor?

[20:29] <kolibrie> DarkWolf84: don't know what happened, it still works for me on an older pugs

[20:29] <DarkWolf84> i tyed it because the tutorial on http://www.programmersheaven.com/2/Perl6-FAQ-Variables

[20:29] <kolibrie> moritz: hypothetical assignment, rolls back if block is false

[20:29] <lambdabot> Title: Perl6-FAQ-Variables at Programmers Heaven

[20:30] <moritz> kolibrie: thanks ;)

[20:30] <DarkWolf84> i saw it there

[20:31] <DarkWolf84> so it's remouved lately

[20:31] <DarkWolf84> removed*

[20:31] <moritz> DarkWolf84: I wouldn't conclude that unless it's remove from the specs

[20:32] <DarkWolf84> that's realy strange

[20:32] <kolibrie> fglock: that fix works here, thank you. fglock++

[20:33] <fglock> kolibrie: np :)

[20:34] *** Psyche^ is now known as Patterner

[20:34] <DarkWolf84> maybe that's a bug in the new vesrion

[20:37] <fglock> kolibrie: how about adding a test for it in pugs/t/ ?

[20:38] <kolibrie> fglock: like from my nopaste example, perhaps?

[20:38] <DarkWolf84> test for let?

[20:38] <fglock> yes

[20:38] <DarkWolf84> why not

[20:38] <DarkWolf84> :)

[20:38] <fglock> DarkWolf84: that too :)

[20:39] <kolibrie> DarkWolf84: for match value assignment from a side effect

[20:39] <DarkWolf84> i'll write some program for test

[20:40] *** diotalevi joined
[20:40] <DarkWolf84> the subversion is new thing for me but I found tutorial for it

[20:42] <moritz> DarkWolf84: you should read docs/Pugs/Doc/Hack.pod as well ;-)

[20:51] *** miyagawa joined
[20:51] *** theorbtwo joined
[20:53] *** fglock left
[20:57] *** Psyche^ joined
[21:09] *** Psyche^ is now known as Patterner

[21:10] <TimToady> @tell fglock we need to start switching our regex metacharacters over to simple '...' for quoting.  Step 1) enable parsing of '...' in addition to <'...'>. Step 2) make all punctuation "meta" and deprecate <'...'>.  Fix whatever breaks.  Step 3), remove <'...'>.

[21:10] <lambdabot> Consider it noted.

[21:10] *** polettix joined
[21:11] <kolibrie> TimToady: is that recent?

[21:11] <Juerd> kolibrie: Steaming fresh.

[21:11] <Juerd> Though discussion about it isn't quite all that new :)

[21:11] * kolibrie thought he didn't recognize it

[21:13] <Juerd> I would look up when I first suggested it, but my mail archive is broken and only lists things more recent than June 2006

[21:13] <svnbot6> r15795 | kolibrie++ | binding subrules to aliases, in the regex and as a side-effect

[21:13] <Juerd> I have no idea where the rest went

[21:14] <TimToady> was several years ago, anyway...

[21:15] <Juerd> Probably around 2002-ish, when I worked on my XML grammar :)

[21:18] *** justatheory joined
[21:19] <Aankhen``> Wowie.  That should shake things up a bit.

[21:21] <TimToady> not as much as you'd think--2/3 of the punctuation was already meta

[21:22] <Aankhen``> Oh.  I never realized.

[21:22] <Aankhen``> The '...' bit will be very useful.

[21:22] <[particle]> timtoady\+\+

[21:22] <TimToady> and '=>' is a lot easier to read than =\>

[21:23] <moritz> my "make smoke" dies after t/builtins/strings/uc.t without any message

[21:23] <TimToady> Well, the '..' part of it was originally 'Juerd++'s idea.

[21:24] <TimToady> but it was a small jump from there to realizing we could get rid of another arbitrary list that the user has to memorize.

[21:25] <TimToady> I'd just got done bragging about such 'list reduction' on perlmonks, and then realized we still had this arbitrary list...

[21:25] <Aankhen``> Heh.

[21:26] <TimToady> the list of punctuation chars that weren't meta before was just: ~ ` ; ' " , -

[21:27] <TimToady> occasionally meta are: ! = /

[21:27] <TimToady> and these were always meta: # ^ $ @ % & | \ * + ? : . ( ) < > [ ] { } « »

[21:27] <Aankhen``> What about „? :-D

[21:28] <Aankhen``> Yeh, I see what you mean now.

[21:29] <TimToady> and by the time we pull out ' and " it doesn't leave much else

[21:29] <TimToady> so we decided to make it a simple rule.

[21:29] <Aankhen``> Yeah.

[21:29] <TimToady> also makes the regex grammar rather more extensible.

[21:31] <Juerd> Extensible. I usually call it forward compatible :)

[21:31] <Juerd> Extensions as a possibility versus as a necessity :)

[21:32] <Juerd> In any case, I'm very happy with the change.

[21:32] <Juerd> (Which isn't that big a change anyway)

[21:32] <TimToady> yes, that was the pleasantly surprising part

[21:33] <TimToady> bit of a pain to switch, but worth it.

[21:33] <TimToady> and certainly better to do it now than later

[21:39] <dduncan> seen mugwump

[21:39] <geoffb> TimToady: link to list reduction brag on PM?

[21:39] <geoffb> I'm going to a .pm meeting tonight, and that would be good fodder ....

[21:41] *** CardinalNumber joined
[21:47] <TimToady> geoffb: http://www.perlmonks.org/?node_id=606369

[21:47] <lambdabot> Title: Re^2: Builtin functions defaulting to $_

[21:48] <geoffb> TimToady: thanks

[21:53] <geoffb> TimToady: out of curiosity, do you keep a (mental, electronic, or physical) list of the things Perl 6 users will be expected to memorize?  I know you have been trying to shrink the cognitive load, but is this done on a "low-hanging-fruit" basis, or is there some master list you're working to minimize?

[21:53] <geoffb> (one of those "view into the designer's mind" questions)

[21:56] <DarkWolf84> btw how to report a bug

[21:57] <geoffb> Oh, and: if this list is written down somewhere, can we see it's current state?

[21:57] <geoffb> DarkWolf84: Add a test in t/

[21:59] <TimToady> there's no list.  it's more like whack-a-mole.

[22:00] <geoffb> I wouldn't have been surprised either way.  :-)

[22:01] <geoffb> Is $*OUT autoflush default on or off for Perl 6?  And how do you get the other behavior?

[22:06] <svnbot6> r15796 | lwall++ | Some whackage on the <'...'> to '...' transition, mostly tests.

[22:06] <DarkWolf84> btw I found let test in t/

[22:07] <DarkWolf84> i gives the same result

[22:07] *** meppl joined
[22:08] <TimToady> let is just a form of temp (p5 local) that might or might not restore.  so it won't unbreak the binding if the binding is broken. :)

[22:10] <DarkWolf84> it should be better to be there if that's not a problem

[22:12] <moritz> I just hate the "let" keywords which reminds me of visualbasic agony ;-)

[22:12] <DarkWolf84> basic oh no

[22:12] <DarkWolf84> 0_0

[22:12] <DarkWolf84> :)

[22:13] <TimToady> we ignored that and borrowed it from the mathematicians to mean "provisionally"

[22:13] <TimToady> because it was shorter than "suppose".  :)

[22:13] <buu> This is .. scary in whole new ways.

[22:13] <moritz> DarkWolf84: I had to code a bit in VBA 6.0 for $prev_job, and I remember some braindamage having to use "let" for assignemnt to references

[22:14] <DarkWolf84> basik is to lame for some tasks

[22:14] * moritz had to write FFT in VB ;(

[22:15] <moritz> so insane

[22:15] <DarkWolf84> that was my first programing language after all

[22:15] <moritz> DarkWolf84: same for me, startet with QBasic on win 3.11/dos 6.1

[22:15] <geoffb> What happened to that new VB version that audreyt was all excited about because it had been cross-pollinated with Haskell?  Is it out yet?

[22:16] <TimToady> buu: I don't know why you think it's new... "let" as been in the language since 2002.

[22:16] <DarkWolf84> before 5-6 years we have only 8-bit apple][ clonings 

[22:16] <TimToady> *has

[22:16] <DarkWolf84> the only way to programing them was basic

[22:17] <DarkWolf84> imean in our contry

[22:17] <DarkWolf84> i was just 6-th grade

[22:17] <DarkWolf84> :)

[22:18] <DarkWolf84> btw there the word let there was optional

[22:19] <Juerd> If enough people hate 'let', we'll automatically get a "use let", like "use self" ;)

[22:19] <DarkWolf84> %( my english

[22:21] <DarkWolf84> after all it's not removed from definitions

[22:21] <DarkWolf84> not yet

[22:24] <DarkWolf84> actually i haven't find way to use let

[22:25] <DarkWolf84> found*

[22:26] <DarkWolf84> I don't really need it.

[22:27] *** ludan joined
[22:36] <svnbot6> r15797 | lwall++ | STD.pm now believes in '...'  (oddly, it never had a rule to parse <'...'>)

[22:38] <TimToady> DarkWolf84: essentially, you're using 'let' semantics all the time whenever a regex captures, because the semantics are that the old binding is restored if the capture is backtracked over (fails).

[22:40] *** Limbic_Region joined
[22:41] <DarkWolf84> is that means the old regex will not work?

[22:42] <TimToady> just because something is backtracked doesn't mean that it won't succeed some other way.

[22:43] <DarkWolf84> may be it's used different way

[22:43] <TimToady> p5 already has 'let' within its closures, except that it overloaded 'local' for that.

[22:44] <TimToady> we decided to keep 'let' and 'temp' separate in p6

[22:44] <TimToady> and that lets you use 'let' outside of regex as well

[22:45] <DarkWolf84> well

[22:45] <TimToady> where throwing an exception or returning undef is equivalent to backtracking.

[22:45] <TimToady> good for hypothetical programming like Prolog

[22:46] <TimToady> though we'd really need a unification matcher to do that right.

[22:47] <DarkWolf84> but now it's not defined

[22:47] <DarkWolf84> not in my version

[22:47] <TimToady> what isn't defined?

[22:47] <DarkWolf84> let

[22:47] <TimToady> might not be implemented yet.

[22:48] <DarkWolf84> why it works for the old versions then

[22:48] <TimToady> ?eval my $x; do { let $x = 1 }; say $x

[22:48] *** evalbot_r15794 is now known as evalbot_r15797

[22:48] <evalbot_r15797> Error: No such subroutine: &let

[22:48] <TimToady> ?eval my $x; do { temp $x = 1 }; say $x

[22:48] <evalbot_r15797> Error: No such subroutine: &temp

[22:48] <TimToady> looks like temp is broken too...

[22:49] <DarkWolf84> i haven't tryed temp yet

[22:49] <TimToady> they were recently demoted from declarators, I think, so probably got broken then

[22:49] <TimToady> ?eval my $x; do { temp $x; $x = 1 }; say $x

[22:49] <evalbot_r15797> Error: No such subroutine: &temp

[22:50] <TimToady> ?eval my $x; do { $x.temp; $x = 1 }; say $x

[22:50] <evalbot_r15797> Error: No such method in class Scalar: &temp

[22:50] <TimToady> yeah, it's borken.

[22:51] *** [particle] joined
[22:51] <TimToady> probably interacts with the recent type system change badly, and will get picked up again after things settle down under the new type system.

[23:00] *** vel joined
[23:11] *** offby1` joined
[23:13] *** offby1` is now known as offby1

[23:16] *** Tene joined
[23:19] *** justatheory joined
[23:19] *** Daveman joined
[23:22] *** DarkWolf84 joined
[23:23] <DarkWolf84> i'm back

[23:23] <DarkWolf84> net problems

[23:24] *** ozo_ joined
[23:36] *** rashakil_ joined
[23:38] *** zgh joined
[23:39] *** snoop0x7b joined
[23:39] <obra> lambdabot: @pl /x -> x + 1

[23:39] <lambdabot> (line 1, column 1):

[23:39] <lambdabot> unexpected "/"

[23:39] <lambdabot> expecting white space, natural, identifier, lambda abstraction or expression

[23:39] <obra> lambdabot: @pl \x -> x + 1

[23:39] <lambdabot> (1 +)

[23:53] *** diakopter joined
