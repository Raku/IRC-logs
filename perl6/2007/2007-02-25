[00:10] *** CardinalNumber joined
[00:28] *** CardinalNumber is now known as ProperNoun

[01:27] *** ewilhelm left
[01:36] *** Limbic_Region joined
[01:42] *** Digital joined
[01:42] <Digital> So I was reading about perl6, and caught the nugget that one of the most functional implementations of perl6 right now is written in Haskell.

[01:43] <Digital> Is this true? And if it is, do you think there is any chance I might find the person responsible, buy them a beer and spend the time they are drinking it heaping praise on their diseased genius?

[01:44] <revdiablo> It's true

[01:44] <qmole> heh yes

[01:44] <revdiablo> Digital: You can blame/priase audreyt

[01:44] <revdiablo> Priase, even

[01:44] <Digital> Is there a good reason for this, or ... ? 

[01:44] <revdiablo> Praise?

[01:44] <qmole> but if you did catch audreyt she would probably tell you 100s of people deserve praise

[01:45] <revdiablo> It took me 3 tries to type it right, sheesh

[01:45] <Digital> I thought Haskell was one of those teaching languages that was mathematically brilliant, elegant beyond words and completely inappropriate for getting any real work done in.

[01:45] <revdiablo> Digital: The story goes, it started out at a project to learn Haskell by writing a toy language. Audrey chose perl 6 as the "toy language", and it blossomed from there

[01:46] <allbery_b> haskell is quite practical once you wrap your head around it.

[01:46] <allbery_b> but that wrapping takes some doing

[01:46] <Digital> Can you compile haskell?

[01:46] <revdiablo> Yep

[01:46] <allbery_b> @where ghc

[01:46] <lambdabot> http://haskell.org/ghc

[01:46] <allbery_b> @version

[01:46] <lambdabot> lambdabot 4p509, GHC 6.6 (OpenBSD i386)

[01:47] <lambdabot> darcs get http://www.cse.unsw.edu.au/~dons/lambdabot

[01:47] <Digital> Interesting.  

[01:48] <Digital> Is it trolling to ask you people, who clearly know more about me than perl 6 (because I know only a little), what your opinion is of the idea that perhaps perl 6 is suffering from epic second-system effect?

[01:48] <qmole> of course darcs is another example of 'real world' haskell :)

[01:48] <allbery_b> haskell's actually quite nice for writing languages; the Reader monad encapsulates much of the hard work in managing variable scope, for example

[01:48] <revdiablo> Digital: It could be trolling. That depends on what you're aiming for with the question. =)

[01:48] <allbery_b> @quote TimToady second-system

[01:48] <lambdabot> No quotes match. And you call yourself a Rocket Scientist!

[01:49] <allbery_b> hm, thought someone saved that quote

[01:49] <revdiablo> Digital: I don't think the idea is right, but I can see how it would seem like that

[01:49] <allbery_b> @quote done.right

[01:49] <lambdabot> No quotes match. That's something I cannot allow to happen.

[01:49] <allbery_b> feh

[01:49] <Digital> rev: Nothing, really, that's just my opinion and I wonder what people in the know think of it.

[01:49] <Digital> From the outside it looks like perl 5 was pretty nice, and now perl 6 has been in development forever and we keep hearing about the jillion new features it will have.

[01:49] <allbery_b> anyway, TimToady has been known to comment that perl6 is the second system effect done righht

[01:50] <revdiablo> Digital: Well, it's a fair assessment

[01:50] <Digital> and it makes me wonder what was so fundamentally broken with perl 5 that warranted a complete mulligan on the whole language rather than some evolutionary changes stretched out over time.

[01:50] <allbery_b> actually p6 is getting firmed down at this point with an eye on releasing it

[01:50] <revdiablo> Digital: Time will tell, I guess.

[01:51] <silug> Dig: you should grab pugs and try it out.  it's nice.

[01:51] <revdiablo> Digital: Perl 5 has a long and ugly history. The language has a lot of baggage. It works fine, but all the edge cases have created lots of nooks and crannies for "evolutionary change" to fall and break its ankles.

[01:51] <revdiablo> Keep in mind, I love Perl 5. But to ignore its problems is not realistic

[01:51] <Digital> rev: it sounds like the fix to that is dropping the crap rather than adding a bunch more. ;)

[01:52] <revdiablo> Digital: Yeah, a bunch of crap in different directions, though. Like I said, I think time will tell. Personally, I am optimistic about Perl 6

[01:52] <allbery_b> one thing perhaps not obvious from the current specs, although starting to become so finally, is that quite a lot of what's "added" will actually live in modules

[01:52] <allbery_b> (and likely won't exist immediately)

[01:54] <Digital> What would you say the number one rad feature of perl 6 is?

[01:54] <Digital> @faq

[01:54] <lambdabot> The answer is: Yes! Haskell can do that.

[01:54] <jql> does it have to work now, or just be proposed? :)

[01:54] <Patterner> Strange Operators :)

[01:55] <Digital> Hey, jql.  Are you writing a perl6qt?

[01:55] <revdiablo> Number one? Oh, I don't know. One thing I really like is the object system. And the type system seems nice. And the syntax cleanups. Oh, that's more than one. =)

[01:55] <jql> I took a stab at it 3 years ago, but I recognized then that Parrot was flawed

[01:55] <jql> perl6 still gives me much hope, though

[01:55] <jql> after all, perl6 can already run PerlQt

[01:55] <jql> well, pugs

[01:55] <Digital> I suppose that's true.

[01:55] <silug> last time i tried to build parrot, it wouldn't cooperate.  i should try it again.

[01:56] <Digital> The reason I was trying to get the bot to tell me where to find a FAQ was to find out if perl6 was going to be fully backwards-compatible.

[01:56] <revdiablo> Not at the source level

[01:56] <Digital> Er, what other level is there in perl?

[01:56] <silug> it's not, but there are ways to get it to do perl5-ish things (like regular expressions)

[01:57] <allbery_b> that's not entirely accurate

[01:57] <revdiablo> Digital: Pugs can run perl 5 code by embedding the perl 5 runtime, for example

[01:57] <Digital> I would hope the newest version of the Practical Extraction and Report Language would maintain full support for regular expressions.

[01:57] <revdiablo> Digital: So the perl 6 syntax is not the same, but one can use perl 5 modules, etc

[01:57] <jql> depends on your definition of full

[01:58] <revdiablo> Perl 6 has a new syntax for regular expressions, too. They're called rules.

[01:58] <Digital> I hope they still look like line noise, there's nothing I enjoy more than writing a long, inscrutable and hopelessly unmaintainable sequence of slashes and shifted symbol characters.

[01:58] <allbery_b> ?eval my $a = 5; { use 5; print "$a\n" }

[01:58] *** evalbot_r15335 is now known as evalbot_r15342

[01:58] <evalbot_r15342> 1.0

[01:59] <jql> lol

[01:59] <allbery_b> I don't think that's embeddinga  runtime, I think that's just switching parsers on the fly

[01:59] <revdiablo> allbery_b: I thought it embeds perl5 runtime right now?

[02:00] <jql> Digital: Perl6 does try to introduce bracket-reform in regular expressions. (?:) becomes [], and (?everything-else) and [] becomes <>

[02:07] <allbery_b> just checked my last buildlog after getting lost in the makefiles... don't see the perl5 core being linked in

[02:10] *** |mjk| joined
[02:15] <revdiablo> http://pugs.blogs.com/pugs/2007/02/various_uses_of.html

[02:15] <lambdabot> Title: Pugs: Various uses of embedded Perl 5.

[02:17] *** dmq joined
[02:23] *** mako132 joined
[02:34] *** rashakil joined
[02:54] *** Aankhen`` joined
[02:59] *** Aankhen`` is now known as Aankhen`

[03:02] *** Aankhen` is now known as Aankhen`_

[03:05] *** Aankhen`_ is now known as Aankhen``

[03:05] *** Aankhen`` joined
[03:43] *** weinig joined
[04:17] *** mako132 joined
[04:19] *** sunnavy_ joined
[04:35] *** weinig joined
[04:46] *** amnesiac joined
[05:00] *** putter joined
[06:00] *** ashleyb joined
[06:01] *** mako132 left
[06:14] *** BooK_ joined
[06:19] *** sunnavy joined
[06:28] *** jisom joined
[06:38] *** ashelyb_ joined
[06:45] *** CardinalNumber joined
[06:51] *** jisom joined
[06:51] *** jisom left
[06:51] *** jisom joined
[06:57] *** ashleyb joined
[07:03] *** CardinalNumber is now known as ProperNoun

[07:24] *** ashelyb_ joined
[07:49] <allbery_b> ?eval 1

[07:49] <evalbot_r15342> 1

[07:55] <tene> ?eval %h = (:a<x>, :b<y>, :c<z>); $v = 'omg'; %h<b> := $v; %h.perl.say; %h<b>.say

[07:55] <evalbot_r15342> OUTPUT[{("a" => "x"), ("b" => "y"), ("c" => "z")}␤omg␤] Bool::True

[07:55] <tene> ?eval %h = (:a<x>, :b<y>, :c<z>); $v = 'omg'; %h<b> := $v; %h.yaml.say; %h<b>.say

[07:55] <evalbot_r15342> OUTPUT[--- ␤? a␤: x␤␤? b␤: y␤␤? c␤: z␤␤␤omg␤] Bool::True

[07:56] <tene> .perl and .yaml aren't smart about rebinding elements of hashes.

[07:57] <allbery_b> hm.  looks like a candidate for a new test, if it isn't already

[07:59] <allbery_b> actually I find myself wondering what that should do

[07:59] <allbery_b> (:= vs. = on a hash element that is)

[08:00] <tene> allbery_b: t/operators/binding/hashes.t

[08:03] <allbery_b> ah, yeh, I get it

[08:05] * allbery_b will have to see what that test looks like in his running smoke

[08:06] <tene> the issue isn't with the binding, though, it's with .perl and .yaml

[08:06] <allbery_b> is it?  or is it with %hash?  that's what I want to see

[08:08] <tene> In my test case there, %h<b> has the right data, as confirmed by t/operators/binding/hashes.t, but .perl and .yaml on it show the value before the rebinding

[08:09] <allbery_b> ?eval my %h = (:a<x>, :b<y>, :c<z>); my $v = 'foo'; $h<b> = $v; %h.values.say

[08:09] <evalbot_r15342> OUTPUT[xyz␤] Bool::True

[08:09] <allbery_b> ding!

[08:10] <allbery_b> oops

[08:10] <allbery_b> ?eval my %h = (:a<x>, :b<y>, :c<z>); my $v = 'foo'; $h<b> := $v; %h.values.say

[08:10] <evalbot_r15342> OUTPUT[xyz␤] Bool::True

[08:10] <allbery_b> hm, actually the first one suggests oddness too

[08:10] <tene> Huh.

[08:11] <allbery_b> something's generally wrong with hashes accessed as a whole like that

[08:14] <allbery_b> ?eval %h = (:a<x>, :b<y>, :c<z>); $v = 'omg'; %h<b> = $v; %h.perl.say; %h<b>.say

[08:14] <evalbot_r15342> OUTPUT[{("a" => "x"), ("b" => "omg"), ("c" => "z")}␤omg␤] Bool::True

[08:14] <allbery_b> hm, it gets that right, though

[08:14] <allbery_b> peculiar

[08:15] <allbery_b> so, maybe two different bugs there :)

[08:25] <meppl> good night

[08:25] *** ashleyb joined
[08:28] *** beppu joined
[08:55] *** elmex joined
[09:07] *** bernhard joined
[09:10] <svnbot6> r15343 | kudra++ | Summary complete

[09:17] *** iblechbot joined
[09:28] <svnbot6> r15344 | kudra++ | Placeholder

[09:34] <devbot6> planet6: Audrey Tang: Weekly Perl 6 mailing list summary for 4-10 February, 2007 <http://pugs.blogs.com/pugs/2007/02/weekly_perl_6_m_2.html>

[10:46] <tene> Should eval('slightly malformed yaml',:lang<yaml>); be able to cause pugs to die?

[10:48] <tene> ?eval eval("- *a\n a: b\n- *a\n b: c\n- \n c:&a\n",:lang<yaml>)

[10:48] *** evalbot_r15342 is now known as evalbot_r15344

[10:48] <evalbot_r15344> pugs: user error (moose!)␤

[10:51] <moritz> tene: I guess it should not, just set $!

[10:52] <moritz> tene: you should commit it as a test case

[10:52] <tene> moritz: as I recall, tests that kill the interpreter aren't good.

[10:54] <moritz> ?eval eval(eval("- *a\n a: b\n- *a\n b: c\n- \n c:&a\n",:lang<yaml>))

[10:54] <evalbot_r15344> pugs: user error (moose!)␤

[10:54] <tene> need to quote the outer eval

[10:54] <moritz> right

[10:55] <moritz> ?eval eval('eval("- *a\n a: b\n- *a\n b: c\n- \n c:&a\n",:lang<yaml>)')

[10:55] <evalbot_r15344> pugs: user error (moose!)␤

[10:55] <moritz> tene: read t/README for what to do with "hard parsefail"

[11:00] <tene> Which folder should I put that test in?

[11:02] <moritz> currently I don't see a good one, so just use xx-uncategorized

[11:11] <gaal> that's not a very mooseful error :(

[11:12] <gaal> you can put it in t/unspecced also; i think there's an eval_yaml test there

[11:14] <tene> should I add it to eval_yaml.t ?

[11:15] *** xerox joined
[11:18] <moritz> I'd say yes ;)

[11:30] <tene> Hmm.  I guess I can't commit anymore.

[11:31] <moritz> tene: I'll try to give a commit bit

[11:32] <moritz> tene: just query me your email address

[11:47] <svnbot6> r15345 | moritz++ | disabled 10smoke patch in debian/rules to prevent build failures

[11:58] *** chris2 joined
[12:14] *** CardinalNumber joined
[12:32] *** CardinalNumber is now known as ProperNoun

[12:42] *** elmex joined
[13:02] *** CardinalNumber joined
[13:08] *** larsen_ joined
[13:19] *** CardinalNumber is now known as ProperNoun

[13:19] *** DHGE joined
[13:31] *** larsen_ joined
[13:37] *** devogon joined
[13:46] *** larsen_ joined
[14:04] *** larsen___ joined
[14:13] *** rhizo joined
[14:13] *** Limbic_Region joined
[14:18] *** explorer joined
[14:23] <svnbot6> r15346 | kudra++ | Yet another summary

[14:27] *** gnuvince_ joined
[14:29] *** buetow joined
[14:38] <svnbot6> r15347 | rodi++ | fixed use_ok

[14:38] <svnbot6> r15348 | rodi++ | fixed use_ok

[14:39] <svnbot6> r15349 | rodi++ | typo fix

[14:42] <svnbot6> r15350 | kudra++ | Marked as hidden all threads covered in previous weeks

[14:43] <devbot6> planet6: Audrey Tang: Weekly Perl 6 mailing list summary for 11-17 February, 2007 <http://pugs.blogs.com/pugs/2007/02/weekly_perl_6_m_3.html>

[14:58] *** putter joined
[15:14] *** _DHGE joined
[15:23] *** jisom_ joined
[15:27] *** Ziggy6 joined
[15:28] *** Ziggy6 left
[15:28] *** larsen_ joined
[15:50] *** weinig joined
[16:06] *** CardinalNumber joined
[16:18] *** iblechbot joined
[16:25] *** ProperNoun joined
[16:49] *** CardinalNumber joined
[17:04] *** [M]erk joined
[17:06] <devbot6> dev: Ticket #8 (task updated): Fix old repository (svn.openfoundry.org) references. <http://dev.pugscode.org/ticket/8#comment:1>

[17:09] <svnbot6> r15351 | diakopter++ | closes ticket 8.  http://dev.pugscode.org/ticket/8

[17:09] <svnbot6> r15351 | diakopter++ | Fix old repository (svn.openfoundry.org) references.

[17:10] <svnbot6> r15351 | diakopter++ | Removed from TASKS for redundancy.

[17:10] <devbot6> dev: Ticket #8 (task closed): Fix old repository (svn.openfoundry.org) references. <http://dev.pugscode.org/ticket/8#comment:2>

[17:10] <svnbot6> r15351 | diakopter++ | Sorry if some generated files are updated wrongly.

[17:10] <lambdabot> Title: #8 (Fix old repository (svn.openfoundry.org) references.) - Pugs - Trac

[17:12] *** ProperNoun joined
[17:17] *** diakopter joined
[17:24] <devbot6> dev: Ticket #11 (task updated): Remove all unconditional SKIP/TODO flags from t/. <http://dev.pugscode.org/ticket/11#comment:1>

[17:26] <devbot6> dev: Ticket #12 (task updated): Tests directory scaling problem. <http://dev.pugscode.org/ticket/12#comment:1>

[17:54] *** Ziggy6 joined
[17:57] *** CardinalNumber joined
[17:58] *** offby1 joined
[17:59] <offby1> how does about a pugs built with PUGS_EMBED="parrot" differ from one built without that?

[17:59] *** xinming_ joined
[17:59] <offby1> i.e., what does it do with parrot?

[17:59] <offby1> Does it actually generate parrot byte code, and have parrot run that code, instead of interpreting the code itself?

[18:01] <moritz> offby1: you can choose the backend with a commmand line option...

[18:01] <offby1> do tell

[18:01] <moritz> offby1: and it defaults to intepreting it

[18:01] <moritz> offby1: and if you embed parrot, you can choose parrot

[18:02] <offby1> moritz: so if I say something like "./pugs -Bparrot my-code.p6", it'll actually compile to parrot bytecode, then have parrot run the result, instead of interpreting it itself?!

[18:02] <offby1> That'd be great, because presumably it'd be a ton faster.

[18:02] <moritz> I think so, yes

[18:02] <offby1> this is worth a try!

[18:02] * offby1 tries

[18:03] <moritz> offby1: but it's not so fully implemented as the haskell bakcend

[18:04] <offby1> hmm, strange error message:  I deliberately used a meaningless word after the -B, and expected an error along the lines of "pugs cannot find the back end named 'frobotzle', but instead I see this:

[18:04] <offby1> /usr/local/src/langs/pugs/pugs -Bfrobotzle anagrams.p6 

[18:04] <offby1> pugs: user error (*** user error (*** No compatible subroutine found: "&truncate"

[18:04] <offby1>         at ./bag.pm line 41, column 12-31)

[18:04] <offby1>     at anagrams.p6 line 1, column 1)

[18:04] <offby1> not encouraging

[18:04] <offby1> is this one of those semi-abandoned features that isn't really meant to be used?

[18:05] <moritz> I guess so ;)

[18:05] <offby1> pity

[18:05] <offby1> oh well

[18:06] <moritz> well, if perl6 is meant to be implemented in Perl 6, pugs with haskell backend is enough to bootstrap it

[18:06] <offby1> sure

[18:06] <moritz> ans perl6 will use parrot as its main backend

[18:07] <offby1> sure

[18:07] <offby1> in theory, one would only need run pugs once, to run the perl6-to-parrot compiler. 

[18:07] <moritz> right

[18:07] <offby1> then one waves goodbye to pugs, and continues development by running that compiler on parrot

[18:08] <offby1> so _if_ pugs is mostly meant as a way to do that bootstrap step, I can see that it wouldn't need to emit parrot code.  But something made me think it did anyway.

[18:08] <moritz> well, I guess we wouldn't abandon pugs fully, since it will be more complete than perl6 when we bootstrap perl6

[18:08] <offby1> sure, but I said "in theory".

[18:08] <offby1> Which assumes that is complete.

[18:08] <moritz> offby1: its optimised for fun, and different backends are fun

[18:09] <moritz> the js backend is nice as well ;)

[18:09] <offby1> how would I know if the parrot backend were working?  I fear I cannot count on the lack of an obvious error message.

[18:10] <moritz> you can run the testsuite with parrot as a backend

[18:10] <offby1> hmm

[18:11] <offby1> "make test-pir"?

[18:11] *** GabrielVieira2 joined
[18:11] <moritz> or make smoke-pir

[18:11] <offby1> odd, it's rebuilding pugs.

[18:12] <moritz> did you build it with parrot backend in first place?

[18:12] <offby1> no.

[18:12] <moritz> the build system is a bit broken anyway...

[18:12] <offby1> as area all build systems.

[18:12] <offby1> s/area/are/

[18:12] <moritz> when you type 'make' twice in a row, it still compiles some stuff at the second run

[18:12] <offby1> sure.

[18:12] <offby1> as do many build systems :-)

[18:13] *** lami20j joined
[18:13] *** larsen_ joined
[18:13] <offby1> for some reason writing correct Makefiles is really hard.

[18:13] <moritz> and what is more disturbing: if you run 'make install' after make, it still compiles stuff - assuming you are root it pollutes your source tree with uid0-files

[18:13] <offby1> well, I never do "make install", for that sort of reason.

[18:14] <offby1> odd, it needs a perl5 module that I don't have: Module/Install/Admin.pm

[18:15] <moritz> I use dpkg-buildpackage ;)

[18:15] *** ProperNoun joined
[18:15] <offby1> I use GNU "stow"

[18:15] <offby1> this is odd

[18:15] <offby1> /usr/bin/perl -Iinc "-MExtUtils::MY" -e "MY->fixin(shift)" /usr/local/src/langs/pugs/blib/script/pugs

[18:15] <offby1> cd perl5/Data-Capture && perl Makefile.PL && make

[18:15] <offby1> Can't open  for input:

[18:15] <offby1> No such file or directory at /usr/share/perl5/Module/Install/Admin.pm line 135.

[18:15] <offby1> BEGIN failed--compilation aborted at Makefile.PL line 3.

[18:15] <offby1> I dunno what that means.

[18:16] <moritz> did your read README and INSTALL and install all depencies?

[18:16] <offby1> I read README and INSTALL a long time ago.

[18:16] <offby1> I installed enough dependencies for pugs to work standalone.

[18:16] <offby1> but this is the first time I've tried "make test-pir".

[18:17] <offby1> I wonder if I need to rebuild pugs with PUGS_EMBED="parrot".  Docs aren't clear.

[18:18] <moritz> I'm just now running 'make smoke-pir', and I'm in the smoke phase...

[18:18] <moritz> and I did'nt rebuild with PUGS_EMBED="parrot"

[18:18] <offby1> :-(

[18:18] <offby1> same problem.

[18:19] <moritz> I still think it's a missing perl5 modul, but I'm not sure

[18:19] *** lami20j joined
[18:19] <offby1> Can you paste the output that starts around line 30 -- mine looks like this -- 

[18:19] <offby1> Configuring Pugs-6.2.13...

[18:19] <offby1> configure: Dependency pugs-fps-any: using pugs-fps-0.7 ...

[18:19] <offby1> perhaps that'll illuminate something

[18:20] <moritz> perhaps, but I'm the wrong person to ask :(

[18:20] <offby1> well, maybe I'll see something obvious.

[18:20] <moritz> I'm happy that pugs builds for me ;)

[18:20] <moritz> offby1: ok, go on then

[18:20] <moritz> but don't post it here ;))

[18:20] <offby1> what do you mean "go onm then"?  I want _you_ to paste _your_ output.

[18:20] <offby1> so _I_ can look at it.

[18:21] <moritz> how do you think that's going to help..?

[18:22] <offby1> maybe I'll see a difference between the stuff that your "Configure" found, and mine; and I'll slap my forehead and say "Of course; I need the Foomatic module".

[18:22] <offby1> my forehead has a callous on it from similar slaps in the past.

[18:22] <moritz> ok

[18:22] <offby1> .oO("callus"?)

[18:22] <offby1> thanks

[18:22] <moritz> wait a sec, I'll restart make

[18:23] <moritz> and perhaps prepend a 'make clean'

[18:23] <offby1> gosh, thanks

[18:23] <offby1> that's above and beyond

[18:24] <offby1> pugs takes an awful long time to build, if I recall correctly.

[18:24] <moritz> I can use 'make soon' ;)

[18:24] <offby1> huh

[18:24] <moritz> and my laptop's only other job is to crack some password files - nothing important ;)

[18:25] *** nipra joined
[18:26] * offby1 glances around nervously. 

[18:26] * offby1 subtly points to moritz in a way that only the FBI agent will notice

[18:26] <moritz> offby1: it's the universities password list ;)

[18:26] <moritz> offby1: and certainly not _your_ univeristy...

[18:27] <moritz> I told the admins it's a security hole, but they won't listen without proof-of-concept ;)

[18:27] <offby1> now, how do you know what U I attend?

[18:28] <moritz> offby1: are you studying phyics in Würzburg, Germany?

[18:28] <moritz> offby1: if not, I'm right ;)

[18:28] <moritz> it's called "educated guessing" 

[18:28] <moritz> and I probably knew you if you did

[18:29] <allbery_b> moritz: you should still be rather careful about that, thye could still choose to punish you for unauthorized access or something instead of doing something about it

[18:30] <moritz> allbery_b: you're totally right - but I know the admins, and they are quite ok... I just won't modify any files, so that it's no "sabotage"

[18:30] <moritz> and to be hones, blowfish passwords are a pain to crack ;)

[18:30] <offby1> Why, I've lived in Würzburg for years!

[18:30] * offby1 glances around nervously. 

[18:31] * offby1 quickly googles

[18:33] *** GabrielVieira2 is now known as GabrielVieira

[18:36] <moritz> offby1: what are you googling for?

[18:36] <Khisanth> moritz: building pugs is only around 15minutes, it's the testing that takes a very long time

[18:37] <moritz> Khisanth: it depends on how much RAM you have available... if your maschine starts swapping, it takes much longer :(

[18:37] <Khisanth> oh well yes then 5 hours 

[18:37] <offby1> moritz: Würzburg, so I can pretend I've lived there for years

[18:38] <allbery_b> heheh

[18:38] * allbery_b notes that building pugs takes noticeably longer than 15 minutes, but it did improve considerably when he maxed the AM on his g4 macmini :)

[18:38] <allbery_b> *RAM

[18:38] <moritz> offby1: http://moritz.faui2k3.org/tmp/pugs-smoke-pir <-- I'm currently uploading the buildlog, it will take some time

[18:38] <offby1> adding more RAM to my Mac Mini was the best thing I ever did for it.

[18:39] <offby1> moritz: thanks

[18:39] <moritz> offby1: np

[18:39] <allbery_b> maybe someday I'll get the intel version, but for now it's good enough for what I do with it

[18:39] <moritz> uploaded

[18:39] <moritz> PPC is way cooler than i386 if you ask me ;)

[18:41] <offby1> moritz: hmph, no relevant-looking difference between yours and mine :-(

[18:41] <offby1> guess it's time for a mailing-list question

[18:42] *** Ziggy6 left
[18:43] <allbery_b> by rights I ought to build/smoke pugs twice:  once for ghc6.6, once with the built/smoked (if it succeeded) ghc6.7 :)

[18:44] <allbery_b> hrm, except that I think pugs requires -fvia-C which is currently b0rked

[19:00] *** fglock joined
[19:00] *** CardinalNumber joined
[19:02] <fglock> hi

[19:09] *** dec_ joined
[19:16] <svnbot6> r15352 | diakopter++ | correcting uncommenting mistake.

[19:17] *** phiker joined
[19:17] <phiker> hi

[19:18] <phiker> what happened to #cpan6?

[19:19] <diakopter> phiker: no one sent anything to the mailing lists after September 2006?

[19:19] *** CardinalNumber is now known as ProperNoun

[19:20] <phiker> diakopter, ok, so the project is dead?

[19:20] * diakopter searches for a death certificate

[19:21] <phiker> are there plans to work on it again?

[19:22] <diakopter> my guess is that something .... less ambitious .... will come about.

[19:23] <phiker> you mean with only perl support or something like that?

[19:24] <diakopter> we'll see.  do you have resources you're considering committing/contributing or something?

[19:24] <phiker> no, I was just interested in Perl6 and thought about the future of CPAN, then I found CPAN6

[19:25] <phiker> as I can see, many documents describing the design have been commited

[19:25] <phiker> but not details about how to actually implement it

[19:25] <diakopter> from what I can tell, Perl 6 implementations will be able to use CPAN as it is

[19:26] <phiker> so nothing will change?

[19:26] <phiker> ok

[19:31] <diakopter> phiker: do you have ideas to improve/extend the CPAN?

[19:40] <phiker> diakopter, uhm

[19:40] <phiker> I´ll think about it :)

[19:40] *** iblechbot joined
[19:43] *** CardinalNumber joined
[19:53] *** ashleyb joined
[19:56] *** araujo joined
[19:56] *** GabrielVieira2 joined
[20:01] *** Schwern joined
[20:04] *** ProperNoun joined
[20:06] *** stevan_ joined
[20:12] <phiker> diakopter, syntax highlighting for POD documentation

[20:15] *** CardinalNumber joined
[20:26] <phiker> diakopter, as on perldoc.perl.org

[20:29] *** weinig joined
[20:33] *** ProperNoun joined
[20:42] *** offby1` joined
[20:44] *** CardinalNumber joined
[20:47] *** offby1` is now known as offby1

[20:52] *** ashleyb joined
[21:04] *** forsaken joined
[21:10] <phiker> gn8

[21:16] *** CardinalNumber joined
[21:18] *** CardinalNumber is now known as ProperNoun

[21:25] *** Aankhen`` joined
[21:26] *** fglock left
[21:39] *** Elastri joined
[21:52] *** buetow joined
[22:06] *** mako132 joined
[22:29] *** Psyche^ joined
[22:40] *** bsb joined
[22:41] *** Psyche^ is now known as Patterner

[22:46] *** aufrank joined
[22:47] <aufrank> TimToady: rule trait_auxiliary { <sym: is>   <ident><postcircumfix>?

[22:47] <aufrank> this is missing a closing }

[22:48] <aufrank> (I think)

[22:53] *** marmic joined
[23:00] *** autark_ is now known as autark

[23:30] <gnuvince_> ls

[23:31] <Patterner> Access denied.

[23:32] *** gnuvince_ joined
[23:33] <Caelum> is there a good tutorial for pugs?

[23:34] <revdiablo> Tutorial for what?

[23:34] <revdiablo> The language? The internals? Something else?

[23:34] <Caelum> the language

[23:35] * Caelum figures that's a good place to start

[23:35] <moritz> Caelum: do you know perl5?

[23:35] <moritz> Caelum: if yes, you could read through http://www.programmersheaven.com/2/Perl6-FAQ

[23:35] <lambdabot> Title: Perl6-FAQ at Programmers Heaven

[23:35] <revdiablo> http://perlcabal.org/syn/Differences.html

[23:35] *** gnuvince_ joined
[23:35] <lambdabot> Title: Perl6::Perl5::Differences

[23:35] <revdiablo> That's good if you know perl 5, too

[23:35] * Caelum does, thank you!

[23:41] <putter> fglock: hi :)

[23:45] <svnbot6> r15353 | tene++ | Parsing some weird yaml with eval can make pugs die badly.

[23:45] <moritz> tene++ I see you commit bit now works ;)

[23:46] <tene> moritz: I forgot that the pugs checkout I have on this system was still from openfoundry

[23:46] <tene> i haven't used this box in quite a while, but my laptop died last week.

[23:48] <moritz> tene: that explains it ;)

[23:49] *** CardinalNumber joined
[23:52] *** jisom_ is now known as jisom

