[00:00] *** TimToady_ joined
[00:04] *** polettix joined
[00:05] <TimToady_> that was weird; wonder why I got knocked off freenode...

[00:11] *** demq32 left
[00:14] *** TimToady_ left
[00:14] *** TimToady joined
[00:15] *** mugwump joined
[00:30] <allbery_b> one of the servers fell over, if the quits/joins/etc. in my scrollback can be believed

[00:30] <allbery_b> (kubrick?)

[00:41] *** drbean_ joined
[00:42] *** devogon left
[00:42] *** dduncan joined
[00:48] *** justatheory left
[00:50] *** drbean left
[01:06] *** toshinori left
[01:12] *** dduncan left
[01:17] *** nipotaway is now known as nipotan_________

[01:17] *** nipotan_________ is now known as nipotan

[01:21] *** buetow left
[01:23] *** polettix left
[01:27] *** Limbic_Region left
[01:29] *** drupek12 joined
[01:36] *** Schwern left
[01:37] *** pro21ms4 joined
[01:44] *** thorat left
[01:51] *** lyokato joined
[02:05] *** mugwump left
[02:17] *** sunnavy joined
[02:19] *** weinig_ left
[02:24] *** REPLeffect joined
[02:36] *** justatheory joined
[02:44] *** weinig joined
[03:06] *** thoughtpolice left
[03:07] *** thoughtpolice joined
[03:09] <diakopter> egads: 18:31:27(CDT:UTC-05) -!- NickServ: No such nick/channel

[03:29] <sunnavy> is it `a rvalue' or `an rvalue', `a lvalue' or `an lvalue'?

[03:30] <diakopter> depends if you pronounce them luh-value or ell-value and ruh-value or arr-value

[03:31] <sunnavy> thanks, diakopter ;-)

[03:34] *** justatheory left
[03:34] *** justatheory joined
[03:34] <sunnavy> TimToady: I think I found a typo in S03:2833, "you'd have the add" should be "you'd have to add"?

[03:34] *** ChanServ sets mode: +o diakopter

[03:34] *** diakopter sets mode: +o TimToady

[03:36] <TimToady> sunnavy: fixed, thanks

[03:37] *** finchely joined
[03:38] <sunnavy> NP, :-)

[03:40] <sunnavy> TimToady: oh, and another one, in S03:3635, is "my \$capture := func();" correct? seems a little wield :P

[03:41] *** amnesiac joined
[03:55] *** finchely left
[04:02] *** pro21ms4 left
[04:21] *** supery joined
[04:23] *** supery left
[04:35] *** thoughtpolice left
[04:59] <diakopter> polysemous etymons reticulate lambently

[05:00] *** bsb joined
[05:03] *** lyokato left
[05:26] *** lyokato joined
[05:31] *** jisom joined
[05:35] *** hakobe is now known as hkb_aw

[05:45] *** Ashizawa joined
[05:51] <moritz_> good morning ;)

[05:52] *** jisom left
[06:01] *** jisom joined
[06:02] *** REPLeffect left
[06:03] *** jisom left
[06:03] *** REPLeffect joined
[06:04] *** jisom joined
[06:04] *** jisom left
[06:05] *** kanru joined
[06:07] *** justatheory left
[06:10] *** jisom joined
[06:15] *** amnesiac left
[06:31] *** kane_ joined
[06:32] *** kane_ left
[06:32] *** kane_ joined
[06:36] *** drrho joined
[06:43] *** REPLeffect left
[06:51] *** polettix joined
[06:53] *** franck___ joined
[07:03] *** franck___ left
[07:12] *** weinig is now known as weinig|zZz

[07:17] *** luqui joined
[07:17] *** franck___ joined
[07:19] *** iblechbot joined
[07:30] *** devogon joined
[07:33] *** SubStack joined
[07:36] *** riffraff joined
[07:46] *** cognominal_ left
[07:50] *** Aankhen`` joined
[08:05] <Aankhen``> S05: "If the first character is a plus or minus, the rest of the assertion […]" seems to be at odds with "A leading C<+> causes a named assertion not to capture what it matches […]", though I could be missing something obvious.

[08:07] <Aankhen``> Ah, read a little further and that seems to be clarified.

[08:09] *** iblechbot left
[08:12] *** lb1200mk23 joined
[08:14] *** lb1200mk23 left
[08:18] * sbp waves with one hand, holding a question behind his back with the other

[08:19] <sbp> is there a way to do tentative regexp matching in p6?

[08:19] <sbp> by which I mean:

[08:20] <sbp> regex N tentatively matches string M iff a) N doesn't match M, but b) N could match M if further characters were appended to M

[08:20] <sbp> the use case I have is matching tokens in buffered input. it's not so much the tentative matching that's important as the fact that I don't want to have to *restart* the automaton when I read some more stuff into the buffer

[08:20] <moritz_> sbp: you mean like applying a regex as a monitor to a string?

[08:20] <sbp> so what I'm really after is a partially completed regex

[08:21] <sbp> a monitor? I'm not familiar with the term... got some breadcrumbs?

[08:21] * sbp Googles meanwhile

[08:21] <moritz_> it's not a technical term

[08:21] <moritz_> a regex that watches a stream?

[08:22] <sbp> hmm. I think that probably accords to what I need, yes

[08:22] <moritz_> sbp: what you can do in any case is to specify a starting position for the match

[08:23] <moritz_> $string ~~ m:pos($starting_position)/$regex/

[08:23] <sbp> I don't see how that'll help if you have something with delimiters

[08:23] <sbp> I mean, say it's a really long "string literal" token for example

[08:24] <sbp> but I've only read '"string li' into the buffer so far

[08:24] <sbp> I can't start again from the 't' in literal

[08:24] <sbp> because my token regex will be expecting " as the first character

[08:24] <moritz_> if it's really buffered input, you can match against a stream from the iterator

[08:25] <sbp> ...ooh

[08:25] <moritz_> =*IN.cat ~~ m/ <string_literal> /

[08:25] <moritz_> http://perlcabal.org/syn/S05.html#Matching_against_non-strings

[08:26] <sbp> great, I think that's what I'm after. thanks!

[08:26] <moritz_> you're welcome ;)

[08:34] *** andara joined
[08:35] *** dwave joined
[08:37] *** Aankhen`` left
[08:40] *** Aankhen`` joined
[08:53] *** luqui left
[09:11] *** marmic left
[09:12] *** buetow joined
[09:20] <Juerd> dalek: What's the bot's purpose?

[09:20] <rgs> to exterminate, of course

[09:20] <Juerd> Ah!

[09:21] <Juerd> Then it's ok

[09:21] * rgs sees that /whois dalek returns Caan and giggles

[09:24] *** cognominal_ joined
[09:28] *** marmic joined
[09:34] *** cognominal_ left
[09:38] *** cognominal_ joined
[09:39] *** nipra left
[09:42] *** nipra joined
[09:48] <Gothmog_> "A leading + may also be supplied to indicate that the following character class is to matched in a positive sense"

[09:48] <Gothmog_> Isn't there a "be" missing?

[09:49] <Gothmog_> Like, s/is to matched/is to be matched/

[09:53] <andara> Juerd: could it be that the svn server is down? I get

[09:53] <andara> svn: PROPFIND request failed on '/pugs'

[09:53] <andara> svn: PROPFIND of '/pugs': could not connect to server (https://svn.pugscode.org)

[09:53] <moritz_> andara: not down, just a bit shaky

[09:54] <moritz_> try it again

[09:54] <Juerd> andara: It's not down

[09:54] <andara>  moritz_: I've been trying for three days now

[09:54] <Juerd> Components for feather v2 are on their way

[09:54] <andara> Juerd: cool

[09:54] <moritz_> andara: it just worked for me

[09:54] <Juerd> andara: traceroute feather.perl6.nl

[09:55] <andara> Juerd: there is a route, I can ssh 

[09:55] <Juerd> Then svn should also work!

[09:56] <Juerd> What happens if you connect to https://svn.pugscode.org/ manually?

[09:56] <Juerd> (Hm, doesn't work for me...)

[09:56] <andara> Juerd: I tried this on feather:

[09:56] <andara> svn co https://svn.pugscode.org/pugs -r 17058 .

[09:56] <andara> Juerd: and it fails

[09:57] <Juerd> It appears that https is broken

[09:57] <moritz_> andara: just use http

[09:58] <andara> moritz_: That works on feather, but on my desktop I get permission denied :-(

[09:58] * moritz_ always uses http

[09:58] <Juerd> https is back up

[09:58] <Juerd> Shouldn't differ from http though

[09:59] <andara> Juerd: could be our firewall, but when I use http I get:

[09:59] <andara> svn: PROPFIND of '/pugs': 403 Forbidden (http://svn.pugscode.org)

[09:59] <andara> Juerd: anyway, https works again now, thanks!

[10:00] <Juerd> I don't support any connections through firewalls ;)

[10:01] <Juerd> If you have a firewall, you're always on your own for debugging :)

[10:01] <andara> Juerd: no worries, https is not firewalled/proxied, nor is ssh

[10:03] <agentzh> andara: *nod* i always use https to access external svn repos when i'm behind a firewall :)

[10:03] <agentzh> andara: in the past, neither pugs nor jifty's repos supported https though :)

[10:04] <andara> agentzh: well, lucky me then :-)

[10:11] *** jisom left
[10:12] *** bsb left
[10:14] *** iblechbot joined
[10:15] *** hcchien_ joined
[10:16] *** hcchien left
[10:22] *** fglock_ joined
[10:22] <diakopter> Juerd: dalek's source was the ircbot framework on which I was going to build all those ircop ... functionalities.

[10:25] <moritz_> diakopter: is that worth the trouble?

[10:25] <diakopter> moritz_: (months ago)

[10:25] <Juerd> diakopter: OK

[10:26] <moritz_> diakopter: you might have noticed that I implemented some things from your TODO list ;)

[10:26] <diakopter> moritz_: yup. :D

[10:26] <moritz_> evalbot for kp6 and p6 on parrot, web frontend for searching pugs commit messages

[10:28] <moritz_> got to get some food &

[10:28] *** kanru left
[10:30] <diakopter> rgs: dalek is even identified to services

[10:33] <diakopter> moritz_: did you end up changing the calleval syntax for your evalbot?  (to what I suggested - kp6: 'evalThisByKp6'.say \  perl6: 'evalThisByAll'.say \ etc )

[10:36] <diakopter> [OT] anyone here know offhand how the various FTP client distributions on CPAN simulate RFCconforming/broken/nonRFC FTP servers in their tests (if any do)?

[10:37] <moritz_> diakopter: no, I didn't - I forgot

[10:38] <moritz_> but I can change it know if you want

[10:43] <diakopter> well, I think the merits of the change should be discussed first... My reasoning was thus: # is too reminiscent of comments.  the entity: contextfree message   syntax is already very familiar/easy for irc users to parse.  also, the colon denotes associativity or explanation, which fits when using an eval to answer a question.  Someone asks, "how does kp6-on-kp6 handle x?" or "how does perl6 handle x?" or "how do you translate perl5x to 

[10:43] <diakopter> ... perl6?".... someone here can show the answer by "sending" the message to the proper implementation.  So the personification metaphor of the language/implementations is extended.

[10:46] <moritz_> diakopter: good point

[10:49] <pugs_svnbot> r17709 | fglock++ | [mp6] added newlines to output, in order to have smaller diffs in future commits 

[10:49] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17709

[10:49] *** sbp left
[10:55] *** jedai joined
[10:57] *** yves__ joined
[10:57] *** yves_ left
[10:57] <pugs_svnbot> r17710 | fglock++ | [kp6] make forcerecompile

[10:57] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17710

[11:00] <agentzh> PCR is completely out of date regarding the latest S05 :(

[11:00] <moritz_> agentzh: time to change it ;)

[11:00] <agentzh> moritz_: *nod*

[11:01] <agentzh> moritz_: but i've been mostly hacking on T::D these days

[11:01] <moritz_> T::D?

[11:01] <agentzh> will try to get back to PCR soon :)

[11:01] <agentzh> Template::Declare

[11:01] <moritz_> ok

[11:02] <agentzh> supper &

[11:05] *** cognominal__ joined
[11:07] <diakopter> #eval 'said'.say

[11:07] <exp_evalbot> kp6: OUTPUT[said␤]

[11:07] <exp_evalbot> ..pugs: OUTPUT[said␤]

[11:07] <exp_evalbot> ..p6: OUTPUT[Method 'say' not found␤current instr.: 'parrot;Perl6::Compiler;main' pc 138 (perl6.pir:98)␤]

[11:07] <exp_evalbot> ..nqp: OUTPUT[Statement not terminated properly at line 1, near ".say"␤current instr.: 'parrot;PGE::Util;die' pc 123 (runtime/parrot/library/PGE/Util.pir:83)␤called from Sub 'parrot;NQP::Grammar;statement_list' pc 3535 (src/Grammar_gen.pir:1272)␤called from Sub 'parrot;NQP::Grammar;TOP' pc 498

[11:07] <exp_evalbot> ..(src/Grammar_gen.pir:100)␤called from Sub 'parrot;PCT::HLLCompiler...]

[11:08] <diakopter> #eval 'said'.say;

[11:08] <exp_evalbot> kp6: OUTPUT[said␤]

[11:08] <exp_evalbot> ..pugs: OUTPUT[said␤]

[11:08] <exp_evalbot> ..p6: OUTPUT[Method 'say' not found␤current instr.: 'parrot;Perl6::Compiler;main' pc 138 (perl6.pir:98)␤]

[11:08] <exp_evalbot> ..nqp: OUTPUT[Statement not terminated properly at line 1, near ".say;"␤current instr.: 'parrot;PGE::Util;die' pc 123 (runtime/parrot/library/PGE/Util.pir:83)␤called from Sub 'parrot;NQP::Grammar;statement_list' pc 3535 (src/Grammar_gen.pir:1272)␤called from Sub 'parrot;NQP::Grammar;TOP' pc 498

[11:08] <exp_evalbot> ..(src/Grammar_gen.pir:100)␤called from Sub 'parrot;PCT::HLLCompile...]

[11:08] *** cognominal__ left
[11:09] <moritz_> diakopter: nqp only supports sub(arguments) calling convention

[11:12] *** exp_evalbot left
[11:12] <pugs_svnbot> r17711 | moritz++ | [evalbot] changed calling convention to 

[11:12] <pugs_svnbot> r17711 | moritz++ | 	\A(kp6|pugs|nqp|p6): $program\z diakopter++

[11:12] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17711

[11:12] *** cognominal_ left
[11:12] *** exp_evalbot joined
[11:13] <moritz_> pugs: say "hi";

[11:13] <exp_evalbot> OUTPUT[hi␤]

[11:14] *** exp_evalbot left
[11:14] <pugs_svnbot> r17712 | moritz++ | evalbot: use 'perl6:' to eval with all backends

[11:14] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17712

[11:14] *** exp_evalbot joined
[11:14] <moritz_> perl6: "I'm here".say

[11:14] <exp_evalbot> kp6: OUTPUT[I'm here␤]

[11:14] <exp_evalbot> ..pugs: OUTPUT[I'm here␤]

[11:14] <exp_evalbot> ..p6: OUTPUT[Method 'say' not found␤current instr.: 'parrot;Perl6::Compiler;main' pc 138 (perl6.pir:98)␤]

[11:14] <exp_evalbot> ..nqp: OUTPUT[Statement not terminated properly at line 1, near ".say"␤current instr.: 'parrot;PGE::Util;die' pc 123 (runtime/parrot/library/PGE/Util.pir:83)␤called from Sub 'parrot;NQP::Grammar;statement_list' pc 3535 (src/Grammar_gen.pir:1272)␤called from Sub 'parrot;NQP::Grammar;TOP' pc 498

[11:14] <exp_evalbot> ..(src/Grammar_gen.pir:100)␤called from Sub 'parrot;PCT::HLLCompiler...]

[11:25] <moritz_> I was just wondering... can tainting be implement by making all input methods returing '$value but tainted'?

[11:28] *** masak joined
[11:30] *** penk joined
[11:30] *** Ashizawa left
[11:32] *** mncharity left
[11:35] <pugs_svnbot> r17713 | fglock++ | [kp6] (AST) started adding Var.namespace

[11:35] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17713

[11:37] *** lyokato left
[11:38] *** sunnavy left
[11:51] *** nipotan is now known as nipotaway

[11:53] *** |Jedai| joined
[12:00] *** lesterc left
[12:11] *** jedai left
[12:25] *** Patterner left
[12:33] *** drbean_ left
[12:51] *** Psyche^ joined
[12:51] *** Psyche^ is now known as Patterner

[12:57] <pugs_svnbot> r17714 | fglock++ | [kp6] more namespace infrastructure

[12:57] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17714

[12:58] *** ofer joined
[13:00] *** jhorwitz joined
[13:02] *** JarJarBi1ks joined
[13:10] <masak> that email posted by wim vanderbauwhede on p6u today

[13:10] <masak> I suppose all those bugs can be attributed to the commits audreyt++ made a few months ago in anticipation of the MO patch

[13:11] <moritz_> probably ;)

[13:11] <masak> should I refer him to the logs you linked me to yesterday?

[13:12] <masak> or is there a better answer to give him?

[13:12] <moritz_> you could ;)

[13:12] <andara> hi masak: I'm wim

[13:12] <masak> andara: oh, hi

[13:12] <andara> masak: shoot

[13:12] <masak> then you know

[13:12] <masak> andara: hold on, I'll get the link

[13:12] <moritz_> andara: btw I didn't mean to reply ooff list, damned mail client

[13:12] <moritz_> s/oo/o/

[13:12] <masak> moritz_: oh, you replied already?

[13:13] <andara> moritz_: no bother, I hadn't noticed

[13:13] <moritz_> masak: it wasn't complete at all

[13:13] <masak> maybe one of us should write something to the list

[13:13] <masak> just to give the impression of activity and aliveness

[13:13] <andara> masak: I checked the svn log and traced it back to the move to ghc 6.6.1

[13:13] <moritz_> masak: do you know if the first example is valid perl 6?

[13:13] <masak> andara: ah

[13:13] <masak> moritz_: no idea

[13:14] *** JarJarBinks left
[13:14] <masak> I thought backslashes had been replaced by captures

[13:14] <moritz_> it looks weird to me

[13:14] <masak> but I'm not sure that goes for thunks, too

[13:15] <andara> masak: I think the backslashes are redundant. if you do $a={...} yoy get a Code object, so I guess the backslash doesn't do anything

[13:15] <andara> masak: but I didn't know that yesterday :-)

[13:15] <masak> andara: I think you're right

[13:16] <masak> pugs is in a somewhat inconsistent state right now

[13:16] <andara> masak: yes, but unfortunately I can't build r17041 anymore, as it assumes ghc 6.6 and doesn't build with ghc 6.6.1

[13:17] <masak> andara: pity.

[13:17] <masak> install 6.6?

[13:19] <andara> in parallel with 6.6.1? hmm, I could try. Or I could backport the changes required for 6.6.1, it's the filepath package I think

[13:19] <masak> andara: might be easier

[13:19] <andara> fsdo easy :-D

[13:20] <masak> ;)

[13:21] <masak> alternative1() orelse alternative2();

[13:21] <moritz_> andthen wait()

[13:21] <masak> hehe

[13:21] <andara> && see() ;-)

[13:26] *** daxim_ joined
[13:38] *** Partizx joined
[13:39] *** daxim left
[13:45] *** pmurias joined
[13:45] <pmurias> hi

[13:46] <masak> hello, pmurias 

[13:48] *** Partizx left
[13:54] <fglock_> kp6:  say ( \( 1, 2, 3 ) ).WHAT

[13:55] <exp_evalbot> r17714: OUTPUT[Capture␤]

[13:58] *** hkb_aw is now known as hakobe

[14:02] *** kane_ left
[14:02] *** kane_ joined
[14:05] <moritz_> kp6: say (1, 2, 3).WHAT

[14:05] <exp_evalbot> r17714: OUTPUT[Syntax Error␤␤]

[14:05] <moritz_> kp6: say ((1, 2, 3)).WHAT

[14:05] <exp_evalbot> r17714: OUTPUT[Syntax Error␤␤]

[14:06] *** kane_ left
[14:06] *** kane_ joined
[14:11] <fglock_> moritz_: List is not implemented, try Array

[14:11] <fglock_> kp6:  say [1,2,3].WHAT

[14:11] <exp_evalbot> r17714: OUTPUT[Array␤]

[14:14] <moritz_> kp6: say [1,2].HOW

[14:14] <exp_evalbot> r17714: OUTPUT[::Class(...)␤]

[14:14] <moritz_> kp6: say [1,2].HOW.methods

[14:14] <exp_evalbot> r17714: OUTPUT[no method 'methods' in Class 'Bit'␤::Class(...)␤]

[14:14] <fglock_> precedence

[14:14] <fglock_> say ( [1,2].HOW ).methods

[14:14] <fglock_> kp6: say ( [1,2].HOW ).methods

[14:14] <exp_evalbot> r17714: OUTPUT[int elems true HOW map array grep INDEX unshift new WHAT str FETCH STORE join perl sort push shift pop␤]

[14:16] <moritz_> pugs: say [1,2].HOW.methods

[14:16] <exp_evalbot> OUTPUT[*** No such method in class Class: "&methods"␤    at /tmp/UWsDxA7cEy line 1, column 5 - line 2, column 1␤]

[14:16] <moritz_> pugs: say "foo".HOW.methods

[14:16] <exp_evalbot> OUTPUT[["reverse","chop","index","quotemeta","join","chars","bytes","split","LIST","ITEM","bless"]␤]

[14:16] <moritz_> why does that work (in pugs) for strings but not for lists?

[14:16] <moritz_> anyway, I'm impressed by kp6 ;)

[14:17] <fglock_> moritz_: thanks :)

[14:17] <fglock_> there is still a lot of work to do :P

[14:18] <PerlJam> fglock_++ fighting the good fight er something

[14:18] <PerlJam> :-)

[14:20] <fglock_> orelse something

[14:20] <pugs_svnbot> r17715 | fglock++ | [kp6] var names are parsed as @namespace+$name

[14:20] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17715

[14:22] <moritz_> these two kp6 branches scare me

[14:23] <moritz_> I mean that's good for bootstrapping, but many enhancements and bugfixes just go into one of them

[14:25] <[particle]> do they share a test suite? that's one way to keep them similar

[14:26] <moritz_> [particle]: they do, but the "bootstrapped" version doesn't pass all of it

[14:28] <[particle]> how can i run tests on windows?

[14:29] <[particle]> looks like trac is down

[14:29] <fglock_> [particle]: run_tests_kp6_mp6.pl seems to be pure perl

[14:29] <fglock_> moritz_: scares me too

[14:30] <fglock_> but svn merge seems to keep it working

[14:30] <moritz_> (version control)++

[14:33] *** Ashizawa joined
[14:35] *** Ashizawa left
[14:37] *** buetow left
[14:38] *** buetow joined
[14:39] *** buetow left
[14:40] <pmurias> fglock: Match dosn't have LOOKUP, what should it do?

[14:41] <pmurias> pass it on to hash?

[14:41] <pmurias> * $.hash

[14:42] <fglock_> the compiler should compile match lookups to $/.hash.{'thing'}

[14:42] <fglock_> or we could declare that .LOOKUP is handled by $.hash

[14:43] <fglock_> but this is not implemented yet

[14:43] <moritz_> why should the compiler know that, and not the class?

[14:43] <pmurias> handles is just syntax sugar

[14:48] <fglock_> .hash should probably ba called postcircumfix:<{ }>

[14:48] <fglock_> be

[14:49] <fglock_> (S13)

[14:49] <fglock_> and this would also replace .LOOKUP

[14:50] <[particle]> doesn't ${} desugar to $/.{} ?

[14:51] <[particle]> or shouldn't it?

[14:51] *** nipra left
[14:52] <fglock_> [particle]: not sure

[14:53] <[particle]> i believe this is what nqp does

[14:55] *** nipra joined
[14:56] <[particle]> actually, nqp uses $<...> for $/<...>

[14:56] <moritz_> that's specced

[14:57] *** polettix left
[14:58] *** riffraff left
[15:06] *** masak left
[15:09] *** amnesiac joined
[15:14] *** turrepurre joined
[15:15] *** masak joined
[15:21] *** stephang joined
[15:24] *** rlpeacock joined
[15:27] *** TreyHarris joined
[15:27] <pugs_svnbot> r17716 | fglock++ | [kp6] more namespace fixes

[15:27] <pugs_svnbot> r17717 | pmurias++ | [kp6] a test for a bug which breakes code from Token

[15:27] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17717

[15:33] <TimToady> STD complains that ${} should be written $() to catch attempts to use p5 syntax

[15:39] <fglock_> hmm - but an empty $() means a different thing

[15:42] <TimToady> sure, but empty ${} in p5 is pretty useles

[15:47] <andara> TimToady: there seems to be a subtle difference between $r=\{...} and $r={...}, can you clarify that?

[15:50] *** stephang left
[15:51] <TimToady> I don't know what \{...} is supposed to mean

[15:52] <TimToady> unless it means to put the Code object into a Capture

[15:52] <TreyHarris> andara: "\{" isn't specified anywhere in synopses, but...

[15:52] <TreyHarris> nevermind, TimToady beat me

[15:52] <TimToady> whois andara

[15:52] <TreyHarris> (hi, TimToady, I'm back to the land of the living, maybe)

[15:53] <andara> TimToady: I try to evaluate arguments to a function in parallel after they are passed to the function body:

[15:53] <andara> my @args=(\{$i1.f1()},\{$i2.f2()},\{\{$i3.f3()}}); sub unquote($a) {return $a()}; my @evargs=@args.>>.unquote;

[15:53] <moritz_> wtf?

[15:53] <szbalint> looks tasty

[15:53] <szbalint> :)

[15:54] <moritz_> it looks like something a haskell coder would write ;)

[15:55] <andara> moritz_: you are right, i'm writing a runtime for a functional language with parallel evaluation of the arguments

[15:55] <moritz_> ;)

[15:56] <andara> moritz_: it really looks like (f0  (f1 ) (f2 ) '(f 3))

[15:57] <andara> but every function is an object method, so (f1 ... ) becomes $i.f1(...) 

[15:57] <TimToady> so, who defined $i1, $i2, $i3?

[15:58] *** drupek12 left
[15:58] <TreyHarris> TimToady: the closure gnomes

[15:58] <andara> TimToady: they are object instances, e.g. I have an ALU object with methods add, mult etc

[15:59] <TimToady> yes, but from p6u I suspect andara is trying to pull those in from the dynamic scope rather than the lexical scope

[15:59] *** snearch joined
[16:00] <TreyHarris> use ClosureGnome <hairy>;

[16:02] <andara> TimToady: the scope is a different issue. What I want to do is defer evaluation of the function arguments to the function body. 

[16:03] <TimToady> it looks to me like you're just trying to curry the invocant

[16:04] <moritz_> andara: why not just use 'lazy { ... }'?

[16:04] <TreyHarris> moritz_: even a lazy block is compiled immediately, isn't it?

[16:04] <andara> moritz_: is that implemented in pugs?

[16:05] <moritz_> TreyHarris: but not evaluated

[16:05] <moritz_> andara: seems not

[16:05] <TimToady> but the compilation would bring us back to scoping issues

[16:05] <TreyHarris> right.  you need a macro with substitution.  which is definitely not there yet.

[16:07] <andara> TreyHarris: why?

[16:07] <pugs_svnbot> r17718 | fglock++ | [kp6] fixed Grammar.token_P5

[16:07] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17718

[16:08] <TreyHarris> andara: if you want to refer to variables that don't exist yet, but you're making a promise that they will by the time at which the code is executed, that's a macro.  not a closure.

[16:08] <moritz_> TreyHarris: isn't that evil[tm]?

[16:08] <andara> TreyHarris: I see, that's what I mentioned on p6u. But I can easily do without that

[16:09] <TreyHarris> moritz_: isn't what evil?  making a promise that will make perl go boom if you don't live up to it?  that's not evil, that's programming :)

[16:10] <moritz_> TreyHarris: promising that you will declare variables ;)

[16:12] <TreyHarris> no more evil than a forward declaration.  if you never use the macro, you never have to declare the variables in the dynamic scope that the macro referred to

[16:12] *** andara left
[16:12] *** kanru joined
[16:13] <TimToady> anyway, I don't see why you don't just use a parameter -> $i1 { $i1.f1() } or { $^i1.f1 }

[16:13] <diakopter> or string eval.

[16:13] *** justatheory joined
[16:14] <TimToady> lambda arguments have to be good for something...

[16:15] <TimToady> (assuming the definition of $i1 really is coming from the dynamic scope)

[16:15] *** weinig|zZz left
[16:17] *** rindolf joined
[16:21] *** jamesmck joined
[16:21] <pugs_svnbot> r17719 | fglock++ | [kp6] cleanup unused code, test names

[16:21] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17719

[16:22] *** drupek12 joined
[16:23] *** lambdabot joined
[16:27] <pugs_svnbot> r17720 | moritz++ | Kwid::Event::Parser: removed obsolete unless...else

[16:27] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17720

[16:27] <lambdabot> Title: Changeset 17720 - Pugs - Trac

[16:29] <[particle]> there's no @^var, is there?

[16:29] <[particle]> { $^head(@^tail) }

[16:31] <masak> that's reminiscient of that "slurpy" feature I've never quite taken the time to understand...

[16:31] <masak> the one written @*tail in param lists

[16:33] <TimToady> you mean *@tail, and @^tail would currently map to @tail instead

[16:33] <TimToady> an argument could be made for autoslurping a final @ I suppose

[16:34] <masak> TimToady: ah, yes, *@tail

[16:34] *** barney joined
[16:34] <TimToady> I guess if you want to capture an array as a single item you can always use $^tail

[16:34] <masak> autoslurping certainly seems more DWIMmy than mapping to @tail

[16:34] <TimToady> so maybe it makes sense

[16:35] <masak> question is what happens if one uses a $^var Unicode-betically after that

[16:35] <TimToady> compiler barfs, maybe

[16:35] <masak> likely

[16:35] <masak> it's easy to check, at least

[16:35] <[particle]> that'd be fine with me

[16:35] *** chris2 joined
[16:36] <masak> would it make sense to write it *@^tail, too?

[16:36] <TimToady> not unless we recognized *@ as a token

[16:36] <TimToady> since * means Whatever

[16:37] <masak> even in param context?

[16:37] <TimToady> the param context would have to be retroactive with @^

[16:37] <masak> ok, maybe not worth the trouble

[16:37] <TimToady> the only other place we do retroactive is => quoting currently

[16:37] <TimToady> and even that's a bit of a pain in the grammar

[16:38] <masak> yes

[16:38] <masak> let's concentrate on going forward :)

[16:38] <TimToady> well, and the two places we officially do backtracking in STD

[16:39] <TreyHarris> hwat is STD?

[16:39] <TimToady> src/perl6/STD.pm, the old Perl-6.0.0-STD.pm

[16:39] <TreyHarris> ahhh, right

[16:39] <TimToady> which is the standard grammar definition for p6

[16:39] <szbalint> hm I might need a little linguistical help, what do you think would be a fitting name for a module that is a subclass of WWW::Mechanize and basically allows a user to come up with his own way of actually executing the request that WWW::Mechanize assembles, instead of letting LWP take care of it? (I know it is not strictly Perl 6 related, not yet at least).

[16:40] <szbalint> I'm currently thinking of WWW::Mechanize::Detached and WWW::Mechanize::Passive, any other suggestions?

[16:41] <TimToady> Defer or Dont or Capture or Lazy

[16:42] *** _ziga_ joined
[16:42] <szbalint> Defer actually sound good. Thanks!

[16:42] <wolverian> Don't

[16:42] <wolverian> ;)

[16:44] *** weinig|zZz joined
[16:49] *** |Jedai| is now known as jedai

[16:57] <pugs_svnbot> r17721 | fglock++ | [kp6] initial implementation of autovivification of globals

[16:57] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17721

[16:57] <lambdabot> Title: Changeset 17721 - Pugs - Trac

[16:57] <fglock_> home &

[16:58] *** rfordinal_mobile joined
[17:09] *** fglock_ left
[17:10] *** fglock joined
[17:13] *** danga joined
[17:15] *** weinig|zZz is now known as weinig

[17:33] *** riffraff joined
[17:34] *** rindolf left
[17:36] *** Psyche^ joined
[17:42] <pugs_svnbot> r17722 | fglock++ | [kp6] t/kp6/47-global.t pass

[17:42] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17722

[17:43] <lambdabot> Title: Changeset 17722 - Pugs - Trac

[17:43] *** ferreira joined
[17:52] <pugs_svnbot> r17723 | fglock++ | [kp6] t/kp6/48-do.t pass

[17:52] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17723

[17:52] <lambdabot> Title: Changeset 17723 - Pugs - Trac

[17:53] <fglock> ferreira: hi!

[17:53] *** Patterner left
[17:53] *** Psyche^ is now known as Patterner

[17:59] *** franck___ left
[17:59] *** masak left
[17:59] *** snearch left
[18:01] <ferreira> fglock: hi

[18:03] *** weinig left
[18:04] *** weinig joined
[18:05] *** riffraff left
[18:11] *** rfordinal_mobile left
[18:15] *** rlpeacock left
[18:17] *** rhizo left
[18:18] *** rfordinal_mobile joined
[18:24] *** drrho left
[18:33] *** r0bby left
[18:34] *** ludan joined
[18:34] *** r0bby joined
[18:35] <ludan> hola

[18:41] *** fglock left
[18:44] *** polettix joined
[18:46] *** jisom joined
[18:55] *** chris2 left
[19:08] <ferreira> exit

[19:08] *** ferreira left
[19:19] <moritz_> in perl5 configure, how do I add a flag for the linker?

[19:35] *** riffraff joined
[19:37] <moritz_> -Dldflags

[19:37] <moritz_> found it ;)

[19:39] *** jisom left
[19:43] <pugs_svnbot> r17724 | pmurias++ | [kp6] match_p5rx returns a Match object

[19:43] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17724

[20:04] *** kane_ left
[20:10] *** cognominal_ joined
[20:21] *** ludan left
[20:21] *** ludan joined
[20:32] *** barney left
[20:34] *** danga left
[20:38] <pugs_svnbot> r17725 | pmurias++ | [kp6] a simple Test.pm

[20:38] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17725

[20:38] <lambdabot> Title: Changeset 17725 - Pugs - Trac

[20:40] *** rfordinal_mobile left
[21:06] <Juerd> I haz feather2 parts

[21:07] *** _ziga_ left
[21:13] <szbalint> nice Juerd, is it going to be upgraded then? :)

[21:18] <diakopter> now!

[21:18] *** riffraff left
[21:22] *** jhorwitz left
[21:22] *** pmurias left
[21:34] *** DarkWolf84 left
[21:37] *** Limbic_Region joined
[21:41] <Juerd> szbalint: Absolutely

[21:41] <Juerd> The components fit together :0

[21:41] <Juerd> :)

[21:41] <Juerd> It's booting knoppix now

[21:42] <Juerd> Help me out here

[21:42] <Juerd> What should I do - raid 1 with 3 drives, or raid 1 with 2 drives and 1 hot spare?

[21:43] <Juerd> The former has the benefit of not losing redundancy during the first hour after failure, and perhaps some performance improvement

[21:43] * diakopter votes for the former

[21:43] <Juerd> The latter has the benefit of not wearing the disk head

[21:44] <TimToady> the disk head isn't supposed to be touching anything anyway when it's flying

[21:44] <Juerd> s/disk head/whatever the arm is called/

[21:45] <Juerd> TimToady: Oh, this reminds me... does Perl 6 have "regex context"?

[21:45] <Juerd> s[foo] = @bar

[21:45] <Juerd> Or is that just item context

[21:45] <Juerd> Hm, I had this nice trick in mind for a regex context but I forgot

[21:46] <TimToady> just item context.

[21:46] <TimToady> it desugars to something like .subst(rx/foo/, { $_ = @bar })

[21:47] <TimToady> or $() = @bar, or something

[21:48] <diakopter> o&o

[21:48] *** iblechbot left
[21:50] <amnesiac> wicked

[22:21] *** amnesiac left
[22:25] *** Aankhen`` left
[22:53] *** REPLeffect joined
[23:14] *** Shillo joined
[23:16] <Shillo> Hullo all

[23:18] <Tene> Hi!

[23:23] *** silug joined
[23:27] *** devogon left
[23:31] *** REPLeffect left
[23:55] *** Shillo left
[23:56] *** juerd joined
