[00:07] *** jisom joined
[00:23] *** lumi_ joined
[00:30] *** perlbot joined
[00:44] *** perlbot joined
[01:09] *** nperez joined
[01:09] *** dolmans joined
[01:14] *** amnesiac joined
[01:25] *** chylli joined
[01:38] *** takesako___ joined
[01:46] *** thoughtpolice joined
[01:47] *** chylli left
[02:03] *** mako132_ joined
[02:03] <TimToady> @tell ruz .{@keys}:p is currently specced to do what you want, though it may end up as .:pairs{@keys} instead.

[02:03] <lambdabot> Consider it noted.

[02:03] <TimToady> @tell ruz however, it's not yet implemented either way

[02:03] <lambdabot> Consider it noted.

[02:03] <TimToady> @moosages

[02:03] <lambdabot> cmarcelo said 9h 6m 58s ago: Just read chromatic meeting minutes. And I'm stuck at understanding Haskell->P5 bridge yet. Maybe I should play directly with PCR... Makes me wonder, Pugs used PGE/PCR

[02:03] <lambdabot> instead of Parsec because convenience or because Parsec limitations?

[02:03] <lambdabot> cmarcelo said 9h 5m 3s ago: Also in the minutes you hint about some clear goal/objective for people impl. S05. Could you explain this better?

[02:07] *** thoughtp1lice joined
[02:08] *** thoughtp1lice is now known as thoughtpolice

[02:21] *** dolmans joined
[02:24] *** REPLeffect joined
[02:40] *** rho joined
[02:40] *** CindyLinz joined
[02:41] <rho> hi all. newbie question ahead:

[02:41] <rho> is it possible to embed Haskell programs into Perl6?

[03:05] *** DoctorMach joined
[03:27] <spinclad> rho: no, neither in Perl6 spec-land nor in pugs (haskell additions to pugs would happen among its haskell internals, not the language it parses).

[03:29] <spinclad> though the pugs team is getting ready to reimplement much of it in Perl6, this still won't mix haskell and Perl6 code directly, IIUC.

[03:33] <spinclad> i think with some effort this could change, as with v6 you can now switch back and forth between Perls 5 and 6, but this is pure speculation on my part.

[03:36] *** jisom joined
[03:44] <rho> spinclad: thx, so this will have to be in a module.

[03:58] *** scsibug joined
[04:10] <gaal> spinclad: you can, in fact, do this in pugs if you have hs-plugin: say eval 'concat ["m", "oo", "se"]' :haskell

[04:11] <gaal> but there's no "real" ffi

[04:20] *** SubStack joined
[04:26] *** DoctorMach left
[04:33] <spinclad> gaal: thanks, now i know (or better, now i'll look and then i'll know)

[04:40] *** SubStack joined
[04:41] <spinclad> right, i've even seen that before.  maybe i won't forget so soon this time.

[04:44] <spinclad> rho: see the brief note in INSTALL.

[04:45] <spinclad> after that, ask around again.

[05:08] *** rissy joined
[05:19] *** rfordinal joined
[05:21] <dolmans> Perl6's OO system has a large collection of MOP feature, but i want to ask: dose i still can manipulate the sysmbol table, scalar, hash, array, code?

[05:23] <dolmans> i think yes.

[05:23] <Aankhen``> You can access any package's symbol table like you would a hash, IIRC.

[05:24] <dolmans> good.

[05:25] <Aankhen``> Ah, here we go.  See S02, under "Names", starting from the second bullet point.

[05:25] <Aankhen``> Or you could search directly for this: To do direct lookup in a package's symbol table without scanning, treat the package name as a hash:

[05:29] <dolmans> sound's good. so even not using the WHAT, HOW, etc., i can still do some reflection jobs, like in 5. In language design, if you provide some utility in kernel, then you must leak some flexibility. IMO

[05:30] <rho> spinclad: ad loading Haskell modules: thx, I will try that.

[05:33] *** Alias__ joined
[05:35] <Aankhen``> Sure.

[05:35] <Aankhen``> Although I don't know why anyone wouldn't want to twiddle with metaclasses. <G>

[05:36] <gaal> dolmans: doing reflection via symhash manipulation may not work in classes that use a different metamodel.

[05:37] <Aankhen``> Different metamodel?  Okay, now I'm scared. :-(

[05:37] <gaal> sure, some of the point of having a Real MOP<tm> was to make this stuff pluggable

[05:37] <Aankhen``> And hi!, BTW, gaal. ^_^

[05:38] <gaal> there are at least two application targets for this

[05:38] <gaal> hello! };)

[05:38] <dolmans> gaal: don't understand that yet

[05:38] <gaal> I'll explain:

[05:38] <Aankhen``> I'm still a novice to metaobjects, and my understanding is basically in terms of Moose, so... would that be like changing the metaclasses used in a Moose class, or at a higher meta-level?

[05:39] <gaal> first, consider use java:some.java.thing

[05:39] * Aankhen`` considers.

[05:39] <gaal> that loads a java class; the bridging to the foreign methods and objects is via the MOP

[05:39] <Aankhen``> Right.

[05:40] <gaal> naturally, you can't just munge a symhash there

[05:40] <Aankhen``> Uh huh.

[05:40] <dolmans> ok, i got this, symtables cannot cope with alien object.

[05:40] <gaal> the other application is desmonstrated by a database mapper

[05:40] <gaal> *demonstrated

[05:40] <gaal> suppose I want to implement something like Class::DBI

[05:40] <dduncan> oh, pray tell

[05:41] <Aankhen``> Hehe.

[05:41] <gaal> what I can do in Perl 6 is do put most of my logic in the metamodel.

[05:41] * Aankhen`` watches dduncan's ears perk up.

[05:41] <dduncan> I'm interested in anything related to databases, up to some point

[05:41] <gaal> for example, the accessors for members trigger database updates

[05:41] <gaal> but of course I want to make this efficient

[05:41] <Aankhen``> Aye.

[05:42] <gaal> so I need freshness flags

[05:42] <dduncan> what kind of efficient?

[05:42] <gaal> dduncan: simplest kind, for the purpose of this explanation

[05:42] <gaal> eg.

[05:42] <dduncan> eg, efficient for a programmer to write?

[05:42] <gaal> not do a db get on every member read if it's fresh

[05:43] <gaal> I'm not focusing on database here really, bear with me a sec

[05:43] <gaal> I want for starters this code:

[05:43] <dduncan> well, in any event, I'm going back to other things ...

[05:44] <gaal> $studentcount = $classroom.students; $studentcount = $classroom.students; to only hit the DB once

[05:44] * Aankhen`` nods.

[05:44] <dduncan> makes sense

[05:44] <gaal> one way to do this is for Classroom to have a private %FRESH memeber

[05:45] <gaal> but with flexible metamodel, I could make every memeber that maps to a db column have a freshness property of itself

[05:46] <gaal> forgive the clumsiness of terminology here -- better talk with nothingmuch or stevan for the correct names, but suppose we have

[05:46] <gaal> "has Int $students"

[05:46] <dduncan> it could also help if there are smarts such that, eg, if we know the class size is small, then just fetch all the student data right away, then we don't have to query each time whether it is fresh

[05:46] <gaal> instead of creating a simple %Classroom::<students> slot

[05:47] <gaal> create an object with .value and .fresh attribs

[05:47] *** scsibug joined
[05:47] <gaal> dduncan: certainly that can be done there too

[05:47] <dduncan> but a more general application of what I'm saying ...

[05:48] <gaal> also foreign data loading, and perhaps the kind of join optimizations I actually know nothing about :-)

[05:48] <dolmans> i want to ask is a normal private attribute still rides in symhash?

[05:48] <dduncan> is that it can be useful to fetch more than was asked for if the smarts are in place to guess there is a good chance that some closely related data may soon be asked for too ... it is more efficient to fetch it all in one chunk rather than several smaller ones

[05:48] <gaal> so if you're following: any class that has MyGrandORM for its metamodel does not just have a value in the slot field

[05:49] <dduncan> sort of like a buffering issue

[05:49] <gaal> it instead has an object that encapsulates the value and anything else my ORM wants to know about it

[05:49] <gaal> so direct, naive symhash manipulation would be wrong!

[05:50] <gaal> the thing is that although metamodels are pluggable, there is a common interface to them

[05:50] <dduncan> actually, if this whole discussion is just to teach about the metamodel, I'll shut up as what I"m saying is irrelevant then

[05:50] <gaal> so for regular programming, $obj.fld calls the appropriate accessors (get/set)

[05:54] <dolmans> gaal: partially understood. i conclude that i cannot use naive symhash to really reveal the object's interface, but all the things is still in symhash?(alien object excl.)

[05:54] *** gaal_ joined
[05:55] <dduncan> speaking of the metamodel, I look forward to actually using it, so hopefully audreyt will soon get the time needed to integrate it into Pugs ... I think the statement was a solid 2 days required

[05:55] <gaal_> and $obj.methods is more robust than p5 grep { defined lassroom::{$_}{CODE} } keys lassroom::

[05:55] <gaal_> hehe, cgiirc++ but it's eating chars

[05:56] <gaal_> that should be $obj.meta.methods but .methods a shortcut.

[05:57] <gaal_> dolmans: not necessarily!

[05:57] <TimToady> $obj.HOW.method or $obj.^methods

[05:58] <TimToady> dolmans: packages are for public interface only

[05:58] <gaal_> if for some reason MyGrandORM decided not to use the symhash, it could

[05:58] <gaal_> oops, thanks for the correction, TimToady

[05:59] <dolmans> TimToady: that mean that the private attribute `has $!attr' is not in symhash?

[05:59] <TimToady> that is correct

[05:59] <TimToady> (and it isn't in P5 either)

[05:59] <TimToady> if by symhash you mean symbol table hash

[06:00] <dolmans> in P5 i even don't know private

[06:00] <gaal_> hee, could be abbreviated even further to sysh

[06:00] <TimToady> in P6 the standard layout is "P6opaque", and not even the class itself is supposed to worry about the layout

[06:00] <dolmans> yes, i got the symhash word from gaal

[06:00] <gaal_> which has "sheesh" for a mnemonic

[06:01] <gaal_> I'd better grab some coffee and get [back] to work

[06:01] <gaal_> moose!

[06:01] <TimToady> anyway, this is spelled out in S12 in gruesome detail

[06:02] <TimToady> most of the time users of P6 won't even know there's a metamodel behind it.

[06:05] <gaal_> and to perhaps give a good answer to your original question, dolmans, reflection is now *easier*.

[06:08] <dolmans> gaal_: i know that, but my view is: if the designed provide some easier but non-general mechanics, you lose some flexibility. see p5, it has no kernel level's mop, but through symtables, you can do many fantastic things.

[06:21] *** rissy joined
[06:22] <gaal_> dolmans: you can do many fantastic things in Perl 6 as well :) if there's something specific you think is impossible, do tell

[06:34] *** goban joined
[06:35] <dolmans> gaal_: i don't know, i just guess, i think i should draw back the stupid guess.

[06:37] *** iblechbot joined
[06:48] *** devogon joined
[07:05] *** franck__ joined
[07:18] *** gaal joined
[07:32] *** BooK joined
[07:36] <Aankhen``> Am I correct in deducting from S12 that $class.bless(...pairs...) creates a P6opaque object?

[07:52] *** elmex joined
[07:53] *** buetow joined
[08:09] *** amnesiac left
[08:21] *** the_dormant joined
[08:24] *** pbuetow joined
[08:40] *** goban left
[08:40] *** dduncan left
[08:53] *** the_dormant joined
[08:56] *** andara joined
[09:00] *** REPLeffect joined
[09:22] *** ayrnieu joined
[09:35] *** polettix joined
[09:38] *** macroron joined
[10:07] *** buetow joined
[10:10] *** rindolf joined
[10:25] *** ruoso joined
[10:51] *** penk joined
[10:54] *** Loro_ joined
[11:04] *** penk joined
[11:06] *** nothingmuch joined
[11:07] *** ecl joined
[11:09] *** ecl left
[11:15] *** DarkWolf84 joined
[11:52] *** larsen_ joined
[11:53] *** mako132_ joined
[12:13] *** andreum joined
[12:18] *** iblechbot joined
[12:18] *** Manaus joined
[12:24] *** jerrylee joined
[12:24] *** sstipic joined
[12:27] *** sstipic left
[12:29] *** the_dormant joined
[12:31] *** VanilleBert joined
[12:32] *** jferrero joined
[12:32] *** Manaus left
[12:34] *** cognominal joined
[12:36] *** Grrrr joined
[12:39] *** idiotmax joined
[13:00] *** turrepurre joined
[13:10] *** larsen_ joined
[13:18] * offby1 has his employer do all his deducting

[13:19] *** larsen__ joined
[13:21] <rindolf> Hi all.

[13:23] <QtPlatypus> Hi rindolf.

[13:24] <Juerd> Who maintains trac on feather?

[13:24] <rindolf> Hi QtPlatypus 

[13:24] <Juerd> It needs to be optimized.

[13:29] <Yaakov> Juerd: Is the eval bot still MIA?

[13:30] <Juerd> I have no idea

[13:30] <Juerd> I admin the server, not the individual project related services

[13:33] * Juerd has disabled trac (dev.pugscode.org) until he knows what it's used for, and how it's going to be fixed

[13:34] <Juerd> CGI-scripts that use up to a minute of CPU time are broken.

[13:34] <kolibrie> Juerd: audreyt set up trac for project management

[13:35] <Juerd> audreyt: ping

[13:38] <kolibrie> http://pugs.blogs.com/pugs/2007/02/pugscodeorg_ser.html

[13:38] <lambdabot> Title: Pugs: Pugscode.org services.

[13:39] <Juerd> Ah, useful.

[13:40] <Juerd> I've been killing off the backup process because trac.cgi's collectively used up 80% of the CPU, and it slowed down the backups so much that they started overlapping.

[13:40] <Juerd> That has to stop, because backups are way more important than any single service.

[13:41] <Juerd> (Suggestions for lighter backups are welcome, as long as things are compressed on feather's end and stored compressed on a remote ssh server)

[13:57] *** deq` joined
[14:10] *** [particle] joined
[14:20] *** VanilleBert left
[14:26] *** svnbot6 joined
[14:27] *** vel joined
[14:30] <diakopter> wb svnbot6

[14:31] * diakopter hugs devbot6

[14:38] *** electrogeek joined
[14:53] *** specbot6 joined
[14:56] *** evalbot_r16148 joined
[15:01] *** araujo joined
[15:02] *** veritos joined
[15:08] <diakopter> wb, specbot6

[15:08] <diakopter> wb, evalbot

[15:09] *** [particle] joined
[15:20] *** REPLeffect joined
[15:25] *** ruoso joined
[15:27] *** jerje joined
[15:29] *** iblechbot joined
[15:42] *** bonesss joined
[15:47] *** rlb3_work joined
[16:04] *** kanru joined
[16:22] *** veritos joined
[16:25] <veritos> morning

[16:26] *** bones_ joined
[16:30] <veritos> Juerd: i think i accidentally infinite-looped my bashrc :(

[16:30] <veritos> can you restore it since i can't log in?

[16:33] <veritos> never mind that

[16:33] <veritos> just logged in with dash instead

[16:35] *** justatheory joined
[16:39] *** franck__ joined
[16:41] *** justatheory_ joined
[16:42] *** buetow joined
[16:46] *** andara left
[16:50] *** jhorwitz joined
[17:11] *** veritos joined
[17:29] *** lisppaste3 joined
[17:31] *** rindolf joined
[17:32] *** riffraff joined
[17:32] <riffraff> hi

[17:32] <veritos> heya

[17:33] <riffraff> sorry the ubernoob question: but how do I do a replace-not-in-place in perl6 ?

[17:33] <riffraff> I mean,. a sytring substitution

[17:33] <jrockway> ?eval my $foo = "world"; "Hello, $foo."

[17:34] <veritos> do { local $str = $str; $str =~ s/yada/foo/; say $str }?

[17:34] <evalbot_r16148> "Hello, world."

[17:34] <jrockway> evalbot_r16148: awake?

[17:35] <veritos> ?eval do { local $str = $str; $str =~ s/yada/foo/; say $str }?

[17:35] <evalbot_r16148> Error: ␤Unexpected "?"␤expecting statement modifier, term postfix or operator

[17:35] <PerlJam> riffraff: the same way as in perl5

[17:36] <riffraff> PerlJam, this would be a useful info I actually knew perl5 :)

[17:36] <[particle]> subst

[17:36] <PerlJam> riffraff: or use the OOP interface.  $copy = $str.substr($pat,$replacement);

[17:36] <riffraff> the only way I understand is making a copy and use that

[17:36] <riffraff> but that changes $str in place

[17:36] <PerlJam> riffraff: ($copy = $str) =~ s/foo/bar/;  # perl5

[17:36] <riffraff> I mean. substr

[17:36] <Tene> riffraff: maybe give an example of what you want to do?

[17:36] <lambdabot> Tene: You have 2 new messages. '/msg lambdabot @messages' to read them.

[17:37] <PerlJam> riffraff: It shouldn't.

[17:37] <Tene> lambdabot: thanks

[17:37] <riffraff> mh maybe I misrecall, I'll check again

[17:38] <riffraff> oh and I should update opugs so I'll check in tewnty minutes, it seem :)

[17:39] *** allbery_b joined
[17:40] <PerlJam> riffraff: $str.=subst($par,$rep);  # is the one that will do the in-place substitution.

[17:40] <rindolf> Hi PerlJam 

[17:40] <PerlJam> Is it just me or is "subst" far too close to "substr"?

[17:40] <rindolf> PerlJam: from my impression you seem very protective of Perl 6.

[17:41] <PerlJam> rindolf: protective?

[17:41] <PerlJam> I'll take that as a compliment ;-)

[17:41] *** ruoso joined
[17:41] <rindolf> PerlJam: yes, whenever someone says something bad about it.

[17:41] <rindolf> PerlJam: you tell him that everything's alright.

[17:41] <PerlJam> rindolf: oh.  I'm just trying to bring balance to the universe.  There are far too many people nay-saying perl6.

[17:42] <rindolf> PerlJam: BTW, is Parrot now GPL+Artistic2?

[17:42] <riffraff> perljam: I think one of the two was not implemented last time I checked, which is two weeks ago, but I'm compiliung and will whail later :)

[17:43] <PerlJam> riffraff: entirely possible.  I haven't kept up with pugs.  (pshaw!  Who needs an actual implementation anyway? ;-)

[17:44] <PerlJam> rindolf: I don't think it's Artistic2 just yet.

[17:44] <rindolf> PerlJam: http://perl.net.au/wiki/Perl_6_-_Common_Criticisms

[17:44] <rindolf> PerlJam: hmmm...

[17:44] <rindolf> Lately I daresay I'm a bit unhappy from the edits people make to the articles I start on http://perl.net.au

[17:44] <lambdabot> Title: Perl 6 - Common Criticisms - PerlNet

[17:44] <lambdabot> Title: Main Page - PerlNet

[17:45] *** crashmatrix joined
[17:47] *** Psyche^ joined
[17:47] <PerlJam> rindolf: do you know of any die-hard perl5 fans who are also die-hard perl6 naysayers?

[17:47] <rindolf> PerlJam: I don't know.

[17:50] <jjore-w> PerlJam: They exist. What of it?

[17:50] <PerlJam> jjore-w: I'd like to interview them.

[17:50] <avar> perl5-porters :)

[17:50] <PerlJam> avar: heh

[17:51] <jjore-w> Go look on perlmonks.org then.

[17:51] <jjore-w> Post a "News" thing requesting that they contact you.

[17:52] *** cognominal joined
[17:53] <PerlJam> I've been loathe to do that for fear of the fanatics (too much noise)

[17:53] <PerlJam> I'm looking for clear, strong voices with good arguments against perl6.

[17:54] <PerlJam> (well, *I* don't have to think they're good, just that they need to and have reasonable evidence to support their position)

[17:54] <jjore-w> So filter out the noise.

[17:55] *** sapir joined
[17:55] *** bones_ is now known as bonesss

[17:56] *** lichtkind joined
[17:58] *** Psyche^ is now known as Patterner

[17:58] *** cognominal joined
[18:04] *** cognominal joined
[18:11] *** cognominal joined
[18:15] *** bonesss joined
[18:15] *** deq`_ joined
[18:20] <qmole> are there pugs binaries for os x anywhere?

[18:25] <TimToady> not officially. historically audreyt has made some available from time to time, but lately I think most of the osx folks have been rolling their own from the sources

[18:26] <TimToady> I'm not an osx folk myself...

[18:27] <TimToady> and it may be that most of the osx folks who hang out here are asleep right now.

[18:27] <qmole> ah ok

[18:28] <qmole> i've found something at http://www.unobe.com/packages/, giving that a shot

[18:28] <lambdabot> Title: Index of /packages/

[18:29] <TimToady> only about 270 revisions behind...  :)

[18:31] <qmole> that's ok, i'm at least 5000 revisions behind :)

[18:31] <TimToady> always something to be said for improvement...

[18:32] *** rhandom joined
[18:32] *** justatheory joined
[18:35] *** deq` joined
[18:48] <geoffb> Speaking of audreyt, anyone know if the current coding hiatus is likely to be a long one?

[18:49] *** fglock joined
[18:52] <fglock> recent hacks: I tried out the several regex engines around, and I found that working on PCR is the most productive way for me to get STD parsed;

[18:52] <fglock> PCR is easily ported to mp6 after it works

[18:52] <TimToady> and then backend to P6?

[18:53] <fglock> yes, s/mp6/p6/

[18:53] <TimToady> that is, to P6/pugs

[18:53] <fglock> I think that if I were starting directly with p6, I would get lost in parsing algorithms

[18:54] <fglock> there is a parser module in ext/, but I couldn't make it work

[18:55] <TimToady> geoffb: I don't think anyone knows.  audreyt was making some hopeful noises last week, but my guess is that the family obligations are somewhat open-ended.

[18:55] <geoffb> That sucks.  :-(

[18:55] * geoffb wishes audreyt a speedy recovery from family.  ;-)

[18:56] <fglock> we can get a usable parse tree with PCR 

[18:57] *** jisom joined
[18:58] <TimToady> meanwhile the rest of us are peddling as hard as we can, but it seems that we all make better progress when audreyt is able to hang out

[18:58] <fglock> so I'm kind of implementing 'cheat' into PCR/v6.pm

[18:58] <geoffb> audreyt seems to be an active catalyst

[18:58] <kolibrie> fglock: it's nice to know that all the parsers you wrote are coming in so handy

[18:59] *** the_dormant joined
[18:59] <TimToady> I think perhaps fglock does something like genetic programming.  :)

[18:59] <fglock> "TimToady"

[19:00] <jrockway> hey, btw... how come so few Perl6 talks at YAPC::NA?

[19:00] <fglock> kp6 is much cleaner, but v6.pm is a year ahead

[19:01] <fglock> jrockway: $$$ for me

[19:01] <jrockway> no audreyt or timtoady talks though :(

[19:01] <TimToady> I'll be there

[19:01] <geoffb> Personally, I just want to have some $p6_impl able to do what pugs does + packed arrays.  It sounded like Pugs was closest to getting there, because fglock's genetic designs had a few more generations to go.  But it seems like no one wants to work on Pugs until audreyt's new AST stuff lands for real.  Which means we had the familial equivalent of a bus error on Pugs.  Sigh.

[19:01] <jrockway> oh, ok

[19:01] <fglock> later &

[19:02] <fglock> we need more mutant implementors

[19:03] *** fglock left
[19:04] <geoffb> I probably qualify as a mutant implementor, except that -Ofun for me involves implementing a higher layer ...

[19:07] * jrockway needs twice as much time (or caffeine)

[19:07] <geoffb> I find that twice as much caffeine is pretty brutal on the guts

[19:08] <jrockway> exactly

[19:08] *** Daveman joined
[19:23] *** REPLeffect_ joined
[19:23] <TimToady> caffiene, schedule, guts--pick two

[19:27] <lumi> ?eval <caffeine schedule guts>.pick(2) # ?

[19:28] <evalbot_r16148> ("guts", "caffeine")

[19:28] <lumi> 1x caffeine, then

[19:37] *** HiTech69 joined
[19:37] * diakopter will request audreyt work on pugs Tue-Fri, but I can't guarantee it will occur. :)  quod licet Iovi non licet bovi.

[19:37] *** the_dormant joined
[19:40] <avar> ?eval <good fast cheap>.pick(2)

[19:40] <evalbot_r16148> ("good", "cheap")

[19:43] <TimToady> that's us all right...

[19:45] <gaal> ?eval <moose moose moose>.pick(1)

[19:45] <evalbot_r16148> ("moose",)

[19:46] <gaal> ?eval <black black black>.pick(1) # henry ford

[19:46] <evalbot_r16148> ("black",)

[19:48] <diakopter> ?eval <pugs self>.pick(3)

[19:48] <evalbot_r16148> ("self", "pugs")

[19:48] <pasteling> "evalbot6_r16148" at 65.89.234.66 pasted "Pugs build failure" (326 lines, 19.6K) at http://sial.org/pbot/24622

[19:49] <Tene> ?eval ("moose" xx 90).pick(1)

[19:49] <evalbot_r16148> ("moose",)

[19:49] *** evalbot6_r16148 joined
[19:49] <gaal> http://i111.photobucket.com/albums/n141/wildernesscat/Balloon%20Festival/balloon_festival58.jpg

[19:49] <lambdabot> http://tinyurl.com/29tbaf

[19:50] <geoffb> very nice

[19:51] *** benny_ joined
[19:54] *** dduncan joined
[19:55] *** devogon joined
[19:57] <TimToady> I wonder if it can see the fjords from there...

[20:00] <gaal> I don't know about fjords, but these may be pines: http://i111.photobucket.com/albums/n141/wildernesscat/Balloon%20Festival/balloon_festival47.jpg

[20:00] <lambdabot> http://tinyurl.com/2dxcgy

[20:12] *** limp` joined
[20:15] *** vel6608 joined
[20:29] *** benny_ is now known as benny

[20:32] <kolibrie> jrockway: I was feeling a little lonely looking over the list of talks

[20:33] <kolibrie> fglock: you can help me with my talk :)

[20:33] <jrockway> heh, there are like 4 catalyst talks this year

[20:33] <jrockway> which is good

[20:36] *** veritos joined
[20:39] *** explorer joined
[20:48] *** REPLeffect_ left
[21:12] *** metaperl joined
[21:12] <metaperl> Juerd: ping?

[21:14] <Juerd> metaperl: pong

[21:15] <metaperl> Juerd: are you getting my private msgs?

[21:16] <Juerd> Yes

[21:17] <Juerd> I'm not identified to nickserv at the moment

[21:17] <Juerd> So I cant send replies

[21:18] <metaperl> oh

[21:19] <metaperl> maybe we can join #juerd and talk

[21:20] <Tene> But what if other people spy on you?!

[21:20] <metaperl> :)

[21:20] <metaperl> beppu: hey!

[21:21] <moritz> Juerd: if somebody /msgs you, your replies will work

[21:21] <moritz> Juerd: unless the other one /unqueries prior to reply, afaict

[21:22] * moritz is not registered eitehr

[21:23] <Juerd> Apparently not

[21:23] <geoffb> Apparently someone beat me to registering my preferred nick here, but so far as I know we've never tried to be in the same channels, so my only worry is that the other geoffb might be some jerk and people think I'm him.

[21:24] <Juerd> I get this when I reply to metaperl:

[21:24] <Juerd> 23:15 [freenode] -!- Private messages from unregistered users are currently blocked due to spam problems, but you can always message a staffer. Please register! ( http://freenode.net/faq.shtml#privmsg )

[21:24] <lambdabot> Title: freenode: frequently-asked questions

[21:24] <geoffb> I've considered registering a new nick, but I haven't had enough push to overcome laziness

[21:24] <moritz> Juerd: did you try /msg nickserv register ?

[21:24] <moritz> geoffb: same for me ;)

[21:25] <Juerd> moritz: I am registered, but it's not accepting my password.

[21:25] <moritz> I got kicked twice because the "owner" of my nick joined, but he was gone after a few minutes

[21:25] <Juerd> I don't care enough to do anything about it.

[21:25] <geoffb> moritz: ditto.

[21:25] <Juerd> I generally just hate freenode for things like this.

[21:26] <Juerd> I used to hate it for the wallops flood too, but that stopped when lilo died.

[21:27] <geoffb> lilo *died*?  Wow, I wondered why the wallops went down so much, but I just assumed lilo got a life or something

[21:27] <avar> heh, I was just wondering how many users didn't know about lilo but just noticed a reduction in wallop spam:)

[21:28] <avar> apperently at least one:)

[21:28] <geoffb> Amazing the impact people have ...

[21:29] <moritz> .oO(People are overrated ;)

[21:29] *** ruoso joined
[21:30] <geoffb> "A person is smart. People are dumb, panicky, dangerous animals and you know it."

[21:34] <moritz> "the source of all unhappiness is other people. the sooner you learn to thonk of other people as noisy furniture, the you will be happy" - read somwhere on the dilbert cartoons ;)

[21:35] <[particle]> sartre wrote, "hell is other people."

[21:36] <[particle]> my views differ.

[21:39] *** larsen_ joined
[21:46] *** rissy joined
[21:46] *** cmarcelo joined
[21:48] *** mdiep_ joined
[21:54] *** Limbic_Region joined
[21:56] *** cmarcelo joined
[21:59] *** cmarcelo joined
[21:59] *** rhandom left
[22:29] *** SubStack joined
[22:33] <cj> is the fancy test report at http://smoke.pugscode.org/ created using Test::TAP::HTMLMatrix?

[22:33] <lambdabot> Title: Pugs Smoke Reports

[22:35] <avar> cj: yes

[22:39] <jrockway> avar, long time no see

[22:40] <avar> jrockway: wrarr

[22:42] *** Aankhen`` joined
[22:50] <cj> jrockway: good call

[22:56] <jrockway> cj: no problem :)

[22:56] <jrockway> i need to get this set up at work too... glad someone reminded me

[23:05] *** gravity joined
[23:11] <cmarcelo> is it possible that the trac abnormal resource usage was caused by bots scanning the irclog and getting to diff pages generated by trac via the magic r1234 links?

[23:11] <TimToady> when the load average was 12, there were two bots using trac, googlebot and msnbot

[23:12] <TimToady> that was several days ago that I looked

[23:12] <geoffb> Why not just block those bots?

[23:12] <geoffb> "We didn't know how to do that in Trac" is a valid answer ....

[23:14] <cmarcelo> was that abnormal usage happening before moritz++ irclog?

[23:15] <jrockway> we had similar problems with catalyst trac

[23:15] <jrockway> we switched to fastcgi + postgres and that solved everything

[23:15] <jrockway> trac does dumb locking on sqlite databases 

[23:16] <cmarcelo> jrockway: sqlite support something else than locking the entire DB? (sorry, I'm not very familiar with SQLite..)

[23:17] <jrockway> i don't think so

[23:17] <jrockway> but i'm pretty sure trac was spinning out of control while waiting for the lock

[23:17] <cmarcelo> geoffb: I don't know how to do this with trac :(

[23:17] <jrockway> while(locked){ acquire_lock } or something

[23:17] <jrockway> i didn't look at the code, so don't yell at me if i'm off :)

[23:17] <jrockway> python looks like line noise

[23:18] <geoffb> *chuckle*

[23:18] <TimToady> just run it through py2p6 and then it'll run slow all the time...

[23:19] <jrockway> haha

[23:19] * jrockway recruits interested parties to join #killtrac on irc.perl.org :)

[23:20] <cmarcelo> jrockway: what's killtrac?

[23:20] <jrockway> perl glue for RT / bugzilla + SVN + etc.

[23:20] <jrockway> basically trac, but not as bad

[23:20] <jrockway> also mojomojo for the wiki

[23:20] <cmarcelo> oh.. seems nice

[23:20] <jrockway> i haven't written much though

[23:20] <jrockway> only KT::Timeline, which is like trac's timeline

[23:21] <cmarcelo> is there a webpage somewhere?

[23:21] <jrockway> but with CPAN Testers reports, and other nice stuff in addition to tickets, commits, etc.

[23:21] <jrockway> killtrac.bsdro.org i think

[23:21] <jrockway> it's totally a work in progress

[23:21] <jrockway> we really need people that care enough to write some code

[23:21] <jrockway> we all want it, but nobody wants to write it :(

[23:21] <jrockway> not sure why

[23:22] <geoffb> jrockway: perhaps because many of us have to do that kind of stuff for $day_job and want to spend our limited fun time on something completely different

[23:23] <jrockway> yeah, that could be it

[23:23] <geoffb> Then again, there are people who are lucky enough not to have a $day_job yet.  :-)

[23:29] *** lichtkind joined
[23:42] <cmarcelo> jrockway: just a thought: VCS independent is a little bit harder if you want to do fancy integration. some VCS have different ways to identify revisions or even doesn't have concept of revisions (darcs), for example.

