[00:15] *** penk left
[00:19] *** kanru left
[00:29] *** devogon left
[00:32] *** rutlov joined
[00:33] *** rutlov left
[00:51] *** nipotaway is now known as nipotan

[01:00] *** lyokato joined
[01:02] *** polettix left
[01:02] *** avar left
[01:03] *** avar joined
[01:05] *** Limbic_Region left
[01:08] *** mykhal left
[01:30] *** jisom joined
[01:46] *** sunnavy joined
[01:49] *** buetow left
[02:05] *** buetow joined
[02:15] *** rutlov joined
[02:16] *** rutlov left
[02:36] *** rfordinal left
[03:01] *** buetow left
[03:03] *** amnesiac joined
[03:03] *** TimToady joined
[03:22] *** TimToady1 left
[03:49] *** weinig left
[04:02] <sunnavy> from S02:1587  When "strict" is in effect (which is the default except for one-liners), non-qualified variables (such as $x and @y) are only looked up from lexical scopes, *but* never *from* package scopes.

[04:02] <sunnavy> maybe never *beyond* package scopes?

[04:06] *** mu9214 joined
[04:06] *** mu9214 left
[04:11] *** rutlov joined
[04:12] *** rutlov left
[04:13] <TimToady> it doesn't look in the package scopes at all, unless you've installed a lexical alias via "our"

[04:13] <TimToady> or otherwise imported the symbol into your lexical scope

[04:18] <sunnavy> gotcha, thanks

[04:41] *** TimToady_ joined
[04:58] *** TimToady left
[05:15] <sunnavy> Is it permitted that whitespaces are between a symbolic unary operator and its operand? like | $capture?

[05:16] <allbery_b> it should be but pugs might be somewhat broken in that regard

[05:16] <allbery_b> (collision between unary operators and the former filetest operators, which went away in part because of that brokenness)

[05:19] <sunnavy> thanks, allbery_b :-)

[05:34] *** rfordinal joined
[05:37] *** weinig joined
[05:39] *** devogon joined
[05:55] *** TimToady joined
[06:00] *** penk joined
[06:02] *** amnesiac left
[06:04] <pugs_svnbot> r17613 | moritz++ | [kp6] added bootstrap.pl

[06:04] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17613

[06:04] <lambdabot> Title: Changeset 17613 - Pugs - Trac

[06:05] <moritz_> bootstrap.pl imitates `make` because I'm too dump to do it in the Makefile

[06:14] *** TimToady_ left
[06:14] <meppl> good morning

[06:14] *** rutlov joined
[06:15] *** riffraff joined
[06:15] <moritz_> good morning meppl ;)

[06:16] <meppl> good morning moritz

[06:17] * moritz_ wonders if kp6's Runtime/Perl5/*.pm is compatible with kp6's compiled modules, or just with mp6's output

[06:17] *** rutlov left
[06:27] *** Ashizawa joined
[06:37] *** polettix joined
[06:41] *** TimToady_ joined
[06:47] *** meppl left
[06:47] *** pmurias joined
[06:47] <pmurias> morning

[06:47] <pmurias> moritz_: hi

[06:48] <moritz_> hi pmurias 

[06:48] <DarkWolf84> hi there

[06:48] *** meppl joined
[06:48] *** Casan joined
[06:48] <pmurias> most of Runtime/Perl5/*.pm is compatible with code generated by kp6

[06:48] <pmurias> DarkWolf84: hi

[06:54] * pmurias hates Visitor::Global

[07:00] *** renormalist joined
[07:00] *** TimToady left
[07:06] <pmurias> #pugs say f();sub f {"hello"}

[07:06] <exp_evalbot> OUTPUT[hello␤]

[07:06] <pmurias> #pugs say f();my sub f {"hello"}

[07:06] <exp_evalbot> OUTPUT[hello␤]

[07:07] <pmurias> #pugs say $f;my $f = "hello"

[07:07] <exp_evalbot> OUTPUT[*** ␤    Unexpected ";"␤    expecting "::"␤    Variable "$f" requires predeclaration or explicit package name␤    at /tmp/O5RUPKVUy1 line 1, column 7␤]

[07:08] *** elmex joined
[07:09] *** cognominal__ left
[07:09] <pmurias> #pugs undecleared()

[07:09] <exp_evalbot> OUTPUT[*** No such subroutine: "&undecleared"␤    at /tmp/1w5KgL1RSL line 1, column 1 - line 2, column 1␤]

[07:10] <pmurias> #pugs if (0) {undecleared()}

[07:10] <exp_evalbot> OUTPUT[undef␤]

[07:10] <pmurias> #pugs if (0) {&undecleared()}

[07:10] <exp_evalbot> OUTPUT[*** ␤    Unexpected "()}"␤    expecting "::" or signature value␤    Variable "&undecleared" requires predeclaration or explicit package name␤    at /tmp/zvP4JscJ34 line 1, column 21␤]

[07:10] *** franck___ joined
[07:11] <Yappo> hi

[07:11] <pmurias> Yappo: hi

[07:13] <pmurias> where is it speced int the synopsis that subroutine can be called before declaration

[07:13] <pmurias> ?

[07:13] <pmurias> and that there existence is checked at runtime?

[07:15] <moritz_> perhaps one of the tests has an enlightening smartlink?

[07:15] <moritz_> there is one test that doesn't even compile with current pugs

[07:15] <moritz_> a short look into a recent smoke should reveal it

[07:16] <pmurias> found it

[07:17] <pmurias> pugs isn't fully right here

[07:17] <pmurias> if (0) {undecleared()} should fail

[07:17] <bloonix> morning

[07:17] <pmurias> S02:2504

[07:17] <pmurias> bloonix: morning

[07:18] <moritz_> bloonix: moin

[07:19] <moritz_> so it is indeed legal to call a sub before it is declared

[07:19] <moritz_> what about referencing it? my $a = &foo; sub foo { return 'bar' };

[07:21] *** LCamel joined
[07:23] <DarkWolf84> why is used -Ilib in bootstrap.pl

[07:23] <gaal> moose

[07:25] <DarkWolf84> so p5 can read p6?

[07:26] <DarkWolf84> I don't get it

[07:26] <moritz_> it should be -Ilib5 actually

[07:27] <moritz_> my local kp6-perl5.pl has an 'use "lib5";' so I didn't recognize it

[07:28] *** ak__ left
[07:28] *** ak__ joined
[07:29] *** iblechbot joined
[07:34] <DarkWolf84> in that case kp6 uses no module path like mp6

[07:35] *** penk left
[07:35] <moritz_> wait, the repo version has this line: use lib '../v6-MiniPerl6/lib5', 'lib5';

[07:36] <pmurias> moritz_: the sub magic only happens for barewords

[07:36] <pugs_svnbot> r17614 | moritz++ | [kp6] removed bogus -Ilib from bootstrap.pl, DarkWolf84++

[07:36] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17614

[07:36] <lambdabot> Title: Changeset 17614 - Pugs - Trac

[07:36] <moritz_> pmurias: ok, then a few test cases are invalid

[07:38] *** Aankhen`` joined
[07:39] *** jedai joined
[07:39] <renormalist> [mp6 in context of kp6] Can I give params into a class via new() in any way? Class.new(42) at least compiles, but I don't know how to access that from inside the class.

[07:40] <moritz_> I think mp6 had a (weird) way of initializing members, but I don't know if kp6 implements that

[07:41] <pmurias> in mp6 ::Foo(key=>value)

[07:41] <DarkWolf84> like in p6

[07:41] <DarkWolf84> :)

[07:41] <pmurias> look into the kp6 compiler internals for example

[07:41] <pmurias> *examples

[07:41] <moritz_> I'd use Foo.new(key => value) in p6 ;)

[07:45] <pugs_svnbot> r17615 | pmurias++ | [kp6] for decleares a topic but Global dosn't see it

[07:45] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17615

[07:45] <lambdabot> Title: Changeset 17615 - Pugs - Trac

[07:47] <DarkWolf84> ?eval class X {42}; my $foo .= X.new(a);

[07:47] <DarkWolf84> :)

[07:47] <pugsbot_r17185> Error: No such subroutine: "&a"

[07:47] <DarkWolf84> oops

[07:47] <DarkWolf84> ?eval class X {42}; my $foo .= X.new('a');

[07:48] <pugsbot_r17185> Error: Must only use named arguments to new() constructor␤Be sure to use bareword keys.

[07:48] <moritz_> ?eval class X { has $.a;}; my $foo = X.new(a=>2);

[07:48] <moritz_> ?eval class X { has $.a;}; my $foo = X.new(a=>2); say $foo.perl

[07:48] <pugsbot_r17185> \X.new(("a" => 2),)

[07:49] <moritz_> ?eval class X { has $.a;}; my $foo = X.new(:a(2)); say $foo.perl

[07:49] <pugsbot_r17185> OUTPUT[\X.new(("a" => 2),)␤] Bool::True

[07:49] <DarkWolf84> I know

[07:49] <DarkWolf84> just show the error :>

[07:54] <DarkWolf84> in spec constructor accept only position args

[07:55] <moritz_> and pugs implements it that way

[07:56] *** hkb_aw is now known as hkb_lab

[07:57] *** DarkWolf84 left
[08:01] <renormalist> re

[08:01] <renormalist> pmurias: But how do I access key from inside Foo?

[08:01] <renormalist> $.key ?

[08:01] *** iblechbot left
[08:02] <renormalist> damn, work & :-)

[08:02] <renormalist> back in 1h

[08:07] *** timbunce joined
[08:18] <pmurias> school&

[08:27] *** demq joined
[08:40] *** demq left
[08:41] *** salzh joined
[08:51] *** JarJarBi1ks joined
[09:03] *** andara joined
[09:03] *** JarJarBinks left
[09:04] *** Blwood joined
[09:06] *** JarJarBinks joined
[09:17] *** salzh left
[09:18] *** JarJarBi1ks left
[09:19] *** cognominal_ joined
[09:29] <GeJ> out of curiosity, any got news from audreyt?

[09:30] <GeJ> ...anyone...

[09:43] *** cognominal_ left
[09:52] *** iblechbot joined
[10:17] *** jisom left
[10:22] *** buetow joined
[10:30] *** cognominal_ joined
[10:30] *** nipotan is now known as nipotaway

[10:52] <moritz_> GeJ: I think that was the answer ;/ (ie nothing)

[10:57] *** lyokato left
[11:07] *** pbuetow joined
[11:14] *** buetow left
[11:30] *** andara left
[11:30] *** andara joined
[11:42] *** masak joined
[11:49] *** sunnavy left
[11:50] *** fglock joined
[11:51] *** nipra joined
[11:51] *** iblechbot left
[11:51] <fglock> i'm finally back to irc - starting on a new computer

[11:52] <fglock> i missed the bootstrapping fun :P

[11:52] <moritz_> fglock: it's not over ;)

[11:53] <moritz_> fglock: kp6 compiles itself without error messages, but it doesn't run yet

[11:53] <fglock> ok

[11:54] <fglock> i've got no svn yet

[11:54] <moritz_> poor man ;)

[11:54] <moritz_> should we collect a bit of money to get you one?

[11:54] <moritz_> ;-)

[11:55] <fglock> heh - firewall problems, should be fixed soon

[11:55] <fglock> i'll try through feather

[11:57] <moritz_> where are you know?

[11:57] <fglock> lisbon, portugal

[11:58] <moritz_> at your new work?

[11:58] <fglock> yes

[12:01] <fglock> i'm getting this error in feather, using svk up -s: A checksum mismatch occurred: Base checksum mismatch on '/mirror/pugs/src/perl6/Perl-6.0.0-STD.pm' 

[12:01] <moritz_> Perl-6.0.0-STD.pm was removed

[12:01] <moritz_> and renamed to STD.pm

[12:02] <moritz_> so try to remove it manually, and see if that helps

[12:02] <fglock> ok

[12:03] <pmurias> b

[12:03] <pmurias> fglock: hi

[12:03] <fglock> pmurias: hi!

[12:05] <pmurias> Visitor::Global is a big hindrance

[12:05] <fglock> hmm

[12:05] <pmurias> i'm thinking/experimenting how to get rid of it

[12:06] <fglock> one possible way is to install a my-subroutine, that calls the GLOBAL version

[12:06] <fglock> this sub can be overwritten 

[12:07] <fglock> by a user sub

[12:07] <pmurias> binding subs might be better the creating wrapers

[12:07] <pmurias> s/the/then/

[12:08] <fglock> sure

[12:08] <fglock> so if you use print(), then it would bind my &print := GLOBAL::print

[12:09] <fglock> until you define your own print()

[12:09] <pmurias> yes

[12:11] <fglock> otoh, what problem do you get with the current version?

[12:13] <pmurias> with for loops

[12:13] <pmurias> Global turns the $topic into $GLOBAL::topic

[12:15] <fglock> that's because the topic is not being created, it's a bug in the AST generator

[12:15] <pmurias> $Main::{$_} = $GLOBAL::{$_} for keys %GLOBAL::; should be enough to replace Global

[12:15] <fglock> it should create a Pad with the variable

[12:16] <fglock> i'd rather fix 'if' instead

[12:17] <pmurias> ah i so see what you mean

[12:17] <fglock> i'm reinstalling, will be back to hacking in an hour or so

[12:17] *** pbuetow left
[12:18] *** timbunce left
[12:19] *** elmex left
[12:19] *** buetow joined
[12:20] <pmurias> fglock: k

[12:20] *** Ashizawa left
[12:26] *** cmarcelo joined
[12:30] *** lambdabot left
[12:31] *** lambdabot joined
[12:32] <pugs_svnbot> r17616 | renormalist++ | [kp6]

[12:32] <pugs_svnbot> r17616 | renormalist++ | - kp6-perl5.pl gives options to emitters, currently used for a secure flag

[12:32] <pugs_svnbot> r17616 | renormalist++ | - secure mode now implemented via setting a constant and checking for it

[12:32] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17616

[12:32] <lambdabot> Title: Changeset 17616 - Pugs - Trac

[12:32] <renormalist> moritz_: you can now use kp6-perl5.pl --secure    to compile in the eval bot

[12:33] <moritz_> renormalist: thanks ;)

[12:34] <moritz_> renormalist: I already did that, even though it had no efect before

[12:34] <moritz_> as of r17585 

[12:34] <renormalist> it does it now with your suggested constant way

[12:34] <moritz_> #kp6 use IO;

[12:34] <exp_evalbot> r17616: OUTPUT[DISPATCH: calling  on invalid object:$VAR1 = 'perl';␤␤ at lib5/KindaPerl6/Runtime/Perl5/MOP.pm line 32␤      main::DISPATCH('perl') called at - line 16␤]

[12:35] <renormalist> #kp6 mkdir('/tmp/foo');

[12:35] <exp_evalbot> r17616: OUTPUT[DISPATCH: calling APPLY KindaPerl6::Runtime::Perl5::DispatchSugar::Dispatch=HASH(0x8362eb4) on invalid object:$VAR1 = {};␤␤ at lib5/KindaPerl6/Runtime/Perl5/MOP.pm line 32␤ main::DISPATCH('undef', 'APPLY', 'KindaPerl6::Runtime::Perl5::DispatchSugar::Dispatch=HASH(0x83...') called at

[12:35] <exp_evalbot> ..- line 16␤]

[12:35] <renormalist> hm

[12:36] <renormalist> #kp6 say(42);

[12:36] <exp_evalbot> r17616: OUTPUT[42␤]

[12:36] <renormalist> #kp6 Math.rand(5);

[12:36] <exp_evalbot> r17616: OUTPUT[3.80142717542642␤]

[12:37] <renormalist> #kp6 IO.mkdir('/tmp/foo');

[12:37] <exp_evalbot> r17616: OUTPUT[forbidden code at lib5/KindaPerl6/Runtime/Perl5/IO.pm line 5 (KP6_DISABLE_UNSECURE_CODE)␤               at lib5/KindaPerl6/Runtime/Perl5/Kp6Security.pm line 9.␤]

[12:37] <renormalist> ah, that's my code

[12:37] <renormalist> mkdir is protected 

[12:37] <moritz_> renormalist++

[12:38] *** nipra left
[12:38] <moritz_> though I'd think the normal spelling is "insecure", not "unsecure" ;)

[12:40] *** jhorwitz joined
[12:41] *** fglock left
[12:43] *** fglock joined
[12:43] <pugs_svnbot> r17617 | renormalist++ | - spelling fixes

[12:43] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17617

[12:43] <lambdabot> Title: Changeset 17617 - Pugs - Trac

[12:45] <renormalist> moritz_: should now be fixed

[12:45] <pugs_svnbot> r17618 | renormalist++ | - spelling fixes again, damn :-)

[12:45] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17618

[12:45] <lambdabot> Title: Changeset 17618 - Pugs - Trac

[12:45] <renormalist> #kp6 IO.mkdir('/tmp/foo');

[12:45] <exp_evalbot> r17618: OUTPUT[forbidden code at lib5/KindaPerl6/Runtime/Perl5/IO.pm line 5␤               at lib5/KindaPerl6/Runtime/Perl5/Kp6Security.pm line 9.␤]

[12:46] <renormalist> #kp6 Math.rand(5);

[12:46] <exp_evalbot> r17618: OUTPUT[0.770446621249921␤]

[12:46] <renormalist> #kp6 Math.srand(5);

[12:46] <exp_evalbot> r17618: OUTPUT[1␤]

[12:46] <renormalist> #kp6 Math.rand(5);

[12:46] <exp_evalbot> r17618: OUTPUT[4.13381566446789␤]

[12:46] <renormalist> #kp6 Math.srand(5);

[12:46] <exp_evalbot> r17618: OUTPUT[1␤]

[12:46] <renormalist> #kp6 Math.rand(5);

[12:46] <exp_evalbot> r17618: OUTPUT[3.53244544509382␤]

[12:46] <renormalist> hm, not sure this works correctly

[12:47] <renormalist> anyway, afk &

[12:47] <fglock> oops - Data::Bind is not installing from CPAN (used by v6.pm)

[12:47] <renormalist> #kp6 Math.srand(2); Math.rand(5);

[12:47] <exp_evalbot> r17618: OUTPUT[4.56216326718733␤]

[12:48] <renormalist> #kp6 Math.srand(2); Math.rand(5);

[12:48] <exp_evalbot> r17618: OUTPUT[4.56216326718733␤]

[12:48] <renormalist> #kp6 Math.srand(2); Math.rand(5);

[12:48] <exp_evalbot> r17618: OUTPUT[4.56216326718733␤]

[12:48] <renormalist> #kp6 Math.srand(2); Math.rand(5); Math.rand(5); 

[12:48] <exp_evalbot> r17618: OUTPUT[0.795414544861472␤]

[12:48] <fglock> ah, it's the "Module::Build is not configured with C_support" thing

[12:49] <moritz_> renormalist: that's how I'd expect it to work

[12:49] <renormalist> yes

[12:49] <renormalist> i was confused but single eval bot runs are disconnected from another, of course

[12:50] <renormalist> so the srand had no effect first time I thought it was wrong

[12:50] <renormalist> so now I'm really afk :-)

[12:50] <moritz_> evalbot fork()s for each ^#(kp6|eval|p6|pugs|nqp) command

[12:51] <renormalist> yes, and that's a Good Thing

[12:54] <pugs_svnbot> r17619 | pmurias++ | [kp6] for generates right AST (dosn't work)

[12:54] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17619

[12:54] <lambdabot> Title: Changeset 17619 - Pugs - Trac

[13:04] *** dalecooper joined
[13:05] *** ruoso joined
[13:05] <pmurias> ruoso: hi

[13:06] <ruoso> pmurias, hi

[13:12] <ruoso> pmurias, so... I saw kp6 can compile itself... is there already any plan for the next steps?

[13:13] <moritz_> ruoso: it compiles itself, but the result doesn't work yet :(

[13:13] <ruoso> moritz_, any idea why?

[13:13] <ruoso> let's do it the same way I was trying to make the bootstrap... creating test cases for the features that are failing...

[13:14] <moritz_> ruoso: just run ./bootstrap.pl && cd bootstrap

[13:14] <moritz_> copy kp6-perl5.pl there, and then executed it with -Ilib

[13:15] <pmurias> ruoso: for dosn't work

[13:16] <moritz_> #kp6 for 0..2 { say $_; };

[13:16] <exp_evalbot> r17619: OUTPUT[Syntax Error␤no method 'APPLY' in Class 'Int'␤]

[13:16] <moritz_> #kp6 for 0..2 -> $a { say $a; };

[13:16] <exp_evalbot> r17619: OUTPUT[Syntax Error␤no method 'APPLY' in Class 'Int'␤]

[13:16] <pmurias> #kp6 for (0,1,2) -> $a {say $a}

[13:16] <exp_evalbot> r17619: OUTPUT[Syntax Error␤DISPATCH: calling APPLY on invalid object:$VAR1 = {};␤␤ at lib5/KindaPerl6/Runtime/Perl5/MOP.pm line 32␤  main::DISPATCH('undef', 'APPLY') called at - line 16␤]

[13:16] <pmurias> #kp6 @a=(1,2,3);for (@a) -> $a {say $a}

[13:16] <exp_evalbot> r17619: OUTPUT[Syntax Error␤]

[13:17] <ruoso> pmurias, I've got some warnings about the redefinition of KindaPerl6::Grammar.__rule_block1

[13:17] <ruoso> is that related to the code blocks inside rules?

[13:17] <pmurias> yes

[13:17] <pmurias> the count is per file

[13:17] <ruoso> that is a problem, isn't it?

[13:17] <pmurias> yes

[13:18] <pmurias> it should also add the rule name where the block appears

[13:18] <ruoso> and the file name mangled somehow

[13:18] <moritz_> why not package name?

[13:18] <ruoso> not only package

[13:18] <ruoso> but file

[13:18] <ruoso> like

[13:18] <ruoso> __rule_block_filename_line_inc

[13:18] <ruoso> __rule_block_$filename_$line_$inc i mean

[13:18] <pmurias> inc is ?

[13:19] <ruoso> just for the case that there is more than one block in the same line

[13:19] <moritz_> the incremented number

[13:19] <pmurias> __rule_block_$filename_$inc would be enough

[13:19] <moritz_> aye

[13:19] <pmurias> the $inc is kept as a member of the visitor

[13:20] <ruoso> is filename unique?

[13:20] <ruoso> I don't think so

[13:20] <ruoso> I don't think we can count on that

[13:21] <ruoso> it's probably a better idea to generate a lexical variable that contains the coderegf

[13:21] <pmurias> yes

[13:21] <ruoso> and just deref as a sub call inside the rule

[13:21] <ruoso> or even

[13:22] <ruoso> get the source back from the AST and recompile after thar

[13:22] <ruoso> that*

[13:22] <pmurias> the first option is i think preferable

[13:22] <moritz_> least effort, but quite effective

[13:23] <ruoso> pmurias, the best would be if Token already generated a AST and just included the code inside it

[13:23] <ruoso> which is not quite impossible, actually

[13:23] <pmurias> the second option is slower and suffers from bugs in the AST emitter

[13:23] <pmurias> ruoso: if you want to do it

[13:24] <pmurias> i thought of doing quasi-quotes once we get a bootstrap

[13:24] <ruoso> and what if we create a syntax marker that would be replaced by the Lit::Code object

[13:24] <ruoso> in the AST

[13:24] <pmurias> i don't understand

[13:24] <pmurias> explain more/diffrently

[13:24] <ruoso> generate the rule with a: WE_WILL_CALL_THE_BLOCK_HERE_PLACEHOLDER

[13:25] <ruoso> that would be searched on the tree

[13:25] <ruoso> and substituted by the Lit::Code

[13:26] <pmurias> isn't it better just to generate a lexical sub

[13:26] <ruoso> this can be confusing and conflicting with other lexical variables

[13:26] <pmurias> ruoso: what you propose would sort of be like quasi-quotes

[13:26] <ruoso> yep...

[13:27] <ruoso> we would add a KindaPerl6::AST::Placeholder object type in the AST

[13:27] <ruoso> this placeholder would be like a macro

[13:27] <ruoso> that would then be replaced by the code itself

[13:27] <ruoso> which is already an AST object

[13:28] <ruoso> after the generated p6 code be parsed

[13:29] <ruoso> we could make this placeholder thing as a stack

[13:29] <ruoso> that everytime we create a placeholder we add it's referral to the stack

[13:29] <pmurias> i see

[13:29] <ruoso> and then, everytime the placeholder is substituted by the referral, the stack would be shifted

[13:30] <ruoso> FIFO

[13:31] <pmurias> having quasi-quotes would obsolete this

[13:31] <pmurias> and they aren't so much more difficult

[13:31] <ruoso> how would that work

[13:31] <ruoso> ?

[13:31] <ruoso> considering you're returning a string, and the block code is already a AST tree

[13:32] <pmurias> i would return only AST nodes then

[13:32] <pmurias> there is no use using strings if you have quasi-quotes

[13:32] <ruoso> i didn't get it

[13:32] <ruoso> you still is generating p6 code that needs to be parsed

[13:33] <ruoso> and that block is enclosed in this code

[13:33] <ruoso> how will you do that?

[13:34] <pmurias> let me find an example

[13:35] <ruoso> rule myrule { 'abc' { return 'cde' } }

[13:35] <pugs_svnbot> r17620 | ruoso++ | [kp6] some notes on how the runtime could be even more splitted from the compilation

[13:35] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17620

[13:35] <lambdabot> Title: Changeset 17620 - Pugs - Trac

[13:36] <ruoso> the idea of the placeholder would be like generating a code equivalent to:

[13:36] <ruoso> rule myrule { 'abc' (((!!!PLACEHOLDER!!!))) }

[13:36] <ruoso> include the placeholder as a rule in the grammar

[13:36] <ruoso> and once the placeholder is parsed

[13:37] <ruoso> it shifts from the stack the node that should be returned

[13:38] <moritz_> ruoso: re NOTES-NEW-COMPILER.txt: are you planning to write a new compiler that is bootstrapped with kp6?

[13:39] <ruoso> moritz_, just wondering, actually

[13:39] <pmurias> or refactor the current one to a new layout?

[13:39] <ruoso> trying to see if it makes sense or not

[13:39] <ruoso> pmurias, that would be an option, in the case it makes sense

[13:40] *** daxim_ left
[13:40] *** daxim_ joined
[13:40] <moritz_> that diagram looks... scary ;)

[13:40] <pmurias> with quasi-quotes avalible i don't think it would make sense to generate p6 code instead of p6 ast

[13:41] <ruoso> moritz_, heh

[13:41] <moritz_> btw am I right in assuming that the hackathon is finished?

[13:41] <ruoso> pmurias, I still didn't got what the quasi-quotes are

[13:41] <pmurias> you can use for example q:code {$var} as sugar for ::Var(sigil='$',name=>'var',...)

[13:41] <ruoso> moritz_, yep

[13:41] <ruoso> moritz_, or not...

[13:41] <ruoso> ;)

[13:41] <ruoso> we're as active as in the hackathon ;)

[13:42] <moritz_> ruoso: I'm just asking because of moving IDEAS-HACKATHON to docs/

[13:42] <ruoso> moritz_, fglock ?

[13:42] <pmurias> ruoso: have you seen the Quasiquoting section in S06?

[13:42] <ruoso> you mean, not parsing the rule block until the Token emiter?

[13:43] <pmurias> no

[13:43] <pmurias> using AST nodes instead of code in strings

[13:44] <pmurias> with similar syntax

[13:44] <ruoso> pmurias, hm... I see...

[13:44] <ruoso> but then you need a AST2Str and Str2AST

[13:45] <pmurias> it should avoid the time consuming parsing step

[13:45] <pmurias> AST2Str is EmitPerl6 and Str2Ast is Grammar.pm

[13:45] <ruoso> moritz_, btw... what is scary about the diagram?

[13:46] <moritz_> ruoso: it has many nodes, and many bidrectional/circular edges

[13:46] <ruoso> pmurias, well... you'll be regenerating the orig code to be parsed again

[13:46] <moritz_> ruoso: it's not that complicated, but the first impression is "d'oh, that's tough" ;)

[13:46] <ruoso> moritz_, heh

[13:46] <ruoso> moritz_, but do you think it makes sense?

[13:47] <ruoso> pmurias, it would be better if we had a AST2YAML/YAML2AST or something like that...

[13:47] <moritz_> ruoso: yes, I think it does (but I'm not a compiler wizard)

[13:47] <moritz_> ruoso: and there are things that are rather similar in kp6 right now

[13:47] <pmurias> ruoso: i won't

[13:47] <moritz_> like the pluggable emitters

[13:47] <pmurias> be regenerating the code

[13:48] <pmurias> i'll ci an example

[13:48] <ruoso> pmurias, so, how will you represent the Lit::Code object inside the string?

[13:49] <ruoso> it needs to be stringified

[13:49] *** riffraff left
[13:52] <moritz_> ruoso: with the diagram I can't find a possiblity to change the grammar at runtime

[13:52] *** |Jedai| joined
[13:52] <moritz_> how would you do that?

[13:53] <pmurias> ruoso: it dosn't need to be strinfied

[13:53] <pugs_svnbot> r17621 | pmurias++ | [kp6] quasi-quote example

[13:53] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17621

[13:53] <lambdabot> Title: Changeset 17621 - Pugs - Trac

[13:54] <pmurias> quasi-quotes are syntax sugar for explicitly creating AST

[13:57] <ruoso> pmurias, so, you'll be calling the backend emitter in the Rule::Block emitter

[13:57] <ruoso> that was what I was trying to avoid

[13:58] <fglock> what is the command for initializing pugs in svk? i'm trying svk co //pugs http://svn.pugscode.org/pugs

[13:58] <pugs_svnbot> r17622 | pmurias++ | [kp6] example of intended use of quasi-quotes in Token.pm

[13:58] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17622

[13:58] <lambdabot> Title: Changeset 17622 - Pugs - Trac

[13:58] *** iblechbot joined
[13:58] <pmurias> ruoso: why would i call the backend emitter

[13:58] <fglock> i get: Path //pugs does not exist

[13:58] <pmurias> and if you do //

[13:58] <pmurias> ?

[13:59] <pmurias> the quasi-quotes are transformed when Token.pm is compiled

[13:59] <moritz_> I'd expect just 'svk co http://svn.pugscode.org/pugs/'

[13:59] <moritz_> but I never tried it 

[14:00] <ruoso> pmurias, hmmm

[14:00] <fglock> that seems to work

[14:00] <ruoso> now I see

[14:00] <ruoso> pmurias++

[14:00] <ruoso> That is certainly better...

[14:00] <ruoso> and we should probably substitute all this code generation and parsing in Token.pm to that...

[14:01] *** szbalint left
[14:04] <pmurias> i'm not sure if it's sane to implement them before the boostrap

[14:04] <pmurias> *bootstrap

[14:04] <fglock> svk didn't understand -100 and it wants to download from revision 1

[14:04] <moritz_> though shalt refrain from downloading r1 ;)

[14:05] <fglock> how can I make it ask again?

[14:05] <ruoso> pmurias, we need a solution to the rule::block to be able to bootstrap

[14:05] <moritz_> http://feather.perl6.nl/svk.html sounds good

[14:05] <lambdabot> Title: SVK on Feather

[14:07] <fglock> moritz_: i think that instructions are specific for feather

[14:07] <moritz_> fglock: do you need the history?

[14:08] <moritz_> if not, there's a -head option iirc

[14:09] *** jedai left
[14:09] *** szbalint joined
[14:10] <fglock> moritz_: like this? svk up --head -s

[14:12] <pmurias> ruoso: hacking around the problem with $filename$inc

[14:12] <moritz_> fglock: somethink like that, but I don't know exactly... and I haven't got a svk installation here :(

[14:13] <ruoso> pmurias, ok

[14:14] *** polettix left
[14:16] <pmurias> ruoso: is using Digest::MD5 ok?

[14:17] <ruoso> md5 of what?

[14:17] <pmurias> the source file being compiled

[14:17] <ruoso> probably using the stringified "Lit::Code=HASH(0x123213)" taking the 0x123123 is enough

[14:17] <ruoso> or not

[14:18] <ruoso> but yes...

[14:18] <ruoso> md5 + inc seems enough for now

[14:19] <pmurias> is there anything else blocking the bootstrap

[14:19] <pmurias> ?

[14:20] <pmurias> i can think only of ::Foo(key1=>1,key2=>2)

[14:20] <pmurias> not working

[14:23] <ruoso> is that the cause for the compilation error?

[14:23] <pmurias> no

[14:23] <pmurias> it's a runtime thing

[14:24] <ruoso> at this moment, tryng to use the bootstrapped libs fail with a compilation error...

[14:25] <moritz_> yes, that's the rule blocks with same names

[14:25] <pmurias> no

[14:25] <pmurias> it's the for's

[14:26] * moritz_ does a 'svn up' ;)

[14:27] <pmurias> i have no idea how to fix the for's

[14:28] <pugs_svnbot> r17623 | pmurias++ | [kp6] md5 of source file added to __rule_block

[14:28] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17623

[14:28] <lambdabot> Title: Changeset 17623 - Pugs - Trac

[14:29] * ruoso trying to add a "my $a" before the for

[14:29] <ruoso> to see if the compiler see it as a local var instead of global

[14:30] <pmurias> you to it in each of the files?

[14:30] <pmurias> s/to/do/

[14:31] <ruoso> I'm trying just in the "Parameters", as it's the first one

[14:31] <ruoso> if the problem goes elsewhere

[14:31] <ruoso> then it makes sense to do that

[14:31] <ruoso> kp6 takes an entire decade to bootstrap

[14:32] <moritz_> 186 seconds for me

[14:32] <moritz_> for one compilation pass

[14:32] <pmurias> meaning

[14:32] <moritz_> compare that to GHC or GCC ;)

[14:32] <pmurias> ?

[14:32] <moritz_> compile all p6 files once with kp6-perl5.pl (the mixed mp6/kp6 thingy)

[14:32] <pmurias> wow

[14:33] <pmurias> that's fast

[14:33] <ruoso> moritz_, bootstrap.pl could receive a param to work with more than one processor

[14:33] <ruoso> yep

[14:33] <pmurias> moritz_: what's your hardware?

[14:33] <ruoso> the my $var before the "for" solves it

[14:33] <moritz_> Pentium M 1.5 GHz

[14:33] <moritz_> nothing fancy, really

[14:35] <pmurias> i'll install dia, and then see how long does it take for me

[14:35] <moritz_> I don't have an SMP maschine, so there's no incentive to implement parallel compilation ;)

[14:35] <pmurias> i remember Grammar.pm alone compiled longer

[14:35] <pugs_svnbot> r17624 | ruoso++ | [kp6] added a kp6-bootstrap-perl5.pl script, and tested "my $var" before a for works...

[14:35] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17624

[14:36] <pmurias> and i have 2.4 GHz ,2Gb ram and use ratpoison as my wm

[14:36] <moritz_> I once built a "linux from scratch" with a complete bootstrapped toolchain on a 700MHz maschine - it compiled for days, literally ;)

[14:36] <pmurias> i use gentoo

[14:37] <pmurias> :)

[14:37] <moritz_> pmurias: well, gentoo has binary packages as well ;)

[14:38] <moritz_> ruoso: what does kp6-bootstrap-perl5.pl do?

[14:40] *** dalecooper left
[14:40] <ruoso> nothing special...

[14:40] <ruoso> it just "use lib 'bootstrap/lib'

[14:41] <moritz_> ah, ok

[14:45] <ruoso> #pugs my %a = { a => 1, b => 2 }; %a{a} := 3;

[14:45] <exp_evalbot> OUTPUT[*** No such subroutine: "&a"␤    at /tmp/6mumS0xlqW line 1, column 32-33␤]

[14:45] <ruoso> #pugs my %a = { a => 1, b => 2 }; %a{'a'} := 3;

[14:45] <exp_evalbot> OUTPUT[{obj:<Scalar::Const:0xb72d4fdc>}␤]

[14:46] <ruoso> #pugs my %a = { a => 1, b => 2 }; %a{'a'} = 3;

[14:46] <exp_evalbot> OUTPUT[\3␤]

[14:46] * ruoso confused with binding to a value of a hash

[14:47] <moritz_> my %a = {a => 1, b => 2}; print %a<a>;

[14:47] <moritz_> #pugs my %a = {a => 1, b => 2}; print %a<a>;

[14:47] <exp_evalbot> OUTPUT[1]

[14:47] <ruoso> #pugs my %a = { a => 1, b => 2 }; %a<a> = 3; say %a<a>;

[14:47] <exp_evalbot> OUTPUT[3␤]

[14:47] <ruoso> #pugs my %a = { a => 1, b => 2 }; %a<a> := 3; say %a<a>;

[14:47] <exp_evalbot> OUTPUT[3␤]

[14:48] <ruoso> #kp6 my %a = { a => 1, b => 2 }; %a<a> := 3; say %a<a>;

[14:48] <exp_evalbot> r17624: OUTPUT[Syntax Error␤DISPATCH: calling APPLY on invalid object:$VAR1 = {};␤␤ at lib5/KindaPerl6/Runtime/Perl5/MOP.pm line 32␤  main::DISPATCH('undef', 'APPLY') called at - line 26␤]

[14:48] <ruoso> #kp6 my %a = { a => 1, b => 2 }; %a<a> = 3; say %a<a>;

[14:48] <exp_evalbot> r17624: OUTPUT[Syntax Error␤DISPATCH: calling APPLY on invalid object:$VAR1 = {};␤␤ at lib5/KindaPerl6/Runtime/Perl5/MOP.pm line 32␤  main::DISPATCH('undef', 'APPLY') called at - line 26␤]

[14:49] <ruoso> #kp6 my %a = { a => 1, b => 2 }; %a{'a'}> = 3; say %a{'a'};

[14:49] <exp_evalbot> r17624: OUTPUT[Syntax Error␤]

[14:49] <ruoso> #kp6 my %a = { a => 1, b => 2 }; %a{'a'} = 3; say %a{'a'};

[14:49] <exp_evalbot> r17624: OUTPUT[3␤]

[14:49] <ruoso> #kp6 my %a = { a => 1, b => 2 }; %a{'a'} := 3; say %a{'a'};

[14:49] <exp_evalbot> r17624: OUTPUT[Can't modify non-lvalue subroutine call in scalar assignment at - line 32, near ")␤}"␤Execution of - aborted due to compilation errors.␤]

[14:51] *** sysfault joined
[14:52] <moritz_> #kp6 my %a; %a{'a'} = 1; %a{'b'} = 2; 

[14:52] <exp_evalbot> r17624: OUTPUT[2␤]

[14:52] <moritz_> #kp6 my %a; %a{'a'} = 1; %a{'b'} = 2; say %a{'b'}

[14:52] <exp_evalbot> r17624: OUTPUT[2␤]

[14:52] <moritz_> #kp6 my %a; %a{'a'} = 1; %a{'b'} := 2; say %a{'b'}

[14:52] <exp_evalbot> r17624: OUTPUT[Can't modify non-lvalue subroutine call in scalar assignment at - line 30, near ")␤}"␤Execution of - aborted due to compilation errors.␤]

[14:53] *** sysfault left
[14:56] <fglock> i can no longer commit: Authentication realm: <https://svn.pugscode.org:443> Pugs Subversion Repository

[14:56] <pugs_svnbot> r17625 | ruoso++ | [kp6] it looks like we need hash item binding in kp6 to bootstrap

[14:56] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17625

[14:56] <lambdabot> Title: Changeset 17625 - Pugs - Trac

[14:58] <ruoso> pmurias, fglock is telling me you removed the BIND sub from MOP... ;)

[14:59] <pmurias> yes

[14:59] <pmurias> is hash binding legal p6?

[14:59] <pmurias> hash element binding

[14:59] <ruoso> pmurias, yep

[14:59] <ruoso> It doesn't seems to be specced

[14:59] <ruoso> but pugs supports it

[14:59] <ruoso> and mp6 only supports bind and no assign

[15:00] <ruoso> so we need it, at least until we bootstrap kp5

[15:00] <ruoso> kp6

[15:00] <ruoso> we can remove after that

[15:00] <moritz_> couldn't we default to assignment as a quick'n'dirty hack?

[15:00] <ruoso> if it's not legal

[15:00] <ruoso> hmm... bind is probably used as a bind somewhere

[15:01] <pmurias> don't think so

[15:03] <pmurias> mp6 emits is as hash assigment

[15:03] *** ak__ left
[15:03] <pmurias> *assignment

[15:03] * ruoso trying something here

[15:05] *** polettix joined
[15:07] <ruoso> welll

[15:07] <ruoso> I fixed the test 46...

[15:07] <ruoso> but broke about everything else

[15:07] <ruoso> heh

[15:07] <pmurias> you can't have everything ;)

[15:12] <masak> there are situations where that is as it should be

[15:12] <masak> human judgement is needed there ;)

[15:14] <ruoso> Container := Object looks like a weird bind

[15:14] <SamB> heh

[15:14] <ruoso> binds are supposed to be container := container

[15:16] <ruoso> container := object is a plain assignement

[15:19] *** rindolf joined
[15:20] <pmurias> ruoso: you can have a $variable := object

[15:21] <pmurias> you don't have the object wraped in a Scalar then

[15:22] *** renormalist left
[15:23] <ruoso> but I mean, this have no binding semantics... it's a plain assignement

[15:23] <ruoso> isn't it?

[15:23] <ruoso> hmmm

[15:23] <ruoso> if object is readonly, then, $variable is readonly

[15:23] <ruoso> ok

[15:27] <ruoso> ok...

[15:27] <ruoso> I found 

[15:28] <pmurias> what did you find?

[15:29] *** amnesiac joined
[15:31] <ruoso> my $foo = Foo.new makes the assignement without initializing $foo

[15:31] <ruoso> as a container

[15:32] <ruoso> that's what makes everything break

[15:33] <pmurias> k

[15:33] <pmurias> well it's not ok :)

[15:37] <fglock> i can't commit yet

[15:40] <fglock> i guess i need to get re-invited

[15:41] <moritz_> fglock: I'll try, if commitbit responds

[15:41] <moritz_> compared to commitbit even perlmonks.org is fast ;)

[15:42] <moritz_> obra: is there a command line interface to commitbit?

[15:42] <moritz_> that would make life easier for feather users

[15:42] *** rindolf left
[15:43] <obra> the problem is that feather is fucked up and has horrible performance for large file scans. (like what sqlite does all the time) 

[15:44] <moritz_> since unfucking feather isn't very easy.. could it help to change to another database?

[15:44] <Juerd> feather will get a hardware upgrade within 2 weeks.

[15:44] <moritz_> cool, Juerd++

[15:46] <Juerd> And hereby I'm removing sslh from the system

[15:46] <Juerd> If you need it, please patch it so it doesn't max out the CPU :)

[15:47] <moritz_> ... or provide a second IP ;)

[15:47] *** fglock left
[15:48] *** kanru joined
[15:50] *** pbuetow joined
[15:57] *** barney joined
[15:57] <ruoso> ok...

[15:57] <ruoso> after my changes I have 50% pass

[15:57] <ruoso> but I think it's in the right direction

[16:02] <pmurias> you could nopaste a diff or something if you want to show them

[16:03] * pmurias wanders why 36 and 40 started to fail 

[16:04] *** justatheory joined
[16:12] <Juerd> moritz_: Additional IPs are available if needed; I think it's a bit inefficient to use an entire second IP just so people can evade silly firewalls.

[16:13] <Juerd> Discussion (or numbers on how many people depended on sslh) welcome.

[16:19] <pmurias> ruoso: did you find anything else the the binding which blocks the bootstrap?

[16:20] <Juerd> So far, I have no actual data on anyone really *using* sslh

[16:20] <ruoso> pmurias, I'm struggling with it

[16:20] <ruoso> it looks like it's in the right way

[16:22] <pasteling> "ruoso" at 82.154.252.25 pasted "Trying to implement the BIND." (179 lines, 11.1K) at http://sial.org/pbot/27286

[16:25] <ruoso> pmurias, take a look

[16:26] *** bonesss joined
[16:27] <TimToady_> fg

[16:27] <TimToady_> .oO(grr)

[16:27] <pmurias> ruoso: nay

[16:28] <pmurias> i don't think changing back to BIND is a good choice

[16:28] <ruoso> pmurias, what?

[16:28] <masak> TimToady_: why ".oO(grr)"?

[16:28] <ruoso> pmurias, which choice do we have?

[16:29] <pmurias> we could change the emit assignment if the left side of the bind is a hash elem

[16:29] <pmurias> TimToady_: is %hash<elem> := 1; legal?

[16:29] <moritz_> probably a "wrong window" array

[16:30] <pmurias> ruoso: i could do it if you want

[16:30] <ruoso> pmurias, does it solve all the problems?

[16:30] *** szbalint left
[16:31] *** franck___ left
[16:32] <pmurias> ruoso: it should solve that one

[16:32] <pmurias> other problems are probably unrelated to binding

[16:32] <ruoso> pmurias, give it a try

[16:32] <pmurias> giving already

[16:33] <TimToady_> pmurias: you should be able to bind to a hash/array element

[16:33] <ruoso> TimToady_, that's not yet in the specs, isn't it?

[16:33] <ruoso> the only reference I found was a thread in the ml

[16:33] *** TimToady_ is now known as TimToady

[16:34] <ruoso> pmurias, but I think we're going to need a new runtime

[16:34] <ruoso> for the final compiler

[16:34] <TimToady> ?eval my @a = 1,2,3;  @a[1] := 42; say @a

[16:35] <pugsbot_r17185> OUTPUT[1423␤] Bool::True

[16:35] <ruoso> TimToady, it's implemented by pugs... 

[16:35] <ruoso> but I couldn't find it in the specs

[16:35] <TimToady> then it's gotta be right :)

[16:35] <ruoso> heh

[16:35] <ruoso> ok

[16:36] <TimToady> I think it falls in the category of "anything not forbidden is allowed", esp since it's so fundamental

[16:36] <TimToady> indeed, in Python every array element assignment is really what we think of as binding

[16:36] <ruoso> pmurias, fglock is saying that making the INDEX and LOOKUP as lvalue would solve it

[16:37] <pmurias> lvalue here means?

[16:38] <pmurias> in the perl5 sense?

[16:38] <ruoso> yep

[16:40] *** |Jedai| is now known as jedai

[16:42] *** rindolf joined
[16:45] <pugs_svnbot> r17626 | pmurias++ | [kp6] binding is changed to assignment in the emitter

[16:45] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17626

[16:45] <lambdabot> Title: Changeset 17626 - Pugs - Trac

[16:46] <pmurias> the test works

[16:46] <pmurias> which means we likely have the assignment wrong

[16:47] <ruoso> did you run the last binding test I wrote?

[16:47] *** stevan_ left
[16:48] <pmurias> yes

[16:48] <pmurias> and

[16:48] <pmurias> ?

[16:48] <ruoso> so it's semantics is write

[16:48] <ruoso> right

[16:52] <ruoso> multi's and junctions are now failing

[16:52] <ruoso> for some reason

[16:55] *** andara left
[16:58] *** buetow left
[16:58] *** buetow joined
[17:00] <pmurias> ruoso: don't know when they started to fail

[17:05] <pmurias> moritz_:  the bootstrap.pl took 0m7.384s on my machine

[17:06] <pugs_svnbot> r17627 | ruoso++ | [kp6] bootstrap script now accepts a n parameter to paralellize the copilation

[17:06] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17627

[17:06] *** masak left
[17:09] <pmurias> ruoso: blocking on for again :(

[17:09] <ruoso> pmurias, I'm pre-declaring the "my" variables 

[17:10] <ruoso> Can't locate object method "new" via package "KindaPerl6::Visitor::Perl" at bootstrap/lib/KindaPerl6/Runtime/Perl5/Compiler.pm line 14.

[17:10] <ruoso> that's a new error

[17:10] <pmurias> ruoso: you predeclared all of them :)

[17:10] <pmurias> ?

[17:11] <ruoso> yep

[17:11] * ruoso committing now

[17:11] <pugs_svnbot> r17628 | ruoso++ | [kp6] moving forward... no more compilation errors in bootstrapped kp6... only runtime errors now

[17:11] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17628

[17:11] <lambdabot> Title: Changeset 17628 - Pugs - Trac

[17:11] <ruoso> I left the broken for test, so we know it doesn't work

[17:11] *** weinig left
[17:12] <pmurias> k

[17:15] *** rjbs joined
[17:15] *** nwc10 joined
[17:15] <rjbs> TimToady: What's the reasoning behind calling err "err"?

[17:15] <ruoso> pmurias, I think it's time to start the new compiler

[17:16] <ruoso> we need to convert everything to kp6 calling convention

[17:16] <ruoso> instead of mp6 calling convention

[17:17] <pmurias> makes sense

[17:18] *** dmq32 joined
[17:19] <ruoso> let's do the following

[17:19] <ruoso> we take the current "lib" dir, make a copy to "lib-kp6-mp6"

[17:19] *** fglock joined
[17:19] <ruoso> then we take the current "lib5" dir and make a copy to "lib-kp6-mp6-p5"

[17:20] <ruoso> so the current compiler stays stable

[17:20] <ruoso> and we start implementing the other

[17:20] <ruoso> makes sense?

[17:20] <pmurias> think so

[17:20] * ruoso doing it

[17:22] <pmurias> COMPILATION_PROCESS.png looks very much like the current kp6 architecture

[17:26] *** cmarcelo left
[17:27] *** weinig joined
[17:27] <pugs_svnbot> r17629 | ruoso++ | [kp6] Huge source code layout re-structure... now we have kp6-mp6 and kp6-kp6 sub-projects

[17:27] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17629

[17:27] <lambdabot> Title: Changeset 17629 - Pugs - Trac

[17:28] * ruoso refactoring Makefile to the new structure

[17:30] *** kanru left
[17:32] <moritz_> pmurias: run 'time bootstrap.pl -a'

[17:33] <moritz_> pmurias: otherwise it'll only rebuild touched files

[17:34] <pmurias> doing it that way, it wouldn't take so long otherwise

[17:34] <pmurias> i wonder how you manage to recompile kp6 that much faster on a slower machine

[17:35] <ruoso> pmurias, more memory?

[17:35] <ruoso> kp6 is very memory jungry

[17:35] <ruoso> s/jungry/hungry/

[17:35] <pmurias> are 4Gb of ram required?

[17:36] <moritz_> you said it took 0m7.384s

[17:36] <moritz_> mine took 128s which is 3m8s

[17:36] <moritz_> so yours is much faster

[17:37] * moritz_ has 512MB ram, some of which is claimed by the GPU

[17:37] *** ahmadz joined
[17:37] <pmurias> i misread the output

[17:38] <moritz_> ok ;)

[17:38] <ahmadz> hi

[17:38] <pmurias> it wasn't 7 seconds for sure

[17:39] <pmurias> it dosn't really matter

[17:40] <pmurias> kp6 isn't that memory hungry

[17:40] <pmurias> to shows it's under 10% here

[17:41] <pmurias> well under 20% always so it dosn't use more then 400m

[17:49] * ruoso finishing the structural changes in the source

[17:52] <moritz_> ruoso: which way are you going now? BIND or lvalue?

[17:54] <ruoso> moritz_, pmurias fixed changing the BIND to a ASSIGN in case of hash lookup or array index

[17:54] <ruoso> the Makefile was changed...

[17:54] <pugs_svnbot> r17630 | ruoso++ | [kp6] structural source layout changes finished.

[17:54] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17630

[17:54] <ruoso> calling bootstrap.pl is uncecessary now

[17:55] <ruoso> a simple make

[17:55] <ruoso> will do it

[17:55] <ruoso> and now we can change the runtime in lib-kp6-kp6...

[17:56] *** cmarcelo joined
[17:58] <ruoso> I think now we basically need to re-write as much as possible files from kp6-kp6/ p5 runtime to p6

[17:58] <ruoso> like KindaPerl6::Runtime::Perl5::Compiler

[17:59] <ruoso> to KindaPer6::Runtime::Perl6::Compiler

[18:01] <pugs_svnbot> r17631 | moritz++ | [kp6] removed bootstrap.pl (substituted by Makefile)

[18:01] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17631

[18:01] <lambdabot> Title: Changeset 17631 - Pugs - Trac

[18:01] *** Psyche^ joined
[18:12] *** polettix left
[18:14] *** Patterner left
[18:14] *** Psyche^ is now known as Patterner

[18:16] <pugs_svnbot> r17632 | ruoso++ | [kp6] Match is no longer p5.. the p6 version is used instead

[18:16] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17632

[18:16] <lambdabot> Title: Changeset 17632 - Pugs - Trac

[18:18] *** TimToady_ joined
[18:22] <ruoso> #kp6 say "hello"

[18:22] <exp_evalbot> r17633: OUTPUT[Can't open perl script "kp6-perl5.pl": No such file or directory␤]

[18:22] <pugs_svnbot> r17633 | ruoso++ | [kp6] Bootstrap todo list...

[18:22] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17633

[18:22] <ruoso> oops

[18:22] <lambdabot> Title: Changeset 17633 - Pugs - Trac

[18:24] * ruoso going home

[18:24] <pugs_svnbot> r17634 | ruoso++ | [kp6] as kp6-mp6 is the only working version, lets leave it as the evalbot executable

[18:24] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17634

[18:24] <lambdabot> Title: Changeset 17634 - Pugs - Trac

[18:25] <ruoso> pmurias, take a look at the KP6-Bootstrap-Notes file

[18:25] <ruoso> it seems we're really close to the bootstrap

[18:25] <pmurias> k

[18:26] <ruoso> home &

[18:26] *** ruoso left
[18:31] <moritz_> #kp6 say "foo"

[18:31] <exp_evalbot> r17634: OUTPUT[Can't locate KindaPerl6/Runtime/Perl5/Runtime.pm in @INC (@INC contains: lib5 /etc/perl /usr/local/lib/perl/5.8.8 /usr/local/share/perl/5.8.8 /usr/lib/perl5 /usr/share/perl5 /usr/lib/perl/5.8 /usr/share/perl/5.8 /usr/local/lib/site_perl .) at - line 7.␤BEGIN failed--compilation

[18:31] <exp_evalbot> ..aborted at - line 7.␤]

[18:33] *** snearch joined
[18:34] <moritz_> now I'm confused - how should evalbot execute kp6?

[18:35] *** TimToady1 joined
[18:35] *** bonesss left
[18:38] *** TimToady left
[18:38] <moritz_> got it, lib-kp6-mp6-p5

[18:38] <pugs_svnbot> r17635 | moritz++ | [kp6] udpated compile-and-run ./kp6 to reflect current pathes

[18:38] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17635

[18:38] <lambdabot> Title: Changeset 17635 - Pugs - Trac

[18:41] *** exp_evalbot left
[18:41] *** exp_evalbot joined
[18:41] <pugs_svnbot> r17636 | moritz++ | [evalbot] fixed kp6 includes

[18:41] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17636

[18:41] <lambdabot> Title: Changeset 17636 - Pugs - Trac

[18:45] *** rfordinal_ joined
[18:46] *** rfordinal left
[18:47] *** snearch left
[18:47] *** TimToady_ left
[18:49] *** pmurias left
[18:50] *** ahmadz left
[19:01] *** weinig left
[19:06] *** mattrdo joined
[19:06] *** fglock left
[19:06] *** jhorwitz left
[19:22] *** pbuetow left
[19:26] *** dakkar joined
[19:27] *** justatheory left
[19:30] *** weinig joined
[19:35] *** szbalint joined
[19:46] *** rindolf left
[19:52] *** jisom joined
[20:07] *** the_dormant joined
[20:07] *** the_dormant left
[20:24] *** devogon left
[20:29] *** barney left
[20:31] *** gojo10 joined
[20:42] <pugs_svnbot> r17637 | fglock++ | test

[20:42] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17637

[20:42] <lambdabot> Title: Changeset 17637 - Pugs - Trac

[20:43] *** nwc10 left
[20:45] *** fglock joined
[20:46] *** lisppaste3 left
[20:46] *** lisppaste3 joined
[20:52] *** dakkar left
[20:59] *** spx2 joined
[21:13] *** spx2 left
[21:13] <jisom> does perl6 treat nan as true or false?

[21:23] *** Casan_ joined
[21:25] <meppl> good night

[21:25] *** Casan left
[21:43] *** Aankhen`` left
[21:44] <fglock> jisom: NaN is true in pugs

[21:44] <jisom> thanks

[21:47] *** rjbs left
[21:55] *** szbalint left
[22:09] <pugs_svnbot> r17638 | fglock++ | [kp6] mv some files to docs/

[22:09] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17638

[22:09] <lambdabot> Title: Changeset 17638 - Pugs - Trac

[22:12] *** polettix joined
[22:16] *** iblechbot left
[22:18] *** jisom left
[22:18] <pugs_svnbot> r17639 | fglock++ | [kp6] added a test for Inf, NaN (we need this to create range objects)

[22:18] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17639

[22:24] *** Caelum joined
[22:54] *** jisom joined
[22:55] *** lambdabot left
[22:56] *** lambdabot joined
[22:58] *** fglock left
[23:08] *** cmarcelo left
[23:10] *** justatheory joined
[23:27] *** stevan_ joined
[23:27] *** jisom left
[23:58] <Blwood> To know which functions are implemented in pugs we have to look inside /t to see if there's a test for it right ? And normally there should be a link in the synopsis to it. Am I right ?

