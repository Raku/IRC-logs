[00:05] *** silug joined
[00:23] *** avar joined
[00:48] *** kunwon1 joined
[00:52] *** cmarcelo joined
[01:06] *** Caelum joined
[01:13] *** avar joined
[01:19] *** Eidolos joined
[01:29] *** aukjan|gone joined
[01:35] *** Limbic_Region joined
[01:44] *** kunwon1 joined
[01:45] <Limbic_Region> salutations all

[01:51] *** agentzh joined
[01:53] *** drupek12 joined
[01:56] <TimToady> howdy!

[01:56] <agentzh> morning, TimToady :)

[01:57] <TimToady> the only problem with morning is that it comes at such an inconvenient time of the day...

[01:57] <TimToady> except when it's an inconvenient place in the world...

[01:58] *** REPLeffect joined
[01:59] * agentzh gets confused by TimToady's inconvenience.

[01:59] <Caelum> does vim have a syntax file for perl6?

[01:59] * TimToady gets inconvenienced by agentzh's confusion  :)

[02:00] <TimToady> Caelum: yes

[02:00] <agentzh> Caelum: i believe there is one in the pugs repos :)

[02:00] <TimToady> see util/perl6.vim

[02:00] <Caelum> ahh cool :)

[02:01] <Caelum> what extension should perl6 files end with?

[02:01] <agentzh> .pl is confusing but...

[02:01] <agentzh> fglock++ chooses .p6 though.

[02:03] <agentzh> people, i'm translating the Synopses to Chinese. where should i put the translated version in the pugs tree?

[02:03] <agentzh> docs/zh-cn/syn/?

[02:04] <agentzh> docs/Perl6/Spec/zh-cn?

[02:06] <Limbic_Region> oh, my smoke time after the pad refactor became stabalized is as fast or faster as before - circa 1/2 hour

[02:06] <Limbic_Region> apparently it slowed down considerably right after the refactor

[02:06] <agentzh> recent auto-smoke on feather ususally take s

[02:06] <agentzh> 200+ min

[02:07] *** weinigLap joined
[02:08] * Limbic_Region doesn't know if that is considered faster, slower, or normal

[02:08] <agentzh> much much slower

[02:09] <agentzh> or maybe that's because the auto-smoke now has a nice number of 10 or even 15 :)

[02:09] <Limbic_Region> dunno, I am smoking again now

[02:09] <agentzh> anyway, it completes without problem everyday.

[02:11] <agentzh> i was thinking a realclean might be necessary for the pad refactoring stuff, but it seems everything just works without doing that manually on feather. :)

[02:12] * agentzh has been suffering from DNS problems lately :(

[02:15] <agentzh> TimToady: are you also running some kind of autosmoking on your linux and windows machines?

[02:15] <agentzh> i can see your smoke reports almost everyday (as well as the feather autosmokes', of course :))

[02:15] <svnbot6> r16608 | lwall++ | [STD.pm] feeble attempt to make QLang role's bootstrap virtualizable

[02:15] <svnbot6> r16608 | lwall++ | [STD.pm] missing <?ws> in declarator pseudoassignment

[02:16] <Caelum> how do you set @*INC for using pugs from the source tree?

[02:16] <agentzh> -I ?

[02:17] * agentzh is not really here.

[02:18] <TimToady> no, I just run smokes when I can't think of anything better to do, which is usually... :)

[02:18] <agentzh> lol

[02:18] <Caelum> agentzh: err, -I what?

[02:19] <agentzh> pugs -Iblib6/lib blah.pl

[02:19] <Caelum> or do I really have to do a make install

[02:19] <agentzh> no, please don't

[02:19] <Caelum> hehe

[02:19] <agentzh> make install destroyed my ubuntu's perl :(

[02:19] *** ahmadz_ left
[02:20] <agentzh> but maybe it has been fixed.

[02:20] <Caelum> segmentation fault woo hoo

[02:20] <Caelum> not that I've heard

[02:20] <agentzh> in case you have the tuits to "confirm"

[02:21] * agentzh is reading simpy's docs.

[02:21] <dduncan> perl files should always end in .pm/.pl/.t/whatever, the same as perl 5

[02:21] <dduncan> using .p6 et al was ruled out a long time ago as being good

[02:22] <dduncan> rather, you put use p6-alpha in the file itself rather than use 5

[02:22] <dduncan> agentzh

[02:23] <thoughtpolice> woot. logging is now implemented in my little server. :)

[02:23] <dduncan> toow

[02:23] <agentzh> dduncan: *nod*

[02:23] <thoughtpolice> 'twas somewhat annoying to code. but i got to have fun with stateT :)

[02:23] <dduncan> so no ++ for anyone that does .p6

[02:23] <TimToady> Caelum: do you have a commit bit?

[02:24] <Caelum> TimToady: nope

[02:24] <TimToady> if you msg me your email, I will attempt to send one

[02:25] <Caelum> that means I'll actually have to start working on something :)

[02:27] <TimToady> thinking about working on something is also considered working on something around here. :)

[02:27] <Limbic_Region> TimToady is far to kind

[02:27] <TimToady> and feather is far too slow...

[02:27] <Limbic_Region> audreyt sends you the commitbit first and suggests contributing later (hence guilting you into contributing)

[02:28] <TimToady> darn, my firefox crashed, have to start over...

[02:29] * Limbic_Region idly wonders if the plugin(s) to restore tabs after accidental closure and what not work when firefox itself crashes

[02:30] <Caelum> kind of

[02:30] <araujo> TimToady, don't worry, it happens to more people :-)

[02:31] <TimToady> Caelum: while I'm waiting for commitbit again, what would you like for a project nick?  Caelum?

[02:31] <thoughtpolice> links ftw!

[02:32] <Caelum> TimToady: yes please :)

[02:33] <Limbic_Region> I am sure I have asked this before but do rules have natural ways of handling precedence and associativity or does one have to resort to wizardry like manual stratification and left-recursion elimination?

[02:33] <agentzh> could someone paste the IP address of svn.openfoundry.org and svn.pugscode.org for me? my DNS server is naughty :(

[02:34] *** Teratogen joined
[02:34] <Teratogen> is ( . )( . ) valid Perl 6?

[02:34] <TimToady> only in a regex

[02:34] <Teratogen> bummer

[02:35] <TimToady> ...almost there...

[02:36] <TimToady> ...almost there...

[02:36] <araujo> Teratogen, we have it on Haskell though

[02:36] <araujo> it is the famous ... boob operator

[02:36] <araujo> :-)

[02:40] <TimToady> commitbit sent, finally!

[02:41] <TimToady> Caelum: it is customary to add your name to AUTHORS as your first commit to make sure everything is in working order

[02:45] *** japhb joined
[02:49] <PerlJam> Limbic_Region: Rules use the same mechanisms as subroutines for associativity, precedence, fixity, etc.

[02:49] <PerlJam> AFAIK anyway

[02:49] <PerlJam> Since regex are just special forms of subroutines.

[02:50] <PerlJam> See http://dev.perl.org/perl6/doc/design/syn/S06.html#Subroutine_traits

[02:50] <lambdabot> Title: Synopsis 6: Subroutines - perl6:, http://tinyurl.com/pfpph

[02:51] <Caelum> agentzh: 140.109.17.109 and 193.200.132.135

[02:52] <agentzh> Caelum: thanks!

[02:56] <Aankhen``> * Limbic_Region idly wonders if the plugin(s) to restore tabs after accidental closure and what not work when firefox itself crashes # yes, they do, in case you're still wondering. :-)

[02:56] <Aankhen``> The builtin session restore featur

[02:56] <Aankhen``> Er.

[02:56] <Aankhen``> The builtin session restore feature, on the other hand, doesn't work too well in case of crashes.

[02:57] <Aankhen``> Or at least that was my experience.

[02:59] <Aankhen``> Okay, I think it's time to run a smoke.

[03:00] * Aankhen`` fiddles with the VM's settings to give it more memory and CPU.

[03:00] <Caelum> TimToady: got it, thank you!

[03:02] <Aankhen``> What the...?  My VM is suddenly refusing to start X.

[03:04] <Teratogen> pwned!

[03:04] <Aankhen``> :'-(

[03:04] * Aankhen`` is trying to install VMWare Tools.

[03:04] <Aankhen``> Apparently the X server couldn't find the "vmouse" module or something liket hat.

[03:04] <Aankhen``> That, even.

[03:07] *** SubStack joined
[03:09] *** weinigLap_ joined
[03:15] * Caelum reads docs/

[03:17] *** weinigLap_ joined
[03:25] <Aankhen``> Yay, that fixed it.

[03:29] <Limbic_Region> PerlJam I am not sure I understand how your comment applies to my question

[03:29] <Limbic_Region> I am likely being a dolt

[03:31] <Limbic_Region> wait - I see how that would apply to precedence - is tighter/looser/equiv

[03:32] <Limbic_Region> still looking to see how one would change associativity

[03:32] *** Aankhen`` joined
[03:32] <Limbic_Region> and there it is

[03:32] <Limbic_Region> is assoc

[03:32] <Limbic_Region> thanks PerlJam

[03:33] <Caelum> what does the : in  $fh: "Hi!"; do?

[03:33] <Caelum> err, say $fh: "Hi!";

[03:37] *** revdiablo joined
[03:39] <Aankhen``> Okay, smoke's on its way, and I'm off.

[03:45] <Caelum> so blah($foo: "bar") is the same as $foo.blah("bar") ?

[03:46] <TimToady> yes

[03:46] <TimToady> or blah $foo: "bar"

[03:46] <TimToady> the : rescues the indirect object syntax from ambiguity

[03:47] <TimToady> ?eval say $*OUT: "Hi!"

[03:47] <Caelum> cool! :)

[03:47] <TimToady> hmm, wonder if evalbot is still down...

[03:50] <TimToady> ?eval say $*OUT: "Hi!"

[03:51] <TimToady> ?eval 42

[03:52] <offby1> "Forty-Two"!

[03:52] * offby1 steps in

[04:05] <TimToady> have restarted evalbot, appears to be reconfiguring pugs and rebuilding

[04:06] <TimToady> gonna be a while--this is feather...

[04:09] <Caelum> what's the difference between $a = (1,2); and $a = [1,2]; ?

[04:10] <TimToady> none, effective, since a list in scalar context promotes to array

[04:11] <TimToady> *effectively

[04:11] <Caelum> cool

[04:19] <Caelum> the Capture.pod says you have to do $x = \@a; $$x.push("foo"); but $x.push("foo") works fine as well

[04:22] <TimToady> well, use on the left of . is scalar, so I'm not surprised that the extra $ is redundant

[04:22] <TimToady> s/use/context/

[04:23] *** evalbot_r16608 joined
[04:23] <TimToady> there we go

[04:23] <TimToady> ?eval 42

[04:23] <evalbot_r16608> 42

[04:23] <TimToady> ?eval say $*OUT: "Hi!"

[04:23] <evalbot_r16608> OUTPUT[Hi!‚ê§] Bool::True

[04:25] <TimToady> mind, it's logging everything to my terminal, so I don't know what it'll do when I log off feather...shoulda redirected to a file, I guess...

[04:25] <offby1> or use screen!

[04:25] <offby1> one o' my all-time favorite tools.

[04:26] <Aankhen``> 30m 52s for a smoke this time.

[04:26] <TimToady> probably find out the slowness of feather is caused by some ancient screen treasuring up a terabyte or so of output...

[04:26] <Aankhen``> I think it was a few minutes more last time, which would have been about two days ago.

[04:30] *** gugod_ is now known as gugod

[04:35] *** chaoslawful_ joined
[04:35] <svnbot6> r16609 | lwall++ | [t/junction/misc_junctions.t] parsefail

[04:37] <Caelum> ?eval $x = (1,2,3); $x.push(4); $x

[04:37] <evalbot_r16608> [1, 2, 3, 4]

[04:37] <Caelum> hmm, according to Capture.pod that's supposed to fail

[04:38] <PerlJam> why?

[04:38] <Caelum> it says: $x.push(0); # FAIL: cannot find method: List.push

[04:38] <PerlJam> Perhaps Capture.pod needs updating

[04:49] *** offby2 joined
[04:49] *** offby2 left
[04:51] <TimToady> ?eval $x := (1,2,3); $x.push(4); $x

[04:51] <evalbot_r16608> Error: Bind to undeclared variable: $x

[04:52] <TimToady> ?eval my $x := (1,2,3); $x.push(4); $x

[04:52] <evalbot_r16608> Error: Can't modify constant item: VUndef

[04:52] <TimToady> ?eval my $x := \(1,2,3); $x.push(4); $x

[04:52] <evalbot_r16608> Error: Can't modify constant item: VUndef

[04:52] <TimToady> ?eval my $x = \(1,2,3); $x.push(4); $x

[04:52] <evalbot_r16608> Error: Can't modify constant item: VUndef

[04:55] *** mjk joined
[05:01] *** penk joined
[05:07] *** BooK joined
[05:20] *** weinigLap joined
[05:46] *** jisom joined
[06:00] *** [particle] joined
[06:15] *** drupek1288 joined
[06:24] *** drupek1288 left
[06:25] *** Averell joined
[06:34] <gaal> hee, it's a loophoole in the somewhat kludgy non-strict that you need to declare 'my' vars for bind in evalbot :)

[06:34] <lambdabot> gaal: You have 1 new message. '/msg lambdabot @messages' to read it.

[06:35] <gaal> "circularity problem in worm oroborous"

[06:37] <gaal> whee the MaybeT solution was precisely what I was hoping for

[06:39] <gaal> I wonder if there's a crazy monad in which bind is wired to its own mplus, so you can just write these actions one after another

[06:40] <gaal> (not that it would be suvh a good idea to golf that way in this case) 

[07:04] *** Jmax joined
[07:22] *** ahmadz_ joined
[07:22] <ahmadz_> hi

[07:22] <ahmadz_> is pugs safe mode broken?

[07:23] <ahmadz_> PUGS_SAFEMODE=1 pugs -e 'print 42'

[07:24] <ahmadz_> pugs: user error (**** **** Can't modify constant item: VUndef at prelude line 802, col 9-46 )

[07:24] <ahmadz_> without PUGS_SAFEMODE it works

[07:24] <ahmadz_> ?eval print 42

[07:24] *** evalbot_r16608 is now known as evalbot_r16609

[07:24] <evalbot_r16609> OUTPUT[42] Bool::True

[07:24] <gaal> !

[07:25] <gaal> ahmadz_: worksforme with a pugs from last night

[07:26] <ahmadz_> what's ur pugs svn version?

[07:26] <Aankhen``> WFM too with a Pugs from a few hours ago.

[07:26] <Aankhen``> r16608 here.

[07:26] <gaal> and prelude:802 is a comment...

[07:26] <Aankhen``> Heh.

[07:26] <ahmadz_> strange 16609 here...

[07:27] <Aankhen``> Did you svn up in the middle of the build or something like that, by any chance?

[07:27] <gaal> 16598, here.

[07:27] <ahmadz_> try it from another working directory... like ~

[07:27] <ahmadz_> somehow it needs a file in pugs directory

[07:28] <gaal> ah, that means you have a bad compiled prelude in your @*INC

[07:28] <gaal> do locate Prelude.pm.yml

[07:28] <gaal> and nuke the bad one

[07:28] <ahmadz_> will do... and re-make right?

[07:28] <gaal> you once did make install, didn't you?

[07:29] <ahmadz_> nop...

[07:29] <ahmadz_> never

[07:29] <gaal> oh, hey, right: reproduced here.

[07:29] <gaal> this is interesting. let me strace a bit and find

[07:29] <gaal> ESCdd this means that the source-inlined prelude is bad. fixing

[07:30] <ahmadz_> cool, ty

[07:31] <ahmadz_> runpugs termserv.pl does a sanity check on pugs before starting...

[07:31] <ahmadz_> that's why i need safe mode

[07:34] *** Aankh|Clone joined
[07:35] *** Aankh|Clone is now known as Aankhen``

[07:36] <gaal> for now, copy over Prelude.pm.yml to where it can see it

[07:36] *** kunwon1 joined
[07:36] *** Eidolos joined
[07:36] *** cognominal joined
[07:36] <gaal> hope to have a fix for you soon

[07:37] <ahmadz_> cool... im clean building it just in case.

[07:42] *** weinigLap joined
[07:46] *** weinigLap joined
[07:52] *** buetow joined
[08:04] *** Jmax joined
[08:09] *** broquaint joined
[08:20] *** andara joined
[08:20] <andara> hi ahmadz_

[08:26] <andara> @tell ahmadz_ /home/andara/pugs-dev/ always has the latest snapshot that works with PUGS_SAFEMODE=1. Run as /home/andara/pugs-dev/pugs -I/home/andara/pugs-dev/blib6/lib

[08:26] <lambdabot> Consider it noted.

[08:33] <gaal> okay. the dying is not caused by bad Prelude.pm->Prelude.hs mangling, but rather by writing to %*INC at the end of the prelude load.

[08:34] <gaal> the easy fix is to declare %*INC safe, but I don't want to do that.

[08:34] <gaal> I don't understand yet why a preludePC does not trigger this problem.

[08:34] <gaal> apparently its merging of envs circumvents undeclared symbols

[08:35] <gaal> (I don't want to declare %*INC safe because this:

[08:35] <gaal> ?eval %*INC

[08:35] <evalbot_r16609> \undef

[08:35] <gaal> should not leak information about the server.)

[08:36] <gaal> I suppose another makeshift would to to modify the INC assignment to be conditional on INC's being defined

[08:36] <gaal> that's kinda icky though

[08:37] *** larsen_ joined
[08:41] <svnbot6> r16610 | gaal++ | * factor out a function for fresh envDebug maps

[08:47] <gaal> hm bad choice to put that in P.A.I

[08:49] *** drupek12 joined
[08:53] *** dduncan left
[08:55] *** dduncan joined
[09:02] *** cozwei joined
[09:09] *** rho joined
[09:23] *** dduncan left
[09:25] *** andara joined
[09:28] *** iblechbot joined
[09:34] *** polettix joined
[09:44] *** andara_ joined
[10:01] *** isaacd joined
[10:03] *** [1]Co2 joined
[10:08] *** andara joined
[10:08] *** ahmadz joined
[10:12] *** ahmadz is now known as ahmadz_

[10:13] *** ahmadz_ left
[10:13] *** ahmadz_ joined
[10:14] *** ahmadz_ is now known as ahmadz

[10:19] *** ahmadz joined
[10:22] *** riffraff joined
[10:23] <riffraff> hi

[10:23] <moritz> hi riffraff ;)

[10:25] <ahmadz> hi moritz, riffraff ;-)

[10:26] <moritz> helo ahmadz ;)

[10:29] *** jedai joined
[10:34] *** awwaiid joined
[10:36] *** awwaiid joined
[10:36] <riffraff> jut out of curiosity: is there a chance that ghc6.7 will use gcc4 as the backend?

[10:43] <gaal> usually ghc doesn't compile via c at all

[10:46] <riffraff> I thought it used the gcc cpu-specific backends (I think they are called frontends in gcc, but anyway "the thing that spit out binary")

[10:47] <moritz> ghc6 debian package depends on gcc

[10:47] <gaal> you can compile -fvia-c, but normally you don't

[10:47] <moritz> ok

[10:47] <gaal> (afaik)

[10:48] <riffraff> I see

[10:48] <gaal> it goes through C--, usually. but better ask on #haskell

[10:54] <riffraff> ah, the joy of compiling pugs again from zero on an old cpu

[10:57] <riffraff> ah, some makefile guru wants an hint? Makefile.PL should check for the network-any dependency (libghc6-network-dev package on ubuntu). I would add it but I have no clue on how to do that

[11:03] *** myavuzselim joined
[11:04] <gaal> riffraff: please see the treatment for mtl and abstract away

[11:04] *** kanru joined
[11:05] <gaal> white you're at it, the deiban names are the same, so please change the note accordingly

[11:06] <riffraff> ok I will try :/

[11:07] <gaal> riffraff++

[11:10] <riffraff> mh

[11:11] *** kane__ joined
[11:12] <riffraff> It seem that the presence of mtl is checked by com√®piling with -package mtl. Should I add an identical compilation-or-fail step or just merge the two (-packaget mtl -package network || you need both )?

[11:12] <riffraff> I believe the latter is better

[11:12] <riffraff> less descriptive maybe but since you do need both libraries it is the same

[11:15] *** ml8128 joined
[11:15] <gaal> together is faster, but that doesn't matter much because it's makefile generation time, not build time

[11:16] <gaal> sequential is more descriptive errors.

[11:16] <riffraff> ok

[11:17] <gaal> it may not be totally unreasonable to dunk compilation-detection completely and look at the output of "ghc-pkg list", not sure

[11:19] <gaal> bbl...&

[11:22] *** Limbic_Region joined
[11:27] *** bonesss joined
[11:45] *** bernhard joined
[11:45] *** ml8128 joined
[11:48] <riffraff> err.. someone could tell me whats wrong with the indentation in "main =  let x = defaultProtocol ()" ?

[11:53] <gaal> where's the next line?

[11:56] <riffraff> doh

[11:56] <riffraff> nevermind solved :)

[11:56] <riffraff> thanks

[12:03] *** mjk joined
[12:05] *** buetow joined
[12:07] <riffraff> oh damn I lost my svn password..

[12:17] <moritz> rho: re network-any - debian/control takes care of these if you build a .deb

[12:17] <moritz> s/rho/riffraff/

[12:17] <moritz> sorry ;)

[12:18] <gaal> moritz: um this is at pugs build time, for people who aren't using a deb

[12:21] <moritz> gaal: I know, but checking for depencies depends on the system, doesn't it?

[12:22] <gaal> one sure way is to use ghc, because if that fails, pugs will fail to build :)

[12:23] *** ml8128 joined
[12:31] *** |jedai| joined
[12:45] *** riffraff joined
[12:45] <svnbot6> r16611 | gabriele++ | Makefile.PL: Added check for ghc's network package  

[12:46] *** rindolf joined
[12:52] <riffraff> please do check that I have not broken anything, I did try the various permutation of mtl/network/nothing but just to be sure..

[12:56] <gaal> riffraff: the mtl stuff looks good, but you seem to have expanded the tabs in the makeflie

[12:56] <gaal> which would break it :(

[13:01] <rindolf> Hi gaal 

[13:02] <rindolf> gaal: are you going to bike today?

[13:04] <riffraff> oh damn, I had expandtab set yes

[13:11] <svnbot6> r16612 | gabriele++ | Makefile.PL: put tabs in place again which I removed in previous rev, sorry

[13:14] <riffraff> thanks gaal for spotting that

[13:15] *** riffraff is now known as riff\feedingPige

[13:18] *** ofer joined
[13:18] <svnbot6> r16613 | gaal++ | * add a closing brace dropped in riffraff++'s recent commit

[13:19] <gaal> rindolf: i might

[13:19] <gaal> riffraff: np

[13:19] <rindolf> gaal: I'd like to go to.

[13:19] <gaal> so go

[13:19] <rindolf> gaal: lots of babes now in the Park.

[13:20] <rindolf> gaal: would you like to meet in Park Hayarkon?

[13:20] <gaal> no, and frankly I find that remark offensive in context.

[13:30] *** ahmadz_ joined
[13:31] <ahmadz_> hi

[13:31] <lambdabot> ahmadz_: You have 1 new message. '/msg lambdabot @messages' to read it.

[13:37] <gaal> oh, hi ahmadz_. re: your report, not fixed yet, but you have the workaround, yes?

[13:38] <ahmadz_> yeah but since we have mod_perl, things are a bit messy

[13:39] <ahmadz_> i tried to smoke test a freebsd vm right now and it simply waited in /t/xx-uncategorized/io_finalize_part2.t. Turned out to be low disk space

[13:43] <gaal> ahmadz_: note that if you *don't* have a ymlized prelude, you're taking a huge hit in startup time

[13:43] <gaal> re the other thing, interesting bug :)

[13:44] * gaal wonders how mod_perl is interplaying with pugs' prelude to make things messy

[13:45] <ahmadz_> gaal: i was doing mod_perl2 but turned out andara was doing mod_perl...

[13:46] <gaal> you can always set PERL6LIB...

[13:47] <ahmadz_> cool... will do but after i sleep a bit ;-)

[13:48] <gaal> have fun

[13:52] *** prism joined
[13:53] *** ahmadz_ is now known as ahmadz

[14:11] <gaal> clkao++ # svk ignore

[14:11] <svnbot6> r16614 | gaal++ | * add ignore props on generated files

[14:15] *** REPLeffect joined
[14:15] <riff\feedingPige> err, I asked this before but: someone knows how to add a class/role in prelude so that it is visible as builtin?

[14:15] <riff\feedingPige> nick riffraff

[14:15] *** riff\feedingPige is now known as riffraff

[14:16] *** avar joined
[14:16] <gaal> riffraff: what does that entail?

[14:17] <riffraff> basically writing Foo at the REPL and not getting an error

[14:17] <riffraff> see for example the role Iter is defined in Prelude but not available at the repl or in a script

[14:18] <gaal> hmm, ack

[14:18] <gaal> until it's fixed, use ::Iter

[14:19] <gaal> bbl..

[14:20] <riffraff> oh I don't really need iter, I was just thinking of adding dummy definitions for Positional, Associative and othyer builtin roles

[14:20] <gaal> ::Whichever :)

[14:20] <gaal> re-&

[14:39] *** stevan_ joined
[14:41] *** jedai joined
[14:44] *** wilx` joined
[14:45] *** larsen_ joined
[14:49] *** elmex joined
[14:52] *** [particle] joined
[15:01] *** obvio171 joined
[15:06] <rindolf> gaal: I didn't have enough cold water, so I ended up taking a walk. :-(

[15:06] <rindolf> I wish I had some liquid nitrogen.

[15:06] <rindolf> Or a supercomputer.

[15:06] <rindolf> I could put a bottle of water on it, and it will freeze.

[15:07] <rindolf> Supercomputers use Liquid Nitrogen.

[15:21] *** ntgrl is now known as integral

[15:49] *** awwaiid joined
[15:59] *** silug joined
[16:13] *** BooK joined
[16:19] *** bonesss joined
[16:21] <svnbot6> r16615 | moritz++ | problem97.t: whitespace/stylistic fixes

[17:09] <TimToady> ?eval sub postfix:<¬Æ> ($x is ref) { $x }; my $Java¬Æ = 42; say $Java¬Æ;

[17:09] *** evalbot_r16609 is now known as evalbot_r16615

[17:09] <evalbot_r16615> Error: Can't modify constant item: VRef <Scalar:0xb6798f80>

[17:09] <TimToady> ?eval sub postfix:<¬Æ> ($x is ref) is rw { $x }; my $Java¬Æ = 42; say $Java¬Æ;

[17:09] <evalbot_r16615> Error: Can't modify constant item: VRef <Scalar:0xb6796aec>

[17:10] <TimToady> ?eval sub postfix:<¬Æ> ($x is ref) is rw { $x }; my $Java = 42; say $Java¬Æ;

[17:10] <evalbot_r16615> OUTPUT[42‚ê§] Bool::True

[17:10] <TimToady> well, at least it works as rvalue...

[17:11] <TimToady> arguably, <ident> should just slurp up the ¬Æ  :)

[17:13] <spinclad> really?  looks like you declare it an operator there...

[17:14] *** asksh joined
[17:14] <spinclad> my ($Java¬Æ) = 42: ?

[17:14] *** asksh joined
[17:14] <moritz> TimToady: in S29:1189 the empty "=item pos" is that a "to be specced" method? or just an artefact?

[17:15] <spinclad> (OTOH if ¬Æ is alphabetic...)

[17:15] <TimToady> the above would have behaved differently if so

[17:16] <spinclad> true

[17:16] <TimToady> pos is in a prespecced state

[17:16] <TimToady> ?eval "a" ~~ /<alpha>/

[17:17] <evalbot_r16615> *** Cannot parse regex: <alpha>‚ê§*** Error: ‚ê§Match.new(‚ê§  ok => Bool::False, ‚ê§  from => 0, ‚ê§  to => 0, ‚ê§  str => "", ‚ê§  sub_pos => (), ‚ê§  sub_named => {}‚ê§)

[17:17] <TimToady> oh yeah, evalbot doesn't do character classes...

[17:18] <moritz> so a regex match should set .pos on a string?

[17:19] <TimToady> heh, ‚ìá is considered alpha, but not ¬Æ

[17:19] <TimToady> yes, unless we decide that attaching .pos to a string is a violation of some principle or other

[17:20] <moritz> alright

[17:20] <TimToady> but it'd be nice to be able to continue one regex in a different regex like P5 can

[17:21] <TimToady> possibly .pos would have to be both per string and per thread

[17:21] <moritz> sounds... somehow scary ;)

[17:21] <spinclad> per handle... open a string for parsing, returns handle

[17:22] <TimToady> or generalize it into a marking facility, and pos is just one convention name for a mark

[17:23] <TimToady> *conventional

[17:24] <TimToady> the mark sigil could be ‚Äª   :)

[17:24] <spinclad> that's ... the transistor glyph?

[17:25] <moritz> what about '#'? have fun parsing sigils and comments ;)

[17:25] <spinclad> the SQUID

[17:25] <TimToady> "REFERENCE MARK"

[17:26] <spinclad> good one then

[17:27] <TimToady> hmm, if we rename @@ context to ** context, we could also use ‚Åë

[17:27] <TimToady> but then we lose our multidim Whatever, sigh

[17:28] <moritz> that's a bit weird anyway ;)

[17:28] <moritz> or perhaps I just didn't understand it ...

[17:29] <TimToady> maybe we could just lose the : after @@: as long as we have a space, basically say that a sigil with a space after it is a contextualizer listop

[17:29] <TimToady> for @@ 1..3 X 'a'..'z' {...}

[17:30] <TimToady> still pretty ugly...

[17:32] *** explorer joined
[17:32] <TimToady> but fits existing listop syntax better, and is slightly less ugly

[17:36] *** Psyche^ joined
[17:36] <TimToady> hmm, but we can't easily do the same with turning a type into a listop

[17:37] <TimToady> currently Type: args expects a term after, and bare Type expects operator.  :/

[17:38] <TimToady> listops are allowed to take 0 args though...

[17:39] <TimToady> so $class = Foo; could still conceivably work as a typecast with no arguments

[17:41] *** Kattana joined
[17:43] <TimToady> hmm, STD doesn't allow func; as a valid listop syntax; that'a a bug...

[17:53] *** Psyche^ is now known as Patterner

[17:57] <rindolf> Hi all.

[17:57] <rindolf> moritz: what's up?

[17:57] <rindolf> TimToady: what's up?

[17:58] <rindolf> TimToady: got nothing better to do on a Sat than chat with people who got nothing better to do on a Saturday?

[18:04] * Juerd has better things to do but prefers IRC :)

[18:04] *** andara joined
[18:07] *** polettix joined
[18:07] <svnbot6> r16616 | lwall++ | [STD] listops didn't parse non-ary calls like "print;"

[18:07] <svnbot6> r16616 | lwall++ | [STD] dropped : on typecasts; argless Type listop degenerates to protoobject

[18:07] <svnbot6> r16616 | lwall++ | [STD] likewise for sigils; chunky context is now "for @@ 1..3 X 1..2 {...}"

[18:07] * TimToady prefers to do better things AND chat on IRC

[18:07] <TimToady> well, up to a point.  depends on how much better...

[18:10] *** ssotka joined
[18:11] *** jmlin joined
[18:25] *** bonesss joined
[18:25] <Jmax> hm, why do you work on pugs, TimToady ?  wouldn't your time be better spent on say, parrot?  or is there no real "official" perl6 interpreter?

[18:26] <rindolf> TimToady: I'm trying to beef up the he.wikipedia.org entry about UNIX.

[18:26] <rindolf> TimToady: translating the en.wikipedia.org UNIX entry to Hebrew will be mental suicide.

[18:26] <moritz> Jmax: to specifiy a language, you have to use it, unless you want to fall in the theory trap ;)

[18:26] *** Limbic_Region joined
[18:27] <Jmax> so pugs is considered a "trial" p6 interpreter?

[18:27] <rindolf> moritz: what's up?

[18:27] <rindolf> Jmax: Parrot is a virtual machine.

[18:27] <Jmax> a "use it now -- but not forever"?

[18:27] <rindolf> Jmax: it's intended for many languages.

[18:27] <Jmax> i know, i meant the p6 port of parrot

[18:27] <rindolf> Jmax: pugs can generate parrot code.

[18:27] <moritz> rindolf: not much... relaxing from having learned all day

[18:28] <rindolf> Jmax: it can also generate JavaScript.

[18:28] <rindolf> Incredibly bloated and non-semantic JavaScript

[18:28] <rindolf> moritz: what did you learn?

[18:28] <moritz> rindolf: s/can/could/

[18:28] <moritz> rindolf: Material Physics for my exam on monday :(

[18:29] <rindolf> moritz: Physics...

[18:29] <Jmax> I see

[18:29] <rindolf> I'm trying to collect some Perl testimonials.

[18:29] <moritz> rindolf: what citerions do they have to meet?

[18:30] <rindolf> I can go over the Perl success stories on Perl.com.

[18:30] <rindolf> moritz: well, there should be a short sentence or two summarising them.

[18:30] <rindolf> moritz: and then possibly a link to a more verbose description.

[18:30] <rindolf> moritz: preferably by companies, universities, etc.

[18:30] <rindolf> moritz: government agencies.

[18:31] <rindolf> Although I suppose individuals will also be good.

[18:31] <rindolf> moritz: it's for http://perl-begin.org/

[18:31] <lambdabot> Title: Perl Beginners' Site

[18:33] <moritz> rindolf: I could just give you the usual "I use perl for dynamic sites, and it works great" ;-)

[18:33] *** [particle1 joined
[18:33] <rindolf> moritz: that's kind-of lame.

[18:34] <moritz> rindolf: I know ;)

[18:36] <rindolf> moritz: if you can phrase a more substantial testimonial, and we'll sync a good testimonial, that would be nice.

[18:36] <rindolf> I mean a good summary.

[18:36] <moritz> rindolf: If I do I'll let you know ;)

[18:49] <svnbot6> r16617 | andara++ | [runpugs] -Better newline handling

[18:51] *** andara left
[18:52] <japhb> rindolf: Note that some of the big Perl projects (Mason, for instance) have their own testimonial sets, and those companies may be willing to do a plain Perl version, or say "We love Mason *because* of Perl" or something like that

[18:54] <rindolf> japhb: are you japhy?

[18:56] <Jmax> rindolf: there are a few good ones linked to on the catalyst dev wiki

[18:57] <rindolf> Jmax: or on the Catlayst front page.

[18:57] <rindolf> Jmax: thanks.

[18:57] <rindolf> japhb: thanks.

[18:57] <rindolf> japhb: lots of emails to send...

[19:05] <japhb> rindolf: Nope, I'm not japhy.  I used to be geoffb on this channel, but I was nick colliding with someone else on freenode, so I had to change my nick

[19:05] <rindolf> japhb: oh.

[19:05] <rindolf> japhb: it's kind of confusing.

[19:05] <japhb> It's a pun.  :-)

[19:06] <rindolf> japhb: I'm going to bathe. TTYL.

[19:06] *** dduncan joined
[19:06] *** jisom joined
[19:09] <nothingmuch> 2/w 27

[19:12] *** weinigLap joined
[19:42] <moritz> what's wrong with specbot6 ?

[19:45] <rindolf> Back.

[19:45] <rindolf> japhb: where are you from?

[19:56] <TimToady> moritz: bitrot of some sort, or maybe just audreyrot... :)

[19:57] <TimToady> I haven't worried about it too much, on the assumption that most folks here also follow p6l.

[19:57] <TimToady> but my karma suffers as a result.  :)

[19:58] <moritz> TimToady++ # worrying about karma ;)

[19:58] <moritz> or should I say lwall++ ? *g*

[19:58] <TimToady> was gonna install Fedora 7 this morning, but got sidetracked into revising slicing...

[19:59] <TimToady> forgot to eat too...

[20:00] <TimToady> anyway, here's the checkin log:

[20:00] <TimToady> Dropped : from all listop contextualizers, whether sigil and typename.

[20:00] <TimToady> The @@ contextualizer is now also named "slice".

[20:00] <TimToady> Consistent with that, we have regularized slice nomenclature:

[20:00] <TimToady> * A "slice" now always refers to the whole multidimensional subscript, or the list of lists corresponding to that.

[20:00] <TimToady> * We now try to avoid calling the individual sublists "slices".

[20:00] <TimToady> * The parameter to a subscript is *@@slice, not *@@slices.

[20:00] <TimToady> * The term "multislice" is now deemed redundant.

[20:01] <TimToady> so now basically we can write either

[20:02] <TimToady> for 1..3 X 1..2 -> $a, $b {...}

[20:02] <TimToady> or

[20:02] <TimToady> for @@ 1..3 X 1..2 -> [$a, $b] {...}

[20:04] <TimToady> and foo $ bar almost looks like Haskell...

[20:04] <TimToady> being equivalent to foo $(bar)

[20:04] <moritz> ;-)

[20:05] <mj41> Synopses changes http://perl6.cz/w/index.php?title=Speci%C3%A1ln%C3%AD:Recentchanges  More readable then diffs, IMHO.

[20:05] <lambdabot> Title: Posledn√≠ zmƒõny - perl6.cz, http://tinyurl.com/2xbg6v

[20:05] <moritz> haskell poisons your mind ;)

[20:07] <mj41> S03, there is not hash equivalent for $ 1,2 X 3,4      # [\(1,3),\(1,4),\(2,3),\(2,4)] ?

[20:08] *** ludan joined
[20:10] *** silug joined
[20:10] <TimToady> no, because it would just create a bunch of duplicate keys

[20:11] <TimToady> you can't have both 1=>3 and 1=>4 in the same hash

[20:16] <mj41> yes, i understood, thanks ... and result is runtime error or what?

[20:17] <TimToady> you'd just end up with a hash containing 1=>4 and 2=>4

[20:17] <TimToady> maybe we'll end up with a set context though.  %% perhaps

[20:17] <mj41> :-)

[20:18] <moritz> what about user definable contexts?

[20:18] <TimToady> they're just listops

[20:25] <gaal> I misread the bl as "forgot to eat too... / anyway, here's the chicken log"

[20:26] <moritz> ;-)

[20:27] <gaal> and lest I foget to sleep, moose.

[20:27] <moritz> sleep+moose = sloose?

[20:27] <moritz> gaal: good night ;)

[20:27] <gaal> .oO(slooswalking)

[20:32] *** devogon joined
[20:44] *** penk joined
[21:05] <svnbot6> r16618 | Darren_Duncan++ | ext/QDRDBMS/ : updated QDRDBMS.pm and Copying.pod so they state better rationale concerning licensing

[21:28] *** luqui joined
[21:28] <svnbot6> r16619 | moritz++ | reorganized smartlinks in t/operator/binding/scalars.t

[21:30] <dduncan> ?eval my $foo = [1,2,3]; print @($foo);

[21:30] *** evalbot_r16615 is now known as evalbot_r16617

[21:30] <evalbot_r16617> OUTPUT[123] Bool::True

[21:30] <dduncan> ?eval my $foo = [1,2,3]; print @{$foo};

[21:30] <evalbot_r16617> Error: ‚ê§Unexpected "{$"‚ê§expecting "@" or "::"

[21:36] *** justatheory joined
[21:40] *** the_dormant joined
[21:51] * Aankhen`` wonders if he'll ever understand @@.

[21:51] <gaal> the hiyyyya operator

[21:51] <Aankhen``> @.@

[21:51] <lambdabot> Not enough arguments to @.

[21:51] * moritz slaps lambdabot ;)

[21:51] <Aankhen``> Heh.

[21:52] * gaal can't sleep, and is looking for the misplaced circularity saw

[21:52] <gaal> would sure be nice to pull out a Pugs.AST.Env

[21:53] <Juerd> @@ is just two snails in pursuit.

[21:53] <Juerd> They're not that fast, you see.

[21:53] <Aankhen``> Heh.

[21:53] <Juerd> It may take a while.

[21:53] <moritz> Aankhen``: I understand @@ just as non-flattening list context

[21:54] <Khisanth> lazy operators and slow variables, perl6 sounds a bit sluggish

[21:55] *** andara joined
[21:56] <Aankhen``> moritz: Hmm.  I see.  I think I had missed the whole @() flattening automatically thing.

[21:56] <Aankhen``> ?eval @([1, 2], [3, 4])

[21:56] *** evalbot_r16617 is now known as evalbot_r16618

[21:56] <evalbot_r16618> [[1, 2], [3, 4]]

[21:56] <Aankhen``> (Or so I infer.)

[21:56] <Aankhen``> Is Pugs correct there?

[21:57] <moritz> I don't know

[21:57] <Aankhen``> The only way I'm going to understand @@ is if @ does flatten by default. 8-|

[21:57] <Aankhen``> s/ by default//

[21:57] <moritz> but I know that 1, 2 Z 3, 4 should be (1, 3, 2, 4)

[21:57] <moritz> and in @@ context it should actually be ([1,3],[2,4])

[21:57] <Aankhen``> Well, I was in the middle of reading r14413, so I'll see if that helps before whining any more.

[21:58] <japhb> TimToady++ # The huffmanized syntax you're looking for is just the degenerate case of something more general

[21:58] <moritz> Aankhen``: I think explicitly using []'s prevents flattening

[21:58] <Juerd> Aankhen``: @ does flatten in list context.

[21:58] <Aankhen``> Ah.

[21:58] <moritz> ?eval my @a=<a b>; my @c=1,@a

[21:58] <Juerd> Aankhen``: That's the main difference between the array @foo and the array $foo

[21:59] <Juerd> Aankhen``: @foo flattens in list context, $foo does not.

[21:59] <Aankhen``> Right.

[21:59] <evalbot_r16618> [1, "a", "b"]

[21:59] <Aankhen``> @ doesn't recursively flatten, does it?

[22:00] <gaal> "Inside must be a list of pairs, otherwise you must use C<hash()>" -- r14414 -- so { %h } doesn't flatten?

[22:01] <Juerd> %h flattens to a list of pairs

[22:01] <Juerd> iirc

[22:02] <Juerd> Or must it syntactically be a list of pairs?

[22:02] <Juerd> 'cause that'd suck.

[22:02] <gaal> that's my question

[22:02] <Aankhen``> Wouldn't *you* like to know?

[22:03] <Aankhen``> Man, I still can't get over how long it took me to understand multidimensional arrays vs. AoAs.

[22:03] * Aankhen`` shakes his head.

[22:05] <lumi> gaal: What are you circularity sawing?

[22:06] <gaal> I'm trying to pull data Env out of Pugs.AST.Internals

[22:06] <gaal> like miraculously Eval is out

[22:06] <gaal> but Eval wants Env and Env needs Eval, so.

[22:09] <gaal> bbiab

[22:13] <lumi> What is envEval used for?

[22:15] *** jisom joined
[22:16] *** srbot joined
[22:16] <lumi> Maybe it can be split into a seperate ReaderT

[22:25] *** daxim joined
[22:38] *** srbot joined
[22:39] *** srbot is now known as tabris

[22:40] *** srbot joined
[22:49] *** srbot joined
[22:50] *** srbot joined
[22:56] *** luqui joined
[23:14] <dduncan> question ... is it normal for Perl 6 code to contain literals that start with \ ?

[23:14] <dduncan> eg, my $x = \"foo";

[23:14] <dduncan> rather than = "foo"

[23:14] <PerlJam> only if you're constructing a Capture.

[23:14] <dduncan> I'm wondering why Pugs' .perl() prints out a leading backslash

[23:14] <PerlJam> (though I don't think pugs understands Captures yet)

[23:15] <dduncan> ?eval my $foo = 3; say $foo;

[23:15] <dduncan> I mean

[23:15] <dduncan> ?eval my $foo = 3; say $foo.perl();

[23:15] *** evalbot_r16618 is now known as evalbot_r16619

[23:15] <evalbot_r16619> OUTPUT[3‚ê§] Bool::True

[23:15] <evalbot_r16619> OUTPUT[\3‚ê§] Bool::True

[23:15] <dduncan> so why the backslash, I'm wondering

[23:17] *** dwave joined
[23:18] *** dmq joined
[23:23] *** srbot joined
[23:27] *** srbot joined
[23:29] <svnbot6> r16620 | Darren_Duncan++ | ext/QDRDBMS/ : tweaked a bit of contextualizing code in AST.pm

[23:29] *** mako132_ joined
[23:41] *** ruz joined
[23:45] *** ahmadz joined
