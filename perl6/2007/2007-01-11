[00:01] *** GabrielVieira joined
[00:05] *** xpika left
[00:09] *** weinig is now known as weinig|away

[00:26] *** mjk joined
[00:38] *** johnjra joined
[00:43] *** jferrero joined
[00:43] *** nipra joined
[01:01] *** lyokato joined
[01:12] *** hexmode joined
[01:13] *** seano joined
[01:15] <seano> (from the "99 problems" tests, #35): am I wrong about "return X if ...", or is this a bug?  Try pf2(4):

[01:15] <seano> sub pf2($n) {

[01:15] <seano>     for 2..floor sqrt $n {

[01:15] <seano>         return ($_, pf2($n/$_)) if $n % $_ == 0;

[01:15] <seano>     }

[01:15] <seano>     return $n;

[01:15] <seano> }

[01:26] *** Maddingu1 joined
[01:27] *** rgs joined
[01:28] <TimToady> seano: looks like a bug to me.  maybe tail recursion gone awry and not passing the new value?

[01:28] <seano> thanks.  it looks painful to track down, so I figured I'd do a sanity check first :(

[01:29] <TimToady> but maybe there's also a bug in your algorithm.

[01:29] <seano> works in p5...

[01:35] <seano> aha!  $_ is getting clobbered by something ("if", I believe).  Should that happen?

[01:38] <TimToady> works to put result of subcall into a temporary array

[01:38] <TimToady> but that's an if on the front.

[01:38] <TimToady> maybe it's getting confused with "for" statement modifier

[01:40] <seano> "for modifier"?  all I have is an ordinary for statement.  the workaround I used was to use a block parameter on the for: "for blah -> $x { ... }" works.

[01:40] *** johnjra is now known as jarah

[01:40] *** twobitsprite joined
[01:40] <twobitsprite> something tells me this isn't the place for parrot questions

[01:41] <TimToady> you don't have one, but if you did, it would be assuming -> $_

[01:41] <TimToady> it seems to be mapping the boolean result to $_

[01:41] <TimToady> #parrot is more likely to have someone who knows the answer

[01:42] <twobitsprite> TimToady: I suppose it depends on how you calculate the probability... if the two people in there are a) not idle, and b) willing, helpful experts...

[01:43] <TimToady> it's sorta like a multimethod matching, but more the biological sort of algorithm

[01:44] <seano> right.  so maybe "if" is creating its own $_...

[01:44] * seano goes source-diving for how the heck "if" is implemented...

[01:45] <TimToady> the type mismatch can be overcome by driving up the numbers of receptors as well as the number of things to be recepted.

[01:45] <TimToady> my guess is it's spillover from the for modifier semantics

[01:46] *** bones_ joined
[01:47] <TimToady> in fact, the way biological systems deal with ambiguous mmd dispatch is to simply pick one at random.

[01:48] <TimToady> and if it fails--well, you should have taken a higher dosage;

[01:48] <TimToady> and if the higher dosage kills you, well, you should have had a better set of mmd methods.

[01:51] <TimToady> darwinism: better chemistry through living...

[02:04] *** bsb joined
[02:07] *** bucky joined
[02:08] <twobitsprite> TimToady: that's deep

[02:08] <twobitsprite> I'll remember that

[02:09] <TimToady> problem with biological mmd is that you don't always get the answer you expect when you dispatch to the IRC multimethod.  :)

[02:10] <TimToady> you send the "blowup" instruction to the rocket and it says "I'm of two minds about that..."

[02:12] <TimToady> so maybe we should give mmd free will, but make it trainable...

[02:13] <TimToady> If you pick that option, it hurts.  Try something else next time.

[02:14] <TimToady> maybe extensible mmd policy is the path to AI...

[02:18] <TimToady> "I'm sorry, Dave, I can't allow you to dispatch to that MMD routine..."

[02:19] *** |Jack| joined
[02:25] *** bones_ joined
[02:30] *** b00t joined
[02:58] *** leed joined
[03:18] <[particle]> sing( Daisy, Daisy );

[03:22] *** spx2 joined
[03:24] *** hakrzcode joined
[03:26] *** mako132_ joined
[03:26] <spx2> bleah

[03:32] <twobitsprite> mmd on such a scale seems to me that you would spend more time searching for a dispatch candidate than you would actually running code... in which case the algorithm used to dispatch becomes the focus, and now your stuck with traditional search mechanisms to find the right dispatch

[03:33] <twobitsprite> by "search" I mean problem/solution space search, a la AI

[03:38] <spx2> genetic algorithms ?

[03:39] *** mako132_ joined
[03:48] *** _Jack_ joined
[03:52] *** spoops is now known as spoop

[04:08] *** nipra joined
[04:16] *** gugod_ joined
[04:19] *** ingy joined
[04:46] *** b00t joined
[04:53] *** hakrzcode left
[04:53] *** b00t joined
[04:53] *** ingy joined
[04:53] *** gugod_ joined
[04:53] *** nipra joined
[04:53] *** _Jack_ joined
[04:53] *** spx2 joined
[04:53] *** leed joined
[04:53] *** bsb joined
[04:53] *** twobitsprite joined
[04:53] *** rgs joined
[04:53] *** Maddingu1 joined
[04:53] *** seano joined
[04:53] *** lyokato joined
[04:53] *** GabrielVieira joined
[04:53] *** justatheory_ joined
[04:53] *** mdiep_ joined
[04:53] *** Aankhen`` joined
[04:53] *** cdfh_ joined
[04:53] *** jabbot joined
[04:53] *** weinig|away joined
[04:53] *** maquis joined
[04:53] *** Lunchy joined
[04:53] *** ashleyb joined
[04:53] *** tewk joined
[04:53] *** Steve_p joined
[04:53] *** [particle] joined
[04:53] *** lumi joined
[04:53] *** TimToady joined
[04:53] *** yves joined
[04:53] *** mj41_ joined
[04:53] *** Southen joined
[04:53] *** BooK_ joined
[04:53] *** nperez joined
[04:53] *** asey joined
[04:53] *** theorbtwo joined
[04:53] *** autark joined
[04:53] *** integral joined
[04:53] *** cognominal joined
[04:53] *** sri_ joined
[04:53] *** pjcj joined
[04:53] *** arguile joined
[04:53] *** bwk joined
[04:53] *** awwaiid joined
[04:53] *** spoop joined
[04:53] *** zgh joined
[04:53] *** c6rbon joined
[04:53] *** felipe joined
[04:53] *** Lorn joined
[04:53] *** ruz joined
[04:53] *** Khisanth joined
[04:53] *** baest joined
[04:53] *** spinclad_ joined
[04:53] *** araujo joined
[04:53] *** avar joined
[04:53] *** rafl_ joined
[04:53] *** mako132 joined
[04:53] *** Azure-BOT joined
[04:53] *** SCalimlim joined
[04:53] *** mugwump joined
[04:53] *** cookys joined
[04:53] *** buubot joined
[04:53] *** mtve joined
[04:53] *** Eidolos joined
[04:53] *** tcliou joined
[04:53] *** SamB joined
[04:53] *** py1hon joined
[04:53] *** silug joined
[04:53] *** jrockway joined
[04:53] *** Grrrr joined
[04:53] *** miyagawa joined
[04:53] *** audreyt joined
[04:53] *** mr_ank joined
[04:53] *** allbery_b joined
[04:53] *** Gothmog_ joined
[04:53] *** masak joined
[04:53] *** stevan joined
[04:53] *** nekokak joined
[04:53] *** jiing joined
[04:53] *** buu joined
[04:53] *** xinming joined
[04:53] *** kane_ joined
[04:53] *** nanonyme joined
[04:53] *** qmole joined
[04:53] *** statico joined
[04:53] *** stef__ joined
[04:53] *** Debolaz joined
[04:53] *** spo0nman joined
[04:53] *** kcwu joined
[04:53] *** GeJ joined
[04:53] *** cj joined
[04:53] *** pnu joined
[04:53] *** rafl joined
[04:53] *** Yappo joined
[04:53] *** Juerd joined
[04:53] *** perlbot joined
[04:53] *** Kattana joined
[04:53] *** kolibrie joined
[04:53] *** revdiablo joined
[04:53] *** greenail_ joined
[04:53] *** nipotan joined
[04:53] *** takanori_ joined
[04:53] *** glasser joined
[04:53] *** wolverian joined
[04:53] *** PerlJam joined
[04:53] *** svnbot6 joined
[04:53] *** TreyHarris joined
[04:53] *** Shabble joined
[04:53] *** knewt joined
[04:53] *** broquaint joined
[04:53] *** nnunley joined
[04:53] *** jamessan joined
[04:53] *** takesako__ joined
[04:53] *** pasteling joined
[04:53] *** evalbot_r15026 joined
[04:53] *** scw joined
[04:53] *** Caelum joined
[04:53] *** nothingmuch joined
[04:53] *** jiing_ joined
[04:53] *** Tene joined
[04:53] *** LCamel_ joined
[04:53] *** meppl joined
[04:53] *** orafu joined
[04:53] *** hcchien joined
[04:53] *** obra joined
[04:53] *** clkao joined
[05:04] *** seano_ joined
[05:04] *** b00t joined
[05:04] *** ingy joined
[05:04] *** gugod_ joined
[05:04] *** nipra joined
[05:04] *** _Jack_ joined
[05:04] *** leed joined
[05:04] *** bsb joined
[05:04] *** twobitsprite joined
[05:04] *** rgs joined
[05:04] *** Maddingu1 joined
[05:04] *** lyokato joined
[05:04] *** GabrielVieira joined
[05:04] *** justatheory_ joined
[05:04] *** mdiep_ joined
[05:04] *** Aankhen`` joined
[05:04] *** cdfh_ joined
[05:04] *** jabbot joined
[05:04] *** weinig|away joined
[05:04] *** maquis joined
[05:04] *** Lunchy joined
[05:04] *** ashleyb joined
[05:04] *** tewk joined
[05:04] *** Steve_p joined
[05:04] *** [particle] joined
[05:04] *** lumi joined
[05:04] *** TimToady joined
[05:04] *** yves joined
[05:04] *** mj41_ joined
[05:04] *** Southen joined
[05:04] *** BooK_ joined
[05:04] *** nperez joined
[05:04] *** asey joined
[05:04] *** theorbtwo joined
[05:04] *** autark joined
[05:04] *** integral joined
[05:04] *** cognominal joined
[05:04] *** sri_ joined
[05:04] *** pjcj joined
[05:04] *** arguile joined
[05:04] *** bwk joined
[05:04] *** awwaiid joined
[05:04] *** spoop joined
[05:04] *** zgh joined
[05:04] *** c6rbon joined
[05:04] *** felipe joined
[05:04] *** Lorn joined
[05:04] *** ruz joined
[05:04] *** Khisanth joined
[05:04] *** baest joined
[05:04] *** spinclad_ joined
[05:04] *** araujo joined
[05:04] *** avar joined
[05:04] *** rafl_ joined
[05:04] *** mako132 joined
[05:04] *** Azure-BOT joined
[05:04] *** SCalimlim joined
[05:04] *** mugwump joined
[05:04] *** cookys joined
[05:04] *** buubot joined
[05:04] *** mtve joined
[05:04] *** Eidolos joined
[05:04] *** tcliou joined
[05:04] *** SamB joined
[05:04] *** py1hon joined
[05:04] *** silug joined
[05:04] *** jrockway joined
[05:04] *** Grrrr joined
[05:04] *** miyagawa joined
[05:04] *** audreyt joined
[05:04] *** mr_ank joined
[05:04] *** allbery_b joined
[05:04] *** Gothmog_ joined
[05:04] *** masak joined
[05:04] *** stevan joined
[05:04] *** nekokak joined
[05:04] *** jiing joined
[05:04] *** buu joined
[05:04] *** xinming joined
[05:04] *** kane_ joined
[05:04] *** nanonyme joined
[05:04] *** qmole joined
[05:04] *** statico joined
[05:04] *** stef__ joined
[05:04] *** Debolaz joined
[05:04] *** spo0nman joined
[05:04] *** kcwu joined
[05:04] *** GeJ joined
[05:04] *** cj joined
[05:04] *** pnu joined
[05:04] *** rafl joined
[05:04] *** Yappo joined
[05:04] *** Juerd joined
[05:04] *** perlbot joined
[05:04] *** Kattana joined
[05:04] *** kolibrie joined
[05:04] *** revdiablo joined
[05:04] *** greenail_ joined
[05:04] *** nipotan joined
[05:04] *** takanori_ joined
[05:04] *** glasser joined
[05:04] *** wolverian joined
[05:04] *** PerlJam joined
[05:04] *** svnbot6 joined
[05:04] *** TreyHarris joined
[05:04] *** Shabble joined
[05:04] *** knewt joined
[05:04] *** broquaint joined
[05:04] *** nnunley joined
[05:04] *** jamessan joined
[05:04] *** takesako__ joined
[05:04] *** pasteling joined
[05:04] *** evalbot_r15026 joined
[05:04] *** scw joined
[05:04] *** Caelum joined
[05:04] *** nothingmuch joined
[05:04] *** jiing_ joined
[05:04] *** Tene joined
[05:04] *** LCamel_ joined
[05:04] *** meppl joined
[05:04] *** orafu joined
[05:04] *** hcchien joined
[05:04] *** obra joined
[05:04] *** clkao joined
[05:04] *** |Jack| joined
[05:43] *** f0rth joined
[06:12] <meppl> gute nacht

[06:14] *** BooK joined
[06:33] *** mj41__ joined
[06:33] *** mj41__ is now known as mj41

[06:34] *** mj41__ joined
[06:37] *** gugod_ is now known as gugod

[06:37] *** mj41___ joined
[06:41] *** mj41____ joined
[06:54] *** demy joined
[06:55] *** demy left
[07:25] *** Southen joined
[07:41] *** marmic joined
[07:48] *** ruz joined
[07:57] *** iblechbot joined
[08:10] *** Steve_p joined
[08:19] *** devogon joined
[08:34] *** dduncan joined
[08:48] *** elmex joined
[09:03] *** spx2 joined
[09:04] <spx2> hello all

[09:04] <spx2> i have a problem

[09:05] <spx2> i'm trying to make a script in perl using sockets

[09:05] <spx2> but it works only for 4 seconds

[09:05] <spx2> and then 

[09:05] <spx2> BOOOM!

[09:05] <spx2> it stops :(

[09:05] <spx2> http://justlinux.com/forum/showthread.php?p=862332#post862332

[09:05] <spx2> please help me

[09:11] *** xinming joined
[09:14] *** cdfh joined
[09:31] *** ozo_ joined
[09:37] *** ozo joined
[09:46] *** pnu joined
[09:49] *** Salzh joined
[09:50] *** b_jonas joined
[09:56] *** Psyche^ joined
[09:56] *** Psyche^ is now known as Patterner

[10:21] *** fglock joined
[10:25] <fglock> I've got algorithms for executing the begin-block in the right env, and for replaying the side effects in the run-time env

[10:26] <fglock> now I need some way to 'collect' the compile-time side-effects, in order to have something to replay...

[10:27] <fglock> possible side-effects are: imported subs, things that were modified in other packages

[10:27] <spx2> i need some help on this http://justlinux.com/forum/showthread.php?p=862332#post862332 

[10:29] <fglock> spx2: the best place to ask is perlmonks.org - please create an account so that you can have a proper dialog there

[10:29] <fglock> spx2: it's a nice place to learn perl

[10:30] <spx2> already did that

[10:30] <fglock> ah, I found it :)

[10:32] <spx2> what ?

[10:33] <fglock> I foud your question there - would you remove the <br/> in the code? it's difficult to download

[10:33] *** lumi_ joined
[10:35] *** Psyche^ joined
[10:39] <fglock> spx2: I guess that at some point, you have both sides waiting for input at the same time

[10:40] <spx2> that would mean the socket would be empty on that time,but it is not possible because one of the sides fills the sockets,so at the next moment one of them should have what to read from the sockets

[10:41] <spx2> i mean

[10:41] *** ruoso joined
[10:41] <spx2> you are probably right,but from how it was built it shouldn't come to an issue as you're poiniting out

[10:42] <fglock> spx2: try 'timeout' at the perlmonks search - it has some nice tips

[10:58] <svnbot6> r15030 | fglock++ | kp6 - added example of pure-perl compile-time env implementation

[11:00] <pasteling> "evalbot_r15029" at 194.145.200.126 pasted "Pugs build failure" (375 lines, 20.9K) at http://sial.org/pbot/22282

[11:13] *** luqui joined
[11:21] *** spx2 joined
[11:28] *** Psyche^ joined
[11:28] *** Psyche^ is now known as Patterner

[11:31] *** baest_ joined
[11:32] *** baest_ is now known as baest

[11:36] *** sunnavy joined
[11:37] <spx2> why does perl 6 even exist ?

[11:37] <spx2> is it because there is a 6 after 5 ?

[11:38] <spx2> i mean....really why does it exist ?

[11:38] <spx2> does it bring anything new ?

[11:38] <spx2> or better ?

[11:46] <avar> spx2: read the synosis

[11:48] <spx2> whats your oppinion avar ?

[11:48] <luqui> it does not exist...

[11:50] <spx2> lol @ luqui 

[11:52] *** GabrielVieira2 joined
[12:00] *** bwk joined
[12:01] *** idiotmax joined
[12:03] *** sunnavy joined
[12:14] *** chris2 joined
[12:15] *** bwk joined
[12:17] *** fglock joined
[12:20] *** bwk joined
[12:20] *** iblechbot joined
[12:23] *** baest joined
[12:24] *** ayrnieu joined
[12:25] *** Jaak joined
[12:34] <svnbot6> r15031 | kudra++ | Placeholders

[12:41] *** bonesss joined
[12:51] *** rindolf joined
[12:52] *** Limbic_Region joined
[12:55] *** kanru joined
[12:57] <masak> spx2: perl6 can be considered a way to put the learnings from perl5 into perl

[12:59] *** seano joined
[13:00] *** bonesss joined
[13:01] *** bonesss joined
[13:03] *** seano_ joined
[13:10] <svnbot6> r15032 | luqui++ | Solved 99 problems problem 27.

[13:10] *** seano joined
[13:16] <svnbot6> r15033 | luqui++ | Changed problem 27 to "require" problem 26, the same way 33 does for 32.

[13:17] *** fglock joined
[13:18] *** bonesss joined
[13:19] *** iblechbot joined
[13:22] <fglock> kp6 would need a definition of which begin-block side-effects should be recorded

[13:23] *** dduncan left
[13:23] <fglock> I'm still looking up for older discussions

[13:25] *** bonesss joined
[13:26] *** Psyche^ joined
[13:26] *** Psyche^ is now known as Patterner

[13:26] <spx2> how long has perl been around ?

[13:26] *** bonesss joined
[13:30] <luqui> 1989 or something like that?

[13:30] <svnbot6> r15034 | luqui++ | Wrote many more tests for problem 34.  The solution was wrong, and just happened to work correctly for the test

[13:30] <svnbot6> r15034 | luqui++ | (turns out that totient(10) = pi(10)  where  pi(n) is the number of primes less than n).

[13:32] *** Psyche^ joined
[13:32] <svnbot6> r15035 | luqui++ | And... fixed problem 34.

[13:35] <fglock> does running 'use' at BEGIN means that the precompiled code must have already included all modules - and there is no linking work left for the runtime?

[13:35] <svnbot6> r15036 | luqui++ | Forgot the special case phi(1) = 1.

[13:37] <fglock> that is, use'd modules are statically linked

[13:40] <luqui> not necessarily...

[13:40] <svnbot6> r15037 | luqui++ | Solved 99 problems problem 35.

[13:40] <fglock> maybe 'use', 'export' are special in some way

[13:41] <luqui> though I suppose so, since you do need to have compiled the used module at the using module's compile time

[13:43] *** Psyche^ is now known as Patterner

[13:44] <Limbic_Region> eval: my @foo = (1,2,3); my @bar = (4, 5, 6); my $bit = 1; push ($bit ? @foo : @bar), (7, 8, 9); @foo;

[13:44] <buubot> Limbic_Region: Error: Type of arg 1 to push must be array (not null operation) at eval line 1, near "@bar)"  

[13:44] *** pnu joined
[13:45] <luqui> eval: my @foo = (1,2,3); my @bar = (4, 5, 6); my $bit = 1; push +($bit ? @foo : @bar), (7, 8, 9); @foo;

[13:45] <buubot> luqui: Error: Type of arg 1 to push must be array (not null operation) at eval line 1, at EOF  

[13:45] <Limbic_Region> luqui - you might not want to trust buubot and try it yourself from command line

[13:45] * Limbic_Region doesn't have that ability ATM

[13:46] <luqui> buubot is correct

[13:46] <luqui> eval: my @foo = (1,2,3); my @bar = (4, 5, 6); my $bit = 1; push @{$bit ? \@foo : \@bar), (7, 8, 9); @foo;

[13:46] <buubot> luqui: Error: syntax error at eval line 1, near "@bar)" Missing right curly or square bracket at eval line 1, at end of line syntax error at eval line 1, at EOF  

[13:46] <Limbic_Region> eval: my @foo = (1,2,3); my @bar = (4, 5, 6); my $bit = 1; push (($bit ? @foo : @bar)), (7, 8, 9); @foo;

[13:46] <buubot> Limbic_Region: Error: Type of arg 1 to push must be array (not null operation) at eval line 1, near "))"  

[13:46] <luqui> eval: my @foo = (1,2,3); my @bar = (4, 5, 6); my $bit = 1; push @{$bit ? \@foo : \@bar)} (7, 8, 9); @foo;

[13:46] <buubot> luqui: Error: syntax error at eval line 1, near "@bar)"  

[13:47] <luqui> eval: my @foo = (1,2,3); my @bar = (4, 5, 6); my $bit = 1; push @{$bit ? \@foo : \@bar} (7, 8, 9); @foo;

[13:47] <buubot> luqui: Error: syntax error at eval line 1, near "} ("  

[13:47] <luqui> ugh

[13:47] <luqui> eval: my @foo = (1,2,3); my @bar = (4, 5, 6); my $bit = 1; push @{$bit ? \@foo : \@bar}, (7, 8, 9); @foo;

[13:47] <buubot> luqui:  6 

[13:47] <luqui> eval: my @foo = (1,2,3); my @bar = (4, 5, 6); my $bit = 1; push @{$bit ? \@foo : \@bar}, (7, 8, 9); "@foo";

[13:47] <buubot> luqui:  1 2 3 7 8 9 

[13:47] <luqui> hahahaha! finally!

[13:47] <Limbic_Region> luqui - did you see the perlmonks node that is making me test this?

[13:47] <b_jonas> heh, the http://www.perlmonks.com/?node_id=594109 thing

[13:47] *** mj41_____ joined
[13:47] *** penk joined
[13:47] *** mj41_____ is now known as mj41

[13:48] * luqui doesn't read perlmonks

[13:48] *** cdfh_ joined
[13:49] <Limbic_Region> well, the thing is, the reference to the array isn't needed

[13:49] <luqui> wow... very strange

[13:49] <luqui> eval: my @foo = (1,2,3); my @bar = (4, 5, 6); my $bit = 1; push @{$bit ? @foo : @bar}, (7, 8, 9); "@foo";

[13:49] <buubot> luqui:  1 2 3 7 8 9 

[13:49] <luqui> it's as if @{} imposes referential context or something

[13:50] <Limbic_Region> so I was wondering if the deref was needed at all

[13:50] <luqui> much like \($bit ? @foo : @bar)

[13:50] <Limbic_Region> eval: my @foo = (1,2,3); my @bar = (4, 5, 6); my $bit = 1; push $bit ? @foo : @bar, (7, 8, 9); @foo;

[13:50] <buubot> Limbic_Region: Error: Type of arg 1 to push must be array (not null operation) at eval line 1, at EOF  

[13:50] <luqui> I don't know what this null operation it's talking about is

[13:51] <fglock> I wonder if building the target program in the env and then serializing to .perl would make sense

[13:51] *** thepler joined
[13:52] <fglock> smalltalk does something like this, right?

[13:52] <Limbic_Region> eval: my @foo = (1,2,3); my @bar = (4, 5, 6); my $bit = 1; push {$bit ? @foo : @bar}, (7, 8, 9); @foo;

[13:52] <buubot> Limbic_Region: Error: Type of arg 1 to push must be array (not single ref constructor) at eval line 1, at EOF  

[13:53] *** devogon joined
[13:53] <Limbic_Region> whatever, I have abused the channel enough

[13:54] <fglock> and then, compile-time to run-time transition is just 'suspended execution'

[13:54] *** chris2 joined
[13:55] <fglock> lunch &

[14:12] *** seano_ joined
[14:12] <svnbot6> r15038 | luqui++ | Solved 99 problems problem 49.

[14:16] *** GabrielVieira2 is now known as GabrielVieira

[14:17] *** gnuvince left
[14:17] *** cdfh joined
[14:23] *** cdfh_ joined
[14:29] *** nipotan is now known as nipotaway

[14:33] *** cdfh joined
[14:38] *** cdfh_ joined
[14:54] *** buetow joined
[14:54] <svnbot6> r15039 | kudra++ | Posted version

[14:55] *** cdfh joined
[15:02] *** bonesss joined
[15:04] *** cdfh__ joined
[15:05] *** fglock joined
[15:06] *** vel joined
[15:07] *** yves_ joined
[15:08] *** vel joined
[15:15] *** cdfh joined
[15:23] *** cdfh_ joined
[15:26] *** hexmode joined
[15:28] *** cdfh joined
[15:32] *** weinig|away is now known as weinig

[15:32] <fglock> re env dump - Data::Dump::Streamer can't work out nested closures

[15:39] <luqui> fglock, really? :-(

[15:40] <svnbot6> r15040 | luqui++ | w00t, solved 99 problems problem # 98.

[15:41] <luqui> perl 6 is a pretty nice language to program in

[15:42] <luqui> it would be nicer if pugs didn't have those little idiosyncracies...

[15:42] <luqui> (but there are way fewer of them than a year ago or so)

[15:43] *** cdfh joined
[15:48] *** jferrero joined
[15:52] <Limbic_Region> fglock - do you have a test case, I will be sure demerphq and diotalevi have it fixed if possible soonish

[15:53] <Limbic_Region> @tell fglock if you have a test case for Data::Dump::Streamer failing on nested closures let demerphq or diotalevi know and I am sure they will fix it soonish if possible

[15:55] <luqui> it'd be nice if lambdabot would just say "ok, I'll tell him"

[15:55] <luqui> as an error check to catch yourself if lambdabot is not in the room

[15:55] <luqui> like now

[15:56] <Limbic_Region> luqui - it does say "consider it noted"

[15:56] <luqui> ahh, good

[15:56] <Limbic_Region> that's how I knew there was a problem

[15:57] <luqui> gut

[15:58] * Limbic_Region wanders off to a $meeting

[15:58] *** cdfh_ joined
[16:00] <pasteling> "fglock" at 201.35.169.13 pasted "problem with dumping nested closures" (22 lines, 759B) at http://sial.org/pbot/22293

[16:00] <fglock> the problem is, all variables are created in the same pad

[16:01] <fglock> and it uses variable renaming, instead of shadowing

[16:01] *** lambdabot joined
[16:04] <fglock> anyway, I'm not convinced that a disassembler is the best solution for passing env

[16:10] *** agentzh joined
[16:10] * agentzh is writing a Parse::RecDescent that emits C# code.

[16:11] <luqui> doesn't C# already have several parser generators?

[16:11] <agentzh> i'm wondering how difficult it would be for miniperl6 to emit C#

[16:11] <agentzh> luqui: just for fun ;)

[16:12] <luqui> fair enough :-)

[16:12] <agentzh> C# 2.0's closure support helps a lot.

[16:13] <luqui> oh, with that it might be pretty easy to get mp6 to emit C#

[16:13] <agentzh> yes! i'm thinking about that too!

[16:14] <agentzh> so i take the P::RD on C# as an excercise.

[16:14] <agentzh> *exercise

[16:14] <luqui> agentzh, you could try L::AG

[16:14] <luqui> that needs closures up the wazoo

[16:14] <agentzh> luqui: i'm already a L::AG user. :)

[16:15] <fglock> agentzh: I can help you

[16:15] <agentzh> fglock: oh!

[16:15] <fglock> agentzh: it would need some native libs

[16:15] <agentzh> that will be great!

[16:15] * agentzh is listening

[16:16] <fglock> take a look at the existing lib/MiniPerl6/*/Emitter.pm modules

[16:16] <agentzh> aye

[16:16] <luqui> agentzh, I was talking about porting L::AG to C# :-)

[16:16] <agentzh> i see the perl 5 emitter emits code that depends on the perl 5 runtime.

[16:16] <fglock> this is where the AST is translated into target source code

[16:16] <agentzh> fglock: i know this part.

[16:17] <agentzh> luqui: i knew. :)

[16:17] *** cognominal joined
[16:17] <agentzh> but i don't quite understand the algorithms used by miniperl6.

[16:17] <agentzh> so i should read the source first.

[16:17] <fglock> agentzh: it depends on what C# runtime already has - you can emit everything into subroutine calls, or you can inline code

[16:18] <fglock> you can dump the ast tree - see one of the controller scripts

[16:18] <agentzh> fglock: thanks. i will. :)

[16:18] <agentzh> fglock: the performance of the miniperl6 compiler looks quite good.

[16:19] <agentzh> it didn't take very long to bootstrap it using perl 5

[16:19] <agentzh> fglock: if i have problems in understanding the miniperl6 source, i'll let you know. :)

[16:20] <fglock> ok!

[16:20] <agentzh> :)

[16:20] <agentzh> luqui: re L::AG

[16:20] <agentzh> i used that to implement a program prover in the last year.

[16:21] <luqui> cool!

[16:21] <agentzh> it's great for transforming ASTs.

[16:21] <agentzh> and my prover has proved all the examples in our textbook.

[16:21] *** nipra joined
[16:21] <luqui> well, that is the idea.  I think we can do way better than AGs for transforming ASTs, I'm just not how

[16:21] <luqui> by prove, do you mean...

[16:22] <agentzh> prove the programs' correctness.

[16:22] <luqui> as in prove that they terminate?

[16:22] <agentzh> given a program source and a spec. compare these two automatically.

[16:22] <luqui> oh wow

[16:22] <luqui> very nice

[16:22] *** spx2 joined
[16:22] <luqui> what did you use to write the spec?

[16:22] <agentzh> a math-like language.

[16:23] <agentzh> i was using the Maple software to do the maths.

[16:23] <spx2> i need help with regex

[16:23] <luqui> oh, interesting

[16:23] <spx2> perl doesnt want to do but the first line !

[16:23] <spx2> what do i do ?

[16:23] <luqui> spx2, example?

[16:24] <fglock> agentzh: humm - would you like to work on kp6 devel? it's the next step towards 6-on-6

[16:24] <agentzh> luqui: my #1 complaint about L::AG is its performance

[16:24] <agentzh> fglock: verily.

[16:24] <luqui> agentzh, yeah, the lazy approach does have a few drawbacks

[16:24] <agentzh> fglock: but i'm still getting my head around your cool stuff. :)

[16:24] <luqui> when comparing to the "compiled" approach in the literature

[16:25] <fglock> I'm writing the specifications

[16:25] <luqui> :-)

[16:25] <spx2> $ipadress = `ipconfig`;$ipadress =~ /IP(.*)/s;print $1. "\n" ;

[16:25] <agentzh> fglock: cool

[16:25] <spx2> im expecting this to get the line "IP Address. . . . . . . . . . . . : xx.xx.xx.xx"

[16:25] <agentzh> fglock: kp6 compilers generate mp6 code, no?

[16:26] <spx2> why is it not getting it ?

[16:26] <spx2> i mean i think i wrote it all correct...

[16:26] <spx2> $ipadress has at first multiple lines

[16:26] <spx2> can the regex parse all of it ? it seems to stump on the first line

[16:26] <luqui> spx2, well.. you will get IP........ to the end of the string

[16:26] <spx2> luqui: i dont

[16:27] <luqui> that's a little strange

[16:27] <luqui> do you check that it matches?

[16:27] <agentzh> luqui: is it possible to pre-compile the L::AG grammar?

[16:27] <clkao>  

[16:27] <fglock> agentzh: mp6 is just one of the backends - it's being called "desugared p6"; other backends may need different desugarings

[16:27] <agentzh> fglock: gotcha.

[16:28] <luqui> agentzh, not with this algorithm.  the time consuming part is annotating the tree with the computation closures

[16:28] <luqui> (that's my guess at least)

[16:28] <spx2> luqui: i get a pattern from the text,to extract

[16:28] <agentzh> luqui: oh!

[16:29] <luqui> and after that is done, it should be just as fast as the compiled approach (modulo sub call overhead)

[16:29] <agentzh> luqui: i'm looking forward to that. :)

[16:30] <luqui> er, no...

[16:30] <luqui> after L::AG annotates the tree, then its algorithm is just as fast as the compiled approach

[16:30] <luqui> so if it's running slow, I guess that it's taking too much time annotating..

[16:30] <agentzh> hmm

[16:31] <agentzh> i've profiled L::AG, but forgot its bottle-neck...

[16:31] <agentzh> luqui: and there's a bug i've encountered.

[16:32] <luqui> agentzh, I would like to see your data.  I haven't run it on any big data structures

[16:32] <agentzh> i found myself cloning the trees over and over again.

[16:32] <agentzh> two grammars can be applied to the same data structrues?

[16:32] <agentzh> *can't

[16:32] <luqui> that is true

[16:32] <luqui> wait...

[16:33] <luqui> no, that shouldn't be true

[16:33] <agentzh> luqui: i'll send some data to you when i have some time.

[16:33] <luqui> okay, thanks

[16:33] <luqui> I'll look at that bug

[16:33] <agentzh> excellent!

[16:33] <agentzh> 0:35 AM here. G'night &

[16:34] <luqui> night

[16:34] <agentzh> :)

[16:35] *** weinig is now known as weinig|away

[16:37] *** GabrielVieira2 joined
[16:40] <fglock> I guess I can build a 'closure' object that knows how to dump itself

[16:41] <fglock> but there is still the problem of dumping use'd CPAN modules

[16:41] <fglock> I don't think that's possible without 5-on-6

[16:43] <fglock> one possible solution is, perl5 modules are loaded twice - at compile and runtime

[16:46] <TimToady> assuming you can be sure of getting the same one...

[16:46] <TimToady> or at least one that has the same interface

[16:47] <TimToady> Ada was always big on separating the interface from the implementation so you could swap out the implementation without changing the interface

[16:48] <fglock> TimToady: I'm a bit lost regarding the begin block implementation - specifically, how to separate compile/run time

[16:50] <fglock> I figured out several bits already - but saving BEGIN side-effects still looks difficult

[16:50] <TimToady> the reload trick should work find for Perl 6, because we guarantee that the user can't modify the used.

[16:51] <TimToady> and we also guarantee that modules installed in the library have version numbers

[16:52] <TimToady> so in an a.b.c the b theoretically guarantees a unique interface.

[16:54] <TimToady> and you already presumably know how to save your own closures, or you wouldn't a compiler...

[16:54] <luqui> TimToady, I've been programming in perl 6 recently...

[16:54] <TimToady> yes, I backlogged. :)

[16:54] <luqui> there were a few odd-feeling points

[16:54] <TimToady> all ears

[16:54] <luqui> but by far the largest one was that I couldn't tell when ((1,2),(3,4) had two elements and when it had four

[16:55] <luqui> s/)/))

[16:55] <TimToady> exactly the same as when (@foo,@bar) has 2 vs N

[16:55] <TimToady> a Capture won't decide that till it's bound

[16:56] <luqui> what about:  (1,(2,(3,4)))

[16:56] <luqui> is it possible for that to have three elements?

[16:56] <luqui> er..

[16:56] <TimToady> probably not

[16:56] <TimToady> forgot your outer parens there

[16:57] <TimToady> so ((1,2),(3,4)) is always going to be (1,2,3,4)

[16:57] <TimToady> because the , is list context maker

[16:57] <luqui> okay, good!

[16:57] <luqui> pugs is wrong then

[16:57] <luqui> (well, I'm not sure how much I like that from the language perspective, but at least it's consistent)

[16:58] <luqui> how does one make List objects?

[16:58] <TimToady> well, that's how I read it.  Audreyt may think of it differently.

[16:58] <TimToady> in which case we'll need to negotiate.

[16:59] <TimToady> Seq(1,2) I suppose

[16:59] <TimToady> but maybe that's different

[16:59] <luqui> hmm

[16:59] <TimToady> \(1,2) can function as a list

[17:00] <TimToady> 1 => 2 => 3 => 4 is a list in the Lisp sense...

[17:00] <luqui> but not in the (1 => 2 => 3 => 4) == 4 sense...

[17:00] <TimToady> right

[17:01] *** dmq joined
[17:01] <luqui> which one of the following takes the second column of a matrix:

[17:01] <luqui> @a[*][1] or @a[][1]

[17:01] <lambdabot> Unknown command, try @list

[17:02] <luqui> shutup lambdabot  :-)

[17:03] <luqui> (neither works in pugs, of course :-)

[17:04] <dmq> fglock?

[17:04] <TimToady> @a[*;1] would eventually be it, I think

[17:04] <lambdabot> Unknown command, try @list

[17:04] <TimToady> @tell yourself to shutup

[17:04] <lambdabot> Consider it noted.

[17:04] <luqui> TimToady, even if @a is just an AoA, not a shaped matrix?

[17:04] <TimToady> but S09 is not notably implemented yet

[17:05] <TimToady> I would think an array that discovered itself to have compound leaves would try to emulate shape

[17:06] *** seano joined
[17:06] <luqui> oh... kay

[17:07] <TimToady> [][] notation is hard to interpolate multidimensional slices into...

[17:07] <luqui> fair enough

[17:07] <luqui> (because the first [] has to return something...)

[17:08] <TimToady> and what does [*] return that would make [1] work right?

[17:08] <TimToady> without saying >>.[1]

[17:08] <luqui> a list potential (like a junction) :-)

[17:09] <luqui> I'd rather not go there ;-)

[17:09] <TimToady> well, that's essentially what the "for list(@x) < 2" was trying to do...

[17:10] <TimToady> but I don't see a real list comprehension syntax helping with [*][1] offhand

[17:10] <TimToady> the . boundary is pretty much limited to scalars in P6

[17:10] <luqui> uh huh...

[17:11] <TimToady> well, not scalars, items

[17:11] <TimToady> anyway, [*;1] syntax is supposed to be the way around that.

[17:11] <svnbot6> r15041 | fglock++ | kp6 - added proof-of-concept recursive closure dumper

[17:12] <fglock> dmq: pong

[17:12] <TimToady> a way, rather

[17:12] <dmq> hi.

[17:12] <dmq> l~r said you disagreed with the output of http://sial.org/pbot/22293

[17:12] <lambdabot> Title: Paste #22293 from "fglock" at 201.35.169.13

[17:12] <dmq> I was wondering why?

[17:12] <dmq> or point me at how i can read the log if you already said.

[17:13] <fglock> dmq: there are 3 pad levels, but the dump only shows one

[17:13] <dmq> yes, thats correct. 

[17:14] <dmq> there is no guarantee that you get back the exact same internal representation, just that it will function the same.

[17:14] <dmq> any other approach very quickly leads to madness.

[17:14] <TimToady> pun intended, I presume

[17:14] <fglock> dmq: I'm working around it

[17:15] <fglock> with madness and all :)

[17:15] <TimToady> if you need an exact representation of the original back out, only madprops will give it to you.

[17:16] <dmq> ah, i think its an NP-complete problem.

[17:17] *** maquis left
[17:17] <dmq> oh right, with MAD or in perl6 not, in Perl5 its er /hard/.

[17:17] *** spx2 joined
[17:19] <dmq> consider weird shit like my @subs; my ($x,$y,$z)=qw(x y z); for my $x ($x,$y,$z) { push @subs,sub { $x; eval $_[0] } } for my $y ($x,$y,$z) { push @subs,sub { $y; eval $_[0] } } for my $z ($x,$y,$z) { push @subs,sub { $z; eval $_[0] } } Dump(\@subs);

[17:19] <spx2> how do i get my own ip adress ? i've used with success `ipconfig` and then applied some regular expressions and got what i need(on Windows) ,but on Linux,i have a shell where im running the script and i am not allowed to do ifconfig,so what do i do ??????

[17:19] <fglock> dmq: this is my workaround so far: http://svn.pugscode.org/pugs/v6/v6-KindaPerl6/begin-block.pl

[17:20] <fglock> it allows you to build closures, execute code inside them, and then inspect the environment

[17:20] <dmq> and that code doesnt even cover all the cases :-)

[17:20] <fglock> dmq: not sure yet

[17:21] <TimToady> spx2: use the Socket module

[17:21] <fglock> it only needs to work for BEGIN blocks 

[17:21] <spx2> TimToady: what exactly in the socket module,thats what im trying to figgure out for the last 1 hour and 30m

[17:22] <dmq> The point is that with aliasing in the mix you can end up with some really bizarre cases.

[17:22] <spx2> TimToady: i found IO::Socket,Socket,Win32::Internet

[17:22] <spx2> TimToady: of wich win32 is not good

[17:22] <dmq> for instance, names that are the same that refer to different vars, names that are different that refer to the same vars, etc.

[17:22] <fglock> dmq: this is not supposed to happen at this level (desugared p6)

[17:23] <dmq> so in some situations is not clear to me that any given representation is necessarily correct, unless you have more info that name/sv_location

[17:23] <spx2> TimToady: ?

[17:23] <dmq> er, fglock, i didnt grok that comment.

[17:24] <fglock> dmq: this is generated code, so I can control what it gets

[17:26] <dmq> im speaking to the arbitrary issue of taking a set of code and closures and restoring it correctly.

[17:26] <TimToady> spx2: if you know your local machine's name, you can use gethostbyname

[17:27] <TimToady> but generally one just lets the machine assign your address for you when you're connecting, because you don't generally know which interface you're going to go out of, and the address depends on the interface.

[17:27] <dmq> i believe my code does restore it correctly, so long as "correctly" doesnt mean "topologicially identical". 

[17:27] <TimToady> once you're connected you can look up your own binding with getsockname

[17:28] <TimToady> shower &

[17:29] <fglock> dmq: I wonder what happens if the code is recursive (needs closure cloning)

[17:29] <luqui> ?whois spx2

[17:29] <lambdabot> Unknown command, try @list

[17:29] <luqui> sigh

[17:29] <spx2> luqui: in perl...

[17:30] <dmq> it should DTRT.

[17:30] <dmq> :-)

[17:32] <luqui> hmm.. it is possible (even likely) for a machine to have multiple IP addresses

[17:32] <luqui> so it is an ill-defined thing to do in general

[17:32] <luqui> you need to talk to your network card interface somehow...

[17:36] <spx2> luqui:..are you a noob ?

[17:37] <spx2> i just did this

[17:37] <spx2> $ipadress=`curl http://www.whatismyip.com/`;

[17:37] <spx2> $ipadress=~/Your IP Is (.*)<\/h1>/m;

[17:37] <spx2> print $1;

[17:37] <spx2> and i got what i needed

[17:37] <fglock> dmq: I'll make some experiments

[17:37] <luqui> spx2, most certainly, because the IP address that made a request comes with the packet that made it

[17:37] <fglock> but I think there may be problems with recursive subs

[17:38] <luqui> if a computer has two network cards, one of them will make the request

[17:38] <dmq> in code as hairy as DDS i wouldnt say that there isnt :-)

[17:38] <dmq> and i could imagine recursive subs being one place where it might be so

[17:39] *** ashleyb joined
[17:39] <luqui> spx2, but right now, my IP is 67.174.183.183, 192.168.0.100, and 127.0.0.1... which one do you want?

[17:40] <luqui> (I'm not saying you can't do what you're trying to do, I'm just trying to establish that the problem is tricker than a simple OS call or something)

[17:40] <luqui> *trickier

[17:41] <spx2> luqui: dude,im very practical , i dont have time for jokes,i meant the external one

[17:41] <luqui> spx2, which external one?  67.174.183.183 or 192.168.0.100

[17:41] <luqui> if I make a request to somebody on my LAN, the latter is probably what they're looking for

[17:42] <luqui> so you want the IP of my router?

[17:42] <luqui> that's even harder :-)

[17:42] <luqui> you might even have to parse whatismyip.com to get that...

[17:42] <spx2> luqui: DUDE, ALMOST ALL OF THE WORLD IS OUTSIDE YOUR LAN !

[17:42] <luqui> spx2, because ifconfig says my IP is 192.168.0.100

[17:42] <luqui> calm down.

[17:43] <spx2> luqui: i am calm

[17:43] <spx2> luqui: listen

[17:43] <spx2> luqui: say that i'm like some thousands of miles away

[17:43] <spx2> luqui: there is only *ONE* ip i'm intrested in from you !

[17:43] <luqui> okay

[17:43] <spx2> luqui: and that is most certainly the one on whatismyip.com

[17:44] <luqui> well, I think that's basically the only way you're going to get it

[17:44] <luqui> because my computer doesn't know that information without at least sending one packet

[17:46] <luqui> (as an example of why that is true, my router could get a new address from DHCP without telling me)

[17:46] <luqui> (unless telling me is part of the dhcp protocol, I'm not really sure actually)

[17:50] *** buetow joined
[17:52] *** mbradley joined
[17:53] *** bernhard joined
[18:01] *** fglock joined
[18:02] *** diotalevi joined
[18:06] *** silug joined
[18:08] *** ruoso joined
[18:18] *** GabrielVieira joined
[18:19] *** Jaak left
[18:23] *** weinig|away is now known as weinig

[18:27] *** GabrielVieira2 joined
[18:30] *** fglock joined
[18:34] *** justatheory joined
[18:42] <svnbot6> r15042 | fglock++ | kp6 - added a closure 'emitter' to the begin-block prototype

[18:43] <fglock> requiring a disassembler is not a reasonable requirement for 6-on-6

[18:43] <fglock> I'll try to find other solutions

[18:43] <TimToady> for your own closures, surely you have the original AST

[18:44] <TimToady> or at least "had" at some time in the past...

[18:44] <fglock> yes - I'm working on that direction...

[18:45] <TimToady> and anything imported just has to have a "true name" that you can relink to at run time.

[18:47] <fglock> I wonder if it would be useful to have the program dump'able at any time - as a side effect of having enough info available

[18:47] <TimToady> in fact, "is export" basically just makes a link to a name in a subpackage...

[18:48] <TimToady> the Smalltalkers would like that...

[18:48] <TimToady> but I'm not sure it's practical on every VM

[18:49] <fglock> basically, you have the source file, global variables, and the pads - only the stack is missing

[18:49] <fglock> but cps can take care of that

[18:49] <fglock> could

[18:50] <TimToady> you can't remember foreign stacks in any case, if you've called out to some other runtime that doesn't integrate with your cps

[18:51] <TimToady> which is why cps systems tend to shun outside "help", I suspect.

[18:52] <fglock> ah

[18:53] <TimToady> we could start a marketing campaign for "100% Pure Perl" I suppose, but it seems a bit unperlish...

[18:54] <TimToady> I suppose if you can replay all the API events to a non-cps system you can fake a continuation.

[18:54] <TimToady> ignoring side effects.

[18:55] <TimToady> and assuming you could restart the API in a consistent state.

[18:55] <TimToady> well, not today's problem.

[18:56] <fglock> sure :)

[18:58] <TimToady> anyway, assuming all imports are done with true names, a re-use at runtime only has to do a require, not an import.

[18:58] *** penk joined
[18:59] <TimToady> course, the whole point of pragmas is to cheat...

[19:01] <TimToady> but maybe we can help them "cheat fair"

[19:05] <fglock> the 'use' implementation probably needs to install hooks to do the right thing at INIT

[19:06] <TimToady> and I'm saying that hopefully the right thing is just a require

[19:07] <TimToady> require just says "make sure the package aka (true names) are populated"

[19:08] <TimToady> normal importation should have mapped all aliases to package symbols that require will bring in

[19:08] <TimToady> so nothing needs to be realiased at run time.

[19:09] <fglock> you mean, the generated code is something like this?  require X; *s = \&X::s;

[19:09] <TimToady> that implies to me that "use Foo" resolves to "use Foo-1.2.3-JRANDOM" at compile time

[19:10] <TimToady> well, P6 does lexical imports by default, not typeglobs

[19:11] <fglock> what does it desugars to? require Foo-1.2.3-JRANDOM; s := X::s

[19:11] <fglock> how do you import a sub?

[19:12] <TimToady> I'm saying that if you have something aliased to X::s at compile time, the dump of that structure should preserve the alias without having to regenerate it a run time.

[19:12] <fglock> I mean, what does the dump would look like?

[19:14] <TimToady> how do you dump lexicals currently with their latest compile-time value?

[19:14] <fglock> I call a subroutine that is defined inside the lexical scope

[19:15] <fglock> an 'inspector' sub

[19:15] <TimToady> so if you've got "my $importsub = \&X::s" there...

[19:16] <TimToady> it just needs to find a way at run time to remap $importsub back to the "X::s" true name

[19:16] <TimToady> aka symbolic reference

[19:17] <TimToady> so basically linking is turning symbolic refs back into hard ones, I guess.

[19:17] <fglock> what is the p6 syntax for this? "my $importsub = \&X::s"

[19:17] <TimToady> phone &

[19:18] <kolibrie> pesky phones

[19:19] <TimToady> my &importsub := &X::s;

[19:20] <fglock> hmm - when to use ::= ?

[19:20] <TimToady> we might have to limit the exportation of anonymous subs though, I suppose.

[19:20] <TimToady> or assign them an obfuscated true name for linking purposes.

[19:21] <TimToady> for now we can just make "sub is export {...}" illegal

[19:21] *** renormalist joined
[19:22] <TimToady> and if there's a custom import sub, it can handle its own semantics presumably...

[19:23] <fglock> I guess I need to start implementation - I'd like to have something runnable to experiment with

[19:23] <TimToady> including, presumably handing the user a thunk to poke into the INIT queue.

[19:24] <TimToady> for now assume you don't have to save anything anonymous across a use boundary.

[19:25] <TimToady> that's the main point of package namespaces, after all--to hold the public interface

[19:25] <luqui> why can't you use Data::Dump::Streamer as a catch-most method?

[19:26] *** elmex joined
[19:26] <fglock> luqui: one reason is that it renames variables

[19:27] <luqui> hmp

[19:27] <fglock> another reason is to avoid cheating - this is 6-on-6, and it doesn't have a disassembler

[19:28] <luqui> ahh

[19:28] <luqui> okay, that makes sense

[19:29] <fglock> v6.pm does use DDS

[19:33] *** beppu_ is now known as beppu

[19:34] <fglock> I guess I can close the kp6 spec now, with: lexical subs and classes; metamodel interface; begin blocks

[19:35] <TimToady> if you want to tweak it later, we might just let you.  :)

[19:35] <fglock> oh, and containers

[19:38] <dmq> it does?

[19:38] <dmq> patches welcome :-)

[19:38] *** Jedai joined
[19:38] <dmq> if you can hold your nose long enough to patch it.

[19:39] <dmq> ah if only i knew then what i know now....

[19:39] <TimToady> I would think the regex engine would have burned out your nose completely.  :)

[19:39] <dmq> heh

[19:39] <fglock> dmq: you are talking about DDS? 

[19:40] <dmq> yes

[19:40] <dmq> you could have pushed me over with a feather when i read you were using it for v6.pm

[19:40] <fglock> it's quite a nice module

[19:40] <fglock> the problem is me - I want it to do too much :)

[19:41] <dmq> the problem is the code is heaping pile of steaming dung so making it do what you want is infinitely harder than it should be.

[19:42] <dmq> i mean, its dung that i know and love, and raised from a little mostly not smelly cow-patty, but its still dung.

[19:43] <fglock> heh - I wonder how v6.pm even works, with it's half-hundred dependencies

[19:43] <dmq> anyway, im very glad that you like it, and that its being used for the v6 stuff.

[19:43] <fglock> DDS handles the .perl method

[19:45] <dmq> i keep thinking i aught to rewrite it in C/XS

[19:46] <fglock> dmq: I wonder if you'd write a Dumper for mp6...

[19:47] <fglock> this would force the compiler to expose enough info

[19:48] <TimToady> *cough* madprops *cough*

[19:48] <fglock> and it's needed for serializing begin->init blocks in kp6

[19:48] *** lisppaste3 joined
[19:48] <TimToady> I presume you mean a Dumper written in mp6

[19:49] <fglock> TimToady: is there some text about madprops? I'd like to know what kind of annotations are needed

[19:49] <fglock> TimToady: yes - written in mp6

[19:50] <fglock> mp6 is "clean-room"-ish

[19:50] <TimToady> madprops are strictly a p5 thing to work around the fact that the compiler throws away far too much info

[19:51] <TimToady> and the fact that if you simply tell p5 not to throw away the info, it either breaks the compiler completely or changes the semantics

[19:52] <dmq> sorry was on the phone.

[19:53] <TimToady> the madprops approach is to simply attach the information anywhere close by that will be preserved, and then run a postprocessor to move the info back to the right spot in the tree.

[19:53] *** hexmode left
[19:53] <TimToady> it's not an approach you want to design into anything on purpose...

[19:54] <dmq> fglock: id be glad to consider it once im wrapped up with the "get stuff done before perl 5.10 is out" mode.

[19:55] <fglock> dmq: that would be nice

[19:55] <dmq> and timtoady: regarding our last brief conversation, im sorry i wasnt trying to drag out an analysis of the design of p5's regex engine. i was just trying to get insight into what you had in mind as the work around.

[19:56] <dmq> anyway, i really dont mean to annoy you with my interest/questions/schemes for the perl5 re. sorry if i have.

[19:56] <TimToady> np, just wish I was several more people...

[19:57] <dmq> heh. dont we all (on multiple levels)

[19:57] <dmq> :-)

[19:57] <TimToady> occasionally I also wish I was smarter.

[19:57] <fglock> home &

[19:58] <TimToady> I'm either the smartest stupid person or the stupidest smart person you'll ever meet.  :)

[19:58] <fglock> TimToady: thanks

[19:58] <TimToady> welcome

[19:58] <dmq> anyway, ive done some analysis on how to do the perl6 style var bindings. im not there yet but you never know.

[19:58] <fglock> oh, and I'd like to meet you sometime :)

[19:59] <dmq> fglock: have a good one.

[19:59] * Limbic_Region refrains from mentioning "idiot savant"

[20:01] <TimToady> well, my brain is definitely in sideways from everyone else's, in any case.

[20:01] <Limbic_Region> dmq - out of curiosity, has there been talk on p5p or elsewhere about 5.12 once 5.10 is released?

[20:02] <dmq> beyond that Dave Mitchel will be the pumpking not that ive heard.

[20:02] <dmq> timtoady: i'm happy to follow in your brains footsteps. sidewise or not, it goes interesting places.

[20:03] <dmq> l~r: i think the general thing is we just want to get perl 5.10 out now.

[20:03] <Limbic_Region> I agree

[20:03] <dmq> freaping creaturities

[20:03] <TimToady> except my brain usually refused to cooperate in telling me where *it's* been...

[20:03] <Limbic_Region> but I would hate to see 5.12 take as long to release as 5.10 was from 5.8

[20:03] <dmq> timtoady: do like the rest of us and follow the breadcrumbs. ;-)

[20:04] <TimToady> things just bubble up, and I say them, and they're usually true enough to pass for truth.

[20:04] <Limbic_Region> dmq - you didn't know TimToady's brain is a multi-headed hydra - one of the heads is constantly eating the bread crumbs

[20:05] <dmq> hrm, i guess i dont really know how much of what im doing is TimToadys, Henry Spencers or Ilya's footsteps. probably all of them. :-)

[20:07] <TimToady> having known both of the others individually, I can't imagine how they could interact in person...

[20:07] <dmq> heh

[20:08] <TimToady> I suppose if they stuck to math they'd be fine.

[20:10] <Limbic_Region> TimToady - have you considered what you want to do after Perl 6?

[20:10] <TimToady> I want to see if Perl 6 stops first.  :)

[20:11] <TimToady> but the world is full of many interesting things

[20:11] <TimToady> I'm doing Perl 6 by choice, not by necessity.

[20:12] <Limbic_Region> TimToady - ok, assuming Perl 6 is released to the world and it doesn't stagnate in say 3-5 years, have you considered what of those interesting things you might like to pursue?

[20:12] <TimToady> my brain doesn't work that way.  I'm sure I'll be happy with whatever bubbles up at the time.

[20:13] <TimToady> and I will probably find that it was both surprising and completely expected

[20:14] <Limbic_Region> I never really thought about it but my life so far has been pretty much that way

[20:14] <Limbic_Region> though I often think about what I would do when I win the lottery

[20:15] <TimToady> for my wife it's the Reader's Digest Sweepstakes...

[20:15] <TimToady> are you planning to win the lottery?

[20:15] <Limbic_Region> where often = once or twice a year

[20:15] <Limbic_Region> TimToady - yes, though I haven't quite figured out when yet

[20:17] <Limbic_Region> it isn't responsible to go and do something as life altering as winning the lottery if you haven't bothered to think through how you are going to let it benefit your friends, family, and mankind in general

[20:18] *** GabrielVieira2 is now known as GabrielVieira

[20:18] <TimToady> with me I occasionally hope for a MacArthur grant, but I know I'm probably perceived as far to conservative (not to mention old) to get one from them.  Now I wouldn't be surprised if a certain other lady who hangs around here managed to pull one down.

[20:18] <Limbic_Region> as soon as I have it all figured out though, funding a handful of hackers working on perl full time is on the list so I will be sure to let you know

[20:19] <luqui> that'd be nice

[20:19] * luqui is off to an informal interview at the moment :-)

[20:19] <Limbic_Region> actually, with you I had considered buying your family exceptional health insurance

[20:20] <TimToady> my other option is for a billionaire to leave me some of the estate.

[20:20] <TimToady> but my estate-planning department is not well staffed.

[20:22] * Limbic_Region realized that lag of his client may have implied that his consideration of health coverage was intended for luqui not TimToady

[20:22] *** buetow joined
[20:22] * luqui figured otherwise...

[20:22] <luqui> :-)

[20:23] <Limbic_Region> in any case, I pretty much let things happen as they happen and am pretty happy with the results but also occassionally consider what would happen if his life were suddenly altered in such a way as winning the lottery

[20:24] <TimToady> well, I agree with Miles Vorkosigan.  It's important to me to win with the hand I was dealt.

[20:49] *** Khisanth joined
[20:50] *** Vex joined
[21:07] *** ludan joined
[21:10] *** bonesss joined
[21:11] *** Aankhen`` joined
[21:24] *** christopher joined
[21:29] <christopher> How is typeglob assignment written now? (for redefining subroutines)

[21:32] <gaal> there are no typeglobs. you can access the symbol table with ThisPackage::<&foo> = sub ($moose) { ... }

[21:33] <gaal> see L<S02/Names>

[21:33] <gaal> := is probably better there.

[21:33] <christopher> is it just ::<&foo> for the current package?

[21:34] <gaal> no, OUR::<&foo> should work though.

[21:34] <gaal> (not in pugs yet though, probably!)

[21:35] <christopher> indeed

[21:35] <christopher> yay, simply &foo := &bar seems to work

[21:35] <christopher> (but not non-binding =)

[21:36] <christopher> thanks.  I wonder if it will work with regexes, rules, etc. too.

[21:36] <gaal> rules are methods.

[21:36] <gaal> grammars are classes.

[21:37] <christopher> but are they implemented that way yet? ::)  (I'm using PGE)

[21:37] *** jferrero joined
[21:37] <gaal> you'll have to try and see :) I don't know

[21:37] *** weinig is now known as weinig_

[21:38] <gaal> also, I'd better be getting to bed...

[21:38] <christopher> ok.  know where a test might belong?;

[21:38] *** weinig_ is now known as weinig

[21:38] <gaal> I think there's a sytable.t somewhere

[21:38] <gaal> *symtable

[21:38] <gaal> t/syntax/symbol_table.t

[21:39] <christopher> doesn't seem to test binding, but that's probably a fine place

[21:39] <gaal> cool

[21:39] <gaal> good night :)

[21:39] <christopher> good night

[21:39] *** larsen_ joined
[21:49] *** buetow joined
[21:51] <dmq> see TimToady, why couldnt you have invented make (as well)? the world would have been a much better place

[22:00] *** renormalist left
[22:06] *** Limbic_Region joined
[22:12] *** diotalevi left
[22:13] *** diotalevi joined
[23:01] *** buubot joined
[23:07] <svnbot6> r15043 | malon++ | t/operators/binding/subs.t - tests for subroutine and token rebinding

[23:10] *** mbradley joined
[23:23] *** Arathorn joined
[23:23] * Arathorn surfaces for old time's sake

[23:23] <Arathorn> don't suppose anyone's a) awake, b) still familiar with Judy?

[23:27] *** dduncan joined
[23:27] <dmq> im awake, but know only a very little about judy. sorry

[23:28] *** mako132_ joined
[23:29] <Arathorn> dmq: fair enough - thanks for acking, eitherway :)

[23:29] * Arathorn is trying to work out why Judy doesn't compile under c++, and #perl6 is the only place I know of who are savvy with it

[23:29] *** mbradley is now known as mbradley|bbl

[23:37] *** bucky joined
[23:37] <Khisanth> not #haskell?

[23:43] <Arathorn> mm, point

[23:43] * Arathorn tries there

[23:56] <Limbic_Region> Judy isn't a haskell thing Khisanth

[23:58] <Limbic_Region> Khisanth - http://judy.sourceforge.net/

[23:58] <lambdabot> Title: Judy Arrays Web Page

