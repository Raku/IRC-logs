[00:28] *** gnuvince_ joined
[00:35] *** Psyche^ joined
[00:44] *** gnuvince_ left
[00:50] *** Psyche^ is now known as Patterner

[01:13] *** fridim joined
[01:35] *** yxam joined
[01:40] *** dolmans joined
[01:43] *** offby1` joined
[01:50] *** mr_ank joined
[01:51] *** offby1` is now known as offby1

[01:55] *** Psyche^ joined
[02:01] *** Psyche^ is now known as Patterner

[02:07] *** theCore joined
[02:13] *** esstone joined
[02:13] *** pbuetow joined
[02:17] *** [particle] joined
[02:28] *** Aankh|Clone is now known as Aankhen``

[02:32] *** rindolf joined
[02:32] <rindolf> Hi all.

[02:32] <thorat> hello

[02:32] <rindolf> Hi thorat 

[02:32] <rindolf> thorat: what is your claim to fame?

[02:33] <thorat> uh, none

[02:34] <thorat> and you? ;)

[02:34] <rindolf> thorat: http://www.shlomifish.org/

[02:34] <lambdabot> Title: Shlomi Fish' Homepage

[02:34] <rindolf> thorat: that contains links to everything.

[02:35] <rindolf> thorat: do you have a Pugs commit bit?

[02:35] <rindolf> lambdabot: hi.

[02:35] <rindolf> lambdabot is impolite.

[02:36] <thorat> nope

[02:36] <thorat> how big is it now?

[02:36] <thorat> pugs that is?

[02:37] <thorat> I'll take a look and see if I can cruft it up a little bit ;)

[02:38] <rindolf> thorat: there's a lot of code there.

[02:38] <rindolf> They are in over r10K

[02:38] <thorat> yes, and Haskell

[02:39] <thorat> that means 1000K of equivalent C right? 

[02:39] <rindolf> 15446

[02:39] <rindolf> thorat: who knows.

[02:39] <rindolf> But maybe.

[02:39] <rindolf> Of course, Haskell has some implementation problems.

[02:39] <rindolf> ghc can only be compiled by a recent version of itself.

[02:40] <thorat> well I've managed to compile it; and there are nightly's as well

[02:40] <thorat> if you really need the bleeding edge

[02:42] <rindolf> I know.

[02:42] <thorat> and 6.6 is installed on my debian

[02:42] <rindolf> But I also found Haskell impractical in many respects.

[02:42] <rindolf> Some algorithms cannot be implemented in it well.

[02:42] <rindolf> thorat: I have 6.6 here on MDV Cooker too.

[02:42] <thorat> the stateful ones I guess

[02:42] <rindolf> thorat: yeah.

[02:43] <thorat> the imperative ones that is

[02:43] <rindolf> Or ones that use array.

[02:43] <rindolf> I got you.

[02:43] <thorat> I've not used Haskell at all, but read a lot about it; lot's of papers

[02:43] <thorat> lots

[02:44] <rindolf> thorat: I wrote stuff in Haskell.

[02:44] <thorat> I'm like that; I read a lot about programming but don't really program much outside of work

[02:44] <rindolf> Nothing too serious, but stilll.

[02:44] <rindolf> thorat: what do you do at work?

[02:45] <thorat> at the moment, I'm writing Perl; but I'm mostly at school this winter

[02:45] <thorat> before that I was programming Pocket PC

[02:45] <thorat> win32 api programming in C++

[02:46] <rindolf> Heh.

[02:46] <rindolf> Yes, I remember the Win32 API programming.

[02:47] <rindolf> I once programmed a clock for it for the Technion.

[02:47] <rindolf> Got 99% at that course.

[02:47] <thorat> ok

[02:47] * thorat just googled Technion

[02:48] <thorat> yes, it's more fun than MFC IMO

[02:49] <thorat> it's a functional API, really

[02:50] <rindolf> thorat: http://www.shlomifish.org/philosophy/computers/education/opinion-on-the-technion/

[02:50] <lambdabot> Title: My opinion on the Technion, http://tinyurl.com/28lpby

[02:51] *** araujo joined
[03:24] *** bonesss joined
[03:33] *** SubStack joined
[03:35] <pasteling> "dustpyle_x2" at 209.169.127.17 pasted "trying to print '#' in front of each line of a file" (8 lines, 121B) at http://sial.org/pbot/23909

[03:46] *** Lorn_ joined
[03:51] *** lisppaste3 joined
[03:58] *** vel joined
[04:05] *** REPLeffect joined
[04:28] *** justatheory joined
[04:29] *** prly joined
[05:24] *** jisom joined
[05:27] *** amnesiac joined
[05:27] *** REPLeffect_ joined
[05:32] *** prly_ joined
[05:43] *** prly__ joined
[05:55] *** prly joined
[05:59] * Tene hacks on a perl6 framework similar to SeaSide.

[06:03] *** REPLeffect_ joined
[06:06] *** prly_ joined
[06:07] <Patterner> is SeaSide that good?

[06:07] <Tene> Dunno, but I looked at some slides and read some articles, and there are some interesting ideas there.

[06:08] <Tene> I'm fighting between "build good infrastructure up front that can be re-used and add it to svn" and "hack something barely decent together so that you can start playing with the fun parts right away"

[06:10] <Patterner> what is better for your karma? :)

[06:11] *** prly__ joined
[06:12] <jisom> more commits

[06:13] *** iblechbot joined
[06:15] <Tene> Huh.  This is weird.

[06:15] <Tene> use URI::Escape;

[06:15] <Tene> *** Not a keyed value: VInt 0 at Prelude.pm line 671, column 18-25

[06:16] <Patterner> it's a sign! switch to ruby!

[06:17] <Aankhen``> BLASPHEMY

[06:17] * Patterner fights with wx-0.71 in the mean time

[06:17] <Aankhen``> BURN THE BLASPHEMER

[06:18] *** prly___ joined
[06:26] <Aankhen``> 80,6990476e.net) Quit

[06:26] <Aankhen``> 80,6990476[22:53:37] <kerlnel200> mattmcc?

[06:26] <Aankhen``> O_O

[06:26] <Aankhen``> That's not right.

[06:30] *** DrSlump joined
[06:30] *** autark joined
[06:34] <Aankhen``> What is a "basal" class?

[06:34] <Aankhen``> The sentence is from S09: But anyone (including the main application) can request that any class stay open or basal, and the class closer/finalizer must honor that.

[06:37] *** esstone joined
[06:41] *** rofl joined
[06:41] *** rofl is now known as mathlordf

[06:41] *** mathlordf is now known as mathlord

[06:51] <Aankhen``> ?eval my @foo = <a b c d e>; say "@foo[]"

[06:51] <evalbot_r15808> OUTPUT[a b c d e‚ê§] Bool::True

[06:54] <Tene> Hmm.  URI uses a blessed string, it looks like.

[07:01] <Tene> Can't quite figure out how to do that in pugs.

[07:04] <gaal> Tene: I encountered that .kv-but-really-mmd-related problem a few weeks ago too

[07:05] <gaal> iirc the dispatcher enters the pair multi for some reason

[07:05] <gaal> I don't know why :-(

[07:11] *** RHainsworth joined
[07:15] * Aankhen`` waveth at gaal.

[07:18] <Aankhen``> "Unicode horizontal whitespace is counted as whitespace, but it's better not to use thin spaces where they will make adjoining tokens look like a single token." # I smell... obfuscation! =)

[07:19] <gaal> hey Aankhen``! :)

[07:19] <Aankhen``> :-D

[07:19] <Aankhen``> Hacked anything interesting lately?

[07:19] <gaal> not really

[07:20] <Aankhen``> Awww.

[07:20] <Aankhen``> Ah well, there's plenty of time. =)

[07:20] <Aankhen``> I've been re-reading synopses.  Still not grokking multislices though. :-(

[07:20] <gaal> Aankhen``: re that thought, there was the proposal of Acme::Oneliner that encodes any program *really* in one line

[07:20] <Aankhen``> I suppose it would help if I weren't half-asleep.

[07:20] <Aankhen``> Heh, that would be fun.

[07:20] <gaal> with zero-width whitespace

[07:21] <Aankhen``> Yowza.

[07:21] <gaal> essentially, the file size encodes the program.

[07:21] <gaal> because you turn the program into a unary number, and prepend "use Acme::Oneliner;" to it. :-)

[07:21] <Aankhen``> Zero-width space as in U+200B?

[07:22] <gaal> yeah

[07:22] <Aankhen``> LOL.

[07:22] <Aankhen``> That would be so evil.

[07:22] <Aankhen``> I'd forgotten that character even exists.

[07:22] <gaal> you can compress this; there are three other zero-width chars.

[07:23] <Aankhen``> Heh.

[07:23] <gaal> that's okay, it's hard to lose it among all those widful characters

[07:23] * Aankhen`` nods.

[07:23] <Aankhen``> I thought hair spaces were about as thin as it gets.

[07:24] <Aankhen``> Sorry if hair spaces don't actually exist... like I said, I'm half asleep, so I might be imagining things. 8-|

[07:25] <gaal> otters have about 1k hairs in 1 sq. mm, so hairthin can be pretty thin.

[07:25] <Aankhen``> o_O

[07:25] <Aankhen``> Scary thought.

[07:25] <Aankhen``> Hmm, no wonder animators have such a hard time with hair.

[07:26] <Tene> So do I keep hacking on trying to implement a blessed string, or do I give up and re-implement URI.pm while translating to p6?

[07:26] <Aankhen``> "re-implement URI.pm while translating to p6" == "port URI.pm to Perl 6"?

[07:27] *** Belaf joined
[07:27] <gaal> blessed string? I think you want a role that "does" Str...?

[07:27] <gaal> but MO isn't totally landed yet so it prolly won't work completely.

[07:28] <Tene> Yeah, p5 URI is a blessed string, and the methods modify $$self

[07:28] <gaal> .oO( p5 does not have blessable strings, it has blessable scalars )

[07:28] <Tene> Hmm.  I misunderstand, I suppose.

[07:29] <gaal> let me look at the source...

[07:29] <Tene> in _init

[07:29] <Tene> my $self = bless \$str, $class;

[07:30] <gaal> okay, that's a scalar that happens to contain a string

[07:30] <gaal> you bless the container, not the string

[07:31] <Tene> Ahh.  I misunderstood.

[07:31] <gaal> well, the reference to the container, anyway

[07:31] <Tene> nodnod

[07:32] <Tene> I don't think I quite know enough to implement this correctly in the most useful way.

[07:32] <gaal> then implement this incorrectly in a still somewhat useful way

[07:32] <gaal> and people will make it correct and more useful :)

[07:33] <Tene> 'kay

[07:33] <gaal> or shall I say, more correct

[07:37] <gaal> [ot, but hilarious] http://web.archive.org/web/20051119041610/www.mcgladrey-family.us/kayne/archives/2003/06/06/making_junk_mail_illegal

[07:37] <lambdabot> Title: Making junk mail illegal, http://tinyurl.com/2arrx2

[07:37] <Tene> Heh.

[07:39] <Aankhen``> LOL.

[07:40] <Tene> Heh.  That's funny.

[07:42] *** xinming_ joined
[07:48] *** elmex joined
[07:58] *** VanilleBert joined
[08:02] *** RHainsworth left
[08:17] <Aankhen``> Is a tertiary sigil a thigil?

[08:17] <Aankhen``> # just musing.

[08:29] *** devogon joined
[09:22] *** chris2 joined
[09:27] *** VanilleBert left
[09:33] *** DarkWolf84 joined
[09:34] *** dduncan left
[09:43] *** SubStack joined
[09:49] *** marmic joined
[09:51] *** ozo_ joined
[10:25] *** mjk joined
[10:26] *** dunstabulos_ joined
[10:37] *** Psyche^ joined
[10:42] *** Psyche^ is now known as Patterner

[10:52] *** Psyche^ joined
[10:55] *** devogon joined
[11:07] *** Psyche^ is now known as Patterner

[11:09] <moritz> nothingmuch: ping

[11:10] <moritz> anyway...

[11:10] <moritz> @tell nothingmuch on http://perlcabal.org/~nothingmuch/harrorth/doc/02.kwid there is a dead link, the one to the forth tutorial (moved to somewhere under http://www.jforth.org/ but I can't reach that page)

[11:10] <lambdabot> Consider it noted.

[11:15] *** devogon_ joined
[11:20] *** iblechbot joined
[11:34] *** mj41 joined
[11:39] *** rlb3_ joined
[11:45] <DarkWolf84> why there is no anything for the references at the synposises

[11:46] <moritz> DarkWolf84: hm? the synopsys _are_ the specs - and anything that is not mentioned stays the same as in perl 5

[11:46] <DarkWolf84> ok

[11:49] *** pbuetow joined
[11:57] *** explorer joined
[12:04] *** dolmans joined
[12:14] *** chris2 joined
[12:28] *** mjk joined
[12:31] *** moritz_ joined
[12:33] *** moritz joined
[12:34] *** moritz_ is now known as moritz

[13:18] *** Limbic_Region joined
[13:29] *** lichtkind joined
[13:43] *** charsbar joined
[13:50] <lichtkind> does anybody knoe here when larry was employed by JPL?

[14:01] *** dickdawg__ joined
[14:01] <svnbot6> r15809 | kudra++ | Ready to publish

[14:04] <xerox> lichtkind: is that the Jet Propulsion Lab?

[14:06] *** bernhard joined
[14:07] <pasteling> "evalbot_r15808" at 194.145.200.126 pasted "Pugs build failure" (325 lines, 18.4K) at http://sial.org/pbot/23912

[14:10] <lichtkind> xerox: jes

[14:14] *** Loro_ joined
[14:24] *** buetow joined
[14:35] <lichtkind> TimToady: ping?

[14:38] *** camenix joined
[14:48] *** bonesss joined
[14:52] *** Jedai joined
[15:01] *** rashakil__ joined
[15:14] <moritz> can anybody tell me what the difference between "regex" and "token" is?

[15:14] <lichtkind> moritz: token are much simpler

[15:15] <lichtkind> simpler rules

[15:15] <moritz> lichtkind: I mean the p6 keywords

[15:15] <lichtkind> thats what im talking about

[15:15] <lichtkind> in rules you can be made out of rules

[15:15] *** kane_ joined
[15:16] <moritz> but that's not a semantic difference

[15:16] <lichtkind> token are smallest parts per def

[15:16] <moritz> so tokens my not consist of other tokens/rules?

[15:16] <lichtkind> yes

[15:16] <lichtkind> thats one differenc

[15:16] <lichtkind> e

[15:16] <lichtkind> they also have smaller possibilities in syntax

[15:16] <moritz> lichtkind++ #thanks ;)

[15:17] <lichtkind> gerne

[15:17] <moritz> wow, Germany is winning in all competitions of the Table Tennis European Championship

[15:17] <moritz> (and probably nobody takes notice ;)

[15:18] <lichtkind> moritz: and nobody believed it enyway

[15:20] *** kane__ joined
[15:22] * moritz currently teaches his (p5) offline CMS to do syntax hilighting

[15:22] <moritz> moose

[15:23] <lichtkind> moritz cool maybe i could use that well

[15:23] <moritz> lichtkind: svn co https://casella.verplant.org/svn/moritz/mowyw/

[15:24] <moritz> lichtkind: the idea is to pipe anything in [[[syntax perl6]]]$perl6_code_here[[[endsyntax]]] through Text::VimColor

[15:25] <lichtkind> thats no solution for me

[15:25] <lichtkind> by

[15:37] *** dickdawg_ joined
[15:43] *** luqui joined
[15:46] *** mr_ank joined
[15:48] *** devogon joined
[15:56] *** manjuj joined
[15:58] *** polettix joined
[16:07] <spinclad> moritz: see S05.  C< token { ... } > is just short for C< regex :ratchet { ... } >, so it never backtracks at that level.  otherwise equivalent.

[16:08] <moritz> spinclad: thanks

[16:30] *** th3 joined
[16:37] *** amnesiac joined
[16:43] *** esstone joined
[17:04] *** Lorn joined
[17:13] <gaal> spinclad: hey! :)

[17:23] *** dickdawg__ joined
[17:29] *** Belaf_ joined
[17:36] *** chris2 joined
[17:40] *** [particle] joined
[17:42] *** charsbar_ joined
[17:59] <DarkWolf84> how to check the type of object

[18:00] <luqui> ?eval "foo".type

[18:00] <luqui> no evalbot

[18:00] *** evalbot_r15808 is now known as evalbot_r15809

[18:00] <evalbot_r15809> Error: No such method in class Str: &type

[18:00] <luqui> ?eval "foo".ref

[18:00] <evalbot_r15809> Error: No such method in class Str: &ref

[18:00] <luqui> hmm

[18:00] <luqui> ?eval "foo".class

[18:00] <evalbot_r15809> Error: No such method in class Str: &class

[18:00] <moritz> ?eval "foo".WHAT

[18:00] <evalbot_r15809> ::Str

[18:00] <luqui> ahh, the mm stuff

[18:01] <moritz> ?eval print "foo is a string" if "foo".WHAT eq "Str";

[18:01] <evalbot_r15809> OUTPUT[foo is a string] Bool::True

[18:02] *** perlmonkey2 joined
[18:02] * moritz wants a generate $foo.WHY that returns 42 ;-)

[18:02] <moritz> s/generate/general/

[18:02] <DarkWolf84> :)

[18:03] <DarkWolf84> that will be interesting idea :P

[18:03] <DarkWolf84> thank u btw

[18:04] <moritz> and propably p6 has a rather easy way to implement such a feature in p6 itself

[18:04] <moritz> DarkWolf84: what for?

[18:04] <gaal> $romans.WHEREFORE_REJOICE_WHAT_CONQUEST_BRINGS_HE_HOME

[18:04] *** prly joined
[18:04] <DarkWolf84> i forgot the method

[18:04] <gaal> you just need a multi in * for that.

[18:06] <DarkWolf84> btw my version says only type not ::type

[18:07] <DarkWolf84> ?eval my $a=2; say $a.WHAT;

[18:07] <evalbot_r15809> OUTPUT[Int‚ê§] Bool::True

[18:08] <moritz> DarkWolf84: the '::' only comes out in the interactive version, eg if you don't use it,

[18:08] <moritz> ?eval 2.WHAT

[18:08] <evalbot_r15809> ::Int

[18:09] <moritz> ?eval ~2.WHAT

[18:09] <evalbot_r15809> "Int"

[18:09] <DarkWolf84> that is from evalbot

[18:09] <moritz> ~ forces string context, so the "::" disappears

[18:09] <moritz> DarkWolf84: if you run pugs interactively you will see the "::" as well

[18:11] <DarkWolf84> hm :: only appeares in constant context

[18:13] <DarkWolf84> ?eval 2.WHAT; my $a=2; say $a.WHAT;

[18:13] <evalbot_r15809> OUTPUT[Int‚ê§] Bool::True

[18:13] <DarkWolf84> ?eval say 2.WHAT; my $a=2; say $a.WHAT;

[18:13] <evalbot_r15809> OUTPUT[Int‚ê§Int‚ê§] Bool::True

[18:13] <DarkWolf84> ?eval say 2.WHAT;

[18:13] <evalbot_r15809> OUTPUT[Int‚ê§] Bool::True

[18:14] <DarkWolf84> ?eval say 2.WHAT.perl;

[18:14] <evalbot_r15809> OUTPUT[::Int‚ê§] Bool::True

[18:14] <DarkWolf84> i got it

[18:17] *** prly_ joined
[18:30] *** Psyche^ joined
[18:34] *** prly__ joined
[18:39] *** prly joined
[18:39] *** geoffb joined
[18:40] *** Psyche^ is now known as Patterner

[18:44] *** prly___ joined
[19:00] *** prly joined
[19:01] *** dickdawg__ joined
[19:02] *** Psyche^ joined
[19:06] *** jisom joined
[19:09] *** Psyche^ is now known as Patterner

[19:45] *** silug joined
[19:46] *** prly_ joined
[19:54] *** Aankhen`` joined
[20:02] *** dduncan joined
[20:28] <Leibsle> !seen lichtkind

[20:29] <Aankhen``> lichtkind was last seen being eaten by Aankhen``, that was 4hrs ago.

[20:29] <moritz> Leibsle: I saw lichtkind leaving #perl6 roughly 5 hours ago

[20:29] <Leibsle> moritz, thanks :)

[20:30] <Leibsle> i was still in frankfurt to that time 

[20:30] <moritz> Leibsle: and if you want a bot to answer, use @ instead of ! ;-)

[20:30] <moritz> Leibsle: so where are you now?

[20:30] <Leibsle> ah, good tip

[20:30] <Leibsle> i am now back to Reutlingen

[20:30] <Leibsle> 240 km more southern

[20:30] <moritz> ok ;)

[20:31] <Leibsle> :P

[20:31] *** Psyche^ joined
[20:31] <moritz> #perl6 is full of bots, sometimes you don't know which to ask

[20:31] * Leibsle nods and smiles

[20:32] <Leibsle> but i like bots if they are peaceful

[20:33] * Aankhen`` brings his warmongering bot in to start a fight with Leibsle.

[20:33] <Leibsle> :-/

[20:34] <Leibsle> war = 'not good';

[20:34] <Aankhen``> Can't modify constant item in scalar assignment

[20:34] <Leibsle> eval: $war = 'not good';

[20:34] <buubot> Leibsle:  not good 

[20:34] *** xerox joined
[20:34] <Leibsle> see. buubot said so

[20:37] *** Psyche^_ joined
[20:37] *** Psyche^_ is now known as Patterner

[20:39] *** xerox left
[20:51] <svnbot6> r15810 | Jedai++ | t/examples/99problems/problem90.t more perlish, problem91.t pass his test

[20:54] <moritz> Jedai++ # really more perlish, though a bit longer iirc ;-)

[20:56] <Jedai> Well in fact I already changed the code in my last commit to use this method

[20:56] <Jedai> this time I just made minor changes

[20:56] <Jedai> I don't know if my first change was really a good idea

[20:57] <moritz> Jedai: my original implementation was in C, so it was not perlish at all - just fast in C ;-)

[20:57] <Jedai> it cut the execution time by at least a factor three

[20:57] <Jedai> Everything is fast in C !

[20:58] <moritz> not quite, if you scale it to the $n-Queen's Problem ;)

[20:58] <Jedai> See problem91.t for an algorithm who ought to be fast (it's not even backtracking) but is slowed down by implementation issues

[20:59] <Jedai> (I guess all those objects aren't so light...)

[20:59] <Jedai> moritz: Yeah, the new code should scale better I think

[20:59] <Jedai> even in C

[21:01] <moritz> would be an interesting comparison - afaict there are more array operations and less backtracking involved...

[21:01] <moritz> I guess as long as all arrays fit into the cache it's faster ;)

[21:02] <Jedai> Yeah, and then slower if it doesn't

[21:02] <Jedai> for sure !! :D

[21:06] <Jedai> Well on my computer for the 8-Queen's Problem it went from 1'40" to 20' so I changed it, maybe I should have put both method in. I lack experience in this field (contributing an Open Source project)

[21:06] <Jedai> What do you think ?

[21:07] <moritz> Jedai: no, it's fine... the best method wins ;)

[21:07] <moritz> Jedai: and the old one still lives in the SVN repository  - if somebody really cares ;-)

[21:16] *** justatheory joined
[21:24] *** bonesss joined
[21:25] *** prly joined
[21:30] *** prly__ joined
[22:00] *** Psyche^ joined
[22:03] *** mako132 joined
[22:03] <Aankhen``> ?eval <<:a(1) :!b>>

[22:03] *** evalbot_r15809 is now known as evalbot_r15810

[22:03] <evalbot_r15810> (":a(1)", ":!b")

[22:04] <Aankhen``> ?eval <<:a(1) :b(2)>>

[22:04] <evalbot_r15810> (":a(1)", ":b(2)")

[22:04] <Aankhen``> ?eval ¬´a b c d¬ª

[22:04] <evalbot_r15810> ("a", "b", "c", "d")

[22:04] <Aankhen``> ?eval ¬´:a(1) :!b c d¬ª

[22:05] <evalbot_r15810> (":a(1)", ":!b", "c", "d")

[22:05] <Aankhen``> Poop.

[22:11] *** gnuvince_ joined
[22:14] <Jedai> What shoul it do ?

[22:14] <Jedai> s/shoul/should/

[22:14] *** Psyche^ is now known as Patterner

[22:15] *** prly joined
[22:15] <Aankhen``> Jedai: :!b is supposed to be equivalent to a => 0 in P5.

[22:15] <Aankhen``> Er.

[22:15] <Aankhen``> b => 0.

[22:15] <Aankhen``> Not a => 0.

[22:22] *** prly_ joined
[22:28] *** Psyche^ joined
[22:30] <Aankhen``> ?eval "\c[NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE]"

[22:30] <evalbot_r15810> "‚äØ"

[22:32] <moritz> evalbot_r15810: that's a good answer ;)

[22:40] *** Psyche^ is now known as Patterner

[22:49] *** yuteh joined
[23:02] *** prly joined
[23:02] <Jedai> ?eval :!b

[23:02] <evalbot_r15810> ("b" => Bool::False)

[23:03] <Jedai> Aanhen`` : But doesn't << >> turn everything but variables into strings ?

[23:03] <Jedai> ?eval $a = "o"; <<a $a b>>

[23:03] <evalbot_r15810> ("a", "o", "b")

[23:03] <Juerd> IIRC, it even splits variables if they're not quoted

[23:03] <Juerd> ?eval $a = "o o"; <<f $a>>

[23:03] <evalbot_r15810> ("f", "o", "o")

[23:04] <Juerd> ?eval $a = "o o"; <<f "$a">>

[23:04] <evalbot_r15810> ("f", "o o")

[23:04] <Juerd> Just like shells do.

[23:04] <Jedai> Cool (but confusing)

[23:04] <Juerd> Not confusing once you know it :)

[23:04] <Juerd> And since many of us use shells all the time, we'll probably as a community learn the semantics quickly :)

[23:05] <Jedai> I guess you can think of it as a 2-step process, like the regex interpolation in Perl5

[23:06] <Juerd> Don't remind me of that.

[23:07] <Juerd> Because it reminds me of /$foo/ in Perl 6 being /"$foo"/ rather than /<$foo>/

[23:07] <Juerd> So that's a slight inconsistency between // and <<>>

[23:13] <Jedai> The regex interpolation in Perl6 is much better off like IMHO

[23:14] <Jedai> Since that's what most people expect when they first encounter it in Perl5

[23:17] <Juerd> I doubt both the reasoning and the validity

[23:20] <Aankhen``> Oh, I guess I misunderstood the angles.

[23:20] <Aankhen``> Thanks. :-)

[23:20] <Jedai> My experience with Perl newbies (which aren't always that bright anyway) seems to suggest so. But I never taught Perl formally, so I guess you might know better.

[23:22] <Aankhen``> Error: Range operation compromised due to sorting of delta after gamma.  Burst into flames? (y/y)

[23:24] <dduncan> question, what is the MANIFEST.SKIP entry to match any file containing parenthesis?  a line with just \( doesn't seem to work

[23:25] <Jedai> Is there a way to write a lazy iterator in Pugs actually, to get the same behaviour as filehandles ?

[23:27] *** silug joined
[23:28] *** Psyche^ joined
[23:28] <moritz> Pugs is turing complete... *duck* ;-)

[23:29] *** mako132 joined
[23:29] <Aankhen``> ?eval Pair.does(Str)

[23:29] <evalbot_r15810> Bool::False

[23:30] <Jedai> Well I can write a lazy iterator, you're right in this sense, don't duck ! ;) But at a syntaxical level I wondered if I could use it in a for like a "=filehandle"

[23:33] *** Psyche^ is now known as Patterner

[23:37] <Jedai> ?eval ~:a

[23:37] <evalbot_r15810> "a\t1"

[23:44] *** prly_ joined
[23:55] <moritz> ?eval "foo bar" ~~ m/<ident><ws><ident>/

[23:55] <evalbot_r15810> *** Cannot parse regex: <ident><ws><ident>‚ê§*** Error: ‚ê§Match.new(‚ê§  ok => Bool::False, ‚ê§  from => 0, ‚ê§  to => 0, ‚ê§  str => "", ‚ê§  sub_pos => (), ‚ê§  sub_named => {}‚ê§)

[23:56] <moritz> what's the error?

[23:57] <moritz> and is it intended that $<ident> is undef (instead of, eg an array of match object)?

[23:58] *** labuser joined
