[00:00] *** |Jedai| is now known as jedai

[00:25] *** amnesiac joined
[00:29] *** weinig_ joined
[00:51] *** rlb3 joined
[00:52] *** prism joined
[00:53] *** nipotaway is now known as nipotan

[01:16] *** avar joined
[01:16] <avar> Aankhen``: *slap*

[01:16] * Aankhen`` spontaneously combusts for avar's pleasure.

[01:17] <avar> woohoo

[01:18] *** rlb3 joined
[01:19] <offby1> do it again!

[01:19] * Aankhen`` spontaneously combusts again, for offby1's pleasure.

[01:19] *** diakopter_afk is now known as diakopter

[01:19] <offby1> Ashes that burn.  Neat trick.

[01:19] * offby1 applauds

[01:19] <Aankhen``> …and before you ask, I'm all burnt out for now.

[01:20] * offby1 slaps Aankhen`` upside the haid

[01:20] <Aankhen``> Ouch.

[01:20] <offby1> let that be a lesson to you

[01:20] <Aankhen``> A lesson in what, exactly?

[01:20] <offby1> the evil of puns.

[01:20] <offby1> Eeevil

[01:21] <Aankhen``> Embrace the puns.  Come to the dork side.

[01:21] *** jedai joined
[01:21] <offby1> my hand is gonna be sore from slapping

[01:22] <avar> You and your euphemisms

[01:22] <offby1> you and your single entendres

[01:22] <avar> heh:)

[01:24] *** rashakil joined
[01:27] <Aankhen``> Bahaahahaaahahaha.

[01:29] <Aankhen``> Well, I'm off.  College exam on VB. *shudders*

[01:29] *** weinig joined
[01:30] <offby1> yikes

[01:31] *** sunnavy joined
[01:38] <pasteling> "evalbot_r16741" at 193.200.132.135 pasted "Pugs build failure" (6 lines, 278B) at http://sial.org/pbot/25819

[01:38] *** evalbot_r16741 joined
[01:48] *** offby1 joined
[01:49] *** prism joined
[01:52] *** ashleyb joined
[02:10] *** ruscoekm joined
[02:45] <diakopter> anyone want an svn commit account?

[02:47] <pasteling> "evalbot_r16741" at 193.200.132.135 pasted "Pugs build failure" (6 lines, 278B) at http://sial.org/pbot/25821

[02:47] *** evalbot_r16741 joined
[02:50] <offby1> diakopter: don't just _give_ it away, silly; _auction it off_

[02:51] * diakopter places SUDO ALL rights on feather up for bid.... ;)

[02:58] *** diakopter is now known as diakopter_afk

[02:59] *** Jmax joined
[03:08] *** REPLeffect joined
[03:13] * offby1 bids $1

[03:14] *** diakopter_afk is now known as diakopter

[03:14] <diakopter> sry; bidding closed already. :(

[03:14] <offby1> who won? who won?

[03:15] <offby1> second chance offer!

[03:15] <diakopter> can't say.  some script kiddie...

[03:16] *** REPLeffe1t joined
[03:26] *** revmischa joined
[03:26] *** mobutu joined
[03:26] <revmischa> http://perl6.on.nimp.org/btree.html

[03:26] <lambdabot> Title: GNAA Last Measure Live!

[03:27] <Tene> revmischa--

[03:28] *** jenk3m is now known as jmac

[03:28] *** jmac is now known as jenk3m

[03:29] *** revmischa left
[03:32] *** mobutu left
[03:32] <Tene> What's up with the spam attacks on the channel and on timtoady?

[03:34] <offby1> ?

[03:34] <offby1> wasn't me.

[03:34] <offby1> Nobody saw me.  You can't prove a thing.

[03:40] <SamB> Tene: some idiot thinks it's fun?

[03:42] <Tene> I'm just confused by the target.

[03:57] <Aankhen``> offby1: So you *think*.

[03:58] * offby1 glances around nervously. 

[03:58] <Aankhen``> For all you know we've been watching you.

[03:58] <Aankhen``> That innocent-looking bulb?  That could actually be a hidden camera.

[04:04] *** weinig_ joined
[04:06] *** weinig_ is now known as weinig

[04:15] *** mako132 joined
[04:18] *** ruscoekm_ joined
[04:19] <offby1> eek!

[04:19] <offby1> I just planted that last month.  You're saying my onions are _spying_ on me?

[04:23] *** Rawdog joined
[04:24] <Aankhen``> offby1: No, of course not. I'd never say something like that.

[04:25] <Aankhen``> …on the other hand, I'm not saying they *aren't* spying on you either.

[04:25] * Aankhen`` wonders if *foo* => <i>foo</i> is a good idea.

[04:25] <offby1> I think Google Talk does just that

[04:25] <offby1> and _foo_ underlines

[04:26] <offby1> Victoria, BC?

[04:27] * offby1 plays "guess the city"

[04:30] <svnbot6> r16742 | lwall++ | [STD] some work on parameter syntax, more fake ops to chide unwary P5 folks

[04:31] <offby1> hey!  I'm an unwary p5 folk.  I don't wanna be chid.

[04:32] <Aankhen``> Nyah, nyah, you've been chided.

[04:32] <Tene> Aankhen``: no, that was just a hanging chide.

[04:32] <Aankhen``> Tene: Hmm?

[04:32] <Tene> Aankhen``: US culture pun.

[04:33] <Tene> "Hanging chad" referring to a recent presidential election.

[04:33] <Aankhen``> Ah.

[04:37] <diakopter> offby1: <@TimToady> only like, if you use =~ instead of ~~, for instance...

[04:40] <allbery_b> someone mentioned Chad Vader on another channel and I askjed if he was in charge of the Florida elections

[04:41] <Aankhen``> Very droll.

[04:47] <svnbot6> r16743 | Aankhen++ | * [irclog] added `title` attribute to r?\226?\128?\166 links.

[04:47] <Aankhen``> Woo.

[04:47] <Aankhen``> svnbot6 did not like my commit message.

[04:51] <pasteling> "evalbot_r16742" at 193.200.132.135 pasted "Pugs build failure" (6 lines, 278B) at http://sial.org/pbot/25827

[05:11] *** TimToady joined
[05:11] <dduncan> offby1, you just named my place of birth, 45 mins ago ... but any other reason you brought it up

[05:12] <dduncan> ?

[05:12] <offby1> dduncan: well, I /whois people to see where they are.  Aankhen``s record said something about "vn.shawcable.net", so I guessed Victoria, because it, too, has a "V" in it :-p

[05:13] <dduncan> well, Victoria BC is about a half-hour drive from where I am/live right now

[05:13] <TimToady> there's a Victoria here in Texas too

[05:13] <lambdabot> TimToady: You have 75 new messages. '/msg lambdabot @messages' to read them.

[05:13] <offby1> yikes.

[05:14] <allbery_b> eep.

[05:14] <dduncan> shawcable is the local cable provider, and in much of Canada ... don't know much about other areas

[05:14] *** daxim_ joined
[05:14] <allbery_b> (yes, there is sych a thing as being too popular...)

[05:14] <diakopter> TimToady: you actually have at least 1 real msg (from me; backlog to see it)

[05:14] *** weinig joined
[05:15] <Tene> TimToady: any idea why you're the target of this weird spammer?

[05:15] <meppl> good morning

[05:15] <dduncan> yes

[05:17] *** weinig joined
[05:18] <TimToady> I dunno; maybe he wants people to feel sorry for me :)

[05:18] *** devogon joined
[05:19] <diakopter> an 'empathist', then?

[05:20] <diakopter> er, pityist

[05:23] *** Psyche^ joined
[05:36] *** mjk joined
[05:39] *** Psyche^ is now known as Patterner

[05:57] *** diakopter is now known as diakopter_afk

[06:13] *** iblechbot joined
[06:37] *** dduncan left
[06:49] *** BooK joined
[06:51] *** elmex joined
[06:55] *** elmex joined
[07:06] *** weirdo joined
[07:06] <weirdo> no call/cc in p6?

[07:08] <lumi> Is specs.pugscode.org supposed to just go to the root of a pugs tree?

[07:09] *** renormalist joined
[07:09] <Aankhen``> weirdo: Nope. You just use &?CALLER_CONTINUATION.

[07:09] <Aankhen``> weirdo: As in sub foo () { my $cont = &?CALLER_CONTINUATION; }

[07:10] <weirdo> wow. gotta hone my contination skills!

[07:10] <Aankhen``> Or at least that's how it was last I heard.  I could be stuck in the past. :-)

[07:10] *** franck__ joined
[07:11] <renormalist> ?eval @moo = <1 2 3>; for @moo -> $i is copy { say $i++ }

[07:11] *** evalbot_r16741 is now known as evalbot_r16743

[07:11] <evalbot_r16743> OUTPUT[1␤2␤3␤] undef

[07:11] <Aankhen``> If you really wanted, you could have a: sub callcc (&block) { &block.(&?CALLER_CONTINUATION); }

[07:11] <renormalist> ?eval @moo = <1 2 3>; for @moo <-> $i { say $i++ }

[07:11] <evalbot_r16743> Error: ␤Unexpected ">"

[07:13] <lumi> renormalist: ENOTIMPL I think

[07:16] <lumi> Couldn't the caller continuation just be &return?

[07:18] <Aankhen``> Probably not… I doubt &return saves its environment.

[07:18] <Aankhen``> Er, did that even make any sense?

[07:18] *** jedai joined
[07:20] *** mtve joined
[07:21] <lumi> If I pass a block with a call to return in it, where would it return?

[07:21] <Aankhen``> The outermost function?

[07:21] <Aankhen``> Rather, the innermost function.

[07:23] <lumi> So: sub foo { my $a = bar ({return 1}); $a + 1}; sub bar($x) { $x() + 15 }; foo #  returns 2?

[07:24] <lumi> ?eval  sub foo { my $a = bar ({return 1}); $a + 1}; sub bar($x) { $x() + 15 }; foo

[07:24] <evalbot_r16743> 2

[07:24] <lumi> That's indeed what it does

[07:36] *** marmic joined
[07:46] *** marmic joined
[07:54] *** kanru joined
[07:58] *** bsb left
[08:03] *** franck___ joined
[08:05] <broquaint> Why's that? Is $x treated like a block (instead of a sub)?

[08:06] *** akreal joined
[08:07] *** jisom joined
[08:08] *** ofer joined
[08:13] <lumi> broquaint: I think so? Was I making up syntax?

[08:14] <lumi> That's not actually a very good test, is it

[08:14] <lumi> ?eval  sub foo { my $a = bar (-> $n {return $n + 1}); $a + 1}; sub bar($x) { $x(12) + 15 }; foo

[08:14] <evalbot_r16743> 14

[08:21] *** franck__ joined
[08:21] <broquaint> So why does the anonymous sub leave &bar before the add op is evaluated (i.e the result isn't 29 as it is in Perl5 equivalent code)?

[08:22] <Aankhen``> ?eval  sub foo { my $a = bar (-> $n {leave $n + 1}); $a + 1}; sub bar($x) { $x(12) + 15 }; foo

[08:22] <evalbot_r16743> 17.0

[08:23] <Aankhen``> Huh.

[08:23] <lumi> Because, I think, just like Aankhen`` said, 'return' returns from the innermost sub

[08:23] <lumi> Aankhen``: Huh?

[08:23] <lumi> What even happened there?

[08:23] <Aankhen``> Oh, sorry, I misunderstood.

[08:23] <Aankhen``> Let me see.

[08:24] <Aankhen``> It's supposed to exit the anonymous sub, yielding a value of 13, which should then be added to 15, yielding a value to be returned to foo, ending up with 29.

[08:25] <Aankhen``> ?eval  sub foo { my $a = bar (-> $n {leave($n + 1)}); $a + 1}; sub bar($x) { $x(12) + 15 }; foo

[08:25] <evalbot_r16743> 17.0

[08:25] <Aankhen``> I dunno.

[08:25] <Aankhen``> Here's what S04 says:

[08:25] <Aankhen``> A return always exits from the lexically surrounding sub or method definition (that is, from a function officially declared with the sub, method, or submethod keywords). Pointy blocks and bare closures are transparent to return. If you pass a closure object outside of its official "sub" scope, it is illegal to return from it. You may only leave the displaced closure block itself by falling off the end of it or by explicitly calling le

[08:25] <Aankhen``> To return a value from any pointy block or bare closure, you either just let the block return the value of its final expression, or you can use leave, which comes in both function and method forms. The function (or listop) form always exits from the innermost block, returning its arguments as the final value of the block exactly as return does. The method form will leave any block in the dynamic scope that can be named as an object an

[08:25] <lumi> I don't understand what's happening there

[08:26] <Aankhen``> I have no idea how that code ended up with a result of 17.

[08:26] <lumi> So passing a 'return' outside its legit lexical scope is an error?

[08:26] <Aankhen``> And how it became a floating-point number in the process.

[08:26] <Aankhen``> Apparently so.

[08:26] <lumi> I don't follow "official sub scope"

[08:26] <lumi> Is this lexical scope, or dynamic scope/extent?

[08:26] <Aankhen``> Not sure.

[08:27] <Aankhen``> Probably lexical scope, since it's defined to exit from the lexically surrounding sub/method.

[08:27] <lumi> So passing it down even while still in dynamic scope would be an error

[08:28] <Aankhen``> I guess.

[08:28] <lumi> This limits the kind of control structures you can write without macros, I guess

[08:28] *** IllvilJa joined
[08:29] <Aankhen``> Well, say you have this: my $saved_block; sub foo () { bar(-> { return 1; }); }; sub bar ($block) { $saved_block = $block; }; foo(); $saved_block.()

[08:29] <Aankhen``> What should it do?

[08:31] <lumi> That's definitely an error without full continuations

[08:31] <Aankhen``> So tweak it.

[08:31] <Aankhen``> Well, say you have this: my $saved_block; sub foo () { bar(); }; sub bar () { $saved_block = &?CALLER_CONTINUATION; }; foo(); $saved_block.()

[08:31] <Aankhen``> (Sorry, just hit the Up arrow and altered the code.)

[08:32] <lumi> I think that's an infinite loop

[08:32] <Aankhen``> Is it?

[08:32] <Aankhen``> Doesn't it just throw away the value of bar()?

[08:32] <Aankhen``> Or rather, return it, since it's the last statement.

[08:33] <Aankhen``> Anyway, the point was, if you really want continuations, use continuations.

[08:33] <lumi> The caller continuation is the entire rest of the program

[08:33] <Aankhen``> Oh yeah.  I kinda ignored that little detail. :-$

[08:33] <Aankhen``> I used to be intimidated by continuations.  Then I thought I understood them.  Then I was intimidated again.

[08:33] <lumi> The dynamically scoped return is something much more limited

[08:34] <lumi> Also it's something we use every day, if you can think of, say, for loops as subroutine calls

[08:35] <Aankhen``> Is the "it" there dynamically-scoped return or continuations?

[08:35] <lumi> Sorry, the dynamically-scoped return

[08:35] <Aankhen``> Ah.

[08:35] <lumi> You pass a block to &for, and expect its return to return from you

[08:35] <lumi> Where you are a sub :P

[08:35] <broquaint> Should a return in a pointy block throw some kind of warning/error?

[08:35] <Aankhen``> I'm sorry, that just isn't working for me. :-P

[08:36] <Aankhen``> broquaint: No, it should throw an error if it's passed outside its "official sub scope".

[08:36] <lumi> ?eval sub foo { for 0..10 -> $x { return $x if $x > 5 } }; foo

[08:36] <evalbot_r16743> \6

[08:37] <broquaint> And outside the official sub scope one would probably want &leave instead?

[08:37] <Aankhen``> broquaint: Yes.

[08:37] <lumi> broquaint: With different meaning

[08:37] <Aankhen``> `leave` says "just leave the innermost block".

[08:37] <lumi> leave leaves the block

[08:37] <Aankhen``> `return` says "leave the innermost (lexically-scoped) block".

[08:37] <Aankhen``> Um.

[08:37] <Aankhen``> s/block/sub or method/

[08:37] <lumi> What he said :P

[08:38] <Aankhen``> He said, she said, can't we all just get along? :-P

[08:38] <lumi> s/he/$gender_neutral_pronoun/

[08:38] <broquaint> Aha, thanks, good to know there's nothing surprising there :)

[08:41] <lumi> I'd go with "hän" but it's too much work to conjugate

[08:44] <Aankhen``> ?

[08:45] <lumi> As a gender-neutral pronoun

[08:45] <Aankhen``> Ah.  I don't believe I've heard that before.

[08:45] <lumi> They don't have genders in Finland, you see

[08:45] <Aankhen``> LOL.

[08:46] *** ofer joined
[08:48] <Aankhen``> moritz: Ping.

[08:58] <moritz> Aankhen``: pong

[08:58] <Aankhen``> Hola.

[08:59] <Aankhen``> I'm spending some more time hacking on useless things: I want to stop abbreviations from being expanded multiple lines within the same line, but to do that I need to maintain per-line state.  Is it okay with you if each filter gets an extra hash for that?

[09:00] <moritz> Aankhen``: it's a good idea...

[09:01] <Aankhen``> Cool, I shall implement.

[09:01] <moritz> Aankhen``: because it allows us to treat r(\d+) differently depending on the one how said it...

[09:01] <moritz> because if specbot6 says it it means something different

[09:01] <Aankhen``> Right.

[09:02] <Aankhen``> Commited, try it out?

[09:03] <moritz> wait a second...

[09:03] <svnbot6> r16744 | Aankhen++ | * [irclog] pass state to output filters so we don't expand the same abbreviation more than once in a line.

[09:05] <moritz> ok, server is at r16744

[09:06] <Aankhen``> Goddang.

[09:06] <Aankhen``> It didn't work.

[09:06] <moritz> test: YAPC

[09:07] <Aankhen``> Okay, try again.

[09:07] <svnbot6> r16745 | Aankhen++ | * [irclog] tweak to previous commit.

[09:08] <moritz> what's that? a closure with a goto?

[09:08] <pasteling> "evalbot_r16744" at 193.200.132.135 pasted "Pugs build failure" (6 lines, 278B) at http://sial.org/pbot/25830

[09:08] <Aankhen``> Aye.

[09:08] <moritz> it looks... scary

[09:08] <Aankhen``> Heh.

[09:08] <moritz> why not just carry a hash of those abbreviations that were already applied in that line?

[09:09] <Aankhen``> In this case, it just simplifies the sub a bit.

[09:09] <Aankhen``> Hmm.

[09:09] <Aankhen``> Uh, hold on.

[09:09] <Aankhen``> I think I mixed up two designs.

[09:10] <svnbot6> r16746 | Aankhen++ | * [irclog] more inanity fixing.

[09:10] <Aankhen``> Okay, new fix.

[09:13] <Aankhen``> Did your server just go down? o_O

[09:13] <svnbot6> r16747 | Aankhen++ | * [irclog] normalize abbreviations in state too.

[09:13] <moritz> test: YAPC YAPC IRC

[09:13] <Aankhen``> I can't seem to connect to it.

[09:13] <moritz> seems to work ;)

[09:13] <moritz> it works fine for me

[09:13] <Aankhen``> That's good.

[09:14] <Aankhen``> Yay, it works.

[09:14] <Aankhen``> For reference, I was testing with http://moritz.faui2k3.org/irclog/out.pl?channel=perl6;date=2007-04-24#id_l234

[09:14] <lambdabot> Title: IRC log for #perl6, 2007-04-24, http://tinyurl.com/2xjg23

[09:15] <Aankhen``> By the way, I was wondering… what's the rationale behind showing joins but not quits or parts?

[09:16] <moritz> I didn't know how to capture them when I implemented the bot

[09:16] <Aankhen``> Heh.

[09:16] <moritz> now I have a second implementation using BasicBot that should work

[09:17] <moritz> maybe I should kill the old bot and start the new one

[09:17] <Aankhen``> What do you mean?

[09:18] <moritz> the new one does capture parts 

[09:18] <Aankhen``> Oh, I see.

[09:18] *** irclogbot joined
[09:18] <moritz> damned, I just did it, and my server doesn't have BasicBot.pm installed

[09:19] <moritz> I _knew_ there was a reason I ran the old one :(

[09:19] <Aankhen``> :-\

[09:24] <Aankhen``> moritz: Is your line.tmpl out of date?

[09:25] *** weirdo left
[09:25] <moritz> md5sum line.tmpl 

[09:25] <moritz> 19987554527dcf67f6a00434ccf54b2d  line.tmpl

[09:25] <moritz> should be up-to-date

[09:25] <Aankhen``> Your server doesn't seem to be putting classes on the message TDs, for some reason.

[09:26] <Aankhen``> (I added it to line.tmpl earlier.)

[09:28] <moritz> <td class="msg">

[09:28] <moritz> or what were you expecting?

[09:28] <Aankhen``> Yes, that's what it should be.

[09:28] <moritz> well, that's what I get ;)

[09:28] <Aankhen``> Bleh, Firefox is really acting weird today.

[09:30] <Aankhen``> Okay, all there now.  Sorry for bothering you.

[09:31] <moritz> np

[09:31] <Aankhen``> Do you use the class="time" on the timestamps for something?  Would it be a problem if it moved to the TD?

[09:33] <moritz> the css for .time is commented out

[09:33] <moritz> so I think you could remove it

[09:33] <Aankhen``> Cool.

[09:33] *** buetow joined
[09:39] <pasteling> "evalbot_r16747" at 193.200.132.135 pasted "Pugs build failure" (6 lines, 278B) at http://sial.org/pbot/25831

[09:39] <svnbot6> r16748 | Aankhen++ | * [irclog] more abbrs; fixed a few cases where abbrs had optional characters, resulting in empty expansions.

[09:39] <svnbot6> r16749 | Aankhen++ | * [irclog] CSS tweaks.

[09:41] *** stevan_ joined
[09:42] <Aankhen``> Okay, I should probably get to sleep.

[09:42] * Aankhen`` snores.

[09:42] <Aankhen``> Ciao.

[09:43] <moritz> g'night

[09:47] *** Eidolos joined
[09:57] <wolverian> matlab has some interesting features. most of the core functions and operators are overloaded on collection types, so e.g. array+2 adds 2 to all elements, and find(array < 2) returns the indices of all the elements that are < 2. then again, that leaves you with a bunch of container-specific functions to replace the ones that bypass the container..

[09:58] <moritz> but matlab is horrible to code, because the compiler catches no error at all

[09:58] <wolverian> I don't think it compiles at all, but I could be wrong

[09:58] <wolverian> it does weird on the load interpreting, anyway.

[09:59] <moritz> or something, yes

[09:59] <wolverian> running programs see changes on disk.

[09:59] <wolverian> s/changes/changes in their code/

[09:59] <moritz> for a research project I had to use it a lot, and it's just plain horror

[09:59] <wolverian> but, yes, it's horrid to use, and I don't like the language itself either.

[09:59] <wolverian> only good thing about matlab is the integration to various third party tools (pdl) and the great documentation system.

[09:59] <wolverian> s/system/content/

[09:59] <moritz> when I run a program, it runs for 45 minutes and then dies because I misstyped a variable name - d'oh!

[10:00] <wolverian> for what it's worth, that's usually caugh by m-lint 

[10:00] <wolverian> ...variable 'foo' might never be used... or so

[10:00] <wolverian> s/caugh/caught/

[10:00] <wolverian> but only usually. :)

[10:01] <wolverian> do you happen to know R? I was wondering how sane its language is compared to this.

[10:01] <moritz> no ;)

[10:05] *** chris2 joined
[10:23] *** demy joined
[10:23] *** demy left
[10:31] *** demy joined
[10:31] *** demy left
[10:34] *** crashmatrix joined
[10:40] *** rho joined
[10:42] *** iblechbot joined
[10:48] *** |jedai| joined
[10:49] *** |jedai| joined
[10:49] *** |jedai| joined
[10:50] *** |jedai| joined
[10:53] *** |jedai| is now known as Oisoutch

[11:00] *** buetow joined
[11:17] *** rindolf joined
[11:24] <svnbot6> r16750 | agentz++ | converted S26.pod to UTF-8

[11:24] *** pbuetow joined
[11:44] *** nipotan is now known as nipotaway

[11:50] *** bonesss joined
[11:52] *** diakopter_afk is now known as diakopter

[11:52] *** fglock joined
[12:03] *** REPLeffect joined
[12:04] *** agentzh joined
[12:04] <agentzh> finally fixed the encoding of S26.pod...

[12:04] <lambdabot> agentzh: You have 1 new message. '/msg lambdabot @messages' to read it.

[12:04] <agentzh> @messages

[12:04] <lambdabot> kolibrie said 21h 17m 26s ago: I did that by hand - having an automated way of doing it would certainly be nice

[12:05] <agentzh> i thought S26 is already in UTF-8 but it was not.

[12:07] *** franck___ joined
[12:08] <diakopter> agentzh: again, oops/sorry :(

[12:10] *** frobnitz joined
[12:10] <agentzh> diakopter: why? i believe it's my mistake

[12:11] <diakopter> oh

[12:11] <diakopter> I updated/synced that file yesterday from Perl6::Perldoc...

[12:12] <diakopter> http://dev.pugscode.org/changeset?new=docs%2FPerl6%2FSpec%2FDocumentation.pod%4016740&old=docs%2FPerl6%2FSpec%2FDocumentation.pod%4016035

[12:12] <lambdabot> Title: Diff r16035:16740 for docs/Perl6/Spec/Documentation.pod - Pugs - Trac, http://tinyurl.com/254kbx

[12:13] <agentzh> diakopter: okay :)

[12:14] <diakopter> did you change the svn mime-type or the contents, just now?

[12:14] <agentzh> btw, i wrote the thesis for my B.S. degree using Pod 6 :) 

[12:14] <agentzh> diakopter: no, i've forgotten

[12:15] <agentzh> i've found several bugs in damian's Perl6::Perldoc's XHTML emitter, especially the numbering scheme.

[12:15] <agentzh> and i've patched it a lot

[12:15] <agentzh> Pod 6 is cool!

[12:20] <pasteling> "evalbot_r16750" at 193.200.132.135 pasted "Pugs build failure" (6 lines, 278B) at http://sial.org/pbot/25834

[12:20] *** evalbot_r16750 joined
[12:20] *** franck__ joined
[12:21] <diakopter> heh heh; oops

[12:21] * diakopter adds a pugs evalbot and parrot-perl6 evalbot to #parrot

[12:22] <moritz> diakopter: how to eval with parrot-perl6?

[12:22] <moritz> #eval or something? @eval?

[12:22] <diakopter> moritz: working on it...

[12:23] <diakopter> moritz: what do you suggest?

[12:23] <moritz> ?pugs $str and ?parrot $str

[12:23] <lambdabot> http://hackage.haskell.org/trac/ghc/newticket?type=bug

[12:23] <diakopter> hee hee

[12:24] <moritz> or ?p6por however you abbreviate p6-on-parrot

[12:24] <diakopter> why did lambdabot answer that way

[12:25] *** polettix joined
[12:25] * moritz doesn't know

[12:29] <lumi> I think it corrects for spelling (?pugs/?bugs)

[12:29] <lumi> Or so

[12:37] *** scw joined
[12:39] *** |Jedai| joined
[12:43] *** kanru joined
[12:43] <daxim_> ?lambda

[12:43] <lambdabot> Done.

[12:44] <daxim_> crazy software

[12:44] <moritz> ?lamba

[12:44] <lambdabot> Unknown command, try @list

[12:44] <daxim_> lambada! :D/-<  :D|-<  :D\-<

[12:51] *** WhiteYoung joined
[12:58] *** cmarcelo joined
[13:05] *** franck___ joined
[13:06] *** marmic joined
[13:11] *** diakopter is now known as diakopter_afk

[13:12] *** pnu_ joined
[13:21] *** bonesss joined
[13:39] *** rfordinal joined
[14:15] *** REPLeffect joined
[14:17] *** integral joined
[14:20] *** ruoso joined
[14:21] *** lidden joined
[14:22] *** TJCRI joined
[14:24] *** diakopter_afk is now known as diakopter

[14:24] <fglock> ruoso: ping

[14:25] <ruoso> fglock, pong

[14:26] <fglock> ruoso: mago said you will go to YAPC::EU

[14:28] *** cmarcelo joined
[14:28] *** cmarcelo joined
[14:29] *** cmarcelo joined
[14:34] <fglock> I'd like to ask for a code review of the kp6 source code - I need to know if I'm using invalid Perl 6 syntax; I can't tell because I've already got used to it

[14:36] <moritz> fglock: is there any part of the code that is particularly interesting for you?

[14:37] <ruoso> fglock, it's not completely defined yet...

[14:37] <ruoso> fglock, but I would love it for sure...

[14:37] <fglock> moritz: I'm not sure about this constructor style:   ::Obj( x => 1 )   # Obj.new( x => 1 )

[14:38] <fglock> moritz: this is probably wrong:   $thing.val(3)   instead of  $thing.val = 3

[14:39] <moritz> fglock: I think is is wrong indeed. you have to 'has $val is rw' for that, though

[14:39] <fglock> but I'm not sure if this is valid:   $thing.val := 3    # mp6 only has bind

[14:39] <fglock> can you bind to an accessor?

[14:40] <moritz> can you bind to hash/list elements?

[14:40] <fglock> yes

[14:40] <fglock> ok

[14:43] <moritz> I just tried to use pugs to check kp6 syntax

[14:43] <moritz> it seems to have problems with pods that contains ^# comments

[14:44] <moritz> if I remove that POD block, Grammar.pm and Regex::Grammar don't produce syntax errors

[14:45] <fglock> moritz: where is that?

[14:46] <moritz> fglock: in KindaPerl6::Grammar::Regexp, somwhere around line 186

[14:46] <moritz> v6/v6-KindaPerl6/lib/KindaPerl6/Traverse.pm compiles OK with pugs as well

[14:48] <fglock> it seems to be a pugs bug; I think it's valid pod

[14:48] <moritz> right

[14:48] <fglock> but I can fix that to avoid the bug

[14:49] <TimToady> ::Obj( ... ) is a coercion, which isn't guaranteed to produce a new object like .new

[14:49] <moritz> KindaPerl6::Visitor::Perl fails to compile as well, but that's a pugs bug too

[14:49] <diakopter> lumi: it's spec.pugscode.org - though it appears specs points there as well... so I'll add that as an alias...

[14:50] <moritz> all other modules under v6-KindaPerl6/lib/KindaPerl6 don't produce syntax errors with pugs

[14:50] <TimToady> $thing.val(3) only works if you define your own accessor that works that way

[14:52] *** [particle] joined
[14:52] <fglock> TimToady, moritz: thanks!

[14:53] <fglock> note for myself:  s/<'...'>/'...'/g  in several places in the grammar

[14:54] <fglock> lunch &

[14:54] *** the_dormant joined
[14:54] <kolibrie> I have lots of those s/<'...'>/'...'/g to do too

[14:54] <lumi> TimToady: Could you clarify 'official "sub" scope' in S04 for us please?

[14:54] *** offby1 left
[14:55] <TimToady> It's an official sub if it's introduced with a declarator keyword, but not if it starts with -> or {

[14:55] <TimToady> If you want to return from a closure, just use the p5ish sub {...}

[14:56] <diakopter> lumi: (fixed specs.)

[14:56] <TimToady> but I think I'm just restating what the spec says

[14:56] <lumi> TimToady: As implemented in pugs right now, if you call a sub with a block that has "return" in, it returns *from the sub you called*, and not from the lexically surrounding sub

[14:56] <TimToady> as quoted here earlier

[14:57] <lumi> I'm asking about dynamic/lexical meaning of scope

[14:57] *** vel joined
[14:57] <TimToady> the spec says lexical

[14:57] <lumi> The common lisp guys call dynamic scope "extent", probably to avoid this exact confusion

[14:57] <TimToady> well, extent is not a terribly good word either

[14:57] <TimToady> doesn't imply time domain

[14:58] <lumi> "duration"?

[14:58] <diakopter> "span"?

[14:58] <TimToady> course, it's also limited to your callees

[14:58] <TimToady> in addition to the time

[14:58] <lumi> But the pugs behaviour is right?

[14:59] <TimToady> if it returns from the "official" sub lexically surrounding the return, then it's right

[14:59] <lumi> "span" is better than "duration", then

[15:00] <lumi> Then it's wrong; like I said, it returns from the dynamically closest sub

[15:00] <TimToady> the basic principle is this

[15:00] <TimToady> when a user writes a sub or method

[15:00] <TimToady> they expect return to return from that sub or method

[15:00] *** vel_ joined
[15:00] <TimToady> regardless of how the blocks inside are implemented

[15:01] <TimToady> so the correct way is to throw a control exception that can only be caught by that lexically surrounding sub

[15:01] <TimToady> (can be optimized away with known control structures, of course)

[15:02] <TimToady> sub foo { mumble { return } } needs to treat the semantics of return as invariant regardless of whether mumble is builtin or user-defined

[15:02] <TimToady> even if mumble internally has a call stack 1000 deep

[15:03] <TimToady> does this make more sense?

[15:03] <TimToady> and do you know offhand if there's a test for this?

[15:04] <lumi> It does and I don't, and thanks :)

[15:04] <TimToady> guess I'll poke around and see

[15:05] <lumi> I'm off, have fun&

[15:08] *** REPLeffect joined
[15:11] *** the_dormant left
[15:11] *** statico joined
[15:12] *** statico joined
[15:12] *** statico joined
[15:22] *** amnesiac joined
[15:26] *** obvio171 joined
[15:29] *** diakopter is now known as diakopter_afk

[15:32] *** diakopter_afk is now known as diakopter

[15:36] *** ruoso joined
[15:41] *** ashelyb_ joined
[15:41] *** isaacd joined
[15:46] *** diakopter is now known as diakopter_afk

[15:49] *** buetow joined
[15:59] <svnbot6> r16751 | agentz++ | podhtm.pl - trivial edits

[16:00] <svnbot6> r16752 | agentz++ | started a (personal) branch of PCR under misc/pX/agentz

[16:00] *** diakopter_afk is now known as diakopter

[16:03] <pasteling> "evalbot_r16750" at 193.200.132.135 pasted "Pugs build failure" (6 lines, 278B) at http://sial.org/pbot/25837

[16:04] *** GabrielVieira2 joined
[16:06] <svnbot6> r16753 | agentz++ | agentz/PCR - moved t/Regex.pm to t/lib/Regex.pm and updated t/declare/00-demo.t accordingly

[16:18] *** |Jedai| is now known as jedai

[16:20] *** weinig joined
[16:21] <svnbot6> r16754 | kolibrie++ | version of talk presented at YAPC::NA 2007 (Houston)

[16:21] <svnbot6> r16754 | kolibrie++ | with some corrections suggested by TimToady++

[16:21] <svnbot6> r16755 | lwall++ | Test that return will bypass both bare blocks and pointy subs.

[16:21] <kolibrie> TimToady had been multitasking

[16:23] <pasteling> "evalbot_r16753" at 193.200.132.135 pasted "Pugs build failure" (6 lines, 278B) at http://sial.org/pbot/25839

[16:34] *** diakopter is now known as diakopter_afk

[16:37] *** diakopter_afk is now known as diakopter

[16:38] *** rindolf joined
[16:39] *** diakopter is now known as diakopter_afk

[16:39] *** frobnitz joined
[16:41] *** isaacd_ joined
[16:41] <svnbot6> r16756 | lwall++ | more tests of correct return

[16:47] *** justatheory joined
[16:47] *** franck__ joined
[16:49] <fglock> agentz: feel free to change perl5/PCR

[16:49] <agentzh> fglock: okay. thanks for the permission :)

[16:50] <fglock> you didn't need permission already :)

[16:50] <agentzh> heh

[16:50] <avar> change it how?:)

[16:50] <fglock> whatever good ideas you have

[16:50] <agentzh> yay

[16:51] * avar has been carrying around the idea of documenting PCR :)

[16:51] <fglock> I've been thinking to upgrade it to kp6's compiler structure, which is cleaner

[16:51] <agentzh> fglock: please do :)

[16:51] <agentzh> fglock: so i think it's safer for me to play aside

[16:52] <agentzh> fglock: i'm still playing around PCR instead of actually changing it.

[16:53] <agentzh> i'm currently working on the emitter testing facility.

[16:53] <avar> agentzh: cool, to what end?:)

[16:53] <agentzh> piece by piece

[16:54] <agentzh> i'm adding smart comments to the generated perl 5 code so that i can reconstruct the tree

[16:54] <agentzh> something like "## <alt> ... ## </alt>

[16:54] <fglock> I'm trying to concentrate in kp6 project planning - I wish I get to YAPC::EU with something that people can hack on

[16:54] <agentzh> fglock: okay :) feel free to work on whatever you like :)

[16:55] <avar> agentzh: My PCR related TODO is generalizing the .pm => .pmc compiler to use along with a re::engine 

[16:55] <avar> and improving the perl5 rx emitter

[16:55] *** diakopter_afk is now known as diakopter

[16:55] <agentzh> avar: yes, i'm watching your work

[16:55] * avar lazy

[16:55] <agentzh> avar: I'm also very interested to promote the use of PCR on the p5 land

[16:55] <agentzh> *in promoting

[16:56] <agentzh> currently PCR is still quite p6-centric, more or less

[16:56] <avar> I want something that works morke like Parse::*, say make a "Parse::Rule" that happens to use PCR to compile a C<package Grammar::*> which is a p5 package

[16:56] <avar> So people can ship modules with emitted PCR code

[16:57] <avar> A re::engine could then be one interface to that

[16:57] <agentzh> avar: that's exactly what i want

[16:57] <avar> agentzh: hooha!

[16:57] <agentzh> avar: i've been trying to use PCR to rewrite my makefile parser

[16:57] <agentzh> it's currently written by hand

[16:57] <agentzh> while Parse::RecDescent is too slow...

[16:58] <avar> PCR is sort of slow, but it could be a lot faster with a 5.10 rx emitter:)

[16:58] <agentzh> avar: looking forward to that :)

[16:59] <avar> http://svn.pugscode.org/pugs/perl5/Pugs-Compiler-Rule/util/compile_p6grammar.pl

[16:59] <lambdabot> http://tinyurl.com/2b4vrv

[16:59] <fglock> I'd like to do a 5.10 emitter for kp6, but I'm not sure how to deal with backtracking in subregexes and recursive regexes

[16:59] <avar> this could be used as part of a M::I that converts a Grammar*.pm to Grammar*.pmc

[17:00] <agentzh> avar: thanks

[17:00] <fglock> subregexes can be inlined, but recursion is more complicated

[17:00] <avar> maybe you could do:

[17:00] <fglock> agentz: you could use v6.pm

[17:00] <fglock> agentzh

[17:01] <avar> $str =~ $rx; if (pos($str) == $a_pos_that_matches_where_it_should_recurse) { recurse($str, $nextrx) }

[17:01] <avar> ?

[17:01] <agentzh> fglock: *nod*

[17:01] <avar> Or (??{}) maybe?

[17:02] *** bonesss joined
[17:03] <fglock> for example,  /<xxx_star> x z /

[17:03] <fglock> the caller regex must tell xxx_star() to backtrack

[17:04] <avar> where must it backtrack?

[17:04] <fglock> it must match one-less 'x'

[17:05] <avar> ah

[17:05] <fglock> in order for the caller to match

[17:05] <[particle]> as in regex xxx_star { xxx* }

[17:05] *** diakopter is now known as diakopter_afk

[17:05] * avar no idea

[17:06] <[particle]> fglock: you need continuations

[17:06] *** dduncan joined
[17:06] <[particle]> hey xxx_star: pick up where you left off

[17:07] <fglock> [particle]: I mean, implement this using plain perl5.10 regex

[17:08] <[particle]> yeah, i know. i don't know how to get around it without continuations

[17:08] <fglock> it works in PCR-perl5, but it is perl5 code - not p5regex

[17:08] *** justatheory_ joined
[17:08] <[particle]> can you implement that bit with p5 code?

[17:09] <avar> when I say p5regex I don't mean /purely/ p5regex. You'll always need some code too..

[17:13] <avar> but it could defenetely be made faster by using more of the p5 engine

[17:16] <fglock> hmm - there is something wrong here:  perl -e 'use v6-alpha'  ' regex main::xxx { x* } "xxxxz" ~~ /<main::xxx>xz/; say $/.perl '

[17:16] *** vel joined
[17:17] <fglock> [particle]: re implement, yes 

[17:18] *** bonesss is now known as bones`OFF

[17:18] *** Psyche^ joined
[17:18] *** Psyche^ is now known as Patterner

[17:18] *** |Jedai| joined
[17:18] *** unobe is now known as unobe_away

[17:19] *** bonesss joined
[17:19] *** bonesss is now known as bones`OFF

[17:19] *** elmex joined
[17:19] *** bonesss joined
[17:20] *** diakopter_afk is now known as diakopter

[17:21] *** cmarcelo left
[17:21] <avar> fglock: Have you made any p6 rx engine where you can write a pure-perl6 method that does the same thing as token { (.*) }

[17:21] *** cmarcelo joined
[17:21] <avar> i.e. a "multi sub" in a grammar that sets up a capture

[17:22] <avar> would you do that by returning a match object from it?

[17:23] <fglock> avar: yes - mp6 regex emitter emits p6 code, which is recompiled to the backend; looking for an example...

[17:24] *** justatheory_ joined
[17:25] <fglock> avar: here it is:  perl kp6-perl5.pl --do Token EmitPerl6 < examples/token.pl

[17:25] * avar will look later, don't have a pugs copy

[17:27] <fglock> np - you shouldn't look at it anyway - the generated code isn't pretty :)

[17:27] <PerlJam> fglock: are you at yapc?

[17:28] <fglock> PerlJam: no, I'm still in Brazil

[17:38] <fglock> the generated code for this looks good; it's a PCR bug:  perl -e 'use v6-alpha' ' regex Main::xxx {x*}; "xxxxz" ~~ /<Main::xxx>xz/; say $/.perl '

[17:40] <avar> huha bug!

[17:41] <avar> fglock: Since the kp6 backend is "better"-ish wouldn't it make more sense in the long run to just use that for the application I had in mind?

[17:41] <avar> I.e. to take a grammar end emit p5 code

[17:43] <fglock> avar: yes, but kp6 is still way behind v6.pm and pugs - it depends on what limitations you can accept

[17:44] <[particle]> workinger trumps betterer

[17:44] <avar> huhuu

[17:44] <fglock> kp6 is good to hack-on; not hack-with yet :)

[17:45] <fglock> mp6 is quite usable for building p5 modules - the dependencies are minimal

[17:46] <fglock> though it's not in CPAN

[17:47] <svnbot6> r16757 | diakopter++ | updated feather stuff...

[17:49] *** franck___ joined
[17:50] <pasteling> "evalbot_r16756" at 193.200.132.135 pasted "Pugs build failure" (6 lines, 278B) at http://sial.org/pbot/25842

[17:55] *** justatheory_ is now known as justatheory

[17:55] <svnbot6> r16758 | fglock++ | kp6-roadmap - updated the list of syntax implementation errors

[17:57] *** Southen_ joined
[17:57] <svnbot6> r16759 | agentz++ | [agentz/PCR]

[17:57] <svnbot6> r16759 | agentz++ | * added t/lib/Emitter.pm for testing the emitter outputs

[17:57] <svnbot6> r16759 | agentz++ | * added t/emitter/00-ratchet.t to test the ratchet emitter's outputs

[17:57] <svnbot6> r16759 | agentz++ | * removed trailing whitespaces in the .pm files

[17:57] <svnbot6> r16759 | agentz++ | * added "smart comments" to identify each piece generated by each emitter sub

[17:59] <agentzh> the unit tests for the emitter can automatically update themselves

[17:59] <agentzh> the emitter templates are supposed to change very often after all :)

[18:01] <agentzh> see the following .t file for an example: http://svn.pugscode.org/pugs/misc/pX/agentz/Pugs-Compiler-Rule/t/emitter/00-ratche.t

[18:01] <lambdabot> http://tinyurl.com/yuksah

[18:01] <agentzh> comments welcome :)

[18:01] <pasteling> "evalbot_r16758" at 193.200.132.135 pasted "Pugs build failure" (6 lines, 278B) at http://sial.org/pbot/25843

[18:02] <agentzh> off to bed &

[18:02] *** agentzh left
[18:27] *** franck__ joined
[18:33] *** vel joined
[18:38] *** takesako____ joined
[18:41] *** jenk3m joined
[18:43] *** b_jonas joined
[18:44] *** BooK_ joined
[18:56] *** jisom joined
[19:01] *** beppu_ is now known as beppu

[19:21] <diakopter> parrot svn, visually represented (but somewhat slow): http://perlcabal.org/svn/parrot/revision?rev=19378   also, pugs in there somewhere too. :)

[19:29] *** diakopter is now known as diakopter_afk

[19:30] *** rindolf joined
[19:31] *** ludan joined
[19:32] <ludan> hola

[19:32] *** diakopter_afk is now known as diakopter

[19:32] <diakopter> hi ludan

[19:40] <rindolf> Hi all.

[19:41] <rindolf> TimToady: here?

[19:41] <rindolf> <pasteling> "rindolf" at 82.81.233.250 pasted "Excerpt from a pod2man generated man page - why is there a translation for "|"?" (18 lines, 795B) at http://sial.org/pbot/25846

[19:41] <rindolf> I'd like to be enlightened.

[19:42] * Tene directs rindolf to http://web.enlightenment.org/ ;)

[19:42] <lambdabot> Title: Enlightenment - Beauty at your fingertips

[19:47] <TimToady> no clue, other than it looks like it's translating to "bv", which I'd assume is "broken vertical" or some such and probably prettier in someone's font somewhere...

[19:48] <rindolf> Hi TimToady 

[19:48] <rindolf> TimToady: well, it breaks the searching through the man page/perldoc.

[19:53] *** diakopter is now known as diakopter_afk

[19:55] *** diakopter_afk is now known as diakopter

[19:56] <meppl> good night

[19:57] <Aankhen``> Good night.

[19:58] <moritz> moose!

[20:03] <Aankhen``> Aardvark!

[20:06] <fglock> meppl: hi

[20:07] *** Southen joined
[20:09] *** weinig joined
[20:17] *** rashakil joined
[20:21] <moritz> fglock: is 'method' implemented in miniperl6?

[20:21] <svnbot6> r16760 | moritz++ | [mp6] miniperl6-spec.pod is now (very simple) POD

[20:21] <fglock> moritz: I think so - looking

[20:22] <fglock> yes

[20:23] <fglock> and 'self'

[20:23] <moritz> so 'method foo($self:){$self.bar}' is the same as method foo(){self.bar)' ?

[20:24] <svnbot6> r16761 | lwall++ | complain usefully on p5ish shift ops

[20:25] <wolverian> does 'method foo ($a, $b: $c) { ... }' ever make sense?

[20:25] <moritz> wolverian: I don't think so

[20:26] *** Southen_ joined
[20:28] * moritz is confused... what is '@.body.>>emit' ?

[20:28] *** jan__ joined
[20:28] <moritz> what does .>>$methodname do?

[20:28] <pasteling> "fglock" at 201.54.129.80 pasted "method and self" (11 lines, 338B) at http://sial.org/pbot/25847

[20:29] <Tene> moritz: hyper

[20:29] <Aankhen``> Shouldn't that be >>.?

[20:29] <[particle]> moritz: it runs the method against each object in @.body

[20:29] <Aankhen``> (The question mark is ancillary, sorry for the confusion.)

[20:29] <TimToady> either is allowed

[20:29] <TimToady> as is .>>.

[20:29] <Aankhen``> Ah.

[20:29] *** nuff_ joined
[20:29] <fglock> moritz: check the paste

[20:30] <TimToady> however, if .emit does I/O, it can occur in any order

[20:30] <moritz> ok

[20:30] <moritz> fglock: thanks

[20:30] <wolverian> .>> is just weird to me. is >> a method?

[20:30] <TimToady> no, modifies a postfix to a hyperop

[20:30] <moritz> wolverian: it's the hyper op (I just learned that)

[20:30] <wolverian> I guess it can be seen as hypering the .

[20:30] <wolverian> TimToady, postfix being .?

[20:30] <wolverian> er

[20:30] <TimToady> .emit is the postfix

[20:30] <wolverian> right 

[20:30] <[particle]> it's like cout >> "foo" ;)

[20:31] <[particle]> ...except nothing like it

[20:31] <moritz> (C++)--

[20:31] <TimToady> .foo(@args) is all a postfix

[20:31] <wolverian> I'm just used to thinking $foo>>.meth and have to re-evaluate my reasons

[20:31] <moritz> fglock: so mp6 even supports hyper ops? cool ;)

[20:32] <TimToady> I would write >>.meth myself

[20:32] <fglock> it's just syntax sugar; it doesn't thread

[20:32] <wolverian> TimToady, so why is .>> allowed? sorry, I've been trying to keep up with the synopses, but I've missed some, I'm sure.

[20:33] <fglock> hmm - it's not just syntax sugar - it depends on what the backend implements

[20:34] <TimToady> wolverian: no good reason, probably

[20:34] <fglock> and '@.body.>>emit' is probably wrong, as TimToady said

[20:34] <fglock> because it would emit in any order

[20:35] <moritz> even if emit() is not declared as 'is hyper'?

[20:35] * moritz is truely confused now

[20:35] <TimToady> emit has no idea whether it might be hyperized

[20:39] <svnbot6> r16762 | fglock++ | kp6-roadmap - TODO: '@.body.>>emit' is wrong, because it would emit the statements in any order

[20:40] <pasteling> "evalbot_r16761" at 193.200.132.135 pasted "Pugs build failure" (6 lines, 278B) at http://sial.org/pbot/25850

[20:40] <fglock> the roadmap is getting more interesting - lots of simple things to do

[20:41] <fglock> it's more hackathon-friendly :)

[20:41] *** drupek12 joined
[20:47] <fglock>  @body.>>emit desugars to something like  @body.hyper:{ .emit }   # I hope the syntax is right

[20:53] *** cmarcelo joined
[21:03] <Aankhen``> moritz: Ping.

[21:06] <moritz> Aankhen``: pong

[21:06] <Aankhen``> moritz: Hola.  Are actions stored in the DB itself as normal lines with a * before the nickname?

[21:07] <moritz> Aankhen``: yes, they are

[21:07] <Aankhen``> Ah.

[21:07] <Aankhen``> Okay, I'mma add another class to the TDs for actions.

[21:07] <moritz> perhaps that was not the best of ideas ;)

[21:07] <Aankhen``> Hehe.

[21:07] <moritz> I mean storing them this way

[21:11] <spinclad> at least irc protects itself from such nicks

[21:11] <svnbot6> r16763 | diakopter++ | correct typo/spello in a comment in Perl-6.0.0-STD.pm

[21:11] <svnbot6> r16764 | Aankhen++ | * [irclog] special class for actions.

[21:11] <Aankhen``> I was thinking of italicising action text to make it more distinctive.

[21:11] <moritz> Aankhen``: I'll go to bed soon, and if we're unlucky I'll not have internet access until monday :(

[21:11] <Aankhen``> Ouch! :-(

[21:12] <Aankhen``> How come?

[21:12] <moritz> Aankhen``: re itilic... go right ahead, but then remove the italic from the bots...

[21:12] <moritz> Aankhen``: perhaps but them in small caps instead?

[21:12] <Aankhen``> No, I meant just the action text.  The nicks would be untouched.

[21:12] <moritz> Aankhen``: visiting my girlfriend's parents

[21:12] <Aankhen``> Oh, I see.

[21:12] <moritz> ok, that's fine by me

[21:12] <Aankhen``> Well, have fun and good luck. ^_^

[21:13] <moritz> no need for luck, i'm well accepted ;) but thanks anyway ;)

[21:13] <Aankhen``> Ah, nevermind that then. :-P

[21:15] *** thoughtp1lice is now known as thoughtpolice

[21:15] <svnbot6> r16765 | Aankhen++ | * [irclog] italicise action text.

[21:16] <Aankhen``> moritz: How does that look to you?

[21:16] * Aankhen`` is undecided.

[21:16] <Aankhen``> (It's distinctive, but I'm not sure whether it looks nice.)

[21:16] <thoughtpolice> later moritz 

[21:17] <pasteling> "evalbot_r16764" at 193.200.132.135 pasted "Pugs build failure" (6 lines, 278B) at http://sial.org/pbot/25851

[21:20] *** marmic joined
[21:22] <Aankhen``> moritz: I'm off to shower.  In case you leave before then, take care. :-)

[21:25] <moritz> bye, and happy hacking ;-) &

[21:26] *** buubot joined
[21:31] *** BooK joined
[21:36] *** weinig joined
[21:36] *** weinig_ joined
[21:38] *** buubot joined
[21:50] <Jmax> hm

[21:51] <Jmax> that's a damn good irclog

[21:52] <Jmax> too bad it's not written in p6 ;o

[21:52] <Jmax> does POE work well with p6/pugs?

[21:54] <avar> no?

[21:56] <Jmax> ok

[21:56] *** rashakil joined
[22:00] *** weinig joined
[22:01] *** Psyche^ joined
[22:01] *** Psyche^ is now known as Patterner

[22:03] *** isaacd__ joined
[22:10] <Aankhen``> Jmax: Perl 6 is slated to get events built into the language, so POE doesn't make sense.

[22:10] <Jmax> oh? nice

[22:10] *** rhr joined
[22:11] *** lumi joined
[22:26] *** pbuetow joined
[22:27] <clkao> TimToady: what are the things in like $self->madness("o d [ {") ? are they documented anywhere?

[22:28] <Tene> clkao: what things are you referring to?

[22:29] <TimToady> similar things are labelled with different madprops depending on where they are in the p5 grammar

[22:30] <TimToady> that just picks the first madprop that matches

[22:31] <clkao> ah ok. i see mad/p55 has /home/larry hardcoded ;)

[22:34] *** unobe_away is now known as unobe

[22:38] *** weinig joined
[22:38] *** unobe is now known as unobe_away

[22:42] *** diakopter is now known as diakopter_afk

[23:05] *** hkb_zz_ joined
[23:18] *** Aankhen`` joined
[23:41] *** weinig joined
