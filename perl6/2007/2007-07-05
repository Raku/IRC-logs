[00:01] *** lambdabot joined
[00:08] *** r0bby joined
[00:10] *** felipe joined
[00:38] *** Limbic_Region joined
[00:55] *** xinming joined
[01:16] *** rlb3 joined
[01:26] *** alexe joined
[01:44] *** dolmans joined
[02:08] *** obvio171 joined
[02:12] *** diakopter_afk is now known as diakopter

[02:12] * diakopter hears a pin drop

[02:13] *** sunnavy joined
[02:18] *** TimToady sets mode: +R
 
[02:18] <TimToady> just practicing...

[02:18] *** TimToady sets mode: -R
 
[02:21] * Aankhen`` faints from shock.

[02:22] *** diakopter sets mode: +R
 
[02:22] *** diakopter sets mode: -R
 
[02:22] <Limbic_Region> TimToady - do you read use.perl journals?

[02:22] * Aankhen`` spontaneously combusts.

[02:22] <diakopter>  /alias shh mode #perl6 +R

[02:22] <Limbic_Region> specifically, the one from Phil Crow?

[02:23] <Limbic_Region> http://use.perl.org/~philcrow/journal/33683

[02:23] <lambdabot> Title: Journal of philcrow (3401)

[02:23] <TimToady> yes, the alias is what I was practicing :)

[02:24] <Limbic_Region> in a nutshell, he is writing the Java to Perl 6 thingy for Tim Bunce for DBI2 and needs help with classes and constructors in perl 6

[02:24] <Limbic_Region> I attempted to point him here

[02:24] * Limbic_Region calls it a night

[02:29] <TimToady> @foo

[02:29] <lambdabot> Maybe you meant: faq ft todo yow

[02:30] <TimToady> er, no, I didn't mean faq ft todo yow!

[02:32] <diakopter> @faq

[02:32] <lambdabot> The answer is: Yes! Haskell can do that.

[02:32] <diakopter> @ft

[02:32] <lambdabot>  ft: scripts/FT/FTbase.hs:211:16-29: Irrefutable pattern failed for pattern (w : ws)

[02:32] <diakopter> sweet

[02:33] <Aankhen``> TimToady: You just *think* you didn't mean it.

[02:34] * diakopter wonders if lambdabot can be set to ignore unidentified nicks

[02:34] <diakopter> who writes/maintains/hosts lambdabot

[02:34] <gaal> dons @ #haskell i think

[02:34] <gaal> (moose all)

[02:35] <diakopter> (moose any)

[02:35] <Aankhen``> Hola gaal. :-)

[02:35] <gaal> heya Aankhen`` :)

[02:36] <Aankhen``> What's new?

[02:36] <TimToady> diakopter: Yes! Haskell can do that.

[02:37] <diakopter> @faq Can Haskell do that?

[02:37] <lambdabot> The answer is: Yes! Haskell can do that.

[02:37] <gaal> @google slacklining

[02:37] <lambdabot> http://en.wikipedia.org/wiki/Slackline

[02:37] <lambdabot> Title: Slacklining - Wikipedia, the free encyclopedia

[02:37] <TimToady> @faq Can Haskell screw with your mind?

[02:37] <lambdabot> The answer is: Yes! Haskell can do that.

[02:37] <gaal> Aankhen``: been trying that out, it's fun!

[02:37] <diakopter> @faq Who can do that?

[02:37] <lambdabot> The answer is: Yes! Haskell can do that.

[02:38] <gaal> they should rename @google to @wikipedia :)

[02:38] * diakopter notes that Haskell must have lots of tuits, round ones even.

[02:38] <gaal> can Haskell solve the halting problem?

[02:39] *** takesako____ joined
[02:41] <gaal> > sequence [[1,2],[10,20,30]]

[02:41] <lambdabot>  [[1,10],[1,20],[1,30],[2,10],[2,20],[2,30]]

[02:42] <gaal> (That is a demonstration of the question, "can haskell golf make your brain hurt?")

[02:43] <TimToady>  ?eval 1,2 X 1,2,30

[02:43] <TimToady> ?eval 1,2 X 1,2,30

[02:43] <evalbot_r16845> ((1, 1), (1, 2), (1, 30), (2, 1), (2, 2), (2, 30))

[02:43] <TimToady> er, I mean

[02:43] <gaal> ("given a list of lists, construct all possible lists that have elements from each of the list". answer, use the list monad")

[02:43] <TimToady> ?eval 1,2 X 10,20,30

[02:43] <evalbot_r16845> ((1, 10), (1, 20), (1, 30), (2, 10), (2, 20), (2, 30))

[02:43] <TimToady> ?eval 1,2 X~X 10,20,30

[02:43] <evalbot_r16845> Error: No such subroutine: &X

[02:44] <gaal> does that work for longer inputs? that is more than two lists?

[02:44] <TimToady> ?eval 1,2 X 3,4 X 5,6

[02:44] <evalbot_r16845> ((1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6))

[02:44] <gaal> awesome!

[02:44] <TimToady> I hear you snickering

[02:44] <diakopter> > sequence [[1,2],[3,4],[5,6]]

[02:45] <lambdabot>  [[1,3,5],[1,3,6],[1,4,5],[1,4,6],[2,3,5],[2,3,6],[2,4,5],[2,4,6]]

[02:45] <gaal> haskell and perl are friendly contenders in golf

[02:45] <gaal> who'da {thunk} it

[02:45] <TimToady> ?eval [X](1,2;3,4;5,6)

[02:45] <evalbot_r16845> ((1, 2, 3, 4, 5, 6),)

[02:45] <TimToady> ENOIMPL

[02:45] <Aankhen``> gaal: That's evil.

[02:45] <TimToady> ?eval [X] [1,2],[3,4],[5,6]

[02:45] <evalbot_r16845> ((1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6))

[02:46] <gaal> Aankhen``: >>= is concatMap in the list monad

[02:46] <Aankhen``> gaal: Actually, I meant this: <@gaal> who'da {thunk} it

[02:47] * gaal forces the pun, er, i mean, thunk

[02:47] * Aankhen`` brutally murders gaal.

[02:47] <gaal> please don't do that!

[02:47] <Aankhen``> Too late, you should have spoken up sooner.

[02:47] <TimToady> <thunk>!

[02:47] <gaal> PRE {say "please don't do that" }

[02:48] <Aankhen``> Curses.

[02:48] <Aankhen``> Very well, you win this round, Mr. Yahas.

[02:48] <TimToady> POST { "laughs best

[02:48] <TimToady> "}

[02:48] <gaal> Do Haskell cops eat out at Thunkin' Donuts?

[02:49] <Aankhen``> Note to self: brutally murder gaal over and over again.

[02:49] <gaal> ok that's walking the slackline a little to low

[02:50] <gaal> on sale in Bad Pun and Beyond: Metaphor Mixer!

[02:50] <gaal> *too

[02:51] <TimToady> et too, brute?

[02:53] *** BinGOs_ joined
[02:57] <diakopter> POST { "laughs loudest?" }

[02:58] <TimToady> END { "left standing" }

[02:58] <diakopter> POST { "holding the rope" }

[02:59] <gaal> BEGIN { my $light } # oops, now it's out of scope

[03:00] <TimToady> BEGIN { my COMPILING::<$light> } # now it's not

[03:02] <TimToady> FIRST { @lawyersÂ».kill }

[03:02] * diakopter loses his siblings

[03:02] <diakopter> and father for that matter

[03:03] <TimToady> that's what you call, raising the bar...

[03:04] <diakopter> `cept in this case, the bench is above the bar

[03:04] *** elmex_ joined
[03:05] <diakopter> darn, I'm sure there was a pun in there somewhere :|

[03:05] <TimToady> well, don't press it

[03:05] * diakopter smacks his forehead

[03:08] <diakopter> package Foo; # implies use v5; or does use v5; still have to appear somewhere?

[03:10] <diakopter> "This form is illegal in the middle of a Perl 6 file." - how does perl6 [or ./parrot perl6.pbc] know it's a Perl 6 file?  only if it has 'use v6;' at the [very?] top?

[03:10] <diakopter> (asking about S10 here)

[03:21] *** takesako____ left
[03:28] <diakopter> I'll take that as a yes (no), no (see S11, module Foo; also works)

[03:32] *** dduncan left
[03:36] *** amnesiac joined
[03:45] *** sunnavy joined
[03:47] <diakopter> TimToady: re S11's "Anything matching <alpha>+ \: \S+ is treated as an author(ity)" - (many types of) URIs can contain whitespace (if it's inside quotes)...

[04:15] *** nipotan_ joined
[04:17] *** bsb left
[04:20] *** drupek12 joined
[04:21] *** sheriff left
[04:27] *** weinig joined
[04:31] *** dduncan joined
[04:34] *** justatheory joined
[04:35] *** jrockway joined
[04:39] *** jrockway joined
[04:41] *** jisom joined
[04:49] *** mjk joined
[04:49] *** diakopter is now known as diakopter_afk

[04:54] *** mjk joined
[04:56] *** |mjk| joined
[04:57] <dduncan> question ... in regards to this part of S03 describing sort comparisons, it says Order::Increase, Order::Same, or Order::Decrease (which numerify to -1, 0, or +1)

[04:57] <dduncan> so does that mean that Increase corresponds to -1 ?

[04:58] *** _mjk_ joined
[04:59] *** ft joined
[04:59] *** scw joined
[04:59] *** Maddingue joined
[05:02] *** args joined
[05:03] *** [particle] joined
[05:04] *** drupek128 joined
[05:05] *** drupek128 left
[05:08] *** jisom joined
[05:08] *** thrig joined
[05:08] *** hcchien joined
[05:17] *** _mjk_3 joined
[05:25] *** laye joined
[05:38] *** devogon joined
[05:39] *** unobe is now known as unobe_away

[05:42] *** ronny_ joined
[05:51] <TimToady> dduncan: see both p5 and p6:

[05:51] <TimToady> ?eval 1 <=> 2

[05:51] <evalbot_r16845> -1

[05:52] <amnesiac> TimToady, p6 still supports to tell it what sorting algorithm to use for the sort call?

[05:52] <dduncan> so, my question was whether eg -1 corresponded to ::Increase or ::Decrease

[05:52] <TimToady> do you think going from 1 to 2 is an increase?

[05:53] <dduncan> I follow you now that this interpretation is given

[05:53] <TimToady> C's sort originally defined it in terms of subtraction, so <=> and friends have always returned -1 for increasing

[05:53] <dduncan> before I was interpreting the names as to be what to do if you were sorting the 2 values, what you do with the first one's position in a list

[05:54] <dduncan> so eg given 1 <=> 2, you would be decreasing the 1 relative to the 2 in the sorted list, if you move it at all

[05:54] <TimToady> I think most p6 sorts will not use <=> or cmp, but a 1-ary extractor

[05:55] <dduncan> that was my confusion ... I don't know if its worth updating the synopsis to clarify the intended interpretation of the names or not

[05:55] <dduncan> eg, "if you increase lhs, do you move towards rhs"

[05:56] <dduncan> or something like that

[05:57] <dduncan> question: might it be worth naming these ::Before and ::After instead, which could then parallel the &before and &after operators, if I remember their names correctly

[05:57] <TimToady> well, pugs should really be returning Order::Increasing much like it returns Bool::True

[05:57] <TimToady> and you shouldn't be concerned with the values of the enum

[05:58] <dduncan> I'm not concerned about the enum's values so much as that I was confused by the documentation, as it looked like 1 <=> would return increase when I thought it looked like it shoud return ::decrease

[05:58] *** Schwern joined
[05:58] <dduncan> er 1 <=> 2

[05:58] <dduncan> but still, I now understand your interpretation

[05:58] <TimToady> "as you move from left to right, the values are increasing"

[06:01] <dduncan> actually, as I think more, increase|decrease are better names for this than before|after, since they describe the 2 comparands together, and not just the first one

[06:01] <dduncan> maybe

[06:01] <Aankhen``> Uhzactly.

[06:03] <dduncan> separately ... maybe this has been discussed to death already, but does every type have a default ordering semantics, perhaps using their memory address, or would we get a fail when trying to sort 2 values that aren't of a normally ordinal type?

[06:03] <dduncan> eg, what should happen if you try to sort a list of Any ?

[06:04] <dduncan> fail or some non-important Object provided default?

[06:04] <dduncan> I mean the generic sort, not the string/num casting one

[06:04] <TimToady> cmp, not leg or <=>

[06:05] <TimToady> uses eqv semantics rather than ===, so based on canonicalization of some kind

[06:05] <TimToady> don't know what the default canonicalization for eqv is though

[06:06] <wolverian> list of Any? heresy! 

[06:06] <TimToady> certainly an arbitrary one can be imposed for types that don't support an explicit cmp operation

[06:06] <wolverian> (but old heresy, so it's okay) 

[06:06] <dduncan> okay

[06:12] *** jisom joined
[06:13] *** Schwern joined
[06:16] *** jisom joined
[06:18] *** jisom joined
[06:21] *** jisom joined
[06:21] *** _mjk_ joined
[06:47] *** kane_ joined
[06:49] *** drupek12 joined
[06:50] *** kane_ joined
[06:57] *** miyagawa joined
[07:06] *** iblechbot joined
[07:06] <meppl> good morning

[07:10] <dduncan> I second that notion

[07:11] <Aankhen``> I take exception to that idea!

[07:14] *** edenc joined
[07:14] *** franck__ joined
[07:16] *** ronny_ left
[07:48] *** unobe_away is now known as unobe

[07:52] *** buetow joined
[07:55] *** BinGOs_ is now known as BinGOs

[08:03] *** laye joined
[08:07] *** jrockway joined
[08:09] <pugs_svnbot> r16846 | Darren_Duncan++ | trunk:

[08:09] <pugs_svnbot> : ext/Muldis-DB/ : in (Core|Catalog|Num|Temporal|Spatial).pod, fleshed out the DESCRIPTION, added type hierarchy diagrams, did some reordering; in Core.pod, added the Order data type

[08:09] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/16846

[08:09] <lambdabot> Title: Changeset 16846 - Pugs - Trac

[08:10] <pasteling> "evalbot_r16845" at 193.200.132.135 pasted "Pugs build failure" (6 lines, 278B) at http://sial.org/pbot/26036

[08:12] *** obvio171 joined
[08:12] <lumi> 3 bot streak

[08:13] <moritz> re

[08:16] *** Psyche^ joined
[08:16] <moritz> Aankhen``: agentzh++ tried to allow some gb* encodings (or one, rather), and that broke the utf8 in some places

[08:21] <moritz> Aankhen``: maybe we should remove POST from the abbreviation list because it can be a post condition to a sub/method as well as parrot-thingy ;)

[08:29] *** dduncan left
[08:32] *** Psyche^ is now known as Patterner

[08:38] *** evanl_ joined
[08:39] *** evanl_ left
[08:41] *** nipotan joined
[08:45] *** nipotan joined
[08:47] <Aankhen``> moritz: Regarding gb* encodings, where did they come in?  After all, you can only have one encoding per page. :-S

[08:47] <moritz> diakopter++ # deleting spam in irc logs

[08:47] <Aankhen``> moritz: As for the POST thing, hmm, good point.  I figured the uppercase would protect it, but I guess you'd get too many false positives with the block traits.

[08:48] <moritz> Aankhen``: all output is utf-8 encoded, but each line is decoded separately, so far latin1 and utf8 where supported

[08:48] <pugs_svnbot> r16847 | Aankhen++ | trunk:

[08:48] <pugs_svnbot> : * [irclog] abbreviations: removed POST, added PAM.

[08:48] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/16847

[08:48] <lambdabot> Title: Changeset 16847 - Pugs - Trac

[08:48] <Aankhen``> moritz: Ah, decoding.

[08:49] <Aankhen``> moritz: Well, I do feel I should point out again that browsers are seeing the logs as UTF-8 anyway right now. :-P

[08:49] <Aankhen``> â¦but you know that already.  Ahem.

[08:50] * Aankhen`` goes back to reading stuff.

[08:50] <moritz> Aankhen``: the problem is that with agentz's stuff some of it broke, e.g. utf8 strings where encoded as something different

[08:50] <moritz> s/encoded/decoded/

[08:50] <moritz> no, encoded ;)

[08:51] <Aankhen``> Oh, okay.

[08:51] <Aankhen``> Sorry for being so slow.

[08:51] <Aankhen``> I think it's past my bedtime, but as usual I refuse to sleep.

[08:52] *** buetow joined
[08:54] <moritz> good choice ;)

[09:16] *** ruoso joined
[09:52] <wolverian> eek, why is 'view' on feather elvis? 

[09:53] <wolverian> it's cute and all, but I don't know it..

[09:53] <BinGOs> you don't know vi?

[09:53] <wolverian> I've only used vim

[09:54] <BinGOs> it's all vaguely the same.

[09:54] <wolverian> vague isn't enough for "just works" :) 

[09:55] <moritz> wolverian: probably controlled via update-alternatives

[09:55] <wolverian> yeah. 

[09:56] *** zeph_ joined
[09:59] *** isaacd joined
[10:34] *** zeph_ left
[10:36] *** riffraff joined
[10:36] <riffraff> hi

[10:47] *** scw joined
[11:17] *** cmarcelo joined
[11:49] *** rho joined
[11:51] *** nipotan is now known as nipotaway

[12:08] *** fglock joined
[12:11] *** sunnavy joined
[12:27] *** monomorph joined
[12:29] <moritz> rehi

[12:30] *** DarkWolf84 joined
[12:30] <fglock> hi

[12:31] <DarkWolf84> hi

[12:31] <DarkWolf84> :)

[12:31] *** Limbic_Region joined
[12:36] *** isaacd_ joined
[12:37] <moritz> fglock: do you know if kp6 parses/compiles Prelude.pm?

[12:37] *** daxim_ joined
[12:38] <fglock> moritz: not likely; the current kp6 grammar is very simple

[12:38] <fglock> v6.pm might parse it

[12:38] <moritz> fglock: ok.. I'll try once I have my laptop back

[12:40] <fglock> re kp6 - should I use 'blib/' for compiled files, and 'lib/' for hand-written ones?

[12:40] <moritz> I think it makes sense, yes

[12:40] <fglock> my problem is, I have more than one perl5 backend

[12:41] <fglock> so I thought about using lib5/, blib5/, lib5regex/, blib5regex/, lib5mo/, ...

[12:41] *** jedai joined
[12:41] <moritz> what about $backend/blib/ ?

[12:42] <fglock> that's cleaner

[12:42] <moritz> or blib/$backend/ ?

[12:42] <moritz> I don't know, just random mooses

[12:42] <moritz> erm, thoughts ;)

[12:43] <fglock> and kp6/lib/ for the kp6 source files?

[12:43] <moritz> well, kp6 is already in a dir of its own

[12:43] *** rfordinal joined
[12:44] <moritz> I just imagine having a vast number of emitters, and each using a top level directory

[12:44] <moritz> not a good idea

[12:44] <moritz> so perhaps blib/$backend/

[12:44] <fglock> I mean, v6/v6-KindaPerl6/lib --> v6/v6-KindaPerl6/kp6/lib

[12:44] <fglock> but currently we also have:

[12:45] <fglock> v6/v6-MiniPerl6-JVM/

[12:45] <fglock> which is one level up

[12:46] <moritz> do you consider the different backends to be different projects?

[12:48] <fglock> hmm, it depends - under the "kp6-roadmap", they are side-projects

[12:50] <moritz> I would include them in v6-KindaPerl6/ because every time the AST (or something) changes, they have to be adapted as well

[12:51] *** TJCRI joined
[12:53] *** polettix joined
[12:55] *** daxim_ is now known as daxim

[12:56] *** diakopter_afk is now known as diakopter

[12:56] <fglock> Pugs has blib, blib6, lib, src/perl6, src/perl5, perl5, ...

[12:59] <diakopter> moritz: on #parrot, Coke mentioned that it was he who had previously objected to the public logging of $parrot, but that he is now ambivalent.

[13:01] <fglock> src/ and lib/ are about the same thing, in Perl land 

[13:02] *** bloonix joined
[13:02] <moritz> diakopter: aye. If he revises his decision, I'll log ;)

[13:03] <bloonix> hi moritz

[13:03] <moritz> hi bloonix ;)

[13:03] <fglock> how about: src-perl6/ src-perl5/ blib-perl5/ src-perl5-regex/ src-perl5-mo/ src-groovy/ blib-groovy/ ...

[13:03] <fglock> ugh

[13:03] <diakopter> moritz: that's what I mean; he revised his decision...

[13:04] <moritz> diakopter: "beeing ambivalent" sounds as if he's not sure...

[13:04] <diakopter> no, it means he has no preference either way.

[13:05] <moritz> ok

[13:05] <moritz> so I have an "official" green light?

[13:07] <diakopter> well if you'd like further confirmation, ask on a list or a channel where Coke is :)

[13:07] *** perlMa joined
[13:08] <Limbic_Region> coke hangs out on #parrot on irc.perl.org

[13:09] <diakopter> hee hee

[13:09] <moritz> perhaps it's better if I ask on the list, because on IRC it always happens that somebody doesn't backlog and misses a question

[13:11] <diakopter> 13:28 < coke_> At one point I didn't want it logged. I'm ambivalent now.

[13:11] <diakopter> 13:46 <@TimToady> I am always ambivalent...except when I'm not...

[13:11] <diakopter> 13:50 <@TimToady> Oh, wait, this channel isn't logged, so I shouldn't waste good quotes here.  :)

[13:11] <diakopter> (yesterday)

[13:11] <Limbic_Region> yeah, #parrot is neither logged nor provides for a tellbot

[13:14] *** Psyche^ joined
[13:15] *** drupek12 joined
[13:21] * fglock decides to quit bikeshedding

[13:22] <Limbic_Region> fglock - there is absolutely no problem repainting the shed once it is built - it is when the walls themselves are made of various different colors of dried paint that you have to worry

[13:23] <moritz> ;-)

[13:24] * Limbic_Region prefers yak shaving over bike shedding

[13:31] *** Psyche^ is now known as Patterner

[13:47] *** buetow joined
[13:49] <pasteling> "evalbot_r16847" at 193.200.132.135 pasted "Pugs build failure" (6 lines, 278B) at http://sial.org/pbot/26037

[13:49] <pugs_svnbot> r16848 | fglock++ | trunk:

[13:49] <pugs_svnbot> : [kp6] added lib5regex/ for p6regex-on-p5regex runtime files

[13:49] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/16848

[13:49] <lambdabot> Title: Changeset 16848 - Pugs - Trac

[13:53] <fglock> Limbic_Region: no yaks here, does westie grooming counts?

[13:59] <Limbic_Region> fglock - it counts if you say it does cause anyone else is too far removed from the problem to know if it is applicable or not

[14:04] <fglock> sigh

[14:07] <moritz> Limbic_Region: why does it have to be so complicated? *g*

[14:17] *** cjeris joined
[14:21] *** ashleyb joined
[14:23] *** rlb3_work joined
[14:27] *** rlb3_work joined
[14:50] *** DarkWolf84 joined
[14:55] <pugs_svnbot> r16849 | fglock++ | XXX-HACK-SVNBOT-SUBST-0.1422160877013151:

[14:55] <pugs_svnbot> : [kp6] re-add lib5regex

[14:55] <pugs_svnbot> r16850 | fglock++ | XXX-HACK-SVNBOT-SUBST-0.1422160877013151:

[14:55] <pugs_svnbot> : [kp6] try to fix commit error???

[14:55] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/16850

[14:55] <lambdabot> Title: Changeset 16850 - Pugs - Trac

[14:56] <fglock> what's up? I can't add lib5regex/

[14:56] <fglock> HTTP Path Not Found: PROPFIND request failed on '/pugs/!svn/bc/16839/v6/v6-KindaPerl6/lib5regex': '/pugs/!svn/bc/16839/v6/v6-KindaPerl6/lib5regex' path not found

[14:56] <moritz> fglock: judging from pugs_svnbot's output you're not in trunk, but in some weird branch

[14:57] <fglock> how did I got there?

[14:57] <fglock> get

[14:57] <moritz> I don't know, subversion is a mistery for me :(

[14:59] <fglock> the diff is empty

[15:00] <Limbic_Region> I didn't realize Linus was such a prick but after watching what he had to say about people that use subversion I am not impressed

[15:01] <args> did he use the word "nazi" ?

[15:01] <moritz> args: afaict not

[15:01] <zamolxes> 'mental institution', 'masturbation' , 'idiots' .. 

[15:02] <Limbic_Region> just a sec, I didn't watch all 70 minutes so it is a possibility

[15:02] <args> then he thinks that svn is still superior to gnome :)

[15:02] <moritz> is he a KDE fanboy?

[15:02] <Limbic_Region> http://use.perl.org/~kid51/journal/33649

[15:02] <lambdabot> Title: Journal of kid51 (5328)

[15:03] <fglock> lunch &

[15:03] <wolverian> moritz, more than a gnome fanboy, certainly.. 

[15:03] <Limbic_Region> he says that anyone who disagrees with him is ugly and stupid

[15:05] <wolverian> and he says he knows he's a git :)

[15:10] <avar> Limbic_Region: You're misrepresenting him, it's quite obvious from the talk that he's half serious

[15:10] <avar> The issues he points out with cvs and subversion are valid

[15:12] <moritz> i think many tech people tend to be more honest than polite

[15:14] *** obvio171_ joined
[15:20] <diakopter> TimToady: perhaps Coke's request for 'trace add execution' could be handled with an override of ';'

[15:41] *** hkb_zz is now known as hakobe

[15:44] <avar> diakopter: why not overload the runloop?

[15:56] *** philv left
[15:57] <diakopter> avar: I don't know enough to understand that concept (much more than barely). I was looking for a way to do it at the parsing level, since for a trace, the developer usually cares about the statements they have made, not whatever the optimizer has turned their program into

[15:57] <diakopter> avar: although of course, they *should* care more about the optimizer's results....

[16:00] *** weinig joined
[16:04] <Limbic_Region> avar - I am sorry, but if you thought it was obvious that he was in any way joking, I have to disagree with you.

[16:05] <Limbic_Region> avar - and I was not at all offended by the critisim of cvs and subversion - I was upset by what he had to say regarding the people involved

[16:11] *** bonesss joined
[16:14] *** obvio171_ is now known as obvio171

[16:35] *** weinig joined
[16:37] *** franck__ joined
[16:48] *** isaacd__ joined
[17:03] *** barney joined
[17:25] <TimToady> diakopter: certainly anything is possible at the compilation stage.  and we have to be careful about what we mandate at the run stage

[17:25] <TimToady> avar: there might not *be* a runloop in some implementations

[17:27] <avar> which is why it's probably best to solve this by altering your ast to call subs before and after rather than oveloarding a syntactic statement delimiter

[17:28] <TimToady> but it's still something the compiler is choosing, which is proper because it has performance ramifications

[17:28] <TimToady> you're just attaching it to the node that is often produced by ; instead :)

[17:30] <TimToady> now, what we *could* do is mandate that the compiler compile both the optimized and pessimized forms of output, and then pick one, but then you slow down the compiler a bit, or at least require the runtime to be able to re-emit with different characteristics

[17:31] <TimToady> the latter can actually get you compiled code that runs faster than C

[17:31] <TimToady> because if you can reemit, you can do so with the knowledge of which branches were taken historically

[17:32] <TimToady> of course, switching to a different compilation of the same code has issues

[17:32] <TimToady> which I think are mostly solved by saying that we don't try to switch in mid routine, but just pick an implementation at routine entry and go with it

[17:33] <TimToady> though in some ways you'd like finer granularity

[17:34] <TimToady> inserting "switch points" where things are sane is, alas, an *interesting* problem

[17:35] *** dmq joined
[17:35] <TimToady> and interesting questions arise like "when I invoke this loop block, is it really a new function call, or has it been assumed to be part of its surrounding context"

[17:37] <TimToady> but requiring hookable things of the runtime tends to produce results like P5's tie, which pessimizes every variable access because the compiler can't know which variables are someday going to be tied

[17:38] *** Psyche^ joined
[17:38] *** Psyche^ is now known as Patterner

[17:38] <TimToady> likewise, if the runtime has to keep every statement discrete because someone *might* start up a debugger on it, then we've limited optimizations involving code motion and constant subexpression removal

[17:39] <TimToady> (again, in the absence of run-time code re-emission)

[17:40] <jrockway> just take the haskell approach and say that debugging is useless :)

[17:40] <jrockway> "perl6 makes bugs impossible" [to find]

[17:40] <jrockway> :)

[17:40] * dmq notes the similarty between tie and $& in p5

[17:40] <TimToady> that's another example

[17:41] <dmq> tie is worse tho. :-(

[17:41] <TimToady> yes, you pay that penalty whether or not it's used anywhere else

[17:41] <dmq> yeah

[17:41] <dmq> and afaict tie doesnt admit some kind of hinting approach to work around the issue

[17:42] <dmq> wheras $& does

[17:42] <TimToady> basically, in parrot terms, it's the difference between a language than can use int and str registers, vs one that is always limited to pmcs

[17:43] <TimToady> the p6 solution to both the tie and $& problems is lexical scoping

[17:43] * dmq doesnt follow

[17:44] <dmq> ties can cross lexical boundaries..

[17:44] <dmq> i can see how lexical scoping helps with $&, but with tie i dont follow

[17:45] <avar> what do you mean lexical boundaries? You tie a lexical or global variable, right?

[17:45] <avar> TimToady: The tie optimization problem is a more general issue: magic

[17:46] <TimToady> the p6 compiler is allowed to assume that a variable is never tied unless explicitly declared as tieable

[17:47] <dmq> im still not following.

[17:47] <TimToady> a binding of a tied variable to an untieable variable must coerce to the current variable's storage constraints

[17:47] <TimToady> unboxing it, as it were

[17:48] <dmq> ok, so if you pass a tie into a subroutine its value is converted to an untied copy?

[17:48] <TimToady> if I have sub foo (int $x) the compiler can use an integer register

[17:48] <TimToady> you can pass a tied variable to it, but you won't get at the tie via $x

[17:48] <TimToady> it converts to int at binding time

[17:48] <dmq> which reduces the utility of tieing, but for a good payoff

[17:48] <dmq> imo

[17:49] <TimToady> it makes explicit what p5 is doing with the two sets of flags for whether we've actually evaluated the magic yet

[17:49] <TimToady> which is part of the kludginess of magic

[17:50] <Limbic_Region> Anyone able to use Net::Google::Calendar mind doing me a favor?

[17:51] <Limbic_Region> I need the result of $event->content->body() in a plain text file

[18:02] *** takesako____ joined
[18:05] *** Schwern joined
[18:16] <fglock> dmq: ping

[18:20] *** takesako____ left
[18:30] *** Termy joined
[18:30] *** Termy is now known as terme

[18:30] *** terme left
[18:31] *** jisom joined
[18:35] *** jisom joined
[18:38] <diakopter> TimToady: how would one go about wrapping or otherwise overriding the ';' if you wanted the trace at compile time?

[18:43] *** jisom joined
[18:43] *** autark_ is now known as autark

[18:45] <TimToady> diakopter: you'd derive a grammar, define your own "rule statement" that calls into the STD statement rule and then tweaks the returned value

[18:46] <TimToady> you don't really want to attach it to the ';' literal because the parser doesn't know enough at that point

[18:48] <diakopter> ah

[18:55] *** yahooooo joined
[19:03] *** dduncan joined
[19:03] *** rindolf joined
[19:25] *** weinig joined
[19:30] <pugs_svnbot> r16851 | fglock++ | trunk:

[19:30] <pugs_svnbot> : [kp6] updated EmitPerl5Regex to mop

[19:30] <pugs_svnbot> r16852 | fglock++ | trunk:

[19:30] <pugs_svnbot> : [kp6] updated lib5regex Match.pm

[19:30] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/16852

[19:30] <lambdabot> Title: Changeset 16852 - Pugs - Trac

[20:17] *** riffraff joined
[21:23] <devbot6> planet6: Jesse Vincent: A trio of Perl 6 microgrants <http://use.perl.org/~jesse/journal/33708?from=rss>

[21:25] <obra> congrats, fglock, juerd, steve

[21:38] <Juerd> obra: Thank you, and your company of course :)

[21:39] <Juerd> "interested in submitting a Perl 6 microgrant"

[21:39] <Juerd> shouldn't that be *request* or *proposal*? :)

[21:39] <obra> fixing

[21:39] <obra> yes

[21:39] <obra> thanks

[21:40] <Juerd> I'll try to answer the mail tomorrow, by the way.

[21:40] <Juerd> I'm off to bed now

[21:40] <Juerd> Good localtime :)

[21:41] *** weinig joined
[21:48] <obra> night

[21:55] *** teratoma left
[21:59] *** thoughtpolice joined
[22:04] *** autark joined
[22:04] *** autark left
[22:05] *** autark joined
[22:09] *** weinig joined
[22:20] *** cjeris left
[22:28] *** araujo joined
[22:31] <meppl> good night

[22:34] *** justatheory joined
[22:46] *** isaacd_ joined
[22:47] *** Limbic_Region joined
[22:48] *** xdg joined
[23:05] *** crashmatrix joined
[23:22] <pugs_svnbot> r16853 | lwall++ | trunk:

[23:22] <pugs_svnbot> : [STD] 1st EXPR expect_term hoisted to statement level for longest-token analysis

[23:22] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/16853

[23:22] <lambdabot> Title: Changeset 16853 - Pugs - Trac

[23:25] <pasteling> "evalbot_r16852" at 193.200.132.135 pasted "Pugs build failure" (6 lines, 278B) at http://sial.org/pbot/26051

[23:43] *** sri_ joined
[23:44] *** unobe is now known as unobe_away

[23:55] *** sri_ joined
[23:59] <pugs_svnbot> r16854 | Darren_Duncan++ | trunk:

[23:59] <pugs_svnbot> : ext/Muldis-DB/ : similarly to Core.pm, updated AST.pm and PhysType.pm to rearrange existing types, and add another literal type, Order

[23:59] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/16854

[23:59] <lambdabot> Title: Changeset 16854 - Pugs - Trac

