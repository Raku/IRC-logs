[00:00] *** REPLeffect left
[00:01] <TimToady> there are two competing subcultures here that come up with different answers to the question, "Is an unknown contributor more likely to help us or hurt us?"

[00:01] <TimToady> also, it's not clear whether the "right" answer to that changes over time, and if so, whether the answer has changed yet.

[00:03] <TimToady> the answer also depends on how you view licensing and copyright control

[00:05] <mncharity> the "is there a wiki?" question was triggered by an old item on my infinite todo list, triggered by the Container paragraph in S10.  basically, the Snn have a shape that doesn't fit well inside my head.  so I've long considered spending a few days stuffing the Snn into my head, and holding them long enough to dump them in a shape which fits my head better.

[00:05] <mncharity> re wiki, there's another factor,

[00:05] *** Lorn joined
[00:06] *** theorb joined
[00:06] <mncharity> wikis are under active spam threat.  you need to have enough of a critical mass community to keep it under control.  if you don't, the wiki melts down.  p.n.a is critical mass, pf.o isnt yet.

[00:10] <mncharity> re Container, I'd love if someone did a more "Perl 6 - a reference manual" style presentation.  Eg, Namespaces, Names, Containers, Variables, Types, etc.  I find Snn ok as reference when I already understand something, but as having a very high barrier to entry when I don't.

[00:10] *** stevan_ joined
[00:11] <mncharity> as there are core ideas, with scattered incremental descriptions (without crossrefs).  eg, Containers.]

[00:11] <mncharity> hi stevan_

[00:15] <mncharity> Sigh.  Speaking about subcritical mass wikis, one which was created because the oz/mozart language had similar documentation issues, and thus need a single integrated "virtual reference manual", implemented as a table of contents to the scattered parts,... I guess I know what I'm doing this evening... fixing a smashed wiki. :/

[00:19] *** theorbtwo left
[00:39] *** thoughtp1lice joined
[00:40] *** lidden joined
[00:46] *** nipotaway is now known as nipotan

[00:51] <mncharity> eh, not so bad.  back up.  http://www.vendian.org/oz/wiki/index.cgi?VirtualManual

[00:51] <lambdabot> Title: Unofficial Mozart/Oz Wiki: VirtualManual

[00:55] *** thoughtpolice left
[00:57] <jjore-m> Neat. I like Mozart/Oz and would like to use it in my perl one day.

[00:57] <jjore-m> Or use Perl in my Mozart/Oz.

[00:57] <jjore-m> Whatever.

[01:00] <mncharity> :)

[01:06] *** theorb left
[01:07] *** theorbtwo joined
[01:16] *** ispy_ joined
[01:18] *** jjore-m left
[01:19] *** Notrix left
[01:38] *** hkb_zz is now known as hakobe

[01:45] *** kanru left
[01:54] *** amnesiac left
[01:55] *** cnhackTNT joined
[01:56] *** ferreira joined
[01:56] *** ispy_ left
[02:01] *** araujo joined
[02:05] *** Jamtech joined
[02:13] *** thoughtp1lice is now known as thoughtpolice

[02:40] *** ferreira left
[02:42] *** kanru joined
[02:45] <jmacclure> quick question: how does one become a known contributer?

[02:46] <jmacclure> besides the obvious, of course. I'm referring to TimToady-sama's original comment...

[03:10] *** Jamtech left
[03:16] <mncharity> jmacclure: re 'known contributor, original comment', you mean about wikis?

[03:16] <mncharity> actually, have to run.  bbl &

[03:17] *** jjore-m joined
[03:31] <jmacclure> I thought he was talking in general re: perl6

[03:47] *** amnesiac joined
[03:54] *** SubStack left
[03:55] <mncharity> jmacclure: well, the discussion context was the different policies of http://perl.net.au/wiki/Perl_6 and http://www.perlfoundation.org/perl6/index.cgi towards anonymous edits.  Pugs is certainly also more open than many other software projects, and the licensing/copyright issues apply there too, so it could have been a more general observation as well.

[03:55] <lambdabot> Title: Perl 6 - PerlNet

[03:56] *** SubStack joined
[04:41] *** hakobe is now known as hkb_lab

[05:23] *** Southen left
[05:26] *** Southen joined
[05:33] *** Southen left
[05:49] *** hkb_lab left
[06:04] *** Ashizawa joined
[06:07] *** thoughtpolice left
[06:11] *** drbean left
[06:11] *** Southen joined
[06:17] <mncharity> TimToady: Is there a dual of CANDO, to intercept bindings?  "DO!()"? :)

[06:19] *** agentz1 joined
[06:20] *** drbean joined
[06:25] *** drbean left
[06:25] *** drbean joined
[06:26] <mncharity> Hmm, and actually, CANDO only applies to packages/modules/classes and such.  For intercepting lexical lookup, it doesn't help, no?  So to MOPify lookup, we're back to a MOPmumble::mumble_lookup() macro (or usually-optimized-away multi I suppose), which calls CANDO for the package portion of resolution.  yes?

[06:30] *** ahmadz joined
[06:30] *** ahmadz left
[06:30] *** jisom joined
[06:30] *** Southen left
[06:34] <TimToady> CANDO is for emulating missing declarations.  there's no reason a lexical scope can't just use a real declaration.  and grammar rules reductions can call out to whereever they like in any case.

[06:34] *** Southen joined
[06:41] *** Ashizawa left
[06:52] *** drbean left
[07:01] *** luqui joined
[07:02] *** drbean joined
[07:04] *** mr_ank joined
[07:04] *** mncharity left
[07:06] *** Ashizawa joined
[07:19] *** justatheory left
[07:28] *** jmacclure left
[07:31] *** mncharity joined
[07:36] <moritz_> CANDO sounds like a nuclear reactor to me ;) (close to CANDU)

[07:47] *** amnesiac left
[07:48] *** iblechbot joined
[07:49] *** cnhackTNT left
[07:50] *** Aankhen`` joined
[07:52] *** cnhackTNT joined
[08:03] *** mr_ank_ joined
[08:07] *** mr_ank_ left
[08:07] *** mr_ank_ joined
[08:07] *** mr_ank_ left
[08:08] *** penk left
[08:08] *** franck___ joined
[08:15] *** Southen left
[08:16] *** mr_ank left
[08:36] *** Southen joined
[08:50] <agentz1> one of my friends has hacked out a miniSQL parser using PCR: http://svn.openfoundry.org/openapi/trunk/minisql/lib/OpenAPI/miniSQL.pm

[08:50] <lambdabot> http://tinyurl.com/yw8dyu

[08:50] <agentz1> we'll use it as part of our yahoo cn's web service API :)

[08:51] <moritz_> cool ;)

[08:51] *** alc joined
[08:51] <agentz1> moritz_: :)

[08:57] *** cnhackTNT left
[09:24] *** IllvilJa left
[09:30] *** ting_ joined
[09:30] *** ting left
[09:32] *** masak joined
[09:37] *** pbuetow left
[09:41] *** ludan joined
[09:53] *** IllvilJa joined
[09:53] *** Southen left
[10:01] *** Southen joined
[10:06] *** pbuetow joined
[10:06] *** IllvilJa left
[10:10] *** jjore-m left
[10:12] *** fglock joined
[10:37] *** ruoso left
[10:44] *** Southen left
[10:46] *** Southen joined
[10:49] *** Lorn left
[10:51] <pugs_svn> r19024 | fglock++ | [kp6-kp6] t-bootstrap/02-grammar.p6 fixed semicolons

[10:52] *** ebassi joined
[10:53] *** ruoso joined
[10:54] *** Southen left
[11:14] *** Southen joined
[11:15] *** jisom left
[11:28] *** Torment joined
[11:32] *** GeJ left
[11:32] *** GeJ joined
[11:34] *** pravus_ joined
[11:36] *** yahooooo joined
[11:37] *** mj41__ joined
[11:43] *** Patterner left
[11:44] *** Psyche^ joined
[11:44] *** Psyche^ is now known as Patterner

[11:45] <pugs_svn> r19025 | fglock++ | [kp6-perl5rx] add some indentation when emitting

[11:45] *** pravus left
[11:46] *** Jedai left
[11:51] *** Ashizawa left
[11:54] *** mj41_ left
[11:57] <pugs_svn> r19026 | fglock++ | [kp6-perl5rx] fixed last commit

[12:03] <fglock> agentz1.friend++

[12:04] *** Patterner left
[12:04] <agentz1> fglock: :)

[12:04] <agentz1> fglock: maybe the p5rx emitter is even more production friendly?

[12:05] <fglock> agentz1: I've been using v6.pm for production,

[12:05] <fglock> it actually parses the code inside code blocks, instead of using a source filter

[12:05] <agentz1> fglock: heh. our environment is *very* busy ;)

[12:06] <agentz1> fglock: v6.pm's code quality makes me a bit worried ;)

[12:06] <fglock> the .pmc files help a lot

[12:06] <fglock> yes, I know :P

[12:07] <fglock> we are using Perl 6 for the grammars, and Perl 5 for the remaining code

[12:07] <agentz1> *nod*

[12:07] <fglock> I'm now working on an MDX parser, which is a variation of SQL

[12:07] <agentz1> sorry, gotta run for supper...already extremely hungry atm ;)

[12:07] <agentz1> MDX?

[12:07] <agentz1> interesting

[12:07] <fglock> multi dimensional database

[12:08] <agentz1> ah

[12:08] <fglock> ok :)

[12:08] <agentz1> okay, later...gotta run...&

[12:08] *** cognominal_ left
[12:08] *** Southen left
[12:08] *** Southen joined
[12:09] *** Psyche^ joined
[12:09] *** Psyche^ is now known as Patterner

[12:10] *** Lorn joined
[12:14] *** ferreira joined
[12:18] *** Southen left
[12:19] *** shachaf left
[12:19] *** shachaf joined
[12:20] *** Patterner left
[12:23] *** Psyche^ joined
[12:23] *** Psyche^ is now known as Patterner

[12:24] *** iblechbot left
[12:24] *** Lorn left
[12:26] <pugs_svn> r19027 | fglock++ | [kp6-perl5rx] improved Match.perl5

[12:34] *** Southen joined
[12:43] *** Notrix joined
[12:47] <pugs_svn> r19028 | fglock++ | [kp6-perl5rx] deep Match.perl

[12:55] *** IllvilJa joined
[13:06] *** luqui left
[13:06] *** xinming joined
[13:06] *** xinming__ left
[13:20] *** cmarcelo joined
[13:27] *** pravus_ is now known as pravus

[13:32] *** iblechbot joined
[13:54] *** iblechbot left
[13:57] *** fglock left
[14:01] *** duncanh joined
[14:09] *** iblechbot joined
[14:23] *** nothingmuch left
[14:34] *** fglock joined
[14:45] *** rindolf joined
[14:48] <pugs_svn> r19029 | fglock++ | [kp6-perl5rx] Visitor::RegexCapture is buggy - moved away for now

[14:59] <pugs_svn> r19030 | fglock++ | [kp6-kp6] t-bootstrap/02-grammar.p6 passes test #6

[15:04] *** timbunce joined
[15:06] *** timbunce left
[15:06] *** timbunce joined
[15:10] *** nothingmuch joined
[15:13] *** timbunce left
[15:18] <nothingmuch> [particle]: moose?

[15:20] <[particle]> hola!

[15:33] <pugs_svn> r19031 | fglock++ | [kp6-perl5] most library loading moved to Runtime::Perl5::Runtime

[15:36] *** pmurias_ joined
[15:36] *** rindolf left
[15:43] *** Lorn joined
[15:48] <pugs_svn> r19032 | fglock++ | [kp6-kp6] fixed uninitialized Code

[15:56] <pugs_svn> r19033 | fglock++ | [kp6-kp6] more mp6/kp6/perl5 bridge code

[16:02] <ferreira> I have a minor patch for pugs Makefile.PL. Where should I submit it? 

[16:03] <pmurias_> ferreira: do you have a commit bit?

[16:03] <ferreira> no

[16:06] <pmurias_> ferreira: you could send it to perl6-compiler and wait for someone to apply it

[16:06] <pmurias_> or get a commit bit and add it yourself

[16:06] <ferreira> ok. how do I get a commit bit?

[16:06] <Lorn> its more easy to get a commit bit

[16:06] <Lorn> :)

[16:07] *** nipotan is now known as nipotaway

[16:08] <[particle]> i'll give you one if you give me your email address and preferred username

[16:09] *** pohyg joined
[16:11] *** barney joined
[16:13] <pugs_svn> r19034 | fglock++ | [kp6-kp6] t-bootstrap/02-grammar.p6 - all tests pass

[16:14] <Lorn> [particle]: if possible, i want too user: lorn email: [email@hidden.address] 

[16:15] <[particle]> lorn: sent!

[16:16] <fglock> pmurias_: see last commit :)

[16:16] <[particle]> add your name to AUTHORS to test your commit bit

[16:16] <Lorn> [particle]: thanks

[16:16] <fglock> ferreira, Lorn, ola!

[16:17] <ferreira> fglock: oi

[16:17] <ferreira> [particle]: email is a.r.ferreira at gmail.com and preferred username is ferreira

[16:17] <Lorn> fglock: :)

[16:17] *** masak left
[16:17] <Lorn> fglock: d'oh, i forget the irc logs :/

[16:18] <pmurias_> fglock: nice

[16:18] <[particle]> ferreira: sent!

[16:18] <Lorn> and dont remember if have email protect 

[16:18] <ferreira> Lorn: just more a small pile of spam to collect from :)

[16:19] <[particle]> don't worry, the irc logs obfuscate the email addrs

[16:19] <fglock> kp6 is near to bootstrap... compiled to perl5 regex :P

[16:19] <[particle]> @ is replaced with an image

[16:19] <Lorn> [particle]: nice

[16:19] <ferreira> [particle]: thanks - I could not answer you in private because I registered the nick and I am having trouble to authenticate :(

[16:19] <[particle]> ferreira: i think by default the password is your username

[16:19] <[particle]> (for nick auth)

[16:20] <[particle]> fglock: pmichaud and i are making good progress converting perl6 to use nqp rather than pir

[16:20] *** Psyche^ joined
[16:21] <ferreira> if I use svk, there is some guideline to avoid messing up commit messages while pushing ?

[16:21] <[particle]> many sanity tests are passing now

[16:21] <fglock> [particle]: that's cool

[16:21] <fglock> I still wonder how we could work together

[16:22] <[particle]> could write kp6 in nqp, i guess :)

[16:22] <Lorn> what is nqp?

[16:22] <[particle]> not-quite-perl

[16:23] <[particle]> it's a subset of perl 6 used to implement languages on parrot

[16:23] <fglock> kp6 is just plain Perl 6

[16:23] <fglock> simpler, even

[16:23] <pmurias_> fglock: more segfaults remain see func(1,2,3)

[16:24] <fglock> pmurias_: I didn't convert the whole Pad.pm, just as-needed

[16:24] *** amnesiac joined
[16:25] <fglock> [particle]: does nqp has string-eval?

[16:25] *** pmurias_ is now known as pmurias

[16:25] <[particle]> fglock: it evaluates some string stuff, but not full p6

[16:25] <fglock> string-eval, hash, array, and closures is all kp6 needs

[16:26] <pmurias> fglock: i mean $_ = 'func(1,2,3)';KindaPerl6::Grammar.term()

[16:27] <fglock> pmurias: looking

[16:27] <[particle]> fglock: http://svn.perl.org/parrot/trunk/compilers/nqp/README.pod

[16:28] <fglock> [particle]: that's all kp6 needs

[16:29] <fglock> converting the Perl 5 runtime to nqp should be straightforward,

[16:29] <fglock> but it depends on how you plan to implement the MOP

[16:29] <fglock> a straightforward conversion would implement the MOP in nqp

[16:30] <fglock> but you might want it implemented in C

[16:30] <fglock> or, s/C/Parrot/

[16:30] <[particle]> parrot's oo support is quite nice

[16:30] <fglock> even better :)

[16:31] *** neuromu joined
[16:31] <rgs> neuroµ!

[16:31] <neuromu> rgs!

[16:33] <fglock> [particle]: we can start with KindaPerl6::Visitor::Emit::Perl6, maybe it just works

[16:35] <pmurias> fglock: you are considering having kp6 emit nqp?

[16:35] <fglock> perl script/kp6 -Cperl6 -e ' say "hello, World" '   # untested

[16:35] <fglock> pmurias: sure

[16:35] <[particle]> that'd be cool, but nqp requires parens on functions

[16:36] <fglock> no problem, we can tweak the emitter

[16:36] <[particle]> yep, should be straightforward

[16:36] *** Patterner left
[16:36] *** Psyche^ is now known as Patterner

[16:36] <[particle]> i'm concentrating on getting changes in before our weekly status in a few hours atm

[16:37] <fglock> currently compiles to something like: ($GLOBAL::Code_say)('hello, World')

[16:37] <[particle]> kp6-on-nqp would be quite nice... i hope we can make something like that happen soon

[16:37] <fglock> kp6 has several desugaring layers, you can choose how basic the target language is

[16:38] *** xinming left
[16:38] *** xinming joined
[16:39] <fglock> [particle]: I would need some of your time for starting up

[16:39] <[particle]> fglock: that can likely be arranged later today or tomorrow

[16:39] <fglock> ok :)

[16:40] <fglock> hmm - string eval is only needed for bootstrapping

[16:42] *** Onyxyte left
[16:42] <[particle]> even easier :)

[16:42] <fglock> bootstrapping in parrot would be cool

[16:43] *** TJCRI joined
[16:46] <[particle]> since i've been away, i haven't caught up on the latest kp6 progress. anything big happen since 1 nov?

[16:53] *** penk joined
[16:57] *** dlocaus joined
[16:57] <dlocaus> ferreira: hi!  this is daniel

[16:58] *** neuromu_ joined
[16:59] <ferreira> dlocaus: hi. you seem quite busy around here (perl6 land) - hoping you're enjoying your time :-)

[16:59] <dlocaus> ferreira: I am... :)

[16:59] <dlocaus> ferreira: accept my hd drive died.  I need -just- one file from it, I'm hoping that someone can restore it.  I think the logical sectors 0-7? are dead.

[17:00] <dlocaus> ferreira: stupid harddrive.  I should have gone with a SCSI raid.

[17:01] <ferreira> :( failing hardware sucks as most things that fail when they should not :P

[17:01] <dlocaus> I know... the only hardware that EVER fails is the hardware that doesn't have a backup...  Things like this make me think the devil really does exist...

[17:02] <allbery_b> s/the devil/murphy/

[17:03] <ferreira> oh, not the devil, only chance: chance to win or to lose - Murphy's law asserts a high probability for failure however

[17:03] <moritz_> re

[17:04] <dlocaus> ferreira: my scsi system has been up for years... at my former work place, once issues were streighted out, harddrive/hardware failures are rare.

[17:04] <dlocaus> asssuming I heard about them...

[17:07] <fglock> [particle]: re happen, several bugs were fixed (infinite loops in regexes, Scalar/Array/Hash autovivification, Array x List), some documentation added, and the bootstrapping process is going on

[17:08] <fglock> and the Lisp backend got unmaintained :(

[17:09] <[particle]> lisp stale already?

[17:09] <[particle]> i guess it's really a dead langauge :/

[17:11] <pugs_svn> r19035 | fglock++ | [kp6-kp6] simple expression parsing works

[17:12] <fglock> [particle]: kp6-kp6 is the bootstrapped compiler - it is just starting to work

[17:13] <pmurias> [particle]: and some things got cleaned up

[17:13] *** dlocaus left
[17:13] <[particle]> o frabjous day! callooh! callay!

[17:13] <pmurias> [particle]: avar is waiting for the bootstrap

[17:14] <[particle]> ah, for the lisp backend? gotcha.

[17:14] <pugs_svn> r19036 | ferreira++ | adding myself to AUTHORS: testing my commit bit

[17:16] <pmurias> [particle]: i didn't refer that the lisp backend going unmaintained as cleanup, just a bit of nastines in kp6 got cleaned up

[17:16] <pmurias> on the other hand kp6 is no fully 'no strict' by default

[17:16] <pmurias> s/no/now

[17:16] <[particle]> i mean, avar waiting for bootstrap to do lisp backend?

[17:17] <pmurias> [particle]: yes

[17:17] <avar> Well it's a mixed running around chasing other stuff / waiting for bootstrap

[17:17] <avar> It's a bit harder if I do it right now, but it'll be easier once it's bootstrapped

[17:19] <pugs_svn> r19037 | ferreira++ |  r16@dracma:  perl | 2007-12-04 15:18:33 -0200

[17:19] <pugs_svn> r19037 | ferreira++ |  try Haskell package time as well (contains Data.Time.*) - this is coherent with the dependencies in the Debian package

[17:20] <avar> Mainly because the main problems I was having with the lisp backend were Aankhen`` rewriting everything to be unlike the p5 one:)

[17:20] <avar> Which will go away once all the .pm stuff is in p5 and I only have to emit more primitive stuff and not care about implementing array or pads and stuff like that

[17:20] *** neuromu left
[17:21] <avar> so my all means tell me when this is bootstrapping so I can haaack

[17:23] <fglock> avar: sure 

[17:24] *** neuromu_ is now known as jmacclure

[17:24] <pmurias> avar: what do you mean by having all the .pm stuff in p5?

[17:24] <pugs_svn> r19038 | fglock++ | [kp6-kp6] more tests

[17:26] *** ruoso left
[17:26] <avar> uh, p6 I mean

[17:32] <pmurias> avar: arrays are primitive stuff in p6, you don't generally get to play around with pointers in p6

[17:33] <avar> Well pads then

[17:33] <avar> Anyway more stuff in p6 .pm makes writing backends easier

[17:33] *** ruoso joined
[17:34] <pmurias> yes, i don't doubt it

[17:34] <avar> pypy looks like a very interesting backend:)

[17:35] <avar> p6 -> rpython then you have jit and whatnot

[17:35] <avar> they're already running scheme and js

[17:36] <moritz_> parrot might be an intersting target as well ;-)

[17:36] *** chris2 joined
[17:36] <moritz_> they already support most of p6's object model (what a coincidence... ;-)

[17:37] <pugs_svn> r19039 | dlo++ | Updated documentation, no code changes.

[17:37] <avar> Yeah sure, I still like multi-backend targets like lisp/pypy better if I had to choose:)

[17:37] <avar> pypy does stand-alone C executables already, and they'd be doing optimization too

[17:38] <avar> anyway I thought I'd mention it since people haven't been talking about it here that I've seen

[17:38] <avar> w6

[17:38] <moritz_> avar: right. Of course you're welcome to write any backend you like ;)

[17:39] *** dlocaus joined
[17:40] <dlocaus> fglock: I remember that you said a while ago, that all of kp6 would be "obsolete" in favor of onion (successor to kp6) is that still the case?

[17:41] <pmurias> dlocaus: i hope so

[17:41] <pmurias> dlocaus: it's more replaced the obsoleted

[17:42] <fglock> the current plan is that the first "onion" will be just a copy, with the remaining MiniPerl6-isms removed

[17:42] <moritz_> kp6: print "string\ninterpolation"

[17:42] <exp_evalbot> r19039: OUTPUT[string␤interpolation]

[17:43] <dlocaus> is that "obsolete" in terms of "we're just going to delete it, because we don't need it" (meaning there is no point in more that documetnation for other programmers?) or "We will be using it, like we use miniperl6, so there is some worth to documenting it?"

[17:43] <fglock> it will be incrementally obsoleted, most of the runtime will survive

[17:44] <fglock> which is the documented part

[17:44] <dlocaus> KindaPerl6\Runtime\Perl5 correct?

[17:44] <fglock> yes

[17:44] <dlocaus> ok

[17:44] <dlocaus> ty

[17:44] *** ferreira left
[17:45] <fglock> coffee &

[17:46] <pugs_svn> r19040 | dlo++ | This file did not have a terminating "1;" to terminate the file.  I have added it.  I have also made minor documentation improvements.

[17:47] *** ebassi left
[17:49] <pmurias> dlocaus: lots of stuff will be changed to use new kp6 features

[17:51] <dlocaus> pmurias: yeah, I saw some of that when I was looking at mp6.pl

[17:51] <dlocaus> one of the packages (I don't remember right off hand  MATCH?) used kp6's match

[18:01] <pugs_svn> r19041 | dlo++ | [kp6] Minor documentation improvements

[18:02] <pugs_svn> r19042 | fglock++ | [kp6-kp6] added debug tracking info for current bug (arrow blocks) 

[18:05] <fglock> weird code: @(($$<arrow_sub_sig>).positional).>>key,

[18:06] <moritz_> aye

[18:07] *** franck___ left
[18:07] *** ludan left
[18:07] *** xinming left
[18:07] *** xinming joined
[18:10] *** iblechbot left
[18:20] <pugs_svn> r19043 | fglock++ | [kp6-kp6] minor fix in Pad.pm

[18:20] <pugs_svn> r19044 | dlo++ | [kp6] Minor documentation improvements.  I have also added a "1;" to the end of the file.

[18:22] *** justatheory joined
[18:28] <pugs_svn> r19045 | dlo++ | [kp6] Minor documentation improvements. 

[18:30] *** Aankhen`` left
[18:30] *** Aankhen`` joined
[18:33] <dlocaus> fglock: ping?

[18:33] <dlocaus> fglock: what does "XXX" mean in the code? I know its not saying this code is sexy...

[18:33] <pugs_svn> r19046 | fglock++ | [kp6-kp6] documented possible bug, will fix later

[18:33] <fglock> it mean "will fix this later"

[18:33] <moritz_> dlocaus: it means "that should be fixed"

[18:33] <dlocaus> so it is === to "TODO"?

[18:33] <fglock> like in last commit :P

[18:34] <fglock> yes

[18:34] <fglock> home &

[18:34] <dlocaus> Do you mind if I change XXX to TODO?

[18:34] <fglock> dlocaus: it's different, XXX doesn't prevent the code from working

[18:34] <moritz_> dlocaus: basically, XXX is more "this is probably a bug", whereas TODO is "this should be implemented"

[18:34] <fglock> it's just "refactor this"

[18:34] <dlocaus> Ah, ok.

[18:34] <pmurias> "beware"

[18:35] <fglock> :)

[18:35] <fglock> now &

[18:35] <moritz_> "unsexy code below"

[18:40] *** alc left
[18:51] *** lichtkind joined
[18:55] *** fglock left
[19:01] <Lorn> does anybody use svk to sync pugs?

[19:02] <moritz_> judging from the commit messages, ferreira does

[19:04] <Lorn> moritz_: what commit message? 

[19:05] <moritz_> Lorn: http://irclog.perlgeek.de/perl6/2007-12-04#i_156866

[19:05] <lambdabot> Title: IRC log for #perl6, 2007-12-04

[19:06] <moritz_> that's the typical svk signature (if it's not configured to suppress the first line)

[19:06] *** jisom joined
[19:06] <Lorn> moritz_: thanks

[19:07] <dlocaus> is Pad.pm still in use?

[19:07] <Lorn> moritz_: do you know if for the svk its a diferent url?

[19:07] <moritz_> Lorn: you're welcome

[19:07] <dlocaus> KindaPerl6::Runtime::Perl5/Pad.pm?

[19:07] <dlocaus> because the package declaration is "package Pad;"

[19:08] <moritz_> Lorn: I don't think so, but I'm not an svk expert

[19:08] <dlocaus> I would have thought given its directory, it would be 

[19:08] <dlocaus> KindaPerl6::Runtime::Perl5::Pad;

[19:08] <moritz_> Lorn: maybe look at http://feather.perl6.nl/svk.html

[19:08] <lambdabot> Title: SVK on Feather

[19:08] <moritz_> ah wait, that's specific to feather, and I assume you don't have an account

[19:17] *** justatheory left
[19:19] <pugs_svn> r19047 | dlo++ | [kp6] Documentation added.

[19:22] *** blindfish_ joined
[19:24] *** blindfish_ left
[19:26] *** justatheory joined
[19:26] *** iblechbot joined
[19:27] *** jhorwitz joined
[19:34] *** TheNo1Yeti joined
[19:43] *** Notrix left
[19:56] * [particle] idly wonders if he can put "five years of perl 6 experience" on his resume :)

[19:56] *** marmic left
[19:56] *** marmic joined
[19:58] <moritz_> ;)

[19:58] <Aankhen``> [particle]: Why not? :-)

[20:06] *** marmic left
[20:07] *** marmic joined
[20:11] *** cognominal_ joined
[20:25] *** jisom left
[20:29] <gaal> O HAI

[20:29] <moritz_> moose!

[20:29] <gaal> hey moritz_ :)

[20:30] <moritz_> what's up gaal?

[20:30] <gaal> work, work, work

[20:31] <gaal> but I miss pugs!

[20:31] <moritz_> well, it's not running away ;)

[20:32] <gaal> :/

[20:38] <[particle]> pugs misses you too, gaal

[20:40] <gaal> pugs: say '> "pugs: say <moose>"'

[20:41] <exp_evalbot> OUTPUT[> "pugs: say <moose>"␤]

[20:41] <gaal> oh right

[20:41] <gaal> > "pugs: say <moose>"

[20:41] <lambdabot>  "pugs: say <moose>"

[20:41] <gaal> tsk, tsk

[20:42] <gaal> a polyglot bot command looks infeasible

[20:42] <[particle]> perl6: say("moose")

[20:42] <exp_evalbot> kp6: OUTPUT[moose␤]

[20:42] <exp_evalbot> ..pugs: OUTPUT[moose␤]

[20:42] <exp_evalbot> ..p6: OUTPUT[moose␤]

[20:42] <exp_evalbot> ..nqp: OUTPUT[src/pmc_freeze.c:1254: failed assertion 'must_have_seen'␤Backtrace - Obtained 19 stack frames (max trace depth is 32).␤  Parrot_print_backtrace␤    Parrot_confess␤      (unknown)␤        (unknown)␤          (unknown)␤            (unknown)␤              Parrot_thaw␤               

[20:42] <exp_evalbot> ..PackFile_Constant_unpack_pmc␤                  PackFile_Con...

[20:43] <[particle]> ouch

[20:43] <gaal> whoa

[20:43] <gaal> perl6: say localtime

[20:43] <exp_evalbot> kp6: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤   KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824b75c)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤     

[20:43] <exp_evalbot> ..main::DISPATCH('HASH(0x824b75c)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/Kin...

[20:43] <exp_evalbot> ..pugs: OUTPUT[*** ␤    Unexpected end of input␤    at /tmp/CA2dUL7q5e line 2, column 1␤]

[20:43] <exp_evalbot> ..p6: OUTPUT[Null PMC access in invoke()␤current instr.: 'parrot;Perl6::Compiler;main' pc 138 (perl6.pir:98)␤]

[20:43] <exp_evalbot> ..nqp: OUTPUT[src/pmc_freeze.c:1254: failed assertion 'must_have_seen'␤Backtrace - Obtained 19 stack frames (max trace depth is 32).␤  Parrot_print_backtrace␤    Parrot_confess␤      (unknown)␤        (unknown)␤          (unknown)␤            (unknown)␤              Parrot_thaw␤               

[20:43] <exp_evalbot> ..PackFile_Constant_unpack_pmc␤                  PackFile_Con...

[20:44] <gaal> what you say?

[20:44] <gaal> or is it "time"

[20:44] *** thoughtpolice joined
[20:44] <gaal> pugs: say time

[20:44] <exp_evalbot> OUTPUT[250116216.850201␤]

[20:44] *** Lorn left
[20:44] <gaal> perl6: say time

[20:44] <exp_evalbot> kp6: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤   KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824b75c)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤     

[20:44] <exp_evalbot> ..main::DISPATCH('HASH(0x824b75c)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/Kin...

[20:44] <exp_evalbot> ..pugs: OUTPUT[250116222.955503␤]

[20:44] <exp_evalbot> ..p6: OUTPUT[Null PMC access in invoke()␤current instr.: 'parrot;Perl6::Compiler;main' pc 138 (perl6.pir:98)␤]

[20:44] <exp_evalbot> ..nqp: OUTPUT[src/pmc_freeze.c:1254: failed assertion 'must_have_seen'␤Backtrace - Obtained 19 stack frames (max trace depth is 32).␤  Parrot_print_backtrace␤    Parrot_confess␤      (unknown)␤        (unknown)␤          (unknown)␤            (unknown)␤              Parrot_thaw␤               

[20:44] <exp_evalbot> ..PackFile_Constant_unpack_pmc␤                  PackFile_Con...

[20:45] <pmurias> gaal: evals hurts ;)

[20:45] <gaal> who's evaling what? I'm up to slow

[20:45] <pugs_svn> r19048 | moritz++ | [evalbot] disable nqp evaluation

[20:45] *** exp_evalbot left
[20:45] *** exp_evalbot joined
[20:46] <pmurias> gaal: sorry "perl6:"

[20:46] <[particle]> moritz: nqp should be working, but it's moved from languages/nqp to compilers/nqp

[20:46] <moritz_> [particle]: ah, that explains a lot

[20:46] <[particle]> anyway, need to update that parrot repo, it's probably an old rev

[20:47] <moritz_> gaal: ^(kp6|nqp|pugs|p6) evals with the respective compiler...

[20:47] <moritz_> gaal: and ^perl6: evals with all of them

[20:47] <gaal> does the kp6 error mean time's not implemented, or that the kp6 bot is broken?

[20:48] <moritz_> kp6: say "I'm fine"

[20:48] <exp_evalbot> r19048: OUTPUT[I'm fine␤]

[20:48] <moritz_> so it's NYI

[20:49] <gaal> Not Yncredibly Invalid?

[20:49] <gaal> oh oh

[20:49] <gaal> yeah.

[20:51] <pugs_svn> r19049 | moritz++ | [evalbot] reenable nqp evaluation (but not as part of 'perl6:')

[20:51] *** ispy_ joined
[20:52] *** exp_evalbot left
[20:53] *** exp_evalbot joined
[20:53] <pmurias> gaal: kp6 is 'no strict', so the unimplemented &time is undef

[20:54] <moritz_> kp6: say time()

[20:54] <exp_evalbot> r19049: OUTPUT[no method 'APPLY' in Class 'Undef'␤ at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 345␤        KindaPerl6::Runtime::Perl5::MOP::__ANON__('HASH(0x824b75c)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl5/MOP.pm line 169␤     

[20:54] <exp_evalbot> ..main::DISPATCH('HASH(0x824b75c)', 'APPLY') called at compiled/perl5-kp6-mp6/lib/Kin...

[20:54] <gaal> ah, I see, and undef() dies.

[20:54] <moritz_> right

[20:55] <gaal> that error message should probably be improved :) but I wonder how, unless the undef is somehow "but named<&time>"

[20:56] <moritz_> gaal: the checking should be made at compile time

[20:56] <pmurias> gaal: use strict

[20:56] <Patterner> who needs messages? just return a large negative numb3r and let the people google for it...

[20:57] <gaal> even without use strict, I like to know what went wrong when it did

[20:57] <gaal> Patterner: there aren't enough negative numbers to describe the various things that can go wrong

[20:57] <moritz_> I think it could be done in the MMD dispatcher, somehow

[20:58] <Patterner> And I thought card(|R) is pretty big...

[20:58] <gaal> not if the dispatcher sees a pure undef? but don't listen to me

[20:59] <moritz_> gaal: the dispatcher should see a name, not a ref

[20:59] <gaal> Patterner: I wouldn't get into a contest against Murphy and computers combined.

[20:59] <moritz_> gaal: otherwise it wouldn't have to dispatch at all

[20:59] <moritz_> nqp: say("back again");

[20:59] <exp_evalbot> OUTPUT[back again␤]

[21:00] <gaal> nqp: 42

[21:00] <exp_evalbot> RESULT[Syntax error at line 1, near "( ( do { 4"␤current instr.: 'parrot;PGE::Util;die' pc 120 (runtime/parrot/library/PGE/Util.pir:82)␤called from Sub 'parrot;NQP::Grammar;TOP' pc 588 (src/Grammar_gen.pir:129)␤called from Sub 'parrot;PCT::HLLCompiler;parse' pc 444 (src/HLLCompiler.pir:291)␤called

[21:00] <exp_evalbot> ..from Sub 'parrot;PCT::HLLCompiler;compile' pc 34...

[21:00] <gaal> O RLY?

[21:00] <pmurias> moritz_: i would guess the dispatcher sees the value

[21:00] <pmurias> ($foo.bar).baz

[21:02] <moritz_> pmurias: perhaps my understanding of the dispatcher is a bit wrong ;)

[21:03] <moritz_> I always thought the dispatcher takes a sub/method name and a capture of arguments, and determins (and calls) the right method

[21:04] <pmurias> it's done a bit differently in kp6

[21:04] <pmurias> in case of sub calls the method name is APPLY

[21:06] *** barney left
[21:13] <pmurias> moritz_: if the dispatcher recived a sub name it would need at least the lexical pad too

[21:13] *** Aankhen`` left
[21:23] *** lidden left
[21:32] *** TheNo1Yeti left
[21:48] *** kyrbe joined
[21:48] *** kyrbe left
[21:52] <pmurias> @tell fglock while attempting to remove eval uncovered a bug

[21:52] <lambdabot> Consider it noted.

[21:54] <pmurias> @tell fglock look at line 1586 compiled/perl5-kp6-kp6/lib/KindaPerl6/Grammar/Regex.pm inside eval

[21:54] <lambdabot> Consider it noted.

[21:54] * akreal is back.

[21:54] *** jmacclure left
[21:57] <pmurias> akreal: to the computer or from the dead :)

[21:58] <akreal> pmurias: aren't this things the same?)

[21:59] <akreal> hello world :)

[22:11] <pmurias> akreal: hello world :)

[22:11] *** pmurias left
[22:12] *** TJCRI left
[22:14] *** ispy_ left
[22:15] *** ispy_ joined
[22:17] *** justatheory left
[22:26] *** kst left
[22:27] *** cmarcelo left
[22:27] *** justatheory joined
[22:28] *** kst joined
[22:30] *** jjore-w left
[22:32] *** lumi joined
[22:42] *** IllvilJa left
[22:42] *** Schwern joined
[22:45] *** pohyg left
[22:46] *** iblechbot left
[22:55] *** marmic_ joined
[22:55] *** marmic left
[22:55] *** marmic_ is now known as marmic

[23:00] <ispy_> does p6 have any integrated xml parsing abilities?

[23:00] <moritz_> ispy_: no

[23:00] <ispy_> ok, just curious :0

[23:00] <moritz_> just very powerfull grammars

[23:01] <moritz_> that should make plain perl6 parsing really easy

[23:01] <ispy_> I've yet to mess with grammers yet.

[23:01] <integral> once someone writes a module called "XML::ParseIt", you just type "use XML::ParseIt;" and then functions are available to parse XML.  Is that integrated enough?

[23:02] <moritz_> they're less messy and more powerfull than regexpes ;)

[23:02] <ispy_> that's not native, smart ass.

[23:02] <ispy_> so no.

[23:02] <ispy_> :)

[23:02] <integral> What does native mean if the perl6 compiler is written in perl6?

[23:02] <ispy_> integral: stop being pedantic.

[23:02] <ispy_> dork.

[23:02] <integral> No, I'm asking what you really mean

[23:03] <PerlJam> ispy_: I don't know what you mean by "native" here either

[23:03] * ispy_ shakes his head...

[23:03] <integral> as I understand it, we'll be able to extend the perl6 grammar in modules, so we'll be able to say things like qq:xml{ <xml> </xml> } and have the quoting behave somewhat intelligently, and yield an AST

[23:03] <ispy_> being embedded into the interpreter... a native  ( not requiring a module but part of the language )

[23:04] <PerlJam> ispy_: Perl 6 will come with nothing but Perl 6.  From that people will construct "distributions" that have commonly used modules bundled with Perl 6.

[23:04] <ispy_> how could it mean anything other than that?

[23:04] <ispy_> so, same as p5.

[23:04] <ispy_> cool...

[23:04] <PerlJam> ispy_: no, there will never be a "native" xml parser in perl 6 in that sense.

[23:04] <ispy_> ok, didn't think so... but was curious.  

[23:04] <moritz_> ispy_: there will be no "core" perl6 with many useful modules as in p5

[23:05] <PerlJam> moritz_: aigh!  Now you've said the C-word and we're likely to rehash the p6l thread!  ;)

[23:05] <ispy_> so you are saying that unlike p5 which comes with several handy cpan modules, p6 will come with it's language only?

[23:05] <integral> One problem is that if you admit something to be available without saying "use ...", you end up with having to have that available everywhere, even an embedded environment;  if an environment doesn't have it available, it's suddenly not Perl 6, rather than just being Perl 6 but without a module installed

[23:05] <ispy_> I agree.

[23:06] <moritz_> ispy_: see http://www.nntp.perl.org/group/perl.perl6.language/2007/11/msg28016.html and the whole threads

[23:06] <lambdabot> Title: xml and perl 6 - nntp.perl.org, http://tinyurl.com/3cg3xj

[23:06] <PerlJam> ispy_: p6 will come with its language and whatever else is needed to get and install modules from CPAN (or cpan-like things)

[23:06] <PerlJam> moritz_: is that larry's message?

[23:07] * PerlJam is too lazy to look

[23:07] *** jhorwitz left
[23:07] <moritz_> PerlJam: that's the root of the "xml and perl" threads

[23:07] <ispy_> so are some of you active in the p6 development?

[23:07] <ispy_> I've been wanting to contribute, possibly to cpan6 or something.

[23:07] <PerlJam> moritz_: you should just link to larry's response :)

[23:08] <moritz_> ispy_: so in which language do you want to code?

[23:08] <PerlJam> ispy_: i've contributed in some small ways to pugs and parrot and I've written some articles on parrot and perl6.  I guess that's "active"

[23:09] <moritz_> same for me if you s/parrot/kp6/

[23:09] <ispy_> moritz_: honestly, my haskell isn't impressive.  However I am and continue to be a professional p5 developer.  And have really taken a liking to p6.  So I was wondering if ways existed for me to contribute p6 code.

[23:10] <ispy_> moritz_: I've really just gotten into haskell over the past month.

[23:10] <ispy_> PerlJam: I plan on writing a p6 crash course for Detroit.pm

[23:10] <moritz_> ispy_: you could work on kp6, that's a perl6 compiler in a subset of p6, and emits p5

[23:10] <PerlJam> ispy_: tests are always welcome.  The pugs repo is the standard place for all perl6 tests.

[23:10] <ispy_> excellent...

[23:11] <ispy_> moritz_: where could I find out more about getting involved with kp6?

[23:11] <moritz_> ispy_: here ;-)

[23:11] <ispy_> sweet :)

[23:11] <ispy_> so basically this is a p6 interpreter that converts p6 code to p5?

[23:11] <moritz_> ispy_: first check out the pugs repo, which contains kp6 under v6/v6-KindaPerl6/

[23:11] <ispy_> ok

[23:12] <moritz_> ispy_: a compiler, do be more specific ;)

[23:12] <ispy_> moritz_: a compiler that doesn't compile? or am I missing something?

[23:12] <ispy_> :)

[23:12] <moritz_> ispy_: it compiles to a p5 image

[23:12] <PerlJam> ispy_: you're probably stuck with an archaic idea of "compiler"  :)

[23:12] <ispy_> oh, ok.

[23:12] <ispy_> I'm sure I am :)

[23:12] <ispy_> But I'm willing to expand my mind.

[23:13] <ispy_> gonna eat some dinner, I'll be back to talk some more shop with you guys... I'm really interested in getting involved.  I love Perl.

[23:13] <PerlJam> ispy_: be sure to read the synopses if you haven't already

[23:14] <moritz_> the right people to ask about the interna are fglock and pmurias.. both of which (and me too) live in europe, so you won't reach any of us in the next ~6hrs ;-)

[23:14] <ispy_> PerlJam: I have, thank you.  A very important read.

[23:14] <moritz_> you can get a commmit bit to the repository here, just /msg your email and desired nick to somebody

[23:15] <moritz_> I'm still not sure if I've read all of the synopsis entirely :/

[23:15] <PerlJam> moritz_: you have to periodically re-read them or you will miss changes.

[23:16] <moritz_> PerlJam: I read the diffs on p6l ;)

[23:16] <PerlJam> (plus the re-reads will keep the static parts in your head :)

[23:16] <PerlJam> yeah, I read the diffs too, but occasionally you need to see things in contet.

[23:16] <PerlJam> er, context

[23:17] <PerlJam> (a lrager context than the diff :)

[23:17] <PerlJam> s/lra/lar/

[23:17] <moritz_> aye

[23:18] <moritz_> PerlJam: I try to translate some of the synopsis periodically (and get stuck at 10%-50%)

[23:18] <moritz_> that way I want to make sure I actually _understand_ them ;)

[23:20] * moritz_ -> bed

[23:23] *** amnesiac left
[23:30] <ispy_> PerlJam: honestly, the synopsis is confusing to me :)

[23:38] *** lidden joined
