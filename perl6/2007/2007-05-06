[00:09] *** edenc joined
[00:18] *** ludan joined
[00:29] *** REPLeffect joined
[00:30] *** mj41_ joined
[00:34] *** cmarcelo joined
[00:34] <cmarcelo> moose!

[00:34] <lambdabot> cmarcelo: You have 1 new message. '/msg lambdabot @messages' to read it.

[00:34] <cmarcelo> @moosages

[00:34] <lambdabot> fglock said 2d 4h 58m 16s ago: - pugs can use this data to emit either perl6 or haskell - http://sial.org/pbot/24669

[00:35] *** Aankhen`` joined
[00:50] <pasteling> "rhr" at 65.94.38.10 pasted "pugs build failure" (17 lines, 857B) at http://sial.org/pbot/24715

[00:50] <rhr> "Setup: cannot satisfy dependency network-any" what's that?

[00:53] <rhr> nevermind, found it

[00:53] <svnbot6> r16191 | Darren_Duncan++ | ext/QDRDBMS/ : added methods to AST.pm and PhysType.pm

[00:59] *** justatheory joined
[01:00] *** [particle] joined
[01:18] <cmarcelo> Last Thursday I gave audreyt++ Perl 6 Today talk in my University (took 2.5x time to cover 90% :-P). There was a friend of mine there who worked with LLVM and I told about mp6 and the possibility of making mp6 work over LLVM. Is there another place where LLVM could be useful? Maybe making PIL -> 'llvm high level language' conversion? Ideas?

[01:19] <cmarcelo> (or should I convince him to 'go parrot' :o)

[01:22] <avar> It would probably be best to convince him to keep going away from parrot:)

[01:22] <avar> cmarcelo: Have you looked at the emitter part of the kp6/mp6 source?

[01:24] <avar> anyway, it looks pretty easy to write a backend

[01:25] <avar> I've been thinking of how neat it would be to write an emitter for common lisp. You could run it on sbcl, perl6 in machine code:)

[01:27] <dduncan> terminology opinion question: if you were to take an arbitrary expression and derive a simpler expression that produces the same result, eg, changing the expression 5+2 into the expression 7, is that better called refactoring, or folding, or something else?

[01:27] <avar> constant folding

[01:28] <dduncan> what about expressions that contain variables

[01:28] <avar> constant folding is genarally used for things you can fold at compile time regardless of whether the values are actually constants 

[01:28] <cmarcelo> avar: I'm looking, seems doable, maybe it's time to spread a commitbit :)

[01:28] <dduncan> eg, ($a / 7) + ($b / 7) --> ($a + $b) / 7 mayhaps

[01:29] <avar> perl5 for instance folds sub a () { 1 } sub b () { 2 } a + b to 3

[01:29] <avar> someone give the man commit!

[01:29] * avar doesn't know how

[01:29] <dduncan> I think I can do it ... have before ...

[01:29] <dduncan> looking ...

[01:30] <avar> dduncan: oh that's not constant folding, that's like turning div operations into multilication operations

[01:31] <avar> I don't think there's a specific term for that. That would just be generally re-arranging the AST to get more speed out of it

[01:31] <dduncan> I'll specifically tell you what I want to know about ... look at the pod for ext/QDRDBMS/lib/QDRDBMS/AST.pm

[01:31] <dduncan> in a DESCRIPTION sub-section, I make references to rearranging an AST to something logically equivalent, but simpler

[01:32] <dduncan> in those docs, I called it refactoring

[01:32] <cmarcelo> invite.pugscode.org isn't up :(

[01:32] <dduncan> but I'm looking at a slideshow now about Perl 5.10 features, and it calls something similar as folding

[01:32] <dduncan> the refactoring in question is a compile-time action effectively

[01:33] <dduncan> as in the general case it only uses info known from looking at the AST itself, and known language built-ins, but treats user-defined stuff as free variables

[01:34] <dduncan> note that in the language the AST is for, system-defined and user-defined stuff have a separate namespace, and one can't override the other

[01:34] <avar> cmarcelo: damn, you can still do a patch I guess..

[01:34] <avar> patches--

[01:35] <dduncan> so, eg, you don't have to worry about users redefining sys.add or sys.divide etc

[01:35] <dduncan> anyway, about commit bits, looking ...

[01:35] <cmarcelo> svn.pugscode.org:9999

[01:35] <dduncan> who needs one anyway?  post your email address here, which is how they are handed out

[01:36] <cmarcelo> avar: I do have one, but my friend still doesn't..

[01:36] <dduncan> what's your friend's email?

[01:36] *** REPLeffect joined
[01:38] <cmarcelo> 9999 doesn't work either...

[01:38] <dduncan> but anyway, as soon as I recall what site to go to, unless it is one of the above, I do have Pugs admin privs

[01:39] <dduncan> for a long time

[01:39] * dduncan off to dinner

[01:40] <cmarcelo> dduncan: I'll try login invite via feather to see if it works..

[01:42] <dduncan> okay

[01:48] <rhr> dduncan: I think that's called strength reduction

[01:49] *** stevan__ joined
[02:11] * dduncan is back

[02:12] <dduncan> rhr, "strength reduction"? ... interesting, haven't heard that term before... will look it up

[02:12] <dduncan> if you're referring to the fold/refactor question

[02:18] *** stevan__ joined
[02:19] *** staunch joined
[02:25] <rhr> dduncan: not sure that's exactly correct, it's probably closer to what you mean than constant folding

[02:26] <rhr> e.g. replacing multiplies with shifts and adds is strength reduction

[02:26] <dduncan> that's just an example ... what I want is more generic

[02:26] <rhr> "optimization" :)

[02:27] <dduncan> generically, its just the process of reforming an AST into another that means the same thing but is spelled differently

[02:27] <dduncan> optimization is one primary reason to do it

[02:28] <dduncan> another reason is canonicalization ... if an AST is canonicalized, then you can take 2 such ASTs and then structural equivalence can mean value equivalence

[02:28] <dduncan> otherwise you can have different structures with the same values

[02:29] <dduncan> mind you, having the same structure isn't essential for use of the AST in general, and so the core doesn't implement refactoring itself, but I wanted to have a name for if someone made a third party module to do so

[02:29] <dduncan> optimize is good for a common case

[02:31] <rhr> woohoo, the big machine at work does a make smoke in 6 mins.  Smokin!

[02:31] <dduncan> example of different being the same is "a+b" vs "b+a", assuming + is commutative

[02:32] *** Kattana joined
[02:34] <dduncan> on a separate matter, I'm wondering about the feasability of, right after 5.10 comes out, making a new CPAN module have Perl 5.10 as a minimal dependency, rather than 5.8.1 ... eg, are people likely to be migrating to 5.10 quickly?

[02:34] <dduncan> as I recall, people using some Windows packages can't use 5.8.1 anyway as they get 5.8.0, and would next get 5.10.0

[02:35] <dduncan> so for them it would be no change

[02:35] <dduncan> s/Windows packages/Perl binaries for Windows/

[02:36] <avar> people will generally upgrade along with their distro

[02:37] <dduncan> so then, when the OS bundles 5.10, that's when most people will get it?

[02:37] <avar> yup

[02:37] <avar> very few build their own perl

[02:38] <dduncan> in that case, I hope that 5.10 comes out early enough that October's public Mac OS X 10.5 release bundles it

[02:38] <dduncan> so far, only Mac OS X 10.x.0 versions update the system perl

[02:39] <dduncan> though 10.3.0 used 5.8.1rc3, so I suppose they may not wait for the final 5.10.0

[02:39] <dduncan> thanks for that note

[02:40] <avar> bundling a maint rc is way different than bundling blead

[02:41] <dduncan> what about 10.0.0rcN ?

[02:41] <avar> in that case they probably manually went over the bugfixing patches (I wouldhope)

[02:41] <avar> mmmmayybe

[02:41] <dduncan> afaik, the 5.8.6 bundled with OS X 10.4 includes some extra patches

[02:42] <dduncan> or I certainly recall that an OS X security update patched the system perl

[02:42] <avar> why do you care about osx perl in particular?

[02:42] <dduncan> but it didn't increment the number

[02:42] <dduncan> that's the system I use, and so do a lot of other people

[02:42] <dduncan> mind you, I build my own Perls anyway, so it doesn't affect me so much

[02:42] <dduncan> personally

[02:43] <dduncan> so in that case, all I really care about is that most of the people who would use my module, whatever situation they are in, they could easily have 5.10

[02:43] <dduncan> whatever their OS

[02:45] <dduncan> speaking a little more broadly, I have separate 5.x and 6.x versions of my module anyway ... so since the 6.x one is meant to be the future one, I wonder if I should make the 5.x one support as many 5.x Perl versions as possible, or also limit it to an extent by requiring 5.10

[02:45] <dduncan> my current thought is to stick with 5.8.1 for now, and change to 5.10 for requirements in 1 year

[02:46] <dduncan> anyway, this isn't very important

[02:47] <rhr> debian stable will probably not get 5.10 until the next release, likely >1yr away

[02:48] <dduncan> okay

[02:49] <dduncan> mind you, I don't actually need 5.10 for anything, that I'm aware of, but I know that 5.8.1 is a minimum since good Unicode support is important

[02:50] <dduncan> but some of 5.10's features look nice, and could considerably affect my module's API if employed

[02:50] <dduncan> but my module will be pre-1.0.0 for a couple years probably, so I can change the API before then

[02:51] <dduncan> eg, if Field Hashes let me use arbitrary objects as hash keys, I might use that as part of my API rather than analagous input being arrays of binary arrays

[02:51] <dduncan> otoh, Field Hashes may not actually do what I'm thinking of

[02:56] <Khisanth> pseudo hashes done right?

[02:59] *** elmex_ joined
[03:07] *** audreyt_ joined
[03:13] <svnbot6> r16192 | rhr++ | Fix to t/xx-uncategorized/io_finalize_part(1|2).t

[03:13] <svnbot6> r16192 | rhr++ | Part 2 can fail when tests are run concurrently.  This ensures part 2

[03:13] <svnbot6> r16192 | rhr++ | waits until part 1 is done before trying to read the file.

[03:15] *** audreyt joined
[03:31] *** mithraic joined
[03:32] *** yumiko joined
[04:10] *** dduncan joined
[04:20] *** tokuhirom__ joined
[04:22] *** nekokak_ joined
[04:25] *** stevan_ joined
[04:25] <svnbot6> r16193 | rhr++ | Cleaner fix for t/xx-uncategorized/io_finalize_part2.t

[04:54] *** SubStack joined
[05:18] *** SubStack joined
[05:25] *** jisom joined
[06:09] *** dduncan left
[06:18] *** dolmans joined
[06:33] *** Aankh|Clone joined
[06:50] *** Aankh|Clone is now known as Aankhen``

[06:58] *** the_dormant joined
[07:05] *** Aankh|Clone joined
[07:05] *** rindolf joined
[07:10] *** agentzh joined
[07:15] <agentzh> fglock: some random thoughts on PCR:

[07:15] <lambdabot> agentzh: You have 1 new message. '/msg lambdabot @messages' to read it.

[07:16] <agentzh> @messages

[07:16] <lambdabot> TimToady said 1d 14h 3m 10s ago: the other problem I noticed is that the build_info line is excessively long, with embedded \n sequences that could probably be turned into <br> at some point

[07:17] <agentzh> TimToady: i've noticed that too. it seems to be a problem on the YAML::Syck side (0.85). not sure.

[07:18] <agentzh> fglock: i see a lot of code duplication in PCR's test suite. and i've been pondering the idea of refactoring some of them using ingy++'s Test::Base.

[07:19] <agentzh> because PCR is already using Module::Install, it will be straightforward to bundle T::B into inc/ without adding an extra module dependency.

[07:20] <agentzh> furthermore, Test::Base offers ---TODO, ---SKIP, ---ONLY, and ---LAST, which are very handy while debugging.

[07:21] <ingy> :)

[07:21] <agentzh> hi, ingy!

[07:21] <ingy> hola agentzh 

[07:22] <agentzh> :)

[07:22] <agentzh> i hope you are able to hack now.

[07:22] <ingy> is Test::Bast getting ported to p6

[07:22] <ingy> I am

[07:22] <agentzh> you're porting T::B to p6?

[07:22] <ingy> no, are you?

[07:23] <agentzh> not yet :)

[07:23] * ingy is hacking on YAML2.pm

[07:23] <agentzh> wow

[07:23] <agentzh> i'm talking about using T::B in PCR which is p5 module for p6 regexes.

[07:23] <ingy> with libyaml support as first thing

[07:23] <agentzh> so it will be as fast as libsyck?

[07:23] <ingy> ok cool

[07:23] <ingy> i don't know

[07:24] <ingy> maybe faster

[07:24] <ingy> maybe slower

[07:24] * agentzh thinks libyaml is in C.

[07:24] <ingy> yes, it is the best yaml parser emitter currently

[07:25] <agentzh> so i'd expect it to be faster. :)

[07:25] <ingy> well it' more correct 

[07:25] <ingy> it was written from the spec

[07:25] <agentzh> that's cool.

[07:25] *** iblechbot joined
[07:25] <ingy> for python, then ruby got a port

[07:26] * agentzh dislikes YAML incompatibility.

[07:26] <ingy> nod

[07:26] <rindolf> Hi ingy, agentzh 

[07:27] <ingy> the YAML trio just last night decided to start having regular voice meetings to fix the nits in the yaml world

[07:27] <agentzh> hi, rindolf.

[07:27] <ingy> hi rindolf 

[07:27] <rindolf> What's up?

[07:27] <ingy> hackin

[07:27] <rindolf> ingy: oh, that's good.

[07:27] <rindolf> Ingy, I wrote a Flickr uploader, using YAML.

[07:27] <ingy> :)

[07:29] <agentzh> ingy: one complaint on Test::Base:

[07:29] *** BooK_ joined
[07:29] <agentzh> positioning of failing tests is not trivial.

[07:30] <agentzh> because there is no line number in the TAP output.

[07:30] <agentzh> currently i'm using === TEST 1, === TEST 2, to identify the tests.

[07:31] <agentzh> of course, i'm also using a perl script which can index the tests in *.t automatically for me

[07:31] <rindolf> And the good thing about my Flickr uploader is that I can just delete the few lines of the files I've already uploaded in case I'm interrupting it.

[07:32] <ingy> agentzh: commits welcome :)

[07:33] *** revdiablo joined
[07:33] <agentzh> ingy: cool!

[07:33] <agentzh> ingy: where's the commit bit?

[07:33] <agentzh> ;)

[07:34] <ingy> send me an htpasswd entry

[07:34] <agentzh> k, a sec

[07:35] <ingy> http://svn.kwiki.org/kwiki/trunk/src/ingy/Test-Base/

[07:35] <lambdabot> Title: Revision 246: /trunk/src/ingy/Test-Base

[07:35] <agentzh> agentz:fDIUPjY7ncjrs

[07:36] <ingy> I moved most of my modules to just ship with Kwiki ;)

[07:36] <agentzh> Kwiki++

[07:39] <agentzh> ingy: why put META.yml under version control? isn't it automatically generated by Makefile.PL?

[07:40] <ingy> agentzh: I'm moving away from that

[07:40] <ingy> is "agentz" a typo?

[07:40] <agentzh> no

[07:40] <agentzh> agentz == agent zhang

[07:41] <agentzh> because agentz is not available here, i chose agentzh.

[07:41] <miyagawa> ingy: tried ShipIt?

[07:42] <ingy> miyagawa: no, what is it

[07:43] <ingy> agentzh: please test the commit bit

[07:43] <miyagawa> it's an app to ship the software, like CPAN module

[07:43] <agentzh> ingy: okay!

[07:43] <miyagawa> now I can't live without it

[07:43] <ingy> huh

[07:43] <ingy> i'll check it out

[07:44] <miyagawa> ingy: it's on CPAN or http://code.sixapart.com/svn/shipit/trunk/ (the svn head supports M::I)

[07:44] <lambdabot> Title: Revision 63: /trunk

[07:44] <agentzh> ingy: 403

[07:44] *** dmq joined
[07:45] <agentzh> ingy: is the command correct? htpasswd -nb agentz password

[07:46] <ingy> I use  htpasswd -bc /dev/tty agentz password

[07:47] <agentzh> ingy: try this again? "agentz:a5pwh4S5zJ27w"

[07:48] <ingy> agentzh: ok, but I made a config mistake

[07:48] <agentzh> committed :)

[07:48] <ingy> it worked?

[07:48] <ingy> ok

[07:48] <ingy> good

[07:48] <agentzh> yup

[07:49] <ingy> http://trac.kwiki.org/trac/timeline

[07:49] <lambdabot> Title: Timeline - Kwiki 2.0 - Trac

[07:49] <ingy> :D

[07:50] <ingy> I gave you write access to src/ingy/

[07:50] <agentzh> cool, thanks :)

[07:51] <ingy> miyagawa: tell brad to use YAML :P

[07:52] <miyagawa> he hates all kinds of serialization :)

[07:53] <ingy> so he invents his own

[07:53] <ingy> silly

[07:58] <rindolf> Hi miyagawa 

[07:59] *** nekokak joined
[08:00] <miyagawa> ingy: the default is good (re: shipit)

[08:17] *** VanilleBert joined
[08:18] *** penk joined
[08:32] <svnbot6> r16194 | agentz++ | util/testgraph.pl - patched smoke.html to expand the \n\t stuff requested by TimToady++

[08:32] <agentzh> TimToady: fixed.

[08:33] *** the_dormant joined
[08:36] * agentzh runs a smoke to test it.

[08:38] <agentzh> FYI, if you has got a smoke.yml, you can run the following command to generate smoke.html from it without wasting off your last smoke:

[08:38] <agentzh> util/testgraph.pl smoke.yml smoke.html

[08:38] <agentzh> *have

[08:38] <rindolf> agentzh: are you Chinese?

[08:38] <agentzh> rindolf: yes

[08:39] <agentzh> rindolf: where are you from?

[08:39] <rindolf> agentzh: I'm from Israel.

[08:39] <rindolf> .il

[08:39] <rindolf> agentzh: where do you live?

[08:40] <agentzh> Jiangsu province, China.

[08:40] <rindolf> agentzh: OK.

[08:40] <agentzh> (in a small town)

[08:40] <agentzh> hehe

[08:40] <rindolf> Mainland China?

[08:40] <agentzh> yup

[08:40] <rindolf> agentzh: nice.

[08:40] <rindolf> agentzh: OK.

[08:42] *** pack|pizza joined
[08:42] <agentzh> Hmm, it would be useful to convert Pod6 to Pod5.

[08:44] <agentzh> and vice versa

[08:49] <agentzh> fglock: also, it would be nice to add smartlinks to PCR's test suite.

[08:49] <agentzh> linking to S05.

[08:50] <agentzh> i'd like to compare the performance of PCR and P::RD :)

[08:53] *** bernhard joined
[08:55] <rindolf> agentzh: so do you have problems accessing the wikipedia?

[08:55] <agentzh> rindolf: yes

[08:56] <rindolf> agentzh: too bad. :-(

[08:56] <rindolf> I can no longer imagine my life without the WP.

[08:56] <agentzh> rindolf: well, i have very cool proxies :)

[08:56] <rindolf> agentzh: yes, so I was told.

[08:57] <agentzh> WP has some political entries which our government dislikes.

[08:58] <rindolf> agentzh: http://sports.yahoo.com/olympics/news?slug=ap-beijing-chinglish - Chinglish.

[08:58] <lambdabot> Title: The word is out in China: Speak better English - Olympics - Yahoo! Sports

[08:58] <rindolf> agentzh: maybe.

[08:59] *** REPLeffect joined
[09:21] <agentzh> "* The .yml and .html files don't seem to correspond.  Aborting."

[09:21] <agentzh> sigh.

[09:32] <agentzh> okay, finally fixed.

[09:34] *** Aankhen`` joined
[09:38] <svnbot6> r16195 | agentz++ | updated smokeserv-client.pl accordingly

[09:41] *** VanilleBert joined
[09:42] *** ofer joined
[09:48] *** kanru joined
[09:50] <agentzh> iblech++ seems to be very busy lately.

[09:50] <agentzh> problems on the server-side of the smokeserver cannot be fixed while those on client-side can. :)

[09:51] * agentzh goes to run another smoke.

[09:53] <agentzh> yay for smoke cycle of 6.8 min! :D

[09:54] *** elmex joined
[10:05] *** VanilleBert left
[10:07] *** kanru joined
[10:11] *** dolmans joined
[10:15] *** ludan joined
[10:20] *** ajs_ joined
[10:22] *** b_jonas joined
[10:22] <svnbot6> r16196 | agentz++ | made 01-smartlinks.t more portable

[10:31] <svnbot6> r16197 | agentz++ | smartlinks.pl - now we require Perl6::Perldoc 0.0.5

[10:32] *** larsen_ joined
[10:32] <ingy> agentzh: ping

[10:38] <ingy> agentzh: do you know of some sane xs modules that i can study?

[10:57] *** mj41 joined
[10:57] <rindolf> ingy: maybe Math::GMP?

[10:59] <agentzh> ingy: ?

[11:01] * agentzh believes ingy is the author of Inline::C which does a lot of XS magic.

[11:14] <svnbot6> r16198 | agentz++ | smartlinks.pl - made File::Slurp optional

[11:18] *** riffraff joined
[11:19] <riffraff> hi everyone

[11:19] *** mithraic joined
[11:19] <agentzh> hi, riffraff

[11:20] <riffraff> dummy question: am I right in thinking that  substr($str,$n,1,'') should delete the n-th character from $str?

[11:20] <agentzh> as long as you're using 1 as the base.

[11:21] <agentzh> index base, i mean

[11:21] <riffraff> wow

[11:21] *** TimToady joined
[11:21] <riffraff> why not 0?

[11:22] <agentzh> riffraff: sorry, i may be wrong. why not try that out in your perl/pugs?

[11:22] <riffraff> because I think it is broken in pugs, but I wanted to check :)

[11:22] <riffraff> given $str='ciao' and $n=0

[11:23] <riffraff> it returns 'c' as expected, but $str is unmodified

[11:23] <agentzh> i think it shouldn't modify $str.

[11:23] <riffraff> but it does in perl5, doesn't it?

[11:24] <agentzh> indeed.

[11:25] <riffraff> ok

[11:25] <agentzh> $ perl -e '$a='abc';substr($a,3,1,"");print "$a\n"'

[11:25] <agentzh> abc

[11:25] <agentzh> p5 doesn't delete the nth character it seems.

[11:25] <riffraff> then the question becomes: how do I remove char $n from $str? I'd use s/<at($n).// buit it won't work with current Rule implementation

[11:26] <riffraff> this is strange, I was basing my expectation on http://www.perlmeme.org/howtos/perlfunc/substr.html

[11:26] <lambdabot> Title: Using the Perl substr() function

[11:26] <agentzh> sorry, i was assuming your n is the length of the string.

[11:26] *** TimToady joined
[11:26] <riffraff> agentzh, wait, try 2 instead of 3

[11:27] <agentzh> right.

[11:27] <riffraff> eh exactly

[11:27] <agentzh> and it removes the n+1th character.

[11:27] <riffraff> well I think strings are 0-indexed so for me it removes exactly the nth char :)

[11:28] <polettix> the whole point of the fourth parameter is the substitution of the substr in the original string, IIRC

[11:28] <riffraff> yep, I'd prefer an interface where substr does'nt do side effect and returns two values $modifed, $replacement

[11:28] <agentzh> riffraff: removing the nth char is easy with regexes.

[11:28] <riffraff> agentzh, eh, try in pugs :)

[11:28] <agentzh> (if not using substr)

[11:29] <polettix> riffraff: I actually like the current interface. You can choose to use the three-args one, which has no side effect.

[11:29] <b_jonas> I like the current interface as well

[11:30] <riffraff> I think it depends in the fact tha yoiu're accustomed to that while I have an habit with different ones

[11:30] <agentzh> s/(.**{n-1,n-1})./$1/

[11:30] <agentzh> not sure if it's the correct syntax.

[11:30] <riffraff> agentzh, I expect you mean $n in the first part.. won't work, can't interpolate in regex in current pugs

[11:30] <polettix> I have to test, but I think that something like this  my $extracted = substr(my $residual = $orig, $n, $howmany, '');   should work as well

[11:31] <agentzh> riffraff: oh, pity

[11:31] <riffraff> polettix, (my $tmp = $orig).substr($n,1,$rep) works 

[11:31] <polettix> riffraff: indeed, it probably boils down to what one is used to :)

[11:31] <riffraff> well, it would if pugs did side effect :)

[11:32] <b_jonas> I think it's good because if you're used to side-effectless programming, you can use the three-arg form

[11:32] <b_jonas> while if you want to modify the string in-place without copying, you can use the four-arg form

[11:32] <riffraff> b_jonas, but it doesn't provide the same feature

[11:33] <b_jonas> that's true

[11:33] <riffraff> I mean, once I know what is the meaning of substr I'm fine with it, I don't complain

[11:33] <polettix> riffraff:  (my $tmp = $orig).substr($n,1,$rep)  sounds very nice imho

[11:33] <agentzh> riffraff: maybe hack that into pugs?

[11:33] <riffraff> polettix, yep. $orig.substr($n,1,$rep) and $orig.=($n,1,$rep) seem better to me :)

[11:33] <riffraff> but again, just habit

[11:34] <ingy> agentzh: Inline::C was 7 years ago man

[11:34] <agentzh> ingy: okay

[11:34] <ingy> :)

[11:34] <polettix> riffraff: I don't get the second 

[11:35] *** Belaf_ joined
[11:36] <riffraff> if substr was side effect free, that would be the side-effect version

[11:37] <polettix> $orig.=($n,1,$rep)  isn't meant to append something to $orig?

[11:37] <polettix> ah no, the .

[11:38] <riffraff> ah yea there is a substr missing

[11:38] *** jrockway joined
[11:38] <riffraff> $orig.=substr($n,1,$rep)

[11:38] <polettix> riffraff: so what should $orig.substr($n,1,$rep) do?

[11:38] <riffraff> I love the .= thingy :)

[11:38] <riffraff> return a copy and not modify $orig

[11:39] *** evalj joined
[11:39] <polettix> riffraff: so why the $rep?

[11:39] <b_jonas> it's the replacement

[11:40] <riffraff> well a _modified_ copy :)

[11:40] <polettix> yes, but if the orig is not modified, why the rep?

[11:40] <riffraff> because you modify the copy

[11:40] <riffraff> i.e.: 'hello'.substr(0,1,'f') #-> returns "fello"

[11:41] <polettix> riffraff: sorry, I don't fully get the semantic. The $rep in perl 5 is supposed to modify the part you're extracting, so in your non-modifing version it should simply return $rep

[11:41] <polettix> uh, now I see

[11:41] <polettix> so it's more a subst than a substr :)

[11:41] <riffraff> yep

[11:43] <polettix> I don't like it, it completely changes the semantic

[11:43] <polettix> I mean,  'hello'.substr(0,1)  # returns 'h', right?

[11:43] <riffraff> maybe

[11:43] <riffraff> :)

[11:45] <riffraff> ah

[11:46] <riffraff> substr($s,$n,1)= 'foo' works as expected

[11:46] <riffraff> nice

[11:46] <riffraff> polettix, yep, returns the fragment 

[11:46] <riffraff> that I'd return as a second value

[11:46] <riffraff> but nevermind I don't plan to change the perl6 spec ;)

[11:47] <polettix> riffraff: as long as what comes out is consistent and easy to remember, without surprises I mean, it's good IMHO

[11:48] *** penk joined
[11:59] <svnbot6> r16199 | agentz++ | [util/smartlinks.pl]

[11:59] <svnbot6> r16199 | agentz++ | * refactored the duplicated code into sub gen_preamble

[11:59] <svnbot6> r16199 | agentz++ | [util/t/01-smartlinks.t]

[11:59] <svnbot6> r16199 | agentz++ | * trimed trailing spaces before diff'ing

[12:12] *** iblechbot joined
[12:13] <agentzh> iblech: ping

[12:13] <agentzh> iblechbot: tell iblech to update the stuff on smoke server.

[12:15] <agentzh> weird. there's still no interface for specifying external css file in the latest Perl6::Perldoc::To::Xhtml :(

[12:21] <agentzh> hmm, S26.pod6 is not in UTF-8, it seems.

[12:23] <svnbot6> r16200 | agentz++ | [smartlinks.pl]

[12:23] <svnbot6> r16200 | agentz++ | * used Perl6::Perldoc::To::Xhtml's full-doc feature

[12:23] <svnbot6> r16200 | agentz++ | * now we don't set UTF-8 for S26 since it's in Latin-1

[12:25] *** mithraic joined
[12:35] <svnbot6> r16201 | agentz++ | smartlinks.pl - fixed various typos in the POD

[12:35] *** stevan_ joined
[12:38] <svnbot6> r16202 | agentz++ | smartlinks.pl - added note that it's still under active development

[12:44] *** buetow joined
[12:50] *** prism joined
[12:55] *** prism joined
[12:59] *** chris2 joined
[13:29] *** xinming joined
[13:32] *** fglock joined
[13:36] <xinming> -rd syn

[13:36] <fglock> agentzh: re PCR tests - I prefer to keep the tests in plain perl5, because I frequently need to insert debugging code

[13:36] <xinming> sorry wrong channel.

[13:36] *** buetow joined
[13:37] <fglock> re PCR performance - it depends on which backend you are testing; there is a plain-perl5regex backend that is very fast, and the original lrep backend which is very slow

[13:39] <fglock> I've been replacing the slow parts one at a time

[13:45] <agentzh> fglock: it's still very easy to insert debugging logic in the context of T::B.

[13:45] <agentzh> (and i believe it can be *easier* :))

[13:45] <agentzh> i'm not suggesting converting all the existing tests to T::B.

[13:46] <agentzh> i just think it's good to organize some new tests of regular forms via T::B

[13:49] <agentzh> fglock: is it okay to add some new tests in T::B format to serve as some examples?

[13:49] <agentzh> fglock: i think you will like it :)

[13:50] <fglock> agentzh: sure - please note that the actual specification-compliance tests are run with v6.pm

[13:50] <fglock> from pugs/t/

[13:51] <agentzh> fglock: yes, i know.

[13:51] <agentzh> fglock: but i'm more interested in PCR at this moment :)

[13:52] <agentzh> PCR is much more practical for real-world apps.

[13:52] <fglock> I'm doing some refactorings right now, in order to run Perl6-STD as the v6.pm grammar

[13:53] <agentzh> fglock: i'm willing to offer tests to PCR if you don't mind :)

[13:53] <agentzh> i won't touch the old ones.

[13:53] <agentzh> i'll only add new ones.

[13:54] <fglock> agentzh: sure, please do :)

[13:54] <agentzh> fglock: thanks :)

[13:56] <fglock> I'm implementing non-greedy quantifiers in ratchet mode, using 'forward checking' 

[14:00] <fglock> re tests - there are some corner cases, in which I'm not sure what is the correct answer

[14:01] <agentzh> *nod*

[14:01] <agentzh> i'll look at  PGE's test suite to see if i can import them into PCR's format.

[14:02] <agentzh> as well as pugs/t

[14:02] <fglock> agentzh: it is already ported to pugs/t/, isn't it?

[14:03] <agentzh> fglock: ah

[14:03] <agentzh> cool

[14:04] * agentzh has a lot of stuff to read.

[14:05] <agentzh> now that i'm able to use pod6, i'd like to use p6 regexes *today* :)

[14:14] <fglock> agentzh: take a look in http://www.perl.org.br/bin/viewfile/Artigos/AdventuresInPerl6?filename=adventure.pl.txt

[14:14] <lambdabot> http://tinyurl.com/ywhau2

[14:15] <agentzh> looking

[14:16] <agentzh> ah...a game using v6.pm?

[14:16] <agentzh> hehe

[14:16] <fglock> notice the '#!/usr/bin/perl' :)

[14:16] <agentzh> yes, i've noticed that :)

[14:20] <agentzh> it looks very nice :)

[14:24] *** Psyche^ joined
[14:30] <moritz> rhr: if you haven't fixed you build failure, install libghc6-network-dev

[14:30] *** ozo joined
[14:32] *** kanru joined
[14:33] *** fglock joined
[14:37] *** mithraic joined
[14:41] <Yaakov> buu

[14:48] *** Psyche^ joined
[14:48] *** Psyche^ is now known as Patterner

[15:15] *** intelin joined
[15:15] *** intelin left
[15:17] *** riffraff joined
[15:17] <riffraff> hi

[15:20] <riffraff> I notice that some tests marked as TODO pass

[15:20] <riffraff> shall I remove the todo<feature> thing and make them real?

[15:21] *** f0rth joined
[15:24] *** torz joined
[15:30] *** ruoso joined
[15:33] *** avar joined
[15:38] *** justatheory joined
[16:04] *** ruoso joined
[16:28] <masak> riffraff: sounds like a good idea to me -- unless it's somehow evident from the tests that the feature isn't really implemented and that the tests pass anyway

[16:29] <masak> in the latter case, I think I would actually advise removing the tests, or at least think hard about why they're there

[16:30] *** drupek12 joined
[16:30] *** rindolf joined
[16:32] <riffraff> good point

[16:32] <riffraff> point is evidence is not so evident

[16:32] <riffraff> :)

[16:32] <riffraff> maybe I should write another test for the same feature, check that it pass, then remove the todo one and commit

[16:38] <agentzh> oh, my god...

[16:39] <agentzh> pugs installs p6 modules into my p5's lib and destroys everything.

[16:40] <integral> The install is untested and no one uses it...

[16:40] <agentzh> i've just used it.

[16:40] <agentzh> i think "make install" worked fine on Win32 in the last year.

[16:40] <agentzh> after trying this command on my linux tonight...

[16:41] <agentzh> heart-burn...

[16:41] * agentzh looks for a way to cancel the damage.

[16:43] <riffraff> ok, I really believe that t/builtins/want.t's first 5 test really work

[16:43] <riffraff> probably because now caller is implemented correctly 

[16:43] <riffraff> or, well, better if not correctly

[16:43] *** kattana_ joined
[16:44] *** baest joined
[16:45] *** ruoso joined
[16:45] *** torz joined
[16:45] *** chris2 joined
[16:45] *** stevan_ joined
[16:45] *** jrockway joined
[16:45] *** b_jonas joined
[16:45] *** tokuhirom__ joined
[16:45] *** Kattana joined
[16:45] *** cognominal joined
[16:45] *** yves_ joined
[16:45] *** JarJarBinks joined
[16:45] *** theorbtwo joined
[16:45] *** tewk joined
[16:45] *** spinclad joined
[16:45] *** zamolxes joined
[16:45] *** scw_ joined
[16:45] *** gnuvince joined
[16:45] *** wolverian joined
[16:45] *** Juerd joined
[16:45] *** Eidolos joined
[16:45] *** cj joined
[16:45] *** nnunley joined
[16:47] *** tewk_ joined
[16:47] *** cj_ joined
[16:47] <agentzh> okay, i've reproduced exactly the same error message got by jerrylee when he tried out mp6-perl5-boot.pl with his activeperl 5.8.8 b820 on my ubuntu system.

[16:48] <agentzh> "Can't locate v6.pm in @INC (@INC contains: /etc/perl /usr/local/lib/perl/5.8.8 /..."

[16:48] <agentzh> someone must have changed the 'make install' logic :(

[16:48] *** sreeram joined
[16:57] *** amnesiac joined
[16:58] * riffraff miserably fails to understand where "ant" comes from

[16:58] <riffraff> (want)

[16:59] *** amnesiac_ joined
[17:00] <riffraff> is there a smarter way of doing (0..$word.chars-1) .map { dostuff($word,$char_index)

[17:00] <riffraff> ?

[17:01] *** dmpk2k joined
[17:02] <riffraff> basically I need something like "n times" but I don't know how to do that

[17:02] <b_jonas> well, ^$word.chars or even ^$word might work instead of the range

[17:04] <riffraff> what is the ^

[17:04] <riffraff> ?

[17:05] <riffraff> I can see it generates a useful list of elements :)

[17:06] <riffraff> even if  they are floats, for some reason, I wonder what is the real meaning of ^ ?

[17:06] <rindolf> Hi riffraff 

[17:06] <rindolf> Hi b_jonas 

[17:06] <riffraff> hi rindolf 

[17:06] *** iblechbot joined
[17:07] *** Psyche^ joined
[17:07] <b_jonas> hi

[17:07] <b_jonas> well, ^ is the iota operator according to the Synopsis

[17:07] *** agentzh changes topic to: Don't run "make install" for Pugs! | http://moritz.faui2k3.org/irclog/ | http://pugscode.org | http://sial.org/pbot/perl6 | ?eval [~] <m oo se> | We do Haskell, too | > reverse (show (scanl (*) 1 [1..] !! 4)) | "Perl 6 Today" video from YAPC::Asia: http://xrl.us/v6op

[17:07] <b_jonas> that is, ^6 is supposed to generate the list 0, 1, 2, 3, 4, 5 or something like that

[17:07] <riffraff> doesn0t really look like a iota

[17:07] <riffraff> but which synopse?

[17:07] <b_jonas> does -> look like lambda

[17:07] <b_jonas> the operators one

[17:08] <riffraff> very true

[17:08] <b_jonas> that's S03

[17:09] <b_jonas> "prefix:<^>, upto operator"

[17:09] <b_jonas> "Constructs a range or locates a metaclass. See "Range semantics"."

[17:10] <riffraff> very nice thanks

[17:10] *** marmic joined
[17:11] <rindolf> riffraff: how's life treating you?

[17:12] <agentzh> how can i reinstall modules under  /usr/local/share/perl/5.8.8/ via debian please?

[17:13] <riffraff> good wuestion

[17:13] <riffraff> i'm actually torn. I feel fine but I have this stupid sneeze

[17:14] <riffraff> and tomorrow I will start my last period in the university, which is bad bad not so bad, cause I think I have one nice class

[17:15] * agentzh really wants to cry...

[17:15] <agentzh> i'm removing things...

[17:16] <riffraff> agentzh, I did: remove perl, reinstall perl, 

[17:16] <riffraff> probably --reinstall would work

[17:16] *** nperez joined
[17:16] <agentzh> riffraff: good idea

[17:18] <agentzh> removing perl will also remove hundreds of other debian packages...

[17:18] <riffraff> yes that'0s why reinstall should work

[17:18] <agentzh> --reinstall doesn't work for me.

[17:18] <riffraff> mh

[17:18] <riffraff> that's bad

[17:18] <agentzh> *nod*

[17:18] <riffraff> I'm quite sure I did that

[17:18] <agentzh> pretty bad.

[17:19] <agentzh> 636 packages will be removed if i remove perl. :)

[17:23] <riffraff> tr gpind down to the dpkg level maybe

[17:24] *** Psyche^ is now known as Patterner

[17:24] <agentzh> riffraff: will try

[17:25] <agentzh> working now

[17:25] <agentzh> after removing the problematic modules from /usr/local/share/perl/5.8.8/

[17:26] <agentzh> interesting

[17:26] <riffraff> mh

[17:26] <riffraff> that would explain why I have a 5.8.8 dir in the pugs working directory

[17:29] *** unobe joined
[17:32] *** b_jonas_ joined
[17:32] *** b_jonas_ is now known as b_jonas

[17:33] <unobe> hi agentzh

[17:33] <unobe> i changed the make install code a bit about a month ago

[17:33] <agentzh> unobe: hello

[17:33] <agentzh> unobe: really?

[17:33] * agentzh is still in a big pain.

[17:33] <unobe> it was supposed to add more config variables to pugs when running

[17:34] <unobe> when moritz built w/debian, he said it still worked for him

[17:34] <unobe> and so i thought i didn't royally screw up

[17:34] <agentzh> but now my perl is totally broken.

[17:35] <agentzh> and i believe jerrylee and laye sufferred from similar problems too.

[17:35] <unobe> there should be a file called current.build.yml

[17:35] <unobe> in the pugs build dir

[17:36] <unobe> giving the build configuration for pugs

[17:36] <agentzh> looking

[17:37] <agentzh> unobe: which installation path is for p6 modules?

[17:37] <unobe> i believe it's sitelib

[17:37] <unobe> but i'm not on a debian system

[17:37] <agentzh> sitelib: /usr/local/share/perl/5.8.8

[17:37] <agentzh> my god...

[17:37] <unobe> the subdir debian

[17:38] <unobe> it has the debian config options no? or is that just for bundling?

[17:38] <agentzh> ?

[17:39] <unobe> nm, that's for building a dpkg

[17:39] <agentzh> unobe: want to have a look at my .current.build.yml?

[17:39] <unobe> sure

[17:39] <unobe> paste?

[17:39] <pasteling> "agentzh" at 221.131.66.145 pasted "my .current.build.yml" (42 lines, 1.2K) at http://sial.org/pbot/24724

[17:42] <riffraff> uff, I want gather-less take for expressione with modifiers

[17:42] <riffraff> is that already ruled out from decades?

[17:44] *** bernhard joined
[17:54] <unobe> agentzh: what's the sitelib for debian supposed to be?

[17:54] <agentzh> i think that's for p5 modules, not p6.

[17:54] <unobe> what did perl -MConfig -e 'print $Config{sitelib}, "\n"' say?

[17:54] <unobe> yeah, but the Makefile for pugs uses the perl5 config vars

[17:54] <unobe> util/PugsConfig.pm

[17:55] <agentzh> /usr/local/share/perl/5.8.8

[17:56] <unobe> on my machine, i always remember pugs installing into the sitelib of Perl5

[17:57] <agentzh> but p6 versions of File::Find, Test::Simple, Getopt::Std will lead to a disaster for perl 5.

[17:57] <unobe> right, but i believe they get installed in their own subdir, perl6 under the sitelib

[17:58] <agentzh> sitelib is in perl 5's @INC, no?

[17:59] <unobe> yes, it is

[17:59] <agentzh> my perl 5 is no longer usable now.

[18:00] <unobe> but i thought that pugs created subdir under the sitelib which perl5 was installed into during installation

[18:00] <agentzh> it's keeping complaining v6.pm is not found or something like that

[18:00] <agentzh> unobe: but it didn't.

[18:02] <unobe> i'm untarring the pugs i bundled and seeing how it would be installed

[18:03] <agentzh> i've just removed /usr/local/share/perl/5.8.8 with anger. now i'm reinstalling everything related to perl. alas.

[18:06] *** kanru joined
[18:07] <unobe> i'm sorry for totally fucking up your system, agentzh

[18:07] <agentzh> unobe: it may not be your fault ;)

[18:08] <avar> so how about fixing `make install' ?:)

[18:09] * agentzh won't try to do that.

[18:09] <agentzh> it's dangerous :)

[18:09] <agentzh> especially when testing it.

[18:13] *** SamB joined
[18:18] <unobe> i found the problem

[18:18] <unobe> it's in util/PugsConfig.pm

[18:18] <agentzh> unobe++

[18:18] <unobe> it was my fault :-/

[18:18] <agentzh> :)

[18:19] * agentzh needs to do regular backup for his own machine. :)

[18:19] <unobe> I'm svk up'ing and then I'll submit

[18:20] <agentzh> cool

[18:20] *** agentzh changes topic to: Think twice before running "make install" for Pugs | http://moritz.faui2k3.org/irclog/ | http://pugscode.org | http://sial.org/pbot/perl6 | ?eval [~] <m oo se> | We do Haskell, too | > reverse (show (scanl (*) 1 [1..] !! 4)) | "Perl 6 Today" video from YAPC::Asia: http://xrl.us/v6op

[18:22] <unobe> should put "Think thrice before changing 'make install'"

[18:23] <agentzh> lol

[18:23] *** jrockway joined
[18:26] <agentzh> end of day for me &

[18:26] *** agentzh left
[18:29] *** amnesiac_ is now known as amnesiac

[18:41] *** ruoso joined
[18:41] <svnbot6> r16203 | agentz++ | PCR - added a smartlink to 09-ratchet.t

[18:44] <svnbot6> r16205 | unobe++ | fixed 'make install' problems

[18:45] <unobe> @tell agentzh the current.build.yml should now show good paths to install pugs into.

[18:45] <lambdabot> Consider it noted.

[18:51] * Tene notes that 'find /usr/lib/perl5 -cmin -30 -print0|xargs -0 sudo rm -f' is mostly effective at cleaning up after a broken 'make install'

[19:02] *** ruoso joined
[19:04] <riffraff> is it normal thgat doing make smoke-upload takes ages?

[19:07] <Khisanth> does make smoke normally take a long time for you? (it does for me ...)

[19:07] <Khisanth> or rather it did, I haven't tried it recently

[19:07] <Khisanth> maybe one or two releases ago

[19:07] <svnbot6> r16206 | agentz++ | PCR - more smartlinks to 09-ratchet.t

[19:14] <riffraff> no I mean the smoke.html is built

[19:14] <riffraff> I just can't upload :)

[19:14] *** lichtkind joined
[19:31] <svnbot6> r16207 | agentz++ | PCR - trimmed trailing spaces in 09-ratchet.t and added several more smartlinks

[19:37] *** nperez joined
[19:39] <diakopter> agentz: working past 'end of day'? ;)

[19:41] *** amnesiac joined
[19:43] *** penk joined
[19:43] *** [particle] joined
[19:44] *** jisom joined
[19:47] *** crashmatrix joined
[19:51] *** araujo joined
[19:51] <svnbot6> r16208 | agentz++ | PCR - 09-ratchet.t - even more smartlinks

[19:53] *** benny joined
[19:53] *** sapir joined
[19:55] *** ruoso_ joined
[19:56] *** explorer joined
[19:57] *** ruoso joined
[20:06] <svnbot6> r16209 | agentz++ | PCR - minor cleanup in 09-ratchet.t

[20:19] *** REPLeffect joined
[20:24] *** REPLeffect_ joined
[20:34] *** Psyche^ joined
[20:35] *** _bernhard joined
[20:41] *** lichtkind joined
[20:43] <rhr> anyone know why ext/DateTime/t/basic.t would start failing since yesterday?

[20:43] <rhr> pugs> my Date $date = Date.new( :string<now> )

[20:43] <rhr> *** No such subroutine: &Date

[20:43] <rhr> that worked last night...

[20:49] <rhr> whoops, forgot to use Date;... but, having fixed that, $date.year is undef and $date.month and $date.day are 1

[20:50] *** ruoso joined
[20:50] *** Psyche^ is now known as Patterner

[20:51] *** jisom joined
[21:04] *** SubStack joined
[21:09] *** ruoso joined
[21:14] *** Aankhen`` joined
[21:19] <rhr> $date.year should be set to localtime(time).year, which correctly returns 2007, but it's undef

[21:20] <rhr> and apparently it works on agentzh's machine

[21:23] <rhr> it looks like the wrong BUILD multi is being used, but why would it do that?

[21:25] *** ozo joined
[21:27] <rhr> aha, I smell a ::Rat.  I still don't understand why it worked yesterday and not today...

[21:35] <pasteling> "rhr" at 65.94.38.10 pasted "strange Date.pm behavior" (8 lines, 237B) at http://sial.org/pbot/24733

[21:35] <rhr> how could $epoch be undecalred?  and why does it work the second time?

[21:41] *** explorer joined
[21:53] <pasteling> "rhr" at 65.94.38.10 pasted "similar but different weirdness after a make clean" (13 lines, 222B) at http://sial.org/pbot/24734

[21:53] <rhr> it's calling the wrong BUILD multi the first time, but the right one the second time

[21:54] <rhr> I give up for now

[22:04] *** larsen_ joined
[22:06] *** weinig joined
[22:14] *** pbuetow joined
[22:44] *** mithraic joined
[22:53] *** DarkWolf84 joined
[22:59] *** ticallion joined
[23:26] *** offby1` joined
[23:28] <Yaakov> buu

[23:31] *** offby1` is now known as offby1

