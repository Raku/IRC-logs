[09:14] *** ilogger2 joined
[09:20] *** gongyiliao joined
[09:20] *** amnesiac joined
[09:22] *** iblechbot joined
[09:22] *** amnesiac left
[09:26] *** the_dormant joined
[09:27] *** the_dormant left
[09:31] *** polettix joined
[09:35] *** the_dormant joined
[09:48] *** the_dormant left
[09:54] *** Azure-BOT joined
[09:57] *** Azure-BOT left
[10:11] *** ebassi joined
[10:14] *** Aankh|Clone joined
[10:15] *** jedai joined
[10:30] *** gongyiliao left
[10:31] <moritz_> re

[10:32] *** ruoso joined
[10:41] *** elmex joined
[10:59] *** pmurias joined
[10:59] <pmurias> moritz_: re

[10:59] <lambdabot> pmurias: You have 1 new message. '/msg lambdabot @messages' to read it.

[11:01] *** gongyiliao joined
[11:02] *** gongyiliao left
[11:07] *** polettix left
[11:11] *** devogon_ joined
[11:19] *** the_dormant joined
[11:22] *** the_dormant left
[11:38] *** lichtkind joined
[11:43] *** nipotan is now known as nipotaway

[11:43] *** cai joined
[12:00] *** rindolf joined
[12:15] *** devogon_ left
[12:15] *** devogon joined
[12:16] *** devogon left
[12:21] *** devogon joined
[12:34] *** dalek joined
[12:35] *** ebassi is now known as ebassi|lunch

[12:47] *** |Jedai| joined
[13:01] *** kanru joined
[13:05] *** jedai left
[13:05] *** ebassi|lunch is now known as ebassi

[13:05] *** ebassi left
[13:06] *** ebassi joined
[13:29] *** baest joined
[13:45] *** franck____ joined
[13:48] *** franck___ joined
[13:48] *** franck____ left
[13:49] *** franck____ joined
[13:49] *** franck___ left
[13:50] *** franck____ left
[13:51] *** Aankh|Clone left
[14:01] *** Aankhen`` joined
[14:01] *** TJCRI joined
[14:04] *** drrho joined
[14:06] *** franck___ joined
[14:06] *** drbean joined
[14:06] *** drbean left
[14:07] *** drbean joined
[14:21] *** gugod joined
[14:25] *** justatheory joined
[14:28] *** kanru left
[14:31] *** Lunchy joined
[14:42] *** kanru joined
[14:46] *** justatheory left
[14:51] <[particle]> yak shaving &

[14:53] *** franck___ left
[14:56] *** cai left
[15:00] <pugs_svn> r18772 | agentz++ | [PCR] fixed the final Win32 test failure regarding hashing randomness.

[15:04] *** dlocaus joined
[15:04] <dlocaus> Hello!

[15:04] <lambdabot> dlocaus: You have 1 new message. '/msg lambdabot @messages' to read it.

[15:06] <pugs_svn> r18773 | agentz++ | [PCR] bumped the version number to 0.28

[15:06] <dlocaus> @help

[15:06] <lambdabot> help <command>. Ask for help for <command>. Try 'list' for all commands

[15:06] <dlocaus> @help list

[15:06] <lambdabot> list [module|command]

[15:06] <lambdabot> show all commands or command for [module]. http://www.cse.unsw.edu.au/~dons/lambdabot/COMMANDS

[15:07] <agentzh> @list

[15:07] <lambdabot> http://www.cse.unsw.edu.au/~dons/lambdabot/COMMANDS

[15:07] <dlocaus> @clear-messages

[15:07] <lambdabot> Messages cleared.

[15:10] <pugs_svn> r18774 | dlo++ | [kp6] added link for lambdabot

[15:11] <pugs_svn> r18775 | agentz++ | [PCR] some releng work for 0.28

[15:15] <pmurias> dlocaus: hi

[15:16] <pmurias> dlocaus: got my message?

[15:19] *** justatheory joined
[15:25] *** drrho left
[15:29] *** justatheory left
[15:31] <obra> $TIMEOFDAY

[15:39] <dlocaus> pmurias: yes, 

[15:39] *** rindolf left
[15:39] <dlocaus> pmurias: I'm currently trying to debug t/kp6/15-capture-from-rule-block.t

[15:40] <dlocaus> pmurias: the problem is I'm caught up in all of Pair.pm's INIT blocks, and it has a LOT of them.

[15:40] *** amnesiac joined
[15:40] <dlocaus> does anyone know how to force the debugger to skip the INIT { } blocks?

[15:40] <dlocaus> putting $DB::single and then using "c" doesn't work, the perl debugger still stops on the first line of INIT{ .. }

[15:43] <pmurias> dlocaus: did fixing what i mentioned help?

[15:43] <dlocaus> well, yes, it appeared to fix the majority of bugs, but 15-capture...t seams to go into an infinite loop

[15:43] <dlocaus> I think, I'm trying to figure out how to get the debugger to debug it.

[15:43] <pmurias> you could temporarly disable INIT blocks in the emitter

[15:44] <dlocaus> the INIT blocks are being invoked in Pair.pm

[15:44] <dlocaus> compiled/perl5-kp6-mp6/lib/KindaPerl6/Runtime/Perl6/Pair.pm

[15:45] <dlocaus> ha ah!

[15:45] *** Psyche^ joined
[15:45] <pmurias> dlocaus: fixed it?

[15:46] <dlocaus> the solution is to create BEGIN { sub daniel_test { print 1; } }; then put main::daniel_test(); where you want the break point, and then use b main::daniel_test to get there.

[15:46] <dlocaus> pmurias: no, just finally got a break point :)

[15:47] <dlocaus> now, I'm going to try and find out where it infinitely loops  (I'm assuming that 4 minutes of no response is an infinite loop.. rather than actuall slowness)

[15:56] <dlocaus> omg...

[15:56] <dlocaus> $::MyGrammar dumps to 3k lines of variable content.

[15:58] *** justatheory joined
[16:00] *** justatheory left
[16:02] *** Psyche^ is now known as Patterner

[16:07] *** barney joined
[16:16] *** chris2 joined
[16:23] *** TJCRI left
[16:24] <dlocaus> pmurias: ping?

[16:25] <dlocaus> With the fix you suggested, gammar tests 15 & 17 do not respond, but other tests do.  Should I commit the fix, and then skip those tests?

[16:25] <dlocaus> by "do not respond" I mean they just continue running and there does not seam to be any resolution on the test.

[16:27] <pmurias> dlocaus: pong

[16:27] <dlocaus> do you have a suggestion?

[16:27] <pmurias> dlocaus: commit the fix

[16:28] <dlocaus> what about the test cases?

[16:28] <pmurias> leave them as failures

[16:28] *** justatheory joined
[16:28] <dlocaus> they don't fail

[16:28] <dlocaus> they just keep on going...

[16:28] <dlocaus> as if they were in an infiniate loop

[16:29] <dlocaus> If I commit this, then some smoke server may be waiting a long time...

[16:29] <dlocaus> for results.

[16:29] <pmurias> there isn't a smoke server for kp6 as far as i know

[16:29] <dlocaus> should I deliberately break the 15 & 17 tests?, so that they "do" finish, with a failure at least?

[16:30] <pmurias> hard question

[16:30] <dlocaus> I know...

[16:30] <dlocaus> which, is why I'm asking :)

[16:30] <pmurias> leave them as they are 

[16:31] <pmurias> the person debugging will not have to unbreak them

[16:31] <dlocaus> how will people do the test cases to test their own changes, do the test cases?

[16:31] <dlocaus> everyone working on something else will be stuck.

[16:32] <pmurias> break them then

[16:32] <dlocaus> ok

[16:32] <pmurias> i remembered that C-c stops the whole test process

[16:34] <pmurias> have you used KP6_TOKEN_DEBUGGER=1?

[16:35] <dlocaus> humm no

[16:35] *** ting joined
[16:35] <dlocaus> I'll give that a shot, right after I commit

[16:35] *** justatheory left
[16:42] <pugs_svn> r18776 | dlo++ | [kp6]

[16:42] <pugs_svn> r18776 | dlo++ | I have commited a fix on pmurias's suggestion, which appears to fix a has_default.bit() issue, where 

[16:42] <pugs_svn> r18776 | dlo++ | has_default was not being assigned a "bit" class.  It was being left "undef", which caused a but in

[16:42] <pugs_svn> r18776 | dlo++ | Emit/Perl5.pm which is depending on the has_default.bit class.

[16:42] <pugs_svn> r18776 | dlo++ | 

[16:42] <pugs_svn> r18776 | dlo++ | I have deliberately broken grammar tests 17 and 15.  With this bug fix, the test cases do not appear to complete.  

[16:42] <pugs_svn> r18776 | dlo++ | They either "hang" or go into an infinite loop.  Test case grammar/15 does not complete after 4 minutes.

[16:42] <pugs_svn> r18776 | dlo++ | 

[16:42] <pugs_svn> r18776 | dlo++ | Both test cases, have compiliation errors that will cause them to failure.  Comments are included as to why they are 

[16:42] <pugs_svn> r18776 | dlo++ | forced to fail.

[16:45] <obra>   dlo++ # long commit messages

[16:47] <Tene> obra++ # rewarding long commit messages

[16:50] <dlocaus>  :)

[16:51] <dlocaus> wait a minute

[16:51] <dlocaus> @karma dlocaus

[16:51] <lambdabot> You have a karma of 5

[16:51] <dlocaus> I'm dlocaus

[16:51] <Tene> @karma dlo

[16:51] <lambdabot> dlo has a karma of 74

[16:51] <pmurias> dlocaus++ # working on kp6

[16:51] <dlocaus> dlo is my CPAN id, and my svn.pugscode.com user id.

[16:52] <dlocaus> dlocaus is my irc name, "dlo" is already taken on freenode.

[16:52] *** dlocaus is now known as dlo

[16:52] *** dlo is now known as dlocaus

[16:52] *** dlocaus left
[16:53] *** dlocaus joined
[16:53] <dlocaus> my karma is being given away! wahhhhh!

[16:54] <Tene> @dlocaus-- # no karma for you

[16:54] <lambdabot> Unknown command, try @list

[16:54] <Tene> ;)

[16:54] * dlocaus cries

[16:56] *** weinig joined
[17:03] *** drrho joined
[17:03] *** ruoso left
[17:06] *** araujo joined
[17:08] *** justatheory joined
[17:10] *** jedai joined
[17:12] *** rindolf joined
[17:17] *** Aankhen`` left
[17:28] *** |Jedai| left
[17:32] *** drrho left
[17:35] *** ebassi left
[17:40] <moritz_> i've got a new hobby: taking a random shell and write `!! | wc -l' ;-)

[17:41] <rgs> you like danger

[17:41] <Tene> Interesting.

[17:44] *** amnesiac left
[17:55] *** lambdabot joined
[17:55] <dlocaus> lambabot left for fishies?

[17:56] <moritz_> @tell lambdabot boo

[17:56] <lambdabot> Nice try ;)

[17:57] *** justatheory left
[17:58] *** rindolf left
[18:00] <dlocaus> @tell lambabot lambdabot did a boo boo

[18:00] <lambdabot> Consider it noted.

[18:00] *** TJCRI joined
[18:00] *** cmarcelo joined
[18:01] <pmurias> dlocaus: die might be a better way of making a test file fail than a undeclared subroutine

[18:01] <dlocaus> pmurias:  we have "die"?

[18:02] <moritz_> or `say "not ok $number"', and comment the failing lines

[18:03] <dlocaus> humm, didn't think of that.

[18:03] <dlocaus> I'll make thos modifications in a bit.

[18:03] <dlocaus> I'm right in the middle of futzing with MOP.pm

[18:08] *** Psyche^ joined
[18:11] *** rindolf joined
[18:15] <pmurias> walk&

[18:16] <moritz_> table tennis &

[18:21] *** jovs joined
[18:26] *** Patterner left
[18:26] *** Psyche^ is now known as Patterner

[18:36] <pugs_svn> r18777 | dlo++ | Put in mortiz_'s suggestion on how to fail better

[18:38] *** Khisanth joined
[18:49] *** TreyHarris joined
[18:49] *** TreyHarr1s left
[18:50] <dlocaus> hummus &

[19:06] *** rindolf left
[19:08] *** fridim_ joined
[19:13] *** jisom joined
[19:15] *** devogon left
[19:16] *** devogon joined
[19:19] <pmurias> ls

[19:19] <pmurias> wrong screen window

[19:19] <pmurias> dlocaus: have you seen agentzh's tracer?

[19:22] *** fridim_ left
[19:24] *** barney left
[19:26] *** polettix joined
[19:36] *** chris2 left
[19:41] *** jisom left
[19:56] <dlocaus> pmurias: sorry, I was eating lunch

[19:56] <dlocaus> pmurias: no, what is it/

[19:56] *** Southen joined
[19:59] <pasteling> "dlocaus" at 63.192.210.11 pasted "Code to catch infinite ::DISPATCH loops." (34 lines, 1.2K) at http://sial.org/pbot/28405

[19:59] <dlocaus> pmurias: I'm thinking about committing that code that is in the last message, do you have a comment?

[20:00] <dlocaus> it goes in MOP.pm sub ::DISPATCH

[20:03] <pmurias> looks good

[20:03] <pmurias> DB::single invokes the debuger?

[20:04] <dlocaus> well, if you start it in debugging mode.

[20:04] <dlocaus> perl -d scripts/kp6 ...

[20:07] <pmurias> http://pugs.blogs.com/pugs/2007/10/a-graphical-tra.html

[20:07] <lambdabot> Title: Pugs: A graphical tracer for Perl 6 regexes based on PCR

[20:08] <dlocaus> pmurias: ok, I'll check that out

[20:13] <pugs_svn> r18778 | dlo++ | [kp6]

[20:13] <pugs_svn> r18778 | dlo++ | I have been really hard time chasing down a regex bug.  Mostly due to the problem of tracing the stack.  I have 

[20:13] <pugs_svn> r18778 | dlo++ | written code into Runtime/Perl5/MOP.pm ::DISPATCH to detect infinite loops.  The premise is simple.  If you see the 

[20:13] <pugs_svn> r18778 | dlo++ | same ::DISPATCH(ARGS) call more than once, you've entered a circular loop.

[20:13] <pugs_svn> r18778 | dlo++ | 

[20:13] <pugs_svn> r18778 | dlo++ | This code is enabled by setting enviromental variable DEBUG = 1 (or 2 for more info)

[20:13] <pugs_svn> r18778 | dlo++ | setenv DEBUG 1

[20:13] <pugs_svn> r18778 | dlo++ | 

[20:13] <pugs_svn> r18778 | dlo++ | [email@hidden.address] #perl6

[20:18] <dlocaus> pmurias: I think MOP.pm needs to document the hash structures it builds.

[20:18] <dlocaus> pmurias: do you have any thoughts right off hand?

[20:18] <pmurias> looking

[20:19] <pmurias> dlocaus: it could document the internal object format

[20:20] <pmurias> what fields besides _dispatch the object can have

[20:21] <dlocaus> well, I was thinking that DISPATCH($::PROTO,'add_method','func', args ) could include $self->{_document} = [

[20:21] <dlocaus> "func belongs to $self->{ name }", .. next func ];

[20:22] <dlocaus> putting _document in the list, would give the human debugger an idea of exactly where he is, when he's busy touring the list.

[20:22] <pmurias> i don't understand

[20:24] <pmurias> the objects need to keep extra info to make the dumps more readable?

[20:24] <dlocaus> well, I was attempting to understand $::MyGrammar, and x \$::MyGrammar drops 3k lines of "variable settings".  When I use the DEBUG code in MOP.pm (I just added it), it produces a trail 4k lines long.

[20:24] *** idiotmax joined
[20:24] <dlocaus> When we are going though the ::DISPATCH / $::MyGrammar, we need some way of "knowing" or having an "idea" of where we are.

[20:25] <pmurias> grabbing a better chair&

[20:25] <dlocaus> pmurias: ::DISPATCH( $::MyGrammar, 'tok2', );

[20:25] <dlocaus> that code generated 4k of enter/exit documentation

[20:26] <pmurias> you shouldn't dump objects with Data::Dumper

[20:27] <dlocaus> that wasn't Data::Dumper, that was perl's debugger x command

[20:28] <pmurias> i'm not familiar with the perl debugger but i guess it's equivalent

[20:28] *** cookys joined
[20:29] <dlocaus> well, my point is I'm wandering in the forest of $::MyGrammar without a road map.

[20:29] <pmurias> dlocaus: i'll check what you get

[20:29] <dlocaus> I'm thinking that MOP.pm should be documenting that forest for me (or doing something so that I know where I am when I'm trying to debug it)

[20:30] <pugs_svn> r18779 | dlo++ | cleaned up the output a bit

[20:31] <pmurias> dlocaus: my grammar should have a .perl metho

[20:31] <pmurias> d

[20:31] *** cookys left
[20:31] <pmurias> which would dump only the intresting stuff

[20:32] <pmurias> or are you intrested in the "low level" stuff as the _dispatcher etc.?

[20:32] *** cookys joined
[20:33] *** cookys left
[20:33] <dlocaus> well, I'm trying to figure out how this code got into an infinite loop

[20:33] *** idiotmax left
[20:34] *** cookys joined
[20:37] <pmurias> dlocaus: there shouldn't be ';' and the end of classes/modules

[20:37] <pugs_svn> r18780 | dlo++ | [kp6] Moved edited code from compiled into src MOP.pm

[20:38] <pasteling> "dlocaus" at 63.192.210.11 pasted "module Main { $_ = 'a'; MyGram" (14 lines, 167B) at http://sial.org/pbot/28408

[20:38] <dlocaus> pmurias: that?

[20:38] <pmurias> yes

[20:39] <pmurias> kp6 recognies {} as hash subscripts

[20:39] <pmurias> with the ; colons

[20:40] <dlocaus> humm. ok

[20:40] <dlocaus> well, the code still doesn't work :(

[20:41] *** idiotmax joined
[20:41] <pmurias> still infites loops

[20:41] <pmurias> ?

[20:42] <pugs_svn> r18781 | dlo++ |  [kp6] removed an excessive print (newline)

[20:42] <dlocaus> yes

[20:43] <dlocaus> pmurias: how do I invoke the MyGrammar.perl() ?

[20:44] <pmurias> i don't think there is one

[20:44] <pmurias> ::DISPATCH($::MyGrammar,'perl') or MyGrammar.perl() if there were

[20:45] <dlocaus> is this something I should leave to fglock or someone else to debug?  I'm getting a sense I'm starting to thrash.

[20:45] <pmurias> it's not important

[20:46] <dlocaus> ok.

[20:46] <dlocaus> I'm moving on to the next bug.  I'll add this to the TODO list?

[20:46] <pmurias> perl5rx is the engine which will be used for the bootstap

[20:46] <pmurias> add it

[20:46] <dlocaus> ok

[20:47] <dlocaus> is there a place where I can store code in the repositry in a kind of "my space" that other people can access?

[20:47] <dlocaus> like a home directory?  I have a nice piece of code that I broke down, that would be useful to the next person who has to debug this.

[20:47] <pmurias> misc/pX

[20:48] *** HiTech69 joined
[20:49] <pmurias> got to buy cola& (not that I would ever drink that horrid stuff)

[20:59] <pugs_svn> r18782 | dlo++ | [kp6] 15-capture-from-rule-block.t goes into an infinite loop.  I can't solve this.  Someone else will have to try and give it a stab, see misc/pX/dlocaus/kp6-grammar-test-15.pl

[21:03] *** ludan joined
[21:14] *** dlocaus left
[21:18] *** buubot joined
[21:22] *** idiotmax left
[21:27] *** justatheory joined
[21:35] *** ilogger2_ joined
[21:37] *** thoughtpolice joined
[21:41] *** zostay joined
[21:53] *** cookys joined
[21:54] *** cookys left
[21:55] *** cookys joined
[21:59] *** Limbic_Region joined
[22:05] *** cookys left
[22:06] *** cookys joined
[22:09] *** cognominal_ joined
[22:11] *** fridim_ joined
[22:17] *** the_dormant joined
[22:43] *** the_dormant left
[22:46] *** cognominal_ left
[22:54] *** fridim_ left
[23:05] *** tlb joined
[23:20] *** baalial joined
[23:27] *** luqui joined
[23:29] *** revdiablo joined
[23:31] *** thoughtpolice left
[23:50] *** baalial left
