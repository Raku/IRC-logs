[00:00] <rhr> doesn't a Str contain either a buf or an array of codes or graphs?  should there just be an interface for accessing those directly?

[00:01] <TimToady> there's no guarantee that Str is stored in anything directly indexible

[00:01] <rhr> or does that constrain the implementation too much?

[00:01] <rhr> ok

[00:02] <TimToady> a grapheme could consist of one base character and four or five extras...

[00:03] <TimToady> I suppose a buf of arbitrary Int could in theory encode any character

[00:03] <rhr> that would be tricky...

[00:03] <TimToady> but usually you get a serial representation of text, and there's an awful lot of overhead in assuming it's always turned into something you can .[]

[00:04] <TimToady> P5 has gotten away with using utf-8 internally rather well (apart from compatibility issues)

[00:05] <dduncan> now I just with P5 had a simple test one could apply to a string to say "is this in character mode" rather than "is this in byte mode"

[00:05] <TimToady> the main difference in P6 is we're trying to avoid associating positions with numbers at all

[00:05] <TimToady> unless forced to

[00:05] <TimToady> so the position remains the same even if the string decides to change representation underneath

[00:05] <dduncan> afaik, the current Encode::is_utf8 only returns true if its a character outside the ascii range

[00:06] <dduncan> so that by itself can't test if a string is characters

[00:06] <dduncan> except that if it is false, you can test that a string is not characters

[00:07] <TimToady> P6 limits Buf8 semantics to ASCII; you have to tell it what a hi-bit char means explicitly

[00:07] <TimToady> so no mixing up implicit latin-1 with implicit utf-8

[00:09] <rhr> can you .[] a buf?

[00:10] *** justatheory joined
[00:15] <TimToady> yes, it's both an array and a string

[00:16] <TimToady> but like a Cat it behaves more like a string in list context

[00:16] <TimToady> (I think)

[00:17] <TimToady> though there some inconsistency in saying that @$foo pulls out the elements, if list($foo) doesn't...  hmmm...

[00:17] <rhr> yeah, that's a problem...

[00:18] <TimToady> so I guess explicit list() does but implicit list context doesn't

[00:18] <TimToady> implicit list context being more like capture context

[00:18] <TimToady> so we're probably okay there

[00:18] <TimToady> I keep confusing list() with capture context.

[00:19] <TimToady> and if I can't keep it straight... :)

[00:19] <rhr> so most list contexts are really capture contexts?

[00:20] <TimToady> yes, until they're coerced or bound

[00:20] <TimToady> which is sort of contrary to P5 usage

[00:20] <TimToady> part of the reason I keep tripping myself up

[00:21] <TimToady> just because something is in a list doesn't put it into list context

[00:21] <TimToady> foo(@foo,@bar) almost certainly has @foo in scalar context

[00:21] <TimToady> and maybe @bar too

[00:21] <rhr> what (other than bufs) responds differently to capture context?

[00:22] <TimToady> eh? nothing ressponds to capture context...

[00:22] <TimToady> the whole point of capture context is to defer any such response...

[00:22] <rhr> ok

[00:22] *** Limbic_Region joined
[00:23] <TimToady> \(@foo, @bar) doesn't commit to whether the arrays end up bound in list or scalar context

[00:23] <TimToady> and function arglists as well as returns are automatcially \()ified

[00:23] <rhr> right, I think I get it now

[00:23] <TimToady> in fact, we could replace \() with dontcall(@foo,@bar) or some such

[00:24] <TimToady> capture(@foo,@bar) more likely

[00:24] <TimToady> but the \() notation is handy

[00:25] <TimToady> and fairly compatible with p5think

[00:53] *** bonesss joined
[00:53] *** nipotaway is now known as nipotan

[01:05] *** weinigLap joined
[01:06] *** [particle] joined
[01:14] *** unobe_away is now known as unobe

[01:15] *** [particle] joined
[01:17] *** justatheory joined
[01:18] *** zamolxes joined
[01:23] *** Aankh|Clone is now known as Aankhen``

[02:08] <Aankhen``> \() seems similar to Lisp's QUOTE.

[02:51] *** mako132_ joined
[02:52] *** Eidolos joined
[02:53] *** penk joined
[03:03] *** Jmax joined
[03:08] *** Aankhen`` joined
[03:17] * Aankhen`` starts a smoke.

[03:20] <thoughtpolice> hey Aankhen`` 

[03:20] <Aankhen``> Hiya thoughtpolice. :-)

[03:20] <Aankhen``> What's shakin'?

[03:20] <thoughtpolice> nothing really. i woke up

[03:20] <thoughtpolice> that was about it

[03:20] <Aankhen``> Aww, poor you. :-(

[03:21] <thoughtpolice> my sleep is all messed up during the summer

[03:21] <Aankhen``> I'm finally done with three days of barely any sleep; napped for a couple of hours right after college.  Looking forward to the weekend.

[03:21] <thoughtpolice> hopefully once everybody else is asleep and it's quiet I can write something

[03:21] <Aankhen``> Heh.

[03:23] <thoughtpolice> i'm running a smoke

[03:23] <thoughtpolice> before I start writing anything I should probably update

[03:29] <Aankhen``> Hmm, error building.

[03:31] *** bonesss joined
[03:31] <Aankhen``> Dang, can't remember how I'd fixed this last time.

[03:31] <Aankhen``> Or maybe I just did a rebuild.

[03:31] <thoughtpolice> uh, brb

[03:31] * Aankhen`` tries.

[03:36] *** amnesiac joined
[03:39] *** thoughtpolice joined
[03:42] <Aankhen``> Okay, rebuild worked.

[03:42] <Aankhen``> WB thoughtpolice.

[03:44] <Aankhen``> And we start our smoke.

[03:45] *** gilby left
[03:46] <thoughtpolice> building now

[03:46] <thoughtpolice> [ 56 of 109] Compiling Pugs.AST.Internals

[03:46] <thoughtpolice> :x

[03:46] <Aankhen``> ext/Perl-Compiler/t/PIL.t

[03:48] <thoughtpolice> hm, anybody seen this: http://deputy.cs.berkeley.edu/

[03:48] <lambdabot> Title: Deputy

[03:48] <thoughtpolice> seems interesting.

[03:50] <thoughtpolice> written in ocaml too

[03:51] <Aankhen``> t/builtins/arrays now.

[03:51] *** REPLeffect joined
[03:57] <Aankhen``> Finishing up t/examples/99problems/ now.

[03:58] <Aankhen``> (I'm keeping you all informed since I know you're dying to know.)

[03:58] <thoughtpolice> i wouldn't know what to do without it

[03:58] <Aankhen``> I thought as much.

[04:03] *** duend joined
[04:07] * amnesiac stabs Aankhen`` 

[04:09] * Aankhen`` spontaneously combusts.

[04:09] <Aankhen``> amnesiac: Now what did I do to deserve that?

[04:09] <amnesiac> Aankhen``, being Aankhen`` 

[04:09] <amnesiac> :P

[04:09] <Aankhen``> :-(

[04:09] <amnesiac> :)

[04:09] <Aankhen``> Just for that, I'm at t/run/!

[04:11] * spinclad awaits the next checkpoint with breath abated

[04:11] <Aankhen``> T/UNSPECCED LAWL

[04:11] <Aankhen``> Ahem.

[04:11] <Aankhen``> Sorry, evil alter-ego took over for a second.

[04:12] <spinclad> 14vv1

[04:13] <Aankhen``> Heh.

[04:14] <spinclad> CAN DUZ UNSPECKED ?

[04:16] <Aankhen``> ROTFL.

[04:16] <Aankhen``> Okay, smoke done, uploading.  You can all breathe easy now.

[04:16] <spinclad> whew! thanks, Aankhen``.

[04:17] <Aankhen``> No prob.

[04:17] <Aankhen``> I'm a very nice guy.

[04:17] <Aankhen``> I do accept donations, though, if you're of a mind.

[04:17] * spinclad cookies Aankhen`` 

[04:17] <Aankhen``> Yum.

[04:18] <Aankhen``> What a delicious way to go.

[04:25] <Aankhen``> Dang, still 31 minutes.

[04:54] *** [particle1 joined
[05:05] *** BooK joined
[05:07] *** weinigLap joined
[05:09] *** Maddingue joined
[05:09] *** [particle] joined
[05:38] *** dolmans joined
[05:49] *** rfordinal joined
[05:51] <lvh> wah? haskell? i dont know any haskell :-(

[05:52] <dduncan> you don't have to in order to use perl 6

[05:52] <lvh> [particle] gave me a commit bit

[05:53] <lvh> if i want to make good use of it, i should know haskell, no?

[05:53] <[particle]> nah

[05:53] <dduncan> that's fine ... probably a majority of people who commit to Pugs don't know haskell

[05:53] <dduncan> I don't know haskell

[05:53] <[particle]> you can program in perl 5, or perl 6, or document things in pod

[05:53] <lvh> aha.

[05:53] <lvh> just one question, why haskell? :-p

[05:53] <dduncan> audreyt picked it

[05:53] <[particle]> A Grand Experiment.

[05:54] <[particle]> audrey wanted to learn haskell. what better way than to write a perl 6 compiler in it?

[05:54] <lvh> and this is the next "offical" perl6?

[05:54] <[particle]> there is no "official" perl 6

[05:54] <[particle]> *implementation

[05:54] <[particle]> only the spec and test suite are official

[05:54] <dduncan> anything which implements the Synopsis is a Perl 6

[05:55] <dduncan> Pugs happens to be the most complete today

[05:55] <dduncan> one

[05:55] <lvh> aha.

[05:55] <[particle]> so, it's possible someday you'll see a perl 6 running on CLR or JVM

[05:55] <lvh> but the perl5.8 most people have installed is written in C, right?

[05:55] <lvh> if not I need to do an apt-get source

[05:55] <dduncan> yes

[05:55] <[particle]> yes.

[05:55] <[particle]> perl 5 has an official implementation and an unofficial spec :)

[05:56] <dduncan> that is, the implementation is the spec

[05:56] <dduncan> generally, a nasty situation to be in

[05:57] <[particle]> lvh: do you know c?

[05:57] <thoughtpolice> haskell is the bomb

[05:57] <thoughtpolice> that might also be a reason as to why it was used :)

[05:57] <lvh> [particle]: yes, more than i know perl and DEFINATELY more than I know haskell

[05:58] <[particle]> well... it just so happens parrot is written in c, and looking for help :)

[05:58] <lvh> parrot wanna coder? KRAA KRAA

[05:58] <thoughtpolice> if you want low level, parrot is the place to be.

[05:58] <thoughtpolice> get workin' on a vm. :)

[05:59] <[particle]> objec-

[05:59] <[particle]> coding an object-oriented assembler is fun

[05:59] <lvh> tionable C?

[05:59] <thoughtpolice> definately

[05:59] <dduncan> I'm writing a VM in Perl for another language

[05:59] <dduncan> not sure how many people do that

[05:59] <thoughtpolice> what language

[06:00] <dduncan> my own Muldis D language

[06:00] <dduncan> a replacement for SQL

[06:00] <thoughtpolice> cool

[06:00] <[particle]> who doesn't like sql? ;)

[06:00] <dduncan> essentially, my compiler just generates Perl code from it, which is what actually runs

[06:00] <thoughtpolice> there a parser/lexer you using specifically?

[06:00] <dduncan> so Perl's run-time comilation abilities with eval are part of the bomb

[06:01] <thoughtpolice> or is it just a simple enough DSL you're doing it by hand

[06:01] <[particle]> lvh: you'll likely find coders hacking away madly on irc.perl.org#parrot in 6hrs or so (all's quiet now)

[06:01] <dduncan> Muldis D's native form is an AST, or tree of perl objects, so no parsing needed

[06:01] <thoughtpolice> sweet

[06:01] <dduncan> that said, a string form can be made over this which is grammatically very simple

[06:01] <lvh> [particle]: what tz do most of them live in

[06:02] <dduncan> but that would be mainly just for use in a shell, normal coders would use the ASTs

[06:02] <lvh> but parrot, as i understand it, tries to be a vm for many languages, including perl6

[06:02] <[particle]> i'm PST, but we have folks in australia, austria, england, and every usa tz

[06:02] <thoughtpolice> yes, it's obligation is to support perl 6 semantics

[06:03] <[particle]> lvh: yes, that's accurate

[06:03] <dduncan> SQL is deficient for the task of relational databases, Muldis D does it better

[06:03] <thoughtpolice> but it is designed as a virtual machine to be used by many languages

[06:03] <lvh> however, they're following the same perl6 spec (_the_ perl6 spec on pugscode.org) as you guys are?

[06:03] <thoughtpolice> in the source distribution there are language implementations

[06:03] <dduncan> if one asks why, one could also ask why we're making Perl 6 when Perl 5 exists

[06:03] <thoughtpolice> such as Basic, perl1 (punie) and even perl 6

[06:03] <dduncan> the reason is similar

[06:03] <[particle]> lvh: we need to be able to support the concepts defined in the perl 6 spec

[06:03] <[particle]> btw i'm a parrot project team member

[06:04] <[particle]> i hang out here because i like the company :)

[06:04] <thoughtpolice> hah

[06:05] <[particle]> lvh: parrot has it's own spec: http://parrotcode.org/docs/pdd/

[06:05] <lambdabot> Title: Parrot Documentation :: Parrot Design Documents - parrotcode

[06:06] <[particle]> we're currently implementing pdd15, the object model

[06:08] <lvh> [particle]: well the good thing is the only real OO playing I've done is with Moose, which as I understand it is a perl6ish implementation of OO in perl5

[06:09] <[particle]> yes, indeed. moose was reviewed closely by allison when writing pdd15 (and i'm familiar with it myself)

[06:10] <[particle]> soon we'll be (re)implementing i/o in parrot

[06:10] <[particle]> many of the subsystems (e.g. i/o) are prototypes

[06:11] <[particle]> so we're taking lessons learned, current research, and best practices and redefining the subsystems one-at-a-time

[06:15] <gaal> hello everyone

[06:15] <[particle]> moose

[06:15] <gaal> moose!

[06:16] *** buu joined
[06:18] *** obra joined
[06:18] *** sunnavy joined
[06:18] *** obra_work joined
[06:19] *** rfordinal joined
[06:21] <lvh> do mooses go moo?

[06:24] <gaal> se

[06:25] <Aankhen``> We need more O(moose) algorithms.

[06:25] *** Averell joined
[06:25] <gaal> (:{moose}:)

[06:27] <SamB> Aankhen``: are you looking to write "Ode to a moose"?

[06:27] * [particle] has to find a way to put that into a document somewhere, "...in the worst case, this algorithm behaves like a moose--watch out!"

[06:27] <Aankhen``> SamB: Not quite yet, no.

[06:28] <lvh> Aankhen``: tell me when you need some O(absurdly huge number^N) algorithms

[06:29] <gaal> I think Condorcet voting has some O(n^4) algos

[06:29] <Aankhen``> Heh.

[06:29] <lvh> still not as bad as 4^n :p

[06:30] *** lvh is now known as lvh_shower

[06:33] *** unobe joined
[06:39] <gaal> hahahaha, unicode bug? 03BB            GREEK SMALL LETTER LAMDA        [λ]

[06:40] <gaal> "lamda"? there is only one code point in unicode that calls this letter "lambda"

[06:43] *** fridim joined
[07:19] *** daxim joined
[07:23] *** devogon joined
[07:24] *** weinigLap joined
[07:24] *** jisom joined
[07:24] *** franck__ joined
[07:33] *** unobe is now known as unobe_away

[07:46] *** renormalist joined
[07:57] *** elmex joined
[08:02] *** buetow joined
[08:09] *** Jmax joined
[08:24] <dduncan> when svnbot is missing, who is able to bring it back?

[08:26] *** r0bby joined
[08:26] <thoughtpolice> has delegation not been implemented yet in pugs?

[08:27] <dduncan> dunno

[08:27] <dduncan> give an example

[08:29] <thoughtpolice> hm hold on i think I might have gotten it

[08:33] <thoughtpolice> hm it seems not

[08:37] *** dduncan left
[09:02] *** chris2 joined
[09:12] *** rindolf joined
[09:21] *** the_dormant joined
[09:24] <thoughtpolice> vroom.

[09:29] <thoughtpolice> anybody alive in here?

[09:29] <rindolf> Hi thoughtpolice 

[09:30] * moritz is alive of sorts

[09:30] <thoughtpolice> just got done with the object-orientation blog :)

[09:31] <thoughtpolice> about time, compared to the others the time span in which I wrote them was roughly that of a week.

[09:31] <thoughtpolice> but downtime has been nice

[09:34] <moritz> lvh++ # first commit. but please enter a log message next time ("added myself to AUTHORS" or something)

[10:16] <moritz> thoughtpolice: re blog post: if you want to modify a class member variable from outside you should declare it as "has $.age is rw;"

[10:16] *** kane__ joined
[10:18] <thoughtpolice> hm iirc it only works because the traits aren't implemented right?

[10:19] <thoughtpolice> i'll change it since I guess that would be the correct way

[10:22] <moritz> right

[10:24] <thoughtpolice> moritz: fixed all the examples that modified without is rw trait :)

[10:24] <thoughtpolice> moritz++

[10:25] <moritz> thoughtpolice: good

[10:25] <moritz> thoughtpolice: in the "Delegation" section... shouldn't clas Foo inherit from backend1 and backend2?

[10:25] <moritz> thoughtpolice: otherwise there is no conflict at all

[10:27] <moritz> and I think you didn't explain "sumbethod" right: "Submethods are for declaring infrastructural methods that shouldn't be inherited by subclasses, such as initializers"

[10:27] <moritz> from http://perlcabal.org/syn/S12.html#Submethods

[10:27] <lambdabot> Title: S12

[10:28] <thoughtpolice> moritz: just a sec

[10:31] <moritz> I wish I had that kind of review for http://perl-6.de/ ;-)

[10:31] <lambdabot> Title: Perl 6 - Schmerzloses Programmieren

[10:31] *** pelagic joined
[10:34] *** riffraff joined
[10:34] <riffraff> hi

[10:34] <moritz> hi riffraff ;)

[10:34] <daxim> how do I say glob(*) in pugs?

[10:35] <moritz> looking...

[10:36] <moritz> no glob in S29 :(

[10:41] <thoughtpolice> moritz: fixed submethods

[10:42] <moritz> thoughtpolice++

[10:42] <moritz> @karma thoughtpolice 

[10:42] <lambdabot> thoughtpolice has a karma of 1

[10:43] <moritz> s/inheritence/inheritance/ # unless I'm very much mistaken ;)

[10:45] <thoughtpolice> moritz: fixed those too

[10:45] <thoughtpolice> moritz++

[10:45] <thoughtpolice> and on the delegations note yeah foo needed to inherit

[10:45] <thoughtpolice> on perlcabal the .t shown didn't do this however, which is why the delegation failed

[10:45] <thoughtpolice> guess it needs to be updated

[10:46] <thoughtpolice> thanks :)

[10:51] <thoughtpolice> moritz: okay, I fixed I'm pretty sure most all of it. if you know anything on the note of operator overloading that'd be awesome. :p

[10:51] <thoughtpolice> well, at least the errata you specified

[10:55] *** gaal joined
[10:56] <moritz> thoughtpolice: I think you've done it the right way, it NYI or something ;)

[10:57] <thoughtpolice> :)

[10:57] <thoughtpolice> well at least I'm getting stuff out

[10:57] <thoughtpolice> and it's cool google analytics works with blogspot :)

[11:01] <daxim> http://www.rosettacode.org/wiki/Polymorphism#Perl     sub members = explosion in punctuation factory  :)

[11:01] <lambdabot> Title: Polymorphism - Rosetta Code

[11:02] *** rho joined
[11:35] *** nipotan is now known as nipotaway

[11:38] <renormalist> ?eval for 1..10 -> $i { say $i }

[11:38] *** fglock joined
[11:38] *** evalbot_r16643 is now known as evalbot_r16645

[11:38] <evalbot_r16645> OUTPUT[1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤] undef

[11:38] <renormalist> ?eval for 1..10 -> $i { say $i++ }

[11:38] <evalbot_r16645> Error: Can't modify constant item: VRef <Scalar::Const:0xb6715134>

[11:39] <renormalist> that's my most annoying missing feature in Pugs. I can't modify loop variables.

[11:39] <renormalist> anyone knows how to fix this? I know the answer: Only Audrey can do it, right? :-)

[11:45] <fglock> ?eval for 1..10 -> $i is copy { say ++$i }

[11:45] <evalbot_r16645> OUTPUT[2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤] undef

[11:46] *** deq` joined
[11:54] <fglock> ?eval for 1..10 -> $i { $i := $i + 1; say $i }

[11:55] <evalbot_r16645> OUTPUT[2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤] undef

[11:57] <gaal> also, I think Juerd's <-> proposal was finally accepted, so you can for @deer <-> $i { $i++ }, although you'd still need is copy with a range literal.

[12:00] <gaal> yes, as of r14356 / S04.

[12:01] <gaal> dunno if it's implemented, let's see

[12:01] <gaal> ?eval @moo = <1 2 3>; for @moo <-> $i { $i++ } @moo

[12:01] <evalbot_r16645> Error: ␤Unexpected ">"

[12:02] <gaal> apparently not. commits welcome!

[12:03] <gaal> prolly start with Parser.hs:1331, ruleBlockFormalPointy

[12:03] <gaal> renormalist: give it a go, fun small haskell whirl

[12:04] <gaal> bbiab&

[12:09] *** penk joined
[12:31] *** jedai joined
[12:40] *** IllvilJa joined
[12:42] *** prism joined
[12:43] <gaal> okay, I'm adding it, tests very welcome

[12:45] <gaal> TimToady: is <-> allowed everywhere -> is?

[12:49] *** jerrylee joined
[12:55] <gaal> huh! ruleBlockFormalPointy looks wrong, it has a separate parse for one final trait

[12:55] <gaal> so this is going to fail, I think:

[12:55] <gaal> ?eval @m=<1 2 3 4>; for @m -> $x is rw, $y is rw { $x++; $y++ }

[12:56] <evalbot_r16645> undef

[12:56] <gaal> mmmmh okay... whatever it is that's looking at the "lvalue" property of that param list is going to be disappointed.

[12:57] <gaal> ?eval @m=<1 2 3 4>; for @m -> $x is rw, $y { $x++; }

[12:57] <evalbot_r16645> undef

[13:06] *** jerrylee_ joined
[13:26] *** ofer joined
[13:34] *** jerrylee__ joined
[13:34] *** jerrylee__ is now known as jerrylee

[13:42] *** thoughtp1lice joined
[13:43] *** Aankh|Clone joined
[13:44] *** prism joined
[13:44] *** chris2 joined
[13:44] *** Averell joined
[13:44] *** felipe joined
[13:44] *** meppl joined
[13:45] *** devogon_ joined
[13:48] *** devogon joined
[13:52] *** sunnavy joined
[13:57] *** r0bby__ joined
[13:57] *** kanru joined
[14:01] *** awwaiid joined
[14:03] *** the_dormant joined
[14:06] *** rfordinal joined
[14:06] *** Loro_ joined
[14:20] *** isaacd joined
[14:36] *** lvh_shower is now known as lvh_clean

[14:36] *** lvh_clean is now known as lvh

[15:05] *** Casan joined
[15:07] *** Jmax joined
[15:07] *** Jmax joined
[15:08] *** Jmax joined
[15:17] *** orafu joined
[15:30] *** perlygatekeeper joined
[15:32] *** Jmax joined
[15:32] <perlygatekeeper> hey, where can I learn about perl6?

[15:33] <Gothmog_> I think the Synopses are a good point to start at: http://dev.perl.org/perl6/doc/synopsis.html

[15:33] <lambdabot> Title: Synopses - perl6

[15:34] <[particle]> http://dev.perl.org/perl6/

[15:34] <lambdabot> Title: Perl 6 - perl6

[15:36] <moritz> perlygatekeeper: a much gentler introduction is in http://svn.pugscode.org/pugs/docs/articles/tpr.pod

[15:36] <moritz> HTML-Version: http://moritz.faui2k3.org/pugs/docs/articles/tpr.pod.html

[15:36] <lambdabot> Title: Run Perl 6 Today!

[15:41] <moritz> although it seems a bit outdated :(

[15:45] *** Jmax joined
[15:48] <moritz> who is in charge of http://planetsix.perl.org/ ? maybe diveintoperl6 could be added

[15:48] <lambdabot> Title: Planet Perl Six

[15:48] <moritz> to the subscription list

[15:50] <[particle]> moritz: i have a feeling emailing [email@hidden.address] will help

[15:50] <moritz> [particle]: I'll try that ;)

[15:51] *** prism joined
[15:52] <TimToady> gaal: as far as I know, <-> is allowed anywhere that -> is syntactically, though of course there are contexts that are unlikely to supply a writeable variable

[15:52] <[particle]> for @array <-> $a { ... }

[15:52] <TimToady> your typical boolean expression isn't writeable, but then, you wouldn't use -> on the typical boolean expression either

[15:53] <TimToady> while @foo <-> @myaliasto@foo { ... } is silly, but if @foo were a function returning @foo, would be okay

[15:54] <TimToady> well, without the spurious @ there...

[15:55] <TimToady> but I am reminded that STD.pm doesn't recognize <-> yet...

[15:55] <[particle]> yeah, i just looked it up there and failed

[15:57] <TimToady> does now

[15:58] <[particle]> magic!

[15:58] <moritz> SCMagic?

[16:01] <[particle]> TimToady: does perl 6 have a way to introspect the subs of different statement control types?

[16:01] <[particle]> for example, get a list of all END subs

[16:01] <[particle]> *sub objects

[16:04] <TimToady> if you have a Code object you can ask it for its properties.  Certain END blocks also have to be stored in some global list, but that's because their semantics are global

[16:04] <TimToady> *Certainly

[16:04] <rindolf> Hi TimToady 

[16:05] <TimToady> top o' the mornin' to ye

[16:07] <TimToady> doubtless someone will write a way to walk all code objects in existence, for debugging and profiling if nothing else...

[16:10] <amnesiac> 'lo TimToady, all

[16:11] * amnesiac yawns

[16:11] <[particle]> TimToady: that's what i'm talking about, basically

[16:11] <[particle]> parrot's perl6 compiler may have a hash of arrays of code objects

[16:12] <[particle]> keyed on control type

[16:12] <TimToady> might, but the api probably shouldn't broadcast the data structure

[16:13] <[particle]> yeah, just mentioning that it would be easy to introspect, if the hll desires

[16:13] <TimToady> inside-out closures  :)

[16:14] <TimToady> but then how do you garbage collect obsolete code objects?

[16:14] <TimToady> there's a design smell there

[16:15] <[particle]> i don't think they need to stick around after they're executed

[16:15] <TimToady> eh? most of 'em do because you might reenter

[16:15] <TimToady> only the global ones are one-shot

[16:15] <[particle]> hrmm

[16:15] <[particle]> ah, right. i'm talking  about globals only

[16:17] <TimToady> I wouldn't necessarily even keep a hash of them, in that case

[16:17] <TimToady> just specially named global arrays of code

[16:17] <TimToady> @*END or whatever

[16:17] <lambdabot> Unknown command, try @list

[16:17] <TimToady> lambdabot: try it your own self

[16:18] <TimToady> they have to be called from a special spot to have special semantics anyway; I don't see any use case for hashifying them together

[16:18] *** justatheory joined
[16:19] <[particle]> ok

[16:20] <[particle]> looks like now they're keyed as 'END' (however this went in yesterday, and is far from final)

[16:20] <TimToady> doesn't mean there isn't one--I've been known to be stupid once or twice

[16:20] <[particle]> see 'reset' ;)

[16:21] <TimToady> druther not

[16:24] <TimToady> I suppose I could spec the official names of the code queues  :)

[16:26] <[particle]> if you feel it'll be helpful. if it's just internal to the compiler, then we're fine as is :)

[16:26] <TimToady> hmm, most of them are named by methods on the code object: &foo.ENTER

[16:26] <TimToady> but we don't have a name for the main code block

[16:27] <[particle]> yeah, you've got 'default' in STD

[16:28] <[particle]> but nothing for MAIN

[16:29] <TimToady> it's arguable whether END blocks belong more to the main code or are just global to the process

[16:30] <TimToady> probably doesn't matter

[16:31] <[particle]> i can't think of a reason to force a decision either way

[16:31] <TimToady> so I think using the existing global namespace is probably best, rather than forcing a new &__MAIN__ notation of some sort

[16:32] <[particle]> parrot has no :end modifier for subs now, so we need to keep them separate in a global to track them

[16:32] <TimToady> basically there's an implicit routine routine around the main code that calls it and handles ENDS after it exits

[16:32] <[particle]> yeah, that's ugly. stick with what we've got

[16:32] <[particle]> right. that's just what we're doing

[16:33] <TimToady> except I don't really see a need for the extra hash indirection offhand

[16:33] <[particle]> however we may abstract it a bit in PAST if necessary to support languages that may have multiple statement control types after main

[16:34] <[particle]> but i can't think of a language that has more than one type of end routine

[16:35] <[particle]> well, kiss then. we'll change to a global array

[16:37] <TimToady> I can see modperl6 rewriting all END blocks into LEAVE blocks on the main routine, since you could have multiple routines thinking they're "main"

[16:38] <TimToady> so maybe that's an argument not using the symbol table, but just attaching the ENDS to the main code

[16:38] <TimToady> then modperl6 doesn't have to rewrite

[16:38] <TimToady> so I think we need a way to name the main code

[16:39] *** fglock joined
[16:39] <[particle]> there will still be only one main per process, though, yes?

[16:40] <TimToady> not under modperl6

[16:40] <TimToady> probably

[16:40] <[particle]> yeah, i thought about saying 'thread'

[16:40] <[particle]> but we don't really have terminology down yet, ENOSPEC

[16:40] <TimToady> apache liking to pretend it's an OS...

[16:40] *** maskd joined
[16:40] <TimToady> &*BLOCK is probably the main code

[16:40] <[particle]> yeah, it thinks it's emacs or something

[16:41] <TimToady> so probably &*BLOCK.END should return the array of END blocks

[16:42] <TimToady> hmm, I wonder if each thread gets its own global namespace...

[16:43] <TimToady> PerlVM

[16:43] <[particle]> with a global namespace for shared stuff?

[16:43] <TimToady> @**FOO

[16:43] <lambdabot> Unknown command, try @list

[16:43] <[particle]> hee

[16:44] <[particle]> if hardware ever catches up to this language, it's gonna be some vm someday

[16:46] <rhr> if <-> binds rw paramaters, should <--> declare rw lvalue returns? (half-joking :)

[17:00] *** bonesss joined
[17:01] *** crem joined
[17:05] *** r0bby joined
[17:10] *** Psyche^ joined
[17:12] *** unobe_away is now known as unobe

[17:15] *** weinigLap joined
[17:16] *** weinigLap joined
[17:27] *** Psyche^ is now known as Patterner

[17:27] *** kaether joined
[17:30] *** weinigLap joined
[17:31] *** weinigLap joined
[17:55] <diakopter> what *does* it take to man/woman TPF's booth at an Oscon?

[18:04] *** unobe is now known as unobe_away

[18:12] *** justatheory joined
[18:14] *** justatheory joined
[18:30] *** Jmax joined
[18:36] *** Jmax joined
[18:37] *** dduncan joined
[18:42] *** jisom joined
[18:59] *** Sam_ joined
[19:09] *** bonesss joined
[19:12] *** Sam_ joined
[19:32] <gaal> rehi

[19:32] *** Limbic_Region joined
[19:32] <gaal> TimToady: okay, thanks. hopefully I can finish this tonight

[19:35] <Limbic_Region> salutations all

[19:36] <gaal> hi Limbic_Region 

[19:36] <Limbic_Region> did you get my @tell regarding the precompiled Test.pm ?

[19:37] <gaal> I saw that message, yes, but have no way of devving win32 these days

[19:37] <Limbic_Region> did the nopaste offer any insight?

[19:37] <gaal> I forget

[19:37] <gaal> got the url handy?

[19:40] <Limbic_Region> just a second

[19:41] <Limbic_Region> http://sial.org/pbot/24983 

[19:41] <lambdabot> Title: Paste #24983 from "Limbic_Region" at 68.48.99.41

[19:43] <gaal> ah yes, i remember now. what r is this?

[19:46] <gaal> Limbic_Region: cause there was actually one buggy revision, you may have hit that.

[19:46] <TimToady> n

[19:46] <TimToady> or was it y?

[19:46] <gaal> m

[19:55] <TimToady> offline for a while flying to san diego... &

[20:10] *** Sam_ is now known as weinigLap

[20:13] *** Aankh|Clone is now known as Aankhen``

[20:14] *** c9s joined
[20:26] *** japhb joined
[20:26] <gaal> I have the parser written, but it's not getting entered. presumably the parameter parser is too greedy, and unfortunately it looks like this is in an undecorated rule so i dont' knwo precisely what's failing. however:

[20:26] <gaal> my @m = <1 2 3>; for @m <-> $x { $x++ } @m

[20:27] <gaal> anyone got an idea why "<-" should be consumed? the error is on an unexpected ">".

[20:27] *** fridim joined
[20:27] <gaal> it's not taking < as the start of a list-quote <> op

[20:31] <rhr> less-than minus?

[20:32] <gaal> what does that mean, and why would it be expected there?

[20:34] <rhr> it doesn't make sense, but I don't see why it wouldn't be allowed @m < -xxx

[20:34] <rhr> just a guess

[20:34] <gaal> "< -" ne "<-"

[20:34] <rhr> aren't you allowed to leave out the space there?

[20:35] <gaal> I don't think you are, no

[20:35] <rhr> ok

[20:36] <rhr> ?eval say "foo" if -2<-1

[20:36] *** evalbot_r16645 is now known as evalbot_r16647

[20:36] <evalbot_r16647> OUTPUT[foo␤] Bool::True

[20:36] <gaal> hmm. that's a problem, then.

[20:37] <gaal> but i just ran out of wakies, so, tomorrow :/

[20:37] <rhr> <-> shouldn't be a problem with longest-token matching, but I don't know how pugs works

[20:39] <gaal> somoething must have committed.. but i'm asleep already. night...

[20:39] <gaal> zZZ&

[20:55] *** baest joined
[20:57] *** Alchemy joined
[20:58] *** prism joined
[21:19] *** fglock left
[21:43] *** prism joined
[21:54] *** perlbot joined
[21:54] *** polettix joined
[22:00] *** crem joined
[22:05] *** dagur joined
[22:09] *** weinigLap joined
[22:52] *** allbery_b joined
[22:56] *** Jakko joined
[22:56] <Jakko> hi, how wold you access the php like $_POST array in perl?

[22:58] <moritz> Jakko: are you talking about perl 6?

[22:58] <Tene> Jakko: could you give us a bit of context about what you're asking?

[22:58] <moritz> if not you're wrong here

[22:59] <moritz> Jakko: small hint: perldoc CGI

[23:01] <Jakko>  I'm using a HTTP::Request object

[23:01] <Jakko>  and the ->content sub seems to return an empty string

[23:01] <Jakko>  ...always...

[23:01] <Jakko> I'm talking about perl in general

[23:01] <Tene> Jakko: you probably want #perl

[23:01] <Tene> this channel is specifically for Perl 6

[23:02] <Jakko> did it change?

[23:02] <Jakko> I'm version  5.8.8 

[23:02] *** rafl joined
[23:02] <Tene> Perl 6 is the next version of perl that's currently in development.  It's quite different.

[23:02] <moritz> Jakko: _everything_ changed, perl 6 is a complete rewrite

[23:04] <Jakko> Thanks

[23:04] <Jakko> bye!

[23:04] *** Jakko left
[23:04] <Tene> Speaking of which, I need to start working on Web and HTTP and such.

[23:05] <moritz> if I can be of any help, be sure to let me know

[23:05] <moritz> I'm not good at designing systems, but if you need "implementation slaves" I might help you ;)

[23:25] *** Limbic_Region joined
[23:29] *** miyagawa joined
[23:34] <Limbic_Region> @tell gaal FYI, that precompiled Test.pm has apparently been b0rk ever since the pad refactor went in

[23:34] <lambdabot> Consider it noted.

[23:42] *** larsen_ joined
