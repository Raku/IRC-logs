[00:01] *** devogon left
[00:05] *** theorb joined
[00:06] *** dduncan joined
[00:17] *** theorbtwo left
[00:20] *** justatheory left
[00:21] *** polettix left
[00:21] *** TimToady left
[00:22] *** polettix joined
[00:24] *** diakopter left
[00:37] *** vbattsAtWork joined
[00:42] *** diakopter joined
[00:43] *** hoelzro joined
[00:47] *** TimToady joined
[00:48] *** polettix left
[00:50] *** penk left
[01:01] *** Ast left
[01:01] *** Ast joined
[01:05] *** vbattsAtWork left
[01:09] *** hoelzro left
[01:10] *** kanru left
[01:15] *** lyokato joined
[01:23] *** torz joined
[01:28] *** torz left
[01:29] *** [particle1 joined
[01:33] *** daxim_ joined
[01:33] *** [particle] left
[01:35] *** Daveman left
[01:37] *** weinig left
[01:41] *** audreyt left
[01:47] *** daxim left
[01:52] *** vbattsAtWork joined
[02:01] *** weinig joined
[02:02] *** weinig left
[02:02] *** weinig joined
[02:31] *** justatheory joined
[02:32] *** IllvilJa left
[02:54] *** bjoern_ joined
[02:54] <bjoern_> Hi, I have this code: [[[

[02:55] <bjoern_> token CR     { <[\x0D]> }

[02:55] <bjoern_> token LF     { <[\x0A]> }

[02:55] <bjoern_> token CRLF   { <CR> <LF> }

[02:55] <bjoern_> rule foo     { bar | <CRLF> }

[02:55] <bjoern_> my $content = "\x0d\x0a";

[02:55] <bjoern_> my $match = $content ~~ m:keepall/<foo>/;

[02:55] <bjoern_> say $match.perl;

[02:55] <bjoern_> ]]]

[02:55] <bjoern_> my version of Pugs says this does not match. However, if I change foo so it reads: '''rule foo { <CRLF> }''' the string matches. why is that?

[02:56] <bjoern_> (I tested this with 6.2.13 on Win32)

[03:02] *** nipotaway is now known as nipotan

[03:05] *** elmex_ joined
[03:09] *** elmex left
[03:10] *** vbattsAtWork left
[03:14] *** Daveman joined
[03:18] *** diotalevi joined
[03:20] *** fax joined
[03:20] <Chris> j #lisp

[03:20] <Chris> augh

[03:20] <Chris> sorry

[03:21] <fax> -_-

[03:26] *** israr joined
[03:29] *** mncharity left
[03:30] *** hkb_zz is now known as hkb_aw

[03:36] *** BinGOs left
[03:43] *** justatheory left
[03:48] *** israr left
[03:57] *** justatheory joined
[03:58] *** justatheory left
[04:00] *** Jamtech joined
[04:01] *** hkb_aw is now known as hkb_lab

[04:16] *** israr joined
[04:20] *** IllvilJa joined
[04:42] *** israr left
[04:51] *** elmex_ left
[04:55] *** Patterner left
[04:55] *** Psyche^ joined
[04:55] *** Psyche^ is now known as Patterner

[05:02] *** lyokato left
[05:09] *** drrho joined
[05:11] *** Aankhen`` joined
[05:12] *** drupek12 left
[05:13] *** lyokato joined
[05:42] *** K0brik joined
[05:43] <K0brik> hey

[05:46] <K0brik> #perl are too conservative so I went here instead

[05:46] <platypus> o.O

[05:47] <K0brik> they kicked me because I told them about the CutSys::Chao he

[05:48] <K0brik> some of them believe in a world ruled by a fascist minority

[05:51] <K0brik> how it going with the sexy perl?

[05:51] *** rford joined
[05:55] <dduncan> this channel is mainly for talk about Perl 6 ... Perl 5 is generally off-topic

[05:55] *** ahmadz joined
[05:55] <K0brik> to make good software one need good philosophy, right?

[05:56] <diotalevi> which is what we have Larry for.

[05:56] <K0brik> and all the other little helpers

[05:57] <ahmadz> hi

[05:57] <K0brik> may I call you brothers and sisters?

[05:58] <diotalevi> Huh?

[05:58] <K0brik> sure

[05:59] <diotalevi> I'd rather just be called by my handle.

[05:59] <K0brik> what type of handle?

[06:00] <K0brik> diotalevi: are you a boy or a girl?

[06:00] <diotalevi> Does it matter?

[06:00] <K0brik> alot

[06:00] <diotalevi> Why?

[06:00] <fax> K0brik: a lot :)

[06:00] <dduncan> this isn't a dating service

[06:00] *** drrho left
[06:01] <dduncan> just call us all by either our handle or 'you', keeps it simple

[06:01] <K0brik> because a language should be made by fellow brothers and sisters of course

[06:02] <dduncan> whatever, we are people, and it doesn't matter what our genders are

[06:02] <dduncan> its all platonic here

[06:02] <K0brik> I'm not a sexist but I thought diotalevi was referencing his penis

[06:03] <dduncan> you really need to read up on how word meaning is influenced by context

[06:03] <diotalevi> No.

[06:03] <K0brik> j/k brothers

[06:04] <dduncan> a 'handle' is the name that people in an online discussion identify themselves as, mine is 'dduncan'

[06:04] <dduncan> also known as a 'nick'

[06:04] <K0brik> yeah. I know

[06:04] *** rfordinal_ left
[06:04] <K0brik> and I respect that

[06:04] <dduncan> then how could you be confused by diotalevi?

[06:05] <K0brik> random idiocy I guess

[06:05] <dduncan> anyway, I've got stuff to do, bye for now

[06:05] <K0brik> never mind

[06:05] <K0brik> me too. I just had to say hey

[06:07] <diotalevi> Ok. Next time, be normal to us.

[06:07] <K0brik> yeah. I'm just a fellow who likes the simplicity of perl

[06:08] <K0brik> no shame to have a bit of influence, right?

[06:13] *** drupek12 joined
[06:13] *** devogon joined
[06:13] *** K0brik is now known as irobot

[06:13] *** Chris left
[06:19] *** devogon left
[06:20] *** israr joined
[06:22] *** rfordinal_ joined
[06:23] <diotalevi> oh, what a difference having the right tool for the job makes...

[06:23] *** cognominal_ left
[06:23] <irobot> sounds like a fortune

[06:26] *** weinig left
[06:26] *** weinig joined
[06:29] <irobot> I have found that perl works for most things

[06:29] *** rfordinal_ is now known as rfordinal

[06:40] *** israr left
[06:40] *** rford left
[07:12] *** iblechbot joined
[07:27] *** elmex joined
[07:41] *** ahmadz left
[07:44] *** jisom joined
[07:59] *** BinGOs joined
[08:12] *** franck___ joined
[08:13] *** israr joined
[08:30] *** dduncan left
[08:37] *** israr left
[08:43] *** penk joined
[08:54] *** israr joined
[08:55] *** lichtkind joined
[08:57] *** IllvilJa left
[09:09] *** ZakMcK joined
[09:15] *** masak joined
[09:15] *** israr left
[09:26] *** iblechbot left
[09:27] *** jisom left
[09:33] *** Southen_ joined
[09:36] *** hkb_lab is now known as hkb_aw

[09:40] *** Southen left
[09:42] *** chris2 joined
[09:43] *** chris2 left
[09:43] *** chris2 joined
[10:10] *** cls_bsd joined
[10:23] *** thoughtpolice left
[10:23] *** iblechbot joined
[10:25] *** lyokato left
[10:30] *** fglock joined
[11:13] *** Ast left
[11:25] *** ZakMcK left
[11:39] *** rindolf joined
[11:47] *** nipotan is now known as nipotaway

[12:03] *** chris2_ joined
[12:05] *** mncharity joined
[12:08] *** chris2 left
[12:12] *** chris2_ is now known as chris2

[12:24] *** cognominal_ joined
[12:35] *** pmurias joined
[12:36] <pmurias> hi

[12:40] <pugs_svnbot> r18225 | pmurias++ | [kp6] the C rules are correctly processed by Inline::C

[12:40] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18225

[12:40] <lambdabot> Title: Changeset 18225 - Pugs - Trac

[12:41] *** lichtkind_ joined
[12:53] *** cmarcelo joined
[12:58] *** lichtkind left
[13:01] <pugs_svnbot> r18226 | pmurias++ | [kp6] TokenC rules are now visible as perl6 methods

[13:01] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18226

[13:01] <lambdabot> Title: Changeset 18226 - Pugs - Trac

[13:01] *** jhorwitz joined
[13:01] <pmurias> it would be interesting to check how fast the c rules are in comparision to mp6 ones ;)

[13:05] <fglock> pmurias: they may be faster than p5 ones in some cases, because they are inlined and have no unicode

[13:10] *** chris2 left
[13:10] <pugs_svnbot> r18227 | fglock++ | [kp6] updated 'ident' syntax

[13:10] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18227

[13:10] <lambdabot> Title: Changeset 18227 - Pugs - Trac

[13:13] *** rindolf left
[13:13] <pmurias> fglock: utf8 shouldn't be a big slowdown if added correctly

[13:16] <pmurias> fglock: late binding is propably more problematic

[13:16] *** Jamtech left
[13:27] *** vbattsAtWork joined
[13:28] <masak> the pugs test suite is the hippest test suite I know :)

[13:28] <masak> someone should write an article about the cultural references hidden in it

[13:29] <pmurias> fglock: is rules taking using $_ as the default string to match against specced?

[13:31] <fglock> pmurias: they should be, but there are still some mp6isms in kp6

[13:34] <pmurias> fglock: i don't understand

[13:35] <pmurias> they should be speced?

[13:37] <fglock> this wasn't specced when the first implementation was done, so the implementation in kp6 may need fixing

[13:40] <pmurias> is it specced now?

[13:41] <fglock> looking

[13:46] *** ferreira joined
[13:48] <ferreira> New article on operators: http://feather.perl6.nl/~ferreira/perl6-operators/compare1.html Please have look if you feel like it.

[13:48] <lambdabot> Title: compare1.pod6

[13:56] <fglock> pmurias: not sure

[13:58] *** pnu joined
[13:58] <pugs_svnbot> r18228 | Aankhen++ | * [kp6-lisp] really implemented lexical variables.  hopefully.

[13:58] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18228

[13:58] <lambdabot> Title: Changeset 18228 - Pugs - Trac

[14:00] <masak> ferreira: cool article. I did not know about `before` and `after` before. :)

[14:00] <pugs_svnbot> r18229 | Aankhen++ | [kp6-lisp]

[14:00] <pugs_svnbot> r18229 | Aankhen++ | * define stub functions in packages.lisp

[14:00] <pugs_svnbot> r18229 | Aankhen++ | * tweaked stub error message in Pad.lisp

[14:00] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18229

[14:00] <lambdabot> Title: Changeset 18229 - Pugs - Trac

[14:01] *** [particle1 is now known as [particle]

[14:02] <masak> what is the exact reach of chained comparison ops? will 1 < $val1 != $val2 < 6 check whether $val1 is less than 6?

[14:03] <pugs_svnbot> r18230 | Aankhen++ | * [kp6-lisp] moved code from packages.lisp into Package.lisp, to match Pad.lisp

[14:03] <pugs_svnbot> r18231 | Aankhen++ | * [kp6-lisp] removed packages.lisp

[14:03] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18231

[14:03] <lambdabot> Title: Changeset 18231 - Pugs - Trac

[14:03] <masak> hm, probably not

[14:04] <Aankhen``> avar: my $x = 5; if (1) { my $x = 6; say $x; }; say $x; # => 6\n5

[14:04] <Aankhen``> (You need the `if` there since bare blocks seem to fail to parse.)

[14:06] <fglock> Aankhen``: do { } should work

[14:06] <Aankhen``> pmurias: You said yesterday that KP6 already does the separation of cells and variables thing. Could you elaborate?

[14:06] <Aankhen``> fglock: Ah, cool. It's not a big deal, though, I just wanted to test the lexicals.

[14:07] <pmurias> Aankhen``: kp6 does separation of containers and contents

[14:07] <pmurias> my $a = 1;

[14:08] <pmurias> binds a Scalar to $a

[14:08] <pmurias> and calls $a.ASSIGN(1);

[14:08] <Aankhen``> I see.

[14:08] <pmurias> $a.STORE(1) actually

[14:08] <Aankhen``> What does `my $b := $a` subsequently do?

[14:10] <pmurias> binds $b to the Scalar stored in $a

[14:10] <Aankhen``> Hmm, okay.

[14:10] <pmurias> the binds are = in perl5 land

[14:21] <platypus> pmurias: I thought that binding was *$b = *$a; in perl5 land.

[14:24] *** chris2 joined
[14:24] <fglock> platypus: in perl5, $a = Scalar.new; $b = $a  # $a and $b point to the same object

[14:24] <fglock> because in perl5 objects are pointers

[14:25] * platypus nods.

[14:25] <platypus> You didn't mention that you where dealing with objects.

[14:25] <Juerd> references!

[14:26] <platypus> (pedent in me wishes to point out that they are refrences rather then objects) But Juerd has done that for me.

[14:26] <[particle]> ...they were talking about how kp6 is implemented.

[14:26] <[particle]> juerd: is feather smp?

[14:28] *** turrepurre joined
[14:28] <fglock> ok, references

[14:32] <Juerd> [particle]: Yes.

[14:33] <[particle]> juerd: thanks. we just got make -j working for parrot, and are working on parallelization of make test

[14:34] <Juerd> Neat

[14:35] <Juerd> Note that that usually speeds things up even on single CPU systems

[14:36] <[particle]> yes, but testing on native smp can also be enlightening. i can do that on my box, but was hoping the new and improved feather could be used by others :)

[14:37] <Juerd> It can!

[14:38] *** bjoern_ left
[14:41] <fglock> i wonder if i used cheat/metholate on kp6, would it run in pugs

[14:45] <Aankhen``> KP6 doesn't support infix:<x>, does it?

[14:50] <bloonix>  

[14:53] <fglock> Aankhen``: no - do you need it?

[14:53] <Aankhen``> fglock: Only for prettifying the generated code; it's not urgent.

[15:00] <pugs_svnbot> r18232 | Aankhen++ | * [kp6-lisp] more Lispy handling of newlines in generated code.

[15:00] <pugs_svnbot> r18233 | Aankhen++ | [kp6-lisp]

[15:00] <pugs_svnbot> r18233 | Aankhen++ | * added PAD slot to KP6-CODE class.

[15:00] <pugs_svnbot> r18233 | Aankhen++ | * moved code from functions.lisp into Code.lisp

[15:00] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18233

[15:00] <lambdabot> Title: Changeset 18233 - Pugs - Trac

[15:03] <ferreira> masak: Perl 6 would teach us many things. Using 'before' and 'after' is one of them.

[15:03] <pugs_svnbot> r18234 | Aankhen++ | * [kp6-lisp] removed functions.lisp

[15:03] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18234

[15:03] <lambdabot> Title: Changeset 18234 - Pugs - Trac

[15:04] <ferreira> masak: I also think that 1 < $val1 != $val2 < 6 will only check the adjacent pairs: 1 < $val1, $val1 != $val2, $val2 < 6

[15:05] <masak> ferreira: yes, me too, upon further reflection

[15:08] <ferreira> masak: 1 < 6 > 1 is kind of weird and so are other expressions, but I think the point is that some nice (readable) expressions like $a < $b < $c become possible.

[15:08] <pugs_svnbot> r18235 | Aankhen++ | * [kp6-lisp] pruned a bit of unused code.

[15:08] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18235

[15:09] <lambdabot> Title: Changeset 18235 - Pugs - Trac

[15:10] <masak> ferreira: how does 1 < 6 > 1 compete against "everything only evaluated once"? does that only go for variable evaluations, not literals?

[15:11] <masak> also, is there any danger of 1 < 6 > 1 being parsed as 1 qw<6> 1? or is there a term/op rule or something that decides that?

[15:11] <ferreira> masak: I don't think there is a term/op rule to decide for the right thing in this case

[15:12] *** zomgb00bie joined
[15:13] <TimToady> there is no problem with term/op confusion here

[15:14] <avar> Aankhen``: What could I use for while () {} in lisp?

[15:14] <ferreira> The "everything only evaluated once" has to do with evaluating "exp1 < exp2 < exp3" as "($tmp1, $tmp2) = (exp1, exp2); $tmp1 < $tmp2 and ($tmp3) = (exp3), $tmp2 < $tmp3". If exp2 is identical to exp3, it could be evaluated twice.

[15:14] <avar> the goto construct I guess

[15:14] <TimToady> it doesn't matter if an immutable value is evaluated multiple times

[15:14] <Aankhen``> avar: Eh?

[15:14] <Aankhen``> avar: Heard of DO? :-)

[15:14] <TimToady> it's only the side effects that matter

[15:15] <Aankhen``> (do () ((not (...cond...))) exp1 exp2 exp3 ... expn)

[15:15] *** franck____ joined
[15:15] <fax> (loop (stuff)) also

[15:15] <Aankhen``> Oh yeah, LOOP would be easier.

[15:16] <fax> but it must be a () thingy, so probably you want (loop (progn ...))

[15:16] *** irobot left
[15:16] <TimToady> ferreira: "people would easily point" is not quite understandable.  Perhaps just "one is forced to choose"

[15:16] <fax> or even (loop while (condition) do ...) :S

[15:16] <Aankhen``> fax: Why not (loop :while (cond) :do (...))?

[15:16] <Aankhen``> Heh.

[15:17] <avar> while ($cond) { $body } could be (loop (unless cond (return)) $body)

[15:17] <fax> I wonder why I didn't say that first :p

[15:17] <ferreira> TimToady: I see. I have the habit of writing too much at first. 

[15:17] <Aankhen``> avar: Or it could be the more natural form. :-P

[15:17] <Aankhen``> And for until, just change :while to :until.

[15:18] <avar> oh there's :while, neat

[15:18] <TimToady> ferreira: well, I think you were trying for something more like "people would naturally assume you have to choose"

[15:18] <Aankhen``> avar: Hidden depths of LOOP. <G>

[15:18] <fax> yeah, loop is a whole'nother programming language :)

[15:19] <avar> oh crap, you're adding an indenter to the emitter?:)

[15:20] <Aankhen``> avar: I already added the framework for it, but I can't actually indent until infix:<x> works.

[15:20] <Aankhen``> At least it's breaking lines more logically, for now. :-)

[15:20] <TimToady> does lisp have an sprintf equivalent?

[15:20] <fax> (format nil ...)

[15:20] <TimToady> or substr('               ', 0, $len)

[15:20] <avar> TimToady: Something much, much better

[15:20] <ferreira> TimToady: I thought of emphasizing how Perl 6 would not have this issue to be criticized ;-)

[15:21] <TimToady> and it's so much better that you can't make a string of spaces?  :)

[15:21] <Aankhen``> Er.

[15:21] <avar> CL-USER> (format t "It's like a ~r times better" 1000)

[15:21] <avar> It's like a one thousand times better

[15:21] <Aankhen``> Yes, it does, but this is in Perl 6 land.

[15:21] <avar> :)

[15:21] <fax> TimToady: (make-string 5 :initial-element #\space)

[15:21] <fax> gives "     "

[15:21] <Aankhen``> We're talking about indenting the generated code.

[15:21] <avar> Aankhen``: You can just use a loop instead of x

[15:22] <TimToady> ferreira: well, and in fact many pointless discussions about which operators to overload do in fact happen in the P5 camp

[15:22] <avar> sub x { my ($str, $times) = @_; my $ret; ...

[15:22] <Aankhen``> avar: Too much effort for too little gain.

[15:22] <Aankhen``> I'll just wait till KP6-CL can compile it. :-P

[15:23] <avar> But the best way to do this imo would be to write a lispindent program that just calls (read) on the string on stdin and (prints) it

[15:23] <TimToady> well, at least lisp is easy to indent, just put a newline and a random number of spaces before each (, then delete any whitespace before each )

[15:23] <TimToady> :)

[15:24] <ferreira> TimToady: changing the subject, I was thinking of that specification that a declared Str() method would be used for string coercion (implicit or with ~). But if we declare Num() and Int(), which one would be used by numeric coercion (implicit or with +)?

[15:24] <TimToady> + implies Num

[15:25] *** franck___ left
[15:25] <TimToady> unless you happen to know the context requires Int anyway

[15:25] <ferreira> like in $a div $b?

[15:25] <TimToady> what appears to be coercion is mostly just multiple dispatch

[15:26] <TimToady> P5 always coerces, but in P6 we just set up the multis so that the defaults work that way

[15:27] <TimToady> so in P5, $a == $b strongly implies Num($a) === Num($b), it's not as strong in P6

[15:29] <TimToady> we just try to supply enough operators that people aren't tempted to overload them for uses other than the obvious

[15:30] <TimToady> which is one of the strongest arguments for allowing Unicode operators, I think

[15:30] <TimToady> otherwise you get travesties like C++'s use of <<

[15:32] <ferreira> right. but will there be a way in pure Perl 6 to add a new operator by specifying its precedence and associativity like Prolog could do? In Prolog, it was much easier because of the light syntax.

[15:32] <Aankhen``> fglock: How does one use the HTML emitter? I want to examine the generated AST…

[15:33] <avar> Aankhen``: --ast

[15:33] <avar> --ast | perltidy

[15:33] <TimToady> ferreira: certainly, see S06:1538

[15:33] <Aankhen``> Oh, --ast works.

[15:33] <Aankhen``> avar: Heh, thanks.

[15:36] <pugs_svnbot> r18236 | avar++ | Implemented while

[15:36] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18236

[15:36] <lambdabot> Title: Changeset 18236 - Pugs - Trac

[15:36] <TimToady> ferreira: however, you never actually have to specify an arbitrary precedence *value* in Perl 6; all precedence is relative to an existing operator

[15:36] *** vel joined
[15:36] *** justatheory joined
[15:37] <TimToady> so you could easily install 100,000 precedence levels between * and +, for instance, without worrying about running out of levels

[15:37] <avar> ferreira: b.t.w. I liked your emacs+slime+opengl demo

[15:38] <avar> too bad I can't see the source..

[15:38] <ferreira> TimToady: that's beautiful

[15:38] <TimToady> thank you.  one of my few original inventions.  :)

[15:39] <TimToady> most everything else is stolen, er, borrowed

[15:39] <ferreira> avar: what? I think you are confusing me with someone else.

[15:39] <[particle]> everything is relative, and nothing is real

[15:39] * masak likes the value-less precedence thing too

[15:39] <ferreira> TimToady: it is the integration magic that counts ;-)

[15:39] <TimToady> well, nothing is at least interesting, if not real

[15:40] <TimToady> you're gonna give me a swelled head.  oh wait, too late...  :)

[15:42] *** masak left
[15:47] *** blindfish joined
[15:48] <szbalint> wohoo my amazon books arrived

[15:48] * szbalint now has most of the books mentioned in READTHEM

[15:50] <fglock> http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf

[15:52] <avar> cat t/kp6/54-while.t | perl kp6-mp6-perl5.pl --lisp | sbcl

[15:52] <avar>   There is no applicable method for the generic function

[15:52] <avar>     #<STANDARD-GENERIC-FUNCTION CL->PERL (10)>

[15:52] <avar>   when called with arguments

[15:52] <avar>     (T).

[15:52] <avar> mm

[15:55] <Aankhen``> You want 'true.

[15:55] <pmurias> fglock: do you plan to emit native code? ;)

[15:56] <avar> pmurias: we're doing that already:)

[15:56] <pmurias> well directly

[15:56] <avar> why reinvent the wheel?

[15:57] <fglock> pmurias: re article? i thought it could give some hints on implementing variables, etc

[15:58] <pmurias> k

[16:00] <avar> Aankhen``: I lack debug-foo

[16:10] *** justatheory left
[16:10] <Aankhen``> avar: Clearly. ^_^

[16:10] <avar> how do I see /where from/ that was called?

[16:14] <Tene> pugs: my $a = 'foo'; $a ~~ s:g{o}='a'; $a

[16:15] <exp_evalbot> OUTPUT[*** Cannot parse regex: o␤*** Error: ␤]

[16:15] <Aankhen``> avar: Pastebin the generated code.

[16:15] <Tene> unknown parameter 'g'

[16:15] <Tene> Is this NYI, or am I misremembering?

[16:16] <avar> Aankhen``: cat t/kp6/54-while.t | perl kp6-mp6-perl5.pl --lisp

[16:17] <Aankhen``> Hmm, what do I do to get the length of a list in KP6?

[16:18] <fglock> Aankhen``: .elems

[16:19] <Aankhen``> Weird, I tried that.

[16:19] <Aankhen``> Oh, hold on, I might have forgotten to use parentheses on the previous method call.

[16:20] *** arrowax joined
[16:21] <fglock> Aankhen``: i think mp6 doesn't support .elems (kp6 is compiled with mp6)

[16:22] <Aankhen``> fglock: Ahh.

[16:22] <Aankhen``> Any other way to check that an arrayref is defined?

[16:22] <Aankhen``> Er, has more than one element?

[16:22] <Aankhen``> Bleh, I fail.

[16:22] <Aankhen``> "has at least one element".

[16:24] <fglock> maybe: if @x {...}

[16:25] *** barney joined
[16:26] <Tene> pugs: my $a = 'foo'; $a ~~ s:global{o}='a'; $a

[16:26] <exp_evalbot> OUTPUT[*** Cannot parse regex: o␤*** Error: ␤]

[16:26] *** macli joined
[16:27] *** macli left
[16:33] *** diakopter left
[16:33] *** TimToady left
[16:34] *** kanru joined
[16:34] <pugs_svnbot> r18237 | Aankhen++ | * [kp6-lisp] fixed a few bugs in error handling in Code.lisp

[16:34] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18237

[16:34] <lambdabot> Title: Changeset 18237 - Pugs - Trac

[16:35] *** diakopter joined
[16:38] <Aankhen``> avar: It's the functions in GLOBAL.lisp.  All the comparison functions are returning NIL/T instead 'FALSE/'TRUE.

[16:39] <avar> crap

[16:39] <Aankhen``> I'll fix.

[16:39] <avar> great

[16:40] *** IllvilJa joined
[16:42] *** franck____ left
[16:43] <Aankhen``> avar: What's with the definition for <=?

[16:44] <avar> what about it?

[16:46] <Aankhen``> Why not just (<= foo bar)?

[16:47] <avar> (cl->perl (<= (num* first) (num* second))))

[16:47] <avar> numeric context?

[16:48] <Aankhen``> Yes, but you've got: (signum (- foo bar))

[16:48] <avar> that's the definition for <=> 

[16:51] *** weinig left
[16:52] <Aankhen``> Ah, right.

[16:52] <Aankhen``> All the angle brackets confused me. :-P

[16:54] *** TimToady joined
[16:56] *** vel left
[16:56] *** vel joined
[16:59] <Aankhen``> avar: Your problem ees fixed.

[16:59] <pugs_svnbot> r18238 | Aankhen++ | [kp6-lisp]

[16:59] <pugs_svnbot> r18238 | Aankhen++ | * removed redundant CL->PERL on arguments to function calls.

[16:59] <pugs_svnbot> r18238 | Aankhen++ | * added KP6-COERCE methods for T and NIL to KP6-BIT.

[16:59] <pugs_svnbot> r18238 | Aankhen++ | * added coercion to GLOBAL.lisp to ensure that KP6 objects are returned from every function.

[16:59] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18238

[16:59] <lambdabot> Title: Changeset 18238 - Pugs - Trac

[17:02] *** rhizo_ joined
[17:13] *** chris2 left
[17:14] *** rhizo left
[17:16] *** weinig joined
[17:16] <pugs_svnbot> r18239 | avar++ | Fixed ne and !=, tests were inverted

[17:16] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18239

[17:16] <lambdabot> Title: Changeset 18239 - Pugs - Trac

[17:17] *** justatheory joined
[17:18] *** snearch joined
[17:19] <avar> Aankhen``: plz run tests kthx

[17:19] <TimToady> avar

[17:19] <TimToady> re: (cl->perl (<= (num* first) (num* second))))

[17:20] <TimToady> that's a decent p5 definition

[17:20] <TimToady> and maybe a decent kp6 definition

[17:20] <TimToady> but isn't how it works in p6

[17:20] *** ChanServ sets mode: +o diakopter

[17:20] *** diakopter sets mode: +o TimToady

[17:20] * Aankhen`` waves at diakopter.

[17:20] *** diakopter sets mode: -o diakopter

[17:20] <Aankhen``> TimToady: We don't have multis yet, so we're just faking it.

[17:20] * TimToady operates at diakopter :)

[17:21] <TimToady> is fine for kp6, just a fwiw

[17:21] * Aankhen`` nods.

[17:21] <Aankhen``> More accurately, we don't have subs at all yet.

[17:21] <[particle]> if you implement multis, you'll get subs for free ;)

[17:22] <Aankhen``> :-P

[17:22] *** riffraff joined
[17:22] <riffraff> hi

[17:23] <Aankhen``> avar: Tests are for wusses!

[17:23] <avar> Aankhen``: Implement bindings!

[17:24] <Aankhen``> I keep trying and failing. :-(

[17:24] <avar> ;/

[17:24] * diakopter discovered this week his employer has a site license for nearly every single msft product (for the past three months).  And here we were considering implementing an internal EAI/BAM solution (*not* based on BizTalk) with license fees of $400-1500k/year

[17:24] <Aankhen``> diakopter: :-o

[17:25] * [particle] wonders if diakopter's company would sponsor a terminal server for remote development of perl6 & parrot :D

[17:25] <diakopter> and so now our division's budget folks are surprised to see an extra mil or two in the budget for this fiscal year.  talk about incentive to virtualize as many servers as possible.....!

[17:25] <diakopter> doubt it...

[17:25] <Aankhen``> LOL.

[17:26] <[particle]> it'd cost less than $1M, i promise.

[17:27] <diakopter> I mean, now that virtual server is freely licensable.

[17:31] <avar> [particle]: feather?

[17:31] <[particle]> avar: need a license for the os

[17:32] <avar> huh?

[17:32] *** justatheory left
[17:32] <[particle]> perhaps i misunderstood your question

[17:32] *** polettix joined
[17:34] <[particle]> avar: a Windows Terminal Server.

[17:38] *** ruoso left
[17:55] *** Psyche^ joined
[17:55] *** justatheory joined
[17:58] <diakopter> [particle]: they've got both infinite (non-)virtual OS licenses and CALs, but for internal use.  I doubt donating to a non-profit project/entity would be permitted.  However, when I was at oscon I asked the MSFT/Port25 guys if they would consider hosting remote access build/test farms on win32/64 for AL2 projects, and they said, hold that thought for a coupla months, msft will be making a giant announcement along those lines.  I ...

[17:59] <diakopter> ... held the thought, but not my breath.

[17:59] <[particle]> i'll check the sky over redmond for smoke signals

[18:00] *** Helios- left
[18:00] *** _Helios joined
[18:09] *** justatheory left
[18:11] *** Patterner left
[18:11] *** snearch left
[18:11] *** Psyche^ is now known as Patterner

[18:12] *** fglock left
[18:19] *** justatheory joined
[18:19] *** simias joined
[18:20] *** snearch joined
[18:24] *** jisom joined
[18:29] *** snearch left
[18:31] *** kanru left
[18:32] *** kanru joined
[18:47] *** rindolf joined
[18:50] *** ferreira left
[18:51] *** fax left
[19:01] *** vel left
[19:02] *** jtt joined
[19:05] *** mj41 joined
[19:12] *** arrowax left
[19:19] *** dduncan joined
[19:23] *** arrowax joined
[19:33] *** jisom left
[19:38] *** vel joined
[19:41] *** lichtkind_ left
[19:43] *** rindolf left
[19:45] *** vbattsAtWork left
[20:11] <pugs_svnbot> r18240 | kjwcode++ | Probably about time I did this.  I may not code much right now,

[20:11] <pugs_svnbot> r18240 | kjwcode++ | but I do a lot of smokes.

[20:11] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18240

[20:11] <lambdabot> Title: Changeset 18240 - Pugs - Trac

[20:14] *** barney left
[20:22] *** arrowax left
[20:28] *** dduncan left
[20:42] *** Aankhen`` left
[20:54] *** riffraff left
[20:57] *** Aankhen`` joined
[21:01] *** weinig_ joined
[21:06] *** weinig_ left
[21:07] *** weinig_ joined
[21:07] *** weinig_ left
[21:08] *** weinig_ joined
[21:11] *** vel left
[21:14] *** weinig left
[21:23] *** blindfish left
[21:23] <pugs_svnbot> r18241 | pmurias++ | [kp6] TokenC: rule names are magled, some stubs

[21:23] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/18241

[21:23] <lambdabot> Title: Changeset 18241 - Pugs - Trac

[21:35] *** dduncan joined
[21:41] *** pmurias left
[21:47] *** larsen_ joined
[21:48] *** tewk left
[21:50] *** jhorwitz left
[21:50] *** _Helios is now known as Helios-

[21:55] *** jtt left
[21:58] *** Aankhen`` left
[21:59] *** thepler left
[22:00] *** thepler joined
[22:07] *** weinig_ left
[22:09] *** weinig joined
[22:15] *** cognominal_ left
[22:29] *** larsen_ left
[22:51] *** cmarcelo left
[22:51] *** tewk joined
[22:56] *** iblechbot left
[22:57] *** BinGOs left
[22:57] *** BinGOs joined
[23:00] *** cognominal_ joined
[23:03] *** tewk left
[23:03] *** tewk joined
[23:15] *** zomgb00bie left
[23:17] *** thoughtpolice joined
[23:21] *** BinGOs left
[23:25] *** REPLeffect_ joined
[23:52] *** weinig left
[23:57] *** thoughtpolice left
