[00:06] *** weinig left
[00:14] *** lichtkind joined
[00:16] <lichtkind> ?eval my int $a = 3; my string $b = 3; say 'yes' if $a === $b;

[00:16] <pugsbot_r17185> OUTPUT[yes␤] Bool::True

[00:16] *** weinig joined
[00:20] <lichtkind> ?eval my int $a = 3; my string $b = '3a'; say 'yes' if $a === $b;

[00:20] <pugsbot_r17185> undef

[00:20] <lichtkind> ?eval my int $a = 3; my string $b = '3'; say 'yes' if $a eqv $b;

[00:20] <pugsbot_r17185> undef

[00:20] *** theorbtwo left
[00:20] *** theorbtwo joined
[00:20] <lichtkind> ?eval my int $a = 3; my string $b = '3'; say 'yes' if $a === $b;

[00:21] <pugsbot_r17185> undef

[00:21] <lichtkind> ?eval my Int $a = '3'; my string $b = '3'; say 'yes' if $a === $b;

[00:21] <pugsbot_r17185> OUTPUT[yes␤] Bool::True

[00:21] <lichtkind> ?eval my int $a = '3'; my string $b = '3'; say 'yes' if $a === $b;

[00:22] <pugsbot_r17185> OUTPUT[yes␤] Bool::True

[00:25] <lichtkind> is there any rational against a neqv operator?

[00:32] *** justatheory left
[00:33] <diakopter>  =!= 

[00:35] <lichtkind> yes but === and eqv its not the same

[00:35] <lichtkind> there is !eqv

[00:35] <lichtkind> diakopter: but thanks that one i missed in my chapter

[00:36] <diakopter> lichtkind: I didn't think that one was defined...

[00:39] <lichtkind> diakopter: !eqv is mentioned in s03 but i thing neqv is not defined

[00:41] <DarkWolf84> I think that ther is no neqv in perl6

[00:42] <DarkWolf84> ?eval 1 eqv 1

[00:42] <pugsbot_r17185> Bool::True

[00:42] <DarkWolf84> ?eval 1 neqv 1

[00:42] <pugsbot_r17185> Error: ␤Unexpected "neqv"␤expecting operator

[00:44] <lichtkind> DarkWolf84: yes my initial question therefore was_ why isnt there such op

[00:44] <TimToady> it would be redundant

[00:44] *** devogon left
[00:45] <TimToady> with the ! metaoperator, != is redundant with !== and ne is redundant with !eq, but those are used often enough to be worth it

[00:45] <TimToady> neqv isn't

[00:45] <lichtkind> TimToady: logically your right but given the eclectic perl aproach i wasnt that shure

[00:45] <TimToady> we don't even have !~ anymore, just !~~

[00:45] <diakopter> !ne

[00:45] <lichtkind> TimToady: thanks that detail i missed

[00:46] <diakopter> !!eq

[00:46] <lichtkind> !ne?

[00:46] <lichtkind> !ne ~~ == ?

[00:46] <TimToady> !! is disallowed

[00:47] <[particle]> what op is $x ~~ $x... eqv?

[00:47] <TimToady> !ne would probably work

[00:47] <diakopter> pugs doesn't like >1 negatives

[00:47] <lichtkind> but it equals ==

[00:47] <diakopter> >1 !s I mean

[00:47] <TimToady> well, !! is potentially a token in its own right

[00:47] <[particle]> !! is disallowed? how do you boolify

[00:47] <DarkWolf84> its for ??

[00:48] <diakopter> er, here:

[00:48] <diakopter> ?eval 1 !!eq 1

[00:48] * diakopter shuts up

[00:48] <DarkWolf84> i think something is missing

[00:48] <pugsbot_r17185> Error: ␤Unexpected "!!"␤expecting operator

[00:49] <DarkWolf84> ?eval ??1 'true'!!'false'

[00:50] <pugsbot_r17185> Error: ␤Unexpected "??"␤expecting program

[00:50] <TimToady> [particle]: you boolify with prefix:<?>, but we're currently discussing the infix:<!!> slot

[00:50] <Blwood> ?eval 1 ?? 'true' !! 'false'

[00:51] <pugsbot_r17185> "true"

[00:51] <DarkWolf84> i got my mistake

[00:51] <DarkWolf84> fine

[00:51] <DarkWolf84> :)

[00:59] *** torz joined
[01:00] *** pro21ms4 joined
[01:00] *** pro21ms4_ joined
[01:00] *** pro21ms4_ left
[01:00] *** yahooooo left
[01:01] *** yahooooo joined
[01:03] *** jhorwitz left
[01:04] <diakopter> would the <??><!!> operator be called a double-infix operator [set] (imagining other "ternary" operators here)?  or can they be used independently, and does infix:<!!> have precedence over infix:<??> (and thus (1??'true'!!'false') means (1??('true','false')) means (ternary(1,('true','false'))) )?

[01:05] *** nipotaway is now known as nipotan

[01:08] * diakopter belatedly remembers I'm supposed to be shutting up

[01:10] <TimToady> the way STD handles it is to make ?? <EXPR> !! an infix operator

[01:10] <TimToady> (where EXPR is limited in precedence actually)

[01:11] <lichtkind> thanks to all and good night

[01:12] <TimToady> hmm, needs a better error message for tha though...

[01:12] <TimToady> n8

[01:12] <lichtkind> :)

[01:12] *** lichtkind left
[01:12] *** dolmans joined
[01:17] <diakopter> TimToady: I was (too fancifully, I'm sure) imagining an expanded way of declaring chained operators at runtime. infix:<gg><hh> (_,_,_) { ternarygghh(_,_,_) }

[01:18] *** weinig left
[01:24] <TimToady> it would be possible to define such a category, but it didn't seem worth it for one operator.  people get into bad enough trouble with that one already

[01:34] <diakopter> hum, I guess there's not a way of declaring a runtime-declared operator's precedence.  It always binds tightest than anything else, though, right?  Argh; I don't remember whether the spec, well, specifies.

[01:35] <TimToady> see S06:1538

[01:38] <diakopter> oh, looky there.

[01:40] <pugs_svnbot> r17233 | lwall++ | Improved error messages from ??!!

[01:40] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17233

[01:42] *** Blwood left
[01:42] *** Limbic_Region left
[01:56] *** weinig joined
[02:06] *** torz left
[02:25] *** drupek12 left
[02:28] *** drupek12 joined
[02:34] *** poky left
[02:50] *** weinig left
[02:50] *** weinig joined
[03:18] *** REPLeffect joined
[03:27] *** pro21ms4 left
[03:34] *** kanru left
[03:38] *** kanru joined
[04:05] *** sunnavy joined
[04:18] <dduncan> opinion question: what is a better name for a data type that is an integer which is >= 0 ... "unsigned integer" or "non-negative integer"

[04:19] <dduncan> eg, subset Foo of Int where { $_ >= 0 }

[04:25] *** thestarslookdown joined
[04:26] <avar> unsiggned, do you need to cover -0 ?

[04:26] <avar> evidently not

[04:26] *** REPLeffect left
[04:31] *** nekokak joined
[04:33] <dduncan> not in this case

[04:34] <dduncan> afaik, +/- zero only makes sense with non-integer numbers, where you could have something really small

[04:39] *** BinGOs_ joined
[04:43] *** nekokak_ left
[04:45] <avar> actually it's a peculiarity of most signed number representations, the first bit being set to 1 on 0x0

[04:45] <avar> but yeah, doesn't matter

[04:55] *** kanru left
[05:03] *** BinGOs left
[05:04] <dduncan> I thought most integer implementations were 2's complement, in which case a first bit being set means a -1 value

[05:04] <dduncan> or other negative

[05:05] <dduncan> for signed integers

[05:05] <dduncan> avar, you probably mean non-integer numbers?

[05:05] <dduncan> eg, floats

[05:09] <avar> no for instance a 31 bit signed integer has the first byte as a boolean indicating whether it's signed

[05:09] <avar> so -0 is 1 + [31 zeroes]

[05:09] <avar> but that doesn't matter for anything really. It's an implementation quirk

[05:17] *** devogon joined
[05:33] *** kanru joined
[05:34] <dduncan> avar, what you describe sounds like either 1's complement, or the way N-bit integers used to be done decades ago, before it was found that 2's complement was more efficient to implement; eg, for 8-bit integers, [+1,0,-1] were spelled [00000001,0000000,11111111], then 10000000 was -128, and 01111111 is +127

[05:35] <dduncan> math ops are much simpler because no special cases needed to check what sign the numbers were ... you do the same thing with the bits either way ...

[05:35] <dduncan> ... this also leads to peculiarities where incrementing a number past its max value leads to its min value

[05:37] <dduncan> for some reason, I thought this stuff (2's complement) was taught in programming 101

[05:37] <dduncan> it was for me, anyway

[05:39] <dduncan> avar, in case you wanted to know

[05:46] *** jisom joined
[05:53] *** SubStack joined
[05:54] *** agentz2 joined
[05:55] *** agentz2 left
[05:57] *** silug left
[05:57] <toly> dduncan: "natural number" perhaps?

[05:59] *** masak joined
[06:05] *** hcchien joined
[06:06] *** weinig left
[06:08] *** Aankhen`` joined
[06:18] *** DarkWolf84 left
[06:27] *** Schwern joined
[06:31] *** Linux\2 left
[06:44] *** weinig joined
[06:51] *** iblechbot joined
[06:52] *** weinig left
[06:54] *** flokuehn joined
[07:04] *** BinGOs_ is now known as BinGOs

[07:04] *** drrho joined
[07:05] <dduncan> toly, a "natural number" is a number >= 1

[07:06] <dduncan> in any event, several people have said "unsigned integer" is best for what I'm asking about

[07:06] <dduncan> or maybe I'm thinking "counting number"

[07:06] <dduncan> for >= 1

[07:06] <dduncan> no matter

[07:07] *** thestarslookdown left
[07:07] <masak> dduncan: I think there's a non-consensus in the mathematical world about whether 1 or 0 is the smallest natural number. it depends.

[07:09] <dduncan> no matter

[07:12] <zamolxes> 0 is a natural number.

[07:14] *** iblechbot left
[07:16] <lumi> Isn't a natural number a positive integer?

[07:16] <masak> see? :)

[07:16] <lumi> Or zero

[07:17] <masak> my opinion is that people don't agree

[07:17] <lumi> data Nat = Z | S Nat -- Like that!

[07:17] <masak> seems like 0 is a slightly newer opinion, probably due to 0 being slightly newer than 1

[07:18] <lumi> masak: Wikipedia agrees with you

[07:18] <masak> ok

[07:20] <masak> I suspect the divide stems from humans in general unconsciously preferring the 1 alternative, while mathematicians and C programmers in general tend towards 0

[07:20] <lumi> Heh

[07:20] <lumi> I like the humans/C programmers contrast

[07:20] <masak> :)

[07:21] <masak> no offense intended towards C programmers (neither human nor non-human)

[07:21] <masak> s/neither/neither towards/

[07:21] *** baest left
[07:22] *** baest joined
[07:24] <toly> dduncan: depends on who you ask

[07:24] <toly> natural number as >=0 was especially popularised by french mathematicians I think, especially Bourbaki

[07:25] <masak> toly: he was probably a C programmer :)

[07:25] <dduncan> certainly the number zero is extremely important for non-trivial math ... though on its introduction, a lot of people were afraid of or couldn't understand it

[07:25] <dduncan> O

[07:25] <masak> it is a non-trivial concept

[07:25] <dduncan> I'm thinking a few thousands of years ago

[07:25] <toly> the idea being that "natural number == size of a finite set", and the empty set is definitely a finite set

[07:26] <dduncan> empty set is finite

[07:26] <dduncan> I don't think of natural number set being finite

[07:26] <dduncan> anyway, back to work

[07:34] *** rfordinal left
[07:37] *** buetow joined
[07:39] *** silug joined
[07:44] *** jisom_ joined
[07:53] *** rfordinal joined
[08:02] *** jisom left
[08:12] *** Linux\2 joined
[08:36] *** thoughtpolice left
[08:37] *** nekokak_ joined
[08:37] *** thoughtpolice joined
[08:46] *** aindilis joined
[08:50] *** daxim_ left
[08:50] *** daxim_ joined
[08:54] *** nekokak left
[08:57] *** BinGOs left
[09:01] *** BinGOs joined
[09:30] *** Aankhen`` left
[09:31] *** hakobe is now known as hkb_aw

[09:36] *** elmex joined
[09:42] *** Aankhen`` joined
[09:45] *** kane_ joined
[09:45] *** kane__ left
[09:48] *** kane__ joined
[09:48] *** kane_ left
[09:50] *** kane_ joined
[09:50] *** kane__ left
[09:53] *** kane__ joined
[09:53] *** kane_ left
[09:54] *** kane_ joined
[09:54] *** kane__ left
[09:57] *** kane__ joined
[10:00] *** kane_ left
[10:04] *** buetow left
[10:05] *** Blwood joined
[10:11] *** dduncan left
[10:20] *** jisom_ left
[10:20] *** dolmans left
[11:00] *** hkb_aw is now known as hakobe

[11:08] *** lichtkind joined
[11:08] *** chris2_ joined
[11:08] <lichtkind> yesterday someone here metioned the =!= operator but i cant find it in S03

[11:09] <lichtkind> ?eval =!=

[11:09] <pugsbot_r17185> Error: ␤Unexpected "!="

[11:09] <lichtkind> ?eval ===

[11:09] <pugsbot_r17185> Error: ␤Unexpected end of input

[11:09] <lichtkind> ?eval ===!!

[11:09] <pugsbot_r17185> Error: ␤Unexpected end of input

[11:10] <lichtkind> ?eval 3 =!= 4

[11:10] <pugsbot_r17185> Error: ␤Unexpected "="

[11:18] *** BinGOs left
[11:31] *** nipotan is now known as nipotaway

[11:38] *** BinGOs joined
[11:39] *** chris2_ is now known as chris2

[11:48] *** mj41 left
[11:49] *** pro21ms4 joined
[12:00] *** pro21ms4 left
[12:15] *** kanru left
[12:21] *** cognominal_ left
[12:22] *** cognominal_ joined
[12:42] *** elmex left
[13:10] <diakopter> lichtkind: I was just joking around (=!=)

[13:12] *** masak left
[13:14] <lichtkind> diakopter: lichtkind is mostly too rerious to get jokes :)

[13:14] <Aankhen``> diakopter: I hereby sentence you to creating a meaningful semantics for the =!= operator.

[13:16] <lichtkind> hahah

[13:16] <lichtkind> i firstly thought it was an alias fpr !=:=

[13:16] <lichtkind> for

[13:16] *** DarkWolf84 joined
[13:17] *** felipe joined
[13:23] *** drrho left
[13:42] <diakopter> TimToady: how about allowing try as a statement prefix as well as a block prefix?

[13:43] *** Linux\2 left
[13:43] <diakopter> argh; it already is...

[14:05] *** Aankhen`` left
[14:09] *** jhorwitz joined
[14:13] *** poky joined
[14:16] *** rlb3_work_ left
[14:19] *** andyboy left
[14:30] *** TJCRI joined
[14:37] *** Azure-BOT left
[14:42] *** jiing joined
[14:44] *** Blwood left
[14:44] *** fglock joined
[14:45] *** Azure-BOT joined
[14:47] *** Blwood joined
[14:48] *** rlb3_work joined
[14:48] *** rlb3_work left
[15:02] *** ron_ joined
[15:04] *** buetow joined
[15:05] <pugs_svnbot> r17234 | fglock++ | [kp6] added stub for the type-matcher 

[15:05] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17234

[15:06] <lambdabot> Title: Changeset 17234 - Pugs - Trac

[15:10] *** ron_ left
[15:17] <fglock> i'm having trouble writing kp6 prelude things

[15:17] <lambdabot> fglock: You have 1 new message. '/msg lambdabot @messages' to read it.

[15:18] <TimToady> what kind of trouble?

[15:19] <fglock> each time I add a new statement, I need to fix the compiler :P

[15:21] <fglock> is there a proposed mechanism to quantify type-distance?

[15:22] <TimToady> we're not using type distance in any quantitative way, other than "worse" or "better"

[15:23] *** buetow left
[15:24] *** nowhere_man joined
[15:24] *** buetow joined
[15:25] <fglock> k

[15:26] <diakopter> Juerd: ping

[15:34] *** buetow left
[15:34] *** buetow joined
[15:37] *** kanru joined
[15:49] *** elmex joined
[15:49] *** Aankhen`` joined
[15:58] <moritz_> fglock: how hard would it be to add a safe mode to kp6? (in order to make it usable for an evalbot)

[16:00] *** REPLeffect joined
[16:12] *** yahooooo left
[16:14] *** SubStack left
[16:15] *** SubStack joined
[16:15] *** flokuehn left
[16:16] *** game joined
[16:16] <TimToady> looks like there are at least 3 spiders hammering on feather right now

[16:18] <kjwcode> I'm thinking about writing tests for pugs.  Who's the best person to hand them off to 'til I get a commit bit?

[16:18] <integral> Would you like a commit bit?  What's your email?

[16:19] <kjwcode> [email@hidden.address]
[16:19] <kjwcode> Thank you, integral.

[16:20] <TimToady> load avg on feather is currently 6, so might take a while to get commitbit up

[16:21] <integral> err, it is just a *tad* slow :-)

[16:21] * kjwcode grins.

[16:22] <kjwcode> No worries -- I need to get up to speed on the work that's been done recently, anyway.

[16:22] <TimToady> one of the big things we're looking at is how to refactor the tests for use by multiple platforms

[16:23] <kjwcode> Can you expand on that a little or point me to a mailing list thread?  That sounds right up my alley.

[16:23] <integral> okay, that should be an invitation in the mail

[16:24] <kjwcode> Thank you, integral.  Much appreciated!

[16:24] <TimToady> hmm, most of the discussion has been on #parrot, which isn't logged, but there are several things

[16:24] <TimToady> first, the todo markings need to be pulled out of the actual test calls

[16:24] <TimToady> probably to a preceding line

[16:25] <fglock> moritz_: re safe mode, it probably doesn't do anything unsafe

[16:25] <TimToady> it would be good if each platform had its own todo line so that svn can keep them independent easily

[16:25] <TimToady> another thing is that some code passes on some platforms but doesn't even compile on new platforms

[16:26] * kjwcode makes notes.

[16:26] <TimToady> so there's some discussion about how to format the tests so that either the tests are always compiled separately

[16:26] <TimToady> or that there's a preprocess step for tests that are known not to compile on certain platforms

[16:26] <TimToady> so a complete impl can just run the test straight up

[16:27] <TimToady> but a partial impl can preprocess into separate evals and still get some info out of it

[16:27] <TimToady> that's my take on the best approach

[16:28] <TimToady> I think that passing the tests to be Real Perl 6 shouldn't involve any preprocessing

[16:28] <moritz_> what about storing the tests and the code it depends on into a computer readable format, and let each implementation pick their tests?

[16:28] <TimToady> don't want any indirection that makes it harder to write tests

[16:28] <moritz_> probably too much effort

[16:28] <TimToady> and it's already in a computer readable format.  :)

[16:29] <moritz_> well... which program can read it? *g*

[16:29] <DarkWolf84> any editor

[16:29] <TimToady> proprocessing tests to turn bare blocks into evals is fine for finding out which parts compile

[16:29] <DarkWolf84> I think

[16:29] <kjwcode> Sounds good.  Any big names in testing, or should I scan the commits to find the best folks to coordinate with?

[16:30] <TimToady> but if you use a preprocessor for the standard tests, then you've essentially put part of the standard definition of P6 into the preprocessor, which is no good

[16:30] <moritz_> kjwcode: I think it's not the test writers that you should cooridinate with, but the compiler writers

[16:30] <TimToady> we don't want language divergence based on which args you happen to feed the preprocessor today

[16:31] <moritz_> kjwcode: for example you could ask pmichaud++ which tests he'd like to have for p6-on-parrot

[16:31] <kjwcode> moritz_: Good point.  :)

[16:31] <TimToady> he's also the parrot contact for rejiggering the tests to be useful to parrot

[16:31] <kjwcode> Excellent.  That gives me a great starting point.  Thank you!

[16:32] <TimToady> though various people are involved in that discussion

[16:32] <moritz_> maybe for some tests we could also just split them into separate files, roughly ordered by parsing difficulty

[16:32] <TimToady> that's also been proposed

[16:32] <TimToady> but it tends to make the smoke matrix longer

[16:33] <moritz_> and whatever people do will get done... if we wait for broad consent, we'll wait very long

[16:33] <TimToady> and also doesn't help when tests depend on previous code

[16:33] <TimToady> rough consensus and working code

[16:33] *** sunnavy left
[16:33] <TimToady> kjwcode: note that the pugs philosophy is that it's better to ask forgiveness than permission

[16:34] <kjwcode> TimToady: I think I can live with that.  :)

[16:34] <TimToady> kjwcode: have you seen the smoke output matrix online?

[16:34] <moritz_> on the other hand, nearly nobody forbids anything ;)

[16:35] <kjwcode> TimToady: Not yet.  We use a similar system where I work, so I'm somewhat familiar with it.

[16:35] <TimToady> if not, see http://m19s28.dyndns.org/cgi-bin/pugs-smokeserv.pl and follow any of the arrows to a particular matrix

[16:35] <lambdabot> Title: Pugs Smoke Reports

[16:35] *** poky left
[16:35] <kjwcode> Excellent, bookmarked.

[16:35] *** Blwood left
[16:35] <TimToady> you'll want the repository results rather than the release, which are ancient

[16:36] *** Blwood joined
[16:36] <TimToady> anyway, most any time of day there will be someone here you can ask questions of, since we've got people all around the world working on this

[16:37] <kjwcode> Wonderful.

[16:37] <moritz_> that sounds really cool ;)

[16:37] <moritz_> and in fact, it is 

[16:37] <kjwcode> That's more than enough to get me started.

[16:37] <TimToady> are you at all familiar with Haskell?

[16:38] <moritz_> kjwcode: just out of curiosity, how did you learn about pugs, the p6 test suite and this channel?

[16:38] <TimToady> lot of those folks hang out here too, is all

[16:38] <kjwcode> I'm familiar with the basic concepts of Haskell -- I've done a little ML in my time which is superficially similar

[16:40] <kjwcode> moritz_: I've been following Perl6 at a distance for quite some time.  A couple of minor dips into parrot-land, and playing with Pugs on and off.  I've decided to get active in the OSS community again and this felt like a great place to do it.

[16:40] <thoughtpolice> i get a very strong feeling of dislike from ocaml, so i'm kind of iffy about ML (and f# for that matter)

[16:40] <thoughtpolice> that's probably just me though. :)

[16:41] <kjwcode> thoughtpolice: It's not just you.  I learned some mostly as a way of offsetting my bias towards Lisp-derived languages as being the whole of the functional language world.

[16:42] <kjwcode> Parentheses still give me warm fuzzies.  We've all got our fetishes, I guess.  :)

[16:42] <PerlJam> kjwcode: If you could implement the Perl 6 rules syntax for pugs, that might be nice :)

[16:42] <thoughtpolice> kjwcode: ah. lisp-land is a fun place to be though, I'll admit. :)

[16:43] <shachaf> kjwcode: Monads are warm and fuzzy, if that helps.

[16:43] <kjwcode> PerlJam: We'll see!  This is only day 0 for me, so it'll be all about immersion.  :)

[16:43] <TimToady> well, we only need one complete rules engine, but we still need a lot fo tests

[16:44] <kjwcode> shachaf: I've heard that about monads.  I still haven't met one in real life, though -- only on-line.  :)

[16:44] *** jhorwitz left
[16:44] * kjwcode nods at TimToady.

[16:44] <kjwcode> Plus, tests are a great way of getting one's feet wet.

[16:44] *** justatheory joined
[16:44] *** jhorwitz joined
[16:44] <shachaf> kjwcode: Lists are monads. Surely a LISPer would've met those? :-)

[16:44] <TimToady> also, when you look at the tests, you'll see "smart links" back to the specs

[16:45] <shachaf> @quote fuzzy

[16:45] <lambdabot> No quotes match. This mission is too important for me to allow you to jeopardize it.

[16:45] <shachaf> I guess it's gone. :-(

[16:45] <TimToady> and the specs at http://perlcabal.org/syn/ have links into the current status of the tests for various sections of the document

[16:45] <lambdabot> Title: Official Perl 6 Documentation

[16:45] <kjwcode> shachaf: You bet!  I have met a few of those in my time.  :)

[16:46] <shachaf> > [1,2,3] >>= (\x -> [4,5,6] >>= (\y -> return (x,y))) -- See?

[16:46] <lambdabot>  [(1,4),(1,5),(1,6),(2,4),(2,5),(2,6),(3,4),(3,5),(3,6)]

[16:46] <TimToady> well, we don't require everyone around here to join a monadstery

[16:47] <TimToady> ?eval (1,2,3) X (4,5,6)

[16:47] <pugsbot_r17185> ((1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6))

[16:47] <thoughtpolice> speaking of haskell, my irc bot is making baby-steps. :)

[16:48] <thoughtpolice> in every sense of the phrase 'baby-steps' though

[16:48] <kjwcode> Bookmarked.  And I prefer the Perl 6 syntax.  :)

[16:48] <shachaf> > liftM2 (,) [1,2,3] [4,5,6] -- Almost as short, and way more general. :-)

[16:48] <lambdabot>  [(1,4),(1,5),(1,6),(2,4),(2,5),(2,6),(3,4),(3,5),(3,6)]

[16:48] <TimToady> ?eval 1,2,3 X 4,5,6

[16:48] <pugsbot_r17185> ((1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6))

[16:48] <DarkWolf84> :)

[16:48] <thoughtpolice> it might be able to say 'hello' sometime in the next few days.

[16:48] <DarkWolf84> more clear

[16:48] <thoughtpolice> i'll declare birth then

[16:48] <DarkWolf84> :)

[16:48] <TimToady> good, the precedence got fixed

[16:48] <shachaf> > [(x,y) | x <- [1,2,3], y <- [4,5,6]] -- Pretty clear?

[16:48] <lambdabot>  [(1,4),(1,5),(1,6),(2,4),(2,5),(2,6),(3,4),(3,5),(3,6)]

[16:50] <TimToady> ?eval map { [$^x, $^y] }, (1..3 X 4..6)

[16:50] <pugsbot_r17185> ([1, 4, 1, 5], [1, 6, 2, 4], [2, 5, 2, 6], [3, 4, 3, 5], [3, 6, undef])

[16:50] <thoughtpolice> lambdabot is fun. :) i think my new favorite command might be like djinn

[16:50] <TimToady> hmm,

[16:50] <thoughtpolice> because it's oh-so cool.

[16:50] <TimToady> right X doesn't flatten right yet

[16:52] <shachaf> Flatten?

[16:52] *** poky joined
[16:52] <TimToady> most of the operations and functions that return sublists should return a list of captures, which in normal list context flatten, but in "slice" context turn into a list of lists

[16:53] *** game left
[16:53] <TimToady> so things like X, map, gather are all context sensitive

[16:53] <TimToady> but that's not quite implemented in pugs yet

[16:54] *** buetow left
[16:54] * shachaf thinks Perl is weird.

[16:54] *** buetow joined
[16:54] <TimToady> it's optimized differently than Haskell

[16:55] *** pmurias joined
[16:55] <pmurias> fglock: hi

[16:55] <shachaf> > let (*) = liftM2 (,) in [1,2,3] * [4,5,6]

[16:55] <lambdabot>  [(1,4),(1,5),(1,6),(2,4),(2,5),(2,6),(3,4),(3,5),(3,6)]

[16:56] <fglock> pmurias: hi

[16:56] <PerlJam> TimToady: Have you read any of Nassim Taleb's books?  "Fooled by Randomness", "The Black Swan", etc.?

[16:56] <TimToady> nope

[16:57] <PerlJam> TimToady: He essentially makes the premise that humans aren't optimized to design but rather to discover.

[16:57] <PerlJam> TimToady: So ... you bucking evolution by making designing Perl 6  :)

[16:57] <PerlJam> s/making//

[16:57] <TimToady> well, it is certainly the case that we frequently discover that our designs don't work...

[16:58] <diakopter> design is the attempted discovery of the/an optimum implementation/solution...

[16:59] <TimToady> I'm trying to discover a design that allows people to discover programming techniques gradually

[17:00] <TimToady> and the optimum in language design is not one that's perfect, but one that is free to evolve over time

[17:01] <[particle]> that's nvts.

[17:01] <TimToady> lol

[17:02] <TimToady> anyway, the whole point of Perl 6 is to do about 20 impossible things simultaneously

[17:03] <TimToady> being perfect both now and 20 years from now is just one of those impossible things

[17:04] <PerlJam> I remember right after perl 5 was released to the masses that it seemed to change rapidly and then entered a state of steady growth (change).  Perl 6 will likely be the same.

[17:04] <PerlJam> (If Perl 6 is every released to the masses :)

[17:04] <diakopter> "there's not many ways not to do it" "the best ways to do it are easier to learn and do than [previously | the worse ways to do it]" "cool"

[17:07] <diakopter> that first quote is attributed to TimToady, btw.

[17:09] <TimToady> there are not many ways not to say something that someone will not deem quotable

[17:10] <PerlJam> ""  <-- quoting the silence between TimToady's text.

[17:11] *** yahooooo joined
[17:11] <DarkWolf84> :)

[17:12] <TimToady> shower, bbl &

[17:13] <Juerd> diakopter: pong (better to mail me)

[17:14] *** weinig joined
[17:16] *** jisom joined
[17:18] *** Aankh|Clone joined
[17:24] <fglock> hmm - I probably need to implement something like this for sorting multis:  compare_type_distance( $proto_a, $proto_b, $invocant ){...} 

[17:26] *** weinig left
[17:28] *** weinig joined
[17:31] *** SubStack left
[17:36] *** Aankhen`` left
[17:38] *** Psyche^ joined
[17:45] <pmurias> fglock: something like matches_tighter($proto_a,$proto_b,$argument)

[17:46] <pmurias> might be better

[17:47] * pmurias is playing with selenium, and like it quite a bit

[17:47] *** rindolf joined
[17:47] <moritz_> selenium? the chemical element?

[17:47] <moritz_> probably not :)

[17:49] <pmurias> www.openqa.org/selenium-ide - automatic testing for ajax

[17:50] <moritz_> looks quite nice ;)

[17:51] <avar> =v 11

[17:54] *** Patterner left
[17:54] *** Psyche^ is now known as Patterner

[17:55] *** kanru left
[17:58] *** fglock left
[18:06] *** jhorwitz left
[18:14] *** hakobe is now known as hkb_zz

[18:16] *** lisppaste3 left
[18:17] *** franck____ joined
[18:22] *** lisppaste3 joined
[18:24] *** justatheory left
[18:24] *** justatheory joined
[18:26] *** justatheory left
[18:27] *** justatheory joined
[18:31] *** franck___ left
[18:31] *** goudatr0n joined
[18:31] *** goudatr0n left
[18:31] *** franck___ joined
[18:31] *** jhorwitz joined
[18:35] *** kanru joined
[18:37] *** franck____ left
[18:40] *** rindolf left
[18:44] *** Aankh|Clone left
[18:49] <diakopter> does anyone here know if Debian has commented on the AL2 - that is, whether it will redistribute upstream source packages under the AL2, or whether it will select GPLn or something?

[18:49] *** rhr left
[18:49] *** bcmb joined
[18:50] <moritz_> I don't know... have you googlede linux.debian.legal?

[18:51] *** justatheory_ joined
[18:53] <moritz_> diakopter: http://www.debian.org/legal/licenses/index.en.html lists "Perl Artistic license" without specifying a version number, so I'd assume there is no problem

[18:53] <lambdabot> Title: Debian -- License information

[18:54] *** franck____ joined
[18:54] <moritz_> debian-legal usually follows new version of common licenses very closly and cries out loudly if it's not DFSG-compatible

[18:54] <moritz_> especially if the prior version was DFSG

[18:57] <diakopter> I'd call that out of date... Debian's list of allowed licenses doesn't correspond to OSI's.  For instance, the AL2 approves redistribution under the Apple Public Source License, while Debian calls that a non-free license.

[18:58] <moritz_> diakopter: that's no reason for AL2 to be non-free

[18:58] <moritz_> diakopter: and DFSG and OSI only were the same initially, the "forked" a long time ago

[18:58] *** rhr joined
[18:59] <moritz_> http://www.opensource.org/licenses/alphabetical doesn't list as2 either

[18:59] <lambdabot> Title: Licenses by Name | Open Source Initiative

[19:01] <moritz_> and the as2 link on http://www.perlfoundation.org/legal/ is a dead link

[19:02] *** dwave left
[19:02] *** franck___ left
[19:03] <obra> OSI have approved the artistic 2. even if their website isn't current

[19:03] <moritz_> that's good news at least ;)

[19:06] <moritz_> I don't know if (13) may be a problem for DFSGness

[19:07] *** justatheory left
[19:07] <wolverian> FSF also refers to AL2 nowadays, I think

[19:12] <wolverian> aye, it does (and considers it free)

[19:12] *** IllvilJa left
[19:13] *** kane__ left
[19:14] *** kane_ joined
[19:16] *** jisom left
[19:21] *** weinig left
[19:27] *** IllvilJa joined
[19:28] *** fglock joined
[19:28] *** dduncan joined
[19:42] *** fglock__ joined
[19:43] <diakopter> I guess I don't see a difference between Debian saying "we won't redistribute software that we're licensed to modify/redistribute under [only] the A(pple)PSL" and "we won't redistribute software that someone else could redistribute *with our patches* under a non-free license (the APSL)"

[19:45] <dduncan> afaik, the APSL 2.0 is a free license; it just isn't GPL compatible

[19:46] <diakopter> dduncan: sry; backlog; I was continuing a conversation from an hour ago

[19:46] <diakopter> it is non-free according to Debian

[19:47] <dduncan> I was quoting the fsf position ... http://www.gnu.org/licenses/license-list.html ...

[19:47] *** weinig joined
[19:47] <lambdabot> Title: Various Licenses and Comments about Them - GNU Project - Free Software Foundatio ...

[19:47] <dduncan> but yes, I understand Debian is more strict

[19:47] <moritz_> diakopter: the difference is huge... BSD license allows you to redistribute under nearly _any_  license, but it's still DFSG-compatible

[19:48] <moritz_> diakopter: DFSG is not about protecting Debian's intellectual property, but about ensuring freedom for the user

[19:48] <moritz_> diakopter: and debian users modify their software ;)

[19:56] *** fglock left
[20:00] *** kanru left
[20:03] *** justatheory joined
[20:05] *** justatheory_ left
[20:08] *** weinig left
[20:09] *** weinig joined
[20:10] <pugs_svnbot> r17235 | moritz++ | [irclog] more encoding issues:

[20:10] <pugs_svnbot> r17235 | moritz++ |  entering of multibyte chars in the search field will at least be preserved

[20:10] <pugs_svnbot> r17235 | moritz++ |  No guarantee that it finds something :(

[20:10] <pugs_svnbot> diff: http://dev.pugscode.org/changeset/17235

[20:10] <lambdabot> Title: Changeset 17235 - Pugs - Trac

[20:11] *** [particle1 joined
[20:11] <moritz_> can somebody confirm DNS problems with resolving svn.pugscode.org

[20:11] <moritz_> ?

[20:12] <kjwcode> moritz_: I was having problems resolving it a couple of hours ago, but assumed it was due to difficulties with my primary nameserver.

[20:13] <kjwcode> moritz_: Seems to be working fine for me now, though.

[20:13] <obra> I get a fast answer of 193.200.132.135

[20:14] *** fglock joined
[20:14] <moritz_> it works for me on three hosts, the fourth can't resolve it

[20:15] <TimToady> I was also having trouble a couple hours ago

[20:15] <moritz_> ok, thanks

[20:15] *** justatheory left
[20:16] *** justatheory joined
[20:18] *** justatheory left
[20:18] <diakopter> that registrar's dns servers were having problems (both perlcabal.org and pugscode.org) for a while.

[20:19] *** justatheory joined
[20:20] <moritz_> can't test the last irclog commit until pugscode.org resolves OK again

[20:21] <diakopter> moritz_: why not

[20:21] <moritz_> diakopter: because I can't do a "svn up" on the server :(

[20:22] *** thestarslookdown joined
[20:22] <diakopter> hosts entry for 93.200.132.135 svn.pugscode.org  ....?

[20:22] <diakopter> er, 193.200.132.135

[20:23] <moritz_> diakopter: no root access :(

[20:26] *** [particle] left
[20:27] *** fglock__ left
[20:30] *** weinig left
[20:30] *** weinig joined
[20:31] *** justatheory left
[20:31] *** justatheory joined
[20:35] *** kane_ left
[20:37] *** justatheory_ joined
[20:38] *** justatheory left
[20:40] *** jjore-w left
[20:41] *** jjore-w joined
[20:42] *** justatheory joined
[20:44] *** dwave joined
[20:46] *** rindolf joined
[20:48] *** kjwcode left
[20:49] *** TJCRI left
[20:50] *** justatheory left
[20:50] *** rindolf left
[20:52] *** justatheory joined
[20:53] <diakopter> moritz_, TimToady: if you're feeling daring, you can svn switch --relocate http://svn.pugscode.org/pugs http://p6lib.org/pugs .

[20:53] *** justatheory left
[20:53] *** justatheory joined
[20:55] <diakopter> don't try using ssl, though... problems ensue.

[20:56] *** justatheory left
[20:57] *** justatheory joined
[20:58] *** justatheory_ left
[21:07] *** justatheory left
[21:07] *** jhorwitz left
[21:07] *** justatheory joined
[21:09] *** SubStack joined
[21:10] <diakopter> (you can always switch it back...)

[21:12] *** justatheory left
[21:12] *** justatheory joined
[21:13] *** justatheory_ joined
[21:16] *** justatheory_ left
[21:17] *** justatheory_ joined
[21:20] *** pmurias left
[21:23] *** weinig left
[21:23] *** weinig joined
[21:26] *** kjwcode joined
[21:30] *** justatheory left
[21:31] *** justatheory joined
[21:32] *** penk joined
[21:32] *** chris2 left
[21:34] *** fglock left
[21:34] *** buetow left
[21:35] *** justatheory_ left
[21:39] *** daxim_ is now known as daxim

[21:42] *** justatheory_ joined
[21:47] *** Daenyth left
[21:49] *** justatheory left
[21:53] *** thestarslookdown left
[21:54] *** thestarslookdown joined
[22:01] *** justatheory_ is now known as justatheory

[22:07] *** lichtkind_ joined
[22:07] *** lichtkind_ left
[22:12] *** weinig_ joined
[22:13] *** penk left
[22:13] *** weinig left
[22:14] *** penk joined
[22:24] *** jjore-w left
[22:25] *** lichtkind left
[22:26] *** justatheory_ joined
[22:27] *** elmex_ joined
[22:28] *** jjore-w joined
[22:33] *** justatheory left
[22:37] *** thestarslookdown left
[22:42] *** elmex left
[22:42] *** drupek12 left
[23:07] *** poky left
[23:19] *** Blwood left
[23:23] *** REPLeffect left
[23:39] *** ozo left
[23:44] *** rhr left
