[00:01] *** gnuvince joined
[00:03] *** llisper joined
[00:04] *** Psyche^ is now known as Patterner

[00:06] *** bsb joined
[00:08] *** llisper left
[00:09] *** Aankhen`` joined
[00:17] *** Indigo_Stallion joined
[00:27] *** trym__ joined
[00:31] *** trym__ joined
[00:35] *** trym__ joined
[00:40] *** trym__ joined
[00:45] *** renormalist joined
[01:23] *** amnesiac joined
[01:31] *** trym__ joined
[01:31] *** diakopter joined
[01:32] *** bsb left
[01:36] *** trym__ joined
[01:39] *** nipra joined
[01:44] *** trym___ joined
[01:54] *** Southen_ joined
[02:10] *** weinig|away is now known as weinig

[02:12] *** trym_ joined
[02:13] *** beppu__ joined
[02:18] *** trym_ joined
[02:36] *** trym_ joined
[02:45] *** dmq joined
[02:48] *** trym__ joined
[03:01] *** Psyche^ joined
[03:01] *** Psyche^ is now known as Patterner

[04:13] *** ilogger2 joined
[04:19] *** trym___ joined
[04:27] *** trym____ joined
[04:43] *** II0o203l7 joined
[04:44] *** trym__ joined
[04:57] *** leed joined
[04:59] *** trym__ joined
[05:06] *** trym__ joined
[05:13] *** trym__ joined
[05:23] *** bucky joined
[05:29] *** TimToady_ joined
[05:29] *** trym__ joined
[05:33] *** TimToady_ is now known as TimToady

[05:37] *** trym__ joined
[05:52] *** ofer0 joined
[05:54] *** trym___ joined
[06:06] <svnbot6> r15211 | lwall++ | Finished roughing in the operator precedence parser.

[06:06] *** trym__ joined
[06:07] <svnbot6> r15212 | lwall++ | typos, brainos

[06:09] *** trym__ joined
[06:13] *** BooK_ joined
[06:14] *** trym__ joined
[06:22] *** trym__ joined
[06:29] *** dolmans joined
[06:30] *** rfordinal joined
[06:30] *** jisom joined
[06:31] *** jisom joined
[06:32] *** jisom left
[06:33] *** jisom joined
[06:36] *** jisom joined
[06:38] *** trym__ joined
[06:41] *** amnesiac joined
[06:43] *** trym__ joined
[06:55] *** trym__ joined
[07:03] *** trym__ joined
[07:07] *** Aankh|Clone joined
[07:19] *** trym_ joined
[07:21] *** marmic joined
[07:26] *** Dr_Pi joined
[07:39] *** trym__ joined
[07:39] *** drbean joined
[07:44] *** BooK joined
[07:53] <svnbot6> r15213 | lwall++ | balanced and unbalanced scanners, some bogus sublanguage dispatch

[07:55] *** trym_ joined
[08:00] *** iblechbot joined
[08:00] *** trym_ joined
[08:03] *** Aankh|Clone is now known as Aankhen``

[08:08] *** devogon joined
[08:10] *** trym__ joined
[08:14] *** _Jack_ joined
[08:15] *** trym_ joined
[08:22] *** trym_ joined
[08:42] *** drupek12167 joined
[08:49] <dolmans> everyday all i see here is someone quit/leaving/joining,etc.

[08:49] <jisom> maybe have your irc client not show that?

[08:49] <avar> it has been pretty quiet lately

[08:50] <moritz> 08:53 < svnbot6> r15213 | lwall++ | balanced and unbalanced scanners, some 

[08:50] <moritz>                  bogus sublanguage dispatch

[08:50] <moritz> ;)

[08:50] <dolmans> but that is too quiet! i like to recv some messages, even logs.

[08:51] <moritz> dolmans: foo ;)

[08:51] <moritz> dolmans: like that?

[08:51] <moritz> ;)

[08:51] <dolmans> oh my god, bang.

[08:51] <tene> ?eval entertain dolmans 

[08:51] <evalbot_r15213> Error: No compatible subroutine found: "&dolmans"

[08:51] <tene> ?eval entertain "dolmans"

[08:51] <evalbot_r15213> Error: No compatible subroutine found: "&entertain"

[08:52] <tene> ?eval dance

[08:52] <evalbot_r15213> Error: No compatible subroutine found: "&dance"

[08:52] <tene> looks like evalbot isn't going to help

[08:52] <jisom> weird, is dolmans supposed to fail before entertain?

[08:52] <jisom> ? say "do some svn commits, dolmans"

[08:53] <jisom> eh, you know what it means

[08:53] <moritz> ?eval say "do some svn commits, dolmans"

[08:53] <evalbot_r15213> OUTPUT[do some svn commits, dolmans‚ê§] Bool::True

[08:53] <tene> See?  The "Bool::True" means that evalbot agrees.

[08:53] <moritz> ;)

[08:53] <tene> ?eval die Bool::True

[08:53] <evalbot_r15213> Error: 1

[08:54] <dolmans> i'd like to do that. ok guys, i know there are so many people, so go on be quiet.

[08:54] <tene> dolmans: we're just having a little fun. :)

[08:57] <dolmans> tene: so go on hack, perl6, not me. :), but who is a doctor? i coughed a lot.

[08:59] *** mjk joined
[09:00] *** buetow joined
[09:00] *** mjk joined
[09:04] *** nipra joined
[09:05] *** pfarmer joined
[09:12] *** nipra joined
[09:14] *** elmex joined
[09:15] *** trym_ joined
[09:22] *** foo\ joined
[09:22] *** Aankh|Clone joined
[09:37] *** JYC joined
[09:44] *** nipra joined
[09:58] *** Psyche^ joined
[10:09] *** Psyche^_ joined
[10:12] *** Psyche^_ is now known as Patterner

[10:36] *** trym_ joined
[10:44] *** trym__ joined
[10:52] *** xinming joined
[10:55] *** trym___ joined
[11:02] *** ruoso joined
[11:08] *** trym_ joined
[11:15] *** lumi joined
[11:24] *** nipotan is now known as nipotaway

[11:27] *** nipra joined
[11:28] *** Caelum_ joined
[11:39] *** lambdabot joined
[12:01] *** chris2 joined
[12:01] *** ayrnieu joined
[12:05] *** cnhackTNT joined
[12:44] *** mjk joined
[12:48] *** ofer1 joined
[12:48] *** iblechbot joined
[12:50] *** IllvilJa joined
[12:53] *** theorb joined
[12:58] *** theorb is now known as theorbtwo

[13:14] *** jamhed joined
[13:32] *** diakopter joined
[14:15] <audreyt> TimToady: =<>.map:{.say} -- should it work lazily as "for"?

[14:16] <audreyt> also, is it okay if we make =<>.>>say strict, that is for all hyper operators to operate only on eager data? because "lazy lists" and data parallelism doesn't, generally, mix

[14:17] <NewCoke> is lambdabot source in pugs?

[14:17] <audreyt> NewCoke: no, it's over there in #haskell

[14:19] <audreyt> TimToady: or perhaps =<>.>>say is still lazy, and we only do true data parallelism when the data type is a native dense type (e.g. "seq of int")?

[14:21] <audreyt> (S03 says nothing explicit about hyper vs laziness; Junction, on the other hand, is probably eager-only, so it's cool)

[14:23] <[particle]> =<>.>>say may print lines out of order

[14:24] <audreyt> yes, that part I know :)

[14:24] <audreyt> the question is, does it wait for you to hit EOF

[14:24] <audreyt> or not

[14:25] <audreyt> to start printing

[14:25] <[particle]> i think not

[14:25] <[particle]> what if the handle is infinite?

[14:25] <audreyt> but hypers are designed for data parralism

[14:25] <audreyt> namely

[14:25] <audreyt> [1..1000]>>.sqrt

[14:25] <audreyt> can be handy if your cpu has SSE 

[14:26] <[particle]> yes

[14:26] <audreyt> but if we say that we must preserve laziness

[14:26] <audreyt> then it's essentially sequential

[14:26] * [particle] is hoping to have a multi-cpu multi-core soon

[14:26] <audreyt> for both the range generator and the readline generator

[14:26] <audreyt> and so SSE instructions are useless

[14:26] <audreyt> as you only demand one piece of data at a time

[14:27] <[particle]> any generators where laziness is not preserved?

[14:27] <audreyt> no, I mean the hyper consumer

[14:27] <[particle]> yes

[14:27] <audreyt> we already know that "for" consumer preserves laziness

[14:27] <audreyt> because it is sequential in nature

[14:27] <audreyt> but the hyper consumer, for it to be parallel, must obtain multiple chunks of data in order to be effective

[14:28] <[particle]> this could be controlled by pragmata, but i think that's too far from the code

[14:28] <[particle]> default to parallel -- have ability to specify serial ?

[14:29] <audreyt> well, you can special serial using "map"...

[14:29] <audreyt> *specify

[14:29] * audreyt ponders

[14:30] <[particle]> i didn't think map specified serial, but it's been a while since i read that synopsis

[14:30] <audreyt> =<>.>>.say # it's not really far removed from code

[14:30] <audreyt> whether it blocks for EOF or not is plainly visible :)

[14:31] <audreyt> well, map must preserve order of side effects

[14:31] <audreyt> and so can't really use parallelism instructions

[14:31] <[particle]> so, the p6 equiv of $. would be the last line in the file using map

[14:32] <[particle]> but not true using hyper?

[14:32] <[particle]> that's fine. hyper means parallel to me

[14:32] <[particle]> s/means/implies/

[14:32] <audreyt> cool.

[14:33] <[particle]> heck, they could be called 'parallel operators'

[14:34] <moritz> how do I read from stdin in pugs?

[14:34] <audreyt> =<>

[14:34] <moritz> audreyt: thanks

[14:34] <audreyt> =*IN

[14:34] <audreyt> np :)

[14:45] *** vel joined
[14:48] *** xinming joined
[14:50] *** kolibrie joined
[15:32] *** buetow joined
[15:39] <avar> http://sial.org/pbot/22880 # audreyt ?;)

[15:39] <lambdabot> Title: Paste #22880 from Someone at 85.197.228.236

[15:40] <avar> audreyt: see #p5p for what needs to be done for it, but any comment on the general API wrt using P::C::R on it?

[15:42] *** kanru joined
[15:56] *** thepler joined
[16:08] <audreyt> avar++ # yay!

[16:08] <audreyt> good enough, I'd say, for PCR integration

[16:09] <audreyt> $::pattern is magick?

[16:09] <avar> $::pattern = $main::pattern

[16:09] <avar> nope

[16:09] <audreyt> can I access the private use area to hold one SV then?

[16:09] <TimToady> mornin'

[16:09] <audreyt> that is all we need to store compiled regexes

[16:09] <avar> anyway, I'm going to change thee interface, it sucks atm:)

[16:09] <avar> it's going to be:

[16:09] <TimToady> backlogging...

[16:10] <avar> comp => sub { my $re = shift; if ($re->flags & FOLD) { .. } }, exec => sub { my ($re, $str) = @_; if ($str =~ $re->pattern (or just $re)) ... 

[16:10] <avar> $::pattern is just a nasty hack to pass data between the two:)

[16:11] *** Dr_Pi joined
[16:13] <avar> audreyt: wrt private use area, sure, I'm going to be passing a blessed SV* around in the ->pprivate structure, I could add a $re->stash( $anything ); to it, sound neat?

[16:15] *** VanilleBert joined
[16:15] <audreyt> yup.

[16:15] <audreyt> and $re->stash as the read accessor

[16:16] <audreyt> and init to undef. that makes GC easier

[16:16] <audreyt> (we can use InsideOut to sidestep, but in this case a simple stash is easier)

[16:18] *** justatheory joined
[16:18] <avar> mm

[16:19] <avar> you'll always be able to do:

[16:19] <avar> my $stash;

[16:19] <audreyt> hm?

[16:19] <avar> use re::engine::Plugin (comp => \&comp, exec => \&exec);

[16:19] <avar> or, hrm

[16:20] <avar> that isn't going to work if you have my ($a, $b) = (qr//, qr//); 

[16:20] <audreyt> :)

[16:20] <avar> ignore me:)

[16:21] <TimToady> hypers are eager but declaratively parallelizable because they imply the operator runs till completion

[16:22] <audreyt> TimToady: so "for" runs till completion, but "map" does not?

[16:22] * avar ponders what the best quote character to use for embedding rules in p5 regexen is

[16:22] <avar> TimToady: stop taking up metacharacters already!:)

[16:22] <audreyt> and a hyperop is an eager map?

[16:22] *** statico joined
[16:22] <TimToady> I'm not sure junctions have to be eager: any(=<>) == 1 can stop as soon as it see one that equals one, and doesn't imply =<> is read serially, though it probably is

[16:22] <avar> my $re = qr<<< >>>: # I wish

[16:22] <audreyt> can we write the differences down in the Hyper section of syn?

[16:22] <TimToady> we need a "paramap"

[16:22] <avar> hrm, since the quotes are balanced that might not be an issue

[16:23] * avar wanders of

[16:23] <avar> f

[16:23] <TimToady> I'm trying to make map and for isomorphic

[16:23] <TimToady> so we ned a "parafor" too

[16:23] <TimToady> s:2nd/e/ee/

[16:24] <audreyt> for =<>.map:{ .sqrt } { .say }

[16:24] <audreyt> for =<> { .sqrt.say }

[16:24] <audreyt> same thing?

[16:24] <TimToady> yes

[16:24] <audreyt> so it's just the void context that forces consumption?

[16:24] <audreyt> i.e., void context is an eager consumer

[16:25] <TimToady> hmm, I guess

[16:25] <TimToady> seems odd

[16:25] <audreyt> but essential to get the for.say working

[16:25] <audreyt> otherwise it'll not consume anything

[16:26] <TimToady> I wonder how many faqs we'll get about accidental non-void context...

[16:26] <moritz> many ;)

[16:26] <audreyt> $x = =<>.map:{.say}; # nothing is read

[16:26] <audreyt> =<>.map:{.say}; # everything is read

[16:26] <audreyt> (according to this interpretation)

[16:27] *** trym_ joined
[16:27] <TimToady> I wouldn't say "nothing"

[16:27] <audreyt> or maybe 

[16:27] <TimToady> at least one value is read

[16:27] <cognominal> audreyt, are you going to the hackathon? http://conferences.yapceurope.org/hack2007nl/stats

[16:27] <audreyt> @x = =<>.map:{.say}; # nothing is read

[16:27] <lambdabot> Maybe you meant: . v

[16:27] <lambdabot> Title: European Perl Hackathon 2007 - The Netherlands - European Perl Hackathon 2007 St ...

[16:27] <audreyt> and $x= forces the length. not sure

[16:27] <shay> hi

[16:28] <audreyt> shay: greetings

[16:28] <moritz> hey shay ;)

[16:28] <TimToady> I'd think @x= would be "everything"

[16:28] <shay> :)

[16:28] <shay> a pleasure to meet you all

[16:29] <TimToady> @x := would just bind in the lazy list and read nothing (yet)

[16:29] <lambdabot> Maybe you meant: . v

[16:29] <audreyt> ok. ditto for $x:=, surely

[16:29] <audreyt> but what about $x=?

[16:29] <audreyt> conceptually it allocs a mutable array always

[16:29] <svnbot6> r15214 | audreyt++ | * Switch arrays from Data.Sequence to GHC's native parallel arrays

[16:29] <svnbot6> r15214 | audreyt++ |   (no user-visible changes).  For now this merely gives us a slight

[16:29] <svnbot6> r15214 | audreyt++ |   speed/memory boost (both <5% generally), but will become useful later

[16:29] <svnbot6> r15214 | audreyt++ |   with a first-class Seq object implemented in MO.

[16:29] <svnbot6> r15214 | audreyt++ |   Also, when GHC 6.8 is released with data parallelism that natively makes

[16:29] <svnbot6> r15214 | audreyt++ |   use SSE/GPU for hyper operations -- even for nested boxed objects -- 

[16:30] <TimToady> looks kinda like a list in scalar context

[16:30] <svnbot6> r15214 | audreyt++ |   this will make hyperops _extremely_ fast.

[16:30] <audreyt> so perhaps it's also "everything"

[16:30] <audreyt> @x = 1..99999999; # also forced? or is Range somehow special?

[16:30] <lambdabot> Maybe you meant: . v

[16:31] <TimToady> I think that's least surprise; the scalar context doesn't propagate through to the =

[16:31] <audreyt> k. so also everything

[16:32] *** trym__ joined
[16:32] <TimToady> I think it'd be dwimmy if @x = 1..* worked at least, and 99999999 is pretty close to *

[16:32] <audreyt> so Array recognize "unboxed range" as one of its specs

[16:33] <audreyt> sure

[16:33] <audreyt> cognominal: no, 'mafraid not.

[16:34] <cognominal> too bad :(

[16:34] <audreyt> TimToady: the lambdaheads over there figured out ways to automagically make $tree.>>?sqrt use GPU, even if it contains sparse heterogenous nodes, in which some are sqrt'able and some are not

[16:34] <audreyt> and the good thing is we don't need to change a line in pugs :)

[16:35] *** bonesss joined
[16:35] <audreyt> (relevant paper: "Data Parallel Haskell: a status report")

[16:35] <TimToady> wow

[16:36] <audreyt> and also automagically SMP-linearly-scaled like everything else :)

[16:37] <TimToady> well, it's sorta parallel booleans interspersed with numerics

[16:37] <audreyt> right. the idea is just to allocate one dense storage for each distinct type found in the tree

[16:37] <audreyt> this however means we can't promise order even across levels.

[16:37] <TimToady> maybe I can use $tree.>>.?subst to fix my heredoc whitespace in the GPU.  :)

[16:38] <audreyt> but spec currently says it's okay (only conjecturally not-ok)

[16:38] <audreyt> so perhaps keep it at okay :)

[16:38] <audreyt> (S03:2685)

[16:38] <TimToady> conjectures are lazy feedback receptors.  :)

[16:38] <audreyt> :)

[16:39] <audreyt> so I'm giving the pugs talk next monday to google.tw, focusing on metaprogramming, concurrency and parallelism

[16:39] *** Taral joined
[16:39] <audreyt> going to make slides (the one that I should've worked on for POPL) over the weekend

[16:39] <audreyt> and maybe make the code match the slides :)

[16:40] <Taral> audrey, did you get my /msg?

[16:40] <audreyt> Taral: just replied

[16:40] <Taral> you did?

[16:40] <audreyt> anyway, sleep, be back in ~8hrs :)

[16:40] <Taral> don't see reply :<

[16:40] <audreyt> Taral: $job switched to SuSE

[16:40] <audreyt> so no AIX GHC builds (for now) from me

[16:40] <Taral> So no AIX?

[16:40] <Taral> bah.

[16:40] <Taral> ok, I guess I'll try to port over the apple powerpc stuff

[16:41] <audreyt> k. sorry about that

[16:41] <Taral> np

[16:41] <Taral> nini

[16:41] <audreyt> will still be interested as it can boost performance of already-deployed-in-field code

[16:41] <audreyt> but not enough of a $job priority atm

[16:41] <audreyt> g'nite :)

[16:41] *** Taral left
[16:42] <TimToady> night

[16:43] *** ofer0 joined
[17:33] *** GabrielVieira joined
[17:37] *** amnesiac joined
[17:46] *** bernhard joined
[17:51] *** trym__ joined
[17:51] *** hexmode joined
[17:55] *** nipra joined
[17:57] *** xinming_ joined
[17:58] *** trym_ joined
[17:59] *** chris2 joined
[18:00] <NewCoke> already deployed: people are using pugs *in production*? =-)

[18:01] <moritz> NewCoke: who?

[18:01] <NewCoke> 11:42 < audreyt> will still be interested as it can boost performance of already-deployed-in-field code

[18:03] <[particle]> audreyt and timtoady, for example

[18:03] <NewCoke> ... those two, specifically, don't count. =-)

[18:03] * NewCoke stares at the perl6-on-parrot code...

[18:04] *** mr_ank joined
[18:12] *** cjeris joined
[18:22] *** VanilleBert left
[18:23] *** rashakil_ joined
[18:38] *** justatheory joined
[18:50] *** marmic joined
[19:08] *** bonesss is now known as bonesss`away

[19:11] *** Caelum_ is now known as Caelum

[19:20] *** neonse joined
[19:56] *** Dr_Pi joined
[20:03] *** nipra joined
[20:06] *** Caelum joined
[20:08] *** larsen_ joined
[20:11] *** justatheory_ joined
[20:21] *** IllvilJa joined
[20:24] *** nipra joined
[20:52] *** stevan__ joined
[21:03] *** bonesss`away is now known as bonesss

[21:03] <svnbot6> r15215 | lwall++ | more sublanguage support

[21:03] <svnbot6> r15215 | lwall++ | categories are now declared with the newly unified proto modifier

[21:07] *** justatheory joined
[21:11] *** buetow joined
[21:17] *** ashleyb joined
[21:18] *** wilx` joined
[21:23] *** sri_ joined
[21:26] *** Aankhen`` joined
[21:30] *** mako132 joined
[21:31] *** meppl joined
[21:32] *** pdcawley joined
[21:40] *** coke_ joined
[21:41] *** coke_ is now known as NewCoke

[21:48] *** ashleyb left
[22:04] <svnbot6> r15216 | lwall++ | random cleanup

[22:06] *** Dr_Pi_ joined
[22:07] <broquaint> TimToady++ # Perl-6.0.0-STD.pm is groovy.

[22:08] <[particle]> i don't think parrot will be able to parse it for a while yet :)

[22:10] <moritz> hu? is parrot supposed to parse perl6 code?

[22:10] <moritz> I thought that was perl6's task ;)

[22:10] <allbery_b> not likepugs can parse it yet either :)

[22:11] <[particle]> the perl6 implementation that runs on parrot

[22:12] <[particle]> allbery_b: it's good to have a clear target, though :)

[22:12] <moritz> [particle]: how advanced is that, eg compared to pugs?

[22:12] <[particle]> moritz: it's in it's infancy

[22:12] <moritz> [particle]: ok ;)

[22:12] <[particle]> currently missing END blocks and iterators (for for loops)

[22:13] <[particle]> but will *soon* be passing pugs's 01-sanity tests

[22:13] <moritz> sounds like a whole lot of work ;)

[22:13] <[particle]> then it can run Test.pm (written in perl6)

[22:13] <[particle]> then we can import the entire pugs test suite

[22:13] <[particle]> then the real work begins :)

[22:14] <moritz> and how far is parrot?

[22:14] <[particle]> many subsystems still have only reference implementations

[22:14] <[particle]> but design and implementation continues

[22:14] <moritz> so there is still hope ;)

[22:14] <[particle]> we should have a near-final object model soon

[22:15] <[particle]> i have hope, anyway

[22:15] <moritz> (I know there is, otherwise I wouldn't be here ;)

[22:16] <moritz> I'm currently writing a perl6 summary for (non-perl) programmers on my homepage, and the longer I write the more features I discover that should be included...

[22:17] <moritz> and I'm nowhere near the _real_ fancy stuff right now ;)

[22:17] <[particle]> looking less like a summary every day :)

[22:18] <moritz> s/summary/tutorial,introduction/

[22:18] <moritz> yes, that#s right

[22:18] *** wilx` is now known as wilx

[22:21] *** buetow joined
[22:25] *** Limbic_Region joined
[22:33] <Limbic_Region> TimToady - just saw the "recent changes" note to the list.  Sounds exciting ;-)

[22:33] *** Psyche^ joined
[22:40] *** spoopithy joined
[22:42] *** vel joined
[22:45] *** cls_bsd joined
[22:47] *** pjcj joined
[22:48] <moritz> print $fh "something"; doesn't seem to be implemented in pugs.. or am I just to stupid?

[22:48] *** Psyche^ is now known as Patterner

[22:50] <[particle]> try $fh.print("foo")

[22:50] <wolverian> moritz, that would be print $fh: "foo"; I think.

[22:51] <moritz> wolverian: yes, that's fine, thank you

[22:52] <moritz> wolverian: I justed look in the specs, and it just says print FILEHANDLE LIST

[22:52] <moritz> so is : part of the FILEHANDLE?

[22:52] <moritz> or is doc/Perl6/Spec/IO.pm just outdated?

[22:52] <Limbic_Region> which spec?  presumably S29 ?

[22:52] <moritz> doc/Perl6/Spec/IO.pm

[22:54] <moritz> S29 doesn't even mention print ;)

[22:54] <wolverian> because you're supposed to use say ;)

[22:55] <Limbic_Region> moritz - I had brief discussion with $larry the other day regarding the synopses

[22:55] <Limbic_Region> mortiz - it was tangently related

[22:55] <Limbic_Region> moritz - I would not necessarily think that *that* synopsis was correct and the pugs implementation wrong

[22:56] <Limbic_Region> mortiz - but the reason why I think that is fuzzy

[22:57] <Limbic_Region> moritz - OTOH, if the pugs test suite regarding IO to filehandles is lacking

[22:57] <Limbic_Region> write plenty of failing test cases to the spec

[22:57] <Limbic_Region> that will get someone's attention

[22:57] *** neonse left
[22:57] <Limbic_Region> either the test case or the spec (or both) will be updated

[22:57] *** ashleyb joined
[22:58] <Limbic_Region> moritz - and more tests are always better

[22:59] <moritz> Limbic_Region: so just ignore the current status of pugs and write failing testcases that fit with the specs?

[22:59] <Limbic_Region> yes

[22:59] <Limbic_Region> even if it is wrong, it will draw attention to it

[23:00] <moritz> Limbic_Region: ok, I'll do that

[23:00] <moritz> but not today, I'm too tired ;)

[23:00] <moritz> time for bed ;)

[23:00] <[particle]> only the spec and the testsuite are official perl 6

[23:01] <moritz> [particle]: you're write, but both are propably not free of errors

[23:01] <[particle]> indeed

[23:01] <[particle]> ...but with your help... ;)

[23:01] * Limbic_Region is currently grep'ing "print" from all the specs to see if they say contradictory things

[23:02] *** spoopithy is now known as spoop

[23:02] <Limbic_Region> possibly something in syntax.pod but need more context to know for sure

[23:03] <moritz> real life sucks because I can't grep my room ;)

[23:04] <ashleyb> moritz: NewCoke: I use pugs in production too.

[23:05] <moritz> ashleyb: how?

[23:05] <ashleyb> specifically Pugs::Compiler::Regex

[23:06] <audreyt> well, svnbot6 is deployed in #parrot and here

[23:06] <Limbic_Region> moritz - AFAICT, there is no contradiction in the specs so definately write failing test cases against IO.pod

[23:06] <audreyt> and that is considered "production" I think :)

[23:06] <Limbic_Region> audreyt - are you awake or talking in your sleep again?

[23:06] <audreyt> talking in my sleep mostly.

[23:07] <audreyt> TimToady's STD.pm just parses with pugs.

[23:07] <audreyt> running smoke and if nothing breaks horribly, commit+sleep a bit more

[23:07] <Limbic_Region> ok, won't bother you but can I ask if you have return mostly to full time?

[23:07] <Limbic_Region> s/return/returned/

[23:07] <audreyt> well, full-time sanity

[23:07] <Limbic_Region> ok, good

[23:07] <audreyt> still only part-time pugs; jifty claims the other half of my hacking attention

[23:08] <audreyt> (the better half, for the moment)

[23:08] * Limbic_Region extends his well wishes again and reminds audreyt that she has virtual shoulders if she needs or wants them

[23:08] <Limbic_Region> well - back to full time hackery is good even if we have to share you

[23:08] <Limbic_Region> ;-)

[23:08] <audreyt> thanks :) I think I finally unscrambled my brain sufficiently

[23:09] <audreyt> this brain-sudoku thing is hard to play

[23:09] <moritz> ashleyb: brain-sudoku?

[23:09] <moritz> um, audreyt, sorry ;)

[23:09] *** sri_ joined
[23:09] <Limbic_Region> audreyt - well duh, it's hyperdimensional

[23:09] <audreyt> moritz: trying to restore a cognitive system back to homeostasis, using only (very partial!) high-level introspection and no analysis tools

[23:10] <moritz> audreyt: ok ;)

[23:10] <audreyt> well, there are theoretically analysis tools

[23:10] <audreyt> but I don't have spare EEG machines at home...

[23:11] * Limbic_Region notes the hunger pangs and wanders off for food

[23:12] <moritz> audreyt: even if you had, I've heard EEGs are rather hard to parse ;)

[23:13] <audreyt> well, but it's much better than this verbal cortex thing...

[23:14] <audreyt> more finely grained and less prone to nonlinear feedback

[23:14] <audreyt> *feedback loop

[23:14] <svnbot6> r15217 | audreyt++ | * STD.pm - Various syntax errors and typos catched by

[23:14] <svnbot6> r15217 | audreyt++ |   actually parsing this thing with "pugs -c".

[23:17] <svnbot6> r15218 | audreyt++ | Pugs.Parser.Literal - Factor out regularAdverbPair for

[23:17] <svnbot6> r15218 | audreyt++ | generalized "is" parsing.

[23:20] <svnbot6> r15219 | audreyt++ | * Pugs.Parser: Parse (but not actually recognize) parameterized

[23:20] <svnbot6> r15219 | audreyt++ |   regex/token/rule with traits as well as routine modifiers.

[23:20] <svnbot6> r15219 | audreyt++ |     proto token foo ($some_param) is Moose[Int];

[23:22] <[particle]> where's the pugs equivalent of 'perlrun'?

[23:22] <[particle]> where do i look for pugs runtime flags?

[23:22] <[particle]> eh, i should probably just compile the thing and invoke it

[23:24] <audreyt> [particle]: Pugs::Doc::Run

[23:24] <[particle]> thx, i'll have a look

[23:24] <[particle]> chromatic hacked up a pbc to c translator

[23:24] <[particle]> soon we'll be able to portably create perl.exe

[23:24] <[particle]> based on perl6.pbc

[23:24] <TimToady> moritz: a lot of IO.pod is just copied willy nilly out of Perl 5 docs and is not canonical

[23:25] <audreyt> [particle]: aha, you mean the ahead-of-time compiler is revived

[23:25] <[particle]> yep

[23:25] <audreyt> cool.

[23:25] <[particle]> aot++

[23:26] <TimToady> audreyt: thanks for the parse fixes!

[23:26] <[particle]> how is gc done in pugs? does haskell take care of it?

[23:26] <audreyt> [particle]: yes, GHC has this incremental nonstopping threaded GC

[23:27] <audreyt> with weak, stable and foreign pointers which we use heavily for e.g. non-leaky perl5 integration

[23:27] * [particle] just read about Metronome, and is thinking about realtime parrot

[23:27] <audreyt> TimToady: np :) now to make it _run_...

[23:27] <TimToady> er, yeah...

[23:28] <audreyt> but, some more napping... &

[23:29] <Limbic_Region> TimToady - was my advice ill advised?

[23:29] * Limbic_Region isn't sure he said that correctly but hopes his point was made

[23:33] *** meppl joined
[23:56] <svnbot6> r15220 | lwall++ | IO.pod: translated some p5 docs for print.

