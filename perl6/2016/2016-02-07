[00:00] <AlexDaniel> jnthn: too bad it wasn't marked as experimental

[00:00] *** wamba left
[00:00] *** Sgeo_ left
[00:02] <jnthn> AlexDaniel: Doesn't matter much; it's busted enough it's doubtful anyone will be relying on it.

[00:02] <jnthn> AlexDaniel: And had virtually no tests, so we didn't commit to anything.

[00:03] <AlexDaniel> jnthn: yeah, thanks. Now I'll go rewrite that piece of code I wrote a few days ago.

[00:03] <jnthn> Will get it fixed up for 6.next :)

[00:03] *** RabidGravy left
[00:05] <AlexDaniel> before I upgraded it was working like ｢race｣ which was, eh, not too bad (but still not good enough). Now it's completely broken, but I guess I'll just change it to ｢race｣ then…

[00:05] <ugexe> any chance ==>> makes 6.next?

[00:12] <jnthn> ugexe: I think what makes it will muchly come down to the intersection of "what are people asking for" and "what do we have time to do"

[00:13] <jnthn> ugexe: Could do with some more organized way to collect the "what are people asking for" info.

[00:14] *** firstdayonthejob left
[00:14] *** mcmillhj left
[00:15] <jnthn> I suspect we'll have a couple of tracks, though. There'll be a 6.d focused around features, and a 6.c.1 which'll be more about nailing down stuff like hyper/race that we half-did in 6.c.

[00:15] <autarch> lizmat: I realized that my rakudo fix isn't right anyway - it'd be better to fix the compiler to handle numerators >= 2**31 peroperly, I think

[00:16] *** FROGGS left
[00:17] *** FROGGS[mobile] left
[00:18] *** ely-se left
[00:20] *** jameslen_ joined
[00:22] *** aliyev left
[00:22] *** jameslenz left
[00:22] *** pmurias left
[00:23] *** Timbus left
[00:23] *** emdashcomma left
[00:23] *** Timbus joined
[00:24] *** virtualsue left
[00:25] *** vendethiel- joined
[00:27] *** emdashcomma joined
[00:27] *** abaugher_ joined
[00:28] *** abaugher left
[00:28] *** vendethiel left
[00:29] *** pmurias joined
[00:30] <jnthn> sleep &

[00:33] *** pmurias left
[00:40] *** Laurent_R joined
[00:40] *** pmurias joined
[00:52] *** kid51 joined
[00:54] *** Laurent_R left
[00:58] *** JRaspass left
[01:05] *** kurahaupo left
[01:12] *** Xor_ joined
[01:26] *** Ben_Goldberg joined
[01:27] *** spider-mario left
[01:29] *** BenGoldberg_ left
[01:52] *** pmurias left
[02:15] *** Herby_ joined
[02:15] <Herby_> Evening, everyone!

[02:15] <Herby_> o/

[02:29] <skids> o/

[02:30] *** ryan_ joined
[02:33] *** molaf_ joined
[02:36] *** molaf left
[02:39] <dalek> Heuristic branch merge: pushed 317 commits to doc/rb-nutshell by awwaiid

[02:45] *** SCHAAP137 left
[02:52] *** MadcapJake joined
[02:54] <Herby_> anyone find any perl 6 FOSDEM talks?

[02:54] <Herby_> online

[02:58] <AlexDaniel> Herby_: 2015 or 2016 ones?

[02:59] <Herby_> 2016

[03:03] <AlexDaniel> not yet I think

[03:08] *** raiph left
[03:11] *** kid51_ joined
[03:13] *** kid51 left
[03:13] *** kid51_ is now known as kid51

[03:13] *** kurahaupo joined
[03:15] <dalek> roast/hyper-problems: 3454a5f | (Aleks-Daniel Jakimenko-Aleksejev)++ | S07-hyperrace/hyper.t:

[03:15] <dalek> roast/hyper-problems: Add test for RT #127099

[03:15] <dalek> roast/hyper-problems: 

[03:15] <dalek> roast/hyper-problems: Processing 1000 values should be enough, but there is no guarantee that it

[03:15] <dalek> roast/hyper-problems: will never flap. I don't think that there is any better way to test it, so

[03:15] <dalek> roast/hyper-problems: it is probably good enough.

[03:15] <dalek> roast/hyper-problems: review: https://github.com/perl6/roast/commit/3454a5fa3a

[03:15] <dalek> roast/hyper-problems: 148614c | (Aleks-Daniel Jakimenko-Aleksejev)++ | S07-hyperrace/hyper.t:

[03:15] <dalek> roast/hyper-problems: Add test for RT #127452

[03:15] <dalek> roast/hyper-problems: 

[03:15] <dalek> roast/hyper-problems: Existing tests focus on hyper + grep (which fails consistently) while

[03:15] <dalek> roast/hyper-problems: this test runs hyper + map which is supposed to work, but surprisingly

[03:15] <dalek> roast/hyper-problems: it fails *sometimes*.

[03:15] <dalek> roast/hyper-problems: 

[03:15] <dalek> roast/hyper-problems: Again, this test is not guaranteed not to flap, but it is probably

[03:15] <dalek> roast/hyper-problems: all we can do in this case.

[03:15] <dalek> roast/hyper-problems: review: https://github.com/perl6/roast/commit/148614c40e

[03:16] <AlexDaniel> woah

[03:16] *** raiph joined
[03:18] *** kurahaupo left
[03:24] *** maybekoo5 left
[03:25] <AlexDaniel> ah geez, there's https://github.com/perl6/roast/pull/99 …

[03:27] *** noganex_ joined
[03:30] *** noganex left
[03:34] *** MadcapJake left
[03:52] *** yqt left
[04:07] *** kid51 left
[04:16] *** BenGoldberg_ joined
[04:16] *** BenGoldberg_ is now known as BenGoldberg

[04:17] *** kaare_ joined
[04:18] *** Ben_Goldberg left
[04:28] *** sevvie joined
[04:31] *** Eddward joined
[04:37] <Eddward> Are there known issues with t/spec/integration/advent2013-day14.t hanging?

[04:43] *** Herby_ left
[04:46] *** Eddward left
[04:54] *** mr-fooba_ joined
[04:56] *** mr-foobar left
[04:58] *** mr-foobar joined
[04:58] *** mr-fooba_ left
[05:02] *** BenGoldberg left
[05:05] *** BenGoldberg joined
[05:06] *** Sgeo left
[05:21] *** raiph left
[05:32] *** mr-foobar left
[05:33] *** xinming left
[05:34] *** xinming joined
[05:34] *** khw left
[05:39] *** Sgeo joined
[05:44] *** ryan_ left
[05:46] *** Cabanossi left
[05:48] *** Cabanossi joined
[05:52] *** Sgeo left
[05:52] *** MadcapJake joined
[05:53] <MadcapJake> I had a few perl6 related crashes today, like my whole system locked up.

[05:53] <yoleaux> 6 Feb 2016 21:54Z <AlexDaniel> MadcapJake: I've added your ideas (and some other stuff) to https://gist.github.com/AlexDaniel/c89bd2786f9b63f31e4c. Thanks!

[05:54] *** Sgeo joined
[05:55] <MadcapJake> .tell AlexDaniel sweet! The new additions are awesome,  I really like the hyper-operators and spaceship

[05:55] <yoleaux> MadcapJake: I'll pass your message to AlexDaniel.

[05:56] <AlexDaniel> .

[05:56] <yoleaux> 05:55Z <MadcapJake> AlexDaniel: sweet! The new additions are awesome,  I really like the hyper-operators and spaceship

[05:56] <MadcapJake> So wrt crashes: I was not getting any errors, everything would just slow down until it finally halted my system completely.  This was when running a «perl6 -Ilib -c file.pm6» check

[05:57] <MadcapJake> I figured out the cause: circular use statements; I think there should be some guard to prevent this from happening.

[06:00] <MadcapJake> Especially in a `-c` run where it's supposed to be checking things :P

[06:07] *** Sgeo left
[06:07] *** Actualeyes joined
[06:10] *** Sgeo joined
[06:12] *** Sgeo left
[06:17] *** Sgeo joined
[06:22] *** CIAvash joined
[06:27] *** Sgeo left
[06:29] *** Sgeo joined
[06:48] *** protium joined
[06:54] *** domidumont joined
[06:59] *** domidumont left
[07:00] *** domidumont joined
[07:16] *** ilbot3 joined
[07:17] *** BenGoldberg left
[07:27] *** kaare_ left
[07:27] *** kaare_ joined
[07:31] *** skids left
[07:35] <moritz> \o

[07:38] <masak> o/

[07:46] <AlexDaniel> I see that there were no commits to roast for 21 days. Is there any special reason for that or is it just that nobody contributed any tests?

[08:01] *** darutoko joined
[08:09] *** AlexDaniel left
[08:12] <masak> m: class A::B {}; class C { has A::B $.ab = A::B.new }; say "alive"

[08:12] <camelia> rakudo-moar 58d339: OUTPUT«alive␤»

[08:13] <masak> m: class A::B {}; class C { has A::B $.ab .= new }

[08:13] <camelia> rakudo-moar 58d339: OUTPUT«===SORRY!===␤Could not locate compile-time value for symbol A::B␤»

[08:13] <masak> (RT #126975)

[08:14] *** musiKk joined
[08:16] *** maybekoo5 joined
[08:17] *** xinming_ joined
[08:21] *** xinming left
[08:29] *** musiKk left
[08:33] *** protium left
[08:36] *** firstdayonthejob joined
[08:39] *** Gentoolman joined
[08:40] <Gentoolman> Is MoarVM realization better then ParrotVM?

[08:48] *** perl6newbee joined
[08:50] <perl6newbee> hi all

[08:50] *** NZKindest joined
[08:52] <Gentoolman> Hi

[08:52] <NZKindest> Hello fellow traveller

[08:52] <perl6newbee> hehe

[08:52] <Gentoolman> Which VM is better? Parrot or Moar?

[08:53] <perl6newbee> afaik is the spec support in MOar better

[08:53] *** rindolf joined
[08:53] <bartolin> MoarVM. support for Parrot has been suspended about a year ago

[08:54] <bartolin> and it seems unlikely that Parrot will be resurrected in the future

[08:54] <Gentoolman> For perl6 on MoarVM i need to install Rakudo perl and then MoarVM and configure rakudo perl tp use MoarVM ?

[08:56] <bartolin> Gentoolman: best thing would probably be to use Rakudo Star (which includes MoarVM and some modules) http://rakudo.org/how-to-get-rakudo/

[08:57] <masak> Gentoolman: hi. maybe you're a speaker of a slavic language? usually in English, it's "implementation", not "realization".

[08:57] <Gentoolman> masak: yes, i am russian.

[08:57] <masak> \o/

[08:58] <masak> Gentoolman: I speak Esperanto, where the word is "realigo", so I'm aware of the false cognate ;)

[08:58] <Gentoolman> masak: Esperanto is the language of the future. :)

[08:58] <masak> ...and always will be :P

[09:00] *** rindolf left
[09:00] <Gentoolman> It seems i found rakudo port in Portage. Thanks.

[09:01] <masak> just watch out for package managers sometimes carrying vary old versions

[09:01] <masak> very*

[09:01] <masak> (but yes, it'll vary, too) :)

[09:03] <perl6newbee> masak: you surely know how can I adopt the IO::Prompt repo in mu/misc/shelter?

[09:04] <masak> perl6newbee: hm. good question.

[09:05] <masak> surely there must be instructions somewhere?

[09:05] <perl6newbee> In the shelter Readme stands Aks us on IRC on how to adopt a module :-)

[09:06] <masak> a good start though seems to be to clone the git repo, set up your own github repo for the module, and then aim for excellence with such intensity that people just accept your version as authoritative

[09:06] <masak> :)

[09:06] <perl6newbee> lol.

[09:06] <masak> perl6newbee: I suspect it is that simple, actually

[09:06] <masak> we just re-point the ecosystem files to your repo after some time

[09:06] <perl6newbee> I already fork the repo and managent to get it running with 6.c. the tests passes

[09:07] <perl6newbee> then I will add the META6.json raw link to the perl6 ecosystem like zoffix explained in his blog post

[09:07] <perl6newbee> thx

[09:08] <masak> yes, I think that's it

[09:08] <perl6newbee> :-)

[09:08] <masak> if you make a pull request to https://github.com/perl6/ecosystem/blob/master/META.list

[09:08] <masak> I will merge it

[09:08] <perl6newbee> w00t

[09:08] <masak> or if you have write access already, just go ahead and make the commit yerself

[09:09] <perl6newbee> unfortunately, I am still a newbie no change to get a perl6 guru like you are

[09:10] <perl6newbee> I will see what happens with IO::Promp in the wild.

[09:12] <Gentoolman> Hi guys. I found that last perl6 from takudo has build problems

[09:12] <Gentoolman> :(

[09:13] <perl6newbee> http://rakudo.org/downloads/star/rakudo-star-2016.01.tar.gz did a gread job for me

[09:14] <perl6newbee> I mean, extract the tar write "perl Configure.pl --gen-moar" and make a make; make install; did the job

[09:15] <Gentoolman> No, guy, not Gentoo-way. :)

[09:15] <perl6newbee> haha

[09:15] <Gentoolman> If there some sources i need to write a ebuild

[09:15] <perl6newbee> sometimes, you have to take a different way ^^

[09:16] <Gentoolman> Install sources with manual compiling instead automatic ports-like package manager is strange.

[09:17] <perl6newbee> maybe. you can wait until the gentoo package maintainer updated the package or you do itself

[09:17] *** Laurent_R joined
[09:20] <perl6newbee> btw IMHO installing software with compiling is the linux way. Package manager is just a wrapper about it

[09:20] <Gentoolman> perl6newbee: it seems the problem in sources, not i  package. Last update was at 3 feb

[09:21] <Gentoolman> perl6newbee: portage like ports in FreeBSD. Portage in gentoo compile everything from build scripts -- ebuilds. It is awesome

[09:22] *** RabidGravy joined
[09:22] *** abaugher_ left
[09:23] *** abaugher_ joined
[09:24] <perl6newbee> francly, I never installed Gentoo. I only know Fedora and Arch

[09:26] <Gentoolman> perl6newbee: gentoo is like "arch where yaourt is only way to install packages"

[09:27] <perl6newbee> Gentoolman: I installed Perl6 with the sources without problems on Fedora as well as Arch :-)

[09:27] <Gentoolman> perl6newbee: Dark side u r going to.

[09:28] <perl6newbee> Gentoolman: Dark Side has cookies :-)

[09:30] *** Gentoolman left
[09:38] <frederico> hello, I'm learning some perl6 , I would like to call a sub by it full namespace name, 'Foo::bar::sub()' 

[09:38] <frederico> but my small example is not working

[09:38] <frederico> http://pastebin.com/Du5DUJQ2

[09:40] <perl6newbee> You use a '.'. That only works if you have a object of a class I think. So, FullName::qualy; should do the trick

[09:41] *** cognominal joined
[09:42] <frederico> perl6newbee: with FullName::Qualy the error moves to Could not find symbol '&qualy'

[09:43] <perl6newbee> hmm

[09:44] *** dolmen joined
[09:50] <perl6newbee> frederico: sorry. With my limitied knowledge I cannot help you :-(

[09:51] <frederico> perl6newbee: :), fine. 

[09:52] *** NZKindest left
[09:54] *** musiKk joined
[09:55] <RabidGravy> frederico, by default subs are defined with 'my' scope. That is to say you can't see them from outside the scope they are defined in. (In this case your Fullname module)

[09:55] <perl6newbee> off course: with our sub query it works

[09:56] <RabidGravy> to be able to access them fully qualified you must define them as 'our' scoped:

[09:56] <perl6newbee> facebalm

[09:56] * flussence drops a friendly reminder that a Gentoo overlay for Rakudo already exists (https://gitlab.com/flussence/perl6-overlay)

[09:56] <RabidGravy> m: module Foo { our sub foo() { say "foo" } }; Foo::foo()

[09:56] <camelia> rakudo-moar 58d339: OUTPUT«foo␤»

[09:56] <frederico> cool, our sub qualy worked

[09:56] <RabidGravy> m: module Foo { sub foo() { say "foo" } }; Foo::foo()

[09:56] <camelia> rakudo-moar 58d339: OUTPUT«Could not find symbol '&foo'␤  in block <unit> at /tmp/3MAntiSmId line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/3MAntiSmId line 1␤␤»

[09:58] <RabidGravy> you can however "export" the 'my' subs with "is export" so they become symbols in the outer scope

[09:58] <perl6newbee> RabidGravy: Why does a "sub foo() is exported" does not change the error.

[09:58] <RabidGravy> m: module Foo { sub foo() is export { say "foo" } }; import foo;  foo()

[09:58] <camelia> rakudo-moar 58d339: OUTPUT«5===SORRY!5=== Error while compiling /tmp/43UCK4Mczj␤Could not find module foo to import symbols from␤at /tmp/43UCK4Mczj:1␤------> 3() is export { say "foo" } }; import foo7⏏5;  foo()␤»

[09:58] <RabidGravy> m: module Foo { sub foo() is export { say "foo" } }; import Foo;  foo()

[09:58] <camelia> rakudo-moar 58d339: OUTPUT«foo␤»

[09:59] <RabidGravy> perl6newbee, It's still a "my scoped" sub, it gets added to the outer scope with the unqualified name as it doesn't have a qualified name in that sense

[10:00] *** JRaspass joined
[10:00] <perl6newbee> the difference is you used "import Foo". with "use Foo;" it does not work.

[10:00] <perl6newbee> That was my problem

[10:01] <RabidGravy> the import Foo there is because it's "in the same file", of course if it was in a separate file you would use "use" (which implies an import)

[10:02] <perl6newbee> cool. learned something new

[10:05] <perl6newbee> RabidGravy: Foo::foo() does only works when foo is our, it does not work if foo is in the my-scope with the exported trait, right?

[10:05] <RabidGravy> yes

[10:05] <perl6newbee> thx

[10:06] <RabidGravy> other methods of exporting are available

[10:06] *** perlawhirl joined
[10:07] <perl6newbee> :-) I am happy to have understand this one at the moment ggg

[10:07] <perl6newbee> but maybe you can help me with another problem.

[10:07] <RabidGravy> at it's simplest what happens when the compiler sees the "is export" it saves the name of the thing and the thing itself (in this case the subroutine) and then when you do "import Foo" it gets all those saved thingies and inserts them in the current scope

[10:09] <perl6newbee> sounds easy and familiar. Read it already, but never need this information

[10:11] *** perlawhirl left
[10:11] *** abraxxa joined
[10:15] <perl6newbee> anyway. I have problems to debug a script that imports a class from another script. The class in question is "unit class IO::Prompt". Start up the debbuger with a test.p6 script the IO::Prompt works but the code in the seperated file is never seen. If I create a bp with bp add Prompt.pm:13, the debugger says unknown file. I tried several strings: /lib/IO/Prompt.pm:14 or IO::Prompt:14 nothing worked

[10:16] <perl6newbee> What is the problem here? or where is the problem

[10:21] *** perlawhirl joined
[10:22] <RabidGravy> this is a problem with the debugger, I'm guessing here that it hasn't kept up with the way that installed modules are stored.

[10:23] <perl6newbee> Is there a walkthrough?

[10:23] <perl6newbee> walkaround

[10:23] <RabidGravy> of?

[10:27] *** perlawhirl left
[10:33] *** wamba joined
[10:38] *** virtualsue joined
[10:44] <perl6newbee> of the problem with the debugger

[10:49] <abraxxa> is there a message bot around?

[10:49] <Hotkeys> m: my &f = {sum(@_)/2 ∈ @_}; say f([5,3,2])

[10:49] <camelia> rakudo-moar 58d339: OUTPUT«False␤»

[10:49] <Hotkeys> m: my &f = {(sum(@_)/2) ∈ @_}; say f([5,3,2])

[10:49] <camelia> rakudo-moar 58d339: OUTPUT«False␤»

[10:50] <Hotkeys> m: say sum([5,3,2])/2

[10:50] <camelia> rakudo-moar 58d339: OUTPUT«5␤»

[10:50] <Hotkeys> m: say 5 (elem) [5,3,2]

[10:50] <camelia> rakudo-moar 58d339: OUTPUT«True␤»

[10:51] <Hotkeys> m: my &f = {sum(@_)/2 (elem) @_}; say f([5,3,2])

[10:51] <camelia> rakudo-moar 58d339: OUTPUT«False␤»

[10:51] <Hotkeys> Why isn't this working

[10:51] <Hotkeys> Am I doing something dumb?

[10:51] <RabidGravy> abraxxa, yeah yoleaux is alive and kicking

[10:52] <RabidGravy> perl6newbee, I don't think so

[10:52] <abraxxa> RabidGravy: found the syntax in my irc logs, thanks

[10:53] <Hotkeys> m: my &f = {sum(@_)/2 ∈ @_}; say f((5,3,2))

[10:53] <camelia> rakudo-moar 58d339: OUTPUT«False␤»

[10:54] <RabidGravy> HotKeys, not quite sure what you're trying to do

[10:54] <Hotkeys> RabidGravy: trying to figure out why the function doesn't work but outside the function this works

[10:54] <Hotkeys> Eg

[10:55] <RabidGravy> er quite, but what is the function trying to do

[10:55] <Hotkeys> m: say sum([5,3,2])/2 (elem) [5,3,2]

[10:55] <camelia> rakudo-moar 58d339: OUTPUT«False␤»

[10:55] <Hotkeys> Well theb

[10:55] *** espadrine joined
[10:55] <Hotkeys> It's for a golf problem

[10:56] <Hotkeys> Checks if the difference any two of the numbers in an array of 3 ints results in the third

[10:56] <Hotkeys> eg in that one 5 - 3 = 2

[10:56] <Hotkeys> So it is true

[10:57] *** _PiL_ left
[10:57] <abraxxa> .tell Skarsnik I've rebased my DBIish pull-request, the Travis setup seems to work now (finds the dependent modules), the fails are the same as on my dev box and subject to API discussion

[10:57] <yoleaux> abraxxa: I'll pass your message to Skarsnik.

[10:57] <Hotkeys> m: my &f = {say sum(@_)/2; say @_; sum(@_)/2 ∈ @_}; say f([5,3,2])

[10:57] <camelia> rakudo-moar 58d339: OUTPUT«5␤[5 3 2]␤False␤»

[10:58] <Hotkeys> Why isn't this resulting as true?

[10:58] <Hotkeys> It seems like it should

[10:59] <Hotkeys> m: say {@_ ∋ sum(@_)/2}([5,3,2])

[10:59] <camelia> rakudo-moar 58d339: OUTPUT«False␤»

[10:59] <masak> m: my &f = {say sum(@_)/2; say @_; (sum(@_)/2) ∈ @_}; say f([5,3,2])

[10:59] <camelia> rakudo-moar 58d339: OUTPUT«5␤[5 3 2]␤False␤»

[11:00] <abraxxa> have a nice Sunday guys!

[11:00] *** musiKk left
[11:01] <Hotkeys> m: say {any(@_) == sum(@_)/2}([5,3,2])

[11:01] <camelia> rakudo-moar 58d339: OUTPUT«any(True, False, False)␤»

[11:01] <Hotkeys> Hmm

[11:02] <Hotkeys> So why isn't the element op working

[11:02] *** abraxxa left
[11:03] *** TEttinger left
[11:06] *** maybekoo5 left
[11:06] *** rindolf joined
[11:09] <Hotkeys> Figured it out

[11:09] <Hotkeys> Division returns a rat 

[11:10] <Hotkeys> That list is integers 

[11:10] <Hotkeys> I'm a bit disappointed (elem) doesn't let you do that

[11:11] *** ely-se joined
[11:15] <stmuk_> what terminal do the kewl kidz instead of cmd.exe?

[11:15] <stmuk_> ^ use

[11:17] <flussence> .oO( probably one of those Mac ones that emulate CRT artifacts and make clicky sounds as you type... )

[11:17] <Hotkeys> I use powershell

[11:17] <Hotkeys> It's moderately better than cmd

[11:18] <Hotkeys> And built in

[11:18] <stmuk_> I'll try it 

[11:18] <ely-se> I use Sakura on Gentoo

[11:18] <ely-se> On Windows I use ConsoleZ

[11:19] <ely-se> with PowerShell as shell

[11:20] <flussence> I'm using `st` because it supports unicode and doesn't consume web-browser amounts of RAM, though I find its pedantic adherence to standards a little braindamaged (have to type ^D for delete)

[11:21] <flussence> not a windows thing, though, so ignore me :)

[11:22] <Hotkeys> When I run linoox I usually run urxvt

[11:23] <flussence> the problem with urxvt is it advertises itself as unicode, but is really ucs-2

[11:28] *** dolmen left
[11:35] <RabidGravy> ucs-2 is almost ubiquitous on windows

[11:35] *** pmurias joined
[11:42] *** kjs_ joined
[11:48] <El_Che> when on windows I use the cygwin shell. It's a fork of putty

[11:48] <El_Che> utf8, copy paste, resizable fonts of the fly

[11:48] <El_Che> you know, like linux well for ever :)

[11:49] <El_Che> (it's mintty)

[11:49] <dalek> ecosystem/jantz-patch-1: 4069725 | jantz++ | META.list:

[11:49] <dalek> ecosystem/jantz-patch-1: hoelzro has switched to meta6.info

[11:49] <dalek> ecosystem/jantz-patch-1: 

[11:49] <dalek> ecosystem/jantz-patch-1: Fix Task::Star build

[11:49] <dalek> ecosystem/jantz-patch-1: https://github.com/hoelzro/p6-linenoise/commit/46f9534b1568e68a2a077ee80713914738b16e28

[11:49] <dalek> ecosystem/jantz-patch-1: review: https://github.com/perl6/ecosystem/commit/4069725434

[11:51] *** RabidGravy left
[11:52] *** virtualsue left
[11:53] *** maybekoo5 joined
[11:58] <dalek> ecosystem: 4069725 | jantz++ | META.list:

[11:58] <dalek> ecosystem: hoelzro has switched to meta6.info

[11:58] <dalek> ecosystem: 

[11:58] <dalek> ecosystem: Fix Task::Star build

[11:58] <dalek> ecosystem: https://github.com/hoelzro/p6-linenoise/commit/46f9534b1568e68a2a077ee80713914738b16e28

[11:58] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/4069725434

[11:58] <dalek> ecosystem: 31976cb | niner++ | META.list:

[11:58] <dalek> ecosystem: Merge pull request #144 from perl6/jantz-patch-1

[11:58] <dalek> ecosystem: 

[11:58] <dalek> ecosystem: hoelzro has switched linenoise to meta6.info

[11:58] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/31976cbdc0

[12:00] <flussence> .oO( maybe the commit bot shouldn't mention the same sha1 twice in a row )

[12:03] <dalek> rakudo/nom: 06ed9cf | lizmat++ | src/core/ (3 files):

[12:03] <dalek> rakudo/nom: Better fix for RT #126888

[12:03] <dalek> rakudo/nom: 

[12:03] <dalek> rakudo/nom: This will actually allow binding into a list if the element is a container.

[12:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/06ed9cf863

[12:08] <timotimo> oh, interesting

[12:11] <El_Che> what is it nowadays: META.info, META6.json, meta6.info?

[12:12] <lizmat> forward looking, I think META6.json is the one

[12:14] *** rindolf left
[12:17] *** rindolf joined
[12:21] *** Cabanossi left
[12:22] <dalek> perl6.org: a43a96f | (Steve Mynott)++ | source/downloads/index.html:

[12:22] <dalek> perl6.org: how to fix p6doc on windows corrected to follow tested process on 32 bit Windows 10 anyway

[12:22] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/a43a96ff4d

[12:22] <stmuk_> virtualbox++

[12:24] <dalek> ecosystem: 8584fda | okaoka++ | META.list:

[12:24] <dalek> ecosystem: Add Algorithm::Treap to ecosystem

[12:24] <dalek> ecosystem: 

[12:24] <dalek> ecosystem: See https://github.com/okaoka/p6-Algorithm-Treap

[12:24] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/8584fda14f

[12:24] <dalek> ecosystem: 4e294cd | (Shoichi Kaji)++ | META.list:

[12:24] <dalek> ecosystem: Merge pull request #143 from okaoka/add-treap

[12:24] <dalek> ecosystem: 

[12:24] <dalek> ecosystem: Add Algorithm::Treap to ecosystem

[12:24] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/4e294cd279

[12:28] <dalek> rakudo/nom: 8e967c8 | lizmat++ | src/core/Hash.pm:

[12:28] <dalek> rakudo/nom: Make sure DELETE-KEY(:SINK) doesn't bomb on empty

[12:28] <dalek> rakudo/nom: 

[12:28] <dalek> rakudo/nom: Even though this DELETE-KEY candidate isn't used yet, it had a flaw

[12:28] <dalek> rakudo/nom: when being called on a Hash that didn't have any storage allocated yet

[12:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8e967c8331

[12:30] *** rindolf left
[12:30] *** rpburkholder joined
[12:35] <dalek> perl6.org: 7d8ed09 | (Steve Mynott)++ | source/downloads/index.html:

[12:35] <dalek> perl6.org: close tag

[12:35] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/7d8ed093a5

[12:35] *** mr-foobar joined
[12:41] *** Cabanossi joined
[12:52] *** atta_ is now known as atta

[12:55] *** loic joined
[12:56] *** RabidGravy joined
[12:57] <RabidGravy> back again

[13:01] <dalek> rakudo/nom: 62b5308 | lizmat++ | src/core/Hash.pm:

[13:01] <dalek> rakudo/nom: Make Hash[Type].AT-KEY 25% faster

[13:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/62b5308e1b

[13:02] <dalek> Heuristic branch merge: pushed 103 commits to DBIish/oracle by jonathanstowe

[13:06] *** dolmen joined
[13:06] *** perlawhirl joined
[13:13] *** Skarsnik joined
[13:15] <Skarsnik> Hello

[13:15] <yoleaux> 10:57Z <abraxxa> Skarsnik: I've rebased my DBIish pull-request, the Travis setup seems to work now (finds the dependent modules), the fails are the same as on my dev box and subject to API discussion

[13:17] *** neilb joined
[13:18] <dalek> Inline-Perl5: 6fb0c35 | (Stefan Seifert)++ | / (3 files):

[13:18] <dalek> Inline-Perl5: Pass real code references to Perl 5 code

[13:18] <dalek> Inline-Perl5: 

[13:18] <dalek> Inline-Perl5: When passing Callables to Perl 5 code, we turned them into Perl6::Callable

[13:18] <dalek> Inline-Perl5: objects that overrode call dereferencing. While this allowed for calling

[13:18] <dalek> Inline-Perl5: the referenced code, the passed references still pointed to objects instead

[13:18] <dalek> Inline-Perl5: of code. Perl 5 code checking explicitly for CODE references would fail

[13:18] <dalek> Inline-Perl5: even though just calling it anyway would have worked.

[13:18] <dalek> Inline-Perl5: 

[13:18] <dalek> Inline-Perl5: We now create a new wrapper sub for wrapped Callables that are

[13:18] <dalek> Inline-Perl5: indistinguishable from ordinary Perl 5 code references.

[13:18] <dalek> Inline-Perl5: 

[13:18] <dalek> Inline-Perl5: Fixes Perl RT #127454

[13:18] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/6fb0c35bb0

[13:18] <dalek> Inline-Perl5: b01a3b3 | (Stefan Seifert)++ | META.info:

[13:18] <dalek> Inline-Perl5: Version 0.4

[13:18] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/b01a3b379a

[13:20] *** kid51 joined
[13:22] *** loic left
[13:23] <nine> I think this eliminated the last gotcha from my Leapfrogging the Bootstrap talk at last year's FOSDEM :)

[13:23] <ab5tract> nine++

[13:24] <ab5tract> thank you for all your work, man. Inline::Perl5 and otherwise :D

[13:24] <nine> It's a pleasure to be a part of this community :)

[13:24] *** Zero_Dogg left
[13:25] <ab5tract> i hear that :)

[13:25] *** Zero_Dogg joined
[13:26] <dalek> rakudo/nom: 8588eeb | lizmat++ | src/core/Hash.pm:

[13:26] <dalek> rakudo/nom: Don't create a named intermediary

[13:26] <dalek> rakudo/nom: 

[13:26] <dalek> rakudo/nom: Not sure whether this will speed up things, but at least it won't leak

[13:26] <dalek> rakudo/nom: a nonsense name in case of errors

[13:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8588eeb846

[13:30] <dalek> DBIish/oracle: 2202e81 | RabidGravy++ | t/35-pg-common.t:

[13:30] <dalek> DBIish/oracle: Just skip the test if PGDATABASE not set

[13:30] <dalek> DBIish/oracle: review: https://github.com/perl6/DBIish/commit/2202e81943

[13:30] <dalek> DBIish/oracle: c3df49b | RabidGravy++ | .gitignore:

[13:30] <dalek> DBIish/oracle: Add .precomp to .gitignore

[13:30] <dalek> DBIish/oracle: review: https://github.com/perl6/DBIish/commit/c3df49bae3

[13:35] <lizmat> m: my $m = Map.new("a",42); $m.Hash<b> = 666; dd $m   # this feels wrong

[13:35] <camelia> rakudo-moar 8588ee: OUTPUT«Map $m = Map.new((:a(42),:b(666)))␤»

[13:37] <lizmat> as a Map is considered to be immutable, right ?

[13:37] <lizmat> well, like a List is immutable

[13:38] *** kid511 joined
[13:40] <ab5tract> lizmat: that's how I understood them, though the GHR (GMR?) went past with considerably less stress than the GLR

[13:41] *** petercommand left
[13:41] *** petercommand joined
[13:41] <timotimo> great hash refactor? i think it was actually called GMR

[13:42] <nine> Yes, it's GMR as the List refactor was also named after the immutable base type

[13:42] * masak .oO( at some point, we started calling all refactors "Great", even the small ones )

[13:43] <nine> masak: when I started out on the gmr branch, I thought it would be much more work than it actually was

[13:43] <ab5tract> assignment to a coerced object could maybe be considered a 'useless use in sink' case

[13:44] <masak> nine: well, that's good news in retrospect

[13:44] <ab5tract> but as I understand it the result of the .Hash should be another object entirely, not the same container with a different object in it

[13:44] <lizmat> yeah, working on a fix

[13:44] <ab5tract> but maybe I've misunderstood that aspect of coercion

[13:44] *** musiKk joined
[13:45] <lizmat> well, a Hash is mutable, so by definition, it should not return the same immutable Map

[13:45] *** kid51 left
[13:46] <ab5tract> lizmat: so are you saying the output should be 'Hash $m = Hash.new((:a(42),:b(666)))' ?

[13:48] <lizmat> $ 6 'my $m = Map.new("a",42); my $h = $m.Hash; $h<b> = 666; dd $m, $h'

[13:48] <lizmat> Map $m = Map.new((:a(42)))

[13:48] <lizmat> Hash $h = ${:a(42), :b(666)}

[13:48] <lizmat> after I push my fix

[13:48] <lizmat> m: my $m = Map.new("a",42); my $h = $m.Hash; $h<b> = 666; dd $m, $h   # now

[13:48] <camelia> rakudo-moar 8588ee: OUTPUT«Map $m = Map.new((:a(42),:b(666)))␤Hash $h = ${:a(42), :b(666)}␤»

[13:49] *** mwheat joined
[13:50] <ab5tract> lizmat: perfecto :)

[13:50] <lizmat> hmmm,,, alas, no:

[13:50] <lizmat> $ 6 'my $m = Map.new(my $ = "a",42); my $h = $m.Hash; $h<a> = 666; dd $m, $h'

[13:50] <lizmat> Map $m = Map.new((:a(666)))

[13:50] <lizmat> Hash $h = ${:a(666)}

[13:50] <lizmat> nqp::clone is too shallow  :-(

[13:51] <timotimo> ugh :<

[13:52] <jnthn> Well, no, nqp::clone is defined to clone precisely the thing you call it on :)

[13:52] <lizmat> yeah, I guess

[13:53] <lizmat> ok, looking at that again after some cycling&

[13:53] <moritz> does IO::Notification work on the JVM?

[13:55] <ab5tract> moritz: interesting question. is there any documentation on what's broken/divergent from moarvm? or just the results from roast?

[13:56] <timotimo> moritz: i think it does, but it's probably not equivalent in behaviour

[13:56] <timotimo> or perhaps nobody bothered to implement it yet?

[13:59] *** BenGoldberg joined
[14:01] <jnthn> throw new UnsupportedOperationException("watchfile is not yet implemented.");

[14:02] <jnthn> So, no :(

[14:05] <timotimo> damn.

[14:06] *** rindolf joined
[14:08] *** BenGoldberg left
[14:10] *** musiKk left
[14:11] *** perlawhirl left
[14:14] *** neilb left
[14:34] *** araujo left
[14:35] *** araujo joined
[14:37] *** araujo left
[14:37] *** araujo joined
[14:44] *** kjs_ left
[14:51] *** kurahaupo joined
[14:53] *** AlexDaniel joined
[14:54] *** dolmen left
[14:59] *** lokien_ joined
[15:01] <timotimo> hm.

[15:01] <timotimo> http://friedo.com/blog/2016/02/exploring-perl-6-signatures-part-2 - always using the variable name itself in the where clause rather than $_; that seems unidiomatic to me

[15:03] *** BenGoldberg joined
[15:07] <gfldex> m: sub is-positive($n){ $n > 0 }; sub f($x where .&is-positive){ say 'OK' }; f 1;

[15:07] <camelia> rakudo-moar 8588ee: OUTPUT«OK␤»

[15:08] <gfldex> i don't need no stinking variable while nitpicking :->

[15:08] <timotimo> DrForr: in your article "from regular expressions to grammars", you seem to claim that the index method returns -1 on a failed match

[15:08] *** lustslut joined
[15:08] <timotimo> m: sub is-positive($n){ $n > 0 }; sub f($x where &is-positive){ say 'OK' }; f 1;

[15:08] <camelia> rakudo-moar 8588ee: OUTPUT«OK␤»

[15:08] *** lustslut left
[15:09] *** sail0r joined
[15:09] <gfldex> m: sub is-positive($n){ $n > 0 }; sub f($x where * > 0){ say 'OK' }; f 1;

[15:09] <camelia> rakudo-moar 8588ee: OUTPUT«OK␤»

[15:09] <gfldex> is-positive is not the best example possible

[15:10] <timotimo> that's right

[15:11] *** espadrine left
[15:11] <gfldex> "Every Perl 6 subroutine can also specify its own return type as part of the signature." is plain wrong. There is a big difference between a type constraint and a type.

[15:12] <timotimo> you mean if you supply Cool and return Str, that's just a type constraint on what it returns, not a return type?

[15:13] <AlexDaniel> b2gills: hi! Do you know why your hyper tests are not merged yet? I reviewed your PR and it looks great, but I thought that I'd ask you before merging it in case you know something

[15:14] <timotimo> fosdem's status.txt recently went up to 149, but still none in the 1124 room

[15:14] <timotimo> or was it 2214 that we're interested in?

[15:14] <AlexDaniel> 2214

[15:14] <timotimo> anyway, will be AFK for a bit

[15:14] <timotimo> (none in 2214 either)

[15:15] *** Ben_Goldberg joined
[15:17] *** BenGoldberg left
[15:19] *** musiKk joined
[15:24] <AlexDaniel> j: (-1)⁴⁵⁵³⁵³⁵³⁴⁵³⁶⁴⁵³⁵³⁴⁵

[15:24] <camelia> rakudo-jvm f99bdb: OUTPUT«5===SORRY!5=== Error while compiling /tmp/hS9Fz7O6KA␤Bogus postfix␤at /tmp/hS9Fz7O6KA:1␤------> 3(-1)7⏏5⁴⁵⁵³⁵³⁵³⁴⁵³⁶⁴⁵³⁵³⁴⁵␤    expecting any of:␤        infix␤        infix stopper␤        statement e…»

[15:24] <AlexDaniel> j: say (-1)⁴⁵⁵³⁵³⁵³⁴⁵³⁶⁴⁵³⁵³⁴⁵

[15:24] <camelia> rakudo-jvm f99bdb: OUTPUT«5===SORRY!5=== Error while compiling /tmp/KWfipmXbVa␤Bogus postfix␤at /tmp/KWfipmXbVa:1␤------> 3say (-1)7⏏5⁴⁵⁵³⁵³⁵³⁴⁵³⁶⁴⁵³⁵³⁴⁵␤    expecting any of:␤        infix␤        infix stopper␤        postfix…»

[15:25] <AlexDaniel> j: 2²

[15:25] <camelia> rakudo-jvm f99bdb: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Z9yl36IqoQ␤Bogus postfix␤at /tmp/Z9yl36IqoQ:1␤------> 0327⏏5²␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        statement…»

[15:25] <AlexDaniel> how old is that?

[15:26] <AlexDaniel> hm that's pretty recent

[15:28] <jnthn> m: 2²

[15:28] <camelia> rakudo-moar 8588ee: ( no output )

[15:28] <jnthn> Is it a regression or did it ever work on JVM?

[15:28] <AlexDaniel> I don't know actually

[15:29] <bartolin> locally it works fine (build from last night)

[15:29] *** maybekoo5 left
[15:29] <bartolin> ./perl6-j -e 'say 2²'

[15:29] <bartolin> 4

[15:30] <bartolin> (this is on FreeBSD, 2015.12-262-g58d3398)

[15:30] <AlexDaniel> j: say π

[15:30] <camelia> rakudo-jvm f99bdb: OUTPUT«3.141592653589793␤»

[15:33] <AlexDaniel> j: say (-1)**4553535345364535354

[15:33] <camelia> rakudo-jvm f99bdb: OUTPUT«1␤»

[15:34] <AlexDaniel> m: say (-1)**4553535345364535354

[15:34] <camelia> rakudo-moar 8588ee: OUTPUT«Numeric overflow␤  in block <unit> at /tmp/zb1dCZ2T_Z line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/zb1dCZ2T_Z line 1␤␤»

[15:34] <AlexDaniel> hm

[15:35] *** sjoshi joined
[15:35] *** perl6newbee left
[15:38] *** raiph joined
[15:45] *** s_kilk joined
[15:50] *** khw joined
[15:51] *** ELBeavers left
[15:51] *** ELBeavers joined
[15:55] *** sjoshi left
[15:57] <bartolin> ahh, the r-j camelia runs is actually rather old

[15:58] <bartolin> r: say $*PERL.compiler

[15:58] <camelia> rakudo-jvm f99bdb: OUTPUT«rakudo (2015.10.134.g.273.e.895)␤»

[15:58] <camelia> ..rakudo-moar 8588ee: OUTPUT«rakudo (2015.12.266.g.8588.eeb)␤»

[15:58] <bartolin> star-m: say 2² # same failure mode 

[15:58] <camelia> star-m 2015.09: OUTPUT«5===SORRY!5=== Error while compiling /tmp/G68OBeCWX0␤Bogus postfix␤at /tmp/G68OBeCWX0:1␤------> 3say 27⏏5² # same failure mode␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        …»

[15:59] * bartolin doesn't know how to trigger a rebuild of r-j for camelia

[16:14] *** maybekoo5 joined
[16:15] <ugexe> jvm doesnt build

[16:16] <bartolin> it does for me (donaldh++ for making it build again)

[16:16] <bartolin> first successful build was two days ago: https://github.com/usev6/perl6-roast-data/blob/master/perl6_pass_rates.csv

[16:18] <AlexDaniel> meh, I can't build it

[16:18] <AlexDaniel> “Unhandled exception: java.lang.StackOverflowError … bla-bla” 

[16:19] <bartolin> afaik this was the commit which unbusted the build: https://github.com/perl6/nqp/commit/175e8a7251

[16:19] <bartolin> hmm, I just built it 40 min ago (on linux)

[16:19] <Guest45613> in case someone wants to weigh in on this discussion of Perl 6 parallelism, etc.  https://soylentnews.org/article.pl?sid=16/02/07/0145222

[16:20] <dalek> ecosystem: 8c7b871 | (Jake Russo)++ | META.list:

[16:20] <dalek> ecosystem: Fix for recent linenoise file change

[16:20] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/8c7b871511

[16:22] <bartolin> AlexDaniel: I built it from HEAD with 'perl Configure.pl --backends=all --gen-moar --gen-nqp'

[16:22] <bartolin> (didn't 'make install', though)

[16:26] *** isBEKaml joined
[16:27] <AlexDaniel> bartolin: oh well, I hoped that rakudobrew will do it

[16:28] * bartolin hasn't tried rakudobrew, yet

[16:34] *** Ven joined
[16:35] *** espadrine joined
[16:37] <Guest45613> the how to help page https://github.com/usev6/perl6-roast-data says to open a ticket for test failures - surely that is something that could be automated?  or am i misunderstanding something

[16:37] *** AlexDaniel left
[16:39] <Guest45613> another question i had is are there docker containers available for building the latest rakudo-star?

[16:39] <RabidGravy> there is a docker image available

[16:40] <RabidGravy> https://hub.docker.com/_/rakudo-star/

[16:42] *** neilb joined
[16:42] <Guest45613> awesome - thanks RabidGravy 

[16:43] *** isBEKaml left
[16:45] <bartolin> Guest45613: (please note, that README hasn't been updated in a while); automatically generated tickets won't be that good IMHO (at least not yet). in my experience it needs at least some investigation to generate useful tickets (for eventual test failures)

[16:48] *** sufrostico joined
[16:48] <Guest45613> ok.  any suggested areas to look at with low hanging fruit?  i'm coming from a perl 5 background but am eager to get into perl 6

[16:49] <Juerd> Documentation. Finding out what's missing or wrong.

[16:50] *** abaugher_ left
[16:50] <geekosaur> we need more cross-references too

[16:50] <Guest45613> ok

[16:51] *** abaugher_ joined
[16:55] *** araujo left
[16:57] <ugexe> bartolin: sorry, it builds but it doesnt pass its tests (so camelia wouldnt update the build exposed here)

[16:58] <bartolin> ugexe: ah, that explains it. I didn't try 'make test' recently -- only 'make spectest'. thanks for clarifying

[16:59] <raiph> 'noon all

[16:59] <yoleaux> 6 Feb 2016 21:27Z <moritz> raiph: please mark rakudo-specific stuff as such in the docs, even if it's not always the case yet

[16:59] <ugexe> the travis badge is also a false positive. it shows green for the jvm matrix items, but the tests say failure

[17:02] *** Cheery left
[17:02] *** Cheery joined
[17:04] *** kjs_ joined
[17:04] *** dnmfarrell joined
[17:05] <dnmfarrell> hey folks I just raised a ticket (https://rt.perl.org/Ticket/Display.html?id=127483) but forgot to prepend "[BUG]" to it. Anyone know how I can updated it by email? I doing it from RT but I get "permission denied" 

[17:06] <bartolin> I don't think you can do that via email. I'll change the subject, mom

[17:07] <bartolin> done

[17:09] <dnmfarrell> bartolin: thank you sir!

[17:09] <bartolin> yw :-)

[17:10] *** DubiousPepper joined
[17:10] <autarch> how would I get some debugging output from Perl6::Actions - something like dd?

[17:11] <moritz> if it's a Perl 6 level object, you can nqp::say($theobject.perl())

[17:11] <autarch> cool

[17:11] <llfourn> autarch: if you mean QAST nodes .dump

[17:11] *** Ben_Goldberg left
[17:12] <autarch> I have no idea what I mean - I'm trying to figure out what's getting passed to Perl6::Actions::bare_rat_number

[17:12] <autarch> I'm guessing I want dump

[17:12] *** drrho left
[17:12] <moritz> method bare_rat_number($/) {

[17:12] <moritz> a match objet

[17:12] <llfourn> autarch: $/ is a  NQPMatch

[17:12] <llfourn> I think .dump might work on it too though?

[17:12] *** musiKk left
[17:13] <moritz> it's automatically called by the grammar token of the same name

[17:13] <autarch> moritz: that much I understand

[17:13] <llfourn> anyway what probably want is note $/.ast.dump

[17:13] *** sufrostico left
[17:13] <autarch> I'm trying to figure out why in some cases calling @($<nu>.ast)[0].compile_time_value in that method throws an error that compile_time_value doesn't exist as a method

[17:13] <llfourn> or rather $/<something>.dump

[17:14] <llfourn> note $<nu>.ast.dump # try this

[17:14] <autarch> $/.dump did work, btw

[17:14] <moritz> except that you need parens for the sub call in nqp

[17:15] <llfourn> cool

[17:15] <llfourn> ^^ yes

[17:16] <autarch> hmm, but that didn't help me figure out why it doesn't have a .compile_time_value method

[17:16] <llfourn> well what type of QAST node at [0]?

[17:16] <moritz> what type is its first child node?

[17:16] <autarch> yeah, that's my next step

[17:16] <moritz> the QAST node should dump its children too

[17:17] <moritz> if it doesn't have one, it would explain why it has no .compile_time_value method :-)

[17:17] *** FROGGS joined
[17:17] <autarch> the .dump for cases where .compile_time_value worked and where it didn't looked fundamentally the same

[17:18] <autarch> but we'll see what @($<nu>.ast) and @($<nu>.ast)[0] produce

[17:18] <autarch> I'm trying to fix https://rt.perl.org/Ticket/Display.html?id=126873

[17:19] <llfourn> (you should .dump them)

[17:19] <moritz> m: say <1480211362/1021>

[17:19] <camelia> rakudo-moar 8588ee: OUTPUT«1449766.270323␤»

[17:19] <moritz> m: say <1480211362999/1021>

[17:19] <camelia> rakudo-moar 8588ee: OUTPUT«===SORRY!===␤Cannot find method 'compile_time_value'␤»

[17:19] <moritz> m: say <148021136299/1021>

[17:19] <camelia> rakudo-moar 8588ee: OUTPUT«===SORRY!===␤Cannot find method 'compile_time_value'␤»

[17:19] <moritz> m: say <14802113629/1021>

[17:19] <camelia> rakudo-moar 8588ee: OUTPUT«===SORRY!===␤Cannot find method 'compile_time_value'␤»

[17:19] <moritz> m: say <1480211362/1021>

[17:19] <camelia> rakudo-moar 8588ee: OUTPUT«1449766.270323␤»

[17:19] <moritz> m: say 14802113629.log(2)

[17:19] <camelia> rakudo-moar 8588ee: OUTPUT«33.7850841452925␤»

[17:19] <moritz> 32 bit boundary, eh?

[17:19] *** lokien_ left
[17:21] <autarch> actually, it seems to be 2**31

[17:21] <autarch> m: say 2**31/7

[17:21] <camelia> rakudo-moar 8588ee: OUTPUT«306783378.285714␤»

[17:21] <autarch> hmm, maybe not

[17:21] <autarch> m: say 2**32/7

[17:21] <camelia> rakudo-moar 8588ee: OUTPUT«613566756.571429␤»

[17:21] <autarch> m: say (2**32)/7

[17:21] <camelia> rakudo-moar 8588ee: OUTPUT«613566756.571429␤»

[17:22] <autarch> m: say ((2**31)/3).perl.EVAL

[17:22] <camelia> rakudo-moar 8588ee: OUTPUT«===SORRY!===␤Cannot find method 'compile_time_value'␤»

[17:22] <autarch> m: say ((2**31 - 1)/3).perl.EVAL

[17:22] <camelia> rakudo-moar 8588ee: OUTPUT«715827882.333333␤»

[17:22] <llfourn> right so .compile_time_value will work on a **

[17:22] <dalek> nqp/experiment-multi-line-repl: 09391cb | hoelzro++ | src/HLL/Compiler.nqp:

[17:22] <dalek> nqp/experiment-multi-line-repl: Move continuation detection into eval

[17:22] <dalek> nqp/experiment-multi-line-repl: 

[17:22] <dalek> nqp/experiment-multi-line-repl: With this change, eval can return the output of running the code, or

[17:22] <dalek> nqp/experiment-multi-line-repl: a sentinel value that indicates that more input is needed to run a chunk

[17:22] <dalek> nqp/experiment-multi-line-repl: of code.  This is so that more advanced forms of detecting when we need

[17:22] <dalek> nqp/experiment-multi-line-repl: more input, such as if the user is entering input for a multi-line

[17:22] <dalek> nqp/experiment-multi-line-repl: statement like a block.

[17:22] <dalek> nqp/experiment-multi-line-repl: 

[17:22] <dalek> nqp/experiment-multi-line-repl: This is just a proof-of-concept change; I don't really like how eval

[17:22] <dalek> nqp/experiment-multi-line-repl: indicates to its caller that it needs more input.  But at least this

[17:22] <dalek> nqp/experiment-multi-line-repl: will get people to try and see if multi-line input could be feasible.

[17:22] <dalek> nqp/experiment-multi-line-repl: 

[17:22] <dalek> nqp/experiment-multi-line-repl: We also add a new method to HLL::Compiler - needs-more-input, which is

[17:22] <dalek> nqp/experiment-multi-line-repl: used in conjunction with the sentinel value returned by eval.

[17:22] <dalek> nqp/experiment-multi-line-repl: review: https://github.com/perl6/nqp/commit/09391cb88e

[17:22] <dalek> nqp/experiment-multi-line-repl: 7f07a9f | hoelzro++ | src/HLL/Compiler.nqp:

[17:22] <dalek> nqp/experiment-multi-line-repl: Check if we need more input due to trailing backslash

[17:22] <dalek> nqp/experiment-multi-line-repl: 

[17:22] <dalek> nqp/experiment-multi-line-repl: This is a bit of a hack, but it's good enough for this experiment

[17:22] <dalek> nqp/experiment-multi-line-repl: review: https://github.com/perl6/nqp/commit/7f07a9f003

[17:24] <MadcapJake> anyone ever used fish shell? I love how writing functions can happen right in the shell. (I've been thinking about writing a Perl 6 plugin for fish, not sure what's all possible though)

[17:24] <llfourn> you can write function in sh though?

[17:24] <MadcapJake> in fish you can

[17:25] <llfourn> foo(){ echo "hello world"; } # /bin/sh

[17:25] <MadcapJake> no it's a multiline kind of thing i mean

[17:25] *** dupa joined
[17:25] *** dupa is now known as magiczna_dupa

[17:25] <dalek> rakudo/experiment-multi-line-repl: f9ff566 | hoelzro++ | tools/build/NQP_REVISION:

[17:25] <dalek> rakudo/experiment-multi-line-repl: Require experimental NQP for multi-line REPL

[17:25] <dalek> rakudo/experiment-multi-line-repl: review: https://github.com/rakudo/rakudo/commit/f9ff566cd9

[17:25] <dalek> rakudo/experiment-multi-line-repl: 7a22486 | hoelzro++ | src/ (2 files):

[17:25] <dalek> rakudo/experiment-multi-line-repl: Add pos attribute to X::Syntax

[17:25] <dalek> rakudo/experiment-multi-line-repl: review: https://github.com/rakudo/rakudo/commit/7a22486c62

[17:25] <dalek> rakudo/experiment-multi-line-repl: 2ecda56 | hoelzro++ | src/Perl6/Compiler.nqp:

[17:25] <MadcapJake> like you type `function name` and then pressing enter actually indents the shell and only dedents when you type `end`

[17:25] <dalek> rakudo/experiment-multi-line-repl: Override HLL::Compiler.eval for multi-line input

[17:25] <dalek> rakudo/experiment-multi-line-repl: 

[17:25] <llfourn> I'm sure it's much better -- but you can do that in sh too :)

[17:25] <dalek> rakudo/experiment-multi-line-repl: The way this works is pretty dodgy, but it's good enough for

[17:25] <dalek> rakudo/experiment-multi-line-repl: my experiment.  How this works is that we catch any exceptions

[17:25] <dalek> rakudo/experiment-multi-line-repl: from evaluating the code; if there's an exception, it's an

[17:25] <dalek> rakudo/experiment-multi-line-repl: X::Syntax::Missing, and it occurs at the end of the input string,

[17:25] <dalek> rakudo/experiment-multi-line-repl: that means that more input is required.  Instead of just throwing

[17:25] <dalek> rakudo/experiment-multi-line-repl: the exception at the user, we signal HLL::Compiler that we need

[17:25] <dalek> rakudo/experiment-multi-line-repl: more input via self.needs-more-input

[17:25] <dalek> rakudo/experiment-multi-line-repl: review: https://github.com/rakudo/rakudo/commit/2ecda568f3

[17:25] <magiczna_dupa> hey

[17:26] <magiczna_dupa> could you fix documentation?

[17:26] <MadcapJake> o_O

[17:26] <mspo> hey nice

[17:26] <MadcapJake> llfourn, i was speaking to the multi-line repl idea, it'd be good inspiration

[17:26] *** Actualeyes left
[17:27] *** ryan_ joined
[17:27] <MadcapJake> fish shell functions: https://youtu.be/8pno3tTdywg?t=2m22s

[17:27] <llfourn> MadcapJake: I was just mentioning that vanilla sh also does multiline repl. 

[17:27] <MadcapJake> llfourn, look at the video to see what i mean

[17:28] <llfourn> (well on my mac at least)

[17:29] <llfourn> sure does look nice :)

[17:29] <MadcapJake> llfourn, that'd be cool to have for perl6 repl

[17:30] <llfourn> yep. looks like hoelzro++ is getting us slightly closer to that.

[17:30] <MadcapJake> sweet!

[17:30] *** Ven left
[17:31] <moritz> m: say 2**31

[17:31] <camelia> rakudo-moar 8588ee: OUTPUT«2147483648␤»

[17:31] <moritz> m: say <2147483648/1>

[17:31] <camelia> rakudo-moar 8588ee: OUTPUT«===SORRY!===␤Cannot find method 'compile_time_value'␤»

[17:31] <moritz> m: say <2147483647/1>

[17:31] <camelia> rakudo-moar 8588ee: OUTPUT«2147483647␤»

[17:31] <MadcapJake> i might be able to write some functions for fish that'll give you some of the same power

[17:31] <hoelzro> your wish is my command (line): http://hoelz.ro/files/multi-line-repl.gif

[17:32] <mspo> hoelzro: https://asciinema.org/

[17:32] <hoelzro> please try out the experiment-multi-line-repl branch of Rakudo and NQP, and let me know if I broke anything serious

[17:32] *** Ven joined
[17:32] <MadcapJake> hoelzro++

[17:32] <hoelzro> mspo: thanks for the tip!

[17:32] <autarch> so how can I get some insight into what's in "@($<nu>.ast)" - both .dump and .perl fail

[17:32] <llfourn> hoelzro++ The people's champion

[17:33] <mspo> hoelzro: it's pretty slick- you can copy and paste

[17:33] <hoelzro> I'll work on getting multi-line history going too

[17:33] <llfourn> autarch: eh, $<nu>.ast.dump doesn't show anything?

[17:33] <hoelzro> gotta run and get coffee now =)

[17:33] <autarch> llfourn: it blows up

[17:34] <llfourn> autarch: erm does $/.dump show a 'nu' in the match?

[17:34] <autarch> I'll check

[17:34] <autarch> the build/test cycle is pretty slow :(

[17:34] <llfourn> heh yep :\

[17:35] <llfourn> autarch: also is it nu.ast that blows up or when you call a method?

[17:35] <autarch> when I call the method

[17:35] *** jevin left
[17:35] <autarch> cannot find method 'dump'

[17:36] <llfourn> autarch: ok maybe try asking HOW for the type name -- my $tmp := $<nu>.ast; $tmp.HOW.name($tmp)

[17:37] <llfourn> (I think that works)

[17:37] *** jevin_ joined
[17:37] *** mwheat left
[17:37] <llfourn> (printing it out of course)

[17:38] *** drrho joined
[17:38] <llfourn> it should def have a nu in the match so nvm about that

[17:39] *** s_kilk left
[17:40] <autarch> llfourn: so it looks like in the cases where it works $<nu>.ast is a QAST::Want and when it fails it's a QAST::WVal

[17:40] *** sevvie left
[17:40] *** dnmfarrell left
[17:41] <autarch> which makes sense to me, since the former has a compile_time_value method and the latter does not

[17:41] <autarch> oh wait, no, they both have that method

[17:41] <llfourn> yeah...

[17:41] <llfourn> well Want doesn't always?

[17:42] <llfourn> I'm not an expert of this stuff but I think WVal should always have compile time value

[17:42] <autarch> no, it should since it does the QAST::CompileTimeValue role, right?

[17:42] <llfourn> so it's Want when it works?

[17:43] <autarch> yes

[17:43] *** sevvie joined
[17:43] <llfourn> well I think I'm at the end of my helpfulness then because I expected it to be the other way around!

[17:43] <autarch> so if I get rid of the "make an array" bit in Perl6::Action and change it to "my $nu := $<nu>.ast.compile_time_value;" then it just works

[17:44] *** Xor_ left
[17:44] <autarch> does anyone know _why_ it's making an array and getting the first element?

[17:44] *** s_kilk joined
[17:45] <autarch> because QAST::Want::compile_time_value is defined as "self[0].compile_time_value()" - which seems to do what's needed ;)

[17:45] *** s_kilk left
[17:46] <llfourn> yeah I saw that too I guess give that a shot?

[17:46] <autarch> I'll try running the entire spectest with this change but this might be the easy fix

[17:46] *** TEttinger joined
[17:46] <llfourn> autarch: although blame shows jnthn did that last august :P

[17:47] <autarch> my guess is maybe something else changed in nqp-land since then to make this unnecessary, but that's very much a guess

[17:47] <llfourn> Make <0x01/0x03> work reliably across platforms.

[17:47] <llfourn> Fixes it on Windows, and probably on JVM too.

[17:48] <llfourn> is the commit msg FYI

[17:48] <llfourn> so it seems he's working around some low level stuff

[17:48] <autarch> guess we'll see if this breaks that ;)

[17:49] <[Tux]> test            22.092

[17:49] <[Tux]> test-t          12.038

[17:49] <[Tux]> csv-parser      50.114

[17:51] <autarch> https://github.com/rakudo/rakudo/pull/707

[17:52] <llfourn> autarch: oh did it fix the immediate issue?

[17:53] <autarch> llfourn: yep

[17:53] <llfourn> autarch++

[17:53] <autarch> well, let's see what the spec test says in ... how many minutes/hours?

[17:54] * lizmat waits for Travis before merging

[17:54] <autarch> yeah, absolutely

[17:54] <lizmat> but looks good!   autarch++

[17:54] <autarch> I for one do not trust myself ;)

[17:55] * lizmat always does a spectest before committing

[17:56] *** NZKindest joined
[17:58] <autarch> I was hoping travis might be quicker than me

[17:58] <autarch> I'm all about just rebasing anyway

[17:58] <mst> o/ all about rebase / no merges o/

[18:00] *** Cabanossi left
[18:00] <lizmat> [Tux]: again lower, right ?

[18:00] <autarch> well, my change doesn't break the tests jnthn added when he changed Perl6::Actions

[18:00] <llfourn> autarch: but he changed it because it didn't work on windows?

[18:00] <autarch> but that's just on moar - I guess we'll see what travis says about the jvm

[18:00] <llfourn> are you testing on windows?

[18:01] <autarch> oh right, no

[18:01] <autarch> and travis doesn't either :(

[18:01] *** magiczna_dupa left
[18:01] <autarch> someone should get rakudo running on appveyor too

[18:05] <autarch> actually, looking at the earlier change, I think it's unlikely I broke windows

[18:06] <autarch> I think the earlier problem had to do with making the numerator and denominator Int values explicitly in the action method

[18:08] <llfourn> hmm yes it would be strange if your change was platform dependent

[18:09] *** jevin_ left
[18:09] *** jevin joined
[18:10] *** magiczna_dupa joined
[18:11] *** Ven left
[18:13] *** woolfy joined
[18:13] *** Xor_ joined
[18:13] *** woolfy left
[18:13] *** sjoshi joined
[18:14] <dalek> rakudo/nom: 95e9655 | lizmat++ | src/core/Map.pm:

[18:14] <dalek> rakudo/nom: Make sure Map.Hash works correctly

[18:14] <dalek> rakudo/nom: 

[18:14] <dalek> rakudo/nom: Before, any subsequent changes made to the Hash, would be happening to

[18:14] <dalek> rakudo/nom: the Map also.  This also makes Map.Hash 15x faster for an empty Map,

[18:14] <dalek> rakudo/nom: to the same speed for a Map with 20 keys, to slower for larger Maps.

[18:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/95e9655ab2

[18:17] *** s_kilk joined
[18:21] *** skids joined
[18:22] *** maybekoo5 left
[18:23] *** Relsak joined
[18:23] *** Relsak left
[18:27] <magiczna_dupa> please fix documentation

[18:30] *** dnmfarrell joined
[18:31] *** kjs_ left
[18:32] <timotimo> can you be more specific, magiczna_dupa?

[18:33] <magiczna_dupa> try to find docs for .=

[18:33] <magiczna_dupa> ;D

[18:33] <magiczna_dupa> the site will error

[18:34] <dnmfarrell> m: @*INC.say;

[18:34] <camelia> rakudo-moar 95e965: OUTPUT«Dynamic variable @*INC not found␤  in block <unit> at /tmp/wOsT_q0iuU line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/wOsT_q0iuU line 1␤␤»

[18:34] <dnmfarrell> Does anyone know how to inspect @*INC?

[18:34] <llfourn> magiczna_dupa: https://github.com/perl6/doc/issues/155 # known issue

[18:34] <MadcapJake> m: $*REPO.say

[18:34] <camelia> rakudo-moar 95e965: OUTPUT«inst#/home/camelia/.perl6/2015.12-267-g95e9655␤»

[18:35] *** s_kilk left
[18:35] <MadcapJake> dnmfarrell, @*INC is gone

[18:35] <magiczna_dupa> oh ok

[18:35] <dnmfarrell> Meh, it's still in S28

[18:36] <dnmfarrell> MadcapJake: is there an alternative?

[18:36] <MadcapJake> m: $*REPO.^methods.say

[18:36] <llfourn> dnmfarrell: you can look at $*REPO

[18:36] <camelia> rakudo-moar 95e965: OUTPUT«(BUILD writeable-path can-install install files need resource id short-id loaded precomp-repository path-spec prefix load repo-chain new installed perl gist Str WHICH <anon>)␤»

[18:36] <MadcapJake> dnmfarrell, ^

[18:36] <dnmfarrell> MadcapJake: thanks :)

[18:37] <llfourn> m: note $*REPO.repo-chain.perl

[18:37] <camelia> rakudo-moar 95e965: OUTPUT«(CompUnit::Repository::Installation.new("/home/camelia/.perl6/2015.12-267-g95e9655"), CompUnit::Repository::Installation.new("/home/camelia/rakudo-m-inst-2/share/perl6/site"), CompUnit::Repository::Installation.new("/home/camelia/rakudo-m-inst-2/share/perl…»

[18:39] *** maybekoo5 joined
[18:41] *** ryan_ left
[18:42] *** Sqirrel joined
[18:43] *** ryan_ joined
[18:43] <autarch> magiczna_dupa: patches for that would be very welcome, but I think it's a somewhat challenging issue to fix properly

[18:43] *** ryan_ left
[18:44] <autarch> but maybe I'm overestimating the work involved?

[18:44] <MadcapJake> magiczna_dupa, if you ever have questions on operators, the best resource available is http://doc.perl6.org/language/operators

[18:45] <autarch> jnthn: are you around today?

[18:45] <MadcapJake> autarch, the current status on operators is that we should encode them in some custom way

[18:45] <MadcapJake> wrt doc search

[18:45] <autarch> right, I know that

[18:46] <MadcapJake> oh ok, sorry!

[18:46] <autarch> I'm saying that might be a fair bit of work

[18:47] <MadcapJake> where's the search code in perl6/doc?

[18:47] <autarch> MadcapJake: it's some JS in the perl6/doc repo, I believe

[18:48] <autarch> https://github.com/perl6/doc/blob/master/template/search_template.js

[18:48] <MadcapJake> thanks!

[18:49] <autarch> so I think the trick is to substitute the operators with words when generating the file that template is for - and then update the autocomplete JS to perform the same substitution

[18:49] <autarch> hmm, after describing it it doesn't sound so hard ;)

[18:50] <MadcapJake> maybe a json file could contain the translations used by both sides

[18:51] <sjn> \o

[18:51] <sjn> is there a good way to search for rakudo bugs?

[18:51] * sjn looks at rt.perl.org

[18:52] *** dnmfarrell left
[18:52] *** ZoffixWin joined
[18:52] *** ZoffixWin left
[18:53] <llfourn> sjn: rt.perl.org is the best we got atm

[18:54] <sjn> hm. no free text search?

[18:55] <llfourn> nope

[18:55] <dalek> rakudo/nom: 2775261 | autarch++ | src/Perl6/Actions.nqp:

[18:55] <dalek> rakudo/nom: Just call $<nu>.ast.compile_time_value in Perl6::Actions.bare_rat_number

[18:55] <dalek> rakudo/nom: 

[18:55] <dalek> rakudo/nom: The value of $<nu>.ast can either be a QAST::Want or a QAST::WVal depending on

[18:55] <dalek> rakudo/nom: the value of the numerator. Any value of 2**31 or greater gives us a

[18:55] <dalek> rakudo/nom: QAST::WVal.

[18:55] <dalek> rakudo/nom: 

[18:55] <dalek> rakudo/nom: Previously the code called "@($<nu>.ast)[0].compile_time_value" - this works

[18:55] <dalek> rakudo/nom: fine for a QAST::Want, but a QAST::WVal does not have any children, and so

[18:55] <dalek> rakudo/nom: this would lead to an error of "Cannot find method 'compile_time_value'".

[18:55] <dalek> rakudo/nom: 

[18:55] <dalek> rakudo/nom: Internally QAST::Want.compile_time_value is implemented as

[18:55] <dalek> rakudo/nom: "self[0].compile_time_value()" so it seems like there's no good reason for us

[18:55] <dalek> rakudo/nom: to do same thing in Perl6::Actions. Yay polymorphism!

[18:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2775261502

[18:55] <dalek> rakudo/nom: 09181a4 | lizmat++ | src/Perl6/Actions.nqp:

[18:55] <dalek> rakudo/nom: Merge pull request #707 from autarch/autarch/fix-large-numerator-Rat-literal

[18:55] <dalek> rakudo/nom: 

[18:55] <dalek> rakudo/nom: Just call $<nu>.ast.compile_time_value in Perl6::Actions.bare_rat_number

[18:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/09181a4105

[18:56] <dalek> roast: c785caa | autarch++ | S32-num/rat.t:

[18:56] <dalek> roast: Fix incorrect plan in rat.t

[18:56] <dalek> roast: review: https://github.com/perl6/roast/commit/c785caacab

[18:56] <dalek> roast: 1b4f796 | autarch++ | S32-num/rat.t:

[18:56] <dalek> roast: Add a test for Rat.perl.EVAL round tripping with arbitrary numerator & denomator

[18:56] <dalek> roast: 

[18:56] <dalek> roast: As of the latest Rakudo this leads to an error of the form:

[18:56] <dalek> roast: 

[18:56] <dalek> roast:   ===SORRY!===

[18:56] <dalek> roast:   Cannot find method 'compile_time_value'

[18:56] <dalek> roast: 

[18:56] <dalek> roast: See https://rt.perl.org/Ticket/Display.html?id=126873 for the original report.

[18:56] <dalek> roast: review: https://github.com/perl6/roast/commit/1b4f796e10

[18:56] <dalek> roast: 8be23bb | lizmat++ | S32-num/rat.t:

[18:56] <dalek> roast: Merge pull request #101 from perl6/autarch/fix-Rat.perl

[18:56] <dalek> roast: 

[18:56] <dalek> roast: Tests that Rat.perl to actually generates valid code

[18:56] <dalek> roast: review: https://github.com/perl6/roast/commit/8be23bb124

[19:08] <autarch> MadcapJake: re: json file - yeah, I was thinking the same thing

[19:11] *** rindolf left
[19:14] *** sjoshi left
[19:24] *** rindolf joined
[19:24] *** Guest45613 left
[19:26] *** virtualsue joined
[19:29] *** JRaspass left
[19:36] *** JRaspass joined
[19:40] *** hankache joined
[19:43] * hoelzro is back from coffee

[19:44] <hoelzro> what's the best way to announce a branch for public testing? I really want people to try out the experiment multi-line REPL branch, to make sure it behaves well, doesn't break anything, and help me improve the code

[19:44] <hoelzro> I admit that the change to introduce multi-line statements is more than a little hacky =/

[19:44] <moritz> ask for testing here and on p6u

[19:46] <hoelzro> thanks for the advice, moritz; I'll promote it again tomorrow morning when more people are on, and I'll follow up on p6u!

[19:46] * hankache puts testing hat

[19:53] *** Xor_ left
[19:59] *** molaf_ left
[19:59] <lizmat> m: dd Map.new.hash

[19:59] <camelia> rakudo-moar 09181a: OUTPUT«Map.new(())␤»

[20:00] <lizmat> that feels wrong, seems to me it should be the same as:

[20:00] <lizmat> m: dd Map.new.Hash

[20:00] <camelia> rakudo-moar 09181a: OUTPUT«{}␤»

[20:00] <lizmat> m: dd Map.new("a",42).Hash

[20:00] <camelia> rakudo-moar 09181a: OUTPUT«{:a(42)}␤»

[20:01] *** darutoko left
[20:03] *** hankache left
[20:06] *** domidumont left
[20:10] <autarch> http://blog.urth.org/2016/02/07/hacking-on-perl-6-rakudo-and-roast/

[20:18] <dalek> rakudo/nom: e387a76 | lizmat++ | src/core/Map.pm:

[20:18] <dalek> rakudo/nom: Several Map optimizations

[20:18] <dalek> rakudo/nom: 

[20:18] <dalek> rakudo/nom: - directly setting $!storage instead of using bindattr

[20:18] <dalek> rakudo/nom: - using postfix unless instead of ||

[20:18] <dalek> rakudo/nom: - using ternaries if possible

[20:18] <dalek> rakudo/nom: - don't attempt to copy if there's nothing to copy

[20:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e387a76da3

[20:19] *** mcmillhj joined
[20:20] <lizmat> autarch++  # nice blog posts pointing to one of rakudo's USP's

[20:21] *** BenGoldberg joined
[20:24] * lizmat is starting to wonder what the exact semantics of .hash are

[20:35] <pmurias> autarch: re why 2**31 I think that such numbers are just treated as big integers

[20:35] <magiczna_dupa> hey I find smh in PSGI code that I can pass array into submodule

[20:35] <magiczna_dupa> and it will autoextracto to parameters

[20:35] <autarch> pmurias: that'd make sense

[20:35] <magiczna_dupa> like in python

[20:35] <timotimo> what are USPs?

[20:35] <lizmat> Unique Selling Points

[20:35] <lizmat> that what differentiate you from other suppliers

[20:35] <lizmat> *differentiates

[20:37] <magiczna_dupa> oh okay that not true

[20:38] *** DubiousPepper left
[20:38] <timotimo> oh

[20:39] <RabidGravy> right that's update functions basically implemented, now for attachments

[20:42] *** geraud joined
[20:42] *** virtualsue left
[20:43] <jnthn> lizmat: .hash is like .list, that is "given me something I can use in a hash-ish kind of way"

[20:43] <jnthn> lizmat: I'd expect it to be identify for Map

[20:43] <jnthn> .hash also de-itemizes

[20:44] <jnthn> Since it's the thing used by %$foo

[20:44] <jnthn> autarch: I'm only about a little today...

[20:44] <jnthn> autarch: Anything I can answer quickly?

[20:44] <autarch> jnthn: I think I figured out my question, actually

[20:44] <jnthn> OK :)

[20:45] <autarch> but you might want to take a look at my PR that lizmat merged to make sure I didn't break something you fixed a few years ago

[20:45] <autarch> I'm fairly sure I didn't, but we (for some value of we) really need to get rakudo running via appveyor

[20:46] <ugexe> https://github.com/ugexe/zef/blob/master/.appveyor.yml

[20:48] <jnthn> lizmat: oops

[20:48] <jnthn> if nqp::defined('$!storage') {

[20:48] <jnthn> That's checking if the string is defined

[20:49] <jnthn> autarch: It looks reasonable

[20:49] <autarch> cool, thanks for checking

[20:50] <jnthn> lizmat: (That was in your latest commit)

[20:50] <jnthn> Rest looks fine

[20:52] *** DubiousPepper joined
[20:53] <Hotkeys> codegolf is v fun

[20:53] *** mcmillhj left
[21:01] *** rindolf left
[21:04] *** espadrine left
[21:04] <magiczna_dupa> should modules in perl be wrote as OOP design

[21:05] <magiczna_dupa> I mean user should only see what he need no more

[21:06] *** revhippie joined
[21:06] *** gregf___ left
[21:08] *** maybekoo5 left
[21:08] *** gregf___ joined
[21:10] *** SmokeMachine____ left
[21:10] *** yoleaux left
[21:11] *** SmokeMachine____ joined
[21:12] <raiph> magiczna_dupa: "user should only see what he need no more" <-- That's how P6 is designed

[21:12] <raiph> doesn't have to be OO

[21:12] <raiph> (re: modules)

[21:13] <ely-se> I have a few modules in the module index, but I want to move their repos to bitbucket

[21:13] <ely-se> IIRC they have to be on GitHub

[21:13] *** musiKk joined
[21:16] *** magiczna_dupa left
[21:17] <autarch> how can I build everything HEAD with rakudobrew?

[21:18] *** kaare_ left
[21:18] *** lokien_ joined
[21:20] *** CIAvash left
[21:21] *** Sqirrel_ joined
[21:21] *** Sqirrel left
[21:24] *** rpburkholder left
[21:24] *** ely-se left
[21:24] *** yoleaux joined
[21:24] *** ChanServ sets mode: +v yoleaux

[21:25] *** AlexDaniel joined
[21:25] *** rpburkholder joined
[21:25] *** ely-se joined
[21:25] <autarch> I don't think I understand what "perl6 --version" is telling me - This is Rakudo version 2015.12-259-g5605d5f

[21:26] <autarch> what is that commit from? I can't find it in the logs for rakudo or MoarVM

[21:26] *** Sqirrel joined
[21:27] <ugexe> 5606d5f, rakudo

[21:28] <MadcapJake> autarch, it's «$*PERL.compiler.version()»

[21:28] *** Sqirrel_ left
[21:28] *** SCHAAP137 joined
[21:28] <autarch> but that commit doesn't show up in the rakudo log

[21:29] <ugexe> --configure_opts="--gen-moar=HEAD --gen-nqp=HEAD" or something like it should get your rakudobrew setup

[21:29] *** dolmen joined
[21:29] <autarch> the problem is the rakudo version, not the others "rakudobrew build moar HEAD" doesn't give me rakudo HEAD

[21:30] <RabidGravy> I think rakudobrew triple HEAD HEAD HEAD

[21:30] <autarch> cool, that seems to be working

[21:31] <ugexe> i thought rakudobrew `moar` by itself was supposed to get HEAD

[21:31] <autarch> I think it somehow figured out a tag and gets that - it's all a bit confusing

[21:35] <ugexe> maybe it gets HEAD from master instead of nom? (or the other way around)

[21:35] *** yoleaux left
[21:39] *** virtualsue joined
[21:41] <Hotkeys> is there a method like 'min()' but for strings

[21:41] *** Zero_Dogg left
[21:41] <Hotkeys> ie choose the string with shortest length

[21:42] *** Zero_Dogg joined
[21:42] *** Zero_Dogg left
[21:42] *** Zero_Dogg joined
[21:42] <flussence> m: say <zzzz foo foobar>.min(:by(*.chars))

[21:42] <camelia> rakudo-moar e387a7: OUTPUT«foo␤»

[21:42] <Hotkeys> oh dang

[21:42] <Hotkeys> I was going way too complicated

[21:43] <Hotkeys> I had min("foo", "bar", :by({$^a.chars cmp $^b.chars}))

[21:43] <Hotkeys> thanks flussence 

[21:43] *** kjs_ joined
[21:44] *** kjs_ left
[21:46] *** magiczna_dupa joined
[21:47] <autarch> it seems to get HEAD the first time you build, but on future build calls it does something else

[21:47] *** magiczna_dupa left
[21:51] <Hotkeys> flussence: http://i.imgur.com/eIh9rz6.png (for reference the returned value is $_)

[21:52] <Hotkeys> it's treating r as greater even though it isn't

[21:52] <Hotkeys> regardless of the value of $_

[21:53] *** Amendil joined
[21:53] *** musiKk left
[21:53] *** yoleaux joined
[21:53] *** ChanServ sets mode: +v yoleaux

[21:54] <flussence> huh, no idea...

[21:54] <Hotkeys> http://i.imgur.com/wjoOYw4.png

[21:54] <Hotkeys> seems strange

[21:55] <dalek> roast: 2212bf2 | (Brad Gilbert)++ | S07-hyperrace/ (2 files):

[21:55] <dalek> roast: Test hyper and race in reverse

[21:55] <dalek> roast: review: https://github.com/perl6/roast/commit/2212bf2335

[21:55] <dalek> roast: 5016fe1 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S07-hyperrace/ (2 files):

[21:55] <dalek> roast: Merge pull request #99 from b2gills/reversed_hyper_race

[21:55] <dalek> roast: 

[21:55] <dalek> roast: Test hyper and race in reverse

[21:55] <dalek> roast: review: https://github.com/perl6/roast/commit/5016fe1ef2

[21:55] <Hotkeys> m: ("foobar", 3000000).min(:by(*.chars)).say

[21:55] <camelia> rakudo-moar e387a7: OUTPUT«3000000␤»

[21:55] <Hotkeys> m: ("foobar", "foobarbaz").min(:by(*.chars)).say

[21:55] <camelia> rakudo-moar e387a7: OUTPUT«foobar␤»

[21:55] <Hotkeys> m: ("foobar", "3000000").min(:by(*.chars)).say

[21:55] <camelia> rakudo-moar e387a7: OUTPUT«3000000␤»

[21:55] <Hotkeys> m: ("foobar", "3000000".Str).min(:by(*.chars)).say

[21:55] <camelia> rakudo-moar e387a7: OUTPUT«3000000␤»

[21:56] * Hotkeys is very confused

[21:57] <Hotkeys> m: ("300", "3000000").min(:by(*.chars)).say

[21:57] <AlexDaniel> m: ("foobar", "30000000000000000".Str).min(:by(*.chars)).say

[21:57] <camelia> rakudo-moar e387a7: OUTPUT«300␤»

[21:57] <camelia> rakudo-moar e387a7: OUTPUT«30000000000000000␤»

[21:57] <Hotkeys> m: ("3000000", "foobar").min(:by(*.chars)).say

[21:57] <AlexDaniel> Hotkeys: honestly that's the first time I see :by :)

[21:57] <camelia> rakudo-moar e387a7: OUTPUT«3000000␤»

[21:58] <Hotkeys> AlexDaniel: it's undocumented for min except in supply

[21:58] <AlexDaniel> Hotkeys: great!

[21:58] *** Kristien joined
[21:58] <Hotkeys> m: min("foo", "3000000", :by({$^a.chars cmp $^b.chars}))

[21:58] <camelia> rakudo-moar e387a7: ( no output )

[21:58] <Hotkeys> m: min("foo", "3000000", :by({$^a.chars cmp $^b.chars})).say

[21:58] <camelia> rakudo-moar e387a7: OUTPUT«foo␤»

[21:59] <Hotkeys> m: min("foo", "3000000", :by(*.chars})).say

[21:59] <camelia> rakudo-moar e387a7: OUTPUT«5===SORRY!5=== Error while compiling /tmp/s_arJLzP3s␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at /tmp/s_arJLzP3s:1␤------> 3min("foo", "3000000", :by(*.chars7⏏5})).say␤    expecting any of:␤      …»

[21:59] <Hotkeys> m: min("foo", "3000000", :by(*.chars)).say

[21:59] <camelia> rakudo-moar e387a7: OUTPUT«foo␤»

[21:59] <Hotkeys> ohg

[21:59] <Hotkeys> weird

[21:59] <Hotkeys> m: min("foo", 3000000, :by(*.chars)).say

[21:59] <camelia> rakudo-moar e387a7: OUTPUT«foo␤»

[21:59] <Hotkeys> well that works for me

[21:59] <Hotkeys> the dotty method not working is strange though

[21:59] <AlexDaniel> m: ("foobar", "3000000".Str).min(:by({say $_.chars}))

[21:59] <camelia> rakudo-moar e387a7: ( no output )

[22:00] <AlexDaniel> does it even work?

[22:00] <AlexDaniel> m: ("foobar", "3000000".Str).min(:byhoaesuhoae({say $_.chars}))

[22:00] <camelia> rakudo-moar e387a7: ( no output )

[22:00] <AlexDaniel> right

[22:00] <AlexDaniel> Hotkeys: look, it does nothing

[22:00] <Hotkeys> weird

[22:00] *** ely-se left
[22:00] <Hotkeys> I feel like it should be there

[22:00] <Hotkeys> if it's there in other places

[22:01] <Hotkeys> m: min("foo", 3000000, :byagdkjl(*.chars)).say

[22:01] <camelia> rakudo-moar e387a7: OUTPUT«Unexpected named parameter 'byagdkjl' passed␤  in block <unit> at /tmp/se17MuQ3Xh line 1␤␤»

[22:01] <Hotkeys> just checkin

[22:01] <AlexDaniel> m:  min("foo", "3000000", :by({say .chars}})).say

[22:01] <camelia> rakudo-moar e387a7: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tnpVTFvFr7␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at /tmp/tnpVTFvFr7:1␤------> 3min("foo", "3000000", :by({say .chars}7⏏5})).say␤    expecting any of:␤ …»

[22:01] <AlexDaniel> m:  min("foo", "3000000", :by({say .chars}))

[22:01] <camelia> rakudo-moar e387a7: OUTPUT«7␤3␤»

[22:02] <AlexDaniel> this one works, yeah

[22:03] <Hotkeys> strange

[22:07] <autarch> m: my $n = now; say $n.perl; say $n.perl.EVAL.perl

[22:07] <camelia> rakudo-moar e387a7: OUTPUT«Instant.from-posix((<1744404512151/1199>, 0))␤Instant.from-posix((2.0, Bool::False))␤»

[22:07] *** RabidGravy left
[22:07] <autarch> another round tripping bug - the extra parens are screwing things up

[22:08] *** Kristien is now known as ely-se

[22:10] *** Cabanossi joined
[22:17] <lizmat> jnthn: good catch

[22:17] *** virtualsue left
[22:19] *** perlawhirl joined
[22:19] *** yqt joined
[22:19] <dalek> rakudo/nom: 93a3479 | lizmat++ | src/core/Map.pm:

[22:19] <dalek> rakudo/nom: Fix copy-pasto, spotted by jnthn++

[22:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/93a34799e1

[22:19] <jnthn> lizmat: :)

[22:22] <ely-se> well then, I think all my Perl 6 modules broke

[22:23] <lizmat> ely-se: recently?

[22:24] <ely-se> A few moments ago. Because I deleted all my GitHub repositories.

[22:24] <ely-se> I should remove them from the module list until non-GitHub hosts are supported and before people start depending on them

[22:24] <lizmat> autarch: can we expecte a PR ?

[22:25] <autarch> lizmat: I'm so sleepy right now, but probably at some point - I think this one is a much easier fix, actually

[22:26] * lizmat wonders what autarch's timezone is

[22:26] <lizmat> it being pretty late in CET

[22:26] <autarch> heh, it's 16:30 here I've just been feeling lazy

[22:26] <lizmat> ah...  :-)

[22:26] <lizmat> siesta  :-)

[22:30] *** Guest98990 left
[22:32] *** bowtie joined
[22:32] *** bowtie is now known as Guest63714

[22:33] *** sotka joined
[22:36] *** BenGoldberg left
[22:37] <pmurias> ely-se: why did you remove all your GitHub repos?

[22:38] *** sotka left
[22:38] <ely-se> pmurias: political reasons

[22:38] <ely-se> I'm not using GH anymore

[22:39] <pmurias> did GH do anything outrageous recently?

[22:42] <autarch> some people seem to think so

[22:43] <pmurias> autarch: what did they do?

[22:43] <dalek> rakudo/nom: f59c769 | lizmat++ | src/core/Hash.pm:

[22:43] <dalek> rakudo/nom: Scrape a few % off of Hash's introspection methods

[22:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f59c76939f

[22:44] <autarch> http://www.businessinsider.com/github-the-full-inside-story-2016-2

[22:44] <ely-se> pmurias: http://hintjens.com/blog:111

[22:45] *** crux left
[22:45] *** vendethiel- left
[22:46] <AlexDaniel> ely-se: so have you moved everything somewhere else?

[22:46] *** dolmen left
[22:46] <ely-se> I moved everything to Bitbucket and I'm soon evaluating gitgud.io

[22:46] <ely-se> luckily Git is a DVCS so I can keep it on both BB and GG

[22:46] <AlexDaniel> ely-se: did you have any perl 6 modules? If yes, then how is it going?

[22:47] <ely-se> I did, they aren't there anymore. If you try to install them with Panda now you get an error

[22:47] * flussence was half-tempted to add my last thing to META.list via a gitlab url just to see what exploded, but it was in mid-december so I held off :)

[22:47] <AlexDaniel> ely-se: yes, that's what I've been doing for some other projects too. There's no reason not to have several mirrors

[22:47] <ely-se> I'm trying to figure out how best to remove them from META.info without using GH pull requests

[22:48] <ely-se> until Panda supports non-GH repositories

[22:48] <AlexDaniel> ely-se: yeah, we should have more people like you

[22:48] <lizmat> I thought the URL was pretty agnostic about where things lived ?

[22:48] <AlexDaniel> that's what I thought too, but who knows

[22:49] <ely-se> It's late so I'll check it out tomorrow

[22:49] <AlexDaniel> ely-se: if you can contribute anything to support non-GH repos please do

[22:49] <AlexDaniel> ely-se: it will make lots of people happy (me)

[22:49] <flussence> ely-se: I can remove 'em if you want, what username?

[22:49] <ely-se> ok :p

[22:49] <ely-se> flussence: rightfold

[22:49] <ely-se> I think it's only the three topmost in META.info

[22:50] <hoelzro> MadcapJake: btw, thanks for fixing my screwup with linenoise earlier =)

[22:50] <hoelzro> MadcapJake++

[22:50] <ely-se> they're now on BB, e.g. https://bitbucket.org/rightfold/nativecall-errno

[22:50] *** crux joined
[22:50] <ely-se> problem is that you can't have version-agnostic links to source files on BB, so you can't use it with META.info that way

[22:51] <ely-se> META.list*, unless you want to update META.list for each revision

[22:52] <dalek> ecosystem: f54969a | (Anthony Parsons)++ | META.list:

[22:52] <dalek> ecosystem: g/github.*\/rightfold/d, per request in #perl6

[22:52] <dalek> ecosystem: 

[22:52] <dalek> ecosystem: http://irclog.perlgeek.de/perl6/2016-02-07#i_12003067

[22:52] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/f54969a810

[22:53] <flussence> that url thing sounds kinda awkward, gitlab has a similar problem where it's impossible to get tarballs with a consistent md5sum

[22:54] *** perlawhirl left
[22:54] <geekosaur> ? github does that too, seems to gc tarballs if unused for a while an make new ones with different md5sums on demand

[22:55] <flussence> huh... maybe they're stable if you use the "releases" feature

[22:55] <flussence> I know a few gentoo packages pull straight from the site, so there has to be some way to do it

[22:56] *** BenGoldberg joined
[22:58] <AlexDaniel> ely-se: what's the difference between gitgud.io and gitlab itself?

[22:58] <ely-se> gitlab is software, gitgud.io is a running instance of that software

[22:59] <ely-se> you can host gitlab yourself if you want

[22:59] <pmurias> ely-se: so it's mostly a fear of github trying to rake in profits by turning into an evil empire and taking over everything to rake in profits?

[22:59] <ugexe> zef should handle bitbucket repos (and local/remote tar.gz archives)

[22:59] <AlexDaniel> ely-se: no-no I mean if you hit “Explore” button on gitlab.com you can see some projects hosted there

[23:00] <ely-se> Oh, no idea.

[23:00] <flussence> gitlab.com runs an instance of their commercial version, so you get a few more buttons to click

[23:01] <ely-se> the thing I like about gitgud is that it claims to be "100% politically neutral"

[23:01] <flussence> (it's also *full* of automated spam, it seems)

[23:01] <AlexDaniel> so if I want to host something, should I prefer gitlab.com or gitgud.io?

[23:01] <jast> claims are cheap...

[23:01] <AlexDaniel> ely-se: yeah I kinda liked that too

[23:03] <AlexDaniel> jast: well claims are cheap but at least the source of gitlab is released while github is proprietary. You might say that it doesn't really matter because you're still using git, but in my opinion one is definitely better than the other in that respect

[23:03] <jast> there's also notabug.org

[23:03] <jast> I was talking about the claim of political neutrality mostly, which is mostly unrelated to how closed the source is

[23:03] <jast> and in this particular case I don't personally care about whether the source code is available, I only do if I host it myself

[23:04] <AlexDaniel> jast: but the difference is that you can move to self-hosted solution as soon as you don't like anything

[23:04] <AlexDaniel> jast: or move to another gitlab hoster which looks exactly the same

[23:04] <geekosaur> I am somewhat biased about gitlab because they handled buying and shutting down gitorious very badly

[23:04] <AlexDaniel> /anything/something/

[23:05] <jast> geekosaur: what do you think they could/should have done better?

[23:05] <jast> short of not shutting it down at all :)

[23:06] <AlexDaniel> jast: e.g. moving from github to something else is going to painful for sure (but still possible, yeah). Moving between different gitlab hosters is supposed to be easy (at least in theory it is so). I think that that's why the source code matters in that case

[23:06] <geekosaur> well, for one, gitorious suffered some failure just before the start of the migration period. they didn't extend the migration period and gitorious was pretty broken/unable to migrate stuff for half of the period

[23:06] <jast> AlexDaniel: the difference is that gitlab actually started out as open source and didn't offer hosting for the longest time

[23:06] <geekosaur> which made it really painful to move stuff away in time

[23:07] <jast> and, well, personally I wouldn't consider hosting gitlab myself, it's a bit much

[23:07] <AlexDaniel> jast: I know. I was really disappointed when they started commercializing it

[23:07] <jast> it was enough having to set it up at work, despite my misgivings

[23:08] * flussence isn't willing to self-host anything more complex than gitweb/cgit, and those are horrible to hack on :(

[23:08] <jast> we had a perfectly good gitolite setup (basically a headless git repo manager), and we're not even using gitlab's pull requests and issues and wiki and such

[23:08] <AlexDaniel> anyway, we should be more TIMTOWTDISH with that. I've already added support for gitlab and bitbucket on camelia, but we should definitely do more.

[23:08] <geekosaur> so I keep thinking "is that how they're going to handle gitlab outages too?"

[23:08] <AlexDaniel> m: https://gitlab.com/snippets/14172

[23:08] <camelia> rakudo-moar f59c76: OUTPUT«((a a a) (b b) c)␤»

[23:09] <jast> geekosaur: fair enough. in fact they're having scaling issues already, although they say they're working on fixing that

[23:10] <jast> yeah, supporting more platforms is definitely good

[23:12] *** ely-se left
[23:13] *** pmurias left
[23:13] *** wamba left
[23:13] *** pmurias joined
[23:13] <lizmat> .tell jnthn do you have an idea as to when object hashes would make it to Moar ?

[23:13] <yoleaux> lizmat: I'll pass your message to jnthn.

[23:15] <dalek> rakudo/nom: 63fdd19 | lizmat++ | src/core/Hash.pm:

[23:15] <dalek> rakudo/nom: Scrape a few % off of initializing a Hash

[23:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/63fdd19e6d

[23:16] *** pmurias left
[23:19] *** Amendil left
[23:19] *** perlawhirl joined
[23:20] *** captain-adequate joined
[23:20] *** Skarsnik left
[23:24] <dalek> rakudo/nom: f0a4504 | lizmat++ | src/core/Hash.pm:

[23:24] <dalek> rakudo/nom: Slice off one frame for each Hash.ASSIGN-KEY

[23:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f0a45046d1

[23:27] *** BenGoldberg left
[23:28] *** wamba joined
[23:28] <dalek> roast/autarch/fix-Instant.perl: ade9e00 | autarch++ | S02-types/instants-and-durations.t:

[23:28] <dalek> roast/autarch/fix-Instant.perl: Add a test for the round trip of Instant via .perl.EVAL

[23:28] <dalek> roast/autarch/fix-Instant.perl: review: https://github.com/perl6/roast/commit/ade9e00fe1

[23:29] <AlexDaniel> lizmat++ # I love that stuff

[23:30] <AlexDaniel> progress!

[23:30] <autarch> if someone wants to give me access I could close the RT bugs I'm fixing

[23:31] <AlexDaniel> autarch: access to what?

[23:31] *** KotH left
[23:31] <AlexDaniel> RT?

[23:31] <autarch> access to edit tickets in rt

[23:31] <AlexDaniel> autarch: ok, so you have to create bitcard account

[23:31] <autarch> I have a bitcard account

[23:32] <autarch> I just don't have rights to the queue

[23:32] <AlexDaniel> autarch: what do you see when you log in?

[23:32] <autarch> I see a bunch of RT stuff ;)

[23:32] <AlexDaniel> hmmm

[23:32] <autarch> I don't have perms to manage the queue, basically

[23:32] <AlexDaniel> ah!

[23:33] <AlexDaniel> right…

[23:34] <autarch> although that begs the question of whether bugs should be marked resolved when a fix is pushed or when that fix is in a release

[23:34] <AlexDaniel> right, so it seems like you can close your own stuff but can't close other tickets, hmm

[23:35] *** kjs_ joined
[23:36] *** KotH joined
[23:40] <dalek> roast/autarch/fix-Instant.perl: 8650ef2 | autarch++ | S02-types/instants-and-durations.t:

[23:40] <dalek> roast/autarch/fix-Instant.perl: Add a test for the round trip of Instant via .perl.EVAL

[23:40] <dalek> roast/autarch/fix-Instant.perl: review: https://github.com/perl6/roast/commit/8650ef2979

[23:42] <autarch> lizmat: PRs made

[23:43] *** azawawi joined
[23:43] <azawawi> hi

[23:44] <azawawi> https://github.com/azawawi/atom-perl6-editor-tools#context-sensitive-help   # animated gif screenshot to explain what it does... ctrl-f5 to refresh if needed

[23:45] <dalek> rakudo-star-daily: 0e0c7c8 | coke++ | log/ (9 files):

[23:45] <dalek> rakudo-star-daily: today (automated commit)

[23:45] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/0e0c7c87e8

[23:47] *** azawawi left
[23:50] <Hotkeys> wait so what did github do?

[23:51] *** JRaspass left
[23:56] *** atweiden joined
[23:56] <lizmat> autarch: commented on PR

