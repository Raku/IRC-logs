[00:00] *** eyck left
[00:01] *** eyck joined
[00:03] *** mvorg left
[00:03] <Hotkeys> .trans sure has some weird behaviour

[00:04] <Hotkeys> m: say "a123b12332c".trans(<23> => <t>); say "a123b12332c".trans(<23 a> => <t a>);

[00:04] <camelia> rakudo-moar c322e1: OUTPUT«a1ttb1ttttc␤a1tb1t32c␤»

[00:04] <Hotkeys> it can replace matched strings but only if the match array has > 1 elems?

[00:05] <Hotkeys> my matched strings I mean more than a single character

[00:05] <Hotkeys> s/my/by/

[00:05] *** mcmillhj joined
[00:09] *** ovibos joined
[00:10] <unmatched}> probably some hysterical raisings to do with perl 5's tr/// that only does single-char replacements.

[00:10] <unmatched}> rasins too

[00:10] *** mcmillhj left
[00:13] *** raiph left
[00:14] *** Khisanth joined
[00:17] *** mcmillhj joined
[00:18] *** pierre_ joined
[00:18] *** aries_liuxueyang joined
[00:19] *** Nex6 left
[00:19] <konobi> lo

[00:19] <yoleaux> 5 Aug 2016 20:04Z <pmurias> konobi: do you have any ideas what (program):1755 might refer to in a profile I'm getting from v8?

[00:20] <unmatched}> hel

[00:21] *** mcmillhj left
[00:32] *** canopus left
[00:33] *** mcmillhj joined
[00:38] *** mcmillhj left
[00:39] *** canopus joined
[00:41] <TEttinger> unicode request: curse tablet emoji http://www.qwantz.com/index.php?comic=2866

[00:42] <TEttinger> like a whole emoji that describes a request of a higher (or lower) power to have your enemy suffer in incredibly detailed ways. probably a whole supplementary plane, you could go nuts

[00:43] *** mcmillhj joined
[00:44] *** harovali joined
[00:48] *** kshannon_ left
[00:48] *** mcmillhj left
[00:55] *** grondilu joined
[00:58] *** mcmillhj joined
[01:01] *** jack_rabbit left
[01:03] *** mcmillhj left
[01:10] *** mcmillhj joined
[01:12] *** lambd0x left
[01:15] *** mcmillhj left
[01:15] *** cog_ left
[01:16] <dalek> doc: 97a01da | (Wenzel P. P. Peppmeyer)++ | doc/Language/io.pod6:

[01:16] <dalek> doc: make examples compile

[01:16] <dalek> doc: review: https://github.com/perl6/doc/commit/97a01daf42

[01:20] *** Sgeo__ joined
[01:24] *** Sgeo_ left
[01:26] *** mcmillhj joined
[01:30] *** mcmillhj left
[01:32] *** ponpon is now known as ponbiki

[01:32] *** pduh joined
[01:33] *** pduh left
[01:34] *** kurahaupo_ joined
[01:37] *** kurahaupo left
[01:38] *** sena_kun left
[01:40] *** mcmillhj joined
[01:45] *** mcmillhj left
[01:45] *** ilbot3 left
[01:47] *** ilbot3 joined
[01:50] *** kurahaupo_ left
[01:50] *** kurahaupo joined
[01:51] *** kurahaupo left
[01:51] *** mcmillhj joined
[01:55] *** mcmillhj left
[01:59] *** kurahaupo joined
[01:59] *** kurahaupo left
[02:00] *** mohae joined
[02:03] *** mohae_ left
[02:05] *** Actualeyes joined
[02:07] *** adu joined
[02:10] <dalek> doc: 1606ce2 | (Wenzel P. P. Peppmeyer)++ | doc/Language/functions.pod6:

[02:10] <dalek> doc: make examples compile, fix broken examples

[02:10] <dalek> doc: review: https://github.com/perl6/doc/commit/1606ce27dc

[02:11] *** cpage_ joined
[02:23] *** noganex joined
[02:26] *** noganex_ left
[02:33] *** cbk left
[02:33] *** john51 joined
[02:40] *** mcmillhj joined
[02:46] *** mcmillhj left
[02:53] *** grondilu left
[02:54] *** cdg joined
[02:59] *** cdg left
[03:02] *** pierre_ left
[03:02] *** pduh joined
[03:03] *** pduh left
[03:10] *** pierre_ joined
[03:14] *** mcmillhj joined
[03:18] *** mcmillhj left
[03:18] *** Ben_Goldberg left
[03:27] *** mcmillhj joined
[03:32] *** mcmillhj left
[03:35] *** rpburkholder joined
[03:35] *** wamba joined
[03:40] *** j75 joined
[03:45] *** bob778 joined
[03:45] *** nowan left
[03:45] *** bob777 left
[03:45] *** bob778 is now known as bob777

[03:46] <j75> Why does this work as a one liner ls | perl6 -e 'for (lines) { say $_ }' but ls | perl6 -e 'for lines { say $_ }' doesn't work? Why is it necessary to put lines in parentheses?

[03:46] *** labster left
[03:46] *** labster joined
[03:47] *** autarch left
[03:47] *** gregf_ left
[03:47] *** nowan joined
[03:47] *** gypsydav15 left
[03:47] *** holyghost left
[03:48] *** holyghost joined
[03:48] *** autarch joined
[03:49] *** gregf_ joined
[03:49] *** hoelzro left
[03:49] *** woodruffw left
[03:50] *** hoelzro joined
[03:50] <gfldex> m: sub f(&c){}; f {}; for f {} {};

[03:51] <gfldex> j75: ^^^ do you see the problem?

[03:51] *** raiph joined
[03:51] *** japhb left
[03:51] <gfldex> m: .say for lines;

[03:51] *** japhb joined
[03:52] *** Cabanossi left
[03:52] <gfldex> and this is how you solve this problem

[03:52] <j75> .say for lines works but why does that not require (lines)

[03:52] <j75> @gfldex not sure I fully follow

[03:52] <gfldex> because that form wont have a block as a 2nd "parameter" to for

[03:52] <camelia> rakudo-moar 9bfbab: OUTPUT«Type check failed in binding to &c; expected Callable but got Hash (${})␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:52] <camelia> rakudo-moar 9bfbab: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤I mo dhiaidh bhí gleanntáin ghlas’ G…»

[03:53] *** Cabanossi joined
[03:53] <j75> but it's ok to call for @array ?

[03:53] *** pierre_ left
[03:53] <gfldex> subscripts are not separated by a space, so that case is fine

[03:54] *** gypsydave5 joined
[03:54] *** woodruffw joined
[03:54] *** woodruffw left
[03:54] <gfldex> m: my @a; for @a{1} {};

[03:54] <camelia> rakudo-moar 9bfbab: ( no output )

[03:54] *** woodruffw joined
[03:54] *** woodruffw left
[03:55] *** woodruffw joined
[03:56] <j75> gfldex so what exactly does the () around lines do ? when called for (lines) { }

[03:56] <gfldex> m: for lines() { .say }

[03:56] <camelia> rakudo-moar 9bfbab: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤I mo dhiaidh bhí gleanntáin ghlas’ G…»

[03:56] <gfldex> it makes your intend clear not to call lines with a block as it's first parameter

[03:59] <j75> for lines() { .say } makes it clearer what's going on. is lines a sequence?

[03:59] <j75> gfldex appreciate your help

[03:59] *** bob777 left
[03:59] <gfldex> m: say lines().^name;

[03:59] <camelia> rakudo-moar 9bfbab: OUTPUT«Seq␤»

[03:59] *** pierre_ joined
[04:00] *** mcmillhj joined
[04:00] *** bob777 joined
[04:03] <MasterDuke> is there a way to create a single item list literal with angle quotes?

[04:03] <MasterDuke> m: <abc>.WHAT.say; <a b c>.WHAT.say; < abc >.WHAT.say

[04:03] <camelia> rakudo-moar 9bfbab: OUTPUT«(Str)␤(List)␤(Str)␤»

[04:04] *** pierre_ left
[04:05] <MasterDuke> i know the first form will always be a Str, but is there some other way to do it?

[04:05] *** mcmillhj left
[04:05] <MasterDuke> m: ['abc'].WHAT.say

[04:05] <camelia> rakudo-moar 9bfbab: OUTPUT«(Array)␤»

[04:07] <MasterDuke> that works, but is there a way without having to use both quotes and brackets

[04:07] *** harovali left
[04:07] *** Nex6 joined
[04:08] *** harovali joined
[04:08] *** skids left
[04:13] *** Nex6 left
[04:16] *** mcmillhj joined
[04:16] *** Nex6 joined
[04:18] *** pierre_ joined
[04:21] *** mcmillhj left
[04:22] *** khw left
[04:22] *** pierre_ left
[04:27] *** Cabanossi left
[04:28] *** pierre_ joined
[04:28] <gfldex> m: <abc>.Array.^name.say

[04:28] <camelia> rakudo-moar 9bfbab: OUTPUT«Array␤»

[04:28] <gfldex> m: my @a = <abc>; @a.^name.say;

[04:28] <camelia> rakudo-moar 9bfbab: OUTPUT«Array␤»

[04:29] <gfldex> MasterDuke: depends on where you want to use it

[04:30] *** Cabanossi joined
[04:31] *** mcmillhj joined
[04:32] *** pierre_ left
[04:33] *** itaipu joined
[04:34] *** jack_rabbit joined
[04:36] *** mcmillhj left
[04:37] *** wamba left
[04:41] *** Nex6 left
[04:44] *** sufrostico joined
[04:45] *** mcmillhj joined
[04:45] *** pierre_ joined
[04:50] *** mcmillhj left
[04:50] *** solarbunny left
[04:50] *** pierre_ left
[04:55] *** itaipu left
[05:01] *** solarbunny joined
[05:04] *** pierre_ joined
[05:08] *** pierre_ left
[05:17] *** pierrot left
[05:17] *** pierrot joined
[05:18] *** Wiertek joined
[05:22] *** pierre_ joined
[05:22] *** mcmillhj joined
[05:26] *** mcmillhj left
[05:26] *** pierre_ left
[05:31] *** pierre_ joined
[05:32] *** Xliff_ joined
[05:32] *** pierre_ left
[05:32] *** mcmillhj joined
[05:33] *** sufrostico left
[05:35] *** Xliff left
[05:36] *** pduh joined
[05:37] *** mcmillhj left
[05:38] *** pduh left
[05:39] *** pduh joined
[05:40] *** pierre_ joined
[05:41] *** dsp- joined
[05:42] *** zhmylove_ joined
[05:43] *** Spot___ joined
[05:43] <gfldex> m: say ¬10;

[05:43] <camelia> rakudo-moar 9bfbab: OUTPUT«5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3say7⏏5 ¬10;␤Bogus postfix␤at <tmp>:1␤------> 3say 7⏏5¬10;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        s…»

[05:43] *** zostay_ joined
[05:43] *** w4and0er96_ joined
[05:43] *** mindos_ joined
[05:43] <gfldex> m: say ∨10;

[05:43] <camelia> rakudo-moar 9bfbab: OUTPUT«5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3say7⏏5 ∨10;␤Bogus postfix␤at <tmp>:1␤------> 3say 7⏏5∨10;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤       …»

[05:43] <gfldex> m: say 8∨10;

[05:43] <camelia> rakudo-moar 9bfbab: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3say 87⏏5∨10;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤        sta…»

[05:44] *** pierrot_ joined
[05:44] *** pierre_ left
[05:45] *** japanoise_ joined
[05:46] *** telex left
[05:46] *** telex joined
[05:46] *** Juerd_ joined
[05:48] *** Wiertek left
[05:48] *** bisectable6 left
[05:48] *** zostay left
[05:48] *** Spot__ left
[05:48] *** dsp-_ left
[05:48] *** mindos left
[05:48] *** JimmyZ left
[05:48] *** w4and0er96 left
[05:48] *** pierrot left
[05:48] *** zhmylove left
[05:48] *** japanoise left
[05:48] *** SmokeMachine____ left
[05:48] *** avenj left
[05:48] *** stigo left
[05:48] *** Juerd left
[05:48] *** avenj joined
[05:48] *** avenj left
[05:48] *** avenj joined
[05:48] *** Juerd_ is now known as Juerd

[05:48] *** SmokeMachine____ joined
[05:48] *** Spot___ is now known as Spot__

[05:48] *** zostay_ is now known as zostay

[05:49] *** mindos_ is now known as mindos

[05:49] *** JimmyZ joined
[05:49] *** w4and0er96_ is now known as w4and0er96

[05:49] *** stigo joined
[05:49] *** pduh left
[05:53] *** mcmillhj joined
[05:58] *** mcmillhj left
[05:58] *** harovali left
[05:58] *** pierre_ joined
[06:03] *** pierre_ left
[06:05] *** rpburkholder left
[06:05] *** movl left
[06:09] *** movl joined
[06:10] *** mcmillhj joined
[06:14] *** pduh joined
[06:14] *** mcmillhj left
[06:16] *** pierre_ joined
[06:17] *** adu left
[06:21] *** pierre_ left
[06:24] *** pduh left
[06:26] *** mcmillhj joined
[06:28] <mr-foobar> is there a thread pool abstraction library ?

[06:30] *** firstdayonthejob joined
[06:30] *** Wiertek joined
[06:30] <timotimo> what do you mean "abstraction library"?

[06:30] <timotimo> there is a thread pool

[06:30] <timotimo> what do you need abstracted about it?

[06:31] *** mcmillhj left
[06:35] *** pierre_ joined
[06:35] <timotimo> maybe it'd be a good start to read up on concurrency in perl6 and then see if the question about a thread pool abstraction library still stands

[06:35] <timotimo> https://docs.perl6.org/language/concurrency

[06:36] *** firstdayonthejob left
[06:38] *** darutoko joined
[06:38] *** mcmillhj joined
[06:39] *** pierre_ left
[06:41] *** Wiertek left
[06:43] *** mcmillhj left
[06:52] *** pduh joined
[06:53] *** chienjo joined
[06:53] *** pierre_ joined
[06:54] *** chienjo left
[06:57] *** pierre_ left
[06:59] *** pierre_ joined
[07:06] *** pduh left
[07:07] *** pduh joined
[07:08] *** pduh left
[07:08] *** pduh joined
[07:11] *** pduh left
[07:15] *** sno left
[07:30] *** brrt joined
[07:34] *** kid51 left
[07:34] <j75> is the an array method similar to select in ruby?

[07:35] <timotimo> i didn't know arrays had a method named "an"?

[07:36] <brrt> j75: i think (not a ruby guy) we call that rep

[07:36] <brrt> grep

[07:36] <j75> ruby has a select method for arrays does perl have something similar?

[07:36] <j75> brrt grep i think it what I am looking for thanks!

[07:36] <brrt> yw :-)

[07:43] *** movl left
[07:44] *** zakharyas joined
[07:46] *** dakkar joined
[07:47] *** brrt left
[07:54] *** rindolf joined
[07:57] *** RabidGravy joined
[07:57] *** CIAvash joined
[07:58] <j75> is there a method that combines grep and map? or do i have to use grep them map ?

[08:00] <nine> use grep then map

[08:00] <nine> It makes your code easier to follow anyway

[08:01] <j75> nine, thanks thought it'd be a little more efficient if i could do them at the same time rather than iterate a second time

[08:01] *** movl joined
[08:03] <nine> j75: never ever try to guess at the efficiency of your code. Always benchmark. In this case your error is in assuming that the chained .grep(...).map(...) will iterate twice, which it won't.

[08:03] *** Administrateur joined
[08:04] <j75> nine, great to know! Thanks for the clear explanation

[08:06] <nine> j75: both grep and map will actually just return an iterator. The real work happens once you ask for values (e.g. by assigning the result to an array). The assignment will ask map for the next value which in turn will ask grep for the next value. One by one.

[08:07] <nine> That said, if you really, really insist on doing everything in the map, you can use loop control like next and last in the map, too.

[08:07] *** Administrateur left
[08:08] <j75> Understood, thanks again!

[08:11] *** zengargoyle joined
[08:17] <El_Che> morning

[08:27] *** pierre_ left
[08:31] *** sno joined
[08:32] *** j75 left
[08:32] <gregf_> j75: [*1..10].select(&:even?)  == [1..10].grep(* %% 2  )

[08:34] *** pierre_ joined
[08:36] *** pierre_ left
[08:36] *** pierre_ joined
[08:46] *** mvorg joined
[08:55] *** torbjorn joined
[08:59] *** eyck left
[09:06] *** eyck joined
[09:18] *** jkramer left
[09:37] <dalek> doc: 3bcbc19 | (Wenzel P. P. Peppmeyer)++ | doc/Language/unicode_entry.pod6:

[09:37] <dalek> doc: show how to use digraphs (and extend them) in GNU Screen

[09:37] <dalek> doc: review: https://github.com/perl6/doc/commit/3bcbc19719

[09:42] <gfldex> how to do font linking on windows. This works quite well. I linked GNU unifont to FreeMono to get pretty much all possible glyphs. https://msdn.microsoft.com/en-us/goglobal/bb688134.aspx

[09:52] <TEttinger> gfldex, interesting

[09:52] <TEttinger> there's a unifont upper too

[09:59] <gfldex> can you read this: Ⓟⓔⓡⓛ ⑥ ?

[09:59] <timotimo> yeah

[10:03] *** pmurias joined
[10:04] <TEttinger> yeah, I default to unifont in IRC

[10:05] *** rand12418093821 left
[10:17] *** lambd0x joined
[10:17] <lambd0x> Hi fellas!

[10:17] <unmatched}> Just fellas? :)

[10:17] <lambd0x> unmatched}: :P

[10:18] <lambd0x> How you're doing?

[10:18] <unmatched}> Just woke up and hung over.

[10:18] <lambd0x> unmatched}: too.

[10:20] <unmatched}> m: say 'test'

[10:20] <camelia> rakudo-moar 9bfbab: OUTPUT«test␤»

[10:20] <unmatched}> s: &say, \('test')

[10:20] <SourceBaby> unmatched}, Sauce is at https://github.com/rakudo/rakudo/blob/9bfbab9/src/core/io_operators.pm#L22

[10:21] <unmatched}> \o/ it's alive

[10:22] <timotimo> SourceBaby: source

[10:22] <SourceBaby> timotimo, See: https://github.com/zoffixznet/perl6-sourceable

[10:25] *** pierre_ left
[10:33] *** pierre_ joined
[10:34] <lambd0x> finally got my little code running for multiplying matrixes after reading both from a file. \o/

[10:34] *** AlexDaniel joined
[10:34] <lambd0x> guys is there a better way to the same: http://bpaste.net/show/6194ad04de36

[10:34] <lambd0x> ?

[10:35] <timotimo> is the code for first matrix the same code as for second matrix? itlooks that way

[10:35] <timotimo> just using @B instead of @A

[10:36] <nine> lambd0x: it could probably be a lot faster if you used native types. Assuming you can get away with it?

[10:36] <gregf_> implement a function that takes and presents a result of a x b where ,b are square matrices of order n

[10:36] <lambd0x> nine: haven't seen them, where could I learn about it?

[10:36] <AlexDaniel> committable6: HEAD https://bpaste.net/raw/6194ad04de36

[10:37] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[10:37] <committable6> AlexDaniel, ¦«HEAD»: Cannot pop from an empty Array␤  in block <unit> at /tmp/z2wK0MsS7J line 4␤␤Actually thrown at:␤  in block <unit> at /tmp/z2wK0MsS7J line 4␤ «exit code = 1»

[10:37] <unmatched}> lambd0x: the most obvious thing is to save matrix reading code in a function and shorten your program by like half :)

[10:37] <timotimo> so why not either make it a function, or just put a loop around the thing

[10:37] *** pierre_ left
[10:38] <lambd0x> unmatched}: will try that. 

[10:40] *** labster left
[10:41] <unmatched}> lambd0x: what's the input file?

[10:42] <gregf_> wow, thats handy @arr[ind1; ind2] = <whatever>

[10:44] <lambd0x> unmatched}: something like this: http://bpaste.net/show/63c391aa39e7 .It's created by another code of mine that generates random order matrixes (both will always have the same order)

[10:48] <unmatched}> And always two matrices? Looks like a fun Grammar excersise there :)

[10:50] <lambd0x> unmatched}: In this case I limited it to be yes. Because I wasn't sure how to do it at first. After I get it nice maybe I'll try augmenting the amount of matrixes :P

[10:51] *** japanoise_ is now known as japanoise

[10:51] <AlexDaniel> MasterDuke: alright, it's time to make it possible to set STDIN of all our bots

[10:55] <unmatched}> lambd0x: and if your other script can change the format of the files, I think it'd be easier to avoid specifying the length and instead specify a separator between matrices.

[10:57] <lambd0x> unmatched}: one thing a time. But true :)

[10:57] <unmatched}> :)

[10:58] *** brrt joined
[11:01] *** kaare_ joined
[11:07] *** neuraload joined
[11:11] <lambd0x> wow, better indeed not to work specifying sizes haahah things get more clean and sweet :P

[11:11] *** harrison joined
[11:12] <lambd0x> here's a somewhat improved version of my earlier code: http://bpaste.net/show/a3b870198815

[11:12] *** harrison is now known as Guest54701

[11:16] * stmuk_ does YAPC slides

[11:19] <lambd0x> something else inprovable in my script guys?

[11:20] *** Guest54701 left
[11:20] *** brrt left
[11:21] <timotimo> no need for $file.get.words to have parenthesis

[11:23] <stmuk_> Perl v6.0.0 required--this is only v5.22.1

[11:23] *** trnh joined
[11:23] <stmuk_> I assume perl 5 needs fixing if we aren't using 6.0.0?

[11:23] *** trnh left
[11:23] *** trnh joined
[11:24] *** brrt joined
[11:24] <lambd0x> timotimo: ok

[11:25] <timotimo> you can use the value of the outer for loop instead of manually incrementing $i

[11:26] *** neuraload left
[11:26] *** sena_kun joined
[11:27] <dalek> doc: 8f8e9b5 | Altai-man++ | doc/Language/objects.pod6:

[11:27] <dalek> doc: Index BUILDALL

[11:27] <dalek> doc: review: https://github.com/perl6/doc/commit/8f8e9b5022

[11:30] <lambd0x> timotimo: I don't know how to do this. Was trying it earlier eheh

[11:31] <lambd0x> lambd0x: have a lot to learn in perl6. It's fun.

[11:31] <timotimo> for ^$o -> $i { ... }

[11:32] *** heatsink joined
[11:32] *** mohae left
[11:43] <lambd0x> timotimo: thanks.

[12:06] *** brrt left
[12:09] *** sufrostico joined
[12:12] *** sufrostico left
[12:14] *** buggable left
[12:15] *** buggable joined
[12:16] *** [Coke] left
[12:17] *** [Coke] joined
[12:17] *** kid51 joined
[12:19] *** bazzaar joined
[12:20] <bazzaar> \o perl6

[12:20] <unmatched}> \o

[12:22] <bazzaar> .oO I am wondering why any Perl 6 introduction course would not use the excellent Perl6 Introduction by Naoum Hankache as it's backbone ? 

[12:23] <unmatched}> :/

[12:23] *** movl left
[12:23] *** movl joined
[12:25] <unmatched}> benchable: sleep 60*10

[12:25] <benchable> unmatched}: ¦«sleep»:Cannot find this revision

[12:25] <[Coke]> bazzaar: is there a course in particular you think should have done that?

[12:25] <unmatched}> committable6: HEAD sleep 60*10

[12:25] <unmatched}> committable6: HEAD say 'meow'

[12:26] <committable6> unmatched}, ¦«HEAD»: «timed out after 10 seconds, output»:  «exit signal = SIGHUP (1)»

[12:26] <committable6> unmatched}, ¦«HEAD»: meow

[12:27] <bazzaar> Having a themed set of code problems for users to tackle, giving the users 5-10mins breaks to research the appropriate section of Nauom's tutorial, has got to be the right approach, hasn't it?'s tutorial

[12:27] * unmatched} wouldn't want to attend such a course.

[12:27] *** trnh left
[12:28] *** grondilu joined
[12:28] <mst> unmatched}: hrm?

[12:29] <mst> why wouldn't reverse engineering slides and materials and treating perl6intro as course notes work?

[12:29] *** kid51 left
[12:29] <bazzaar> [Coke] ... yes ....?,?@

[12:30] <unmatched}> 'cause I can just do it at home, at my leasure, without having to race for the 5-10min mark. I can equally go through codeeval.com's problems using perl6intro as course notes

[12:30] <unmatched}> I'd expect the course to teach me something and the 5-10min window is where I try to apply my new knowledge to build something

[12:31] <[Coke]> bazzaar: ok, which one are you thinking of that didn't do that?

[12:31] *** kid51 joined
[12:32] *** canopus left
[12:33] *** perlpilot joined
[12:34] <bazzaar> unmatched}: yes I know that anyone could do that, but when I look for a video on Perl6 introduction to work through, in a structured way, with some code problems that tie together, then I don't get that, I get something else

[12:34] <[Coke]> bazzaar: I don't think anyone is making a coherent set of videos for that sort of thing, no.

[12:34] <mst> bazzaar: oh, you want a *video*, not a course?

[12:34] <mst> you never said that

[12:35] <[Coke]> mst: does anyone other than gabor do that regularly on the p5 side?

[12:36] <mst> not really. I do wish we had somebody who could actually write working perl doing videos, but I've not managed to convince anybody yet

[12:36] *** edwinsage joined
[12:36] <bazzaar> [Coke]: I don't want to point the finger, what I want is the fabulous product that is perl6, to be marketed and promoted in the best possible way

[12:36] *** mcmillhj joined
[12:36] <[Coke]> bazzaar: ok. you should lead with that, then. :)

[12:37] <[Coke]> also, please find us a marketer. :)

[12:37] <perlpilot> bazzaar: wanting that makes it partly your responsibility  :P

[12:37] <mst> bazzaar: so, start trying to make a video from perl6intro.com and let people help

[12:37] * [Coke] notes down one request for video learnin'.

[12:37] <mst> [Coke]: you know TPF has like an entire marketing team, right? just only liz and wendy seem to ever talk to them

[12:38] <unmatched}> bazzaar: well, I take it it's an offer then? We do have a marketing repo in dire need of contribution: https://github.com/perl6/marketing/

[12:38] * unmatched} tries to imagine storing videos in a github repo :o

[12:38] <[Coke]> mst: no, I had no idea.

[12:39] <[Coke]> mst: let me downgrade to "very little idea"

[12:39] <mst> [Coke]: mdk gives talks every couple years reminding people they exist

[12:39] <mst> but without the community saying they want stuff done

[12:39] <mst> TPF's treasurer (Dan Wright) will never allocate an actual budget for it

[12:39] <[Coke]> mst: I have no way to get to the YAPCs these days. :|

[12:40] <mst> and no access to youtube? :)

[12:40] *** wamba joined
[12:40] <bazzaar> O'Reilly make the video's, the perl6 community say 'who / what' should be the official approach / communicators, the perl6 code isn't being left to chance, why should it's marketing

[12:40] *** canopus joined
[12:40] <mst> ...

[12:40] <mst> bazzaar: that's not how free software works

[12:40] <mst> unless you're planning to personally pay O'Reilly to do that

[12:40] <[Coke]> bazzaar: I think you misunderstand perl 6 and tpf's relationship with ORA.

[12:40] <mst> because they really don't care much about perl

[12:40] <mst> they're a conference company now

[12:41] <mst> perl6's code is handled by volunteers. so will its marketing.

[12:41] <DrForr> *cough* https://www.safaribooksonline.com/library/view/the-perl-6/9781491968321/

[12:41] <unmatched}> :)

[12:41] * mst wonders why people are always insistant that marketing should be magically done by other people

[12:42] <mst> even though they know that code doesn't get written unless somebody writes it

[12:42] <mst> I wonder if this is the dilbert principle thingy in reverse

[12:42] <mst> "I hear mauve gets the most pageviews"

[12:42] * [Coke] has found it's much easier to find good developers willing to donate their time than it is to find good marketers.

[12:42] <unmatched}> lol

[12:43] <[Coke]> bazzaar: anyway, yes, "we suck at marketing" is our slogan, so we get it. Constructive suggestions welcomed on how to improve the situation.

[12:43] <mst> [Coke]: well, mdk tries, but then TPF won't let him have any money to market *with*

[12:43] <unmatched}> Stopping saying "we suck at marketing" would be the good first step :)

[12:43] <[Coke]> unmatched}: I tOLD YOU we WER Ebad at THIS OK!?

[12:44] <bazzaar> I am not criticising the open source effort, that is not my point. The best perl6 video's (sound and vision) are the ones newcomers will be drawn to.

[12:44] <[Coke]> mst: so there's half a dozen people on an unfunded committee?

[12:44] <[Coke]> bazzaar: ok. so next step: who is going to make and publish and market those videos?

[12:44] <bazzaar> they need to be effective products

[12:45] <unmatched}> heh

[12:45] <DrForr> Good quality perl 6 videos will be good? Who knew?... 

[12:45] <[Coke]> mst: frustrating! (glad i'm on the one that gets some cash occasionally!)

[12:45] <mst> [Coke]: pretty much. he manages to get money for print materials but generally has to ask on a per-print-run basis because TPF won't give them a budget

[12:45] <mst> yeah, well, welcome to the world according to Dan Wright, where nobody else is allowed to decide things ever ;)

[12:45] <[Coke]> mst: it's kind of how we do grants. we never know how much money we have, we have to ask at the end of each round what we can afford to fund.

[12:46] <[Coke]> ... as I understand it.

[12:46] <[Coke]> that's actually one level above my pay grade, which I've been fine to keep there.

[12:47] <mst> yeah, thing is, nobody except me appears to think this is worth complaining about, and if it's -only- me, it's easy to dismiss as 'mst is being an ass again'

[12:47] <mst> so we continue to not actually have any way to get to functional marketing

[12:47] <mst> and there's basically nothing I can do about it if nobody else will bother speaking up :(

[12:48] <unmatched}> bazzaar: IMO that's too expensive to be the main focus of Perl 6 marketing. And tossing around several hundreds of gigs of raw data also makes collaboration by volunteers difficult.

[12:49] <DrForr> That's why I've said 'fuck it' and started doing stuff. It's *not hard* to get in to these conferences, hell, if *I* cn.

[12:49] *** mcmillhj left
[12:49] <bazzaar> I am speaking up, I am going out on a limb just by voicing my thoughts on this

[12:49] *** itaipu joined
[12:50] <unmatched}> bazzaar: for comparison, the last 3.5 minute video I shot at work took two hours to shoot (included decisions on how it should be shot), took me about 30 minutes to edit, with the intro theme already done, and my repo for that job is 2.55GB

[12:50] <mst> bazzaar: you're going out on a limb telling other people what to do, and refusing to help

[12:50] <mst> bazzaar: that's not how open source works

[12:51] <mst> unmatched}: hey, do youhave a good canonical example of perl6's errors being awesome? I'm trying to wow a rust dev

[12:51] <[Coke]> m: my Rag $a;

[12:51] <camelia> rakudo-moar 76be77: OUTPUT«5===SORRY!5===␤Type 'Rag' is not declared. Did you mean any of these?␤    Rat␤    Bag␤␤at <tmp>:1␤------> 3my Rag7⏏5 $a;␤Malformed my␤at <tmp>:1␤------> 3my7⏏5 Rag $a;␤␤»

[12:52] <unmatched}> mst: funny that you mention, I kind thought rust's new error thing they announced was kinda awesome... awesomer than maybe even Perl 6 :)

[12:52] <bazzaar> all I'm saying is, if perl6 related talks/ tutorials like those at Oscon are being professionally recorded, then it is imperative that there is coordinatination within the opensource community about how the product should be

[12:52] <unmatched}> bazzaar: you got cut off after "the product should be"

[12:53] <[Coke]> mst: mailed mdk

[12:53] <[Coke]> er, mk, whatever his MI is.

[12:53] <mst> [Coke]: note if I've oversold what's doable here that's entirely my fault

[12:54] <mst> I've been spending so long just trying to get people to talk to him in the first place that I may've garbled what is/isn't doable

[12:54] <bazzaar> mst: I havn't refused to help, I have helped in a minor way previously bringing to light some bugs in the perl6 grammar and DBIish

[12:54] <mst> I hope, under the circumstances, if that's the case, you'll forgive me

[12:54] <unmatched}> We want a giant billboard! :D

[12:55] <mst> bazzaar: training courses don't generally get recorded because the trainers need to get paid, sadly

[12:55] <[Coke]> mst: eh, just pinging him to start a conversation, no worries.

[12:56] <DrForr> bazzaar: You have control of your own presentation and style, that's it.

[12:56] <mst> bazzaar: ok, but "we need to do X" type things don't generally help. "I think we should do X, and here's how I propose to start making that happen" helps

[12:56] *** Actualeyes left
[12:56] <mst> bazzaar: start doing stuff and then try and rope other people in

[12:57] <pmurias> speaking of rust errors, https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html is kindof interesting

[12:57] <unmatched}> bazzaar: in other words, we don't suffer from lack of ideas :) It's the peoplehours and finances that are the limiting factors

[12:57] <mst> yes, that's what led to me asking

[12:57] <mst> unmatched}: anyway, got a good example?

[12:57] <AlexDaniel> .oO( rope! That's what we are good at )

[12:57] <unmatched}> m: say Any eq $x

[12:57] <camelia> rakudo-moar 76be77: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$x' is not declared␤at <tmp>:1␤------> 3say Any eq 7⏏5$x␤»

[12:57] <unmatched}> m: say Any eq 'x'

[12:57] <camelia> rakudo-moar 76be77: OUTPUT«Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.  in block <unit> at <tmp> line 1␤False␤»

[12:58] *** markk joined
[12:58] <unmatched}> mst: nothing amazing comes to mind.

[12:58] <markk> [Coke]: figured I'd just pop in here rather than keep it to email

[12:59] <markk> The people I have worked with in the Perl6 community have generally been Liz and Wendy

[12:59] <markk> And one or two others at conferences

[12:59] <AlexDaniel> mst: perhaps try searching for “did you mean” in rakudo?

[12:59] *** pierre_ joined
[13:00] <mst> pmurias: possibly also of interest -

[13:00] <mst> 13:59 <nox> Most of our stuff comes from Elm, especially the layout for  --explain with actual English sentences and whatnot.

[13:00] <mst> 13:59 <nox> http://elm-lang.org/blog/compiler-errors-for-humans

[13:00] <markk> As mst pointed out the biggest block at the moment is that I have to present a case for funds each time. Technically I spend and they refund me, however I think I am still owed on the last print run (perl 6 and perl 5 stickerts and Perl 6 pamphlets) and I didn't get refunded for FLOSS yet

[13:00] <markk> Some of this is my fault for not aggressively chasing it, Dan is a volunteer as well

[13:00] <jnthn> mst: The ones that do Leavensh^WLeven^WLichtenstein^Wedit distance to suggest what you maybe meant are kinda nice

[13:01] <jnthn> m: sai 42

[13:01] <camelia> rakudo-moar 76be77: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    sai used at line 1. Did you mean 'say'?␤␤»

[13:01] <markk> As for producing videos, again possible. What you need to work out is what you are trying to achieve

[13:01] <jnthn> m: class A { has $!x; method m() { $x } }

[13:01] <camelia> rakudo-moar 76be77: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$x' is not declared. Did you mean '$!x'?␤at <tmp>:1␤------> 3class A { has $!x; method m() { 7⏏5$x } }␤»

[13:01] <[Coke]> ok. I mean, I trust liz and wendy with our marketing more than any of the other people that just do dev. :)

[13:01] <markk> Do you want to promote Perl 6 or teach people how to use it - and don't say both. The issue with marketing thus far is that everyone wants to do it all

[13:02] <mst> I did mention that liz and wendy and mdk had been talking

[13:02] <[Coke]> markk: Bot---- oh. :)

[13:02] <markk> You need to have one goal for the whole campaign or you get the current mess which I have trouble solving without funds

[13:02] * mst shakes [Coke] :P

[13:02] <[Coke]> also, liz++ wendy++

[13:02] <DrForr> bazzaar: I'm one of two people that's presenting Perl 6 in conjunction with OSCON. I asked people what I should talk about, and the response I got meant I basically wrote my own material, because of being Warnocked.

[13:02] *** ptolemarch joined
[13:02] <markk> mst: I read the backlog that [Coke] sent me :)

[13:02] <mst> ah good

[13:03] <[Coke]> markk: I don't know enough about marketing to know which of those two choices is better.

[13:03] <markk> So what are you hoping to achieve?

[13:03] <perlpilot> [Coke]: teaching people how to use Perl 6 would be best IMGO

[13:03] <perlpilot> er, IMHO

[13:03] *** edehont joined
[13:03] <[Coke]> I would imagine we can teach people how to perl 6 with our current resources, though.

[13:03] <[Coke]> G... Godlike? ;)

[13:04] <markk> And teaching people may not get you more eyes looking at it

[13:04] <[Coke]> so, see, even perlpilot and I cannot agree. :)

[13:04] <perlpilot> yeah, that's it ;)

[13:04] *** Actualeyes joined
[13:04] <DrForr> And if I felt I was required to ask a committee of open source people to dictate my course content, I would ... have done nothing.

[13:04] <El_Che> DrForr: you rebel

[13:04] *** prammer joined
[13:04] <unmatched}> I'm hoping to achieve: we straighten out the whole "Name Issue". That is: people thinking Perl 6 is just some mild improvement over some old language that was popular in the 90s

[13:04] <mst> JFDI + -Ofun don't always produce the most co-ordinated results but they sure as heck produce results

[13:04] *** pduh joined
[13:05] <unmatched}> And I don't mean renaming anything, but getting people to know that Perl 6 is a new language. And it's the next "cutting edge" or whatever over the 25 year old Pythons and their kin

[13:06] <unmatched}> Once they know Perl 6 is something new and shiny and not a minor upgrade to an old language, I don't think we'll have trouble teaching people Perl 6.

[13:06] <markk> Doesn't help when Larry calls it a teenager, it isn't. It is 8 months old, just had a 15 year pregnancy was all

[13:07] <unmatched}> It's not uncommon that someone comments with "20 years too late, Perl 6" on my Perl 6 languages and that's entirely a matter of ignorance and that's what I'd aim the marketing efforts to change.

[13:07] *** pduh_ joined
[13:07] <unmatched}> *my Perl 6 articles

[13:07] <AlexDaniel> markk: O_O

[13:07] <markk> unmatched}: I think you might be devaluing people a little, it isn't new and shiny they go for at all, it is the missing out on the next big thing - Python and Javascript are neither new or shiny

[13:07] <mst> both postmodern *and* postmature

[13:07] *** Sgeo__ left
[13:07] <DrForr> bazzaar: On the other hand, if you're interested in proposing talks to OSCON, FOSDEM, SXSW &c I can give you a hand writing your roposals.

[13:08] <AlexDaniel> .oO( ropeosals )

[13:08] <nine> Speaking of budgets: we're now at 4500 Euros that my company did not contribute, because neither TPF, nor the YAPC Europe foundation seem to be capable of writing invoices which is the only thing I need in return for my 500 Euros / month budget.

[13:08] <El_Che> imho, one of DrForr's project would be a nice addition for the sexyness of perl6. The atom beautifier packages uses perltidy for reformatting perl5 and perl6, what does not really work for perl6. With madcapjake perlfe's and azawawi's linter, perl6 programming on atom looks ok

[13:08] <nine> [Coke]: ^^^

[13:09] *** cdg joined
[13:09] <markk> The aim is not to educate people, or change their minds, marketing will not do that for you. You have to tell them something, or repeat something, you have to make them want the thing, not give them a wiki article

[13:09] *** pduh left
[13:09] *** skids joined
[13:09] <markk> It's not about showing them, it is about moving them into a position where they want it

[13:09] <DrForr> El_Che: I'm getting whitespace handled this weekend.

[13:09] *** cdg left
[13:09] *** mcmillhj joined
[13:09] <bazzaar> DrForr: It is not for me to criticise an individuals efforts, my original question, was why when we have an excellent web tutorial, why was isn't it being used in the media products that newcomers will be drawn too

[13:10] *** cdg joined
[13:10] <markk> It is why you have one goal and all your targetting should be towards making that goal happen

[13:10] <perlpilot> markk: but telling them things without also having a way for them to easily learn and use Perl 6 seems a little useless to me.  It ends up with frustrated potential users.

[13:10] <markk> Coke is over a hundred and one of its marketing points is that it is a 'fresh taste'

[13:11] <perlpilot> "Perl 6 looks cool, but I can't figure out how to do anything without #perl6"

[13:11] <markk> perlpilot: I do not disagree

[13:11] <markk> perlpilot: but we were discussing marketing and what you are trying to achieve by it

[13:11] <markk> perlpilot: if you don't have the tools to support people learning then that's a different focus

[13:12] <El_Che> DrForr: I volunteer to at least have a go for patch to atom-beautifier when you think it's ok. Not reaaly a knowledgable at JS, but I had a look yesterday and the patch seems trivial (I wrote a small one to activiate for perl6fe as it's seen by atom as a different grammar than perl6)

[13:12] <markk> hence my question about what you are trying to achieve

[13:13] <unmatched}> markk: what if there's nothing to be missing out on? I mean, Perl 6 doesn't have a niche, it's also slow and can be frustratingly buggy.

[13:13] <perlpilot> A virtuous cycle of continual converts  ;)

[13:13] <DrForr> bazzaar: Well, find someone that does good voiceovers and write a script? I don't have a great voice, otherwise I'd volunteer.

[13:13] <markk> If we want shiny videos to educate then we should focus on that but that shouldn't be confused with getting people to look at them as those are not the same

[13:14] <markk> unmatched}: are you saying it has no usp whatsoever that I might as well use Perl5 or Python or JS?

[13:15] <[Coke]> markk: ... your line about Coke REALLY confused me for about 10 seconds. :)

[13:15] *** pduh joined
[13:15] <markk> Because I can do the flippant taglines 'perl6: just like every other language but slower and likely to crash' - not a great usp

[13:15] <[Coke]> nine, markk: markk, you are closer to the finance than I am, can you ping someone about nine's comment there?

[13:15] <markk> [Coke]: oops, yeah sorry

[13:16] <DrForr> Rust, Go and Swift users could ask the same question of perl6, python, js/node as well.

[13:16] <mst> nine: bet EPO could do it

[13:18] *** pduh is now known as pduh__

[13:18] <nine> This is so frustrating. I walked to management, asked for 500€/month for supporting free software and actually got it. Now wasting a lot of work time trying to find someone who can take the money seems excessive.

[13:18] <markk> nine: email [email@hidden.address] with your offer and I will get you an invoice for the money by the end of the day - just need the ammount, the frequency and a business address for the invoice

[13:18] *** pduh__ left
[13:18] <El_Che> nine++ : wow

[13:18] <perlpilot> markk++

[13:18] <markk> Fuck it, give me the details in query with your email address and I will get it done now

[13:18] <markk> nine++ btw

[13:19] <mst> nine: this would be one of the reasons I arranged for EPO to exist

[13:19] <mst> nine++

[13:19] *** Kaffe_ is now known as Kaffe

[13:19] <unmatched}> markk: I can't think of any. I like the language for many of its small things, like letting me avoid using brackets all over the place. Perl 6 doesn't have a great ecosystem. It's too slow for web apps. It's too buggy for me to recommend using it as a primary language *right now* for some large business up. All of this kinda leads to lack of volunteers and points to the question: how do we get more volunteers

[13:19] <unmatched}> to be interested in this language to make it faster and less buggy?

[13:19] <perlpilot> There's not enough ++ for nine.  (I'm overly enamored of Inline::Perl5 :)

[13:19] <markk> Nine - EPO will use the money to fund Perl-QA, CPAN Testers (all their servers) - Strawberry Perl (servers and bandwidth) and anything else that sounds good - we got MetaCPAN their server sponsorship as well

[13:20] <nine> markk: all sound like things that help us at work (maybe except for Strawberry), so I'd be completely ok with supporting them :)

[13:20] <unmatched}> s/business up/business app/; # can't type today >_<

[13:22] <unmatched}> Community might be Perl 6's USP, but I suspect it'll change as we grow larger and it doesn't stop people going "ROFLMAO LOOK! They made a new regex syntax that's not compatible with anything!!!!"

[13:23] <DrForr> FWIW Inline::Perl5 needs more publicity, at least as a transition solution from perl5.

[13:23] *** edwinsage left
[13:23] <unmatched}> Awesome concurency too. But all of the awesome bits are currently NIY, so it's hard to sell people on them, and points again to too few volunteers implementing things.

[13:23] <tadzik> yep, it's a huge marketing thing

[13:23] <mst> NIY?

[13:24] <mst> oh, not implemented yet

[13:24] <jnthn> Um, what exactly is not implemented yet?

[13:24] <jnthn> "Implemented but has a bunch of rough edges" we have in abundance.

[13:24] *** edwinsage joined
[13:24] <unmatched}> jnthn: all of the autothreading that's currently doesn';t autothread

[13:24] <mst> unmatched}: yeah, this is why I'm slowly grinding towards being able to get at grammars in a way that makes me happy, and then I'm going to trick myself and other people into using perl6 via that

[13:25] <DrForr> mst: So I need to finish up my ANTLR translator? :)

[13:25] <markk> DrForr: that's an internal thing though and you talking about it at conferences works well

[13:25] *** pduh_ left
[13:25] <unmatched}> jnthn: at least I got that feel from Damian's concurrency talk. Every time he pointed out something awesome like hyper ops or feeds, he then went and said it's NIY

[13:26] <jnthn> So there's a bunch of stuff that's both implemented and nice and he focused on a bunch of stuff that isn't? :P

[13:26] *** bazzaar left
[13:26] *** harmil_wk left
[13:26] *** MasterDuke left
[13:26] <ugexe> some feeds are implemented though

[13:26] <unmatched}> ¯\_(ツ)_/¯

[13:27] <ugexe> i still look forward to the double pointy feed

[13:28] <perlpilot> ugexe: what would it do?

[13:29] <mst> DrForr: I don't understand ANTLR at all, my favourite thing about grammars is that they actually sort of seem to make sense to me

[13:31] *** jonas2 joined
[13:31] <ugexe> perlpilot: allows multiple sources to be used as a single source (maybe worded poorly)

[13:33] <ugexe> `@a1 ==>> @a2 ==>  map { say $_ }` instead of `map { say $_ }, flat (@a1, @a2)`

[13:34] <Woodi> ugexe: (@a1, @a2) ==> map {.... } would be nice

[13:35] *** TheLemonMan joined
[13:35] <Woodi> maybe even: my $f1 = Feed.new(@a0) ?

[13:36] <ugexe> Woodi: but i'd prefer to have @a1 and @a2 on their own line (as well as the map)

[13:36] <unmatched}> @a1 ⇒ @a2 ⇒ map { } would be nice :P

[13:36] <ugexe> http://design.perl6.org/S03.html#Terminator_precedence shows an example of chaining ==>> and ==> in that way

[13:37] <Woodi> I think it's similiar to Supplies but Supplies are like "ether" in Actor model without Actors, just hannels to comunicate... no subject to address

[13:37] *** dbrock joined
[13:38] <Woodi> ...so my brain have problems with that

[13:39] *** TEttinger left
[13:42] *** dbrock left
[13:42] *** edehont left
[13:43] <gregf_> rust.... *wonders*

[13:44] <gregf_> do error stacktraces use levenshtein distances in Perl6?

[13:45] <ugexe> ==>> just iterates over each end individually but in sequence such that they are like a single sequence, so the next subsequent sink only ever sees a single sequence when it tries to pull 1 value at a time through it

[13:46] <ugexe> which can already be done as shown, but the ==>>/==> allow the code to be formatted in a way i prefer

[13:46] <[Coke]> gregf_: we use it for suggestion alternatives to missing names. Not sure if you mean something more specific.

[13:46] <Woodi> anyway, last nightt unmatched} freeked ;)  about Perl6 being easy to explode and it looks like pattern... eg. I once got mad about every loop iteration traversing LD_LIBRARY_PATH :)  so, IMO, marketing can wait a bit

[13:47] <unmatched}> Woodi++ I think I can agree.

[13:48] <gregf_> [Coke]: yep, i mean as a spell checker

[13:48] <unmatched}> And we can use more people to do core stuff. Hint Hint. There's a course for it: https://github.com/edumentab/rakudo-and-nqp-internals-course

[13:49] <AlexDaniel> I think that I agree too. The problem is not so much the marketing, but the compiler that is not bulletproof yet

[13:54] *** dbrock joined
[13:54] *** gregf_ left
[13:55] *** prammer left
[13:55] <[Coke]> While it's definitely a concern of mine that if we market to people and they find bugs; I don't know enough about advertising to say that we shouldn't do ANY advertising yet.

[13:56] *** gregf_ joined
[13:56] <[Coke]> That's why we need people who aren't developers or users to weigh in. :)

[13:56] <ugexe> my perl6 marketing lately has been "perl6 will be a great fit for this project in 2 years". but that also involves the state of the ecosystem

[13:56] <awwaiid> unmatched}: nice link! is it up to date enough?

[13:57] <unmatched}> awwaiid: I'm half-way through it and it looks to be uptodate enough, with the exception of mentioning Parrot

[13:57] <awwaiid> I think if you want marketing you should go to non-perl conferences, meetups, contests, etc. I know TimToady is going to Abstractions.io for example, which is a fantastic example.

[13:57] <awwaiid> unmatched}: ok cool

[13:58] <awwaiid> Maybe advertising is also about setting good expectations? On the one hand there are bugs. On the other hand people can influence the implementation/language through their experience :)

[13:59] *** pduh_ joined
[14:00] <AlexDaniel> .oO( “Reporting rakudo bugs is fun!”… I can definitely write a post or two on that topic, but not sure if this is going to help anything… )

[14:01] *** bob777 left
[14:01] *** dbrock left
[14:01] <perlpilot> awwaiid++ (setting expectations)

[14:02] <TheLemonMan> underpromise and overdeliver then :)

[14:02] *** n1lp7r joined
[14:02] <gregf_> marketing depends on the project manager *runs*

[14:02] <perlpilot> TheLemonMan: sure, that's just one aspect though.

[14:03] *** pduh_ left
[14:03] <gregf_> or product owner *ducks again*

[14:04] *** bob777 joined
[14:04] <pmurias> the users experience github repo seemed like a good initiative

[14:05] <pmurias> I don't know anything about marketing stuff, but reducing the amount of times new users get annoyed seems important

[14:05] <gregf_> yeah sure, the product should market iself :)

[14:06] * pmurias finally gets round to removing annoying stuff from modules.perl6.org

[14:06] <perlpilot> gregf_: well volunteered! (for all those "job positions" you keep mentioning  :-)

[14:06] <gregf_> i guess if your oracle/ms/apple, you wont need marketing .. you can always bully :)

[14:07] *** prammer joined
[14:07] <gregf_> perlpilot: heh

[14:07] <RabidGravy> boom!

[14:08] <Woodi> btw. maybe "20 years to late?" would be nice presentation on computer [scripting] languages state :)

[14:09] <TheLemonMan> 20? I thought it was just 16 years late

[14:09] <Woodi> TheLemonMan: I mean, generaly, not only Perl6

[14:09] <RabidGravy> yeah a language with these capabilities should have existed twenty years ago

[14:09] <RabidGravy> though I'm not entirely sure it could have

[14:10] *** pduh joined
[14:10] <perlpilot> Perl 6 is not late at all.  I don't know what you're talking about

[14:10] <Woodi> perlpilot: just commenting on some inet commet ;)

[14:11] *** pduh_ joined
[14:11] <unmatched}> perlpilot: it was in reference to my quoting a comment on one of my P6 articles: https://www.reddit.com/r/programming/comments/4w7onf/perl_6_core_hacking_wheres_da_sauce_boss/d654ckz

[14:12] * perlpilot tends to have an auto-ignore brain filter for such comments

[14:12] <mst> right, perl6 as the name of the language continues to screw both languages over, just like it has been doing for over a decade

[14:12] <mst> but larry gets to call what he wants perl, so shrug

[14:12] <pmurias> unmatched}: how do I install all the deps for modules.perl6.org using cpanm?

[14:14] <perlpilot> pmurias: took me a second to understand what you were asking  ...  I was thinking "What?!? We can install Perl 6 modules with cpanm now?!?" at first   :-)

[14:14] <gregf_> cpanm++

[14:15] <pmurias> unmatched}: I figured it out

[14:15] <unmatched}> pmurias: https://gist.github.com/zoffixznet/4e578ed07fca169fb086bc64a6892956

[14:16] <unmatched}> pmurias: no idea how to make it automatically use the Build.pm stuff

[14:16] <unmatched}> *Build.PL

[14:16] <leedo> cpanm --installdeps . works with Makefile.pl, not sure about Build.PL

[14:16] *** cdg_ joined
[14:17] *** bob777 left
[14:17] <unmatched}> pmurias: what annoying bits were you going to remove?

[14:18] <pmurias> koalatee

[14:18] <unmatched}> There's a Bit Rot branch https://github.com/perl6/modules.perl6.org/tree/bit-rot that I've no finished to address https://github.com/perl6/modules.perl6.org/issues/60

[14:18] <unmatched}> Ah... k :)

[14:20] *** mcmillhj left
[14:20] *** cdg left
[14:21] *** cdg_ left
[14:23] *** mcmillhj joined
[14:23] *** CIAvash left
[14:23] <pmurias> unmatched}: installing Mew fails: http://paste.debian.net/788300/

[14:25] <mst> pmurias: did you upgrade Test::Exception like the error message tells you you need to?

[14:26] <mst> looks like Test::Most needs a bumped release with a higher dep, and then Mew needs to dep the new Test::Most

[14:26] <grondilu> m: Blob.new but role {}  # can't mixin a Blob?

[14:26] <camelia> rakudo-moar 387806: OUTPUT«This REPR cannot change type␤  in any mixin at gen/moar/m-Metamodel.nqp line 1318␤  in block <unit> at <tmp> line 1␤␤»

[14:27] <grondilu> m: Buf.new but role {}

[14:27] <camelia> rakudo-moar 387806: OUTPUT«This REPR cannot change type␤  in any mixin at gen/moar/m-Metamodel.nqp line 1318␤  in block <unit> at <tmp> line 1␤␤»

[14:27] <unmatched}> Would it really matter? I'm not testing exceptions on that line.

[14:27] <unmatched}> FWIW, the tests pass on 5.22 perl :/

[14:28] <mst> it's unlikely to be anything to do with 5.22

[14:28] <mst> and everything to do with what versions of things

[14:28] <jnthn> grondilu: No

[14:29] <pmurias> mst: I upgraded Test::Exception and it still fails

[14:29] *** pduh_ left
[14:29] <mst> hrmf

[14:30] <mst> lemme see what happens

[14:31] <mst> sigh. works here as well

[14:31] <mst> ah, interesting, the chained method isn't getting chained

[14:32] <unmatched}> FWIW, I'm not using any chained stuff on modules.perl6.org code

[14:32] <mst> unmatched}: upgrade MooX::ChainedAttributes from 0.04 to 0.05

[14:33] <mst> I think that change broke your shit

[14:33] <mst> ... nope

[14:33] <mst> hmmm

[14:33] * mst downgrades Moo

[14:33] <mst> yep, blammo

[14:34] <mst> pmurias: upgrade Moo

[14:34] <Woodi> mst: re: "perl6 as the name of the language continues to screw both languages"  I think it is 90% not true. in apache 1.* vs 2.* it would be 100% not true, yes. but RFCs count is proof that things was/are FUBARed. perl5 is native /usr/bin citizen just like /bin/sed and awk, it's classic you can use when you need

[14:34] <mst> unmatched}: 2.000002 (now backpan only) doesn't appear to work with the latest Moo

[14:34] <mst> Woodi: I think that I've spend ten years listening to trolls use it to attack us both and to perl5 and perl6 people get upset about it

[14:35] <mst> Woodi: the evidence says that it has not been good for either of us

[14:35] *** mcmillhj left
[14:35] <mst> you're welcome to disbelieve in reality, but reality won't care

[14:36] <pmurias> the Perl 6 vs Perl 5 distinction is something I have to explain to people everytime I try to explain what I'm working on

[14:37] <unmatched}> pmurias: did upgrading Moo help?

[14:37] <Woodi> mst: pls read again. it's not same like with apache. perl5 was/is in pls-move-me-into-ex&vi-location

[14:37] <pmurias> unmatched}: yep

[14:37] <unmatched}> Awesome. mst++ :)

[14:38] <mst> Woodi: please note that's nothing to do with anything I was saying.

[14:38] <mst> Woodi: some of us regard perl5 as a viable language for new work, and enjoy writing it, and the existence of perl6 makes it much harder to justify it

[14:38] <mst> and meanwhile, perl6 being a different language is used as a reason to ignore perl6

[14:38] <Woodi> mst: and what you say ? you listen to trolls :)

[14:39] <mst> ...

[14:39] <mst> ah, yes, "let's insult the person making the point" as a strategy

[14:39] <mst> clearly I am terribly wrong

[14:39] <TheLemonMan> I picked up a random LTA ticket from the bug tracker and with some help from the kind guys over at #moarvm found out what triggers it, I'd love to send in a patch but I don't quite get what the correct behaviour is in this case

[14:39] <Woodi> yes, you sayd that also, I just skipped

[14:40] <unmatched}> TheLemonMan: what the patch is for? MoarVM NQP Rakudo?

[14:40] <mst> you miss the point. OTHER PEOPLE listen to the trolls, and then don't use either perl.

[14:41] <mst> if you're going to say "I don't want anybody who can't 100% reliably spot a troll even from the outside where the names are completely confusing to become a user", you're ruling out lots of the internet

[14:41] <Woodi> mst: in late 90s I was surprised how ppls hate perl5. and now it is better

[14:42] <mst> it is somewhat better. but I get very tired of explaining that "no, perl5 isn't obsolete, perl6 is a separate language"

[14:42] *** Wiertek joined
[14:42] *** ChoHag_ is now known as ChoHag

[14:43] <TheLemonMan> it is the ticket #127767, the problem lies in the fact that next-interesting-index (trough AT-POS) in Backtrace.pm ends up skipping the infix:<!> frame because $settings is undef and the infix operator is actually defined in a CORE.setting (thus making is-setting return true and making the loop in next-interesting-index discard that frame when showing the backtrace)

[14:43] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127767

[14:43] <grondilu> jnthn: why not?

[14:43] <TheLemonMan> unmatched}, Rakudo

[14:44] <unmatched}> TheLemonMan: you'd submit a PR against this repo: https://github.com/rakudo/rakudo/  do you know how do to PRs?

[14:44] <ugexe> he wants to know what the PR should do

[14:44] <unmatched}> Oh, sorry.

[14:45] <unmatched}> bah :) /me blushes

[14:45] <grondilu> FYI I was looking at https://en.wikipedia.org/wiki/LEB128, and was considering implementing it with something like role LEB128 { method UInt(blob8:) {...}; method blob8(UInt:) {...} }

[14:45] <grondilu> but I stumbled upon the fact that I can't mixin blobs, apparently.

[14:46] <TheLemonMan> yep, I do know how to submit a PR :)

[14:46] *** Nex6 joined
[14:46] <unmatched}> :)

[14:46] <TheLemonMan> sorry for the delay but vim is struggling with those big p6 files :|

[14:46] *** Nex6 left
[14:47] *** Nex6 joined
[14:47] <unmatched}> s: &infix<!>

[14:47] <SourceBaby> unmatched}, Something's wrong: ␤ERR: [31m===[0mSORRY![31m===[0m Error while compiling -e␤Undeclared routine:␤    infix used at line 6. Did you mean 'indir', 'index'?␤␤

[14:47] <unmatched}> s: &infix:<!>

[14:47] <SourceBaby> unmatched}, Something's wrong: ␤ERR: [31m===[0mSORRY![31m===[0m Error while compiling -e␤Undeclared routine:␤    infix:<!> used at line 6. Did you mean 'infix:<∖>', 'infix:<o>', 'infix:<⊎>', 'infix:<∩>', 'infix:<∈>'?␤␤

[14:47] <unmatched}> feh

[14:49] <jnthn> prefix ;)

[14:49] <unmatched}> s: &prefix:<!>

[14:49] <SourceBaby> unmatched}, Sauce is at https://github.com/rakudo/rakudo/blob/3878066/src/core/Bool.pm#L74

[14:49] <unmatched}> \o/

[14:49] <jnthn> grondilu: Because it uses a primitive representation rather than a P6opaque object representation

[14:50] <pmurias> TheLemonMan: I sometimes find that turning of syntax highlight in vim helps when it's having trouble with too big files

[14:50] *** tushar joined
[14:50] *** tushar left
[14:50] <timotimo> i don't understand why perltricks tweeted about the weekly adding "via @loltimo" at the end :\

[14:51] <RabidGravy> I saw that too

[14:54] <TheLemonMan> pmurias, after a quick look at the syntax file that's used for p6 I guess I'll go down that route heh

[14:57] *** Nex6 left
[14:57] <heatsink> TheLemonMan: curious, just how big is the file your working with? 

[14:57] *** Nex6 joined
[14:58] <TheLemonMan> heatsink, ~76K

[14:58] *** Nex6 left
[14:58] <unmatched}> :o

[14:59] <unmatched}> What is it? 

[14:59] *** Nex6 joined
[14:59] <timotimo> perhaps the core setting

[14:59] *** nbg joined
[14:59] <TheLemonMan> unmatched}, src/core/Exception.pm

[14:59] <unmatched}> It's 2578 lines....

[15:00] <unmatched}> https://github.com/rakudo/rakudo/blob/nom/src/core/Exception.pm

[15:00] <unmatched}> And CORE-setting is ~40K, but... do we edit it directly? 

[15:00] <TheLemonMan> oh, I was talking about the size in bytes

[15:00] <unmatched}> Ah

[15:01] <RabidGravy> Exception.pm opens really quickly for me in vim

[15:01] *** pierre_ left
[15:01] <unmatched}> I need some coffee. Can't think straight today :)

[15:01] <heatsink> coffee++, but we drink more tea here, tea++ 

[15:02] <dalek> modules.perl6.org/bit-rot: 38a0b82 | (Zoffix Znet)++ | Build.PL:

[15:02] <dalek> modules.perl6.org/bit-rot: Bump Mew version

[15:02] <dalek> modules.perl6.org/bit-rot: 

[15:02] <dalek> modules.perl6.org/bit-rot: To avoid test failures it has with older Moo

[15:02] <dalek> modules.perl6.org/bit-rot: review: https://github.com/perl6/modules.perl6.org/commit/38a0b82977

[15:03] <[Coke]> unmatched}++ is correct, coffee is the correct beverage. :|

[15:03] * [Coke] puts down his Coke Zero and goes to get a coffee.

[15:04] <ugexe> time to graduate to amphetamines

[15:04] <RabidGravy> it's the only way

[15:04] <moritz> or, like, sleep

[15:04] <moritz> totally web 1.0, but works quite well

[15:04] *** perlpilot left
[15:05] *** perlpilot joined
[15:05] <TheLemonMan> RabidGravy, same here, but it's excruciatingly slow when scrolling trough it

[15:05] <RabidGravy> that's fine here too

[15:06] <dalek> doc: f8691e9 | (Christopher Bottoms)++ | doc/Type/Mu.pod6:

[15:06] <dalek> doc: More clear, plus link to additional information

[15:06] <dalek> doc: review: https://github.com/perl6/doc/commit/f8691e9173

[15:06] <TheLemonMan> that's weird, it's still slow even without loading my vimrc

[15:06] *** perlpilot left
[15:07] <RabidGravy> small memory or slow disk drice

[15:08] <RabidGravy> drice?

[15:08] <RabidGravy> drive

[15:08] <unmatched}> arnsholt: weren't it you who were saying CORE-setting loads fine in vim when I made that comment about editors grinding to half in my article? Seems like it has trouble opening even a 3K-line file...

[15:08] *** perlpilot joined
[15:09] <TheLemonMan> there's plenty of ram and a fast ssd, I guess it's just vim that's playing tricks on me

[15:09] *** MilkmanDan left
[15:09] <heatsink> 76K isn't that big, is it that syntax highlighting to parsing the file multiple times i.e once per rule,or something

[15:12] *** khw joined
[15:14] <literal> TheLemonMan: are you using the latest perl6.vim or one that was bundled with Vim? there's a difference in performance

[15:18] <TheLemonMan> literal, I actually get the same behaviour with both

[15:18] *** telex left
[15:19] *** prammer left
[15:19] <pmurias> TheLemonMan: with syntax highlighting disabled vim shouldn't have any problems with editing the whole setting

[15:20] *** telex joined
[15:20] <TheLemonMan> indeed, I was just wondering what the root cause of the slowness was

[15:20] *** harmil_wk joined
[15:20] *** mohae joined
[15:22] *** Ariantes_ joined
[15:27] <literal> is DBIish (sqlite) not usable from multiple threads? I sometimes get the following output: https://gist.github.com/hinrik/a301b35d75853a4b31ff6c83e849c566

[15:27] <literal> other times it runs without errors

[15:28] *** prammer joined
[15:28] <RabidGravy> the sqlite library itself may or may not be thread safe depending on how it was compiled IIRC (and/or some runtime configuration)

[15:29] <RabidGravy> https://www.sqlite.org/threadsafe.html

[15:30] <Ariantes_> Hello

[15:31] <unmatched}> \o\

[15:32] *** mcmillhj joined
[15:34] *** n1lp7r left
[15:39] *** itaipu left
[15:40] <AlexDaniel> .u ⪥

[15:40] <yoleaux> U+2AA5 GREATER-THAN BESIDE LESS-THAN [Sm] (⪥)

[15:41] <pmurias> unmatched}: I didn't specify --no-app-start and the modules.perl6.org didn't start

[15:43] <literal> RabidGravy: from the error it looks more like the DBIish might not be accounting for the case when multiple threads try to connect before the DB driver has been initialized

[15:44] *** mcmillhj left
[15:45] <literal> another fun thing I see is that it occasionally just dies with "Segmentation fault"

[15:45] *** itaipu joined
[15:46] <unmatched}> pmurias: where is the --no-app-start from? Looks like the docs need an update. The not-starting-an-app is the default now and you need an explicit --restart-app option

[15:46] <pmurias> unmatched}: from the README, and the DEPLOYMENT docs

[15:46] <unmatched}> pmurias: well, "need" is not exactly accurate. You can run bin/morbo to start the dev server with the site

[15:47] <unmatched}> k, I'll be sure to go over the docs as part of the Bit Rot work.

[16:02] *** ARM9 joined
[16:04] *** richi235 left
[16:05] <pmurias> unmatched}: it runs on my machine, I'll hopefully send PRs to remove koalitee and align the icons tommorow

[16:05] <dalek> perl6-examples: f6cf069 | (Aaron Sherman)++ | categories/parsers/SimpleStrings.pm:

[16:05] <dalek> perl6-examples: Added a simple quoted string parser

[16:05] <dalek> perl6-examples: 

[16:05] <dalek> perl6-examples: (which I previously posted to reddit)

[16:05] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/f6cf06935e

[16:05] <dalek> perl6-examples: 5ba1010 | (Aaron Sherman)++ | / (2 files):

[16:05] <dalek> perl6-examples: Moved tests out to t/...

[16:05] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/5ba1010dc5

[16:05] <dalek> perl6-examples: d6e83d6 | (Steve Mynott)++ | / (2 files):

[16:05] <dalek> perl6-examples: Merge pull request #45 from ajs/master

[16:05] <dalek> perl6-examples: 

[16:05] <dalek> perl6-examples: A quoted string parser example

[16:05] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/d6e83d6db5

[16:05] *** pmurias left
[16:05] *** dakkar left
[16:06] *** richi235 joined
[16:06] *** MilkmanDan joined
[16:10] <harmil_wk> Are examples merges automated, or was that a human being being super-responsive?

[16:10] <timotimo> human

[16:10] <AlexDaniel> haha

[16:10] * harmil_wk is impressed

[16:11] <dj_goku> "human"

[16:11] <[Coke]> docs folks ok with my 'xtest' fix?

[16:12] <unmatched}> stmuk_++

[16:15] <dalek> doc: 0c9f8ef | coke++ | Makefile:

[16:15] <dalek> doc: run xt tests first

[16:15] <dalek> doc: 

[16:15] <dalek> doc: If you're running xtest, you're more likely to find issues with the xt/

[16:15] <dalek> doc: tests, run them first so you can abort the test run and fix them.

[16:15] <dalek> doc: review: https://github.com/perl6/doc/commit/0c9f8ef1b7

[16:15] <dalek> doc: 0b7fb97 | coke++ | doc/ (3 files):

[16:15] <dalek> doc: whitespace fixes

[16:15] <dalek> doc: review: https://github.com/perl6/doc/commit/0b7fb97516

[16:16] *** bob777 joined
[16:17] *** kaare__ joined
[16:18] *** kaare_ left
[16:19] *** kaare__ is now known as kaare_

[16:20] <AlexDaniel> [Coke]: maybe! :)

[16:23] *** prammer left
[16:23] *** travis-ci joined
[16:24] <travis-ci> Doc build errored. Will "Coke" Coleda 'whitespace fixes'

[16:24] <travis-ci> https://travis-ci.org/perl6/doc/builds/151557167 https://github.com/perl6/doc/compare/f8691e9173e1...0b7fb9751684

[16:24] *** travis-ci left
[16:24] <jdv79> I know very little about it but would it be possible to sub in a more erlang-ish async subsystem?

[16:24] *** prammer joined
[16:24] <jdv79> i imagine it would involved a special scheduler and remote support and probably a few new/altered primitives

[16:26] <sena_kun> m: fail; CATCH { default { say .WHAT } }; # How to generate Failure?

[16:26] <camelia> rakudo-moar ef04e1: OUTPUT«(AdHoc)␤»

[16:26] <hoelzro> sena_kun: Failures in sink context throw their underlying exception

[16:27] <hoelzro> m: my $f = fail 'fail!'; say $f.WHAT

[16:27] <camelia> rakudo-moar ef04e1: OUTPUT«fail!␤  in any  at /home/camelia/rakudo-m-inst-2/share/perl6/runtime/CORE.setting.moarvm line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:27] <sena_kun> hoelzro, yes, I already read that line, but. Ah, thanks!

[16:27] * hoelzro .oO( does Failure.WHAT trigger the throw too? )

[16:28] <unmatched}> m: fail.^name.say

[16:28] <camelia> rakudo-moar ef04e1: OUTPUT«Failed␤  in any  at /home/camelia/rakudo-m-inst-2/share/perl6/runtime/CORE.setting.moarvm line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:28] <unmatched}> bisect: m: fail.^name.say

[16:28] <bisectable> unmatched}: Exit code is 1 on both starting points (good=2015.12 bad=ef04e1e), bisecting by using the output

[16:28] <bisectable> unmatched}: bisect log: https://gist.github.com/ebbbd830e1c0d115a02310c4df94c746

[16:28] <bisectable> unmatched}: 'bisect run' failure

[16:28] <sena_kun> m: my $f = fail 'fail!';

[16:28] <camelia> rakudo-moar ef04e1: OUTPUT«fail!␤  in any  at /home/camelia/rakudo-m-inst-2/share/perl6/runtime/CORE.setting.moarvm line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:28] <unmatched}> m: sub f { fail }; f.^name.say

[16:28] <camelia> rakudo-moar ef04e1: OUTPUT«Failure␤»

[16:29] <unmatched}> fail is like return innit? so it returns before you get to .WHAT so you need to return it from somewhere

[16:29] <hoelzro> unmatched}: oh, good point, thanks!

[16:29] * hoelzro just realized that bisectable is like https://wiki.documentfoundation.org/QA/Bibisect

[16:29] <sena_kun> m: sub f{ fail }; f.handled;

[16:29] <camelia> rakudo-moar ef04e1: ( no output )

[16:29] <sena_kun> m: sub f{ fail }; say f.handled;

[16:29] <camelia> rakudo-moar ef04e1: OUTPUT«False␤»

[16:30] <unmatched}> m: sub f{ fail }; my $v = f; $v.handled.say; $v.Bool; $v.handled.say;

[16:30] <camelia> rakudo-moar ef04e1: OUTPUT«False␤True␤»

[16:31] *** titsuki joined
[16:31] <sena_kun> Great. Thanks!

[16:32] *** TimToady left
[16:34] *** TimToady joined
[16:36] *** bob777 left
[16:36] *** bob777 joined
[16:37] *** andrzejku joined
[16:40] *** n1lp7r joined
[16:40] *** mcmillhj joined
[16:45] <titsuki> m: for ^3 { .map(-> $e { say $e + 3 }) }; # map called in the sink context (Sorry it's just a experiment)

[16:45] <camelia> rakudo-moar ef04e1: ( no output )

[16:45] *** dogbert17 joined
[16:46] <titsuki> m: for ^3 { 10; }; # check context (Sorry it's just a experiment)

[16:46] <camelia> rakudo-moar ef04e1: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant integer 10 in sink context (line 1)␤»

[16:46] *** mcmillhj left
[16:47] *** mcmillhj joined
[16:47] <sena_kun> m: (^3) .map({ say $_ + 3 });

[16:47] <camelia> rakudo-moar ef04e1: OUTPUT«3␤4␤5␤»

[16:47] <dogbert17> o/ #perl6

[16:47] <sena_kun> dogbert17, \o

[16:47] <dogbert17> hi sena_kun

[16:48] <sena_kun> Map is already cycle in some sense.

[16:48] <b2gills> Seems to me that Perl 6 is 20 years too early

[16:49] <ARM9> or 15 years too late

[16:49] <dogbert17> The paragraph about 'Versioning_and_Authorship' is duplicated in https://docs.perl6.org/language/typesystem. Should I clean it up?

[16:50] <ARM9> what's the koalatee % thing on modules.perl6.org ?

[16:50] *** bazzaar joined
[16:50] <sena_kun> dogbert17, yeah, it will be good.

[16:50] <bazzaar> \o perl6

[16:50] <dogbert17> sena_kun, fix is on its way :)

[16:50] <sena_kun> dogbert17++

[16:51] <titsuki> m: for ^3 { sink .map(-> $e { say $e + 3 }) }; # map called in the sink context (Sorry it's just a experiment)

[16:51] <camelia> rakudo-moar ef04e1: OUTPUT«3␤4␤5␤»

[16:52] <bazzaar> Hi, re. earlier discussion on Perl6 introduction media content, I put down a few thoughts http://nopaste.linux-dev.org/?1119698

[16:53] <andrzejku> hi

[16:53] <sena_kun> titsuki, you can write messages to camelia in private, it'll answer you, if you want just osme local experiments.

[16:53] <titsuki> sena_kun: I understand that, but I couldn't understand behavior of the map exactly.

[16:53] <dalek> doc: ff87518 | (Jan-Olof Hendig)++ | doc/Language/typesystem.pod6:

[16:53] <dalek> doc: Removed duplicated paragraph about Versioning and Authorship

[16:53] <dalek> doc: review: https://github.com/perl6/doc/commit/ff87518be5

[16:53] *** nicq20 joined
[16:54] <sena_kun> titsuki, I'm not sure about the sinking now, but generally, map just applies function to every element of positional.

[16:54] <sena_kun> afk&

[16:54] *** j75 joined
[16:57] <unmatched}> titsuki: note that that area currently has some bugs, so you might see some weirdness.

[16:57] <AlexDaniel> hoelzro: “A bibisect can take as little as 15 minutes” 15 minutes? Why is it so long?

[16:57] <titsuki> sena_kun: Sorry, I'll use the cameria's private message feature from now on.

[16:57] <unmatched}> m: for ^3 { .map: *.say };

[16:57] <camelia> rakudo-moar ef04e1: ( no output )

[16:57] <unmatched}> m: for ^3 { ^3 .map: *.say };

[16:57] <camelia> rakudo-moar ef04e1: OUTPUT«0␤1␤2␤0␤1␤2␤0␤1␤2␤»

[16:58] <hoelzro> AlexDaniel: good question!

[16:58] <hoelzro> maybe longer history? or maybe they build OO for each bibisect =P

[16:58] <gregf_> m: say (^3).map:{ ->$x { $x + 3 }.($_)}

[16:58] <camelia> rakudo-moar ef04e1: OUTPUT«(3 4 5)␤»

[16:59] <unmatched}> m: say ^3 .map: *+3

[16:59] <camelia> rakudo-moar ef04e1: OUTPUT«(3 4 5)␤»

[16:59] <unmatched}> Death to parenths!

[16:59] <gregf_> m: sub add($v){ $v+ 3; }; say (^3).map(&add)

[16:59] <camelia> rakudo-moar ef04e1: OUTPUT«(3 4 5)␤»

[17:00] <AlexDaniel> MasterDuke: hey, what if we put all rakudo builds into one git repo?

[17:00] <AlexDaniel> is it going to save some space? Is it going to be slower?

[17:02] <unmatched}> m: my &add = * + 3; say ^3 .map: &add

[17:02] <camelia> rakudo-moar ef04e1: OUTPUT«(3 4 5)␤»

[17:02] <unmatched}> Death to parenths! :D

[17:03] <AlexDaniel> unmatched}: by the way, the thing you tried to bisect there seems to be another effect of return-without-lexotic

[17:03] <AlexDaniel> unmatched}: see also #128872

[17:03] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128872

[17:04] <unmatched}> AlexDaniel: what thing?

[17:05] <dalek> doc: 40edfc8 | (Jan-Olof Hendig)++ | doc/Language/typesystem.pod6:

[17:05] <dalek> doc: Revert "Removed duplicated paragraph about Versioning and Authorship"

[17:05] <dalek> doc: 

[17:05] <dalek> doc: This reverts commit ff87518be5fe7bb9d1fe8adfe8dc0a40e3bc7c88.

[17:05] <dalek> doc: review: https://github.com/perl6/doc/commit/40edfc8c7f

[17:05] <dalek> doc: fd3b8c1 | (Jan-Olof Hendig)++ | doc/Language/typesystem.pod6:

[17:05] <dalek> doc: Fix typos

[17:05] <dalek> doc: review: https://github.com/perl6/doc/commit/fd3b8c1036

[17:05] <AlexDaniel> bisect: fail.^name.say

[17:05] <bisectable> AlexDaniel: Exit code is 1 on both starting points (good=2015.12 bad=ef04e1e), bisecting by using the output

[17:05] <bisectable> AlexDaniel: bisect log: https://gist.github.com/97de31fc5372219ada5b8329cbbf5afc

[17:05] <bisectable> AlexDaniel: 'bisect run' failure

[17:05] <AlexDaniel> unmatched}: this one ↑

[17:05] <unmatched}> That works correctly. I bisected it before I realized that it works correctly :)

[17:05] <AlexDaniel> oh, hm

[17:05] *** cdg joined
[17:05] <unmatched}> unmatched} │ fail is like return innit? so it returns before you get to .WHAT so you need to return it from somewhere

[17:06] <AlexDaniel> ok :)

[17:06] *** zakharyas left
[17:07] *** nicq20 left
[17:12] *** brrt joined
[17:12] *** brrt left
[17:13] *** firstdayonthejob joined
[17:19] *** travis-ci joined
[17:19] <travis-ci> Doc build passed. Jan-Olof Hendig 'Removed duplicated paragraph about Versioning and Authorship'

[17:19] <travis-ci> https://travis-ci.org/perl6/doc/builds/151567240 https://github.com/perl6/doc/compare/0b7fb9751684...ff87518be5fe

[17:19] *** travis-ci left
[17:22] *** setty1 joined
[17:24] *** travis-ci joined
[17:24] <travis-ci> Doc build passed. Jan-Olof Hendig 'Fix typos'

[17:24] <travis-ci> https://travis-ci.org/perl6/doc/builds/151570438 https://github.com/perl6/doc/compare/ff87518be5fe...fd3b8c103604

[17:24] *** travis-ci left
[17:27] *** prammer left
[17:28] *** aries_liuxueyang left
[17:29] *** prammer joined
[17:33] *** ptolemarch left
[17:33] *** ptolemarch joined
[17:34] *** Actualeyes left
[17:34] <harmil_wk> Was github:perl6/rakudo a thing before a couple seconds ago? I fear I just did something I didn't mean to...

[17:35] <unmatched}> hahaha

[17:35] <geekosaur> says forked from rakudo/rakudo

[17:35] <geekosaur> "whoops"

[17:35] <unmatched}> harmil_wk: if you go to settings you can delete that fork

[17:36] <harmil_wk> I just want to be REALLY sure that that's what I should be doing. Is there someone here who feels confident that that repo did not and should not exist?

[17:37] <unmatched}> harmil_wk: yes, I'm confident.

[17:37] <harmil_wk> k, thanks

[17:37] <harmil_wk> Just re-stating because scary: perma deleting "perl6/rakudo"

[17:38] <geekosaur> harmil_wk, you can tell stuff like this by looking through the metadata on the web interface

[17:38] <ovibos> if you're *really* scared, you could make a local copy of perl6/rakudo

[17:38] <geekosaur> which is how we can be sure it was not there to begin with (in any case you'd likely have gotten LOTS of conflicts if it had)

[17:39] *** mcmillhj left
[17:39] *** mcmillhj joined
[17:40] <ovibos> is there a way to mattern-match assign from a hash?

[17:40] <harmil_wk> Done

[17:40] <harmil_wk> Sorry about that

[17:40] <ovibos> like, my { status => $status, content => $content } = ...

[17:40] *** mcmillhj left
[17:40] *** mcmillhj joined
[17:40] <unmatched}> ovibos: what would be on the right side?

[17:41] <ovibos> well, in my case it's a function that returns a hash

[17:41] <ovibos> something like { status => 'ok', content => 'content' } though

[17:41] <jnthn> m: my %h = status => 'foo', content => 'bar'; my (:$status, :$content) := %h; say $status; say $content;

[17:41] <camelia> rakudo-moar c587b9: OUTPUT«foo␤bar␤»

[17:41] <unmatched}> m: my ($status, $content) = funct<status content>;

[17:41] <camelia> rakudo-moar c587b9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    funct used at line 1␤␤»

[17:41] <ovibos> oh, thanks

[17:42] <unmatched}> jnthn++

[17:42] <jnthn> Perl 6 destructuring in general using signatures syntax

[17:42] <jnthn> *uses

[17:43] *** sno left
[17:44] *** aries_liuxueyang joined
[17:44] <[Coke]> PERL SIX IS SELF DESTRUCTING!?

[17:45] <jnthn> Oh man...this is just asking for...

[17:47] <jnthn> m: class A { has $.x; has $.y; method m((:$x, :$y):) { say $x; say $y } }; A.new(x => 42, y => 100).m # PERL 6 IS self DESTRUCTURING!

[17:47] <camelia> rakudo-moar c587b9: OUTPUT«42␤100␤»

[17:47] <unmatched}> lol

[17:47] <AlexDaniel> 🦋🔫

[17:50] <geekosaur> is that better or worse than self distracting?

[17:52] *** jonas2 left
[17:52] <AlexDaniel> m: sub term:<🦋🔫> { 42 xx (2 ** 62) }; say ‘Hello world!’; 🦋🔫

[17:52] <camelia> rakudo-moar c587b9: OUTPUT«(signal SEGV)Hello world!␤»

[17:53] *** bob777 left
[17:53] <sena_kun> dogbert17, I'm a bit stupid here, but why did you revert your commit?

[17:53] <sena_kun> Ah.

[17:53] <unmatched}> m: "🦋".uninames.say

[17:53] <camelia> rakudo-moar c587b9: OUTPUT«(<reserved>)␤»

[17:53] <sena_kun> It was my mistake. Sorry for the wrong advice.

[17:54] <unmatched}> m: say 42 xx (2 ** 62)

[17:54] <camelia> rakudo-moar c587b9: OUTPUT«(signal SEGV)»

[17:54] *** mcmillhj left
[17:54] *** bazzaar left
[17:55] *** cpage_ left
[17:55] <AlexDaniel> unmatched}: there's a ticket for this segfault but I'm not sure if there is a ticket for Unicode 9.0 support

[17:55] <AlexDaniel> #126014

[17:55] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126014

[17:55] <unmatched}> m: say "🦋".ord.base: 16

[17:55] <camelia> rakudo-moar c587b9: OUTPUT«1F98B␤»

[17:56] <unmatched}> oh hey! that's my adopted character!

[17:57] *** mcmillhj joined
[17:57] *** n1lp7r left
[18:00] *** Sgeo__ joined
[18:00] <AlexDaniel> perl6 say (:<16>1F98C..:16<1F98F>)».chr

[18:00] <AlexDaniel> m: say (:<16>1F98C..:16<1F98F>)».chr

[18:00] <camelia> rakudo-moar c587b9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say (:<16>7⏏051F98C..:16<1F98F>)».chr␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤…»

[18:00] <AlexDaniel> m: say (:16<1F98C>..:16<1F98F>)».chr

[18:00] <camelia> rakudo-moar c587b9: OUTPUT«(🦌 🦍 🦎 🦏)␤»

[18:01] <TimToady> m: say "\x1f98c" ... "\x1f98f"

[18:01] <camelia> rakudo-moar c587b9: OUTPUT«(🦌 🦍 🦎 🦏)␤»

[18:02] <AlexDaniel> right

[18:03] <TimToady> after backlogging, I hope everyone is done being quite so lugubrious for another week or two...

[18:04] *** spider-mario joined
[18:04] *** mvorg left
[18:05] * moritz has upcoming vacations, and is quite happy

[18:06] <unmatched}> TimToady: why a week? :)

[18:06] <TimToady> then I'll be on the road again, with an excuse for not backlogging :)

[18:06] <unmatched}> heh

[18:07] <TimToady> but I do think the pessimism was a bit overdone overnight

[18:07] <edwinsage> Is there a convenient way to stop a line from running in interactive mode without killing the interpreter itself?

[18:08] <edwinsage> ^C kills perl6.

[18:08] <[Coke]> nope

[18:08] <TimToady> we're aiming for a natural growth curve, neither too fast nor too slow, and so far this year I think we're pretty close to a decent growth curve

[18:09] <ovibos> shouldn't ^D kill perl6?

[18:09] <TimToady> sure, there's lotsa stuff left to do, and we knew this year would be bugfixes and speedups mostly

[18:09] <moritz> edwinsage: you can catch SIGINT

[18:09] <[Coke]> ovibos: not kill. tell it you're done

[18:09] <geekosaur> edwinsage, the interactive mode is not very good at all currently

[18:09] <geekosaur> it

[18:09] <[Coke]> geekosaur: that's a lie.

[18:10] <ovibos> i mean, yes, but the behavior is the same [Coke] 

[18:10] <moritz> edwinsage: https://docs.perl6.org/type/Supply#sub_signal

[18:10] <[Coke]> no, ^D doesn't behave the same as ^C.

[18:10] <moritz> not sure how well it works in the REPL

[18:10] * nine can't get enough bugfixes and speedups

[18:10] <unmatched}> TimToady: fair enough :) 

[18:10] <edwinsage> Ok, I'm just running stuff like "(1..*).eager" to fiddle around.

[18:10] <TimToady> unmatched}: it wasn't just you :)

[18:10] <ovibos> [Coke]: what's the difference?

[18:11] <geekosaur> [Coke], we have problems ranging from this one to scoping problems with previously defined names. this is not what people expect of a decent REPL

[18:11] * TimToady goes to look at the bug he promised two

[18:11] <perlpilot> TimToady++  (for the optimism injection :)

[18:12] <unmatched}> ovibos: ^D sends EOF. If you're not in the process of reading from a file, it won't care if you sent it and being in an infinite loop is one of those cases

[18:13] <ovibos> oh, you're right

[18:14] <ovibos> still, i think it would be saner if ^C behaved like it did in other REPLs

[18:16] <perlpilot> ovibos: Which other REPLs?   Should it say "KeyboardInterrupt" like Python?  Should it do nothing like Ruby?  Or ... should it exit the REPL like lua?

[18:17] *** nbg left
[18:17] <ovibos> perlpilot: it does nothing in ruby and zsh, it prints some sort of error and returns to prompt in python and racket

[18:17] <ovibos> which were what i was basing my "other REPLs" on

[18:18] <ovibos> i don't think one is better than the other, but, i think they're both better than exiting the REPL entirely

[18:18] <moritz> exiting the REPL is exactly what I want

[18:18] <moritz> ctrl+c = exit that program, unless you have a *very* good reason not to

[18:19] <unmatched}> ^C -> abort the running line; ^C^C -> exit

[18:19] <ovibos> i'm mostly used to ^C's behavior because of zsh/bash's handling of it (as that's the shell i'm in the most)

[18:19] <perlpilot> unmatched}: that would work for me.

[18:19] <unmatched}> (and so it'd naturally end up being the current ^C -> exit if no line is running)

[18:21] <lizmat> fwiw, I think it should be pretty trivial to catch SIGINT in a signal handler, then die("SIGINTED") in there, and then let the CATCH handler cleanup

[18:21] <yoleaux> 10 Aug 2016 22:24Z <japhb> lizmat: Thanks for merging (and fixing) the perl6-bench fix!

[18:21] <lizmat> especially since the REPL is now mostly in Perl 6

[18:21] <lizmat> afk&  # some celebrating

[18:24] *** itaipu left
[18:27] *** sjoshi joined
[18:32] *** sjoshi left
[18:35] <unmatched}> Rakudo bugged as LHF: https://rt.perl.org/Ticket/Display.html?id=128900

[18:35] <unmatched}> (the ^C in REPL)

[18:37] *** dbrock joined
[18:42] *** labster joined
[18:43] *** cpage_ joined
[18:43] *** nbg joined
[18:44] *** prammer left
[18:46] *** prammer joined
[18:46] <hoelzro> I think we need support from the line editor for that

[18:47] <hoelzro> possibly relevant: https://github.com/hoelzro/p6-linenoise/issues/12

[19:03] <dalek> doc: c646e98 | (Jan-Olof Hendig)++ | doc/Type/Bool.pod6:

[19:03] <dalek> doc: Added docs for Bool.pick

[19:03] <dalek> doc: review: https://github.com/perl6/doc/commit/c646e98b5c

[19:03] *** z8 joined
[19:06] <arnsholt> unmatched}: Yeah, that was me. Works fine on my machine, but I guess it'll depend on the details of the hardware and config we're running

[19:06] *** z8 left
[19:16] *** dbrock left
[19:30] *** mr-foobar left
[19:31] *** darutoko left
[19:32] *** zacts joined
[19:36] *** edwinsage left
[19:37] *** heatsink left
[19:41] <grondilu> just red the git log.  You guys.

[19:41] <grondilu> "IterateOneNotSlippingWithoutPhasers"

[19:41] <grondilu> ^srsly?

[19:43] <unmatched}> grondilu: what about it?

[19:44] <unmatched}> Saying "srsly" isn't overly helpful with the problem we're trying to solve :)

[19:44] <jdv79> thank god for autocomplete

[19:44] <unmatched}> It's a private Rakudo-internal class.

[19:45] <gfldex> move along! nothing to see here!

[19:46] <dalek> doc: a57a821 | (Jan-Olof Hendig)++ | doc/Type/Bool.pod6:

[19:46] <dalek> doc: Added docs for Bool.roll

[19:46] <dalek> doc: review: https://github.com/perl6/doc/commit/a57a82102a

[19:48] *** pmurias joined
[19:50] <unmatched}> m: my \term:<🔂✗⛸✗🔫> = Seq; say 🔂✗⛸✗🔫.new(1, 2, 3);

[19:50] <camelia> rakudo-moar c587b9: OUTPUT«Too many positionals passed; expected 2 arguments but got 4␤  in block <unit> at <tmp> line 1␤␤»

[19:50] <unmatched}> m: my \term:<🔂✗⛸✗🔫> = Seq; say 🔂✗⛸✗🔫.new([1, 2, 3]);

[19:50] <camelia> rakudo-moar c587b9: OUTPUT«Type check failed in binding to $iter; expected Iterator but got Array ($[1, 2, 3])␤  in block <unit> at <tmp> line 1␤␤»

[19:50] <unmatched}> grondilu: how about 🔂✗⛸✗🔫 ? :D

[19:53] <pmurias> unmatched}: is it expected that some tests fail for modules.perl6.org?

[19:54] <[Coke]> geekosaur: please make sure that there are tickets open for any outstanding issues.

[19:54] <[Coke]> (danke)

[19:56] *** mcmillhj left
[19:59] *** wamba left
[20:02] *** cpage_ left
[20:03] *** TEttinger joined
[20:04] *** mcmillhj joined
[20:04] *** AlexDaniel left
[20:05] *** kaare_ left
[20:06] <unmatched}> pmurias, they were all passing when I was done with the rewrite last December, but I don't know if people added code without running the tests. I know the GitLab DistSource was added without tests covering. They may have also bit rotted due to major Mojolicious Donut release. Lastly, they do check for koality, so if you removed it without adjusting the tests, then they will fail

[20:12] *** mcmillhj left
[20:12] *** sno joined
[20:12] *** heatsink joined
[20:16] *** zacts left
[20:18] *** cpage_ joined
[20:20] *** mcmillhj joined
[20:22] *** andrzejku left
[20:24] *** labster left
[20:25] *** mcmillhj left
[20:27] <dalek> modules.perl6.org: c99d321 | (Pawel Murias)++ | Build.PL:

[20:27] <dalek> modules.perl6.org: perl Build test now runs tests.

[20:27] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/c99d321632

[20:30] *** zakharyas joined
[20:33] <El_Che> maybe a silly question. When using NativeCall, is it customary to write a Perl6 class wrapper to sanitize/convert the input/output to the NativeCall functions in the same distribution? 

[20:36] <skids> Personally I'd say yes, the only reason I'd split those up is if the bindings are very large and there may be more than one high level package using them.

[20:38] *** harovali joined
[20:38] <skids> Having the bindings in a separate compunit can be nice.  Though, the fact that CStruct reprs can directly have methods may be a good reason not to.

[20:39] <skids> I don't think we've firmly established a "customary" though.

[20:40] <El_Che> skids: thx

[20:42] <pmurias> unmatched}: a lot of the failures seems to be bitrot in tests fetching metadata

[20:42] *** Wiertek left
[20:44] *** labster joined
[20:47] <unmatched}> pmurias: ok, I'll take a look as part of the Bit Rot issue fixing

[20:50] *** n1lp7r joined
[20:51] <pmurias> unmatched}: should I make a PR or will you revert if anything is too horrible?

[20:53] *** cpage left
[20:54] *** raiph left
[20:55] *** mcmillhj joined
[20:59] *** n1lp7r left
[20:59] *** skids left
[20:59] *** mcmillhj left
[20:59] <pmurias> unmatched}: pushed my removal commits, when will modules.perl6.org be updated?

[21:00] <pmurias> ahh, found it in the REAME

[21:01] *** ptolemarch left
[21:01] *** TheLemonMan left
[21:02] <gfldex> m: my $s = '1a 1b 1c'; my @a = <a b c>.any; say @a ~~ /<@a>/

[21:02] <camelia> rakudo-moar c587b9: OUTPUT«This type (Junction) does not support positional operations␤  in block <unit> at <tmp> line 1␤␤»

[21:02] <gfldex> m: my $s = '1a 1b 1c'; my @a = <a b c>; say @a ~~ /<@a>/

[21:02] <camelia> rakudo-moar c587b9: OUTPUT«｢a｣␤»

[21:03] *** cpage__ joined
[21:03] <gfldex> m: my $s = '1a 1b 1c'; my @a = <a b c>; say $s ~~ m:g/'1'<@a>/

[21:03] <camelia> rakudo-moar c587b9: OUTPUT«(｢1a｣ ｢1b｣ ｢1c｣)␤»

[21:04] *** mcmillhj joined
[21:04] <gfldex> m: my $s = '1a 1b 1c'; my @a = <a b c>; say ($s ~~ m:g/'1'<@a>/).perl

[21:04] <camelia> rakudo-moar c587b9: OUTPUT«(Match.new(ast => Any, list => (), hash => Map.new(()), orig => "1a 1b 1c", to => 2, from => 0), Match.new(ast => Any, list => (), hash => Map.new(()), orig => "1a 1b 1c", to => 5, from => 3), Match.new(ast => Any, list => (), hash => Map.new(()), orig => …»

[21:04] *** cpage_ left
[21:04] *** cpage__ is now known as cpage_

[21:06] *** mvorg joined
[21:06] <dalek> ecosystem: 2372851 | (Zoffix Znet)++ | META.list:

[21:06] <dalek> ecosystem: s/META.info/META6.json/

[21:06] <dalek> ecosystem: 

[21:06] <dalek> ecosystem: For List-Combinations and Text::Diff::Sift4

[21:06] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/2372851f06

[21:06] *** zakharyas left
[21:07] *** nbg left
[21:07] <gfldex> m: my $s = '1a 1b 1c 1d'; my @a = <a b c>; say $s ~~ m:g/'1'<@a>/

[21:07] <camelia> rakudo-moar c587b9: OUTPUT«(｢1a｣ ｢1b｣ ｢1c｣)␤»

[21:07] <unmatched}> pmurias: probably in an hour. Last job just finished ( http://modules.perl6.org/update.log ), next one will start at 5:20EST and will probably take like 40 minutes

[21:07] <gfldex> m: my $s = '1a 1b 1c'; my @a = <a b c d>; say $s ~~ m:g/'1'<@a>/

[21:07] <camelia> rakudo-moar c587b9: OUTPUT«(｢1a｣ ｢1b｣ ｢1c｣)␤»

[21:08] <gfldex> is there an easy way to get the element of @a that didn't match?

[21:08] <unmatched}> pmurias: I don't see you pushing anything tho

[21:08] <unmatched}> other than 1 small change in Build.PL

[21:11] * unmatched} for rest of the night

[21:11] <unmatched}> I meant & :)

[21:13] *** nbg joined
[21:13] <dalek> modules.perl6.org: 8467077 | (Pawel Murias)++ | / (15 files):

[21:13] <dalek> modules.perl6.org: Remove Koalatee.

[21:13] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/8467077512

[21:18] *** n1lp7r joined
[21:19] *** LegalResale left
[21:23] *** LegalResale joined
[21:26] *** cpage_ left
[21:29] *** n1lp7r left
[21:43] *** cognominal joined
[21:48] <sena_kun> m: my &a = {};

[21:48] <camelia> rakudo-moar c587b9: OUTPUT«Type check failed in assignment to &a; expected Callable but got Hash (${})␤  in block <unit> at <tmp> line 1␤␤»

[21:49] <sena_kun> Does this syntax worked?

[21:50] <sena_kun> Nevermind.

[21:51] <geekosaur> m: my &a = {;}

[21:51] <camelia> rakudo-moar c587b9: ( no output )

[21:51] <geekosaur> perl 5 has the same ambiguity of needing to figure out if {} is a hash(ref) or a block

[21:52] <sena_kun> geekosaur, ah, neat.

[21:55] *** rpburkholder joined
[21:57] *** kid511 joined
[21:57] *** kid51 left
[21:58] *** mcmillhj left
[21:59] <gfldex> is there a way to list methods that are :local and not mixedin by a role?

[22:02] <gfldex> m: say Date.^methods(:local)[9].package ~~ Date

[22:02] <camelia> rakudo-moar c587b9: OUTPUT«False␤»

[22:02] <gfldex> :)

[22:03] <jnthn> Not aware of a better way than filtering them by .package

[22:04] *** prammer left
[22:04] <gfldex> m: NQPRoutine.^name

[22:04] <camelia> rakudo-moar c587b9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    NQPRoutine used at line 1␤␤»

[22:05] *** chris2 left
[22:05] *** n1lp7r joined
[22:07] *** cpage_ joined
[22:08] *** chris2 joined
[22:10] <gfldex> m: say Cursor.^methods[11].package

[22:10] <camelia> rakudo-moar c587b9: OUTPUT«Method 'package' not found for invocant of class 'NQPRoutine'␤  in block <unit> at <tmp> line 1␤␤»

[22:11] *** firstdayonthejob left
[22:11] <gfldex> jnthn: any way to do that for NQPRoutine (i am willing to descend into nqp)?

[22:13] *** labster left
[22:17] <jdv79> anyone have any grammars working async?

[22:17] <jdv79> concurrently i guess is the actual aspect.

[22:19] *** skids joined
[22:24] <dalek> doc: e83de06 | Altai-man++ | doc/Type/ (9 files):

[22:24] <dalek> doc: Make examples compile

[22:24] <dalek> doc: review: https://github.com/perl6/doc/commit/e83de06a45

[22:28] *** cpage_ left
[22:28] <jnthn> gfldex: Umm...I don't *think* so, though in the Cursor case all of them are certainly from a role :)

[22:28] *** cpage_ joined
[22:28] *** cpage_ left
[22:28] <jnthn> jdv79: I'm pretty sure there's a spectest involving grammars being used from multiple threads.

[22:29] <jnthn> Ran across it the other day while doing stability work.

[22:29] *** cpage_ joined
[22:29] <jdv79> k

[22:29] <jnthn> (Though it was actually another test in the file that was the problem child.)

[22:29] <jnthn> I think there's an RT relating to grammars and concurrency recently filed.

[22:30] <jnthn> And I know EVAL has trouble with reentrancy, which may or may not be grammar related.

[22:30] <jnthn> Guess those'll be a day or so's debugging each...

[22:31] * jnthn is fairly tired of the concurrency bugs spoiling our fun and is trying to hunt them down

[22:31] *** AlexDaniel joined
[22:31] <jdv79> i'm still clueless as to how "Use of uninitialized value $!made" is happening

[22:31] <jnthn> o.O

[22:31] <jdv79> probably beyond my pay grade

[22:31] <jnthn> That sounds pretty wrong.

[22:31] <jnthn> Do you have actions embedded in the grammar, or in a separate actions class?

[22:32] <jdv79> i'm poking at it though

[22:33] <jdv79> its seperate.  its the XML dist.

[22:33] <jnthn> OK, that's one hypothesis down then :)

[22:34] <jdv79> the cross thread write log didn't seem to illumniate anything startling to me

[22:34] <jdv79> gonna try some other grammar using things

[22:35] *** labster joined
[22:35] * jnthn tries to figure out the order modules are listed in on http://modules.perl6.org/ 

[22:37] <timotimo> it was alphabetically at one point

[22:38] <jdv79> oh, the grammar and conc rt is mine probably

[22:39] *** cpage_ left
[22:40] *** cpage_ joined
[22:43] *** spider-mario left
[22:45] *** pmurias left
[22:53] *** cpage_ left
[22:55] *** lambd0x left
[22:58] *** rindolf left
[23:08] *** mcmillhj joined
[23:18] *** itaipu joined
[23:18] *** mcmillhj left
[23:19] *** setty1 left
[23:20] *** pduh left
[23:27] *** n1lp7r left
[23:28] *** n1lp7r joined
[23:29] *** RabidGravy left
[23:30] *** jambun joined
[23:33] *** n1lp7r left
[23:35] *** mcmillhj joined
[23:38] <dalek> doc: b6f82b6 | (Wenzel P. P. Peppmeyer)++ | util/list-missing-methods.p6:

[23:38] <dalek> doc: add util/list-missing-methods.p6

[23:38] <dalek> doc: review: https://github.com/perl6/doc/commit/b6f82b6218

[23:43] <gfldex> Hash append is missing what I found with ^^^

[23:43] <dalek> modules.perl6.org: fd90ee5 | (Zoffix Znet)++ | public/js/main.js:

[23:44] <dalek> modules.perl6.org: Restore alphabetical module listing

[23:44] <dalek> modules.perl6.org: 

[23:44] <dalek> modules.perl6.org: Fixes fallout from koality removal

[23:44] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/fd90ee545f

[23:47] <sena_kun> m: my %a = one => 1, two => 2; for %a.pairs -> ($a, $b) {};

[23:47] <camelia> rakudo-moar c587b9: OUTPUT«Too few positionals passed; expected 2 arguments but got 0 in sub-signature␤  in block <unit> at <tmp> line 1␤␤»

[23:48] <timotimo> you get pair objects from .pairs

[23:48] <timotimo> they do not

[23:48] <timotimo> destructure into a list

[23:48] <timotimo> m: my %a = one => 1, two => 2; for %a.pairs -> (:$key, :$value) { }

[23:48] <camelia> rakudo-moar c587b9: ( no output )

[23:49] <sena_kun> Hmmm...

[23:50] <dalek> modules.perl6.org/bit-rot: 469195d | (Zoffix Znet)++ | Build.PL:

[23:50] <dalek> modules.perl6.org/bit-rot: List Data::UUID in prereqs

[23:50] <dalek> modules.perl6.org/bit-rot: 

[23:50] <dalek> modules.perl6.org/bit-rot: It's listed as prereq by Data::GUID, but for some reason did not get installed on a clean system, even though Data::GUID did install fine.

[23:50] <dalek> modules.perl6.org/bit-rot: review: https://github.com/perl6/modules.perl6.org/commit/469195d768

[23:50] <dalek> modules.perl6.org/bit-rot: 88742d4 | (Zoffix Znet)++ | Build.PL:

[23:50] <dalek> modules.perl6.org/bit-rot: Add Time::Moment to prereqs

[23:50] <dalek> modules.perl6.org/bit-rot: review: https://github.com/perl6/modules.perl6.org/commit/88742d4359

[23:50] <dalek> modules.perl6.org/bit-rot: f6f8f50 | (Zoffix Znet)++ | Build.PL:

[23:50] <dalek> modules.perl6.org/bit-rot: Add Imager::File::PNG to prereqs

[23:50] <dalek> modules.perl6.org/bit-rot: 

[23:50] <dalek> modules.perl6.org/bit-rot: It may have been a prereq on ::AssetPack at some point, but is no longer

[23:50] <dalek> modules.perl6.org/bit-rot: review: https://github.com/perl6/modules.perl6.org/commit/f6f8f5095c

[23:50] <dalek> modules.perl6.org/bit-rot: 8fe1075 | (Zoffix Znet)++ | README.md:

[23:50] <dalek> modules.perl6.org/bit-rot: Mention Edge in browser support

[23:50] <dalek> modules.perl6.org/bit-rot: review: https://github.com/perl6/modules.perl6.org/commit/8fe10750db

[23:50] <dalek> modules.perl6.org/bit-rot: cd7572b | (Zoffix Znet)++ | README.md:

[23:50] <dalek> modules.perl6.org/bit-rot: s/browers/browsers/

[23:50] <dalek> modules.perl6.org/bit-rot: review: https://github.com/perl6/modules.perl6.org/commit/cd7572b696

[23:50] <dalek> modules.perl6.org/bit-rot: c99d321 | (Pawel Murias)++ | Build.PL:

[23:50] <dalek> modules.perl6.org/bit-rot: perl Build test now runs tests.

[23:50] <dalek> modules.perl6.org/bit-rot: review: https://github.com/perl6/modules.perl6.org/commit/c99d321632

[23:50] <dalek> modules.perl6.org/bit-rot: 8467077 | (Pawel Murias)++ | / (15 files):

[23:50] <dalek> modules.perl6.org/bit-rot: Remove Koalatee.

[23:50] <dalek> modules.perl6.org/bit-rot: review: https://github.com/perl6/modules.perl6.org/commit/8467077512

[23:50] <dalek> modules.perl6.org/bit-rot: fd90ee5 | (Zoffix Znet)++ | public/js/main.js:

[23:50] <dalek> modules.perl6.org/bit-rot: Restore alphabetical module listing

[23:50] <dalek> modules.perl6.org/bit-rot: 

[23:50] <dalek> modules.perl6.org/bit-rot: Fixes fallout from koality removal

[23:50] <dalek> modules.perl6.org/bit-rot: review: https://github.com/perl6/modules.perl6.org/commit/fd90ee545f

[23:50] <dalek> modules.perl6.org/bit-rot: dbb8e76 | (Zoffix Znet)++ | / (18 files):

[23:50] <dalek> modules.perl6.org/bit-rot: Merge branch 'master' into bit-rot

[23:50] <dalek> modules.perl6.org/bit-rot: review: https://github.com/perl6/modules.perl6.org/commit/dbb8e769f8

[23:50] <sena_kun> Oh wow.

[23:51] <sena_kun> Thanks, timotimo.

[23:51] *** pduh_ joined
[23:52] * unmatched} gives dalek a sock

[23:52] *** pduh_ left
[23:53] *** cpage_ joined
[23:56] <gfldex> m: my %a = one => 1, two => 2; for %a.kv -> $a, $b { say $a, $b };

[23:56] <camelia> rakudo-moar c587b9: OUTPUT«two2␤one1␤»

[23:56] <gfldex> sena_kun: you may want .kv instead of .pairs

[23:57] <timotimo> m: my %a = :1one, :2two; for %a -> (:$key, :$value) { say $value }

[23:57] <camelia> rakudo-moar c587b9: OUTPUT«2␤1␤»

[23:57] <timotimo> ^- iterating over the hash directly behaves just like iterating over .pairs

[23:57] <sena_kun> gfldex, I want(or, rather, author of now broken example wanted .ks). Oh, without brackets it should do the right thing.

[23:57] <sena_kun> *.kv

[23:58] *** cpage_ left
[23:58] <timotimo> no, without brackets you get 2 pairs per iteration

[23:58] <timotimo> m: my %a = :1one, :2two; for %a -> $a, $b { say "a: $a"; say "b: $b" }

[23:58] <camelia> rakudo-moar c587b9: OUTPUT«a: two       2␤b: one        1␤»

[23:58] <sena_kun> The original line is "for %intervals.pairs.sort(* cmp *) -> (Instant $instant, $note) { ... }".

[23:59] <timotimo> isn't cmp the default for sort?

[23:59] <dalek> modules.perl6.org/bit-rot: 80b12cc | (Zoffix Znet)++ | / (2 files):

[23:59] <dalek> modules.perl6.org/bit-rot: Fix Build.PL to make cpanm --installdeps -vn . work

[23:59] <dalek> modules.perl6.org/bit-rot: review: https://github.com/perl6/modules.perl6.org/commit/80b12cc297

[23:59] <sena_kun> It's an old example. (:

