[00:00] <lambd0x> timotimo: hm, so what would be a better option in your opinion? Parrot or JVM?

[00:00] <timotimo> you can't use parrot for a rakudo any more at all

[00:00] <timotimo> we dropped support over a year ago if i'm not mistaken

[00:01] <lambd0x> Oh I see, it got limited to project at some point then?

[00:02] *** stevieb9 left
[00:02] *** yqt left
[00:02] <timotimo> one reason we ported rakudo to the JVM was to rely on its mature multi-threading support so we could design proper multi-threading stuff for rakudo

[00:02] <timotimo> after that we built the port to MoarVM, which also has multi-threading features based on what we learned

[00:02] <timotimo> parrot also has multi-threading features, but nobody put the work in to make rakudo make use of it

[00:03] *** tardisx left
[00:03] *** stevieb9 joined
[00:04] *** TEttinger joined
[00:05] <lambd0x> Understood. Quite peculiar the way things end up :). That's nice really. Oh, so right now the optimizations you said that are being development, is to improve Raduko with MoarVM to the point where it gets stabvle

[00:05] <lambd0x> *stable?

[00:06] <timotimo> these optimizations are for performance only. less memory usage, less CPU time usage, less contention on locks and resources when multi-threading and doing async I/O

[00:06] <timotimo> stability improvements happen all the time, but moarvm has been considered stable for a long time now

[00:07] <timotimo> there are still bugs, of course. you can still make it crash in some ways, of course

[00:08] *** stevieb9 left
[00:09] <lambd0x> :) Nice so even learning/clashing the language I might end up helping you guys somehow

[00:11] *** cdg left
[00:11] *** tardisx joined
[00:11] *** jjido left
[00:11] *** jjido_ joined
[00:12] *** cdg joined
[00:12] <lambd0x> So I think I'll get the compiler with MoarVM so that I can give feedback. Although I don't know it portage's version is current with the language dev. 

[00:16] <timotimo> it's easy to figure out, since we name our versions after year and month

[00:16] <timotimo> so if you have 2015.03, you're far out of date

[00:16] *** cdg left
[00:16] <timotimo> if you get 2016.06, you're faster than everybody else! :)

[00:16] <timotimo> just run perl6 --version and you'll see what your version is

[00:20] *** jjido_ left
[00:21] <lambd0x> almost timotimo, it is currently 2016/05

[00:21] <timotimo> perfect

[00:22] <timotimo> This is Rakudo version 2016.05-145-gac0dcdd built on MoarVM version 2016.05-34-gfbe9e24  <-  you can't get newer than this at the moment

[00:24] *** vendethiel left
[00:24] <lambd0x> I see. here is "version 2016.05 built on MoarVM version 2016.05"

[00:25] <timotimo> then you have a released version, and i have an in-development version

[00:25] <timotimo> i'll go to bed soon, but i wish you the best of luck with perl6 :)

[00:26] <timotimo> http://perl6.org/downloads/  -  the "introductory material" on the right of this page is good

[00:26] <lambd0x> timotimo: Man you helped me a lot really. Thanks for you time have a good night. o/

[00:26] <timotimo> \o

[00:26] <lambd0x> thanks

[00:27] *** awwaiid left
[00:27] *** awwaiid joined
[00:32] *** MilkmanDan[Han] is now known as MilkmanDan

[00:32] *** dfcarpenterak left
[00:38] *** vendethiel joined
[00:40] *** lambd0x left
[00:43] *** tardisx left
[00:47] *** tardisx joined
[00:50] *** cpage_ left
[00:50] *** cpage__ joined
[00:51] *** b2gills joined
[00:56] *** awwaiid left
[00:57] *** awwaiid joined
[01:01] *** vendethiel left
[01:02] *** vendethiel joined
[01:10] *** rindolf left
[01:12] <Xliff_> How can I trace execution in perl6? I am trying to debug and endless loop and am having no luck with the traditional debugging methods.

[01:13] <jdv79> throw an exception, catch it to print it?

[01:13] <jdv79> i don't know if we have something like Carp::longmess from p5

[01:14] *** molaf left
[01:14] <jdv79> maybe i'm wrong - https://rosettacode.org/wiki/Stack_traces#Perl_6

[01:15] <llfourn> you can just say Backtrace.new.gist I think

[01:15] <llfourn> m: say Backtrace.new.gist

[01:15] <camelia> rakudo-moar ac0dcd: OUTPUT«Backtrace.new␤»

[01:16] <llfourn> m: say Backtrace.new.Str

[01:16] <camelia> rakudo-moar ac0dcd: OUTPUT«  in block <unit> at <tmp> line 1␤␤»

[01:16] <llfourn> Backtrace.new.Str*

[01:16] <jdv79> rosetta suggests .concise

[01:16] <jdv79> whatever that is

[01:16] <llfourn> m: say Backtrace.new.consise

[01:16] <camelia> rakudo-moar ac0dcd: OUTPUT«Method 'consise' not found for invocant of class 'Backtrace'␤  in block <unit> at <tmp> line 1␤␤»

[01:16] <llfourn> m: say Backtrace.new.concise

[01:16] <camelia> rakudo-moar ac0dcd: OUTPUT«␤»

[01:17] <llfourn> doesn't seem too useful :P

[01:17] <jdv79> i guess rosetta needs updating

[01:17] <llfourn> maybe it's better if you have some frames

[01:17] <llfourn> m: sub foo { say Backtrace.new.concise }; foo()

[01:17] <camelia> rakudo-moar ac0dcd: OUTPUT«  in sub foo at <tmp> line 1␤␤»

[01:18] <jdv79> yeah

[01:18] <jdv79> (self.grep({ !.is-hidden && .is-routine && !.is-setting }) // "\n").join

[01:18] <llfourn> m: sub foo { say Backtrace.new.concise }; sub bar { foo }; bar()

[01:18] <camelia> rakudo-moar ac0dcd: OUTPUT«  in sub foo at <tmp> line 1␤  in sub bar at <tmp> line 1␤␤»

[01:18] <jdv79> that's the method

[01:18] <Xliff_> Actually, isn't there a command line argument or an environment variable that gives you detailed output on what is happening under the hood?

[01:18] <llfourn> --ll-exception

[01:18] <Xliff_> Ahh!

[01:18] <jdv79> uh.  there's --ll-exception for more verbose failures

[01:19] <llfourn> they're more low level rahter than verbose in my experience

[01:19] <jdv79> idk about something like that for non-exceptional times except if you want to output a profile and dig

[01:19] <llfourn> ie "ll"

[01:19] <jdv79> bug likely not fun

[01:20] <Xliff_> Hrm. --ll-exception didn't seem to do anything.

[01:20] <jdv79> well, verbose in one direction:)

[01:20] <jdv79> are you throwing exceptions?

[01:20] <Xliff_> Nope

[01:20] *** Zoffix joined
[01:20] <llfourn> .oO( what do you think the ll means in llfourn )

[01:20] <jdv79> then... that won't be helpful

[01:20] <Xliff_> Endless loop. I'm trying to figure out why.

[01:20] <jdv79> could you show the code?

[01:21] <Xliff_> Not really. It'

[01:21] <jdv79> the Backtrace class seems like your friend here

[01:21] <Xliff_> It's test code and it's got several modules.

[01:21] <Xliff_> I'm suspecting it's Nativecall code, but I have no idea where. 

[01:21] <jdv79> why is it called backtrace?  isn't stacktrace more conventional.

[01:21] <llfourn> Xliff_: are you sure it's a loop? There seems to be a bug I'm hitting where when rakudo throws an exception it hangs forever and never shows it.

[01:21] <Xliff_> So to show the code, I'd have to give you everything

[01:21] <llfourn> I haven't golfed it yet

[01:21] <llfourn> but it's something to do with typechecking parameters I think

[01:21] <Xliff_> llfourn, actually....that's a possibility.

[01:22] <llfourn> it's quite annoying :(

[01:23] <Xliff_> I'm getting this a lot -- "Internal error: zeroed target thread ID in work pass"

[01:23] *** Zoffix left
[01:23] <jdv79> hmm.  interesting.  wonder what %*ENV<RAKUDO_VERBOSE_STACKFRAME> does....

[01:23] <llfourn> :S that sounds bad

[01:23] <jdv79> Bastrace.Str seems to look at it

[01:23] <jdv79> *Backtrace

[01:23] <llfourn> it's probably -ll-exeception?

[01:23] <jdv79> ah

[01:24] <Xliff_> *sigh*

[01:25] <Xliff_> I finally isolated the call. It's in new code I just finished today.

[01:25] <Xliff_> Wheee

[01:25] <Xliff_> Pointer manipulation.

[01:25] <Xliff_> jdv79, THAT'S it!

[01:25] <Xliff_> %*ENV<RAKUDO_VERBOSE_STACKFRAME> <-- setting this will have rakudo send all of its operations to stdout.

[01:26] <jdv79> are you sure that helps?

[01:26] <llfourn> oh cool?

[01:26] *** molaf joined
[01:27] <Xliff_> Hrm. Dammit. I thought that was it.

[01:28] <Xliff_> Damn. No, that's not it. It's something close to that, though.

[01:29] <Xliff_> I will have to scour rakudo code to find that option now. It's bothering meee.

[01:29] *** girafe3 left
[01:30] <jdv79> are you sure it exists?

[01:31] <Xliff_> I remember using it once.

[01:31] <Xliff_> It printed everything the compiler and VM was doing.

[01:32] <Xliff_> However "remember using it" !=:= "how to invoke it"

[01:32] <Xliff_> Which kills me.

[01:32] <jdv79> maybe its a moarvm thing

[01:32] <Xliff_> Probably.

[01:32] <Xliff_> At any rate, I finally have a place to start. It's probably in my converted XS code.

[01:32] <Xliff_> Which I am in no mood to debug, right now.

[01:33] <Xliff_> Thanks for the help!

[01:33] *** ssotka left
[01:43] *** awwaiid left
[01:43] *** awwaiid joined
[01:44] <timotimo> Xliff_: you can run perl6-gdb-m, hit ctrl-c at a random point, go "up" until you have a frame where the "tc" variable is available (almost always the first parameter to a function) and then "print MVM_dump_backtrace(tc)"

[01:44] <timotimo> and then "c" to continue running and ctrl-c again

[01:46] *** ilbot3 left
[01:46] *** mohae joined
[01:46] <jdv79> where are the "commandline_options" actually used?

[01:47] *** ilbot3 joined
[01:48] <timotimo> also, there's "use trace", which isn't working 100% great

[01:49] *** vendethiel left
[01:49] *** mohae_ left
[01:49] *** Sgeo joined
[01:49] <jdv79> is it 100% good?

[01:50] <jdv79> which translates to much great then?

[01:50] <jdv79> s/much/how much/

[01:51] <timotimo> it's sometimes very strange

[01:57] *** vendethiel joined
[01:59] *** BenGoldberg joined
[02:01] *** BenGoldberg left
[02:16] *** kurahaupo_ joined
[02:18] *** kurahaupo left
[02:20] *** kid51 left
[02:23] *** kurahaupo_ left
[02:25] *** inokenty left
[02:29] *** noganex_ joined
[02:29] *** colomon left
[02:29] *** awwaiid left
[02:29] *** awwaiid joined
[02:31] *** noganex left
[02:39] *** wamba joined
[02:39] *** vendethiel left
[02:40] *** inokenty joined
[02:47] *** grassass left
[02:49] <tony-o> it's watermelons good

[02:50] <tony-o> mature fruit, also known as a vine-like (scrambler and trailer) flowering the crop. The fruit,

[02:52] *** vendethiel joined
[02:53] *** kaare_ joined
[03:12] *** mohae_ joined
[03:14] <timeless> .tell AlexDaniel sounds like the right problem and the right solution

[03:14] <yoleaux> timeless: I'll pass your message to AlexDaniel.

[03:14] *** vendethiel left
[03:14] *** mohae left
[03:14] *** grassass joined
[03:16] *** ssotka joined
[03:17] <dalek> doc/eval-desc-grammar: 1b3676a | (Josh Soref)++ | doc/Type/Cool.pod:

[03:17] <dalek> doc/eval-desc-grammar: fix EVAL desc grammar

[03:17] <dalek> doc/eval-desc-grammar: review: https://github.com/perl6/doc/commit/1b3676af1d

[03:18] <dalek> doc: 1b3676a | (Josh Soref)++ | doc/Type/Cool.pod:

[03:18] <dalek> doc: fix EVAL desc grammar

[03:18] <dalek> doc: review: https://github.com/perl6/doc/commit/1b3676af1d

[03:19] <dalek> doc: 26365b9 | (Josh Soref)++ | type-graph.txt:

[03:19] <dalek> doc: Add order to typegraph

[03:19] <dalek> doc: review: https://github.com/perl6/doc/commit/26365b9f1a

[03:23] *** aries_liuxueyang left
[03:25] *** aries_liuxueyang joined
[03:28] *** telex left
[03:28] *** telex joined
[03:31] *** travis-ci joined
[03:31] <travis-ci> Doc build passed. Josh Soref 'fix EVAL desc grammar'

[03:31] <travis-ci> https://travis-ci.org/perl6/doc/builds/137692297 https://github.com/perl6/doc/commit/1b3676af1dee

[03:31] *** travis-ci left
[03:32] *** mosh left
[03:34] *** beatdown joined
[03:35] *** travis-ci joined
[03:35] <travis-ci> Doc build passed. Josh Soref 'Add order to typegraph'

[03:35] <travis-ci> https://travis-ci.org/perl6/doc/builds/137692478 https://github.com/perl6/doc/compare/typegraph-order

[03:35] *** travis-ci left
[03:39] <sammers_> good afternoon from Japan

[03:51] *** cpage__ left
[03:51] *** MadcapJake left
[03:51] *** jrusso joined
[03:52] *** cpage_ joined
[03:52] *** cpage_ left
[03:52] *** jrusso is now known as MadcapJake

[04:00] *** colomon joined
[04:00] <grondilu> kon icha wa

[04:01] * grondilu has no idea if that's how one writes it but whatev

[04:01] <grondilu> "ichi" instead of "icha" for sure though

[04:05] *** skids left
[04:09] *** jevin_ joined
[04:11] *** Cabanossi left
[04:11] *** jevin left
[04:13] *** Cabanossi joined
[04:15] *** tardisx left
[04:18] *** khw left
[04:22] *** awwaiid left
[04:22] *** Zero_Dogg left
[04:22] *** Zero_Dogg joined
[04:22] *** awwaiid joined
[04:22] *** baest_ is now known as baest

[04:22] *** baest left
[04:23] *** baest joined
[04:26] *** snarkyboojum joined
[04:26] *** snarkyboojum left
[04:32] *** awwaiid left
[04:33] *** awwaiid joined
[04:34] *** lizmat left
[04:35] *** tardisx joined
[04:37] *** vendethiel joined
[04:45] *** sortiz left
[04:45] *** cpage_ joined
[04:48] *** tardisx left
[04:50] <timeless> こんにちは

[04:50] <timeless> 今日は

[04:54] *** Possum left
[04:58] *** vendethiel left
[05:02] *** awwaiid left
[05:03] *** tardisx joined
[05:03] *** awwaiid joined
[05:05] *** sno left
[05:08] *** wamba left
[05:20] *** zzzzzzzzz left
[05:20] *** zzzzzzzzz joined
[05:28] *** rurban joined
[05:37] *** rurban1 joined
[05:39] *** rurban2 joined
[05:40] *** rurban left
[05:42] *** rurban1 left
[05:50] *** vendethiel joined
[06:03] <timeless> m: $a = '/a/b#c'; say "hi" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)[#(.*)|]!;

[06:03] <camelia> rakudo-moar ac0dcd: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5$a = '/a/b#c'; say "hi" if $a ~~ m!(\/<-␤»

[06:04] <timeless> m: my $a = '/a/b#c'; say "hi" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)[#(.*)|]!;

[06:04] <camelia> rakudo-moar ac0dcd: OUTPUT«5===SORRY!5===␤Regex not terminated.␤at <tmp>:1␤------> 3$a ~~ m!(\/<-[/]>*\/)(<-[#]>*)[#(.*)|]!;7⏏5<EOL>␤Regex not terminated.␤at <tmp>:1␤------> 3$a ~~ m!(\/<-[/]>*\/)(<-[#]>*)[#(.*)|]!;7⏏5<EOL>␤Unable to parse expression in…»

[06:05] <timeless> m: my $a = '/a/b#c'; say "hi" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)[#(.*)|]!;

[06:05] <camelia> rakudo-moar ac0dcd: OUTPUT«5===SORRY!5===␤Regex not terminated.␤at <tmp>:1␤------> 3$a ~~ m!(\/<-[/]>*\/)(<-[#]>*)[#(.*)|]!;7⏏5<EOL>␤Regex not terminated.␤at <tmp>:1␤------> 3$a ~~ m!(\/<-[/]>*\/)(<-[#]>*)[#(.*)|]!;7⏏5<EOL>␤Unable to parse expression in…»

[06:05] * timeless realizes that the blue is from the irc client channel linkifier

[06:06] <timeless> m: my $a = '/a/b#c'; say "hi" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)(#(.*)|)!;

[06:06] <camelia> rakudo-moar ac0dcd: OUTPUT«5===SORRY!5===␤Regex not terminated.␤at <tmp>:1␤------> 3$a ~~ m!(\/<-[/]>*\/)(<-[#]>*)(#(.*)|)!;7⏏5<EOL>␤Regex not terminated.␤at <tmp>:1␤------> 3$a ~~ m!(\/<-[/]>*\/)(<-[#]>*)(#(.*)|)!;7⏏5<EOL>␤Unable to parse expression in…»

[06:06] <timeless> m: my $a = '/a/b#c'; say "hi" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)!;

[06:06] <camelia> rakudo-moar ac0dcd: OUTPUT«hi␤»

[06:06] *** sno joined
[06:06] <timeless> m: my $a = '/a/b#c'; say "hi <$0><$1><$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)!;

[06:06] <camelia> rakudo-moar ac0dcd: OUTPUT«Use of Nil in string context  in block <unit> at <tmp> line 1␤hi </a/><b><>␤»

[06:06] <timeless> m: my $a = '/a/b#c'; say "hi <$0><$1><$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)()!;

[06:06] <camelia> rakudo-moar ac0dcd: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Null regex not allowed␤at <tmp>:1␤------> 3<$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)(7⏏5)!;␤    expecting any of:␤        infix stopper␤»

[06:06] <timeless> m: my $a = '/a/b#c'; say "hi <$0><$1><$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)(.*)!;

[06:06] <camelia> rakudo-moar ac0dcd: OUTPUT«hi </a/><b><#c>␤»

[06:07] <timeless> m: my $a = '/a/b#c'; say "hi <$0><$1><$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)(#(.*))!;

[06:07] <camelia> rakudo-moar ac0dcd: OUTPUT«5===SORRY!5===␤Regex not terminated.␤at <tmp>:1␤------> 3 $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)(#(.*))!;7⏏5<EOL>␤Regex not terminated.␤at <tmp>:1␤------> 3 $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)(#(.*))!;7⏏5<EOL>␤Unable to parse expression in…»

[06:07] <timeless> m: my $a = '/a/b#c'; say "hi <$0><$1><$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)([#](.*))!;

[06:07] <camelia> rakudo-moar ac0dcd: OUTPUT«5===SORRY!5===␤Regex not terminated.␤at <tmp>:1␤------> 3a ~~ m!(\/<-[/]>*\/)(<-[#]>*)([#](.*))!;7⏏5<EOL>␤Regex not terminated.␤at <tmp>:1␤------> 3a ~~ m!(\/<-[/]>*\/)(<-[#]>*)([#](.*))!;7⏏5<EOL>␤Unable to parse expression in…»

[06:07] <timeless> m: my $a = '/a/b#c'; say "hi <$0><$1><$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)(<#>(.*))!;

[06:07] <camelia> rakudo-moar ac0dcd: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter < (must be quoted to match literally)␤at <tmp>:1␤------> 3$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)(<7⏏5#>(.*))!;␤Unrecognized regex metacharacter # (must be quoted to match literally)␤at <tm…»

[06:08] <timeless> m: my $a = '/a/b#c'; say "hi <$0><$1><$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)(<[#]>(.*))!;

[06:08] <camelia> rakudo-moar ac0dcd: OUTPUT«hi </a/><b><#c>␤»

[06:08] <timeless> m: my $a = '/a/b#c'; say "hi <$0><$1><$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)[<[#]>(.*)]!;

[06:08] <camelia> rakudo-moar ac0dcd: OUTPUT«hi </a/><b><c>␤»

[06:08] <timeless> is that really how i'm supposed to write this?

[06:14] *** awwaiid left
[06:14] *** awwaiid joined
[06:14] *** vendethiel left
[06:15] *** domidumont joined
[06:16] <timeless> m: my $a = '/a/b#c'; say "hi <$0><$1><$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)[<[#]>(.*) || ]!;

[06:16] <camelia> rakudo-moar ac0dcd: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Null regex not allowed␤at <tmp>:1␤------> 3~ m!(\/<-[/]>*\/)(<-[#]>*)[<[#]>(.*) || 7⏏5]!;␤    expecting any of:␤        infix stopper␤»

[06:16] <timeless> that's unhelpful

[06:20] *** domidumont left
[06:20] *** domidumont joined
[06:20] *** vendethiel joined
[06:22] *** huggable joined
[06:26] *** firstdayonthejob joined
[06:33] *** mr-foobar left
[06:34] *** ssotka left
[06:40] *** dwarring left
[06:42] *** rurban_ joined
[06:44] *** firstdayonthejob left
[06:47] <masak> morning, #perl6

[06:52] <dalek> doc: 5fe50f7 | parabolize++ | doc/Type/Capture.pod:

[06:52] <dalek> doc: Corrections in Capture doc (#598)

[06:52] <dalek> doc: 

[06:52] <dalek> doc: * Change delimiters on formatted code

[06:52] <dalek> doc: 

[06:52] <dalek> doc: * Parenthesize single numeric value

[06:52] <dalek> doc: 

[06:52] <dalek> doc: example code generates warnings of potential difficulties

[06:52] <dalek> doc: 

[06:52] <dalek> doc: * Update Capture.pod

[06:52] <dalek> doc: review: https://github.com/perl6/doc/commit/5fe50f78a4

[06:53] *** melezhik joined
[06:54] *** tardisx left
[06:55] <melezhik> Hi all! I have a perl6 HASH ; my %h1 = 'apples' => 3, 'oranges' => 7;  my $s = 'apples'; how can I get %h apples value ? seems like %a<$s> does not work?

[06:56] <gfldex> m: my %h = 'apples' => 3, 'oranges' => 7; my $s = 'apples'; dd %h<<$s>>;

[06:56] <camelia> rakudo-moar ac0dcd: OUTPUT«(3,)␤»

[06:59] <gfldex> m: my %h = 'apples' => 3, 'oranges' => 7; my $s = 'apples'; dd %h{$s};

[06:59] <camelia> rakudo-moar ac0dcd: OUTPUT«Int %h = 3␤»

[07:00] <gfldex> melezhik: see http://doc.perl6.org/language/subscripts

[07:01] *** _mg_ joined
[07:02] *** vendethiel left
[07:05] <moritz> melezhik: {} is for subscripting with expressions, <> for subscripting with literal strings

[07:06] <gfldex> m: my %h = 'apples' => 3, 'oranges' => 7; my $s = 'apples'; dd %h<apples oranges>;

[07:06] <camelia> rakudo-moar ac0dcd: OUTPUT«(3, 7)␤»

[07:06] <gfldex> lists of literal strings

[07:06] *** _mg_ left
[07:08] *** tardisx joined
[07:09] <melezhik> gfldex, mortiz - sounds good!, thanks

[07:12] *** RabidGravy joined
[07:12] *** abraxxa joined
[07:13] <RabidGravy> MARNIN!

[07:13] <grondilu> moinz

[07:14] *** krakan left
[07:14] *** krakan joined
[07:19] *** nebuchadnezzar left
[07:19] *** nebuchadnezzar joined
[07:22] *** xinming left
[07:23] *** xinming joined
[07:33] <dalek> doc: 0feafb2 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Hash.pod:

[07:33] <dalek> doc: improve Hash, provide link to subscripts

[07:33] <dalek> doc: review: https://github.com/perl6/doc/commit/0feafb28b9

[07:33] <gfldex> melezhik++ # for asking the right question

[07:43] *** vendethiel joined
[07:45] *** zakharyas joined
[07:51] *** _mg_ joined
[07:57] *** tardisx left
[07:58] *** ocbtec joined
[08:03] *** CIAvash joined
[08:04] *** vendethiel left
[08:09] *** _mg_ left
[08:09] <masak> gradual insight about language creation: it's not always clear when you're arguing a great feature for your language, or when you have an axe to grind. from inside your head, the latter often looks like the former.

[08:11] *** _mg_ joined
[08:15] *** dakkar joined
[08:16] *** mohae_ left
[08:19] *** zakharyas left
[08:21] <melezhik> gfldex: :))

[08:26] *** brrt joined
[08:26] *** [particle]1 left
[08:26] *** melezhik left
[08:26] *** [particle] joined
[08:32] *** araujo joined
[08:41] *** vendethiel joined
[08:43] *** donaldh joined
[08:48] *** Actualeyes left
[08:51] *** g4 joined
[08:52] *** rurban2 left
[08:53] *** brrt left
[08:59] *** jack_rabbit_ joined
[09:00] *** jack_rabbit left
[09:03] *** bjz joined
[09:04] *** jack_rabbit_ is now known as jack_rabbit

[09:14] *** Actualeyes joined
[09:16] *** TEttinger left
[09:19] *** bjz left
[09:19] *** rindolf joined
[09:24] *** vendethiel left
[09:29] <dalek> doc: e5d4cfb | (Wenzel P. P. Peppmeyer)++ | doc/Type/Hash.pod:

[09:29] <dalek> doc: forgot to remove old example

[09:29] <dalek> doc: review: https://github.com/perl6/doc/commit/e5d4cfbde9

[09:33] *** lizmat joined
[09:35] *** zakharyas joined
[09:37] *** azawawi joined
[09:38] <azawawi> hi

[09:38] <azawawi> RabidGravy: pong

[09:38] <azawawi> RabidGravy: $pong.flip

[09:39] *** _mg_ left
[09:42] *** Possum joined
[09:42] *** tadzik left
[09:42] *** M-Illandan left
[09:42] *** M-matthew left
[09:47] *** bjz joined
[09:51] *** melezhik joined
[09:52] <melezhik> Hi guys! Does anybody know a proper perl6 YAML parser? I need to convert perl6 hashes into YAML ... Thanks ... 

[09:53] <azawawi> http://modules.perl6.org/#q=YAML   ?

[09:54] <azawawi> melezhik: http://modules.perl6.org is your friend. Type and it will autocomplete your query :)

[09:55] <melezhik> unfortunatelly a candidates found quite raw ... not stable 

[09:58] *** lizmat left
[09:59] *** lizmat joined
[09:59] *** vendethiel joined
[09:59] <gregf_> melezhik: you can also use Inline::Perl5. but yeah, pure Perl6 would be better

[10:02] *** andreoss joined
[10:02] <gregf_> m: https://gist.github.com/anonymous/018007d537313e3db54e74072e91ee33

[10:02] <camelia> rakudo-moar ac0dcd: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter ; (must be quoted to match literally)␤at <tmp>:1␤------> 3m = Module.new7⏏5; p m.methods; m.send(:define_method, :h␤Couldn't find terminator = (corresponding = was at line 1)␤at <tmp>:1␤…»

[10:02] <gregf_> bah :/

[10:02] <gregf_> m: https://gist.github.com/anonymous/6101f317348189a1b6681e4da2919477

[10:02] <camelia> rakudo-moar ac0dcd: OUTPUT«===SORRY!===␤Could not find Inline::Perl5 at line 3 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6␤    CompUnit:…»

[10:03] <gregf_> m: use Inline::Perl5;use YAML::XS:from<Perl5>;my $h = { "foo" => [1,2,3,4], "bar" => 100  };say Dump($h);

[10:03] <camelia> rakudo-moar ac0dcd: OUTPUT«===SORRY!===␤Could not find Inline::Perl5 at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6␤    CompUnit:…»

[10:03] *** silug left
[10:04] <RabidGravy> boo!

[10:05] <lizmat> hiss!

[10:05] <gregf_> *runs*

[10:07] <RabidGravy> melezhik, I think you will find that a large proportion of the ecosystem is fairly raw and unstable due to the relative immaturity of the whole ecosystem

[10:08] <RabidGravy> melezhik, as a rule of thumb it's either use what you find and help improve it or write something better yourself

[10:08] <RabidGravy> azawawi, WAKEY WAKEY

[10:09] <azawawi> RabidGravy: im sleepy lol

[10:09] *** eyck left
[10:09] *** eyck joined
[10:09] <azawawi> RabidGravy: new rig 'i7 6700' eats 'rakudobrew build moar' parse stage in 42 secs :)

[10:10] <RabidGravy> coolio

[10:10] <azawawi> RabidGravy: vs ~70 sec for amd fx-8150

[10:11] <azawawi> RabidGravy: 35% on multi thread, 25% on single thread performance difference 

[10:11] <azawawi> RabidGravy: https://github.com/rakudo/rakudo/commit/ac0dcddb11e42be4aafe0417da98b109116bd602 improved GTK::Simple performance considerably

[10:12] <azawawi> RabidGravy: FROGGS++

[10:14] <RabidGravy> coo, I saw that one go in a wondered about that

[10:14] <RabidGravy> FROGGS++ indeed

[10:14] *** silug joined
[10:15] <melezhik> RabidGravy : Ok , sure ))

[10:15] <RabidGravy> may have to re-run "test all the things" to see if I see an improvement with a broad set of NC modules

[10:16] <RabidGravy> the burden of being an "early adopter"

[10:18] <azawawi> RabidGravy: .precomp was like 42 MB

[10:18] <gfldex> the docs say that %-sigiled containers got the Hash as a default type. That could be understood as if the default could be changed. Is that possible (without roles)?

[10:19] <azawawi> RabidGravy: now it is 4MB

[10:19] <jnthn> m: my %h is SetHash; %h<a>++; say %h.perl

[10:19] <camelia> rakudo-moar ac0dcd: OUTPUT«SetHash.new("a")␤»

[10:20] <gfldex> i shall doc that

[10:21] <gfldex> m: my %h is SetHash = oranges => 'round'; %h<a>++; say %h.perl

[10:21] <camelia> rakudo-moar ac0dcd: OUTPUT«Cannot modify an immutable SetHash␤  in block <unit> at <tmp> line 1␤␤»

[10:22] *** tadzik joined
[10:22] *** huggable left
[10:23] <gfldex> m: my %h is SetHash = { oranges => 'round' };

[10:23] <camelia> rakudo-moar ac0dcd: OUTPUT«Cannot modify an immutable SetHash␤  in block <unit> at <tmp> line 1␤␤»

[10:24] <jnthn> SetHash/BagHash/MixHash don't implement STORE, afaik, so you can't assign them. I think we probably could implement that...

[10:25] <moritz> aren't some of those intentially read-only?

[10:26] *** abruanese joined
[10:26] <masak> moritz: not the Hash types

[10:26] <psch> m: my $h = SetHash.new(<a b>); $h<c>++; say $h.perl

[10:26] <camelia> rakudo-moar ac0dcd: OUTPUT«SetHash.new("a","c","b")␤»

[10:26] <masak> moritz: Set/Bag/Mix are all immutable

[10:26] <jnthn> Right, those certainly shouldn't get a STORE 

[10:26] <moritz> ok, good

[10:26] *** bjz left
[10:28] *** azawawi left
[10:30] <RabidGravy> while we're on the subject of "is"ing containers, I'm actually surprised that no-one has freaked it about "my @a is Hash" (and friends)

[10:31] <RabidGravy> if nothing else it makes it more complicated to explain aggregate containers and their respective sigils

[10:31] <jnthn> That probably should be a type error

[10:31] <lizmat> well, that's part of the malleability of Perl 6, no ?

[10:31] <jnthn> (Hash isn't Positional)

[10:32] <jnthn> m: my @a is Hash

[10:32] <camelia> rakudo-moar b3e9f5: ( no output )

[10:32] <jnthn> Hm, yeah, that's busted

[10:32] <RabidGravy> and also

[10:32] <jnthn> m: my @a is Hash; say @a ~~ Positional

[10:32] <camelia> rakudo-moar b3e9f5: OUTPUT«False␤»

[10:32] <RabidGravy> m: my %a is Array

[10:32] <camelia> rakudo-moar b3e9f5: ( no output )

[10:32] <masak> nine: was it you who fixed the precomp trouble?

[10:32] <jnthn> Yeah, it'll be the same place that wants fixing.

[10:32] <masak> nine: I just want to say that it's much better now. thank you. <3

[10:33] *** awwaiid left
[10:33] *** awwaiid joined
[10:33] <lizmat> glfdex: in a Set we only have keys basically, what should happen to the values ???

[10:34] *** rurban_ left
[10:34] <lizmat> m: my %h is SetHash; %h<a> = 5; dd %h   # jnthn: you *can* assign to SetHashes

[10:34] <camelia> rakudo-moar b3e9f5: OUTPUT«SetHash.new("a")␤»

[10:35] <jnthn> lizmat: No

[10:35] <jnthn> lizmat: You can assign to *elements* of SetHashes

[10:35] <jnthn> That's different.

[10:35] <lizmat> ah, you mean:

[10:35] <jnthn> (The assignment is actually to a Scalar container bound into a SetHash)

[10:35] <lizmat> m: my %h is SetHash = <a b c d>

[10:35] <camelia> rakudo-moar b3e9f5: OUTPUT«Cannot modify an immutable SetHash␤  in block <unit> at <tmp> line 1␤␤»

[10:35] <jnthn> Right

[10:36] <jnthn> Though if that one works it'll discard b and d presumably

[10:36] <psch> m: my %h is SetHash .= new: <a b c d>

[10:36] <camelia> rakudo-moar b3e9f5: OUTPUT«Cannot modify an immutable SetHash␤  in block <unit> at <tmp> line 1␤␤»

[10:36] <lizmat> well, there you go: that's not what I expecred

[10:36] <lizmat> $ted

[10:36] <jnthn> Though would be good for TimToady to weigh in on that.

[10:36] <lizmat> yeah

[10:36] *** bjz joined
[10:37] <jnthn> It'd be the consistent thing for assigning to something with a % sigil...as usual, we have to pick the consistency we want :)

[10:38] * masak .oO( we're good at picking consistencies, we're just not very consistent about it )

[10:39] *** araujo_ joined
[10:41] *** araujo_ left
[10:41] <nine> masak: FROGGS++ fixed the part that probably hurt you. I fixed issues on archaic file systems like FAT32 and HFS+

[10:41] *** araujo_ joined
[10:42] *** _mg_ joined
[10:43] *** araujo left
[10:44] *** araujo_ left
[10:46] *** AlexDaniel joined
[10:48] <dalek> doc: de1690d | (Zoffix Znet)++ | doc/Type/Capture.pod:

[10:48] <dalek> doc: Fix typo mentioned in #598

[10:48] <dalek> doc: review: https://github.com/perl6/doc/commit/de1690df98

[10:48] <masak> ok, in that case, FROGGS++

[10:49] <masak> oh right, now I remember. FROGGS++ even announced his fix on the #6macros channel.

[10:52] <masak> TIL that there are two numbers.Integral types in Python 3: int, and bool

[10:54] *** _mg_ left
[10:57] *** lizmat left
[11:00] *** vibha joined
[11:07] *** rurban joined
[11:09] *** M-matthew joined
[11:09] *** M-Illandan joined
[11:09] *** labster left
[11:09] *** kid51 joined
[11:12] <dalek> doc: 0ba409e | (Wenzel P. P. Peppmeyer)++ | doc/Language/variables.pod:

[11:12] <dalek> doc: show how to change default type for %-sigiled containers

[11:12] <dalek> doc: review: https://github.com/perl6/doc/commit/0ba409ee04

[11:15] *** rurban left
[11:20] *** zakharyas left
[11:22] <dalek> doc: 0e7dd37 | (Wenzel P. P. Peppmeyer)++ | doc/Language/variables.pod:

[11:22] <dalek> doc: add is for container type to index

[11:22] <dalek> doc: review: https://github.com/perl6/doc/commit/0e7dd371c5

[11:22] <dalek> doc: c251707 | (Wenzel P. P. Peppmeyer)++ | doc/Language/testing.pod:

[11:22] <dalek> doc: better index entry for is (testing)

[11:22] <dalek> doc: review: https://github.com/perl6/doc/commit/c251707f94

[11:27] *** nowan_ joined
[11:28] *** bjz_ joined
[11:28] *** vendethiel left
[11:30] *** bjz left
[11:30] *** nowan left
[11:34] *** vendethiel joined
[11:44] <AlexDaniel> .

[11:44] <yoleaux> 03:14Z <timeless> AlexDaniel: sounds like the right problem and the right solution

[11:45] <AlexDaniel> timeless: let's just hope that there is a right way to implement it, liz has some doubts about this one :)

[11:46] *** kid51 left
[11:48] *** brrt joined
[11:56] *** _mg_ joined
[11:56] *** donaldh left
[12:03] *** rurban joined
[12:03] *** _mg_ left
[12:05] *** Emeric joined
[12:06] *** rurban_ joined
[12:06] *** Emeric left
[12:06] *** Emeric joined
[12:09] *** _mg_ joined
[12:13] <literal> if I want [<foo bar>, <baz quux>] without flattening, is there an easier way than adding .List to the end of each list?

[12:14] <psch> literal: what's the context?  are you return from some sub or..?

[12:15] <literal> no, I just want to pass an array of lists (or arrays) as an argument to something

[12:15] <gfldex> m: my @a; @a[0] = $('foo', 'bar'); @a[1] = $('baz', 'quux'); dd @a;

[12:15] <camelia> rakudo-moar b3e9f5: OUTPUT«Array @a = [("foo", "bar"), ("baz", "quux")]␤»

[12:15] <psch> m: sub f(+@args) { say @args.perl }; f [<foo bar>, <baz quux>]

[12:15] <camelia> rakudo-moar b3e9f5: OUTPUT«[("foo", "bar"), ("baz", "quux")]␤»

[12:16] *** vendethiel left
[12:16] <gfldex> m: sub f(@args) { dd @args }; f [<foo bar>, <baz quux>]

[12:16] <camelia> rakudo-moar b3e9f5: OUTPUT«[("foo", "bar"), ("baz", "quux")]␤»

[12:16] <psch> m: my @a; @a[0] = ('foo', 'bar'); @a[1] = ('baz', 'quux'); dd @a;

[12:16] <camelia> rakudo-moar b3e9f5: OUTPUT«Array @a = [("foo", "bar"), ("baz", "quux")]␤»

[12:17] <psch> right, +@args is actually somewhat different...

[12:17] <psch> m: sub f(+@args) { say @args.perl }; f <foo bar>, <baz quux> 

[12:17] <camelia> rakudo-moar b3e9f5: OUTPUT«[("foo", "bar"), ("baz", "quux")]␤»

[12:17] <literal> ah, sorry, my problem is that the flattening occurs when any of the lists have 1 element

[12:17] <literal> m: my @ar = [<foo>, <baz>]; say @ar

[12:17] <camelia> rakudo-moar b3e9f5: OUTPUT«[foo baz]␤»

[12:17] <psch> m: sub f(*@args) { say @args.perl }; f <foo bar>, <baz quux>  # in contrast to this

[12:17] <camelia> rakudo-moar b3e9f5: OUTPUT«["foo", "bar", "baz", "quux"]␤»

[12:17] <psch> m: sub f(**@args) { say @args.perl }; f [<foo>, <bar>]

[12:17] <camelia> rakudo-moar b3e9f5: OUTPUT«[["foo", "bar"],]␤»

[12:18] <psch> m: sub f(**@args) { say @args.perl }; f [<foo>, <bar>], <baz>

[12:18] <camelia> rakudo-moar b3e9f5: OUTPUT«[["foo", "bar"], "baz"]␤»

[12:18] <literal> but maybe that's just <> which refuses to construct a List when presented with a single word

[12:18] <psch> m: sub f(@args) { say @args.perl }; f [<foo>, <bar>]

[12:18] <camelia> rakudo-moar b3e9f5: OUTPUT«["foo", "bar"]␤»

[12:18] <psch> m: say <foo>.WHAT

[12:18] <camelia> rakudo-moar b3e9f5: OUTPUT«(Str)␤»

[12:18] <psch> yeah, seems like it :)

[12:18] <gfldex> what does +@ in a signatuer do and how is it called?

[12:18] <psch> m: sub f(@args) { say @args.perl }; f [('foo'), ('bar')]

[12:18] <camelia> rakudo-moar b3e9f5: OUTPUT«["foo", "bar"]␤»

[12:19] <psch> m: sub f(+@args) { say @args.perl }; f [('foo'), ('bar')]

[12:19] <camelia> rakudo-moar b3e9f5: OUTPUT«["foo", "bar"]␤»

[12:19] <psch> m: sub f(**@args) { say @args.perl }; f [('foo'), ('bar')]

[12:19] <camelia> rakudo-moar b3e9f5: OUTPUT«[["foo", "bar"],]␤»

[12:19] <psch> gfldex: i have no idea what it's called, but it's the user-facing way of declaring a sub that follows the single-arg rule wrt flattening

[12:21] <gfldex> m: sub f(+@a){ dd @a }; f(1); f(1,2); f([1,2]);

[12:21] <camelia> rakudo-moar b3e9f5: OUTPUT«[1]␤[1, 2]␤[1, 2]␤»

[12:21] <gfldex> m: sub f(@a){ dd @a }; f(1); f(1,2); f([1,2]);

[12:21] <camelia> rakudo-moar b3e9f5: OUTPUT«5===SORRY!5===␤Calling f(Int) will never work with declared signature (@a)␤at <tmp>:1␤------> 3sub f(@a){ dd @a }; 7⏏5f(1); f(1,2); f([1,2]);␤Calling f(Int, Int) will never work with declared signature (@a)␤at <tmp>:1␤------> 3sub f(…»

[12:21] <gfldex> i shall doc

[12:22] <gfldex> jnthn: do you got a good name for +@a in a sig?

[12:24] *** vendethiel joined
[12:25] *** raiph left
[12:26] *** raiph joined
[12:28] <perlpilot> gfldex: single-arg rule slurpy?  (I don't think I've ever seen or heard a concise name for that)

[12:28] *** _mg_ left
[12:29] <gfldex> it does promote a single argument to a list, so "single argument promotion" is at least not wrong.

[12:29] <psch> i like 'single-arg rule slurpy', although it depends on the single-arg rule being documented i suppose

[12:30] <psch> m: my @a = <foo bar baz>; for (@a) { .say }

[12:30] <camelia> rakudo-moar b3e9f5: OUTPUT«foo␤bar␤baz␤»

[12:30] <psch> m: my @a = <foo bar baz>; for (@a,) { .say }

[12:30] <camelia> rakudo-moar b3e9f5: OUTPUT«[foo bar baz]␤»

[12:30] <psch> m: my @a = <foo bar baz>; for @a, { .say } # bit confused this doesn't work anymore..?

[12:30] <camelia> rakudo-moar b3e9f5: OUTPUT«5===SORRY!5===␤Expression needs parens to avoid gobbling block␤at <tmp>:1␤------> 3my @a = <foo bar baz>; for @a, { .say }7⏏5 # bit confused this doesn't work anymor␤Missing block (apparently claimed by expression)␤at <tmp>:1␤------> …»

[12:31] <psch> oh, that's probably somehow related to the STATEMENT_LIST fiddling lizmat++ did recently..?

[12:31] *** rurban left
[12:35] <masak> psch: I don't think I would expect that to work, now or earlier.

[12:35] <masak> psch: what I see when I read this is an incomplete `for` loop over two elements: `@a` and a block

[12:36] <masak> that's what a comma means :)

[12:36] <masak> psch: do you have any evidence that `for @a, { .say }` used to work?

[12:36] <psch> masak: yeah, i probably misremember the single-arg rule blog post

[12:36] <masak> it's very different with and without the parens, is my point

[12:37] <psch> yes, i know

[12:37] <psch> and i am convinced already ;)

[12:37] <masak> m: my @a; for @a, { .say } { say .^name }

[12:37] <camelia> rakudo-moar b3e9f5: OUTPUT«Array␤Block␤»

[12:37] <masak> there ya go :)

[12:39] *** Zero_Dogg left
[12:39] *** Zero_Dogg joined
[12:39] *** Sgeo left
[12:41] <jnthn> gfldex: "single argument rule slurpy" would maybe do it so long as that can be linked to a good description of the rule

[12:42] <jnthn> Or maybe it's worth inlining that

[12:42] <jnthn> And expressing it in terms of args

[12:44] *** zakharyas joined
[12:45] *** vendethiel left
[12:49] *** rurban joined
[12:54] *** Actualeyes left
[12:58] *** vendethiel joined
[13:01] <dalek> doc: 9efd021 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Signature.pod:

[13:01] <dalek> doc: doc +@ in signatures

[13:01] <dalek> doc: review: https://github.com/perl6/doc/commit/9efd021e7e

[13:01] <gfldex> i think ...

[13:02] <[Coke]> my brain wants "the same way then with a list" to be "the same way as with a list"

[13:03] <dalek> doc: 3d708d6 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Signature.pod:

[13:03] <dalek> doc: change listig wording

[13:03] <dalek> doc: review: https://github.com/perl6/doc/commit/3d708d6482

[13:03] <gfldex> your grammar is my command

[13:04] *** jack_rabbit left
[13:08] <baest> pqmD5or2pw

[13:08] <baest> sorry

[13:09] <masak> baest: what did you just call my dog? :P

[13:09] <gfldex> don't be shy, tell us what this password is for

[13:09] <masak> gfldex: it says right there, it's to unlock his pqmD5or2

[13:10] *** vnbg joined
[13:10] *** vytas left
[13:15] <melezhik> Hi! If perl6 has analogous of perl5 our varibales? like "our $foo"

[13:16] <masak> m: our $our-variable = "yes"; say $our-variable

[13:16] <camelia> rakudo-moar b3e9f5: OUTPUT«yes␤»

[13:16] <melezhik> probably here - http://doc.perl6.org/language/variables#The_our_Declarator ...

[13:16] <melezhik> ?

[13:17] <masak> melezhik: sorry, what's the question you have?

[13:17] <melezhik> ah, nevermind, it seems you answered ...

[13:17] <melezhik> ;))

[13:18] *** donaldh joined
[13:19] *** vytas joined
[13:20] <masak> note that Perl 6 `our` variables are not *exactly* like Perl 5 `our` variables.

[13:20] *** vendethiel left
[13:20] <masak> but chances are they are close enough for your needs.

[13:20] <masak> I usually think of the `our` declarator as what allows `$MyModule::foo` access.

[13:21] <melezhik> <masak> note that Perl 6  ... - sure! thank you

[13:22] *** Actualeyes joined
[13:23] *** vnbg left
[13:24] *** sufrostico joined
[13:25] *** ufobat joined
[13:29] *** skids joined
[13:32] <stevieb> m: my $x = "morning, " ~ <112 101 114 108 54>>>.chr.Str; $x~~s:g/\w+//.Str.say'

[13:32] <camelia> rakudo-moar b3e9f5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 03108 54>>>.chr.Str; $x~~s:g/\w+//.Str.say7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modi…»

[13:32] <stevieb> m: my $x = "morning, " ~ <112 101 114 108 54>>>.chr.Str; $x~~s:g/\w+//.Str.say

[13:32] <camelia> rakudo-moar b3e9f5: OUTPUT«morning p e r l 6␤»

[13:33] <stevieb> why is the whitespace in "p e r l" not being removed?

[13:33] <psch> m: my $x = "morning, " ~ <112 101 114 108 54>>>.chr.Str; $x~~s:g/\w+//; $x.Str.say

[13:33] <camelia> rakudo-moar b3e9f5: OUTPUT«,     ␤»

[13:34] <psch> stevieb: (1) \w means "word characters", no "whitespace characters", and (2) you're printing the unmodified $x

[13:34] *** darutoko joined
[13:35] <stevieb> psch: d'oh!!! wow. Not enough coffee this morning. particularly the '\w'. Think I'll go back to bed

[13:35] <jnthn> m: my $x = "morning, " ~ <112 101 114 108 54>>>.chr.join

[13:35] <camelia> rakudo-moar b3e9f5: ( no output )

[13:35] <jnthn> m: say "morning, " ~ <112 101 114 108 54>>>.chr.join

[13:35] <camelia> rakudo-moar b3e9f5: OUTPUT«morning, perl6␤»

[13:35] <stevieb> m: my $x = "morning, " ~ <112 101 114 108 54>>>.chr.Str; $x~~s:g/\s+//.Str; say $x

[13:35] <camelia> rakudo-moar b3e9f5: OUTPUT«morning,perl6␤»

[13:35] <stevieb> jnthn: thanks!

[13:37] *** vendethiel joined
[13:44] *** sno left
[13:46] *** Sgeo joined
[13:51] *** rurban left
[14:02] *** cdg joined
[14:03] *** cdg left
[14:03] *** cdg joined
[14:06] *** zakharyas left
[14:06] *** zakharyas joined
[14:10] *** _mg_ joined
[14:11] *** zakharyas left
[14:13] <dalek> perl6-examples: 00f090f | (Shlomi Fish)++ | categories/euler/prob463-shlomif.p6:

[14:13] <dalek> perl6-examples: Start porting my #463 solution to p6.

[14:13] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/00f090fe1d

[14:17] *** daxim joined
[14:21] <dalek> doc: d03ad1b | (Aleks-Daniel Jakimenko-Aleksejev)++ | / (2 files):

[14:21] <dalek> doc: Slight changes to the “Not in Index” search result

[14:21] <dalek> doc: 

[14:21] <dalek> doc: Red background instead of purple; slightly bigger font; more noticeable link;

[14:21] <dalek> doc: parens outside of the link (otherwise it looks weird with underline);

[14:21] <dalek> doc: inverted font weight.

[14:21] <dalek> doc: review: https://github.com/perl6/doc/commit/d03ad1b472

[14:22] <AlexDaniel> .tell Zoffix please review https://github.com/perl6/doc/commit/d03ad1b472

[14:22] <yoleaux> AlexDaniel: I'll pass your message to Zoffix.

[14:22] *** huggable joined
[14:24] *** mohae joined
[14:26] *** mst left
[14:26] *** mst joined
[14:26] *** brrt left
[14:27] <sexy-coder-girl> It wasn't purple! It was "Can Can" on "Camile" :P

[14:27] <sexy-coder-girl> or "Carmile" rather :)

[14:27] <RabidGravy> :)

[14:29] *** cdg left
[14:30] <AlexDaniel> .oO( it wasn't colorful! It was “Camelia”… )

[14:32] <AlexDaniel> .oO( we need colorful letters in unicode )

[14:34] *** abruanese left
[14:36] <timeless> m: my $a = '/a/b#c'; say "hi <$0><$1><$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)[<[#]>(.*) || ]!;

[14:36] <camelia> rakudo-moar b3e9f5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Null regex not allowed␤at <tmp>:1␤------> 3~ m!(\/<-[/]>*\/)(<-[#]>*)[<[#]>(.*) || 7⏏5]!;␤    expecting any of:␤        infix stopper␤»

[14:37] <psch> m: my $a = '/a/b#c'; say "hi <$0><$1><$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)[<[#]>(.*)]!;

[14:37] <camelia> rakudo-moar b3e9f5: OUTPUT«hi </a/><b><c>␤»

[14:37] <psch> timeless: the alternation cannot be empty

[14:38] *** acrussell joined
[14:38] <psch> m: say "/a/" ~~ / '/' ~ '/' .+ / # also this might be an operator of interest

[14:38] <camelia> rakudo-moar b3e9f5: OUTPUT«｢/a/｣␤»

[14:38] <timeless> AlexDaniel: keeping a cursor position in a line doesn't seem hard...

[14:38] * timeless doesn't see liz

[14:39] <timeless> psch: I can't read that

[14:39] <timeless> in fact, p6 makes my head hurt

[14:39] <dalek> perl6-examples: 0838dc2 | (Shlomi Fish)++ | categories/euler/prob463-shlomif.p6:

[14:39] <dalek> perl6-examples: Add a working solution of #463.

[14:39] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/0838dc2282

[14:40] <psch> timeless: / $a ~ $b <$c> / translates to "match $a, then match $c (as pattern) and then match $b again"

[14:40] <psch> m: say "[foo]" ~~ / '[' ~ ']' 'foo' /

[14:40] <camelia> rakudo-moar b3e9f5: OUTPUT«｢[foo]｣␤»

[14:40] <timeless> p5: $a = '/a/b#c'; $a =~ m{(/[^/]+/)([^#]+)(?:#(.*)|)};

[14:40] *** mst left
[14:40] *** mst joined
[14:41] <timeless> is what I want/need

[14:41] <psch> that's still an null pattern in the alternation - also 'p5: '

[14:41] <psch> m: //

[14:41] <camelia> rakudo-moar b3e9f5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Null regex not allowed␤at <tmp>:1␤------> 3//7⏏5<EOL>␤»

[14:41] <psch> timeless: ^^^ that is the problem you're introducing

[14:41] <psch> timeless: alternative to that is an empty string literal, e.g. ''

[14:41] *** mst left
[14:41] *** mst joined
[14:41] <psch> oh, that was an example in perl5

[14:41] * timeless shrugs

[14:41] <psch> i see

[14:41] <timeless> I just need something that works

[14:42] <psch> m: my $a = '/a/b#c'; say "hi <$0><$1><$2>" if $a ~~ m![(<-[#]>*)[<[#]>(.*)||'']!;

[14:42] <camelia> rakudo-moar b3e9f5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in metachar:sym<[ ]>; couldn't find final ']' ␤at <tmp>:1␤------> 032>" if $a ~~ m![(<-[#]>*)[<[#]>(.*)||'']7⏏5!;␤    expecting any of:␤        infix stopper␤      …»

[14:42] <timeless> the p5 concept is really fairly easy to understand

[14:42] <timeless> `infix stopper`?

[14:42] * timeless goes to check the docs

[14:43] <timeless> Your search - site:docs.perl6.org infix stopper - did not match any documents. 

[14:43] <psch> m: my $a = '/a/b#c'; say "hi <$0><$1><$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)[<[#]>(.*) || '']!;

[14:43] <camelia> rakudo-moar b3e9f5: OUTPUT«hi </a/><b><c>␤»

[14:43] <timeless> my $a = '/a/b#'; say "hi <$0><$1><$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)[<[#]>(.*) || '']!;

[14:43] <timeless> m: my $a = '/a/b'; say "hi <$0><$1><$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)[<[#]>(.*) || '']!;

[14:43] <camelia> rakudo-moar b3e9f5: OUTPUT«Use of Nil in string context  in block <unit> at <tmp> line 1␤hi </a/><b><>␤»

[14:44] <timeless> bonus points for not giving me a Nil...

[14:44] <psch> m: my $a = '/a/b'; say "hi <$0><$1><$2>" if $a ~~ m!(\/<-[/]>*\/)(<-[#]>*)[<[#]>(.* || '')]!;

[14:44] <camelia> rakudo-moar b3e9f5: ( no output )

[14:45] <timeless> fwiw, with this fixed, i'm pretty close to having decent filenames/urls for doc.perl6

[14:45] <psch> good luck :)

[14:45] <timeless> but I can only spend ~15mins on this, and then I should go back to my past

[14:45] <timeless> psch: so, are you giving up on the nil?

[14:46] <timeless> m!(\/<-[/]>*\/)(<-[#]>*)[<[#]>(.*) || '']! ---- seems okish

[14:49] *** xinming left
[14:49] <psch> timeless: well, if you're capturing something that might not match, of course you get a Nil

[14:49] <psch> timeless: perl5 probably just doesn't tell you

[14:49] *** jack_rabbit joined
[14:50] <psch> m: "foo" ~~ /(bar)/; say $0 # same case

[14:50] <camelia> rakudo-moar b3e9f5: OUTPUT«Nil␤»

[14:50] <timeless> well, p5 basically treats it as '', which makes playing w/ strings much less annoying :)

[14:50] *** xinming joined
[14:51] <psch> m: constant Nil = Nil but role { method Str { '' } }; say "{Nil}"

[14:51] <camelia> rakudo-moar b3e9f5: OUTPUT«␤»

[14:51] * psch shrugs

[14:51] *** rurban joined
[14:52] <sexy-coder-girl> Perl 5 complains that it's undef, actually :)

[14:52] <timeless> oops :)

[14:52] * timeless clearly hasn't used p5 much in a while

[14:53] <sexy-coder-girl> m: my $x = quietly Nil ~ Nil; say "[$x]"

[14:53] <camelia> rakudo-moar b3e9f5: OUTPUT«[]␤»

[14:53] <sexy-coder-girl> Same behaviour as in P5, AFAICS

[14:55] <timeless> ... my bandwidth here seems to have been limited to low-speed dialup :(

[14:57] <sexy-coder-girl> AlexDaniel++ bisectable is a damn fine bot!

[14:57] <diakopter> all the sexiness distracts me :o

[14:57] <sexy-coder-girl> so useful

[14:57] *** araujo joined
[14:57] *** araujo left
[14:57] *** araujo joined
[14:58] *** araujo left
[14:58] <AlexDaniel> sexy-coder-girl: yeah, I enjoy seeing people use it

[14:59] <AlexDaniel> especially after my latest changes :)

[14:59] <rindolf> seems like Travis CI is failing here - https://travis-ci.org/perl6/perl6-examples/builds/137810286

[14:59] *** vendethiel left
[15:01] *** _mg_ left
[15:01] <moritz> it does't just seem like it. It fails.

[15:02] <dalek> perl6-examples: 4d79874 | (Zoffix Znet)++ | Makefile:

[15:02] <dalek> perl6-examples: Term::ANSIColor has been renamed

[15:02] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/4d79874656

[15:03] <sexy-coder-girl> ^ should be the fix

[15:03] <AlexDaniel> diakopter: I agree. This nickname is very annoying

[15:04] <sexy-coder-girl> hm

[15:04] <AlexDaniel> sexy-coder-girl: consider changing it to “womble”

[15:04] <perlpilot> heh

[15:05] *** jack_rabbit left
[15:05] * timeless sighs

[15:05] <dalek> perl6-examples: e3dabb9 | (Zoffix Znet)++ | t/000-check-dependencies.t:

[15:05] <dalek> perl6-examples: Term::ANSIColor is deprecated in favour of Terminal::ANSIColor

[15:05] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/e3dabb9657

[15:05] <timeless> apparently it's a good idea to escape quotes....

[15:06] <sexy-coder-girl> AlexDaniel: feel free to open an Issue so we could all participate in a debate :)

[15:06] <AlexDaniel> sexy-coder-girl: sure, where's the repo?

[15:07] *** sno joined
[15:07] <sexy-coder-girl> LHF to contribute: build all modules in ecosystem and report any "occurances of deprecated code" vis-a-vis using from-json/to-json from core

[15:07] *** stevieb left
[15:09] <AlexDaniel> by the way, what's up with http://smoke.perl6.org/report ?

[15:09] *** user9 left
[15:10] <timeless> hrm, I just unwatched 188 repositories, and I have no idea what they were

[15:10] *** stevieb joined
[15:11] *** vibha left
[15:11] <awwaiid> that smoke site looks neat

[15:12] *** zakharyas joined
[15:13] <AlexDaniel> yeah, it's awesome

[15:13] <dalek> perl6-examples: 4b40008 | (Zoffix Znet)++ | .travis.yml:

[15:13] <dalek> perl6-examples: Don't build ancient panda

[15:13] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/4b4000872d

[15:13] <AlexDaniel> except that it seems like it's not live anymore

[15:13] <AlexDaniel> can we get it up again?

[15:13] * sexy-coder-girl stifles a laugh

[15:14] <huf> sexy-coder-girl: oi! what happan to meatcpan.org?

[15:14] <awwaiid> oh, I didn't notice the date

[15:14] <timeless> SEC7115: :visited and :link styles can only differ by color. Some styles were not applied to :visited.

[15:14] <timeless> AlexDaniel: can someone change the perl css not to upset modern security conscious web browsers?

[15:14] <sexy-coder-girl> huf: I let it expire. The joke wore itself off :)

[15:15] *** _mg_ joined
[15:15] <AlexDaniel> timeless: sure! Is that an output of some tool?

[15:15] <timeless> F12 (edge debugger)

[15:15] *** user9 joined
[15:15] <sexy-coder-girl> timeless: stop using stupid debuggers :) Problem solved

[15:15] <timeless> (probably also from IE's F12, but I'm too lazy to open that...)

[15:15] <AlexDaniel> I don't think that this warning is stupid

[15:16] <AlexDaniel> timeless: are there any other warnings?

[15:16] <AlexDaniel> timeless: and does it tell any line number or something?

[15:17] <timeless> I don't see any particular hint that it does ...

[15:18] <timeless> my bet is pygments.css

[15:18] <sexy-coder-girl> AlexDaniel: why is it not stupid?

[15:18] <timeless> and it might be that you want to change e.g. the split A:link:hover / A:visited:hover to

[15:18] <timeless> A:hover +:link/:visited

[15:19] <timeless> or just um, get rid of the split

[15:19] <timeless> since they're actually the same color

[15:19] <sexy-coder-girl> timeless: what's "perl css"? Which website are you talking about?

[15:19] <timeless> doc.perl6.org

[15:19] <timeless> ah

[15:19] <timeless> got it

[15:19] <timeless> here https://www.irccloud.com/pastebin/XKNVl1oM/

[15:20] *** domidumont left
[15:20] <timeless> someone is futzing w/ text-decoration

[15:20] <timeless> well, maybe

[15:20] *** _mg_ left
[15:20] * timeless still isn't absolutely certain

[15:21] <timeless> I can give you the url where msdn explains what they're thinking

[15:21] <AlexDaniel> yes please

[15:21] <timeless> and perhaps next week I could be on the team involved in that ui...

[15:21] <timeless> http://msdn.microsoft.com/query/dev12.query?appId=Dev12IDEF1&l=EN-US&k=k(VS.WebClient.Help.SEC7115)

[15:22] <AlexDaniel> timeless: I'd love you to get that . / # ? thing done

[15:22] <timeless> but yeah, basically text-decoration shouldn't be in the rule for :visited 

[15:22] <timeless> AlexDaniel: yeah, i'm testing it

[15:22] <timeless> it's close, but i'm missing a cigar

[15:22] <AlexDaniel> timeless: sure I'm not the one who should tell you what to do, but I'm just saying that I'd be happy to see that

[15:22] *** vendethiel joined
[15:23] * timeless chuckles

[15:23] <timeless> HTML1409: Invalid attribute name character. Attribute names should not contain ("),('),(<), or (=).

[15:23] * timeless is impressed by f12

[15:24] * moritz is impressed we are now at HTML 1409; thought HTML 5 was state of the art

[15:24] *** user9 left
[15:24] <timeless> DOM7011: The code on this page disabled back and forward caching. For more information, see: http://go.microsoft.com/fwlink/?LinkID=291337 https://msdn.microsoft.com/query/dev12.query?appId=Dev12IDEF1&l=EN-US&k=k(VS.WebClient.Help.DOM7011)

[15:24] <timeless> moritz: including an id + a number = google/bing searching can work

[15:25] *** zakharyas left
[15:25] <moritz> timeless: I know, I'm just trolling a bit

[15:25] <timeless> and it doesn't limit you to your language (esp if that language isn't en-* where someone localized the error message)

[15:25] <timeless> moritz: I actually worked on exposing useful (crypto) error tokens to gecko a lifetime ago..

[15:25] <AlexDaniel> timeless: this one feels IE-specific, although I'm not sure

[15:25] <timeless> AlexDaniel: the visited thing isn't

[15:26] <timeless> i'm involved w/ the standards group in this area

[15:26] <AlexDaniel> timeless: sure, yes, though I'm still not sure what's going on there…

[15:26] <timeless> browser vendors are converging on more or less that rule

[15:26] <sexy-coder-girl> timeless: doesn't the visited thing would still pose the same issue for colour changes?

[15:26] <sexy-coder-girl> Or does getComputedStyle() return trash for colour?

[15:26] <timeless> sexy-coder-girl: color is not usually detectable by most scripts

[15:26] <timeless> and the UA can lie if it wants to about color

[15:27] * timeless can't remember what the UAs actually do for it

[15:27] <timeless> https://developer.mozilla.org/en-US/docs/Web/CSS/Privacy_and_the_:visited_selector

[15:27] <sexy-coder-girl> Seems they went with a backwards solution. Why not just make getComputedStyle() return :link styles for :visited and be done with it :S

[15:28] <timeless> Little white lies

[15:28] <timeless> The first change is that Gecko will lie to web applications under certain circumstances. In particular, getComputedStyle() and similar functions such as element.querySelector() always return values indicating that a user has never visited any of the links on a page.

[15:28] <timeless> -- the problem is that most other things beyond color can result in layout changes

[15:29] <timeless> and the UA isn't willing to retain a complete alternate layout just to lie to gCS

[15:29] <sexy-coder-girl> Ahh, I see

[15:30] * timeless tries to figure out why routine is doing the wrong thing :(

[15:31] <timeless> right now, i need to get `&` doing what i want https://www.irccloud.com/pastebin/GMGZMtBv/

[15:31] *** ggoebel116 joined
[15:32] <AlexDaniel> so, first of all, we're talking about pages like this

[15:32] <AlexDaniel> http://doc.perl6.org/language/objects#Using_Objects

[15:32] <AlexDaniel> you can see a <pre> with some links in it

[15:32] <rindolf> sexy-coder-girl: thanks for fixing the perl6-examples repository.

[15:32] <dalek> doc: 6ee80bc | (Zoffix Znet)++ | html/css/style.css:

[15:32] <dalek> doc: Do not style :visited

[15:32] <dalek> doc: review: https://github.com/perl6/doc/commit/6ee80bcb10

[15:32] *** ufobat left
[15:32] <AlexDaniel> now, the css says that visited and unvisited links are black and have an underline

[15:32] <AlexDaniel> what's the problem?

[15:33] *** darutoko- joined
[15:33] <AlexDaniel> the fix above is going to work, I think, but why was it complaining?

[15:33] <timeless> that fix isn't enough

[15:34] <timeless> pygments whatever...

[15:34] *** Xliff_ left
[15:34] <sexy-coder-girl> AlexDaniel: it's a security warning. A malicious script can use the alternate styling to determine your identity, yada yada

[15:34] <timeless> and boy do I wish the debugger linked me to the css in question

[15:34] * timeless wonders if FF or Chrome are nicer here

[15:35] <sexy-coder-girl> timeless: well, at least you can read yours. Mine opened in like a 50px x 200px window and I can't resize it and it doesn't even go away when I press F12 again :S

[15:35] <AlexDaniel> sexy-coder-girl: how? If the style is exactly the same for both visited and unvisited links

[15:35] *** ssotka joined
[15:35] *** user9 joined
[15:35] <timeless> sexy-coder-girl: there's a maximize button on the far right

[15:36] <sexy-coder-girl> timeless: don't got any buttons.

[15:36] *** darutoko left
[15:36] <timeless> AlexDaniel: see the snippet I pasted earlier where text decoration isn't the same

[15:36] <timeless> https://usercontent.irccloud-cdn.com/file/vqc75ShM/image.png

[15:37] <dalek> doc: 09bfa0e | (Zoffix Znet)++ | html/css/style.css:

[15:37] <dalek> doc: Toss another differentiation between :visited and :link

[15:37] <dalek> doc: review: https://github.com/perl6/doc/commit/09bfa0e720

[15:37] <AlexDaniel> ah, so by creating two links (one that is in pre and another one that is elsewhere) you can query the style to check if the user has visited that link or not

[15:37] <AlexDaniel> that's pretty clever, really

[15:37] *** raiph left
[15:37] <timeless> there's a whole area of security research there

[15:37] <timeless> (seriously)

[15:38] <AlexDaniel> and the fix is to not touch text-decoration, right?

[15:38] <timeless> it's been driving browser engineers nuts for over a decade

[15:38] <timeless> well, i'm speculating, because i'm trying to focus on the other thing :)

[15:38] <sexy-coder-girl> Seems like this shit would apply only to few people who are living off-the-grid. No Facebooks or anything.

[15:38] <timeless> but, my fix would be to *only* touch color

[15:38] <timeless> sexy-coder-girl: no

[15:38] <timeless> anyone who has visited something obscure

[15:39] <timeless> they're sorta-wateringhole attacks

[15:39] <timeless> maybe I check to see if you've been to `pulse`

[15:39] *** raiph joined
[15:39] <timeless> or if you've been to the admin page of GitHub/{something}

[15:39] <AlexDaniel> so, do I get it right that if you want to style your links differently, then these styles should apply to all links on the site?

[15:40] <sexy-coder-girl> timeless: how? You'd need to install some malicious script on my box won't you?

[15:40] <timeless> you can style things in A:link. But your :visited css should *only* touch color

[15:40] <timeless> sexy-coder-girl: no

[15:40] <sexy-coder-girl> The more I think of this issue the more stupid it seems to my mind.

[15:40] <AlexDaniel> aha… okay

[15:40] <timeless> <a href="http://pulse.com">a....

[15:40] <AlexDaniel> sexy-coder-girl: no, that's not stupid

[15:40] * timeless isn't sure what pulse's web site is

[15:41] * timeless presumes everyone here recognizes pulse as of today

[15:41] * sexy-coder-girl never heard of it

[15:41] <timeless> sexy-coder-girl: meatspace-meetspace

[15:41] <[Coke]> meta meat meet space.

[15:41] <[Coke]> ... team

[15:41] <timeless> and not to beat a dead horse, but um... dead meat

[15:41] <timeless> :(

[15:41] <AlexDaniel> timeless: ok, that's an interesting observation. Thanks for reporting

[15:42] <timeless> sexy-coder-girl: is that enough for you to recognize the ref?

[15:42] <sexy-coder-girl> timeless: well, what is that link? What does it mean? Where would it be used? I can just stuff that on any page I want and tell you "Here, take a look!" and gather all the URLs you visited.

[15:42] <timeless> sexy-coder-girl: there were attacks precisely like that, yes

[15:43] <sexy-coder-girl> I don't see how the styling of visited links on doc.perl6.org is in any way exploitable by some dude that never installed any malicious scripts in my browser.

[15:43] <timeless> lemme see if I can find a sample

[15:43] <timeless> sexy-coder-girl: :visited isn't limited to local links

[15:43] <timeless> it in theory applies to links to other domains

[15:43] <timeless> so wateringhole.attack.example.com

[15:43] *** vendethiel left
[15:43] <timeless> could color w/ :visited a link to admin.perl6.org

[15:44] <sexy-coder-girl> timeless: sure, but the styling will be applied only when I'm on doc.perl6.org and there are ain't any malicious people gathering stats

[15:44] <awwaiid> that would only matter if perl6.org loaded evil content, right?

[15:44] <timeless> no

[15:44] <timeless> :visited would apply if your browser knew you had visited admin.perl6.org

[15:44] <timeless> and it would apply to the link on wateringhole.attack.example.com

[15:44] <sexy-coder-girl> timeless: right, but it would apply only when I'm browing docs.perl6.org

[15:44] <timeless> no

[15:45] <timeless> if your history says you went to admin.perl6.org

[15:45] <timeless> then any page you visit anywhere on the web w/ a link to admin.perl6.org can style :visited

[15:45] <sexy-coder-girl> timeless: exactly, but what does it matter WHAT that style is on docs.perl6.org?

[15:45] <timeless> instead of thinking of `doc.perl6.org` as an attackable site

[15:45] <awwaiid> well what's the worst case here -- someone at some point can get a whitelist of my browsing history, and htereby narrow an attack for me, right?

[15:45] <timeless> awwaiid: so...

[15:46] <timeless> imagine you were a frequenter of Pulse

[15:46] <awwaiid> k

[15:46] <timeless> but you hadn't told people

[15:46] <awwaiid> right

[15:46] <timeless> if they can determine that you visited Pulse, they can out you from the closet

[15:46] <awwaiid> right

[15:46] <awwaiid> privacy leak

[15:46] <timeless> maybe you're in a place where they pehead people

[15:46] *** darutoko- left
[15:46] <timeless> s/peh/beh/

[15:46] <awwaiid> and worse it can also allow them to target an attack at me -- like now that they know I go to pulse they can craft a targeted fishing link

[15:46] <timeless> now, it could be that they choose to attack you because it turns out you have useful credentials for admin.perl6.org

[15:47] <sexy-coder-girl> timeless: but they would just give you a URL to visit. I still don't see how docs.perl6.org styles help with anything whatsoever

[15:47] <timeless> sexy-coder-girl: lemme see if I can find a sample page that talks about this

[15:47] <sexy-coder-girl> Sure.

[15:47] <awwaiid> sexy-coder-girl: I think browsers have worked-around this for the color attribute

[15:47] <timeless> the point is that they could have a page with 1000 links

[15:47] <timeless> and it's not about asking the user to visit them all

[15:48] <timeless> it's about asking the browser has the user already visited them

[15:48] <awwaiid> right -- they just introspect the page to see if the browser knows they've been :visited

[15:48] <sexy-coder-girl> timeless: yes, but this still has nothing to do with styles on docs.perl6.org

[15:48] <timeless> sexy-coder-girl: the way browsers protect against this is where it crosses docs

[15:48] <sexy-coder-girl> Hm?

[15:48] <timeless> docs is using some styles which browsers have decided they consider risky and don't want to honor

[15:49] <sexy-coder-girl> So it's not a security issue. It's browsers thinking we're a malicious website.

[15:49] <timeless> because browsers want to protect their users

[15:49] <timeless> browsers have to treat *all* sites as malicious

[15:49] <timeless> http://dbaron.org/mozilla/visited-privacy

[15:49] <AlexDaniel> but the point is that unless we start loading weird shit on docs.perl6.org there's no problem

[15:50] <sexy-coder-girl> Exactly. And thus the circle is complete with my original statement: that warning is stupid.

[15:50] <timeless> well

[15:50] * sexy-coder-girl leaves for lunch

[15:50] <AlexDaniel> there are no ads or anything, the site is also non-dynamic

[15:50] <timeless> the point is that your UX designer needs to know that the style he's using won't work

[15:50] <AlexDaniel> so XSS is out as well

[15:50] <timeless> and he should stop using it

[15:50] <timeless> https://blog.mozilla.org/security/2010/03/31/plugging-the-css-history-leak/

[15:51] <AlexDaniel> timeless: check it out again, did the warning disappear?

[15:51] <awwaiid> ah, this makes sense now. Not protecting users directly, just complying with browsers trying to protect users.

[15:52] * timeless sighs

[15:52] <awwaiid> I heard about this info-leak when it came out, but didn't know the latest in how browsers try to fix

[15:53] <timeless> I can't figure out if (NotSAFE!) http://www.haveyourfriendsbeenthere.com/ is a different attack or something else

[15:53] <timeless> AlexDaniel: still there

[15:53] <timeless> you can get a VM from ms

[15:53] *** ggoebel116 left
[15:54] <timeless> http://modern.ie 

[15:54] <timeless> > Test Microsoft Edge and also IE6 up to IE11 using virtual machines that you download and manage locally for free.

[15:54] <timeless> http://cssfingerprint.com/results

[15:54] <timeless> is probably the right thing

[15:55] <timeless> but it looks like it's gone :(

[15:55] * timeless asks wayback for help

[15:55] <awwaiid> aww that's too bad. there's the eff one for fingerprinting that works similarly...

[15:56] <awwaiid> but is a little different

[15:56] <timeless> http://web.archive.org/web/20100411060604/http://cssfingerprint.com/

[15:57] *** rurban_ left
[15:59] *** sno left
[15:59] *** sno joined
[16:01] *** rindolf left
[16:01] <AlexDaniel> timeless: how can it be there if :visited links are not touched. Are you sure that you're not using a cached version of css or something?

[16:01] *** khw joined
[16:02] <sexy-coder-girl> timeless: I'm not getting the warning on Edge 13

[16:02] *** pmurias joined
[16:02] <sexy-coder-girl> Oh, nm.. Had to move my mouse over a link to trigger it

[16:03] <timeless> AlexDaniel: i'll leave you and sexy-coder-girl to work this through

[16:03] <timeless> since it seems like sexy-coder-girl hit it :)

[16:03] * timeless goes back to &

[16:03] *** raiph left
[16:04] * timeless sighs

[16:04] *** raiph joined
[16:04] *** rindolf joined
[16:05] *** wamba joined
[16:06] <pmurias> sexy-coder-girl: re warning is stupid, why should the browsers give docs.perl6.org access to the users browser history?

[16:06] <sexy-coder-girl> Nah, I just wanted to see if there was a way to find a line number.

[16:07] <timeless> (we should ask google/bing if there's a way)

[16:07] <sexy-coder-girl> pmurias: it's up to them to decide. If they see no reason, they can ignore any styles but `color` applied to :visited. It's pretty dumb expecting the devs to comply with some sort of warning

[16:07] <timeless> the problem is that enabling that adds cost to the engine

[16:07] <awwaiid> so does detecting it to give a warning :)

[16:08] *** rindolf left
[16:08] <sexy-coder-girl> I mean really, the bad guys won't comply. I see it more as "in the future, your non-color styles might stop working" warning.

[16:08] <timeless> awwaiid: detecting is much cheaper than maintaining the info necessary for a verbose message

[16:08] <AlexDaniel> yeah, so we should fix it

[16:08] <awwaiid> yeah, I suppose

[16:08] <timeless> sexy-coder-girl: precisely

[16:08] <awwaiid> sexy-coder-girl: I agree

[16:09] *** mr-foobar joined
[16:09] <sexy-coder-girl> timeless: I was just trying to see if I could ease out the line number from it, but I don't see much return on investment in attempting to fix this. It says some styles not applied to "visited." So that'll involve digging to jquery UI CSS, pygments and other shite on the site to find it

[16:09] *** ggoebel116 joined
[16:10] <timeless> so, back to perl6

[16:10] <timeless> I want to find out where some data came from :/

[16:11] <timeless> (I really want a custom tainter)

[16:11] *** araujo_ joined
[16:11] <moritz> the second most annoying question when debugging: "where did this data come from?"

[16:11] <moritz> the most annyoing being "why doesn't this code run?"

[16:12] <timeless> #2 is much harder than #1

[16:12] *** setty1 joined
[16:12] <AlexDaniel> timeless: by the way, is it a good idea to separate those with -? That is, why amp-amp instead of ampamp? :)

[16:12] <timeless> #2 can be basically solved by abusing #1

[16:12] * geekosaur wonders if "but" can be (ab?)used for data tracking/tainting

[16:12] <timeless> AlexDaniel: some other words get confusing

[16:12] <awwaiid> I always teach new devs to put a gigantic syntax error in their code to prove it CAN break and that they're running it at all :)

[16:13] <pmurias> sexy-coder-girl: you mean it's stupid that there is a warning but the styles are applied despite it?

[16:13] <timeless> awwaiid: indeed

[16:14] <timeless> AlexDaniel: i'm not 100% certain that the -'s are needed

[16:14] <timeless> it's a lot easier to understand that dash-dash-x is two dashes and not some special dashdash

[16:14] <AlexDaniel> timeless: dunno, hm… what about using spaces? :)

[16:15] <timeless> AlexDaniel: consider `/ /`

[16:15] <AlexDaniel> uhh

[16:15] <timeless> vs. `//`

[16:16] <timeless> i'm tempted to use `_` instead of `-` -- there already was code trying to use `_` fwiw...

[16:16] *** vendethiel joined
[16:17] <timeless> AlexDaniel: so, space is a bad idea, agreed? :)

[16:17] <AlexDaniel> huggable: dunno

[16:17] <huggable> AlexDaniel, ¯\_(ツ)_/¯

[16:18] <timeless> `/ /` -> `slash slash`; `//` -> `slash slash` ==> 

[16:18] <timeless> huggable: frown

[16:18] <huggable> timeless, nothing found

[16:18] <AlexDaniel> should be ‘slash  slash’ vs ‘slash slash’ but yeah, that's not cool

[16:19] *** zakharyas joined
[16:19] <AlexDaniel> let's just hope that we're not going get into the same situation with dashes

[16:19] <sexy-coder-girl> pmurias: I guess it's stupid that Microsoft shoves this under "Security errors" section, when it really isn't about security. I dunno, maybe it's not the warning but the way this discussion proceeded to imply that we somehow endager users of docs.perl6.org by styling :visited links (or at least that's how I perceived it).

[16:19] <timeless> it escapes dash

[16:19] <timeless> but yeah, it's not wonderful, `_` is probably better, but it's harder to type

[16:19] <timeless> and it isn't the English token for the use case

[16:19] <timeless> in principle, `-` is what English uses for this

[16:20] <timeless> so, if `-` works w/o *too* much pain, i'd rather

[16:20] <timeless> if it doesn't, i'm not wed to it

[16:20] <AlexDaniel> yeah, it's probably ok

[16:22] *** g4 left
[16:22] *** cdg joined
[16:23] * timeless cuts doc down to 5 pod files

[16:28] *** abraxxa left
[16:31] *** rurban left
[16:31] *** andreoss left
[16:34] *** donaldh left
[16:34] <timeless> AlexDaniel: my biggest concern is `#infix &&`

[16:35] <timeless> because sometimes `#` should be hash, and sometimes it's `#` (anchor ref)

[16:37] *** rurban joined
[16:38] *** stevieb left
[16:40] *** FROGGS[mobile] joined
[16:40] <FROGGS[mobile]> o/

[16:41] *** dakkar left
[16:42] <timeless> m: ' ' ~~ /&/;

[16:42] <camelia> rakudo-moar b3e9f5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Null regex not allowed␤at <tmp>:1␤------> 3' ' ~~ /&7⏏5/;␤    expecting any of:␤        term␤»

[16:43] <timeless> ok, so, can someone please remind me why `perl6` doesn't give a line number when I do that?

[16:43] <AlexDaniel> timeless: there's a line number

[16:43] <tony-o>    at <tmp>:1

[16:43] <AlexDaniel> timeless: filename <tmp>, line number :1

[16:43] <timeless> perl6 --ll-exception htmlify.p6 --no-highlight

[16:43] <timeless> Initializing ...

[16:43] <timeless> Null regex not allowed

[16:43] <timeless>    at gen/moar/m-CORE.setting:21553  (/home/timeless/hg/perl6/rakudobrew/moar-nom/install/share/pe

[16:43] <timeless> AlexDaniel: perl6 ^ doesn't; camelia does.

[16:43] <tony-o> that :\d+ is the line number

[16:44] <tony-o> m-CORE.setting line 21553

[16:44] <AlexDaniel> timeless: what if you use no --ll-exception? :)

[16:44] <timeless>    at gen/moar/m-CORE.setting:21553  (/home/timeless/hg/perl6/rakudobrew/moar-nom/install/share/perl6/runtime/CORE.setting.moarvm:throw)

[16:45] <tony-o> ll-exception shows a the longer version of the error, so you get more line numbers

[16:45] <timeless> AlexDaniel: that works

[16:46] <AlexDaniel> hm

[16:46] <tony-o> i think timeless has me on ignore

[16:46] *** Xliff joined
[16:46] *** stevieb joined
[16:46] <timeless> so, w/o --ll-exception it gives something useful https://www.irccloud.com/pastebin/1npGnJl6/

[16:47] <Xliff> \o

[16:47] <timeless> tony-o: i'm not ignoring you

[16:47] <timeless> well, I am, but i'm not

[16:47] <AlexDaniel> timeless: can you paste full backtrace with --ll-exception?

[16:47] <timeless> AlexDaniel: sure

[16:48] *** TimToady left
[16:48] <Xliff> When retrieving pointers returned from Nativecall backed lib, what is the best way to test for equivalence? =:= seems to be giving me mixed results.

[16:48] <timeless> full https://www.irccloud.com/pastebin/0ZhwDW9i/

[16:48] *** zakharyas left
[16:48] <timeless> tony-o: the problem is that while i'm getting line numbers, they aren't related to my code

[16:49] <AlexDaniel> yeah, it does not look right

[16:49] <nine> ^H^H^H^H^H^H^H/win 14

[16:49] <AlexDaniel> nine: yeah

[16:50] *** TimToady joined
[16:50] <AlexDaniel> timeless: I think that it needs a shorter snippet to reproduce the issue, eh. But you are right, the problem is there

[16:50] <AlexDaniel> I don't think that people are supposed to use --ll-exception since normal error messages are meant to give good enough error messages

[16:51] <AlexDaniel> if they don't, that's a bug :)

[16:51] <AlexDaniel> but it's the first time I see somebody complain about --ll-exception, so I don't know

[16:51] <timeless> here you go https://www.irccloud.com/pastebin/IOKyc4hD/

[16:52] <timeless> the help doesn't say "and eat the normal stuff" :-(

[16:53] <timeless> I think the problem is that it really isn't what I want

[16:53] <timeless> i want a normal backtrace, not a low level one

[16:53] <tony-o> timeless: ahh, that is a problem - i've had that problem too and resorted to doing 'say' debugging to figure out where it's happening.  that isn't ideal if you have a lot of code

[16:53] <timeless> every sane language supports this

[16:53] <dalek> doc: f312715 | (Zoffix Znet)++ | / (4 files):

[16:53] <dalek> doc: Add 404 page with menu bar on it

[16:53] <dalek> doc: 

[16:53] <dalek> doc: Fixes #129

[16:53] <dalek> doc: review: https://github.com/perl6/doc/commit/f3127151e9

[16:53] <timeless> tony-o: yep

[16:54] <timeless> the debugger is pretty much unusable, i tried yesterday

[16:54] <tony-o> timeless: agreed, it isn't great and i'm sure it will improve

[16:54] <timeless> so, i'm basically w/ say debugging

[16:54] <timeless> but i was using --ll-exception, naïvely assuming it'd at least help a little

[16:54] <timeless> at this point, it seems more like a footgun

[16:55] <tony-o> timeless: http://modules.zef.pm/modules/github:Altai-man/Devel::Trace   

[16:55] <tony-o> that may be interesting

[16:55] <tony-o> another: http://modules.zef.pm/modules/not%20in%20meta/Rakudo::Perl6::Tracer

[16:55] <timeless> depends on how slow things are

[16:55] *** domidumont joined
[16:55] <tony-o> i need to implement short url generation for the modules.zef

[16:55] <nine> timeless: it's a compile time error. By definition at that time, the only stack in existence is the compiler's very own and that's what you get with --ll-exception

[16:55] <timeless> i tried perl6-debug-m and it slowed things down to a crawl

[16:56] <timeless> nine: um...

[16:56] * timeless polishes off a fancy "end user" hat

[16:56] * timeless points to it proudly

[16:56] <timeless> ... wearing my end user hat... i expect to not lose information when i ask for more information

[16:56] <timeless> w/o that flag, i get something vaguely useful

[16:56] <timeless> when i add that flag, i lose it

[16:57] <timeless> proudly wearing my end user hat, i'm unhappy

[16:57] * timeless slowly removes that hat and places it back on the shelf

[16:57] <nine> timeless: but you did _not_ ask for more information but for "a low level backtrace" and that's what you got.

[16:58] <timeless> nine: this is not a useful argument

[16:58] <timeless> and i hope you can understand that 

[16:58] <timeless> i carefully put on an end user hat to explain context

[16:59] <timeless> i'm trying to improve the doc site, so i'm mostly wearing a UX polisher hat

[16:59] <timeless> i'm also very skittish

[16:59] <geekosaur> so, the message for end users is --ll-exceptionis not for you

[16:59] <geekosaur> it's for debugging rakudo

[16:59] <timeless> geekosaur: footguns should be well hidden

[16:59] <mst> so it probably needs to make it more obvious

[16:59] <jnthn> Well, where did you find out about it?

[16:59] *** rurban left
[16:59] <timeless> perl6 --help

[17:00] <timeless> (where every normal user starts when they have a problem)

[17:00] *** pmurias left
[17:01] <timeless> perl5 --help does not to my knowledge include footguns

[17:01] <timeless> i mean, sure `-U allow unsafe operations` may be a footgun

[17:01] <timeless> but it's well labeled

[17:02] <timeless> i'm happy to suggest alternate text for your footgun if you are interested

[17:02] *** vendethiel left
[17:02] <timeless> although, personally, i'd much rather it just include the normal output in addition to what it's doing

[17:02] * geekosaur would move internal options to a --help-all or something, really

[17:03] <timeless> --- and to finish my point about being skittish. i have dozens of other things i can do

[17:03] <jnthn> The point of it is to help us debug situations where producing the nroaml output *is* the problem.

[17:03] <jnthn> I'd sooner just remove it from --help if it's going to cause confusion, than try and find other wording.

[17:03] *** vendethiel joined
[17:04] <timeless> either works.

[17:04] <timeless> thanks for taking my feedback. i appreciate it

[17:04] *** FROGGS joined
[17:04] <timeless> tony-o: ok, so... i can try -DDevel::Trace

[17:06] <jnthn> Could also add a --help-dev to list such things. --stagestats is arguably also better under there, and we could mention the RAKUDO_MODULE_DEBUG envvar or whatever it's called :)

[17:06] <timeless> hrm, that might be vaguely usable

[17:07] <timeless> offhand --target and --optimize probably don't belong in --help either

[17:07] * nine hopes that we can one day get rid of RAKUDO_MODULE_DEBUG

[17:07] <Xliff> Isn't there a way to have rakudo print out all of the operations it is performing?

[17:07] <nine> All the debug output does not exactly make the code more readable

[17:08] <timeless> i'm also not sure whether --profile* belongs in --help -- i think it depends on whom your target audience is

[17:08] <Xliff> Or did I really imagine that capability was in there. (maybe confused with RAKUDO_MODULE_DEBUG)

[17:08] <timeless> if it's more for debugging moar than for debugging my program, then i'd suggest you move it too

[17:08] <timeless> oh!

[17:09] <timeless> perl6 --doc ~ perldoc ?

[17:09] <timeless> would it hurt much to add `per6-doc` which was a wrapper for perl6 --doc ?

[17:11] <timeless> *perl6-doc

[17:12] *** spider-mario joined
[17:13] <nine> Why don't I have permission to view ticket #63956?

[17:13] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=63956

[17:15] *** ingy joined
[17:16] <jnthn> --profile is certainly intended for normal users (or at least intermediate-advanced level users) to understand where their program is taking time, and it's pretty normal for compilers to take a --optimize flag also. So I think those two are fine under --help.

[17:17] <jnthn> dinner &

[17:17] <AlexDaniel> well, I don't think that we can toss out --ll-exception right now

[17:17] <AlexDaniel> because error messages are not that good yet

[17:17] <timeless> AlexDaniel: this isn't about removing it, so much as moving it :)

[17:17] <jnthn> AlexDaniel: The proposal isn't to remove it, just to not include it in --help.

[17:17] <jnthn> really dinner :) &

[17:17] <AlexDaniel> yeah, I mean keep it in --help

[17:17] * timeless should lunch

[17:18] <AlexDaniel> in fact, I'd vote to make it more visible…

[17:18] <AlexDaniel> :/

[17:21] *** sjn joined
[17:22] *** donaldh joined
[17:23] <timeless> nine: out of curiosity, how'd you find that number?

[17:23] <nine> timeless: it's referenced in t/spec/S11-modules/nested.t

[17:24] * timeless frowns

[17:25] *** kurahaupo joined
[17:25] *** vendethiel left
[17:27] *** sexy-coder-girl is now known as BrokenRobot

[17:29] *** vendethiel joined
[17:33] <timeless> [timeless@gcc2-power8 doc]$ perl6 --doc Perl6::Documentable::Registry

[17:33] <timeless> Could not open Perl6::Documentable::Registry. Failed to stat file: no such file or directory

[17:33] *** user3 joined
[17:34] <timeless> ok, i give up, how does `perl6 --doc` work/

[17:34] <user3> im also interested in this answer

[17:36] *** rindolf joined
[17:40] *** donaldh left
[17:41] *** domidumont left
[17:43] <timeless> tony-o: the second one seems promising

[17:44] <gfldex> see http://design.perl6.org/S26.html#How_Pod_is_parsed_and_processed

[17:45] <timeless> [timeless@gcc2-power8 doc]$ perl6 --doc perlrun

[17:45] <timeless> Could not open perlrun. Failed to stat file: no such file or directory

[17:45] <timeless> gfldex: that's based on the example in your url

[17:46] *** stux|RC-only left
[17:46] *** stux|RC-only joined
[17:47] *** wamba left
[17:47] <gfldex> you didn't tell it what module to use to render pod

[17:47] *** user3 left
[17:47] <gfldex> perl --doc $foo # will look for POD::To:$foo

[17:48] <gfldex> Pod::To::$foo even

[17:49] *** FROGGS[mobile] left
[17:50] <timeless> so, we should talk about help

[17:50] <timeless>       --profile=kind       write profile information to a file (MoarVM)

[17:50] <timeless> means kind is mandatory

[17:50] <timeless>       --target=[stage]     specify compilation stage to emit

[17:50] <timeless> should mean stage is optional

[17:52] <timeless> ?? https://www.irccloud.com/pastebin/cVjJ8I8H/

[17:53] *** vendethiel left
[17:53] <stevieb> I absolutely LOVE being able to easily look at what methods a class has while I'm learning. I just dedicate one window for things like this, so I don't have to look up in the docs all the time: "Str>>.^methods>>.say"

[17:54] <stevieb> ...what I *really* meant was "Str.^methods>>.say"

[17:54] *** user9 left
[17:54] <timeless> m: Str.^methods>>.say

[17:54] <camelia> rakudo-moar 66ebd8: OUTPUT«BUILD␤Int␤Num␤chomp␤chop␤pred␤succ␤simplematch␤match␤ords␤samecase␤samemark␤samespace␤word-by-word␤trim-leading␤trim-trailing␤trim␤encode␤NFC␤NFD␤NFKC␤NFKD␤wordcase␤trans␤indent␤codes␤chars␤uc␤lc␤tc…»

[17:54] *** vendethiel joined
[17:56] <stevieb> timeless: I was going to do that here, but was afraid it would list one item per line ;)

[17:58] *** user9 joined
[17:59] <timeless> gfldex: ok, so, how does one find a list of Pod::To::{things}} ?

[18:00] <gfldex> http://modules.perl6.org/#q=Pod%3A%3ATo

[18:00] <skids> (and there are a couple shipped with rakudo core)

[18:01] <timeless> assume i only have core

[18:02] <timeless> (the rrakudo world build system is a bit of a mess -- i couldn't get panda to build, i'm happy i have zef)

[18:02] <skids> OK it looks like just "Text.pm6"

[18:02] *** Sqirrel joined
[18:02] <timeless> [timeless@gcc2-power8 doc]$ perl6 --doc Text perlrun

[18:02] <timeless> Could not open Text. Failed to stat file: no such file or directory

[18:03] <skids> --doc=Text works for me

[18:03] <timeless> [timeless@gcc2-power8 doc]$ perl6 --doc=Text.pm6 perlrun

[18:03] <timeless> Could not open perlrun. Failed to stat file: no such file or directory

[18:03] <timeless> [timeless@gcc2-power8 doc]$ perl6 --doc=Text perlrun

[18:03] <timeless> Could not open perlrun. Failed to stat file: no such file or directory

[18:04] <timeless> p6: say 3

[18:04] <camelia> rakudo-moar 66ebd8: OUTPUT«3␤»

[18:04] <timeless> m: say 4

[18:04] <camelia> rakudo-moar 66ebd8: OUTPUT«4␤»

[18:04] <stevieb> panda list | grep Pod

[18:05] * timeless doesn't understand the difference

[18:05] <timeless> stevieb: as i noted above, i don't have panda

[18:05] <stevieb> oh crap, sorry :)

[18:05] <skids> $ perl6 --doc=Text -e '=begin pod

[18:05] <skids> > foo

[18:05] <skids> > =end pod'

[18:05] <skids> foo

[18:06] <timeless> https://www.irccloud.com/pastebin/5gjMOqaL/

[18:07] <timeless> also, we already know that `tohtml` works, since i'm able to run the htmlify.p6 script

[18:08] <timeless> fwiw, your -e test also works

[18:08] <timeless> so, the problem is not the --doc= notation

[18:08] <timeless> it's the `perlrun` side of the equation

[18:09] <timeless> the doc= bits are indeed optional https://www.irccloud.com/pastebin/MQ0DJFr4/

[18:16] <BrokenRobot> timeless: what exactly `perlrun` supposed to be?

[18:17] <timeless> http://design.perl6.org/S26.html#How_Pod_is_parsed_and_processed

[18:17] *** vendethiel left
[18:17] <timeless> Hence, to read Pod documentation you would type things like:

[18:17] <timeless> perl --doc  perlrun

[18:18] <BrokenRobot> timeless: that's just an example (Perl 5 has perlrun pod)

[18:19] <timeless> BrokenRobot: well. if that isn't supposed to work, then remove the example or replace it.

[18:19] * AlexDaniel is happy to see somebody who is unhappy with the way things work :)

[18:19] <BrokenRobot> timeless: you're reading an archived, historical speculation. 

[18:19] <timeless> BrokenRobot: i'm reading it because someone pointed me to it

[18:19] <timeless> don't point people to things if you don't want people to read them.

[18:19] <timeless> or remove them.

[18:20] <timeless> you left a landmine in a playground and are surprised someone stepped on it.

[18:20] * BrokenRobot wonders wtf happened to the red message at the top of the page

[18:20] <timeless> also, please note that my time and patience are limited

[18:21] <timeless> if i hit a certain number of failures / certain number of negative pushbacks, i'll leave

[18:21] <timeless> heck, i shouldn't be here now. i should be reviewing something else

[18:22] *** huggable left
[18:22] <BrokenRobot> timeless: as you've probably noticed, there are many people working on the Perl 6 project, constantly improving it. Complaining that something isn't perfect and threatening to leave (for the second time) isn't going to win you any favours.

[18:22] *** huggable joined
[18:23] <BrokenRobot> timeless: if you're frustrated, take a break.

[18:23] <timeless> also, please don't rely on a red box at the top of the page.. i was given an #anchor, so unless css brings that box into view, the box isn't worth anything.

[18:23] <AlexDaniel> this red box is fixed :)

[18:23] <BrokenRobot> timeless: the box were visible even with the anchor.

[18:23] <BrokenRobot> AlexDaniel: for some reason it's gone 

[18:23] *** Actualeyes left
[18:24] <AlexDaniel> huh? Indeed…

[18:24] <AlexDaniel> it's visible in other files, just not in S26

[18:24] <timeless> ...

[18:25] <BrokenRobot> Oh, indeed. Maybe something wasn't rebuilt properly

[18:25] <gfldex> IIRC S26 is causing troubles when turned into HTML and is processed by hand

[18:25] <TimToady> timeless++ for finding a bug; timeless-- for playing emotional blackmail games, so I guess it's a wash :)

[18:25] <timeless> TimToady: i'm more of a 3 steps forward 2 steps back kinda guy

[18:26] <TimToady> we value being stubborn :)

[18:26] <AlexDaniel> I think that it is totally fine that timeless is complaining about things. It's not like he does nothing and is only complaining, he is working on stuff and is constantly reporting problems. It may sound a bit negative, but hey, I think that it pushes things forward.

[18:27] <BrokenRobot> There's a note "(HTML rendering of S26 is known to be incomplete)" I guess whatever is causing it to be incomplete is causing it to not get refreshed with proper CSS <link>

[18:27] *** vendethiel joined
[18:28] <AlexDaniel> timeless: by the way, going to close #597 in favor of what parabolize has suggested

[18:28] <timeless> which is that? NaN/Inf or the doc link?

[18:28] <timeless> i'm about to push the doc link

[18:28] <AlexDaniel> https://github.com/perl6/doc/pull/597/files

[18:28] <AlexDaniel> ah

[18:28] *** ggoebel116 left
[18:28] * timeless is waiting for a silly process to finish

[18:29] *** donaldh joined
[18:29] <timeless> and yeah, i'm using his text... in some other world, i'd be tempted to credit him w/ it

[18:29] <timeless> note to self: use cp -r instead of locally cloning repos... :(

[18:30] <BrokenRobot> S15 also ain't got a message

[18:32] <BrokenRobot> Fixed it manually. No idea if it'll get rewritten back on next cron run

[18:32] <timeless> BrokenRobot: thanks

[18:32] <AlexDaniel> hm, let me try this: guys, let's move design.perl6.org to speculations.perl6.org?

[18:33] <BrokenRobot> +1

[18:34] *** ggoebel116 joined
[18:34] <moritz> -1

[18:35] <moritz> I still find the name "design docs" pretty fitting

[18:35] <moritz> anybody who has a bit of experience with real-world software development knows they aren't always 100% accurate

[18:35] <timeless> last i checked there were still links into it from doc.perl6 -- although perhaps we've removed them

[18:36] <AlexDaniel> sure, it's ok if it works for you. Except that people still keep thinking that these are up to date

[18:36] <moritz> also, last time the URL changed, I went everywhere I could and changed links (like Wikipedia, other wikis, my pages etc.)

[18:37] <AlexDaniel> we can have a redirect

[18:37] <moritz> AlexDaniel: then maybe we should either update them, or mark specific areas as outdated

[18:37] <moritz> I think that would have a much better effect than changing the domain name

[18:38] <timeless> AlexDaniel: if i know it works, should i wait for travis or just push it? :)

[18:38] <dalek> doc: b7e4c71 | (Josh Soref)++ | doc/Language/5to6-perlsyn.pod:

[18:38] <dalek> doc: use pod link instead of url for 5to6-nutshell

[18:38] <dalek> doc: review: https://github.com/perl6/doc/commit/b7e4c715f3

[18:40] <[Coke]> (mark areas as outdated) - every page is marked as outdated.

[18:40] <[Coke]> except, probably the ones generated from POD6 instead of POD5

[18:41] <AlexDaniel> outdated.perl6.org is not too bad too, I agree ;)

[18:41] <AlexDaniel> timeless: if it's obvious then just push it

[18:41] * timeless nods

[18:42] <AlexDaniel> timeless: sometimes it turns out to be non-obvious and the whole thing blows up, but that's not the end of the world ;)

[18:45] *** TEttinger joined
[18:47] *** itaipu joined
[18:50] *** vendethiel left
[18:50] *** labster joined
[18:50] * BrokenRobot is a bit baffled seeing Pod::To::HTML actually references design.perl6.org's CSS file :/

[18:51] <BrokenRobot> I guess this is an excuse enough: "

[18:51] <BrokenRobot> # FIXME: this code's a horrible mess."

[18:52] * moritz is utterly fascinated by the gravitational wave detections from binary bloack hole mergers

[18:53] *** travis-ci joined
[18:53] <travis-ci> Doc build passed. Josh Soref 'use pod link instead of url for 5to6-nutshell'

[18:53] <travis-ci> https://travis-ci.org/perl6/doc/builds/137882850 https://github.com/perl6/doc/compare/pod-nutshell

[18:53] *** travis-ci left
[18:54] <AlexDaniel> haha

[18:54] <parabolize> is http://design.perl6.org/S26.html#Pod what we are using for design docs or is there some Pod on it?

[18:55] <moritz> parabolize: much of the design docs is still in Perl 5 Pod

[18:55] <BrokenRobot> Except for S15/S26 apparently

[18:55] *** donaldh left
[18:57] <timeless> moritz: i'm unfamiliar w/ bloack holes 

[18:58] *** vendethiel joined
[18:59] *** CIAvash left
[19:00] <BrokenRobot> Weird. Getting illegal sub declaration from trying to use the module, but if I run the same thing manually it's fine: https://gist.github.com/zoffixznet/58fc667b020b79f1ee870a46a1515087

[19:00] <BrokenRobot> That's with https://github.com/perl6/Pod-To-HTML/blob/master/lib/Pod/To/HTML.pm

[19:02] <moritz> timeless: http://physics.aps.org/articles/v9/68 if you want something to read :-)

[19:03] <moritz> basically, black holes are super dense (just about a hundred kilometers, but containing multiple sun masses), and when two of them get close to each other, they orbit around each otehr

[19:03] <moritz> and emit gravitational waves, which are small distortions in space time

[19:03] <timeless> moritz: oh, i know a little about black holes. i was wondering about bloack holes :)

[19:03] <moritz> oh

[19:04] <moritz> timeless: then https://en.wikipedia.org/wiki/Typographical_error is the proper URL for you

[19:04] <moritz> :-)

[19:04] <timeless> :-)

[19:04] <huf> that article should be under Tyopgraphical_error

[19:05] <BrokenRobot> Fuck it. Was gonna attempt to fix the S15/S26 missing the message, but I'm stymied with Pod::To::HTML

[19:05] <geekosaur> BrokenRobot, I don't think perl 6 wants you to define names in other people's namespaces like that? (although maybe it should... I cannot say)

[19:05] <huf> in fact, the correct spelling of typo should be changed to tyop quietly

[19:05] <huf> so people still keep spelling it typo

[19:05] <geekosaur> correct way is probably package main { sub ... {} }

[19:05] <BrokenRobot> geekosaur: but isn't it in Pod::To::HTML namespace? I've no idea where main:: is comign from

[19:06] * geekosaur eyes file...

[19:07] <geekosaur> just foir grins and giggles, try each of these separately:

[19:07] <geekosaur> (1) remove the leading space on line 30

[19:07] <geekosaur> (2) comment out line 30 (which will cause a different error later, of course)

[19:07] *** rindolf left
[19:08] * geekosaur being nasty suspicious at parser >.>

[19:09] <BrokenRobot> Nothing changed with neither (1) nor (2). Same error about main::escape_html

[19:09] <geekosaur> odd

[19:10] <BrokenRobot> :S

[19:10] <BrokenRobot> I think I may be hitting a precomp bug. Just typed utter trash into the file, but same error

[19:11] <BrokenRobot> Gonna try updating perl6

[19:11] * geekosaur updates so he can play...

[19:11] <geekosaur> yeh

[19:12] <geekosaur> but, that's just weird. it's defined in a unit module, it's not a qualified name, it should have that module's package as qualification...

[19:12] <geekosaur> and it's happening at compile time so hard to call it precomp

[19:12] <geekosaur> oh wait

[19:12] * geekosaur just reexamined gist

[19:13] <geekosaur> why are you running perl 6 source in perl (aka perl 5)?

[19:13] <BrokenRobot> EGAWDS

[19:13] <geekosaur> ...because that is a parl 5 error

[19:13] <geekosaur> *perl

[19:13] <BrokenRobot> Damn, yeah, I was using `perl` instead of `perl6` ~_~

[19:13] <BrokenRobot> geekosaur++

[19:14] <moritz> that's a good reason to always "use v6;" at the top

[19:14] <geekosaur> ^

[19:14] <BrokenRobot> heresy! :)

[19:14] <moritz> heresay!

[19:14] <geekosaur> I even noticed that when looking at it initially but didn't twig that you were actually running it in perl5

[19:14] <BrokenRobot> I think I can handle being burnt by that one more time before I'll start using v6 :P

[19:14] <moritz> erm, hearsay

[19:15] *** girafe joined
[19:16] <geekosaur> aaand, it kinda tells you something that p5 didn't see anything wrong until it hit that sub definition, and even then gave a less than sensible error (oh yes, I know why, but damn perl5 accepts so much trash...)

[19:17] <BrokenRobot> :)

[19:17] *** yqt joined
[19:19] <moritz> it still surprises me that perl 5 accepts whitespace between sigils and variable names

[19:20] <geekosaur> that iirc is a specific hack

[19:21] <moritz> as is basically everything in toke.c :-)

[19:21] <geekosaur> becaue perl language modes treated $ as an escape (to get names like $! right) and then blew up on ${expr}

[19:21] <geekosaur> so $ {expr} was made to work

[19:21] <geekosaur> and that means any other $name can also have whitespace

[19:22] *** domidumont joined
[19:25] <timeless> heh

[19:25] *** itaipu left
[19:26] <geekosaur> (to be clear I'm talking about editor modes there, not perl itself, wrt $ as escape. admittedly hacking the language parser to work around editor deficiencies is itself weird, but at the same time very perl5)

[19:28] <dalek> mu: 22dfad9 | (Zoffix Znet)++ | util/update-design.perl6.org.sh:

[19:28] <dalek> mu: Make Pod6 pages also have historic message

[19:28] <dalek> mu: review: https://github.com/perl6/mu/commit/22dfad9b3e

[19:29] *** hankache joined
[19:30] <BrokenRobot> Someone with sudo access on hack needs to log in as design.perl6.org and update Pod::To::HTML module to include my css fix: https://github.com/perl6/Pod-To-HTML

[19:31] *** jjido joined
[19:31] *** sivoais joined
[19:32] <moritz> doing it now

[19:32] <moritz> (ftr the HTML is built on hack

[19:37] *** acrussell left
[19:38] *** huggable left
[19:41] *** hankache left
[19:42] <timeless> is jnthn ~ jonathanstowe?

[19:42] <konobi> nope

[19:43] <konobi> jonathanstowe == RabidGravy 

[19:43] <RabidGravy> yes

[19:43] *** huggable joined
[19:46] * timeless pines for a way to run htmlify faster

[19:47] <BrokenRobot> Weird. http://docs.perl6.org/fasdfdsfsdf shows proper 404 page, but http://docs.perl6.org/routine/%2F%2F doesn't :/

[19:48] <timeless> BrokenRobot: the app server version doesn't have that problem ...

[19:49] <BrokenRobot> timeless: it's an entirely different beast, so... :)

[19:49] * timeless argues that this is a bug

[19:50] <timeless> RabidGravy: also, i don't suppose you can explain how documents get their names...

[19:50] <BrokenRobot> timeless: the purpose of the app server version is for people who don't want to install Apache for dev. If you got it installed, feel free to experience the same version as on the live site.

[19:51] <AlexDaniel> umm

[19:51] <AlexDaniel> http://docs.perl6.org/routine.html

[19:51] <AlexDaniel> trait… which trait?

[19:51] <AlexDaniel> (first item in the list)

[19:51] <timeless> AlexDaniel: neat

[19:51] <timeless> i hope i didn't break that..

[19:52] * timeless finally figures out why the NF* classes are so broken

[19:53] * timeless will commit fix once the build finishes for NaN

[19:54] <RabidGravy> timeless, I have no special knowledge in this regard

[19:55] *** skrshn joined
[19:55] <timeless> RabidGravy: so, i tried adding Constants to Num

[19:55] <timeless> and it doesn't appear

[19:56] <timeless> afaict, there's some black magic elsewhere blocking it https://www.irccloud.com/pastebin/GOIjVcxB/

[19:57] <dalek> doc: 9765cb3 | (Josh Soref)++ | doc/Type/NF (3 files):

[19:57] <dalek> doc: fix articles for NF* unicode classes

[19:57] <dalek> doc: review: https://github.com/perl6/doc/commit/9765cb3f4d

[19:59] <timeless> i don't understand what's special about `Num`

[20:00] <RabidGravy> well, it appears exactly like that in Slip so a bit unsure

[20:00] <[Coke]> (htmlify faster) I will hopefully have some time this week to hack on doc's makefile branch, which might help repeat builds go faster, anyway.

[20:00] <timeless> i tried getting htmlify to fork

[20:00] <timeless> but i really don't know what it was doing

[20:02] <RabidGravy> incidentally Num could do with having its methods documented

[20:03] <[Coke]> the makefile branch is trying to split it out into chunks so that we can || build that way.

[20:03] <RabidGravy> the only difference I can see in Slip is that it already has a =head1 Methods as well as =head1 Constants

[20:04] <RabidGravy> but I've never looked at the way the HTML is produced

[20:05] *** donaldh joined
[20:07] *** donaldh left
[20:11] *** colomon left
[20:17] <dalek> doc: 4fba789 | (Jan-Olof Hendig)++ | doc/Type/Baggy.pod:

[20:17] <dalek> doc: Added docs for Baggy.pickpairs

[20:17] <dalek> doc: review: https://github.com/perl6/doc/commit/4fba789fbb

[20:19] *** ufobat joined
[20:22] *** jjido left
[20:23] <parabolize> When building html for the docs is it normal to need to remove precompiled/ before running `make html`? `make clean` doesn't remove the files in that directory. If I don't remove them the web pages don't seem to change.

[20:26] *** jjido joined
[20:31] *** cdg left
[20:31] *** aries_liuxueyang left
[20:32] *** kaare_ left
[20:32] *** aries_liuxueyang joined
[20:33] <moritz> I've never used the makefile, I just run htmlify.p6

[20:33] <[Coke]> ...all the makefile does is run htmlify

[20:33] <parabolize> right

[20:33] <[Coke]> someone added precomp support, but I'm not sure they added its cleanup to clean

[20:34] *** zakharyas joined
[20:34] *** domidumont left
[20:34] <[Coke]> nope. no precomp in any clean* targets.

[20:35] <[Coke]> though ideally precomp would figure out if it was valid or not, and work properly.

[20:35] <[Coke]> but we're doing it manually instead of relying on `perl6`

[20:36] <[Coke]> so, "normal"'s not the right word, but it's not unexpected, no.

[20:38] *** domidumont joined
[20:38] <timeless> RabidGravy: this doesn't work either https://www.irccloud.com/pastebin/7QQPo3fe/

[20:40] <timeless> here's the generated content (with most other files deleted to speed generation time) https://www.irccloud.com/pastebin/vzurfPbq/html%2Ftype%2FNum.html

[20:42] *** jjido left
[20:43] *** domidumont left
[20:43] *** vike left
[20:44] *** jjido joined
[20:44] *** fhorck joined
[20:45] *** vike joined
[20:46] *** FROGGS left
[20:51] <RabidGravy> well, I'm so unfamiliar with the mechanics of the doc generation I would be tempted to just commit what you had in Num.pod, then if it doesn't show up on docs call it a bug

[20:52] <RabidGravy> it works fine with the standard Pod::To::HTML - I guess the other stuff is post processed in

[20:53] <parabolize> timeless: could you upload those files to something I could copy / paste

[20:54] <parabolize> nevermind / I found the raw button

[20:59] <timeless> parabolize + RabidGravy : thanks for working w/ me :)

[21:02] *** skids left
[21:02] *** avuserow_ joined
[21:04] * timeless so doesn't understand this

[21:05] <timeless> is it possible for Devel::Tracer to spit out the values of variables? :)

[21:05] <timeless> ok, so, what exactly is the story on `perl6 --doc`?

[21:06] <timeless> [timeless@gcc2-power8 doc0]$ perl6 --doc Devel::Trace

[21:06] <timeless> Could not open Devel::Trace. Failed to stat file: no such file or directory

[21:07] <avuserow_> so last night, I used perl6 to do parsing of a multi-gigabyte file (mostly line-by-line but with rather large lines) and it worked great. I haven't implemented the interesting logic yet but it's still awesome that it's feasible with perl6 :)

[21:10] *** setty1 left
[21:12] *** araujo_ left
[21:12] *** araujo_ joined
[21:17] <parabolize> timeless: Everything in https://www.irccloud.com/pastebin/7QQPo3fe/ seems to work for me. I had to add a `=begin pod` line but otherwise all the formatting seems to work.

[21:18] <parabolize> timeless: I used perl6 --doc=HTML NaN.pod > NaN.html

[21:19] *** cdg joined
[21:21] *** cdg left
[21:21] *** cdg joined
[21:24] <parabolize> timeless: I think `p6doc Devel::Trace` does what you want.

[21:24] *** brosenberg joined
[21:25] *** ufobat left
[21:27] *** firstdayonthejob joined
[21:27] *** jonadab left
[21:30] *** Emeric left
[21:32] *** raiph left
[21:38] *** vendethiel left
[21:39] *** jonadab joined
[21:45] *** vendethiel joined
[21:47] *** zakharyas left
[21:47] <tbrowder> avuserow_: did you compare times between your Perl 6 file reader and a Perl 5 version?  My readers show a 10+ times greater elapsed time for the Perl 6 vs Perl 5 on the same file.

[21:50] *** rurban joined
[21:51] *** itaipu joined
[21:52] *** jjido left
[21:52] *** trnh joined
[21:53] <avuserow_> tbrowder: nope. certainly a Perl 5 version would be faster to execute, but then I'd need to rewrite a grammar into something that P5 could handle, and I'm not terribly interested in doing that. Doing a line-by-line version with some cheats is fast enough for my purposes.

[22:00] *** jjido joined
[22:07] *** cpage_ left
[22:07] *** jonadab left
[22:08] *** sjn left
[22:11] *** mr-foobar left
[22:30] *** ilogger2 joined
[22:30] *** ChanServ sets mode: +v ilogger2

[22:32] <dalek> doc: cbaf749 | coke++ | doc/404.pod:

[22:32] <dalek> doc: Update language on 404.

[22:32] <dalek> doc: review: https://github.com/perl6/doc/commit/cbaf74900d

[22:33] <dalek> Heuristic branch merge: pushed 160 commits to doc/makefile by coke

[22:35] <AlexDaniel> m: ‘🙂’.uniname.say

[22:35] <camelia> rakudo-moar c7cd00: OUTPUT«SLIGHTLY SMILING FACE␤»

[22:35] <AlexDaniel> m: ‘🙼’.uniname.say

[22:35] <camelia> rakudo-moar c7cd00: OUTPUT«VERY HEAVY SOLIDUS␤»

[22:35] <AlexDaniel> wow, how heavy

[22:40] <Xliff> Is there a unicode symbol for "Heavy Water" ??

[22:40] <Xliff> 🙂

[22:41] <Xliff> VERY HEAVY LIQUIDUS

[22:42] *** stevieb9 joined
[22:42] <Xliff> So here's a trick question. I have a C-lib that returns pointers to CStructs. However, most of this is done via CPointers.

[22:43] <Xliff> If created using P6. We want to use classes based on the CStructs. However, how can we equate that to returned CPointers from the C-Lib?

[22:44] <Xliff> I wish I had targetted code to show, but you can look at the tests here: https://github.com/Xliff/p6-XML-LibXML/blob/master/t/06elements-port.t

[22:44] <Xliff> Based on the classes

[22:45] <Xliff> https://github.com/Xliff/p6-XML-LibXML/blob/master/lib/XML/LibXML/Attr.pm

[22:45] <Xliff> https://github.com/Xliff/p6-XML-LibXML/blob/master/lib/XML/LibXML/Node.pm

[22:45] <Xliff> Which are based on the structs found here: https://github.com/Xliff/p6-XML-LibXML/blob/master/lib/XML/LibXML/CStructs.pm

[22:46] <Xliff> I have a feeling the simplistic approach I have gone with for the additions to Node.pm and Attr.pm may require nqp.

[22:54] *** vendethiel joined
[23:00] *** jack_rabbit joined
[23:01] *** tardisx joined
[23:04] *** maddingu1 joined
[23:04] *** Gruber joined
[23:04] *** jargan joined
[23:04] <stevieb9> does anyone here that I see regularly committing to perl6 use it at $work in production? If so, in what capacity? If not, do you know anyone who does? again... for what?

[23:05] *** mithaldu__ joined
[23:05] *** Lucas_One__ joined
[23:07] *** obfusk_ joined
[23:07] *** a3r0_ joined
[23:07] *** klapperl joined
[23:07] *** masak_ joined
[23:07] *** atta_ joined
[23:07] <b2gills> stevieb9: You could look through the irclog if you are really interested, I remember at least one person mentioning that they did

[23:07] *** moritz_ joined
[23:07] *** ponbiki_ joined
[23:07] *** hcit_ joined
[23:07] *** Jonis_ joined
[23:07] *** bhm_ joined
[23:07] *** gypsydav15 joined
[23:07] *** saaki_ joined
[23:07] <ugexe> i've had contracts where i've put perl6 into production. all parsing related

[23:07] *** bonsaikitten joined
[23:07] *** obarb joined
[23:07] *** rudi_s_ joined
[23:07] *** sunnavy joined
[23:07] *** b^_^d joined
[23:08] *** [Coke]_ joined
[23:08] *** lucs_ joined
[23:08] *** jnthn_ joined
[23:08] *** Ulti_ joined
[23:08] *** lnx_ joined
[23:08] *** ambs_ joined
[23:08] *** mre_ joined
[23:08] *** jstimpfle joined
[23:08] *** smash_ joined
[23:08] *** ab5tract_ joined
[23:08] *** kshannon_ joined
[23:08] *** perlpilo1 joined
[23:08] *** jdv79_ joined
[23:08] <stevieb9> b2gills: thanks, I'll do that

[23:08] *** f3ew_ joined
[23:08] *** leedo_ joined
[23:08] *** Woodi_ joined
[23:08] *** breinbaa1 joined
[23:09] <stevieb9> ugexe: I'm just a newb, but I can already see the benefits of perl6 parsing. I'm wading and playing with the basics, but regex looks extremely potent in perl6 vs perl5, and perl5 is no slouch

[23:10] *** yeltzooo9 joined
[23:10] *** emdashcomma_ joined
[23:11] *** sjohnson` joined
[23:11] *** remmie2 joined
[23:11] <stevieb9> what I mean is the way you can build regexes... not particularly regex capabilities themselves

[23:11] *** exodist_ joined
[23:11] *** gensym_ joined
[23:11] *** remmie2 left
[23:12] *** m0ltar_ joined
[23:12] *** Zoffix joined
[23:12] *** musca` joined
[23:12] *** remmie2 joined
[23:12] *** Bucciarati_ joined
[23:14] *** ambs left
[23:14] *** mithaldu_ left
[23:14] *** tailgate left
[23:14] *** exodist left
[23:14] *** kshannon left
[23:14] *** Ulti left
[23:14] *** atta left
[23:14] *** gensym left
[23:14] *** klapperl_ left
[23:14] *** sjohnsen left
[23:14] *** f3ew left
[23:14] *** saaki left
[23:14] *** emdashcomma left
[23:14] *** Jonis left
[23:14] *** gypsydave5 left
[23:14] *** mre left
[23:14] *** jsimonet left
[23:14] *** jstimpfl1 left
[23:14] *** rudi_s left
[23:14] *** bhm left
[23:14] *** renormalist left
[23:14] *** lnx left
[23:14] *** yeltzooo left
[23:14] *** smash left
[23:14] *** moritz left
[23:14] *** ab5tract left
[23:14] *** mithaldu__ is now known as mithaldu_

[23:14] <Zoffix> weeeeeeeeeeeeeeeeeeeee

[23:14] <yoleaux> 14:22Z <AlexDaniel> Zoffix: please review https://github.com/perl6/doc/commit/d03ad1b472

[23:14] *** gensym_ is now known as gensym

[23:14] *** sjohnsen joined
[23:14] *** matt joined
[23:14] *** remmie2 left
[23:14] <Zoffix> stevieb, I use it + a couple of Perl 5 modules (via Inline::Perl5) at work for scraping webpages. I'd use it much more if it had a web framework on the quality comparable to Perl 5's Mojolicious  (most of my programming at $work is web-related)

[23:14] *** matt is now known as Guest31458

[23:14] *** remmie joined
[23:14] <stevieb9> at first, the amount of what I'd call 'symbolism' in perl6 appeared intimidating at first, but as I slowly get time to play around, much of it so far works logically. for instance the hyper operator

[23:14] *** Guest31458 is now known as matt_

[23:15] <stevieb9> Zoffix: that's awesome to know. You've mentioned a bit before about what you use at work. I did not know you used perl6 at all though. I assumed that was your own time like me :)

[23:16] *** as joined
[23:16] <stevieb9> my goal is, by the end of July, to have my first perl6 distribution (do we call them dists here?) included, and as I work on a second, keep patching the first with more perl6-isms as I learn

[23:16] <Zoffix> yeah, dists

[23:16] <stevieb9> cool

[23:17] <stevieb9> I've already built a dist in perl6, but clearly not ready to be included yet, however I'm getting the process. 

[23:19] *** drforr1 joined
[23:19] <stevieb9> I've been going through docs one-by-one (Types, at this time and bouncing around), and making notes in a scripts repo of the concepts I wouldn't conceive of to force it into memory. That also allows me to spot any issues in the docs, which, of course, I will patch

[23:19] *** mtj_ joined
[23:19] *** risou joined
[23:19] *** tailgate joined
[23:19] *** jsimonet joined
[23:21] *** tomboy64 joined
[23:22] <stevieb9> today, I printed a couple of copies of the Types mapping image. One is pinned to the wall in my office, the other at home. It really helps. I think it should be at the top of the doc, but that's something I'd ask more experienced folks about before I changed. That's not like a typo or something ;)

[23:22] *** jargan is now known as jast

[23:27] *** eam joined
[23:29] <stevieb9> Zoffix: if you're still located where your github profile says you are, I'd really like to take you out for dinner or something downtown next time I fly home. You've been helpful across the board for years

[23:32] <Zoffix> Thanks, but I don't like interacting with people in meatspace :)

[23:33] <stevieb9> lol, fair enough

[23:35] <stevieb9> I'm trying to convince #p5p to do the next conference in Calgary, as I've never been to one, and would really like to meet some perl people in person. 

[23:35] <stevieb9> my sales pitch: AB is in recession, so there's likely deals on hotels to be had

[23:36] <Zoffix> The Weekly says "TimToady removed a warning when creating an Enum from a Range."... What exactly does Enum from a Range look like?

[23:36] <stevieb9> 15 years into perl, figure I could get involved physically

[23:43] *** kerframil joined
[23:43] *** huggable joined
[23:49] *** cpage_ joined
[23:50] *** musca` is now known as musca

[23:51] *** cdg joined
[23:56] *** cdg left
[23:56] *** pochi joined
