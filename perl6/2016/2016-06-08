[00:31] *** Khisanth left
[00:32] *** Khisanth joined
[00:33] *** cdg left
[00:33] *** cdg joined
[00:38] *** cdg left
[00:41] *** Khisanth left
[00:42] *** Khisanth joined
[00:59] *** Zero_Dogg left
[01:00] *** Zero_Dogg joined
[01:00] *** Zero_Dogg left
[01:00] *** Zero_Dogg joined
[01:00] *** BenGoldberg joined
[01:01] *** rgrinberg joined
[01:12] *** Actualeyes joined
[01:15] *** kurahaupo left
[01:16] *** kurahaupo joined
[01:19] *** stevieb left
[01:20] *** kalkin- joined
[01:21] *** adhoc joined
[01:21] *** adhoc left
[01:22] *** molaf left
[01:23] *** kalkin-_ left
[01:24] *** bjz left
[01:25] *** sammers joined
[01:26] <sammers> good morning from Japan

[01:26] <diakopter> o/

[01:27] <sammers> is there a way to get the current line / row index when looping over slurped file lines?

[01:31] *** kurahaupo left
[01:32] *** kurahaupo joined
[01:32] *** kurahaupo left
[01:34] *** ssotka left
[01:35] *** molaf joined
[01:41] *** yqt left
[01:42] *** sufrostico left
[01:46] *** ilbot3 left
[01:47] *** kid51 left
[01:47] *** ilbot3 joined
[01:48] *** tomboy64 joined
[02:01] *** Ven left
[02:05] *** Lazarus joined
[02:05] *** nebuchadnezzar joined
[02:06] *** Lazarus is now known as Guest2253

[02:07] <Guest2253> help

[02:08] <Guest2253> help anyone

[02:08] *** Guest2253 left
[02:12] *** tbrowder_ joined
[02:14] <tbrowder_> someone needs help? what can we do for you?

[02:17] <geekosaur> they left already

[02:17] <tbrowder_> I think most of the heavy hitters have left for the evening

[02:18] <tbrowder_> nite all

[02:18] *** tbrowder_ left
[02:19] *** Score_Under joined
[02:33] *** sQuEE joined
[02:33] *** cdg joined
[02:35] *** noganex joined
[02:38] *** noganex_ left
[02:46] <dj_goku> p6: for ['a','b','c'].kv -> $i, $v { say "index $i has a value of $v" }

[02:46] <camelia> rakudo-moar 1254bb: OUTPUT«index 0 has a value of a␤index 1 has a value of b␤index 2 has a value of c␤»

[02:46] *** cdg left
[02:46] <dj_goku> sammers: ^^

[02:47] *** cessna left
[02:48] *** assgrass joined
[02:49] *** assgrass left
[02:49] *** assgrass joined
[02:50] *** assgrass left
[02:51] *** grassazz joined
[02:51] *** grassass left
[02:51] *** Actualeyes left
[02:54] *** huggable left
[02:54] *** huggable joined
[02:56] *** skids joined
[02:58] *** woodruffw joined
[03:03] *** NEveDko_ left
[03:09] *** raiph joined
[03:11] *** raiph left
[03:11] *** NEveDko joined
[03:12] *** raiph joined
[03:13] *** raiph left
[03:13] *** raiph joined
[03:13] *** sortiz joined
[03:14] <sortiz> \o #perl6

[03:14] <yoleaux> 5 Jun 2016 12:51Z <FROGGS> sortiz: I you wanna tackle something in XML::LibXML, pick either a still failing test file or grab a new test file from t/to-be-ported and move it to t

[03:14] <dj_goku> sammers: probably this is what you want: for $file.lines.List.kv -> $index, $line { say $index, $line }

[03:16] <sortiz> .tell FROGGS Sure, test-driven is the better approach.

[03:16] <yoleaux> sortiz: I'll pass your message to FROGGS.

[03:17] *** raiph left
[03:18] *** raiph joined
[03:27] *** raiph left
[03:27] *** raiph joined
[03:27] *** grassazz left
[03:28] *** grassaSS joined
[03:31] *** raiph left
[03:31] *** raiph joined
[03:32] *** raiph left
[03:32] *** raiph joined
[03:36] *** ssotka joined
[03:38] *** mr-foobar left
[03:39] *** mr-foobar joined
[03:43] *** raiph left
[03:44] *** raiph joined
[03:50] *** skids left
[03:57] *** Actualeyes joined
[04:06] *** sortiz left
[04:08] *** jack_rabbit joined
[04:11] *** mr-foobar left
[04:11] *** molaf left
[04:17] *** khw left
[04:20] *** Cabanossi left
[04:22] *** Cabanossi joined
[04:33] *** grassaSS left
[04:51] *** kaare_ joined
[05:06] *** araujo_ left
[05:08] *** Zero_Dogg left
[05:09] *** Zero_Dogg joined
[05:20] *** sno left
[05:31] *** rgrinberg left
[05:31] *** MadcapJake left
[05:37] *** wamba joined
[05:38] *** jrusso joined
[05:38] *** jrusso is now known as MadcapJake

[05:39] *** domidumont joined
[05:43] *** domidumont left
[05:44] *** domidumont joined
[05:57] *** domidumont left
[06:04] *** rurban joined
[06:05] *** BenGoldberg left
[06:08] *** domidumont joined
[06:13] *** rurban_ joined
[06:16] *** vermiforme joined
[06:16] <vermiforme> hey hey

[06:16] <vermiforme> newbie here

[06:17] <nine> vermiforme: welcome!

[06:17] <yoleaux> 7 Jun 2016 11:33Z <llfourn> nine: I've tested the bugfix branch, results: RT #128156. Sorry I didn't respond sooner. I only just saw your request for tests. RT doesn't seem to be forwarding me follow-ups for this thread for some reason =(.

[06:17] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128156

[06:17] <vermiforme> wondering if there was interest in SPARQL and RDF here

[06:18] <vermiforme> thanks nine

[06:19] *** sno joined
[06:21] <nine> .tell jdv79 do you happen to use Perl 5.24?

[06:21] <yoleaux> nine: I'll pass your message to jdv79.

[06:21] <vermiforme> I'm sick of procedual database/web stuff. I want , for lack of a better term, "Lazy Functional reasoning"

[06:22] <nine> vermiforme: sounds intriguing

[06:22] <vermiforme> Yes nine

[06:23] <vermiforme> I work/hate .NET and PHP, and there are good ideas going on there

[06:24] <vermiforme> LINQ is a way forward, but I want more

[06:25] <nine> That's the spirit :)

[06:26] <vermiforme> The tricky part is the balance between parsing results, and composing the query

[06:30] <vermiforme> The thing I find with dealing with query result, is the freking loop

[06:32] <vermiforme> 'night  nine, will explore some other related channels. might come back

[06:32] <vermiforme> \q

[06:32] *** firstdayonthejob joined
[06:33] *** vermiforme left
[06:34] *** darutoko joined
[06:41] *** firstdayonthejob left
[06:52] <Xliff> vermiforme has some nice ideas, but it will be tricky building a <yourlanghere> -> SQL parser.

[06:52] *** lordbanana joined
[06:53] *** domidumont left
[06:54] *** huggable left
[06:54] *** huggable joined
[06:55] <Xliff> Tony-O's Slang::SQL is about the closest out there: https://github.com/tony-o/perl6-slang-sql

[07:01] <Xliff> sammers, you can do this: for $file_handle.lines.kv - > $k, $v { ... }. Where $k is your index and $v is the line text.

[07:07] *** _mg_ joined
[07:20] *** abraxxa joined
[07:22] <masak> good morning, #perl6

[07:22] *** azawawi joined
[07:22] <azawawi> Good morning

[07:23] <azawawi> is there a way in Perl 6 to access a private attribute in a subclass other than making read/write to the outside world?

[07:24] <moritz> azawawi: you can have a private accessor method, and then in the parent class explicitly trust the subclass

[07:25] *** rindolf joined
[07:26] <azawawi> moritz: do you have an example snippet please?

[07:29] *** abraxxa left
[07:29] *** breinbaas joined
[07:29] *** zakharyas joined
[07:30] *** abraxxa joined
[07:30] *** g4 joined
[07:30] *** bjz joined
[07:30] *** wamba left
[07:31] <moritz> azawawi: http://perlpunks.de/paste/show/5757c9d4.6bd2.391

[07:32] <azawawi> moritz: but that means a parent needs to know about its children :)

[07:33] <moritz> azawawi: sure; otherwise *any* class could declare it to be a children, making the privacy of the private attribute worthless

[07:33] <moritz> s/children/child/

[07:33] * azawawi wishes if Perl 6 had protected

[07:33] <moritz> azawawi: if you allow any odd subclass to access the private attribute, it's part of the public API

[07:34] <moritz> and you could just make it public

[07:34] <azawawi> i will give u the problem im facing right now

[07:34] <moritz> from an encapsulation standpoint, protected isn't better than public. It just gives you a false sense of "this is not *really* public"

[07:34] <azawawi> https://github.com/azawawi/gtk-simple/blob/master/lib/GTK/Simple/RadioButton.pm6

[07:34] <jast> well, 'protected' is a hint to developers, mainly

[07:35] <azawawi> now RadioButton should be a child of CheckButton per GTK documentation

[07:35] <jast> except in languages where 'protected' limits access to the same namespace and extending a namespace from an third-party module is impossible

[07:36] <azawawi> making $!gtk_widget an accessor = changing all the GTK::Simple:: classes

[07:36] <azawawi> https://github.com/azawawi/gtk-simple/blob/master/lib/GTK/Simple/CheckButton.pm6

[07:36] <azawawi> https://github.com/azawawi/gtk-simple/blob/master/lib/GTK/Simple/ToggleButton.pm6

[07:37] *** ssotka left
[07:37] <moritz> azawawi: nah, it's enough if you write a public accessor in CheckButton, and then use that in it's subclasses

[07:37] <moritz> you don't have to touch every GTK::Simple class for that

[07:37] <masak> I'm with moritz on this one; protected is a sham and a dilution of what little purity OOP has

[07:37] <azawawi> ideally RadioButton is a CheckButton which is a ToggleButton which does a Widget

[07:38] <moritz> azawawi: or you could give it a public accessor, but continue to use the private attribute where you can

[07:38] <azawawi> cool

[07:38] <azawawi> i will try that

[07:46] *** azawawi left
[07:49] <DrForr> Egads. I've been nperez'd.

[07:50] *** bjz left
[07:50] <moritz> DrForr: what does that mean?

[07:51] *** Ven joined
[07:51] <DrForr> I submitted 4 talks so ::EU could choose, I just got all 4 accepted.

[07:51] <DrForr> Fixing this momentarily, or at least explaining.

[07:52] <moritz> DrForr: well, if that's too much, you could always only accept some of them, and talk to the organizers :-)

[07:52] <moritz> the earlier, the easier for the organizers

[07:52] <DrForr> Well, luckily I sit 3 desks away from the organizer in question.

[07:53] * moritz hated last minute schedule changes at GPW2016

[07:56] *** Ven left
[08:02] *** zakharyas left
[08:03] *** TreyHarr1 joined
[08:03] *** TreyHarris left
[08:04] <DrForr> Hrm. my $T̶e̶s̶t̶-foo = 1; # I see skewer-case in our future.

[08:06] *** bjz joined
[08:19] <Xliff> .tell FROGGS If you need more help with XML::LibXML test cases, let me know!

[08:19] <yoleaux> Xliff: I'll pass your message to FROGGS.

[08:20] <DrForr> Heyo - apparently I've forgotten the invocation in here-docs to suppress interpolating {} blocks.

[08:21] <DrForr> :c maybe?...

[08:21] <Xliff> DrForr, you mean q:to[something] still does interpolation?

[08:22] <DrForr> Didn't remember if it was the ;to bits or not, looking now.

[08:22] <DrForr> I've got p6 code that I need to write inside p6 code and escaping braces is annoying.

[08:23] <Xliff> *nods*

[08:23] * Xliff smells the need for eval()

[08:23] *** dakkar joined
[08:23] <DrForr> Well, what I really need are p6 macros but I'll take what I can get.

[08:24] <Xliff> I wouldn't mind eval() so much but... MONKEY-SEE-NO-EVAL

[08:24] *** RabidGravy joined
[08:25] <Xliff> That lil ugly bit has forced me to rethink several scripts I've developed over the past few months.

[08:26] <Xliff> \o RabidGravy

[08:26] <RabidGravy> harr

[08:26] <Xliff> How goes?

[08:27] <RabidGravy> fabulous

[08:28] <Xliff> OK, here's my problem with OAuth2. It depends on a GUI. Well.... you could do without, but it would be a pain.

[08:29] *** rindolf left
[08:29] <Xliff> I've spent the past week trying to work around that pesky requirement. Only way I can think of doing it is grabbing the HTML, parsing the form fields, querying the user (if necessary) and then packaging the request back to the server.

[08:29] <jast> the only thing it depends on is user interaction

[08:29] *** vytas joined
[08:29] *** dakkar left
[08:29] <jast> yeah, usually that's your only option unless the provider offers a separate interface

[08:29] <Xliff> jast: Yeah, but if you already have the credentials, it doesn't even need that.

[08:30] *** TEttinger left
[08:30] <jast> well, the idea with OAuth is having the user confirm that they're okay with sharing their data or something like that

[08:30] <DrForr> chomp(q:to[END]) ~ "($a,$b)" # works, but *HOO* boy does that look ugly.

[08:31] <Xliff> jast: Certainly could do without the need for a browser and a webserver. But that's just me.

[08:31] <jast> otherwise websites could secretly steal your data (e.g. your e-mail address, in many cases)

[08:31] <Xliff> Heh. I understand the purpose, but the implementation is overly complex.

[08:31] <jast> I'm not exactly a fan of OAuth 2, either

[08:31] <Xliff> =)

[08:31] <DrForr> Xliff: This is why I had someone else do the implementation.

[08:32] <jast> and don't get me started on the many different implementations in practice

[08:32] <Xliff> DrForr: LOL! And what did you use, if you don't mind me asking?

[08:32] <DrForr> And if you think that's bad try CORS for banking sites.

[08:32] <jast> the worst offender is twitter where an app needs to register and use a secret key (for a public API...)

[08:32] <Xliff> DrForr: Oh no.... I stay clear of the financial sector if I can help it!!!

[08:32] <jast> and they block your key if they find it online, so you can't have an open source app with twitter support unless you cheat

[08:33] <Xliff> jast: Eve-Online is just as bad.

[08:33] <DrForr> What I said above. chomp(q:to[END]) ~ "($a,$b)" ~ '}'; # with the rest of the statement below.

[08:33] *** raiph left
[08:34] *** raiph joined
[08:34] <jast> I just know that when I tried to write a tiny CLI twitter client, that's where I threw my hands up in defeat

[08:36] <timotimo> DrForr: did you figure out it's :!c to not get curlies interpolated?

[08:36] <Xliff> timotimo to the rescue.

[08:36] <Xliff> I was just about to suggest using Q:to[]

[08:37] <timotimo> with Q you don't get any interpolation whatsoever

[08:37] *** Ven joined
[08:37] <timotimo> but it looks like DrForr still wants to have $a and $b interpolated

[08:37] <Xliff> Oh. Yikes!

[08:38] <Xliff> I didn't catch that requriement.

[08:38] <timotimo> have to read between the lines :)

[08:38] <Xliff> Yes, but it is almost 5am here and the lines are starting to run together. ;) =P

[08:39] <timotimo> ah

[08:40] *** _mg_ left
[08:40] <DrForr> timotimo: Yeah, it's kind of a "want it both ways" situation. What I'd really like is $x,(,$a,,$b) like CLISP macros :)

[08:40] <timotimo> well, i don't know clisp macros at all

[08:40] <timotimo> i just know its quote language is ridiculous :)

[08:43] <Xliff> What is this sudden craving for sunflower seeds and chocolate?!?!?!

[08:44] <masak> Xliff: maybe you're pregnant...?

[08:44] * Xliff knew someone was going to make that joke...

[08:44] <Xliff> No. I may have a beer belly, but I am not pregnant....

[08:44] <Xliff> I did have face-hugger nightmares recently.... hmmmm....

[08:45] <masak> or could just be that sunflower seeds and chocolate are tasty

[08:45] <Xliff> Let's go with that.

[08:45] <Xliff> And the auto-doc....

[08:45] *** dakkar joined
[08:45] * Xliff goes to find some chocolate.

[08:46] *** rindolf joined
[08:47] <psch> m: my ($a, $b) = 1, 2; say q[have some curlies: { }, but also have \qq[$a and $b]]

[08:47] <camelia> rakudo-moar 1254bb: OUTPUT«have some curlies: { }, but also have 1 and 2␤»

[08:47] <psch> DrForr: ^^^ that's how i'd do that.  as in, drop into qq for what you want interpolated inside q

[08:47] <masak> whoa.

[08:48] <masak> didn't know we had that.

[08:49] <psch> yeah, that happens to me quite a lot too :)

[08:50] <timotimo> whoa. i also didn't realize you could \qq

[08:51] <Xliff> \o/

[08:51] <Xliff> psch++

[08:52] <Woodi> so, who implemented that ? aliens ??

[08:52] <Xliff> qq inside of q inside of..... Wait...almost got carried away!

[08:53] * Woodi is sometimes shocked that some ppls actually know *a lot* of Perl6 :)

[08:55] *** rurban1 joined
[08:56] *** Ven left
[08:56] <DrForr> If it lets me do the entire block in one heredoc I'm all for it, other routes are uglier.

[08:57] *** rurban left
[08:58] *** araujo joined
[09:00] <DrForr> Aah, much cleaner, thanks.

[09:01] <DrForr> Feels like the old ${\{}} or whatever it was in p5, but at least the qq[] makes it more visible.

[09:04] *** pat_js joined
[09:07] *** Ven joined
[09:07] <psch> DrForr: well, it works the other way around as well, fwiw

[09:07] <psch> m: my ($a, $b) = 1, 2; say qq[have some curlies: \q[{ }], but also have $a and $b]

[09:07] <camelia> rakudo-moar 1254bb: OUTPUT«have some curlies: { }, but also have 1 and 2␤»

[09:08] <psch> DrForr: i guess the choice depends which is the more common desired behavior :)

[09:08] <psch> +on

[09:09] <DrForr> Pfft, it lets me lay out the code as I want without getting my eyes continually backslashed.

[09:12] *** ocbtec joined
[09:18] *** Actualeyes left
[09:23] *** konobi joined
[09:23] <konobi> saw something kinda cool that might be a useful tool for use

[09:23] <konobi> https://www.joyent.com/blog/550-regression-tests-in-4-minutes-with-joyent-manta

[09:36] *** autarch joined
[09:41] *** rindolf left
[09:47] *** rindolf joined
[09:49] *** vytas left
[09:53] <Ven> .tell brrt interesting LuaJIT talk by one of the current DartVM engineers: http://mrale.ph/talks/vmss16

[09:53] <yoleaux> Ven: I'll pass your message to brrt.

[09:55] <rurban1> brrt: note that I already argued with the dartvm devs about their bad usage of the int vs ptr tag usage. lua and most lisps did it better. ints need to be tagged, ptrs need to have 0b00. dartvm need to mask all ptrs, and int arith is basically the same with or without tags.

[09:56] <rurban1> nan tagging also helps a lot, and relying on fast SSE arith

[09:58] <rurban1> the optional continuation/meta ptr in the lua callframe is also much better for dynamic langs.

[09:58] *** zakharyas joined
[09:58] <konobi> Ven: terralang is also pretty interesting too

[09:59] *** wamba joined
[10:00] <rurban1> and potion, tvmjit, wren, … and most lisps.

[10:01] <rurban1> and lua 5.2 broke all this for proper int32 types

[10:02] <rurban1> which is the same problem as in perl5. cannot use tagged ints

[10:02] *** kid51 joined
[10:04] *** rurban_ left
[10:04] <konobi> rurban1: would an alternate mapping work?

[10:05] *** rurban joined
[10:05] *** tbrowder_ joined
[10:06] *** rurban1 left
[10:10] *** tbrowder_ left
[10:10] *** labster left
[10:13] *** bjz_ joined
[10:13] *** bjz left
[10:14] <masak> is there a way to `use` all of some module, except for one sub which I want to define myself?

[10:14] <masak> if I just `use` it in the normal way, I get a redeclaration error

[10:14] *** pat_js left
[10:14] <masak> let's say for concreteness that I want all of `use Test;`, except for the `is` routine

[10:20] *** g4 left
[10:22] *** mr-foobar joined
[10:24] *** aries_liuxueyang left
[10:26] *** tbrowder left
[10:27] <RabidGravy> m: use Test <!&is>; # something like this would be nice

[10:27] <camelia> rakudo-moar d86dc4: OUTPUT«5===SORRY!5=== Error while compiling /tmp/BAyjjGrmei␤Error while importing from 'Test':␤no EXPORT sub, but you provided positional argument in the 'use' statement␤at /tmp/BAyjjGrmei:1␤------> 3use Test <!&is>7⏏5; # something like this woul…»

[10:28] <RabidGravy> m: use Test :except<&is>; # something like this would be nice

[10:28] <camelia> rakudo-moar d86dc4: OUTPUT«5===SORRY!5=== Error while compiling /tmp/SDNsKFh4N8␤Error while importing from 'Test': no such tag 'except'␤at /tmp/SDNsKFh4N8:1␤------> 3use Test :except<&is>7⏏5; # something like this would be nice␤»

[10:28] <masak> I'm very far from requiring new syntax or anything of the sort

[10:29] <masak> but I do have a real use case right now where it'd be nice to be able to selectively override some stuff from an imported module

[10:29] <RabidGravy> oh no, it's all doable, but I suspect it's import only the things you want

[10:29] <masak> I don't care how it ends up looking in the end. as long as it works

[10:29] <masak> currently getting `no EXPORT sub, but you provided positional argument in the 'use' statement`

[10:30] <masak> where can I read more about this EXPORT sub? S11 doesn't seem to have the full scoop

[10:30] * masak checks the spectests

[10:32] <konobi> maybe an exclusion set?

[10:33] *** cpage_ left
[10:34] <RabidGravy> right, off out now

[10:34] <RabidGravy> toodles

[10:34] <masak> \o

[10:37] <masak> by reading the Rakudo source code I found out what the EXPORT sub is and what it's expected to return

[10:37] <masak> but I've found neither synopsis nor spectest to explain this

[10:37] <masak> could be just me being bad at searching, of course

[10:39] *** noninc joined
[10:42] <arnsholt> The docs being incomplete wouldn't be *terribly* surprising either, though =)

[10:42] <masak> oh, there's one `sub EXPORT` in the spectests

[10:42] <masak> it's a bugfix

[10:42] <masak> but it does show the general principle, which I already guessed correctly

[10:44] <arnsholt> Heh

[10:44] <masak> yay, now it works! :D

[10:44] <masak> I can selectively import things :>

[10:44] <arnsholt> That's one of the most useful things I've learned from the Perl 6 project, really. Effective source-code spelunking

[10:44] <masak> yes, but that should never be the accepted status quo or the steady state

[10:45] <masak> every time that happens, something else should happen too

[10:45] *** wamba left
[10:45] *** wamba joined
[10:45] <masak> the Ember project doesn't have a "documentation" team, they have a "learning" team

[10:45] <masak> because they figure it's never just about the document, it's about a comprehensive cross-cutting effort to bring people up the learning curve more effectively

[10:46] <konobi> rurban: would an intermediary representation work for lua JIT and ints?

[10:46] *** rindolf left
[10:48] *** vytas joined
[10:49] *** vytas left
[10:50] <arnsholt> masak: Ooh, yeah. Calling it learning instead of documentation is a much better name

[10:51] <rurban> no, luajit has no intermediate compile stage, no SSE. The ints it can unbox it unboxes, the rest are refs.

[10:51] <rurban> In lua 5.2 all ints are now refs, hence luajit refused to update to the 5.2 language.

[10:51] *** aries_liuxueyang joined
[10:53] <rurban> NAN tagging helps, as a double can hold all ints. But what about the ptr - int distuingishment for the ffi then

[10:53] <konobi> rurban: no, but terralang.org does

[10:54] *** huggable left
[10:54] *** huggable joined
[10:55] *** bjz joined
[10:55] *** bjz_ left
[11:00] *** gnull joined
[11:04] *** wamba left
[11:05] *** vytas joined
[11:06] *** vytas left
[11:07] *** vytas joined
[11:13] *** pat_js joined
[11:15] *** tomboy64 left
[11:17] *** cpage_ joined
[11:18] <konobi> rurban: with reflection too, iirc

[11:19] *** buharin left
[11:28] *** lordbanana left
[11:32] *** noninc left
[11:34] <Xliff> masak: Re selective export - What worked out in the end?

[11:35] * sjn also likes the "learning" perspective masak mentioned

[11:35] <sjn> that's a really good way to think about docs

[11:35] <Xliff> sjn: What? Code diving?

[11:36] <sjn> Xliff: re: masak's comment at 12:45 today

[11:36] <masak> Xliff: defining that `sub EXPORT`, and having it put together a custom hash based on the parameter list.

[11:36] <Xliff> Yeah. Marked 6:45 here cos.... EDT

[11:36] <sjn> ah :)

[11:36] <masak> Xliff: I can package it as a commit and link it here.

[11:36] <Xliff> masak: Is there a link to the example you found?

[11:36] * sjn assumes everyone lives in central Europe :D

[11:37] <Xliff> kk

[11:37] <Xliff> sjn: And I just assume everyone knows GMT and just do the conversions in my head.

[11:37] <Xliff> Even though I live East Coast US, I have learned that GMT is.... definitive.

[11:39] <masak> Xliff: https://github.com/masak/007/commit/5b4eaa0cdda40ac43ef749672a3b51e807cb4073

[11:40] <huf_> Xliff: GMT has been superseded by UTC because there's always another standard :)

[11:45] <Xliff> masak++: Didn't know about the hash assignment-and-fetch. Nice to know.

[11:45] *** xinming_ joined
[11:45] <Xliff> huf_, until UTC becomes global... I'm ignoring it.

[11:46] <huf_> it's not global?

[11:46] <Xliff> Not enough for me. Honestly I don't know how wide it's spread now but I am still seeing GMT instead of UTC...so

[11:46] *** kid51 left
[11:46] <huf_> oh come on

[11:47] <huf_> i'm still seeing IV but the roman empire has fallen a while ago

[11:47] <Xliff> And from Google: "There is no time difference between Greenwich Mean Time and Coordinated Universal Time"

[11:47] <Xliff> So I think I'm safe! ;)

[11:47] <huf_> yes, which is why my original line had a :) on the end

[11:47] <Xliff> Ah. Missed that.

[11:48] *** xinming left
[11:48] <Xliff> And just because something is "dead" doesn't mean that there aren't lingering organs still in use! =)

[11:49] <huf_> with strange aeons even death may die

[11:49] <Xliff> I mean... there's still a Visual BASIC -- Haven't computers evolved enough to ignore that? It's like the human tail bone! It's there... but not.

[11:53] *** kyrose joined
[11:59] <rurban> I just had to fix schwern's time64 tests because he based those tests on PTC (Pacific) and they failed in CET, in certain hours in the evening, where europe is already in the new day. With UTC (greenwhich time) the tests are now much more stable to such off-by-ones.

[12:00] <rurban> does per6 use time64? many langs do. we fixed a lot there recently. see the pull requests.

[12:00] <rurban> but nothing serious, just performance and better tests

[12:07] <kyrose> m: say "Hello everyone!\nHow it's going!";

[12:07] <camelia> rakudo-moar 9942c4: OUTPUT«Hello everyone!␤How it's going!␤»

[12:08] <masak> Xliff: turns out there was already a hash with what I wanted, so I managed to get rid of some code: https://github.com/masak/007/commit/b98fb69227215c8dd828e2f397f493a0fa274026

[12:08] <masak> Xliff: I can think of a way to get rid of the `%exports` variable and the for loop, too. but I haven't tried yet.

[12:12] *** kyrose left
[12:14] *** araujo_ joined
[12:15] <Woodi> I just make naive code diving hour ago... I give up in 2 minutes or something like that :)  rakudo/src/Perl6/Actions.nqp/[wanted|WANTED] - I even have no set of ideas what it can do :) 

[12:16] *** araujo_ left
[12:17] *** araujo_ joined
[12:17] <masak> Woodi: that's when you `git blame` and read the commit message.

[12:18] <Woodi> also discovered that semicate problem is already discovered... however main solution is: drop C, use something with "option type" :)  started to thinking C is simplest posible language ever... even asm can do more ;)

[12:18] <Woodi> masak: o, excuse to learn git blame :)

[12:18] <Woodi> thanx :)

[12:18] *** araujo_ left
[12:19] *** araujo left
[12:19] *** araujo_ joined
[12:19] <masak> in this case, it'll lead you to f95c14402, with the topic line "Great Sink Refactor"

[12:19] <masak> so "wanted nodes" are connected to the whole "useless use" thing

[12:20] *** rurban left
[12:20] *** rurban joined
[12:21] <Woodi> *semipredicate there...

[12:22] <masak> excuse me?

[12:24] <masak> oh, that backlog. got it.

[12:25] *** rurban left
[12:25] <Xliff> "drop C" -- *gasp* -- how could you?! =)

[12:26] <masak> there are many excellent reasons not to write things in C nowadays :)

[12:26] <masak> also, you're not considering language usage a zero-sum game, are you? because it mostly isn't

[12:26] <Woodi> yea, Perl was announced in 80's ? :)

[12:28] *** azawawi joined
[12:28] <Xliff> masak: Yes, C can be a pain however...there was sarcasm. 

[12:28] <Woodi> masak: no, just simplicistic view

[12:28] <azawawi> http://pasteboard.co/1wSaC4JE.png  # GTK::Simple::RadioButton in action :)

[12:28] <Xliff> And nowadays you use the language that's best for the task. Language interoperability is high!

[12:28] <Woodi> and git blame requires a big screen...

[12:28] <masak> or a small typeface

[12:29] <masak> azawawi: neat!

[12:29] *** iH2O joined
[12:30] <Xliff> azawawi++

[12:30] <Woodi> any idea what new MONKEY-* can be later ?

[12:30] <Xliff> How much of GTK is covered in GTK::Simple?

[12:31] <perlpilot> Woodi: MONKEY-MONKEY   ;)

[12:32] <Woodi> perlpilot: but I asked about *code* :)

[12:34] <Woodi> azawawi: any way to make examples to not be so damn gray ? I see IDE in screenshot is't such ugly...

[12:34] * Woodi have brain burned out by gtk industrial gray...

[12:34] <azawawi> :)

[12:41] <azawawi> https://github.com/perl6/gtk-simple/pull/49

[12:41] * azawawi going home & :)

[12:42] *** azawawi left
[12:42] *** pmurias joined
[12:43] <pmurias> masak: has anything really taken the high performance thing that's easy to use from other language niche?

[12:43] <pmurias> s/taken/taken over/

[12:43] <masak> pmurias: not really, no. that's probably also a good use for C++.

[12:44] <masak> pmurias: note that I'm not saying there are no uses left for C. that'd be a ridiculous statement at this point.

[12:44] <masak> pmurias: I'm just saying there are reasons to choose something else in many cases. :)

[12:44] *** _mg_ joined
[12:45] * perlpilot notes that fortran was once "the high performance thing that's easy to use from other language"

[12:45] <perlpilot> (and often the other language was C IME :)

[12:45] *** rurban joined
[12:49] <stmuk_> I think go and rust have similar performance to C for many things

[12:52] *** dj_goku left
[12:54] *** rurban1 joined
[12:54] *** Sgeo_ left
[12:58] *** rurban left
[12:59] <arnsholt> perlpilot: Yeah, I think Fortran is still the high-performance language of choice for those who are super into performance (climate sims and such, for example)

[12:59] <arnsholt> IIRC it's something to do with Fortran disallowing pointer aliasing entirely, which makes it easier to optimize

[13:00] *** araujo__ joined
[13:00] *** rgrinberg joined
[13:01] *** skids joined
[13:02] <jnthn> iirc, also recursion is fairly constrained

[13:02] <jnthn> So you don't need call frames.

[13:03] *** iH2O left
[13:03] <pmurias> masak: C++ has it's own set of problems

[13:03] *** araujo_ left
[13:04] <perlpilot> prior to fortran 90, fortran didn't have recursion, so ... F77 anf F67 were really constrained in that regard :)

[13:04] <rurban1> can moarvm already do tail-call elimination?

[13:05] <masak> pmurias: you keep making counterpoints to things I didn't really say ;)

[13:05] <masak> pmurias: yes, C++ has its own set of problems, distinct from C's

[13:05] <rurban1> @stmuk_: go not, rust yes. pony even better than C++ with openmp, and safer and easier than rust

[13:07] <avalenn_> rurban1: is your pony http://www.ponylang.org/ ?

[13:08] <timotimo> rurban1: moarvm cannot do that yet, no

[13:16] *** wamba joined
[13:24] *** stevieb joined
[13:26] *** Khisanth left
[13:26] *** RabidGravy left
[13:27] *** cdg joined
[13:32] *** sftp left
[13:32] *** araujo_ joined
[13:32] *** araujo__ left
[13:34] *** sftp joined
[13:35] <rurban1> avalenn_: yes

[13:35] *** azawawi joined
[13:35] * azawawi reporting for Perl 6 fun duty :)

[13:36] <azawawi> https://github.com/perl6/gtk-simple/pull/49  # Any feedback before merging pull?

[13:36] <rurban1> timotimo: I'm also still working on proper tce in cperl. (tail call elimination). at least cperl has now proper tailcalls, reusing the stack and pads (locals and args).

[13:36] *** rindolf joined
[13:36] <timotimo> that's good

[13:38] <timotimo> just yesterday i heard someone say "well, everybody complains about the GIL, but i think it really only costs like 10% performance, because when you're using all cores, it'll be faster, obviously!"

[13:38] *** RabidGravy joined
[13:39] <azawawi> RabidGravy: boom :)

[13:39] *** Khisanth joined
[13:40] *** rurban joined
[13:40] *** rurban1 left
[13:48] <dalek> gtk-simple: 648855f | azawawi++ | / (3 files):

[13:48] <dalek> gtk-simple: More places sidebar properties

[13:48] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/648855f3e1

[13:48] <dalek> gtk-simple: 3b2c302 | azawawi++ | lib/GTK/Simple/Raw.pm6:

[13:48] <dalek> gtk-simple: Tidy code a bit and fix copy & paste

[13:48] *** dalek left
[13:49] *** pmurias_ joined
[13:49] *** dalek joined
[13:49] *** ChanServ sets mode: +v dalek

[13:51] *** brrt joined
[13:52] *** pmurias left
[13:57] <ilmari> how does "unit class Foo" differ from "class Foo"? I can't find anything on docs.perl6.org

[13:57] <psch> m: class Foo;

[13:57] <camelia> rakudo-moar 2bd421: OUTPUT«5===SORRY!5=== Error while compiling /tmp/kyhpVNrXb4␤Semicolon form of 'class' without 'unit' is illegal.  You probably want to use 'unit class'␤at /tmp/kyhpVNrXb4:1␤------> 3class Foo;7⏏5<EOL>␤»

[13:57] <psch> that's the only difference i know of

[13:58] <ilmari> m: unit class Foo { }

[13:58] <camelia> rakudo-moar 2bd421: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ykRHMpQ5rR␤Cannot use 'unit' with block form of class declaration␤at /tmp/ykRHMpQ5rR:1␤------> 3unit class Foo7⏏5 { }␤    expecting any of:␤        generic role␤»

[13:58] <timotimo> what about "sub EXPORT must be in unit scope"?

[13:58] <timotimo> i think that means if you have a unit class Foo, it'll go inside the class (by necessity) and if you have a class Foo { ... } it'll go outside

[13:58] <ilmari> but where is "unit" documented?

[13:58] <llfourn> probably isn't tbh

[13:58] <timotimo> http://doc.perl6.org/language/modules

[13:59] <timotimo> oh

[13:59] <timotimo> not documented

[13:59] <timotimo> but used

[13:59] <ilmari> yeah

[14:00] *** zakharyas left
[14:00] <timotimo> so seems like the docs want to be written about this

[14:00] *** zakharyas joined
[14:02] <llfourn> there a number of package topics NYD

[14:03] *** araujo_ left
[14:03] * perlpilot still isn't sure about the necessity of "unit"

[14:04] *** _mg_ left
[14:04] <perlpilot> at least I don't remember why we went from "class Foo;" to "unit class Foo;"

[14:04] *** zakharyas left
[14:05] <azawawi> because 'unit class' is cooler? :)

[14:05] <psch> perlpilot: the commit (14e680733) alludes to one-pass parsing

[14:05] <perlpilot> If it was to remove the ambiguity of what "class Foo;" means, that's good, but I don't quite see how that jibes with the NYI scope declarator

[14:05] <geekosaur> forward declarations

[14:05] <perlpilot> m: unit $a;

[14:05] <camelia> rakudo-moar 2bd421: OUTPUT«5===SORRY!5=== Error while compiling /tmp/r4fdmXaX7P␤unit scoped variables not yet implemented. Sorry. ␤at /tmp/r4fdmXaX7P:1␤------> 3unit $a7⏏5;␤    expecting any of:␤        constraint␤»

[14:05] * ilmari thought it was something like scala's "sealed trait", i.e. can't be extended outside the compilation unit it's declared in

[14:06] <psch> notably the "A semicolon [...] is too late" bit

[14:09] <timotimo> we should add "no return;" so that people can ask "what's the point of 'no return;'?"

[14:11] *** tharkun left
[14:11] <tadzik> hah!

[14:12] <tadzik> I convinced $employer to have a thing ported to perl 6 while I do the refactoring of it :D

[14:12] <perlpilot> tadzik++

[14:12] * tadzik praises nine++ for Inline::Perl5

[14:13] *** tharkun joined
[14:13] <perlpilot> indeed, Inline::Perl5 (and the other work nine has done) are the best shot at "bootstrapping" Perl 6 into a Perl 5 world.

[14:13] *** kalkin- left
[14:13] *** kalkin-_ joined
[14:13] *** ptolemarch joined
[14:14] *** Ven left
[14:16] *** araujo joined
[14:16] *** araujo left
[14:26] *** brrt left
[14:35] *** donaldh joined
[14:37] *** rurban left
[14:38] *** khw joined
[14:40] *** dj_goku joined
[14:41] <gregf_> m: sub upcase($i,$c) { $i %2 == 0 ?? $c.uc !! $c; }; say "greetings perl6".comb.kv.map(&upcase).join

[14:41] <camelia> rakudo-moar 2bd421: OUTPUT«GrEeTiNgS PeRl6␤»

[14:44] *** rgrinberg left
[14:44] *** rgrinberg joined
[14:45] <Xliff> Eesh! Reading the GTK docs is hard.

[14:45] <timotimo> yes, it is :(

[14:45] *** pat_js left
[14:46] *** palad joined
[14:49] *** pyrimidine joined
[14:49] <Xliff> deprecated

[14:49] <Xliff> oops

[14:49] <Xliff> timotimo, also incomplete. But then again GTK is huge.

[14:54] *** noninc joined
[14:54] *** huggable left
[14:54] *** huggable joined
[14:54] *** brrt joined
[15:02] *** rgrinberg left
[15:02] <azawawi> Xliff: https://github.com/perl6/gtk-simple/tree/master/examples :)

[15:02] *** rgrinberg joined
[15:04] *** rgrinberg left
[15:04] <azawawi> tadzik: ping

[15:04] *** rgrinberg joined
[15:04] <Xliff> azawawi: What's that? Current progress?

[15:05] <azawawi> Xliff: Perl 6 examples that you can use

[15:05] <Xliff> Ah...

[15:05] <Xliff> Already forked. ;)

[15:05] <azawawi> noooo lol

[15:05] <azawawi> :)

[15:06] <timotimo> NO LOL | NO PROJECT EULER

[15:06] <azawawi> .tell tadzik Please take a look at https://github.com/tadzik/panda/issues/316

[15:06] <yoleaux> azawawi: I'll pass your message to tadzik.

[15:06] <azawawi> timotimo: :)

[15:07] <azawawi> ~ 1 hr 45 min  till breaking fast... low on sugar :)

[15:07] <Xliff> azawawi: Only forked coz....pull requests. :P

[15:07] *** wamba left
[15:08] <Xliff> Assuming my ambitions aren't more ambitions than me.

[15:10] <azawawi> i hate that 3055 error https://travis-ci.org/perl6/gtk-simple/jobs/135217602#L1197

[15:10] <azawawi> with passion

[15:13] *** ssotka joined
[15:16] * azawawi starts working on https://developer.gnome.org/gtk3/stable/GtkLinkButton.html

[15:17] *** rgrinberg left
[15:19] *** aries_liuxueyang left
[15:20] *** mr-foobar left
[15:21] *** aries_liuxueyang joined
[15:21] *** xinming_ left
[15:21] *** xinming joined
[15:21] *** araujo joined
[15:24] *** Actualeyes joined
[15:25] *** rurban joined
[15:28] *** rurban_ joined
[15:32] *** rgrinberg joined
[15:40] *** tharkun left
[15:40] *** tharkun joined
[15:48] <azawawi> http://pasteboard.co/1x5h09il.png  # GTK::Simple::LinkButton :)

[15:52] *** raiph left
[15:52] *** raiph joined
[15:55] <Juerd> https://gist.github.com/Juerd/b6531810922d0cefec82b650be4915ca  # b2gills suggests using .^name instead of .WHAT, but I've only ever seen .WHAT in examples as far as I can remember. Any opinions about which is best for example codes gear toward beginning Perl 6 programmers?

[15:55] <Juerd> s/gear/geared/

[15:57] <b2gills> The main thing is .WHAT on an undefined object is a no-op, whereas .^name returns a Str

[15:59] <Juerd> b2gills: What do you mean? "say Str.WHAT" does say "(Str)"

[15:59] <b2gills> Str.WHAT is exactly the same as Str

[15:59] <Juerd> Why is that a problem?

[15:59] <b2gills> m: say Str; say Str.WHAT

[15:59] <camelia> rakudo-moar 2bd421: OUTPUT«(Str)␤(Str)␤»

[16:00] <Juerd> It's like "A".uc, I think

[16:00] <retupmoca> .WHAT returns an object and .^name returns a string, IIRC

[16:01] <retupmoca> m: say Int.WHAT.WHAT; say Str.^name.WHAT;

[16:01] <camelia> rakudo-moar 2bd421: OUTPUT«(Int)␤(Str)␤»

[16:01] <b2gills> I just find it annoying

[16:02] <Juerd> b2gills: I'm more sensitive to technical arguments than emotional ones :)

[16:02] <retupmoca> m: say Int.WHAT.WHAT; say Int.^name.WHAT; # both Int makes it more clear

[16:02] <camelia> rakudo-moar 2bd421: OUTPUT«(Int)␤(Str)␤»

[16:02] *** palad_ joined
[16:02] <b2gills> and in example code, it makes new Perl 6 programmers think it does something other than what it actually does

[16:02] <Juerd> What do you reckon they will think it does?

[16:02] <b2gills> Return the name

[16:02] *** palad left
[16:03] <Juerd> But if you use .^name in example code, they might be more inclined to do $foo.^name eq 'Str' than $foo.WHAT ~~ Str

[16:04] <Juerd> I don't have a smart match like that in there yet, but I intend to

[16:04] <b2gills> and they may think that ｢'the type is ' ~ 42.WHAT｣ might work ( it doesn't )

[16:04] <b2gills> They should do $foo ~~ Str

[16:04] <Juerd> No, but then they run into a very helpful error message...

[16:04] <Juerd> b2gills: Yes, they should. Hm.

[16:05] <b2gills> or $foo.WHAT =:= Str to make sure it is of the same type

[16:05] <Juerd> I will not use =:= in any example code if I can avoid it at all.

[16:05] <b2gills> nor should you for most purposes

[16:06] <literal> wasn't there some shorthand for <[0..9 a..z A..Z]> ?

[16:06] <literal> err. I mean a..f A..F

[16:06] *** palad_ left
[16:07] * azawawi food & :)

[16:08] *** azawawi left
[16:08] *** raiph left
[16:08] <ilmari> don't perl6 regexes have named posix character classes, e.g. [:xdigit:]?

[16:09] *** raiph joined
[16:09] *** rurban left
[16:10] <b2gills> m: say 'aF' ~~ /<xdigit>+/

[16:10] <camelia> rakudo-moar 2bd421: OUTPUT«｢aF｣␤ xdigit => ｢a｣␤ xdigit => ｢F｣␤»

[16:10] <literal> ah ok

[16:11] <ilmari> m: say 'af' ~~ /<:Hex_Digit>/

[16:11] <camelia> rakudo-moar 2bd421: OUTPUT«｢a｣␤»

[16:11] <ilmari> m: say 'af' ~~ /<:Hex_Digit>+/

[16:11] <camelia> rakudo-moar 2bd421: OUTPUT«｢af｣␤»

[16:11] <ilmari> m: say 'axf' ~~ /<:Hex_Digit>+/

[16:11] <camelia> rakudo-moar 2bd421: OUTPUT«｢a｣␤»

[16:11] <ilmari> (that's the unicode property name)

[16:12] *** raiph left
[16:13] *** raiph joined
[16:13] *** pullphinger joined
[16:15] <b2gills> m: ((0.. 0x10FFFF).grep: *.uniprop: 'Hex_Digit').map: *.chr.print

[16:15] <camelia> rakudo-moar 2bd421: OUTPUT«0123456789ABCDEFabcdef０１２３４５６７８９ＡＢＣＤＥＦａｂｃｄｅｆ»

[16:16] <dalek> gtk-simple: 5dd0726 | azawawi++ | / (6 files):

[16:16] <dalek> gtk-simple: Add LinkButton widget

[16:16] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/5dd0726f8b

[16:16] <dalek> gtk-simple: da08826 | azawawi++ | / (6 files):

[16:16] <dalek> gtk-simple: Merge pull request #50 from azawawi/master

[16:16] <dalek> gtk-simple: 

[16:16] <dalek> gtk-simple: Add LinkButton widget

[16:16] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/da08826008

[16:16] *** sno left
[16:16] <tony-o> where did $*OS move to?

[16:16] <b2gills> m: ((0.. 0x10FFFF).grep: {.chr ~~ /<xdigit>/}).map: *.chr.print

[16:17] <camelia> rakudo-moar 2bd421: OUTPUT«0123456789ABCDEFabcdef»

[16:17] <tony-o> ah, brain fart

[16:18] *** _mg_ joined
[16:19] *** azawawi joined
[16:19] <azawawi> m: say $*DISTRO.perl

[16:19] <camelia> rakudo-moar 2bd421: OUTPUT«Distro.new(release => "13.2", is-win => Bool::False, path-sep => ":", name => "opensuse", auth => "https://opensuse.org/", version => v13.2.Harlequin, signature => Blob, desc => "2016-06-08T18:19:46.210396+02:00")␤»

[16:20] <azawawi> tony-o: $*OS -> $*DISTRO  # if i remember correctly

[16:20] <tony-o> yes sir

[16:21] *** azawawi left
[16:21] <sjn> should using $*OS give a warning?

[16:21] <tony-o> it's been that way for a long time :) i'm working on doing automated test reports when you install modules with `zef` - does panda have a plugin type system i can write something like that for?

[16:30] *** raiph left
[16:30] *** raiph joined
[16:35] *** raiph left
[16:36] *** raiph joined
[16:43] <gregf_> dumb question: is it possible to have abstract methods in a role that force the consumer to implement them?

[16:43] <nine> gregf_: not dumb at all and yes it's possible

[16:43] <nine> gregf_: just declare them like this: method foo() { ... }

[16:44] * Xliff builds rakudo, again.

[16:45] * sjn really likes the … method 

[16:45] <sjn> m: …;

[16:45] <camelia> rakudo-moar 2bd421: OUTPUT«Stub code executed␤  in block <unit> at /tmp/zcXsP_Bi8x line 1␤␤»

[16:45] <jdv79> nine: just give me a hint and i'll investigate (https://github.com/niner/Inline-Perl5/issues/63)

[16:45] <yoleaux> 06:21Z <nine> jdv79: do you happen to use Perl 5.24?

[16:45] <gregf_> nine: oh, so like, role PrefixBuilder { method buildPrefix(){ die "TBI"; }; } ; class DatePrefixBuilderImpl does PrefixBuilder { method buildPrefix(){} }; class StringPrefixBuilder does PrefixBuilder { method buildPrefix(){} }?

[16:46] <jdv79> yes.  yes i do.

[16:46] <sjn> gregf_: you can actually use the three dots (...) or it's utf8-version …

[16:46] *** donaldh left
[16:46] <sjn> they even give a nice message

[16:47] <sjn> "Stub code executed"

[16:47] <gregf_> m: (...).^name

[16:47] <camelia> rakudo-moar 2bd421: OUTPUT«Stub code executed␤  in block <unit> at /tmp/cgYxW8tfpu line 1␤␤»

[16:47] *** brrt left
[16:47] *** dakkar left
[16:48] <gregf_> hmm, i was of the impression that ... was for ranges/lists

[16:48] <sjn> it is

[16:48] <gregf_> ah - ok, that was what nine meant ;)

[16:48] <sjn> but if you write it where a term is expected, you get the "not yet implemented" function

[16:49] <gregf_> rather than a die use ... #brill ;)

[16:49] <sjn> yeah, it throws an exception too

[16:49] <gregf_> nine++ sjn++

[16:50] *** Ven joined
[16:50] * sjn wonders how to introspect that method

[16:52] *** pmurias joined
[16:56] *** flaviusb joined
[16:59] <TimToady> a ... in a stub will also suppress any redefinition warnings

[17:00] <TimToady> (on subs or classes)

[17:03] *** stevieb left
[17:04] *** rgrinberg left
[17:09] *** molaf joined
[17:09] <jdv79> nine: i believe i encounter a similar error with 5.22.2

[17:10] *** pmurias left
[17:10] *** pmurias_ left
[17:10] <geekosaur> m: &term:<...>.^name.say

[17:10] <camelia> rakudo-moar 2bd421: OUTPUT«5===SORRY!5=== Error while compiling /tmp/78YI5W5d66␤Undeclared routine:␤    term:<...> used at line 1. Did you mean 'term:<now>'?␤␤»

[17:10] <geekosaur> hm

[17:13] <sjn> that was weird

[17:14] <nine> jdv79: I asked because there's a github issue with similar error messages from a 5.24 user

[17:15] <nine> jdv79: I guess, I should just perlbrew 5.24 and test here

[17:15] <b2gills> Perl 5 copied part of the ... feature ｢perl -MO=Deparse -e '...'｣ => ｢die 'Unimplemented';｣

[17:15] <nine> jdv79: it's just that on my desktop I don't even have a working rakudo currently as I'm still working on unbreaking perl6-j

[17:16] *** firstdayonthejob joined
[17:16] <[Coke]> if $*OS moved before christmas... nope

[17:18] <b2gills> m: $^O

[17:18] <camelia> rakudo-moar 2bd421: OUTPUT«5===SORRY!5=== Error while compiling /tmp/QBLJBPlGw6␤Unsupported use of $^O variable; in Perl 6 please use $?DISTRO.name or $*DISTRO.name␤at /tmp/QBLJBPlGw6:1␤------> 3$^O7⏏5<EOL>␤»

[17:20] *** sno joined
[17:21] *** keix left
[17:21] <sjn> huh, I get a completely different warning

[17:22] <sjn> m: say $*PERL.perl

[17:22] <camelia> rakudo-moar 2bd421: OUTPUT«Perl.new(compiler => Compiler.new(id => "73CD636A1ABD7B788919C77C797DC2E21F4C48B0.1465392618.02908", release => "", codename => "", name => "rakudo", auth => "The Perl Foundation", version => v2016.05.68.g.2.bd.4211, signature => Blob, desc => Str), name =…»

[17:23] * sjn rebuilds moar

[17:23] *** _mg_ left
[17:23] *** keix joined
[17:23] <ugexe> 5.24 worked ok for Inline:Perl5 on my VM, and 5.22 had the same error on jdv79s VM when I had access

[17:24] *** firstdayonthejob left
[17:25] *** firstdayonthejob joined
[17:31] *** Urchin joined
[17:32] *** FROGGS joined
[17:34] *** zakharyas joined
[17:35] <FROGGS> o/

[17:35] <yoleaux> 03:16Z <sortiz> FROGGS: Sure, test-driven is the better approach.

[17:35] <yoleaux> 08:19Z <Xliff> FROGGS: If you need more help with XML::LibXML test cases, let me know!

[17:35] <lizmat> FROGGS o/

[17:36] <FROGGS> Xliff: sure, if you want to hack on it... let me know your github-ID and I'll welcome you :o)

[17:36] <FROGGS> hi lizmat 

[17:36] <lizmat> FROGGS: long time no see   :-)

[17:39] <FROGGS> aye :o)

[17:39] *** Actualeyes left
[17:39] <FROGGS> will attempt to join every evening again

[17:39] <lizmat> ++FROGGS  :-)

[17:41] *** rgrinberg joined
[17:41] <masak> FROGGS: yes, please do!

[17:42] *** rgrinberg left
[17:42] *** rgrinberg joined
[17:45] <moritz> \o

[17:46] <masak> if I had a nickel for every "missing or wrong dependency"

[17:46] *** rgrinberg left
[17:46] <masak> yes, compiler, I know you're ===SORRY!===...

[17:46] *** rgrinberg joined
[17:47] *** TreyHarris joined
[17:48] *** llfourn left
[17:48] <FROGGS> masak: but at least I filed that issue just the other day :o)

[17:49] *** rgrinberg left
[17:49] *** rgrinberg joined
[17:50] <masak> FROGGS++

[17:50] *** TreyHarr1 left
[17:51] *** llfourn joined
[17:53] *** rgrinberg left
[17:53] <masak> chalk this one up as a first: fix bug, write regression test for bug, see it pass, interactive rebase to put the commits in the reverse order, `edit` after the test, re-run to see red, rebase --continue, rebase -i again, squash the two commits together

[17:53] <masak> :)

[17:53] *** rgrinberg joined
[17:53] <masak> man, I love Git

[17:53] <masak> I do not love that precomp bug. fifth time I get it now in the past 15 minutes

[17:54] <masak> apparently it bites you if your modules `use` each other :/

[17:54] *** buharin joined
[17:54] <buharin> hi

[17:54] <buharin> :)

[17:54] <buharin> mst, hello

[17:54] <perlpilot> buharin: greetings.  

[17:55] <mst> buharin: yes?

[17:55] <[Coke]> masak: you have circular deps?

[17:55] <buharin> mst, don't ban me please

[17:55] <masak> [Coke]: heavens, no

[17:55] <mst> buharin: you had a 24h temporary quiet

[17:55] <masak> ...that's not what I meant

[17:55] <mst> buharin: I told you it was only 24h

[17:55] <mst> buharin: I lifted it after 24h

[17:55] <buharin> ok

[17:55] <mst> buharin: what are you even talking about?

[17:55] <buharin> thnks

[17:55] <masak> I meant "if you have modules which use other modules which you have"

[17:55] *** rgrinberg left
[17:55] <perlpilot> buharin: Is that why you greet mst specifically each time you join here?

[17:55] <buharin> yes

[17:56] <mst> well, stop it

[17:56] *** rgrinberg joined
[17:56] *** zakharyas left
[17:56] <[Coke]> If you don't wish to be tempbanned, don't act in a way which requires it

[17:57] <[Coke]> … crud, I have a meeting in 3m.

[17:58] *** timeless joined
[17:59] <mst> buharin: look. if I tempban you, once the tempban is up, it's done.

[17:59] <mst> buharin: just don't do the same thing again, and we're fine

[17:59] <buharin> ok, I am sorry

[17:59] <buharin> I am good

[17:59] <mst> buharin: making a big deal of it is not necessary and bloody annoying

[17:59] <mst> right. so let's move on.

[18:00] <timeless> hi, do people take feedback on  https://doc.perl6.org/language/5to6-nutshell here?

[18:00] *** donaldh joined
[18:00] <perlpilot> timeless: the best feedback comes in the form of a pull request  :)

[18:00] <timeless> the syntax highlighting on this line is *odd*:   return scalar(<H>), scalar(<H>);

[18:00] <timeless> perlpilot: that's great. sometimes i'll do them, sometimes i won't

[18:01] <timeless> today i'm offering bug reporting as opposed to fixes, since i don't know the language

[18:01] <perlpilot> timeless: yeah, the highlighting there is weird.

[18:01] <timeless> also here: my $href = { A => 98, Q => 99 }; # Both Perl 5&6 [*See Note*]

[18:01] <timeless> i don't understand the coloring in https://doc.perl6.org/language/5to6-nutshell#Change_=~_and_!~_to_~~_and_!~~_.

[18:02] <timeless> also, sometimes `See S0x/....` is a link, as in `See S05/Substitution.`

[18:02] <timotimo> the highlighter is derping around, i'd guess

[18:02] <timeless>  but often, it isn't, as in `See S32/Containers`

[18:03] <timeless> (i suppose the highlighter could want a trailing period, but i haven't finished reading, so i haven't built a mental model)

[18:06] <timeless> In Perl 6 regexen, | does LTM, which decides which alternation wins an ambiguous match based off of a set of rules, rather than about which was written first.

[18:06] <timeless> the `about` doesn't make sense there

[18:06] *** muraiki joined
[18:06] <timeless> > no warnings is currently NYI, but putting things in a quietly {} block will silence.

[18:06] * timeless has no clue what NYI means

[18:06] <lizmat> Not Yet Implemented

[18:06] <lizmat> S99:NYI

[18:06] <synopsebot6> Link: http://design.perl6.org/S99.html#NYI

[18:07] <timeless> would it hurt for that to be linkified?

[18:08] *** rgrinberg left
[18:11] <Xliff> FROGGS: Here's my github profile -- https://github.com/Xliff

[18:11] * timeless wonders why everything in this page has a `link to top of documetn`

[18:11] <timeless> surely web browsers let users do that...

[18:11] <Xliff> So I think my github-id is the same as my IRC nick.

[18:12] <Xliff> timeless: Some IRC clients do it for you....

[18:12] * Xliff hides.

[18:12] <timeless> Xliff: eh?

[18:12] <timeless> Xliff: load https://doc.perl6.org/language/5to6-nutshell#-s

[18:12] <Xliff> You said something about linkifying.

[18:12] <timeless> hover over `-s`

[18:12] <timeless> why would you want clicking on `-s` to take you to https://doc.perl6.org/language/5to6-nutshell#___top

[18:13] <Xliff> Ooh! I see now.

[18:13] <timeless> https://doc.perl6.org/language/5to6-nutshell#Operators

[18:13] <Xliff> But where else should it take you? 

[18:13] <timeless> scroll up one line

[18:13] <timeless> "See S32/Containers"

[18:13] <timeless> that should be a link, but no irc client will make it one...

[18:14] <nemo> timeless: well actually my MATE terminal included -s in the link ☺

[18:14] <timeless> Xliff: having a larger anchor for me to click, or, having the anchor available consistently to the left of the topic would be nice -- for sharing

[18:14] <Xliff> Would need to add that format to the bots.

[18:14] <nemo> timeless: it didn't do so well with the link that ended in a . though

[18:15] <Xliff> S32:Containers

[18:15] <synopsebot6> Link: http://design.perl6.org/S32.html#Containers

[18:15] <Xliff> ^^ or that

[18:15] <nemo> https://doc.perl6.org/language/5to6-nutshell#Change_=~_and_!~_to_~~_and_!~~_.  ← this link

[18:15] <Xliff> Unfortunately, that link doesn't exist

[18:15] <timeless> Xliff: ok, nice bot

[18:15] <timeless> https://doc.perl6.org/language/5to6-nutshell#-s

[18:16] <timeless> is it really the convention to mix file content w/ shell commands w/ shell output?

[18:16] <geekosaur> timeless, that's a common (but not universal) convention: in the table of contents a link takes you to the section, and the corresponding link in the section takes you back to the table of contents

[18:16] <geekosaur> some wikis do this automatically as well (trac, at least)

[18:16] <timeless> geekosaur: i personally hate trac, but i'm not going to get into that

[18:17] <Xliff> .tell FROGGS  Here's my github profile -- https://github.com/Xliff

[18:17] <yoleaux> Xliff: I'll pass your message to FROGGS.

[18:17] <timeless> if you can accept the pieces that can be fixed and overlook places where i'm whining, i'd appreciate it :)

[18:17] <timeless> > Removed. See S19.

[18:17] <timeless> missing link

[18:17] <timeless> S19

[18:17] <timeless> synopsebot6: S19

[18:17] <timeless> ...

[18:18] <Xliff> S19:top

[18:18] <synopsebot6> Link: http://design.perl6.org/S19.html#top

[18:18] *** sherwool joined
[18:18] <Xliff> Need the :

[18:18] <timeless> S19:

[18:18] <timeless> S19:_

[18:18] <synopsebot6> Link: http://design.perl6.org/S19.html#_

[18:18] <timeless> um, ok...

[18:18] <timeless> anyway, that doesn't tell me what it is, i'd have to click the link

[18:18] *** tomboy64 joined
[18:19] <Xliff> Someone would have to update synopsebot6 with the titles.

[18:19] <geekosaur> spitting possibly large chunks of text into irc is not generally a good plan...

[18:19] <FROGGS> Xliff: done

[18:19] <yoleaux> 18:17Z <Xliff> FROGGS: Here's my github profile -- https://github.com/Xliff

[18:19] <Xliff> FROGGS, Cool!

[18:20] <timeless> geekosaur: titles shouldn't be long =b

[18:20] <FROGGS> Xliff: I hope you get the idea of how the code is structured

[18:20] <geekosaur> one would hope. but give someone something to abuse and someone will abuse it :(

[18:20] <Xliff> geekosaur, just a title for the associated S article and the link.

[18:21] <Xliff> Limited abuse potential.

[18:21] <Xliff> FROGGS: OK. Got a link for the repo?

[18:22] <FROGGS> Xliff: https://github.com/FROGGS/p6-XML-LibXML

[18:24] <timeless> > (Please note that not having the module statement isn't consistent with Synopsis 11, however it works.)

[18:24] <timeless> that should have a link

[18:26] *** tbrowder joined
[18:26] <Xliff> FROGGS: Cool! I'll try to work on some of these tonight.

[18:27] *** Urchin left
[18:28] *** telex left
[18:29] <timeless> https://doc.perl6.org/language/5to6-nutshell#-s

[18:29] <timeless> Switch parsing is now done by the parameter list of the MAIN subroutine.

[18:29] <timeless> https://doc.perl6.org/language/5to6-nutshell#Getopt::Long

[18:29] <timeless> Switch parsing is now done by the parameter list of the MAIN subroutine.

[18:29] <timeless> would it make sense to have `-s` link to the other thing?

[18:30] *** telex joined
[18:31] *** tbrowder left
[18:31] *** donaldh left
[18:31] * timeless reaches the end of the document

[18:32] <nemo> timeless: and are now a perl6 expert

[18:32] * timeless goes back to um.. something else

[18:33] <timeless> (C apparently)

[18:33] <nemo> timeless: ah. just in time, since you're doing perl5 → perl6  time to go C → Rust ☺

[18:33] <timeless> no thanks

[18:34] <timeless> this isn't my project

[18:34] <timeless> (it's tmux)

[18:34] <nemo> ah

[18:34] *** donaldh joined
[18:35] *** labster joined
[18:36] <FROGGS> Xliff++

[18:40] <FROGGS> damn

[18:40] <FROGGS> I believe I removed my login from the sudoers group -.-

[18:44] *** FROGGS left
[18:44] *** tbrowder joined
[18:44] <tbrowder> hi, perl people

[18:46] <tbrowder> anyone here going to YAPC::NA::2016 besides lizmat, DrForr, timtoady, damian, and util (and moi)?

[18:46] *** noninc left
[18:46] *** FROGGS joined
[18:47] <Xliff> Where in NA will the YAPC be?

[18:47] <timeless> perlpilot: anyway, were my notes helpful?

[18:48] <tbrowder> Orlando, Florida, home of Disney World and such

[18:48] *** wamba joined
[18:49] *** Ven left
[18:50] <tbrowder> I hope lizmat can spare some time to talk about debugging P6 and working with the grammar

[18:50] <lizmat> debugging yes, working with grammars is definitely not my forte

[18:51] <tbrowder> debugging is good!

[18:51] <perlpilot> tbrowder: I'll be at YAPC::NA

[18:52] <tbrowder> good!

[18:53] <tbrowder> it helps to put a face to irc, and maybe chat over a beverage of choice

[18:54] <perlpilot> timeless: maybe stick them in an issue on github?  I don't have time right now to do anything about them.

[18:54] *** huggable left
[18:54] *** huggable joined
[18:54] * timeless regrets not having claimed `timeless` on github :/

[18:54] *** hankache joined
[18:55] *** FROGGS left
[18:56] <timeless> perlpilot: is the pod really the original source? it feels like it might not be...

[18:56] <perlpilot> tbrowder: you can see a 10 year old picture of me on my github profile if you want to put a face to a nick.   I've lost some hair since then, but it's all under the hat in that picture anyway.  I basically look the same though  :)

[18:57] <hankache> good evening #perl6

[18:57] <lizmat> hankache o/

[18:57] <lizmat> hankache: so what would I need to create a Dutch version of perl6intro ?

[18:57] <lizmat> *do

[18:57] <hankache> hiya lizmat

[18:58] <hankache> you need to know the syntax (asciidoc).

[18:58] *** win32 joined
[18:58] <win32> Hi here =D

[18:58] <perlpilot> timeless: aye, it is.  (at least last time I looked, the html was being built from the pod.  someone could have changed it when I wasn't paying attentiong :-)

[18:59] <lizmat> hankache: but that would be pretty clear from the source, no?

[18:59] <perlpilot> s/ong/on/

[18:59] *** donaldh left
[18:59] <hankache> lizmat yes

[18:59] <hankache> hello win32

[18:59] <perlpilot> win32: greetings

[18:59] <hankache> lizmat https://github.com/hankache/perl6intro

[18:59] <lizmat> hankache: I was more thinking along: clone the english version, and then what ?

[18:59] <win32> hankache>  , perlpilot thnx =D

[18:59] <perlpilot> oops, I'm late for a meeting 

[18:59] <win32> what upz .

[18:59] <timeless> perlpilot: ok, and presumably the steps for making the html are easy? (and don't require perl6)?

[18:59] <timeless> if so, i might send a pr for /something/

[19:00] <literal> enum die_faces ("⚀".."⚅"); say die_faces.enums

[19:00] <literal> m: enum die_faces ("⚀".."⚅"); say die_faces.enums

[19:00] <win32> who have for spend a short time for me =D

[19:00] <camelia> rakudo-moar 30b33e: OUTPUT«WARNINGS for /tmp/E2AKgn89kz:␤Useless use of ".." in expression "\"⚀\"..\"⚅\"" in sink context (line 1)␤Map.new(("⚀" => 0,"⚁" => 1,"⚂" => 2,"⚃" => 3,"⚄" => 4,"⚅" => 5))␤»

[19:00] <lizmat> hankache: ah, RTFM  :-)

[19:00] <lizmat> hankache: will do!

[19:00] <literal> how can I do this without the warning?

[19:00] <hankache> lizmat create a new file nl.perl6intro.adoc

[19:00] <lizmat> ack, gotcha

[19:01] <lizmat> hankache: should I do a PR or do you want to give me a commit bit?

[19:01] <hankache> lizmat: i'll give you commit

[19:01] <TimToady> ooh, a useless use of useless use bug :)

[19:02] <hankache> hiya TimToady

[19:02] <win32> i wanna to get a code read a file Answer questions , questions its format > NY |New york end msg to # channel.

[19:02] <win32> who can help me! thanks u all

[19:02] <lizmat> hankache: cool

[19:03] *** labster left
[19:04] <TimToady> m: constant tmp = "⚀".."⚅"; enum die_faces (tmp.list); say die_faces.enums   # one workaround

[19:04] <camelia> rakudo-moar 30b33e: OUTPUT«Map.new(("⚀" => 0,"⚁" => 1,"⚂" => 2,"⚃" => 3,"⚄" => 4,"⚅" => 5))␤»

[19:05] <literal> difference being that now they're numbered 0 to 5 :)

[19:05] <timeless> ok, stupid question...

[19:05] <literal> oh wait, so was my solution

[19:05] <hankache> lizmat: I added you as collaborator.

[19:05] <timeless> are the t/*.t files in perl6/doc supposd to pass?

[19:05] <lizmat> hankache++

[19:05] <timeless> s/supposd/supposed/ :(

[19:06] *** tbrowder left
[19:07] *** FROGGS joined
[19:08] *** TEttinger joined
[19:08] <timeless> also, anyone here familiar w/ the trig stuff?

[19:08] * timeless is reading doc/Type/Cool.pod and is rather puzzled

[19:08] * timeless hasn't really played w/ trig in nearly 2 decades ...

[19:09] * timeless decides it's just wrong and moves on

[19:10] <masak> heh, if you read Cool.pod and your reaction was "trig", then maybe the focus of that document is a bit skewed... :)

[19:11] <TimToady> literal: testing a fix for the bogus warning

[19:11] <masak> timeless: I'm familiar with the trig stuff. heck, you could probably throw me a cosecant and I'd know what to do with it ;)

[19:11] <literal> TimToady: nice

[19:11] <timeless> masak: here's the text from the pod. https://www.irccloud.com/pastebin/9sDnbaqM/

[19:11] <timeless> you mentioned `cosecant` which is something i recognize

[19:12] <timeless> am i right to believe that the pod just doesn't know how to spell cosecant?

[19:12] *** yqt joined
[19:13] <masak> timeless: yes, you are

[19:13] <timeless> awesome! thanks

[19:13] *** FROGGS left
[19:13] * timeless will arrange for a pr eventually

[19:13] <timeless> sorry, i was worried my trig knowledge was rotting ...

[19:15] *** FROGGS joined
[19:15] <timeless> masak: funnier one

[19:15] <timeless> https://en.wikipedia.org/wiki/Trigonometric_functions#Etymology

[19:15] <timeless> is `cotangens ` there intentional?

[19:16] <lizmat> sounds like a Dutchism

[19:16] * timeless goes to read OED

[19:16] <timeless> interesting, apparently it was once spelled that way in https://hal.inria.fr/inria-00543938/document

[19:17] *** darutoko left
[19:17] <timeless> i think this is perhaps old-french

[19:17] <masak> it'd be "cotangens" in Swedish too

[19:17] <timeless> Descriptio Canonis.

[19:18] <masak> oddly enough, that didn't even cross my mind as I read it in the paste and crossed it off as being Wrong in English :)

[19:18] * timeless shrugs

[19:18] <timeless> I didn't specialize in romance languages

[19:18] <timeless> for all i know this is actually Latin

[19:19] * timeless isn't used to seeing æ

[19:19] <timeless> anyway, i'm going to suggest enforcing the English spelling, since the document is in English and it references the English wikipedia which almost* exclusively uses the English spelling...

[19:19] *** rurban_ left
[19:21] *** Ven joined
[19:21] <[Coke]> timeless: yes, pleas.

[19:21] <[Coke]> *e

[19:22] <timeless> btw, do you prefer en-us or en-gb?

[19:22] <timeless> for a large project, i'm tempted not to enforce since the last thing i need are complaints over minor things

[19:22] <[Coke]> in general, we lean towards -us

[19:22] <timeless> but i can enforce

[19:22] <[Coke]> but I don't think we'd mind either.

[19:22] <mst> *I* prefer en_GB. However, en_US is probably the correct answer.

[19:22] <mst> having spent a year or so using QBASIC during the day and BBC BASIC at night

[19:23] <mst> I am already quite sufficiently traumatised by varying spellings of COLOUR

[19:23] <timeless> heh

[19:24] <win32> i wanna to get a code read a file Answer questions , questions its format > NY |New york end msg to # channel. ^_^

[19:24] <hankache> What do you mean en_us? There's only one English and that is her Majesty's ;)

[19:24] <timeless> hankache: having read en-in amongst others, i must disagree

[19:25] <timeless> and i blame her Majesty's relatives for that

[19:25] <timeless> =b

[19:25] <b2gills> Just imagine that the en in en_us stands for something other than the word english

[19:25] <masak> yes, en_US is the correct answer. it's always the correct answer, unless your shop is so overwhelmingly British-speaking that it'd be silly to do otherwise *and* you don't expect contributions/patches from the open-source world.

[19:25] <hankache> :p

[19:26] <huf_> there are more americans. they're easier to hit. i mean, the target is easier to hit.

[19:26] <huf_> i mean... oh dear

[19:26] <mst> huf_: except when you give americans weapons they usually manage to shoot the nearest british soldier instead

[19:26] * b2gills .oO( many of them are overweight )

[19:26] <hankache> huf_ haha

[19:27] <huf_> mst: cos you eejits keep going near them

[19:27] <mst> how to avoid being hit by the US army: (1) stay away from the british forces (2) hide in a urinal

[19:27] <timeless> fwiw, the doc's spelling error ratio is actually quite tolerable

[19:27] * timeless is in the h's, whereas one project hit 200

[19:27] <huf_> mst: or really, just 1) adopt rincewind tactics

[19:30] <hankache> is it bad if you mix both en_us and en_gb in your writing? English being my 3rd language

[19:30] <timeless> hankache: yes

[19:30] <timeless> for various reasons

[19:30] <timeless> 1. it means you don't know how to use a spell checker

[19:30] <timeless> (i.e. it just makes you look bad)

[19:31] <timeless> 2. it causes cognitive dissonance for anyone reading it

[19:31] <mst> c. it brutalises people and makes them turn a funny color

[19:31] <timeless> basically, your word processor and browser both have spell checkers, so there's very little excuse not to let one or the other help you out

[19:31] * timeless is using irccloud, so the browser is the spell checker here

[19:31] <huf_> i dont think i'd notice it :)

[19:31] <mst> I turn all spell checkers off

[19:32] <mst> and my word processor is ex-vi, which doesn't really have one

[19:33] <timeless> mst: for this exercise, my primary spell checker is /usr/share/dict/words

[19:33] <hankache> timeless this is not a spell checker issue. For example I like to write color instead of colour for a reason that i ignore. It feels more natural. But for other words it may be the opposite

[19:33] *** labster joined
[19:33] <timeless> the secondary is my brain, the the tertiary is google-search-suggest

[19:33] <mst> I agree with proof reading

[19:34] <mst> I agree with spelling tests

[19:34] <mst> I do not agree with the 'very little excuse not to use a spell checker while writing' part

[19:34] <timeless> ah, fair enough

[19:34] <timeless> as long as what you publish has been checked, i don't care if you check-as-you-go or check-before-you-post

[19:34] <timeless> the point is that you have the ability to get-it-checked for minimal cost

[19:35] <mst> but generally I proofread and then publish

[19:35] *** donaldh joined
[19:35] <huf_> hankache: yeah, i have mixed spellings too :)

[19:35] <mst> since I'm as worried about 'wrong valid word' problems as speling erors

[19:35] <huf_> a base of american with weird spots of uk

[19:35] *** ufobat left
[19:35] <hankache> huf_ exactly 

[19:37] <timeless> doc/Language/quoting.pod:=head2 X<Heredocs: :to|qoute,heredocs :to>

[19:37] <timeless> please say that `qoute` should just be `quote` and that i'm not missing some perl6 knowledge...

[19:38] *** grondilu joined
[19:39] *** cdg left
[19:39] <[Coke]> almost certainly quote

[19:40] <[Coke]> timeless: https://github.com/rakudo/rakudo/search?utf8=%E2%9C%93&q=qoute

[19:40] <timeless> thx

[19:40] <mst> hankache: if that's for IRC or for your blog, I, personally, give no fucks

[19:40] <[Coke]> (so, not some weird hidden thing)

[19:40] <mst> thx OTOH is a sign of illiteracy in all languages in my head

[19:41] <timeless> [Coke]: shortcircuits -- would you write that as one word or two?

[19:41] <timeless> (and would you accept the alternate)

[19:41] <mst> (pet hate)

[19:41] <mst> hankache: if it's for an OSS project, whatever spelling they're already using is preferred

[19:41] <mst> of course, I sometimes write method names in en_US and docs in en_UK

[19:42] <timeless> mst: tmux had stuff like that

[19:42] <timeless> it's a minor pita when trying to write fixes

[19:43] <timeless> but, i understand it

[19:43] <timeless> and don't object to it in general

[19:43] *** buharin left
[19:43] <timeless> (it just makes the task i'm doing now slower)

[19:44] <mst> timeless: if you find a project of mine like that, a patch to USify all the spelling with a test to make sure I don't backslide wouldn't upset me, but I doubt I'd be bothered doing so myself

[19:44] <timeless> :-)

[19:45] <timeless> doc/Language/glossary.pod:=head2 Thnunk

[19:45] <timeless> um.... i know about thunks, ... but thnunks?

[19:45] * timeless decides it's just a typo

[19:46] * mst would think so, yes

[19:46] <masak> it's like thunks, but with nunchucks

[19:47] <japhb> Those would make quite a thunk when they hit you, I would think ...

[19:48] <timeless> doc/Language/testing.pod:# tests requiring functional wombling

[19:48] <timeless> is wombling a technical term? (it wasn't in the glossary, and i don't know it)

[19:48] <TimToady> fix pushed for literal++

[19:48] <timeless> (note: i don't expect to change it, it's just odd)

[19:50] <timeless> only 23 changes (not counting checking for en-gb)

[19:50] <timeless> not bad

[19:51] <hankache> m: { our $var = 'Text'; say $var.WHERE; }; { our $var = 123; say $var.WHERE; }; say ::('$var').WHERE;

[19:51] <camelia> rakudo-moar 965ca6: OUTPUT«139708347882696␤139708348067648␤139708348067648␤»

[19:51] <hankache> should this be allowed? ^^

[19:54] <stmuk_> wombling probably means tidying 

[19:56] *** brrt joined
[19:57] <masak> hankache: yes. that's correct.

[19:57] <masak> m: { our $var = "OH HAI" }; { our $var; say $var }

[19:57] <camelia> rakudo-moar 965ca6: OUTPUT«OH HAI␤»

[19:58] <timeless> masak: hrm, `rubbish` is en-gb

[19:58] <masak> the value gets shared through the underlying package scope, but it's two distinct variables.

[19:58] <timeless> stmuk_: i'm trying to read doc/Language/testing.pod and Womble+Wombling are used a lot

[19:58] <timeless> but i can't figure out what it is

[19:59] <timeless> because of the rubbish, i'm somewhat confident that womble is also en-gb

[19:59] <timeless>     class GreatUncleBulgaria is Womble {}

[19:59] *** rindolf left
[20:00] <hankache> masak thanks

[20:00] <mst> o/ Underground, overground, wombling free / The Wombles of Wimbledon Common are we o/

[20:00] <timeless> mst: see, that's *definitely* not in my corpus

[20:01] <timeless>     class Tobermory is Womble does Invent {}

[20:01] <mst> timeless: see enwp.org/Wombles

[20:01] <timeless> is Tobermory also en-gb? 

[20:01] <mst> that's a name of a character

[20:02] <mst> https://en.wikipedia.org/wiki/The_Wombles#Known_Wombles

[20:02] <timeless> mst: thx

[20:02] *** buharin joined
[20:02] <mst> timeless: AAAAAAAAAAAAAAAAAAAA

[20:02] * timeless didn't know about enwp.org either, neat

[20:02] <b2gills> hankache: The GC system uses a copying GC for the nursery so short lived objects tend to move around a fair bit even in the same scope

[20:03] <timeless> > Although Wombles supposedly live in every country in the world, Beresford's stories are concerned with the lives of the inhabitants of the burrow on Wimbledon Common in London, England.

[20:03] * mst can live with 'ty', or the en_UK 'ta', but please don't use 'thx' at me, that particular not-even-an-abbreviation is like fingernails down a blackboard to me :P

[20:03] *** win32 left
[20:03] <timeless> mst: sorry

[20:03] <timeless> i rarely abbreviate, that's one of my few exceptions, but i can avoid it :)

[20:03] <mst> it's ok, I know it's weird, but AAAAAAAAAAAAAAAAAAA

[20:03] <timeless> alias as: `:-)`

[20:03] <DrForr> . o ( 1138? )

[20:03] <timeless> 😃

[20:04] <timeless> ... yeah, they definitely didn't seem to travel the world

[20:04] <mst> timeless: the think that annoys me is it isn't even a proper abbreviation due to the x

[20:04] <timeless> mst: interesting

[20:04] <mst> but, yeah, I'm not claiming I'm entirely rational about this

[20:04] <timeless> oddly, i'm not a big fan of it either

[20:04] <timeless> i wonder when my brain internalized it

[20:04] <mst> 'ty' doesn't bug me, 'tks' doesn't bug me, 'ta' doesn't bug me

[20:04] <timeless> `interned`

[20:05] <mst> but 'thx' makes me imagine a 12 year old typing on a nokia candybar

[20:05] <timeless> `ty` and `tks` bug me

[20:05] <timeless> `ta` i could live w/

[20:05] <mst> I'm not *fond* of 'ty' or 'tks' but I don't actively hate them like 'thx'

[20:05] <hankache> b2gills thanks

[20:05] <timeless> mst: did Sesame Street make it across the pond?

[20:05] <mst> yes

[20:06] <mst> there's a reason Nicholas Clark announced RC releases when he was pumpking with 'Vun. Ha! Ha! Ha!' etc.

[20:06] <timeless> would it be a reasonable replacement for the Wombles in the .pod?

[20:06] * timeless doesn't know `nicholas clark` or `pumpking`

[20:06] * timeless also hasn't followed perl6

[20:06] <mst> pumpking is the release manager for perl5

[20:06] <mst> and general leader of p5p

[20:07] <timeless> ah

[20:07] *** cdg joined
[20:07] <timeless> i think i mostly used p5.2..5.6 occasionally 5.8 (?)

[20:07] <b2gills> hankache: If you want more information https://www.infoq.com/presentations/terminology-garbage-collector / http://jnthn.net/papers/2013-bs-secret-life-of-gc.pdf

[20:07] <mst> I started off on 5.005_03

[20:08] <timeless> yeah 5.005_* feels very familiar

[20:08] <mst> also, I feel like the wombles have a certain whimsicality that's very in keeping with the perl6 ethos

[20:08] <timeless> well

[20:08] *** cdg left
[20:08] <timeless> if you want them to stick around, then i think they need to be added to the glossary

[20:08] <b2gills> I didn't even hear about Perl until 5.6 ( I was on DOS and Windows )

[20:09] *** cdg joined
[20:09] <mst> timeless: I would suggest a link to the wikipedia page?

[20:09] <timeless> mst: ok, but straight into the pod that's using them?

[20:09] <mst> I, personally, don't really see a problem with that, but would not argue if other people felt that was insufficient

[20:10] <literal> is there a method or idiom to do this in a single expression? my %counts; %counts{$_}++ for @things;

[20:10] <b2gills> @things.Bag

[20:10] <masak> %counts{@things}>>++;

[20:10] <masak> what b2gills said :)

[20:10] <lizmat> b2gills++

[20:11] <literal> oh right, forgot about bags

[20:11] <mst> but I do think "preserving whimsicality" is something we should value

[20:11] <masak> I often forget about bags

[20:11] <lizmat> bag @things

[20:11] * masak .oO( I need you to... take care of @things, see? capishe? )

[20:11] <lizmat> literal: also note that the keys in a bag are not stringifications, but the actual objects

[20:11] <literal> yeah

[20:12] <DrForr> bag @your-face; # Not that anyone here remotely qualifies, save myself )

[20:12] <DrForr> s/.$/:)/

[20:13] * timeless frowns

[20:14] <timeless> ok, so um... apparently i need perl6 in order to make the docs

[20:14] <mst> rakudobrew to the rescue?

[20:16] *** colomon left
[20:16] * Xliff ♥ rakudobrew

[20:17] <timeless> Xliff: https://design.perl6.org/S19.html#Removed_Syntactic_Features

[20:18] <timeless> there's no way for me to get the anchor for that section on that page *grrr*

[20:19] *** girafe joined
[20:21] <Xliff> S19:Removed Syntactic Features

[20:21] <synopsebot6> Link: http://design.perl6.org/S19.html#Removed_Syntactic_Features

[20:21] *** donaldh left
[20:22] * Xliff pokes timeless -- "Werked fer meee!"

[20:22] <Xliff> <mst> I am already quite sufficiently traumatised by varying spellings of COLOUR

[20:22] <timeless> Xliff: load the link, is there an anchor you can hover over to get the link for that section?

[20:22] * timeless doesn't see one

[20:22] * Xliff hands mst a pint of his favourite beer.

[20:23] <Xliff> timeless: The link synopsebot6 just posted doesn't work for you?

[20:23] <timeless> wrong problem

[20:23] <timeless> say i'm on that page and want to get a link to a subsection w/o going to the toc

[20:25] <Xliff> ooooooo

[20:25] * Xliff finally understands.

[20:25] <timeless> :-)

[20:25] <Xliff> You'd be SOL. But why would you not use the TOC?

[20:26] <timeless> because i'm usually scrolling through a document, finding a problem and wanting to point people to it

[20:26] <timeless> having to jump to the top, try to figure out what section it is...

[20:26] <timeless> => very painful

[20:26] <Xliff> Yeah. The layout of those pages would need to be slightly changed to fix that problem.

[20:26] <timeless> (not necessarily a problem, i could be trying to point to a solution)

[20:27] *** hankache left
[20:27] <timeless> anyway, i'm willing to try to fix the 5to6 page, but i really want someone else to fix the design pages to at least be no more annoying than the 5to6 page

[20:29] <Xliff> I don't know of a good solution. Leave the section headers as they are but have a "→" link placed unobtrusively nearby that is a link to the current section? 

[20:29] *** cdg left
[20:29] <Xliff> But then... how do you make that intuitive?

[20:30] *** AlexDaniel joined
[20:33] <timeless> Xliff: in the main thing if you hover over a section it gets an :after() thing

[20:33] <b2gills> timeless: if you right click => inspect on Chrome you can find out the name of a link

[20:33] <timeless> b2gills: i'm effectively a retired browser develoepr

[20:34] <timeless> s/epr/per/

[20:34] <timeless> i could do lots of things. i shouldn't have to.

[20:34] <timeless> and these two sites should behave similarly, that one makes it easy to get anchors and the other doesn't is disappointing

[20:34] <timeless> and please don't ask me to do the work, i've just sent 3prs which is well over my average quota

[20:37] <mst> oh, yeah, that's been a thing with POD rendering forever and a day

[20:38] * mst does ctrl-click, ctrl-tab, right click ToC entry and copy, ctrl-W without thinking now

[20:38] <mst> but the fact that doesn't annoy me is blatantly stockholm syndrome

[20:38] <timeless> mst: at this point, what bothers me is consistency, there's clearly a better engine being used for doc.perl6.org than design.perl6.org

[20:39] *** ocbtec left
[20:39] * timeless appreciates that mst is aware he's suffering from stockholm syndrome :)

[20:39] <mst> I suspect that design.perl6.org is using one of the common POD -> HTML renderers on CPAN for perl5

[20:40] <mst> I'm also now wondering why the fsck POD renderers don't do a sensible thing with the headers and make them links-to-self

[20:40] <timeless> yay!

[20:41] <timeless> thanks for feeling my pain

[20:42] *** molaf left
[20:43] *** kaare_ left
[20:43] <mst> huh

[20:43] <mst> https://metacpan.org/pod/Safe::Isa#SYNOPSIS

[20:43] <mst> timeless: so, if you mouse over the word SYNOPSIS you can see a little link thing

[20:43] <mst> I wonder if one could port that to design.

[20:43] <stmuk_> the design pages aren't currently maintained in terms of technical content so I don't think tidying up the web design is worth it

[20:44] <timeless> mst: https://doc.perl6.org/language/5to6-nutshell#Whitespace

[20:44] <timeless> if you hover over a header there, you get a :after() section mark

[20:44] <timeless> §

[20:44] <mst> timeless: aha

[20:44] <timeless> personally, the metacpan.org :before() is better

[20:44] <mst> timeless: well, at least we've found you half a solution

[20:44] <timeless> because it's where I expect it to be!

[20:44] <mst> in that now you can be less annoyed and not have to go up to the ToC ;)

[20:45] <timeless> anyway, i don't care if you copy the doc version or the metacpan version

[20:45] <mst> oh, I see, that's doc. and not design. sorry

[20:45] <mst> gah

[20:45] <timeless> but please don't leave design as is :)

[20:46] <timeless> stmuk_: so... the problem is that doc. links to design.

[20:46] <timeless> if you make design. not reachable from the web (doc. + google) then i wouldn't care

[20:46] <timeless> but, ...

[20:46] *** brrt left
[20:49] <mst> timeless: if you remind me another day, I will try and see if it's a ten minute fix

[20:50] <mst> if you don't remind me, I will try and remember to look another day anyway but no guarantees

[20:50] <timeless> mst: ok

[20:50] <timeless> we'll see, i'm fairly flighty, but i should be able to return at least once

[20:50] <timeless> probably when someone accepts a pr or 2

[20:58] <dalek> Heuristic branch merge: pushed 23 commits to doc by stmuk

[20:59] *** zakharyas joined
[21:00] *** buharin left
[21:01] *** rurban joined
[21:02] *** rurban_ joined
[21:02] <stmuk_> I've merged the spelling fixes .. less sure about the rest

[21:02] <stmuk_> maybe "wombling" should go in the glossary

[21:03] <stmuk_> glossary being the special case maintained bit of design. :)

[21:03] *** pullphinger left
[21:05] * timeless goes to add NYI to the glossary

[21:06] <literal> what should I do if I want rotor() but with overlapping combinations? so (a b c d) => (a b), (b c), (c d)

[21:08] <timeless> err

[21:08] <timeless> what the heck?

[21:09] <timeless> someone told me NYI was in the design docs

[21:09] <timeless> but... i don't see it

[21:09] <retupmoca> m: say ('a'..'d').rotor(2 => -1).perl;

[21:09] <camelia> rakudo-moar 072a6c: OUTPUT«(("a", "b"), ("b", "c"), ("c", "d")).Seq␤»

[21:09] <AlexDaniel> OMG, can we squish such commits next time?

[21:09] <literal> retupmoca: oh, I should have read the rotor() docs better

[21:10] <timeless> AlexDaniel: fwiw, the reason i don't squish myself is to let people exclude things, but i don't mind if they squish my commits when pulling them in

[21:10] <AlexDaniel> timeless: that totally makes sense, I don't mind that at all

[21:10] <AlexDaniel> but why was it merged as is… come on, 22 commits!

[21:11] <timeless> 22 is nothing :)

[21:11] <timeless> https://github.com/pwsafe/pwsafe/pull/106

[21:11] <timeless> try that :)

[21:12] * timeless tries to figure out the glossary

[21:12] <timeless> there are things in the glossary with no content...

[21:12] <timeless> https://doc.perl6.org/language/glossary#Cool

[21:12] <timeless> https://doc.perl6.org/language/glossary#Enum

[21:13] <AlexDaniel> timeless: the idea is that somebody is going to write the content for these…

[21:13] <AlexDaniel> or something

[21:13] <timeless> ...

[21:14] <[Coke]> placeholders. "yes, we realize this is a confusing term"

[21:14] <timeless> i do a couple of gimmes, but, if you're in that deep, i'd be open to contracting to fix the rest

[21:14] <AlexDaniel> timeless: well, that's how it always been. Somebody adds an entry to S99, somebody else writes the definition

[21:14] <[Coke]> I would argue that if you can search for the thing in docs.perl6.org, then you can remove the placeholder in S99

[21:15] <Hotkeys> Is there enum documentation hidden somewhere

[21:15] <AlexDaniel> yeah, nuke S99

[21:15] <Hotkeys> Or will I have to look at the specs

[21:15] <AlexDaniel> Hotkeys: yeah. It is hidden here: https://github.com/perl6/doc/issues/87

[21:16] <Hotkeys> Ah I see

[21:16] <AlexDaniel> ah, looks like gfldex++ fixed it

[21:17] <timeless> AlexDaniel: do you want me to link to the type system entry?

[21:17] <timeless> i can do that i suppose

[21:18] <AlexDaniel> timeless: I think that it is better than an empty entry :)

[21:18] <timeless> although, tbh, i'd expect the glossary to have at least a one sentence entry beyond linking to the typesystem thing

[21:18] <AlexDaniel> something is better than nothing

[21:18] <timeless> ok, lemme see

[21:19] * timeless wonders how the docs link to other files...

[21:20] <AlexDaniel> yay for using a spell checker on the whole thing! timeless++

[21:20] <timeless> 😃

[21:20] <AlexDaniel> Tooolbar! :)

[21:20] <AlexDaniel> Hilites :D

[21:20] <timeless> AlexDaniel: fwiw, the error count for per6 doc was really low, so your contributors are pretty good

[21:21] <timeless> (or you just are missing too much content)

[21:21] <timeless> pwsafe was pretty bad

[21:21] <AlexDaniel> my contributions huh?

[21:22] <timeless> "your contributors" = everyone contributing to perl6 doc

[21:22] <timeless> not "your contributions" :)

[21:22] <AlexDaniel> :)

[21:22] * timeless is a very careful wordsmith

[21:22] <AlexDaniel> “our” contributions then!

[21:24] <AlexDaniel> miminize :)

[21:25] *** donaldh joined
[21:25] * timeless is it ok for me to copy stuff over from design?

[21:26] <timeless> https://design.perl6.org/S99.html#container

[21:26] *** _4d47 joined
[21:26] <timeless> of course, i can't copy over container

[21:28] <AlexDaniel> timeless: https://github.com/perl6/doc/commit/1aacfb0716838302fcc33275182156fbdb01d36e

[21:28] <AlexDaniel> timeless: that's how it was created

[21:28] <timeless> AlexDaniel: ok

[21:29] <timeless> hrm

[21:29] <timeless> is the pod thing smart enough to handle L<#twigil> v. =head1 Twigil ?

[21:32] <AlexDaniel> timeless: if it is on the same page, then yeah. It has to be #Twigil though

[21:33] <timeless> it's #twigil (lowercase)

[21:33] <timeless> AlexDaniel: should i just try to pull up the current pod for s99 and copy over the missing items?

[21:33] <timeless> it seems silly for me to manually try to recreate them

[21:33] <timeless> i mean, i can be selective about whether or not to pull them over

[21:34] <timeless> but, what you have now is ... unfortunate

[21:34] <lizmat> timeless: copying *to* or *from* S99 ?

[21:34] <AlexDaniel> timeless: right, and it doesn't work

[21:34] <timeless> from

[21:34] <lizmat> well, I did some work in that area a while ago

[21:34] <timeless> AlexDaniel: ok... i can fix that one

[21:34] <lizmat> wouldn't mind seeing S99 go completely

[21:34] <AlexDaniel> timeless: so yeah, change it to #Twigil. Also see this one: https://github.com/perl6/doc/issues/561

[21:34] <timeless> (and getting a tool to identify similar ones shouldn't be hard)

[21:34] *** Ven left
[21:36] *** Juerd joined
[21:36] <timeless> lizmat: so, lemme find the source for s99

[21:36] <lizmat> it lives in specs

[21:36] <timeless> i think merging s99 over ito doc/glossary seems reasonable

[21:36] <lizmat> yeah, that was the plan

[21:36] <timeless> thx

[21:36] <lizmat> timeless++

[21:37] <timeless> (py)[timeless@gcc2-power8 perl6]$ hg clone git://github.com/perl6/specs

[21:37] * timeless waits

[21:38] *** wamba left
[21:39] *** spider-mario joined
[21:40] <AlexDaniel> hg huh!

[21:40] *** raiph left
[21:40] <timeless> my toolchain/prefs are hg :)

[21:40] <timeless> the docs are better :-)

[21:41] <tadzik> computer, messages

[21:41] <yoleaux> 15:06Z <azawawi> tadzik: Please take a look at https://github.com/tadzik/panda/issues/316

[21:41] <tadzik> hrm

[21:42] <timeless> perl -ne 'next unless /=head|L<#.*>/; if (/=head/) {s/(=head\d+) (.*)/$2 $1/; print;next}; print "$1\n" for /L<(#[^>]*)>/' doc/Language/glossary.pod|sort|less

[21:42] *** raiph joined
[21:42] <timeless> AlexDaniel: that's what i'll use to find the mismatches/missings

[21:42] <AlexDaniel> timeless: run it over all files

[21:43] <timeless> ok, but for now, glossary, i want to take things baby-steps

[21:45] <AlexDaniel> timeless: did I already mention that I love you?

[21:45] <lizmat> timeless++

[21:45] <lizmat> good night, #perl6!

[21:45] <timeless> good night lizmat 

[21:45] <timeless> oh brother

[21:46] <timeless> -=head Adverbial Pair

[21:46] <timeless> +=head adverbial pair

[21:46] <timeless> well, that explains why the links on doc/glossary were bad

[21:46] <timeless> someone got cute and capitalized things in the glossary at some point

[21:47] * lizmat runs for cover

[21:47] <timeless> lizmat: if the build system didn't have a link checker, it isn't entirely your fault 

[21:47] <timeless> tooling should have saved you

[21:48] <AlexDaniel> timeless: well yeah, that's why #561 exists. But it does not check for links to the same page, as far as I can see

[21:49] <AlexDaniel> timeless: currently the problem is that we have a bunch of broken HTML, so the output of checklink is not as useful

[21:49] <AlexDaniel> timeless: but once that is solved it will be much easier to work on broken links :)

[21:51] * timeless nodes

[21:51] * timeless nods

[21:51] *** mr-foobar joined
[21:51] <timeless> ok, i think i'm going to do this differently

[21:51] <timeless> i suppose i should look for a pod parser, but i don't think i will

[21:51] <AlexDaniel> timeless: also, if you want to prevent such problems you can add a test

[21:51] <timeless> AlexDaniel: yeah, but i don't speak any particular .t languages

[21:52] * timeless hasn't spoken perl .t in >5 years

[21:52] <dj_goku> timeless: so you have to learn then. :D

[21:53] <AlexDaniel> dj_goku: shh, better bring the candies. That guy is going to fix our docs

[21:53] <AlexDaniel> :)

[21:54] <dj_goku> I have been idling for ages sadly. sweet though.

[21:58] <timeless> my pod splitter https://www.irccloud.com/pastebin/YkqnFHd9/0.pl

[21:58] *** labster left
[21:58] *** labster joined
[21:58] <timeless> seems to work :)

[21:59] <timeless> (and no, that's not remotely perl6 friendly, i know, i already read the 5to6 page!)

[22:00] *** zakharyas left
[22:00] *** kid51 joined
[22:05] *** setty1 left
[22:09] *** cdg joined
[22:10] *** girafe left
[22:10] <timeless> oops

[22:10] * timeless needs to be a bit smarter about patching

[22:10] *** skids left
[22:14] *** firstdayonthejob left
[22:21] *** Sgeo_ joined
[22:30] *** raiph left
[22:30] *** raiph joined
[22:32] *** ptolemarch left
[22:34] *** RabidGravy left
[22:37] <Xliff> timeless++ # coz.....DOCS!

[22:37] *** rurban1 joined
[22:37] <Xliff> And I must crash.

[22:38] *** rurban left
[22:54] *** huggable left
[22:54] *** huggable joined
[22:56] *** donaldh left
[23:12] *** spider-mario left
[23:23] *** rurban_ left
[23:30] *** aries_liuxueyang left
[23:36] *** skids joined
[23:36] <timeless> ok, gang

[23:36] <timeless> is it camelia or Camelia ?

[23:37] <timeless> see the glossary pod for camelia https://www.irccloud.com/pastebin/eXo01pjj/camelia.glossary.pod

[23:42] *** rurban joined
[23:42] * timeless sighs

[23:43] <timeless> does the glossary get points for being circular?

[23:45] *** rurban1 left
[23:45] *** cdg left
[23:46] *** cdg joined
[23:48] <AlexDaniel> timeless: camelia is a bot

[23:48] <AlexDaniel> timeless: and Camelia is a butterfly

[23:48] <timeless> AlexDaniel: yes, so, lowercase or uppercase in the glossary?

[23:48] <AlexDaniel> timeless: https://raw.githubusercontent.com/perl6/mu/master/misc/camelia.txt

[23:48] <AlexDaniel> both

[23:48] <AlexDaniel> with different descriptions

[23:49] <timeless> ok

[23:50] *** rurban1 joined
[23:51] *** cdg left
[23:54] *** rurban left
[23:57] <AlexDaniel> timeless: it is probably not the most active time of a day here right now, so please don't worry if nobody answers your question :)

[23:58] <AlexDaniel> I should've been in the bed 3 hours ago too

[23:58] * timeless should have had lunch 8 hrs ago

[23:59] <timeless> fiddly and friends?

