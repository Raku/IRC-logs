[00:09] *** pyrimidine left
[00:11] *** AlexDaniel left
[00:13] *** japhb left
[00:20] *** travis-ci joined
[00:20] <travis-ci> Doc build passed. Zoffix Znet 'Trigger doc rebuild

[00:20] <travis-ci> https://travis-ci.org/perl6/doc/builds/185931890 https://github.com/perl6/doc/compare/ed76af6673f4...f15342ac60ed

[00:20] *** travis-ci left
[00:23] *** rindolf left
[00:31] *** japhb joined
[00:32] *** kaare_ left
[00:32] *** kaare_ joined
[00:33] *** TEttinger joined
[00:38] *** mr-fooba_ joined
[00:38] *** newbie1 joined
[00:39] *** stanley left
[00:41] *** zoosha_ joined
[00:42] *** nebuchadnezzar left
[00:42] *** nebuchadnezzar joined
[00:43] *** dgl joined
[00:45] *** mr-foobar left
[00:45] *** camelia left
[00:45] *** _28_ria left
[00:45] *** zoosha left
[00:45] *** yqt left
[00:45] *** dg left
[00:45] *** cgfbee left
[00:46] *** AndyBotwin left
[00:47] *** camelia joined
[00:48] *** ChanServ sets mode: +v camelia

[00:51] *** AndyBotwin joined
[00:57] *** khw left
[00:57] *** SmokeMachine left
[00:57] *** timotimo left
[01:02] *** wamba left
[01:04] *** cdg_ left
[01:05] *** cgfbee joined
[01:05] *** BenGoldberg joined
[01:07] *** khw joined
[01:07] *** SmokeMachine joined
[01:07] *** timotimo joined
[01:07] *** aborazmeh joined
[01:07] *** aborazmeh left
[01:07] *** aborazmeh joined
[01:09] *** Ben_Goldberg joined
[01:09] *** BenGoldberg left
[01:09] *** Ben_Goldberg is now known as BenGoldberg

[01:18] <dalek> doc: bf79e73 | (Zoffix Znet)++ | html/css/highlights.css:

[01:18] <dalek> doc: Do not use underlines in syntax highlights

[01:18] <dalek> doc: 

[01:18] <dalek> doc: On web, it's very confusing, as they make stuff look like links.

[01:18] <dalek> doc: review: https://github.com/perl6/doc/commit/bf79e736e6

[01:19] <notviki> The code highlight on docs is so pale :/

[01:19] <notviki> .oO( has it always been that way?.. )

[01:22] *** japhb_ joined
[01:22] <tony-o> Xliff: it *should* work with mysql, it did prior to me updating for joins - i'll update that README too

[01:24] *** rburkholder joined
[01:30] *** newbie1 left
[01:31] *** imcsk8 left
[01:32] <samcv> looks like the new highlighter on the docs is working ^_^

[01:32] <tony-o> Xliff: updated the readme with similar text to my response in that gist, i hope that clears up how that works a little bit

[01:33] <tony-o> Xliff: i also updated the example to make that '-and' relevant

[01:33] *** imcsk8 joined
[01:33] *** dayangkun joined
[01:33] *** Actualeyes joined
[01:33] <samcv> everyone can feel free to tweak the CSS as they wish, should be pretty easy going into developer tools on the browser and see what they are marked as

[01:34] <samcv> and if you want it named better (possibly more specific) just ask me or make a issue on the repo for the highlighter

[01:34] <samcv> regarding other things though.. Need to ask, with uniprop, there are some values that have multiple values

[01:35] <samcv> like Script_Extensions

[01:35] <samcv> basically uniproperty "Script" tells you what script it is, often times it may be "Common", but the script extensions tell you which languages use it, in case it's more than one language

[01:36] <samcv> so for things like regex we probably should use those values when matching scripts maybe? Or what are peoples thoughts

[01:36] <samcv> i have other things about other properties, but this is the most important one that I have noticed we don't have support for

[01:37] *** pyrimidine joined
[01:39] *** cpage left
[01:43] *** Ben_Goldberg joined
[01:43] *** BenGoldberg left
[01:44] *** Ben_Goldberg is now known as BenGoldberg

[01:44] *** cdg joined
[01:44] *** pyrimidine left
[01:49] *** cpage joined
[01:51] <dalek> doc: fa493eb | (Zoffix Znet)++ | html/css/highlights.css:

[01:51] <dalek> doc: Tweat new syntax highlights styles

[01:51] <dalek> doc: review: https://github.com/perl6/doc/commit/fa493eb70d

[01:52] <samcv> zoffix++

[01:53] <notviki> perl6.wtf update failed again: Attempt to divide by zero using div

[01:53] <notviki>   in block  at nqp/MoarVM/tools/parse_coverage_report.p6 line 167

[01:53] <notviki>   in sub MAIN at nqp/MoarVM/tools/parse_coverage_report.p6 line 137

[01:53] <notviki>   in block <unit> at nqp/MoarVM/tools/parse_coverage_report.p6 line 491

[01:53] <notviki> :(

[01:53] *** cdg left
[01:55] *** espadrine left
[01:55] <notviki> heh.... Now I wish it had died where the division happens and now where it prints the result :/

[01:55] <SmokeMachine> I'm sorry, I published too early... that wasn't on purpose...

[01:56] <SmokeMachine> I was trying to schedule...

[01:56] <notviki> SmokeMachine: when was it supposed to be published?

[01:56] <notviki> huggable: mu

[01:56] <huggable> notviki, nothing found

[01:56] <notviki> huggable: advent

[01:56] <huggable> notviki, https://github.com/perl6/mu/blob/master/misc/perl6advent-2016/schedule

[01:56] <SmokeMachine> notviki: tomorrow...

[01:57] *** Ben_Goldberg joined
[01:57] <notviki> SmokeMachine: um.. you're 2 hours late

[01:57] *** BenGoldberg left
[01:57] <notviki> :)

[01:57] *** Ben_Goldberg is now known as BenGoldberg

[01:57] <notviki> From what I've seen everyone publishes close to midnight UTC

[01:57] <notviki> m: DateTime.now.utc.say

[01:57] <camelia> rakudo-moar c42b6b: OUTPUT«2016-12-22T01:57:25.959344Z␤»

[01:57] *** dayangkun left
[01:57] <SmokeMachine> notviki: I thought I was 2 hours early...

[01:59] <notviki> :)

[02:00] *** pyrimidine joined
[02:01] <SmokeMachine> notviki: thanks!

[02:04] <notviki> wooo.. finally updated \o/ http://perl6.wtf/

[02:07] <timotimo> cool, all files are 0% covered :)

[02:07] <notviki> Are they?

[02:07] <timotimo> and the links aren't working because the :: make sit look like SETTING is the protocol

[02:07] <timotimo> and it's suggesting to xdg-open the url instead of navigating to it

[02:07] * timotimo has to go to bed very now

[02:08] <notviki> Oh crap

[02:08] <timotimo> it shows 100% ignored for every file :)

[02:08] <timotimo> but yeah. sleep.

[02:08] <notviki> Stupid Chrome was showing me the old version :(

[02:09] *** Ben_Goldberg joined
[02:09] *** BenGoldberg left
[02:09] *** Ben_Goldberg is now known as BenGoldberg

[02:22] *** Ben_Goldberg joined
[02:22] *** BenGoldberg left
[02:22] *** Ben_Goldberg is now known as BenGoldberg

[02:39] <BenGoldberg> notviki, The links on perl6.wtf point to things like "setting::src_core_AST.pm.coverage.html" ...

[02:46] *** teksteiner joined
[02:50] *** kalkin- joined
[02:54] <dalek> doc: 7c4af12 | samcv++ | html/css/highlights.css:

[02:54] <dalek> doc: Make variable names a little darker in the CSS

[02:54] <dalek> doc: review: https://github.com/perl6/doc/commit/7c4af12979

[02:54] *** kalkin-_ left
[02:54] *** kent\n joined
[02:57] <[Coke]> samcv: that is probably cached, no? probably need to add a ?v=1 or whatever to the layout template (like we did for JS)

[03:16] *** BenGoldberg left
[03:19] *** BenGoldberg joined
[03:28] <samcv> [Coke], where do I need to add that?

[03:28] <samcv> it may be cached. though refreshing after 15 minutes i saw the changes

[03:28] <samcv> in the template that includes the css right

[03:30] *** pyrimidi_ joined
[03:30] *** pyrimidine left
[03:31] <dalek> doc: 82b5daf | samcv++ | .gitignore:

[03:31] <dalek> doc: Add highlights/node_modules and **/npm-debug.log to .gitignore

[03:31] <dalek> doc: review: https://github.com/perl6/doc/commit/82b5dafb3f

[03:32] <[Coke]> template/head.html:<link type="text/css" href="/css/highlights.css?v=1" rel="stylesheet" />

[03:32] <[Coke]> I'd bump that to 2.

[03:32] <samcv> ok so bump it for every change?

[03:32] <samcv> cool.

[03:34] <dalek> doc: 24d71c9 | samcv++ | .gitignore:

[03:34] <dalek> doc: Add highlights/atom-language-perl6 to .gitignore

[03:34] <dalek> doc: review: https://github.com/perl6/doc/commit/24d71c9d38

[03:34] <dalek> doc: 2e6bf88 | samcv++ | template/head.html:

[03:34] <dalek> doc: Bump css version to 2

[03:34] <dalek> doc: review: https://github.com/perl6/doc/commit/2e6bf88c69

[03:37] <[Coke]> samcv++

[03:37] * [Coke] has a twitch stream up where they spent 45 minutes trying to get to the point where the host could play the PS4 game with his teammates.

[03:37] <samcv> looks like pod isn't highlighted. we can add that to the stylesheet later i guess

[03:38] <samcv> why so long

[03:38] <[Coke]> "who is the bigger fool, the streamer? or the fool who follows him?"

[03:38] <samcv> oh looks like some pod is already highlighting i guess

[03:38] <samcv> just not all of it

[03:38] <samcv> hahah

[03:39] <[Coke]> need update. connect. need DLC. switch to wife's account, reconnect. tripping over stuff all the way.

[03:39] <samcv> nice

[03:40] <[Coke]> .... and it's basically a pod-racing game. ugh. why am I subscribed to this? :)

[03:40] <samcv> haha

[03:42] <samcv> hmm not sure why this here: https://docs.perl6.org/language/objects#Type_Objects is highlighting as pod block code

[03:42] <samcv> maybe i should look at the source file. maybe something weird is in there

[03:42] <samcv> that i don't see on the website

[03:42] <[Coke]> Did zoffix remove the underscoreds?

[03:42] <samcv> yeah

[03:42] <samcv> this is only being wrong because it somehow thinks it's pod

[03:43] <[Coke]> samcv: the heading itself? or something under it?

[03:43] <samcv> so i'm going to check the pod6 file

[03:43] <samcv> to see if there's anything weird it may be passing to the parser

[03:43] <samcv> the whole block

[03:43] <samcv> that isn't highlighted both of those i can check the dev tools on chrome and shows it's pod block code

[03:44] <samcv> ohh yepppp!

[03:45] <samcv> it uses =for code :allow<B L> there.

[03:45] <samcv> it must be passing some of it through to the highlighter

[03:45] <samcv> i think so at least

[03:45] <samcv> i mean all the other parts that don't have pod directly above them are rendering fine

[03:48] <notviki> samcv: the code with bolds/italics had that glitch for ages before. It wasn't highlighted

[03:49] <samcv> so has it always been this way?

[03:49] <notviki> Since I was here, yes

[03:49] <samcv> i will try to change it from =for to be begin and end

[03:49] <samcv> idk if it will make a difference. not sure what it's actually passing through though

[03:50] <samcv> it's passing through some pod `=whatever` though. that's the only signal the highlighting grammar recognizes pod

[03:52] <dalek> doc: f3c7089 | samcv++ | doc/Language/objects.pod6:

[03:52] <dalek> doc: Change =for to =begin and =end code to try and get parts working

[03:52] <dalek> doc: 

[03:52] <dalek> doc: viki says that this was not working before either. The highlighting

[03:52] <dalek> doc: grammar is recognizing these sections as being Pod code blocks, which

[03:52] <synopsebot6> Link: http://doc.perl6.org/language/objects

[03:52] <dalek> doc: should only happen if it's sending part of the pod declaring lines to

[03:52] <dalek> doc: it.

[03:52] <dalek> doc: review: https://github.com/perl6/doc/commit/f3c7089199

[03:52] <samcv> well this may not do anything then

[03:53] <samcv> i'm not sure what magic it is trying to signal it's highlighted a certain way. maybe passing through pod, and then taking out the =for section?

[03:53] <samcv> could probably just remove those bold or whatever sections

[03:54] <samcv> not sure why it's using L< > parts inside the code though

[03:54] <samcv> when we have links for the same things before the code

[03:56] <samcv> notviki, did pygments highlight twigils differently than the rest of the variable? i don't remember

[03:58] *** noganex joined
[03:59] *** skids joined
[04:01] *** noganex_ left
[04:01] <dalek> doc: fcaad4c | samcv++ | / (2 files):

[04:01] <dalek> doc: Highlight traits like `rw`, `copy` etc. differently in CSS

[04:01] <dalek> doc: review: https://github.com/perl6/doc/commit/fcaad4ce60

[04:02] <samcv> This is so nice

[04:02] <samcv> being able to tweak individual elements of syntax on the site :D

[04:09] <dalek> doc: 4178d6e | samcv++ | / (2 files):

[04:09] <dalek> doc: Make the type traits not bold. Also forgot the semicolons in the CSS

[04:09] <dalek> doc: review: https://github.com/perl6/doc/commit/4178d6e673

[04:09] *** dantia joined
[04:19] <dalek> doc: 0ffb783 | samcv++ | / (2 files):

[04:19] <dalek> doc: CSS: Make quoted strings darker in color

[04:19] <dalek> doc: review: https://github.com/perl6/doc/commit/0ffb783c40

[04:28] *** aborazmeh left
[04:36] *** rburkholder left
[04:36] *** mr-fooba_ left
[04:43] <dantia> Is there a clean way to get the inode (number) of a file? (such as $inode = $datafile.IO.inode for example). Currently I have to spawn the "stat" command to achieve this.

[04:45] *** khw left
[04:46] <MasterDuke> dantia: don't think so. at least the string 'inode' isn't in the source anywhere

[04:47] <geekosaur> think stuff like that that is POSIX specific was deferred to the ecosystem. (and still missing there)

[04:48] <MasterDuke> https://github.com/cspencer/perl6-posix, but it's not very complete

[04:49] <TimToady> m: use nqp; say nqp::stat(".", nqp::const::STAT_PLATFORM_INODE)

[04:49] <camelia> rakudo-moar c42b6b: OUTPUT«273␤»

[04:50] <TimToady> is one way

[04:50] <samcv> TimToady, what do you think of what I just said in #perl6-dev? Curious about your input

[04:52] <TimToady> 1-to-many mappings are always hard, especially when unexpected

[04:52] <samcv> yeah

[04:53] <TimToady> some way of returning the most obvious one, then some way to get all of them explicitly, maybe

[04:53] <TimToady> where "obvious" may not be obvious

[04:53] <samcv> most obvious one... the Extensions script one... some have like 8

[04:54] <samcv> characters used in 8 different scripts

[04:55] <samcv> err actually the max is 17

[04:55] <samcv> just counted

[04:58] *** BenGoldberg left
[04:58] <dantia> nqp::stat is a good enough workaround. Thanks.

[04:59] <samcv> the Script category is basically the Primary, well some of them the script is 'Common' but it has a script extension designation

[05:00] <samcv> And I need to look more into it, but this bug i found https://rt.perl.org/Ticket/Display.html?id=130384 may need to be fixed by looking at the script property to make sure that we only combine them if they are the same script/script extension

[05:00] <samcv> where combining characters consume the ones they are next to, they consume quoting delimiters and things

[05:01] <samcv> cannot even compile because it thinks they are the same character

[05:09] *** r3m left
[05:14] *** r3m joined
[05:19] *** Cabanossi left
[05:21] *** Cabanossi joined
[05:21] *** Actualeyes left
[05:36] *** Actualeyes joined
[05:36] *** bwisti left
[05:42] *** mrbrklyn left
[05:48] *** bwisti joined
[06:00] *** skids left
[06:03] *** bwisti left
[06:05] *** dugword joined
[06:13] *** tardisx joined
[06:14] *** pierre_ joined
[06:18] *** Tonik joined
[06:18] *** perlawhirl joined
[06:19] *** pierre_ left
[06:20] *** perlawhirl left
[06:23] *** tardisx left
[06:25] *** LeCamarade joined
[06:26] *** bwisti joined
[06:26] <LeCamarade> Hello, #perl6. I have, in the past, had a problem when I load Web::App::Context. It has some old code in the library itself, not compatible with 6.Christmas. But I edit the file in Linux and continue in peace. Now I am on a Mac, and editing that file does not work.

[06:26] <LeCamarade> It seems that it runs off the precompiled version or something.

[06:27] <LeCamarade> However, I have deleted that precompiled file, and it still does not pick up the new library (whose line 11 I have modified).

[06:27] *** cibs left
[06:28] <LeCamarade> Moreover, it keeps referring to a problematic line 11 even when I have moved that line. So clearly the script is not picking up the file in the library, but some pre-compiled version. If I knew how to get it to reload, I could probably proceed from here.

[06:28] <LeCamarade> Short version: can I get my script to load the modified files instead of some precompiled ones of the library, which I think is the problem at present?

[06:29] *** cibs joined
[06:31] <dugword> Hey all, I'm brand new to perl6. Do I need to do something to get p6doc working? I have the p6doc command, but I get the same error every time I try to run it. I've installed with homebrew, the .dmg from rakudo.org and from source. Error: Use of Nil in string context

[06:31] <dugword>   in sub locate-curli-module at /Applications/Rakudo/share/perl6/site/resources/C3A18C4AD5209A1B226E53B2C22A5347E5AC4790

[06:33] <samcv> what command are you running to run p6doc?

[06:33] <samcv> just plain `p6doc`?

[06:33] <samcv> LeCamarade, what library

[06:34] <dugword> just `p6doc` brings up the help on how to use it. But if I try to look at docs for a module I get the error. E.g. p6doc p6doc 

[06:34] <samcv> oh Web::App::Context

[06:34] <samcv> try for another thing dugword 

[06:34] <samcv> than p6doc

[06:34] <dugword> Same error with p6doc JSON::Tiny

[06:34] <samcv> try for a module, not an application name

[06:35] <samcv> ok that one works for me hm

[06:35] <samcv> i get the same error you had for trying p6doc p6doc

[06:35] <samcv> how did you install p6doc?

[06:35] <dugword> with panda

[06:35] <dugword> panda install p6doc

[06:36] <samcv> kk

[06:36] <LeCamarade> The p6doc is normal; a call of `p6doc p6doc` gives me that error.

[06:37] <samcv> LeCamarade, so you force installed the module yes? did you install it, or is it in some directory somewhere

[06:37] <samcv> if you installed it, I would try to download the repository for it into a folder called 'lib', then at the start of the perl 6 script, add `use lib 'lib'`

[06:38] <samcv> dugword, are you sure you have JSON::Tiny

[06:38] <dugword> Yes, I have a script that is using it

[06:38] <samcv> ok

[06:38] <samcv> well.

[06:38] *** holli left
[06:39] <samcv> you can use to-json even if you don't have it installed due to uh. things

[06:39] <dugword> lol

[06:39] <samcv> because it's in rakudo but you're not supposed to use it anymore

[06:39] <dugword> I have: use JSON::Tiny at the top of the script if that matters

[06:39] <samcv> ok. that could error if it can't find it

[06:39] <dugword> is there a known working module I can install

[06:39] <dugword> to test p6doc against

[06:40] <samcv> uh try URL::Find

[06:40] *** thayne joined
[06:40] <LeCamarade> samcv I panda-installed it. This is what I always do. Then it predictably fails (the library has pre 6.c syntax). Then I modify the library file. Then it works on other systems. On this one, it does not even notice the mods.

[06:40] <samcv> ok

[06:41] <samcv> this is what you nede to do LeCamarade 

[06:41] <dugword> Yeah, that one works. Thank you

[06:41] <samcv> yay

[06:41] <samcv> i made that module so i know it works, i don't use p6doc that much

[06:42] <samcv> also dugword  and LeCamarade, Welcome to Perl 6 :D

[06:42] <LeCamarade> samcv Thanks!

[06:42] <dugword> I tried to install JSON::Tiny but it says it is already installed. I am assuming because panda/rakudo uses it? Is there I way I can re-install it so I have the docs?

[06:42] <samcv> ok you have git LeCamarade yes?

[06:42] <dugword> Yes thank you! Very excited. I <3 perl

[06:42] <LeCamarade> I have been working with P6 for a some months. My first Christmas with it is coming up.

[06:42] <samcv> git clone https://github.com/supernovus/perl6-web.git

[06:42] <LeCamarade> samcv So you are supernovus?

[06:42] <samcv> go into that folder and edit that file you want

[06:42] <samcv> no i didn't make that module

[06:43] <samcv> i made URL::Find

[06:43] <LeCamarade> Ah, okay. Only p6doc. Okay ...

[06:43] <dugword> I might have a lot of perl5 assumptions to unlearn though...

[06:43] <samcv> ok so clone that folder, go into it. and edit how you wish

[06:43] <samcv> then run `panda install .` and it will install from that folder as a module

[06:44] <samcv> LeCamarade, it can get tricky with perl 6 and modules, because it works with hashes

[06:44] <samcv> so you edit the file and i think unexpected things could happen since that's what it uses to refer to modules

[06:44] <samcv> the reason it uses hashes is because perl 6's module system was designed to allow multiple versions being used at once and also multiple module authors

[06:45] <samcv> dugword, the docs are generally pretty nice, or just ask and people here are usually nice :)

[06:46] <LeCamarade> The hashes are fine, since it points out which hashed name is to blame. However, it does not look at that file itself after it has pointed it out. If I move the offending line, it does not change the line count.

[06:46] <LeCamarade> Anyway, now I have done the above.

[06:46] <LeCamarade> Cloned and modified. I think panda install path/to/dir is what follows, right?

[06:46] * LeCamarade should run panda --help ...

[06:47] <LeCamarade> Hmm ... I do not see how to install from the cloned repo.

[06:48] <LeCamarade> samcv Oh, so if I run panda install from this directory everything will work?

[06:48] <LeCamarade> Hmm ... no workee.

[06:48] <samcv> LeCamarade, just type "panda install ."

[06:48] <samcv> if you are on linux

[06:48] <samcv> or mac

[06:49] * LeCamarade runs panda install .

[06:49] <LeCamarade> It seems to be working ...

[06:49] <samcv> . will install from the directory you are currently in

[06:49] <LeCamarade> samcv++ for that, so far ...

[06:49] <LeCamarade> Right.

[06:49] <samcv> you can specify other directories

[06:49] *** RabidGravy joined
[06:49] <samcv> interesting fun fact

[06:49] <samcv> perl 6 autogenerates help messages

[06:49] <samcv> and command line options

[06:50] <LeCamarade> Right. From MAIN's signature.

[06:50] <samcv> yea :)

[06:50] <samcv> is that cool or WHAT?

[06:50] <LeCamarade> I have a kinda-old web app I am trying to get running again.

[06:50] <LeCamarade> Cool indeed. But, you know, it is just Perl 6 being sane. Everything else is just _stupid_.

[06:51] <LeCamarade> Unfortunately, the Internet these days is touchy about such facts. But, yes, the other scripting languages are just stupid. Perl 6 is sane. The rest are not.

[06:51] <samcv> yes :)

[06:52] <samcv> i love Perl 6 :)

[06:52] <LeCamarade> Crap, samcv ! It works now. Yes!

[06:52] <samcv> yay

[06:52] <LeCamarade> samcv++

[06:52] <teksteiner> Good morning everyone

[06:52] <samcv> good morning

[06:54] <teksteiner> Another day of peeking a bit into Perl 6 :) wanted to learn a bit about Promises and concurrency, are there any sources with very basic examples you can recommend?

[06:55] <teksteiner> Besides the docs

[06:55] *** darutoko joined
[06:56] <teksteiner> https://docs.perl6.org/type/Promise I mean, not the docs as a whole

[06:56] <LeCamarade> There is a video by Jonathan that I highly recommend.

[06:56] <samcv> kuhm

[06:56] <samcv> i wrote some articles teksteiner that are pretty simple

[06:56] <samcv> i think they're a good intro

[06:56] *** bwisti left
[06:56] <samcv> and then you can see other things to learn more

[06:56] <samcv> here https://cry.nu/perl6/multithreading-in-perl6/ and https://cry.nu/perl6/multithreading-in-perl6-part2/

[06:57] <samcv> they're not very long, and get you introduced well I think without being really wordy

[06:57] <LeCamarade> These things, the concurrency primitives, are some of the best-designed pieces of _engineering_ currently available to mere mortals.

[06:57] <LeCamarade> https://www.youtube.com/watch?v=JpqnNCx7wVY

[06:57] <LeCamarade> http://www.jnthn.net/papers/2015-yapcasia-concurrency.pdf

[06:58] <teksteiner> Thank you! Gonna look at them

[06:58] <samcv> i would recommend both of them, and then i'm sure Jonathan goes more into detail about it 

[06:58] <samcv> cool :)

[06:58] <samcv> let me know if you have any questions or i should explain something better

[06:58] <LeCamarade> The thing is that concurrency should be approached with a sound education. Most people (especially if they are not using Perl 6 or Haskell) have no option but to do it all wrong.

[06:58] <samcv> yeah

[06:59] <samcv> in my pt2 of concurrancy i show some ways it can go wrong, and such

[06:59] <samcv> like with variables and stuff

[06:59] <LeCamarade> So that talk is a very good intro to how to do it well; it is a a good edoucation on the cheap (free).

[06:59] <samcv> which i stumbled into

[06:59] <samcv> i should watch that video since i haven't seen it

[06:59] <teksteiner> Yeah the system looks pretty neat

[07:00] <teksteiner> samcv will do :)

[07:00] <samcv> i have been meaning to do a part 3 about Proc::Async but haven't gotten around to it quite yet

[07:00] <LeCamarade> In Perl 6 you have these good, good primitives that, very importantly, compose very well together both syntactically and semantically. You almost cannot go wrong if you let the syntax rope you in.

[07:01] *** Tonik left
[07:02] <samcv> i also really like the object system

[07:02] <samcv> other languages I really don't like… with that

[07:03] <LeCamarade> The object system is good because it did it right, like Smalltalk did. It is not about the objects, in Perl 6 and Smalltalk, it is about their messages. And that is doubleplusgood.

[07:04] <LeCamarade> I just love Perl 6.p

[07:04] <samcv> 6.p :P

[07:04] <samcv> someday

[07:05] <LeCamarade> 6.c more-likely. :-) It really is an excellent achievement. I am glad to

[07:05] <LeCamarade> have it.

[07:05] <LeCamarade> You can tell I am typing on dvorak. The . is next to p.

[07:05] <teksteiner> How long have you been using dvorak?

[07:06] <LeCamarade> I really doubt that Perl 6 can be improved in my lifetime. That is why I am dragging this web app around, and fixing Web::App::Context on every computer where I want to run it.

[07:06] <LeCamarade> Because I am done re-writing my things, and now I have this one bunch of code that I will maintain forever. I am happy with that. If I am not coding Perl 6, I am coding Haskell. That's it.

[07:07] *** pierre_ joined
[07:07] <samcv> i type with dvorak too

[07:07] <LeCamarade> Now, the few places you mentioned where Perl 6's concurrency can go wrong, like with variables and stuff, those things are not even legal in Haskell. If you code Perl 6 like it is a more-lenient Haskell, you never ever go wrong.

[07:07] <LeCamarade> samcv Yay! aoeui!

[07:08] <samcv> :D

[07:09] <LeCamarade> Plus, in Haskell you get things like Software Transactional Memory, which, together with constructs that work a bit like Promises and the like, give you a most-robust way to do something like variables, but safely, so that they _will not_ go wrong.

[07:09] *** xtreak joined
[07:10] *** domidumont joined
[07:10] <samcv> perl 6 also has really good unicode support. I have been working the last week or so on trying to increase our test coverage for unicode properties. but it is a young language still

[07:11] <LeCamarade> Oh, that is the best part!

[07:11] <samcv> so most of the ones we don't have yet are kind of obscure. but everything else is pretty good :)

[07:11] <samcv> and sometimes it does it TOO good, (sorta)

[07:11] <samcv> while working on tests i find a weird bug :P

[07:11] <samcv> because it sees graphemes as seperate from characters,

[07:12] <samcv> m: say q<ୈ>

[07:12] <camelia> rakudo-moar c42b6b: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Couldn't find terminator <ୈ (corresponding <ୈ was at line 1)␤at <tmp>:1␤------> 3say q<ୈ>7⏏5<EOL>␤    expecting any of:␤        <ୈ␤»

[07:12] <samcv> m: say q<ୈtest<ୈ

[07:12] <camelia> rakudo-moar c42b6b: OUTPUT«test␤»

[07:12] <LeCamarade> Look, most programs that will be written are yet to be written. The sooner we all realise that Perl 6 is the minimum acceptable (now that it has been born), the sooner we will all get to actually dealing with real problems. I actually do not tolerate working with other crap languages. I left my former job last week for that among other reasons.

[07:12] <samcv> that weird symbol is usually used on the right side of something else

[07:13] <LeCamarade> What I like most is the way quotes work just like they should.

[07:13] <LeCamarade> And superscripts!

[07:13] <samcv> and so we may need to do something where we check if they are the same script before saying 'yes these are the same 'character'

[07:13] <samcv> :D

[07:13] <samcv> yeah

[07:13] <samcv> i've also been working hugely on the perl 6 syntax highlighter, i'm maintining it (from being unmaintained for a long time)

[07:14] <LeCamarade> I forget the name for that, which you describe; TimToady mentioned it in one of his talks in the last year.

[07:14] <samcv> just got the site switched over to using that highlighter for the docs site

[07:14] <samcv> so if you use atom and don't have it yet, you should download it ;) shameless plug

[07:14] <samcv> but it's really great

[07:14] *** domidumont left
[07:15] *** domidumont joined
[07:15] *** CIAvash joined
[07:15] <samcv> supports like every fancy quotation mark :D

[07:15] <samcv> and most of the q/qq/Q delimiters

[07:15] <LeCamarade> Actually, I am back to using a Mac now, and I have forgotten how to type the Unicode symbols, or I would be using the right quotes and things like diaereses ... I was used to dead keys with X' compose.

[07:15] <samcv> …

[07:15] <LeCamarade> Yes, the quote marks really had me sold.

[07:15] <samcv> yeah i have that compose key

[07:15] <samcv> what editor do you use?

[07:16] <LeCamarade> Mac does not do compose keys, and I already rush to hit my CAPS for compose before I realise that it will not work on this Mac.

[07:16] <samcv> there must be something like it?

[07:16] <samcv> i mean

[07:16] <samcv> i remember somebody asking about it

[07:20] <LeCamarade> Mac has it, but I do not know it. I will learn it slowly, perhaps, but I intend to just not use Macs too long.

[07:20] <samcv> what editor do you use though. i'm curious

[07:21] <LeCamarade> I use vim.

[07:21] <LeCamarade> And you know the new Macs do not even have an escape key.

[07:21] <samcv> kk. the highlighting for that is not too bad

[07:21] <samcv> what

[07:21] <samcv> insane

[07:21] <LeCamarade> Oh, no. I cannot have to use the editor to get Unicode. Not right.

[07:22] <samcv> what?

[07:22] <LeCamarade> I used to be very effective with a Mac, but I have had the last two years on Linux and I forgot.

[07:22] <LeCamarade> No, I should have system-wide escapes of some sort. I mean, I am in BitchX now, for instance.

[07:22] <LeCamarade> Not in Vim. So how would I type? :-(

[07:23] <RabidGravy> yes, the way of typing the characters should be the same in all applications, not editor specific

[07:23] <samcv> yeah

[07:23] *** cowens left
[07:24] <RabidGravy> right off to the code mines, last big push before Christmas!

[07:24] <samcv> :D

[07:30] <samcv> well i guess i found out what unicode says about how te seperate things

[07:30] <samcv> Ignore degenerates. No special provisions are made to get marginally better behavior for degenerate cases that never occur in practice, such as an A followed by an Indic combining mark.

[07:31] <samcv> need to keep reading though, since < is not a letter character

[07:34] <LeCamarade> Right. Having got my Perl 6 app up and running, off for dinner! Yay! (Sometimes this means no dinner ... ) 

[07:34] <LeCamarade> samcv++

[07:34] <LeCamarade> jnthn++

[07:35] <samcv> Enjoy!

[07:38] *** LeCamarade left
[07:41] <CIAvash> samcv++ # syntax highlighting on docs

[07:41] <samcv> does it look better?

[07:43] <samcv> i think it looks pretty good, but i thought it looked good before too, so

[07:44] <CIAvash> Colors probably need some tweaking, but overall it's better. Previous highlighter had some incorrect highlighting in some places

[07:44] <samcv> kk cool

[07:44] <samcv> yeah our new CSS doesn't have as many things defined, so we may need to add more things to color some thing sdifferently and also tweak the colors

[07:46] <dalek> doc/fix_for_#1062: 7f87d5e | Altai-man++ | htmlify.p6:

[07:46] <dalek> doc/fix_for_#1062: Replace random .pick with File::Temp usage.

[07:46] <dalek> doc/fix_for_#1062: Fix for https://github.com/perl6/doc/issues/1062

[07:46] <dalek> doc/fix_for_#1062: review: https://github.com/perl6/doc/commit/7f87d5ec84

[07:50] <dalek> doc: 3faff50 | samcv++ | / (2 files):

[07:50] <dalek> doc: Remove old pygments code. Issue #1070

[07:50] <dalek> doc: review: https://github.com/perl6/doc/commit/3faff505f1

[07:54] *** wamba joined
[07:55] <TEttinger> samcv: I should just say thank you for paying attention to highlighting in editors; I don't actually use perl 6 right now but I know that dealing with IDEs and editors is an exercise in frustration, so I'm glad you're giving it good attention

[07:56] <samcv> thanks :)

[07:56] <samcv> it is important to me too

[07:56] <samcv> and it's super duper awesome we can use the same thing with the docs as well

[07:56] <samcv> two for one

[07:57] <CIAvash> samcv: Do you consider requests(for things other than Atom)? Since you're our new syntax highlighter maker :)

[07:57] <samcv> like what? vim?

[07:57] <CIAvash> No, https://github.com/jneen/rouge/

[07:57] <samcv> or other things

[07:57] <samcv> oh

[07:57] <CIAvash> It's being used by Gitlab and Jekyll

[07:58] <samcv> i use pygments with jekyll

[07:58] <samcv> if you want to know how to

[07:58] <samcv> i have a blog post ;P

[07:58] <CIAvash> it's written in ruby though

[07:59] <samcv> what else is it used for? I know gitlab and jekyll other things too probably though?

[07:59] <samcv> i know github used it and pygments until they switched

[08:00] <samcv> and i'm trying to get the learnxinyminutes.com site to switch to pygments. i already got their rouge updated and some tests for the docs portion of the site for file encoding and yaml validity… so hmm

[08:00] <samcv> i won't rule it out CIAvash 

[08:01] <samcv> here is the post on using pygments with jekyll btw: https://cry.nu/tutorials/syntax-highlighting-in-jekyll/

[08:01] <CIAvash> I only know of those two. Yeah, syntax highlighter can be set in jekyll

[08:01] *** travis-ci joined
[08:01] <travis-ci> Doc build failed. Altai-man 'Replace random .pick with File::Temp usage.

[08:01] <travis-ci> https://travis-ci.org/perl6/doc/builds/185999760 https://github.com/perl6/doc/commit/7f87d5ec84cc

[08:01] *** travis-ci left
[08:02] <samcv> also who uses windows

[08:03] *** xtreak left
[08:03] <samcv> i want the highlighting to work with windows and linux/mac, i know it can do linux and mac after i didn't rely on shebang in my script to interface the highlighter with the builder. need to get somebody to test on windows

[08:03] * samcv isn't sure what happens when you specify a file with ./ on windows

[08:03] <samcv> probably breaks it?

[08:04] <samcv> or is perl 6 smart and just removes it for windows

[08:04] <samcv> when doing proc async

[08:05] *** xtreak joined
[08:05] *** travis-ci joined
[08:05] <travis-ci> Doc build failed. Samantha McVey 'Remove old pygments code. Issue #1070'

[08:05] <travis-ci> https://travis-ci.org/perl6/doc/builds/186000445 https://github.com/perl6/doc/compare/0ffb783c40d9...3faff505f165

[08:05] *** travis-ci left
[08:05] <samcv> waaah

[08:07] *** dugword left
[08:08] *** gregf_ left
[08:09] <dalek> doc: e5d6a5a | samcv++ | htmlify.p6:

[08:09] <dalek> doc: Fix not passing using :$no-proc-async in the signature of a sub

[08:09] <dalek> doc: review: https://github.com/perl6/doc/commit/e5d6a5a8f5

[08:16] <samcv> CIAvash, should have jekyll add support for highlights ;P

[08:16] <samcv> also why the hell did github name it highlights. i guess they are lazy

[08:17] <samcv> and can't think of a better name

[08:17] <CIAvash> :)

[08:17] <samcv> probably because they have things seperated into so many repos

[08:17] <samcv> first-mate uses onigumura regex engine and parses the grammar files etc, and highlights converts stuff to html

[08:17] <samcv> for atom or github

[08:18] <samcv> so they just kind of gave up. first-mate to parse textmate grammars, highlights for highlighter, idk atom has so many diferent repos for it. which is probably good

[08:22] <samcv> then therea's this node package called marky-markdown

[08:22] <samcv> https://www.npmjs.com/package/marky-markdown

[08:22] <samcv> also the top left corner you click it and it changes

[08:23] <samcv> like made up definitions for NPM

[08:23] <samcv> "Nectar of the Programming Masses" "Neatly Positioned Magazines" idk

[08:23] <samcv> github seemed to be into ruby but now are really into node. Not sure why or if it was just so they could use things between both the site and atom

[08:28] *** xtreak left
[08:29] *** xtreak joined
[08:40] <teksteiner> samcv your introduction to Promises was what I was looking for, thank you

[08:41] *** dakkar joined
[08:41] *** ufobat joined
[08:44] <ufobat> is $<foo> the same as $/<foo>?

[08:45] <teksteiner> Gonna experiment a little bit now, and then watch the talk by Jonathan Worthington

[08:45] <lizmat> ufobat: yes

[08:45] <lizmat> just like $0 is the same as $/[0]

[08:46] *** domidumont left
[08:46] <ufobat> okay, :) ty

[08:47] *** travis-ci joined
[08:47] <travis-ci> Doc build passed. Samantha McVey 'Fix not passing using :$no-proc-async in the signature of a sub'

[08:47] <travis-ci> https://travis-ci.org/perl6/doc/builds/186003420 https://github.com/perl6/doc/compare/3faff505f165...e5d6a5a8f524

[08:47] *** travis-ci left
[08:47] <dalek> doc: dccec0e | (Siavash Askari Nasr)++ | doc/Language/typesystem.pod6:

[08:47] <dalek> doc: Add missing quotes

[08:47] <dalek> doc: review: https://github.com/perl6/doc/commit/dccec0e363

[08:47] <synopsebot6> Link: http://doc.perl6.org/language/typesystem

[08:48] <samcv> CIAvash, where are the semicolons tho?

[08:48] *** wamba left
[08:49] <ufobat> okay, :) ty

[08:51] <CIAvash> samcv: I don't think they are necessary there. Unless we have a style guide for that?

[08:52] <samcv> well no they aren't needed, but

[08:53] <samcv> this is fine:     method from-b(){ 'B::from-b ' }

[08:53] <samcv> this i don't think is:     has $.delegate handles /m\d/ = A.new()

[08:53] <samcv> it doesn't end in braces

[08:53] <samcv> it's optional obviously but

[08:53] <samcv> it is nice to end lines with semicolons or brackets

[08:54] <CIAvash> yeah

[08:57] <samcv> A  semicolon is used when an author could've chosen to end their sentence, but chose not to. The author is you and the sentence is your life

[09:04] *** xtreak left
[09:04] *** mawkish_ left
[09:09] * moritz should be more careful about ending sentences in the future, maybe :-)

[09:11] <samcv> :P

[09:15] *** ufobat left
[09:19] *** rindolf joined
[09:24] *** Actualeyes left
[09:50] *** xtreak joined
[09:56] *** wamba joined
[10:08] *** wamba left
[10:10] *** pmurias joined
[10:14] *** wamba joined
[10:23] *** wamba left
[10:33] *** andrzejku left
[10:42] *** xtreak left
[10:45] *** xtreak joined
[10:48] *** cibs left
[10:49] *** cibs joined
[11:19] <CIAvash> Is it possible to destructure ranges and sequences in signatures?

[11:20] *** domidumont joined
[11:20] <DrForr> I know that constants can be, so ranges and sequences aren't *that* far of a stretch.

[11:30] <CIAvash> I mean can we currently do it in Perl 6? I wanted to see if I can do what this haskell code does: let (x:xs) = [1..]

[11:30] *** g4 joined
[11:30] *** g4 left
[11:30] *** g4 joined
[11:30] <timotimo> of course

[11:30] <timotimo> m: sub test(@ [$x, *@xs]) { say "head is $x"; test(@xs) }; test([1, 2, 3, 4, 5])

[11:30] <camelia> rakudo-moar 96f5fb: OUTPUT«head is 1␤head is 2␤head is 3␤head is 4␤head is 5␤Too few positionals passed; expected at least 1 argument but got only 0 in sub-signature␤  in sub test at <tmp> line 1␤  in sub test at <tmp> line 1␤  in sub test at <tmp> line 1␤  in sub …»

[11:31] <timotimo> m: multi sub test(@ [$x, *@xs]) { say "head is $x"; test(@xs) }; multi sub test(@ [$x]) { say "only $x left now" }; test([1, 2, 3, 4, 5])

[11:31] <camelia> rakudo-moar 96f5fb: OUTPUT«head is 1␤head is 2␤head is 3␤head is 4␤head is 5␤Cannot resolve caller test(Array); none of these signatures match:␤    (@ (Any $x, *@xs))␤    (@ (Any $x))␤  in sub test at <tmp> line 1␤  in sub test at <tmp> line 1␤  in sub test at <t…»

[11:31] <timotimo> ah, of course

[11:31] <timotimo> m: multi sub test(@ [$x, *@xs]) { say "head is $x"; test(@xs) }; multi sub test(@ []) { say "done!" }; test([1, 2, 3, 4, 5])

[11:31] <camelia> rakudo-moar 96f5fb: OUTPUT«head is 1␤head is 2␤head is 3␤head is 4␤head is 5␤done!␤»

[11:32] <CIAvash> with a infinite range or sequence?

[11:33] <timotimo> m: multi sub test(@ [$x, *@xs]) { say "head is $x"; test(@xs) }; multi sub test(@ [$x]) { say "only $x left now" }; test(1 .. *)

[11:33] <camelia> rakudo-moar 96f5fb: OUTPUT«Cannot resolve caller test(Range); none of these signatures match:␤    (@ (Any $x, *@xs))␤    (@ (Any $x))␤  in block <unit> at <tmp> line 1␤␤»

[11:33] <timotimo> m: multi sub test(@ [$x, *@xs]) { say "head is $x"; test(@xs) }; multi sub test(@ [$x]) { say "only $x left now" }; test(1 ... *)

[11:33] <camelia> rakudo-moar 96f5fb: OUTPUT«Cannot resolve caller test(Seq); none of these signatures match:␤    (@ (Any $x, *@xs))␤    (@ (Any $x))␤  in block <unit> at <tmp> line 1␤␤»

[11:33] <timotimo> not as easily, clearly

[11:36] <DrForr> Prancer introspects constants, maybe look at my code?

[11:37] <DrForr> Also I have to do some ugly things because they're implemented as junctions, so it may not be the best model to follow.

[11:37] <CIAvash> should the [$x, *@xs] syntax work? or is it just for lists and arrays?

[11:38] <DrForr> That's destructuring of argument lists.

[11:39] *** nowan joined
[11:40] *** TEttinger left
[11:44] <timotimo> m: multi sub test($ ($x, *@xs)) { say "head is $x"; test(@xs) }; multi sub test($ ($x)) { say "only $x left now" }; test(1 ... *)

[11:44] <camelia> rakudo-moar 96f5fb: OUTPUT«Cannot resolve caller test(Seq); none of these signatures match:␤    ($ (Any $x, *@xs))␤    ($ (Any $x))␤  in block <unit> at <tmp> line 1␤␤»

[11:48] *** labster left
[11:54] *** cyphase left
[11:54] *** Actualeyes joined
[11:59] *** cyphase joined
[11:59] *** sena_kun joined
[12:03] *** rindolf left
[12:04] *** lukaramu joined
[12:12] *** rindolf joined
[12:30] <lizmat> http://ugexe.com/adding-on-to-channels-and-supplies-in-perl6/   # ugexe++

[12:39] *** Actualeyes left
[12:43] <moritz> ugexe++ indeed

[12:43] <moritz> but is the order on a channel really not guaranteed?

[12:43] <moritz> I thought it was a queue, aka FIFO

[12:44] <moritz> IMHO the second difference between supply and channel is that a channel is optimized for blocking consumers

[12:45] <moritz> (also, if Event::Emitter simply uses smart matching under the hood, you can pass True instead of { True; } for an always-matching matcher)

[12:53] *** Actualeyes joined
[12:55] <DrForr> Wowsers. Safari webinar compensation is loads better than honoraria.

[13:00] *** Vasyl joined
[13:05] * notviki watches DrForr make a donation to TPF's Perl 6 fund :P

[13:07] <notviki> huggable: donate

[13:07] <huggable> notviki, We invite you to make a donation to The Perl Foundation to sponsor Perl 6 development: https://donate.perlfoundation.org/ (put "Perl 6 Core Development Fund" in the 'Purpose' text field)

[13:16] *** obfusk_ joined
[13:16] *** obfusk left
[13:19] <notviki> moritz: but that would trigger warning

[13:19] <notviki> m: my $x where True = 42

[13:19] <camelia> rakudo-moar 660b0b: OUTPUT«Potential difficulties:␤    Smartmatch against True always matches; if you mean to test the topic for truthiness, use :so or *.so or ?* instead␤    at <tmp>:1␤    ------> 3my $x where 7⏏5True = 42␤»

[13:19] *** salva0 left
[13:19] <moritz> notviki: only for the literal case

[13:20] <moritz> my $matcher = True; say 'thing' ~~ $matcher;

[13:20] <moritz> m: my $matcher = True; say 'thing' ~~ $matcher;

[13:20] <camelia> rakudo-moar 660b0b: OUTPUT«True␤»

[13:20] <notviki> Ah. Cool.

[13:20] <notviki> m: my $m = True; my $x where $m = 42

[13:20] <camelia> rakudo-moar 660b0b: ( no output )

[13:21] <notviki> neat

[13:22] <notviki> m: my $x where $ =True = 42

[13:22] <camelia> rakudo-moar 660b0b: OUTPUT«Cannot modify an immutable Bool␤  in block <unit> at <tmp> line 1␤␤»

[13:22] <notviki> aw

[13:31] *** AndyBotwin left
[13:36] *** wamba joined
[13:39] <notviki> m: DateTime.new(:second(59)).say

[13:39] <camelia> rakudo-moar 660b0b: OUTPUT«Cannot call DateTime.new with these named parameters: second␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[13:39] <notviki> m: DateTime.new(:year(2016), :second(59)).say

[13:39] <camelia> rakudo-moar 660b0b: OUTPUT«2016-01-01T00:00:59Z␤»

[13:39] <notviki> :/

[13:40] <notviki> m: DateTime.new(:year(2016), :second(60)).say

[13:40] <camelia> rakudo-moar 660b0b: OUTPUT«Second out of range. Is: 60, should be in 0..^60; a leap second can occur only at 23:59␤  in block <unit> at <tmp> line 1␤␤»

[13:40] <notviki> m: DateTime.new(:year(2016), :second(59.9999999999999999)).say

[13:40] <camelia> rakudo-moar 660b0b: OUTPUT«2016-01-01T00:00:60.000000Z␤»

[13:41] <notviki> m: printf "%.100f", DateTime.new(:year(2016), :second(59.9999999999999999)).second

[13:41] <camelia> rakudo-moar 660b0b: OUTPUT«60.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000»

[13:41] <perlpilot> DateTime sure is weird.

[13:42] <notviki> Temporal programming is always painful IME

[13:42] *** stmuk_ joined
[13:42] <notviki> s: DateTime, 'new', \(:year(2016), :second(59.9999999999999999))

[13:42] <SourceBaby> notviki, Sauce is at https://github.com/rakudo/rakudo/blob/660b0b9/src/core/DateTime.pm#L107

[13:43] *** stmuk left
[13:43] *** go|dfish left
[13:47] *** go|dfish joined
[13:47] *** CIAvash left
[13:49] *** wamba left
[13:49] *** Praise left
[13:52] <notviki> m: DateTime.new(:year(2016), :timezone(4.75*3600)).say

[13:52] <camelia> rakudo-moar 660b0b: OUTPUT«This type cannot unbox to a native integer: P6opaque, Rat␤  in block <unit> at <tmp> line 1␤␤»

[13:53] <notviki> .oO( why do I always have annoying issues when I try to use Perl 6 for actual programming :/ )

[14:01] *** ponbiki left
[14:06] *** grondilu joined
[14:06] <grondilu> m: constant google = 10e100; say (^google).pick

[14:07] <grondilu> ^not sure if this should hang or not

[14:07] <camelia> rakudo-moar 660b0b: OUTPUT«(timeout)»

[14:07] <notviki> google? :)

[14:07] <grondilu> m: say ^10e100

[14:07] <camelia> rakudo-moar 660b0b: OUTPUT«0..^1e+101␤»

[14:08] <notviki> m: m: constant google = 10e100; say (^(google.Int)).pick

[14:08] <camelia> rakudo-moar 660b0b: OUTPUT«42690429563095562001090706821744116065123100095517728956919086536914973392602368184914015276687593920␤»

[14:08] *** splitcells joined
[14:10] <notviki> m: constant googol = 10e100; say (0e0..googol).pick

[14:10] *** finanalyst joined
[14:10] <camelia> rakudo-moar 660b0b: OUTPUT«(timeout)»

[14:11] *** pierre_ left
[14:11] *** pierre_ joined
[14:11] <notviki> hum

[14:11] <grondilu> it's kind of LTA that we don't have notation for such large literal integers

[14:12] <notviki> Well, for some reason the non-int ranges reify themselves :S

[14:12] *** finanalyst left
[14:12] <notviki> Sure we do. say EVAL 1 ~ '0' x 100

[14:12] <notviki> m: say EVAL 1 ~ '0' x 100

[14:12] <camelia> rakudo-moar 660b0b: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤EVAL is a very dangerous function!!! (use the MONKEY-SEE-NO-EVAL pragma to override this error,␤but only if you're VERY sure your data contains no injection attacks)␤at <tmp>:1␤------> 3say EVAL 1 ~ '…»

[14:12] *** rightfold joined
[14:12] <notviki> dude, it's SAFE! do it!

[14:12] <notviki> m: say EVAL 1 ~ '0' x 100:

[14:12] <camelia> rakudo-moar 660b0b: OUTPUT«10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000␤»

[14:13] <rightfold> Is there a tool that automatically translates Perl 5 regexes to Perl 6 regexes?

[14:13] *** ufobat joined
[14:13] <notviki> rightfold: none that I know of

[14:14] <notviki> rightfold: you can use :P5 adverb tho

[14:14] <notviki> m: say 'foo' ~~ m:P5/[of]+/

[14:14] <camelia> rakudo-moar 660b0b: OUTPUT«｢foo｣␤»

[14:14] <rightfold> oh rad

[14:14] <notviki> It's not 100% the same thing, but will do in a pinch

[14:14] <rightfold> guess I'll do it manually though

[14:14] <notviki> (like we don't support 100% of Perl 5 regexes)

[14:15] <rightfold> it's pretty short: sub process_module { shift =~ s/\[query\|(.*?)\|\]/process_query($1)/egrs }

[14:15] <perlpilot> rightfold: you could make such a tool.  That would be neat and helpful to some people  :-)

[14:15] <timotimo> oh rightfold is back \o/

[14:15] <rightfold> :3

[14:15] <notviki> .oO( and it'd be error prone and usually produce crappy code )

[14:15] <timotimo> don't we have like two translators?

[14:16] <rightfold> I'm rewriting some Perl 5 code in Perl 6 so it actually works on Windows :F

[14:16] *** xtreak left
[14:16] *** grondilu left
[14:17] <notviki> rightfold: sub process-module { /'[query|' (.*?) '|]'/process-query($0)/ given $^s }

[14:17] <notviki> #Untested

[14:17] <timotimo> https://github.com/drforr/Perl-Mogrify - this is one

[14:17] <rightfold> notviki: missing e flag

[14:17] <timotimo> hmm

[14:17] <timotimo> doesn't seem to have regex support

[14:17] <perlpilot> Are auto-declared parameters read-write?

[14:18] <notviki> rightfold: nope

[14:18] *** grondilu joined
[14:18] <timotimo> https://github.com/Util/Blue_Tiger - here's another

[14:18] <notviki> rightfold: oh, but missing S. It should be S///

[14:18] <notviki> m: say S/(.+)/uc(~$0)/ given "foos"

[14:18] <camelia> rakudo-moar 660b0b: OUTPUT«uc(~foos)␤»

[14:19] <notviki> :o

[14:19] <notviki> Right, leave it to me to give bad advice :)

[14:19] <rightfold> eval (e), global (g), return (r) and single-line (s)

[14:19] <notviki> m: say S/(.+)/&uc(~$0)/ given "foos"

[14:19] <camelia> rakudo-moar 660b0b: OUTPUT«FOOS␤»

[14:19] <notviki> m: say S:g/(.+)/&uc(~$0)/ given "foos"

[14:19] <camelia> rakudo-moar 660b0b: OUTPUT«FOOS␤»

[14:19] <notviki> rightfold: sub process-module { S:g/'[query|' (.*?) '|]'/&process-query($0)/ given $^s }

[14:20] <rightfold> Does Perl 6 have __DATA__?

[14:20] <notviki> Nope

[14:20] <notviki> But IIRC you can use =pod or something or other

[14:21] <notviki> m: say $=␤=pod␤Look, ma! __DATA__!

[14:21] <camelia> rakudo-moar 660b0b: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:3␤------> 3Look, ma! __DATA__!7⏏5<EOL>␤    expecting any of:␤        prefix␤        term␤»

[14:21] <notviki> m: say $=␤=begin pod␤Look, ma! __DATA__!␤=end pod

[14:21] <camelia> rakudo-moar 660b0b: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:4␤------> 3=end pod7⏏5<EOL>␤    expecting any of:␤        prefix␤        term␤»

[14:21] <notviki> Well, there's some sort of way using that, I'm sure :)

[14:22] <notviki> timotimo: Perl-Mogrify doesn't do jack for regexes, from what I see in its docs

[14:22] <notviki> neither does Blue Tiger

[14:22] <rightfold> oh thanks

[14:22] <rightfold> =finish

[14:22] <timotimo> but blue tiger has a translate_regex.pl

[14:23] <notviki> OK.

[14:23] * timotimo hits the road for a couple of hours

[14:23] <notviki> I was just going off what it says is implemented in the docs

[14:23] *** pyrimidi_ left
[14:23] <notviki> :o what did the road do to you!

[14:24] *** pyrimidine joined
[14:24] <timotimo> it separated me from my family

[14:24] <timotimo> toodles

[14:25] <rightfold> yesh, it works :3 old: https://glot.io/snippets/elfrcxm11y new: https://glot.io/snippets/elh0t13ey6

[14:26] *** cdg joined
[14:28] <rightfold> thanks notviki 

[14:29] <notviki> Any time

[14:30] <rightfold> Writing a preprocessor to get type errors in SQL queries at compile time :P

[14:31] *** finanalyst joined
[14:31] *** finanalyst left
[14:34] <notviki> grondilu: I'd say it can be made not to hang

[14:34] *** finanalyst joined
[14:34] *** finanalyst left
[14:35] <notviki> grondilu: from what I understand from code, a Num range would just call .succ, which merely increments by 1e0. So instead of reifing all googol elements to pick one, we can generate a random Int inside the range and then just stick the fractional part from the Num onto it to get the actual number

[14:35] <notviki> ???

[14:35] *** bwisti joined
[14:35] <notviki> Profit!

[14:36] <notviki> At least that works in my head

[14:36] <notviki> m: say eager 1e100 .. 1e100+1

[14:36] <rightfold> does Native work on Windows?

[14:36] <notviki> rightfold: you mean NativeCall? Yes.

[14:36] <camelia> rakudo-moar 660b0b: OUTPUT«(timeout)»

[14:37] <rightfold> thanks

[14:37] <notviki> m: say (1e100 .. 1e100+1)[^10]

[14:37] <camelia> rakudo-moar 660b0b: OUTPUT«(1e+100 1e+100 1e+100 1e+100 1e+100 1e+100 1e+100 1e+100 1e+100 1e+100)␤»

[14:37] <notviki> :S

[14:37] <notviki> m: say [==] (1e100 .. 1e100+1)[^10]

[14:37] <camelia> rakudo-moar 660b0b: OUTPUT«True␤»

[14:37] <notviki> :o

[14:39] <notviki> Or at least it should... I tried a few things but it keeps telling me "canno0t locate blah in native library ''"

[14:40] <rightfold> I want to call a few functions from libpq, I'll try it tonight :)

[14:41] <notviki> m: say 1e10 == 1e10.succ

[14:41] <camelia> rakudo-moar 660b0b: OUTPUT«False␤»

[14:41] <notviki> m: say 1e100 == 1e100.succ

[14:41] <camelia> rakudo-moar 660b0b: OUTPUT«True␤»

[14:42] <notviki> m: say 1e100 == 1e100.succ == 1e100.pred

[14:42] <camelia> rakudo-moar 660b0b: OUTPUT«True␤»

[14:42] <notviki> nothing we can do about it, I guess

[14:42] *** jkva joined
[14:43] *** splitcells left
[14:44] *** newbie1 joined
[14:44] *** colomon left
[14:44] <notviki> m: say (1 ~ '0'x100)

[14:44] <camelia> rakudo-moar 660b0b: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say (1 ~ '0'7⏏5x100)␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        statement …»

[14:46] <notviki> m: say 1e99.Int.chars

[14:46] <camelia> rakudo-moar 660b0b: OUTPUT«99␤»

[14:46] <notviki> m: say 1e100.Int.chars

[14:46] <camelia> rakudo-moar 660b0b: OUTPUT«101␤»

[14:46] <notviki> m: say 1e101.Int.chars

[14:46] <camelia> rakudo-moar 660b0b: OUTPUT«101␤»

[14:46] <notviki> wtf? :/

[14:47] <notviki> Oh, fp noise :( it's all 999999 at the start

[14:51] *** cdg left
[14:52] *** colomon joined
[15:02] *** ufobat left
[15:02] <notviki> .ask AlexDaniel so what were the 20 regressions you said you could probably reproduce? I'm looking for tickets to hack on during the Holiday Season

[15:02] <yoleaux> notviki: I'll pass your message to AlexDaniel.

[15:07] *** Actualeyes left
[15:20] *** wamba joined
[15:20] *** colomon left
[15:22] *** pyrimidi_ joined
[15:22] *** pyrimidine left
[15:22] *** thayne left
[15:25] *** Actualeyes joined
[15:31] <notviki> m: given DateTime.new(:year(2017), :month(1)).utc { dd [ .year, .month, .year + (1 if .month => 6)];  }

[15:31] <camelia> rakudo-moar 660b0b: OUTPUT«[2017, 1, 2018]␤»

[15:31] <notviki> m: dd [ 1 + (1 if 0 >= 6) ]

[15:31] <camelia> rakudo-moar 660b0b: OUTPUT«[1]␤»

[15:32] <notviki> Why does it become 2018? :/

[15:33] <notviki> oh christ

[15:33] *** khw joined
[15:33] <notviki> => ne >=

[15:34] <M-Illandan> notviki: have some coffee :-)

[15:35] <notviki> That wouldn't have happened if we had ≥ :P

[15:36] <M-Illandan> Only if you had Fira Code Sans :P

[15:36] <notviki> I'm too poor to afford it.

[15:36] <perlpilot> .oO( Why *don't* we have ≥ ? )

[15:37] <notviki> perlpilot: IIRC TimToday wanted to first make it possible to do that in userspace... and then we'd just create an operator in core

[15:37] <M-Illandan> notviki: No, it's free. https://github.com/tonsky/FiraCode

[15:43] *** grondilu left
[15:43] <notviki> I could've swore there was a "Fira" font that the author was charging like $200-$400 for.

[15:43] <rightfold> PragmataPro is expensive

[15:43] <notviki> Still cheap for a font, but for a programming font, screw that.

[15:44] *** zakharyas joined
[15:44] <notviki> Ah, maybe it was pragmata :)

[15:45] *** grondilu joined
[15:46] *** colomon joined
[15:47] *** g4 left
[15:48] <notviki> M-Illandan: do you have Fira installed right now? How does it render $foo.?bar ?

[15:49] <notviki> I'm looking at this Issue and it seems the ligature they went with is backwards to Perl 6's one it looks like "?.": https://github.com/tonsky/FiraCode/issues/215#issuecomment-245434571

[15:51] *** holli joined
[15:51] <pmurias> notviki: do you expect a programming font to be cheaper? ;)

[15:51] *** cyphase left
[15:53] <notviki> pmurias: a programming font doesn't have the same aesthetic requirements as a font I'd use in a 10,000-copy job that goes to customers.

[15:54] <notviki> I don't have any expectations about what they should cost, but I see no benefit in shelling out $400 for a font when there are plenty of good-enough free alternatives

[15:56] *** cyphase joined
[15:57] *** colomon left
[15:57] <notviki> ugh, this installation is too complex

[15:57] * notviki gives up

[15:58] <M-Illandan> https://matrix.org/_matrix/media/v1/download/matrix.org/lnZZivqoOvgRwtemoeHCBSsi - Screenshot_20161222_212249.png (4KB)

[15:58] <M-Illandan> notviki: ^^

[15:59] <M-Illandan> notviki: Not sure if you can see it. Let me know and I'll try to upload it to imgur or something like that

[15:59] *** colomon joined
[15:59] <notviki> Gives me "No Such Resource"

[15:59] <notviki> M-Illandan: I turned it on for a second and it's really ugly

[16:00] <notviki> I don't think I'd want to uglify everything for the sake of an occasional ligature

[16:00] <M-Illandan> shrug

[16:00] <M-Illandan> Not for everyone, I suppose

[16:00] <notviki> Unless I'm doing something wrong :/

[16:01] <M-Illandan> I don't use it all that often. I do it only if my eyes demand "well spaced characters" :D

[16:01] <notviki> It works!

[16:03] <notviki> I like how the => looks

[16:03] * notviki gives it a chance

[16:03] <M-Illandan> notviki: Sorry, what worked? Are you able to see my upload now?

[16:04] <notviki> M-Illandan: installation of the font worked :) I had to poke Atom's settings all over the place but figured it out.

[16:04] <notviki> And I can see the .? op now.

[16:05] <notviki> Well, I don't see any difference in it actually, so I guess that's good :P

[16:05] <M-Illandan> notviki: ha ha ha, cool

[16:06] <notviki> Oh "Beware that in some syntaxes selected ligatures might not work. This is usually a syntax parser/tokenization issue"

[16:06] <notviki> Prolly that's why

[16:06] <M-Illandan> Yeah, it's a work in progress

[16:07] <M-Illandan> notviki: If you'd like to see how it's rendered on my screen, click on the link here: https://irclog.perlgeek.de/perl6/2016-12-22#i_13785311

[16:08] <notviki> Ah. Thanks.

[16:08] <notviki> Instead of clicking the link I copied the " - Screenshot" thing too

[16:12] *** zakharyas left
[16:17] *** troys joined
[16:18] *** cibs left
[16:19] *** grondilu_ joined
[16:19] *** cibs joined
[16:21] *** grondilu left
[16:21] *** AlexDaniel joined
[16:27] * notviki goes back to DejaVu Sans Mono

[16:27] <notviki> Fira is too... crunchy-gothiky... for my tastes

[16:28] *** colomon left
[16:30] *** pierre_ left
[16:30] *** colomon joined
[16:31] *** pierre_ joined
[16:31] <AlexDaniel> Hey. Please don't freak out if the post is a bit late today (by an hour or two), I'm working on it.

[16:31] <yoleaux> 21 Dec 2016 11:50Z <jnthn> AlexDaniel: You'll over time end up with hundreds or thousands of threads sat doing nothing. :-) Create one ThreadPoolScheduler to share among your Proc::Async instances. :)

[16:31] <yoleaux> 15:02Z <notviki> AlexDaniel: so what were the 20 regressions you said you could probably reproduce? I'm looking for tickets to hack on during the Holiday Season

[16:32] <notviki> (side by side: http://i.imgur.com/c7BVZja.png Fira Code on left and DejaVu Sans Mono on right)

[16:32] <AlexDaniel> notviki: I said that I can find them (in a semi-automated way), not reproduce. I'm not sure when is your holiday season, by I'm hoping to work on it this weekend

[16:34] *** skids joined
[16:35] *** pierre_ left
[16:38] <notviki> AlexDaniel: well, I'm a Pastafarian and we don't have a specific day for the Holiday, it's a season... But in 24 hours I'm off work for 108 hours, followed by three days of light work, followed by 3 days of moar days off

[16:39] <notviki> and by light work I mean I have to come to office, but there's nothing to do, so I can hack on Perl 6....

[16:39] <AlexDaniel> \o/

[16:39] <AlexDaniel> notviki: sounds great, I love your work

[16:39] <notviki> \o/

[16:47] *** colomon left
[16:53] *** colomon joined
[16:56] *** colomon left
[16:57] <notviki> m: my Int() \Δ = now - 42

[16:57] <camelia> rakudo-moar 660b0b: OUTPUT«Type check failed in binding; expected Int(Any) but got Instant (Instant.from-posix(<7...)␤  in block <unit> at <tmp> line 1␤␤»

[16:57] *** colomon joined
[16:57] <notviki> :'(

[16:58] *** dalek left
[16:59] *** dalek joined
[16:59] *** ChanServ sets mode: +v dalek

[17:00] *** brrt left
[17:01] <japhb> m: Instant.^mro.say

[17:01] <camelia> rakudo-moar 660b0b: OUTPUT«((Instant) (Cool) (Any) (Mu))␤»

[17:01] <japhb> m: my Int() $Δ = now - 42

[17:01] <camelia> rakudo-moar 660b0b: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Coercion Int(Any) is insufficiently type-like to qualify a variable␤at <tmp>:1␤------> 3my Int() $Δ7⏏5 = now - 42␤    expecting any of:␤        constraint␤»

[17:02] <japhb> m: my Int() $Δ := now - 42

[17:02] <camelia> rakudo-moar 660b0b: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Coercion Int(Any) is insufficiently type-like to qualify a variable␤at <tmp>:1␤------> 3my Int() $Δ7⏏5 := now - 42␤    expecting any of:␤        constraint␤»

[17:02] <japhb> m: my Int() $Δ ::= now - 42

[17:02] <camelia> rakudo-moar 660b0b: OUTPUT«5===SORRY!5===␤Coercion Int(Any) is insufficiently type-like to qualify a variable␤at <tmp>:1␤------> 3my Int() $Δ7⏏5 ::= now - 42␤"::=" not yet implemented. Sorry. ␤at <tmp>:1␤------> 3my Int() $Δ ::= now - 427⏏5<EOL>␤␤»

[17:03] <japhb> m: :(Int() $Δ) := now - 42

[17:03] <camelia> rakudo-moar 660b0b: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at <tmp> line 1␤␤»

[17:03] <japhb> m: :(Int() $Δ) := \(now - 42)

[17:03] <camelia> rakudo-moar 660b0b: OUTPUT«Lexical with name '$Δ' does not exist in this frame␤  in block <unit> at <tmp> line 1␤␤»

[17:03] *** kurahaupo joined
[17:04] <japhb> m: :(Int() my $Δ) := \(now - 42)

[17:04] <camelia> rakudo-moar 660b0b: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> 3:(Int()7⏏5 my $Δ) := \(now - 42)␤    expecting any of:␤        constraint␤        formal parameter␤»

[17:04] <japhb> Oh this just keeps getting funnier ...

[17:04] <japhb> m: my $Δ; :(Int() $Δ) := \(now - 42)

[17:04] <camelia> rakudo-moar 660b0b: ( no output )

[17:05] <japhb> m: my Int() $Δ := now - 42;

[17:05] <camelia> rakudo-moar 660b0b: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Coercion Int(Any) is insufficiently type-like to qualify a variable␤at <tmp>:1␤------> 3my Int() $Δ7⏏5 := now - 42;␤    expecting any of:␤        constraint␤»

[17:05] <japhb> m: my $Δ; :(Int() $Δ) := \(now - 42); say $Δ;

[17:05] <camelia> rakudo-moar 660b0b: OUTPUT«1482426311␤»

[17:05] <notviki> heh

[17:05] <japhb> Well, that was fun.

[17:05] <notviki> m: my $Δ; :(Int() $Δ) := \("x") say $Δ;

[17:05] <camelia> rakudo-moar 660b0b: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my $Δ; :(Int() $Δ) := \("x")7⏏5 say $Δ;␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifie…»

[17:05] <notviki> m: my $Δ; :(Int() $Δ) := \("x"); say $Δ;

[17:05] <camelia> rakudo-moar 660b0b: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5x' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[17:06] *** HNYBot joined
[17:07] *** HNYBot left
[17:09] *** kurahaupo left
[17:09] * notviki again makes the mistake of using $*ENV<HNY_HOST> // instead of %*ENV<HNY_HOST> // and it silently failing :(

[17:10] *** dakkar left
[17:13] <tony-o> lizmat: moritz: thank you

[17:15] <tony-o> moritz: according to the docs, a Channel's receiver isn't guaranteed order with more than one sender

[17:16] *** TEttinger joined
[17:16] <moritz> tony-o: ok, I wasn't aware of that

[17:16] <tony-o> I don't know if that's true and i haven't tested it, fwiw

[17:18] *** pierre_ joined
[17:23] *** lluchs left
[17:23] *** kurahaupo joined
[17:23] *** kurahaupo left
[17:24] *** kurahaupo joined
[17:24] <notviki> Huh. And now as icing on a cake I'm hitting a precomp bug :o

[17:24] *** pyrimidi_ left
[17:25] *** pyrimidine joined
[17:26] <notviki> I'm guessing precomp in CURF doesn't check whether a module CURI was updated?

[17:26] <notviki> https://gist.github.com/zoffixznet/1a10ec1ac305a539d4f01fed4200a0db

[17:27] *** colomon left
[17:27] <notviki> A module's no longer even installed but somehow the scrpt manages to load it :/

[17:28] <ugexe> fwiw precomp files don't get uninstalled. Not sure how they would still be discovered though

[17:28] *** colomon joined
[17:29] <notviki> I nuked lib/.precomp and now it did complain the module's not installed

[17:29] *** dantia_ joined
[17:29] <notviki> And originally, I uninstalled the module and installed a newer version and it was still using the old version

[17:29] <dalek> DBIish: f63d2c3 | titsuki++ | examples/mysql.p6:

[17:29] <dalek> DBIish: mysql: Use .dispose instead of .disconnect

[17:29] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/f63d2c3b21

[17:29] <dalek> DBIish: 37b55cb | titsuki++ | examples/mysql.p6:

[17:29] <dalek> DBIish: Merge pull request #79 from titsuki/use-dispose

[17:29] <dalek> DBIish: 

[17:29] <dalek> DBIish: mysql: Use .dispose instead of .disconnect

[17:29] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/37b55cbbc1

[17:29] *** HNYBot joined
[17:30] <notviki> but, bugs aside...

[17:30] <notviki> HNYBot: hny torontor

[17:30] <HNYBot> notviki, New Year will happen in Toronto, ON in 1 week, 2 days, 6 hours, 29 minutes, and 8 seconds

[17:30] <notviki> woooo

[17:31] <notviki> Most shocking is just how little code there is in this bot: https://gist.github.com/zoffixznet/9238fc5e80b421d7534bbae3b77e4463

[17:31] <notviki> Just 34 lines...

[17:31] <ugexe> its possible that although you uninstalled the old version and installed a new one that the consuming module had already built its CURF precomp against the uninstalled module. But since precomps aren't uninstalled it was still able to link against it

[17:32] <notviki> ugexe: yeah, that's what happened. I didn't make any changes to the CURF module, so it never updated its precomp

[17:32] <notviki> But it checks for changes in files, so I kinda expected it to check its deps from the CURI

[17:33] <notviki> HNYBot: somalia

[17:33] <notviki> HNYBot: hny somalia

[17:33] <HNYBot> notviki, New Year will happen in Somalia in 1 week, 2 days, 6 hours, 26 minutes, and 47 seconds

[17:33] <notviki> \o/

[17:35] <moritz> HNYBot: hny russia

[17:35] <HNYBot> moritz, New Year will happen in Moscow, Russia in 1 week, 2 days, 6 hours, 24 minutes, and 49 seconds

[17:35] <notviki> :D

[17:36] <japhb> But ... but ... timezones!

[17:36] <notviki> well, it did say in *Moscow* :)

[17:36] <moritz> hence Moscow, Russia, I think :-)

[17:36] *** lluchs joined
[17:36] *** Actualeyes left
[17:36] <notviki> HNYBot: hny kamchatka

[17:36] <japhb> Yes, but we should be seeing different numbers for hours remaining

[17:36] <HNYBot> notviki, New Year will happen in Kamchatka Krai, Russia in 1 week, 2 days, 6 hours, 23 minutes, and 35 seconds

[17:37] <notviki> oh

[17:37] <notviki> oh, right... there's a bug in the bot :D

[17:37] <notviki> It's my Holiday Tradition. Writing a HNY bot and then finding bugs in it.

[17:37] <japhb> Heh

[17:38] <japhb> As long as you find the bugs before the new year.  :-)

[17:38] <TimToady> m: my (Int() $Δ) := \(now - 42); say $Δ

[17:38] <camelia> rakudo-moar 660b0b: OUTPUT«1482428307␤»

[17:40] <japhb> TimToady with the win again ....

[17:41] <japhb> Of course, he has an unfair advantage.  ;-)

[17:42] <notviki> japhb: no, half the bugs are usually found at #freenode-newyears party and I usually get too drunk to fix them and leave them for next year

[17:43] <notviki> Except this year I quit drinking

[17:47] *** HNYBot left
[17:47] *** HNYBot joined
[17:47] *** HNYBot left
[17:48] *** HNYBot joined
[17:48] <notviki> HNYBot: hny Toronto

[17:48] <notviki> HNYBot: hny Russia

[17:48] <HNYBot> notviki, New Year will happen in Brampton, ON L6V in 1 week, 2 days, 11 hours, 11 minutes, and 51 seconds

[17:48] <HNYBot> notviki, New Year will happen in Brampton, ON L6V in 1 week, 2 days, 11 hours, 11 minutes, and 43 seconds

[17:49] *** HNYBot left
[17:49] <notviki> Riiight.... $/ does not get passed on to start {} blocks -_-

[17:49] *** dantia left
[17:49] *** dantia_ left
[17:50] *** dantia joined
[17:50] *** zilti joined
[17:50] *** HNYBot joined
[17:51] *** HNYBot left
[17:51] *** cdg joined
[17:51] *** HNYBot joined
[17:51] <notviki> HNYBot: hny Toronto

[17:51] <notviki> HNYBot: hny Russia

[17:51] <HNYBot> notviki, New Year will happen in Toronto, ON in 1 week, 2 days, 11 hours, 8 minutes, and 35 seconds

[17:51] <HNYBot> notviki, New Year will happen in Moscow, Russia in 1 week, 2 days, 3 hours, 8 minutes, and 30 seconds

[17:52] <notviki> yey

[17:53] *** colomon left
[17:53] <dalek> doc: 6e276ed | titsuki++ | doc/Language/nativecall.pod6:

[17:53] <dalek> doc: Fix DBIish examples

[17:53] <dalek> doc: review: https://github.com/perl6/doc/commit/6e276edf31

[17:53] <dalek> doc: 4a2553b | titsuki++ | doc/Language/nativecall.pod6:

[17:53] <dalek> doc: Merge pull request #1073 from titsuki/fix-dbiish

[17:53] <synopsebot6> Link: http://doc.perl6.org/language/nativecall

[17:53] <dalek> doc: 

[17:53] <dalek> doc: Fix DBIish examples

[17:53] <synopsebot6> Link: http://doc.perl6.org/language/nativecall

[17:53] <dalek> doc: review: https://github.com/perl6/doc/commit/4a2553b6dc

[17:53] * TimToady reads hny the same as Pooh would

[17:53] * notviki too

[17:55] *** grondilu_ left
[17:55] <notviki> TimToady: you have a robo-message in #perl6-dev about ++$i² being different from ++$i**2 and https://github.com/perl6/roast/issues/200

[17:55] *** cdg left
[18:00] *** pierre_ left
[18:02] *** grondilu joined
[18:03] *** HNYBot left
[18:06] *** colomon joined
[18:06] *** cdg joined
[18:07] *** grondilu left
[18:08] *** AlexDaniel left
[18:12] <dalek> DBIish: 4d484dd | titsuki++ | examples/sqlite.p6:

[18:12] <dalek> DBIish: sqlite: Use .dispose instead of .disconnect

[18:12] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/4d484dd448

[18:12] <dalek> DBIish: b65a489 | (Salvador Ortiz)++ | examples/sqlite.p6:

[18:12] <dalek> DBIish: Merge pull request #80 from titsuki/use-dispose

[18:12] <dalek> DBIish: 

[18:12] <dalek> DBIish: sqlite: Use .dispose instead of .disconnect

[18:12] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/b65a489c66

[18:13] *** grondilu joined
[18:24] * notviki notices bdfoy create a public repo with Preface to LP6

[18:24] <notviki> .... the first code example is broken and has incorrect info for code -_-

[18:25] <rightfold> How do I get the null pointer with NativeCall?

[18:26] *** cibs left
[18:26] <notviki> rightfold: dunno.. with a type object?

[18:26] <notviki> like pass Str for strings, or Int for numbers

[18:27] <rightfold> ah yeah, Nil works

[18:27] <notviki> hm, OK :)

[18:27] *** cdg left
[18:27] *** cibs joined
[18:37] <lizmat> notviki: link?

[18:39] <dalek> doc: 6b4b850 | (Zoffix Znet)++ | html/css/highlights.css:

[18:39] <dalek> doc: Adjust contrast on comments highlights

[18:39] <dalek> doc: review: https://github.com/perl6/doc/commit/6b4b850031

[18:40] *** nowan left
[18:40] <notviki> .ask samcv is this file still used or can we delete it from the repo? https://github.com/perl6/doc/blob/master/html/css/pygments.css

[18:40] <yoleaux> notviki: I'll pass your message to samcv.

[18:40] <notviki> lizmat: https://github.com/briandfoy/LearningPerl6_Downloads/blob/master/Preface/find_moth_genera.p6#L23

[18:41] *** acrussell joined
[18:41] <notviki> m: sub MAIN (*@) { say "no args" }

[18:41] <camelia> rakudo-moar 660b0b: OUTPUT«no args␤»

[18:42] *** troys is now known as troys_

[18:43] <samcv> .tell notviki that file isn't used anymore. actually i just commented on the ticket "Do we want to remove the CSS or just remove it from the html template? It might be nice being able to look at the old CSS while we are tweaking the new one."

[18:43] <yoleaux> 18:40Z <notviki> samcv: is this file still used or can we delete it from the repo? https://github.com/perl6/doc/blob/master/html/css/pygments.css

[18:43] <yoleaux> samcv: I'll pass your message to notviki.

[18:44] *** pierre_ joined
[18:44] <samcv> I kind of thnk we should just remove it from the html template or something, idk maybe put it in another folder

[18:44] <samcv> but hold onto it for now

[18:44] *** acrussell left
[18:44] <samcv> ticket is here https://github.com/perl6/doc/issues/1070

[18:45] <mst> samcv: why are you using .tell when he's already in here and active two minutes ago?

[18:45] <samcv> i just woke up

[18:45] *** acrussell joined
[18:45] <samcv> 1 minute ago

[18:45] <mst> was just weird to see him be the last person to speak before your .tell

[18:45] <dalek> doc: cd078bf | (Zoffix Znet)++ | assets/sass/style.scss:

[18:45] <dalek> doc: Use absolute path for asset

[18:45] <dalek> doc: 

[18:45] <dalek> doc: So it's insensitive to location of CSS file.

[18:45] <dalek> doc: review: https://github.com/perl6/doc/commit/cd078bfb31

[18:46] <lizmat> notviki: fwiw, it looks like a WIP to me

[18:46] <samcv> i agree

[18:47] <samcv> i've removed the pygments code from the htmlify.p6 file though. so we have only two code paths, one using proc::async and one just using qx{ }

[18:47] <samcv> which cleans it up a lot compared to supporting 4

[18:47] <samcv> err proc async, inline python, qx with python and qx with highlights

[18:47] <notviki> FWIW, this weekened I'll add automated SASS converter into doc builds that I promised to do like ages ago

[18:47] <yoleaux> 18:43Z <samcv> notviki: that file isn't used anymore. actually i just commented on the ticket "Do we want to remove the CSS or just remove it from the html template? It might be nice being able to look at the old CSS while we are tweaking the new one."

[18:50] <samcv> not again. damn it. Now the Inbox in my Kmail is greyed out again. and i can't look into it anymore but will still get mail notifications in my notifications

[18:50] <notviki> hehe

[18:50] <samcv> have to re-add my account _again_

[18:50] <notviki> not-so-K-mail

[18:50] <samcv> i can open any of the subfolders but

[18:50] <samcv> ahh

[18:52] <thundergnat> \o #perl6

[18:52] <notviki> \o

[18:52] <samcv> at least it takes only like 1 minute to re-add it and remove the old one, but :\ kind of annoying

[18:52] <samcv> having to download the mail again

[18:53] <thundergnat> Is there any easy way to thunk multidim arrays generated with a sequence? 

[18:53] <thundergnat> my $n = 4; my @d = [0, |(Inf xx $n-1)], *.rotate(-1) … !*[*-1]; say @d; @d[1;2] = 'WTF'; say @d;

[18:53] <thundergnat> m: my $n = 4; my @d = [0, |(Inf xx $n-1)], *.rotate(-1) … !*[*-1]; say @d; @d[1;2] = 'WTF'; say @d;

[18:53] <camelia> rakudo-moar 660b0b: OUTPUT«[[0 Inf Inf Inf] [Inf 0 Inf Inf] [Inf Inf 0 Inf] [Inf Inf Inf 0]]␤[[0 WTF Inf Inf] [Inf 0 WTF Inf] [Inf Inf 0 WTF] [WTF Inf Inf 0]]␤»

[18:54] <notviki> samcv: what do I need to install on a box to build the doc site if I ain't got `npm` command?

[18:54] <notviki> apt-get install node?

[18:54] <PapaChub> m: say $*REPO.repo-chain.grep(*.Str.IO.d)>>.installed>>.meta>>.map(*<name>).flat

[18:54] <camelia> rakudo-moar 660b0b: OUTPUT«(Nil CORE)␤»

[18:55] <notviki> thundergnat: when you say "thunk", what do you mean?

[18:55] <samcv> notviki, yeah just install npm

[18:55] <samcv> and npm should pull in node

[18:56] <notviki> star: say $*REPO.repo-chain.grep(*.Str.IO.d)>>.installed>>.meta>>.map(*<name>).flat

[18:56] <camelia> star-m 2016.10: OUTPUT«(Nil File::Find Shell::Command JSON::Fast File::Which panda XML::Writer SVG SVG::Plot Terminal::ANSIColor Test::Mock Grammar::Profiler::Simple Grammar::Debugger MIME::Base64 URI LWP::Simple JSON::Tiny Digest::MD5 HTTP::Status Template::Mustache PSGI HTTP::Easy…»

[18:56] <samcv> not sure if it's a dependency or not of nodejs. but yeah npm

[18:56] <thundergnat> notviki: See above. I want n separate arrays, not four copies pointing to the same array.

[18:56] <PapaChub> Neat!

[18:58] <samcv> I kind of want this for perl 6's DateTime https://github.com/golang/go/issues/14595

[18:59] <samcv> unless there's something I don't know we have, but I checked all the methods for DateTime

[18:59] <samcv> would like to get the time difference between two DateTime objects

[18:59] <lizmat> m: say now - now 

[18:59] <camelia> rakudo-moar 660b0b: OUTPUT«-0.0015502␤»

[18:59] <lizmat> m: say now - now 

[18:59] <camelia> rakudo-moar 660b0b: OUTPUT«-0.0012282␤»

[19:00] <lizmat> m: say abs(now - now)  # samcv ?

[19:00] <camelia> rakudo-moar 660b0b: OUTPUT«0.0015871␤»

[19:00] <samcv> m: say DateTime.now - DateTime.now

[19:00] <camelia> rakudo-moar 660b0b: OUTPUT«Cannot resolve caller Numeric(DateTime: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[19:00] <samcv> hmm

[19:00] <lizmat> m: now.WHAT.say

[19:00] <camelia> rakudo-moar 660b0b: OUTPUT«(Instant)␤»

[19:00] <notviki> m: say DateTime.now.Instant - DateTime.new(:2017year).Instant

[19:00] <camelia> rakudo-moar 660b0b: OUTPUT«-795573.791515␤»

[19:00] <lizmat> ah

[19:00] <lizmat> hmmm...

[19:00] <notviki> m: say WHAT DateTime.now.Instant - DateTime.new(:2017year).Instant

[19:00] <camelia> rakudo-moar 660b0b: OUTPUT«(Duration)␤»

[19:01] <lizmat> you can't get a diff of two DateTime's ?

[19:01] <samcv> unless you know of a a way…

[19:01] <notviki> Well, the above is a way >:)

[19:01] <samcv> that requires like. only one line

[19:01] <lizmat> m: DateTime.now.WHAT.say

[19:01] <camelia> rakudo-moar 660b0b: OUTPUT«(DateTime)␤»

[19:01] <lizmat> m: say DateTime.now - DateTime.now

[19:01] <camelia> rakudo-moar 660b0b: OUTPUT«Cannot resolve caller Numeric(DateTime: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[19:01] <samcv> which one notviki 

[19:01] <samcv> now - now?

[19:02] <lizmat> hmmm... I think this is an oversight ?

[19:02] <notviki> m: &infix:<->.candidates».signature».gist.grep(/DateTime/).say

[19:02] <camelia> rakudo-moar 660b0b: OUTPUT«()␤»

[19:02] <lizmat> m: say Date.today - Date.today

[19:02] <notviki> m: say DateTime.now.Instant - DateTime.new(:2017year).Instant

[19:02] <camelia> rakudo-moar 660b0b: OUTPUT«-795458.316804␤»

[19:02] <camelia> rakudo-moar 660b0b: OUTPUT«0␤»

[19:02] <samcv> that's an instant though, unless you want me to convert to an instant and then subtract and then convert back to datetime? lol.

[19:03] <notviki> samcv: erm, why would the difference between two DateTimes be a DateTime?

[19:03] <samcv> i never said it would

[19:03] <notviki> You get Duration object in return

[19:03] <samcv> m: say DateTime.now - DateTime.now

[19:03] <camelia> rakudo-moar 660b0b: OUTPUT«Cannot resolve caller Numeric(DateTime: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[19:03] <notviki> samcv: but what do you mean "convert back to datetime"?

[19:03] <samcv> ok forget that part of what i said

[19:04] <notviki> OK :)

[19:04] <mst> samcv: I suspect that's a feature.

[19:04] <notviki> Is it?

[19:04] <samcv> current feature?

[19:04] <mst> I mean that the lack of - is a feature

[19:04] <mst> because ... which - did you want, exactly?

[19:04] <samcv> i just want to get the difference between two date times

[19:04] <mst> samcv: which difference?

[19:05] <mst> you're hiding the important part behind the word 'just'

[19:05] <mst> that won't make the complexity go away.

[19:05] <samcv> yes

[19:05] <samcv> the number of seconds between two datetime's would be fine

[19:05] <mst> right. but somebody else might want days and hours. somebody else months, days and hours. etc.

[19:05] <samcv> ok

[19:05] <mst> and depending on timezones and time of year and stuff

[19:05] <mst> those then add differently

[19:05] <lizmat> so basically DateTime - DateTime would be DateTime.Instant - DateTime.Instant

[19:05] <samcv> i just want the amount of time between them

[19:05] <mst> so there isn't really a one true - in datetimes

[19:06] <samcv> well. datetimes take timezone into account yes

[19:06] <mst> lizmat: and then people would blow both feet off

[19:06] <notviki> mst: how come?

[19:06] <notviki> mst: it returns a Duration object.

[19:06] <samcv> m: DateTime.now.Instant - DateTime.now.Instant

[19:06] <camelia> rakudo-moar 660b0b: OUTPUT«WARNINGS for <tmp>:␤Useless use of "-" in expression ".Instant - DateTime.now.Instant" in sink context (line 1)␤»

[19:06] <samcv> m: say DateTime.now.Instant - DateTime.now.Instant

[19:06] <camelia> rakudo-moar 660b0b: OUTPUT«-0.00337013␤»

[19:06] <samcv> kk

[19:06] <mst> notviki: which "it" ?

[19:06] <samcv> thank you.

[19:06] <mst> please can people please try and be less vague

[19:06] <notviki> mst: subtraction

[19:06] <samcv> actually i would like seconds minutes days and weeks ;P

[19:06] <notviki> mst: of two datetimes

[19:06] <samcv> but any way to subtract them is fine

[19:07] <mst> m: DateTime.now - DateTime.now

[19:07] <camelia> rakudo-moar 660b0b: OUTPUT«WARNINGS for <tmp>:␤Useless use of "-" in expression ".now - DateTime.now" in sink context (line 1)␤Cannot resolve caller Numeric(DateTime: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[19:07] <notviki> samcv: use Number::Denominate

[19:07] <mst> notviki: no it doesn't

[19:07] <lizmat> mst: we're allowing > < = <= == != <=> and cmp on DateTime,DateTime

[19:07] <mst> lizmat: *that* can work fine.

[19:07] <notviki> mst: doesn't what?

[19:07] <mst> lizmat: - can't.

[19:07] <moritz> well, - can give a Duration

[19:07] <moritz> but Durations are generally only in seconds

[19:07] <mst> moritz: which would be a footgun

[19:08] <notviki> Why is it a footgun?

[19:08] <moritz> if you want to convert them to minutes/hours/days/weeks, you'd need an anchorpoint

[19:08] <notviki> The only change is I don't have to go "oh, fuck right, I can't subtract DateTimes, I need to call .Instant on both"

[19:09] <mst> notviki: the change would be that people would use -, not think about what moritz just said, and introduce bugs

[19:09] <samcv> i mean since datetime can have different timezone's i think subtracting them is basically ignoring anchors

[19:09] <lizmat> I don't see that if we allow < > <= >= == != <=> cmp on DateTime.DateTime, then why we don't allow -  (if it's just doing the same as the other ops: use the .Instants

[19:09] <samcv> at least for me. otherwise you shouldn't try and subtract datetimes if you don't just want the difference in time between them

[19:09] <notviki> samcv: here's some hackety that gives the amount of time until new year: https://github.com/zoffixznet/perl6-IRC-Client-Plugin-HNY/blob/master/lib/IRC/Client/Plugin/HNY.pm6#L14-L17

[19:09] <mst> samcv: yeah, but people always do.

[19:10] <mst> I have spent quite a bit of time un-breaking customers' core systems because they didn't think hard enough about datetime logic

[19:10] <notviki> mst: so you're saying making the user type ".Instant" twice somehow prevents such bugs?

[19:10] * notviki doesn't follow

[19:10] <lizmat> fwiw, DateTime.Instant creates an Instant of the DateTime.posix

[19:10] <mst> right, and that means you're explicitly saying "I want to go to posix seconds, and THEN subtract"

[19:10] <lizmat> yup

[19:11] <samcv> ah i could see that being an issue i guess

[19:11] <mst> which means that if what you actually wanted was something else, it'll be obvious skimming the code

[19:11] <notviki> OK

[19:11] <lizmat> so that timezones are taken into account correctly ?

[19:11] <samcv> hmm

[19:11] <samcv> but if you want the number of hours between two things, say user one makes a post on a thread, you store it in DateTime, with timezone etc. and user 2 also posts stored in a datetime. you want to display to each user the amount of time elapsed since the other's post

[19:12] <samcv> not taking into account calendar days/months/years etc

[19:12] <notviki> mst: so what's the difference between posix seconds and whatever seconds DateTime uses?

[19:12] <mst> that's the thing though

[19:12] <samcv> so just want the seconds and then can decide what to show each user in relative time not from their timezone, but the lengths of days or weeks

[19:13] <mst> there is a conscious decision to be made there

[19:13] <samcv> i mean your own logic can choose what to display, but you only want to know the difference

[19:13] *** troys_ is now known as troys

[19:14] <samcv> ok it looks like Go returns a Duration

[19:14] <samcv> when you call .Since

[19:15] <notviki> you can subtract two Dates

[19:15] <notviki> m: say Date.today - Date.new(:2017year)

[19:15] <camelia> rakudo-moar 660b0b: OUTPUT«-10␤»

[19:15] <notviki> -10

[19:15] <notviki> ?

[19:15] <samcv> -10 days

[19:15] <notviki> m: say WHAT Date.today - Date.new(:2017year)

[19:15] <camelia> rakudo-moar 660b0b: OUTPUT«(Int)␤»

[19:15] <notviki> wtf

[19:15] *** grondilu left
[19:15] <samcv> haha

[19:15] <mst> this is the thing. any possible return value can be surprising

[19:15] <samcv> dates are only by dates right though... not by time

[19:16] <samcv> what do we use for > < etc though

[19:16] <mst> I mean, sometimes you'd want the difference to be "35 days", sometimes "1 month 5 days"

[19:16] <mst> and that requires context carried along because months aren't always the same length etc.

[19:16] <notviki> Yeah, but Duration is not affected by that.

[19:17] <samcv> well then you can use that difference, that duration

[19:17] <notviki> It's an actual object, not a random Int that could mean anything

[19:17] <samcv> to calculate the date for each person

[19:17] <mst> a Duration is basically a pair of DateTimes?

[19:17] <moritz> no, a number of seconds

[19:17] <notviki> number of atomic seconds

[19:17] *** grondilu joined
[19:17] <mst> ah. well, as I say, that can easily be not-what-you-meant

[19:18] <samcv> but if there's 90000seconds between two datetime's can't you figure out from each original datetime object how many days/weeks/months from each original timezone and datetime object

[19:18] <mst> yes. but my point is that there's more than one possible interpretation

[19:19] <notviki> m: say Date.today - Date.new(:201700year)

[19:19] <camelia> rakudo-moar 660b0b: OUTPUT«-72932728␤»

[19:19] <mst> and I strongly believe that making people think about which one they want is a good thing

[19:19] <notviki> m: say Date.today - 42

[19:19] <camelia> rakudo-moar 660b0b: OUTPUT«2016-11-10␤»

[19:19] <notviki> um... mkay

[19:20] <samcv> XD

[19:20] *** ponbiki joined
[19:20] <notviki> mst: what's your opinion on the Date - 42 above? Is that also a footgun?

[19:20] *** ponbiki is now known as Guest33965

[19:21] <mst> entirely possible, though every time I've seen this screwed up in the wild it's been a screw up using full datetime objects

[19:21] <mst> then again in p5 usually people are using DateTime which doesn't have a straight up date so

[19:21] <notviki> Alright.

[19:21] <mst> I'm sorry, I'm trying to unpack an instinctual 'aaaaa' here

[19:22] <mst> I'm conscious I'm not explaining things quite as clearly as I might :/

[19:22] <samcv> i understand what you mean mst

[19:22] <mst> have you played with postgres' interval types?

[19:22] *** grondilu left
[19:22] <notviki> Well, I trust your judgement :)

[19:22] <samcv> i have not mst.

[19:22] <mst> they have INTERVAL 1 MONTH, INTERVAL 1 DAY, INTERVAL 1 SECOND etc.

[19:22] <lizmat> fwiw, Date is timezone agnostic

[19:23] <samcv> Date is not compatible with Mars time.

[19:23] <samcv> :(

[19:23] <mst> and those are different things and add to a date differently, in the obvious way

[19:23] *** grondilu joined
[19:23] <samcv> mst, so they add to the Date, don't add time to it

[19:23] <samcv> am i correct

[19:23] <samcv> err by time i mean, interval

[19:23] <mst> samcv: well, a date plus an interval in seconds would IIRC return a datetime

[19:23] <mst> a date plus an interval in days would return a date

[19:23] <mst> etc.

[19:23] <moritz> Date and DateTime have that as arguments to the .delta method

[19:24] <moritz> not as separate objects though

[19:24] *** pierre_ left
[19:24] <mst> but that allows you to specify the units

[19:24] <mst> *personally* I'd suggest that you could add a - to DateTime that says "you wanted .delta or .Instant" or so

[19:24] *** darutoko left
[19:24] <moritz> m: say Date(2016, 1, 31).delta(:month(1))

[19:24] <camelia> rakudo-moar 660b0b: OUTPUT«Cannot find method 'Date' on object of type List␤  in block <unit> at <tmp> line 1␤␤»

[19:24] <mst> and that that would be more likely to cause users to pick the one they actually wanted

[19:24] <moritz> m: say Date.new(2016, 1, 31).delta(:month(1))

[19:24] <camelia> rakudo-moar 660b0b: OUTPUT«No such method 'delta' for invocant of type 'Date'␤  in block <unit> at <tmp> line 1␤␤»

[19:25] <moritz> m: say Date.new(2016, 1, 31).add(:month(1))

[19:25] <camelia> rakudo-moar 660b0b: OUTPUT«No such method 'add' for invocant of type 'Date'␤  in block <unit> at <tmp> line 1␤␤»

[19:25] <notviki> .later

[19:25] <moritz> man, what's it called again?

[19:25] <moritz> thanks

[19:25] <moritz> m: say Date.new(2016, 1, 31).later(:month(1))

[19:25] <camelia> rakudo-moar 660b0b: OUTPUT«2016-02-29␤»

[19:25] <mst> providing a plain - seems to me like it'd have exactly the same problems as conflating addition and string concat as operators

[19:25] <mst> i.e. it would be a violation of perl6's "operators should not be fuzzy" principle, or so

[19:25] <lizmat> moritz: :month cannot change month

[19:25] <mst> am I starting to make a bit more sense here?

[19:26] <notviki> mst: yeah

[19:26] <moritz> mst: I understand your point of view

[19:26] <samcv> in my mind the minus should subtract the times, and though there may be better ways to do it, for some uses it is fine. so should we just call .Instant on it and subtract

[19:26] <chansen_> p6 DateTime represent a date with time of day combined with an optional offset from UTC (it's anchored on the global timeline), subtracting two DateTime's could return a duration of time (with the same precision as DateTime) between the instants of the DateTime's.

[19:26] <samcv> mst, yeah i totally get where you are coming from

[19:27] *** labster joined
[19:27] <mst> samcv: that's absolutely a valid thing to want to do, I just think explicitly subtracting the instances for that case will be more clear to the next developer to look at it

[19:27] <mst> aha, we attracted a chansen_. excellent. he understands the footguns here better than I do

[19:27] <mst> I've just had to debug 'em in the wild a few times

[19:27] <moritz> I'm not entirely convinced we absolutely need a richer Duraiton object though, or that it allows well-defined semantics for the operations we allow now

[19:28] <mst> I'm not really convinced of anything except that "trying to make - dwim is probably going to end up being 'do what I sometimes meant and sometimes introduce subtle bugs'"

[19:28] <mst> and, if I wanted that, I know where to find perl5 ;)

[19:29] <moritz> if somebody prototyped more convincing semantics in a module, and it worked out, I could well imagine it being adopted into core

[19:29] <rightfold> Just wrote my first Perl 6 program since a looooong time :)

[19:29] <notviki> \o/

[19:30] <mst> moritz: I think more thought is required to know what 'more convincing semantics' is - just I'm not convinced that "just make the .Instant implicit" would be a remotely good idea

[19:30] <mst> also if it turns out to be a bad idea, it'd be a bad idea that's nontrivial to walk back from later

[19:30] <samcv> ^

[19:31] <samcv> i totally agree with that part for sure

[19:31] <mst> I wrote http://shadow.cat/blog/matt-s-trout/your-design-sucks/ to remind me of just how much fun this class of mistakes isn't

[19:32] <rightfold> notviki: it has your regex in it :)

[19:32] <chansen_> moritz: Duration is fine as long it guaranties $duration = $dt1 - $dt2; and $dt1 == $dt2 + $duration;

[19:33] <notviki> rightfold: awesome. My part in the annihiliation of the world is complete.

[19:34] <moritz> chansen_: I'm pretty sure that's an invariant that holds in Perl 6

[19:34] *** lucasb joined
[19:36] <tailgate> what does the :x adverb do in a regular expression?

[19:37] <chansen_> moritz: excellent, then DateTime should provide an overloaded operator for DateTime - DateTime which returns a Duration

[19:38] <mst> and Duration is just seconds?

[19:38] <notviki> s: "".match: /^/, :x

[19:38] <SourceBaby> notviki, Something's wrong: ␤ERR: Cannot resolve caller sourcery(List); none of these signatures match:␤    ($thing, Str:D $method, Capture $c)␤    ($thing, Str:D $method)␤    (&code)␤    (&code, Capture $c)␤  in block <unit> at -e line 6␤␤

[19:38] <notviki> s: "", 'match', \(/^/, :x)

[19:38] <SourceBaby> notviki, Sauce is at https://github.com/rakudo/rakudo/blob/660b0b9/src/core/Str.pm#L990

[19:38] *** grondilu left
[19:38] <notviki> oh

[19:39] <notviki> tailgate: like in times

[19:39] <notviki> m: say "ooooooo" ~~ m:3x/./

[19:39] <camelia> rakudo-moar 660b0b: OUTPUT«(｢o｣ ｢o｣ ｢o｣)␤»

[19:39] <notviki> m: say "abcdefg" ~~ m:3x/./ # better example

[19:39] <camelia> rakudo-moar 660b0b: OUTPUT«(｢a｣ ｢b｣ ｢c｣)␤»

[19:39] <geekosaur> enodoc

[19:39] <tailgate> thanks

[19:40] <chansen_> mst: seconds with fractions (Rat or a FatRat)

[19:40] <notviki> I think there's an Issue for .match() so that'd be part of it IMO

[19:40] *** grondilu joined
[19:40] <mst> chansen_: ah, yeah, that could probably not be completely unsane

[19:40] <mst> note that if chansen_ says something isn't a footgun, I'm happy to assume it isn't, for this topic

[19:40] <mst> chansen_: you can see where my paranoia about people not considering their units in date+time math comes from though, right?

[19:41] <notviki> OK, then we'll add DateTime - DateTime op

[19:41] <notviki> .oO( DateTime - Duration = DateTime....)

[19:41] <chansen_> mst: as long as $duration = $dt1 - $dt2; and $dt1 == $dt2 + $duration; is guarantied, returning a Duration is fine (moritz said that it holds for p6 ^^) 

[19:42] <mst> chansen_: I think you have 1 and 2 reversed in the second of those?

[19:42] <mst> er, wait, no, never mind

[19:42] <notviki> .... and you have a degree in maths? :)

[19:43] <mst> turns out a degree in maths doesn't prevent one occasionally Being Bloody Stupid

[19:43] <notviki> :}

[19:44] <notviki> So we need DateTime - DateTime = Duration; DateTime - Duration = DateTime; DateTime + Duration = DateTime; Duration + DateTime = DateTime

[19:45] <chansen_> yeah

[19:45] <notviki> Cool. Will take care of it on the weekend unless someone beats me to it.

[19:49] <arnsholt> mst: Re: Your design sucks, I'm feeling that at my new job, these days

[19:49] <arnsholt> Especially the last one, the system having been in production continuously for 20 years

[19:50] <mst> arnsholt: right. it's a useful reminder of just how many assumptions you're going to bake in and how even if they're all correct *now*, in a while they probably won't be, so

[19:50] <arnsholt> Definitely

[19:52] <arnsholt> (Smalltalk is kinda cool though)

[19:52] <notviki> Oh yeah, I remember when I thought MooTools was awesome and jQuery was hipster's fad.... Now I have a 100,000 lines of code that uses MooTools I remember nothing about :)

[19:54] *** grondilu left
[19:55] * moritz bet on YUI, before jquery was the clear winner

[19:55] <moritz> luckily it was just 200loc or so

[19:55] *** acrussell left
[19:56] *** grondilu joined
[19:58] <RabidGravy> there's a lot of YUI in the front end of the code I'm working with at the moment

[19:59] *** AlexDaniel joined
[20:00] *** teksteiner left
[20:01] *** grondilu_ joined
[20:03] *** lucasb left
[20:03] *** grondilu left
[20:05] *** labster left
[20:05] *** pierre__ joined
[20:05] <dalek> doc: 3a26646 | samcv++ | / (2 files):

[20:05] <dalek> doc: Remove old pygments css and reference in head.html

[20:05] <dalek> doc: 

[20:05] <dalek> doc: Issue #1070

[20:05] <dalek> doc: review: https://github.com/perl6/doc/commit/3a26646108

[20:06] <notviki> \o/

[20:09] *** troys is now known as troys_

[20:13] <notviki> thundergnat: totally forgot about your thing. Did you figure it out?

[20:13] <notviki> .clone before .rotate is an obvious choice, but it's broken on Arrays :}

[20:13] <notviki> thundergnat: oh, .Array before .rotate works in a pinch

[20:14] <notviki> well and without pinches, I guess :)

[20:14] <notviki> m: my $n = 4; my @d = [0, |(Inf xx $n-1)], *.Array.rotate(-1) … !*[*-1]; say @d; @d[1][2] = 'WTF'; say @d;

[20:14] <camelia> rakudo-moar 0db081: OUTPUT«[[0 Inf Inf Inf] [Inf 0 Inf Inf] [Inf Inf 0 Inf] [Inf Inf Inf 0]]␤[[0 Inf Inf Inf] [Inf 0 WTF Inf] [Inf Inf 0 Inf] [Inf Inf Inf 0]]␤»

[20:14] <notviki> m: my $n = 4; my @d = [0, |(Inf xx $n-1)], *.Array.rotate(-1) … !*[*-1]; say @d; @d[1;2] = 'WTF'; say @d;

[20:14] <camelia> rakudo-moar 0db081: OUTPUT«[[0 Inf Inf Inf] [Inf 0 Inf Inf] [Inf Inf 0 Inf] [Inf Inf Inf 0]]␤[[0 Inf Inf Inf] [Inf 0 WTF Inf] [Inf Inf 0 Inf] [Inf Inf Inf 0]]␤»

[20:16] * geekosaur didn't read that fully the first time and wondered if WTF was the new NaN

[20:16] *** bjz joined
[20:16] <notviki> it is!

[20:17] <notviki> m: NaN does "WTF";

[20:17] <camelia> rakudo-moar 0db081: OUTPUT«Cannot mix in non-composable type Str into object of type Num␤  in block <unit> at <tmp> line 1␤␤»

[20:17] <notviki> m: NaN does role { method gist { "WTF" } }; say tan Inf

[20:17] <camelia> rakudo-moar 0db081: OUTPUT«NaN␤»

[20:17] <notviki> aww

[20:19] <samcv> m: say Q🇦🇺test🇦🇺

[20:19] <camelia> rakudo-moar 0db081: OUTPUT«test␤»

[20:19] <samcv> m: say Q<🇦🇺>.ords

[20:19] <camelia> rakudo-moar 0db081: OUTPUT«(127462 127482)␤»

[20:20] <notviki> m: say Q<  >.ords».base: 16

[20:20] <camelia> rakudo-moar 0db081: OUTPUT«(20 20)␤»

[20:20] <notviki> :S

[20:20] <notviki> stupid terminal

[20:21] <samcv> m: say Q👩‍🎤test👩‍🎤

[20:21] <camelia> rakudo-moar 0db081: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3say Q👩‍🎤test👩‍7⏏5🎤␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement mo…»

[20:21] *** labster joined
[20:21] <samcv> ok i found a bug

[20:21] <notviki> cool. What is it?

[20:21] <samcv> oh, those are emoji combining sequences

[20:21] <samcv> so should be treated as only one character

[20:21] <notviki> ZWS?

[20:21] <samcv> we don't support emjoi properties in moarvm atm. have a ticket for that

[20:21] <samcv> yeah

[20:21] <samcv> exactly

[20:21] <notviki> I think those are NYI 

[20:22] <samcv> yep

[20:22] <samcv> the flags worked fine though

[20:22] <samcv> but they aren't ZWS

[20:22] <samcv> m: say Q<👩‍🎤>.chars

[20:22] <camelia> rakudo-moar 0db081: OUTPUT«2␤»

[20:22] <samcv> that should be 1 too

[20:23] <samcv> uhm where should I add that to roast. hm

[20:23] <samcv> m: say Q<👩‍🎤>.ords

[20:23] <camelia> rakudo-moar 0db081: OUTPUT«(128105 8205 127908)␤»

[20:23] <thundergnat> notviki: Ah. Cool. Thanks. I had resorted to constructing the array in one statement and then rotating in another, which worked but offended me slightly.

[20:23] <samcv> yeah. they have a zero width joiner between them

[20:25] <samcv> not sure if we should detect them as one character because of the joiner yet… idk i'm going down the rabbit hole of unicode lately

[20:25] <notviki> Last I recall them being mentioned the ZWS were still not final standard.

[20:26] <samcv> nope

[20:26] <samcv> http://unicode.org/emoji/charts/full-emoji-list.html

[20:26] <samcv> it includes zws

[20:27] <samcv> zwj i mean

[20:27] <jdv79> should https://docs.perl6.org/type/Supplier::Preserving be a 404?

[20:27] <samcv> m: say Q<‍🙇🏼‍♀️>.chars

[20:27] <camelia> rakudo-moar 0db081: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Couldn't find terminator <‍ (corresponding <‍ was at line 1)␤at <tmp>:1␤------> 3say Q<‍🙇🏼‍♀️>.chars7⏏5<EOL>␤    expecting any of:␤        <‍␤»

[20:27] <samcv> ahhh

[20:27] <samcv> :(

[20:28] <notviki> jdv79: where did you get that URL from?

[20:28] <jdv79> the type graph on the Supplier doc

[20:28] <thundergnat> notviki: The code in the wild.  http://rosettacode.org/wiki/Floyd-Warshall_algorithm#Perl_6

[20:28] <notviki> heh

[20:29] <notviki> jdv79: it needs to spectested and then documented.

[20:29] <samcv> m: my $emoji-4 = "\x[1F647]\x[1F3FC]\x[200D]\x[2640]\x[FE0F]"; say $emoji-4.chars;

[20:29] <camelia> rakudo-moar 0db081: OUTPUT«Use of uninitialized value of type Any in numeric context␤  in block <unit> at <tmp> line 1␤Cannot modify an immutable Int␤  in block <unit> at <tmp> line 1␤␤»

[20:29] *** lichtkind__ joined
[20:29] <samcv> what

[20:29] <RabidGravy> I think Supplier::Preserving is just an implementation detail

[20:30] <notviki> jesus that emoji page is raping my poor bandwidth

[20:30] <notviki> RabidGravy: nope

[20:30] <notviki> RabidGravy: I double checked with jnthn++ and he said it's OK to spectest adn document it

[20:30] <notviki> And I said "sweet, I'll do it then"

[20:30] <jdv79> S::P is used in Proc::Async

[20:30] <RabidGravy> ah okay

[20:30] <notviki> .... and forgot all about it :)

[20:31] <samcv> oh duh

[20:31] <samcv> m: my $emoji = "\x[1F647]\x[1F3FC]\x[200D]\x[2640]\x[FE0F]"; say $emoji.chars;

[20:31] <camelia> rakudo-moar 0db081: OUTPUT«3␤»

[20:32] <notviki> thundergnat: FWIW it's completely unreadable

[20:33] <notviki> Compared to JS and PHP versions, feels like the programmer tried to stuff as many clever Perl 6 features into it as they could :)

[20:33] *** lichtkind_ left
[20:34] <thundergnat> notviki: You aren't completely wrong. 

[20:35] <AlexDaniel> samcv: there's something wrong with highlighting here? https://docs.perl6.org/routine/mkdir

[20:35] <notviki> thundergnat: :)

[20:35] <samcv> is there AlexDaniel ?

[20:35] <samcv> it looks fine?

[20:35] <AlexDaniel> samcv: “mkdir” is highlighted like “sub”

[20:35] <samcv> let me check how it's tagging it

[20:35] * notviki sees it too

[20:36] *** domidumont left
[20:36] <notviki> Well, I'd rather say `sub` is not highlight the same as `multi` and `method` :)

[20:36] <samcv> yes it is AlexDaniel :)

[20:36] <samcv> (incorrect)

[20:37] <samcv> ah ok. it's because of the sequence 

[20:37] *** Hooyah joined
[20:38] <samcv> it doesn't highlight wrong on its own line

[20:38] <samcv> without the things above it

[20:38] *** Hooyah left
[20:38] *** cdg joined
[20:38] <notviki> Is it? In my Atom all `multi` blah are not highlighted correctly

[20:39] <notviki> samcv: try this: https://gist.github.com/zoffixznet/99ef4e74767c0845ab930898b09b46aa

[20:39] <samcv> oh wait

[20:39] * notviki leaves for $work emergency

[20:39] <samcv> the bug is in mkdir above it not highlighting rigth

[20:39] <notviki> samcv: it highlights the word after `multi` as if it were a name

[20:39] <samcv> with 'multi sub' not with the third line

[20:39] <samcv> yep

[20:40] <samcv> i'll open an issue to the highlighter and fix it sometime today

[20:41] *** rindolf left
[20:41] *** cdg left
[20:41] *** cdg joined
[20:42] <samcv> i remember fixing a similar issue here with another combination, and adding a test for it to the test units

[20:42] <samcv> but i must have broken this as a side effect :P

[20:44] *** rindolf joined
[20:45] <AlexDaniel> I can't believe we have a decent highlighter on docs.perl6.org now!

[20:46] <notviki> \o/

[20:46] <AlexDaniel> the colors need to be adjusted a little bit, but that's ok

[20:47] <AlexDaniel> (e.g. comments are gray on gray, not enough contrast)

[20:47] <AlexDaniel> samcv: I have a question!

[20:48] <notviki> configure your monitor! :?)

[20:48] <AlexDaniel> notviki: or force proper contrast through browser user styles

[20:48] <rightfold> Is a submethod a private method?

[20:48] <AlexDaniel> no, let's just fix the colors

[20:48] *** grondilu joined
[20:48] <AlexDaniel> samcv: here: https://docs.perl6.org/type/Str#routine_parse-base

[20:48] <notviki> rightfold: nope

[20:48] <AlexDaniel> samcv: ｢1337.base(32).parse-base(32).say｣

[20:49] <notviki> rightfold: it's not inherited by subclasses

[20:49] <rightfold> Oh right

[20:49] <notviki> private methods are:  method !meow {...}

[20:49] <AlexDaniel> samcv: “base” is black, “parse-base” is not

[20:49] <AlexDaniel> samcv: is there any reason for it?

[20:50] <notviki> ^ on that topic, I noticed .utc wasn't highlighted as a methiod

[20:50] <notviki> QUICK, EVERYONE! PILE WORK ON SAMCV!

[20:50] *** grondilu_ left
[20:50] <notviki> :}

[20:51] <rightfold> I also get VS Code trouble with single quoted strings

[20:51] <rightfold> It doesn't highlight correctly

[20:56] *** andrzejku joined
[20:57] <samcv> one's tagged as support function and one as routine name

[20:57] <samcv> routine name aka highlighter didn't tag it with anything but 'generic'

[20:58] <samcv> but the chrome/firefox developer tools to see what it's tagged as is yoru friend :)

[20:58] <samcv> please open bug reports about everything you find :)

[20:58] <samcv> i have to do some holiday things with family but I will fix them all tonight :)

[20:59] <samcv> https://github.com/perl6/atom-language-perl6/issues/new << :D

[20:59] <samcv> just link to the page it's on and say what's not highlighted right that should be fine

[21:01] <colomon> samcv++

[21:06] *** grondilu left
[21:06] *** grondilu_ joined
[21:10] *** cdg_ joined
[21:11] *** cdg left
[21:12] * [Coke] j

[21:12] <AlexDaniel> k

[21:13] *** spider-mario left
[21:14] *** spider-mario joined
[21:15] *** jpc joined
[21:20] <[Coke]> saw discussion in backscroll about compose - there's a perl 6 input keyboard mapping for os x.

[21:21] *** troys_ is now known as troys

[21:24] *** Tonik joined
[21:26] <rightfold> can run redirect output to a file?

[21:26] <moritz> rightfold: shell can

[21:26] *** Tonik left
[21:26] *** Tonik joined
[21:27] <moritz> or wait

[21:27] <moritz> my $out = open :w, 'targetfile.txt'; run 'echo', 'foo', :$out; $out.close

[21:27] <moritz> that should also work

[21:31] *** FROGGS joined
[21:35] <jdv79> attr defaults and custom build don't mix, right?

[21:36] <moritz> right

[21:36] <moritz> though if you use TWEAK instead of BUILD, you should be fine

[21:37] <moritz> (though TWEAK is a 2016.11+ feature, iirc)

[21:37] <jdv79> uh, ok

[21:37] <AlexDaniel> bisect: class foo { method TWEAK { say ‘hi’ } }; foo.new

[21:38] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=0db0810) because on both starting points the exit code is 0

[21:38] <RabidGravy> in my last contract I wrote a thingy in node.js as a middleware between RabbitMQ and a client browser, it grew to be quite large.  I've just made something that does the in Perl 6 with HTTP::Server::Tiny , Net::AMQP and a little something I am working on, in about ten lines of code :)

[21:38] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/4812a292a460c1533687ee72d7f46229

[21:38] <bisectable6> AlexDaniel, (2016-11-05) https://github.com/rakudo/rakudo/commit/9409d685b78f83435aa9420f3a76fa79aae73698

[21:38] <moritz> TWEAK runs after the BUILD chain

[21:38] <moritz> RabidGravy: nice! :-)

[21:38] *** Tonik left
[21:38] <perlpilot> RabidGravy: you gonna share?  :)

[21:40] <moritz> "Perl 6 by Example" now has 6 chapters

[21:40] <RabidGravy> moritz++ # coolio

[21:40] <moritz> https://leanpub.com/perl6

[21:40] <perlpilot> moritz++ now *that's* nice!  :)

[21:41] <RabidGravy> perlpilot, it'll be an example in https://github.com/jonathanstowe/EventSource-Server when I commit it :)

[21:41] <moritz> and I'm working on the example for chapter 7 and possibly 8 right now

[21:41] <moritz> which introduces promises, and a wee bit of channel and supply

[21:42] <perlpilot> moritz: heh, I was *just* about to ask if you were going to get to those

[21:42] <[Coke]> moritz++

[21:42] <AlexDaniel> yea, moritz++

[21:43] * moritz considers a #perl6 Christmas sale

[21:43] <perlpilot> RabidGravy: btw, I didn't mean to imply that your work was undeserving of moritz's "nice!" because it most certainly is.

[21:43] <perlpilot> RabidGravy++

[21:44] <RabidGravy> no, no that's fine, that's basically a hack that I've had sitting in a gist for a year and never got round to doing anything with

[21:44] <perlpilot> moritz: you should have applied for a TPF grant ;)

[21:45] <moritz> perlpilot: :-)

[21:46] <moritz> alright, https://leanpub.com/perl6/c/christmas gives you 66% discount until Christmas

[21:46] <moritz> (and of course free updates whenever a new book version is published)

[21:47] <AlexDaniel> It's good to know that there is at least one person writing a book about perl 6 who knows which bug tracker is for rakudo bugs and which one is for docs! I don't mean anybody in particular, of course… just saying…

[21:47] <AlexDaniel> sorry, couldn't hold it :P

[21:47] <[Coke]> to be fair, it's not like the bug reporting situation isn't confusing.

[21:48] <[Coke]> So I think the snark is misplaced.

[21:48] <moritz> the docs do contain a footer informing about where to report bugs for them

[21:49] <moritz> that's not perfect, but it gives people the option to find the right bug tracker

[21:49] <moritz> (provided they put in the effort)

[21:49] *** colomon left
[21:49] *** espadrine joined
[21:49] <moritz> erm no, the footer doesn't contain a direct link to the issue tracker

[21:50] <moritz> just to the github repo

[21:50] <moritz> we might want to change that

[21:50] <moritz> though the footer is already getting full

[21:50] <moritz> we could split it up into boxes :-)

[21:50] <moritz> one for legal

[21:50] <rightfold> does Perl 6 use UTF-16 instead of UTF-8 on Windows for stdout?

[21:50] <AlexDaniel> [Coke]: perhaps. But so far most people were able to direct their bug reports into the right bug trackers. There are some infrequent misses, but that's ok

[21:51] <moritz> one for finding the sources, one for legal (copyright, cookie notice), one for version information

[21:51] <jpc> Hi, May I ask a question on how to use a Perl6 grammar ?

[21:52] *** colomon joined
[21:52] *** bjz left
[21:52] <AlexDaniel> jpc: have you seen this? https://docs.perl6.org/language/grammar_tutorial

[21:53] <jpc> I think ..

[21:53] <moritz> sure, ask

[21:53] <jpc> this is smy question :

[21:53] <jpc> I'm trying to use perl6 and his grammar feature. The following code works well and help me to recognize instructions starting by '\' and ending by ' ;' : __________________________________________ $ cat test031.pl6 #!/opt/rakudo-star-2016.10/bin/perl6 use v6;  grammar SQLP {   rule  TOP     {^^<cmdsqlplist> }     rule cmdsqlplist  { <cmdsqlp> * }     rule cmdsqlp  { :r  [^^'\\' <ff> ';'] }     token ff     { <-[\\;]>* } }   my $ctl = q

[21:53] <jpc> oups  ...

[21:53] <moritz> jpc: please use a pastebin for pasing more than one line of code

[21:53] <notviki> http://doc.perl6.party/ is now fully built, looks like

[21:53] <jpc> No sure you can read it ...

[21:54] <geekosaur> use a pastebin, more readable and not interrupted by other irc traffic

[21:54] <geekosaur> dpaste.de, lpaste.net, pick your poison...

[21:54] <AlexDaniel> notviki: what's the trick? What's going to be there?

[21:54] <jpc> Sorry, How can I use a pastebin ?

[21:55] <notviki> jpc, definitely not. This is why people use a pastebin or gist: http://m.imgur.com/Uzo3iyQ

[21:55] <moritz> jpc: you go to a pastebin website, copy&paste your code in there, and tell us the URL that the pastebin generated for you

[21:55] <notviki> jpc  is there a URL in the /topic?

[21:56] <notviki> jpc, https://gist.github.com is good

[21:56] <RabidGravy> can you use that without being logged in?

[21:56] <jpc> Ok, many thanks I will do that and i come back.

[21:56] <notviki> AlexDaniel, I'm making a hostile fork of the docs. Gonna make a Party edition :)

[21:57] <notviki> RabidGravy, I've seem anonymous gist, so probably yes

[21:57] <[Coke]> RabidGravy: yes. you can make anon gists

[21:57] <AlexDaniel> notviki: nice. I wonder what would google search think about this

[21:57] <notviki> AlexDaniel, Issue 1070

[21:58] <RabidGravy> I just don't think I've ever not been logged in to github :)

[21:58] <notviki> AlexDaniel, clearly the Party edition is superior ;)

[21:59] *** FROGGS left
[22:01] <notviki> .oO( that's a long trip to the pastebin )

[22:01] *** bjz joined
[22:01] <jpc> Are you able to see my question at https://gist.github.com/anonymous/110c2f1b13d283014c6033f034e01d16 ?  (again, sorry for my first tentative.)

[22:02] *** skids left
[22:02] <notviki> jpc, try changing 'rule' to 'token'

[22:03] <jpc> I'm checking

[22:03] <notviki> rules insert <ws> tokens in whitespace gaps that eat newlines

[22:03] <moritz> right; notviki++ is too fast for /me old man

[22:04] <notviki> \o/

[22:04] <moritz> did I mention that I found the first white hairs in my beard yesterday?

[22:04] <moritz> does $$ eat an \n ?

[22:04] <perlpilot> no

[22:04] <perlpilot> $$ is zero-width just like $

[22:04] <moritz> then you might need an explicit \n? somewhere

[22:04] <jpc> token or rule this is the same result ...

[22:05] <moritz> m: say "a\nb\n" ~~ /^ [^^.$$]+ $/

[22:05] <camelia> rakudo-moar 0db081: OUTPUT«Nil␤»

[22:05] <moritz> m: say "a\nb\n" ~~ /^ [^^.$$\n?]+ $/

[22:05] <camelia> rakudo-moar 0db081: OUTPUT«｢a␤b␤｣␤»

[22:05] <moritz> jpc: ^^ see?

[22:06] <jpc> hmmm you write $$\n   when I write only $$

[22:07] <moritz> *something* has to eat the \n character in the input string

[22:07] <moritz> jpc: fwiw Grammar::Tracer can help you find such errors

[22:09] <jpc> ok I will have a look on this tracer. Thanks a lot

[22:13] <moritz> btw as a user I'm constantly annoyed that there's no shortcut for { $obj.method($_) }

[22:14] <moritz> so, some way to get a method as a code object, but bound to a specific object already

[22:15] *** sena_kun left
[22:15] <moritz> in python, that's just obj.method

[22:15] <RabidGravy> yeah, I keep wanting to do that

[22:15] <moritz> my current use case is: for $proc.stdout, $proc.stderr -> $supply { $supply.tap: { $collector.send($_) } }

[22:16] <moritz> I want to write $supply.tap: $collector.&send or something like that

[22:16] <RabidGravy> yeah, those are the kind of places I want to use it tooo

[22:16] <moritz> or if we can't come up with a nice syntax, we could at least provide a method in Any or Mu

[22:17] <moritz> $collector.bound('send')

[22:17] <mst> in perl5, that's $collector->curry::send

[22:18] <RabidGravy> and $obj.^lookup("send").assuming($obj);

[22:19] <moritz> mst: since when?

[22:19] <perlpilot> we could use a cute "curry" keyword like that.

[22:20] <mst> moritz: 2012: https://metacpan.org/pod/curry

[22:20] <mst> moritz: perl5 is sufficiently powerful it didn't require a core feature, just an unsane mst

[22:20] <mst> s/powerful/bendable/ or whatever, but y'know

[22:20] <moritz> mst: ah, I thought it was in core :/

[22:21] <mst> moritz: that wouldn't've helped using it for fatpacked apps that support 5.8.x

[22:21] <mst> if somebody wanted to propose it for core, I wouldn't stop them

[22:22] <mst> but it being a zero-dep single file pure-perl module

[22:22] <mst> it's hardly a burden

[22:23] <moritz> mst: at $work we still deploy Perl packages as separate .deb packages, which means it *is* an extra burden

[22:24] <mst> moritz: I've worked in environments where that was the case and automated the deb building sufficiently it wasn't

[22:24] *** madjestic joined
[22:24] <mst> dunno if debian-perl packaged it for you yet

[22:25] <moritz> run dh-make-perl over it, create a build pipeline to upload it to the repos, update the pipeline whenever there's a new Debian version, add it as a depency to the projects that use it

[22:25] <moritz> not huge, but significant

[22:25] *** cdg_ left
[22:25] <mst> generally I'm using sufficient modules across any given platform that adding one is only barely significant

[22:25] * moritz wants a dh-perlbrew or a dh-carton or something similar

[22:25] <mst> especially one with no transitive deps

[22:25] <mst> ah, yeah, I keep meaning to try and write dh-carton

[22:26] *** pyrimidine left
[22:26] <mst> thing is, 'carton install --deployment' followed by 'tar czf' followed by 'fpm' already works

[22:29] *** Exodist joined
[22:30] *** troys is now known as troys_

[22:35] *** bjz left
[22:36] * [Coke] looks forward to the holidays.

[22:40] <notviki> woooo... Warframe just released a whole bunch of new content \o/

[22:40] <notviki> So much for my hacking plans  :P

[22:40] <AlexDaniel> :'(

[22:44] <moritz> m: class A { has Str:D $.x }

[22:44] <camelia> rakudo-moar 0db081: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable definition of type Str:D requires an initializer␤at <tmp>:1␤------> 3class A { has Str:D $.x 7⏏5}␤»

[22:44] <moritz> why?

[22:44] <moritz> for 'my' variables, I understand that error

[22:45] <moritz> but for attributes, the initialization can happen elsewhere (like in .new or BUILD)

[22:45] <timotimo> some of the questions bdf asks on stackoverflow are really very strange to me

[22:46] *** raiph left
[22:47] *** bjz joined
[22:49] *** Praise joined
[22:49] *** Praise left
[22:49] *** Praise joined
[22:50] <[Coke]> Same.

[22:50] <notviki> m: class A { has Str:D $.x is required }

[22:50] <camelia> rakudo-moar 0db081: ( no output )

[22:50] *** cpage_ left
[22:50] <notviki> timotimo: like what? 

[22:51] <[Coke]> is required mucks with the initializer so the check is defered until new is complete. IIRC.

[22:51] <timotimo> https://stackoverflow.com/questions/41290618/does-an-anonymous-parameter-in-a-perl-6-signature-discard-the-value

[22:51] <moritz> [Coke]: ah, thanks

[22:52] <AlexDaniel> notviki: what was the thing that converted markdown to wordpress format?

[22:53] <notviki> timotimo: well, I don't know. He's an expert Perl 6 programmer who's writing a Perl 6 book. His questions are beyond us mere mortals to ponder.

[22:53] <[Coke]> Again, the snark probably not helpful. :)

[22:54] <timotimo> it's good that he's bringin in some more insights as to what might confuse people

[22:55] <notviki> AlexDaniel: https://gist.github.com/zoffixznet/e8d7d24f5579f42cafedc6b954f72a87

[22:55] <notviki> huggable: wordpress :is: Script to covert a Markdown Gist to HTML for wordpress: https://gist.github.com/zoffixznet/e8d7d24f5579f42cafedc6b954f72a87

[22:55] <huggable> notviki, Added wordpress as Script to covert a Markdown Gist to HTML for wordpress: https://gist.github.com/zoffixznet/e8d7d24f5579f42cafedc6b954f72a87

[22:55] <notviki> AlexDaniel: don't forget to give gist a filename with .md or .markdown extension so it renders it

[22:56] <notviki> bdf's confusion is relying on Perl 5 knowledge

[22:56] <mst> timotimo: honestly, that seemed like a pretty reasonable question to me

[22:56] <mst> notviki: well, bdf comes from Ye Olden Days and is probably still thinking of perl6 as a 'next version' rather than a 'complete re-imagination'

[22:57] <timotimo> hm, okay. mst is a perl5 guy, too. so if it seems reasonable to him, and it's gibberish-ish to me, that must be the reason

[22:57] <notviki> @_ makes an implicit signature and not just-another-way to get the args

[22:57] <mst> notviki: and if he successfully gets out in front of ways new users might be confused because they're thinking in perl5

[22:57] <notviki> The question is fine, it's the asker I roll me eyes onto -_-

[22:57] <[Coke]> mst: well, hopefully he's not STILL coming from that standpoint.

[22:57] <mst> then that seems like a net win

[22:58] <mst> [Coke]: honestly, I don't think it really matters, so long as the end result is accessible to both perl5 and not-perl5 people

[22:58] <mst> and while brian and I really don't get on, he's a bloody good author

[22:58] <timotimo> always having @_ is probably a performance penalty for us

[22:58] <notviki> It would be yeah

[22:58] <mst> fundamentally: that question seems like one that's well worth having answered explicitly in the book for perl5 people

[22:59] <timotimo> so yeah, i didn't expect the thing that perl5 does where arguments are always in @_ from the get-go

[22:59] *** andrzejku left
[22:59] <notviki> I did. And I got a message that I can't override the sig. And that was enough for me :/

[22:59] <[Coke]> mst: as long as the book works for non-perl5 folks also, i'll be happy.

[23:00] *** bjz left
[23:00] <[Coke]> I'm hopeful.

[23:00] <mst> [Coke]: sure. but I'd like it to work for us too :)

[23:00] * [Coke] decided over an hour ago he'd try to fix one perl6 doc ticket.

[23:00] <notviki> :)

[23:00] <RabidGravy> the most common place I find myself using an anonymous parameter is with a sub-signature

[23:00] * [Coke] is still waiting for the prep work to be done. :|

[23:03] <timotimo> smls' answer is very good on that post, imo

[23:06] <notviki> Except the .elems thing will reify everything on many things

[23:09] <notviki> m: sub (*@_ where .elems > 0) {say "got it"; dd @_}(gather { take 1; say "hi"; take 2})

[23:09] <camelia> rakudo-moar 0db081: OUTPUT«hi␤got it␤[1, 2]␤»

[23:09] <notviki> m: sub (*@_ where .so) {say "got it"; dd @_}(gather { take 1; say "hi"; take 2})

[23:09] <camelia> rakudo-moar 0db081: OUTPUT«got it␤hi␤[1, 2]␤»

[23:09] <notviki> m: sub (*@_ where .so) {say "got it"; dd @_}([])

[23:09] <camelia> rakudo-moar 0db081: OUTPUT«Constraint type check failed for parameter '@_'␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:09] <jpc> To give a final point to my previous Grammar::tracer helped me to realize I have to use  token ff  { <-[\\\n]>* }  instead of  token ff     { <-[\\]>* }. So many thanks for your useful help, my code works fine now. :)

[23:10] <notviki> \o/

[23:10] *** bjz joined
[23:11] *** rburkholder joined
[23:13] *** vendethiel joined
[23:15] *** troys_ is now known as troys

[23:18] *** pierre__ left
[23:18] <RabidGravy> is there a bot that searches in the ecosystem

[23:18] <timotimo> searches in what way?

[23:18] <RabidGravy> get the url

[23:18] <timotimo> like, we could have one that searches through the all-modules repository

[23:19] <RabidGravy> bot: Foo::Bar

[23:19] <timotimo> all it'd have to do is write modules.perl6.org/repo/Foo::Bar ;)

[23:19] <RabidGravy> ah yes

[23:19] <notviki> there could be :)

[23:19] <RabidGravy> I forget that

[23:19] <timotimo> though it'd probably be nice if it did one step of resolving

[23:19] <notviki> but not currently

[23:22] <RabidGravy> perlpilot: https://github.com/jonathanstowe/EventSource-Server/blob/master/examples/amqp-bridge there

[23:22] <RabidGravy> :)

[23:23] *** pyrimidine joined
[23:23] <RabidGravy> I think Net::AMQP needs a more sugary interface at some point

[23:23] <RabidGravy> anyway bedtime for me

[23:24] <timotimo> gnite RabidGravy 

[23:26] <pmurias> notviki: it's good bdf is asking questions rather then making stuff up ;) IMHO the hard part of writing the book isn't gathering the actual Perl 6 knowledge but describing stuff in a way that's approachable even for someone new to programming

[23:28] <notviki> pmurias: based on the timing of what I saw, he did make stuff up first.

[23:28] *** RabidGravy left
[23:29] <notviki> pmurias: 18:24 https://irclog.perlgeek.de/perl6/2016-12-22#i_13786114 and 2 hours later the SO question went up

[23:30] <notviki> Anyway. Don't care.

[23:30] * notviki adds a bot to search ecosystem

[23:30] <notviki> Or rather a feature to buggable

[23:31] *** rpburkholder joined
[23:32] *** lukaramu left
[23:34] <AlexDaniel> Hey! In case somebody is willing to take a look, the draft for the advent post is now there.

[23:35] *** rburkholder left
[23:36] <dalek> modules.perl6.org: 7d29f35 | (Zoffix Znet)++ | lib/ModulesPerl6/Controller/Root.pm:

[23:36] <dalek> modules.perl6.org: Remove trailing whitespace

[23:36] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/7d29f35ced

[23:36] <dalek> modules.perl6.org: b7a802a | (Zoffix Znet)++ | lib/ModulesPerl6/Controller/Root.pm:

[23:36] <dalek> modules.perl6.org: Add JSON API for searches

[23:36] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/b7a802a7df

[23:36] *** MasterDuke left
[23:37] <timotimo> neat.

[23:49] *** jpc left
[23:51] *** bjz left
[23:56] *** PapaChub left
[23:56] *** buggable left
[23:56] *** buggable joined
[23:56] *** ChanServ sets mode: +v buggable

[23:56] <notviki> buggable: eco gist

[23:57] <buggable> notviki, Found 2 results: Data::Pretty, Pastebin::Gist. See https://modules.perl6.org/s/gist.json

[23:57] <notviki> buggable: eco pastebin::gist

[23:57] <buggable> notviki, Pastebin::Gist 'Use https://gist.github.com/ as a pastebin': https://github.com/zoffixznet/perl6-Pastebin-Gist

[23:57] <notviki> buggable: eco the fountain of youth

[23:57] <buggable> notviki, Nothing found

[23:57] *** bjz joined
[23:57] <notviki> .tell RabidGravy buggable: eco pastebin::gist

[23:57] <yoleaux> notviki: I'll pass your message to RabidGravy.

[23:58] <timotimo> notviki: you're quick! :)

[23:58] <notviki> That's what she said!

[23:58] <notviki> ayoooo

