[00:02] *** sno joined
[00:05] *** maybekoo2 left
[00:12] *** kurahaupo joined
[00:15] *** Zoffix__ joined
[00:15] *** TEttinger left
[00:17] *** TEttinger joined
[00:18] *** Zoffix left
[00:18] *** baest joined
[00:20] *** zacts joined
[00:21] *** cyphase left
[00:25] *** Zoffix__ is now known as Zoffix

[00:26] *** cyphase joined
[00:28] *** sufrostico left
[00:29] *** ParsonsNose left
[00:29] *** sufrostico joined
[00:32] <Zoffix> m: sub foo (:$what = 42) { dd $what }; sub bar (:$what) { foo :$what }; bar

[00:32] <camelia> rakudo-moar c57ac2: OUTPUT«Any $what = Any␤»

[00:32] <Zoffix> Is there a way for the default on $what to take even if it's specified as Any?

[00:33] <Zoffix> 'cause it's pretty damn useless

[00:33] <gfldex> m: say Any.Bool

[00:33] <camelia> rakudo-moar c57ac2: OUTPUT«False␤»

[00:33] <gfldex> it is takin :$what

[00:33] <Zoffix> Yes, I know that, and I want to avoid that.

[00:34] <Zoffix> I want to propagate what was given in bar()

[00:34] <Zoffix> m: sub foo (:$what = 42) { dd $what }; sub bar (:$what) { foo (:$what if $what) }; bar

[00:34] <camelia> rakudo-moar c57ac2: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in sub foo at <tmp> line 1␤  in sub bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:34] <Zoffix> bisect: m: sub foo (:$what = 42) { dd $what }; sub bar (:$what) { foo (:$what if $what) }; bar

[00:34] <bisectable> Zoffix: On both starting points the exit code is 1 and the output is identical as well

[00:34] <bisectable> Zoffix: Output on both points: Too many positionals passed; expected 0 arguments but got 1␤  in sub foo at /tmp/QBu3dxVJU7 line 1␤  in sub bar at /tmp/QBu3dxVJU7 line 1␤  in block <unit> at /tmp/QBu3dxVJU7 line 1␤

[00:36] <Zoffix> m: sub foo (Any:D :$what = 42) { dd $what }; sub bar (:$what) { foo :$what }; bar

[00:36] <camelia> rakudo-moar c57ac2: OUTPUT«Parameter '$what' requires an instance of type Any, but a type object was passed.  Did you forget a .new?␤  in sub foo at <tmp> line 1␤  in sub bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:38] <Zoffix> m: subset Undumb where { $_ ~~ Any:U and $_ = Nil }; sub foo (Undumb :$what = 42) { dd $what }; sub bar (:$what) { foo :$what }; bar

[00:38] <camelia> rakudo-moar c57ac2: OUTPUT«Cannot assign to a readonly variable or a value␤  in block <unit> at <tmp> line 1␤␤»

[00:38] * Zoffix shakes head

[00:38] *** baest left
[00:40] <gfldex> m: sub foo (Any:D :$what = 42) { dd $what }; sub bar (*%what) { foo |%what }; bar

[00:40] <camelia> rakudo-moar c57ac2: OUTPUT«Int $what = 42␤»

[00:40] <Zoffix> I may as well be using Perl 5 then

[00:40] <gfldex> m: sub foo (Any:D :$what = 42) { dd $what }; sub bar (:$what) { foo |%($what) }; bar

[00:40] <camelia> rakudo-moar c57ac2: OUTPUT«Int $what = 42␤»

[00:41] <Zoffix> gfldex++

[00:41] <Zoffix> huh

[00:41] <Zoffix> m: dd |%($what)

[00:41] <camelia> rakudo-moar c57ac2: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$what' is not declared. Did you mean '&WHAT'?␤at <tmp>:1␤------> 3dd |%(7⏏5$what)␤»

[00:41] <Zoffix> m: my $what = 42; dd |%($what)

[00:41] <camelia> rakudo-moar c57ac2: OUTPUT«Odd number of elements found where hash initializer expected:␤Only saw: 42␤  in block <unit> at <tmp> line 1␤␤»

[00:41] <Zoffix> dafuq

[00:42] <gfldex> :$what creates a colon pair, what can be turned into a Hash

[00:42] <Zoffix> oh, you're not passing it, that's why it gets 42

[00:42] <Zoffix> m: sub foo (Any:D :$what = 42) { dd $what }; sub bar (:$what) { foo |%($what) }; bar :what(72)

[00:42] <camelia> rakudo-moar c57ac2: OUTPUT«Odd number of elements found where hash initializer expected:␤Only saw: 72␤  in sub bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:42] <Zoffix> m: sub foo (Any:D :$what = 42) { dd $what }; sub bar (:$what) { foo |%(:$what) }; bar :what(72)

[00:42] <camelia> rakudo-moar c57ac2: OUTPUT«Int $what = 72␤»

[00:42] <gfldex> m: sub foo (Any:D :$what = 42) { dd $what }; sub bar (:$what) { dd $what; foo |%($what) }; bar

[00:42] <camelia> rakudo-moar c57ac2: OUTPUT«Any $what = Any␤Int $what = 42␤»

[00:42] <gfldex> m: sub foo (Any:_ :$what = 42) { dd $what }; sub bar (:$what) { dd $what; foo |%($what) }; bar

[00:42] <camelia> rakudo-moar c57ac2: OUTPUT«Any $what = Any␤Int $what = 42␤»

[00:42] <Zoffix> m: sub foo (Any:D :$what = 42) { dd $what }; sub bar (:$what) { foo |%(:$what) }; bar 

[00:42] <camelia> rakudo-moar c57ac2: OUTPUT«Parameter '$what' requires an instance of type Any, but a type object was passed.  Did you forget a .new?␤  in sub foo at <tmp> line 1␤  in sub bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:43] <Zoffix> Yup, it doesn't work.

[00:43] <Zoffix> This is a real flaw in design. I came across this issue many times, but in the resorted to duplicating or moving the defaults.

[00:44] <Zoffix> m: sub foo (:$what //= 42) { dd $what }; sub bar (:$what) { foo :$what }; bar

[00:44] <camelia> rakudo-moar c57ac2: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> 3sub foo (:$what7⏏5 //= 42) { dd $what }; sub bar (:$what) ␤    expecting any of:␤        constraint␤»

[00:44] <Zoffix> there gotta be a way to fix this with a trait or something

[00:45] <Zoffix> `is sane` XD

[00:45] *** BillSussman left
[00:45] *** KevinFrench joined
[00:46] <Zoffix> And worse is you can't just $x //= 'default' in the body; you gotta mark it as `is copy` too 

[00:49] *** baest joined
[00:51] <gfldex> m: sub foo (:$what = 42) { dd $what }; sub bar (:$what) { foo(what => $what) }; bar;

[00:51] <camelia> rakudo-moar aada71: OUTPUT«Any $what = Any␤»

[00:51] <gfldex> Zoffix: is that what you want?

[00:52] <Zoffix> No, that's exactly as my original example, except you changed :$what to what => $what;

[00:52] <Zoffix> The result should be 42, since there were not $what given to bar

[00:52] <Zoffix> So when it's propagated to foo(), foo would also see it wasn't given and assign the default

[00:53] <Zoffix> m: sub foo (:$what = 42) { dd $what }; sub bar (:$what) { foo(what => $what//Mu) }; bar;

[00:53] <camelia> rakudo-moar aada71: OUTPUT«Type check failed in binding to $what; expected Any but got Mu (Mu)␤  in sub foo at <tmp> line 1␤  in sub bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:53] <Zoffix> :(

[00:54] <gfldex> m: sub foo (:$what = 42) { dd $what }; sub bar (:$what) { dd $what; foo(what => $what) }; bar;

[00:54] <camelia> rakudo-moar aada71: OUTPUT«Any $what = Any␤Any $what = Any␤»

[00:54] <gfldex> m: sub foo ($p?){ dd $p }; foo;

[00:54] <camelia> rakudo-moar aada71: OUTPUT«Any $p = Any␤»

[00:55] <gfldex> Zoffix: any optional parameter is given because it's a container and as such got a default value

[00:56] <Zoffix> That doesn't help me write my software.

[00:56] <Xliff> Does perl6 support the __DATA__ feature from perl5?

[00:56] <parabolize> m: sub f(:$a = 2) { dd $a }; sub g(:$a) { $a ?? f(:$a) !! f() }; g(); g(:3a);

[00:56] <camelia> rakudo-moar aada71: OUTPUT«Int $a = 2␤Int $a = 3␤»

[00:56] <Zoffix> Xliff, I think the way to do it now is using the Pod, like the =finish marker

[00:56] <gfldex> m: sub foo (:$what = 42) { dd $what }; sub bar (:$what) { my %h; %h.push(:$what) if $what; foo(|%h) }; bar;

[00:56] <camelia> rakudo-moar aada71: OUTPUT«Int $what = 42␤»

[00:56] <Xliff> Zoffix: Any docs on that?

[00:56] <gfldex> Zoffix: if you want to do fancy stuff with signatures you have to build it by hand

[00:56] <Zoffix> parabolize, that's not a real solution

[00:57] <Zoffix> gfldex, that's not fancy at all.

[00:57] <gfldex> you want to lie about the value of :$what in bar. You have to expect to help Perl 6 to understand you in that case.

[00:58] <Xliff> Zoffix++: That pointed me in the right direction

[00:58] <Xliff> https://design.perl6.org/S26.html#___top

[00:58] <Xliff> ^^ Data Blocks

[00:58] <Zoffix> I don't want it to consider the penultimate-most-undefined type object as a value when I'm giving it an int as default. It's not rocket science.

[00:59] <Zoffix> Xliff++ awesome

[00:59] *** mcmillhj left
[01:00] <Zoffix> m: say 'The second anti_Virtue is: ', $=data[1]; ␤=data Weeee␤

[01:00] <camelia> rakudo-moar aada71: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Pod variable $=data not yet implemented. Sorry. ␤at <tmp>:1␤------> 3ay 'The second anti_Virtue is: ', $=data7⏏5[1]; ␤»

[01:00] <Zoffix> Bah

[01:00] <gfldex> Xliff: you could use a heredoc

[01:01] <Zoffix> m: say 'The second anti_Virtue is: ', $=finish; ␤=finish␤Weeee␤

[01:01] <camelia> rakudo-moar aada71: OUTPUT«The second anti_Virtue is: Weeee␤␤»

[01:01] <Zoffix> Xliff, ^ that works tho. 

[01:01] <Xliff> gfldex: Yeah, but I am trying to keep this as close to the original p5 test as possible.

[01:01] *** obfusk_ joined
[01:01] <Xliff> Plus, it helps me learn more about perl6 and I've done heredocs already. :)

[01:04] <gfldex> Zoffix: if Signature would discard Any and use the default value instead, you would get in trouble if you require to hand type object around. We don't have a type for type objects.

[01:05] <Zoffix> I don't pass around type objects when my defaults are ints

[01:05] <gfldex> that your fault :->

[01:05] <Zoffix> :)

[01:08] *** kid511 joined
[01:08] *** kid51 left
[01:09] *** zacts left
[01:11] *** FROGGS_ joined
[01:14] <holyghost> Hello FROGGS_, nice modules BTW

[01:15] *** FROGGS left
[01:15] *** kid51 joined
[01:16] *** sufrostico left
[01:17] *** kid511 left
[01:22] *** Actualeyes joined
[01:22] *** baest left
[01:23] *** canopus left
[01:24] *** cibs left
[01:26] *** cibs joined
[01:27] <Xliff> Heya, FROGGS!

[01:27] <Xliff> Is anyone working on P6 bindings for wxWidgets?

[01:28] *** canopus joined
[01:33] <Zoffix> m: say Parameter.^attributes

[01:33] <camelia> rakudo-moar aada71: OUTPUT«Method 'gist' not found for invocant of class 'BOOTSTRAPATTR'␤  in block <unit> at <tmp> line 1␤␤»

[01:33] <Zoffix> :(

[01:34] *** baest joined
[01:37] *** kid511 joined
[01:38] *** kid51 left
[01:39] *** kid51 joined
[01:40] *** bob777 joined
[01:41] *** kid511 left
[01:44] *** cdg left
[01:45] *** cdg joined
[01:51] *** cdg left
[01:51] <Zoffix> No idea how to set a value of the parameter given a Parameter object :( 

[01:54] *** aries_liuxueyang left
[01:57] *** aries_liuxueyang joined
[02:11] *** kid511 joined
[02:13] *** kid51 left
[02:17] *** bob777 left
[02:17] *** bob777 joined
[02:20] *** Actualeyes left
[02:21] *** kid511 left
[02:28] *** kanishka joined
[02:35] *** danaj left
[02:35] <skids> Zoffix: Parameters and Signatures (other than literals) are actually really deeply baked into the VM.  Their Perl6 interface is currently more for introspection than manipulation.

[02:36] <Zoffix> sucks

[02:36] <mst> skids: but how else are you supposed to chain calls? having them settable and re-callable was one of the great promises of perl6

[02:36] *** jack_rabbit joined
[02:36] <mst> I guess building stuff up as an array and a hash and then using slips?

[02:38] <timotimo> um, i think what you're looking for is Capture, not Parameter

[02:38] <timotimo> what do you even expect to be able to do with a Parameter object?

[02:39] <Zoffix> timotimo, well, I was looking into creating a trait that would use the default if the value given is an Any

[02:39] <Zoffix> m: sub foo (:$what = 42) { dd $what }; sub bar (:$what) { foo :$what }; bar

[02:39] <camelia> rakudo-moar aada71: OUTPUT«Any $what = Any␤»

[02:39] <skids> m: sub foo (:$what = 42) { dd $what }; sub bar (|c) { dd $what; foo |c }; bar

[02:39] <camelia> rakudo-moar aada71: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$what' is not declared. Did you mean '&WHAT'?␤at <tmp>:1␤------> 3t = 42) { dd $what }; sub bar (|c) { dd 7⏏5$what; foo |c }; bar␤»

[02:39] <skids> m: sub foo (:$what = 42) { dd $what }; sub bar (|c) { foo |c }; bar

[02:39] <camelia> rakudo-moar aada71: OUTPUT«Int $what = 42␤»

[02:39] *** danaj joined
[02:39] *** aborazmeh joined
[02:39] *** aborazmeh left
[02:39] *** aborazmeh joined
[02:39] <Zoffix> Hm

[02:40] *** noganex joined
[02:40] <skids> m: sub foo (:$what = 42; :$where = "there") { dd $what, $where }; sub bar (|c) { foo :$where, |c }; bar

[02:40] <camelia> rakudo-moar aada71: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$where' is not declared␤at <tmp>:1␤------> 3dd $what, $where }; sub bar (|c) { foo :7⏏5$where, |c }; bar␤»

[02:40] <skids> m: sub foo (:$what = 42; :$where = "there") { dd $what, $where }; sub bar (|c (:$where)) { foo :$where, |c }; bar("here")

[02:40] <camelia> rakudo-moar aada71: OUTPUT«Too many positionals passed; expected 0 arguments but got 1 in sub-signature of parameter c␤  in sub bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[02:41] <skids> m: sub foo (:$what = 42; :$where = "there") { dd $what, $where }; sub bar (|c (:$where)) { foo :$where, |c }; bar(:where<here>)

[02:41] <camelia> rakudo-moar aada71: OUTPUT«Int $what = 42␤Str $where = "here"␤»

[02:41] <timotimo> you'll have to go through a capture, otherwise you won't be able to do anything much

[02:42] <skids> m: sub foo (:$what = 42; :$where = "there") { dd $what, $where }; sub bar (|c (:$where, :$what)) { foo :$where, |c }; bar(:where<here>)

[02:42] <camelia> rakudo-moar aada71: OUTPUT«Int $what = 42␤Str $where = "here"␤»

[02:42] *** noganex_ left
[02:43] *** dvinciguerra_ left
[02:43] *** kaare__ joined
[02:44] <Zoffix> m: multi trait_mod:<is> (Routine $v, :$sane!) {  dd $v }; sub foo (:$what = 42) is sane { dd $what }; sub bar (:$what) { foo :$what }; bar

[02:44] <camelia> rakudo-moar aada71: OUTPUT«Sub foo = sub foo (:$what = 42) { #`(Sub|61110648) ... }␤Any $what = Any␤»

[02:44] <Zoffix> timotimo, by "go through capture", do you mean that skids is showing?

[02:44] * skids tries to remember if there is a syntax or watnot to get the capture without using a subsig

[02:45] <timotimo> aye

[02:45] <Zoffix> :(

[02:45] <Zoffix> damn

[02:45] <skids> Yeah | is a capture

[02:45] <Zoffix> Yeah, but it's still LTA a bit.

[02:48] <skids> Also there are a few places where f(|c (stuff)) is not quite as capable as f(stuff)

[02:49] <gfldex> m: sub f(|c){ dd c<what> = 10; }; f :what;

[02:49] <camelia> rakudo-moar aada71: OUTPUT«Cannot modify an immutable Bool␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[02:49] <gfldex> m: sub f(|c){ dd c<what>; }; f :what;

[02:49] <camelia> rakudo-moar aada71: OUTPUT«Bool::True␤»

[02:50] <skids> (some of those places being just NYI/LTA)

[02:51] <gfldex> m: sub f(|c is copy){ \(c.Hash<what> = 42;) }; dd f :what;

[02:51] <camelia> rakudo-moar aada71: OUTPUT«\((42,), ())␤»

[02:51] <gfldex> m: sub f(|c){ \(c.Hash<what> = 42;) }; dd f :what;

[02:51] <camelia> rakudo-moar aada71: OUTPUT«\((42,), ())␤»

[02:51] <gfldex> problem is that Capture isn't really a Hash

[02:51] <gfldex> no idea what would happen to positionals

[02:51] *** aborazmeh left
[02:52] <timotimo> it seems problematic that you can change a capture's contents via .Hash; we probably want to use .Map instead

[02:52] <skids> m: sub foo (:$what = 42) { dd $what }; sub bar (|c) { foo |c, :$what<"this"> }; bar

[02:52] <camelia> rakudo-moar aada71: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$what' is not declared. Did you mean '&WHAT'?␤at <tmp>:1␤------> 3) { dd $what }; sub bar (|c) { foo |c, :7⏏5$what<"this"> }; bar␤»

[02:53] <skids> m: sub foo (:$what = 42) { dd $what }; sub bar (|c) { foo |c, :what<"this"> }; bar

[02:53] <camelia> rakudo-moar aada71: OUTPUT«Str $what = "\"this\""␤»

[02:53] <gfldex> do we have a type that is Positional and Associative and motable at the same time?

[02:53] <skids> m: sub foo (:$what = 42) { dd $what }; sub bar (|c) { foo |c, :what<"this"> }; bar(:what<that>)

[02:53] <camelia> rakudo-moar aada71: OUTPUT«Str $what = "\"this\""␤»

[02:54] *** cibs left
[02:54] * timotimo goes to bed

[02:55] <gfldex> i'm out of brainsteam too, gn8

[02:56] *** cibs joined
[02:59] *** holyghost left
[03:00] <Zoffix> m: use nqp; subset Undumb where { $_ ~~ Any:U and nqp::bindattr($_.VAR, Scalar, '$!value', 42) }; sub foo (Undumb :$what = 42) { dd $what }; sub bar (:$what) { foo :$what }; bar

[03:00] <camelia> rakudo-moar aada71: OUTPUT«Any $what = Any␤»

[03:00] * Zoffix curses the Computer Gods

[03:08] *** telex left
[03:10] <Zoffix> lulz wut... Got this error: "replace this Array is copy logic  in method"

[03:11] <Zoffix> Apparently I'm hitting this code: https://github.com/rakudo/rakudo/blob/aada71af66e46a75dd3a72e755e03985bda81092/src/Perl6/Metamodel/BOOTSTRAP.nqp#L435

[03:16] <AlexDaniel> bisect: ++blah++

[03:16] <bisectable> AlexDaniel: Exit code is 1 on both starting points, bisecting by using the output

[03:16] <bisectable> AlexDaniel: bisect log: https://gist.github.com/c6d5ae56b7b8477ea3658c181f2fb9f7

[03:16] <bisectable> AlexDaniel: (2015-12-27) https://github.com/rakudo/rakudo/commit/373adc0

[03:16] *** telex joined
[03:16] <AlexDaniel> goddamn filenames in the output :)

[03:17] <parabolize> Zoffix: what's wrong with using the capture? Also, what is LTA?

[03:17] <parabolize> m: sub f($x, :$a = 2) { say 'in f'; dd $x, $a }; sub g($y, :$b, |c) { say 'in g'; dd $y, $b; f(|c) }; g(2, 3, :4a, :5b)

[03:17] <camelia> rakudo-moar aada71: OUTPUT«in g␤Int $y = 2␤Int $b = 5␤in f␤Int $x = 3␤Int $a = 4␤»

[03:17] <Zoffix> parabolize, because it isn't descripting on what sort of args I'm passing about. 'LTA' == Less Than Awesome

[03:18] <Zoffix> s/descripting/descriptive/;

[03:18] <AlexDaniel> committable: releases ++blah++

[03:18] <committable> AlexDaniel: ¦«release»: Cannot find this revision

[03:18] <Zoffix> method foo ($cmd, :$server) { $.o($cmd, :$server) } is clearer than method foo ($cmd, |c) { $.o($cmd, |c) } 

[03:18] *** bob777 left
[03:18] <AlexDaniel> wasn't it supposed to work, hmm

[03:19] <Zoffix> Damn, this will now bug me for life ~_~

[03:19] *** bob777 joined
[03:20] *** committable left
[03:20] *** committable joined
[03:20] <AlexDaniel> committable: releases ++blah++

[03:20] <committable> AlexDaniel: https://gist.github.com/4333c1ddb4c74d8421bee00afc5b6b10

[03:21] <Zoffix> parabolize, well that, and the fact that when I tried to use it I hit some cobwebbed error "replace this Array is copy logic  in method"

[03:22] <Zoffix> m: sub foo ($cmd, *@args is copy, |c) { dd @args }; sub bar (:$foo, |c){ foo |c, 42, 55 }; bar :42server

[03:22] <camelia> rakudo-moar aada71: OUTPUT«replace this Array is copy logic␤  in sub foo at <tmp> line 1␤  in sub bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:22] *** telex left
[03:23] * parabolize admits python code that has *arguments, **keywords drives him nuts. Especially when there is no doc string

[03:23] *** huggable left
[03:23] *** huggable joined
[03:24] <Zoffix> m: sub (*@x is copy, |c) {  }( 42 )

[03:24] <camelia> rakudo-moar aada71: OUTPUT«replace this Array is copy logic␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:36] *** bob778 joined
[03:38] *** telex joined
[03:38] *** bob777 left
[03:38] *** bob778 is now known as bob777

[03:42] *** TEttinger left
[03:45] *** TEttinger joined
[03:45] *** jferrero joined
[03:46] *** kurahaupo left
[03:49] <Zoffix> m: sub prefix:<‖> (Pair $p) { $p.value ~~ Any:D ?? $p !! Empty }; sub foo (:$what = 42) { dd $what }; sub bar (:$what) { foo |‖:$what }; bar 

[03:49] <camelia> rakudo-moar aada71: OUTPUT«Int $what = 42␤»

[03:49] <Zoffix> m: sub prefix:<‖> (Pair $p) { $p.value ~~ Any:D ?? $p !! Empty }; sub foo (:$what = 42) { dd $what }; sub bar (:$what) { foo |‖:$what }; bar :72what

[03:49] <camelia> rakudo-moar aada71: OUTPUT«Int $what = 72␤»

[03:51] <Zoffix> I wish it were possible to get rid of that slip somehow :/

[03:52] <psch> m: sub prefix:<``> (Pair $p) { $p.value ~~ Any:D ?? $p.Slip !! Empty }; sub foo (:$what = 42) { dd $what }; sub bar (:$what) { foo :$what }; bar :72what

[03:52] <camelia> rakudo-moar aada71: OUTPUT«Int $what = 72␤»

[03:52] <psch> can't get rid of it, but you can move it "up"

[03:52] <Zoffix> m: sub prefix:<``> (Pair $p) { $p.value ~~ Any:D ?? $p.Slip !! Empty }; sub foo (:$what = 42) { dd $what }; sub bar (:$what) { foo :$what }; bar 

[03:52] <camelia> rakudo-moar aada71: OUTPUT«Any $what = Any␤»

[03:52] <psch> oh no

[03:52] <psch> i removed the prefix call

[03:53] <Zoffix> m: sub prefix:<``> (Pair $p) { $p.value ~~ Any:D ?? $p.Slip !! Empty }; sub foo (:$what = 42) { dd $what }; sub bar (:$what) { foo ``:$what }; bar 

[03:53] <camelia> rakudo-moar aada71: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in sub foo at <tmp> line 1␤  in sub bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:53] <psch> sorry, not actually awake apparently

[03:53] <Zoffix> :)

[03:53] <Zoffix> m: sub prefix:<😜> (Pair $p) { $p.value ~~ Any:D ?? $p !! () }; sub foo (:$what = 42) { dd $what }; sub bar (:$what) { foo |😜:$what }; bar

[03:53] <camelia> rakudo-moar aada71: OUTPUT«Int $what = 42␤»

[03:57] <parabolize> m: sub f(:$a) { dd $a }; sub g(:$a, :$b) { dd $b; f(:$a) }; g(:2a, :3b)

[03:57] <camelia> rakudo-moar aada71: OUTPUT«Int $b = 3␤Int $a = 2␤»

[03:58] <psch> m: sub f { (:1a).Slip }; say f.perl; say f ~~ :(:$)

[03:58] <camelia> rakudo-moar aada71: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Expected a term, but found either infix ~~ or redundant prefix ~␤  (to suppress this message, please use a space like ~ ~)␤at <tmp>:1␤------> 3b f { (:1a).Slip }; say f.perl; say f ~~7⏏5 :(:$)␤»

[03:58] <psch> m: sub f { (:1a).Slip }; say f.perl; say f() ~~ :(:$)

[03:58] <camelia> rakudo-moar aada71: OUTPUT«slip(:a(1),)␤False␤»

[03:58] <parabolize> nevermind

[03:58] <psch> that is a bit weird i think

[03:58] <psch> oh duh

[03:58] <psch> m: sub f { (:1a).Slip }; say f.perl; say f() ~~ :(:$a)

[03:58] <camelia> rakudo-moar aada71: OUTPUT«slip(:a(1),)␤True␤»

[03:58] <psch> that is more expected

[03:59] <psch> m: sub f { (:1a).Slip }; sub g(:$a) { }; say f.perl; say &g.cando(f())

[03:59] <camelia> rakudo-moar aada71: OUTPUT«slip(:a(1),)␤Type check failed in binding to $c; expected Capture but got Slip (slip$(:a(1),))␤  in block <unit> at <tmp> line 1␤␤»

[03:59] <psch> ah

[03:59] <Zoffix> m: sub K { \(@_, %_.grep: {.value ~~ Any:D}) }; sub foo (:$what = 42) { dd $what }; sub bar (:$what) { foo |K :$what }; bar :72what

[03:59] <camelia> rakudo-moar aada71: OUTPUT«Too many positionals passed; expected 0 arguments but got 2␤  in sub foo at <tmp> line 1␤  in sub bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:59] <Zoffix> :(

[03:59] *** djbkd joined
[04:00] <Zoffix> ^ that would be the best. Some prefix or sub you sneak at the start of args and be done with it

[04:00] <Zoffix> Well, "best". The best would be making it actually work right in the first place :)

[04:00] *** Actualeyes joined
[04:00] <psch> not really sure what "right" is here, actually

[04:01] <psch> i mean, i'd say a slip should always slip exactly once

[04:01] <psch> so if i return it from a sub and pass it into a call, it should then slip

[04:01] <Zoffix> Well, in this context right == what I want it to do :) And that is not to assume Any:U is a valid value to use when I specify an Int default value to use.

[04:01] <dalek> bisectbot: dabed85 | (Aleks-Daniel Jakimenko-Aleksejev)++ | Perl6IRCBotable.pm:

[04:01] <dalek> bisectbot: Empty string works better than 0

[04:01] <dalek> bisectbot: 

[04:01] <dalek> bisectbot: Turns out that setting RAKUDO_ERROR_COLOR to 0 does not work well enough across

[04:01] <dalek> bisectbot: all Rakudo versions. This causes the output to be different on some commits,

[04:01] <dalek> bisectbot: which may freak out bisectable or even committable if ran across many commits.

[04:01] <dalek> bisectbot: 

[04:01] <dalek> bisectbot: Empty string works all the time.

[04:01] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/dabed85d8c

[04:01] *** committable left
[04:01] *** benchable left
[04:01] <Zoffix> As in.. it assuming my giving it Any:U is what I want rather than my wanting it to use the default.

[04:01] *** bisectable left
[04:02] <Zoffix> Happy new day!

[04:02] <psch> how does Any:U come into this?  i'm only seeing a slipping Pair not slipping into a named..?

[04:02] <Zoffix> Well, this adventure of mine started 3.5 hours ago with this:

[04:02] <Zoffix> m: sub foo (:$what = 42) { dd $what }; sub bar (:$what) { foo :$what }; bar

[04:02] <camelia> rakudo-moar aada71: OUTPUT«Any $what = Any␤»

[04:02] <Zoffix> I want foo to use the default value, because the $what I'm giving it wasn't passed to bar, so it's an Any:U

[04:03] <psch> well, you are giving a value

[04:03] *** committable joined
[04:03] *** bisectable joined
[04:03] *** benchable joined
[04:03] <Zoffix> Well, sure, I know why I get that result.

[04:03] <AlexDaniel> committable: releases ++blah++

[04:03] <committable> AlexDaniel: https://gist.github.com/93db4fc89fffe0009de5335653ddcfff

[04:04] <AlexDaniel> ok that's much better

[04:04] <Zoffix> But it's not what I want, as a programmer. And I hit this issue many times, but I never hit an issue where I had a param defaulting to an Int and I was dissapointed that I couldn't give it an Any:U

[04:05] <Zoffix> *excited that I could give it...

[04:06] <psch> m: sub foo (:$what = 42) { dd $what }; sub bar (:$what) { $what ?? foo(:$what) !! foo()  }; bar

[04:06] <camelia> rakudo-moar aada71: OUTPUT«Int $what = 42␤»

[04:06] <psch> if you give the named it takes the nameds value 

[04:06] <Zoffix> You're the second person to suggest such a thing

[04:06] <psch> okay, sorry 

[04:06] <Zoffix> :)

[04:06] <parabolize> m: sub f(:$a = 2) { dd $a }; multi g(:$b) { dd $b; f() }; multi g(:$a!, :$b) { dd $b; f(:$a) }; g(:3b)

[04:06] <camelia> rakudo-moar aada71: OUTPUT«Int $b = 3␤Int $a = 2␤»

[04:07] <Zoffix> psch, it's just the single-arg example is a simplification. That solution is already too hefty and it grows too unwieldy the minute you get a second named arg

[04:08] <psch> Zoffix: then use multi dispatch?

[04:08] <parabolize> I don't think I needed the ! there

[04:08] <Zoffix> Isn't that just an even more verbose way to write a ternary?

[04:08] <AlexDaniel> committable: 2016.02..2016.03 ++blah++

[04:09] <committable> AlexDaniel: https://gist.github.com/aee7c32eab4fbdbf9b8ec88e996959f2

[04:09] <psch> i don't know, maybe

[04:09] <AlexDaniel> Zoffix: by the way, I remember you were saying that things like this ↑ will take way too long. Well, it's not paralellized, so it does take very long. But it is already usable

[04:10] <TimToady> m: sub foo (:$what = 42) { dd $what }; sub bar (:$what) { foo(|(:$what if $what))  }; bar

[04:10] <camelia> rakudo-moar aada71: OUTPUT«Int $what = 42␤»

[04:11] <AlexDaniel> like you know, sometimes you have to put some effort into making a proper bisect query… why bother, just run it on every commit ;)

[04:12] <Zoffix> Yeah, the |( if ) thing is probably the shortest you can do it now with

[04:12] <Zoffix> Well, without some weird prefix op

[04:13] <Zoffix> committable: 2016.02..2016.03 .WHERE.say

[04:14] <committable> Zoffix: https://gist.github.com/f06a3ac587603fc7354559d40ee16482

[04:14] <Zoffix> neat

[04:15] <AlexDaniel> MasterDuke: again, why do we have a 300 commit limit?

[04:15] <MasterDuke> no reason

[04:15] *** k-man joined
[04:15] *** k-man left
[04:16] <Zoffix> But back to the Any:U -> Ideally the solution would be on the receiving end. Some sorta trait or something. I got one method to which a named param percolates from all the place to, so I don't want to put |(:) on all the calls, but rather in the sig or something

[04:16] <Zoffix> This is the actual real-world piece of code it's from and my current solution :) https://gist.github.com/zoffixznet/ef930e000cd4678df70da88c2172aff4

[04:16] <Zoffix> |(:)   looks like a ninja if you angle your head right. 

[04:17] * Zoffix will call |(:$what if $what) construct "ninjaing a param" from now on

[04:17] * Zoffix & sleep

[04:17] *** k-man joined
[04:18] *** k-man left
[04:18] *** k-man joined
[04:18] *** k-man left
[04:18] <AlexDaniel> MasterDuke: each run is limited to 10 seconds, so if you want to kill it you can run sleep 10 over 300 commits…

[04:18] *** BenGoldberg joined
[04:19] <AlexDaniel> MasterDuke: that's gonna send it to a little 50 minute vacation

[04:21] <MasterDuke> AlexDaniel: can we set an alarm before we start the loop that runs the code for all the commits with a larger timeout? will that conflict with the alarm for each run?

[04:22] <MasterDuke> or would just that one alarm be needed at all?

[04:22] <AlexDaniel> MasterDuke: maybe something that says “oops, sorry, will not manage to finish that job at such pace”

[04:23] <AlexDaniel> MasterDuke: no need for an alarm, just check the time every now and then

[04:24] <dalek> bisectbot: 942ea65 | (Aleks-Daniel Jakimenko-Aleksejev)++ | committable.pl:

[04:24] <dalek> bisectbot: Bump committable limit to 1000

[04:24] <dalek> bisectbot: 

[04:24] <dalek> bisectbot: If you wanted to kill it, then you could run sleep 10 over 300 commits and this

[04:24] <dalek> bisectbot: will keep it busy for 50 minutes. However, most people will probably run really

[04:24] <dalek> bisectbot: fast snippets, so we can bump it quite a bit.

[04:24] <dalek> bisectbot: 

[04:24] <dalek> bisectbot: Global timeout will be introduced later, hopefully.

[04:24] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/942ea65d3c

[04:24] *** committable left
[04:25] *** committable joined
[04:28] <MasterDuke> AlexDaniel: https://github.com/perl6/bisectbot/issues/13

[04:28] <AlexDaniel> yea

[04:32] *** khw left
[04:47] *** Cabanossi left
[04:48] *** adu joined
[04:49] *** Cabanossi joined
[04:51] <skids> .tell Zoffix f(:$f = "foo") { $f.VAR.default.say } -- I wonder if a design modification could be sold that this should say "foo" in which case :f<Nil> would work to set the default.

[04:51] <yoleaux> skids: I'll pass your message to Zoffix.

[04:56] *** bob777 left
[04:56] <TimToady> thunky ops now warn in sink context

[04:56] <TimToady> m: say [1,2,3] or 42

[04:56] <camelia> rakudo-moar 5334cb: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant integer 42 in sink context (line 1)␤[1 2 3]␤»

[04:57] <TimToady> m: 42 with [1,2,3]

[04:57] <camelia> rakudo-moar 5334cb: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant integer 42 in sink context (line 1)␤»

[05:05] *** bob777 joined
[05:25] *** jack_rabbit left
[05:27] *** skids left
[05:33] *** AlexDaniel left
[05:35] *** cosimo left
[05:35] *** adu left
[05:37] *** BenGoldberg left
[05:37] *** cosimo joined
[05:38] *** domidumont joined
[05:43] *** domidumont left
[05:43] *** kanishka left
[05:44] *** domidumont joined
[05:50] *** KaitoDaumoto left
[05:53] <FROGGS_> Xliff: not that I am aware of

[05:56] *** sno left
[06:03] *** domidumont left
[06:05] *** CIAvash joined
[06:17] *** maybekoo2 joined
[06:24] *** firstdayonthejob joined
[06:26] *** trnh joined
[06:30] *** KevinFrench left
[06:35] *** zakharyas joined
[06:35] *** trnh left
[06:36] *** trnh joined
[06:36] *** trnh left
[06:36] *** trnh joined
[06:43] *** firstdayonthejob left
[06:44] *** rurban joined
[06:44] *** cyphase left
[06:49] *** cyphase joined
[06:54] <ufobat> my hands feel so funny, i just wrote perl6 code ;-)

[06:55] *** sno joined
[06:56] <ufobat> good morning

[07:05] *** trnh left
[07:17] *** trnh joined
[07:17] *** CQ joined
[07:19] *** zakharyas left
[07:20] *** domidumont joined
[07:22] *** tbrowder left
[07:23] *** huggable left
[07:24] *** tbrowder joined
[07:25] *** zakharyas joined
[07:25] *** rurban1 joined
[07:28] *** darutoko joined
[07:28] *** rurban2 joined
[07:29] *** rurban left
[07:31] *** rurban1 left
[07:32] *** Brass_Lantern joined
[07:32] *** BrassLantern left
[07:36] *** zhmylove_ joined
[07:37] *** danaj left
[07:38] *** nemo joined
[07:38] *** skaji left
[07:38] *** Timbus joined
[07:38] *** nemo is now known as Guest58213

[07:39] *** f3ew joined
[07:39] *** skaji joined
[07:40] *** danaj joined
[07:42] *** sftp left
[07:42] *** holyghost joined
[07:43] *** wamba joined
[07:43] *** shadowpaste joined
[07:43] <holyghost> Does it somewhere have a meaning to buy an Amiga A500 ?

[07:44] <holyghost> or should I wait for the A4000 ?

[07:44] *** rurban2 left
[07:45] *** trnh left
[07:46] *** zakharyas left
[07:46] *** cyphase left
[07:47] *** zakharyas joined
[07:47] <holyghost> ok nm

[07:51] *** cyphase joined
[07:51] *** abraxxa left
[07:51] *** abraxxa joined
[07:56] *** mohae left
[07:56] *** mohae_ joined
[08:00] *** trnh joined
[08:00] *** trnh left
[08:00] *** trnh joined
[08:01] *** jonas2 joined
[08:03] *** CQ left
[08:06] *** MorayJ joined
[08:06] *** zakharyas left
[08:08] *** DrParis joined
[08:09] <DrForr> m: my $t = Int; $t.new(3); say $t.WHAT

[08:09] <camelia> rakudo-moar 5334cb: OUTPUT«(Int)␤»

[08:10] *** risou left
[08:10] <DrForr> m: my %x=(a=>Int); my $t=%a<a>; $t.new(3); say $t.WHAT

[08:10] <camelia> rakudo-moar 5334cb: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '%a' is not declared␤at <tmp>:1␤------> 3my %x=(a=>Int); my $t=7⏏5%a<a>; $t.new(3); say $t.WHAT␤»

[08:10] <DrForr> m: my %x=(a=>Int); my $t=%x<a>; $t.new(3); say $t.WHAT

[08:10] <camelia> rakudo-moar 5334cb: OUTPUT«(Int)␤»

[08:11] <DrForr> Mumble.

[08:11] *** risou_ joined
[08:14] *** mithaldu_ joined
[08:21] *** dakkar joined
[08:29] *** prammer joined
[08:29] *** prammer left
[08:37] <lizmat> m: say Int.new(:value(3))

[08:37] <camelia> rakudo-moar 5334cb: OUTPUT«0␤»

[08:37] <lizmat> hmmm

[08:38] <DrForr> Well, I'm trying to do:

[08:39] <lizmat> m: say Int.new(3)

[08:39] <camelia> rakudo-moar 5334cb: OUTPUT«3␤»

[08:39] *** zakharyas joined
[08:40] <DrForr> Let me rephrase. The last code I put up works fine with the 'Int' builtin, but...

[08:41] <DrForr> m: class Y { has $.v }; my %x=('$'=>Y); my $z = %x{'$'}.new(:v(1)); $z.WHAT

[08:41] <camelia> rakudo-moar 5334cb: ( no output )

[08:43] <psch> m: class Y { has $.v }; my %x=('$'=>Y); my $z = %x{'$'}.new(:v(1)); say $z.WHAT

[08:43] <camelia> rakudo-moar 5334cb: OUTPUT«(Y)␤»

[08:44] <DrForr> Hrm, maybe I'm debugging something incorrectly then.

[08:45] <DrForr> (and forgetting that this evalbot doesn't print the return value as well.)

[08:50] *** RabidGravy joined
[08:55] *** brrt joined
[09:16] *** cibs left
[09:16] *** maybekoo2 left
[09:18] *** cibs joined
[09:20] *** dakkar_ joined
[09:23] *** dakkar left
[09:29] *** rurban joined
[09:30] *** rurban left
[09:37] *** dakkar_ is now known as dakkar

[09:41] *** trnh left
[09:56] *** trnh joined
[09:56] *** ParsonsNose joined
[10:00] <El_Che> I did some perl5 the last days, and while I loved perl5 I must say I really missed quite a few things of perl6. It's crazy how fast one takes stuff for granted

[10:00] <DrForr> Mmhmm.

[10:01] *** mcmillhj joined
[10:02] *** brrt left
[10:05] *** mcmillhj left
[10:06] *** TEttinger left
[10:06] *** hwcomcn joined
[10:10] *** rindolf joined
[10:24] *** rurban1 joined
[10:26] <Zoffix> .

[10:26] <yoleaux> 04:51Z <skids> Zoffix: f(:$f = "foo") { $f.VAR.default.say } -- I wonder if a design modification could be sold that this should say "foo" in which case :f<Nil> would work to set the default.

[10:27] <Zoffix> That doesn't really help, since I'm passing Any:U and not Nil. Also, that default is different from the signature defaults.

[10:27] <Zoffix> m: my $x is default(42) = 72; dd $x; $x = Nil; dd $x

[10:27] <camelia> rakudo-moar 5334cb: OUTPUT«Int $x = 72␤Int $x = 42␤»

[10:33] *** cibs left
[10:33] *** trnh left
[10:35] *** cibs joined
[10:38] *** rurban1 left
[10:47] *** trnh joined
[10:58] *** davidcsi joined
[10:58] *** labster left
[11:00] *** cibs left
[11:01] <davidcsi> hello guys, i'm trying to establish a memcached connection via a tunnel, the tunnel needs to be created by perl... has anyone ever done this? I've been able to do it by creating the tunnel with "my $pid = open(myh, 'ssh -L xxx:1.1.1.1:yyyy server -l user');" but the pid returned is NOT the pid for the ssh for some reason...

[11:01] *** Zoffix left
[11:02] *** cibs joined
[11:06] *** rindolf left
[11:08] <DrForr> davidcsi: I think you want #perl, one door over. Unless this is perl 6 code and youv'e got the syntax wrong, for some reason :)

[11:13] *** davidcsi left
[11:16] *** ParsonsNose left
[11:17] *** davidcsi joined
[11:19] <davidcsi> sorry :)

[11:19] <DrForr> No worries.

[11:27] *** ParsonsNose joined
[11:30] *** salv0 joined
[11:31] <El_Che> DrForr: the noisy neighbours next door? :)

[11:33] <El_Che> davidcsi: irc network: irc.perl.org, channel: #perl

[11:34] <DrForr> He's already over on the other channel.

[11:36] <El_Che> yeah, I am Mr Obvious today it seems 

[11:38] <El_Che> DrForr: now you answer "onviously" :)

[11:40] <CIAvash> El_Che: IIRC mst said that don't refer people to #perl on irc.perl.org

[11:41] *** kid51 joined
[11:41] <El_Che> why?

[11:41] <CIAvash> http://irclog.perlgeek.de/perl6/2016-05-23#i_12529400

[11:42] <CIAvash> http://irclog.perlgeek.de/perl6/2016-07-08#i_12807145

[11:44] <El_Che> CIAvash: thx

[11:45] *** kid511 joined
[11:45] *** davidcsi left
[11:45] *** kid51 left
[11:49] *** kid51 joined
[11:49] *** kid511 left
[11:59] <FROGGS_> mst++

[12:05] *** gregf_ joined
[12:12] *** Guest58213 is now known as nemo

[12:12] *** davidcsi joined
[12:12] *** davidcsi left
[12:16] *** sftp joined
[12:21] *** cog_ joined
[12:25] *** hwcomcn left
[12:29] *** FROGGS_ left
[12:34] *** sufrostico joined
[12:43] <dalek> doc: fc83049 | (Daniel Dehennin)++ | doc/Language/concurrency.pod6:

[12:43] <dalek> doc: Fix name of Supply method which returns a Channel

[12:43] <dalek> doc: review: https://github.com/perl6/doc/commit/fc83049d47

[12:43] <dalek> doc: 9fbfc11 | (Zoffix Znet)++ | doc/Language/concurrency.pod6:

[12:43] <dalek> doc: Merge pull request #766 from baby-gnu/fix/channel-method-on-supply

[12:43] <dalek> doc: 

[12:43] <dalek> doc: Fix name of Supply method which returns a Channel

[12:43] <dalek> doc: review: https://github.com/perl6/doc/commit/9fbfc11150

[12:44] <nebuchadnezzar> ho, merge was quick

[12:45] <moritz> nebuchadnezzar: what's your github username?

[12:45] <nebuchadnezzar> baby-gnu ;-)

[12:45] <nebuchadnezzar> my DNS domaine

[12:46] <moritz> nebuchadnezzar: invitation to the perl6 org sent

[12:46] <nebuchadnezzar> ho thanks

[12:46] <moritz> nebuchadnezzar: if you accept, you don't need to wait for merges at all :-)

[12:46] <moritz> (and we have less work merging)

[12:47] <masak> Zoffix++ # http://blogs.perl.org/users/zoffix_znet/2016/07/a-date-with-the-bug-queue-or-let-me-help-you-help-me-help-you.html

[12:50] *** kurahaupo joined
[12:54] <nebuchadnezzar> Shouldn't we inverse the sythax colorization between code and output in https://docs.perl6.org/language/quoting ?

[12:55] <masak> 'We used maybe 50 or 60 competing design principles in the design of Perl 6, but the most important one is: "There is no single most important design principle, including this one."'

[12:55] <masak> TimToady: ...I see what you did there.

[12:55] <masak> (from https://developers.slashdot.org/story/16/07/14/1349207/the-slashdot-interview-with-larry-wall)

[12:56] <nebuchadnezzar> well for some the example blocks at least

[12:57] *** mcmillhj joined
[12:59] <moritz> nebuchadnezzar: it would likely be easier to switch off syntax hilighting for blocks that aren't propery hilighted

[13:01] <nebuchadnezzar> moritz: yes, I saw that the first code blocs require B to emphasize the quote characters

[13:01] <moritz> which disables the rest of the syntax hilighting, because those two don't mix

[13:02] <nebuchadnezzar> that's what I supposed, thanks to confirm it

[13:03] *** matt_ joined
[13:03] *** matt_ is now known as Guest67302

[13:04] *** Ptolemarch joined
[13:06] *** Ptolemarch left
[13:08] *** ptolemarch joined
[13:08] *** Guest67302 is now known as matt_

[13:10] *** mcmillhj left
[13:11] *** mcmillhj joined
[13:20] *** pmurias joined
[13:24] *** salv0 left
[13:24] *** canopus left
[13:25] *** Sgeo left
[13:30] *** canopus joined
[13:30] *** molaf joined
[13:36] *** salv0 joined
[13:39] *** kid51 left
[13:41] *** kid51 joined
[13:42] <dalek> doc: 9498349 | (Zoffix Znet)++ | doc/Type/Instant.pod6:

[13:42] <dalek> doc: Document future leap second behaviour

[13:42] <dalek> doc: 

[13:42] <dalek> doc: Related to https://rt.perl.org/Ticket/Display.html?id=126119

[13:42] <dalek> doc: review: https://github.com/perl6/doc/commit/9498349473

[13:44] <timotimo> maybe at some point we should consider offering newer builds of older rakudo releases and rakudo star releases that have more leap seconds in them

[13:47] *** cibs left
[13:49] *** unmatched} joined
[13:50] *** cibs joined
[13:50] <[Coke]> timotimo: I think if someone cares that much about leap seconds, they can get the latest copy of rakudo

[13:51] <[Coke]> (or we can write up a doc on how they can update the leapseconds table and do a build themselves)

[13:51] <unmatched}> Seems a bad idea. Right now you can workaround it by doing $*VM.version before '2016.07', for example, but that would either break if you use the same version number for the updated release or it'd require more conditionals for the new version

[13:52] <[Coke]> maybe we can do a meta table that shows which seconds were available in which compiler.

[13:52] <[Coke]> (I am... only mostly kidding)

[13:52] <unmatched}> Wouldn't be a bad idea for a module

[13:53] <unmatched}> Leap::BackToTheFuture :)

[13:57] <[Coke]> there we go. push to module space, people who really care have a place to go.

[13:59] *** jkramer joined
[13:59] <jkramer> Ahoy

[13:59] <unmatched}> \o

[14:00] <jkramer> Is there a way to check if an Array of stuff or something else matches a Signature?

[14:00] <timotimo> sure, you can just smartmatch against the signature, can't you?

[14:00] <jkramer> Like $r.signature ~~ ['string', 123, SomeClass $foo]

[14:01] <timotimo> well, you have the smart match the wrong way around :)

[14:01] <jkramer> Don't know, didn't try because I didn't find anything in the docs :)

[14:01] <jkramer> Oh

[14:01] *** zakharyas left
[14:01] <jkramer> Ah actually it is right there in the docs -_-

[14:01] *** zakharyas joined
[14:01] <timotimo> m: my Signature $s = :(Str $a, Int $b, Rat $c); say \("hello", 1234, 1.5) ~~ $s

[14:01] <camelia> rakudo-moar 6d1e95: OUTPUT«True␤»

[14:01] <timotimo> m: my Signature $s = :(Str $a, Int $b, Rat $c); say \("hello", 1234, "lol") ~~ $s

[14:01] <camelia> rakudo-moar 6d1e95: OUTPUT«False␤»

[14:02] <jkramer> \o/

[14:02] <jkramer> thx

[14:02] <timotimo> np

[14:04] *** sena_kun joined
[14:06] *** zakharyas left
[14:06] <dalek> doc: d0c34fa | (Zoffix Znet)++ | doc/Type/Instant.pod6:

[14:06] <dalek> doc: Move prose on future leap seconds to its own section

[14:06] <dalek> doc: 

[14:06] <dalek> doc: There are many methods that have this caveat, not just .from-posix

[14:06] <dalek> doc: review: https://github.com/perl6/doc/commit/d0c34fa16e

[14:06] <dalek> doc: 0ffd2a1 | (Zoffix Znet)++ | .gitignore:

[14:06] <dalek> doc: Add html/perl6.xhtml to .gitignore

[14:06] <dalek> doc: review: https://github.com/perl6/doc/commit/0ffd2a16cf

[14:06] <dalek> doc: 1366219 | (Zoffix Znet)++ | Makefile:

[14:06] <dalek> doc: Add make ctest for testing just content (tabs/traling ws)

[14:06] <dalek> doc: 

[14:06] <dalek> doc: This makes it easier to test for just the content warts,

[14:06] <dalek> doc: without having to install prereqs like ::ToBigPage

[14:06] <dalek> doc: review: https://github.com/perl6/doc/commit/1366219f9c

[14:07] <dalek> doc: 9d6b726 | (Zoffix Znet)++ | Makefile:

[14:07] <dalek> doc: Update make help

[14:07] <dalek> doc: review: https://github.com/perl6/doc/commit/9d6b726aa5

[14:09] <dalek> doc: aabab44 | (Zoffix Znet)++ | doc/ (3 files):

[14:09] <dalek> doc: Strip accumulated trailing whitespace

[14:09] <dalek> doc: review: https://github.com/perl6/doc/commit/aabab44d73

[14:10] <unmatched}> [Coke]: BTW, I opened a ticket that may need to be forwarded to RT admins. Unless I'm misunderstanding how email-to-comments-on-RT-ticket works: https://rt.perl.org/Ticket/Display.html?id=128749

[14:12] *** rurban joined
[14:12] <unmatched}> oh, you responded. *reads*

[14:13] <jkramer> Also is there a way to check if something has a trait? E.g. $routine.has-trait('foo') or something

[14:14] <unmatched}> Well, I've no idea what address is the right one. It's just not the first time I see replies to tickets in the compiler list that are basically lost, since there's nothing replicated to the ticket *shrug*

[14:15] *** rindolf joined
[14:15] <dalek> doc: dc52b87 | coke++ | doc/Language/faq.pod6:

[14:15] <dalek> doc: use actual version literal

[14:15] <dalek> doc: review: https://github.com/perl6/doc/commit/dc52b87639

[14:18] <lizmat> m: sub a() is hidden-from-backtrace {}; say &a.?is-hidden-from-backtrace

[14:18] <camelia> rakudo-moar 6d1e95: OUTPUT«True␤»

[14:18] <lizmat> m: sub a() {}; say &a.?is-hidden-from-backtrace

[14:18] <camelia> rakudo-moar 6d1e95: OUTPUT«Nil␤»

[14:18] <lizmat> jkramer: something like that?  ^^^

[14:18] <jkramer> lizmat: Yes, but for random traits :) Like, my own self-defined ones

[14:19] <lizmat> well, if they consist of mixing in something into the sub, than that would be the way to do it

[14:19] <unmatched}> m: say $*VM.version after 2016.07

[14:19] <camelia> rakudo-moar 6d1e95: OUTPUT«True␤»

[14:19] <unmatched}> m: say $*VM.version before 2016.07

[14:19] <camelia> rakudo-moar 6d1e95: OUTPUT«False␤»

[14:19] <jkramer> You mean just inject a is-my-trait method?

[14:19] <unmatched}> Version has this magic treatment of Rats?

[14:20] <unmatched}> m: say $*VM.version.Rat

[14:20] <camelia> rakudo-moar 6d1e95: OUTPUT«Method 'Rat' not found for invocant of class 'Version'␤  in block <unit> at <tmp> line 1␤␤»

[14:20] <lizmat> jkramer: you see, when you add a trait, you're basically just executing a sub at compile time

[14:20] <lizmat> jkramer: whatever that sub does, is up to you

[14:20] <unmatched}> m: say 2016.07.Version

[14:20] <camelia> rakudo-moar 6d1e95: OUTPUT«Method 'Version' not found for invocant of class 'Rat'␤  in block <unit> at <tmp> line 1␤␤»

[14:20] <jkramer> Yeah I know. I just thought it would keep track of that somewhere and I could check it later :)

[14:21] <lizmat> this is the implementation of is-hidden-from-backtrace:

[14:21] <lizmat> multi sub trait_mod:<is>(Routine:D $r, :$hidden-from-backtrace!) {

[14:21] <lizmat>     $r.^mixin( role { method is-hidden-from-backtrace { True } } );

[14:21] <lizmat> }

[14:21] <dalek> doc: 17969cf | (Zoffix Znet)++ | doc/Type/Instant.pod6:

[14:21] <dalek> doc: Use version literal

[14:21] <dalek> doc: review: https://github.com/perl6/doc/commit/17969cfa7e

[14:21] <lizmat> jkramer: there is no keeping track unless you do it yourself  :-)

[14:26] *** rurban left
[14:27] <jkramer> lizmat: Alright, thanks :)

[14:29] *** abraxxa1 joined
[14:29] *** abraxxa left
[14:33] <holyghost> lizmat: thanks for that (^mixin)

[14:34] <holyghost> now I understand roles

[14:35] *** FROGGS joined
[14:38] *** abraxxa1 left
[14:38] <unmatched}> m: DateTime.new("2016-12-31T23:59:60")

[14:38] <camelia> rakudo-moar 6d1e95: ( no output )

[14:38] <unmatched}> star: DateTime.new("2016-12-31T23:59:60")

[14:38] <camelia> star-m 2016.04: OUTPUT«Second out of range. Is: 60, should be in 0..^60; There is no leap second on UTC 2016-12-31␤  in block <unit> at <tmp> line 1␤␤»

[14:38] *** abraxxa joined
[14:38] <unmatched}> ^ another worm from the leap second can :)

[14:40] <harmil> Sorry for the utterly weird bug report, but it was strange enough behavior I thought I should rakudobug it.

[14:40] <harmil> https://rt.perl.org/Public/Bug/Display.html?id=128751

[14:41] <timotimo> right, you can apparently make a program crash if you can supply it with a date that's valid to the rest of the system, but not to rakudo

[14:41] <unmatched}> I wonder how evil an idea would be to expose this to the user: https://github.com/rakudo/rakudo/blob/6d1e95c96bc2a0497906ce1b3ea1d1c928a8389f/src/core/Rakudo/Internals.pm#L841

[14:42] <unmatched}> And have a module that adds new seconds to it. So you can keep updating the module with new leap seconds that will be effectively updating the Rakudo's leap second table

[14:43] <unmatched}> bisect: for 1..100 -> $i { say (((^$i).map: {^$_}) <<(-)>> ((^($i+1)).map: {$_ xx $i})) }

[14:43] <unmatched}> Oh shit

[14:44] <timotimo> isn't it supposed to be "bisectable:"?

[14:44] <unmatched}> bisect: 2+2

[14:44] <unmatched}> bisectable: 2+2

[14:44] <unmatched}> I think both work. And now it's churning my first one.

[14:45] <timotimo> mhm

[14:45] <timotimo> m: for 1..100 -> $i { say (((^$i).map: {^$_}) <<(-)>> ((^($i+1)).map: {$_ xx $i})) }

[14:45] <camelia> rakudo-moar 6d1e95: OUTPUT«(timeout)WARNINGS for <tmp>:␤Useless use of $_ in sink context (line 1)␤(() ())␤(() (set(0) set(0)) ())␤(() (set(0) set(0) set(0)) (set(0) set(1) set(0)) ())␤(() (set(0) set(0) set(0) set(0)) (set(0) set(1) set(0) set(1)) (set(0) set(1) set(2) se…»

[14:46] <timotimo> m: .perl.say for [\,] ^100

[14:46] <camelia> rakudo-moar 6d1e95: OUTPUT«(0,)␤(0, 1)␤(0, 1, 2)␤(0, 1, 2, 3)␤(0, 1, 2, 3, 4)␤(0, 1, 2, 3, 4, 5)␤(0, 1, 2, 3, 4, 5, 6)␤(0, 1, 2, 3, 4, 5, 6, 7)␤(0, 1, 2, 3, 4, 5, 6, 7, 8)␤(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)␤(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)␤(0, 1, 2, 3, 4, 5, 6, 7…»

[14:46] <timotimo> are you interested in this kind of thing?

[14:47] *** bisectable left
[14:47] <unmatched}> I was just trying to see if bisectable could point to a commit that shows what fixed harmil's bug

[14:48] *** ribasushi left
[14:48] <unmatched}> harmil: there's a newer R*. Are you able to try with it? http://rakudo.org/downloads/star/rakudo-star-2016.07-x86_64%20(JIT).msi

[14:49] <harmil> will do later, got a delivery so now I'm off to @job[0]

[14:49] <unmatched}> I should probably do the same...

[14:52] <lizmat> unmatched}: all for exposing the dates / posix values

[14:52] <lizmat> but would probably not be in favour of allowing it to be added upon

[14:52] <lizmat> rather, so it can serve as a basis of a module that *does* allow adding ?

[14:52] *** sufrostico left
[14:52] <lizmat> hmmm...

[14:53] *** wamba left
[14:53] <nebuchadnezzar> Is it on purpose that some module names or method references are not links to their definition ? like the antepenultimite and last paragraphes in https://docs.perl6.org/language/ipc ?

[14:54] <unmatched}> The module can even be updated automatically, by setting a script to watch when Rakudo adds new seconds

[14:54] *** ribasushi joined
[14:55] *** skids joined
[14:55] <unmatched}> nebuchadnezzar: don't think there's any hard reason. Just the person writing it used a C<> Pod marker rather than an L<> OTOH, I've no idea if L<IO::Path> would automatically make a  link to that type

[14:55] <moritz> nebuchadnezzar: probably just laziness on part of the authors

[14:56] *** acrussell joined
[14:56] <nebuchadnezzar> moritz: ok, so it does not hurt if I convert some C<> to L<> ?

[14:57] <unmatched}> nebuchadnezzar: also RE your previous comments about highlighting on https://docs.perl6.org/language/quoting  The reason code is not highlighted is because there's a bug that prevents highlighting when B<> or the like are used in the code sample. And I'm guessing the plain-text samples are highlighted as code simply because they're marked up as code.

[14:57] <moritz> nebuchadnezzar: it would be appreciated if you do that

[14:57] <nebuchadnezzar> unmatched}: yes, moritz confirm that too

[14:57] <unmatched}> oh

[14:59] <nebuchadnezzar> moritz: ok, I'll do that, it's frustrating to search a clickable link when jumping to a part of a documentation

[15:00] *** cyphase left
[15:05] *** cyphase joined
[15:05] *** Tonik joined
[15:10] <dalek> doc/css_animation: 917be4d | Altai-man++ | html/ (2 files):

[15:10] <dalek> doc/css_animation: Css-based animation for TOC.

[15:10] <dalek> doc/css_animation: review: https://github.com/perl6/doc/commit/917be4d16b

[15:11] *** rurban joined
[15:11] <sena_kun> Ah.

[15:11] <sena_kun> Wrong file.

[15:12] <unmatched}> I'd say: 1 missing file. Both sass and css need to be updated

[15:12] <unmatched}> (at least until next week)

[15:12] *** khw joined
[15:12] <sena_kun> unmatched}, I noticed it just now. :) I'll update it now...

[15:12] *** rindolf left
[15:13] <dalek> doc/css_animation: 5c3916b | Altai-man++ | assets/sass/style.scss:

[15:13] <dalek> doc/css_animation: Actually needed SASS-file, fix for of previous commit

[15:13] <dalek> doc/css_animation: review: https://github.com/perl6/doc/commit/5c3916bbb9

[15:15] <sena_kun> Autocomplete of filepaths is evil sometimes.

[15:16] *** rindolf joined
[15:17] <sena_kun> Ah, I've ruined all the PR. Maybe not my day.

[15:17] <sena_kun> s/PR/branch

[15:18] <unmatched}> sena_kun: how did you ruin the branch?

[15:18] <dalek> ecosystem: e9af3ed | (Peter Pentchev)++ | META.list:

[15:18] <dalek> ecosystem: Add Test::Deeply::Relaxed to the ecosystem.

[15:18] <dalek> ecosystem: 

[15:18] <dalek> ecosystem: Loosely compare two data structures in depth.

[15:18] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/e9af3edd08

[15:18] <dalek> ecosystem: 204be27 | Altai-man++ | META.list:

[15:18] <dalek> ecosystem: Merge pull request #229 from ppentchev/roam-test-deeply-relaxed

[15:18] <dalek> ecosystem: 

[15:18] <dalek> ecosystem: Add Test::Deeply::Relaxed to the ecosystem.

[15:18] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/204be27647

[15:19] <sena_kun> unmatched}, I forked it not from master, but from another branch, so it can't be merged without this another branch changes.

[15:19] <unmatched}> https://github.com/ppentchev/perl6-Test-Deeply-Relaxed

[15:20] <unmatched}> I'm still waiting for someone to do P6 version of P5's Test::Deep(ly?)

[15:20] <unmatched}> So you could, say, compare data structures that have timestamps or other volatile info by checkign them with regexes, while doing exact matches for other keys in a hash or array

[15:20] <[Coke]> unmatched}: I've already pinged the rt bug admins and pointed them to that ticket, I'll let you know what I hear back.

[15:21] <unmatched}> [Coke]++

[15:25] <dalek> doc/animated_css: 8d8f62f | Altai-man++ | / (2 files):

[15:25] <dalek> doc/animated_css: Css-based TOC animation

[15:25] <dalek> doc/animated_css: review: https://github.com/perl6/doc/commit/8d8f62fe72

[15:25] *** rurban left
[15:31] *** travis-ci joined
[15:31] <travis-ci> Doc build passed. Altai-man 'Css-based animation for TOC.'

[15:31] <travis-ci> https://travis-ci.org/perl6/doc/builds/147786240 https://github.com/perl6/doc/commit/917be4d16b76

[15:31] *** travis-ci left
[15:35] *** travis-ci joined
[15:35] <travis-ci> Doc build passed. Altai-man 'Actually needed SASS-file, fix for of previous commit'

[15:35] <travis-ci> https://travis-ci.org/perl6/doc/builds/147787164 https://github.com/perl6/doc/compare/917be4d16b76...5c3916bbb963

[15:35] *** travis-ci left
[15:36] *** bisectable joined
[15:36] <bisectable> unmatched}: Exit code is 0 on both starting points, bisecting by using the output

[15:36] <bisectable> unmatched}: bisect log: https://gist.github.com/e83b51a5a4032fced1517b8d37a5cbe9

[15:37] <bisectable> unmatched}: (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb5

[15:37] <bisectable> unmatched}: On both starting points the exit code is 0 and the output is identical as well

[15:37] <bisectable> unmatched}: Output on both points: WARNINGS for /tmp/Q_XxJSFL8Q:␤Useless use of "+" in expression "2+2" in sink context (line 1)

[15:37] <bisectable> unmatched}: On both starting points the exit code is 0 and the output is identical as well

[15:37] <bisectable> unmatched}: Output on both points: WARNINGS for /tmp/fY8PKahj4r:␤Useless use of "+" in expression "2+2" in sink context (line 1)

[15:37] <unmatched}> :D

[15:39] <unmatched}> FWIW that animation code can be greatly simlified. The JS bit can just be Cookies.set('toc_state', el.text() == '[hide]' ? 'hidden' : 'shown'); el.parents('nav').find('tbody').toggleClass('hiddenTOC'); or something similar and the CSS code can use one class/classless to style + the vendor prefixes can all go away, since all browsers that we support can handle `transition`

[15:39] *** sno left
[15:40] <unmatched}> sena_kun: this needs to be converted to a class toggle too: https://github.com/perl6/doc/blob/8d8f62fe7203dc8282c41448f003d03f003b337f/html/js/main.js#L40

[15:40] <unmatched}> Right now once you hide toc you can't unhide it, from what I see

[15:41] <unmatched}> err... well, the conditional below it... that still calls .hide()

[15:42] *** jkramer left
[15:42] <sena_kun> unmatched}, ah, right, this should be changed too. I didn't know about safe prefixes, so I went with all-case variant. Yes, I'll update it now.

[15:43] <unmatched}> sena_kun++

[15:44] *** travis-ci joined
[15:44] <travis-ci> Doc build passed. Altai-man 'Css-based TOC animation'

[15:44] <travis-ci> https://travis-ci.org/perl6/doc/builds/147789719 https://github.com/perl6/doc/commit/8d8f62fe7203

[15:44] *** travis-ci left
[15:51] *** cdg joined
[15:53] *** MorayJ left
[16:03] *** mcmillhj left
[16:06] *** domidumont left
[16:07] *** andrewb joined
[16:08] *** andrewb is now known as Guest60689

[16:09] *** Guest60689 left
[16:18] *** Aggressively_Alp joined
[16:21] *** ParsonsNose left
[16:25] *** abraxxa left
[16:28] *** cdg left
[16:30] *** zakharyas joined
[16:31] *** ParsonsNose joined
[16:32] *** cdg joined
[16:35] *** Aggressively_Alp left
[16:37] *** salv0 left
[16:40] *** acrussell left
[16:42] *** kurahaupo left
[16:43] *** hursh joined
[16:44] *** zakharyas left
[16:46] *** mcmillhj joined
[16:47] <hursh> Does anyone know if the latest star release should build on SLES11?

[16:47] <hursh> "make_path" is not exported by the File::Path module

[16:48] <moritz> hursh: what's the perl 5 version?

[16:48] <hursh> Looks like perl 5.10 is too old.  I'm just wondering if that's intentional.

[16:48] <dalek> doc: 62cc649 | (Jan-Olof Hendig)++ | doc/Type/Pair.pod6:

[16:48] <dalek> doc: Added docs for Pair.keys

[16:48] <dalek> doc: review: https://github.com/perl6/doc/commit/62cc649b35

[16:48] <moritz> hursh: no, we don't intentionally break the build :-)

[16:49] <moritz> though 5.10 is *OLD*

[16:49] <hursh> :-)  I mean stop supportting version of perl older than ???

[16:49] <hursh> SLES11 is old.

[16:49] <hursh> ok

[16:49] <moritz> afaict we still try to support 5.10.1 at least

[16:49] <moritz> or maybe 5.10.0

[16:50] <hursh> I'm building it for the systems in my cluster. Just wondering I need to skip sles11.

[16:50] <stmuk> I think there are recent dependencies on versions of perl > 5.10

[16:50] <hursh> perl-base-5.10.0-64.72.1 is the problem here.  File::Path is too old.

[16:51] <TimToady> m: 42 xx 42

[16:51] <camelia> rakudo-moar 4c848b: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant integer 42 in sink context (line 1)␤»

[16:51] <TimToady> m: my method bar($a) { $a xx 42 }

[16:51] <camelia> rakudo-moar 4c848b: ( no output )

[16:52] <TimToady> with latest change, finds a real bug in the setting

[16:52] <TimToady> in src/core/Block.pm: my $need_cap = $sig.count == Inf and not ($slurp_p and $slurp_n);

[16:53] <TimToady> skids: ^^^ your code, according to git :)

[16:53] *** trnh left
[16:54] <TimToady> oh, this isn't -dev oops

[16:54] *** hursh left
[16:56] <dalek> doc/animated_css: 21893b2 | Altai-man++ | / (2 files):

[16:56] <dalek> doc/animated_css: Simplification of both js and css code for animation

[16:56] <dalek> doc/animated_css: review: https://github.com/perl6/doc/commit/21893b224c

[17:00] <sena_kun> afk for an hour, reviews are still welcome.

[17:00] <unmatched}> sena_kun: looks good to me

[17:05] *** firstdayonthejob joined
[17:08] *** trnh joined
[17:13] *** spider-mario joined
[17:13] *** AlexDaniel joined
[17:13] *** spider-mario left
[17:14] *** spider-mario joined
[17:26] *** Coleoid_n joined
[17:27] *** Aggressively_Alp joined
[17:28] *** rurban joined
[17:29] <Coleoid_n> Hi, #perl6!

[17:29] <unmatched}> \o

[17:29] <Coleoid_n> I updated to R* 2016.07 and the REPL seems kaput, is that a known issue?

[17:30] <unmatched}> Coleoid_n: nope. What's the issue?

[17:30] *** ParsonsNose left
[17:31] *** dakkar left
[17:31] *** ParsonsNose joined
[17:32] <Coleoid_n> I enter perl6 on the command line and it returns without output.  I'll put together a paste if that's useful.

[17:32] <unmatched}> 0.o

[17:32] <unmatched}> What OS?

[17:32] <Coleoid_n> I'm on Win 10 in Powershell.

[17:32] *** huggable joined
[17:33] <Coleoid_n> I'll try it in cmd...

[17:34] *** Aggressively_Alp left
[17:34] <Coleoid_n> Also weird, in cmd it reports "Access is denied." and exits.

[17:34] <unmatched}> Coleoid_n: Would you please report it as a bug? Testing such basic operation of REPL is part of the build process, so it's really weird that it slipped through. Please include some details about OS and any installed tools and modules that may affect this.

[17:35] <unmatched}> huggable: rakudobug

[17:35] <huggable> unmatched}, To report a bug, email detailed description and any test cases to [email@hidden.address] or use perl6 query on http://rt.perl.org ; see https://github.com/rakudo/rakudo/#reporting-bugs

[17:35] <Coleoid_n> I'm newly updated to Win 10, so it could be an issue with that.

[17:35] <unmatched}> I got Win10 at home and REPL worked fine there last time I tried.

[17:35] <unmatched}> (via cmd.exe)

[17:36] <Coleoid_n> I'll send that report, after poking it a bit more.  Thanks!

[17:37] *** domidumont joined
[17:38] <stmuk> maybe it's a perms/ownership issue?

[17:39] <stmuk> do you get the same error opening a cmd.exe windows as Adminstrator?

[17:39] <Coleoid_n> perl6 -v works in a shell with admin permissions, otherwise another "access denied", and I'm having other perms issues, so I believe you're right, stmuk.

[17:40] <stmuk> :)

[17:41] <gfldex> Coleoid_n: can't reproduce on a clean Win10 VM. I didn't upgrade tho (hence clean).

[17:42] <Coleoid_n> Oh, that's another possibility.  When I was upgrading, I ran into file overwrite problems.  I'll do an uninstall and clean reinstall.

[17:42] <Coleoid_n> (of R*)

[17:42] *** Aggressively_Alp joined
[17:44] *** sufrostico joined
[17:46] *** ParsonsNose left
[17:50] *** trnh left
[17:50] *** trnh joined
[17:50] *** trnh left
[17:50] *** trnh joined
[17:55] <[Coke]> ok, this is so off topic, but I was just followed by "Beverage Consulting, liquid brands management"... probably because I've got a coke in my name... and their handle is @liquidbm

[17:56] <[Coke]> I realize younger than me and you probably won't get why that's a.. crappy nick, but damn.

[17:56] <Coleoid_n> Blugh.

[17:56] <Coleoid_n> Guess I'm >= your age, then, Coke.

[17:56] * unmatched} doesn't get why that's a crappy nick

[17:57] <[Coke]> bm is what my grandmother called a bowel movement.

[17:58] <unmatched}> heh

[17:58] <unmatched}> Yeah, google search corroborates that usage.... Right after showing Beverage Consulting as first result :P

[17:58] * [Coke] is 40 something.

[17:58] * unmatched} is 15

[17:59] <dalek> bisectbot: eee0383 | (Aleks-Daniel Jakimenko-Aleksejev)++ | bisectable.pl:

[17:59] <dalek> bisectbot: Reduce bisectable timout

[17:59] <dalek> bisectbot: 

[17:59] <dalek> bisectbot: Given that this timeout is per each run, 200 is a bit too much.

[17:59] <dalek> bisectbot: Each bisect query should test about 12 commits, so with the previous

[17:59] <dalek> bisectbot: limit it meant that it would hang for half an hour.

[17:59] <dalek> bisectbot: 

[17:59] <dalek> bisectbot: Now it will hang for two minutes, but that's okay.

[17:59] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/eee0383ff3

[18:00] <AlexDaniel> unmatched}: ↑ hehe 

[18:00] <[Coke]> unmatched}: seriously? huh.

[18:01] * stmuk is 31 (but not in base 10)

[18:01] <unmatched}> [Coke]: sure, why not. It's not like I would make something like this up.

[18:02] <unmatched}> And my 10-years of Perl experience are also true :)

[18:03] <unmatched}> I started writing code when I was 3. My mother read me programming manuals in leu of children's books :D

[18:03] * hoelzro didn't start coding until 17 =/

[18:03] <hoelzro> unmatched}: good on you for getting an early start =)

[18:03] <unmatched}> :D

[18:04] *** mcmillhj left
[18:04] <AlexDaniel> how can I do that with a loop?

[18:04] <AlexDaniel> m: say :4<31>; say :5<31>; say :6<31>; say :7<31>; say :8<31>; say :9<31>; say :10<31>; say :11<31>; say :12<31>;

[18:04] <camelia> rakudo-moar 4c848b: OUTPUT«13␤16␤19␤22␤25␤28␤31␤34␤37␤»

[18:06] *** bisectable left
[18:06] *** zacts joined
[18:06] *** bisectable joined
[18:07] <AlexDaniel> bisect: for 1..100 -> $i { say (((^$i).map: {^$_}) <<(-)>> ((^($i+1)).map: {$_ xx $i})) }

[18:07] <AlexDaniel> :P

[18:10] * [Coke] started somewhere between zz and hoelzro 

[18:11] *** lambd0x joined
[18:11] <lambd0x> Hi everyone o/

[18:11] <unmatched}> I was kidding lol. I'm 30 and I started coding at 14 :)

[18:11] <hoelzro> o/ lambd0x 

[18:11] <hoelzro> gah

[18:11] <hoelzro> I'm way too gullible =S

[18:11] <unmatched}> lol

[18:11] *** bisectable left
[18:12] <AlexDaniel> nah, still not enough

[18:12] *** mst left
[18:12] *** mst joined
[18:13] <lambd0x> people is there a way to take an existing image open it and show it in a program?

[18:14] <perlpilot> lambd0x: "is there a way to ..." style questions mostly have an answer of "yes, but ..."  and it's the "but ..." part you really need to know about :)

[18:15] <[Coke]> jnthn: found another segfault for you in RT #123434

[18:15] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=123434

[18:15] <[Coke]> ww

[18:16] *** bisectable joined
[18:17] <unmatched}> m: use MONKEY-GUTS; nqp::radix($_, "31", 0, 0)[0].say for 4..12

[18:17] <camelia> rakudo-moar 4c848b: OUTPUT«13␤16␤19␤22␤25␤28␤31␤34␤37␤»

[18:17] <unmatched}> AlexDaniel: there's that. No idea how to do with P6 tho

[18:18] <lambd0x> perlpilot: I wanted to display an image to the user I've found inumerous ways of read, manipulation, etc. but not that though.

[18:19] <perlpilot> lambd0x: maybe one of the SDL or Gtk modules has something for you?

[18:19] *** itaipu joined
[18:19] <perlpilot> lambd0x: there may be others, search modules.perl6.org

[18:19] <gfldex> m: 31.base($_).say for 2..16;

[18:19] <camelia> rakudo-moar 4c848b: OUTPUT«11111␤1011␤133␤111␤51␤43␤37␤34␤31␤29␤27␤25␤23␤21␤1F␤»

[18:20] *** Tonik left
[18:21] <lambd0x> perlpilot: In our modules there're some about that creates an image and even apply some effect or resize it. But not for displaying it really.

[18:21] <unmatched}> lambd0x: there are some GTK modules http://modules.perl6.org/#q=GTK%3A%3A and SDL2 module: https://github.com/timo/SDL2_raw-p6

[18:22] <unmatched}> lambd0x: but it also depends on your audience and purpose. `run "eog", $image` works fine on my box :)

[18:23] <lambd0x> perlpilot: yes, but I wanted something OS independent..

[18:23] <unmatched}> Show it in a browser :P

[18:23] <unmatched}> There's probably a way to queue what the system's default thing for browing is

[18:24] *** mcmillhj joined
[18:24] <lambd0x> unmatched}: unmatched} hm... true. Is there a native way of doing it. or better rakudo perl already support it?

[18:24] <unmatched}> No idea.

[18:25] <lambd0x> unmatched}: ahahah

[18:25] <unmatched}> heh

[18:25] <lambd0x> unmatched}: Prob in perl 5 there is. 

[18:25] <lambd0x> if not in rakudo perl 6 :)

[18:25] <lambd0x> thanks guys

[18:28] <geekosaur> windows has a reliable way to open the default browser. os x has one with some edge cases. most linux does *not* have a reliable way; the documented one (xdg-open) is widely mis-implemented and often buggy

[18:28] <hoelzro> hehe, edge cases =P

[18:30] <lambd0x> ahahaha

[18:32] <skids> Well, on sensible linux systems, you have sensible-browser

[18:34] <unmatched}> lol. I ran it not expecting much, but turns out it works

[18:34] <lambd0x> :)

[18:34] <unmatched}> Event starts lynx on my headless debian server

[18:38] <sena_kun> Since nobody is against, I'm merging css-animation for the TOC now.

[18:38] <unmatched}> sena_kun++

[18:38] <dalek> doc: 8d8f62f | Altai-man++ | / (2 files):

[18:38] <dalek> doc: Css-based TOC animation

[18:38] <dalek> doc: review: https://github.com/perl6/doc/commit/8d8f62fe72

[18:38] <dalek> doc: 21893b2 | Altai-man++ | / (2 files):

[18:38] <dalek> doc: Simplification of both js and css code for animation

[18:38] <dalek> doc: review: https://github.com/perl6/doc/commit/21893b224c

[18:38] <dalek> doc: 60aa1dd | Altai-man++ | / (2 files):

[18:38] <dalek> doc: Merge pull request #767 from perl6/animated_css

[18:38] <dalek> doc: 

[18:38] <dalek> doc: Css-based TOC animation

[18:38] <dalek> doc: review: https://github.com/perl6/doc/commit/60aa1dd4c9

[18:42] *** acrussell joined
[18:45] *** wamba joined
[18:45] *** rurban1 joined
[18:47] *** ParsonsNose joined
[18:47] *** Aggressively_Alp left
[18:49] *** trnh left
[18:50] *** rurban left
[18:50] *** rurban1 left
[18:54] *** rurban joined
[18:54] *** rurban left
[18:54] *** lambd0x left
[18:55] *** Actualeyes left
[18:56] *** labster joined
[19:04] *** zacts left
[19:04] *** trnh joined
[19:05] *** domidumont left
[19:06] <harmil> m: say [*] set(1,2,3)

[19:06] <camelia> rakudo-moar debc7c: OUTPUT«set(3, 1, 2)␤»

[19:06] <harmil> Is it wrong of me to expect that to be 9?

[19:06] <moritz> yes

[19:06] <moritz> a set is not a list

[19:08] <harmil> Is it wrong of me to think that I'm not the last person who is going to ask that?

[19:08] <unmatched}> Well, also 9 is a wrong number :)

[19:08] <unmatched}> m: say [*] set(1,2,3).keys

[19:08] <camelia> rakudo-moar debc7c: OUTPUT«6␤»

[19:08] <harmil> Sorry, I 'm upside down :)

[19:08] <harmil> I meant 6

[19:09] <unmatched}> m: say [*] set(1,2,3), set(4,5,6)

[19:09] <camelia> rakudo-moar debc7c: OUTPUT«9␤»

[19:09] <unmatched}> ehehe

[19:10] <harmil> Well, obviously.

[19:10] <perlpilot> harmil: what would a reasonable person think the result of multiplying two sets should be?  (or a set by a number?)

[19:11] <hoelzro> I understand the concern that unmatched}'s snippet above doesn't look like multiplying sets together

[19:11] <harmil> I would expect that either it would warn, error or resort to a hyperoperation of the requested nonsensical operation.

[19:11] <[Coke]> Looks fine to me.

[19:11] <[Coke]> m: say +set(1,2,3)

[19:11] <camelia> rakudo-moar f0abe8: OUTPUT«3␤»

[19:11] <hoelzro> to me as well - but I understand how newbies could get tripped up on that

[19:11] <[Coke]> ^^ good luck keeping that and making [*] warn instead of using it.

[19:11] *** rangerprice joined
[19:12] <hoelzro> my $a = set(1..3); my $b = set(4..6); say [*] $a, $b;

[19:12] <hoelzro> that makes it more obvious

[19:12] <[Coke]> m: my $a = set(1..3); my $b = set(4..6); say [*] $a, $b;

[19:12] <camelia> rakudo-moar f0abe8: OUTPUT«9␤»

[19:12] <harmil> The idea that set(1,2,3) and [1,2,3] are fundamentally incompatible views of collections of integers seems confusing to me

[19:12] <harmil> One is an ordered list one is unordered. That's really the end of it

[19:13] *** sno joined
[19:13] <harmil> ((logically))

[19:13] <hoelzro> my first "real" programming language was Java, so I'm biased in thinking that it makes sense

[19:14] <hoelzro> (because the Java collections API defines a List as an ordered sequence of values, and a Set as an unordered collection of values)

[19:14] <hoelzro> the important thing about a list is order; whereas the important thing about a set is membership

[19:15] <unmatched}> harmil: set is a collection of pairs, really

[19:15] <unmatched}> m: dd set(1,2,3)

[19:15] <camelia> rakudo-moar f0abe8: OUTPUT«set(3,1,2)␤»

[19:15] <unmatched}> m: dd |set(1,2,3)

[19:15] <camelia> rakudo-moar f0abe8: OUTPUT«3 => Bool::True␤1 => Bool::True␤2 => Bool::True␤»

[19:15] <perlpilot> Some multis for infix:<*> that took into account Set and warned might still be useful and non-onerus for those that would use sets

[19:16] <unmatched}> m: my $s = SetHash.new: 1,2,3; $s<2> = 42; say $s

[19:16] <camelia> rakudo-moar f0abe8: OUTPUT«SetHash.new(3, 2, 1, 2)␤»

[19:16] <unmatched}> harmil: ^ this in particular is a curious effect.

[19:16] <unmatched}> m: my $s = SetHash.new: 1,2,3; $s<2> = 42; dd|$s

[19:16] <camelia> rakudo-moar f0abe8: OUTPUT«WARNINGS for <tmp>:␤Useless use of "|" in expression "dd|$s" in sink context (line 1)␤block <unit>␤»

[19:16] <unmatched}> m: my $s = SetHash.new: 1,2,3; $s<2> = 42; dd |$s

[19:16] <camelia> rakudo-moar f0abe8: OUTPUT«3 => Bool::True␤IntStr.new(2, "2") => Bool::True␤1 => Bool::True␤2 => Bool::True␤»

[19:17] <unmatched}> m: my $s = SetHash.new: 1,2,3; $s{2} = 42; say $s

[19:17] <camelia> rakudo-moar f0abe8: OUTPUT«SetHash.new(3, 1, 2)␤»

[19:17] <unmatched}> This, I guess is better. You can't have more than one member.

[19:17] <unmatched}> That's the same

[19:17] <harmil> I understand the implementation and the concept of bags, etc. I'm just asking why we're exposing that complexity at the level of trying to iterate over an object ala [*] [1,2,3] (which does produce 6,)

[19:17] <[Coke]> m: say "this".path.WHAT

[19:17] <camelia> rakudo-moar f0abe8: OUTPUT«(Path)␤»

[19:18] <unmatched}> m: say Set ~~ Iterable

[19:18] <camelia> rakudo-moar f0abe8: OUTPUT«False␤»

[19:18] <unmatched}> m: say [] ~~ Iterable

[19:18] <camelia> rakudo-moar f0abe8: OUTPUT«True␤»

[19:18] <unmatched}> m: say Hash ~~ Iterable

[19:18] <camelia> rakudo-moar f0abe8: OUTPUT«True␤»

[19:18] <unmatched}> *shrug*

[19:20] <unmatched}> m: say [*] set(1,2,3) but Iterable

[19:20] <camelia> rakudo-moar f0abe8: OUTPUT«Cannot resolve caller Numeric(Pair: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[19:21] <unmatched}> m: use MONKEY-TYPING; augment class Pair { method Numeric { self.key } }; say [*] set(1,2,3) but Iterable

[19:21] <camelia> rakudo-moar f0abe8: OUTPUT«6␤»

[19:21] <unmatched}> ehehe. I ♥ Perl 6 :)

[19:22] *** darutoko left
[19:23] *** rangerprice left
[19:23] *** rangerprice joined
[19:23] *** rangerprice left
[19:25] <mniip> so uh, any good resource for jumping straight into perl6?

[19:25] <unmatched}> m: use MONKEY-TYPING; augment class Set does Iterable {}; augment class Pair { method Numeric { self.key } }; say [*] |set(1,2,3), |set(4,5,6)

[19:25] <camelia> rakudo-moar f0abe8: OUTPUT«720␤»

[19:25] <unmatched}> mniip: straight from where?

[19:26] <mniip> I don't know, generic programming experience?

[19:26] <mniip> perl 5 perhaps?

[19:26] <harmil> I highly recommend the docs site. It has a lot of good high-level starting points

[19:26] <unmatched}> mniip: for P5 we have a few 5-to tuts here: http://docs.perl6.org/language.html

[19:26] <unmatched}> mniip: general; I guess Learn X in Y is a good site: http://learnxinyminutes.com/docs/perl6/

[19:27] <mniip> what I mean is I'm not looking for tutorials on programming

[19:27] <unmatched}> huggable: new

[19:27] <huggable> unmatched}, See "For Newcomers" section on http://perl6.org/documentation/

[19:27] <hoelzro> oh, hi mniip =)

[19:27] <unmatched}> mniip: yeah, LearnXinY is a good place. It just goes through concepts

[19:28] <unmatched}> s/concepts/ways to do things in P6/;

[19:28] <mniip> mhm

[19:28] <mniip> also hi hoelzro

[19:28] <mniip> what happened between you and lua :p

[19:29] <unmatched}> There's also http://perl6intro.com/ but I've no idea what its target readers are

[19:29] <hoelzro> I still use it - I've just been taking a break from #lua

[19:29] *** lichtkind joined
[19:30] <[Coke]> also, rosettacode is good for "I know how to solve this problem in X, how do I solve it in Y?"

[19:30] <[Coke]> Perl 6 has pretty good coverage there.

[19:33] <mniip> huh

[19:34] <mniip> identifiers can contain apostrophes but not at the end?

[19:34] <hoelzro> yup

[19:34] <unmatched}> And hyphens too

[19:34] <unmatched}> m: my \this-is-friggin'-awesome;

[19:34] <camelia> rakudo-moar f0abe8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Term definition requires an initializer␤at <tmp>:1␤------> 3my \this-is-friggin7⏏5'-awesome;␤»

[19:34] <unmatched}> m: my \this-is-friggin'-awesome = 'meow';

[19:34] <camelia> rakudo-moar f0abe8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Term definition requires an initializer␤at <tmp>:1␤------> 3my \this-is-friggin7⏏5'-awesome = 'meow';␤»

[19:34] <mniip> I think you need an alpha between ' and -

[19:34] <unmatched}> heh. I guess not followed by a hyphen either :D

[19:35] <unmatched}> m: my \this-is-friggin'so-awesome = 'meow';

[19:35] <camelia> rakudo-moar f0abe8: ( no output )

[19:35] <unmatched}> m: my \Δ = 42; say Δ

[19:35] <camelia> rakudo-moar f0abe8: OUTPUT«42␤»

[19:35] <unmatched}> ^_^

[19:35] <gfldex> m: say 'foo{my $a'b}bar'

[19:35] <camelia> rakudo-moar f0abe8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say 'foo{my $a'7⏏5b}bar'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifie…»

[19:36] <gfldex> m: say Q:c'foo{my $a'b}bar'

[19:36] <camelia> rakudo-moar f0abe8: OUTPUT«5===SORRY!5===␤Unrecognized adverb: :c'foo␤at <tmp>:1␤------> 3say Q:c'foo7⏏5{my $a'b}bar'␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3say Q:c'foo{my $a'b}7⏏5bar'␤    expecting any of:␤        …»

[19:36] <mniip> in haskell you add ' at the end of a function name to denote some small difference, e.g more strictness, not sure what the point of having ' in identifiers is in perl with that restriction

[19:36] <gfldex> m: say Q:c 'foo{my $a'b}bar'

[19:36] <camelia> rakudo-moar f0abe8: OUTPUT«Use of uninitialized value $a'b of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at <tmp> line 1␤foobar␤»

[19:39] <unmatched}> Probably something to do with single-parse parsing and it needing to know where terms end and stuff

[19:39] *** TEttinger joined
[19:40] <[Coke]> .u u+F8F6

[19:40] <yoleaux> No characters found

[19:40] <mniip> no I mean I understand why it might be ambiguous without the restriction but then why have ' at all

[19:40] <unmatched}> mniip: to write things like doesn't-hang() (actual sub from our test suite)

[19:41] <unmatched}> There was a talk about ditching it before Christmas release, but luckily reason prevailed ^_^

[19:41] <unmatched}> m: "\x[F8F6]".uninames.say

[19:41] <camelia> rakudo-moar f0abe8: OUTPUT«(<Private Use>)␤»

[19:42] * mniip is glad he isn't using his 'm' nickname on a regular basis

[19:43] <unmatched}> :D

[19:44] <mniip> "Reduction operators work on lists of values. They are formed by surrounding the operator with brackets []"

[19:44] <mniip> is that a right fold, a left fold, or is associativity assumed

[19:44] <unmatched}> m: say [*] ^4

[19:44] <camelia> rakudo-moar f0abe8: OUTPUT«0␤»

[19:44] <unmatched}> m: say [*] 1, 2, 3

[19:44] <camelia> rakudo-moar f0abe8: OUTPUT«6␤»

[19:45] <unmatched}> m: say [\*] 1, 2, 3

[19:45] <camelia> rakudo-moar f0abe8: OUTPUT«(1 2 6)␤»

[19:45] <unmatched}> I don't know what folds are :(

[19:46] <[Coke]> [*] is on a single list, does that even have a fold?

[19:46] *** hursh joined
[19:47] <geekosaur> somehow I think you are talking different languages...

[19:47] <gfldex> mniip: you may want to watch https://youtu.be/BJIfPFpaMRI?t=2053

[19:47] <[Coke]> [*] and [\*] operate left to right, fwiw.

[19:50] *** acrussell left
[19:50] <hoelzro> [*] is a fold, [\*] is a scan

[19:50] <hoelzro> m: [*] ^10

[19:50] <camelia> rakudo-moar f0abe8: ( no output )

[19:50] <hoelzro> m: say [*] ^10

[19:50] <camelia> rakudo-moar f0abe8: OUTPUT«0␤»

[19:50] <hursh> Hi.  I have a stupid question.  Where do we report bugs for the star releases?

[19:50] <hoelzro> oh, ha

[19:50] <hoelzro> m: say [*] 1..10

[19:50] <camelia> rakudo-moar f0abe8: OUTPUT«3628800␤»

[19:51] <hoelzro> m: say [-] 1..10

[19:51] <camelia> rakudo-moar f0abe8: OUTPUT«-53␤»

[19:51] <hoelzro> m: say [R-] 1..10

[19:51] <camelia> rakudo-moar f0abe8: OUTPUT«-35␤»

[19:51] <hoelzro> I *think* using [R-] would be the right way to effectively make the fold go the other way

[19:52] <gfldex> hursh: [email@hidden.address]
[19:52] <mniip> hmm

[19:52] <geekosaur> my recollection is it's supposed to introspect the operator to determine associativity? (because iirc someone was noting it didn't work with exponentiation the other day?)

[19:54] <hursh> gfldex: Thanks

[19:55] <mniip> all these functional-ish features crammed into syntax

[19:56] <harmil> Tried to do the monkey typing on set... less than clear on my results:

[19:56] <harmil> m: use MONKEY-TYPING; augment class Set does Iterable { method iterator { self.keys }; method lazy { self.iterator.lazy } }; say [*] set(1,2,3)

[19:56] <camelia> rakudo-moar f0abe8: OUTPUT«Cannot resolve caller Numeric(Pair: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[19:56] <dalek> doc: c23d0f7 | (Jan-Olof Hendig)++ | doc/Type/Pair.pod6:

[19:56] <dalek> doc: Added docs for Pair.values

[19:56] <dalek> doc: review: https://github.com/perl6/doc/commit/c23d0f7528

[19:57] *** mantovani joined
[19:58] <[Coke]> if you augment an existing class, you might have to re compose it.

[20:00] <jnthn> um...that method iterator ain't gonna work out well, it's not returning an iterator.

[20:02] <harmil> Should i be calling .keys.iterator?

[20:02] <harmil> THat gives the same error

[20:04] *** ZoffixMobile joined
[20:04] <ZoffixMobile> The error is because pair can't do Numeric. See unmatched's examples above

[20:05] <ZoffixMobile> Also note: augmentation affects your entire program. You shouldn't be using it willy-nilly

[20:05] <harmil> m: use MONKEY-TYPING; augment class Set does Iterable { method iterator { self.keys.iterator }; method lazy { self.keys.lazy } }; say [*] set(1,2,3)

[20:05] <camelia> rakudo-moar f0abe8: OUTPUT«Cannot resolve caller Numeric(Pair: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[20:06] <harmil> But why should a pair be produced when I'm explicitly iterating over the keys?

[20:06] <harmil> I'

[20:07] <ZoffixMobile> dunno

[20:07] <harmil> Hmm... I'll work on this more tomorrow.

[20:09] <konobi> pmurias: how goes?

[20:12] *** mcmillhj left
[20:14] *** CIAvash left
[20:15] <mniip> why is Mu called what way? is it related to the least fixed point combinator?

[20:15] <ZoffixMobile> huggable, Mu name

[20:15] <huggable> ZoffixMobile, "M"ost "u"ndefined. Or philosophical: "The nothing from which everything proceeds"

[20:18] *** molaf left
[20:19] *** mcmillhj joined
[20:21] <rindolf> ZoffixMobile: meow! Sup?

[20:21] <ZoffixMobile> Hi

[20:23] *** mcmillhj left
[20:24] <jdv79> rindolf: hows tge weather?

[20:24] <rindolf> jdv79: it's very warm.

[20:25] <rindolf> jdv79: and sunny - though now it's past nightfall.

[20:25] <jdv79> its a bit of a scorcher here as well

[20:25] <rindolf> jdv79: how is it there?

[20:25] <rindolf> jdv79: ah.

[20:27] *** ZoffixMobile left
[20:35] <AlexDaniel> re [*] set(1,2,3) discussion

[20:35] <AlexDaniel> m: say [*] set(1,2,3) # ok, I get it

[20:35] <camelia> rakudo-moar f0abe8: OUTPUT«set(3, 1, 2)␤»

[20:36] <AlexDaniel> m: say [*] set(1,2,3), set(4,5,6) # hmmm…

[20:36] <camelia> rakudo-moar f0abe8: OUTPUT«9␤»

[20:36] <gfldex> m: say [*] 3, 3

[20:36] <camelia> rakudo-moar f0abe8: OUTPUT«9␤»

[20:36] <AlexDaniel> gfldex: sure, I am just surprised that the first one is not 3

[20:37] <gfldex> the first one should produce some undefined value

[20:37] <gfldex> m: say 3 * NaN

[20:37] <camelia> rakudo-moar f0abe8: OUTPUT«NaN␤»

[20:37] <[Coke]> m: say [*] 3

[20:37] <camelia> rakudo-moar f0abe8: OUTPUT«3␤»

[20:38] <[Coke]> m: m: say [*] set(1,2,3)

[20:38] <camelia> rakudo-moar f0abe8: OUTPUT«set(3, 1, 2)␤»

[20:39] *** mcmillhj joined
[20:41] <[Coke]> the metaop might be returning $arg there, instead of +$arg

[20:43] *** mcmillhj left
[20:44] <[Coke]> m: say set(1,2,3).Numeric.perl;

[20:44] <camelia> rakudo-moar f0abe8: OUTPUT«3␤»

[20:47] *** mcmillhj joined
[20:47] <AlexDaniel> soooo… is it a bug?

[20:47] <[Coke]> m: say [*] (3i+2)

[20:47] <camelia> rakudo-moar f0abe8: OUTPUT«2+3i␤»

[20:48] <[Coke]> m: say [*] bag(1,2,3)

[20:48] <camelia> rakudo-moar f0abe8: OUTPUT«bag(3, 1, 2)␤»

[20:48] *** jonas2 left
[20:48] <[Coke]> m: infix:<*>(3).say

[20:48] <camelia> rakudo-moar f0abe8: OUTPUT«3␤»

[20:48] <perlpilot> m: say [+] set(6,7,8)

[20:48] <camelia> rakudo-moar f0abe8: OUTPUT«Cannot resolve caller Numeric(Pair: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[20:48] <[Coke]> m: infix:<*>(set(1,2,3)).say

[20:48] <camelia> rakudo-moar f0abe8: OUTPUT«3␤»

[20:49] <[Coke]> O_O;

[20:49] <gfldex> AlexDaniel: there is a bug somewhere

[20:49] * perlpilot concurs

[20:49] <[Coke]> I would expect [*] *THING* to match infix:<*>(*THING*)

[20:49] *** kurahaupo joined
[20:50] <jnthn> Not the *THING* is iterable you wouldn't :)

[20:50] <[Coke]> I would also expect [*] *THING* to be the same as [*] +*THING*

[20:50] <gfldex> also there is ENODOCS because we don't doc what happens with lists with 1 element

[20:50] <jnthn> I guess the set iterates through its elements

[20:50] <jnthn> m: my @a = 1,2,3; say [+] @a

[20:50] <camelia> rakudo-moar f0abe8: OUTPUT«6␤»

[20:50] <jnthn> m: my @a = 1,2,3; say infix:<+> @a

[20:50] <camelia> rakudo-moar f0abe8: OUTPUT«3␤»

[20:51] <jnthn> Just like that

[20:51] *** kurahaupo left
[20:51] <jnthn> m: my @a = 1,2,3; say [+] @a, 4

[20:51] <camelia> rakudo-moar 8ede35: OUTPUT«7␤»

[20:51] <[Coke]> gfldex: for [*] ops, we should. (there's a default condition for each of the ops - [*] is the same as *1 on a single list, [+] is the same as +0...)

[20:51] <jnthn> Single arg rule in action :)

[20:53] <gfldex> m: dd [*] 3;

[20:53] <camelia> rakudo-moar 8ede35: OUTPUT«3␤»

[20:53] <gfldex> m: dd [*] (3,);

[20:53] <camelia> rakudo-moar 8ede35: OUTPUT«3␤»

[20:55] <gfldex> m: dd [-] (3,);

[20:55] <camelia> rakudo-moar 8ede35: OUTPUT«3␤»

[20:55] <AlexDaniel> m: 'say [*] ‘abc’

[20:55] <camelia> rakudo-moar 8ede35: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" ␤at <tmp>:1␤------> 3'say [*] ‘abc’7⏏5<EOL>␤    expecting any of:␤        single quotes␤        term␤»

[20:55] <AlexDaniel> m: say [*] ‘abc’

[20:55] <camelia> rakudo-moar 8ede35: OUTPUT«abc␤»

[20:55] <sena_kun> On docs.perl6.org, how update works? Isn't it preprocesses SASS file to use? It seems I need to push locally generated style.css. No good.

[20:55] <AlexDaniel> m: say [/] ‘abc’

[20:55] <camelia> rakudo-moar 8ede35: OUTPUT«abc␤»

[20:55] <AlexDaniel> m: say [+] ‘abc’

[20:55] <[Coke]> identity is the word I was trying to remember there, I think.

[20:55] <camelia> rakudo-moar 8ede35: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5abc' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[20:55] <AlexDaniel> m: say [-] ‘abc’

[20:55] <camelia> rakudo-moar 8ede35: OUTPUT«abc␤»

[20:55] <AlexDaniel> WAT

[20:56] <[Coke]> sena_kun: yes, you need to build the sass file and commit it

[20:56] <sena_kun> [Coke], thanks.

[20:56] <gfldex> AlexDaniel++ bugs++

[20:56] <[Coke]> commit the generated file, that is.

[20:56] <committable> [Coke]: ¦«the»: Cannot find this revision

[20:56] <[Coke]> commit or die!

[20:56] <committable> [Coke]: ¦«or»: Cannot find this revision

[20:56] <sena_kun> AlexDaniel, thanks for your notice, I've fixed animation now.

[20:57] <dalek> doc: 318cd11 | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod6:

[20:57] <dalek> doc: doc reduction of single element lists

[20:57] <dalek> doc: review: https://github.com/perl6/doc/commit/318cd11a74

[20:57] <[Coke]> maybe make commit only respond to "commit:" ?

[20:57] <AlexDaniel> sena_kun: it seems like you have to update .css file every time you change sass file

[20:57] <perlpilot> [Coke]: +1

[20:57] <hursh> Is there any methods or tricks to easily commafy a number?  (1000000 => 1,000,000)

[20:57] <moritz> isn't there an sprintf formatter for that, or something?

[20:58] <AlexDaniel> [Coke]: sure-sure, but no. I mean, we are going to rewrite these bots in Perl 6 soon and the thing will go away.

[20:58] <[Coke]> m: say 1000000.flip.comb(3).join(',').flip.say

[20:58] <camelia> rakudo-moar 8ede35: OUTPUT«1,000,000␤True␤»

[20:58] *** kurahaupo joined
[20:58] <[Coke]> m: 1000000.flip.comb(3).join(',').flip.say # only need one say

[20:58] <camelia> rakudo-moar 8ede35: OUTPUT«1,000,000␤»

[20:58] <dalek> doc: dc817e6 | Altai-man++ | html/css/style.css:

[20:58] <dalek> doc: Style.css was updated

[20:58] <dalek> doc: review: https://github.com/perl6/doc/commit/dc817e6287

[20:59] <AlexDaniel> sena_kun: related: https://github.com/perl6/doc/issues/662

[21:00] <sena_kun> Thanks.

[21:00] <hursh> [Coke]: cool.  Thanks

[21:00] <hursh> moritz: I didn't see any.

[21:00] *** kaare__ left
[21:01] *** skids left
[21:03] *** Coleoid_n left
[21:03] <AlexDaniel> m: ‘1000000’.comb(-69).say

[21:03] <camelia> rakudo-moar 8ede35: OUTPUT«(1 0 0 0 0 0 0)␤»

[21:05] *** Zoffix joined
[21:06] <Zoffix> sena_kun, FWIW, my comments ( https://github.com/perl6/doc/pull/767#issuecomment-235719136 ) are based on the locally built version. The ToC doesn't lose its height on narrow pages and briefly looking at it, the reason seems to be font-size on table cells.

[21:08] <sena_kun> Zoffix, can you point me to example of the narrow page?

[21:08] <Zoffix> sena_kun, just resize your browser a bit. The ToC will be at the top of the page instead of the side

[21:08] <sena_kun> Zoffix, let's try it...

[21:09] <Zoffix> sena_kun, this is what I see when I hide the ToC: blob:http%3A//imgur.com/d279d9df-4560-4e40-a06f-c3bded35dff3

[21:10] <sena_kun> Zoffix, yes, it doesn't, I know.

[21:10] <Zoffix> I mean http://i.imgur.com/ct2zOGz.png

[21:11] <AlexDaniel> right, seeing the same thing here

[21:11] <AlexDaniel> Zoffix: should it also stop taking any horizontal space when it is on the left?

[21:12] <AlexDaniel> otherwise why hide it?

[21:12] *** rindolf left
[21:12] <sena_kun> Zoffix, the reason is: we need to know *exact* max-height of the element to "slide down". The solution can use js to determine it, but it's additional computations. We can just set some "really big" value, but it's terrible solution. Animation I used based on padding and font-size, so height is untouched.

[21:13] <Zoffix> sena_kun, how come do we need exact max-height?

[21:13] <sena_kun> Zoffix, to make animation with css, you need to change (max-)height - minimal(obviously 0px) and normal. This number of different for every page with ToC.

[21:14] <sena_kun> *to know two heights

[21:15] *** firstdayonthejob left
[21:16] <Zoffix> I'd think `auto` would work just fine

[21:16] <sena_kun> Zoffix, no.

[21:16] *** girafe joined
[21:16] *** hursh left
[21:16] <sena_kun> It doesn't work.

[21:16] *** mcmillhj left
[21:17] <sena_kun> If it were so simple, I wouldn't come up with such solutions like font-size or padding changes.

[21:18] *** atweiden joined
[21:19] *** itaipu left
[21:20] <sena_kun> Of course, we can throw away idea of css-animations(since they're quite restricted) and just use js variant. Or I'm just dumb and someone smarter can patch it.

[21:22] <AlexDaniel> noooo! js animations…

[21:22] <AlexDaniel> perhaps we can throw away the idea of animations…

[21:23] <AlexDaniel> although I have to admit that it looks nice

[21:25] <Zoffix> I thought it was fine before with JS.

[21:25] <sena_kun> Zoffix, https://jsfiddle.net/thechrisjordan/3Fc7D/23/ - you can try to play with this fiddle if you want.

[21:26] <Zoffix> sena_kun, nah. I just tried to fix it and I can make it show/hide fine but not animate

[21:26] <sena_kun> Also, we can use some css-framework with nice no-js animations. But it's a bit too much overkill here.

[21:26] <Zoffix> Then I got bored with it :)

[21:27] <Zoffix> Meh. My opinion is we should revert to JS version and be done with it. We're breaking our backs for a some hypothetical case that some hypothetical person who hypothetically actually uses the show/hide slider so often that they will hypothetically dislike our animation style so much that they will hypothetically make their own user stylesheets to override it.

[21:28] <Zoffix> People with that mentality of doing some sort of nerd features are the same folks who overengineered https://www.wechall.net/ :)

[21:29] <AlexDaniel> #128757 128758

[21:29] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128757

[21:30] <AlexDaniel> #128758

[21:30] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128758

[21:30] <sena_kun> There are one more way(maybe a bit hacky): check browser's width and if it's not wide enough, just hide insted. But it's ridiculously hacky.

[21:30] <Zoffix> :o

[21:31] <Zoffix> Just hide? Then people would have to scan the entire document to get what they want

[21:31] <sena_kun> Zoffix, no-no.

[21:31] <sena_kun> I meant "just hide, do not use animation".

[21:31] <Zoffix> ah

[21:31] <Zoffix> ¯\_(ツ)_/¯

[21:32] * Zoffix opens up an ice-cream shaped like a slice of watermelon and leaves to put finishing touches on IRC::Client

[21:32] *** FROGGS left
[21:32] *** Zoffix left
[21:32] *** huggable left
[21:33] <sena_kun> AlexDaniel, why do you oppose js-animations so much? We don't use them TOO MUCH, and we already have jquery, so it can't be helped.

[21:33] *** bdmatatu joined
[21:35] * geekosaur finds websites with animations anywhere from annoying to near impossible to use...

[21:35] <geekosaur> (sensory issues)

[21:37] *** ptolemarch left
[21:38] *** hursh joined
[21:38] <hursh> p6: $_=[+]((1,2,4...*)[1..8**2])

[21:38] <camelia> rakudo-moar 8ede35: ( no output )

[21:38] <hursh> p6: .say

[21:38] <camelia> rakudo-moar 8ede35: OUTPUT«(Any)␤»

[21:39] <hursh> p6: $_=[+]((1,2,4...*)[1..8**2]) ; .say

[21:39] <camelia> rakudo-moar 8ede35: OUTPUT«36893488147419103230␤»

[21:39] <hursh> p6: $_=[+]((1,2,4...*)[1..8**2]) ; .=flip

[21:39] <camelia> rakudo-moar 8ede35: ( no output )

[21:39] <hursh> p6: $_=[+]((1,2,4...*)[1..8**2]) ; .=flip ; .say

[21:39] <camelia> rakudo-moar 8ede35: OUTPUT«03230191474188439863␤»

[21:40] <hursh> p6: $_=[+]((1,2,4...*)[1..8**2]) ; .=flip ; .=comb(3) ; .say

[21:40] <camelia> rakudo-moar 8ede35: OUTPUT«(032 301 914 741 884 398 63)␤»

[21:40] <hursh> p6: $_=[+]((1,2,4...*)[1..8**2]) ; .=flip ; .=comb(3) ; .=join(',') ; .say

[21:40] <camelia> rakudo-moar 8ede35: OUTPUT«032,301,914,741,884,398,63␤»

[21:40] <hursh> p6: $_=[+]((1,2,4...*)[1..8**2]) ; .=flip ; .=comb(3) ; .=flip ; .=join(',') ; .say

[21:40] <camelia> rakudo-moar 8ede35: OUTPUT«36 893 488 147 419 103 230␤»

[21:41] <hursh> p6: $_=[+]((1,2,4...*)[1..8**2]) ; .=flip ; .=comb(3) ; .=flip ; .=join(",") ; .say

[21:41] <camelia> rakudo-moar 8ede35: OUTPUT«36 893 488 147 419 103 230␤»

[21:41] <hursh> rakudo: $_=[+]((1,2,4...*)[1..8**2]) ; .=flip ; .=comb(3) ; .=flip ; .=join(",") ; .say

[21:41] <camelia> rakudo-moar 8ede35: OUTPUT«36 893 488 147 419 103 230␤»

[21:42] *** mcmillhj joined
[21:42] *** ufobat left
[21:43] <AlexDaniel> sena_kun: well, did I say that I oppose it “so much”? :) I slightly oppose all animations (they are rarely useful, most of the time they are just time wasters), but if there are animations, then it feels wrong to do them on JS side… If it has to be done this way, then fine, but I think that “why should we have an animation there?” is a good question

[21:44] *** hursh left
[21:44] <sena_kun> AlexDaniel, I'll reopen issue about this now...

[21:45] <sena_kun> We need some voting system for a questions like this, eh. And the solution still wouldn't be good for everyone. Eeeh.

[21:46] *** mantovani left
[21:47] *** mcmillhj left
[21:48] <AlexDaniel> sena_kun: 👍 👎 on GitHub work OK as a voting system, however, we are not going to have many votes ;)

[21:48] <sena_kun> We sure aren't...

[21:49] *** mantovani joined
[21:49] *** maybekoo2 joined
[21:49] <sena_kun> Also, AlexDaniel, I wanted to ask you about my PR for binded search links, can you look at it, please? With this thing merged(or something similar), we can resolve part of Glossary page items and revive search terms like "Regular Expression".

[21:51] <AlexDaniel> sena_kun: I liked it. The number of lines changed is so small!

[21:53] *** mantovani left
[21:54] <sena_kun> It's because I just moved things around, without any parsing/checking/etc.

[21:55] <sena_kun> I think, if gfldex is agree with merging, we can accept it.

[21:56] <AlexDaniel> yeah. Like, we can have a discussion about whether we should have manually defined items or not, but we already do, so…

[22:00] *** mcmillhj joined
[22:01] *** maybekoo2 left
[22:01] *** mantovani joined
[22:03] *** RabidGravy left
[22:04] *** atweiden left
[22:04] *** mcmillhj left
[22:05] *** mantovani left
[22:06] <gfldex> sena_kun: code and content should not get mixed if possible, unless is requires tons of work

[22:06] <dalek> doc: 2141eca | Altai-man++ | / (3 files):

[22:06] <dalek> doc: Now we take predefined search values from outer file

[22:06] <dalek> doc: review: https://github.com/perl6/doc/commit/2141eca64b

[22:06] <dalek> doc: ea3b332 | (Wenzel P. P. Peppmeyer)++ | / (3 files):

[22:06] <dalek> doc: Merge pull request #763 from perl6/predefined_search

[22:06] <dalek> doc: 

[22:06] <dalek> doc: Now we take predefined search values from outer file

[22:06] <dalek> doc: review: https://github.com/perl6/doc/commit/ea3b3327c2

[22:08] <AlexDaniel> by the way, what about https://github.com/perl6/doc/pull/762 ?

[22:08] <AlexDaniel> everything looks sane, but I know nothing about Callframes

[22:09] <sena_kun> gfldex, actually, I've proposed to format search items with some simple markup and parse it manually in htmlify. It will be a bit more work, but for sure much reusable. What do you think about this approach? I can implement it quite easily, I suppose.

[22:09] <gfldex> AlexDaniel: that's actually a language designer question. It may just be an implementation detail that may or may not be subject to change.

[22:11] <gfldex> sena_kun: unless you know LaTeX well, don't fiddle with anything indexy or ToCy. We need less automatic magic in htmlify rather then more.

[22:12] *** mcmillhj joined
[22:13] <sena_kun> gfldex, I used LaTeX, but. Things pull out other things, and the other things pull out more and more.

[22:14] <gfldex> AlexDaniel: thinking about it, there are already modules in eco that depend on Callframe. I will merge it.

[22:14] <dalek> doc: e864f30 | (Sterling Hanenkamp)++ | doc/Language/5to6-perlfunc.pod6:

[22:14] <dalek> doc: Update the caller 5-to-6 info

[22:14] <dalek> doc: review: https://github.com/perl6/doc/commit/e864f30b83

[22:14] <dalek> doc: cf5210d | (Sterling Hanenkamp)++ | doc/Type/Routine.pod6:

[22:14] <dalek> doc: Add documentation for Routine.package

[22:14] <dalek> doc: review: https://github.com/perl6/doc/commit/cf5210d44e

[22:14] <dalek> doc: ff60064 | (Sterling Hanenkamp)++ | doc/Type/CallFrame.pod6:

[22:14] <dalek> doc: Add documentation for CallFrame

[22:14] <dalek> doc: review: https://github.com/perl6/doc/commit/ff6006475f

[22:14] <dalek> doc: e1c155e | (Wenzel P. P. Peppmeyer)++ | doc/ (3 files):

[22:14] <dalek> doc: Merge pull request #762 from zostay/callframe

[22:14] <dalek> doc: 

[22:14] <dalek> doc: Add documentation for Callframe

[22:14] <dalek> doc: review: https://github.com/perl6/doc/commit/e1c155e3df

[22:17] *** mcmillhj left
[22:18] *** firstdayonthejob joined
[22:21] *** mantovani joined
[22:22] <zostay> comparing CallFrame/callframe to Backtrace and S06, callframe is missing pieces, but it'll be pretty important to future introspection, profiling, debugging, etc. as the language matures

[22:22] <gfldex> sena_kun: in a ideal world the entire search index and targets for L<> would depend in X<>. Right now there are tons of shortcuts that depend on htmlify. If you write L<Foo> it rewrites the link to L</type/Foo> what corresponds to doc/Type/Foo.pod. That violates S26 and makes LaTeX output really hard.

[22:23] <zostay> e.g., there's at least one method that is marked with an NYI exception and the .my information has seems to have some omissions when you actually try to use it

[22:24] <gfldex> sena_kun: my current idea to fix that is Pod::To::Source, that takes $=pod and turnes it back into Perl 6 code. That would allow to transform all bad links into good ones and would allow us to add missing X<> entries for headings. Many headings already got them, so something has to be done there anyway.

[22:26] *** mantovani left
[22:26] *** mcmillhj joined
[22:27] <gfldex> sena_kun: also, there are quite a few duplicated anchors thanks to generating them automatically from headings, without taking heading numbers into account. That needs to be fixed for sure.

[22:28] *** skids joined
[22:29] <sena_kun> gfldex, I can be sleepy or dumb right now, but how will it fix our need for pairs of "Term -> Page address(not anchor)"? We really need to fix indexing for sure, I agree with that, but it seems to be a bit different issue. Except that htmlify is overflowing with magic now, of course.

[22:31] *** mcmillhj left
[22:31] *** lichtkind_ joined
[22:32] <gfldex> sena_kun: if you parse $=pod and rewrite it you also must have checks. With the checks we can catch all missing bits and problems. Not everything can be fixed automatically but we can warn on odd stuff and fix that by hand.

[22:32] <sena_kun> It's time to read S26.

[22:34] <sena_kun> gfldex, and hard-coded content surely "pass" all checks by design... Yes, it's a problem.

[22:34] *** spider-mario left
[22:35] *** lichtkind left
[22:37] *** pmurias left
[22:39] *** mcmillhj joined
[22:44] *** mcmillhj left
[22:45] *** sena_kun left
[22:47] *** mohae joined
[22:49] *** mohae_ left
[22:50] *** sena_kun joined
[22:52] *** firstdayonthejob left
[23:05] *** zacts_raincity joined
[23:13] *** cog_ left
[23:18] *** _sri joined
[23:21] <tbrowder>  re Hinrik's emacs perl6-mode: I have submitted a PR that adds a rudimentary imemu Index for subs and vars. If interested my fork is at github.com/tbrowder/perl6-mode (branch "my-branch")

[23:27] <sena_kun> tbrowder, I doubt he is here now. But updates of emacs perl6-mode are always welcome(at least for me).

[23:27] <sena_kun> .seen hinrik

[23:27] <yoleaux> I haven't seen hinrik around.

[23:31] <tbrowder> sena_kun: give it a try if you have time--it doesn't sort names yet, but PRs are welcome!

[23:33] <sena_kun> tbrowder, my elisp code is terrible, sorry. Hinrik merged my little typo fix a few month ago quite quickly, so, I suppose, he can merge your PR too.

[23:35] *** mcmillhj joined
[23:39] *** labster left
[23:39] *** mcmillhj left
[23:41] *** mantovani joined
[23:41] *** zacts_raincity left
[23:48] *** labster joined
[23:48] *** s34n left
[23:48] *** bdmatatu left
[23:50] *** kurahaupo left
[23:52] *** nightfrog joined
[23:54] *** mcmillhj joined
[23:55] *** cdg left
[23:58] *** adu joined
[23:58] *** mcmillhj left
[23:59] *** sufrostico left
