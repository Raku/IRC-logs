[00:02] *** cpage_ left
[00:02] *** cpage_ joined
[00:11] *** huggable left
[00:12] *** grondilu left
[00:21] *** TEttinger joined
[00:25] <stevieb> me: sub a($a --> 1){if $a==1 {return Failure}}; a(1).say

[00:26] <stevieb> m: sub a($a --> 1){if $a==1 {return Failure}}; a(1).say

[00:26] <camelia> rakudo-moar 5ca43c: OUTPUT«(Failure)␤»

[00:26] <stevieb> that's pretty awesome to see in the signature what the default return is on success

[00:26] <stevieb> m: sub a($a --> 1){if $a==1 {return Failure}}; a(2).say

[00:26] <camelia> rakudo-moar 5ca43c: OUTPUT«1␤»

[00:28] <timotimo> it'll be even more interesting when we can --> $foo and it'll not only declare $foo for us, but also return it from whereever we leave the routine

[00:29] <sortiz> stevieb, beware that those are returning the Failure type, not an instance.

[00:30] <stevieb> soritz: thanks. I was just testing while reading the docs. It can return either Nul or Failure, otherwise return has to be empty (or no return at all)

[00:30] <stevieb> ie. an implicit return

[00:30] <sortiz> timotimo, yes. I'm waiting that too.

[00:30] <stevieb> timotimo: that'll be neat

[00:31] <timotimo> i'm just glad nobody's saying "well volunteered!"

[00:31] <sortiz> It is spec'd

[00:34] <stevieb> https://doc.perl6.org/type/Signature is the doc I've been waiting to get to. I've had so many questions, and this doc explains to me the majority of things I've needed to know to start writing some real initial perl6 code

[00:35] *** yqt left
[00:36] <timotimo> hm, that makes sense

[00:36] <timotimo> signatures are a really important part of perl6

[00:36] <sortiz> Perl6's Signature is really cool!

[00:37] <stevieb> yeah. For instance, I had no idea what things like `*@' meant. Instead of asking, I knew I'd hit the doc eventually. I've spent the last couple of weeks when I've had time learning about the types and methods and things, now I'll be able to start using them in more than one-liner tests

[00:48] <stevieb> m: my %h= :foo<1>, :bar<2>

[00:48] <camelia> rakudo-moar 5ca43c: ( no output )

[00:48] <stevieb> m: my %h= :foo<1>, :bar<2>; say %h

[00:48] <camelia> rakudo-moar 5ca43c: OUTPUT«{bar => 2, foo => 1}␤»

[00:48] <stevieb> that's a new way to create a hash :)

[00:49] *** abruanese joined
[00:51] <BrokenRobot> m: my %h= :1foo, :2bar; say %h

[00:51] <camelia> rakudo-moar 5ca43c: OUTPUT«{bar => 2, foo => 1}␤»

[00:52] <stevieb> now that's interesting!

[00:52] <stevieb> so it separates at the Type...?

[00:53] <stevieb> m: my %h=:afoo, :bbar; say %h

[00:53] <camelia> rakudo-moar 5ca43c: OUTPUT«{afoo => True, bbar => True}␤»

[00:53] <BrokenRobot> You can only use positive Ints in that form

[00:53] <stevieb> makes sense

[00:53] <BrokenRobot> m: my %h = :६६६meow; say %h

[00:53] <camelia> rakudo-moar 5ca43c: OUTPUT«{meow => 666}␤»

[00:54] <BrokenRobot> m: my %h= <foo 1  bar 2>; say %h  

[00:54] <camelia> rakudo-moar 5ca43c: OUTPUT«{bar => 2, foo => 1}␤»

[00:55] <b2gills> :1foo was added for s:1st/// s:2nd// etc

[00:57] <stevieb> m: sub a(*%h){%h.say}; a(<a 1 b 2>);

[00:57] <camelia> rakudo-moar 5ca43c: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:58] <b2gills> m: sub a(*%h){%h.say}; a |%( <a 1 b 2> );

[00:58] <camelia> rakudo-moar 5ca43c: OUTPUT«{a => 1, b => 2}␤»

[00:58] <stevieb> that's what I was just testing ;)

[00:58] <stevieb> haven't seen the pipe used like that in the docs yet though

[00:59] <sortiz> And is cool in: .hyper(:10batch, :3degree) 

[00:59] <b2gills> It was added in the rush to the Christmas release, so may not be docced

[01:00] <stevieb> if it's not documented, could you please explain what it's doing?

[01:01] <sortiz> It is documented in https://doc.perl6.org/type/Capture

[01:01] <stevieb> I could play with it and add it into the docs when I get to the part it belongs in

[01:01] <stevieb> soritz: thanks

[01:01] <sortiz> The reverse of Signature.

[01:01] <parabolize> alsa http://doc.perl6.org/language/operators#prefix_|

[01:01] <timotimo> hyper and race are still broken, yeah

[01:01] <parabolize> it flattens things

[01:01] <timotimo> it's pretty much the next thing on jnthn's list

[01:02] <stevieb> been fun all, gotta go. cheers!

[01:02] <sortiz> timotimo, semi broken, seems to be working well in JsonC.

[01:02] <timotimo> oh?

[01:03] <sortiz> I'm using at unmarshall so is 2x faster than Json::Fast.

[01:03] <timotimo> what, only?

[01:04] <timotimo> maybe it's suffering from having too many calls to C functions?

[01:05] <sortiz> Yep.

[01:06] <sortiz> The pure parser is 200x 

[01:06] <timotimo> ah, yeah, i expected at the very least 100x

[01:07] <timotimo> of course i'm also hopeful for future improvements to make JSON::Fast competitive. both improvements in moar&friends and in JSON::Fast.

[01:08] <sortiz> Parsing panda's projects.json is 0.005056s vs .3871236s

[01:09] <timotimo> some of the decisions i made in JSON::Fast in the past may now be obsolete and some code might want to be changed to perform better again

[01:10] *** molaf left
[01:19] <ugexe> nine: because its nearly 3 months stale now, and all my offers to rewrite it to get merged have been ignored. i was told to implement it and i did, and then was told it was waiting one change after another. i was willing to do a little extra work to work around new conflicts, but it sure seems it doesnt work the other way around

[01:22] *** molaf joined
[01:28] *** adu joined
[01:28] <mst> ugexe: would this be better being a toolchain conversation so it doesn't get broken up?

[01:28] *** ssotka left
[01:32] <adu> what is a toolchain conversation?

[01:33] <ugexe> mst: i found there was no point in the toolchain channel. i'd wager the logs are primarily myself bringing up problems/ideas with little to no feedback and certainly no path forward on anything

[01:33] <mst> ugexe: I've been reading back every so often and there seems to be discussion

[01:34] <adu> ideas are hard to come by these days

[01:34] <mst> ugexe: if you feel like you're being ignored, as I said before, please do raise the issues in there and ping me, given I've done quite a lot of toolchain stuff and can maybe help deconfuse things

[01:37] <mst> ugexe: I offered this when I first helped create the channel and you've never taken that offer up; I don't entirely understand how you can claim there's no point to it when you didn't take up the offer that was part of the point of having it

[01:38] <ugexe> mst: there is on confusion. its in a constant state of waiting on precomp change X, then precomp change Y, things that have little to do with the PR i submitted other than a few conflicts that would need to be fixed

[01:38] <ugexe> is no

[01:38] <dalek> doc: fe7627b | util++ | doc/Type/ (2 files):

[01:38] <dalek> doc: Fix typos.

[01:38] <dalek> doc: review: https://github.com/perl6/doc/commit/fe7627b987

[01:39] <mst> ugexe: so tag me in in the appropriate venue, and we can discuss that

[01:43] <adu> ugexe: I have nothing to do this weekend, you can always talk to me

[01:45] *** ilbot3 left
[01:46] <ugexe> adu: while id prefer to talk over drinks, what i need is someone with a commit bit

[01:46] <adu> hrm

[01:46] *** ocbtec left
[01:47] <adu> ugexe: I have a commit bit

[01:47] <adu> ugexe: I am andydude on github

[01:47] *** ilbot3 joined
[01:48] <ugexe> adu: oh ok. well for context this is the PR https://github.com/rakudo/rakudo/pull/729 which has multiple blessings as it is

[01:53] <adu> ugexe: ok, so let me get this straight, every path is relative to "resources/" except that one, and that's what you're fixing?

[01:54] *** vendethiel joined
[01:55] <ugexe> adu: while it does fix some path related bugs in the current implementation, its primarily turning Distribution into a role interface so that more specialized implementations can simply be passed in. its based almost entirely on the S22 design doc

[01:56] <adu> ugexe: what happened to all the "has"s in src/core/Distribution.pm?

[01:57] *** ssotka joined
[01:57] <ugexe> adu: they are redundant. the current Distribution.pm is a struct thats essentially the meta6 file

[01:57] <adu> ugexe: so you're turning a class into a regular hash, and providing the same features with a role

[01:57] <ugexe> in my implementaiton those are simply accessed directly from `method meta`

[01:59] <ugexe> it provides the same features for the core, but allows it to be expanded by anyone else. then you could pass in a Distribution::Deb or Distribution::Tar and rakudo would be able to understand how to install them

[02:01] <ugexe> you can pass in a Distribution that accesses the files in a streaming fashion over a socket

[02:01] <adu> ugexe: I like the sound of that, but how do you guarantee that the hash always contains "depends", and guarantee that it's an array?

[02:04] <ugexe> it doesn't have to contain `depends`. as far as enforcing the type, its broken as it is. its assigned via Distribution.new(|%hash) which will give you ( [1, 2, 3] ) instead of (1, 2, 3)

[02:04] <ugexe> eventually you could create a META6 role to enforce those things

[02:06] *** johnjohn101 is now known as Guest19630

[02:06] <adu> ugexe: is that what S22 says?

[02:06] <ugexe> but you could also enforce those things inside `method meta`, as the meta data is not accessed by the attribute %!meta/$!meta but through the interface method. the attribute just holds the original data to be interpretted

[02:07] <ugexe> s22 says depends is optional

[02:07] <adu> oh ok

[02:07] <ugexe> the ([]) vs () format is a side effect of the binding nature of BUILD + |%hash

[02:08] <adu> name, version, provides looks mandatory, does "role Distribution" enforce that?

[02:09] * adu is a big fan of coding to the spec

[02:10] <adu> I've been using HAR for about a year now, and I'm still astonished by the fact that the author of the official HAR viewer requires the "pages" attribute when the spec he also wrote says that "pages" is optional

[02:12] <ugexe> not yet. something i brought up in toolchain a few times was that some things need to be broken. version for instance. because currently it looks for `ver` or `version`. or for auth it uses `auth` or `authority` or `author`. its agreed these need to be broken and use a specific thing, but the discussion on what to break never goes far. nevertheless that is a thing that can be added *onto* this

[02:12] <ugexe> a problem right now is we are moving on 1 direction, precomp. we could be moving in 2 directions though, distribution/meta and precomp

[02:13] <adu> can you explain what you mean by "precomp?

[02:14] <adu> also, what do you mean by the "distribution/meta" direction?

[02:15] <ugexe> im not sure i even know anymore. originally the pr was held back while changes to precomp were in the works because the work in that fork would conflict with the pr. but those changes have happened as far as i know

[02:17] <ugexe> one half is the distributors portion (how distributions are packaged), one half is the consuming portion (rakudo). you have an interface that rakudo understands, then your distributions can fufill that in any number of ways. this means you can have your standard perl6 style distro, but also have one that can read from a .deb, or one that reads directly from a .tar or github etc

[02:18] <adu> ugexe: I would be happy to commit it if you could guarantee the items listed as "mandatory" in S22 

[02:19] <ugexe> adu: i can easily accommodate required fields

[02:22] <ugexe> but there does have to be default values in some cases, like for versions. a Distribution representing a basic path layout without a meta6 file (like perl5, and CompUnit::Repository::FileSystem can do) is version *

[02:24] *** noganex joined
[02:27] *** noganex_ left
[02:30] <adu> ugexe: ok, so is there still a debate between $.name as an attribute and $.name() as a method?

[02:35] <ugexe> adu: it needs to be called from `method meta`. so $dist.meta<name> (this is how the spec describes accessing meta data). but this also makes it so you can make your own `class Distribution::XXX does Distribution { method meta(...) { ... }; method name { self.meta<name> }; }`. or set an attribute $.name from self.meta<name>. this allows you to pass in the implementation for accesing the meta data itself (for

[02:35] <ugexe> instance, it might use the github API to make a net request to raw meta6 file)

[02:38] <ugexe> https://gist.github.com/ugexe/8684abcc89aa2d03d009#file-dist-pl6-L58 for instance this allows a Distribution from a .tar file without extracting the entire thing to the file system. and it doesn't have to extract anything at all until the actual methods are called

[02:39] <adu> ah ok I see

[02:39] <adu> so how do you indent on guaranteeing name, version, description, etc? 

[02:40] <ugexe> or via network access https://gist.github.com/ugexe/1026b2730abe6d2a126c#file-dist-pl6-L39

[02:40] <adu> s/indent/indend/

[02:41] <ugexe> im thinking a Meta::Strict role where when composed it will die unless self.meta<name> etc

[02:43] <adu> yeah, errors are good

[02:43] <dalek> doc: 4436247 | (Daniel Green)++ | doc/Type/IO/ (2 files):

[02:43] <dalek> doc: Add documentation for the new IO.mode method

[02:43] <dalek> doc: 

[02:43] <dalek> doc: This requires Rakudo PR #773, which implements RT #125489

[02:43] <dalek> doc: review: https://github.com/perl6/doc/commit/4436247cd9

[02:43] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=125489

[02:43] <dalek> doc: d857a09 | (Daniel Green)++ | doc/Type/IO/Path.pod:

[02:43] <dalek> doc: Add some more explanation (labster++)

[02:43] <dalek> doc: review: https://github.com/perl6/doc/commit/d857a09846

[02:43] <dalek> doc: 5762144 | (Daniel Green)++ | doc/Type/IO/Path.pod:

[02:43] <dalek> doc: Add an example of using the ourput of IO.mode as input to IO.chmod

[02:43] <dalek> doc: review: https://github.com/perl6/doc/commit/576214408c

[02:43] <dalek> doc: d838de5 | lizmat++ | doc/Type/IO/ (2 files):

[02:43] <dalek> doc: Merge pull request #565 from MasterDuke17/RT125489

[02:43] <dalek> doc: 

[02:43] <dalek> doc: Add documentation for the new IO.mode method

[02:43] <dalek> doc: review: https://github.com/perl6/doc/commit/d838de5f4d

[02:44] *** addison left
[02:45] *** skids joined
[03:00] <dalek> doc: 34b0873 | (Zoffix Znet)++ | doc/Language/testing.pod:

[03:00] <dalek> doc: Remove custom operators work-around prose for cmp-ok

[03:00] <dalek> doc: 

[03:00] <dalek> doc: It now fully supports user-defined operators passed as Str

[03:00] <dalek> doc: review: https://github.com/perl6/doc/commit/34b08736c1

[03:02] *** adu left
[03:04] <dalek> doc: 29c0955 | (Zoffix Znet)++ | doc/Language/testing.pod:

[03:04] <dalek> doc: Fix typo

[03:04] <dalek> doc: review: https://github.com/perl6/doc/commit/29c09550fd

[03:05] <ugexe> for the record all those demo Distribution::<...> implementations worked for installs at one time. they aren't theoretical 

[03:21] *** skids left
[03:25] *** wnh_ left
[03:32] *** kid51 left
[04:01] *** kaare_ joined
[04:06] *** Cabanossi left
[04:10] *** Cabanossi joined
[04:28] *** buharin joined
[04:34] <buharin> hey, I just thinking about infix&

[04:35] <buharin> why we call this infix

[04:35] <buharin> the examples use has &!callback

[04:35] <buharin> it looks more like prefix

[04:36] <buharin> however ! is prefix

[04:36] *** khw left
[04:42] *** xinming_ joined
[04:45] *** xinming left
[04:57] <geekosaur> buharin, wrong &

[04:57] <geekosaur> infix:<&> would be the junction operator, not the code sigil

[04:59] <buharin> oh ok

[05:02] <geekosaur> (I should probably say Callable sigil)

[05:22] <buharin> geekosaur, do you know what's this proto sub infix:<===>(Any, Any)?

[05:23] <buharin> is it something probably operator implementation in this case

[05:34] <Woodi> ugexe++ # lots of work

[05:39] *** araujo joined
[05:39] *** araujo left
[05:40] *** araujo joined
[05:44] <Woodi> ugexe: looks it wasn't just lack of time when jnthn++ was happy to not do Repos code :)  and then nine++ started a thing so he is a bit like a designer/manager on that feature so usually it is good to make common plan or something... such things aren't formalized in open source but in some % it works like that. but now I see just two innocent sides blaming other side... and two almoust 100% complete 

[05:44] <Woodi> implementations ?

[05:57] *** buharin left
[06:10] *** CIAvash joined
[06:12] *** buharin joined
[06:16] <Woodi> m: my @l = <a b c>; @l.map: { .say xx 2 }

[06:16] <camelia> rakudo-moar 880f5c: OUTPUT«a␤a␤b␤b␤c␤c␤»

[06:16] <Woodi> err, it's not working like that for me...

[06:22] <nine> ugexe: to be clear: the only think keeping PR 729 from getting merged is that it is backwards incompatible with the modules installed before it's merge. I thought you'd fix that (probably using the repo upgrade mechanism that has since been merged) and update the PR.

[06:23] <nine> ugexe: I think I've said multiple times how much I'm looking forward to that PR being merged as it cleans up a lot of organically grown code and also makes my work simpler and that I'm glad you've taken it on because you obviously have thought it through very well.

[06:24] <nine> ugexe: Also, you could have requested a commit bit for yourself anytime. All you'd have to do is send in some signed form to the Perl Foundation.

[06:28] *** xinming_ left
[06:29] *** xinming joined
[06:31] *** wamba joined
[06:33] <jdv79> is that still really necessary?

[06:35] *** buharin left
[06:35] *** spider-mario joined
[06:37] *** Xliff joined
[06:38] <nine> jdv79: I think so

[06:49] *** ssotka left
[07:03] *** buharin joined
[07:04] *** RabidGravy joined
[07:09] *** rkr joined
[07:11] *** rkr left
[07:13] *** grondilu joined
[07:14] *** firstdayonthejob joined
[07:17] *** mayuresh joined
[07:17] *** FROGGS joined
[07:17] *** buharin left
[07:17] <mayuresh> hello all :)

[07:18] *** mayuresh left
[07:19] <FROGGS> o/

[07:19] *** jack_rabbit left
[07:20] *** jack_rabbit joined
[07:27] *** rurban_ joined
[07:28] <stmuk>  https://www.youtube.com/watch?v=t-hZdeR7oVM <=- talk about using Perl 5 to promote 6

[07:28] *** girafe joined
[07:29] <stmuk> also https://www.youtube.com/watch?v=Fv42f7VZffE "Parallel Crawler in Perl6 and Go" - Jader Dias

[07:33] *** sortiz left
[07:34] *** domidumont joined
[07:35] *** timotimo joined
[07:39] *** domidumont left
[07:40] *** domidumont joined
[07:43] *** rindolf joined
[07:46] *** kaare_ left
[07:50] *** lizmat left
[07:52] *** firstdayonthejob left
[07:53] *** lizmat joined
[07:55] *** girafe left
[07:57] *** domidumont left
[07:57] <RabidGravy> boom!

[08:06] *** jjido joined
[08:09] *** eroux joined
[08:10] *** rindolf left
[08:11] *** huggable joined
[08:17] *** cpage_ left
[08:22] *** jjido left
[08:25] *** buharin joined
[08:30] *** domidumont joined
[08:31] *** mr-foobar joined
[08:33] *** eroux left
[08:33] *** eroux joined
[08:35] *** darutoko joined
[08:35] *** domidumont left
[08:40] *** buharin left
[08:40] *** FROGGS left
[08:41] *** rindolf joined
[08:43] *** bjz joined
[08:45] *** bjz_ left
[08:49] *** eroux left
[08:51] *** aries_liuxueyang left
[08:53] *** aries_liuxueyang joined
[09:00] *** cpage_ joined
[09:25] *** cpage_ left
[09:31] *** Zero_Dogg left
[09:32] *** Zero_Dogg joined
[09:37] *** setty1 joined
[09:39] *** TEttinger left
[09:57] *** buharin joined
[10:05] *** jjido joined
[10:07] *** jjido left
[10:07] *** buharin left
[10:12] *** jack_rabbit left
[10:15] *** araujo left
[10:18] *** araujo joined
[10:24] *** buharin joined
[10:27] *** FROGGS joined
[10:29] *** shibly joined
[10:29] *** shibly left
[10:34] *** buharin left
[10:44] *** bjz left
[10:45] *** bjz joined
[10:47] *** wtw_ is now known as wtw

[11:03] *** kid51 joined
[11:17] *** kurahaupo joined
[11:26] *** jonadab left
[11:30] *** buharin joined
[11:33] *** vibha joined
[11:35] *** kurahaupo_ joined
[11:35] *** jjido joined
[11:36] *** kurahaupo left
[11:40] *** ChoHag left
[11:42] *** ChoHag joined
[11:46] *** kurahaupo_ left
[11:48] *** ChoHag left
[11:49] *** kurahaupo joined
[11:50] *** aries_liuxueyang left
[11:51] *** ocbtec joined
[11:55] *** khw joined
[11:56] *** ChoHag joined
[11:56] *** kurahaupo left
[11:57] *** buharin left
[11:57] *** aries_liuxueyang joined
[12:04] *** _mg_ joined
[12:11] *** huggable left
[12:11] *** kurahaupo joined
[12:14] *** Zoffix joined
[12:14] <Zoffix> ab5tract_, ping

[12:18] *** kurahaupo left
[12:19] *** kurahaupo joined
[12:19] *** kurahaupo left
[12:21] <Zoffix> diakopter, would you like `diakopter` or your real name in Rakudo release credits?

[12:22] <Zoffix> ab5tract_, same Q to you.

[12:22] <Zoffix> the CREDITS file has info but the tool picks up nicknames and I'm  unsure if that's on purpose :)

[12:23] *** skids joined
[12:25] *** _mg_ left
[12:27] *** jjido left
[12:29] *** yqt joined
[12:46] *** rgrinberg joined
[12:50] *** rgrinberg left
[12:51] *** rgrinberg joined
[13:04] <Zoffix> I gotta move forward with what I'm doing, but if you wish to amend the results for future stuff, please modify entries in https://github.com/rakudo/rakudo/blob/nom/CREDITS

[13:04] *** Zoffix left
[13:06] *** kaare_ joined
[13:07] *** tbrowder_ joined
[13:08] <tbrowder_> mornin' p6 people

[13:08] *** pierrot left
[13:08] *** pierrot joined
[13:09] *** pierrot is now known as Guest74224

[13:09] *** aries_liuxueyang left
[13:09] <tbrowder_> I have another doc pull request for checking: <https://github.com/perl6/doc/pull/603>; Zoffix I know is interested, and it isn't trivial

[13:10] <skids> man the web is slow (some cdn is having issues I guess)

[13:12] *** aries_liuxueyang joined
[13:13] <BrokenRobot> I was interested because someone asked for rakudo ENV vars and I couldn't find them on the doc site.

[13:13] <BrokenRobot> Kinda busy today so I won't review :)

[13:13] <BrokenRobot> .oO( forgiveness > permission )

[13:13] <BrokenRobot> vis-a-vis mergin :P

[13:16] *** domidumont joined
[13:18] *** MasterDuke_ left
[13:20] *** Sgeo left
[13:29] *** sammers joined
[13:30] <sammers> hi all

[13:30] <sammers> is there a simple way to copy a directory and all of its contents to a new directory?

[13:31] * skids wonders what he has to nuke to upgrade months old rakudo

[13:31] <moritz> the install dir

[13:31] <moritz> maybe also ~/.perl6/precomp

[13:36] <dogbert17> hello #perl6

[13:36] *** tbrowder_ left
[13:37] <dogbert17> the Role Baggy contains a method 'default' which simply returns zero. does anyone know why it's there?

[13:47] *** mr-fooba_ joined
[13:48] <dalek> doc: d3dc9f7 | (Jan-Olof Hendig)++ | doc/Type/Baggy.pod:

[13:48] <dalek> doc: Added docs for Baggy.default

[13:48] <dalek> doc: review: https://github.com/perl6/doc/commit/d3dc9f7a0d

[13:49] *** mr-foobar left
[13:53] <skids> Yay 4 months and none of my modules got broken :-)

[13:56] *** domidumont left
[14:03] *** aries_liuxueyang left
[14:04] *** setty1 left
[14:05] *** aries_liuxueyang joined
[14:07] <sammers> does anyone know of a good watch / supply example?

[14:14] <ugexe> nine: i mailed that form months ago, and im not sure if they got it or not because there is only 1 person who can give out commit bits and they are not really around anymore

[14:15] <nine> ugexe: oh yes, been there :/ Took quite a while for me, too. Coke can possibly help

[14:19] <psch> [Coke] or perlpilo1 iirc

[14:19] <psch> at least if i'm not misremembering the latter to have been PerlJam

[14:19] <psch> and yeah, took about three or four months for my commit bit

[14:20] <psch> the problem isn't really the commit but, but the paperwork in TPF afaik

[14:25] *** yqt left
[14:29] *** Actualeyes joined
[14:33] <awwaiid> sammers: cp -av olddir newdir # copy files

[14:33] <dalek> doc: 4aee715 | (Jan-Olof Hendig)++ | doc/Type/Baggy.pod:

[14:33] <dalek> doc: Added docs for Baggy.Set

[14:33] <dalek> doc: review: https://github.com/perl6/doc/commit/4aee715b35

[14:33] <sammers> thanks awwaiid

[14:33] <awwaiid> sammers: the -a will keep all the permissions and copy sub-directories, the -v will tell you the name of the files it is copying

[14:34] <sammers> ok, is there a way to do this in p6? or just use shell?

[14:35] <awwaiid> all things can be done in p6 :) . Guess it depends on what you're doing ... but qx{ cp ... } is an easy way to do it without reading any docs :)

[14:36] <sammers> yeah, thanks

[14:37] <awwaiid> sammers: looks like http://doc.perl6.org/routine/copy will at least do one file. Maybe combine that with File::Find. But that sounds like work.

[14:39] *** aries_liuxueyang left
[14:40] <sammers> yeah, that is all I could find. 

[14:40] <sammers> thanks

[14:41] *** aries_liuxueyang joined
[14:46] <nine> Maybe we could speed up the commit bit part. Should be enough if the one handing out the bit has seen the signed paper. No need to wait for TPF to acknowledge receiving it.

[14:49] *** skids left
[14:56] *** rgrinberg left
[14:58] *** AlexDaniel joined
[14:59] <AlexDaniel> tbrowder: it is non-trivial indeed

[15:04] <Woodi> @l = slurp $file;  don't create lines by default now ?

[15:04] <gfldex> m: my %h; say so %h<foo>; sub f (%h where %h<foo>) { say 'hit' }; f(%h);

[15:04] <camelia> rakudo-moar f19241: OUTPUT«False␤hit␤»

[15:04] <gfldex> why does it do that?

[15:05] <AlexDaniel> Woodi: what about slurp($file).lines ?

[15:05] <gfldex> m: my %h; say so %h<foo>; sub f (%h where { %h<foo>:exists }) { say 'hit' }; f(%h);

[15:05] <camelia> rakudo-moar f19241: OUTPUT«False␤Constraint type check failed for parameter '%h'␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:05] <AlexDaniel> or lines slurp $file

[15:06] <Woodi> AlexDaniel: that work :)  but it is strange change from v5...

[15:07] <AlexDaniel> Woodi: perhaps a better way to do it is ‘file’.IO.lines

[15:07] <Woodi> maybe

[15:07] <AlexDaniel> Woodi: I don't remember ｢slurp｣ in perl 5 so I'm not sure what are you talking about ;)

[15:08] <gfldex> m: my %h = foo => True; say so %h<foo>.defined; sub f (%h where so %h<foo>) { say 'hit' }; f(%h); %h = (); f(%h)

[15:08] <camelia> rakudo-moar f19241: OUTPUT«True␤hit␤Constraint type check failed for parameter '%h'␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:08] <Woodi> AlexDaniel++ : .lines works, thanx

[15:09] *** rurban_ left
[15:10] <AlexDaniel> .

[15:13] <stevieb> AlexDaniel: Woodi may be speaking of File::Slurp

[15:14] <stevieb> AlexDaniel: where you can import the slurp() function which is an alias for read_file(): https://metacpan.org/pod/File::Slurp

[15:15] *** Actualeyes left
[15:16] *** firstdayonthejob joined
[15:16] <Woodi> stevieb: I think in Perl5  $lines = <$fh>;  was doing .lines...

[15:16] <mst> in perl5 you'd need @lines to get all lines

[15:16] <awwaiid> and chomp

[15:17] <mst> stevieb: nobody should ever use File::Slurp - it's completely broken

[15:17] <Woodi> oops, yea, s/\$/@/ :)

[15:17] <mst> stevieb: you wanted File::Slurper or IO::All or Data::Munge or Path::Tiny

[15:17] <stevieb> mst: I know. I'm just thinking that's what he may have been thinking of

[15:17] <mst> Woodi: ^^

[15:17] <mst> stevieb: notice I highlighted him as well to make sure you both saw the recommendations

[15:17] <Woodi> mst: I wanted <> :)

[15:17] <stevieb> to slurp an entire file in perl5 into a scalar, you need to set $/

[15:18] <mst> my $data = do { local (@ARGV, $/) = $file; <> };

[15:18] *** lizmat left
[15:19] <Woodi> mst: why so complicated ?

[15:19] <AlexDaniel> because perl 5

[15:19] <Woodi> ah, right, $line = <> gives just one line...

[15:20] <stevieb> yes, the first line

[15:22] *** ssotka joined
[15:22] <Woodi> anyway, @a.pick xx 300;  gives me string with ' ...)' ending :) not  very *nixy :)

[15:24] <psch> Woodi: &say puts the ..., not &infix:<xx>

[15:24] <psch> well, or camelia

[15:24] <Woodi> psch: but how to use perl6 script in Unix pipeline ??

[15:24] <Woodi> no, sh too

[15:24] <psch> Woodi: don't use &say, but &print?

[15:25] <geekosaur> dpm

[15:25] <geekosaur> don't use say for real output

[15:25] <geekosaur> say uses .gist to give a more compact but incomplete view

[15:25] <geekosaur> it's convenient but not correct if you need full output

[15:25] <psch> Woodi: in general, you don't want &say for production code

[15:26] <AlexDaniel> actually, you probably want ｢put｣

[15:26] <geekosaur> (this is a difference from perl5, where say is just print with newline appended)

[15:26] <psch> Woodi: if you want &print but with appended \n i think that's what &put is for

[15:27] <Woodi> seriously ? never (seriously) heard about it :)

[15:28] *** leont joined
[15:28] <Woodi> p[rin|u]t @a.pick, "\n" xx 300 gives lots of \n :)

[15:29] <psch> Woodi: afaik, every single bit of documentation pertaining to &say mentions it calling .gist on its arguments

[15:29] <psch> Woodi: the two args to &print or &put you're giving are (1) @a.pick (2) "\n" xx 300

[15:29] <psch> Woodi: so, yes, it will print approximately 300 newlines

[15:30] <psch> m: $*OUT.nl-out = "one newline\n"; print "foo\n"; put "foo\n"

[15:30] <camelia> rakudo-moar f19241: OUTPUT«foo␤foo␤one newline␤»

[15:31] <psch> m: $*OUT.nl-out = "one newline\n"; put "foo", "\n" xx 10

[15:31] <camelia> rakudo-moar f19241: OUTPUT«foo␤ ␤ ␤ ␤ ␤ ␤ ␤ ␤ ␤ ␤one newline␤»

[15:31] <Woodi> psch: I know about say/print, .gist/.perl difference... just print [email@hidden.address] xx 300 was printing lots of .pick...

[15:31] <geekosaur> need {} to expand an expression instead of just a variable

[15:32] <psch> Woodi: yes, because @ and . don't interpolate in ""

[15:32] <psch> m: my @a = ^10; say "@a"

[15:32] <camelia> rakudo-moar f19241: OUTPUT«@a␤»

[15:32] <geekosaur> scalar variable

[15:32] <psch> m: my $x = "foo"; say "$x.gist"

[15:32] <camelia> rakudo-moar f19241: OUTPUT«foo.gist␤»

[15:32] <gfldex> m: my @exclude = "404.pod", "homepage.pod"; dd so '../404.pod'.ends-with(any @exclude);

[15:32] <camelia> rakudo-moar f19241: OUTPUT«Bool::True␤»

[15:33] <gfldex> junctions++

[15:33] <geekosaur> perl5 will expand @ but you need a hack like @{[...]} for anything more complex

[15:33] <psch> we only expand @ with any circumfix:<[ ]>

[15:33] <psch> as in, zen slice, single elem, or range

[15:33] <Woodi> how far ago "{code}" was specced ?

[15:33] <psch> Woodi: probably 10 years or so

[15:34] <geekosaur> fairly early on, yes

[15:34] * psch doesn't want to dig through specs history

[15:34] *** Actualeyes joined
[15:34] <Woodi> m: my $a = 'a'; say "$a"

[15:34] <camelia> rakudo-moar f19241: OUTPUT«a␤»

[15:35] <psch> m: my @a = ^10; say "@a"

[15:35] <camelia> rakudo-moar f19241: OUTPUT«@a␤»

[15:35] <psch> m: my @a = ^10; say "$@a"

[15:35] <camelia> rakudo-moar f19241: OUTPUT«0 1 2 3 4 5 6 7 8 9␤»

[15:35] <psch> m: my @a = ^10; say "@a[]"

[15:35] <camelia> rakudo-moar f19241: OUTPUT«0 1 2 3 4 5 6 7 8 9␤»

[15:36] <Woodi> everyday man lerns something :)

[15:36] *** ssotka left
[15:36] <psch> Woodi++ 

[15:36] <Woodi> *learns? :)

[15:36] <psch> yeah :)

[15:37] <Woodi> btw. we have .^remove_method in Perl6 reflection ?

[15:37] <psch> how's that supposed to work

[15:37] <psch> i mean

[15:38] <psch> imagine 'BEGIN Any.^remove_method: ".perl"'

[15:38] <gfldex> that would produce a runtime error because methods wont be inlined

[15:38] <psch> (1) what exactly does that mean for children of Any that have their own .perl (2) what happens with code that gets imported and relies on Any.perl

[15:39] <Woodi> psch: I just wanted do some BUM :)  /me was reading about object databases :)

[15:39] *** vibha left
[15:39] <gfldex> children that implement their own .perl would have them called

[15:40] <psch> Woodi: what's BUM?

[15:40] <Woodi> BOOM in English probably :)\

[15:40] <psch> ...so "break things for fun and insight"?

[15:40] <gfldex> the behaviour of the program will be come unpredictable (seen from a human standpoint) but if that's what you want ...

[15:40] <psch> like, fsck shut up

[15:41] <Woodi> yea. but just got insight :)

[15:41] <psch> right.  i mean, you could probably emulate it with reaching into the method cache via something in MROMethodDispatch or so in the MOP

[15:41] <psch> (emulate .^remove_method, that is)

[15:42] <psch> but yeah, as gfldex says, it'll probably turn into a huge mess and no one knows what's happening anymore

[15:42] <Woodi> nah, no .remove_method is ok for sanity :)

[15:48] *** CIAvash left
[15:50] *** CIAvash joined
[15:55] <parabolize> pygments has no tests for the Perl6Lexer?

[15:56] <parabolize> I think I found a error in the lexer

[15:56] <parabolize> https://gist.github.com/parabolize/50161221e0bc072dd3351d34e47c4d9e

[15:57] <parabolize> you can see it in the first code example here http://doc.perl6.org/language/functions#Defining_Operators

[15:58] *** AlexDaniel left
[15:59] <parabolize> it sees the < ... > pattern and ignores the stuff between

[16:02] <dalek> doc: 3e2bdbd | (Jan-Olof Hendig)++ | doc/Type/Baggy.pod:

[16:02] <dalek> doc: Added docs for Baggy.SetHash

[16:02] <dalek> doc: review: https://github.com/perl6/doc/commit/3e2bdbdaa2

[16:05] *** leont left
[16:11] *** huggable joined
[16:15] <BrokenRobot> "I just wanted do some BUM" sounds so very wrong in English :P

[16:25] *** girafe joined
[16:25] *** yqt joined
[16:28] *** domidumont joined
[16:31] *** kurahaupo joined
[16:47] *** zakharyas joined
[16:51] <dalek> doc: fa97bfb | parabolize++ | doc/Language/functions.pod:

[16:51] <dalek> doc: fix statement terminator in example

[16:51] <dalek> doc: review: https://github.com/perl6/doc/commit/fa97bfb419

[17:07] *** zakharyas left
[17:09] *** [particle] joined
[17:14] *** [particle] left
[17:19] *** yanmc joined
[17:20] *** jjido joined
[17:29] *** Actualeyes left
[17:39] *** girafe left
[17:47] *** setty1 joined
[17:49] <dalek> Heuristic branch merge: pushed 18 commits to doc by zoffixznet

[17:50] <dalek> doc: ad40c32 | (Zoffix Znet)++ | doc/HomePage.pod:

[17:50] <dalek> doc: Reorder item list

[17:50] <dalek> doc: review: https://github.com/perl6/doc/commit/ad40c32ecd

[17:52] <dalek> doc: 8f72afd | (Zoffix Znet)++ | doc/Programs/00-running.pod:

[17:52] <dalek> doc: Mention \ isn't part of the option

[17:52] <dalek> doc: review: https://github.com/perl6/doc/commit/8f72afd3ef

[17:53] *** Zoffix joined
[17:54] <Zoffix> tbrowder, this kinda sucks, since 75% of those pages are empty: http://imgur.com/kU6dCMu

[17:54] <Zoffix> I'd also rename the 'Perl 6' item in there to 'Rakudo' or something

[17:55] <Zoffix> By sucks I mean LTA. Maybe the empty files can be tossed for now. Or is there plan to fill them soon?

[17:56] *** buharin joined
[17:59] *** ssotka joined
[18:03] *** yqt left
[18:04] <stmuk> there should be debugging docs at least

[18:08] <stmuk> I'll quickly add some unless someone else is?

[18:09] *** buharin left
[18:10] *** rurban_ joined
[18:12] *** buharin joined
[18:20] <dalek> doc: 6824d88 | (Steve Mynott)++ | doc/Programs/01-debugging.pod:

[18:20] <dalek> doc: some very basic pointers to rakudo debuggers

[18:20] <dalek> doc: review: https://github.com/perl6/doc/commit/6824d884ac

[18:22] <stmuk> I can't think of anything useful to quickly add to either 02 or 03 there

[18:23] <stmuk> Zoffix: maybe delete the other two for now??

[18:23] <Zoffix> +1

[18:25] <dalek> doc: 8ca211d | (Steve Mynott)++ | doc/Programs/0 (2 files):

[18:25] <dalek> doc: delete for now

[18:25] <dalek> doc: review: https://github.com/perl6/doc/commit/8ca211dbb2

[18:28] <tony-o> i know, he complains about not having a PR to fix XYZ and then you commit it and he does one of two things; he copies and pastes the code into his own commit -or- he ignores the PR long enough for it to be a problem to merge and then just doesn't bother with it

[18:29] <Zoffix> ?

[18:30] <tony-o> wrong channel

[18:31] *** yqt joined
[18:37] *** jojotus joined
[18:37] *** jojotus left
[18:39] <yanmc> I'm trying to give p6 a try and am keeping a list of my confusion where applicable; may or may not be useful..

[18:40] <tony-o> feel free to ask questions yanmc 

[18:41] <yanmc> thanks! I'll give it a college try first

[18:41] <timotimo> cool!

[18:41] <timotimo> that'll surely be a good piece of data points for our documentation team, as well as for improving error messages and such

[18:42] * masak .oO( he's keeping a list; he's checking it twice )

[18:42] <masak> good Saturday, #perl6

[18:42] <timotimo> greetings masak

[18:43] * gfldex .oO( Please gist your confusion! )

[18:46] <tony-o> yanmc: you can run one liners in this channel using: 'm: <code>'

[18:46] <tony-o> m: 'sup yanmc'.say

[18:46] <camelia> rakudo-moar f19241: OUTPUT«sup yanmc␤»

[18:47] <yanmc> cool :)

[18:51] *** jjido left
[18:52] *** jjido joined
[18:56] <stevieb> yanmc: I just started as well, and have been compiling a list of the various subtleties as I tredge through the docs reinforcing what I'm learning by typing some of it out: https://github.com/stevieb9/scripts/blob/master/perl6/_learning.txt

[18:57] *** CIAvash left
[18:58] *** girafe joined
[19:03] *** jack_rabbit joined
[19:03] *** jjido left
[19:04] <timotimo> .tell MasterDuke unfortunately the core dump doesn't actually give me any stack traces or anything inside :(

[19:04] <yoleaux> timotimo: I'll pass your message to MasterDuke.

[19:06] <gfldex> is the trait `is nodal` a implementation detail? There seam to be no direct test for that trait in roast but it is checked if some operators/methods are marked as such.

[19:07] <timotimo> oh, really? no tests?

[19:07] <timotimo> it's a part of how hypers work

[19:09] *** webstrand joined
[19:10] <webstrand> I'm getting an error, "Annotation segment overflows end of stream", whenever I try to execute a script containing use Test. A script containing nothing but use Test is sufficient to cause the error. How do I fix this?

[19:11] <timotimo> can you give us your exact perl6 --version please?

[19:13] <gfldex> it may be that the test was omitted because the trait in itself doesn't really do anything

[19:14] <webstrand> timotimo: This is Rakudo version 2016.05 built on MoarVM version 2016.05 implementing Perl 6.c.

[19:17] <dalek> doc: 6caddd5 | (Wenzel P. P. Peppmeyer)++ | doc/Language/typesystem.pod:

[19:17] <dalek> doc: add `is nodal` TODO

[19:17] <dalek> doc: review: https://github.com/perl6/doc/commit/6caddd5df8

[19:17] *** [particle] joined
[19:18] <timotimo> hm, ok, it's the released version ... but that error is strange

[19:18] <Zoffix> webstrand, does runnin this cause it too? perl6 -Mtest -e ''

[19:18] <Zoffix> webstrand, does runnin this cause it too? perl6 -MTest -e ''

[19:19] <webstrand> Zoffix: yep

[19:19] <Zoffix> :S

[19:20] <Zoffix> webstrand, what OS/achitecture?

[19:20] <timotimo> well, the error comes from loading a .moarvm file

[19:20] <Zoffix> Oh

[19:20] <webstrand> what's another module thats packaged in rakudo (not star)

[19:20] <Zoffix> webstrand, NativeCAll

[19:20] <timotimo> NativeCall

[19:20] <timotimo> heh.

[19:20] * Zoffix can't spell for shit today

[19:20] <Zoffix> m: use NativeCall; sub fork is native {}; fork; say 42

[19:20] <camelia> rakudo-moar f19241: OUTPUT«42␤42␤»

[19:21] <webstrand> well, -MNativeCall produces another error: Attempt to read past end of string heap when reading string

[19:21] <timotimo> "lib" used to be a module, but it's a compiler-builtin pragma nowadays

[19:21] <webstrand> Zoffix: archlinux/x86_64

[19:21] <timotimo> could it be your files got truncated or corrupted?

[19:22] <webstrand> its possible. I just built the packages though

[19:22] <timotimo> can you package up your install/ and send it our way?

[19:23] <dalek> doc: b660678 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Any.pod:

[19:23] <dalek> doc: state that sort returns a new list

[19:23] <dalek> doc: review: https://github.com/perl6/doc/commit/b660678b74

[19:24] <webstrand> timotimo: That would be /install from rakudo?

[19:25] <timotimo> yeah, should be

[19:28] * masak .oO( I was gonna call my module NativeCall::Stupid, but I eventually went with NaïveCall )

[19:29] <dalek> doc: 06cd14d | (Wenzel P. P. Peppmeyer)++ | doc/Type/Signature.pod:

[19:29] <dalek> doc: fix markup mixup

[19:29] <dalek> doc: review: https://github.com/perl6/doc/commit/06cd14d9b8

[19:30] *** darutoko left
[19:33] <dalek> doc: 1d028e1 | (Wenzel P. P. Peppmeyer)++ | doc/Language/functions.pod:

[19:33] <dalek> doc: link from functions to Routine

[19:33] <dalek> doc: review: https://github.com/perl6/doc/commit/1d028e11fe

[19:36] <Zoffix> Oh, almost forgot. tbrowder what are all the F<> things in here? Is that some POD tag that's supposed to work and isn't? http://docs.perl6.org/programs/00-running#ENVIRONMENT_VARIABLES

[19:36] <webstrand> timotimo: I think this is what you're wanting: https://www.dropbox.com/s/elbq5rc5of5f0qe/rakudo-2016.05-1-x86_64.pkg.tar.xz?dl=0

[19:39] *** travis-ci joined
[19:39] <travis-ci> Doc build failed. Wenzel P. P. Peppmeyer 'fix markup mixup'

[19:39] <travis-ci> https://travis-ci.org/perl6/doc/builds/138619415 https://github.com/perl6/doc/compare/b660678b7457...06cd14d9b851

[19:39] *** travis-ci left
[19:40] <timotimo> webstrand: thanks, maybe i can find something out

[19:41] <timotimo> it'd be nice if you could grab a rakudo from git and verify if it's still broken?

[19:41] <webstrand> sure

[19:42] *** travis-ci joined
[19:42] <travis-ci> Doc build failed. Wenzel P. P. Peppmeyer 'link from functions to Routine'

[19:42] <travis-ci> https://travis-ci.org/perl6/doc/builds/138619787 https://github.com/perl6/doc/compare/06cd14d9b851...1d028e11fe01

[19:42] *** travis-ci left
[19:43] *** domidumont left
[19:44] <Xliff> What is the best resource for learning nqp?

[19:45] *** pmurias joined
[19:45] <dalek> doc: be9b155 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Signature.pod:

[19:45] <dalek> doc: return type constraints match undefined values

[19:45] <dalek> doc: review: https://github.com/perl6/doc/commit/be9b155269

[19:45] <pmurias> Xliff: the language or the QAST etc.?

[19:47] *** leont joined
[19:48] <timotimo> webstrand: actually, it'd be interesting if re-building rakudo from the release version would be broken again

[19:49] <dalek> doc: 01c3684 | (Daniel Green)++ | doc/Language/operators.pod:

[19:49] <dalek> doc: Add some documentation for the =~=/≅ operator

[19:49] <dalek> doc: review: https://github.com/perl6/doc/commit/01c3684ce2

[19:49] <dalek> doc: f9ebaba | (Daniel Green)++ | doc/Language/operators.pod:

[19:49] <dalek> doc: Clarify absolute difference explanation, Zoffix++

[19:49] <dalek> doc: review: https://github.com/perl6/doc/commit/f9ebaba1de

[19:49] <dalek> doc: 886318f | RabidGravy++ | doc/Language/operators.pod:

[19:49] <dalek> doc: Merge pull request #604 from MasterDuke17/add_docs_for_≅

[19:49] <dalek> doc: 

[19:49] <dalek> doc: Add some documentation for the =~=/≅ operator

[19:49] <dalek> doc: review: https://github.com/perl6/doc/commit/886318f619

[19:50] <gfldex> Zoffix: F<> does not exist for pod6

[19:52] <webstrand> timotimo: I'd deleted the original package sources, so the build I gave you is a re-build with an existing rakudo installation.

[19:52] <timotimo> huh?

[19:52] <webstrand> and that build is also broken

[19:53] <Zoffix> gfldex, I'm not even sure what they're supposed to be :/

[19:54] *** pRiVi joined
[19:54] *** pRiVi left
[19:55] *** travis-ci joined
[19:55] <travis-ci> Doc build failed. Wenzel P. P. Peppmeyer 'return type constraints match undefined values'

[19:55] <travis-ci> https://travis-ci.org/perl6/doc/builds/138621154 https://github.com/perl6/doc/compare/1d028e11fe01...be9b15526922

[19:55] *** travis-ci left
[19:55] <gfldex> Zoffix: it breaks the build. I vote for reverting that commit.

[19:55] <webstrand> timotimo: I built rakudo the first time and installed it to my filesystem, noticed the error, then reported it here. When you asked for /install, I rebuilt the package and sent it to you. Neither build is free from the error.

[19:56] <timotimo> oh, ok

[19:56] *** pRiVi joined
[19:58] *** grondilu left
[19:59] <Zoffix> gfldex, how can it break the build if they are showing up in the docs?

[19:59] <Zoffix> And I built that PR before merging 

[19:59] *** travis-ci joined
[19:59] <travis-ci> Doc build failed. Jonathan Stowe 'Merge pull request #604 from MasterDuke17/add_docs_for_≅

[19:59] <travis-ci> https://travis-ci.org/perl6/doc/builds/138621595 https://github.com/perl6/doc/compare/be9b15526922...886318f619a4

[19:59] *** travis-ci left
[19:59] <stevieb> in perl5, I can dynamically create subs by modifying the symbol table: "$x='blah'; *$x=sub{1;}; blah();'. How can I do this in perl6?

[20:00] <timotimo> "symbol tables" are immutable after compile time is finished

[20:00] *** michiamodiego joined
[20:00] <Zoffix> stevieb, my &blah =  sub { ... }

[20:00] <pmurias> Xliff: if you already know Perl 6, a good way to see what's supported in nqp would be to look at the test in nqp-repo/t/nqp

[20:00] <moritz> well, lexical scopes are immutable

[20:00] <Zoffix> Well

[20:01] <Zoffix> I guess my answer is useless :P

[20:01] <Zoffix> stevieb, what are you trying to do?

[20:01] <timotimo> you might be interested in sub EXPORT

[20:01] <stevieb> look at the begin block here, where I create subs based on _sub_names(): https://metacpan.org/source/STEVEB/Logging-Simple-1.01/lib/Logging/Simple.pm

[20:02] <moritz> also, you can create subs and put them into a hash, for eample

[20:02] <stevieb> I'm going to try to port this very simple module to perl6 as my first real attempt, and I'm literally just taking the plunge and going for it

[20:03] <stevieb> in that module, I have methods such as: $obj->_0(); $obj->_7(); etc

[20:04] <timotimo> oh

[20:04] <moritz> oh, methods

[20:04] <timotimo> well, methods are an entirely different matter

[20:04] <moritz> not subs

[20:04] <moritz> $class.^add_method($name, method () { do stuff here })

[20:04] <timotimo> or even register a FALLBACK

[20:04] <moritz> $class.^compose() # at the end

[20:05] *** leont left
[20:05] <stevieb> moritz: I'm sorry... terminology is everything lol

[20:05] *** michiamodiego left
[20:05] <stevieb> moritz: thanks for that... I'm loving perl6 more every day. so simple!

[20:06] <moritz> stevieb: well, understandble, because in p5, there is no real difference between subs and methods

[20:07] <masak> not much of one in Perl 6 either

[20:07] <moritz> well, the difference is that the lookup is done in different data structures

[20:07] <moritz> in p5, the lookup for both subs and methods happens in the namespace

[20:08] <moritz> (modulo lexical subs in 5.20+)

[20:08] <moritz> or was it 5.22?

[20:11] *** huggable left
[20:11] *** huggable joined
[20:11] <dalek> doc: 5195846 | (Zoffix Znet)++ | doc/Language/operators.pod:

[20:11] <dalek> doc: Fix build failure

[20:11] <dalek> doc: review: https://github.com/perl6/doc/commit/5195846461

[20:12] <timotimo> right, whereas an object has 100% power over how their own methods are looked up

[20:12] *** inokenty joined
[20:12] <Zoffix> hmm

[20:13] <mst> moritz: not entirely true

[20:13] <mst> moritz: in perl5, subroutines are looked up by introspecting the stash of the current package at compilation time (unless you &sub), and then the glob is bound into the optree

[20:13] <mst> (hence why namespace::clean can clean things without breaking calls)

[20:14] <mst> methods are looked up by asking ref($self) for its mro (see docs for 'use mro') and then the packages tehreby selected are walked to try and find a method

[20:14] <moritz> mst: yes, but both ultimately look at packages

[20:14] <moritz> just at different times, and in the case of methods, also in superclasses

[20:14] <mst> moritz: yes, but 'in the namespace' glosses over the fact that you can basically have two separate namespaces

[20:15] <moritz> which is why injecting methods and injecting subs use the same mechanism

[20:15] <moritz> which is writing things in packages

[20:15] <mst> so, effectively, it *is* 'done in different data structures' potentially, just unless you're using namespace::clean and/or a custom mro that doesn't normally happen

[20:16] <mst> as a lies-told-to-children description of the difference what you said is fine, but perl5 is actually more sophisticated than it first appears, even if we don't take advantage of that sophistication a lot of the time

[20:17] <moritz> but doesn't perl 5 fall back to runtime package lookup for subs as well?

[20:17] <gfldex> m: class Log { method log( $level, $s ){ note "$level: $s" }; method CALL-ME($s){ self.log(4, $s) } }; my sub infix:<-0>(Log:D $l, $s){ $l.log(0, $s) }; my $log = Log.new; $log("ohai"); $log-0 "alert";

[20:17] <camelia> rakudo-moar f19241: OUTPUT«4: ohai␤0: alert␤»

[20:17] <gfldex> stevieb: you can always cheat with user defined operators ^^^

[20:18] <Zoffix> They slow down the startup quite a bit tho

[20:19] <Zoffix> m: class Log { method log( $level, $s ){ note "$level: $s" }; method CALL-ME($s){ self.log(4, $s) } }; my sub infix:<-0>(Log:D $l, $s){ $l.log(0, $s) }; my $log = Log.new; $log("ohai"); $log-0 "alert"; say 4-0

[20:19] <camelia> rakudo-moar f19241: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3w; $log("ohai"); $log-0 "alert"; say 4-07⏏5<EOL>␤    expecting any of:␤        prefix␤        term␤»

[20:19] <gfldex> cheating may break things :)

[20:19] <Zoffix> :)

[20:19] <stevieb> lol

[20:21] <gfldex> i would have guessed that Log:D would prevent this particular problem

[20:21] *** travis-ci joined
[20:21] <travis-ci> Doc build failed. Zoffix Znet 'Fix build failure'

[20:21] <travis-ci> https://travis-ci.org/perl6/doc/builds/138624415 https://github.com/perl6/doc/compare/886318f619a4...5195846461ce

[20:21] *** travis-ci left
[20:21] <Zoffix> travis-ci, yes, yes, I know. I suck.

[20:22] * Zoffix has the fix. Just waiting for local build

[20:26] *** buharin left
[20:27] *** ssotka left
[20:28] *** mspo joined
[20:29] <gfldex> stevieb: «» is not qq, see http://doc.perl6.org/language/quoting#Word_quoting_with_interpolation_and_quote_protection:_qqww

[20:32] <stevieb> gfldex: thanks. I'm pretty confident there's a lot wrong in there. They're just notes as when I type stuff out, I remember better. I'll go back over it frequently fixing things the more I pick up

[20:33] <dalek> doc: 7ccc1ec | (Zoffix Znet)++ | doc/Type/Signature.pod:

[20:33] <dalek> doc: Fix build failure

[20:33] <dalek> doc: 

[20:33] <dalek> doc: Seems X<> is not fully supported in =head directives.

[20:33] <dalek> doc: Mirroring fix found elsewhere in the docs, by listing X<> before

[20:33] <dalek> doc: the =head

[20:33] <dalek> doc: review: https://github.com/perl6/doc/commit/7ccc1ec8b6

[20:34] <dalek> doc: ff8a09a | (Zoffix Znet)++ | doc/Type/Signature.pod:

[20:34] <dalek> doc: Improve wording

[20:34] <dalek> doc: review: https://github.com/perl6/doc/commit/ff8a09a2f4

[20:35] <Zoffix> Why is this section called "Long Names"? http://docs.perl6.org/type/Signature#Long_Names

[20:39] <dalek> doc: aa21b02 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Junction.pod:

[20:39] <dalek> doc: add example to junctions

[20:39] <dalek> doc: review: https://github.com/perl6/doc/commit/aa21b026ee

[20:39] <dalek> doc: 67244e4 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Signature.pod:

[20:39] <dalek> doc: Merge branch 'master' of https://github.com/perl6/doc

[20:39] <dalek> doc: review: https://github.com/perl6/doc/commit/67244e4ea5

[20:40] <Zoffix> git pull --rebase; lets you avoid merge commits

[20:40] *** TEttinger joined
[20:42] *** ssotka joined
[20:43] <stevieb> LOL my first module! https://github.com/stevieb9/p6-log-simple/blob/master/lib/Log/Simple.pm6

[20:44] * Zoffix doesn't get it

[20:45] <tony-o> enum LEVELS qw<INFO DEBUG WARN ERROR>;

[20:47] *** travis-ci joined
[20:47] <travis-ci> Doc build passed. Zoffix Znet 'Fix build failure

[20:47] <travis-ci> https://travis-ci.org/perl6/doc/builds/138627012 https://github.com/perl6/doc/compare/5195846461ce...7ccc1ec8b6ec

[20:47] *** travis-ci left
[20:47] <Zoffix> http://i2.kym-cdn.com/entries/icons/original/000/001/987/fyeah.jpg

[20:49] <Xliff> pmurias++: Thanks!

[20:49] <Xliff> Zoffix: LOL!

[20:49] *** travis-ci joined
[20:49] <travis-ci> Doc build passed. Zoffix Znet 'Improve wording'

[20:49] <travis-ci> https://travis-ci.org/perl6/doc/builds/138627178 https://github.com/perl6/doc/compare/7ccc1ec8b6ec...ff8a09a2f4c3

[20:49] *** travis-ci left
[20:50] <gfldex> m: { LEAVE say (ENTER $ = now) - now }

[20:50] <camelia> rakudo-moar f19241: OUTPUT«===SORRY!===␤Cannot reference undeclared local 'enter_result__1'␤»

[20:54] *** travis-ci joined
[20:54] <travis-ci> Doc build passed. Wenzel P. P. Peppmeyer 'Merge branch 'master' of https://github.com/perl6/doc'

[20:54] <travis-ci> https://travis-ci.org/perl6/doc/builds/138627801 https://github.com/perl6/doc/compare/ff8a09a2f4c3...67244e4ea559

[20:54] *** travis-ci left
[20:59] *** zacts left
[21:17] *** vibha joined
[21:20] *** dwarring joined
[21:21] <webstrand> timotimo: I'm unable to build the git version of rakudo: https://dpaste.de/sg5x I've tried compiling rakudo-2016.05 on the git version of moarvm and nqp, and I still get the error.

[21:22] *** kaare_ left
[21:23] <Zoffix> How are you running tools/build/install-core-dist.pl ?

[21:24] <Zoffix> Just make stuff?

[21:25] <webstrand> Zoffix: make DESTDIR="$pkgdir" install

[21:25] <webstrand> where $pkgdir is the some existing directory path

[21:26] <Zoffix> Have you cleaned that directory first?

[21:26] <webstrand> That shouldn't have been an issue, but I'll try it now

[21:27] <Zoffix> 2016.05 probably won't work on git version of moarvm/nqp

[21:27] *** cdg joined
[21:28] <webstrand> actually, it compiled fine. perl -MTest -e '' still errors out though

[21:28] <Zoffix> :(

[21:29] <Zoffix> webstrand, how come 2016.05 of rakudo and not latest?

[21:29] <Zoffix> s/latest/git HEAD/;

[21:29] *** vibha left
[21:30] <webstrand> I don't know. I'm using a script to build both 2016.05 and HEAD. The only difference in the script is the rev number built. 2016.05 compiled fine, but HEAD fails with https://dpaste.de/sg5x

[21:31] <webstrand> I'm still waiting for the clean build of HEAD to finish

[21:31] <Zoffix> :o

[21:32] *** vike joined
[21:32] *** zacts joined
[21:32] *** rurban_ left
[21:32] <webstrand> actually, aside from the installation issues, the test suite runs successfully on HEAD. So the original error is fixed in HEAD

[21:33] <Zoffix> Hm

[21:33] * Zoffix is confused

[21:35] <masak> lol, I blog'd! http://strangelyconsistent.org/blog/train-tracks

[21:36] <webstrand> moarvm-2016.05, nqp-2016.05, rakudo-2016.05: rakudo test suite fails with "Annotation segment overflows end of stream". moarvm-HEAD, nqp-HEAD, rakudo-HEAD: rakudo test suite succeeds, but there's some other bug in installation which means I cant wrap it in a package yet.

[21:37] <timotimo> is the bug in installation the "outdated precomp" thing?

[21:37] <webstrand> yep

[21:37] *** cur8or joined
[21:37] <Zoffix> webstrand, you're making a Linux distro package?

[21:38] <timotimo> argh linux

[21:40] <webstrand> Zoffix, kind-of. Archlinux has facility to build packages from source, so that the package manager can install/upgrade/remove them at will. I'm using this to make a package of rakudo for myself

[21:40] <Zoffix> webstrand, it's just 2016.06 is 1-2 hours away

[21:41] *** Guest74224 is now known as pierrot

[21:41] *** zacts left
[21:41] <webstrand> No one else will ever see these packages, there for my use alone

[21:41] <Zoffix> aww :(

[21:41] *** pierrot is now known as Guest53339

[21:44] <webstrand> Well, anyone else can also build the package from source: https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=rakudo is in the AUR, I've just modified it to use git.

[21:44] *** Guest53339 is now known as pierrot

[21:44] *** pierrot left
[21:44] *** pierrot joined
[21:44] *** pierrot left
[21:44] *** pierrot joined
[21:45] <Zoffix> How come you don't release the packages you're building?

[21:47] * Zoffix tries to install Arch

[21:47] <Zoffix> Looks like something that requires a lot of reading and typing :P

[21:49] <webstrand> Well, to a certain extent yes, install takes about an hour typing at a terminal.

[21:49] * Zoffix is too old for that stuff

[21:50] *** rindolf left
[21:50] *** lizmat joined
[21:51] <webstrand> I like it because I get something like gentoo's srcpkgs, so I can easily wrap whatever random software sparks my interest in a way that the dist's package manager can manage. So things like perl6 don't leave behind anything when I remove or upgrade them.

[21:51] <Zoffix> I use rakudobrew for that for Perl 6 https://github.com/tadzik/rakudobrew

[21:52] <dogbert17> the code for Baggy.Bool is one line, i.e. nqp::p6bool(nqp::elems(nqp::getattr(%!elems,Map,'$!storage')))   - does this check if the instance contains any elements?

[21:54] *** girafe left
[21:57] <timotimo> yeah

[21:58] <dogbert17> timotimo: many thanks, nqp is too difficult for me atm

[21:58] <webstrand> Any idea when panda is going to get an update? Or is some other tool preferred now?

[21:58] <timotimo> did you have a look at the nqp ops documentation yet? it's quite good

[21:59] <timotimo> hm, no, not "quite good"

[21:59] <timotimo> but rather complete, at least

[22:01] <dogbert17> timotimo: where is it hiding?

[22:02] <timotimo> in the nqp repo under docs/

[22:02] *** wamba left
[22:02] <Zoffix> webstrand, I prefer zef ( http://modules.perl6.org/repo/zef ) there's also redpanda ( http://modules.perl6.org/repo/redpanda )

[22:03] <timotimo> some rakudo-specific ops are also in rakudo/docs/ops.md or something

[22:03] <Zoffix> Oh, it's App::redpanda: https://github.com/tadzik/App-redpanda

[22:03] <autarch> does anyone know off hand of a module that does some sort of meta OO stuff I could look at for an example?

[22:03] <autarch> it doesn't need to export this stuff, just do it internally

[22:03] *** jjido joined
[22:03] <timotimo> autarch: check out my ADT module

[22:03] *** webstrand left
[22:03] <autarch> timotimo: thanks

[22:04] *** _webstrand joined
[22:04] <dalek> doc: 48b97ca | (Jan-Olof Hendig)++ | doc/Type/Baggy.pod:

[22:04] <dalek> doc:  Added docs for Baggy.Bool. timotimo++

[22:04] <dalek> doc: review: https://github.com/perl6/doc/commit/48b97caabb

[22:05] <autarch> timotimo: actually, I was hoping for something that modified how OO works, not just something that uses the metamodel to make classes or attributes

[22:05] <_webstrand> The full output of: make --DESTDIR="" install is http://pastie.org/10882473. Does anyone have an idea of what might be wrong? Or shall I start bisecting?

[22:05] <timotimo> oh

[22:05] <timotimo> OO::Monitors and OO::Actors comes to mind, but it might not be "enough" for you

[22:06] *** pmurias left
[22:06] *** _webstrand is now known as webstrand

[22:06] <autarch> I just need a simple example, so enough is probably enough ;)

[22:06] <timotimo> what i mean is it may not fit your description of changing how OO works

[22:07] <autarch> I see

[22:07] <autarch> what I'd like to show is something like an attribute traits that modifies the generated accessors

[22:08] *** setty1 left
[22:09] <masak> 'night, #perl6

[22:09] <Zoffix> webstrand, you could try building this. Though I'm almost certain it won't fix your problem since you say you did try HEAD: http://temp.perl6.party/rakudo-2016.06.tar.gz

[22:10] <Zoffix> night

[22:11] <timotimo> oh

[22:11] <autarch> I think I found something - https://github.com/perl6/roast/blob/master/S14-traits/attributes.t#L6-L49

[22:11] <timotimo> there's some things in core that do things like that

[22:11] <timotimo> for attributes, you can mix in a role that provides an additional implementation of compose

[22:14] <autarch> yeah, I remember digging way into the core last time I looked into this stuff to figure out how it worked exactly

[22:15] <autarch> hmm, I suspect this is going to be way too much code for a slide

[22:15] <autarch> I'd like a relatively simple example to hint at the power of the metamodel - any suggestions on an example?

[22:17] <timotimo> jnthn already gave a presentation on OO::Monitors and OO::Actors, maybe you can steal a bit from the slides

[22:18] <autarch> I just thought of something good enough

[22:18] <autarch> https://gist.github.com/autarch/9af544579d70a205c6261f4bf8a358f5

[22:21] <timotimo> that's quite boring :)

[22:21] <webstrand> Zoffix: nope, thanks though. Hopefully a bisect will turn up something

[22:22] <autarch> yeah, but this is for my basic Perl6 OO talk - I want to end with a hint at possibilities, not show 100 lines of incomprehensible gibberish

[22:22] <timotimo> how about an example that installs a second method that has the same name but upper case and upper cases the return value? :P

[22:23] *** spider-mario left
[22:27] *** RabidGravy left
[22:27] <Hotkeys> can anyone see a good way to shorten this wonderful code golf

[22:27] <Hotkeys> say sum await map ^9: {start {sleep 7;now -ENTER now}};say now -INIT now

[22:28] <Zoffix> .oO( why is everyone trying to shorten already short code lately.... )

[22:29] <Hotkeys> it's for code golf

[22:30] <timotimo> colf

[22:32] *** BenGoldberg joined
[22:32] *** jjido left
[22:47] *** zacts joined
[22:49] <b2gills> Hotkeys: say sum await map {start {sleep 7;now -ENTER now}},^9;say now -INIT now

[22:50] <timotimo> doesn't sleep return how long it slept?

[22:50] <timotimo> m: say sleep 7

[22:50] <camelia> rakudo-moar f19241: OUTPUT«Nil␤»

[22:50] <timotimo> huh, apparently not

[22:50] *** zacts left
[22:52] <Zoffix> say sum await start {sleep 7;now -ENTER now} xx 9;say now -INIT now

[22:53] <Zoffix> nm

[22:54] <Zoffix> Any idea why Inline::Perl5 build says '/usr/bin/ld: cannot find -lperl'

[22:54] <Zoffix> I built Perl 5 with perlbrew :/ I dunno why it'd be missing

[22:55] <Zoffix> forgot perlbrew switch perl-5.24.0

[23:10] *** cooper left
[23:15] <webstrand> Zoffix: I've finished bisecting, the first bad commit is c7cd003251a2425c14e91d34f6c5ed9acc1caf55. 

[23:15] <webstrand> everything before that installs correctly

[23:16] *** dj_goku left
[23:17] <Zoffix> crap

[23:17] <Zoffix> nine, are you around? 

[23:27] <Zoffix> webstrand++ thanks for spotting the issue. I can actually replicate it when I specify DESTDIR to make install 😿

[23:27] <BenGoldberg> m: say sum await map {start {now -ENTER now}},^9; say now -INIT now

[23:27] <camelia> rakudo-moar f19241: OUTPUT«0.0791681440␤0.04475032␤»

[23:29] <webstrand> zoffix: great, glad to know it's not just my computer :)

[23:35] *** BenGoldberg left
[23:37] *** BenGoldberg joined
[23:37] *** cooper joined
[23:40] <Hotkeys> b2gills: ty, forgot about using it as a function, went straight for the funky method syntax

[23:41] *** firstdayonthejob left
[23:52] *** webstrand left
[23:53] *** zacts joined
[23:53] *** webstrand joined
[23:54] *** AlexDaniel joined
[23:55] *** pmurias joined
