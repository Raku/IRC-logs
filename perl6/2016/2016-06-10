[00:03] *** mr-foobar left
[00:05] *** labster joined
[00:17] *** parisba left
[00:17] *** parisba joined
[00:17] *** TakinOver joined
[00:19] *** Spot__ left
[00:19] *** SmokeMachine____ left
[00:22] *** SmokeMachine____ joined
[00:23] *** Spot__ joined
[00:36] *** rurban1 joined
[00:37] *** rurban left
[00:38] *** rurban joined
[00:41] *** rurban1 left
[00:42] *** rurban1 joined
[00:43] *** rurban left
[00:48] *** tbrowder joined
[00:50] <colomon> grondilu: I have to say at first blush, overriding infix:<*> if you have three objects seems very wrong to me.  are you trying to improve the accuracy of floating point or something?

[00:52] *** tbrowder left
[00:54] *** rurban1 left
[00:54] *** rurban joined
[01:00] *** rurban left
[01:01] *** rurban joined
[01:05] *** kalkin- left
[01:05] *** kalkin-_ joined
[01:11] *** rurban left
[01:12] *** rurban joined
[01:16] *** rurban left
[01:17] *** rurban joined
[01:20] *** molaf left
[01:21] *** rurban left
[01:21] *** kurahaupo_ joined
[01:21] *** rurban joined
[01:23] *** kurahaupo left
[01:33] *** molaf joined
[01:34] <grondilu> colomon: I want to optimize expressions like a*b*a

[01:35] <grondilu> or rather a.transpose*b*a, as discussed then

[01:39] *** kurahaupo_ left
[01:40] <grondilu> I don't want it very hard though, but a simple solution would be nice.

[01:42] <colomon> I’m not sure of the wisdom of trying to squeeze matrix multiplication in with normal multiplication.

[01:43] <colomon> But it seems like if you really want to do something like this, the right way to do it is to add another layer of abstraction

[01:44] <colomon> so that infix:<*> (Matrix, Matrix) doesn’t return a Matrix, it returns some sort of proxy object which can generate a Matrix

[01:44] <colomon> and the optimizations are built on the proxy level

[01:45] *** ilbot3 left
[01:46] *** sufrostico left
[01:47] *** ilbot3 joined
[01:55] <grondilu> yeah I was considering that, but it's kind of ugly.

[01:56] <grondilu> though now that I rethink about it, it makes some sense for my application.

[02:00] *** rurban left
[02:03] *** kid51 left
[02:05] *** labster left
[02:09] *** colomon left
[02:11] *** colomon joined
[02:18] <timeless> Type Order not found in type-graph data

[02:22] *** Actualeyes joined
[02:30] <BenGoldberg> Personally, I would think about porting PDL to perl6.

[02:33] *** noganex joined
[02:36] *** noganex_ left
[02:40] <grondilu> again it's not actually for linear algebra, but for my Clifford module (that is, geometric algebra)

[02:40] *** pecastro joined
[02:42] <timeless> doc: make html is really slow :(

[02:43] <timeless> anyone know how practical it would be for `make html` to be parallelized?

[02:44] <timeless> i have access to >100 cores and would love to have this process run faster (right now, i'm assuming it's using one core)

[02:44] *** Zero_Dogg left
[02:44] *** Zero_Dogg joined
[02:45] *** labster joined
[02:45] <Juerd> If it's already parallelizable, try make -j 100 html

[02:45] <timeless> html:

[02:45] <timeless>         perl6 htmlify.p6

[02:46] <Juerd> Oh :(

[02:46] *** yqt left
[02:52] <timeless> is perl6 happy to fork?

[02:54] *** huggable left
[02:54] *** huggable joined
[02:58] <grondilu> I vaguely remember someone posted a neat trick to perform a fork lately

[02:59] <grondilu> it might have involved v5 though.  Can't quite remember.

[03:01] <timeless> grondilu: wait, forking isn't supported in v6 yet?

[03:01] <timeless> (is threading?)

[03:01] <grondilu> I think it will never be because it's not portable or something.

[03:02] <grondilu> but there is a trick using a system call

[03:02] <timeless> language/5to6-perlfunc.html#fork

[03:03] <grondilu> m: say "I'm a child" if run fork

[03:03] <camelia> rakudo-moar 87e91c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/D0oQRTQZ0T␤Undeclared routine:␤    fork used at line 1␤␤»

[03:03] <grondilu> m: say "I'm a child" if run 'fork'

[03:03] <camelia> rakudo-moar 87e91c: OUTPUT«run is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub run at src/RESTRICTED.setting line 14␤  in block <unit> at /tmp/BrJ6DSETH0 line 1␤␤»

[03:07] <timeless> m: use NativeCall; sub fork returns int32 is native { * }; say fork;

[03:07] <camelia> rakudo-moar 87e91c: OUTPUT«19709␤0␤»

[03:08] *** skids joined
[03:09] <geekosaur> it won't be in core. a POSIX module is projected but nonexistent as yet (likewise a module for Win32)

[03:09] <timeless> m: eval 'use NativeCall; sub fork returns int32 is native { * }; $x=fork; say $x if $x > 0'

[03:09] <camelia> rakudo-moar 87e91c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ecLHOG0NVG␤Undeclared routine:␤    eval used at line 1. Did you mean 'EVAL', 'val'?␤␤»

[03:09] <geekosaur> but you can get at either of those with NativeCall of course

[03:09] <grondilu> yes I remember now, it was indeed using NativeCall.

[03:10] <timeless> m: EVAL 'use NativeCall; sub fork returns int32 is native { * }; $x=fork; say $x if $x > 0'

[03:10] <camelia> rakudo-moar 87e91c: OUTPUT«5===SORRY!5=== Error while compiling /home/camelia/EVAL_0␤Variable '$x' is not declared␤at /home/camelia/EVAL_0:1␤------> 3sub fork returns int32 is native { * }; 7⏏5$x=fork; say $x if $x > 0␤»

[03:10] <grondilu> m: use NativeCall; sub fork returns int32 is native { * }; say "I'm the parent" if fork;

[03:10] <camelia> rakudo-moar 87e91c: OUTPUT«I'm the parent␤»

[03:10] <geekosaur> I would expect rakudo's core to be slightly confused at times though, if it's using anything that doesn't expect fork (rakudo itself might not, but libuv may)

[03:11] <timeless> m: EVAL 'use NativeCall; sub fork returns int32 is native { * }; my $x=fork; say $x if $x > 0'

[03:11] <camelia> rakudo-moar 87e91c: OUTPUT«19772␤»

[03:11] <timeless> m: EVAL 'use NativeCall; sub forkz returns int32 is native { * }; my $x=forkz; say $x if $x > 0'

[03:11] <camelia> rakudo-moar 87e91c: OUTPUT«Cannot locate symbol 'forkz' in native library ''␤  in method setup at /home/camelia/rakudo-m-inst-2/share/perl6/sources/24DD121B5B4774C04A7084827BFAD92199756E03 (NativeCall) line 281␤  in method CALL-ME at /home/camelia/rakudo-m-inst-2/share/perl6/sou…»

[03:11] <grondilu> timeless: why do you EVAL it?

[03:12] <timeless> because that's what i'd do in perl5 to handle `use` failing

[03:12] <timeless> i want to write code which would work w/ fork if i can fork, and not die if i can't fork

[03:12] <grondilu> there has to be a better way to do it.

[03:13] <timeless> hopefully :)

[03:13] <timeless> clearly this didn't work :)

[03:14] <grondilu> if there is no better way to deal with conditional NativeCall bindings, then it's clearly LTA

[03:15] <timeless> LTA?

[03:15] * timeless needs to fix an error in the EVAL docs

[03:18] <timeless> so, what's the perl equivalent of `try: import X / except ImportError:` ?

[03:18] <timeless> (perl6)

[03:19] *** sherwool left
[03:20] * timeless visits http://design.perl6.org/S04.html#Exceptions

[03:21] <grondilu> timeless: Less Than Awesome

[03:21] <grondilu> that's my favorite euphemism in S99

[03:26] <timeless> http://localhost:3000/language/.html.html.html.html.html.html.html.html.html.html.html.html.html.html.html.html.html.html.html.html.html

[03:27] * timeless kicks the `make run` script

[03:31] *** kurahaupo joined
[03:40] *** nowan left
[03:41] <dj_goku_> evening

[03:46] *** skids left
[03:48] *** nowan joined
[03:53] * timeless grumbles

[03:54] <timeless> m: EVAL 'use NativeCall; sub forkz returns int32 is native { * }; my $x=forkz; say $x if $x > 0' or say "oops";

[03:54] <camelia> rakudo-moar 87e91c: OUTPUT«Cannot locate symbol 'forkz' in native library ''␤  in method setup at /home/camelia/rakudo-m-inst-2/share/perl6/sources/24DD121B5B4774C04A7084827BFAD92199756E03 (NativeCall) line 281␤  in method CALL-ME at /home/camelia/rakudo-m-inst-2/share/perl6/sou…»

[04:03] <timeless> m: EVAL 'use NativeCall; sub forkz returns int32 is native { * }; my $x=forkz; say $x if $x > 0'; CATCH {default {say .WHAT.perl, do given .backtrace[0] { .file, .line, .subname }}}

[04:03] <camelia> rakudo-moar 87e91c: OUTPUT«X::AdHoc(/home/camelia/rakudo-m-inst-2/share/perl6/sources/24DD121B5B4774C04A7084827BFAD92199756E03 (NativeCall) 281 setup)␤»

[04:04] *** maybekoo2 left
[04:05] <timeless> grondilu: so, this seems to work, i guess

[04:06] <timeless> m: use NativeCall; sub forkz returns int32 is native { * }; CATCH {default {say .WHAT.perl, do given .backtrace[0] { .file, .line, .subname }}}; my $x=forkz; say $x if $x > 0; 

[04:06] <camelia> rakudo-moar 87e91c: OUTPUT«X::AdHoc(/home/camelia/rakudo-m-inst-2/share/perl6/sources/24DD121B5B4774C04A7084827BFAD92199756E03 (NativeCall) 281 setup)␤»

[04:13] <timeless> m: use NativeCall; sub forkz returns int32 is native { * }; CATCH {X::AdHoc {say .WHAT.perl, do given .backtrace[0] { .file, .line, .subname }}}; my $x=forkz; say $x if $x > 0; 

[04:13] <camelia> rakudo-moar 87e91c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/gh0wdOyVJ7␤Unexpected block in infix position (missing statement control word before the expression?)␤at /tmp/gh0wdOyVJ7:1␤------> 3s int32 is native { * }; CATCH {X::AdHoc7⏏5 {say .WHAT.perl, do giv…»

[04:13] <timeless> m: use NativeCall; sub forkz returns int32 is native { * }; CATCH {when X::AdHoc {say .WHAT.perl, do given .backtrace[0] { .file, .line, .subname }}}; my $x=forkz; say $x if $x > 0; 

[04:13] <camelia> rakudo-moar 87e91c: OUTPUT«X::AdHoc(/home/camelia/rakudo-m-inst-2/share/perl6/sources/24DD121B5B4774C04A7084827BFAD92199756E03 (NativeCall) 281 setup)␤»

[04:13] *** molaf left
[04:13] *** BenGoldberg left
[04:15] *** BenGoldberg joined
[04:15] *** khw left
[04:17] <timeless> m: use NativeCall; sub waitpid returns int32 is native { * }; CATCH {when X::AdHoc {say .WHAT.perl, do given .backtrace[0] { .file, .line, .subname }}}; say "hi";

[04:17] <camelia> rakudo-moar 87e91c: OUTPUT«hi␤»

[04:18] *** Cabanossi left
[04:19] *** Cabanossi joined
[04:25] *** ssotka left
[04:30] <timeless> m: use NativeCall; sub waitpid(int32, Pointer[int32], int32) returns int32 is native { * }; CATCH {when X::AdHoc {say .WHAT.perl, do given .backtrace[0] { .file, .line, .subname }}}; say "hi";

[04:30] <camelia> rakudo-moar 87e91c: OUTPUT«hi␤»

[04:31] *** kurahaupo left
[04:37] <timeless> m: use NativeCall; sub fork returns int32 is native { * }; sub waitpid(int32, Pointer[int32], int32) returns int32 is native { * }; my $x=fork; say "hi" if ($x == 0); if ($x) {my Pointer[int32] $p; my $z = waitpid($x, $p, 1); say $p.deref;

[04:37] <camelia> rakudo-moar 87e91c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/2RfJvo8_5T␤Missing block␤at /tmp/2RfJvo8_5T:1␤------> 3y $z = waitpid($x, $p, 1); say $p.deref;7⏏5<EOL>␤»

[04:37] <timeless> m: use NativeCall; sub fork returns int32 is native { * }; sub waitpid(int32, Pointer[int32], int32) returns int32 is native { * }; my $x=fork; say "hi" if ($x == 0); if ($x) {my Pointer[int32] $p; my $z = waitpid($x, $p, 1); say $p.deref; }

[04:37] <camelia> rakudo-moar 87e91c: OUTPUT«hi␤Invocant requires an instance of type NativeCall::Types::Pointer[int32], but a type object was passed.  Did you forget a .new?␤  in method deref at /home/camelia/rakudo-m-inst-2/share/perl6/sources/51E302443A2C8FF185ABC10CA1E5520EFEE885A1 (NativeCal…»

[04:40] <timeless> m: use NativeCall; sub fork returns int32 is native { * }; sub waitpid(int32, int32 as rw, int32) returns int32 is native { * }; my $x=fork; say "hi" if ($x == 0); if ($x) {my $p; my $z = waitpid($x, $p, 1); say $p; }

[04:40] <camelia> rakudo-moar 87e91c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/QSTvJAtbYd␤Malformed parameter␤at /tmp/QSTvJAtbYd:1␤------> 3s native { * }; sub waitpid(int32, int327⏏5 as rw, int32) returns int32 is native {␤    expecting any of:␤        constraint␤      …»

[04:40] <timeless> m: use NativeCall; sub fork returns int32 is native { * }; sub waitpid(int32, int32 is rw, int32) returns int32 is native { * }; my $x=fork; say "hi" if ($x == 0); if ($x) {my $p; my $z = waitpid($x, $p, 1); say $p; }

[04:40] <camelia> rakudo-moar 87e91c: OUTPUT«hi␤Native call expected argument that references a native integer, but got P6opaque␤  in method CALL-ME at /home/camelia/rakudo-m-inst-2/share/perl6/sources/24DD121B5B4774C04A7084827BFAD92199756E03 (NativeCall) line 303␤  in block <unit> at /tmp/bpt8…»

[04:41] <timeless> m: use NativeCall; sub fork returns int32 is native { * }; sub waitpid(int32, int32 is rw, int32) returns int32 is native { * }; my $x=fork; say "hi" if ($x == 0); if ($x) {my $p=int32.new; my $z = waitpid($x, $p, 1); say $p; }

[04:41] <camelia> rakudo-moar 87e91c: OUTPUT«hi␤Method 'BUILDALLPLAN' not found for invocant of class 'Perl6::Metamodel::NativeHOW'␤  in block <unit> at /tmp/RGOeQIFE3e line 1␤␤»

[04:41] <timeless> ?!

[04:42] <timeless> m: use NativeCall; sub fork returns int32 is native { * }; sub waitpid(int32, int32 is rw, int32) returns int32 is native { * }; my $x=fork; say "hi" if ($x == 0); if ($x) {my int32 $p; my $z = waitpid($x, $p, 1); say $p; }

[04:42] <camelia> rakudo-moar 87e91c: OUTPUT«hi␤0␤»

[04:43] <geekosaur> NativeCall has some weird corner cases as yet; you hit one of them

[04:43] <geekosaur> I think it, or a close relative, is already rakudobug-d

[04:49] <timeless> is this likely close to correct? https://www.irccloud.com/pastebin/z1N7ziCH/htmlify.diff.pl

[04:50] <timeless> ===SORRY!=== Error while compiling /home/timeless/hg/perl6/doc/htmlify.p6

[04:50] <timeless> Only one CATCH block is allowed

[04:50] <timeless> at /home/timeless/hg/perl6/doc/htmlify.p6:50

[04:51] <timeless> ok, so i guess i want try{}

[04:55] <timeless> m: constant $x=3; say $x

[04:55] <camelia> rakudo-moar 87e91c: OUTPUT«3␤»

[04:55] <timeless> m: const $WNOHANG = 1; say $WNOHANG;

[04:55] <camelia> rakudo-moar 87e91c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/NM71BCMKAe␤Variable '$WNOHANG' is not declared␤at /tmp/NM71BCMKAe:1␤------> 3const 7⏏5$WNOHANG = 1; say $WNOHANG;␤»

[04:56] <timeless> ?!

[04:56] <timeless> oh constant!=const

[04:57] <timeless> > This appears to be Perl 5 code

[04:57] <timeless> heh

[04:57] <BenGoldberg> m: use NativeCall; sub fork returns int32 is native { * }; sub waitpid(int32, Pointer[int32], int32) returns int32 is native {*}; my $x = fork; if( $x ) { my Pointer[int32] $p .= new; waitpid( $x, $p, 1 ); say $p } else { say "hi" }

[04:57] <camelia> rakudo-moar 87e91c: OUTPUT«5===SORRY!5===␤Word 'if' interpreted as 'if()' function call; please use whitespace instead of parens␤at /tmp/jq4su7d0QK:1␤------> 3ns int32 is native {*}; my $x = fork; if7⏏5( $x ) { my Pointer[int32] $p .= new; wa␤Unexpected block in in…»

[04:58] <BenGoldberg> m: use NativeCall; sub fork returns int32 is native { * }; sub waitpid(int32, Pointer[int32], int32) returns int32 is native {*}; my $x = fork; if ( $x ) { my Pointer[int32] $p .= new; waitpid( $x, $p, 1 ); say $p } else { say "hi" }

[04:58] <camelia> rakudo-moar 87e91c: OUTPUT«hi␤NativeCall::Types::Pointer[int32]<NULL>␤»

[04:59] *** ufobat joined
[05:03] <timeless> m: use NativeCall;try { sub fork returns int32 is native { * }; CATCH { when X::AdHoc { sub fork() { return -1; } } } }; say fork;

[05:03] <camelia> rakudo-moar 87e91c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/zFh4f1zq2f␤Undeclared routine:␤    fork used at line 1␤␤»

[05:04] *** mohae left
[05:05] <BenGoldberg> m: my $x = 4; say $x.WHERE;

[05:05] <camelia> rakudo-moar 87e91c: OUTPUT«140131859372752␤»

[05:06] <BenGoldberg> m: use NativeCall; sub fork returns int32 is native { * }; sub waitpid(int32, (Pointer), int32) returns int32 is native {*}; my $x = fork; if ( $x ) { my $p = -1; waitpid( $x, $p.WHERE, 1 ); say $p } else { say "hi" }

[05:06] <camelia> rakudo-moar 87e91c: OUTPUT«Potential difficulties:␤    In 'waitpid' routine declaration - Not an accepted NativeCall type for parameter [2]  : Any␤     --> For Numerical type, use the appropriate int32/int64/num64...␤    at /tmp/w8tuB54aXM:1␤    ------> 3ter), int32) return…»

[05:07] <BenGoldberg> m: use NativeCall; sub fork returns int32 is native { * }; sub waitpid(int32, Pointer[int32], int32) returns int32 is native {*}; my $x = fork; if ( $x ) { my $p = 42; waitpid( $x, Pointer[int32].new($p.WHERE), 1 ); say $p } else { say "hi" }

[05:07] <camelia> rakudo-moar 87e91c: OUTPUT«hi␤42␤»

[05:07] *** sno left
[05:08] *** Praise left
[05:20] *** BenGoldberg left
[05:38] *** domidumont joined
[05:38] *** domidumont left
[05:38] *** ssotka joined
[05:38] *** domidumont joined
[05:42] *** cpage_ left
[05:43] *** cpage_ joined
[05:44] *** cpage_ left
[05:46] *** domidumont left
[05:56] *** ssotka left
[05:59] *** domidumont joined
[06:00] *** domidumont left
[06:00] *** domidumont joined
[06:02] *** geraud left
[06:02] *** sno joined
[06:09] *** _mg_ joined
[06:10] *** grondilu left
[06:11] *** grondilu joined
[06:13] *** _mg__ joined
[06:14] *** _mg_ left
[06:14] *** _mg__ is now known as _mg_

[06:26] *** firstdayonthejob joined
[06:36] *** rindolf joined
[06:40] *** rurban joined
[06:40] <masak> good morning, #perl6

[06:40] * masak almost wrote "good Missing or wrong dependency, #perl6", but decided that was too snarky ;)

[06:41] *** firstdayonthejob left
[06:46] *** rindolf left
[06:50] <moritz> I don't think I've got that error in a while

[06:53] *** cpage_ joined
[06:54] *** huggable left
[06:54] *** huggable joined
[06:55] *** wamba joined
[07:01] *** brrt joined
[07:07] *** aries_liuxueyang left
[07:09] *** aries_liuxueyang joined
[07:14] *** xinming left
[07:15] *** darutoko joined
[07:15] *** xinming joined
[07:29] *** bjz joined
[07:30] <masak> moritz: I'm currently getting it dozens of times per day

[07:31] <moritz> huh

[07:31] <moritz> seems I don't use enough Rakudo these days :-)

[07:36] <masak> this is happening when modifying a 12-module project with dependencies between the modules

[07:39] <moritz> seems to warrant a bug report

[07:39] <moritz> is nine++ aware of this?

[07:39] <masak> I've talked to FROGGS about it, and FROGGS++ submitted a bug report

[07:40] <masak> I'm not 100% sure his report has the same root cause as mine, but it seems close enough

[07:41] *** zakharyas joined
[07:45] *** bjz left
[07:52] *** brrt left
[08:00] *** mr-foobar joined
[08:00] *** bjz joined
[08:01] *** ocbtec joined
[08:03] *** rurban1 joined
[08:04] *** rurban left
[08:05] *** RabidGravy joined
[08:09] *** rurban joined
[08:11] *** rurban1 left
[08:13] *** abraxxa joined
[08:23] *** abraxxa left
[08:23] *** abraxxa joined
[08:34] <RabidGravy> hahaha, I've been fretting because this thing for generating SQL was making too many parentheses in comparison to the output SQL::Abstract tests against, all the while not realising that the latter actually parses the output and the expected SQL and compares the AST :-\

[08:40] <RabidGravy> so if someone could come up with an SQL parser that would be great kthx

[08:40] <jnthn> Well, I did a lolsql one a while back, but... :)

[08:48] *** AlexDaniel joined
[08:52] *** zakharyas left
[08:54] *** zakharyas joined
[09:01] *** AlexDaniel left
[09:02] *** mr-foobar left
[09:07] *** rindolf joined
[09:20] <Ulti> can someone who's an admin on reddit maybe deal with the latest post https://www.reddit.com/r/perl6

[09:20] <Ulti> or maybe bump me up so I can deal with it

[09:20] <Ulti> since I'm on there quite a bit

[09:20] *** bjz left
[09:21] *** user9 joined
[09:23] <RabidGravy> not sure if I even have a reddit account

[09:23] <Ulti> not entirely sure why the puppet account wasnt blocked immediately from the first post

[09:24] <Ulti> looks like it was removed though

[09:26] *** rurban1 joined
[09:26] *** rurban left
[09:31] *** zakharyas left
[09:32] *** zakharyas joined
[09:39] <stmuk_> the reddit video doesn't even play!

[09:41] <RabidGravy> probably because the malware payload is only just enough of a video to have the browser think it is a video

[09:45] <psch> looks like it's a thumbnail, actually

[09:47] *** bjz joined
[09:48] <stmuk_> I liked the pocgtfo executable pdfs

[09:51] *** bjz_ joined
[09:52] *** bjz left
[10:01] *** maybekoo2 joined
[10:08] <RabidGravy> so Grammar::BNF can't hack the SQL grammar I can find, I think it's make the dumbest possible grammar that works by hand

[10:08] *** kid51 joined
[10:21] *** rurban joined
[10:24] *** TEttinger left
[10:24] *** jack_rabbit left
[10:24] *** rurban1 left
[10:25] *** rurban1 joined
[10:25] *** mr-foobar joined
[10:26] *** rurban left
[10:31] *** rurban joined
[10:33] *** rurban1 left
[10:34] <RabidGravy> or, even slacker, adjust the expected results to match the expected amount of parenthesizification

[10:35] *** rurban left
[10:36] *** rurban joined
[10:37] *** labster left
[10:37] *** kaare_ joined
[10:40] *** rurban left
[10:40] *** rurban joined
[10:42] *** mr-foobar left
[10:45] *** rurban left
[10:45] *** rurban joined
[10:50] *** perlpilot left
[10:50] *** kent\n left
[10:52] *** perlpilot joined
[10:54] *** TimToady joined
[10:54] *** huggable left
[10:54] *** huggable joined
[10:59] *** donaldh joined
[11:00] *** yqt joined
[11:01] *** Zero_Dogg left
[11:02] *** Zero_Dogg joined
[11:02] *** Zero_Dogg left
[11:02] *** Zero_Dogg joined
[11:02] *** telex left
[11:03] *** telex joined
[11:09] *** kid51 left
[11:11] *** rindolf left
[11:12] *** kid51 joined
[11:12] *** _mg_ left
[11:20] *** tbrowder joined
[11:21] *** AlexDaniel joined
[11:24] *** tbrowder left
[11:26] *** huf joined
[11:27] *** rindolf joined
[11:36] *** rurban1 joined
[11:38] *** rurban left
[11:46] *** kid51 left
[11:48] *** _mg_ joined
[11:49] *** donaldh left
[11:51] *** donaldh joined
[11:59] *** awwaiid joined
[12:04] *** g4 joined
[12:10] <DrForr> I think I've found a way to break lib/.precomp - Are there known bugs?

[12:10] *** Praise joined
[12:10] *** Praise left
[12:10] *** Praise joined
[12:12] <masak> DrForr: yes, I'm getting that one several times daily

[12:12] <masak> DrForr: basically, I change a .pm file in my project, and when I run things again I get "Missing or wrong version of module" and have to nuke lib/.precomp

[12:12] <lizmat> DrForr: if you have a golf on how to do that, please report

[12:12] <masak> FROGGS++ reported something like that

[12:12] <DrForr> Okay, this is different then.

[12:13] <lizmat> output with running RAKUDO_MODULE_DEBUG=1 is helpful  :-)

[12:14] <masak> oh, I will try that next time -- thanks for the tip :)

[12:14] <masak> is RAKUDO_MODULE_DEBUG documented somewhere?

[12:15] <moritz> masak: yes, docs/running.pod

[12:15] <moritz> ... which should be installed as a manpage, but isn't

[12:16] <moritz> and I think we have a bug report for that too

[12:16] *** rurban_ joined
[12:17] <masak> :)

[12:17] <DrForr> I'll have to play here because it's essentially using awwaliid's repl code but breaking the loader somehow.

[12:18] *** setty1 joined
[12:24] <DrForr> I'm going to have to do this later, but it's a little odd.

[12:27] *** skids joined
[12:28] *** g4 left
[12:30] <DrForr> Basically if I have a grammar with a term, the code works. I remove the term from the grammar, and rerun. Now I get 'Could not find symbol '&here'' in the script that loads the grammar. Nothing to do with the script because I can fix it by deleting the .precomp directory.

[12:31] *** mr-foobar joined
[12:31] <masak> yes, that does sound different

[12:31] <masak> please try to golf and submit an RT ticket

[12:31] <DrForr> Will do this weekend.

[12:33] *** Sgeo_ left
[12:34] *** maybekoo2 left
[12:37] *** kurahaupo joined
[12:37] *** brrt joined
[12:42] *** skids left
[12:43] <[Coke]> (can't email a bug to RT) - please let me know if this is still an issue.

[12:44] *** kurahaupo left
[12:48] *** Praise left
[12:50] *** Praise joined
[12:50] *** Praise left
[12:50] *** Praise joined
[12:51] *** abraxxa left
[12:51] <dalek> doc: 9b72be0 | (Zoffix Znet)++ | app.pl:

[12:51] <dalek> doc: Prevent infinite redirect on 404 files

[12:51] <dalek> doc: 

[12:51] <dalek> doc: Related to #576

[12:51] <dalek> doc: review: https://github.com/perl6/doc/commit/9b72be06e6

[13:02] *** cdg joined
[13:11] *** mr-foobar left
[13:15] *** brrt left
[13:16] <dalek> doc: fef2e8e | (Zoffix Znet)++ | app.pl:

[13:16] <dalek> doc: Fix another infinite redirect bug

[13:16] <dalek> doc: review: https://github.com/perl6/doc/commit/fef2e8e522

[13:16] *** avalenn joined
[13:22] *** sufrostico joined
[13:26] * stmuk_ votes "in" to Wombles

[13:35] *** rurban joined
[13:35] *** rurban1 left
[13:47] <dogbert17> o/ #perl6, does anyone want to take a quick look at a doc gist for Baggy.elems here? https://gist.github.com/dogbert17/d6bc80230a7832f50202b76ca7a27c4a

[13:51] *** salv0 joined
[13:52] <AlexDaniel> what is mixhash?

[13:53] <AlexDaniel> what is mix!?

[13:53] <psch> m: my $x = new MixHash: 1, 2, 3; say $x;

[13:53] <camelia> rakudo-moar 9cfcb9: OUTPUT«MixHash.new(3, 1, 2)␤»

[13:53] <psch> m: my $x = new MixHash: 1, 2, 3; say $x.perl

[13:53] <camelia> rakudo-moar 9cfcb9: OUTPUT«(3=>1,1=>1,2=>1).MixHash␤»

[13:53] <dogbert17> AlexDaniel: haven't you read the docs :)

[13:54] <psch> its kinda like a SetHash but with different-than-one for the values i think?

[13:54] <psch> well, "not only 1"*

[13:54] <AlexDaniel> :o

[13:55] <dogbert17> the doc page for Baggy is a bit pathetic atm

[13:56] <AlexDaniel> ok, so *Hash is mutable while just * is immutable

[13:56] <dogbert17> yes

[13:56] <AlexDaniel> why not call it BagMut or something, uh… nevermind

[13:57] <dogbert17> maybe BagWomble

[13:57] <AlexDaniel> then we hav Bag and Mix, and the difference is just that Bag has int weights and Mix has non-int weights

[13:57] <AlexDaniel> have*

[13:58] <psch> m: (new BagHash: a => .5).perl.say

[13:58] <camelia> rakudo-moar 9cfcb9: OUTPUT«().BagHash␤»

[13:58] <psch> m: (new MixHash: a => .5).perl.say

[13:58] <camelia> rakudo-moar 9cfcb9: OUTPUT«().MixHash␤»

[13:58] <psch> m: (new MixHash: 1 => .5).perl.say

[13:58] <camelia> rakudo-moar 9cfcb9: OUTPUT«(1 => 0.5=>1).MixHash␤»

[13:58] <AlexDaniel> what

[13:58] <psch> m: my $x = new MixHash: 5; $x<5> = .5; say $x.perl

[13:58] <camelia> rakudo-moar 9cfcb9: OUTPUT«(5=>1,IntStr.new(5, "5")=>0.5).MixHash␤»

[13:58] <AlexDaniel> m: say ("b" => 9, "b" => 2).Mix.perl;

[13:58] <camelia> rakudo-moar 9cfcb9: OUTPUT«("b"=>11).Mix␤»

[13:59] <psch> m: my $x = new MixHash: 5; $x{5} = .5; say $x.perl # actually...

[13:59] <camelia> rakudo-moar 9cfcb9: OUTPUT«(5=>0.5).MixHash␤»

[13:59] <AlexDaniel> m: say ("b" => 9.5, "b" => 2).Mix.perl;

[13:59] <camelia> rakudo-moar 9cfcb9: OUTPUT«("b"=>11.5).Mix␤»

[13:59] <AlexDaniel> m: say ("b" => 9.5, "b" => 2).Bag.perl;

[13:59] <camelia> rakudo-moar 9cfcb9: OUTPUT«Type check failed in assignment; expected Int but got Rat (9.5)␤  in block <unit> at /tmp/FVTFGKm1gM line 1␤␤»

[13:59] <psch> .new threw me for a loop there

[13:59] <psch> m: (new MixHash: %(1 => .5)).perl.say

[13:59] <camelia> rakudo-moar 9cfcb9: OUTPUT«("1" => 0.5=>1).MixHash␤»

[13:59] <psch> well, not like that either apparently vOv

[14:00] <AlexDaniel> m: my $n = ("b" => 9, "b" => 2).MixHash; say $n.grab

[14:00] <camelia> rakudo-moar 9cfcb9: OUTPUT«.grab is not supported on a MixHash␤  in block <unit> at /tmp/M4HRsHFGcq line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/M4HRsHFGcq line 1␤␤»

[14:01] *** skids joined
[14:05] *** girafe joined
[14:05] *** ptolemarch joined
[14:05] <dalek> doc: 2bd9117 | (Jan-Olof Hendig)++ | doc/Type/Baggy.pod:

[14:05] <dalek> doc: Added docs for Baggy.elems

[14:05] <dalek> doc: review: https://github.com/perl6/doc/commit/2bd9117ee4

[14:15] *** rurban left
[14:20] <AlexDaniel> dogbert17: the graph here is not very promising :) https://github.com/perl6/doc/issues/561

[14:23] *** Praise left
[14:23] *** Praise joined
[14:23] *** Praise left
[14:23] *** Praise joined
[14:27] <dalek> doc: 6f028bd | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Pod/Htmlify.pm6:

[14:27] <dalek> doc: Shorter commit SHA on doc footer

[14:27] <dalek> doc: 

[14:27] <dalek> doc: Fixes #578

[14:27] <dalek> doc: review: https://github.com/perl6/doc/commit/6f028bd32b

[14:33] <[Coke]> what browser are we trying to support by providing png support in addition to svg support on the docs site, OOC?

[14:33] <[Coke]> just wondering if we can remove one of the moving parts.

[14:34] <dalek> doc: ee767e6 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Pod/Htmlify.pm6:

[14:34] <dalek> doc: Shorter date on doc footer

[14:34] <dalek> doc: review: https://github.com/perl6/doc/commit/ee767e6c56

[14:34] <dogbert17> AlexDaniel: indeed, numbers actually got worse after fixing a bunch of 404's

[14:34] <[Coke]> docs - we are inconsistent in adding ␤ in the comment showing what the output of something was.

[14:34] <[Coke]> e.g. :

[14:34] <[Coke]> say 42.WHICH eq 42.WHICH;       # True

[14:34] <[Coke]> vs.

[14:34] <[Coke]> say 42;                 # 42␤

[14:35] <[Coke]> I would recommend just removing ␤ - it's not adding value, IMO

[14:35] <dogbert17> [Coke]: i'm afraid I'm one of the culprits :(

[14:35] <[Coke]> if we do feel it's adding value, write up something and note it in the contributions guidelines.

[14:35] *** _mg_ left
[14:36] *** ZoffixW joined
[14:37] <[Coke]> is it desirable on docs that we have a max column width for the docs?

[14:37] *** rurban joined
[14:37] <ZoffixW> [Coke], pngs can be dropped IMO. They were likely added 'cause IE8 wasn't supporting it, but it's been EOLed by Microsoft since January. Everything else supports it: http://caniuse.com/#feat=svg

[14:37] <dogbert17> [Coke]: I agree, it doesn't add any value IMHO

[14:38] <AlexDaniel> keep PNGs please

[14:38] <[Coke]> AlexDaniel: ok, but why?

[14:39] <ZoffixW> [Coke], [max column] yes, the lines would be a tad too long on my 1440p 27" monitor :P

[14:39] <ZoffixW> But to that point, I noticed on mobile the margins are way too fat.

[14:40] <AlexDaniel> [Coke]: because my text-based browser does not display SVGs

[14:40] <ZoffixW> AlexDaniel, does it display PNGs?

[14:40] <AlexDaniel> ZoffixW: yes

[14:40] <ZoffixW> AlexDaniel, what browser is it?

[14:40] <AlexDaniel> ZoffixW: w3m

[14:40] <AlexDaniel> ZoffixW: you need a terminal with support for images though

[14:41] <ZoffixW> :/

[14:41] <DrForr> Sounds like a cruel way to cheat with aalib+doom :)

[14:41] <AlexDaniel> but even if you don't care about text-based browsers there's still IE 8

[14:42] <DrForr> Oh, that'd be interesting. regular aa text on the back layer and a cropped image of the original Doom app somewhere embedded.

[14:42] <AlexDaniel> don't remove features that are already there

[14:43] <[Coke]> AlexDaniel: no, there is not still IE8. :P

[14:43] <ZoffixW> No, there isn't IE8. We support it neither in our support policy nor should we, because it's no longer secure.

[14:43] <ZoffixW> I have nothing against keeping PNGs for text browsers. I mean, we do have an actual user right here :)

[14:44] <b2gills> .oO( was IE8 ever secure )

[14:44] <[Coke]> if you can't use your text based browser directly for pngs, I'm not sure that counts as a reason, either. if there was a standalone svg file, would that suffice?

[14:45] <AlexDaniel> where does that need to remove pngs comes from again?

[14:45] <AlexDaniel> what are you trying to solve by removing one of the potentially useful features?

[14:46] <b2gills> Does anyone know if it is simple to use only some of the candidates for multi tokens in a grammar?

[14:46] <[Coke]> Because we have limited resources - if we can remove a thing that requires support, it's one less thing for us to deal with

[14:46] <AlexDaniel> how much resources does png generation take?

[14:46] <[Coke]> I am ok with leaving it in, if we have one contributor who needs it for local development. That's fine.

[14:46] <[Coke]> AlexDaniel: dead code is best code

[14:47] <b2gills> removed dead code is best code

[14:47] <[Coke]> It slows down local development.

[14:47] <[Coke]> b2gills: yes, thanks you for clearly up my sloppy sentiment there.

[14:48] *** wamba left
[14:48] <AlexDaniel> [Coke]: OK, if you make these SVGs external then it's probably good enough

[14:49] <AlexDaniel> right now it is inlined, which hurts a lot actually

[14:49] <AlexDaniel> e.g. I can't even zoom it properly in firefox

[14:50] <[Coke]> In general, I like inline (except for Any); having separate .svg external links alongside the .pngs would be a nice to have, aye

[14:50] *** ZoffixW left
[14:51] <b2gills> .oO( r̶e̶m̶o̶v̶e̶d̶ exterminated dead code is the best code ) 

[14:51] *** mohae joined
[14:51] * DrForr waits for the inevitable dalek checkin :)

[14:51] <AlexDaniel> [Coke]: ok, so both shortened commit hash and shortened date are now live

[14:51] *** rurban1 joined
[14:51] <AlexDaniel> [Coke]: any other issues with the footer?

[14:52] *** FROGGS joined
[14:52] *** rurban left
[14:54] *** huggable left
[14:56] <[Coke]> AlexDaniel: Artistic License 2.0 should be a link to same.

[14:57] <[Coke]> copyright should be spelled:

[14:57] <AlexDaniel> [Coke]: well, that's the file to edit :) https://github.com/perl6/doc/blob/147a284c540f2e03e394ae7d14a8d8a61fcf848f/template/footer.html

[14:57] <[Coke]> ©

[14:58] <gregf_> hello

[14:58] <[Coke]> ... Yes, I can make the edits myself, but then why ask?

[14:58] <[Coke]> gregf_: hello

[14:58] <gregf_> role Foo { method should_be_able_to_access_ivars(){ say $!bar; }}; class FooImpl does Foo { has $.bar is rw;  } <== should this not work?

[14:58] <[Coke]> Thanks for fixing the ones I opened tickets for.

[14:58] <AlexDaniel> [Coke]: thought that there would be something slightly more complicated

[14:58] <[Coke]> m: role Foo { method should_be_able_to_access_ivars(){ say $!bar; }}; class FooImpl does Foo { has $.bar is rw;  }

[14:58] <camelia> rakudo-moar 9cfcb9: OUTPUT«5===SORRY!5=== Error while compiling /tmp/i9VUPXVzJO␤Attribute $!bar not declared in role Foo␤at /tmp/i9VUPXVzJO:1␤------> 3be_able_to_access_ivars(){ say $!bar; }}7⏏5; class FooImpl does Foo { has $.bar is ␤    expecting any of:␤      …»

[14:58] <psch> m: role Foo { method should_be_able_to_access_ivars(){ say $!bar; }}; class FooImpl does Foo { has $.bar is rw;  }

[14:58] <camelia> rakudo-moar 9cfcb9: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Pgx3D7sJoV␤Attribute $!bar not declared in role Foo␤at /tmp/Pgx3D7sJoV:1␤------> 3be_able_to_access_ivars(){ say $!bar; }}7⏏5; class FooImpl does Foo { has $.bar is ␤    expecting any of:␤      …»

[14:58] <psch> argh

[14:58] <[Coke]> heh

[14:59] <psch> m: role Foo { method should_be_able_to_access_ivars(){ say $.bar; }}; class FooImpl does Foo { has $.bar is rw;  }

[14:59] <camelia> rakudo-moar 9cfcb9: ( no output )

[14:59] <psch> didn't mean to copy the \n, but apparently did..? vOv

[14:59] <[Coke]> the role has to compile by itself first, so that seems correct

[14:59] <psch> gregf_: the ! twigil means the Attribute.  the . twigil means the (potentially auto-generated) accessor

[14:59] <gregf_> m: role Foo { method should_be_able_to_access_ivars(){ say $.bar; }}; class FooImpl does Foo { has $.bar is rw;  }; Foo.new(:bar(100)).should_be_able_to_access_ivars()

[14:59] <camelia> rakudo-moar 9cfcb9: OUTPUT«Method 'bar' not found for invocant of class 'Foo'␤  in method should_be_able_to_access_ivars at /tmp/N9TQv_Q1d7 line 1␤  in block <unit> at /tmp/N9TQv_Q1d7 line 1␤␤»

[15:00] <gregf_> psch: ah - i see

[15:00] <gregf_> wow, such subtle differences :)

[15:00] <psch> yeah, it compiles but still doesn't find the method

[15:01] <psch> m: role R { method bar { $.b } }; class C does R { has $.b is rw }; C.new(:2b).bar.say

[15:01] <camelia> rakudo-moar 9cfcb9: OUTPUT«2␤»

[15:01] <gregf_> correct, but it should i guess ?

[15:01] <psch> well, i can't see through your long names :P

[15:01] <gregf_> heh

[15:02] <gregf_> *just so that im clear in making my point* :)

[15:02] <psch> gregf_: oh, you instantiated Foo, not FooImpl

[15:02] <gregf_> ah - good catch

[15:03] <gregf_> oh so :b(100) and :100b are the same

[15:03] <gregf_> o_O

[15:03] <psch> gregf_: well, it's neat for e.g. s///

[15:03] <psch> m: $_ = "foo"; s:2nd/o/u/; .say

[15:03] <camelia> rakudo-moar 9cfcb9: OUTPUT«fou␤»

[15:04] <gregf_> my, that took me a while to figure out :)

[15:04] <psch> m: Date.today.later(:2days) 

[15:04] <camelia> rakudo-moar 9cfcb9: ( no output )

[15:04] <psch> m: Date.today.later(:2days).say 

[15:04] <camelia> rakudo-moar 9cfcb9: OUTPUT«2016-06-12␤»

[15:04] <psch> or that

[15:05] <gregf_> m: say CORE::.keys.grep(/nd/)

[15:05] <camelia> rakudo-moar 9cfcb9: OUTPUT«(&append &prepend &infix:<notandthen> &rindex &indir &rand &indices IterationEnd &trait_mod:<handles> &infix:<and> PositionalBindFailover &METAOP_TEST_ASSIGN:<andthen> &roundrobin &index &infix:<andthen> &undefine &find-reducer-for-op &srand &round &end Se…»

[15:05] <psch> m: say later Date.today : :2days : # heh

[15:05] <camelia> rakudo-moar 9cfcb9: OUTPUT«2016-06-12␤»

[15:06] <gregf_> psch++

[15:06] <gregf_> [Coke]++

[15:08] *** zakharyas left
[15:09] <gregf_> m: $_ = "foofoo"; s:5th/o/u/; .say

[15:09] <camelia> rakudo-moar 9cfcb9: OUTPUT«foofoo␤»

[15:09] <psch> m: $_ = "foofoo"; s:3th/o/u/; .say

[15:09] <camelia> rakudo-moar 9cfcb9: OUTPUT«foofuo␤»

[15:09] <psch> m: $_ = "foofoo"; s:2x/o/u/; .say

[15:09] <camelia> rakudo-moar 9cfcb9: OUTPUT«fuufoo␤»

[15:10] *** zakharyas joined
[15:10] <psch> gregf_: see http://doc.perl6.org/routine/subst

[15:10] <psch> (although apparently :$st, :$nd, and :$rd are undocumented)

[15:10] *** bbkr joined
[15:10] *** Zero_Dogg left
[15:10] <gregf_> oh, thats just sugar for subst?

[15:11] <psch> well, actually s/// is subst-rw, and S/// is subst iirc

[15:11] *** Zero_Dogg joined
[15:11] <gregf_> rw as in it modifies the string?

[15:11] <bbkr> hi. any idea why successful test suite is treated by Travis-CI as failed? https://travis-ci.org/bbkr/GeoIPerl6/builds/99810697 

[15:12] <gregf_> anyways psch++

[15:12] <psch> bbkr: i see "Failed tests:  2-3" and "Done. Your build exited with 1.", which seems to indicate failure..?

[15:12] <[Coke]> bbkr: it's not successful? you failed 2 subtests?

[15:13] <psch> as for what failed: floating pointyness, i'd guess from a distance

[15:14] <bbkr> damn, I see two different results on two different browsers. something is messed with session probably :)

[15:16] <bbkr> http://bbkr.org/travisvci.png

[15:16] <FROGGS> o/

[15:17] <psch> o/ FROGGS 

[15:18] *** bbkr left
[15:18] <timeless> did BenGoldberg find a version of use Nativall ... sub waitpid that worked?

[15:19] <timeless> m: use NativeCall; sub fork returns int32 is native { * }; sub waitpid(int32, Pointer[int32], int32) returns int32 is native {*}; my $x = fork; if ( $x ) { my $p = 42; waitpid( $x, Pointer[int32].new($p.WHERE), 1 ); say $p } else { say "hi" }

[15:19] <camelia> rakudo-moar 9cfcb9: OUTPUT«hi␤42␤»

[15:20] <timeless> this doesn't look like what we're expecting

[15:20] <timeless> m: use NativeCall; sub fork returns int32 is native { * }; sub waitpid(int32, int32 is rw, int32) returns int32 is native { * }; my $x=fork; say "hi" if ($x == 0); if ($x) {my int32 $p; my $z = waitpid($x, $p, 1); say $p; }

[15:21] <camelia> rakudo-moar 9cfcb9: OUTPUT«hi␤0␤»

[15:21] * timeless hopes that "is" the correct answer, but isn't really sure how to figure it out

[15:22] <timeless> actually, i think what i really want to know is how to properly use `try` to conditionally define something :/

[15:24] <psch> m: my $x = do { try "foo" + 2 } // 10; say $x; $x = do { try "2" + 2 } // 10; say $x

[15:24] <camelia> rakudo-moar 9cfcb9: OUTPUT«10␤4␤»

[15:24] <psch> timeless: ^^^ like that maybe?

[15:24] *** mst is now known as {[{[{[{[

[15:24] *** {[{[{[{[ is now known as mst

[15:25] *** _mg_ joined
[15:25] <[Coke]> http://docs.perl6.org/language/traps has several perl 5 specific traps that should be in 5-6 instead.

[15:25] <timeless> try {  sub waitpid(int32, int32 is rw, int32) returns int32 is native { * }; CATCH { when X::AdHoc { sub waitpid() { return -1; }}} $waitpid = waitpid;

[15:25] <timeless> psch: something like this ^ (which doesn't work at all)

[15:26] <b2gills> (10:27:28 AM) b2gills: m: use NativeCall; sub fork returns int32 is native { * }; sub waitpid(int32, int32 is rw, int32) returns int32 is native {*}; if fork() -> $x { my int32 $p = 42; waitpid( $x, $p, 0 ); say $p } else { say "hi"; exit 0 }

[15:26] <b2gills> (10:27:28 AM) b2gills: m: use NativeCall; sub fork returns int32 is native { * }; sub waitpid(int32, int32 is rw, int32) returns int32 is native {*}; if fork() -> $x { my int32 $p = 42; waitpid( $x, $p, 0 ); say $p } else { say "hi"; exit 1 }

[15:27] <b2gills> m: use NativeCall; sub fork returns int32 is native { * }; sub waitpid(int32, int32 is rw, int32) returns int32 is native {*}; if fork() -> $x { my int32 $p = 42; waitpid( $x, $p, 0 ); say $p } else { say "hi"; exit 0 }

[15:27] <b2gills> m: use NativeCall; sub fork returns int32 is native { * }; sub waitpid(int32, int32 is rw, int32) returns int32 is native {*}; if fork() -> $x { my int32 $p = 42; waitpid( $x, $p, 0 ); say $p } else { say "hi"; exit 1 }

[15:27] <camelia> rakudo-moar 9cfcb9: OUTPUT«hi␤0␤»

[15:27] <camelia> rakudo-moar 9cfcb9: OUTPUT«hi␤256␤»

[15:27] <timeless> oh, right, exit, thanks b2gills 

[15:27] <psch> timeless: yeah, that can't work because the sub declaration is compile time, and try only helps at runtime

[15:27] <timeless> ok, so, that side's settled, 

[15:28] <psch> m: use NativeCall; my &waitpid = do { try sub (int32, int32 is rw, int32 --> int32) is native { * } } // sub { return -1 }; say waitpid

[15:28] <camelia> rakudo-moar 9cfcb9: OUTPUT«-1␤»

[15:28] *** rurban1 left
[15:28] <psch> i guess NC subs don't like the in-Signature return type..?

[15:28] <psch> m: use NativeCall; my &waitpid = do { try sub (int32, int32 is rw, int32) returns int32 is native { * } } // sub { return -1 }; say waitpid

[15:28] <camelia> rakudo-moar 9cfcb9: OUTPUT«-1␤»

[15:29] <psch> well, that's how i'd do it if you want a Callable in the current scope

[15:29] <psch> i *think* you can export that too, but i'm not sure

[15:30] <timeless> export?

[15:30] <psch> nah, can't

[15:30] <psch> m: module Foo { my &foo is export = sub { 1 } }; import Foo; foo.say

[15:30] <camelia> rakudo-moar 9cfcb9: OUTPUT«5===SORRY!5=== Error while compiling /tmp/UzNxnW87OW␤Can't apply trait 'is export' on a my scoped variable. Only our scoped variables are supported.␤at /tmp/UzNxnW87OW:1␤------> 3module Foo { my &foo is export7⏏5 = sub { 1 } }; import Foo; f…»

[15:30] <timotimo> well, yeah, it has to be "our" i suppose?

[15:30] <psch> oh, maybe read those helpful error messages... :)

[15:30] <psch> m: module Foo { our &foo is export = sub { 1 } }; import Foo; foo.say

[15:30] <camelia> rakudo-moar 9cfcb9: OUTPUT«1␤»

[15:30] <timeless> timotimo: `Only our` would be better as `Only 'our' ..`

[15:30] <timeless> the word `our` alone looks like "English"

[15:31] <timeless> whereas you are trying to tell the reader it's perl6

[15:31] <mst> use whatever the pod6 equivalent is to C<our> ?

[15:31] <[Coke]> our-scoped

[15:31] <timotimo> :)

[15:32] <timeless> [Coke]: i guess? any of these would be an improvement

[15:32] *** ufobat left
[15:32] <timotimo> i did put it into quotation marks

[15:32] <timotimo> oh!

[15:32] <timotimo> now i see what you mean

[15:32] <[Coke]> 'our' is probably better, as suggested by timeless. (since we have 'is export' just prior)

[15:33] <timeless> [Coke]: sold, can you make it so? :)

[15:33] <psch> probably same for the "my scoped" bit before

[15:33] <b2gills> don't forget to change the 'my' too

[15:33] <timeless> probably on a `'my' scoped`too

[15:33] <psch> heh

[15:33] * timeless rotfl

[15:33] <b2gills> jinx

[15:33] <timeless> thanks, my stomach-core muscles needed that exercise/laugh :-)

[15:34] <[Coke]> timeless: won't be able to get to it soon, no; please open a ticket.

[15:34] <[Coke]> [LTA] error..

[15:35] * timeless needs to check to see if LTA is in the glossary (i know someone mentioned it was in S99)

[15:35] <timeless> (it should be, since i tried to make the glossary cover S99...)

[15:35] <[Coke]> http://docs.perl6.org/language/glossary#LTA

[15:37] <timeless> TIL when w10 is in the "please select a window to fill this space" mode, ctrl-w will close the currently selected window

[15:37] <timeless> (that's a pretty neat piece of sugar, too bad, it closed this window...)

[15:39] *** setty1 left
[15:40] <timeless> psch: so, i don't /think/ i need export here

[15:40] <timeless> and perhaps i don't even need the catch, is the try{} enough?

[15:41] <timeless> i just need to either get a callable or define my own replacement (which i could probably give a different name temporarily or stick into an EVAL)

[15:42] <timeless> m: use NativeCall; my &waitpid = do { try sub (int32, int32 is rw, int32) returns int32 is native { * } } // sub { return -2 }; say waitpid

[15:42] <camelia> rakudo-moar 9cfcb9: OUTPUT«-2␤»

[15:42] *** ssotka joined
[15:42] <timeless> um, ok, what magic is `//`?

[15:43] <timeless> also, is there a perl6doc?

[15:43] <timeless> http://localhost:3000/routine///.html.html.html.html.html.html.html.html.html.html.html.html.html.html.html.html.html.html.html.html.html

[15:43] <timeless> gee, that's a very helpful url

[15:44] <psch> m: say True // 1, False // 2, Nil // 3

[15:44] <camelia> rakudo-moar 9cfcb9: OUTPUT«TrueFalse3␤»

[15:44] <timeless> http://doc.perl6.org/routine/%2F%2F

[15:44] <psch> timeless: infix:<//>($a, $b) is pretty much '$a.defined ?? $a !! $b'

[15:46] *** khw joined
[15:46] <psch> and yes, that broken link is ticketed, i'm pretty sure

[15:46] <psch> ISTR that there's some apache directive to fix that, but i don't know if doc.perl6.org even runs on apache vOv

[15:50] * timeless files a ticket

[15:50] <timeless> [Coke]: sorry, GitHub is a lot easier to use than RT

[15:50] <psch> timeless: https://github.com/perl6/doc/issues/155

[15:51] <[Coke]> timeless: the app runner isn't intended to be a fully functional website, btw.

[15:51] <timeless> [Coke]: sure

[15:52] <[Coke]> so those are just nice to have. (if it happens on the prod site, sure)

[15:52] <timeless> but you can't honestly expect a drive by contributor to set up a fully functional website just to test fixes

[15:53] <[Coke]> .. no. but I don't expect you to hammer on the not-for-production thing when that's not what you're trying to fix.

[15:53] <[Coke]> Like I said, feel free to report 'em, but those are super low priority

[15:53] <[Coke]> just setting expectation levels.

[15:53] * timeless nods

[15:54] <timeless> from my perspective, if i report something that's low priority, i don't expect a fix

[15:54] <timeless> but if i provide a fix, i kinda expect someone to seriously consider taking it

[15:54] <timeless> and as a drive-by contributor, i expect not to be forced to rewrite it 100 times

[15:54] <[Coke]> Sure

[15:54] <timeless> :-)

[15:54] <[Coke]> Has that happened to you here?

[15:55] <timeless> https://github.com/perl6/doc/pull/576 was pretty close

[15:55] * timeless still can't reopen

[15:55] *** maybekoo2 joined
[15:56] <timeless> and yes, i /think/ zoffixznet fixed it, although I couldn't figure out what his changeset did

[15:56] <timeless> (this is where if i had written that code and showed it to someone, they'd complain that it was undocumented-unreadable-perl)

[15:56] * timeless has lots of such code

[15:57] <timeless> anyway, i need to update and see how it works

[15:58] *** zakharyas left
[15:58] *** ZoffixW joined
[15:59] <ZoffixW> timeless, there was a mess with redirects and I tossed them and made the app serve static files instead of redirecting to them for the Static handler to catch them.

[15:59] * timeless slowly tries to parse that

[16:00] <ZoffixW> timeless, as for why I closed that PR is because I didn't know you were trying to fix the .html.html.html stuff. I thought you were just trying to avoid the extra HTTP request generated by the redirect.

[16:00] <timeless> yeah, i don't blame you, i should have explained

[16:00] <timeless> but, over-eagerly-closing isn't helpful

[16:00] <RabidGravy> as a matter of interest how much effort would be involved in knocking up a docker/vagrant/whatever the fashionable thing for containerisation is today to mo mimic the docs server set-up?

[16:00] <timeless> you could ask first and give it a bit before closing instead of closing at the same time

[16:00] <psch> timeless: i hope closing dupes is fine with you :)

[16:01] <timeless> psch: that i appreciate

[16:01] <timeless> I also appreciated ZoffixW 's link to his fix

[16:01] <timeless> even though i still don't understand it

[16:01] <ZoffixW> timeless, oh, my bad. I didn't realized closed PRs don't have a reopen button :S

[16:01] <timeless> ZoffixW: fwiw, i still can't parse/digest your explanation here

[16:01] <timeless> ZoffixW: i'm not sure

[16:01] <timeless> it's possible only members or something can

[16:02] <RabidGravy> so are all the types in the core setting documented yet?

[16:02] <timeless> i've certainly had the button in other contexts

[16:02] <psch> ZoffixW: i think the PR-opener can only reopen if they closed themselves

[16:02] <timeless> RabidGravy: NaN isn't iirc

[16:02] <ZoffixW> Ah

[16:02] <timeless> i have a thing for it

[16:02] <timeless> also, Order is in a phantom zone (i have a patch for that too)

[16:02] <psch> timeless++ # docs

[16:02] <timeless> ZoffixW: do you want one pr per thing, or a chain where you have to selectively something?

[16:03] <timeless> my tree is getting messy, and i'm only working on ~10 thins

[16:03] * timeless can easily end up working on ~100

[16:03] * timeless is currently an hg refugee

[16:03] <timeless> (my hg  hg repo  has too many WIPs not making progress)

[16:04] <ZoffixW> timeless, I'm not the Ultimate Ruler of PRs, but in my own projects I expect a PR to include just one thing. It can be multiple commits but they should be related to each other in the goal they're trying to achieve

[16:04] <timeless> anyway, while those q's are on the table, i need to figure out how to get waitpid to work

[16:04] <timeless> ZoffixW: so, the problem i have w/ that model, is that if i'm making 100 improvements

[16:04] <timeless> i don't want the overhead of 100 pr's

[16:04] <ZoffixW> Sure.

[16:05] <ZoffixW> timeless, I guess do what you think is best :)

[16:05] <timeless> (there isn't a good model that handles these cases, so, i'm not blaming you/anyone else for not having a good answer)

[16:05] <psch> well, in the docs space i can see "document @a-bunch-of-types" as "one thing", fwiw

[16:05] <timeless> psch: yeah, the problem is that it easily becomes "i like 3/4 or 15/21"

[16:05] <psch> but "document @a-bunch-of-types, improve 'make run' handling, $something-else" isn't one thing

[16:06] <timeless> i hope i didn't include make-run in the document pr's

[16:06] <timeless> (it's possible, but i do /try/ to split on category)

[16:06] <psch> timeless: i don't know, it was just an example at the top of my head :)

[16:06] *** donaldh left
[16:06] <psch> in any case, nobody's gonna tear into anyone for making a mistake in a PR

[16:06] *** domidumont left
[16:06] <ZoffixW> timeless, as for the fix: first the Static file handler tries to find the file, if it doesn't it goes route matching. We used to have three routes that changed the URL and sent an HTTP redirect, restarting the process. So if Static didn't find, say foo.html, It'd reach the route, append another .html and restart the process, throwing the whole thing in a loop. With my change, when Static fails to find the file, I modify the URL and tell Static to ser

[16:06] <ZoffixW> ve it. And if that file isn't there you get a 404 instead of that redirect loop.

[16:06] <psch> i know, cause i did lots of mistake when i still had to PR :P

[16:07] <timeless> ZoffixW: ok, thanks for the explanation

[16:07] <psch> (well, also afterwards, but those were also largely free of being torn into :) )

[16:07] <psch> s/largely/completely/ # i suppose

[16:08] <psch> at worst it was "isn't that wrong?  can you fix it?" iirc

[16:08] *** rurban_ left
[16:09] <perlpilot> psch: we're saving it up for that one time where the mistake is so big that we need to remind you of all of the little mistakes you've made over the years ;)

[16:09] <yoleaux> 9 Jun 2016 21:12Z <AlexDaniel> perlpilot: right now it does not handle gists and the way it handles long-running programs is non-ideal. But you can send your stuff to me and I'll run it in the terminal

[16:10] <timeless> here's my current repo https://www.irccloud.com/pastebin/Z1NztIr1/

[16:10] <timeless> mst: was i supposed to remind you to  look at something? :)

[16:11] <psch> perlpilot: please no :/

[16:11] <timeless> if not, then i should probably start using yoleaux for reminding, because my memory sucks :)

[16:11] <mst> oh, yeah, the design.perl6.org

[16:12] <timeless> it's a good thing your memory is better than mine

[16:12] <mst> anybody know which repo that's built from?

[16:12] <ZoffixW> And the // and the rest of the ilk need a more serious fix. The apache directive would only solve those links that actually have files generated, but begin with a dot. The // doesn't even have a file. I

[16:12] <psch> perlpilot: but i guess that proves my point, anyway.  it still remains friendly, even with eager but only barely competent devs like me :)

[16:12] <ZoffixW> I'm still leaning for making that into slash-slash.html and basically changing all iffy punctuation into words

[16:12] <perlpilot> mst: it doesn't say on the page somewhere?

[16:12] <mst> timeless: remembering the thing isn't my problem. remembering to remember the thing while in front of a computer is my problem.

[16:12] <timeless> mst: default = git://github.com/perl6/specs ?

[16:13] <mst> aha

[16:13] <mst> ta

[16:13] <ZoffixW> Yes, that's the repo and there's a script in Mu that runs the update: https://github.com/perl6/mu/blob/master/util/update-design.perl6.org.sh

[16:13] <ZoffixW> Keep in mind: perl.css is used on multiple websites

[16:14] * ZoffixW learned that the hard way :)

[16:14] <timeless> heh

[16:14] <timeless> ZoffixW: did you add a comment to perl.css to help the next poor soul?

[16:14] <timeless> ZoffixW: i favor slash-slash and similar

[16:15] <timeless> it makes google searches much more practical

[16:15] <timeless> ... unfortunately, a tiny spider just crawled into my keyboard

[16:15] <dalek> specs: 55ef20a | (Zoffix Znet)++ | html/perl.css:

[16:15] <dalek> specs: Add a note about used on multiple sites.

[16:15] <dalek> specs: review: https://github.com/perl6/specs/commit/55ef20a63b

[16:15] * timeless is outside

[16:16] <ZoffixW> There is now :)

[16:16] <timeless> bonus points for considering listing the actual sites...

[16:16] <timeless> i know i'm greedy

[16:16] <timeless> .*

[16:16] <timotimo> really? .perl.org?

[16:16] <timotimo> not just .perl6.org?

[16:17] <timeless> but, i'm the kind of person likely to change such a file

[16:17] * timeless is likely to do just about anything

[16:17] <timeless> oh well, i think the tiny spider will probably live/die in this keyboard

[16:17] <dalek> specs: f9061b3 | (Zoffix Znet)++ | html/perl.css:

[16:17] <dalek> specs: Clarify note

[16:17] <dalek> specs: review: https://github.com/perl6/specs/commit/f9061b3ee7

[16:17] <ZoffixW> Nah, it was just a typo :)

[16:18] <timeless> arg, why do i keep missing phone calls?

[16:18] <ZoffixW> Because it's 2016 and no one uses "phone calls" anymore? :)

[16:21] <ZoffixW> Heh, the Womble thing is now at 8 contributors :)

[16:21] *** donaldh joined
[16:21] <ZoffixW> *participants

[16:21] <psch> but what *color* should the womble be?

[16:21] <RabidGravy> Underground, overground, wombling free

[16:22] <ZoffixW> psch, that's the real question!

[16:22] <RabidGravy> well they're mostly a sort of mousey brown colour, but there's one ginger one IIRC

[16:24] <stmuk_> there are at least two North American Wombles - one of which is Canadian according to http://www.tidybag.uk/information/whos-who-in-the-wombles/

[16:25] <RabidGravy> I think we should branch out to tellytubbies however, it's incontrovertible which colours they are

[16:28] *** ZoffixW left
[16:29] *** sno left
[16:30] *** domidumont joined
[16:31] *** raiph left
[16:34] *** beatdown is now known as mosh

[16:34] *** mosh left
[16:34] *** mosh joined
[16:35] <mst> oh, excellent, it's mostly pod except the pod6 bits

[16:37] <arnsholt> Assuming you mean the specs/synopses/whateverthey'recalledthesedays, yeah I believe that was a concious decision precisely to make them renderable

[16:40] <Xliff> Here's a question. If I am trying to pull a version constant from a c-lib, how would I do that with NativeCall?

[16:40] <Xliff> Of course, full disclosure -- I don't see the symbol name I'm expecting via readelf

[16:40] <timeless> i'm not sure those are generally there

[16:40] <Xliff> I was afraid of that.

[16:40] <timotimo> how is it defined?

[16:40] <Xliff> Via #define

[16:41] <timotimo> yeah, those don't show up by themselves

[16:41] <timeless> definitely not available

[16:41] <Xliff> :S

[16:41] <timotimo> i.e. they disappear before the compiler gets to the file

[16:41] <timeless> it would have to be `int x=...`

[16:41] <timotimo> if you don't have the header that goes with it, you're basically SOL

[16:41] <Xliff> Yeah. The header is available, tho.

[16:41] <timotimo> and of course you can use a header that has a different version definition than the one your .so file was compiled with, and you wouldn't notice.

[16:41] <Xliff> Right.

[16:42] <Xliff> Well that sucks.

[16:42] <timotimo> if your library doesn't have a "get the version we've linked against" function ... too bad

[16:42] <Xliff> Ooh! Will check. Thanks.

[16:43] <dalek> doc: f0d7c81 | (Aleks-Daniel Jakimenko-Aleksejev)++ | template/footer.html:

[16:43] <dalek> doc: Add © symbol to the copyright notice

[16:43] <dalek> doc: 

[16:43] <dalek> doc: Fixes #581

[16:43] <dalek> doc: review: https://github.com/perl6/doc/commit/f0d7c81c27

[16:43] *** _mg_ left
[16:45] <[Coke]> Regarding the double <a><a>'s in the htmlify'd pod for docs - I golfed down the generated Pod:: object to a snippet that shows the double linking. Hopefully this can help someone trim up the pod we're generating to avoid the duplicative link, or fix a bug in Pod::To::HTML (if that's where the issue lies): https://gist.github.com/coke/bae3843be55930da3fe29adba3afbb5e

[16:45] <Xliff> Shucks! Doesn't.

[16:46] * [Coke] wonders if the word copyright should be capitalized.

[16:46] <[Coke]> (when used in a copyright message)

[16:49] <Xliff> OK. How do you properly capitalize that?

[16:49] <Xliff> Google says just "Copyright" and not "CopyRight"

[16:49] <timotimo> yeah

[16:49] <Xliff> Of course, I could be riding too many camels.

[16:50] <timotimo> maybe with small capitals :P

[16:51] <dalek> doc: e8811b5 | (Aleks-Daniel Jakimenko-Aleksejev)++ | template/footer.html:

[16:51] <dalek> doc: License notice should link to the actual license text

[16:51] <dalek> doc: 

[16:51] <dalek> doc: Fixes #580

[16:51] <dalek> doc: review: https://github.com/perl6/doc/commit/e8811b5fd4

[16:51] <ugexe> m: class Foo { has %!bar; method baz { %!bar //= :a(1), :b(2); }; }; say Foo.new.baz # tricked me

[16:51] <camelia> rakudo-moar 9cfcb9: OUTPUT«({} b => 2)␤»

[16:52] *** rurban joined
[16:52] <AlexDaniel> [Coke]: perhaps add a link to your gist here https://github.com/perl6/doc/issues/561

[16:52] <ugexe> m: class Foo { has %!bar; method baz { %!bar = :a(1), :b(2); }; }; say Foo.new.baz

[16:52] <camelia> rakudo-moar 9cfcb9: OUTPUT«{a => 1, b => 2}␤»

[16:53] <psch> m: class Foo { has %!bar; method baz { %!bar //= %(:a(1), :b(2)); }; }; say Foo.new.baz 

[16:53] <camelia> rakudo-moar 9cfcb9: OUTPUT«{}␤»

[16:53] <psch> m: say % // "foo"

[16:53] <camelia> rakudo-moar 9cfcb9: OUTPUT«{}␤»

[16:53] *** rurban_ joined
[16:54] <ugexe> right, but its a trick in that you could look at it and think it should work, especially given the second example

[16:56] <psch> yeah, looks pretty much like a trap to me

[16:56] *** Sound joined
[16:57] <[Coke]> AlexDaniel: my golf may have been too extreme. :|

[16:57] <AlexDaniel> omg this womble discussion…

[16:58] <AlexDaniel> I want to nuke the whole issue to prevent further bikeshedding, but people are making some good points…

[16:58] <AlexDaniel> /o\

[16:58] *** mr-foobar joined
[16:58] *** kurahaupo joined
[16:59] <[Coke]> opened https://github.com/perl6/doc/issues/584, subset of 561

[16:59] <Xliff> .tell FROGGS Ran into an issue with pointers vs references in one of the tests for XML::LibXML. Let me know when you have some time to chat.

[16:59] <yoleaux> Xliff: I'll pass your message to FROGGS.

[17:00] <[Coke]> (to give us something smaller and actionable)

[17:00] <AlexDaniel> [Coke]: ah, good!

[17:00] *** Sound left
[17:00] <AlexDaniel> [Coke]++

[17:02] <FROGGS> Xliff: is there a small piece of code that triggers it?

[17:02] <yoleaux> 16:59Z <Xliff> FROGGS: Ran into an issue with pointers vs references in one of the tests for XML::LibXML. Let me know when you have some time to chat.

[17:02] *** maddingue joined
[17:03] *** TreyHarr1 joined
[17:05] *** firstdayonthejob joined
[17:06] *** TreyHarris left
[17:07] <Xliff> FROGGS: Yeah. I'll gist it up later tonight. 

[17:07] *** rurban left
[17:08] <timeless> [Coke]: thank for the doubled thing

[17:08] <timeless> there were a couple of things the w3 link checker screamed about

[17:08] * timeless should dump its output somewhere

[17:09] <timeless> doc.perl6.org link checker report https://www.irccloud.com/pastebin/kKy7oBRG/

[17:10] <timeless> the issue to replace tokens [.?/] with words would fix a bunch

[17:10] <AlexDaniel> timeless: yeah. Yeah. Yeah.

[17:10] *** ZoffixW joined
[17:10] <timeless> also, at some point we (hey, i'm using we) need to standardize on `.html` or not

[17:11] <timeless> the fact that the htmlify script generates both forms is annoying

[17:11] * timeless hasn't spent the time figuring that out

[17:11] <ZoffixW> timeless, is that a motion to volunteer fixing it? :) I think it was pointed out as a problem even before last Christmas but the issue was drowned in bikeshedding I think and no one is yet to fix it.

[17:11] <timeless> ZoffixW: it's half a motion to

[17:11] <ZoffixW> AlexDaniel, I'm laughing at the Womble issue :) But mostly because Womble is a funny word :D

[17:11] <timeless> i'm pretty sure i could do it

[17:11] <ZoffixW> timeless++

[17:12] <timeless> it's a pretty easy map in htmlify

[17:12] <timeless> also [#]

[17:12] <ZoffixW> Sweet. Do it.

[17:12] <timeless> i'm not sure about [$]

[17:12] <AlexDaniel> do what? Change these symbols into words?

[17:12] <timeless> yeah

[17:12] <timeless> n.b. not today -- i need to go north to get my gf and drive her here for the weekend

[17:12] <ZoffixW> AlexDaniel, yes, so, say, docs.perl6.org/routine/// would be docs.perl6.org/routine/slash-slash

[17:12] <timeless> this weeken's a holiday

[17:12] <ZoffixW> And actually work as a URL

[17:12] <timeless> so i'm gone until monday (some wouldn't return until tuesday)

[17:13] <AlexDaniel> in #155 I recommended to use http://www.muppetlabs.com/~breadbox/intercal-man/tonsila.html

[17:13] <timeless> and i'm traveling for an interview thursday

[17:13] <AlexDaniel> that would be routine/mesh-mesh

[17:13] <timeless> so i /might/ be able to look M/T, but otherwise possibly until +2w

[17:14] <ZoffixW> /slat-slat

[17:14] <AlexDaniel> ah, oops

[17:14] <timeless> AlexDaniel: `half-mesh` bothers me

[17:14] <AlexDaniel> yea, slat-slat

[17:14] <timeless> a *lot*

[17:14] <[Coke]> updated https://github.com/perl6/doc/issues/584 with a slightly better snippet of Perl6 code demonstrating the problem. might be a P2H bug.

[17:14] <timeless> double-oh-seven also bothers me

[17:14] <ZoffixW> My issue with that is I know a '/' is a slash, so I can type the URL by hand, but now I'd have to learn that whole table.

[17:14] <AlexDaniel> timeless: bothers you in what sense? It is funny

[17:14] <timeless> in fact, anything w/ `-`s in it will make doubled words painful

[17:14] <ZoffixW> OTOH that's really more bikeshedding and we need to fix it at least with *something*

[17:14] <timeless> AlexDaniel: double-oh-seven-double-oh-seven

[17:15] <timeless> how does one parse that?

[17:15] <timeless> percent-percent is parsable

[17:15] <timeless> also, `right angle` isn't doing anyone any favors

[17:15] <timeless> since space has another use

[17:15] <AlexDaniel> use rightangle instead

[17:16] <timeless> personally, going back to another discussion, i'd favor en-us terms over odd ones

[17:17] <AlexDaniel> I'm not going to insist that we must use intercal terminology

[17:17] <AlexDaniel> but it is much funnier than wombles

[17:17] <timeless> heh

[17:17] <ZoffixW> mst, what was the stupid thing you wanted to ask me? It now bothers me that I don't know. RE https://twitter.com/shadowcat_mst/status/739905843941015556

[17:18] <ZoffixW> stmuk_++ # for killing wombles :)

[17:18] <mst> now it's bothering me that I don't remember

[17:18] <mst> http://trout.me.uk/mstcat2.jpg

[17:18] <AlexDaniel> well no, I have a commit comming that will actually kill wombles… though it will make everyone happy I hope

[17:18] <RabidGravy> it's Friday and after six, if you're doing remembering properly then you're not doing it right

[17:19] <timeless> m: my %tokenmap = ( % => percent, # => hash, . => dot, ? => question, ); print %tokenmap[.];

[17:19] <camelia> rakudo-moar 9cfcb9: OUTPUT«5===SORRY!5=== Error while compiling /tmp/T49XvXStDJ␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at /tmp/T49XvXStDJ:1␤------> 3t, ? => question, ); print %tokenmap[.];7⏏5<EOL>␤    expecting any of:␤ …»

[17:19] <timotimo> no, you need to quote those

[17:19] <RabidGravy> KILL WOMBLES?  BAD BAD HEARTLESS MAN

[17:19] <timeless> timotimo: that was xargs not doing me any favors

[17:20] <ZoffixW> m: my %tokenmap = <% percent   # hash   . dot   ? question>; print %tokenmap{.};

[17:20] <camelia> rakudo-moar 9cfcb9: OUTPUT«5===SORRY!5=== Error while compiling /tmp/d1smp7IXAw␤Malformed postfix call␤at /tmp/d1smp7IXAw:1␤------> 3  . dot   ? question>; print %tokenmap{.7⏏5};␤»

[17:20] <ZoffixW> m: my %tokenmap = <% percent   # hash   . dot   ? question>; print %tokenmap{'.'};

[17:20] <camelia> rakudo-moar 9cfcb9: OUTPUT«dot»

[17:20] <timeless> m: my %tokenmap = ( '%' => 'percent', '#' => 'hash', '.' => 'dot', '?' => 'question', );  print %tokenmap['.'];  

[17:20] <camelia> rakudo-moar 9cfcb9: OUTPUT«Cannot coerce NaN to an Int␤  in block <unit> at /tmp/h2ZQYS4VAA line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/h2ZQYS4VAA line 1␤␤»

[17:20] <timeless> there, that's the error i got :)

[17:20] <ZoffixW> timeless, that only works in JavaScript or PHP :)

[17:21] <psch> m: my %tokenmap = ( '%' => 'percent', '#' => 'hash', '.' => 'dot', '?' => 'question', );  print %tokenmap<.>;

[17:21] <camelia> rakudo-moar 9cfcb9: OUTPUT«dot»

[17:21] <ZoffixW> timeless, hashes are looked up with  %hash<foo> or %hash{'foo'}

[17:21] <timotimo> ZoffixW: isn't # actually comments inside < >?

[17:21] <psch> m: say <# foo>

[17:21] <camelia> rakudo-moar 9cfcb9: OUTPUT«(# foo)␤»

[17:21] <ZoffixW> I hope not

[17:21] <timeless> ZoffixW: yeah, i'm a js guy at heart

[17:21] <timotimo> oh, ok

[17:21] <psch> m: say <<# foo>>

[17:21] <camelia> rakudo-moar 9cfcb9: OUTPUT«5===SORRY!5=== Error while compiling /tmp/wTXSi7ITxR␤Unable to parse expression in shell-quote words; couldn't find final '>>' ␤at /tmp/wTXSi7ITxR:1␤------> 3say <<# foo>>7⏏5<EOL>␤    expecting any of:␤        argument list␤        sh…»

[17:22] <timeless> could camelia replace `/tmp/..../` with `script`?

[17:22] <timeless> it eats too many chars from the output :(

[17:22] <AlexDaniel> timeless: good point

[17:22] <timotimo> i wanted that, too, at some point

[17:22] <AlexDaniel> timeless: create an issue here https://github.com/perl6/evalbot/issues

[17:22] <ZoffixW> timeless, well, she's here if you want to take a crack at it :) https://github.com/perl6/evalbot/

[17:23] <AlexDaniel> and I'll take care of it

[17:23] <psch> replace it with "{$user}\'s script" imo

[17:23] <psch> well, minus the \

[17:23] <timeless> psch: too many chars

[17:23] <psch> timeless: but useful information

[17:23] *** mr-foobar left
[17:23] <ZoffixW> Well, the ===SORRY!=== stuff can go too.

[17:23] <AlexDaniel> go where?

[17:23] <ZoffixW> This isn't Canada, eh

[17:23] <ZoffixW> Go away :)

[17:23] <AlexDaniel> no

[17:24] <AlexDaniel> I have to know that it was a compile-time thing

[17:24] <psch> yeah, i'd prefer only changing meaningless into meaningful information

[17:24] <timeless> AlexDaniel: https://github.com/perl6/evalbot/issues/8

[17:24] <psch> not ditching meaningful information

[17:24] <timeless> ZoffixW: i'm in canada, i wouldn't be sorry to see that sorry go

[17:24] <psch> and "too many chars" isn't really a valid argument for me there - you probably have text replacement functionality in your irc client

[17:25] <timotimo> psch: camelia cuts off text before your irc client gets it

[17:25] <timeless> psch: it's eating from the tail of the error

[17:25] <ZoffixW> Replace it with a shorter meaningful version. The q{Replace ===SORRY!=== Error while compiling /tmp/wTXSi7ITxR␤} can be replaced with a single char really.

[17:25] <timeless> there's a limit in irc

[17:25] <ZoffixW> timeless, where in Canada?

[17:25] <timeless> TO

[17:25] <AlexDaniel> no, SORRY is not going anywhere

[17:25] *** TakinOver left
[17:25] <psch> timeless: well, if camelia is *all* you're using to perl6 for then i'm sorry vOv

[17:25] <ZoffixW> timeless, Brampton. Are you going to Damian's Perl 6 talks June 27/28?

[17:25] <timeless> ZoffixW: link?

[17:26] <ZoffixW> 1 sec

[17:26] <ZoffixW> timeless, first https://www.meetup.com/Toronto-Perl-Mongers/events/231418224/ and second https://www.meetup.com/Toronto-Perl-Mongers/events/231418278/

[17:27] <timeless> is there a way to get .vcal / add to google calendar links from there?

[17:27] <ZoffixW> IDFK

[17:27] * timeless could definitely go (assuming no other scheduling things turn up)

[17:27] * timeless could walk there

[17:28] <ZoffixW> timeless, there isn't, but if you're not giving any data to the server, it'll ping you and failing to respond to that ping will disconnect you. RE <timeless> there's a limit in irc

[17:28] <ZoffixW> ping you as in IRC command PING

[17:28] *** donaldh left
[17:28] <timeless> ZoffixW: wrong kind of limit

[17:29] <timeless> there's a message length limit

[17:29] <ZoffixW> Oh, I think I've commingled your nickname with your question. I thought you were asking about time limit lol

[17:29] <timeless> (although it technically varies by ircd)

[17:29] <psch> i do recognize that camelia could get closer to freenodes MSG limit, yeah

[17:29] <ZoffixW> There's a 512-char per message limmit give or take

[17:29] <timeless> anyway, it's pretty clear that on that thing i complained about camelia hit it

[17:29] *** ZoffixW left
[17:29] <timeless> shortening /tmp (twice) buys characters for more useful stuff

[17:30] <AlexDaniel> yes, that's a good point

[17:30] <AlexDaniel> that does not apply for removing SORRY, that's a bad point

[17:30] <psch> http://irclog.perlgeek.de/perl6/2016-06-10#i_12643274 seems to be the freenode msg length limit

[17:31] <psch> so camelia could expand to that, instead of tossing useful information

[17:31] <timeless> oh

[17:31] <timeless> i can't generally do mondays

[17:31] <timotimo> we could replace ===SORRY!=== with ==SRY==

[17:31] <dalek> doc: 64bc5f3 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Language/testing.pod:

[17:31] <dalek> doc: Less wombles, more butterflies

[17:31] <dalek> doc: 

[17:31] <dalek> doc: Fixes #577

[17:31] <dalek> doc: review: https://github.com/perl6/doc/commit/64bc5f38f8

[17:32] <timeless> 悲

[17:32] <AlexDaniel> sorry to all fans of wombles

[17:34] <timeless> ok, i really have to go

[17:34] <timeless> maybe see some real people that tuesday @moco community space

[17:35] <timeless> AlexDaniel: that explanation is *much* better

[17:35] *** ZoffixW joined
[17:35] <AlexDaniel> timeless: see you!

[17:35] <timeless> it actually *helps* people understand about camelia !

[17:35] <timeless> killing two birds w/ one stone == huge win

[17:35] <ZoffixW> psch, that's HexChat's message limit :)

[17:35] <AlexDaniel> yea, it's cool. Now everyone shut up about this thing

[17:35] <psch> ZoffixW: well, it's still definitely lower than freenodes limit, in any case :)

[17:35] <psch> well, or equal to, i suppose

[17:36] *** TelnetZoffix joined
[17:36] <TelnetZoffix> dassdasdasdsadasdasddasdsadsadsadsadsadsadasddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd

[17:36] <TelnetZoffix> ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd

[17:36] <ZoffixW> That's the max

[17:37] *** TelnetZoffix left
[17:37] <ZoffixW> Which is probably the same as the message psch linked to making my spam effectively useless :P

[17:38] <psch> nah, it looks longer from here i think?

[17:38] <psch> well, there's 448 'd's

[17:39] <psch> and 'my $max_output_len = 290;' is camelia code

[17:39] <ZoffixW> Aye this part ddddddddddddddddddddddddddddddddd" doesn't fit when I try to send the same thing from HexChat. The nick is part of the max length tho

[17:40] *** kent\n joined
[17:40] *** kent\n left
[17:40] *** kent\n joined
[17:40] <ZoffixW> Hey, AlexDaniel ... 

[17:40] <ZoffixW> ...

[17:40] <AlexDaniel> what

[17:40] <mst> the channel name is definitely part of the max length

[17:40] <ZoffixW> ... Womble *trollface*

[17:40] <psch> m: say chars 'Zoffix@static-67-226-172-41.ptr.terago.net msg #perl6'

[17:40] <camelia> rakudo-moar 9cfcb9: OUTPUT«53␤»

[17:40] <psch> m: say chars 'Zoffix@static-67-226-172-41.ptr.terago.net msg #perl6' + 448

[17:40] <camelia> rakudo-moar 9cfcb9: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5Zoffix\@static-67-226-172-41.ptr.terago.net msg #perl6' (indicated by ⏏)␤  in block <unit> at /tmp/bQz4v1Ii_2 line 1␤␤Actually thrown at:␤  in block <…»

[17:40] <psch> m: say chars('Zoffix@static-67-226-172-41.ptr.terago.net msg #perl6') + 448

[17:40] <camelia> rakudo-moar 9cfcb9: OUTPUT«501␤»

[17:41] <psch> well, i'm not learning RFC 1459 for that now :P

[17:41] *** domidumont left
[17:41] <psch> in any case, it probably also depends on the other networks camelia is on, if any

[17:43] <ZoffixW> Yeah, the servers shove around things like :Angel!wings@irc.org PRIVMSG #perl6 :MESSAGE

[17:43] <ZoffixW> And it's RFC2812 now :)

[17:43] <AlexDaniel> ==SRY== eh… by using the same logic people can say that dalek should replace my name with something shorter…

[17:44] <ZoffixW> Finally, my hours spent reading all of them for IRC::Client were not in vain! :P

[17:44] <timotimo> yeah, AD, shorten your name, dood

[17:44] <AlexDaniel> A.-D. J.-A. eh

[17:44] <AlexDaniel> something like that is written on my bank card…

[17:45] <gnull> hello everyone

[17:45] <timotimo> greetings gnull

[17:46] *** telex left
[17:46] <gnull> m: sub f([$a, [$b, $c]]) {say "$a, $b, $c"}; f [1, [2, 3]]

[17:46] <camelia> rakudo-moar 9cfcb9: OUTPUT«1, 2, 3␤»

[17:47] <gnull> Looks like this [] constructor can also decompose elements

[17:47] <gnull> Is it possible to do this with arbitary classes?

[17:48] <timotimo> yes, with a sub-signature and named parameters you can grab attributes out of instances

[17:48] <psch> m: class Foo { has $.bar }; sub f(Foo $a (:$bar)) { say $bar }; f Foo.new(:2bar)

[17:48] <camelia> rakudo-moar 9cfcb9: OUTPUT«2␤»

[17:48] *** telex joined
[17:48] <gnull> cool

[17:48] <timotimo> m: sub test($p (:$key, :$value)) { say "$key $value" }; test "foo" => "bar"

[17:48] <camelia> rakudo-moar 9cfcb9: OUTPUT«foo bar␤»

[17:49] <ZoffixW> 0.o

[17:49] <perlpilot> because I find that required space slightly annoying, I've taken to using a colon instead ...

[17:49] <perlpilot> m: sub test($p:(:$key, :$value)) { say "$key $value" }; test "foo" => "bar"

[17:49] <camelia> rakudo-moar 9cfcb9: OUTPUT«foo bar␤»

[17:49] <RabidGravy> yeah, I didn't realise the generalised version of this existed until the other day when I was thinking about pairs

[17:49] <perlpilot> Same for Foo $a:(:$bar)

[17:49] <psch> m: class Foo { has $.bar }; sub f(Foo $a(:$bar)) { say $bar }; f Foo.new(:2bar)

[17:49] <camelia> rakudo-moar 9cfcb9: OUTPUT«5===SORRY!5=== Error while compiling /tmp/6gsB4OVP1n␤Shape declaration with () is reserved;␤  please use whitespace if you meant a subsignature for unpacking,␤  or use the :() form if you meant to add signature info to the function's type␤at /t…»

[17:50] <RabidGravy> lorra lorra pairs out there

[17:50] <psch> perlpilot: the error message says they mean different things..?

[17:50] <psch> perlpilot: ohh, that's probably only for &-params

[17:50] <perlpilot> without the space it means something different

[17:50] <psch> somewhat misleading

[17:50] <gnull> m: sub out(Proc $p (:$out)) {say $out}; output(shell 'echo hello', :out)

[17:50] <camelia> rakudo-moar 9cfcb9: OUTPUT«5===SORRY!5=== Error while compiling /tmp/0fYLSLon8T␤Undeclared routine:␤    output used at line 1␤␤»

[17:50] <timotimo> camelia doesn't let you use "shell"

[17:50] <gnull> I want to extract :out from Proc this way

[17:51] <timotimo> only works if out is declared as an attribute

[17:52] <psch> m: sub f(&a:($,$)) { say "yup" }; f -> $, $ { }

[17:52] <camelia> rakudo-moar 9cfcb9: OUTPUT«yup␤»

[17:52] <psch> m: sub f(&a ($,$)) { say "yup" }; f -> $, $ { }

[17:52] <camelia> rakudo-moar 9cfcb9: OUTPUT«Too few positionals passed; expected 2 arguments but got 0 in sub-signature of parameter &a␤  in sub f at /tmp/HNo34C6n6w line 1␤  in block <unit> at /tmp/HNo34C6n6w line 1␤␤»

[17:52] <psch> perlpilot: i think :() working there for non-&-params is kind of weird

[17:53] <perlpilot> why?

[17:53] *** mr-foobar joined
[17:53] *** sno joined
[17:53] <psch> perlpilot: well, the forms aren't equivalent, and the error message suggests that :() is only for "signature info [of] the function's type"

[17:54] <psch> i'm not willing to argue i understand that completely correctly, and it might just be fine as a fallback, but then at least the error for the reserved case is LTA vOv

[17:54] <ZoffixW> m: class Wombles {method womble {self}}.womble.womble.womble.womble.womble.womble.womble.womble.womble.womble.womble.womble.womble.womble.say

[17:54] <camelia> rakudo-moar 9cfcb9: OUTPUT«(Wombles)␤»

[17:54] <ZoffixW> Well... I'm officially bored outta my mind :)

[17:55] <gnull> Thank you

[17:55] <perlpilot> psch: your example was making me think that not only was I right to favor $aggregate:($a,$b), but arguably "more correct" for the case where it's a &thingy

[17:56] *** ZoffixW left
[17:57] <dalek> doc: 8ebabd4 | (Steve Mynott)++ | doc/Language/testing.pod:

[17:57] <dalek> doc: Reverting since the consensus in #577 was clearly in favour of no change. In case of further argument this should be decided by either Pumpking or BDFL

[17:57] <dalek> doc: review: https://github.com/perl6/doc/commit/8ebabd432a

[17:57] <AlexDaniel> reverting? What the f?

[17:57] <psch> m: sub f(&a (:$name)) { say $name }; f &say

[17:57] <camelia> rakudo-moar 9cfcb9: OUTPUT«(Any)␤»

[17:57] *** yqt left
[17:58] <psch> perlpilot: but :() means "the &-param before has this signature"

[17:58] <psch> perlpilot: and ' ()' means "destructure this param into what's inside the parens"

[17:58] <[Coke]> stmuk++

[17:59] <psch> ...i'm not quite sure why my last example gave Any, but i'd guess it's Attributes of the param, and not methods..?

[17:59] <RabidGravy> I've totally lost the will to live but I now have "the sql generating thing that is loosely based on SQL::Abstract" down to 24 genuine test failures rather than a squillion due to not having a proper SQL parser

[18:00] <psch> m: my &say-foo = &say but role { has $.a = "foo" }; sub f(&a (:$a)) { say $a }; f &say-foo

[18:00] <camelia> rakudo-moar 9cfcb9: OUTPUT«foo␤»

[18:00] <psch> m: my &say-foo = &say but role { has $.a = "foo" }; sub f(&a:(:$a)) { say $a }; f &say-foo

[18:00] <camelia> rakudo-moar 9cfcb9: OUTPUT«5===SORRY!5=== Error while compiling /tmp/aYGfV0dqx9␤Variable '$a' is not declared. Did you mean '&a'?␤at /tmp/aYGfV0dqx9:1␤------> 3as $.a = "foo" }; sub f(&a:(:$a)) { say 7⏏5$a }; f &say-foo␤»

[18:02] *** _mg_ joined
[18:02] <AlexDaniel> just showed both examples to someone. Guess which example received “what the?” reaction and which one was “oh, ok, now it's clear”

[18:02] <timotimo> yeah, that's not destructuring

[18:02] <perlpilot> psch: oh, I see. I was misreading.  I still find that required space annoying :)

[18:03] *** cdg left
[18:04] * psch guesses we don't roast ($a:($b))

[18:05] <psch> so, well, it'll probably keep working in v6.c and v6.d..? :)

[18:06] *** wamba joined
[18:06] *** robinsmidsrod joined
[18:06] <mst> AlexDaniel: and?

[18:07] <mst> AlexDaniel: if you put the same effort into rewriting it while keeping the wombles, and then see if people still find it unclear, that would have a point

[18:07] <mst> AlexDaniel: as it is, this is now twice that there's been an active discussion about this that you've tried to circumvent

[18:08] <mst> AlexDaniel: you might even be right, but your behaviour has been antisocial and anticollaborative and so the merits have been obscured

[18:10] * [Coke] wonders what "needs fixing" indicates in the perl6/doc/issues queue. Surely everything in there needs fixing

[18:10] <[Coke]> ditto "affects content" vs. "needs writing"

[18:10] <mst> [Coke]: "has been triaged and determined to be a doc error rather than a bug in rakudo" ?

[18:12] <mst> AlexDaniel: nobody has said "this cannot be improved", only "we would like, if possible, to keep the wombles in the process"

[18:12] <mst> I'm not sure why you're working so hard to ignore everybody else's opinion, but it doesn't appear to be a winning strategy right now

[18:13] <AlexDaniel> mst: instead of discussing the thing in a team of 9 participants (where one half is saying that the example is hard to understand and another half is saying that “womble” is a funny word) I decided to change the example to something that is cool, very clear, not too weird, and still very perl6-ish. Closing the issue, as it has been done, was pretty unfair to one half (remember that this problem was originally pointed out by a person who

[18:13] <AlexDaniel> is new to perl 6). Instead I just fixed the example. That's it. You may say that it is unsocial, but it gets the job done

[18:13] <RabidGravy> if only the same amount of effort went into making the missing documentation

[18:14] <AlexDaniel> you may insist on keeping the funny word in the documentation, whatever. That's my last word on that topic, I'm not participating in this bullshit anymore

[18:15] *** rurban_ left
[18:15] *** tomboy64 left
[18:15] *** rurban_ joined
[18:15] <mst> AlexDaniel: if you'd presented the alternative as clearer-in-general and asked for comments, there would have been no 'bullshit'

[18:15] *** telex left
[18:15] *** telex joined
[18:16] <mst> telling half the people involved in a conversation 'fuck you' is not generally a winning strategy

[18:17] <mst> (and I do sympathise on the basis of really wanting to do that on a fairly regular basis, but it still doesn't tend to work out how I'd hope ;)

[18:17] <RabidGravy> it's fine, we can stop writing the documentation as it's clearly all in hand

[18:18] *** tomboy64 joined
[18:20] <[Coke]> I'd like to point out that snark also hardly ever has the desired effect.

[18:21] <perlpilot> Where's the hugbot when you need it?  :)

[18:21] <AlexDaniel> perlpilot: there's bisectbot instead

[18:21] *** ZoffixW joined
[18:22] *** huggable joined
[18:22] * moritz hugs perlpilot 

[18:22] <moritz> thereyago

[18:22] <ZoffixW> huggable, hug perlpilot 

[18:22] * huggable hugs perlpilot 

[18:22] <ZoffixW> :)

[18:23] <perlpilot> really, I'm not the one who needs it.  

[18:23] <perlpilot> But it looks like all those involved in the womble discussion could use some hugs

[18:23] <RabidGravy> eugh, if I thought it was that kind of channel

[18:23] <ZoffixW> I hope we can all walk away from this amicably. There's one thing more stupid than bikeshedding and that's holding grudges over bikeshed issues.

[18:23] <ZoffixW> huggable, hug me

[18:23] * huggable hugs ZoffixW

[18:24] <perlpilot> ZoffixW: so you're calling everyone stupid now?!?!   ;>

[18:24] <RabidGravy> we are all stupid

[18:24] <mst> we are all stupid

[18:24] *** yqt joined
[18:24] <ZoffixW> Fun fact: googling for "how to fight bikeshedding" gives you results for "how to fight climate change" :)

[18:25] <RabidGravy> actually that's probably right

[18:25] <[Coke]> btw, AlexDaniel++ for quickly resolving all the doc tickets I opened today

[18:25] *** labster joined
[18:25] <AlexDaniel> these were LHFs

[18:25] <RabidGravy> most of the "climate conferences" do seem to be mass colour swatch discussion fests

[18:26] <dogbert17> here's my attempt to document Baggy.keys, does it look ok? https://gist.github.com/dogbert17/acbbd419534b528ca29bfacf4402ac81

[18:26] <[Coke]> still, thanks. They were high enough I didn't have time to do 'em. :)

[18:27] <DrForr> lib/.precomp bug golfed down reasonably far, and the autoreply did work.

[18:27] <RabidGravy> dogbert17, looks great but <supressed sarcastic comment> ;-)

[18:28] <dogbert17> RabidGravy: is it the spam?

[18:28] <AlexDaniel> RabidGravy: yea… I was about to say that :D

[18:28] <RabidGravy> I'd just go with it then be prepared to defend the monty python allusion

[18:29] <perlpilot> dogbert17: I dunno.  "without taking their individual weights into account" seems like it might warrant some more explanation because of the second example.

[18:29] <perlpilot> dogbert17: I mean, naively, if I didn't know anything, the first question I'd ask would be "what happened to a => 0?"

[18:30] <perlpilot> but maybe that's just in the main BagHash docs?

[18:30] <ZoffixW> m: my $n = ("a" => -1, "b" => 2).BagHash; say $n.keys  # seems to freeze

[18:31] <ZoffixW> Oh, never mind. camelia is just ded

[18:31] *** andreoss joined
[18:31] <perlpilot> ZoffixW: here, I get a LTA error.

[18:31] <dogbert17> perlpilot: the second example was actually intentional, zero weight keys are removed but perhaps I should mentions that

[18:31] <dogbert17> s/mentions/mention/

[18:31] <ZoffixW> ditto. I just assumed it was a freeze, 'cause camelia didn't respond when I tried it :)

[18:32] <dogbert17> perlpilot: i'll mention something about it

[18:32] <perlpilot> dogbert17++

[18:32] <camelia> rakudo-moar 9cfcb9: OUTPUT«Use of Nil in string context  in block <unit> at /tmp/v40TeDI8Vs line 1␤Use of Nil in string context  in block <unit> at /tmp/v40TeDI8Vs line 1␤Found negative values for  in ␤  in block <unit> at /tmp/v40TeDI8Vs line 1␤␤Actually thrown at:␤  in…»

[18:34] *** grondilu left
[18:35] *** domidumont joined
[18:42] *** Actualeyes left
[18:42] <andreoss> m: our $x = 1; { my $y := $x; temp $x = $y; $y++; say $x }; say $x;

[18:42] <camelia> rakudo-moar 9cfcb9: OUTPUT«2␤1␤»

[18:42] <andreoss> m: our $x = 1; { my $y := $x; $y++; say $x }; say $x;

[18:42] <camelia> rakudo-moar 9cfcb9: OUTPUT«2␤2␤»

[18:43] *** ZoffixW left
[18:43] *** donaldh joined
[18:44] *** apathor joined
[18:44] <andreoss> m: our $x = 1; { INIT my $y := $x; temp $x = $y; $y++; say $x }; say $x;

[18:44] <camelia> rakudo-moar 9cfcb9: OUTPUT«Cannot resolve caller postfix:<++>(); none of these signatures match:␤    (Mu:D $a is rw)␤    (Mu:U $a is rw)␤    (Int:D $a is rw)␤    (int $a is rw)␤    (Bool:U $a is rw)␤    (Bool:D $a is rw)␤    (Num:D $a is rw)␤    (Num:U $a is rw)␤  …»

[18:45] <andreoss> why temp is executed before my?

[18:46] *** domidumont left
[18:47] *** itaipu joined
[18:48] <andreoss> m: our $x = 1; { my $y := $x; let $x = $y; $y++; say $x }; say $x;

[18:48] <camelia> rakudo-moar 9cfcb9: OUTPUT«2␤2␤»

[18:49] <andreoss> why temp and let don't have the same behavior here?

[18:55] <perlpilot> m: our $x = 1; try { my $y := $x; let $x = $y; $y++; say $x; fail }; say $x

[18:55] <camelia> rakudo-moar 9cfcb9: OUTPUT«2␤1␤»

[18:57] <andreoss> i see

[18:57] <andreoss> let keeps the value

[18:58] <andreoss> m: our $x = 1; { my $y := $x; { temp $x = $y; $y++; say $x } }; say $x;

[18:58] <camelia> rakudo-moar 9cfcb9: OUTPUT«2␤1␤»

[18:59] *** regreg left
[19:00] <andreoss> m: our $x = 1; my $y := $x; { temp $x = $y; $y++; say $x }; say $x;

[19:00] <camelia> rakudo-moar 9cfcb9: OUTPUT«2␤1␤»

[19:01] *** sherwool joined
[19:02] *** _mg__ joined
[19:03] <gnull> I'm reading source of JSON::Tiny. And can't understand what does ':sym<something>' appended to token name do. For example here: https://github.com/moritz/json/blob/master/lib/JSON/Tiny/Grammar.pm#L12

[19:03] <gnull> Or is it just arbitary part of token name?

[19:04] *** _mg_ left
[19:04] *** _mg__ is now known as _mg_

[19:05] <timotimo> no, it's actually more than that

[19:05] <timotimo> when you have a <sym> in your token, it'll match the literal that you have in the :sym<...> part

[19:05] <timotimo> so you can have multi token value:sym<True> { <sym> }; multi token value:sym<False> { <sym> }

[19:05] <timotimo> and you can't accidentally copy-paste that wrong

[19:05] <dj_goku_> 00~https://design.perl6.org/S05.html01~ maybe?

[19:06] <timotimo> huh, how did that happen?

[19:06] <dj_goku_> https://design.perl6.org/S05.html

[19:06] <dj_goku_> timotimo: good question.

[19:06] <dj_goku_> copy + paste in irssi

[19:07] <timotimo> i know vt100 has a "give me escape codes at the beginning and end of data copied in" setting that an application can turn on and off via an escape sequence

[19:07] <timotimo> well, not vt100, but whatever some terminals implement

[19:08] <dj_goku_> timotimo: yeah it just started happening.

[19:09] <gnull> dj_goku_: thanks for the link

[19:09] <dj_goku_> gnull: I don't eve know if it is valid. :D

[19:09] <gnull> timotimo: thanks you too :)

[19:09] * dj_goku_ is a master googler

[19:10] <gnull> It is better than nothing :)

[19:10] <gnull> ^^^ Someone told this about open-source

[19:12] <dj_goku_> wow that grammar is very short.

[19:12] <gnull> I found a more beginner friendly description of these ':sym's. They are called protos. https://en.wikibooks.org/wiki/Perl_6_Programming/Grammars

[19:13] *** spider-mario joined
[19:13] *** cdg joined
[19:18] *** darutoko left
[19:23] <perlpilot> gnull: Well ... sym isn't the proto, it's more of a modifier for the proto.  In the example at that link, the proto is "protocol" and the sym is an expression of that proto (one of http, https, etc)

[19:24] <gnull> Got it

[19:25] <perlpilot> gnull: see http://doc.perl6.org/syntax/proto for more about proto

[19:25] <gnull> m: my proto token expr {*}; my token expr:sym<plus> { \d+ '+' \d }; '1+1' ~~ &expr

[19:25] <camelia> rakudo-moar 9cfcb9: ( no output )

[19:25] *** donaldh left
[19:25] <moritz> gnull: use a 'say' before the last expression

[19:26] <moritz> m: my proto token expr {*}; my token expr:sym<plus> { \d+ '+' \d }; say '1+1' ~~ /<expr>/

[19:26] <camelia> rakudo-moar 9cfcb9: OUTPUT«Nil␤»

[19:26] <gnull> m: my proto token expr {*}; my token expr:sym<plus> { \d+ '+' \d }; say '1+1' ~~ &expr

[19:26] <camelia> rakudo-moar 9cfcb9: OUTPUT«Nil␤»

[19:26] *** skids left
[19:27] <perlpilot> http://doc.perl6.org/language/regexes could probably use a section on protos too

[19:28] <gnull> I expect it to match. What is wrong?

[19:28] <perlpilot> or maybe http://doc.perl6.org/language/grammars

[19:30] <gnull> m: my token expr { \d+ '+' \d }; say '1+1' ~~ &expr

[19:30] <camelia> rakudo-moar 9cfcb9: OUTPUT«｢1+1｣␤»

[19:33] <perlpilot> I dunno ... maybe the proto machinery has a bug.

[19:34] <perlpilot> m: grammar G { proto token expr {*}; token expr:sym<plus> { \d+ '+' \d+ } }; say G.parse('1+1', :rule<expr>);

[19:34] <camelia> rakudo-moar 9cfcb9: OUTPUT«｢1+1｣␤»

[19:34] <perlpilot> well, that works at least :)

[19:34] <gnull> Very strange

[19:40] <timotimo> yeah, i think proto only makes sense inside a grammar

[19:40] <timotimo> or maybe it's just implemented that way at the moment

[19:42] *** donaldh joined
[19:42] <gnull> ok

[19:44] <perlpilot> Hmm... maybe proto requires a package

[19:45] <timotimo> well, the unit of he running script is also a package, to be fair

[19:46] <AlexDaniel> oh look: $tmp_res =~ s|/tmp/\w{10}|/tmp/tmpfile|g;

[19:46] <AlexDaniel> something is not working here :)

[19:46] <perlpilot> timotimo: but he used "my proto token" which is lexical and not bound to a package.

[19:50] <timotimo> mhm

[19:50] <timotimo> *shrugs*

[19:51] * diakopter dares to wonder about the womble discussion

[19:53] *** sherwool left
[19:53] * diakopter gives up backlogging to find information on it

[19:54] * nemo hugs huggable

[19:54] <nemo> hmph

[19:54] <nemo> it needs more functions

[19:54] <AlexDaniel> nemo: like?

[19:55] <nemo> AlexDaniel: didn't hug me back

[19:55] <nemo> also maybe random hugs or based on commits?

[19:55] <AlexDaniel> huggable: source

[19:55] <huggable> AlexDaniel, See https://github.com/zoffixznet/huggable

[19:55] <AlexDaniel> nemo: ↑

[19:55] <masak> diakopter: http://irclog.perlgeek.de/perl6/2015-03-18#i_10299276 seems to be some sort of originating moment

[19:56] <masak> but I could be wrong

[19:57] <mst> diakopter: it can be summed up as "people think the womble example is confusing, other people agree but want to keep the wombles, AlexDaniel proposed a version that fixed the confusing but lost the wombles, then we all made idiots of ourselves"

[19:57] <AlexDaniel> that sums it up, yes

[19:57] <RabidGravy> I'd put it down to not enough beer

[19:58] <[Coke]> ah, beer.

[19:58] <AlexDaniel> though it feels like we're going to act like even bigger idiots for the next few hours…

[19:58] <AlexDaniel> anyway, why is this substitution not working…

[19:59] <mst> AlexDaniel: I'm assuming that either (a) somebody will come up with a deconfused womble version (b) in a few days we'll shrug, note the absence of a, take a moment to feel sad about the absence of a, and adopt your version

[20:00] <AlexDaniel> I'm actually proposing a third option

[20:00] <RabidGravy> I'd rather someone wrote a half decent sql parser

[20:00] <AlexDaniel> let's just stop the bikeshedding for 3 days, then think again…

[20:01] *** andreoss left
[20:01] <mst> well this was kinda the 'in a few days' part

[20:01] <mst> you will notice I'm attempting to carefully avoid restarting the bikeshedding in the way I'm describing things :)

[20:02] *** jameslen_ joined
[20:02] <mst> ... meanwhile a .uk-centric channel is discussing stealth womblification of other documentation to compensate

[20:02] <AlexDaniel> :|

[20:03] *** cpage_ left
[20:03] <RabidGravy> stealth wombles!

[20:04] *** maybekoo2 left
[20:06] *** rurban joined
[20:06] <b2gills> There is also a discussion of stealth Fraggle-Rock-ification of the docs by people who were kids in the 80's ( currently only in my own head )

[20:06] *** rurban left
[20:07] <mst> YES!

[20:07] <mst> b2gills: beware the MONKEY-WRENCH

[20:07] <RabidGravy> oh if we're going there I want clangers, trumpton, flowerpt mean the works

[20:08] *** donaldh left
[20:08] <RabidGravy> (for those of us who were born in the sixties and all)

[20:09] *** maybekoo2 joined
[20:10] *** rurban_ left
[20:14] <timotimo> we should preface the docs website with a selection "in what era did you grow up?"

[20:14] <timotimo> or "which of these kids' shows do you remember from your own childhood?"

[20:14] <[Coke]> and what's your DVD region?

[20:15] <AlexDaniel> and radio buttons to toggle between, yeah

[20:15] <timotimo> :D

[20:17] <stmuk_> the w***** actually had 1970s and 1990s versions

[20:18] *** rurban joined
[20:20] *** rurban left
[20:22] <RabidGravy> yeah the 90s one was a bit messed up

[20:23] <RabidGravy> like the recent magic roundabout

[20:23] <mst> stmuk_: next you're going to try and tell me there's more than one highlander film

[20:27] <masak> mst: that's impossible!

[20:27] <masak> there can only be One!

[20:28] <mst> http://www.trout.me.uk/facepaw.jpg

[20:28] *** cpage_ joined
[20:28] <geekosaur> ob "there should have been only one!"

[20:29] <huf> the number of highlander movies depends entirely on your will

[20:29] <huf> it's similar to star wars, really

[20:30] <RabidGravy> there is actually a TV series, which is kind of weird really

[20:30] <stmuk_> just as well there was only one Matrix film too

[20:31] <masak> yeah, was gonna say

[20:31] <masak> well. unless you count that Animatrix thing

[20:32] <[Coke]> the 2nd matrix movie is ok if you combine it with the ps2 video game. :)

[20:34] <masak> [Coke]: I finished that game. I beg to differ.

[20:35] <[Coke]> aww, I have fond memories of it. perhaps only becaues I played it so long ago

[20:36] * masak refreshes his memory with a YouTube video

[20:36] <masak> generally the rule is "if you try to make a game from your movie, you've already lost"

[20:38] <[Coke]> ah, but as I recall, the game actually covered bits that were not present in the movie.

[20:38] <[Coke]> as opposed to the normal "play the scenes from the movie" tack.

[20:38] <masak> that much is true

[20:39] <masak> whether you consider it an advantage (for the movies, mostly) is another matter

[20:39] <mst> I actually quite liked matrix 2 and 3, but I feel like they were effectively disjoint from the first one

[20:41] <masak> mst: agreed.

[20:41] <masak> to me, 1 already forms a coherent whole. 1+2+3 sort of do too, but a different one.

[20:41] <RabidGravy> mst, but you've got the long black leather coat, so you have to say that ;-)

[20:42] <masak> some of the things 2+3 added to 1 kind of disappointed me.

[20:42] *** TEttinger joined
[20:42] <masak> the polygon count in this game reminds me of the "Money for Nothing" music video

[20:43] <mst> RabidGravy: augh that was my least favourite thing about those films

[20:43] <mst> RabidGravy: "did you want to be like the guy in the matrix?" NO I BOUGHT THIS BEFOREHAND I AM A FUCKING GOTH WHAT THE FUCKING FUCK

[20:43] <mst> RabidGravy: I hate you

[20:43] <mst> <3

[20:44] <RabidGravy> :-*

[20:44] <AlexDaniel> uh, I know that I was screaming words like “bullshit” today… but that ↑ is a little bit too much :)

[20:45] <RabidGravy> the goth thing may besomewhat of pyrrhic victory however ;-)

[20:45] <stmuk_> why do you dress like it's halloween? :P

[20:45] <RabidGravy> because it's always halloween in his heart

[20:45] <AlexDaniel> OK, so the tempfile was actually supposed to be renamed to /tmp/tmpfile

[20:46] <AlexDaniel> should I leave it as that or can we come up with something shorter?

[20:46] <AlexDaniel> p6: say(

[20:46] <camelia> rakudo-moar 9cfcb9: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Unable to parse expression in argument list; couldn't find final ')' ␤at /tmp/tmpfile:1␤------> 3say(7⏏5<EOL>␤    expecting any of:␤        argument list␤»

[20:46] <AlexDaniel> see ↑? It works here

[20:46] <AlexDaniel> m: say(

[20:46] <camelia> rakudo-moar 9cfcb9: OUTPUT«5===SORRY!5=== Error while compiling /tmp/AlBHtzb9vf␤Unable to parse expression in argument list; couldn't find final ')' ␤at /tmp/AlBHtzb9vf:1␤------> 3say(7⏏5<EOL>␤    expecting any of:␤        argument list␤»

[20:47] <AlexDaniel> but given that the initial complaint was that it is too long, can I rename it to <tmp> ?

[20:50] <AlexDaniel> p6: say ‘/tmp/abcdefghij’

[20:50] <camelia> rakudo-moar 9cfcb9: OUTPUT«/tmp/tmpfile␤»

[20:50] <AlexDaniel> xD

[20:51] *** rindolf left
[20:51] <dalek> doc: 0d7aab4 | (Jan-Olof Hendig)++ | doc/Type/Baggy.pod:

[20:51] <dalek> doc: Added docs for Baggy.keys. #perl6++ for reviewing

[20:51] <dalek> doc: review: https://github.com/perl6/doc/commit/0d7aab4795

[20:54] *** rurban joined
[20:55] *** _mg_ left
[21:01] *** Xliff left
[21:07] *** vendethiel joined
[21:09] <dalek> doc: 02f12e2 | (Jan-Olof Hendig)++ | doc/Language/objects.pod:

[21:09] <dalek> doc: Fixed broken link

[21:09] <dalek> doc: review: https://github.com/perl6/doc/commit/02f12e2ecf

[21:12] <dalek> evalbot: 282650f | (Aleks-Daniel Jakimenko-Aleksejev)++ | evalbot.pl:

[21:12] <dalek> evalbot: Always shorten the filename, not just sometimes

[21:12] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/282650f9d5

[21:12] <dalek> evalbot: fa2e44f | (Aleks-Daniel Jakimenko-Aleksejev)++ | / (2 files):

[21:12] <dalek> evalbot: Make it less likely to stumble upon file name replacement

[21:12] <dalek> evalbot: 

[21:12] <dalek> evalbot: Of course that's not the right way to fix it, but it is good enough for now.

[21:12] <dalek> evalbot: Ideally EvalbotExecuter should return the filename that was used, but current

[21:12] <dalek> evalbot: fix is probably good enough (even though it feels weird).

[21:12] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/fa2e44ff87

[21:12] <dalek> evalbot: 4ef2b55 | (Aleks-Daniel Jakimenko-Aleksejev)++ | evalbot.pl:

[21:12] <dalek> evalbot: Make the filename shorter to fit more useful info

[21:12] <dalek> evalbot: 

[21:12] <dalek> evalbot: Original complaint was that the filename is too long and the error message

[21:12] <dalek> evalbot: is less useful because the filename appears several times and takes up all

[21:12] <dalek> evalbot: space. After 6ff428d the situation got better, but not much.

[21:12] <dalek> evalbot: 

[21:12] <dalek> evalbot: This commit changes the filename to <tmp>. That's very short but is probably

[21:12] <dalek> evalbot: still clear enough.

[21:12] <dalek> evalbot: 

[21:12] <dalek> evalbot: Closes #8

[21:12] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/4ef2b5530e

[21:16] *** camelia joined
[21:16] <AlexDaniel> m: say(

[21:16] <AlexDaniel> ah, it needs the +v

[21:17] *** ChanServ sets mode: +v camelia

[21:17] <camelia> rakudo-moar 5b4470: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ti6cqH5Gse␤Unable to parse expression in argument list; couldn't find final ')' ␤at /tmp/ti6cqH5Gse:1␤------> 3say(7⏏5<EOL>␤    expecting any of:␤        argument list␤»

[21:17] *** Xliff joined
[21:18] <AlexDaniel> ok, it refuses to pull

[21:23] <AlexDaniel> right, it claims that the version of evalbot is e600617, which means that somebody touched the config file (freenode.org.conf) without making a proper commit

[21:23] <AlexDaniel> my guess is that right now it says “can't pull, you have unstaged changes here!”

[21:23] <diakopter> But what acruallt Is a wOmble

[21:24] <AlexDaniel> can somebody with access to camelia help with that?

[21:24] <diakopter> camelia: what is my womble

[21:24] <diakopter> I had enough beer for all of oyu

[21:25] <diakopter> it makes me funnier

[21:25] *** ptolemarch left
[21:30] <masak> diakopter: "Wombles" is a British TV series from the 70s

[21:31] <masak> diakopter: they look like people dressed up as silly birds

[21:34] <stmuk_> https://youtu.be/VIxkqoNi8I4?t=30

[21:34] <masak> diakopter: stop-motion animation

[21:35] <AlexDaniel> .oO( I should turn it on whenever I see bikeshedding )

[21:35] <stmuk_> #womblegate

[21:35] *** itaipu left
[21:38] *** wamba left
[21:41] *** regreg joined
[21:42] *** kaare_ left
[21:42] *** jdv79 joined
[21:42] <dalek> doc: 8929182 | (Jan-Olof Hendig)++ | doc/Language/objects.pod:

[21:42] <dalek> doc: Fixed typo and missing directive

[21:42] <dalek> doc: review: https://github.com/perl6/doc/commit/8929182d33

[21:47] *** ZoffixMobile joined
[21:47] <ZoffixMobile> Jesus. every time I look at the log, all you guys are talking about are wombles :)

[21:48] <ZoffixMobile> AlexDaniel, did you mean it did not pull after issuing the restart command?

[21:48] <AlexDaniel> ZoffixMobile: well, there's a pull command

[21:48] <AlexDaniel> ZoffixMobile: and it fails

[21:48] <AlexDaniel> ZoffixMobile: “version” reports e600617, which means that there are local modifications

[21:49] <ZoffixMobile> oh :(

[21:49] <AlexDaniel> because e600617 is before https://github.com/perl6/evalbot/commit/af272a787fb9ecf7ecf73c017d4f08fcda824423

[21:49] <AlexDaniel> but as we all know camelia is in perl6-dev just fine

[21:49] <AlexDaniel> so, my conclusion is that somebody broke it :)

[21:54] *** ZoffixMobile left
[22:07] <Hotkeys> why does the windows repl hate unicode

[22:07] <Hotkeys> http://i.imgur.com/cXOsiP6.png

[22:08] <Hotkeys> works fine outside repl http://i.imgur.com/8J7wvNc.png

[22:09] *** grondilu joined
[22:10] <literal> so, Callable.assuming() is really slow

[22:10] <Hotkeys> I don't really know where to look for the repl being unhappy with unicode

[22:10] <literal> example: https://gist.github.com/hinrik/a8ce1c656d4cc88e96f7df87004b0f67

[22:11] <geekosaur> Hotkeys, backward compat pretty much. default code page is not unicode

[22:11] <geekosaur> chcp 65001

[22:11] <Hotkeys> but the old repl handled it fine

[22:11] <geekosaur> note that this will confuse some other programs (notably git)

[22:12] <geekosaur> oh, powershell vs. cmd? I suspect PS forces unicode even when the code page isn't

[22:12] <geekosaur> but the code page is the only way other programs have to figure out if they are supposed to be using unicode or not, so they become confused

[22:13] <Hotkeys> is there any way to make it use unicode?

[22:14] <Hotkeys> if I don't care about whatever backwards compatibility it's going for

[22:14] <geekosaur> seems like Microsoft is pushing for non-unicode code pages to go away, so some future windows version should get this somewhat right

[22:14] <geekosaur> chcp 65001

[22:14] <geekosaur> it's a command

[22:14] <stmuk_> . o O ( making good use of the things that we find. Things that the everyday folks leave behind. )

[22:15] <Hotkeys> chcp 65001 just doesn't let me type unicode at all

[22:15] <geekosaur> now *that* sounds wrong

[22:16] <geekosaur> unless you are actually not typing unicode at all, or unless powershell is up to something odd (which I suppose it'd have to be if it's using unicode without changing the code page)

[22:16] <Hotkeys> I paste ² or type ² and it just doesn't exist

[22:16] <Hotkeys> idk

[22:16] <geekosaur> I don't know windows sufficiently to help at that point, sorry

[22:16] <Hotkeys> All I know is that unicode worked before the fancy new repl

[22:17] <masak> so, about those wombles

[22:17] <Hotkeys> I haven't been around much 

[22:17] <Hotkeys> so maybe it was something post-new-repl that made it borked

[22:19] *** Sgeo_ joined
[22:20] <geekosaur> [10 22:16] <Hotkeys> I paste ² or type ² and it just doesn't exist

[22:20] <geekosaur> that is something going wrong at windows level, not perl

[22:22] <Hotkeys> it seems like the perl level

[22:22] <Hotkeys> because I can type ² outside the repl still

[22:22] *** huggable left
[22:22] *** huggable joined
[22:24] *** bjz_ left
[22:25] *** aries_liuxueyang left
[22:27] *** aries_liuxueyang joined
[22:28] *** skids joined
[22:29] <Hotkeys> geekosaur: http://i.imgur.com/MP0mofy.png

[22:29] <Hotkeys> seems like the repl is doing something funky

[22:40] <Hotkeys> oh

[22:40] <Hotkeys> apparently it was something funky with rakudostar

[22:40] <Hotkeys> I just built from source and everything is fine

[22:40] *** rurban1 joined
[22:43] <Hotkeys> ah

[22:43] <Hotkeys> it's a linenoise thing

[22:44] *** rurban left
[22:45] *** bjz joined
[22:47] *** regreg left
[22:48] <timotimo> yes, linenoise doesn't understand unicode, sadly

[22:49] <Hotkeys> is there an alternative that does?

[22:50] <timotimo> Readline

[22:50] <timotimo> if you don't have LineNoise installed, but you do have Readline, it'll take that

[22:51] <Hotkeys> mmkay I'll try readline

[22:51] <Hotkeys> can panda remove modules?

[22:51] <Hotkeys> it doesn't seem to be able to

[22:51] *** rurban joined
[22:51] *** hoelzro|phone joined
[22:52] <Hotkeys> oh apparently zef can

[22:52] <hoelzro|phone> rakudo will prefer readline even if linenoise is installed

[22:52] *** bjz left
[22:52] *** FROGGS left
[22:52] <Hotkeys> I guess I'll be grabbing readline

[22:53] <hoelzro|phone> I think you can also specify RAKUDO_LINE_EDITOR, don't remember if I implemented that

[22:55] <timotimo> ah, ok

[22:55] *** rurban1 left
[22:56] <stmuk_> Hotkeys: rakudo can, zef can, panda can't and I wish I or someone else fixed panda

[22:57] <Hotkeys> mmk

[23:00] *** bjz joined
[23:00] *** spider-mario left
[23:01] *** rurban left
[23:08] *** AlexDaniel left
[23:09] *** ocbtec left
[23:15] *** hankache joined
[23:16] <hankache> hola #perl6

[23:18] *** bjz left
[23:25] *** firstdayonthejob left
[23:28] *** Zero_Dogg left
[23:28] *** Zero_Dogg joined
[23:37] <masak> ahoj, hankache 

[23:37] *** girafe left
[23:38] <hankache> hiya masak

[23:44] *** jameslen_ left
[23:45] *** jameslenz joined
[23:45] *** jameslenz left
[23:45] *** sortiz joined
[23:46] *** jameslenz joined
[23:46] <sortiz> \o #perl6

[23:46] <hankache> hi sortiz

[23:48] *** mohae_ joined
[23:48] <sortiz> \me seem like RT#128156 is reproducing like wombles! :-)

[23:48] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128156

[23:49] *** RabidGravy left
[23:50] *** jameslen_ joined
[23:50] *** jameslen_ left
[23:51] *** mohae left
[23:51] *** jameslen_ joined
[23:54] *** jameslenz left
[23:58] *** cdg left
[23:59] *** cdg joined
