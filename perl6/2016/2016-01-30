[00:00] *** salv0 left
[00:00] *** alpha123 left
[00:00] *** ggoebel15 left
[00:00] <AlexDaniel> DrForr: don't forget to document s{oo} = ‘öö’ please :)

[00:00] *** alpha123 joined
[00:00] *** salv0 joined
[00:00] *** ggoebel15 joined
[00:00] *** edehont joined
[00:03] *** eyck joined
[00:03] <RabidGravy> toodles people

[00:07] <timotimo> toodles

[00:08] *** RabidGravy left
[00:10] *** ely-se joined
[00:14] *** laz78 left
[00:14] *** bjz left
[00:15] *** alpha123 left
[00:16] *** bjz joined
[00:18] *** bjz left
[00:20] *** bjz joined
[00:20] <hoelzro> ok, changing CUR::Locally to a class fixes the JVM issue as well

[00:21] <hoelzro> so it *is* role bodies, or something about role parameterization

[00:23] *** lichtkind left
[00:26] *** koo7 left
[00:26] *** tmtowtdi left
[00:27] *** Fleurety left
[00:31] *** bjz left
[00:31] *** musiKk left
[00:31] *** firstdayonthejob left
[00:33] <ingy> tinita and I just started https://github.com/ingydotnet/yamlish-pm/tree/master

[00:33] <ingy> porting Perl 6 to Perl 5 :D

[00:33] <ingy> using leont++'s yamlish.pm6

[00:34] *** Fleurety joined
[00:34] <ingy> porting p6 rules to pegex is mostly just removing crufty syntax!

[00:34] * ingy ducks

[00:36] *** bjz joined
[00:37] <Hotkeys> Pegex?

[00:40] *** geraud left
[00:47] <dalek> doc: 756833a | (Daniel Perrett)++ | doc/Language/operators.pod:

[00:47] <dalek> doc: Index operators

[00:47] <dalek> doc: review: https://github.com/perl6/doc/commit/756833a56a

[00:47] <dalek> doc: c5feb80 | (Brock Wilcox)++ | doc/Language/operators.pod:

[00:47] <dalek> doc: Merge pull request #373 from pdl/pr-index-operators

[00:47] <dalek> doc: 

[00:47] <dalek> doc: Index operators

[00:47] <dalek> doc: review: https://github.com/perl6/doc/commit/c5feb808df

[00:49] *** lokien_ left
[00:49] *** kanishka left
[00:50] *** edehont left
[00:54] *** pyrimidi_ joined
[00:55] *** sQuEE` joined
[00:55] *** Skarsnik left
[00:55] *** [particle]1 joined
[00:56] *** laz78 joined
[00:57] *** advwp left
[00:57] *** laz78 left
[00:58] *** timo joined
[00:59] *** timo is now known as Guest1746

[00:59] *** apejens_ joined
[00:59] *** El_Che_ joined
[00:59] *** Psyche^_ joined
[00:59] *** cxreg2 joined
[00:59] *** notostraca joined
[00:59] *** Roamer`_ joined
[00:59] *** Lucas_One_ joined
[01:01] *** caasih_ joined
[01:01] *** olinkl_ joined
[01:02] *** DrParis_ joined
[01:02] *** robins joined
[01:02] *** nchambers^ joined
[01:03] *** Herby_ joined
[01:03] <Herby_> Evening, everyone!

[01:03] <Herby_> o/

[01:05] *** TEttinger left
[01:05] *** pyrimidine left
[01:05] *** Psyche^ left
[01:05] *** autarch left
[01:05] *** sQuEE left
[01:05] *** nchambers left
[01:05] *** [particle] left
[01:05] *** daxim left
[01:05] *** anshin left
[01:05] *** timotimo left
[01:05] *** Bucciarati left
[01:05] *** cxreg left
[01:05] *** El_Che left
[01:05] *** DrParis left
[01:05] *** robinsmidsrod left
[01:05] *** Roamer` left
[01:05] *** apejens left
[01:05] *** olinkl left
[01:05] *** Lucas_One left
[01:05] *** caasih left
[01:05] <Herby_> Wow. I'm that bad?

[01:05] *** Bucciarati joined
[01:05] <Herby_> Question:  How would I download an image from a URL, with Perl 6?

[01:05] *** daxim joined
[01:05] *** olinkl_ is now known as olinkl

[01:05] *** autarch joined
[01:05] *** DrParis_ is now known as DrParis

[01:06] <AlexDaniel> huggable: curl

[01:06] *** yqt left
[01:06] <huggable> AlexDaniel, nothing found

[01:06] *** DrParis is now known as Guest89154

[01:06] <AlexDaniel> huggable: wget

[01:06] <huggable> AlexDaniel, nothing found

[01:06] <AlexDaniel> Herby_: try HTTP::UserAgent

[01:07] *** bjz left
[01:07] <AlexDaniel> Herby_: I'm not sure how well it is going to work with binary stuff though

[01:07] <Herby_> AlexDaniel : I'll give it a whirl and let you know how it works.  Thanks!

[01:08] *** caasih_ is now known as caasih

[01:09] <AlexDaniel> Herby_: HTTP::UserAgent.new(:useragent<firefox_linux>); $c.get(‘https://somelink.org/test.png’); # that's a good start

[01:09] <AlexDaniel> whoops

[01:09] <AlexDaniel> Herby_: my $c = HTTP::UserAgent.new(:useragent<firefox_linux>); $c.get(‘https://somelink.org/test.png’); # that's a good start

[01:10] *** anshin joined
[01:10] <Herby_> Thanks for the head start, let me give it a try

[01:10] * flussence prefers HTTP::Tiny, mostly because if it breaks it's more likely to get fixed

[01:10] *** raiph joined
[01:10] *** bjz joined
[01:11] *** notostraca is now known as TEttinger

[01:11] <Herby_> is HTTP::Tiny more active?

[01:11] <Herby_> in regards to improvements/fixes etc?

[01:11] *** advwp joined
[01:12] <AlexDaniel> 434 commits vs 19. I'd say no ( if HTTP::Tinyish is what you've meant )

[01:12] *** labster left
[01:12] <ingy> Hotkeys: Pegex is p6rules... for the rest of us

[01:12] <AlexDaniel> it also has no tests

[01:13] <AlexDaniel> flussence: or did you mean P5 HTTP::Tiny?

[01:13] <flussence> oh my bad, Net::HTTP is the right name

[01:13] <AlexDaniel> okay

[01:15] <AlexDaniel> flussence: what do you mean by “it's more likely to get fixed”?

[01:16] <AlexDaniel> by the way, I'm pissed off by HTTP::Tinyish tests: https://github.com/shoichikaji/perl6-HTTP-Tinyish/blob/master/t/01-basic.t

[01:19] <Herby_> AlexDaniel, there is something is doesn't like about .png files

[01:19] <Herby_> getting some errors centered around <Problem decoding content>

[01:20] <flussence> AlexDaniel: by that I mean, the author's easier to get a hold of here (and they're usually one of the first to complain if upstream code breaks everything :)

[01:20] <AlexDaniel> .seen sergot

[01:20] <yoleaux> I saw sergot 12 Jan 2016 14:22Z in #perl6: <sergot> moritz++

[01:21] <Herby_> .seen ugexe

[01:21] *** gtodd1 left
[01:21] <yoleaux> I saw ugexe 29 Jan 2016 19:54Z in #perl6: <ugexe> does p6doc still need a 'p6doc.bat'? CU::R::I should handle that now

[01:21] <Herby_> That's a neat little feature

[01:22] <AlexDaniel> Herby_: see these tests: https://github.com/sergot/http-useragent/blob/master/t/220-binary-content.t

[01:23] *** addison left
[01:23] <AlexDaniel> Herby_: hm, it does not look like these tests actually pass

[01:24] <skids> Looks like some of them require a live connection, too.

[01:24] <yoleaux> 29 Jan 2016 22:20Z <ZoffixWin> skids: koalatee is this: https://github.com/perl6/modules.perl6.org/blob/master/lib/ModulesPerl6/Metrics/Koalatee.pm#L21 it was never really finished, 'cause we decided to have MetaCPAN-like thing for modules instead of the current thing

[01:24] <Herby_> that would do it.  I made my example resemble the test, and it still fails with "problem decoding content"

[01:25] *** gtodd joined
[01:26] <AlexDaniel> Herby_: yup, eh. Perhaps create an issue and move on to another alternative :)

[01:26] <Herby_> i'm even worse at github then I am at perl 6

[01:26] <Herby_> but i'll see if i can find a way :)

[01:26] <AlexDaniel> https://github.com/sergot/http-useragent/issues/new

[01:26] <AlexDaniel> here

[01:28] *** Guest1746 is now known as timotimo

[01:28] *** addison_ joined
[01:31] <Herby_> Hmm.  Net::HTTP::GET is running without an error, but I don't see it saving the actual file anywhere...

[01:32] <Herby_> maybe I need to spurt the response to a file?

[01:33] <ugexe> say Net::HTTP::GET($url, :%header).content (or .body for the raw buf)

[01:33] <timotimo> sounds likely

[01:33] *** bjz left
[01:34] *** bjz joined
[01:34] <Herby_> "Don't know how to decode this content..."

[01:35] <timotimo> probably just need to .decode("the-right-coding")

[01:35] <ugexe> .body.decode(whatever) then yeah

[01:36] <Herby_> speak of the devil, and he appears :)

[01:36] <Herby_> for testing purpose, trying to use Net::HTTP::GET on this 'http://imgs.xkcd.com//comics//woodpecker.png'

[01:36] <timotimo> oh

[01:36] <Herby_> from what I can gather, he allows the getting of images, has an api etc

[01:36] <timotimo> that's not something you'd want to decode

[01:36] <Herby_> yeah, kind of stumped

[01:36] <timotimo> it's a binary file that you'll just want to output directly into a file

[01:37] <timotimo> so you'll want the .body rather than the .content

[01:37] <skids> if it's a png probably $some-io.write(.body)

[01:37] <Herby_> k, spurting is no good for this?

[01:37] <skids> Not sure.  Never looked into that.

[01:37] *** labster joined
[01:38] <timotimo> hm, does spurting have a :raw or something?

[01:39] <Herby_> yall are some miracle workers :)

[01:39] <Herby_> got it working

[01:39] <Herby_> spurt "test.png", $response.body, :bin

[01:39] *** addison_ left
[01:39] <timotimo> apparently spurt only wants :enc

[01:40] <Herby_> actually, I didn't even need :bin.  looks like it wanted the .body like you said

[01:40] <Herby_> progress!

[01:41] *** ely-se left
[01:42] *** abaugher_ left
[01:42] <timotimo> in the test file called "spurt", only slurp with :bin is tested

[01:42] <timotimo> oh

[01:42] <timotimo> it seems like you just spurt with a Buf

[01:45] <timotimo> spurt does in fact take a :bin

[01:46] <timotimo> http://doc.perl6.org/routine/spurt  -  it'd be nice if someone could add that to the docs here

[01:46] <AlexDaniel> how can I get all Enum values?

[01:46] <timotimo> YourEnum.keys

[01:46] <timotimo> well, actually

[01:46] <timotimo> YourEnum.values, since you want the values

[01:46] <timotimo> actually, perhaps YourEnum::.values

[01:47] <AlexDaniel> m: enum Animal <Cat Dog Monkey>; .say for Animal.keys

[01:47] <camelia> rakudo-moar 780192: ( no output )

[01:47] <AlexDaniel> m: enum Animal <Cat Dog Monkey>; .say for Animal.values

[01:47] <camelia> rakudo-moar 780192: ( no output )

[01:47] <AlexDaniel> what am I doing wrong?

[01:48] <timotimo> m: enum Animal <Cat Dog Monkey>; .say for Animal::.values

[01:48] <camelia> rakudo-moar 780192: OUTPUT«Dog␤Cat␤Monkey␤»

[01:48] <AlexDaniel> ah, ::

[01:48] <AlexDaniel> right, makes sense

[01:49] <AlexDaniel> m: enum Animal <Cat Dog Monkey>; .say for Animal::.keys

[01:49] <camelia> rakudo-moar 780192: OUTPUT«Dog␤Cat␤Monkey␤»

[01:49] <AlexDaniel> m: enum Animal <Cat Dog Monkey>; say Animal::.keys.perl

[01:49] <camelia> rakudo-moar 780192: OUTPUT«("Dog", "Cat", "Monkey").Seq␤»

[01:49] <AlexDaniel> m: enum Animal <Cat Dog Monkey>; say Animal::.values.perl

[01:49] <camelia> rakudo-moar 780192: OUTPUT«(Animal::Dog, Animal::Cat, Animal::Monkey).Seq␤»

[01:49] <AlexDaniel> ok

[01:54] *** edehont joined
[01:56] <skids> m: enum Animal <Cat Dog Monkey>; Animal::{ }.perl.say; Animal.perl.say;

[01:56] <camelia> rakudo-moar 780192: OUTPUT«{:Cat(Animal::Cat), :Dog(Animal::Dog), :Monkey(Animal::Monkey)}␤Animal␤»

[01:59] *** bjz left
[02:00] *** somerandomguy left
[02:01] *** edehont left
[02:03] *** sufrostico left
[02:08] *** Guest89154 is now known as DrParis__

[02:11] *** sftp left
[02:11] *** labster left
[02:12] *** xpen joined
[02:13] *** labster joined
[02:14] *** labster left
[02:22] *** jeek joined
[02:32] *** abaugher joined
[02:42] *** molaf_ joined
[02:44] *** rsiqueira joined
[02:46] *** molaf left
[02:50] *** jeek left
[02:51] *** wamba left
[02:55] *** rsiqueira left
[03:00] *** bjz joined
[03:10] *** jeek joined
[03:13] *** cdg joined
[03:19] *** cdg left
[03:31] *** SCHAAP137 left
[03:36] *** noganex_ joined
[03:38] *** kaare_ joined
[03:39] *** noganex left
[03:40] *** bpmedley left
[04:09] <zostay> m: my %x = z => 'a', y => [1, 2, 3]; class { has Str $.z; has Int @.y; }.new(|%x);

[04:09] <camelia> rakudo-moar 780192: OUTPUT«Type check failed in assignment to @!y; expected Int but got Array␤  in block <unit> at /tmp/HQ0XMWd2nx line 1␤␤»

[04:10] <zostay> is there a way to pass in a :@foo param using a variable like |whatever?

[04:16] <zostay> m: my $x = \(z => 'a', y => [1,2,3]); class { has Str $.z; has Int @.y; }.new(|$x);

[04:16] <camelia> rakudo-moar 780192: ( no output )

[04:16] <zostay> captures > hashes

[04:22] <Herby_> m: "foobarrklubsuggdug".comb(10)>>.say

[04:22] <camelia> rakudo-moar 780192: OUTPUT«foobarrklu␤bsuggdug␤»

[04:28] <Herby_> if I want to dip my toes into databases, is DBIsh my best choice?

[04:28] <Herby_> was thinking about creating a small sqlite db

[05:02] *** revhippie left
[05:04] *** kid51 joined
[05:05] *** hankache joined
[05:07] <hankache> o/ #perl6

[05:09] <Herby_> \o

[05:10] <Herby_> \o/

[05:13] <AlexDaniel> what “batch” and “degree” actually mean in ｢hyper｣?

[05:14] <AlexDaniel> let's say I want 4 parallel workers. So I set degree to 4 and I only get 1 worker

[05:14] <AlexDaniel> so I set both to 4

[05:15] <AlexDaniel> ah, right, now I get 4

[05:15] <AlexDaniel> nevermind

[05:15] <hankache> degree = workers

[05:16] *** xinming left
[05:16] <hankache> batch = how many values 

[05:16] <AlexDaniel> hankache: how many values what?

[05:17] <hankache> AlexDaniel process X values together

[05:18] <Herby_> m: say <a b c d e f>.rotor(3)

[05:18] <camelia> rakudo-moar 780192: OUTPUT«((a b c) (d e f))␤»

[05:18] <Herby_> m: say <a b c d e f g h>.rotor(3, :partial)

[05:18] <camelia> rakudo-moar 780192: OUTPUT«((a b c) (d e f) (g h))␤»

[05:18] <AlexDaniel> like, queue X values?

[05:19] <AlexDaniel> this is also not documented, by the way

[05:19] *** bjz left
[05:20] <hankache> .race(batch => 10)

[05:20] <hankache> processing the pipeline on batches of 10 items at a time.

[05:21] <hankache> AlexDaniel http://www.jnthn.net/papers/2015-spw-concurrency.pdf

[05:21] <AlexDaniel> I've seen that, it didn't really help. Perhaps I'm stupid

[05:22] <skids> You use batch because sometimes it is not efficient to start a thread for each value.

[05:22] <hankache> i wish there was accurate doc on it

[05:23] <AlexDaniel> skids: “start a thread for each value”? Didn't I already specify with “degree” that I have 4 parallel workers (possibly threads)

[05:23] *** kid51 left
[05:23] <AlexDaniel> or are these not reused?

[05:24] <skids> OK, sorry -- have threads pull values one by one.

[05:24] <skids> e.g. for memory/cache locality.

[05:24] <skids> And as far as whether they workers get reused it may be up to the implementation.

[05:24] *** Herby_ left
[05:26] <AlexDaniel> ok so the worker will fetch X (batch) values when it starts. Then, once it is finished with those, it will fetch another X (batch) values?

[05:27] <skids> Yes (or another worker that fetches X will replace it, who knows).  So if you have 4 threads all popping off a list, they have to syncronize memory accesses at each pop.  If they each pop 10 at a time, there are less syncronization points.

[05:27] <AlexDaniel> okay

[05:28] <AlexDaniel> thanks

[05:30] <AlexDaniel> “work in batches of 64 values at a time” this does not really describe it though. Or am I the only one having a hard time to read that sentence in a right way?

[05:32] <skids> It might be clearer to say that "each worker works on a batch of 64 values at a time"

[05:34] <skids> (Assuming that is actually what is meant.)

[05:34] <AlexDaniel> I'm not the language guy but “each worker fetches a batch of 64 values at a time” would have made it crystal clear to me

[05:35] *** raiph left
[05:36] <skids> Yeah it could be interpreted as batch => 64 degree=> 4 meaning 4 workers each with 16 values.

[05:39] <AlexDaniel> not only that but it also escapes me how a worker can work on a batch of 64 values (given our specific context) when it is supposed to work on only one. But again, I'm not a native speaker so I'm probably reading it incorrectly

[05:42] <ugexe> maybe its like rotor and runs the worker over the sub list

[05:42] <skids> "batch" has connotations that usually prevent it from being interpreted as "in-parallel"

[05:42] *** Cabanossi left
[05:43] <skids> (and actually in computing, too, e.g. batch files and database batch jobs)

[05:44] *** Cabanossi joined
[05:45] *** xinming joined
[05:48] <skids> Though I guess the culinary form of the term does imply parallelism

[05:51] * skids chalks it up to the same semantic drift that brought us "native" meaning code not in the native language being spoken.

[06:03] *** AlexDaniel left
[06:08] *** davido joined
[06:13] *** yurivish left
[06:25] *** bpmedley joined
[06:38] *** lokien_ joined
[06:40] *** yurivish joined
[06:40] *** xpen left
[06:53] *** lizmat left
[06:55] *** CIAvash joined
[07:07] *** hankache left
[07:07] *** edehont joined
[07:17] *** domidumont joined
[07:27] *** azawawi joined
[07:27] <azawawi> hi

[07:28] *** hankache joined
[07:45] *** jeek left
[07:46] *** edehont left
[07:51] *** protium joined
[07:51] *** davido left
[07:52] *** sortiz left
[07:57] *** wamba joined
[08:06] *** domidumont left
[08:17] *** RabidGravy joined
[08:17] *** darutoko joined
[08:27] *** alnewkirk joined
[08:31] *** domidumont joined
[08:36] *** domidumont left
[08:36] *** domidumont joined
[08:38] <masak> morning, #perl6

[08:39] *** protium left
[08:42] <dalek> doc: d81cbd2 | moritz++ | doc/Type/List.pod:

[08:42] <dalek> doc: Link to Zoffix's blog post on .rotor

[08:42] <dalek> doc: review: https://github.com/perl6/doc/commit/d81cbd29e2

[08:44] *** hankache left
[08:45] *** _ramix_ joined
[08:49] *** lokien_ left
[08:51] <nine> .tell llfourn thanks for working on the require/import stuff :)

[08:51] <yoleaux> nine: I'll pass your message to llfourn.

[08:54] <dalek> rakudo/nom: f658d4c | donaldh++ | src/core/CompUnit/Repository/Locally.pm:

[08:54] <dalek> rakudo/nom: Resolve / work around "Missing serialize function for REPR ContextRef" on JVM.

[08:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f658d4c5b1

[08:54] <dalek> rakudo/nom: ccd2bcc | niner++ | src/core/CompUnit/Repository/Locally.pm:

[08:54] <dalek> rakudo/nom: Merge pull request #697 from donaldh/precomp

[08:54] <dalek> rakudo/nom: 

[08:54] <dalek> rakudo/nom: Resolve "Missing serialize function for REPR ContextRef on JVM

[08:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ccd2bccecf

[09:00] *** labster joined
[09:03] *** fireartist joined
[09:07] *** firstdayonthejob joined
[09:07] <dalek> rakudo/query_repos: 1dd815a | (Stefan Seifert)++ | src/core/CompUnit/Repository/Installation.pm:

[09:07] <dalek> rakudo/query_repos: Fixes for installing from outside a dists directory

[09:07] <dalek> rakudo/query_repos: 

[09:07] <dalek> rakudo/query_repos: Use the stable names instead of local file paths when generating file

[09:07] <dalek> rakudo/query_repos: ids. This way those ids no longer depend on the current working

[09:07] <dalek> rakudo/query_repos: directory. Previously we used  the path like "./lib/Foo.pm6" for

[09:07] <dalek> rakudo/query_repos: generating the id and would end up with a different id if installing the

[09:07] <dalek> rakudo/query_repos: file by using e.g. "modules/Foo/lib/Foo.pm6".

[09:07] <dalek> rakudo/query_repos: 

[09:07] <dalek> rakudo/query_repos: Only affects newly installed dists.

[09:07] <dalek> rakudo/query_repos: review: https://github.com/rakudo/rakudo/commit/1dd815afdb

[09:07] *** hankache joined
[09:12] <azawawi> http://pasteboard.co/1aYApl0P.png    # is the output image of https://github.com/azawawi/perl6-magickwand/blob/master/examples/02-effects.pl6 :)

[09:19] *** pmurias joined
[09:21] *** hankache left
[09:31] <RabidGravy> kewl

[09:32] <RabidGravy> looking good there matey

[09:32] *** hankache joined
[09:32] <hankache> anyone knows how to use the command line option parser?

[09:33] <moritz> hankache: declare a sub MAIN with a signature that corresponds to to things you want

[09:33] <moritz> m: sub MAIN($input, Bool :$verbose) { }

[09:33] <camelia> rakudo-moar ccd2bc: OUTPUT«Usage:␤  /tmp/YcKOJX_fuk [--verbose] <input> ␤»

[09:34] <hankache> thanks moritz

[09:36] *** labster left
[09:42] <[Tux]> ===SORRY!=== Error while compiling /pro/3gl/CPAN/Text-CSV6/.panda-work/1454146926_2/lib/Inline/Perl5.pm6

[09:42] <[Tux]> An exception occurred while evaluating a BEGIN

[09:42] <[Tux]> at /pro/3gl/CPAN/Text-CSV6/.panda-work/1454146926_2/lib/Inline/Perl5.pm6:60

[09:42] <[Tux]> Exception details:

[09:42] <[Tux]>   Cannot support 128 bit NVs yet.

[09:42] <[Tux]>     in code  at /pro/3gl/CPAN/Text-CSV6/.panda-work/1454146926_2/lib/Inline/Perl5.pm6 line 60

[09:43] <nine> Wait...what?!

[09:44] <[Tux]> rm -rf moar-nom;rakudowbrew build moar;rakudobrew build-panda;panda install Inline::Perl5

[09:44] *** labster joined
[09:44] <azawawi> hankache: http://doc.perl6.org/language/functions#sub_MAIN

[09:44] *** labster left
[09:45] <[Tux]> https://gist.github.com/Tux/c5badf213eb68e803785

[09:45] *** telex left
[09:45] <nine> [Tux]: your Perl 5 seems to be claiming to use 128 bit floating point values

[09:45] <azawawi> [Tux]: shouldnt `rakudobrew nuke moar` fix the problem?

[09:46] *** telex joined
[09:46] <[Tux]> nine: it does, I build with -Duselongdouble

[09:46] <hankache> thanks azawawi

[09:47] *** jast left
[09:47] *** _ramix_ left
[09:47] *** jast joined
[09:47] <azawawi> hankache: np

[09:49] <[Tux]> nine, does that explain enough or do you need more feedback?

[09:51] *** johan left
[09:51] *** nine left
[09:52] *** nine joined
[09:53] *** molaf_ left
[09:58] *** pRiVi left
[09:58] *** pRiVi joined
[10:03] <nine> [Tux]: yep, that's exactly why put this check in. Adding support for your perl would involve changes to MoarVM, NativeCall and then Inline::Perl5.

[10:04] <nine> [Tux]: I'm actually a bit surprised. I thought longdouble would mean 80 bit, not the full 128.

[10:04] <nine> Oh, but that's probably 128 bit storage size of which 80 bits are actually used

[10:05] <nine> Still the same issue though as NativeCall currently only supports 32 and 64 bit floats

[10:05] *** fireartist left
[10:14] <azawawi> can semicolons be used instead of commas inside an `enum SomeType ( a => 1, b => 2 )` ?

[10:24] <moritz> azawawi: try it and see?

[10:24] <moritz> and: why would you even want that?

[10:26] <azawawi> moritz: because i just encountered a situation where putting a ; by mistake causes an enum is export { ... } to not be exported and complain only about undefined variable. :)

[10:26] <azawawi> moritz: that's why i asked. i wanted to know if the behavior was right or wrong

[10:34] <hankache> what was the syntax of use lib?

[10:35] <RabidGravy> use lib 'lib'

[10:35] <azawawi> RabidGravy: slow day :)

[10:36] *** rindolf joined
[10:36] <RabidGravy> I'm struggling with motivation this morning

[10:38] <azawawi> im converting http://www.imagemagick.org/script/examples.php to https://github.com/azawawi/perl6-magickwand/blob/master/examples/02-effects.pl6 :)

[10:38] <azawawi> all this work so far and only 1 github star :)

[10:41] <hankache> thanks RabidGravy

[10:47] <RabidGravy> azawawi, it's weird like that, I've got things that aren't even finished that have stars and things that are genuinely useful that have none

[10:48] * RabidGravy contemplates implementing .at() in Chronic

[10:50] <azawawi> RabidGravy: ce la vie

[10:50] <RabidGravy> ceci ce n'est pas une etoile

[10:53] <azawawi> :)

[10:54] <hankache> oh la la

[10:54] <azawawi> RabidGravy: it is the target audience. If this was the python scientific community, OpenCV and ImageMagick are top priority

[10:55] <azawawi> RabidGravy: that's why im going to talk with #PDL (Chris Marshal, Zaki Muggal, ...)

[10:56] *** cognominal left
[10:56] <hankache> say you have a variable $classname can you build an object like that: my $obj = module::$classname ? 

[10:57] <RabidGravy> ::("module::$classname").new

[10:58] <RabidGravy> the ::($str) is runtime symbol lookup

[11:00] <hankache> thanks mate

[11:00] <RabidGravy> e.g.  

[11:00] *** kanishka joined
[11:01] <RabidGravy> m: my $d = 'DateTime'; say ::($d).now

[11:01] <camelia> rakudo-moar ccd2bc: OUTPUT«2016-01-30T12:01:03.445102+01:00␤»

[11:04] <pmurias> azawawi: opencv is something that I'm interested in using

[11:04] <azawawi> pmurias: for?

[11:05] <pmurias> processing scanned receipts

[11:06] <pmurias> azawawi: I'm currently just directly using C++ but playing around in Perl 6 would be more fun

[11:08] <pmurias> OTOH the actuall stuff that needs to use opencv is fairly limited so even writing it in C++ and then passing the OCR'ed text to a Perl 6 is fine

[11:08] <azawawi> pmurias: great. If you can provide me with what modules are you currently interested then

[11:09] <azawawi> pmurias: i can put them on my todo list

[11:12] <pmurias> so far I have been using MSER/drawing points and stuff for debugging and doing things like converting to gray scale/cropping and saving parts of the image

[11:12] <azawawi> http://pasteboard.co/1b6oQ17I.png # Image compose-ing is here... watch camelia on the far right of the image 

[11:13] <azawawi> well magickwand can do the cropping/grayscaling far faster and easier than opencv btw

[11:13] <azawawi> and soon the drawing part

[11:13] <azawawi> if it is image processing => imagemagick

[11:13] <azawawi> if it is object detection  =>  opencv

[11:15] * azawawi wishes https://github.com/timo/iperl6kernel would actually work

[11:16] <azawawi> stuff like https://metacpan.org/pod/distribution/Devel-IPerl/example/20150209_IPerl_display_demo.pod is pretty useful to perl6 / opencv / magickwand

[11:16] <RabidGravy> right off out to the seaside for a bit, hardly been out of the house all week

[11:19] <azawawi> it is cold outside :)

[11:19] <azawawi> RabidGravy: enjoy your time :)

[11:20] <timotimo> azawawi: did you actually try it yet?

[11:20] <azawawi> pmurias: what opencv version are you using btw?

[11:20] <azawawi> timotimo: :)

[11:20] <timotimo> i thought it could work a little bit

[11:21] *** RabidGravy left
[11:21] <azawawi> timotimo: it is not on the modules list btw

[11:21] <azawawi> timotimo: http://modules.perl6.org/update.log

[11:22] <timotimo> no surprise ...

[11:23] <pmurias> azawawi: 3.1.0

[11:23] <azawawi> timotimo: how do you run it? 

[11:23] <timotimo> haven't tried yet |:

[11:23] *** zakharyas joined
[11:23] <timotimo> maybe that's why arnsholt stopped working on it

[11:24] <azawawi> pmurias: im wrapping 2.4.x atm

[11:25] <pmurias> I don't think the api changed much

[11:25] <azawawi> pmurias: let me check

[11:25] <pmurias> I'm using 3.1.0 because I wanted to use some contrib modules that didn't work anyway

[11:29] <azawawi> contrib seems to never work

[11:30] <azawawi> i tried them also

[11:30] <azawawi> contrib is a way for letting stuff die slowly :)

[11:31] *** perlawhirl joined
[11:31] <azawawi> pmurias: this is the one you're using right? http://docs.opencv.org/2.4.11/modules/features2d/doc/feature_detection_and_description.html?highlight=mser#MSER : public FeatureDetector

[11:32] <pmurias> azawawi: yes

[11:33] <azawawi> pmurias: cool... thanks

[11:33] <azawawi> off to lunch ... fish & chips :)

[11:35] *** SCHAAP137 joined
[11:36] *** musiKk joined
[11:43] *** hankache left
[11:45] *** vendethiel joined
[11:46] *** Fiora_ joined
[11:46] <Fiora_> Is Perl6 a regular language?

[11:47] *** spider-mario joined
[11:47] <timotimo> what use is a regular language for programming? :\

[11:47] *** TEttinger left
[11:47] <timotimo> if i couldn't nest parenthesis, i'd be pretty sad

[11:49] <pmurias> timotimo: just imagine how fast the syntax highlighting would be!;)

[11:49] <vendethiel> o/, #perl6

[11:50] <timotimo> oh, yeah, it'd be ridiculously fast

[11:50] <pmurias> vendethiel: \o

[11:50] <timotimo> and it'd hardly take any memory

[11:51] <Fiora_> I'm trying to understand how regex is being used to parse Perl6.  If Perl6 is not a regular language then how could that be possible?

[11:51] *** robins is now known as robinsmidsrod

[11:51] <timotimo> well, "regex" hasn't meant "regular expression" in a very, very long while now

[11:51] <timotimo> 'perl6 "regexes"' are used to parse perl6

[11:52] <timotimo> they allow for things like recursion, captures, and backreferences. that's the very least you'd want to have for a programming language, i think

[11:53] <Fiora_> can Perl6 regexes be used to parse HTML?

[11:53] <timotimo> yeah

[11:53] <Fiora_> hmm, so is there a difference between Perl6 regexs and Perl5?

[11:53] <timotimo> yeah, a bunch of changes

[11:53] <vendethiel> timotimo: are you implying brainfuck isn't the perfect language?

[11:54] <timotimo> for one, the syntax has been re-organized

[11:54] <timotimo> vendethiel: yes

[11:54] <vendethiel> Fiora_: tons of changes :P

[11:54] <vendethiel> timotimo: you make me sad :P

[11:54] <timotimo> and perl6 regexes are much easier to compose from smaller pieces

[11:54] <timotimo> and they are also extensible after their first declaration

[11:54] <timotimo> you can derive new "grammars" from existing grammars

[11:55] <timotimo> very much like a class can derive from another

[11:55] <pmurias> vendethiel: it's not a regular language and as such can't be perfect

[11:56] <timotimo> pmurias: well, is [+++]]]]] a valid program?

[11:56] <timotimo> it'd give a run-time error, but does that mean it's not a valid brainfuck program?

[11:56] <vendethiel> timotimo: my brainfuck interpreter just ignores that :>

[11:57] <Fiora_> so the accepted answer to this question is wrong?  http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags

[11:57] <pmurias> timotimo: aren't the square brackets required to match? (according to wikipedia)

[11:58] <timotimo> Fiora_: perl6 regexes are actually quite usable to parse things like HTML and XML. perl5 regexes *can* do that, but it's super fiddly. i wouldn't know how to use perl5 regexes to parse HTML, actually

[11:59] *** CIAvash left
[12:00] <timotimo> Fiora_: https://github.com/afiskon/p6-xml-parser-tiny/blob/master/lib/XML/Parser/Tiny/Grammar.pm6 - have a look at this xml parser from the XML::Parser::Tiny module

[12:01] <vendethiel> Fiora_: not wrong, they just only account for PCRE

[12:01] <timotimo> vendethiel: but PCRE can recursively match

[12:01] <vendethiel> timotimo: sssh, don't tell 'em

[12:01] <timotimo> it's definitely a footgun, though

[12:01] *** johan joined
[12:02] <vendethiel> to be fair, named groups in PCRE are really complex to get right, and totally inconsistent between languages

[12:06] <pmurias> vendethiel: re wrong, there is a huge difference between what "regular expressions" as used in computer science and what actuall computer languages have as "regexes"

[12:06] *** firstdayonthejob left
[12:06] <pmurias> meant Fiora_:

[12:07] <vendethiel> (definitely agreed)

[12:07] *** uruwi joined
[12:07] <uruwi> hello

[12:08] <uruwi> Does anyone know the difference between join and catpath for IO::Spec?

[12:08] <flussence> join stringifies it

[12:08] <uruwi> What about catpath?

[12:08] <uruwi> I also find it unusual that they take 3 arguments, too.

[12:09] <uruwi> oh, catpath returns a list?

[12:10] *** Skarsnik joined
[12:10] *** leont joined
[12:10] <Skarsnik> hello

[12:14] *** ely-se joined
[12:14] *** zakharyas left
[12:14] <timotimo> uruwi: it could very well be that IO::Spec got join from Any or something?

[12:14] <uruwi> help, I can't find SeekType.

[12:15] <timotimo> m: say IO::Spec.^can("join").candidates>>.perl

[12:15] <camelia> rakudo-moar ccd2bc: OUTPUT«Method 'candidates' not found for invocant of class 'List'␤  in block <unit> at /tmp/VovEcP9OjX line 1␤␤»

[12:15] <timotimo> m: say IO::Spec.^can("join")>>.candidates>>.perl

[12:15] <camelia> rakudo-moar ccd2bc: OUTPUT«((Method+{<anon|52648288>}.new))␤»

[12:15] <timotimo> m: say IO::Spec.^can("join")[0].candidates>>.signature>>.perl

[12:15] <camelia> rakudo-moar ccd2bc: OUTPUT«(:($: $separator = { ... }, *%_))␤»

[12:15] <timotimo> no invocant, eh? :\

[12:16] *** lnrdo_ joined
[12:16] <flussence> well it probably doesn't print it because it's a method on Any...

[12:16] <uruwi> The documentation for the seek method for IO::Handle mentions a SeekType, but I don't see it anywhere else.

[12:17] <flussence> m: say SeekType

[12:17] <camelia> rakudo-moar ccd2bc: OUTPUT«(SeekType)␤»

[12:17] <flussence> m: say SeekType.enums

[12:17] <camelia> rakudo-moar ccd2bc: OUTPUT«SeekFromBeginning => 0, SeekFromCurrent => 1, SeekFromEnd => 2␤»

[12:18] <uruwi> m: constant SeekFromBeginning = 0;

[12:18] <camelia> rakudo-moar ccd2bc: ( no output )

[12:18] <Skarsnik> huggable, SeekType

[12:18] <huggable> Skarsnik, nothing found

[12:18] <uruwi> Yeah, I have 2015.09 on Windows.

[12:21] <timotimo> that's even before christmas

[12:22] <timotimo> sadly we don't have a rakudo star .msi yet

[12:22] <timotimo> for 2016.01 i mean

[12:23] *** kent\n joined
[12:24] *** firstdayonthejob joined
[12:25] <timotimo> actually, the release isn't out yet it seems

[12:26] <uruwi> How to write to a file that might not exist?

[12:27] <timotimo> as long as you have a "write" mode set, it'll create it if needed

[12:28] <timotimo> so, supply :w to open

[12:28] *** Fiora_ left
[12:29] <uruwi> Doesn't work; must be the old version.

[12:29] <uruwi> Or is it because I'm trying to create a file in a nonexistent directory?

[12:30] <dalek> rakudo/nom: 218ce06 | (Salvador Ortiz)++ | src/core/Setty.pm:

[12:30] <dalek> rakudo/nom: Fix for RT#127402: Set.hash stringifies its objects

[12:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/218ce063e9

[12:30] <dalek> rakudo/nom: 4f0c502 | timo++ | src/core/Setty.pm:

[12:30] <dalek> rakudo/nom: Merge pull request #698 from salortiz/setty_hash

[12:30] <dalek> rakudo/nom: 

[12:30] <dalek> rakudo/nom: Fix for RT#127402: Set.hash stringifies its objects

[12:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4f0c502d67

[12:31] <uruwi> Oh.

[12:32] <timotimo> yeah, we don't create folders for you

[12:32] <timotimo> but what we should do is give a better error message

[12:35] *** Actualeyes joined
[12:36] *** dolmen joined
[12:45] *** SCHAAP137 left
[12:46] <nine> Still the same issue though as NativeCall currently only supports 32 and 64 bit floats

[12:47] <nine> stmuk: https://gist.github.com/niner/06792102587a79940294

[12:47] <azawawi> how do i iterate on the keys on a enum?

[12:48] *** pochi_ is now known as pochi

[12:48] <azawawi> s/on a/of a/

[12:51] *** lnrdo_ left
[12:54] <azawawi> m: enum Foo <a b c>; for Foo.enums.keys -> $key { zz($key); }; sub zz(Foo $foo) { }

[12:54] <camelia> rakudo-moar 4f0c50: OUTPUT«Type check failed in binding $foo; expected Foo but got Str␤  in sub zz at /tmp/UO5YJRkel3 line 1␤  in block <unit> at /tmp/UO5YJRkel3 line 1␤␤»

[12:57] *** perlawhirl left
[13:00] *** uruwi left
[13:02] *** ely-se left
[13:03] <stmuk> nine: ty

[13:04] <timotimo> you want MyEnum::.keys

[13:05] <timotimo> but actually you want .values, if you expect to get a Foo object

[13:05] <timotimo> the .key is just a string

[13:06] <azawawi> m: enum Foo <a b c>; for Foo.enums.keys -> $key { say $key ~ " => " ~ zz(Foo($key)); }; sub zz(Foo $foo) { return $foo.Int }

[13:06] <camelia> rakudo-moar 4f0c50: OUTPUT«Use of uninitialized value of type Foo in numeric context  in sub zz at /tmp/9dyfzNuDMn line 1␤a => 0␤Use of uninitialized value of type Foo in numeric context  in sub zz at /tmp/9dyfzNuDMn line 1␤c => 0␤Use of uninitialized value of type Foo in nu…»

[13:06] <timotimo> m: enum Foo <a b c>; .perl.say for Foo.enums

[13:06] <camelia> rakudo-moar 4f0c50: OUTPUT«:a(0)␤:c(2)␤:b(1)␤»

[13:06] <timotimo> m: enum Foo <a b c>; .perl.say for Foo::.values

[13:06] <camelia> rakudo-moar 4f0c50: OUTPUT«Foo::a␤Foo::c␤Foo::b␤»

[13:06] <timotimo> m: enum Foo <a b c>; .perl.say for Foo::.keys

[13:06] <camelia> rakudo-moar 4f0c50: OUTPUT«"a"␤"c"␤"b"␤»

[13:06] <timotimo> ^-

[13:10] <azawawi> timotimo: cool but still didnt fix the above code :)

[13:10] *** jeek joined
[13:10] <timotimo> yeah, for that you want Foo::($key) instead of Foo($key)

[13:10] <azawawi> timotimo: the problem is that it becomes Str and i need Foo

[13:10] <timotimo> you can only Foo(1)

[13:11] <azawawi> m: enum Foo <a b c>; zz(Foo::($_.key)) for Foo.enums; sub zz(Foo $foo) { return $foo.Int }

[13:11] <camelia> rakudo-moar 4f0c50: OUTPUT«5===SORRY!5=== Error while compiling /tmp/HhCbpQD_pQ␤Combination of indirect name lookup and call not supported␤at /tmp/HhCbpQD_pQ:1␤------> 3enum Foo <a b c>; zz(Foo::($_.key)7⏏5) for Foo.enums; sub zz(Foo $foo) { retu␤    expecting any …»

[13:11] <timotimo> oh, what.

[13:11] * azawawi reads https://design.perl6.org/S12.html#The_Enumeration_Type

[13:12] <[Tux]> test            22.341

[13:12] <[Tux]> test-t          12.189

[13:12] <[Tux]> csv-parser       0.223

[13:17] <azawawi> timotimo: so it is not supported?

[13:18] <timotimo> that looks like a bug

[13:21] <timotimo> m: enum Foo <a b c>; zz(Foo::{$_.key}) for Foo.enums; sub zz(Foo $foo) { return $foo.Int }

[13:21] <camelia> rakudo-moar 4f0c50: ( no output )

[13:21] <timotimo> m: enum Foo <a b c>; zz(Foo::{$_.key}).say for Foo.enums; sub zz(Foo $foo) { return $foo.Int }

[13:21] <camelia> rakudo-moar 4f0c50: OUTPUT«0␤2␤1␤»

[13:21] <timotimo> no, not a bug, just the wrong synatx

[13:22] *** Begi joined
[13:23] <Begi> Hello ! I'm using a simple code with Perl 6 and Bailador : http://pastebin.com/eSPfTUMy How can I check $post_id is an Int ?

[13:24] <Skarsnik> The shitty answer is a regex or trying .Int and see if that fail

[13:24] <timotimo> tbh, i don't know if bailador will ever give you an Int object if the argument happens to be an Int

[13:25] <Skarsnik> There should be a real a isNumber function/method somewhere x)

[13:25] *** rindolf left
[13:26] <timotimo> i think .Int + a check is totally acceptable

[13:26] <Skarsnik> sub (Int $post_id) does not work?

[13:26] <Skarsnik> not really

[13:26] <Skarsnik> you need to use a mechanism for execptionnal case

[13:26] <timotimo> that'd only work if bailador uses var or coerces for you

[13:26] <timotimo> m: say ("1234".Int orelse "lol")

[13:26] <camelia> rakudo-moar 4f0c50: OUTPUT«1234␤»

[13:26] <timotimo> m: say ("abcde".Int orelse "lol")

[13:26] <camelia> rakudo-moar 4f0c50: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5abcde' (indicated by ⏏)␤  in block <unit> at /tmp/ynKzDsKo3L line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/ynKzDsKo3L line 1␤␤»

[13:26] <timotimo> mhm

[13:26] <timotimo> m: say (try "abcde".Int orelse "lol")

[13:26] <camelia> rakudo-moar 4f0c50: OUTPUT«Nil␤»

[13:26] <Skarsnik> You need try

[13:26] <Skarsnik> so yes it's bad

[13:27] <Skarsnik> IMO

[13:27] <timotimo> m: say try "abcde".Int // "lol"

[13:27] <camelia> rakudo-moar 4f0c50: OUTPUT«Nil␤»

[13:27] <timotimo> m: say (try "abcde".Int) // "lol"

[13:27] <camelia> rakudo-moar 4f0c50: OUTPUT«lol␤»

[13:27] <Begi> sub (Int $post_id) does not work? -> no, it doesn't

[13:27] <timotimo> it's only bad because the precedence isn't the best

[13:27] <timotimo> Begi: i suggest using Int() as the type

[13:27] <timotimo> that'll try to coerce to Int for you

[13:27] <timotimo> though i don't know what bailador will do if the coercion fails

[13:28] <Skarsnik> It semanticly wrong for me. you use a mechanism for execption

[13:28] <Skarsnik> not for 'normal' use

[13:28] <timotimo> i'm willing to say you're just wrong :)

[13:28] *** lizmat joined
[13:30] <azawawi> http://pasteboard.co/1bfuzcw5.png  # all image composite operator that magickwand supports :)

[13:31] <azawawi> timotimo++

[13:31] <timotimo> neat

[13:31] *** uruwi joined
[13:31] <timotimo> did you know you can also MyEnum::.pairs and MyEnum::.kv?

[13:31] <timotimo> that's potentially better than what your code does with .enums

[13:33] *** rindolf joined
[13:33] <azawawi> https://github.com/azawawi/perl6-magickwand/blob/master/examples/02-effects.pl6#L122

[13:33] *** domidumont left
[13:33] <timotimo> if you had used ::.something, you wouldn't need to CompositeOperator::{blah}

[13:34] <azawawi> if i used a hash i wouldnt worry about all this :)

[13:35] <timotimo> yeah, but still. why don't you just use ::.pairs or ::.kv?

[13:35] <azawawi> i will try it

[13:36] *** vendethiel left
[13:37] <Begi> Ok, I'm using this code, it works : http://pastebin.com/daVQYQs4 But it's maybe not the best way ?

[13:38] <azawawi> m: enum Foo <a b c>; zz(::($_.key)).say for Foo.enums; sub zz(Foo $foo) { return $foo.Int }

[13:38] <camelia> rakudo-moar 4f0c50: OUTPUT«0␤2␤1␤»

[13:40] *** rindolf left
[13:40] <timotimo> it's all right

[13:48] *** kid51 joined
[13:48] *** sftp joined
[13:49] *** vendethiel joined
[13:51] <dalek> rakudo/nom: 2e17820 | lizmat++ | src/core/Setty.pm:

[13:51] <dalek> rakudo/nom: Revert "Fix for RT#127402: Set.hash stringifies its objects"

[13:51] <dalek> rakudo/nom: 

[13:51] <dalek> rakudo/nom: This reverts commit 218ce063e943be669b08a7fa8dfa5659e91be223.

[13:51] <dalek> rakudo/nom: 

[13:51] <dalek> rakudo/nom: Since we don't know how we're going to handle bugfixes in 6.c just yet,

[13:51] <dalek> rakudo/nom: the merging of this patch is a bit premature, I think.  Furthermore we

[13:51] <dalek> rakudo/nom: do have syntactic suger for creating a typed hash: my %e{Any}

[13:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2e17820d15

[13:52] <Juerd> Where do discussions about handling versioning and bugfixes take place, by the way? A mailing list? A hackathon?

[13:52] <Juerd> I have no input but I'd love to lurk

[13:52] <azawawi> http://pasteboard.co/1bgQcJXj.png   # composite with annotated text for their names

[13:53] <timotimo> ugh, thanks for catching that, lizmat 

[13:53] <timotimo> but i thought as long as the tests don't need changing and still pass, everything's fair game? :P

[13:58] *** lizmat left
[14:01] <dalek> ecosystem: af57645 | yowcow++ | META.list:

[14:01] <dalek> ecosystem: add meta

[14:01] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/af57645337

[14:01] <dalek> ecosystem: 7de5fda | sylvarant++ | META.list:

[14:01] <dalek> ecosystem: Merge pull request #141 from yowcow/add-webservice-sop

[14:01] <dalek> ecosystem: 

[14:01] <dalek> ecosystem: add WebService::SOP

[14:01] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/7de5fda19b

[14:03] *** leont left
[14:03] <nine> Juerd: #perl6-release

[14:04] <Juerd> Thanks. I joined :)

[14:05] <MadcapJake> anyone interested in joining a perl6 slack team? message me your email

[14:05] <nine> timotimo: we still don't really know where exactly to draw the line. jnthn++ is working on a document that's probably gonna be the base for the discussion

[14:06] <nine> What is a perl6 slack team?

[14:06] <timotimo> OK, sounds good

[14:06] <timotimo> slack is some new irc alternative

[14:06] <Juerd> MadcapJake: I think having that is a bad idea.

[14:06] <MadcapJake> Juerd: I'm thinking it might draw some of the younger crowd in (apparently people think irc is too difficult and ugly)

[14:06] <Juerd> Slack, being an invite-only and closed, proprietary thing, doesn't match the culture of Perl 6 imho.

[14:06] <nine> Why would one want an alternative for IRC?

[14:07] <MadcapJake> Juerd: I agree, I'm not really a fan of IRC, but I see it as a possible recruitment platform xD

[14:07] <Juerd> MadcapJake: I think the solution might be writing a prettier web frontend

[14:07] <Juerd> But I've seen how slack can split a community in two

[14:07] <Juerd> Very few people will be on IRC *and* slack

[14:07] <MadcapJake> slack is popular because no one's written a nice irc frontend, plus slack has channels, subteams, tons of integrations

[14:07] <moritz> m: sub MAIN($input, Bool :$verbose) { }e like

[14:07] <camelia> rakudo-moar 4f0c50: OUTPUT«5===SORRY!5=== Error while compiling /tmp/zMW0w7PbVE␤Strange text after block (missing semicolon or comma?)␤at /tmp/zMW0w7PbVE:1␤------> 3sub MAIN($input, Bool :$verbose) { }7⏏5e like␤    expecting any of:␤        infix␤        infix …»

[14:08] <moritz> huh

[14:08] <moritz> what did I write? :-)

[14:08] <timotimo> nine: netsplits, for example

[14:08] <moritz> nine: slack has integrated image sharing and the like, and server-side history

[14:08] <moritz> and nicer mobile clients, maybe

[14:08] <Juerd> MadcapJake: I've also seen the very discussion about slack vs IRC derail into drama, and I won't go there again.

[14:08] <MadcapJake> Juerd: I really do feel ya, I think it's about being open to anyone's preferred communication platform, rather than just requiring others to join what's already there

[14:09] <moritz> I'd be fine with there being a Perl 6 slack or hipchat or whatever

[14:09] <MadcapJake> I'm strongly in the pro-IRC camp, but as a way to promote the language, I think it's great.

[14:09] <moritz> just like I'm fine with there being a Perl 6 facebook group, of which I'm no part of

[14:09] <timotimo> what's hipchat?

[14:10] <MadcapJake> atlassian's slack

[14:10] <timotimo> oh

[14:10] <timotimo> is that like campfire?

[14:10] <timotimo> if we have a perl6 slack, someone ought to write a slack client library for perl6, too

[14:10] <nine> timotimo: avoiding netsplit by relying on a single point of failure that is the proprietary vendor's server farm is kind of self defeating

[14:10] <timotimo> is there an evalbot on that slack yet?

[14:11] <MadcapJake> timotimo: totally! There's an irc bridge too!

[14:11] <timotimo> nine: no, the thing is: servers running IRC are usually by Free Software Doods, who know nothing about stability and such. they are all amateurs!

[14:11] <timotimo> slack, on the other hand, that's run by Professional Startup Hipsters out of Starbucks coffe shops

[14:11] <MadcapJake> lol

[14:12] <timotimo> everybody knows starbucks never crashes

[14:12] <moritz> don't those big racks make starbucks a bit ugly?

[14:12] <moritz> not to mention the fan noise

[14:12] <timotimo> no, that belongs to the Starbucks Hipster Startup Flair

[14:12] <BinGOs> clouds don't make noise

[14:12] *** cpage_ left
[14:12] <MadcapJake> The thing is, maybe it's not great, maybe it's bad in a free software way, in a user-power way, but that's not the reason to have a slack, it's because all the young hip crowd are doing it and don't we want to connect with them?  I'm thinking in terms of adoption not in terms of principles :P

[14:13] <timotimo> yeah, we do want to connect with them

[14:14] <moritz> would we buy facebook ads for Perl 6 if we had cash to burn?

[14:14] <MadcapJake> I'm in a slack for clojure, dart, atom, polymer that are all quite active

[14:14] <timotimo> ads are annoying. i consider ads to be the opposite of helpful

[14:14] <MadcapJake> Slacks are so popular that some you have to pay to get access to! that's just absurd to me but still, it's quite the phenomenon

[14:15] <timotimo> that's absurd to me, too

[14:15] <nine> MadcapJake: sounds like slack is popular with the hipster crowd ;)

[14:15] <timotimo> but i suppose there's a use case for that

[14:15] <MadcapJake> nine: exactly right :)

[14:15] <BinGOs> my beef with 'slack' is they stole my favourite shorthand word for Slackware

[14:15] <MadcapJake> BinGOs: xD

[14:15] <BinGOs> a pox on them

[14:15] <timotimo> just call slackware "slake" in the future

[14:16] <Skarsnik> Slack is annoying x)

[14:16] <MadcapJake> is slackware still even active?

[14:16] <BinGOs> yes. there are updates and eveything.

[14:16] <MadcapJake> hmm, website's last update is 2013

[14:17] <BinGOs> but the packages are being updated etc.

[14:17] <MadcapJake> ah i see

[14:17] <Skarsnik> I am a debian stable hipster

[14:17] <BinGOs> and there was an upsurge of interest I gather from the fact it doesn't use systemd

[14:18] <Skarsnik> systemd kill my old dedicated server installation x)

[14:18] <MadcapJake> BinGOs: haha nice, i still don't quite understand all the hate on systemd

[14:18] <timotimo> how can i reach this perl6 slack thing?

[14:19] <BinGOs> I am ambivalent about it.

[14:19] <MadcapJake> timotimo: message me your email, i need to setup an invite site (still need to research what i need to do for this, might be a good opportunity to use perl6!)

[14:20] *** SCHAAP137 joined
[14:20] *** dolmen left
[14:21] <timotimo> there's a weechat plugin for slack

[14:21] <MadcapJake> sweet!

[14:21] <nine> systemd advanced Linux server administration more than the development of the three decades before it

[14:22] <timotimo> nine: just now there's a bug about systemd not mounting the efivarsfs read-only by default, so that you can brick your motherboard by rm -rf /* ... some peanut gallery of "twitter infosec community" people are making quite a ruckus about it

[14:22] <timotimo> so obviously systemd is actually terrible!!

[14:22] *** Zero_Dogg left
[14:22] *** Zero_Dogg joined
[14:23] <nine> of course

[14:23] <Skarsnik> systemd kind of prevent me to update to the last debian stable on my old dedicated server. Since it needed something on a the kernel that was 3 years old

[14:23] <nine> a 3 years old kernel?

[14:24] <Skarsnik> I did not phrase that correctly, it needed something on a newer version of the 3 years old versio that was already here

[14:25] <moritz> Skarsnik: I don't know how smooth the experience is, but I've read you can use Debian without systemd

[14:25] *** Begi left
[14:26] <Skarsnik> It's not that bad. it make me change the server from a 1.2Ghz celeron to a 2.2Ghz I7 with 16gb ram for the same renting price  x)

[14:26] <tony-o_> baller 

[14:26] <BinGOs> there always Debian-kFreeBSD which is systemd free

[14:27] <nine> Skarsnik: that's like hosting camelia saves me 7 Euros per month since it made me migrate to a better server with a lower price :)

[14:27] <Skarsnik> huhu

[14:27] <moritz> nine: so, in some sense you're making money from Perl 6 :-)

[14:27] <BinGOs> or Debian/Hurd for the really adventurerous

[14:27] <timotimo> awesome

[14:28] <Skarsnik> I tried debian hurd on virtual box, it booted once

[14:28] <Skarsnik> and now it refuse to boot again :(

[14:28] *** lizmat joined
[14:28] *** musiKk left
[14:29] <BinGOs> indeed, milage does vary.

[14:29] <orbus> ugh... systemd

[14:29] <yoleaux> 26 Jan 2016 09:57Z <jnthn> orbus: .Supply on a Channel gives a Supply that will emit values that are sent on the Channel. The emit will be scheduled on the thread pool. If there are multiple active supplies on the Channel, or other readers, then they compete over the values.

[14:30] * orbus is really not a fan

[14:30] <timotimo> i think systemd is pretty cool

[14:30] <timotimo> i haven't done enough with it yet

[14:31] <orbus> it has some nice features, but at the cost of massive added complexity - much of which was probably not needed to achieve those benefits

[14:31] <orbus> at least that's my take

[14:31] <nine> Writing systemd unit files is so easy that I even have one for my irssi session running in screen on my server.

[14:32] <orbus> I'm not necessarily suggesting the old init system was perfect mind

[14:32] <orbus> just that I resent how systemd has its fingers in everything now

[14:32] <timotimo> systemd is at least a thousand times better than upstart :)

[14:32] <nine> And we could throw out buggy deamonization code at work, because systemd does it better for us

[14:32] <timotimo> systemd is actually very modular

[14:32] *** cdg joined
[14:33] *** drforr1 joined
[14:33] <Skarsnik> It's my feeling on the 'new' display stack on linux. it look like a nightmare to understand or configure something now

[14:33] <Skarsnik> it's freaking too complex x)

[14:33] <nine> What's new about the display stack?

[14:34] <timotimo> you know how you don't have an Xorg.conf any more?

[14:34] <timotimo> that.

[14:34] <orbus> I'll admit that's a big plus :p

[14:34] <nine> That's just because X uses sensible defaults now

[14:34] <orbus> Skarsnik: you mean xrandr?

[14:34] <Skarsnik> When something does not work, it's like whatever now

[14:34] <BinGOs> its no fun if you can't make your monitor explode.

[14:35] <orbus> BinGOs: I think that kind of went out with the crt

[14:35] <BinGOs> happy days

[14:35] <orbus> worst you can do with an lcd is let the magic smoke out

[14:36] <drforr1> I might be inspired tonight to blog re: Inline::Scheme::Guile, a few at the conf have been interested.

[14:37] <orbus> .tell jnthn okay - so if I create a Supply off a channel, and then I have two taps on that Supply, they'll compete over the values from the Channel?  That seems to be how it behaves now.  If so, I want to get that in the docs.  I'll either open a ticket or do a pr

[14:37] <yoleaux> orbus: I'll pass your message to jnthn.

[14:38] *** lizmat left
[14:38] <MadcapJake> I added a camelia emoji to the perl6 slack team :D

[14:39] <orbus> we should press to get it included in unicode

[14:39] <MadcapJake> orbus: definitely! though in the new Unicode 9, there's a butterfly emoji

[14:40] <orbus> close

[14:40] *** dolmen joined
[14:41] *** cpage_ joined
[14:41] *** lokien_ joined
[14:43] *** raiph joined
[14:59] *** nowan left
[15:02] *** nowan joined
[15:02] *** zakharyas joined
[15:07] *** zakharyas left
[15:10] *** vendethiel left
[15:12] *** nchambers^ is now known as nchambers

[15:13] *** AlexDaniel joined
[15:14] *** kentnl joined
[15:15] *** kent\n left
[15:15] *** kentnl left
[15:15] *** kentnl joined
[15:15] *** kentnl is now known as kent\n

[15:23] *** vendethiel joined
[15:29] * flussence reads scrollback, gets a good laugh from it, and quietly remounts efivarfs ro...

[15:32] <flussence> (turns out systemd isn't the only thing that screws that up)

[15:34] *** rindolf joined
[15:38] *** domidumont joined
[15:43] <azawawi> what does this error message really mean "Native call expected return type with CArray representation, but got a P6opaque"?

[15:43] <timotimo> of course not

[15:45] *** vendethiel left
[15:47] <azawawi> CArray[num64] $kernel    # is that a supported option for nativecall?

[15:47] <timotimo> hm, should be

[15:49] <Skarsnik> Not sure if it work well

[15:49] <Skarsnik> CArray seems finicky

[15:49] <Skarsnik> try to find the err msg?

[15:50] <timotimo> that error probably happens inside moar?

[15:50] <AlexDaniel> it looks like it is now popular to create proprietary alternatives to IRC

[15:50] * AlexDaniel doesn't see any logic behind this bullshit trend

[15:50] <AlexDaniel> there's also gitter and other stuff

[15:51] <Skarsnik> hm IRC is quite limited

[15:51] <AlexDaniel> Skarsnik: I'm not sure. I can configure my client any way I want

[15:51] <Skarsnik> and it's not corporate enought

[15:51] <AlexDaniel> so what limits are we talking about?

[15:52] <timotimo> characters per line, obviously

[15:52] <AlexDaniel> oh! What a big problem

[15:52] <AlexDaniel> what's the limit by the way?

[15:52] <AlexDaniel> I've never hit it

[15:52] <Skarsnik> You can't edit a message

[15:52] <azawawi> Skarsnik: https://github.com/azawawi/perl6-magickwand/blob/master/lib/MagickWand/NativeCall/Image.pm6#L919  and https://github.com/azawawi/perl6-magickwand/blob/master/lib/MagickWand.pm6#L277

[15:52] <Skarsnik> or be sure that your message is formated the same everywhere

[15:52] *** RabidGravy joined
[15:53] <azawawi> Skarsnik: basically if i pass the actual CArray... that error occurs

[15:53] <Skarsnik> CArray[num] is not valid x)

[15:53] <azawawi> CArray[num64]?

[15:54] <dalek> doc: a107010 | (David Brunton)++ | doc/Type/Signature.pod:

[15:54] <dalek> doc: wont -> won't

[15:54] <dalek> doc: 

[15:54] <dalek> doc: So it fails for the right reason.

[15:54] <dalek> doc: review: https://github.com/perl6/doc/commit/a10701092d

[15:54] <dalek> doc: 45fa33a | RabidGravy++ | doc/Type/Signature.pod:

[15:54] <dalek> doc: Merge pull request #374 from dbrunton/patch-5

[15:54] <dalek> doc: 

[15:54] <dalek> doc: wont -> won't

[15:54] <dalek> doc: review: https://github.com/perl6/doc/commit/45fa33a4a6

[15:54] <Skarsnik> well maybe it work, but you should not use num

[15:54] <Skarsnik> you should have get a warning btw x)

[15:54] <Skarsnik> m: say num.REPR

[15:54] <camelia> rakudo-moar 2e1782: OUTPUT«P6num␤»

[15:55] <AlexDaniel> I don't want to be sure that my message is formatted exactly the same everywhere. I respect user settings of other users

[15:55] <AlexDaniel> just like I don't expect the website to be rendered identically everywhere

[15:56] <AlexDaniel> because people custom css, text browsers, etc.

[15:56] <AlexDaniel> use*

[15:56] <AlexDaniel> ad blockers

[15:57] *** khw joined
[15:58] *** rindolf left
[15:58] *** rindolf joined
[16:00] <flussence> yup; too many people try to hammer HTML into a PDF-shaped hole these days, and the result is you need to buy extra DIMMs just to run a browser

[16:03] <AlexDaniel> it's fine when people suggest alternatives to IRC, but when this alternative is some proprietary crap it's just ridiculous

[16:04] *** Fleurety left
[16:05] <flussence> proprietary or foss, every method of electronic communication I've ever used is crap in some way :)

[16:06] *** musiKk joined
[16:16] *** vendethiel joined
[16:19] <AlexDaniel> it's also interesting how people say that these services have better integration with stuff. Hey, we have so many bots here – we are as integrated as possible. Server-side logs? Ok: http://irclog.perlgeek.de/perl6/today

[16:20] <azawawi> Skarsnik: that error message means that you're passing @carray instead of passing $carray....

[16:20] *** cognominal joined
[16:23] *** khw left
[16:24] *** khw joined
[16:27] <Skarsnik> AlexDaniel, you need bots...

[16:43] *** Fleurety joined
[16:43] * MadcapJake is sad that error messages print the mangled module names :(

[16:44] *** Fleurety left
[16:49] *** azawawi left
[16:49] <MadcapJake> until a better solution arises, I really think stack traces should print "in method ... at <module>/<module_filename>.pm" rather than the actual filename on your computer

[16:49] *** lokien_ left
[16:50] <AlexDaniel> MadcapJake: perhaps it would make sense to leave a comment here? https://rt.perl.org/Public/Bug/Display.html?id=126908

[16:50] <MadcapJake> AlexDaniel: thanks, was wondering where best I could leave my thoughts

[16:51] *** Fleurety joined
[16:51] * MadcapJake realizes he has no idea how to reply/comment on rt.perl.org

[16:52] <AlexDaniel> MadcapJake: write an email…

[16:52] <MadcapJake> how do i send it to that issue?

[16:52] <AlexDaniel> MadcapJake: include [perl #126908] in your title

[16:52] <MadcapJake> ok thanks!

[16:52] <AlexDaniel> I mean, in the subject

[16:52] <MadcapJake> right xD

[16:52] *** lnrdo_ joined
[16:54] *** Fleurety left
[16:56] *** mr-foobar joined
[17:01] *** Fleurety joined
[17:05] <AlexDaniel> MadcapJake: that's an interesting idea actually

[17:05] *** Fleurety left
[17:05] <AlexDaniel> perhaps we can also combine it with the path somehow?

[17:05] <MadcapJake> I added a reply to that issue

[17:06] <AlexDaniel> e.g. it could print /home/jrusso/.rakudobrew/moar-nom/install/share/perl6/site/sources once and after that use the module name

[17:06] <MadcapJake> but the path is so long and incomprehensible, maybe if you put it on the line below

[17:06] <AlexDaniel> MadcapJake: I see it :)

[17:06] <AlexDaniel> or above

[17:06] <MadcapJake> sure, but it's still long enough to wrap

[17:07] <AlexDaniel> by the way, any reason to use full hash A2E027789F0B4D3B6A5FCF168DAB702F10B504BF? Why not e.g. just a half of it

[17:07] <AlexDaniel> or just 10 characters

[17:08] *** Fleurety joined
[17:08] <MadcapJake> well then it's useless to even have it because you won't be able to find the file with it

[17:08] <AlexDaniel> MadcapJake: yes but why the filename has to be so long?

[17:08] <MadcapJake> oh i see, you mean in general

[17:09] *** Fleurety left
[17:09] *** lnrdo_ left
[17:10] <MadcapJake> i wonder how many files the length allows

[17:11] <AlexDaniel> MadcapJake: too many. But the question is whether it is enough not to start seeing collisions

[17:12] <AlexDaniel> lot's of places use just 7 first characters of the commit id in git, works just fine actually. But whether it is good enough or not – I don't know

[17:13] <MadcapJake> m: [*] 2.."6FBB546BBE02E85FD75F4092B80DFBB2DA9640D3".chars

[17:13] <camelia> rakudo-moar 2e1782: ( no output )

[17:13] <MadcapJake> m: say [*] 2.."6FBB546BBE02E85FD75F4092B80DFBB2DA9640D3".chars

[17:13] <camelia> rakudo-moar 2e1782: OUTPUT«815915283247897734345611269596115894272000000000␤»

[17:14] <MadcapJake> wait that's not it xD

[17:14] <MadcapJake> it's even bigger isn't it because it's Hex

[17:19] <MadcapJake> it's 1.4615016373e+48 possible combinations xD

[17:20] <MadcapJake> that does seem highly unlikely to collide

[17:20] <MadcapJake> like nigh impossible

[17:21] <MadcapJake> 10 chars gets you 1 trillion combinations

[17:23] <AlexDaniel> Let's take rakudo source: git rev-list nom | perl -pe 's/(.{7}).*/$1/' | sort | uniq -dc | sort -n

[17:23] <AlexDaniel> no collisions, but change that to 6 and you'll see some

[17:24] <AlexDaniel> but what is going to happen in case of a collision?

[17:24] <MadcapJake> i don't follow, what's that pipe doing?

[17:24] <AlexDaniel> MadcapJake: it just finds duplicates for shortened commit ids

[17:25] <AlexDaniel> run that in rakudo source

[17:25] *** mr-foobar left
[17:25] *** ely-se joined
[17:25] *** musiKk left
[17:26] <MadcapJake> ok  i see, but what's this have to do with precomp?

[17:26] <AlexDaniel> MadcapJake: well, we don't want to have collisions

[17:26] *** dolmen left
[17:26] *** ely-se left
[17:27] <MadcapJake> right but doesn't precomp only occur with modules?

[17:27] *** mr-foobar joined
[17:28] <AlexDaniel> MadcapJake: yes, but it's just a practical representation of what is going to happen if you get 21000 of something

[17:28] <AlexDaniel> sure enough you can use math to get the same result

[17:29] <MadcapJake> m: say "That's {159272 * 200} possible filenames" # cpan has 159,272 modules, lets assume that each of those has 200 files

[17:29] <camelia> rakudo-moar 2e1782: OUTPUT«That's 31854400 possible filenames␤»

[17:31] <MadcapJake> m: say "That's {31854400 / 1000000000000} of the possible combinations at 10 Hex chars"

[17:31] <camelia> rakudo-moar 2e1782: OUTPUT«That's 0.0000318544 of the possible combinations at 10 Hex chars␤»

[17:31] <Skarsnik> x)

[17:32] <AlexDaniel> MadcapJake: yeah but… birthday paradox

[17:32] *** Fleurety joined
[17:32] <MadcapJake> what's that?

[17:32] <AlexDaniel> https://en.wikipedia.org/wiki/Birthday_problem

[17:32] <flussence> m: say 0.0000318544 ** ½

[17:32] <camelia> rakudo-moar 2e1782: OUTPUT«0.00564397023379819␤»

[17:32] *** Fleurety left
[17:35] <AlexDaniel> MadcapJake: and this does not consider the fact that some people will attempt to create a collision on purpose

[17:35] <MadcapJake> but precomp is done programmatically, so how could someone fudge it?

[17:35] *** dolmen joined
[17:36] <AlexDaniel> MadcapJake: what's the input?

[17:36] <MadcapJake> no idea actually, i'm guessing module name + filename?

[17:37] <orbus> it's probably more than that

[17:37] <orbus> well

[17:37] <orbus> maybe not

[17:37] <AlexDaniel> huggable: precomp

[17:37] <huggable> AlexDaniel, nothing found

[17:37] <orbus> I was thinking like size and modification time, but it might just check those to see if it needs to recompile

[17:37] <AlexDaniel> hmm

[17:38] <AlexDaniel> details here: https://github.com/rakudo/rakudo/blob/nom/docs/module_management.md

[17:44] *** BenGoldberg joined
[17:45] <MadcapJake> so the dist file is the main distribution, and then each source file is just an incremented sha1 of the dist sha?

[17:46] *** BenGoldberg left
[17:47] *** BenGoldberg joined
[17:49] *** kjs_ joined
[17:55] *** dolmen left
[17:59] *** kanishka left
[18:03] *** lnrdo_ joined
[18:15] *** Actualeyes left
[18:16] *** sjoshi joined
[18:16] *** BenGoldberg left
[18:18] <MadcapJake> .ask tadzik how do I pass :from and :extension to mustache renderer? It gives me a 'too many positionals' error

[18:18] <yoleaux> MadcapJake: I'll pass your message to tadzik.

[18:18] <MadcapJake> .tell tadzik that's for bailador, btw

[18:18] <yoleaux> MadcapJake: I'll pass your message to tadzik.

[18:19] *** yurivish_ joined
[18:24] *** kjs_ left
[18:28] *** lnrdo_ left
[18:29] *** lnrdo_ joined
[18:29] *** lnrdo_ left
[18:29] *** lnrdo_ joined
[18:38] *** azawawi joined
[18:41] <MadcapJake> anyone know how to serve images with bailador?

[18:45] *** hankache joined
[18:48] *** lnrdo_ left
[18:48] *** lnrdo_ joined
[18:59] <tadzik> MadcapJake: no idea, I didn't write mustache

[18:59] <yoleaux> 18:18Z <MadcapJake> tadzik: how do I pass :from and :extension to mustache renderer? It gives me a 'too many positionals' error

[18:59] <yoleaux> 18:18Z <MadcapJake> tadzik: that's for bailador, btw

[18:59] <tadzik> oh

[19:00] <tadzik> if it says "too many positionals" then probably pass it as named :)

[19:00] <arnsholt> And for reference, positional syntax looks like :from($whatever) or :$from (if the 

[19:01] <arnsholt> *variable you want to pass happens to have the same name as the named)

[19:01] <timotimo> um. that's named, not positional

[19:02] <arnsholt> Derrrrrrrrp! >.<

[19:02] <arnsholt> s/positional/named/ of course

[19:03] <arnsholt> The point was good, if the wording was utterly broken

[19:03] <arnsholt> timotimo++ # noticing my brainfarts

[19:06] <MadcapJake> tadzik: i tried that, it seems that named arguments arent slurped up by your template::Mustache class

[19:07] *** lnrdo_ left
[19:07] <MadcapJake> tadzik: how would I serve an image via bailador?  Doesn't PSGI let you pass file handles? How would I do that? `open('image.png')`?

[19:07] *** kmel joined
[19:08] *** lnrdo_ joined
[19:09] *** mst left
[19:09] *** mst joined
[19:09] <AlexDaniel> MadcapJake: I did not find any way to do that by the wya

[19:09] <AlexDaniel> way*

[19:10] <MadcapJake> do what now?

[19:10] <AlexDaniel> to serve an image via bailador

[19:11] <AlexDaniel> though I was trying to serve a pdf but it shouldn't really matter

[19:11] <MadcapJake> yeah i tried `open("image.png", :bin)` and it says something about expecting 0 positional args and getting 1 arg

[19:11] *** hankache left
[19:12] *** kmel left
[19:12] *** lnrdo_ left
[19:12] <Skarsnik> Still no session in Bailador?

[19:14] <MadcapJake> it's weird because slurp works with css, but then it gives me a positional arg error with a binary file? I don't understand why that is

[19:15] *** kid51 left
[19:16] <AlexDaniel> MadcapJake: css file is still text

[19:16] <AlexDaniel> and .js too

[19:16] <raiph> Do others agree with AlexDaniel that http://stackoverflow.com/a/35046178/1077672 could be added to p6doc as a "Performance" or somesuch article (removing the bits specific to `if` statements)? (To me it seems too context specific and too much "ask on #perl6" but it maybe it's better than nothing.)

[19:16] <MadcapJake> yeah but why the positional arg, it's still returning something

[19:17] <MadcapJake> i mean, either way something is returned, text or binary, so why would it give a positional argument error (0 got 1)

[19:18] <AlexDaniel> raiph: it is a common question, so perhaps creating a new page here would make sense: http://doc.perl6.org/language.html

[19:19] <AlexDaniel> raiph: but you have to do that yourself because of the license :)

[19:21] <MadcapJake> I think it's a good idea to add, people are going to wonder about it and having a canonical answer that is elaborate rather than a short irc answer, will be good.  your response covers all the bases really well raiph

[19:22] <MadcapJake> is there currently any place in the docs that mentions perl6 --profile or perl6-bench?

[19:22] <timotimo> don't think so

[19:23] <raiph> MadcapJake, AlexDaniel: OK. I'll add a revision of it in a couple days (giving time for comments).

[19:23] <MadcapJake> then i think it's useful just for elaborating on those two tools alone

[19:23] *** lnrdo_ joined
[19:24] <raiph> timotimo: I'd very much appreciate any brief comments you have on the current SO answer too (assume I'll edit out the `if` specificity).

[19:24] <AlexDaniel> MadcapJake: google says “no”

[19:24] <timotimo> raiph: i just read it, and i liked it a bunch. however, using native arrays of int8 and friedns is currently not fast at all :|

[19:24] *** sjoshi left
[19:25] <AlexDaniel> raiph: the answer is good as it is, we can improve it later

[19:25] <raiph> timotimo: I wondered about that. :)

[19:26] <timotimo> and your characterization of --profile is grossly exaggerated, IMO

[19:26] <timotimo> i've had fairly complex scripts do fine

[19:27] <raiph> timotimo: OK. I'll change that.

[19:28] <Skarsnik> well the ouput is still a nightmare for a web browser x)

[19:29] <Skarsnik> maybe you should mention tadzik Qt thing, maybe people will be interested to improve it x)

[19:30] <raiph> Skarsnik: thanks, vaguely recall that, got a link?

[19:31] <tadzik> MadcapJake: no idea

[19:31] <Skarsnik> https://github.com/tadzik/p6profiler-qt

[19:32] <raiph> (note to self: look at github account before asking such a question next time)

[19:32] <raiph> Skarsnik: thx

[19:34] *** yqt joined
[19:35] <timotimo> raiph: i'll look a bit more into the performance characteristics of the example from that post

[19:36] <timotimo> um, is that regex actually correct?

[19:36] <timotimo> shouldn't it be <[ea]>?<[ui]>? or something?

[19:36] *** hankache joined
[19:36] <timotimo> oh

[19:36] <timotimo> actually it's supposed to be [ea?|u|i]

[19:37] *** kid51 joined
[19:38] <raiph> timotimo: I think the questioner was mostly just curious (and perhaps negative) about Perl 6 and may have already moved on. I'd say only get in to it if you find it interesting to do so.

[19:38] <timotimo> i find it interesting

[19:39] <raiph> timotimo: although jotting down your thought process and the tools/techniques you use as you dig in to that would be very useful imo.

[19:40] *** Fleurety joined
[19:41] *** Fleurety left
[19:42] *** geekosaur left
[19:45] *** nanis joined
[19:46] *** Fleurety joined
[19:47] *** kjs_ joined
[19:47] *** geekosaur joined
[19:49] *** nanis left
[19:54] <grondilu> m: say ^1 X+ (^1 X* 1i);

[19:54] <camelia> rakudo-moar 2e1782: OUTPUT«(0+0i)␤»

[19:54] <grondilu> m: say ^2 X+ (^2 X* 1i);

[19:54] <camelia> rakudo-moar 2e1782: OUTPUT«===SORRY!===␤Cannot invoke this object (REPR: Uninstantiable)␤»

[19:55] <grondilu> ^what am I doing wrong?

[19:56] <grondilu> m: say ^2 X+ (0i, 1i)

[19:56] <camelia> rakudo-moar 2e1782: OUTPUT«(0+0i 0+1i 1+0i 1+1i)␤»

[19:56] <grondilu> m: say ^2 X+ ((0, 1) X* 1i)

[19:56] <camelia> rakudo-moar 2e1782: OUTPUT«===SORRY!===␤Cannot invoke this object (REPR: Uninstantiable)␤»

[19:57] <grondilu> m: say (0, 1) X* 1i

[19:57] <camelia> rakudo-moar 2e1782: OUTPUT«(0+0i 0+1i)␤»

[19:57] <grondilu> m: say (0, 1) X+ ((0, 1) X* 1i)

[19:57] <camelia> rakudo-moar 2e1782: OUTPUT«===SORRY!===␤Cannot invoke this object (REPR: Uninstantiable)␤»

[19:57] <grondilu> wth

[19:58] <grondilu> m: say (0, 1) Z+ ((0, 1) X* 1i)

[19:58] <camelia> rakudo-moar 2e1782: OUTPUT«(0+0i 1+1i)␤»

[19:59] <grondilu> m: say (0, 1) X+ (2, 3)

[19:59] <camelia> rakudo-moar 2e1782: OUTPUT«(2 3 3 4)␤»

[20:01] * MadcapJake kind of hates the 't' folder for how hard it is to click on github xD

[20:02] <grondilu> oh I see.  It's a Seq thing, isn't it?

[20:02] <grondilu> you can't use a Seq in a cartesian product.

[20:03] <grondilu> m: say ^2 X+ my @ = (^2 X* 1i);

[20:03] <camelia> rakudo-moar 2e1782: OUTPUT«(0+0i 0+1i 1+0i 1+1i)␤»

[20:03] *** kjs_ left
[20:04] <uruwi> m: say (0i .. 1i)

[20:04] <camelia> rakudo-moar 2e1782: OUTPUT«Complex objects are not valid endpoints for Ranges␤  in block <unit> at /tmp/3hsIwAC748 line 1␤␤»

[20:04] <Juerd> MadcapJake: I use Vimium for Chrome, and Pentadactyl for Firefox. "Clicking" links can then be done by hitting 'f' and entering the shortcode that appears next to the link

[20:05] <Juerd> MadcapJake: Much faster, in general, but specifically, smaller sized links are much easier :)

[20:05] <MadcapJake> AlexDaniel, tadzik: FYI, if your sub contains «content_type('image/png');open("path/to/images/$name.png", :bin);» it will send images!

[20:05] <Juerd> MadcapJake: http://juerd.nl/i/65b54037c94aad73ff4f9b681985a1a6.png

[20:06] <MadcapJake> Juerd: cool!

[20:06] <Juerd> MadcapJake: (Mine's currently optimized for dvorak, by default it favors asdf/hjkl)

[20:06] <Juerd> MadcapJake: 't' is hidden by the flag, but that's no issue because the flags don't appear until you hit 'f'

[20:06] <Juerd> (It's HN in this screenshot, by the way)

[20:07] <AlexDaniel> MadcapJake: nice!!

[20:07] <Juerd> http://juerd.nl/i/a8c72bb0647c90e7cc39a802b05bd017.png

[20:07] <MadcapJake> that's pretty cool!

[20:08] <Juerd> Yes, I highly advise using one of these extensions

[20:08] <Juerd> They have other tricks up their sleeves but this is the most important one imho

[20:08] <MadcapJake> I wonder if vimium will work with vivaldi

[20:09] *** Fleurety_ joined
[20:09] *** rindolf left
[20:09] *** Fleurety left
[20:09] *** kjs_ joined
[20:11] <moritz> .oO( Vimvaldi )

[20:13] <AlexDaniel> Juerd: other tricks like?

[20:17] *** koo8 joined
[20:17] *** kjs_ left
[20:19] <Juerd> AlexDaniel: Sorry, too off topic here, and I think you can read it from the respective homepages.

[20:19] <AlexDaniel> :)

[20:21] *** Fleurety_ left
[20:21] *** lnrdo_ left
[20:21] <RabidGravy> I just love Perl 6, I have a bunch of tests that have to sleep because they are going to wait for something to happen, but hey I can start them all in parallel and only take as long as the longest wait

[20:24] <AlexDaniel> RabidGravy: ｢prove｣ can actually parallelize tests

[20:24] <RabidGravy> I know

[20:25] *** darutoko left
[20:26] <RabidGravy> but making ten files just to have prove do that to the saving of a few starts and and await doesn't really make sense

[20:31] <AlexDaniel> RabidGravy: oh right, it works on files!

[20:31] <AlexDaniel> RabidGravy: indeed, you're right

[20:33] <RabidGravy> :)

[20:34] *** kjs_ joined
[20:37] *** kjs_ left
[20:40] *** dolmen joined
[20:45] *** jack_rabbit left
[20:48] *** raiph left
[20:48] <azawawi> http://pasteboard.co/1bI9E4SQ.png   # Perl 6 image tiling fun with MagicWand :)

[20:49] <azawawi> http://pasteboard.co/1bI9T6Vi.png  # More fun with how wide can an image be :)

[20:49] *** hankache left
[20:52] <timotimo> heh.

[20:55] *** ely-se joined
[20:56] *** kjs_ joined
[20:56] <MadcapJake> AlexDaniel, tadzik: nvm about opening images with bailador (or http::easy::psgi), seems to just send a small white box...

[20:57] *** revhippie joined
[20:58] <azawawi> good night #perl6

[20:58] *** musiKk joined
[21:02] *** azawawi left
[21:05] *** yurivish left
[21:07] *** rindolf joined
[21:07] *** dolmen left
[21:08] <moritz> m: say "⅓" * 3

[21:08] <camelia> rakudo-moar 2e1782: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5⅓' (indicated by ⏏)␤  in block <unit> at /tmp/zitwlKVrSP line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/zitwlKVrSP line 1␤␤»

[21:09] <moritz> wasn't this supported at some point?

[21:10] <AlexDaniel> m: say ⅓ * 3

[21:10] <camelia> rakudo-moar 2e1782: OUTPUT«1␤»

[21:10] <AlexDaniel> moritz: sure ↑

[21:11] <moritz> why didn't mine work?

[21:11] <moritz> m: say ⅓ * 3

[21:11] <camelia> rakudo-moar 2e1782: OUTPUT«1␤»

[21:11] <moritz> seems string-to-number still doesn't use the same code as literal parsing :/

[21:12] <flussence> m: say val("⅓") * 3

[21:12] <camelia> rakudo-moar 2e1782: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5⅓' (indicated by ⏏)␤  in block <unit> at /tmp/uwXIqDjM5e line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/uwXIqDjM5e line 1␤␤»

[21:12] <AlexDaniel> do we really want it to work?

[21:12] <flussence> m: say unival("⅓") * 3

[21:12] <camelia> rakudo-moar 2e1782: OUTPUT«1␤»

[21:13] <flussence> are val() and unival() really supposed to be different there?

[21:15] <AlexDaniel> m: say val(‘٧’)

[21:15] <camelia> rakudo-moar 2e1782: OUTPUT«٧␤»

[21:17] <AlexDaniel> there is a difference between Nd and other numerics

[21:17] <AlexDaniel> m: say ᱑᱒᱓᱔᱕᱖᱗᱘

[21:17] <camelia> rakudo-moar 2e1782: OUTPUT«12345678␤»

[21:18] <AlexDaniel> m: say ⅓⅓

[21:18] <camelia> rakudo-moar 2e1782: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Aijp88KESB␤Bogus postfix␤at /tmp/Aijp88KESB:1␤------> 3say ⅓7⏏5⅓␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement mod…»

[21:19] *** yurivish_ left
[21:20] *** lnrdo_ joined
[21:25] * RabidGravy adds an .at() to Chronic for convenience

[21:26] <moritz> .u ᱒

[21:26] <yoleaux> U+1C52 OL CHIKI DIGIT TWO [Nd] (᱒)

[21:31] *** jack_rabbit joined
[21:33] *** kjs_ left
[21:34] *** p_p_r joined
[21:38] *** hankache joined
[21:41] *** domidumont left
[21:43] *** kjs_ joined
[21:45] *** BenGoldberg joined
[21:53] *** hankache left
[21:54] *** koo8 left
[21:56] *** ELBeavers joined
[21:56] *** yurivish_ joined
[21:57] *** rindolf left
[21:57] *** wamba left
[21:57] *** ELBeavers left
[22:00] <MadcapJake> can any of the web modules serve images?

[22:11] <masak> 'night, #perl6

[22:13] *** kjs_ left
[22:14] *** ELBeavers joined
[22:17] *** TEttinger joined
[22:18] *** kaare_ left
[22:19] <gfldex> do i understand S26 right that a numbered =item list is terminated by any POD-element that is not a numbered item?

[22:25] <skids> .oO(Camelia vs Godzilla)

[22:27] *** espadrine joined
[22:36] <flussence> gfldex: «=item»s are just regular Pod6 with special behaviour for consecutive ones; if you want to put complicated stuff inside one you need =begin item/=end item syntax. Note that the first part applies to p5POD too, the second just isn't possible there

[22:38] <gfldex> flussence: my problem is not writing the POD file, my problem is rendering it. So I need to know when to reset the counters.

[22:38] <gfldex> https://gist.github.com/gfldex/8c27cbd4761955eb908b

[22:39] <gfldex> that's how the data structure looks like

[22:40] *** LLamaRider joined
[22:40] *** LLamaRider left
[22:40] <flussence> .rotor(2,-1) it and reset the counter whenever a previous index isn't a Pod::Item?

[22:44] <RabidGravy> MadcapJake, Crust has a Static middleware

[22:48] *** jack_rabbit left
[22:50] *** lnrdo_ left
[22:53] *** kjs_ joined
[23:00] *** timka joined
[23:00] <timka> hi

[23:01] *** timka left
[23:02] *** jack_rabbit joined
[23:03] *** uruwi left
[23:04] <ingy> say "{a: 42, b: 43}"

[23:04] <ingy> why is that an error?

[23:04] <ingy> {} are special in ""?

[23:05] *** olinkl_ joined
[23:06] <cxreg2> m: <abc>.rotor: 1 => -2

[23:06] *** cxreg2 is now known as cxreg

[23:06] <camelia> rakudo-moar 2e1782: OUTPUT«(timeout)WARNING: unhandled Failure detected in DESTROY:␤Index out of range. Is: -110, should be in 0..Inf␤  in method sink-all at /home/camelia/rakudo-m-inst-1/share/perl6/runtime/CORE.setting.moarvm line 1␤  in block <unit> at /tmp/ZfLOAJYyHg line …»

[23:06] *** ZeroDogg joined
[23:07] <cxreg> that makes a pretty impressive explosion in the repl

[23:08] *** [particle] joined
[23:08] <Skarsnik> ingy, {} in "" is to put code

[23:08] *** Skarsnik left
[23:10] *** xinming_ joined
[23:10] *** olinkl left
[23:10] *** Zero_Dogg left
[23:10] *** Lucas_One_ left
[23:10] *** ZeroDogg is now known as Zero_Dogg

[23:10] *** [particle]1 left
[23:10] *** xinming left
[23:10] *** olinkl_ is now known as olinkl

[23:11] *** Lucas_One_ joined
[23:14] *** Fleurety joined
[23:14] *** Fleurety left
[23:16] *** kjs_ left
[23:18] *** Fleurety joined
[23:18] *** lokien_ joined
[23:20] *** Fleurety left
[23:28] *** Fleurety joined
[23:28] *** kurahaupo joined
[23:31] *** musiKk left
[23:31] *** Fleurety left
[23:35] *** lizmat joined
[23:35] *** RabidGravy left
[23:35] *** Fleurety joined
[23:35] *** Fleurety left
[23:36] *** leont joined
[23:37] <revhippie> m: my $foo = 1; say "{ $foo++ }, {$foo++}, {$foo++}, $foo"

[23:37] <camelia> rakudo-moar 2e1782: OUTPUT«1, 2, 3, 4␤»

[23:43] *** woolfy joined
[23:45] *** kurahaupo left
[23:45] *** spider-mario left
[23:46] *** kurahaupo joined
[23:53] *** kurahaupo_ joined
[23:54] *** p_p_r left
[23:55] *** kurahaupo left
[23:57] *** lonewolf28 joined
[23:58] *** kurahaupo_ left
