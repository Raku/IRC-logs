[00:00] <TimToady> btw, the parens on the left of .. are superstitious

[00:00] <TimToady> + is tighter than ..

[00:01] <timotimo> segmentation faults should not happen, that is a bug in moarvm

[00:02] <lambd0x> TimToady: ahahah I know. It's a bad habit that I'm trying to give up. 

[00:02] <timotimo> wow i totally missed that ticket being created

[00:02] <timotimo> can you try it with the environment variable "MVM_SPESH_DISABLE=yes" set?

[00:03] <lambd0x> TimToady: So this is really a moar's bug :(

[00:03] <TimToady> well, could be, that's why you wanna try what timotimo suggested

[00:04] <timotimo> if that makes the problem go away, please also test with MVM_SPESH_INLINE_DISABLE=yes instead, too

[00:06] <lambd0x> timotimo: I'll, just a sec. Am generating large input files for testing...

[00:07] <timotimo> thanks

[00:07] <timotimo> though a spesh optimization would more likely have eliminated the corece_istrue call and turned it into something entirely different

[00:07] <timotimo> but ..^ vs ^..^ sounds more like one of them is being inlined and the other isn't, or something like that

[00:13] *** bitmap left
[00:13] *** ruoso joined
[00:16] *** setty1 left
[00:16] *** setty2 joined
[00:18] *** kurahaupo left
[00:18] <timotimo> i need sleep real soon

[00:19] *** setty2 is now known as setty1

[00:21] <lambd0x> timotimo: Sleep then. Last time I ran bubble with 5K input it took 15 minutes. When I get the results I'll notify u so that later u can review it :) via pastebin

[00:21] <timotimo> might be an interesting candidate to profile

[00:22] <lambd0x> profile?

[00:22] <timotimo> yeah, use a profiler to measure which parts take how much time

[00:22] <timotimo> makes it a bit slower, though

[00:22] <lambd0x> timotimo: :)

[00:25] <timotimo> there's perl6 --profile, which gives you a html "app" that you can inspect the results with

[00:25] <timotimo> there's "perf" on linux which is a probabilistic profiler (which means it's extremely fast, but not precise)

[00:26] <timotimo> and there's callgrind, which makes your code run a whole lot slower, but gives excellent precision in the results - inspect the results with kcachegrind

[00:26] <timotimo> but perl6 --profile gives you data about perl6 routines and perf and callgrind give you data about moarvm's C functions

[00:27] <lambd0x> timotimo: perl6 --profile code.pl6?

[00:28] <timotimo> yes

[00:28] <timotimo> if the vm crashes, there will not be any profile data

[00:28] <timotimo> so better use a smaller file with --profile

[00:30] <lambd0x> timotimo: nice

[00:30] <TimToady> well, if you're profiling to make it faster, use something other than bubblesort

[00:31] <timotimo> could be something in rakudo or moar is causing more slowdown than is warranted

[00:33] <TimToady> bubblesort almost causes more slowdown than is warranted :)

[00:33] <TimToady> unless you're usually sorting less than 5 items

[00:34] <timotimo> or if the list is already mostly sorted

[00:34] <TimToady> in which case you probably want merge sort anyway

[00:35] <lambd0x> timotimo: even if the list is mostly sorted it will check all the n els. so it's still slow :(

[00:35] <timotimo> you can't get faster than o(n) :)

[00:36] <timotimo> but maybe there's a vectorized CISC instruction on your CPU that can check if a packed buffer of numbers is already sorted in some order you ask for

[00:36] <TimToady> sure you can, if you have a bit saying it's already sorted, that's O(1) :)

[00:36] <timotimo> oh, that's true

[00:36] <timotimo> that bit better tell the truth

[00:36] <timotimo> rakudo and moarvm mostly work with "never trust anything another part of the program already figured out" at the moment

[00:37] <timotimo> though moarvm is much, much better at using info gathered from elsewhere than parrot for example was

[00:37] <timotimo> gotta go!

[00:37] <lambd0x> timotimo: o/

[00:41] <lambd0x> InsertionSort is nice for small almost/sorted lists. Better if the range is lower would be counting. Or if the range is larger bucket :)

[00:42] *** antiMossad joined
[00:44] *** antiMossad left
[00:59] <lambd0x> timotimo: using MVM_SPESH_DISABLE=yes and later, MVM_SPESH_INLINE_DISABLE=yes. For each case, the codes runs ok

[01:04] *** itaipu joined
[01:10] *** poohman joined
[01:11] *** lambd0x left
[01:15] *** bitmap joined
[01:16] *** ugexe left
[01:18] *** itaipu left
[01:20] *** bitmap left
[01:22] *** poohman left
[01:22] *** poohman joined
[01:39] *** sakuya joined
[01:44] *** ugexe joined
[01:44] *** bitmap joined
[01:52] *** zacts left
[01:56] *** pierre_ joined
[02:01] *** pierre_ left
[02:01] *** sakuya left
[02:12] *** labster joined
[02:23] <dalek> ecosystem: 97b164a | (Adrian Kreher)++ | META.list:

[02:23] <dalek> ecosystem: Add Binary::Structured to ecosystem

[02:23] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/97b164aa80

[02:28] *** pierre_ joined
[02:30] *** pierre_ left
[02:31] *** pierre_ joined
[02:33] *** pierre___ joined
[02:35] *** noganex_ joined
[02:35] *** pierre_ left
[02:37] *** pierre___ left
[02:38] *** noganex left
[02:43] *** jcallen_ is now known as jcallen

[02:45] <dalek> doc: 57ab2de | titsuki++ | doc/Type/Str.pod6:

[02:45] <dalek> doc: Add an example for multi method comb(Str:D :)

[02:45] <dalek> doc: review: https://github.com/perl6/doc/commit/57ab2de9b2

[02:45] <dalek> doc: 71be272 | titsuki++ | doc/Type/Str.pod6:

[02:45] <dalek> doc: Merge pull request #881 from titsuki/fix-str-comb

[02:45] <dalek> doc: 

[02:45] <dalek> doc: Add an example for multi method comb(Str:D :)

[02:45] <dalek> doc: review: https://github.com/perl6/doc/commit/71be27213a

[02:50] *** pierre_ joined
[02:53] *** pierre_ left
[02:53] *** pierre_ joined
[02:56] * avuserow wrote a module (Binary::Structured) and put it in the ecosystem :) ^^^^

[03:06] *** cpage__ joined
[03:06] *** cpage_ left
[03:06] *** cpage__ is now known as cpage_

[03:14] *** Actualeyes joined
[03:31] *** pierre_ left
[03:35] *** Actualeyes left
[03:36] *** ruoso left
[03:39] *** Actualeyes joined
[03:50] *** cog_ left
[03:59] *** khw left
[04:09] *** BillSussman joined
[04:09] *** AndyBotwin left
[04:11] *** NeuralAnomaly left
[04:12] *** NeuralAnomaly joined
[04:12] *** matiaslina joined
[04:12] *** buggable left
[04:13] *** buggable joined
[04:13] *** Cabanossi left
[04:15] *** Cabanossi joined
[04:18] *** Zoffix joined
[04:18] <Zoffix> avuserow++ awesome

[04:18] <yoleaux> 3 Sep 2016 19:25Z <avuserow> Zoffix: I had no intention of doing anything with roast. not sure how that could've happened. thanks for cleaning up :)

[04:18] <Zoffix> titsuki, are you sure your PR fixes anything? From what I can see, the change is a no-op.

[04:18] *** zacts joined
[04:19] *** Actualeyes left
[04:19] <Zoffix> m: say 'wat1' unless 1 && 1; say 'wat2' unless 1 && 0; say 'wat2' unless 0 && 1; say 'wat3' unless 0 && 0;  say 'wat4' unless (1 && 1); say 'wat5' unless (1 && 0); say 'wat6' unless (0 && 1); say 'wat7' unless (0 && 0);

[04:19] <camelia> rakudo-moar aceb4a: OUTPUT«wat2␤wat2␤wat3␤wat5␤wat6␤wat7␤»

[04:21] <Zoffix> m: (10.."15").rand.say

[04:21] <camelia> rakudo-moar aceb4a: OUTPUT«14.2121762763123␤»

[04:21] <Zoffix> s: (10.."15"), "rand", \()

[04:21] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/aceb4af/src/core/Range.pm#L613

[04:22] <Zoffix> 0.o not found?

[04:23] <Zoffix> Looks like commit short-sha is not enough to uniquely identify the commit. This works https://github.com/rakudo/rakudo/blob/aceb4af2/src/core/Range.pm#L613

[04:28] <Zoffix> m: (10.."15").max.^name.say

[04:28] <camelia> rakudo-moar aceb4a: OUTPUT«Int␤»

[04:28] <Zoffix> titsuki, ^ that's the issue. It appears to get coerced before ever reaching .rand

[04:29] * Zoffix doesn't see where

[04:29] <titsuki> hi

[04:34] <Zoffix> m: use MONKEY-GUTS; class Foo { has $.min; has $.max; multi method new (Real \min, Real() $max) {}; multi method new(\min, \max) { nqp::create(self)!SET-SELF(min, max) }; method !SET-SELF ($!min, $!max) {self} }; my $r = Foo.new: 10, "15"; dd $r.max

[04:34] <camelia> rakudo-moar aceb4a: OUTPUT«-Inf␤»

[04:34] <Zoffix> m: use MONKEY-GUTS; class Foo { has $.min; has $.max; multi method new(\min, \max) { nqp::create(self)!SET-SELF(min, max) }; method !SET-SELF ($!min, $!max) {self} }; my $r = Foo.new: 10, "15"; dd $r.max

[04:34] <camelia> rakudo-moar aceb4a: OUTPUT«"15"␤»

[04:34] <Zoffix> weird no? :)

[04:34] <titsuki> m: ("10"..15).rand.say

[04:34] <camelia> rakudo-moar aceb4a: OUTPUT«Can only get a random value on Real values, did you mean .pick?␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[04:35] <titsuki> zoffix: then why it recognize first argument as a Str ?

[04:35] <Zoffix> m: use MONKEY-GUTS; class Foo { has $.min; has $.max; multi method new(\min, \max) { nqp::create(self)!SET-SELF(min, max) }; method !SET-SELF ($!min, $!max) {self} }; my $r = Foo.new: "15", 10; dd $r.min

[04:35] <camelia> rakudo-moar aceb4a: OUTPUT«"15"␤»

[04:35] <Zoffix> m: use MONKEY-GUTS; class Foo { has $.min; has $.max; multi method new (Real \min, Real() $max) {};  multi method new(\min, \max) { nqp::create(self)!SET-SELF(min, max) }; method !SET-SELF ($!min, $!max) {self} }; my $r = Foo.new: "15", 10; dd $r.min

[04:35] <camelia> rakudo-moar aceb4a: OUTPUT«"15"␤»

[04:35] <Zoffix> titsuki, because it's not affected by the bug

[04:36] <Zoffix> Looks like the coersion in one of the multies is messing up the arg

[04:36] <Zoffix> m: dd (10.."15").max

[04:36] <camelia> rakudo-moar aceb4a: OUTPUT«15␤»

[04:37] <Zoffix> Though I wonder why here I get an Int but in my version I get a -Inf

[04:39] *** quester joined
[04:41] *** kaare__ joined
[04:50] <titsuki> m: say 'wat1' unless True && True; say 'wat2' unless True && False; say 'wat2' unless False && True; say 'wat3' unless False && False;  say 'wat4' unless (True && True); say 'wat5' unless (True && False); say 'wat6' unless (False && True); say 'wat7' unless (False && False);

[04:50] <camelia> rakudo-moar aceb4a: OUTPUT«wat2␤wat2␤wat3␤wat5␤wat6␤wat7␤»

[04:52] <Zoffix> unless 1 && 1 is same as unless 1 and 1 is same as unless (1 && 1) is same as unless (1 and 1)

[04:53] <Zoffix> If I comment out the `multi method new(Real \min, Real() $max, :$excludes-min, :$excludes-max)` then .rand craps out properly.

[04:54] <Zoffix> m: https://gist.github.com/zoffixznet/8ff9ec5e7bdf18166b35c6ca064ddba7

[04:54] <camelia> rakudo-moar aceb4a: OUTPUT«["15", "Str"]␤Can only get a random value on Real values, did you mean .pick?␤  in method rand at <tmp> line 78␤  in block <unit> at <tmp> line 114␤␤Actually thrown at:␤  in block <unit> at <tmp> line 114␤␤»

[04:58] <Zoffix> m: say 42 ~~ Real

[04:58] <camelia> rakudo-moar aceb4a: OUTPUT«True␤»

[04:58] <Zoffix> Oh, duuuh... There's no bug! 

[04:59] *** pierre_ joined
[05:00] <Zoffix> titsuki, basically what's happening is the range is created via this multi that coerces the Str max into an Int: https://github.com/rakudo/rakudo/blob/aceb4af2/src/core/Range.pm#L51

[05:00] <titsuki> zoffix: thanks. I totally misunderstood "unless True && False" behavior...

[05:01] <Zoffix> titsuki, you can try removing the coercion and running the spectest to see if anything explodes. Maybe it's not needed there, but I'm unfamilar with the reasons why the end point gets coercion treatment, while there's no case to do the same for the starting point

[05:02] <Zoffix> So basically change the Real() to just plain Real in the signature

[05:02] <Zoffix> And if I do it on my small test code, then .rand does error out properly

[05:04] <titsuki> zoffix: ok I understand.

[05:08] *** pierre_ left
[05:10] <Zoffix> m: use MONKEY-GUTS; class Foo { has $.min; has $.max; multi method new (Real \zmin, Real() $zmax) {}; }; my $r = Foo.new: 10, "15"; dd $r.max

[05:10] <camelia> rakudo-moar aceb4a: OUTPUT«-Inf␤»

[05:10] <Zoffix> I don't get why that ends up being a -Inf tho.

[05:13] <Zoffix> m: use MONKEY-GUTS; class Foo { has $.min; has $.max; multi method new (Real \zmin, Real() $zmax) {}; }; my $r = Foo.new: 10, "15"; dd $r

[05:13] <camelia> rakudo-moar aceb4a: OUTPUT«Any $r = Any␤»

[05:13] <Zoffix> Ahh.. there's no self returned, so you get an Any type object, so the core .max get called that returns a -Inf

[05:14] *** Actualeyes joined
[05:14] *** poohman left
[05:23] *** poohman joined
[05:36] <titsuki> m:StrDistance.new(:before("123"),:after(123)).Int.say

[05:36] <titsuki> m: StrDistance.new(:before("123"),:after(123)).Int.say

[05:36] <camelia> rakudo-moar aceb4a: OUTPUT«Type check failed in assignment to $!after; expected Str but got Int (123)␤  in block <unit> at <tmp> line 1␤␤»

[05:37] <titsuki> m: StrDistance.new(:before(123),:after("123")).Int.say

[05:37] <camelia> rakudo-moar aceb4a: OUTPUT«0␤»

[05:41] <titsuki> Is this a bug ? It seems similar to the above Range's one. https://github.com/rakudo/rakudo/blob/nom/src/core/StrDistance.pm#L6

[05:43] *** CIAvash joined
[05:45] *** mohae joined
[05:48] *** mohae_ left
[05:53] *** matiaslina left
[05:55] *** mohae_ joined
[05:58] *** mohae left
[05:58] *** mohae joined
[05:59] *** briandfoy joined
[06:00] <BenGoldberg> m: StrDistance.new(:before("123"),:after("123")).Int.say

[06:00] <camelia> rakudo-moar aceb4a: OUTPUT«0␤»

[06:01] *** mohae_ left
[06:01] *** BenGoldberg left
[06:22] *** domidumont joined
[06:27] *** domidumont left
[06:28] *** domidumont joined
[06:29] *** poohman left
[06:29] *** _slade_ left
[06:31] *** wamba joined
[06:41] *** pierrot left
[06:41] *** pierrot joined
[06:47] *** grondilu joined
[06:49] <grondilu> isn't there any module for bindings to a NoSQL database?

[06:49] <grondilu> like MongoDB, BerkeleyDB or something like that?

[06:51] <grondilu> or Storable?

[06:51] <titsuki> groudilu: We have a binder for CouchDB https://github.com/jonathanstowe/Sofa

[06:52] <grondilu> lol, best name for a module ever

[06:53] *** raiph joined
[06:54] <grondilu> why isn't it on modules.perl6.org?

[06:54] <raiph> grondilu: mebbe https://github.com/MARTIMM/mongo-perl6-driver?

[06:54] <yoleaux> 18 Aug 2016 12:58Z <AlexDaniel> raiph: I don't remember any big discussion on that topic, so I'd say that it is a consensus of a small bunch of people who care about it. However, don't take my word on it and judge yourself, here is how the logic goes:

[06:54] <yoleaux> 18 Aug 2016 13:03Z <AlexDaniel> raiph: while $^onearg and $^otherarg might look very readable, it is pretty hard to tell which one comes first in the signature. Are you sure that readability is worth the extra mental step which requires the reader to sort the variable names alphabetically (…unicodically?) in his mind? If that does not sound very convincing, think about one of those times when variables are renamed during refactoring

[06:54] <yoleaux> 18 Aug 2016 13:06Z <AlexDaniel> raiph: and no, $^k and $^v is not any better than $^key and $^value. Call me stupid, but I don't know which one comes first off the top of my head. I'd say that $^a $^b $^c are better.

[06:54] <yoleaux> 18 Aug 2016 13:43Z <AlexDaniel> raiph: also feel free to read this discussion: http://irclog.perlgeek.de/perl6/2016-08-18#i_13046240

[06:57] <titsuki> grondilu: Sorry, I'm not sure. I can't find here https://github.com/perl6/ecosystem/blob/master/META.list

[07:08] *** domidumont left
[07:09] *** pierre_ joined
[07:13] *** darutoko joined
[07:14] *** pierre_ left
[07:23] *** poohman joined
[07:27] *** cdg joined
[07:27] *** cdg left
[07:27] *** cdg joined
[07:33] *** pierre_ joined
[07:34] *** pierre_ left
[07:35] *** canopus left
[07:36] *** pierre_ joined
[07:37] *** pierre_ left
[07:38] *** elohmrow joined
[07:40] *** canopus joined
[07:47] *** pierre_ joined
[07:52] *** pierre_ left
[07:55] *** firstdayonthejob joined
[07:55] *** khagan joined
[07:57] *** espadrine joined
[07:57] *** quester left
[08:07] *** TEttinger left
[08:08] *** maybekoo2 joined
[08:08] *** khagan left
[08:16] *** domidumont joined
[08:18] *** khagan joined
[08:19] *** khagan left
[08:21] *** girafe joined
[08:21] *** cdg_ joined
[08:21] *** cdg left
[08:22] *** cdg_ left
[08:23] *** cdg joined
[08:53] <dalek> doc: 6153feb | (Jan-Olof Hendig)++ | doc/Language/io.pod6:

[08:53] <dalek> doc: Fixed some code example indentation problems

[08:53] <dalek> doc: review: https://github.com/perl6/doc/commit/6153feb29c

[09:08] *** elohmrow left
[09:16] *** cdg_ joined
[09:16] *** cdg_ left
[09:16] *** cdg_ joined
[09:17] *** cdg left
[09:19] *** pierre_ joined
[09:31] *** pierre_ left
[09:36] *** cyphase left
[09:38] *** cyphase joined
[09:44] *** lambd0x joined
[09:44] <lambd0x> Hi everyone!

[09:45] *** rightfold left
[09:49] *** domidumont left
[09:50] *** girafe left
[09:55] *** pierre_ joined
[10:01] *** azawawi joined
[10:01] <azawawi> hi

[10:01] <azawawi> lizmat: ping

[10:02] <lizmat> pong

[10:02] <azawawi> lizmat: re https://github.com/perl6/gtk-simple/commit/8a6d92ac2a99fb742d3e5b9656632c7dd0f485ab#commitcomment-18892601

[10:02] <azawawi> lizmat: do you have an example/documentation for "platforms"?

[10:03] <lizmat> no, but the contents of the resources directory is entirely up to the developer

[10:03] *** briandfoy left
[10:04] <azawawi> true but panda tries to copy files in %?RESOURCES and fails on non-windows... that's why empty files

[10:05] <azawawi> if i remember correctly that's the workaround https://github.com/perl6/gtk-simple/commit/8db5f12232432fec38fd0714efeeb09528904976

[10:08] <lizmat> ok

[10:08] <lizmat> I was just triggered by the "design issue" of %?RESOURCES

[10:08] <lizmat> this feels more like a panda design issue  :-)

[10:08] <azawawi> yeah

[10:09] <azawawi> that previous comment also triggered my involvement which triggered yours :)

[10:10] <stmuk> oddly I was just experimenting with %?RESOURCES and panda

[10:10] *** TheLemonMan joined
[10:11] <stmuk> it doesn't seem to work :)

[10:11] *** cdg_ left
[10:13] <lambd0x> Is it normal for rakudo do give errors when comparing scalar integers with integers nums let's say a given index? http://bpaste.net/show/d6cd073895ae

[10:13] <lambd0x> *to...

[10:13] <azawawi> lizmat: i was thinking we should have something likes "resources-by-platform": {"osx": [...], "win32": [...], ...]

[10:13] <azawawi> lizmat: s/likes/like/

[10:14] <lizmat> sounds like a plan to me :-)

[10:14] *** Zoffix left
[10:14] *** NeuralAnomaly_ joined
[10:15] <azawawi> lizmat++

[10:15] *** NeuralAnomaly_ left
[10:18] *** azawawi left
[10:20] *** labster left
[10:21] *** RabidGravy joined
[10:27] *** rindolf joined
[10:34] *** kurahaupo joined
[10:40] *** ItayAlmog joined
[10:46] *** ItayAlmog left
[10:57] *** cdg joined
[11:05] *** cdg left
[11:06] *** cdg joined
[11:11] *** bjz_ joined
[11:12] *** bjz left
[11:20] *** cdg left
[11:25] *** domidumont joined
[11:36] *** domidumont left
[11:45] *** ChoHag joined
[11:45] *** zacts left
[12:04] *** pierre_ left
[12:05] *** araujo left
[12:06] *** araujo joined
[12:13] *** smls joined
[12:26] *** poohman left
[12:27] *** NeuralAnomaly left
[12:27] *** NeuralAnomaly joined
[12:28] *** poohman joined
[12:30] *** kaare__ left
[12:32] *** pierre_ joined
[12:39] *** domidumont joined
[12:41] *** wamba left
[12:44] *** spider-mario joined
[13:15] *** dalek left
[13:16] *** finanalyst joined
[13:16] *** dalek joined
[13:17] *** ChanServ sets mode: +v dalek

[13:17] *** domidumont left
[13:21] *** araujo_ joined
[13:21] <finanalyst> Is there a link on how to connect TCP socket to GUI widgets? I have a TCP server socket, but it needs to wait for a client. Once connected, incoming data goes to a widget. Can't quite work out how to set up the initialisations so that the GUI is up before the first incoming request is made

[13:23] *** araujo_ left
[13:24] *** araujo_ joined
[13:25] *** araujo left
[13:26] <timotimo> many ways to handle this

[13:26] <timotimo> for example, you can hold the data in a queue while the GUI comes up, and when the GUI gets initialized, you drain the queue

[13:27] *** araujo_ left
[13:27] <timotimo> you can also make incoming connections wait until the GUI is initialized, perhaps it's enough to just schedule that task on the GTK::Simple::Scheduler (if GTK is what you're using)

[13:27] *** araujo_ joined
[13:28] *** maybekoo2 left
[13:29] *** araujo_ left
[13:30] <timotimo> here's a thing that perl6 has over python that i hadn't even thought about at all

[13:30] *** araujo_ joined
[13:30] <timotimo> python has this terrible hack of r"foobar" strings for "when you want to type out a regular expression"

[13:31] <timotimo> a friend of mine just complained loudly about how terrible it is to use regular "foo" strings with the re module, and how confusing escaping stuff gets

[13:32] *** araujo_ left
[13:32] <finanalyst> timotimo: thanx for response. I know it's something simple. But I can't quite work out the syntax. I'm confused by the Supply, react, tap etc

[13:32] *** araujo_ joined
[13:33] <timotimo> any particular question i could try to help with?

[13:33] <finanalyst> how to hold data in a queue while the GUI comes up? I mean the perl6 coding

[13:34] *** MilkmanDan left
[13:34] <timotimo> just have a list and push the events into it

[13:36] *** MilkmanDan joined
[13:36] <finanalyst> ok. just making a pastebin of some code I have that doesnt quite work

[13:37] <timotimo> OK

[13:38] *** zacts joined
[13:39] <finanalyst> timotimo: http://pastebin.com/Kj822mMn

[13:39] <timotimo> that's a very bad idea, you're accessing widgets from a separate thread. GTK will have your head on a stick for that

[13:40] <finanalyst> oh?

[13:40] <timotimo> hm, actually

[13:40] <timotimo> maybe it will run on the GTK thread when you're directly tapping a GTK event

[13:40] *** zakharyas joined
[13:40] <timotimo> also, a react block will block, so your second react block will never run in this code

[13:40] <timotimo> (since you never leave the first react block)

[13:41] <finanalyst> that whats happening.

[13:41] <finanalyst> 1st react block unwinds when I connect in from outside. But I can only send one string

[13:42] <timotimo> "unwinds"?

[13:42] *** kaare__ joined
[13:43] <finanalyst> When I run the program, nothing happens til I connect (first block makes a connection), then I send data, which the second block processes, then the GUI goes up

[13:43] <timotimo> anyway, the socket will definitely run on the separate moarvm event loop thread, so you'll be changing gtk widgets from that in your first react block, and also your second react block

[13:43] <finanalyst> I can send data from the perl6 server to the client, but not from the client to the server

[13:43] <timotimo> i don't see the rest of your app. where are you doing $app.exec or $app.run or what it's called?

[13:44] <finanalyst> I do the $app.run at the very end of the code

[13:44] <timotimo> well, there's your problem

[13:44] *** ugexe left
[13:44] <timotimo> $app.run is what makes the gui appear

[13:45] <finanalyst> I can see that. But how to set up the TCP thread before the GUI starts?

[13:46] <timotimo> you're already doing that

[13:46] <finanalyst> Obviously I am using 'react' in an inappropriate wat

[13:46] <finanalyst> way

[13:46] <timotimo> yup

[13:46] <timotimo> you need to give each react block its own thread if you want to use react

[13:47] <timotimo> i'm surprised the blocks even exit at all and you get to see your GUI

[13:47] <finanalyst> I dont want 'react'. I just saw that in a module for a HTTP server react was used

[13:47] <timotimo> maybe some exception happens inside your react block and we don't properly show it?

[13:48] <timotimo> well, then just tap $listen.accept and $conn.recv

[13:48] <finanalyst> The react block seems to execute all the way. 

[13:49] *** bitmap left
[13:50] <finanalyst> As in $listen.accept.tap( -> $b { <statements> });  ?

[13:50] <timotimo> yup

[13:50] <finanalyst> oh!

[13:50] <timotimo> it's also recommended to make sure changes to the GUI get .start'ed on the GTK::Simple::Scheduler

[13:52] <finanalyst> Why use Scheduler? Haven't looked at that module yet?

[13:52] *** dalek left
[13:53] *** dalek joined
[13:53] *** ChanServ sets mode: +v dalek

[13:53] <timotimo> because it makes sure that your code gets run on GTK's thread

[13:53] <timotimo> did you see jnthn's "code golf helper"?

[13:53] <finanalyst> no. where is it?

[13:54] <timotimo> https://github.com/jnthn/perl6-reactive-samples/blob/master/golf-helper/golf-helper.p6

[13:54] <finanalyst> thanks. this has given me some clues.

[13:54] *** poohman left
[13:55] *** MilkmanDan left
[13:55] *** poohman joined
[13:56] <timotimo> :)

[13:56] *** bitmap joined
[13:56] <timotimo> those samples were written before "react" and "whenever" were made. maybe jnthn would have done it differently after that

[13:58] *** MilkmanDan joined
[14:03] *** andrzejku joined
[14:12] *** ugexe joined
[14:15] <pierre_> Hi all

[14:15] <pierre_> i have one question about a module to upload on github

[14:15] <pierre_> my travis configuration, similar to previous ones i used is now complaining to install panda

[14:16] <pierre_> rakudobrew build-panda

[14:16] <pierre_> give me an error about non specified version

[14:16] <pierre_> On some other repo, i have seen

[14:16] <pierre_>  - rakudobrew build-panda ${TRAVIS_PERL6_VERSION#latest}

[14:17] <pierre_> is this the correct command to specify the version for rakudobrew ?

[14:18] <timotimo> i didn't know you had to give a version for build-panda

[14:18] <pierre_> First time i see taht

[14:18] <pierre_> https://travis-ci.org/pierre-vigier/Perl6-Data-MessagePack

[14:19] <pierre_> i check some module on https://modules.perl6.org/ that passed their tests today

[14:19] <pierre_> and i saw that version thing

[14:19] <pierre_> https://github.com/MARTIMM/Auth-SCRAM/blob/master/.travis.yml

[14:20] <timotimo> well, the error we see in Data-Messagepack is from not bumping the NQP dependency version

[14:20] <timotimo> that ought to be fixed in a minute or two

[14:22] <pierre_> hum, i have the same error there

[14:22] <pierre_> https://travis-ci.org/pierre-vigier/Perl6-Acme-Sudoku/builds/157450988

[14:23] <pierre_> => The command "rakudobrew build-panda" failed and exited with 1 during .

[14:23] <pierre_> indeed, that does not solve teh issue :)

[14:24] <timotimo> the fix for compiling perl6 just got committed

[14:24] <pierre_> oh, i misunderstood then

[14:26] *** bitmap left
[14:27] <pierre_> i have a question also on module release, in Data::MessagePack, i have public module, and 2 modules within the namespaces, that are not designed to be called directly

[14:27] <pierre_> in my META

[14:27] <pierre_> should i include only one module, or the 3 of them ?

[14:28] *** ugexe left
[14:29] <timotimo> as far as i know, you can't "use" a module if it isn't "provides"ed

[14:30] <pierre_> ok, i'll include all of them then

[14:30] <pierre_> anyway, there should be no harm in that

[14:31] <pierre_> still need improvement before adding it to the ecosystem

[14:33] <timotimo> that's fair :)

[14:33] <timotimo> have you tried poking travis so it rebuilds your code with the new fixed rakudo?

[14:33] *** espadrine left
[14:33] <pierre_> i am rebuilding on the second modules i had an issue

[14:33] <pierre_> not finished

[14:33] <pierre_> but it seems ok now

[14:33] <pierre_> installing dependencies

[14:33] <timotimo> great

[14:34] <pierre_> https://travis-ci.org/pierre-vigier/Perl6-Acme-Sudoku

[14:34] <pierre_> perfect, Thank you!

[14:35] <pierre_> i'm playing with supply and asynchronicity for Data::messagePack, to handle streaming MessagePack

[14:39] <masak> greetings, #perl6

[14:39] <timotimo> greetings masak

[14:40] <timotimo> m: say 72961176 / 361034

[14:40] <camelia> rakudo-moar 957b52: OUTPUT«202.0894874␤»

[14:40] <timotimo> hmm.

[14:41] *** ugexe joined
[14:42] <pierre_> https://travis-ci.org/pierre-vigier/Perl6-Data-MessagePack

[14:42] <pierre_> working as well, thanks timo

[14:42] <timotimo> \o/

[14:53] *** wamba joined
[14:53] *** RabidGravy left
[14:54] *** skids joined
[14:55] *** pierre_ left
[14:56] *** pierre_ joined
[14:59] *** poohman left
[14:59] *** poohman joined
[15:00] *** buggable left
[15:01] *** pierre_ left
[15:01] *** buggable joined
[15:05] *** RabidGravy joined
[15:16] *** domidumont joined
[15:17] *** domidumont left
[15:18] *** committable6 left
[15:19] *** committable6 joined
[15:19] * skids wonders if there is a "while" version of "with"

[15:20] *** committable6 left
[15:21] *** committable6 joined
[15:21] *** committable6 left
[15:21] <timotimo> well, the big reason to have with over if is to have definedness checked but the original value passed in

[15:21] <timotimo> you're using while with a pointy block?

[15:22] *** finanalyst left
[15:22] *** committable6 joined
[15:25] *** khw joined
[15:25] <skids> yep.

[15:26] <skids> m: my @a = 1,2,3,2,2,4,3,2; while @a.first(* eq 2):k -> $k { @a.splice($k,1) }; @a.say

[15:26] <camelia> rakudo-moar 957b52: OUTPUT«[1 3 4 3]␤»

[15:26] <skids> m: my @a = 2,1,2,3,2,2,4,3,2; while @a.first(* eq 2):k -> $k { @a.splice($k,1) }; @a.say

[15:26] <camelia> rakudo-moar 957b52: OUTPUT«[2 1 2 3 2 2 4 3 2]␤»

[15:26] <skids> Due to the :k being 0.

[15:26] <timotimo> i see

[15:27] <timotimo> i expect a little slang could be written to provide "whiledefined"

[15:27] *** kaare__ left
[15:28] <skids> Yeah probably not worth it for this, though, I'll just longhand it.

[15:29] <timotimo> that's not lovely, honestly

[15:32] *** andrzejku left
[15:35] *** andrzejku joined
[15:39] <skids> m: my @a = 2,1,2,3,2,2,4,3,2; say (while (with @a.first(* eq 2):k -> $k { |@a.splice($k,1) }) { $_ }); @a.say # :/

[15:39] <camelia> rakudo-moar 957b52: OUTPUT«((Any) (Any) (Any) (Any) (Any))␤[1 3 4 3]␤»

[15:39] <timotimo> i'd really use grep instead :)

[15:41] <skids> When self-modifying?

[15:41] <timotimo> you mean in-place?

[15:41] <skids> yeah modifying the @

[15:41] *** ugexe left
[15:42] <timotimo> m: my @foo = 2, 1, 2, 3, 2, 2, 4, 3, 2; say @foo.WHERE; @foo .= grep(none(2)); say @foo.WHERE

[15:42] <camelia> rakudo-moar 957b52: OUTPUT«140510256955024␤140510256955024␤»

[15:42] <skids> meh I'm probably not going to use the return value of :delete in this code anyway.

[15:42] <timotimo> ^- same array object

[15:44] <timotimo> so you're not going to lose anything :)

[15:45] <skids> m: my @a = 2,1,2,3,2,2,4,3,2; for @a.grep(* eq 2):k -> $k { @a.splice($k,1) }; @a.say

[15:45] <camelia> rakudo-moar 957b52: OUTPUT«[1 3 2 4 3]␤»

[15:45] <timotimo> OK, or that way

[15:45] <timotimo> but with splice you're doing a memmove for every element you kick out

[15:45] <timotimo> whereas with my solution you're just paying for a second array of elements

[15:46] <skids> Yeah this is light duty, so not caring much.

[15:46] *** Actualeyes left
[15:46] <timotimo> the code is much longer, though

[15:46] *** kaare_ joined
[15:47] *** MilkmanDan left
[15:47] *** poohman left
[15:47] <skids> Also have to gen the return value of the deleted elements.

[15:47] <timotimo> oh

[15:47] <timotimo> didn't know that, sorry :)

[15:47] <timotimo> in that case you can grep twice :)

[15:48] <skids> :)

[15:49] *** poohman joined
[15:51] *** araujo__ joined
[15:52] <skids> darn, it's hard to search RT for "with" :-)

[15:52] <timotimo> ugh, yeah

[15:52] *** araujo__ left
[15:53] *** araujo__ joined
[15:53] *** araujo_ left
[15:57] *** BillSussman left
[15:57] *** poohman left
[15:58] *** poohman joined
[15:58] *** pierre_ joined
[15:58] *** Ven_ joined
[15:59] *** Ven_ left
[16:00] *** Ven_ joined
[16:01] *** BillSussman joined
[16:03] *** Ven_ left
[16:04] *** pierre_ left
[16:05] <skids> Hmmmm...

[16:05] <skids> m: (while 42 -> $f { $f.say })[0..1].say

[16:05] <camelia> rakudo-moar 957b52: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in code  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:06] *** Ven_ joined
[16:07] *** Ven_ left
[16:08] *** ugexe joined
[16:09] *** MilkmanDan joined
[16:11] *** Ven_ joined
[16:12] *** eliasr joined
[16:12] *** Ven_ left
[16:12] *** Ven_ joined
[16:13] *** ruoso joined
[16:13] *** Ven_ left
[16:16] *** Ven_ joined
[16:17] <timotimo> oh, i thought while supported arguments

[16:21] *** Ven_ left
[16:22] <skids> It does.

[16:22] <skids> Just apparently not when lazy

[16:22] <skids> Filing RT.

[16:22] <timotimo> oh yikes

[16:24] *** Ven_ joined
[16:24] <skids> RT#129195

[16:24] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129195

[16:24] *** cdg joined
[16:25] *** Ven_ left
[16:25] *** Ven_ joined
[16:26] <timotimo> good catch, bad bug

[16:26] *** andrzejku left
[16:26] *** Ven_ left
[16:27] <timotimo> i have a line number :)

[16:28] <timotimo> yeah, '$result := &!body()'

[16:28] <skids> That'd do it.

[16:28] *** smls left
[16:29] <timotimo> that's the InfiniteLoopIter, but there's also a WhileLoopIter that does the same thing

[16:29] <timotimo> i wonder if those ought to be duplicated? :\

[16:29] *** Ven_ joined
[16:30] <skids> One might save on a truthiness check for tight loops I guess.

[16:31] *** araujo_ joined
[16:31] *** Ven_ left
[16:33] *** Ven_ joined
[16:33] <timotimo> yeah, but ... so much code :o

[16:34] *** Ven_ left
[16:34] *** araujo__ left
[16:34] *** cdg left
[16:34] *** maybekoo2 joined
[16:35] *** cdg joined
[16:35] <timotimo> how should we handle a while loop taking multiple arguments?

[16:35] *** andrzejku joined
[16:36] <skids> That's... a good question. :-)

[16:38] *** Ven_ joined
[16:39] *** Ven_ left
[16:39] *** Ven_ joined
[16:40] <timotimo> m: while 43 -> $a, $b { say "oh" }

[16:40] <camelia> rakudo-moar 710797: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[16:41] <timotimo> i wonder if we should complain at parse time?

[16:41] *** bitmap joined
[16:44] *** poohman left
[16:44] *** Ven_ left
[16:47] *** Ven_ joined
[16:48] *** Ven_ left
[16:48] *** Ven_ joined
[16:49] *** Ven_ left
[16:50] *** ufobat joined
[16:52] *** Ven_ joined
[16:52] *** Ven_ left
[16:53] *** Ven_ joined
[17:00] *** cdg left
[17:03] *** cdg joined
[17:12] *** girafe joined
[17:12] *** calopter joined
[17:14] <AlexDaniel> is it possible to get a $?LINE on which the current subroutine has been called?

[17:16] <AlexDaniel> kinda like a second line in the stacktrace

[17:16] <MasterDuke> callframe.line perhaps?

[17:21] *** rodarmor left
[17:21] *** revdiablo left
[17:22] *** DrForr left
[17:22] <timotimo> can you try CALLER::('$?LINE') or some other access method?

[17:22] <timotimo> maybe CALLER::$?LINE also works?

[17:22] *** leont joined
[17:24] <nine> AlexDaniel: callframe(1).line

[17:25] *** Actualeyes joined
[17:29] *** zacts left
[17:30] *** rodarmor joined
[17:30] *** DrForr joined
[17:32] *** mst left
[17:32] *** mst joined
[17:33] *** mst left
[17:33] *** mst joined
[17:34] <masak> I don't think I've stressed it enough here: TravisCI has disrupted the way I do TDD on a project. I did not anticipate this.

[17:34] *** revdiablo joined
[17:35] *** dwarring joined
[17:35] *** mst left
[17:35] *** mst joined
[17:36] <MasterDuke> masak: in a good or bad way?

[17:36] *** zacts joined
[17:37] *** cdg left
[17:40] *** cdg joined
[17:42] *** skids left
[17:44] *** cdg left
[17:47] *** calopter left
[17:48] *** iH2O joined
[17:53] *** _slade_ joined
[17:56] <timotimo> i didn't actually fix the bug skids found, but i did comment on it on rt. and then promptly forgot to click the "toggle CC to perl6 mailing list" thing

[17:57] <masak> MasterDuke: exclusively in a good way.

[17:57] <masak> MasterDuke: it has made me write tests I didn't before.

[17:57] *** iH2O left
[17:58] <timotimo> it has made you write tests like never before

[17:58] <MasterDuke> interesting

[18:00] *** Ven_ left
[18:01] <masak> basically this entire directory: https://github.com/masak/007/tree/bf44fc7b4d1189ed9657bfbc996e7e505cf31da5/t/code-style

[18:01] <masak> and a few test files outside of that

[18:02] <masak> the basic premise is that if you care about code quality along some dimension, then there's an observable in there somewhere, which can be tested.

[18:02] *** r_i_d joined
[18:02] <masak> and so, if someone screws up the indentation or uses an identified code smell, it *fails the build*

[18:04] <r_i_d> when doing testing, using dies-ok {}, is there a way to return the die string? If something fails for the wrong reason in a test, there's no way for me to know...

[18:04] <masak> for one thing, it has made PR code reviews nicer. I don't have to jump in and say "hm, your indentation is out of whack" or "we don't do it that way in this project". TravisCI just reports "failed build", and that's that.

[18:05] <masak> it has a distinctly more "objective" quality, for some reason.

[18:05] <masak> r_i_d: that's why I don't use dies-ok.

[18:05] <masak> r_i_d: check out throws-like

[18:06] <r_i_d> ok, thanks i will!

[18:07] <masak> m: say 1e0 / 0e0; CATCH { say .^name }

[18:07] <camelia> rakudo-moar 710797: OUTPUT«X::Numeric::DivideByZero␤Attempt to divide 1 by zero using /␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:07] <masak> m: use Test; throws-like { say 1e0 / 0e0 }, X::Numeric::DivideByZero, "got the right exception when dividing by 0"

[18:07] <camelia> rakudo-moar 710797: OUTPUT«    1..2␤    ok 1 - code dies␤    ok 2 - right exception type (X::Numeric::DivideByZero)␤ok 1 - got the right exception when dividing by 0␤»

[18:07] <masak> r_i_d: ^ example

[18:07] <r_i_d> nice

[18:07] *** andrzejku left
[18:09] *** r_i_d left
[18:11] <AlexDaniel> MasterDuke: callframe is OK, thank you!

[18:12] *** thundergnat joined
[18:12] <thundergnat> Howdy #perl6

[18:13] <AlexDaniel> o/

[18:13] <thundergnat> timotimo: Are you still maintaining SDL2::Raw ?

[18:15] <thundergnat> I've been messing around with it and am getting segfaults when trying to do some seemingly straightforward things.

[18:15] <El_Che> timotimo: in case you're maintaining the perl6 environment? Would packages with specific version be a faster option for modules? 

[18:16] <AlexDaniel> \o/ segfaults!

[18:16] <thundergnat> For instance: trying to change the window title...

[18:16] <AlexDaniel> /o\

[18:16] <El_Che> timotimo: for a module we don't need to test if rakudo builds, only that the module passes its tests

[18:17] <thundergnat> E.G. https://gist.github.com/thundergnat/ed898d5c13d1119c105bb1b9cd11e627 reliably segfaults for me...

[18:17] <thundergnat> It is entirely possible I am doing something stupid though.

[18:19] <timotimo> thundergnat: a little bit, yeah

[18:19] *** calopter joined
[18:19] <timotimo> El_Che: i don't know what you mean by "the perl6 environment"

[18:19] *** zakharyas left
[18:19] <timotimo> thundergnat: i'll take a look at you rcode

[18:19] <calopter> Hello! How can I make a subset which can be any one of a given set of values (of the same type)?

[18:20] <El_Che> timotimo: sorry, I thought you did the travis integration: https://docs.travis-ci.com/user/languages/perl6

[18:20] <timotimo> thundergnat: i'll take a look at you rcode

[18:20] <thundergnat> timotimo: thanks

[18:20] <El_Che> maybe masak 

[18:21] <calopter> I tried 'subset Category of Str where { <a bunch of strings>.contains: $_  }'

[18:21] <calopter> But then 'my Category $c = "a bunch";' typechecks...

[18:22] <timotimo> thundergnat: it doesn't segfault on my machine ...

[18:22] <thundergnat> timotimo: While I am bothering you, would it be possible to put a license on the SDL2::Raw module? Right now it is kind of undefined.

[18:22] <timotimo> can you get a bit more info? like perl6-gdb-m it and give me a backtrace? or see if the window it returns is a null pointer?

[18:22] <timotimo> ah, sure

[18:23] <timotimo> oh, i'm the only contributor?

[18:23] <timotimo> i won't even have to ask anybody if a given license is okay

[18:23] <thundergnat> There are a few open pull requests but so far, you're it.

[18:23] *** andrzejku joined
[18:23] *** Actualeyes left
[18:23] <timotimo> indeed there are :o

[18:24] *** firstdayonthejob left
[18:24] *** poohman joined
[18:24] *** iH2O joined
[18:25] <timotimo> is there anything in the artistic license 2.0 that i'd have to change before putting it into SDL2::Raw?

[18:27] <thundergnat> timotimo: If you are asking me, not that I know of; It is the license I generally release under.

[18:28] <timotimo> OK

[18:29] *** poohman left
[18:30] *** zacts left
[18:30] <thundergnat> timotimo: Hmm. Looks like I may be missing something on my system. Backtrace: https://gist.github.com/thundergnat/3843814a88dda1ee3bd2443a0db43c64

[18:30] <lizmat> calopter: not sure what you mean / the problem is

[18:30] *** firstdayonthejob joined
[18:30] <lizmat> do you have an actual code / error we could check?

[18:31] <calopter> lizmat: I'm trying to replicate the behavior of a sum type

[18:32] <timotimo> thundergnat: yikes, that looks kinda bad

[18:32] <timotimo> thundergnat: what's your moar version?

[18:32] *** CIAvash left
[18:33] <thundergnat> Um. Its 2016.08. Not sure of the commit

[18:34] <timotimo> hmm.

[18:34] <lizmat> calopter: I must be too tired to understand how I can help you  :-(

[18:34] <lizmat> afk&

[18:35] <timotimo> bisectable6: GOOD=head BAD=2016.08 use NativeCall; sub printf(Str $foo) is native(Str); printf("hello");

[18:35] <bisectable6> timotimo, On both starting points (good=2015.12 bad=7107976) the exit code is 1 and the output is identical as well

[18:35] <bisectable6> timotimo, https://gist.github.com/3b5c5b343688834a6a18169a03d6c21b

[18:35] <timotimo> :\

[18:35] *** poohman joined
[18:35] <timotimo> bisectable6: GOOD=e8d0d04 BAD=2016.08 use NativeCall; sub printf(Str $foo) is native(Str); printf("hello");

[18:35] <bisectable6> timotimo, On both starting points (good=2015.12 bad=7107976) the exit code is 1 and the output is identical as well

[18:35] <bisectable6> timotimo, https://gist.github.com/925f00227720c448c45b7f662893bd18

[18:35] <timotimo> what is wrong with the good= here?

[18:36] <timotimo> thundergnat: can you try the code i gave to bisectable?

[18:36] <thundergnat> Sure, hold on

[18:36] <timotimo> oh

[18:36] <timotimo> it was not parsing my good/bad at all

[18:36] <timotimo> bisectable6: use NativeCall; sub printf(Str $foo) is native(Str); printf("hello");

[18:37] <bisectable6> timotimo, On both starting points (good=2015.12 bad=7107976) the exit code is 1 and the output is identical as well

[18:37] <bisectable6> timotimo, Output on both points: ===SORRY!=== Error while compiling /tmp/zTIkIkmfr9␤A unit-scoped sub definition is not allowed except on a MAIN sub;␤Please use the block form.␤at /tmp/zTIkIkmfr9:1␤------> ll; sub printf(Str $foo) is native(Str);<HERE> printf("hello");

[18:37] <timotimo> m)

[18:37] <timotimo> bisectable6: use NativeCall; sub printf(Str $foo) is native(Str) { }; printf("hello");

[18:37] <bisectable6> timotimo, On both starting points (good=2015.12 bad=7107976) the exit code is 0 and the output is identical as well

[18:37] <bisectable6> timotimo, Output on both points: hello

[18:37] <calopter> lizmat: Thanks for looking. I have a set of valid values (Str in this case) and I want to make a subset that can be only one of those values

[18:38] <woolfy> calopter: please give a code example so lizmat (or others) can see what you are doing

[18:38] <timotimo> thundergnat: actually, maybe it's bogus that SDL_SetWindowTitle is set to "returns Str"

[18:39] <thundergnat> timotimo: I get the unit-scoped sub error

[18:39] <timotimo> indeed, that's probably the mistake

[18:40] <timotimo> thundergnat: i just uploaded a new commit that might fix your issue

[18:40] <calopter> woolfy: 'subset Category of Str where { set <a bunch of strings>.contains: $_  };' the problem is for the logic I need 'my Category $c = "a bunch";' should not typecheck, but with my subset implementation it does

[18:40] <thundergnat> I'll give it a shot.

[18:40] <timotimo> do we actually have .contains?

[18:40] <calopter> oops, that's for list

[18:40] <calopter> not set

[18:40] <timotimo> calopter: you're calling .contains on the list of strings and turnign the result into a Set here

[18:41] <timotimo> so you're ending up with a set that contains either True or False

[18:41] <timotimo> both would be considered true

[18:41] <thundergnat> timotimo: \o/ woohoo! That fixed it. Thanks!

[18:42] <timotimo> the quality of my library, and also my maintaining of it, is quite poor

[18:42] <calopter> timotimo: Ok, thanks. I see that now. But if I leave out the set keyword and keep it as a list, the logic is still not what I'm looking for

[18:43] <thundergnat> It is better than all the other perl6 SDL2 bindings in the library. :-)

[18:43] <woolfy> thanks people for looking into problem of calopter ...  at the moment lizmat does not see stuff...  and we are on the way out to have a light meal (we walked on a mountain today, woohoo)...

[18:43] <MasterDuke> m: subset C of Str where {<ab cd ef>.contains($_)}; my C $a = "ab"; my C $b = "bc"

[18:43] <camelia> rakudo-moar 710797: OUTPUT«Type check failed in assignment to $b; expected C but got Str ("bc")␤  in block <unit> at <tmp> line 1␤␤»

[18:43] <timotimo> m: say <a bunch of strings>.contains: "foo"; say <a bunch of strings>.contains: "a"

[18:43] <camelia> rakudo-moar 710797: OUTPUT«False␤True␤»

[18:43] *** iH2O left
[18:44] <timotimo> ah, contains come from Str, so it's turning the list into a Str for you

[18:44] <timotimo> which by default means it gets spaces between the elements

[18:44] <timotimo> m: say <a bunch of strings> (elem) "foo"; say <a bunch of strings> (elem) "a"

[18:44] <camelia> rakudo-moar 710797: OUTPUT«False␤False␤»

[18:44] <timotimo> wrong way around

[18:44] <timotimo> m: say <a bunch of strings> R(elem) "foo"; say <a bunch of strings> R(elem) "a"

[18:44] <camelia> rakudo-moar 710797: OUTPUT«False␤True␤»

[18:44] <timotimo> m: say <a bunch of strings>.contains: "a bunch"; say <a bunch of strings> R(elem) "a bunch"

[18:44] <camelia> rakudo-moar 710797: OUTPUT«True␤False␤»

[18:44] <timotimo> that's the source of your trouble :)

[18:45] <calopter> ahah

[18:45] <timotimo> you may want to write that as a set instead of a list, though, so it doesn't try to construct the set every time a typecheck happens

[18:45] <calopter> Thanks for demistifying!

[18:46] <timotimo> no problem

[18:46] <MasterDuke> m: subset C of Str where {<ab cd ef>.grep($_)}; my C $a = "ab"; my C $b = "bc"

[18:46] <camelia> rakudo-moar 710797: OUTPUT«Type check failed in assignment to $b; expected C but got Str ("bc")␤  in block <unit> at <tmp> line 1␤␤»

[18:46] *** poohman left
[18:47] <calopter> so I need to read up on ways to check for membership I see. thanks all

[18:47] <grondilu> m: subset C of Str where <ab cd ef>.any; say "ab" ~~ C

[18:47] <camelia> rakudo-moar 710797: OUTPUT«True␤»

[18:48] <timotimo> that one isn't bad ^

[18:50] <calopter> nice

[18:51] <calopter> feels appropriately elegant

[18:59] *** poohman joined
[19:03] *** telex left
[19:04] <AlexDaniel> hehe, wanna hear a joke?

[19:04] <AlexDaniel> “Pythonic functional programming language”

[19:04] *** telex joined
[19:04] <AlexDaniel> and guess what, it exists! http://coconut-lang.org/

[19:05] *** labster joined
[19:07] <timotimo> it wouldn't be very surprising to find lagnuages that are more pythonic than python itself

[19:12] * tadzik giggles

[19:12] <tadzik> 4 activity notifications in weechat while I was afk, 2 of them are python jokes

[19:13] <timotimo> you have a highlight on "python"?

[19:15] <MasterDuke> i accidentally committed to master in my rakudo fork and then created a PR (instead of from a branch). if i move my commit into a branch and (force?) push that to my fork, will that mess up the PR?

[19:18] *** andrzejku left
[19:19] <timotimo> the PR will remember that you wanted the perl6/rakudo repository to pull from your nom branch

[19:19] *** poohman left
[19:19] <timotimo> that means you "force-push into a PR" by overwriting the branch you selected at the very beginning

[19:19] *** darutoko left
[19:19] <timotimo> on the other hand, there's nothing wrong with a PR that comes off of your "nom" branch

[19:20] *** pochi joined
[19:22] *** zakharyas joined
[19:23] *** poohman joined
[19:27] *** leont left
[19:35] *** canopus_ joined
[19:35] *** canopus left
[19:35] *** canopus_ is now known as canopus

[19:42] *** keithbro joined
[19:49] *** zacts joined
[19:59] *** TEttinger joined
[19:59] <ufobat> m: my @a = (1..3); my @b = @a.map: {$_+1}; say @b.WHAT

[19:59] <camelia> rakudo-moar 29e2ca: OUTPUT«(Array)␤»

[19:59] <ufobat> m: my @a = (1..3); my $b = @a.map: {$_+1}; say $b.WHAT

[19:59] <camelia> rakudo-moar 29e2ca: OUTPUT«(Seq)␤»

[19:59] <ufobat> m: my @a = (1..3); my @b = @a.map: {$_+1}; my $b = @b; say $b.WHAT

[19:59] <camelia> rakudo-moar 29e2ca: OUTPUT«(Array)␤»

[20:00] <ufobat> would anyone please explain me why the Seq happens?

[20:01] <timotimo> because assigning to an array is list assignment

[20:02] <timotimo> assigning to a scalar will just store your thing

[20:03] <TEttinger> I still don't see the difference between the line that printed Array and the one that printed Seq

[20:03] <vcv> @a vs $a

[20:03] <TEttinger> oh, on the b

[20:03] <ufobat> when i am having some class and make Foo.new(named => sub()) vs my %hash = (named => sub()); Foo.new(|%hash) i am getting different results. thats why i am asking

[20:04] <vcv> err @b vs $b, oops

[20:05] <timotimo> oh?

[20:06] *** itaipu joined
[20:06] <ufobat> sub aaa { my @a = (1..3); return @a.map: {$_ + 1}}; class Foo {has @.named}; my %h = (named => aaa()); Foo.new(|%h).perl.say

[20:07] <ufobat> m: sub aaa { my @a = (1..3); return @a.map: {$_ + 1}}; class Foo {has @.named}; my %h = (named => aaa()); Foo.new(|%h).perl.say

[20:07] <camelia> rakudo-moar 29e2ca: OUTPUT«Foo.new(named => [(2, 3, 4).Seq,])␤»

[20:07] <ufobat> vs

[20:07] <ufobat> m: sub aaa { my @a = (1..3); return @a.map: {$_ + 1}}; class Foo {has @.named}; Foo.new(named => aaa()).perl.say

[20:07] <camelia> rakudo-moar 29e2ca: OUTPUT«Foo.new(named => [2, 3, 4])␤»

[20:07] <ufobat> i am looking for a way to work with the hash, but still having the Array

[20:09] *** rindolf left
[20:10] *** cdg joined
[20:12] *** rindolf joined
[20:15] *** itaipu left
[20:18] *** rindolf left
[20:19] *** bbkr_ left
[20:22] *** labster left
[20:24] *** rindolf joined
[20:27] <lizmat> timotimo++ grondilu++ helping calopter 

[20:31] *** calopter left
[20:39] *** keithbro_ joined
[20:39] *** keithbro left
[20:39] *** keithbro_ is now known as keithbro

[20:41] *** BenGoldberg joined
[20:49] *** danlei joined
[20:51] *** espadrine joined
[20:54] *** cdg left
[20:54] *** keithbro left
[20:54] *** cdg joined
[20:55] <danlei> hi. I reported a bug two days ago. there was a fix yesterday and the bug was closed. I think there are still problems, but when I responded to [email@hidden.address] my message didn't show up in the bug tracker.  (I responded yesterday and nothing has showed up in the tracker until now.) now, I'm not sure what to do. should I just file a new bug report?

[20:55] <danlei> this one: https://rt.perl.org/Public/Bug/Display.html?id=129179

[20:58] <danlei> the problem: http://pastebin.com/PdPY430c

[20:58] <danlei> (2016.08.1-83-gaceb4af)

[20:59] <JimmyZ> danlei: just file a new bug report

[21:01] *** edehont joined
[21:01] <danlei> JimmyZ: ok, thanks

[21:01] *** zakharyas left
[21:02] <danlei> JimmyZ: by the way: it should have appeared in the bug tracker when I responded to [email@hidden.address] right? or did I misunderstand how to use this thing?

[21:03] <MasterDuke> danlei: it should have, but RT was having some troubles today (it went down once or twice), so your replies may have been lost or may still be in some queue

[21:03] <danlei> MasterDuke: I see. thanks!

[21:04] <MasterDuke> do the reply or comment buttons on the RT page work for you?

[21:05] *** poohman left
[21:05] <danlei> they open a page with site info ("this service is sponsored ...")

[21:06] <danlei> (when I click it as a guest, anyway)

[21:06] <MasterDuke> ahh, if i remember correctly you have to have an RT account to use them. if you think you'll be submitting more bug reports it would probably be useful to get an RT account

[21:06] *** TEttinger left
[21:07] *** rindolf left
[21:07] <danlei> hm – bitcard. never heard of it.

[21:07] <danlei> I'll take a look

[21:08] <MasterDuke> email is convenient for quick one-offs, but i find my replies show up faster (immediately) if i'm logged in and use the reply/comment buttons

[21:09] *** zacts left
[21:09] <danlei> ok. I'll just set up an account then.

[21:09] *** labster joined
[21:10] <danlei> thanks

[21:10] <El_Che> I also use the web interface. You see right away your comments posted. A few time it tooks hours before my comment appeared

[21:10] <MasterDuke> glad to help. and thanks for the reports

[21:11] <MasterDuke> and now for something completely different...

[21:11] <MasterDuke> what's a good way to find the max value of an int (not Int)?

[21:13] <lizmat> m: int32.Range.max.say

[21:13] <camelia> rakudo-moar e39ab8: OUTPUT«2147483647␤»

[21:14] <lizmat> MasterDuke: ^^^

[21:14] <MasterDuke> lizmat: great, thanks

[21:14] *** zacts joined
[21:15] <MasterDuke> any equivalent in nqp?

[21:15] <lizmat> MasterDuke: not as far as I know

[21:16] <lizmat> this just lives in the core settings

[21:19] *** wamba left
[21:21] *** grondilu left
[21:24] *** maybekoo2 left
[21:24] *** poohman joined
[21:30] *** rudolfochrist joined
[21:36] *** labster left
[21:38] *** rudolfochrist left
[21:39] *** labster joined
[21:40] *** edehont left
[21:41] *** cdg_ joined
[21:45] *** cdg left
[21:45] *** poohman_ joined
[21:46] *** poohman left
[21:47] *** itaipu joined
[21:57] *** bjz_ left
[22:02] <danlei> hm -- this bug tracker is a bit confusing

[22:03] *** cdg_ left
[22:04] <danlei> I created an account, and now I can't get to the bug anymore. it always redirects me to rt.perl.org/SelfService, even when I paste the bug url in the navigation bar. when I enter the bug id in the goto ticket tingie, it says that I have no permission to view that ticket.

[22:04] * danlei scratches his head

[22:04] <danlei> *thingie

[22:05] <MasterDuke> ahh, that's happened to a couple people

[22:05] <timotimo> is that the kind of thing we need [Coke] to fix?

[22:06] <geekosaur> that happens to me as well, fwiw

[22:11] *** poohman_ left
[22:13] *** poohman joined
[22:15] *** bjz joined
[22:16] *** espadrine left
[22:17] *** RabidGravy left
[22:17] <danlei> strange. doesn't work in other browsers either. well, I guess I'll just open another ticket then.

[22:18] <[ptc]> anyone else having problems pulling from (or pushing to) GitHub atm?

[22:18] <[ptc]> just wondering if it's just me...

[22:21] <[Coke]> I can't fix anything with RT; standard web app debugging applies: clear your cache/cookies for the site; try a different browser; if that doesn't work, please open a ticket with the admins (email addy listed at the bottom of the rt.perl.org site)

[22:21] *** kurahaupo left
[22:24] <dalek> Heuristic branch merge: pushed 16 commits to perl6-examples by paultcochrane

[22:26] <[ptc]> hrm, dunno GH was hanging for me, it's working now.  Oh well...

[22:33] *** poohman left
[22:33] *** bjz left
[22:36] *** firstdayonthejob left
[22:39] *** zacts left
[22:39] *** poohman joined
[22:40] *** spider-mario left
[22:45] *** labster left
[22:51] *** hanekomu left
[22:56] *** poohman left
[22:56] <lambd0x> I'm jumping over the conclusion that moar/rakudo might not be ready for large data input at all when it comes to sorting algs :S.

[23:00] <dalek> ecosystem: 39066e6 | (Andy Weidenbaum)++ | META.list:

[23:00] <dalek> ecosystem: Add module TXN::Remarshal

[23:00] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/39066e6912

[23:00] <dalek> ecosystem: f6f5a5b | Altai-man++ | META.list:

[23:00] <dalek> ecosystem: Merge pull request #246 from atweiden/txn-remarshal

[23:00] <dalek> ecosystem: 

[23:00] <dalek> ecosystem: Add module TXN::Remarshal

[23:00] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/f6f5a5bd6b

[23:07] *** poohman joined
[23:08] *** danlei left
[23:09] <timotimo> lambd0x: how do you figure? also, why not just use the sort impl we already have?

[23:10] *** itaipu left
[23:12] *** TheLemonMan left
[23:17] <timotimo> lambd0x: do you have all your code up in a git repo or something?

[23:17] <lambd0x> timotimo: remember that bubbleSort alg? Well I also implemented merge, quick, insert, selection, heap, etc... even though they look clean and work for relatively 0...75000 inputs they will start giving odd errors for bigger input data. I'm not saying that the impl. sorting alg. we have is not good, but any alg. should work for all input sizes until it rans out of memory and for some this is not being true 

[23:17] <lambd0x> unfortunately :'(

[23:17] <lambd0x> timotimo: yes.

[23:17] <timotimo> right, it's not supposed to crash

[23:17] <timotimo> need to test that stuff and figure out what's going wrong

[23:18] *** poohman left
[23:19] *** poohman joined
[23:19] <lambd0x> timotimo: https://github.com/lambd0x/Learn-Perl-6 in the sorting directory.  

[23:21] *** cog_ joined
[23:22] <timotimo> i find it surprising that you iterate over the words in a file in order to push it into a list and return that

[23:22] <timotimo> rather than just returning .IO.words directly

[23:24] *** MilkmanDan left
[23:24] *** MilkmanDan joined
[23:26] <lambd0x> timotimo: I'm still learning, so yeah I have a lot improve I think :P

[23:27] <lambd0x> timotimo: have u seen that those environment variables made bubble with 5k input work for that ^..^ issue ?

[23:27] <timotimo> yeah, it's potentially a specialization problem

[23:28] <timotimo> might be fiddly to actually figure out

[23:28] <timotimo> we'll see

[23:29] <timotimo> i'll probably go to bed in a little bit

[23:30] <lambd0x> timotimo: ok

[23:31] *** poohman left
[23:33] *** poohman joined
[23:35] *** zacts joined
[23:38] *** poohman left
[23:40] *** TimToady left
[23:41] *** TimToady joined
[23:43] *** poohman joined
[23:45] *** pierre_ joined
[23:49] *** pierre_ left
