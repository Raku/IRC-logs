[00:00] <cognominal> m:   sub foo(int $val is rw) { $val = 42 };

[00:00] <camelia> rakudo-moar 09cc2f: ( no output )

[00:00] <cognominal> this should give an error. One can't mutate an int

[00:01] *** addison left
[00:01] <cognominal> m:   sub foo(int $val is rw) { $val = 42 }; my int $i = 0; foo($i); say $i

[00:01] <camelia> rakudo-moar 09cc2f: OUTPUT«42␤»

[00:01] <cognominal> oops

[00:01] <cognominal> I was wrong

[00:01] <cognominal> m:   sub foo(int $val is rw) { $val = 42 }; my $i = 0; foo($i); say $i

[00:01] <camelia> rakudo-moar 09cc2f: OUTPUT«Expected a modifiable native int argument for '$val'␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:02] *** rgrinberg left
[00:02] <cognominal> ok, I underdstand my mistake.

[00:02] *** rgrinberg joined
[00:03] <cognominal> really a reference

[00:04] <cognominal> m:   sub foo(int $val is rw) { $val = 42 }; my Int $i = 0; foo($i); say $i

[00:04] <camelia> rakudo-moar 09cc2f: OUTPUT«Expected a modifiable native int argument for '$val'␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:04] *** kid51 joined
[00:04] *** wtw joined
[00:06] <dalek> doc: e15bc8f | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[00:06] <dalek> doc: doc .&

[00:06] <dalek> doc: review: https://github.com/perl6/doc/commit/e15bc8f6d2

[00:08] <lambd0x> :'-) My first perl6 code to actually to something, 'll try to improve it later on.  https://bpaste.net/show/bd7be883000d

[00:08] <lambd0x> *do some...

[00:09] *** ShimmerFairy joined
[00:09] *** lizmat left
[00:10] <parabolize> tbrowder: this is disgusting but you could explicitly create a capture and flatten it in place: `foo |\(2, 3)`

[00:11] *** huggable left
[00:13] *** lizmat joined
[00:14] <tbrowder> actually, this also works:

[00:14] <tbrowder> m: sub foo($x,$y){$x+$y}; foo |(2,3);

[00:14] <camelia> rakudo-moar 09cc2f: ( no output )

[00:14] <tbrowder> m: sub foo($x,$y){ say "$x $y"}; foo |(2,3);

[00:14] <camelia> rakudo-moar 09cc2f: OUTPUT«2 3␤»

[00:15] <tbrowder> m: sub foo($x,$y){ say "$x $y"}; foo flat (2,3);

[00:15] <camelia> rakudo-moar 09cc2f: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:15] <tbrowder> m: sub foo($x,$y){ say "$x $y"}; foo (flat (2,3));

[00:15] <camelia> rakudo-moar 09cc2f: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:15] <tbrowder> weird...

[00:16] <tbrowder> tbrowder: scratches head and sees explanation getting complicated...

[00:20] *** ocbtec_ left
[00:24] *** k0dr joined
[00:30] <TimToady> flat flattens the arguments *to* flat, but not the list in which flat occurs; in contrast | flattens into the surrounding list

[00:30] <yoleaux> 22 Jun 2016 18:06Z <BrokenRobot> TimToady: message for you: http://irclog.perlgeek.de/perl6/2016-06-22#i_12713791

[00:31] <k0dr> Looking at the docs for perl 6 and confused over http://documentation.perl6.org/documentation/ vs https://docs.perl6.org

[00:31] <k0dr> per Util, http://documentation.perl6.org/ should redirect to https://docs.perl6.org

[00:31] <k0dr> Not sure I can help with that. Any thoughts?

[00:32] <lizmat> moritz knows how to fix that, but I'm not sure we should

[00:33] <k0dr> They certainly aren't the same docs. But one does seem to have more external links.

[00:34] <lizmat> well, simply rename documentation.perl6.org to doc.perl6.org will cause at least one link to recurse

[00:35] <timotimo> k0dr: documentation.perl6.org isn't set up at all, so it just defaults to www.perl6.org

[00:36] <mspo> ditto sandwiches.perl6.org

[00:37] <k0dr> Ah yes, sorry about inflating the url. However, http://perl6.org/documentation/ does work and goes to a completely different place than docs.perl6.org.

[00:37] <timotimo> yup

[00:37] <k0dr> Is there a right or wrong? Should they be merged?

[00:40] <k0dr> Or are these meant for different purposes/audience?

[00:40] <timotimo> perl6.org/documentation does link to the docs.perl6.org

[00:46] *** sivoais joined
[00:49] *** kurahaupo left
[00:50] *** cyphase left
[00:53] *** addison joined
[00:54] <parabolize> where is the < ... > operator tested in roast? S02-literals/allomorphic.t? what does the :v in qw:v/ ... / do? I ask because I'm trying to write a pull request for pygments.lexers.perl.Perl6Lexer.tokens. `r'<[^\s=].*?\S>', String` isn't doing the trick. It gets false matches and misses things it shouldn't.

[00:55] *** lambd0x left
[00:55] <timotimo> the :v means "pass it through var", which is also what < foo > does

[00:56] *** Actualeyes joined
[00:57] *** cyphase joined
[00:57] *** MasterDuke joined
[00:59] <MasterDuke> .tell tbrowder https://github.com/FROGGS/p6-Slang-Tuxic will let you put a space between a sub and its argument list

[00:59] <yoleaux> 14 Jun 2016 07:34Z <lizmat> MasterDuke: Daniel Green it is  :-)

[00:59] <yoleaux> MasterDuke: I'll pass your message to tbrowder.

[01:00] <yoleaux> 18 Jun 2016 19:04Z <timotimo> MasterDuke: unfortunately the core dump doesn't actually give me any stack traces or anything inside :(

[01:02] <tbrowder> MasterDuke: t'anks a lot!!

[01:02] <yoleaux> 00:59Z <MasterDuke> tbrowder: https://github.com/FROGGS/p6-Slang-Tuxic will let you put a space between a sub and its argument list

[01:03] <MasterDuke> tbrowder: welcome. i only found out about it because it's required by Text::CSV

[01:05] *** rgrinberg left
[01:05] *** cyphase left
[01:05] *** molaf left
[01:09] *** cyphase joined
[01:15] *** inokenty left
[01:17] *** xtreak joined
[01:17] *** molaf joined
[01:18] *** xtreak left
[01:29] *** k0dr left
[01:29] *** inokenty joined
[01:30] *** kid51 left
[01:31] *** bbkr joined
[01:35] *** addison left
[01:35] *** cognominal left
[01:45] *** ilbot3 left
[01:47] <timeless> m:for "1 2 3".comb(/\d/) <-> $k { say $k; }'

[01:47] <timeless> m: for "1 2 3".comb(/\d/) <-> $k { say $k; }'

[01:47] <camelia> rakudo-moar 09cc2f: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3or "1 2 3".comb(/\d/) <-> $k { say $k; }7⏏5'␤»

[01:47] <timeless> m: for "1 2 3".comb(/\d/) <-> $k { say $k; }

[01:47] <camelia> rakudo-moar 09cc2f: OUTPUT«Parameter '$k' expected a writable container, but got Str value␤  in block <unit> at <tmp> line 1␤␤»

[01:47] *** ilbot3 joined
[01:47] *** Ben_Goldberg joined
[01:50] *** abruanese left
[01:56] *** addison joined
[01:58] <timotimo> random find of the day: if you have a set (maybe same with hashes?) using "if $theset{$value}" is considerably slower than "if defined $theset{$value}"

[01:59] <timotimo> i'll now have a very long, close look at my pillow

[01:59] <BrokenRobot> re sandwiches.perl6.org: DNS is set to point *.perl6.org to perl6.org for @reasons (IIRC it was easier than having to bug some entity to setup an extra subdomain each time we needed one)

[02:00] <BrokenRobot> random find of the day: /foo/ is way faster than my @wat = 'foo'; /@wat/;

[02:01] <BrokenRobot> m: my @c = eager ^0xFFFF .grep({$_ ~~ /BLOCK/}); say now - INIT now;

[02:01] <camelia> rakudo-moar 09cc2f: OUTPUT«0.6439605␤»

[02:02] <BrokenRobot> m: my @wat = 'BLOCK'; my @c = eager ^0xFFFF .grep({$_ ~~ /@wat/}); say now - INIT now;

[02:02] <camelia> rakudo-moar 09cc2f: OUTPUT«(timeout)»

[02:02] <BrokenRobot> m: my @wat = 'BLOCK'; my $re = rx/@wat/; my @c = eager ^0xFFFF .grep({$_ ~~ $re}); say now - INIT now;

[02:03] * BrokenRobot suspects there's some sort of uber optimization in place for /'just a str'/

[02:03] <camelia> rakudo-moar 09cc2f: OUTPUT«(timeout)»

[02:03] <timeless> yay, i now can run code and sorta see what the code is thinking. https://www.irccloud.com/pastebin/r9yB0p52/myTrace.pm

[02:03] <timeless> Is there a better way to do what I'm trying to do?

[02:03] <timeless> specifically, i want to see the values of the variables used by each line

[02:04] <timeless> -- i can't just step through the code, it'd take too long

[02:04] *** molaf left
[02:05] *** lizmat left
[02:06] *** sufrostico left
[02:11] <BrokenRobot> Good grief. Some people just baffle me... https://www.reddit.com/r/perl/comments/4pai3q/wendys_perl_6_brochure/d4jqu3f

[02:16] *** molaf joined
[02:19] *** noganex_ joined
[02:20] <parabolize> meta brochures

[02:22] *** noganex left
[02:22] *** Ben_Goldberg is now known as BenGoldberg

[02:23] <timeless> BrokenRobot: fwiw, i'm not sure i disagree

[02:23] <timeless> although, i don't understand what the blurb was

[02:23] <timeless> is it just "wendy's perl 6 brochure"?

[02:28] *** lizmat joined
[02:29] <BrokenRobot> timeless: YAPC is in progress. Wendy has her brochure. People want digital copy to hand it out themselves as well. They got it. The End.

[02:30] <timeless> BrokenRobot: a description could be "this is the brochure wendy is handing out at YAPC"

[02:30] <BrokenRobot> Not everything on the Internet has to makes sense to everyone else. If you don't know who Wendy is, you can just check out the brochure. If you aren't "convinced why you should download it" then just move the fuck on

[02:30] <timeless> that's actually useful

[02:30] <timeless> it saves people from clicking links they don't need to

[02:30] <timeless> and saves them from searching to figure out who wendy is

[02:31] <timeless> if you're going to use someone else's space, you should try to understand what that space's audience is

[02:31] <timeless> if you're posting on yapc.org, then yapc.org/wendy-brochure is probably good enough

[02:32] <timeless> if you're posting in a general reddit.com domain, then it wouldn't shock me for someone to slap you w/ a trout for not giving some context

[02:32] *** ssotka left
[02:32] <BrokenRobot> Why do you need context?

[02:32] <BrokenRobot> It's Perl 6 brochure!

[02:32] <BrokenRobot> 1 sheet!

[02:32] <timeless> about what?

[02:32] <timeless> debugging?

[02:32] <BrokenRobot> Posted by a Perl 6 celebrity!

[02:32] <timeless> internals?

[02:32] <timeless> commandlines?

[02:32] <timeless> migration?

[02:32] <timeless> installation?

[02:32] <BrokenRobot> Open it and read it!

[02:32] <timeless> keywords?

[02:32] <BrokenRobot> It takes half a fuckign second!

[02:33] <BrokenRobot> s/Perl 6/Perl/;

[02:34] *** vendethiel- joined
[02:35] <lizmat> it's intended to give out to passers by at the Perl booth on Perl events and non-Perl events like FOSDEM

[02:35] <lizmat> it's intended as PR for Perl 6

[02:35] <lizmat> it sucks a lot less than most other marketing for Perl

[02:36] <lizmat> timeless ^^^

[02:36] <lizmat> and now I get back to socializing&

[02:36] *** lizmat left
[02:36] <timeless> lizmat: see, that's a great thing to include in a description

[02:39] *** uniejo joined
[02:39] *** TEttinger left
[02:41] *** TEttinger joined
[02:48] *** TakinOver joined
[02:52] *** kid51 joined
[02:57] *** mtj__ left
[02:58] *** mtj_ joined
[03:01] *** araujo joined
[03:10] *** grondilu left
[03:12] *** grondilu joined
[03:14] *** kid51 left
[03:15] *** addison left
[03:23] <Xliff> Of course.... you have to download LibreOffice (or a 3rd party viewer) to read it.

[03:23] <yoleaux> 22 Jun 2016 05:50Z <FROGGS_> Xliff: we care about that after the merge, aye

[03:24] *** lizmat joined
[03:25] *** khw left
[03:26] <timeless> Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in method Str at /home/timeless/hg/perl6/rakudobrew/moar-nom/install/share/perl6/runtime/CORE.setting.moarvm line 1

[03:26] <timeless> could moar blame the caller instead of the line it's currently blaming?

[03:44] *** bbkr left
[03:47] *** skids left
[03:48] <dalek> specs: 340c686 | util++ | S28-special-names.pod:

[03:48] <dalek> specs: Change @*INC to @?INC , which was missed in commit dd31858

[03:48] <dalek> specs: review: https://github.com/perl6/specs/commit/340c686f87

[04:00] *** grondilu left
[04:12] *** huggable joined
[04:14] *** ssotka joined
[04:25] *** mohae_ joined
[04:27] *** mohae left
[04:28] *** BenGoldberg left
[04:37] *** molaf left
[04:56] *** dupek joined
[04:57] *** dupek left
[04:57] *** YoungFrog left
[04:59] *** Cabanossi left
[04:59] *** cyphase left
[05:01] *** russian_mafia joined
[05:01] <russian_mafia> hi

[05:01] *** Cabanossi joined
[05:06] *** cyphase joined
[05:13] *** bjz joined
[05:14] *** smls joined
[05:15] *** bjz_ joined
[05:15] *** sortiz joined
[05:18] *** bjz left
[05:28] <sammers> anyone in here working on Bailador?

[05:29] <sammers> Trying to figure out how to serve up a directory without specifying direct routes.

[05:39] *** bjz_ left
[05:48] *** wamba joined
[05:50] *** RabidGravy joined
[05:51] <Xliff> sammers: Why would you want to use Bailador without routes?

[05:53] <Xliff> Or are trying to have a "dispatch route"... a way to code routes to handle multiple URIs?

[06:04] <moritz> good morning

[06:04] <moritz> everybody, should our canonical website be perl6.org or www.perl6.org?

[06:07] *** lue joined
[06:07] *** sno left
[06:08] *** ShimmerFairy left
[06:08] *** lue is now known as ShimmerFairy

[06:09] <lizmat> perl6.org is what we have on the buttons we give to everybody

[06:09] *** cognominal joined
[06:10] <lizmat> sleep&

[06:10] *** lizmat left
[06:10] <woolfy> I am Wendy.  I have been doing simple marketing shit for Perl for 5+ years.  I made a brochure about Perl 6.  Some people wanted a copy.  Some people wanted to commit changed.  I make my first Github project around that file.  There.

[06:11] <woolfy> It's just marketing blurb about Perl 6.  It's a brochure.  Marketing.  Not about internals, commandlines, migration.  Brochure.  Why is that difficult.

[06:11] *** lizmat joined
[06:13] *** lizmat left
[06:13] <parabolize> I like less characters in 'perl6.org' but I'm guessing there is more important considerations

[06:13] <woolfy> It's not going to be a big project.  But if I get a lot of stuff like nasty people on Reddit bothering me via email because of this ( https://www.reddit.com/r/perl/comments/4pai3q/wendys_perl_6_brochure/d4jqu3f ) I will delete it and ignore requests.

[06:14] <sortiz> moritz, I prefer the short form. But I don't see any real difference.

[06:14] *** lizmat joined
[06:15] <sammers> Xliff, actually, just looking for one of the p6 modules to serve up a static directory with all of its subdirectories 

[06:15] *** CIAvash joined
[06:16] *** lizmat left
[06:21] *** redhands98100 joined
[06:21] *** _mg_ joined
[06:23] <redhands98100> p6: say 5.WHAT

[06:23] <camelia> rakudo-moar 78d2ce: OUTPUT«(Int)␤»

[06:23] <redhands98100> p6: 5.WHAT

[06:23] <camelia> rakudo-moar 78d2ce: ( no output )

[06:23] <russian_mafia> hey can I pass to function argument anonymous function?

[06:25] <smls> russian_mafia: You mean like this?

[06:25] <smls> m: sub twice (&f) { f; f; };  twice { say "Hi" }

[06:25] <camelia> rakudo-moar 78d2ce: OUTPUT«Hi␤Hi␤»

[06:27] <russian_mafia> m: sub twice (&f) { f }; twice( -> () { say "fuck" });

[06:27] <camelia> rakudo-moar 78d2ce: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at <tmp> line 1␤␤»

[06:27] <russian_mafia> I mean this because my callback is in second place

[06:28] <smls> The anonymous function  -> () { ... }  expects a single positional argument.

[06:28] <russian_mafia> really?

[06:28] <russian_mafia> where?

[06:28] <smls> Use   -> { ... }   or simply   { ... }   if you want no arguments.

[06:29] <smls> A   ()  inside a signature, takes a Positional.

[06:29] <russian_mafia> lol

[06:29] <russian_mafia> it is $_

[06:29] <russian_mafia> ?

[06:29] *** cyphase left
[06:31] <smls> Right,  {...}  takes zero or one arguments.   -> {...}  takes exactly zewro.

[06:31] *** _28_ria left
[06:31] <russian_mafia> smls, thanks bro

[06:32] <smls> m: sub f ($a, ($b, $c)) { say ($a, $b, $c) };  my @a = 4, 6;  f 2, @a

[06:32] <camelia> rakudo-moar 78d2ce: OUTPUT«(2 4 6)␤»

[06:32] <smls> ^^ This is why () in a signature takes a Positional argument, by the way. It's used for destructuring array arguments.

[06:33] <russian_mafia> smls, ye I see

[06:33] <sammers> Xliff, something like this (p5): '$s=HTTP::Server::Brick->new(port=>8000); $s->mount("/"=>{path=>"."}); $s->start'

[06:34] *** cyphase joined
[06:35] <redhands98100> Thanks smls. Silly question, in your function example, if I wanted to pass f again to another function without calling f, how would I do that?

[06:35] <smls> Write  &f

[06:35] <redhands98100> Ah, thanks

[06:36] *** girafe joined
[06:36] *** _28_ria joined
[06:38] *** firstdayonthejob joined
[06:42] *** ssotka left
[06:45] *** nebuchadnezzar joined
[06:45] *** cognominal left
[06:47] *** buharin left
[06:53] <stmuk> *sigh* reddit and similar really aren't good for programming langs. I have wondered whether perl6 needs something like undeadly.org (for the OpenBSD community)

[06:54] <stmuk> moderated, low volume classic slashdot type forum (maybe with a more modern theme)

[06:55] <moritz> what I'd really like is a blog/rss aggregator where a few admins can also inject some custom posts

[06:55] <smls> stmuk: Can't a subreddit be moderated and have a modern theme?

[06:56] <moritz> like pl6anet.org, but with an option to add URLs to one-off posts

[06:58] <stmuk> moritz: hmmm that's not a bad idea ... some commenting and upvoting of posts as well maybe

[06:59] <stmuk> smls: yes but I'm really not that keen on reddit and, well, we are programmers!

[07:03] <moritz> stmuk: I'm not sure comments add that much value, compared to the hassle of having to deal with spam and so on

[07:06] <ShimmerFairy> we really need some kind of forum software in Perl 6, codenamed October naturally :) .

[07:06] <stmuk> I was also wondering whether technical discussions might outgrow IRC 

[07:07] *** buharin joined
[07:07] <redhands98100> stumbled across a post on Perlmonks, author was unhappy about perl6 related nodes. Perhaps something like perl6monks.com

[07:09] <stmuk> or use.perl6.org :)

[07:09] <ShimmerFairy> stmuk: "might"?! :P

[07:09] * ShimmerFairy wonders when someone will pipe up and mention the mailing lists......oh.

[07:11] <stmuk> defunct mostly

[07:12] *** domidumont joined
[07:12] *** sno joined
[07:14] *** russian_mafia left
[07:14] <sammers> Xliff, I was able to get it working, might be overkill but it does what I need https://gitlab.com/snippets/21446

[07:14] <moritz> redhands98100: if I'd still be motivated to use perlmonks, I wouldn't leave just because some guy is unhappy with it

[07:21] <redhands98100> moritz: i guess that makes sense, so long as it doesn't make all or most of them unhappy.

[07:22] <redhands98100> p6: 42.WHAT

[07:22] <camelia> rakudo-moar 78d2ce: ( no output )

[07:23] <moritz> redhands98100: the last time I've particpated in such a discussion, it seemed that the majority (and the moderators) were fine with that, with some conditional on Perl 6 posts being recognizable from the title. Which I'm totally fine with.

[07:23] *** buharin left
[07:25] <redhands98100> moritz: ah I see, that makes sense. 

[07:26] <stmuk> I'd prefer a fresher forum reboot than perlmonks myself 

[07:27] * moritz too

[07:27] <stmuk> something that integrated more with existing p6 discussion on IRC too

[07:29] <smls> The perlmonk forum software does feel pretty outdated and cumbersome, what with being forced to manually write out <p> and <br> tags, and things like that.

[07:31] <moritz> also the markup is terrible, and no proper UTF-8 support

[07:31] <redhands98100> Perlmonks has aged a bit, but I think it's aged well, it's surprisingly functional / clean, it has an almost Craigslist like appeal

[07:32] <moritz> non-latin1 characters are converted to &foo; entities, which don't work in <code>...</code> blocks

[07:32] <moritz> which can be a real PITA

[07:32] <smls> Also, it hard wraps code to 60 or 70 chasracters. Super annoying... :P

[07:32] <stmuk> its just slashcode isn't it? or an older fork. https://soylentnews.org/ uses an actively maintained forkk

[07:33] <moritz> smls: it's configurable per user

[07:33] <moritz> I wonder if we should simply use a Discourse forum

[07:33] <moritz> it's not perfect, but it's quite functional and has a modern feel to it

[07:34] <smls> moritz: Right, but it's only configurable on the receiving end. I'd like my posts t look readable for other, including not-logged-in readers.

[07:34] <moritz> smls: understandable :-)

[07:34] *** darutoko joined
[07:35] <moritz> perlmonks also has some non-default, modern-ish themes, but the default is still old-fashioned

[07:36] <stmuk> does perlmonks support utf-8?

[07:36] <stmuk> Discourse looks pretty good

[07:39] <moritz> stmuk: as I mentioned above, UTF-8 support in perlmonks is pretty hacky (and doesn't work at all in code blocks)

[07:40] <stmuk> ah missed that

[07:40] <smls> A nice thing about perlmonks, though, is having a terse syntax for links to perldoc and cpan etc.

[07:40] *** buharin joined
[07:41] *** darutoko- joined
[07:41] *** darutoko- left
[07:41] <smls> Could stuff like that be done as a custom extension in Discourse?

[07:42] <moritz> dunno

[07:42] <stmuk> I did quite like the "gitit" wiki http://gitit.net/ 

[07:43] <stmuk> maybe something like that with threading 

[07:43] <moritz> we had that running on feather (the p6c.org precursor) for a while

[07:43] <moritz> but in the end, nobody used it much

[07:44] *** darutoko left
[07:44] <redhands98100> Hmm, silly question, it looks like the .WHAT metamethod doesn't return anything, but calling 'say' on it does print something. Wonder what is happening there.

[07:44] <moritz> redhands98100: it returns a type object

[07:44] <moritz> redhands98100: and .say calls its .gist method, which returns "(typename)"

[07:44] <stmuk> yeah the problem with all this stuff is more adoption than technical .. we need something which grows out of how we discuss p6 already not something new which need adoption

[07:45] <stmuk> not sure what :)

[07:45] <moritz> well, we discuss Perl 6 on IRC and on reddit

[07:45] <moritz> and on the mailing lists, to some extend

[07:46] <stmuk> its mostly IRC

[07:46] <moritz> so a forum software that offered a semiautomatic way to draw a conversation from one of these sources into the forum might be a win

[07:46] <BooK> 3

[07:46] <moritz> BooK: nah, <3! :-)

[07:46] <stmuk> moritz: yes

[07:46] <dalek> DBIish: e156cc0 | (Salvador Ortiz)++ | README.pod:

[07:46] <dalek> DBIish: Add documentation for DBIish connect method.

[07:46] <dalek> DBIish: 

[07:46] <dalek> DBIish: IMO this cover the issues noted by jkeenan++

[07:46] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/e156cc0f8e

[07:46] <BooK> nah ♥

[07:47] <redhands98100> moritz: ah thanks

[07:48] <moritz> m: say 4.perl; say 4.WHAT.perl; say 4.WHAT.gist; say 4.^name; say 4.^name.perl

[07:48] <camelia> rakudo-moar 78d2ce: OUTPUT«4␤Int␤(Int)␤Int␤"Int"␤»

[07:50] <stmuk> maybe just a bot which flattens some IRC discussion into an RSS post? not sure how to "tag" for saving on IRC

[07:50] <stmuk> maybe "newbot: save 08:44:50-08:45:00"

[07:51] <moritz> stmuk: the IRC logs have an "enable summary mode" button that adds check boxes to lines

[07:52] <moritz> stmuk: maybe that mechanism could be (ab)used for that

[07:52] <redhands98100> moritz: ah thank you. I suppose I was confused by expecting 5.WHAT to have an rvalue which would then be displayed by the reply.

[07:52] <moritz> and then adding /summary to the URL exports only the summarized part, for example http://irclog.perlgeek.de/perl6/2016-06-23/summary

[07:52] <ShimmerFairy> stmuk: hmm, organically-developed greater discussion method... ooh, I know! A "forum" powered by github gists! :P

[07:53] <stmuk> that summary mode looks useful

[07:53] <moritz> redhands98100: 5.WHAT does return a value, that value is just the type itself

[07:53] *** buharin left
[07:54] <moritz> redhands98100: and the confusing part is that say(Int) prints "(Int)", but using it as a string results in an empty string

[07:54] <moritz> m: say(Int)

[07:54] <camelia> rakudo-moar 78d2ce: OUTPUT«(Int)␤»

[07:54] <moritz> m: say(~Int)

[07:54] <camelia> rakudo-moar 78d2ce: OUTPUT«Use of uninitialized value of type Int in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at <tmp> line 1␤␤»

[07:54] <moritz> (... and a warning)

[07:54] <sortiz> redhands98100, In fact, on a recent rakudo, the REPL prints the value.

[07:55] *** uniejo left
[07:55] *** kurahaupo joined
[07:56] <redhands98100> Ah I see, thanks for the clarification. 

[07:58] *** salv0 joined
[08:03] * Woodi would like a blog generally IT-centric hosted by blogs.perl.org (but other domain)...

[08:03] *** wamba left
[08:04] <llfourn> m: BEGIN note "foo".subst("foo","bar")

[08:04] <camelia> rakudo-moar 78d2ce: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  Type check failed in binding cds; expected Any but got Mu (Mu)␤    in code  at <tmp> line 1␤␤»

[08:04] <llfourn> :\

[08:04] <Xliff> Hmmm....blog software.

[08:04] <Xliff> It's been a while since Slashcode.

[08:05] <Xliff> o7 #perl6. Sweet dreams.

[08:06] <smls> llfourn: See RT 122789

[08:06] <llfourn> RT #122789

[08:06] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=122789

[08:06] <psch> m: BEGIN { my $/ := Any; note "foo".subst("foo","bar") }

[08:06] <camelia> rakudo-moar 78d2ce: OUTPUT«bar␤»

[08:06] <llfourn> smls: cheers

[08:07] <psch> it's really just that we set $/ too late

[08:07] <llfourn> ah

[08:07] <psch> might be rather easy to patch, or might not :)

[08:08] <smls> psch: Thanks, I added that info to the RT.

[08:08] <psch> the exception isn't particularly weird either, in my opinion, but it depends on knowing that we use cds as "caller_dollar_slash", which explains why the solution above works

[08:09] <psch> where 'we use cds' means 'the abbreviation cds expands to' i guess

[08:09] *** uniejo joined
[08:10] *** buharin joined
[08:11] *** huggable left
[08:12] *** huggable joined
[08:20] *** buharin left
[08:21] <redhands98100> p6: qx/whoami/

[08:21] <camelia> rakudo-moar 78d2ce: OUTPUT«qx, qqx is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub QX at src/RESTRICTED.setting line 11␤  in block <unit> at <tmp> line 1␤␤»

[08:21] *** dakkar joined
[08:22] *** bjz joined
[08:25] *** jjido joined
[08:31] *** redhands98100 left
[08:32] *** redhands98100 joined
[08:32] <redhands98100> Hmm, wonder how the system call restriction is implemented here. Trying to build a tryperl6.org to increase p6 exposure.

[08:33] <geekosaur> RESTRICTED.setting is just an alternative setting ("core library", if you will) that has some functions stubbed out

[08:35] *** buharin joined
[08:35] <geekosaur> also, as it is currently set up, it's not as restricted as one could wish

[08:35] <psch> redhands98100: fwiw, perl6 is on glot.io

[08:38] *** jjido left
[08:38] *** girafe left
[08:39] <redhands98100> psch: oh neat

[08:39] <redhands98100> geekosaur: ah thank you

[08:43] *** brrt joined
[08:48] *** ocbtec joined
[08:49] *** grondilu joined
[08:57] *** donaldh joined
[09:13] *** kid51 joined
[09:18] *** wamba joined
[09:19] *** cyphase left
[09:19] <dalek> doc: af0228e | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[09:19] <dalek> doc: add a few operators to the index

[09:19] <dalek> doc: review: https://github.com/perl6/doc/commit/af0228ebf9

[09:21] *** jjido joined
[09:24] *** cyphase joined
[09:36] *** telex left
[09:37] *** AlexDaniel joined
[09:38] *** telex joined
[09:38] <AlexDaniel> redhands98100: do not use restricted setting if you want it to be secure

[09:49] <Ulti> redhands98100 re perlmonks I'm not convinced language communities should bother creating their own support sites anymore, just use Stackoverflow... there are plenty of QnA on there under 'perl6'

[09:50] *** _mg_ left
[09:51] <brrt> well, perlmonks is a cultural legacy

[09:51] <brrt> stack overflow is very effective

[09:51] <brrt> but not part of anyones culture like perlmonks is for perl

[09:51] <smls> Ulti: stackoverflow is kinda impersonal though. It may be an efficient support site for people with acute programming problems, but not so much a community or a place to foster experiemenation and stuff.

[09:51] <Ulti> yeah but the perl5 culture is one of isolation and xenophobia now

[09:51] <Ulti> like the UK

[09:52] <brrt> otoh, you can't force culture to develop

[09:52] <Ulti> smls sure but I think something like IRC/Slack is more that community feel

[09:52] <Ulti> people dont like their personality existing on the internet forever in some back water

[09:52] <brrt> maybe not anymore

[09:53] <Ulti> sure because back when perlmonks was invented no one had really experienced that longevity and your personality growing

[09:53] <Ulti> because the interwebs was new

[09:53] *** brrt left
[09:54] <Ulti> now you have the prospect of something angry and dumb you said when you were 15 being assigned to you when you are 35 looking for a job

[09:56] <Ulti> and there is a lot of angry and dumb on perlmonks along with eloquent and egalitarian

[09:59] *** uniejo left
[10:00] <gregf_> *uses google a lot* ;)

[10:00] <gfldex> there should be a prize for being polite on the intarwebs

[10:01] <jnthn> gfldex: Only a moron would suggest that! 

[10:02] <jnthn> (Dear person who wants to hire me in 15 years: I was joking :P)

[10:03] <psch> being nice in general is underincentivized :/

[10:03] <psch> s/in general/generally/

[10:04] <psch> clearly the answer is machine overlords \o/

[10:04] <gregf_> being impolite helps noone.. *unless someones trolling*

[10:05] <gfldex> well, I found that when I'm polite some ppl start to believe I like them. That can lead to problems. Being impolite can help in those situations.

[10:06] <gfldex> Politeness requires intelligence on both ends.

[10:10] *** jjido left
[10:10] *** rindolf joined
[10:10] <gfldex> the following commit seams not to have made it onto the live docs, the build log is fine tho. https://github.com/perl6/doc/commit/e15bc8f6d2fe80eb43d6eb2ef009119acc39d859

[10:11] <gfldex> is there a problem with sync on docs.perl6.org ?

[10:12] <gfldex> or do I got a caching problem on my end of the web?

[10:12] <smls> m: class A does Iterable { has @.a handles <iterator> }

[10:12] <camelia> rakudo-moar 78d2ce: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Method 'iterator' must be implemented by A because it is required by a role␤at <tmp>:1␤»

[10:12] <smls> ^^ Shouldn't this work?

[10:13] <psch> smls: handles is... handled after 'does'

[10:13] <psch> although i think that's only part of the explanation

[10:13] *** jjido joined
[10:15] *** user9 joined
[10:17] <smls> So what's the right way to make an Iterable that delegates to @.a?

[10:17] <gfldex> i think it should not work. A role can inject attributes into your class. handles wont do that. Further extending a type with something smartmatchable is not the same thing the delegation.

[10:18] <psch> m: class A does Iterable { has @.a; method iterator { @.a.iterator } }; .say for A.new(:a[1,2,3]) 

[10:18] <camelia> rakudo-moar 78d2ce: OUTPUT«1␤2␤3␤»

[10:18] <psch> i'm not sure it shouldn't work, but ISTR that there was some discussion a few weeks back that explained why it doesn't work

[10:20] <gfldex> m: class A does Iterable { has @.a; method iterator { @.a.iterator } }; .say for A.new(:a[1,2,3]); my multi sub infix:<~~>(A:D \LHS, Iterable:U \LHR) { True }; say so A.new ~~ Iterable;

[10:20] <camelia> rakudo-moar 78d2ce: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Cannot override infix operator '~~', as it is a special form handled directly by the compiler␤(consider implementing an ACCEPTS method)␤at <tmp>:1␤------> 3.new(:a[1,2,3]); my multi sub infix:<~~>7…»

[10:21] <psch> m: class A does Iterable { has @.a; method iterator { @.a.iterator } }; .say for A.new(:a[1,2,3]); say so A.new.isa(Iterable)

[10:21] <camelia> rakudo-moar 78d2ce: OUTPUT«1␤2␤3␤False␤»

[10:21] <psch> m: class A does Iterable { has @.a; method iterator { @.a.iterator } }; .say for A.new(:a[1,2,3]); say so A.new.does(Iterable)

[10:21] <camelia> rakudo-moar 78d2ce: OUTPUT«1␤2␤3␤True␤»

[10:22] <psch> m: class A does Iterable { has @.a; method iterator { @.a.iterator } }; .say for A.new(:a[1,2,3]); say so A.new ~~ Iterable

[10:22] <camelia> rakudo-moar 78d2ce: OUTPUT«1␤2␤3␤True␤»

[10:22] <gfldex> m: class A does Iterable { has @.a; method iterator { @.a.iterator }; multi method ACCEPTS(A:D: Iterable:U) { True } }; .say for A.new(:a[1,2,3]); say so A.new ~~ Iterable;

[10:22] <camelia> rakudo-moar 78d2ce: OUTPUT«1␤2␤3␤True␤»

[10:23] <psch> gfldex: why do you need the ACCEPTS candidate?

[10:23] *** kid51 left
[10:23] <gfldex> i don't really need it, just wanted to see what happens.

[10:24] <psch> alright

[10:24] <gfldex> m: class A does Iterable { has @.a; method iterator { @.a.iterator }; multi method ACCEPTS(A:D: Iterable:U) { True } }; .say for A.new(:a[1,2,3]); say so A.new ~~ Iterable; sub f(Iterable:D \it){ dd it }; f(A.new)

[10:24] <camelia> rakudo-moar 78d2ce: OUTPUT«1␤2␤3␤True␤A.new(a => [])␤»

[10:24] <gfldex> m: class A does Iterable { has @.a; method iterator { @.a.iterator }; multi method ACCEPTS(A:D: Iterable:U) { False } }; .say for A.new(:a[1,2,3]); say so A.new ~~ Iterable; sub f(Iterable:D \it){ dd it }; f(A.new)

[10:24] <camelia> rakudo-moar 78d2ce: OUTPUT«1␤2␤3␤True␤A.new(a => [])␤»

[10:25] <gfldex> oi!

[10:25] <gfldex> m: class A { has @.a; method iterator { @.a.iterator }; multi method ACCEPTS(A:D: Iterable:U) { False } }; .say for A.new(:a[1,2,3]); say so A.new ~~ Iterable; sub f(Iterable:D \it){ dd it }; f(A.new)

[10:25] <camelia> rakudo-moar 78d2ce: OUTPUT«1␤2␤3␤False␤Type check failed in binding it; expected Iterable but got A (A.new(a => []))␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[10:25] <gfldex> m: class A { has @.a; method iterator { @.a.iterator }; multi method ACCEPTS(A:D: Iterable:U) { True } }; .say for A.new(:a[1,2,3]); say so A.new ~~ Iterable; sub f(Iterable:D \it){ dd it }; f(A.new)

[10:25] <camelia> rakudo-moar 78d2ce: OUTPUT«1␤2␤3␤False␤Type check failed in binding it; expected Iterable but got A (A.new(a => []))␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[10:26] <gfldex> looks like type checks are special

[10:27] <psch> ..what?

[10:27] <psch> gfldex: ACCEPTS is always for the RHS argument

[10:27] <psch> m: class A is Int { method ACCEPTS { say "fiddlesticks" }; say A.new ~~ Int

[10:27] <camelia> rakudo-moar 78d2ce: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3{ say "fiddlesticks" }; say A.new ~~ Int7⏏5<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        statement…»

[10:27] <psch> m: class A is Int { method ACCEPTS { say "fiddlesticks" } }; say A.new ~~ Int

[10:27] <camelia> rakudo-moar 78d2ce: OUTPUT«True␤»

[10:27] <psch> m: class A is Int { method ACCEPTS { say "fiddlesticks" } }; say Int ~~ A.new

[10:27] <camelia> rakudo-moar 78d2ce: OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in method ACCEPTS at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[10:27] <psch> m: class A is Int { method ACCEPTS($) { say "fiddlesticks" } }; say Int ~~ A.new

[10:27] <camelia> rakudo-moar 78d2ce: OUTPUT«fiddlesticks␤True␤»

[10:29] *** jjido left
[10:29] <smls> Is delegation not the recommended way to make custom classes that behave similar to the built-in List and friends?

[10:29] <smls> I suppose I could inherit from List, instead.

[10:29] *** vcdgdgfdgbdgbgdc joined
[10:29] *** vcdgdgfdgbdgbgdc left
[10:29] *** _mg_ joined
[10:30] *** jjido joined
[10:31] *** JimmyZ left
[10:32] <smls> Hm, except that List's implementation of .new seems to skip BUILD:

[10:33] <smls> m: class A is List { submethod BUILD(:$x) { say $x } }; A.new(x => 42)

[10:33] <camelia> rakudo-moar 78d2ce: ( no output )

[10:33] <smls> So I guess I'd have to implement .new as well, and use nextsame?

[10:35] *** avalenn joined
[10:36] <gfldex> smls: see 2nd example in https://doc.perl6.org/language/variables

[10:41] *** RabidGravy left
[10:43] *** jjido left
[10:44] *** jjido joined
[10:44] *** CIAvash left
[10:44] *** donaldh left
[10:45] *** AlexDaniel left
[10:47] *** donaldh joined
[10:49] *** sergot left
[10:49] *** dalek joined
[10:49] *** ChanServ sets mode: +v dalek

[10:50] *** psch left
[10:50] <gregf_> smls: should be just extending?

[10:50] *** kaare__ joined
[10:50] *** psch joined
[10:51] <timotimo> ^- hack was just force-rebooted after going up to 200 load again

[10:51] *** brrt joined
[10:52] *** Emeric joined
[10:52] *** Zoffix joined
[10:53] <Zoffix> sammers, there's Bailador::Plugin::Static plugin https://github.com/zoffixznet/perl6-Bailador-Plugin-Static

[10:54] <smls> gregf_: I'm trying to write a class FooGroup that acts like a list of Foo objects, but also has a public $.name attribute and .subgroups method.

[10:54] *** Emeric left
[10:55] *** RabidGravy joined
[10:56] <smls> So I need to take additional (optional) parameters in .new/BUILD

[10:58] <Zoffix> woolfy, just ignore those idiots. The Internet is chockful of people who can't create anything piling shit on those who do.

[10:59] <gregf_> smls: *wonders if there is a super method*

[10:59] <gregf_> *googles*

[11:00] <gregf_> oh, you should be able to override new. i guess BUILD gets called after new?

[11:01] <gregf_> class MyList is List { has Str $.name; sub BUILD(%args){ super(%args); };  method subgroups(Block $bl){ self.map($bl.($_)); }}; my MyList $l = MyList.new(name => "hello"); $l.subgroups(-> $x { $x % 2 == 0 }) # doesnt compile

[11:01] <smls> I think the default .new calls .bless, and bless calls all BUILD candidates in the inheritance hierarchy.

[11:02] <timotimo> yeah, .bless calls BUILDALL, which does pretty much that

[11:02] <smls> But either the .new or .bless rovided by class List, doesn;t play along... :P

[11:02] <smls> *provided

[11:02] <timotimo> personally, i'd just mix in a role after creating the list :P

[11:03] <timotimo> no BUILD required

[11:04] <smls> How would I get the $.name attribute etc. initialized then?

[11:04] *** masak joined
[11:06] <timotimo> just set them

[11:06] *** brrt left
[11:09] <gfldex> m: role R { method foo() { say 'mixed' } }; class SelfMixer { method new() { my \s = self.bless; s does R; s } }; SelfMixer.new.foo;

[11:09] <camelia> rakudo-moar 78d2ce: OUTPUT«mixed␤»

[11:09] <gfldex> m: role R { method foo() { say 'mixed' } }; class SelfMixer { method new() { my \s = self.bless; s does R; s } }; say so SelfMixer.new ~~ R;

[11:09] <camelia> rakudo-moar 78d2ce: OUTPUT«True␤»

[11:10] *** firstdayonthejob left
[11:10] <smls> Interesting approach... :)

[11:11] <smls> m: .say for List.^find_method("BUILD");  # Weird error message...

[11:11] <camelia> rakudo-moar 78d2ce: OUTPUT«Method 'map' not found for invocant of class 'Mu'␤  in block <unit> at <tmp> line 1␤␤»

[11:11] <timotimo> m: .say for Mu

[11:11] <camelia> rakudo-moar 78d2ce: OUTPUT«Method 'map' not found for invocant of class 'Mu'␤  in block <unit> at <tmp> line 1␤␤»

[11:11] <gfldex> if i would be a mad scientist I would choose Perl 6

[11:11] <smls> ah, no, it makes sense

[11:11] <smls> timotimo: right

[11:12] <timotimo> .^find_method would also only return one result

[11:12] <timotimo> (IIRC)

[11:20] *** araujo_ joined
[11:20] *** jjido left
[11:22] *** araujo_ left
[11:22] *** araujo_ joined
[11:23] *** araujo left
[11:29] *** donaldh left
[11:34] <sammers> Hi Zoffix, thanks, I was able to get it working without the plugin https://gitlab.com/snippets/21446, but I will take a look.

[11:40] <timotimo> isn't it just great how afl-fuzz stumbles over a few test cases that sometimes crash during the dry run and just out-right aborts

[11:40] * timotimo rms and re-tries

[11:40] *** ZoffixMobile joined
[11:42] <ZoffixMobile> sammers, IIRC the plugin does pretty much the same thing

[11:42] <ZoffixMobile> sammers, I believe your version has a security hole: can read any file on the system

[11:43] <sammers> yeah, there is absolutely no security considerations in my little script.

[11:43] <sammers> plugin looks good

[11:43] <timotimo> well, at least prevent ".." in the path ...

[11:44] <ZoffixMobile> I think same can be done with core ::Static route that was introduced after I made the plugin. I forget the details tho

[11:44] *** uniejo joined
[11:46] *** rindolf left
[11:46] *** araujo__ joined
[11:49] <timotimo> wow, there's a really funky audio glitch going on in the Q&A here

[11:50] <timotimo> alternatively: TimToady confirmed to be a robot from outer space

[11:50] <moritz> sounds legit

[11:50] *** araujo_ left
[11:51] *** cognominal joined
[11:55] <sammers> ZoffixMobile, what path do you pass to access local files? I tried /../path/to/local/file, but it just dumps and errs.

[11:56] *** ZoffixMobile2 joined
[11:56] *** ZoffixMobile left
[11:58] *** lizmat joined
[11:58] *** ZoffixMobile2 left
[12:00] *** araujo__ left
[12:07] *** rgrinberg joined
[12:08] *** lizmat left
[12:09] *** lizmat joined
[12:10] *** user9 left
[12:11] *** huggable left
[12:12] *** huggable joined
[12:12] *** ZoffixW joined
[12:13] <ZoffixW> sammers, I just read it on my phone and not actually ran it. Lemme try

[12:13] *** bjz_ joined
[12:13] <sammers> cool, thanks

[12:13] *** bjz left
[12:14] *** woolfy left
[12:15] <ZoffixW> sammers, ah, I see. The browser seems to process the /../ before making the request. The hack works if you use telnet tho: https://gist.github.com/zoffixznet/61cf2b250ac0c0f0c25414dd17986a8a

[12:18] *** woolfy joined
[12:19] *** uniejo left
[12:19] <ZoffixW> The ::Static plugin may also be broken. Looking at it now, I think this condition needs to be !~~ not ~~ :S https://github.com/zoffixznet/perl6-Bailador-Plugin-Static/blob/master/lib/Bailador/Plugin/Static.pm6#L9

[12:21] <ZoffixW> m: my $asset = '/foo/../../bar.txt'; say $*SPEC.catdir: 'assets', $*SPEC.splitdir($asset).grep({ $_ ~~ $*SPEC.curupdir });

[12:21] <camelia> rakudo-moar 78d2ce: OUTPUT«assets/foo/bar.txt␤»

[12:22] <ZoffixW> m: $*SPEC.curupdir.say

[12:22] <camelia> rakudo-moar 78d2ce: OUTPUT«none(., ..)␤»

[12:22] <ZoffixW> Ahh, it's a none junction. Nevermind

[12:23] *** mr-foobar left
[12:23] <ZoffixW> .oO( counter-intuitive to ~~ with "curupdir" to mean "not curupdir" :/ )

[12:25] *** woolfy left
[12:25] <sammers> ok, thanks, I am trying the telnet commands, but it isn't returning anything... still messing with it

[12:27] <timotimo> rm'ing so many of the afl queue, restarting over and over again ... this is not fun. i really feel resumability in afl should be improved, or maybe there's just a flag that'll do my work for me and not require full re-starts

[12:28] *** Sgeo_ left
[12:28] <sammers> yeah, ok, it works

[12:28] <sammers> hmm

[12:30] <timotimo> grrr, another one that crashed

[12:30] *** ZoffixW left
[12:31] <timotimo> made it to something above 11k, so it should soon-ish make it all the way through ... here's hoping!

[12:33] *** kanishka joined
[12:34] *** donaldh joined
[12:36] <moritz> what is afl?

[12:37] <timotimo> american fuzzy lop

[12:37] <timotimo> a very fuzzy breed of rabbits

[12:37] <timotimo> also a fuzzing tool

[12:38] *** sergot joined
[12:41] *** bjz_ left
[12:42] *** lizmat left
[12:42] *** bjz joined
[12:43] <sammers> ok, updated the script to drop paths with '..', thanks

[12:47] *** user9 joined
[12:50] *** [Coke] joined
[12:51] <[Coke]> I wonder if there is an IRC client that would help me not hate IRC.

[12:51] <arnsholt> I'm very happy with irssi

[12:51] <arnsholt> But then again, I'm one of *those* people =)

[12:53] <Woodi> [Coke]: what are your requirments ? :)

[12:53] <[Coke]> (and has no indication that there's a discussion behind it)

[12:53] *** TEttinger left
[12:53] <[Coke]> ... did I miss a send? wtf.

[12:53] <[Coke]> (missed line) so, I use irssi; leave it running in a screen on a machine that is occasionally rebooted. restarting, I end up losing half my conversations. I have a /win, for example, that is very likely perl6-dev, but it's not rejoined properly somehow. so it just says 6:freenode (change with ^X)

[12:54] <timotimo> ;(

[12:54] <timotimo> i'm quite pleased with weechat

[12:55] <timotimo> burgh! test case 011196 exploded, too

[12:55] <moritz> [Coke]: the same happens to my irssi too, but server reboots happen seldom enough that I don't worry about it

[12:55] <[Coke]> (I mean, there's also the architectural issue where I can't get guaranteed delivery of messages. wonder if there's a web app I can use that would provide more reliable delivery so the restarts on hack would be irrelevant.

[12:55] <psch> autojoining channels works perfectly fine here

[12:55] <[Coke]> moritz: we have different definitions of seldom, I guess.

[12:56] <[Coke]> psch: And where is that?

[12:56] <psch> [Coke]: on hack with irssi

[12:56] <[Coke]> moritz: assuming you're also running on hack.

[12:56] <[Coke]> psch: Can I see your config file?

[12:56] *** lizmat joined
[12:57] <psch> [Coke]: in a bit, yeah, gonna clean it up a bit

[12:57] <moritz> [Coke]: I run it on my own VPS

[12:57] *** Actualeyes left
[12:57] <moritz> [Coke]: I've also at one point set up irc.p6c.org for a VM only for IRC, but the usage was zero.

[12:57] <moritz> so I scraped it again

[12:57] <timotimo> we should just reboot hack daily :P

[12:58] <timotimo> that'll fix it real soon

[12:58] <psch> [Coke]: https://gist.github.com/peschwa/ba5cec2763266988c30805606968606b is the relevant bits i'd say

[12:58] <[Coke]> moritz: really? I didn't see that. the message must have gone out on irc, which does not guarantee delivery. :P

[12:58] <Woodi> [Coke]: "losing conversations" - you would like to have every chat message logged to a files (like in Eve Online game, very nice for "logs leak"/"in game diplomacy" :) ) ?

[12:58] <psch> the one thing that doesn't seem to work is the autosendcmd, but i don't really mind that

[12:58] <moritz> [Coke]: :/

[12:59] <[Coke]> Woodi: I can go to the irclog site for that. Ideally, it would be part of my day to day client usage.

[13:00] <psch> i wanted to move to irc.p6c.org, but it repeated slipped my mind :/

[13:00] *** cdg joined
[13:00] <Woodi> [Coke]: anyway Solid State Memory would be nice :)

[13:03] <Woodi> .oO(town-wide clouds?)

[13:04] <moritz> [Coke]: ssh [email@hidden.address]
[13:04] *** darutoko joined
[13:05] <moritz> [Coke]: ... though I guess I should do a few security updates there (and reboot) before you start using it for realz :-)

[13:05] <moritz> (because that VM had been sleeping for about a year or so)

[13:06] <Woodi> moritz: is it OpenBSD ? ;)

[13:06] <moritz> Woodi: no

[13:09] *** mantovani joined
[13:09] <mantovani> guys, can I use any java lib in Perl 6 ?

[13:09] <mantovani> like Scala

[13:09] <moritz> mantovani: only if you use the JVM backend, and that's a bit broken at the moment

[13:09] *** Util joined
[13:10] <psch> mantovani: and even on the JVM backend that's a strong "not yet", not a "yes

[13:10] <psch> "

[13:10] *** skids joined
[13:10] <psch> mantovani: implementing a Java interface in a Perl 6 class is one thing that has not yet worked before

[13:10] <mantovani> :'(

[13:10] <psch> mantovani: patches welcome... :)

[13:10] *** woolfy joined
[13:10] <moritz> [Coke], psch: I've security-updated and rebooted irc.p6c.org, created accounts for the both of you, and copied your ssh keys from hack over to the new machine

[13:11] <psch> moritz: great, thanks :)

[13:11] <mantovani> almost vendor maintain it owns Java SDK/PI library if we could use it native in Perl 6 would be perfect

[13:11] <moritz> also tmux, screen, irssi and weechat installed

[13:11] <mantovani> any almost vendor maintain it owns Java SDK/API library if we could use it native in Perl 6 would be perfect.*

[13:11] <timotimo> people might be interested in quassel, btw

[13:11] <timotimo> it has the engine vs front-end separation thing going

[13:12] <timotimo> kind of like weechat with its relays, and irssi has something similar as well

[13:15] *** psch_ joined
[13:15] *** psch left
[13:15] *** psch_ is now known as psch

[13:17] *** acrussell joined
[13:17] <moritz> oh, quassel seems to be graphical

[13:18] <moritz> I just wondered why installing it would drag along another 288 packages :-)

[13:18] <nine> Should I suggest using Inline::Java via Inline::Perl5? Or would that be even too crazy for me? ;)

[13:19] <smls> http://i.imgur.com/9VY0zGR.jpg

[13:19] <mantovani> nine: I don't want to use Java sintaxe, if I would I wouldn't need inline lol.

[13:20] <timotimo> ah, i didn't know there isn't a CLI client for quassel

[13:21] <psch> eh, from the looks of it you only need really need to do the construction in Java

[13:21] <nine> mantovani: Inline::C is probably the only module in the Inline:: familiy where the "Inline" part of the name is really the important one. For all others, being able to write the code inline is merely a small extra feature and the important bit is being able to use existing code.

[13:21] *** jjido joined
[13:21] <psch> +code

[13:21] <timotimo> now test case 011515 crashed it >:(

[13:21] <nine> mantovani: and even Inline::C can be used as a more convenient way to use C libraries in Perl 5 than the standard XS way.

[13:22] *** acrussell left
[13:24] <timotimo> there's ~12300 files in the queue ... i don't want to do another four runs :o

[13:25] *** acrussell joined
[13:26] *** jjido left
[13:28] <[Coke]> moritz: unfortunately, I can't ssh to that box from work because of the hostname.

[13:33] <mspo> 213.95.82.55

[13:33] <mspo> although the ptr is revealing

[13:35] <mst> mantovani: which part of the Inline::Java documentation implies that it requires using java syntax, or did you just answer without looking ? :P

[13:35] <moritz> [Coke]: want me to call it 'communication.p6c.org' instead?

[13:36] <moritz> shorter (but still speaking) name suggestions would be welcome

[13:36] <mst> oh, wow, your work firewall blocks any hostname with 'irc' in it?

[13:36] <mantovani> mst: I can't extend a class or use reflection using perl5 sintaxe. at least is what I understood from the documentation.

[13:36] <mst> this reminds me of youporn.com being unable to sponsor a perl.org ircd because their hosting company wouldn't allow it

[13:37] <moritz> lol

[13:37] <mst> mantovani: well, no, but that's not what you asked for.

[13:37] <mantovani> 09:09 < mantovani> like Scala

[13:38] <mantovani> In Scala I can do what it.

[13:38] <mantovani> but I would prefer infinity more use perl 6 than scala.

[13:38] <psch> mantovani: with such a strong preference you sure have to have some desire to help

[13:38] <psch> *surely

[13:38] <nine> mantovani: takes quite a few contributions till we get there

[13:39] <moritz> if the desire is indeed infintely larger, then any finite obstacles can be overcome

[13:41] <mantovani> Perl 6 is /win 2

[13:43] <mantovani> I have it, I would need to read the dragon book again and it not just it, perl 6 implementation is really complex

[13:44] <mantovani> implement a subset of java is trivial, implement a subset of perl 6 isn't.

[13:44] <psch> mantovani: fwiw, the thing that's needed to use (more kinds of) Java classes in perl6 is mostly JAva

[13:44] <psch> s/A/a/

[13:45] *** Ptolemarch joined
[13:49] <masak> .u 囍

[13:49] <yoleaux> No characters found

[13:50] <masak> wow, I don't see yoleaux draw a blank that often.

[13:51] *** harmil joined
[13:52] <harmil> Morning all. Can't stay, off to work, but had to paste this error, which is nearly Zen: expected Any but got Perl6::Grammar

[13:54] *** bjz left
[13:55] *** bjz joined
[13:57] *** _mg_ left
[13:58] *** Ptolemarch left
[13:59] *** molaf joined
[14:00] *** ZoffixW joined
[14:01] <ZoffixW> woolfy, ping

[14:01] *** Sgeo_ joined
[14:02] <ZoffixW> woolfy, alternative design for your brochure: http://temp.perl6.party/Perl6-Brochure--Alt-Design.pdf

[14:04] *** gnull` left
[14:06] <ZoffixW> harmil, would be nice to know that code gave that error :/

[14:09] *** kurahaupo left
[14:12] *** ZoffixW left
[14:13] <hahainternet> .tell ZoffixW alternate design looks superb

[14:13] <yoleaux> hahainternet: I'll pass your message to ZoffixW.

[14:14] *** Ptolemarch joined
[14:14] <hahainternet> i think my only criticism would be that the bullet points need to be more brief and distinct, but it's still excellent

[14:15] <woolfy> ZoffixW: thanks.  I'm at Damian's class.  If there are any more proposals, please send me an email, or use that system that Github offers (I', still learning).

[14:15] *** heatsink joined
[14:17] <woolfy> ZoffixW: ooh, beautiful design...  (grr, now I missed some deep explanation from Damian!)

[14:20] <woolfy> ZoffixW++

[14:20] <ugexe> ZoffixW: i'll replace that default path later today with a cli option. it was a left over from before %?RESOURCES when the config was actually stored in project root

[14:21] <lizmat> Zoffix++

[14:26] <harmil> ZoffixW, that error was the result of trying to do some introspection that's probably not valid. It definitely was not a bug report, I was just amused by the koan-like error.

[14:28] *** rindolf joined
[14:32] *** boyo joined
[14:32] *** boyo is now known as Guest40893

[14:33] *** mcmillhj joined
[14:33] *** abruanese joined
[14:34] *** sno left
[14:34] *** mr-foobar joined
[14:37] *** AlexDaniel joined
[14:37] <AlexDaniel> Zoffix: cool, but is it still editable?

[14:37] <AlexDaniel> Zoffix: for example, “Perl 6” will look much better with no break space

[14:40] *** b2gills left
[14:42] *** xdg joined
[14:43] *** uniejo joined
[14:47] <mspo> your lead in paragraphs seem wasted by attempting to explain the confusion relationship of of compilers and runtimes

[14:47] <mspo> instead of language features or quotes or code samples or whatever

[14:48] <mspo> " Any implementation that passes the official test suite

[14:48] <mspo> can call itself “Perl 6”."

[14:48] <mspo> who cares? :)

[14:50] *** uniejo left
[14:51] *** ssotka joined
[14:54] *** b2gills joined
[14:55] <BrokenRobot> AlexDaniel: good spot fixed.

[14:56] <BrokenRobot> AlexDaniel: FSVO "editable". It's an InDesign file but I don't think I'm allowed to share the super expensive fonts.

[14:56] *** ocbtec left
[14:56] <BrokenRobot> mspo: the copy isn't mine. I just did the design for it.

[14:56] <stevieb> ``MoarVM offers a 

[14:56] <stevieb> wider support...'' ..."a" should be removed

[14:57] <AlexDaniel> BrokenRobot: ah okay, then I'll read it

[15:03] <[Coke]> mst: while that's a reasonable assumption based on what I said, no.

[15:04] <[Coke]> moritz: not sure it would help to rename it. I had to go through work to get hack whitelisted. Given that there's no web site for irc, probably won't work at all.... But I can hop through hack first, that's fine.

[15:05] *** heatsink left
[15:06] *** [Coke]_ joined
[15:07] <[Coke]_> moritz++ # one irc problem down.

[15:07] *** andreoss joined
[15:07] *** atweiden joined
[15:07] <[Coke]> 

[15:08] *** [Coke] left
[15:08] *** [Coke]_ is now known as [Coke]

[15:08] <grondilu> Larry only did a Q&A @YAPC::NA or is there more?

[15:08] <grondilu> I did watch Damian's keynote and it was very cool but I'd happily watch more.

[15:11] <TimToady> just the Q&A

[15:12] <grondilu> ok

[15:13] *** kerframil joined
[15:13] <BooK> watching pmichaud's yapc talk, and experimenting

[15:13] <BooK> m: my $a = "a\c[COMBINING DOT ABOVE]\c[COMBINING DOT BELOW]"; say "$a {$a.chars} {$a.codes}"

[15:13] <camelia> rakudo-moar 9b579d: OUTPUT«ạ̇ 1 2␤»

[15:13] <BooK> he said 3 codes in his talk

[15:13] <moritz> [Coke]: maybe https://wiki.gentoo.org/wiki/SSH_jump_host#Static_jumphost_list helps with going through hack

[15:14] <psch> m: my $a = "a\c[COMBINING DOT ABOVE]\c[COMBINING DOT BELOW]"; say "$a {$a.chars} {$a.NFKD.codes}"

[15:14] <camelia> rakudo-moar 9b579d: OUTPUT«ạ̇ 1 3␤»

[15:14] <BrokenRobot> m: my $a = "a\c[COMBINING DOT ABOVE]\c[COMBINING DOT BELOW]"; say $a.uninames

[15:14] <camelia> rakudo-moar 9b579d: OUTPUT«(LATIN SMALL LETTER A WITH DOT BELOW COMBINING DOT ABOVE)␤»

[15:14] <psch> yeah, gets NFG'd

[15:15] <psch> which often seems to mean "merge the first combining with the base codepoint"

[15:15] <psch> but not always, because unicode vOv

[15:15] <BooK> ok, I supposed something like that was happening

[15:15] <BooK> what's .NFKD ?

[15:16] <ilmari> BooK: Normal Form Kompatible Decomposed

[15:17] <BooK> thanks

[15:17] * psch was still looking that up

[15:17] <BrokenRobot> .oO( "Kompatible"? )

[15:17] *** cognominal left
[15:17] <psch> Decomposition probably too then

[15:17] <psch> also i think we'd write that which a Bindestrich

[15:17] <ilmari> «Normalization Form Compatibility Decomposition»

[15:17] <BrokenRobot> Oh "In NFKC and NFKD, a K is used to stand for compatibility"

[15:17] <psch> Normal-Form Kompatible Decomposition, because unicode now is german :P

[15:18] <BrokenRobot> "... to avoid confusion with the C standing for composition"

[15:18] <psch> that definitely sounds like a unicode consortium decision though

[15:18] <nine> Does a great job at avoiding confusion, doesn't it? ;)

[15:18] <BrokenRobot> heh

[15:18] *** [Coke] left
[15:20] *** [Coke] joined
[15:21] <BrokenRobot> oops

[15:21] <BrokenRobot> I accidentally killed camelia /o\

[15:21] <moritz> how?

[15:21] <BrokenRobot> sent `nqp: test`

[15:22] <psch> (also, "Decomposition" is written with a "c" so it isn't confused with the K for "Kompatible" in german-NFKD)

[15:22] *** camelia joined
[15:22] <psch> BrokenRobot: only nqp-m works, nqp: tries parrot and jvm backends too

[15:22] <BrokenRobot> ah

[15:22] <psch> ...patches welcome vOv

[15:22] *** domidumont left
[15:23] <moritz> seems camelia recovered

[15:23] <moritz> m: say 'first one will be slow though, as always'

[15:23] <andreoss> m: use variables :D; my Str $x = Str; say $x;

[15:23] <moritz> camelia needs a bit of time to get around its flood limit after the rejoin

[15:24] *** [Coke] left
[15:24] *** ChanServ sets mode: +v camelia

[15:24] <camelia> rakudo-moar 9b579d: OUTPUT«first one will be slow though, as always␤»

[15:24] *** [Coke] joined
[15:24] <camelia> rakudo-moar 9b579d: OUTPUT«Type check failed in assignment to $x; expected Str:D but got Str (Str)␤  in block <unit> at <tmp> line 1␤␤»

[15:25] *** [Coke] left
[15:25] <andreoss> m: use variables :D; \n my Str $x = Str; say $x;

[15:25] <camelia> rakudo-moar 9b579d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    n used at line 1␤␤»

[15:25] *** [Coke] joined
[15:25] <BrokenRobot> Wow you can do that?

[15:25] <BrokenRobot> m: use variables :D; ␤ my Str $x = Str; say $x;

[15:25] <camelia> rakudo-moar 9b579d: OUTPUT«Type check failed in assignment to $x; expected Str:D but got Str (Str)␤  in block <unit> at <tmp> line 2␤␤»

[15:25] <BrokenRobot> .u ␤

[15:25] <yoleaux> U+2424 SYMBOL FOR NEWLINE [So] (␤)

[15:26] <BrokenRobot> m: use variables :U; my Str $x = "blarg"

[15:26] <camelia> rakudo-moar 9b579d: OUTPUT«Type check failed in assignment to $x; expected Str:U but got Str ("blarg")␤  in block <unit> at <tmp> line 1␤␤»

[15:26] <BrokenRobot> Amazing.

[15:26] <[Coke]> psch: looks like my irssi file had accumulated stuff that shouldn't have been there and was missing other things. seems better now.

[15:26] <psch> [Coke]: great :)

[15:26] <andreoss> BrokenRobot: i wonder why that's not default

[15:27] <andreoss> m: use parameters :D;

[15:27] <camelia> rakudo-moar 9b579d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤use parameters not yet implemented. Sorry. ␤at <tmp>:1␤------> 3use parameters :D7⏏5;␤»

[15:27] <psch> m: use variables :D; my $x

[15:27] <camelia> rakudo-moar 9b579d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable definition of type Any:D (implicit :D by pragma) requires an initializer␤at <tmp>:1␤------> 3use variables :D; my $x7⏏5<EOL>␤    expecting any of:␤        constraint␤»

[15:27] <psch> andreoss: ^^^ that's why

[15:27] <psch> andreoss: it forces initializers, which usually isn't what anyone wants

[15:28] <andreoss> my $x could be a special case 

[15:28] <andreoss> m: use variables :D; my $x = 1;

[15:28] <camelia> rakudo-moar 9b579d: ( no output )

[15:28] <psch> andreoss: but it can't be, because they type already means it needs an initializer

[15:29] <psch> andreoss: because 'variables :D' means that *all* types are *always* :D

[15:29] * BrokenRobot isn't a fan of "special cases"

[15:31] *** _mg_ joined
[15:31] <psch> and, well, :D essentially means "the thus typed variable needs an initializer"

[15:31] <andreoss> m: sub undef { Any.new }; use variables :D; my $x = undef; $x = 1;

[15:31] <camelia> rakudo-moar 9b579d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of undef as a value; in Perl 6 please use something more specific:␤   an undefined type object such as Any or Int,␤   :!defined as a matcher,␤        Any:U as a type constraint,␤    Nil as the abse…»

[15:32] <psch> so if you say "let's use 'variables :D' to mean 'you have to use an initializer', but let's also add the special case for declarations without initializers to work", what exactly did you gain?

[15:33] <[Coke]> moritz: can you install a curses c lib on irc?

[15:33] <BrokenRobot> m: use variables :D; my @a of Int = ^10; 

[15:33] <camelia> rakudo-moar 9b579d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Int not allowed here; variable list already declared with type Any:D␤at <tmp>:1␤------> 3use variables :D; my @a of Int7⏏5 = ^10;␤    expecting any of:␤        constraint␤»

[15:33] *** kanishka left
[15:35] <andreoss> psch: this way i woudln't worry about covering cases when uninitilized objects occur 

[15:35] <psch> m: sub undef { Any.new }; use variables :D; my $x = undef(); $x = 1;

[15:35] <camelia> rakudo-moar 9b579d: ( no output )

[15:35] <BrokenRobot> m: use variables :D; my @a = ^10; @a[2]:delete; say @a

[15:35] <camelia> rakudo-moar 9b579d: OUTPUT«[0 1 (Any:D) 3 4 5 6 7 8 9]␤»

[15:35] <BrokenRobot> m: use variables :D; my @a = ^10; @a[2]:delete; say "@a[2]"

[15:35] <camelia> rakudo-moar 9b579d: OUTPUT«Use of uninitialized value @a of type Any:D in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at <tmp> line 1␤␤»

[15:36] <BrokenRobot> That's just obscene :)

[15:36] <psch> m: say Any.new

[15:36] <camelia> rakudo-moar 9b579d: OUTPUT«Any.new␤»

[15:36] <andreoss> `my Str $x` usually means `my Str:D`

[15:36] <psch> andreoss: it really doesn't

[15:36] *** _mg_ left
[15:36] <moritz> [Coke]: I've installed libncurses5 + headers

[15:36] *** ocbtec joined
[15:37] <BrokenRobot> andreoss: you proposal attempts to use an always-defined type as can't-assign-a-Nil-to-it

[15:38] <BrokenRobot> Variables aren't the only thing on the plate. There are also attributes, named args, etc.

[15:38] <BrokenRobot> The :D default would just get in the way all the time

[15:38] <andreoss> what would be a common use case for putting Str as a type to a varible? 

[15:39] <tony-o> i really like that the gitlab api is on github

[15:39] <andreoss> BrokenRobot: yep, within signatures :D even more desirable 

[15:39] <andreoss> as default

[15:39] <BrokenRobot> andreoss: only for mandatory variables

[15:40] <BrokenRobot> And since named args aren't you'd have to plaster :_ all over the place just to disable a feature that shouldn've been on by default anyway

[15:40] <andreoss> okay

[15:40] <psch> m: sub type-grep(@a, $type) { grep @a: { $_ ~~ $type } }; say type-grep([1, 2, "foo", "bar"], Str)

[15:40] <camelia> rakudo-moar 9b579d: OUTPUT«(foo bar)␤»

[15:40] <psch> do that with :D vOv

[15:41] <BrokenRobot> heh

[15:41] <psch> i mean, my point is mostly that yes, there are cases where you probably want to only have :D 

[15:41] <psch> but there's also cases where you only want to have :U

[15:41] <psch> so why should we make on of them the default if there's no conclusive indication for either of those two cases to be *vastly* more common?

[15:42] <psch> *one

[15:42] <andreoss> :_ is the default 

[15:42] <psch> andreoss: but you're proposing :D to be the default i thought?

[15:43] <andreoss> it seems that :D as a default would make more sense

[15:44] <andreoss> at leasts in signatures 

[15:44] <BrokenRobot> m: my $x := -> { my $s; Proxy.new(STORE => method (Str:D $v) {$s = $v;}, FETCH => method (){$s})}(); say $x; $x = "foo"; say $x'

[15:44] <camelia> rakudo-moar 9b579d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3d (){$s})}(); say $x; $x = "foo"; say $x7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤     …»

[15:44] <andreoss> and as i see `use variables` doesn't affect signatures at all

[15:45] <smls> psch: Most methods should ideally mark their invocant as :D, whereas very few would use :U. Just as an example.

[15:45] <BrokenRobot> TTIAR where :S

[15:45] <psch> BrokenRobot: the ' at the end

[15:45] <BrokenRobot> Oh, the stray apostrophe

[15:45] <BrokenRobot> m: my $x := -> { my $s; Proxy.new(STORE => method (Str:D $v) {$s = $v;}, FETCH => method (){$s})}(); say $x; $x = "foo"; say $x

[15:45] <camelia> rakudo-moar 9b579d: OUTPUT«(Any)␤foo␤»

[15:45] <psch> smls: i don't think i agree

[15:45] <psch> smls: especially self is very often desired as :U

[15:46] <smls> Hm?

[15:46] <psch> most of my OO code at least isn't dependent on having an initialized self

[15:46] <psch> maybe because i'm bad at OO :P

[15:47] *** kerframil left
[15:47] <psch> anyway, yeah, it seems like 'variables :D' isn't even what would help there

[15:48] <smls> psch: The default .new method doesn't use :U either, it uses :_

[15:48] <psch> i do think it might be interested to see (1) 'parameters :D' or 'invocants :D' implement and (2) see how often they're used

[15:48] <psch> s/rested/resting/

[15:49] <psch> smls: right, i misspoke.  instead of "want :U" i should have written "not want :D"

[15:49] <psch> ...paraphrased

[15:49] <smls> ok

[15:49] <BrokenRobot> Make it the default and count the number of complains from people whose code got broken :P

[15:49] * BrokenRobot runs

[15:49] <psch> BrokenRobot: yes, secretly do that the next release!

[15:49] <BrokenRobot> :)

[15:51] *** Ptolemarch left
[15:52] <smls> Heh. I used --profile on a nontrivial Perl 6 program, but I can't view the resulting HTML doc because its JavaScript brings both Firefox and Chrome to their knees.

[15:52] <[Coke]> smls: ayup

[15:52] <smls> It causes the browser to freeze, until after half a minute or so it offers to kill the script.

[15:52] <psch> i think you can --profile directly to json, and there is a Qt profile viewer somewhere too

[15:52] <psch> but that also has a size limit for the json it supports

[15:52] <moritz> smls: iirc you can add --profile-filename=out.json or so

[15:52] <BrokenRobot> m: use variables :D; sub foo (Str $ --> Str) {Str}; foo Str; &foo.signature.say

[15:52] <camelia> rakudo-moar 9b579d: OUTPUT«(Str --> Str)␤»

[15:52] <[Coke]> I think there is a WIP to change how that works, but no ticket to go along with it describing the effort/branch

[15:55] *** Guest40893 left
[15:55] *** cdg left
[15:58] <BrokenRobot> m: my @a = ^10; my $x = item @a; my $y = @a; say $x; say $y

[15:58] <camelia> rakudo-moar 9b579d: OUTPUT«[0 1 2 3 4 5 6 7 8 9]␤[0 1 2 3 4 5 6 7 8 9]␤»

[15:58] <BrokenRobot> .oO( what's item for... )

[15:59] <psch> m: my @a = ^10; my @x = item @a; my @y = @a; say @x; say @y

[15:59] <camelia> rakudo-moar 9b579d: OUTPUT«[[0 1 2 3 4 5 6 7 8 9]]␤[0 1 2 3 4 5 6 7 8 9]␤»

[16:00] <BrokenRobot> psch++

[16:00] *** dakkar left
[16:01] <[Coke]> ENODOCS: item

[16:01] <BrokenRobot> Yeah, xdg just opened an issue..

[16:01] *** hassoub joined
[16:02] <[Coke]> ++

[16:02] <xdg> o/

[16:03] <BrokenRobot> \o\

[16:05] <redhands98100> AlexDaniel: thanks for the suggestion. It looks like glot.io allows system calls, and even has a writable fs.

[16:05] <AlexDaniel> redhands98100: yea

[16:07] <[Coke]> xdg: you were at the baltimore con, aye?

[16:08] <xdg> yes

[16:11] *** huggable left
[16:12] *** huggable joined
[16:20] *** mantovani left
[16:24] *** hassoub left
[16:24] *** hassoub joined
[16:26] *** dogbert17 joined
[16:27] *** hassoub left
[16:27] <dalek> doc/tab-test: 3d70d4a | coke++ | t/tabs.t:

[16:27] <dalek> doc/tab-test: Add (failing) tab test

[16:27] <dalek> doc/tab-test: review: https://github.com/perl6/doc/commit/3d70d4ae9d

[16:29] <[Coke]> AlexDaniel: there's a pull request for you.

[16:29] <[Coke]> https://github.com/perl6/doc/pull/627

[16:29] <AlexDaniel> I see :)

[16:31] *** mantovani joined
[16:32] <dalek> doc/tab-test: 4432bf4 | coke++ | t/tabs.t:

[16:32] <dalek> doc/tab-test: Skip more files

[16:32] <dalek> doc/tab-test: review: https://github.com/perl6/doc/commit/4432bf4ff6

[16:36] *** travis-ci joined
[16:36] <travis-ci> Doc build failed. Will "Coke" Coleda 'Add (failing) tab test'

[16:36] <travis-ci> https://travis-ci.org/perl6/doc/builds/139809102 https://github.com/perl6/doc/commit/3d70d4ae9d79

[16:36] *** travis-ci left
[16:38] <[Coke]> "how could that break the build, it..." oh. :)

[16:39] <BrokenRobot> :)

[16:40] *** travis-ci joined
[16:40] <travis-ci> Doc build failed. Will "Coke" Coleda 'Skip more files'

[16:40] <travis-ci> https://travis-ci.org/perl6/doc/builds/139810465 https://github.com/perl6/doc/compare/3d70d4ae9d79...4432bf4ff64d

[16:40] *** travis-ci left
[16:40] *** araujo joined
[16:47] <dalek> doc: 533a378 | (Josh Soref)++ | doc/HomePage.pod:

[16:47] <dalek> doc: skip redirects for www.perl.org

[16:47] <dalek> doc: review: https://github.com/perl6/doc/commit/533a378c11

[16:49] *** Actualeyes joined
[16:54] <[Coke]> anyone want to clean up the issue labels for docs?

[16:55] <dogbert17> o/ #perl6

[16:57] <dogbert17> moritz: "and I should install a newer perl6 on the server that builds the docs" Has that happened?

[16:58] <AlexDaniel> [Coke]: I can give it a try

[16:58] <timeless> AlexDaniel: ping

[16:58] <AlexDaniel> here! HERE! I'm here! :)

[16:58] <timeless> I'm about to put up  a  PR for the fun bits :)

[16:58] <timeless> but ... before that

[16:58] <AlexDaniel> yeaah!

[16:58] <timeless> https://doc.perl6.org/language/regexes#Greedy_versus_frugal_quantifiers:_?

[16:58] <timeless> do you think someone could come up w/ a better example?

[16:59] <timeless> err

[16:59] <timeless> https://doc.perl6.org/language/regexes#Preventing_backtracking:_:

[16:59] <timeless> it's pretty hard for me to see a reason anyone would want to write /a .*: aba/

[16:59] <AlexDaniel> timeless: you mean that example could be better?

[17:00] <timeless> yeah

[17:00] <timeless> it also woudl help if `backtracking` was defined in the page

[17:00] <timeless> it's used here ("prevent backtracking") and in "rachet" ("backtracking is costly")

[17:00] <timeless> it /looks/ like ratchet has a definition of it buried near the beginning

[17:01] <timeless> > Without this adverb, parts of a regex will try different ways to match a string in order to make it possible for other parts of the regex to match. For example in 'abc' ~~ /\w+ ./, the \w+ first eats up the whole string, abc but then the . fails. Thus \w+ gives up a character, matching only ab, and the . can successfully match the string c. This process of

[17:01] <timeless> giving up characters (or in the case of alternations, trying a different branch) is known as backtracking.

[17:01] <timeless> (i know what it is, but really, this page should have a section for it, and link to it...)

[17:01] <timeless> and the example should show a case where it makes sense...

[17:02] <timeless> "why would anyone want to write /a .*: aba/ ?"

[17:02] <AlexDaniel> timeless: ok https://github.com/perl6/doc/issues/628

[17:03] <timeless> oh, wow. yeah.

[17:03] <timeless> "oops"

[17:03] *** donaldh left
[17:03] <timeless> ok, my `make html..` ran, now to run the linkchecker

[17:04] <AlexDaniel> timeless: ok https://github.com/perl6/doc/issues/629

[17:05] <AlexDaniel> yeah, .*: is stupid…

[17:05] <timeless> https://github.com/jsoref/perl6-doc/commit/f2ff9b77b2cd361e9697c09475c9b219edfeda85

[17:06] <timeless> if you want to look before i create the pr

[17:06] *** cdg joined
[17:06] <timeless> i understand the idea of "i want a fast match or nothing"

[17:06] <timeless> but the example is basically "i really really want nothing almost always"

[17:07] <timeless> (and i'm not sure about the `almost`)

[17:07] <timeless> also, is there a p5 to p6 regexp converter?

[17:07] <timotimo> i only know of :P5

[17:08] <timotimo> dunno if Blue_Tiger does any regex munging

[17:08] <timeless> timotimo: that lets you use a p5 regexp in p6, right?

[17:08] <timeless> that's not what i want

[17:08] <BrokenRobot> timeless: were you the person hacking on converting special chars to words on the doc site? How is that going?

[17:08] <timotimo> yup

[17:08] <timeless> BrokenRobot: see github url above

[17:08] <AlexDaniel> BrokenRobot: link there ↑

[17:08] * timeless is running the link checker now

[17:08] <BrokenRobot> Oh. what a coincidence.

[17:09] <timeless> i finally got it somewhere reasonable last night, and fell asleep

[17:09] <AlexDaniel> langle rangle… lbracket rbracket… not sure if I like that

[17:09] <timeless> fwiw, i can't use `lt` and `gt`

[17:10] <timeless> because https://doc.perl6.org/routine/gt

[17:10] <AlexDaniel> what about left-bracket ?

[17:10] *** redhands98100 left
[17:10] *** _mg_ joined
[17:10] <timeless> ambiguous since i'm currently using `-` as my concat char

[17:10] <timeless> it's possible to adjust by shifting the concat char

[17:10] <timeless> or just using `leftbracket`

[17:10] <AlexDaniel> leftbracket?

[17:10] <timeless> i can live w/ that

[17:11] <timeless> it's fairly verbose, which is something i was hoping to avoid

[17:11] <timeless> but, i won't die over it

[17:11] <timeless> (the link checker isn't fast, i should have had it run overnight, but i was on the wrong commit, so it checked something useless)

[17:11] <timeless> ARG

[17:11] <timeless> http://localhost:3000/language/5to6-dash-dash-dash-perlop        -> broken

[17:12] <timeless> right, so what i have right now isn't good enough

[17:12] <timeless> so...

[17:12] <BrokenRobot> There's no need to escape the dash, is there?

[17:12] <timeless> how attached to the `-` in `5to6-*` are we?

[17:12] <timeless> BrokenRobot: there is... sorta

[17:12] <timeless> it's pretty easy to end up w/ ambiguous cases, i should have maintained a list

[17:13] *** redhands98100 joined
[17:13] <BrokenRobot> timeless: ambiguous how?

[17:15] * timeless eyes html/days-in-month.html and html/days-dash-in-dash-month.html

[17:15] <timeless> arg

[17:16] * timeless makes clean

[17:16] <AlexDaniel> timeless: to me it looks like we should not escape dashes. It's OK to have ambiguous cases as long as we are not running into conflicts

[17:17] <BrokenRobot> +1

[17:17] <timeless> i'm pretty sure i ran into a conflict

[17:17] <timeless> i need to find it

[17:17] <timeless> part of the problem is that when you start glomming words together, it's hard to find boundaries

[17:17] <timeless> especially if i have to move to `leftbracket`

[17:17] <timeless> `leftbracketdollardollar`?

[17:18] <BrokenRobot> Well, same there, why is < need escaping?

[17:18] <BrokenRobot> https://docs.perl6.org/routine/%3C

[17:18] <timeless> hard to search for

[17:18] <BrokenRobot> and "leftbracket" isn't? :)

[17:18] <timeless> and hard to read

[17:19] <AlexDaniel> not like someone is going to edit the url by hand? Hmm…

[17:19] <timeless> well, for one, how does anyone know what `%3c` is

[17:19] <BrokenRobot> By knowing percent encoding?

[17:19] <timeless> do most people know percent encoding?

[17:19] <BrokenRobot> Why do they need to know what it is in the first place?

[17:20] <timeless> people do read and write urls

[17:20] <timeless> they also will make links to documents from outside your tool

[17:20] <AlexDaniel> well my browser shows <

[17:20] <timeless> my browser doesn't even escape `<` in the urlbar

[17:20] <BrokenRobot> You can use https://docs.perl6.org/routine/< if you're feeling adventurous

[17:20] <timeless> anyway, lemme find the example

[17:21] <timeless> it's somewhere

[17:21] *** grondilu left
[17:21] * timeless is still waiting for a fresh build

[17:21] <timeless> i think `make html*` needs to do a `make somewhatclean`

[17:21] <timeless> specifically, it should probably empty html/*.html

[17:21] *** _mg_ left
[17:21] <ilmari> make cleanish?

[17:22] <timeless> ilmari: cleanhtml:

[17:22] <timeless>         rm -rf html/*.html html/.*.html html/routine/ html/type/ html/op/ html/language/ html/syntax/

[17:22] <timeless> cleanimages:

[17:22] <timeless>         rm -rf html/images/type-graph*

[17:22] <timeless> cleansearch:

[17:22] <timeless>         rm html/js/search.js

[17:22] <timeless> clean:

[17:22] <timeless> er

[17:22] <timeless> clean: cleanhtml cleanimages cleansearch

[17:23] <timeless> thoughts?

[17:23] <timeless> specifically, i don't use `make clean` because it deletes the images which take even longer to rebuild

[17:25] <timeless> grr

[17:26] <timeless> (it feels like i'm using the wrong commit or broke it somehow)

[17:26] * timeless sighs

[17:31] <mst> perhas the images could be moved to a realclean target?

[17:32] <timeless> (i'm not actually sure that the system properly doesn't rebuild images, but... it really would be nice if i didn't have to think about them)

[17:34] <timeless> ok, so... i think the reason i wanted `dash` is because it's painful to search for `-` using google

[17:35] <BrokenRobot> :/

[17:36] <BrokenRobot> IMO you're overthinking this. You want to stuff 'dash' all over the place on an off chance some user will know to search for word 'dash' instead of the hyphen for... what? the minus operator?

[17:37] <timotimo> i think it's helpful to have all kinds of synonyms in the search DB

[17:37] <BrokenRobot> 5to6-dash-dash-dash-perlop is dumb

[17:38] <BrokenRobot> timotimo: what search DB? You mean the generated index on the docs site?

[17:38] <timotimo> yeah

[17:38] <timotimo> what is timeless suggesting?

[17:38] <timotimo> i didn't look at the branch yet

[17:38] <BrokenRobot> timotimo: google search

[17:38] <timeless> (the branch is broken, i'm not sure how)

[17:38] <psch> isn't it more like "replace ops in links with text for google indexing"?

[17:39] * timeless is on the phone

[17:39] <BrokenRobot> The original goal of this work was to fix 404s that exist due to some operators being special characters that are treated specially by the OS or Apache, like '/' or anything that starts with '.'

[17:39] <AlexDaniel> which is something we *really* need

[17:40] <psch> right, but isn't there an apache directive for that?

[17:40] <psch> or has that been decided to be a bad idea for reasons?

[17:40] <timeless> no directive will fix `/`

[17:40] <timeless> not really

[17:40] <BrokenRobot> psch: yes, there is, but since the directive doesn't fix all the cases, there's no point in turning it off

[17:40] <timeless> it isn't meaningful to distinguish

[17:40] <psch> oh, right, / remains troublesome

[17:41] <mst> there is a directive that will make %2F ish work

[17:41] <mst> but that's not honestly going to help, I don't think

[17:41] *** fhorck joined
[17:41] <psch> http://httpd.apache.org/docs/current/mod/core.html#allowencodedslashes makes it seem like it could just wreck stuff on a different layer

[17:41] <BrokenRobot> AllowEncodedSlashes, but it doesn't help since the file isn't there.

[17:42] <timeless> so, in an hour or so, i'll try removing the dash escaping

[17:42] <psch> well, it's not like i really know apache vOv

[17:42] <timeless> and getting the thing to actually run

[17:42] <timeless> and resync my branch

[17:42] <BrokenRobot> Nah, it doesn't wreck stuff, unless you have shitty scripts :)

[17:42] <timeless> and re-run the link checker

[17:42] <AlexDaniel> timeless++

[17:42] * timeless returns to phone call

[17:43] <psch> maybe descriptive links (or whatever the "everything is a path in our link, no get params" craze is called) were a bad idea all along :P

[17:46] *** pmurias joined
[17:46] *** Ptolemarch joined
[17:46] <timotimo> can we discover if perl6 (the repl) is being run under RLWRAP and not output "you want to install readline, linenoise, or use rlwrap" thing

[17:47] <timeless> heh

[17:47] <timotimo> why did i allcaps that

[17:47] <timeless> i think i hit something like thtat

[17:47] <timotimo> perhaps because i was wondering if it perhaps sets an env var or something

[17:50] <AlexDaniel> psch: it's called static website :)

[17:51] <timotimo> instead of the names of things we should just use UUIDs

[17:51] <timotimo> that'll also let us refer to older versions with permalinks

[17:52] <tony-o> what link checker did you end up with timeless ?

[17:52] <dalek> snake: fbc5687 | (Pawel Murias)++ | t/more-literals.t:

[17:52] <dalek> snake: Test floating point literals.

[17:52] <dalek> snake: review: https://github.com/arnsholt/snake/commit/fbc56870f3

[17:52] <dalek> snake: 4895012 | (Pawel Murias)++ | src/Snake/Grammar.nqp:

[17:52] <dalek> snake: Forbid using keywords as identifier (None remains to be turned into a readonly constant).

[17:52] <dalek> snake: review: https://github.com/arnsholt/snake/commit/4895012349

[17:52] <dalek> snake: bcd5ed4 | (Pawel Murias)++ | / (3 files):

[17:52] <dalek> snake: :Other_ID_Start and :Other_ID_Continue is supported by nqp-m, use them to parse identifiers more correctly

[17:52] <dalek> snake: review: https://github.com/arnsholt/snake/commit/bcd5ed46f1

[17:52] <psch> AlexDaniel: but it's clearly not if "< BrokenRobot> [...] the file isn't there.", is it?

[17:52] <psch> AlexDaniel: or is the problem not actually in apache but in the file system?

[17:52] <timeless> More documentation at: http://validator.w3.org/docs/checklink.html

[17:52] <psch> 'cause i've really not looked too closely at it :)

[17:53] <BrokenRobot> psch: right htmlify.p6 doesn't create /.html

[17:53] *** hoelzro|phone joined
[17:53] <BrokenRobot> / is invalid in paths isn't it?

[17:53] <AlexDaniel> it's valid in paths :)

[17:53] <hoelzro|phone> timotimo: I want to be able to do that

[17:53] <AlexDaniel> it just means something different

[17:53] <BrokenRobot> In filanmes that is

[17:54] <hoelzro|phone> perhaps repl. pm can look at its ppid or something

[17:54] <timotimo> hey rob!

[17:54] <timotimo> you're quick :D

[17:54] <hoelzro|phone> or maybe do some voodoo with /proc/self/fd/0

[17:54] <hoelzro|phone> Hi Timo!

[17:54] <timotimo> that's not portable :P

[17:55] <timotimo> does rlwrap accept some escape sequences perhaps?

[17:55] <hoelzro|phone> true, true - I figure start with something that works and then make it portable

[17:55] <timotimo> :)

[17:55] <hoelzro|phone> I don't know! I'll look into it

[17:56] <timotimo> i remember a time where i was going through a huge list of ansi escape sequences that xterm and friends support and being very wowed

[17:56] <hoelzro|phone> we could probably check if stdin is a terminal or not

[17:56] <timotimo> isatty, eh?

[17:56] <hoelzro|phone> hehe

[17:56] <hoelzro|phone> yeah

[17:56] <hoelzro|phone> the xterm escape sequence list is both aw{esome,ful}

[17:57] <timotimo> :3

[17:57] <timotimo> you can ask xterm to give you a checksum of screen regions

[17:57] <timotimo> so you can see if, for example, ssh has spammed some errors over your screen since last you refreshed

[17:58] <hoelzro|phone> wow, really? til

[17:58] <hoelzro|phone> I'm about to duck into an appointment - we can discuss more in a bit

[17:58] <timotimo> sure

[18:00] <timotimo> it crashed yet again, but i'm sure this time it'll go through! (afl-fuzz, that is)

[18:00] <timotimo> m: say ?""

[18:00] <camelia> rakudo-moar 9b579d: OUTPUT«False␤»

[18:00] <timotimo> aaah

[18:02] *** kurahaupo joined
[18:05] *** sufrostico joined
[18:06] * lizmat pictures timotimo being attacked by his cat

[18:06] * timotimo only ever gets cuddle-attacked by the cats :3

[18:07] *** smls left
[18:08] *** pmichaud joined
[18:08] <pmichaud> good afternoon, #perl6

[18:08] <BrokenRobot> \o\

[18:08] <BrokenRobot> Why does my client send \o\ any time I type \o

[18:08] <BrokenRobot> \o

[18:09] <BrokenRobot> Oh.. maybe it's just a frequent case of fat fingers >_<

[18:09] <lizmat> o//

[18:09] <pmichaud> I guess \o\ is a slanted TIE fighter.

[18:09] <pmichaud> or an example of "wave your hands in the air like you just don't care"  :)

[18:09] <pmichaud> \o\  /o/   \o\  \o/

[18:10] <mantovani> he is trying to stop you to get in his company like a security guard, "\o\"

[18:11] *** sno joined
[18:12] *** pmurias_ joined
[18:12] <BrokenRobot> "Plain blocks are also available for use as closures, but do not take an implicit $ argument like in Perl 6!"

[18:12] <BrokenRobot> I don't get it. How do blocks take $_ as implicit argument?

[18:12] <lizmat> m: my $b = { say $_ }; $b(42)

[18:12] <camelia> rakudo-moar 9b579d: OUTPUT«42␤»

[18:13] <lizmat> m: my $b = { say $^a }; $b(42)

[18:13] <camelia> rakudo-moar 9b579d: OUTPUT«42␤»

[18:13] <BrokenRobot> m: my $b = -> { say $_ }; $b(42)

[18:13] <camelia> rakudo-moar 9b579d: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[18:13] <BrokenRobot> lizmat++

[18:13] *** cognominal joined
[18:13] <lizmat> a block without a sig that (implicitely) specify $_ create the -> $_ sig

[18:14] <timotimo> pmichaud: seeing your perl6 for beginners recording right now; looking good :)

[18:15] *** pmurias left
[18:15] <[Coke]> AlexDaniel: I was thinking we could have a small chat about what we want to see there first, so we don't end up with someone reworking things and people getting grumpy

[18:15] <AlexDaniel> [Coke]: sure

[18:16] <pmichaud> timotimo: thanks!

[18:16] *** domidumont joined
[18:16] <pmichaud> I feel like I should've given a talk that "pushed the boundaries of p6" again.  :)

[18:16] <pmichaud> but that would've required... actually making a new talk.  :)

[18:16] <timotimo> also, i like your voice and way of speaking just in general :3

[18:17] <pmichaud> I'm trying to decide when my next p6 event will be.

[18:17] <pmichaud> I'd rather not wait until next year's yapc::na if I can find something sooner.

[18:18] <Xliff> <-o->   # Tie bomber

[18:18] <Xliff> s/Tie/TIE/

[18:18] <pmichaud> ooooh, alpine perl workshop :)

[18:18] <pmichaud> that's potentially an even better weekend for me than yapc::eu

[18:19] <[Coke]> just randomly show up in albany, I can get like 5 people to a talk or something. :)

[18:19] <AlexDaniel> [Coke]: I think that a good way to start is to get rid of ones that are not being used. For example, "ruled *" was probably a great idea but nobody is going to use these

[18:19] <pmichaud> [Coke]: I liked kid51++'s description of "an emergency perl mongers social meeting" in response to people showing up in nyc  :)

[18:20] <timotimo> if it's not planned, but it happens anyway, it's clearly emergent

[18:21] <pmichaud> I only got to stay for the first half of TheDamian's "Functional Programming in Perl" tutorial today... it's excellent.

[18:25] <AlexDaniel> [Coke]: but the question is what are we trying to achieve with these labels :) The most useful out of all is probably “needs writing”, those who want to write some text for docs can just filter by this label and that's it. “needs implementing” and “search” are OK too

[18:26] <AlexDaniel> everything else is weird

[18:27] <BrokenRobot> "easy" would be good too. Something for those who know very little Perl 6 to do.

[18:27] <AlexDaniel> maybe we should add “low-hanging fruit” and “CSS”

[18:27] <BrokenRobot> "CSS"?

[18:27] <moritz> +1

[18:27] <moritz> "layout" maybe

[18:28] <moritz> though it doesn't happen that often

[18:28] <AlexDaniel> it does not happen very often because I don't want to pollute the issue list with such things

[18:28] <AlexDaniel> if I had CSS label then I guess that I'd create some issues

[18:30] <timeless> +    # sort prorams index by file name to allow author control of order

[18:30] * timeless sighs

[18:30] <AlexDaniel> yeah we should probably fix that

[18:30] <moritz> anyway, I'm all in favor of cleanup up the issue labels; I found them to be mostly not actionable

[18:32] <pmichaud> moritz: +1

[18:37] *** eugen joined
[18:37] <pmichaud> afk:  gate, airplane boarding, flight, more

[18:37] *** domidumont left
[18:38] <BrokenRobot> flighr?

[18:38] <BrokenRobot> pmichaud / tbrowder Was there progress on the table pod bug?

[18:38] <BrokenRobot> Just wondering whether I should continue my work or you guys will sort it out

[18:40] <timeless> AlexDaniel: fwiw, some of the pods recently added have trailing whitespace...

[18:40] <AlexDaniel> timeless: I know. We need a test for that

[18:41] <AlexDaniel> or maybe not

[18:41] <AlexDaniel> maybe I can just clean it up once in a while…

[18:41] <BrokenRobot> Have the build script clean it?

[18:41] <BrokenRobot> Same goes for tabs too probably

[18:41] <AlexDaniel> have the build script modify source files? Uhh…

[18:42] <BrokenRobot> Oh

[18:42] <BrokenRobot> OK :)

[18:42] <timeless> there could be a script which could do the cleanup

[18:42] <timeless> so other people could run it

[18:42] <timeless> instead of just a linter that screams "you've got a trailing space here ->"

[18:42] *** jjido joined
[18:42] <BrokenRobot> How do git hooks work? Is it possible to set them up to automatically do this stuff on push/merge/GitHub on-site edit?

[18:43] <timeless> not well

[18:43] <BrokenRobot> Ah :(

[18:43] <timeless> it's easier for github side to reject things

[18:43] <AlexDaniel> BrokenRobot: yeah! We can reject commits that have trailing whitespace! Yaaay…

[18:43] <pmichaud> BrokenRobot: I haven't had a chance to look further on the table pod bug... but it's definitely on my "to-do" list.

[18:43] <pmichaud> I won't get to it until tonight, tomorrow night, or sunday night.

[18:44] <BrokenRobot> pmichaud: alright. I just didn't want this to slip through the cracks :)

[18:44] <pmichaud> (trailing whitespace)  trailing ws never bothered me much... periodic cleaning would be fine with me.

[18:44] <BrokenRobot> And I tbrowder said they will work with you on it, but now I heard you're boarding a flight :)

[18:44] <BrokenRobot> s/I //;

[18:45] <pmichaud> yeah, I'm about to board a flight.  But I just find out that a long-ago colleague of mine is passing through the same airport at this very moment, so I'm waiting to see if we'll be able to cross paths.  :)

[18:45] <pmichaud> *found out

[18:45] *** andreoss left
[18:46] <BrokenRobot> Trailing ws is annoying the moment you get someone with an editor that auto-strips it... And you get a commit that appears to change many lines even though that's just WS.

[18:46] <pmichaud> we're trying to determine if we're in the same terminal :)

[18:46] <timeless> pmichaud: i once met my sister @jfk

[18:46] <BrokenRobot> And personally, in those cases I'd revert my commit, disable trailing ws trimming feature and recomming (when I'm committing to other projects), so IMO it's nice to get rid of it.

[18:47] <timeless> she was inbound and i was outbound (we effectively traded locations)

[18:47] <timeless> it's pretty neat when it works

[18:48] <pmichaud> I'd say that on around 20% of my air travels I end up unexpectedly crossing paths with someone I know at an airport.

[18:48] <pmichaud> at least for the past 4-5 years.

[18:49] *** FROGGS joined
[18:50] <AlexDaniel> BrokenRobot: sure-sure. The thing is, one month ago I removed trailing whitespace everywhere in the docs. Today there are 19 files with trailing whitespace.

[18:51] <timeless> AlexDaniel: i'd be tempted to have a hook for `new files`

[18:51] <pmichaud> for me, I wouldn't have my editor auto-strip ws, but I'd have a shortcut mapping that does it for me.  :)

[18:52] <AlexDaniel> pmichaud: yep, that's what I do

[18:52] <pmichaud> anyway, I do have to head to the gate.... happy trails

[18:52] <BrokenRobot> \o

[18:53] <moritz> trailing ws isn't a big deal IMHO. Just ignore it.

[18:53] <BrokenRobot> We should open an issue and womble this :P

[18:55] <dalek> doc: 2c1388c | (Josh Soref)++ | htmlify.p6:

[18:55] <dalek> doc: spelling: program

[18:55] <dalek> doc: review: https://github.com/perl6/doc/commit/2c1388c11a

[18:55] * timeless returns to trying to flip pancakes properly

[18:55] <Xliff> Yeek@

[18:56] <Xliff> s/\@/!/

[18:56] <Xliff> https://developer.github.com/v3/activity/events/types/#pushevent

[18:56] <BrokenRobot> timeless: it's all in the wrist action ;)

[18:56] <timeless> BrokenRobot: as timeless, i must say it's all in the timing 

[18:56] <timeless> flip too early and it falls apart

[18:56] <BrokenRobot> lol timeless++

[18:56] <timeless> too late and it sticks

[18:56] <BrokenRobot> That sounds like you need a better frying pan :P

[18:57] <timeless> the range is gas, and i'm still very inexperienced :/

[18:57] <timeless> previous batches were much better

[18:57] <BrokenRobot> :)

[18:57] * timeless hasn't quite gotten the temperature right, nor the batter consistency... this time it didn't even pour properly

[18:57] <[Coke]> AlexDaniel: catching up, all that seemed reasonable.

[18:58] *** webstrand joined
[18:58] <timeless> AlexDaniel: so, on `make clean`

[18:58] <timeless> how opposed are people to me splitting it along the lines i described a few hours ago?

[18:58] <BrokenRobot> I never use it, so I'm all for it :D

[19:00] <[Coke]> timeless: checking.

[19:00] <timeless> https://www.irccloud.com/pastebin/Pth2PCPZ/Makefile.diff

[19:00] <timeless> there are tabs in the real commit fwiw

[19:01] <Xliff> What does everyone have against hard tabs? Is it the tab width thing?

[19:01] <timeless> Xliff: in Makefile-s you need tabs :)

[19:01] <[Coke]> if you split it up so clean does the same thing, but there's also a separate target you can run to not clean images, that's fine with me.

[19:01] <timeless> so i'm just saying "i'm not breaking it"

[19:02] <[Coke]> timeless: pastebin is blocked here.

[19:02] <BrokenRobot> Xliff: yeah, pretty much. 

[19:02] <timeless> [Coke]: seriously?

[19:02] <dalek> doc: 71f3168 | (Josh Soref)++ | Makefile:

[19:02] <dalek> doc: split clean into clean-html clean-images clean-search

[19:02] <dalek> doc: review: https://github.com/perl6/doc/commit/71f3168df8

[19:02] <BrokenRobot> [Coke]: 

[19:02] <BrokenRobot> [Coke]: https://gist.github.com/zoffixznet/f5d071b9e2aefb1b8069f701cd7a2123

[19:02] <Xliff> BrokenRobot, most (modern) GUI editors make that configurable, so that seems like a moot point now.

[19:03] <BrokenRobot> Xliff: yeah, but you aren't always viewing the file in "modern GUI editor"

[19:03] <Xliff> kk

[19:03] * timeless is usually using `cat` or `web browser`

[19:04] <[Coke]> BrokenRobot: I'd recommend 'clean' 'clean-html' and 'clean-other'

[19:04] <[Coke]> but have no real problem with your version

[19:04] <BrokenRobot> timeless: ^

[19:04] <timeless> [Coke]: you can fix it, it's in git :)

[19:04] *** mantovani left
[19:04] <timeless> but really, images and search are quite different

[19:04] <AlexDaniel> timeless: what is “lgs”?

[19:05] <timeless> i've wanted to play w/ search and not have anything to do w/ images

[19:05] <timeless> AlexDaniel: context?

[19:05] <AlexDaniel> ahhh

[19:05] <AlexDaniel> nvm

[19:05] <timeless> you have my attention, what did you see? :o

[19:06] <[Coke]> timeless: if we had a real makefile, we wouldn't really need clean.

[19:06] <[Coke]> (as much)

[19:06] <BrokenRobot> timeless: the paths in your commit

[19:06] <[Coke]> you could change the one thing you wanted, and just regen the 2 or 3 impacted files.

[19:06] <BrokenRobot> timeless: there's html/lgs and html/lg/

[19:06] *** colomon joined
[19:07] <[Coke]> AlexDaniel: maybe "needs fixing" is better as "needs coding"

[19:07] <timeless> BrokenRobot: where where?

[19:07] *** redhands98101 joined
[19:07] * timeless is clearly blind :(

[19:07] <AlexDaniel> [Coke]: then what is “needs implementing”?

[19:08] <timeless> oh

[19:08] * timeless shrugs

[19:08] <timeless> the makefile had them already

[19:08] <timeless> i was only splitting things

[19:08] <timeless> i have no opinion about pre-existing conditions :)

[19:08] <[Coke]> AlexDaniel: I have no idea what the difference is between "needs fixing" and "needs implementing"

[19:09] <[Coke]> (one of the things I was hoping we'd clean up :)

[19:09] *** darutoko left
[19:09] *** redhands98100 left
[19:10] <timeless> oh

[19:10] <AlexDaniel> [Coke]: “needs coding” sounds good.

[19:10] <timeless> i think that's my terminal's pager eating letters

[19:10] <timeless> my terminal is X wide, and those lines are really wide, so the pager did something funny

[19:11] <timeless> sorry :/

[19:11] <AlexDaniel> [Coke]: or is it needed at all? Any issue that is not ｢needs writing｣ is probably ｢needs coding｣

[19:11] <[Coke]> AlexDaniel: true, that's best.

[19:12] <FROGGS> Xliff: I've merges your PR https://github.com/FROGGS/p6-XML-LibXML/pull/1/files as https://github.com/FROGGS/p6-XML-LibXML/commit/0dc9a78a1b99f9d55fb8e9e54a86129adac26a28

[19:12] <yoleaux> 21 Jun 2016 20:38Z <Xliff> FROGGS: Do you want to worry about the errors in t/06elements.t after the merge?

[19:12] *** addison joined
[19:13] <AlexDaniel> you can also use -label:"needs writing" if you don't want to see issues labeled as ｢needs writing｣

[19:13] *** hoelzro|phone left
[19:14] *** hoelzro|phone joined
[19:15] *** setty1 joined
[19:15] <AlexDaniel> ha, am I stupid or what https://github.com/perl6/doc/issues/570 https://github.com/perl6/doc/issues/622

[19:15] <mst> I dunno, the new one's definitely a better ticket

[19:16] <BrokenRobot> lol, yeah, looks like you've learned to use fancy pants github features :P

[19:16] <BrokenRobot> So if I click those checkboxes, they get checked for everyone or just me?

[19:16] <AlexDaniel> I knew about this feature for some time

[19:16] <AlexDaniel> for everyone

[19:17] <BrokenRobot> neast

[19:17] <BrokenRobot> *neat

[19:17] <timeless> AlexDaniel: um, there's no explanation of what being checked mens

[19:17] <timeless> s/mens/means/

[19:17] <FROGGS> you can also but that in markdown files, and it will commit if when you click

[19:18] <BrokenRobot> :o

[19:18] <timeless> is it `should be removed` or `should be added`?

[19:18] <AlexDaniel> timeless: both

[19:18] <AlexDaniel> timeless: means that there is no issue with this term anymore

[19:19] <timeless> could you adjust the description to indicate "checked items have been resolved" ?

[19:20] <timeless> (or something like that)

[19:20] *** araujo_ joined
[19:21] <hoelzro> o/ #perl6

[19:21] <BrokenRobot> timeless: you can make the edit yourself :)

[19:21] <BrokenRobot> One of the features I hate about GitHub

[19:21] * timeless is so used to not being on teams

[19:22] *** mantovani joined
[19:22] <dalek> doc: 9fab598 | (David H. Adler)++ | WANTED:

[19:22] <dalek> doc: Added duckmap and deepmap to WANTED: functions

[19:22] <dalek> doc: review: https://github.com/perl6/doc/commit/9fab598a21

[19:22] <dalek> doc: a701520 | (David H. Adler)++ | / (3 files):

[19:22] <dalek> doc: Merge branch 'master' of https://github.com/perl6/doc

[19:22] <dalek> doc: review: https://github.com/perl6/doc/commit/a7015205d8

[19:23] <AlexDaniel> yeah, everyone please feel welcome to edit my issues/comments/whatever

[19:23] <timeless> BrokenRobot: what i hate is i tried to edit it

[19:23] <timeless> and github ate my edits saying someone else was touching it

[19:23] <AlexDaniel> haha

[19:23] <BrokenRobot> :)

[19:24] <timeless> this is why i don't like `edit` support

[19:24] <timeless> if it isn't google docs (or ether/pirate-pad), it isn't something i want to touch

[19:24] *** araujo left
[19:24] <timeless> the dog-of-a-webservice that eats my homework is not my friend

[19:24] <BrokenRobot> They actually added the "edited" indicator now. Looks like my bitching to GitHub about how the feature could be abused did have some effect \o/

[19:25] <timeless> can i see this history of a thing?

[19:25] <timeless> i can't figure out what happened

[19:25] <dalek> doc: 39a5d14 | (Jan-Olof Hendig)++ | doc/Type/Nil.pod:

[19:25] <dalek> doc: Method new was defined twice

[19:25] <dalek> doc: review: https://github.com/perl6/doc/commit/39a5d14482

[19:26] <BrokenRobot> timeless: edit history? Nope

[19:26] <timeless> ...

[19:27] <BrokenRobot> hey, hosting data isn't cheap :P

[19:27] <BrokenRobot> This ain't Facebook! :P

[19:27] *** kerframil joined
[19:27] *** mantovani left
[19:28] <geekosaur> you might think they'd store issues in git :p

[19:29] <hoelzro> timotimo: it turns out rlwrap makes a pty for its child =/

[19:30] <Xliff> FROGGS, \o/

[19:30] <BrokenRobot> It used to be worse: https://github.com/benkasminbullock/json-create/issues/2

[19:30] <BrokenRobot> There wasn't actually any harrasment, I just pointed out the broken code, but the dude couldn't handle it.

[19:31] <FROGGS> Xliff: :o)

[19:31] <BrokenRobot> Note how it doesn't say "edited" anywhere. He could've well made it look like I was spouting racist/sexist remark and I wouldn't even get a notification from GitHub

[19:31] *** khw joined
[19:31] <Xliff> FROGGS: Like I said in my email, the next step is figuring out why the tests are failing. I feel that should be done before finishing the rest of 06elements.t

[19:32] <FROGGS> yes, makes sense of course

[19:33] <FROGGS> though if you feel like doing other bits first, go ahead

[19:33] *** redhands98100 joined
[19:33] <Xliff> FROGGS, LOL! Maybe a test that's a little less... ambitious, maybe?

[19:33] <Xliff> =o)

[19:33] <Xliff> Still, I do wanna circle back to that.

[19:33] <Xliff> BrokenRobot, yeah. I see your point.

[19:34] *** jjido left
[19:34] <Xliff> What did you actually say, if you don't mind me asking?

[19:35] <BrokenRobot> Xliff: I believe that one was about inconsistent stringification of objects where sometiems it uses the HASH portion and sometimes it dies

[19:35] <timeless> bugzilla has a complete* changelog

[19:35] <timeless> which makes this much better

[19:35] <timeless> you can review things (unless the database admin hacks it)

[19:36] <FROGGS> Xliff: all I wanna say is: optimize for fun :o)

[19:36] *** jjido joined
[19:36] <timeless> (there's an exception which is that keywords can be renamed, in which case you won't see interim names and may have time following their history)

[19:36] *** redhands98101 left
[19:36] <BrokenRobot> Xliff: I basically opened three valid technical issues and wrote a negative review of the module and he didn't like the review (I edited it later to log what happened: http://cpanratings.perl.org/dist/JSON-Create#12286 )

[19:37] <Xliff> FROGGS: Roger! Wilco!

[19:38] *** hoelzro|phone left
[19:39] <BrokenRobot> Oh wow... He even packaged an entire "response" file with his distro *smh* https://metacpan.org/pod/distribution/JSON-Create/review-response.pod

[19:39] <AlexDaniel> BrokenRobot: have you seen opencart discussions?

[19:39] <BrokenRobot> AlexDaniel: don't even know what opencart is :)

[19:40] <AlexDaniel> BrokenRobot: well, it's something that will make you care less about this situation

[19:40] <AlexDaniel> BrokenRobot: because there's probably no way it could get worse…

[19:40] <Xliff> BrokenRobot, Yow! I can see how someone thin skinned would respond in a negative manner to that.

[19:41] <Xliff> Of course, all of these things are valid technical critiques.

[19:41] <AlexDaniel> BrokenRobot: stuff like https://github.com/opencart/opencart/issues/1286

[19:42] <AlexDaniel> BrokenRobot: not sure if you can find the original log

[19:42] <Xliff> If you are going to put out a module, you have to be prepared to respond to those in the most gracious manner possible...because they might be right!

[19:42] <AlexDaniel> BrokenRobot: ah, there it is https://gist.github.com/uppfinnarn/9956023

[19:43] <AlexDaniel> BrokenRobot: “fuck off!” – summarizes opencart development

[19:43] <BrokenRobot> wow :D

[19:45] <Xliff> wooooow

[19:46] <Xliff> Welcome to the Internet. Please realize that your good (or bad) behavior can follow you for a long time.

[19:47] <geekosaur> heh

[19:47] <tony-o> it doesn't need to, though.  you can just change your name

[19:48] * geekosaur remembering an article from last year about teens on facebook discovering the hard way that potential employers do web searches on job applicants

[19:48] <Xliff> tony-o, You need to do more than that... really.

[19:48] <tony-o> Xliff: true, but only if you do more than trash talk 

[19:49] <tony-o> when i interview people i look for them on FB and twitter first

[19:49] <Xliff> You'd be surprised how much hot water trouble trash talk will get you, in certain circles.

[19:49] <tony-o> i found one guy that tweeted to pornstars all day

[19:49] <Xliff> I maintain an account on neither.

[19:50] <tony-o> you're missing nothing

[19:50] <Xliff> Seriously... I've always had this thing about "Twitter".... how a service with the root word "twit" got so popular I just don't know.

[19:50] <Xliff> And no... the bird does not change the meaning.

[19:52] <Xliff> Some rich hacker somewhere is having a huge laugh at everone else's expense.

[19:54] <tony-o> i imagine he isn't the only one

[19:56] <AlexDaniel> “its not an XSS Vulnerability until i confirm it is!” ;)

[19:57] *** mtj__ joined
[19:57] *** mtj__ left
[19:58] *** mtj__ joined
[19:58] *** mtj_ left
[19:59] *** mtj__ left
[19:59] *** jjido left
[20:03] <AlexDaniel> Zoffix: “a turd floating in the ocean” ahahahaha

[20:03] *** mtj_ joined
[20:07] <masak> Xliff: linguistic point of order: "twit" and "twitter" seem to have different etymologies, and do not share a root word.

[20:07] *** ZoffixMobile joined
[20:07] <timeless> masak++

[20:07] <ZoffixMobile> AlexDaniel, where is that from?

[20:07] <AlexDaniel> ZoffixMobile: well, the review claims that you said that

[20:08] <AlexDaniel> I mean, respone to your review

[20:08] *** _mg_ joined
[20:09] *** redhands98101 joined
[20:09] <ZoffixMobile> Ah, right. Yeah, at first I compared realease of yet another shitty json module to a turd in the ocean

[20:10] <Ptolemarch> TimToady: It appears that the answer to my question is: Rather than `map { ... }, 1...99`, I needed `map { ... }, [1...99]`

[20:10] <AlexDaniel> it's very poetic, I love that

[20:10] <ZoffixMobile> :)

[20:10] <AlexDaniel> [Coke]: anyway, so what's the plan?

[20:11] *** pmurias joined
[20:11] *** huggable left
[20:11] <tony-o> ZoffixMobile: where is that ?

[20:12] *** huggable joined
[20:12] *** jevin joined
[20:13] <ZoffixMobile> tony-o, in Perl 5 land. Some guy last year didn't like my review. He now packages a "response" with their distro: https://metacpan.org/pod/distribution/JSON-Create/review-response.pod

[20:13] *** redhands98100 left
[20:15] *** SerialCoder joined
[20:15] *** pmurias_ left
[20:15] <mst> ZoffixMobile: wow, that's almost as much fun as the stuff on e.g. http://p3rl.org/AnyEvent::Impl::POE

[20:16] <mst> AlexDaniel: I remember somebody saying "my code doesn't have a vulnerability until I confirm it does" on #perl

[20:16] <mst> AlexDaniel: somebody wrote a cron job that exploited it so all it displayed was the IRC log where we explained how to fix it

[20:16] <AlexDaniel> :D

[20:17] <tony-o> lol

[20:17] <mst> later, he evaded his ban, apparently for the sole purpose of calling me a faggot

[20:17] *** jjido joined
[20:17] <tony-o> what a winner

[20:17] <mst> I don't think a fresh kickban with a message of "yeah, well, I suck cock better than you write perl" was quite what he expected

[20:17] <ZoffixMobile> rofl

[20:17] <tony-o> ahhaha

[20:17] <mst> (apologies for the language involved in telling that story)

[20:18] <mst> (I'd already hit enter when it occurred to me people might care)

[20:18] <AlexDaniel> psch: you gonna love that: http://www.unicode.org/emoji/charts/emoji-released.html#1f937

[20:21] *** _mg_ left
[20:21] *** jjido left
[20:22] <tony-o> wow ZoffixMobile , Ben Bullock has a thing for you

[20:22] <ZoffixMobile> :)

[20:24] *** kaare__ left
[20:25] <TimToady> Ptolemarch: oh, yeah, ... is looser than comma, while .. is tighter

[20:26] *** jjido joined
[20:26] *** cyphase left
[20:27] *** cognominal left
[20:27] *** kurahaupo left
[20:27] *** abruanese left
[20:27] *** RabidGravy left
[20:27] *** zacts left
[20:27] *** cpage_ left
[20:27] *** b^_^d left
[20:27] *** dylanwh_ left
[20:27] *** lnrdo left
[20:27] *** rork left
[20:27] *** roguelazer left
[20:27] *** freeze left
[20:27] *** dg left
[20:27] *** riatre_ left
[20:27] *** bartolin joined
[20:27] *** diegok joined
[20:27] *** BooK joined
[20:27] *** riatre joined
[20:27] *** DANtheBEASTman joined
[20:27] *** rork joined
[20:27] *** cpage_ joined
[20:27] *** zzzzzzzzz joined
[20:27] *** huf joined
[20:27] *** atta joined
[20:27] *** timotimo joined
[20:27] *** ChoHag joined
[20:27] *** dylanwh_ joined
[20:27] *** rodarmor joined
[20:27] *** baest joined
[20:27] *** cognominal joined
[20:27] *** RabidGravy joined
[20:27] *** lnrdo joined
[20:27] *** ugexe joined
[20:28] *** abruanese joined
[20:28] *** d^_^b joined
[20:28] *** d^_^b left
[20:28] *** d^_^b joined
[20:28] *** gypsydave5 joined
[20:28] *** bisectable joined
[20:28] *** Spot__ joined
[20:29] *** samb1 joined
[20:29] *** zacts joined
[20:29] *** dg joined
[20:30] *** vytas joined
[20:30] *** mrsolo left
[20:30] *** PotatoGim left
[20:30] *** SerialCoder left
[20:30] *** roguelazer joined
[20:31] *** cyphase joined
[20:32] *** mrsolo joined
[20:32] *** girafe joined
[20:32] *** freeze joined
[20:32] *** mantovani joined
[20:33] *** webstrand left
[20:34] *** Lucas_One joined
[20:36] *** tadzik joined
[20:38] *** ggherdov joined
[20:40] *** PotatoGim joined
[20:44] *** ggherdov left
[20:45] *** ggherdov joined
[20:45] *** ZoffixMobile left
[20:45] *** ggherdov left
[20:45] *** torbjorn joined
[20:46] *** jjido left
[20:46] *** timeless joined
[20:48] *** FROGGS left
[20:49] *** ggherdov joined
[20:50] *** adu joined
[21:03] <Xliff> masak: Point taken. However my irrational reasoning still exists. Allow me to reword: How a site with the word "twit" in it got so popular is beyond me.

[21:04] *** acrussell left
[21:04] *** inokenty left
[21:06] *** ocbtec left
[21:10] *** skids left
[21:11] * Zoffix never heard 'twit' used as an insult.

[21:12] <AlexDaniel> yea. That's kinda non-poetic

[21:12] <timotimo> i've heard it before

[21:12] <timotimo> it's quite british, i think

[21:12] <lizmat> as is twat  :-)

[21:12] <timotimo> or am i confusing it with twat?

[21:13] <mst> timotimo: no

[21:13] <mst> Xliff: 'twitter' was a word in its own right beforehand

[21:13] <mst> 'the twittering of the dawn chorus' etc.

[21:13] <timotimo> my ssh connection is super crazzy right now

[21:14] <timotimo> oh! incredible! all three AFZ sessions are running at the same time now!

[21:14] <mst> 'twit' tends to indicate 'a bit dim' whereas twat indicates 'a bit unpleasant'

[21:14] <timotimo> it only took like one full day of deleting individual flaky files and restarting the damn thing from the very beginning

[21:14] <mst> roughly

[21:15] <timotimo> i didn't knw that. thanks!

[21:15] *** mcmillhj left
[21:15] <timotimo> http://hack.p6c.org/~timo/ - for your enjoyment, maybe

[21:16] <timotimo> at some point i ought to minimize some of those crashes and compress them away so that it doesn't use up like 16 gigs of hard drive space :D

[21:16] <Zoffix> timotimo, what's 'fuzzing'?

[21:17] <Xliff> mst: Good to know. Maybe you missed it when I said "irrational" =)

[21:17] <timotimo> Zoffix: it's when you have an input file that you make lots of semi-random changes to in order to get the program that consumes it to crash

[21:17] <Zoffix> :o

[21:17] <mst> Xliff: oh, I didn't, but still

[21:17] <ShimmerFairy> .oO( twit for twat )

[21:18] <timotimo> afl in this case instruments the code to optimize changes so that they maximize the amount of different code paths taken

[21:18] <Xliff> ShimmerFairy++

[21:18] <lizmat> ShimmerFairy  o/

[21:18] <ShimmerFairy> \o

[21:18] <timotimo> here i'm fuzzing .moarvm files based on the nqp stage0

[21:21] *** inokenty joined
[21:22] <mst> ShimmerFairy: that's the 'house of commons' prisoners dilemma strategy clearly

[21:23] <ShimmerFairy> mst: too bad I don't know much of UK politics :) . (though I do need to go find a site that'll report on the referendum, now that I'm reminded)

[21:24] <mst> ShimmerFairy: well, mostly, you insert [politician you dislike] for twit and [politician you dislike even more] for twat and it generalises to most political debates

[21:24] <ShimmerFairy> mst: oh, so like [REDACTED] and [REDACTED TO AVOID FLAME WAR]?  :P

[21:25] *** wamba left
[21:25] *** pmurias left
[21:26] *** adu left
[21:27] <tony-o> is the UK vote over?

[21:27] <tony-o> did they tell the EU to pound sand?

[21:27] *** pmurias joined
[21:28] <ShimmerFairy> tony-o: apparently, polls closed, counting starts now

[21:28] <ShimmerFairy> tony-o: http://www.bbc.com/news/live/uk-politics-36570120

[21:28] <ShimmerFairy> (the page I have up to keep an eye on it)

[21:28] <mst> ShimmerFairy: but 'twit for twat' as a replacement for 'tit for tat' only works in en_UK hence my aiming it at our politicians :)

[21:29] *** grondilu joined
[21:29] <mst> tony-o: I don't think we're going to. guess we'll find out in N hours.

[21:29] <ShimmerFairy> mst: heh :) . At least our House democrats are starting to learn from the British Parliament's How-To Guide On Fun House Sessions™  :P

[21:29] <skaji> Hi, I'm trying examples in https://doc.perl6.org/language/concurrency now.

[21:30] <skaji> react { whenever Supply.interval(1) -> $v { say $v; done() if $v == 4 } }

[21:30] <skaji> works

[21:30] <skaji> But if I change $v == 4 to $v == 0, then it freezes.

[21:31] <skaji> react { whenever Supply.interval(1) -> $v { say $v; done() if $v == 0 } }

[21:31] <skaji> Can someone tell me why? thanks.

[21:31] <Zoffix> skaji, because $v starts with 1?

[21:31] <Zoffix> m: react { whenever Supply.interval(1) -> $v { say $v; done() if $v == 4 } }

[21:31] <camelia> rakudo-moar 9b579d: OUTPUT«0␤1␤2␤3␤4␤»

[21:31] <mst> so it never contains 4

[21:31] <Zoffix> hmmm

[21:31] <mst> hm, no

[21:31] <Zoffix> m: react { whenever Supply.interval(1) -> $v { say $v; done() if $v == 0 } }

[21:31] <Zoffix> weird

[21:31] <camelia> rakudo-moar 9b579d: OUTPUT«(timeout)0␤»

[21:32] *** kid51 joined
[21:32] <Zoffix> skaji, seems a bug

[21:32] <Zoffix> huggable, rakudobug

[21:32] <huggable> Zoffix, To report a bug, email detailed description and any test cases to [email@hidden.address] or use perl6 query on http://rt.perl.org ; see https://github.com/rakudo/rakudo/#reporting-bugs

[21:32] <skaji> Zoffix: wow

[21:32] <timotimo> maybe we require an emit before a done to happen, even though that's not right?

[21:32] <Zoffix> skaji, ^ would file it, please?

[21:32] <tony-o> react { whenever Supply.interval(1) -> $v { say $v.WHAT; done(); } }

[21:32] <Zoffix> timotimo, but doesn't it emit a '0' anyway?

[21:33] <Zoffix> m: react { whenever Supply.interval(1) -> $v { say $v.WHAT; done(); } }

[21:33] <tony-o> m: react { whenever Supply.interval(1) -> $v { say $v.WHAT; done(); } }

[21:33] <tony-o> oh, thanks Zoffix 

[21:33] <Zoffix> :S

[21:33] <tony-o> you irrational JSON hater

[21:33] <Zoffix> :P

[21:33] <camelia> rakudo-moar 9b579d: OUTPUT«(timeout)(Int)␤»

[21:33] <camelia> rakudo-moar 9b579d: OUTPUT«(timeout)(Int)␤»

[21:34] <Ptolemarch> Hmm, this input crashes the Perl6 REPL for me (2016.06; I'll try checking blead):

[21:34] <ShimmerFairy> tony-o: it's not irrational to dislike something without support for comments [at least until very recently, IIRC] :P

[21:35] <Ptolemarch> [1..99].map:{[$_%%5&&'fizz', $_%%3&&'buzz'].grep:Str}

[21:35] <tony-o> ShimmerFairy: was a reference to someone complaining about Zoffix reviewing his module poorly

[21:35] <tony-o> in a poor light, rather

[21:35] <ShimmerFairy> ah, wouldn't know :)

[21:35] <Ptolemarch> [1..99].map:{[$_%%5&&'fizz', $_%%3&&'buzz']}

[21:35] <Ptolemarch> argh, sorry, wrong window (only the last one)

[21:35] *** cognominal left
[21:35] <Zoffix> m: say [1..99].map:{[$_%%5&&'fizz', $_%%3&&'buzz']}

[21:35] <camelia> rakudo-moar 9b579d: OUTPUT«([False False] [False False] [False buzz] [False False] [fizz False] [False buzz] [False False] [False False] [False buzz] [fizz False] [False False] [False buzz] [False False] [False False] [fizz buzz] [False False] [False False] [False buzz] [False False…»

[21:36] <skaji> Zoffix: Okay, I will file it. thank you for your help!

[21:36] *** cpage_ left
[21:36] *** redhands98100 joined
[21:36] <Zoffix> No problem

[21:37] *** redhands98101 left
[21:38] *** redhands98101 joined
[21:38] *** rindolf left
[21:39] <Zoffix> bisect: react { whenever Supply.interval: 1 -> $ { done } }

[21:39] <Zoffix> Oops... AlexDaniel does it have freeze protection?

[21:40] <AlexDaniel> Zoffix: well… :)

[21:40] <Zoffix> heh

[21:40] *** redhands98100 left
[21:41] *** bisectable left
[21:42] <Zoffix> 2016.04 still has that bug

[21:42] *** bisectable joined
[21:43] <AlexDaniel> bisect: exit 42

[21:43] <bisectable> AlexDaniel: on both starting points the exit code is 42 and the output is identical as well

[21:43] <AlexDaniel> bisect: exit 999999999999999

[21:43] <bisectable> AlexDaniel: on both starting points the exit code is 255 and the output is identical as well

[21:44] <AlexDaniel> bisect: exit -99999999

[21:44] <bisectable> AlexDaniel: on both starting points the exit code is 1 and the output is identical as well

[21:44] <AlexDaniel> bisect: exit -999999999

[21:44] <bisectable> AlexDaniel: on both starting points the exit code is 1 and the output is identical as well

[21:45] <AlexDaniel> bisect: exit -999999

[21:45] <bisectable> AlexDaniel: on both starting points the exit code is 193 and the output is identical as well

[21:45] <AlexDaniel> bisect: exit -99999

[21:45] <bisectable> AlexDaniel: on both starting points the exit code is 97 and the output is identical as well

[21:45] <Zoffix> :S

[21:45] <AlexDaniel> yeah :/

[21:45] *** TEttinger joined
[21:49] <Zoffix> Ptolemarch, what's the crash? And are you using Readline/Linenoise/rlwrap?

[21:49] <Zoffix> Can't reproduce on bleed without those installed

[21:49] <Ptolemarch> I have both Readline and Linenoise installed; I'm pretty sure it's using Readline.

[21:50] <timotimo> Zoffix: you're right, it does

[21:51] <timotimo> maybe it gets confused because done() fires before the first emit() goes through?

[21:51] <Zoffix> ¯\_(ツ)_/¯

[21:51] <Ptolemarch> Zoffix: http://pastebin.com/YLGL8Ane

[21:51] <Zoffix> Thanks.

[21:51] <Zoffix> m: [1..99].map:{[$_%%5&&'fizz', $_%%3&&'buzz'].grep:Str}

[21:51] <camelia> rakudo-moar 9b579d: OUTPUT«Cannot resolve caller grep(Array: ); none of these signatures match:␤    ($: Bool:D $t, *%_)␤    ($: Mu $t, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[21:51] *** setty1 left
[21:52] <Zoffix> m: [1..99].map:{[$_%%5&&'fizz', $_%%3&&'buzz'].grep: { $_ ~~ Str } }

[21:52] <camelia> rakudo-moar 9b579d: ( no output )

[21:52] <Zoffix> Is it meant to work with just a type object passed?

[21:52] <Zoffix> bisect: [1..99].map:{[$_%%5&&'fizz', $_%%3&&'buzz'].grep:Str}

[21:52] <bisectable> Zoffix: exit code is 1 on both starting points, bisecting by using the output

[21:52] <bisectable> Zoffix: (2016-06-09) https://github.com/rakudo/rakudo/commit/b6902e5

[21:52] <Ptolemarch> Well, not sure. I don't mean to say the code should *work*.

[21:53] <Ptolemarch> But it's surprising that it crashes the REPL.

[21:53] <woolfy> Perl 5&6 course by Damian Conway ("Functional Programming in Perl") is over and was very interesting (no video or online notes).

[21:54] <Zoffix> Ptolemarch, ah, I see :)

[21:54] <masak> woolfy: ooc, what was the proportion of 5 vs 6?

[21:54] <Zoffix> Ptolemarch, ok, now I can confirm it. I was running your other sample

[21:55] <Zoffix> I know which commit potentially caused this /me tries compiling that

[21:55] <woolfy> masak: 60% about Perl 5, 40% about Perl 6 (because Perl 6 takes less effort to program and to explain)

[21:55] *** grondilu left
[21:55] <woolfy> Have to leave room now...  Bye.

[21:55] *** woolfy left
[21:56] <Zoffix> m: [1..99].map:{[$_%%5&&'fizz', $_%%3&&'buzz'].grep: Str}

[21:56] <camelia> rakudo-moar 9b579d: ( no output )

[21:56] <Zoffix> m: say [1..99].map:{[$_%%5&&'fizz', $_%%3&&'buzz'].grep: Str}

[21:56] <camelia> rakudo-moar 9b579d: OUTPUT«(() () (buzz) () (fizz) (buzz) () () (buzz) (fizz) () (buzz) () () (fizz buzz) () () (buzz) () (fizz) (buzz) () () (buzz) (fizz) () (buzz) () () (fizz buzz) () () (buzz) () (fizz) (buzz) () () (buzz) (fizz) () (buzz) () () (fizz buzz) () () (buzz) () (fizz…»

[21:56] <Ptolemarch> Zoffix: Yeah, basically right now I'm using a kind of FizzBuzz Golf as a way of trying to learn the language.

[21:56] <Zoffix> ^ (that answers my earlier question)

[21:56] <Ptolemarch> So far my best is:

[21:57] <Ptolemarch> m: (($_ %% 5 && 'fizz' || '')~($_ %% 3 && 'buzz' || '') || $_).say for 1..99;

[21:57] <camelia> rakudo-moar 9b579d: OUTPUT«1␤2␤buzz␤4␤fizz␤buzz␤7␤8␤buzz␤fizz␤11␤buzz␤13␤14␤fizzbuzz␤16␤17␤buzz␤19␤fizz␤buzz␤22␤23␤buzz␤fizz␤26␤buzz␤28␤29␤fizzbuzz␤31␤32␤buzz␤34␤fizz␤buzz␤37␤38␤buzz␤fizz␤41␤buzz␤43…»

[21:57] <Zoffix> m: say $_ %% Ⅴ*Ⅲ ?? 'Fizz Buzz' !! $_ %% Ⅲ ?? 'Fizz' !! $_ %% Ⅴ ?? 'Buzz' !! $_ for ^Ⅹ*Ⅹ

[21:57] <camelia> rakudo-moar 9b579d: OUTPUT«Fizz Buzz␤1␤2␤Fizz␤4␤Fizz Buzz␤Fizz␤7␤8␤Fizz␤Fizz Buzz␤11␤Fizz␤13␤14␤Fizz Buzz␤16␤17␤Fizz␤19␤Fizz Buzz␤Fizz␤22␤23␤Fizz␤Fizz Buzz␤26␤Fizz␤28␤29␤Fizz Buzz␤31␤32␤Fizz␤34␤Fizz Buzz␤Fizz␤…»

[21:57] <Zoffix> :P

[21:57] *** lizmat left
[21:57] <Ptolemarch> OMFG

[21:58] <Zoffix> lol

[21:58] * Ptolemarch will have to read this code...

[21:59] <Ptolemarch> Zoffix: I don't suppose you're at YAPC right now?

[21:59] <Zoffix> Nope

[21:59] *** sufrostico left
[21:59] <Zoffix> It's just a nested ternary with unicode roman numerals :)

[21:59] <Ptolemarch> OIC, right. :-)

[21:59] <Ptolemarch> A ternary operator was my first attempt.

[22:01] <skaji> oops i created a ticket in perl5 queue https://rt.perl.org/Ticket/Display.html?id=128469 could someone modify it please?

[22:01] <AlexDaniel> sure

[22:01] <AlexDaniel> nope

[22:01] <AlexDaniel> “Permission Denied” :/

[22:01] <Zoffix> [Coke] can

[22:01] <Zoffix> sorry... unintentional pun :P

[22:02] <AlexDaniel> :D

[22:03] <skaji> AlexDaniel, Zoffix: thanks, [Coke] thanks in advance :)

[22:08] *** sufrostico joined
[22:08] *** Ptolemarch left
[22:15] *** firstdayonthejob joined
[22:19] *** woolfy joined
[22:21] <Zoffix> Yup. My guess was right (about REPL commit)

[22:25] <Zoffix> .tell awwaiid if you have any time, would you be able to take a look into https://rt.perl.org/Ticket/Display.html?id=128470 ? It was introduced by the loopy REPL commit, so maybe it'll be easier for you to fix it than the rest of us. Thanks! https://github.com/rakudo/rakudo/commit/6b935928a52be5819b6d384b1596e0125250a18b

[22:25] <yoleaux> Zoffix: I'll pass your message to awwaiid.

[22:28] *** bjz left
[22:28] *** bjz joined
[22:29] *** bjz left
[22:34] <hoelzro> timotimo: I've been looking at the rlwrap source, and I don't see any indication that it supports custom escape sequences =(

[22:34] <timotimo> hmm

[22:34] <timotimo> ok

[22:34] <hoelzro> I'm wondering if we can just detect if the terminal it's attached to is in a particular mode

[22:34] <hoelzro> but then I wonder about how best to do that - an external module has problems, and I'm loathe to add another nqp:: op

[22:35] <timotimo> mhm

[22:38] <hoelzro> ugh, tcgetattr doesn't change under rlwrap o_O

[22:41] *** skids joined
[22:44] *** bjz joined
[22:45] <hoelzro> hmm, I have a devious alternative

[22:45] <hoelzro> what if instead of detecting rlwrap at the get-go and telling them about it if it's not present...

[22:46] <hoelzro> ...we switch off line buffering on standard input and issue the help after the first time we see something like a control character?

[22:46] <hoelzro> that doesn't sound ideal, but it's a thought

[22:47] <timotimo> oh, because rlwrap eats everything like arrow keys?

[22:49] *** firstdayonthejob left
[22:49] <Xliff> m: sub f { fail "NYI" }; f

[22:49] <camelia> rakudo-moar 9b579d: OUTPUT«NYI␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[22:51] *** bjz left
[22:51] <Xliff> m: my @a = ^3; @b = ^3; say @a == @b

[22:51] <camelia> rakudo-moar 9b579d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '@b' is not declared␤at <tmp>:1␤------> 3my @a = ^3; 7⏏5@b = ^3; say @a == @b␤»

[22:51] <Xliff> m: my @a = ^3; my @b = ^3; say @a == @b

[22:51] <camelia> rakudo-moar 9b579d: OUTPUT«True␤»

[22:51] <Xliff> m: my @a = ^3; my @b = (1, 2, 3); say @a == @b

[22:51] <camelia> rakudo-moar 9b579d: OUTPUT«True␤»

[22:51] <Xliff> m: my @a = ^3; my @b = (1, 2, 3); say @a cmp @b

[22:51] <camelia> rakudo-moar 9b579d: OUTPUT«Less␤»

[22:51] <Xliff> m: my @a = ^3; my @b = (1, 2, 3); say @a eqv @b

[22:51] <camelia> rakudo-moar 9b579d: OUTPUT«False␤»

[22:52] <AlexDaniel>  m: my @a = ^3; my @b = 5..8; say @a == @b

[22:52] <camelia> rakudo-moar 9b579d: OUTPUT«False␤»

[22:52] <AlexDaniel>  m: my @a = ^3; my @b = 5..7; say @a == @b

[22:52] <camelia> rakudo-moar 9b579d: OUTPUT«True␤»

[22:52] * AlexDaniel can't count

[22:52] <Xliff> :p

[22:52] <Xliff> Yeah. I just tested that.

[22:52] <hoelzro> timotimo: yup

[22:55] <hoelzro> I should probably move my REPL wishlist out of that gist, but RT doesn't seem like the right spot for them either

[22:56] *** pmurias_ joined
[23:00] *** pmurias left
[23:03] *** redhands98101 left
[23:03] *** redhands98100 joined
[23:04] <timotimo> that's a tiny bit evil :)

[23:13] *** finanalyst joined
[23:16] *** _mg_ joined
[23:16] *** Celelibi left
[23:19] *** _mg_ left
[23:24] * Xliff kicks git in the unmentionables for making conflicts on mergable files.

[23:25] <Zoffix> Wasn't it you who made the conflict and git was just nice enough to point out? :P

[23:36] *** lmmx joined
[23:38] *** lmmx left
[23:38] *** lmmx joined
[23:39] *** AlexDaniel left
[23:39] *** adu joined
[23:41] *** finanalyst left
[23:43] *** girafe2 joined
[23:45] *** molaf left
[23:46] *** girafe left
[23:48] *** lmmx left
[23:49] *** addison left
[23:57] *** cbk joined
[23:58] *** atweiden left
[23:59] *** addison joined
