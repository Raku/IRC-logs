[00:02] *** cpage_ left
[00:05] *** sufrostico joined
[00:05] *** kid51 joined
[00:05] *** cpage_ joined
[00:07] *** firstdayonthejob joined
[00:15] *** wamba left
[00:30] *** sufrostico left
[00:30] *** BenGoldberg joined
[00:36] *** firstdayonthejob left
[00:36] *** khw left
[00:41] *** vendethiel left
[00:42] *** SCHAAP137 left
[00:44] *** vendethiel joined
[00:45] *** cdg left
[00:47] *** spider-mario left
[00:52] *** khw joined
[00:55] *** jme` left
[01:00] *** jargan joined
[01:00] *** jast left
[01:01] *** yeahnoob joined
[01:12] *** anthk_ left
[01:12] *** Herby_ joined
[01:12] <Herby_> Evening, everyone!

[01:13] <dalek> doc: 5cce96b | skids++ | doc/Type/X/NoDispatcher.pod:

[01:13] <dalek> doc: Correct typo and re-massage sentence.

[01:13] <dalek> doc: review: https://github.com/perl6/doc/commit/5cce96bf23

[01:13] <dalek> doc: dfad2e7 | skids++ | doc/Language/modules-extra.pod:

[01:13] <dalek> doc: Spelling, more compact index title, add some modules

[01:13] <dalek> doc: review: https://github.com/perl6/doc/commit/dfad2e71b1

[01:13] <Herby_> m: <a b c>.permutations.say

[01:13] <camelia> rakudo-moar 85d20f: OUTPUT«((a b c) (a c b) (b a c) (b c a) (c a b) (c b a))␤»

[01:13] <Herby_> \o

[01:14] <Herby_> m: .say for permutations <a b c>

[01:14] <camelia> rakudo-moar 85d20f: OUTPUT«This type cannot unbox to a native integer␤  in block <unit> at /tmp/oGEfh9wyVS line 1␤␤»

[01:14] <gfldex> m: say 'Hi Herby_'.comb.permutations

[01:14] <camelia> rakudo-moar 85d20f: OUTPUT«((H i   H e r b y _) (H i   H e r b _ y) (H i   H e r y b _) (H i   H e r y _ b) (H i   H e r _ b y) (H i   H e r _ y b) (H i   H e b r y _) (H i   H e b r _ y) (H i   H e b y r _) (H i   H e b y _ r) (H i   H e b _ r y) (H i   H e b _ y r) (H i   H e y r …»

[01:14] <Herby_> :)

[01:15] <Herby_> Thinking about creating a small "Scrabble dictionary" look-up tool

[01:16] <Herby_> in perl 6.  The user can enter up to 7 characters, and the tool will tell them which ones are words

[01:16] <Herby_> and then perhaps build off that

[01:16] <Herby_> exciting stuff, I know

[01:19] *** lokien_ left
[01:26] *** Actualeyes joined
[01:26] *** vendethiel left
[01:30] *** vendethiel joined
[01:42] *** travis-ci joined
[01:42] <travis-ci> Doc build passed. skids 'Spelling, more compact index title, add some modules'

[01:42] <travis-ci> https://travis-ci.org/perl6/doc/builds/105056619 https://github.com/perl6/doc/compare/f52538b5fae4...dfad2e71b12b

[01:42] *** travis-ci left
[02:01] *** mattp_ joined
[02:05] *** xpen joined
[02:07] *** maslan left
[02:15] *** addison left
[02:15] *** vendethiel left
[02:16] *** leont left
[02:17] <ZoffixWin> Herby_, seems inefficient :)

[02:19] <Herby_> Do tell!

[02:20] *** llfourn joined
[02:21] <Herby_> inefficient == awesome?

[02:22] <ZoffixWin> Herby_, if using dynamite to hammer a nail is awesome... :)

[02:22] *** Upasaka left
[02:22] <ZoffixWin> Wait... That does sound awesome!

[02:22] <Herby_> yeah it does!

[02:22] <llfourn> is there any way to test that something doesn't warn?

[02:23] <llfourn> (or does)

[02:23] <ZoffixWin> llfourn, hm, there's Test::Output that can capture STDERR.. Other than that *shrug*

[02:24] <llfourn> cool thanks.

[02:26] *** vendethiel joined
[02:27] <ZoffixWin> Herby_, hm, here's one I started going with, but then realized it only solves for exact matches :) perl6 -e 'my %words = "/usr/share/dict/american-english".IO.words.map: { .fc.comb.sort.join("") =>  $_ }; loop { say "Enter your scrabble letters: "; my $letters = [~] $*IN.get.fc.comb.sort; $letters eq $_ and say %words{$_} for %words.keys }'

[02:27] <ZoffixWin> m: say 'food'.comb.permutations

[02:27] <camelia> rakudo-moar 85d20f: OUTPUT«((f o o d) (f o d o) (f o o d) (f o d o) (f d o o) (f d o o) (o f o d) (o f d o) (o o f d) (o o d f) (o d f o) (o d o f) (o f o d) (o f d o) (o o f d) (o o d f) (o d f o) (o d o f) (d f o o) (d f o o) (d o f o) (d o o f) (d o f o) (d o o f))␤»

[02:27] <ZoffixWin> m: say 'food '.comb.permutations

[02:27] <camelia> rakudo-moar 85d20f: OUTPUT«((f o o d  ) (f o o   d) (f o d o  ) (f o d   o) (f o   o d) (f o   d o) (f o o d  ) (f o o   d) (f o d o  ) (f o d   o) (f o   o d) (f o   d o) (f d o o  ) (f d o   o) (f d o o  ) (f d o   o) (f d   o o) (f d   o o) (f   o o d) (f   o d o) (f   o o d) (f …»

[02:27] <ZoffixWin> m: say 'cat '.comb.permutations

[02:27] <camelia> rakudo-moar 85d20f: OUTPUT«((c a t  ) (c a   t) (c t a  ) (c t   a) (c   a t) (c   t a) (a c t  ) (a c   t) (a t c  ) (a t   c) (a   c t) (a   t c) (t c a  ) (t c   a) (t a c  ) (t a   c) (t   c a) (t   a c) (  c a t) (  c t a) (  a c t) (  a t c) (  t c a) (  t a c))␤»

[02:28] <Herby_> nice! I wish programming came that easy to me.

[02:28] <Herby_> I was also trying to think if there was a way to take advance of async/parallel work

[02:28] <Herby_> as an added bonus

[02:28] <Herby_> but i guess you can only really check one word at a time?

[02:29] <ZoffixWin> Ah! True

[02:29] <ZoffixWin> Nah, you can check more than one :)

[02:29] <ZoffixWin> Lemme try a method with permutations

[02:30] <ZoffixWin> Also, I've been coding for the last 15 years... So programming coming to me wasn't THAT easy :P

[02:30] <Herby_> hah yeah you have a point

[02:31] *** Upasaka joined
[02:33] <ZoffixWin> m: my @letters = 'cta'.comb.permutations».join: ""; my @words = <cat mat fat>; .comb.permutations».join("") ⊆ @letters and say "Found word!: $_" for @words

[02:33] <camelia> rakudo-moar 85d20f: OUTPUT«Found word!: cat␤»

[02:33] <ZoffixWin> m: my @letters = 'mata'.comb.permutations».join: ""; my @words = <cat mat fat>; .comb.permutations».join("") ⊆ @letters and say "Found word!: $_" for @words

[02:33] <camelia> rakudo-moar 85d20f: ( no output )

[02:33] <ZoffixWin> :(

[02:33] *** addison_ joined
[02:33] <ZoffixWin> ah, right

[02:34] <ZoffixWin> Meh. Need to go to bed :)

[02:34] <Herby_> sleep is for the weak!

[02:34] <ZoffixWin> but adding .hyper: :batch(@words/4) would make it parallel :)

[02:34] <ZoffixWin> That's what I said LAST night and I was cursing myself this morning :)

[02:36] <Herby_> I'm curious what the benchmark difference would be on 7 letters: parallel vs. non-parallel

[02:36] <Herby_> I wrote something similar in Python as my first project a long time ago. very ugly algorithm. took 2.5 minutes to run for 7 letters :)

[02:37] <ZoffixWin> Don't hold your breath ATM. I think hyper/race are a tad broken: https://rt.perl.org/Ticket/Display.html?id=127365 and https://rt.perl.org/Ticket/Display.html?id=127364

[02:38] *** jack_rabbit joined
[02:38] <Herby_> ahh

[02:38] *** addison_ left
[02:40] *** addison joined
[02:40] <Herby_> could you do something with promises?

[02:40] <Herby_> have one promise run one permutation, and so on?

[02:40] <Herby_> *i have an extremely weak grasp on async/parallel stuff

[02:41] <Herby_> well, nm. that wouldnt be efficient. you'd have 2k+ promises for 7 letters

[02:41] <Herby_> 6k plus i mean

[02:45] *** addison left
[02:45] *** DrPete joined
[02:46] *** vendethiel left
[02:46] *** addison joined
[02:48] *** DrPete_ left
[02:51] *** addison left
[02:52] *** kalkin-_ joined
[02:55] *** nanis left
[02:56] *** kalkin-__ left
[02:58] *** yqt left
[03:03] <ZoffixWin> m: my @letters = 'cat'.comb.combinations».sort».join; my %words = "cat\nmat\nfat".words.map: { ([~] .comb.sort) => $_ }; $_ ∈ @letters and say "Found word!: %words{$_}" for %words.keys

[03:03] <camelia> rakudo-moar 85d20f: OUTPUT«Found word!: cat␤»

[03:03] <ZoffixWin> m: my @letters = 'mata'.comb.combinations».sort».join; my %words = "cat\nmat\nfat".words.map: { ([~] .comb.sort) => $_ }; $_ ∈ @letters and say "Found word!: %words{$_}" for %words.keys

[03:03] <camelia> rakudo-moar 85d20f: OUTPUT«Found word!: mat␤»

[03:03] <ZoffixWin> m: my @letters = 'almdasmdasfata'.comb.combinations».sort».join; my %words = "cat\nmat\nfat".words.map: { ([~] .comb.sort) => $_ }; $_ ∈ @letters and say "Found word!: %words{$_}" for %words.keys

[03:03] <camelia> rakudo-moar 85d20f: OUTPUT«Found word!: mat␤Found word!: fat␤»

[03:04] <ZoffixWin> NOW I can sleep :D Herby_ ^

[03:04] <Herby_> sleep tight, sweet prince

[03:04] <Herby_> i'm gonna have to spend some time breaking your code down to see if i can understand it :)

[03:05] <ZoffixWin> m: my @letters = 'mata'.comb.combinations».sort».join; my %words = "cat\nmat\nfat".words.map: { .comb.sort.join => $_ }; $_ ∈ @letters and say "Found word!: %words{$_}" for %words.keys

[03:05] <camelia> rakudo-moar 85d20f: OUTPUT«Found word!: mat␤»

[03:06] <ZoffixWin> oh, needs an .fc to compare properly

[03:06] <ZoffixWin> m: my @letters = 'mata'.fc.comb.combinations».sort».join; my %words = "cat\nmat\nfat".words.map: { .fc.comb.sort.join => $_ }; $_ ∈ @letters and say "Found word!: %words{$_}" for %words.keys

[03:06] <camelia> rakudo-moar 85d20f: OUTPUT«Found word!: mat␤»

[03:06] <ggoebel14> m: gather

[03:06] <ggoebel14>    reduce {    ($^a).flat.[*-1] eq $^b

[03:06] <ggoebel14>             ?? (($^a).flat, $^b).flat.list

[03:06] <ggoebel14>             !! ( take $^a;  $^b ).[*-1]    },

[03:06] <ggoebel14>           (<a a a b b c>.flat, 0).flat.list

[03:06] <camelia> rakudo-moar 85d20f: OUTPUT«5===SORRY!5===␤Whitespace required after keyword 'gather'␤at /tmp/TCG0hSkBRQ:1␤------> 3gather7⏏5<EOL>␤Missing block or statement␤at /tmp/TCG0hSkBRQ:1␤------> 3gather7⏏5<EOL>␤    expecting any of:␤        term␤␤»

[03:07] <ZoffixWin> ggoebel14, try pastebinning on https://gist.github.com/ and then giving Camelia the URL

[03:08] <ggoebel14> https://gist.github.com/ggoebel/0734dcbf491c0d135819

[03:08] <ZoffixWin> m: https://gist.github.com/ggoebel/0734dcbf491c0d135819

[03:08] <ggoebel14> m: https://gist.github.com/ggoebel/0734dcbf491c0d135819

[03:08] <camelia> rakudo-moar 85d20f: ( no output )

[03:09] <Herby_> wow, didn't know camelia could do that

[03:09] <Herby_> pull from a URL

[03:10] <AlexDaniel> you can also use bitbucket snippets or gitlab snippets

[03:10] * AlexDaniel is against monopoly :)

[03:10] * skids1 wonders how 'perl6 -MPanda::Builder -e 'Panda::Builder.build($*CWD)' works in other modules' travis.yml

[03:10] <ZoffixWin> Herby_, hm, I found a way to make that code about 1000 times faster lol :)

[03:11] <Herby_> do tell!

[03:11] <ZoffixWin> m: my $letters = set 'mata'.fc.comb.combinations».sort».join; my %words = "cat\nmat\nfat".words.map: { .fc.comb.sort.join => $_ }; $_ ∈ $letters and say "Found word!: %words{$_}" for %words.keys

[03:11] <camelia> rakudo-moar 85d20f: OUTPUT«Found word!: mat␤»

[03:11] <ZoffixWin> This way it doesn't coerse an array into a set for each run

[03:11] <ZoffixWin> (I suppose using @letters.first: 'word' works too, but that's not fancy at all :))

[03:11] <AlexDaniel> m: https://gitlab.com/snippets/14172

[03:11] <camelia> rakudo-moar 85d20f: OUTPUT«((a a a) (b b) c)␤»

[03:11] <ggoebel14> m: https://gist.github.com/ggoebel/7fd823f020d09d623c58

[03:11] <camelia> rakudo-moar 85d20f: OUTPUT«((a a a) (b b) c)␤»

[03:12] <Herby_> a 1000% speed improvement is a pretty good optimization! :)

[03:12] <AlexDaniel> (unless it was very very very slow)

[03:13] <ZoffixWin> Well, it was just an eyeball :) with 17 found words: array method ran for about a minute and printed 4 of them, before I killed it; while set method printed them all out almost instantly :)

[03:13] <ggoebel14> That is a perl 6 version of a solution to problem 9 from https://sites.google.com/site/prologsite/prolog-problems

[03:13] *** kid51 left
[03:13] <zostay> .tell hoelzro it crashes every time for me, i've tested it on OS X and Linux

[03:13] <yoleaux> 26 Jan 2016 23:54Z <hoelzro> zostay: I can't reproduce the issue on my box (64-bit Arch Linux); let me know when you're around so we can figure this out =)

[03:13] <yoleaux> zostay: I'll pass your message to hoelzro.

[03:13] <zostay> blast

[03:13] <ggoebel14> I'm trying to do them as one-liners in the perl 6 REPL

[03:14] <ZoffixWin> m: 'dfstwetfgcxbfgsdfgfsdgdf'.comb.combinations.elems.say

[03:14] <ZoffixWin> 0.o

[03:14] <hoelzro> zostay: what version of Moar/Rakudo are you on?

[03:14] <yoleaux> 03:13Z <zostay> hoelzro: it crashes every time for me, i've tested it on OS X and Linux

[03:14] <camelia> rakudo-moar 85d20f: OUTPUT«(timeout)»

[03:14] <ZoffixWin> m: 'dfstwetfgcxbfgsdf'.comb.combinations.elems.say

[03:14] <hoelzro> also, what does ulimit -a report for you?

[03:15] <camelia> rakudo-moar 85d20f: OUTPUT«(timeout)»

[03:15] <Herby_> lol zoffix

[03:15] *** vendethiel joined
[03:15] <Herby_> giving Camelia a heartattack

[03:15] <ggoebel14> wondering if all those .flats and .lists are necessary... or if there is some other way

[03:15] <ZoffixWin> Yeah, it only works for very few letters, unless you have a meaty box :P

[03:15] <AlexDaniel> ggoebel14: there is definitely some other way

[03:15] <Herby_> try 7

[03:15] <ZoffixWin> ggoebel14, my wild guess would be there's definitely a better way :)

[03:16] <Herby_> m: 'eiakfke'.comb.combinations.elems.say

[03:16] <camelia> rakudo-moar 85d20f: OUTPUT«128␤»

[03:16] <Herby_> m: 'eiakfkke'.comb.combinations.elems.say

[03:16] <camelia> rakudo-moar 85d20f: OUTPUT«256␤»

[03:16] <Herby_> m: 'eiakfzkke'.comb.combinations.elems.say

[03:16] <camelia> rakudo-moar 85d20f: OUTPUT«512␤»

[03:17] <ZoffixWin> ggoebel14, which one is "problem 9" exactly?

[03:17] <zostay> hoelzro: i generally build a fresh rakudobrew before each try, last try was a week or so ago... building again to retry now

[03:17] <ggoebel14> https://sites.google.com/site/prologsite/prolog-problems/1

[03:17] <hoelzro> zostay: ok; I just tried with today's.  let me know if it still breaks for you

[03:18] <zostay> ulimit -a: https://gist.github.com/zostay/21c91b7beefcc1b62aa2

[03:18] <hoelzro> zostay: which box is that on?

[03:18] <hoelzro> OS X or Linux?

[03:19] <ZoffixWin> m: say bag(<a a a a b c c a a d e e e e>).map: { .value == 1 ?? .key !! [.key xx .value] };

[03:19] <camelia> rakudo-moar 85d20f: OUTPUT«([a a a a a a] [c c] b [e e e e] d)␤»

[03:19] <ZoffixWin> ggoebel14, ^

[03:19] <zostay> just happened with a fresh build on OS X... bringing up my linux vm to try that next

[03:19] <ggoebel14> that doesn't work

[03:20] <ZoffixWin> Why not?

[03:20] <ggoebel14> you're only supposed to pack consecutive letters

[03:20] <ZoffixWin> Ah

[03:20] <hoelzro> zostay: which distro is your linux VM?

[03:20] <hoelzro> and I take it these machines are both 64-bit?

[03:20] <ZoffixWin> right

[03:21] <ggoebel14> m: say gather reduce { ($^a).flat.[*-1] eq $^b ?? (($^a).flat, $^b).flat.list !! ( take $^a;  $^b ).[*-1] }, (<a a a a b c c a a d e e e e>.flat, 0).flat.list

[03:21] <camelia> rakudo-moar 85d20f: OUTPUT«((a a a a) b (c c) (a a) d (e e e e))␤»

[03:22] *** colomon left
[03:22] <ZoffixWin> m: say <a a a a b c c a a d e e e e>.join.comb(/(.)$0*/).map: { .chars == 1 ?? $_ !! [.comb]}

[03:22] <camelia> rakudo-moar 85d20f: OUTPUT«([a a a a] b [c c] [a a] d [e e e e])␤»

[03:22] *** Calibellus joined
[03:22] <ZoffixWin> ggoebel14, that looks right :D

[03:23] <ZoffixWin> Fun problems on that list. 

[03:23] <ggoebel14> nice

[03:23] <ZoffixWin> Gonna play around with them tomorrow :) ggoebel14++ thanks for showing that page

[03:23] <AlexDaniel> ZoffixWin: but that works with strings and not with list elements

[03:23] * sortiz Wanting the expression "list context" to be eradicated from the perl6 documentation.

[03:24] <ZoffixWin> AlexDaniel, what are "list elements"?

[03:24] <AlexDaniel> ZoffixWin: what if you have “aa”

[03:24] <AlexDaniel> ZoffixWin: <a aa aa aa b>

[03:24] <ZoffixWin> AlexDaniel, ahh :) True. I'm taking the example too literally :)

[03:26] *** colomon joined
[03:26] <zostay> yes, both 64, the linux distro is Mint Mate running in virtualbox on my macbook

[03:26] <zostay> hoelzro: ^^^

[03:28] *** cpage_ left
[03:28] <hoelzro> ok

[03:29] *** anthk_ joined
[03:32] *** bowtie left
[03:33] *** bowtie joined
[03:36] *** vendethiel left
[03:37] *** bowtie is now known as Guest36732

[03:38] <AlexDaniel> aaahh!

[03:38] <AlexDaniel> I have an idea!

[03:39] *** vendethiel joined
[03:39] *** noganex joined
[03:42] *** noganex_ left
[03:44] <AlexDaniel> so the question is: If I have a list like <a a a b b c> how can I produce <3 2 1> from that?

[03:44] <AlexDaniel> that is, how many times the element was repeated

[03:44] <ZoffixWin> <a a a b b c a a> would produce <3 2 1 2>, with the "c" NOT an array

[03:45] <AlexDaniel> well, my idea is that I can .squish the list. Then if there's any easy way to get the counts then I can just Z** it and that's it

[03:46] <ZoffixWin> Oh

[03:46] *** BenGoldberg left
[03:46] <zostay> hoelzro: also happens on linux with the current rakudobrew build

[03:46] <AlexDaniel> if only there was an easy way to get the counts

[03:46] <hoelzro> grrr

[03:46] <hoelzro> I'll try to build a rakudobrew, then

[03:47] <ZoffixWin> AlexDaniel, there is! And you're the same person who said "Aha!" last time I showed it :)

[03:47] <ZoffixWin> m: my $in = <aa aa a a b c c a a>; say $in.squish Z bag |$in;

[03:47] <camelia> rakudo-moar 85d20f: OUTPUT«((aa a => 4) (a c => 2) (b b => 1) (c aa => 2))␤»

[03:47] <ZoffixWin> :S

[03:47] <ZoffixWin> m: my $in = <aa aa a a b c c a a>; say $in.squish Z (bag |$in);

[03:47] <camelia> rakudo-moar 85d20f: OUTPUT«((aa a => 4) (a c => 2) (b b => 1) (c aa => 2))␤»

[03:47] <ZoffixWin> Well, something along those lines lol :D

[03:47] <AlexDaniel> ZoffixWin: yes but it does not work this way

[03:47] <TimToady> .tell b2gills definitely looks like a bug to me

[03:47] <yoleaux> 26 Jan 2016 20:10Z <b2gills> TimToady: Should the right alternation take precedence? ｢say 'abc' ~~ / <:L> | <:L><:L><:L>+ /｣

[03:47] <yoleaux> TimToady: I'll pass your message to b2gills.

[03:47] <ZoffixWin> m: say bag <aa aa a a b c c a a>;

[03:47] <camelia> rakudo-moar 85d20f: OUTPUT«bag(a(4), c(2), b, aa(2))␤»

[03:48] <ZoffixWin> ah

[03:48] <AlexDaniel> <a a a b a> is <3 1 1> and NOT <4 1>

[03:48] <zostay> hoelzro: here's the ulimit -a for that too in case it matters: https://gist.github.com/zostay/a35124cd22f94e03437c

[03:48] <ZoffixWin> AlexDaniel, right :)

[03:48] <ZoffixWin> I should be sleeping right now

[03:48] <ZoffixWin> \o

[03:48] <hoelzro> zostay: thanks for the input; at this point, there's probably a small difference in how I build Moar vs how rakudobrew does

[03:48] <hoelzro> night ZoffixWin 

[03:49] <hoelzro> I'll try on rakudobrew, see what happens

[03:49] <AlexDaniel> ggoebel14: such an interesting task

[03:50] <TEttinger> (map count (partition-by identity '(a a a b b c)))

[03:50] <TEttinger> whoops

[03:52] <AlexDaniel> aaaah I have an idea

[03:52] <zostay> thanks hoelzro, you rock and Godspeed

[03:59] <hoelzro> shoot

[03:59] <hoelzro> zostay: still passing o_O

[03:59] <hoelzro> I can fire up a Mint box tomorrow and see if that does it

[04:01] *** vendethiel left
[04:02] <zostay> bizarre... 

[04:02] <AlexDaniel> YEAH BABY

[04:02] <zostay> are you running it with prove or directly with perl? if i run prove, it appears to work, but if i run it as perl6 -Ilib t/http-1.0.t, it aborts

[04:03] <AlexDaniel> ggoebel14: one second :D

[04:03] *** vendethiel joined
[04:06] *** zacts left
[04:10] <AlexDaniel> m: my $x = 1; my @l = <a a a a b b c d d>; say (gather for @l.rotor(2 => -1, :partial) { .[0] cmp (.[1] // ()) ?? (take .[0] xx $x; $x = 1) !! $x++ })

[04:10] <camelia> rakudo-moar 85d20f: OUTPUT«((a a a a) (b b) (c) (d d))␤»

[04:10] <AlexDaniel> ggoebel14: nah, well… that's probably the best thing I can come up with

[04:10] <AlexDaniel> ggoebel14: but maybe it will give you some ideas

[04:11] <AlexDaniel> the trick here is the following

[04:11] <AlexDaniel> m: my @l = <a a a a b b c d d>; say @l.rotor(2 => -1, :partial)

[04:11] <camelia> rakudo-moar 85d20f: OUTPUT«((a a) (a a) (a a) (a b) (b b) (b c) (c d) (d d) (d))␤»

[04:11] <AlexDaniel> ggoebel14: so we are doubling every element. This helps to see ahead

[04:16] *** zacts joined
[04:20] <ggoebel14> AlexDaniel: interesting

[04:20] <AlexDaniel> m: my $x = 1; my @l^C <a a a a b b c d d>; say @l.rotor(2 => -1, :partial).map({ .[0] cmp (.[1] // () ) ?? $_ !! 1 })

[04:20] <camelia> rakudo-moar 85d20f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/9o4hpenR6J␤Undeclared name:␤    C used at line 1␤␤»

[04:21] <AlexDaniel> what?

[04:21] <AlexDaniel> ah whoops

[04:21] <AlexDaniel> m: my $x = 1; my @l = <a a a a b b c d d>; say @l.rotor(2 => -1, :partial).map({ .[0] cmp (.[1] // () ) ?? $_ !! 1 })

[04:21] <camelia> rakudo-moar 85d20f: OUTPUT«(1 1 1 (a b) 1 (b c) (c d) 1 (d))␤»

[04:21] <AlexDaniel> ggoebel14: interestingly the answer is right there…

[04:21] <AlexDaniel> ggoebel14: perhaps you can manage to get it with .reduce

[04:22] <AlexDaniel> m: my $x = 1; my @l = <a a a a b b c d d>; say @l.rotor(2 => -1, :partial).map({ .[0] cmp (.[1] // () ) ?? $_ !! 1 }).reverse

[04:22] <camelia> rakudo-moar 85d20f: OUTPUT«((d) 1 (c d) (b c) 1 (a b) 1 1 1)␤»

[04:22] <AlexDaniel> ggoebel14: maybe this will help

[04:23] <ggoebel14> AlexDaniel: I did manage to solve it with reduce... but I had to pad an extra element on the list... and make excessive use of .flat and .list

[04:23] <ggoebel14> m: say gather reduce { ($^a).flat.[*-1] eq $^b ?? (($^a).flat, $^b).flat.list !! ( take $^a;  $^b ).[*-1] }, (<a a a a b c c a a d e e e e>.flat, 0).flat.list

[04:23] <camelia> rakudo-moar 85d20f: OUTPUT«((a a a a) b (c c) (a a) d (e e e e))␤»

[04:24] <AlexDaniel> ggoebel14: but it's all gather-take, what's the point of reduce there?

[04:24] <ggoebel14> AlexDaniel: hmm... going to try to wrap my head around your use of rotor

[04:25] <AlexDaniel> m: say gather say reduce { ($^a).flat.[*-1] eq $^b ?? (($^a).flat, $^b).flat.list !! ( take $^a;  $^b ).[*-1] }, (<a a a a b c c a a d e e e e>.flat, 0).flat.list

[04:25] <camelia> rakudo-moar 85d20f: OUTPUT«0␤((a a a a) b (c c) (a a) d (e e e e))␤»

[04:25] *** cpage_ joined
[04:26] <ggoebel14> AlexDaniel: it either builds up the consecutive duplicate list or takes it and starts the next

[04:26] *** vendethiel left
[04:27] *** psy_ left
[04:27] <ggoebel14> AlexDaniel: pretty much the same as what you're trying to do with rotor...

[04:27] <AlexDaniel> :)

[04:27] *** vendethiel joined
[04:28] <skids1> is the point of this excercise to avoid state variables?

[04:29] <AlexDaniel> skids1: not really, you can use a state variable if it results in a really short code :)

[04:36] <AlexDaniel> skids1: try it, maybe you'll do better. But any time I tried to introduce a variable the code just ballooned in size

[04:37] <ggoebel14> skids1: the point is to pack consecutive duplicate values in a list by converting <a a a a b c c a a d e e e e> into ((a a a a) b (c c) (a a) d (e e e e))

[04:38] <skids1> Is that the point, or counting?

[04:38] <AlexDaniel> skids1: that's the point. But if you can count it then the problem is solved

[04:38] <skids1> ok I thought the packin was the "simpler problem" counting got reduced to.

[04:38] <skids1> not the other way around

[04:38] <AlexDaniel> :))

[04:39] <AlexDaniel> well

[04:39] <AlexDaniel> m: say <a a a a b c c>.squish Zxx <4 1 2>

[04:39] <camelia> rakudo-moar 85d20f: OUTPUT«((a a a a) (b) (c c))␤»

[04:39] <ggoebel14> my solution manages to pack without counting...

[04:40] <hoelzro> zostay: perl6 -Ilib t/http-1.0.t

[04:40] <AlexDaniel> ggoebel14: yeah, but let's agree that it's not the prettiest solution out there :)

[04:40] <ggoebel14> yep

[04:41] <AlexDaniel> .squish Zxx is really, really short, if only we could get these numbers…

[04:41] <AlexDaniel> but sure there are other approaches

[04:41] <AlexDaniel> today is another day when I wish that .squish was able to produce pairs

[04:43] <AlexDaniel> “good job, you squished it! Now tell me what happened”

[04:43] <skids1> m: say (<a a a>,"b",<a a>).map: {slip($_[0], $_.elems)}

[04:43] <camelia> rakudo-moar 85d20f: OUTPUT«(a 3 b 1 a 2)␤»

[04:44] <AlexDaniel> skids1: are you trying to make it work other way round? Just use ｢flat｣! :)

[04:44] <AlexDaniel> skids1: problem number 9

[04:44] <AlexDaniel> skids1: https://sites.google.com/site/prologsite/prolog-problems/1

[04:45] <skids1> No just demonstrating the conversion from lol to counts is also simple.

[04:45] * hoelzro goes off to bed

[04:46] <skids1> Ah, ok.  so you do want single element lists.

[04:46] <AlexDaniel> m: my @l= <a a a>, <b>, <a a>; say @l.List.flat.squish Z @l».elems

[04:46] <camelia> rakudo-moar 85d20f: OUTPUT«((a 3) (b 1) (a 2))␤»

[04:47] <AlexDaniel> yeah it's simple indeed

[04:47] * AlexDaniel loves to zip stuff around

[04:49] *** vendethiel left
[04:53] *** AlexDaniel left
[04:55] <skids1> I'm too efficiency oriented to have considered that way.

[04:55] *** Sgeo_ left
[04:57] *** revhippie left
[05:00] <ggoebel14> hmm... if I use slips, I can get rid of all the .flats and .lists

[05:01] <ggoebel14> m: say gather reduce { (|$^a).[*-1] eq $^b ?? (|$^a, $^b) !! ( take $^a;  $^b ).[*-1] }, |<a a a a b c c a a d e e e e>, 0

[05:01] <camelia> rakudo-moar 85d20f: OUTPUT«((a a a a) b (c c) (a a) d (e e e e))␤»

[05:06] *** nige1 joined
[05:10] *** Herby_ left
[05:11] *** Sgeo joined
[05:12] *** Sgeo_ joined
[05:17] *** Sgeo left
[05:18] *** vendethiel joined
[05:29] *** khw left
[05:31] *** samb1 left
[05:31] *** sortiz left
[05:41] *** vendethiel left
[05:42] *** samb1 joined
[05:43] <skids1> m: say (|<a a a a b c c a a d e e e e>,()).map: { state $l = |(); my $m = $l[0] eqv $^v; $l = (|$l,$v) if $m; LEAVE { $l = ($v,) unless $m };  $l.list if not $m } # I could squeeze more chars out, but why bother

[05:43] <camelia> rakudo-moar 85d20f: OUTPUT«((a a a a) (b) (c c) (a a) (d) (e e e e))␤»

[05:44] *** Cabanossi left
[05:48] *** Cabanossi joined
[05:50] *** vendethiel joined
[05:52] <skids1> interestingly...

[05:52] <skids1> m: say (1..2).map: { 1 if 0; LEAVE { }; }

[05:52] <camelia> rakudo-moar 85d20f: OUTPUT«WARNINGS for /tmp/03uhXYjjjC:␤Useless use of constant integer 1 in sink context (line 1)␤(Nil Nil)␤»

[05:52] <skids1> m: say (1..2).map: { LEAVE { };  1 if 0; }

[05:52] <camelia> rakudo-moar 85d20f: OUTPUT«()␤»

[05:54] *** Felipe joined
[05:54] <Felipe> Hello all.

[05:54] <skids1> o/

[05:54] <Felipe> I’m having a first look at perl 6 and wondering what the point of the $! variable is, since there is now real try/catch … ?

[05:55] *** mattp_ left
[06:02] *** _Gustaf_ joined
[06:05] *** Calibellus left
[06:08] *** Felipe left
[06:08] *** Felipe joined
[06:08] *** Felipe left
[06:09] <skids1> m: try { die 1 }; $!.perl.say; # mostly for stuff like that I think

[06:09] <camelia> rakudo-moar 85d20f: OUTPUT«X::AdHoc.new(payload => 1)␤»

[06:09] <skids1> oh he left

[06:12] *** vendethiel left
[06:13] <sjn> r: try { open("nosuchfile", :ro) }; $!.perl.say;

[06:13] <camelia> rakudo-moar 85d20f: OUTPUT«X::AdHoc.new(payload => "open is disallowed in restricted setting")␤»

[06:13] <camelia> ..rakudo-jvm 6c0f93: OUTPUT«X::AdHoc.new(payload => "java.nio.file.NoSuchFileException: /home/camelia/nosuchfile")␤»

[06:22] *** mattp_ joined
[06:23] *** vendethiel joined
[06:27] *** skids1 left
[06:33] *** CIAvash joined
[06:44] *** vendethiel left
[06:49] *** vendethiel joined
[06:59] *** domidumont joined
[07:02] *** sjoshi joined
[07:02] *** Sqirrel left
[07:03] *** domidumont left
[07:04] *** domidumont joined
[07:06] *** mr-foobar joined
[07:12] *** Relsak left
[07:15] *** geraud left
[07:17] *** grassass left
[07:21] *** zostay left
[07:21] *** Upasaka left
[07:21] *** Upasaka joined
[07:24] *** Guest1337 joined
[07:26] *** zostay joined
[07:28] *** FROGGS joined
[07:28] <FROGGS> o/

[07:33] *** vendethiel left
[07:39] *** nakiro joined
[07:41] *** Guest1337 left
[07:41] *** firstdayonthejob joined
[07:42] *** vendethiel joined
[07:47] *** nige1 left
[07:47] *** darutoko joined
[07:51] *** regreg left
[07:53] *** llfourn left
[07:54] *** abraxxa joined
[07:54] *** zakharyas joined
[07:55] <El_Che> does rakudobrew only install stuff in its clone directory? is it thus safe to copy that directory to an other machine?

[07:58] *** RabidGravy joined
[07:59] *** zakharyas left
[08:00] *** _mg_ joined
[08:01] <RabidGravy> MARNIG!

[08:02] <moritz> don't go screaming around like this, RabidGravy. And a good morning to you too.

[08:05] *** vendethiel left
[08:06] *** ely-se joined
[08:07] *** Guest36732 left
[08:07] *** marmay left
[08:08] *** bowtie_ joined
[08:08] *** vendethiel joined
[08:11] <nine> *yawn* such noise early in the morning

[08:11] <ely-se> nine: must be the garbage collector

[08:11] *** Ven joined
[08:18] *** jdrab left
[08:18] *** nige1 joined
[08:26] *** wamba joined
[08:31] *** vendethiel left
[08:32] *** fireartist joined
[08:34] <abraxxa> good morning!

[08:34] *** vendethiel joined
[08:35] <abraxxa> I'd like to get style feedback on https://gist.github.com/abraxxa/58c1123ca6a03cb54808

[08:35] <abraxxa> note that there is a revision 1 also

[08:37] *** firstdayonthejob left
[08:39] *** zakharyas joined
[08:41] *** lokien_ joined
[08:45] <RabidGravy> abraxxa, if brevity isn't the point and it was my code I would split it into a further two subroutines

[08:45] <RabidGravy> i.e. the equality statement and the bag statement in subs passed the list and a list of indices

[08:49] *** Skarsnik joined
[08:50] <ely-se> add :D constraints

[08:55] *** vendethiel left
[08:55] <Ven> :U

[08:57] <moritz> :/

[09:00] *** vendethiel joined
[09:01] *** azawawi joined
[09:01] <azawawi> hi

[09:01] <azawawi> and good morning :)

[09:03] <ely-se> :P

[09:03] *** rindolf joined
[09:03] <RabidGravy> marning

[09:07] *** MARTIMM joined
[09:11] *** leont joined
[09:15] *** ely-se left
[09:18] *** zakharyas left
[09:20] *** vendethiel left
[09:21] <stmuk> good moaning

[09:21] *** dakkar_ joined
[09:26] *** _Gustaf_ left
[09:27] * azawawi is reading https://www.reddit.com/r/perl/comments/427kq8/why_isnt_perl_more_popular/

[09:28] *** leont left
[09:29] *** _mg_ left
[09:30] <stmuk> is that "good moaning" or not? :)

[09:30] *** yeahnoob left
[09:30] <jnthn> It's reddit, so probably not :P

[09:30] <yoleaux> 26 Jan 2016 16:33Z <nine> jnthn: https://github.com/tadzik/panda/issues/290

[09:31] *** _Gustaf_ joined
[09:32] *** _mg_ joined
[09:34] *** zakharyas joined
[09:35] *** Kogurr left
[09:37] *** brrt joined
[09:42] *** llfourn joined
[09:46] <DrForr> azawawi: Blah blah mod_php blah mod_perl stupid and hard.

[09:47] <abraxxa> RabidGravy: thanks, can you paste an example?

[09:48] *** Skarsnik left
[09:49] *** vendethiel joined
[09:49] *** _Gustaf_ left
[09:50] <brrt> fwiw, i do recognise that argument. i recently had to help somebody find the largest number in a csv column

[09:51] <brrt> in python, at $thesis-institute, hardly any 'real' programmers there

[09:51] <brrt> i mean, even if you write a horrific program in python, it will probably never be unreadable

[09:51] <brrt> on the other hand...

[09:51] <brrt> not sure if that is entirely true.

[09:52] <brrt> i can't imagine someone solving the same problem in perl arriving at a significantly greater complexity than the python case

[09:54] <jnthn> Readability and comprehension are different, though. :) I've never had a problem reading Java code, but comprehending what 5 levels of inheritance and 100 2-line methods do when put together can be more of a challenge. :)

[09:54] *** ely-se joined
[09:55] <jnthn> (No, not all codebases are like that, but those that are hurt. :))

[09:56] <brrt> yeah, i know about that one

[09:57] *** ab6tract joined
[09:58] <brrt> my favorite version of that is when some developers' IDE collapses anonymous classes into 'lambda syntax', and said developer used three levels deep of them

[09:58] <jnthn> Heh, when I saw IntelliJ do that I thought...hmm, cute. I'd not quite imagined that failure mode. :)

[09:58] <ab6tract> .ask lizmat is it just me or does IO.watch only produce FileEventChanged::FileRenamed, even for moments when a file has been created or deleted

[09:58] <yoleaux> ab6tract: I'll pass your message to lizmat.

[09:59] <ab6tract> .ask lizmat (that's on OS X)

[09:59] <yoleaux> ab6tract: I'll pass your message to lizmat.

[10:02] *** hankache joined
[10:03] *** _Gustaf_ joined
[10:06] *** Skarsnik joined
[10:07] *** zakharyas left
[10:08] <hankache> .tell FROGGS I installed the MS Windows® Rakudo Star release candidate on  a Windows 8.1 Machine, and here are my comments: 1)MSI name is 2016.01 but within the installer it says 2015.12. These need to be in sync.

[10:08] *** _Gustaf_ left
[10:08] <yoleaux> hankache: I'll pass your message to FROGGS.

[10:09] <FROGGS> hankache: yes, that's because I cannot bump the rakudo release vsion before its release has happened...

[10:09] <yoleaux> 10:08Z <hankache> FROGGS: I installed the MS Windows® Rakudo Star release candidate on  a Windows 8.1 Machine, and here are my comments: 1)MSI name is 2016.01 but within the installer it says 2015.12. These need to be in sync.

[10:09] <FROGGS> this will be solved for the real release automatically

[10:09] <hankache> .tell FROGGS: 2) The REPL has already line editing features but when run it says "try panda install Readline or Linenoise"

[10:09] <yoleaux> hankache: What kind of a name is "FROGGS:"?!

[10:10] <RabidGravy> ab6tract, it only produces those two events, it's up to you to work out what actually happened

[10:10] <hankache> .tell FROGGS 2) The REPL has already line editing features but when run it says "try panda install Readline or Linenoise"

[10:10] <yoleaux> hankache: I'll pass your message to FROGGS.

[10:10] <gfldex> FROGGS: the installed doesn't create any file associations. Is that intentional?

[10:10] *** _Gustaf_ joined
[10:10] <Skarsnik> Hello

[10:11] <hankache> hiya

[10:12] *** vendethiel left
[10:13] <hankache> FROGGS do you bumdle Linenoise in the MSI ?

[10:13] <hankache> bundle*

[10:13] <ely-se> I heard the French eat FROGGS

[10:13] <Skarsnik> Someone know a good standalone (no deps) xml lib?

[10:13] <hankache> Grenouilles ;)

[10:14] <hankache> i got to run. FROGGS++ for the release

[10:14] *** hankache left
[10:15] <|Tux|> csv-ip5xs       17.540

[10:15] <|Tux|> test            22.439

[10:15] <|Tux|> test-t          12.152

[10:15] <|Tux|> csv-parser      49.087

[10:28] *** virtualsue joined
[10:29] <stmuk> I tried the R* RC on 64 bit linux and saw no problems

[10:29] <dalek> doc: a4f053b | fireartist++ | template/header.html:

[10:29] <dalek> doc: remove 'autofocus' from search input field

[10:29] <dalek> doc: review: https://github.com/perl6/doc/commit/a4f053b54d

[10:29] <dalek> doc: 9e1b8dc | moritz++ | template/header.html:

[10:29] <dalek> doc: Merge pull request #370 from fireartist/master

[10:29] <dalek> doc: 

[10:29] <dalek> doc: remove 'autofocus' from search input field

[10:30] <dalek> doc: review: https://github.com/perl6/doc/commit/9e1b8dcf63

[10:30] <stmuk> Linenoise didn't work on Windows when I tried it a few days back

[10:31] <|Tux|> brrt: p6 -MText::CSV -e'csv(in=>"legs.csv",headers=>"auto").map({$_<legs>.Int}).max.say'

[10:33] <brrt> nice :-)

[10:33] <brrt> but that gives me for just a single column, and i need all of 'm

[10:34] <Skarsnik> how I do a \n in a WHY pod statement?

[10:34] <|Tux|> you know of perl6, just play

[10:35] *** jargan is now known as jast

[10:35] *** sena_kun joined
[10:35] <|Tux|> you need all columns for the row that contains the max in column x?

[10:39] <|Tux|> I thought that Array would have a .last

[10:40] *** Ven left
[10:41] <ab6tract> RabidGravy: i only ever see *one* event

[10:41] <ab6tract> FileRenamed

[10:42] <ab6tract> and essentially useless to even have a category for it, if it never changes

[10:42] <|Tux|> m: my@f=^10;@f.last.say

[10:42] <camelia> rakudo-moar 85d20f: OUTPUT«Method 'last' not found for invocant of class 'Array'␤  in block <unit> at /tmp/h3LlckMhH3 line 1␤␤»

[10:42] <|Tux|> why not?

[10:42] <|Tux|> <headbang /> was renamed to tail

[10:43] <|Tux|> brrt: p6 -MText::CSV -e'my$m;csv(in=>"legs.csv",headers=>"auto",filter=>{my$l=$_<legs>;$m//=$l;$l>$m}).tail.say'

[10:43] <|Tux|> (code => 11, legs => 750, species => Illacme Plenepes)

[10:43] <RabidGravy> ab6tract, well on Linux you get FileRenamed and FileChanged, there are currently only those two events

[10:43] <brrt> [Tux]: will you be at FOSDEM perchance?

[10:43] <|Tux|> nope

[10:43] <|Tux|> not planning

[10:43] *** vendethiel joined
[10:43] <|Tux|> should I?

[10:43] <brrt> well, not sure

[10:43] <brrt> if you want to :-)

[10:43] <ab6tract> RabidGravy: yup, i assumed Linux would be smarter than OS X here

[10:43] <brrt> i'll be there at least :-) as will liz and woolfy

[10:44] <DrForr> Moi as well :)

[10:44] *** lnrdo joined
[10:44] <ab6tract> RabidGravy: just confirmed again that OS X sends a FileRenamed when i edit a file

[10:45] <ab6tract> smh

[10:45] <|Tux|> I think I prefer the presence of my wife, who is working abroad this week

[10:45] *** virtualsue left
[10:45] *** mr-foobar left
[10:46] <brrt> well, no argument there :-)

[10:46] <RabidGravy> libuv only sends renamed and changed events,  inotify has a dozen or so

[10:46] * |Tux| cannot but think there is a more elegant solution to the code in that filter I just posted

[10:46] <|Tux|> too perl5'ish

[10:47] <RabidGravy> I guess the smart money would be on making a specific Inotify version in the ecosystem 

[10:48] <RabidGravy> (I'm not volunteering to do that, though I did tinker with the pyinotify a couple of years ago)

[10:49] *** lokien_ left
[10:50] *** lnrdo left
[10:50] *** azawawi left
[10:50] <ab6tract> whatt... libuv, y u no smart?

[10:51] <ab6tract> i was under the impression that inotify was a linux only deal

[10:51] *** lnrdo joined
[10:52] <sena_kun> ab6tract, inotify is built into kernel, while libuv is strongly optional and in fact other package afaik(just checked on gentoo).

[10:52] *** AlexDaniel joined
[10:53] <ab6tract> sena_kun: yes, that's not my issue. i just don;t see how someone can code two file change notifications and call it done

[10:53] <jnthn> ab6tract: I suspect they went for the lowest common denominator of portability

[10:54] <ab6tract> sena_kun: especially since, as you point out, inotify is part of the linux kernel and therefore not a platform independent solution

[10:54] <sena_kun> Yesterday I went into "Not implemented" for "/::/" and... Do we have any plans about when it will be implemented?

[10:54] <ab6tract> jnthn: well, considering it dumbs down to a single event in OS X...

[10:54] <ab6tract> they should have set the bar lower :)

[10:55] *** espadrine joined
[10:55] <jnthn> When I was exposing that stuff for Perl 6, I was surprised it only handled those cases. Then started looking at what different platforms offered, and realized it was going to turn into a lot more work than I had time for to go build our own smarter solution. :)

[10:55] <jnthn> (Of course, nothing stops us doing so in the future.)

[10:56] <ab6tract> (the single event on os x could be a rakudo/moar issue, though i doubt it since there are two event types on Linux and that part shouldn't be platform-dependent)

[10:57] <jnthn> ab6tract: Rakudo/Moar do almost nothing additional to exposing the events libuv makes available...

[10:57] <ab6tract> jnthn: exactly why i qualified it with doubt

[10:57] <jnthn> ab6tract: Yes, was just confirming your doubt makes sense to me also. :)

[10:59] <ab6tract> ok :D

[10:59] <ab6tract> oof

[10:59] <ab6tract> have negative tuits today, i'm afraid

[10:59] <jnthn> sena_kun: That one is trickier than it looks, if I remember correctly, because it's meant to terminate the most recent longest token match (so, alternation or protoregex), and that can mean non-local flow control (as in, peeling away a few stack frames).

[10:59] <ab6tract> thanks for vouching for my sanity :)

[10:59] <ab6tract> until later #perl6, happy hacking!

[10:59] *** ab6tract left
[11:03] *** vendethiel left
[11:05] *** vendethiel joined
[11:07] *** _mg_ left
[11:09] *** virtualsue joined
[11:11] * timotimo finally downloads the rakudo star rc

[11:11] *** pmurias joined
[11:12] <timotimo> the first things that i notice is our Configure.pl still talks about "a --prefix that contains nqp-{p,j,m} executables", and that it puts an example including JVM first in the list

[11:14] <abraxxa> timotimo: oh cewl, a remote controlled rakudo star ;O

[11:14] *** virtualsue left
[11:15] <timotimo> and when finishing configuring it says "make to build rakudo, then make test to run some tests"

[11:15] <timotimo> but "make test" just tells you "instead of make test, use make rakudo-test, make modules-test or make rakudo-spectest"

[11:21] *** diego_k left
[11:22] *** diegok joined
[11:25] <timotimo> Please remove leading 'v' from perl version in Template::Mustache's meta info.

[11:25] <timotimo> we could fix this for the "final" rakudo star

[11:25] <timotimo> Please remove leading 'v' from perl version in Template::Mojo's meta info.

[11:28] <timotimo> i still find it weird that we ship a MD5 module in star %)

[11:29] *** kalkin-_ left
[11:34] <timotimo> ==> Please make sure that /tmp/rakudo-star-2016.01-RC1/install/bin is in your PATH

[11:34] <timotimo> this piece of output gets absolutely drowned out by all the modules being installed

[11:34] <timotimo> so we should probably get it re-output'd at the end again

[11:35] <moritz> +1

[11:35] <timotimo> FROGGS: very +1 on the effort put into 2016.01, thanks so much!

[11:36] <Skarsnik> why 2-3 templates stuff in rstar? x)

[11:37] <moritz> Skarsnik: iirc because Bailador draws them in

[11:37] <Skarsnik> is Bailador really used? Last time I checked there was no session support ~~

[11:37] *** Ven joined
[11:38] *** nige1 left
[11:39] *** lnrdo left
[11:40] *** lnrdo joined
[11:40] *** pmurias left
[11:43] *** llfourn left
[11:44] *** nige1 joined
[11:45] *** pmurias joined
[11:46] *** llfourn joined
[11:53] <DrForr> pmurias: BTW thanks for submitting a name with U+1042 in it to blogs.perl.org :)

[11:53] <timotimo> m: say uniname(0x1042)

[11:53] <camelia> rakudo-moar 85d20f: OUTPUT«MYANMAR DIGIT TWO␤»

[11:53] <timotimo> m: say chr(0x1042)

[11:53] <camelia> rakudo-moar 85d20f: OUTPUT«၂␤»

[11:53] <DrForr> Oh, 0142, not 1042.

[11:54] <timotimo> m: say uniname(0x142)

[11:54] <camelia> rakudo-moar 85d20f: OUTPUT«LATIN SMALL LETTER L WITH STROKE␤»

[11:54] <timotimo> ah

[11:54] <timotimo> that is more expected :)

[11:54] <DrForr> dyselxia kkicing in teher.

[11:55] *** xpen left
[11:55] <pmurias> DrForr: ?

[11:55] <DrForr> Your account on blogs.perl.org, at least I assume you're Paweł Murias IRL :)

[11:56] <pmurias> DrForr: U+1042 seems to be the Myanmar Digit Two

[11:56] <timotimo> look again, he typo'd

[11:56] <DrForr> Yes, corrected to U+0142 :)

[11:56] <pmurias> DrForr: yes, I'm Paweł, hope my name didn't break anything

[11:57] <DrForr> It along with many others, yours just happened to be the first one I ran across :)

[12:00] <DrForr> Just dealing with mysql.

[12:01] *** ely-se left
[12:05] *** zakharyas joined
[12:07] <timotimo> TIL about mplayer -udp-master and -udp-slave. damn, that's cool. (in this case: playing video with one audio stream on one output and another audio stream on another

[12:10] *** vendethiel left
[12:16] *** vendethiel joined
[12:16] <xenu>  /win 14

[12:16] <xenu> oops

[12:19] <timotimo> oh, we have a deity among us

[12:21] <dalek> doc: 94a777d | (Zoffix Znet)++ | html/js/main.js:

[12:21] <dalek> doc: Remove left-over autofocus code

[12:21] <dalek> doc: 

[12:21] <dalek> doc: Part of the removal of autofocus search box in PR https://github.com/perl6/doc/pull/370

[12:21] <dalek> doc: review: https://github.com/perl6/doc/commit/94a777db89

[12:21] <AlexDaniel> .u U+1042

[12:21] <yoleaux> U+1042 MYANMAR DIGIT TWO [Nd] (၂)

[12:27] *** jameslines joined
[12:31] *** jameslines left
[12:33] *** ely-se joined
[12:37] *** sufrostico joined
[12:38] <lizmat> good *, #perl6!

[12:38] <yoleaux> 09:58Z <ab6tract> lizmat: is it just me or does IO.watch only produce FileEventChanged::FileRenamed, even for moments when a file has been created or deleted

[12:38] <yoleaux> 09:59Z <ab6tract> lizmat: (that's on OS X)

[12:38] <timotimo> ab5tract: how FileEventChanged get fired is, sadly, very platform-dependent; nothing much we can do about it i'm afraid

[12:38] <lizmat> ab5tract: what timotimo said

[12:39] <lizmat> m: $_ = 42; { $_ = 666; .say }; .say   # is this a bug ?

[12:39] <camelia> rakudo-moar 85d20f: OUTPUT«666␤666␤»

[12:40] <jnthn> lizmat: It's bound to the outer iirc

[12:40] *** jeek left
[12:40] <jnthn> lizmat: Which is consistent with given

[12:40] <lizmat> so how would it get bound to the inner scope ?

[12:40] <timotimo> with a sub or given or whatever you'd actually get a new $_, right?

[12:40] <jnthn> No, the inner's $_ initialization is like $_ := OUTER::<$_> or so

[12:40] <jnthn> (but code-gen'd more optimally)

[12:40] <timotimo> oh i see

[12:41] <jnthn> I just meant consistent as in:

[12:41] <jnthn> m: my $a = 42; given $a { $_ = 69; }; say $a

[12:41] <camelia> rakudo-moar 85d20f: OUTPUT«69␤»

[12:42] <lizmat> '$_ = 666; my $a = 42; given $a { $_ = 69; }; say $a; .say

[12:42] <lizmat> m: $_ = 666; my $a = 42; given $a { $_ = 69; }; say $a; .say

[12:42] <camelia> rakudo-moar 85d20f: OUTPUT«69␤666␤»

[12:42] <lizmat> hmmm...

[12:43] <lizmat> this because of a mail in perl6-users about the globalness of $!

[12:44] <jnthn> $! is per-routine

[12:44] <moritz> lizmat: p6l I think

[12:44] <jnthn> sub foo() { ... } is implicitly sub foo() { my ($_, $/, $!); ... }

[12:45] <lizmat> moritz: you're right, p6l  :-)

[12:45] <rindolf> lizmat: good morning.

[12:45] <jnthn> Note also that the binding is almost certainly right 'cus

[12:45] <lizmat> rindolf o/

[12:45] <jnthn> if .foo { .=bar }

[12:45] <rindolf> lizmat: what's  up?

[12:45] <jnthn> Relies on $_ in the inner block being bound in order to work

[12:46] <jnthn> lunch time, bbl &

[12:47] <lizmat> rindolf: just had brunch

[12:47] <rindolf> lizmat: ah.

[12:47] <lizmat> played "war on terror" until 4am

[12:49] *** kanishka left
[12:53] <timotimo> m: say uniname("卌")

[12:53] <camelia> rakudo-moar 85d20f: OUTPUT«<CJK Ideograph>␤»

[12:53] <timotimo> d'oh

[12:55] <dalek> nqp: 6dc8c8c | (Pawel Murias)++ | src/vm/js/bin/run_tests.pl:

[12:55] <dalek> nqp: [js] Pass t/moar/02-multidim.t.

[12:55] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6dc8c8c9e5

[12:55] <dalek> nqp: 6e6470b | (Pawel Murias)++ | src/vm/js/ (3 files):

[12:55] <dalek> nqp: [js] Implement partial nqp::hllizerfor (for builtin things only).

[12:55] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6e6470bf56

[12:55] <dalek> nqp: 527fd9d | (Pawel Murias)++ | t/nqp/97-hll.t:

[12:55] <dalek> nqp: Add some nqp::hllizefor tests.

[12:55] <dalek> nqp: review: https://github.com/perl6/nqp/commit/527fd9dad3

[12:58] *** vendethiel left
[13:01] *** Actualeyes left
[13:05] *** vendethiel joined
[13:07] *** Ven left
[13:08] *** ely-se left
[13:13] <rindolf> lizmat: "war on terror"!

[13:13] *** telex left
[13:14] <lizmat> it's like risk with nukes and terrorists and a balaclava marked "EVIL"

[13:14] *** telex joined
[13:15] <rindolf> lizmat: «Why can’t we ever attempt to solve a problem in this country without having a “War” on it?» -- Rich Thomson, talk.politics.misc

[13:15] *** jeek joined
[13:15] <lizmat> http://www.waronterrortheboardgame.com

[13:16] * rindolf wonders if a “War on Copyright Infringement” board game is going to be popular. ;-)

[13:19] *** llfourn left
[13:19] <RabidGravy> m: subset JJ of Mu where { $_.can("foo") }; sub bar(JJ:D $f) { say "boo" };  bar(1); # what's this iterator malarkey?

[13:19] <camelia> rakudo-moar 85d20f: OUTPUT«===SORRY!===␤Method 'iterator' must be implemented by Iterable because it is required by a role␤»

[13:20] *** Actualeyes joined
[13:20] <jdv79> thats too boring to be a war effort.  drugs, terror, sugar, smoking - these are worthy it seems.

[13:21] <moritz> lizmat: sounds like fun :-)

[13:21] <RabidGravy> m: subset JJ of Mu where { $_.can("foo") }; sub bar(JJ $f) { say "boo" };  bar(1); # just to be clear it's only with the :D

[13:21] <camelia> rakudo-moar 85d20f: OUTPUT«Constraint type check failed for parameter '$f'␤  in sub bar at /tmp/kw8NfgXCQM line 1␤  in block <unit> at /tmp/kw8NfgXCQM line 1␤␤»

[13:23] <hoelzro> stmuk: re: Linenoise, did you try after rebuilding rakudo from scratch?

[13:24] <hoelzro> I've seen others end up with some sort of weird rakudo build where that helps

[13:24] <hoelzro> I still have yet to reproduce that failure, sadly =/

[13:25] *** itaipu joined
[13:27] *** ely-se joined
[13:28] *** lnrdo left
[13:29] *** lnrdo joined
[13:30] * DrForr gives up and declares war on declaring wars on things. And collapses into the screaming recursive void.

[13:36] *** kaare_ joined
[13:41] *** Ven joined
[13:41] * [Coke] wonders if anyone else is eagerly awaiting the Deadpool film, or if it's just Coke.

[13:41] <timotimo> i'm a deadpool fan, too

[13:42] <[Coke]> er, sorry, I mean 💀💩L

[13:42] <[Coke]> well, timotimo++ then! ;)

[13:43] <timotimo> er, maybe "fan" is a bit much

[13:43] * moritz 's threadpools are dead pools

[13:43] <timotimo> i don't know much about the guy's backstory, haven't read any of his comics ...

[13:43] <timotimo> i haven't read any comic-books, come to think of it

[13:45] *** xpen joined
[13:48] *** vendethiel left
[13:50] <[Coke]> I might have his original appearance in the new mutants.

[13:51] <[Coke]> but I wasn't a fan until much later, just catching bits on the internet.

[13:51] *** vendethiel joined
[13:54] *** ely-se left
[14:05] *** xpen left
[14:05] *** xpen joined
[14:12] *** vendethiel left
[14:15] *** cdg joined
[14:17] *** xpen_ joined
[14:19] *** xpen left
[14:19] *** cdg left
[14:19] *** nige1 left
[14:20] *** kanishka joined
[14:22] *** cdg joined
[14:23] <MadcapJake> What's the difference between a `depends` array in your META6.json and a `deps.proto` file?

[14:24] <moritz> I'm pretty sure depends.proto is ignored by now

[14:24] <moritz> proto was the pre-successor of panda

[14:25] <moritz> first proto, then neutro, then panda, iirc

[14:25] <MadcapJake> oh ok, yeah i didn't realize i was looking at an article from 2010 xD

[14:27] *** flaviusb joined
[14:29] <RabidGravy> Just discovered why I didn't have a meta test on JSON::Class

[14:32] *** nige1 joined
[14:32] <dalek> nqp: 9584e81 | (Pawel Murias)++ | src/vm/js/ (3 files):

[14:32] <dalek> nqp: [js] Implement nqp::settypehll and nqp::settypehllrole and make it work with nqp::hllizefor.

[14:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9584e81954

[14:32] <dalek> nqp: 00f430b | (Pawel Murias)++ | t/nqp/97-hll.t:

[14:32] <dalek> nqp: Test nqp::settypehll and nqp::settypehllrole.

[14:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/00f430b175

[14:40] *** sufrostico left
[14:40] *** ely-se joined
[14:41] *** sufrostico joined
[14:44] *** sjoshi left
[14:46] *** xpen_ left
[14:46] *** xpen joined
[14:46] *** skids joined
[14:49] *** vendethiel joined
[14:49] *** go|dfish left
[14:52] *** go|dfish joined
[14:53] <awwaiid> Just got this to work... so psyched! use Inline::Ruby::Sweet; "[1,2,3]":rb.each: -> $n { say "I got $n!" } # outputs correctly :)

[14:55] <Skarsnik> Sweet?

[14:55] <AlexDaniel> oh, it looks like we have a bunch of inline modules. Inline::Brainfuck – yay

[14:56] <DrForr> I'm tempted to do Malbolge, but I'm afraid the tests would be a b*tch.

[14:56] <awwaiid> ::Sweet is my experimental-layer, in this case just turning EVAL("[1,2,3]", :lang<Ruby>) into "[1,2,3]":rb

[14:57] *** xpen_ joined
[14:57] <AlexDaniel> awwaiid: do you have to disable complaining monkey in order to do that?

[14:57] <awwaiid> I do whatever it takes

[14:58] <AlexDaniel> I'm just thinking that it is still EVAL… :)

[14:58] <awwaiid> haha

[14:58] <awwaiid> Yes, it turns on MONKEY-SEE-NO-EVAL so you can do "[1,2,$foo]":rb

[14:58] <AlexDaniel> by the way, how can you pass variables into that without any problems? What's the easiest way?

[14:59] <awwaiid> AlexDaniel: what do you want it to look like?

[14:59] <AlexDaniel> awwaiid: I want it to look safe

[15:00] *** llfourn joined
[15:01] *** xpen left
[15:02] <awwaiid> mmm. like [1,2,3]:rb.each... ?

[15:02] *** zakharyas left
[15:02] <AlexDaniel> awwaiid: no I mean if instead of 1,2,3 I have $x, $y and $z in Perl 6

[15:03] <jnthn> Well, I guess the real question is if "[$a,$b]":rb is doing string interpolation of $a and $b or something clever :)

[15:03] <awwaiid> like [$x, $y, $z]:rb --> gives back a ruby obj?

[15:03] *** lokien_ joined
[15:04] <AlexDaniel> jnthn: you're good at reformulating my dumb thoughts :)

[15:05] <awwaiid> ah. yeah I have like RbObject.from(...) that supports simple things, but not arrays yet, which I could teach :rb how to use

[15:08] *** _Gustaf_ left
[15:09] *** bowtie_ left
[15:11] *** vendethiel left
[15:11] *** sortiz joined
[15:12] <hoelzro> I did some diving into how anonymous state variables work, so I decided to write a blog post about it: http://hoelz.ro/blog/anonymous-state-variables-and-how-they-work

[15:12] <hoelzro> I'm hoping to write up more of these kinds of things, to show people that working on Perl 6 and figuring it out by reading the source is pretty simple

[15:18] *** nige1 left
[15:18] *** lnrdo left
[15:25] <sortiz> \o #perl6

[15:29] *** yurivish_ joined
[15:29] *** vendethiel joined
[15:32] <hoelzro> o/ sortiz 

[15:34] <timotimo> hoelzro: the step from the token variable to the action declare_variable is a bit far for people who have no idea of the rakudo internals

[15:35] <moritz> m: sub f() { say (state $)++ }; f(); f();

[15:35] <camelia> rakudo-moar 85d20f: OUTPUT«0␤1␤»

[15:35] <moritz> m: sub f() { say (my $)++ }; f(); f();

[15:35] <camelia> rakudo-moar 85d20f: OUTPUT«0␤0␤»

[15:35] *** molaf joined
[15:35] <moritz> hoelzro: maybe don't call them "state variables" when you don't use the "state" declarator

[15:39] *** xinming left
[15:40] *** fireartist left
[15:41] <timotimo> m: sub f() { say $++ }; f(); f();

[15:41] <camelia> rakudo-moar 85d20f: OUTPUT«0␤1␤»

[15:41] <timotimo> it's "anonymous state variables" right in the title

[15:41] <timotimo> i think it's okay

[15:41] <timotimo> if you put a state declarator each time, it'd be no surprise at all to see that each gets to be a different one

[15:43] <sortiz> hoelzro, I have a question for you: In my module, for travis I'm using dist:trusty, but travis ignores me. Only happens when language is 'perl6', any ideas?

[15:44] *** CIAvash left
[15:45] *** xpen_ left
[15:51] <brrt> nice writup hoelzro++

[15:58] *** edenc joined
[15:58] *** psy joined
[15:59] *** psy left
[16:00] *** psy joined
[16:02] *** sena_kun left
[16:06] *** lnrdo joined
[16:07] *** FROGGS left
[16:10] <RabidGravy> m: role Foo {  has Str $.id ; }; my $a = class {}; $a.^add_role(Foo);  $a.^compose; say $a.^attributes; say $a.new(id => "foo")

[16:10] <camelia> rakudo-moar 85d20f: OUTPUT«(Str $!id)␤P6opaque: no such attribute '$!id'␤  in block <unit> at /tmp/yqFkrhLeh2 line 1␤␤»

[16:11] <RabidGravy> is there anyway to do that so it actually works?  the anonymous class there is just for example, in reality it could have come from anywahere

[16:11] *** yurivish_ left
[16:11] *** pmurias left
[16:12] <dalek> rakudo-star-daily: 9e61216 | coke++ | log/ (5 files):

[16:12] <dalek> rakudo-star-daily: today (automated commit)

[16:12] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/9e61216c6f

[16:12] <dalek> rakudo-star-daily: a3653a7 | coke++ | log/ (5 files):

[16:12] <dalek> rakudo-star-daily: today (automated commit)

[16:12] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/a3653a7568

[16:12] <dalek> perl6-roast-data: 55715f4 | coke++ | / (6 files):

[16:12] <dalek> perl6-roast-data: today (automated commit)

[16:12] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/55715f42ff

[16:12] <timotimo> RabidGravy: yeah, you can Metaobject::ClassHOW.new_class instead of class {}

[16:13] <timotimo> or you could my $a = class :: does Foo {}

[16:13] *** vendethiel left
[16:14] <RabidGravy> The  class {} there is just for example, it would in reality be a Type object passed to a method

[16:15] <timotimo> ok, so? you can does or but it dynamically

[16:15] *** domidumont left
[16:15] <RabidGravy> can't does a type object

[16:15] <timotimo> can't but a type object either?

[16:15] <RabidGravy> but I didn't try, lets see

[16:16] <jnthn> You can but it, and you get back an anonymous subclass of the type with the role composed into it

[16:16] <RabidGravy> yeah, but works, always forget about that

[16:16] <timotimo> and "but" is just "and" with funny semantics :P

[16:16] *** lnrdo left
[16:17] <RabidGravy> let's see if it works for my actual code

[16:18] <timotimo> what gave you the impression that any code could ever work for anything, ever? :\

[16:19] *** ely-se left
[16:19] *** lnrdo joined
[16:19] <RabidGravy> too many drugs in the eighties

[16:20] <RabidGravy> and it does actually work! yay!

[16:20] *** jast left
[16:20] *** jast joined
[16:21] *** [ptc] left
[16:22] <hoelzro> timotimo: I didn't want to bog people down with too many details

[16:22] <timotimo> no. "it but actually work!"

[16:22] <hoelzro> moritz: what would you suggest as an alternative to "state variable"?

[16:22] <RabidGravy> this is so I can add attributes _rev and _id to a class that I'm going to deserialise from JSON in the CouchDB thing

[16:23] <hoelzro> sortiz: it ignores you? did you activate the repo in the travis admin?

[16:23] * hoelzro often forgets taht

[16:23] <hoelzro> timotimo: it surprised me at first, but in hindsight it doesn't =)

[16:24] *** tth_ joined
[16:24] *** [ptc] joined
[16:25] *** tth left
[16:25] *** sQuEE is now known as sQuEE`

[16:25] *** sQuEE` is now known as sQuEE

[16:27] <sortiz> hoelzro, Yes, sure. But travis insist in using "precise", not "trusty", so all tests attempts fails. Sorry to bother you with this.

[16:27] <hoelzro> no worries, I'm on the hook for it =)

[16:27] <hoelzro> sortiz: so perl6 works with precise, but not trusty?

[16:27] <hoelzro> and other languages work with trusty?

[16:27] *** lnrdo left
[16:27] <hoelzro> it may be just that we need to do something to enable perl6 on trusty

[16:27] <sortiz> hoelzro, Yes, exactly.

[16:28] *** lnrdo joined
[16:28] <sortiz> hoelzro, And my module needs a library only shipped whit trusty. :(

[16:29] <sortiz> s/whit/with/

[16:30] <hoelzro> ugh

[16:34] *** Ven left
[16:35] <hoelzro> sortiz: I'm at work right now, but I can try to take a look later

[16:36] <hoelzro> on an unrelated note, is anyone else interested in helping to get rakudo-j up and running again? either now, or in the near future after rakudo-m has settled down a bit?

[16:37] <hoelzro> I did some digging on it last night, and I'm wondering if there's someplace I should be posting my findings, like an RT ticket

[16:37] *** brrt left
[16:38] <sortiz> hoelzro, Thank you!

[16:39] *** vendethiel joined
[16:40] *** CIAvash joined
[16:40] *** lnrdo left
[16:42] <skids> Hrm... new to travis -- does it just sometimes not notice a push for a while?

[16:42] *** musiKk joined
[16:42] *** domidumont joined
[16:43] *** mohae_ joined
[16:44] *** mohae left
[16:44] *** Kogurr joined
[16:45] *** tth_ is now known as tth

[16:46] <hoelzro> skids: it shouldn't take more than a few minutes

[16:46] <hoelzro> it's usually instant

[16:46] <skids> Yeah it was instant last night, but right now it hasn't seen my latest commit to Perl6-Proc-Screen for over an hour

[16:47] <skids> Though, that commit was *to* .travis.yml

[16:47] <hoelzro> it should still pick it up

[16:48] <skids> One would think :-)

[16:50] <sortiz> In my case every single push was was tryed almost instantly. 

[16:51] *** raiph joined
[16:54] *** nakiro left
[16:56] *** sQuEE is now known as sQuEE`

[16:56] *** RAMBO joined
[16:57] *** sufrostico left
[16:57] *** sufrostico joined
[16:57] *** xinming joined
[16:58] *** abraxxa left
[16:59] <[Coke]> hoelzro++

[16:59] <moritz> hoelzro: "anonymous variable"

[17:00] *** sQuEE` is now known as sQuEE

[17:00] *** Zero_Dogg left
[17:01] *** Zero_Dogg joined
[17:01] *** Zero_Dogg left
[17:01] *** Zero_Dogg joined
[17:02] <hoelzro> moritz: if it were just an anonymous variable, though, I would expect a new one for each iteration of the loop

[17:02] <hoelzro> even though it isn't declared with the state declarator, it behaves like a state variable

[17:04] *** itaipu left
[17:06] <RAMBO> HI

[17:07] <hoelzro> hi!

[17:12] *** bowtie joined
[17:12] *** bowtie is now known as Guest32512

[17:15] <sortiz> moritz, In http://docs.perl6.org/language/variables, about the '$' variable says: "As well as explicitly declared named state variables $ can be used as an anonymous state variable without an explicit state declaration"

[17:18] *** rurban joined
[17:19] *** RAMBO left
[17:20] *** vendethiel left
[17:24] *** SCHAAP137 joined
[17:25] <moritz> sortiz: ok, maybe I'm wrong here

[17:26] <sortiz> m: sub f { ++state $; }; say f,f,f; # With explicit state

[17:26] <camelia> rakudo-moar 85d20f: OUTPUT«123␤»

[17:26] <sortiz> m: sub f { ++$; }; say f,f,f; # Without explicit state

[17:26] <camelia> rakudo-moar 85d20f: OUTPUT«123␤»

[17:27] *** khw joined
[17:27] <ilmari> m: sub f { (++$, $++); }; say f,f,f;

[17:27] <camelia> rakudo-moar 85d20f: OUTPUT«(1 0)(2 1)(3 2)␤»

[17:27] <ilmari> and each $ is separate

[17:28] *** itaipu joined
[17:30] *** Upasaka left
[17:30] *** CIAvash left
[17:31] <sortiz> BTW in roast is only tested with an explicit state declaration, and I can't found any reference in the Synopses.

[17:32] *** CIAvash joined
[17:33] *** espadrine left
[17:33] *** vendethiel joined
[17:33] *** Upasaka joined
[17:33] <hoelzro> ugh, I remember finding it in the synopses, but I forget where

[17:35] <hoelzro> the closest thing I can find is http://design.perl6.org/S02.html#Names (look for bare sigil)

[17:38] *** Actualeyes left
[17:39] <sortiz> Found the term used by jnthn in: https://rt.perl.org/Ticket/Display.html?id=116521#txn-1186387, closed.

[17:39] *** xdbr left
[17:46] <sortiz> These formalities are very important to me. :)

[17:46] *** dakkar_ left
[17:47] *** musiKk left
[17:52] *** Actualeyes joined
[17:53] *** perlpilot left
[17:58] *** lsm-desktop left
[17:59] *** rurban left
[18:00] *** lsm-desktop joined
[18:03] <sortiz> m: sub f { my \b := $; ++b, b+10 }; say f,f,f; # my or state? :)

[18:03] <camelia> rakudo-moar 85d20f: OUTPUT«(1 11)(2 12)(3 13)␤»

[18:03] *** zoosha left
[18:05] *** firstdayonthejob joined
[18:09] *** Ven joined
[18:09] *** rurban joined
[18:09] *** Actualeyes left
[18:10] <moritz> state, state, state

[18:10] <moritz> I officially withdraw my objections

[18:12] *** rurban left
[18:18] <MadcapJake> nine: thanks for the help with this https://github.com/MadcapJake/p6dx/blob/master/lib/Clairvoyant.pm6#L27-L36

[18:18] <sortiz> moritz++ # The good mood

[18:18] <MadcapJake> p6dx can now search any modules listed in «depends» array in META6.json for completions

[18:19] *** llfourn left
[18:19] <nine> MadcapJake: glad I could help :)

[18:22] <MadcapJake> now, time to integrate this into an Atom Editor package

[18:25] <Hotkeys> oh man

[18:25] <Hotkeys> are we getting better atom tools for p6

[18:25] <MadcapJake> yep :D

[18:25] <Hotkeys> Also what is the best highlighting package for p6 in atom right now

[18:25] <Hotkeys> is it just language-perl?

[18:25] <MadcapJake> personally, i prefer language-perl6fe ;)

[18:26] <Hotkeys> I tried perl6fe but it did a lot of not-highlighting

[18:26] <hoelzro> perl6fe is quite nice

[18:26] <hoelzro> MadcapJake++

[18:26] *** itaipu left
[18:26] <MadcapJake> Hotkeys: are you sure you followed the installation instructions?

[18:26] <Hotkeys> I think I did

[18:26] <Hotkeys> it was a while ago

[18:27] <MadcapJake> please submit bug reports as I am the language-perl6fe developer

[18:27] <Hotkeys> I'll give it another go

[18:28] <masak> ey, #perl6

[18:28] <MadcapJake> at this point it's really solid and (last i checked) highlights the rakudo repo pretty well

[18:28] *** addison joined
[18:30] <MadcapJake> Hotkeys: I have a linter package in the works, but I hit a roadblock (perl6 errors are not really machine-readable) and so I am writing a custom linter with cascading rulesets that'll be built in to P6Dx (and the linter package will then just run it internally)

[18:31] <Hotkeys> neat

[18:31] <hoelzro> ahoy masak 

[18:31] <Hotkeys> yeah the error messages are nice for people

[18:31] <Hotkeys> which is nice except when making a linter

[18:31] <Hotkeys> :p

[18:32] <MadcapJake> yep exactly, each one is different, so I was originally writing custom patterns and functions for each type and it was going to really become a challenge to finish (let alone maintain)

[18:32] <Hotkeys> what theme is this https://i.github-camo.com/0f28e089008622d8214dbdb861b3df276d6bda2c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4d61646361704a616b652f6c616e67756167652d7065726c3666652f6d61737465722f696d616765732f6578616d706c65312e706e67

[18:32] <MadcapJake> plus it was all in JS which was 😷

[18:32] <Hotkeys> oh

[18:32] <Hotkeys> github image links are gross

[18:32] <Hotkeys> didn't realize

[18:32] <Hotkeys> sorry

[18:33] <DrForr> Heh. I wrote a little "just-f*ing-fix-it" utility that fixes common semicolon and whatnot errors, it has to parse the error statement for that purpose.

[18:33] *** dfcarpenterak joined
[18:33] <Hotkeys> I need one of those for every time I save my code

[18:33] <Hotkeys> the amount of times I forget a semi-colon

[18:33] <Hotkeys> crazy

[18:34] <DrForr> I might put it in the Acme:: section.

[18:35] <Hotkeys> or like

[18:35] <Hotkeys> sometimes I don't put a semi-colon like in the last line of a function

[18:35] <Hotkeys> because I'm lazy

[18:35] <Hotkeys> but then I decide to add lines after that

[18:35] <TimToady> sounds good enough for Wiley Coyote

[18:35] <Hotkeys> and suddenly rakudo gets angry

[18:35] <MadcapJake> DrForr: nice! I think my P6Dx linter will have a couple different kind of semi-colon rules: strict (every line), normal (every non-curly line), and relaxed (allow no semi-colons on last line of block)

[18:36] *** abaugher_ left
[18:36] <masak> m: class Base {}; class Derived is Base {}; role R[::T] {}; say R[Derived] ~~ R[Base]; say R[Base] ~~ R[Derived]

[18:36] <camelia> rakudo-moar 85d20f: OUTPUT«True␤False␤»

[18:36] <Hotkeys> relaxed++

[18:36] <Hotkeys> MadcapJake: do you know the theme used in the image I linked?

[18:36] *** dfcarpenterak left
[18:36] <Hotkeys> I want something nice an dcolorful like that

[18:36] <MadcapJake> Hotkeys: yeah that's Brahalla

[18:36] <masak> ok, so generic roles in Perl 6 are covariant.

[18:36] <masak> is there a way to make a contravariant role in Perl 6?

[18:36] *** dfcarpenterak joined
[18:37] <masak> (or an invariant one)

[18:37] *** abaugher_ joined
[18:37] *** Ven left
[18:37] <skids> travis mystery solved: if you check the "build only if travis.yml is present" box what it actually means is "build only if a validly parseable .travis.yml is present and otherwise show no visible signs of failure unless you go to Settings/Requests just sit there looking dumb" :-/

[18:38] <MadcapJake> Hotkeys: my personal favorite is Railscast, it fits really well with how the perl6fe selectors are assigned

[18:38] <Hotkeys> hmm

[18:38] <masak> skids: easy -- just add a unit test that makes sure that the travis.yml is correct oh wait

[18:38] <MadcapJake> come to think of it, i'm surprised i never put a pic of that up in the readme!

[18:38] <skids> masak: :-)

[18:39] <masak> skids: actually, that might still be a good idea

[18:39] <masak> skids: since at least then you could catch it locally

[18:39] <Hotkeys> I just tried railscast and there was mostly white text

[18:39] <skids> masak: yeah.  But if you put it in t/ then you need a build dependency on a TAML module :-)

[18:39] <skids> *YAML

[18:40] <ingy> &YAML

[18:40] *** CIAvash left
[18:41] *** atweiden joined
[18:41] * ingy offers skids an anchor for their alias :)

[18:41] <DrForr> Aroo? LTNS dude.

[18:41] <Hotkeys> although there are a lot of railscast themes on the package finder

[18:41] <MadcapJake> Hotkeys: it uses more white than other themes, but containers should all be light blue (and nicely the twigils are noticeable but yet not overpowering, which is something that jnthn noticed was a problem with some themes)

[18:41] <masak> ingy! \o/

[18:41] <masak> ingy: do you, like, have a summoning function for "YAML" or sump'n?

[18:42] <DrForr> He's the Kibo of i.p.org :)

[18:42] *** itaipu joined
[18:42] <Hotkeys> I want something colorful like brahalla but not as dark

[18:42] <masak> skids: who wouldn't want a build dependency on a YAML module? what are you trying to optimize for here? :P

[18:42] <ingy> masak: yes, but don't abuse it :)

[18:43] *** ely-se_ joined
[18:43] <jnthn> masak: Invariant is most likely to happen through a type modifier (Foo:I or so)

[18:44] <jnthn> Or type smiley as we like to call them

[18:44] <jnthn> :I looks smug 'cus it got *exactly* the type it wanted :P

[18:45] <jnthn> And clear :C for contravariant is "extremely unhappy because now I have to learn what variance is" :P

[18:45] <jnthn> *clearly

[18:45] <MadcapJake> Hotkeys: here's how railscast looks for me https://twitter.com/MadcapJake/status/692418062235078656

[18:45] <jdv79> could :P be something?

[18:45] <ely-se_> following the support of Japanese brackets we should also support Asian-style type smileys

[18:46] *** vendethiel left
[18:46] <ely-se_> Int(^_^)

[18:46] <Hotkeys> Which railscast theme is that MadcapJake 

[18:46] <skids> masak: Oh it's not really a problem, in fact locally I keep my META6 in YAML, I was just being facetious

[18:46] <alpha123> ely-se_: we should also CJK kanji for common keywords to improve density

[18:46] <Hotkeys> just started project euler

[18:46] <Hotkeys> I like how many I can do right in the repl

[18:46] <skids> masak: because I never understood why we used JSON there anyway.

[18:46] <MadcapJake> Hotkeys: https://atom.io/packages/railscast-theme

[18:47] * alpha123 isnt exactly sure how to translate 'class', 'role', or 'grammar' but maybe we can figure something out

[18:47] <ingy> skids: because JSON parsers are simple to make?

[18:47] <Hotkeys> MadcapJake: oh this is much better than the other railscast I tried

[18:48] <alpha123> we should also support braille translations of keywords for screenreaders

[18:48] <Hotkeys> ely-se_+++

[18:48] <skids> ingy: maybe too simple judging from the number of them we have :-)

[18:48] <Hotkeys> can we get morse code p6?

[18:48] <MadcapJake> yeah this one is great, also for more eye candy: http://enrmarc.github.io/atom-theme-gallery/

[18:48] *** lostinfog joined
[18:48] <DrForr> Hotkeys: Don't tempt me :) I'm already pondering Marain :)

[18:48] <jdv79> skids: isn't that just because of speed?

[18:49] *** vendethiel joined
[18:49] <jdv79> we'd probably only have 2 or 3 if perf was good.  having one is probably impossible in a perlish world.

[18:49] <Hotkeys> DrForr: what about galactic basic

[18:49] *** MARTIMM left
[18:50] <alpha123> we should go all Firefly and just have a hybrid chinese/english syntax, once we have the basic kanji down code density could go through the roof

[18:51] <skids> jdv79: I dunno, has anyone actually speed-tested/optimized YAML for simple META6-like things that do not excercise most of it?

[18:51] <RabidGravy> well there are only 4

[18:51] *** ely-se_ left
[18:51] <alpha123> Hotkeys: how are you gonna do some of the weirder operators in morse code

[18:51] *** ely-se_ joined
[18:51] <Hotkeys> invent new morse

[18:51] <Hotkeys> or have very long combinations

[18:52] <alpha123> telegraphing perl around would be quite handy so we probably should invent some way to encode them

[18:52] <RabidGravy> infact 3 *parsers* in the ecosystem

[18:52] <jdv79> skids: I don't think so.  what is the reason META6 would be in YAML?  

[18:52] <skids> jdv76: because it's less of a PITA to read/write by hand, mostly.

[18:52] <RabidGravy> JSON::Pretty uses JSON::Tiny to parse

[18:53] <jdv79> well, that's subjective.  i actually find json much easier to write/read by hand and to write parsers and generators for.

[18:53] <El_Che>  skids++

[18:53] <jdv79> when i have to write yaml i always have to look at the spec

[18:53] <jdv79> but maybe that's just me

[18:53] <El_Che> json is the new xml :)

[18:53] <MadcapJake> yaml is a superset of json, so technically they're all valid yaml files ;)

[18:54] <ingy> yaml is the old json :)

[18:55] *** FROGGS joined
[18:56] <MadcapJake> skids: my language-perl6fe has a nice little grammar for META6 files that highlights required keys and shows you when it's not valid (the only thing it can't catch is a comma at the end of a list)

[18:56] <MadcapJake> s|list|array/object|

[18:57] <ingy> I think both were started in 2001, but yaml (and pretty much everyone else) only became "aware" of json in 2005. Ironically yaml was /almost/ a superset even then.

[18:59] <FROGGS> o/

[18:59] <yoleaux> 10:10Z <hankache> FROGGS: 2) The REPL has already line editing features but when run it says "try panda install Readline or Linenoise"

[19:02] <skids> Weird.  I add an "apt-get install screen" to my travis build after a first run of tests so I can ensure a module will install w/o screen, then suddenly screen is available for the tests run before that statement, where it was not with the statement absent.  ETOOMUCHMAGIC.

[19:03] *** musiKk joined
[19:04] *** zakharyas joined
[19:15] *** nige1 joined
[19:16] *** spider-mario joined
[19:19] *** dfcarpenterak left
[19:22] <skids> And... it gets wierder.  If I apt-get remove screen, it successfully removes, and then later when I install it there's no installation candidate.

[19:23] <Hotkeys> is there a way to get the number of digits in a number besides doing $n.Str.chars

[19:23] <DrForr> log(10,$value) :)

[19:23] <Hotkeys> oh

[19:24] <Hotkeys> math

[19:24] <ely-se_> No; numbers have no digits. Some representations of numbers do.

[19:24] <Hotkeys> shh

[19:24] <Hotkeys> forgot how useful math is

[19:25] <skids> Someday computers will be intelligent enough to forget to use math just like us humans.

[19:29] <tony-o_> should that be log($val,10).ceil ?

[19:29] *** perlpilot joined
[19:30] <Hotkeys> should be floor(log($val,10) + 1)

[19:30] <tony-o_> ceiling

[19:30] <tony-o_> m: say (log(10,40)+1).floor

[19:30] <camelia> rakudo-moar 85d20f: OUTPUT«1␤»

[19:30] <tony-o_> that doesn't look right

[19:30] * [Coke] sees kibo in backscroll, and is once again weirded out that his alma mater has such famous folk.

[19:31] <tony-o_> m: say log(40,10).ceiling

[19:31] <camelia> rakudo-moar 85d20f: OUTPUT«2␤»

[19:31] <tony-o_> m: say log(4000,10).ceiling

[19:31] <camelia> rakudo-moar 85d20f: OUTPUT«4␤»

[19:31] <tony-o_> m: say (4.log(10)+1).floor

[19:31] <camelia> rakudo-moar 85d20f: OUTPUT«1␤»

[19:32] <tony-o_> m: say (40.log(10)+1).floor

[19:32] <camelia> rakudo-moar 85d20f: OUTPUT«2␤»

[19:32] <tony-o_> m: say (400.log(10)+1).floor

[19:32] <camelia> rakudo-moar 85d20f: OUTPUT«3␤»

[19:32] <tony-o_> not sure ($_+1).floor rather than .ceiling, though :-)

[19:33] <stmuk> is someone with commit access able to look at https://github.com/sergot/openssl/pull/18 please?

[19:34] *** ely-se_ left
[19:35] <tony-o_> stmuk++

[19:36] *** rurban joined
[19:37] <lizmat> m: subset JJ where *.can("foo"); -> JJ:D $a { }   # golf of RabidGravy's problem

[19:37] <camelia> rakudo-moar 85d20f: OUTPUT«===SORRY!===␤Method 'iterator' must be implemented by Iterable because it is required by a role␤»

[19:37] <lizmat> m: subset JJ where *.can("foo"); -> JJ $a { }   # it's indeed in the :D

[19:37] <camelia> rakudo-moar 85d20f: ( no output )

[19:37] *** dfcarpenterak joined
[19:38] <RabidGravy> weird isn't it?

[19:38] <jnthn> Aye. Will be an interesting bug to look into :)

[19:39] <lizmat> it's trying to pun some role

[19:39] <Hotkeys> the log method doesn't work for really big numbers

[19:40] <Hotkeys> m: (1, 1, * + * ... *.Str.chars >= 1000)[*-1].log10

[19:40] <camelia> rakudo-moar 85d20f: ( no output )

[19:40] <lizmat> jnthn: in role Perl6::Metamodel::RolePunning

[19:40] <Hotkeys> rude

[19:40] <Hotkeys> m: say (1, 1, * + * ... *.Str.chars >= 1000)[*-1].log10

[19:40] <camelia> rakudo-moar 85d20f: OUTPUT«Inf␤»

[19:41] <jnthn> lizmat: Yes, more interesting is how we end up trying to :)

[19:41] <lizmat> hmmm.... seems precomp is involved ?

[19:43] * lizmat gives up

[19:44] *** addison left
[19:44] <lizmat> RabidGravy: perhaps rakudobug it with an --ll-exception backtrace ?

[19:44] * vendethiel realizes a lot of his directories now have a ".precomp" dir from a lot of random-perl6-ing around

[19:44] *** vendethiel left
[19:44] <Hotkeys> m: say log(10 ** 309, 10)

[19:44] <camelia> rakudo-moar 85d20f: OUTPUT«Inf␤»

[19:44] <Hotkeys> :(

[19:45] * flussence spent most of today writing some highly-optimized perl5 code for fun. 75% less cpu than /usr/sbin/fancontrol!

[19:46] *** rurban left
[19:46] <flussence> (who'd have thought a bash script that spends most of its time running `sleep 10` could be so expensive?)

[19:47] <Hotkeys> lol

[19:48] <dalek> star/release: 7fbfba7 | FROGGS++ | tools/build/ (2 files):

[19:48] <dalek> star/release: revert using --bindir when installing panda

[19:48] <dalek> star/release: 

[19:48] <dalek> star/release: We can install panda and the binaries of the Star dist into install/bin,

[19:48] <dalek> star/release: though when the user later installs binaries or updates panda, these would

[19:48] <dalek> star/release: go into install/share/perl6/site/bin by default.

[19:48] <dalek> star/release: Since there is currently no sane way to prevent that, we just install

[19:48] <dalek> star/release: non-core stuff info [...]/site/bin, and the user will have to add two paths

[19:48] <dalek> star/release: to PATH.

[19:48] <dalek> star/release: review: https://github.com/rakudo/star/commit/7fbfba71ed

[19:49] *** vendethiel joined
[19:49] <dalek> star/release: 52bd3fc | FROGGS++ | tools/build/Makefile.in:

[19:49] <dalek> star/release: display all-is-well message when installation completes

[19:49] <dalek> star/release: 

[19:49] <dalek> star/release: diakopter++

[19:49] <dalek> star/release: review: https://github.com/rakudo/star/commit/52bd3fc684

[19:50] <dalek> star/release: 70ddde5 | FROGGS++ | tools/build/Makefile.in:

[19:50] <dalek> star/release: fix typo

[19:50] <dalek> star/release: review: https://github.com/rakudo/star/commit/70ddde55d8

[19:50] *** SCHAAP137 left
[19:53] *** SCHAAP137 joined
[19:55] <MadcapJake> m: sub digs($i) { sub rec($i, $v) { if $i %% 10 { rec(($i/10).round, $v + 1) } else { $v } }($i, 1) }; digs(100000000000); # Hotkeys

[19:55] <camelia> rakudo-moar 85d20f: ( no output )

[19:55] <MadcapJake> m: sub digs($i) { sub rec($i, $v) { if $i %% 10 { rec(($i/10).round, $v + 1) } else { $v } }($i, 1) }; say digs(100000000000);

[19:55] <camelia> rakudo-moar 85d20f: OUTPUT«12␤»

[19:56] <MadcapJake> A bit confusing that the repl ouputs last result and camelia doesn't :P

[19:57] *** addison joined
[19:57] <MadcapJake> I wish I could've done $v++ up there but it wouldn't let me do that without `is rw` and then I couldn't just supply `1` for some reason

[19:59] <vendethiel> "$v is copy" as an argument works

[19:59] <MadcapJake> oh nice!

[20:00] *** cat_ joined
[20:01] <cat_> ‍

[20:03] *** lostinfog left
[20:06] <cat_> I'm curious what the Perl 6 community thinks of this: http://stackoverflow.com/q/35016310/

[20:06] *** itaipu left
[20:07] *** dfcarpenterak left
[20:07] <cat_> p6: say "Hello";

[20:07] <camelia> rakudo-moar 85d20f: OUTPUT«Hello␤»

[20:09] <masak> hello, cat_

[20:11] <cat_> hi, masak!

[20:11] <jdv79> does anyone know of a gh -> cpan author mapping?

[20:11] <jdv79> i am in need

[20:11] <dalek> rakudo/nom: 6e73d2a | FROGGS++ | src/core/CompUnit/Repository/ (2 files):

[20:11] <dalek> rakudo/nom: Revert "make CUR.bindir overridable"

[20:11] <dalek> rakudo/nom: 

[20:11] <dalek> rakudo/nom: This reverts commit cf7706f0f866c20bfa9d345e86143f701ef35912.

[20:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6e73d2ae2b

[20:11] <dalek> rakudo/nom: 86a90be | FROGGS++ | src/core/CompUnit/Repository/Installation.pm:

[20:11] <dalek> rakudo/nom: wrapper scripts need use $*EXECUTABLE

[20:11] <dalek> rakudo/nom: 

[20:11] <dalek> rakudo/nom: If we are using $*EXECUTABLE-NAME, we might execute a different perl6 version from PATH.

[20:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/86a90bec2c

[20:12] <dalek> rakudo/2016.01-preparation: bf0df6c | FROGGS++ | src/core/CompUnit/Repository/ (2 files):

[20:12] <dalek> rakudo/2016.01-preparation: Revert "make CUR.bindir overridable"

[20:12] <dalek> rakudo/2016.01-preparation: 

[20:12] <dalek> rakudo/2016.01-preparation: This reverts commit cf7706f0f866c20bfa9d345e86143f701ef35912.

[20:12] <dalek> rakudo/2016.01-preparation: review: https://github.com/rakudo/rakudo/commit/bf0df6c38b

[20:12] <dalek> rakudo/2016.01-preparation: 6841e71 | FROGGS++ | src/core/CompUnit/Repository/Installation.pm:

[20:12] <dalek> rakudo/2016.01-preparation: wrapper scripts need use $*EXECUTABLE

[20:12] <dalek> rakudo/2016.01-preparation: 

[20:12] <dalek> rakudo/2016.01-preparation: If we are using $*EXECUTABLE-NAME, we might execute a different perl6 version from PATH.

[20:12] <dalek> rakudo/2016.01-preparation: review: https://github.com/rakudo/rakudo/commit/6841e7179d

[20:23] <dalek> star/release: 87e9bf3 | FROGGS++ | modules/ (9 files):

[20:23] <dalek> star/release: updated submodules

[20:23] <dalek> star/release: review: https://github.com/rakudo/star/commit/87e9bf32b4

[20:23] <RabidGravy> what's the difference between LEAVE and POST?

[20:24] <dalek> star: fd22c79 | FROGGS++ | modules/ (20 files):

[20:24] <dalek> star: attempt at bootstrapping panda directly

[20:24] <dalek> star: review: https://github.com/rakudo/star/commit/fd22c79be3

[20:24] <dalek> star: ac288f0 | FROGGS++ | / (5 files):

[20:24] <dalek> star: first working post 6.c star

[20:24] *** dalek left
[20:24] <jdv79> wonder if its as ignorable as the diff between PUT and POST

[20:24] <FROGGS> sorry dalek

[20:24] *** yqt joined
[20:24] <mspo> LEAVE ?

[20:24] *** dalek joined
[20:24] *** ChanServ sets mode: +v dalek

[20:26] <FROGGS> mspo: http://doc.perl6.org/language/phasers#LEAVE

[20:26] <RabidGravy> m: sub f { LEAVE { say "leaving" }; say "f" }; sub g { POST { say "posting" }; say "g" };  f; g;

[20:26] <camelia> rakudo-moar 85d20f: OUTPUT«f␤leaving␤g␤posting␤»

[20:26] <RabidGravy> they appear to behave the same

[20:27] <jnthn> POST is for postconditions

[20:27] <jnthn> If it evaluates to false you get l'exception

[20:27] <RabidGravy> ah

[20:27] <RabidGravy> m: sub f { LEAVE { say "leaving" }; say "f" }; sub g { POST { False}; say "g" };  f; g;

[20:27] <camelia> rakudo-moar 85d20f: OUTPUT«f␤leaving␤g␤Postcondition '{ False}' failed␤  in sub g at /tmp/fimrssa2ES line 1␤  in block <unit> at /tmp/fimrssa2ES line 1␤␤»

[20:28] <mspo> FROGGS: I went all HTTP-crazy

[20:28] <FROGGS> stmuk: do you know why travis fails to test openssl?

[20:28] <jnthn> m: class Account { has $.balance = 0; method withdraw($amount) { $!balance -= $amount; POST $!balance > 0 } }; Account.new.withdraw(10)

[20:28] <camelia> rakudo-moar 85d20f: OUTPUT«Postcondition '$!balance > 0' failed␤  in method withdraw at /tmp/bSENBFKC3A line 1␤  in block <unit> at /tmp/bSENBFKC3A line 1␤␤»

[20:28] <FROGGS> stmuk: I'd like to merge your PR but without seeing it pass its test... well

[20:28] <jdv79> the phaser docs aren't for noobs

[20:28] <RabidGravy> I only noticed it earlier with a sub called POST that doesn't work with brackets

[20:29] <jdv79> (i'm having trouble reading them)

[20:29] *** darutoko left
[20:29] <mspo> END {} was so simple in perl5 ;)

[20:29] <lizmat> m: END say "it still is"

[20:29] <camelia> rakudo-moar 85d20f: OUTPUT«it still is␤»

[20:29] <dalek> doc: f06adef | (Christopher Bottoms)++ | doc/Language/traps.pod:

[20:29] <dalek> doc: minor typo edits

[20:29] <dalek> doc: review: https://github.com/perl6/doc/commit/f06adef2e9

[20:29] <dalek> doc: 4b8c1ee | (Christopher Bottoms)++ | doc/Language/traps.pod:

[20:29] <dalek> doc: fixed parentheses (can't have single quotes inside single quotes)

[20:29] <dalek> doc: review: https://github.com/perl6/doc/commit/4b8c1eec93

[20:29] <dalek> doc: f98c68d | FROGGS++ | doc/Language/traps.pod:

[20:29] <dalek> doc: Merge pull request #371 from molecules/patch-2

[20:29] <dalek> doc: 

[20:30] <dalek> doc: minor typo edits

[20:30] <dalek> doc: review: https://github.com/perl6/doc/commit/f98c68d085

[20:30] <jnthn> Don't think END got any harder. BEGIN and CHECK mean you need to know about precomp, though :)

[20:30] <mspo> too bad objects don't have easy-to-use phasers

[20:31] <mspo> just bananas ways to init stuff

[20:32] <jdv79> what is so bananas?

[20:33] <skids> anything that mixes BUILD with roles

[20:33] <skids> And the signature binding magic in BUILD

[20:33] <skids> (versus initial default values)

[20:34] <cat_> the whole language is pretty bananas, imo, but in a good way

[20:35] *** leat left
[20:35] <AlexDaniel> m: ‘🍌’.uniname.say

[20:35] <camelia> rakudo-moar 86a90b: OUTPUT«BANANA␤»

[20:36] <jdv79> BUILD's signature handing isn't special cased is it?

[20:39] <vendethiel> nope

[20:40] <skids> https://rt.perl.org/SelfService/Display.html?id=125437 the IRC log linked therein shows some user-experience issues with BUILD, both due to the ticket substance and in addition to that.

[20:40] <hoelzro> LEAVE just executes its contents; POST throws an exception if its contents evaluate to a falsey value

[20:40] *** Atomic_07Gq0 joined
[20:40] <mspo> jdv79: BUILD vs BUILDALL + callsame vs the other one

[20:41] <jdv79> nextsame?

[20:41] <mspo> sure

[20:41] <mspo> I find the situation pretty confusing, at least

[20:41] <RabidGravy> there's hundred of them

[20:41] <AlexDaniel> RT 125437

[20:41] <skids> m: say (1..2).map: { 1 if 0; LEAVE { } } # From last night -- should the "1 if 0" not be the implcit return of that block?

[20:41] <camelia> rakudo-moar 86a90b: OUTPUT«WARNINGS for /tmp/nyEeDztXIP:␤Useless use of constant integer 1 in sink context (line 1)␤(Nil Nil)␤»

[20:41] <AlexDaniel> bot?

[20:44] <FROGGS> AlexDaniel: synopsebot is gone, dunno why

[20:45] <hoelzro> skids: I don't believe so, no

[20:45] <hoelzro> (judging from my previous experiences with CATCH)

[20:45] <hoelzro> m: sub f { 1; CATCH {} } say f()

[20:45] <camelia> rakudo-moar 86a90b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/t2Bra5CEfu␤Strange text after block (missing semicolon or comma?)␤at /tmp/t2Bra5CEfu:1␤------> 3sub f { 1; CATCH {} }7⏏5 say f()␤    expecting any of:␤        infix␤        infix stopper␤   …»

[20:45] <hoelzro> m: sub f { 1; CATCH {} }; say f()

[20:45] <camelia> rakudo-moar 86a90b: OUTPUT«WARNINGS for /tmp/DrJdD2gOmF:␤Useless use of constant integer 1 in sink context (line 1)␤Nil␤»

[20:45] <skids> So phasers constitute a statement in general?

[20:45] *** domidumont left
[20:46] <hoelzro> yup

[20:46] <hoelzro> that sounds like a nice linter rule - sink context thing happening before final phaser

[20:47] <skids> Well, first we have to figure out if it is intended behavior :-)

[20:47] <hoelzro> true =)

[20:48] <skids> m: { my $a = LEAVE { }}; $a.say; # just wondering

[20:48] <camelia> rakudo-moar 86a90b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/DuRCslx6mc␤Variable '$a' is not declared␤at /tmp/DuRCslx6mc:1␤------> 3{ my $a = LEAVE { }}; 7⏏5$a.say; # just wondering␤»

[20:48] <skids> m: my $a; { $a = LEAVE { }}; $a.say; # just wondering

[20:48] <camelia> rakudo-moar 86a90b: OUTPUT«(Any)␤»

[20:52] *** cat_ left
[20:52] <hoelzro> skids: http://design.perl6.org/S04.html#The_Relationship_of_Blocks_and_Statements

[20:52] <hoelzro> now, we just need a formal definition for statement =)

[20:55] <skids> hoelzro: yep.  The example above though was indeed expecting the if to produce a ().  Actually that whole last paragraph is just really saying "Note: if 0 { } returns slip()"

[20:55] <hoelzro> *nod*

[20:56] <sortiz> I wasn't expecting that phasers _without_ a run-time value counts as statements in its surroundings !

[20:56] <skids> m: (-> $ { })().perl.say # checking

[20:56] <camelia> rakudo-moar 86a90b: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at /tmp/gbqCWQzUxE line 1␤␤»

[20:56] *** addison left
[20:56] <skids> m: (-> $ { })("ergh").perl.say # checking

[20:56] <camelia> rakudo-moar 86a90b: OUTPUT«Nil␤»

[20:57] <skids> MmmHmm.  Either stale design doc or that should be () (or probably |()).

[20:57] <hoelzro> it's a little weird; I feel like phasers without values are statements; those with values are expressions, and expressions are a time of statement

[20:57] <hoelzro> but I could be wrong; I just can't find a formal definition for what consistutes a statement in Perl 6

[20:58] <hoelzro> the example gives if() as a statement, however, which doesn't yield a value

[20:59] <skids> Sure it does, slip() is a value :-)

[20:59] <skids> sorta

[20:59] <hoelzro> heh, touché

[21:02] <sortiz> m: say (if True -> $a { !$a });

[21:02] <camelia> rakudo-moar 86a90b: OUTPUT«False␤»

[21:03] <hoelzro> hmm

[21:03] <hoelzro> m: sub f { if True -> $a { $a } }; say f()

[21:03] <camelia> rakudo-moar 86a90b: OUTPUT«True␤»

[21:03] <hoelzro> oh, that makes sense

[21:04] <hoelzro> m: sub f { if False -> $a { $a } }; say f()

[21:04] <camelia> rakudo-moar 86a90b: OUTPUT«()␤»

[21:04] <hoelzro> so my earlier assertion was wrong

[21:05] <skids> It was perhaps a needlessly confusing statement to put before the phaser in that example :-)

[21:09] *** addison_ joined
[21:09] *** Zero_Dogg left
[21:10] *** Zero_Dogg joined
[21:12] <sortiz> m: sub f { LEAVE { say 'foo' }; 'baz'}; say f; # Expected

[21:12] <camelia> rakudo-moar 86a90b: OUTPUT«foo␤baz␤»

[21:12] <sortiz> m: sub f { 'baz'; LEAVE { say 'foo' }; }; say f; # The _same_ expected, but nope

[21:12] <camelia> rakudo-moar 86a90b: OUTPUT«WARNINGS for /tmp/okTwJtLoZg:␤Useless use of constant string "baz" in sink context (line 1)␤foo␤Nil␤»

[21:14] <lizmat> http://blogs.perl.org/users/zoffix_znet/2016/01/bit-rot-thursday.html   # ZoffixWin++

[21:15] *** llfourn joined
[21:18] *** geraud joined
[21:20] *** llfourn left
[21:22] <FROGGS> ZoffixWin++

[21:23] *** Psyche^ joined
[21:24] *** xxpor joined
[21:24] *** regreg joined
[21:25] <sortiz> And in any case, I don't know where that Nil comes from.

[21:26] *** atweiden left
[21:27] *** Psyche^_ left
[21:28] <skids> Might be the pre-glr pre-EMPTY Nil still lingering around

[21:28] <skids> *Empty

[21:28] *** itaipu joined
[21:29] <masak> m: sub f {}; say f

[21:29] <camelia> rakudo-moar 86a90b: OUTPUT«Nil␤»

[21:29] <masak> sortiz: you get a `Nil` in your case for the same reason as you get a `Nil` above

[21:29] <masak> (because there's no last statement to implicitly return a value)

[21:30] <FROGGS> ***ALL*** - new release candidate of Rakudo Star is available: http://froggs.de/perl6/raku​do-star-2016.01-RC2.tar.gz

[21:30] <masak> \o/ FROGGS++

[21:30] <masak> 'night, #perl6

[21:30] <FROGGS> ***ALL*** - a windows msi is also available, though the PATH to site/bin needs to be set additionally: http://froggs.de/perl6/rakudo-sta​r-2016.01-x86_64-RC2%20(JIT).msi

[21:31] <skids> masak: "If there are no statements in the block at all, the result is also ()." from S04, maybe stale, or maybe right.

[21:34] <sortiz> FROGGS++

[21:34] <edenc> FROGGS++

[21:36] <jdv79> FROGGS: what's with the RC stuff?  is there uncertainty it works or something?

[21:36] <jdv79> i don't remember that in the past

[21:37] <lizmat> ReleaseCandidate

[21:37] <lizmat> if we don't find any errors, it's what we're going to release

[21:37] <lizmat> pretty standard in P5 world  :-)

[21:38] <FROGGS> jdv79: it is a way to gain feedback from more than one platform, and to hotfix stuff before the real release was made

[21:39] <jdv79> i'm familiar with the concept.  i just don't remember that being part of the p6 related releases.

[21:39] <sortiz> masak, But if "there's no last statement", why the 'baz'; don't becomes the "last" one?

[21:40] <jdv79> so its likely a fine release - we're just now being more attentive.

[21:41] * lizmat is looking at Mu.WALK: it *is* specced, it has spectest, but no documentation whatsoever

[21:41] <lizmat> nor can I find anything that calls it other than the spectest

[21:43] * sortiz Found non-expresionable phasers handling LTA.

[21:45] *** yurivish is now known as fa

[21:47] <FROGGS> gnight #perl6, will look into setting PATH when installing the windows msi tomorrow

[21:47] *** FROGGS left
[21:47] *** Ven joined
[21:48] *** kaare_ left
[21:48] *** gfldex_win joined
[21:49] <gfldex_win> FROGGS: https://gist.github.com/anonymous/edae0ee546d071491a73

[21:49] <gfldex_win> .tell FROGGS please check https://gist.github.com/anonymous/edae0ee546d071491a73

[21:49] <yoleaux> gfldex_win: I'll pass your message to FROGGS.

[21:50] <ZoffixWin> gfldex_win, does that happen with any other modules?

[21:50] <gfldex> i will check

[21:50] <ZoffixWin> Oh. *I'm* on Windows right now! :D

[21:50] <RabidGravy> lizmat, I can't actually think of a use for it either

[21:50] * ZoffixWin tries the RC

[21:50] *** nige1 left
[21:51] <RabidGravy> m: class G { method b { say "G" }}; class H is G { method b { say "H" } }; H.WALK(name => "b")>>.(H.new)

[21:51] <camelia> rakudo-moar 86a90b: OUTPUT«H␤G␤»

[21:51] <ZoffixWin> I get a 404 on that MSI link :/

[21:51] <RabidGravy> I'm sure I could

[21:53] <lizmat> http://froggs.de/perl6/rakudo-star-2016.01-x86_64-RC2%20(JIT).msi   # ZoffixWin: this one seems to work

[21:53] <ZoffixWin> Does. Thanks.

[21:53] <gfldex> ZoffixWin: same problem on another very simple module

[21:55] <lizmat> the tar URL seems wrong also: this seems to be the correct one: http://froggs.de/perl6/rakudo-star-2016.01-RC2.tar.gz

[21:56] <ZoffixWin> .tell FROGGS One thing I notice right away is the MSI tells me nothing about WHERE it's copying the files. :/

[21:56] <yoleaux> ZoffixWin: I'll pass your message to FROGGS.

[21:57] * flussence hazards a guess at %PROGRAMFILES%Rakudo Star or suchlike

[21:57] <gfldex> it's C:\Rakudo

[21:57] *** skids left
[21:57] *** molaf left
[21:59] <ZoffixWin> k... and C:\rakudo\share\perl6\site\bin for panda

[21:59] <rindolf> ZoffixWin: hi, sup?

[22:00] <ZoffixWin> .tell FROGGS not sure if it's know, but since you only mentioned that site/bin needs to be added... I also had to add C:\rakudo\bin to path

[22:00] <yoleaux> ZoffixWin: I'll pass your message to FROGGS.

[22:00] *** ely-se joined
[22:00] <gfldex_win> ZoffixWin: set PATH=C:\rakudo\bin;C:\rakudo\share\perl6\site\bin;C:\Program Files\Git\bin;%PATH%

[22:00] <gfldex_win> after you insalled git ofc :)

[22:00] <jdv79> ZoffixWin: are there plans to support multiple auth/ver/api kinda variations on dists for modules.perl6.org?

[22:01] <ZoffixWin> jdv79, I thought we decided MetaCPAN6 is the way to go?

[22:02] <jdv79> yeah.  just asking.  so modules.perl6.org is inactive in terms of development then?

[22:02] *** wamba left
[22:03] <jdv79> i think we have cpan6 and pause6 from markov.  he was a little unclear but i'll just run with that angle for now:)

[22:04] <ZoffixWin> m: .tell FROGGS here's the conclusion of my testing RC2 and trying to install a module. perl6 itself seems to work and I tried Test.pm6 and it works too. https://gist.github.com/zoffixznet/b104d0f9a9f965c92dd3

[22:04] <camelia> rakudo-moar 86a90b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/o7a56JunKA␤Two terms in a row␤at /tmp/o7a56JunKA:1␤------> 3.tell7⏏5 FROGGS here's the conclusion of my test␤    expecting any of:␤        infix␤        infix stopper␤        statement end…»

[22:04] <ZoffixWin> .tell FROGGS here's the conclusion of my testing RC2 and trying to install a module. perl6 itself seems to work and I tried Test.pm6 and it works too. https://gist.github.com/zoffixznet/b104d0f9a9f965c92dd3

[22:04] <yoleaux> ZoffixWin: I'll pass your message to FROGGS.

[22:05] <ZoffixWin> jdv79, yeah, I, personally, don't have any plans to add any new features to modules.perl6.org, because we're going with the whole MetaCPAN model and stuff. Seems it'd be a waste of effort to work on modules.perl6.org too :) I'll probably contribute to the MetaCPAN stuff in the future, but currently I'm on "vacation" until March :)

[22:07] <El_Che> sounds like an euphemism for jail

[22:07] <jdv79> happy vaca'ing then!

[22:08] <ZoffixWin> El_Che, yes, I'm in jail... they let us sit on IRC 24/7 :P

[22:08] *** itaipu left
[22:09] <alpha123> sticking prisoners on programming related IRC channels seems like either torture or a great idea

[22:09] <El_Che> hehe

[22:09] <El_Che> if I would be a guard, I would let you

[22:09] <El_Che> keep them doped with irc :)

[22:10] <TEttinger> all right, who's been in #prison_escape ?

[22:11] *** gfldex_win left
[22:15] <jdv79> ZoffixWin: what prompted such a long vaca?

[22:16] *** llfourn joined
[22:16] <jdv79> [Coke]: sup with your node eating the box?

[22:16] <ZoffixWin> jdv79, personal stuff :) Just too stressed to do much. In March, I'll resolve a major part of it, hence the date for when vacation will end :)

[22:17] <ZoffixWin> (it's not a vacation from my work, hence the double quotes around "vacation")

[22:17] <jdv79> [Coke]: 36k minutes seems like a lot of cpu time

[22:20] *** llfourn left
[22:23] <timotimo> m: say "foo".startswith("f")

[22:23] <camelia> rakudo-moar 86a90b: OUTPUT«Method 'startswith' not found for invocant of class 'Str'␤  in block <unit> at /tmp/FyS_WTMe4_ line 1␤␤»

[22:23] <timotimo> wasn't this a thing?

[22:23] <timotimo> aaah!

[22:23] <timotimo> kebap

[22:25] <RabidGravy> kebabydoodleday

[22:26] <lizmat> m: say "foo".starts-with("f")   # kebab indeed

[22:26] <camelia> rakudo-moar 86a90b: OUTPUT«True␤»

[22:28] <jdv79> .tell [Coke] would you mind keepin your node in check?

[22:28] <yoleaux> jdv79: I'll pass your message to [Coke].

[22:29] *** kanishka left
[22:31] *** Ven left
[22:33] *** rindolf left
[22:33] *** dfcarpenterak joined
[22:35] *** Atomic_07Gq0 left
[22:35] *** roguelazer left
[22:35] <ZoffixWin> m: say "ß".starts-with( "ß".uc )

[22:35] <camelia> rakudo-moar 86a90b: OUTPUT«False␤»

[22:36] *** ruoso left
[22:37] <lizmat> m: say "ß" eq "ß".uc

[22:37] <camelia> rakudo-moar 86a90b: OUTPUT«False␤»

[22:38] <lizmat> m: say "ß".uc

[22:38] <camelia> rakudo-moar 86a90b: OUTPUT«SS␤»

[22:38] <lizmat> ZoffixWin: did you expect something eles ?

[22:38] <ZoffixWin> lizmat, at first, when I misread the original example testing for "F" :)

[22:39] <ZoffixWin> And I thought the test was case-insensitive :P

[22:39] <AlexDaniel> m: say ‘foo’.startswith(‘f’)

[22:39] <camelia> rakudo-moar 86a90b: OUTPUT«Method 'startswith' not found for invocant of class 'Str'␤  in block <unit> at /tmp/4xUlKofSB1 line 1␤␤»

[22:39] <AlexDaniel> why can't it tell me to use starts-with?

[22:39] <lizmat> AlexDaniel: starts-with

[22:39] <lizmat> ah

[22:40] <AlexDaniel> lizmat: yeah but I don't have lizmat in my terminal

[22:40] <lizmat> hehe

[22:40] <AlexDaniel> m: say ‘foo’.starts-wizh(‘f’)

[22:40] <camelia> rakudo-moar 86a90b: OUTPUT«Method 'starts-wizh' not found for invocant of class 'Str'␤  in block <unit> at /tmp/Xuj94JRz4X line 1␤␤»

[22:40] <lizmat> well, one of those things everybody agrees would be a good thing

[22:40] *** roguelazer joined
[22:40] <lizmat> but atm we don't create a levenshtein yet in that case

[22:40] <AlexDaniel> so there's levenshtein for methods?

[22:41] <lizmat> no, there isn't, and that's the problem

[22:41] <AlexDaniel> is there a report for that?

[22:41] <lizmat> not sure

[22:42] *** zakharyas left
[22:44] *** vendethiel left
[22:45] *** rurban joined
[22:46] <ZoffixWin> m: say "ȹ".lc.starts-with("ȹ".uc)

[22:46] <camelia> rakudo-moar 86a90b: OUTPUT«True␤»

[22:46] <ZoffixWin> :D

[22:48] <ZoffixWin> Oh:

[22:48] <ZoffixWin> m: say "\xFFFFFF".chars

[22:48] <camelia> rakudo-moar 86a90b: OUTPUT«1␤»

[22:48] <ZoffixWin> m: say "\xFFFFFF"

[22:48] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[22:48] <ZoffixWin> m: say "\xFFFFFFFFFFFFFFFFFFFFFFFFFFFF"

[22:48] <camelia> rakudo-moar 86a90b: OUTPUT«===SORRY!===␤chr codepoint cannot be negative␤»

[22:48] <hoelzro> hoooboy

[22:49] *** musiKk left
[22:49] <hoelzro> rakudo bug it!

[22:49] <ZoffixWin> it might already be. Part of my brain says I've seen this before in the channel

[22:50] *** ruoso joined
[22:54] *** dfcarpenterak left
[22:54] *** rurban left
[22:55] *** dfcarpenterak joined
[22:55] <geekosaur> not that one specifically? but there've been a couple similar ones

[22:57] <geekosaur> that said, it's probably falling into the same buggy code path as the one reported a couple days ago

[22:58] <jdv79> Skarsnik: META6.info isn't a thing - https://github.com/Skarsnik/gptrixie/blob/master/META6.info

[22:58] <jdv79> its META6.json and/or META.info

[22:58] <Skarsnik> oh xD

[22:59] <jdv79> broke my script.  by contents looks likes its a META.info.

[22:59] *** kid51 joined
[22:59] <Skarsnik> what did it broke?

[22:59] <Skarsnik> What the diff? x)

[22:59] <jdv79> the hacky metacpan loading script.

[23:00] <jdv79> META.info is panda/current ecosystem and META6.json is for zef/cpan6 stuff

[23:00] <jdv79> best to just rename to META.info for now

[23:01] <Skarsnik> wait what?

[23:01] <Skarsnik> I though there was one spec for that

[23:01] <jdv79> or does panda accept META6.info now?  idk.

[23:01] <dalek> doc: 0c95b7e | (Wenzel P. P. Peppmeyer)++ | doc/Type/IO/Spec (5 files):

[23:01] <dalek> doc: get a few more heading levels in line

[23:01] <dalek> doc: review: https://github.com/perl6/doc/commit/0c95b7e678

[23:01] <dalek> doc: 228f1b0 | (Wenzel P. P. Peppmeyer)++ | doc/Type/IO/Spec/QNX.pod:

[23:01] <dalek> doc: fix pod title

[23:01] <dalek> doc: review: https://github.com/perl6/doc/commit/228f1b0ab2

[23:02] <jdv79> i'll just skip that dist for now:)  i gotta run.

[23:04] <Skarsnik> I will change it tommorow

[23:04] *** RabidGravy left
[23:04] <Skarsnik> too tired x)

[23:06] *** vendethiel joined
[23:07] *** pyrimidine left
[23:15] <ZoffixWin> m: say "\x1FFFF"

[23:15] <camelia> rakudo-moar 86a90b: OUTPUT«\x{1FFFF}␤»

[23:15] <ZoffixWin> m: say "\x2000"

[23:15] <camelia> rakudo-moar 86a90b: OUTPUT« ␤»

[23:15] <ZoffixWin> m: say "\x20000"

[23:15] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[23:15] *** ely-se left
[23:16] <AlexDaniel> ZoffixWin: yes it is

[23:16] *** pyrimidine joined
[23:16] <ZoffixWin> cool :)

[23:16] <AlexDaniel> https://rt.perl.org/Public/Bug/Display.html?id=125817

[23:16] <AlexDaniel> the title is a bit wrong because originally it was just a LTA

[23:17] <AlexDaniel> but I've left a comment there that now it segfaults

[23:20] <dalek> doc: 3c04f55 | (Wenzel P. P. Peppmeyer)++ | doc/Language/ (3 files):

[23:20] <dalek> doc: last few heading levels fixed

[23:20] <dalek> doc: review: https://github.com/perl6/doc/commit/3c04f55d6e

[23:27] *** vendethiel left
[23:36] *** DrPete left
[23:41] <lizmat> .tell japhb I am curious how you actually got Date subclassing to work: class A is Date { has $.a }; dd A.new(:2016year,:42a).a gives Any instead of 42

[23:41] <yoleaux> lizmat: I'll pass your message to japhb.

[23:44] <lizmat> good night, #perl6!

[23:44] *** dfcarpenterak left
[23:45] *** Skarsnik left
[23:49] *** vendethiel joined
[23:59] *** edehont joined
[23:59] *** lokien_ left
