[00:00] <dalek> doc: 3fcedd3 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Num.pod6:

[00:00] <dalek> doc: fix unclosed L<>

[00:00] <dalek> doc: review: https://github.com/perl6/doc/commit/3fcedd37a9

[00:01] <[Coke]> For a profiler project I'm working on, it'd be great to have some smallish perl6 programs that I can use under the artistic license that generate profile data that is currently hard to use (slow to open in the profiler html, etc.)

[00:03] *** bjz_ left
[00:06] <jdv79> [Coke]: data selector?

[00:06] <[Coke]> jdv79: ?

[00:06] <jdv79> https://github.com/jdv/p6-data-selector

[00:06] <jdv79> maybe

[00:07] <jdv79> you are looking for stuff thats big to profile?

[00:07] <gfldex> AlexDaniel: , and ; are List constructors. [] is the Array constructor. And I'm pretty sure we didn't doc neither the ; case nor the , and ; case.

[00:07] <jdv79> those tests might be iirc

[00:08] <daxim> andrewalker, where are your qt5 bindings?

[00:08] <[Coke]> jdv79: Stuff that I can include wholesale into my repo, preferably as standalone things.

[00:09] <AlexDaniel> gfldex: will you open a new issue in the doc repo?

[00:09] <gfldex> AlexDaniel: I will just doc it.

[00:09] <AlexDaniel> gfldex: oh wow

[00:09] <AlexDaniel> gfldex++

[00:10] <gfldex> also i'm making progress on the whole $/.html /.html file-name-and-link-debacle

[00:11] <gfldex> i found that htmlify.p6 writes a few files (autogenerated type stuff) more then once

[00:12] <[Coke]> ORLY?

[00:12] <[Coke]> which ones?

[00:12] *** grondilu left
[00:16] <dalek> doc: eb7b786 | (Zoffix Znet)++ | doc/Type/Promise.pod6:

[00:16] <dalek> doc: Add explicit example of how to test the Promise status

[00:16] <dalek> doc: review: https://github.com/perl6/doc/commit/eb7b786f45

[00:17] <BenGoldberg_> m: my $x = [ 1, 2, 3 ]; my ($a, $b, $c) = $x; say $b;

[00:17] <camelia> rakudo-moar 303e77: OUTPUT«2␤»

[00:23] *** dj_goku joined
[00:24] <dalek> doc: f8b3cde | (Wenzel P. P. Peppmeyer)++ | doc/Language/list.pod6:

[00:24] <dalek> doc: doc multidim literal lists

[00:24] <dalek> doc: review: https://github.com/perl6/doc/commit/f8b3cde55c

[00:35] *** addison left
[00:36] *** mohae joined
[00:37] *** dj_goku left
[00:42] *** cog__ left
[00:43] *** cog_ left
[00:45] *** sortiz joined
[00:48] <sortiz> \o #perl6

[00:57] *** addison joined
[01:10] <sortiz> Those are mentioned as "semicolon list" or "semilist" on S09:Multidimensional_arrays and S09:The_semicolon_operator

[01:10] <synopsebot6> Link: http://design.perl6.org/S09.html#Multidimensional_arrays_and_S09

[01:12] * sortiz poor synopsebot6 :(

[01:23] *** addison left
[01:35] *** dj_goku joined
[01:36] *** luiz_lha left
[01:49] <gfldex> [Coke]: duplicate files (names after filesystem escape) https://gist.github.com/gfldex/42de8c55837810817e9899ad68ee2e2a

[01:51] *** dvinciguerra left
[01:58] *** kalkin-_ joined
[01:58] *** kalkin- left
[02:00] *** AndyBotwin left
[02:13] *** vendethiel- joined
[02:13] *** vendethiel left
[02:23] <sammers> m: my @arr = 'jim', 'bob', 'joe'; for @arr -> $name { say "My name is $name" }

[02:23] <camelia> rakudo-moar 303e77: OUTPUT«My name is jim␤My name is bob␤My name is joe␤»

[02:24] <sammers> m: my %hash; %hash<names> = 'jim', 'bob', 'joe'; for %hash<names> -> $name { say "My name is $name" }

[02:24] <camelia> rakudo-moar 303e77: OUTPUT«My name is jim bob joe␤»

[02:24] <sammers> hmm

[02:24] <sammers> m: my %hash; %hash<names> = 'jim', 'bob', 'joe'; for %hash<names>.Array -> $name { say "My name is $name" }

[02:24] <camelia> rakudo-moar 303e77: OUTPUT«My name is jim␤My name is bob␤My name is joe␤»

[02:24] <sammers> ah

[02:45] <gfldex> m: my %hash; %hash<names> = 'jim', 'bob', 'joe'; for |%hash<names> -> $name { say "My name is $name" }

[02:45] <camelia> rakudo-moar 303e77: OUTPUT«My name is jim␤My name is bob␤My name is joe␤»

[02:45] <gfldex> sammers: also ^^^

[02:45] <sammers> ah, thanks. I like that better

[02:47] <BenGoldberg_> m: my %hash; %hash<names> = 'jim', 'bob', 'joe'; for %hash<names> -> $name { say "My name is $name" }

[02:47] <camelia> rakudo-moar 303e77: OUTPUT«My name is jim bob joe␤»

[02:47] <BenGoldberg_> m: my %hash; %hash<names> = ['jim', 'bob', 'joe']; for %hash<names> -> $name { say "My name is $name" }

[02:47] <camelia> rakudo-moar 303e77: OUTPUT«My name is jim bob joe␤»

[02:47] <gfldex> coercing into Array is only needed if you intend to change the content.

[02:47] <BenGoldberg_> Hmm...

[02:47] <gfldex> m: my %hash; %hash<names> = ['jim', 'bob', 'joe']; %hash<names>.WHAT.say

[02:47] <camelia> rakudo-moar 303e77: OUTPUT«(Array)␤»

[02:47] *** dj_goku left
[02:47] *** noganex joined
[02:48] <gfldex> Array in the sense of $array, not @array

[02:48] <BenGoldberg_> Why is the | needed?

[02:48] <gfldex> m: my %hash; %hash<names> = 'jim', 'bob', 'joe'; for @(%hash<names>) -> $name { say "My name is $name" }

[02:48] <camelia> rakudo-moar 303e77: OUTPUT«My name is jim␤My name is bob␤My name is joe␤»

[02:49] <BenGoldberg_> I thought that, post GLR, a single item, which happened to be an array, would get automatically dereffed?

[02:49] <gfldex> the Slip does iterator magic that will decend into the inner List automatically

[02:49] *** dj_goku joined
[02:50] <gfldex> it will get dereffed if you stick it into an Array container. Neither for nor $name will provide an Array container.

[02:50] <BenGoldberg_> m: my $test =  'jim', 'bob', 'joe'; for $test -> $name { say "My name is $name" }

[02:50] <camelia> rakudo-moar 303e77: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant string "joe" in sink context (lines 1, 1)␤Useless use of constant string "bob" in sink context (lines 1, 1)␤My name is jim␤»

[02:50] <BenGoldberg_> m: my $test = ['jim', 'bob', 'joe']; for $test -> $name { say "My name is $name" }

[02:50] <nebg> hello everyone... which are the main differences between perl6 and ruby ? 

[02:50] <camelia> rakudo-moar 303e77: OUTPUT«My name is jim bob joe␤»

[02:50] <gfldex> m: my $test = ('jim', 'bob', 'joe'); for $test -> $name { say "My name is $name" }

[02:50] <camelia> rakudo-moar 303e77: OUTPUT«My name is jim bob joe␤»

[02:50] *** noganex_ left
[02:51] <gfldex> nebg: could you ask a question that doesn't take 2 hours to answer?

[02:51] <BenGoldberg_> m: my $test = ['jim', 'bob', 'joe']; for $test -> $a, $b, $c { say "a is $a, b is $b, c is $c" }

[02:51] <camelia> rakudo-moar 303e77: OUTPUT«Too few positionals passed; expected 3 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[02:52] <BenGoldberg_> m: my $test = ['jim', 'bob', 'joe']; for @$test -> $a, $b, $c { say "a is $a, b is $b, c is $c" }

[02:52] <camelia> rakudo-moar 303e77: OUTPUT«a is jim, b is bob, c is joe␤»

[02:52] <gfldex> m: my $test = ['jim', 'bob', 'joe']; for $test -> [$a, $b, $c] { say "a is $a, b is $b, c is $c" }

[02:52] <camelia> rakudo-moar 303e77: OUTPUT«a is jim, b is bob, c is joe␤»

[02:52] <BenGoldberg_> m: my $test = ['jim', 'bob', 'joe']; for |$test -> $a, $b, $c { say "a is $a, b is $b, c is $c" }

[02:52] <camelia> rakudo-moar 303e77: OUTPUT«a is jim, b is bob, c is joe␤»

[02:58] *** wisti joined
[03:13] *** benchable joined
[03:17] *** benchable left
[03:17] *** benchable joined
[03:19] *** benchable left
[03:20] *** benchable joined
[03:22] <dalek> doc/GT#155: 3aa0ecb | (Wenzel P. P. Peppmeyer)++ | htmlify.p6:

[03:22] <dalek> doc/GT#155: - rewrite output filenames

[03:22] <dalek> doc/GT#155: - warn on duplicate filenames

[03:22] <dalek> doc/GT#155: - write list of links into html/links.txt

[03:22] <dalek> doc/GT#155: review: https://github.com/perl6/doc/commit/3aa0ecbb5b

[03:22] <dalek> doc/GT#155: 45b9d06 | (Wenzel P. P. Peppmeyer)++ | doc/ (4 files):

[03:22] <dalek> doc/GT#155: Merge branch 'master' into GT#155

[03:22] <dalek> doc/GT#155: review: https://github.com/perl6/doc/commit/45b9d0626c

[03:22] <dalek> doc/GT#155: c7e0805 | (Wenzel P. P. Peppmeyer)++ | / (2 files):

[03:22] <dalek> doc/GT#155: - move escape-filename to support module

[03:22] <dalek> doc/GT#155: - add new URL escape sub

[03:22] <dalek> doc/GT#155: review: https://github.com/perl6/doc/commit/c7e08058c5

[03:22] <dalek> doc/GT#155: 901db16 | (Wenzel P. P. Peppmeyer)++ | lib/Pod/Htmlify.pm6:

[03:22] <dalek> doc/GT#155: unescape some uri-escaped bits before filename-escaping

[03:22] <dalek> doc/GT#155: review: https://github.com/perl6/doc/commit/901db16f1a

[03:23] *** benchable left
[03:24] <gfldex> searching for / // $/ and other nasties works in that branch. Needs plenty of testing tho. I may be able to test all links via javascript -- after I got some sleep.

[03:28] *** cooper_ is now known as cooper

[03:29] *** travis-ci joined
[03:29] <travis-ci> Doc build failed. Wenzel P. P. Peppmeyer 'unescape some uri-escaped bits before filename-escaping'

[03:29] <travis-ci> https://travis-ci.org/perl6/doc/builds/144351087 https://github.com/perl6/doc/compare/3aa0ecbb5bf2^...901db16f1a40

[03:29] *** travis-ci left
[03:30] *** wisti left
[03:32] *** labster left
[03:33] <dalek> bisectbot: b2e0c1f | (Daniel Green)++ | / (3 files):

[03:33] <dalek> bisectbot: First rough attempt at factoring out some common functionality

[03:33] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/b2e0c1f507

[03:33] <dalek> bisectbot: e856b32 | (Daniel Green)++ | / (3 files):

[03:33] <dalek> bisectbot: Combine STDOUT and STDERR

[03:33] *** dalek left
[03:34] *** dalek joined
[03:34] *** ChanServ sets mode: +v dalek

[03:36] *** kid51 left
[03:39] *** TeamBlast left
[03:41] *** labster joined
[03:42] <dalek> doc/GT#155: da91db8 | (Wenzel P. P. Peppmeyer)++ | / (2 files):

[03:42] <dalek> doc/GT#155: make L<IO::Spec> work with filename-rewrite

[03:42] <dalek> doc/GT#155: review: https://github.com/perl6/doc/commit/da91db81ac

[03:44] *** BenGoldberg_ left
[03:45] <nebg> gfldex, ahahah XD sorry

[03:49] *** dj_goku left
[03:56] *** khw left
[03:56] *** TeamBlast joined
[03:58] <dalek> doc/GT#155: 62ab028 | (Wenzel P. P. Peppmeyer)++ | htmlify.p6:

[03:58] <dalek> doc/GT#155: rewrite urls in search.js

[03:58] <dalek> doc/GT#155: review: https://github.com/perl6/doc/commit/62ab0280bb

[03:59] *** travis-ci joined
[03:59] <travis-ci> Doc build passed. Wenzel P. P. Peppmeyer 'make L<IO::Spec> work with filename-rewrite'

[03:59] <travis-ci> https://travis-ci.org/perl6/doc/builds/144353354 https://github.com/perl6/doc/compare/901db16f1a40...da91db81ac22

[03:59] *** travis-ci left
[04:02] *** sammers left
[04:05] <gfldex> BrokenRobot: AlexDaniel: if you got the time please test branch GT#155 locally. All problems with search, filenames on windows beside disambiguation files (WHAT.html _and_ what.html) are solved.

[04:06] *** TeamBlast left
[04:08] <dalek> bisectbot: 5e6290f | (Aleks-Daniel Jakimenko-Aleksejev)++ | Perl6IRCBotable.pm:

[04:08] <dalek> bisectbot: We still need rev-list to handle tags

[04:08] <dalek> bisectbot: 

[04:08] <dalek> bisectbot: And we probably still need rev-parse for a basic input validation

[04:08] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/5e6290fb0a

[04:11] *** skids left
[04:15] *** travis-ci joined
[04:15] <travis-ci> Doc build passed. Wenzel P. P. Peppmeyer 'rewrite urls in search.js'

[04:15] <travis-ci> https://travis-ci.org/perl6/doc/builds/144354656 https://github.com/perl6/doc/compare/da91db81ac22...62ab0280bbfc

[04:15] *** travis-ci left
[04:16] *** TeamBlast joined
[04:28] *** dj_goku joined
[04:33] *** TeamBlast left
[04:37] *** TeamBlast joined
[04:40] *** addison joined
[04:41] *** Cabanossi left
[04:44] *** Cabanossi joined
[04:46] *** bjz joined
[04:55] *** labster left
[05:00] *** sortiz left
[05:03] *** dj_goku left
[05:10] <masak> hi, #perl6

[05:18] *** AlexDaniel left
[05:22] <SHODAN> hej masak

[05:31] *** TeamBlast left
[05:37] *** labster joined
[05:43] *** TeamBlast joined
[05:44] *** bjz left
[05:53] *** TeamBlast left
[06:06] *** ambs left
[06:06] *** ambs joined
[06:07] *** CIAvash joined
[06:10] *** TeamBlast joined
[06:11] *** colomon left
[06:21] *** sno left
[06:26] *** rgrinberg left
[06:28] *** firstdayonthejob joined
[06:30] *** domidumont joined
[06:35] *** domidumont left
[06:35] *** firstdayonthejob left
[06:36] *** domidumont joined
[06:40] *** abraxxa joined
[06:40] *** jack_rabbit left
[06:41] *** jack_rabbit joined
[06:47] *** girafe joined
[06:47] *** wamba joined
[06:56] *** colomon joined
[06:57] *** domidumont left
[07:00] *** darutoko joined
[07:02] *** jonas2 joined
[07:17] <moritz> \o SHODAN, masak, *

[07:17] <SHODAN> morning

[07:17] <timotimo> greetings y'all

[07:19] *** espadrine joined
[07:20] <moritz> good morning timotimo 

[07:26] <DrForr> We have someone rated shodan here? Wow.

[07:26] *** addison left
[07:27] <timotimo> rated?

[07:28] <DrForr> It's a rating in Go. (the game, not the language.)

[07:29] <timotimo> oh, i did not know that

[07:29] <timotimo> i only knew shodan from system shock so far

[07:30] <DrForr> And I didn't know about system shock. (not much of a gamer, I'm afraid.)

[07:31] *** zakharyas joined
[07:32] <DrForr> https://scontent.fomr1-1.fna.fbcdn.net/v/t1.0-9/13620789_10153709874747078_1964457300833903422_n.jpg?oh=0771392eadd2b3985971183a608f5a50&oe=582BA7D7

[07:34] <timotimo> anything special about the game on the board?

[07:34] <timotimo> i mean, the particular state the game is in

[07:35] <SHODAN> hm

[07:37] <SHODAN> 十段

[07:40] <DrForr> It's an endgame, without being able to see the bowl lids I think Pikachu is ahead by 4 or 5 stones.

[07:45] *** RabidGravy joined
[07:49] *** holyghost joined
[07:50] <holyghost> Hello

[07:51] <holyghost> perl6 "needs" a 3D kit such as panda3d for python, although perl6 is preliminary

[07:52] <holyghost> Probably there doesn't exist a package for this

[07:52] <holyghost> You can probably bind the C++ of panda3d

[07:52] <holyghost> e.g. I am not going to do it

[07:53] <holyghost> The window system are legion

[07:53] <DrForr> perl6 "needs" a lot of things. It also needs volunteers.

[07:53] <holyghost> s/ssystem/systems/

[07:53] <moritz> holyghost: you can probably use panda3d with Inline::Python in Perl 6

[07:53] <holyghost> ah ok

[07:54] <holyghost> So there is parrot in there

[07:54] <moritz> native would be nicer, but orders of magnitude more work

[07:54] <moritz> holyghost: no, parrot is dead

[07:54] <DrForr> There's Inline::Python, don't confuse it with parrot.

[07:54] <holyghost> ok

[07:54] <moritz> holyghost: we run Perl 6 on MoarVM, and Inline::Python uses python's C API through our FFI library

[07:54] <moritz> which is totally cool, and you should check it out!

[07:55] <moritz> see https://docs.perl6.org/language/nativecall.html

[07:55] *** abraxxa left
[07:55] <moritz> uhm, since when do we have redirect to .html extensions on doc.perl6.org? :(

[07:55] *** abraxxa joined
[07:55] <moritz> seems we don't

[07:55] <moritz> https://docs.perl6.org/language/nativecall

[07:56] <moritz> I'm just dazed and confused, as always

[07:56] <holyghost> so is it Python.h based ?

[07:57] <moritz> well, it doesn't read the header file, but it does use the functions declared in that header file

[07:58] <holyghost> ok

[07:59] <holyghost> It looks like a long way to go for having bindings

[07:59] <holyghost> Documentation is somewhat obscure

[07:59] <holyghost> Then again we only exit for 6 months

[07:59] <holyghost> s/sexit/exists/

[07:59] <moritz> #pexit!

[08:00] <moritz> holyghost: what part do you find obsucre?

[08:00] <holyghost> Well, the bridge to Python.h or other header files is not staright-on

[08:01] <holyghost> I understand the CStruct system 

[08:01] <moritz> holyghost: you *can* just use Inline::Python

[08:01] <moritz> it's just a different layer of interface

[08:01] <holyghost> ok

[08:01] <moritz> it also doesn't auto-generated classes based on header files, but that's not an issue with the documentation

[08:01] <moritz> (I think there are modules that attempt that)

[08:02] <holyghost> ok, but maybe Inline::Python should be documented

[08:03] *** zakharyas left
[08:03] *** abraxxa left
[08:03] <holyghost> If only I had the time to bind in a good 3D engine as a game developer I am

[08:03] <timotimo> gptrixie is the module that turns .h files into p6 code that uses nativecall

[08:04] <timotimo> Inline::Python isn't part of perl6, it's a module from the community

[08:04] <DrForr> Inline::Python has docs, last time I checked.

[08:04] *** abraxxa joined
[08:04] <timotimo> therefore, you won't find docs for it on doc.perl6.org, nor should you be able to

[08:04] <timotimo> (my 2ct)

[08:04] <holyghost> right

[08:05] <holyghost> Something I don't know is the C++ bindings, they're in Inline moduel too ?

[08:05] <holyghost> s/moduel/module/

[08:06] <holyghost> I just really hope the modules.perl.org stays stable for win32 and linux, 

[08:06] <moritz> the docs for NativeCall do mention them, though only briefly

[08:06] <moritz> they're rather experimental

[08:06] <holyghost> that's what I know too

[08:07] <moritz> in general, binding to C++ code through a FFI is a rather sketchy business, because the name mangling that C++ compilers use is implementation specific

[08:07] <moritz> you get much robuster results from writing a slim C wrapper around the C++ and build your FFI around that C wrapper

[08:07] <holyghost> I understand somewhat, should they be "extern C"-d ?

[08:08] <moritz> yes

[08:08] <holyghost> ok

[08:08] <holyghost> that's what I thought

[08:08] <holyghost> C++ is always a bad backend

[08:08] <holyghost> unless you know how to program the thing

[08:09] *** girafe left
[08:10] <holyghost> There's no search for 'ython' or Inline on docsperl.org

[08:10] <holyghost> ah right, it is an outside module

[08:11] <moritz> http://modules.perl6.org/#q=ython

[08:12] *** brrt joined
[08:14] <holyghost> Would it be possible to load panda3d (3D lib) with perl6 ?

[08:14] <holyghost> FYI, panda3d and panda clashes names

[08:14] <DrForr> You can write your own binding with NativeCall, of course.

[08:15] <holyghost> moritz, ok, thanks for the link

[08:15] <timotimo> ah, yeah, panda3d installs a binary named "panda" in the system

[08:16] <holyghost> rakudo <-> naruto

[08:16] <holyghost> I almost misread that one :-)

[08:16] <holyghost> naruto is a beatemup game

[08:17] <holyghost> panda3d is CMU, so it shouldn't be too stupid to include

[08:18] <holyghost> With a choice of 3D engines on the go

[08:18] <holyghost> pffffft, I might have a look at it

[08:18] *** sno joined
[08:19] <holyghost> I'd have to contact Larry to have the greater hive mind decide what we want as a 3D engine, althgouh options are ok

[08:19] <holyghost> :-)

[08:20] <holyghost> Please do not do the GL, for it is old and uncantanerous

[08:21] <timotimo> at this very moment, perl6 is a poor choice for game dev, as it's not performant enough for anything at 60 fps

[08:21] <holyghost> I made a 2D game with it with SDL2::Raw

[08:21] <timotimo> me, too

[08:21] <timotimo> i made the stuff you can find in examples/

[08:22] <holyghost> ah ok

[08:22] <holyghost> I need to make e.g. xpm point buffers still

[08:22] <holyghost> s/point/pixel/

[08:22] <holyghost> It's great stuff in perl6

[08:22] <holyghost> thanks

[08:23] <holyghost> I used the key bindings from there

[08:23] <holyghost> %down_keys IIRC

[08:23] *** rindolf joined
[08:25] <holyghost> Anyway I am working on a simple 3D game in panda3D tomorrow, I just wanted to help out the perl6 crew

[08:25] <holyghost> The point is I am not too good in perl6, NativeCall and so on

[08:26] <timotimo> cool

[08:26] <holyghost> I think I don't copy your arguments about Inline::Python

[08:26] <holyghost> e.g. the pm6 file could be doced, I read on the mailing lists they just got into pod6

[08:27] <timotimo> what got into pod6?

[08:27] <holyghost> I don't remember, read the perl6-X mailing lists

[08:27] <holyghost> old tome perl pods

[08:27] <holyghost> s/tome/time

[08:28] <timotimo> i don't follow

[08:28] <holyghost> well, there's just talk for pod6

[08:29] <holyghost> IIRC manpages for example

[08:29] <timotimo> ah, yes. we don't have pod2man yet

[08:29] <timotimo> and that was deemed necessary, because rakudo needs a man page for the "perl6" command

[08:30] <holyghost> indeed

[08:30] <holyghost> Then people can search google for man perl6 1 and so on :-)

[08:31] <holyghost> which is a Good Thing *lol*

[08:34] <timotimo> maybe the best documentation for Inline::Python is its tests, but i seem to recall there were some slides nine made about that module

[08:34] *** holyghost_ joined
[08:35] <holyghost_> oops disconnected cable

[08:35] <holyghost_> re and os on

[08:35] <timotimo> i just wrote: "maybe the best documentation for Inline::Python is its tests, but i seem to recall there were some slides nine made about that module"

[08:38] *** holyghost left
[08:38] *** holyghost_ is now known as holyghost

[08:39] <holyghost> Doesn't build here (LibraryMake)

[08:40] <holyghost> I am going AFK for a a time, bbl

[08:47] *** domidumont joined
[08:48] *** pmqs left
[08:49] <holyghost> Does it make sens to report panda errors for 2016.01 ?

[08:49] <holyghost> s/sens/sense

[08:50] <holyghost> stable rakudo windows

[08:51] <nine> DrForr: Inline::Python's docs are....lacking :)

[08:53] *** holyghost left
[08:53] <DrForr> Yeah, I was just checking into that.

[08:58] *** espadrine left
[09:00] *** canopus left
[09:03] *** dwarring left
[09:04] *** holyghost joined
[09:04] *** gnull left
[09:04] <holyghost> My system doesn;t seem to be able to build Inline::Python

[09:04] <holyghost> linux and windows stable rakudo

[09:05] <holyghost> I've sent some email to perl6-compiler

[09:05] * holyghost curses

[09:05] *** pmurias joined
[09:06] <holyghost> Then I cannot do anythong for panda3d until your hive mind finds something

[09:06] * holyghost is a lost soul now

[09:07] <pmurias> holyghost: re what we want as a game engine, there won't be an *official* Perl 6 game engine

[09:07] *** holyghost_ joined
[09:08] *** canopus joined
[09:09] <holyghost_> *drink* *girls*

[09:11] *** holyghost left
[09:11] *** holyghost_ is now known as holyghost

[09:13] <holyghost> Thanks a lot #perl6

[09:15] *** domidumont left
[09:15] *** luiz_lha joined
[09:15] *** luiz_lha is now known as Guest91181

[09:16] <holyghost> I bought 'The Police - greatest hits' on iTunes a few hours ago'

[09:16] <holyghost> Everything is polcified somehow

[09:17] <holyghost> s/somehow/somehow now/

[09:17] *** Guest91181 is now known as luiz_lha

[09:17] *** tbrowder joined
[09:17] <holyghost> It'd be my main music man

[09:18] <holyghost> I have this iPhone 4 around you see

[09:18] <holyghost> s/around/sitting around/

[09:18] *** tbrowder left
[09:18] <holyghost> *k-pow*

[09:19] <holyghost> foritying k-rads in civilization

[09:19] * holyghost is a bit drunk

[09:19] <holyghost> freeciv is the way to go

[09:25] *** wamba left
[09:27] *** holyghost_ joined
[09:27] *** holyghost_ left
[09:30] *** holyghost left
[09:31] *** labster left
[09:32] *** ufobat joined
[09:32] <ufobat> hey hey :D

[09:53] *** holyghost joined
[09:58] *** zakharyas joined
[10:01] *** sammers joined
[10:02] *** holyghost left
[10:02] *** TEttinger left
[10:08] *** bjz joined
[10:09] *** tbrowder joined
[10:09] <tbrowder>  mornin' #perl6

[10:16] *** Woodi joined
[10:17] <tbrowder>  IMHO ref docs: I see a need for a table of operators. The current list is not so bad but it is too much detail and not organized for someone new to p6 or someone who is looking for a particular operator.

[10:21] *** moray_ joined
[10:22] *** domidumont joined
[10:23] <tbrowder> ref docs oper table: The operator table should at least have the unicode symbol in the first column, then the Texas variant in the second column, then the type  (prefix, infix, etc.), then the name, then maybe a SHORT example and a link to a full description and one or more good examples.

[10:27] *** iH2O joined
[10:30] <moritz> tbrowder: sounds sensible

[10:35] <tbrowder> moritz: off the top of your head, is there a single place in the code to grep out a list for a start?

[10:35] <tbrowder> or i guess one could start with the existing table...

[10:36] *** holyghost joined
[10:38] *** wamba joined
[10:40] <timotimo> you can grep through CORE:: for things starting with & and having <, «, << in its name

[10:41] <arnsholt> Alternatively, /fix:/ should get most of them as well, I think

[10:42] *** bjz left
[10:46] <tbrowder>  good ideas, thanks

[10:52] <jnthn> Also you can grep for /token \s+ < infix prefix postfix > ':'/ in src/Perl6/Grammar.nqp

[10:52] <jnthn> Which will catch thunk-y operators too

[10:56] <tbrowder>  jnthn: roger

[10:58] *** kurahaupo joined
[11:03] *** cog__ joined
[11:03] *** cog_ joined
[11:06] *** kurahaupo left
[11:09] *** kid51 joined
[11:15] *** wamba left
[11:15] *** wamba joined
[11:19] *** kurahaupo joined
[11:19] *** kurahaupo left
[11:19] *** iH2O left
[11:24] <holyghost> ok, no more panda3d for me, I'll use the xcode game starter code

[11:49] * holyghost ponders on panda3d

[11:54] <gfldex> tbrowder: did you see the following (outdated) table? http://www.ozonehouse.com/mark/periodic/

[12:08] <tbrowder> gfldex: yes, but I forgot about it--thanks!

[12:11] *** kid511 joined
[12:11] <BrokenRobot> bisect: say ^10 .grep: { last if * > 2 }

[12:11] <bisectable> BrokenRobot: exit code is 0 on both starting points, bisecting by using the output

[12:11] <bisectable> BrokenRobot: (2016-03-18) https://github.com/rakudo/rakudo/commit/6d120ca

[12:12] *** kid51 left
[12:13] <TimToady> m: my %hash; %hash<names> = 'jim', 'bob', 'joe'; for %hash<names>[] -> $name { say "My name is $name" }

[12:13] <camelia> rakudo-moar 303e77: OUTPUT«My name is jim␤My name is bob␤My name is joe␤»

[12:13] <TimToady> sammers: ^^^ I usually prefer the postfix "Zen" slice for that purpose, to preserve left-to-right-ness

[12:14] <TimToady> m: my %hash; %hash<names> = 'jim', 'bob', 'joe'; for %hash<names>.list -> $name { say "My name is $name" }

[12:14] <camelia> rakudo-moar 303e77: OUTPUT«My name is jim␤My name is bob␤My name is joe␤»

[12:14] <TimToady> that also works, doesn't have to be an Array cast, which is a bit more wasteful than converting to a list

[12:15] <TimToady> (the Zen slice really just calls .list underneath, iirc)

[12:16] <TimToady> maybe we should rename panda to p6nda or so

[12:19] *** Actualeyes left
[12:27] *** pmurias_ joined
[12:31] *** pmurias left
[12:32] <perlpilot> .oO( Perl 6 Non Disclosure Agreement? )

[12:34] <DrForr> someone pointed out that panda3d was a game library, hence the notion.

[12:34] *** domidumont left
[12:36] <holyghost> DrForr, it's a 3D library, and naruto <-> rakudo

[12:36] <holyghost> Python and C++

[12:36] *** dvinciguerra joined
[12:37] <DrForr> When I've got some free time I mean to finish kicking the Vulkan library into shape so I can bind to it. I've worked w/ OpenGL before and think it'd be interesting, but other projects intervene.

[12:38] <DrForr> As they always do.

[12:38] <holyghost> k, we do need a modules.perl6.org 3D too eventually

[12:38] * holyghost concurs

[12:38] <DrForr> Patches welcome :)

[12:39] <holyghost> *lol*

[12:39] *** Actualeyes joined
[12:39] <holyghost> GL is too old for that in module SDL

[12:41] <holyghost> module SDL2::Raw is just SDL2, I do not know much about it though

[12:41] <dalek> doc/GT#155: 412f6c0 | (Wenzel P. P. Peppmeyer)++ | template/search_template.js:

[12:41] <dalek> doc/GT#155: cheat # into index

[12:41] <dalek> doc/GT#155: review: https://github.com/perl6/doc/commit/412f6c0945

[12:41] <dalek> doc/GT#155: f382bbc | (Wenzel P. P. Peppmeyer)++ | lib/Pod/Htmlify.pm6:

[12:41] <dalek> doc/GT#155: add caching for link-rewrite

[12:41] <dalek> doc/GT#155: review: https://github.com/perl6/doc/commit/f382bbc9f4

[12:41] <dalek> doc/GT#155: 481cb5b | (Wenzel P. P. Peppmeyer)++ | template/search_template.js:

[12:41] <dalek> doc/GT#155: cheat #` into index

[12:41] <dalek> doc/GT#155: review: https://github.com/perl6/doc/commit/481cb5b19f

[12:46] <DrForr> Vulkan is the engine underlying the release of Doom IV or whatever number they're up to by now, it was a big splash a month or so ago, or at least as much of a splash as those things get.

[12:47] <holyghost> I am just curious, is it shifted Quake (id.com) ?

[12:47] <timotimo> vulkan isn't an engine, though

[12:47] <gfldex> DrForr: actually, Doom didn't come with Vulkan support see https://www.bluesnews.com/s/173036/doom-adds-vulkan-support

[12:48] * holyghost reads it

[12:49] <BrokenRobot> holyghost: they had a demo video available a couple of days before release: https://www.youtube.com/watch?v=0y3LaLJoo0s

[12:49] <DrForr> Very well, allow me to correct my claim to "I saw that some flashy new game used it rather than Direct3D and thought it would make a nice addition, since it was supposed to be the next OpenGL."

[12:50] <holyghost> Iam not following, what did the Khronos crew do ?

[12:51] <DrForr> Sigh, I refer all interested to the Wikipedia entry. I'm trying to finish a Perl6::Tidy, so it's on the proverbial back burner for the moment in *any* case.

[12:52] <dalek> doc: 3aa0ecb | (Wenzel P. P. Peppmeyer)++ | htmlify.p6:

[12:52] <dalek> doc: - rewrite output filenames

[12:52] <dalek> doc: - warn on duplicate filenames

[12:52] <dalek> doc: - write list of links into html/links.txt

[12:52] <dalek> doc: review: https://github.com/perl6/doc/commit/3aa0ecbb5b

[12:52] *** dalek left
[12:53] *** dalek joined
[12:53] *** ChanServ sets mode: +v dalek

[12:53] <holyghost> ok

[12:54] <gfldex> what dalek tried to tell us is, that I just merged the branch that fixes search for $/ and other tricky URLs

[12:54] <gfldex> if docs.perl6.org stops working in 20min or so, it's all my fault

[12:55] <holyghost> probably we need something GL for crowders but I see SDL coming for that if the module maintainer wants it

[12:56] <holyghost> In SDL it's just a flag variable which gets loade so you can load GL syntax

[12:56] <holyghost> it's a SDL software backend

[12:57] <gfldex> them Doom folk say they got 26% better fps with vulkan, what is a big jump

[12:59] <DrForr> That's what got my attention, and again I happen to like the OpenGL API. Not to mention, it would give me a chance to actually put Math::Quaternion to some actual work.

[12:59] <holyghost> gfldex, I would support both 

[12:59] <holyghost> DrForr, coolnes

[12:59] <DrForr> (not that I'm the author... I did want to do more with it though...)

[13:00] <holyghost> say Quartz

[13:01] *** movl joined
[13:02] <holyghost> Quartz is mac GL, mesa and OpenGL is windows/linux GL

[13:03] <holyghost> opengel.org

[13:03] <holyghost> s/opengel.org/opengl.org/

[13:03] <holyghost> featuritis there would be cool

[13:04] <DrForr> I remember something of Quartz back when OS X was just coming out. Seemed like Quickdraw GX on steroids at the time.

[13:04] * brrt still has a wasted video card because of stubbornly refusing to run nvidia drivers

[13:05] <DrForr> brrt: That's why I ended up with a SteamOS VM :)

[13:05] <holyghost> DrForr, I had a G3 mack then but I ran debian on it

[13:05] <brrt> what, on earth, is that

[13:05] *** jack_rabbit left
[13:06] <holyghost> Is it possible with th current rakudo thing to build seperate binaries per OS ?

[13:06] <BrokenRobot> holyghost: of rakudo or of your script?

[13:06] *** rgrinberg joined
[13:07] <holyghost> BrokenRobot, rakudo (panda) 

[13:07] <brrt> that probably depends on the operating system independence of the moarvm or jar bytecode files

[13:07] <holyghost> moarvm I mean

[13:07] <brrt> frankly, i'm not sure if that has been tested

[13:08] <holyghost> so it needs tuning

[13:08] <brrt> it ought to be; i know there's been work in moarvm to make the files more cross-platform by not relying on endianess

[13:08] <holyghost> sure

[13:08] <brrt> and you'll need some scripting to make different versions (runners) probably

[13:08] <holyghost> brrt, the thing is you can rely on frameworks in macos x

[13:09] <brrt> there's been talk of doing a fakexecutable / self-contained rakudo

[13:09] *** Sgeo left
[13:09] <holyghost> raagh, perl5

[13:10] <brrt> holyghost: can you elaborate? i'm not familiar with mac os x library structure

[13:10] <holyghost> modules.perl6.org needs to be 

[13:10] <holyghost> brrt, you need to plug in into macos x with rakudo then

[13:11] <holyghost> different C API

[13:11] <holyghost> the headers exist to make a Quartz GL for Perl6

[13:11] <brrt> i'm still not sure i understand what you mean :-)

[13:11] <holyghost> s/headers/C headers/

[13:11] <BrokenRobot> holyghost: are you drunk again? :)

[13:11] <holyghost> sure I am, 5 pints only :-)

[13:12] <holyghost> brrt, do not worry about it :-)

[13:12] <BrokenRobot> holyghost: tsk tsk. I thought you were gonna switch to coffee as the drug of choice :)

[13:12] * holyghost machine's too slow

[13:12] <holyghost> I run a powerpc mac you know :-)

[13:13] <holyghost> brrt, I am a bit drunk sometimes, I explain

[13:13] <holyghost> It's sugar in the morning habit to code

[13:13] <holyghost> you shouldn't rely on beer but you do need to drink sugar to hack

[13:13] <holyghost> brrt, do not worry about it

[13:14] <brrt> well, ehm, caffeine works for me usually

[13:14] <holyghost> that's great

[13:14] <holyghost> I only try to help out

[13:14] <holyghost> I am going to look into panda3d apps then I make it tot the perl6 crew's 3D system

[13:15] *** Sgeo joined
[13:16] *** mcmillhj joined
[13:16] *** adu joined
[13:18] <holyghost> rivendel:~/perl6 bubble$ ./get_rakudo.sh 2016 04

[13:19] <BrokenRobot> That's ancient :)

[13:19] <dalek> doc: 8774321 | (Wenzel P. P. Peppmeyer)++ | doc/Language/typesystem.pod6:

[13:19] <dalek> doc: fix open C<>

[13:19] <dalek> doc: review: https://github.com/perl6/doc/commit/8774321879

[13:22] <holyghost> ancient is me *lol*

[13:22] <holyghost> I need these 2 daughters to have a WiiU softwise :-)

[13:23] <holyghost> It's all paid for of course :-)

[13:24] <holyghost> The only problem is that they only have a dell latitude to play games an ipad of my father

[13:24] <holyghost> Mom's not into games really :-)

[13:25] *** skids joined
[13:26] <BrokenRobot> There's a bug in the RT queue about "unit sub MAIN". Does anyone know the ID? I'm failing to find it

[13:29] <holyghost> So I need to hook up libwiiu into perl6

[13:29] <holyghost> it's on github wiiudev

[13:34] *** El_Che joined
[13:34] <holyghost> I am dowloading panda3d on a 10.5 mac, I'll see what it can do

[13:36] *** gcole left
[13:40] *** gcole joined
[13:44] <BrokenRobot> screw it. Can't find that ticket, but I only wanted it for a blog post. So never mind

[13:44] <holyghost> coolnes

[13:45] <holyghost> Maybe I can get a rakudo on PowerPC mac to work

[13:46] <holyghost> I'll probably post the binary to [email@hidden.address] if I succeed

[13:46] * holyghost is compiling

[13:46] *** pdcawley left
[13:47] <holyghost> 66 12.2M   66 8371k    0     0   4887      0  0:43:42  0:29:13  0:14:29  4600

[13:48] <holyghost> thanks a lot for those archwizard systems *lol*

[13:49] <holyghost> fer anybody

[13:49] <holyghost> re 9

[13:50] * holyghost needs to buy another iBook G4 second hand

[13:56] <arnsholt> Amazon has my tastes nailed down: One of the suggestions is "The Associated Press Guide to Punctuation"

[13:56] <arnsholt> Which I had no idea was a thing, and totally sounds fascinating =D =D =D

[14:00] *** cdg joined
[14:02] *** zakharyas left
[14:02] *** zakharyas joined
[14:05] *** takadonet joined
[14:05] <takadonet> morning everyone

[14:05] *** domidumont joined
[14:06] *** canopus left
[14:06] <BrokenRobot> \o

[14:07] *** zakharyas left
[14:07] <BrokenRobot> corefacility... sounds important :)

[14:07] <takadonet> Trying to get this example of using inline::python and matplotlib to work but it seems that it's ignorning all named parameters . Anyone have an idea what I am doing wrong? https://gist.github.com/Takadonet/03d9139541543a566372e2dfe80885d2

[14:08] *** dvinciguerra left
[14:09] <BrokenRobot> As a sidenote: explode=>$explode  can be written much shorter as :$explode

[14:12] <BrokenRobot> takadonet: the *@ only gets positional arguments. *% gets positional ones

[14:12] <BrokenRobot> s:2nd/positonal/named/;

[14:12] <BrokenRobot> In your fallback method

[14:14] <BrokenRobot> m: class { method FALLBACK ($name, *@pos) { say "$name {@pos};" }}.new.meow: 1, 2, 3, :foo, :42bar

[14:14] <camelia> rakudo-moar 66a592: OUTPUT«meow 1 2 3;␤»

[14:15] <BrokenRobot> m: class { method FALLBACK ($name, *@pos, *%named) { say "$name {@pos};\n{%named}" }}.new.meow: 1, 2, 3, :foo, :42bar

[14:15] <camelia> rakudo-moar 66a592: OUTPUT«meow 1 2 3;␤bar      42␤foo  True␤»

[14:15] *** AndyBotwin joined
[14:15] <takadonet> so I should make my fallback a multi and include the header to have *%x as well?

[14:15] <BrokenRobot> takadonet: it doesn't need to be a multi. *% is slurpy and will simply be empty if there are no positionals.

[14:16] <BrokenRobot> You just need to merge it with the args in *@ when you call the python function (I've no idea how that would look like)

[14:18] *** brrt left
[14:19] *** movl left
[14:20] *** dvinciguerra joined
[14:26] <dalek> doc: d709afd | (Wenzel P. P. Peppmeyer)++ | doc/Language/syntax.pod6:

[14:26] <dalek> doc: show namespaces for identifiers

[14:26] <dalek> doc: review: https://github.com/perl6/doc/commit/d709afd13e

[14:26] <dalek> doc: ef6ebad | (Wenzel P. P. Peppmeyer)++ | doc/Language/packages.pod6:

[14:26] <dalek> doc: add ::,packages to index

[14:26] <dalek> doc: review: https://github.com/perl6/doc/commit/ef6ebadd42

[14:30] <tbrowder> travis doc build problem: see gist https://gist.github.com/tbrowder/025a09fb8d1fa8b0b5988b1788b73a2d

[14:31] *** canopus joined
[14:32] <tbrowder> gdflex: I'm trying to add specs/S26*.pod6 to the main docs and it looks like some features aren't handled (# in numbering, for one).  I don't know yet where the problem really is, but I have to be away for a few hours.  Any ideas would be helpful for later today.

[14:33] <gfldex> tbrowder: numbered item lists are not supported by Pod::To::HTML because there is no way to reset the counters.

[14:33] <gfldex> tbrowder: what results that you can't have more then one numbered item list per .pod file

[14:33] <BrokenRobot> IIRC some of the stuff is NIY in Rakudo. There's a note on design.perl6.org for S26 spec: "(HTML rendering of S26 is known to be incomplete)"

[14:34] <gfldex> tbrowder: Pod::To::HTML is a tangled mess that I wont touch before I got .parent in Pod::Block.

[14:35] *** AlexDaniel joined
[14:35] *** ptolemarch joined
[14:37] *** domidumont left
[14:38] *** canopus left
[14:38] *** holyghost left
[14:40] <japhb> If I've got a ragged AoA (in this case representing columns of text, each split into lines) that I want to zip into rows (so each row of the zipped array contains one line from each column), but I want to continue zipping to the *longest* array member, rather than shortest (missing values can just be e.g. the default value for each subarray), what's the current idiom?

[14:40] *** Coleoid_n joined
[14:43] *** canopus joined
[14:45] <moritz> japhb: iirc we have an extra function for that, roundrobin

[14:45] <moritz> m: say roundrobin(<a b c>, <a b>)

[14:45] <camelia> rakudo-moar 66a592: OUTPUT«((a a) (b b) (c))␤»

[14:46] <moritz> m: say roundrobin(<a b c>, <a b>, <a b c d>)

[14:46] <camelia> rakudo-moar 66a592: OUTPUT«((a a a) (b b b) (c c) (d))␤»

[14:46] <japhb> moritz: That's missing the markers showing the empty spots

[14:46] <moritz> hm, that's likely not what you want

[14:46] <japhb> yeah

[14:46] <japhb> (I tried that one already.  ;-) )

[14:46] <moritz> in that case, you either have to fill the arrays, or do a manual operation

[14:47] <japhb> moritz: I was afraid you were going to say that.  Ah well

[14:48] <moritz> m: @aoa = [<a b c>], [<a b>]; say zip(@aoa.map(*.push(Any xx*)).head(@aoa.map(*.elems).max)

[14:48] <camelia> rakudo-moar 66a592: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '@aoa' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5@aoa = [<a b c>], [<a b>]; say zip(@aoa.␤»

[14:48] <perlpilot> find the length of longest (call it $n), then do something like @a[^$n] Z @b[^$n]

[14:48] <moritz> m: my @aoa = [<a b c>], [<a b>]; say zip(@aoa.map(*.push(Any xx*)).head(@aoa.map(*.elems).max)

[14:48] <camelia> rakudo-moar 66a592: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' ␤at <tmp>:1␤------> 3sh(Any xx*)).head(@aoa.map(*.elems).max)7⏏5<EOL>␤»

[14:48] <moritz> m: my @aoa = [<a b c>], [<a b>]; say zip(@aoa.map(*.push(Any xx*))).head: @aoa.map(*.elems).max

[14:48] <camelia> rakudo-moar 66a592: OUTPUT«((a a) (b b) (c (...)))␤»

[14:48] <japhb> perlpilot: Workable idea for two columns, but what about N?

[14:48] *** canopus left
[14:49] <perlpilot> japhb: that's left as an exercise for the reader  ;)

[14:49] <BrokenRobot> :D

[14:49] <japhb> perlpilot: :-P  :-D

[14:49] *** rindolf left
[14:49] <perlpilot> japhb: btw, your question was an excellent one.  It mayn't be a FAQ, but it's something I could have seen myself asking at some point.

[14:50] <moritz> m: my @aoa = [<a b c>], [<a b>]; my $max = @aoa.map(*.elems).max; say zip(@aoa.map: { .push: Any xx $max - .elems })

[14:50] <camelia> rakudo-moar 66a592: OUTPUT«((a a) (b b) (c ((Any))))␤»

[14:50] <japhb> perlpilot: I try.  ;-)

[14:50] <japhb> moritz: Ooh, that's getting close

[14:50] <moritz> m: my @aoa = [<a b>], [<a b c>], [<a b c d>]; my $max = @aoa.map(*.elems).max; say zip(@aoa.map: { .push: Any xx $max - .elems })

[14:50] <camelia> rakudo-moar 66a592: OUTPUT«((a a a) (b b b) (((Any) (Any)) c c))␤»

[14:50] <japhb> D'oh

[14:50] <psch> m: my @a = [1,2,3], <a b c d>; my @b = do gather { take @a[*;$_] for ^(@a>>.elems.max) }; say @b.perl

[14:50] <camelia> rakudo-moar 66a592: OUTPUT«[(1, "a"), (2, "b"), (3, "c"), (Any, "d")]␤»

[14:51] <moritz> psch++

[14:51] <japhb> psch: ^H^H++

[14:51] <psch> spurious "do", i think though

[14:51] <japhb> heh, damn lag

[14:51] <moritz> m: my @a = [1,2,3], <a b c d>; my @b = gather for ^(@a>>.elems.max) {take @a[*;$_] }

[14:51] <camelia> rakudo-moar 66a592: ( no output )

[14:51] <moritz> m: my @a = [1,2,3], <a b c d>; my @b = gather for ^(@a>>.elems.max) {take @a[*;$_] }; say @b

[14:51] <camelia> rakudo-moar 66a592: OUTPUT«[(1 a) (2 b) (3 c) ((Any) d)]␤»

[14:53] <psch> m: my @a = [1,2,3], <a b c d>; my @b = gather for ^(@a[].max) {take @a[*;$_] }; say @b # but golfed

[14:53] <camelia> rakudo-moar 66a592: OUTPUT«[(1 a) (2 b) (3 c) ((Any) d)]␤»

[14:53] <psch> *bit

[14:53] <japhb> psch++ again

[14:54] <psch> although >>.elems.max is way more explicit :)

[14:54] *** canopus joined
[14:54] <perlpilot> m: my @aoa = [<a b>], [<a b c>], [<a b c d>]; $max = @aoa.map(*.elems).max; say zip @aoa.map(*.[^$max]);  # curious

[14:54] <camelia> rakudo-moar 66a592: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$max' is not declared. Did you mean '&max'?␤at <tmp>:1␤------> 3@aoa = [<a b>], [<a b c>], [<a b c d>]; 7⏏5$max = @aoa.map(*.elems).max; say zip @a␤»

[14:55] <japhb> True.  Though there's an evil part of me that likes the golfed one almost *because* you have to think about it.  :-)

[14:55] <perlpilot> m: my @aoa = [<a b>], [<a b c>], [<a b c d>]; my $max = @aoa.map(*.elems).max; say zip @aoa.map(*.[^$max]);  # curious

[14:55] <camelia> rakudo-moar 66a592: OUTPUT«((a a a) (b b b) ((Any) c c) ((Any) (Any) d))␤»

[14:55] *** cdg left
[14:55] <japhb> perlpilot++  # Found a generalization after all

[14:56] <perlpilot> japhb++  for getting #perl6 to do lots of work for you  ;)

[14:57] *** abraxxa left
[14:57] <hoelzro> o/ #perl6!

[14:58] <japhb> perlpilot: Now we just need to think of a name for this operation and add it to the setting.  :-)

[14:58] <moray_> Hello...I have perl6 installed with following versions (This is Rakudo version 2016.01.1 built on MoarVM version 2016.01). Can I upgrade with a perl6 command or do I download and install that way?

[14:59] <japhb> moray_: Installed how?

[14:59] <japhb> (your current version)

[14:59] <dalek> doc: 5ccce6c | (Wenzel P. P. Peppmeyer)++ | doc/Type/Any.pod6:

[14:59] <dalek> doc: fix typo in example

[14:59] <dalek> doc: review: https://github.com/perl6/doc/commit/5ccce6cbfb

[15:00] <moray_> I think I downloaded it and built it...follwoing something like this...http://perl6maven.com/tutorial/perl6-installing-rakudo. It was a while ago

[15:00] <perlpilot> japhb: indeed.  It's transpose-with-holes, but that name probably won't stick  :)

[15:00] *** huggable joined
[15:00] <japhb> zip-ragged, zip-longest, transpose-ragged

[15:01] <perlpilot> maybe we just need transpose with some modifiers;   @aoa.transpose(:ragged)

[15:02] *** domidumont joined
[15:02] *** canopus left
[15:02] <perlpilot> (@aoa.transpose without the modifier would fail if @aoa was ragged)

[15:02] <japhb> moray_: You should be able to do that again.  Or use rakudobrew, which is easier if you just want a working version you can keep up to date, instead of wanting to hack on the core

[15:02] <japhb> perlpilot: nodnod

[15:03] <japhb> Now that the method cache allows named args ...

[15:04] <psch> m: my @a = [1,2,3], <a b c d>; my @b = do @a[*;$_] for ^@a[].max ; say @b # don't even need gather/take

[15:04] <camelia> rakudo-moar 66a592: OUTPUT«[(1 a) (2 b) (3 c) ((Any) d)]␤»

[15:04] <psch> though the simple map call is definitely neater, perlpilot++

[15:04] <japhb> psch++  # Mad skillz

[15:04] <psch> eh, had i those i wouldn't have reached for gather/take in the first place :S

[15:05] <moray_> Ok, thanks...will look into rakudobrew

[15:05] <japhb> Right, because all the rest of us thought of @a[*;$].  ;-)

[15:09] *** canopus joined
[15:09] *** zakharyas joined
[15:09] <BrokenRobot> New blog post "A Date With The Bug Queue or Let Me Help You Help Me Help You": http://perl6.party/post/A-Date-With-The-Bug-Queue-or-Let-Me-Help-You-Help-Me-Help-You

[15:09] *** acrussell joined
[15:10] <hoelzro> BrokenRobot++

[15:13] *** brrt joined
[15:17] *** brrt left
[15:19] *** kid511 is now known as kid51

[15:24] *** robm joined
[15:26] *** domidumont left
[15:28] *** domidumont joined
[15:34] *** adu left
[15:35] *** wamba left
[15:35] *** wamba joined
[15:39] <dogbert17> o/ #perl6

[15:40] <dogbert17> .seen moritz

[15:40] <yoleaux> I saw moritz 14:51Z in #perl6: <moritz> m: my @a = [1,2,3], <a b c d>; my @b = gather for ^(@a>>.elems.max) {take @a[*;$_] }; say @b

[15:40] *** rgrinberg left
[15:40] *** RabidGravy left
[15:41] <dogbert17> I have scribbled together some docs for Str.samemark, does anyone have a few sec to review it? https://gist.github.com/dogbert17/3224c4290a01b94a023e03175dfafabe

[15:43] *** wamba left
[15:43] *** wamba joined
[15:43] * dogbert17 reads sexy-coder-girl's latest blog post in the meantime

[15:46] *** RabidGravy joined
[15:47] *** MilkmanDan left
[15:49] <perlpilot> dogbert17++  I'd want more information about the pattern as it's not clear how it interacts with the string, but that's a good start.

[15:49] *** grondilu joined
[15:49] *** MilkmanDan joined
[15:50] *** espadrine joined
[15:52] <dogbert17> perlpilot: thx for looking, I'll see what I can do, would appreciate a suggestion tho :)

[15:52] <perlpilot> dogbert17: aye, I'm thinking about it.

[15:52] <perlpilot> gimme a sec

[15:53] *** pmichaud left
[15:53] *** pmichaud joined
[15:54] <perlpilot> dogbert17: Change the first sentence to:   Returns a copy of C<$string> with the mark/accent information for each character changed such that it matches the mark/accent of the corresponding character in C<$pattern>.

[15:54] <perlpilot> though I'm not sure that "matches" is entirely clear.  But maybe it's just me.

[15:56] <perlpilot> anyway .. dogbert17++

[15:56] *** rindolf joined
[15:57] <dogbert17> perlpilot: gist has been updated

[15:57] *** rgrinberg joined
[15:58] <dogbert17> zoffix++ (blog post)

[16:01] *** Util joined
[16:01] *** masak joined
[16:02] *** masak is now known as Guest76029

[16:06] *** BrokenRobot is now known as MeowMix

[16:06] *** MeowMix left
[16:08] *** pmurias_ left
[16:11] *** Frameless joined
[16:18] <dalek> doc: 4445eef | (Jan-Olof Hendig)++ | doc/Type/Str.pod6:

[16:18] <dalek> doc: Added docs for Str.samemark. perlpilot++

[16:18] <dalek> doc: review: https://github.com/perl6/doc/commit/4445eef348

[16:23] <AlexDaniel> m: say ‘abcdefghijkclmnopqrstuvwxyz1234567890’.samemark(‘ẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑẑ’)

[16:23] <camelia> rakudo-moar 66a592: OUTPUT«âb̂ĉd̂êf̂ĝĥîĵk̂ĉl̂m̂n̂ôp̂q̂r̂ŝt̂ûv̂ŵx̂ŷẑ1̂2̂3̂4̂5̂6̂7̂8̂9̂0̂␤»

[16:23] *** ufobat left
[16:23] <timotimo> btw, people, the profiler will now no longer report craptonnes of BOOTHash allocations, so the profiles ought to be a lot closer to the unprofiled run in terms of run time and GC behavior

[16:24] <AlexDaniel> yaaay

[16:24] <AlexDaniel> m: say ‘a’.samemark(‘’)

[16:24] <camelia> rakudo-moar 66a592: OUTPUT«Cannot unbox a type object␤  in block <unit> at <tmp> line 1␤␤»

[16:24] <AlexDaniel> LTA-ish

[16:24] *** adu joined
[16:25] <[Coke]> isn't even a type object there.

[16:26] <psch> m: "".comb.shift

[16:26] <camelia> rakudo-moar 66a592: OUTPUT«Method 'shift' not found for invocant of class 'Seq'␤  in block <unit> at <tmp> line 1␤␤»

[16:26] <AlexDaniel> sure, just what are the chances that someone is going to use an empty string there

[16:26] <psch> m: (@="".comb).shift

[16:26] <camelia> rakudo-moar 66a592: OUTPUT«Cannot shift from an empty Array␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[16:26] <AlexDaniel> I'll rakudobug it anyway but it is one of those “who cares” bugs

[16:27] <dogbert17> AlexDaniel++

[16:27] <AlexDaniel> m: say ‘   ’.samemark(‘öńẑ’)

[16:27] <camelia> rakudo-moar 66a592: OUTPUT« ̈ ́ ̂␤»

[16:28] <dogbert17> one possibly odd thing with samemark, the sub is declared as multi but not the method

[16:29] <TimToady> m: say ‘abcdefghijkclmnopqrstuvwxyz1234567890’.samemark(‘ẑ’)

[16:29] <camelia> rakudo-moar 66a592: OUTPUT«âb̂ĉd̂êf̂ĝĥîĵk̂ĉl̂m̂n̂ôp̂q̂r̂ŝt̂ûv̂ŵx̂ŷẑ1̂2̂3̂4̂5̂6̂7̂8̂9̂0̂␤»

[16:29] <AlexDaniel> oh

[16:30] <TimToady> m: say ‘abcdefghijkclmnopqrstuvwxyz1234567890’.samemark(‘ẑ ’)

[16:30] <camelia> rakudo-moar 66a592: OUTPUT«âbcdefghijkclmnopqrstuvwxyz1234567890␤»

[16:30] <TimToady> to get the other thing

[16:32] <TimToady> we assume that actual accent marks are unlikely to use this mechanism, but the marks that can use it usefully will tend to want to repeat, like strike-throughs and such

[16:33] <dogbert17> interesting, so strike-through is a sort of accent then?

[16:33] <TimToady> m: say ‘abcdefghijkclmnopqrstuvwxyz1234567890’.samemark(‘o̶’)

[16:33] <camelia> rakudo-moar 66a592: OUTPUT«a̶b̶c̶d̶e̶f̶g̶h̶i̶j̶k̶c̶l̶m̶n̶o̶p̶q̶r̶s̶t̶u̶v̶w̶x̶y̶z̶1̶2̶3̶4̶5̶6̶7̶8̶9̶0̶␤»

[16:33] <dogbert17> cool

[16:33] <timotimo> timtoady went on strike today

[16:34] <dogbert17> so it seems :)

[16:34] <jnthn> m: say .chars, .codes given ‘abcdefghijkclmnopqrstuvwxyz1234567890’.samemark(‘o̶’) # curious

[16:34] <camelia> rakudo-moar 66a592: OUTPUT«3774␤»

[16:34] <dogbert17> hmm, maybe I should add this strike-through example to the docs

[16:35] <TimToady> you have an extra c in the middle, hence 37

[16:35] <jnthn> Oh... :)

[16:35] <jnthn> Though I was more curious how many in there were precomposed :)

[16:35] <TimToady> I don't think htere are any

[16:36] <jnthn> m: say .codes, .chars given ‘o̶’

[16:36] <camelia> rakudo-moar 66a592: OUTPUT«21␤»

[16:36] <jnthn> Yeah, even that one ain't :)

[16:36] <TimToady> my program always use o for the base character anyway

[16:36] <jnthn> m: say ‘o̶’.uninames

[16:36] <camelia> rakudo-moar 66a592: OUTPUT«(LATIN SMALL LETTER O COMBINING LONG STROKE OVERLAY)␤»

[16:37] *** rgrinberg left
[16:37] <timotimo> O COMBINING LONG STROKE OVERLAY, HOW BEAUTIFUL ART THINE LEAVES

[16:37] <jnthn> m: say "\c[CAT FACE]\c[COMBINING LONG STROKE OVERLAY]" # stroking the cat, the Unicode way :P

[16:37] <camelia> rakudo-moar 66a592: OUTPUT«🐱̶␤»

[16:38] *** zakharyas left
[16:38] *** dvinciguerra_ joined
[16:40] *** dvinciguerra left
[16:43] * AlexDaniel is seeing stroked ␤ character :(

[16:43] <geekosaur> "yay" rendering bugs

[16:44] <TimToady> it should look better, or at least righter, in the browser

[16:45] <geekosaur> (in my client, it's slightly offset, looks like the cat has its tongue stuck out toward the NL

[16:45] <AlexDaniel> that's how it looks like in the browser. In emacs I see two characters side by side…

[16:45] <TimToady> yeah, browser is wrong too here (ff)

[16:45] <jnthn> Chrome also

[16:45] <jnthn> Odd

[16:46] <[Coke]> ... I think it's funny that you think unicode rendering bugs are odd. :)

[16:46] <moritz> say " \c[COMBINING LONG STROKE OVERLAY] "

[16:46] <jnthn> Just curious how consistent the bug is :)

[16:46] <[Coke]> aren't they de rigueur?

[16:46] <moritz> m: say " \c[COMBINING LONG STROKE OVERLAY] "

[16:46] <camelia> rakudo-moar 66a592: OUTPUT« ̶ ␤»

[16:47] <TimToady> well, it's really two bugs in the browser, not only is it misplaced, but it seems to have width

[16:47] <moritz> it should be over the first space, right?

[16:47] <TimToady> correct

[16:47] <moritz> my terminal shows it over the second

[16:48] <TimToady> usually the browser does better than the terminal, but in this case it's worse

[16:48] <timotimo> impressive

[16:49] <moritz> reminds me of the one time I tried stretched text along a curve in SVG, and got three different and wrong rendering in three different engines

[16:49] <timotimo> \o/

[16:50] <timotimo> the most futurest of technologies

[16:50] *** Coleoid_n left
[16:50] <moritz> https://perlgeek.de/blog-en/misc/fun-and-no-fun-with-svg.html

[16:50] <moritz> ok, that was 2009

[16:50] <[Coke]> timotimo: https://www.youtube.com/watch?v=QHNkx9splAQ

[16:51] <timotimo> that sounds so weird in that short snippet

[16:51] <timotimo> i don't understand, why, though

[16:52] <moritz> muhaha, today my firefox renders it as Opera did in 2009: with the text scaled, but the path not visible

[16:52] <moritz> and Chromium does it as inkview did in 2009

[16:53] <moritz> and inkview is unchanged

[16:57] *** ufobat joined
[16:58] *** rgrinberg joined
[17:00] *** rindolf left
[17:06] *** rindolf joined
[17:10] *** cdg joined
[17:10] *** sno left
[17:17] *** kurahaupo joined
[17:18] *** jonas2 left
[17:20] *** firstdayonthejob joined
[17:30] *** FROGGS joined
[17:40] *** labster joined
[18:20] *** itaipu joined
[18:25] *** spider-mario joined
[18:25] *** a3r0 joined
[18:32] *** kurahaupo left
[18:35] *** comptezero joined
[18:36] <comptezero> it's possible to call perl6/jvm from java  ?

[18:37] *** domidumont left
[18:37] <timotimo> yeah, but maybe not the way you want it to

[18:37] <timotimo> check out the "evalserver" we have

[18:37] <timotimo> we use that to make spec tests finish before the heat death of the universe

[18:38] *** ptolemarch left
[18:39] <comptezero> i whan to call perl6 function/method from java servlet for example!

[18:41] *** sufrostico joined
[18:48] <[Coke]> I dont' think we have any docs on how to do that, and the jvm backend is not 100% at this point.

[18:48] *** pyrimidi_ left
[18:48] <[Coke]> so, if you want to pursue it, you may end up hitting a lot of rough edges at this point.

[18:48] *** pyrimidine joined
[18:49] *** rgrinberg left
[18:49] <comptezero> it's to use scripting language embeded in java

[18:49] *** marcool joined
[18:50] <comptezero> and i prefer coding in perl than python (jpython) or ruby (jruby)....

[18:52] *** ptolemarch joined
[18:52] <comptezero> it's in nqp code ? her : https://github.com/perl6/nqp/blob/master/src/vm/jvm/runtime/org/perl6/nqp/tools/EvalServer.java ?

[18:58] <geekosaur> I thought it was more than just rough edges? (specifically I thought the generated jvm code uses a different calling convention from anything else running on the jvm?)

[19:00] *** huggable left
[19:01] *** huggable joined
[19:05] *** kurahaupo joined
[19:05] *** kurahaupo left
[19:05] <Frameless> gfldex: were you able to solve the problem of chaining these custom ternaries? https://gfldex.wordpress.com/2016/07/05/2-2-3/

[19:06] <Frameless> I wanted to write Operator::CustomTernary, but the chaining issue set it on backburner. To me it looked like the only way to go is with slangs.

[19:06] <gfldex> Frameless: i didn't try to chain them yet.

[19:07] <Frameless> m: sub infix:<?> ($,$) {}; sub infix:<:> ($,$) {}; say True ? 1 : 2

[19:07] <camelia> rakudo-moar 66a592: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of ? and : for the ternary conditional operator; in Perl 6 please use ?? and !!␤at <tmp>:1␤------> 3) {}; sub infix:<:> ($,$) {}; say True ?7⏏5 1 : 2␤»

[19:07] <Frameless> And this too set me back. 'cause original plan was to enable people to use the traditional ternary :)

[19:08] *** kurahaupo joined
[19:08] *** rgrinberg joined
[19:09] *** kurahaupo left
[19:09] <Frameless> .oO( sub ternary:<? :> ($, $, $) {...} )

[19:10] <gfldex> m: https://gist.github.com/gfldex/2b546491fbbfd15caa0ad3e4faab15e0

[19:10] <camelia> rakudo-moar 66a592: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:16␤------> 3say $falsish7⏏5 ? 'defined' ! 'undefined';␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statemen…»

[19:10] *** darutoko left
[19:12] <[Coke]> the eval server isn't going to help you call perl6 code from java.

[19:12] <[Coke]> it's a way for us to avoid the startup cost of the JVM, an dwe use it when we have several hundred test files to process.

[19:14] <gfldex> Frameless: prefix:<?> could very well be special cased in the grammar.

[19:15] <ShimmerFairy> I'd be surprised if ternary:<> was a category you could add too, though the error with two infixes is perhaps a bit more LTA.

[19:15] <gfldex> it's not, defined in Bool.pm

[19:19] <gfldex> i would be more concerned about a : in the middle of an expression. There are so many uses for it in Perl 6 already, it would hardly improve the code.

[19:23] *** rgrinberg left
[19:23] <El_Che> If want to write a simple REST web app, preferrably something using the perl6 concurrency model, is there a consensus on a module to be used? I have looked at the modules directory, but I have no ide what's easy and yet mature/stable

[19:24] <Frameless> El_Che: NOT Bailador, it can't do concurrency at the moment.

[19:25] *** comptezero left
[19:25] <Frameless> El_Che: I think masak had good experience with HTTP::Server::Tiny

[19:26] <El_Che> Frameless: thx

[19:27] <Frameless> El_Che: oh, and Perl5's Mojolicious :)

[19:27] <El_Che> that's the thing about microservices and docker. You can use an other lang on every project, but don't say it out loud :)

[19:28] <moritz> also, iirc there's a PSGI thingy based on supplies; not sure how stable it is though

[19:29] <El_Che> On Fosdem Daisuki Maki said there where still some locking issuing with perl's plack

[19:29] <Frameless> You can use Mojolicious with Perl 6: https://github.com/zoffixznet/perl6-Ticket-Trakr/blob/master/bin/app.p6 It was a surprisingly smooth ride until I tried to marry Proc::Async with a websocket: https://rt.perl.org/Ticket/Display.html?id=128558

[19:30] <El_Che> (crust)

[19:30] <El_Che> There were perl6 core hackers in the room, so maybe it's fixed by now

[19:31] <lizmat> El_Che: it's probably less now, but I'm afraid we didn't kill the last bugs in that area just yet  :-(

[19:31] <lizmat> s/less/less buggy/

[19:32] *** dha joined
[19:32] *** itaipu left
[19:34] <El_Che> lizmat: thx for the info, liz <-- one of the perl6 hackers in the room :)

[19:37] *** addison joined
[19:39] *** setty2 joined
[19:39] *** sno joined
[19:43] *** maybekoo2 joined
[19:43] <dalek> doc: 4a5f70e | (Wenzel P. P. Peppmeyer)++ | doc/Type/Num.pod6:

[19:43] <dalek> doc: fix broken link

[19:43] <dalek> doc: review: https://github.com/perl6/doc/commit/4a5f70e702

[19:43] <dalek> doc: 5c7924d | (Wenzel P. P. Peppmeyer)++ | doc/Language/performance.pod6:

[19:43] <dalek> doc: fix broken link

[19:43] <dalek> doc: review: https://github.com/perl6/doc/commit/5c7924dabb

[19:43] <dalek> doc: eae8883 | (Wenzel P. P. Peppmeyer)++ | lib/Pod/Htmlify.pm6:

[19:43] <dalek> doc: handle links with / in anchor part

[19:43] <dalek> doc: review: https://github.com/perl6/doc/commit/eae8883e7b

[19:43] <dalek> doc: e3f02bd | (Wenzel P. P. Peppmeyer)++ | htmlify.p6:

[19:43] <dalek> doc: warn on bad chars in filename

[19:43] <dalek> doc: warn on empty filename

[19:43] <dalek> doc: review: https://github.com/perl6/doc/commit/e3f02bdfb4

[19:43] <dalek> doc: fc27b98 | (Wenzel P. P. Peppmeyer)++ | doc/Type/X/Mixin/NotComposable.pod6:

[19:43] <dalek> doc: fix broken link

[19:43] <dalek> doc: review: https://github.com/perl6/doc/commit/fc27b98496

[19:43] <dalek> doc: 7c68bf5 | (Wenzel P. P. Peppmeyer)++ | / (2 files):

[19:43] <dalek> doc: add make test-links

[19:43] <dalek> doc: review: https://github.com/perl6/doc/commit/7c68bf51b5

[19:45] *** rgrinberg joined
[19:45] *** sufrostico left
[19:47] *** sufrostico joined
[19:48] *** moray_ left
[19:52] *** dogbert17 left
[19:54] *** rgrinberg left
[19:59] <gfldex> what dalek forgot to tell you is that "warn on empty filename" fires 3x right now (from htmlify.p6)

[20:01] *** user9 left
[20:01] *** _28_ria joined
[20:01] *** TEttinger joined
[20:03] *** dogbert17 joined
[20:12] *** kaare_ left
[20:20] *** colomon left
[20:28] *** cdg left
[20:29] *** maybekoo2 is now known as furely_punctiona

[20:29] *** furely_punctiona is now known as furelypunctional

[20:30] *** rgrinberg joined
[20:32] *** sortiz joined
[20:33] *** CIAvash left
[20:33] *** marcool left
[20:34] *** andrzejku joined
[20:35] <sortiz> \o #perl6

[20:36] <timotimo> yo

[20:36] *** dwarring joined
[20:37] <lizmat> sortiz o/

[20:42] *** khw joined
[20:43] *** hoelzro left
[20:45] *** yqt joined
[20:51] *** hoelzro joined
[20:58] *** itaipu joined
[20:59] *** skids left
[21:02] *** FROGGS left
[21:04] *** adu left
[21:09] *** itaipu left
[21:12] *** retupmoca left
[21:12] *** adu joined
[21:15] *** dvinciguerra_ left
[21:16] *** acrussell left
[21:18] *** kyclark joined
[21:19] *** silug joined
[21:24] *** retupmoca joined
[21:29] *** kyclark left
[21:32] *** setty2 left
[21:32] *** cdg joined
[21:37] *** yqt left
[21:40] *** kyclark joined
[21:50] *** kyclark left
[21:51] *** kurahaupo joined
[21:51] *** kyclark joined
[21:57] *** sufrostico left
[21:58] <kyclark> Can the lambda to "map" contain a signature?  E.g., given a list like ((4 3) (1 2) (1 1)), can I create map that will add each of the lists?

[21:58] <kyclark> m: ((4 3) (1 2) (1 1)).map: [$a, $b] -> $a + $b

[21:58] <camelia> rakudo-moar 24cc91: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3((47⏏5 3) (1 2) (1 1)).map: [$a, $b] -> $a + $␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement mod…»

[22:00] <timotimo> that's not exactly how you spell it

[22:00] <timotimo> but almost

[22:00] <timotimo> m: say ((4 3) (1 2) (1 1)).map: -> [$a, $b] { $a + $b }

[22:00] <camelia> rakudo-moar 24cc91: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say ((47⏏5 3) (1 2) (1 1)).map: -> [$a, $b] { $a +␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement…»

[22:01] <timotimo> m: say ((4 3), (1 2), (1 1)).map(-> [$a, $b] { $a + $b })

[22:01] <camelia> rakudo-moar 24cc91: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say ((47⏏5 3), (1 2), (1 1)).map(-> [$a, $b] { $a ␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement…»

[22:01] <timotimo> m: say ((4, 3), (1, 2), (1, 1)).map(-> [$a, $b] { $a + $b })

[22:01] <camelia> rakudo-moar 24cc91: OUTPUT«(7 3 2)␤»

[22:01] <kyclark> m: my @n = (1,1), (1,2), (4,3); (for @n -> ($a, $b) { $a + $b })

[22:01] <camelia> rakudo-moar 24cc91: OUTPUT«WARNINGS for <tmp>:␤Useless use of "+" in expression "$a + $b" in sink context (line 1)␤»

[22:01] <kyclark> Hmm, that works in my REPL

[22:01] <timotimo> howevre, that'll be most easily spelled as >>+<<

[22:02] <timotimo> er, no

[22:02] <timotimo> i ought to go to bed

[22:02] <timotimo> and my network connection just b0rked for a minute there

[22:02] *** adu left
[22:03] <ugexe> probably because the REPL outputs the result so its not thought of as "useless"

[22:03] <hoelzro> @n>>.[0] >>+<< @n>>.[1] would do the trick, I think

[22:03] <timotimo> have a good one!

[22:03] <hoelzro> night timotimo 

[22:03] <timotimo> oh he hoelzro 

[22:03] <timotimo> coming out of nowhere to snipe that :D

[22:03] <hoelzro> ;)

[22:03] <timotimo> you can get rid of the repeated @n with a given at the end, too

[22:03] <timotimo> m: my @n = (1, 1), (1, 2), (4, 3); say .>>[0] >>+<< .>>[1] given @n

[22:03] <camelia> rakudo-moar 24cc91: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call (only alphabetic methods may be detached)␤at <tmp>:1␤------> 3my @n = (1, 1), (1, 2), (4, 3); say .7⏏5>>[0] >>+<< .>>[1] given @n␤»

[22:04] <timotimo> aaw

[22:04] <hoelzro> you could also do Z+, I think

[22:04] <timotimo> m: .>>[0] given (1, 2, 3)

[22:04] <camelia> rakudo-moar 24cc91: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3.7⏏5>>[0] given (1, 2, 3)␤»

[22:04] <timotimo> bisectable: .>>[0] given (1, 2, 3)

[22:04] <bisectable> timotimo: no build for such “bad” revision. Right now the build process is in action, please try again later or specify some older “bad” commit (e.g. bad=HEAD~40)

[22:05] <timotimo> bisectable: bad=HEAD~5 .>>[0] given (1, 2, 3)

[22:05] <bisectable> timotimo: on both starting points the exit code is 1 and the output is identical as well

[22:05] <timotimo> oh, is that so ...

[22:05] <timotimo> oh well

[22:05] <timotimo> commitable: help

[22:05] <timotimo> how do i ...

[22:06] *** _28_ria left
[22:06] *** dha left
[22:06] <kyclark> So I was on here a couple of days ago wondering how to do Hamming distance.  My map question was just exploring signatures to solve that question, but the "Z+" made me think of "Zeq" which I just tried and which gives me exactly what I wanted.

[22:07] * hoelzro wonders if there's some insane invocation like &[>>+<<](|@n.unzip) that would do the job...

[22:07] <kyclark> m: say 'foo'.comb Zeq 'boo'.comb

[22:07] <camelia> rakudo-moar 24cc91: OUTPUT«(False True True)␤»

[22:07] <sortiz> m: ((4, 3), (1, 2), (1, 1)).map({ [+] $_[] }).say

[22:07] <camelia> rakudo-moar 24cc91: OUTPUT«(7 3 2)␤»

[22:07] <timotimo> Zeq may not be correct if your lists aren't the same length

[22:08] <timotimo> because it stops after the shorter of the lists is exhausted

[22:08] <kyclark> Right, it only gives the shorter, so I have to combine it with abs($string1.chars - $string2.chars)

[22:08] <gfldex> m: say 'foo'.comb >>eq<< 'boo'.comb

[22:08] <camelia> rakudo-moar 24cc91: OUTPUT«(False True True)␤»

[22:08] <timotimo> >>eq<< will throw an exception if the lists are not the same length, and turning the >> around lets you specify one or two sides that are allowed to be wrapped

[22:08] <timotimo> and with that i'm off; with ro and dex you're in very good hands

[22:09] <gfldex> o7

[22:09] <hoelzro> good night for real this time, timotimo =)

[22:09] <kyclark> say 'foo'.comb <<eq>> 'foobar'.comb

[22:09] <kyclark> m: 'foo'.comb <<eq>> 'foobar'.comb

[22:09] *** rgrinberg left
[22:09] <camelia> rakudo-moar 24cc91: ( no output )

[22:09] <kyclark> m: say 'foo'.comb <<eq>> 'foobar'.comb

[22:09] <camelia> rakudo-moar 24cc91: OUTPUT«(True True True False False False)␤»

[22:09] <kyclark> That's the easiest yet!

[22:09] <timotimo> it can give you wrong results, though

[22:10] <hoelzro> hahahaha

[22:10] <kyclark> Why?

[22:10] <timotimo> m: say 'fo'.comb <<eq>> 'foooooooo'.comb

[22:10] <camelia> rakudo-moar 24cc91: OUTPUT«(True True False True False True False True False)␤»

[22:10] <hoelzro> you just can't stay away, can you timo? =P

[22:10] <gfldex> m: say 'fao'.comb <<eq>> 'faobar'.comb

[22:10] <camelia> rakudo-moar 24cc91: OUTPUT«(True True True False True False)␤»

[22:10] <timotimo> i really can't ;(

[22:10] <kyclark> m: say ('foo'.comb <<eq>> 'foobar'.comb).grep(* == False).elems

[22:10] <camelia> rakudo-moar 24cc91: OUTPUT«3␤»

[22:10] *** dvinciguerra_ joined
[22:10] <timotimo> no need to grep for false, just sum it up

[22:10] <kyclark> OK, I won't press.  Still, cool stuff.

[22:10] <kyclark> Really?

[22:10] <timotimo> with [+] in front

[22:11] <gfldex> m: say [+]('fao'.comb <<eq>> 'faobar'.comb)

[22:11] <camelia> rakudo-moar 24cc91: OUTPUT«4␤»

[22:11] <timotimo> m: say Bool ~~ Int # ;)

[22:11] <camelia> rakudo-moar 24cc91: OUTPUT«True␤»

[22:11] <timotimo> wait, sorry, you want the opposite %)

[22:11] <kyclark> Woah.  That's cool.

[22:11] * timotimo forcefully removes himself from the computer

[22:11] <hoelzro> you could do [+] (1 xx * >>-<< @result) to get the inverse

[22:12] <kyclark> m: say [+] 'foo'.comb <<ne>> 'foobarbaz'.comb

[22:12] <camelia> rakudo-moar 24cc91: OUTPUT«6␤»

[22:12] <hoelzro> or use ne, hehe

[22:12] *** skids joined
[22:13] <ugexe> m: say StrDistance.new(before => "foo", after => "foobarbaz").Int

[22:13] <camelia> rakudo-moar 24cc91: OUTPUT«6␤»

[22:13] *** rindolf left
[22:13] <hoelzro> TIL we have StrDistance

[22:13] *** wamba left
[22:14] <hoelzro> decommute &

[22:14] <gfldex> not in roast, so you can't really see StrDistance

[22:14] <kyclark> Yes, I was introduced to StrDistance the other day, but I'm trying to come up with a curriculum to teach programming to biologists.  Finding the differences in strands of DNA is relevant, and I'd like to show how to use loops and operators on something they would find relevant.

[22:15] <gfldex> you need to fill up the shorter list with a value that compares to false all the time

[22:16] <gfldex> m: say [+]( ('fao'.comb, False xx *).flat Zeq 'faobar'.comb)

[22:16] <camelia> rakudo-moar 24cc91: OUTPUT«3␤»

[22:16] <gfldex> m: say so 'a' eq False;

[22:16] <camelia> rakudo-moar 24cc91: OUTPUT«False␤»

[22:17] <gfldex> m: say so '0' eq False;

[22:17] <camelia> rakudo-moar 24cc91: OUTPUT«False␤»

[22:17] <gfldex> m: say so '0' eq False.Str;

[22:17] <camelia> rakudo-moar 24cc91: OUTPUT«False␤»

[22:18] <gfldex> m: say False.Str

[22:18] <camelia> rakudo-moar 24cc91: OUTPUT«False␤»

[22:18] <gfldex> m: say [+]( ('fao'.comb, '' xx *).flat Zeq 'faobar'.comb)

[22:18] <camelia> rakudo-moar 24cc91: OUTPUT«3␤»

[22:18] <kyclark> Here's another point that's got me confused b/w List and Array.  

[22:18] <gfldex> that is should work all the time

[22:18] <kyclark> m: say ((1,2), (3,4)).flat

[22:18] <camelia> rakudo-moar 24cc91: OUTPUT«(1 2 3 4)␤»

[22:18] <kyclark> m: my @n = (1,2), (3,4); say @n.flat

[22:18] <camelia> rakudo-moar 24cc91: OUTPUT«((1 2) (3 4))␤»

[22:19] <kyclark> So, @n is an Array, which won't flatten?

[22:19] <gfldex> that's not a matter of List and Array but List literal and Array container

[22:19] *** rindolf joined
[22:20] <gfldex> m: my @n = (1,2), (3,4); dd @n; dd @n.flat

[22:20] <camelia> rakudo-moar 24cc91: OUTPUT«Array @n = [(1, 2), (3, 4)]␤($(1, 2), $(3, 4)).Seq␤»

[22:20] <gfldex> the @-sigil is one more level of listyness

[22:21] <kyclark> m: my $n = ((1,2), (3,4)); say $n.flat

[22:21] <camelia> rakudo-moar 24cc91: OUTPUT«(1 2 3 4)␤»

[22:21] <gfldex> m: my @n = (1,2), (3,4); dd @n; dd @n.flat.flat

[22:21] <camelia> rakudo-moar 24cc91: OUTPUT«Array @n = [(1, 2), (3, 4)]␤($(1, 2), $(3, 4)).Seq␤»

[22:23] <kyclark> Well, now I feel confused on when to use @ or $ for list-y things.

[22:23] <gfldex> m: my @n = (1,2), (3,4); dd @n; dd @n.map({|$_});

[22:23] <camelia> rakudo-moar 24cc91: OUTPUT«Array @n = [(1, 2), (3, 4)]␤(1, 2, 3, 4).Seq␤»

[22:27] <gfldex> m: my @n = ((1,2); (3,4)); dd @n; for @n -> @e { say |@e };

[22:27] <camelia> rakudo-moar 24cc91: OUTPUT«Array @n = [(1, 2), (3, 4)]␤12␤34␤»

[22:29] <gfldex> kyclark: @-sigil containers work well if you use the right sigil in signatures. Calling .flat is most likely the worst way to deal with them. If some operators return LoLs, try to untangle them as earyl as possible with a slip.

[22:30] <gfldex> m: my @n = ((1,2); (3,4)); dd @n; for @n -> [$a, $b] { say $a, $b };

[22:30] <camelia> rakudo-moar 24cc91: OUTPUT«Array @n = [(1, 2), (3, 4)]␤12␤34␤»

[22:31] <gfldex> m: my @n = (1,2; 3,4); dd @n; for @n -> [$a, $b] { say $a, $b };

[22:31] <camelia> rakudo-moar 24cc91: OUTPUT«Array @n = [(1, 2), (3, 4)]␤12␤34␤»

[22:33] *** firstdayonthejob left
[22:33] <ugexe> m: my @n := ((1,2), (3,4)); say @n.flat

[22:33] <camelia> rakudo-moar 24cc91: OUTPUT«(1 2 3 4)␤»

[22:34] *** bbkr left
[22:34] <kyclark> LoLs ne lulz

[22:37] *** Celelibi left
[22:38] *** spider-mario left
[22:38] <gfldex> m: role DNA does Iterable { method iterator(){ say 'it'; self.comb.iterator } }; my @a does DNA = 'ABCDABCD'; for @a -> $e { say $e };

[22:38] <camelia> rakudo-moar 24cc91: OUTPUT«it␤A␤B␤C␤D␤A␤B␤C␤D␤»

[22:38] *** RabidGravy left
[22:39] <tbrowder> I read somewhere that, in Perl 6, using an explicit return from a sub instead of just using the last value at the end of a block is slower. If that is true, is that true for nqp also?

[22:39] <gfldex> kyclark: ^^^ that saves you the .comb on a string

[22:39] <jdv79> jnthn might be fixing that

[22:39] <jdv79> the heavy cost return

[22:39] <gfldex> &return will fire a control exception, the bare return value will not.

[22:40] *** ptolemarch left
[22:41] <kyclark> Wow, I haven't touched roles yet.  That's going to need some time to sink in.

[22:42] <tbrowder> gfldex: I mean like "return $x" instead of just "$x" at the end of a sub.

[22:42] *** AlexDaniel left
[22:43] *** andrzejku left
[22:43] *** espadrine left
[22:44] *** Celelibi joined
[22:44] *** girafe joined
[22:44] *** AndyBotwin left
[22:48] *** ufobat left
[22:50] *** AlexDaniel joined
[22:50] *** kyclark left
[22:50] <AlexDaniel> Why is it 404? https://design.perl6.org/S26.html

[22:52] *** kyclark joined
[22:52] <AlexDaniel> gfldex: hi! Take a look at https://docs.perl6.org/language/operators#infix_:=

[22:52] <AlexDaniel> gfldex: there's a link to ｢containers｣

[22:52] <AlexDaniel> gfldex: and it looks like this: https://docs.perl6.org/language/containers$FULL_STOPhtml#Binding

[22:53] *** kid511 joined
[22:54] <AlexDaniel> gfldex: I'm not sure what would be the right solution here, but perhaps only leading dots should be replaced?

[22:54] *** kid51 left
[22:56] <gfldex> S26 is 404 because all the other S?? are written in pod5. Whenever the build script is run, somebody has to go in and build S26 by hand.

[22:57] <dalek> doc: 41a5c54 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Iterable.pod6:

[22:57] <dalek> doc: add example to role Iterable (kyclark++ for asking the right question)

[22:57] <dalek> doc: review: https://github.com/perl6/doc/commit/41a5c5428e

[22:57] <kyclark> woo-hoo!

[22:58] *** rindolf left
[22:58] *** kurahaupo left
[23:01] *** huggable left
[23:01] *** huggable joined
[23:02] *** adu joined
[23:04] *** john51_ left
[23:04] *** john51 joined
[23:04] <dalek> doc: 46a025d | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod6:

[23:04] <dalek> doc: fix link

[23:04] <dalek> doc: review: https://github.com/perl6/doc/commit/46a025dbf0

[23:04] <dalek> doc: 48fac52 | (Wenzel P. P. Peppmeyer)++ | doc/ (2 files):

[23:04] <dalek> doc: fix broken links

[23:04] <dalek> doc: review: https://github.com/perl6/doc/commit/48fac527d7

[23:04] *** travis-ci joined
[23:04] <travis-ci> Doc build failed. Wenzel P. P. Peppmeyer 'add example to role Iterable (kyclark++ for asking the right question)'

[23:04] <travis-ci> https://travis-ci.org/perl6/doc/builds/144604943 https://github.com/perl6/doc/compare/7c68bf51b5f2...41a5c5428e0f

[23:04] *** travis-ci left
[23:05] <gfldex> AlexDaniel: the problem was L<Foo|/type/Foo.html> instead of L<Foo|/type/Foo>

[23:06] <dalek> doc: 42092d2 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Iterable.pod6:

[23:06] <dalek> doc: fix trailing WS

[23:06] <dalek> doc: review: https://github.com/perl6/doc/commit/42092d25a2

[23:07] *** Zoffix joined
[23:08] <Zoffix> gfldex, no, it should auto-build. It rather awkwardly uses Pod::To::HTML; maybe there's some sort of conflict from latest changes: https://github.com/perl6/mu/blob/master/util/update-design.perl6.org.sh#L49

[23:08] <gfldex> Zoffix: there is, was reported earlier

[23:08] <jdv79> is ShimmerFairy back?

[23:09] <Zoffix> Ah. OK.

[23:09] <Zoffix> jdv79, yes

[23:09] <gfldex> AlexDaniel: there is https://docs.perl6.org/links.txt if you want to look over all links we got in the docs

[23:10] <Zoffix> gfldex, reported where?

[23:10] <jdv79> ShimmerFairy: welcome back!

[23:11] <gfldex> AlexDaniel: there are still problems originating from autogenerated content where an element ($type, $name) is missing in *DR. But none of those pages should be reachable by any .html that is generated directly from a .pod

[23:12] *** kyclark left
[23:12] *** Zoffix left
[23:13] *** kyclark joined
[23:13] <gfldex> .tell Zoffix here: http://irclog.perlgeek.de/perl6/2016-07-13#i_12834362

[23:13] <yoleaux> gfldex: I'll pass your message to Zoffix.

[23:14] <AlexDaniel> m: say ‘a’.samemark: ‘’

[23:14] <camelia> rakudo-moar 24cc91: OUTPUT«Must have at least 1 char of pattern with 'samemark'␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[23:15] *** travis-ci joined
[23:15] <travis-ci> Doc build failed. Wenzel P. P. Peppmeyer 'fix broken links'

[23:15] <travis-ci> https://travis-ci.org/perl6/doc/builds/144606175 https://github.com/perl6/doc/compare/41a5c5428e0f...48fac527d772

[23:15] *** travis-ci left
[23:17] *** kyclark left
[23:18] *** jack_rabbit joined
[23:23] *** dj_goku joined
[23:26] *** adu left
[23:29] *** travis-ci joined
[23:29] <travis-ci> Doc build passed. Wenzel P. P. Peppmeyer 'fix trailing WS'

[23:29] <travis-ci> https://travis-ci.org/perl6/doc/builds/144606583 https://github.com/perl6/doc/compare/48fac527d772...42092d25a209

[23:29] *** travis-ci left
[23:30] *** bbkr joined
[23:34] <dalek> doc: e5fcd55 | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod6:

[23:34] <dalek> doc: fix broken links

[23:34] <dalek> doc: review: https://github.com/perl6/doc/commit/e5fcd5574f

[23:45] *** testydexy joined
[23:45] *** testydexy left
[23:49] *** adu joined
[23:51] <dalek> doc: 4795473 | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod6:

[23:51] <dalek> doc: fix broken link

[23:51] <dalek> doc: review: https://github.com/perl6/doc/commit/4795473deb

[23:51] <dalek> doc: 90d7ce4 | (Wenzel P. P. Peppmeyer)++ | html/js/main.js:

[23:51] <dalek> doc: make broken link report more prominent

[23:51] <dalek> doc: review: https://github.com/perl6/doc/commit/90d7ce4838

[23:55] *** adu left
[23:55] *** kid511 is now known as kid51

