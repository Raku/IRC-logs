[00:00] *** geraud joined
[00:12] *** n1lp7r joined
[00:12] *** mcmillhj joined
[00:17] *** mcmillhj left
[00:21] <dataangel> What does : mean in front of arguments to a function call? It's hard to Google :p

[00:25] <skids> A named parameter (or argument), as opposed to positional.

[00:26] <dataangel> Why have both that and the => syntax?

[00:26] *** mcmillhj joined
[00:27] <skids> The => is mostly for people used to perl5.

[00:29] <b2gills> m: say 5 => 'five'; say :five(5)

[00:29] <camelia> rakudo-moar 668dc5: OUTPUT«5 => five␤Unexpected named parameter 'five' passed␤  in block <unit> at <tmp> line 1␤␤»

[00:29] <b2gills> m: say 5 => 'five'; say (:five(5))

[00:29] <camelia> rakudo-moar 668dc5: OUTPUT«5 => five␤five => 5␤»

[00:30] <skids> m: say five => 5

[00:30] <camelia> rakudo-moar 668dc5: OUTPUT«Unexpected named parameter 'five' passed␤  in block <unit> at <tmp> line 1␤␤»

[00:30] <skids> named parameters actually have to use valid names :-)

[00:30] <dataangel> Interesting

[00:31] *** mcmillhj left
[00:31] <skids> m: say Pair.new("five",5) # there's a syntactic distinction as well.

[00:31] <camelia> rakudo-moar 668dc5: OUTPUT«five => 5␤»

[00:32] <dataangel> I have a role with a member, that I would like to mark :D for safety. I also want to use a different constructor than the default, that takes a hash, and stores a value from that hash into said member. Can I do that? I'm getting an error that my member must have an initializer if I use :D

[00:33] *** pierre_ joined
[00:34] <skids> Hrm. I forget if you can bypass :D with a BUILD or not.  ISTR there's a small bit of ickiness waiting to be fixed in that area.

[00:35] <skids> Why not provide a default?

[00:38] <dataangel> There is some work in computing what the default value would be, so in that case I would probably drop the :D so that I could wait to see if the hash contained the value first and only if it didn't bothering to compute the default value, so I'd just lose :D again

[00:39] <skids> Well, you could provide a bogus default until you get into the initializer, then add a fail if the hash doesn't have one, or compute a real one then.

[00:39] <BenGoldberg> m: (five => 5).say

[00:39] <camelia> rakudo-moar 668dc5: OUTPUT«five => 5␤»

[00:40] <BenGoldberg> m: (:five(5)).say

[00:40] <camelia> rakudo-moar 668dc5: OUTPUT«five => 5␤»

[00:41] *** mcmillhj joined
[00:45] *** mcmillhj left
[00:48] <skids> m: role A { has $.h; has Int:D $.f = self.g * 2; method g { self.h.say; self.f.say; self.h; } }; A.new(:h(42)).f.say # this is already lazy up to the constructor.

[00:48] <camelia> rakudo-moar 668dc5: OUTPUT«42␤(Int:D)␤84␤»

[00:48] <skids> dataangel: ^^

[00:48] <dataangel> Thanks

[00:51] <dataangel> I have a member declaration "has Str:D @!linker-options;" which doesn't seem to require an initializer, guessing it just initializes to an empty array implicitly... But later in bless I do ":linker-options(%config<GPP_LINK_OPTS>)" but that key doesn't exist, so I'd expect to get an error, complaining them I'm initializing the array with Nil or something, but no error. What gives? I understand the :D would apply to the strings in the

[00:51] <dataangel> array, but I still wouldn't expect to be able to set an array to Nil

[00:51] *** johnjohn101 joined
[00:52] <johnjohn101> hi perl 6

[00:52] <skids> o/

[00:52] *** mcmillhj joined
[00:53] <johnjohn101> how's perl 6 progressing?

[00:53] *** labster joined
[00:57] <vcv> m: my $key = 'five'; say($key => '5'); say :$key(5);

[00:57] <camelia> rakudo-moar 668dc5: OUTPUT«five => 5␤No such method 'CALL-ME' for invocant of type 'Pair'␤  in block <unit> at <tmp> line 1␤␤»

[00:57] <Eduardo_> I'm having some trouble starting on Perl6

[00:57] *** mcmillhj left
[00:57] <dataangel> vcv: sorry the key I'm referring to not existing is GPP_LINK_OPTS

[00:58] <Eduardo_> im trying to have a hashSet in a class

[00:58] <vcv> i was just testing something for my own knowledge :)

[00:58] <dataangel> Also actually I guess it's not sitting in array to Nil, but to (Any), according to WHAT

[00:58] <Eduardo_> then I want to add items to it

[00:58] <Eduardo_> inside the constructor

[00:58] <dataangel> vcv: oops wasn't sure ;)

[00:58] <Eduardo_> im geting Cannot look up attributes in a type object

[00:58] <Eduardo_> i dont understand this message

[00:59] <vcv> m: my $key = 'five'; say($key => '5'); say (:$key(5));

[00:59] <camelia> rakudo-moar 668dc5: OUTPUT«five => 5␤No such method 'CALL-ME' for invocant of type 'Pair'␤  in block <unit> at <tmp> line 1␤␤»

[00:59] <skids> dataangel: actually it's trying to set the whole array to Any.

[00:59] *** cognominal left
[00:59] <skids> m: my %config; sub a (Str:D :@lo) { @lo.perl.say }; say a(:lo[%config<nokeyhere>])

[00:59] <camelia> rakudo-moar 668dc5: OUTPUT«Type check failed in binding to @lo; expected Positional[Str] but got Array ($[Any])␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:59] <skids> It should fail like that, when using the :foo[] syntax.

[01:00] <dataangel> skids: what is the difference between using the brackets and the parentheses? 

[01:01] <skids> hrm actually it might be supposed to work that way.

[01:01] <skids> (as well)

[01:01] <dataangel> skids: actually still appears to succeed, may be behavior specific to bless? 

[01:02] <skids> m: say (:f(1,2)); say (:f[1,2])

[01:02] <camelia> rakudo-moar 668dc5: OUTPUT«f => (1 2)␤f => [1 2]␤»

[01:02] <skids> Array versus list but a list should probably be a valid itializer.

[01:02] <skids> Might be something squirelly in the binder.

[01:03] <dataangel> How do I initialize it directly to something without it being a list or an array while using the leading : syntax?

[01:03] <SmokeMachine____> hi! is there any way to use/require/need a module only once?

[01:03] <dataangel> I am more and more getting the impression that I am the only one really trying to use the typing in Perl 6 ;p

[01:04] <ugexe> you obviously havent been around long then

[01:04] <skids> No just you're maybe going down a more strict path.  Though types on positionals were downright broken for a long time so many may be averse to tryin them.

[01:04] <ugexe> SmokeMachine____: what does that even mean?

[01:05] <SmokeMachine____> I am having problems with circular dependency...

[01:05] <ugexe> dont create circular depenencies

[01:06] <SmokeMachine____> that's not easy...

[01:06] <skids> Eduardo_: "Cannot look up attributes in a type object" means you're working with an unitialized variable.

[01:06] <ugexe> its easier than resolving circular dependencies 

[01:07] <skids> Eduardo_: not sure what a hashSet is exactly

[01:08] <ugexe> maybe you misunderstand what you need to do and you really just mean to stub the namespace, but thats not what you asked so i dunno

[01:08] <dataangel> Eduardo_: constructors work a little differently in Perl 6, when you're inside to knew the object hasn't been built yet so you can't access the attributes... I'm not entirely one hundred percent sure what you are supposed to do instead in your situation because I'm still a newbie too ;)

[01:09] <dataangel> I ran into that ten minutes ago, that's what I'm trying to use bless

[01:09] *** adhoc_ joined
[01:09] *** adhoc_ left
[01:10] <SmokeMachine____> ugexe: I tryed to do that... but:

[01:10] <SmokeMachine____> ===SORRY!===

[01:10] <SmokeMachine____> Stub code executed

[01:10] <skids> dataangel: there's BUILD, as well, but that gets tacky with roles.

[01:10] <ugexe> SmokeMachine____: by stub i really mean `class MyClass { }`

[01:10] <dataangel> skids: I saw that but I wasn't sure if I was going to be able to access attributes at that point, I read something indicating that you can't, so I'm left not really understanding the point 

[01:11] <SmokeMachine____> hum!

[01:11] <SmokeMachine____> I did class MyClass{...}

[01:11] <skids> BUILD has direct attrbute access (e.g. self!attribute) 

[01:11] *** mcmillhj joined
[01:11] <SmokeMachine____> thanks!

[01:12] <dataangel> "Since BUILD is run on an object which is not yet fully constructed, attributes are only accessible if they are declared as named parameters" <-- from 2009, out of date?

[01:12] <ugexe> why do you think thats out of date?

[01:13] <dataangel> ugexe: because it says you don't have attribute access, and skids says you do 

[01:14] <ugexe> ... did you read what you pasted?

[01:14] <Xliff_zzzz> m: sub b($o, Int :$foo = 1, Str :$bar = 'baz', Bool :$baz = True) { say $baz }; b(Nil, :!baz);

[01:14] <camelia> rakudo-moar 668dc5: OUTPUT«False␤»

[01:14] <skids> m: class C { has $.a; submethod BUILD () { $!a = 42 }}; C.new.perl.say

[01:14] <camelia> rakudo-moar 668dc5: OUTPUT«C.new(a => 42)␤»

[01:15] <dataangel> ugexe: yes actually, and if you look at the example from skids (self!attribute) there is no indication that there has to be a named attribute to the function 

[01:15] <skids> (actually self!attribute seems to not work... but $!attribute does... wonder why)

[01:16] <skids> I guess because there is no defined self yet.

[01:17] *** mcmillhj left
[01:18] <dataangel> Separately I'm not sure what to make of the named attribute passing that post suggests (https://perlgeek.de/blog-en/perl-6/object-construction-and-initialization.html) because it seems to indicate that you can only use attributes if you're going to directly map your constructor arguments into your members, and if that's what you're doing why would you be defining a custom constructor in the first place, seeing as that's what the default

[01:18] <dataangel> constructor does for you?

[01:18] <dataangel> s/only use attributes/only use named attributes

[01:18] *** kalkin- joined
[01:22] *** kalkin-_ left
[01:23] *** mcmillhj joined
[01:25] <skids> dataangel: I don't remember running into that restriction but it's possible it might have existed at some point.

[01:28] *** mcmillhj left
[01:32] *** pierre_ left
[01:33] *** pierre_ joined
[01:34] <Xliff_zzzz> m: sub d (

[01:34] <Xliff_zzzz> $obj, 

[01:34] <Xliff_zzzz> Int :$i = 2, 

[01:34] <Xliff_zzzz> Int :$j = 0, 

[01:34] <Xliff_zzzz> Bool :$c = True, 

[01:34] <camelia> rakudo-moar 668dc5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3sub d (7⏏5<EOL>␤»

[01:34] <Xliff_zzzz> Int :$x = 50, 

[01:34] <Xliff_zzzz> Bool :$g = False,

[01:34] <Xliff_zzzz>  Bool :$m = True

[01:34] <Xliff_zzzz> ) { say "$i/$j/$c/$x/$g/$m"; } d(:!m);

[01:35] <Xliff_zzzz> m: sub d ($obj, Int :$i = 2, Int :$j = 0, Bool :$c = True, Int :$x = 50, Bool :$g = False, Bool :$m = True, Bool :$m = True) { say "$i/$j/$c/$x/$g/$m"; } d(:!m);

[01:35] <camelia> rakudo-moar 668dc5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol $m␤at <tmp>:1␤------> 3l :$g = False, Bool :$m = True, Bool :$m7⏏5 = True) { say "$i/$j/$c/$x/$g/$m"; } d(␤    expecting any of:␤        shape declaration␤»

[01:35] <Xliff_zzzz> m: sub d ($obj, Int :$i = 2, Int :$j = 0, Bool :$c = True, Int :$x = 50, Bool :$g = False, Bool :$m = True, Bool) { say "$i/$j/$c/$x/$g/$m"; } d(:!m);

[01:35] <camelia> rakudo-moar 668dc5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Cannot put required parameter  after variadic parameters␤at <tmp>:1␤------> 3 Bool :$g = False, Bool :$m = True, Bool7⏏5) { say "$i/$j/$c/$x/$g/$m"; } d(:!m);␤    expecting any of:␤        cons…»

[01:35] <Xliff_zzzz> m: sub d ($obj, Int :$i = 2, Int :$j = 0, Bool :$c = True, Int :$x = 50, Bool :$g = False, Bool :$m = True) { say "$i/$j/$c/$x/$g/$m"; } d(:!m);

[01:35] <camelia> rakudo-moar 668dc5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3:$m = True) { say "$i/$j/$c/$x/$g/$m"; }7⏏5 d(:!m);␤    expecting any of:␤        infix␤        infix stopper␤    …»

[01:36] <dataangel> Xliff_zzzz: when you are putting everything on one line you need a semicolon after the sub closing brace

[01:36] <Xliff_zzzz> m: sub d ($obj, Int :$i = 2, Int :$j = 0, Bool :$c = True, Int :$x = 50, Bool :$g = False, Bool :$m = True) { say "$i/$j/$c/$x/$g/$m"; }; d(:!m);

[01:36] <camelia> rakudo-moar 668dc5: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in sub d at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[01:36] <Xliff_zzzz> m: sub d ($obj, Int :$i = 2, Int :$j = 0, Bool :$c = True, Int :$x = 50, Bool :$g = False, Bool :$m = True) { say "$i/$j/$c/$x/$g/$m"; }; d(0, :!m);

[01:36] <camelia> rakudo-moar 668dc5: OUTPUT«2/0/True/50/False/False␤»

[01:36] <dataangel> Fifth time is a charm ;p

[01:36] <Xliff_zzzz> :P

[01:36] *** Xliff_zzzz is now known as Xliff

[01:37] <Xliff> I'm trying to golf some weirdness in a larger piece of code.

[01:37] <skids> m: https://gist.github.com/skids/50a89c7c735368de803701c7a31b486b

[01:37] <camelia> rakudo-moar 668dc5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:9␤------> 3 { say "$i/$j/$c/$x/$g/$m"; }7⏏5 d(42,:!m);␤    expecting any of:␤        infix␤        infix stopper␤        stat…»

[01:37] <skids> You can feed evalbot gists fwiw.

[01:39] *** AlexDaniel left
[01:42] *** mcmillhj joined
[01:43] *** pierre_ left
[01:46] <dataangel> m: my Str:D @test; @test = ();

[01:46] <camelia> rakudo-moar 668dc5: ( no output )

[01:46] *** BenGoldberg left
[01:46] <dataangel> m: my Str:D @test2; my %d; %d<TESTING> = (); @test2 = %d<TESTING>;

[01:46] <camelia> rakudo-moar 668dc5: OUTPUT«Type check failed in assignment to @test2; expected Str:D but got List ($())␤  in block <unit> at <tmp> line 1␤␤»

[01:46] <dataangel> Why aren't these the same?

[01:46] *** mcmillhj left
[01:50] <skids> dataangel: there is a Scalar injected by the Hash in there protecting the list from iteration.

[01:51] <skids> m: my @test2; my %d; %d<TESTING> = (); @test2 = %d<TESTING>; @test2.perl.say; %d<TESTING>.perl.say; ().perl.say

[01:51] <camelia> rakudo-moar 668dc5: OUTPUT«[(),]␤$()␤()␤»

[01:51] *** pierre_ joined
[01:51] *** johnjohn101 left
[01:52] <skids> The builtin aggregates apply an item around each of their elements.  It's possible to trick them nto not doing so, but not good form to do that.

[01:52] *** bob777 joined
[01:53] <skids> see https://docs.perl6.org/type/Scalar

[01:56] *** mcmillhj joined
[01:57] <dalek> whateverable: 4a65abd | MasterDuke17++ | / (4 files):

[01:57] <dalek> whateverable: Better unlinking of temp files/directories

[01:57] <dalek> whateverable: 

[01:57] <dalek> whateverable: Using the default behavior of File::Temp means the files are unlinked when the filehandle is garbage collected, which can cause problems if it happens at random times. Instead do it manually in a LEAVE block.

[01:57] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/4a65abda48

[02:01] *** mcmillhj left
[02:04] <Xliff> .seen moritz

[02:04] <yoleaux> I saw moritz 21 Aug 2016 14:07Z in #perl6: <moritz> afk again&

[02:09] *** noganex_ joined
[02:12] *** noganex left
[02:14] *** mcmillhj joined
[02:16] *** dataangel left
[02:17] *** dataangel joined
[02:19] *** mcmillhj left
[02:26] *** bob777 left
[02:27] *** mcmillhj joined
[02:31] *** mcmillhj left
[02:32] <dataangel> Is it possible in Perl6 to get the AST of a function at

[02:32] <dataangel>     runtime? Basically between runs of my program I want to detect if a

[02:32] <dataangel>     function has had its definition changed, or if any of the functions

[02:32] <dataangel>     that it calls have had its definition changed and so on recursively

[02:32] <dataangel> ...oops copy paste fail

[02:41] *** mcmillhj joined
[02:42] *** wamba joined
[02:45] <grondilu> why would the definition of a function change between two different runs of a program?

[02:46] *** mcmillhj left
[02:55] *** mcmillhj joined
[03:00] *** mcmillhj left
[03:06] *** cibs left
[03:08] *** TEttinger joined
[03:08] *** cibs joined
[03:14] *** pierre_ left
[03:16] *** MilkmanDan left
[03:20] *** pierre_ joined
[03:20] *** MilkmanDan joined
[03:24] *** Actualeyes1 joined
[03:24] *** Actualeyes left
[03:25] *** pierre_ left
[03:25] *** skids left
[03:27] *** mcmillhj joined
[03:31] *** pierre_ joined
[03:32] *** mcmillhj left
[03:34] *** ponbiki left
[03:36] *** ponbiki joined
[03:36] *** dataangel left
[03:42] *** vendethiel- joined
[03:42] *** vendethiel left
[03:43] *** khw left
[03:47] *** mcmillhj joined
[03:53] *** mcmillhj left
[04:07] *** TakinOver left
[04:15] *** Cabanossi left
[04:17] *** Cabanossi joined
[04:17] *** mcmillhj joined
[04:17] *** ragnar joined
[04:18] *** labster left
[04:19] *** timeless joined
[04:21] *** mcmillhj left
[04:34] *** ragnar left
[04:41] *** wamba left
[04:43] *** sno left
[04:45] *** sno joined
[04:53] *** labster joined
[04:53] *** labster left
[04:55] *** pierre_ left
[05:07] *** inokenty left
[05:07] *** mcmillhj joined
[05:08] *** xiaomiao left
[05:11] *** xiaomiao joined
[05:13] *** mcmillhj left
[05:20] *** sno left
[05:26] *** pierre_ joined
[05:29] *** canopus left
[05:31] *** pierre_ left
[05:31] *** mcmillhj joined
[05:35] *** mcmillhj left
[05:36] *** cibs left
[05:38] *** canopus joined
[05:38] *** cibs joined
[05:50] *** mcmillhj joined
[05:54] *** ufobat joined
[05:54] *** labster joined
[05:55] *** mcmillhj left
[06:12] *** zacts joined
[06:23] *** CIAvash joined
[06:26] *** firstdayonthejob joined
[06:29] *** sno joined
[06:31] *** mcmillhj joined
[06:33] *** firstdayonthejob left
[06:36] *** mcmillhj left
[06:48] *** rindolf joined
[07:04] *** mcmillhj joined
[07:08] *** mcmillhj left
[07:09] *** lizmat joined
[07:09] *** woolfy joined
[07:12] *** dj_goku_ joined
[07:12] *** lizmat_ joined
[07:12] *** darutoko joined
[07:13] <dalek> ecosystem: ec0c7c9 | (Pierre VIGIER)++ | META.list:

[07:13] <dalek> ecosystem: Add Acme::Sudoku to ecosystem

[07:13] <dalek> ecosystem: 

[07:13] <dalek> ecosystem: See https://github.com/pierre-vigier/Perl6-Acme-Sudoku

[07:13] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/ec0c7c9914

[07:13] <dalek> ecosystem: bb79885 | azawawi++ | META.list:

[07:13] <dalek> ecosystem: Merge pull request #238 from pierre-vigier/master

[07:13] <dalek> ecosystem: 

[07:13] <dalek> ecosystem: Add Acme::Sudoku to ecosystem

[07:13] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/bb79885c4d

[07:13] *** lizmat left
[07:14] *** dj_goku left
[07:15] *** lizmat joined
[07:17] *** lizmat__ joined
[07:17] *** lizmat_ left
[07:20] *** lizmat_ joined
[07:20] *** mcmillhj joined
[07:20] *** lizmat left
[07:20] *** zacts left
[07:22] *** lizmat__ left
[07:24] *** lizmat_ left
[07:24] *** cpage_ joined
[07:25] *** mcmillhj left
[07:27] *** RabidGravy joined
[07:29] *** bjz joined
[07:34] *** mcmillhj joined
[07:37] *** zakharyas joined
[07:39] *** mcmillhj left
[07:40] *** domidumont joined
[07:41] *** pierre_ joined
[07:43] *** domidumont left
[07:44] *** domidumont joined
[07:45] *** bjz left
[07:47] *** pmurias joined
[07:48] <pmurias> would having 'zef clone Foo::Bar' to git clone the Foo::Bar module be useful?

[07:59] *** rindolf left
[08:01] *** bjz joined
[08:04] <stmuk_> pmurias: like "panda look"? yes it would be useful

[08:05] <stmuk_> maybe something other than "clone" might support downloading archives too (when we use them rather than just git)

[08:07] <Xliff> m: say sqrt(4)

[08:07] <camelia> rakudo-moar 668dc5: OUTPUT«2␤»

[08:07] <Xliff> m: say sqrt(4^2)

[08:07] <camelia> rakudo-moar 668dc5: OUTPUT«one(2, 1.4142135623731)␤»

[08:07] <Xliff> m: say sqrt(4**2)

[08:07] <camelia> rakudo-moar 668dc5: OUTPUT«4␤»

[08:07] *** rindolf joined
[08:08] <Xliff> m: say sqrt(4.pow(2))

[08:08] <camelia> rakudo-moar 668dc5: OUTPUT«Method 'pow' not found for invocant of class 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[08:08] <Xliff> :(

[08:15] <pmichaud> yoleaux ping

[08:15] <yoleaux> 9 Jul 2016 21:27Z <raiph> pmichaud: Maybe ".todo" (instead of .chain or .ps from earlier message ^^) to replace current ".then"?

[08:15] <yoleaux> 23 Jul 2016 01:13Z <leokitten_> pmichaud: please if you can update the Google result snippet here is their page on how to change it https://developers.google.com/custom-search/docs/snippets

[08:19] <pmichaud> .tell leokitten  I'll be glad to make specific changes to update the snippet, but I don't know that I'll have time to fully research the http://developers.google.com/custom-search/docs/snippets page to figure out exactly what to change.

[08:19] <yoleaux> pmichaud: I'll pass your message to leokitten.

[08:20] <pmichaud> .tell leokitten  If it's just fixing a <meta> tag in the html output, I can easily do that (if someone can let me know what to put in the <meta> tag).

[08:20] <yoleaux> pmichaud: I'll pass your message to leokitten.

[08:22] *** mcmillhj joined
[08:27] <pmurias> stmuk_: ahh, panda look does that already

[08:27] *** mcmillhj left
[08:31] *** TheLemonMan joined
[08:34] *** mcmillhj joined
[08:39] *** mcmillhj left
[08:40] *** Girafferson joined
[08:47] *** smls joined
[08:48] <smls> m: say (a=>2) ~~ /a/;  say (a=>2).first(/a/)

[08:48] <camelia> rakudo-moar 668dc5: OUTPUT«｢a｣␤Method 'match' not found for invocant of class 'Pair'␤  in block <unit> at <tmp> line 1␤␤»

[08:48] <smls> ^^ This is a bug, right?

[08:49] <smls> Looks like .first might be cutting corners by calling  $element.match($predicate)  instead of  $predicate.ACCEPTS($element)  in case of a regex predicate

[08:50] <jnthn> Looks like

[08:58] * smls RT

[08:59] <TheLemonMan> m: 42.Str ~~ Str(Int)

[08:59] <camelia> rakudo-moar 668dc5: ( no output )

[08:59] <TheLemonMan> m: say 42.Str ~~ Str(Int)

[08:59] <camelia> rakudo-moar 668dc5: OUTPUT«False␤»

[08:59] <TheLemonMan> hmm

[09:02] *** g4 joined
[09:03] *** woolfy left
[09:06] *** mcmillhj joined
[09:08] *** araujo left
[09:08] *** araujo joined
[09:10] *** mcmillhj left
[09:12] *** jonas2 joined
[09:17] *** rindolf left
[09:17] *** pierre_ left
[09:22] *** niko joined
[09:22] <TheLemonMan> m: say 42.Str ~~ Str(Any)

[09:22] <camelia> rakudo-moar 668dc5: OUTPUT«False␤»

[09:27] *** mvorg joined
[09:27] *** rindolf joined
[09:29] *** maddingu1 is now known as maddingue

[09:39] *** zakharyas left
[09:41] *** zakharyas joined
[09:55] *** nadim joined
[09:58] *** zakharyas left
[10:00] *** zakharyas joined
[10:01] *** mcmillhj joined
[10:02] *** movl left
[10:02] *** KotH left
[10:02] *** KotH joined
[10:04] *** movl joined
[10:06] *** mcmillhj left
[10:11] *** labster left
[10:15] *** k-man left
[10:17] *** canopus left
[10:23] *** k-man joined
[10:25] *** canopus joined
[10:27] <pmurias> how do I turn Pod into markdown?

[10:27] <nadim> morning, I'll ask again, zef core dumps with the latest p6, build from git, and panda can't find Shell::Command. install is on a brand new box.

[10:28] <nadim> ugexe: is zef some kind of precompile version?

[10:28] <pmurias> ahh, found a module in the ecosystem

[10:29] <pmurias> TheLemonMan: I commited a fix for #117 myself, as that seemed easier then explaining things in the ticket

[10:30] <TheLemonMan> pmurias, I kinda got lost in the inner details of the codegen at some point :| but thanks for providing a quick fix :)

[10:32] *** TEttinger left
[10:32] *** mcmillhj joined
[10:34] *** AlexDaniel joined
[10:35] *** bjz_ joined
[10:36] <nadim> tadzik: some help with panda would be appreciated

[10:36] *** bjz left
[10:37] *** mcmillhj left
[10:44] *** bob777 joined
[10:48] *** pierre_ joined
[10:48] <tadzik> nadim: sure, what do you need?

[10:49] <tadzik> nadim: please show me how you're trying to build it and what exactly is showing up

[10:50] *** Actualeyes1 left
[10:52] *** iH2O joined
[10:52] <pmurias> tony-o: ping

[10:55] *** iH2O left
[10:55] *** mcmillhj joined
[10:58] <pmurias> tony-o: do you generate the README.md in Data::Dump from the Pod or is it hand written?

[11:00] <masak> hi, #perl6

[11:00] *** mcmillhj left
[11:01] <masak> precommit fyi: I won't be attending YAPC::Europe, but I'm putting together a nice talk for a simultaneous, one-track, one-speaker, one-talk conference: Bond-con

[11:01] <masak> (the talk is about 007)

[11:01] <tadzik> :D

[11:02] <RabidGravy> m: class Foo {}; role Bar {}; my $bar = Foo.new; ($bar does Bar) unless False

[11:02] <camelia> rakudo-moar 668dc5: OUTPUT«WARNINGS for <tmp>:␤Useless use of $bar in sink context (line 1)␤»

[11:02] <RabidGravy> is that warning intended or even desirable?

[11:03] <masak> I don't have a splendid idea for a talk title, and I might accept community help with that

[11:03] <RabidGravy> it appears to have crept in about a month ago

[11:03] <jnthn> Looks iffy to me.

[11:03] <masak> my current best suggestion is "On Her Macrosty's Secret Service"

[11:05] <RabidGravy> obviously several ways to shut it up, but all less than ideal

[11:05] *** iH2O joined
[11:07] <DrForr> live && let $die;

[11:08] *** mcmillhj joined
[11:08] <DrForr> !!kiss-kiss;

[11:09] <jnthn> Quasi of Solace. The Perl Is Not Enough. You Only Parse Once. The Man with the Golden Thunk.

[11:09] <masak> "You Only Parse Once" is brilliant

[11:09] <masak> even if the title was "...Twice" :)

[11:09] *** rindolf left
[11:10] <masak> I kinda like "Quasi of Solace" too

[11:10] <iH2O> why not a 2 pass compiler, is more flexible for goto labels

[11:10] <TheLemonMan> hmm, is there a way to save an intermediate result from p6 and then feed it into nqp manually? rakudo takes way too much to rebuild every time :(

[11:10] <masak> iH2O: that one actually made me smile :)

[11:10] <iH2O> you have to quote those labels with a one pass compiler

[11:10] <iH2O> :(

[11:10] <masak> iH2O: yep

[11:10] <jnthn> I used "You only live twice" as a slide title when teaching finalization semantics. :P

[11:10] <DrForr> Die() Another Day;

[11:11] <masak> DrForr: except 007 calls it `throw` :/

[11:13] *** mcmillhj left
[11:13] *** Eduardo_ left
[11:13] <DrForr> From R5RS with Love?

[11:13] <masak> not that inspired by Scheme, I'm afraid ;)

[11:14] <masak> but I like how all y'all're thinking :)

[11:15] *** domidumont left
[11:16] *** domidumont joined
[11:19] *** Actualeyes joined
[11:19] *** kurahaupo joined
[11:19] *** pierre_ left
[11:19] *** nightfrog left
[11:19] *** iH2O left
[11:20] <masak> thanks to vendethiel++, 007 has regexes now. (under a feature flag) -- we expect to start experimenting with `is parsed` soon

[11:20] *** nightfrog joined
[11:20] <masak> the more I think about `is parsed`, the more I realize how central it is to macros.

[11:20] <masak> *if* it works, which I think it will.

[11:20] <DrForr> . o ( Bourne Shell Ulimatum )

[11:21] <masak> wrong continuity ;)

[11:21] <DrForr> Nod, but it's still the same genre.

[11:22] <DrForr> 'Gold Member' is in violation of the CoC, I'm sure :)

[11:23] <masak> I'm not sure Bond-con will have one, but I also don't want an Austin Powers title ;)

[11:23] <jnthn> The macro who spliced me :P

[11:23] <masak> haha

[11:23] <masak> I've more or less stoped using "splice" as a verb, and started using "expand" instead

[11:25] <DrForr> 'Double 007' (it *does* feature Bond staples)

[11:25] *** darutoko left
[11:26] <masak> could also go with catch phrases. "Shaken, not parsed"

[11:26] <DrForr> For Your Bytes Only - thoguh that's more appropriate for a Unicode thing.

[11:26] <masak> or "See you later, interpolator"

[11:27] *** Celelibi left
[11:30] *** Actualeyes left
[11:30] *** Celelibi joined
[11:36] <tbrowder> I'm trying to work on docs for funcs sprintf and printf.  At the moment printf is described in Str which I believe is the wrong place.  I think it should be in IO since (1) it writes to stdout and (2) it should write to a file.  Ideas anyone?

[11:38] <stmuk_> looks like the main Cluj sessions may be live streamed!

[11:40] <pmurias> masak: I started work on the QAST 007 backend

[11:42] <pmurias> masak: would adding an option to dump ast to the s-expr form I see in test be helpfull?

[11:44] <DrForr> I would say 'oh dear god yes'.

[11:45] <masak> pmurias: yes, that sounds nice too

[11:45] <masak> pmurias: you mean as a separate backend?

[11:45] <masak> pmurias: please submit a PR for that -- I'll happily review it

[11:47] *** dzmien joined
[11:49] <masak> pmurias: slightly orthogonally -- I'm less and less happy with the s-expr syntax in the tests. it used to be lightweight and nice to write, but as 007 grew it also got more picky, and more wordy.

[11:50] <tbrowder> masak: re title, a bit Western but "The Good, the Bad, and the Ugly"

[11:50] <masak> pmurias: I haven't tried it, but maybe it could be saved by (no irony or circularity intended) writing it in a neater/smaller format, and having some post-processing step expand it into the more correct form

[11:50] <masak> tbrowder: also wrong continuity :)

[11:50] *** canopus left
[11:51] <masak> the language is called 007, not Clint :P

[11:51] <DrForr> I was thinking along the lines of 'IP cress files' as well :)

[11:54] <RabidGravy> has anyone got any feelings whether the https://github.com/perl6/doc/issues/847 is actually a bug rather than wishful thinking on the part of the docs before I alter the doc to match reality?

[11:55] *** smls left
[11:55] *** smls joined
[11:56] *** canopus joined
[11:58] <tbrowder> yes, but the adjectives can be very useful

[12:01] <pmurias> masak: so do you have a better way of dumping the ast then s-exprs?

[12:04] <jnthn> RabidGravy: I'm pretty sure that WHY method implementation is bogus.

[12:05] <jnthn> You can't just override a method to return something of the wrong type and expect good things to happen :)

[12:05] <RabidGravy> yeah, that's what I thought

[12:07] <masak> tbrowder: I already called a blog post something like that once: http://strangelyconsistent.org/blog/rakudo-good-cool-awesome-bad-ugly-weird

[12:08] *** mcmillhj joined
[12:08] <masak> pmurias: oh yes, hold on

[12:08] <masak> pmurias: this works just fine: `$ bin/007 -e='say(quasi { say("OH HAI") })'`

[12:08] <masak> pmurias: (can also be done from Perl 6, of course)

[12:08] <tbrowder> masak: nice reference and post!

[12:09] <masak> it's a really old post

[12:09] <masak> we're come a loooong way since then

[12:11] <RabidGravy> jnthn, the thing is that even if the example is fixed to return a Pod::Block::Declarator it still only runs the locally defined WHY

[12:13] *** mcmillhj left
[12:37] *** telex left
[12:37] *** Sgeo_ left
[12:38] *** telex joined
[12:48] *** canopus left
[12:54] <[Coke]_> .messages

[12:55] <[Coke]_> geekosaur: where do you see the [BUG] suggestion still for sending tickets?

[12:55] <[Coke]_> )ot

[12:55] *** perlpilot joined
[12:55] <[Coke]_> (it's voodoo from 10 years ago)

[12:55] *** mcmillhj joined
[12:55] *** canopus joined
[13:01] *** pierre__ joined
[13:03] *** domidumont1 joined
[13:03] *** domidumont left
[13:09] *** cdg joined
[13:11] *** [Coke]_ is now known as [Coke]

[13:18] *** darutoko joined
[13:18] *** Actualeyes joined
[13:30] *** mcmillhj left
[13:32] *** ptolemarch joined
[13:34] *** rindolf joined
[13:36] *** skids joined
[13:40] *** g4 left
[13:43] <geekosaur> I googled that because I never remember the address

[13:43] <geekosaur> (second hit was something complaining about that...)

[13:44] *** mcmillhj joined
[13:48] <[Coke]> oh, on rakudo.org. duh. thanks!

[13:52] *** mcmillhj left
[13:56] *** mcmillhj joined
[13:59] <dalek> doc: 4f433bb | (Tom Browder)++ | doc/Language/5to6-perlfunc.pod6:

[13:59] <dalek> doc: Perl 6's printf function doesn't yet work with a file

[13:59] <dalek> doc: review: https://github.com/perl6/doc/commit/4f433bb379

[13:59] <[Coke]> .ask pmichaud if I can have access to edit web pages on rakudo.org

[13:59] <yoleaux> [Coke]: I'll pass your message to pmichaud.

[14:06] <dalek> doc: cfa04d8 | RabidGravy++ | doc/Language/mop.pod6:

[14:06] <dalek> doc: Remove bogus example and associated text.

[14:06] <dalek> doc: 

[14:06] <dalek> doc: The example for the over-riding of the MOP methods couldn't possibly

[14:06] <dalek> doc: work and the assertion that supplying the name in quotes differs in

[14:06] <dalek> doc: dispatch from the unquoted one is incorrect.

[14:06] <dalek> doc: 

[14:06] <dalek> doc: Closes #847

[14:06] <dalek> doc: review: https://github.com/perl6/doc/commit/cfa04d819d

[14:07] *** pmurias left
[14:09] <AlexDaniel> hmmm

[14:09] <AlexDaniel> how can I rmdir a directory if it is not empty?

[14:10] <AlexDaniel> “Throws an exception of type X::IO::Rmdir if the directory cannot be removed (e.g. the directory is not empty, or the path is not a directory).”

[14:11] <AlexDaniel> well first of all it does not throw any exception, and it also returns an array instead of a Bool…

[14:12] <AlexDaniel> Ah, I see. ‘dir’.IO.rmdir does not work like rmdir ‘dir’

[14:14] <ugexe> yeah. have to do a recursive path listing. from there the naive way is to sort by length, reverse, and delete in order

[14:14] <AlexDaniel> ugexe: yeah, well… heh…

[14:17] *** wamba joined
[14:19] <RabidGravy> did I imagine an rmtree then?

[14:20] *** travis-ci joined
[14:20] <travis-ci> Doc build passed. Tom Browder 'Perl 6's printf function doesn't yet work with a file'

[14:20] <travis-ci> https://travis-ci.org/perl6/doc/builds/154157387 https://github.com/perl6/doc/compare/95cd6197c4ee...4f433bb3796e

[14:20] *** travis-ci left
[14:20] <AlexDaniel> RabidGravy: maybe not? https://github.com/labster/p6-file-directory-tree

[14:20] <AlexDaniel> I'm not sure what's the point of mktree in this module

[14:21] <AlexDaniel> given that mkdir will do the same thing, right?

[14:21] <RabidGravy> Hmm, let me find the place that I thought I was using it

[14:22] <RabidGravy> for some reason I have several modules which have tests that make directories

[14:29] *** naltun joined
[14:29] *** pmurias joined
[14:31] *** naltun left
[14:32] <pmurias> masak: the .Str on Q node works great

[14:35] *** khw joined
[14:38] *** aries_liuxueyang left
[14:39] <ugexe> rmtree is from File::Tree i think

[14:40] <ugexe> File::Directory::Tree rather

[14:41] <ugexe> AlexDaniel: JVM mkdir did not always act the same as moarvm

[14:41] <ugexe> you'd have to manually create each level of the directory structure on JVM a year+ ago

[14:44] <dalek> ecosystem: 7d5337e | (Alexey Melezhik)++ | META.list:

[14:44] <dalek> ecosystem: Sparrowdo module to install CPAN modules using App::cpm - a fast CPAN module installer

[14:44] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/7d5337eebc

[14:44] <dalek> ecosystem: 196884e | RabidGravy++ | META.list:

[14:44] <dalek> ecosystem: Merge pull request #239 from melezhik/master

[14:44] <dalek> ecosystem: 

[14:44] <dalek> ecosystem: Sparrowdo module to install CPAN modules using App::cpm - a fast CPAN module installer.

[14:44] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/196884efad

[14:51] *** aries_liuxueyang joined
[14:52] *** inokenty joined
[14:53] *** dLeCamarae joined
[14:56] *** aries_liuxueyang left
[14:58] *** jonas2 left
[15:00] *** [Sno] joined
[15:00] *** sno left
[15:01] <RabidGravy> yeah, and infact the place I thought I was using it I'd actually implemented it myself

[15:10] <pmurias> masak: having a way to print out the ast from the command line would be great

[15:15] *** jdoege joined
[15:15] <dalek> doc: 2ff9fbc | coke++ | doc/Language/ (3 files):

[15:15] <dalek> doc: fix whitespace

[15:15] <dalek> doc: review: https://github.com/perl6/doc/commit/2ff9fbc264

[15:16] <[Coke]> pmurias: --target=ast ?

[15:16] *** aries_liuxueyang joined
[15:18] <jdoege> In Synopsys 5, a tilde metacharacter is defined to help match nested subrules. This metacharacter does not appear in the perl6 docs. Testing it, it seems to work in the current version of perl6. Is this just oversight/incompleteness or is this deprecated or not yet excised from perl6 regexs?

[15:19] <jdoege> I'm happy to be made a fool if it does appear in the docs, but I couldn't find it.

[15:19] <jdoege> By way of example, this matches: "( fred )" ~~ / \( ~ \) (\s*fred\s*) /;

[15:20] <ugexe> fwiw the synopsys aren't official

[15:20] *** MilkmanDan left
[15:21] *** avenj joined
[15:21] <jdoege> Yeah, I get that, but in this case S05 describes something that is in the current implementation of the language, but not in the official documentation.

[15:21] <[Coke]> if it's in rakudo, it's either officially supported or it's not. If it's in github's perl6/roast 6.c-errata branch, it's official

[15:21] <ugexe> well which part of your example are you talking about? the ~~ or ~?

[15:22] <[Coke]> jdoege: the docs are not considered complete at this time. best effort as we go

[15:25] <dLeCamarae> Guys, hello. I have thrice failed at make install with Rakudo, running out of memory under the Intel Galileo.

[15:25] <dLeCamarae> Does anybody know how I can dodge around that?

[15:25] *** MilkmanDan joined
[15:25] <stmuk_> more swap?

[15:26] <jdoege> ugexe: the ~ inbetween the \( and \). It does some magic that swaps the \) and (\s*fred\s*) and also applies some assertions.

[15:26] <dLeCamarae> It has 512MB RAM, 400MHz processor. i586.

[15:26] <dLeCamarae> Oh, wait. More swap. Of course.

[15:26] <dLeCamarae> Let me see if I can make some swap space.

[15:26] <ugexe> you pretty much need a min of 2GB ram to build rakudo

[15:26] <tony-o> pmurias: i think i hand wrote the README, someone submitted a PR for it initially

[15:27] <[Coke]> jdoege: it's all a little bit of a mess; please feel free to open a doc bug at github.com/perl6/doc/issues

[15:27] <stmuk_> dLeCamarae: you can add a swap file if you don't want to mess with disk

[15:28] <stmuk_> it will be very slow of course

[15:28] <dLeCamarae> stmuk_ However in Linux I have to create a swap partition first, yeah? (I already have this one on an SD card, so that may be a tricky move. Wanna be sure.)

[15:28] <stmuk_> dLeCamarae: https://wiki.archlinux.org/index.php/swap#Swap_file

[15:29] <stmuk_> you can use a file or repartition

[15:29] <jdoege> Coke: thanks for the pointer. Not complaining. I just don't want to use it if it is deprecated/going to disappear. I'll open a bug.

[15:29] *** mcmillhj_ joined
[15:29] *** araujo left
[15:30] *** araujo joined
[15:30] <dLeCamarae> stmuk_ Thanks; now running a dd(1) on it ...

[15:31] *** acrussell joined
[15:31] <[Coke]> jdoege: not surprisingly, searching for '~' in all the S05 tests is... problematic. :)

[15:31] <[Coke]> lots of ~$var, lots of $this ~~ /that/

[15:32] <[Coke]> but docs is a great place to log that exact question (is this supported?)

[15:32] <[Coke]> jdoege+=

[15:32] <jnthn> jdoege: It's used quite heavily in the Perl 6 grammar itself, so it's safe to rely on it :)

[15:32] <[Coke]> jdoege++

[15:32] <jnthn> And yes, wants documenting :)

[15:32] *** mcmillhj left
[15:32] <jnthn> Also its interaction with FAILGOAL and :dba(...)

[15:32] <jdoege> In the Roast data it look like it is in there: t/spec/S05-metachars/tilde.t, so Yay!

[15:33] <[Coke]> woot, found it. well done

[15:33] <[Coke]> jnthn++

[15:33] <domm> hey, I just tried to install Inline::Perl5 (so I have something to play with while traveling to YAPC), but got: 

[15:33] <domm> /usr/bin/ld: /home/domm/perl5/perlbrew/perls/system/lib/5.24.0/x86_64-linux/CORE/libperl.a(op.o): relocation R_X86_64_32S against `PL_opargs' can not be used when making a shared object; recompile with -fPIC

[15:33] <domm> /home/domm/perl5/perlbrew/perls/system/lib/5.24.0/x86_64-linux/CORE/libperl.a: error adding symbols: Bad value

[15:33] <domm> collect2: error: ld returned 1 exit status

[15:34] <domm> that's a perlbrew'ed Perl 5.24 - does it need any special flags?

[15:34] <stmuk_> domm: perlbrew install perl-stable -Duseshrplib

[15:34] <stmuk_> from https://github.com/niner/Inline-Perl5

[15:35] <[Coke]> domm: https://github.com/niner/Inline-Perl5#building

[15:38] *** avenj left
[15:43] *** zakharyas left
[15:46] <domm> thx

[15:48] <nadim> ugexe: can I get some help with zef generating a core dump?

[15:52] <ugexe> nadim: run whatever the problem command is again, but with with the --debug flag and gist the result

[15:53] <dLeCamarae> stmuk_ Alas. swapon: /media/storage/swapfile: swapon failed: Function not implemented

[15:53] <dLeCamarae> It seems the Galileo's kernel does not by default do swapping.

[15:54] <pmurias> is the bug where -> {...} sometimes hides the stacktrace from exceptions in rakudo known or should I report it?

[15:54] *** domidumont1 left
[15:55] *** Dunearhp joined
[15:55] <pmurias> [Coke]: 007 doesn't support target ast

[15:55] <pmurias> [Coke]: or do you mean I should make it support it

[16:00] <stmuk_> dLeCamarae: maybe it only handles partiations and not swap files

[16:01] <stmuk_> cat /boot/config-* or similar may help

[16:01] <TheLemonMan> pmurias, a similar problem wrt stack frames disappearing has been recently fixed in MoarVM

[16:06] *** ilogger2 joined
[16:06] *** ChanServ sets mode: +v ilogger2

[16:06] <ugexe> perl6 -v please, latest p6 from rakudo repo could mean a few different things

[16:06] *** ilbelkyr joined
[16:06] *** Util joined
[16:06] *** ilbelkyr is now known as Guest61205

[16:07] <nadim> ugexe: This is Rakudo version 2016.07.1-243-gc201a76 built on MoarVM version 2016.07-24-g31eccd7

[16:08] <nadim> ugexe: even perl6 -Ilib bin/zef, without command, seg faults

[16:09] <stmuk_> I *think* the Galileo has an MMU

[16:10] <dLeCamarae> It does. But I am not hitting that particular wall.

[16:10] *** kyclark joined
[16:10] *** kyclark left
[16:12] <dLeCamarae> I think this Linux I got from Intel is intentionally munted with regard to swap and stuff.

[16:12] *** kyclark joined
[16:12] <kyclark> I understand this well enough:

[16:12] <kyclark> m: my @list = 1, 3, 9 ... * > 30;

[16:12] <camelia> rakudo-moar 668dc5: ( no output )

[16:12] <dLeCamarae> Either I will compile me another Yocto-based image, or, if it comes to it, find different hardware.

[16:12] <kyclark> m: say 1, 3, 9 ... * > 30;

[16:12] <camelia> rakudo-moar 668dc5: OUTPUT«(1 3 9 27 81)␤»

[16:12] <kyclark> but why won't this work?

[16:12] *** pRiVi joined
[16:13] <kyclark> m: say 1, 3, 9 ... * < 30

[16:13] <camelia> rakudo-moar 668dc5: OUTPUT«(1)␤»

[16:13] *** go|dfish joined
[16:13] <kyclark> That is, I would expect it to include elements up to 30

[16:13] *** salparadise joined
[16:15] <jnthn> It's a termination condition; it says when you don't want more values from the sequences

[16:15] <jnthn> m: say 1, 3, 9 ...^ * > 30;

[16:15] <camelia> rakudo-moar 668dc5: OUTPUT«(1 3 9 27)␤»

[16:15] *** espadrine joined
[16:15] <kyclark> Oh, thanks.  That makes sense now.

[16:16] *** lizmat joined
[16:17] <moritz> \o

[16:17] *** zakharyas joined
[16:19] <lizmat> moritz o/

[16:19] <timotimo> o/

[16:19] *** atacama joined
[16:20] <harmil_wk> jdoege: I'm not sure if anyone said this to you, but "'[

[16:20] <ugexe> nadim: I'm not sure, I just tried with a `rakudobrew build moar-blead` and no segfault. You might have to `rm -rf ~/.zef`, `rm -rf <ZEF_DIR>/lib/.precomp`, and/or `rm -rf ~/.perl6` for some weird reason

[16:20] <harmil_wk> jdoege: I'm not sure if anyone said this to you, but "'[' ~ ']' <thing>" and the like are used all over the compiler, so yeah, very official

[16:20] <stmuk_> galileo-debian?

[16:22] <timotimo> you have to be careful with the ~ operator, as it immediately fails when the inner thing doesn't end in the thing the ~ is supposed to find at the end

[16:22] <timotimo> i.e. no backtracking

[16:22] <timotimo> this has bitten people extremely often in the past

[16:25] <harmil_wk> timotimo: I assume you mean like this:

[16:25] <harmil_wk> m: say "[1 2 3]" ~~ m:s/^"[" ~ "]" ([\d\s+]*?)/

[16:25] <camelia> rakudo-moar 668dc5: OUTPUT«False␤»

[16:25] <harmil_wk> No, that's a bug... that works like this:

[16:25] <harmil_wk> m: say "[1 2 3 ]" ~~ m:s/^"[" ~ "]" ([\d\s+]*?)/

[16:25] <camelia> rakudo-moar 668dc5: OUTPUT«｢[1 2 3 ]｣␤ 0 => ｢1 2 3 ｣␤»

[16:25] <timotimo> m: say "[ yo yo yo ]" ~~ m/'[' ~ ']' (.*)/

[16:25] <camelia> rakudo-moar 668dc5: OUTPUT«｢[ yo yo yo ]｣␤ 0 => ｢ yo yo yo ｣␤»

[16:26] <timotimo> ..oh?

[16:26] <timotimo> i'm pretty sure this used to explode pretty violently

[16:29] <harmil_wk> Even seems to work in a subrule:

[16:29] <harmil_wk> m: my regex dig { .* }; say "[1 2 3 ]" ~~ m:s/^"[" ~ "]" <dig>/

[16:29] <camelia> rakudo-moar 668dc5: OUTPUT«｢[1 2 3 ]｣␤ dig => ｢1 2 3 ｣␤»

[16:29] * moritz back to civilized Internet connection

[16:30] <timotimo> "civilized internet"? sounds like a myth to me :P

[16:30] <harmil_wk> timotimo: it's where you have two computers connected via USB inside a faraday cage.

[16:30] <moritz> well, WLAN + 50Mbit DSL

[16:31] <moritz> in contrast to LTE or 3G + Roaming + tethering

[16:31] <timotimo> hehe.

[16:32] <tbrowder> [Coke] What was the whitespace problem?

[16:34] <nadim> ugexe: let me try

[16:38] <nadim> ugexe: removed <ZEF>/lib/.precomp and ~/.perl6, ~/.zef did not exist. still a seg fault, even if it took a tad longer.

[16:42] <harmil_wk> Has anyone done any work on Perl 5 style "-p/n" yet? I'm wondering if maybe it should be done via a module, but I can't figure out if a module can modify the QAST structure of the caller to inject the appropriate loop code.

[16:42] <moritz> rakudo has -p and -n options, no?

[16:42] <moritz> what are you missing?

[16:42] <harmil_wk> Does it?

[16:43] <ugexe> nadim: what is your `nqp -v`?

[16:43] <harmil_wk> It does. I guess I just missed it

[16:43] <harmil_wk> drat

[16:44] <moritz> rejoice! One more feature you can use immediately

[16:44] <dLeCamarae> stmuk_ I think I have found a galileo-debian image on SourceForge; I should slot some time to work with it. Thanks.

[16:44] <stmuk_> dLeCamara: good luck!

[16:44] <lizmat> PSA: the P6W will appear in about 5 hours from now

[16:45] <lizmat> *after* I got some dinner   :-)

[16:45] <lizmat> afk&

[16:48] *** domidumont joined
[16:52] <RabidGravy> stmuk_, dLeCamarae I was thinking about digging out my galileo to have a play this week

[16:57] *** iH2O joined
[17:01] <nadim> ugexe: This is nqp version 2016.07-177-gb416158 built on MoarVM version 2016.07-24-g31eccd7

[17:02] *** acrussell joined
[17:05] *** webstrand joined
[17:05] *** iH2O left
[17:11] *** iH2O joined
[17:11] *** firstdayonthejob joined
[17:12] <iH2O> what is a delayed declaration? i googled it but got nothing relevant

[17:15] <lucs> iH2O: What's the context?

[17:15] <iH2O> the name appears in the feature matrix for the perl6 compilers

[17:16] <iH2O> http://perl6.org/compilers/features

[17:16] <lucs> Yeah. Hmm... No idea. Someone else might know.

[17:17] <iH2O> its not implemented yet, i guess few people miss it

[17:17] <timotimo> m: foobar; sub foobar { say "hi" }

[17:17] <camelia> rakudo-moar 933e9a: OUTPUT«hi␤»

[17:18] <timotimo> oh, that's potentially delayed macro declarations? i don't know

[17:18] <timotimo> many things in the feature matrix are ... mysterious

[17:18] <timotimo> their meaning long lost from all the oral re-tellings throughout the generations

[17:18] <timotimo> you know, before writing was readily available to the masses

[17:19] <ugexe> nadim: I'm not sure. Seems like a change in moar or nqp is causing it but I don't see what from glancing at the commits. Running with `perl6-gdb-m` and/or `perl6-valgrind-m` might give additional clues

[17:19] <timotimo> when programmers had to explain with literal hand waving to the computer what it's supposed to be calculating

[17:19] <iH2O> yes, thx timotino

[17:20] <iH2O> s/n/m/

[17:20] *** mohae_ joined
[17:22] <nadim> ugexe:  http://nopaste.linux-dev.org/?1119762

[17:29] <[Coke]> pmurias: I thought you were talking about rakudo, my bad.

[17:30] *** jrandm left
[17:31] <[Coke]> tbrowder: (whitespace) trailing whitespace, non-breaking space in Perl 6 - "make xtest" failures.

[17:34] *** [Sno] joined
[17:35] <smls> Is the subroutine form of getc() broken for anyone else?

[17:36] <smls> $  perl6 -e 'getc'

[17:36] <smls> read string requires an object with REPR MVMOSHandle

[17:36] <smls>   in block <unit> at -e line 1

[17:36] <ugexe> nadim: searching for `elision-unlock.c: No such file or directory` points at glibc and newer intel processors. Did this ever happen before on the same system with different versions of rakudo?

[17:37] <ugexe> smls: I get that for all rakudo versions

[17:38] <nadim> ugexe: brand new computer, first install

[17:38] <nadim> ugexe:  perl6-valgrind still running

[17:42] <harmil_wk> moritz: mostly I was sad because I wanted an excuse to get into playing with 6guts from userland.

[17:42] <ugexe> nadim: it looks like you might have to compile/install glibc with --disable-elision-lock, as some processors implemented the feature wrong (some have it disabled in microcode, but others have no microcode update for this)

[17:43] *** bioduds joined
[17:43] <bioduds> hello

[17:43] <bioduds> does someone know how to interpolate a var in heredocs?

[17:43] <bioduds> in perl6?

[17:45] <moritz> bioduds: if you use double-quotes in the :to thingy, variables are interpolated

[17:45] <moritz> q:to"EOF"

[17:48] <bioduds> tx :)

[17:48] <bioduds> pretty simple :D thanks man

[17:49] *** iH2O left
[17:49] *** ilbot3 joined
[17:49] <timotimo> um

[17:49] <timotimo> really?

[17:49] <timotimo> i would have thought it's about whether you use q or qq

[17:49] <timotimo> because qq will interpolate values, whereas q won't

[17:50] <geekosaur> shell vs. perl think :p

[17:50] <geekosaur> (perl, of course, supports both :)

[17:50] <bioduds> I didnt quite get the q and qq thing actually

[17:50] <timotimo> yeah, just using :to"EOF" won't interpolate vars inside the heredoc

[17:50] <moritz> oh, sorry

[17:51] <moritz> than I was thinking of p5isms

[17:51] <timotimo> it's q:to"FOO" vs qq:to"FOO" that makes the difference

[17:51] <bioduds> didn't work

[17:51] <moritz> bioduds: listem to timotimo, not me

[17:51] <bioduds> q:to"END" not interpolating

[17:51] <moritz> I'm old and out of the loop

[17:51] <timotimo> hah

[17:51] <timotimo> we still love you, though, moritz :)

[17:51] * moritz hugs everybody

[17:52] *** awwaiid joined
[17:52] <moritz> btw, during the vacations I've sold the first copy of my book \o/

[17:52] <moritz> it's not finished, but on leanpub, where you can buy it in the knowledge that it's incomplete (and receive updates for free)

[17:53] <timotimo> cool!

[17:53] <bioduds> i tried q:to/"END"/

[17:53] <bioduds> didn't interpolate

[17:53] <moritz> bioduds: try qq:to...

[17:53] <timotimo> in that case you'll have to use "END" as your heredoc end

[17:54] <moritz> qq:to/END/...END

[17:54] <bioduds> oh

[17:54] <bioduds> qq

[17:54] <bioduds> ok

[17:54] <bioduds> let me try

[17:57] <moritz> the idea of q and qq is to be like single and double quotes

[17:57] <moritz> where the single (q and ') tend not to interpolate, whereas the double (qq and ") tend to interpolate

[18:02] *** nadim joined
[18:02] <kyclark> Can someone explain the output I'm seeing here:

[18:02] <kyclark> http://lpaste.net/179562

[18:02] *** zacts joined
[18:03] *** domidumont left
[18:03] <timotimo> m: say "foobar".comb(99)

[18:03] <camelia> rakudo-moar 933e9a: OUTPUT«(foobar)␤»

[18:04] <timotimo> huh.

[18:04] *** labster joined
[18:05] <moritz> m: say "foobar".comb("99")

[18:05] <camelia> rakudo-moar 933e9a: OUTPUT«()␤»

[18:05] <moritz> kyclark: ^^

[18:05] <moritz> kyclark: make sure max is an integer

[18:05] <timotimo> oh, hah

[18:05] <timotimo> that's a good one

[18:05] <moritz> sub MAIN (Str $file where *.IO.f, Int :$max=50) {

[18:06] <moritz> heh, old /me isn't entirely useless yet :-)

[18:07] <timotimo> well done, moritz 

[18:09] <kyclark> Just add Int to the sig didn't fix it, had to do "$line.comb(+$max)" -- thanks!

[18:09] *** zacts left
[18:10] <moritz> oh, because Int will likely give you an IntStr

[18:10] <masak> pmurias: just pushed a commit that makes `$ bin/007 --backend=ast -e='say(1 + 2 + 3)'` work

[18:10] <moritz> and for .comb(IntStr), the Str nature of IntStr seems to win

[18:11] <kyclark> What is "comb" supposed to do with a Str?

[18:11] <timotimo> right, and even Int() wouldn't turn an IntStr into its Int form, right?

[18:11] <timotimo> the same as it does with a regex that only has a literal in it

[18:11] <timotimo> but a few hundred times faster

[18:11] <moritz> kyclark: look for occurences of that string

[18:11] <kyclark> Much to learn I have.

[18:12] <timotimo> comb is more or less the opposite of split

[18:12] <moritz> just like .comb(regex) looks for matches of the regex

[18:12] <timotimo> though split also has a flag that lets you keep the "other" parts, too

[18:13] <kyclark> OK, so maybe this is what I'm looking for to go the other way from this script.  That one is text to FASTA, but I'd like to split a string of text like ">1\nACTG\n>2\nACTGA" on the "\n?>" bits

[18:13] <kyclark> m: say ">foo>bar".comb(">")

[18:13] <camelia> rakudo-moar 933e9a: OUTPUT«(> >)␤»

[18:14] <kyclark> m: ">foo>bar".split(">")

[18:14] <camelia> rakudo-moar 933e9a: ( no output )

[18:14] <kyclark> m: say ">foo>bar".split(">")

[18:14] <camelia> rakudo-moar 933e9a: OUTPUT«( foo bar)␤»

[18:14] <timotimo> yeah, it also gives you the initial empty string

[18:15] <timotimo> (to uphold split-then-join giving the same result) 

[18:18] <timotimo> dualism! that's the word i was looking for

[18:23] <masak> timotimo: "duality"?

[18:23] <timotimo> probably

[18:23] <timotimo> is it actually a duality?

[18:25] <masak> the word means "it's two things", more or less

[18:26] <El_Che> hi perl6

[18:27] <TimToady> howdy from Cluj

[18:27] <El_Che> good trip?

[18:28] <El_Che> (before I had calendar problem I had a look from Belgium. It was 6 hours for a 2h trip. Crazyness)

[18:28] <TimToady> they broke our airplane at ORD, which resulted in a 4 hour delay, but fortunately we had a 5 hour layover in MUC

[18:28] <TimToady> it was merely "a failed APU"...

[18:28] <El_Che> the question is: did you have enough battery :)

[18:29] *** zakharyas left
[18:29] <El_Che> TimToady: ok, that sounds like a bad Simpsons reference :)

[18:29] <TimToady> well, given we slept most of the redeye, didn't need a lot of batter

[18:29] <TimToady> *ry

[18:29] <El_Che> hehe

[18:29] <El_Che> batter :)

[18:30] *** cognominal joined
[18:31] <El_Che> bbl, putting kid to bed. Have fun in cluj!

[18:31] <TimToady> we'll try

[18:34] <harmil_wk> m: my @a = [1,2,3], [4,5], [6]; my @b = 1,2,3,4; say @a »<» +@b

[18:34] <camelia> rakudo-moar 933e9a: OUTPUT«[[True True True] [False False] [False]]␤»

[18:34] <harmil_wk> Shouldn't that be [True, True, True]?

[18:35] *** zacts joined
[18:36] <TimToady> you're thinking of zip maybe

[18:36] <TimToady> hypers are more completist

[18:37] <TimToady> and hypers want to replicate the incoming structure

[18:38] <timotimo> yes, hypers will aattempt to keep the structure of a thing

[18:38] <TimToady> m: my @a = [1,2,3], [4,5], [6]; my @b = 1,2,3,4; say @a Z»<» +@b

[18:38] <camelia> rakudo-moar 933e9a: OUTPUT«([True True True])␤»

[18:38] <harmil_wk> Interesting...

[18:38] <harmil_wk> Thanks

[18:45] *** pierre_ joined
[18:50] *** pierre_ left
[18:57] *** _slade_ joined
[19:00] <awwaiid> TimToady: how was abstractions?

[19:03] <TimToady> a lot of great talks there

[19:03] <awwaiid> Sweet. Great line-up. I'm heading to StrangeLoop next month and that used up my conference budget or I'd have been there to cheer you :)

[19:04] <awwaiid> Everyone I've talked to loved the conference

[19:04] <awwaiid> Your talk go well?

[19:05] <TimToady> pretty good

[19:07] <awwaiid> cool. Think there'll be video?

[19:07] * TimToady too tired to backlog, collapses into bed

[19:07] <awwaiid> o/

[19:08] <TimToady> nigh tall

[19:08] <awwaiid> gnight

[19:14] *** zakharyas joined
[19:15] *** LegalResale joined
[19:19] *** webstrand left
[19:19] *** Ven joined
[19:20] *** webstrand joined
[19:22] *** zakharyas left
[19:24] *** MilkmanDan joined
[19:31] *** rmmm joined
[19:31] *** zacts left
[19:40] *** rmmm left
[19:41] *** rmmm joined
[19:42] *** zacts joined
[19:42] <timotimo> i'm looking forward to video, too

[19:44] *** webstrand left
[19:46] *** pierre_ joined
[19:47] *** webstrand joined
[19:50] *** pierre_ left
[20:01] *** acrussell left
[20:10] *** pmurias joined
[20:11] *** brrt joined
[20:12] *** carl` joined
[20:18] *** fudog931 joined
[20:20] *** MilkmanDan left
[20:20] *** fudog931 left
[20:23] <brrt> TheLemonMan++

[20:23] <brrt> also, you should check out what the perl6-binary does

[20:24] <brrt> which is, on my system, this: exec /home/bart/usr/bin/moar  --execname="$0" --libpath="/home/bart/usr/share/nqp/lib" --libpath="/home/bart/usr/share/perl6/lib" --libpath="/home/bart/usr/share/perl6/runtime" /home/bart/usr/share/perl6/runtime/perl6.moarvm "$@"

[20:24] <brrt> i.e. it sets a bunch of libppaths

[20:24] <brrt> i'm not 100% the a mbc file is just runnable from perl6

[20:25] <brrt> (from nqp it is no problem)

[20:26] <brrt> wrong window :-)

[20:26] *** imcsk8 joined
[20:27] *** brrt left
[20:32] *** MilkmanDan joined
[20:35] *** mvorg joined
[20:39] *** Ven left
[20:43] *** zacts left
[20:45] *** Ven joined
[20:46] *** Ven left
[20:46] *** sivoais joined
[20:47] *** carl` left
[20:48] *** kent\n joined
[20:48] *** kent\n left
[20:48] *** kent\n joined
[20:55] *** raiph joined
[21:13] *** xiaomiao joined
[21:14] *** Dunearhp joined
[21:16] *** espadrine left
[21:17] *** cdg joined
[21:22] *** canopus joined
[21:25] *** imcsk8 left
[21:25] *** imcsk8 joined
[21:29] *** labster left
[21:30] *** labster joined
[21:35] <timotimo> i'm getting a spec test failing with the recently improved error about slurpies and defaults on them

[21:35] <timotimo> t/spec/S06-signature/introspection.rakudo.moar

[21:35] <timotimo> won't compile

[21:35] <timotimo> even though my rakudo is on latest :\

[21:35] <timotimo> as is my roast checkout

[21:35] <timotimo> so ... something went wrong with the pull requests or something?

[21:36] *** nadim_ joined
[21:39] *** cpage_ joined
[21:40] *** nadim left
[21:45] *** canopus left
[21:46] <lizmat> .

[21:47] *** TEttinger joined
[21:51] *** canopus joined
[22:00] *** _slade_ left
[22:03] *** Sgeo_ joined
[22:12] <Xliff> .seen moritz

[22:12] <yoleaux> I saw moritz 18:12Z in #perl6: <moritz> just like .comb(regex) looks for matches of the regex

[22:20] *** dylanwh joined
[22:21] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2016/08/22/2016-34-a-quick-botch-from-cluj/

[22:22] <Xliff> lizmat++

[22:24] <timotimo> cool

[22:25] *** mohae_ left
[22:26] <El_Che> lizmat++

[22:26] *** mohae joined
[22:26] <lizmat> added jnthn++ blog post

[22:26] <lizmat> https://6guts.wordpress.com/2016/08/22/concurrency-bug-squishing-part-1/

[22:27] *** nadim_ left
[22:29] <El_Che> is it me or was it allowed in older rakudo releases to have 'is rw' on non scalar variables in sub signatures?

[22:30] *** bjz joined
[22:40] *** cdg left
[22:41] *** cibs joined
[22:44] *** firstdayonthejob left
[22:45] *** bjz left
[22:51] *** Dunearhp left
[22:51] <dalek> whateverable: 635f61a | MasterDuke17++ | / (3 files):

[22:51] <dalek> whateverable: Make sure there's a filename to unlink

[22:51] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/635f61a327

[22:54] *** skids joined
[22:56] *** Dunearhp joined
[23:07] <awwaiid> can you put more than one whenever in a react block?

[23:12] *** MilkmanDan left
[23:14] *** Dunearhp left
[23:16] <dalek> whateverable: 4d50e7d | (Aleks-Daniel Jakimenko-Aleksejev)++ | Bisectable.p6:

[23:16] <dalek> whateverable: Oops in e84ccc8

[23:16] <dalek> whateverable: 

[23:16] <dalek> whateverable: It was supposed to be a description of a gist, not a file called “description”.

[23:16] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/4d50e7dc06

[23:23] *** awwaiid left
[23:23] *** pmurias left
[23:32] *** MilkmanDan joined
[23:33] <bioduds> TimToady for president!! :)

[23:38] *** MilkmanDan left
[23:38] *** mcmillhj joined
[23:39] *** mvorg left
[23:43] *** gil joined
[23:44] *** gil is now known as gils

[23:46] <gils> p6: my $a; without $a { say 1 } else { say 2 }

[23:46] <camelia> rakudo-moar 3af93c: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤"unless" does not take "else", please rewrite using "if"␤at <tmp>:1␤------> 3my $a; without $a { say 1 } 7⏏5else { say 2 }␤»

[23:46] <gils> The error message for trying to use "else" with an "without" condition says "unless" does not take "else"

[23:47] <gils> I should say "without" does not take "else"

[23:47] *** mvorg joined
[23:48] *** pierre_ joined
[23:49] *** MilkmanDan joined
[23:52] *** margeas joined
[23:52] *** _slade_ joined
[23:52] *** mvorg left
[23:53] *** pierre_ left
[23:54] <gils> *it

[23:55] *** gils left
[23:57] <timotimo> TimToady for present!

