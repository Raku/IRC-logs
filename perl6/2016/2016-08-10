[00:01] *** harovali left
[00:06] *** pierre_ left
[00:09] *** cpage_ left
[00:12] <AlexDaniel> gfldex: oh well, uints! One more dark side of rakudo…

[00:13] <AlexDaniel> m: uint $x = 0; $x--; say $x

[00:13] <camelia> rakudo-moar 328402: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3uint7⏏5 $x = 0; $x--; say $x␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        st…»

[00:13] <AlexDaniel> m: my uint $x = 0; $x--; say $x

[00:13] <camelia> rakudo-moar 328402: OUTPUT«-1␤»

[00:13] <AlexDaniel> oops, right? ;)

[00:13] *** cpage_ joined
[00:13] *** rpburkholder left
[00:16] <timotimo> yes, very

[00:20] *** cdg left
[00:26] <dalek> doc: c3379f5 | coke++ | doc/Language/typesystem.pod6:

[00:26] <dalek> doc: use nbsp

[00:26] <dalek> doc: review: https://github.com/perl6/doc/commit/c3379f51f5

[00:30] *** jonadab left
[00:30] *** lichtkind__ left
[00:31] *** lambd0x joined
[00:31] <lambd0x> Hello everyone!

[00:32] <timotimo> hey you

[00:32] <lambd0x> timotimo: \o/

[00:32] <lambd0x> timotimo: how're doing?

[00:32] <timotimo> today was not a good day, but otherwise all right

[00:32] <timotimo> how are you?

[00:33] <lambd0x> fine, just having some doubts using file in perl6

[00:34] <timotimo> "file"?

[00:34] <lambd0x> timotimo: basically yes... I'm trying something that I used to do all the time in C...

[00:35] <lambd0x> to have a config file and that would provide parameters and also input to the program..

[00:36] <lambd0x> but I'm not being able to get the hold of a handle that just firstly reads two numbers to some vars and considers the rest of that file as input.

[00:36] <timotimo> what are you tryung?

[00:37] <timotimo> like, are the first two numbers in a line of their own?

[00:38] <lambd0x> To multiply two Matrixes. I'm providing first the two numbers to know the order of the first matrix then its contents and in the same file the next two numbers of the second matrix and then its contents

[00:38] <lambd0x> timotimo: yes.

[00:38] <timotimo> then you can just .get it line by line, can't you?

[00:39] <lambd0x> timotimo: yes, but if I do that. how can I say read it up to that point? For the contents, and then again read another two and repeat the process

[00:40] <timotimo> depends entirely on how you know how much content there is

[00:40] <lambd0x> those two files express the order of a matrix and therefore if I have a 2 2 -> 4 numbers should be read

[00:41] <timotimo> are the values in the matrices encoded as human-readable numbers? are they just 32bit floats or something?

[00:41] *** jack_rabbit left
[00:41] <timotimo> is it still line-based? a certain number of numbers per line?

[00:42] <lambd0x> timotimo: they're integers separated by lines acording to their order (in matrix form) I managed to save them such that would be easily read by performing a loop with the order numbers

[00:43] *** jack_rabbit joined
[00:43] <lambd0x> basically I wanted a way to read a number from the stream and keep the handler to afterwards read another number that I would be able to control somehow...

[00:45] <timotimo> for ^2 { my $matrixorder = +$file.get; my @matrixlines = $file.get xx $matrixorder; say @matrixlines.perl }

[00:45] <timotimo> try that

[00:46] <lambd0x> timotimo: ^2 means?

[00:47] <timotimo> "up to two", in other words 0..1

[00:47] <timotimo> or in this context, "twice"

[00:52] <lambd0x> timotimo: You gave me an idea. I'll work it out from here. Thanks :)

[00:52] <timotimo> YW

[00:52] <lambd0x> timotimo: nice this ^n operator...

[00:52] <timotimo> it's cool how the xx operator will execute something twice

[00:52] <timotimo> m: (say "hello") xx 4

[00:52] <camelia> rakudo-moar 328402: OUTPUT«hello␤hello␤hello␤hello␤»

[00:53] <timotimo> m: (say rand) xx 4

[00:53] <camelia> rakudo-moar 328402: OUTPUT«0.352484542036053␤0.867382257469645␤0.345555578673232␤0.721099736714825␤»

[00:53] <timotimo> and each time it's a fresh execution, too. so it's like a little loop

[00:53] <lambd0x> indeed

[00:55] *** Actualeyes joined
[01:04] <lambd0x> timotimo: ^$somevar-1 will execute ^$somevar first and then -1 over it or none at all? Had something similar here that didn't work. Changed to 0..$somevar-1

[01:05] <timotimo> yeah, the precedence of .. is very tight; you can - 1 a range and it'll be "shifted" one to the left

[01:05] <timotimo> m: say ^5 - 1

[01:05] <camelia> rakudo-moar 328402: OUTPUT«-1..^4␤»

[01:06] <timotimo> m: say ^(5 - 1)

[01:06] <camelia> rakudo-moar 328402: OUTPUT«^4␤»

[01:07] <timotimo> the precedence of ^ is very tight, i meant to say

[01:08] <lambd0x> timotimo: ah good to know :)

[01:08] <lambd0x> m: say ^5 + 1

[01:08] <camelia> rakudo-moar 328402: OUTPUT«1..^6␤»

[01:09] <lambd0x> that's nice :P

[01:09] <timotimo> yeah, that's how you get "from one" instead of "from zero" while still keeping the ^

[01:14] <AlexDaniel> m: say 1..^6   # if you want to keep ^, why not do it this way? ;)

[01:14] <camelia> rakudo-moar 328402: OUTPUT«1..^6␤»

[01:14] <timotimo> *shrug*

[01:15] <AlexDaniel> m: say 2..^10 / 2

[01:15] <camelia> rakudo-moar 328402: OUTPUT«2..^5.0␤»

[01:15] <timotimo> that's tighter than ..^ apparently

[01:16] <AlexDaniel> is it supposed to be this way?

[01:16] <timotimo> *shrug*, i usually go for parens with this sort of thing

[01:16] <AlexDaniel> it makes sense, I think. But it is somewhat inconsistent

[01:19] *** sena_kun left
[01:21] *** bob777 left
[01:22] <unmatched}> GIGO

[01:22] <unmatched}> wc

[01:25] *** bob777 joined
[01:35] *** bob777 left
[01:37] *** bob777 joined
[01:37] <unmatched}> I love these answers for person asking for source code of split :) https://www.reddit.com/r/perl/comments/4wwaix/source_code_of_split/

[01:38] <unmatched}> I think P6 being written in P6 is a very real strength, although I see the inevitableness of it being rewritten in NQP

[01:41] <timotimo> actually, larry is hoping we'll be rewriting it completely in perl6 at some point

[01:41] <timotimo> so .. the opposite of what you're fearing :)

[01:43] <unmatched}> As much as I believe in TimToady's power of though, I doubt we'll one day just go "you know what, let's make this method 30 times slower"

[01:44] <unmatched}> (that's based on my observation of lizmat++'s stellar work of rewriting stuff in nqp and the speed benefits reaped from such conversions)

[01:44] <gfldex> the idea is not to have to make it 30x slower

[01:44] <timotimo> right. the idea is that perl6 code at one point will optimize as well as nqp code does now

[01:45] <geekosaur> ^ optimization is very much a work in progress, brrt was charting out more optimization work earlier today even

[01:45] <unmatched}> "one point"? What's stopping us from doing it now?

[01:45] <geekosaur> people, available time?

[01:45] *** AlexDaniel left
[01:45] <timotimo> yeah, it's not trivial

[01:45] <timotimo> are you interested in maybe implementing escape analysis for moarvm?

[01:45] *** ilbot3 left
[01:46] <geekosaur> welp. that'd certainly be an intro to why optimization is hard :)

[01:46] *** lambd0x left
[01:46] <unmatched}> timotimo: sure

[01:46] <unmatched}> timotimo: if we start from the point that I don't know wtf "escape analysis" even is :)

[01:46] <timotimo> cool. but i'm afraid it might require a bit of design work, too

[01:47] <timotimo> well, there's wikipedia and lots of papers for that

[01:47] *** ilbot3 joined
[01:47] <timotimo> basically, analysis of "will this value stay alive past a certain point? perhaps it gets assigned to something, or somehow referenced or something"

[01:47] <timotimo> because once you know an object will definitely become unused at a certain point, you can either allocate it on the stack instead of on the gc-managed heap, or even leave out the allocation partially

[01:48] *** bob777 left
[01:48] <unmatched}> Are those papers free to read?

[01:48] <timotimo> i bet many are

[01:48] <timotimo> escape analysis was probably invented like 80 years ago

[01:48] <unmatched}> Cool. I'll look around then.

[01:48] <unmatched}> :o

[01:49] <timotimo> you'll be interested to know that moarvm's bytecode is in SSA form composed of "basic blocks" (only during spesh, but escape analysis is spesh-only)

[01:50] *** bob777 joined
[01:50] <unmatched}> Challenge accepted! :D

[01:50] <timotimo> wow

[01:51] <timotimo> there's a branch already that has a tiny bit of the escape analysis work

[01:51] <timotimo> you'll be wanting to read the header files inside src/spesh/, especially graph.h and facts.h

[02:01] *** holyghost left
[02:02] <timotimo> and src/core/oplist is also interesting

[02:02] *** holyghost joined
[02:02] *** bob777 left
[02:07] <unmatched}> Thanks. I'll start researching this once I'm done with the internals course (should be by end of week).

[02:07] <timotimo> neato

[02:16] *** bob777 joined
[02:24] *** noganex_ joined
[02:27] *** noganex left
[02:34] *** wamba joined
[02:37] *** BenGoldberg joined
[02:41] *** mcmillhj left
[02:44] *** ifim joined
[02:47] *** skids joined
[02:48] *** mcmillhj joined
[02:53] *** mcmillhj left
[03:05] *** mcmillhj joined
[03:10] *** mcmillhj left
[03:18] *** mcmillhj joined
[03:19] *** xinming left
[03:19] *** xinming joined
[03:23] *** mcmillhj left
[03:29] *** mcmillhj joined
[03:34] *** mcmillhj left
[03:42] <SmokeMachine____> m: use experimental :cached; method bla is cached {42}

[03:42] <camelia> rakudo-moar 328402: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤'is cached' on methods not yet implemented. Sorry. ␤at <tmp>:1␤»

[03:43] <SmokeMachine____> m: use experimental :cached; sub bla is cached {42}

[03:43] <camelia> rakudo-moar 328402: ( no output )

[03:43] <SmokeMachine____> why I can't use cached methods?

[03:43] *** mcmillhj joined
[03:43] <ugexe> because its not implemented?

[03:43] <SmokeMachine____> oh!!! the is cached isn't implemented!!!

[03:44] <SmokeMachine____> sorry! I thought that  my method wasn't implemented yet!!!

[03:44] <SmokeMachine____> thanks!

[03:45] *** wamba left
[03:45] <SmokeMachine____> I just needed to read the error message! I'm sorry!

[03:45] <geekosaur> cached is marked experimental for a reason, it's rather broken and not a high priority to fix iirc

[03:48] *** mcmillhj left
[03:48] *** skids left
[03:48] <SmokeMachine____> Thanks

[03:50] *** harovali joined
[03:51] * TimToady thinks experimental should be renamed to MONKEY-AROUND or some such

[03:57] *** ifim left
[03:59] <TimToady> or at least be aliased, like "use nqp"

[03:59] *** mcmillhj joined
[04:00] <ugexe> just like real animal testing you never know if your work will die horribly for unknown reasons

[04:03] *** harovali left
[04:03] *** harovali joined
[04:04] *** mcmillhj left
[04:06] *** cpage_ left
[04:09] *** mcmillhj joined
[04:11] <TEttinger> monkey all the things

[04:11] <TEttinger> then when perl 6 gets bought by microsoft it suddenly changes to MONEY_AROUND and MONEY_SEE_NO_EVAL

[04:13] *** mcmillhj left
[04:14] <TimToady> embrace and MONKEY_BUSINESS

[04:20] <TimToady> I suppose it's more like a monkey trap

[04:20] *** mcmillhj joined
[04:21] *** tardisx joined
[04:25] *** mcmillhj left
[04:26] *** Actualeyes left
[04:29] *** Actualeyes joined
[04:29] *** Cabanossi left
[04:31] *** Cabanossi joined
[04:33] *** mcmillhj joined
[04:38] *** mcmillhj left
[04:45] *** broquain1 is now known as broquaint

[04:47] <Xliff> TimToady, would that be MONKEY_EMBRACE_AND_EXTEND

[04:48] <Xliff> Next thing you know MONKEY_ASTROTURF will show up, and then it's game over.

[04:52] *** mcmillhj joined
[04:52] <TimToady> Look!  That cloud over there is a MONKEY-CLOUD!

[04:56] *** khw left
[04:57] *** mcmillhj left
[04:59] *** tardisx left
[05:01] *** tardisx joined
[05:05] *** mcmillhj joined
[05:10] *** mcmillhj left
[05:31] *** AlexDaniel joined
[05:32] *** harovali left
[05:40] <Xliff> TimToady: Wait is that the mythical primate thing that will eventually generate a Shakespearean work every ~1.5 eons or so?

[05:41] * Xliff can already smell the marketing.

[05:51] *** mcmillhj joined
[05:52] *** bjz_ left
[05:56] *** mcmillhj left
[05:58] <AlexDaniel> m:my ($x) = (42, 69); say $x

[05:58] <AlexDaniel> m: my ($x) = (42, 69); say $x

[05:58] <camelia> rakudo-moar 328402: OUTPUT«42␤»

[05:59] <AlexDaniel> m: my $x; ($x) = (42, 69); say $x

[05:59] <camelia> rakudo-moar 328402: OUTPUT«(42 69)␤»

[05:59] <AlexDaniel> bisect: my $x; ($x) = (42, 69); say $x

[05:59] <bisectable> AlexDaniel: On both starting points (good=2015.12 bad=3284025) the exit code is 0 and the output is identical as well

[05:59] <bisectable> AlexDaniel: Output on both points: (42 69)

[05:59] <AlexDaniel> is it supposed to be this way?

[06:00] *** bjz joined
[06:00] <gfldex> m: my $x; ($x,) = (42, 69); say $x

[06:00] <camelia> rakudo-moar 328402: OUTPUT«42␤»

[06:00] <gfldex> it is supposed to be that way

[06:01] <AlexDaniel> gfldex: you mean that rakudo is right here and I must use a comma? If so, OK then, but we should probably document it as p5→p6 pitfall

[06:02] <Xliff> Ah. Yeah.

[06:02] <Xliff> I've run into that.

[06:02] <Xliff> Good to know about the comma trick. I thought I was going mad.

[06:02] <gfldex> AlexDaniel: we should document it in general (looking at it right now)

[06:02] <AlexDaniel> gfldex: want me to create an issue on github?

[06:02] <gfldex> it does exactly what you ask it to do

[06:03] <gfldex> no, better doc it in p5->p6 right away

[06:03] <gfldex> we may have doced destructureing somewhere already

[06:04] <Xliff> m: my $x; ($x) = (42, 69).list; say $x

[06:04] <camelia> rakudo-moar 328402: OUTPUT«(42 69)␤»

[06:04] <Xliff> m: my $x; ($x) = (42, 69).flat; say $x

[06:04] <camelia> rakudo-moar 328402: OUTPUT«(42 69)␤»

[06:05] <Xliff> m: my $x; ($x) = |(42, 69); say $x

[06:05] <camelia> rakudo-moar 328402: OUTPUT«(42 69)␤»

[06:05] <Xliff> m: my ($x) = (42, 69).list; say $x

[06:05] <camelia> rakudo-moar 328402: OUTPUT«42␤»

[06:06] <Xliff> Aha!

[06:06] <Xliff> AlexDaniel, ^^ that should probably also be documented.

[06:06] <AlexDaniel> /o\

[06:07] <AlexDaniel> ah no, it's right \o/

[06:09] <AlexDaniel> I still don't get it. Why can you ommit the comma in ｢my ($x,)｣ case but without “my” you must use it?

[06:12] *** BenGoldberg left
[06:12] *** brrt joined
[06:14] <brrt> hey #perl6. seeing as we can capture the signature of a routine, and that types are objects, i think we should be able to write something like Buf.unkpac(int $x, num $y) and have it automatically do the right thing

[06:14] <brrt> not as flexible as string-unpack, though

[06:15] <brrt> also, i just realised that the whole 'serveless architecture' thing is basically re-warmed CGI

[06:17] <Xliff> LOL

[06:17] <Xliff> brrt, can I steal that?

[06:18] <brrt> ideas? no

[06:18] <brrt> you can copy them though

[06:18] <Xliff> Then I shall do so mercilessly...... with your permission, of course.

[06:18] <Xliff> But then that's not "mercilessly" innit? Hrm.

[06:18] <brrt> hmmm

[06:18] <brrt> no

[06:18] <Xliff> Damn. Sounded good, though.

[06:19] <brrt> well, have hun with it :-P

[06:19] <Xliff> hun?

[06:19] <Xliff> I want to copy that tidbit... not hug it!

[06:19] <Xliff> =)

[06:21] <Xliff> AlexDaniel: I'm thinking assignment via "my" is different than assignment without it. At least that's how I'm rationalizing it.

[06:23] *** CIAvash joined
[06:23] <AlexDaniel> Xliff: my rationalization stopped somewhere after “t” in WTF. Like… I do understand that maybe we can't have it to dwim without ｢my｣, but then why the trailing comma is not required if you use ｢my｣?

[06:24] *** labster left
[06:24] <AlexDaniel> anyway, I'm submitting an RFC rakudo ticket. Feel free to throw your tomatoes at me there

[06:27] <Xliff> AlexDaniel, if I throw anything, it will be lots in with you. 

[06:27] <Xliff> You have no idea how many hours I wasted on that but on my first P6 project.

[06:28] <Xliff> s/but/(alleged) bug/

[06:28] <Xliff> s/(alleged) bug/"intentional feature"/  

[06:28] * Xliff whistles innocently.

[06:28] *** firstdayonthejob joined
[06:30] <Xliff> m: (42, 69).WHAT

[06:30] <camelia> rakudo-moar 328402: ( no output )

[06:30] <Xliff> m: (42, 69).WHAT.say

[06:30] <camelia> rakudo-moar 328402: OUTPUT«(List)␤»

[06:31] <Xliff> m: my $x, $y; ($x, $y).WHAT.say

[06:31] <camelia> rakudo-moar 328402: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$y' is not declared␤at <tmp>:1␤------> 3my $x, 7⏏5$y; ($x, $y).WHAT.say␤»

[06:31] <Xliff> m: my ($x, $y); ($x, $y).WHAT.say

[06:31] <camelia> rakudo-moar 328402: OUTPUT«(List)␤»

[06:31] *** pierre_ joined
[06:35] *** bjz left
[06:41] *** mcmillhj joined
[06:42] *** firstdayonthejob left
[06:42] <AlexDaniel> #128883

[06:42] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128883

[06:42] <dalek> doc: f5b1826 | (Wenzel P. P. Peppmeyer)++ | doc/Language/functions.pod6:

[06:42] <dalek> doc: remove comment (done in /type/Signature)

[06:42] <dalek> doc: review: https://github.com/perl6/doc/commit/f5b1826a0f

[06:42] <dalek> doc: 601fb8e | (Wenzel P. P. Peppmeyer)++ | doc/Language/functions.pod6:

[06:42] <dalek> doc: doc return values

[06:42] <dalek> doc: review: https://github.com/perl6/doc/commit/601fb8ee2d

[06:42] <dalek> doc: 105cb0c | (Wenzel P. P. Peppmeyer)++ | doc/Language/variables.pod6:

[06:42] <dalek> doc: doc declaration of multiple variables and destructuring

[06:42] <dalek> doc: review: https://github.com/perl6/doc/commit/105cb0c753

[06:45] *** tardisx left
[06:45] *** mcmillhj left
[06:46] <dalek> doc: 426d402 | (Wenzel P. P. Peppmeyer)++ | doc/Language/variables.pod6:

[06:46] <dalek> doc: correct single element list destructuring lie

[06:46] <dalek> doc: review: https://github.com/perl6/doc/commit/426d40268a

[06:48] *** bjz joined
[06:50] *** tardisx joined
[06:53] *** sno left
[06:55] *** labster joined
[06:56] *** CIAvash left
[06:58] <gfldex> AlexDaniel: declarators are syntaxy things. There is a clear difference between `my` and `my ()` because it's not a Routine. The comma in list deconstruction is a required change from Perl 5 because lists don't flatten by default. And there is no explicit reference syntax, what makes the creation of a real list necessary.

[07:00] *** bjz left
[07:00] <dalek> doc: 848b78a | (Wenzel P. P. Peppmeyer)++ | doc/Language/variables.pod6:

[07:00] <dalek> doc: fix typo

[07:00] <dalek> doc: review: https://github.com/perl6/doc/commit/848b78a360

[07:05] *** CIAvash joined
[07:06] <dalek> doc: 6998309 | (Wenzel P. P. Peppmeyer)++ | doc/Language/functions.pod6:

[07:06] <dalek> doc: remove trailing WS

[07:06] <dalek> doc: review: https://github.com/perl6/doc/commit/69983092e5

[07:10] <dalek> doc: 2229557 | (Wenzel P. P. Peppmeyer)++ | doc/Language/variables.pod6:

[07:10] <dalek> doc: fix link

[07:10] <dalek> doc: review: https://github.com/perl6/doc/commit/2229557f56

[07:14] <AlexDaniel> gfldex: well, my point is that ｢my ($x)｣ should not be allowed because it is a footgun. If you don't agree, feel free to leave a comment on that ticket :)

[07:16] <gfldex> m: my (,$a) = 1,2; dd $a;

[07:16] <camelia> rakudo-moar 328402: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed my␤at <tmp>:1␤------> 3my (7⏏5,$a) = 1,2; dd $a;␤»

[07:16] <gfldex> m: my (,$a) = <a b>; dd $a;

[07:16] <camelia> rakudo-moar 328402: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed my␤at <tmp>:1␤------> 3my (7⏏5,$a) = <a b>; dd $a;␤»

[07:16] <gfldex> m: my ($,$a) = <a b>; dd $a;

[07:16] <camelia> rakudo-moar 328402: OUTPUT«Str $a = "b"␤»

[07:17] <gfldex> better doc this

[07:18] *** rindolf joined
[07:19] <gfldex> m: my ($,$a,@,%h) = ('a', 'b', [1,2,3], { :1th, :2nd }); dd $a, %h;

[07:19] <camelia> rakudo-moar 328402: OUTPUT«Str $a = "b"␤Hash %h = {}␤»

[07:20] <gfldex> m: my ($,$a,@,%h) = ('a', 'b', [1,2,3], { a => 1 }); dd $a, %h;

[07:20] <camelia> rakudo-moar 328402: OUTPUT«Str $a = "b"␤Hash %h = {}␤»

[07:20] <TEttinger> AlexDaniel, please, has a gun concealed in your foot ever failed to be an effective weapon? or a cyborg gunfoot footgun?

[07:21] <TEttinger> * terms and conditions apply

[07:22] <gfldex> m: my ($,$a,$,%h) = ('a', 'b', [1,2,3], {:1th}); dd $a, %h;

[07:22] <camelia> rakudo-moar 328402: OUTPUT«Str $a = "b"␤Hash %h = {:th(1)}␤»

[07:22] <gfldex> m: my ($,$a,@,%h) = ('a', 'b', [1,2,3], {:1th}); dd $a, %h;

[07:22] <camelia> rakudo-moar 328402: OUTPUT«Str $a = "b"␤Hash %h = {}␤»

[07:23] <gfldex> the anonymous @ seams to be slurpy. I wonder if it should.

[07:25] <dalek> doc: cbc422e | (Wenzel P. P. Peppmeyer)++ | doc/Language/variables.pod6:

[07:25] <dalek> doc: doc skipping in destructuring

[07:25] <dalek> doc: review: https://github.com/perl6/doc/commit/cbc422ee4a

[07:26] <CIAvash> m: my ($,$a,@,%h) := ('a', 'b', [1,2,3], {:1th}); dd $a, %h;

[07:26] <camelia> rakudo-moar 328402: OUTPUT«"b"␤Hash % = {:th(1)}␤»

[07:27] <gfldex> AlexDaniel: one could argue that `my ($a,@) = <a b c>` should be required to avoid typos altogether.

[07:30] <movl> hey

[07:30] <movl> question : given lines like this : my $chars = [∪] @chars».=&filter;

[07:30] *** BenGoldberg joined
[07:30] <movl> where is the » character(s) on a US keyboard?

[07:30] <movl> :|

[07:31] *** pdcawley joined
[07:32] <CIAvash> movl: https://docs.perl6.org/language/unicode_entry

[07:32] <gfldex> on my german keyboard it's c-k > >

[07:32] *** jonas2 joined
[07:32] *** darutoko joined
[07:33] <gfldex> but then i'm cheating with https://github.com/jshholland/irssi-scripts/blob/master/digraphs.pl

[07:33] <AlexDaniel> movl: you can use >> if you want

[07:33] <AlexDaniel> movl: https://docs.perl6.org/language/unicode_texas

[07:34] *** Ben_Goldberg joined
[07:35] *** BenGoldberg left
[07:37] *** zakharyas joined
[07:38] <movl> thanks :)

[07:43] *** tardisx left
[07:49] *** heatsink joined
[07:55] *** sno joined
[08:00] *** brrt left
[08:00] *** brrt joined
[08:00] *** brrt left
[08:01] *** akiym joined
[08:02] *** aries_liuxueyang left
[08:03] *** pierre_ left
[08:03] *** aries_liuxueyang joined
[08:06] *** dakkar joined
[08:09] *** gnull` joined
[08:09] *** bob777 left
[08:10] <heatsink> so was the name Camelia chosen as a play on words, as the first 5 letters are Camel, the mascot of perl5 

[08:10] <heatsink> :)

[08:11] *** gnull left
[08:12] <AlexDaniel> heatsink: coincidence

[08:14] <TimToady> no, we never make puns around here

[08:15] *** TEttinger left
[08:17] *** bob777 joined
[08:18] *** TEttinger joined
[08:22] <moritz> there's no punishment for puns here :-)

[08:22] <AlexDaniel> we should rename it to get rid of this confusion. What about Onionella?

[08:23] <moritz> raptornella!

[08:23] *** araujo_ joined
[08:25] *** RabidGravy joined
[08:25] *** araujo_ left
[08:27] *** araujo_ joined
[08:27] *** araujo left
[08:28] *** bjz joined
[08:28] *** bpmedley left
[08:28] *** araujo_ left
[08:29] *** araujo_ joined
[08:32] *** bpmedley joined
[08:33] *** TEttinger left
[08:34] *** TEttinger joined
[08:35] <heatsink> only those pure of heart may journey to temple of the nyan cat, where the fountain of names resides

[08:36] <stmuk> bikeshedella

[08:38] <heatsink> steampunkadella

[08:40] <heatsink> what about 'fidelio' a german act of two parts, i.e. part 1 perl 5, part 2 perl 6 :)

[08:41] <gfldex> Heraclina (for cutting the Hydras heads of)

[08:41] *** pmurias joined
[08:41] <pmurias> hi

[08:46] <heatsink> ah, fidelio is an opera of two acts, just intwerwebbed the name. 

[08:46] <heatsink> pmurias: hi, name seems familiar, were you on #gentoo at some point?

[08:47] <dalek> whateverable: 1bf72b5 | (Aleks-Daniel Jakimenko-Aleksejev)++ | Whateverable.pm6:

[08:47] <dalek> whateverable: Add a TODO note about kill signals

[08:47] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/1bf72b5e60

[08:47] <dalek> whateverable: a22c268 | (Aleks-Daniel Jakimenko-Aleksejev)++ | / (4 files):

[08:47] <dalek> whateverable: Add ｢.selfrun｣ method

[08:47] <dalek> whateverable: 

[08:47] <dalek> whateverable: It was annoying to have copy-pasted IRC::Client initialization, so now

[08:47] <dalek> whateverable: there is a ｢.selfrun｣ method that does that for you.

[08:47] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/a22c26812f

[08:47] <dalek> whateverable: 5296253 | (Aleks-Daniel Jakimenko-Aleksejev)++ | / (4 files):

[08:47] <dalek> whateverable: ｢LEAVE chdir …｣ everywhere

[08:47] <dalek> whateverable: 

[08:47] <dalek> whateverable: Maybe it is more readable this way. Maybe not, but at least one bug is fixed.

[08:47] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/529625330b

[08:47] <dalek> whateverable: d76d342 | (Aleks-Daniel Jakimenko-Aleksejev)++ | Whateverable.pm6:

[08:47] <dalek> whateverable: Do not push to array asynchronously

[08:47] <dalek> whateverable: 

[08:47] <dalek> whateverable: It was clear right from the start that doing so is stupid, but turns out it

[08:47] <dalek> whateverable: causes actual segfaults (RT #128870).

[08:47] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128870

[08:47] <dalek> whateverable: 

[08:47] <dalek> whateverable: There is a chance that this was the reason behind some of the segfaults

[08:47] <dalek> whateverable: observed during the testing of Perl 6 bots. We will see.

[08:47] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/d76d3421ea

[08:55] <dalek> whateverable: 484ade2 | (Aleks-Daniel Jakimenko-Aleksejev)++ | Whateverable.pm6:

[08:55] <dalek> whateverable: Join #whateverable channel as well

[08:55] <dalek> whateverable: 

[08:55] <dalek> whateverable: Given that we now reside there for development purposes, there is no reason not

[08:55] <dalek> whateverable: to keep the bots there as well.

[08:55] <dalek> whateverable: 

[08:55] <dalek> whateverable: Given that currently the bots are ignoring private messages, feel free to join

[08:55] <dalek> whateverable: this channel!

[08:55] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/484ade2645

[08:55] <dalek> whateverable: 1310bf5 | (Aleks-Daniel Jakimenko-Aleksejev)++ | Whateverable.pm6:

[08:55] <dalek> whateverable: Add ‘test’ suffix to the nick when in debug mode

[08:55] <dalek> whateverable: 

[08:55] <dalek> whateverable: Gets rid of nick clashes and makes it easier to get rid of gists uploaded

[08:55] <dalek> whateverable: during development.

[08:55] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/1310bf5173

[08:55] *** bjz left
[09:00] *** bisectable6 joined
[09:01] *** araujo__ joined
[09:04] *** gnull` left
[09:05] *** araujo_ left
[09:05] <dalek> whateverable: 6f1335e | (Aleks-Daniel Jakimenko-Aleksejev)++ | Committable.p6:

[09:05] <dalek> whateverable: Oops (fix after LEAVE chdir changes)

[09:05] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/6f1335e12e

[09:05] *** committable6 joined
[09:06] <AlexDaniel> committable6: HEAD say ‘Hello to all Perl 6 bots!’

[09:06] <committable6> AlexDaniel, ¦«HEAD»: Cannot find this revision

[09:06] <AlexDaniel> dammit…

[09:08] *** committable6 left
[09:10] *** tardisx joined
[09:11] *** committable6 joined
[09:12] *** tardisx left
[09:13] <dalek> whateverable: b36f4c3 | (Aleks-Daniel Jakimenko-Aleksejev)++ | Committable.p6:

[09:13] <dalek> whateverable: Argh. Looks like another issue with RT #128872

[09:13] <dalek> whateverable: 

[09:13] <dalek> whateverable: Perhaps there are way more bugs due to this problem. I am not really interested

[09:13] <dalek> whateverable: in fixing them though, because I hope that it will be fixed in rakudo soon.

[09:13] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128872

[09:13] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/b36f4c3754

[09:13] <AlexDaniel> committable6: HEAD say ‘Hello to all Perl 6 bots!’

[09:13] <committable6> AlexDaniel, ¦«HEAD»: Cannot find this revision

[09:14] <moritz> committable6: 2016.06 say ‘Hello to all Perl 6 bots!’

[09:14] <committable6> moritz, ¦«2016.06»: Cannot find this revision

[09:15] <moritz> committable6: you're not good at finding revisions, are you? :-)

[09:15] <committable6> moritz, ¦«you're»: Cannot find this revision

[09:15] <moritz> there's a certain stoicism involved here :-)

[09:15] *** committable6 left
[09:15] *** bisectable6 left
[09:18] *** pierre_ joined
[09:23] *** bisectable6 joined
[09:23] *** committable6 joined
[09:23] <AlexDaniel> committable6: HEAD say ‘Hello to all Perl 6 bots!’

[09:23] <committable6> AlexDaniel, ¦«HEAD»: Hello to all Perl 6 bots!

[09:23] <AlexDaniel> alright ;)

[09:24] <AlexDaniel> if anybody is wondering, there is currently no difference between p5 and p6 *ables

[09:25] <AlexDaniel> except that bisectable is slightly more async

[09:26] *** trnh joined
[09:26] <AlexDaniel> bisectable6 I mean

[09:48] *** kurahaupo joined
[09:53] *** pierre_ left
[09:54] *** bjz joined
[09:55] *** AlexDaniel left
[09:55] *** AlexDaniel joined
[09:58] <pmurias> heatsink: maybe asked a question or two many years ago

[10:03] *** TEttinger left
[10:03] <heatsink> pmurias: oh right, your name must just be similar to something else that I saw, as I've only recently started hanging out on #gentoo

[10:05] *** matt_ joined
[10:13] *** AlexDaniel left
[10:13] *** darutoko- joined
[10:16] *** darutoko left
[10:16] *** mavorg joined
[10:24] *** labster left
[10:28] <pmurias> heatsink: I stay away from gentoo nowdays ;)

[10:33] <heatsink> pmurias: out of curiosity, what distro have you use?, or do you still use gentoo and not the irc channel

[10:33] <heatsink> s/have/do

[10:36] <pmurias> heatsink: debian, I don't have a strong conviction in terms of distro choice (as opposed to say the editor I'm using)

[10:45] *** harovali joined
[10:53] <lucs> pmurias: And that editor is...?

[10:53] <heatsink> I'm guessing it's vi

[10:53] <pmurias> heatsink: good guess :)

[10:54] *** hathersage joined
[10:54] <pmurias> it's vim actually

[10:54] <lucs> Aha. I was about to ask if you were, like mst, as vi purist so to speak (like vim in compatibility mode I believe).

[10:55] <lucs> s/as /a /

[10:55] <lucs> vim++

[10:56] <huf> meh. vim is like democracy

[10:56] *** jcallen_ joined
[10:56] *** jcallen left
[10:58] <lucs> purl, are you here?

[10:58] <heatsink> perl is, not sure about purl

[10:58] <DrForr> Afraid not. Also, hi :)

[10:58] *** pierre_ joined
[10:58] <lucs> Hiya.

[10:59] <lucs> Oh, right, this is freenode.

[11:00] <DrForr> Yep, this isn't your father's MAGnet :)

[11:00] <lucs> :)

[11:02] <DrForr> Incidentally I'm over my attendance goal for the YAPC course.

[11:02] <lucs> Oh, nice. What's the course by the way?

[11:03] <lucs> (YAPC:EU I guess?)

[11:03] <DrForr> http://act.yapc.eu/ye2016/training-jeff.html

[11:03] <lucs> Aha

[11:04] *** dalek left
[11:05] <lucs> Wow, great. Perl 6 appears to be gaining traction.

[11:05] *** dalek joined
[11:05] *** ChanServ sets mode: +v dalek

[11:05] <movl> can't wait for YAPC

[11:06] <DrForr> Well, there's also a talk coming up at OSCON in London, we had a talk and training at OSCON Austin, and there's ... something I can't talk about yet coming up in October.

[11:06] *** movl left
[11:06] *** movl joined
[11:08] *** pierre_ left
[11:16] *** trnh left
[11:18] *** hathersage left
[11:21] *** canopus left
[11:27] *** canopus joined
[11:28] *** JimmyZ joined
[11:31] *** bjz left
[11:32] *** bjz joined
[11:37] *** araujo__ left
[11:37] *** araujo joined
[11:43] *** harovali left
[11:50] *** bjz left
[11:51] *** bjz joined
[11:53] *** tbrowder left
[11:56] *** kaare_ left
[12:07] *** bjz left
[12:22] *** sena_kun joined
[12:24] *** buggable left
[12:26] *** sammers joined
[12:30] *** perlpilot joined
[12:35] *** heatsink left
[12:36] *** wamba joined
[12:37] *** buggable joined
[12:37] *** trnh joined
[12:38] *** Matthew[m] left
[12:38] *** tadzik left
[12:38] *** M-Illandan left
[12:41] *** edwinsage joined
[12:42] *** Sgeo_ left
[12:43] *** kid51 joined
[12:50] *** mcmillhj joined
[12:52] *** tadzik joined
[13:05] *** grondilu joined
[13:05] *** unmatched} left
[13:09] *** pierre_ joined
[13:09] *** skids joined
[13:11] *** kaare_ joined
[13:11] *** kaare_ left
[13:12] *** kaare_ joined
[13:12] *** mcmillhj left
[13:14] *** mcmillhj joined
[13:21] *** cdg joined
[13:21] *** cdg left
[13:22] *** heatsink joined
[13:22] *** cdg joined
[13:24] *** kaare_ left
[13:25] *** bjz joined
[13:28] <awwaiid> tadzik: I'm psyched about the PR I just put in for panda, https://github.com/tadzik/panda/pull/321

[13:29] *** bob777 left
[13:31] *** sammers left
[13:32] *** kaare_ joined
[13:32] <awwaiid> also, I hope that $*MAIN-ALLOW-NAMED-ANYWHERE = True becomes the default :)

[13:32] <awwaiid> (I ran into this completely by accident when learning about $*MAIN inside of Rakudo)

[13:32] *** dj_goku left
[13:35] *** mcmillhj left
[13:37] <mst> awwaiid: the problem with that is that it's saying up front "I never want to handle subcommands"

[13:37] <mst> I dunno

[13:38] <mst> I'm inordinately fond of things with chainable subcommands and plugins

[13:38] *** sufrostico joined
[13:39] *** unmatched} joined
[13:41] *** bob777 joined
[13:44] *** sammers joined
[13:44] *** jkramer joined
[13:44] <jkramer> Ahoy!

[13:44] <unmatched}> \o

[13:45] <jkramer> m: (^6 - 1).perl

[13:45] <camelia> rakudo-moar e829a9: ( no output )

[13:45] <jkramer> m: (^6 - 1).perl.say

[13:45] <camelia> rakudo-moar e829a9: OUTPUT«-1..^5␤»

[13:45] <jkramer> Is this correct? I would've expected 0..5

[13:45] <jkramer> Seems weird

[13:45] <unmatched}> jkramer: you're subtracting from a range, not from 6

[13:45] <unmatched}> m: (^(6 - 1)).perl.say

[13:45] <camelia> rakudo-moar e829a9: OUTPUT«^5␤»

[13:46] <jkramer> Ah, so the range -1 is every element -1?

[13:46] <unmatched}> m: (eager ^(6 - 1)).perl.say

[13:46] <camelia> rakudo-moar e829a9: OUTPUT«(0, 1, 2, 3, 4)␤»

[13:46] <mspo> what does the ^ do there?

[13:46] <unmatched}> mspo: it's a range operator

[13:46] <unmatched}> jkramer: it subtracts from both endpoints. The same applies with +

[13:47] <unmatched}> m: say (^10+5)/2

[13:47] <camelia> rakudo-moar e829a9: OUTPUT«2.5..^7.5␤»

[13:47] <unmatched}> And / and * I guess

[13:47] <unmatched}> m: say eager (^10+5)/2

[13:47] <camelia> rakudo-moar e829a9: OUTPUT«P6opaque: get_boxed_ref could not unbox for the representation '20' of type Rat␤  in block <unit> at <tmp> line 1␤␤»

[13:47] <unmatched}> 0.o

[13:48] <jkramer> unmatched}: Got it, thanks :)

[13:50] *** mcmillhj joined
[13:51] <RabidGravy> boom!

[13:52] *** Actualeyes left
[13:54] <unmatched}> Rakudobugged: https://rt.perl.org/Ticket/Display.html?id=128887

[13:57] *** bob777 left
[13:59] <unmatched}> jkramer: worth nothing that above by "range" I meant the Range object. Unlike Perl 5 you don't get a bunch of values but the object that knows of the endpoints you want. Lets us do crazy stuff like this:

[14:00] <unmatched}> m: ^2_000_000_000_000_000_000_000_000_000 .sum.say

[14:00] <camelia> rakudo-moar e829a9: OUTPUT«1999999999999999999999999999000000000000000000000000000␤»

[14:00] <unmatched}> m: (0..2_000_000_000_000_000_000_000_000_000).sum.say

[14:00] <camelia> rakudo-moar e829a9: OUTPUT«2000000000000000000000000001000000000000000000000000000␤»

[14:00] <unmatched}> Try that in Perl 5 :}

[14:03] *** pierre_ left
[14:05] *** M-Illandan joined
[14:05] *** Matthew[m] joined
[14:08] <jkramer> unmatched}: Neat :)

[14:10] <jkramer> One more question: I have a list of words and want to match any of them in a regex, is there a way to do that? I mean instead of: /foo ( a | b | c) bar/ I'd like to do: my @x = <a b c>; /foo ( one-of @x ) bar/

[14:11] <unmatched}> /foo @x bar/

[14:11] *** bob777 joined
[14:11] <jkramer> Ha, beautiful :D

[14:12] <grondilu> <@your-list> should work

[14:12] <grondilu> oh it was answered already.  my bad.

[14:13] <unmatched}> Yeah, though in that form it'll interpret the items as regexes and not plain strings

[14:13] *** Actualeyes joined
[14:13] <grondilu> m: my @abc = <a b c>; say "fooabar" ~~ /foo <@abc> bar/

[14:13] <camelia> rakudo-moar e829a9: OUTPUT«｢fooabar｣␤»

[14:13] <unmatched}> And you can stuff @x with a mix of Regex and Str objects if you want only some of them to be regexes

[14:13] <grondilu> m: my @abc = <a b c>; say "fooabar" ~~ /foo @abc bar/

[14:13] <camelia> rakudo-moar e829a9: OUTPUT«｢fooabar｣␤»

[14:14] <jkramer> And finally, when I have 'enum Blah <Foo Bar Baz>', can I get list with the strings <Foo Bar Baz> back from the enum Blah?

[14:14] *** wamba left
[14:14] <unmatched}> m: my @abc = <a a.+ b c>; say "fooabrabar" ~~ /foo @abc bar/

[14:14] <camelia> rakudo-moar e829a9: OUTPUT«Nil␤»

[14:14] *** dj_goku joined
[14:14] <unmatched}> m: my @abc = <a a.+ b c>; say "fooabrabar" ~~ /foo <@abc> bar/

[14:14] <camelia> rakudo-moar e829a9: OUTPUT«｢fooabrabar｣␤»

[14:15] <grondilu> m: enum Blah <Foo Bar Baz>; say Blah.List

[14:15] <camelia> rakudo-moar e829a9: OUTPUT«((Blah))␤»

[14:15] <grondilu> m: enum Blah <Foo Bar Baz>; say Blah.kv

[14:15] <camelia> rakudo-moar e829a9: OUTPUT«()␤»

[14:15] <jkramer> Ah, .enums works too

[14:15] <jkramer> Thanks!

[14:15] <grondilu> meh, I always fail to remember how enums work

[14:15] *** trnh left
[14:15] <grondilu> m: enum Blah <Foo Bar Baz>; say Blah.^methods

[14:15] <camelia> rakudo-moar e829a9: OUTPUT«(pair enums CALL-ME Method+{<anon|74029600>}.new perl gist Int Numeric Str Method+{<anon|74029600>}.new Method+{<anon|74029600>}.new key value perl Bridge sqrt sign ACCEPTS sin tan cotan acosech Numeric Str abs base narrow conj atan2 cosec new is-prime pre…»

[14:16] <unmatched}> m: enum Blah <Foo Bar Baz>; say Blah.enums

[14:16] <camelia> rakudo-moar e829a9: OUTPUT«Map.new((:Bar(1),:Baz(2),:Foo(0)))␤»

[14:16] *** bob777 left
[14:16] <grondilu> m: enum Blah <Foo Bar Baz>; say Blah.pairs.valus

[14:16] <camelia> rakudo-moar e829a9: OUTPUT«Method 'valus' not found for invocant of class 'List'␤  in block <unit> at <tmp> line 1␤␤»

[14:16] <grondilu> m: enum Blah <Foo Bar Baz>; say Blah.pairs.values

[14:16] <camelia> rakudo-moar e829a9: OUTPUT«()␤»

[14:16] <grondilu> m: enum Blah <Foo Bar Baz>; say Blah.pairs

[14:16] <camelia> rakudo-moar e829a9: OUTPUT«()␤»

[14:16] <grondilu> *

[14:18] *** bob777 joined
[14:18] <unmatched}> m: enum Blah <Foo Bar Baz>; say Blah.^methods: :local

[14:18] <camelia> rakudo-moar e829a9: OUTPUT«(pair enums CALL-ME Method+{<anon|74029600>}.new perl gist Int Numeric Str Method+{<anon|74029600>}.new Method+{<anon|74029600>}.new key value)␤»

[14:19] <unmatched}> m: enum Blah <Foo Bar Baz>; say Blah.pair

[14:19] <camelia> rakudo-moar e829a9: OUTPUT«Invocant requires an instance of type Blah, but a type object was passed.  Did you forget a .new?␤  in block <unit> at <tmp> line 1␤␤»

[14:19] <unmatched}> :S

[14:19] <unmatched}> m: enum Blah <Foo Bar Baz>; say Foo.pair

[14:19] <camelia> rakudo-moar e829a9: OUTPUT«Foo => 0␤»

[14:21] <dalek> doc: 42084c3 | coke++ | / (5 files):

[14:21] <dalek> doc: Move all extended tests to xt/,

[14:21] <dalek> doc: leave "standard" tests in t/

[14:21] <dalek> doc: 

[14:21] <dalek> doc: Track with Makefile changes.

[14:21] <dalek> doc: 

[14:21] <dalek> doc: Allows tools to run everything in t/ without worrying which are standard

[14:21] <dalek> doc: and which are extra.

[14:21] <dalek> doc: 

[14:21] <dalek> doc: Closes #831

[14:21] <dalek> doc: review: https://github.com/perl6/doc/commit/42084c3eaf

[14:21] *** cog_ left
[14:24] *** kid51 left
[14:25] *** itaipu joined
[14:28] *** kid51 joined
[14:33] *** mavorg is now known as mvorg

[14:35] <unmatched}> It's really annoying to type '($/)' on actions all the time... You think it's possible to do a trait on the class or something like that that would make the signature ($/) by default/

[14:44] <unmatched}> *crickets* :)

[14:45] <mst> I'm sure it's possible

[14:45] <mst> how many things you'd have to patch in the process is a different question :D

[14:45] *** AlexDaniel joined
[14:45] <unmatched}> :)

[14:46] * unmatched} marks it as a weekend project

[14:51] <jnthn> 1) Implement a trait that mixes some role into the meta-object of the class to mark it. 2) In IMPORT, mix into $*W to override attach_signature (be sure to callsame up to the original). 3) Check the first arg is a Method object. From the signature, grab the nominal type and see if it's a class marked with the trait. If so, meddle with the Signature to include a $/ Parameter object

[14:51] <jnthn> Or something along those lines. There's probably something I didn't think of :)

[14:52] <unmatched}> jnthn++ thanks

[14:52] <jnthn> The really important thing is timing

[14:52] <moritz> .oO( how to patch Rakudo in three hard steps )

[14:52] <jnthn> You gotta modify the signature *before* we compile it.

[14:52] <moritz> monkey-patch, really

[14:57] *** cdg_ joined
[15:01] *** cdg left
[15:01] <sena_kun> m: my $bt = Backtrace.new; say $bt[0].is-routine.WHAT;

[15:01] <camelia> rakudo-moar 7501ee: OUTPUT«(Int)␤»

[15:01] <sena_kun> Isn't it should be Bool here?

[15:02] *** cdg_ left
[15:02] <AlexDaniel> .oO( is-routine? 42. )

[15:03] <sena_kun> m: my $bt = Backtrace.new; say $bt[0].is-hidden.WHAT;

[15:03] <camelia> rakudo-moar 7501ee: OUTPUT«Nil␤»

[15:03] <sena_kun> Nil?

[15:03] <jkramer> For some reason when something goes wrong somewhere in a react block or any code somewhere else called from there, the die stacktrace only shows me the beginning of the react block :(

[15:03] <jkramer> Is there a general problem or am I doing something wrong?

[15:04] <unmatched}> jkramer: right, 'cause it's basically in another thread. Pop this somewhere inside the react (same with start{} blocks, etc):     CATCH { default { warn $_; warn .backtrace; } }

[15:04] <jkramer> unmatched}: Nice, thanks!

[15:08] <jkramer> unmatched}: That seems to only add the line of the CATCH block to the trace :D

[15:09] <lizmat> sena_kun: https://github.com/rakudo/rakudo/commit/5dd91d8fbe

[15:10] <sena_kun> lizmat, thanks!. 

[15:10] <unmatched}> jkramer: add more of them, somewhere closer to where the problem is, I guess ¯\_(ツ)_/¯

[15:10] *** cognominal joined
[15:11] <jkramer> :D

[15:12] <sena_kun> Also, can someone smarter than me think a little about a good example of how to throw X::TypeCheck::Splice error(without throwing with .new, of course)? This page - https://docs.perl6.org/type/X$COLON$COLONTypeCheck$COLON$COLONSplice has outdated example, that throws another failure now. This page claims this exception is connected with a macro, but you can see it when you splice something non-spliceable iirc. What this exception means now?

[15:14] <moritz> masak: not exactly maze generation, but maybe still of interest to you: http://mewo2.com/notes/terrain/

[15:15] <unmatched}> m: my @a of Int = 42; @a.splice: 0, 1, 'foo';

[15:15] <camelia> rakudo-moar 7501ee: OUTPUT«Type check failed in splice; expected Int but got Str (Str)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[15:15] <moritz> unmatched}++ # faster than me

[15:15] <lizmat> sena_kun: fwiw, I'm not sure what the value is of documenting any X:: class

[15:15] <lizmat> at least, in this manner

[15:15] <dalek> whateverable: 0f85603 | (Aleks-Daniel Jakimenko-Aleksejev)++ | Benchable.p6:

[15:15] <dalek> whateverable: Benchable6 is actually written in perl 6

[15:15] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/0f8560305a

[15:16] <lizmat> sena_kun: except for specific / inherited attributes and specific methods

[15:17] <lizmat> m: my Int @a = ^10; @a.splice(0,0,"a")

[15:17] <camelia> rakudo-moar 7501ee: OUTPUT«Type check failed in splice; expected Int but got Str (Str)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[15:17] <sena_kun> lizmat, we already have a bunch of exceptions documented and they're mostly okay(for now). How they can be improved is another question, but my topic is about completely broken description(it seems?) for this exact one.

[15:18] <lizmat> m: my Int @a = ^10; @a.splice(0,0,"a")   # better example ?

[15:18] <camelia> rakudo-moar 7501ee: OUTPUT«Type check failed in splice; expected Int but got Str (Str)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[15:19] <sena_kun> lizmat, it's a great example, but it has nothing to do with macroses. :-(

[15:19] <lizmat> but the X::TypeCheck::Splice exception has nothing to do with macros, afaik

[15:20] <sena_kun> Then description lies. I'll file an issue now...

[15:22] *** wamba joined
[15:23] <sena_kun> Opened. Thanks for the help, lizmat++

[15:23] <lizmat> sena_kun: you're welcome

[15:25] *** pdcawley left
[15:30] <dalek> doc: 94ad744 | Altai-man++ | doc/Type/ (6 files):

[15:30] <dalek> doc: make examples compile

[15:30] <dalek> doc: review: https://github.com/perl6/doc/commit/94ad74458b

[15:31] *** rindolf left
[15:37] <unmatched}> Anyone done the internals course? How can I make my compiler read a file, rather than me having to type everything all the time in REPL? 

[15:37] <unmatched}> I got this compiler, and I get the error "Too many positionals passed; expected 0 arguments but got 1": https://gist.github.com/zoffixznet/521f1eb8943b457dd6329662eb72d35a

[15:39] *** zacts joined
[15:40] <jnthn> Odd, it looks like it actually made it all the way into running the code from the file before failing

[15:40] <jnthn> Assuming the file you can is in training/code ?

[15:41] <unmatched}> jnthn: Yeah, the file training/code is the file with code and it just has one line: puts "Hello world"

[15:41] <unmatched}> which works, if I type it in repl

[15:41] <jnthn> What happens if you pass --stagestats before the filename?

[15:42] <unmatched}> jnthn: gets up to moar: https://gist.github.com/zoffixznet/78a6f98315a516ef6133e891f4409639

[15:42] <jnthn> Which means it compiled the code and is trying to run it at the point it fails

[15:43] <jnthn> Try --target=ast and see if the constructed AST looks sensible

[15:43] *** heatsink left
[15:44] <unmatched}> I think so: https://gist.github.com/zoffixznet/6dfdaee1a5110e6e37f30b3e996e4b43

[15:45] <jnthn> Yeah, looks OK to me also

[15:45] <jnthn> --target=mast shows what it's getting compiled into

[15:46] <jnthn> Also you can --target=ast without a filename to see if what you get in the REPL is any different

[15:46] <unmatched}> I get the same thing

[15:47] <unmatched}> mast also seems to be the same: https://gist.github.com/zoffixznet/73bd3aab4a7134488b76e195ffeabd02

[15:48] <pmurias> I get different ast for the code in that gist

[15:48] <jnthn> ./nqp-m training/compiler-basic --target=mast training/code st

[15:48] <jnthn> What's that "st" on the end?

[15:48] *** heatsink joined
[15:48] <pmurias> got correct ast when passing a file instead of -e

[15:49] <unmatched}> Just a typo. Here's the output without it: https://gist.github.com/zoffixznet/e84f64befeb3ba80dbfe92cc71df9571

[15:51] <pmurias> the error you get is the program you generate not accepting the command line arguments

[15:52] <jnthn> I think that typo was the problem though?

[15:52] <jnthn> It was passing the extra command line arguments to your program but your program didn't accept them

[15:52] <unmatched}> Running this still fails:     ./nqp-m training/compiler-basic training/code

[15:53] <unmatched}> where compiler-basic is the compiler and the code is the code I want that compiler to run.

[15:53] <unmatched}> pmurias: OK. I guess I'll just cat the code then 

[15:54] <unmatched}> Actually, I think that won't work 'cause REPL treats each line as new one :/

[15:54] <unmatched}> new program or whatever... Wasn't working right when I taught the compiler to assign variables. 

[15:58] <pmurias> unmatched}: https://gist.github.com/pmurias/ab85c4bcd848ec92e9fcd3d700c1c29e - version of your gist that works

[15:59] <pmurias> unmatched}: BTW why do you keep changing irc nick names constantly? ;)

[15:59] <unmatched}> Oh, cool. pmurias++

[15:59] <jkramer> I have a Str that's supposed to be empty. .ords gives me (), but .elems says 1 o_O

[16:00] <unmatched}> jkramer: it's .chars not .elems

[16:00] <timotimo> m: say 1.elems; say "".elems; say (1,2,3).elems;

[16:00] <camelia> rakudo-moar 5dd91d: OUTPUT«1␤1␤3␤»

[16:00] <unmatched}> It gives you 1 because you're basically calling ("your str",).elems, so it's a 1-item list

[16:01] <jkramer> Argh, I just keep getting confused by this :(

[16:01] <unmatched}> pmurias: different boxes :) Zoffix from home and Nickname De Jour when connected from the server.

[16:01] <jkramer> What about Buf? Is it .elems there?

[16:02] <unmatched}> Easy to find out :)

[16:02] <jkramer> m: Buf.new(''.encode).elems

[16:02] <camelia> rakudo-moar 5dd91d: ( no output )

[16:02] <jkramer> m: Buf.new(''.encode).elems.say

[16:02] <camelia> rakudo-moar 5dd91d: OUTPUT«0␤»

[16:03] <jkramer> Meh, it's confusing. Aren't Str and Buf both basically lists of bytes/characters?

[16:03] <unmatched}> Perl 6 is not C :) Str are not lists :)

[16:04] <jkramer> But Str could just have a method .elems that does what .chars does to stop me from producing bugs :)

[16:05] <timotimo> why would .elems favor .chars over .codes?

[16:05] <unmatched}> jkramer: and what would m: "a\x[301]".elems return?

[16:07] <unmatched}> m: use MONKEY-TYPING; augment class Str {method elems {self.chars}}; say "".elems

[16:07] <camelia> rakudo-moar 5dd91d: OUTPUT«0␤»

[16:07] <perlpilot> Maybe Str should have a multi for .elems that gives a helpful message?  

[16:08] <unmatched}> Then why have a degenerate case of .elems on a value assuming it's a 1-item list?

[16:09] <dalek> doc: fb947c0 | Altai-man++ | doc/ (87 files):

[16:09] <dalek> doc: Remove extra identation for a great number of code examples due to :skip-test option

[16:09] <dalek> doc: review: https://github.com/perl6/doc/commit/fb947c098c

[16:10] *** cyphase left
[16:10] *** mcmillhj left
[16:10] *** lambd0x joined
[16:10] <lambd0x> Hi everyone!

[16:10] <unmatched}> Hi, Dr. Nick!

[16:11] <lambd0x> unmatched}: hahaha

[16:12] <lambd0x> unmatched}: I have a doubt...what would be the best way to read from a file and store in an array a part of it and then the rest in another array?

[16:12] <unmatched}> TIL "

[16:12] <unmatched}> TIL "labial spreading" doesn't mean what I thought it meant....

[16:13] <unmatched}> http://i.imgur.com/wE2ESFw.png :)

[16:14] <perlpilot> lambd0x: the way that does what you want would be best :)

[16:14] <unmatched}> lambd0x: what's a "part of it"?

[16:14] <perlpilot> lambd0x: How do you know where to delineate the arrays in the file?

[16:14] <lambd0x> yes fellas

[16:14] <nemo> lambd0x: google image search does not agree with your definition

[16:14] <perlpilot> lambd0x: is it by line?  first N lines in @a, rest in @b ?

[16:14] <nemo> er

[16:14] <nemo> unmatched}: 

[16:15] *** cyphase joined
[16:15] <unmatched}> nemo: I rather not google image search that... lol

[16:15] <lambd0x> I have a file saved as follows: amount to read(integer) to be read (series of integers) x2

[16:16] <huf> well okay, but what is it?

[16:16] <huf> labial spreading i mean

[16:16] <huf> how does it sound?

[16:16] <lambd0x> I wanted to fill in two bidimensional matrixes of order n (controls the amount to be read) and its contents

[16:16] <zacts> hi perl6 nerds

[16:16] <lambd0x> zacts: hello o/

[16:17] <unmatched}> huf: I think the sound is called "unf" :P

[16:17] <unmatched}> huf: "Phonetics. involving lip articulation, as p, v, m, w, or a rounded vowel."

[16:17] <zacts> hi :-)

[16:18] <huf> unmatched}: that isnt enough for me to imagine it

[16:18] *** khw joined
[16:18] <lambd0x> nemo: I've not being able to solve it finding it there

[16:19] <unmatched}> huf: I guess saying "wow" inlvoves lots of labial spreading... not that I'm an expert on it or anything :P

[16:19] <nemo> lambd0x: heh.  wrong name sorry ☺

[16:19] <lambd0x> nemo: hahaha

[16:20] <lambd0x> nemo: no mention on it :P

[16:20] *** pduh joined
[16:20] <unmatched}> lambd0x: this probably https://docs.perl6.org/type/IO$COLON$COLONHandle#method_getc

[16:20] <lambd0x> perlpilot: yes it's stored by lines in a file.

[16:20] <unmatched}> lambd0x: oh, by lines.. Then just loop over .lines

[16:21] <lambd0x> unmatched}: yes but it considers new line as a char and doesn't work as I want

[16:21] <perlpilot> lambd0x: huh?

[16:21] <unmatched}> lambd0x: well, I've still no idea what you're trying to do. So... I give up

[16:22] *** rindolf joined
[16:22] <lambd0x> ok. I want to read lines from a file up to some point while saving it to a bidimensional array and then repeating the process for the other part of the file

[16:24] *** pduh left
[16:25] <perlpilot> lambd0x: how about we start with this:   my $n = get; #`{ the number of element is the first line };  my @a = lines[^$n]; my @b = lines;

[16:25] <perlpilot> lambd0x: does that help?

[16:25] *** pduh joined
[16:26] <perlpilot> lambd0x: or since you keep saying "bidimensional array", maybe you want something like  my @a[$n/2;$n/2];  |@a = lines[^$n];  # ??

[16:26] *** dakkar left
[16:26] <perlpilot> I dunno

[16:26] <lambd0x> hahaha

[16:27] <perlpilot> that's a curious response

[16:27] <lambd0x> perlpilot: You see I want to multiply two matrixes. They're in a file generated by another code of mine.

[16:28] <lambd0x> perlpilot: first number is the order of matrix 1. then its contents it should read up to order lines storing it

[16:29] <lambd0x> but just storing lines wasn't working because then I couldn't get their index for each element and multiply it with the following line of the second matrix

[16:30] *** mcmillhj joined
[16:32] *** wamba left
[16:32] *** pduh_ joined
[16:33] *** pduh_ left
[16:33] *** ParsonsNose joined
[16:33] *** cyphase left
[16:35] *** pduh left
[16:36] <timotimo> lambd0x: if you don't want the newline, you can either put :chomp in the .new or .open for the file, or you just .chomp after grabbing the lines

[16:38] <ParsonsNose> m: say (123 ~~ m/\d+/).Bool; say 123 ~~ any(m/\d+/, m/^2/) ; say 123 ~~ one(m/\d+/, m/^2/) ; say 123 ~~ none(m/\d+/, m/^2/);

[16:38] <camelia> rakudo-moar 5dd91d: OUTPUT«True␤False␤False␤True␤»

[16:38] <ParsonsNose> This isn't what I expected....

[16:38] <sena_kun> m: DateTime.new;

[16:38] <camelia> rakudo-moar 5dd91d: OUTPUT«Cannot make a DateTime object using .new␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[16:38] <sena_kun> Wow.

[16:39] <lambd0x> timotimo: thanks :)

[16:39] *** cyphase joined
[16:39] <unmatched}> m: DateTime.now

[16:39] <camelia> rakudo-moar 5dd91d: ( no output )

[16:39] <sena_kun> Ah, it's just me.

[16:39] <unmatched}> sena_kun: no, I think that's LTA

[16:39] <ParsonsNose> m: say 213 ~~ all(/\d+/, /^2/);

[16:39] <camelia> rakudo-moar 5dd91d: OUTPUT«True␤»

[16:40] <unmatched}> m: DateTime.new: '2016-06-07T22:22:22Z'

[16:40] <camelia> rakudo-moar 5dd91d: ( no output )

[16:40] <sena_kun> unmatched}, perhaps it is.

[16:40] <perlpilot> that is LTA

[16:41] <perlpilot> (not that you needed confirmation :)

[16:41] <unmatched}> m: say Date.new

[16:41] <camelia> rakudo-moar 5dd91d: OUTPUT«Cannot make a Date object using .new␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[16:41] <unmatched}> Same here

[16:41] <nine> ParsonsNose: m// matches immediately. Think of it as m being the operator and the regex // the first argument

[16:41] <unmatched}> bisectable6: say Date.new

[16:41] <bisectable6> unmatched}, On both starting points (good=2015.12 bad=5dd91d8) the exit code is 1 and the output is identical as well

[16:41] <bisectable6> unmatched}, Output on both points: Cannot make a Date object using .new␤  in block <unit> at /tmp/YRFvRMWtey line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/YRFvRMWtey line 1␤

[16:43] <ParsonsNose> m: say 123 ~~ one(/\d+/,/^2/)

[16:43] <camelia> rakudo-moar 5dd91d: OUTPUT«True␤»

[16:43] <ParsonsNose> nine: gotcha, thanks

[16:44] <unmatched}> sena_kun: wanna fix it? :)

[16:45] *** ParsonsNose left
[16:45] <unmatched}> sena_kun: the false case here should be improved, or maybe just toss the ternary and use the true case even for no args too (if the message looks sane): https://github.com/rakudo/rakudo/blob/nom/src/core/Dateish.pm#L35

[16:53] *** cdg joined
[16:56] *** zacts left
[16:58] <unmatched}> I want to add s: trigger to camelia that's normal m: but with CoreHackers::Sourcery loaded...

[17:00] *** Sgeo_ joined
[17:00] *** BuildTheRobots left
[17:01] *** BuildTheRobots joined
[17:02] <tadzik> awwaiid: I got psyched too, thanks a lot!

[17:05] *** kaare_ left
[17:05] *** kaare_ joined
[17:05] *** cog_ joined
[17:08] *** cognominal left
[17:10] *** kaare_ left
[17:10] *** unmatched} is now known as sourceable

[17:10] *** sourceable is now known as Zoffix

[17:11] *** Zoffix left
[17:11] *** Zoffix joined
[17:11] *** Zoffix is now known as sourceable

[17:11] *** sourceable is now known as unmatched}

[17:12] *** Nex6 joined
[17:13] *** firstdayonthejob joined
[17:14] <Nex6> have question,  just starting with Perl6;  starting by write stuff. I am trying to use "run" to run "ping" 

[17:14] <Nex6> see:  my $results = run 'ping', $line, '-c 1','-v', :out;

[17:14] <unmatched}> Nex6: '-c 1', should be two items

[17:14] <Nex6> and the proc capture:  my $cap = $results.out.slurp-rest;

[17:15] <Nex6> unmatched}, ok

[17:15] <Nex6> how can i test for failure?

[17:15] <unmatched}> I guess it works both ways :S weird

[17:16] <Nex6> yea it works well, but now how can i test for a fail?

[17:16] <unmatched}> fail of what?

[17:16] <Nex6> if i ping say 100 hosts i want to know which ones worked and which ones failed

[17:17] <ilmari> udoes ping report that via the exit code?

[17:17] <Nex6> now, it is sending the shell output to a log file

[17:18] <unmatched}> Nex6: that's one way, but there may be a more robust alternative: $results.out.slurp-rest ~~ /$<errors>=\d+ \s+ 'errors'/; say $<errors> && $<errors> > 0 ?? "This one is a fail" !! "not a fail"

[17:21] <unmatched}> The manpage says one can use the error code to determine whether the host is alive, but .exitcode gives 0 for me at all times

[17:22] *** kaare_ joined
[17:22] <unmatched}> Unless I don't subscribe to :out 

[17:22] <unmatched}> Another bug looks like ~_~

[17:22] <Nex6> here is the output when i added your line:

[17:22] <Nex6> ------>  ?? "This one is a fail" !! "not a fail"⏏<EOL>

[17:22] <Nex6>     expecting any of:

[17:22] <Nex6>         infix

[17:22] <Nex6>         infix stopper

[17:22] <Nex6>         postfix

[17:22] <Nex6>         statement end

[17:22] <Nex6>         statement modifier

[17:22] <Nex6>         statement modifier loop

[17:23] <unmatched}> Well, it works in the eval above :D

[17:24] *** zakharyas left
[17:25] <unmatched}> Do you care if you get ping's output  in the terminal? You can just use this: say run("ping", "10.10.10.10", "-c", "1", "-v").exitcode == 0 ?? "Good" !! "Fail!"

[17:25] *** sno left
[17:25] <unmatched}> Technically, you're supposed to be able to add :out and suppress the output, but for some reason then the .exitcode stops working 

[17:26] <Nex6> no i am only using the shell output to see what its doing i want to run it as cron, and report bad hosts

[17:26] <nine> unmatched}: you have to close :out before asking for the exit code

[17:26] <nine> unmatched}: as long as .out is open, the process is still running and does not have any exit code

[17:29] *** cyphase left
[17:29] <unmatched}> Looks like I have to slurp-rest it too :S

[17:30] <unmatched}> Nex6: this works: given run "ping", "localhost", "-c", "1", "-v", :out { .out.slurp-rest; say .out.close.exitcode == 0 ?? "Good" !! "Fail" }

[17:30] <jdv79> why do we have slurp-rest again?

[17:31] <unmatched}> again?

[17:31] <jdv79> the reasoning i mean.  couldn't it just be slurp?

[17:32] <timotimo> because slurp also closes the filehandle

[17:32] <timotimo> whereas slurp-rest doesn't

[17:32] <perlpilot> it's still one of those things that bothers me too.

[17:32] <perlpilot> (irrationally, but still)

[17:32] <jdv79> the docs don't mention closing

[17:33] <perlpilot> "slurp" fits my brain well.  "slurp-rest" feels icky (because most times where I *have* to use it, I want it to be called "slurp")

[17:34] <Nex6> yea, under proc it does say close it

[17:34] <Nex6> thats doesn't say

[17:34] *** cyphase joined
[17:35] <timotimo> jdv79: well, you don't run slurp on a filehandle, right?

[17:36] *** setty1 joined
[17:39] <jdv79> yeah, that's true.

[17:39] <jdv79> i guess i can sorta seen the use for the odd name.  still odd.

[17:39] <jdv79> *see

[17:40] <timotimo> yes, it's kinda odd

[17:40] <timotimo> however, would you expect .slurp - given its name and how the other slurp works - to seek to the beginning of a file first?

[17:41] <jdv79> not me but i can see someone thinking that

[17:41] <jdv79> a fh implies state

[17:42] <jdv79> what's wrong with just more read() multis instead of slurp*?

[17:43] <jdv79> i guess we favor more names for disinctness these days

[17:47] *** Wiertek joined
[17:47] *** edwinsage left
[17:48] *** spider-mario joined
[17:51] *** mcmillhj left
[17:53] *** mcmillhj joined
[17:54] <Nex6> this is what works:

[17:54] <Nex6> my $results = run 'ping', $line, '-c', '1', '-v', :out;

[17:54] <Nex6> if $0 != 1 {

[17:54] <Nex6> say "$line Failed to respond!!!!!!!"

[17:54] <Nex6> };

[17:54] <Nex6> in a for loop

[17:55] <unmatched}> $0 ? :S

[17:55] <Nex6> Perl6 v=  rakudo-star-2016.04

[17:55] <unmatched}> m: say $0

[17:55] <camelia> rakudo-moar 5dd91d: OUTPUT«Nil␤»

[17:56] <jdv79> isn't $0 just an alias for $/[0]?

[17:56] <unmatched}> tis what I thought

[17:56] <Nex6> so is it not suppose to work?

[17:56] <jdv79> so that would "work" as long as it didn't not work.

[17:56] <jdv79> haha

[17:57] <jdv79> i think you want $!, no?

[17:57] <unmatched}> Nex6: what made you use $0 in there?

[17:58] <unmatched}> Isn't that just for caught exceptions?

[17:58] <unmatched}> And anyway, based on nine++'s explanation, no variables would work there, because the process is still open

[17:58] <Nex6> the line you gave me didn't work, i remember the was a a symbol for return code, and looked it up. I used to do perl many many years ago now spent all my time in other languages i guessd

[17:59] <unmatched}> Nex6: you're confusing Perl 6 with our sister language Perl 5.

[17:59] <jdv79> $0 in p5 is the prog name

[17:59] <Nex6> I think early perl 5/4 was an early language of mine 

[17:59] <Nex6> but have not used it since

[17:59] <unmatched}> Right, Perl 6 is very different.

[18:00] <perlpilot> very very VERY different :)

[18:00] <geekosaur> $? is what you wanted. $! is errno

[18:00] <geekosaur> (per;5)

[18:00] <geekosaur> in perl6, you don't want either.

[18:01] <Nex6> hmmm ,  so don't use $0 in Perl6 what should I have used?

[18:01] <unmatched}> The code I showed :)

[18:01] <unmatched}> What do you mean by "didn't work"?

[18:02] *** mvorg left
[18:02] *** harovali joined
[18:02] <Nex6> ok will play with it thanks, have to go

[18:02] <Nex6> will be back later

[18:02] <geekosaur> https://docs.perl6.org/type/Proc https://docs.perl6.org/routine/run

[18:02] <Nex6> I don't have the output screens but i have it commented

[18:04] <Nex6> be back in about an hour

[18:05] *** mcmillhj left
[18:16] *** mcmillhj joined
[18:19] *** prammer joined
[18:21] *** mcmillhj left
[18:25] * unmatched} chuckles

[18:26] <unmatched}> A work order came in for a broken button on the website. I notice it's because the product code has a '+' in it and it isn't percent encoded. So I forward this to The Right People, saying their code is failing to percent-encode and that the + should end up as %2B in the URL... They just fixed it. I'm looking at the fix and it amounts to this line in about 30 places: $product-number.subst('+', '%2B')

[18:26] <unmatched}> Guess we'll wait until we get product numbers with > in them ^_^

[18:27] *** alex___ joined
[18:28] <timotimo> ;_;

[18:29] *** titsuki_ left
[18:31] *** mcmillhj joined
[18:31] <mspo> at least they used a direct replce and not a regex

[18:34] *** heatsink left
[18:36] *** mcmillhj left
[18:36] <timotimo> but it's cool they're writing perl6 code

[18:37] <timotimo> (no other explanation for $product-number having a dash in it)

[18:38] <geekosaur> "it amounts to this line" --- I took that as meaning they translated to p6 :)

[18:39] <unmatched}> Yeah, I translated to Perl 6. Original is an awful BASIC-based abomination that should not be powering any websites. 

[18:40] <Xliff> I echo (timo x 2) --  ;_;

[18:40] *** zacts_pi joined
[18:40] <Xliff> It's either that or repeated headdesks.

[18:40] <Xliff> Or maybe both. 

[18:40] * Xliff goes looking for the padded porta-desk

[18:43] *** mcmillhj joined
[18:43] <timotimo> left-pad your desk

[18:43] <geekosaur> .oO { COBOLONCOGS.ORG }

[18:44] <timotimo> <3

[18:45] *** zacts_pi left
[18:47] *** Possum left
[18:48] *** labster joined
[18:52] *** raiph joined
[19:00] <unmatched}> O.o   "===SORRY!=== STable conflict detected during deserialization."

[19:01] <tadzik> it's okay, the conflict is stable

[19:02] <unmatched}> Says "Probable attempt to load two modules that cannot be loaded together"... but all I'm loading is IRC::Client and CoreHackers::Sourceable :/

[19:03] *** grondilu left
[19:05] *** sourceable joined
[19:05] *** sourceable left
[19:07] <unmatched}> Man, it's a curse. Whenever I try to write a Perl 6 program I actually need, I stumble on these annoyances of shit not working

[19:09] <unmatched}> wtf is a STable conflict and what modules can't be loaded together :/

[19:09] *** Actualeyes left
[19:10] <ugexe> My guess would be something to do with the MONKEY-TYPING is exposing that bug

[19:10] <unmatched}> hmmm

[19:10] *** perlpilot left
[19:19] *** prammer left
[19:22] <tailgate> How does one filter an array like python's filter()?

[19:22] <timotimo> i think filter is like grep

[19:23] <dalek> doc: e1fd532 | Altai-man++ | doc/Type/Date (3 files):

[19:23] <dalek> doc: Make examples compile, add new examples, remove 'Usage' sections for Date-related types

[19:23] <dalek> doc: review: https://github.com/perl6/doc/commit/e1fd53266c

[19:25] *** prammer joined
[19:25] *** darutoko- left
[19:30] *** alex___ left
[19:31] <[Coke]> m: (1..200).grep(*.is-prime).say

[19:31] <camelia> rakudo-moar 5dd91d: OUTPUT«(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199)␤»

[19:31] <[Coke]> tailgate: ^^

[19:32] <Xliff> m: (1..100).grep(* %% 4 == 0).say

[19:32] <camelia> rakudo-moar 5dd91d: OUTPUT«(1 2 3 5 6 7 9 10 11 13 14 15 17 18 19 21 22 23 25 26 27 29 30 31 33 34 35 37 38 39 41 42 43 45 46 47 49 50 51 53 54 55 57 58 59 61 62 63 65 66 67 69 70 71 73 74 75 77 78 79 81 82 83 85 86 87 89 90 91 93 94 95 97 98 99)␤»

[19:32] <Xliff> m: (1..100).grep(* % 4 == 0).say

[19:32] <camelia> rakudo-moar 5dd91d: OUTPUT«(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100)␤»

[19:33] <vcv> m: (1..100).grep(* %% 4).say

[19:33] <camelia> rakudo-moar 5dd91d: OUTPUT«(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100)␤»

[19:33] <unmatched}> Golfed. It's actually use of .^compose in mainline in precompiled modules.

[19:33] <unmatched}> m: BEGIN { use NativeCall; sub system (Str) is native {}; system q|echo 'Int.^compose' > /tmp/Foo.pm6; echo 'use Foo;' > /tmp/Bar.pm6|}; use lib '/tmp'; use Bar

[19:33] <camelia> rakudo-moar 5dd91d: OUTPUT«===SORRY!===␤STable conflict detected during deserialization.␤(Probable attempt to load two modules that cannot be loaded together).␤»

[19:33] *** zakharyas joined
[19:34] <[Coke]> how did your system call sneak in there.

[19:34] <[Coke]> thought that would be prohibited.

[19:34] <unmatched}> Unfortunately no.

[19:34] <unmatched}> I think there's a way to run code via nqp too

[19:34] <Xliff> Yikes

[19:34] <geekosaur> no, allowing NativeCall basically means all the safeties are off

[19:35] <[Coke]> oh, wrong system.

[19:35] <[Coke]> nevermind

[19:37] <unmatched}> m: use nqp; nqp::shell('echo "hello"', '', {})

[19:37] <camelia> rakudo-moar 5dd91d: OUTPUT«===SORRY!===␤Arg count 3 doesn't equal required operand count 8 for op 'shell'␤»

[19:37] <unmatched}> 8? :S

[19:39] <[Coke]> weird, docs say 1 or 3

[19:39] <[Coke]> but perhaps don't do that in the public channel. :P

[19:40] <unmatched}> O:)

[19:45] *** itaipu left
[19:46] *** jonas2 left
[19:47] *** zacts joined
[19:51] *** kaare_ left
[19:53] *** TEttinger joined
[19:56] *** sno joined
[20:03] *** brrt joined
[20:06] *** sufrostico left
[20:08] *** sufrostico joined
[20:14] <lucs> What does "[CONC]" (and other such prefixes) mean in an RT ticket?

[20:15] <lizmat> the likely type of issue, CONC indicating a concurrency issue

[20:15] <lucs> Ah, I see.

[20:16] <lizmat> @LARRY indicating an issue that the core people need to decide on

[20:16] <lizmat> etc.

[20:16] <lucs> Are the prefixes listed somewhere?

[20:16] <lucs> (just curious)

[20:16] <lizmat> not that I know, [Coke] might have a list somewhere

[20:17] <lucs> Okay, thanks.

[20:19] *** sufrostico left
[20:20] <CIAvash> New errors in Rust https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html

[20:20] <AlexDaniel> buggable: help

[20:20] <buggable> AlexDaniel, rt | rt TAG

[20:20] <AlexDaniel> buggable: rt

[20:20] <buggable> AlexDaniel, TOTAL: 1390, UNTAGGED: 600, BUG: 425, LTA: 98, JVM: 62, NYI: 35, SEGV: 30, RFC: 28, UNI: 26, CONC: 24, PERF: 20, POD: 14, @LARRY: 14, PRECOMP: 9, TODO: 9, GLR: 6, BUILD: 5, STAR: 4, NATIVECALL: 4, WEIRD: 3, BOOTSTRAP: 3, MOARVM: 2, OSX: 2, LHF: 1, SPESH: 1, DOCS: 1, MATH: 1   Details: http://bug.perl6.party/1470860458.html

[20:21] <AlexDaniel> buggable: rt WEIRD

[20:21] <buggable> AlexDaniel, Found no tickets with tag WEIRD

[20:21] <lucs> AlexDaniel: Nice :)

[20:21] <AlexDaniel> buggable: what?

[20:22] <AlexDaniel> buggable: rt weird

[20:22] <buggable> AlexDaniel, Found no tickets with tag WEIRD

[20:22] <AlexDaniel> buggable: rt LHF

[20:22] <buggable> AlexDaniel, Found no tickets with tag LHF

[20:22] <AlexDaniel> unmatched}: I don't get it ↑

[20:22] *** brrt left
[20:30] *** Wiertek left
[20:30] *** cdg left
[20:34] *** cdg_ joined
[20:35] *** AlexDaniel left
[20:35] *** sufrostico joined
[20:35] *** hoelzro joined
[20:35] <TEttinger> buggable: rt JVM

[20:35] <buggable> TEttinger, Found 58 tickets tagged with JVM. Details: http://bug.perl6.party/1470861352.html

[20:35] <TEttinger> oh, 4 less

[20:36] <TEttinger> buggable: rt BUILD

[20:36] <buggable> TEttinger, Found 3 tickets tagged with BUILD. Details: http://bug.perl6.party/1470861368.html

[20:36] <TEttinger> buggable: rt WEIRD

[20:36] <buggable> TEttinger, Found no tickets with tag WEIRD

[20:36] <TEttinger> buggable: rt MATH

[20:36] <buggable> TEttinger, Found 1 ticket tagged with MATH. Details: http://bug.perl6.party/1470861404.html

[20:36] <TEttinger> whu huh

[20:39] <geekosaur> buggable, rt NATIVECALL

[20:39] <buggable> geekosaur, Found 4 tickets tagged with NATIVECALL. Details: http://bug.perl6.party/1470861546.html

[20:39] <geekosaur> buggable, rt STAR

[20:39] <buggable> geekosaur, Found 2 tickets tagged with STAR. Details: http://bug.perl6.party/1470861574.html

[20:39] *** zacts left
[20:39] <geekosaur> o.O

[20:39] <geekosaur> buggable appears to have a math problem

[20:40] *** wamba joined
[20:40] <geekosaur> the summary said it had 4 tagged STAR

[20:46] *** mvorg joined
[20:46] <Xliff> buggable: rt NATIVECALL

[20:46] <buggable> Xliff, Found 4 tickets tagged with NATIVECALL. Details: http://bug.perl6.party/1470862009.html

[20:47] *** eam left
[20:47] *** eam joined
[20:49] *** sufrostico left
[20:54] * unmatched} pets buggable

[20:54] <unmatched}> You poor robot.

[20:54] *** rindolf left
[20:56] <unmatched}> o.O weechat switches window on slide. Impressive

[20:58] <Xliff> weechat?

[21:01] <[Coke]> bunch of the ticket [TAG]s are listed in rakudo's README

[21:01] <hoelzro> buggable: rt untagged

[21:01] <buggable> hoelzro, Found 600 untagged tickets. Details: http://bug.perl6.party/1470862899.html

[21:01] <unmatched}> yeah, weechat. Like irssi, except with wee :p

[21:02] <hoelzro> all of the new bots here are so nice

[21:02] <Xliff> unmatched}, and here I thought you were talking about "wii"! Pardon my confusion! ;)

[21:02] *** skids left
[21:02] <unmatched}> :)

[21:02] * Xliff searches for the wee.

[21:03] <[Coke]> untagged still showing tagged tickets, btw.

[21:03] <hoelzro> =/

[21:10] *** mohae_ joined
[21:12] <unmatched}> Yeah, I've not done anything to buggable after I decided to build an RT website she will interface with, so all the bugs are still there :)

[21:12] *** mohae left
[21:13] *** mcmillhj left
[21:15] *** zakharyas left
[21:16] <timotimo> https://medium.com/friendship-dot-js/i-peeked-into-my-node-modules-directory-and-you-wont-believe-what-happened-next-b89f63d21558#.ru0qswrr5  <3

[21:17] <unmatched}> "Imagine if the apple you were eating for breakfast had 291 ingredients, or if the car you drove to work had 291 parts. You’d be worried, wouldn’t you?".... umm, I'm pretty sure they both do have more than that :/

[21:18] <hoelzro> haha

[21:20] <timotimo> If the entire recorded history of humanity could fit in a single megabyte, then Babel alone would consist of SEVENTEEN times the entire recorded history of humanity. Just so that we can avoid writing JavaScript.

[21:21] <unmatched}> ROFL "Glimmer brings in the entirety of Encyclopedia Brittanica, just to display the definition for the word “glimmer” in its help menu." 

[21:21] <unmatched}> Wow, that's so bad

[21:23] *** harmil_wk joined
[21:24] <gfldex> so basically, folk who earn money via marketing are shit at making a sane ecosystem

[21:25] <hoelzro> that exports.guy part was hilarious

[21:25] <hoelzro> that was about when I figured out it was satire =/

[21:26] <harmil_wk> I was wondering, how do I get examples added to the http://examples.perl6.org/categories/parsers.html area?

[21:26] <harmil_wk> That string parser I posted to reddit would be useful there, I think.

[21:27] <gfldex> harmil_wk: fork, clone, edit, push, click PR

[21:27] *** cdg_ left
[21:27] *** Ben_Goldberg left
[21:28] <timotimo> hoelzro: are you sure it's satire?

[21:28] <timotimo> because the exports.guy thing is definitely in there

[21:28] <timotimo> https://github.com/babel/babel/blob/f36d07d30334f86412a9d2771880cb566a82a9b6/packages/babel-core/src/api/node.js#L33

[21:30] <hoelzro> wat

[21:30] <hoelzro> did they add that because of the post?

[21:31] <timotimo> yes

[21:31] <timotimo> https://github.com/babel/babel/pull/3641

[21:32] <El_Che> is there something out there to easily count line of codes to check how many of them have been ported (e.g. comparing the "done" classes with the "still-to-be-ported"?

[21:32] <El_Che> or put it differently, has someone seen that kind of badge on github?

[21:33] <hoelzro> ...

[21:33] <hoelzro> that's just...so silly of the babel devs

[21:33] <hoelzro> oh well, it's not my project

[21:34] <hoelzro> ¯\_(ツ)_/¯

[21:34] <hoelzro> El_Che: what do you mean by ported lines?

[21:35] <El_Che> hoelzro: let's say the original (perl5) project has 40 classes, and I already ported 3 to perl 6. So the port is 3/40 on the way 

[21:35] *** mcmillhj joined
[21:35] <El_Che> I wonder if there is something more finegrained like line of codes

[21:35] <hoelzro> ah, I see

[21:35] <El_Che> it's easily silly to do

[21:36] <El_Che> but I wonder if there are github badges out there

[21:36] <hoelzro> El_Che: my silly comment was regarding //github.com/babel/babel/pull/3641

[21:36] <Xliff> HAHAHAHA! ROFLMAO!

[21:36] <hoelzro> El_Che: my silly comment was regarding https://github.com/babel/babel/pull/3641

[21:36] <Xliff> That post is awesome.

[21:37] <El_Che> hoelzro: yeah, I got that :)

[21:37] <hoelzro> ok =)

[21:37] <Xliff> And yes... its got to be satire.

[21:37] <El_Che> nice to clarify though :)

[21:37] <Xliff> Please tell me it is satire.

[21:37] <unmatched}> :)

[21:37] * Xliff reaches for the padded desk.... Just In Case.

[21:37] <unmatched}> It is

[21:39] *** Ben_Goldberg joined
[21:39] * Xliff finally understands the exports.guy references.

[21:39] <Xliff> But seriously..... Fieri? That hack?

[21:39] <Xliff> Couldn't they have found a better guy?

[21:39] <Xliff> =)

[21:40] *** mcmillhj left
[21:40] <Xliff> "Conclusino" <- The final nail

[21:42] <pmurias> The babel folks actually putting a "Guy Fieri" picture in the source doesn't make a very good impression about their project :/

[21:42] <Xliff> pmurias, I gno write!!!

[21:42] <Xliff> Didn't I just say that?

[21:43] <hoelzro> pmurias: yeah =/

[21:43] <profan> it was spawned by a certain blogpost i believe, that was poking fun at dependency hell in js land

[21:43] <hoelzro> profan: do you know which?

[21:43] <profan> moment, lol

[21:43] <hoelzro> I was curious to see if it was just for fun, or if there was some underlying point

[21:43] <Xliff> Yeah. I gotta read that one.

[21:43] <Xliff> Well, dependency hell is universal.

[21:43] <profan> https://medium.com/friendship-dot-js/i-peeked-into-my-node-modules-directory-and-you-wont-believe-what-happened-next-b89f63d21558#.z4l2qfhpk

[21:44] <profan> it's a bit on both sides of the fence, but i believe it came from there :p

[21:44] <Xliff> profan: Er. That's the post we are talking about.

[21:44] *** cdg joined
[21:44] *** Ben_Goldberg left
[21:44] <profan> oh, woops

[21:44] <unmatched}> pmurias: it's satire. There's no picture :)

[21:45] <Xliff> profan: It's cool! =)

[21:45] <pmurias> unmatched}: there is one

[21:45] *** mcmillhj joined
[21:45] <pmurias> unmatched}: they actually added an ascii art picture after the article

[21:45] *** cdg left
[21:46] *** bjz left
[21:46] <unmatched}> pmurias: temporarily... It was removed :)

[21:46] <unmatched}> It's not like we don't have easter eggs in Perl 6 :)

[21:46] <unmatched}> m: say WHY 'Life, the Universe, and Everything':

[21:46] <camelia> rakudo-moar c322e1: OUTPUT«42␤»

[21:46] <pmurias> unmatched}: what easter eggs do we have?

[21:46] *** bjz joined
[21:47] * unmatched} points up

[21:47] <Xliff> unmatched}, Yes. And that is orders of magnitude LESS, and just as funny.

[21:48] <Xliff> P6 coders do it efficiently. =)

[21:48] *** wamba left
[21:48] *** ponbiki left
[21:49] *** Ben_Goldberg joined
[21:50] *** mcmillhj left
[21:50] *** ponbiki joined
[21:50] <pmurias> Xliff: the guy is still in babel master HEAD

[21:50] *** ponbiki is now known as Guest28790

[21:51] <Xliff> Yeah, but it's ASCII art.

[21:51] <Xliff> I'm all for putting gags in dev-code.  Just not PRODUCTION.

[21:52] <unmatched}> Oh yeah, they brought him back...

[21:53] <unmatched}> m: https://gist.github.com/zoffixznet/9d7e0053e62fb81b05670b334b9c2755

[21:53] <camelia> rakudo-moar c322e1: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of @+ variable; in Perl 6 please use .to method␤at <tmp>:113␤------> 3"                                  `##@+7⏏5;;;;;;::::;::,,;+::::;;'++''+++'';;;;;;;␤»

[21:53] <unmatched}> eh :)

[21:54] <geekosaur> just need an appropriate slang :p

[21:55] *** mcmillhj joined
[21:57] *** eyck left
[21:58] *** eyck joined
[21:59] *** cdg joined
[21:59] *** setty1 left
[21:59] *** mcmillhj left
[22:04] *** stmuk_ joined
[22:05] *** mcmillhj joined
[22:05] *** stmuk left
[22:09] *** CIAvash left
[22:10] *** mcmillhj left
[22:14] *** prammer left
[22:15] *** Guest28790 is now known as ponpon

[22:22] *** mcmillhj joined
[22:22] *** firstdayonthejob left
[22:22] *** RabidGravy left
[22:24] <japhb> .tell lizmat Thanks for merging (and fixing) the perl6-bench fix!

[22:24] <yoleaux> japhb: I'll pass your message to lizmat.

[22:26] *** mcmillhj left
[22:35] <unmatched}> waaat "Cannot resolve caller slurp-rest(IO::Pipe: ); none of these signatures match:"

[22:35] *** bjz left
[22:38] <literal> m: say $*ARGFILES.words

[22:38] <camelia> rakudo-moar c322e1: OUTPUT«read string requires an object with REPR MVMOSHandle␤  in block <unit> at <tmp> line 1␤␤»

[22:38] <literal> ^-- bug?

[22:39] <gfldex> it's IO so it may be the restricted settings of camelia

[22:39] <literal> I get this in my program, while $*ARGFILES.lines works fine

[22:39] <literal> m: say $*ARGFILES.lines

[22:39] <camelia> rakudo-moar c322e1: OUTPUT«(Céad slán ag sléibhte maorga Chontae Dhún na nGall Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll; Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí I mo dhiaidh bhí gleanntáin ghlas’ Ghaoth…»

[22:40] *** mcmillhj joined
[22:40] <gfldex> perl6 -e 'say $*ARGFILES.words; CATCH { default { say .^name } }'

[22:40] <gfldex> X::AdHoc

[22:41] <unmatched}> How can I run a perl6 I built in a rakudo checkout? I'm getting this currently: https://gist.github.com/zoffixznet/28dfb2190e50456e0e4c6c062e5e9069

[22:42] <gfldex> hard to decide if lines on $*ARGFILES should die or return the empty list

[22:42] <gfldex> actually it should not die but return Failure

[22:42] <gfldex> so bug it is

[22:42] <literal> well, the issue I had was with .words when .lines actually works :)

[22:43] *** pmurias left
[22:43] <unmatched}> gawd I hate Perl 6

[22:43] <gfldex> same is true for words

[22:44] <gfldex> lines and words should behave the same

[22:44] *** mcmillhj left
[22:44] <unmatched}> apparently my `perl6` command calls some huge Perl 5 script. heh

[22:47] *** mcmillhj joined
[22:47] <gfldex> literal: IO::ArgFiles implements .lines but not .words

[22:48] <gfldex> so it falls back to IO::Handle::words what requires an open filehandle

[22:48] <gfldex> please rakudobug :)

[22:51] <gfldex> m: with $*ARGFILES { dd .args, .filename  };

[22:51] <camelia> rakudo-moar c322e1: OUTPUT«Array @ARGS = []␤Any␤»

[22:51] <gfldex> m: say $*ARGFILES.eof

[22:51] <camelia> rakudo-moar c322e1: OUTPUT«False␤»

[22:53] *** mcmillhj left
[22:53] <gfldex> that may be the culprit

[22:55] *** mcmillhj joined
[22:57] <geekosaur> unmatched}, that sounds like what you hate is rakudobrew?

[23:01] *** mcmillhj left
[23:02] *** spider-mario left
[23:03] <unmatched}> geekosaur: no, Perl 6 in general. I started this tiny ass program 4 hours ago. It should've taken 20 minutes to finish. I first wasted time with that .^compose in mainline bug, then this "no candidate" thing that appears to happen when the Proc fails (because that makes a lot of sense somehow?), then zef not seeing the latest and greatest module release, and now... after I finally managed to run the perl6 I

[23:03] <unmatched}> want to run, it's complaining about a missing module because that perl6 apparently doesn't know where the modules are installed at.

[23:03] * unmatched} throws tables around then opens another beer

[23:04] <unmatched}> I just don't think I'm writing that much of an arcane code to be constantly bombarded with bugs, and quirks, and missing information.

[23:05] <unmatched}> And a lot of Perl 6 feels like a hack. I know some people poo-pooed Zeframs talk, but I do think he has a point about too many features and their interactions. 

[23:05] <unmatched}> Even the .words/.lines issue above can be tagged with that

[23:05] <unmatched}> </rant>

[23:08] <unmatched}> ( this talk I meant https://www.youtube.com/watch?v=fZZBYRT5Ghc )

[23:10] *** heatsink joined
[23:11] <timotimo> maybe Proc doesn't initialize its out pipe (i.e. sets it as the Pipe type object) when the run can't work?

[23:11] <timotimo> and then you get "can't call slurp-rest on an undefined object" with a message that doesn't tell you as much

[23:12] *** mcmillhj joined
[23:12] <timotimo> and you should be able to just ./perl6-m in a rakudo checkout, or find the relevant install/bin/perl6-m

[23:13] <unmatched}> Yeah, the IO::Handle is a :U and I get the NoCandidate exception because all candidates are a :D https://gist.github.com/zoffixznet/93c191774eb4f8028f5727342712c570

[23:13] <timotimo> and yeah, ArgFiles still sucks; nobody put enough care into it yet to make it finished

[23:13] <timotimo> that's noticably LTA, then

[23:14] <timotimo> m: IO::Pipe.slurp-rest()

[23:14] <camelia> rakudo-moar c322e1: OUTPUT«IO::Pipe is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method FALLBACK at src/RESTRICTED.setting line 31␤  in any  at gen/moar/m-Metamodel.nqp line 3090␤  in block <unit> at <tmp> line 1␤␤»

[23:14] <timotimo> can't show it with camelia, though

[23:16] *** Entonian joined
[23:16] <ugexe> hmm, IO::Pipe.?slurp-rest() doesnt do what I hoped either

[23:17] *** mcmillhj left
[23:19] <timotimo> of course not, that only calls slurp-rest if it exists

[23:20] <timotimo> and slurp-rest definitely does exists

[23:20] <timotimo> m: say "hello".?what-method-is-this()

[23:20] <camelia> rakudo-moar c322e1: OUTPUT«Nil␤»

[23:20] <timotimo> m: say "hello".what-method-is-this()

[23:20] <camelia> rakudo-moar c322e1: OUTPUT«Method 'what-method-is-this' not found for invocant of class 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[23:20] *** Entonian left
[23:20] <timotimo> i'm going to bed, i'm super drained

[23:21] <timotimo> unmatched}: i'd like to look closer at the code you use that has a .^compose in its mainline; feel free to gimme the link while i'm a sleep

[23:21] *** canopus left
[23:21] <unmatched}> timotimo: I RTed that one: https://rt.perl.org/Ticket/Display.html?id=128891

[23:22] <unmatched}> And it's from my CoreHackers::Sourcery (in earlier commits; I now moved the .^compose to sub EXPORT)

[23:22] <timotimo> having it in sub EXPORT seems like a better idea, but probably doesn't fix it

[23:22] <timotimo> i'd say put a "no precompilation" in front

[23:23] <timotimo> oh, jnthn already pointed that out in the rt

[23:23] <timotimo> ok, bedtime now!

[23:23] <timotimo> o/

[23:23] <unmatched}> night

[23:23] <Hotkeys> m: my @foo = [[1,2,3]]; say @foo

[23:23] <camelia> rakudo-moar c322e1: OUTPUT«[1 2 3]␤»

[23:23] <Hotkeys> why does this flatten

[23:23] *** mcmillhj joined
[23:23] *** harovali left
[23:23] <Hotkeys> m: my @foo = [].push([1,2,3]); say @foo

[23:23] <camelia> rakudo-moar c322e1: OUTPUT«[[1 2 3]]␤»

[23:23] <Hotkeys> but this doesn't

[23:24] <Hotkeys> specifically the first one, I like that the second doesn't

[23:24] <unmatched}> m: my @foo = [[1,2,3],]; say @foo

[23:24] <camelia> rakudo-moar c322e1: OUTPUT«[[1 2 3]]␤»

[23:24] <Hotkeys> why is that required though

[23:24] <unmatched}> no idea

[23:24] <Hotkeys> shouldn't it assume if I add the extra brackets that I want them?

[23:25] *** pierre_ joined
[23:26] *** heatsink left
[23:28] *** mcmillhj left
[23:29] *** canopus joined
[23:30] *** pierre_ left
[23:33] *** mcmillhj joined
[23:33] *** mcmillhj left
[23:33] <gfldex> m: my @a = Array.new([1,2,3]); dd @a;

[23:33] <camelia> rakudo-moar c322e1: OUTPUT«Array @a = [1, 2, 3]␤»

[23:33] *** mcmillhj joined
[23:33] *** mcmillhj left
[23:33] <gfldex> [[]] is a copy constructor call

[23:34] <gfldex> m: my @foo = $[[1,2,3]]; say @foo

[23:34] <camelia> rakudo-moar c322e1: OUTPUT«[[1 2 3]]␤»

[23:36] *** tardisx joined
[23:39] *** mcmillhj joined
[23:40] *** mcmillhj_ joined
[23:44] *** mcmillhj left
[23:44] *** skids joined
[23:47] *** tardisx left
[23:48] *** sourceable joined
[23:48] *** sourceable left
[23:48] *** SourceBaby joined
[23:50] *** SourceBaby left
[23:51] *** SourceBaby joined
[23:51] <unmatched}> s: 42, "base"

[23:51] <SourceBaby> unmatched}, Sauce is at https://github.com/rakudo/rakudo/blob/c322e1e/src/core/Int.pm#L62

[23:51] <unmatched}> s: 42, "base", \(16)

[23:51] <SourceBaby> unmatched}, Sauce is at https://github.com/rakudo/rakudo/blob/c322e1e/src/core/Int.pm#L63

[23:51] <unmatched}> s: DateTime, "new", \()

[23:51] <SourceBaby> unmatched}, Sauce is at https://github.com/rakudo/rakudo/blob/c322e1e/src/core/Dateish.pm#L34

[23:51] <unmatched}> \o/

[23:53] *** mcmillhj joined
[23:53] *** mcmillhj_ left
[23:54] *** aries_liuxueyang left
[23:54] *** cdg left
[23:55] *** Khisanth left
[23:57] *** mcmillhj left
[23:57] *** cpage joined
