[00:01] *** TreyHarr1 joined
[00:01] <zwu> Just read that "operators are lexically scoped by default",  so if a module defined operators, must it be exported and imported lexically in order to to them?

[00:03] <ZoffixLappy> Yes

[00:03] <ZoffixLappy> They're just subs. 

[00:03] <ZoffixLappy> Also, not sure what "by default means"... is there a way to overide the default?

[00:04] <zwu> If I use a dynamic loading "require ..." how can I import them too?

[00:05] <zwu> or is there a way to use as a call $MyModule::my_subs() for operators defined in a module?

[00:05] <ugexe> there is just so much wrong with this

[00:05] <ZoffixLappy> m: class Foo { sub infix:<+> is export { $^a - $^b } }; import Foo; say 2+2; 

[00:05] <camelia> rakudo-moar 1acf80: OUTPUT«0␤»

[00:05] <ugexe> `my $body ... sub test_response(..., $body)`

[00:06] <ugexe> also a my @body

[00:07] <ZoffixLappy> insteresting. Bailador's debug output gives me "{Content-Type => whatever, X-Foo => meow}", but looking at headers I'm getting text/html content-type even though I'm getting the X-Foo header :/

[00:07] <ugexe> the comments for encode-psgi-response say body can be an array, str, or buf, but 10ish lines down it has $body ~~ Supply

[00:07] <zwu> ZoffixLappy: should sub being multi in "... sub infix:<+> is export ...?"

[00:08] *** spider-mario left
[00:09] <ZoffixLappy> zwu, depends on what you want. In the above, I completely shadowed built-in + operator. I couldn't use a multi in this case because a multi for a + between two Ints is already defined, so it'd be ambiguous. But if you were defining a + for some custom objects, then yeah, you'd use a multi

[00:10] <ZoffixLappy> zwu, if this is of any help (use left/right arrows to navigate slides): http://tpm2016.zoffix.com/#/14

[00:10] <zwu> ZoffixLappy: great, thanks alot!

[00:12] *** Herby_ left
[00:14] <ugexe> failure to set Content-Type would seem to be related to Bailador::App.render()

[00:15] <ugexe> i suspect in the first multi that the else conditional is reached, which calls the 2nd multi without passing the $type (which then defaults to text/html)

[00:19] <ZoffixLappy> ugexe++

[00:19] <ZoffixLappy> That is exactly it.

[00:22] *** pierre_ joined
[00:25] *** wamba left
[00:46] *** BenGoldberg joined
[00:47] *** sufrostico left
[00:52] <ZoffixLappy> .tell ufobat sent you a PR to fix Bailador's content_type() being broken: https://github.com/ufobat/Bailador/pull/66

[00:52] <yoleaux> ZoffixLappy: I'll pass your message to ufobat.

[00:57] <dalek> ecosystem: 0a12cf0 | (Zoffix Znet)++ | META.list:

[00:57] <dalek> ecosystem: Add Bailador::Plugin::Static

[00:57] <dalek> ecosystem: 

[00:57] <dalek> ecosystem: Automatically serve static files in your Bailador apps

[00:57] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/0a12cf0958

[00:57] <ZoffixLappy> https://github.com/zoffixznet/perl6-Bailador-Plugin-Static

[01:00] *** zwu left
[01:06] *** al2o3-cr left
[01:12] *** molaf left
[01:25] *** molaf joined
[01:40] *** pierre_ left
[01:40] *** pierre_ joined
[01:52] *** sortiz joined
[01:52] <sortiz> \o #perl6

[01:55] <ZoffixLappy> "method 'trans' not found for invocant of class 'Any'  in sub uri-unescape at sources/92D0C475746E4D3627F2FFB218718FDAA2724E51 (URI::Escape) line 30"

[01:55] <ZoffixLappy> *sigh* will this day ever end

[01:55] <ZoffixLappy> o/ sortiz 

[01:56] <sortiz> ZoffixLappy, technically the day is over in half of the world, may be you are in the wrong half ;-)

[01:57] <ZoffixLappy> :)

[01:58] <ZoffixLappy> It's just I've spent the last 13 hours fixing and writing software to get closer to starting the original goal I started to achieve this morning. I keep getting stymied by unimplemented and broken stuff

[02:01] *** pierre_ left
[02:03] <ZoffixLappy> Luckily, the last one seems to be my fault :) 

[02:03] <ZoffixLappy> Best mistakes are ones in your own software, because they're the fastest to fix \o/

[02:04] *** nbrown joined
[02:07] *** bitmap joined
[02:13] *** ugexe joined
[02:20] <grondilu> :q

[02:20] *** grondilu left
[02:22] *** noganex_ joined
[02:24] <ZoffixLappy> This is annoying :/ For some reason regular POST request to Bailador app works just fine, but jQuery POST fails (never gets a response) even though doing that same jQ post to httpbin.org/post works fine :(

[02:24] <ZoffixLappy> Programming is hard :/

[02:25] <sortiz> What kind of content-type uses the body of these requests?

[02:25] *** noganex left
[02:26] <ZoffixLappy> text/html.. I guess

[02:27] <sortiz> A POST body almost never is text/html

[02:28] <ZoffixLappy> Ohh. I may know what's up...  I need CORS

[02:31] <sortiz> If your client is using more than one origin, yes.

[02:34] *** rba_ joined
[02:34] <ZoffixLappy> No love... This is my code: https://github.com/zoffixznet/js-glot-io  I start app.p6 with perl6 app.p6, so it's listening on :3000. Then I just pop open the HTML file with firefox index.html and when I click the "Run" button, LiveHTTPHeaders plugin tells me I get response 200 and Content-Type: text/html but nothing else at all :/

[02:34] <ZoffixLappy> Even though if I disable JS and do the same step, i get a response :/

[02:36] <ZoffixLappy> battery dying... ENOPOWERSOCKETINSIGHT

[02:37] <sortiz> About Bailador, I'm worst than John Snow ;-)

[02:38] *** Ben_Goldberg joined
[02:38] *** BenGoldberg left
[02:38] *** Ben_Goldberg is now known as BenGoldberg

[02:38] *** colomon left
[02:38] <ZoffixLappy> found one lol

[02:40] <ZoffixLappy> Shitty table tho :/

[02:40] <ZoffixLappy> I wonder if my issue is because I'm running my page with firefox index.html instead of it being properly served :/

[02:44] <ZoffixLappy> And SURE IT WAS!!! GRRR.... If I serve my index.html with Bailador the stuff works ~_~

[02:45] <ZoffixLappy> Another 100 hours wasted on nonsense and I may end up with a working web app :P \o/

[02:46] *** colomon joined
[02:48] *** nbrown left
[02:51] <BenGoldberg> Browsers sometimes treat file:// stuff quite strangely...

[02:55] *** BenGoldberg left
[02:56] *** BenGoldberg joined
[03:01] *** pierre_ joined
[03:03] *** yqt left
[03:04] *** ZoffixLappy left
[03:07] *** pierre_ left
[03:08] *** colomon left
[03:10] *** colomon joined
[03:14] *** colomon left
[03:17] *** kid51 left
[03:21] *** colomon joined
[03:48] *** BenGoldberg left
[03:56] *** maybekoo2 left
[04:07] *** Cabanossi left
[04:09] *** khw left
[04:09] *** Cabanossi joined
[04:52] *** skids left
[04:56] *** ufobat joined
[05:09] <ufobat> good morning :)

[05:09] <yoleaux> 00:52Z <ZoffixLappy> ufobat: sent you a PR to fix Bailador's content_type() being broken: https://github.com/ufobat/Bailador/pull/66

[05:09] <ufobat> ZoffixWin, its merged :-)

[05:25] *** hotel_california joined
[05:26] *** hotel left
[05:38] *** hotel_california left
[05:39] *** hotel joined
[05:46] *** pierre_ joined
[05:51] *** Ven joined
[05:54] *** Ven left
[06:00] *** CIAvash joined
[06:02] *** wamba joined
[06:03] *** xinming_ joined
[06:10] *** rindolf joined
[06:27] *** rurban joined
[06:34] *** sortiz left
[06:39] *** wamba left
[06:41] *** wamba joined
[06:49] *** geekosaur left
[06:52] *** geekosaur joined
[06:54] *** wamba left
[07:12] *** RabidGravy joined
[07:16] <RabidGravy> boom

[07:18] *** rindolf left
[07:22] *** darutoko joined
[07:27] <ufobat> ola!

[07:31] <RabidGravy> eh up

[07:33] <jeek> Is Shlomi Fish sane now?

[07:34] <RabidGravy> that's a leading question

[07:35] <jeek> I recall a time, and probably a conversation in another channel, where it was strongly implied that Mr. Fish was not all there.

[07:35] <jeek> My memory is admittedly not the greatest.

[07:38] <RabidGravy> there are lot of people who are rather eccentric around the Perl world, I'

[07:38] <RabidGravy> eh?

[07:40] <RabidGravy> ... I know the thing about brilliance and madness is somewhat of a cliche but programming (and programming communities) does seem to bring it into relief

[07:48] <RabidGravy> .seen tokuhirom

[07:48] <yoleaux> I saw tokuhirom 30 Oct 2015 02:34Z in #perl6: <tokuhirom> after: split('=', 'YYY=', 2) returns just 'YYY'

[07:48] <RabidGravy> :(

[07:48] <RabidGravy> could do with him merging a PR against Websocket

[07:58] <ufobat> but tokuhirom is quite active on github, isn't he? 

[07:59] *** firstdayonthejob joined
[07:59] <ufobat> now i am afraid that my PR on HTTP::Server::Tiny will not get merged into it ;) thank you RabidGravy 

[08:01] <RabidGravy> reasonably active

[08:01] * RabidGravy cleans up a bunch of outdated PRs

[08:09] *** Ven joined
[08:14] *** rindolf joined
[08:16] *** pierre_ left
[08:19] *** rurban left
[08:21] <masak> jeek: anything precipitated this question? any relation to Perl 6? :)

[08:22] <masak> (antenoon, #perl6)

[08:22] <RabidGravy> eh up chief

[08:22] <sjn> \o

[08:26] <jeek> rindolf signing off, saw his quit message

[08:31] *** Ven left
[08:32] <rindolf> jeek: the Llama thing?

[08:34] <jeek> No.

[08:35] *** vendethiel left
[08:48] *** wamba joined
[08:49] *** rindolf left
[08:54] *** TreyHarr1 left
[08:54] *** TreyHarris joined
[08:54] *** ufobat left
[08:55] *** spider-mario joined
[08:59] *** Emeric joined
[09:08] *** vendethiel joined
[09:09] <_nadim> Morning

[09:13] <RabidGravy> marnin

[09:16] <_nadim> I am not making sense of grammar actions, I have this http://nopaste.linux-dev.org/?1097109 where, I thought, I'd extract only what is of interest to me. I get 'arguments' but not the rest.

[09:16] *** Ven joined
[09:16] *** AlexDaniel joined
[09:17] <AlexDaniel> m: dd split(‘=’, ‘YYY=’, 2)

[09:17] <camelia> rakudo-moar 1acf80: OUTPUT«("YYY", "").Seq␤»

[09:17] *** rurban joined
[09:18] <AlexDaniel> m: dd split(‘=’, ‘YYY=’, NaN)

[09:18] <camelia> rakudo-moar 1acf80: OUTPUT«This type cannot unbox to a native integer␤  in block <unit> at /tmp/8fiYS8YJd5 line 1␤␤»

[09:18] <AlexDaniel> m: dd split(‘=’, ‘YYY=’, Inf)

[09:18] <camelia> rakudo-moar 1acf80: OUTPUT«("YYY", "")␤»

[09:18] <AlexDaniel> so it wants a native integer but not quite

[09:20] *** maybekoo2 joined
[09:23] *** pierre_ joined
[09:24] *** RabidGravy left
[09:32] <AlexDaniel> m: say {$^_}(42) # heh

[09:32] <camelia> rakudo-moar 1acf80: OUTPUT«5===SORRY!5=== Error while compiling /tmp/bs2evkclrG␤Redeclaration of symbol $^_ as a placeholder parameter␤at /tmp/bs2evkclrG:1␤------> 3say {$^_7⏏5}(42) # heh␤»

[09:37] <AlexDaniel> m: my $_-_-_-_-_ = 42

[09:37] <camelia> rakudo-moar 1acf80: ( no output )

[09:44] *** domm_ joined
[10:05] *** pierre_ left
[10:07] <AlexDaniel> What's the maximum length for a variable name?

[10:07] *** rurban left
[10:10] <AlexDaniel> 10 million characters seems to be ok, nice

[10:10] <xfix> I don't think there is one, other than your memory limit.

[10:11] <xfix> Perl 6 grammar is written in Perl 6 itself, so it's not using some low level language where an user can be worried about overflowing some buffer.

[10:14] *** domm_ left
[10:14] *** domm_ joined
[10:15] <psch> m: my $x = (("a" xx 2 ** 63) xx 2 ** 63) xx 2 ** 63; say $x.chars

[10:15] <camelia> rakudo-moar 1acf80: OUTPUT«0␤»

[10:15] <psch> hm, precedence?

[10:15] *** pmurias joined
[10:15] <psch> m: my $x = (("a" xx (2 ** 63)) xx (2 ** 63)) xx (2 ** 63); say $x.chars

[10:15] <camelia> rakudo-moar 1acf80: OUTPUT«0␤»

[10:15] <psch> m: my $x = (("a" xx (2 ** 63)) xx (2 ** 63)); say $x.chars

[10:15] <camelia> rakudo-moar 1acf80: OUTPUT«0␤»

[10:15] <psch> m: my $x = (("a" xx (2 ** 63)); say $x.chars

[10:15] <camelia> rakudo-moar 1acf80: OUTPUT«5===SORRY!5=== Error while compiling /tmp/1YJTTEOOg2␤Cannot use variable $x in declaration to initialize itself␤at /tmp/1YJTTEOOg2:1␤------> 3my $x = (("a" xx (2 ** 63)); say $7⏏5x.chars␤    expecting any of:␤        argument list␤   …»

[10:16] <psch> m: my $x = ("a" xx (2 ** 63)); say $x.chars

[10:16] <camelia> rakudo-moar 1acf80: OUTPUT«0␤»

[10:16] <psch> m: my $x = ("a" xx (2 ** 31)); say $x.chars

[10:16] <camelia> rakudo-moar 1acf80: OUTPUT«Memory allocation failed; could not allocate 17179869184 bytes␤»

[10:16] <psch> ah, there

[10:16] <Hotkeys> Rip

[10:16] <psch> m: my $x = ("a" xx (2 ** 15)); say $x.chars

[10:16] <camelia> rakudo-moar 1acf80: OUTPUT«65535␤»

[10:16] *** domm_ left
[10:16] <psch> well, that's a limit in xx, not Str i suppose

[10:16] <psch> m: my $x = "a"; $x ~= $x for ^1000; say $x.chars

[10:16] <camelia> rakudo-moar 1acf80: OUTPUT«Memory allocation failed; could not allocate 536870912 bytes␤»

[10:17] <psch> m: my $x = "a"; $x ~= $x for ^15; say $x.chars

[10:17] <camelia> rakudo-moar 1acf80: OUTPUT«32768␤»

[10:17] <psch> m: my $x = "a"; $x ~= $x for ^32; say $x.chars

[10:17] <camelia> rakudo-moar 1acf80: OUTPUT«Memory allocation failed; could not allocate 536870912 bytes␤»

[10:17] <psch> m: my $x = "a"; $x ~= $x for ^31; say $x.chars

[10:17] <camelia> rakudo-moar 1acf80: OUTPUT«Memory allocation failed; could not allocate 536870912 bytes␤»

[10:17] <AlexDaniel> psch: it does weird stuff silently, so that's still a bug I guess

[10:17] <psch> m: my $x = "a"; $x ~= $x for ^16; say $x.chars

[10:17] <camelia> rakudo-moar 1acf80: OUTPUT«65536␤»

[10:17] <psch> m: my $x = "a"; $x ~= $x for ^17; say $x.chars

[10:17] <camelia> rakudo-moar 1acf80: OUTPUT«131072␤»

[10:17] * psch stops poking for magic numbers

[10:17] <AlexDaniel> psch: https://rt.perl.org/Ticket/Display.html?id=126014

[10:18] <psch> AlexDaniel++: ah, already ticket

[10:18] <AlexDaniel> but it says nothing about getting 0

[10:18] <psch> +ed

[10:18] <psch> i think we have a magic number that truncates a bigint to 0?

[10:18] <psch> maybe in pow too

[10:18] <AlexDaniel> not in pow

[10:19] <psch> m: say 2 ** 2 ** 64

[10:19] <camelia> rakudo-moar 1acf80: OUTPUT«Numeric overflow␤  in block <unit> at /tmp/zusMCQeiqU line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/zusMCQeiqU line 1␤␤»

[10:19] <AlexDaniel> well, in pow it was kinda fixed: https://rt.perl.org/Ticket/Display.html?id=125811

[10:19] <AlexDaniel> it does not work on jvm though

[10:19] <AlexDaniel> j: say 2 ** 2 ** 64

[10:19] <camelia> rakudo-jvm 40a953: OUTPUT«cannot connect to eval server: Connection refused␤»

[10:19] <AlexDaniel> well, that's not what I meant

[10:20] <psch> the fix doesn't work?

[10:20] <AlexDaniel> psch: yeah, it does not throw a proper exception as it does on moar

[10:20] <psch> yeah, 'cause the fix checks for 0, but r-j produces Inf :)

[10:20] <psch> $ ./perl6-j -e'say 2 ** 2 ** 64'

[10:20] <psch> Inf

[10:22] <AlexDaniel> hmm there's also this error message

[10:22] <AlexDaniel> “repeat count > 1073741824 arbitrarily unsupported..”

[10:22] <AlexDaniel> ah, that's for strings

[10:22] <psch> m: use nqp; say nqp::pow_n(2, nqp::pow_n(2, 64))

[10:22] <camelia> rakudo-moar 1acf80: OUTPUT«This type cannot unbox to a native number␤  in block <unit> at /tmp/YmNBughccP line 1␤␤»

[10:22] *** TEttinger left
[10:23] <psch> m: use nqp; say nqp::pow_n(2, 99999999999999999999999999999999999)

[10:23] <camelia> rakudo-moar 1acf80: OUTPUT«This type cannot unbox to a native number␤  in block <unit> at /tmp/KH3STvD5Td line 1␤␤»

[10:23] <AlexDaniel> m: my $x = ("a" x (2 ** 63)); say $x.chars

[10:23] <camelia> rakudo-moar 1acf80: OUTPUT«repeat count (-9223372036854775808) cannot be negative␤  in block <unit> at /tmp/DTJByw_7LC line 1␤␤»

[10:23] <psch> ah, pow_I...

[10:23] <psch> m: use nqp; say nqp::pow_I(2, 99999999999999999999999999999999999, Int, Int)

[10:23] <camelia> rakudo-moar 1acf80: OUTPUT«0␤»

[10:23] <psch> m: use nqp; say nqp::pow_I(2, 99999999999999999999999999999999999, Num, Int)

[10:23] <camelia> rakudo-moar 1acf80: OUTPUT«0␤»

[10:24] <psch> $ ./perl6-j -e'use nqp; say nqp::pow_I(2, 99999999999999999999999999999999999, Num, Int)'

[10:24] <psch> -Inf

[10:24] <psch> i do think pow_I should be better there, instead of trying to catch that in the HLL...

[10:24] *** maybekoo2 left
[10:25] <psch> otoh, how many digits would that even be?  ...and how many bytes?

[10:25] <psch> m: say so -Inf

[10:25] <camelia> rakudo-moar 1acf80: OUTPUT«True␤»

[10:26] <psch> that's what causes r-j not to throw the overflow, fwiw

[10:26] <psch> 'cause infix:<**> does < nqp::pow(...) or otherchecks() || fail overflow > 

[10:26] <psch> ...paraphrased

[10:27] <AlexDaniel> ok so at least I am going to report this

[10:27] <AlexDaniel> m: my $x = ("a" x (9999999999999999999))

[10:27] <camelia> rakudo-moar 1acf80: OUTPUT«repeat count (-8446744073709551617) cannot be negative␤  in block <unit> at /tmp/mmOv8ANGbM line 1␤␤»

[10:27] <psch> m: use nqp; say nqp::unbox_i(9999999999999999999)

[10:27] <camelia> rakudo-moar 1acf80: OUTPUT«-8446744073709551617␤»

[10:28] <AlexDaniel> or this!

[10:28] <psch> m: use nqp; say nqp::unbox_i(2 ** 64 - 1); 

[10:28] <camelia> rakudo-moar 1acf80: OUTPUT«-1␤»

[10:28] <psch> that's just native int semantics vOv

[10:30] *** loren joined
[10:31] <psch> m: use nqp; my $x = 2 ** 64 - 1; say $x; say nqp::p6box_i(nqp::unbox_i($x));

[10:31] <camelia> rakudo-moar 1acf80: OUTPUT«18446744073709551615␤-1␤»

[10:31] <psch> boxing is destructive... /o\

[10:38] <AlexDaniel> OK, that's what I got: RT #128035

[10:38] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128035

[10:38] *** _nadim joined
[10:39] <AlexDaniel> m: my $x = 42 xx (2 ** 62); say $x.elems

[10:39] <camelia> rakudo-moar 1acf80: OUTPUT«(signal SEGV)»

[10:39] <AlexDaniel> yeaaaah!

[10:39] <AlexDaniel> m: my $x = 42 xx (2 ** 62)

[10:39] <camelia> rakudo-moar 1acf80: OUTPUT«(signal SEGV)»

[10:40] <AlexDaniel> so it's not just 32-bit systems!

[10:40] *** rindolf joined
[10:45] <psch> hrm, quite a few phaser and CX related jvm tickets 

[10:45] <psch> i'm fairly sure those two things hang more or less on the same peg

[10:45] <AlexDaniel> CX?

[10:45] <psch> control exception

[10:45] <psch> m: { last; CONTROL { default { .perl.say } } }

[10:45] <camelia> rakudo-moar 1acf80: OUTPUT«CX::Last.new␤»

[10:46] <psch> m: class CX { }; { last; CONTROL { default { .perl.say } } } # ooh

[10:46] <camelia> rakudo-moar 1acf80: OUTPUT«CX::Last.new␤»

[10:46] <psch> aw, that doesn't clobber all over it :P

[10:46] <psch> did that get fixed for X:: as well and i didn't notice?

[10:47] <psch> m: class X { }; say 1 + "foo";

[10:47] <camelia> rakudo-moar 1acf80: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5foo' (indicated by ⏏)␤  in block <unit> at /tmp/X387dC3Woy line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/X387dC3Woy line 1␤␤»

[10:47] <AlexDaniel> psch: anyway, thanks for noticing that xx is broken on 64-bit too. I updated the ticket

[10:49] *** kid51 joined
[10:53] *** pierre_ joined
[10:55] <psch> oh boy, my first actual RT weirdness!

[10:55] <psch> i don't have Reply or Comment on #124628

[10:55] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124628

[10:55] *** pierre_ left
[10:57] *** pierre_ joined
[10:57] *** leont joined
[11:05] <AlexDaniel> psch: Actions/Reply ?

[11:06] <psch> AlexDaniel: ooh!  i never used them there, usually just on the top right of an existing comment...

[11:07] <AlexDaniel> yeah, but there is no discription and no comments :/

[11:07] <AlexDaniel> description*

[11:09] *** pRiVi joined
[11:11] *** leont left
[11:12] *** grondilu joined
[11:24] *** CIAvash left
[11:31] *** wamba left
[11:35] <psch> m: A: { }; last A # heh

[11:35] <camelia> rakudo-moar 1acf80: OUTPUT«control exception without handler␤  in block <unit> at /tmp/sImK7xYQJf line 1␤␤»

[11:35] <psch> m: last 

[11:35] <camelia> rakudo-moar 1acf80: OUTPUT«last without loop construct␤  in block <unit> at /tmp/9qFbYQ25QW line 1␤␤»

[11:39] <psch> well, that's a rather easy fix at least...

[11:44] *** Ven left
[11:47] *** pierre_ left
[11:59] *** gtodd1 joined
[12:00] *** richi238 joined
[12:00] *** masak_ joined
[12:01] *** [Coke]_ joined
[12:04] *** huf_ joined
[12:04] *** M-Illandan1 joined
[12:05] *** vike1 joined
[12:06] *** huf left
[12:06] *** aries_liuxueyang left
[12:06] *** richi235 left
[12:06] *** JimmyZ left
[12:06] *** vike left
[12:06] *** vytas left
[12:06] *** M-Illandan left
[12:06] *** masak left
[12:06] *** [Coke] left
[12:06] *** gtodd left
[12:06] *** chris2 left
[12:08] *** aries_liuxueyang joined
[12:09] *** loren left
[12:11] *** _mg_ joined
[12:12] *** JimmyZ joined
[12:12] *** vytas joined
[12:14] *** chris2 joined
[12:22] *** CIAvash joined
[12:29] *** itcharlie joined
[12:29] <itcharlie> seems like Im in the right place now :) 

[12:30] <itcharlie> Perl 6 module installations are not working in windows

[12:30] <itcharlie> First error without Git Shell: https://gist.github.com/itcharlie/cec33e5b470f19e215a7fbc9c9258e9a

[12:30] <itcharlie> Second error with Git Shell:  https://gist.github.com/itcharlie/b379b122620259fa3688d36b9a13f7e1

[12:31] <itcharlie> First error shows that it doesn't find Git command in path.

[12:31] <ugexe> no, you mean panda doesnt work on windows

[12:31] <itcharlie> ugexe: 

[12:31] <itcharlie> correct

[12:32] <itcharlie> probably due to the full path name not being Windows friendly

[12:33] <itcharlie> more specifically this error here:  Can't execute /c/Strawberry/perl/bin/prove.bat.

[12:33] <ugexe> maybe try zef

[12:33] <ZoffixWin> zef++

[12:34] <itcharlie> zef?

[12:34] <itcharlie> ah ok 

[12:34] <itcharlie> found it 

[12:34] *** _mg_ left
[12:34] *** loren joined
[12:35] <itcharlie> zef comes installed by default with Rakudo Star?

[12:36] <ZoffixWin> Doesn't look like it: https://github.com/tadzik/Task-Star/blob/master/META.info

[12:36] <ZoffixWin> itcharlie, https://github.com/ugexe/zef

[12:36] <itcharlie> Thanks ZoffixWin

[12:36] <itcharlie> ZoffixWin:  I enjoy your blog posts on Perl6 by the way

[12:36] <itcharlie> thank you

[12:36] <ZoffixWin> Thanks.

[12:37] <itcharlie> thank you ugexe I will try zef now

[12:41] *** colomon left
[12:43] *** AndyDee joined
[12:44] *** pierre_ joined
[12:45] *** hotel left
[12:45] *** hotel joined
[12:47] *** rurban joined
[12:47] *** llfourn joined
[12:48] *** colomon joined
[12:53] <moritz> hi all; what's that "Perl 6 in your browser" link that recently circulated?

[12:53] <psch> moritz: glot.io i think?

[12:54] <psch> apparently so: https://glot.io/new/perl6

[12:54] <moritz> psch: thanks!

[12:56] *** pierre_ left
[12:57] <grondilu> m: role A { method foo { "oops" } }; class :: does A { has $.foo }.new(:foo<var>).foo.say

[12:57] <camelia> rakudo-moar 1acf80: OUTPUT«oops␤»

[12:57] <grondilu> ^methods always prevail over attribute, even when they come from a mixin?

[12:57] *** rurban left
[12:58] <psch> m: class A { has $.foo; method foo { "oops" } }; A.foo # that's equivalent at runtime

[12:58] <camelia> rakudo-moar 1acf80: ( no output )

[12:59] <grondilu> m: role A { method foo { $!foo // "oops" } }; class :: does A { has $.foo }.new(:foo<var>).foo.say

[12:59] <camelia> rakudo-moar 1acf80: OUTPUT«5===SORRY!5=== Error while compiling /tmp/lKTYUuSU99␤Attribute $!foo not declared in role A␤at /tmp/lKTYUuSU99:1␤------> 3ole A { method foo { $!foo // "oops" } }7⏏5; class :: does A { has $.foo }.new(:foo␤    expecting any of:␤        …»

[12:59] *** loren left
[13:00] *** pierre_ joined
[13:00] <psch> m: role A { method foo { ::?CLASS.^attributes.grep(*.name eq '$!foo')[0].get_value(self) // "oops" } }; class :: does A { has $.foo }.new(:foo<bar>).foo.say

[13:00] <camelia> rakudo-moar 1acf80: OUTPUT«bar␤»

[13:01] <psch> not sure that's the cleanest method there...

[13:02] <grondilu> m: role A { method foo { "oops" } }; class :: does A { has $.foo; method foo { $!foo } }.new(:foo<var>).foo.say

[13:02] <camelia> rakudo-moar 1acf80: OUTPUT«var␤»

[13:02] <grondilu> I can do that I guess

[13:02] <psch> i think you can still reach A.foo somehow, but i always forget how exactly... :S

[13:02] <ZoffixWin> m: role A { method foo { self!foo // "oops" } }; class :: does A { has $.foo; method !foo { $!foo } }.new.foo.say

[13:02] <camelia> rakudo-moar 1acf80: OUTPUT«oops␤»

[13:03] <ZoffixWin> m: role A { method foo { self!foo // "oops" } }; class :: does A { has $.foo; method !foo { $!foo } }.new(:var<meow>).foo.say

[13:03] <camelia> rakudo-moar 1acf80: OUTPUT«oops␤»

[13:03] <ZoffixWin> m: role A { method foo { self!foo // "oops" } }; class :: does A { has $.foo; method !foo { $!foo } }.new(:foo<meow>).foo.say

[13:03] <camelia> rakudo-moar 1acf80: OUTPUT«meow␤»

[13:03] *** BenGoldberg joined
[13:05] <grondilu> ZoffixWin: that looks slightly cleaner indeed

[13:06] *** Emeric left
[13:06] *** Emeric joined
[13:07] *** colomon left
[13:15] *** colomon joined
[13:17] *** colomon left
[13:18] *** Ven joined
[13:20] *** colomon joined
[13:24] <AlexDaniel> m: $_ = Empty; say S/a/b/

[13:24] <camelia> rakudo-moar 1acf80: OUTPUT«Nil␤»

[13:25] <AlexDaniel> m: $_ = Empty; say .substr(5)

[13:25] <camelia> rakudo-moar 1acf80: OUTPUT«(HANDLED) Start argument to substr out of range. Is: 5, should be in 0..0; use *5 if you want to index relative to the end␤  in block <unit> at /tmp/Ua2Aieiyrs line 1␤␤»

[13:25] <AlexDaniel> What is “(HANDLED)”?

[13:26] <psch> m: $_ = Empty; $x = .substr(5); say "alive"

[13:26] <camelia> rakudo-moar 1acf80: OUTPUT«5===SORRY!5=== Error while compiling /tmp/MkaHV6_09_␤Variable '$x' is not declared␤at /tmp/MkaHV6_09_:1␤------> 3$_ = Empty; 7⏏5$x = .substr(5); say "alive"␤»

[13:26] <psch> m: $_ = Empty; my $x = .substr(5); say "alive"

[13:26] <camelia> rakudo-moar 1acf80: OUTPUT«alive␤»

[13:26] <psch> m: $_ = Empty; .substr(5); 

[13:26] <camelia> rakudo-moar 1acf80: ( no output )

[13:26] <psch> AlexDaniel: "don't complain when sunk or evaluated", pretty much

[13:26] <pmurias> It would be awesome if we could somehow reuse glot.io to have runnable synopsises for modules

[13:28] <AlexDaniel> I'm not sure why we can host camelia ourselves but would need some external dependency (that has unknown goals) to have runnable whatever

[13:28] <AlexDaniel> unless I am missing something

[13:29] <psch> scope of users is a concern i'd guess

[13:29] <llfourn> I think glot.io did the hard work of building a container spawning thing

[13:29] <psch> as in, i'm assuming glot.io can handle at least a few more that camelia could

[13:29] <psch> oh, yeah, security is probably another concern

[13:30] <llfourn> with glot.io you can IO I guessed but haven't tried

[13:30] <pmurias> it's a case of usefulness overiding security for camelia

[13:30] <pmurias> there used be a lot of ways to overide the sandbox for camelia in the past

[13:31] <pmurias> s/sandbox/restricted setting/

[13:31] <psch> 'use nqp' pretty much still clobbers all sense of security

[13:31] <llfourn> yeah I wouldn't trust restricted setting for security anyways

[13:31] <psch> but restricting that would be too detrimental for devs

[13:32] <AlexDaniel> pmurias: there are still many

[13:32] <llfourn> yeah writing to file works on glot.io just checked

[13:33] <AlexDaniel> if we're going to host glot.io thingy ourselves then I'm all for it, of course

[13:34] <llfourn> it seems to be open source :)

[13:34] <grondilu> m: role A { method f($ where * > 0) {...} }; class :: does A { method f($ where * > 0) {} }

[13:34] <camelia> rakudo-moar 1acf80: ( no output )

[13:34] <grondilu> m: role A { multi method f($ where * > 0) {...} }; class :: does A { multi method f($ where * > 0) {} }

[13:34] <camelia> rakudo-moar 1acf80: OUTPUT«5===SORRY!5=== Error while compiling /tmp/0cR5LXBhQ_␤Multi method 'f' with signature :(<anon|84841888> $: $ where { ... }, *%_) must be implemented by <anon|84841888> because it is required by a role␤at /tmp/0cR5LXBhQ_:1␤»

[13:34] <grondilu> m: role A { multi method f($) {...} }; class :: does A { multi method f($) {} }

[13:34] <camelia> rakudo-moar 1acf80: ( no output )

[13:35] <grondilu> ^something's wrong here

[13:36] <jnthn> grondilu: where constraints are never considered equivalent (because the usual slipperly slope on those things), so you can't use them as a thing to satisfy in a role requirement.

[13:37] <grondilu> ok, previously I was using a subset but I thought I was overdoing it.  Apparently I really need them, then.

[13:37] <jnthn> So, behaving as designed, though a warning (or error) may be in order if you do use an unsatisfiable signature in a stub in a role.

[13:37] * llfourn wonders if it would work if they both refered to the same subset type...

[13:37] <jnthn> llfourn: I think thay may cut it, yes

[13:37] <llfourn>  role A { multi method f($ where * > 0) {...} }; class :: does A { multi method f($ where * > 

[13:37] <llfourn> woops nvm that

[13:38] *** zwu joined
[13:38] <llfourn> m: role A { multi method f(UInt) { ... } }; class :: does A { multi method f(UInt) { }} # works

[13:38] <camelia> rakudo-moar 1acf80: ( no output )

[13:39] *** RabidGravy joined
[13:41] <AlexDaniel> hmmm

[13:42] <AlexDaniel> m: say so ().all

[13:42] <camelia> rakudo-moar 1acf80: OUTPUT«True␤»

[13:42] <AlexDaniel> m: say so ().any

[13:42] <camelia> rakudo-moar 1acf80: OUTPUT«False␤»

[13:42] <AlexDaniel> m: say so ().none

[13:42] <camelia> rakudo-moar 1acf80: OUTPUT«True␤»

[13:42] <BenGoldberg> m: Slip.all.say, Slip.any.say, Slip.none.say;

[13:42] <camelia> rakudo-moar 1acf80: OUTPUT«all((Slip))␤any((Slip))␤none((Slip))␤»

[13:42] <AlexDaniel> m: say so ().one

[13:42] <camelia> rakudo-moar 1acf80: OUTPUT«False␤»

[13:43] <BenGoldberg> m: Slip.all.so.say, Slip.any.so.say, Slip.none.so.say, Slip.none.so.say;

[13:43] <camelia> rakudo-moar 1acf80: OUTPUT«False␤False␤True␤True␤»

[13:43] <jnthn> m: say [||](); say [&&](); # also :)

[13:43] <camelia> rakudo-moar 1acf80: OUTPUT«False␤True␤»

[13:44] <BenGoldberg> m: say [+^]();

[13:44] <camelia> rakudo-moar 1acf80: OUTPUT«0␤»

[13:44] <BenGoldberg> m: say [+|](), [+&]();

[13:44] <camelia> rakudo-moar 1acf80: OUTPUT«0-1␤»

[13:44] *** masak_ is now known as masak

[13:46] *** Ben_Goldberg joined
[13:46] * Ben_Goldberg can forsee that -1 being used for obfuscated code.

[13:46] *** BenGoldberg left
[13:46] *** Ben_Goldberg is now known as BenGoldberg

[13:48] <AlexDaniel> m: say [==]()

[13:48] <camelia> rakudo-moar 1acf80: OUTPUT«True␤»

[13:49] *** pmurias left
[13:49] <AlexDaniel> m: say [X]()

[13:49] <camelia> rakudo-moar 1acf80: OUTPUT«(((Any)))␤»

[13:50] *** pmurias joined
[13:51] <psch> m: say [&&] Empty

[13:51] <camelia> rakudo-moar 1acf80: OUTPUT«True␤»

[13:52] <psch> right, Empty is just a special Slip, isn't it

[13:52] <psch> m: say Empty ~~ Slip; say defined Empty

[13:52] <camelia> rakudo-moar 1acf80: OUTPUT«True␤False␤»

[13:52] <llfourn> m: say Empty eqv |()

[13:52] <camelia> rakudo-moar 1acf80: OUTPUT«True␤»

[13:54] <ZoffixWin> Does anyone know where (and if) all the file tests are documented? like IO.e, IO.f, etc

[13:57] <AlexDaniel> ZoffixWin: https://github.com/perl6/roast/blob/master/S32-io/file-tests.t ?

[13:57] <ZoffixWin> :S

[13:57] <AlexDaniel> yea :S

[13:58] <AlexDaniel> ah

[13:58] <AlexDaniel> “documented”

[13:58] <AlexDaniel> I've read it as “tested”

[13:58] <ZoffixWin> All that tells me is our IO spectest is incomplete. I see .rwx and .z and whole bunch of other things in https://github.com/rakudo/rakudo/blob/nom/src/core/IO/Path.pm

[13:59] <dogbert2> http://doc.perl6.org/type/IO::Path#File_Test_operators

[13:59] <ZoffixWin> dogbert2++ thanks

[13:59] <AlexDaniel> some are also mentioned here: http://doc.perl6.org/language/io#Checking_files_and_directories

[14:00] <AlexDaniel> perhaps /io should also have a link to /IO::Path#File_Test_operators

[14:00] <BenGoldberg> One would hope for all of those docs to have links to one another.

[14:03] <dalek> doc: 9e2eac3 | (Mathieu Gagnon)++ | doc/Type/Bag.pod:

[14:03] <dalek> doc: Fix broken link in type/Bag

[14:03] <dalek> doc: review: https://github.com/perl6/doc/commit/9e2eac3e7a

[14:06] <ZoffixWin> There are some artifacts of copypasta in exception messages. PR to fix: https://github.com/rakudo/rakudo/pull/761

[14:07] <ZoffixWin> It was an edit on GitHub; I didn't run spectests.

[14:08] <AlexDaniel> ZoffixWin++

[14:15] *** tharkun_ left
[14:16] <dalek> doc: 7b5fc80 | (Zoffix Znet)++ | doc/Type/IO/Path.pod:

[14:16] <dalek> doc: Document .rw and .rwx file tetss

[14:16] <dalek> doc: review: https://github.com/perl6/doc/commit/7b5fc80281

[14:16] *** _mg_ joined
[14:16] *** tharkun joined
[14:20] *** cale2 joined
[14:23] *** khw joined
[14:24] <ZoffixWin> Would be nice to have .fr

[14:25] *** mohae joined
[14:26] *** rurban joined
[14:28] *** pierre_ left
[14:28] *** domidumont joined
[14:28] <ZoffixWin> m: say "works" if .r and .f given 'evalbot/TODO'.IO;

[14:28] <camelia> rakudo-moar 1acf80: OUTPUT«works␤»

[14:28] <ZoffixWin> Never mind :)

[14:30] *** wamba joined
[14:31] *** cale2 left
[14:32] *** domidumont left
[14:33] *** domidumont joined
[14:34] *** skids joined
[14:35] *** brrt joined
[14:38] *** Ven left
[14:41] *** zwu left
[14:50] *** skids left
[14:50] <AlexDaniel> m: say "works" if .r&.f given 'evalbot/TODO'.IO;

[14:50] <camelia> rakudo-moar 1acf80: OUTPUT«works␤»

[14:50] <AlexDaniel> ZoffixWin: perhaps that will work too?

[14:56] <TimToady> m: ''.substr(5).handled.say

[14:56] <camelia> rakudo-moar 1acf80: OUTPUT«True␤»

[14:56] <TimToady> that's one bug

[14:56] <TimToady> m: ''.substr(5).say

[14:56] <camelia> rakudo-moar 1acf80: OUTPUT«(HANDLED) Start argument to substr out of range. Is: 5, should be in 0..0; use *5 if you want to index relative to the end␤  in block <unit> at /tmp/15O6RJvQjC line 1␤␤»

[14:56] <TimToady> the *5 is another bug

[14:57] <AlexDaniel> m: say "works" if 'evalbot/TODO'.IO ~~ :f:r;

[14:57] <camelia> rakudo-moar 1acf80: OUTPUT«5===SORRY!5=== Error while compiling /tmp/1LzvJmz4S3␤You can't adverb ␤at /tmp/1LzvJmz4S3:1␤------> 3say "works" if 'evalbot/TODO'.IO ~~ :f:r7⏏5;␤    expecting any of:␤        pair value␤»

[14:57] <AlexDaniel> can't adverb what?

[14:57] * masak submits rakudobug

[14:58] <masak> TimToady: that first one -- what output did you expect?

[14:58] <TimToady> False

[14:59] <masak> danke

[14:59] <TimToady> something is testing the Failure for boolean/defined somewhere and marking it handled

[14:59] <TimToady> when it should be returned unhandled

[14:59] <BenGoldberg> m: say '.'.IO ~~ :d;

[14:59] <camelia> rakudo-moar 1acf80: OUTPUT«True␤»

[14:59] <ZoffixWin> m: say "works" if 'evalbot/TODO'.IO ~~ :f & :r;

[14:59] <camelia> rakudo-moar 1acf80: OUTPUT«works␤»

[15:01] <masak> m: "a".substr(7)

[15:01] <camelia> rakudo-moar 1acf80: ( no output )

[15:01] <masak> m: say "a".substr(7)

[15:01] <camelia> rakudo-moar 1acf80: OUTPUT«(HANDLED) Start argument to substr out of range. Is: 7, should be in 0..1; use *7 if you want to index relative to the end␤  in block <unit> at /tmp/uMfJBXCIvx line 1␤␤»

[15:01] <AlexDaniel> m: say "works" if ‘perl6testya’.IO ~~ (:f:r) # ha, whoops

[15:01] <camelia> rakudo-moar 1acf80: ( no output )

[15:01] *** Roamer` joined
[15:02] <masak> #128038 #123039

[15:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128038

[15:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=123039

[15:03] <masak> m: say "works" if "README".IO ~~ :f:r

[15:03] <camelia> rakudo-moar 1acf80: OUTPUT«5===SORRY!5=== Error while compiling /tmp/KLoVH5FhmZ␤You can't adverb ␤at /tmp/KLoVH5FhmZ:1␤------> 3say "works" if "README".IO ~~ :f:r7⏏5<EOL>␤    expecting any of:␤        pair value␤»

[15:03] <masak> m: say "works" if "README".IO ~~ (:f:r)

[15:03] <camelia> rakudo-moar 1acf80: ( no output )

[15:03] <AlexDaniel> xD

[15:05] *** brrt left
[15:05] <ZoffixWin> Where is that substr() coming from? It's not an nqp:: and I see no `use` statements: https://github.com/rakudo/rakudo/blob/nom/src/core/Cool.pm#L77

[15:07] *** sufrostico joined
[15:09] <timotimo> subs don't have to be defined before they show up in the source code

[15:09] <timotimo> it's in src/Core/Str.pm

[15:09] <timotimo> lines 2025 and following

[15:11] <ZoffixWin> m: class Foo { method moo { bar } }; class Bar is Foo { sub bar { say 'woo' };  }; Foo.new.moo

[15:11] <camelia> rakudo-moar b939c4: OUTPUT«5===SORRY!5=== Error while compiling /tmp/syJNwJOOon␤Undeclared routine:␤    bar used at line 1. Did you mean 'VAR', 'bag'?␤␤»

[15:14] <timotimo> class inheritance won't give you package contents

[15:15] <ZoffixWin> But how does Cool get "package contents" of Str?

[15:16] <jnthn> ZoffixWin: The piece you're maybe missing is that everything in src/core is concatenated into a single file

[15:16] <ZoffixWin> Ahhh. OK

[15:16] <jnthn> (Called CORE.setting)

[15:16] <jnthn> And compiled together

[15:16] <jnthn> So it can be a single outer scope for the program.

[15:17] * jnthn blogged about his Perl 6 work over the last two weeks: https://6guts.wordpress.com/2016/04/30/refactoring-and-torture/

[15:17] <ZoffixWin> \o/

[15:18] *** mscha joined
[15:19] <mscha> p6: my @arr = (0 xx 4) xx (0 xx 4); say @arr; say @arr[1][2]; @arr[1][2] = 1;

[15:19] <camelia> rakudo-moar b939c4: OUTPUT«[(0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)]␤0␤Cannot modify an immutable Int␤  in block <unit> at /tmp/tmpfile line 1␤␤»

[15:19] <mscha> What am I doing wrong?

[15:20] <jnthn> Creating an array of lists (immutable) rather than an array of arrays

[15:21] <mscha> And how do I fix this?

[15:21] <jnthn> p6: my @arr = [0 xx 4] xx (0 xx 4); say @arr; say @arr[1][2]; @arr[1][2] = 1;

[15:21] <camelia> rakudo-moar b939c4: OUTPUT«[[0 0 0 0] [0 0 0 0] [0 0 0 0] [0 0 0 0]]␤0␤»

[15:21] <jnthn> But..why not just [0 xx 4] xx 4 ? :)

[15:21] <ZoffixWin> "The NQP and Rakudo builds easily take an hour between them, and running spectest this way takes over 12 hours." holy hell... and I thought regular builds were slow :P

[15:22] <jnthn> The RHS of xx is coerced to an integer

[15:22] <jnthn> ZoffixWin: :)

[15:22] <jnthn> ZoffixWin: The speed of regular builds is certainly up for improvement too :)

[15:22] <ZoffixWin> :)

[15:23] <mscha> p6: 'my @arr = [0 xx 4] xx 4; say @arr; say @arr[1][2]; @arr[1][2] = 1; say @arr

[15:23] <camelia> rakudo-moar b939c4: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tmpfile␤Unable to parse expression in single quotes; couldn't find final "'" ␤at /tmp/tmpfile:1␤------> 3say @arr[1][2]; @arr[1][2] = 1; say @arr7⏏5<EOL>␤    expecting any of:␤        single quo…»

[15:23] <mscha> p6: my @arr = [0 xx 4] xx 4; say @arr; say @arr[1][2]; @arr[1][2] = 1; say @arr

[15:23] <camelia> rakudo-moar b939c4: OUTPUT«[[0 0 0 0] [0 0 0 0] [0 0 0 0] [0 0 0 0]]␤0␤[[0 0 0 0] [0 0 1 0] [0 0 0 0] [0 0 0 0]]␤»

[15:23] <mscha> Thanks/

[15:30] <lizmat> perlpilot: re http://irclog.perlgeek.de/perl6/2016-04-28#i_12406261 short story: it was deprecated, and deprecations were to be removed before Xmas

[15:31] <lizmat> perlpilot: long story: IO::Handle.ins created an overhead that was only necessary in some use cases

[15:31] * grondilu suddenly suspects JIT is the reason rakudo on VirtualBox is so much faster than on a Raspberry Pi.  There is no JIT available on the Pi.

[15:32] <lizmat> perlpilot: this made sense in Perl 5, but in Perl 6 we have .kv and -> $k, $v, so line counting can be done very easily in another way

[15:33] <lizmat> perlpilot ZoffixWin re http://irclog.perlgeek.de/perl6/2016-04-29#i_12412332 , I still think IO::Spec should die

[15:34] <ZoffixWin> die how? :)

[15:34] <ZoffixWin> The $*SPEC thing is kinda awkward to use

[15:34] <lizmat> I still think that all OS's that we support with rakudo, support simple forward slashes

[15:35] <ZoffixWin> Ah

[15:35] <lizmat> they may supply backslashes, but they accept just simple slashes

[15:35] <lizmat> so all of the $*SPEC business is just a gigantic overhead

[15:35] <lizmat> I don't think we'll ever see rakudo run on VMS

[15:35] <lizmat> and if it would, I'm pretty sure VMS would simply support / as well

[15:36] <lizmat> that was part of the work I did in the newio branch

[15:36] <lizmat> which didn't make it

[15:37] *** mithaldu_ joined
[15:53] *** eyck joined
[15:53] <lizmat> m: (substr "",5).handled.say

[15:53] <camelia> rakudo-moar d7698f: OUTPUT«False␤»

[15:53] <lizmat> m: "".substr(5).handled.say

[15:53] <camelia> rakudo-moar d7698f: OUTPUT«True␤»

[15:55] *** sufrostico left
[15:56] *** sufrostico joined
[16:04] *** jamesneko joined
[16:07] *** jamesnek1 left
[16:13] *** pmurias left
[16:16] *** Sgeo_ joined
[16:18] *** dwarring left
[16:19] *** Sgeo left
[16:22] *** n0xff joined
[16:29] *** n0xff left
[16:29] *** n0xff joined
[16:32] *** sufrosti1o joined
[16:32] *** sufrostico left
[16:32] *** geekosaur left
[16:33] *** geekosaur joined
[16:33] *** geekosaur left
[16:35] *** geekosaur joined
[16:39] *** rurban1 joined
[16:39] *** skink joined
[16:40] <skink> .seen soundart

[16:40] <yoleaux> I haven't seen soundart around.

[16:43] *** Khisanth joined
[16:43] *** rurban left
[16:45] *** rurban1 left
[16:49] <BenGoldberg> m: say "".^can('handled')

[16:49] <camelia> rakudo-moar d7698f: OUTPUT«()␤»

[16:52] <BenGoldberg> m: say Failure.^can('handled')

[16:52] <camelia> rakudo-moar d7698f: OUTPUT«(handled)␤»

[16:55] *** pmurias joined
[17:00] *** rurban joined
[17:03] *** rurban2 joined
[17:06] *** rurban1 joined
[17:06] *** rurban left
[17:09] *** rurban2 left
[17:12] *** sue joined
[17:20] <dalek> ecosystem: b33259c | (Zoffix Znet)++ | META.list:

[17:20] <dalek> ecosystem: Add Bailador::Plugin::AssetPack::SASS

[17:20] <dalek> ecosystem: 

[17:20] <dalek> ecosystem: Automatically preprocess and serve SASS files in Bailador apps: https://github.com/zoffixznet/perl6-Bailador-Plugin-AssetPack-SASS

[17:20] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/b33259c3fd

[17:21] *** sue left
[17:23] *** Ven joined
[17:30] *** hotel_california joined
[17:31] *** hotel left
[17:36] *** itcharlie left
[17:36] *** mscha left
[18:07] *** Herby_ joined
[18:07] <Herby_> \o #perl6

[18:16] *** brrt joined
[18:20] *** dalek left
[18:21] *** dalek joined
[18:21] *** ChanServ sets mode: +v dalek

[18:21] <brrt> masak: excellent blog, fwiw :-)

[18:22] *** grondilu left
[18:23] *** grondilu joined
[18:28] *** brrt left
[18:28] *** rurban1 left
[18:33] *** dwarring joined
[18:36] *** yqt joined
[18:37] *** hotel joined
[18:37] *** sue joined
[18:38] *** hotel_california left
[18:47] *** dolmen joined
[18:54] *** Herby_ left
[18:57] <dalek> perl6.org: 32b09e7 | (Steve Mynott)++ | source/downloads/index.html:

[18:57] <dalek> perl6.org: add some errata for Star.  Windows nativecall and panda issues.  Recommend upgrading DBIish

[18:57] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/32b09e715e

[18:58] <ZoffixWin> Is zef also broken? Maybe it should be mentioned as an alternative

[19:00] *** dolmen left
[19:01] <stmuk_> scrollback suggests zef works I'll add that as a suggestion

[19:02] <ZoffixWin> Is there a way to use some sort of base template with Bailador and then just include smaller templates in it for each page? Like the layouts in Mojolicious

[19:06] * ZoffixWin looks at code

[19:06] <ZoffixWin> Nope

[19:06] <dalek> perl6.org: eedaf87 | (Steve Mynott)++ | source/downloads/index.html:

[19:06] <dalek> perl6.org: suggest use of zef on windows

[19:06] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/eedaf87fd8

[19:07] <ZoffixWin> stmuk_++

[19:17] *** sufrosti1o left
[19:18] *** Ven left
[19:21] *** domidumont left
[19:22] *** rindolf left
[19:26] *** buharin joined
[19:26] <buharin> hi

[19:26] <buharin> :)

[19:26] <buharin> I want to ask you about opinion

[19:28] *** Ven joined
[19:29] <ZoffixWin> *About* opinion? Well... opinions are like buttholes.. Everyone has them and each of them stinks :)

[19:30] <ZoffixWin> buharin, so what was the question?

[19:31] <buharin> what do you think about qt/qml?

[19:31] <buharin> when whole world moving to qt

[19:31] <ZoffixWin> Alien land to me. I'm a web person.

[19:32] <buharin> qt will go to web

[19:32] <buharin> also

[19:32] <stmuk_> perl people tend to be server-side and use desktop graphics libraries lightly

[19:33] *** n0xff left
[19:33] <stmuk_> so I doubt anyone has used it much

[19:34] <ZoffixWin> buharin, "Enjoy the first 30 days for free!" Am I looking at the wrong place? https://www.qt.io/

[19:34] <ZoffixWin> 'cause I highly doubt "whole world" is moving to a paid product

[19:34] <buharin> :D

[19:35] <stmuk_> ZoffixWin: you need to watch the webinar first :P

[19:35] <ZoffixWin> heh

[19:36] <buharin> but

[19:36] <buharin> qt apps are completely free if open source

[19:37] <ZoffixWin> Yeah, let me ask my boss how he feels about releasing to the public all of the code they pay me thousands of dollars to write :P

[19:38] *** _mg_ left
[19:39] <buharin> :)

[19:41] <moritz> fwiw at $work, the default for general-purpose libraries is to realease them as open source

[19:41] <moritz> sadly, most of my work is business specific

[19:42] <moritz> but for example the perl 5 modules Text::PageLayout and Text::BlockLayout were written for formatting invoices :-)

[19:43] <ZoffixWin> Mojo::PDF was written for auto-generating clearance flyers :)

[19:43] <buharin> last time one guy asked me about Perl5 job but sadly I didn't know Perl 5 :(

[19:43] <buharin> I focus on C/C++

[19:45] <mst> ZoffixWin: I'm sure he'd be xtatik about it

[19:46] *** CIAvash left
[19:47] *** sortiz joined
[19:47] <ZoffixWin> Heh, well, yeah, there's also xtatik.org but I now I kinda wish I could make it in Perl 6 :)

[19:47] *** abraxxa joined
[19:50] *** abraxxa left
[19:51] <mst> that will be doable eventually, I'm sure

[19:51] *** itcharlie joined
[19:54] <sortiz> \o #perl6

[19:55] <ZoffixWin> \o

[19:55] *** Ven left
[20:15] *** darutoko left
[20:20] *** BenGoldberg left
[20:21] *** BenGoldberg joined
[20:25] *** mspo joined
[20:55] <pmurias> buharin: how does qt work on the web?

[20:56] <buharin> I am going to sleep

[20:56] <buharin> sorry

[20:56] *** buharin left
[20:59] *** BenGoldberg left
[21:00] *** tbrowder joined
[21:00] *** BenGoldberg joined
[21:01] *** TEttinger joined
[21:01] *** kaare_ left
[21:02] *** BenGoldberg left
[21:03] <tbrowder> AlexDaniel: I have a pull request being tested now which should improve the Dynamic variables table here: https://doc.perl6.org/language/variables#Dynamic_variables; take a look at it now if you can and I'll hold off merging it until you approve; I have tested it locally and I think you will like the results.

[21:04] *** BenGoldberg joined
[21:04] <dalek> doc: 3105e84 | (Tom Browder)++ | doc/Language/variables.pod:

[21:04] <dalek> doc: improve table looks

[21:04] <dalek> doc: review: https://github.com/perl6/doc/commit/3105e84e55

[21:04] <dalek> doc: 05bb136 | RabidGravy++ | doc/Language/variables.pod:

[21:04] <dalek> doc: Merge pull request #478 from tbrowder/master

[21:04] <dalek> doc: 

[21:04] <dalek> doc: improve table looks

[21:04] <dalek> doc: review: https://github.com/perl6/doc/commit/05bb13602b

[21:05] *** ZoffixLappy joined
[21:07] *** rurban joined
[21:08] <ZoffixLappy> ugexe++ I'm really loving zef

[21:09] *** n0xff joined
[21:09] *** mohae left
[21:11] *** khw left
[21:12] *** mohae joined
[21:14] *** zakharyas joined
[21:21] *** travis-ci joined
[21:21] <travis-ci> Doc build failed. Jonathan Stowe 'Merge pull request #478 from tbrowder/master

[21:21] <travis-ci> https://travis-ci.org/perl6/doc/builds/126937106 https://github.com/perl6/doc/compare/7b5fc80281df...05bb13602b1e

[21:21] *** travis-ci left
[21:23] <AlexDaniel> tbrowder: I don't think that you should ask anyone when doing such minor changes :)

[21:25] <AlexDaniel> travis did not like it but it does not look like it is related

[21:25] <ZoffixLappy> Yeah, looks like something completely different 

[21:27] <AlexDaniel> “double free or corruption”

[21:27] <hotel> wow, I never knew how much nicer-looking travis was than jenkins

[21:38] *** rurban left
[21:40] <sortiz> Latest nom 'make spectest' : t/spec/S17-promise/start.t .................................... Dubious, test returned 17 (wstat 4352, 0x1100) # Still running...

[21:41] <sortiz> plus some "Missing test file" in t/spec/S06-* and t/spec/S32-*

[21:43] *** khw joined
[21:44] <tbrowder> AlexDaniel: well, better safe than sorry...you may change yr mind on my next pull req...

[21:46] <ZoffixLappy> tbrowder, don't worry revert feature works :)

[21:46] <ZoffixLappy> tbrowder++ # all the doc PRs \o/

[21:47] <AlexDaniel> tbrowder: yeah, no need to ask for permission. Just ask for forgiveness if something goes wrong ;)

[21:50] <AlexDaniel> also, some people are reviewing every commit anyway, so if there's something not ok it wont be unnoticed

[21:51] <timotimo> and there's also travis-ci and appveyor that catch things that asplode on platforms and configurations you can't test directly

[21:57] *** sue left
[21:57] <sortiz> FWIW: Latest nom spectest results: https://gist.github.com/salortiz/cc6ec8148a65dc64305791d6a2ef1201

[21:59] <timotimo> mhm mhm

[22:00] <timotimo> well, jnthn found and fixed something in his frame overhaul branch, which may be put into master separately

[22:04] <ZoffixLappy> lovely :/ "===SORRY!=== P6M Merging GLOBAL symbols failed: duplicate definition of symbol NoRouteFound"

[22:04] <tadzik> may have involved nuking my entire env multiple times

[22:05] <tadzik> ooh, I know

[22:05] <tadzik> check your META6.json for copy-pastos

[22:05] <ZoffixLappy> Me?

[22:05] * skink wonders what mischief you could do with unlink($*PROGRAM)

[22:06] <sortiz> ZoffixLappy, some of these can be cured with s/module/package/

[22:07] <ZoffixLappy> I think I know why. I have multiple modules using Bailador and I also attempted to use a local copy, thus the conflict

[22:08] <ZoffixLappy> .seen ufobat

[22:08] <yoleaux> I saw ufobat 07:59Z in #perl6: <ufobat> now i am afraid that my PR on HTTP::Server::Tiny will not get merged into it ;) thank you RabidGravy

[22:08] <ZoffixLappy> .seen ZoffixLappy 

[22:08] <yoleaux> You're right there.

[22:08] <sortiz> :P

[22:08] <ZoffixLappy> yoleaux, you could still tell me, yo. I need to know the time in Z :)

[22:09] <ZoffixLappy> .seen sortiz

[22:09] <yoleaux> I saw sortiz 22:08Z in #perl6: <sortiz> :P

[22:09] <ZoffixLappy> aha :)

[22:09] <RabidGravy> it's 22:09Z :)

[22:10] <sortiz> 17:09CDT :)

[22:12] <hotel> zulu?

[22:13] <hotel> isn't that just america-speak for utc?

[22:14] <ZoffixLappy> Zulu is the "word of choice" to use for Z when spelling out letters

[22:14] <hotel> when referring to time I mean

[22:15] <hotel> s/word of choice/what NATO uses in their phonetic alphabet/

[22:15] <ZoffixLappy> ah

[22:15] <hotel> :)

[22:17] *** sue joined
[22:19] <skink> Zulu time is UTC yeah

[22:20] <hotel> :+1:

[22:21] *** sue left
[22:25] *** Emeric left
[22:25] <stmuk_>  

[22:25] <timotimo>   

[22:26] *** pmurias left
[22:26] <ZoffixLappy>          ?                     !

[22:30] <dalek> perl6.org: 59e441f | (Steve Mynott)++ | source/downloads/index.html:

[22:30] <dalek> perl6.org: sortiz++ DBIish update don't require --force, the version was changed

[22:30] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/59e441f41a

[22:30] <geekosaur> not even america-speak precisely. US Armed Forces-speak

[22:31] <geekosaur> http://www.worldtimezone.com/index24.html the single-letter zone designations are in the bottom ribbon of the map

[22:32] <ZoffixLappy> zef --force --/tests install .    # doesn't seem to work

[22:33] <TEttinger> Llueve, Djembe, Xhosa

[22:33] <geekosaur> (using the IPA words instead of letters)

[22:33] <ZoffixLappy> Gives me usage :/ without --force --/tests fails with some sort of error :/

[22:34] <TEttinger> I don't even know how Xhosa is pronounced, opening X is diverse enough in sounds without an h modifying it...

[22:35] <hotel> I assume it's like a 'sh' or a 'phlegm'

[22:35] <arnsholt> /k/ according to Wikipedia

[22:36] <hotel> I sit corrected

[22:36] <TEttinger> Llueve, Djembe, Xhosa, Phlegm

[22:36] <hotel> ^^

[22:36] <stmuk_> BTW has anyone noticed Bailador test fails on OS X?

[22:36] <TEttinger> so like the others it would be a very misleading letter for an acronym

[22:37] <hotel> last time I built rakudo (2016.04) and ran tests most of them were dubious

[22:38] <hotel> not on mac but since we're talking about tests...

[22:38] <ZoffixLappy> Dammit: https://gist.github.com/zoffixznet/eb304e46fababd8fc2708a5550c689d4

[22:38] <stmuk_> it passed on linux but I saw "body must be a Supply

[22:39] <stmuk_> on OS X .. I've suspected  threading issues there for a while

[22:39] <hotel> is it bad that I'm turning in a paper about procrastination like three weeks late?

[22:40] <stmuk_> will investigate more tomorrow

[22:40] <ZoffixLappy> wtf... looks like it was trying to install my local version :S from that dir.... Moving to another dir changed behaviour

[22:41] <skink> RabidGravy, Seems like at least one other module re-implements OAuth like in WebService::Soundcloud

[22:41] <ugexe> ZoffixLappy: if the version is the same still it will use a cached copy

[22:41] <ugexe> (can be disabled in config.json or with --/cached)

[22:41] <skink> Might be worth having an OAuth module?

[22:41] <ZoffixLappy> ugexe, home come zef --force --/tests install FooBar gives me the usage message?

[22:42] <ZoffixLappy> well, add --debug... I have zef aliased to zef --debug

[22:42] <ugexe> --/test

[22:42] <sortiz> ZoffixLappy, And beware that Bailador in unvesionized: https://github.com/ufobat/Bailador/blob/master/META.info#L3

[22:42] <RabidGravy> skink, yes just there wan't when I made that :) I'd like to make pluggable auth for http::useragent at some point

[22:42] <ZoffixLappy> ugexe, seems like USAGE needs an update: "FLAGS      --/tests                Skip the testing phase"

[22:43] <ugexe> ZoffixLappy: ah good eye

[22:44] *** grondilu left
[22:45] <ugexe> maybe i should use :tests(:$test) in the signature

[22:45] <ZoffixLappy> :S still failing install all of a sudden :/ https://gist.github.com/zoffixznet/85fc90c802870dd1dc0cd35d472ba8fb

[22:46] *** grondilu joined
[22:47] <ZoffixLappy> :/ so much for my going to the bar to hack on stuff :\

[22:48] *** firstdayonthejob left
[22:50] <ugexe> hmm, that might be CUR.install itself

[22:50] <ZoffixLappy> panda fails too: https://gist.github.com/zoffixznet/dbe6d40e8e88cdfd467f08a997916619

[22:50] <ugexe> ill see if i can get some more details

[22:50] * ZoffixLappy suspects some recent change to one of the modules very recently

[22:51] *** RabidGravy left
[22:52] <ugexe> since its pointing to ends-with for panda and zef, i wonder if its this: https://github.com/rakudo/rakudo/blob/10378163b007267f80e488477d9b6bd305104880/src/core/CompUnit/Repository/FileSystem.pm#L100

[22:54] <ZoffixLappy> rm -fr .perl6/precomp/; solved the issue

[22:54] <ugexe> hmmm, you had precomp issues yesterday too right? something about Bailador seems to mess with CUR invalidation of precomps

[22:55] * ZoffixLappy doesn't remember

[22:56] <ZoffixLappy> Ah, that was on installing of zef with rakudobrew build zef; and I think rakudobrew rehash fixes that

[22:57] <ugexe> oh. someone else had to delete .perl6/precomp yesterday for a problem then

[22:57] <ZoffixLappy> This time, it might have been due to my (a) trying to `use` Bailador from a local dir, while some other modules were using it from installation, causing symbol merge (b) trying to install Bailador from that local dir using zef install .

[22:57] <ZoffixLappy> I did delete .perl6/precomp yesterday to solve zef issue on my main box, but I found the rehash was enough on my lappy

[22:58] <ugexe> i would bet its on Bailador using sigless 'app' to call methods on, when its declared with 'my $app;'

[22:58] *** BenGoldberg left
[22:58] <grondilu> I also have problems installing my module.  http://paste.debian.net/451974/  Currently trying again after having removed .perl6/precomp

[22:59] <grondilu> nope, failed again same way

[22:59] *** BenGoldberg joined
[23:01] <grondilu> what's weird and annoying is that there isn't even an error message.

[23:01] <ZoffixLappy> sigilles app is a sub: https://github.com/ufobat/Bailador/blob/master/lib/Bailador.pm#L10

[23:03] <ugexe> grondilu: first you should declare all your provides in your META6.json

[23:04] <grondilu> all compunits?

[23:04] <ZoffixLappy> all files, yeah

[23:05] <ugexe> you are missing 3 in the deepest subfolder

[23:05] <grondilu> ok

[23:05] <ZoffixLappy> You have 6 files, but just 3 in META

[23:05] <ZoffixLappy> grondilu, also "author" key is not specced. It's authors that takes an Array

[23:05] <ZoffixLappy> and `perl` key is mandatory. perl: "6.c"

[23:05] <ugexe> s/author/owner/

[23:06] <ZoffixLappy> owners?

[23:06] <ugexe> https://design.perl6.org/S22.html#owner

[23:07] <ugexe> what you would typically use as the user portion of the auth

[23:07] <ugexe> origin:owner

[23:09] * grondilu learns about https://github.com/jonathanstowe/Test-META/

[23:09] <ZoffixLappy> But is that a key of META6.json? I only see this listed: https://design.perl6.org/S22.html#authors

[23:11] <ugexe> well, it doesnt list auth/authority either

[23:15] <TimToady> actually, 'Xhosa' begins with a lateral click

[23:16] <TimToady> (the one you sometimes hear when people are making horses go :)

[23:17] <ugexe> grondilu: yours is failing precomp too (likely because of the missing `provides`) from gen/moar/m-CORE.setting:35905  (/home/nickl/.rakudobrew/moar-2016.04/install/share/perl6/runtime/CORE.setting.moarvm:precompile)

[23:18] <ZoffixLappy> Because those aren't keys: https://design.perl6.org/S22.html#recommendation_manager  My interpretation of it is "cpan:" and "github:" stuff is determined by the installation tool. The "owner" would be listed in the "authors" key of META, and asking for Foo:auth<cpan:bar> would make the installer look for Foo on CPAN with a module that has :auth<> adverb set to 'bar'

[23:18] <ZoffixLappy> Seems "authors" is irrelevant for that choice and the spec does mark it as 'optional'

[23:18] * ZoffixLappy still thinks :auth<> stuff is a mistake

[23:18] <ugexe> auth should be the origin, where it was originally located. this way other sites can still mirror it

[23:19] <ugexe> auth != content storage

[23:19] <TimToady> correct

[23:19] <TimToady> auth is part of the identity

[23:19] <TimToady> cpan can only be part of the identify if the original naming authority decides that that's its name

[23:20] <TimToady> that is, if 'bar' thinks 'cpan:bar' is his/her most official name

[23:21] <TimToady> if so, cpan:bar is more correct than bar

[23:21] <TimToady> since it's rooted universally

[23:21] * ZoffixLappy is really confused

[23:22] <ugexe> you shouldnt expect the package managers to keep a list of what each of the authorities expand to

[23:22] <ugexe> its just to identify the distribution. XXX:auth<github:foo> might be on github or maybe not

[23:22] *** wamba left
[23:23] *** zwu joined
[23:23] *** AndyDee left
[23:23] <TimToady> it's all identity, nothing to do with distributions, just as a URI used for identity is not really necessarily where you get that information from

[23:24] <TimToady> it's kind of a shame that so far the universal naming schemes in the world are all location-based

[23:24] <ugexe> aye, or an email (:auth<foo@bar.net>)

[23:25] <TimToady> these days that arguably works better for identity than almost anything

[23:25] <TimToady> it's a bit confusing to say "identify the distribution" though

[23:26] <TimToady> distribution is overloaded

[23:26] <ugexe> often it will be rooted with something that also happens to represent a content storage, which is why at first one might think it should determine where to obtain it from

[23:26] <TimToady> that's what I just said :)

[23:28] <ugexe> i never said i could read

[23:28] <ZoffixLappy> :D

[23:33] *** sufrostico joined
[23:33] <zwu> I wonder if the compact array will allow structures too in order to exchange data between C array of structures. In numpy, the structure array is supported http://docs.scipy.org/doc/numpy-1.10.1/user/basics.rec.html. 

[23:35] *** sufrostico left
[23:36] <TimToady> it should be, or else it should be :)

[23:37] <TimToady> the intent is certainly that it should work, whether it does yet or not

[23:38] <TimToady> we can currently inline a C struct into another struct with HAS rather than has

[23:39] <TimToady> something similar would need to be operative on the array level

[23:41] <zwu> is there doc about inline a C struct into another struct with HAS rather than has. If so, extending that inline to array may be an option. 

[23:42] <TimToady> it's documented a bit under nativecall, but not, I suspect, how it interacts with the underlying 6model

[23:44] <timotimo>   oh, is a CArray of a CStruct an array of pointers?

[23:44] * TimToady is a non-expert in this corner of things

[23:45] <zwu> TimToaday: thanks. 

[23:45] <TimToady> pay more attention to timotimo here :)

[23:45] <timotimo> oh, er, what, me?

[23:46] * timotimo slowly backs away

[23:46] * TimToady hides behind the cricket hiding behind timotimo

[23:47] <timotimo> ah, yes, CArray of CStruct is an array of pointers to structs

[23:47] <timotimo> https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/CArray.c#L53  -  check these lines

[23:48] <sortiz> zwu, If you need to pass an inline array of CStructs to C you can use NativeHelpers::CStruct, from NativeHelpers::Blob.

[23:48] <timotimo> nice

[23:49] <sortiz> See: https://github.com/salortiz/NativeHelpers-Blob/blob/master/t/02-cstruct.t

[23:50] <timotimo> we might want to offer a deprecation cycle for CArray of CStruct and ask users to use CArray[CPointer[type]] instead?

[23:51] <zwu> that's cool!

[23:53] <TimToady> that would seem like a more straightforward way to deal with things in the future, if we can get there from here

[23:53] *** spider-mario left
[23:54] * sortiz searching RabidGravy's original related RT ticket.

[23:55] *** zakharyas left
[23:57] <sortiz> That is RT #127730

[23:57] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127730

[23:59] *** pierre_ joined
