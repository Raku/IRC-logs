[00:00] *** adu left
[00:04] *** adu joined
[00:11] *** huggable left
[00:12] *** huggable joined
[00:13] *** buharin left
[00:17] *** mantovani left
[00:19] *** mantovani joined
[00:26] *** Celelibi joined
[00:28] *** sufrostico left
[00:30] *** redhands98100 left
[00:30] *** redhands98101 joined
[00:31] *** redhands98100 joined
[00:32] <awwaiid> Zoffix: definately. I am soon to submit a PR on the Nil/"" behavior

[00:32] <yoleaux> 23 Jun 2016 22:25Z <Zoffix> awwaiid: if you have any time, would you be able to take a look into https://rt.perl.org/Ticket/Display.html?id=128470 ? It was introduced by the loopy REPL commit, so maybe it'll be easier for you to fix it than the rest of us. Thanks! https://github.com/rakudo/rakudo/commit/6b935928a52be5819b6d384b1596e0125250a18b

[00:32] <Zoffix> awwaiid++

[00:34] <awwaiid> Zoffix: reproduced locally, and forcing fallback to nqp-repl shows correct behavior (not exiting but still showing error). Hard part done!

[00:34] *** redhands98101 left
[00:38] *** rindolf joined
[00:45] *** cdg left
[00:45] *** cdg joined
[00:50] *** cdg left
[00:50] *** pmurias_ left
[01:00] *** buharin joined
[01:14] *** BenGoldberg joined
[01:17] <Xliff> Zoffix: It was a merge from upstream. I've seen CVS make merges more complex than this.

[01:18] <Xliff> It's fixed now, however I had to make the same fixes like three times before it took.

[01:18] * Xliff goes back to grumbling quietly.

[01:19] <tbrowder> ref doc and space after sub/method names: please check PR: <https://github.com/perl6/doc/pull/630>

[01:21] <awwaiid> Zoffix: ahh... it's because the .map is lazy and not really executed until you try to print the result, at which time it raises the exception, which is outside of the catch (which is around the eval, not the print)

[01:21] <Zoffix> \o/

[01:24] <Xliff> awwaiid++ # Code Sherlock

[01:24] *** redhands98100 left
[01:29] *** cognominal joined
[01:33] *** abruanese left
[01:40] *** kid51 left
[01:46] *** ilbot3 left
[01:46] *** mantovani left
[01:47] *** ilbot3 joined
[01:54] <Zoffix> m: .Int does role { method Str { (self + 2).Str } } for ^1000; say "2 + 1 is {2 + 1}"; say "2 * 0 is {2 * 0}";

[01:54] <camelia> rakudo-moar 9b579d: OUTPUT«2 + 1 is 15␤2 * 0 is 16␤»

[02:00] <Zoffix> m: {{{{{{{{{{ "foo" does role { method say { "not foo".say } }; }}}}}}}}}}; {{{{{{{{{{ "foo".say }}}}}}}}}}

[02:00] <camelia> rakudo-moar 9b579d: OUTPUT«not foo␤»

[02:02] *** BenGoldberg left
[02:04] *** araujo_ left
[02:05] <adu> hi all

[02:05] *** BenGoldberg joined
[02:05] *** araujo_ joined
[02:05] <Zoffix> m: {{{{{ &say does role { method CALL-ME ($s) { "You wanted to print `$s`, eh? Well... YOU CAN'T! Muahaha".print } } }}}}};  {{{{{   say "Foo" }}}} }

[02:05] <camelia> rakudo-moar 9b579d: OUTPUT«You wanted to print `Foo`, eh? Well... YOU CAN'T! Muahaha»

[02:08] *** ssotka left
[02:08] *** BenGoldberg left
[02:08] *** BenGoldberg joined
[02:12] <rindolf> adu: hi, how are you?

[02:12] <adu> good

[02:12] <rindolf> adu: nice

[02:12] <adu> just checking in

[02:13] <adu> any new developments in NativeCall or Inline::C?

[02:13] *** lizmat joined
[02:17] *** _mg_ joined
[02:17] *** noganex joined
[02:17] *** _mg_ left
[02:20] *** noganex_ left
[02:20] *** _mg_ joined
[02:21] *** aborazmeh joined
[02:21] *** aborazmeh left
[02:21] *** aborazmeh joined
[02:21] *** _mg_ left
[02:30] *** mantovani joined
[02:35] *** mantovani left
[02:37] <dalek> ecosystem: c63a3f7 | (Brian Duggan)++ | META.list:

[02:37] <dalek> ecosystem: Add Slang::Mosdef to ecosystem

[02:37] <dalek> ecosystem: 

[02:37] <dalek> ecosystem: See https://github.com/bduggan/mosdef

[02:37] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/c63a3f7a4d

[02:37] <dalek> ecosystem: 4b15234 | (Zoffix Znet)++ | META.list:

[02:37] <dalek> ecosystem: Merge pull request #220 from bduggan/master

[02:37] <dalek> ecosystem: 

[02:37] <dalek> ecosystem: Add Slang::Mosdef to ecosystem

[02:37] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/4b15234992

[02:39] <Zoffix> Wow, looks like UK will actually leave EU

[02:39] <timotimo> OK, it'll be fun to see the world burn :\

[02:39] <Zoffix> The 'Leave' has been leading by 1 point since the start and it's already 50% votes counted.

[02:42] <timotimo> it's apparently really easy to rally people behind a few simple lies

[02:42] <Zoffix> The current US election is the prime example of that :)

[02:43] <adu> timotimo!

[02:43] <timotimo> ohai

[02:44] <timotimo> i'm up later than i should be :\

[02:44] <adu> timotimo: me too

[02:44] <Zoffix> Me three :")

[02:44] <timotimo> at least i'm working the piano keys a little bit

[02:44] <adu> I don't think the UK/EU thing is going to affect much

[02:45] <adu> I think the precious metal mines holding back inventory is going to make the world burn

[02:45] <Zoffix> It's going to be a precedent for others to leave. France is already saying they'll have their own referendum.

[02:45] <timotimo> fortunately, the referendum means jack shit

[02:45] <timotimo> and 70% of deciders are stay, 10% undecided

[02:47] <adu> timotimo: what exactly is a decider?

[02:47] <adu> I think, in the U.S. we call them "officials"

[02:48] <timotimo> members of parliament i think?

[02:50] <timotimo> "The answer is that technically MPs could block an EU exit - but it would be seen as political suicide to go against the will of the people as expressed in a referendum. The referendum result is not legally binding"

[02:50] <adu> Zoffix: US election is an example of what?

[02:50] <Zoffix> adu, [22:42:21] <timotimo> it's apparently really easy to rally people behind a few simple lies

[02:50] <adu> as in Hillary and Drumph?

[02:51] <Zoffix> Yeah

[02:51] <Zoffix> Sniper Fire Shillary :)

[02:51] <adu> I don't think their lies are simple

[02:52] <adu> and besides, it's really difficult to decide between these two, because one of them is always menstrating, and the other one is a woman

[02:54] *** ssotka joined
[02:54] <Zoffix> The fact that 300,000,000 people have to decide between these two is already a good sign of how messed up Murican government is.

[02:55] <adu> I could vote third party, but it wouldn't do any good, since my state has been blue since the beginning of time

[02:56] <Zoffix> That's exactly why Drumpf will become president. No one cares :)

[02:56] *** freezerburnV left
[02:56] <timotimo> sleep time, gnite!

[02:56] <Zoffix> night

[02:56] <adu> oh I care

[02:57] <adu> but I'm also not delusional

[02:57] <timotimo> US election procedure is one of the silliest clusterfucks in the history of ever

[02:57] <timotimo> oh well.

[02:57] <ShimmerFairy> timotimo: the gerrymandering, First-Past-The-Post voting system, and electoral college are all _positives_, I assure you :V .

[03:00] <adu> I just wish there were choices other than killing infants and killing poor people

[03:01] *** freezerburnV joined
[03:01] <tony-o> poor people could eat the infants

[03:01] <ShimmerFairy> adu: fortunately for me, the choice isn't hard. After all, voting for Hitler is not something I'm keen on doing ever. :)

[03:02] *** aborazmeh left
[03:02] <adu> tony-o: you're wierd

[03:03] <tony-o> adu: the comment is based in satire, one that originated during the famines in ireland

[03:03] <adu> tony-o: wow, I didn't know...

[03:03] <Zoffix> ShimmerFairy, what's funny is I can't tell which Hitler you're talking about. The Drumpf who wants a wall or the Shill who can't get enough of her regime changes :)

[03:03] <MasterDuke> it's only a modest proposal

[03:03] <tony-o> MasterDuke++

[03:04] <ShimmerFairy> Zoffix: nah, Hillary at worst is your standard "I don't like 'er" politician. Drumpf, however, is pretty much Hitler's re-election campaign. I'd be doing my German ancestry a disservice if I was deluded enough to vote Adolf.

[03:04] <adu> I just had a great idea for an election

[03:06] <adu> instead of voting for people, we would all contribute search queries, like (money_stolen < 10^3), (is_pedophile == False), (num_mexican_insults == 0)

[03:07] *** addison left
[03:08] <adu> then if the set of results is empty, have another election to remove your friends search queries

[03:08] <ShimmerFairy> adu: heh :) . Or any of the other million things that would make elections work.

[03:08] <adu> and repeat

[03:10] <adu> or just be populist and automatically elect the US citizen with the most facebook likes

[03:10] <Zoffix> :)

[03:13] *** fhorck left
[03:14] <ShimmerFairy> "I [Like] The President", a new sitcom Thursdays this Fall on ABC.

[03:15] *** lizmat left
[03:16] *** cdg joined
[03:24] *** harmil left
[03:29] <Xliff> m: sub f { }; f( '//a:foo')

[03:29] <camelia> rakudo-moar 9b579d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Calling f(Str) will never work with declared signature ()␤at <tmp>:1␤------> 3sub f { }; 7⏏5f( '//a:foo')␤»

[03:29] <Xliff> m: sub f($a) { }; f('//a:foo')

[03:29] <camelia> rakudo-moar 9b579d: ( no output )

[03:29] <Xliff> m: my @a = (); sub f($a) { }; f('//a:foo')

[03:29] <camelia> rakudo-moar 9b579d: ( no output )

[03:30] *** boyo joined
[03:30] *** boyo is now known as Guest84838

[03:38] <tony-o> https://imgur.com/gallery/zUba3

[03:51] *** rgrinberg left
[03:52] <Guest84838> Getting "Expected MAST::Frame, but didn't get one" from t/client.t while installing JSON::RPC using panda?  Anyone know what would cause that and how to fix?

[03:53] <Guest84838> (I'm trying to install Rakudo Star for the first time in a while after YAPC)

[03:54] <Guest84838> Of note: this is a newish Linux Mint installation so there may be some packages missing.  e.g., I had to install libssl-dev just to get this far

[04:01] *** khw left
[04:11] *** huggable left
[04:12] *** huggable joined
[04:21] *** mantovani joined
[04:26] *** inokenty left
[04:28] *** freezerburnV left
[04:29] *** mantovani left
[04:39] *** molaf joined
[04:41] *** inokenty joined
[04:45] *** cdg left
[04:48] *** cyphase left
[04:49] *** mantovani joined
[04:53] *** cyphase joined
[04:55] *** sortiz left
[04:58] *** Guest84838 left
[04:58] *** Cabanossi left
[05:00] *** finanalyst joined
[05:00] *** Cabanossi joined
[05:01] *** grondilu joined
[05:03] *** BenGoldberg left
[05:04] *** cyphase left
[05:09] *** cyphase joined
[05:10] *** molaf left
[05:21] *** adu left
[05:29] *** lizmat joined
[05:35] *** kerframil left
[05:40] *** kerframil joined
[05:47] *** cpage_ joined
[05:49] *** _mg_ joined
[05:56] *** ufobat joined
[05:58] *** rindolf left
[06:05] *** rindolf joined
[06:06] *** finanalyst left
[06:07] *** wamba joined
[06:09] *** dupek joined
[06:12] <dupek> masak, hey

[06:15] *** setty1 joined
[06:15] *** kerframil left
[06:16] *** finanalyst joined
[06:24] *** skids left
[06:28] *** skids joined
[06:29] *** skids left
[06:33] *** MilkmanDan left
[06:33] *** firstdayonthejob joined
[06:34] *** jjido joined
[06:36] *** jjido left
[06:36] *** CIAvash joined
[06:37] *** mantovani left
[06:39] *** firstdayonthejob left
[06:41] *** jjido joined
[06:42] *** sno left
[06:42] *** abraxxa joined
[06:44] *** MilkmanDan joined
[06:46] *** domidumont joined
[06:50] *** domidumont left
[06:51] *** domidumont joined
[06:52] *** jjido left
[06:54] *** jjido joined
[06:54] *** ssotka left
[06:56] *** darutoko joined
[06:59] <dupek> hey someone

[06:59] <dupek> is here?

[07:00] <moritz> it really depends on the "here"

[07:00] <moritz> that's always a bit tricky in distributed systems

[07:02] *** setty1 left
[07:02] <dupek> :)

[07:03] <dupek> I remember that someone told be

[07:03] <dupek> :parameter

[07:03] <dupek> if not defined is treated as True

[07:03] <dupek> is it True?

[07:04] <moritz> dupek: can you think of a way to find out by asking rakudo?

[07:05] <dupek> moritz, believe me I am trying

[07:06] <dupek> sub f(:bin) { say $bin }; f(:bin);

[07:06] *** Zoffix left
[07:06] <moritz> m: sub f(:bin) { say $bin }; f(:bin);

[07:06] <camelia> rakudo-moar 9b579d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3sub f(:7⏏5bin) { say $bin }; f(:bin);␤»

[07:06] <moritz> m: sub f(:$bin) { say $bin }; f(:bin);

[07:06] <camelia> rakudo-moar 9b579d: OUTPUT«True␤»

[07:07] <dupek> good :D

[07:07] <dupek> moritz, thnks bro

[07:08] <moritz> you're welcome dude

[07:08] <dupek> :)

[07:08] *** dupek left
[07:10] *** cyphase left
[07:10] *** cyphase joined
[07:12] *** girafe2 left
[07:29] *** Zoffix joined
[07:32] *** cyphase left
[07:32] *** sno joined
[07:32] *** cyphase joined
[07:43] *** finanalyst left
[07:45] <ufobat> morning perl6 :D

[07:46] <eyck> mornin'

[07:47] <Xliff> \o

[07:47] <Xliff> Why is rakudo saying I can't set an attribute that isn't read-only?

[07:48] <Xliff> "Cannot assign to an immutable value"

[07:49] <moritz> Xliff: please show the code

[07:49] <Xliff> Lemme gist it.

[07:50] *** jjido left
[07:51] *** lizmat left
[07:53] <Xliff> https://gist.github.com/Xliff/96e48eaad469e42e3c604380a73a918a#file-cannot-assign-to-an-immutable-value-md

[07:54] *** lizmat joined
[07:55] <nine> Very highly recommended: https://vimeo.com/71278954

[07:56] <moritz> Xliff: are you binding to $!node anywhere?

[07:56] <Xliff> Hrm....

[07:56] <Xliff> Maybe. Lemme grep.

[07:57] <Xliff> ....possibly..... but the attribute itself doesn't appear on the RHS anywhere in the code.

[07:58] *** finanalyst joined
[07:59] *** finanalyst left
[08:03] <Xliff> I just pulled all of the binds out. They were unnecessary anyway.

[08:11] <Xliff> Changed $.node to is rw and set it normally and now I am getting: "Cannot modify an immutable xmlNode"

[08:11] *** bjz joined
[08:11] <Xliff> Oh well. I'm tired. This can wait until tomorrow.

[08:11] *** huggable left
[08:12] *** huggable joined
[08:14] <Xliff_zzzz> g'night! o7

[08:16] *** eugen left
[08:17] *** jjido joined
[08:21] *** bjz left
[08:21] *** donaldh joined
[08:22] <dalek> perl6.org: 57c3528 | nige123++ | source/documentation/index.html:

[08:22] <dalek> perl6.org: Add SixFix link

[08:22] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/57c3528d35

[08:26] *** araujo_ left
[08:26] *** salv0 left
[08:27] *** bjz joined
[08:38] *** bjz left
[08:38] *** RabidGravy left
[08:39] *** salva joined
[08:46] *** bjz joined
[08:52] *** araujo joined
[08:55] *** jjido left
[09:02] *** jjido joined
[09:05] *** bjz_ joined
[09:06] *** donaldh left
[09:07] *** bjz left
[09:12] *** iH2O joined
[09:13] <iH2O> great defeat for the New World Order!!

[09:16] *** AlexDaniel joined
[09:16] *** donaldh joined
[09:21] * nine will never understand people

[09:24] <iH2O> the vote was visceral, nine

[09:24] <iH2O> the pro-brexit voted in very large number

[09:25] <nine> Does "visceral" in this context mean "on an emotional basis"?

[09:25] <iH2O> on a nationalistic/patriotic basis

[09:25] <nine> ah ok

[09:25] <iH2O> though im not sure lol

[09:26] <iH2O> may be just anti-European too, or more probably a mix of both

[09:27] <gregf_> unpredictable ... like the weather out here :|

[09:28] <gregf_> the first day of summer.... and theres a downpour

[09:28] <masak> I'm sad to see the UK leave like this

[09:28] <iH2O> u in the UK or in continental Europe?

[09:29] <masak> from what I understand, we have to cut the anchoring that holds the islands stationary next to the continent, and let them drift free on the high seas

[09:29] <masak> iH2O: neither. I'm in Scandinavia :)

[09:29] <masak> we're also mildly sessecionist, but less so

[09:29] <iH2O> Sweden should divorce from the New World Order too

[09:30] <iH2O> secede from the NWO

[09:30] <gregf_> iH2O: sorry, whats the New World Order?

[09:30] <gregf_> isolating refugees?

[09:30] <iH2O> the NWO favors refugees coming to the west

[09:32] <gregf_> dont find anything wrong with that. do you know what its like to lose a loved one? in war?

[09:32] <masak> iH2O: I do fear you're being at least partly serious

[09:32] <masak> iH2O: may I remind you that this is #perl6, not #politics6

[09:32] <gregf_> out here in the west we care more about our possessions and pets.. less about human beings :|

[09:34] <iH2O> need a nap z.....

[09:34] <gregf_> masak: *never prefers politics*

[09:34] <iH2O> re-z.....

[09:36] <masak> let's stick to ushering in New World Orders using Perl 6 instead ;)

[09:38] <gregf_> Perl6++

[09:38] <hahainternet> hola sad brits

[09:39] <iH2O> hi ha

[09:39] <diakopter> and happy brits?

[09:39] <hahainternet> there are no happy brits

[09:39] <hahainternet> just sad brits and stupid brits

[09:39] <iH2O> 52% are happy i presume

[09:39] <diakopter> happy welsh?

[09:39] <iH2O> logicallly

[09:39] <hahainternet> the welsh vote was the most bizarre

[09:39] <iH2O> was it rigged?

[09:40] <hahainternet> in very many ways yes, but by the media

[09:40] <diakopter> is any election not rigged?

[09:40] <hahainternet> it's a very sad day for us :(

[09:40] <iH2O> poor hahainternet 

[09:41] <hahainternet> poor UK

[09:41] <hahainternet> that name won't last

[09:41] <iH2O> lol

[09:41] <hahainternet> soon it will be England

[09:41] <iH2O> hmm

[09:41] <iH2O> England will secede from the UK?

[09:41] <iH2O> interesting

[09:41] <hahainternet> no, scotland have already called for a new referendum

[09:41] <diakopter> lol

[09:41] <hahainternet> which they will win

[09:41] <hahainternet> sinn fein have called for a vote on reunification

[09:41] <hahainternet> which could go either way

[09:42] <huf> and then it's only wales left

[09:42] <hahainternet> wales isn't its own nation

[09:42] <iH2O> could Russia have seceded from the Soviet Union at the time of the cold war?

[09:42] <huf> it should be!

[09:42] <huf> if we're lucky, the danelaw will also secede eventually :D

[09:42] <hahainternet> huf: haha welsh nationalists do exist!

[09:42] <hahainternet> but no this is real bad

[09:42] <hahainternet> really really unbelievably bad

[09:43] <hahainternet> pain and misery to tens of thousands bad

[09:43] <iH2O> danelaw??? that still exists

[09:43] <huf> the people eat what the politicians cook

[09:43] <iH2O> ???

[09:43] <hahainternet> no the people eat what the media cooks

[09:43] <huf> iH2O: the north is still the north

[09:43] <hahainternet> this referendum was bought by lies

[09:43] <hahainternet> printed on buses, advertised on TV

[09:43] <iH2O> who controls the media in the UK haha?

[09:43] <hahainternet> they were permitted to lie to the public on an industrial scale

[09:43] <hahainternet> iH2O: the largest owner is likely murdoch

[09:43] <iH2O> its the pro-remain side

[09:44] <huf> iH2O: once norn iron and scotland go, the biggest divides will be wales and north vs south, no? :)

[09:44] <hahainternet> iH2O: i'm talking about lies, not politics

[09:44] <iH2O> the same

[09:44] <huf> or london vs everyone else :D

[09:45] <iH2O> london isnt the UK huf, i hear that all the time

[09:45] <huf> yeah, so there's more left to fall apart here

[09:45] <huf> this could be as fun as yugo

[09:45] <iH2O> wat

[09:45] <iH2O> no

[09:46] <huf> everything ends at some point...

[09:46] <huf> the uk had a good run :)

[09:46] <huf> incidentally, when are they going to ban these strange foreign italian letters? :)

[09:46] <iH2O> be positive, huffy

[09:47] <iH2O> :)

[09:47] <ShimmerFairy> positive: popcorn sales go up  :P

[09:47] <nine> ~/win 15

[09:48] <iH2O> perl 7 is coming soon for Windows 15

[09:50] <nine> All the more funny because both Perl 6 and Windows 10 are considered the last major versions respectively

[09:51] *** TEttinger left
[09:51] <iH2O> thats because they want to avoid having Windows 11, Windows 12, then *Windows 13*

[09:51] <iH2O> they dont want "Windows 13*

[09:52] <iH2O> after what happened to Apollo 13

[09:52] <huf> they can just jump to years again and nobody will notice :)

[09:52] <huf> windows 17 next year, oslt

[09:53] <iH2O> if they jumped that big everybody would notice huf

[09:54] <nine> Windows hasn't had any kind of consistent (marketed) versioning scheme since NT 4

[09:54] <Woodi> I hear some Japanees fears number 4...

[09:55] <araujo> in some parts of Asia yeah

[09:55] <araujo> they do

[09:55] <iH2O> if you have to fear a number, 13 is better because u bump into it less often than 4

[09:55] <araujo> because the number 4 pronunciation is quite similar to the pronunciation of dead 

[09:56] <iH2O> so perl6 has a future in Japan

[09:56] <iH2O> (perl4 never had a chance)

[09:56] <araujo> hehe

[09:56] <huf> araujo: yeah, but that's so *so* weird :D

[09:56] <huf> i mean, not weirder than the fear of 13, but ...

[09:56] <huf> to get hung up on a coincidence in pronunciation...

[09:56] <huf> am i supposed to fear fish now?

[09:57] <Woodi> anyway, advice for politicians: don't make total cesspool from your own place; you will hate it yourself and realy liked if someone other take over over you :>

[09:57] *** andreoss joined
[09:58] <araujo> huf, sure, superstitions ... 

[09:58] *** andreoss left
[09:59] <araujo> and they change from culture to culture :D (I think I heard once the 13 is actually lucky numbers for some cultures?)

[09:59] <huf> gotta be :)

[10:03] *** kaare__ joined
[10:03] <nine> If I were to fear a number (and why would I? I love them!), it'd be something like 3^^^3 because I cannot imagine running into that ever.

[10:05] <huf> i dont know, i think 3 is pretty indecent and sexually licentious

[10:07] *** trnh joined
[10:07] *** rindolf left
[10:11] <iH2O> the 3 body problem has already been solved, huffy

[10:11] <iH2O> by astronomers and astrologists

[10:11] <AlexDaniel> just use binary…

[10:11] <AlexDaniel> and you're not going to stumble upon this bullshit :/

[10:12] <iH2O> q-bits instead of bits?

[10:12] <iH2O> q-bits are the future, right?

[10:12] <masak> believe it's spelled "qubit"

[10:13] <iH2O> perl6 needs builtin support for qbits now that google claims to have a working quantum computer

[10:14] <hahainternet> didn't you see damian's keynote?

[10:14] <iH2O> ?

[10:14] <hahainternet> Quantum::Superposition module

[10:15] *** pmurias joined
[10:15] *** _mg_ left
[10:17] *** CIAvash left
[10:24] *** rindolf joined
[10:25] <iH2O> im rather new to perl6 and i dont know how much vim has support, so i invented my own support

[10:25] <iH2O> that is, i defined the keys z and t this way:

[10:26] <iH2O> when i type 5z, perl6 is called on the next 5 lines and to paste the output into my editing session i type t

[10:26] <iH2O> if i type only z, then perl6 is called on the whole file being edited

[10:27] <iH2O> thats it

[10:27] <iH2O> thats very straightforward, i have it implemented on both linux and windows

[10:27] <iH2O> i can post the code if anybody is interested

[10:29] * Zoffix wakes up

[10:29] <AlexDaniel> Zoffix: good morning! How is your IRC thing going?

[10:29] <AlexDaniel> :)

[10:29] <Zoffix> UK left EU! Heh. Called it!

[10:29] <hahainternet> it's not a thing to be excited about Zoffix 

[10:29] <hahainternet> it's hell for us now

[10:30] <iH2O> the nightmare is after you wake up?

[10:30] <hahainternet> this isn't waking up

[10:30] <hahainternet> this is a stupidity induced coma

[10:31] <hahainternet> one of the world's most notable nations is likely to be split up

[10:31] <hahainternet> and the lives of tens of millions will be seriously affected

[10:31] <hahainternet> it's an incredibly sad day for the citizens of the UK

[10:31] <iH2O> (of course above i used "5z" as an example. you can use any number instead of 5)

[10:31] *** jjido left
[10:32] <iH2O> are you a citizen of the UK

[10:32] <hahainternet> i am

[10:32] <iH2O> poor haha, u doomed

[10:32] <abraxxa> this has a great explanation of how UTF-8 is stored/encoded/works (International text (in networking)): http://arstechnica.com/apple/2016/06/ipv6-ecn-qos-and-other-networking-improvements-in-ios-10-and-macos-sierra/

[10:33] *** jjido joined
[10:34] <hahainternet> i've also been looking for work, presuming the referendum would be remain, so now i'm going to be in an interesting position soon

[10:34] <hahainternet> it's extremely depressing, a few old people have ruined our lives

[10:34] <iH2O> you wanted to work in France, now its illegal

[10:34] <hahainternet> not for another 2 years

[10:34] <hahainternet> but it's possible i will become a foreigner to europe

[10:34] <hahainternet> even without, the UK is swinging radically to the right

[10:35] <iH2O> the UK will recapture its centuries old strong identity

[10:35] <tadzik> following the trends of the rest of europe, sadly

[10:35] <iH2O> isnt that good haha?

[10:35] <hahainternet> iH2O: the UK will not survive to have an identity

[10:35] <hahainternet> scotland will leave if they at all can, which they probably can

[10:36] <hahainternet> there's call for a reunification vote in ireland

[10:36] <tadzik> oh, survive it will

[10:36] <tadzik> tons of countries are not in the EU, and poorer than UK

[10:36] <hahainternet> tadzik: the UK without scotland or northern ireland is known as 'England'

[10:36] <hahainternet> or 'Britain'

[10:36] <iH2O> Welsh?

[10:36] <hahainternet> the identity we'll be reclaiming is our roman identity, with border controls on the wall

[10:36] <iH2O> u forget them

[10:37] <hahainternet> iH2O: they are not an independent nation

[10:37] <iH2O> shame!

[10:37] <hahainternet> even though they'd like to be

[10:37] <stmuk> I don't wish to inject too much politics into #perl6 but the UK is likely to withdraw from only the poltical aspects of the EU.  It's likely to end up in EFTA/EAA

[10:37] <Zoffix> AlexDaniel, I haven't been working on it. Gonna wait for after Damian concurrency talks

[10:37] <hahainternet> stmuk: it's not at all clear that's the case

[10:37] <stmuk> we shall see

[10:37] <hahainternet> stmuk: the leading voices negotiating from this side of the channel are quite radical

[10:38] <hahainternet> i do apologise for bringing politics in though

[10:38] <hahainternet> i'm just incredibly annoyed and frustrated

[10:38] <stmuk> I'm very familiar with those voices

[10:38] <hahainternet> i wouldn't mind if there was a good factual basis for this

[10:38] <profan> i woke up to swedish nationalists taking advantage of the british exit vote already

[10:38] <hahainternet> but that's the real rub

[10:38] <profan> someone send help

[10:38] <hahainternet> profan: yep that's happening across europe

[10:39] <hahainternet> i think everyone under 40 or 50 in the UK would like to apologise for our terrible terrible mistakes :(

[10:39] <iH2O> Britain rules the 7 seas!

[10:39] <stmuk> the UK is likely to end up like Norway or Switzerland

[10:40] <tbrowder> AlexDaniel: ref comment on my PR, that "Notice the space..." comment I think is OBE (I made it when I first thought the example needed it--I'll check and correct if  the comment is now incorrect

[10:40] <stmuk> hahainternet: you don't speak for everyone 

[10:40] <profan> the divide is the scary part

[10:40] <hahainternet> stmuk: yes i'm aware

[10:40] <hahainternet> and we may end up like switzerland, but it's going to be luck if we do

[10:40] <iH2O> Switzerland is a tax heaven

[10:41] <iH2O> Norway is a oil heaven

[10:41] <hahainternet> iH2O: we have a lot of corrupt banking groups, that's valuable right? :)

[10:41] <hahainternet> anyway i'll shut up and we can get back to perl :)

[10:41] <iH2O> banksters grrr

[10:42] <tadzik> hahainte1net: well, we're talking about *with* this time though :)

[10:42] <tadzik> they all left, the entire UK

[10:42] <timeless> m: say "abc".comb.map({ "b" ?? "d" !! "e"});

[10:42] <camelia> rakudo-moar 9b579d: OUTPUT«(d d d)␤»

[10:42] <hahainternet> tadzik: that's not clear at all yet

[10:42] <timeless> where is that form of `comb` documented on doc.perl6.org?

[10:43] <tadzik> hahainte1net: how so?

[10:43] <timeless> AlexDaniel: ?

[10:43] <hahainternet> tadzik: scotland will make every effort they can to remain in the EU, NI may reunify (that is very unlikely though)

[10:43] <Zoffix> timeless, https://docs.perl6.org/routine/comb

[10:43] <Zoffix> timeless, "If no matcher is supplied, a list of characters in the string (e.g. $matcher = rx/./) is returned."

[10:43] <tadzik> hahainte1net: ah, that may be interesting to see, yes

[10:44] <hahainternet> tadzik: i was born in england, but i would move to scotland in a heartbeat to remain in the EU, my long term life goal was to buy loads of land in france and retire there

[10:44] <timeless> Zoffix: oh, so i'm not really using comb

[10:44] <timeless> so much as map?

[10:44] * timeless sighs

[10:44] <AlexDaniel> timeless: yeah, it's just comb + map :)

[10:44] <timeless> ok...

[10:44] <AlexDaniel> m: ‘abc’.comb.perl.say

[10:44] <camelia> rakudo-moar 9b579d: OUTPUT«("a", "b", "c").Seq␤»

[10:45] <AlexDaniel> m: ("a", "b", "c").Seq.map({ "b" ?? "d" !! "e"}).say;

[10:45] <camelia> rakudo-moar 9b579d: OUTPUT«(d d d)␤»

[10:45] <timeless> m: say "abc".comb.map({ "b" ?? "d" !! "e"}).join;

[10:45] <camelia> rakudo-moar 9b579d: OUTPUT«ddd␤»

[10:45] <Zoffix> timeless, you're not really using anything, since you're just discarding the comb results and stuffing 

[10:45] <hahainternet> "b" there isn't testing anything but the truth of "b" is it?

[10:45] <Zoffix> 'd' for each item

[10:45] <Zoffix> hahainternet, right

[10:46] <timeless> Zoffix: i simplified what i was actually doing for the question

[10:46] <AlexDaniel> m: ("a", "b", "c").Seq.map({ $_ ~~ "b" ?? "d" !! "e"}).say

[10:46] <camelia> rakudo-moar 9b579d: OUTPUT«(e d e)␤»

[10:46] <Zoffix> m: say 'd' x 'abc'.comb

[10:46] <camelia> rakudo-moar 9b579d: OUTPUT«ddd␤»

[10:47] <timeless> unfortunately i had a 3 line expression and tried to replace it w/ a 1 line expression

[10:47] <timeless> but i lost the value of one of the lines (namely `join`)

[10:47] *** iH2O left
[10:47] <AlexDaniel> comb is actually well-documented :)

[10:48] <Zoffix> And well-blogged: http://perl6.party/post/Perl6-Comb-It

[10:49] <dalek> doc: 42ad323 | (Tom Browder)++ | doc/ (26 files):

[10:49] <dalek> doc: remove space between sub/method names and opening paren

[10:49] <dalek> doc: review: https://github.com/perl6/doc/commit/42ad32388f

[10:49] <dalek> doc: b46490b | (Tom Browder)++ | doc/Language/functions.pod:

[10:49] <dalek> doc: remove incorrect statement

[10:49] <dalek> doc: review: https://github.com/perl6/doc/commit/b46490b585

[10:49] <dalek> doc: f5f6c50 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/ (26 files):

[10:49] <dalek> doc: Merge pull request #630 from tbrowder/sub-space

[10:49] <dalek> doc: 

[10:49] <dalek> doc: remove space between sub/method names and opening paren

[10:49] <dalek> doc: review: https://github.com/perl6/doc/commit/f5f6c50c8b

[10:50] <timeless> tbrowder: https://github.com/perl6/doc/commit/42ad32388f

[10:51] <timeless> your commit included something else...

[10:51] <AlexDaniel> timeless: it was fixed in the next commit

[10:51] <timeless> (the first change in the diff)

[10:51] <AlexDaniel> oh

[10:51] <AlexDaniel> you mean that comma?

[10:51] <timeless> yeah

[10:51] <AlexDaniel> any problems with that?

[10:51] <timeless> bad summary :)

[10:51] <AlexDaniel> timeless: yeah, that happens

[10:52] <AlexDaniel> timeless: also people tend to remove trailing whitespace on other lines sometimes

[10:52] <tbrowder> the comma was added to use the accepted form of e.g., but I did not state that

[10:52] <timeless> (working on dirty working directories when trying to make mass changes is messy)

[10:53] <timeless> tbrowder: i definitely agree the comma should be added

[10:53] <AlexDaniel> in an ideal world we probably should not do that, but having a separate commit for one comma is also not so awesome :)

[10:54] <tbrowder> I will strive to do better in the future...

[10:54] <Zoffix> tbrowder, your commit was fine. timeless is just being a pedant :)

[10:54] <Zoffix> tbrowder++ # fixing all the docs

[10:54] <AlexDaniel> being a pedant is also fine :)

[10:55] <AlexDaniel> as long as it is all about friendliness and love ;)

[10:55] <AlexDaniel> (and I hope that's the case)

[10:56] <timeless> definitely trying to be friendly

[10:56] <tbrowder> I love pedants, being kind of OCD myself

[10:57] <tbrowder> but i'm also too careless much of the time, but sorry afterwards...

[10:58] *** jjido left
[10:58] <AlexDaniel> tbrowder: by the way, I think that you can commit --amend to your own fork

[10:58] <AlexDaniel> am I right?

[10:58] <hahainternet> has it been decided that there will be no space permitted between sub name and the signature? or is this just for consistency?

[10:59] <AlexDaniel> tbrowder: this way we wouldn't need to have “oops” commits in the main repo

[10:59] <AlexDaniel> hahainternet: it's probably better to have no space in docs

[10:59] <AlexDaniel> hahainternet: so yeah, just for consistency

[11:00] <AlexDaniel> m: sub foo ($x, $y) { say $x, $y }; foo(42, 69);

[11:00] <camelia> rakudo-moar 9b579d: OUTPUT«4269␤»

[11:00] <hahainternet> i tend to like a space in the definition so the name is a bit more clearly distinguished, but i just wanted to know :)

[11:00] <AlexDaniel> m: sub foo ($x, $y) { say $x, $y }; foo (42, 69);

[11:00] <camelia> rakudo-moar 9b579d: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:00] <hahainternet> no i understand that distinction, just wondered if the issue had been decided since a couple days ago

[11:02] <AlexDaniel> tbrowder: so that's something you can probably try next time :)

[11:03] *** jjido joined
[11:10] *** iH2O joined
[11:10] *** trnh left
[11:16] *** jjido left
[11:19] *** a3r0 joined
[11:19] *** _mg_ joined
[11:25] <timeless> AlexDaniel: ok, so fun edge from the link checker

[11:25] *** RabidGravy joined
[11:25] <timeless> view-source:https://doc.perl6.org/routine/elems.html

[11:26] <timeless> <p>From <a href="/type/Uni#elems">Uni</a></p>

[11:26] <timeless> -- link checker says that  Uni does not have #elems

[11:26] <timeless> but, presumably that was generated by something...

[11:28] <moritz> timeless: likely #method_elems would be correct

[11:28] *** kid511 joined
[11:28] <timeless> moritz: from the output, it seems like this is systemic

[11:29] <timeless> is it likely the pod to html thing itself?

[11:29] * timeless goes searching for elems

[11:29] <timeless> oh

[11:29] *** rindolf left
[11:29] <timeless> ok

[11:30] <moritz> timeless: it's likely because we don't always know if something is a method or a sub

[11:30] <moritz> or what the anchor is

[11:30] <timeless> ./htmlify.p6:835: my $p = pod-with-title(

[11:30] <timeless>         "Documentation for method $type.$name",

[11:30] <timeless>         pod-block('From ', pod-link($type, "/type/{$type}#$name")),

[11:30] <timeless>         @$pod,

[11:30] <timeless>     )

[11:31] <timeless> thankfully i have enough logging to be able to see where things are from :)

[11:31] <timeless> oh

[11:31] * timeless ponders

[11:32] <timeless> moritz: so...

[11:32] <timeless> we could probably have the generated .html for Uni include an extra <a id="elems">

[11:33] <moritz> timeless: that would be nice

[11:33] <moritz> though we have to take care that we don't duplicate the id

[11:33] <timeless> it's a lot of extra content though

[11:33] <moritz> because include methods from superclasses and from roles

[11:34] <moritz> which can have the same name

[11:34] <gfldex> there are no linkable anchors for X<> too

[11:34] <timeless> moritz: so,...

[11:35] <timeless> we could get a count pretty easily

[11:35] <timeless> to figure out if something is unique

[11:35] <gfldex> maybe some JS magic that highlights search/link terms would help to deal with dupes

[11:35] <timeless> in fact

[11:35] <timeless> the code already thinks about duplicates

[11:35] <timeless>             my $subkind = @subkinds.elems == 1 ?? @subkinds.list[0] !! $kind;

[11:36] <moritz> oh nice

[11:36] <timeless> is that the only thing it needs to not mess up?

[11:36] <timeless> can something have both a method and a const or ... for the same name?

[11:37] <gfldex> in https://github.com/gfldex/pod-to-bigpage i ended up using numerical link targets to deal with duplicated index entries

[11:39] * timeless ponders

[11:41] *** rindolf joined
[11:46] *** cyphase left
[11:49] *** iH2O left
[11:49] *** cyphase joined
[11:50] *** cpage_ left
[11:51] <timeless> ok

[11:51] <timeless> we have duplicate ids... in spades

[11:54] <timeless> a quick sample https://www.irccloud.com/pastebin/XlpCN8nc/

[11:54] <timeless> method_ACCEPTS is quite popular

[11:54] <timeless> html/routine/ACCEPTS.html

[11:54] <timeless> method_ACCEPTS: 11,

[11:55] <timeless> especially there :o

[11:55] <timeless> html/routine/new.html

[11:55] <timeless> class_Nil: 2, method_new: 26,

[11:58] <timeless> <h2 id="method_new"><a class="u" href="#___top" title="go to top of document"><a href="/routine/new#class_Backtrace">method new</a></a></h2>

[11:58] <timeless> ok, so um... where does `go to top of document` come from?

[11:58] *** rgrinberg joined
[11:58] <timeless> oh

[11:59] * timeless sighs

[11:59] * timeless needs to fix make clean-html

[12:00] <dogbert17> moritz: hi, are you still around?

[12:01] *** jjido joined
[12:02] <timeless> gfldex: any idea where that go to top thing comes from?

[12:02] <timeless> unit class Pod::To::HTML;

[12:02] <timeless> multi sub node2html(Pod::Heading $node) {

[12:03] <timeless> grr

[12:03] <timeless> so that's a rakudo-bug for Pod::To::HTML ?

[12:05] *** donaldh left
[12:05] <moritz> dogbert17: yes-ish

[12:05] <BrokenRobot> Do any toxic deadly chemicals smell like manure? I just rode the bus through several blocks and it reeked. Still stinks at $workplace. I wonder if I should evacuate :|

[12:05] <gfldex> timeless: i can't find it

[12:05] <dogbert17> moritz: if you're bored :) maybe you could take a look at https://gist.github.com/dogbert17/56d39157e503843a0708f646f9261355

[12:06] <timeless> gfldex: i found it

[12:06] <timeless> the two lines i quoted after i asked you are from the relevant file

[12:06] <timeless> (yay for grepping in rakudobrew)

[12:06] <moritz> dogbert17: looks good, at a glance

[12:07] <timeless> so..., how the heck does one fix that?

[12:07] <gfldex> does it come from a module?

[12:07] *** jjido left
[12:07] <timeless> i don't really really want to hack Pod::To::HTML from outside it

[12:07] <BrokenRobot> AlexDaniel: but that's not really what tbrowder++'s commit was about though, was it? I glanced at it and just saw a lot of spaces in the *definitions* removed. As in sub foo ($a, $b) {} changed to sub foo($a, $b) {}

[12:07] * BrokenRobot prefers a space there themselves.

[12:07] <timeless> i'm pretty sure that *is* the module

[12:07] <BrokenRobot> Yes, it is.

[12:08] <dogbert17> moritz: I'll fix 'invert' later, it lacks info on how list values are handled

[12:08] <gfldex> you would have to make the current bahaviour a default and allow a parameter, then use that from perl6-doc

[12:08] <BrokenRobot> https://modules.perl6.org/repo/Pod::To::HTML

[12:08] <BrokenRobot> It's community-manged, so I think you have access to hack on it, timeless 

[12:08] *** brrt joined
[12:09] <BrokenRobot> There's an open Issue for duplicate <a>s

[12:09] <timeless> hrm, since i can lock the issue, i guess that means i can hack it

[12:10] <timeless> eh?

[12:10] <timeless> https://github.com/perl6/Pod-To-HTML/issues

[12:10] <BrokenRobot> https://github.com/perl6/doc/issues/561#issuecomment-223566753

[12:10] <timeless> only shows something for poorly formed <ul>s

[12:10] <tbrowder> re spaces between sub names and (): I'm at TPC::NA::2016 and had the good fortune to ask Larry about the space and sub names and () and he said that they might revisit that issue later

[12:11] *** huggable left
[12:12] *** huggable joined
[12:13] *** cooper_ joined
[12:13] *** cooper_ left
[12:13] *** cooper_ joined
[12:13] *** lizmat left
[12:14] <tbrowder> also asked Damian, Larry, and Patrick about best practices and Damian said he hasn't written enough p6 code yet but he is thinking about it, Larry said it's probably premature at the moment, and Patrick thinks we ought to start BP idea lists and votes on a github wiki

[12:14] <timeless> view-source:https://doc.perl6.org/routine/new.html

[12:14] <timeless> https://github.com/perl6/Pod-To-HTML/issues/14

[12:18] <dalek> doc: 70fc547 | (Jan-Olof Hendig)++ | doc/Type/Map.pod:

[12:18] <dalek> doc: Added docs for Map.antipairs. moritz++

[12:18] <dalek> doc: review: https://github.com/perl6/doc/commit/70fc547a41

[12:19] <moritz> timeless: https://github.com/moritz/perl6-wtop exists, though not very active at the moment

[12:20] <timeless> moritz: was that for me?

[12:21] <buharin> masak: is here?

[12:21] *** woolfy left
[12:21] <dogbert17> .seen masak

[12:21] <yoleaux> I saw masak 10:12Z in #perl6: <masak> believe it's spelled "qubit"

[12:21] <timotimo> i think it was meant for tbrowder 

[12:22] <moritz> erm no, sorry, for tbrowder 

[12:22] <timeless> which isn't to say i didn't start this a few days ago, because i might have /sorta/ :)

[12:22] <moritz> tbrowder: https://github.com/moritz/perl6-wtop an early attempt at gathering good practises

[12:22] <timeless> although i think someone else specifically complained about it causing problems

[12:22] <timeless> and thus was a more significant impetus

[12:24] <timeless> gfldex  / BrokenRobot : so...

[12:24] <BrokenRobot> ?

[12:24] <timeless> i can't follow this

[12:24] <BrokenRobot> The double link issue?

[12:24] <timeless> yeah

[12:24] <timeless> i mean, i understand why it's happening

[12:24] *** stevieb9 joined
[12:24] <BrokenRobot> Pod::To::Html generates links. Whatever else is generating links in htmlfy.p6 needs to stop doing it.

[12:24] <timeless> no

[12:24] *** cpage_ joined
[12:25] <BrokenRobot> That's my interpretation of the problem, but if I knew the exact cause, I'd fixed it already

[12:25] <timeless> here only Pod::To::HTML is at fault

[12:25] <timeless> this isn't that kind of double-link

[12:25] <timeless> this is double-id

[12:25] <BrokenRobot> Ah

[12:25] *** aries_liuxueyang joined
[12:25] <timeless> or in routine/new.html 26x id=

[12:25] <timeless> because doubling is boring :)

[12:25] <BrokenRobot> No idea.

[12:25] <gfldex> the only lasting solution would be to generate uniq ids for ids, what will clash with perma-links

[12:25] <timeless> the problem is... i can't figure out where `class X` comes from

[12:26] <timeless> because it doesn't seem to come from this module

[12:26] <timeless> if it knew that, it could generate {class}_{method}

[12:27] <timeless> hrm

[12:27] <gfldex> maybe you could subclass from the module?

[12:27] <timeless> maybe i need to look at the def of `Pod`

[12:27] <timeless> nah, at the end of the day, someone (might as well be me) needs to fix the module

[12:28] <timeless> so, where is `Pod` as a class/module?

[12:28] <timeless> ./moar-nom/src/core/Pod.pm ?

[12:30] <timeless> (that's unhelpful)

[12:32] <gfldex> most of the work is done in the grammar / action class

[12:32] <timeless> so Pod::To::Text looks at a  .HOW

[12:33] <timeless> but Pod itself doesn't have one

[12:34] <psch> m: say Pod.HOW

[12:34] <camelia> rakudo-moar 9b579d: OUTPUT«Perl6::Metamodel::PackageHOW.new␤»

[12:34] <psch> m: say Pod::.keys

[12:34] <camelia> rakudo-moar 9b579d: OUTPUT«(FormattingCode Item Heading Config Raw Block)␤»

[12:35] * timeless waits for a decoding

[12:35] <psch> timeless: ...it's just a package

[12:35] <timeless> HOW?

[12:36] * timeless feels like this could be whos-on-first

[12:36] <psch> timeless: no, Pod

[12:36] <psch> timeless: HOW is "higher order workings", as in "HOW does it know what it does" (or something

[12:36] <timeless> psch: right, it's a package, i read it

[12:36] <psch> )

[12:37] <timeless> Pod::To::Text reads from a .HOW

[12:37] <timeless> i was hoping to see .HOW in Pod to explain what it knew

[12:37] <timeless> but it wasn't there

[12:37] <psch> timeless: the different HOWs are in src/Perl/Metamodel/

[12:37] *** araujo_ joined
[12:38] <psch> timeless: and nqp/src/how has the bootstrap HOWs

[12:38] <kid511> https://cite-sciences.ubicast.tv/lives/journees-perl/ live stream of talk on Perl 6 from French Perl workshop

[12:38] <psch> well, nqp HOWs more precisely

[12:38] <psch> i think the KnowHOW is always VM specific, and bootstraps everything else

[12:39] <psch> m: say Any.HOW

[12:39] <camelia> rakudo-moar 9b579d: OUTPUT«Perl6::Metamodel::ClassHOW.new␤»

[12:39] <psch> m: say Any.HOW.HOW

[12:39] <camelia> rakudo-moar 9b579d: OUTPUT«Method 'gist' not found for invocant of class 'NQPClassHOW'␤  in block <unit> at <tmp> line 1␤␤»

[12:39] <psch> m: say Any.HOW.HOW.HOW

[12:39] <camelia> rakudo-moar 9b579d: OUTPUT«Method 'gist' not found for invocant of class 'KnowHOW'␤  in block <unit> at <tmp> line 1␤␤»

[12:39] *** araujo_ left
[12:39] <psch> so the KnowHOW is the bare bones metaclass of everything, from which we build the NQPClassHOW, which we use to build the Perl 6 level ClassHOW

[12:39] *** araujo_ joined
[12:40] <timeless> ok...

[12:40] * psch has a strong feeling that didn't actually help...

[12:41] <timeless> right!

[12:41] <psch> timeless: what's the actual thing you're trying to do or find out?

[12:41] *** araujo left
[12:41] <timeless> whether or not Pod::To::Html should have enough information to know the class it's talking about

[12:41] *** araujo_ left
[12:41] <psch> if it has the type object it knows everything there is to know

[12:41] <timeless> so that it can avoid generating the same ambiguous id

[12:41] <psch> or, well, can find out

[12:42] *** araujo_ joined
[12:42] <timeless> multi sub node2html(Pod::Heading $node) {

[12:42] <timeless>         id => escape_id(node2rawtext($node.contents)),

[12:42] <[Coke]> http://tryperl6.org/ - my google alert notification found this

[12:42] <timeless> $node is presumably the class you're talking about?

[12:43] <psch> timeless: $node is clearly a Pod::Heading :)

[12:43] <timeless> m: say Pod

[12:43] <camelia> rakudo-moar 9b579d: OUTPUT«(Pod)␤»

[12:43] <[Coke]> m: say 1™

[12:43] <camelia> rakudo-moar 9b579d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3say 17⏏5™␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤        statem…»

[12:43] <timeless> m: say Pod.Heading

[12:43] <camelia> rakudo-moar 9b579d: OUTPUT«Method 'Heading' not found for invocant of class 'Pod'␤  in block <unit> at <tmp> line 1␤␤»

[12:43] <timeless> m: say Pod::Heading

[12:43] <camelia> rakudo-moar 9b579d: OUTPUT«(Heading)␤»

[12:43] <[Coke]> (the try site allows that, ah well)

[12:43] <timeless> m: say Pod::Heading.HOW

[12:43] <camelia> rakudo-moar 9b579d: OUTPUT«Perl6::Metamodel::ClassHOW.new␤»

[12:44] * timeless sighs

[12:44] <timeless> psch: i think i'm going to go back to being totally lost

[12:45] *** wamba left
[12:45] <psch> timeless: i still don't know what you're trying to do, honestly

[12:45] <psch> timeless: i mean, i think it's about caching Pod::Headings..?

[12:45] <timeless> psch: view source of https://doc.perl6.org/routine/new.html

[12:46] <timeless> look for `id="method_new"`

[12:46] <timeless> when you've hit say the 25th instance, let me know

[12:46] <[Coke]> If the person who runs tryperl6.org is here, a link to report issues on the site would be appreciated.

[12:46] *** wamba joined
[12:47] <timeless> note that in XML, and realistically, HTML, you're only supposed to have 1 id=

[12:47] <timeless> (you can do whatever you like in html, but browsers will start thinking you're crazy pretty quickly if you do...)

[12:47] <psch> timeless: and $node.contents doesn't give you anything to differentiate the ids?

[12:48] <timeless> the generated content indicates it's just the `new`

[12:48] <timeless> somewhere presumably is more useful stuff like the container

[12:48] <timeless> but gosh, navigating this is painful

[12:49] <psch> did check in the generating code what $node.contents contains?

[12:49] <timeless> ?

[12:49] <timeless> i can't figure out where any of that is

[12:49] <timeless> Pod.pm is close enough to empty

[12:49] <timeless> Pod::To::Html isn't where things come from

[12:49] <psch> 12:42 < timeless> multi sub node2html(Pod::Heading $node) {

[12:49] <psch> 12:42 < timeless>         id => escape_id(node2rawtext($node.contents)),

[12:50] <timeless> that's from Pod::To::Html

[12:50] *** kerframil joined
[12:50] <psch> so am i understanding that righ

[12:50] <timeless> it's possible assemble-list-items is relevant

[12:50] <psch> t

[12:50] <psch> that Pod::To::Html isn't where the html comes from..?

[12:51] <timeless> https://github.com/perl6/Pod-To-HTML/blob/master/lib/Pod/To/HTML.pm

[12:51] <timeless> is that file if you want to try to read it

[12:51] <timeless> instead of relying on my sleep-deprived....

[12:52] <timeless> it's possible that assemble-list-items is doing stuff...

[12:52] <psch> hm, yeah, that does look like the Heading.contents is really just "method new"

[12:52] <psch> curious where the link to another class comes from then

[12:53] <timeless> that's doc/htmlify.p6

[12:53] <timeless>                 pod-block(

[12:53] <timeless>                     "$podname inherits from class ",

[12:53] <timeless>                     pod-link($class.name, "/type/{href_escape ~$class}"),

[12:53] <timeless>                     ", which provides the following methods:",

[12:53] <timeless>                 ),

[12:53] <timeless>                 %routines-by-type{$class}.list,

[12:54] <timeless> https://github.com/perl6/doc/blob/master/htmlify.p6

[12:56] <psch> ah, alright

[12:57] <psch> i guess the easiest way to solve the dup id issue is by adding a state hash that tracks all the existing ones and has an Int as value that increments which each use

[12:57] <psch> starting at 0 probably :)

[12:57] <timeless> so...

[12:57] <timeless> i'd much rather it actually retain useful information

[12:57] <timeless> because if it manages to know x is a class X

[12:58] *** Sgeo_ left
[12:58] <timeless> then it really should be able to generate id="X_method_x"

[12:58] <timeless> but i can't follow this to figure out if it knows X

[12:58] <psch> doesn't look like it

[12:58] <psch> at least not in Pod::To::HTML

[12:58] <awwaiid> Is there an easy way to get perl6-code whitespace detection via something like / <.ws> / ? I want it for the REPL so that if you enter space or a comment it doesn't really eval it

[12:58] <timeless> but...

[12:58] <psch> htmlify seems to know, but then you're back to s/// on the html directly

[12:59] <timeless> htmlify is calling p2h/pod2html with an entire pod, right?

[12:59] <psch> now idea, this is literally the first time i ever looked at either :)

[13:00] <BrokenRobot> m: 'foo' does role { method uc { say "We're in! Someone's trying to uppercase {self}"; callsame; } }; say 'foo'.uc;

[13:00] <camelia> rakudo-moar 9b579d: OUTPUT«We're in! Someone's trying to uppercase foo␤FOO␤»

[13:00] <BrokenRobot> How come this works? I thought roles were composed into classes and the above callsame wouldn't work, since the method would be replaces?

[13:00] <BrokenRobot> *replaced

[13:01] <jnthn> BrokenRobot: That's for compile-time composition.

[13:01] <BrokenRobot> Ah. Alright. Thanks.

[13:01] <jnthn> BrokenRobot: The `does` infix operator does a runtime mixin, which is done by making an anonymous subclass and mixing the role into that and then reblessing the object into that subclass

[13:02] <BrokenRobot> Ah. Now it makes sense. jnthn++

[13:02] <awwaiid> It's like I want Perl6::Grammar::ws

[13:02] <timeless> psch: i think i need to find the thing that contributes `indexList indexList2`

[13:03] <timeless> ok, that's pod2html

[13:05] <timeless> because do-toc knows about classes and things

[13:07] *** mcmillhj joined
[13:09] *** gnull` joined
[13:09] <timeless> eh

[13:09] <timeless> https://doc.perl6.org/routine/new.html

[13:10] <timeless> https://doc.perl6.org/routine/new

[13:10] <timeless> new.html links to new.html + new

[13:10] <timeless> new just links to new

[13:11] *** mcmillhj left
[13:11] *** mcmillhj joined
[13:12] <timeless> (there's only one underlying file: new.html, the system remaps new as new.html)

[13:16] *** eugen joined
[13:17] <timeless> ok, so, i think i /sorta/ understand this

[13:17] <timeless>             my $new-head = Pod::Heading.new(

[13:17] <timeless> in htmlify

[13:17] *** donaldh joined
[13:23] <BrokenRobot> m: &put does role { method CALL-ME (*@args) { print "We're in! Someone's trying to say @args[]\n"; nextsame; } }; put 'foo', 'bar';

[13:23] <camelia> rakudo-moar 9b579d: OUTPUT«We're in! Someone's trying to say foo bar␤»

[13:23] <BrokenRobot> How come in this case nextsame doesn't work?

[13:23] <jnthn> BrokenRobot: Because there's no CALL-ME to delegate to?

[13:24] <jnthn> Routines are "natively" invokable, rather than going via CALL-ME

[13:24] <BrokenRobot> Ohhh. Thanks, jnthn++

[13:24] <jnthn> Though we could stick a method CALL-ME(|c) { self(|c) } or so up in Code and that'd make it work.

[13:24] <jnthn> Uh...or would it... :)

[13:25] <jnthn> It may have to look a tad different to that :)

[13:25] *** cdg joined
[13:25] <gfldex> m: my &orig-put = &put; put does role { method CALL-ME (*@args) { print "We're in! Someone's trying to say @args[]\n"; nextsame; } }; put 'foo', 'bar'; orig-put 'test';

[13:25] <camelia> rakudo-moar 9b579d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    does used at line 1␤␤»

[13:25] <BrokenRobot> Is there a way to call the original put above or do I have to emulate it's behaviour?

[13:26] <gfldex> you could use .wrap

[13:26] * BrokenRobot looks that up

[13:27] * jnthn suggets wrap also

[13:27] <timotimo> you mean &put does role ...

[13:27] <timotimo> not "put does role"

[13:28] <timotimo> but "does" works on the object, not the container, so &orig-put will also see the change

[13:28] <literal> Zoffix: I see you're doing "».say" here: http://blogs.perl.org/users/zoffix_znet/2016/01/perl-6-rotor-the-king-of-list-manipulation.html

[13:28] *** _mg_ left
[13:28] <literal> that's arguably wrong :)

[13:28] <BrokenRobot> m: &put.wrap(sub (*@args) {say "We're here!"; nextsame}); put 'foo';

[13:28] <camelia> rakudo-moar 9b579d: OUTPUT«We're here!␤»

[13:28] <timotimo> correct, >>.say will, in the future or the past, give you different order

[13:29] <literal> not just different order, but mix up the strings, right?

[13:29] <literal> as all are being written at the same time

[13:29] *** zakharyas joined
[13:30] <BrokenRobot> m: &put.wrap(sub (*@args) {say "We're here!"; callsame}); put 'foo';

[13:30] <camelia> rakudo-moar 9b579d: OUTPUT«We're here!␤»

[13:30] <BrokenRobot> Doesn't seem to be working/>?

[13:31] <psch> m: say &put.signature

[13:31] <camelia> rakudo-moar 9b579d: OUTPUT«(| is raw)␤»

[13:31] <psch> m: &put.wrap(sub (| is raw) {say "We're here!"; callsame}); put 'foo';

[13:31] <camelia> rakudo-moar 9b579d: OUTPUT«We're here!␤foo␤»

[13:31] *** Sgeo_ joined
[13:31] <psch> BrokenRobot: {call,next}{same,with} only dispatch amongst other candidates that also match the signature/args

[13:32] *** aries_liuxueyang left
[13:32] * psch is a bit fuzzy on the details

[13:32] <BrokenRobot> psch: thanks

[13:32] <BrokenRobot> The .wrap doesn't work for my case. Rakudo segfaults :|

[13:33] <psch> that's a ticket!

[13:33] <gfldex> BrokenRobot: see https://doc.perl6.org/language/functions#Routines

[13:34] <dalek> doc: 79b1cce | (Jan-Olof Hendig)++ | doc/Type/Map.pod:

[13:34] <dalek> doc: Added missing info and example to the docs for Map.invert

[13:34] <dalek> doc: review: https://github.com/perl6/doc/commit/79b1cce71a

[13:36] <BrokenRobot> This is royally annoying. I now have two blog posts that I can't publish due to bugs in rakudo

[13:37] *** Khisanth joined
[13:37] <dalek> doc: e1a5b23 | (Josh Soref)++ | Makefile:

[13:37] <dalek> doc: split clean-html by lines and sort

[13:37] <dalek> doc: review: https://github.com/perl6/doc/commit/e1a5b23dbe

[13:37] <dalek> doc: 1437ec6 | (Josh Soref)++ | Makefile:

[13:37] <dalek> doc: add programs dir to clean-html

[13:37] <dalek> doc: review: https://github.com/perl6/doc/commit/1437ec6af7

[13:37] <psch> BrokenRobot: start a draft on jvminterop ;)

[13:38] <psch> y'know, cause good things come in threes..? :S

[13:38] *** user9 left
[13:39] <jnthn> If you're wrapping a sub, you must also do "use soft"

[13:39] *** user9 joined
[13:39] <BrokenRobot> segfaults with use soft too;

[13:39] *** araujo_ left
[13:40] <BrokenRobot> I'm wrapping in C.pm6, B.pm6 uses C.pm6, and A.pm6 uses B.pm6 and I try to call put in A.pm6 and it segfaults

[13:40] <jnthn> I can't see the segfault in the backlog?

[13:40] <BrokenRobot> Yeah, it only happens when spread in modules

[13:40] <jnthn> Ah :/

[13:41] <psch> m: module A { my $old = &say.wrap(sub (| is raw) { print "well, "; callsame }) }; import A; say "foo"

[13:41] <camelia> rakudo-moar 9b579d: OUTPUT«well, foo␤»

[13:41] <psch> import's not enough vOv

[13:41] *** hanekomu joined
[13:42] <BrokenRobot> precompilation bug!

[13:42] <BrokenRobot> :)

[13:43] <BrokenRobot> It actually doesn't happen even if you just use 1 module. It happens when one module uses the other.

[13:44] <BrokenRobot> RT: https://rt.perl.org/Ticket/Display.html?id=128476

[13:45] <BrokenRobot> Slightly wrong description

[13:45] * BrokenRobot hates that RT doesn't have an edit button

[13:46] <timeless> brokenrobot: how's this? https://www.irccloud.com/pastebin/jLF6LDe6/

[13:47] <timeless> things look a bit funny:

[13:47] <timeless> # class Mu

[13:47] <timeless>  . Mu method new

[13:47] <timeless> # class Backtrace

[13:47] <timeless>  . Backtrace method new

[13:47] <timeless> but, i think the id's are unique

[13:48] <[Coke]> AlexDaniel: based on the chat yesterday, how's this: https://gist.github.com/coke/3a34284c5f59160b13a9d1bcf50e9e5a

[13:49] <timeless> https://doc.perl6.org/type/Pod::Block has a list of useful subclasses

[13:50] <timeless> should those have docs?

[13:50] * timeless wants Pod::Block::Heading

[13:50] <AlexDaniel> [Coke]: LHF label is probably needed too

[13:50] *** aries_liuxueyang joined
[13:50] <[Coke]> AlexDaniel: I tend not to find those helpful personally, but happy to include if it gets more eyes on tickets.

[13:51] <AlexDaniel> [Coke]: I think that we should try it.

[13:51] *** acrussell joined
[13:51] <timeless> AlexDaniel: is it Pod::Block::Heading or Pod::Heading?

[13:51] <gfldex> Pod::Heading

[13:51] <[Coke]> added.

[13:51] <gfldex> see https://github.com/gfldex/pod-to-bigpage/blob/master/lib/Pod/To/BigPage.pm6#L326

[13:51] <[Coke]> er, it got lost. one sec.

[13:52] <timeless> gfldex: ok, so the Pod::Block doc is wrong

[13:52] <AlexDaniel> what is “needs line editing”? What was the idea behind this label?

[13:52] <[Coke]> done.

[13:52] <[Coke]> AlexDaniel: no clue.

[13:52] <gfldex> timeless: the Pod classes are quite flexible. It allows the pod author to use formatting code that no renderer understands :)

[13:52] <AlexDaniel> ha

[13:53] <[Coke]> AlexDaniel: it's only on one ticket opened by Zoffix 3 days ago

[13:53] <AlexDaniel> oh well

[13:54] <dalek> doc: 2fbaeec | (Josh Soref)++ | doc/Type/Pod/Block.pod:

[13:54] <dalek> doc: fix Pod::Block ref to Pod::Heading

[13:54] <dalek> doc: review: https://github.com/perl6/doc/commit/2fbaeec979

[13:54] <timeless> gfldex: flexible is fine, but incorrectly documented isn't helpful

[13:55] <AlexDaniel> [Coke]: let's see. So type graph issues are ｢site｣, right?

[13:55] <timeless> the fact that the pod things aren't doc'd much at all doesn't help matters

[13:55] <AlexDaniel> [Coke]: 404-s are ｢site｣, broken links are ｢docs｣

[13:55] <[Coke]> AlexDaniel: seems reasonable to me.

[13:55] <AlexDaniel> or maybe some 404-s are docs :)

[13:56] <gfldex> i did a lot of dd-ing to make sense of Pod::*

[13:56] <[Coke]> broken links might turn out to be ｢build｣, but I think the default would be to assume site, yes.

[13:56] <timeless> gfldex / AlexDaniel : https://doc.perl6.org/type/Pod::Block has a L<Pod::Item>

[13:56] <timeless> https://doc.perl6.org/type/Pod::Item exists

[13:56] <BrokenRobot> AlexDaniel: my interpretation of "line editing" was just minor edits

[13:56] <timeless> so ... why isn't it a link?

[13:56] <AlexDaniel> BrokenRobot: ok, meaning LHF? :)

[13:56] <[Coke]> I mean, the goal is to close all the ticket so we don't have to care. :)

[13:56] <BrokenRobot> Yeah, it can be categorized as that

[13:57] <AlexDaniel> [Coke]: let's say we have an issue that has no label, what would that mean?

[13:58] <AlexDaniel> [Coke]: that somebody has to add a label?

[13:58] <[Coke]> I'd say

[13:59] *** sufrostico joined
[13:59] <AlexDaniel> [Coke]: OK, I think that your list totally makes sense

[14:02] *** zakharyas left
[14:02] *** pmurias left
[14:02] *** pierrot joined
[14:03] <timeless> https://github.com/pantsbuild/pants/pull/3048

[14:03] * timeless sighs

[14:04] <timeless> i don't suppose anyone here knows what a pantsbuild is, or someone who does?

[14:04] <BrokenRobot> You tried to get into someone's pants but access was denied? :P

[14:05] <timotimo> …

[14:05] <timotimo> what's with technology and innuendo jokes :)

[14:05] <timeless> i tried to offer them patches for their pants which had way too many holes

[14:05] <timeless> it was just plain embar-ass-ing

[14:06] <timeless> but, well, they can keep their ass-es

[14:08] <AlexDaniel> [Coke]: is there any easy way to refactor existing labels?

[14:08] <AlexDaniel> there are only 300, sure I can handle it manually, but… :)

[14:09] <AlexDaniel> in fact, there's probably no need to touch closed issues

[14:09] <BrokenRobot> "Before posting your first review, you need to both subscribe to the pants-reviews Google Group and create an RBCommons account."

[14:09] <BrokenRobot> shees... your *first* review? :) That's a hellalot of hoops to jump for typo fixes

[14:09] *** woolfy joined
[14:10] *** girafe joined
[14:10] <BrokenRobot> AlexDaniel: I think you can rename the labels

[14:11] *** andreoss joined
[14:11] <AlexDaniel> BrokenRobot: well, I probably can't :)

[14:12] <BrokenRobot> AlexDaniel: "Name has already been taken" never mind :/

[14:12] <AlexDaniel> BrokenRobot: where's that?

[14:13] <BrokenRobot> AlexDaniel: I tried it on my own project. Creating a label and trying to change it to an already-existing label in an attempt to merge

[14:13] <BrokenRobot> For docs it'd be this page: https://github.com/perl6/doc/labels

[14:14] <AlexDaniel> BrokenRobot: ah, so we cannot merge but we can rename

[14:14] <AlexDaniel> that's good

[14:14] *** lizmat joined
[14:15] <timeless> BrokenRobot: i think your comments support my "WTF"

[14:15] <timeless> thanks, i appreciate that

[14:15] *** pmurias joined
[14:15] *** brrt left
[14:16] <[Coke]> AlexDaniel: right, only do open issues is fine.

[14:17] <timeless> gfldex: https://github.com/perl6/doc/pull/632 in case you want to express an opinion

[14:17] <AlexDaniel> [Coke]: what now? Let's wait for more comments?

[14:17] <timeless> ... since you seem to understand this more than most

[14:18] *** khw joined
[14:18] <[Coke]> AlexDaniel: eh. maybe give it a few hours for someone to go "nooooooo"... or just do it and let them fix it if they don't like it.

[14:19] <[Coke]> "Remember, no matter how kind you are, German children will always be Kinder."

[14:20] <BrokenRobot> :)

[14:20] <AlexDaniel> hear that, people? If you *love* existing labels in perl6/docs repo, please go “noooo”.

[14:20] <gfldex> timeless: .subst(:g, /\s+/, '_') could also create a dupe if there are two names that only differe in a ' ' and  '_'. Doubling all _ before the ' ' subst should solve that. I may be nitpicking tho.

[14:21] <timeless> gfldex: for now, i'm mostly interested in the change i myself made

[14:21] <timeless> your concerns are probably reasonable

[14:21] <gfldex> timeless: however, doctors have a saying: "if you cure, you are right."

[14:22] <timeless> killing/scaring the patient generally isn't welcomed

[14:22] <timeless> although in the UK, perhaps it's ok?

[14:22] <timeless> (they did just ruin their currency)

[14:22] *** donaldh left
[14:23] <gfldex> timeless: let me quote myself from a discussion i had earlier today. "the vote is not law nor does it have law character. Both chambers of parliament may have a vote on the matter. Further the queen may refuse Royal Assent. As nice a story it would be to get rid of the brits, it may never be more then that."

[14:24] * timeless isn't in EU

[14:24] * timeless does have EUR investments/retirement bits

[14:24] <timeless> amusingly, i'm not sure how those would be impacted

[14:24] <timeless> since their mostly EUR holdings against non EU items

[14:24] <timeless> so i guess they'd go up in EUR value and cashing them out would be a wash

[14:25] <timeless> (this assumes that the EUR collapses in addition to the GBP)

[14:26] <gfldex> i'm only comfortible with predicting things in the past. :)

[14:27] *** perlpilot_ left
[14:29] <grondilu> off topic: rocket launch in 30s https://youtu.be/nFxTr00Mtdw

[14:30] <timotimo> oh

[14:30] <timotimo> i haven't heard of this one

[14:30] <grondilu> ULA though, not SpaceX

[14:30] <timotimo> these days, it's like an upgoer goes up every couple of weeks

[14:30] <timotimo> US forces on the moon!

[14:30] <timotimo> oh, no, not actually

[14:32] <AlexDaniel> eh, no pretty explosion

[14:33] <gfldex> there is something horrible wrong with how we commute. If we would be satelites, it would take us never more then 10 minutes to get to work.

[14:34] <AlexDaniel> and slightly more than that to get to the satellite ;)

[14:41] <dalek> doc/tab-test: 19f2efe | coke++ | / (16 files):

[14:41] <dalek> doc/tab-test: tabs -> spaces

[14:41] <dalek> doc/tab-test: review: https://github.com/perl6/doc/commit/19f2efe04f

[14:41] <dalek> doc/tab-test: ec16a20 | coke++ | t/tabs.t:

[14:41] <dalek> doc/tab-test: give t/tabs.t a plan

[14:41] <dalek> doc/tab-test: review: https://github.com/perl6/doc/commit/ec16a20fca

[14:41] *** perlpilot joined
[14:42] *** go|dfish left
[14:42] <[Coke]> That should make that branch pass all tests.

[14:42] <literal> how do I create a baghash that allows non-string keys? I thought "$foo = baghash :{}" would do it but apparently there's no such routine :)

[14:43] <timotimo> no that's not how you do it

[14:43] <timotimo> :{ } will give you a Hash object with non-string keys

[14:43] <timotimo> but when you coerce that to a BagHash, you aren't telling the BagHash itself to also have non-string keys

[14:43] <literal> I see

[14:43] <timotimo> you may want something like BagHash[Any]

[14:43] * Woodi thinks Perl6 should be advertised as very good for protoyping new projects...

[14:43] <timotimo> though i wasn't aware BagHash would stringify everything

[14:43] *** hanekomu left
[14:44] <timotimo> m: my BagHash $foo; $foo{1} = 100; say $foo.keys>>.perl

[14:44] <camelia> rakudo-moar 9b579d: OUTPUT«Type check failed in assignment to $foo; expected BagHash but got Hash (${})␤  in block <unit> at <tmp> line 1␤␤»

[14:44] <timotimo> m: my BagHash $foo .= new; $foo{1} = 100; say $foo.keys>>.perl

[14:44] <camelia> rakudo-moar 9b579d: OUTPUT«(1)␤»

[14:44] *** go|dfish joined
[14:44] <timotimo> m: my BagHash $foo .= new; $foo{hey => 1234} = 100; say $foo.keys>>.perl

[14:44] <camelia> rakudo-moar 9b579d: OUTPUT«(:hey(1234))␤»

[14:44] <literal> timotimo: oh, actually, BagHash seems to work for non-strings just fine, I was just doing something else wrong

[14:44] <timotimo> doesn't seem stringifying

[14:45] *** wamba left
[14:45] <AlexDaniel> [Coke]: pft… yeah. Was about to commit the same thing

[14:45] <[Coke]> AlexDaniel: whoops, sorry

[14:45] <AlexDaniel> :)

[14:45] <[Coke]> I have a trailing whitespace test I can throw in as well, but figured I'd see if the tab one got merged. :)

[14:46] <literal> as for adding a List to a BagHash, the only way to do it is $baghash{$(@list)} = 1, right?

[14:46] <literal> because it likes to flatten the list otherwise

[14:46] <[Coke]> AlexDaniel: you want?

[14:46] <[Coke]> I can put it in the same branch in about 5m if you like.

[14:47] *** brrt joined
[14:47] *** abruanese joined
[14:47] <BrokenRobot> literal: the parens are not necessary

[14:47] <psch> m: my BagHash $b .= new; $b{[1,2,3]} = 1; # this looks strange :o

[14:47] <camelia> rakudo-moar 9b579d: OUTPUT«Use of Nil in numeric context  in block <unit> at <tmp> line 1␤Use of Nil in numeric context  in block <unit> at <tmp> line 1␤Use of Nil in numeric context  in block <unit> at <tmp> line 1␤Use of Nil in numeric context  in block <unit> at <tmp> line …»

[14:48] <BrokenRobot> psch: that's a slice

[14:48] <timotimo> right

[14:48] <timotimo> it expects you to assign three things

[14:48] <psch> BrokenRobot: but how many Nils do i get

[14:48] <AlexDaniel> [Coke]: well, I haven't decided if that's a good idea

[14:48] <AlexDaniel> [Coke]: do we actually want travis to scream about trailing whitespace?

[14:48] <psch> m: my BagHash $b .= new; $b{[1,2,3]} = 1,2,3; # this looks strange :o

[14:48] <camelia> rakudo-moar 9b579d: ( no output )

[14:48] <Xliff_zzzz> Anyone have any ideas? -- https://gist.github.com/Xliff/96e48eaad469e42e3c604380a73a918a#file-cannot-assign-to-an-immutable-value-md

[14:48] <psch> minus comment

[14:48] <AlexDaniel> are we hoping that existence of such tests will make people leave less trailing whitespace?

[14:48] <AlexDaniel> huggable: dunno

[14:48] <huggable> AlexDaniel, ¯\_(ツ)_/¯

[14:49] <literal> BrokenRobot: ah, indeed

[14:50] <BrokenRobot> m: my BagHash $b .= new; $b{[1,2,3]} = 1,2;

[14:50] <camelia> rakudo-moar 9b579d: OUTPUT«Use of Nil in numeric context  in block <unit> at <tmp> line 1␤Use of Nil in numeric context  in block <unit> at <tmp> line 1␤»

[14:50] <psch> oh, that's just the STORE dance isn't it

[14:50] <BrokenRobot> prolly

[14:50] <AlexDaniel> [Coke]: put it in, let's see how it goes :P

[14:50] *** skids joined
[14:50] <[Coke]> AlexDaniel: new branch so you can decide later. one moment.

[14:51] <AlexDaniel> ah or that, sure

[14:51] <timeless> Xliff: i hit that sort of thing regularly  :/

[14:52] <Xliff> timeless: How do you fix it?

[14:52] <dalek> doc/tws-test: aeea5b2 | coke++ | t/trailing_whitespace.t:

[14:52] <dalek> doc/tws-test: add (failing) trailing whitespace test

[14:52] <dalek> doc/tws-test: review: https://github.com/perl6/doc/commit/aeea5b2d54

[14:52] <timeless> i tend to create extra variables...

[14:52] <Xliff> Near as I can tell, the object isn't immutable. So setting an attribute shouldn't be a problem.

[14:52] <timeless> but that won't help you

[14:53] <Xliff> Not in this situation, no.

[14:54] <dalek> doc/tws-test: 1259c40 | coke++ | doc/ (20 files):

[14:54] <dalek> doc/tws-test: remove trailing whitespace, test passes

[14:54] <dalek> doc/tws-test: review: https://github.com/perl6/doc/commit/1259c40042

[14:57] *** travis-ci joined
[14:57] <travis-ci> Doc build passed. Will "Coke" Coleda 'give t/tabs.t a plan'

[14:57] <travis-ci> https://travis-ci.org/perl6/doc/builds/140042463 https://github.com/perl6/doc/compare/4432bf4ff64d...ec16a20fca2c

[14:57] *** travis-ci left
[15:00] <timeless> hrm

[15:00] <timeless> ok, so, my fix for id='s seems to work

[15:01] <timeless> but, not well enough

[15:01] *** travis-ci joined
[15:01] <travis-ci> Doc build failed. Will "Coke" Coleda 'add (failing) trailing whitespace test'

[15:01] <travis-ci> https://travis-ci.org/perl6/doc/builds/140045076 https://github.com/perl6/doc/commit/aeea5b2d5450

[15:01] *** travis-ci left
[15:02] <BrokenRobot> Xliff: received parameters are immutable by default. You want is copy if you don't want to affect caller or is rw if you do: http://perl6.party/post/Perl-6-There-Are-Traitors-In-Our-Midst--Part-1#iscopy

[15:02] <BrokenRobot> Xliff: oh, nevermind. I misread what you were assigning

[15:05] <timeless>             when :(Str $ where {m/^trait\s+(\S+\s\S+)$/}) {

[15:05] <timeless>                 # Infix Foo

[15:05] <timeless> shouldn't that be # trait Infix Foo ?

[15:05] *** brrt left
[15:11] <dalek> doc: 3d70d4a | coke++ | t/tabs.t:

[15:11] <dalek> doc: Add (failing) tab test

[15:11] <dalek> doc: review: https://github.com/perl6/doc/commit/3d70d4ae9d

[15:11] <dalek> doc: 4432bf4 | coke++ | t/tabs.t:

[15:11] <dalek> doc: Skip more files

[15:11] <dalek> doc: review: https://github.com/perl6/doc/commit/4432bf4ff6

[15:11] <dalek> doc: 19f2efe | coke++ | / (16 files):

[15:11] <dalek> doc: tabs -> spaces

[15:11] <dalek> doc: review: https://github.com/perl6/doc/commit/19f2efe04f

[15:11] <dalek> doc: ec16a20 | coke++ | t/tabs.t:

[15:11] <dalek> doc: give t/tabs.t a plan

[15:11] <dalek> doc: review: https://github.com/perl6/doc/commit/ec16a20fca

[15:11] <dalek> doc: b1493ab | (Aleks-Daniel Jakimenko-Aleksejev)++ | / (32 files):

[15:11] <dalek> doc: Merge branch 'master' into tab-test

[15:11] <dalek> doc: review: https://github.com/perl6/doc/commit/b1493ab19d

[15:11] <dalek> doc: aa0e22f | (Aleks-Daniel Jakimenko-Aleksejev)++ | / (17 files):

[15:11] <dalek> doc: Merge branch 'tab-test'

[15:11] <dalek> doc: review: https://github.com/perl6/doc/commit/aa0e22f651

[15:12] <AlexDaniel> omg…

[15:13] <dalek> doc: 297f94d | (Josh Soref)++ | htmlify.p6:

[15:13] <dalek> doc: fix find-definitions trait case comment

[15:13] <dalek> doc: review: https://github.com/perl6/doc/commit/297f94d2a4

[15:13] <AlexDaniel> missed one conflict

[15:14] <Xliff> AlexDaniel: Been there. Done that. Yesterday. 

[15:14] <Xliff> Except I missed lots!

[15:14] <Xliff> Fortunately... my own fork.

[15:14] <dalek> doc: 32cdea9 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Language/variables.pod:

[15:14] <dalek> doc: Removed missed conflict

[15:14] <dalek> doc: review: https://github.com/perl6/doc/commit/32cdea937f

[15:15] <AlexDaniel> git should've complained about it, not sure how I missed that

[15:16] <Xliff> Well, the only thing I can do now is try to reproduce this bug in a smaller context.

[15:16] <Xliff> Which might not bring up the error.

[15:17] *** webstrand joined
[15:17] <[Coke]> AlexDaniel: we have a lot of merged branches we could probably kill: "git checkout master && git branch -la --merged"

[15:18] <AlexDaniel> [Coke]: yep

[15:19] <Xliff> If anyone is curious looking at the entire context then you can check it out here: https://github.com/Xliff/p6-XML-LibXML.git and checkout branch 08findnodes.

[15:20] *** travis-ci joined
[15:20] <travis-ci> Doc build failed. Aleks-Daniel Jakimenko-Aleksejev 'Merge branch 'tab-test''

[15:20] <travis-ci> https://travis-ci.org/perl6/doc/builds/140049602 https://github.com/perl6/doc/compare/2fbaeec9797d...aa0e22f65193

[15:20] *** travis-ci left
[15:20] *** travis-ci joined
[15:20] <travis-ci> Doc build failed. Josh Soref 'fix find-definitions trait case comment'

[15:20] <travis-ci> https://travis-ci.org/perl6/doc/builds/140049965 https://github.com/perl6/doc/compare/aa0e22f65193...297f94d2a446

[15:20] *** travis-ci left
[15:21] <timeless> AlexDaniel: please say i can ignore that

[15:21] <timeless> oh, tabs,

[15:21] * timeless ignores

[15:21] *** ssotka joined
[15:22] <Xliff> timeless: *poof* wish granted!

[15:23] <timeless> hrm, i think graphviz.org has fallen off the internet

[15:23] * timeless doesn't like pod

[15:24] <timotimo> graphviz.org goes offline every few days :(

[15:25] <timeless> timotimo: how do they manage that?

[15:25] <timotimo> i haven't a clue

[15:25] <timotimo> perhaps they don't have money? :(

[15:27] <BrokenRobot> sudo apt-get install graphviz

[15:27] <timeless> do pod objects have a dom-tree like thing? (it doesn't look like it)

[15:28] * timeless is tempted to do the running-list approach :/

[15:29] <moritz> timeless: yes

[15:29] <timeless> moritz: what's it called?

[15:30] <moritz> timeless: all the pod nodes derive from Pod::Block, which has a @.contents attribute

[15:30] <moritz> and that basically forms the document tree

[15:30] <timeless> err

[15:30] <timeless> can a node find its parent?

[15:30] <timeless> or only its children?

[15:31] <moritz> only its children

[15:31] *** skids left
[15:31] <timeless> not very dom-ish

[15:31] <timeless> (no cycles, less gc pain, but.. not dom-ish)

[15:31] <moritz> DOM just means Document Object Model

[15:31] <moritz> basically an OO-approach to modeling a document

[15:33] <dogbert17> something is fishy with the doc builds. My last three commits have built ok according to travis but I can't see my changes on https://doc.perl6.org

[15:35] <gfldex> dogbert17: not just yours. I got changes that didn't make it since yesterday.

[15:35] <timeless> m: my @a=[1,2,3,4,5]; @a=@a[0..1]; @a.append([7]); say @a

[15:35] <camelia> rakudo-moar 9b579d: OUTPUT«[1 2 7]␤»

[15:36] <[Coke]> possible the doc build got hung.

[15:36] <AlexDaniel> dogbert17: indeed

[15:36] * [Coke] tries to remember where that lives...

[15:36] <dogbert17> could travis be affected by https://github.com/perl6/doc/issues/545

[15:36] <AlexDaniel> [Coke]: interestingly, last commit hash is reported in footer

[15:37] <timeless> is there a better way to do what i did above?

[15:37] <AlexDaniel> but other changes are not there

[15:37] <BrokenRobot> Didn't travis announce build failures for the last few commits?

[15:38] <AlexDaniel> BrokenRobot: last commit is fine

[15:38] <psch> m: my @a = ^7; @a.splice(2, 7, 7); say @a

[15:38] <camelia> rakudo-moar 9b579d: OUTPUT«[0 1 7]␤»

[15:38] <dogbert17> problem has been there since yesterday at the very least

[15:38] <AlexDaniel> BrokenRobot: see here https://travis-ci.org/perl6/doc/builds

[15:39] *** kerframil left
[15:39] <gfldex> https://doc.perl6.org/build-log/build-2016-06-24T15:15+0000.log

[15:40] <gfldex> build log looks ok. My guess would be util/sync

[15:40] <[Coke]> AlexDaniel: yah, seems like it's working. for someone who says a commit is missing... which one?

[15:41] <AlexDaniel> [Coke]: https://doc.perl6.org/language/variables.html#The_state_Declarator https://github.com/perl6/doc/commit/32cdea937f6a8116f0e8e9aed8a353bfd19d69df

[15:41] <AlexDaniel> [Coke]: still has “f ()”

[15:42] <dogbert17> [Coke]: https://github.com/perl6/doc/commit/39a5d14482

[15:43] <AlexDaniel> [Coke]: https://doc.perl6.org/routine/invert https://github.com/perl6/doc/commit/79b1cce71ab72c1f8aae584c427ff73b751e4227

[15:43] <[Coke]> AlexDaniel: just one example was fine. Verified.

[15:43] <AlexDaniel> :)

[15:44] <[Coke]> the doc build directory on hack is at 32cdea9

[15:44] <BrokenRobot> That's latest

[15:44] <AlexDaniel> and that's what I see in the footer

[15:45] <[Coke]> the generated HTML in the build dir is wrong, however.

[15:45] <[Coke]> <span class="k">sub</span> <span class="n">f</span> () {

[15:45] <[Coke]> so we could probably duplicate this failure to update locally.

[15:45] <dogbert17> [Coke] is there a precomp directory there by any chance?

[15:45] <BrokenRobot> dogbert17: yup

[15:46] <dogbert17> could we try wiping it?

[15:46] * BrokenRobot doesn't have perms to wipe it

[15:46] <dogbert17> :(

[15:46] <[Coke]> we can try, but that isn't going to be a long term fix.

[15:47] <dogbert17> agreed

[15:47] <[Coke]> there is also a "precompiled" directory

[15:47] <dogbert17> precompiled it is, my bad

[15:47] <[Coke]> that's a more likely culprit, our manual precomp attempt

[15:48] <[Coke]> (rather than perl6's builtin precomp)

[15:48] <BrokenRobot> :S

[15:49] <[Coke]>  /me: mv precompiled/ precompiled-broken

[15:51] <dogbert17> another thing with the doc builds is this comment in the travis log ...

[15:51] <dogbert17>  240/240: doc/Type/X/TypeCheck/Splice.pod          => type/X::TypeCheck::Splice

[15:51] <dogbert17> /bin/sh: 1: pygmentize: not found

[15:52] *** perlpilot left
[15:52] <AlexDaniel> isn't it ok?

[15:52] *** perlpilot joined
[15:52] <[Coke]> dogbert17: yes, that's fine.

[15:52] <[Coke]> the code first tries the executable, then tries inline::python verson

[15:52] <dogbert17> [Coke]: ok, had me worried for a sec there :)

[15:53] <[Coke]> https://github.com/perl6/doc/blob/master/htmlify.p6#L859

[15:53] <[Coke]> that logic could probably be trimmed to avoid trying to call out to pygmentize all the time.

[15:54] <dogbert17> with some luck, a lot of changes should show up after the next commit ...

[15:58] *** webstrand left
[15:58] *** webstrand_ joined
[15:59] *** domidumont left
[16:00] *** pmurias_ joined
[16:01] *** webstrand_ is now known as webstrand

[16:03] <timeless> thx psch 

[16:03] *** pmurias left
[16:11] *** huggable left
[16:17] *** boyo_ joined
[16:18] *** domidumont joined
[16:19] *** huggable joined
[16:21] *** salva left
[16:27] <BrokenRobot> The wrap segfault goes away if I add `no precompilation` to the module with the wrap.

[16:28] <BrokenRobot> [insert joke blaiming nine for everything] :)

[16:30] <pyrimidine> nine was responsible for the brexit, Zika virus, and Chernobyl (last one depending on nine's age)

[16:31] *** dupek joined
[16:32] <BrokenRobot> :)

[16:32] <gfldex> pyrimidine: please note that nine is a time traveller 

[16:32] <perlpilot> gfldex: well, why didn't he bring back the perfect Perl 6 from the future?

[16:33] <pyrimidine> gfldex: there may be times that nine wished he was a time traveller :)

[16:33] <gfldex> it would spoil the fun of making the perfect language

[16:34] <pyrimidine> nine++ # you get waaay too much guff for working on very difficult things

[16:34] <lizmat> indeed, nine is a ten!

[16:34] *** lizmat left
[16:35] *** dvinciguerra joined
[16:39] *** jast joined
[16:41] *** jrusso joined
[16:41] *** lizmat joined
[16:41] *** jrusso is now known as MadcapJake

[16:41] <awwaiid> "...it is vitally important not just to

[16:41] <awwaiid> have a complete metasystem, but to have fences that help guard the crossing

[16:42] <awwaiid> of metaboundaries." -- Alan Kay, http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html

[16:43] <perigrin> metafences.

[16:43] <awwaiid> indeed

[16:46] <AlexDaniel> .oO( metafeces… )

[16:48] *** kurahaupo joined
[16:48] <lizmat> .oO( tower of poo )

[16:48] *** webstrand left
[16:49] *** dj_goku_ left
[16:50] <nine> pyrimidine: I barely remember Chernobyl, so who knows what exactly I did back then ;)

[16:50] <[Coke]> nine: it's all the radiation damage.

[16:50] <nine> That would explain quite a lot

[16:50] <nine> Though I won't tell what exactly... would spoil the suspense ;)

[16:51] <dupek> masak, hello

[16:51] <dupek> :))

[16:51] *** cdg left
[16:53] <AlexDaniel> [Coke]: it was much easier than I thought.

[16:54] <AlexDaniel> [Coke]: OK, so I have a little problem with “needs planning” https://github.com/perl6/doc/labels/needs%20planning

[16:54] <AlexDaniel> [Coke]: it feels like we need ｢big ass issue｣ label

[16:55] <AlexDaniel> [Coke]: note that it can be removed without because these issues already have a ｢build｣ or ｢docs｣ label

[16:55] <AlexDaniel> [Coke]: that being said, it feels like a different category… what do you think?

[16:56] <AlexDaniel> [Coke]: by the way, I've also relabeled some of the closed issues. There were too few of them

[16:57] *** avenj joined
[16:57] <AlexDaniel> [Coke]: ah, and one more problem: some issues are about search problems that are associated with the build. Should we label these as ｢search｣ or as ｢build｣? Or both?

[16:58] *** Amnez777 joined
[17:01] *** avenj left
[17:01] *** avenj joined
[17:02] * timeless sighs

[17:02] <timeless> i'm sure i've seen the magic for making an array of x elements

[17:02] <timeless> python []x3 or something...

[17:03] <psch> m: my @a[3]; @a[3] = "foo";

[17:03] <camelia> rakudo-moar 9b579d: OUTPUT«Index 3 for dimension 1 out of range (must be 0..2)␤  in block <unit> at <tmp> line 1␤␤»

[17:03] <timeless> ok

[17:04] *** dj_goku joined
[17:04] *** dj_goku left
[17:04] *** dj_goku joined
[17:05] <timeless> psch: ok, this isn't working well

[17:05] <timeless> i have a list of n items

[17:05] <timeless> i want it to have j items where the last item has some other value

[17:05] <timeless> in js, i'd set the length to j and then stomp on the last value

[17:05] <timeless> splice doesn't do what i want if the array is too smal

[17:05] <timeless> l

[17:06] <timeless> m: my @a=1..7; my @b[9]; @b[8]=100; say @a || @b

[17:06] <camelia> rakudo-moar 9b579d: OUTPUT«[1 2 3 4 5 6 7]␤»

[17:06] <timeless> there's probably an or operator that would work, but i haven't found it

[17:06] <psch> ...what?

[17:06] <psch> what do you want to have as result there?

[17:07] <AlexDaniel> 1..8 ?

[17:07] <AlexDaniel> ah

[17:07] <AlexDaniel> 1..7, 100

[17:07] <grondilu> just concatenate

[17:07] <grondilu> use comma and slips

[17:07] <timeless> m: my @a=1..7; my @b[9]; @b[8]=100; say @a[0..4] || @b

[17:07] <camelia> rakudo-moar 9b579d: OUTPUT«(1 2 3 4 5)␤»

[17:07] <timeless> slips?

[17:08] <grondilu> oh hang on

[17:08] <AlexDaniel> m: my @a=1..7; my @b[9]; say (|@a, 100)

[17:08] <camelia> rakudo-moar 9b579d: OUTPUT«(1 2 3 4 5 6 7 100)␤»

[17:08] <AlexDaniel> m: my @a=1..7; say (|@a, 100)

[17:08] <camelia> rakudo-moar 9b579d: OUTPUT«(1 2 3 4 5 6 7 100)␤»

[17:08] <grondilu> m: my @a = 1..7; my @b[9]; @b[8] = 100; say @a Z// @b

[17:08] <camelia> rakudo-moar 9b579d: OUTPUT«(1 2 3 4 5 6 7)␤»

[17:09] <grondilu> m: my @a = 1..7; my @b[9]; @b[8] = 100; say (|@a, |Mu xx *) Z// @b

[17:09] <camelia> rakudo-moar 9b579d: OUTPUT«(1 2 3 4 5 6 7 (...))␤»

[17:09] <grondilu> hum

[17:10] <jdv79> Zoffix: i only saw a ~4s parse time improvement from my last build to today.  last was june 2 or so.

[17:10] <grondilu> m: my @a = 1..7; my @b[9]; @b[8] = 100; say (|@a, |(Mu xx *)) Z// @b

[17:10] <camelia> rakudo-moar 9b579d: OUTPUT«Type check failed in binding x; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»

[17:10] <jdv79> still cool that its trending down

[17:10] <grondilu> m: my @a = 1..7; my @b[9]; @b[8] = 100; say (|@a, |(Any xx *)) Z// @b

[17:10] <camelia> rakudo-moar 9b579d: OUTPUT«(1 2 3 4 5 6 7 (Any) 100)␤»

[17:10] <jdv79> 68s to 64s

[17:11] *** sno left
[17:11] *** spider-mario joined
[17:11] <grondilu> m: my @a = 1..7; my @b[9]; @b[8] = 100; say @a <<//<< @b

[17:11] <camelia> rakudo-moar 9b579d: OUTPUT«[1 2 3 4 5 6 7 1 2]␤»

[17:12] <grondilu> m: my @a = 1..7; my @b[9]; @b[8] = 100; say @a >>//<< @b

[17:12] <camelia> rakudo-moar 9b579d: OUTPUT«Lists on either side of non-dwimmy hyperop of infix:<//> are not of the same length␤left: 7 elements, right: 9 elements␤  in block <unit> at <tmp> line 1␤␤»

[17:12] * grondilu gives up

[17:12] <timeless> that last error needs help

[17:12] <timeless> oh

[17:12] <grondilu> no it's normal

[17:12] <timeless> it's actually correct

[17:12] <psch> m: my @a = ^7; my @b[9]; @b[8] = 100; @a <<[//=]<< @b; say @b # this needs help :P

[17:12] <camelia> rakudo-moar 9b579d: OUTPUT«Non ast passed to WANTED: NQPMu␤Non-QAST node visited NQPMu␤Weird node visited: NQPMu␤Weird node in analyze: NQPMu␤===SORRY!===␤Unknown QAST node type NQPMu␤»

[17:13] <grondilu> that was just me making a desperate attempt

[17:13] <psch> similarly here

[17:13] <grondilu> lol, "weird mode", never seen that before.

[17:13] <psch> *n*ode :)

[17:13] <psch> still not complete sure i understand correctly, but it does sound like "leave all defined elems alone, appends if more exists on the rhs"

[17:14] <grondilu> oh yeah.  (jeez I need to change glasses)

[17:14] <AlexDaniel> what are you trying to do? I still don't understand

[17:14] <psch> AlexDaniel: last line is my best guess vOv

[17:14] <timeless> i'm trying to maintain a TOC

[17:14] <timeless> clipping elements deeper than my current point

[17:14] <timeless> and not worrying if i'm missing things higher

[17:14] <grondilu> AlexDaniel: he kind of want to do Z// but greedily (if that makes sense)

[17:14] <timeless> not a tree toc, a flat "who's my parent" view

[17:14] <psch> so given @a = 0, 1, 2; and @b = Any, Any, Any, Any, 4; the result should be @a = 0, 1, 2, Any, 4

[17:15] <psch> that's how i understood it

[17:15] <grondilu> like from 1, 2, 3 and Any, Any, Any, pi how do you get 1, 2, 3, pi

[17:15] <timeless> psch: right

[17:16] <[Coke]> AlexDaniel: both, I guess.

[17:16] <[Coke]> and needs planning can be the opposite of LHF, sure.

[17:17] <grondilu> do we need a greedy zip metaop?

[17:17] <AlexDaniel> what means greedy?

[17:17] <AlexDaniel> do you mean roundrobin?

[17:17] <grondilu> oh, maybe

[17:17] *** firstdayonthejob joined
[17:17] *** kid511 left
[17:17] <timotimo> undersg: yourule ntand td prog dont 1 of threaderamminumber hreaderammind progg

[17:17] <AlexDaniel> it's not an operator though

[17:17] <grondilu> I don't know that word actually

[17:18] <AlexDaniel> m: my @a = 1..4; my @b = 5..6; roundrobin @a, @b

[17:18] <camelia> rakudo-moar 9b579d: ( no output )

[17:18] <AlexDaniel> m: my @a = 1..4; my @b = 5..6; say roundrobin @a, @b

[17:18] <camelia> rakudo-moar 9b579d: OUTPUT«((1 5) (2 6) (3) (4))␤»

[17:19] <grondilu> m: my @a = 1..7; my @b[9]; @b[8] = 100; say flat roundrobin @a, @b

[17:19] <camelia> rakudo-moar 9b579d: OUTPUT«(1 (Any) 2 (Any) 3 (Any) 4 (Any) 5 (Any) 6 (Any) 7 (Any) (Any) 100)␤»

[17:20] <AlexDaniel> stupid roundrobin has no :with parameter

[17:20] <timotimo> https://robertoconcerto.blogspot.de/2013/03/my-hardest-bug.html - a fun read

[17:20] <grondilu> by greedy I meant that it would act like the zip operator except that it would fill the shortest parameter with Any or something

[17:20] <AlexDaniel> oh right #127992

[17:20] <AlexDaniel> https://rt.perl.org/Ticket/Display.html?id=127992

[17:21] <grondilu> <1 2> GreedyZ~ <a b c> would give 1a 2b c

[17:21] <AlexDaniel> m: say roundrobin <1 2>, <a b c>

[17:21] <camelia> rakudo-moar 9b579d: OUTPUT«((1 a) (2 b) (c))␤»

[17:21] <AlexDaniel> except that roundrobin has no :with so you can't really pass ~

[17:22] <grondilu> yeah it's not a metaop

[17:22] <AlexDaniel> it does not have to be a metaop to have :with

[17:22] <AlexDaniel> m: say zip <1 2>, <a b c>, :with([~])

[17:22] <camelia> rakudo-moar 9b579d: OUTPUT«No such method 'CALL-ME' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[17:22] <grondilu> ok *

[17:22] <AlexDaniel> m: say zip <1 2>, <a b c>, :with(&[~])

[17:22] <camelia> rakudo-moar 9b579d: OUTPUT«(1a 2b)␤»

[17:22] *** addison joined
[17:22] <grondilu> oh that's cool

[17:28] <AlexDaniel> [Coke]: any better name than “needs planning”? It looks a bit weird

[17:29] <psch> m: my @a = ^4; my @b = Any, Any, Any, Any, Any, 5; @a = |@a, |@b[+@a..*]; say @a

[17:29] <camelia> rakudo-moar 9b579d: OUTPUT«[0 1 2 3 (Any) 5]␤»

[17:30] <psch> been thinking waaay to complicated there

[17:31] *** brrt joined
[17:31] <grondilu> m: my @a = 1..7; my @b[9]; @b[8] = 100; say @a ... * Z// @b

[17:31] <camelia> rakudo-moar 9b579d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Only identical operators may be list associative; since '...' and 'Z//' differ, they are non-associative and you need to clarify with parentheses␤at <tmp>:1␤------> 037; my @b[9]; @b[8] = 100; say @a ..…»

[17:31] <grondilu> m: my @a = 1..7; my @b[9]; @b[8] = 100; say (@a ... *) Z// @b

[17:31] <camelia> rakudo-moar 9b579d: OUTPUT«(1 2 3 4 5 6 7 8 9)␤»

[17:32] <grondilu> well that's not what I expected at all

[17:32] *** fhorck joined
[17:32] <grondilu> m: my @a = 1..7; my @b[9]; @b[8] = 100; say (@a ... *)[^10]

[17:32] <camelia> rakudo-moar 9b579d: OUTPUT«(1 2 3 4 5 6 7 8 9 10)␤»

[17:32] <grondilu> oh

[17:32] <psch> m: my @a = 100, 200, 300; say @a ... 10

[17:32] <camelia> rakudo-moar 9b579d: OUTPUT«()␤»

[17:32] <grondilu> oh course

[17:32] <grondilu> *of

[17:32] <grondilu> m: my @a = 1..7; my @b[9]; @b[8] = 100; say (@a, Any ... *)[^10]

[17:32] <camelia> rakudo-moar 9b579d: OUTPUT«Use of uninitialized value $b of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at <tmp> line 1␤===SORRY!===␤Method 'pred' not found for invocant of class 'Any'␤»

[17:32] *** grassass joined
[17:33] <grondilu> how do I make an infinite list from a finite one?  should be easy

[17:33] <psch> xx * vOv

[17:34] * psch goes back to poking the jvm issue

[17:34] <grondilu> m: my @a = 1..7; my @b[9]; @b[8] = 100; say (flat @a, (Any xx *))[^10]

[17:34] <camelia> rakudo-moar 9b579d: OUTPUT«(1 2 3 4 5 6 7 (Any) (Any) (Any))␤»

[17:34] <grondilu> m: my @a = 1..7; my @b[9]; @b[8] = 100; say (flat @a, (Any xx *)) Z// @b

[17:34] <camelia> rakudo-moar 9b579d: OUTPUT«(1 2 3 4 5 6 7 (Any) 100)␤»

[17:34] <AlexDaniel> [Coke]: to me it sounds like it creates a wall for contributors

[17:35] <AlexDaniel> [Coke]: “oh, it needs planning… I'm not going to hack on it!”

[17:35] <BrokenRobot> .oO( Planning for what? )

[17:38] <AlexDaniel> BrokenRobot: https://github.com/perl6/doc/issues?q=label%3A%22needs+planning%22

[17:39] *** gtodd joined
[17:39] <AlexDaniel> it's not ｢refactoring｣, it's not necessarily ｢plans｣…

[17:39] <gtodd> must ... have ... damian's ... vim config ... 

[17:39] <gtodd> even though it will not make me smart muscular and funny ... 

[17:39] <BrokenRobot> AlexDaniel: well, what has to be done for "needs planning" tickets. Who is doing the planning? IMO, "feedback needed" or something like that is more apropo

[17:40] <BrokenRobot> m: 'foo' does role { method uc { say "We're in! Someone's trying to uppercase {self}"; nextsame; } }; say 'foo'.uc;

[17:40] <camelia> rakudo-moar 9b579d: OUTPUT«We're in! Someone's trying to uppercase foo␤FOO␤»

[17:40] *** brrt left
[17:40] <AlexDaniel> BrokenRobot: it would be nice to have a label for “big” issues

[17:41] <BrokenRobot> Is the reason the above doesn't cross module boundaries is because each file has it's own namespace so a "foo" in a different file is a different object?

[17:41] *** brrt joined
[17:43] <BrokenRobot> AlexDaniel: the label is useless if no one bothers to act and think on the big issues. "needs planning" tells me there's something blocking progress on the issue and someone somewhere is meant to do something to unblock it. It's entirely unclear who that someone should be.

[17:43] <AlexDaniel> BrokenRobot: yep, that's why I dislike it

[17:44] <AlexDaniel> ｢think big｣ ? :)

[17:44] <andreoss> Configure.pl requires perl 5.10, but modules it uses were not in CORE until 5.014

[17:44] <BrokenRobot> I stand by my proposal :)

[17:44] <andreoss> in rakudo

[17:45] <AlexDaniel> BrokenRobot: ｢feedback needed｣? but this kinda applies to small issues as well

[17:46] <psch> how about "someone has to make impactful design decisions so this can be solved"

[17:46] <psch> 'cause that's what i think "needs planning" means

[17:46] <gtodd> I can haz the vim!  https://youtu.be/9u6O0dLuqhI

[17:46] <psch> but it's a bit clearer and all :P

[17:47] <BrokenRobot> psch: that's bad, 'cause it places the decision on a non-existant entity :)

[17:47] <BrokenRobot> andreoss: what would be a good way to resolve it?

[17:47] <psch> fair enough

[17:47] <AlexDaniel> bump it to perl 5.14?

[17:47] <BrokenRobot> :S

[17:47] <andreoss> AlexDaniel: yep, consider my PR

[17:47] <BrokenRobot> Just over a module?

[17:48] <BrokenRobot> -1 from me

[17:48] <AlexDaniel> v5.10 is ancient anyway

[17:48] <AlexDaniel> just like v5.14 is

[17:48] <gtodd> maybe plain "feedback needed" and "design feedback needed"   are different enough

[17:48] <BrokenRobot> That's the only thing I have on one of the hosts I manage

[17:49] <[Coke]> AlexDaniel: if the goal isn't to create a wall there, what is it?

[17:49] <[Coke]> I'm fine with "BIG" to contrast with "LHF"

[17:50] <AlexDaniel> [Coke]: to make it easier to track big issues (as these tend to have lots of useful discussions)

[17:50] <grondilu> gtodd: Damian's talk about Vim as a Perl IDE is nice but how well does it work in Perl 6?

[17:50] <AlexDaniel> [Coke]: ｢BIG｣ or ｢big｣? :)

[17:51] <[Coke]> don't care

[17:51] <[Coke]> I feel the same way about this tag as I do about LHF

[17:51] <gtodd> grondilu: he uses vim with perl6 too afaict

[17:52] <grondilu> yeah but he did not show anything in Perl 6 in this talk

[17:52] <grondilu> I did not look at his tarball though

[17:53] *** acrussell left
[17:53] <gtodd> grondilu: he must be good at *.vim vimscripting ... 

[17:53] <grondilu> he sure is

[17:53] <grondilu> I'm also intrigued by the fact that he does not use syntax highlighting.  Any one here does not either?

[17:53] <BrokenRobot> grondilu: mst doesn't

[17:54] <BrokenRobot> I tried it once... I think I could get used to it, but I don't really care one way or another. I think syn-highlkighte code looks prettier :)

[17:54] <grondilu> I can understand that in the end it's a distraction but it's also useful to spot syntax errors.

[17:55] <AlexDaniel> grondilu: yeah. The part about no syntax highlighting is a bit dumb :/

[17:55] * AlexDaniel hides

[17:55] <gtodd> grondilu: I think flashng informative stuff at the bottom of the buffer and automating the inserting of syntax bits makes it ieasier to avoid ...

[17:56] <grondilu> though to be fair if I had a Vim script that could detect syntax errors and highlight them in real time I would maybe consider not using syntax highlighting.

[17:56] <[Coke]> I don't particularly care for syntax highlight.

[17:58] <grondilu> also sometimes a code can be correct but not at all what you wanted because you forgot some delimitor or something.  For instance with here-doc.  Syntax highlighting is very reassuring for that.

[17:58] <gtodd> in vim the colorful syntax flashes so much that it exercises bugs in terminfo/ncurses (on local or remote machines and/or inside tmux/screen for extra fun) and scrambles my screen so Ctrl-L required so often I turn it off.  Or set an event to autocommand :redraw! 

[18:03] <gtodd> Vim::X adds coolness for both vim and perl ...  https://metacpan.org/pod/Vim::X ... would be neat if perl6 could be linked to vim somehow so writing extensions in perl6 would allow for tricked out vim bells/whistsl. Might be a way to gain mind share too ... "want to code in ruby with vim but not learn vimscript ?  ... learn perl6 instead !"    :) 

[18:03] *** boyo_ left
[18:05] <pmurias_> grondilu: I don't use syntax highlighting atm, I turn it one when I bored and want things to be more colorfull

[18:05] *** acrussell joined
[18:06] *** pmurias_ is now known as pmurias

[18:06] <gtodd> OTOH  https://vimeo.com/63116209   <-- great video about asynchronous dispatch with dispatch.vim plugin :)

[18:07] <gtodd> there's more to vim than colour ;)

[18:12] *** kalkin-_ joined
[18:12] <kalkin-_> hi

[18:12] <BrokenRobot> \o

[18:12] <kalkin-_> I can't find any documentation how the module versioning should work

[18:12] <kalkin-_> I tried S11, but i can't find there any specification of <ver:123123> keyword

[18:13] <BrokenRobot> That'll be in... um S22?

[18:14] <BrokenRobot> Well, there are some mentions of it, but it's a historical document and may not match reality.

[18:14] <kalkin-_> BrokenRobot: I'm currently looking at Software::License. It has a class Software::License:ver<0.05>

[18:15] <BrokenRobot> Yeah, that's how you specify the version for a module.

[18:15] <BrokenRobot> m: say 0.05 before 6.c

[18:15] <camelia> rakudo-moar 9b579d: OUTPUT«Method 'c' not found for invocant of class 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[18:15] <BrokenRobot> m: say v0.05 before v6.c

[18:15] <camelia> rakudo-moar 9b579d: OUTPUT«True␤»

[18:15] <kalkin-_> is 'ver' obsolete? and i should use meta data from S22, with full 'version<1.2.3>'?

[18:15] <BrokenRobot> Oh

[18:16] <BrokenRobot> m: class Foo:ver<2.3> {}

[18:16] <camelia> rakudo-moar 9b579d: ( no output )

[18:16] <BrokenRobot> m: class Foo:version<2.3> {}

[18:16] <camelia> rakudo-moar 9b579d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Cannot use adverb version on a type name (only 'ver' and 'auth' are understood)␤at <tmp>:1␤------> 3class Foo:version<2.3>7⏏5 {}␤    expecting any of:␤        generic role␤»

[18:16] <BrokenRobot> kalkin-_: no, :ver<> seems to be the right one

[18:16] <kalkin-_> That's a very helpful error output.

[18:16] <kalkin-_> BrokenRobot: thanks

[18:22] *** kalkin-_ is now known as kalkin-

[18:24] *** [particle] joined
[18:26] <kalkin-> As far as I understand a module can only deliver one version, because the version is parsed from META6.json, right? I can't have a module which provides multiple version implementations, can I?

[18:27] *** brrt left
[18:28] <gfldex> grondilu: i switched off syntax highlighting for perl * because I found it unreliable. My brain is lazy and will fool me in believen a thing is a different thing or not there at all if it is not presented in the right colour.

[18:29] <gfldex> no colours will solve that problem

[18:29] *** captain-adequate joined
[18:29] *** andreoss left
[18:29] <gfldex> having wrongness in red has lots of appeal tho

[18:30] *** cdg joined
[18:31] <pmurias> grondilu: it would be great to have Perl 6 IDE support, it would be best if it was split into an editor agnostic part so it could be shared by the vim/emacs/atom/etc. peopel

[18:34] *** wamba joined
[18:35] *** [particle] left
[18:35] *** Actualeyes left
[18:36] *** [particle] joined
[18:39] *** wtw left
[18:42] *** brrt joined
[18:48] *** itaipu joined
[18:49] *** sufrostico left
[18:50] *** pmurias left
[18:52] *** pmurias joined
[18:52] *** grondilu left
[18:53] *** grondilu joined
[18:53] *** grondilu left
[18:53] *** grondilu joined
[18:57] *** dvinciguerra_ joined
[18:59] <BrokenRobot> What is (| is raw) is a signature?

[19:00] *** dvinciguerra left
[19:02] <BrokenRobot> m: say &say.signature

[19:02] <camelia> rakudo-moar 9b579d: OUTPUT«(| is raw)␤»

[19:03] <BrokenRobot> And I guess my real question is how to get args from it?

[19:03] <BrokenRobot> &say.wrap: -> (| is raw) { put "We're in! Someone's trying to print {...}"; nextsame; }; say 'foo';

[19:04] <lizmat> | is that it doesn't touch the parameters basically, you see that in proto's

[19:04] <BrokenRobot> Hum. Does that mean there's no way to wrap a &say and use the pass args, since the wrap must much the signature?

[19:05] <BrokenRobot> *passed

[19:05] <lizmat> must the wrap match the signature ?

[19:05] <lizmat> if you wrap the proto, you wouldn't need to /

[19:05] <lizmat> ?

[19:05] <lizmat> which is what &say is, no?

[19:06] <lizmat> m: say &say.dispatcher

[19:06] <camelia> rakudo-moar 9b579d: OUTPUT«(Mu)␤»

[19:06] <lizmat> hmmm...

[19:06] <lizmat> m: proto foo {}; say &foo.dispatcher

[19:06] <camelia> rakudo-moar 9b579d: OUTPUT«(Mu)␤»

[19:06] <BrokenRobot> m: &say.wrap: -> (*@args) { put "We're in! Someone's trying to print @args[]"; nextsame; }; say 'foo';

[19:06] <camelia> rakudo-moar 9b579d: OUTPUT«We're in! Someone's trying to print ␤Attempt to return outside of any Routine␤  in block <unit> at <tmp> line 1␤␤»

[19:06] <lizmat> m: say &say.is_dispatcher

[19:06] <camelia> rakudo-moar 9b579d: OUTPUT«True␤»

[19:07] <BrokenRobot> Oh, I guess the sig needs to match for nextsame()

[19:07] <lizmat> there you go

[19:07] <lizmat> afk&

[19:07] *** lizmat left
[19:07] * BrokenRobot looks up what is_dispatcher stuff is about

[19:08] <BrokenRobot> no docs :/

[19:09] *** mohae_ left
[19:09] *** FROGGS joined
[19:09] *** mohae joined
[19:09] <BrokenRobot> Does anyone know what "there you go" meant? :)

[19:09] *** lizmat joined
[19:09] * BrokenRobot feels like an idiot

[19:10] <lizmat> sorry

[19:10] <gfldex> BrokenRobot: https://github.com/rakudo/rakudo/search?utf8=%E2%9C%93&q=is_dispatcher

[19:10] <lizmat> didn't make you want to feel like an idiot

[19:10] <gfldex> no touchy touchy :)

[19:11] <AlexDaniel> oh, that weird feeling when you see somebody talking about how great his emacs/vim config is, but whenever he needs to delete the last word he presses backspace 5 times… maybe that's not an issue to some people, but to me it feels like something went really wrong with that config…

[19:11] <geekosaur> sometimes it's not config

[19:12] <geekosaur> I still have trouble using PC-style editing keys vs. emacs keys, so I end up arrowing to the end of a line instead of hitting End

[19:14] <BrokenRobot> gfldex: you mean it's an internal thing?

[19:14] <lizmat> BrokenRobot: no idea what's going on...  and need to afk&

[19:15] <parabolize> I backspace pretty often in vim.

[19:15] <BrokenRobot> I was just trying to figure out how to wrap &say while still being able to call it from within the wrap and nextsame fails

[19:15] <parabolize> BrokenRobot: its tested in S12-introspection/methods.t

[19:17] <BrokenRobot> That doesn't really help me since I don't know what a dispatcher is :)

[19:17] <BrokenRobot> Or why it's relevant to the wrap thing :P

[19:17] <gfldex> the dispatcher is the thing that picks the right multi candidate

[19:17] <gfldex> or does some other magic with methods

[19:17] <parabolize> is there a better way in vim? Esc c b seems a little unwieldy

[19:18] <geekosaur> control-w is erase word backwards

[19:19] <perlpilot> (and has been since ... forever)

[19:19] <parabolize> oh, that is nice

[19:19] <BrokenRobot> m: &say.wrap: -> (*@args) { put "We're in! Someone's trying to print @args[]"; say(@args); }; say 'foo';

[19:19] <camelia> rakudo-moar 9b579d: OUTPUT«(timeout)We're in! Someone's trying to print ␤We're in! Someone's trying to print ␤We're in! Someone's trying to print ␤We're in! Someone's trying to print ␤We're in! Someone's trying to print ␤We're in! Someone's trying to print ␤We're in! Som…»

[19:19] <FROGGS> m: &say.wrap: -> (*@args) { put "We're in! Someone's trying to print @args[]"; ::CORE::<say>(@args); }; say 'foo';

[19:19] <camelia> rakudo-moar 9b579d: OUTPUT«We're in! Someone's trying to print ␤Cannot find method 'Nil' on object of type Array␤  in block <unit> at <tmp> line 1␤␤»

[19:20] <FROGGS> m: &say.wrap: -> (*@args) { put "We're in! Someone's trying to print @args[]"; ::CORE::<&say>(@args); }; say 'foo';

[19:20] <geekosaur> it's an old BSD-ism, and quite a few younger folks simply don't know it's there

[19:20] <FROGGS> m: &say.wrap: -> (*@args) { put "We're in! Someone's trying to print @args[]"; CORE::<say>(@args); }; say 'foo';

[19:20] <camelia> rakudo-moar 9b579d: OUTPUT«(timeout)We're in! Someone's trying to print ␤We're in! Someone's trying to print ␤We're in! Someone's trying to print ␤We're in! Someone's trying to print ␤We're in! Someone's trying to print ␤We're in! Someone's trying to print ␤We're in! Som…»

[19:20] <camelia> rakudo-moar 9b579d: OUTPUT«We're in! Someone's trying to print ␤Cannot find method 'Nil' on object of type Array␤  in block <unit> at <tmp> line 1␤␤»

[19:20] <AlexDaniel> hm, what is ctrl+backspace in vim?

[19:21] <AlexDaniel> does nothing here, I'm wondering if it actually does nothing?

[19:22] <geekosaur> if you're running in a terminal, whether it does anything is up to the terminal

[19:22] <geekosaur> some of them don't send anything for ctrl-backspace

[19:22] <AlexDaniel> ah

[19:22] <AlexDaniel> right

[19:23] *** zakharyas joined
[19:23] <BrokenRobot> Figured it out:

[19:23] <BrokenRobot> m: &say.wrap: sub (|c) { put "We're in! Someone's trying to print {c}"; nextsame; }; say 'foo';

[19:23] <camelia> rakudo-moar 9b579d: OUTPUT«We're in! Someone's trying to print foo␤foo␤»

[19:25] *** mantovani joined
[19:26] *** darutoko left
[19:32] *** zakharyas left
[19:44] *** mantovani left
[19:47] <kalkin-> Say i have a file lib/Foo/Bar.pm6 Contaning class Foo::Bar, then what do i import when i do use Foo::Bar? The class or the module?

[19:48] <timotimo> "use" will use the name you give it to locate the file, then it imports everything in it

[19:49] <timotimo> so you'll end up with a Foo::Bar you can then use

[19:49] <timotimo> that's at least how i understand it :)

[19:49] <kalkin-> i see

[19:50] <moritz> note that Foo::Bar is resolved through GLOBAL:: though, not through imports

[19:50] <Xliff> \o/

[19:50] <kalkin-> camelia: class Foo::Bar:ver<0.4> {}; class Foo::Bar:ver<0.3> {};

[19:50] <Xliff> I was able to reproduce my error in a simple use case

[19:50] <Xliff> https://gist.github.com/Xliff/96e48eaad469e42e3c604380a73a918a

[19:51] <kalkin-> camelia: class Foo::Bar:ver<0.4> {}; class Foo::Bar:ver<0.3> {}; say "Yeah!"

[19:51] <kalkin-> m: class Foo::Bar:ver<0.4> {}; class Foo::Bar:ver<0.3> {};

[19:51] <camelia> rakudo-moar 9b579d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol Foo::Bar␤at <tmp>:1␤------> 3Bar:ver<0.4> {}; class Foo::Bar:ver<0.3>7⏏5 {};␤    expecting any of:␤        generic role␤»

[19:52] <Xliff> So if anyone can tell me rakudo can't manipulate the returned struct, please let me know!

[19:52] <kalkin-> My assumption is that class Foo::Bar would be different if they have different versions

[19:52] <FROGGS> Xliff: that rings a bell, let me think...

[19:54] <FROGGS> I bet a nqp::bindattr_o will do...

[19:54] <kalkin-> So how do i defined two different versions of the same class, by reusing the :ver<1.2.3> smiley?

[19:55] <perlpilot> kalkin-: normally you wouldn't define them in the same file.

[19:55] <FROGGS> kalkin-: or at least not in the same scope

[19:56] <Xliff> FROGGS: :-O

[19:56] <Xliff> So THAT explains why you do that! 

[19:56] <Xliff> LOL! Mystery solved!

[19:56] <kalkin-> so how would i split it up?

[19:56] <FROGGS> :D

[19:56] <Xliff> Well.... gotta test it first.

[19:56] <FROGGS> Xliff: I've not enough brains right now to explain why that happens, or how to properly solve it

[19:57] <BrokenRobot> New blog post ": http://perl6.party/post/Exploiting-Perl-6-Code-From-Down-The-Dependency-Chain

[19:57] <BrokenRobot> New blog post "Exploiting Perl 6 Code From Down The Dependency Chain": http://perl6.party/post/Exploiting-Perl-6-Code-From-Down-The-Dependency-Chain

[19:57] <BrokenRobot> .oO( fat fingers :( )

[19:57] *** sno joined
[19:58] <kalkin-> should i overwrite somehow EXPORT::DEFAULT ?

[20:00] <Xliff> BrokenRobot: Oooh! You suffer from those, too?

[20:00] <Xliff> I swear, my fingers need a diet!

[20:00] <BrokenRobot> Xliff: the fingers is the last part of my body that is in dire need of a diet... but yeah :)

[20:02] <Xliff> BrokenRobot: Oh... that sounds disturbingly familiar.

[20:02] <Xliff> We should start a club =)

[20:02] <BrokenRobot> :)

[20:02] <perlpilot> BrokenRobot: I'm not sure if you deserve a ++ or a -- for that article  ;)

[20:03] <BrokenRobot> perlpilot: += 0 ? :)

[20:03] <perlpilot> BrokenRobot++ for increased awareness.

[20:04] <Xliff> FROGGS: You mean this? -- https://github.com/perl6/nqp/blob/master/docs/ops.markdown#bindattr

[20:04] <Xliff> My nqp-foo is non-existant.

[20:04] * parabolize wants a Hands-On Workshop: Weatherapp (Part 4)

[20:05] *** kalkin- left
[20:05] <FROGGS> Xliff: https://github.com/FROGGS/p6-XML-LibXML/blob/c28bf8fb60164d238bd17c84e903839a52746539/lib/XML/LibXML/C14N.pm#L25

[20:05] <FROGGS> Xliff: and yes, the doc is right

[20:06] *** stevieb9 left
[20:06] *** kalkin- joined
[20:07] <kalkin-> did I miss something?

[20:09] <timotimo> no, but we missed you

[20:09] <perlpilot> we'll aim better next time  ;)

[20:10] <kalkin-> :)

[20:11] <Xliff> FROGGS: LOL! That's exactly what I was trying to do. ^^

[20:12] *** _mg_ joined
[20:13] <timotimo> if only i had known this yesterday ...

[20:13] <timotimo> AFL_SKIP_CRASHES is a thing that i would really have needed

[20:14] <kalkin-> Any examples of modules using different :ver<1.2.3> smileys?

[20:15] *** sufrostico joined
[20:18] *** ZoffixMobile joined
[20:18] *** huggable left
[20:19] <ZoffixMobile> I have a Gist...something in the ecosystem that has a :ver<> on it

[20:19] <ZoffixMobile> Lately, I stopped using them since our installers seem to go just by META file anyway

[20:20] <ZoffixMobile> And for a good reason. a dist should have one version not different files with different versions, IMO

[20:22] *** TEttinger joined
[20:22] *** acrussell left
[20:24] <FROGGS> aye

[20:24] <timotimo> so

[20:24] <timotimo> i bet peopl in here know bash scripting

[20:24] <kalkin-> Ok so it would be fine for me to release Foo::Bar which has in META6.json set version: 0.1, and then change API release the same way via META6.json the version 0.2. Later in some project i just define depends in META6.json to Foo::Bar:ver<0.2> and panda/zef will do the magic?

[20:24] <timotimo> i'm for-looping over a thing, and i want to be able to abort the whole thing before it runs to completion

[20:24] <perlpilot> timotimo: break

[20:24] <timotimo> so, || break aftre the program?

[20:25] <timotimo> i'm not

[20:25] <timotimo> not sure it exits with nonzero when i ctrl-c it

[20:25] <ZoffixMobile> kalkin-, yeah

[20:25] <kalkin-> ZoffixMobile: yeah, like in theorey, yeah, or in practice? :)

[20:25] <kalkin-> will panda/zef do the magic?

[20:25] <timotimo> OK, it's 1 when i ctrl-c

[20:27] <ZoffixMobile> kalkin-, yeah in practice :) I think they may be ignoring :ver in classes altogether.

[20:27] <kalkin-> ZoffixMobile: cool thanks

[20:28] <kalkin-> now let's just hope we never get in to a Left::Pad:ver<0.2> being removed from package repo :)

[20:28] <ZoffixMobile> :)

[20:28] <mst> don't worry, the people behind CPAN have a spine.

[20:28] <perlpilot> Eventually, I would guess we'd obtain tools (like Dist::Zilla maybe?) so that we don't have the version information in two places

[20:29] *** _mg_ left
[20:29] <kalkin-> we need more p2p file storage

[20:29] <kalkin-> something like freenet or gnunet

[20:29] <ZoffixMobile> Yeah, github is a temporary thing

[20:29] <FROGGS> (for use as the module ecosystem)

[20:29] <ZoffixMobile> Though it doesn't look like anyone has will/time to work on a better system :)

[20:29] *** domidumont left
[20:30] <FROGGS> ohh, I was working on using cpan...

[20:30] * kalkin- dreams some times of a panda/pip/gem like installer which is backed by something bittorrent like

[20:36] *** acrussell joined
[20:36] *** ZoffixMobile left
[20:37] *** lichtkind joined
[20:41] *** itaipu left
[20:46] *** itaipu joined
[20:48] *** acrussell left
[20:50] *** _ramix_ joined
[20:50] *** addison left
[20:56] <perlpilot> anyone remember the other day (last week?) when I was talking about overhearing two of my coworkers mention that they wish they could use Perl 6?

[20:57] <AlexDaniel> yea

[20:57] *** itaipu left
[20:57] <perlpilot> One of them now makes it point to say loudly in my direction "... if only it [Rakudo] were *fast* enough."

[21:01] *** ptolemarch joined
[21:04] *** _ramix_ left
[21:04] <mspo> kalkin-: what does that gain?

[21:05] *** inokenty left
[21:09] *** FROGGS left
[21:11] *** brrt left
[21:12] *** sno left
[21:13] *** sno joined
[21:15] *** addison joined
[21:15] *** mcmillhj left
[21:15] *** wamba left
[21:16] *** ZoffixMobile joined
[21:16] <ZoffixMobile> perlpilot, tell them to get a faster computer :p

[21:16] <pmurias> mst: what is the proper way to prevent a left-pad style situation?

[21:16] * ZoffixMobile might get to play around with a 30-core beast this weekend

[21:17] <kalkin-> mspo: btw pmurias comment is one of benefits of censore free environment, which p2p networks try achieve

[21:18] <mst> pmurias: herein the perl response to the last legal threat we got over a module name: http://p3rl.org/Nagios::Plugin

[21:18] <kalkin-> mspo: also i keep to my heart the motto “Never trust the authorities” and a central repo is a “fashist” regime

[21:19] <kalkin-> take the fashist regime with a grain of salt :)

[21:19] <mspo> who controls namespaces and stuff?

[21:19] <mspo> majority rules?

[21:19] <ZoffixMobile> I still laugh at this "Honestly, I'd've put it in the public domain but the idea of somebody restributing it under the WTFPL amuses me too much."

[21:19] <kalkin-> mspo: hash rules

[21:20] <ZoffixMobile> mspo, which namespaces? :)

[21:20] <ZoffixMobile> mspo, in Perl 6 multiple authors can have the same module name :)

[21:21] *** inokenty joined
[21:24] <kalkin-> And the authors name could you map to a gpg fingerprint. So you fetch the git commit tagged with version v1.2.3 and signed by the authors fingerprint

[21:24] <kalkin-> signed by the authors gpg key of course

[21:25] *** dupek left
[21:27] <pmurias> mst: wouldn't replacing left-pad with a package explaining the situation still lead to breakage?

[21:27] *** abraxxa left
[21:28] <kalkin-> pmurias: i think the only valid replacement would be any black box implementing exactly the same api

[21:28] <kalkin-> but even that would be questionable

[21:29] <mst> pmurias: left-pad was only deleted because they nuked one of the author's other packages in response to a legal threat

[21:30] <mst> pmurias: plus he wouldn't be able to delete from backpan, and you'd expect pause admins to re-upload a tombstone release that works while warning, I think (certainly I'd advocate for such a thing is somebody deleted a significant dependency)

[21:31] *** kid51 joined
[21:33] <pmurias> mst: the tombstone Nagios::Plugin authors seems to have moved to Monitoring::Plugin, I assume the left-pad author wouldn't agree to something like that

[21:34] <AlexDaniel> [Coke]: there's one more category in issues. “duplicate of #155”

[21:34] *** ZoffixMobile left
[21:34] <mspo> I mean what if I wanted to take over a package

[21:35] <mspo> what's stopping me?

[21:35] <AlexDaniel> [Coke]: I can see 9, but there are probably more

[21:37] <perlpilot> mspo: why do you think you need to be stopped? ;-)

[21:38] <mst> pmurias: they'd already moved, or I'd've played it a different way namespace wise

[21:38] <mspo> perlpilot: because I'm a government actor who can easily create a majority stake in a "private" network

[21:38] <mspo> perlpilot: see tor

[21:40] *** rgrinberg left
[21:45] <pmurias> I trust modules from cpan much more than ones downloaded from tor ;)

[21:46] *** wamba joined
[21:51] *** ptolemarch left
[21:55] <Xliff> m: dd ^4.cache

[21:55] <camelia> rakudo-moar 9b579d: OUTPUT«Potential difficulties:␤    Precedence of ^ is looser than method call; please parenthesize␤    at <tmp>:1␤    ------> 3dd ^47⏏5.cache␤^1␤»

[21:55] <Xliff> m: dd (^4).cache

[21:55] <camelia> rakudo-moar 9b579d: OUTPUT«(0, 1, 2, 3)␤»

[21:55] <kalkin-> but even that would be questionable

[21:55] <kalkin-> ups

[21:55] <kalkin-> wrgon channel

[21:55] <Xliff> =)

[21:56] <Xliff> I do that all the time.

[21:56] <jnthn> m: dd ^4 .cache

[21:56] <camelia> rakudo-moar 9b579d: OUTPUT«(0, 1, 2, 3)␤»

[21:56] <jnthn> also :)

[21:57] *** perlpilot left
[21:57] <Xliff> What is the point of .cache?

[21:58] <jnthn> Note much in that case :)

[21:58] <jnthn> It's for use on Seq primarily

[21:59] *** dvinciguerra_ left
[21:59] <jnthn> m: my \a = ^4 .map(* + 2); .say for a; .say for a;

[21:59] <camelia> rakudo-moar 9b579d: OUTPUT«2␤3␤4␤5␤This Seq has already been iterated, and its values consumed␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[21:59] <jnthn> m: my \a = ^4 .map(* + 2); .say for a.cache; .say for a.cache;

[21:59] <camelia> rakudo-moar 9b579d: OUTPUT«2␤3␤4␤5␤2␤3␤4␤5␤»

[22:00] <jnthn> A Seq is a 1-shot iterable that discards values (important for building lazy pipelines); .cache lets you get a List that caches the values so you can obtain them multiple times

[22:01] *** chrsteel joined
[22:01] <Xliff> Ah!

[22:02] <chrsteel> rakudo: react { whenever Supply.interval(1, 0) -> $v { say $v; done if $v >= 1; } }

[22:02] <camelia> rakudo-moar 9b579d: OUTPUT«0␤1␤»

[22:02] <chrsteel> rakudo: react { whenever Supply.interval(1, 0) -> $v { say $v; done if $v >= 0; } }

[22:02] *** pmurias left
[22:02] <Xliff> jnthn: But you wouldn't need .cache if you were assigning a Seq to an Array would you?

[22:02] <camelia> rakudo-moar 9b579d: OUTPUT«(timeout)0␤»

[22:02] <Zoffix> chrsteel, that was reported as a bug last night. I'm guessing you coming from the same workshop or class as the other person :)

[22:03] <chrsteel> heh, just last night? :-)

[22:03] <chrsteel> I came across this bug just now.

[22:04] <Zoffix> Yeah: http://irclog.perlgeek.de/perl6/2016-06-23#i_12723594

[22:04] <Zoffix> Though it appears to have existed for ages

[22:04] <chrsteel> Ah! Funny... good to know I'm not the only one.

[22:04] <jnthn> Xliff: Correct, assignment produces the values and stores them into the array.

[22:05] <jnthn> Xliff: Though it'll do that production lazily (that is, on-demand as you access array elements) if the Seq is marked lazy

[22:05] <Xliff> Gotcha. Thanks for the explanation!

[22:06] <Xliff> I've only found this description via docs.perl6.org: https://docs.perl6.org/routine/cache#role_PositionalBindFailover

[22:06] <Xliff> It's not documented ion Seq or Positional

[22:06] <Xliff> s/ion/in/

[22:07] <Xliff> Although from grepping the code, it looks like it's defined in Any

[22:08] *** chrsteel left
[22:08] <jnthn> Please file a doc issue if it's not suitably documented or easy enough to find. :)

[22:08] * jnthn wanders off for some rest...'night

[22:11] <timotimo> gnite jnthn :)

[22:12] *** rindolf left
[22:12] *** cpage_ left
[22:12] *** cpage_ joined
[22:13] *** cpage_ left
[22:14] *** kanishka joined
[22:35] <Xliff> \o/

[22:35] <Xliff> Fixed bug!

[22:38] <Zoffix> \o/

[22:38] <timotimo> ooooh <3

[22:40] <Zoffix> 🤘🤘🤘 https://www.youtube.com/watch?v=uVpU-OXrg1c

[22:40] <timotimo> cat gave the back of my hand and my arm a proper cat wash %)

[22:43] <timotimo> it was very scratchy

[22:43] *** cpage_ joined
[22:43] <vendethiel-> $ cat scratch

[22:44] <timotimo> the day i started the fuzzing, / started being filled up a little bit over time

[22:44] <timotimo> but ... why?

[22:46] *** cpage_ left
[22:47] *** kurahaupo left
[22:48] *** kurahaupo joined
[22:52] *** fhorck left
[22:55] *** sufrostico left
[23:00] *** firstdayonthejob left
[23:00] <Zoffix> AlexDaniel, what does your "So?" comment mean? :)

[23:01] <Zoffix> (RE: https://github.com/perl6/doc/issues/167#issuecomment-148887096 )

[23:01] <AlexDaniel> Zoffix: anything stopping us from renaming everything to .pod6?

[23:02] <Zoffix> Don't think so ¯\_(ツ)_/¯

[23:02] <AlexDaniel> just trying to breathe some life into these old tickets :)

[23:02] <Zoffix> AlexDaniel++

[23:02] <Zoffix> And cheers for finding a ticket where I say "I'm pretty new to the community" :P

[23:03] <AlexDaniel> :D

[23:03] *** sno left
[23:03] *** sno joined
[23:03] <AlexDaniel> by the way, we now have completely different set of labels in the doc repo

[23:03] <Zoffix> sweet

[23:03] <AlexDaniel> and I've even tagged some older issues

[23:04] <AlexDaniel> … practically all of them. Not that there was any need to do so, but it should give a better idea of what these labels are supposed to mean

[23:04] *** cognominal left
[23:05] *** fhorck joined
[23:05] <ShimmerFairy> AlexDaniel++  # bug wrangling is always good :)

[23:05] *** iH2O joined
[23:07] *** iH2O left
[23:08] *** [Sno] joined
[23:08] *** sno left
[23:09] <timotimo> i wonde if with "only method foo" you can get over the "already has a method named ..." when augmenting a core class

[23:10] *** cpage_ joined
[23:11] <timotimo> nope.

[23:14] *** cpage_ left
[23:17] *** jjido joined
[23:17] *** girafe left
[23:18] <Zoffix> m: class Foo { only method foo {} };

[23:18] <camelia> rakudo-moar 9b579d: ( no output )

[23:18] <Zoffix> :o

[23:21] <AlexDaniel> what is only?

[23:21] *** cpage_ joined
[23:23] <Zoffix> ¯\_(ツ)_/¯

[23:23] <AlexDaniel> m: only sub what { say ‘what’ }

[23:23] <camelia> rakudo-moar 9b579d: ( no output )

[23:26] <timotimo> i thought it was there to override "multi" from a parent class

[23:29] *** cpage_ left
[23:31] <Juerd> If I strace perl6, it turns out that it does an epoll_wait() after every print... Why's that?

[23:32] <timotimo> because we're using libuv and its asynchronous stuff for printing ATM

[23:33] <kalkin-> So if I want to specify an "interface" defining a new method with specfic arguments and some fields. The perl6 way would be to create a role, right?

[23:33] <Juerd> timotimo: All prints, always?

[23:33] <kalkin-> (btw the new method should be overwritten by the other implementations)

[23:34] <timotimo> well, if you NativeCall into libc, then not

[23:34] <Juerd> Heh, I might try that :)

[23:36] *** cpage_ joined
[23:37] <Juerd> Heh, write over nativecall is *slower* :)

[23:37] <Juerd> $ perl6 -e'use NativeCall; sub write(int32, Str, int32) returns int32 is native { * }; my $x = now; write(1, "hoi", 3) for 1..1000000; note now - $x; $x = now; print "hoi" for 1..1000000; note now - $x;' >/dev/null

[23:37] <Juerd> 7.2371556

[23:37] <Juerd> 4.1859923

[23:37] <timotimo> yeah, the overhead is still pretty bad

[23:38] <timotimo> nativecall overhead, that is

[23:39] <Juerd> $ perl -e'use Time::HiRes qw(time); my $x = time; print "hoi" for 1..1000000; warn time()-$x' >/dev/null

[23:39] <Juerd> 0.0617289543151855 at -e line 1.

[23:39] <Juerd> 0.17 with $| set to 1.

[23:41] <timotimo> what does that do?

[23:42] <kurahaupo> autoflush

[23:42] <kurahaupo> a syscall for every print

[23:43] *** ssotka left
[23:46] *** ssotka joined
[23:49] *** RabidGravy left
[23:49] <timotimo> ah, ok

[23:50] <timotimo> yeah, we're doing multiple syscalls for every print :)

[23:51] <dalek> doc: d5ba244 | (Jan-Olof Hendig)++ | doc/Type/Semaphore.pod:

[23:51] <dalek> doc: Fixed typo and two missing C<>'s

[23:51] <dalek> doc: review: https://github.com/perl6/doc/commit/d5ba24416d

[23:51] <timotimo> oh

[23:52] <timotimo> dmesg is full of messages about the segfaults of my moar processes

[23:52] <timotimo> the ones i'm fuzzing

[23:52] <timotimo> it's not supposed to reach the system's logger ... that must be why / is filling up

[23:54] <timotimo> i should probably not let it run for much longer?

[23:55] *** cdg left
[23:57] <timotimo> *sigh*, i wanted to see it get through the whole queue once at least :(

[23:58] *** spider-mario left
[23:59] *** jjido left
