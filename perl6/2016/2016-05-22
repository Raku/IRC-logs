[00:08] *** bjz joined
[00:12] *** BenGoldberg joined
[00:17] *** smls left
[00:32] *** huggable left
[00:32] *** huggable joined
[00:39] *** BenGoldberg left
[00:41] *** BenGoldberg joined
[00:41] *** aries_liuxueyang left
[00:44] *** finanalyst joined
[00:46] *** aries_liuxueyang joined
[00:52] *** BenGoldberg left
[01:00] *** BenGoldberg joined
[01:14] *** BenGoldberg left
[01:26] *** tokuhirom joined
[01:30] *** tokuhirom left
[01:43] *** molaf left
[01:45] *** ilbot3 left
[01:46] *** BenGoldberg joined
[01:47] *** ilbot3 joined
[01:49] *** aries_liuxueyang left
[01:51] *** aries_liuxueyang joined
[01:51] *** cdg left
[01:56] *** molaf joined
[02:15] *** aries_liuxueyang left
[02:17] *** aries_liuxueyang joined
[02:21] *** BenGoldberg left
[02:23] *** BenGoldberg joined
[02:36] *** BenGoldberg left
[02:37] *** BenGoldberg joined
[02:38] *** BenGoldberg left
[02:55] *** noganex joined
[02:57] *** noganex_ left
[03:00] *** ssotka left
[03:41] *** ssotka joined
[03:54] *** mr-foobar left
[03:55] *** mr-foobar joined
[04:01] *** kid51 left
[04:13] *** pierre_ joined
[04:25] *** AlexDaniel left
[04:27] *** tokuhirom joined
[04:31] *** tokuhirom left
[04:32] *** huggable left
[04:32] *** kaare_ joined
[04:36] *** khw left
[04:41] *** Cabanossi left
[04:41] *** lucs joined
[04:43] *** Cabanossi joined
[04:50] *** woolfy joined
[04:51] *** woolfy left
[05:00] *** jameslenz left
[05:02] *** pierre__ joined
[05:02] *** pierre_ left
[05:05] *** matiaslina left
[05:28] *** tokuhirom joined
[05:32] *** tokuhirom left
[05:54] *** CIAvash joined
[05:59] *** mohae_ joined
[06:01] *** mohae left
[06:01] *** pierre__ left
[06:02] *** pierre_ joined
[06:15] *** mr-foobar left
[06:16] *** mr-foobar joined
[06:21] *** mohae_ left
[06:28] *** jack_rabbit left
[06:34] *** bjz_ joined
[06:34] *** bjz left
[06:36] <llfourn> .tell nine There is still an issue with RT #128156. But it now only fails for me 1/3 of the time :). See ticket.

[06:36] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128156

[06:36] <yoleaux> llfourn: I'll pass your message to nine.

[06:39] *** jack_rabbit joined
[07:02] *** pierre_ left
[07:09] *** wamba joined
[07:10] *** pierre_ joined
[07:15] *** domidumont joined
[07:20] *** domidumont left
[07:20] *** bjz_ left
[07:20] *** domidumont joined
[07:20] *** bjz joined
[07:23] *** jeek joined
[07:23] *** jeek left
[07:24] *** jeek joined
[07:27] *** _dolmen_ joined
[07:35] *** jjido joined
[07:35] *** bjz_ joined
[07:36] *** bjz left
[07:41] *** jjido left
[07:41] *** firstdayonthejob joined
[07:42] *** Guest56401 joined
[07:47] *** Guest56401 left
[07:54] *** ssotka left
[08:02] *** pierre_ left
[08:02] *** domidumont left
[08:02] *** pierre_ joined
[08:04] <wamba> m: perl6 -e 'say (^12).rotor(1 .. *,:partial)'

[08:04] <camelia> rakudo-moar 7a4ca4: OUTPUT«5===SORRY!5=== Error while compiling /tmp/PxO9eFGRl2␤Two terms in a row␤at /tmp/PxO9eFGRl2:1␤------> 3perl6 -e7⏏5 'say (^12).rotor(1 .. *,:partial)'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤       …»

[08:04] <wamba> m: say (^12).rotor(1 .. *,:partial)

[08:04] <camelia> rakudo-moar 7a4ca4: OUTPUT«((0) (1 2) (3 4 5) (6 7 8 9) (10 11))␤»

[08:05] <wamba> m: say (^10).rotor(1,3 ... *, :partial )

[08:06] <camelia> rakudo-moar 7a4ca4: OUTPUT«(timeout)»

[08:11] *** _dolmen_ left
[08:14] *** darutoko joined
[08:29] *** RabidGravy joined
[08:32] *** huggable joined
[08:35] *** sortiz joined
[08:51] *** _dolmen_ joined
[08:51] <nadim> Morning

[08:52] <sortiz> \o nadim

[08:53] *** pmurias joined
[08:55] <RabidGravy> mornin

[08:59] *** _dolmen_ left
[09:11] *** cosarara joined
[09:14] *** tokuhirom joined
[09:19] *** jjido joined
[09:19] *** tokuhirom left
[09:20] <masak> good antenoon, #perl6

[09:20] <llfourn> good evening, masak

[09:24] *** jjido left
[09:25] *** spider-mario joined
[09:26] *** tokuhirom joined
[09:30] *** tokuhirom left
[09:38] *** avalenn left
[09:52] *** rindolf joined
[09:53] <masak> m: my $x = 0; say $x ≅ 0 :tolerance(1e-3)

[09:53] <camelia> rakudo-moar 7a4ca4: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Pvx3eWkBNW␤You can't adverb &infix:<≅>␤at /tmp/Pvx3eWkBNW:1␤------> 3my $x = 0; say $x ≅ 0 :tolerance(1e-3)7⏏5<EOL>␤»

[09:53] <masak> can't adverb? o rly?

[09:54] <masak> how do I $x ≅ 0 :tolerance ?

[09:58] *** jjido joined
[10:00] <bartolin> m: my $x = 0; say ($x ≅ 0, :tolerance(1e-3))

[10:00] <camelia> rakudo-moar 7a4ca4: OUTPUT«(True tolerance => 0.001)␤»

[10:00] <bartolin> like that?

[10:01] <bartolin> no, probably not ...

[10:03] *** jjido left
[10:04] <masak> nope, that's just printing a pair, not passing an adverb.

[10:04] <masak> I believe I haz found... a bug

[10:04] * masak .oO( dun dun DUN )

[10:04] * masak submits rakudobug

[10:05] <bartolin> masak++

[10:05] <sortiz> m: my $x = 0.0001e0; say infix:<≅> $x, 0, :tolerance(1e-3); # Indeed a bug, this works.

[10:05] <camelia> rakudo-moar 7a4ca4: OUTPUT«True␤»

[10:06] * nine has long given up on backlogging #perl6

[10:06] <yoleaux> 06:36Z <llfourn> nine: There is still an issue with RT #128156. But it now only fails for me 1/3 of the time :). See ticket.

[10:06] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128156

[10:06] <nine> llfourn: thanks! Will have a look at it

[10:09] <masak> sortiz: added your comment to the RT ticket. thanks.

[10:11] *** domidumont joined
[10:14] *** neuron joined
[10:14] <neuron> Hi, which method should I override so that it will convert my object into string?

[10:15] <llfourn> neuron: probably Str

[10:16] <llfourn> m: class Foo { method Str { "WIN" } }; my $a = Foo.new; say "$a"

[10:16] <camelia> rakudo-moar 7a4ca4: OUTPUT«WIN␤»

[10:17] <neuron> hmmm, that is what I tried, something else is wrong ...

[10:19] <llfourn> m: class Foo { method Str { "WIN" }; method gist {"GIST" } }; my $a = Foo.new; say $a; say "$a";

[10:19] <camelia> rakudo-moar 7a4ca4: OUTPUT«GIST␤WIN␤»

[10:20] <llfourn> it depends exactly how it is being turned into a string

[10:20] <neuron> Ah! gist method

[10:20] <neuron> llfourn: Thank you

[10:20] <llfourn> ya, quotes "" will call .Str but core routines will often .gist your objects to get a summary of them

[10:20] *** iH2O joined
[10:20] <llfourn> np :)

[10:20] <neuron> Now it core dumps, but that is expected :)

[10:21] <llfourn> o.o

[10:21] <iH2O> bugs are the norm?

[10:22] <llfourn> I guess neuron is doing something with NatveCall :)

[10:22] <neuron> I'm trying to do some Qt binding, yes.

[10:22] <neuron> Somehow the objects constructors are called more ofthen to what I would like to see, but now at least I'm able to reach the object value

[10:23] <iH2O> keep us informed neuron

[10:23] * llfourn never used NativeCall

[10:23] <neuron> Also I modified Nativecall itself, which did not bring more stability exactly :)

[10:23] <llfourn> heh

[10:24] <neuron> iH2O: If I'll have anything to show, I will.

[10:24] <neuron> It's my way of learning Perl 6 :)

[10:24] <iH2O> you'll have something genial to show, even if that takes 20 years

[10:25] * neuron by definition produces only genial things

[10:25] <neuron> It's only that the rest of the world may think otherwise

[10:27] <iH2O> the world will be ready for your genius in 20 years, trust me

[10:29] *** labster left
[10:32] <neuron> :-)

[10:37] *** sortiz left
[10:44] *** pierre_ left
[10:54] *** neuron left
[11:00] *** aries_liuxueyang left
[11:02] *** aries_liuxueyang joined
[11:03] *** silug left
[11:04] *** finanalyst left
[11:06] *** jjido joined
[11:07] *** cognominal joined
[11:08] *** bjz_ left
[11:08] <RabidGravy> m: https://gist.github.com/jonathanstowe/beb1a3c3a906674e6ed694d0a34c6d16

[11:08] <camelia> rakudo-moar 7a4ca4: OUTPUT«with attribute␤set␤with foo␤default␤Cannot call BUILD(Zub: Str); none of these signatures match:␤    (Bar $: Str :$foo!, *%_)␤    (Bar $: :attribute($!attribute)!, *%_)␤  in block <unit> at /tmp/CRb8fgaJ1b line 26␤␤»

[11:09] <RabidGravy> is there any way round that?

[11:09] <timotimo> why would you even "is Bar does Foo" when Bar already does Foo?

[11:10] *** bazzaar joined
[11:10] <RabidGravy> it makes no actual difference, ignore that

[11:11] <bazzaar> o/

[11:11] <nine> llfourn: are you on nom/master/master?

[11:11] *** bjz joined
[11:11] <timotimo> i'm not convinced multi BUILD is a good idea, but what do i know :)

[11:12] <llfourn> nine: I tested it with rakudobrew: g1f3ca64 is what perl6 -v shows

[11:13] <timotimo> RabidGravy: have you tried giving it a less restricted invocant in the signatures?

[11:13] <RabidGravy> ah

[11:13] <timotimo> but Zub should satisfy Bar

[11:13] <RabidGravy> no, but just doing so

[11:13] <timotimo> oh, you have a positional in there for some reason

[11:14] <timotimo> that's interesting, how does that happen

[11:14] <nine> llfourn: can you re-test with nom/master/master? That I cannot reproduce a failure here and that I don't have any idea at all where a spurious failure like that could come from makes me reach to jnthn++'s recent Moar fixes

[11:15] *** iH2O left
[11:15] *** domidumont left
[11:15] <llfourn> nine: what is nom/master/master? My understanding is that the main branch of rakudo is nom (just nom)?

[11:15] <nine> llfourn: rakudo nom, nqp master and MoarVM master

[11:15] <bazzaar> I'm finding that SVG::Plot on Rakudo * 2016.04 produces only the svg header, using the module examples 

[11:15] <llfourn> ah ok

[11:15] * llfourn goes to do this

[11:15] <RabidGravy> timotimo, yeah it was the positional thing that's confusing me

[11:16] <timotimo> it took me a second to notice the positional

[11:16] <timotimo> a --ll-exception may be enlightening?

[11:17] <nine> llfourn: though I actually don't have high hopes for a different result :/

[11:17] <llfourn> nine: if I still get it I'll try debian (the error occurs on mac)

[11:17] <nine> llfourn: oh a different operating system might actually explain it! I have no idea what resolution file time stamps on OS X have.

[11:18] <nine> llfourn: I do know that for example fat32 has 2-second resolution of modification times which could easily screw up out-of-date detection

[11:18] <timotimo> ugh

[11:18] *** silug joined
[11:19] <bazzaar> nd3i provided a patch to hopefully fix this issue, which was merged 12-Apr

[11:19] <llfourn> nine: I did try putting sleep 2; here and there in the shell script but I don't think it had an affect :\

[11:21] <bazzaar> .. but it seems the problem is still there, has anyone tried to use SVG::Plot recently?

[11:21] <RabidGravy> timotimo, confusingly it appears to be in BUILDALL

[11:22] <timotimo> which part of it? it should only call all the BUILDs with named arguments

[11:25] <RabidGravy> well actually the added find_best_dispatchee

[11:25] <timotimo> well, that's just because something in rakudo sucks :P

[11:25] <RabidGravy> that code just broke my brane

[11:27] *** tokuhirom joined
[11:27] <timotimo> BUILDALL isn't understandable without knowing about BUILDALLPLAN

[11:29] *** bjz_ joined
[11:29] *** bjz left
[11:30] <RabidGravy> to be honest that bit of code is so big that I can't follow it

[11:30] <timotimo> BUILDALL is more or less just an interpreter

[11:30] <timotimo> for a tiny opcode-plus-arguments based "language" that is in a little list

[11:31] <timotimo> BUILDALLPLAN generates programs of that language and puts them into BUILDPLAN

[11:31] <llfourn> nine: I can confirm it doesn't happen in a debian container. But it is for sure happening on mac with latest everything.

[11:32] *** tokuhirom left
[11:38] <RabidGravy> timotimo, it appears that it's Perl6::Metamodel::BaseDispatcher.call_with_capture that's shagging it up

[11:39] *** pmurias left
[11:40] <RabidGravy> or rather the capture that it is getting has been messed up somehow

[11:40] <timotimo> huh

[11:43] <RabidGravy> actually totally ignore me, I'm getting confused by the calls here

[11:44] *** kurahaupo joined
[11:44] *** cognominal left
[11:44] *** cognominal joined
[11:45] *** Emeric joined
[11:46] *** pierre_ joined
[11:47] <titsuki> Hi all. Does anyone know how to build MoarVM with a debug option using rakudobrew ?

[11:48] <titsuki> $ rakudobrew build moar --configure-opts='--moar-option=--debug=3' does not seem to work.

[11:50] <llfourn> nine: good news. Adding a sleep 1; after touching the file before running p6 the second time stops the problem. So it is likely a race condition involving timestamps?

[11:50] *** bazzaar left
[11:53] *** pierre_ left
[12:01] <moritz> llfourn: does sleep 0.1; also help?

[12:02] <llfourn> moritz: yes!

[12:03] <RabidGravy> timotimo, I'm going to rakudobug this because I'm totally at a loss as to what is going on

[12:03] <timotimo> that's fine

[12:03] <llfourn> so it's a problem of recompiling in the same 100ms as you touched the file...

[12:04] *** rindolf left
[12:05] <llfourn> though I get the problem even after waiting 5 seconds when I'm editing the files with emacs. ie save + wait 5 seconds + run p6 = gets the error around 2/3 of the time

[12:05] <llfourn> so with more complex dependency chains there is a higher likelyhood of the problem occuring I think

[12:06] <llfourn> which is kinda counter to the timestamp collision theory unless rakudo is touching the files themselves?

[12:06] <llfourn> itself*

[12:09] *** jjido left
[12:09] <llfourn> even if this is a not detecting-change-properly problem it shouldn't be corrupting the precomp files like it is...

[12:12] *** rindolf joined
[12:13] *** kaare_ left
[12:23] *** |2701 joined
[12:27] *** TEttinger left
[12:29] *** cdg joined
[12:32] *** cdg left
[12:32] *** huggable left
[12:37] *** domidumont joined
[12:43] *** kid51 joined
[12:45] *** AlexDaniel joined
[12:45] *** firstdayonthejob left
[12:49] *** iH2O joined
[12:54] <titsuki> Sorryl, $ rakudobrew build moar --configure-opts='--moar-option=--debug=3' works well after the clean install. :)

[12:54] <timotimo> oh, good to hear

[12:55] <timotimo> if you're doing internals-hacking or tweaking, rakudobrew may bite you in the butt

[12:55] <timotimo> fortunately, building all the parts manually is super trivial

[12:55] <timotimo> all you have to do is give them the same --prefix and it'll be great

[12:55] *** pierre_ joined
[13:03] *** aero joined
[13:06] *** rindolf left
[13:06] *** iH2O left
[13:10] *** finanalyst joined
[13:15] *** rindolf joined
[13:21] *** domidumont left
[13:24] *** RabidGravy left
[13:26] *** bjz_ left
[13:28] *** bjz joined
[13:29] *** kaare_ joined
[13:33] *** iH2O joined
[13:34] *** bjz left
[13:34] *** bjz joined
[13:40] *** loren joined
[13:41] *** _dolmen_ joined
[13:43] *** RabidGravy joined
[13:44] <loren> HI, #Perl 6

[13:44] <loren> join #c++

[13:44] <iH2O> shame!

[13:44] <iH2O> :)

[13:45] <iH2O> C++ is patching, loren

[13:45] <loren> ..i have a question about ^add_method

[13:46] <moritz> then you should ask it :-)

[13:46] <loren> en , wait ..

[13:46] <loren> m: class AddM { method add { self.^add_method("getp", my method { return "getp"; });self.^compose(); } }; my $a = AddM.new(); $a.add(); say $a.getp();

[13:46] <camelia> rakudo-moar 7a4ca4: OUTPUT«getp␤»

[13:47] <loren> i wonder can i use ^add_method like this ?

[13:47] <RabidGravy> well it appears to

[13:47] <moritz> uhm, haven't you just demonstrated that you can? :-)

[13:48] <RabidGravy> whether you should is another matter altogether

[13:48] <moritz> it's going to be weird though when soembody inherits from that class

[13:48] <loren> so, ..

[13:48] <loren> m: class AddM { has %hash handles < keys >; method add { self.^add_method("getp", my method { return "getp"; });self.^compose(); } }; my $a = AddM.new(); $a.add(); say $a.getp();

[13:48] <camelia> rakudo-moar 7a4ca4: OUTPUT«Package 'AddM' already has a method 'keys' (did you mean to declare a multi-method?)␤  in any add_method at gen/moar/m-Metamodel.nqp line 477␤  in any compose_attributes at gen/moar/m-Metamodel.nqp line 385␤  in any compose at gen/moar/m-Metamodel.nq…»

[13:48] <loren> why this got a compiler error

[13:48] <AlexDaniel> m: class AddM { method add { self.^add_method("getp", my method { return "getp"; });self.^compose(); } }; my $a = AddM.new(); $a.add(); $a.add(); say $a.getp();

[13:48] <camelia> rakudo-moar 7a4ca4: OUTPUT«Package 'AddM' already has a method 'getp' (did you mean to declare a multi-method?)␤  in any add_method at gen/moar/m-Metamodel.nqp line 477␤  in method add at /tmp/8rxomFUtit line 1␤  in block <unit> at /tmp/8rxomFUtit line 1␤␤»

[13:48] <AlexDaniel> m: class AddM { method add { self.^add_method("getp", my multi method { return "getp"; });self.^compose(); } }; my $a = AddM.new(); $a.add(); $a.add(); say $a.getp();

[13:48] <camelia> rakudo-moar 7a4ca4: OUTPUT«5===SORRY!5=== Error while compiling /tmp/duykKgW2iV␤An anonymous method may not take a multi declarator␤at /tmp/duykKgW2iV:1␤------> 3etp", my multi method { return "getp"; }7⏏5);self.^compose(); } }; my $a = AddM.new␤»

[13:49] <AlexDaniel> so the question is how to add multi methods like this

[13:49] <RabidGravy> loren, it's unrelated

[13:49] <loren> ..no, handles can not use with ^add_method

[13:49] <RabidGravy> m: class F {};  say F.keys

[13:49] <camelia> rakudo-moar 7a4ca4: OUTPUT«()␤»

[13:50] <RabidGravy> so yes it really does already have a method keys

[13:50] <AlexDaniel> well, at least my question :)

[13:50] <loren> m: class AddM { method keys() { }; method add { self.^add_method("getp", my method { return "getp"; });self.^compose(); } }; my $a = AddM.new(); $a.add(); say $a.getp();

[13:50] <camelia> rakudo-moar 7a4ca4: OUTPUT«getp␤»

[13:50] <loren> but this ok

[13:51] <RabidGravy> yes because it over-writes the inherited one

[13:52] <loren> o .. 

[13:52] <RabidGravy> you're confusing two things, this has nothing to do with the ^add_method

[13:52] <loren> class AddM { has %hash handles < keys >; method getp() { "getp"; } }; my $a = AddM.new(); $a.add(); say $a.getp();

[13:53] <loren> m: class AddM { has %hash handles < keys >; method getp() { "getp"; } }; my $a = AddM.new(); $a.add(); say $a.getp();

[13:53] <camelia> rakudo-moar 7a4ca4: OUTPUT«Method 'add' not found for invocant of class 'AddM'␤  in block <unit> at /tmp/OK6QZ1rIH2 line 1␤␤»

[13:53] <loren> m: class AddM { has %hash handles < keys >; method getp() { "getp"; } }; my $a = AddM.new(); say $a.getp();

[13:53] <camelia> rakudo-moar 7a4ca4: OUTPUT«getp␤»

[13:53] <loren> e, how about this?

[13:54] <RabidGravy> ah, it's the time that compose is called

[13:55] <loren> i don't understand it ..

[13:56] *** mohae joined
[13:56] <loren> so, is possible use ^compose with handles ? The document  said that compose should call after i call add_method

[13:57] <lizmat> commute&

[13:57] *** lizmat left
[13:57] <RabidGravy> m: class M { has %!hash handles <keys> }; M.^compose

[13:57] <camelia> rakudo-moar 7a4ca4: OUTPUT«Package 'M' already has a method 'keys' (did you mean to declare a multi-method?)␤  in any add_method at gen/moar/m-Metamodel.nqp line 477␤  in any compose_attributes at gen/moar/m-Metamodel.nqp line 385␤  in any compose at gen/moar/m-Metamodel.nqp l…»

[13:57] <RabidGravy> arguably a bug

[13:58] <RabidGravy> it tries to re-add the handles methods

[14:00] <loren> o..

[14:00] <RabidGravy> and to get it away from any builtins that somewhat obscure it

[14:00] <RabidGravy> m: class B { has $.foo; }; class M { has B $!hash handles <foo> }; M.^compose'

[14:00] <camelia> rakudo-moar 7a4ca4: OUTPUT«5===SORRY!5=== Error while compiling /tmp/NUoI1Q4uF2␤Two terms in a row␤at /tmp/NUoI1Q4uF2:1␤------> 3has B $!hash handles <foo> }; M.^compose7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤   …»

[14:00] <RabidGravy> m: class B { has $.foo; }; class M { has B $!hash handles <foo> }; M.^compose

[14:00] <camelia> rakudo-moar 7a4ca4: OUTPUT«Package 'M' already has a method 'foo' (did you mean to declare a multi-method?)␤  in any add_method at gen/moar/m-Metamodel.nqp line 477␤  in any compose_attributes at gen/moar/m-Metamodel.nqp line 385␤  in any compose at gen/moar/m-Metamodel.nqp li…»

[14:01] <RabidGravy> but arguably a bug nonetheless

[14:03] <loren> o, thanks

[14:04] <loren> I implement that method (keys values ...) my self...

[14:05] <RabidGravy> it will call compose_attributes, which will then try to re-add the handles methods

[14:06] <RabidGravy> you probably don't actually need to call the whole .^compose

[14:09] <loren> so, this file , https://github.com/araraloren/Getopt-Kinoko/blob/master/lib/Getopt/Kinoko/OptionSet.pm6 line 138 method generate_method , what should i do..

[14:09] <RabidGravy> m: class B { has %!hash handles <keys>; submethod BUILD() { self.^add_method("foo", method () { say "foo" }); self.^publish_method_cache}}; B.new.foo

[14:09] <camelia> rakudo-moar 7a4ca4: OUTPUT«foo␤»

[14:09] <RabidGravy> there you go

[14:09] <loren> ok ..

[14:11] <RabidGravy> my general inclination would be not to do that at all, but to create a role on the fly and then mix in the new role

[14:11] <loren> Is there a document about this method ?

[14:11] <RabidGravy> no

[14:13] <loren> en, 

[14:14] *** smls joined
[14:15] <loren> thanks a lot

[14:22] <RabidGravy> example of creating a role on the fly rather than adding methods to the class is https://github.com/jonathanstowe/Tinky/blob/master/lib/Tinky.pm#L1066 and then https://github.com/jonathanstowe/Tinky/blob/master/lib/Tinky.pm#L1123 for the application

[14:24] *** pierre_ left
[14:24] *** bazzaar joined
[14:28] <loren> ok, but my method name is uncertainty ..

[14:28] <loren> m: class Sample { has @.value; method get-value() { my $value := @!value; return Proxy.new( FETCH => method () { $value; }, STORE => method ($value) { } ); }; }; my $s = Sample.new(value => [1, 2, 3, 4]); my $value = $s.get-value();say $value.perl; say $s.value.perl;

[14:28] <camelia> rakudo-moar 7a4ca4: OUTPUT«$[1, 2, 3, 4]␤[1, 2, 3, 4]␤»

[14:29] <RabidGravy> which is fine

[14:29] *** pierre_ joined
[14:30] <loren> I make a proxy to class attribute @.value, but i wonder why it return a $[] not a []

[14:31] <RabidGravy> because it is "itemized"

[14:31] *** bazzaar left
[14:31] *** iH2O left
[14:32] <loren> Is Proxy used to distinguish read and write ?

[14:37] <RabidGravy> well it's used to capture control on reading or assignment basically

[14:38] *** ifim joined
[14:40] <smls> Who's the go-to person for CompUnit stuff these days? lizmat? nine?

[14:41] <smls> Could one of you take a look at RT #123578 and #122725 to decide if they can be closed?

[14:41] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=123578

[14:41] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=122725

[14:41] <loren> e, thanks RabidGravy :)

[14:46] *** loren left
[14:47] *** jack_rabbit left
[14:49] *** _dolmen_ left
[14:52] *** iH2O joined
[14:54] *** Ven joined
[15:03] *** khw joined
[15:17] *** pierre_ left
[15:29] *** tokuhirom joined
[15:33] *** tokuhirom left
[15:44] *** BenGoldberg joined
[15:47] *** domidumont joined
[16:00] *** finanalyst left
[16:07] *** BenGoldberg left
[16:12] *** BenGoldberg joined
[16:16] <nine> smls: both can be closed

[16:17] <smls> nine: Is there a way to write Roast tests for this kind of thing?

[16:22] <AlexDaniel> is it something that is specific to roast? It does not sound like a language thing

[16:24] *** BenGoldberg left
[16:30] *** BenGoldberg joined
[16:33] * RabidGravy deletes all of his local email and hopes imap can sort it out

[16:34] *** Ven left
[16:49] <RabidGravy> ls

[17:00] *** CIAvash left
[17:08] *** iH2O left
[17:10] *** ifim left
[17:11] *** _mg_ joined
[17:12] *** BenGoldberg left
[17:14] *** grondilu joined
[17:17] *** BenGoldberg joined
[17:30] *** tokuhirom joined
[17:31] <dalek> gtk-simple: 586acc6 | RabidGravy++ | / (2 files):

[17:31] <dalek> gtk-simple: Add Spinner

[17:31] <dalek> gtk-simple: 

[17:31] <dalek> gtk-simple: One widget a day

[17:31] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/586acc6219

[17:31] <dalek> gtk-simple: e1af68d | RabidGravy++ | META6.json:

[17:31] <dalek> gtk-simple: Up version

[17:31] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/e1af68dc7e

[17:34] *** tokuhirom left
[17:35] *** firstdayonthejob joined
[17:40] *** jjido joined
[17:41] *** Ven joined
[17:47] *** jjido left
[17:59] *** ranguard joined
[18:01] *** sjoshi joined
[18:08] *** BenGoldberg left
[18:13] *** BenGoldberg joined
[18:14] *** Skarsnik joined
[18:16] *** Ven left
[18:19] *** BenGoldberg left
[18:21] *** BenGoldberg joined
[18:24] *** BenGoldberg left
[18:37] *** nadim joined
[18:39] *** nightfrog joined
[18:42] *** dalek left
[18:57] *** jjido joined
[19:06] *** willthechill joined
[19:13] *** BenGoldberg joined
[19:16] *** tokuhirom joined
[19:20] *** tokuhirom left
[19:26] *** domidumont left
[19:28] *** tokuhirom joined
[19:29] *** kaare_ left
[19:33] *** tokuhirom left
[19:36] <DrForr> A few different faces here, or at least a few new nicks.

[19:43] *** BenGoldberg left
[19:45] *** BenGoldberg joined
[19:46] <RabidGravy> I'm still here :)

[19:49] *** djbkd joined
[19:51] <mst> I'm definitely somewhere

[19:57] *** Ven joined
[19:59] * ranguard was never here in the first place

[20:00] <mst> ffffff

[20:00] <mst> ranguard: please harass me to put out the blog post and etc. so we can get the flipping PSIXDISTS stuff going again

[20:01] <mst> I keep remembering at times when I'm too worn out to figure it out

[20:01] <ranguard> mst: oi, sort it out!

[20:02] *** Ven left
[20:02] * ranguard hopes taht's the right level of harassment :)

[20:03] <mst> ranguard: yes. just delivered at times other than right now :)

[20:04] *** jjido left
[20:05] <moritz> .tell mst to get that blog post out

[20:05] <yoleaux> moritz: I'll pass your message to mst.

[20:05] <moritz> mst: now all you have to do is to keep quiet for a while :-)

[20:06] *** mst is now known as quiet_me_really

[20:06] *** quiet_me_really is now known as you_utter_bastar

[20:07] *** you_utter_bastar is now known as not_that_i

[20:07] *** not_that_i is now known as had_anything

[20:07] *** had_anything is now known as to_say_but_argh

[20:08] *** to_say_but_argh is now known as mst

[20:08] *** darutoko left
[20:08] *** christeel joined
[20:14] <christeel> Hi Perl6!

[20:14] <moritz> hi christeel 

[20:15] *** grondilu left
[20:15] *** chrsteel joined
[20:16] <chrsteel> perl6: sub set-test ( Set :$s? ) { say $s }; set-test( set() );

[20:16] <camelia> rakudo-jvm 40a953: OUTPUT«cannot connect to eval server: Connection refused␤»

[20:16] <camelia> ..rakudo-moar 7a4ca4: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in sub set-test at /tmp/tmpfile line 1␤  in block <unit> at /tmp/tmpfile line 1␤␤»

[20:16] *** rindolf left
[20:17] <smls> chrsteel: `:$s` is a named parameter, not a positional parameter

[20:17] <chrsteel> ugh..

[20:17] *** ssotka joined
[20:17] <smls> So you'd have to call the function as   set-test( s => set() );

[20:17] <chrsteel> that was dumb of me. thanks smls!

[20:18] *** christeel left
[20:20] *** sjoshi left
[20:20] <chrsteel> perl6: sub set-test ( Set :$s? ) { say $s }; set-test( :s(∅) );

[20:20] <camelia> rakudo-jvm 40a953: OUTPUT«cannot connect to eval server: Connection refused␤»

[20:20] <camelia> ..rakudo-moar 7a4ca4: OUTPUT«set()␤»

[20:20] <chrsteel> yep. works as expected! :-)

[20:26] *** jjido joined
[20:27] *** labster joined
[20:27] *** _mg_ left
[20:31] *** jjido left
[20:36] *** _dolmen_ joined
[20:36] *** cpage_ left
[20:43] *** chrsteel left
[20:48] *** BenGoldberg left
[20:49] *** BenGoldberg joined
[20:52] *** djbkd left
[20:53] <DrForr> Just was wondering if anyone was brought here by OSCON... I only mentioned IRC in one slide tho.

[20:56] *** BenGoldberg left
[21:07] *** raiph left
[21:07] *** raiph joined
[21:12] *** Emeric left
[21:29] *** tokuhirom joined
[21:30] <timotimo> not me, sorry to disappoint

[21:30] <DrForr> No worries, just curious.

[21:32] *** _dolmen_ left
[21:34] *** tokuhirom left
[21:57] <RabidGravy> I'm only here for the beer

[21:58] *** TEttinger joined
[22:06] *** Skarsnik left
[22:13] *** smls left
[22:14] <MasterDuke> m: ".".IO.Str.say

[22:14] <camelia> rakudo-moar 7a4ca4: OUTPUT«.␤»

[22:14] <MasterDuke> m: ".".IO.abspath.say

[22:14] <camelia> rakudo-moar 7a4ca4: OUTPUT«/home/camelia␤»

[22:15] <MasterDuke> does that seem wrong to anybody else? the doc for IO::Path.Str says "Returns the full path as a string."

[22:15] <timotimo> full path doesn't mean absolute path, just full path

[22:18] <MasterDuke> maybe it's just semantics, but when i think of "the full path for .", i certainly think of the whole path to get to my current location

[22:19] <AlexDaniel> that's absolute path

[22:19] <AlexDaniel> hm, wikipedia disagrees

[22:20] <MasterDuke> yeah, i'm saying i think of "full path" as equal to "absolute path"

[22:20] <MasterDuke> i could be thinking incorrectly of course

[22:20] *** gnull joined
[22:20] <AlexDaniel> MasterDuke: ok, although I don't think the same way, I think that there are lots of people who will agree with you. Maybe you can clarify it a little bit in the docs?

[22:23] <timotimo> yeah, we'd really want to have that re-worded in there

[22:24] <MasterDuke> reword the doc to match current behavior? or change current behavior to match how i think it should be?

[22:25] <AlexDaniel> no, I don't think that .Str should produce .abspath. Just change the doc

[22:25] <timotimo> yeah

[22:26] <AlexDaniel> m: say ‘../..’.IO.abspath

[22:26] <camelia> rakudo-moar 7a4ca4: OUTPUT«/home/camelia/../..␤»

[22:26] <AlexDaniel> hm

[22:27] <MasterDuke> m: say ‘../..’.IO.resolve.abspath

[22:27] <camelia> rakudo-moar 7a4ca4: OUTPUT«/␤»

[22:27] <AlexDaniel> alright!

[22:28] <AlexDaniel> ouch…

[22:28] <AlexDaniel> m: say ‘./../abc/../..’.IO.resolve.abspath

[22:28] <camelia> rakudo-moar 7a4ca4: OUTPUT«/home/abc/../..␤»

[22:30] <MasterDuke> whoops

[22:31] <AlexDaniel> m: say ‘/../abc/../..’.IO.resolve.dir

[22:31] <camelia> rakudo-moar 7a4ca4: OUTPUT«Failed to get the directory contents of '/abc/../..': chdir failed: Unknown system error 2␤  in any  at /home/camelia/rakudo-m-inst-1/share/perl6/runtime/CORE.setting.moarvm line 1␤  in block <unit> at /tmp/aYcxwvh1nq line 1␤␤Actually thrown at:␤…»

[22:32] <AlexDaniel> oh wow, I can create a ticket in “spam” queue! How cool is that

[22:33] *** pierrot joined
[22:36] <AlexDaniel> ok #128214

[22:36] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128214

[22:36] *** firstdayonthejob left
[22:41] <AlexDaniel> m: sub MAIN($x)

[22:41] <camelia> rakudo-moar 7a4ca4: OUTPUT«5===SORRY!5=== Error while compiling /tmp/BXEf7OCNGf␤Missing block␤at /tmp/BXEf7OCNGf:1␤------> 3sub MAIN($x)7⏏5<EOL>␤    expecting any of:␤        new name to be defined␤»

[22:41] <AlexDaniel> m: sub MAIN($x); say $x

[22:41] <camelia> rakudo-moar 7a4ca4: OUTPUT«Usage:␤  /tmp/glI1q5CQ3N <x> ␤»

[22:41] <AlexDaniel> didn't know that you can do that

[22:48] *** cognominal left
[22:48] *** bjz left
[22:49] *** snarkyboojum joined
[22:50] *** snarkyboojum left
[22:51] <diakopter> willthechill: ping

[22:54] *** tbrowder joined
[22:55] <tbrowder> hi p6 peeps, anyone have any ideas on how to debug p6 pod?

[22:55] <llfourn> tbrowder: in what way? you can inspect the tree by looking at $=pod.

[22:57] <tbrowder> i try to set env var P6DOC_DEBUG, then run 'p6doc my.pod' and get a very helpful (not!) about a p6 opaque objject and that's it!

[22:58] <llfourn> hmm I'm not sure about P6DOC_DEBUG sounds like a bug in p6doc?

[22:58] <tbrowder> llfourn: can you be more specific, please? 

[22:59] <llfourn> tbrowder: erm.. well it seems there is a bug in p6doc from what you are saying?

[22:59] <llfourn> I have nothing useful to be specific about it :\

[23:00] <tbrowder> okay, what is the canonical way to inspect $=pod?

[23:00] <timotimo> put say $=pod.perl; at the end of the .pod file and then just perl6 blah.pod

[23:00] <llfourn> yeah that's the easiest way

[23:01] <tbrowder> ah, okay, I'll try that, thanks

[23:04] <tbrowder> timotimo: btw, ref my perl6 rw tests, i tried using the :enc => 'ascii' when opening the input file and got no significant speed gain

[23:05] *** ecocode left
[23:06] *** bjz joined
[23:07] <timotimo> ah, nice

[23:12] <tbrowder> ref p6doc bug: the code is might heavy slogging for a p6 newbie--it looks like something Perl Monk BrowserUk would write (assuming he would write any p6 code at all)

[23:13] *** bjz left
[23:14] <timotimo> i'm going to reboot hach.

[23:15] *** dalek joined
[23:15] *** ChanServ sets mode: +v dalek

[23:15] *** synopsebot6 joined
[23:16] <timotimo> sorry y'all, but hack was having virtual hard drive trouble again

[23:21] <dalek> doc: ac2175a | (Daniel Green)++ | doc/Type/IO/Path.pod:

[23:21] <dalek> doc: Clarify IO::Path.Str, see http://irclog.perlgeek.de/perl6/2016-05-22#i_12525721

[23:21] <dalek> doc: review: https://github.com/perl6/doc/commit/ac2175a1ac

[23:21] <dalek> doc: 70b03ca | RabidGravy++ | doc/Type/IO/Path.pod:

[23:21] <dalek> doc: Merge pull request #536 from MasterDuke17/master

[23:21] <dalek> doc: 

[23:21] <dalek> doc: Clarify IO::Path.Str

[23:21] <dalek> doc: review: https://github.com/perl6/doc/commit/70b03ca5da

[23:24] *** willthechill left
[23:30] *** spider-mario left
[23:30] *** ssotka left
[23:34] *** willthechill joined
[23:37] *** [Coke] joined
[23:38] *** tbrowder left
[23:57] *** tokuhirom joined
[23:57] *** cpage_ joined
[23:59] *** ThisGeekChick joined
[23:59] *** wamba left
