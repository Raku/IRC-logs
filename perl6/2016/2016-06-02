[00:00] *** wamba left
[00:02] *** anomie__ joined
[00:02] *** i42 joined
[00:08] *** Akagi201 joined
[00:12] *** Akagi201 left
[00:18] *** pierre_ joined
[00:22] *** BenGoldberg joined
[00:26] *** _nadim left
[00:36] <stevieb> is the ENTER 'phaser' suppose to execute on every iteration of a for() loop? I get one "hi" here: perl6 -e 'ENTER {say "hi"}; for 1..3 -> $x {say $x}'

[00:37] *** Khisanth left
[00:38] <stevieb> docs say: "ENTER {...} #  at every block entry time, repeats on loop blocks.". I would expect it to fire on each loop

[00:38] <timotimo> um ... that enter phaser isn't inside the loop at all

[00:38] <TimToady> what timotimo++ said

[00:38] <yoleaux> 1 Jun 2016 10:21Z <Zoffix> TimToady: would you have time to offer a ruling on what the default tolerance to is-approx in Test.pm6 should be? Is it relative or absolute, and what value? My ideal choice would be absolute with $*TOLERANCE to match ≅. The specs/docs use absolute at 1e-5. And current impl uses relative at 1e-6. My more detailed plan for rewrite of is-approx: https://github.com/zoffixznet/debug/blob/master/mu/approx-rework.md

[00:38] *** gorgonzola joined
[00:38] <yoleaux> 1 Jun 2016 10:31Z <Zoffix> TimToady: sorry, ≅ uses relative tolerance, not absolute, but my ideal choice would still be to match it.

[00:38] <timotimo> m: ENTER { say "outside" }; for 1..3 -> $x { ENTER { say "inside" }; say $x }

[00:38] <camelia> rakudo-moar 069b78: OUTPUT«outside␤inside␤1␤inside␤2␤inside␤3␤»

[00:39] <stevieb> ahhhhh... ok, it goes INSIDE the loop. That explains it lol

[00:39] <timotimo> phasers always apply to the block they're in

[00:39] <TimToady> all phasers go inside, which is why we put CATCH inside its "try" (even if it isn't a try)

[00:39] <timotimo> and for simple statements like 'say "outside"' you don't even need the curlies

[00:39] <stevieb> I misunderstood. I thought it was a global thing, and it would act on ALL loops. Now I know

[00:39] <timotimo> that would certainly be strange. however, it can be done with a slang if you want to have that

[00:39] <TimToady> that's why CATCH can implicitly turn its surrounding block into a "try"

[00:40] <TimToady> well, you can't do that globally, but you could influence the compilation of all loops within a lexical scope

[00:41] <timotimo> "on enter resume next"

[00:41] <timotimo> i expected "global thing" meant "lexically scoped thing"

[00:42] <TimToady> we tend to be a bit picky about the meanings of those terms :)

[00:43] <stevieb> I just jumped too far ahead. I was looking at it like a BEGIN or INIT block in p5, where no matter where its located, it'll always get called at the right time (lexical scope is irrelevant). 

[00:43] <stevieb> slowly but surely all of this will come together

[00:44] <TimToady> nodnod

[00:47] *** ocbtec left
[00:47] * TimToady should backlog now, but can't really due to double dose of Novocaine® earlier putting his brane in sideways

[00:49] *** MasterDuke joined
[00:49] <TimToady> two new crowns put a big dent into my day, not to mention my dentist's and his assistant's

[00:50] <TimToady> but had to sneak it in between conferences :)

[00:50] *** Khisanth joined
[00:51] <timotimo> stevieb: well, BEGIN really fires as soon as the parser finishes its closing curly brace, and all INIT blocks are registered in a per-compilation-unit queue and fire when that compilation unit gets loaded. they still have access to the relevant package and lexical environment, of course

[00:52] *** i42 left
[00:52] *** i42 joined
[00:52] <MasterDuke> TimToady: i've been looking at RT #128210 and i asked about adverbing chained operators in general a couple days ago, but nobody knew of a working example

[00:52] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128210

[00:54] <MasterDuke> then i was looking at the commit where you added the version of ≅ that should allow you to set the tolerance (https://github.com/rakudo/rakudo/commit/e3c591a1)

[00:54] <MasterDuke> and there don't seem to be any related tests

[00:55] <MasterDuke> and i am curiout what the behavior should be: adverb applies to all uses of ≅ in a chain? or just the left-most of the adverb?

[00:57] *** ptolemarch left
[01:00] <kalkin-> I found a bug in moarvm 2016.05 If i have a Grammar B depending on Grammar A it only compiles cleanly the first time

[01:01] <kalkin-> as soon as i edit Grammar A I get missing or wrong dependency error

[01:02] <kalkin-> if i nuke my moar vm installation and rebuild everything with rakudbrew it works for one time until i edit Grammar A again

[01:02] *** tbrowder joined
[01:02] <kalkin-> I downgraded to moar 2016.04 and this fixed the issue

[01:03] <kalkin-> It looks like some precompilation cache doesn't get updated in 2016.05 version

[01:06] *** tbrowder left
[01:08] <kalkin-> I can reproduce the same behavior on the nom branch

[01:11] <TimToady> MasterDuke: iirc, the named argument was really added for internal use as a normal function call, and was never intended to be used in the chaining form; indeed, as you point out, adverbs are problematical in chained syntax anyway

[01:13] <MasterDuke> TimToady: ah ha, so the ticket should be closed as expected behavior?

[01:13] <jdv79> TimToady lives.  yay.

[01:14] * TimToady was off at a conference last week that turned out not to have good connectivity

[01:14] <jdv79> yay

[01:16] <TimToady> MasterDuke: I don't really consider it a bug, though arguably we should allow adverbs on chaining ops that are not, in fact, being chained

[01:17] <TimToady> or make that a degenerate case of applying an adverb to either all or the last one of the chain

[01:17] <TimToady> so might be worth leaving open for now

[01:18] *** kid51 joined
[01:18] <TimToady> if we applied to all, then we could do chained identical ops, and the dispatch failure would catch the attempt to misues the adverb more widely

[01:19] <TimToady> *misuse

[01:19] <TimToady> so I guess I'm vaguely in favor of distributing

[01:20] <TimToady> what I really don't want to see much of is A op1 B :foo op2 C trying to apply :foo to op1

[01:21] <TimToady> though if it can have an allowed meaning and merely be discourage culturally, that's okay I guess

[01:22] <TimToady> guessing is about all I'm good for in my current brane state :)

[01:22] <TimToady> *discouraged

[01:22] <MasterDuke> if you require the adverb to be at the end of a chain and apply to all the operators, would chains with multiple different operators be allowed?

[01:22] <TimToady> that's what I'm saying, it would naturally just fail if you applied an adverb where it wasn't recognized

[01:23] <TimToady> these are functions, not methods, so you can't just pass random named args that will be ignored

[01:23] <MasterDuke> i could imagine confusion if both operators happened to support the same adverb, but it had different meaning to each

[01:24] <TimToady> well, sure, but in the overall scheme of things I'm not worried about that failure mode :)

[01:24] <TimToady> that falls under enough rope to shoot yourself in the foot

[01:24] *** kid51 left
[01:25] *** kid51 joined
[01:26] *** kalkin-_ joined
[01:26] *** kalkin- left
[01:27] <MasterDuke> i'll let you be the rope salesman here and point any fingers in your direction. but i will reply to the ticket linking this chatlog

[01:29] *** molaf left
[01:30] <TimToady> thanks

[01:30] * TimToady wanders dinnerward

[01:30] *** kid511 joined
[01:31] *** kid51 left
[01:34] *** ssotka left
[01:41] *** molaf joined
[01:43] *** aero is now known as a3r0

[01:50] *** jack_rabbit left
[01:50] *** Actualeyes joined
[01:52] *** yqt left
[01:56] *** Akagi201 joined
[02:03] *** anomie__ left
[02:06] *** kid511 left
[02:08] *** BenGoldberg left
[02:19] *** sufrostico left
[02:26] *** anomie__ joined
[02:27] *** Zoffix joined
[02:32] *** Nick__ joined
[02:33] *** Nick__ left
[02:34] *** BenGoldberg joined
[02:39] <Zoffix> .tell AlexDaniel wrote the Multi-Server part of the IRC::Client spec. Not overly happy with having server nicknames as methods, but if someone wants to act on a specific server, I guess there's no way around having an identifier. Gonna hack something up on the weekend to get a feel for it: https://github.com/zoffixznet/perl6-IRC-Client/blob/rewrite/DESIGN/01-main.md#multi-server-interface

[02:39] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[02:39] <Zoffix> botsnack

[02:39] <synopsebot6> om nom nom

[02:39] <Zoffix> Hey! That wasn't for you! Bad bot!

[02:42] *** noganex_ joined
[02:42] <BenGoldberg> .botsnack

[02:42] <synopsebot6> om nom nom

[02:42] <yoleaux> :D

[02:42] <BenGoldberg> heh.

[02:43] <BenGoldberg> huggable, botsnack

[02:43] <synopsebot6> om nom nom

[02:43] <huggable> BenGoldberg, nothing found

[02:43] <BenGoldberg> huggable, botsnack is yummy!

[02:43] <synopsebot6> om nom nom

[02:43] <huggable> BenGoldberg, nothing found

[02:43] <BenGoldberg> synopsebot6, shush ;)

[02:46] <TEttinger> huggable, hug botsnack

[02:46] <synopsebot6> om nom nom

[02:46] * huggable hugs botsnack

[02:46] *** noganex left
[02:49] <BenGoldberg> IMHO, IRC bots should not respond on a channel, unless a message begins with the bot's nick, or begins with a command (and the command is very unlikely in ordinary conversation, like yoleaux's .whatever, or many other bots' !whatever).

[02:54] *** grondilu left
[02:58] *** gorgonzola left
[03:11] *** |meta left
[03:15] <Xliff> Heh.

[03:16] <Xliff> Um. Question. If I want to distribute a file with my Perl6 module, how would I do that? Also... how do I code the module to know how to read it, both when it is installed and when it is in it's module installation dir?

[03:18] *** Actualeyes left
[03:24] <MasterDuke> Xliff: http://irclog.perlgeek.de/perl6/2016-05-24#i_12539039

[03:25] <MasterDuke> oh, you asked the question that was an answer to. did it not work?

[03:27] *** cpage_ left
[03:36] *** pierre_ left
[03:43] *** pierre_ joined
[03:43] *** aries_liuxueyang left
[03:45] *** aries_liuxueyang joined
[03:45] *** Actualeyes joined
[03:46] *** ssotka joined
[03:47] *** MasterDuke left
[03:48] *** Xliff left
[03:48] *** pierre_ left
[03:48] *** jevin left
[03:48] *** Xliff joined
[03:50] *** jevin joined
[03:51] *** xinming left
[03:52] *** aries_liuxueyang left
[03:52] *** aries_liuxueyang joined
[03:53] *** xinming joined
[03:55] *** anomie__ left
[04:04] *** pierre_ joined
[04:16] *** pierre_ left
[04:18] *** pierre_ joined
[04:20] *** TreyHarr1 left
[04:21] *** TreyHarr1 joined
[04:22] *** jack_rabbit joined
[04:23] *** grassass joined
[04:24] *** pierre_ left
[04:24] *** keix left
[04:25] *** jdv79 left
[04:26] *** jdv79 joined
[04:28] *** Cabanossi left
[04:29] *** Cabanossi joined
[04:35] *** tardisx joined
[04:37] *** cpage_ joined
[04:38] *** khw left
[04:46] *** cpage_ left
[05:02] *** raiph joined
[05:32] <Xliff> .tell MasterDuke Thanks for the link. I haven't tried that, yet. The module is still under development, and I need to know how %?RESOURCE will work when the file still lives in the module installation directory. I will pursue this further!

[05:32] <yoleaux> Xliff: I'll pass your message to MasterDuke.

[05:44] *** kalkin-_ left
[05:46] *** kalkin- joined
[05:50] *** sjn joined
[05:53] *** domidumont joined
[05:55] *** BenGoldberg left
[05:56] *** pierre_ joined
[05:58] *** sno left
[06:01] *** domidumont left
[06:06] *** ssotka left
[06:07] *** tardisx left
[06:12] *** domidumont joined
[06:17] *** tardisx joined
[06:23] *** _mg_ joined
[06:30] <nine> vendethiel: err...no idea. I've had completely forgotten about that question until I read the selected quotes.

[06:36] *** tardisx left
[06:38] *** cosimo left
[06:41] *** tardisx joined
[06:42] *** cosimo joined
[06:44] *** RabidGravy joined
[06:45] <TEttinger> vendethiel: I think I now have the longest streak of anyone I know, of course as soon as Github stops tracking streaks

[06:45] <TEttinger> 719 days, will be 720 in 15 minutes

[06:46] <TEttinger> how long did your epic streak get to?

[06:46] <TEttinger> err that can't be right...

[06:48] <TEttinger> it will be 731 on the 14th, so it should be 718 today, 719 tomorrow

[06:49] <TEttinger> I think I was right the first time...

[06:50] <TEttinger> gah

[06:50] *** pierre_ left
[06:51] *** pierre_ joined
[06:58] *** sno joined
[06:58] <RabidGravy> yeah why did GH stop reporting that

[06:59] <RabidGravy> I don't know how long I've been but it's since January 9

[07:00] <vendethiel> TEttinger: congrats. mine was 531. good timing :P

[07:00] *** vendethiel left
[07:03] *** girafe joined
[07:05] <TEttinger> I thought ven had gotten to 710 or something, wow

[07:07] <Xliff> Dude! My longest streak isn't even 1% of that.

[07:07] <Xliff> <- Jealous!

[07:14] *** Akagi201 left
[07:15] *** azawawi joined
[07:16] <azawawi> $good-morning

[07:16] *** Akagi201 joined
[07:17] <psch> Useless use of $good-morning in sink context

[07:17] <psch> :P

[07:18] *** zakharyas joined
[07:18] *** g4 joined
[07:19] *** xinming left
[07:20] *** xinming joined
[07:23] *** abraxxa joined
[07:24] *** darutoko joined
[07:27] <azawawi> :)

[07:27] <psch> "No mainstream language today allows you to write a library to extend its type system." from http://lbstanza.org/purpose_of_programming_languages.html

[07:28] <psch> am i misunderstanding our MOP or does that mean Perl 6 isn't considered mainstream by the author?

[07:28] <psch> ...not that i'd necessarily disagree with that.  the actual point of my question is "can we do that"

[07:29] <psch> actually, what does "extend its type system" *mean* there..?

[07:29] <RabidGravy> I'd have to understand what the author means by "extend its type system"

[07:29] <RabidGravy> hahaha

[07:29] <psch> i was thinking e.g. "forbidding multiple inheritance with a new meta object" fits the bill, but i'm not sure

[07:30] <psch> and i do know we can do that

[07:31] <psch> "The type system of a programming language essentially defines its own subtyping relation, which may well be trivial." from https://en.wikipedia.org/wiki/Subtyping

[07:31] <psch> so if we can change the subtyping relation - by e.g. forbidding MI - we change the type system

[07:32] <moritz> also, in Perl 6 you can override type checking, afaict

[07:32] <RabidGravy> and the EXPORTHOW stuff allows you to completely change the way it works if you want

[07:36] *** rindolf joined
[07:36] <azawawi> do we have anything in Perl 6 that does unicode string normalization (e.g. 'ü'='u', 'ا'='أ')?

[07:37] <moritz> you mean like p5's Text::Unidecode?

[07:37] <moritz> not that I'm aware of

[07:38] <psch> http://hoelz.ro/blog/combining-character-caveats speaks about pretty much exactly that 

[07:38] <psch> in short: the neatest way we have is unfortunately NYI

[07:39] <azawawi> moritz: it is used mainly in search to normalize text (for equality) since the user may input ü or u

[07:40] <psch> azawawi: if you have keywords that you want to match you can :ignoremark i thin

[07:40] <psch> k

[07:40] <psch> m: say "föö" ~~ /:ignoremark foo/

[07:40] <camelia> rakudo-moar 069b78: OUTPUT«｢föö｣␤»

[07:40] *** azawawi_ joined
[07:40] * azawawi_ takes a look at Text::Unidecode

[07:40] *** wamba joined
[07:42] <azawawi_> m: say "أ" ~~ /:ignoremark ا/

[07:42] <camelia> rakudo-moar 069b78: OUTPUT«｢أ｣␤»

[07:42] *** Akagi201 left
[07:42] <azawawi_> perfect

[07:42] <azawawi_> psch++

[07:42] *** Akagi201 joined
[07:43] <azawawi_> m: say "ه" ~~ /:ignoremark ة/

[07:43] <camelia> rakudo-moar 069b78: OUTPUT«Nil␤»

[07:43] <azawawi_> not all cases though

[07:43] <RabidGravy> though if one wanted to make an index like that then you'd still want to "normalise"

[07:44] <azawawi_> m: say "ى" ~~ /:ignoremark ي/

[07:44] <camelia> rakudo-moar 069b78: OUTPUT«Nil␤»

[07:44] *** azawawi left
[07:44] <psch> azawawi_: the matcher has to be the mark-less, base grapheme

[07:44] *** azawawi_ is now known as azawawi

[07:44] <psch> azawawi_: :ignoremark doesn't mean "ignore the marks i put into the regex", it means "ignore marks in the Str i want to match and only match the base grapheme"

[07:45] <azawawi> i noticed

[07:46] <azawawi> this is one of the problems with Arabic search: you need to normalize before searching

[07:48] <azawawi> and it goes down to the database level where you may need to CREATE FUNCTIONs to normalize

[07:48] *** pierre_ left
[07:49] <azawawi> basically it is like $user-input.lc == $DB_COL.lc

[07:53] *** azawawi left
[07:55] *** zhmylove left
[07:57] *** pierre_ joined
[07:57] *** domidumont left
[08:04] *** domidumont joined
[08:14] *** tardisx left
[08:20] *** i42 left
[08:22] *** dakkar joined
[08:30] *** girafe left
[08:49] *** mr-foobar joined
[08:51] *** domidumont left
[08:52] *** domidumont joined
[08:54] <BooK> nine: just saw your Inline::Perl[56] talk at gpw2016. loved the message at the end!

[09:01] *** pierre_ left
[09:03] *** skids left
[09:03] <nine> BooK: thanks :)

[09:06] *** pierre___ joined
[09:11] *** pierre___ left
[09:16] *** user9 joined
[09:25] <BooK> do I understand correctly that I can start a project in Perl 6, and leave the db interactions to DBIC via Inline::Perl5 ?

[09:25] <timotimo> yeah, you can

[09:25] <timotimo> i think

[09:25] <BooK> until a Perl 6 DBIC-equivalent is created

[09:26] <RabidGravy> I really ought to start thinking about that

[09:30] <gregf_> wrt using Perl5 modules from Perl6, should this be all(for e.g if im using DBI): use Inline::Perl5;use DBI::from<Perl5>; #doesn't compile

[09:31] <timotimo> you don't need "use Inline::Perl5"

[09:31] <RabidGravy> because it's :from<Perl5> as an adverb to use

[09:31] <timotimo> yeah, only a single colon there

[09:31] <psch> isn't it an adverb to the module?

[09:31] <gregf_> yay

[09:31] <psch> as in 'use DBI:from<Perl5>' and not 'use DBI :from<Perl5>'

[09:32] <RabidGravy> dunno, never used it

[09:32] <gregf_> hmm spaces and extra colons :|

[09:32] *** patrickz joined
[09:32] <gregf_> works!

[09:32] <gregf_> can call ruby and python as well :)

[09:33] <gregf_> thanks!

[09:34] <timotimo> and lua, too

[09:35] <gregf_> er, well, thats almost like perl5

[09:35] <gregf_> btw, can i include switches in Perl6?

[09:36] <psch> what kind of switches?

[09:36] <gregf_> like so in Perl5 i can do -I<lib1> -I<lib2> or PERL5LIB

[09:36] <psch> did you try --help? :)

[09:36] <gregf_> perl6 -e -I~/PERL/DBICSCHEMA/ 'use HERMESSCHEMA:from<Perl5>; #like that

[09:37] <gregf_> psch++ ;)

[09:38] *** domidumont left
[09:39] *** pierre___ joined
[09:39] *** domidumont joined
[09:40] *** domidumont left
[09:40] <nine> And I thought another talk about Inline::Python wouldn't be worth it. But finally having a decent video recording makes all the difference :)

[09:42] *** domidumont joined
[09:45] <timotimo> oh, a talk about inline::python? i missed that one

[09:45] <nine> Err...I meant Inline::Perl5

[09:47] *** domidumont left
[09:53] <RabidGravy> well that's the first time I've tried it but "use Emitria::Schema:from<Perl5>" works fine

[09:53] *** cpage_ joined
[09:57] <gregf_> was trying this: *doesnt seem to work in Perl6*

[09:57] <gregf_> perl -le 'use JSON::XS;my $json = decode_json("{ \"one\" : 1 , \"two\" : 2 }");print $json; #perl5

[09:58] <gregf_> perl6 -e 'use JSON::XS:from<Perl5>;my $json = decode_json("{ \"one\" : 1 , \"two\" : 2 }");say $json; #does'nt

[09:58] <gregf_> anyways *work now*

[09:59] <RabidGravy> that' s because of the quotes and the curlies

[09:59] <RabidGravy> it's still Perl6

[10:00] <timotimo> right, curlies interpolate in " quotes

[10:00] <timotimo> not in ', though

[10:00] <gregf_> ah - i see

[10:00] <RabidGravy> perl6 -e 'use JSON::XS:from<Perl5>;my $json = decode_json(q"{ \"one\" : 1 , \"two\" : 2 }");say $json;'

[10:00] <RabidGravy> {one => 1, two => 2}

[10:03] <RabidGravy> hahaha, brilliant

[10:03] <RabidGravy> perl6 -e 'use lib:from<Perl5> <lib>; use Emitria::Schema:from<Perl5>'

[10:03] <RabidGravy> I hadn't realised that would work until just now

[10:07] <nine> RabidGravy: well it did need a fix in rakudo back in July ;)

[10:07] <nine> RabidGravy: though the CompUnit::Repository structure would have fixed it as well just a couple months later.

[10:09] *** Akagi201 left
[10:09] <RabidGravy> I may then just flip the rest of Emitria to Perl 6 and just make a wafer thin facade over the schema part

[10:09] *** pierre___ left
[10:10] *** Akagi201 joined
[10:10] *** wamba left
[10:11] *** pierre___ joined
[10:12] *** TEttinger left
[10:13] *** Zero_Dogg left
[10:14] *** Zero_Dogg joined
[10:22] *** shlomif joined
[10:23] *** shlomif left
[10:23] <RabidGravy> right! supermarket!

[10:24] *** wamba joined
[10:26] *** pierre___ left
[10:27] *** luiz_lha left
[10:32] *** ocbtec joined
[10:35] *** xtreak joined
[10:37] *** Zoffix left
[10:39] <xtreak> I get "Can't exec "git": Too many levels of symbolic links" while running 'rakudobrew build moar' , "Failed running git fetch"

[10:45] <psch> xtreak: i'd guess removing ~/.rakudobrew (i think?) probably helps

[10:45] <psch> xtreak: of course you have redo any init thingies rakudobrew might do

[10:45] <psch> i don't use it all, so i don't really know :S

[10:46] *** labster left
[10:54] *** patrickz left
[10:57] *** bjz joined
[10:58] *** donaldh joined
[11:01] *** ufobat joined
[11:24] <BooK> so I was looking for some logo implementation to show and teach my kids (and more importantly let them experiment and play with it, without the need for help/supervision)

[11:25] <BooK> and most of the stuff I found wasn't so nice (in-browser stuff, or not extradinary text ui)

[11:25] <BooK> so I was wondering, how hard would it be to make a logo implementation in perl6?

[11:26] <BooK> or maybe there's one already?

[11:27] <BooK> I mean showing the result of "repeat 6 [ forward 50 arc 360 50 left 60 ]" got me pretty amazed OHHs and AAHs

[11:27] *** _mg_ left
[11:28] *** rindolf left
[11:31] *** _mg_ joined
[11:34] <DrForr> BooK: There's not one that I'm aware of, but let me find a parser tutorial you mght find helpful :)

[11:34] *** mr-foobar left
[11:35] <BooK> I was already thinking about parsing logo into postscript for the print functions :-)

[11:35] <DrForr> http://theperlfisher.blogspot.ro/2016/02/from-regular-expressions-to-grammars-pt.html

[11:36] <DrForr> You'll want to jump into part 3 thoguh.

[11:36] <DrForr> *though

[11:39] *** domidumont joined
[11:39] *** rindolf joined
[11:40] *** finanalyst joined
[11:41] <finanalyst> Can't get DBIish to install. Are there system dependencies that must be installed first? I'm running Ubuntu 16.04.

[11:41] *** kid51 joined
[11:45] *** pmurias joined
[11:46] <pmurias> hi

[11:47] <jnthn> hi pmurias 

[11:48] *** donaldh left
[11:51] *** kid51 left
[11:56] *** rindolf left
[11:58] *** domidumont left
[11:59] *** rindolf joined
[12:01] <nine> finanalyst: probably. Any error messages you get might help us help you

[12:01] <finanalyst> nine: thanks. whats the best way? Several error messages in the test suite.

[12:02] <finanalyst> I installed with panda now with --force and --notests

[12:02] <finanalyst> But nothing in documentation about system dependents

[12:02] <nine> finanalyst: post the full output on gist.github.com

[12:04] <finanalyst> nine: https://gist.github.com/finanalyst/202f079c2fa2a239342d3067709e4bad

[12:11] <nine> finanalyst: could be that DBIish still requires libmysqlclient to be installed

[12:13] *** kaare__ joined
[12:13] *** kaare__ is now known as kaare_

[12:15] <finanalyst> nine: also pq? 

[12:20] *** zhmylove joined
[12:21] *** bjz_ joined
[12:21] <nine> finanalyst: maybe. Though I feel like I'm missing something here. I surely hope that DBIish does not require you to have libraries for all drivers available

[12:21] <finanalyst> nine: it looks like that to me.

[12:21] *** bjz left
[12:22] <finanalyst> i just installed mysqlclient and got a whole lot more tests passing.

[12:22] <finanalyst> Does panda run the whole test suite before installing, or does it runs a subset?

[12:23] <finanalyst> there is no 'panda test <module-name>' option, so I assume that to rerun tests requires running prove in the module

[12:24] <finanalyst> directory

[12:24] <stevieb> I'm very curious to know if the pg and orcl messages were simply warnings or actual failures. It looks like only mysql failed, but I just started in p6, and haven't read up on testing yet, and any differences between p5 and p6

[12:30] <finanalyst> Since Im most interested in SQLite, I tried the example there. Got DBDish::SQLite::Connection.disconnect is DEPRECATED, please use .dispose  in block <unit> at ./sqlite.p6 line 49

[12:30] <finanalyst> So example is out of date?

[12:31] <nine> t/lib/Test/DBDish.pm6 line 55 suggests that the tests should be skipped when a driver is unable to connect

[12:35] <stevieb> yep. that's what it looked like to me for the other two in the results. Can you manually download the distribution (if that's what it's called in Perl6), rename that test file to eg: 10-mysql.t.no-run or something, and see if it'll work then? From the dist dir: "panda install ."

[12:43] <finanalyst> as I said. I have installed the module. Used 'panda --force --notests DBIish'

[12:44] <finanalyst> Installed SQLite  and got the example working.

[12:44] *** kurahaupo joined
[12:45] <stevieb> ahhh ok, I misread that it was successfully installed. I'll get my feet wet with playing with a failing module install in a little while. It'll help me understand writing tests for when I need to do it :)

[12:45] <stevieb> if it is just a case of a missing skip, I'll attempt at a fix and create my first p6 PR

[12:46] *** donaldh joined
[12:47] *** Sgeo left
[12:53] *** Akagi201 left
[12:55] *** g4 left
[12:56] <nine> ++stevieb

[13:00] *** wamba left
[13:10] *** stevieb left
[13:13] <kalkin-> FYI: It's not possible to install Task::Star with zef, it fails building Linenoise

[13:13] <kalkin-> Same works fine with panda

[13:21] *** Actualeyes left
[13:22] *** stevieb joined
[13:22] *** ribasushi joined
[13:24] *** user9 left
[13:25] *** wamba joined
[13:26] *** user9 joined
[13:32] *** cdg joined
[13:36] *** domidumont joined
[13:40] *** Vish_ joined
[13:41] <Vish_> Hi

[13:41] <Vish_> Does anyone know when the official perl 6 book is gonna be released?

[13:42] <perlpilot> Vish_: if you mean "Programming Perl 6", not for a while yet.

[13:42] <Vish_> Any timelines available?

[13:43] <Vish_> I'm looking for a good material to learn perl 6. 

[13:43] <perlpilot> Vish_: you'd have to talk with TimToady about that.   If I were to guess though, I'd say next year at the earliest.

[13:43] <Vish_> Something on the lines of learning perl or the camel book. 

[13:43] <perlpilot> Vish_: perl6.org has some learning resources

[13:44] *** Akagi201 joined
[13:44] <DrForr> There are several efforts underway, and people keep pestering me as well :) Is it maybe time to add a learn.perl6.org domain, if we don't already have one?

[13:44] <Vish_> How can I contact  timtoady directly?

[13:45] <perlpilot> Vish_: also, you can read the synopses, the docs, the Perl 6 modules, etc. and ask questions here.  We're more than happy to help :)

[13:45] <Vish_> And learn.perl6 sounds like a good idea. 

[13:46] <perlpilot> Vish_: re contacting TimToady ... if you hang out here long enough, you'll eventually be active around the same time he is active.  :)

[13:48] <Vish_> Hahh. I hope I'll get Lucky someday to talk to larry. Thank u guys. i saw a video where he says this time the book will be a butterfly book coz of camelia. I hope he gets it out soon. 

[13:48] <perlpilot> Vish_: Are you a Perl 5 person or just interested in Perl 6?

[13:49] <DrForr> I don't think he's interested in that right now.

[13:49] <Vish_> I'm a perl 5 person 

[13:49] <perlpilot> Vish_: Are you going to YAPC?

[13:50] <Vish_> I don't if it happening in oz. I'm from sydney. 

[13:50] <DrForr> Sydney.pm may be active, have you looked for a local Perl group?

[13:50] <Vish_> I hope Atleast randall shwartz gets learning perl 6 out. 

[13:51] <Vish_> Nope. Probably I should do that. 

[13:51] <DrForr> It won't be him, at least I don't remember him talking about it. (at OSCON)

[13:51] <Vish_> Or Brian d foy ?

[13:52] *** ZoffixW joined
[13:53] <ZoffixW> Probably not. 

[13:53] <Vish_> I'm running out of options. I hope someone releases a book. :p

[13:53] <ZoffixW> Vish_, there're a couple of non-perl6.org website resources as well: https://learnxinyminutes.com/docs/perl6/   http://perl6intro.com/ and http://perl6.party/

[13:54] <ZoffixW> Vish_, why do you need a book? Perl 6 is a huge language. I think any complete book on the language will be outdated by the time it reaches the printing press.

[13:54] <ZoffixW> Just as CSS and HTML books are

[13:54] <Vish_> Yes those are the resources I'm currently looking into.

[13:55] <Vish_> Coz I would like to read the thoughts of the language designer in his own words. Also in a book format information is organised 

[13:55] <Vish_> It's also easier to read from the book. 

[13:56] *** grondilu joined
[13:56] <ZoffixW> :/

[13:56] <perlpilot> Assuming the book is well-written and well-organized.

[13:56] <RabidGravy> well, I've written 53 Perl 6 modules and I didn't read a book

[13:56] <gregf_> its easier to fall asleep when reading a book as well *ducks and runs*

[13:56] <ZoffixW> Even if it's well-organized, half of it will talk about features you won't have any (immediate) use for. 

[13:57] <RabidGravy> yaw

[13:57] <gregf_> http://docs.perl6.org/ *is quite good for a start*

[13:58] <ZoffixW> Yeah, the http://docs.perl6.org/language.html part covers a good portion of common things.

[13:58] <Vish_> Well yes and no. Diff people consume info in diff ways. So some people prefer manuals some books and some videos. So the form doesn't matter. But it's good to have all options to cater to the range. 

[13:58] <RabidGravy> the source is pretty good

[13:58] *** patrickz joined
[13:58] * jnthn enjoyed reading Programming Perl just as a fun thing to read :)

[13:58] <ZoffixW> The only Perl book I ever read is Modern Perl by chromatic

[13:59] <moritz> I liked Higher Order Perl

[13:59] <RabidGravy> all good fun

[13:59] <perlpilot> Vish_: either way, I encourage you to continue hanging out on #perl6 and asking questions.

[13:59] <gregf_> havent ever read a book on Perl... only code and IRC :)

[13:59] <moritz> and Mastering Regular Expressions, though it's not all perl

[14:00] <Vish_> Thanks pilot

[14:00] * grondilu learnt most of what he knows about perl with the man pages.  Is still hoping there will be something equivalent for perl6 one day.  The closest he can find are the synopses.

[14:01] * grondilu likes man pages because he likes to have documentation available on the command line.

[14:02] <RabidGravy> do feel free to make Pod::To::Man

[14:02] *** abraxxa left
[14:02] *** abraxxa1 joined
[14:02] <nine> Looks like I'm completely spoiled by Perl 6 already. Tried to use a my scoped package in Perl 5...

[14:03] <RabidGravy> yeah

[14:03] *** domidumont left
[14:04] *** Vish_ left
[14:04] <perlpilot> nine: I'm always typing P6isms in my P5 code.

[14:04] *** jack_rabbit left
[14:05] <RabidGravy> mind I always type Perlisms in C too

[14:05] *** yqt joined
[14:06] <perlpilot> If I coded more C, I'd probably do that too  :)

[14:07] *** ribasushi left
[14:07] <perlpilot> Years ago, when I was doing C more regularly, I kept trying to use "unless" but that's the only Perlism I can remember using in C

[14:08] <RabidGravy> I go leave out parens a lot

[14:08] <Juerd> When I write C and type "=~" and then realise it doesn't do regexes, I want to just quit and go outside.

[14:09] <RabidGravy> :)

[14:09] <RabidGravy> DrForr, how is Prancer doing?  Haven't looked in a while

[14:09] <Juerd> You just know that the equivalent, no matter how simple, is going to be at least a dozen lines and an annoying loop.

[14:09] <ZoffixW> I use single quotes to avoid accidental interpolation... :(

[14:09] *** finanalyst left
[14:10] <Juerd> I came from BASIC originally and can't really get used to single quotes. Sometimes I use them for a while but I tend to get back to ""...

[14:10] <Juerd> Even though I first used Perl in 1998...

[14:10] *** Vish_ joined
[14:10] <RabidGravy> I can't remember the last time I used regcomp()/regexec()

[14:11] <Vish_> Quick question ppl. Emacs or vim for perl 6 ?

[14:11] *** ribasushi joined
[14:11] <ZoffixW> Vish_, Atom

[14:11] <ZoffixW> :)

[14:11] <literal> whichever editor you prefer for your other coding, of course

[14:11] <Vish_> Haha. But my option is only bw Emacs and vim. 

[14:11] <RabidGravy> whatever editor you're happiest with

[14:11] *** abraxxa1 left
[14:12] <Vish_> I'm in terms of package support 

[14:12] *** |meta joined
[14:12] <ZoffixW> Vish_, well, I know there are vim P6 highlights, if you use them, never heard of ones for emacs.

[14:12] <literal> vim's syntax highlighting is decent, emacs' is incomplete

[14:12] <RabidGravy> I think more people are in favour of vim by a small margin

[14:12] <DrForr> RabidGravy: I'm hoping to get some work in on the weekend, mainly making sure it still works with current Crust/perl6.

[14:12] <perlpilot> Vish_: I use vim

[14:13] <literal> ZoffixW: https://github.com/hinrik/perl6-mode :)

[14:13] <Vish_> Awesome. Cool. Thanks.  

[14:13] <DrForr> I've been focusing on talks and not falling asleep on planes.

[14:13] <DrForr> And currently beating work repos into submission.

[14:13] <ZoffixW> huggable, emacs perl6 :is: https://github.com/hinrik/perl6-mode

[14:13] <huggable> ZoffixW, Added emacs perl6 as https://github.com/hinrik/perl6-mode

[14:14] <ZoffixW> literal, thanks

[14:15] <Juerd> This is probably the only place on the entire internet, where the question 'emacs or vim' does not result in a holy war.

[14:16] *** pierre___ joined
[14:16] <RabidGravy> DrForr, well it still passes all but one test :)

[14:17] <stevieb> my first Perl6 Pull Request... related to discussion here earlier today where t/10-mysql.t in DBIish was not properly skipping tests: https://github.com/perl6/DBIish/pull/68

[14:17] <RabidGravy> and that is the test being wrong BTW

[14:17] *** acrussell joined
[14:18] *** domidumont joined
[14:18] <dalek> DBIish: 4c04e2e | (Steve Bertrand)++ | t/10-mysql.t:

[14:18] <dalek> DBIish: fixed t/10-mysql.t so it skips properly if mysqlclient not installed

[14:18] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/4c04e2ea84

[14:18] <dalek> DBIish: a8e1455 | niner++ | t/10-mysql.t:

[14:18] <dalek> DBIish: Merge pull request #68 from stevieb9/mysql_skip_tests

[14:18] <dalek> DBIish: 

[14:18] <dalek> DBIish: fixed t/10-mysql.t so it skips properly if mysqlclient not installed

[14:18] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/a8e1455807

[14:19] <RabidGravy> what larks

[14:19] <ugexe> thats strange, it used to skip for me at one point (never have mysql installed)

[14:19] <DrForr> RabidGravy: Good to hear, I think a wiki will be a nice tiny target to aspire to.

[14:20] *** Vish_ left
[14:20] <stevieb> It may be that with skip(), it had 85 tests manually set. I didn't look, but it may be that more tests were added later, and that 85 was forgotten about. skip-rest() is likely more future-proof anyhow

[14:21] <RabidGravy> but there's an exit after, it should just complain about the wrong number of tests

[14:21] <RabidGravy> weird

[14:22] *** pmurias left
[14:22] *** ocbtec left
[14:23] <stevieb> good point. As I've said, I just started really learning p6, and haven't even touched testing yet, so I truly don't know what would have been expected. 

[14:23] *** pmurias_ joined
[14:24] <nine> The Pg tests use skip-rest already

[14:24] <stevieb> yep

[14:25] *** ZoffixW left
[14:25] *** abraxxa joined
[14:25] *** brrt joined
[14:26] *** Vish_ joined
[14:30] *** acrussell left
[14:30] *** ptolemarch joined
[14:30] *** Vish_ left
[14:35] *** skids joined
[14:37] *** pierre___ left
[14:38] *** abraxxa left
[14:50] *** adu joined
[14:53] *** xtreak left
[14:59] *** b^_^d joined
[15:04] *** edehont joined
[15:05] *** PotatoGim left
[15:07] *** PotatoGim joined
[15:10] <dalek> gtk-simple/declare-build-depends: b76117c | ugexe++ | META6.json:

[15:10] <dalek> gtk-simple/declare-build-depends: Declare build-depends

[15:10] <dalek> gtk-simple/declare-build-depends: review: https://github.com/perl6/gtk-simple/commit/b76117c391

[15:11] *** Akagi201 left
[15:13] *** Akagi201 joined
[15:13] *** Akagi201 left
[15:14] *** patrickz left
[15:17] *** sufrostico joined
[15:19] *** brrt left
[15:20] *** Actualeyes joined
[15:22] *** ssotka joined
[15:33] *** domidumont left
[15:36] *** user9 left
[15:36] *** _mg_ left
[15:38] *** Actualeyes left
[15:41] <dalek> gtk-simple: b76117c | ugexe++ | META6.json:

[15:41] <dalek> gtk-simple: Declare build-depends

[15:41] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/b76117c391

[15:41] <dalek> gtk-simple: 6178e3e | RabidGravy++ | META6.json:

[15:41] <dalek> gtk-simple: Merge pull request #40 from perl6/declare-build-depends

[15:41] <dalek> gtk-simple: 

[15:41] <dalek> gtk-simple: Declare build-depends

[15:41] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/6178e3e538

[15:41] <RabidGravy> all good

[15:53] *** yqt left
[15:59] *** brrt joined
[15:59] *** brrt left
[16:00] *** Actualeyes joined
[16:03] *** bjz_ left
[16:04] *** ribasushi left
[16:04] *** bjz joined
[16:06] *** ufobat left
[16:07] *** patrickz joined
[16:11] *** ribasushi joined
[16:17] *** AlexDaniel joined
[16:17] <AlexDaniel> .oO( “diff people” – what, how can you diff people? )

[16:17] <yoleaux> 02:39Z <Zoffix> AlexDaniel: wrote the Multi-Server part of the IRC::Client spec. Not overly happy with having server nicknames as methods, but if someone wants to act on a specific server, I guess there's no way around having an identifier. Gonna hack something up on the weekend to get a feel for it: https://github.com/zoffixznet/perl6-IRC-Client/blob/rewrite/DESIGN/01-main.md#multi-server-interface

[16:20] *** setty2 joined
[16:23] *** pmurias joined
[16:30] <AlexDaniel> .tell Zoffix hmm, so is it ｢$.irc.X.quit; $.irc.Y.quit｣ or ｢$.irc.quit: :servers(X, Y)｣?

[16:30] <yoleaux> AlexDaniel: I'll pass your message to Zoffix.

[16:32] *** dakkar left
[16:32] <AlexDaniel> .tell Zoffix I am not sure which one is better, but the last one provides an ability to specify multiple servers at once

[16:32] <yoleaux> AlexDaniel: I'll pass your message to Zoffix.

[16:34] *** zakharyas left
[16:35] *** edehont left
[16:36] <AlexDaniel> .tell Zoffix also, have you thought about throwing an error if e.g. the code says ｢$.irc.part: '#perl6';｣ but the bot is logged in on #perl6 on multiple servers. Or maybe at least a warning?

[16:36] <yoleaux> AlexDaniel: I'll pass your message to Zoffix.

[16:37] *** ZoffixW joined
[16:37] <AlexDaniel> Zoffix or maybe it should throw some kind of a warning right when you join the same channel on multiple servers? Or maybe the user may have to :force such actions? I dunno, just brainstorming

[16:38] <ZoffixW> AlexDaniel, :servers() wasn't part of *each* command in what I wrote last night, but yeah, that's a good idea. So basically $.irc.s-whatever.quit is just a shortcut for $.irc.quit: :servers<s-whatever>

[16:39] *** ZoffixW is now known as Zoffix

[16:39] <Zoffix> .botsnack

[16:39] <synopsebot6> om nom nom

[16:39] <yoleaux> :D

[16:39] <yoleaux> 16:30Z <AlexDaniel> Zoffix: hmm, so is it ｢$.irc.X.quit; $.irc.Y.quit｣ or ｢$.irc.quit: :servers(X, Y)｣?

[16:39] <yoleaux> 16:32Z <AlexDaniel> Zoffix: I am not sure which one is better, but the last one provides an ability to specify multiple servers at once

[16:39] <yoleaux> 16:36Z <AlexDaniel> Zoffix: also, have you thought about throwing an error if e.g. the code says ｢$.irc.part: '#perl6';｣ but the bot is logged in on #perl6 on multiple servers. Or maybe at least a warning?

[16:39] *** Zoffix is now known as ZoffixW

[16:39] <ZoffixW> AlexDaniel, I don't think I'd want a warning or error there. 

[16:41] <ZoffixW> And the commands that need a server aren't something that'd be commonly used; at least I don't think so. I think common use would be defining something like  method irc-to-me ($msg) {  *inspect message and generate output string*  $msg.reply: $output }

[16:41] <ZoffixW> The multi-server thing is completely invisible in such use.

[16:42] *** sno left
[16:43] *** rurban joined
[16:44] <ZoffixW> Or maybe forgo the $.irc.s-whatever stuff and just require use of :servers. KISS

[16:44] *** sufrostico left
[16:44] <ZoffixW> (without :servers, command goes out to all servers)

[16:46] *** andrewalker_ left
[16:46] *** donaldh left
[16:46] <AlexDaniel> huggable: dunno

[16:46] <huggable> AlexDaniel, ¯\_(ツ)_/¯

[16:49] <ZoffixW> m: class IRC { multi method irc-to-me ($msg where $msg.what ~~ /^foo/) {say "you said foo"}; multi method irc-to-me ($msg where $msg.what ~~ /^bar/) {say "here's bar"} }; IRC.new.irc-to-me: class {has $.what = 'foo'}.new; IRC.new.irc-to-me: class {has $.what = 'bar'}.new

[16:49] <camelia> rakudo-moar 069b78: OUTPUT«you said foo␤here's bar␤»

[16:49] <ZoffixW> Oh, this is lovely \o/

[16:51] *** rurban left
[16:55] *** yqt joined
[16:57] *** zakharyas joined
[16:59] *** patrickz left
[17:00] *** andrewalker joined
[17:08] *** ocbtec joined
[17:09] *** Actualeyes left
[17:12] *** edehont joined
[17:18] *** ZoffixW left
[17:19] *** edehont left
[17:26] *** spider-mario joined
[17:33] *** zakharyas left
[17:35] *** sno joined
[17:38] *** TimToady left
[17:38] *** _mg_ joined
[17:40] *** TimToady joined
[17:42] *** [particle] joined
[17:44] *** maybekoo2 joined
[17:47] <dalek> doc: dc24fbb | (Jan-Olof Hendig)++ | doc/Type/Dateish.pod:

[17:47] <dalek> doc: Added docs for Dateish.daycount

[17:47] <dalek> doc: review: https://github.com/perl6/doc/commit/dc24fbba10

[17:58] *** yqt left
[18:02] *** andreoss joined
[18:06] *** telex left
[18:08] *** telex joined
[18:10] <tony-o> anyone have an example of how to write a sub's signature that is passed as a parameter to nativecall whose signature should receive 'const char**'?  i've tried using CArray, CPointer (both with [Str]) and have also tried using .deref in the body of the sub -

[18:10] <tony-o> i keep ending up with: Internal error: Unwound entire stack and missed handler

[18:11] <tony-o> i'm attempting to port this example in expat to perl6: https://sourceforge.net/p/expat/code_git/ci/master/tree/expat/examples/elements.c#l26

[18:16] *** _nadim joined
[18:19] *** pmurias left
[18:19] *** pmurias_ left
[18:19] *** ptolemarch left
[18:25] <grondilu> is it reasonable to hope that one day NativeCall will be able to automatically generate sub declarations from C header files?

[18:25] *** sufrostico joined
[18:26] <grondilu> also I vaguely recall eventually it should be possible to do : 'use someClib:from<C> <funcA funcB>;'

[18:27] <grondilu> or something like that

[18:31] *** Zero_Dogg left
[18:31] *** Zero_Dogg joined
[18:31] *** Zero_Dogg left
[18:31] *** Zero_Dogg joined
[18:33] *** girafe joined
[18:36] <hoelzro> o/ #perl6

[18:38] <hoelzro> fun bit of miscellanea: I just, for fun, wrote a little shell pipeline to find out how many statements were uttered by each user in this channel over the logs I've kept - 3 years' worth

[18:38] <hoelzro> and the winner is...

[18:39] <hoelzro> ...timotimo, with 91940 messages!

[18:39] <TimToady> I

[18:39] <TimToady> should

[18:39] <TimToady> write

[18:39] <TimToady> more

[18:39] <TimToady> messages

[18:39] <hoelzro>  =)

[18:40] <tony-o> how many behind is TimToady now?

[18:41] <hoelzro> he's in 6th, with 52991

[18:41] <hoelzro> granted, this is just the last three years; I don't know how old this channel is

[18:42] *** wamba left
[18:43] *** kurahaupo left
[18:43] <perlpilot> Registered : Feb 25 16:36:15 2005 (11y 14w 2d ago)

[18:43] <perlpilot> it's that old

[18:44] <hoelzro> so there's a bit of a gap in my logging =P

[18:44] <tony-o> found my answer,  calling .elems after nativecasting the char** to CArray[Str] causes that error ..

[18:46] *** kurahaupo joined
[18:49] *** wamba joined
[18:58] *** labster joined
[19:06] *** wamba left
[19:08] <timotimo> holy hell, how did i manage to chat so much

[19:09] *** yqt joined
[19:10] <mst> timotimo: procrastination is an amazing thing

[19:10] *** wamba joined
[19:13] <geekosaur> tony-o, that could be either CArray[Str] or CPointer[Str], because C is annoying. and using one when the code expects the other will usually net you a core dump, natch.

[19:13] <geekosaur> without knowing more about the C code, that's all that can be said

[19:14] <tony-o> geekosaur: yea i figured that and tried both - using the CArray[Str] and then iterating two at a time and checkined 'defined'edness seems to work and that's how they're iterating in one of the extended examples 

[19:14] *** ocbtec left
[19:16] <tony-o> since they're not passing the length of the resulting array or anything anywhere it's a little difficult to tell and '.elems' from the nativecast causes the error which makes more sense now, i suppose

[19:16] <geekosaur> right, so defined check is looking for a nullptr at end of array

[19:16] <tony-o> yessir

[19:17] * geekosaur wishes C had a real type system

[19:17] <tony-o> which means i might could release a lib-expat XML parser soon

[19:18] *** salv0 joined
[19:18] <tony-o> soon as i hear back from supernovus

[19:19] *** darutoko left
[19:22] *** andreoss left
[19:28] *** avalenn left
[19:29] *** johnjohn101 joined
[19:29] <johnjohn101> hi perl6

[19:30] <johnjohn101> how's the speed of perl 6 programs coming along these days?

[19:32] <lizmat> johnjohn101: compared to when in the past ?

[19:34] <johnjohn101> lizmat: can you compare to perl 5 or so?

[19:35] <lizmat> well, that's a bit comparing apples with pears

[19:35] <johnjohn101> i know

[19:35] <geekosaur> it's faster than it was a month or two ago but still slow. optimizations ongoing

[19:35] <johnjohn101> geekosaur: thanks

[19:35] * geekosaur was watching discussion of another such optimization a couple hours ago

[19:35] <lizmat> how long does it take Perl 5 to load Moose with all the extensions you need to get a similar feature set to Perl 6 ?

[19:36] <lizmat> then again, if you don't need Moose, :-)

[19:36] <johnjohn101> i don't use moose

[19:36] <Juerd> I really wouldn't use Moose, mostly because of the startup overhead.

[19:36] <johnjohn101> i really don't use much in the way of OO

[19:36] <lizmat> do you use BigInt ?

[19:36] <RabidGravy> tony-o, look forward to it, XML::Class is somewhat slow due to XML being somewhat inefficient

[19:37] *** ZoffixW joined
[19:37] <johnjohn101> lizmat: no most of my coding is used for dbi with sqlserver.

[19:37] <ZoffixW> johnjohn101, we actually have a FAQ entry for your question: http://docs.perl6.org/language/faq#Is_Perl_6_fast_enough_for_me%3F

[19:37] <johnjohn101> my favorite perl lib at the moment is xml::twig!

[19:37] <lizmat> ZoffixW++

[19:38] <lizmat> johnjohn101: then you'll love NativeCall I think

[19:38] <perlpilot> johnjohn101: Just use Inline::Perl5 and you can still have XML::Twig  ;)

[19:38] <johnjohn101> oh wow

[19:39] <ZoffixW> huggable, Inline::Perl5

[19:39] <huggable> ZoffixW, Inline::Perl5 lets you use most of Perl 5's CPAN from Perl 6. See http://modules.perl6.org/repo/Inline::Perl5 and the talk about the module https://www.youtube.com/watch?v=CEs1g94qNso

[19:40] *** jjido joined
[19:40] <RabidGravy> anyway, I reckon I can make the functional equivalent of SQL::Abstract in about a third of the code

[19:43] <ZoffixW> johnjohn101, more on the speed thing, including ways you can optimize: http://perl6.party/post/Perl-6-Is-Slower-Than-My-Fat-Momma

[19:45] <perlpilot> RabidGravy: what would be nice would be an SQL::Parser that knows about all of the various database specific syntaxes.

[19:47] <RabidGravy> single grammar with some roles for the dialect parts

[19:47] <tony-o> perlpilot++

[19:48] <ZoffixW> m: role Bar { token dem-digits { \d+ } }; grammar Foo does Bar { token TOP { <dem-digits>+ } }.parse('42').say

[19:48] <camelia> rakudo-moar 069b78: OUTPUT«｢42｣␤ dem-digits => ｢42｣␤»

[19:48] <ZoffixW> wow. I didn't know grammars could do roles :o

[19:49] <RabidGravy> there just  classes with a specialised Metaclass

[19:49] <RabidGravy> they're

[19:50] <mst> dem digits dem digits dem ... numeric digits

[19:51] *** ZoffixW left
[19:54] *** telex left
[19:54] <xfix> perl6: say 4 ∈ [∩]

[19:54] <camelia> rakudo-jvm 40a953: OUTPUT«cannot connect to eval server: Connection refused␤»

[19:54] <camelia> ..rakudo-moar 069b78: OUTPUT«False␤»

[19:55] *** telex joined
[19:56] <TimToady> m: say 4 ∈ ∅

[19:56] <camelia> rakudo-moar 069b78: OUTPUT«False␤»

[19:56] <TimToady> shorter way to write that :)

[19:57] *** setty2 left
[19:57] *** setty2 joined
[20:00] *** ufobat joined
[20:01] <japhb> lizmat: Speaking of ZoffixW's comment about "ways you can optimize", is there a doc somewhere that lists all the things you've been doing to the setting for performance work?  Something like a superset of the commit comment from https://github.com/rakudo/rakudo/commit/67d3b69 ....

[20:08] <lizmat> japhb: no, there is not, afaik

[20:09] <lizmat> but a lot of these are nqp/settings specific

[20:09] <lizmat> and many are pretty general, like not setting a flag inside a loop, if you can set it after the loop has finished

[20:10] <dogbert17> o/ #perl6

[20:12] <dogbert17> for doc purposes, what is the method Exception.resumable used for?

[20:14] <dogbert17> the code is short: nqp::p6bool(nqp::istrue(nqp::atkey($!ex, 'resume')));

[20:15] <lizmat> looks like it's a flag on the exception indicating it's resumable ?

[20:15] <johnjohn101> i guess i can now load rakudo on win64 now?

[20:15] *** gnull left
[20:16] <dogbert17> lizmat: that would imply that not exceptions are resumable?

[20:16] <dogbert17> s/not/not all/

[20:16] <lizmat> I guess so, but I'm only assuming myself here...  perhaps timotimo or jnthn have a better idea

[20:17] *** rindolf left
[20:17] <dogbert17> lizmat: thanks, I wonder where they are :)

[20:17] *** jjido left
[20:17] *** dolmen joined
[20:18] <dogbert17> the docs say: " Any exception handled by the user can be resumed ..."  http://doc.perl6.org/language/exceptions#Resuming_of_Exceptions

[20:18] <timotimo> oh?

[20:18] <timotimo> i thought only warnings can be resumed. or perhaps control exceptions?

[20:19] <dogbert17> timotimo: I have noticed that the docs are wrong occasionally :)

[20:21] <RabidGravy> m: CATCH { default { $_.resume } }; die "foo"; say "alive"

[20:21] <camelia> rakudo-moar 069b78: OUTPUT«alive␤»

[20:21] <dogbert17> it's alive

[20:22] *** jjido joined
[20:22] *** nadim joined
[20:23] <timotimo> oh

[20:23] <timotimo> well, ok then :)

[20:23] *** _mg_ left
[20:24] <dogbert17> m: CATCH { default { $_.resume if $_.resumable } }; die "foo"; say "alive"

[20:24] <camelia> rakudo-moar 069b78: OUTPUT«This representation (VMException) does not support associative access (for type BOOTException)␤  in block  at /tmp/L0ZqgLtVYP line 1␤  in block <unit> at /tmp/L0ZqgLtVYP line 1␤␤»

[20:24] <timotimo> whoops :)

[20:24] <dogbert17> WAT

[20:27] *** _nadim left
[20:27] <dogbert17> maybe I should hold on documenting this :)

[20:29] <dogbert17> if everything that can be caught is resumable then why do we have this method I wonder

[20:30] *** TEttinger joined
[20:30] <psch> hm, do we need a new nqp op for VMException.resumable..?

[20:30] <psch> 'cause (at least on nqp-j) that's just a field in the VMExceptionInstance

[20:31] <psch> oh, or is VMException visible in src/core/Exception.pm and we can just getattr..?

[20:43] *** ufobat left
[20:43] *** jjido left
[20:44] * [Coke] wanders onto IRC a little late today.

[20:44] <timotimo> dogbert17: try resuming an "invalid argument" exception :)

[20:44] <timotimo> m: sub foo(Int $bar) { say "alive" }; CATCH { default { .resume } }; foo("hello"); say "yo";

[20:44] <camelia> rakudo-moar 069b78: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Sga19G_osm␤Calling foo(Str) will never work with declared signature (Int $bar)␤at /tmp/Sga19G_osm:1␤------> 3live" }; CATCH { default { .resume } }; 7⏏5foo("hello"); say "yo";␤»

[20:44] <timotimo> oh, haha

[20:44] <timotimo> good job, compiler

[20:45] <timotimo> m: sub foo(Int $bar) { say "alive" }; CATCH { default { .resume } }; foo(now ~ "hello"); say "yo";

[20:45] <camelia> rakudo-moar 069b78: OUTPUT«yo␤»

[20:45] <timotimo> ^- can't be resumed, at least not into the sub

[20:45] *** BrassLantern joined
[20:53] <lizmat> .tell pmurias this could be of interest ?  https://zeit.co/blog/async-and-await

[20:53] <yoleaux> lizmat: I'll pass your message to pmurias.

[20:53] *** sivoais left
[20:53] *** sivoais joined
[20:53] *** sivoais left
[20:53] *** sivoais joined
[20:55] *** wamba left
[21:00] <timotimo> how do i debug nativecall

[21:01] *** jjido joined
[21:02] <timotimo> what the ... even when the sub in question isn't native ...

[21:03] *** skids left
[21:03] <timotimo> oh, derp

[21:04] *** kaare_ left
[21:05] *** firstdayonthejob joined
[21:07] *** cpage_ left
[21:07] <AlexDaniel> hoelzro: how many of these messages were sent because timotimo was talking to himself?

[21:08] <timotimo> probably a whole many

[21:08] *** setty2 left
[21:16] *** adu left
[21:18] *** _nadim joined
[21:19] *** pecastro joined
[21:19] *** pecastro left
[21:19] *** pecastro joined
[21:21] *** nadim left
[21:24] *** frankdaza joined
[21:25] *** aries_liuxueyang left
[21:26] *** aries_liuxueyang joined
[21:29] <frankdaza> Hi everyone. ¿Is there a web framework 100% compatible for Perl 6 ?

[21:33] <RabidGravy> there are web frameworks, not sure what "100% compatible" means

[21:34] *** mr-foobar joined
[21:34] <RabidGravy> Bailador, Crust, possibly others

[21:35] *** khw joined
[21:36] *** frankdaza left
[21:38] *** user9 joined
[21:38] *** jjido left
[21:38] *** yqt left
[21:39] *** nadim joined
[21:41] *** _nadim left
[21:41] *** adu joined
[21:42] *** user9 left
[21:44] *** _nadim joined
[21:46] *** nadim left
[21:50] <dogbert17> There's a tap example at http://doc.perl6.org/type/Tap which does not work. Does the Supply have to come from a Supplier instead of created by Supply.new?

[21:52] *** cpage_ joined
[21:53] <gfldex> m: my $s   = Supplier.new; my $tap = $s.Supply.tap( -> $v { say "the value is $v" }, done    => { say "Supply is done" }, closing => { say "Tap closed" }, quit    => -> $ex { say "Supply finished with error $ex" }, ); $tap.close;

[21:53] <camelia> rakudo-moar d080d3: ( no output )

[21:53] *** yqt joined
[21:54] *** wamba joined
[21:57] *** user9 joined
[21:57] *** dolmen left
[22:00] <dogbert17> gfldex: many thanks, do you want to change the docs or should I?

[22:01] <gfldex> dogbert17: take it pls

[22:01] *** Sgeo joined
[22:01] <RabidGravy> dogbert17, yes, or could be created by supply { } or from-list or something

[22:01] <dogbert17> gfldex: consider it done

[22:02] <dogbert17> RabidGravy: thx to you as well

[22:02] *** _nadim left
[22:03] *** _nadim joined
[22:03] *** user9 left
[22:04] *** johnjohn101 left
[22:04] *** _nadim left
[22:04] *** _nadim joined
[22:06] *** matiaslina joined
[22:09] *** nadim joined
[22:12] *** _nadim left
[22:12] <dalek> doc: 574fb4d | (Jan-Olof Hendig)++ | doc/Type/Tap.pod:

[22:12] <dalek> doc: Fixed broken code example. gfldex++ for the code

[22:12] <dalek> doc: review: https://github.com/perl6/doc/commit/574fb4dc6e

[22:12] *** wamba left
[22:15] *** RabidGravy left
[22:17] *** nadim left
[22:22] *** AlexDaniel left
[22:31] *** stevieb9 joined
[22:41] *** BrassLantern left
[22:52] *** adu left
[22:59] *** avar left
[23:00] *** avar joined
[23:00] *** firstdayonthejob left
[23:03] *** kid51 joined
[23:10] *** maybekoo2 left
[23:13] *** spider-mario left
[23:23] *** adu joined
[23:38] *** jjido joined
[23:42] *** girafe left
[23:43] *** skids joined
[23:43] *** tardisx joined
[23:43] *** jjido left
[23:44] *** user9 joined
[23:49] *** mr-foobar left
[23:49] *** mr-foobar joined
[23:50] *** cdg left
[23:54] *** pierre_ joined
