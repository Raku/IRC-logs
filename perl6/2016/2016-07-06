[00:00] <wamba> m:  say sort :{1 => 2, 2=> 3, 12=>1, "a" => 2}

[00:00] <camelia> rakudo-moar 41b685: OUTPUT«(1 => 2 2 => 3 12 => 1 a => 2)␤»

[00:00] <wamba> m: say sort :{1 => 2, 2=> 3, 12=>1, "12a" => 2}

[00:00] <camelia> rakudo-moar 41b685: OUTPUT«(1 => 2 12 => 1 12a => 2 2 => 3)␤»

[00:01] <TimToady> nobody has ever claimed cmp is sane :)

[00:01] <wamba> :)

[00:01] <TimToady> in fact, it's arguably impossible to fulfill everyone's expectations of what cmp should do

[00:02] <sammers> is there a way to get a module's version from inside the module?

[00:04] <sammers> m: module Foo:ver<0.1.0> { sub f is export { say "what is my version?" } }; import Foo; f

[00:04] <camelia> rakudo-moar 41b685: OUTPUT«what is my version?␤»

[00:04] *** adu joined
[00:04] <ugexe> m: say (1 => 2, 12=> 3, 2=>1).Hash.sort(*.key.Int)

[00:04] <camelia> rakudo-moar 41b685: OUTPUT«(1 => 2 2 => 1 12 => 3)␤»

[00:08] <Xliff> m: Class A { multi method new(Int $x) { say 1; }; multi method new(Rat $y) { nextwith($y.Int) }; } A.new(1); A.new(5/2);

[00:08] <camelia> rakudo-moar 41b685: OUTPUT«5===SORRY!5===␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3thod new(Rat $y) { nextwith($y.Int) }; }7⏏5 A.new(1); A.new(5/2);␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤…»

[00:08] <Xliff> m: Class A { multi method new(Int $x) { say 1; }; multi method new(Rat $y) { nextwith($y.Int) }; }; A.new(1); A.new(5/2);

[00:08] <camelia> rakudo-moar 41b685: OUTPUT«5===SORRY!5===␤Undeclared names:␤    A used at line 1␤    Class used at line 1␤␤Other potential difficulties:␤    Useless declaration of a has-scoped multi-method in mainline (did you mean 'my method new'?)␤    at <tmp>:1␤    ------> 3…»

[00:09] <ugexe> order matters

[00:09] <ugexe> whats next

[00:10] <Xliff> m: class A { multi method new(Rat $y) { nextwith($y.Int) }; multi method new(Int $x) { say 1; }; }; A.new(1); A.new(5/2);

[00:10] <camelia> rakudo-moar 41b685: OUTPUT«1␤Default constructor for 'A' only takes named arguments␤  in any call_with_args at gen/moar/m-Metamodel.nqp line 3853␤  in method new at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:10] <Xliff> There we go

[00:11] <Xliff> m: class A { multi method new(Int $x) { say 1; }; multi method new(Rat $y) { nextwith($y.Int) }; }; A.new(1); A.new(5/2);

[00:11] <camelia> rakudo-moar 41b685: OUTPUT«1␤Default constructor for 'A' only takes named arguments␤  in any call_with_args at gen/moar/m-Metamodel.nqp line 3853␤  in method new at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:12] <Xliff> m: class A { multi method new(Int $x) { say 1; }; multi method new(Rat $y) { A.new($y.Int) }; }; A.new(1); A.new(5/2);

[00:12] <camelia> rakudo-moar 41b685: OUTPUT«1␤1␤»

[00:12] <Xliff> Eenteresting.

[00:14] *** Actualeyes joined
[00:15] <ugexe> again, what do you think `nextwith` can go to next when its the last multi in a chain?

[00:16] <ugexe> m: class A { multi method new(Int $x) { say 1; }; multi method new(Rat $y) { samewith($y.Int) }; }; A.new(1); A.new(5/2);

[00:16] <camelia> rakudo-moar 41b685: OUTPUT«1␤1␤»

[00:17] <ugexe> the only thing 'next' is the default constructor

[00:18] *** lizmat joined
[00:20] *** canopus left
[00:23] *** cdg joined
[00:23] <Xliff> ugexe: /o\

[00:23] <Xliff> samewith, not nextwith... 

[00:28] *** canopus joined
[00:29] *** Actualeyes left
[00:37] *** cpage_ joined
[00:42] *** TakinOver joined
[00:42] *** Actualeyes joined
[00:43] *** johndau joined
[00:43] *** kurahaupo left
[00:46] <sortiz> m: module Foo:ver<1.0> { say $?PACKAGE.^ver }; # sammers, the version

[00:46] <camelia> rakudo-moar 41b685: OUTPUT«v1.0␤»

[00:49] <sammers> thanks sortiz

[00:50] <sortiz> m:  module Foo::Bar:ver<1.0.1> { }; Foo::Bar.^ver.say; # From outside

[00:50] <camelia> rakudo-moar 41b685: OUTPUT«v1.0.1␤»

[00:50] *** zacts left
[00:51] *** TakinOver left
[00:53] *** AlexDaniel left
[00:54] *** TakinOver joined
[00:55] *** kurahaupo joined
[00:59] *** cognominal left
[00:59] *** cdg left
[01:00] *** ssotka left
[01:01] *** vendethiel joined
[01:02] *** wamba left
[01:03] <gfldex> there seam to be no spec tests for .^ver

[01:04] <gfldex> i take that back

[01:05] <gfldex> i will doc .^ver tomorrow

[01:06] <sortiz> I guess it will be the same case with ^auth

[01:07] <gfldex> indeed, noted

[01:08] *** vendethiel left
[01:09] *** zacts joined
[01:09] *** kalkin-_ joined
[01:09] *** kalkin- left
[01:18] *** xinming left
[01:19] *** z3ndrag0n left
[01:20] <jdv79> [Coke]: are you going to spw this year?

[01:20] *** xinming joined
[01:22] <MasterDuke> .seen timotimo

[01:22] <yoleaux> I saw timotimo 5 Jul 2016 20:17Z in #perl6: <timotimo> hello hankache

[01:24] *** z3ndrag0n joined
[01:25] *** yqt left
[01:30] <timotimo> i wanted to sleep, but sleep is hard to come by tonight

[01:30] <timotimo> MasterDuke: what's up?: )

[01:30] <timotimo> :)

[01:31] <MasterDuke> i made a couple edits to the parse_coverage script

[01:31] <timotimo> i saw the PR, and it got merged by liz

[01:31] <timotimo> i also updated the html files at the same position as before

[01:31] <MasterDuke> new ones. including the addition of a javascript file to sort the table by the different columns

[01:32] <timotimo> ah, lovely

[01:32] <timotimo> i wanted to have that, too

[01:33] <MasterDuke> but wasn't sure where in the MoarVM source tree to put the two .js files

[01:33] <MasterDuke> or should i inline them into the script?

[01:33] <timotimo> i wouldn't mind if it were inline, yeah

[01:33] <MasterDuke> they aren't gigantic

[01:33] <timotimo> feel free to put it in a sub at the very end

[01:34] <MasterDuke> ok, i'll do that

[01:34] <timotimo> way cool

[01:34] <timotimo> also, we may want to have a way to sort by position in the original file

[01:35] <timotimo> will you also put in the possibility to handle files that don't have these split comments at all?

[01:37] *** BenGoldberg joined
[01:37] <MasterDuke> probably won't get to it today

[01:38] <MasterDuke> i can look into it over the next couple days

[01:39] <timotimo> very cool

[01:43] <[Coke]> jdv79: highly doubtful

[01:43] *** finanalyst joined
[01:46] <jdv79> wut then?

[01:46] *** ilbot3 left
[01:46] <jdv79> oh, conf?

[01:47] *** molaf left
[01:47] *** ilbot3 joined
[01:53] <[Coke]> jdv79: yes, I'm probably not going to spw; last year I was very lucky to be sponsored to go.

[01:57] *** kid511 left
[01:57] *** kid51 joined
[01:57] *** vendethiel joined
[01:59] *** molaf joined
[02:01] *** vendethiel left
[02:03] <sammers> hi again, is there a way to use a variable here: unit module Foo:ver<$version-number>... ? 

[02:03] *** noganex joined
[02:05] <timotimo> you'll need << >> in order for it to interpolate

[02:05] <timotimo> that's just how < > works, it's literal

[02:05] <timotimo> just like ' vs "

[02:07] *** noganex_ left
[02:10] *** canopus left
[02:12] *** cpage_ left
[02:12] *** canopus joined
[02:17] <sammers> ah, thanks. 

[02:25] <sortiz> sammers, but beware that the values inside :ver() should be ready at compile time:

[02:26] <sortiz> m: my $version='42'; module Foo::Bar:ver($version) { }; Foo::Bar.^ver.say; #Fails

[02:26] <camelia> rakudo-moar 41b685: OUTPUT«Use of uninitialized value $version of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in any  at src/Perl6/Grammar.nqp line 2164␤v␤»

[02:27] <sortiz> m:  my ($mayor,$minor); BEGIN { $mayor = '1.0'; $minor = '8' }; module Foo::Bar:ver("$mayor.$minor") { }; Foo::Bar.^ver.say; # Works

[02:27] <camelia> rakudo-moar 41b685: OUTPUT«v1.0.8␤»

[02:28] <sammers> ah

[02:28] <sammers> ok

[02:30] *** ssotka joined
[02:38] <MasterDuke> .tell timotimo https://github.com/MoarVM/MoarVM/pull/381

[02:38] <yoleaux> MasterDuke: I'll pass your message to timotimo.

[02:40] <timotimo> TBH i'd prefer if the lines weren't so wide

[02:40] <yoleaux> 02:38Z <MasterDuke> timotimo: https://github.com/MoarVM/MoarVM/pull/381

[02:40] <timotimo> can you break up the javascript a little?

[02:40] <timotimo> maybe 100 or 120 chars wide?

[02:43] *** zacts left
[02:53] *** kid51 left
[02:55] *** kurahaupo left
[02:55] *** siriu5b left
[02:55] *** keix joined
[02:55] *** MasterDuke[lapto joined
[02:56] <MasterDuke[lapto> timotimo: just switched to the non-minified version of the JS

[02:56] <timotimo> yay

[02:59] *** cpage_ joined
[03:04] *** bjz left
[03:05] *** zacts joined
[03:06] *** parabolize left
[03:11] *** kaare_ joined
[03:13] *** TakinOver left
[03:21] *** addison left
[03:33] *** bjz joined
[03:37] *** bjz_ joined
[03:37] *** parabolize joined
[03:40] *** bjz left
[03:43] *** djbkd joined
[03:49] *** dwarring joined
[03:50] *** wisti left
[03:54] *** wisti joined
[03:55] <jdv79> [Coke]: cool.  i'm not going either.  just curious.  i was no sponsored.

[03:55] <jdv79> *not

[03:56] <adu> jdv79: going to what?

[03:56] <jdv79> spw

[03:57] *** MasterDuke[lapto left
[03:57] <jdv79> coke and i went last year but are not going this year.  if its even happening.

[03:57] <adu> jdv79: http://spwmainline.com/ ?

[03:57] <jdv79> Swiss Perl Workshop

[03:57] <adu> oh

[03:57] <jdv79> it was in olten last year 

[04:04] *** khw left
[04:06] *** z3ndrag0n left
[04:09] *** khw joined
[04:11] *** rgrinberg left
[04:16] *** molaf left
[04:17] *** johndau left
[04:35] *** Actualeyes left
[04:43] *** cooper left
[04:43] *** cooper joined
[04:46] *** cooper left
[04:46] *** cooper joined
[04:46] *** cooper left
[04:46] *** cooper joined
[04:47] *** Actualeyes joined
[04:50] *** Cabanossi left
[04:51] *** Cabanossi joined
[05:17] <dj_goku> I am not having much luck getting the prototype right for inet_ntop in nativecall: any ideas what I am doing wrong? https://gist.github.com/djgoku/06a14d31c3646f2309f1d16c9b018b86

[05:19] *** zacts left
[05:24] *** sortiz left
[05:32] *** zacts joined
[05:37] <Xliff> dj_goku: You might want an OpaquePointer for the second argument.

[05:38] <Xliff> This is what I see for inet_ntop: const char *inet_ntop(int af, const void *restrict src,

[05:38] <Xliff>        char *restrict dst, socklen_t size);

[05:39] <Xliff> So I'd write that as "sub inet_ntop(int32, OpaquePointer, Str, uint32) returns Str is native { * }

[05:40] <Xliff> Err... with the " at the end.

[05:41] <Xliff> Note that when you make your call from p6, your input parameters must match the types.

[05:42] <Xliff> Likewise, inet_pton needs to change to: "sub inet_pton(int32, Str, OpaquePointer is rw) returns int32 is native { * }"

[05:42] <BenGoldberg> Wouldn't a Buf would be better than a Str for the 'dst' parameter?

[05:42] <BenGoldberg> (so you can pre-allocated it)

[05:43] <Xliff> BenGoldberg, probably. I know there are instances where Buf is better than Str, but I don't know the ruling on when to choose between the two.

[05:43] <Xliff> My guess is Str is better for null termination.

[05:43] <BenGoldberg> Hmm, probably.

[05:45] <Xliff> For Buf, I would expect that a length parameter would need to be in the signature.

[05:45] <Xliff> That's just my (subjective and probably wrong) take on the subject.

[05:46] <Xliff> So take with a salt lick.

[05:47] <Xliff> (we don't do dashes here...)

[05:47] *** BenGoldberg left
[05:48] <psch> i thought we're one of few non-lispy languages that does dashes in identifiers

[05:57] *** zacts left
[05:57] <psch> maybe it's really not that rare vOv

[06:01] <Xliff> psch: :P

[06:01] <Xliff> I'm talking dashes of salt you ninny!

[06:01] <Xliff> =)

[06:02] <Xliff> So salt lick is the unit of reliability you need to apply when taking my advice. 

[06:03] <Xliff> Coz...a dash of salt falls well below the margin of error.

[06:04] *** ssotka left
[06:05] *** CIAvash joined
[06:07] *** jack_rabbit left
[06:14] *** adu left
[06:15] *** apejens joined
[06:19] *** zacts joined
[06:21] <moritz> Xliff: what about a dashboard of salt? :-)

[06:28] <psch> hrm, is there something similar to ${ENV_VAR:=DEFAULT_VALUE} on windows?

[06:29] *** dwarring left
[06:31] *** abraxxa joined
[06:36] <Xliff> moritz: That depends on the value of "board"

[06:38] <Xliff> I wonder what a "dashbored" looks like.

[06:39] <psch> compound words says that's just someone bored of dashes..?

[06:39] <psch> english doesn't really like those though i think

[06:39] *** buharin joined
[06:40] <buharin> hi :-)

[06:40] <psch> o/

[06:40] <buharin> psch: hello

[06:42] *** domidumont joined
[06:42] *** araujo left
[06:44] <nine> Xliff: s/OpaquePointer/Pointer/g

[06:44] *** araujo joined
[06:50] *** domidumont left
[06:50] *** mohae_ joined
[06:53] *** mohae left
[06:56] * Xliff is now playing: Chase & Status feat. Jenna G - In Love

[06:56] <Xliff> !!!!

[06:56] * Xliff grooves

[06:56] <Xliff> moritz: Now that's just being silly. There are no car makers who are stupid enough to be making dashboards of salt.

[06:57] * Xliff grooves some more.

[07:00] *** huggable joined
[07:02] *** djbkd left
[07:05] *** wisti left
[07:05] *** RabidGravy joined
[07:06] *** firstdayonthejob joined
[07:11] *** mohae_ left
[07:13] *** darutoko joined
[07:19] *** lnrdo left
[07:19] *** roguelazer left
[07:21] *** lnrdo joined
[07:21] *** roguelazer joined
[07:26] *** ChoHag left
[07:34] *** zakharyas joined
[07:42] *** roguelazer left
[07:42] *** aindilis left
[07:43] *** lnrdo left
[07:43] *** roguelazer joined
[07:44] *** lnrdo joined
[07:44] *** dakkar joined
[07:44] *** ChoHag joined
[07:48] *** aindilis joined
[07:51] <Woodi> hi #perl6 :)

[07:53] <DrForr> Morning.

[07:54] <RabidGravy> erp

[07:54] <DrForr> Agreed.

[07:55] *** wamba joined
[08:00] <Woodi> so, in 1986.02 I got some computer magazine and learned general concept of programming by reading how to make ASCII guy animation in BASIC... of course I didn't have computer back then so it was just pure "learning by reading"... but here is prototype of that animation (original was more like letter passwd by *NIX banner utility)  http://pastebin.com/26TFhK7u  have a fun ;)

[08:00] * Woodi runs for coffee....

[08:01] *** perl6_nb joined
[08:01] <TEttinger> re salt, Xliff, this is trendy right now http://tipsforbbq.com/Definition/Himalayan-Salt-Blocks

[08:01] *** jonas1 joined
[08:02] <TEttinger> you could totally make a dashboard that is heated by the engine and allows you to cook on a big salt block dashboard

[08:03] <DrForr> Does it count as distracted driving if you're grilling a steak in the passenger's seat though?

[08:05] <moritz> we don't give legal advise on #perl6! :-)

[08:05] *** perl6_nb left
[08:11] <RabidGravy> There have been times when we could cook thinks in the glove box of our car without modification

[08:14] <DrForr> Same here, I used to live in LA :)

[08:20] *** zakharyas left
[08:22] <RabidGravy> DrForr,  in the tests for Prancer at line 28 in t/050-routes.t there are two '.' rather '~' for string concatenation

[08:24] <RabidGravy> https://github.com/drforr/perl6-App-prancer/pull/1 there - with that the tests pass

[08:25] <DrForr> Aaah, thanks.

[08:25] <DrForr> Pulling that in so I can get actual "work" work done :)

[08:25] <RabidGravy> :)

[08:26] <DrForr> I still find myself making that mistake...

[08:46] *** wamba left
[08:47] *** wamba joined
[08:58] *** jkramer left
[09:12] *** go|dfish left
[09:13] *** TEttinger left
[09:16] *** finanalyst left
[09:21] *** sftf joined
[09:42] *** brrt joined
[09:44] *** iH2O joined
[09:50] *** brrt left
[09:52] *** labster left
[09:58] *** skids joined
[09:59] *** zakharyas joined
[10:04] <jnthn> ugexe: Did you RT it? (Please do so if not. Telling me stuff on IRC is not so reliable. :))

[10:04] <yoleaux> 5 Jul 2016 10:51Z <Zoffix> jnthn: is this Rosetta code outdated? It does a start {} on a connected socket and bleed Rakudo breaks the promise with "Tried to read() on a socket from outside its originating thread". I think this may be due to the async fixes we lately had. https://rosettacode.org/wiki/Echo_server#Perl_6

[10:06] *** avenj left
[10:10] *** iH2O left
[10:16] *** zacts left
[10:16] *** rindolf joined
[10:27] *** andreoss joined
[10:33] *** zacts joined
[10:40] *** iH2O joined
[10:51] *** skids left
[10:55] *** AlexDaniel joined
[10:58] *** cognominal joined
[11:00] *** huggable left
[11:00] *** huggable joined
[11:04] *** silug left
[11:04] <wamba> m: say ((12, 2, "12a"), {@^x.sort} ... * ).head(5)

[11:04] <camelia> rakudo-moar 41b685: OUTPUT«((12 2 12a) (12a 2 12) (12 12a 2) (2 12 12a) (12a 2 12))␤»

[11:04] <wamba> :)

[11:04] <iH2O> wow

[11:05] <moritz> m: ((12, 2, "12a"), *.sort ... *).head(5)

[11:05] <camelia> rakudo-moar 41b685: OUTPUT«===SORRY!===␤Cannot find method 'take': no method cache and no .^find_method␤»

[11:05] <jnthn> o.O

[11:05] <jnthn> Oh, think that's already RT'd though...

[11:06] <psch> m: ((12, 2, "12a"), **.sort ... *).head(5)

[11:06] <camelia> rakudo-moar 41b685: OUTPUT«===SORRY!===␤This Seq has already been iterated, and its values consumed␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤»

[11:06] <moritz> m: ((12, 2, "12a"), &sort ... *).head(5)

[11:06] <camelia> rakudo-moar 41b685: ( no output )

[11:06] <moritz> m: say ((12, 2, "12a"), &sort ... *).head(5)

[11:06] <gregf_> m: (1..10).head(2).say

[11:06] <camelia> rakudo-moar 41b685: OUTPUT«((12 2 12a) (12a 2 12) (12a (12a 2 12) 2 12) (12a (12a (12a 2 12) 2 12) (12a 2 12) 2 12) (12a (12a (12a (12a 2 12) 2 12) (12a 2 12) 2 12) (12a (12a 2 12) 2 12) (12a 2 12) 2 12))␤»

[11:06] <camelia> rakudo-moar 41b685: OUTPUT«(1 2)␤»

[11:06] *** skids joined
[11:06] *** avenj joined
[11:09] <wamba> jnth, probably it is ok, since 12a lt 2 < 12 lt 12a 

[11:16] <gregf_> is that @^x a special variable like $^a and $^b?

[11:16] <gregf_> m: say (1, {$^a * (^10).pick}...*).head(5)

[11:16] <camelia> rakudo-moar 41b685: OUTPUT«(1 8 56 168 1512)␤»

[11:18] <gregf_> m: sub foo(@arr,$bl){ @arr.map($bl); };say foo([1..10],->$x { $x * 2 },);

[11:18] <camelia> rakudo-moar 41b685: OUTPUT«(2 4 6 8 10 12 14 16 18 20)␤»

[11:18] <gregf_> m: sub foo($bl){ @^x.map($bl); };say foo([1..10],->$x { $x * 2 },);# should this work?

[11:18] <camelia> rakudo-moar 41b685: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Placeholder variable '@^x' cannot override existing signature␤at <tmp>:1␤------> 3sub7⏏5 foo($bl){ @^x.map($bl); };say foo([1..1␤»

[11:18] *** freezerburnv joined
[11:19] *** silug joined
[11:21] *** pat_js joined
[11:22] <wamba> m: my &foo = { @^a.map(&^b); };say foo([1..10],->$x { $x * 2 },)

[11:22] <camelia> rakudo-moar 41b685: OUTPUT«(2 4 6 8 10 12 14 16 18 20)␤»

[11:23] <wamba> m: sub foo (@a,&b)  { @a.map(&b); };say foo([1..10],->$x { $x * 2 },)

[11:23] <camelia> rakudo-moar 41b685: OUTPUT«(2 4 6 8 10 12 14 16 18 20)␤»

[11:25] <wamba> m: sub foo  { @^a.map(&^b); };say foo([1..10],->$x { $x * 2 },)

[11:25] <camelia> rakudo-moar 41b685: OUTPUT«(2 4 6 8 10 12 14 16 18 20)␤»

[11:25] *** yqt joined
[11:26] *** iH2O left
[11:27] <wamba> gregf_, i think you must use signatures, or placeholders, no both

[11:28] <gregf_> hmm

[11:28] <gregf_> so that last one?

[11:30] <gregf_> m: sub foo { @^a.map(&^b); };say foo([1..10],->$x { $x * 2 },)

[11:30] <camelia> rakudo-moar 41b685: OUTPUT«(2 4 6 8 10 12 14 16 18 20)␤»

[11:30] <gregf_> anyways, something new learnt. wamba++

[11:32] *** brrt joined
[11:32] *** freezerburnv left
[11:34] *** freezerburnv joined
[11:35] *** grondilu joined
[12:00] *** freezerburnv left
[12:00] *** rgrinberg joined
[12:02] *** kid51 joined
[12:02] *** vendethiel joined
[12:10] *** dogbert17 left
[12:22] *** canopus left
[12:26] *** vendethiel left
[12:26] *** brrt left
[12:30] *** rgrinberg left
[12:31] *** canopus joined
[12:57] *** wisti joined
[13:01] <BrokenRobot> WOMBLES!!

[13:01] * BrokenRobot coughs

[13:01] <BrokenRobot> Sorry... the silence was deafening.

[13:02] * lizmat puts on some Nirvana

[13:02] *** grondilu left
[13:02] *** grondilu joined
[13:02] <lizmat> .oO( https://en.wikipedia.org/wiki/Nirvana_(British_band) :-)

[13:04] * moritz puts on some Zaz, https://www.youtube.com/watch?v=WQnktOct1Bo

[13:04] <BrokenRobot> TIL there's more than one Nirvana band

[13:05] *** wamba left
[13:06] *** brrt joined
[13:07] <perlpilot> BrokenRobot: me too

[13:07] *** Sgeo__ left
[13:11] * nine puts on some John Cage, https://www.youtube.com/watch?v=JTEFKFiXSx4

[13:11] *** rgrinberg joined
[13:13] *** pmurias joined
[13:13] <pmurias> what's the recommended way to parse json from NQP?

[13:14] *** sufrostico joined
[13:17] <moritz> pmurias: examples/json.nqp has an example parse

[13:20] <pmurias> it's bitrotten but it could be reused

[13:20] <pmurias> .oO( would it make sense to have a nqp:: op to parse json fast? )

[13:21] <moritz> well, if the result HLL-maps back into a HLL, possibly

[13:25] <ugexe> jnthn: yes I rt'd it https://rt.perl.org/Ticket/Display.html?id=128553

[13:26] <ugexe> fwiw its calculating the right stuff, the return value is just getting stepped on

[13:28] <nine> pmurias: what do you need it for?

[13:28] *** kurahaupo joined
[13:29] <pmurias> nine: I don't really *need* it, as I can just parse the json with NQP code

[13:29] *** acrussell joined
[13:29] <DrForr> http://conferences.oreilly.com/oscon/open-source-eu/public/schedule/detail/53512 just went live.

[13:29] <pmurias> nine: just thought it might make sense to have such an op as parsing json seemed to be a bottle neck for example panda in the past

[13:29] <nine> pmurias: I'm more wondering what you need to parse anyway :)

[13:30] <pmurias> nine: I want to pass data back from my hoopl using haskell based QAST optimizer

[13:30] <BrokenRobot> Seems my Mojo+Perl 6 article got another stick in the spokes... I can consistently make my app crash :/ "Internal error: unhandled dyncall argument type"

[13:30] <BrokenRobot> And there's  a whole bunch of output

[13:31] <BrokenRobot> s/consistently/regularly; about 50% of the time/;

[13:31] <BrokenRobot> "Segmentation fault" now... \o/

[13:32] <nine> BrokenRobot: I hope you can golf that?

[13:33] *** andreoss left
[13:33] <BrokenRobot> "Unsupported type NativeCall::Types::Pointer<-1272678512> in p5_to_p6"

[13:35] <BrokenRobot> It's just 20 lines as it is, but seems I'm getting hammered by two different bugs. One that barfs up a ton of output ( https://gist.github.com/zoffixznet/ef8aadf7b81becb9497ffbd2f284d177 ) and another that just dies with "Segfault" message

[13:35] <BrokenRobot> "Segmentation fault" I mean

[13:36] *** ptolemarch joined
[13:37] <BrokenRobot> And this is the code: https://github.com/zoffixznet/mu/tree/master/mojo-websocket  (started with perl6 websocket.p6 daemon)

[13:37] * BrokenRobot files RT

[13:38] *** Skarsnik joined
[13:38] <BrokenRobot> .seen Skarsnik 

[13:38] <yoleaux> I saw Skarsnik 16 Apr 2016 17:14Z in #perl6: <Skarsnik> Hello

[13:38] <Skarsnik> Hello there x)

[13:38] <yoleaux> 13 May 2016 09:28Z <timotimo> Skarsnik: at some point gptrixie could totally extract doxygen stuff like \param and the general description and then put the corresponding pod comments into the generated code :3

[13:38] <BrokenRobot> Hey :)

[13:39] <BrokenRobot> Long time. I was starting to think you were dead :)

[13:39] <Skarsnik> Busy with other things

[13:42] <timotimo> o/

[13:42] <timotimo> yeah, long time no see :)

[13:42] * timotimo also wonders about mouq

[13:43] *** abraxxa1 joined
[13:43] *** abraxxa left
[13:48] <Skarsnik> It's me or there is not that much new thing, like the modules list did not seem to have grown much, or does it get moved to a cpan thingy finally?

[13:48] <nine> It's not just you

[13:48] <nine> Module list growth has slowed down

[13:48] <BrokenRobot> Skarsnik: no it haven't moved. There's been a HUGE improvement with Rakudo's speed.

[13:48] <BrokenRobot> So that's new. 

[13:49] <timotimo> oh yes

[13:49] <Skarsnik> Ah nice

[13:49] * psch blames brexit for lower module growth

[13:49] <psch> RabidGravy++ is in distress

[13:50] <RabidGravy> I'm at an all time record for the number of in-progress modules

[13:50] <Skarsnik> I was checking if someone wrote a websocket client async module, but it seem not :(

[13:51] <timotimo> we only have the synchronous one?

[13:51] <RabidGravy> as part of the Websocket module, it does work quite well

[13:52] <RabidGravy> it could be made asynchronous or used in asynchronous manner

[13:54] <timotimo> ohai gravy

[13:55] *** iH2O joined
[13:58] <RabidGravy> harr!

[13:58] <Skarsnik> RabidGravy, do you have an example of using it async? I'd like to have a Discord module that use the websocket api x)

[14:01] *** zakharyas left
[14:03] <iH2O> grrr!

[14:04] <timotimo> good day to you, too, iH2O 

[14:04] <iH2O> B-)

[14:06] <RabidGravy> nope, but it's basically start { }  a client with a Promise that is kept with the handler in the on-ready and a supply to send text

[14:07] <RabidGravy> or some variant thereof

[14:15] *** harmil left
[14:15] <jnthn> ugexe: Thanks, will hopefully find time for that tomorrow. :-)

[14:22] <pmurias> why doesn't: http://paste.debian.net/777599 work on nqp?

[14:25] <pmurias> jnthn: $!do on an NQPRoutine is mostly immutable?

[14:28] *** CIAvash left
[14:30] <AlexDaniel> MasterDuke: if I got it right, mst++ and others fixed the mail related problem, so it seems like you should send an email again

[14:33] *** itaipu joined
[14:34] *** tbrowder joined
[14:34] *** cdg joined
[14:37] *** molaf joined
[14:39] *** MilkmanDan left
[14:42] <tbrowder> ShimmerFairy: I've replied to yr comment ref spec PR 112 and modified that PR

[14:46] *** wamba joined
[14:46] *** gcole joined
[14:47] *** MilkmanDan joined
[14:49] *** yqt left
[14:55] <dalek> doc: fcec7dc | (Zoffix Znet)++ | doc/Programs/00-running.pod6:

[14:55] <dalek> doc: List RAKUDO_PRECOMP_NESTED_JDB and RAKUDO_JDB_PORT

[14:55] <dalek> doc: 

[14:55] <dalek> doc: Per https://github.com/rakudo/rakudo/commit/0295443849

[14:55] <dalek> doc: review: https://github.com/perl6/doc/commit/fcec7dc2d1

[14:55] *** rindolf left
[14:59] *** z3ndrag0n joined
[15:00] *** huggable left
[15:00] *** huggable joined
[15:00] *** rindolf joined
[15:01] <arnsholt> Smalltalk first impressions: Kind of unfamiliar, but definitely looks promising!

[15:01] <BrokenRobot> nqp: grammar Foo { token TOP { foo \s+ (\d+) {say($/[0])} } }; say(Foo.parse("foo 123").made);

[15:01] <camelia> nqp-moarvm: OUTPUT«123␤␤»

[15:02] <BrokenRobot> Seems make inside a token in nqp just doesn't work as it does in P6

[15:02] <TimToady> BrokenRobot: I believe you have to write an action class in nqp

[15:02] *** mohae joined
[15:03] <BrokenRobot> pmurias: ^

[15:06] <dalek> doc: 4be0d1d | (Wenzel P. P. Peppmeyer)++ | html/js/main.js:

[15:06] <dalek> doc: adding #__debug__ to any url will

[15:06] <dalek> doc:   - make invisible <a/> tags visible in magenta

[15:06] <dalek> doc:   - warn on the javascript console for duplicated id and name attrs

[15:06] <dalek> doc: 

[15:06] <dalek> doc: As soon as Pod::To::HTML is updated on docs.perl6.org we can start

[15:06] <dalek> doc: hunting for duplicated X<> tags and get the search function to actually

[15:06] <dalek> doc: link to X<> generated anchors.

[15:06] <dalek> doc: review: https://github.com/perl6/doc/commit/4be0d1d060

[15:06] <dalek> doc: 2b4d47b | (Wenzel P. P. Peppmeyer)++ | doc/Programs/00-running.pod6:

[15:06] <dalek> doc: Merge branch 'master' of https://github.com/perl6/doc

[15:06] <dalek> doc: review: https://github.com/perl6/doc/commit/2b4d47b996

[15:06] *** a3r0_ left
[15:06] *** a3r0 joined
[15:07] *** wamba left
[15:12] *** Khisanth left
[15:12] *** iH2O left
[15:15] *** z3ndrag0n left
[15:16] *** xinming_ joined
[15:16] <[Coke]> (regarding issues with rt) Worth keeping in mind that the perl.org RT instance is volunteer run. (useful to remember when reporting issues to them, and also something to consider when considering switching ticketing systems)

[15:17] <timotimo> yes, very

[15:17] <[Coke]> (e.g. we're likely to not get a response as quickly, but are more likely to get a personalized response when we do.)

[15:19] *** xinming left
[15:20] <dalek> doc: c99316f | (Wenzel P. P. Peppmeyer)++ | doc/Language/packages.pod6:

[15:20] <dalek> doc: doc .^ver

[15:20] <dalek> doc: review: https://github.com/perl6/doc/commit/c99316f445

[15:20] <gfldex> if that build fails it will be my fault for once :)

[15:20] * gfldex shakes fist at travis

[15:25] *** ssotka joined
[15:26] *** skids left
[15:27] *** Khisanth joined
[15:28] *** z3ndrag0n joined
[15:28] *** z3ndrag0n left
[15:28] *** z3ndrag0n joined
[15:33] <hoelzro> I just searched around trying to remember which programming langauge implements power loops (I can never remember), and google led me to a Perl 6 language discussion =)

[15:34] <masak> power loops?

[15:34] <yoleaux> 4 Jul 2016 11:07Z <moritz> masak: I've created a shell account for you on irc.p6c.org, which should be more stable for IRC session than hack. Password is the same as on hack. Enjoy!

[15:34] <masak> moritz++ \o/

[15:35] <hoelzro> yeah, they're this obscure language feature that never took off that allows you to write loops that have recursion-like properties

[15:35] <BrokenRobot> gfldex++

[15:36] *** pdcawley left
[15:37] *** travis-ci joined
[15:37] <travis-ci> Doc build failed. Wenzel P. P. Peppmeyer 'doc .^ver'

[15:37] <travis-ci> https://travis-ci.org/perl6/doc/builds/142791449 https://github.com/perl6/doc/compare/2b4d47b996ab...c99316f44586

[15:37] *** travis-ci left
[15:37] * BrokenRobot chuckles

[15:38] <BrokenRobot> # Failed test 'no trailing whitespace in html/js/main.js'

[15:38] <BrokenRobot> # at t/trailing_whitespace.t line 19

[15:38] <dalek> doc: 2aa78ff | (Wenzel P. P. Peppmeyer)++ | CONTRIBUTING.md:

[15:38] <dalek> doc: tell contributors about #__debug__

[15:38] <dalek> doc: review: https://github.com/perl6/doc/commit/2aa78ff57b

[15:39] * gfldex shaked both fists at travis

[15:40] <gfldex> BrokenRobot: what does that test actually test for?

[15:40] <dalek> doc: 19d5fbc | (Zoffix Znet)++ | CONTRIBUTING.md:

[15:40] <dalek> doc: Fix typo

[15:40] <dalek> doc: review: https://github.com/perl6/doc/commit/19d5fbc311

[15:40] <BrokenRobot> gfldex: trailing whitespace. i.e /\s+$/

[15:41] <gfldex> i can't see any

[15:41] <BrokenRobot> Try running perl -pi -e 's/\s+$/\n/m' html/js/main.js

[15:41] *** domidumont joined
[15:42] <gfldex> no result

[15:43] *** pdcawley joined
[15:43] <gfldex> i'm looking into teaching search.js to have proper links for X<> anchors now

[15:43] <dalek> doc: 2439855 | (Zoffix Znet)++ | html/js/main.js:

[15:43] <dalek> doc: Remove trailing whitespace

[15:43] <dalek> doc: review: https://github.com/perl6/doc/commit/2439855c33

[15:43] <BrokenRobot> gfldex: there's no output, but it does change the file. If you run git diff you can see it changed stuff

[15:45] *** canopus left
[15:46] <BrokenRobot> huggable: strip trailing whitespace :is: Run perl -pi -e 's/\s+$/\n/m' THE_FILE to strip trailing whitespace from THE_FILE

[15:46] <huggable> BrokenRobot, Added strip trailing whitespace as Run perl -pi -e 's/\s+$/\n/m' THE_FILE to strip trailing whitespace from THE_FILE

[15:52] *** KillBill joined
[15:52] *** travis-ci joined
[15:52] <travis-ci> Doc build failed. Wenzel P. P. Peppmeyer 'tell contributors about #__debug__'

[15:52] <travis-ci> https://travis-ci.org/perl6/doc/builds/142795914 https://github.com/perl6/doc/compare/c99316f44586...2aa78ff57b9b

[15:52] *** travis-ci left
[15:52] *** canopus joined
[15:53] *** Util left
[15:53] *** dalek left
[15:53] <KillBill> m: my \i = 2;  say 22ⁱ;  # ;-)

[15:53] <camelia> rakudo-moar d505a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3my \i = 2;  say 227⏏5ⁱ;  # ;-)␤»

[15:54] <BrokenRobot> m: say 22ⁱ;

[15:54] <camelia> rakudo-moar d505a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3say 227⏏5ⁱ;␤»

[15:54] <BrokenRobot> Same thing...

[15:55] *** abraxxa1 left
[15:55] <BrokenRobot> m: sub infix:<⁢> ($, $) { 'i' }; say 2⁢2

[15:55] <camelia> rakudo-moar d505a8: OUTPUT«i␤»

[15:55] <BrokenRobot> ;)

[15:56] *** travis-ci joined
[15:56] <travis-ci> Doc build failed. Zoffix Znet 'Fix typo'

[15:56] <travis-ci> https://travis-ci.org/perl6/doc/builds/142796497 https://github.com/perl6/doc/compare/2aa78ff57b9b...19d5fbc311de

[15:56] *** travis-ci left
[15:56] *** japhb left
[15:57] <BrokenRobot> m: sub postfix:<ⁱ> { $^ⁱ**2 }; say 22ⁱ

[15:57] <camelia> rakudo-moar d505a8: OUTPUT«484␤»

[15:59] <BrokenRobot> m: sub postfix:<ⁱ> { $^ⁱ² }; say 22ⁱ

[15:59] <camelia> rakudo-moar d505a8: OUTPUT«484␤»

[15:59] <BrokenRobot> tehe

[16:01] <[Coke]> that seems misleading. :P

[16:02] <[Coke]> m: for Nil -> $a { say 1 }; say "alive"

[16:02] <camelia> rakudo-moar d505a8: OUTPUT«1␤alive␤»

[16:02] <[Coke]> m: for Slip -> $a { say 1 }; say "alive"

[16:02] <camelia> rakudo-moar d505a8: OUTPUT«Invocant requires an instance of type Slip, but a type object was passed.  Did you forget a .new?␤  in block <unit> at <tmp> line 1␤␤»

[16:03] <BrokenRobot> m: for Int -> $a { say 1 }; say "alive"

[16:03] <camelia> rakudo-moar d505a8: OUTPUT«1␤alive␤»

[16:03] *** travis-ci joined
[16:03] <travis-ci> Doc build passed. Zoffix Znet 'Remove trailing whitespace'

[16:03] <travis-ci> https://travis-ci.org/perl6/doc/builds/142797450 https://github.com/perl6/doc/compare/19d5fbc311de...2439855c3370

[16:03] *** travis-ci left
[16:05] *** domidumont left
[16:06] *** pmurias left
[16:12] *** cdg left
[16:15] *** KillBill left
[16:16] *** domidumont joined
[16:18] *** vibha left
[16:23] *** domidumont left
[16:27] <gfldex> m: sub foo(:$p){ $p }; sub bar(:$p){ foo(:$p ~ '#') }; my @a = start { say bar(p=>'oi') }; await @a;

[16:27] <camelia> rakudo-moar d505a8: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[16:28] <gfldex> m: sub foo(:$p){ $p }; sub bar(:$p){ foo(:$p) }; my @a = start { say bar(p=>'oi') }; await @a;

[16:28] <camelia> rakudo-moar d505a8: OUTPUT«oi␤»

[16:28] <gfldex> why does it do that?

[16:29] <gfldex> the error triggers on await(@a)

[16:29] <gfldex> and bar has to be executed

[16:29] <BrokenRobot> What's :$p ~ '#' ?

[16:30] <BrokenRobot> To me, that looks to be stringified into one thing which is then passed as positional

[16:30] <BrokenRobot> m: class A { has $!b is readonly = "foo" };

[16:30] <camelia> rakudo-moar d505a8: OUTPUT«Potential difficulties:␤    useless use of 'is readonly' on $!b␤    at <tmp>:1␤    ------> 3class A { has $!b is readonly7⏏5 = "foo" };␤»

[16:30] <gfldex> i would call it The Culprit

[16:30] <BrokenRobot> Why is it telling me that's useless use?

[16:31] <gfldex> because private variables are inlined and as such there is no container that could do the rw check

[16:32] <BrokenRobot> Inlined how? :/

[16:33] <timotimo> gfldex: you expect :$p ~ '#' to still be a named argument?

[16:33] <timotimo> ah, BrokenRobot already said that

[16:35] <psch>     warn "useless use of 'is readonly' on $attr.name()" unless $attr.has_accessor; # from src/core/trait.pm

[16:35] <gfldex> no, it's a string concat on a Pair object. However the error message points at await(@a)

[16:35] <psch> so, it's not about inlining or containers

[16:35] <psch> it's purely about accessors

[16:35] <psch> because, similar to 'is rw', readonly-ness of an Attribute talk about *outside* of the class

[16:36] <psch> m: class A { has $!a is rw }

[16:36] <camelia> rakudo-moar d505a8: OUTPUT«Potential difficulties:␤    useless use of 'is rw' on $!a␤    at <tmp>:1␤    ------> 3class A { has $!a is rw 7⏏5}␤»

[16:36] <timotimo> gfldex: ah, it's just about exceptions being reported at the await, not at the actual throw point

[16:36] <timotimo> yeah, i think that problem's known already

[16:36] <psch> if you don't have an accessor, it's useless to tell the rest of the world whether your Attribute is readonly or rw, they can't see it anyway

[16:36] <BrokenRobot> m: class A { has $!b; submethod BUILD { $!b := Proxy.new: STORE => { say "sod off" }, FETCH => { "foo" } }; method meow { $!b = 42 } }.new.meow

[16:36] <camelia> rakudo-moar d505a8: OUTPUT«Too many positionals passed; expected 0 or 1 arguments but got 2␤  in block <unit> at <tmp> line 1␤␤»

[16:37] <BrokenRobot> psch: so then am I correct to assume this test is bogus and should be removed? https://github.com/perl6/roast/blob/master/S06-traits/is-readonly.t#L24

[16:37] <BrokenRobot> psch: oh, I misread

[16:37] * BrokenRobot tries with an accessor

[16:37] <timotimo> that seems outdated, yeah

[16:38] *** dakkar left
[16:38] <BrokenRobot> m: class C { has $!attr is readonly = 71356; method get-attr() { $!attr }; method set-attr($val) { $!attr = $val } }; say C.new.get-attr; C.new.set-attr: 99

[16:38] <camelia> rakudo-moar d505a8: OUTPUT«Potential difficulties:␤    useless use of 'is readonly' on $!attr␤    at <tmp>:1␤    ------> 3class C { has $!attr is readonly7⏏5 = 71356; method get-attr() { $!attr }; ␤71356␤»

[16:39] <psch> 'accessor' refers to the autogenerated ones from the . twigil

[16:39] <psch> so yeah, the test looks wrong to me

[16:39] <BrokenRobot> Thanks.

[16:40] *** zakharyas joined
[16:41] *** kid51 left
[16:41] *** kid51 joined
[16:41] <jnthn> .tell pmurias Yes, in NQP - modulo fixups post-compile (I think) - it stays stable.

[16:41] <yoleaux> jnthn: I'll pass your message to pmurias.

[16:42] <jnthn> .tell pmurias and in the case where it isn't then the thing in $!do is marked as a stub, iirc

[16:42] <yoleaux> jnthn: I'll pass your message to pmurias.

[16:46] <BrokenRobot> m: say &1

[16:46] <camelia> rakudo-moar d505a8: OUTPUT«Nil␤»

[16:47] <BrokenRobot> m: say &1232132

[16:47] <camelia> rakudo-moar d505a8: OUTPUT«Nil␤»

[16:47] <BrokenRobot> What are these? &\d+ ?

[16:47] *** zakharyas left
[16:48] <BrokenRobot> m: "foo" ~~ /(f)(\w+)/; say &0; say &1

[16:48] <camelia> rakudo-moar d505a8: OUTPUT«｢f｣␤｢oo｣␤»

[16:48] <BrokenRobot> Is that supposed to be like that?

[16:50] <psch> huh, i thought we had that fixed already

[16:50] <psch> well, there's a few not-quite-clean semantics there i think

[16:50] <timotimo> right; we allow you to refer to the things as @0, $0, %0, and apparently also &0

[16:50] <timotimo> but for some reason, not ::0 :P

[16:50] <psch> m: "foo" ~~ /(.+)/; say @0

[16:50] <camelia> rakudo-moar d505a8: OUTPUT«()␤»

[16:50] <psch> except it's not exactly like that

[16:50] <psch> @0 only has things if the first positional capture is actually repeated

[16:50] <BrokenRobot> m: "foo" ~~ /(f)(\w+)/; say %0

[16:50] <camelia> rakudo-moar d505a8: OUTPUT«Map.new(())␤»

[16:51] <psch> m: "foo" ~~ /(...)+/; say @0

[16:51] <camelia> rakudo-moar d505a8: OUTPUT«[｢foo｣]␤»

[16:51] <psch> as in, has a quantifier

[16:51] <psch> so &0 should just be invalid, i think

[16:51] <BrokenRobot> m: "foo" ~~ /(...)+/; say &0

[16:51] <camelia> rakudo-moar d505a8: OUTPUT«[｢foo｣]␤»

[16:51] <timotimo> oh

[16:51] <BrokenRobot> m: "foo" ~~ /(...)+/; say $0

[16:51] <camelia> rakudo-moar d505a8: OUTPUT«[｢foo｣]␤»

[16:51] <psch> m: "foo" ~~ /(.)+/; say $0

[16:51] <camelia> rakudo-moar d505a8: OUTPUT«[｢f｣ ｢o｣ ｢o｣]␤»

[16:51] <psch> m: "foo" ~~ /(.)+/; say @0

[16:51] <camelia> rakudo-moar d505a8: OUTPUT«[｢f｣ ｢o｣ ｢o｣]␤»

[16:51] <psch> that's what i mean :)

[16:51] <psch> it's all kinda a bit over the place

[16:52] <BrokenRobot> Well, there's https://rt.perl.org/Ticket/Display.html?id=72820   mind the cobwebs

[16:52] <psch> note, i'm not sure what $0 *should* mean if we have only one pos capture that's quantified

[16:52] *** yqt joined
[16:54] <psch> i think i've looked at it before

[16:55] <psch> but i don't recall what i found where :S

[16:57] <BrokenRobot> I wonder how many bugs can just be closed 'cause no one cares :)

[16:57] <BrokenRobot> Auto-close after 3 years :)

[16:58] <BrokenRobot> Oh.. That'd close just 6 bugs lol :)

[16:58] <BrokenRobot> m: say 1340/365

[16:58] <camelia> rakudo-moar d505a8: OUTPUT«3.671233␤»

[16:59] <BrokenRobot> That means on average, in the past year more than 3.7 tickets per day were created!

[17:01] *** addison joined
[17:02] <gfldex> dalek: you there mate?

[17:03] <BrokenRobot> Nope. "◀▬▬ │ dalek (~dalekbot@2001:780:101:ff00::2:9) has quit (Ping timeout: 258 seconds)"

[17:03] <BrokenRobot> that was over an hour ago

[17:03] <timotimo> oh, huh

[17:03] <timotimo> it's supposed to reboot

[17:03] <timotimo> is hack all right?

[17:03] <BrokenRobot> Ulti is connted from it

[17:04] <psch> hack is 580 load

[17:04] <BrokenRobot> Oh maybe not... I can't ssh :)

[17:04] <psch> +at

[17:04] <gfldex> docs.perl6.org will have proper index entry search, that actually jumps to the right spot on the page, in 20min or so

[17:04] <timotimo> yeah, i'll reboot it

[17:04] *** zacts left
[17:05] <timotimo> bye bye all hack chatters

[17:05] <psch> *phew*

[17:05] * BrokenRobot closes RT#72820 while no one is looking

[17:05] *** sergot left
[17:05] *** masak left
[17:05] *** synopsebot6 left
[17:05] *** dalek joined
[17:05] *** ChanServ sets mode: +v dalek

[17:06] *** synopsebot6 joined
[17:06] <timotimo> allow me to advertise ire.p6c.org again

[17:07] <psch> BrokenRobot: why?

[17:08] <psch> BrokenRobot: i mean, do you think &0 as a feature is something to leave in?

[17:10] <psch> fwiw, i'd tag it as LHF and leave it for someone who wants to dig into the grammar

[17:18] <BrokenRobot> psch: because no one cared about that bug report for 5 years. I think that alone is a reason enough to close it. As for leaving it in: if it's not specced by roast, it's not a feature. Grepping the docs repo, I don't see it mentioned either. 

[17:19] <timotimo> um, that's kind of not how we do it, though?

[17:19] <timotimo> anyway, i have to AFK for a bit

[17:19] <psch> iirc when i looked into it nobody cared what happens with it; i left an RFC for how to throw about it but nothing happened

[17:20] <psch> i don't recall if i had a commit bit at that time, but right now i'm strongly tempted to push something that throws something like X::Variable::InvalidCapture

[17:20] <psch> because to me it doesn't make sense to refer to a Callable regex capture

[17:21] <BrokenRobot> OK, I reopened it.

[17:22] <psch> i can also guide you how i figured out what to change where to throw a typed Exception there, because as i said, i think it's a great ticket for getting used to the Grammar and Actions

[17:22] <BrokenRobot> psch: sure, I'd love to learn that

[17:22] <psch> BrokenRobot: the most important thing is --stage=parse

[17:23] <psch> BrokenRobot: as in, the start for any bug that most likely is Grammar or Actions based is by isolating it as far as possible - in this case a bare '&0' - and running that through ./perl6 --stage=parse -e

[17:23] <psch> err, target

[17:23] <psch> goddamn >_>

[17:23] <psch> not stage

[17:24] <psch> https://gist.github.com/peschwa/1e6a9f84a4c9e67638ff93e5b79f86d9 # like this

[17:24] <psch> EXPR is a scary place, i don't go there

[17:24] <psch> so it's about variable

[17:24] <BrokenRobot> heh. everyone's afraid of EXPR :)

[17:25] <psch> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Grammar.nqp#L2017 so this

[17:25] *** addison left
[17:25] <psch> yeah, as i said, it's scary :P

[17:25] *** cdg joined
[17:25] <psch> i mean, if i had more formal comp sci education, maybe i'd think different

[17:25] <psch> but i don't so yeah

[17:26] <psch> anyway, looking at <variable> we can already guess what matches

[17:27] <psch> that is, the 4th alternation, '| <sigil> $<index>=[\d+] [<?{ $*IN_DECL }> <.typed_panic: "X::Syntax::Variable::Numeric">]?'

[17:27] <psch> m: my $0 # 'cause this doesn't work, which fits with the typed_panic

[17:27] <camelia> rakudo-moar d505a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Cannot declare a numeric variable␤at <tmp>:1␤------> 3my $07⏏5 # 'cause this doesn't work, which fits ␤»

[17:27] <psch> so, we know what matches, now we check what happens with ti

[17:27] <psch> *it

[17:27] <BrokenRobot> So <sigil> needs to exclude '&'  on here? https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Grammar.nqp#L2025

[17:28] <psch> well, yeah, that's one possibly fix

[17:28] <psch> i'd say you should try what happens if you do that - i'm pretty sure i know what it'll be, but verifying is clearly superior :)

[17:28] <psch> and the 3 or so minutes of a clean moar build should be bearable :)

[17:29] <psch> the thing is, you cannot change <sigil> in general

[17:29] <psch> you could probably put a negative lookahead infront

[17:30] <psch> something like "| <!before '&'> <sigil> $<index>...."

[17:30] <BrokenRobot> <[<sigil>]-[&]> or some such won't work?

[17:30] <psch> i don't think tokens expand inside a character class

[17:30] <psch> considering that's kind of the halting problem afaiu

[17:31] *** vendethiel joined
[17:31] <BrokenRobot> Does it have to be a token? <[$@%]> is not acceptable?

[17:31] <psch> well, you still have to store that in $<sigil>, because the actions probably depend on that

[17:31] <psch> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Actions.nqp#L2276 # they definitely do

[17:33] * BrokenRobot builds

[17:37] <BrokenRobot> heh.. nothing changed :P

[17:37] <psch> what did you implement?

[17:37] <BrokenRobot> Oh. I modified the wrong line. Now that makes sense :P

[17:38] <psch> BrokenRobot++ # quick debugging 

[17:38] <psch> :P

[17:41] <BrokenRobot> "Name must begin with alphabetic character"

[17:41] <BrokenRobot> Good error, no?

[17:42] <psch> a bit unspecific, isn't it?

[17:42] <psch> i mean, $0, @0, %0 all work

[17:42] <psch> so clearly "Name must beign with alphabetic character" isn't really the whole truth

[17:43] <BrokenRobot> | $<sigil>='&' $<index>=[\d+] <.typed_panic: "X::Syntax::Variable::SomethingOrOther"> ?

[17:43] <DrForr> Well, tere's also $ and @ on their own.

[17:43] <DrForr> *there's

[17:44] <psch> DrForr: right, but those never match if we look for \d+ afterwards

[17:44] <psch> BrokenRobot: that's a possibility, you don't even have to capture $<sigil> like that

[17:48] <psch> i'm not sure how LTM works there, though, but i'd guess '&' is more specific than <sigil>

[17:51] *** domidumont joined
[17:51] <BrokenRobot> huggable: exceptions :is: Run in rakudo repo: grep -R 'X::' | perl -nE 'my ($x) = /(X::[^\s'\''",().]+)/; $x and $x !~ /:$/ and say $1' | sort | uniq

[17:51] <huggable> BrokenRobot, Added exceptions as Run in rakudo repo: grep -R 'X::' | perl -nE 'my ($x) = /(X::[^\s'\''",().]+)/; $x and $x !~ /:$/ and say $1' | sort | uniq

[17:52] <psch> huggable: exceptions :is: X::.keys.say

[17:52] <huggable> psch, Added exceptions as X::.keys.say

[17:52] <psch> scnr

[17:52] <BrokenRobot> :o

[17:53] <psch> well, that actually only traverses one level

[17:53] <BrokenRobot> :)

[17:54] <BrokenRobot> So there's no X::Variable::InvalidCapture. Create one?

[17:55] <psch> well, i'm not sure that's the best name

[17:55] <psch> m: X::Variable.say

[17:55] <camelia> rakudo-moar d505a8: OUTPUT«Could not find symbol '&Variable'␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[17:55] <psch> i think X::Syntax::Regex::UnrecognizedCaptureShorthand maybe?

[17:55] <psch> or s/Unrecognized/Invalid/

[17:56] <psch> 'cause it's a Syntax feature, and specifically a Regex feature

[17:56] <psch> on the other hand, the other Exceptions below X::Syntax::Regex belong *inside* QRegex

[17:56] <psch> so maybe just X::Syntax::InvalidCapture

[17:57] <perlpilot> So ... when there's a capture in scope, &0 will work as usual, but otherwise it errors?  Is that where y'all are going?

[17:57] <psch> hm, actually i think the Shorthand is useful

[17:57] <psch> perlpilot: &0 is never useful to refer to a Capture - it would have to refer to a Callable capture, which we don't do

[17:57] <BrokenRobot> perlpilot: "as usual" is what?

[17:57] <psch> s/C/c/

[17:58] <psch> i mean, maybe it could shorthand to the .made, but that seems terribly magical

[17:58] <perlpilot> m: "foo" ~~ /(oo)/;  say &0;  # "usual" is perhaps overstating current behavior :)

[17:58] <camelia> rakudo-moar d505a8: OUTPUT«｢oo｣␤»

[17:59] <BrokenRobot> m: package Foo { sub EXPORT { {'&foo' => sub { "you called?" }} } }; import Foo; say &foo

[18:00] <camelia> rakudo-moar d505a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    foo used at line 1␤␤»

[18:00] <BrokenRobot> hm

[18:01] <BrokenRobot> (was just trying to see what exporting '&1' did... nothing apparently.

[18:01] <BrokenRobot> )

[18:02] <BrokenRobot> m: X::Syntax::Variable::Match.new.throw

[18:02] <camelia> rakudo-moar d505a8: OUTPUT«Cannot declare a match variable␤  in block <unit> at <tmp> line 1␤␤»

[18:02] <psch> m: my $<a>

[18:02] <camelia> rakudo-moar d505a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Cannot declare a match variable␤at <tmp>:1␤------> 3my $<a>7⏏5<EOL>␤»

[18:02] <BrokenRobot> psch: what about X::Syntax::Variable::InvalidCaptureShorthand?

[18:03] <psch> that's where that is used

[18:03] *** domidumont left
[18:03] <psch> BrokenRobot: yeah, that seems fine.  length is a bit awkward, but it should be rare enough to not be weird

[18:03] <psch> maybe "InvalidCaptureSigil"?

[18:03] *** M-matthew left
[18:03] *** M-Illandan left
[18:03] *** tadzik left
[18:03] <psch> 'cause, well, that's what we *really* care about, isn't it

[18:03] <BrokenRobot> Yeah, that's better.

[18:04] <BrokenRobot> Alright, I'll submit a PR tonight after work

[18:04] <BrokenRobot> psch++ for helping :)

[18:05] <psch> i like this solution a lot more than just closing the ticket

[18:05] <psch> BrokenRobot: also, don't forget the roast PR ;)

[18:05] <BrokenRobot> Yeah, I kinda brainfarted with the close :)

[18:06] <psch> BrokenRobot++

[18:07] *** labster joined
[18:09] *** yqt left
[18:16] *** sufrostico left
[18:17] *** spider-mario joined
[18:28] *** wamba joined
[18:28] *** girafe joined
[18:32] <dalek> doc: 52c90a5 | (Wenzel P. P. Peppmeyer)++ | html/js/main.js:

[18:32] <dalek> doc: __debug__ will check all links and alert on http status >= 400

[18:32] <dalek> doc: review: https://github.com/perl6/doc/commit/52c90a5265

[18:32] <BrokenRobot> :o neat

[18:34] *** tadzik joined
[18:38] *** domidumont joined
[18:38] *** Actualeyes left
[18:38] <dalek> doc: 12347fc | (Wenzel P. P. Peppmeyer)++ | html/js/main.js:

[18:38] <dalek> doc: XMLHTTPRequest does not decode URIs for us, fixed

[18:38] <dalek> doc: review: https://github.com/perl6/doc/commit/12347fc845

[18:40] <gfldex> i found that «#__debug__» is a really bad way to start a commit message

[18:43] <moritz> gfldex: it works fine if you commit with git commit -m '#__debug__ bla bla'

[18:43] <moritz> because there, git doesn't recognize # as a comment

[18:44] <BrokenRobot> hm, I get seen_name_or_id.includes is not a function... I guess my browser is too ancient.

[18:45] <moritz> it's better than "undefined is not a function" :-)

[18:46] <gfldex> BrokenRobot: see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes

[18:46] <BrokenRobot> gfldex: yeah, I'm using a Firefox fork that usually lags behind :)

[18:47] <gfldex> BrokenRobot: easy to fix, simply copy the implementation from the site i just linked into main.js

[18:48] <BrokenRobot> Well... At this moment in time. I think I use like 3 different browsers throughout the day

[18:48] <BrokenRobot> gfldex: nah, I think it's fine as it is. It's a debugging feature. People can grab a modern browser if they wanna use it :)

[18:49] <moritz> *sigh* can't somebody invent an HTTP header that opts in to cookie usage, so that websites can stop asking/informing me about cookie usage

[18:50] *** nebg left
[18:50] *** vendethiel left
[18:50] <BrokenRobot> I rather we stop making laws about cookies :P

[18:51] <moritz> well, that would be the ideal solution

[18:51] <moritz> but I happen not to believe in the IT competence of politicians

[18:51] <DrForr> s/IT//; :)

[18:51] *** M-matthew joined
[18:51] *** M-Illandan joined
[18:52] <moritz> well, those in office had compentency in getting into office

[18:52] <moritz> so there's some undeniable competency there

[18:52] <DrForr> True that.

[18:52] <brrt> it's a typical failure of the 'nudge' politics

[18:53] <psch> "It is a well-known fact that those people who must want to rule people are, ipso facto, those least suited to do it... anyone who is capable of getting themselves made President should on no account be allowed to do the job.

[18:53] <psch> yay douglas adams :P

[18:53] <psch> also screw that website for messing with my clipboard

[18:54] <moritz> I hate it when that happens

[18:54] <brrt> EU probably thought, "hey, if we make it /really annoying/ to use cookies, websites will be incentivized to not use cookies, and our citizens will have privacy"

[18:54] <brrt> technically, they are correct....

[18:54] <psch> yeah, they something like "read more quotes at our-fancy-website.tld" 

[18:54] <moritz> at $work, we have gitlab, and if you want to copy the SSH repo URL, it automatically marks the whole URL for "easier" copying

[18:55] <psch> +appended

[18:55] * psch accidentally a verb

[18:55] <moritz> ... which on Linux has the effect of not makig it into the paste buffer

[18:55] <psch> eww :|

[18:56] <moritz> so I can either use the slow ctrl+c + right-click-to-open-context-menu thingy, or have to take other evasive action to get it into the paste buffer

[18:56] <moritz> I'm sure somebody meant well when implementing that feature

[18:56] <brrt> had the EU simply said: 'you can use cookies for such and such purposes, but /only/ these purposes', we'd have clarity, and much less annoyance

[18:57] <moritz> brrt: or if they had invested their energy into, like, educating the users

[18:57] <brrt> i'm sorry, but i think that is naive

[18:58] <moritz> and/or sponsor development of awesome cookie-blocking browser extensions

[18:58] <brrt> us computer guys cannot expect 'users' to be educated any more than mechanics can expect drivers to be educated on the intricacies of petrol engines

[18:58] <brrt> that, i would agree with

[18:58] *** labster left
[18:58] *** addison joined
[18:58] <psch> an unfortunate truth

[18:58] <moritz> it's not like cookies are the only way to track people, so the privacy gains are pretty small anyway

[18:59] <brrt> true.... which is why a hard law would've been better

[18:59] <DrForr> moritz: Yeah, in fact they're in the vast minority. JS bugs, pixel tracking, supercookies and Flash are the real culprits there. Having worked for a place that did those things for others.

[19:00] *** huggable left
[19:00] <brrt> what is a supercookie?

[19:00] <moritz> DrForr: right

[19:00] <moritz> localstorage, silverlight (luckily mostly dead), ip tracking, ...

[19:01] <DrForr> Yeah. Though they can also be cookies that "other sites" (that are actually the tracking agency) load on your browser's "behalf".

[19:02] <moritz> brrt: it's a broad term for any kind of cookie-light storage like flash cookies, localstorage etc, and typical implementations use several such methods to make sure at least one of them gets through

[19:02] <moritz> *cookie-like

[19:02] *** labster joined
[19:02] <gfldex> do we actually have /html/$/ (as in doc for `$/`)?

[19:03] <moritz> gfldex: we have a problem with any symbol with / in it, iirc

[19:03] <BrokenRobot> and .

[19:03] <BrokenRobot> *leading .

[19:03] *** nebg joined
[19:04] * DrForr considers asking OSCON to pay for a ferry rather than a plane.

[19:04] <BrokenRobot> timeless was working on a fxi

[19:05] <grondilu> can I make sigilless named parameters?

[19:06] <moritz> I don't think so

[19:06] <grondilu> m: say sub (:foo) {}

[19:06] <camelia> rakudo-moar d505a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3say sub (:7⏏5foo) {}␤»

[19:06] <grondilu> m: say sub (:\foo) {}

[19:06] <camelia> rakudo-moar d505a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3say sub (:7⏏5\foo) {}␤»

[19:06] *** skids joined
[19:07] <moritz> maybe the :\foo form could be made to work

[19:07] <gfldex> m: sub foo(:a(\b)){}

[19:07] <camelia> rakudo-moar d505a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3sub foo(:a(7⏏5\b)){}␤»

[19:07] *** darutoko left
[19:07] <moritz> but then I'm not really a parsing expert

[19:07] <gfldex> m: sub foo(:$a is raw){}

[19:07] <camelia> rakudo-moar d505a8: ( no output )

[19:07] <psch> "Missing block" is kinda weird there

[19:07] <brrt> DrForr: not fond of flying?

[19:08] <BrokenRobot> m: say "echo exit(42)   | $*EXECUTABLE 1>&2"

[19:08] <camelia> rakudo-moar d505a8: OUTPUT«echo exit(42)   | ./rakudo-m-inst/bin/perl6-m 1>&2␤»

[19:08] <BrokenRobot> psch: hm. our fix now throws on that ^

[19:08] <DrForr> No, just not fond of flying in to Heathrow and sitting in that little carrel by the passport booth waiting for an hour to be told not to stay beyond 90 days.

[19:08] <BrokenRobot> It doesn't like the &2

[19:09] <DrForr> And not fond of Heathrow in general.

[19:09] <psch> BrokenRobot: that's interesting

[19:10] <DrForr> &_0 is fine, I'm using it in some internals.

[19:10] *** domidumont left
[19:10] <psch> BrokenRobot: the naive solution would be to check if you're in qq-lang and just don't do the lookup then

[19:10] <psch> BrokenRobot: as in, don't treat it like a variable

[19:10] *** AndyBotwin joined
[19:10] <psch> BrokenRobot: but that's probably really weirdly complicated and there's likely an easier solution

[19:11] <psch> m: say "foo 1>&2"

[19:11] <camelia> rakudo-moar d505a8: OUTPUT«foo 1>&2␤»

[19:11] <BrokenRobot> This is my current thing FWIW: https://github.com/rakudo/rakudo/compare/nom...zoffixznet:fix-RT%2372820-amper-sigil?expand=1

[19:11] <psch> m: "foo" ~~ /(.)(.)(.)/; say "foo 1>&2"

[19:11] <camelia> rakudo-moar d505a8: OUTPUT«foo 1>&2␤»

[19:11] <psch> m: "foo" ~~ /(.)(.)(.)/; say "foo 1>$2"

[19:11] <camelia> rakudo-moar d505a8: OUTPUT«foo 1>o␤»

[19:12] <psch> BrokenRobot: well, looks like your addition LTMs better in places you didn't want it to

[19:12] <psch> BrokenRobot: the alternative is not touching the grammar - cause, as in my example, the grammar already does it well enough

[19:14] *** gcole left
[19:14] *** gcole joined
[19:15] <psch> BrokenRobot: which means instead changing Actions.variable to throw on $<sigil> eq '&' && so $<index> # or somesuch

[19:17] *** TEttinger joined
[19:18] <BrokenRobot> So it'd be doing that check every time it parses a variable? Won't that be a hefty price for such an edge case?

[19:18] <BrokenRobot> s/such <(/rare/;

[19:20] <BrokenRobot> m: say 10&2

[19:20] <camelia> rakudo-moar d505a8: OUTPUT«all(10, 2)␤»

[19:20] <BrokenRobot> m: say 10 &2

[19:20] <camelia> rakudo-moar d505a8: OUTPUT«all(10, 2)␤»

[19:21] <psch> BrokenRobot: well, to reach that spot in Actions it first has to have parsed [ $<sigil> $<index> }

[19:21] <psch> ]*

[19:22] <BrokenRobot> Ah

[19:22] <psch> so, in a way, it might actually be cheaper than your current implementation

[19:22] <psch> because you're always LTM-ing for ['&' \d+]

[19:24] *** itaipu left
[19:29] *** FROGGS joined
[19:30] *** harmil joined
[19:32] <BrokenRobot> psch: but then that won't fix the original case:

[19:32] <BrokenRobot> m: &1

[19:32] <camelia> rakudo-moar d505a8: ( no output )

[19:32] <BrokenRobot> m: say &1

[19:32] <camelia> rakudo-moar d505a8: OUTPUT«Nil␤»

[19:33] <psch> BrokenRobot: what did you try?

[19:34] <BrokenRobot> Oh, right, never mind the above comment. 

[19:34] <BrokenRobot> But the solution still has the same problem: it throws inside strings

[19:34] *** adu joined
[19:34] <psch> BrokenRobot: can i see a diff?

[19:34] <FROGGS> o/

[19:34] <yoleaux> 5 Jul 2016 05:53Z <Xliff> FROGGS: The latest PR for p6-XML::LibXML finishes the porting of 06elements and 08findnodes. Please let me know what you think.

[19:34] <psch> o/ FROGGS 

[19:34] <BrokenRobot> psch: I undid all the previous Grammar stuff and now did this: https://gist.github.com/zoffixznet/4fbe33369824f45d8e2c098542834047

[19:34] <FROGGS> Xliff: sorry that I've got almost not time these days :o(

[19:35] <psch> BrokenRobot: i'll look a bit closer in a moment

[19:36] <gfldex> i can't find where htmlify.p6 generates the ToC. The ToC needs fixing as it duplicates X<> nodes.

[19:36] <BrokenRobot> psch: here's a better link: https://github.com/rakudo/rakudo/compare/nom...zoffixznet:fix-RT%2372820-amper-sigil?expand=1

[19:36] <BrokenRobot> gfldex: IIRC the toc is generated by Pod::To::HTML

[19:37] *** adu left
[19:37] <BrokenRobot> gfldex: this seems to be it: https://github.com/perl6/Pod-To-HTML/blob/master/lib/Pod/To/HTML.pm#L192

[19:38] <gfldex> BrokenRobot: found it, thanks

[19:38] *** labster left
[19:43] <BrokenRobot> m: my &foo; 'foo' ~~ /(\w+)/; say "&0()"

[19:43] <camelia> rakudo-moar d505a8: OUTPUT«No such method 'CALL-ME' for invocant of type 'Match'␤  in block <unit> at <tmp> line 1␤␤»

[19:44] <BrokenRobot> m: my &foo; 'foo' ~~ /(\w+)/; say &0()

[19:44] <camelia> rakudo-moar d505a8: OUTPUT«No such method 'CALL-ME' for invocant of type 'Match'␤  in block <unit> at <tmp> line 1␤␤»

[19:44] <psch> BrokenRobot: i think that's actually EXPR :|

[19:44] <BrokenRobot> Awesome :)

[19:45] <psch> note that without your changes it runs through EXPR

[19:45] <BrokenRobot> How can you tell it doesn't without my changed?

[19:45] <psch> ...huh?

[19:45] <BrokenRobot> like the --target=parse doesn't show anything usefulk

[19:45] <psch> right, --target=parse dies with your changes

[19:46] <psch> and without your changes it runs through EXPR

[19:46] <BrokenRobot> Ah, OK. EXPR is after parse?

[19:46] <psch> so EXPR is behind it dying with your changes

[19:46] <psch> no, EXPR is the operator/operand parser

[19:46] <psch> or something like that, i'm really not sure

[19:46] <psch> as i said, it's a scary place :P

[19:46] * BrokenRobot starts to understand why everyone hates EXPR

[19:47] <psch> yeah, it's the thing that pulls different associativities and precedences apart

[19:47] <psch> mind, i don't really *hate* it

[19:47] <psch> i just really don't it at all

[19:47] <hoelzro> good ol' EXPR

[19:47] <arnsholt> EXPR is less terrifying than you think

[19:48] <BrokenRobot> Well, I've seen someone else express the same sentiments and jnthn++'s nqp and internals guide also calls it a scary place >:)

[19:48] <psch> BrokenRobot: https://github.com/perl6/nqp/blob/master/src/HLL/Grammar.nqp#L415

[19:48] <psch> that's EXPR

[19:48] <psch> arnsholt: feel free to, idk, explain it somewhere..? :)

[19:48] <arnsholt> Basically, it's the shunting yard algorithm

[19:49] <arnsholt> https://en.wikipedia.org/wiki/Shunting-yard_algorithm

[19:49] <arnsholt> There are two stacks, an operand stack, and an operator stack

[19:49] *** ptolemarch left
[19:49] <arnsholt> When terms are read, they are pushed to the operand stack

[19:49] <BrokenRobot> That doesn't look very scary... Well.. judging only by its small size that is :)

[19:49] <arnsholt> When operators are read, they're pushed to the operator stack

[19:49] * BrokenRobot relocates &

[19:49] <DrForr> Careful, that almost sounds Forth-like :)

[19:50] <BrokenRobot> I'll read the backlog

[19:51] <psch> honestly, the fact that it's a well-documented algorithm just makes our implementation even scarier

[19:51] <psch> because, well, i'm pretty sure that whoever wrote it is a better programmer than me

[19:51] <psch> yet EXPR still has bugs

[19:52] *** kaare_ left
[19:54] <brrt> well, the fact that it is well documented means you can read about different angles and ideas

[19:54] <brrt> linear scan is well documented and that helps :-)

[19:56] *** setty1 joined
[19:57] <arnsholt> And if the operator to be pushed binds looser than the top of the stack, pop and evaluate operators off the top of the stack until you find something that binds looser than yourself

[19:58] <arnsholt> IIRC the main bug in EXPR is error reporting

[19:58] <arnsholt> It's not that it does things wrong, but when things are invalid it tends to fail in uninformative ways

[20:00] *** setty1 left
[20:01] *** brrt left
[20:04] *** ptolemarch joined
[20:05] <FROGGS> Xliff: merged, thank you! :o)

[20:05] *** colomon left
[20:14] *** acrussell left
[20:21] *** jonas1 left
[20:27] <grondilu> I wanted to write this in Perl 6 for a while:  http://rosettacode.org/wiki/Orbital_elements

[20:28] *** dwarring joined
[20:29] <hoelzro> grondilu: why the name "Clifford", if I may ask?

[20:30] <grondilu> It's a library for Clifford algebras.

[20:30] <hoelzro> oh, I thought it might be a reference of some sort

[20:31] <grondilu> well, in a way it is.

[20:31] <grondilu> (but in a very dull way)

[20:37] *** labster joined
[20:43] <[Coke]> catching up, but just because a report is old is no reason to close it. Review it on the merits, THEN close it.

[20:43] <dalek> specs: f8a00d1 | (Tom Browder)++ | S26-documentation.pod:

[20:43] <dalek> specs: further amplify table row and cell requirments and recommendations

[20:43] <dalek> specs: review: https://github.com/perl6/specs/commit/f8a00d1953

[20:43] <dalek> specs: 135839c | (Tom Browder)++ | S26-documentation.pod:

[20:43] <dalek> specs: add expectation of the same number of cells per row

[20:43] <dalek> specs: review: https://github.com/perl6/specs/commit/135839ce47

[20:43] <dalek> specs: 15c1586 | (Tom Browder)++ | S26-documentation.pod:

[20:43] <dalek> specs: Merge pull request #112 from tbrowder/pod-table-fix

[20:43] <dalek> specs: 

[20:43] <dalek> specs: further amplify table row and cell requirments and recommendations

[20:43] <dalek> specs: review: https://github.com/perl6/specs/commit/15c158609c

[20:46] <[Coke]> If you're feeling particularly engaged on fixing the bug queue, find an old ticket, and make it your mission to get one of the core devs to comment on it if there's a question as to whether or not it's desired/working as intended, whatever.

[20:52] *** ZoffixMobile joined
[20:52] *** yqt joined
[20:54] <ZoffixMobile> [Coke], one of the commens on the ticket was jnthn calling it a feature. I did point it out to core devs before closing and I did reopen it after psch said it should be fixed.

[20:55] <[Coke]> ok. In general, though, please do not close tickets just because they are old.

[20:59] <ZoffixMobile> It wasn't the only reason. The report was about LTA erro which was fixed 5 years ago /o\

[20:59] *** ZoffixMobile left
[21:00] <[Coke]> sure, that's fine.

[21:00] <[Coke]> I was originally replying to this:

[21:01] <[Coke]> http://irclog.perlgeek.de/perl6/2016-07-06#i_12795473

[21:02] <[Coke]> if it's something that isn't in 6.c, it's still possible it was intended to be included in 6 at some point. 

[21:04] *** Zoffix joined
[21:04] <Zoffix> OK

[21:11] *** Util joined
[21:12] *** vibha joined
[21:15] *** espadrine joined
[21:15] *** rgrinberg left
[21:20] *** freezerburnv joined
[21:28] <gfldex> tbrowder: if you are working on Pod::* please consider to give Pod::Block a .parent field. Having context would greatly simplifying rendering.

[21:29] <gfldex> i have to take drastic measures to handle X<> inside the ToC :-|

[21:30] *** vendethiel joined
[21:33] <tbrowder> gfldex: I would love to do that someday, but for the moment I am working just on fixing a table pod error.  There is a lot to learn before I can work on a pod class.

[21:35] <gfldex> tbrowder: also right now there is no way to set/reset the counter for numbered item list. I had retreat to reset all counters when I hit a =head. That works but then you can't have more then one numbered item list per section.

[21:36] <tbrowder> Copy. Have you filed those issues with RT?

[21:38] <gfldex> tbrowder: i did not

[21:39] *** molaf left
[21:39] *** RabidGravy left
[21:40] <gfldex> tbrowder: the whole structure of Pod::* could do with some rethinking. It's in many places not really a tree structure. For the flat text for of a pod file that may be ok, but from the standpoint of a renderer a nice tree would be better.

[21:40] <gfldex> tbrowder: all those nice cores CPUs got could do with some parallel love

[21:44] <tbrowder> Sounds like a good idea, but I'm still very new at Perl 6 and have a lot to learn. But I will definitely continue to work on pod because it's rendering, in many formats is of great interest to me.

[21:45] <tbrowder> s/it's/its/

[21:46] <tbrowder> (dumb iPhone thinks it knows what I'm trying to say)

[21:51] *** rindolf left
[21:52] <dalek> doc: e449141 | (Jan-Olof Hendig)++ | doc/Type/Capture.pod6:

[21:52] <dalek> doc: Added docs for Capture.Bool and Capture.Numeric

[21:52] <dalek> doc: review: https://github.com/perl6/doc/commit/e449141c06

[21:52] *** FROGGS left
[21:53] *** Sgeo__ joined
[21:54] *** kerframil joined
[21:56] *** maybekoo2 joined
[22:00] *** travis-ci joined
[22:00] <travis-ci> Doc build failed. Jan-Olof Hendig 'Added docs for Capture.Bool and Capture.Numeric'

[22:00] <travis-ci> https://travis-ci.org/perl6/doc/builds/142891152 https://github.com/perl6/doc/compare/12347fc84596...e449141c0644

[22:00] *** travis-ci left
[22:00] <dalek> doc: 3e694bf | (Jan-Olof Hendig)++ | doc/Type/Capture.pod6:

[22:00] <dalek> doc: Removed some whitespace

[22:00] <dalek> doc: review: https://github.com/perl6/doc/commit/3e694bf076

[22:02] *** cognominal left
[22:03] <Zoffix> m: say 0o9

[22:03] <camelia> rakudo-moar 55c359: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤'9' is not a valid number␤at <tmp>:1␤------> 3say 0o97⏏5<EOL>␤»

[22:03] <Zoffix> m: say 09

[22:03] <camelia> rakudo-moar 55c359: OUTPUT«Potential difficulties:␤    Leading 0 does not indicate octal in Perl 6.␤    Please use 0o9 if you mean that.␤    at <tmp>:1␤    ------> 3say 097⏏5<EOL>␤9␤»

[22:05] *** firstdayonthejob left
[22:06] *** _dolmen_ joined
[22:07] *** rgrinberg joined
[22:08] *** freezerburnv left
[22:12] <MasterDuke> AlexDaniel: yep, [Coke] helped and everything seems fine now. i can see/comment on tickets (at least from the web page when logged in, i haven't tried emailing again)

[22:13] <AlexDaniel> \o/

[22:15] <timotimo> hooray

[22:17] *** Sgeo__ left
[22:18] *** Sgeo joined
[22:19] *** travis-ci joined
[22:20] <travis-ci> Doc build passed. Jan-Olof Hendig 'Removed some whitespace'

[22:20] <travis-ci> https://travis-ci.org/perl6/doc/builds/142893418 https://github.com/perl6/doc/compare/e449141c0644...3e694bf07676

[22:20] *** travis-ci left
[22:31] *** Possum left
[22:32] *** Possum joined
[22:33] *** eugen left
[22:34] *** vibha left
[22:34] *** rgrinberg left
[22:36] *** spider-mario left
[22:37] *** buharin left
[22:37] *** buharin joined
[22:39] *** gcole left
[22:39] *** gcole_ joined
[22:42] *** bjz_ left
[22:43] <leedo_> is there a way to augment a class, but within a limited scope? i.e. the modification goes away once you leave some scope

[22:45] *** gcole_ left
[22:45] *** gcole joined
[22:45] <Xliff> FROGGS: Cool! I will pick out another test over the weekend!

[22:51] *** _dolmen_ left
[22:54] <Zoffix> leedo_, don't think so. You can mixin a role into an object (http://perl6.party/post/Exploiting-Perl-6-Code-From-Down-The-Dependency-Chain#mixingitup). It may be possible with the MOP but I don't know how

[22:54] <Zoffix> m: Int.^remove_method

[22:54] <camelia> rakudo-moar 55c359: OUTPUT«Method 'remove_method' not found for invocant of class 'Perl6::Metamodel::ClassHOW'␤  in block <unit> at <tmp> line 1␤␤»

[22:54] <Zoffix> m: Int.HOW.^methods.say

[22:54] <camelia> rakudo-moar 55c359: OUTPUT«Method 'gist' not found for invocant of class 'NQPRoutine'␤  in block <unit> at <tmp> line 1␤␤»

[22:54] <Zoffix> :/

[22:55] <leedo_> Zoffix: yeah i figured that could be done, I was just talking to a ruby person and he asked if there was something akin to "refinements" in rubyland

[22:55] <leedo_> which is just a tiny bit better than monkey patching :P

[22:56] <Zoffix> m: Int.^method_table<abs>:delete; say (-5).abs

[22:56] <camelia> rakudo-moar 55c359: OUTPUT«5␤»

[22:56] <Zoffix> ¯\_(ツ)_/¯ no idea

[22:59] *** cpage_ left
[23:00] *** huggable joined
[23:04] *** yqt left
[23:06] *** gcole left
[23:07] *** gcole joined
[23:10] *** bjz joined
[23:11] *** Skarsnik left
[23:15] *** bjz left
[23:17] *** cdg left
[23:18] *** cdg joined
[23:19] *** zengargoyle left
[23:20] *** dwarring left
[23:22] *** cdg left
[23:23] *** zengargoyle joined
[23:26] *** vendethiel left
[23:27] *** cpage_ joined
[23:37] *** girafe left
[23:42] *** ptolemarch left
[23:44] *** cdg joined
[23:47] *** cdg left
[23:48] *** cdg joined
