[00:00] *** cpage_ joined
[00:01] <sena_kun> AlexDaniel, are you here?

[00:06] <sena_kun> .tell AlexDaniel: if you have a time, can you update https://github.com/perl6/doc/issues/561 table? Since S26 is okay now, I assume many items were fixed and it'll be easier to search for issues with updated output.

[00:06] <yoleaux> sena_kun: What kind of a name is "AlexDaniel:"?!

[00:06] <sena_kun> .tell AlexDaniel if you have a time, can you update https://github.com/perl6/doc/issues/561 table? Since S26 is okay now, I assume many items were fixed and it'll be easier to search for issues with updated output.

[00:06] <yoleaux> sena_kun: I'll pass your message to AlexDaniel.

[00:06] *** sena_kun left
[00:09] *** BrassLantern left
[00:12] *** TEttinger left
[00:13] *** dha left
[00:13] *** skids joined
[00:13] *** mcmillhj left
[00:15] <AlexDaniel> .

[00:15] <yoleaux> 00:06Z <sena_kun> AlexDaniel: if you have a time, can you update https://github.com/perl6/doc/issues/561 table? Since S26 is okay now, I assume many items were fixed and it'll be easier to search for issues with updated output.

[00:16] <AlexDaniel> .tell sena_kun the output is very ugly because of this: https://github.com/perl6/doc/issues/710

[00:16] <yoleaux> AlexDaniel: I'll pass your message to sena_kun.

[00:17] *** TEttinger joined
[00:17] <AlexDaniel> .tell sena_kun and the situation got even worse when another “Chat with us” link got added. The thing is, these links are on *every* page, so the tool is nice enough to warn about it every time… I will update it per your request but yeah…

[00:17] <yoleaux> AlexDaniel: I'll pass your message to sena_kun.

[00:20] *** BenGoldberg joined
[00:22] *** grondilu left
[00:24] <AlexDaniel> .tell sena_kun ah, just found that I can --suppress-temp-redirects. OK then, will update shortly

[00:24] <yoleaux> AlexDaniel: I'll pass your message to sena_kun.

[00:28] <AlexDaniel> .tell sena_kun ah no, I need -b option instead. Anyway, it will be OK.

[00:28] <yoleaux> AlexDaniel: I'll pass your message to sena_kun.

[00:32] <jdv79> are there any decent xml libs yet?

[00:35] <timotimo> we do have the one

[00:35] <timotimo> one pure-perl6

[00:35] <AlexDaniel> jdv79: what do you need exactly?

[00:35] <timotimo> i think froggs or someone else is working on libxml binding or something?

[00:36] <AlexDaniel> jdv79: I am asking because sometimes people attempt to parse html with XML libs. In such cases, it is better to use Gumbo

[00:37] <jdv79> i just remember XML was slow

[00:37] <jdv79> and froggs wasn't done

[00:37] <jdv79> just to look at some rss

[00:41] <jdv79> wow.  just fetching the rss feed with HTTP::UserAgent takes 8s.  curl does it in .3

[00:41] <jdv79> maybe i'll drop to I::P5

[00:45] <AlexDaniel> jdv79: hmmm I am using HTTP::UserAgent too and it is not so slow here

[00:45] <AlexDaniel> or was it a very big page?

[00:47] <jdv79> ah, HTTP::Tinyish in .8.  much better:)

[00:47] *** mohae_ joined
[00:47] <jdv79> its just https://www.youtube.com/feeds/videos.xml?user=vsauce

[00:48] <jdv79> only 21K.  i don't know what HTTP::UserAgent is up to.

[00:50] *** mohae left
[01:09] *** kaare__ joined
[01:16] *** kaare__ is now known as kaare_

[01:33] <dalek> doc: c8f8763 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Type/Any.pod6:

[01:33] <dalek> doc: Fix “gather take” link

[01:33] <dalek> doc: 

[01:33] <dalek> doc: Newlines in links have never worked right.

[01:33] <dalek> doc: review: https://github.com/perl6/doc/commit/c8f8763518

[01:46] *** ilbot3 left
[01:47] *** kalkin- left
[01:47] *** kalkin-_ joined
[01:47] *** ilbot3 joined
[01:56] *** itaipu joined
[01:57] *** s34n_ joined
[01:59] <s34n_> it appears that Rakudo pre-installs a lot of default packages including DBIish and PSGI. It's interesting to me that those would be part of a "base" install

[02:01] <s34n_> I am interested in the state of PSGI in perl6

[02:02] <MasterDuke> Rakudo Star does, regular Rakudo doesn't

[02:05] <s34n_> ah

[02:06] <s34n_> It looks like supernovus is very active in perl6 support for PSGI 

[02:07] <s34n_> Is anybody else here doing much with PSGI support?

[02:14] <jdv79> random warnings and segfault

[02:14] <jdv79> lovely

[02:18] *** kid511 joined
[02:21] *** kid51 left
[02:33] *** wamba joined
[02:33] *** noganex joined
[02:36] *** noganex_ left
[02:42] *** holyghost left
[02:42] *** holyghost joined
[02:43] <jdv79> File::Temp has a bug.  can't nail it down though.

[02:45] <jdv79> somehow $/.chars is Any at https://github.com/perlpilot/p6-File-Temp/blob/master/lib/File/Temp.pm#L38

[02:46] <gfldex> jdv79: what is $tempfile in that case?

[02:46] <jdv79> even though $template is always "**********"

[02:47] <jdv79> always default

[02:47] <jdv79> could it be async related?..

[02:48] <gfldex> m: my @filechars = flat('a'..'z', 'A'..'Z', 0..9, '_'); my $f = '**********'; $f ~~ s/ '*' ** 4..* /{ @filechars.roll($/.chars).join }/; dd $f;

[02:48] <camelia> rakudo-moar f1313d: OUTPUT«Str $f = "8DsA9kS8ZO"␤»

[02:49] <jdv79> i'll try to golf it quick

[02:49] <gfldex> @filechars may cause problems on case insensitive FS

[02:52] <gfldex> if threads are involved you have to expect very odd errors

[02:52] <jdv79> yup.  async related.

[02:53] <jdv79> https://gist.github.com/anonymous/05dcaef39712768023a8ac47d536de70

[02:54] <jdv79> if you comment out the start block it stops for me

[02:54] <jdv79> same for you?

[02:54] <jdv79> oh, i left it commented.  oops.

[02:54] <gfldex> PROCESS::<$SCHEDULER> = ThreadPoolScheduler.new(initial_threads => 0, max_threads => 1);

[02:55] <gfldex> try this to have just one thread. If the problem goes away you will have to wait for the bug to be fixed.

[02:55] <jdv79> its a known bug are you saying?

[02:55] <gfldex> yes

[02:55] *** TEttinger left
[02:56] <jdv79> that seems to squelch it

[02:56] <jdv79> where is this bug reported?

[02:58] *** TEttinger joined
[02:58] <gfldex> there is no bug report because golfing seams not to be fruitful but jnthn is informed

[02:59] <jdv79> my example is fairly small but ok

[03:00] <gfldex> if it's quite small may be worth to rakudobug it

[03:01] <gfldex> i have the suspicion that modules need to be involved to trigger it. It would be very helpful if you could confirm that.

[03:03] <jdv79> maybe the XML bug i also hit that was similar is related

[03:03] *** bob777 joined
[03:22] *** buggable joined
[03:26] *** cdg joined
[03:31] *** wamba left
[03:40] *** kid511 left
[03:52] <jdv79> gfldex: doesn't require modules.  https://rt.perl.org/Public/Bug/Display.html?id=128809

[03:53] *** cpage_ left
[04:03] *** pdcawley left
[04:05] *** khw left
[04:05] *** itaipu left
[04:16] *** cdg left
[04:17] *** cdg joined
[04:21] *** cdg left
[04:27] *** cpage_ joined
[04:29] *** andrzejku joined
[04:30] <s34n_> zostay: ping

[04:35] <s34n_> what pattern is?: identifer { ... } 

[04:35] <s34n_> that's not a sub. what is it?

[04:37] <s34n_> is it some kind of Routine?

[04:38] <andrzejku> hi

[04:39] *** Cabanossi left
[04:39] <s34n_> andrzejku: hi

[04:40] <andrzejku> I am looking for Perl friend

[04:40] <TimToady> s34n_: for an ordinary identifier, that would be a sub call passing a block as the first argument, unless you're asking about regex

[04:41] <TimToady> if it's regex, the two are not related

[04:41] <s34n_> ah. of course

[04:41] <TimToady> identifier would match itself, and then the block would execute for its side effects, if any

[04:41] *** Cabanossi joined
[04:42] <s34n_> is 'start' a reserved word?

[04:43] <gfldex> m: dd &start

[04:43] <camelia> rakudo-moar f1313d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    start used at line 1. Did you mean 'spurt', 'sort', 'sqrt'?␤␤»

[04:43] <gfldex> looks like it

[04:44] <s34n_> I miss perldoc -f

[04:44] <gfldex> m: sub start { say 'oi!' }; start;

[04:44] <camelia> rakudo-moar f1313d: OUTPUT«oi!␤»

[04:44] <s34n_> is there a p6doc -f ?

[04:44] <gfldex> but then, reserved isn't all that reserved in Perl 6

[04:44] <TimToady> s34n_: it is if there's whitespace after it

[04:45] <TimToady> m: say WHAT start { say "hi" }

[04:45] <camelia> rakudo-moar f1313d: OUTPUT«(Promise)␤hi␤»

[04:45] <gfldex> m: sub start(&c) { say 'oi!' }; start {};

[04:45] <camelia> rakudo-moar f1313d: ( no output )

[04:45] *** skids left
[04:45] <TimToady> m: sub start(&c) { say 'oi!' }; start()

[04:45] <camelia> rakudo-moar f1313d: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in sub start at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[04:45] <TimToady> m: sub start(&c) { say 'oi!' }; start({})

[04:45] <camelia> rakudo-moar f1313d: OUTPUT«Type check failed in binding to &c; expected Callable but got Hash (${})␤  in sub start at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[04:45] <TimToady> m: sub start(&c) { say 'oi!' }; start({;})

[04:45] <camelia> rakudo-moar f1313d: OUTPUT«oi!␤»

[04:46] <TimToady> you'd need the parens there to force the sub call

[04:46] <TimToady> just as if you called if() or while()

[04:47] <TimToady> so you can have functions that are the same name as reserved words, but they're kind of second-class citizens

[04:47] <TimToady> you can't use listop form on them

[04:47] <s34n_> does start actually spawn a process? or a thread?

[04:47] <gfldex> no

[04:48] <s34n_> it just creates a Promise?

[04:48] <TimToady> it schedules something to do that might get assigned to a worker thread at some point

[04:48] <s34n_> "might"?

[04:49] <TimToady> well, probably will eventually, depending on how many outstanding promises there are and how many worker threads, and whether you exit first :)

[04:49] <s34n_> k

[04:49] <TimToady> m: say WHAT start { sleep 3; say "hi" }

[04:49] <camelia> rakudo-moar f1313d: OUTPUT«(Promise)␤»

[04:49] <TimToady> that one exits first

[04:50] <TimToady> m: await start { sleep 3; say "hi" }

[04:50] <camelia> rakudo-moar f1313d: OUTPUT«hi␤»

[04:50] <TimToady> that one doesn't :)

[04:50] <s34n_> hm

[05:00] <holyghost> s34n : futures for example in google

[05:01] <harmil> I'm not sure how to read this error: Only identical operators may be list associative; since '..' and '..' differ, they are non-associative and you need to clarify with parentheses

[05:01] *** quester joined
[05:02] <harmil> m: say 1..3 R+ 2..5

[05:02] <camelia> rakudo-moar f1313d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Only identical operators may be list associative; since '..' and '..' differ, they are non-associative and you need to clarify with parentheses␤at <tmp>:1␤------> 3say 1..3 R+ 2.7⏏5.5␤»

[05:02] <gfldex> m: say 1..(3 R+ 2)..5 # that's what Perl 6 thinks you mean

[05:02] <camelia> rakudo-moar f1313d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Only identical operators may be list associative; since '..' and '..' differ, they are non-associative and you need to clarify with parentheses␤at <tmp>:1␤------> 3say 1..(3 R+ 2).7⏏5.5 # that's wha…»

[05:03] <harmil> gfldex: oh, it's nonsense, pure and simple.

[05:03] <harmil> But the error is borderline hilarious

[05:03] <gfldex> it's very sensible actually

[05:03] <gfldex> m: say 1..3*2;

[05:03] <camelia> rakudo-moar f1313d: OUTPUT«1..6␤»

[05:04] <harmil> gfldex: are you suggesting that the error "since '..' and '..' differ" is ... correct?

[05:04] <geekosaur> different multis, I suspect

[05:04] <gfldex> m: say 1..3 R+ 2x5

[05:04] <camelia> rakudo-moar f1313d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3say 1..3 R+ 27⏏5x5␤»

[05:05] <gfldex> m: say 1..3 R+ 2 x 5

[05:05] <camelia> rakudo-moar f1313d: OUTPUT«1..55555␤»

[05:05] <geekosaur> although if so then it's a bit LTA, but fixing that case would make for other LTA messages :/

[05:05] *** dainis left
[05:05] <TimToady> m: say 1 .. 2 .. 3

[05:05] <camelia> rakudo-moar f1313d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Only identical operators may be list associative; since '..' and '..' differ, they are non-associative and you need to clarify with parentheses␤at <tmp>:1␤------> 3say 1 .. 27⏏5 .. 3␤    expectin…»

[05:05] <TimToady> it's LTA for sure

[05:06] <TimToady> .. should really be considered non-associative, probably

[05:06] <harmil> TimToady: Great example. I'll rakudobug that before I turn in.

[05:06] <TimToady> m: 1 but 2 but 3

[05:06] <camelia> rakudo-moar f1313d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Only identical operators may be list associative; since 'but' and 'but' differ, they are non-associative and you need to clarify with parentheses␤at <tmp>:1␤------> 031 but 27⏏5 but 3␤    expecti…»

[05:06] <TimToady> yeah, non-associatives are somehow getting treated as list associatives

[05:07] <TimToady> m: say 1 <=> 2 <=> 3

[05:07] <camelia> rakudo-moar f1313d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Only identical operators may be list associative; since '<=>' and '<=>' differ, they are non-associative and you need to clarify with parentheses␤at <tmp>:1␤------> 3say 1 <=> 27⏏5 <=> 3␤    expe…»

[05:07] <TimToady> it's just the wrong error

[05:07] <TimToady> m: say &infix:<cmp>.assoc

[05:07] <camelia> rakudo-moar f1313d: OUTPUT«Method 'assoc' not found for invocant of class 'Sub+{<anon|48574256>}+{Precedence}'␤  in block <unit> at <tmp> line 1␤␤»

[05:07] *** jcallen left
[05:08] *** BenGoldberg left
[05:10] *** TEttinger left
[05:10] <TimToady> m: say &infix:<cmp>.prec

[05:10] <camelia> rakudo-moar f1313d: OUTPUT«{assoc => non, prec => n=}␤»

[05:11] <TimToady> m: say &infix:<..>.prec

[05:11] <camelia> rakudo-moar f1313d: OUTPUT«{assoc => non, prec => n=}␤»

[05:11] <TimToady> that seems right

[05:12] *** jcallen joined
[05:12] <TimToady> m: say 1 cmp 2 leg 3

[05:12] <camelia> rakudo-moar f1313d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Only identical operators may be list associative; since 'cmp' and 'leg' differ, they are non-associative and you need to clarify with parentheses␤at <tmp>:1␤------> 3say 1 cmp 27⏏5 leg 3␤    expe…»

[05:13] *** cpage_ left
[05:14] *** TEttinger joined
[05:18] <TimToady> it's my own fault too; made the error better for list-infix collisions, but that made it much worse for non-list-infix collisions

[05:20] <s34n_> .seen zostay 

[05:20] <yoleaux> I saw zostay 1 Aug 2016 20:56Z in #perl6: <zostay> np, i haven't used bailador in a while myself, i just read the code on github, but something like what i wrote is possible

[05:21] *** TEttinger left
[05:22] *** TEttinger joined
[05:23] <AlexDaniel> I want my own class that will fit everywhere a Str can fit. In other words, how can I subclass a Str? I mean, subclassing is the easy part, how do I make it work? What kind of a build method should I have or something?

[05:23] *** CIAvash joined
[05:24] <s34n_> where does your subclass not work?

[05:26] *** bob778 joined
[05:26] <AlexDaniel> m: class MyStr is Str {}; say MyStr.new.chars # OK, but what about having an actual string in there?

[05:26] <camelia> rakudo-moar f1313d: OUTPUT«0␤»

[05:26] <AlexDaniel> m: class MyStr is Str {}; say MyStr.new(“test”).chars # I've tried a couple of things to make this work but nothing so far

[05:26] <camelia> rakudo-moar f1313d: OUTPUT«Default constructor for 'MyStr' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»

[05:28] *** bob777 left
[05:28] *** roguelazer left
[05:28] *** bob778 is now known as bob777

[05:28] <s34n_> m: Str.new("test").chars # You subclass works as well as Str works

[05:28] <camelia> rakudo-moar f1313d: OUTPUT«Default constructor for 'Str' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»

[05:30] <llfourn> looks like Str doesn't have its own .new

[05:30] <llfourn> I thought it did.

[05:30] <CIAvash> m: class MyStr is Str {}; say MyStr.new(value => “test”).chars

[05:30] <camelia> rakudo-moar f1313d: OUTPUT«4␤»

[05:30] <ShimmerFairy> llfourn: it does, it's just the default one :)

[05:30] <llfourn> ShimmerFairy: that's what I meant :)

[05:30] <AlexDaniel> CIAvash: oh wow

[05:30] *** roguelazer joined
[05:32] <llfourn> mmhmm. It has its own BUILD. https://github.com/rakudo/rakudo/blob/nom/src/core/Str.pm#L27

[05:32] <llfourn> (though it's a submethod so maybe that's not it)

[05:34] <llfourn> m: "Life, the Universe, and Everything".WHY.say # -_-

[05:34] <camelia> rakudo-moar f1313d: OUTPUT«42␤»

[05:45] <s34n_> that's cute. but worries me a bit

[05:45] <s34n_> are there a lot of easter eggs like that in perl6?

[05:45] *** cpage_ joined
[05:45] <llfourn> I don't think there's a lot

[05:46] <llfourn> we got rid of the Date.new == christmas by default before release I think

[05:46] <s34n_> what could ever go wrong, eh?

[05:46] <ShimmerFairy> Which I still think was unnecessary :P

[05:46] *** TEttinger left
[05:46] <llfourn> ShimmerFairy: let's not go there :P

[05:47] <ShimmerFairy> You started it :P :P

[05:59] *** TEttinger joined
[06:01] *** s34n_ left
[06:02] *** waghso joined
[06:02] *** NEveD left
[06:03] *** TEttinger left
[06:04] *** waghso left
[06:07] *** harmil left
[06:08] *** NEveD joined
[06:12] *** NEveD left
[06:17] *** ufobat joined
[06:17] *** NEveD joined
[06:18] *** Sgeo_ joined
[06:20] *** Sgeo left
[06:21] *** TEttinger joined
[06:28] *** firstdayonthejob joined
[06:30] *** andrzejku left
[06:34] *** Sgeo__ joined
[06:36] *** Sgeo_ left
[06:39] *** firstdayonthejob left
[06:39] *** abraxxa joined
[06:40] *** CIAvash left
[06:45] *** quester left
[06:52] *** sno left
[06:54] *** rmmm left
[06:55] *** rmmm joined
[06:59] *** rmmm left
[07:00] *** rmmm joined
[07:02] *** CIAvash joined
[07:04] *** rmmm left
[07:09] *** quester joined
[07:11] *** darutoko joined
[07:12] * lizmat clickbaits https://p6weekly.wordpress.com/2016/08/01/2016-31-an-end-of-an-era/

[07:12] *** rmmm joined
[07:12] <ufobat> good morning :)

[07:13] <ufobat> clickbait++

[07:13] *** jargan is now known as jast

[07:14] <moritz> lizmat++ # p6weekly

[07:30] <abraxxa> can you subscribe via rss to p6weekly?

[07:30] <abraxxa> seems so ;)

[07:36] *** espadrine joined
[07:36] *** bjz joined
[07:38] *** sno joined
[07:38] *** Actualeyes left
[07:39] *** zakharyas joined
[07:42] *** pdcawley joined
[07:45] *** rindolf joined
[07:52] *** dakkar joined
[07:53] *** Rawriful joined
[07:54] *** Actualeyes joined
[07:58] *** TEttinger left
[08:05] *** jonas2 joined
[08:14] *** japanoise joined
[08:16] *** cuonglm joined
[08:16] *** paraboli` joined
[08:16] *** [Sno] joined
[08:17] *** zostay left
[08:17] *** zostay joined
[08:17] <cuonglm> Hi, I opened a ticket on RT, it's marked as 'open' https://rt.perl.org/Public/Bug/Display.html?id=127370

[08:17] *** parabolize left
[08:18] *** Cabanossi left
[08:18] <cuonglm> But it seems it wasn't notied much

[08:18] *** jdv79 left
[08:19] *** CIAvash left
[08:19] *** sno left
[08:20] *** jdv79 joined
[08:21] *** tomboy64 joined
[08:21] *** Fleurety left
[08:22] *** Cabanossi joined
[08:22] *** espadrine left
[08:25] *** Fleurety joined
[08:26] <moritz> such things happen when there are many more users than developers

[08:27] <cuonglm> moritz: Yep, so I intend to make the patch myself

[08:28] <moritz> cuonglm: that's great!

[08:29] <cuonglm> moritz: Thanks. But I need someone to help me zoning the code 

[08:30] <cuonglm> I have looked into IO::Handle lines() method https://github.com/rakudo/rakudo/blob/nom/src/core/IO/Handle.pm#L550

[08:31] <cuonglm> it sounds like I have to take a look into rakudo compiler code

[08:31] <cuonglm> Would you mind pointing me out :)

[08:32] *** domm left
[08:32] *** domm joined
[08:33] <lizmat> could this be the issue that when chomping, MoarVM doesn't see the difference between an EOF and an empty line at the end?

[08:38] *** bisectable left
[08:38] *** committable left
[08:38] <cuonglm> lizmat: Doing `perl6 -pe '' /proc/1/statm | od -t a`

[08:38] <cuonglm> you see perl6 produces a bulk of `nl`

[08:39] <moritz> cuonglm: is the problem that /proc/1/statm is somehow special because it's a device, or is the problem that the contents might be binary?

[08:39] *** movl left
[08:40] <moritz> oh, doesn't seem binary

[08:40] *** pierre_ joined
[08:40] *** bisectable joined
[08:40] <moritz> cuonglm: so, what you should do: we have some low-level primiitves for working with files, nqp::open, nqp::readlinefh and such

[08:40] *** committable joined
[08:41] <moritz> cuonglm: try reading the file with these primitives. If that works, you know that the problem is in rakudo. If not, it's in one of the levels below

[08:42] <cuonglm> moritz: Thanks, I will take a look 

[08:43] <cuonglm> For your previous question, /proc/1/statm isn't a device nor binary

[08:44] <moritz> Perl 6 doesn't seem to be the only one having problems with it :(

[08:44] <moritz> $ file /proc/1/statm

[08:44] <moritz> /proc/1/statm: empty

[08:45] <cuonglm> `/proc` is peusudo file system, /proc files appear as text file when stat()/fstat() is concerned, but they behave differently 

[08:45] *** trnh joined
[08:47] <cuonglm> their content is dynamic, so you can't do two read() syscall on them, the second one will return 0

[08:47] <cuonglm> http://lxr.free-electrons.com/source/kernel/sysctl.c#L2138

[08:48] <cuonglm> moritz: in my experience, only perl6 goes into infinitive loop

[08:49] <cuonglm> perl, python, ruby ..., *nix shell don't

[08:49] <psch> cuonglm: did you try node.js?

[08:49] <psch> i don't know how much libuv deals with file IO, but that's what we share with node

[08:49] <psch> libuv that is, not file IO :)

[08:50] <moritz> cuonglm: so, did you try the thing with nqp::open etc.?

[08:51] <jnthn> Also, does it work if you slurp the file, vs. reading it line by line?

[08:51] <cuonglm> moritz: I didn't, will try it tonight (I'm in UTC +7)

[08:51] *** tadzik joined
[08:52] <jnthn> I'm a bit suspicious of the stat/seek stuff going on here: https://github.com/MoarVM/MoarVM/blob/master/src/io/syncfile.c#L226

[08:52] <dalek> bisectbot/perl6-rewrite: 22079c6 | (Aleks-Daniel Jakimenko-Aleksejev)++ | / (2 files):

[08:52] <dalek> bisectbot/perl6-rewrite: Perl 6 rewrite of committable

[08:52] <dalek> bisectbot/perl6-rewrite: 

[08:52] <dalek> bisectbot/perl6-rewrite: The base class was rewritten also, which means that it wont be too hard

[08:52] <dalek> bisectbot/perl6-rewrite: to make bisectable and benchable work.

[08:52] <dalek> bisectbot/perl6-rewrite: 

[08:52] <dalek> bisectbot/perl6-rewrite: Basically it is a 1-to-1 port, so further improvements are expected.

[08:53] <dalek> bisectbot/perl6-rewrite: 

[08:53] <dalek> bisectbot/perl6-rewrite: This bot is now fully functional. The only missing parts are:

[08:53] <dalek> bisectbot/perl6-rewrite:  * commit b19c8e2

[08:53] <dalek> bisectbot/perl6-rewrite:  * It does not trigger on “commit:” yet, which is not needed at this point

[08:53] <dalek> bisectbot/perl6-rewrite:    given that we will be relying on perl 5 version of committable until perl 6

[08:53] <dalek> bisectbot/perl6-rewrite:    version is proven stable.

[08:53] <dalek> bisectbot/perl6-rewrite: review: https://github.com/perl6/bisectbot/commit/22079c6118

[08:54] *** quester left
[08:54] <cuonglm> jnthn: using `$fh.slurp-rest` worked

[08:55] <dalek> bisectbot: 22079c6 | (Aleks-Daniel Jakimenko-Aleksejev)++ | / (2 files):

[08:55] <dalek> bisectbot: Perl 6 rewrite of committable

[08:55] <dalek> bisectbot: 

[08:55] <dalek> bisectbot: The base class was rewritten also, which means that it wont be too hard

[08:55] <dalek> bisectbot: to make bisectable and benchable work.

[08:55] <dalek> bisectbot: 

[08:55] <dalek> bisectbot: Basically it is a 1-to-1 port, so further improvements are expected.

[08:55] <dalek> bisectbot: 

[08:55] <dalek> bisectbot: This bot is now fully functional. The only missing parts are:

[08:55] <dalek> bisectbot:  * commit b19c8e2

[08:55] <dalek> bisectbot:  * It does not trigger on “commit:” yet, which is not needed at this point

[08:55] <dalek> bisectbot:    given that we will be relying on perl 5 version of committable until perl 6

[08:55] <dalek> bisectbot:    version is proven stable.

[08:55] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/22079c6118

[08:55] <dalek> bisectbot: afdb8b8 | (Aleks-Daniel Jakimenko-Aleksejev)++ | / (2 files):

[08:55] <AlexDaniel> woah woah

[08:55] <dalek> bisectbot: Merge branch 'perl6-rewrite'

[08:55] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/afdb8b8ac3

[08:55] <AlexDaniel> dalek: no need to repeat that, right? :)

[08:56] <cuonglm> psch: nodejs works

[08:56] *** CIAvash joined
[08:57] <cuonglm> psch: The code I tried http://pastebin.com/cPx1i5f2

[08:58] <cuonglm> jnthn: After doing `slurp-rest`, I did $fh.lines, it returned

[08:58] <cuonglm> (                                                                                                    ...)

[09:00] <jnthn> cuonglm: OK, then perhaps try doing away with the lines I pointed at to see if that resolves it.

[09:02] <cuonglm> jnthn: thanks

[09:03] <dalek> bisectbot: 1298585 | (Aleks-Daniel Jakimenko-Aleksejev)++ | Perl6IRCBotable.pm:

[09:03] <dalek> bisectbot: Make sure to chdir back in perl 5 base class

[09:03] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/1298585ce9

[09:03] *** RabidGravy joined
[09:10] *** rindolf left
[09:10] <dalek> whateverable: 9fc484b | (Aleks-Daniel Jakimenko-Aleksejev)++ | / (2 files):

[09:10] <dalek> whateverable: Repo moved

[09:10] <dalek> whateverable: 

[09:10] <dalek> whateverable: Previous name is definitely no longer relevant, but there are probably even

[09:10] <dalek> whateverable: better ways to call this repo. Suggestions are welcome!

[09:10] <dalek> whateverable: 

[09:10] <dalek> whateverable: .oO( “battlebots”? :P )

[09:10] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/9fc484b616

[09:11] <moritz> AlexDaniel: excutioner!

[09:11] <moritz> it, like, executes code

[09:12] <AlexDaniel> yeah, something like that

[09:13] <AlexDaniel> “*able” is a bit off because there's also huggable and buggable…

[09:14] <Rawriful> Hey guys, I'm sorta interested in perl6 but I don't really know it's strengths in terms of *why* I should use it. Can anyone point me to a blog post or tell me perl6 strengths (e.g Rust is about memsafety, scala functional, python readability/batteries included). What makes perl6 standout?

[09:15] <Rawriful> or perl in general.

[09:15] <AlexDaniel> Rawriful: maybe this https://docs.perl6.org/language/faq#Why_should_I_learn_Perl_6?_What%27s_so_great_about_it?

[09:15] <moritz> Rawriful: excellent Unicode support, built-in grammars for parsing, high-level concurrency constructs (no direct fiddling with locks and threads anymore)

[09:16] <moritz> Rawriful: but all in all it's simply a language that's written with the programmer in mind: very helpful error messges, shortcuts where you need them etc.

[09:16] <AlexDaniel> moritz: you can still fiddle with locks and threads if you want to :P

[09:16] <Rawriful> So it's a bit more of a pragmatic lang? When you want to get things done and do it quick.

[09:17] *** xinming left
[09:17] <AlexDaniel> yeah

[09:17] *** M-Illandan joined
[09:17] *** Matthew[m] joined
[09:18] *** xinming joined
[09:18] <Rawriful> Awesome and that link is super helpful

[09:18] <Rawriful> Thanks guys :)

[09:18] <AlexDaniel> Rawriful: sure. If you have any other questions, feel free to ask!

[09:54] *** mcmillhj joined
[09:59] *** mcmillhj left
[10:08] *** tbrowder joined
[10:15] *** tx0h_ joined
[10:17] <cuonglm> If I make change to moar, must I recompile it invidually?

[10:17] *** zacts joined
[10:17] <moritz> yes

[10:18] <moritz> on the plus side, you typically don't have to recompile rakudo after you changed moarvm

[10:18] <moritz> unless some APIs changed

[10:18] <cuonglm> Doing `make` and `make install` from rakudo root repo make no changes

[10:18] <moritz> a "make install" in MoarVM should be enough

[10:18] <moritz> cuonglm: also, #perl6-dev exists :-)

[10:18] <cuonglm> moritz: greate, thanks

[10:18] *** tx0h left
[10:19] *** tx0h_ is now known as tx0h

[10:21] *** cuonglm left
[10:21] *** paraboli` is now known as parabolize

[10:22] *** cgfbee joined
[10:31] *** bpmedley left
[10:35] *** mcmillhj joined
[10:39] *** canopus left
[10:40] *** mcmillhj left
[10:43] *** bpmedley joined
[10:47] *** canopus joined
[10:49] *** mcmillhj joined
[10:52] *** felher left
[10:54] *** mcmillhj left
[10:57] *** labster left
[10:58] *** felher joined
[10:59] *** ovibos joined
[11:07] *** kurahaupo left
[11:10] *** felher left
[11:16] *** sena_kun joined
[11:17] *** felher joined
[11:19] *** pierre_ left
[11:21] *** wamba joined
[11:26] *** mcmillhj joined
[11:30] *** rindolf joined
[11:31] *** mcmillhj left
[11:36] *** itaipu joined
[11:50] <sena_kun> .

[11:50] <yoleaux> 00:16Z <AlexDaniel> sena_kun: the output is very ugly because of this: https://github.com/perl6/doc/issues/710

[11:50] <yoleaux> 00:17Z <AlexDaniel> sena_kun: and the situation got even worse when another “Chat with us” link got added. The thing is, these links are on *every* page, so the tool is nice enough to warn about it every time… I will update it per your request but yeah…

[11:50] <yoleaux> 00:24Z <AlexDaniel> sena_kun: ah, just found that I can --suppress-temp-redirects. OK then, will update shortly

[11:50] <yoleaux> 00:28Z <AlexDaniel> sena_kun: ah no, I need -b option instead. Anyway, it will be OK.

[11:58] *** lambd0x joined
[12:04] *** itaipu left
[12:14] *** kid51 joined
[12:15] *** pmurias joined
[12:22] *** maybekoo2 joined
[12:22] *** cyphase left
[12:24] <sena_kun> AlexDaniel, thanks!

[12:26] <lambd0x> people is there a simpler way to iterate through a multidimensional array? So far I know how to do it like this:  

[12:26] <lambd0x> my @array[2;2;2]; for 0..1 -> $a { for 0..1 -> $b { for 0..1 -> $c { say @array[$a;$b;$c];}}}

[12:26] <lambd0x> m: my @array[2;2;2]; for 0..1 -> $a { for 0..1 -> $b { for 0..1 -> $c { say @array[$a;$b;$c];}}}

[12:26] <camelia> rakudo-moar f568db: OUTPUT«(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤»

[12:26] <lambd0x> ?

[12:27] *** cyphase joined
[12:27] <masak> lambd0x: ¿

[12:28] *** pierre_ joined
[12:28] <lambd0x> masak: haha

[12:28] <masak> lambd0x: well, you could write `for 0..1 X 0..1 X 0..1 -> ($a, $b, $c)`

[12:28] *** wamba left
[12:29] <[Coke]> ("rakudo star does, regular rakudo doesn't) - This means there's a module that you can install that is bundled with R*, or you can install it yourself. Not that the compiler can't do it.

[12:29] <masak> m: my @array[2;2;2]; for @array { .say }

[12:29] <camelia> rakudo-moar f568db: OUTPUT«(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤»

[12:29] <masak> lambd0x: that seems pretty straightforward, too ;)

[12:29] <lambd0x> seriously?

[12:29] <lambd0x> yes, indeed.

[12:31] <lambd0x> I'm just asking for there's always a more straighforward way of doing things

[12:31] <moritz> m: my @array[2;2;2]; for @array.pairs { say .perl }

[12:31] <camelia> rakudo-moar f568db: OUTPUT«((0, 0, 0)) => Any␤((0, 0, 1)) => Any␤((0, 1, 0)) => Any␤((0, 1, 1)) => Any␤((1, 0, 0)) => Any␤((1, 0, 1)) => Any␤((1, 1, 0)) => Any␤((1, 1, 1)) => Any␤»

[12:31] <moritz> lambd0x: that's an iteration over they indexes and values at the same time

[12:32] <moritz> m: my @array[2;2;2]; for @array.kv { say .perl }

[12:32] <camelia> rakudo-moar f568db: OUTPUT«(0, 0, 0)␤Any␤(0, 0, 1)␤Any␤(0, 1, 0)␤Any␤(0, 1, 1)␤Any␤(1, 0, 0)␤Any␤(1, 0, 1)␤Any␤(1, 1, 0)␤Any␤(1, 1, 1)␤Any␤»

[12:32] <lambd0x> [Coke]: moritz .pais does what?

[12:32] <lambd0x> exatcly...

[12:32] <moritz> lambd0x: return a list of Pairs :-)

[12:32] <lambd0x> ah

[12:32] <lambd0x> moritz: nice :)

[12:32] <lambd0x> so index and value

[12:32] <moritz> m: my @array[2;2;2]; for @array.pairs -> :key($x, $y, $z), $value { say $value }

[12:32] <camelia> rakudo-moar f568db: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse named parameter; couldn't find right parenthesis␤at <tmp>:1␤------> 3rray[2;2;2]; for @array.pairs -> :key($x7⏏5, $y, $z), $value { say $value }␤»

[12:33] <moritz> m: my @array[2;2;2]; for @array.pairs -> :key ($x, $y, $z), $value { say $value }

[12:33] <camelia> rakudo-moar f568db: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3my @array[2;2;2]; for @array.pairs -> :7⏏5key ($x, $y, $z), $value { say $value }␤    expecting any of:␤        formal parameter␤        named parameter␤»

[12:33] *** kid51 left
[12:33] <moritz> m: my @array[2;2;2]; for @array.pairs -> (:$key ($x, $y, $z), :$value) { say $value }

[12:33] <camelia> rakudo-moar f568db: OUTPUT«(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤»

[12:33] <moritz> m: my @array[2;2;2]; for @array.pairs -> (:$key ($x, $y, $z), :$value) { say "$x:$y:$z => ", $value }

[12:33] <camelia> rakudo-moar f568db: OUTPUT«0:0:0 => (Any)␤0:0:1 => (Any)␤0:1:0 => (Any)␤0:1:1 => (Any)␤1:0:0 => (Any)␤1:0:1 => (Any)␤1:1:0 => (Any)␤1:1:1 => (Any)␤»

[12:33] *** itaipu joined
[12:34] <moritz> I don't know if I've ever unpacked signatures two levels deep before :-)

[12:35] <lambd0x> moritz: It's rather uncommon unless you reallyhave somthing in mind. 

[12:35] <lambd0x> Thanks guys.

[12:36] *** sena_kun left
[12:36] *** ShimmerFairy left
[12:36] *** kid51 joined
[12:36] <lambd0x> moritz: the ':' in front of some gives which special meaning to the setence?

[12:36] <lambd0x> *some vars

[12:37] <perlpilot> lambd0x: they are named parameters

[12:40] <lambd0x> perlpilot: and what do they mean in this context?

[12:41] <perlpilot> m: my @array[2;2;2]; for @array.pairs -> (:$value, :$key ($x, $y, $z)) { say "$x:$y:$z => ", $value }     # for example  :)

[12:41] <camelia> rakudo-moar f568db: OUTPUT«0:0:0 => (Any)␤0:0:1 => (Any)␤0:1:0 => (Any)␤0:1:1 => (Any)␤1:0:0 => (Any)␤1:0:1 => (Any)␤1:1:0 => (Any)␤1:1:1 => (Any)␤»

[12:42] <perlpilot> lambd0x: a Pair has 2 attrs, a key and a value.  moritz did a structural mapping from the Pairs attrs, to named vars.

[12:42] <DrForr> 10 people now in the Perl 6 training class @YAPC.

[12:42] <lambd0x> yes yes...

[12:43] <lambd0x> perlpilot: Am asking for so far I've just seem and used : for adverbs no variables

[12:43] <lambd0x> *not.

[12:46] <perlpilot> DrForr: Tell them #perl6 says "hi"  :-)

[12:46] <DrForr> I imagine most of us on the channel will be at the conference :)

[12:46] <masak> m: say "tell them camelia says 'hi'"

[12:46] <camelia> rakudo-moar f568db: OUTPUT«tell them camelia says 'hi'␤»

[12:50] <lambd0x> ahahha

[12:50] <masak> m: say get

[12:50] <camelia> rakudo-moar f568db: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall␤»

[12:51] * masak leaves the newbies to chew on that one :P

[12:51] <lambd0x> moritz: loved really your solution for my code. 1 line for 8 lines. haahaha

[12:52] <masak> m: my @array[2;2;2] = 1..8

[12:52] <camelia> rakudo-moar f568db: OUTPUT«Assignment to array with shape 2 2 2 must provide structured data␤  in block <unit> at <tmp> line 1␤␤»

[12:52] <masak> ...how can I "pour" the 1..8 into the structured array?

[12:53] <perlpilot> masak++  I was wondering the same thing a few minutes ago

[12:53] <masak> I have no reason for asking. I'm just curious.

[12:53] <moritz> .oO( @array.floodfill(1..8) )

[12:53] <psch> m: $_ = $++ for my @a[2;2;2]; say @a.perl

[12:53] <camelia> rakudo-moar f568db: OUTPUT«Array.new(:shape(2, 2, 2), [[0, 1], [2, 3]], [[4, 5], [6, 7]])␤»

[12:53] <jdv79> oh its a yapc now?

[12:53] <perlpilot> psch: not very satisfying

[12:53] <masak> psch: that's cool for this problem, but doesn't feel like a general solution

[12:54] <[Coke]> I thought we were supposed to say "TPC" these days. :)

[12:54] <perlpilot> jdv79: YAPC::EU

[12:54] <psch> oh, i agree.  it's also a misleading idiom in general

[12:54] <psch> it's the only thing i could think of though vOv

[12:54] <masak> though `$_ = @oldarray[$++] for @shaped-array` gets you pretty far

[12:54] <masak> but it doesn't feel very clear or idiomatic

[12:54] <lambd0x> indeed.

[12:55] * moritz finds TPC about as obscure as YAPC

[12:55] <psch> (i'm saying "for my ..." is misleading, although maybe "nuanced" is the better word)

[12:55] <arnsholt> One issue with @shaped-array = 1..8 is whether you want column-major or row-major semantics

[12:55] <masak> arnsholt: didn't think of that, but my instinct says row-major unless you specify otherwise

[12:55] <masak> because that's how the rest of Perl 6 works

[12:55] <perlpilot> In P5 PDL, you can say sequence(2,2,2); it would be nice to have something like that in P6

[12:56] <arnsholt> I guess people will mostly want row-major, but there's always going to be that one Fortran programmer who expects column-major =)

[12:56] <masak> yes, definitely

[12:56] <arnsholt> masak: I agree, row-major is going to be 90% (at least?) of what people want

[12:56] <masak> there might even be other use cases, except for "I'm that one FORTRAN programmer" :P

[12:57] <arnsholt> Presumably =D

[12:57] <jnthn> m: my @array[2;2;2] Z= 1..8; say @array

[12:57] <camelia> rakudo-moar f568db: OUTPUT«[[[1 2] [3 4]] [[5 6] [7 8]]]␤»

[12:57] <perlpilot> arnsholt: providing one good way and some operators to get you the other things will take you quite far I think

[12:58] <perlpilot> jnthn++

[12:58] <masak> jnthn++

[12:58] <lambd0x> jnthn+++ 

[12:58] <masak> that's even... logical... I *think*... :P

[12:58] <lambd0x> :)

[12:58] *** mcmillhj joined
[12:58] <lambd0x> and simple.

[12:58] <arnsholt> Ooooooh

[12:58] <arnsholt> Trust the implementor to know how =D

[12:58] <perlpilot> I mostly think of zipping rvalues, not lvalues.

[12:59] <arnsholt> Yeah, I'd never think to zip an lvalue

[12:59] <lambd0x> jnthn: How did you come to think about this really...

[12:59] <lambd0x> haha

[12:59] <masak> lambd0x: he implemented it

[12:59] <masak> perlpilot: many times when Perl 5 and Perl 6 surprise me, it's by using as an lvalue something that I'd only thought of as an rvalue

[12:59] <arnsholt> (For values of "it" being more or less everything from the run-time library down to virtual machine)

[13:00] <lambd0x> masak: convinient. 

[13:00] <lambd0x> :P

[13:00] <masak> lambd0x: yes, it's a good way to learn about something

[13:01] <lambd0x> Like, I've learned a lot just chatting for these 20 minutes or so..

[13:01] *** hwcomcn joined
[13:01] <perlpilot> lambd0x: that's what #perl6 is all about :)

[13:01] <masak> arnsholt: the "it" I was thinking of here was "multidim array support" :)

[13:01] *** hwcomcn left
[13:01] <masak> lambd0x: every day is like that here. well, almost

[13:01] <lambd0x> perlpilot: Have to agreee.

[13:01] <arnsholt> masak: Yeah, I know. I just felt the rest of it had to be acknowledged as well =)

[13:01] <lambd0x> masak: Yes, most of them tend to.

[13:02] *** hwcomcn joined
[13:02] <arnsholt> Mostly like that. Except when it's wall-to-wall puns

[13:02] <perlpilot> arnsholt: even that is educational ;)

[13:02] <arnsholt> FSVO of educational, definitely

[13:02] <arnsholt> Not to mention hilarious

[13:03] *** sena_kun joined
[13:03] <masak> arnsholt: "wall-to-*wall* puns"? really? :P

[13:03] <masak> that only happens when both TimToady and quietfanatic are here at the same time

[13:03] <perlpilot> heh, masak++ beat me to it

[13:04] <masak> it was a low-hanging wall

[13:04] <arnsholt> *groan*

[13:05] <lambd0x> perlpilot: I was kinda lost here in the beggining because all I saw was m: ... rakudo output and so on, so on... hahah

[13:05] <masak> arnsholt: I could go on like this wall day long

[13:05] * masak .oO( but I walln't )

[13:07] <lambd0x> It's possible to get used.

[13:13] <masak> lambd0x: anyway, if you're new here... welcome to #perl6!

[13:13] <masak> make yourself at home

[13:16] <lambd0x> masak: It has been a month since I started to learn Perl6 using the rakudo compiler. 

[13:17] <lambd0x> But was using mostly the docs in perl6.org. Found out here to be a better source for learning and finding good people to talk about it :)

[13:17] <masak> aye, that's my experience too

[13:17] <masak> not because of the docs -- they're nice -- but because interaction and feedback are worth a lot

[13:17] <lambd0x> masak: :D

[13:19] <lambd0x> masak: Exatly. But considering that Perl6 is so antagonised by it's performance aspect, it's been growing nice though..

[13:19] *** AlexDaniel left
[13:19] <lambd0x> *exactly.

[13:19] *** skids joined
[13:20] <masak> lambd0x: it's also significantly faster now than earlier

[13:20] <masak> not yet blazingly fast, mind. but a lot faster.

[13:21] <arnsholt> So much faster...

[13:21] <lambd0x> masak: Yes, I've noticed this I started programming with rakudo perl6 of june, the july version is better.

[13:21] <arnsholt> I remember when the JVM backend was the fastest to compile Rakudo

[13:22] <lambd0x> arnsholt: How long ago was that?

[13:22] *** NEveD left
[13:22] <[Coke]> pre Moar, no doubt.

[13:23] <masak> what's the state of JVM nowadays?

[13:23] <psch> j: say "kinda worky"

[13:23] <masak> I remember it ran pretty fast, once you got over startup and once everything JITted

[13:23] <camelia> rakudo-jvm cd19db: OUTPUT«kinda worky␤»

[13:23] <psch> oh, performance

[13:23] <arnsholt> lambd0x: Two, maybe three years ago? Not sure, to be honest =D

[13:23] <psch> i never check that :)

[13:23] <masak> I guess I should use rakudo-jvm some more...

[13:23] <psch> still too many semantic problems

[13:24] *** smls joined
[13:24] <tadzik> I remember nom being new :D

[13:24] <arnsholt> Yeah, I think it's sorta functional, but suffers from lack of care and feeding since Moar took over as the primary backend

[13:24] <tadzik> and alpha being sometimes useful

[13:24] <arnsholt> tadzik: Me too!

[13:24] <arnsholt> And taking some time to acclimatizing to the primary branch not being master! =D

[13:24] *** pmurias left
[13:25] <tadzik> :D

[13:25] *** grondilu joined
[13:25] *** itaipu left
[13:28] <lambd0x> masak: Moar is more complete looking at that page of thngs that are done through all the different compilers that implements perl6

[13:28] <lambd0x> forgot the link...

[13:28] <lambd0x> ahaha

[13:29] <lambd0x> *things.

[13:31] <lambd0x> https://perl6.org/compilers/features here. Although there's not all of the implementations I think, is there guys?

[13:32] <[Coke]> lambd0x: there's 1 implementation, 2 backends, that's it.

[13:32] *** cdg joined
[13:32] <[Coke]> niecza is unmaintained and predates some major rewrites at this point.

[13:33] <ilmari> [Coke]: 2.5 backends, no? or doesn't js count?

[13:33] <arnsholt> JS is only NQP at the moment, I think

[13:33] <[Coke]> ilmari: there is no js backend for rakudo yet

[13:33] <gfldex> and it counts rather slowly :)

[13:33] <ilmari> ah

[13:33] <[Coke]> ilmari: there's a js backend for -nqp-

[13:36] <smls> Is there a nicer way than   { [*] |$_ }  to write a lambda that takes an array of numbers and returns the product?

[13:36] <smls> For the sum one can use  *.sum  (whatever code), but there is no method .product

[13:37] <lambd0x> Oh, ok. Question: Why is that Parrot backend was dropped? I read some docs over the Internet saying it is very good from 6 years ago I think...

[13:38] <lambd0x> So I never undestood really the reason.. for that and the construction over nothing of MoarVM...

[13:38] <DrForr> See the 'from 6 years ago' bit there :)

[13:39] <grondilu> Parrot was great because it existed and was better than Pugs and Niecza

[13:39] <[Coke]> lambd0x: parrot had different design goals than "be the best backend for perl6"

[13:40] <[Coke]> so there was some painful work at the boundaries between the systems that we were able to entirely eliminate with Moar.

[13:40] <tadzik> its selling point was to provide a cross-language compatibility, and it abandoned that idea a some point too

[13:40] <[Coke]> tadzik: I would say never fulfilled, but not abandoned.

[13:41] <tadzik> it did work at some point

[13:41] <tadzik> I don't think it was when I was around, but there was a blogpost with working examples :)

[13:41] <tadzik> I don't remember who it was who kept it working, but he said that the rest of the team kept breaking it all the time, so he gave up on maintaining it

[13:41] <stmuk_> also I think there was expectation parrot would be used outside the perl community

[13:43] <lambd0x> I see. So the purpose of the development used in Parrot was not sufficient for the goals of Rakudo Perl. 

[13:43] *** buggable left
[13:43] *** buggable joined
[13:44] <lambd0x> And to develop MoarVM, someone already had something in done or was completely from scratch? How long did it take until the first official release?

[13:44] <smls> lambd0x: MoarVM was written and optimized specifically for Perl 6. Even after it had only being worked on by one person for a year or so, it was already faster (for Perl 6) than Parrot after all its years of development.

[13:44] *** sergot joined
[13:45] <dalek> doc: a56f0e6 | (Tom Browder)++ | doc/Language/pragmas.pod6:

[13:45] <dalek> doc: fill in such details as are known

[13:45] <dalek> doc: review: https://github.com/perl6/doc/commit/a56f0e6f4f

[13:45] <dalek> doc: bd42216 | (Tom Browder)++ | doc/Language/pragmas.pod6:

[13:45] <dalek> doc: Merge pull request #786 from tbrowder/pragmas

[13:45] <dalek> doc: 

[13:45] <dalek> doc: Add a page for pragmas

[13:45] <dalek> doc: review: https://github.com/perl6/doc/commit/bd4221618b

[13:45] <lambd0x> smls: So initially just was person was working with this backend... He did a awesome job. Who was him?

[13:45] <smls> jnthn

[13:45] <lambd0x> ahhh..

[13:45] <lambd0x> had to be... jnthn 

[13:45] <lambd0x> hahaah

[13:48] <nine> I thought diakopter was pretty involved, too?

[13:48] <smls> Also, I think performance was not the only issue. As I recall, there were some unsolved problems getting Parrot to support all features that Perl 6 needs.

[13:49] <smls> Maybe those problems could have been solved in Parrot, but MoarVM got there faster, and seemingly more effortlessly.

[13:53] <jnthn> diakopter contributed a lot early on to MoarVM too, yes

[13:55] <jnthn> I worked on it alone to get the key data structures in place, the initial GC, interpreter, object system, call frames, etc. diakopter did much of the early work on Unicode support and, once we got threads, GC orchestration, plus many other pieces, though those are the ones I remember most.

[13:56] <jnthn> Spesh (SSA-based dynamic optimization, together with type specialization, inlining, deoptimization etc.) was planned from the start, so much of the early design thought about how to allow that also.

[13:57] <jnthn> But it didn't actaully get implemented until rather later on, when Moar already was being used quite actively.

[13:57] *** cdg left
[13:58] *** cdg joined
[13:58] <tbrowder> ref docs: on the main docs page <http://perl6.org/documentation/> I believe the top title (Perl 6 Documentation) ought to be a link to the canonical (official) docs page <https://docs.perl6.org/>.  In addition, where it is referenced in the bottom doc group, left column, it should have following its name (Perl 6 Documentation) some text or highlight or

[13:58] <tbrowder> footnote indicating it is the canonical (official) doc reference fpr Perl 6.

[14:00] <jnthn> When I started MoarVM I'd actually no idea if I could pull it off. :-) Could I really in a short amount of time make something that would compete with and go on to do better than something many folks had contributed to over the years? So, it stayed a fairly private project until I was fairly comfortable it would do OK. :-)

[14:01] <jnthn> I had the huge advantages of knowing what Parrot's pain points had been so far, knowing what Perl 6 largely looked like (much less known when Parrot started and for some years), and the various other dynlang VMs that had popped up over the years.

[14:02] <jnthn> So it's worth keeping in mind that I started with something of an unfair advantage.

[14:02] *** cdg left
[14:08] <perlpilot> jnthn: even with the "unfair advantage", I think the primary thing you had that Parrot didn't was focus on providing a backend for Perl 6.  That alone made a huge difference IMHO.

[14:10] <jnthn> perlpilot: That's also true.

[14:10] <jnthn> At the same time, I knew I wanted to keep coupling between Rakudo/NQP and MoarVM relatively loose, so there was still an amount of API design that wanted doing :)

[14:12] *** margeas joined
[14:17] <dalek> doc: fa83f13 | (Wenzel P. P. Peppmeyer)++ | doc/ (3 files):

[14:17] <dalek> doc: doc use fatal

[14:17] <dalek> doc: review: https://github.com/perl6/doc/commit/fa83f13261

[14:18] *** itaipu joined
[14:19] *** wamba joined
[14:19] *** pmurias joined
[14:21] *** Sgeo__ left
[14:22] <lambd0x> jnthn: Still, you and everyone else that afterwards touched the project...did a very good job independently and that is still something worth a lot. 

[14:24] <lambd0x> for rakudo and everyone else really.. I wouldn't start reading about perl6 if it wasn't because of MoarVM. Because I got intrigued with it's name and what the hack was that basically and here am I :P 

[14:25] <gfldex> and they say we are bad at marketing ...

[14:25] *** nowan_ left
[14:25] <lambd0x> gfldex: hahahaah

[14:28] *** nowan joined
[14:29] *** trnh left
[14:29] *** trnh joined
[14:29] *** trnh left
[14:29] *** trnh joined
[14:32] <sena_kun> gfldex, hi. Maybe this was already discussed, but still. I noticed that our routines-pages automatically form links like "From /type/$type#$method". Since all our method-anchors looks like a "#method_$name", it's obviously a tons of 404. If we form links with "method_" part appended, output of checklink will be almost empty. What can be broken by such change? Here is a diff: http://pastie.org/private/im3aep80wjcvh8cera1vaa

[14:32] <stmuk_> jnthn++ # not only great tech work but good explanation

[14:33] <sena_kun> s/looks/look/

[14:33] <timotimo> also, it's only because of jnthn that i could contribute anything worthwhile :3

[14:34] <timotimo> well, okay, i could probably have contributed stuff to the JIT just from brrt's guidance, too ...

[14:34] *** BrassLantern joined
[14:34] <gfldex> sena_kun: looks ok to me but we need to try to be sure. We can always revert the commit if it doesn't work out. That's what the link checker in debug mode is for.

[14:36] <sena_kun> gfldex, I'm currently running this version locally and recursively walking over it with the checklink. I will play with debug-mode a bit also, and if everything will be okay, I'll commit it then.

[14:40] <lambd0x> Later everyone o/

[14:40] *** lambd0x left
[14:49] * arnsholt is more than usually amused by the shell script idiom `yes "$(fluctuating-command)" | head -n 2`

[14:51] *** hwcomcn left
[14:52] *** kurahaupo joined
[14:53] <timotimo> uh ... does that even do what i think it does?

[14:53] <timotimo> wouldn't it just execute the fluctuating command once and spam its output, then grab the first two lines?

[14:54] <arnsholt> Except it doesn't! =D

[14:54] *** anser joined
[14:54] *** pierre_ left
[14:55] <arnsholt> head closes the fd (in this case the pipe attached to yes's stdout) when it's read its fill, which causes the write to fail and yes to terminate

[14:55] <timotimo> ... so?

[14:55] <arnsholt> So it prints an infinite amount (in the Haskell sense) of the output of a run of the command, of which we print the first two =D

[14:56] <ilmari> but why do you need to copies of the output of the command?

[14:56] <arnsholt> So I get two identical copies of the output of fluctuating-command, rather than two almost identical ones

[14:56] <timotimo> oh, is that what that is for

[14:56] <arnsholt> Because it gets shovelled into a script that generates a (TeX) table for me, which needs two entries

[14:57] <arnsholt> But for this particular row, the cells are identical in pairs (because this particular experimental setup doesn't have an additional bell and whistle the rest do)

[14:57] <arnsholt> So it's actually: yes "$(make -s majority-vote | tail -n 1)" | head -n 2

[14:57] <arnsholt> Which is even uglier

[14:58] <timotimo> ...

[14:59] <timotimo> i sometimes use "echo" to turn multi-line text into one-line text

[15:00] <dalek> doc: f40f638 | Altai-man++ | htmlify.p6:

[15:00] <dalek> doc: Now all our routines links that point to original type page have correct anchor that starts with `method_`

[15:00] <dalek> doc: review: https://github.com/perl6/doc/commit/f40f638965

[15:00] <timotimo> way cool.

[15:00] <arnsholt> Neato!

[15:00] *** harmil_wk joined
[15:01] <arnsholt> timotimo: Anyways, I've one week left of dedicated time (modulo baby) for completing this last chapter of my thesis before I start my new job. I threw pretty code out the window a while ago, in favour of fully embracing the worse-is-betterness of Unix

[15:01] <arnsholt> Whatever gets the job done is my new motto!

[15:02] <timotimo> OK :)

[15:02] <timotimo> as long as you're not sharing that code, it's guaranteed to be not-a-problem

[15:02] <timotimo> when you start sharing code on that basis, that's when it gets a little tricky :)

[15:04] <arnsholt> Yeah. Welcome to academia, where getting a Makefile showing how tings are run is good documentation =)

[15:04] <harmil_wk> So... about bug work. What's a good place to start if I have a trivial number of weekend tuits to spend?

[15:06] *** mcmillhj left
[15:08] <timotimo> hm, good question

[15:08] <sena_kun> .tell AlexDaniel - I'm sorry to bother you again, but since https://github.com/perl6/doc/commit/f40f638965 we need checklink once again. If I'm right, we eliminated almost all output. Can you give me a right command for a checklink? I tried `checklink http://localhost:3000/ -X '.*.(com|org)' -r`, but it seems it has timeout for every request, because I get only one page per second. That's toooo slow. Thanks for your efforts.

[15:08] <yoleaux> sena_kun: I'll pass your message to AlexDaniel.

[15:10] <arnsholt> harmil_wk: The perl6 RT queue is where you want to go

[15:11] <arnsholt> I've no useful hints on how to find manageable bugs though, sadly =(

[15:11] <perlpilot> look for ones tagged with LHF

[15:11] <harmil_wk> Oh nice!

[15:11] <harmil_wk> perlpilot: thanks

[15:11] <smls> Unfortunately, the LHF tag doesn't seem to be used: https://rt.perl.org/Search/Results.html?Format=%27%20%20%20%3Cb%3E%3Ca%20href%3D%22__WebPath__%2FTicket%2FDisplay.html%3Fid%3D__id__%22%3E__id__%3C%2Fa%3E%3C%2Fb%3E%2FTITLE%3A%23%27%2C%0A%27%3Cb%3E%3Ca%20href%3D%22__WebPath__%2FTicket%2FDisplay.html%3Fid%3D__id__%22%3E__Subject__%3C%2Fa%3E%3C%2Fb%3E%2FTITLE%3ASubject%27%2C%0A%27__Status__%27%2C%0A%27%3Cb%3E__CreatedRelative__%3C%2Fb%3E%27%2C%0A%27%

[15:11] <smls> 3Cb%3E__LastUpdatedRelative__%3C%2Fb%3E%27%2C%0A%27__NEWLINE__%27%2C%0A%27%27%2C%0A%27%3Csmall%3E__QueueName__%3C%2Fsmall%3E%27%2C%0A%27__%3Csmall%3E%3C%2Fsmall%3E__%27%2C%0A%27%3Csmall%3E__CreatedBy__%3C%2Fsmall%3E%27%2C%0A%27%3Csmall%3E__LastUpdatedBy__%3C%2Fsmall%3E%27&Order=DESC%7CASC%7CASC%7CASC&OrderBy=LastUpdated%7C%7C%7C&Query=Queue%20%3D%20%27perl6%27%20AND%20Subject%20LIKE%20%27%5BLHF%5D%27%20AND%20%28%20%20Status%20%3D%20%27new%27%20OR%

[15:11] <smls> 20Status%20%3D%20%27open%27%20OR%20Status%20%3D%20%27stalled%27%20%29&RowsPerPage=50

[15:12] <timotimo> oh lord :D

[15:12] <smls> oop, sorry for that

[15:12] <timotimo> buggable: rt

[15:12] <buggable> timotimo, TOTAL: 1355, UNTAGGED: 611, BUG: 414, LTA: 90, JVM: 62, NYI: 32, SEGV: 28, UNI: 25, RFC: 24, PERF: 19, POD: 14, CONC: 11, @LARRY: 10, TODO: 9, PRECOMP: 8, GLR: 6, BUILD: 5, STAR: 4, WEIRD: 3, LTA ERROR: 3, MOARVM: 2, OSX: 2, FEATURE REQUEST: 1, CPP: 1, SPEC: 1, LIST: 1, LHF: 1, SPESH: 1, DOCS: 1, NATIVECALL: 1   Details: http://bug.perl6.party/1470150741.html

[15:12] <timotimo> apparently we have both LTA and LTA ERROR?

[15:12] <harmil_wk> I guess I'll take the @LARRY ones ;-)

[15:12] <smls> here, click the LHF link: https://gist.github.com/smls/eed26639e60f199613495a114856f41c

[15:12] <arnsholt> harmil_wk: https://rt.perl.org/Public/Bug/Display.html?id=127395 might be doable. We already have edit distance help for variable names, so should be doable to make that work for method lookup failures

[15:12] <timotimo> and a single LHF tagged one, it seems?

[15:13] <timotimo> oh, that's a slightly tricky one

[15:13] <timotimo> because the object itself is allowed to handle method lookup; you'll probably want to first check if the metaobject is just ClassHOW without any roles mixed in or anything

[15:14] <timotimo> and not replaced by the user and such

[15:14] <timotimo> and that there's no FALLBACK, or any other such stuff

[15:15] <perlpilot> harmil_wk: maybe start with the LTA ERROR then; they're often uncomplicated

[15:15] *** mcmillhj joined
[15:15] <timotimo> also, it'd be beneficial if the work done to find similar-named methods is only done if the error message actually gets output, not when the error is thrown

[15:15] <timotimo> i don't know if we do that for others, though

[15:18] *** anser left
[15:20] *** itaipu left
[15:20] *** itaipu joined
[15:20] *** mcmillhj left
[15:22] *** zacts left
[15:24] *** acrussell joined
[15:25] <harmil_wk> Do we send docbugs to the same place as rakudobugs, or is that another address?

[15:25] *** mcmillhj joined
[15:26] <llfourn> harmil_wk: doc bugs live on GH

[15:27] <llfourn> https://github.com/perl6/doc/issues

[15:27] *** BrokenRobot joined
[15:28] *** s34n joined
[15:28] <s34n> zostay: ping

[15:28] <zostay> sup?

[15:28] <s34n> I'm interested in your P6W efforts

[15:28] <BrokenRobot> harmil_wk: I have a private list of ticket tags and I have these marked as "Easy"... they may or may not be easy, but take a look: https://gist.github.com/zoffixznet/b7e1e119d14bb652fda313768e12c874

[15:29] *** BrokenRobot is now known as unmatched}

[15:30] <harmil_wk> BrassLantern: thansk

[15:30] <zostay> cool, sadly, i can't work on it this month, but i can answer questions and try to help you

[15:30] <harmil_wk> *thanks

[15:30] <harmil_wk> llfourn: thanks

[15:32] *** maybekoo2 left
[15:35] <unmatched}> Or semi-private, I guess. The tag db is at http://temp.perl6.party/release.db and can be loaded with https://github.com/zoffixznet/perl6-Ticket-Trakr

[15:37] *** cuonglm joined
[15:41] *** khw joined
[15:43] *** abraxxa left
[15:46] *** trnh left
[15:47] <harmil_wk> Aw... I'm made sad. It seems you can't pass around nqp ops as Perl6 functions ;-)

[15:47] <harmil_wk> m: use nqp; my &unboxer = &nqp::p6box_n

[15:47] <camelia> rakudo-moar 3c2849: OUTPUT«Type check failed in assignment to &unboxer; expected Callable but got Any (Any)␤  in block <unit> at <tmp> line 1␤␤»

[15:47] <harmil_wk> That should have been "boxer" but you get the idea

[15:48] <jnthn> no, you can't :)

[15:48] <harmil_wk> I admit, I only have vague ideas of what I was expecting to have happen there.

[15:48] <jnthn> They're not Perl 6 functions :)

[15:48] <jnthn> Or anything functions :)

[15:48] <harmil_wk> They should get autoboxed, it's the Java way! ;-)

[15:49] <unmatched}> m: use nqp; my &unboxer = -> |c { nqp::p6box_n(|c) }; unboxer

[15:49] <camelia> rakudo-moar 3c2849: OUTPUT«This representation (VMHash) cannot unbox to a native num (for type BOOTHash)␤  in block <unit> at <tmp> line 1␤␤»

[15:51] <zostay> s34n, feel free to ask your questions or pm me if you need an introduction

[15:55] *** mcmillhj left
[15:57] *** holyghost left
[16:01] *** djbkd left
[16:02] <timotimo> what are "the P6W efforts"?

[16:02] *** mcmillhj joined
[16:03] <zostay> the software spec formerly known as P6SGI

[16:03] <zostay> which i may refer to as P6WAPI to avoid confusion with P6 Weekly

[16:04] <timotimo> oh

[16:04] <timotimo> if it was actually me who did the weekly, i'd totally rename it TPS Report

[16:04] <unmatched}> P6WASP would sound cooler... P6 Web Application Something-something Programming

[16:05] <hoelzro> I can see the logo already...

[16:05] <timotimo> Perl Six Web App Supercharging Protocol

[16:05] <nine> Web Application Server Programming?

[16:06] <jnthn> Server Protocol, surely :P

[16:07] *** mcmillhj left
[16:10] <dalek> doc: 473fd59 | Altai-man++ | doc/Type/ (52 files):

[16:10] <dalek> doc: All header-like class definitions are written as {} instead of { ... } now. It fixes many docscompilation

[16:10] <dalek> doc: errors at once.

[16:10] <dalek> doc: I've found all definitions using grep and checked them manually, but feel free to revert if needed.

[16:10] <dalek> doc: review: https://github.com/perl6/doc/commit/473fd59978

[16:11] <sena_kun> Ah, nano never makes newlines great.

[16:13] *** acrussell left
[16:14] *** smls left
[16:14] *** mcmillhj joined
[16:14] <jnthn> .oO( Make newlines great again! )

[16:14] <huf> MANGA?

[16:16] <sena_kun> jnthn, I just need to LEARN THIS MAGIT ALREADY, but laziness and command-line git with nano are so tempting.

[16:16] <timotimo> what?

[16:16] *** NEveD joined
[16:17] <jnthn> Sounds a bit magital...

[16:19] *** mcmillhj left
[16:23] * mst thought magit was a type of pokemon tbh

[16:23] <ilmari> magit is very handy

[16:24] <huf> i've heard about magotes, but never magit

[16:24] *** lichtkind joined
[16:25] <sena_kun> It seems there are not so many emacs-users here. (:

[16:26] <huf> i only use it when i'm pointing out a cat in a rather poetic manner

[16:30] *** mcmillhj joined
[16:30] <harmil_wk> From the journal of a background character:

[16:30] <harmil_wk> m: unit class Today; first rule was {do not ask "Doctor who?"}

[16:30] <camelia> rakudo-moar e1c772: ( no output )

[16:31] <harmil_wk> Wow, I camel-cased "Today" without even thinking. :)

[16:32] <cuonglm> jnthn: How should I write a test only run when /proc available

[16:33] <jnthn> cuonglm: Do you have a good way to know when it's available?

[16:33] <nine> cuonglm: why would /proc ever not be available?

[16:33] <jnthn> Windows? :P

[16:34] <nine> jnthn: if that's the reason, there's also a very easy way to detect that ;)

[16:34] *** mcmillhj left
[16:34] <jnthn> Indeed. But anyway, if it's-avaialable { ok ... } else { skip 'No /proc on this platform' } or something like that

[16:35] <cuonglm> nine: /proc is not available anywhere, many *nix don't have it 

[16:35] <cuonglm> jnthn: thanks. And for our discussion earlier, the line you pointed out is the culprit 

[16:36] * cuonglm working on the patch

[16:36] <geekosaur> nine, what of available but possibly not compatible? freebsd /proc is not linux /proc

[16:38] <moritz> write a virus that wipes out all FreeBSD installations? :-)

[16:39] <nine> geekosaur, cuonglm: so wouldn't the better question be "is a specific feature in /proc available"?

[16:40] *** lizmat joined
[16:40] *** dakkar left
[16:41] <jonadab> Didn't OpenBSD remove procfs entirely?

[16:42] *** [Sno] left
[16:42] <cuonglm> nine: right, so in this case, I think check the OS is Linux is best 

[16:43] <jonadab> Then what do you do when systemd subsumes the functionality formerly provided by procfs and two thirds of all Linux distros don't have /proc any more in favor of systemd?

[16:43] <jonadab> ;-)

[16:43] <hoelzro> jj

[16:43] <hoelzro> gah

[16:43] <timotimo> they'd probably have a good reason for that if they did that

[16:43] <timotimo> ZZ

[16:45] *** mcmillhj joined
[16:45] <harmil_wk> I think the number of Linux scripts that rely on /proc would make its deprecation impratical

[16:45] <timotimo> probably

[16:49] <geekosaur> systemd is not going to replace /proc. systemd undoubtedly *relies* on /proc. it's the primary channel for getting information that otherwise lives only in internal kernel structures

[16:49] *** mcmillhj left
[16:53] <timotimo> *shrug*

[16:53] *** mcmillhj joined
[16:55] <jonadab> geekosaur: It was a joke.

[16:55] * geekosaur not especially happy about /proc's scope creep on linux, but it's better than the old freebsd solution (libkvm)

[16:55] <geekosaur> people believe all sorts of stupid things about systemd :/

[16:55] <timotimo> that's right

[16:56] <moritz> geekosaur: systemd eats small children for Breakfast, no? :-)

[16:56] <harmil_wk> Someone on reddit/r/perl getting upset about Perl 6's design goals changing over time and why it hasn't been renamed...

[16:56] <harmil_wk> Response, "I imagine Perl6's name will change right about the time that C++'s name changes to --D. At which point, I expect we'll become Swine 5 :-)"

[16:57] <unmatched}> timotimo: are you dalek's bot master? Would you consider adding https://github.com/perl6/marketing/ to the list of repos announced on #perl6? There's not much there and it probably won't be updated often, but when it is, it'd be handy for people to see those updates to encourage them to use whatever marketing materials we store there.

[16:58] <timotimo> i'm not the botmaster, but i do have root on the machine it's run on

[16:58] <unmatched}> \o/

[16:59] <unmatched}> harmil_wk: which post?

[16:59] <harmil_wk> https://www.reddit.com/r/perl/comments/4upqk8/whats_up_perl/d60zmrv

[17:00] <moritz> unmatched}, timotimo: it's easier to add a web hook in the github repo

[17:02] * unmatched} doesn't know how :(

[17:03] <moritz> unmatched}: I've done it for now; for the record, https://github.com/perl6/marketing/settings/hooks add a hook with URL http://hack.p6c.org:8088/dalek?t=freenode,perl6

[17:03] <moritz> content-type application/x-www-form-urlencoded

[17:04] <moritz> https://github.com/perl6/mu/blob/master/misc/dalek-push.txt has some docs

[17:04] <unmatched}> moritz++ thanks

[17:04] <moritz> if you have any idea about where to link this stuff so that it's easier to discover, please add it :-)

[17:09] <unmatched}> dalek: source

[17:09] <unmatched}> :)

[17:09] <unmatched}> or dalek: help

[17:09] <psch> .help

[17:09] <yoleaux> psch: I'm yoleaux. Type .commands to see what I can do, or see http://dpk.io/yoleaux for a quick guide.

[17:10] <psch> right, that was the other one

[17:10] *** firstdayonthejob joined
[17:10] <TimToady> m: my &prod = &prefix:<[*]>; say prod 1..5

[17:10] <camelia> rakudo-moar e1c772: OUTPUT«120␤»

[17:11] <TimToady> .tell smls you can autogen the function directly: my &prod = &prefix:<[*]>; say prod 1..5

[17:11] <yoleaux> TimToady: I'll pass your message to smls.

[17:11] <TimToady> (one of the last things I hacked in before christmas, as it happens)

[17:15] <dalek> doc: 423a055 | coke++ | doc/Language/pragmas.pod6:

[17:15] <dalek> doc: use nbsp

[17:15] <dalek> doc: review: https://github.com/perl6/doc/commit/423a05596f

[17:15] <dalek> doc: 14a6114 | coke++ | doc/ (2 files):

[17:15] <dalek> doc: remove trailing whitespace

[17:15] <dalek> doc: review: https://github.com/perl6/doc/commit/14a6114a75

[17:18] <dalek> doc: 6304b24 | Altai-man++ | doc/ (10 files):

[17:18] <dalek> doc: Now files that start with 'a' letter can be compiled.

[17:18] <dalek> doc: I'm not sure about Type/IO/Socket/Async, since it contains examples that are running infinitely. Because of that I

[17:18] <dalek> doc: just skipped this pieces of code, but it will be great if someone can find more awesome solution. Rest of the changes

[17:18] <dalek> doc: is trivial: empty bodies for a method signatures, catching of exceptions with formatted output and some skipping for

[17:18] <dalek> doc: console-line command, etc.

[17:18] <dalek> doc: review: https://github.com/perl6/doc/commit/6304b243be

[17:21] <dalek> doc: e17bf57 | Altai-man++ | doc/Type/X/TypeCheck/Assignment.pod6:

[17:21] <dalek> doc: Exception output message was fixed

[17:21] <dalek> doc: review: https://github.com/perl6/doc/commit/e17bf576cc

[17:23] <dalek> doc: 9810f0d | coke++ | util/extract-examples.p6:

[17:23] <dalek> doc: remove trailing whitespace

[17:23] <dalek> doc: review: https://github.com/perl6/doc/commit/9810f0d926

[17:24] <sena_kun> Documentation repository was attacked this evening.

[17:25] <unmatched}> sena_kun: what do you mean attacked?

[17:25] *** Actualeyes left
[17:26] <TimToady> actually, meta autogen was early november, so not as late as I thought...

[17:26] <unmatched}> .oO( *this* evening? ZOMG! We're getting attacked in the future! )

[17:28] <unmatched}> It's pretty crazy.

[17:28] <unmatched}> m: my &lulz = &prefix:<[RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRZ]>; say lulz <trololo>

[17:28] <camelia> rakudo-moar e1c772: OUTPUT«((trololo))␤»

[17:31] <TimToady> .tell smls and the reason we don't have a .product to go with .sum is that .sum can be heavily optimized for huge ranges like sum 1 .. 10¹⁰⁰⁰ whereas heavy use of factorials would probably just cache the sequence from [\*]

[17:31] <yoleaux> TimToady: I'll pass your message to smls.

[17:32] <unmatched}> m: say sum 1 .. 10¹⁰⁰⁰

[17:32] <camelia> rakudo-moar e1c772: OUTPUT«5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000…»

[17:32] <unmatched}> :D

[17:32] *** jonas2 left
[17:32] <unmatched}> m: say (sum 1 .. 10¹⁰⁰⁰).Num

[17:32] <TimToady> m: say (sum 1 .. 10¹⁰⁰⁰).chars

[17:32] <camelia> rakudo-moar e1c772: OUTPUT«Inf␤»

[17:32] <camelia> rakudo-moar e1c772: OUTPUT«2000␤»

[17:33] <unmatched}> m: say (sum 1 .. 10¹⁰⁰⁰⁰⁰⁰⁰).chars

[17:33] <camelia> rakudo-moar e1c772: OUTPUT«(timeout)»

[17:34] <TimToady> it was trying :)

[17:35] <rindolf> Hi all.

[17:35] <unmatched}> \o

[17:36] <rindolf> Which queries were the replies for exactly?

[17:36] <unmatched}> ?

[17:36] <rindolf> Ah, I think I see.

[17:36] <unmatched}> .Num is Inf and .chars is 2000

[17:36] <rindolf> Regarding the "m:" lies

[17:37] <rindolf> unmatched}: ah.

[17:39] <TimToady> it must be using a relatively stupid exponentiator to calculate 10¹⁰⁰⁰⁰⁰⁰⁰ since it's been running 5 minutes and not growing memory much

[17:40] <TimToady> I'm beginning to wonder whether it's actually in an infinite loop

[17:40] *** Tonik joined
[17:41] *** margeas left
[17:42] <TimToady> virtual memory seems to wobble around 200m without long-term growth

[17:42] <unmatched}> m: my $x = 10¹⁰⁰⁰⁰⁰; say now - BEGIN now

[17:42] <camelia> rakudo-moar e1c772: OUTPUT«0.04616005␤»

[17:42] <unmatched}> m: my $x = 10¹⁰⁰⁰⁰⁰⁰; say now - BEGIN now

[17:42] <camelia> rakudo-moar e1c772: OUTPUT«1.9618868␤»

[17:43] <unmatched}> m: say 1.9618/0.046

[17:43] <camelia> rakudo-moar e1c772: OUTPUT«42.647826␤»

[17:43] <unmatched}> m: my $x = 10¹⁰⁰⁰⁰⁰⁰⁰; say now - BEGIN now

[17:43] <camelia> rakudo-moar e1c772: OUTPUT«(timeout)»

[17:45] <TimToady> so maybe I just need to wait another 10 minutes...

[17:49] <gfldex> m: say $?TABSTOP

[17:49] <camelia> rakudo-moar e1c772: OUTPUT«8␤»

[17:50] <unmatched}> m: use MONKEY-SEE-NO-EVAL; sub p { my $t = now; EVAL "10¹" ~ "⁰" x $^a; now - $t }; say (p(0), p(1), p(2), p(3) … ∞)[0..5]

[17:50] <camelia> rakudo-moar e1c772: OUTPUT«===SORRY!===␤Unable to deduce arithmetic or geometric sequence from 0.0056914,0.0050271,0.00517571 (or did you really mean '..'?)␤»

[17:50] <unmatched}> aaww

[17:52] *** acrussell joined
[17:54] *** [Sno] joined
[17:58] <TimToady> actually, it's probably going to take closer to an hour

[18:00] *** BrassLantern left
[18:02] *** JYOTI joined
[18:02] *** JYOTI left
[18:04] <unmatched}> And it'll give 42 as the answer? :P

[18:04] *** holyghost joined
[18:05] <unmatched}> m: say WHY "Life, the Universe, and Everything":

[18:05] <camelia> rakudo-moar e1c772: OUTPUT«42␤»

[18:06] <sena_kun> unmatched}, I was joking about big amount of commits to docs repo(which is good). My jokes today are pretty lame, so don't mind it.

[18:07] <harmil_wk> The intersection between ops defined in Grammar.nqp, ops listed in the "Operators" doc page and ops listed in the "Routines" doc page... is a sort of fractal interface.

[18:07] <unmatched}> harmil_wk: well, Perl 6 has an infinite number of ops :)

[18:08] <unmatched}> m: say [RRRR~] <foo bar>

[18:08] <camelia> rakudo-moar e1c772: OUTPUT«foobar␤»

[18:08] <unmatched}> m: say [RRRRRRRRRRRR~] <foo bar>

[18:08] <camelia> rakudo-moar e1c772: OUTPUT«foobar␤»

[18:08] <unmatched}> etc

[18:08] <unmatched}> Unless I'm misunderstanding what you mean :)

[18:08] *** andrzejku joined
[18:09] <unmatched}> .oO( huh? fractal interface? I better nod and pretend to know what it is so I look smart... )

[18:10] <TimToady> m: say [RRR~] <foo bar>

[18:10] <camelia> rakudo-moar e1c772: OUTPUT«barfoo␤»

[18:10] <TimToady> just checking... :)

[18:10] <harmil_wk> unmatched}: yeah, but it's ops like ∩ that show up in two but not the other, notandthen that only shows up in the Grammar, etc.

[18:10] <TimToady> m: say [RXZXZRXXXXXZZZZR~] <foo bar>

[18:10] <camelia> rakudo-moar e1c772: OUTPUT«(((((((((((((barfoo)))))))))))))␤»

[18:11] <TimToady> notandthen is really just there for the 'without' modifier

[18:11] *** Merovingian joined
[18:12] <timotimo> that's a very helpful metaop

[18:12] <andrzejku> hi

[18:13] <andrzejku> I'm looking for perl friend

[18:13] <TimToady> timotimo: yes, if you want more parens around something

[18:14] <TimToady> andrzejku: we try to be friendly

[18:14] <unmatched}> m: say [RXZXZR[&say]XXXXXZZZZR~] <foo bar>

[18:14] <camelia> rakudo-moar e1c772: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3say [RXZXZR[&say]XXXXXZZZZR~7⏏5] <foo bar>␤    expecting any of:␤        prefix␤        term␤»

[18:14] <unmatched}> andrzejku: have you tried a local Perl mongers group?

[18:14] <unmatched}> andrzejku: http://www.pm.org/

[18:15] <[Coke]> TimToady: NO AND THEN!?

[18:15] <unmatched}> andrzejku: http://www.pm.org/groups/237.html

[18:15] * [Coke] suspects that movie ref may be lost on TimToady.

[18:15] * unmatched} got it :)

[18:15] *** Merovingian left
[18:15] <andrzejku> there no group in my city

[18:15] <andrzejku> :/

[18:15] <TimToady> Dude! Sweet!

[18:16] <unmatched}> :D

[18:16] <unmatched}> andrzejku: that's an awesome reason to start one!

[18:16] *** zakharyas left
[18:16] <[Coke]> TimToady++

[18:16] *** Tonik left
[18:16] <andrzejku> I am not good at perl

[18:16] <andrzejku> I am even not work in Perl

[18:16] <andrzejku> :/

[18:17] <unmatched}> andrzejku: I don't see how that precludes you from starting a Perl Mongers group.

[18:17] <unmatched}> andrzejku: seems there are even instructions for you: http://www.pm.org/start/

[18:17] <pochi> m: say [&infix:<*>] 1,2,3

[18:17] <camelia> rakudo-moar e1c772: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say [&infix:<*>]7⏏5 1,2,3␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifi…»

[18:17] <perlpilot> .oO( <andrzejku> I am not even passion for Perl )

[18:18] <TimToady> m: say [[&infix:<*>]] 1,2,3

[18:18] <camelia> rakudo-moar e1c772: OUTPUT«6␤»

[18:18] <pochi> aha

[18:18] <TimToady> you can't make the [] do two different things

[18:19] <TimToady> note also that you can't extend this to any arbitrary lambda because reductions don't allow internal spaces

[18:19] <pochi> so [[ ... ]] is a special thing, or is it that [ ... ] interprets its content special if it's in []?

[18:19] <andrzejku> I am Perl passionate but right now I learn more

[18:20] <TimToady> (to help distinguish them from [1, 2, 3] and such

[18:20] <andrzejku> C++

[18:20] <unmatched}> TimToady: so that's by design? I saw a ticket last night saying disallowed whitespace is a bug

[18:20] <TimToady> nope

[18:20] <andrzejku> however I want to have a good Perl friend

[18:21] <unmatched}> andrzejku: well, you have ~300 people in here. 

[18:21] <TimToady> maybe you could find a friend and then teach them Perl?

[18:21] <andrzejku> :)

[18:21] <andrzejku> Perl is also not popular in my country

[18:21] <perlpilot> TimToady: what about that earlier [RXZXZR[&say]XXXXXZZZZR~]  ?  It looks like [&whatever] messes up the metas.  Should that be?

[18:22] <unmatched}> andrzejku: well, sounds like if you start a Perl mongers group you can both learn Perl and make it more popular!

[18:22] <TimToady> [&say] is not a meta

[18:22] * TimToady channels MJD

[18:22] <andrzejku> ye, but all of I want it is to have virtual perl friend

[18:22] <andrzejku> :/

[18:22] <unmatched}> m: say [RXZXZRXXXXXZZZZR[&say]] <foo bar>

[18:22] <camelia> rakudo-moar e1c772: OUTPUT«barfoo␤(((((((((((((True)))))))))))))␤»

[18:23] <unmatched}> andrzejku: I can tell you an easy way to get on, wanna know the secret?

[18:23] <TimToady> yes, the real operator can only come when you're done with the metas

[18:23] <unmatched}> *one

[18:23] <mst> what the flying fornication was that m:

[18:24] <unmatched}> mst: just common Perl 6 :P

[18:24] <timotimo> what kind of emoticon is m: ?

[18:24] <unmatched}> I can't live without that operator :)

[18:24] <andrzejku> unmatched}, yeah sure

[18:24] <TimToady> mst: if you'd bother to learn the language, it would be obvious :P

[18:24] <unmatched}> timotimo: "that m:" == "that eval"

[18:24] <timotimo> ah :)

[18:25] <andrzejku> unmatched}, tell me please

[18:26] <unmatched}> andrzejku: help us out. Perl is a volunteer effort. You can help with the docs https://github.com/perl6/doc/issues you can help with tickets on https://rt.perl.org/ (here are some that may be easy: https://gist.github.com/zoffixznet/b7e1e119d14bb652fda313768e12c874 or you can just process the ticket queue http://perl6.party/post/A-Date-With-The-Bug-Queue-or-Let-Me-Help-You-Help-Me-Help-You ) or you can join

[18:26] <unmatched}> #perl and ask how you can help the Perl 5 effort too.

[18:27] <unmatched}> andrzejku: and I think you'll make many Perl friends in the process.

[18:27] <perlpilot> "friends" should be in scare-quotes for #perl  ;)

[18:28] <andrzejku> yeah

[18:28] <mst> perlpilot: wuss

[18:28] <unmatched}> mst: it's a say() sub used as an operator that's then reversed, then zipped, then zipped, then zipped, then zipped, then crossed, then crossed, then crossed, then crossed, then crossed, then reversed, then zipped, then crossed, then zipped, then crossed, then reversed, and then used as a metaop on the list containing 'foo' and 'bar'

[18:28] <andrzejku> right now I learn C++ because I am tired with my actually job

[18:28] <andrzejku> ;s

[18:28] <andrzejku> and want to get hired somewhere what I want to do

[18:29] <mst> unmatched}: yeah, when you and TimToady both decided to be completely unhelpful I went and hunted down the documentation :D

[18:29] <andrzejku> but I know Perl basics since I used it from time to time

[18:29] <unmatched}> :)

[18:29] <andrzejku> however I have no friends and any Perl support in my job

[18:29] <andrzejku> when I write something in Perl ppl laugh at me or told me to do what others do

[18:30] <mst> TimToady: I'm starting to learn. I was able to clearly articulate why your BUILD semantics are bad and should feel bad the other day :P

[18:30] <andrzejku> this mean write Python and Bash

[18:30] <TimToady> mst: yes, we've been thinking for a couple years now that a function that you could call inside BUILD that says "set defaults now" might be a useful addition

[18:31] <TimToady> but round tuits and all that

[18:32] <unmatched}> andrzejku: well... lead, follow, or get out of the way... I think the saying is. You can either do what you like or you can always change to what people tell you to be. 

[18:32] <mst> TimToady: I do feel like being able to opt out of the standard slot population code on a per attribute rather than per class basis (ala init_arg =>) would be even better

[18:32] <TimToady> there were also proposals to tie defaults to the initial FETCH so it would appear as if they were already set

[18:32] <andrzejku> unmatched}, yes I know

[18:33] <TimToady> mst: under the function approach, you just do things before or after the function call

[18:33] <TimToady> the reason we didn't go with the FETCH approach is because it's not clear it would work right with natives

[18:33] <mst> yeah, it's definitely fixable, once one decides what 'fixed' means in specific, and the current system is obviously a superset of what M* permits functionality wise even if not huffman coded the way I expected

[18:34] <mst> most importantly from my POV, mentally regarding perl6's BUILD as being more POPULATE made my mental model consistent again

[18:35] <unmatched}> I rather see improvement with the parameter default handling, even if in module space. I think it's a bigger "bad and should feel bad" than BUILD

[18:35] <unmatched}> m: sub foo (:$what = 42) { dd $what }; sub bar (:$what) { foo :$what }; bar :42what; bar;

[18:35] <camelia> rakudo-moar cc3932: OUTPUT«Int $what = 42␤Any $what = Any␤»

[18:35] <mst> so while I'm not 100% happy with the current functionality sugar wise, I'm no longer nigglingly troubled when trying to think about it at all

[18:35] <unmatched}> I tried to invent a trait to avoid this, but failed.

[18:36] <mst> so, yeah, getting there, slowwwwwly

[18:36] <andrzejku> hey how can I create website

[18:36] <andrzejku> in pm.org domain?

[18:37] <psch> unmatched}: maybe allowing METAOP_ASSIGN works there?  e.g. :(:$what //= 42)

[18:37] <psch> unmatched}: might be worth a try, although you'd have to Slang it for module space

[18:38] <unmatched}> k, I'll try to learn slangs and try the slang approach

[18:38] *** TimToady left
[18:38] <psch> well, i'd try it in Perl6::Grammar first, to see how badly it breaks :)

[18:38] <unmatched}> :)

[18:39] <psch> and you'd need to know the spots to tweak anyway with what currently passes for our Slang API

[18:39] <psch> ...although that probably wouldn't go away vOv

[18:40] *** TimToady joined
[18:40] <harmil_wk> ⊍ vs ⊎ ... I anticipate some code readability issues, there...

[18:40] <unmatched}> psch++ I really like the //= syntax for this

[18:42] <unmatched}> harmil_wk: I don't see a problem: http://i.imgur.com/O2YhyfM.png  :P

[18:43] <unmatched}> Ah, found the white-space-in-meta-op ticket: https://rt.perl.org/Ticket/Display.html?id=127427#ticket-history

[18:43] * unmatched} rejects

[18:43] <harmil_wk> unmatched}: well, you technically have the same problem I do, just for a different reason :-)

[18:43] <harmil_wk> It's http://www.fileformat.info/info/unicode/char/228e/index.htm vs http://www.fileformat.info/info/unicode/char/228d/index.htm

[18:44] <harmil_wk> In most fonts in most programming-friendly-scales they look the same.

[18:45] <psch> "programming-friendly-scales"?

[18:45] <unmatched}> Yeah, they actually do display on my IRC and I can sorta see two extra pixels on the right one :P

[18:45] *** freeside joined
[18:45] <harmil_wk> psch: By that I mean "you can fit a lot of text on the screen"

[18:46] <psch> i suppose that means i'm weird with programming in 16pt? :)

[18:47] <unmatched}> This is how I see them on "programming-friendly-scales": http://i.imgur.com/DRkqdVY.png

[18:47] <psch> well, on 1920x1080 on a 21" widescreen

[18:47] * unmatched} codes in 1440p res... with three 80-char panels displayed at the same time.

[18:48] <psch> putty say 146x36 terminal resolution for fullscreen

[18:48] <psch> irssi usually is at 80x24, but we have lots of >80 chars lines in rakudo 

[18:49] <dalek> doc: 8481062 | (Jan-Olof Hendig)++ | doc/Type/Setty.pod6:

[18:49] <dalek> doc: Added docs for Setty.Bool

[18:49] <dalek> doc: review: https://github.com/perl6/doc/commit/8481062087

[18:49] <harmil_wk> unmatched}: yeah, that's more or less what I see

[18:49] <psch> most of the time i don't feel like "more lines at the same time" would help me having better insight into the code, fwiw

[18:50] <unmatched}> I mostly care for "files at the same time"

[18:50] <unmatched}> JS+CSS+Markup+Backend

[18:50] <psch> heh, yeah, my screen usually has around 15 or so windows

[18:50] *** freeside left
[18:50] <psch> or, well, screens :P

[18:52] *** tmtowtdi joined
[18:53] <TimToady> yeah, well, it's pretty hard to see the difference between 礻 and 衤 too

[18:54] <harmil_wk> TimToady: I'd suggest that's why we don't use pictograms for programming, but someone's going to pull out an emoji operator library if I do that...

[18:55] *** spider-mario joined
[19:01] *** ufobat left
[19:02] <dalek> doc: 4255fa6 | (Wenzel P. P. Peppmeyer)++ | doc/Language/variables.pod6:

[19:02] <dalek> doc: make variables.pod6 compile

[19:02] <dalek> doc: review: https://github.com/perl6/doc/commit/4255fa6e3f

[19:06] <unmatched}> m: sub 礻 { $^礻 + $^衤 }; say 礻 2, 2,

[19:06] <camelia> rakudo-moar cc3932: OUTPUT«4␤»

[19:09] <pochi> you should name it ネ for full confusion

[19:09] *** Woodi left
[19:09] <unmatched}> m: sub 礻 { $^礻 + $^衤 }; my \衤 = { say 礻 2, 2 }; 衤

[19:09] <camelia> rakudo-moar cc3932: OUTPUT«WARNINGS for <tmp>:␤Useless use of 衤 symbol in sink context (line 1)␤»

[19:09] <unmatched}> m: sub 礻 { $^礻 + $^衤 }; my \衤 = { say 礻 2, 2 }; 衤()

[19:09] <camelia> rakudo-moar cc3932: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '&衤' is not declared␤at <tmp>:1␤------> 3 { $^礻 + $^衤 }; my \衤 = { say 礻 2, 2 }; 7⏏5衤()␤»

[19:10] <unmatched}> m: sub 礻 { $^礻 + $^衤 }; my \衤 = { say 礻 2, 2 }; 衤.()

[19:10] <camelia> rakudo-moar cc3932: OUTPUT«4␤»

[19:13] <cuonglm> jnthn: I pushed the patch and creating PR for MoarVM https://github.com/MoarVM/MoarVM/pull/388 and roast https://github.com/perl6/roast/pull/137 

[19:13] <cuonglm> Please take a look, thanks.

[19:16] *** cuonglm left
[19:17] *** zakharyas joined
[19:24] *** jdoege joined
[19:25] *** jdoege left
[19:25] *** jdoege joined
[19:26] *** rindolf left
[19:30] *** wamba left
[19:31] *** rindolf joined
[19:33] *** darutoko left
[19:35] *** zacts joined
[19:36] <harmil_wk> unmatched}: Actually, I'd use 礻 and 衤 more as a prefix op with texas equivalents, "iscult" and "isdressed"

[19:37] <unmatched}> Jebus... This person has 904 modules! https://metacpan.org/author/PERLANCAR

[19:37] <unmatched}> I guess my title of releasing copious amounts of shite has been thoroughly stolen.

[19:39] <harmil_wk> There was a time when people were publishing to CPAN faster than new Star Trek novels were coming out! ;-)

[19:42] * unmatched} doesn't know enough about Star Trek to know whether the number is high or low...

[19:45] <mst> unmatched}: he doesn't like the fact that people don't always apply patches immediately, so he just releases his own version instead

[19:46] <unmatched}> heh

[19:46] <mst> on the upside, he does tend to document what it's a version -of-, so idea theft is still totally viable

[19:46] <dalek> doc: e7d7d27 | (Wenzel P. P. Peppmeyer)++ | doc/Language/variables.pod6:

[19:46] <dalek> doc: push slipped index entires back to where they belong

[19:46] <dalek> doc: review: https://github.com/perl6/doc/commit/e7d7d27aac

[19:46] <mst> it's a little bit aggravating given pulling in any one of his modules can easily pull in half his author directory

[19:46] <unmatched}> :D

[19:47] <mst> but, like, it beats him keeping them all on a personal darkpan so

[19:47] <unmatched}> I still remember drowning in bit rot when I had just over 200 modules. Can't imagine what it's like to maintain 900... 

[19:49] <mst> this is why I try and give mine a team as fast as possible

[19:50] *** brrt joined
[19:55] *** prammer joined
[19:57] <harmil_wk> Huh, when sorting the list of Perl 6 ops, I found that Linux "sort -u" will drop any purely non-ascii lines unless you set LC_COLLATE to something (anything, even something invalid)

[19:58] <dalek> doc: c8d65cc | coke++ | doc/Language/variables.pod6:

[19:58] <dalek> doc: remove trailing whitespace

[19:58] <dalek> doc: review: https://github.com/perl6/doc/commit/c8d65cc8dd

[20:03] <jdoege> I'm working my way through the documentation, trying to understand how introspection works and I have developed a couple of questions. 1) inside a grammar, if I want to reference the regex method itself in a block inside the named regex, how can I get a pointer to the regex so it can be the subject of introspection. For instance, I may want some executable code to discover the name of the regex of which it is a part.

[20:03] *** setty2 joined
[20:04] *** travis-ci joined
[20:04] <travis-ci> Doc build errored. Will "Coke" Coleda 'remove trailing whitespace'

[20:04] <travis-ci> https://travis-ci.org/perl6/doc/builds/149289130 https://github.com/perl6/doc/compare/e7d7d27aac18...c8d65cc8dd11

[20:04] *** travis-ci left
[20:06] <jdoege> 2) when I tried to iterate over the methods in a grammar, it threw a warning when I tried to say the iterator but it did say the name of the regex. If I asked for the name, I got "Regex" which makes sense since the object is a Regex. But that raises the question of how do I legitimately determine the name of a named Regex through introspection without throwing a warning?

[20:08] <jdoege> for $parser.^methods -> $i { say $i; } # does print the name of the regex but throws a warning. $i.name returns "Regex"

[20:10] *** brrt left
[20:11] <gfldex> jdoege: you may have luck reading the source of Grammar::Tracer

[20:11] <jdoege> Thanks for the pointer. I'll check it out.

[20:11] <[Coke]> is there a way to provide travis with a pre-built rakudo with teh modules needed?

[20:11] <[Coke]> (for doc)

[20:12] *** brrt joined
[20:13] <hoelzro> [Coke]: that would be nice - you could pre-build it and throw a tarball up on hack, and then download it in the travis job

[20:13] <zacts> does rakudo support 32bit platforms? (and if so, will this likely be the case for a while?)

[20:13] <hoelzro> that would be nice for module testing, tbh

[20:17] *** lizmat left
[20:20] <dalek> doc: c2818df | (Jan-Olof Hendig)++ | doc/Type/Setty.pod6:

[20:20] <dalek> doc: Spruced up keys, values and kv a bit and fixed a couple of minor errors

[20:20] <dalek> doc: review: https://github.com/perl6/doc/commit/c2818dff37

[20:21] *** zacts left
[20:22] *** zacts joined
[20:23] <hoelzro> actually, having a nightly build available would be handy for that kind of stuff

[20:24] <[Coke]> say, a nightly build that if it passed make test got swapped out for the last daily installed one?

[20:25] *** zakharyas left
[20:26] *** prammer left
[20:27] *** prammer joined
[20:30] <hoelzro> yeah, that'll do

[20:30] *** labster joined
[20:30] <hoelzro> we could even keep a ring buffer of sorts of one week of nightlies should we desire

[20:31] <jdoege> gfldex: Thank you. That provided what I needed.

[20:32] *** ZoffixMobile joined
[20:33] <ZoffixMobile> zacts, yes, it does, although I don't think there's JIT on 32bit version, so it's slower. There's also no Rakudo Star version for recent releases, so you'd need to build from sauce

[20:34] <ZoffixMobile> well, no windows 32 binaries for R* is what ai meant

[20:35] <zacts> ah ok cool

[20:35] <zacts> will 32bits likely be dropped within the next 4 years?

[20:41] *** andrzejku left
[20:41] *** mcmillhj left
[20:42] *** mcmillhj joined
[20:42] *** AlexDaniel joined
[20:42] *** brrt left
[20:45] *** margeas joined
[20:46] <[Coke]> we're not going to go out of our way to keep purchasing old hardware to run it on.

[20:46] <[Coke]> (if some company does, that's another thign entirely)

[20:49] <AlexDaniel> purchasing old hardware?

[20:49] <yoleaux> 15:08Z <sena_kun> AlexDaniel: - I'm sorry to bother you again, but since https://github.com/perl6/doc/commit/f40f638965 we need checklink once again. If I'm right, we eliminated almost all output. Can you give me a right command for a checklink? I tried `checklink http://localhost:3000/ -X '.*.(com|org)' -r`, but it seems it has timeout for every request, because I get only one page per second. That's toooo slow. Thanks for your efforts.

[20:51] <AlexDaniel> sena_kun: I use this: checklink -b -D 25 -q doc.perl6.org | tee "$(date '+%F')"

[20:51] <sena_kun> AlexDaniel, thanks, I will now run it with local server...

[20:52] <[Coke]> AlexDaniel: or keeping old hardware running. same thing

[20:56] <AlexDaniel> [Coke]: are you talking about 32-bit builds? If so, can't you install a 32-bit system on any hardware? At least that's what I thought…

[20:56] *** brrt joined
[20:57] *** brrt left
[20:58] *** kurahaupo left
[20:58] *** ZoffixMobile left
[21:00] *** skids left
[21:01] <dalek> doc: b49dc5a | coke++ | doc/Language/5to6-perlfunc.pod6:

[21:01] <dalek> doc: Close #656; document use VERSION

[21:01] <dalek> doc: review: https://github.com/perl6/doc/commit/b49dc5a646

[21:03] <[Coke]> AlexDaniel: can you include a timestamp at the top of https://gist.github.com/AlexDaniel/fc6cb8d6f66516c837268d43ecc47c33 so we can tell when it was last updated?

[21:04] <[Coke]> AlexDaniel: let me rephrase: we're not going to go out of our way to make stuff work on old hardware or OSes.

[21:04] *** AndyBotwin left
[21:05] <[Coke]> we are still understaffed and are lucky we're not breaking stuff we do support. :)

[21:05] <AlexDaniel> [Coke]: how precise you want this timestamp to be? I update the gist whenever I update this page: https://github.com/perl6/doc/issues/561

[21:07] <AlexDaniel> also, the gist itself has a “Revisions” tab with all the timestamps

[21:09] <dalek> doc: 6f34839 | coke++ | doc/Language/nativecall.pod6:

[21:09] <dalek> doc: Remove invalid L<> - Pointer isn't a type

[21:09] <dalek> doc: review: https://github.com/perl6/doc/commit/6f34839afc

[21:09] <[Coke]> AlexDaniel: ah, duh, revisions is fine. Thanks!

[21:10] <sena_kun> Currently, if we resolve webchat/examples links, then almost all output will be gone. It would be actually useful to search for dead links, not just staring at huge output.

[21:10] <AlexDaniel> sena_kun: webchat/examples warnings go away if you use -b

[21:10] *** mcmillhj left
[21:11] <[Coke]> AlexDaniel: line 68 of your gist; complains the the following fragment needs to be fixed (put on Line:121)

[21:12] <[Coke]> I don't see a #put anywhere in that page.

[21:12] <[Coke]> What's it complaining about, or has that one already been fixed?

[21:12] <sena_kun> AlexDaniel, hm, it's strange, since I'm currently running `checklink -b -D 25 -q http://localhost:3000/ -X '.*.(com|org)' | tee "$(date '+%F')" > output_check` and I still get 5 warnings about them.

[21:13] <[Coke]> not sure the local host is 100% the same as the version deployed to the web.

[21:13] *** jdoege left
[21:13] <sena_kun> Yes, it may be.

[21:14] <sena_kun> Current revision is outdated, since it was created 13 hours ago and https://github.com/perl6/doc/commit/f40f6389650d20690bc9cc3877c8b7d7c4002b45 was pushed 6 hours ago.

[21:15] <[Coke]> AlexDaniel: it's also complaining about the fragment "method_put", but that seems to be a valid id on that page.

[21:16] <[Coke]> If you can explain what those 2 are complaining about, I can probably fix a bunch of them. (but they look spurious to em.)

[21:16] <[Coke]> *me

[21:16] *** kaare_ left
[21:16] *** obfusk left
[21:17] *** obfusk joined
[21:17] <AlexDaniel> [Coke]: these are some very good questions

[21:17] <AlexDaniel> [Coke]: previously the output contained other stuff that looked wrong, but then the number of such warnings decreased as we fixed the HTML that we prouce

[21:18] <AlexDaniel> [Coke]: in this case, perhaps it is complaining about links inside the links?

[21:18] <AlexDaniel> <a class="u" href="#___top" title="go to top of document"><a href="/routine/put#class_Mu">method put</a></a>

[21:18] <sena_kun> Ah, we actually need a fix.

[21:19] <AlexDaniel> so these warnings tend to indicate that there's a problem, but in case of broken html they are actually complaining about broken html… or so it seems

[21:21] <AlexDaniel> however, it talks about line 121 which is this: <p>From <a href="/type/Mu#method_put">Mu</a></p>

[21:21] <AlexDaniel> right above the line with broken html… so I don't know

[21:21] *** zacts left
[21:22] <sena_kun> I'll fix up "From $type" for routines now.

[21:23] <Xliff> Does anyone know where nqp::nativecallrefresh() is documented

[21:23] *** prammer left
[21:24] *** NEveD left
[21:24] *** prammer joined
[21:25] <psch> Xliff: i wouldn't assume it's documented.  it's implemented in MoarVM/src/core/nativecall.c:676

[21:25] <psch> Xliff: well, the C function that the nqp op maps to is :)

[21:29] *** rindolf left
[21:29] <Xliff> OK. Thanks, psch++

[21:30] <psch> Xliff: if it's transparent enough it'd be nice to have it doc'd in nqp/doc/ops.markdown

[21:30] <psch> Xliff: we have a #nativecall header there, but that op seems to be missing

[21:32] <Xliff> psch: I would be happy to write it since I'm making use of it, but I'm not precisely sure when it should be used.

[21:32] <psch> Xliff: well, i have no idea what it even does.  if you can describe that it'd be already notably more than what we have

[21:32] <Xliff> All I know is that sometimes, if changes are made to a repr('CStruct'), those changes aren't reflected in the P6 object unless that op is used on it.

[21:33] <psch> that sounds like we should be calling it internally more often

[21:33] <Xliff> Yeah.  :/

[21:34] <Xliff> Just got done with a weird test in p6-XML-LibXML where I could make a change via nqp::bindattr and then check that change and see it, but then a few scopes up, that change would not appear.

[21:34] <arnsholt> Structs passed as arguments to a function are checked after the function returns

[21:35] <psch> i don't think you should ever need to bindattr in user-facing code

[21:35] <psch> if so we're missing a layer of abstraction

[21:35] <Xliff> arnsholt: Right, but say a call "$obj.somethingChangesHere" is made. Changes in $obj may not be seen in that scope unless "nqp::nativecallrefresh($obj)" is called first. 

[21:35] *** prammer left
[21:36] <arnsholt> Depends on what the method calls and such

[21:36] <Xliff> psch: Yeah, well I've been running into that necessity a lot, but only in complex NativeCall projects.

[21:36] <psch> (FSDO "user-facing", obviously...)

[21:36] <arnsholt> But the refresh only refreshes the struct in question, *not* recursively

[21:37] <arnsholt> But that holds for the op as well, so that shouldn't matter

[21:37] <Xliff> arnsholt, yeah. Recusively. And thar be dragons... thar....

[21:37] <Xliff> I don't know the performance hit of nqp::nativecallrefesh() so I am using it as sparingly as possible.

[21:39] <psch> Xliff: what's a simple example of where you need bindattr?

[21:40] <dalek> whateverable: 4811e59 | (Daniel Green)++ | Whateverable.pm6:

[21:40] <dalek> whateverable: Minor simplification of to-full-commit()

[21:40] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/4811e5972a

[21:41] *** harmil_wk left
[21:43] <Xliff> https://github.com/perl6/nqp/pull/302

[21:44] <Xliff> psch: LOL! "simple" he says...

[21:44] <Xliff> https://gist.github.com/Xliff/96e48eaad469e42e3c604380a73a918a

[21:44] <Xliff> ^^ psch

[21:45] *** webstrand left
[21:45] <dalek> whateverable: e52a215 | (Daniel Green)++ | Whateverable.pm6:

[21:45] <dalek> whateverable: Whoops, missing semi

[21:45] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/e52a215d44

[21:45] <psch> Xliff: ops.markdown is mostly compiler developer documentation.  references to users calling ops feel kind of off there

[21:45] *** webstrand joined
[21:46] <psch> s/mostly //

[21:46] <psch> okay, so it's a recursively nested struct..?

[21:47] <Xliff> psch: Seems that way.

[21:47] <psch> that's definitely beyond my C and NC knowledge :|

[21:47] <psch> Xliff: well, the typedef references itself

[21:48] <psch> i mean, i can accept that it's possible, but that's probably because C is crazy

[21:48] <Xliff> psch++ .... no arguments there.

[21:49] <psch> Xliff: oh, also there's an 's' too many in the op name in your PR

[21:50] *** itaipu left
[21:50] <Xliff> psch: Updated.

[21:51] <Xliff> Yeah. And that that extra s is now gone.

[21:51] <Xliff> This is what I get for using the web interface.... oh... and typing tired.

[21:51] <psch> Xliff++

[21:52] <Xliff> Thankee

[21:52] *** acrussell left
[21:55] <dalek> doc: a7aab6d | Altai-man++ | htmlify.p6:

[21:55] <dalek> doc: Now 'routine_'-like links are fine, just like 'method_'-like links

[21:55] <dalek> doc: review: https://github.com/perl6/doc/commit/a7aab6d2b7

[21:56] *** RabidGravy left
[21:57] *** espadrine joined
[22:07] *** CIAvash left
[22:13] *** TEttinger joined
[22:16] *** grondilu left
[22:21] *** erl6 joined
[22:25] *** pmurias left
[22:26] *** spider-mario left
[22:26] *** Sgeo__ joined
[22:26] *** erl6 left
[22:29] *** aries_liuxueyang left
[22:30] *** firstdayonthejob left
[22:32] *** setty2 left
[22:33] *** skids joined
[22:33] *** cpage_ left
[22:40] *** canopus left
[22:48] *** canopus joined
[22:48] *** profan joined
[22:49] *** lizmat joined
[22:58] *** mcmillhj joined
[23:04] *** rpburkholder joined
[23:05] *** cpage_ joined
[23:09] *** cpage_ left
[23:11] *** mcmillhj left
[23:11] *** edehont joined
[23:21] *** margeas left
[23:23] *** sena_kun left
[23:29] *** cyphase left
[23:31] *** cpage_ joined
[23:39] *** cpage_ left
[23:40] *** cyphase joined
[23:41] *** ruoso left
[23:50] *** edehont left
[23:53] *** rpburkholder left
[23:58] *** kid51 left
