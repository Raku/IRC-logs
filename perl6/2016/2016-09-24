[00:01] *** wamba joined
[00:11] * grondilu doubts it's possible

[00:11] <bioduds_> it compiles

[00:11] <bioduds_> and asks for the input

[00:11] * grondilu looks in S19

[00:12] <bioduds_> Usage:   ef8a4da32a.pl [--kv=<Associative>] 

[00:12] <bioduds_> but I can't seem to find the correct input syntax on the command line

[00:12] * zengargoyle thinks there's a getopt-ish module.  always found MAIN args to be *really* hard for anything but basic strind/bool type things.

[00:12] * grondilu does not find any occurrence of C<:%> in S19

[00:15] <grondilu> sub MAIN( *%options ) {...} does work

[00:15] <grondilu> and it might be what you wanted to do

[00:16] <grondilu> strangely though, sub MAIN(Str *%options) {...} fails

[00:16] <zengargoyle> but i myself was thinking of asking a similar question about same sort of thing with '@'.

[00:16] <bioduds_> grondilu : how would it be called on the command line?

[00:16] <grondilu> perl6 prog.p6 -foo=bar -pi=3.14

[00:16] <grondilu> it's not a named h

[00:16] <grondilu> %

[00:18] <grondilu> basically you will not use the name of the hash on the command line.  You only give the pairs it will be made of.

[00:19] <bioduds_> let me try

[00:19] <grondilu> there's really not much point in using a named parameter when there is only one parameter, anyway.

[00:20] <grondilu> (unless you have multiple candidates, of course)

[00:20] <bioduds_> cool, this works for me

[00:21] * grondilu is glad he could help

[00:23] <bioduds_> thanks, man

[00:23] <bioduds_> :)

[00:24] <bioduds_> if you find out later if and how naming the parameter on the MAIN could work, please tell me

[00:26] <grondilu> I keep doubting it's possible.

[00:27] <grondilu> you'd have to somehow pass a Perl 6 syntax on the shell command line.  That can't fly, can it?

[00:27] * zengargoyle thinks a HOWTO-MAIN doc is needed. :)

[00:28] <grondilu> how MAIN works should be the main subject of a perl6 man page.

[00:28] <grondilu> wait, scrap that.

[00:28] <zengargoyle> with a bunch of practical-ish examples.

[00:29] * grondilu realizes that not all Perl 6 programs have a MAIN subroutine.

[00:29] <bioduds_> well, my user-ish role would say: if it's there, there must be a way to use it

[00:30] <bioduds_> anyhow, since this here sub MAIN( *%kv, Str :$new ) { is working

[00:30] <bioduds_> then it does what I need

[00:30] <grondilu> it's kind of special though.  MAIN has a Perl 6 syntax but its semantics transcend Perl 6 to go into shell territory.

[00:30] *** canopus left
[00:31] <grondilu> so it's not too surprising that there is a mismatch at some point.

[00:31] <zengargoyle> i think the issue is that it's just a standard sub specification and going from 'chunk of text from CLI' -> Perl6-thing.

[00:31] <zengargoyle> yeah, that.

[00:31] * grondilu is always happy when he can use the verb "transcend" in a sentence :)

[00:32] <bioduds_> surely, only one hash set so to speak can be captured by this approach

[00:33] <bioduds_> but it gives a lot of room actually, doesn't it?

[00:33] <grondilu> I don't follow you

[00:33] *** sufrostico left
[00:34] <zengargoyle> the slurpy only permits one hash (or array) at end.

[00:37] *** tushar joined
[00:41] * zengargoyle thinks that going from array of string from CLI to variables is going to take getopt-ish complexity vs simple sub signature.

[00:41] <zengargoyle> otherwise we'd be able to call any P6 sub with and array of strings and have it work. :)

[00:50] <grondilu> also, doesn't the correct syntax for a long parameter name in shell requires two and not just one dash?

[00:51] <grondilu> like $ dothis --with-parameter=the-parameter

[00:51] <grondilu> and $ dothat -x=2

[00:51] <zengargoyle> yeah, and Bool have some weird --\name for the false case.

[00:52] <zengargoyle> just took a quick peek at perl6-all-modules and found no MAIN that use anything other than :$

[00:52] * grondilu is not surprised

[00:52] <grondilu> anything else would require some form of marshallization, shouldn't it?

[00:53] <grondilu> s/shouldn't/wouldn't/

[00:53] <zengargoyle> i once made a :$file that was type checked to IO.r or something but it was crazy hard vs just getting a string and checking myself.

[00:54] <grondilu> strings are more or less the only types the shell and Perl 6 have in common.  No wonder that's what is used for argument passing between them. 

[00:55] <zengargoyle> this all brings back horrible memories of programming where you didn't even get an array of strings but just one string you had to parse yourself.

[00:56] <grondilu> meh, that happened often for me.

[00:56] <grondilu> I mean like, unacceptably often.

[00:56] <bioduds_> being able to *%kv is awesome enough

[00:56] <bioduds_> opens up a bunch of opportunities

[00:56] <bioduds_> im already using it

[00:56] <bioduds_> :)

[00:57] <grondilu> bioduds_: I would recommend naming it *%options though

[00:57] <bioduds_> makes no diff, here look: sub MAIN( *%kv, Str :$op ) {   with %kv { for %kv.kv -> $key, $value { get-json( WHERE => $key, EQUALS => $value, op => $op ); } }   without %kv { get-json; } }

[00:58] <bioduds_> this is what im doing, im treating it right away

[00:58] <grondilu> or even *%command-line-options if you don't mind being verbose.

[00:58] <bioduds_> cause in my case here, im building a key=>value NoSQL system

[00:59] <bioduds_> so the parameters are actually the key and the value to be searched

[00:59] <bioduds_> so, they are not actually options

[00:59] <grondilu> does sub MAIN (*%kv, Str :$op) {...} behaved as you expected?  I'm a bit surprised it's even legal.

[00:59] <bioduds_> yes, perfectly

[01:00] <bioduds_> now I can do search for name="Some Name" op="eq"

[01:00] <bioduds_> and search rate="4.3" op="gt"

[01:00] <bioduds_> works fine

[01:00] <grondilu> m: sub (*%h, :$foo) { say %h.perl }(foo => "bar")

[01:00] <camelia> rakudo-moar 8aa0aa: OUTPUT«{:foo("bar")}␤»

[01:01] <grondilu> m: sub (*%h, :$foo) { say %h.perl, " and ", $foo }(foo => "bar")

[01:01] <camelia> rakudo-moar 8aa0aa: OUTPUT«{:foo("bar")} and bar␤»

[01:01] <grondilu> hum... so the argument ends up in both parameters.  That's slightly weird.

[01:02] <zengargoyle> how many 'op'?

[01:05] <bioduds_> a few

[01:05] <zengargoyle> m: sub (:$foo, *%h) { say %h.perl, " and ", $foo }(foo => "bar")

[01:05] <camelia> rakudo-moar 8aa0aa: OUTPUT«{} and bar␤»

[01:05] <bioduds_> eq, lt, gt, lte, gte

[01:05] <bioduds_> for starters

[01:05] <zengargoyle> slurpy should go at end i think.

[01:06] <zengargoyle> but makes op need to be first i think.

[01:06] <bioduds_> what do you mean?

[01:06] <bioduds_> sorry, didn't quite catch what you're trying to say

[01:08] <zengargoyle> m: sub (:$foo, *%h) { say %h.perl, " and ", $foo }(foo => "bar", foo => "baz")

[01:08] <camelia> rakudo-moar 8aa0aa: OUTPUT«{} and baz␤»

[01:09] <zengargoyle> pondering collison when op is a name for a parameter and a poddible key in kv....

[01:09] <bioduds_> oh, yes

[01:09] <bioduds_> correct

[01:10] <zengargoyle> thought checking :$op first would grab first --op and *% would get any additional --op...

[01:10] <bioduds_> perhaps subset Operator where "eq"|"gt"|"lt";

[01:10] <zengargoyle> don't seem to work that way. :P

[01:10] <bioduds_> with sub MAIN( *%kv, Operator :$op ) {

[01:11] <zengargoyle> yeah, or i was thinking earlier of multi sub MAIN('eq', ...) multi sub MAIN('lt', ...)

[01:11] <zengargoyle> sorta sub-command like.

[01:12] *** Actualeyes joined
[01:12] <zengargoyle> but it forces order to your parameters.

[01:13] *** pierre_ joined
[01:13] <bioduds_> yes

[01:13] * zengargoyle loves to have a multi sub MAIN('test') in progs.

[01:13] <bioduds_> declarative programming to the rescue! :D

[01:16] * grondilu would rather write it multi sub MAIN(:$test!)

[01:16] <grondilu> so that it's called as $ perl6 prog --test

[01:17] *** pierre_ left
[01:17] <mst> I like my perl5 solution

[01:17] <mst> where if it's a module, it loads, and if it's a script, iut runs

[01:17] <mst> see http://p3rl.org/App::opan

[01:18] <mst> (note i mention this in a spirit of "steal!" not anything else ;)

[01:18] * grondilu wonders if you can call MAIN inside a MAIN to do recursion.

[01:20] <zengargoyle> just another sub.

[01:20] * grondilu tries.  Indeed, just an other sub.

[01:21] <zengargoyle> i wonder about multi dispatch tho with :$test!

[01:21] <zengargoyle> vs *@args or somesuch

[01:22] <mst> |c is your friend

[01:22] <zengargoyle> always wins?

[01:23] <bioduds_> how would I go about checking if some string meets my subset?

[01:23] <bioduds_> i mean, introspection

[01:23] <zengargoyle> $str ~~ subset

[01:23] <zengargoyle> ?

[01:24] <bioduds_> ok, this

[01:24] <bioduds_> thanks

[01:24] <zengargoyle> just guess, if is don't work file a LTA bug. :P

[01:24] <bioduds_> unless ($key ~~ Operator) { get-json( WHERE => $key, EQUALS => $value, op => $op ); } } 

[01:25] <scott> I made a really simple perl6 script I'd like to be able to run as part of my shell, but it consistently takes about 250ms to run. I noticed in --stagestats that the parse stage is consistently slow: "Stage parse      :   0.160". is there a way to avoid re-parsing every time, for a simple one-off script?

[01:25] <scott> part of my shell prompt*

[01:26] <zengargoyle> make most of script a module that gets precomipled and then tiny script that uses module?

[01:26] <scott> I wonder if that would even help, considering the script is already tiny

[01:26] <scott> 20 lines of uncomplicated code

[01:26] <zengargoyle> maybe not.

[01:27] <scott> this is the script https://gist.github.com/solson/c28d547b5d3445f2a04cc5ed905dc099

[01:28] <scott> running it directly with `perl6` is just too slow for my purpose, unless there's some way to make it avoid re-parsing

[01:28] <bioduds_> now eq, lt, gt, gte, lte are reserved

[01:28] <bioduds_> great

[01:28] <bioduds_> zengargoyle : also, as you pointed, sub MAIN( Operator :$op, *%kv ) { instead of sub MAIN( *%kv, Operator :$op ) {

[01:29] <zengargoyle> scott: IMHO perl6 isn't fast enough yet for *quick* depending on values of *quick*.

[01:29] <scott> startup time is the only thing that really matters here

[01:30] <scott> (which is dominated by parsing)

[01:31] <zengargoyle> yeah, not sure if 'use Foo;Foo::run' is faster than just 'Foo' for 20 lines or not...

[01:32] <scott> it'd be cool if standalone scripts could get precompiled like modules do

[01:33] <grondilu> just make it a module

[01:33] <zengargoyle> i think it's on the wishlist.  at least that's what i'm told everytime i bring it up.

[01:33] <scott> I'm not familiar with how to make modules yet, and this kind of becomes more inelegant than ruby as soon as it uses more than one file

[01:33] *** eliasr left
[01:34] <grondilu> what if you just add 'unit module ::;' on the top?  Wouldn't that do precompilation?

[01:34] <zengargoyle> oh, i means script to standalone executable...

[01:34] <scott> grondilu: I'll try it

[01:34] *** canopus joined
[01:35] <scott> grondilu: seems to have no effect, at least when running `perl6 format-duration.p6`

[01:36] <grondilu> indeed

[01:36] <scott> actually, it had an effect in that MAIN wasn't executed anymore, but parsing was still slow each time

[01:36] <grondilu> well, I tried.

[01:37] <grondilu> a module should execute MAIN though, if called as a program.

[01:38] <grondilu> shouldn't it?

[01:39] <zengargoyle> i would suspect not

[01:41] <grondilu> scott: maybe you can compile it with --target=moar or something

[01:42] <scott> that gets me https://gist.github.com/solson/1e801aef7c33540eaeb32fa75645c63c

[01:43] <grondilu> I don't recall the exact syntax.  jnthn once showed me but I forgot.

[01:43] <grondilu> I do remember it is possible though.

[01:44] <zengargoyle> maybe that changed when things started going into compunitrepos instead of fs.

[01:44] <zengargoyle> or try morevm... 

[01:45] *** TEttinger joined
[01:45] *** wamba left
[01:47] <grondilu> --target=mast do work but it'd be silly to use that.

[01:50] <zengargoyle> --target=mbc --output=file.mbc works....

[01:51] <zengargoyle> or at least created the file and i don't know how to run it. :P

[01:51] <grondilu> --target=mbc maybe?  I can't test it right now I'm compiling rakudo

[01:52] <grondilu> nope

[01:55] <scott> zengargoyle: yeah, that worked for me

[01:56] <zengargoyle> can't figure out how to run it.... think it takes: moar + some libpaths 

[01:56] <grondilu> just copy what the perl6 executable do :)

[01:57] <grondilu> $ cat $(which perl6)

[01:57] <scott> I managed to get moarvm to segfault attempting that

[01:58] <grondilu> oh yeah I forgot you want to feed it with bytecode

[01:59] <grondilu> do $ moar --help, I think it tells you to use --dump

[01:59] <grondilu> oh no, sorry

[02:01] <zengargoyle> Unhandled exception: Could not look up the container config for 'rakudo_scalar'

[02:02] <grondilu> yeah, got the same

[02:07] *** tushar left
[02:08] *** cbk_ left
[02:09] *** samcv left
[02:10] <bioduds_> grondilu : you're right, this here is better multi sub MAIN( Operator :$op, *%kv ) {   for %kv.kv -> $key, $value {      unless ($key ~~ Operator) { get-json( WHERE => $key, EQUALS => $value, op => $op ); }   } }  multi sub MAIN() {   get-json; }

[02:10] <zengargoyle> my sorta guess is that file.mbc has to be somehow combined with bootstrap or core or some other mbc to get to the stage where it's directly runnable by moar.

[02:11] <zengargoyle> like some ld stage...

[02:12] *** noganex joined
[02:15] *** noganex_ left
[02:17] <grondilu> as I said I vaguely recall jnthn showing it can be done and it was not very complicated.

[02:18] *** BenGoldberg joined
[02:18] <grondilu> though it's possible I'm confusing things

[02:20] <zengargoyle> yeah, one of those things that waiting for somebody who knows to show up is probably faster than trying to figure it out...

[02:32] <scott> thanks for looking into it

[02:33] * zengargoyle squirrel!

[02:34] *** johnjohn101 joined
[02:34] <johnjohn101> hi perl6

[02:34] <zengargoyle> it's odd that it's BOOTSTRAP.moarvm where the error pops up.  

[02:36] <zengargoyle> i'm sorta miff'd that my simple test doesn't work. :P

[02:42] <zengargoyle> turning 'perl6 test.p6' into 'nqp test.nqp' into 'moar test.mbp' into just './test' is a worthy progression.

[02:49] *** samcv_ joined
[02:49] *** samcv_ is now known as samcv

[03:00] *** cowens left
[03:10] *** BenGoldberg left
[03:12] *** kaare_ joined
[03:14] *** johnjohn101 left
[03:14] *** pierre_ joined
[03:18] *** flexibeast left
[03:19] *** pierre_ left
[03:32] <awwaiid> Just posted blog mentioning Perl 6, https://thelackthereof.org/TLT/2016.09.23/All_The_Methods

[03:37] *** labster left
[03:37] *** luis` joined
[03:37] *** kst` joined
[03:37] *** canopus left
[03:37] *** woolfy left
[03:37] *** [1]ringer1 left
[03:37] *** noganex_ joined
[03:37] *** djbkd_ joined
[03:37] *** zhmylove joined
[03:37] *** Xliff_ joined
[03:37] *** mohae_ joined
[03:37] *** setty2 joined
[03:37] *** cpage__ joined
[03:37] *** bisectable6 left
[03:37] *** committable6 left
[03:37] *** amalia_ left
[03:37] *** leego left
[03:37] *** pyrimidine joined
[03:37] *** sjohnsen- left
[03:37] *** luis left
[03:37] *** [particle] left
[03:37] *** pdcawley left
[03:37] *** kmwallio left
[03:37] *** timeless left
[03:37] *** setty1 left
[03:37] *** camelia left
[03:37] *** Timbus left
[03:37] *** inokenty left
[03:37] *** synopsebot6 left
[03:37] *** kmwallio joined
[03:37] *** setty2 is now known as setty1

[03:37] *** notbenh left
[03:37] *** infina left
[03:37] *** ringer1 joined
[03:37] *** DarthGandalf left
[03:37] *** mattp__ joined
[03:37] *** Sgeo_ joined
[03:37] *** Gothmog_ left
[03:37] *** lizmat_ joined
[03:37] *** dalek left
[03:37] *** labster1 joined
[03:37] *** inokenty1 joined
[03:37] *** committable6_ joined
[03:37] *** bisectable6_ joined
[03:37] *** dalek joined
[03:37] *** pdcawley_ joined
[03:37] *** zhmylove_ left
[03:37] *** mattp_ left
[03:37] *** TEttinger left
[03:37] *** perigrin left
[03:37] *** Jonis left
[03:37] *** krunen left
[03:37] *** pochi_ left
[03:37] *** chee left
[03:37] *** sergot left
[03:37] *** ChanServ sets mode: +v dalek

[03:37] *** Timbus joined
[03:37] *** perigrin_ joined
[03:37] *** leego joined
[03:37] *** noganex left
[03:37] *** TimToady left
[03:37] *** ft left
[03:37] *** jnthn left
[03:37] *** mst left
[03:37] *** ggherdov left
[03:37] *** Grrrr left
[03:37] *** Jonis_ joined
[03:37] *** nebuchad` joined
[03:37] *** dj_goku_ joined
[03:37] *** kaare__ joined
[03:37] *** krunen__ joined
[03:37] *** DarthGandalf joined
[03:37] *** kaare_ left
[03:37] *** zoosha left
[03:37] *** dj_goku_ left
[03:37] *** dj_goku_ joined
[03:37] *** sjn left
[03:37] *** cooper left
[03:37] *** awwaiid left
[03:37] *** hcit left
[03:37] *** woodruffw left
[03:37] *** cxreg left
[03:37] *** nightfrog left
[03:37] *** avuserow left
[03:37] *** erdic_ joined
[03:37] *** AndyBotwin left
[03:37] *** psch left
[03:37] *** spider-mario left
[03:37] *** markk left
[03:37] *** Guest60806 left
[03:37] *** shadowpaste left
[03:37] *** sjn_ joined
[03:37] *** pierrot left
[03:37] *** sftp left
[03:38] *** simcop2387 left
[03:38] *** mohae left
[03:38] *** TEttinger joined
[03:38] *** _notbenh joined
[03:38] *** awwaiid joined
[03:38] *** profan_ joined
[03:38] *** Sgeo left
[03:38] *** bpmedley left
[03:38] *** vcv left
[03:38] *** dylanwh left
[03:38] *** rjbs left
[03:38] *** masak left
[03:38] *** rcy left
[03:38] *** tailgate left
[03:38] *** BinGOs_ joined
[03:38] *** cpage_ left
[03:38] *** Khisanth left
[03:38] *** djbkd left
[03:38] *** masak joined
[03:38] *** _notbenh is now known as notbenh

[03:38] *** vcv_ joined
[03:38] *** AlexDaniel left
[03:38] *** breinbaas left
[03:38] *** lizmat left
[03:38] *** perlpilot left
[03:38] *** aindilis` left
[03:38] *** MilkmanDan left
[03:38] *** facetious joined
[03:38] *** cxreg2 joined
[03:38] *** dylanwh joined
[03:38] *** sjohnsen joined
[03:38] *** Praise left
[03:38] *** krunen__ is now known as krunen

[03:38] *** a3r0 left
[03:38] *** ponbiki left
[03:38] *** john51 left
[03:38] *** sftp joined
[03:38] *** cpage__ is now known as cpage_

[03:38] *** kst left
[03:38] *** grondilu left
[03:38] *** broquaint left
[03:38] *** bhm left
[03:38] *** BooK left
[03:39] *** ilogger2_ joined
[03:39] *** AndyBotwin joined
[03:39] *** KotH_ joined
[03:39] *** perlpilot joined
[03:39] *** a3r0 joined
[03:39] *** orevdiabl joined
[03:39] *** ponbiki joined
[03:39] *** mspo_ joined
[03:39] *** richi238 joined
[03:40] *** ponbiki is now known as Guest17098

[03:40] *** amalia_ joined
[03:40] *** telex joined
[03:40] *** pochi joined
[03:40] *** Guest71143 joined
[03:40] *** ggoebel_ joined
[03:40] *** [particle] joined
[03:41] *** arnsholt_ joined
[03:41] *** Khisanth joined
[03:42] *** john51 joined
[03:42] *** grondilu joined
[03:42] *** Grrrr joined
[03:42] *** ChanServ sets mode: +v camelia

[03:42] *** edenc_ joined
[03:43] *** sivoais joined
[03:43] *** pierrot joined
[03:43] *** wtw joined
[03:43] *** mst_ joined
[03:43] *** tinita joined
[03:43] *** Upasaka joined
[03:43] *** Celelibi_ joined
[03:44] *** decent joined
[03:44] *** woodruffw joined
[03:48] *** psch joined
[03:48] *** rjbs joined
[03:48] *** BillSussman joined
[03:48] *** krunen_ joined
[03:48] *** richi238 left
[03:48] *** labster joined
[03:48] *** pochi left
[03:48] *** [1]ringer1 joined
[03:48] *** emdashcomma joined
[03:48] *** bob777 joined
[03:48] *** Bucciarati_ joined
[03:48] *** skaji_ joined
[03:48] *** edenc_ left
[03:48] *** bjz joined
[03:48] *** luis joined
[03:48] *** markk_ joined
[03:48] *** gensym joined
[03:48] *** grondilu_ joined
[03:48] *** [particle] left
[03:48] *** [particle]1 joined
[03:48] *** domm1 joined
[03:48] *** mohae joined
[03:48] *** matt_ joined
[03:48] *** perigrin joined
[03:48] *** matt_ is now known as Guest28917

[03:48] *** kaare__ joined
[03:48] *** Guest71143 left
[03:48] *** richi235 joined
[03:48] *** AndyBotwin left
[03:48] *** vytas-local_ joined
[03:48] *** facetious joined
[03:48] *** wtw left
[03:48] *** MilkmanDan joined
[03:49] *** grondilu left
[03:49] *** vytas left
[03:49] *** garu_ left
[03:49] *** ssm left
[03:49] *** dsp_ left
[03:49] *** Juerd_ joined
[03:49] *** decent left
[03:49] *** telex left
[03:49] *** dan joined
[03:49] *** MilkmanDan left
[03:49] *** MilkmanDan joined
[03:49] *** Juerd_ is now known as Juerd

[03:49] *** decent joined
[03:49] *** canopus joined
[03:49] *** vcv joined
[03:49] *** moritz_ joined
[03:49] *** xinming joined
[03:49] *** Sgeo joined
[03:49] *** beatdown joined
[03:49] *** profan joined
[03:49] *** edenc joined
[03:49] *** gabiruh joined
[03:49] *** Gothmog_ joined
[03:49] *** hcit joined
[03:49] *** wtw joined
[03:49] *** avuserow joined
[03:49] *** m0ltar joined
[03:50] *** ssm joined
[03:50] *** pdcawley joined
[03:50] *** xiaomiao joined
[03:50] *** cgfbee joined
[03:50] *** jnthn joined
[03:50] *** olinkl joined
[03:51] *** tony-o joined
[03:52] *** breinbaas joined
[03:52] *** AlexDaniel joined
[03:52] *** john51 left
[03:52] *** atacama joined
[03:52] *** ilbot3 joined
[03:52] *** john51 joined
[03:52] *** ft joined
[03:53] *** sunnavy joined
[03:54] *** rmmm joined
[03:54] *** raydiak joined
[03:55] *** ingy joined
[03:55] *** giraffe_ joined
[03:55] *** masak_ joined
[03:55] *** dsp_ joined
[03:55] *** shadowpaste joined
[03:56] *** richi235 left
[03:56] *** grondilu_ left
[03:56] *** sivoais left
[03:56] *** sivoais joined
[03:57] *** lizmat joined
[03:57] *** Actualeyes joined
[03:58] *** richi235 joined
[03:58] *** dj_goku joined
[03:58] *** dj_goku left
[03:58] *** dj_goku joined
[03:59] *** garu joined
[04:00] *** bartolin joined
[04:00] *** sivoais left
[04:03] *** pochi joined
[04:03] *** telex joined
[04:05] *** ggherdov joined
[04:10] *** w4and0er96 joined
[04:11] *** BuildTheRobots joined
[04:14] *** timeless joined
[04:19] *** bob777 left
[04:19] *** Actualeyes left
[04:19] *** bob777 joined
[04:20] *** [particle] joined
[04:20] *** ringer1 joined
[04:20] <SmokeMachine____> Hi! I am having this problem, but the module (i think) is in the right place... any suggestion?

[04:20] *** mohae_ joined
[04:20] *** garu left
[04:20] *** NeuralAnomaly_ joined
[04:20] *** huggable_ joined
[04:20] <SmokeMachine____> https://www.irccloud.com/pastebin/TCh2pnb9/

[04:20] *** ingy left
[04:20] *** vcv left
[04:20] *** masak_ left
[04:20] *** john51 left
[04:20] *** [ptc]_ joined
[04:20] *** giraffe_ left
[04:20] *** garu_ joined
[04:20] *** Actualeyes1 joined
[04:20] *** timeless left
[04:20] *** Spot__ joined
[04:20] *** breinbaas left
[04:20] *** markk_ left
[04:20] *** [1]ringer1 left
[04:20] *** Spot__ left
[04:20] *** Spot__ joined
[04:20] *** w4and0er96 left
[04:20] *** [particle]1 left
[04:20] *** SourceBaby joined
[04:20] *** nemo_ joined
[04:20] *** vcv joined
[04:20] *** breinbaas joined
[04:20] *** Woodi_ joined
[04:20] *** atacama left
[04:20] *** [ptc]_ is now known as [ptc]

[04:20] *** Khisanth left
[04:20] *** ingy joined
[04:20] *** atacama joined
[04:20] *** richi235 left
[04:20] *** vytas-local_ left
[04:20] *** BuildTheRobots left
[04:20] *** edenc left
[04:20] *** beatdown left
[04:20] *** NeuralAnomaly left
[04:20] *** pochi left
[04:20] *** jcallen left
[04:20] *** ggherdov left
[04:20] *** Juerd left
[04:20] *** arnsholt_ left
[04:20] *** Sgeo left
[04:20] *** pierrot left
[04:20] *** cgfbee left
[04:20] *** dan left
[04:20] *** MilkmanDan left
[04:20] <salparadise> SmokeMachine____: code causing the problem will help I think

[04:20] *** erdic joined
[04:21] *** Gothmog_ left
[04:21] *** beatdown_ joined
[04:21] *** Gothmog_ joined
[04:21] *** DANtheBEASTman joined
[04:21] *** vytas-local_ joined
[04:21] *** sftp joined
[04:21] *** Juerd joined
[04:21] *** mohae left
[04:21] *** Sgeo joined
[04:21] *** jcallen joined
[04:21] *** poisonby joined
[04:22] *** camelia joined
[04:22] *** spider-mario joined
[04:22] *** cgfbee joined
[04:22] *** richi235 joined
[04:22] *** inokenty joined
[04:23] *** kmwallio joined
[04:23] *** ChanServ sets mode: +v camelia

[04:23] *** pochi joined
[04:23] *** Unavowed joined
[04:24] *** giraffe_ joined
[04:25] *** john51 joined
[04:25] <SmokeMachine____> I have a module ProblemSolver on ./lib/ProblemSolver.pm6 and a ProblemSolver::State on ./lib/ProblemSolver/State.pm6

[04:25] *** petercommand joined
[04:25] *** markk joined
[04:26] *** abruanese joined
[04:26] *** imcsk8 joined
[04:26] <SmokeMachine____> and a test t/03-problem.t that does: use lib "lib"; use ProblemSolver;

[04:26] *** huf joined
[04:26] <SmokeMachine____> salparadise: ^^

[04:26] *** john51 left
[04:26] *** simcop2387 joined
[04:26] <SmokeMachine____> ProblemSolver and ProblemSolver::State are classes...

[04:27] *** [Coke] joined
[04:27] <SmokeMachine____> salparadise: ant idea?

[04:27] *** arnsholt joined
[04:27] *** MilkmanDan joined
[04:27] *** masak_ joined
[04:27] *** japhb joined
[04:27] *** pierrot joined
[04:27] *** Khisanth joined
[04:27] *** labster left
[04:28] *** eyck joined
[04:28] *** cosimo joined
[04:28] *** sivoais joined
[04:29] *** ggherdov joined
[04:30] <salparadise> not really, more code, is ProblemSolver something you wrote?

[04:30] <SmokeMachine____> https://www.irccloud.com/pastebin/0ERDdoJc/

[04:30] <SmokeMachine____> yes, I did write ProblemSolver and ProblemSolver::State

[04:33] *** clkao joined
[04:34] *** Util joined
[04:34] *** infina joined
[04:34] *** timeless joined
[04:35] *** w4and0er96 joined
[04:35] *** john51 joined
[04:36] *** wtw_ joined
[04:36] *** Cabanossi joined
[04:38] *** wtw left
[04:39] <SmokeMachine____> Looks that the problem is when I create a attribute with the use'd type as type

[04:41] *** holyghost joined
[04:47] *** baest_ joined
[04:50] *** baest_ left
[04:52] *** baest joined
[05:02] *** cbk_ joined
[05:05] *** cpage_ joined
[05:16] *** pierre_ joined
[05:17] *** melezhik joined
[05:20] *** pierre_ left
[05:21] *** cbk_ left
[05:30] *** AlexDaniel left
[05:38] *** pierre_ joined
[05:50] *** grondilu joined
[05:56] *** yoleaux joined
[05:56] *** ChanServ sets mode: +v yoleaux

[05:58] *** holyghost left
[05:58] *** pierre_ left
[05:59] *** wamba joined
[06:01] *** kurahaupo joined
[06:11] *** ufobat joined
[06:30] *** andrzejku joined
[06:41] *** kurahaupo left
[06:49] *** KotH_ is now known as KotH

[06:52] *** Matthew[m] joined
[06:56] *** wamba left
[07:05] *** darutoko joined
[07:32] *** firstdayonthejob joined
[07:35] *** kaare__ is now known as 92AAADCOE

[07:35] *** edenc joined
[07:35] *** BuildTheRobots joined
[07:35] *** jnap_ joined
[07:35] *** PotatoGim joined
[07:35] *** kipd joined
[07:35] *** Peter_R joined
[07:35] *** damnlie joined
[07:35] *** jsimonet joined
[07:35] *** albongo joined
[07:35] *** avalenn joined
[07:35] *** isacloud joined
[07:35] *** DrParis joined
[07:35] *** kipd left
[07:35] *** kipd joined
[07:35] *** PotatoGim left
[07:35] *** PotatoGim joined
[07:35] *** jnap_ left
[07:35] *** jnap_ joined
[07:35] *** BuildTheRobots left
[07:35] *** BuildTheRobots joined
[07:35] *** andrzejku left
[07:35] *** BuildTheRobots left
[07:36] *** espadrine joined
[07:39] *** PotatoGim left
[07:41] *** BuildTheRobots joined
[07:45] *** PotatoGim joined
[07:50] *** grondilu left
[07:52] *** andrzejku joined
[07:55] *** RabidGravy joined
[08:03] *** andrzejku left
[08:05] *** cyphase joined
[08:07] *** andrzejku joined
[08:08] *** cpage_ left
[08:10] *** cpage_ joined
[08:10] *** FROGGS joined
[08:13] *** breinbaas left
[08:13] *** cyphase left
[08:14] *** breinbaas joined
[08:17] <moritz_> SmokeMachine____: have you used ProblemSolver::State in ProblemSovler.pm?

[08:18] *** cyphase joined
[08:25] *** [particle] left
[08:25] *** [particle] joined
[08:29] *** andrzejku left
[08:38] *** cyphase left
[08:39] *** BinGOs joined
[08:41] *** domidumont joined
[08:45] *** cyphase joined
[08:46] *** domidumont1 joined
[08:46] *** domidumont left
[08:47] *** andrzejku joined
[08:48] *** ka joined
[08:58] *** BillSussman left
[09:04] *** eliasr joined
[09:08] *** bpmedley joined
[09:10] *** labster joined
[09:12] *** domidumont1 left
[09:25] *** hanekomu joined
[09:27] *** Bucciarati_ is now known as Bucciarati

[09:27] *** hanekomu left
[09:27] *** canopus left
[09:29] *** hanekomu joined
[09:32] *** canopus joined
[09:32] *** Ven_ joined
[09:37] *** Ven_ left
[09:37] *** Ven_ joined
[09:37] <dalek> Inline-Perl5: a03cc7b | niner++ | lib/Inline/Perl5.pm6:

[09:37] <dalek> Inline-Perl5: Faster and safer check to determine if we construct a subclass object

[09:37] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/a03cc7b8b9

[09:38] *** nebuchadnezzar joined
[09:51] *** Ven__ joined
[09:52] *** Ven_ left
[09:55] *** RabidGravy left
[10:03] *** ka left
[10:08] *** setty1 joined
[10:11] *** yqt joined
[10:13] *** nadim_ joined
[10:14] *** firstdayonthejob left
[10:20] *** andrzejku left
[10:21] *** labster left
[10:23] *** ocbtec joined
[10:31] *** Ven__ left
[10:35] *** imcsk8 left
[10:35] *** imcsk8 joined
[10:38] *** wamba joined
[10:42] <El_Che> impressive netsplit

[10:53] *** Actualeyes1 left
[11:00] <dalek> doc: 8dd339e | (Jan-Olof Hendig)++ | doc/Type/Range.pod6:

[11:00] <dalek> doc: Added some more code examples plus some sundry stuff

[11:00] <dalek> doc: review: https://github.com/perl6/doc/commit/8dd339edf7

[11:08] *** Actualeyes joined
[11:14] <bioduds_> hey guys

[11:14] <bioduds_> is this here valid? a hash of hashes? my %hash-set = { "técnico" =>                    { "Marcelo Oliveira" => Técnico.new( nome=>"Marcelo Oliveira", gênero=>"Homem", idade=>49, rate=>3.88 ) },                   { "Levir Culpi" => Técnico.new( nome=>"Levir Culpi", gênero=>"Homem", idade=>52, rate=>4.12 ) },                  { "Cuca" => Técnico.new( nome=>"Cuca", gênero=>"Homem", idade=>49, rate=>"-" ) },                   "tim

[11:15] <psch> m: my %h = foo => { bar => 1, baz => 2 }; say %h<foo><bar>

[11:15] <camelia> rakudo-moar 539a7d: OUTPUT«1␤»

[11:16] <psch> bioduds_: no, it's not, because you're assigning a one-item list to a hash

[11:16] <psch> m: my %h = { a => 1 }

[11:16] <camelia> rakudo-moar 539a7d: OUTPUT«Potential difficulties:␤    Useless use of hash composer on right side of hash assignment; did you mean := instead?␤    at <tmp>:1␤    ------> 3my %h = { a => 1 }7⏏5<EOL>␤»

[11:16] <psch> m: my %h = { a => { b => 2 } }

[11:16] <camelia> rakudo-moar 539a7d: OUTPUT«Potential difficulties:␤    Useless use of hash composer on right side of hash assignment; did you mean := instead?␤    at <tmp>:1␤    ------> 3my %h = { a => { b => 2 } }7⏏5<EOL>␤»

[11:16] <psch> oh, no, my private test was just weird

[11:16] <psch> bioduds_: do you get an error from the compiler?  or just that warning

[11:16] <psch> ?

[11:17] <psch> bioduds_: because in general we try to make the compiler make sense when it says something :)

[11:23] *** domidumont joined
[11:23] <bioduds_> warning I guess

[11:23] <bioduds_> Potential difficulties:     Useless use of hash composer on right side of hash assignment; did you mean := instead?     at /home/ubuntu/dev/futs/scripts/ef8a4da32a.pl:37

[11:24] <psch> m: my %h = { a => 1 }, { b => 2 }; say %h.keys # useful use of hash composers, as counter example

[11:24] <camelia> rakudo-moar 539a7d: OUTPUT«(a b)␤»

[11:24] <psch> m: my @a = [ 1, 2, 3 ]; say @a.elems

[11:24] <camelia> rakudo-moar 539a7d: OUTPUT«3␤»

[11:26] <dalek> doc: 3ad38ad | (Jan-Olof Hendig)++ | doc/Type/Str.pod6:

[11:26] <dalek> doc: Added blurb in docs for split that specifying a negative limit does not produce any meaningful result.

[11:26] <dalek> doc: review: https://github.com/perl6/doc/commit/3ad38ad682

[11:27] <bioduds_> what is it telling me? I don't understand the warning: Potential difficulties:     Useless use of hash composer on right side of hash assignment; did you mean := instead?     at /home/ubuntu/dev/futs/scripts/ef8a4da32a.pl:38

[11:28] <psch> bioduds_: { } is a hash composer, it composes a hash

[11:28] <psch> bioduds_: a hash assignment means you're assigning to a hash

[11:29] <bioduds_> why is it saying that it is useless?

[11:29] <psch> bioduds_: assignments to sigiled variables are coercive, so you're uselessly creating a hash that the assignment could create for you

[11:29] <bioduds_> oh, I think I get it, so how would be the non-useless syntax?

[11:29] <psch> leave out the outer-most hash composer

[11:30] *** rindolf joined
[11:30] *** CIAvash joined
[11:30] <bioduds_> oh, I think I got it

[11:31] <bioduds_> the outer { is useless

[11:31] <bioduds_> got it, thank guys

[11:32] *** ka joined
[11:32] <bioduds_> meaning, this here will suffice: my %hash-set = "técnico" => { "Marcelo Oliveira" => Técnico.new( nome=>"Marcelo Oliveira", gênero=>"Homem", idade=>49, rate=>3.88 ),                                "Levir Culpi" => Técnico.new( nome=>"Levir Culpi", gênero=>"Homem", idade=>52, rate=>4.12 ),                               "Cuca" => Técnico.new( nome=>"Cuca", gênero=>"Homem", idade=>49, rate=>"-" ) },                 "time" => { "C

[11:32] <bioduds_> great

[11:32] *** scott joined
[11:32] <scott> I'm also learning perl6 and just cleared this up for myself in the repl. a => 1 is a Pair, {a => 1} is a Hash, but like they say, assigning a pair or list of pairs to a %-sigil variable coerces to hash anyway

[11:34] *** Ven_ joined
[11:36] *** Ven_ left
[11:36] *** Ven_ joined
[11:38] <scott> it's also fine to put regular parentheses around your list of pairs, as in `my %h = ( a => 1, b => 2, ... )`, since that's still just a list of pairs

[11:40] <SmokeMachine____> moritz_: yes

[11:41] *** mst_ is now known as mst

[11:41] *** mst left
[11:41] *** mst joined
[11:42] *** mst is now known as mst_

[11:42] *** mst_ is now known as mst

[11:46] *** Ven_ left
[11:49] *** ka left
[11:55] *** infina left
[11:55] *** infina joined
[11:56] *** ka joined
[12:05] *** 92AAADCOE left
[12:06] *** ka left
[12:08] *** ka joined
[12:20] *** sammers joined
[12:21] *** rindolf left
[12:30] *** dayangkun joined
[12:36] *** rindolf joined
[12:36] *** bstamour joined
[12:40] *** dayangkun left
[12:40] *** dayangkun joined
[12:44] *** pmurias joined
[12:45] *** dayangkun left
[12:45] *** bstamour left
[12:47] *** Zoffix joined
[12:48] <Zoffix> scott, I recommend you think of Hash as %(a => 1) rather than {a => 1}. It's easy to get tripped up in cases where the curly version gets treated as a block

[12:48] <Zoffix> m: $_ = 42; dd { a => $_ } # case in point

[12:48] <camelia> rakudo-moar 539a7d: OUTPUT«-> ;; $_? is raw { #`(Block|57555136) ... }␤»

[12:49] <Zoffix> scott, also, you don't need any parentheses at all. my %h = a => 1, b => 2; works

[12:49] <Zoffix> m: my %h = a => 1, b => 2;

[12:49] <camelia> rakudo-moar 539a7d: ( no output )

[12:49] <Zoffix> m: my %h = a => 1, b => 2; dd %h

[12:49] <camelia> rakudo-moar 539a7d: OUTPUT«Hash %h = {:a(1), :b(2)}␤»

[12:49] <scott> heh, I was just messing with cases involving that {} confusion

[12:49] <Zoffix> m: my %h = :1a, :2b; dd %h

[12:49] <camelia> rakudo-moar 539a7d: OUTPUT«Hash %h = {:a(1), :b(2)}␤»

[12:50] <scott> for multiline hashes, it seems nicer to have a delimiter around it

[12:50] <Zoffix> .oO( Death to parentheses! )

[12:50] <scott> the semicolon looks really awkward when there is no delimiter 

[12:51] <scott> on a line by itself, or taking a place where a trailing comma should be

[12:55] <scott> relatedly, I'm attempting to grok the whole variables/bindings/assignment situation in perl6. are there any important differences between `my %h = :1a, :2b` and `my Hash $h := %(:1a, :2b)` (post-creation)? they both seem to handle assignment the same way, they seem to have the same .VAR type

[12:56] *** rindolf left
[12:57] *** pierre_ joined
[12:57] <llfourn_> scott: you don't really need the 'Hash' in the second one if you want it to be like the first

[12:57] <llfourn_> also % will behave differently in for loops to $

[12:57] *** ilbot3 left
[12:57] *** ilbot3 joined
[12:58] <llfourn_> m: my %a = one => "two",three => "four"; for %a { .say }

[12:58] <camelia> rakudo-moar 539a7d: OUTPUT«three => four␤one => two␤»

[12:58] <llfourn_> m: my $a := %( one => "two",three => "four"); for $a { .say }

[12:58] <camelia> rakudo-moar 539a7d: OUTPUT«three => four␤one => two␤»

[12:58] <llfourn_> oh maybe I'm wrong about that

[12:58] <llfourn_> m: my $a := %( one => "two",three => "four"); for $a { .^name.say }

[12:58] <camelia> rakudo-moar 539a7d: OUTPUT«Pair␤Pair␤»

[12:59] <scott> in this case $a.VAR isn't Scalar, it's Hash

[12:59] <llfourn_> m: my $a = %( one => "two",three => "four"); for $a { .^name.say }

[12:59] <camelia> rakudo-moar 539a7d: OUTPUT«Hash␤»

[12:59] *** Zoffix left
[12:59] <llfourn_> oh you're right that's the difference

[12:59] <llfourn_> so the container type determines loop behaviour rather than the sigil

[12:59] <llfourn_> good to know :)

[13:00] <scott> basically I'm trying to find out if I can reduce all sigils to special cases of $ to help my mental model

[13:01] <llfourn_> I think sigils still affect assignment

[13:01] <llfourn_> like when you use '=' rather than ':='

[13:01] <scott> '=' seems to depend again on the container, not the sigil

[13:02] <scott> once I make $h like above, assigning to it later works the same as for a normal %h

[13:02] <llfourn_> m: my @a = <one two three>; say @a

[13:02] <camelia> rakudo-moar 539a7d: OUTPUT«[one two three]␤»

[13:02] <llfourn_> m: my Array $a = <one two three>; say $a

[13:02] <camelia> rakudo-moar 539a7d: OUTPUT«Type check failed in assignment to $a; expected Array but got List ($("one", "two", "three"))␤  in block <unit> at <tmp> line 1␤␤»

[13:02] <scott> right, that's not the case I am referring to

[13:03] <scott> that's assigning to a Scalar-wrapped Array

[13:03] <llfourn_> m: my Array $a := [one two three]; $a = <one two three>; say $a # oh I see sorry

[13:03] <camelia> rakudo-moar 539a7d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    three used at line 1␤    two used at line 1␤␤»

[13:03] <llfourn_> m: my Array $a := [<one two three>]; $a = <one two three>; say $a # :S

[13:03] <camelia> rakudo-moar 539a7d: OUTPUT«Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[13:03] *** wamba left
[13:04] <scott> interesting

[13:04] <scott> I'm unsure what makes @a mutable and $a not when their .VARs are both Array

[13:04] <llfourn_> you can have @a immuteable as well

[13:04] *** rindolf joined
[13:04] <scott> can you make that $a mutable?

[13:05] <llfourn_> m: my @a := <one two three>; @a = <four>

[13:05] <camelia> rakudo-moar 539a7d: OUTPUT«Cannot modify an immutable Str␤  in block <unit> at <tmp> line 1␤␤»

[13:05] <scott> oh

[13:05] <llfourn_> it will be mutable if we just assign to an array

[13:05] <llfourn_> m: my $a = [<one two three>; $a = <four>; say $a

[13:05] <camelia> rakudo-moar 539a7d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable $a in declaration to initialize itself␤at <tmp>:1␤------> 3my $a = [<one two three>; $7⏏5a = <four>; say $a␤    expecting any of:␤        term␤»

[13:06] <llfourn_> m: my $a = [<one two three>]; $a = <four>; say $a; #ek

[13:06] <camelia> rakudo-moar 539a7d: OUTPUT«four␤»

[13:06] <llfourn_> but as sson as you := you get the container fo the RHS

[13:06] <llfourn_> which is immuteable above

[13:07] <llfourn_> of the*

[13:07] <scott> m: my $a = [<one two three>]; say $a.VAR.WHAT

[13:07] <camelia> rakudo-moar 539a7d: OUTPUT«(Scalar)␤»

[13:08] <scott> m: my @a = <one two three>; say @a.VAR.WHAT

[13:08] <camelia> rakudo-moar 539a7d: OUTPUT«(Array)␤»

[13:08] <scott> m: my $a := [<one two three>]; say $a.VAR.WHAT # this is what I meant, rather

[13:08] <camelia> rakudo-moar 539a7d: OUTPUT«(Array)␤»

[13:08] <scott> I'm curious what makes one mutable and the other not

[13:08] <scott> if you compare, say, my $a = 42 and my $a := 42, one is Scalar and the other is Int

[13:08] <scott> and the Scalar container makes the former mutale

[13:08] <scott> mutable*

[13:09] <llfourn_> right. you can't assign the second one for the same reason you can't do '42 = 3'

[13:10] <llfourn_> you can't do [<one two three>] = [<four>] either

[13:10] <llfourn_> so the LHS needs to be writeable

[13:11] *** domidumont left
[13:13] <scott> hmm, the $h example was writeable because %(:1a, :2b) is writeable

[13:13] <scott> but @(1, 2, 3) returns List, not Array

[13:14] <scott> I don't know how to make a writeable array without a @ variable

[13:14] <llfourn_> m: my $a := [<one two three>]; $a[3] = "four"; # this should work?

[13:14] <camelia> rakudo-moar 539a7d: ( no output )

[13:15] <llfourn_> m: my $a := @(1,2,3); say $a.^name;

[13:15] <camelia> rakudo-moar 539a7d: OUTPUT«List␤»

[13:15] <llfourn_> hmm I didn't know whtat

[13:15] <llfourn_> that*

[13:15] <scott> your example with the indexing mutates a container element, not the array

[13:16] <scott> m: my $a := [<one two three>]; push $a, "four"

[13:16] <camelia> rakudo-moar 539a7d: ( no output )

[13:16] <scott> hmm, it is writeable?

[13:16] <llfourn_> so Array,Hash - elements are writable. List,Map elements are not.

[13:17] *** ilbelkyr joined
[13:17] <scott> I still don't get what makes @a assignable

[13:17] <timotimo> awwaiid: i like your latest blog post :)

[13:18] <llfourn_> scott: as opposed to $a := [..]?

[13:18] <scott> since arrays, even when you can push to them, complain about immutable values when you assign to them

[13:18] <scott> llfourn_: right

[13:18] <scott> immutable is a bit of a misleading descriptor when you can add, remove, and mutate elements

[13:19] *** grondilu joined
[13:19] <timotimo> an array gives you a scalar container for each of the elements in it

[13:19] <llfourn_> scott: yeah I see what you mean. In the case of $a := [..]. it means the variable's container itself is not writable.

[13:19] <gfldex> is there a way to import symbols from a package into the current scope?

[13:19] <timotimo> m: (1, 2, 3, 4)[0].VAR.WHAT.say; [1, 2, 3, 4][0].VAR.WHAT.say;

[13:19] <camelia> rakudo-moar 539a7d: OUTPUT«(Int)␤(Scalar)␤»

[13:19] <scott> timotimo: sure, that explains one of the things in my list (mutating) but not the rest

[13:20] <timotimo> i haven't backlogged yet :)

[13:20] <scott> you can also push to an "immutable" array

[13:20] <llfourn_> scott: all arrays are mutable

[13:20] <grondilu> m: (my $ := [])[0] = pi

[13:20] <camelia> rakudo-moar 539a7d: ( no output )

[13:20] <llfourn_> the variable that contains the array object may not be

[13:21] <timotimo> ah

[13:21] <timotimo> we differentiate on the syntax level between listy assignment and itemy assignment 

[13:21] <timotimo> that's a thing that tripped me up a few times

[13:22] <scott> llfourn_: I'm looking for confirmation of that distinction

[13:22] <scott> with scalars it's obvious, like Scalar vs Int

[13:22] <scott> normally a $ variable is bound to a Scalar container

[13:22] <grondilu> [] is a scalar container

[13:22] <scott> but so far I haven't been able to observe the container of a @ variable

[13:23] <scott> it just shows up as Array

[13:23] <scott> but assigning to an Array elsewhere fails

[13:23] <grondilu> $@

[13:23] <llfourn_> hmm I'm not sure how you introspect the difference

[13:23] * grondilu stops trying to disrupt the conversation :)

[13:24] <timotimo> m: my $foo := [<one two three>]; @$foo = <nein nein nein>; say $foo.perl

[13:24] <camelia> rakudo-moar 539a7d: OUTPUT«["nein", "nein", "nein"]␤»

[13:24] <timotimo> m: my $foo := [<one two three>]; $foo = <nein nein nein>; say $foo.perl

[13:24] <camelia> rakudo-moar 539a7d: OUTPUT«Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[13:24] <llfourn_> hmmm i didn't know you could do that

[13:25] <timotimo> the first one uses the p6store op, the second one uses the assign op

[13:25] <llfourn_> so @$foo turns it into array assignment

[13:25] <timotimo> "op" as in nqp::thething

[13:25] <llfourn_> mmm pretty handy :)

[13:26] <scott> what makes @$foo different from $foo? is there any type of thing I can call on it?

[13:26] <scott> all the .WHATs and .VAR.WHATs are the same

[13:26] <timotimo> it's just a thing the parser does

[13:26] <timotimo> i.e. it's not about the type, it's about the source code itself

[13:26] *** pierre_ left
[13:27] <scott> so it would not work to first bind @$foo to something and then assign to that new thing?

[13:27] <llfourn_> mm so it's a syntactical distiction rather than a object property

[13:27] <llfourn_> m: my $foo; @$foo := <one two three> # eh?

[13:27] <camelia> rakudo-moar 539a7d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Cannot use bind operator with this left-hand side␤at <tmp>:1␤------> 3my $foo; @$foo := <one two three> # eh?7⏏5<EOL>␤»

[13:28] <llfourn_> m: my $foo; @$foo = <one two three>

[13:28] <camelia> rakudo-moar 539a7d: OUTPUT«Cannot modify an immutable Any␤  in block <unit> at <tmp> line 1␤␤»

[13:28] <timotimo> scott: correct

[13:28] <scott> confirmed my own question in the repl

[13:28] <scott> I assumed it was like @$foo returned a new type of thing, and then we assigned to that

[13:28] <scott> timotimo: are there good docs on this?

[13:29] <timotimo> not sure. if not, there ought to be :)

[13:29] <scott> I find the variable/binding/container stuff some of the most complex stuff in perl6 so far

[13:29] <llfourn_> it's pretty tricky tbh :)

[13:29] <scott> hard to see what justifies the complexity a lot of the time

[13:29] *** andrzejku joined
[13:30] <scott> unlike, say, operators, which look complex at first but I generally understood after just a day

[13:30] <llfourn_> I think auto-vivification among other things

[13:30] <llfourn_> m: my %h; my $a := %h<one>; say %h; %a = "foo"; say %h

[13:30] <camelia> rakudo-moar 539a7d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '%a' is not declared. Did you mean '$a'?␤at <tmp>:1␤------> 3my %h; my $a := %h<one>; say %h; 7⏏5%a = "foo"; say %h␤»

[13:31] <llfourn_> m: my %h; my $a := %h<one>; say %h; $a = "foo"; say %h

[13:31] <camelia> rakudo-moar 539a7d: OUTPUT«{}␤{one => foo}␤»

[13:31] <timotimo> that's definitely a tricky part, yes

[13:31] <timotimo> but also incredibly useful

[13:32] <llfourn_> I am no use at exlpaining it but I also can verify the distinction between variables and containers is very useful.

[13:35] <dogbert17> .seen moritz

[13:35] <yoleaux> I saw moritz 22 Sep 2016 13:51Z in #perl6: <moritz> we don't call it dumbmatch for no reason!

[13:35] <dogbert17> moritz: are you out there?

[13:36] <scott> thanks for the discussion, all. 'night

[13:36] <timotimo> gnite scott 

[13:36] <llfourn_> night :)

[13:38] *** rgrinberg joined
[13:40] *** masak_ is now known as masak

[13:42] <masak> greetings, #perl6

[13:43] <masak> I see there was a netsplit storm here while I was away... :)

[13:43] *** kaare joined
[13:43] *** kaare is now known as Guest94548

[13:44] <timotimo> oh, i missed that

[13:46] *** rgrinberg left
[13:47] *** rgrinberg joined
[14:01] *** MilkmanDan left
[14:01] *** setty1 left
[14:01] *** MilkmanDan joined
[14:05] *** skids joined
[14:07] *** rgrinberg left
[14:09] <timotimo> https://twitter.com/kelseyhightower/status/530797723596111872/photo/1  -  teehee

[14:18] *** tushar joined
[14:25] *** tushar left
[14:25] *** rindolf left
[14:28] *** Guest94548 left
[14:29] *** ka left
[14:30] *** Guest94548 joined
[14:40] *** AlexDaniel joined
[14:41] *** rindolf joined
[14:47] *** ka joined
[14:52] *** BenGoldberg joined
[14:52] *** Xliff__ joined
[14:56] *** domidumont joined
[15:00] <skids> Hrm... COMPOSE{} is NYI?

[15:03] <skids> Oh I guess that

[15:03] <skids> 's what the role body is anyway.

[15:07] *** rgrinberg joined
[15:09] *** Ven_ joined
[15:13] *** ka left
[15:33] *** Celelibi_ is now known as Celelibi

[15:35] *** firstdayonthejob joined
[15:36] *** Ven_ left
[15:37] <scott> haha, once I realized what `@a[*-1]` was really doing, I came up with `@a[*/2]` and @`a[$x mod *]`

[15:38] <scott> the latter of which is something that has come up in real stuff I've written

[15:38] <scott> cleanest modular indexing I've seen

[15:39] *** itaipu joined
[15:39] <timotimo> i've used * div 2, * * 3 div 4 and * div 4 in the past to get percentiles on a sorted array

[15:39] <timotimo> you can even put them into a list inside the same [foo]

[15:40] <scott> yeah, nice

[15:40] *** Ven_ joined
[15:41] <AlexDaniel> m: say ‘foo bar’ ~~ / foo { False } /

[15:41] <camelia> rakudo-moar 362349: OUTPUT«｢foo｣␤»

[15:41] <timotimo> you mean <?{ False }>

[15:41] <timotimo> alternatively <!> is a token that never matches

[15:41] <AlexDaniel> timotimo: I did not even ask a question yet

[15:41] <AlexDaniel> timotimo: thank you

[15:41] <timotimo> well ... :)

[15:41] <AlexDaniel> <?{}> is what I needed

[15:42] <psch> or <!{}>, maybe

[15:42] <timotimo> <{ }> will let you interpolate the string result of code as a piece of regex

[15:45] *** Ven_ left
[15:45] *** skids left
[15:48] *** Ven_ joined
[15:53] *** Ven_ left
[15:53] *** Ven_ joined
[15:56] *** khw joined
[15:58] *** Ven_ left
[16:00] *** wamba joined
[16:02] *** Ven_ joined
[16:22] *** andrzejku left
[16:24] *** domidumont left
[16:24] *** Ven_ left
[16:24] *** domidumont joined
[16:36] *** tushar joined
[16:37] *** Ven_ joined
[16:41] *** zakharyas joined
[16:41] *** girafe joined
[16:44] *** Ven_ left
[16:45] *** Actualeyes left
[16:51] *** girafe left
[17:00] *** lichtkind__ joined
[17:02] *** Ven_ joined
[17:03] *** girafe joined
[17:13] *** Ven_ left
[17:15] *** Ven_ joined
[17:19] *** andrzejku joined
[17:28] *** Ven_ left
[17:32] *** Ven_ joined
[17:37] <mst> hmm, how does '.foo' on its own become a method call? (and more importantly, how do I produce such a thing ;)

[17:37] *** RabidGravy joined
[17:40] <scott> mst: .foo with no receiver is short for $_.foo

[17:40] *** Ven_ left
[17:40] <mst> scott: yes

[17:40] <mst> scott: how

[17:41] <scott> mst: it's just part of the grammar. I'm not sure I understand the question

[17:42] <mst> ok, so, I can define a postfix operator .* and $foo.* will work fine

[17:43] <mst> I'm wondering how I annotate or otherwise mess with it

[17:43] <mst> to be able to default to $_

[17:44] *** zakharyas left
[17:44] <geekosaur> you shouldn't have to, it's built into the grammar

[17:44] <mst> ...

[17:45] <geekosaur> oh, I see, you want a not-a-method that looks like a method call

[17:45] *** benchable6 joined
[17:45] *** committable6 joined
[17:45] <geekosaur> I think you'd have to mutate the grammar to support that

[17:45] *** bisectable6 joined
[17:46] <mst> right, cuz as I say, I can totally do it as a postfix op

[17:46] <geekosaur> you can't do it inside the operator definition itself, if you declared it to be postfix then it will want a term to apply the postfix to

[17:47] <mst> right, I was wondering if there was some special magic that said "this is a postfix op that defaults to $_"

[17:47] <geekosaur> no, I think you'd also have to declare a term:<> version if you didn't want to have to edit the grammar

[17:47] *** Dunearhp joined
[17:48] *** benchable6 left
[17:48] *** committable6 left
[17:48] *** bisectable6 left
[17:48] <mst> where would I find docs on that?

[17:49] *** benchable6 joined
[17:49] *** bisectable6 joined
[17:49] *** committable6 joined
[17:49] <geekosaur> (also I would disrecommend .* because of the special method syntax https://docs.perl6.org/language/operators#postfix_.*

[17:49] <scott> by the way, why are there methods for calling all methods?

[17:50] <scott> err, operators*

[17:51] *** rgrinberg left
[17:51] <timotimo> mst: it might be enough to define a term that uses CALLER::<$_> for its invocant

[17:52] <timotimo> m: sub term:<.notamethod> { CALLER::<$_>.say }; $_ = "hello mst"; .notamethod

[17:52] <camelia> rakudo-moar e4e823: OUTPUT«hello mst␤»

[17:52] <timotimo> mst: that tickle your fancy? :)

[17:52] <geekosaur> hm. the existence of term:<> is mentioned in the docs for Operators, but not what that and the others mean (should be in Grammars but that is rather sparse currently)

[17:52] <timotimo> ah, geekosaur suggested the term already

[17:53] <mst> that would do the trick, excellent

[17:54] <geekosaur> I guess at the moment the only documentation for those is http://design.perl6.org/S02.html#Grammatical_Categories

[17:56] <dalek> whateverable: 5b9ca5d | (Aleks-Daniel Jakimenko-Aleksejev)++ | / (4 files):

[17:56] <dalek> whateverable: Use Sift4 to allow typos in bot names

[17:56] <dalek> whateverable: 

[17:56] <dalek> whateverable: For example, it will now allow you to type “omitable6”.

[17:56] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/5b9ca5de83

[17:56] <AlexDaniel> omitable6: HEAD say 42

[17:56] <committable6> AlexDaniel, ¦«HEAD»: 42

[17:56] <AlexDaniel> bsicetable6: exit 42

[17:56] <bisectable6> AlexDaniel, On both starting points (old=2015.12 new=376b5f4) the exit code is 42 and the output is identical as well

[17:56] <bisectable6> AlexDaniel, Output on both points: 

[17:56] <AlexDaniel> jnthn: ↑ ;)

[17:58] *** labster joined
[17:59] <AlexDaniel> .tell Zoffix IRC::Client and Perl 6 are amazing. See http://irclog.perlgeek.de/perl6/2016-09-24#i_13272146

[17:59] <yoleaux> AlexDaniel: I'll pass your message to Zoffix.

[18:00] *** Ven_ joined
[18:05] <ugexe> scott: you can't think of a reason to call sets of methods?

[18:06] *** xdxdxdxd joined
[18:06] <xdxdxdxd> How do I check if a variable is an int

[18:06] <timotimo> do you mean Int or native int?

[18:07] <timotimo> also, do you mean "is defined to hold" or "currently holds"?

[18:07] <xdxdxdxd> if I did ' my $a = 1 ' and ' my $b = "hello" '

[18:07] <xdxdxdxd> $a would be int

[18:07] <xdxdxdxd> and $b wouldn't

[18:07] <xdxdxdxd> how would I check that

[18:07] <ugexe> m: role Logger1 { method log { say "logger1"; } }; role Logger2 { method log { say "logger2" } }; class MyClass { }; my $class = MyClass.new; $class does Logger1; $class.*log; $class does Logger2; $class.*log

[18:07] <camelia> rakudo-moar e4e823: OUTPUT«logger1␤logger2␤logger1␤»

[18:07] <geekosaur> Int, not int

[18:08] <timotimo> xdxdxdxd: smart match ought to help with that. say $a ~~ Int; say $b ~~ Int

[18:08] <geekosaur> $a ~~ Int

[18:08] <xdxdxdxd> ah

[18:08] <xdxdxdxd> didn't know you could do that with ~~

[18:08] <timotimo> ~~ does a lot of things, one of them is type checking

[18:09] <FROGGS> does somebody now of a Perl [5|6] Samba/CIFS server that actually works?

[18:09] *** ocbtec left
[18:10] <scott> ugexe: I can't think of a reason to call sets of methods with the same name on a single object

[18:10] <scott> ugexe: seems aggressively niche for an operator

[18:10] <scott> ugexe: I was wondering if there was some really common pattern I overlooked

[18:10] <ugexe> i just showed one

[18:11] *** ocbtec joined
[18:11] <xdxdxdxd> why isn't this working: " get / ^ '/blog/' \d+ $ / => sub ($post) { ... } "

[18:12] <xdxdxdxd> that is the get sub from Bailador btw

[18:12] *** firstdayonthejob left
[18:16] <ugexe> think outside the inheritance box

[18:17] <scott> I rarely think of inheritance at all

[18:17] <scott> OOP's not really my thing

[18:19] <xdxdxdxd> how do I fix it lol

[18:19] <xdxdxdxd> I get too many positionals passed

[18:23] *** MasterDuke joined
[18:24] <ugexe> if you want someone to debug these things you need to give them more to work with

[18:24] <ugexe> m: sub get($pos) { }; get / ^ "/blog/" \d+ $ / => sub ($post) { ... }

[18:24] <camelia> rakudo-moar e4e823: ( no output )

[18:25] <ugexe> because the line you posted works. so you are leaving out a bunch of neccesary context

[18:26] <geekosaur> full source and full error message to an appropriate pastebin is usually a good idea

[18:26] *** ocbtec left
[18:31] <xdxdxdxd> http://pastebin.com/XCSkvVLi does this help

[18:31] *** zhmylove joined
[18:31] *** Ven_ left
[18:32] *** Ven_ joined
[18:32] <ugexe> thats not the full error message

[18:50] *** ilogger2 joined
[18:50] *** ChanServ sets mode: +v ilogger2

[18:50] *** cxreg joined
[18:50] *** alnewkirk joined
[18:50] *** ambs joined
[18:50] *** hobbs joined
[18:50] *** decent_ joined
[18:50] *** sivoais joined
[18:50] *** markk joined
[18:50] *** zengargoyle joined
[18:50] *** erdic joined
[18:50] *** TimToady joined
[18:51] *** ChoHag joined
[18:51] *** tushar joined
[18:52] *** revdiablo joined
[18:52] *** AlexDaniel joined
[18:52] *** Jonis joined
[18:52] *** pmichaud joined
[18:52] <AlexDaniel> eh

[18:52] *** john51 joined
[18:52] *** stmuk_ joined
[18:52] *** tony-o joined
[18:52] *** go|dfish joined
[18:52] <AlexDaniel> a bit stormy today

[18:56] *** tushar left
[18:56] *** Jonis left
[18:56] *** ambs left
[18:57] *** ilogger2_ joined
[18:57] *** nadim joined
[18:57] *** Timbus joined
[18:57] *** japhb_ joined
[18:57] *** melezhik_ joined
[18:58] *** roguelazer_ joined
[18:58] *** hobbified joined
[18:58] *** tsadok joined
[18:58] *** nine_ joined
[18:58] *** kshannon_ joined
[18:58] *** jnthn joined
[18:59] *** kmwallio_ joined
[18:59] *** tony-o joined
[18:59] *** sjn joined
[18:59] *** poisonby_ joined
[18:59] *** pecastro joined
[18:59] *** hcit joined
[18:59] *** revdiablo joined
[18:59] *** masak joined
[18:59] *** arnsholt joined
[18:59] *** masak is now known as Guest98586

[19:00] *** psch joined
[19:00] *** literal_ joined
[19:00] *** bisectable6 joined
[19:00] *** sQuEE` joined
[19:01] *** [particle] joined
[19:02] *** NEveD joined
[19:02] *** broquaint joined
[19:02] *** rmmm joined
[19:02] *** mspo_ joined
[19:02] *** ggoebel__ joined
[19:02] *** atacama joined
[19:02] *** kst``` joined
[19:02] *** mithaldu_ left
[19:03] *** moritz_ joined
[19:03] *** rmmm is now known as 32NAB4ASC

[19:03] *** dalek joined
[19:03] *** ChanServ sets mode: +v dalek

[19:03] *** jdv79_ joined
[19:03] *** roguelazer_ is now known as roguelazer

[19:03] *** Lucas_One left
[19:03] *** yeltzooo joined
[19:03] *** eythian joined
[19:03] *** alnewkirk joined
[19:03] *** kmwallio_ is now known as kmwallio

[19:04] *** perigrin joined
[19:04] *** nemo_ joined
[19:04] *** TheDir joined
[19:04] *** ponbiki_ joined
[19:04] *** PerlJam joined
[19:04] *** Alikzus_ joined
[19:04] *** nowan joined
[19:04] *** andrzejku joined
[19:04] *** gabiruh joined
[19:04] *** mst_ joined
[19:04] *** canopus joined
[19:04] *** Bucciarati joined
[19:05] *** samcv joined
[19:05] *** pochi joined
[19:05] *** AlexDaniel joined
[19:05] *** huf joined
[19:05] *** ribasushi joined
[19:05] *** itaipu joined
[19:05] *** avar joined
[19:05] *** avar left
[19:05] *** avar joined
[19:06] *** Zoffix joined
[19:06] <Zoffix> m: role Role { proto method foo (|) {*}; multi method foo ($x) { say "role one" } }; class Foo does Role { multi method foo (|) {*}; multi method foo (|) {say "Go it!"} }.new.foo: 42

[19:06] <yoleaux> 17:59Z <AlexDaniel> Zoffix: IRC::Client and Perl 6 are amazing. See http://irclog.perlgeek.de/perl6/2016-09-24#i_13272146

[19:06] <Zoffix> Is there some way to have the class's multi override the stuff provided by the role?

[19:06] *** bob777 joined
[19:06] *** remmie joined
[19:06] *** andrewalker joined
[19:07] *** chris2 joined
[19:07] <Zoffix> Basically, I have a role that provides a bunch of methods and I want one of the classes that `does` it to die if that method is called

[19:07] <Zoffix> one particular method from that role

[19:07] *** imcsk8 joined
[19:07] *** zhmylove joined
[19:08] *** tsadok is now known as jonadab

[19:08] *** nightfrog joined
[19:08] *** chansen_ joined
[19:08] *** domidumont joined
[19:08] *** grondilu joined
[19:08] *** shmibs joined
[19:09] *** solarbunny joined
[19:09] *** Ulti joined
[19:10] *** ilbot3 joined
[19:10] *** domm1 joined
[19:10] *** raydiak joined
[19:10] *** shadowpaste joined
[19:10] *** bartolin joined
[19:10] *** lichtkind joined
[19:10] *** akiym joined
[19:11] *** bjz joined
[19:11] *** xdbr joined
[19:11] *** [Coke] joined
[19:11] *** simcop2387 joined
[19:11] <Zoffix> Figured it out: role Role { proto method foo (|) {*}; multi method foo ($x) { say "role one" } }; class Foo does Role { proto method foo (|) {say "Go it!"} }.new.foo: 4323

[19:12] *** silug_ joined
[19:12] *** ingy joined
[19:12] *** hoelzro joined
[19:12] *** m0ltar joined
[19:13] *** mtj_ joined
[19:13] *** xinming joined
[19:13] *** wamba joined
[19:13] *** cgfbee joined
[19:13] *** lucs joined
[19:14] *** k-man_ joined
[19:14] *** ruoso joined
[19:14] *** john51 joined
[19:14] *** Woodi joined
[19:15] *** RabidGravy joined
[19:15] *** MilkmanDan joined
[19:16] *** clkao joined
[19:16] *** jstimpfle joined
[19:16] *** jkva joined
[19:16] *** camelia joined
[19:16] *** gensym joined
[19:17] *** stmuk_ joined
[19:17] *** emdashcomma joined
[19:17] *** mniip joined
[19:17] *** pmurias joined
[19:17] *** Gothmog_ joined
[19:18] *** sunnavy joined
[19:18] *** awwaiid joined
[19:18] *** ambs joined
[19:18] <dalek> doc: 426d4e2 | (Zoffix Znet)++ | doc/Language/typesystem.pod6:

[19:18] <dalek> doc: where clauses smartmatch so we don't need to smartmatch the smartmatch

[19:18] <dalek> doc: 

[19:18] <dalek> doc: Also... smartmatch

[19:18] <dalek> doc: review: https://github.com/perl6/doc/commit/426d4e2808

[19:18] *** Possum joined
[19:18] *** peteretep joined
[19:18] *** ChanServ sets mode: +v camelia

[19:19] *** tbrowder joined
[19:19] *** domidumont left
[19:19] *** ssm joined
[19:19] *** eyck joined
[19:19] *** Khisanth joined
[19:19] *** ringer1 joined
[19:19] *** FROGGS joined
[19:20] *** BuildTheRobots joined
[19:20] *** gypsydave5 joined
[19:20] *** PotatoGim joined
[19:20] *** zoosha joined
[19:20] *** telex joined
[19:20] *** telex left
[19:21] *** jkva left
[19:21] *** dj_goku_ joined
[19:21] *** dj_goku_ left
[19:21] *** dj_goku_ joined
[19:22] *** stux|RC-only left
[19:22] *** sergot joined
[19:22] *** telex joined
[19:22] *** esh joined
[19:23] *** a3r0 joined
[19:23] *** Praise joined
[19:23] *** Praise left
[19:23] *** Praise joined
[19:24] *** stux|RC-only joined
[19:24] *** olinkl joined
[19:25] *** tailgate joined
[19:25] *** pmurias left
[19:25] *** Jonis joined
[19:25] *** w4and0er96 joined
[19:25] *** notbenh_ joined
[19:26] *** ggherdov joined
[19:27] *** mithaldu_ joined
[19:28] *** Lucas_One joined
[19:28] *** eliasr joined
[19:28] *** darutoko joined
[19:28] *** darutoko left
[19:28] *** sftp joined
[19:29] *** Guest53008 joined
[19:29] *** CIAvash joined
[19:29] *** SmokeMachine____ joined
[19:29] *** mindos joined
[19:30] *** konobi_ joined
[19:30] *** abruanese joined
[19:30] *** jcallen joined
[19:30] *** markk joined
[19:30] *** hanekomu joined
[19:30] *** timeless joined
[19:30] *** ChoHag joined
[19:31] *** pmurias joined
[19:32] *** nebuchadnezzar joined
[19:34] *** infina joined
[19:34] *** sivoais joined
[19:35] *** smash joined
[19:35] *** mrsolo joined
[19:35] *** Zoffix__ joined
[19:36] *** Xliff_ joined
[19:36] *** noganex joined
[19:36] *** mohae_ joined
[19:37] *** djbkd joined
[19:37] *** dogbert2 joined
[19:37] *** andrewalker left
[19:37] *** kst```` joined
[19:37] *** bob778 joined
[19:37] *** [particle]1 joined
[19:38] *** user10 joined
[19:38] *** Zoffix left
[19:38] *** Zoffix__ is now known as Zoffix

[19:38] *** cpage_ joined
[19:38] *** nadim_ joined
[19:39] *** ruoso left
[19:39] *** lucs left
[19:39] *** xinming left
[19:39] *** m0ltar left
[19:39] *** bartolin left
[19:39] *** zhmylove left
[19:39] *** imcsk8 left
[19:39] *** itaipu left
[19:39] *** [particle] left
[19:39] *** literal_ left
[19:39] *** psch left
[19:39] *** melezhik_ left
[19:39] *** Timbus left
[19:39] *** user10 is now known as user9

[19:39] *** obfusk_ joined
[19:39] *** ranguard left
[19:39] *** sivoais left
[19:39] *** Guest53008 left
[19:39] *** [Coke] left
[19:39] *** lichtkind left
[19:39] *** nightfrog left
[19:39] *** bob777 left
[19:39] *** kst``` left
[19:39] *** nadim left
[19:39] *** crucialrhyme left
[19:39] *** bob778 is now known as bob777

[19:40] *** ShimmerFairy joined
[19:40] *** itaipu joined
[19:40] *** El_Che joined
[19:40] *** garu joined
[19:40] *** captain-adequate joined
[19:40] *** Unavowed joined
[19:40] *** dsp_ joined
[19:40] *** mattp_ joined
[19:42] *** ufobat joined
[19:42] *** moritz_ is now known as moritz

[19:43] *** eliasr left
[19:43] *** rudi_s joined
[19:45] *** TEttinger joined
[19:45] *** Timbus joined
[19:45] *** m0ltar joined
[19:46] *** bartolin joined
[19:48] *** eliasr joined
[19:49] *** imcsk8 joined
[19:49] *** zhmylove joined
[19:50] *** protium joined
[19:51] *** ruoso joined
[19:51] *** noganex_ joined
[19:51] *** djbkd_ joined
[19:51] *** ufobat left
[19:51] *** Zoffix__ joined
[19:51] *** xiaomiao joined
[19:52] *** [particle] joined
[19:52] *** [particle]1 left
[19:52] *** ugexe joined
[19:53] *** mohae joined
[19:53] *** cpage_ left
[19:53] *** konobi_ left
[19:53] *** emdashcomma left
[19:53] *** garu left
[19:53] *** El_Che left
[19:53] *** user9 left
[19:53] *** djbkd left
[19:53] *** tailgate left
[19:53] *** zoosha left
[19:53] *** gypsydave5 left
[19:53] *** eyck left
[19:53] *** awwaiid left
[19:53] *** chris2 left
[19:53] *** user10 joined
[19:54] *** user10 is now known as user9

[19:54] *** zoosha_ joined
[19:54] *** bartolin left
[19:54] *** Unavowed left
[19:54] *** captain-adequate left
[19:54] *** itaipu left
[19:54] *** ShimmerFairy left
[19:54] *** bob777 left
[19:54] *** dogbert2 left
[19:54] *** mohae_ left
[19:54] *** noganex left
[19:54] *** Zoffix left
[19:54] *** nebuchadnezzar left
[19:54] *** pmurias left
[19:54] *** hanekomu left
[19:54] *** markk left
[19:54] *** jcallen left
[19:54] *** CIAvash left
[19:54] *** Praise left
[19:54] *** esh left
[19:54] *** sergot left
[19:54] *** dj_goku_ left
[19:54] *** FROGGS left
[19:54] *** ringer1 left
[19:54] *** ambs left
[19:54] *** sunnavy left
[19:54] *** Gothmog_ left
[19:54] *** gensym left
[19:54] *** vytas joined
[19:54] *** lucs joined
[19:54] *** Jonis left
[19:54] *** andrewalker joined
[19:55] *** konobi joined
[19:55] *** konobi is now known as Guest26058

[19:56] *** chris2 joined
[19:56] *** mniip left
[19:57] *** skaji joined
[19:57] *** wamba left
[19:57] *** zacts joined
[20:00] *** Zoffix__ is now known as Zoffix

[20:01] *** andrzejku left
[20:02] *** melezhik joined
[20:03] *** jcallen joined
[20:03] *** mniip joined
[20:04] *** Upasaka joined
[20:04] *** gensym joined
[20:04] *** Praise- joined
[20:04] *** Praise- left
[20:04] *** Praise- joined
[20:04] *** mst_ is now known as mst

[20:04] *** mst left
[20:04] *** mst joined
[20:05] *** captain-adequate joined
[20:05] *** krunen joined
[20:05] *** bob777 joined
[20:05] *** nightfrog joined
[20:05] *** dogbert2 joined
[20:06] *** sivoais joined
[20:06] *** esh joined
[20:06] *** markk joined
[20:06] *** emdashcomma joined
[20:06] *** Praise- is now known as Praise

[20:06] *** freeze joined
[20:06] *** lichtkind joined
[20:07] *** FROGGS joined
[20:07] *** gypsydave5 joined
[20:07] *** Gothmog joined
[20:07] *** Gothmog is now known as Gothmog_

[20:07] *** awwaiid joined
[20:07] *** ShimmerFairy joined
[20:08] *** ambs joined
[20:08] *** FROGGS left
[20:08] *** cpage_ joined
[20:08] *** psch joined
[20:08] *** f3ew joined
[20:09] *** giraffe_ joined
[20:09] *** eyck joined
[20:09] *** dj_goku joined
[20:09] *** dj_goku left
[20:09] *** dj_goku joined
[20:10] *** Jonis joined
[20:11] *** garu joined
[20:12] *** user10 joined
[20:13] *** bartolin joined
[20:15] *** cpage_ left
[20:15] *** emdashcomma left
[20:15] *** ribasushi left
[20:15] *** nightfrog left
[20:15] *** canopus left
[20:15] *** ponbiki_ left
[20:15] *** kmwallio left
[20:15] *** zostay left
[20:15] *** jonadab left
[20:16] *** hobbified left
[20:16] *** Alikzus joined
[20:16] *** perlpilot joined
[20:17] *** bartolin left
[20:17] *** jcallen_ joined
[20:17] *** notostraca joined
[20:17] *** Upasaka_ joined
[20:17] *** jstimpfl1 joined
[20:17] *** woodruffw joined
[20:17] *** woodruffw left
[20:17] *** woodruffw joined
[20:17] *** woodruffw left
[20:17] *** skaji_ joined
[20:17] *** mattp__ joined
[20:17] *** AlexDani` joined
[20:17] *** woodruffw joined
[20:17] *** woodruffw left
[20:17] *** woodruffw joined
[20:17] *** woodruffw left
[20:17] *** nadim joined
[20:17] *** cosimo joined
[20:17] *** avuserow joined
[20:17] *** [particle]1 joined
[20:17] *** nemo joined
[20:17] *** woodruffw joined
[20:17] *** nemo is now known as Guest45219

[20:17] *** sergot joined
[20:17] *** dsp__ joined
[20:17] *** yeltzooo9 joined
[20:17] *** Xliff joined
[20:17] *** a3r0_ joined
[20:17] *** MilkmanD1n joined
[20:17] *** shadowpaste0 joined
[20:17] *** djbkd joined
[20:17] *** captain-1dequate joined
[20:17] *** noganex joined
[20:17] *** ambs_ joined
[20:17] *** felher joined
[20:17] *** yubimusubi joined
[20:17] *** user9 left
[20:17] *** timeless left
[20:17] *** peteretep left
[20:17] *** clkao left
[20:17] *** chansen_ left
[20:17] *** sivoais left
[20:17] *** skaji left
[20:17] *** andrewalker left
[20:17] *** [particle] left
[20:17] *** eliasr left
[20:17] *** ggherdov left
[20:17] *** tbrowder left
[20:17] *** Jonis left
[20:17] *** dj_goku left
[20:17] *** awwaiid left
[20:17] *** Gothmog_ left
[20:17] *** bob777 left
[20:17] *** Guest26058 left
[20:17] *** protium left
[20:17] *** zhmylove left
[20:17] *** Timbus left
[20:17] *** TEttinger left
[20:17] *** dsp_ left
[20:17] *** stux|RC-only left
[20:17] *** BuildTheRobots left
[20:17] *** Woodi left
[20:17] *** k-man_ left
[20:17] *** silug_ left
[20:17] *** raydiak left
[20:17] *** akiym left
[20:17] *** grondilu left
[20:17] *** Bucciarati left
[20:17] *** mst left
[20:17] *** gabiruh left
[20:17] *** PerlJam left
[20:17] *** jdv79_ left
[20:17] *** eyck left
[20:17] *** ambs left
[20:17] *** ShimmerFairy left
[20:17] *** giraffe_ left
[20:17] *** lichtkind left
[20:17] *** esh left
[20:17] *** krunen left
[20:17] *** captain-adequate left
[20:17] *** Praise left
[20:17] *** Upasaka left
[20:17] *** gensym left
[20:17] *** jcallen left
[20:17] *** melezhik left
[20:17] *** lucs left
[20:17] *** vytas left
[20:17] *** chris2 left
[20:17] *** zoosha_ left
[20:17] *** mohae left
[20:17] *** xiaomiao left
[20:17] *** Zoffix left
[20:17] *** djbkd_ left
[20:17] *** noganex_ left
[20:17] *** ruoso left
[20:17] *** imcsk8 left
[20:17] *** m0ltar left
[20:17] *** rudi_s left
[20:17] *** mattp_ left
[20:17] *** obfusk_ left
[20:17] *** nadim_ left
[20:17] *** kst```` left
[20:17] *** Xliff_ left
[20:17] *** mrsolo left
[20:17] *** smash left
[20:17] *** ChoHag left
[20:17] *** abruanese left
[20:17] *** a3r0 left
[20:17] *** telex left
[20:17] *** PotatoGim left
[20:17] *** Khisanth left
[20:17] *** Possum left
[20:17] *** stmuk_ left
[20:17] *** camelia left
[20:17] *** jstimpfle left
[20:17] *** RabidGravy left
[20:17] *** MilkmanDan left
[20:17] *** john51 left
[20:17] *** cgfbee left
[20:17] *** mtj_ left
[20:17] *** ingy left
[20:17] *** bjz left
[20:17] *** shadowpaste left
[20:17] *** ilbot3 left
[20:17] *** Ulti left
[20:17] *** shmibs left
[20:17] *** simcop2387 left
[20:17] *** remmie left
[20:17] *** avar left
[20:17] *** huf left
[20:17] *** AlexDaniel left
[20:17] *** pochi left
[20:17] *** Alikzus_ left
[20:17] *** nemo_ left
[20:17] *** eythian left
[20:17] *** dalek left
[20:17] *** yeltzooo left
[20:17] *** ssm left
[20:17] *** xdbr left
[20:17] *** bob777 joined
[20:17] *** zoosha joined
[20:17] *** user10 is now known as user9

[20:17] *** huf_ joined
[20:17] *** esh_ joined
[20:17] *** dalek joined
[20:17] *** ChanServ sets mode: +v dalek

[20:17] *** xdbr joined
[20:18] *** samcv left
[20:18] *** El_Che joined
[20:18] *** bjz_ joined
[20:18] *** hobbs joined
[20:18] *** obfusk joined
[20:18] *** bartolin joined
[20:18] *** ggoebel__ left
[20:18] *** notostraca is now known as TEttinger

[20:18] *** silug_ joined
[20:18] *** nightfrog joined
[20:18] *** Bucciarati joined
[20:18] *** krunen joined
[20:18] *** leego joined
[20:18] *** luis joined
[20:18] *** TimToady joined
[20:18] *** girafe joined
[20:18] *** [ptc] joined
[20:18] *** TheDir left
[20:19] *** xiaomiao joined
[20:19] *** ssm joined
[20:19] *** lizmat joined
[20:19] *** samcv joined
[20:19] *** cgfbee joined
[20:19] *** cpage_ joined
[20:19] *** john51 joined
[20:19] *** ShimmerFairy joined
[20:19] *** m0ltar joined
[20:19] *** rudi_s joined
[20:20] *** ribasushi joined
[20:20] *** gabiruh joined
[20:20] *** Unavowed joined
[20:20] *** pmurias joined
[20:20] *** k-man_ joined
[20:20] *** mohae joined
[20:20] *** eythian joined
[20:20] *** akiym joined
[20:20] *** jonadab joined
[20:20] *** Praise- joined
[20:20] *** Praise- left
[20:20] *** Praise- joined
[20:20] *** ggoebel joined
[20:21] *** Timbus joined
[20:21] *** raydiak joined
[20:21] *** andrewalker joined
[20:21] *** shmibs joined
[20:21] *** canopus joined
[20:21] *** kst```` joined
[20:22] *** emdashcomma joined
[20:22] *** vytas joined
[20:22] *** remmie joined
[20:22] *** RabidGravy joined
[20:23] *** ruoso joined
[20:25] *** cpage_ left
[20:26] *** chris2 joined
[20:26] *** m0ltar left
[20:26] *** gabiruh_ joined
[20:26] *** samcv left
[20:26] *** broquaint left
[20:27] *** remmie left
[20:27] *** mohae left
[20:27] *** john51 left
[20:27] *** leego left
[20:27] *** zoosha_ joined
[20:27] *** [ptc] left
[20:27] *** girafe left
[20:27] *** camelia joined
[20:27] *** leego joined
[20:27] <gfldex> m: enum E <A B>; sub f(){ "foo" but A }; put f();

[20:28] *** El_Che_ joined
[20:28] *** gensym joined
[20:29] *** ruoso left
[20:29] *** xiaomiao left
[20:29] *** canopus left
[20:29] *** k-man_ left
[20:29] *** NeuralAnomaly joined
[20:30] *** shmibs left
[20:30] *** bisectable6 left
[20:31] *** huggable joined
[20:31] *** ggoebel left
[20:31] *** f3ew left
[20:31] *** mtj_ joined
[20:31] *** eyck joined
[20:32] *** avar joined
[20:32] *** avar left
[20:32] *** avar joined
[20:32] *** pmurias_ joined
[20:32] *** Guest45219 is now known as nemo

[20:32] *** NeuralAnomaly left
[20:32] *** NeuralAnomaly joined
[20:32] *** remmie joined
[20:32] *** gabiruh left
[20:32] *** andrewalker left
[20:32] *** raydiak left
[20:32] *** eythian left
[20:32] *** akiym left
[20:32] *** pmurias left
[20:32] *** El_Che left
[20:32] *** dalek left
[20:32] *** zoosha left
[20:32] *** RabidGravy left
[20:32] *** emdashcomma left
[20:32] *** jonadab left
[20:32] *** rudi_s left
[20:32] *** ShimmerFairy left
[20:32] *** cgfbee left
[20:32] *** bob777 left
[20:32] *** ssm left
[20:32] *** bisectable6_ joined
[20:32] *** dalek joined
[20:32] *** ChanServ sets mode: +v dalek

[20:32] *** Ulti joined
[20:32] <camelia> rakudo-moar e8a61d: OUTPUT«foo␤»

[20:32] *** riatre_ joined
[20:32] *** ChanServ sets mode: +v camelia

[20:32] *** ilbot3 joined
[20:32] *** khw joined
[20:33] *** protium joined
[20:33] *** zhmylove joined
[20:33] *** solarbunny left
[20:33] *** esh_ left
[20:33] *** hobbs left
[20:33] *** RabidGravy joined
[20:33] *** lichtkind joined
[20:33] *** eythian joined
[20:33] *** abruanese joined
[20:33] *** [Coke] joined
[20:33] *** samcv joined
[20:33] *** xiaomiao joined
[20:33] *** vytas left
[20:33] *** girafe2 joined
[20:33] *** tbrowder joined
[20:33] *** dj_goku joined
[20:33] *** dj_goku left
[20:33] *** dj_goku joined
[20:34] *** Gothmog joined
[20:34] *** zengargoyle joined
[20:34] *** k-man__ joined
[20:34] *** Gothmog is now known as Gothmog_

[20:34] *** eliasr joined
[20:34] *** akiym joined
[20:34] *** Khisanth joined
[20:34] *** Woodi joined
[20:34] *** ShimmerFairy joined
[20:34] *** ssm joined
[20:34] *** canopus joined
[20:34] *** ruoso joined
[20:34] *** mohae joined
[20:35] *** andrewalker joined
[20:35] *** Jonis joined
[20:35] *** stmuk joined
[20:35] *** ChoHag joined
[20:35] *** vytas joined
[20:35] *** emdashcomma joined
[20:35] *** jast joined
[20:35] *** simcop2387 joined
[20:35] *** simcop2387 left
[20:35] *** simcop2387 joined
[20:35] *** shmibs joined
[20:35] *** kmwallio joined
[20:36] *** ingy joined
[20:36] *** Guest36361 joined
[20:36] *** esh joined
[20:36] *** llfourn joined
[20:36] *** stux|RC-only joined
[20:36] *** raydiak joined
[20:36] *** m0ltar joined
[20:36] *** TheDir joined
[20:36] *** konobi_ joined
[20:36] *** itaipu joined
[20:37] *** [ptc] joined
[20:37] *** firstdayonthejob joined
[20:37] *** pochi joined
[20:37] *** ringer1 joined
[20:37] *** jdv79 joined
[20:37] *** zostay joined
[20:38] *** grondilu joined
[20:38] *** cgfbee joined
[20:38] *** hobbs joined
[20:38] *** solarbunny joined
[20:38] *** sivoais joined
[20:38] *** telex joined
[20:39] *** f3ew joined
[20:39] *** awwaiid joined
[20:39] *** ranguard joined
[20:39] *** hobbs left
[20:39] *** hobbs joined
[20:39] *** Guest98586 is now known as masak

[20:39] *** jonadab joined
[20:40] <masak> holy netsplit, Batman

[20:40] *** xinming joined
[20:40] *** ggherdov joined
[20:40] <masak> I like the thing someone said -- "nothing prepared me for the reality of Eric Brewer's CAP theorem like IRC netsplits"

[20:41] *** lucs joined
[20:41] *** bob777 joined
[20:41] *** hanekomu joined
[20:42] *** literal joined
[20:42] *** dj_goku_ joined
[20:42] *** broquaint joined
[20:42] *** john51 joined
[20:43] *** noganex_ joined
[20:43] *** Xliff_ joined
[20:43] *** sunnavy joined
[20:43] *** notostraca joined
[20:43] *** djbkd_ joined
[20:44] *** ggoebel joined
[20:44] *** rudi_s joined
[20:44] *** ponbiki joined
[20:44] *** pmurias_ left
[20:44] *** [particle] joined
[20:45] *** luis left
[20:45] *** ribasushi left
[20:45] *** ponbiki is now known as Guest24694

[20:45] <stmuk> ddos :(

[20:45] *** krunen_ joined
[20:45] *** Timbus left
[20:45] *** [particle]1 left
[20:45] *** infina left
[20:45] *** jcallen joined
[20:46] *** bartolin left
[20:46] *** felher left
[20:46] *** noganex left
[20:46] *** djbkd left
[20:46] *** sergot left
[20:46] *** cosimo left
[20:46] *** avuserow left
[20:46] *** TEttinger left
[20:46] *** awwaiid left
[20:46] *** TheDir left
[20:46] *** MilkmanD1n left
[20:46] <El_Che_> :(

[20:46] *** rindolf joined
[20:46] *** remmie left
[20:46] *** avar left
[20:46] *** TimToady left
[20:46] *** obfusk left
[20:46] *** bjz_ left
[20:46] *** ambs_ left
[20:46] *** shadowpaste0 left
[20:46] *** a3r0_ left
[20:46] *** dsp__ left
[20:46] *** nemo left
[20:46] *** nadim left
[20:46] *** skaji_ left
[20:46] *** Upasaka_ left
[20:46] *** jonadab left
[20:46] *** notostraca is now known as TEttinger

[20:46] <TEttinger> :(

[20:47] *** nightfrog left
[20:47] *** yubimusubi left
[20:47] *** captain-1dequate left
[20:47] *** Xliff left
[20:47] *** woodruffw left
[20:47] *** yeltzooo9 left
[20:47] *** AlexDani` left
[20:47] *** mattp__ left
[20:47] *** jcallen_ left
[20:47] *** mattp_ joined
[20:47] *** ft joined
[20:47] *** nadim joined
[20:47] *** sergot joined
[20:48] *** avar joined
[20:48] *** nemo joined
[20:48] *** Upasaka joined
[20:48] *** ambs joined
[20:48] *** obfusk joined
[20:48] *** TimToady joined
[20:48] *** bisectable6 joined
[20:48] *** spider-mario joined
[20:48] *** nemo is now known as Guest68793

[20:48] *** mst joined
[20:48] *** raydiak left
[20:48] *** mohae left
[20:49] *** riatre joined
[20:49] *** zostay left
[20:49] *** Guest36361 left
[20:49] *** bjz joined
[20:51] *** samcv_ joined
[20:51] *** bonsaikitten joined
[20:51] *** skaji joined
[20:51] *** nightfrog joined
[20:51] *** mohae joined
[20:51] *** Timbus joined
[20:51] *** camelia left
[20:51] *** woodruffw joined
[20:51] *** woodruffw left
[20:52] *** emdashcomma left
[20:52] *** andrewalker left
[20:52] *** bisectable6_ left
[20:52] *** k-man__ left
[20:52] *** dj_goku left
[20:52] *** tbrowder left
[20:52] *** protium left
[20:52] *** ggherdov left
[20:52] *** cgfbee left
[20:52] *** canopus left
[20:52] *** xiaomiao left
[20:52] *** samcv left
[20:52] *** lichtkind left
[20:52] *** ilbot3 left
[20:52] *** riatre_ left
[20:52] *** dalek left
[20:52] *** mniip left
[20:52] *** melezhik joined
[20:52] *** canopus joined
[20:52] *** emdashcomma joined
[20:52] *** imcsk8 joined
[20:52] *** woodruffw joined
[20:52] *** TheDir joined
[20:52] *** jonadab joined
[20:52] *** luis` joined
[20:52] *** raydiak joined
[20:52] *** hobbs left
[20:52] *** solarbunny left
[20:52] *** yeltzooo joined
[20:53] *** camelia joined
[20:53] *** ilbot3 joined
[20:53] *** mniip joined
[20:53] *** john51 left
[20:53] *** Praise- is now known as Praise

[20:53] *** andrewalker joined
[20:53] *** ribasushi joined
[20:53] *** bartolin joined
[20:54] *** k-man__ joined
[20:54] *** mrsolo joined
[20:54] *** lichtkind joined
[20:54] *** cosimo joined
[20:55] *** ChanServ sets mode: +v camelia

[20:55] *** BenGoldberg joined
[20:55] *** remmie joined
[20:55] *** captain-adequate joined
[20:56] *** hobbs joined
[20:56] *** solarbunny joined
[20:56] *** protium joined
[20:56] *** cgfbee joined
[20:57] *** Cabanossi joined
[20:57] *** smash joined
[20:58] *** BuildTheRobots joined
[20:58] *** felher joined
[20:58] *** john51 joined
[20:58] *** timeless joined
[20:59] *** shadowpaste joined
[21:00] *** avuserow joined
[21:00] *** clkao joined
[21:02] *** a3r0 joined
[21:02] *** Possum joined
[21:03] *** cdg joined
[21:04] *** nebuchadnezzar joined
[21:04] *** john51 left
[21:05] *** dsp_ joined
[21:05] *** giraffe_ joined
[21:05] *** Xliff_ left
[21:06] *** Xliff_ joined
[21:09] *** MilkmanDan joined
[21:13] *** awwaiid joined
[21:13] *** chansen_ joined
[21:14] *** zostay joined
[21:14] *** ggherdov joined
[21:15] *** pnu_ joined
[21:15] *** peteretep joined
[21:17] *** vcv joined
[21:17] <timotimo> :(

[21:18] <mst> stability will return to the kingdom soon enough

[21:24] *** PotatoGim joined
[21:24] *** yoleaux joined
[21:25] *** ChanServ sets mode: +v yoleaux

[21:25] *** girafe2 left
[21:27] <masak> "ddos", aka "people can be such jerks sometimes"

[21:28] *** john51 joined
[21:28] *** cdg left
[21:28] *** canopus left
[21:29] *** giraffe_ left
[21:30] *** tbrowder joined
[21:31] *** labster joined
[21:31] *** [ptc] left
[21:31] *** giraffe_ joined
[21:32] *** bob777 left
[21:32] *** camelia left
[21:33] *** yoleaux left
[21:33] *** Cabanossi left
[21:33] *** lichtkind left
[21:33] *** bob777 joined
[21:33] *** perl6user joined
[21:33] *** richi235 joined
[21:33] <perl6user> What is the fastest way to find out how many files are in a directory?

[21:34] <grondilu> including subdirectories?

[21:34] <perl6user> no just main directories

[21:34] *** canopus joined
[21:34] <perl6user> just main directory*

[21:35] <BenGoldberg> my $cunt = +dir('dirname') should do it, I think.

[21:35] <masak> m: say +dir()

[21:35] *** Cabanossi joined
[21:35] <BenGoldberg> Err, count!

[21:35] <grondilu> BenGoldberg++ typo of the day :)

[21:35] * BenGoldberg grumbles at his stupid fingers.

[21:36] <timotimo> that also counts folders as files

[21:36] <perl6user> It will work for me, thanks BenGoldberg

[21:37] <BenGoldberg> Hmm, it looks like camelia is on the wrong side of the netsplit, or perhaps is offline.

[21:37] *** lichtkind joined
[21:38] <timotimo> it could be dir() is disallowed in the restricted setting anyway

[21:39] <grondilu> if you want regular files I think you can grep(* ~~ :f)

[21:39] *** vike joined
[21:39] *** [ptc] joined
[21:39] *** scott joined
[21:39] <scott> pretty easy to count only files, with dir(dirname).grep(*.f)

[21:40] *** scott is now known as Guest77506

[21:40] <timotimo> does it give you the .IO automatically?

[21:40] <grondilu> I first tried grep(:f) and thought that would work.

[21:40] *** camelia joined
[21:40] <timotimo> nah, because that's a named parameter to the grep method

[21:40] <timotimo> you'd have to put extra parens if you meant a Pair object

[21:40] <timotimo> and at that point *.f is shorter

[21:40] <grondilu> indeed

[21:41] <Guest77506> timotimo: top-level dir does

[21:41] *** b2gills joined
[21:41] <Guest77506> you could write dirname.IO.dir.grep(*.f) equivalently

[21:41] *** ChanServ sets mode: +v camelia

[21:42] <BenGoldberg> Or  dirname.IO.dir.grep(:f(True))

[21:42] <Guest77506> by the way... why is is that Path is constructed by .IO instead of .Path?

[21:42] *** infina joined
[21:42] <BenGoldberg> m: dir('.').say

[21:42] <camelia> rakudo-moar e8a61d: OUTPUT«(".cpanm".IO ".local".IO ".npm".IO ".perl6".IO ".perlbrew".IO ".rcc".IO ".ssh".IO "Perlito".IO "evalbot".IO "log".IO "nqp-js".IO "p1".IO "p2".IO "perl5".IO "std".IO ".bash_history".IO ".bashrc".IO "mbox".IO ".lesshst".IO "evalbot.log".IO ".cpan".IO "dalek-…»

[21:42] <timotimo> neat.

[21:42] <BenGoldberg> m: dir('.').&[+].say

[21:42] <camelia> rakudo-moar e8a61d: OUTPUT«51␤»

[21:42] <ugexe> m: dir.say

[21:42] <camelia> rakudo-moar e8a61d: OUTPUT«(".cpanm".IO ".local".IO ".npm".IO ".perl6".IO ".perlbrew".IO ".rcc".IO ".ssh".IO "Perlito".IO "evalbot".IO "log".IO "nqp-js".IO "p1".IO "p2".IO "perl5".IO "std".IO ".bash_history".IO ".bashrc".IO "mbox".IO ".lesshst".IO "evalbot.log".IO ".cpan".IO "dalek-…»

[21:42] <BenGoldberg> m: dir('.').grep(:f(True).&[+].say

[21:42] <camelia> rakudo-moar e8a61d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' ␤at <tmp>:1␤------> 3dir('.').grep(:f(True).&[+].say7⏏5<EOL>␤»

[21:42] <BenGoldberg> m: dir('.').grep(:f(True)).&[+].say

[21:42] <camelia> rakudo-moar e8a61d: OUTPUT«Cannot resolve caller grep(Seq: :f); none of these signatures match:␤    ($: Bool:D $t, *%_)␤    ($: Mu $t, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[21:43] <timotimo> you still need extra parens

[21:43] <BenGoldberg> m: dir('.').grep((:f)).&[+].say

[21:43] <camelia> rakudo-moar e8a61d: OUTPUT«14␤»

[21:43] <BenGoldberg> m: dir('.').grep((:d)).&[+].say

[21:43] <camelia> rakudo-moar e8a61d: OUTPUT«37␤»

[21:43] <Guest77506> that grep calls the keys as methods on the elements or what?

[21:44] <ugexe> m: say +dir(test => *.IO.f)

[21:44] <camelia> rakudo-moar e8a61d: OUTPUT«14␤»

[21:45] <Guest77506> I see, it's smart matching, and I'm just unfamiliar with Pair smart matching

[21:46] <BenGoldberg> m: dir('.', :d).&[+].say

[21:46] <camelia> rakudo-moar e8a61d: OUTPUT«51␤»

[21:46] <BenGoldberg> m: dir('.', :f).&[+].say

[21:46] <camelia> rakudo-moar e8a61d: OUTPUT«51␤»

[21:46] <BenGoldberg> m: dir('.', *.say).&[+].say

[21:46] <camelia> rakudo-moar e8a61d: OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[21:46] <BenGoldberg> m: dir('.', none('.', '..')).&[+].say

[21:46] <camelia> rakudo-moar e8a61d: OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[21:47] <BenGoldberg> m: &dir.perl.say

[21:47] <camelia> rakudo-moar e8a61d: OUTPUT«sub dir (| is raw) { #`(Sub|58839432) ... }␤»

[21:47] <timotimo> m: say <foo FOO fOo FoO>.grep((:uc(FOO)))

[21:47] <camelia> rakudo-moar e8a61d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    FOO used at line 1␤␤»

[21:48] <timotimo> m: say <foo FOO fOo FoO>.grep((:uc<FOO>))

[21:48] <camelia> rakudo-moar e8a61d: OUTPUT«(foo FOO fOo FoO)␤»

[21:48] *** MilkmanD1n joined
[21:48] *** richi238 joined
[21:49] <Guest77506> does this kind of smart matching only list on single Pairs?

[21:49] <Guest77506> seems to fail with lists of pairs

[21:49] <Guest77506> only work on*

[21:50] <BenGoldberg> m: (!<foo FOO fOo FoO>, :uc<FOO>).grep((:uc<FOO>)).say

[21:50] <camelia> rakudo-moar e8a61d: OUTPUT«(False uc => FOO)␤»

[21:50] <timotimo> only a single pair

[21:50] <timotimo> but you can make a junction of pairs

[21:50] <timotimo> no, wait

[21:50] *** chansen_ left
[21:50] *** literal left
[21:50] <BenGoldberg> m: (|<foo FOO fOo FoO>, |:uc<FOO>).grep((:uc<FOO>)).say

[21:50] <camelia> rakudo-moar e8a61d: OUTPUT«(foo FOO fOo FoO uc => FOO)␤»

[21:50] <timotimo> don't :)

[21:50] <timotimo> haha, that's cool :)

[21:50] <Guest77506> https://docs.perl6.org/type/Pair doesn't seem to specify smartmatch behaviour

[21:50] <Guest77506> https://docs.perl6.org/language/operators#infix_~~ only says a little bit, but not Pair

[21:50] <Guest77506> oh, I forgot ACCEPTS

[21:51] *** melezhik_ joined
[21:51] *** raydiak left
[21:51] <Guest77506> Pair doesn't list an ACCEPTS override either

[21:51] <Guest77506> what gives?

[21:51] *** dsp_ left
[21:52] <Guest77506> it's not in this list either https://docs.perl6.org/routine/ACCEPTS

[21:52] *** wtw joined
[21:52] <BenGoldberg> I'd expect ~~ to be a multi sub

[21:52] <timotimo> nope, it just calls the ACCEPTS method on the matcher

[21:52] *** Cabanossi left
[21:52] *** hobbs left
[21:52] *** solarbunny left
[21:52] *** vike left
[21:52] *** richi235 left
[21:52] *** perl6user left
[21:52] *** peteretep left
[21:52] *** MilkmanDan left
[21:52] *** nebuchadnezzar left
[21:52] *** avuserow left
[21:52] *** BuildTheRobots left
[21:52] *** cgfbee left
[21:52] *** cosimo left
[21:52] *** mrsolo left
[21:52] *** ilbot3 left
[21:52] *** imcsk8 left
[21:52] *** emdashcomma left
[21:52] *** melezhik left
[21:52] *** yeltzooo left
[21:52] *** luis` left
[21:53] *** rjbs joined
[21:53] <BenGoldberg> So there's probably a multi sub infix:<~~>( IO::Path, Pair ) somewhere.

[21:54] <BenGoldberg> I do notice that https://docs.perl6.org/type/IO$COLON$COLONPath says you can do ~~ with an IO::Path on the left and a pair on the right...

[21:54] *** rgrinberg joined
[21:54] <timotimo> no, there is not

[21:55] *** Cabanossi joined
[21:55] *** cosimo joined
[21:55] <timotimo> a ~~ b is a very direct call to b.ACCEPTS(a)

[21:55] <BenGoldberg> Hmm...

[21:55] <Guest77506> there's no multi overload of the operator, but there should be an ACCEPTS methods defined on Pair somewhere

[21:55] *** vike joined
[21:55] <Guest77506> but it's not in the docs afaict

[21:56] <BenGoldberg> s: Pair, "ACCEPTS"

[21:56] *** wtw left
[21:56] <BenGoldberg> Sourcebaby's not online either (or on the wrong side of the netsplit)

[21:57] *** profan joined
[21:58] *** literal joined
[21:59] *** canopus left
[21:59] *** rjbs left
[22:00] *** awwaiid left
[22:01] *** NeuralAnomaly left
[22:03] *** nomore22 joined
[22:05] <nomore22> p6: for <a b c> <-> $word { ++$word.say } 

[22:05] <camelia> rakudo-moar e8a61d: OUTPUT«Parameter '$word' expected a writable container, but got Str value␤  in block <unit> at <tmp> line 1␤␤»

[22:05] *** ilbot3 joined
[22:05] *** wtw joined
[22:07] *** infina left
[22:07] *** infina joined
[22:07] *** rgrinberg left
[22:07] *** Guest77506 left
[22:07] *** Guest77506 joined
[22:07] *** Guest77506 left
[22:07] *** Guest77506 joined
[22:07] *** Guest77506 left
[22:09] *** mrsolo joined
[22:10] *** samcv_ is now known as samcv

[22:10] <timotimo> m: my @a = <a b c>; for @a <-> $word { ++$word.say }

[22:10] <camelia> rakudo-moar e8a61d: OUTPUT«a␤Cannot resolve caller prefix:<++>(Bool); none of these signatures match:␤    (Mu:D $a is rw)␤    (Mu:U $a is rw)␤    (Int:D $a is rw)␤    (int $a is rw)␤    (Bool $a is rw)␤    (Num:D $a is rw)␤    (Num:U $a is rw)␤    (num $a is rw)␤…»

[22:10] <timotimo> m: my @a = 1, 2, 3, 4; for @a <-> $word { ++$word.say }

[22:10] <camelia> rakudo-moar e8a61d: OUTPUT«1␤Cannot resolve caller prefix:<++>(Bool); none of these signatures match:␤    (Mu:D $a is rw)␤    (Mu:U $a is rw)␤    (Int:D $a is rw)␤    (int $a is rw)␤    (Bool $a is rw)␤    (Num:D $a is rw)␤    (Num:U $a is rw)␤    (num $a is rw)␤…»

[22:10] <timotimo> oh, haha

[22:10] <timotimo> m: my @a = <a b c>; for @a <-> $word { (++$word).say }

[22:10] <camelia> rakudo-moar e8a61d: OUTPUT«b␤c␤d␤»

[22:10] <timotimo> m: my @a = <a b c>; for @a <-> $word { ($word++).say }; say @a;

[22:10] <camelia> rakudo-moar e8a61d: OUTPUT«a␤b␤c␤[b c d]␤»

[22:11] *** dsp_ joined
[22:11] *** rjbs joined
[22:12] *** bpmedley joined
[22:13] *** Guest77506 joined
[22:13] *** raydiak joined
[22:13] *** chansen_ joined
[22:13] *** perl6user joined
[22:13] *** peteretep joined
[22:13] *** avuserow joined
[22:13] *** BuildTheRobots joined
[22:13] *** cgfbee joined
[22:13] *** yeltzooo joined
[22:13] *** luis` joined
[22:13] *** imcsk8 joined
[22:13] *** emdashcomma joined
[22:13] *** konobi_ is now known as konobi

[22:13] *** chansen_ left
[22:13] *** chansen_ joined
[22:13] *** Guest77506 left
[22:13] *** Guest77506 joined
[22:13] *** awwaiid joined
[22:13] <gfldex> m: sub f(){ "foo" but role :: { method side-channel { "bar" } } }; my $a = f; say [$a.WHAT, $a, $a.side-channel]

[22:13] <camelia> rakudo-moar e8a61d: OUTPUT«[(Str+{<anon|79641184>}) foo bar]␤»

[22:14] *** hobbs joined
[22:14] *** solarbunny joined
[22:14] *** cgfbee left
[22:15] <gfldex> m: enum E <A B>; sub f(){ "foo" but role :: { method E { E::A } } }; my $a = f; say $a.E

[22:15] <camelia> rakudo-moar e8a61d: OUTPUT«A␤»

[22:17] *** nadim left
[22:17] *** BuildTheRobots left
[22:21] *** canopus joined
[22:22] *** NeuralAnomaly joined
[22:23] *** huggable left
[22:23] *** RabidGravy left
[22:23] *** huggable joined
[22:23] <gfldex> m: enum E <A B>; my $a = 42 but E; dd $a.WHAT, $a ~~ E

[22:23] <camelia> rakudo-moar e8a61d: OUTPUT«Int+{E}␤Bool::False␤»

[22:23] *** buggable joined
[22:24] <gfldex> is this a bug?

[22:24] *** BuildTheRobots joined
[22:25] <gfldex> m: role E {}; my $a = 42 but E; dd $a.WHAT, $a ~~ E

[22:25] <camelia> rakudo-moar e8a61d: OUTPUT«Int+{E}␤Bool::True␤»

[22:25] <gfldex> m: class E {}; my $a = 42 but E; dd $a.WHAT, $a ~~ E

[22:25] <camelia> rakudo-moar e8a61d: OUTPUT«Cannot mix in non-composable type E into object of type Int␤  in block <unit> at <tmp> line 1␤␤»

[22:25] <gfldex> i think it should either complain the same way then with class or just work

[22:25] <gfldex> m: class E {}; my $a = 42 but E.new; dd $a.WHAT, $a ~~ E

[22:25] <camelia> rakudo-moar e8a61d: OUTPUT«Int+{<anon|73266432>}␤Bool::False␤»

[22:25] *** cgfbee joined
[22:27] *** tailgate joined
[22:35] *** BenGoldberg left
[22:42] <grondilu> I don't think so.

[22:42] <grondilu> m: my $str = "pi" but pi; say $str + 1;

[22:42] <camelia> rakudo-moar e8a61d: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5pi' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[22:43] <grondilu> oh wait, I thought that would work

[22:44] <grondilu> nvm

[22:44] *** nomore22 left
[22:44] *** firstdayonthejob left
[22:45] <grondilu> wait:

[22:45] <grondilu> If you put something that is not a role on the right hand side of the

[22:45] <grondilu>        "does" or "but" operators then an anonymous role will be auto-generated

[22:45] <grondilu>        containing a single method that returns that value.

[22:45] <grondilu> ^from S14

[22:46] <grondilu> when you do $a but $someEnum; it creates an anonymous role, so it won't mach the initial type.

[22:47] <zengargoyle> iirc, you need to somehow mark it an an Int.  i'm assuming you want $str.Str ~~ 'pi'; $str.Int ~~ pi

[22:47] <grondilu> m: my $str = "pi" but pi; say $str.Num + 1;

[22:47] <camelia> rakudo-moar e8a61d: OUTPUT«4.14159265358979␤»

[22:47] <grondilu> indeed

[22:48] <grondilu> so my point was:

[22:48] <grondilu> m: my $str = "pi" but pi; say $str ~~ Num;  # should be False

[22:48] <camelia> rakudo-moar e8a61d: OUTPUT«False␤»

[22:49] *** rgrinberg joined
[22:49] <grondilu> m: my $str = "pi" but pi; say $str.Rat

[22:49] <camelia> rakudo-moar e8a61d: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5pi' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[22:49] * grondilu is a bit confused

[22:50] <grondilu> m: say pi.WHAT

[22:50] <camelia> rakudo-moar e8a61d: OUTPUT«(Num)␤»

[22:50] <grondilu> isn't pi defined as a Rat?

[22:50] <zengargoyle> i did something like this in one of my modules but forget the details.  $rv strings to matched thing, bools to found, ints to line-number

[22:50] * grondilu checked in the core and no, it's defined as a Num.

[22:51] <grondilu> (which is totally fine of course)

[22:51] *** ilmari[m] joined
[22:52] <grondilu> that being said, I'm slightly disappointed that ($ but 1) + 1 doesn't just give 2.

[22:53] * zengargoyle ponders π being a rational and possibly causing the universe to *plode

[22:54] <grondilu> m: say ("" but 1) + 1

[22:54] <camelia> rakudo-moar e8a61d: OUTPUT«1␤»

[22:55] <grondilu> m: say ("foo!" but 1) + 1

[22:55] <camelia> rakudo-moar e8a61d: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5foo!' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[22:55] <grondilu> o_O

[22:55] <Guest77506> that's just the normal Str to Num parsing

[22:55] <Guest77506> m: say +""

[22:55] <camelia> rakudo-moar e8a61d: OUTPUT«0␤»

[22:55] <Xliff_> Universe - $u; Multiverse - @u; Named Universes - %u; WTF - \u

[22:55] <grondilu> I thought that did not existed in perl6 anymore.

[22:56] <grondilu> meh

[22:56] <Xliff_> Actually, s/Named Unviverses/Easy Access Multiverse/

[22:57] * Xliff_ just finished a novel series involving cross-time travel.

[22:59] *** rgrinberg left
[23:00] <gfldex> m: enum E <A B>; say E.defined;

[23:00] <camelia> rakudo-moar e8a61d: OUTPUT«False␤»

[23:01] *** rgrinberg joined
[23:01] <gfldex> m: enum E <A B>; sub f { "foo" but E::A }; dd f.E

[23:01] <camelia> rakudo-moar e8a61d: OUTPUT«E $val = E::A␤»

[23:04] *** chris2 left
[23:04] <gfldex> m: enum E <A B>; sub f { "foo" but P::E::A }; dd f.E

[23:04] <camelia> rakudo-moar e8a61d: OUTPUT«Could not find symbol '&A'␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:04] <gfldex> m: enum E <A B>; sub f { "foo" but E::A }; dd f.E

[23:04] <camelia> rakudo-moar e8a61d: OUTPUT«E $val = E::A␤»

[23:05] <gfldex> m: package P { enum E <A B> }; sub f { "foo" but P::E::A }; dd f.E

[23:05] <camelia> rakudo-moar e8a61d: OUTPUT«E $val = E::A␤»

[23:07] *** chris2 joined
[23:08] *** dalek joined
[23:08] *** ChanServ sets mode: +v dalek

[23:10] *** Undercover joined
[23:10] *** SourceBaby joined
[23:13] *** bisectable6 left
[23:13] *** benchable6 joined
[23:14] *** committable6 joined
[23:14] *** bisectable6 joined
[23:19] *** labster left
[23:27] <perl6user> Is there any http server module like HTTP::Server::Simple that supports SSL currently?

[23:30] *** labster joined
[23:31] *** stevieb joined
[23:36] *** pierrot joined
[23:39] *** djbkd_ left
[23:43] *** yoleaux joined
[23:43] *** ChanServ sets mode: +v yoleaux

[23:51] *** silug_ is now known as silug

[23:52] *** nbrown joined
[23:53] *** nbrown left
[23:54] *** tushar joined
[23:56] *** itaipu left
[23:56] <ugexe> it should be very little effort to swap in IO::Socke::SSL in place of IO::Socket::INET in HTTP::Server::Simple if you're feeling frisky

[23:58] <ugexe> you could change $!socket to $.socket, so you can just pass in your own socket for instance

