[00:10] *** kyclark joined
[00:11] *** kyclark left
[00:14] *** girafe left
[00:18] *** BenGoldberg_ joined
[00:22] *** Actualeyes left
[00:25] *** furelypunctional left
[00:37] *** dvinciguerra_ left
[00:43] *** addison left
[00:47] *** cog_ left
[00:48] *** cog__ left
[00:52] *** _28_ria joined
[00:54] *** mohae left
[00:57] *** _28_ria left
[00:58] *** dj_goku left
[01:07] *** addison joined
[01:15] *** zacts joined
[01:18] *** Actualeyes joined
[01:23] *** cdg left
[01:24] *** cdg joined
[01:24] *** ponbiki joined
[01:25] *** ponbiki is now known as Guest57323

[01:27] <dalek> doc: b41ecf4 | (Wenzel P. P. Peppmeyer)++ | lib/Pod/Htmlify.pm6:

[01:27] <dalek> doc: we need uri_unescape without unescaping '+' to ' '

[01:27] <dalek> doc: review: https://github.com/perl6/doc/commit/b41ecf4b45

[01:28] *** cdg left
[01:32] *** rgrinberg joined
[01:35] *** k-man left
[01:36] *** k-man joined
[01:40] <dalek> bisectbot: d5a9296 | (Daniel Green)++ | / (4 files):

[01:40] <dalek> bisectbot: The individual bots have to process URLs, since only they know where to look for them

[01:40] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/d5a929687e

[01:40] <dalek> bisectbot: 77d06e2 | (Daniel Green)++ | / (4 files):

[01:40] <dalek> bisectbot: Pull out code processing into its own sub

[01:40] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/77d06e2f21

[01:40] <dalek> bisectbot: be6da9e | (Aleks-Daniel Jakimenko-Aleksejev)++ | / (4 files):

[01:40] <dalek> bisectbot: Merge pull request #5 from MasterDuke17/master

[01:40] <dalek> bisectbot: 

[01:40] <dalek> bisectbot: Fix URL processing

[01:40] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/be6da9e362

[01:46] <dalek> bisectbot: 2684965 | MasterDuke17++ | / (4 files):

[01:46] <dalek> bisectbot: Make sure $message is passed along (#6)

[01:46] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/2684965f26

[01:47] *** ilbot3 joined
[01:48] *** _28_ria joined
[01:51] *** telex left
[01:52] <dalek> doc: bfb9cfe | (Wenzel P. P. Peppmeyer)++ | doc/ (7 files):

[01:52] <dalek> doc: fix broken links

[01:52] <dalek> doc: review: https://github.com/perl6/doc/commit/bfb9cfe4da

[01:52] *** telex joined
[01:56] *** kalkin- joined
[01:58] *** canopus left
[02:00] *** kalkin-_ left
[02:03] *** canopus joined
[02:04] *** kid51 left
[02:07] *** kyclark joined
[02:09] *** kyclark left
[02:18] <dalek> bisectbot: 2c50280 | (Aleks-Daniel Jakimenko-Aleksejev)++ | bisectable.pl:

[02:18] <dalek> bisectbot: Missing “use”

[02:18] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/2c502802c6

[02:18] <dalek> bisectbot: f1ad881 | (Aleks-Daniel Jakimenko-Aleksejev)++ | bisectable.pl:

[02:18] <dalek> bisectbot: Whitespace

[02:18] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/f1ad881187

[02:24] <dalek> bisectbot: 18dd136 | MasterDuke17++ | / (2 files):

[02:24] <dalek> bisectbot: Make sure bots reply to whoever addressed them (#7)

[02:24] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/18dd1361af

[02:25] <gfldex> htmlify.p6 is to clever for it's own good. It takes the heading «Infix Form» and concludes that there must be an infix operator call Form. It then generates: https://docs.perl6.org/routine/Form and the fitting index entry.

[02:29] *** addison left
[02:36] *** mohae joined
[02:41] *** vendethiel joined
[02:42] *** vendethiel- left
[02:46] *** grondilu left
[02:47] *** noganex_ joined
[02:47] *** adu joined
[02:50] *** noganex left
[02:53] *** rindolf joined
[02:54] *** dj_goku joined
[02:54] *** dj_goku left
[02:54] *** dj_goku joined
[02:55] *** Actualeyes left
[02:57] *** kyclark joined
[02:59] *** dj_goku left
[03:00] *** kyclark left
[03:00] *** AndyBotwin joined
[03:01] *** huggable left
[03:02] *** Xliff__ joined
[03:05] *** dwarring left
[03:05] *** Xliff_ left
[03:15] <dalek> bisectbot: fb89156 | (Aleks-Daniel Jakimenko-Aleksejev)++ | new-commits:

[03:15] <dalek> bisectbot: Extract commit range into a variable

[03:15] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/fb8915698f

[03:31] *** zacts left
[03:32] *** dj_goku joined
[03:32] <dalek> bisectbot: 8e71350 | MasterDuke17++ | / (2 files):

[03:32] <dalek> bisectbot: Allow ranges for benchable and committable in addition to lists of commits (#8)

[03:32] <dalek> bisectbot: 

[03:32] <dalek> bisectbot: * Allow ranges for benchable and committable in addition to lists of commits

[03:32] <dalek> bisectbot: * Make sure the range isn't too big

[03:32] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/8e71350660

[03:35] <BenGoldberg_> m: sub plus { $^a + $^b }; say 40 [&plus] 2;

[03:35] <camelia> rakudo-moar 24cc91: OUTPUT«42␤»

[03:35] <BenGoldberg_> m: sub plus { $^a + $^b }; say [&plus] 2, 42;

[03:35] <camelia> rakudo-moar 24cc91: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3sub plus { $^a + $^b }; say [&plus]7⏏5 2, 42;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤    …»

[03:36] <BenGoldberg_> m: sub plus { $^a + $^b }; say [[&plus]] 2, 42;

[03:36] <camelia> rakudo-moar 24cc91: OUTPUT«44␤»

[03:36] <BenGoldberg_> camelia++

[03:37] <BenGoldberg_> m: sub plus { $^a + $^b }; my $x = 40; $x [&plus]= 2; say $x;

[03:37] <camelia> rakudo-moar 24cc91: OUTPUT«42␤»

[03:37] <BenGoldberg_> m: my $x = 40; $x [{ $^a + $^b }]= 2; say $x;

[03:37] <camelia> rakudo-moar 24cc91: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing infix inside []␤at <tmp>:1␤------> 3my $x = 40; $x [7⏏5{ $^a + $^b }]= 2; say $x;␤    expecting any of:␤        bracketed infix␤        infix␤        infix stopper␤»

[03:38] <BenGoldberg_> m: my $x = 40; $x [[{ $^a + $^b }]]= 2; say $x;

[03:38] <camelia> rakudo-moar 24cc91: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing infix inside []␤at <tmp>:1␤------> 3my $x = 40; $x [[7⏏5{ $^a + $^b }]]= 2; say $x;␤    expecting any of:␤        bracketed infix␤        infix␤        infix stopper␤»

[03:39] <BenGoldberg_> m: sub infix:<plus> { $^a + $^b }; say [plus] 2, 42;

[03:39] <camelia> rakudo-moar 24cc91: OUTPUT«44␤»

[03:39] <BenGoldberg_> m: say sub infix:<> { $^a + $^b };

[03:39] <camelia> rakudo-moar 24cc91: OUTPUT«5===SORRY!5===␤Null operator is not allowed␤at <tmp>:1␤------> 3say sub infix:<>7⏏5 { $^a + $^b };␤Other potential difficulties:␤    Pair with <> really means an empty list, not null string; use :('') to represent the null string,␤   …»

[03:40] <BenGoldberg_> m: say sub infix: { $^a + $^b };

[03:40] <camelia> rakudo-moar 24cc91: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3say sub infix:7⏏5 { $^a + $^b };␤»

[03:40] <BenGoldberg_> m: say sub infix:('') { $^a + $^b };

[03:40] <camelia> rakudo-moar 24cc91: OUTPUT«sub infix: ($a, $b) { #`(Sub|66663344) ... }␤»

[03:40] <BenGoldberg_> m: say 40 [sub infix:('') { $^a + $^b }] 2;

[03:40] <camelia> rakudo-moar 24cc91: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing infix inside []␤at <tmp>:1␤------> 3say 40 [7⏏5sub infix:('') { $^a + $^b }] 2;␤    expecting any of:␤        bracketed infix␤        infix␤        infix stopper␤»

[04:00] *** vendethiel- joined
[04:00] *** vendethiel left
[04:00] *** mwhisenhunt joined
[04:04] <dalek> bisectbot: 82d4ca8 | (Aleks-Daniel Jakimenko-Aleksejev)++ | / (4 files):

[04:04] <dalek> bisectbot: Use github gists for long output

[04:04] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/82d4ca8cb7

[04:05] *** adu left
[04:05] *** BenGoldberg_ left
[04:10] <dalek> bisectbot: dcb3929 | MasterDuke17++ | / (2 files):

[04:10] <dalek> bisectbot: Make sure to allow specifying only a single commit (#9)

[04:10] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/dcb3929a19

[04:22] *** kyclark joined
[04:23] *** Actualeyes joined
[04:28] *** kyclark left
[04:35] *** kyclark joined
[04:36] *** khw left
[04:40] *** Cabanossi left
[04:41] *** skids left
[04:42] *** holyghost joined
[04:42] *** bob joined
[04:42] *** bob is now known as Guest77463

[04:43] *** Cabanossi joined
[04:45] *** Guest77463 is now known as bob777

[04:45] *** kyclark left
[04:47] *** woolfy left
[04:48] *** woolfy joined
[04:49] *** zacts joined
[04:53] *** rgrinberg left
[05:07] *** adu joined
[05:11] *** Guest57323 left
[05:17] *** dj_goku left
[05:21] *** sno left
[05:26] *** holyghost left
[05:26] *** Guest76029 is now known as masak

[05:28] <bob777> Hello every one. I am new to perl6. I try to apply it to bioinformatics. I enconter some problem. The sequence file was .gz format and was huge (10G). So I want to know in perl 1).how to read such huge file and 2).how to random sample the file?

[05:30] *** furelypunctional joined
[05:33] *** adu left
[05:37] *** CIAvash joined
[05:38] *** holyghost joined
[05:47] *** zacts left
[05:47] <nine> bob777: Hi! I couldn't find a gzip module for Perl 6, so what I'd do is something like my $handle = run('zcat', $file, :out); for $handle.lines -> $line { ... }

[05:47] <nine> bob777: assuming the file is line based. Random sampling will be hard though. AFAIK you cannot just jump around in a gzip compressed file. You have to decode all of it.

[05:48] <bob777> Thank nine! I have tried use the zcat to uncompress the .gz file and use the proc::Async to capturing the output. However the file was huge (10G) the memory using increasing violently. So dose the zcat and proc::Async combined strategy can be use to in manipulating huge file?

[05:49] <konobi> Perl6::Slurp ?

[05:51] <konobi> gzip is a streaming decompressor, so you can use .lines since it's just a filter on a stream

[05:52] *** ponbiki joined
[05:52] <konobi> streams and generators

[05:52] *** ponbiki is now known as Guest46113

[05:55] <bob777> Thank you konobi!

[05:57] <nine> bob777: from what I see, we shouldn't eat so much memory for that. So if we do, there may be some bug that's certainly worth fixing.

[05:57] <bob777> Hi nine I have test your idea. But the $handle was class Proc, the Method 'lines' was not found in such a class. 

[05:58] <nine> Did you supply :out to run()?

[05:58] <nine> bob777: oh, sorry, my bad. It's $handle.out.lines of course

[05:58] <nine> bob777: have just started on my morning coffee :)

[05:59] <bob777> nine: it work perfectly!

[06:01] <dalek> bisectbot: ddd9684 | (Aleks-Daniel Jakimenko-Aleksejev)++ | / (2 files):

[06:01] <dalek> bisectbot: Provide a link to git output

[06:01] <dalek> bisectbot: 

[06:01] <dalek> bisectbot: Hopefully this will demonstrate what is happening more clearly.

[06:01] <dalek> bisectbot: 

[06:01] <dalek> bisectbot: Also, refactor away annoying say() calls.

[06:01] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/ddd9684986

[06:04] *** zacts joined
[06:06] <nine> bob777:  :)

[06:08] <bob777> My problem was solved. Thanks nien and konobi for enthusiastic help!

[06:11] *** sno joined
[06:15] <jdv79> im stranded on my boat at the dock. just started raining.

[06:15] *** AlexDaniel left
[06:15] <jdv79> forgot my umbrella.

[06:18] <Ulti> bob777: FYI the correct answer is dont use Perl 6 but to use `bgzip` on the file and `faidx`

[06:19] <Ulti> bob777: you might want to try #bioinformatics for that sort of question

[06:19] <Ulti> a perl6 wrapper to those commands would be super valuable

[06:20] <Ulti> bob777 http://www.htslib.org/doc/faidx.html

[06:20] *** sortiz left
[06:20] <Ulti> an HTSlib binding for Perl6 is on my todo but its so huge I really want a tool to produce the NativeCall 1-1 wrapper for me

[06:22] <bob777> Thank you Ulti!  I'll try your suggestion. I hope to use Your package in the future.

[06:24] <holyghost> oh I'd do some game theory in perl6 if I would find the time

[06:25] <holyghost> Hybrid Monte Carlo, sampling and so on

[06:26] <holyghost> it's huge for data mining

[06:27] <Ulti> well I found the time to start doing bioinformatics :) its just doing something useful and industry standard is a lot of work

[06:27] <holyghost> Maybe we also need a pgsql module, AFAIK

[06:28] <Ulti> the DBIish module supports pgsql

[06:28] <TEttinger> holyghost: I bet quasi-monte carlo would be outlandishly short in P6

[06:28] <holyghost> My Master thesis was about embryology genetic algorithms

[06:28] *** firstdayonthejob joined
[06:29] <TEttinger> woah

[06:29] <holyghost> smooth system

[06:29] <holyghost> I don't have the .ps file anymore though :-)

[06:29] <holyghost> s/file/files/

[06:29] <Ulti> holyghost: https://github.com/perl6/DBIish/blob/master/examples/pg_arrays.p6

[06:29] <holyghost> NK, NKd algorithms

[06:29] <holyghost> wait a minute

[06:30] <TEttinger> so Perl6 is definitely stronger with string handling than Clojure (alternately, s/Clojure/.+/)

[06:31] <holyghost> Ulti, seems good to me

[06:31] <TEttinger> but I'd be curious how this would carry over, (let [vdc #(let [s (Long/toString % %2) sz (.length s) r (Long/parseLong (clojure.string/reverse s) %2)] (/ (double r) (expt %2 sz))) halton #(vector (vdc % 2) (vdc % 3))] (map halton (range 20 120)))

[06:31] <Ulti> holyghost: were you evolving neural networks in your thesis?

[06:31] <holyghost> Ulti, no I made the evolve part afterwards

[06:31] <holyghost> it's genetic algorithms (GA)

[06:31] <holyghost> not NNs

[06:32] <Ulti> TEttinger: well most of the keywords and types exist at least :3

[06:32] <holyghost> I wrote an NN with OOP in 1997 though

[06:32] <TEttinger> the algo is kinda stupidly simple, it's the halton sequence

[06:32] <holyghost> got a 16/20 for that

[06:32] <Ulti> holyghost: yeah I got that its just embryology GAs lend themselves to evolving network structures

[06:32] <holyghost> indeed, IIRC you evolve the GA

[06:33] <holyghost> the thing was some genes influenced the others

[06:33] <holyghost> by outputs enforcing genes (a bit array)

[06:33] <holyghost> It's quite simple really

[06:34] <Ulti> I've not really looked into them at all, its been a while since I did GA work

[06:34] <holyghost> You do some random walks and the system had its maximums together

[06:35] <holyghost> sure

[06:35] <holyghost> I can write fitness functions at light speed :-)

[06:36] <holyghost> e.g. Hadamard Gates

[06:37] <TEttinger> so all this halton sequence thing is: the nth element of the halton sequence is a point where x is the nth element in the van der Corput sequence with one base, and y is the nth element in a different van der corput sequence with another base, with both bases coprime.

[06:37] <TEttinger> nth element of van der corput sequence can be: write n as a string in the base of the sequence, like binary or ternary. reverse the string, read it in as floating point, divide it by the base raised to the power of (the length of the string earlier)

[06:37] <TEttinger> and that's it

[06:38] <TEttinger> it generates quasi random points and never repeats a point

[06:38] * Ulti wanders off to #dayjob

[06:38] *** firstdayonthejob left
[06:38] <jdv79> Util: are you in the us?

[06:39] *** cpage_ joined
[06:39] <jdv79> Ulti: 

[06:48] *** mwhisenhunt left
[06:48] <Ulti> jdv79: no I'm in the UK so just getting ready for work, but I have to catch a bus so must dash! :P

[06:49] *** luiz_lha left
[06:50] *** omegaz joined
[06:51] <konobi> bob777: np... the awesome thing about streaming is that there's little to no memory overhead =0)

[06:52] *** pisa joined
[06:53] *** pisa left
[06:53] <konobi> (and the opportunity to optimize for zero copy)

[07:01] *** huggable joined
[07:09] <bob777> konobi: The memory usage was perfect. But the line by line strategy was a little slow. How can I read from streaming and use 'race' or 'hyper' to use multi Thread to accelarate? 

[07:11] <konobi> huh... it shouldn't be that slow

[07:11] <konobi> i wonder where the implementation is

[07:13] *** dj_goku joined
[07:13] *** darutoko joined
[07:13] <bob777> I just read the text in the .gz file and do some pattern matching

[07:16] <konobi> oh, i meant for doing the line-by-line stream

[07:16] <bob777> Thank you konobi. I think i should spent more time on the general grammer of perl6. I think I will work it out by myself after digesting the general grammer.

[07:16] <konobi> (or even delimiter-by-delimiter stream

[07:18] *** dj_goku left
[07:20] *** ufobat joined
[07:20] <bob777> The stream was line by line

[07:21] <konobi> yeah, just wondering if that chunking was a slow aspect

[07:21] *** wamba joined
[07:22] <bob777> The cpu usage of moar was 100% and the cpu usage of gzip was 7%.

[07:22] <timotimo> yeah, perl6 isn't blazing fast yet

[07:23] <timotimo> Ulti: you did see gptrixie, right? it generates p6 definitions for nativecall from C header files

[07:26] *** sftp left
[07:27] <bob777> Ulti: Yes i find it :P 

[07:29] <konobi> timotimo: heh, would be interesting to see that combined with postgres' FDW

[07:30] <konobi> that looks amazing already though

[07:31] <konobi> of course handling macros and preprocessor stuff might be um... interesting

[07:31] <timotimo> it uses gccxml or That Other Thing

[07:31] <timotimo> so no problems. if gcc or clang can understand it, gptrixie can do something with it

[07:34] <timotimo> bob777: sadly, hyper and race currently have some bugs that can cause the result to just be an empty list

[07:34] <timotimo> on the other hand, you can "start { ... }" a few worker tasks that eat data from a Channel

[07:34] <dalek> doc: 8764651 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Tap.pod6:

[07:34] <dalek> doc: remove double link, helps to render description on /type.html

[07:34] <dalek> doc: review: https://github.com/perl6/doc/commit/87646512b4

[07:36] <bob777> timotimo: Thank your for you recommend.

[07:36] <timotimo> what version of rakudo are you on, btw?

[07:36] <timotimo> the last few days saw tremendous performance improvements to a bunch of built-ins

[07:37] <bob777> timotimo: "This is Rakudo version 2015.12 built on MoarVM version 2015.12"

[07:37] <timotimo> that's very old

[07:38] <timotimo> fortunately, building a rakudo of your own is easy. just git clone rakudo from github.com/rakudo/rakudo and perl Configure.pl --prefix=/where/you/want/it/to/go (we don't have an uninstall tool, so it should probably be a folder you created anew) and --gen-nqp --backends=moar

[07:38] <timotimo> and then make install

[07:38] <timotimo> also, the overhead of running a full grammar or regex can bite a big chunk off of your performance, so if you can put things like "$line.starts-with" or something like that to quickly reject lines, that'll give you a noticable boost

[07:40] <bob777> timotimo: oh~i just use ubuntu's apt-get to install it. I used to build and try perl6 once. I will check the newest version immediately.

[07:41] <timotimo> cool, thanks :)

[07:42] <timotimo> i'm positively surprised that you actually got something from 2015-but-almost-2016 from a distribution

[07:43] *** rindolf left
[07:46] <timotimo> i've gotta go now, good luck!

[07:47] *** fsavigny joined
[07:47] <bob777> Thinks timotimo!

[07:47] <bob777> :)

[07:47] *** rindolf joined
[07:53] <timotimo> turns out that doctor's appointment is an hour later than i had thought, so i almost showed up one hour early

[07:56] *** holyghost left
[07:58] <dalek> doc: 2842424 | (Wenzel P. P. Peppmeyer)++ | test-links.sh:

[07:58] <dalek> doc: remove anchor part, wget wont check them anyways

[07:58] <dalek> doc: review: https://github.com/perl6/doc/commit/2842424ad9

[07:58] <dalek> doc: 558afc5 | (Wenzel P. P. Peppmeyer)++ | / (3 files):

[07:58] <dalek> doc: utils belong under ./util/

[07:58] <dalek> doc: review: https://github.com/perl6/doc/commit/558afc5363

[08:04] <timotimo> bob777: so i have a bit of time to help you with your code, if you'd like

[08:05] <gfldex> m: say lines.contains('dhiaidh')

[08:05] <camelia> rakudo-moar 24cc91: OUTPUT«True␤»

[08:07] <gfldex> https://docs.perl6.org/routine/contains must be incomplete

[08:09] <timotimo> you think so?

[08:09] <timotimo> ah, yeah, it should actually be on Cool

[08:09] *** holyghost joined
[08:12] *** ufobat left
[08:16] <dalek> doc: ccd7a92 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Str.pod6:

[08:16] <dalek> doc: correct method contains

[08:16] <dalek> doc: review: https://github.com/perl6/doc/commit/ccd7a928f3

[08:16] *** RabidGravy joined
[08:16] *** holyghost left
[08:16] <bob777> timotimo: Thank you! The newest version of perl6 is compiling now.  I am trying the suggestions just recieved. I just have one puzzle now, the the output of run() was class Proc and show use method 'out' to obtain the 'pipe'.How ever the document of Proc do not have such method. 

[08:18] <DrForr> Grab a copy of the docs and submit a patch?

[08:18] <dalek> doc: d9ee3fe | (Wenzel P. P. Peppmeyer)++ | doc/Type/ (2 files):

[08:18] <dalek> doc: move method contains to Cool

[08:18] <dalek> doc: review: https://github.com/perl6/doc/commit/d9ee3fed11

[08:22] <timotimo> huh. i haven't worked with "run" in a long time :)

[08:23] <timotimo> when i run("echo hello").out.say, it gives me an (undefined) Pipe object

[08:23] <gfldex> m: Proc.^methods.say

[08:23] <camelia> rakudo-moar 527f8d: OUTPUT«(FALLBACK gist new)␤»

[08:23] <timotimo> if you want to get a usable .out pipe, you have to give :out as a named parameter to run

[08:25] *** [particle] joined
[08:28] *** RabidGravy left
[08:29] <gfldex> Proc.out is a public attribute and as such not listed as a method. There must be quite a few of those.

[08:29] *** Sgeo_ joined
[08:29] *** holyghost joined
[08:32] *** Sgeo left
[08:36] <bob777> And how can I find such public attribute in document?

[08:37] <timotimo> we're apparently not putting those in there yet

[08:37] <timotimo> but:

[08:37] <timotimo> m: say $*VM.^attributes

[08:37] <camelia> rakudo-moar 527f8d: OUTPUT«(Mu $!config Mu $!prefix Mu $!precomp-ext Mu $!precomp-target Mu $!precomp-dir Str $!name Str $!auth Version $!version Blob $!signature Str $!desc)␤»

[08:38] <timotimo> m: .^attributes.say $*VM.^attributes

[08:38] <camelia> rakudo-moar 527f8d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3.^attributes.say7⏏5 $*VM.^attributes␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤  …»

[08:38] <timotimo> m: .^attributes.say for $*VM.^attributes

[08:38] <camelia> rakudo-moar 527f8d: OUTPUT«Method 'gist' not found for invocant of class 'BOOTSTRAPATTR'␤  in block <unit> at <tmp> line 1␤␤»

[08:38] <timotimo> right

[08:38] <timotimo> m: .^attributes>>.name.say for $*VM.^attributes

[08:38] <camelia> rakudo-moar 527f8d: OUTPUT«($!name $!rw $!ro $!required $!has_accessor $!type $!container_descriptor $!auto_viv_container $!build_closure $!package $!inlined $!box_target $!positional_delegate $!associative_delegate $!why $!container_initializer)␤($!name $!rw $!ro $!required $!has…»

[08:38] *** domidumont joined
[08:38] <timotimo> m: for $*VM.^attributes -> $a { say $a.name if $a.has_accessor }

[08:38] <camelia> rakudo-moar 527f8d: OUTPUT«$!config␤$!prefix␤$!precomp-ext␤$!precomp-target␤$!precomp-dir␤$!name␤$!auth␤$!version␤$!signature␤$!desc␤»

[08:38] <timotimo> m: for Pipe.^attributes -> $a { say $a.name if $a.has_accessor }

[08:38] <camelia> rakudo-moar 527f8d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Pipe used at line 1␤␤»

[08:39] <timotimo> m: for IO::Pipe.^attributes -> $a { say $a.name if $a.has_accessor }

[08:39] <camelia> rakudo-moar 527f8d: ( no output )

[08:39] <timotimo> hm.

[08:39] <psch> RESTRICTED?

[08:39] <psch> m: say IO::Pipe

[08:39] <camelia> rakudo-moar 527f8d: OUTPUT«IO::Pipe is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method gist at src/RESTRICTED.setting line 33␤  in block <unit> at <tmp> line 1␤␤»

[08:39] <timotimo> yeah, that's why i started with $*VM instead of Pipe

[08:39] <bob777> wow~

[08:39] <timotimo> yeah

[08:39] <psch> m: say IO::Pipe.WHAT

[08:39] <camelia> rakudo-moar 527f8d: OUTPUT«IO::Pipe is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method gist at src/RESTRICTED.setting line 33␤  in block <unit> at <tmp> line 1␤␤»

[08:39] <psch> m: try IO::Pipe; $!.perl.say

[08:39] <camelia> rakudo-moar 527f8d: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant value IO::Pipe in sink context (line 1)␤Any␤»

[08:39] <psch> meh vOv

[08:40] *** RabidGravy joined
[08:40] <timotimo> hehehe

[08:41] <bob777> So cool!

[08:42] *** fsavigny left
[08:43] *** domidumont left
[08:43] *** domidumont joined
[08:48] <psch> m: say &[/].arity

[08:48] <camelia> rakudo-moar 527f8d: OUTPUT«0␤»

[08:48] <psch> m: say [/]

[08:48] <camelia> rakudo-moar 527f8d: OUTPUT«No zero-arg meaning for infix:</>␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[08:48] <psch> m: say &[/].count

[08:48] <camelia> rakudo-moar 527f8d: OUTPUT«2␤»

[08:49] <timotimo> worst-case there's a candidate to give that particular error

[08:49] <psch> yeah, that's probably it

[08:50] <psch> m: say &prefix:<[/]>.arity # is actually the one i tested :|

[08:50] <camelia> rakudo-moar 527f8d: OUTPUT«0␤»

[08:50] <psch> m: say &prefix:<[/]>.candidates>>.perl 

[08:50] <camelia> rakudo-moar 527f8d: OUTPUT«(sub prefix:<[/]> (+ is raw) { #`(Sub|79309328) ... })␤»

[08:50] <timotimo> oh, haha :)

[08:50] *** espadrine joined
[08:51] <timotimo> yeah, you're right

[08:51] <psch> m: say &prefix:<[/]>.count

[08:51] <camelia> rakudo-moar 527f8d: OUTPUT«Inf␤»

[08:51] <psch> yeah, well meta list vOv

[08:51] <psch> not really sure what i expected there :)

[08:51] <psch> s/list/reduce/

[08:51] <timotimo> :)

[08:52] <psch> m: say infix:<+>

[08:52] <camelia> rakudo-moar 527f8d: OUTPUT«0␤»

[08:53] <Roamer`> hmmmm... funny things one comes across when trying to write Yet Another Getopt::* Module

[08:53] <Roamer`> m: use v6.c; my Str:D %opts = :v("v"); note %opts.perl; say Hash[Str:D].new(:v("v")) eqv %opts;

[08:53] <camelia> rakudo-moar 527f8d: OUTPUT«(my Str:D % = :v("v"))␤False␤»

[08:53] <Roamer`> why is that false?

[08:53] *** Actualeyes left
[08:54] <psch> m: say Hash[Str:D].new(:v("v")).perl

[08:54] <camelia> rakudo-moar 527f8d: OUTPUT«(my Str:D % = )␤»

[08:54] <psch> Roamer`: Hash.new takes a List and doesn't offer setting values

[08:54] <psch> m: say Hash.new(<foo bar>).perl

[08:54] <camelia> rakudo-moar 527f8d: OUTPUT«{:foo("bar")}␤»

[08:54] <psch> oh, wait

[08:54] <psch> it takes a List and Hashifies it, my bad :)

[08:55] *** zakharyas joined
[08:55] <Roamer`> psch, okay, so now I feel stupid for totally misreading the got/expected message in an is-deeply test :)

[08:55] <Roamer`> thanks

[08:56] *** AndyBotwin left
[08:59] <dalek> doc: ca4be04 | (Wenzel P. P. Peppmeyer)++ | / (2 files):

[08:59] <dalek> doc: add menu entry and redirect to examples.perl6.org

[08:59] <dalek> doc: review: https://github.com/perl6/doc/commit/ca4be04d44

[09:09] <dalek> doc: 1fceede | (Wenzel P. P. Peppmeyer)++ | html/js/main.js:

[09:09] <dalek> doc: chrome doesn't like keypress on Esc, use keyup

[09:09] <dalek> doc: review: https://github.com/perl6/doc/commit/1fceede7df

[09:14] *** dj_goku joined
[09:14] *** dj_goku left
[09:14] *** dj_goku joined
[09:15] *** zacts left
[09:15] <jnthn> tbrowder: (from backlog) return is still a little more costly, though (a) the difference became a good bit smaller recently, (b) we'll continue to get better at optimizing it. So, only worth considering if you're trying to squeeze out every last drop you can right now. :-)

[09:16] * gfldex .oO( If nobody catches a control exception, does it make a sound? )

[09:16] *** holyghost left
[09:16] <psch> it sounds suspiciously like "died" or sometimes "warn" :)

[09:17] *** holyghost joined
[09:19] *** dj_goku left
[09:24] <gfldex> m: my @a is List = (1,2; 3,4); dd @a;

[09:24] <camelia> rakudo-moar 527f8d: OUTPUT«()␤»

[09:24] <gfldex> I'm not sure if I like that.

[09:25] <psch> m: my @a is List; say @a[0].WHAT

[09:25] <camelia> rakudo-moar 527f8d: OUTPUT«Nil␤»

[09:25] <psch> m: my @a is List; say @a[0].VAR.WHAT

[09:25] <camelia> rakudo-moar 527f8d: OUTPUT«Nil␤»

[09:25] <psch> m: my @a is List; say @a.VAR.WHAT

[09:25] <camelia> rakudo-moar 527f8d: OUTPUT«(List)␤»

[09:25] <gfldex> m: my @a is List .=new(1,2; 3,4); dd @a;

[09:25] <camelia> rakudo-moar 527f8d: OUTPUT«()␤»

[09:26] <gfldex> m: my @a is List = List.new(1,2; 3,4); dd @a;

[09:26] <camelia> rakudo-moar 527f8d: OUTPUT«()␤»

[09:26] <gfldex> I'm sure that I don't like that at all.

[09:26] <psch> m: my @a := List.new(1,2;3,4); dd @a

[09:26] <camelia> rakudo-moar 527f8d: OUTPUT«($(1, 2), $(3, 4))␤»

[09:26] <psch> i think going up the hierarchy is bad in the 'var is type' syntax, maybe..?

[09:27] <gfldex> it makes little sense. But a nice friendly warning is better then silently losing data.

[09:27] <psch> i mean, i only know it from '%h is SetHash' or something

[09:27] <psch> oh, yeah, not complaining is definitely LTA

[09:31] <psch> m: use nqp; my @a is List; nqp::p6store(@a, (1,2;3,4)); dd @a

[09:31] <camelia> rakudo-moar 527f8d: OUTPUT«()␤»

[09:31] <psch> that's what happens in the AST, so p6store probably needs to look closer at the (potential lack of a) containerspec i'd guess

[09:31] <gfldex> m: my @promotes-a-list-to-array = 1,2,3; my @doesn't = (1,2;3); say @promotes-a-list-to-array[0].WHAT; say @doesn't[0].WHAT;

[09:31] <camelia> rakudo-moar 527f8d: OUTPUT«(Int)␤(List)␤»

[09:32] <psch> m: say (1,2;3).perl

[09:32] <camelia> rakudo-moar 527f8d: OUTPUT«((1, 2), 3)␤»

[09:32] <psch> m: my @a = (1,2;3); say @a[1].WHAT

[09:32] <camelia> rakudo-moar 527f8d: OUTPUT«(Int)␤»

[09:32] *** jonas2 joined
[09:40] <jnthn> Only half reading, but note that assignment to a List is the same thing that makes `($a, $b) = 1, 2, 3` work (where in this case the 3 is thrown away)

[09:41] <jnthn> That is, it actually assigns to the containers already there in the List. And "my @a is List" will create @a as an empty List.

[09:41] <jnthn> Array adds the behavior that it can grow and that it will create containers on assignment for you :)

[09:42] *** abraxxa joined
[09:43] <psch> hm, i guess that means p6store already gets no containers and purposefully doesn't complain

[09:43] <psch> which means if we wanted to warn we'd probably have to do it during parse..?

[09:43] <jnthn> It's actually List.STORE but yeah it's by design that this doesn't complain

[09:43] <jnthn> You'd have to detect that case syntactically to warn about it, yeah.

[09:44] <psch> ah.  so the p6store in the ast is an optimizer result i guess

[09:44] <jnthn> p6store desugars to an "use assign op or call .STORE" check, iirc

[09:44] <jnthn> (And does the appropriate thing)

[09:45] <tbrowder>  jnthn: thanks

[09:45] <psch> right.  well, it's peripheral :)

[09:45] <jnthn> In the case of the @ sigil though it should probably figure out it can just call .STORE

[09:45] <psch> to the issue, that is...

[09:45] <dalek> doc: c882c8d | (Wenzel P. P. Peppmeyer)++ | doc/Language/list.pod6:

[09:45] <dalek> doc: be explicit about assiging LoLs to @-sigiled variables

[09:45] <dalek> doc: review: https://github.com/perl6/doc/commit/c882c8d595

[09:46] <jnthn> m: my @a[2;2] = (1,2; 3,4); say @a.perl

[09:46] <camelia> rakudo-moar 527f8d: OUTPUT«Array.new(:shape(2, 2), [1, 2], [3, 4])␤»

[09:46] <jnthn> m: my @a[2;2] = (1,2; 3,4); @a[1;1] = 42; say @a

[09:46] <camelia> rakudo-moar 527f8d: OUTPUT«[[1 2] [3 42]]␤»

[09:47] <jnthn> Note that if you shape an array then its assignment from a lol will DTRT :)

[09:47] <jnthn> Dunno if that's doc'd or not

[09:48] <gfldex> jnthn: it is not doced

[09:48] <psch> m: my @a[*;*] = (1,2; 3,4); @a[1;1] = 42; say @a # aww

[09:48] <camelia> rakudo-moar 527f8d: OUTPUT«Jagged array shapes not yet implemented. Sorry. ␤  in block <unit> at <tmp> line 1␤␤»

[09:48] *** CIAvash left
[09:49] <jnthn> Yeah, those are tricky :)

[09:49] <psch> i'd hope that to adapt to the RHS, which is why in this specific case the error seems a bit off

[09:50] <psch> but well, the LHS can't know the RHS isn't jagged, and that's probably the error path that happens

[09:52] *** TEttinger left
[09:53] <dalek> doc: 4fe536e | (Wenzel P. P. Peppmeyer)++ | doc/Language/list.pod6:

[09:53] <dalek> doc: show list assignment to shaped arrays

[09:53] <dalek> doc: review: https://github.com/perl6/doc/commit/4fe536ef89

[09:55] <gfldex> kyclark++ (for asking the right question)

[10:09] *** kid51 joined
[10:09] *** kanishka joined
[10:10] *** domidumont left
[10:11] *** domidumont joined
[10:13] *** sno left
[10:16] *** labster left
[10:19] *** kid51 left
[10:20] *** domidumont left
[10:39] *** holyghost left
[10:40] *** holyghost joined
[10:44] *** kaare_ joined
[10:53] *** RabidGravy left
[11:01] *** huggable left
[11:02] *** kurahaupo joined
[11:07] *** gnull joined
[11:15] *** dj_goku joined
[11:15] *** dj_goku left
[11:15] *** dj_goku joined
[11:20] *** dj_goku left
[11:36] *** sno joined
[11:38] <gfldex> m: my $lazy = gather for ^100 { take .Int } but role { method top($amount) { my $counter = $amount; gather for self { take $counter-- ?? $_ !! IterationEnd } } }; say $lazy.top(3);

[11:38] <camelia> rakudo-moar 527f8d: OUTPUT«(0 1 2)␤»

[11:38] <gfldex> my mind boggles a little

[11:39] <gfldex> m: my $lazy = gather for ^100 { take .Int } but role { method top(Seq:D: $amount) { my $counter = $amount; gather for self { take $counter-- ?? $_ !! IterationEnd } } }; say $lazy.top(3);

[11:39] <camelia> rakudo-moar 527f8d: OUTPUT«(0 1 2)␤»

[11:41] *** Xliff_ joined
[11:44] *** Xliff__ left
[12:04] *** grondilu joined
[12:04] <grondilu> m: say cos(355)

[12:04] <camelia> rakudo-moar 527f8d: OUTPUT«-0.999999999545659␤»

[12:07] <grondilu> m: say fist { (.cos + 1).abs < 1e-12 }, ^Int

[12:07] <camelia> rakudo-moar 527f8d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    fist used at line 1. Did you mean 'list', 'first', 'gist'?␤␤»

[12:07] <grondilu> m: say first { (.cos + 1).abs < 1e-12 }, ^Inf

[12:07] <camelia> rakudo-moar 527f8d: OUTPUT«1146408␤»

[12:08] <jnthn> gfldex: I'd probably write that with last instead of IterationEnd :)

[12:08] <jnthn> m: my $lazy = gather for ^100 { take .Int }; say $lazy.head(3) # also this ;)

[12:08] <camelia> rakudo-moar 527f8d: OUTPUT«(0 1 2)␤»

[12:16] *** bob777 left
[12:17] *** bob joined
[12:17] *** bob is now known as Guest73719

[12:17] <DrForr> Hrm, is there a way to warn with traceback, or do I need to poke at teh stack manually?

[12:18] <lizmat> I've been wondering that myself

[12:18] *** Guest73719 is now known as bob777

[12:19] <psch> m: warn "foo"; CONTROL { when CX::Warn { say .message ~ "\n" ~ .backtrace.Str } }

[12:19] <camelia> rakudo-moar 527f8d: OUTPUT«foo␤  in block <unit> at <tmp> line 1␤␤»

[12:19] <psch> oh, probably also want to .resume afterwards :)

[12:19] <psch> and maybe &note instead of &say

[12:19] <psch> not sure if we have something simpler, but i guess you could iterate through all known Blocks and .^add_phaser..?

[12:20] <lizmat> or wrap / unwrap &warn ?

[12:21] <psch> m: &warn.add_phaser('CONTROL', -> { when CX::Warn { default { say .message ~ "\n" ~ .backtrace.Str } } }); warn "foo"

[12:21] <camelia> rakudo-moar 527f8d: OUTPUT«foo  in block <unit> at <tmp> line 1␤»

[12:21] <psch> m: warn "foo"

[12:21] <camelia> rakudo-moar 527f8d: OUTPUT«foo  in block <unit> at <tmp> line 1␤»

[12:21] <psch> huh

[12:22] *** bob777 left
[12:22] * psch is probably not that clue-full, actually :)

[12:22] *** bob joined
[12:22] *** bob is now known as Guest45858

[12:23] *** Guest45858 left
[12:23] <lizmat>  CONTROL phaser?

[12:24] *** bob joined
[12:25] *** bob is now known as Guest26099

[12:25] <DrForr> Interesting ideas all, I'll have to play with these.

[12:26] <psch> m: sub f { g }; sub g { warn "foo" }; f; CONTROL { when CX::Warn { say .message ~ "\n" ~ .backtrace.Str } } # well, this does work

[12:26] <camelia> rakudo-moar 527f8d: OUTPUT«foo␤  in sub g at <tmp> line 1␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:26] <psch> m: &warn.add_phaser('CONTROL', -> { when CX::Warn { default { say .message ~ "\n" ~ .backtrace.Str } } }); sub g { warn "foo" }; sub f { g }; f # this doesn't

[12:26] <camelia> rakudo-moar 527f8d: OUTPUT«foo  in sub g at <tmp> line 1␤»

[12:27] <DrForr> Yeah, the CONTROL block should work...

[12:27] <DrForr> At least I get the trace I need.

[12:30] *** rgrinberg joined
[12:30] <jnthn> YOu can't just go doing add_phaser at runtime like that

[12:30] <jnthn> Phasers are a compile-time construct

[12:30] <jnthn> They cause changes in what code is generated when we compile the routine

[12:30] *** Guest26099 left
[12:31] *** bob777 joined
[12:36] *** domidumont joined
[12:40] *** bob777 left
[12:41] *** bob777 joined
[12:43] *** Deep_Thought joined
[12:43] <Frameless> m: say "a" ~~ /"a" <?after "a" .?: >/

[12:43] <camelia> rakudo-moar 527f8d: OUTPUT«Nil␤»

[12:43] <Frameless> This fails due to lack of backtracking, but after reading our docs on backtracking, I don't understand why. Is it because <?after> is zero-width so even if there are no characters for .? to consume it pretends there are and fails to match and fails to "give up" characters that never existed?

[12:43] <Frameless> m: say "a" ~~ /.?:/ # 'cause this matches fine...

[12:43] <camelia> rakudo-moar 527f8d: OUTPUT«｢a｣␤»

[12:46] <dalek> perl6-examples: e0827ee | (Wenzel P. P. Peppmeyer)++ | categories/cookbook/09directories/09-11-all-files-lazy.pl:

[12:46] <dalek> perl6-examples: add 09-11-all-files-lazy.pl

[12:46] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/e0827ee7f9

[12:46] <moritz> m: say "a" ~~ /"a" <?after "a">/

[12:46] <camelia> rakudo-moar 527f8d: OUTPUT«｢a｣␤»

[12:46] <moritz> m: say "a" ~~ /"a" <?after "a" .?>/

[12:46] <camelia> rakudo-moar 527f8d: OUTPUT«｢a｣␤»

[12:47] *** abraxxa left
[12:47] *** abraxxa1 joined
[12:48] <Frameless> Is it a bug?

[12:49] *** rgrinberg left
[12:50] *** rgrinberg joined
[12:50] *** mtj_ left
[12:51] <moritz> no

[12:51] <moritz> because ? is greedy

[12:51] <moritz> so it first tries to match one character

[12:51] <moritz> and the : prevents it from backtracking

[12:52] <Frameless> Thanks.

[12:52] <moritz> m: say 'a' ~~ /a .?:/

[12:52] <camelia> rakudo-moar 527f8d: OUTPUT«｢a｣␤»

[12:52] <moritz> huh

[12:52] <jnthn> Indeed. after works by flipping the string and the AST of the thing within it. So it's like doing "a" ~~ /.?: a/

[12:52] <Roamer`> hmm, the TOML module just taught me that grammar Meow { token TOP { <meow> { make $<meow>.made } } ... }  actually works... but it doesn't seem to be documented either in the "Grammars" article or in the Grammar class docs

[12:52] <moritz> that's inconstent

[12:52] <Roamer`> is it supposed to be used? is it obsolete?

[12:52] <moritz> so maybe a bug after all

[12:52] <jnthn> Or at least, that's how I remember it

[12:53] <Roamer`> (for the record, I do like the actions class idea better, just curious if this is supposed to be supported)

[12:53] <moritz> Roamer`: it's supposed to work, yyes

[12:53] <moritz> Roamer`: and doc patches would be appreciated

[12:53] <Frameless> Roamer`: which part? The make() ?

[12:53] <Roamer`> moritz, okay, I'll think about it

[12:53] <Roamer`> Frameless, the action method as part of the token definition, not in a separate action class

[12:54] <Frameless> AH

[12:56] *** abraxxa1 left
[12:58] <Roamer`> ok, trying to make the TOML module work (will submit pull requests, of course)... now for a bit of archaeology: there was a lol() once, is it the default now or does it have to be replaced by something else?

[12:59] <Roamer`> from what I'm reading in http://tablets.perl6.org/appendix-g-glossary#LOL it seems that lists-of-lists are pretty much the default behavior now... or is there some quirk, edge case, etc, with how lol() behaved before?

[13:05] <[Coke]> list handling was completely rewritten before the 6.c release, probably not worth digging up the old behavior.

[13:07] <Roamer`> [Coke], sure, the my question is whether it's safe to replace lol(...) with List(...) or something similar

[13:07] <Roamer`> it seems to work for the present

[13:07] <Roamer`> or are you saying that the code should be rethought altogether?  Yeah, that's an option, too.

[13:07] <Roamer`> for the record, this is not code I've written, I'm just looking into it since it does something I need :)

[13:09] *** abraxxa joined
[13:10] *** Sgeo_ left
[13:14] *** kyclark joined
[13:14] *** Sgeo joined
[13:15] *** kyclark left
[13:16] *** dj_goku joined
[13:19] <[Coke]> the tablets stuff was mostly written by one person; no clue how up to date it is.

[13:21] *** dj_goku left
[13:22] <moritz> last commit is from January

[13:23] *** skids joined
[13:25] *** kyclark joined
[13:26] *** pmurias_ joined
[13:27] *** pmurias_ is now known as pmurias

[13:30] <timotimo> i'd be interested to know where that code is from that Roamer` is stumbling over

[13:31] *** Ven joined
[13:33] <gfldex> m: sub f(--> Seq:D of Int){ gather for ^10 { take .Int } }; say f;

[13:33] <camelia> rakudo-moar 527f8d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Seq:D cannot be parameterized␤at <tmp>:1␤------> 3sub f(--> Seq:D of Int7⏏5){ gather for ^10 { take .Int } }; say f␤»

[13:34] <gfldex> it's laty after all ...

[13:34] *** AlexDaniel joined
[13:34] <gfldex> s/laty/lazy/

[13:35] *** dvinciguerra_ joined
[13:40] *** mtj_ joined
[13:41] <Frameless> timotimo: likely the TOML module they referenced. Seems to be in the ecosystem: https://github.com/Mouq/toml-pm6

[13:41] <AlexDaniel> can somebody build S26?

[13:41] <AlexDaniel> Otherwise it gives annoying 404 errors

[13:42] <Frameless> It's built by cron. Pod::To::HTML needs fixing

[13:43] *** kanishka left
[13:45] *** jonas2 left
[13:48] <Roamer`> timotimo, yes, the TOML module... it does a couple of funny things

[13:49] <Roamer`> I'm trying to forward-port it to v6.c

[13:49] <Roamer`> BTW, another funny thing that came from there...

[13:49] <Roamer`> m: use v6.c; my $h = :{ slip("foof",) => 3, ["foo", "bar"] => 4 }; $h{"meow"} = 3; $h{slip("more",)} = "nah"; say $h.perl;

[13:49] <camelia> rakudo-moar 527f8d: OUTPUT«:{(["foo", "bar"]) => 4, (slip("foof",)) => 3, :meow(3), :more("nah")}␤»

[13:49] <Roamer`> I can initialize a hash with non-string keys by using :{ ... }

[13:50] *** cdg joined
[13:50] <Roamer`> I can put an object as a key later by doing something like $h{(DateTime.now)} = "..." as documented

[13:50] *** domidumont left
[13:50] <Roamer`> but how can I set an element in an existing hash with a key that is a list-like thing - List, Seq, Array?

[13:50] <Roamer`> Perl always seems to think that I want to do a hash slice

[13:50] <Roamer`> (and it would be correct in most cases :))

[13:51] <psch> m: my %h{Any}; %h{$(1,2,3)} = "foo"; dd %h

[13:51] <camelia> rakudo-moar 527f8d: OUTPUT«Hash[Any,Any] %h = (my Any %{Any} = ((1, 2, 3)) => "foo")␤»

[13:51] <psch> m: my %h{Any}; %h{$(1,2,3)} = "foo"; say %h.keys>>.WHAT

[13:51] <camelia> rakudo-moar 527f8d: OUTPUT«(Seq)␤»

[13:52] <psch> Roamer`: :{} is the RHS-y form of a %h{Any}, which allows non-Str as keys

[13:52] <ugexe> m: my @arr = <a b c>; my %hash = :a(1), :b(300); say %hash{@arr}.grep(*.defined).perl

[13:52] <camelia> rakudo-moar 527f8d: OUTPUT«(1, 300).Seq␤»

[13:52] <psch> s/ a / the declarative / # i suppose

[13:52] <Roamer`> psch, okay, that's almost there when the key is a constant

[13:53] <ugexe> oh i misread

[13:53] <Roamer`> psch, now how do I do it if the key is a List-like variable

[13:53] <Roamer`> m: my %h{Any}; my $foo = (1, 2); %h{$foo} = 3; say %h.perl;

[13:53] <psch> m: my %h{Any}; my @a = <a b c>; %h{$@a} = "foo"; say %h.keys

[13:53] <camelia> rakudo-moar 527f8d: OUTPUT«(my Any %{Any} = ((1, 2)) => 3)␤»

[13:53] <camelia> rakudo-moar 527f8d: OUTPUT«([a b c])␤»

[13:53] <psch> m: my %h{Any}; my @a = <a b c>; %h{@a} = "foo"; say %h.keys

[13:53] <camelia> rakudo-moar 527f8d: OUTPUT«(a c b)␤»

[13:53] <psch> yeah, don't even need the $ in my example

[13:54] <Roamer`> okay, for some reason this worked, now let me try to golf the one that doesn't work

[13:54] <Frameless> m: my %h{Any}; my @a = <a b c>; %h{@a} = "foo"; say %h.keys.elems

[13:54] <camelia> rakudo-moar 527f8d: OUTPUT«3␤»

[13:54] <Frameless> m: my %h{Any}; my @a = <a b c>; %h{$@a} = "foo"; say %h.keys.elems

[13:54] <camelia> rakudo-moar 527f8d: OUTPUT«1␤»

[13:54] <psch> huh, i misread the output

[13:54] *** vendethiel- left
[13:54] <psch> you *do* need the $

[13:55] <psch> sorry for the confusion

[13:55] <ugexe> its just autovivifying

[13:55] *** sammers left
[13:55] <Roamer`> psch, okay, the problem is actually not assignment, it's binding

[13:55] <Roamer`> this works:

[13:55] <Roamer`> m: use v6.c; my %h{Any}; my $key = slip("a",); %h{$key} = 1; say %h.perl;

[13:55] <camelia> rakudo-moar 527f8d: OUTPUT«(my Any %{Any} = (slip("a",)) => 1)␤»

[13:56] <Roamer`> this doesn't:

[13:56] <Roamer`> m: use v6.c; my %h{Any}; my $key = slip("a",); %h{$key} := 1; say %h.perl;

[13:56] <camelia> rakudo-moar 527f8d: OUTPUT«Cannot bind to Hash[Any,Any] slice␤  in block <unit> at <tmp> line 1␤␤»

[13:56] <Roamer`> and the TOML deserializer/parser tries to bind into the result array

[13:56] *** sno left
[13:58] <psch> i'd say examine if you really need binding there..?

[13:58] <lizmat> ah, that *could* be a bug

[13:58] <psch> i don't know if that's a bug

[13:58] <lizmat> it's thinking it's a slice when maybe it shouldn't

[13:58] <lizmat> hmmm...

[13:58] <Roamer`> psch, my Serialize::Naive module didn't quite work with all types and objects until somebody here suggested that I bind instead of assigning

[13:59] <psch> Roamer`: well, i suppose that means you do need binding :)

[14:00] <AlexDaniel> moritz: can you fix the build of pod6 files? http://design.perl6.org/S26.html

[14:00] *** canopus left
[14:01] <Frameless> lizmat: %h{ @keys } = @values; In this case this would be a slice. If the programmer needs to use the array itself as a key, they can just add $, but if it's taken to mean array itself by default, how would the keys be treated?

[14:01] <Frameless> A |, I guess, but passing an array of keys is way more common than using arrays themselves as keys, IMO

[14:02] <psch> Frameless: the problem is that prefixing with $ doesn't seem to work for binding instead of assignment

[14:02] <lizmat> m: my %h{Any}; my $key = slip("a",); %h{$key} = 1; dd %h   # if this works

[14:02] <camelia> rakudo-moar 527f8d: OUTPUT«Hash[Any,Any] %h = (my Any %{Any} = (slip("a",)) => 1)␤»

[14:02] <lizmat> m: my %h{Any}; my $key = slip("a",); %h{$key} := 1; dd %h   # then this should work as well

[14:02] <camelia> rakudo-moar 527f8d: OUTPUT«Cannot bind to Hash[Any,Any] slice␤  in block <unit> at <tmp> line 1␤␤»

[14:03] *** adu joined
[14:03] <Roamer`> lizmat, to be honest, I personally would be fine with a "declare that assignment shouldn't work, either; rethink your program and don't use a list/array as a key!"

[14:03] <Frameless> Oh, sorry, I didn't notice the last comments. I thought we were talking about making %hash{ @keys } treat @keys as $@keys instead of slice by default

[14:03] <Roamer`> lizmat, but, yeah, there is a bit of inconsistency right now

[14:04] *** jack_rabbit left
[14:04] <lizmat> Roamer`: I suggest you rakudobug it for now, so it won't fall through the cracks

[14:04] <Roamer`> lizmat, ok, on it, thanks

[14:05] <lizmat> Roamer`++

[14:06] *** canopus joined
[14:08] *** sammers joined
[14:09] <Frameless> AlexDaniel: moritz: the build is currently failing due to recent changes in Pod::To::HTML. This is the error received when the build script tries to process S26: https://gist.github.com/zoffixznet/134fba967e4a87542d1f44e83ce483ff

[14:09] <AlexDaniel> ah

[14:09] <Frameless> This is the line in the build script that tries to build it: https://github.com/perl6/mu/blob/master/util/update-design.perl6.org.sh#L49

[14:20] *** acrussell joined
[14:23] *** rurban joined
[14:23] *** rurban left
[14:27] *** sammers left
[14:28] <gregf_> http://tablets.perl6.org <-- has some really useful stuff

[14:28] *** kyclark left
[14:29] *** acrussell left
[14:31] *** mohae left
[14:32] <Roamer`> gregf_, but, apparently, at least some of it is outdated, as in pre-v6.c (cf. the lol() discussion a couple of hours ago)

[14:36] <Frameless> Something is raping the network for me when I view the docs site. Like hundreds of requests per page.

[14:37] <Frameless> Reported in https://github.com/perl6/doc/issues/699

[14:37] <Frameless> Unless I have some plugin in Chrome :/

[14:38] <dalek> doc: e183380 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Metamodel/C3MRO.pod6:

[14:38] <dalek> doc: fix links to callwith, callsame, nextwidth, nextsame

[14:38] <dalek> doc: review: https://github.com/perl6/doc/commit/e183380aaa

[14:39] *** huggable joined
[14:39] <Frameless> huggable: IO::Path

[14:39] <huggable> Frameless, File or directory path: https://docs.perl6.org/type/IO::Path

[14:40] <timotimo> Frameless: it looks like it's for report_broken_link

[14:41] <gfldex> Frameless: i need to add a cache for that. Also it's only fetching headers. So there should be pretty much no traffic.

[14:41] <timotimo> setup_debug_mode shouldn't be called upon start open

[14:42] <timotimo> don't forget the network tab of the inspector disables the cache by default

[14:42] <gregf_> Roamer`: sure, but for a start. been here long enough and yet some terms can be confusing :|

[14:42] <gfldex> timotimo: it wasn't. Well it was for me but for nobody else. That's why nobody noticed that there where about 200 broken links.

[14:43] <[Coke]> we should not be running broken link checks in everyone's browser.

[14:44] *** sammers joined
[14:44] * [Coke] adds it to the ticket.

[14:44] <Frameless> gfldex: IMO it'd make more sense to run a link checker in a cron job.

[14:44] <[Coke]> or as part of 'make test'

[14:44] <moritz> can't we do that in a travis thingy?

[14:46] <gfldex> moritz: travis would complain every single build because there are some unreachble pages that contain broken links.

[14:47] <moritz> gfldex: and it would be too much effort to fix those?

[14:47] <gfldex> for me yes, because I don't understand where they come from

[14:48] <gfldex> well, I know they come from the part that tries to find definitons, but I don't undestand what is wrong with that or how to fix it.

[14:51] <[Coke]> the way to deal with those is to make the test runnable not just from travis; turn on the tests for things that work and/or you can fix. turn the test on for the other stuff once you fix it.

[14:51] <[Coke]> so that we don't carp on the ones we can't fix yet

[14:55] <gfldex> firefox is lying. I strongly doubt that a http header is 0kb in size.

[14:55] *** xdg joined
[14:57] <moritz> rounded to the nearest integer?

[14:57] <Frameless> Cache maybe?

[14:57] <Frameless> Chrome is showing themn at ~421 bytes, so yeah, maybe rounding

[14:57] <[Coke]> caching reduces the problem, but the problem is we shouldn't be doing it at all

[14:57] <gfldex> there is a request that is shown with 208B (in firebug that is)

[14:58] <[Coke]> oh, cache impacting the size reports. carry on

[14:58] <timotimo> and pipelining should make the individual small requests less expensive

[14:59] <Frameless> Can't wait for HTTP/2 to be commonplace :D

[14:59] <gfldex> the request header is shown with 2884 bytes

[15:01] <timotimo> is that content-length? because gzip is a thing

[15:01] <moritz> isn't compression under TLS a security risk?

[15:01] <gfldex> i don't think it's going to gzip the headers

[15:01] <timotimo> there were some possible attacks, yeah

[15:02] <timotimo> CRIME is the name

[15:06] <gfldex> chrome is showing and summing up the headersizes

[15:07] <gfldex> worst case is /type.html with 265kb with cold cache, 117kb with hot cache

[15:09] *** Actualeyes joined
[15:10] *** Deep_Thought left
[15:14] *** huggable left
[15:16] *** xinming_ joined
[15:17] *** dj_goku joined
[15:17] *** dj_goku left
[15:17] *** dj_goku joined
[15:19] *** xinming left
[15:21] <timotimo> that'd suck on mobile

[15:21] <gfldex> i agree

[15:21] *** dj_goku left
[15:21] *** Actualeyes left
[15:21] <gfldex> i first put the cache in, then think about a better to toggle debug mode

[15:22] <gfldex> if the same amount of energy would have been spend on fixing the broken links then on complaining ...

[15:23] <timotimo> you are right, i suck :|

[15:23] *** sno joined
[15:24] <gfldex> but I would really like to keep the eyesore because it actually get ppl to report broken links

[15:24] <gfldex> esp. if they can join IRC with 2 clicks

[15:27] <timotimo> i don't actually know what the eyesore looks like ... :S

[15:30] <[Coke]> If you need it to test things against the site, it has to be optional.

[15:30] <[Coke]> we can't be running this for every user on every page load.

[15:30] *** djbkd joined
[15:31] <[Coke]> I can add a test script that will run against the local mojo app.

[15:35] *** Actualeyes joined
[15:36] *** zakharyas left
[15:36] <[Coke]> s/can't/shouldn't/

[15:38] *** canopus left
[15:41] *** Ven left
[15:42] *** acrussell joined
[15:44] *** vendethiel joined
[15:45] <dalek> doc: 2d9cfd9 | (Wenzel P. P. Peppmeyer)++ | template/footer.html:

[15:45] <dalek> doc: give commit an id

[15:45] <dalek> doc: review: https://github.com/perl6/doc/commit/2d9cfd9917

[15:45] <dalek> doc: 9ef38ce | (Wenzel P. P. Peppmeyer)++ | html/js/main.js:

[15:45] <dalek> doc: Add cache to linkcheck. It will check once per location.pathname per

[15:45] <dalek> doc: commit. On a new commit localStorage is wiped.

[15:45] <dalek> doc: review: https://github.com/perl6/doc/commit/9ef38ce194

[15:46] *** canopus joined
[15:49] <dalek> doc: 12ef0a5 | (Zoffix Znet)++ | html/.htaccess:

[15:49] <dalek> doc: Make type URLs with colons in them work with the $COLON replacer

[15:49] <dalek> doc: 

[15:49] <dalek> doc: Related to  #698

[15:49] <dalek> doc: review: https://github.com/perl6/doc/commit/12ef0a5131

[15:51] *** furelypunctional left
[15:54] <dalek> doc: 573d773 | (Wenzel P. P. Peppmeyer)++ | html/js/main.js:

[15:54] <dalek> doc: Add cache to linkcheck. It will check once per location.pathname per

[15:54] <dalek> doc: commit. On a new commit localStorage is wiped.

[15:54] <dalek> doc: review: https://github.com/perl6/doc/commit/573d773626

[15:54] <dalek> doc: c8f6d65 | (Wenzel P. P. Peppmeyer)++ | html/js/main.js:

[15:54] <dalek> doc: remove trailing WS

[15:54] <dalek> doc: review: https://github.com/perl6/doc/commit/c8f6d65582

[15:54] <dalek> doc: ee3c430 | (Wenzel P. P. Peppmeyer)++ | html/.htaccess:

[15:54] <dalek> doc: Merge branch 'master' of https://github.com/perl6/doc

[15:54] <dalek> doc: review: https://github.com/perl6/doc/commit/ee3c430ece

[15:55] *** Guest46113 is now known as ponbiki

[15:56] *** Actualeyes left
[15:56] <gfldex> [Coke]: does mojo support .htaccess rewrite rules?

[15:56] <[Coke]> I have no idea.

[15:56] <moritz> nope

[15:56] <gfldex> it better does because we got rewrite rules now

[15:56] *** Frameless left
[16:01] *** domidumont joined
[16:04] *** Ven joined
[16:04] *** Ven left
[16:06] *** rurban joined
[16:07] *** rurban left
[16:08] <gfldex> does spurt create directories as needed?

[16:08] <hoelzro> gfldex: I don't think so

[16:08] * moritz neither

[16:09] *** rurban1 joined
[16:10] <gfldex> it wouldn't help much. We git infix:<::=> and postfix:<.::> so that would need even more special caseing.

[16:10] *** Frameless joined
[16:10] <psch> what's postfix:<.::>?

[16:11] <dalek> doc: 5cabd6e | (Zoffix Znet)++ | app.pl:

[16:11] <dalek> doc: Add Rewrite for :: URLs to fetch $COLON$COLON

[16:11] <dalek> doc: review: https://github.com/perl6/doc/commit/5cabd6e704

[16:12] <gfldex> psch: "A class-qualified method call, used to call a method as defined in a parent class or role, even after it has been redefined in the child class."

[16:13] <gfldex> m: class Bar { method baz { 42 } }; class Foo is Bar { method baz { "nope" } }; say Foo.Bar::baz;

[16:13] <camelia> rakudo-moar eb79d7: OUTPUT«42␤»

[16:13] <psch> that does not look like an infix op to me

[16:13] <psch> err, postfix

[16:14] <psch> i guess it could be argued as a postcircumfix, but...

[16:14] *** Actualeyes joined
[16:14] <gfldex> it's a syntaxythingfix

[16:14] <psch> right, it's a qualified methodop

[16:15] *** mohae joined
[16:15] <psch> m: class Bar { method baz { 42 } }; class Foo is Bar { method baz { "nope" } }; say Bar::baz Foo:; # curious

[16:15] <camelia> rakudo-moar eb79d7: OUTPUT«===SORRY!===␤Cannot find method 'unshift' on object of type NQPMu␤»

[16:16] <Frameless> I get a bunch of "duplicated path html/routine/Operators.[ ].html" with different URLs when `make` docs. Is that normal?

[16:16] <Frameless> Full list: https://gist.github.com/zoffixznet/38633e3dc3b9b6ad972ef6209a7eed04

[16:17] <gfldex> it does that on my end too. If you find out why, let me know.

[16:18] <gfldex> before I added that check, it just overwrote the file.

[16:18] <gfldex> and there are 3 .html files

[16:21] *** domidumont left
[16:21] <dalek> doc: 7d2fc8c | (Wenzel P. P. Peppmeyer)++ | lib/Pod/Htmlify.pm6:

[16:21] <dalek> doc: | doesn't work on ntfs either, added

[16:21] <dalek> doc: review: https://github.com/perl6/doc/commit/7d2fc8ce3f

[16:21] <hoelzro> slightly OT - has anyone tried playing with the GitHub data set on Google BigQuery?

[16:22] <hoelzro> I did a quick query to find repos with >10% Perl 6 code, and I'm seeing a lot of results from people I don't recognize, which is kind of exciting =)

[16:22] <Frameless> hoelzro: I wouldn't get too excited about that, considering GitHub mistakes Perl 5 code for Perl 6 ridiculously often

[16:23] <hoelzro> yeah, so I'm seeing right now ='(

[16:23] <hoelzro> *but*

[16:23] <hoelzro> this may prove to be a really good data set for helping to fix that!

[16:24] <hoelzro> I wonder how often the other way around happens?

[16:26] <gfldex> my last blog post got 129 hits, the 2nd highest is 38 and was published right after 6.c

[16:26] <gfldex> so it's not just you guys who are reading it :)

[16:27] *** AndyBotwin joined
[16:27] <timotimo> hmm. do i know your blog?

[16:27] <gfldex> lizmat linked to it in the last weekly

[16:28] *** travis-ci joined
[16:28] <travis-ci> Doc build failed. Zoffix Znet 'Make type URLs with colons in them work with the $COLON replacer

[16:28] <travis-ci> https://travis-ci.org/perl6/doc/builds/144774184 https://github.com/perl6/doc/compare/9ef38ce194b0...12ef0a5131d9

[16:28] *** travis-ci left
[16:28] <moritz> gfldex: have you checked http://reddit.com/r/perl6 ?

[16:28] *** travis-ci joined
[16:28] <travis-ci> Doc build failed. Wenzel P. P. Peppmeyer 'Add cache to linkcheck. It will check once per location.pathname per

[16:28] <travis-ci> https://travis-ci.org/perl6/doc/builds/144773113 https://github.com/perl6/doc/compare/e183380aaa59...9ef38ce194b0

[16:28] *** travis-ci left
[16:30] *** rurban joined
[16:31] *** rurban2 joined
[16:31] *** rurban3 joined
[16:31] <gfldex> countries that like Perl 6: http://imgur.com/yfdD5w9

[16:32] <gfldex> we need to send a propaganda person to afrika

[16:32] <Frameless> :)

[16:32] *** rurban4 joined
[16:33] <gfldex> moritz: i did, could be more lively

[16:33] *** rurban1 left
[16:34] *** rurban1 joined
[16:34] *** rurban5 joined
[16:34] *** rurban left
[16:35] *** rurban joined
[16:35] *** rurban left
[16:35] *** rurban2 left
[16:36] *** rurban3 left
[16:37] *** iH2O joined
[16:38] *** rurban4 left
[16:38] *** iH2O left
[16:38] *** rurban1 left
[16:39] *** rurban5 left
[16:39] *** MorayJ joined
[16:39] *** Deep_Thought joined
[16:40] *** andreoss joined
[16:43] <andreoss> what is a name of an object which is being wrapped by wrapper? wrappee?

[16:44] <gfldex> i would understand wrappee

[16:45] <Frameless> .oO( a mummy object )

[16:46] <geekosaur> "mummified" could work :p

[16:47] <andreoss> https://en.wikipedia.org/wiki/Adapter_pattern

[16:48] <dalek> doc: 77689a8 | (Zoffix Znet)++ | doc/Type/List.pod6:

[16:48] <dalek> doc: s/blogs.perl.org/perl6.party/ for extended .rotor coverage

[16:48] <dalek> doc: 

[16:48] <dalek> doc: perl6.party has better styles and offers in-browser code executes for readers to play with the code examples shown.

[16:48] <dalek> doc: review: https://github.com/perl6/doc/commit/77689a802a

[16:48] <andreoss> seems "adaptee" is more academic, i was close 

[16:51] <bob777> timotimo: I have some questions about Channel. I already read your blog [Concurrency and Channels in Perl 6].

[16:51] <bob777> my $handle = run('zcat', '0728912-chang.read1.fq.gz', :out);

[16:51] <bob777> my $c = Channel.new;

[16:51] <bob777> $c.send($handle.out.lines);

[16:51] <bob777> my $p1 = start {

[16:51] <bob777>     $c.receive.map(-> $l {

[16:51] <bob777> 	$l.UP; 

[16:51] <bob777>     });

[16:51] <bob777> };

[16:51] <bob777> my $p2 = start {

[16:51] <bob777>     $c.receive.map(-> $l {

[16:51] <bob777> 	$l.UP;

[16:51] <bob777>     });

[16:52] <Frameless> bob777: it's very hard to read code on IRC. In the future, if you have large amounts of information to share, please use a pastebin: http://fpaste.scsys.co.uk/

[16:52] <Frameless> Or gist: https://gist.github.com/  which can be given to the eval bot to execute

[16:53] <bob777> Frameless: OK Thank you for your advice.

[16:54] <gfldex> bob777: also, we can acutally git clone a gist and play with it

[16:54] <shadowpaste> "bob777" at 217.168.150.38 pasted "test channel" (16 lines) at http://fpaste.scsys.co.uk/526959

[16:56] <bob777> I try to use channel to carry out multi-threat, but I can not work it out.

[16:57] <Frameless> What's .UP in that code?

[16:58] <bob777> it is method apply to string and print out~

[16:58] <psch> m: my $c = Channel.new; my $p1 = start { $c.receive.map({ say "p1"; say $_ }) }; my $p2 = start { $c.receive.map({ say "p2"; say $_ }) }; $c.send(lines); await $p1; #

[16:58] <camelia> rakudo-moar eb79d7: OUTPUT«p1␤Céad slán ag sléibhte maorga Chontae Dhún na nGall␤p1␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤p1␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤p1␤I mo dhiaidh bhí gl…»

[16:58] <psch> m: my $c = Channel.new; my $p1 = start { $c.receive.map({ say "p1"; say $_ }) }; my $p2 = start { $c.receive.map({ say "p2"; say $_ }) }; $c.send(lines); await $p1; await $p2

[16:58] <psch> awaiting *both* promises gets weird

[16:58] *** abraxxa left
[16:58] <psch> as in, it takes a while 

[16:58] <camelia> rakudo-moar eb79d7: OUTPUT«(timeout)p1␤Céad slán ag sléibhte maorga Chontae Dhún na nGall␤p1␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤p1␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤p1␤I mo dhiaid…»

[16:58] <psch> and then times out on camelia

[16:59] <[Coke]> I wouldn't expect anything good trying to have 2 things iterate over a run() result.

[16:59] <psch> probably because p1 eats the whole channel and then p2 waits forever

[16:59] *** addison joined
[16:59] <[Coke]> I might expect one of those to error out saying the source was already in use.

[16:59] <psch> m: my $c = Channel.new; my $p1 = start { $c.receive.map({ say "p1"; say $_ }) }; my $p2 = start { $c.receive.map({ say "p2"; say $_ }) }; $c.send(lines); await $p1; $c.send("foo"); await $p2 # sending *after* awaiting $p1 makes it end immediately

[16:59] <camelia> rakudo-moar eb79d7: OUTPUT«p1␤Céad slán ag sléibhte maorga Chontae Dhún na nGall␤p1␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤p1␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤p1␤I mo dhiaidh bhí gl…»

[16:59] <[Coke]> what is the goal of doing 2 different awaits there?

[17:00] <psch> bob777: that's your problem.  you have to coordinate somehow between your two channels

[17:00] <psch> [Coke]: what do you mean?  if i 'await $p1, $2' i can't send anything and it times out because $p2 waits for something that won't come

[17:00] <psch> bob777: make that "promises" instead of "channels"

[17:01] <bob777> [Coke]: just for multi-threads

[17:01] <psch> bob777: the .map on $p1 means "gobble the whole Channel", which means it hangs as soon as you await $p2, because there's nothing left

[17:02] *** vendethiel left
[17:02] <bob777> psch: cool!

[17:03] <timotimo> i thought having channel.send(lines) would only send a single thing

[17:03] <timotimo> which is the iterator that'll give you all lines

[17:03] <gfldex> bob777: do I understand you right, that you want to start zcat in it's own process (it can't run in a thread) and then process the data with your Perl 6 program when it becomes available?

[17:03] <timotimo> when multiple "start"ed things receive on the same channel, they will all "fight for" getting new values

[17:04] <psch> timotimo: that's probably more accurate.  i mean, that you only get one value

[17:04] <psch> timotimo: so there's not really anything to gobble, but $p1 is still first

[17:04] <timotimo> yeah

[17:04] <psch> like, i don't think 1 value can be gobbled :)

[17:04] <timotimo> bob777 really wants to $chan.send($_) for lines()

[17:04] <timotimo> actually

[17:05] <timotimo> can't we .Channel a lazy iterator?

[17:05] <timotimo> but that probably doesn't then live on a thread, or be async

[17:05] <psch> i have a hunch about supplies, but i don't know the "new" semantics that well

[17:05] <bob777> gfldex: yes, I want to get the data from zcat, and manipulate in perl6

[17:05] *** rgrinberg left
[17:05] <gfldex> "just for multi-threads" gave you away :)

[17:13] *** firstdayonthejob joined
[17:13] <[Coke]> bob777: but why have two awaits fighting for the same data?

[17:13] <[Coke]> what are you trying to achieve there?

[17:14] <timotimo> bob wishes to have the work per-line split across threads

[17:14] <bob777> [Coke]: timotimo is right

[17:14] <[Coke]> danke.

[17:15] *** domidumont joined
[17:17] <timotimo> the per-line work is going to be alot of work

[17:18] *** dj_goku joined
[17:23] *** itaipu joined
[17:23] *** dj_goku left
[17:27] *** travis-ci joined
[17:27] <travis-ci> Doc build passed. Zoffix Znet 's/blogs.perl.org/perl6.party/ for extended .rotor coverage

[17:27] <travis-ci> https://travis-ci.org/perl6/doc/builds/144786961 https://github.com/perl6/doc/compare/7d2fc8ce3f30...77689a802a0c

[17:27] *** travis-ci left
[17:29] *** labster joined
[17:30] <dalek> doc: b8fbece | (Zoffix Znet)++ | / (2 files):

[17:30] <dalek> doc: Increase spacing between TOC links on mobile

[17:30] <dalek> doc: 

[17:30] <dalek> doc: To remove Google's mobile errors

[17:30] <dalek> doc: review: https://github.com/perl6/doc/commit/b8fbece444

[17:30] *** labster left
[17:31] <timotimo> maybe even to make the links easier to tap on?

[17:31] <bob777> timotimo: I tired tab but the memory usage is huge

[17:32] <timotimo> you did what?

[17:33] <nine> bob777: timotimo's comment was about the doc commit :)

[17:33] <bob777> May be I mis-understand your answear which is for other

[17:33] <bob777> :p

[17:33] <bob777> sorry~

[17:33] <timotimo> so ... you did what with tab but memory usage of what did what?

[17:33] <timotimo> in short: what?

[17:33] <nine> I think he means Tap

[17:34] *** bbkr left
[17:34] <bob777> Proc::Async

[17:34] <timotimo> oh

[17:34] <timotimo> i wonder why. it shouldn't keep output lines around for no reason

[17:36] <bob777> please go on~ sorry for break in~

[17:37] <dalek> doc: d2697b3 | (Zoffix Znet)++ | html/.htaccess:

[17:37] <dalek> doc: Enable asset compression

[17:37] <dalek> doc: review: https://github.com/perl6/doc/commit/d2697b393d

[17:41] *** ssm joined
[17:47] *** cdg left
[17:52] *** domidumont left
[17:54] <dalek> doc: cf30018 | (Zoffix Znet)++ | doc/Type/IO.pod6:

[17:54] <dalek> doc: Fix typo in code

[17:54] <dalek> doc: 

[17:54] <dalek> doc: Closes #703

[17:54] <dalek> doc: review: https://github.com/perl6/doc/commit/cf30018d2e

[17:55] *** canopus left
[17:58] *** sjoshi joined
[17:59] *** canopus joined
[18:00] *** addison left
[18:04] *** Deep_Thought left
[18:04] <Frameless> I know of a way to get rid of style.css in the docs repo: https://github.com/perl6/doc/issues/704

[18:05] <Frameless> I can do all the work described, if I get sudo perms to my zoffix account on hack :)

[18:08] <[Coke]> how many developers are we helping by not requiring SASS ?

[18:08] <Frameless> At least one: dogbert17 

[18:08] <[Coke]> if I'm hacking on the site, there's a good chance I'm touching the CSS, so I'll want that locally. if someone doesn't want it, are they going to be in a situation where they need it?

[18:08] <Frameless> And I think gfldex also had issues with the auto-generator

[18:09] <gfldex> i got it running, just took about 30min

[18:09] <[Coke]> to get it setup, or to run it on each build?

[18:09] <Frameless> [Coke]: I think many commiters are writing docs, rather than hacking on the site, and the dev app is for them to view their modifications look right

[18:10] <gfldex> to get it setup. The main problem where outdated perllib-somemodule.debs.

[18:10] <gfldex> but then, I know may ways around CPAN.pm

[18:10] <moritz> Frameless: zoffix is now a sudoer on hack

[18:10] <[Coke]> Frameless: and how many of those developers are actually looking at it locally?

[18:10] <Frameless> moritz: thanks

[18:11] <[Coke]> (I'm pushing towards just make it a requirement to work on the site, if it's really that great a css tool)

[18:11] <gfldex> [Coke]: if you tinker with CSS or htmlify.p6 you have to run it locally.

[18:11] <[Coke]> and I'd rather have the fallback be on local disk (e.g. in the repo) than require a network connection.

[18:12] <gfldex> i don't even know what SASS actually does

[18:12] <[Coke]> Guessing it's "source" -> CSS

[18:12] <Frameless> [Coke]: I don't know how many, but about 1hr after I added it, dogbert17 came in saying he's having trouble getting prereqs to install.

[18:13] *** labster joined
[18:13] <Frameless> SASS lets you write selectors much more concicely and it lets you use variables

[18:14] <Frameless> foo { a, b, c {} } is the same as foo a, foo b, foo c {} in plain CSS. If you now have to change foo, in SASS you change it in one place, in CSS in three

[18:14] <gfldex> the SASS packages themself don't got all dependencies set, so I had to watch the CPAN output and spider my way through the module web

[18:14] *** rindolf left
[18:14] <[Coke]> the way we dealt with this in earlier projects (i.e. parrot) was to make this an optional step that was detected at config time; if you had the tools, you ran this step; if you didn't, you used the saved output that was checked in. If you modified the source (and therefore the result) you checked in the result for the next person.

[18:14] <[Coke]> (cpan) I'm seeing a ruby gem, what perl modules are ther?

[18:15] <[Coke]> you're using App::Sass?

[18:15] <Frameless> No, Mojolicious::Plugin::AssetPack. It uses CSS::Sass if it's installed or the ruby gem you mentioned if it isn't

[18:16] <[Coke]> docs don't currently have a config time (they do in the makefile branch, but it's pretty dumb at the moment.)

[18:16] <gfldex> CSS::Sass CSS::Minifier::XS Mojolicious::Plugin::AssetPack

[18:17] *** addison joined
[18:17] *** rgrinberg joined
[18:17] <[Coke]> is dogbert17 using perlbrew?

[18:17] <[Coke]> or the ruby gem?

[18:18] <dalek> doc: e60bb8f | (Zoffix Znet)++ | / (2 files):

[18:18] <dalek> doc: Remove CSS::Minifier::XS from prereqs

[18:18] <dalek> doc: 

[18:18] <dalek> doc: SASS processor minifies for us

[18:18] <dalek> doc: review: https://github.com/perl6/doc/commit/e60bb8f19c

[18:19] <Frameless> Not sure.

[18:21] <Frameless> .ask dogbert17 are you able to install ruby-sass on your box? We are planning to make SASS processor on docs dev app mandatory

[18:21] <yoleaux> Frameless: I'll pass your message to dogbert17.

[18:23] *** domidumont joined
[18:24] <dalek> doc: 385a25a | (Zoffix Znet)++ | app.pl:

[18:24] <dalek> doc: Make CSS::Sass an optional prereqs even for SASS processing

[18:24] <dalek> doc: review: https://github.com/perl6/doc/commit/385a25a4dc

[18:36] *** spider-mario joined
[18:39] *** huggable joined
[18:41] *** andreoss left
[18:47] *** [particle] left
[18:47] <Frameless> Oh, my hack account is too secure for sudo lol. It ain't got a password :)

[18:48] *** rindolf joined
[18:48] <gfldex> Frameless: could you add a redirect from /examples.html to http://examples.perl6.org/ please?

[18:48] *** sjoshi left
[18:50] *** itaipu left
[18:52] *** matthias___ joined
[18:54] <dalek> doc: a3c7c99 | (Zoffix Znet)++ | html/.htaccess:

[18:54] <dalek> doc: Redirect /examples to http://examples.perl6.org/

[18:54] <dalek> doc: 

[18:54] <dalek> doc: gfldex++

[18:54] <dalek> doc: review: https://github.com/perl6/doc/commit/a3c7c9912a

[18:56] *** [particle] joined
[18:58] *** adu left
[19:04] <Frameless> Can someone run `sudo passwd zoffix` on hack and set some dummy password? A while back, passwd -l was run on my account to disable the password and not that makes it not able to use sudo lol

[19:04] <Frameless> Or at least, that's how I assume you undo the -l

[19:05] *** rgrinberg left
[19:05] *** rgrinberg joined
[19:07] <moritz> Frameless: see /msg

[19:08] *** kid51 joined
[19:09] <Frameless> moritz++ thanks a lot!

[19:09] *** itaipu joined
[19:11] *** [particle] left
[19:18] *** dj_goku joined
[19:18] *** dj_goku left
[19:18] *** dj_goku joined
[19:21] *** firstdayonthejob left
[19:22] *** Actualeyes left
[19:24] *** dj_goku left
[19:29] *** darutoko left
[19:30] *** itaipu left
[19:30] *** itaipu joined
[19:31] *** domidumont left
[19:38] *** cdg joined
[19:40] *** cdg left
[19:40] *** cdg joined
[19:41] *** rgrinberg left
[19:49] *** adu joined
[19:52] *** yqt joined
[19:53] *** adu left
[19:58] *** espadrine left
[20:00] *** dainis joined
[20:01] *** dainis left
[20:02] *** rgrinberg joined
[20:03] <AlexDaniel> [Coke]: I still haven't figured the best way to make it too… but that's just me I think

[20:03] <AlexDaniel> make it work*

[20:05] <AlexDaniel> my personal problem with it is that required packages are not even in debian unstable

[20:08] *** matthias___ left
[20:08] *** adu joined
[20:08] *** raiph joined
[20:10] <raiph> bisectable: use experimental :macros; macro bar { 42 }; bar;

[20:10] <bisectable> raiph: on both starting points the exit code is 1 and the output is identical as well

[20:11] <raiph> m: use experimental :macros; macro bar { 42 }; bar;

[20:11] <camelia> rakudo-moar eb79d7: OUTPUT«===SORRY!===␤Too few positionals passed; expected 3 arguments but got 2␤»

[20:11] <raiph> m: use experimental :macros; macro bar { quasi { 42 } }; bar;

[20:11] <camelia> rakudo-moar eb79d7: OUTPUT«Weird node visited: QAST::BVal␤»

[20:13] *** TEttinger joined
[20:13] <raiph> Hmm. I think these are both covered by RTs. Checking...

[20:14] <AlexDaniel> raiph: I have never seen macros working properly. That's why it is experimental, I guess

[20:14] <geekosaur> they worked to some extent before v6.c (how long before, I don't recall)

[20:16] *** firstdayonthejob joined
[20:19] <AlexDaniel> bisectable: good=2015.10 use experimental :macros; macro bar { 42 }; bar;

[20:19] <bisectable> exit code is 1 on both starting points, bisecting by using the output

[20:19] <bisectable> AlexDaniel: (2015-10-23) https://github.com/rakudo/rakudo/commit/c8c4946

[20:24] *** RabidGravy joined
[20:35] *** acrussell left
[20:35] *** gcole left
[20:37] *** acrussell joined
[20:37] *** acrussell left
[20:37] *** acrussell joined
[20:43] *** acrussell left
[20:50] *** mohae_ joined
[20:53] *** mohae left
[20:54] *** girafe joined
[20:57] *** itaipu left
[21:02] *** dainis joined
[21:04] <dogbert17> .

[21:04] <yoleaux> 18:21Z <Frameless> dogbert17: are you able to install ruby-sass on your box? We are planning to make SASS processor on docs dev app mandatory

[21:05] <dogbert17> Frameless: what kind of package is that, a Ruby gem?

[21:06] <AlexDaniel> fwiw, ruby-sass is available in debian. The only problem is that by default it produces slightly different output

[21:07] *** dainis left
[21:07] *** dainis joined
[21:08] <dogbert17> I just did a 'gem install sass' which seems to have gone well

[21:08] <dogbert17> should I install via apt-get instead?

[21:09] <gfldex> the package is likely older

[21:09] *** dainis left
[21:10] *** rgrinberg left
[21:10] *** dvinciguerra_ left
[21:10] <AlexDaniel> 3.4.6 in jessie, 3.4.22 in testing

[21:11] *** skids left
[21:11] <dogbert17> the one installed by gem was 3.4.22

[21:12] <dogbert17> and if i run the sass command I get 'Sass 3.4.22 (Selective Steve)' so I guess it might work

[21:16] *** adu left
[21:19] *** dj_goku joined
[21:23] *** labster left
[21:24] *** dj_goku left
[21:26] *** rgrinberg joined
[21:27] *** gcole joined
[21:28] *** ShimmerFairy joined
[21:31] <dogbert17> m: my @seasons[4, :map( * % 4 )]; # NYI ?

[21:31] <camelia> rakudo-moar eb79d7: OUTPUT«Method 'Int' not found for invocant of class 'Pair'␤  in block <unit> at <tmp> line 1␤␤»

[21:31] *** addison left
[21:32] *** adu joined
[21:34] <gfldex> I just did wget -rk http://docs.perl6.org, put the result on a samba share and opened it on windows in FF

[21:34] <gfldex> the search doesn't work, because of wronglinks, but beside that it's ok

[21:36] <gfldex> windows doesn't like type-graph-Metamodel::AttributeContainer.png

[21:38] <gfldex> also, wget doesn't rewrite links in .svg

[21:43] *** Zoffix joined
[21:44] *** khw joined
[21:44] <Zoffix> AlexDaniel, do you mean editing code using GitHub editor or working on the live site using some sort of plugins? RE "You can work on small things directly in your browser, without even cloning a repo."

[21:44] <yoleaux> 13 Jul 2016 23:13Z <gfldex> Zoffix: here: http://irclog.perlgeek.de/perl6/2016-07-13#i_12834362

[21:44] *** espadrine joined
[21:47] *** wamba left
[21:47] <AlexDaniel> Zoffix: it is possible to change JS in, for example, chromium default developer tools. So yea, I meant doing quick small changes on the live site, and then suggesting them in a github issue or submitting a pull request using the github editor.

[21:48] <Zoffix> OK. I'll leave JS alone

[21:53] <gfldex> ugexe: I see you are using Distribution::Common::Tar in CompUnit::Repository::Tar. May I ask where you got Common::Tar from?

[21:54] <ugexe> Distribution::Common

[21:54] *** espadrine left
[21:55] *** rindolf left
[21:56] <gfldex> ugexe: got it, thanks

[21:56] *** [particle] joined
[21:57] *** labster joined
[21:58] *** rindolf joined
[21:59] *** addison joined
[22:01] *** [particle] left
[22:06] *** espadrine joined
[22:11] *** adu left
[22:13] *** espadrine left
[22:15] *** Zoffix left
[22:18] *** [particle] joined
[22:19] *** Ven joined
[22:22] *** kid51 left
[22:23] *** [particle] left
[22:26] *** pmurias left
[22:27] *** skids joined
[22:33] <hoelzro> QAST::Nodes don't store any metadata about their position in the source, do they?

[22:33] <hoelzro> do they by chance have a reference to a cursor that would have that information?

[22:36] *** Ven left
[22:36] *** Ven joined
[22:39] *** huggable left
[22:39] *** Ven left
[22:42] *** jack_rabbit joined
[22:49] *** adu joined
[22:53] *** RabidGravy left
[22:53] *** firstdayonthejob left
[22:55] *** dvinciguerra_ joined
[22:56] <ShimmerFairy> hoelzro: they should hold a match object in a "node" attribute, IIRC

[23:16] *** MorayJ left
[23:20] *** dj_goku joined
[23:20] *** dj_goku left
[23:20] *** dj_goku joined
[23:21] <hoelzro> ShimmerFairy: thanks, I think you're onto something there!

[23:25] *** dj_goku left
[23:26] *** girafe left
[23:35] <ShimmerFairy> np :)

[23:35] <adu> yes problem

[23:39] *** dvinciguerra_ left
[23:42] *** kurahaupo left
[23:44] *** sftp joined
[23:48] *** grondilu left
[23:52] <dalek> doc: cd56814 | (Wenzel P. P. Peppmeyer)++ | doc/Language/terms.pod6:

[23:52] <dalek> doc: sparate π/pi τ/au for better per-term files

[23:52] <dalek> doc: review: https://github.com/perl6/doc/commit/cd56814eec

[23:56] *** cdg left
[23:56] *** spider-mario left
[23:56] *** cdg joined
