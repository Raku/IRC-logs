[00:00] <seatek> if only the worldwide web consortium would have embraced POD instead of HTML... ;)

[00:03] *** ufobat_ left
[00:03] *** naptastic left
[00:05] *** rodrigok left
[00:05] *** cpage_ joined
[00:12] <seatek> i will never use bold or italic again

[00:12] <seatek> ever

[00:12] *** cdg left
[00:18] *** naptastic joined
[00:19] <dalek> doc: 87e90bb | gfldex++ | doc/Language/objects.pod6:

[00:19] <synopsebot6> Link: http://doc.perl6.org/language/objects

[00:19] <dalek> doc: show how to access class attributes in initializers

[00:19] <dalek> doc: review: https://github.com/perl6/doc/commit/87e90bb217

[00:19] <timotimo> seatek: here you can see the work i did today that was related to links in the documentation

[00:22] <dalek> doc: aa6b468 | gfldex++ | doc/Language/typesystem.pod6:

[00:22] <synopsebot6> Link: http://doc.perl6.org/language/typesystem

[00:22] <dalek> doc: fix markup

[00:22] <dalek> doc: review: https://github.com/perl6/doc/commit/aa6b4689aa

[00:22] <seatek> ah there that one is :)_

[00:23] <seatek> the first was about the self stuff that just got talked about. i love self. it fixes everything. ;)

[00:23] <timotimo> i wanted to also calculate how long it'd take for the cron job to jump into action the next time, but i ended up deciding against it

[00:23] <seatek> why would you want to know that?

[00:24] <seatek> seems like it could cause stress. it's better not to know

[00:24] <timotimo> "click here in 5 minutes to see your changes"

[00:24] <seatek> oh hehe ;)

[00:25] <dalek> doc: 225acbd | gfldex++ | doc/Language/typesystem.pod6:

[00:25] <synopsebot6> Link: http://doc.perl6.org/language/typesystem

[00:25] <dalek> doc: fix another naked link

[00:25] <dalek> doc: review: https://github.com/perl6/doc/commit/225acbd1e5

[00:26] <seatek> that's a whole different way to link, in that last thing. i think there is no standard way to make links.

[00:26] * gfldex .oO( If you want something done do it self.your! )

[00:26] <seatek> :)

[00:29] *** John[Lisbeth] left
[00:36] <seatek> oh, i'm using bold and italic much less as the document goes on. i must have been subconsciously trying to save my life in the future

[00:37] *** John[Lisbeth] joined
[00:39] *** John[Lisbeth] left
[00:45] <seatek> if you create a new file on github in doc/doc/Language it won't automatically show up on the website will it?

[00:46] *** wamba left
[00:49] *** pierre_ joined
[00:49] <gfldex> seatek: if it ends in .pod6 it will be processed. Any index entry will show up in the search index.

[00:50] <seatek> gfldex: is the pod6 rendering done git-site-wide? i have a grammar tutorial i'd like to put somewhere for people to check out and use if they want

[00:51] <seatek> i don't know where to put for review though

[00:52] <gfldex> there is a cron job that is running 3 times the hour that will generate the docs. Just push your stuff. If we can't stand it we can always revert the commit.

[00:52] <seatek> hehe ok ;)

[00:53] *** mcmillhj joined
[00:53] <gfldex> seatek: build logs show up in https://docs.perl6.org/build-log/

[00:53] <gfldex> if you break the build you can check there what went wrong

[00:55] <dalek> doc: d7ce18c | adaptiveoptics++ | doc/Language/grammar_tutorial.pod6:

[00:55] <synopsebot6> Link: http://doc.perl6.org/language/grammar_tutorial

[00:55] <dalek> doc: A new grammar tutorial for review

[00:55] <dalek> doc: 

[00:55] <dalek> doc: What would have helped me come to grips with what they actually were

[00:55] <dalek> doc: review: https://github.com/perl6/doc/commit/d7ce18c67e

[00:55] <gfldex> also, travis will complain loudly. There is no connection between travis and the cron job tho. That travis fails does not mean the build will fail too.

[00:55] <seatek> i ran it through my local perl6 --doc thingy and got no error

[00:57] <gfldex> htmlify.p6 is a bit more involved then that. You may want to read https://github.com/perl6/doc/blob/master/CONTRIBUTING.md .

[00:57] *** skink joined
[00:58] <gfldex> seatek: most contributors break lines at 80 chars to make it easier to review directly on github

[00:58] <skink> ahoy #perl6

[00:59] *** mcmillhj left
[00:59] <timotimo> o/

[00:59] <timotimo> htmlify is also quite slow

[00:59] <seatek> think i should delete it and wrap at 80 cols?

[01:00] <skink> Anyone tried calling C ABI Rust code using NativeCall yet?

[01:00] <seatek> no prob to do so

[01:01] <gfldex> seatek: there is no real need to do that right now. It's not a short edit that is worth reading on github.

[01:01] <seatek> k

[01:09] <dalek> doc: 9479b4a | gfldex++ | doc/Language/grammar_tutorial.pod6:

[01:09] <synopsebot6> Link: http://doc.perl6.org/language/grammar_tutorial

[01:09] <dalek> doc: fix grammar a little

[01:09] <dalek> doc: review: https://github.com/perl6/doc/commit/9479b4ad41

[01:09] * timotimo goes to bed

[01:12] *** mscha left
[01:16] *** Actualeyes joined
[01:27] <dalek> doc: 6329a01 | gfldex++ | doc/Language/grammar_tutorial.pod6:

[01:27] <synopsebot6> Link: http://doc.perl6.org/language/grammar_tutorial

[01:27] <dalek> doc: make examples compile

[01:27] <dalek> doc: review: https://github.com/perl6/doc/commit/6329a012ad

[01:30] *** wisti joined
[01:34] <seatek> gfldex: thanks for the fixes :)

[01:34] <dalek> doc: 0716b91 | MasterDuke17++ | doc/Language/grammar_tutorial.pod6:

[01:34] <synopsebot6> Link: http://doc.perl6.org/language/grammar_tutorial

[01:34] <dalek> doc: Just some typo and consistency fixes

[01:34] <dalek> doc: review: https://github.com/perl6/doc/commit/0716b91455

[01:36] <MasterDuke> oops, i just overwrote (some of?) gfldex's fixes

[01:36] <MasterDuke>  /me--

[01:37] <MasterDuke> hmm, you can't revert from the github ui?

[01:38] <seatek> i've never tried -- i'd avoided github for years

[01:39] <MasterDuke> btw, ++seatek++

[01:39] *** leont left
[01:39] <seatek> MasterDuke: hey thank you :)

[01:40] <seatek> and thanks for the proddings too

[01:44] <dalek> doc: 0779a3b | MasterDuke17++ | doc/Language/grammar_tutorial.pod6:

[01:44] <synopsebot6> Link: http://doc.perl6.org/language/grammar_tutorial

[01:44] <dalek> doc: Revert "Just some typo and consistency fixes"

[01:44] <dalek> doc: 

[01:44] <dalek> doc: This reverts commit 0716b914559133049a5c3b6566297e529b6df28f.

[01:44] <dalek> doc: I accidentally overwrote gfldex's previous fixes.

[01:44] <dalek> doc: review: https://github.com/perl6/doc/commit/0779a3b423

[01:45] *** cibs left
[01:46] *** cibs joined
[01:46] <tbrowder> .tell viki to check Misc::Utils to see table of proposed module names after breakup

[01:46] <yoleaux> tbrowder: I'll pass your message to viki.

[01:57] *** pierre_ left
[02:03] *** pierre_ joined
[02:08] *** pierre_ left
[02:09] <dalek> doc: e15eb8a | adaptiveoptics++ | doc/Language/grammar_tutorial.pod6:

[02:09] <synopsebot6> Link: http://doc.perl6.org/language/grammar_tutorial

[02:09] <dalek> doc: <em> converted to pod I<>

[02:09] <dalek> doc: review: https://github.com/perl6/doc/commit/e15eb8a8cd

[02:12] *** ocbtec left
[02:36] *** canopus left
[02:43] *** canopus joined
[02:45] *** ilbot3 left
[02:48] *** ilbot3 joined
[02:49] *** pierre_ joined
[02:55] *** kst` is now known as kst

[03:02] *** pierre_ left
[03:03] *** Rawriful left
[03:05] *** DarthGandalf left
[03:05] *** DarthGandalf joined
[03:06] *** mephinet left
[03:06] *** stanley left
[03:06] *** pierre_ joined
[03:07] *** mephinet joined
[03:08] *** stanley joined
[03:15] *** AlexDaniel left
[03:17] <naptastic> In Perl 6, is there a special grapheme to indicate that a string has ended? (Like how strings in C are always null-terminated?)

[03:19] <gfldex> naptastic: not on the users end

[03:21] <geekosaur> string terminators are not well loved... lengths are better

[03:21] <dalek> doc: c0c9480 | gfldex++ | doc/Language/grammar_tutorial.pod6:

[03:21] <synopsebot6> Link: http://doc.perl6.org/language/grammar_tutorial

[03:21] <dalek> doc: fix markup

[03:21] <dalek> doc: review: https://github.com/perl6/doc/commit/c0c948043b

[03:22] <naptastic> ok, that's kinda what I figured. Null-termination when a grapheme is 32-bits seems silly.

[03:23] <seatek> gfldex: i was wondering about that! in the synopsis, =item1 had a # after it but I guess that was just to indicate that a number would be auto-generated in that position

[03:25] *** dataf3l joined
[03:43] *** skink left
[03:44] *** naptastic left
[03:46] *** seatek left
[03:56] *** noganex joined
[03:59] *** noganex_ left
[04:00] *** dataf3l left
[04:01] *** Sgeo left
[04:05] *** Sgeo joined
[04:05] *** khw left
[04:11] *** cpage_ left
[04:13] *** skids left
[04:44] *** MilkmanDan left
[04:48] *** aborazmeh joined
[04:48] *** aborazmeh left
[04:48] *** aborazmeh joined
[04:49] *** zacts joined
[04:53] *** pierre_ left
[04:54] *** sammers joined
[04:59] *** cpage_ joined
[05:11] *** MilkmanDan joined
[05:12] *** Actualeyes1 joined
[05:12] *** Actualeyes left
[05:16] *** wamba joined
[05:19] *** wisti left
[05:27] *** aborazmeh left
[05:27] *** seatek joined
[05:34] *** Cabanossi left
[05:37] *** Cabanossi joined
[05:38] *** labster left
[05:40] <seatek> I don't much about Windows at all. But I'm on it right now. Going to try Perl6 on it. But I dont' see an October build of Rakudo star for Windows. Just Mac (dmg?) Is it just not available for Windows? Doesn't matter to me one bit really.

[05:45] *** CIAvash joined
[05:58] <seatek> ok i'm going to try building it myself with a cygwin gcc compiler. heh

[06:02] *** bpmedley left
[06:02] <seatek> ok that doesn't work out of the box "Standard and WinAPI seek modes not compatible"

[06:10] <seatek> ok looks like a linux vm is in order :)

[06:13] <samcv> anybody have any tips for killing processes started with Proc::Async? i'm not having much luck with .kill, or even .kill(9), even on a loop isn't killing the process

[06:14] <samcv> put in a way for the secondary program to exit when it gets STDIN that is "KILL\n" but, maybe there's something else i can try? because if the secondary process fails and doesn't respond anymore this doesn't work

[06:14] <samcv> or maybe it's the fact that $proc.started is returning true even when the process is already dead?

[06:15] <samcv> but i tried putting while $proc.started { $proc.kill(9); }, and that didn't do anything either useful

[06:15] <geekosaur> I would be *very* surprised if a SIGKILL wasn't actually killing it

[06:16] <geekosaur> unless it's not actually delivering the signal

[06:18] <samcv> well at least i know that $proc.started continues returning true

[06:18] <samcv> even after $proc.kill in a loop

[06:22] *** rodarmor joined
[06:25] *** domidumont joined
[06:29] *** domidumont left
[06:30] *** domidumont joined
[06:31] *** vendethiel left
[06:31] *** vendethiel joined
[06:34] *** pierre_ joined
[06:36] *** domidumont left
[06:37] *** domidumont joined
[06:41] *** neuraload joined
[06:43] *** domidumont left
[06:45] *** Tonik joined
[06:49] *** bjz joined
[06:50] *** RabidGravy joined
[06:50] *** labster joined
[06:55] *** bjz left
[06:58] *** bjz joined
[07:01] *** domidumont joined
[07:03] *** bjz left
[07:08] *** girafe left
[07:13] *** wamba left
[07:16] *** pierre_ left
[07:20] <gfldex> samcv: you may have to close open handles

[07:21] <gfldex> samcv: if handle 0-2 are still open, the process wont go away but becomes a zombie

[07:21] *** bjz joined
[07:21] *** pierre_ joined
[07:26] *** pierre_ left
[07:28] *** sammers left
[07:28] *** RabidGravy left
[07:31] *** firstdayonthejob joined
[07:37] *** Tonik left
[07:40] *** firstdayonthejob left
[07:45] *** pierre_ joined
[07:45] *** wamba joined
[07:53] *** wamba left
[08:00] *** wamba joined
[08:02] *** zakharyas joined
[08:19] <masak> morning, #perl6

[08:26] *** nebuchadnezzar left
[08:30] <moritz> \o masak 

[08:32] *** CIAvash left
[08:32] <u-ou> 'tis evening time!

[08:32] <[ptc]> o/

[08:42] *** harmil_wk left
[08:42] *** ufobat joined
[08:50] <masak> u-ou: are you somewhere in Asia, then? or Oceania?

[08:51] <u-ou> new zealand

[08:51] <masak> lovely place

[08:51] <u-ou> yah, it's nice

[08:52] <masak> though a bit further ahead of the rest of the world in realizing that The Sun Is Not Your Friend...

[08:52] <u-ou> not really. it's pretty mild here.

[08:52] <u-ou> that's def. true of australia though.

[08:53] <masak> to me that was a difference to .se -- the UV radiation awareness

[08:53] <masak> u-ou: 12 years ago, I ended up riding a bike from North Island to South Island

[08:53] <masak> basically from Palmerston North to Christchurch

[08:54] <u-ou> whoa

[08:54] <masak> :D

[08:54] <u-ou> that's a lot of cycling

[08:54] <masak> ah, the adventures of youth

[08:54] <u-ou> hehe

[08:54] <masak> I didn't bike exactly the whole way

[08:54] <masak> took a bus from Nelson to Greymouth, IIRC

[08:55] <[ptc]> u-ou: where in NZ?

[08:55] <u-ou> south island

[08:56] <[ptc]> could you be more specific?  I'm from the North Island ;-)

[08:56] <u-ou> dunedin :P

[08:56] <masak> I heard nice things about Dunedin. never went there, though.

[08:57] <[ptc]> lovely place, Dunedin.  The Cadbury's chocolate factory is there (mmmm, chocolate...) and it's got this pretty old train station close to the centre of town

[08:58] <[ptc]> also has the steepest street in the southern hemisphere

[08:59] <DrForr> That reminds me that I need to stop by Paul A. Young while I'm at LPW.

[08:59] <masak> [ptc]: wait -- where's the steepest street in the northern hemisphere? LA?

[09:00] <[ptc]> masak: dunno.  Probably

[09:01] <masak> https://en.wikipedia.org/wiki/Baldwin_Street

[09:01] <masak> seems this is the steepest (residential) street in the *world*, though

[09:01] <[ptc]> could be

[09:01] <[ptc]> in which case it's *also* the steepest street in the southern hemisphere :-)

[09:02] <[ptc]> as far as I know, Dunedin got planned by a whole lot of British town planners, and so they planned streets for NZ much the same as the rolling hills in England

[09:02] *** jonas1 joined
[09:02] <masak> "average slope of slightly more than 1:5"

[09:02] <masak> m: say atan2(5, 1) / pi * 180

[09:02] <camelia> rakudo-moar c55c5d: OUTPUT«78.6900675259798␤»

[09:02] <[ptc]> hence, someone said "the street has to go that way" and so they built it straight up; complete with steps for the footpath (otherwise it'd be too steep to walk up)

[09:02] <masak> ...please tell me I got that calculation wrong

[09:03] <[ptc]> me too!

[09:03] <masak> m: say atan2(2.86, 1) / pi * 180

[09:03] <camelia> rakudo-moar c55c5d: OUTPUT«70.7278029327301␤»

[09:03] <masak> m: say 90 - atan2(2.86, 1) / pi * 180

[09:03] <camelia> rakudo-moar c55c5d: OUTPUT«19.2721970672699␤»

[09:03] <masak> aha

[09:03] <[ptc]> that looks better!

[09:03] <masak> m: say 90 - atan2(5, 1) / pi * 180

[09:03] <camelia> rakudo-moar c55c5d: OUTPUT«11.3099324740202␤»

[09:04] <masak> ...that's the average slope

[09:04] *** dj_goku_ left
[09:04] <[ptc]> I've known people to bike up it.  I know my car had a hard time in first gear...

[09:04] <masak> m: say atan2(1, 2.86) / pi * 180

[09:04] <camelia> rakudo-moar c55c5d: OUTPUT«19.2721970672699␤»

[09:04] <masak> ...and that's what I got wrong

[09:04] * masak .oO( Know Thy Arguments )

[09:05] * [ptc] .oO( Masak's 10 Commandments of Programming )

[09:06] <masak> oh, I don't think I'm qualified to do commandments. :)

[09:06] <masak> but I can play the role of the stoned Oracle of Delphi, at a pinch

[09:06] <[ptc]> I'd like to see that

[09:07] * masak .oO( this joke does not imply the endorsement of drugs, except those approved by society: coffee, and lack of sleep )

[09:10] <DrForr> I just got an invitation to speak (reimbursed) at DevDays Vilnius.

[09:13] <masak> DrForr: great!

[09:15] <DrForr> Very surprise. Much WTH.

[09:24] *** sammers joined
[09:24] *** vendethiel left
[09:30] *** brillenfux joined
[09:30] *** bjz left
[09:30] *** bjz_ joined
[09:30] <moritz> DrForr: wow, congratulations

[09:31] *** imcsk8 left
[09:31] *** imcsk8 joined
[09:32] <DrForr> Nod. It was something of a surprise.

[09:42] *** flaviusb left
[09:43] *** nebuchadnezzar joined
[09:48] *** flaviusb joined
[09:52] <u-ou> i like sleep

[09:54] *** imcsk8 left
[09:54] *** imcsk8 joined
[09:55] <masak> u-ou: sleep well! dream of appropriately sloped streets

[09:55] <u-ou> oh, i'm not going now :p

[09:56] *** maybekoo2 joined
[09:56] <masak> ...you just wanted to make your enthusiasm for sleep known. got it :>

[09:57] *** breinbaas joined
[09:57] <u-ou> it was about your endorsement of the lack of sleep

[09:57] <u-ou> :>

[09:57] *** labster left
[09:59] <timotimo> oh, from new zealand

[09:59] <timotimo> i hear it's beautiful

[09:59] <timotimo> there's vikings there, right?

[09:59] <masak> timotimo: upside-down vikings

[10:00] <tadzik> You mean sbuıʞıʌ

[10:01] <timotimo> not ʌıʞıuƃs?

[10:02] <masak> Unicode consortium: look what you have done!

[10:02] * masak .oO( look at my codepoints, ye mighty, and despair )

[10:03] <DrForr> Unimandius.

[10:06] <jnthn> I saw the Unicode 10 emoji draft and it has a Perl 6 implementor emoji.

[10:06] <jnthn> "Head banging against a Wall"

[10:06] <timotimo> poor walls

[10:06] <timotimo> larry and gloria surely don't deservet his

[10:06] <jnthn> :P

[10:07] <timotimo> i don't know the other walls personally, so can't say more

[10:07] <masak> the other Walls that I've met were also well worth preserving against gratuitous head-banging

[10:08] <masak> I'm assuming it extends to all Walls

[10:13] *** rindolf joined
[10:16] *** seatek left
[10:21] *** bjz_ left
[10:22] *** bjz joined
[10:23] *** leont joined
[10:30] *** pmurias joined
[10:47] *** user9 joined
[10:49] *** vendethiel joined
[11:02] *** AlexDaniel joined
[11:08] *** Actualeyes1 left
[11:19] *** brillenfux left
[11:29] *** Actualeyes joined
[11:32] *** pierre_ left
[11:39] *** ocbtec joined
[11:39] <dalek> doc: c1724eb | (Tom Browder)++ | doc/Language/grammar_tutorial.pod6:

[11:39] <synopsebot6> Link: http://doc.perl6.org/language/grammar_tutorial

[11:39] <dalek> doc: fix typo

[11:39] <dalek> doc: review: https://github.com/perl6/doc/commit/c1724eb8a9

[11:39] *** maybekoo2 left
[11:52] *** itaipu joined
[12:01] *** gregf_ joined
[12:08] *** AlexDaniel left
[12:09] <tbrowder> mornin, p6

[12:09] <lizmat> tbrowder o/

[12:10] <tbrowder> just found out there is a blended Scotch whiskey named Monkey Shoulder--sounds like a good candidate for the MONKEY names if another is needed!

[12:10] <tbrowder> hi, lizmat

[12:11] * moritz is against the proliferation of alcohl memes

[12:11] *** viki left
[12:11] *** NeuralAnomaly left
[12:11] *** huggable left
[12:11] *** buggable left
[12:11] *** Actualeyes left
[12:12] * lizmat wonders how moritz thinks about smoking

[12:13] <tbrowder> i'm in the process of breaking my WIP module into more specific areas with more focused names.

[12:14] <tbrowder> I would appreciate any critiques of github.com/tbrowder/Misc-Utils-Perl6

[12:14] <tbrowder> There you should see a table with the names.

[12:15] <moritz> lizmat: I think it's much less of a problem than alcohol these days (at least in .de)

[12:15] *** viki joined
[12:16] <lizmat> moritz: yes, it's less of a test these days  :-)

[12:16] <timotimo> m: my $hexstr = "1af43b"; say :16($hexstr)

[12:16] <camelia> rakudo-moar c55c5d: OUTPUT«1766459␤»

[12:16] <timotimo> tbrowder: ^ may be interesting to you

[12:16] <viki>  

[12:16] <yoleaux> 01:46Z <tbrowder> viki: to check Misc::Utils to see table of proposed module names after breakup

[12:17] <tbrowder> i found out about that too late, bit you will see it on my todo list in the repo

[12:18] <moritz> lizmat: and I don't have anything against alcohol per se either, just against the unquestioned prevalence in culture that make its consumption feel normal or even mandatory

[12:18] <timotimo> i see

[12:19] <lizmat> moritz: I was trying to refer to the early days of test-smoking (around 2001) where some people were very much against calling it smoking

[12:19] <lizmat> moritz: using the same reason you just mentioned: to be against the proliferation of smoking memes  :-)

[12:23] <tbrowder> .tell ilmari please check my WIP module at github.com/tbrowder/Misc-Utils-Perl6 for proposed module names shown in the table in the README. comments, please.

[12:23] <yoleaux> tbrowder: I'll pass your message to ilmari.

[12:26] *** geekosaur left
[12:28] *** Actualeyes joined
[12:28] *** geekosaur joined
[12:28] <dalek> doc: cfff693 | coke++ | doc/Language/grammar_tutorial.pod6:

[12:28] <synopsebot6> Link: http://doc.perl6.org/language/grammar_tutorial

[12:28] <dalek> doc: remove trailing whitespace

[12:28] <dalek> doc: review: https://github.com/perl6/doc/commit/cfff693960

[12:28] <dalek> doc: 9ba02df | coke++ | doc/Language/grammar_tutorial.pod6:

[12:28] <dalek> doc: use consistent variable name

[12:28] <synopsebot6> Link: http://doc.perl6.org/language/grammar_tutorial

[12:28] <dalek> doc: review: https://github.com/perl6/doc/commit/9ba02df07f

[12:28] <dalek> doc: be7d89d | coke++ | doc/Language/grammar_tutorial.pod6:

[12:28] <synopsebot6> Link: http://doc.perl6.org/language/grammar_tutorial

[12:28] <dalek> doc: don't use 's for plurals

[12:28] <dalek> doc: review: https://github.com/perl6/doc/commit/be7d89d84a

[12:28] <dalek> doc: b0339f3 | coke++ | xt/ (2 files):

[12:28] <dalek> doc: new words

[12:28] <dalek> doc: review: https://github.com/perl6/doc/commit/b0339f3d7a

[12:29] <arnsholt> moritz: Coming from Scandinavia, I share your annoyance with the "drink or be labelled a weirdo" meme =)

[12:29] *** geekosaur left
[12:30] *** geekosaur joined
[12:34] * viki questions the wiseness of making Pod::To::HTML generate docs with //design.perl6.org/perl.css as the default stylesheet.

[12:34] <viki> (1) With enough users, that'll hammer the server; (2) it doesn't work for file://

[12:36] <moritz> viki: I think nobody considers it wise, it was just the simplest thing that could have possibly worked, kindof

[12:38] <viki> Ah, the shoot from the hip approach.

[12:38] <moritz> right. That's what got us a doc.perl6.org at all :-)

[12:39] <viki> :)

[12:39] <moritz> I shot from the hip while others pondered good, deep solutions

[12:39] <arnsholt> 's what gave us large chunks of the infrastructure we have, I think

[12:40] <tbrowder> .tell adaptiveoptics thanks for the tutorial, just skimmed it, but looks like it will be very useful!

[12:40] <yoleaux> tbrowder: I'll pass your message to adaptiveoptics.

[12:43] *** geekosaur left
[12:44] *** geekosaur joined
[12:45] *** aborazmeh joined
[12:45] *** aborazmeh left
[12:45] *** aborazmeh joined
[12:55] *** bjz left
[12:57] *** pierre__ joined
[13:01] *** aborazmeh left
[13:02] *** geekosaur left
[13:03] *** geekosaur joined
[13:04] *** aborazmeh joined
[13:04] *** aborazmeh left
[13:04] *** aborazmeh joined
[13:04] <masak> so... I got a Travis email "Build #6208 was broken" (for Rakudo) due to my commit "fix typo"

[13:04] <masak> do I need to do anything?

[13:04] <viki> nah

[13:04] <masak> my commit literally removes one character from a printed string in a scipt

[13:05] <viki> The nativecall tests are flopping, it was failing before your fix

[13:05] * moritz gets basically daily mails from appveyor (or whatever it's called) due to the build flapping on windows

[13:05] <viki> masak: https://irclog.perlgeek.de/perl6-dev/2016-11-03#i_13507717

[13:06] <masak> I don't like that we normalize flapping (as opposed to isolating those tests until they can behave better)

[13:07] <masak> if there's any truth to the parable of the broken window, just accepting flapping tests without taking action leads to even bigger things slipping through

[13:09] *** Sound joined
[13:09] *** cdg joined
[13:13] <viki> masak: does it mean you'll debug and isolate them now? :)

[13:13] *** geekosaur left
[13:14] *** geekosaur joined
[13:14] <viki> The broken window is a psychological fact. But so is not dropping everything to fix something someone else deems to be of the ultimate importance.

[13:14] <masak> "isolating" simply means "moving the tests (temporarily) aside so they stop breaking the test suite"

[13:14] <viki> Wouldn't that just hide the fact that the tests that used to pass now flap?

[13:14] <masak> yes, that's exactly what it would do

[13:15] <viki> So more and more would be moved out of active use.

[13:15] <viki> I don't understand the benefit of doing that.

[13:15] <masak> because *exposing* that fact all the time risks hiding other relevant test failures

[13:16] <masak> a flapping test represents risk, and a way to mitigate that risk is to move them aside until they stop flapping

[13:16] <viki> The native call tests started flapping like yesterday or two days ago. I think the solution is to fix the issue, not to mute it.

[13:16] <masak> of course fixing the issue is better than almost anything else :)

[13:16] <viki> A flapping test represents either a broken test or a broken software. Disabling the test just sweeps the issue under the carpet.

[13:16] <masak> but if it takes a week (wallclock time) to isolate, understand and fix the issue, we'll have a week's worth of flapping tests

[13:17] <masak> I'm not talking about deleting the flapping tests. I'm talking about disconnecting them from the "build broken" result

[13:17] *** geekosaur left
[13:17] <masak> because we care about when the build *actually* breaks

[13:17] *** geekosaur joined
[13:18] <masak> oh! oh! "the boy who cried wolf". that's what I'm getting at.

[13:18] <masak> flapping tests cry wolf, and so we should stop listening to them.

[13:18] <viki> Instead we should put the boy into a soundproof cage? :)

[13:19] <masak> that you can walk in when you have time to reason with the boy, yes

[13:20] <viki> :)

[13:20] <masak> because we know there's no wolf, but the boy still needs our attention

[13:20] <viki> No, we *know* there's a wolf. 

[13:20] <viki> That's what the failing test indicates.

[13:20] <viki> The fact that it fails, say 50% of the time is no indication there's no wolf.

[13:20] <masak> flapping tests aren't a wolf, they're (wrongly) *crying* wolf -- that's the point

[13:21] <[Coke]> "conditioning ourselves to ignore failing tests bad."

[13:21] <viki> flapping tests indicate an issue that's not 100% reproducible.

[13:21] <masak> anyway, I can't think of anything else to say without repeating myself, so I'll drop it

[13:21] <viki> m: rand > .5 and die "ZOMFG a bug!"; say "no bug"

[13:21] <camelia> rakudo-moar c55c5d: OUTPUT«no bug␤»

[13:21] <viki> m: rand > .5 and die "ZOMFG a bug!"; say "no bug"

[13:21] <camelia> rakudo-moar c55c5d: OUTPUT«no bug␤»

[13:21] <viki> m: rand > .5 and die "ZOMFG a bug!"; say "no bug"

[13:21] <camelia> rakudo-moar c55c5d: OUTPUT«no bug␤»

[13:21] <viki> m: rand > .5 and die "ZOMFG a bug!"; say "no bug"

[13:21] <camelia> rakudo-moar c55c5d: OUTPUT«ZOMFG a bug!␤  in block <unit> at <tmp> line 1␤␤»

[13:21] <[Coke]> we should be able to freak out whenever we have a failing test.

[13:21] <moritz> well, they are a now know wolf that can mask a new wolf

[13:21] *** skids joined
[13:21] <masak> to me it's clear we should do something about it, instead of keeping the tests in the spectest suite, where they constantly poison the build result

[13:22] <viki> ^ there. Your claim is just because it happened once out of 4 times, then there's no bug.

[13:23] <viki> And that we should disable the test until some future time where someone will remember about that test and fix it then.

[13:23] <viki> And it's a failure in Rakudo's test suite, not the spectest.

[13:23] <[Coke]> he's not saying there's no bug.

[13:23] <awwaiid> one idea is to make these tests visible -- rather than flat out disabled, make it so they are warnings or something; a class of failure that can be monitored but with already-known next-steps

[13:24] <viki> and one idea is to fix the failure that was introduced 2 days ago instead of letting it bit rot and be forgotten.

[13:24] <awwaiid> go for it?

[13:24] <[Coke]> viki: Obviously that is the best choice.

[13:24] <awwaiid> at my work we have this problem, and I ruthlessly disable the test and put in a ticket for the affected team to do in their next iteration

[13:25] <awwaiid> and they do

[13:25] <[Coke]> awwaiid++

[13:25] <viki> We don't have affected teams here.

[13:26] <viki> .oO( why am I even having this stupid conversation... )

[13:26] <awwaiid> we do have a backlog of tickets though -- of known issues that we can prioritize

[13:26] <awwaiid> heh

[13:27] <masak> viki: why are you so against finding a short-term solution to a flapping test suite?

[13:30] *** viki left
[13:31] * masak .oO( we don't have affected teams -- but clearly we have affected discussions ) :(

[13:34] *** geekosaur left
[13:34] <awwaiid> probably concern, legit, about it turning into a long-term non-solution

[13:34] <awwaiid> because the flip side of removing the shards of glass from a broken window is out-of-sight,out-of-mind

[13:34] *** geekosaur joined
[13:34] <masak> oh, agreed

[13:35] *** xinming joined
[13:36] <masak> maybe one way to phrase it then is this: flapping tests, under the policy of "let them stay in the suite", always demand immediate attention, on pain of losing faith in the test results

[13:36] *** geekosaur left
[13:36] <masak> under the policy of "temporarily remove them", they risk becoming an unaddressed concern because the pain went away

[13:37] *** geekosaur joined
[13:37] <masak> I guess what I'm saying is that I prefer the risk of languishing flappers to the risk of lost faith in tests

[13:38] *** bjz joined
[13:38] <masak> (and that *is* a matter of taste, I guess)

[13:38] <avar> flapping--

[13:38] *** Rawriful joined
[13:42] <dalek> mu: 3e86719 | (Zoffix Znet)++ | misc/perl6advent-2016/schedule:

[13:42] <dalek> mu: Un-book spot

[13:42] <dalek> mu: review: https://github.com/perl6/mu/commit/3e8671975e

[13:44] *** grondilu joined
[13:44] *** xinming left
[13:45] *** xinming joined
[13:50] <awwaiid> ya masak. And I have the same taste as you :)

[13:58] *** aborazmeh left
[14:01] <gfldex> .tell seatek have you considered to include the following module into the tutorial? https://github.com/jnthn/grammar-debugger

[14:01] <yoleaux> gfldex: I'll pass your message to seatek.

[14:03] <gfldex> lizmat: you may want to weeklify the newest doc addition under https://docs.perl6.org/language/grammar_tutorial (for all those who wanted to ask about grammars but where to afraid to do so)

[14:11] *** dj_goku joined
[14:11] *** buggable joined
[14:11] *** huggable joined
[14:11] *** NeuralAnomaly joined
[14:13] *** viki joined
[14:14] *** geekosaur left
[14:15] *** geekosaur joined
[14:18] *** geekosaur left
[14:18] *** geekosaur joined
[14:19] *** kurahaupo__ joined
[14:19] *** bjz left
[14:34] *** geekosaur left
[14:34] *** geekosaur joined
[14:37] *** geekosaur left
[14:39] *** geekosaur joined
[14:39] *** canopus left
[14:40] *** geekosaur left
[14:41] *** geekosaur joined
[14:45] *** canopus joined
[14:47] *** geekosaur left
[14:48] *** geekosaur joined
[14:48] *** geekosaur left
[14:49] *** acrussell joined
[14:51] *** geekosaur joined
[14:57] *** skids left
[15:02] *** geekosaur left
[15:03] *** geekosaur joined
[15:04] *** geekosaur left
[15:04] *** geekosaur joined
[15:11] *** geekosaur left
[15:12] *** geekosaur joined
[15:12] *** geekosaur left
[15:13] *** geekosaur joined
[15:17] *** wisti joined
[15:20] *** geekosaur left
[15:21] *** geekosaur joined
[15:24] *** geekosaur left
[15:25] *** geekosaur joined
[15:29] *** lostinfog joined
[15:29] *** harmil_wk joined
[15:32] *** AlexDaniel joined
[15:38] *** skids joined
[15:38] *** Actualeyes left
[15:41] *** wamba left
[15:47] *** jonas1 left
[15:49] *** geekosaur left
[15:50] *** geekosaur joined
[15:54] *** nicq20 joined
[15:54] *** neuraload left
[15:55] *** leont left
[15:55] *** captain-adequate left
[15:58] *** zacts left
[15:59] *** zacts joined
[16:01] *** pierre__ left
[16:11] *** leont joined
[16:13] *** araujo_ joined
[16:14] *** araujo left
[16:24] <TimToady> did europe fall off the network?

[16:25] * jnthn is European and still here :)

[16:25] <TimToady> whew!

[16:25] <gfldex> we are just busy being awesome :->

[16:26] <TimToady> anything is awesome compared to the elections here... :/

[16:26] <moritz> Europe looks fine from here

[16:26] <moritz> (except to the north west, where a storm is brewing)

[16:26] <moritz> (except to the south, where unemployment is rampant)

[16:27] <moritz> (except in the middle, where xenophobia is rampant)

[16:27] <moritz> and so on

[16:27] <TimToady> :)

[16:28] *** araujo_ left
[16:28] <TimToady> well, our Fascist Objectivist Xenophobe tv network is starting to look middle of the road :/

[16:30] <gfldex> neoliberal bullshit was bound to backfire eventually. And now you are living in interesting times.

[16:32] * TimToady is a flaming moderate, so gets shot at by both sides :)

[16:32] *** geekosaur left
[16:33] * harmil_wk is a smoldering moderate, so gets to duck behind TimToady

[16:34] * ugexe write-ins 2 Chainz

[16:34] *** geekosaur joined
[16:35] <gfldex> This youtube channel may become useful very soon. :-> https://www.youtube.com/channel/UCAL3JXZSzSm8AlZyD3nQdBA

[16:36] *** geekosaur left
[16:36] *** geekosaur joined
[16:39] *** geekosaur left
[16:40] *** djbkd left
[16:41] *** domidumont left
[16:43] *** geekosaur joined
[16:43] *** skink joined
[16:49] *** lichtkind joined
[16:49] *** nicq20 left
[16:51] <dalek> doc: 336a3c0 | (Jan-Olof Hendig)++ | doc/Type/Setty.pod6:

[16:51] <synopsebot6> Link: http://doc.perl6.org/type/Setty

[16:51] <dalek> doc: Added docs for Setty.Mix

[16:51] <dalek> doc: review: https://github.com/perl6/doc/commit/336a3c07a0

[16:53] <viki> dogbert17: MixHash was also added yesterday.

[16:54] <dogbert17> viki: aha, mayve I should add something for that as well :-)

[16:54] <yoleaux> 12 Oct 2016 14:10Z <p3rln00b> dogbert17: would you list yourself in https://github.com/rakudo/rakudo/blob/nom/CREDITS ? Right now you're comming up twice when announcement is generated; as dogbert and as full name

[16:57] *** domidumont joined
[17:00] *** wamba joined
[17:01] *** maybekoo2 joined
[17:01] <viki> dogbert17: oh, actually it was added yesterday to Setty specifically to give correcter results, but it exists on all objects that are Any.

[17:01] <viki> m: <a b c d>.MixHash.say

[17:01] <camelia> rakudo-moar 129318: OUTPUT«MixHash.new(a, c, b, d)␤»

[17:02] <viki> m: set(42).MixHash.say

[17:02] <camelia> rakudo-moar 129318: OUTPUT«MixHash.new(42)␤»

[17:02] <viki> m: dd set(42).MixHash

[17:02] <camelia> rakudo-moar 129318: OUTPUT«(42=>1).MixHash␤»

[17:02] <viki> star: dd set(42).MixHash

[17:02] <camelia> star-m 2016.04: OUTPUT«(42=>True).MixHash␤»

[17:02] <dogbert17> does that mean that I should have added the docs somewhere else?

[17:03] <viki> dogbert17: no, I think Setty for .Mix/.MixHash

[17:03] <viki> I was more observing that docs don't mention that stuff in Any... should they? I dunno :)

[17:03] <dogbert17> cool, will add MixHash soon

[17:03] <dogbert17> .seen p3rln00b

[17:04] <yoleaux> I saw p3rln00b 16 Oct 2016 18:08Z in #perl6: <p3rln00b> Yup

[17:04] <viki> p3rln00b killed himself.

[17:04] <viki> Exists no more :)

[17:04] <dogbert17> oh no

[17:04] <dogbert17> :-)

[17:06] <[Coke]> << A segfault is just C saying "I shouldn'ta said that." >>

[17:06] *** araujo joined
[17:06] *** araujo left
[17:06] *** araujo joined
[17:07] *** araujo left
[17:07] <dalek> doc: 87f35e1 | (Jan-Olof Hendig)++ | doc/Type/Setty.pod6:

[17:07] <synopsebot6> Link: http://doc.perl6.org/type/Setty

[17:07] <dalek> doc: Added docs for Setty.MixHash. viki++

[17:07] <dalek> doc: review: https://github.com/perl6/doc/commit/87f35e18d5

[17:09] *** rindolf left
[17:14] *** rindolf joined
[17:16] <timotimo> does anybody find these links from synopsebot helpful?

[17:17] <skink> Anyone tried NativeCall + Rust?

[17:18] <viki> timotimo: I haven't even noticed it until you mentioned it :)

[17:18] <viki> type/Setty

[17:18] <viki> type/Setty.pod6

[17:18] * viki shrugs

[17:23] *** iH2O joined
[17:23] <harmil_wk> timotimo: yes, I find them useful from time to time.

[17:24] <dalek> doc: 0e4758a | (Jan-Olof Hendig)++ | doc/Type/Setty.pod6:

[17:24] <dalek> doc: Fix typo

[17:24] <dalek> doc: review: https://github.com/perl6/doc/commit/0e4758accf

[17:24] <synopsebot6> Link: http://doc.perl6.org/type/Setty

[17:25] <viki> skink: nope. Give it a try. From what I understand you add #[no_mangle] attribute to fns and specify crate-type = ["dylib"] in the cargo [lib] config section

[17:26] <viki> And my guess is the result would be callable with NativeCall

[17:26] *** Su-Shee joined
[17:27] <Su-Shee> evening everyone

[17:27] <viki> Su-Shee!

[17:27] <[Coke]> o/

[17:27] <viki> The political scientist :)

[17:29] <viki> skink: well, I found this, but that section is not in Latest and Greatest "The Book", so I dunno if the method still works: https://doc.rust-lang.org/1.2.0/book/rust-inside-other-languages.html#a-rust-library

[17:37] *** espadrine joined
[17:38] *** chris2 left
[17:38] <skink> viki, Yup, I've done just that and got trivial stuff working

[17:39] <skink> I was asking because I'm having a lot of trouble passing pointers in between

[17:40] <harmil_wk> If anyone has time to critique this method of generating shortest-prefixes for a set of input words, I'm all ears: https://gist.github.com/ajs/094bed75488a8450747f0e53cd50c1dd

[17:44] *** gregf_ left
[17:49] *** chris2 joined
[17:50] <iH2O> i think ill have a sushi and a coke

[17:54] <lizmat> gfldex: will do

[17:54] <[Coke]> iH2O: you rang

[17:54] <[Coke]> ?

[17:55] <dalek> perl6-most-wanted: 248bc25 | (Slobodan Mišković)++ | most-wanted/bindings.md:

[17:55] <dalek> perl6-most-wanted: Fix googlecode link that turned 404

[17:55] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/248bc25757

[17:55] *** khw joined
[18:04] *** hankache joined
[18:05] <dogbert17> viki: am I right in believing that https://docs.perl6.org/type/Baggy#method_new-from-pairs could be lifted, more or less verbatim, to Setty

[18:09] <viki> why does Setty even have that method :/

[18:12] <viki> m: dd Set.new-from-pairs: "a", "b", "c" => 0, "d" => 42

[18:12] <camelia> rakudo-moar 129318: OUTPUT«set("a","b","d")␤»

[18:13] <viki> dogbert17: yeah, functions the same.

[18:13] <dogbert17> I'll steal it then :)

[18:14] <TimToady> well, you have to coerce the value to Bool

[18:14] <viki> TimToady: hm?

[18:14] <TimToady> you can't just poke Baggy's method in as Setty's

[18:15] <viki> It's done automatically by the method.

[18:15] <TimToady> okay

[18:15] <lizmat> indeed, because Setty's internals are different from Baggy/Mixy internals

[18:15] <TimToady> oh, I missed the "docs" bit :)

[18:16] * TimToady looks around for too much more coffee...

[18:21] <hankache> hello *

[18:21] <hankache> lizmat: if you have a couple of minutes can you take a quick look at https://github.com/hankache/perl6intro/issues/103 and tell me what you think? Thanks :)

[18:21] * lizmat looks

[18:21] <hankache> lizmat many thanks

[18:23] <lizmat> looks good to me, sorry I missed the question addressed to me

[18:25] <dogbert17> hmm, where's dalek?

[18:25] *** espadrine left
[18:25] <lizmat> looks like its logged in?

[18:27] *** khw left
[18:27] *** canopus_ joined
[18:27] <hankache> no too complex for new users ?

[18:27] <dalek> doc: a1bd28f | (Jan-Olof Hendig)++ | doc/Type/Setty.pod6:

[18:27] <synopsebot6> Link: http://doc.perl6.org/type/Setty

[18:27] <dalek> doc: Added docs for Setty.new-from-pairs. viki++

[18:27] <dalek> doc: review: https://github.com/perl6/doc/commit/a1bd28ff9f

[18:27] <geekosaur> looks here to me

[18:28] <dogbert17> yay, a bit slow though

[18:28] <lizmat> hankache: closures are a complex subject

[18:28] *** canopus left
[18:28] <lizmat> hankache: I think the explanation is really down to earth, and clear

[18:31] <hankache> lizmat thank you dear, i'll include it then.

[18:31] *** mniip joined
[18:31] <lizmat> cool, I'll fire up the nl translation engine  :-)

[18:31] <hankache> hehe lizmat++

[18:31] *** Sound left
[18:33] *** iH2O left
[18:38] *** khw joined
[18:39] <skink> viki, If you were curious at all

[18:39] <skink> https://gist.github.com/skinkade/0a1a83adfbf26ac84527cc47b2224ed2

[18:41] <skink> Trying to fill the buffer segfaults

[18:41] <skink> but otherwise it works :)

[18:42] *** cdg left
[18:43] *** nicq20 joined
[18:43] <nicq20> Hello \o

[18:45] <viki> Cool.

[18:46] * viki knows neither NativeCall nor Rust

[18:46] *** cpage_ left
[18:46] <viki> But I have 900 hours logged playing Warframe

[18:46] <viki> Priorities /o\

[18:46] <mst> warframe is ... oh, yeah, sounded good, but I was expecting giant mechs

[18:47] <viki> Space ninjas :)

[18:51] *** zakharyas left
[18:53] <viki> skink: have you tried declaring buffer as `is rw`?

[18:53] <viki> sub chacha_fill(CCRNG, Buf[uint8] is rw) is native(DEMO) { * }

[18:55] <skink> nope, still sigsegv

[18:55] <viki> skink: and the other thing to try is to use CArray[int8] instead of Buf

[18:55] <viki> I mean CArray[uint8]

[18:55] <ugexe> or Blob

[18:56] <ugexe> i think

[18:59] <skink> hm, no luck

[18:59] <viki> :(

[19:01] <timotimo> yeah, you probably need to use CArray when you're working with nativecall

[19:03] *** sufrostico left
[19:07] <viki> skink: seems to segfaul when saying $buf after the filling (so filling succeeds, but trying to access those values fails)

[19:07] <skink> timotimo, Not necessarily. https://github.com/skinkade/crypt-random/blob/master/lib/Crypt/Random/Win.pm6#L15

[19:08] <skink> viki, Yeah I know that saying $buf when it was a CArray succeeded, but failed when I tried to say an actual element of it

[19:08] <dalek> Inline-Perl5: f1310c1 | niner++ | lib/Inline/Perl5.pm6:

[19:08] <dalek> Inline-Perl5: Real fix for argument handling

[19:08] <dalek> Inline-Perl5: 

[19:08] <dalek> Inline-Perl5: Turns out, argv has to be NULL terminated. So let's just do that then.

[19:08] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/f1310c192e

[19:10] <viki> skink: this "succeeds" for me... (gives zeros for all elemes though). Kinda weird that if I uncomment the `say` on line 14 it starts segfaulting again :/ https://gist.github.com/zoffixznet/56c201550e4c82e398dcdc7ba6157ef1

[19:10] <viki> Maybe Rust's ownership is the issue? You're taking a mutable reference while a read reference is open in the outer scope.

[19:11] *** cpage_ joined
[19:11] <viki> If we consider the Perl 6 program "outer scope" and Perl 6's `say` as taking ownership :)

[19:13] <skink> oh, I see what you're saying with the say thing

[19:14] <skink> ... pun not intended

[19:15] *** cpage_ left
[19:15] <skink> Problem is the buffer needs to be pre-allocated which makes it tricky

[19:16] <skink> Maybe... have the lib return a pointer to an already-filled array?

[19:17] <ugexe> m: my $buf = Buf.allocate(4); say $buf; # fyi, instead of $buf[4] = 7 or whatever

[19:17] <camelia> rakudo-moar 129318: OUTPUT«Buf:0x<00 00 00 00>␤»

[19:18] *** khw left
[19:19] <skink> Yeah, that works now :)

[19:19] <viki> \o/

[19:21] *** FROGGS joined
[19:21] *** cpage_ joined
[19:24] *** hankache left
[19:24] <skink> No I meant ugexe's fyi

[19:25] <skink> code is still sigsegv :D

[19:25] <viki> Oh, I got mine to work.

[19:25] <viki> skink: https://gist.github.com/zoffixznet/6615373ae5b5e78c8798f52c5a52ede6

[19:25] <viki> Gives me (148 245 30 211 4 140 36 217)

[19:25] <viki> But if I change it to just say $buf then it does segfault :}

[19:26] <skink> ... what.

[19:26] <pmurias> viki: why do you use multiple different nick names?

[19:27] <skink> Why can you access the elements but not the object itself?? :D

[19:27] <viki> No idea :)

[19:27] <viki> pmurias: why do people use a single same nick name? :)

[19:27] <skink> Is that a Rust issue or a p6 issue?

[19:28] <viki> No idea. It's the first time in my life do I see Rust code used via NativeCall :)

[19:29] <FROGGS> It cant be a Rust issue, can it?

[19:29] <FROGGS> I mean, there is no Rust calling convention... it boils down to plain C in the end

[19:30] <viki> Yeah, basically we told Rust to compile the Rust lib to c calling convention... and that's why we can use it with NativeCall

[19:31] <viki> And it compiled to libembed.so

[19:31] <skink> a nativecall sub can't return a Buf?

[19:32] <pmurias> viki: I use a single nick name so I can be identified as a one person

[19:32] <mst> are we sure zoffix is really a person?

[19:32] <mst> I'm thinking UFAI

[19:32] <FROGGS> skink: no, a Buf is a thing with a certain element count... and there is no such thing in C, so a C lib cant return that

[19:33] <skink> yeah it has to be a CArray

[19:33] <skink> Well, I've made progress. Trying to do Vec<u8> -> CArray[uint8] causes a sigill instead of sigsegv :)

[19:34] <viki> pmurias: sure, but what's the reason behind it? What use is identification to some particular entitity when all I'm doing is answering technical questions in a chat? :)

[19:34] <FROGGS> some day we will be able to cat a pointer to a sized buf... nativecall(buf8[32], functionThatReturnsPtr())

[19:34] <FROGGS> (no idea what the syntax would be for the buf8[32] part)

[19:35] <ugexe> i dunno if its fixed now, but using `--> XXX)` sometimes caused errors when `) returns XXX` worked fine

[19:35] <skink> viki, 'cause I came in here looking for you last week and couldn't find you? :)

[19:35] <viki> heh

[19:36] *** RabidGravy joined
[19:37] <mst> I usually go 'oi, Zoffix!' and wait for him to decloak

[19:37] <mst> seems to basically work

[19:37] <viki> Yes, and if I'm not online, I scan the logs for Zoffix too :)

[19:37] <viki> (later when I do come online)

[19:37] <skink> OH

[19:37] <skink> I GOT IT WORKING

[19:37] <viki> \o/ how?

[19:38] <skink> By returning *mut Vec<u8> I can get a nativecall sub to return CArray[uint8]

[19:39] <viki> Ah. Cool :)

[19:39] <skink> For some reason though, the last two bytes are always null

[19:41] <ugexe> seems like the type of thing that would allow $buf[0..$max] to work but not $buf[0..*]

[19:41] <skink> ... and the first element is always -48

[19:41] <skink> not quite working :)

[19:42] *** Su-Shee_ joined
[19:42] *** Su-Shee left
[19:42] *** Su-Shee_ is now known as Su-Shee

[19:43] *** girafe joined
[19:45] <skink> viki, https://gist.github.com/skinkade/c10f08d4b1b61f1453775a035681602d

[19:45] <skink> output from the above way

[19:46] <skink> not especially random :)

[19:47] *** labster joined
[19:47] *** bjz joined
[19:48] <ugexe> m: my $buf = Buf.allocate(5); subbuf-rw($buf,0,2) = Buf.new(1,2); say $buf; # subbuf-rw?

[19:48] <viki> https://xkcd.com/221/

[19:48] <viki> :)

[19:48] <camelia> rakudo-moar 129318: OUTPUT«Buf:0x<01 02 00 00 00>␤»

[19:49] <skink> I know what that is before even clicking it

[19:49] <viki> hehe

[19:49] <skink> viki, I mean, while the object access crashing things is indicative of a pretty severe problem, we can get around it with Buf.new($carray[..])

[19:49] <skink> since we don't wanna work with CArrays much anyway

[19:51] <skink> Also this is just a proof of concept anyway :)

[19:53] *** khw joined
[19:53] <skink> viki, I think you're right. By passing the buf/carray into the Rust function, Rust tries to take ownership of the array itself. But, it gives us ownership of the contents

[19:57] *** FROGGS left
[20:01] <raiph> Fyi y'all: It seems Dr. Stenvenson is in his first year of a funded 3 year program in which he'll research and write about Perl and the web -- http://www.nwo.nl/en/research-and-results/research-projects/i/49/13649.html

[20:01] <raiph> er, Dr. M. P. Stevenson

[20:03] * skink bookmarks

[20:07] <raiph> First fruit? https://opensource.com/life/16/11/perl-and-birth-dynamic-web -- "the first article in Opensource.com's Open Community Archive, a new community-curated collection of stories about the history of open source technologies, projects, and people. Send your story ideas to [email@hidden.address]
[20:08] *** cdg joined
[20:16] *** lostinfog left
[20:19] <samcv> hmm

[20:19] <samcv> m: printf "%s °C is %sF\n", 10, $_ * (9/5) + 32;

[20:19] <camelia> rakudo-moar 576f3a: OUTPUT«Use of uninitialized value of type Any in numeric context␤  in block <unit> at <tmp> line 1␤10 °C is 32F␤»

[20:19] <samcv> this errors but it's doing multiplication on *something*

[20:19] <samcv> because it shows the correct output

[20:20] <samcv> doing $_.WHAT just says it's 'Any' and i cant use .Int method either. so not sure whats going on

[20:20] <Xliff> viki: That one is good, but this is better -- https://xkcd.com/224/

[20:21] <samcv> stumbled on it when doing this: "{$*IN.get} °C is { $_ * (9/5) + 32}F".say;

[20:21] <samcv> shows the same error, but also prints out fine to even though it warns, and $_ doesn't appear to be anything. so not sure where it's performing the operation on?

[20:22] <samcv> not sure if this is a bug that it works at all or a bug that it doesn't set $_, thoughts?

[20:22] *** domidumont left
[20:22] <timotimo> what were you expecting $_ to be set to there?

[20:22] <timotimo> there's no code that'd set $_ for you

[20:22] <samcv> well. i agree

[20:22] <samcv> but what is it performing the multiplication on

[20:23] <timotimo> m: say +Any

[20:23] <camelia> rakudo-moar 576f3a: OUTPUT«Use of uninitialized value of type Any in numeric context␤  in block <unit> at <tmp> line 1␤0␤»

[20:23] <samcv> since it does end up multiplying

[20:23] <[Coke]> (multiple nicks) I did that a lot in my 20s. :P

[20:23] <timotimo> ^- it gives you 0

[20:23] <timotimo> and additionally outputs a warning

[20:23] <samcv> ah

[20:23] * samcv facepalms

[20:23] <samcv> thanks timotimo 

[20:24] <timotimo> :)

[20:24] <samcv> regarding this though timotimo "{$*IN.get} °C is { $_ * (9/5) + 32}F".say; what is the order of execution of curly braced lines in it?

[20:25] <samcv> is there a way to do what i want? or is $_ just never set when you do this

[20:25] <[Coke]> samcv: there's nothing in there that would run code in a phase other than the main one, so it should all go in order.

[20:26] *** skink left
[20:26] <samcv> so $_ should be set? or does the text in between the braces interfere?

[20:27] <samcv> i would think it'd do left brace then left etc, as if they were statements above and below each other

[20:27] <samcv> but i could be wrong since i really don't know how it works internally

[20:27] <geekosaur> it's not the correct outpit

[20:27] <geekosaur> 32F is 0C, not 10C

[20:27] <geekosaur> $_ is Any and leading to the warning (and then treated as 0)

[20:28] *** nicq20 left
[20:28] <geekosaur> $*IN.get doesn't set $_, it just gets substituted

[20:28] <geekosaur> perl 5 did that kind of auto-setting, perl 6 doesn't in general

[20:28] <samcv> ah ok thank you

[20:31] <samcv> sweet so $_ = $*IN.get works great. thank you geekosaur 

[20:32] <viki> [Coke], does that mean I can claim that I'm still in my twenties? :)

[20:34] <moritz> viki: no matter how old you are, there's always a base in which you're still in your twenties

[20:34] *** iH2O joined
[20:34] <moritz> (well, if you're at least 4 years old, that is)

[20:36] <viki> :)

[20:36] *** seatek joined
[20:36] <gfldex> m: given $*IN.getc { say .ord }

[20:36] <camelia> rakudo-moar 576f3a: OUTPUT«67␤»

[20:36] *** zakharyas joined
[20:36] <viki> m: say 4.base: 3

[20:36] <camelia> rakudo-moar 576f3a: OUTPUT«11␤»

[20:36] <gfldex> samcv: we do got an idiom for that ^^^

[20:37] <geekosaur> the idiom doesn't work in that specific context though

[20:38] *** iH2O left
[20:41] <timotimo> samcv: unless you assign to $_, it'll never work like you want it to in that code

[20:41] <samcv> yeah i assigned to $_ and it worked as expected.

[20:41] <timotimo> but why don't you just "{$*IN.get() * (9/5) + 32}"?

[20:42] <geekosaur> printing it as well as reading it

[20:42] <timotimo> oh

[20:42] <timotimo> of course, sorry

[20:42] <geekosaur> "{$*IN.get} °C is { $_ * (9/5) + 32}F"

[20:42] <samcv> yeah i need to print it twice

[20:42] <geekosaur> quoting from above

[20:42] <samcv> i'm doing this now "{$_ = prompt('Input the value in Celsius: ')}°C is {$_*(9/5)+32} F".say

[20:42] <timotimo> yes, that'd work

[20:45] <[Coke]> viki;you've already claimed you were in your teens, earlier!

[20:48] * RabidGravy is setting up a jenkins job to test all my modules every time rakudo changes :)

[20:51] <lizmat> RabidGravy++  :-)

[20:51] <lizmat> we need more ecosystem coverage  :-)

[20:56] *** bjz left
[20:56] <RabidGravy> it also stops me from having a panic weekend when I get round to doing it manually

[20:56] <pmurias> RabidGravy++ 

[20:56] *** khw left
[20:57] *** Tonik joined
[21:01] *** geekosaur left
[21:03] *** geekosaur joined
[21:04] *** leont left
[21:07] *** skids left
[21:09] *** kurahaupo__ is now known as kurahaupo

[21:09] *** khw joined
[21:10] *** setty1__ joined
[21:12] *** setty1__ left
[21:13] *** setty1_ joined
[21:13] *** maybekoo2 left
[21:14] *** ufobat left
[21:15] *** wisti left
[21:16] *** Tonik left
[21:21] *** setty1_ left
[21:21] *** setty1_ joined
[21:22] *** zakharyas left
[21:25] <Xliff> jenkins?

[21:27] <timotimo> a continuous integration tool

[21:29] *** pmurias left
[21:31] *** andrzejku_ joined
[21:32] *** andrzejku_ is now known as buharin

[21:37] *** setty1_ left
[21:37] *** setty1_ joined
[21:40] <RabidGravy> hulking great java app, works nicely, though I may go for buildbot as I don't need all the bells

[21:41] *** setty1 left
[21:43] *** setty1 joined
[21:45] *** bjz joined
[21:46] *** setty1 left
[21:46] *** setty1_ left
[21:47] *** setty1 joined
[21:49] *** leont joined
[21:50] *** perlawhirl joined
[21:50] *** wisti joined
[21:52] <perlawhirl> hi perlers

[21:52] <perlawhirl> can i make certain class methods only usable via explicit import tag. let me explain

[21:53] <perlawhirl> say i have a module, but haven't ironed out the interface, and i want to mark certain methods as experimental

[21:53] <perlawhirl> but if a user wants to use those methods or feature, they can 'use MyClass :extras' or something

[21:53] <perlawhirl> is that possible?

[21:56] *** labster left
[21:57] *** acrussell left
[21:59] <avuserow> perlawhirl, yes. I haven't played with it enough, but here's a recent blog post about exporting: http://blogs.perl.org/users/tom_browdef/2016/10/avoiding-namespace-pollution-with-modules-in-perl-6.html

[21:59] <RabidGravy> it would be entirely possible

[21:59] *** sufrostico joined
[22:01] *** labster joined
[22:01] <RabidGravy> the export tags get passed to a sub EXPORT { }; you can monkey with the mop in there

[22:02] *** bjz left
[22:02] <RabidGravy> I'll have a little fiddle tomorrow

[22:06] <perlawhirl> RabidGravy: thanks, I have read that blog post. It specifically about exporting subs or constants. but, can class 'methods' be restricted from use the same way

[22:06] <perlawhirl> i guess i could look how Blob.pack/unpack is done

[22:07] <timotimo> perlawhirl: you can do i tthe other way around and mix in roles into your class depending on what export tags have been asked for

[22:07] <timotimo> because removing methods that are "already there" is a bit more tricky than adding some when they are requested

[22:08] <perlawhirl> timotimo: ahh, clever. thanks, will play around with that

[22:08] <perlawhirl> yep

[22:09] <RabidGravy> if you look at Object::Permission that may give you some ideas too

[22:09] <perlawhirl> RabidGravy: thanks

[22:09] <RabidGravy> that wraps methods with a small check

[22:10] <timotimo> the thing about not adding them unless they are requested is that they don't show up in .^methods and such :)

[22:10] <RabidGravy> https://github.com/jonathanstowe/Object-Permission

[22:10] <gfldex> m: my $C = class { method m {}; }; my $C-experimental = class { method m {}; method experimental {} }; sub export(:$experimental){ { 'C' => $experimental ?? $C !! $C-experimental } }

[22:10] <camelia> rakudo-moar 576f3a: ( no output )

[22:11] <gfldex> there is one problem tho. EXPORT wont get the named arguments of use. You have to use a positional.

[22:13] <gfldex> perlawhirl: see the following where I make the export depend on %*ENV https://github.com/gfldex/perl6-concurrent-channelify/blob/master/lib/Concurrent/Channelify.pm6

[22:14] <gfldex> also, introspection may become a problem because you wont have a nice name in .^name

[22:15] <perlawhirl> gfldex: thanks. i think the mixing in a role is better suited for my use case, but this is giving me ideas for other things... thanks.

[22:15] *** RabidGravy left
[22:16] <gfldex> m: my &f = sub { say &?ROUTINE.name }; f

[22:16] <camelia> rakudo-moar 1bb5aa: OUTPUT«␤»

[22:16] <gfldex> i would have guessed to see that say <anon>

[22:17] <timotimo> interesting that it doesn't get set at all

[22:18] <timotimo> m: my &f = anon sub { say &?ROUTINE.name }; f

[22:18] <camelia> rakudo-moar 1bb5aa: OUTPUT«␤»

[22:18] <gfldex> i think it is set to ""

[22:18] <gfldex> as it's not Any or Mu

[22:19] <timotimo> i'd actually except it to be a native string attribute

[22:28] *** Su-Shee_ joined
[22:30] *** Su-Shee left
[22:31] *** Su-Shee_ is now known as Su-Shee

[22:31] *** naty00 joined
[22:33] *** skids joined
[22:33] *** naty00 left
[22:37] *** firstdayonthejob joined
[22:41] *** lichtkind left
[22:42] *** Su-Shee_ joined
[22:44] *** buharin left
[22:44] *** Su-Shee left
[22:44] *** Su-Shee_ is now known as Su-Shee

[22:45] *** andrzejku_ joined
[22:54] *** vendethiel left
[22:59] *** TimToady left
[23:01] *** cyphase left
[23:01] *** TimToady joined
[23:04] *** kurahaupo left
[23:07] *** cyphase joined
[23:09] *** Sound joined
[23:14] *** grondilu left
[23:19] *** Sound left
[23:22] *** andrzejk1 joined
[23:24] *** andrzejku left
[23:25] *** andrzejku_ left
[23:30] *** Su-Shee_ joined
[23:33] *** Su-Shee left
[23:34] *** bpmedley joined
[23:37] *** itaipu left
[23:41] *** wamba left
[23:41] *** firstdayonthejob left
[23:59] *** Actualeyes joined
