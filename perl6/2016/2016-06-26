[00:04] <mscha> m: my @a = 4,5,6; my @b = (1,2,3, |@a); say @b;

[00:04] <camelia> rakudo-moar d4a0e0: OUTPUT«[1 2 3 4 5 6]␤»

[00:04] <mscha> Not very well documented, that is...

[00:13] <parabolize> tbrowder: here is where I think he posted it http://irclog.perlgeek.de/perl6/2016-06-23#i_12720216

[00:23] *** ssotka left
[00:33] <dalek> doc: b36a6b2 | (Tom Browder)++ | doc/Language/traps.pod:

[00:33] <dalek> doc: add info on space probs with function call format

[00:33] <dalek> doc: review: https://github.com/perl6/doc/commit/b36a6b23f4

[00:33] <dalek> doc: 7d6d5c3 | (Tom Browder)++ | doc/Language/traps.pod:

[00:33] <dalek> doc: remove blurb about possible change

[00:33] <dalek> doc: review: https://github.com/perl6/doc/commit/7d6d5c3ba8

[00:33] <dalek> doc: 90efa03 | (Zoffix Znet)++ | doc/Language/traps.pod:

[00:33] <dalek> doc: Merge pull request #637 from tbrowder/func-trap

[00:33] <dalek> doc: 

[00:33] <dalek> doc: add info on space probs with function call format (second attempt)

[00:33] <dalek> doc: review: https://github.com/perl6/doc/commit/90efa03ada

[00:34] *** spider-mario left
[00:38] *** Zoffix joined
[00:41] <lizmat> is http://irclog.perlgeek.de/perl6-dev/today dead only for me, or are there more people not getting it ?

[00:42] <Zoffix> dead here too

[00:45] *** mscha left
[00:47] <jdv79> is that moritz?  mortiz.

[00:47] <Xliff> Dead here, too

[00:47] <jdv79> ditto.  nicht gut.

[00:52] *** ssotka joined
[00:58] *** lambd0x joined
[01:09] *** tbrowder left
[01:12] *** tbrowder joined
[01:17] *** tbrowder left
[01:18] *** kurahaupo_ left
[01:20] *** kalkin- left
[01:20] *** kalkin-_ joined
[01:22] *** daxim left
[01:26] *** daxim joined
[01:31] *** Bodger1 joined
[01:34] *** jjido joined
[01:37] *** RabidGravy left
[01:37] *** Bodger1 left
[01:38] *** Bodger1 joined
[01:39] *** jjido left
[01:39] *** TakinOver left
[01:41] *** Ptolemarch joined
[01:41] *** Ptolemarch left
[01:42] *** Bodger1 is now known as Bodger1234

[01:46] *** ilbot3 left
[01:47] *** ilbot3 joined
[01:47] <Zoffix> Does NQP offer some sort of dd function that I could use to dump data to see what it is? I'm trying to see what $cur_GLOBALish.WHO returns :/

[01:48] *** TakinOver joined
[01:48] <Zoffix> (but in general, the "dump this to see what it is" comes up often for me)

[01:49] *** daxim left
[01:54] *** daxim joined
[01:55] <lizmat> Zoffix: I'd like an answer to that one as well  :-)

[01:55] <Zoffix> :)

[02:00] *** molaf left
[02:07] *** cdg left
[02:12] *** molaf joined
[02:14] *** noganex joined
[02:18] *** noganex_ left
[02:20] *** kaare_ joined
[02:31] *** _mg_ joined
[02:32] *** _mg_ left
[02:42] *** _mg_ joined
[02:43] *** _mg_ left
[02:44] *** _mg_ joined
[02:45] *** _mg_ left
[02:47] *** skids joined
[02:50] *** lambd0x left
[03:02] *** lambd0x joined
[03:15] *** TEttinger joined
[03:22] *** kid51 left
[03:25] <lambd0x> :q

[03:26] *** lambd0x left
[03:28] <lizmat> success!  :-)

[03:28] *** pdcawley left
[03:35] <Zoffix> :)

[03:39] *** huggable left
[03:54] *** _mg_ joined
[03:54] <llfourn> http://irclog.perlgeek.de/ # seems to be down atm

[03:54] <Zoffix> It is. The admin is sleeping ATM.

[03:55] <llfourn> kk

[03:55] *** _mg_ left
[04:02] <sammers> c

[04:02] *** pdcawley joined
[04:14] *** dupek joined
[04:16] *** daxim left
[04:28] *** khw left
[04:37] *** djbkd joined
[04:41] *** djbkd left
[04:43] *** xinming joined
[04:46] *** xinming_ left
[04:53] <ugexe> nine: for back compat this is probably the only real way: https://gist.github.com/ugexe/72b5e491fddb977f75a650039725872a or else inheritance will be non back compat, in which case it might as well be broken completely to save on all the technical debt shims

[04:55] *** Cabanossi left
[04:58] *** Cabanossi joined
[05:07] <Xliff> can custom trait mods be exported?

[05:09] *** bjz left
[05:17] <jdv79> can't think of why not at the moment

[05:25] *** raiph joined
[05:26] <llfourn> sub trait_mod:<is>(...) is export {...} # works

[05:49] *** brrt joined
[05:55] *** grondilu joined
[05:57] *** brrt left
[05:58] *** skids left
[06:05] *** CIAvash joined
[06:09] *** brrt joined
[06:17] *** domidumont joined
[06:21] *** domidumont left
[06:21] *** domidumont joined
[06:22] <psch> m: module Foo { sub trait_mod:<is>($x, :$fooey) is export { $x but role { method foo { "foo" } } } }; import Foo; class A is Int { } # you probably want a multi though

[06:22] <camelia> rakudo-moar a556a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unexpected named parameter 'export' passed␤at <tmp>:1␤»

[06:30] <llfourn> (err yes you want a multi psch++)

[06:35] <llfourn> m: module Foo { multi trait_mod:<is>(Mu $x, :$fooey) is export { $x.^add_role(role { method foo { "foo" } }) } }; import Foo; class A is fooey { }; say A.foo # This works but "but" doesn't

[06:35] <camelia> rakudo-moar a556a8: OUTPUT«foo␤»

[06:37] <llfourn> I guess but doesn't modify the original thing right?

[06:37] <llfourn> m: say Int but Bag

[06:37] <camelia> rakudo-moar a556a8: OUTPUT«Cannot mix in non-composable type Bag into object of type Int␤  in block <unit> at <tmp> line 1␤␤»

[06:38] <llfourn> m: say Int but Baggy

[06:38] <camelia> rakudo-moar a556a8: OUTPUT«(Int+{Baggy})␤»

[06:38] <llfourn> m: my $a = Int; say $a but Baggy; say $a

[06:38] <camelia> rakudo-moar a556a8: OUTPUT«(Int+{Baggy})␤(Int)␤»

[06:38] *** brrt left
[06:38] <llfourn> and I don't think return value from trait_mod:<is> is used

[06:41] <psch> right, you'd have to either make $x sigilless or 'is rw', but then you get composition order problems or something it looks like

[06:41] <psch> m: multi sub trait_mod:<is>(Mu $x is rw, :$fooey) { $x but role { method foo { "foo" } } }; class A is fooey { }; 

[06:41] <camelia> rakudo-moar a556a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤'A' cannot inherit from 'fooey' because it is unknown.␤at <tmp>:1␤»

[06:41] <psch> m: multi sub trait_mod:<is>($x is rw, :$fooey) { $x but role { method foo { "foo" } } }; class A is fooey { }; 

[06:41] <camelia> rakudo-moar a556a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤'A' cannot inherit from 'fooey' because it is unknown.␤at <tmp>:1␤»

[06:41] <psch> m: multi sub trait_mod:<is>(Mu:U $x is rw, :$fooey) { $x but role { method foo { "foo" } } }; class A is fooey { }; 

[06:41] <camelia> rakudo-moar a556a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤'A' cannot inherit from 'fooey' because it is unknown.␤at <tmp>:1␤»

[06:41] <psch> ah, no, just dispatch in &trait_mod:<is>

[06:41] <llfourn> I think you can't "but" things before they are composed?

[06:42] <llfourn> m: class Foo { BEGIN say Foo but Int }

[06:42] <camelia> rakudo-moar a556a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  X::Mixin::NotComposable exception produced no message␤    in code  at <tmp> line 1␤␤»

[06:42] <psch> m: class A { method new { self but role { method m { "foo" } } } };

[06:42] <camelia> rakudo-moar a556a8: ( no output )

[06:42] <psch> i don't think we're done composing during .new..?

[06:42] <llfourn> yeah we are?

[06:42] <psch> alright then :)

[06:43] <llfourn> the type is composed is what I mean

[06:43] <psch> right

[06:43] <llfourn> not any specific object

[06:46] *** wamba joined
[06:47] *** bjz joined
[06:49] <psch> yeah, that makes sense

[06:50] <psch> m: multi sub trait_mod:<is>(Mu \x, :$fooey) { x but role { method foo { "foo" } } }; class A is fooey { };

[06:50] <camelia> rakudo-moar a556a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤'A+{<anon|73771392>}' cannot inherit from 'A' because 'A' isn't composed yet (maybe it is stubbed)␤at <tmp>:1␤»

[06:50] <psch> i like this failure mode :)

[06:51] <psch> it's perfectly sensible too, we're still building the type object for A when A has to be A+{<anon>}

[06:52] <llfourn> yep, rakudo++

[06:54] <psch> i think it's a bit sad that we can only had new trait_mod keywords via a Slang

[06:54] <psch> but well, it does seems somewhat reasonable from a "know what language you're in" perspective

[06:54] <psch> s/somewhat//

[06:55] <psch> that's also part of why the fooey trait above doesn't work i guess

[06:55] <psch> 'cause <is> always looks for a typename

[06:56] *** domidumont left
[06:56] <llfourn> maybe someday

[06:56] *** RabidGravy joined
[06:56] <llfourn> we already have custom type declarators with EXPORTHOW

[06:57] <psch> right, but that is effectively a Slang

[06:57] <psch> 'cause you're messing with %*LANG, if in a user-unfriendly way

[06:57] <llfourn> but so are custom infixes etc? that's just how we change the parser in rakudo.

[06:58] <psch> yeah

[06:58] <psch> that's also why NC had horribly large moarvm bytecode files

[06:58] <psch> because it declares the HAS declarator

[06:58] <psch> which is why it was moved to Perl6::Grammar

[06:59] <llfourn> ah I didn't notice that change.

[06:59] <psch> that's something of a medium-effort-high-reward thing, too

[06:59] <psch> figuring out a way to subclass the language braid without having to clone it completely

[06:59] <psch> well, i'd think it's medium effort, but it might be somewhat high vOv

[07:00] <llfourn> when you write a slang you have to "clone" the language braid?

[07:00] <psch> well, you subclass it

[07:00] <llfourn> so shouldn't that be efficient?

[07:00] <psch> which is clone + add stuff, from a memory perspective

[07:01] <psch> (still highlevel-ish "memory perspective" :P )

[07:01] <llfourn> oh ok. So when you serialize it you serialize the whole thing?

[07:01] <psch> yeah, that's what seemed to have happened with NC at least

[07:01] <llfourn> I see.

[07:02] <psch> i mean, there were something like 50mb precomp files for a module with around 10k loc or so..?

[07:02] <llfourn> o.o

[07:02] <psch> don't recall the exact details, it was maybe two weeks ago

[07:03] *** CIAvash left
[07:04] <psch> ac0dcddb11e4 is the commit in question

[07:04] <psch> that day and the day before in the clog has the discussion

[07:04] <psch> i.e. Jun 14

[07:05] *** brrt joined
[07:09] <dupek> hey which web perl framework best to use?

[07:13] <brrt> dupek: for perl6?

[07:13] <brrt> for perl5, ymmv, i like mojolicious a lot

[07:13] <brrt> for perl6 there are several projects in some stage of development

[07:13] <dupek> brrt, when I look at mojolicious it took third place

[07:13] <brrt> and i couldn't tell you

[07:14] <brrt> ok, well, i guess we like different things :-)

[07:14] <dupek> brrt, not I just think

[07:14] <brrt> what would you prefer above mojolicious?

[07:15] <brrt> just out of curiosity

[07:16] *** jjido joined
[07:18] *** CIAvash joined
[07:27] *** dupek left
[07:32] *** TakinOver left
[07:35] *** ilbot3 left
[07:35] *** ilbot3 joined
[07:40] *** huggable joined
[07:42] *** ssotka left
[07:51] *** firstdayonthejob joined
[07:51] *** lizmat left
[07:52] <Woodi> m: my @a = <a b c>; say @a.perl; dd @a

[07:52] <camelia> rakudo-moar a556a8: OUTPUT«["a", "b", "c"]␤Array @a = ["a", "b", "c"]␤»

[07:54] *** lizmat joined
[07:54] *** jjido left
[07:58] *** jjido joined
[07:59] *** hankache joined
[08:00] *** jjido left
[08:05] *** dupek joined
[08:15] *** rindolf joined
[08:46] <BooK> I'm starting a new project in Perl6, and I plan to write some Perl5 modules if needed (e.g. DBIC modules) if the stuff I want is not available in Perl6 yet

[08:46] *** jmark joined
[08:46] <BooK> so I have two questions:

[08:47] <BooK> 1. is that sane and is Inline::Perl5 up to it?

[08:47] <BooK> 2. how do I name my lib directories? (I was thinking lib and lib5, since it's supposed to be mainly perl6)

[08:49] <moritz> BooK: yes, and sounds sensible

[08:52] <dogbert17> good morning #perl6

[08:54] <dogbert17> moritz: regarding my certificate problems yesterday, turns out my antivirus was to blame

[08:57] <moritz> dogbert17: those things are the devil's doing

[08:58] <dogbert17> indeed, I have now turned off something ESET calls 'SSL/TLS Protocol Filtering'

[08:58] <dogbert17> and docs.perl6.org comes up without any problems

[09:03] <hankache> what's an anti-virus?

[09:04] <hankache> ;)

[09:04] <moritz> hankache: a virus made from anti matter

[09:05] <hankache> hehe

[09:05] *** FROGGS joined
[09:06] <hankache> any recommendations for a vps? What do you know/think of linode?

[09:08] <moritz> linode has a terrible security track record

[09:09] <moritz> I use OVH, and they are OK

[09:09] <moritz> hosteurope also has a good-ish reputation in the low-cost sector

[09:11] <moritz> also digitial ocean

[09:11] <hankache> moritz i'll look at them now

[09:11] <hankache> moritz thanks

[09:11] <moritz> hankache: if you go with digital ocean or linode, there are a few promo codes that get you one month for free

[09:15] *** brrt left
[09:15] <hankache> moritz which OVH vps are you using (SSD/Cloud RAM/Cloud)?

[09:16] <hankache> one of them is RAM supercharged

[09:18] <moritz> hankache: uhm, dunno, I think I have 2GB RM

[09:20] <moritz> VPS 2016 SSD 1

[09:20] <moritz> seems to be the product

[09:21] *** brrt joined
[09:21] <moritz> I use it to host sudokugarden.de, which gets about 45k visitors a month

[09:21] <moritz> (and it mostly idles)

[09:22] <hankache> aha

[09:29] <hankache> moritz i want to play a bit with perl 6 and bailador do you think 1 GB RAM is enough?

[09:29] <hankache> or should I go for 2?

[09:29] *** rindolf left
[09:30] *** brrt left
[09:31] <moritz> hankache: you should go with 2

[09:31] <moritz> simply for compiling rakudo

[09:32] <hankache> moritz indeed

[09:36] <hankache> is one core enough?

[09:39] <hahainternet> you don't run out of cores in the same way as ram :)

[09:41] <hankache> yup

[09:42] <hankache> the question is would rakudo compile on a single core?

[09:42] <hankache> or will it take forever

[09:42] *** espadrine joined
[09:42] *** rindolf joined
[09:47] *** TEttinger left
[09:48] *** vaisian joined
[09:51] <hahainternet> hankache: i compiled rakudo on a dual core 2.8ghz machine with 8gb ram

[09:51] <hahainternet> it didn't take very long at all iirc

[09:51] <psch> i don't think the number of cores really matters

[09:51] <psch> there's very few bits in the rakudo build process that can be paralized

[09:51] <psch> err

[09:51] <psch> parallelized?

[09:52] <hankache> hahaha

[09:52] <hankache> indeed

[09:53] <hahainternet> looks like it was 8 min 30s for me

[09:53] <hahainternet> on this crap old machine

[09:53] <hahainternet> so 1 core on a newer machine would probably be faster

[09:54] *** spider-mario joined
[09:55] *** kaare_ left
[09:55] *** kaare_ joined
[09:56] <hankache> thank you

[09:56] <hahainternet> you're welcome

[09:59] <grondilu> "there's very few bits in the rakudo build process that can be

[09:59] *** AlexDaniel joined
[09:59] <grondilu>               paralized"  I find it surprising

[10:01] <hahainternet> so i've been thinking about perl, perl6 and 'compile time decisions' and it strikes me that a rich, complex object system is also shooting yourself in the foot in some areas

[10:01] <psch> grondilu: why?  we're concatenating all of src/ into three or so files that depend on compilation in a specific order

[10:01] <hahainternet> like how type subsets for the most part have to be decided at runtime

[10:02] <hahainternet> does anyone have any resources on heavily restricted languages where most if not all expressions can be decided at compile time?

[10:02] <psch> C++?

[10:02] *** iH2O joined
[10:02] <hahainternet> C++ is the opposite of a restricted language, the template system is turing complete on its own

[10:02] <grondilu> psch: I was thinking of the many files in src/core and I had hard time imagining that they need to be compiled in sequence.

[10:02] <psch> oh, yeah, i must've overlooked that

[10:02] <hahainternet> psch: i mean something where you could do NonEmptyWhatever where { .something > 0 }

[10:02] <hahainternet> in perl6, that .something call has to be looked up at runtime afaik

[10:03] <hahainternet> and the fact that the halting problem precludes some 'optimisation'

[10:03] <psch> hahainternet: right, because we cannot decide method dispatch at compile time

[10:03] <tadzik> hahainternet: well, it is compile-tiem though :)

[10:03] <hahainternet> well i'm not criticising perl6

[10:03] <hahainternet> or trying to make any claims about it

[10:04] <hahainternet> just looking for an alternative option to read about and understand

[10:04] <hahainternet> i guess f# or haskell or ocaml prly the way as usual

[10:04] <psch> grondilu: well, as mentioned, all of src/core/ is compiled as CORE.setting.  and it *is* necessary, because e.g. Int.pm needs to be compiled after (and in the same scope as) e.g. Any.pm

[10:07] *** jmark left
[10:10] *** firstdayonthejob left
[10:12] *** firstdayonthejob joined
[10:13] <AlexDaniel> think about it positively! If rakudo build is not parallelized, then you can run as many rakudo builds as you have cores!

[10:13] <AlexDaniel> not that it makes any sense :D

[10:13] <AlexDaniel> but e.g. bisectable is building 7 at once

[10:23] *** iH2O left
[10:24] *** ribasushi joined
[10:27] *** Cabanossi left
[10:29] *** Cabanossi joined
[10:32] *** tbrowder joined
[10:32] *** hankache left
[10:39] <tbrowder> 'mornin #perl6. can anyone explain briefly what a p6 dynamic variable is? I know there is a list of them that essentially are language globals, but what about user-defined ones.  Are they the same except that they exist for the life of the program defining them?

[10:40] * psch thinks the doc page is pretty good and brief

[10:41] <psch> https://doc.perl6.org/routine/is%20dynamic

[10:41] <psch> and yes, the * twigil and the 'dynamic' trait do the same, to the best of my knowledge

[10:42] <psch> https://doc.perl6.org/syntax/*#language_documentation_Variables

[10:42] <psch> that's a bit more extensive i suppose

[10:46] *** eugen left
[10:46] <tbrowder> psch: the second ref gives me something to work with--thanks; I found the first with the search but the second doesn't show up in a search and it's new to me.

[10:46] *** eugen joined
[10:46] <psch> tbrowder: well, i found it searching for * and knowing what to look for, so i agree it's a bit hidden

[10:47] <tbrowder> right, I searched on dynamic

[10:47] <psch> (for reference, i clicked the 'Syntax' entry in the drop down)

[10:47] <tbrowder> roger

[10:53] <tbrowder> okay, now that I've looked at the syntax explanation, I don't understand, in a single script, why one would use a dynamic var declared and defined in an inner scope instead of using a file-scoped my var along with other such vars. the specific example is $*DR in htmlify.p6.  Since the first time I saw that I wonder what magic is accomplished.

[10:56] <psch> m: sub f { $*foo.say }; sub g { my $*foo = "bar"; f }; sub h { my $*foo = "baz"; f }; g; h;

[10:56] <camelia> rakudo-moar a556a8: OUTPUT«bar␤baz␤»

[10:56] <psch> i mean, yeah, functionally it's not much different from a file-scoped lexical

[10:56] <psch> but then, functionally, ASM isn't that much different either, if you look close enough

[10:57] <psch> i find, especially in grammar/action code it's clearer to have a dynamic to follow

[10:57] <tbrowder> okay, that's what I thought--thanks!

[10:57] <psch> because you know you can trace upwards through the tokens/methods along your parsetree, and don't have to worry about out-of-band stuff

[10:57] <psch> s/you know/i know/ # :)

[10:58] <tbrowder> oops, "ASM"?

[10:58] <psch> assembler

[10:58] <tbrowder> ah...

[10:58] <psch> i recognize that's not much a valid argument, hence why i followed up with a specific preference :)

[10:58] <psch> +of

[10:59] <tbrowder> great, thanks!

[11:00] <tbrowder> it does look like a personal pref of the original author (or perhaps a last-minute def as he or she realized the var was needed or to emphasize its importance and use in multiple places)

[11:00] <psch> well, there's also the old "global shared state is bad" vOv

[11:01] <tbrowder> I agree for sure, but htmlify.p6 I don't think was originally meant as an exercise in "best practices"...

[11:03] <moritz> it was meant as "get *anything* displayed on the web"

[11:09] <moritz> (another priority was to display methods inherited from superclasses and roles on the same page, because I always hated the parent-class-chasing that you have to do for p5's LibXML modules, for example)

[11:13] <tbrowder> moritz: I wasn't criticizing, in fact you say as much near the top of the prog, but I had to look hard to find some stuff because it looks like you used the power of p6 (esp. chained method calls) to minimize code--hard for a newbie to deal with!

[11:13] <tbrowder> i should say "full power"...

[11:16] <moritz> tbrowder: I didn't take it as criticism

[11:16] <moritz> I know myself how hard it is to change and maintain htmlify

[11:18] * Woodi just discovered his perl6-testing host have 2 cores :) Pentium4++ ;)

[11:19] <Woodi> ...and 2Gb memory newer was limiting factor

[11:20] <Woodi> btw. is AMD solding any DDR4 CPUs ?

[11:23] <dupek> hey, what does it mean no dereferencing is needed?

[11:25] <moritz> m: my $a = [ 1, 2, 3 ]; say $a[0]; # for dupek 

[11:25] <camelia> rakudo-moar a556a8: OUTPUT«1␤»

[11:25] <moritz> no special ->[0] magic as with p5

[11:25] <Xliff> How would I specify unicode chars in a regex?

[11:26] <Xliff> Can I use codes?

[11:26] <Xliff> say "\u00E0"

[11:26] <Xliff> m: say "\u00E0"

[11:26] <camelia> rakudo-moar a556a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unrecognized backslash sequence: '\u'␤at <tmp>:1␤------> 3say "\7⏏5u00E0"␤    expecting any of:␤        argument list␤        double quotes␤        term␤»

[11:27] <psch> m: say "\c[SNOWMAN]" ~~ /\x2603/

[11:27] <camelia> rakudo-moar a556a8: OUTPUT«｢☃｣␤»

[11:27] <psch> m: say "\c[SNOWMAN]" ~~ /\c[SNOWMAN]/

[11:27] <camelia> rakudo-moar a556a8: OUTPUT«｢☃｣␤»

[11:27] <Xliff> psch++

[11:27] <psch> m: say "\c[SNOWMAN]" ~~ /☃/

[11:27] <camelia> rakudo-moar a556a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unrecognized regex metacharacter ☃ (must be quoted to match literally)␤at <tmp>:1␤------> 3say "\c[SNOWMAN]" ~~ /7⏏5☃/␤    expecting any of:␤        term␤»

[11:27] <psch> m: say "\c[SNOWMAN]" ~~ /'☃'/

[11:27] <camelia> rakudo-moar a556a8: OUTPUT«｢☃｣␤»

[11:28] <dogbert17> the code example at https://docs.perl6.org/language/mop#Metamethods  doesn't work, anyone know what's wrong with it?

[11:29] <AlexDaniel> m: say Int.WHY

[11:29] <camelia> rakudo-moar a556a8: OUTPUT«(Any)␤»

[11:31] <AlexDaniel> bisect: class MY-CLASSES-ARE-ALL-CAPS { method WHY { "I DONT KNOW" } }; my $c = MY-CLASSES-ARE-ALL-CAPS.new; say $c.WHY; say $c."WHY"()

[11:31] <bisectable> AlexDaniel: on both starting points the exit code is 0 and the output is identical as well

[11:31] <AlexDaniel> ah forgot something…

[11:31] <psch> m: #| THIS IS A CLASS FOR SHOUTING THINGS␤ class MY-CLASSES-ARE-ALL-CAPS { method WHY { "I DON'T KNOW" } } my $c = MY-CLASSES-ARE-ALL-CAPS.new; say $c.WHY say $c."WHY"() # /o\

[11:31] <camelia> rakudo-moar a556a8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Method '_add_leading' not found for invocant of class 'Str'␤at <tmp>:2␤»

[11:31] <psch> i don't even get why it wants to add to a Str

[11:32] <psch> but then i've never looked at that code

[11:33] <psch> bisect: #| THIS IS A CLASS FOR SHOUTING THINGS␤ class MY-CLASSES-ARE-ALL-CAPS { method WHY { "I DON'T KNOW" } } my $c = MY-CLASSES-ARE-ALL-CAPS.new; say $c.WHY say $c."WHY"() # /o\

[11:33] <bisectable> psch: on both starting points the exit code is 0 and the output is identical as well

[11:33] <moritz> dogbert17: what exactly doesn't work?

[11:33] <geekosaur> at a guess, the part that allows a user provided WHY is NYI, so it's trying to add the #| text to the user provided WHY

[11:33] <dogbert17> moritz: it complains with Method '_add_leading' not found for invocant of class 'Str'␤at

[11:34] <geekosaur> moritz, see camelia output

[11:34] <AlexDaniel> psch: I don't think that ␤ is going to work :/

[11:34] <psch> AlexDaniel: oh, bisectable doesn't do that?

[11:34] <AlexDaniel> yeah :/

[11:34] <psch> :/

[11:34] <AlexDaniel> well, let me fix that…

[11:35] <psch> AlexDaniel++

[11:35] <dogbert17> AlexDaniel++

[11:36] <gfldex> nine: is precomp supposed to be thread safe? (silly question alert)

[11:39] *** bisectable left
[11:39] *** huggable left
[11:40] *** huggable joined
[11:40] *** bisectable joined
[11:40] <AlexDaniel> bisect: #| THIS IS A CLASS FOR SHOUTING THINGS␤ class MY-CLASSES-ARE-ALL-CAPS { method WHY { "I DON'T KNOW" } } my $c = MY-CLASSES-ARE-ALL-CAPS.new; say $c.WHY say $c."WHY"() # /o\

[11:40] <bisectable> AlexDaniel: on both starting points the exit code is 1 and the output is identical as well

[11:40] <AlexDaniel> ␤ works now

[11:44] *** tbrowder left
[11:46] <Xliff> Hrm....

[11:46] <dalek> bisectbot: 183b6d2 | (Aleks-Daniel Jakimenko-Aleksejev)++ | bot.pl:

[11:46] <dalek> bisectbot: Replace ␤ with newlines

[11:46] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/183b6d29c0

[11:46] *** bisectable left
[11:46] *** rindolf left
[11:46] <Xliff> I just refreshed rakudo and this line used to work "nativecast(::('XML::LibXML::Element'), $node);" but now gives me "Internal error: unhandled target type"

[11:46] *** bisectable joined
[11:50] *** kid51 joined
[12:07] <nine> gfldex: module loading in general is probably not yet thread safe

[12:10] <gfldex> nine: i could make you a tarball that segfaults quite nicely on my end if you want to dig your teeth into it

[12:10] <gfldex> loading is fine actually, it only segfaults when the cache is filled

[12:14] *** Harmil joined
[12:15] <Harmil> Morning all... quick question. https://hub.docker.com/r/mj41/perl6-star/ looks like the most current docker image of rakudo. Is that the right one to be using?

[12:16] <llfourn> Harmil: it looks a tad old

[12:17] <Harmil> Is there a more recent star release than 2 months?

[12:17] <AlexDaniel> just a little bit

[12:17] <llfourn> Is it the same as: https://github.com/perl6/docker

[12:17] *** daxim joined
[12:18] <llfourn> this looks liek the official one: https://hub.docker.com/_/rakudo-star/

[12:19] <llfourn> but it looks old too

[12:19] <llfourn> shouldn't it be auto-building on commits to rakudo?

[12:19] <Harmil> Star != rakudo

[12:20] <llfourn> right. sorry.

[12:20] <Harmil> Though, to be fair, I don't actually need star, it's more a matter of wanting a stable reference.

[12:21] <llfourn> but you want a docker image right?

[12:21] <llfourn> i'd say the official one maintained by hoelzro is the best

[12:22] <llfourn> but I guess that one you linked is ok "2016.04" is apparently the latest rakudo star

[12:23] <Harmil> Cool, thanks

[12:23] <stmuk> there will probably be a star 2016.07

[12:23] <stmuk> after next month's rakudo release

[12:24] <psch> star-m: say $*PERL.compiler

[12:24] <camelia> star-m 2016.04: OUTPUT«rakudo (2016.04)␤»

[12:24] <llfourn> m: $*PERL.compiler.say

[12:24] <camelia> rakudo-moar a556a8: OUTPUT«rakudo (2016.06.46.ga.556.a.86)␤»

[12:51] *** bjz left
[12:54] *** AlexDaniel left
[12:56] <lizmat> Xliff: could you check whether a556a869ea9a56dc233 is to blame ?

[13:00] *** bjz joined
[13:03] <Xliff> lizmat: One sec

[13:07] <lizmat> Xliff: it probably is, and I pushed just a fix for it (I think)

[13:08] <lizmat> if it isn't, someone else should probably revert a556a869ea9a56dc233 and e071e40b37d446c9

[13:08] <lizmat> as I'll be afk&

[13:08] *** Harmil left
[13:11] <Xliff> I'm checking 6d824ecc8cd8f4671c4f83728f67099d2c7bba11 right now

[13:13] <timotimo> hey

[13:16] <timotimo> does anybody know if there's a way to not have processes crashing with segfaults show up in dmesg and such?

[13:17] <timotimo> because running afl-fuzz on hack gives me beautiful lines in the dmesg including ones like "show_signal_msg: 381 callbacks suppressed"

[13:19] <Xliff> lizmat: Problem still exists.

[13:21] * Xliff read "dmesg" and thought "syslog"

[13:21] <Xliff> My bad.

[13:22] <timotimo> well, there's also a bajillion segfault messages in the journal

[13:22] <Xliff> lizmat: Recompiling to e071e40b37d446c9

[13:28] <Xliff> lizmat: Problem still exists on latest commit. I will have to git-bisect this and see. I should return to the last known working version and see if the problem really is perl6.

[13:32] *** hankache joined
[13:32] <timotimo> https://unix.stackexchange.com/questions/243828/is-there-a-way-to-temporarily-disable-segfault-messages-in-dmesg  -  i implemented this on hack right now

[13:37] <timotimo> we still have about 2.7 gigabytes of space taken on our / partition that's nothing but logs about segfaults

[13:38] <Xliff> Felgercarb!

[13:38] <Xliff> Looks like the problem is my code and not perl6.

[13:38] <timotimo> the what now?

[13:38] <timotimo> that's a relief

[13:38] <Xliff> Yes and no.

[13:38] <Xliff> Relief for you... nightmare for me.

[13:38] <psch> imagine how you'd feel if it was both /o\

[13:39] <Xliff>  /o\ indeed!

[13:39] <psch> #just-coredev-things

[13:39] <psch> scnr

[13:39] <timotimo> :D

[13:39] <Xliff> Weird thing is this part of the code didn't change.

[13:39] <Xliff> Now I will have to revert my code and see if I can make problem go away.

[13:39] <Xliff> However, first thing is food. Next thing is sleep.

[13:40] <Xliff> o7

[13:40] *** Xliff is now known as Xliff_zzzz

[13:40] <timotimo> have a good two :)

[13:42] *** domidumont joined
[13:48] *** kaare_ left
[13:49] *** skids joined
[13:54] *** TakinOver joined
[13:56] *** brrt joined
[14:02] *** zakharyas joined
[14:05] <llfourn> so I noticed there was some segfault discussion. I'm now getting non-deterministic segfaults after rebuilding an hour or so ago.

[14:05] <llfourn> not sure if it was rebuilding or me adding something to my code though.

[14:06] <gfldex> llfourn: are you running more then 1 thread?

[14:06] <llfourn> nope.

[14:06] <gfldex> my problems go away when just one thread

[14:06] <gfldex> do you got that code online?

[14:07] <llfourn> no :\

[14:07] <llfourn> I guess I could, I'll investigate a bit further first.

[14:07] *** domidumont left
[14:08] <gfldex> <-- code voyeur :->

[14:08] *** TakinOver left
[14:10] *** tharkun_ left
[14:11] *** TakinOver joined
[14:11] *** tharkun joined
[14:14] *** rindolf joined
[14:18] *** domidumont joined
[14:22] *** khw joined
[14:23] *** skids left
[14:26] *** Zoffix left
[14:34] *** TakinOver left
[14:36] *** TakinOver joined
[14:37] <llfourn> gfldex: backtrace: https://gist.github.com/LLFourn/135680d93ef10b76b0213386b49fa20e/01fb6c69c0d7a5d55cf760c2e0f5a45f3073b258

[14:37] <llfourn> trying to build with debug symbols to get more info

[14:38] <llfourn> further discussion in #perl6-dev if you're interested :)

[14:39] *** Zoffix joined
[14:53] <ugexe> m: { class Foo { }; }; class Foo { }; # is this intended? (i realize I can `my class ...` it)

[14:53] <camelia> rakudo-moar e071e4: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol Foo␤at <tmp>:1␤------> 3{ class Foo { }; }; class Foo7⏏5 { }; # is this intended? (i realize I c␤    expecting any of:␤        generic role␤»

[14:56] <dalek> doc: 8616126 | (Jan-Olof Hendig)++ | doc/Language/variables.pod:

[14:56] <dalek> doc: Added a couple of missing semicolons in code example

[14:56] <dalek> doc: review: https://github.com/perl6/doc/commit/8616126990

[14:57] *** jluis joined
[14:58] *** jluis left
[14:58] *** jluis joined
[15:00] *** buharin__ joined
[15:02] *** dupek left
[15:03] <gfldex> ugexe: S12 provides the following wisdom: Without a my or other scoping declarator, a bare class declarator declares an our declarator, that is, a name within the current package.

[15:05] *** domidumont left
[15:05] *** vaisian left
[15:08] *** vaisian joined
[15:08] <ugexe> ah. but what am I missing that `sub Bar { class Foo { }; }; class Foo { };` still fails? or that `sub Bar { our $xxx; }; Bar(); say $xxx` gives a symbol $xxx is undeclared (yes, OUR::<$xxx>, but still)

[15:09] <timotimo> variables aren't looked up in package scope unless you ask for it ... or something like that?

[15:09] <timotimo> i basically never use package-scoped variables, tbh

[15:10] *** jluis left
[15:11] *** kurahaupo joined
[15:11] <ugexe> m: sub Bar { class Foo { }; }; class Foo { }; # sub { } is a scoping declarator isn't it?

[15:11] <camelia> rakudo-moar e071e4: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol Foo␤at <tmp>:1␤------> 3sub Bar { class Foo { }; }; class Foo7⏏5 { }; # sub { } is a scoping declarator ␤    expecting any of:␤        generic role␤»

[15:12] <ugexe> oh it means on the class declaration, not inside one

[15:13] <timotimo> classes aren't "my" by default

[15:15] *** kaare_ joined
[15:15] *** domidumont joined
[15:16] <Zoffix> m: { our $foo = 42 }; our $foo = 32; say $foo

[15:16] <camelia> rakudo-moar e071e4: OUTPUT«32␤»

[15:16] *** spider-mario left
[15:17] <Zoffix> m: { our $foo = 42 }; our $foo; say $foo

[15:17] <camelia> rakudo-moar e071e4: OUTPUT«42␤»

[15:17] <Zoffix> .oO( should probably warn, eh? )

[15:17] <ugexe> right, but `{ my sub Bar { class Foo { }; }; }; class Foo { };` seems a bit strange in that regard

[15:19] <jnthn> It's a weird thing to write, but the error is correct.

[15:19] <jnthn> Needs to be `my class Foo ...` to lexically scope the symbol

[15:20] <jnthn> (Noting also that classes are a compile-time construct, so closure semantics don't come into it.)

[15:22] *** vaisian left
[15:25] <ugexe> m: role Foo { }; class Bar is Foo { }; say Bar.new.^roles # does a role inherited instead of composed get punned first?

[15:25] <camelia> rakudo-moar e071e4: OUTPUT«((Foo))␤»

[15:29] *** lizmat left
[15:30] *** El_Che left
[15:32] <ugexe> looks like it composes the role into a new class which gets inherited, hence the role still showing up

[15:37] *** woolfy left
[15:39] *** huggable left
[15:40] *** huggable joined
[15:43] *** brrt left
[15:50] <buharin__> perl is full of magic ;s

[15:51] *** V_S_C joined
[15:52] <DrForr_> Yep. And sometimes it even works :)

[15:52] *** V_S_C left
[15:53] *** wamba left
[15:54] *** wamba joined
[16:06] *** Zoffix left
[16:08] <nine> ugexe: I'm not sure it's worth worrying about subclasses of Distribution. Can't imagine anyone writing one.

[16:11] <mst> nine: whichprobably means I'll do it one day, but I haven't yet so

[16:16] *** TakinOver left
[16:18] *** TakinOver joined
[16:19] <nine> mst: but when you do it will be the new role Distribution, not the quite useless class we're replacing ;)

[16:24] *** kurahaupo left
[16:26] *** araujo joined
[16:27] *** araujo left
[16:27] *** araujo joined
[16:33] *** vendethiel- left
[16:34] *** tbrowder joined
[16:36] *** tbrowder left
[16:54] *** setty1 joined
[16:57] *** silug left
[16:59] *** Penguiniator joined
[17:09] *** silug joined
[17:15] *** Zoffix joined
[17:16] <Zoffix> m: say GLOBAL::.WHAT; say GLOBAL:: === Stash

[17:16] <camelia> rakudo-moar e071e4: OUTPUT«(Stash)␤False␤»

[17:16] <Zoffix> How come it's False?

[17:16] <Zoffix> Oh, nm

[17:18] <hankache> m: say GLOBAL::.WHAT; say GLOBAL:: ~~ Stash

[17:18] <camelia> rakudo-moar e071e4: OUTPUT«(Stash)␤True␤»

[17:18] *** lambd0x joined
[17:23] <psch> m: say GLOBAL::.WHAT; say GLOBAL::.WHAT === Stash

[17:23] <camelia> rakudo-moar e071e4: OUTPUT«(Stash)␤True␤»

[17:29] *** lambd0x left
[17:31] <kalkin-_> Ǐs there a real life example of some Perl 6 library, which is thoroughly documented via POD?

[17:32] <kalkin-_> I would also see how the different semantic block are used in real life

[17:32] *** kalkin-_ is now known as kalkin-

[17:36] <Zoffix> kalkin-, S26 speculation uses P6 pod: https://raw.githubusercontent.com/perl6/specs/master/S26-documentation.pod

[17:36] <Zoffix> I don't think 100% of that stuff is supported tho

[17:46] *** jjido joined
[17:46] <kalkin-> Zoffix: I know about S26 and i'm reading it, but I want to see it actually used in a software project

[17:47] <jdv79> Zoffix: nice blog on the hijacking

[17:47] <Zoffix> Thanks.

[17:47] <jdv79> i wonder if there will eventually be tools/techniques for eco system trust to mitigate that sort of stuff

[17:50] <kalkin-> lol, I just wondered, why I am i reading S26 in source code? I can just download it and run p6doc on it.

[17:50] <kalkin-> nop it doesn't work :)

[17:54] <Zoffix> kalkin-, based on a naive grep, these files should have some amount of POD in them: https://gist.github.com/zoffixznet/57b5b7ec035107e43373d219bae73fcb

[17:54] <kalkin-> Zoffix thanks!

[17:56] <kalkin-> Hmm now do i use =TITLE or =NAME? App::Mi6 auto generates =head1 NAME i think, but what is the semantic difference between a title and a name? Would title be used if you are writing a book/essay in POD?

[17:57] * kalkin- just saw that Terminal::Print uses title instead of name

[18:07] *** hankache left
[18:07] *** hankache_ joined
[18:14] *** hankache_ left
[18:16] *** pmurias joined
[18:16] *** jjido left
[18:16] *** jmark joined
[18:17] <pmurias> hahainternet: re restricted language, the fact that templates are turning complete doesn't reduce the amount of type stuff that can be determined at compile time

[18:17] <pmurias> hahainternet: in fact it increases it

[18:19] <hahainternet> pmurias: true that's an orthogonal issue, but i hope i made myself clear, i'm still learning anyhow

[18:21] *** jjido joined
[18:26] *** espadrine left
[18:29] *** skids joined
[18:32] *** kerframil joined
[18:39] *** zakharyas left
[18:39] *** pmurias left
[18:40] *** pmurias joined
[18:43] <ugexe> nine: Zef subclasses Distribution

[18:47] <ugexe> But again, i'm all for breaking it instead of adding work arounds in rakudo

[18:47] *** ssotka joined
[18:48] <ugexe> you just cant say that enough code uses Distribution.new to warrant a shim but not enough subclasses it to warrant such

[18:55] *** jjido left
[19:01] *** domidumont left
[19:01] *** CIAvash left
[19:02] *** jjido joined
[19:05] *** zakharyas joined
[19:07] <dalek> doc: 0e6c0cd | (Jan-Olof Hendig)++ | doc/Type/Pair.pod:

[19:07] <dalek> doc: Added docs for Pair.Str

[19:07] <dalek> doc: review: https://github.com/perl6/doc/commit/0e6c0cd8e8

[19:10] *** zakharyas left
[19:11] *** spider-mario joined
[19:12] *** zakharyas joined
[19:25] *** wamba left
[19:26] *** girafe joined
[19:26] *** wamba joined
[19:29] *** Zoffix left
[19:35] <dalek> doc: d9c25c6 | (Jan-Olof Hendig)++ | doc/Type/Map.pod:

[19:35] <dalek> doc: Fixed two typos

[19:35] <dalek> doc: review: https://github.com/perl6/doc/commit/d9c25c6006

[19:35] <dalek> doc: eb698aa | (Jan-Olof Hendig)++ | doc/Type/Pair.pod:

[19:35] <dalek> doc: Added docs for Pair.pairs

[19:35] <dalek> doc: review: https://github.com/perl6/doc/commit/eb698aa359

[19:38] *** freezerburnV joined
[19:39] *** huggable left
[19:39] *** jjido left
[19:42] *** girafe left
[19:43] *** freezerburnV left
[19:43] *** girafe joined
[19:46] *** zacts left
[19:47] *** zacts joined
[19:52] *** jjido joined
[19:56] <dalek> doc: 8ab2db7 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Num.pod:

[19:56] <dalek> doc: tell why NaN values are produced

[19:56] <dalek> doc: review: https://github.com/perl6/doc/commit/8ab2db7722

[19:57] *** freezerburnV joined
[20:02] <dalek> doc: df8a150 | (Jan-Olof Hendig)++ | doc/Type/Pair.pod:

[20:02] <dalek> doc: Revert "Added docs for Pair.pairs". Method was already documented.

[20:02] <dalek> doc: 

[20:02] <dalek> doc: This reverts commit eb698aa3593979838f7b7e9c84f81508b07f5983.

[20:02] <dalek> doc: review: https://github.com/perl6/doc/commit/df8a150b2e

[20:02] <dogbert17> sigh

[20:07] *** lichtkind_ joined
[20:09] *** pmurias left
[20:11] *** lichtkind__ left
[20:16] *** raiph left
[20:17] *** raiph joined
[20:17] *** FROGGS left
[20:18] *** jmark left
[20:20] *** raiph left
[20:21] *** raiph joined
[20:22] *** raiph left
[20:22] *** raiph joined
[20:24] *** raiph left
[20:25] *** raiph joined
[20:26] *** grondilu left
[20:29] *** kaare_ left
[20:32] *** kid511 joined
[20:33] *** kid51 left
[20:34] <zacts> How much does the Perl6 language rely on Rakudo? Like would it be theoretically possible to implement it on another interpreter?

[20:34] <zacts> or at this point does it rely on rakudo specific features?

[20:35] <zacts> (like a hypothetical jvm based Perl6 for example)

[20:35] <zacts> (just curious as to how Perl6 is all put together)

[20:35] <zacts> (NOT that I like JVM)

[20:35] <kalkin-> zacts: afaik you can run perl6 on jvm already

[20:35] <kalkin-> you can use moarvm or jvm

[20:35] <zacts> ah nice! :-)

[20:35] <zacts> oh cool

[20:36] <zacts> that sounds cool

[20:36] *** Gruber is now known as Grrrr

[20:37] *** raiph left
[20:37] *** raiph joined
[20:38] <geekosaur> well, in theory you can. the jvm backend is a bit broken currently. historically there were two non-rakudo implementations, but both are bitrotted now (niecza in c# / clr, pugs in haskell)

[20:38] <geekosaur> there's a javascript backend in development, I gather

[20:38] <kalkin-> I ended up reading jnthn's Audio-Hydrogen. It has some nice examples how to use POD to document just a simple class

[20:38] <kalkin-> This is pretty helpful

[20:41] *** zakharyas left
[20:46] <kalkin-> Also should i use use v6 or use v6.c?

[20:47] <kalkin-> I mean I understand that 6 will also match 6.c and 6.d and so on.. But why do people specify in a—for me normal looking perl6—file 6c?

[20:48] <gfldex> there may be some deprications with v6.d (relative to v6.c)

[20:48] <mst> kalkin-: because that allows 6.d to change things if it needs to without breaking their code.

[20:49] <kalkin-> mst: no i get that, but we don't even know if 6.d will break anything, do we? Are there already plans?

[20:49] *** kid51 joined
[20:49] <zacts> geekosaur: oh nice

[20:49] <mst> kalkin-: I, personally, would use 6.c and then after 6.d comes out, edit the line and re-run my tests

[20:49] <zacts> A Javascript backend sounds nice

[20:49] <kalkin-> or is it just being careful? May be it's the better way to specify 6.c?

[20:50] *** kid511 left
[20:50] <kalkin-> AFAIK if i have a file using 6c but have 6d perl6 implementation, it still will run, but in 6c mode, so most of the authors will have no pressure migrating

[20:51] <kalkin-> or even changing this line

[20:51] <kalkin-> but may be this is ok

[20:52] <gfldex> we do have some changes in v6 that are not part of v6.c (like the .cow lizmat++ added 2 days ago). Technically, rakudo should complain when you use .cow and v6.c together.

[20:53] <gfldex> m: use v6.c; my @a = <a b c>; my @b = @a.cow;

[20:53] <camelia> rakudo-moar e071e4: ( no output )

[20:54] <kalkin-> m: use v6.c; my @a = <a b c>; sau @a.cow.WHY

[20:54] <camelia> rakudo-moar e071e4: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    sau used at line 1. Did you mean 'say'?␤␤»

[20:54] <kalkin-> m: use v6.c; my @a = <a b c>; say @a.cow.WHY

[20:54] <camelia> rakudo-moar e071e4: OUTPUT«(Any)␤»

[20:54] <gfldex> someone would have to implement that but someone isn't here right now :)

[20:55] *** raiph left
[20:55] <kalkin-> Also should i add the #= comments, to my methods so .WHY will returns something meaningful? I read about it in S26, but is this used at all?

[20:56] * kalkin- is really missing best practices documentation on like _everything_ in perl6

[20:56] <gfldex> for now there is no software that is using #= comments. If you would implement an editor in perl 6, you could benefit from it.

[20:57] <gfldex> the problem with best practices is that we don't know what that is yet.

[20:57] <gfldex> i personally would have exactly one entry for that list so far

[20:57] *** lambd0x joined
[20:58] <gfldex> m: sub f(Int:D $i) { say $i }; # most of the time you actually want :D

[20:58] <camelia> rakudo-moar e071e4: ( no output )

[20:58] <gfldex> m: use variables :D; my Int $i;

[20:58] <camelia> rakudo-moar e071e4: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable definition of type Int:D (implicit :D by pragma) requires an initializer␤at <tmp>:1␤------> 3use variables :D; my Int $i7⏏5;␤    expecting any of:␤        constraint␤»

[20:59] <gfldex> what reminds me of ...

[20:59] <kalkin-> Ohh the :D smiley. Is this a good practice to add it every where where i expect some defined value?

[21:00] <kalkin-> In most methods i expect to have some defined value, am I not? So I probably should put it almost everywhere, shouldn't i?

[21:02] <gfldex> if you use it you will get the error message on the sub call. So you don't have to trace it back by hand.

[21:02] <gfldex> also, you provide the compiler with more wood to chew on.

[21:04] <gfldex> m: use variables :D; { use variables :_; my Int $i; }

[21:04] <camelia> rakudo-moar e071e4: ( no output )

[21:05] <kalkin-> gfldex: ok, so it's a good idea to use it.

[21:06] <gfldex> it depends a bit on contect ofc. There can be very good reasons to allow undefined values.

[21:06] <gfldex> also note that float point numbers are special

[21:06] <gfldex> m: say NaN.Bool, NaN.defined;

[21:06] <camelia> rakudo-moar e071e4: OUTPUT«TrueTrue␤»

[21:07] *** buharin__ left
[21:07] <dalek> doc: ae5836b | (Wenzel P. P. Peppmeyer)++ | doc/Language/variables.pod:

[21:07] <dalek> doc: doc use variables :D

[21:07] <dalek> doc: review: https://github.com/perl6/doc/commit/ae5836bf54

[21:16] *** freezerburnV left
[21:17] *** jjido left
[21:18] *** Zoffix joined
[21:21] <Zoffix> zacts, a JVM backend would still be using Rakudo. Rakudo is the compiler, JVM is one of the VMs it generates code for. The other being MoarVM.

[21:21] <zacts> oh I see

[21:22] *** jjido joined
[21:25] <skids> There have been other compilers in the past, most notably neicza which had .NET as a target.

[21:25] *** girafe left
[21:25] <timotimo> we're defining the language perl6 based on the test suite, not on the implementation

[21:25] <timotimo> anything that passes the test suite sufficiently is perl6

[21:25] <timotimo> so it doesn't have to be rakudo or rakudo based

[21:26] *** sdo joined
[21:27] <sdo> hello

[21:27] <gfldex> m: say "ohai sdo!"

[21:27] <camelia> rakudo-moar e071e4: OUTPUT«ohai sdo!␤»

[21:29] <kalkin-> gfldex: ic. thanks for the hint with floating numbers

[21:30] <sdo> I did stupid thing this afternoon I was cleaning my repo and unsubscribe by mistake to perl6 repository. I had a pull requeston it but what should I have to give to register again please?

[21:32] <sdo> on github

[21:32] *** setty1 left
[21:33] *** tbrowder joined
[21:34] <sdo> hello :pmichaud

[21:35] <parabolize> sdo: github says you just need to be mentioned. https://help.github.com/articles/unsubscribing-from-conversations/

[21:38] *** molaf left
[21:40] <sdo> parabolize: I had a green button says unsubscribe how to get it back?

[21:43] *** TEttinger joined
[21:44] <parabolize> sdo: https://help.github.com/articles/watching-repositories/ https://help.github.com/articles/subscribing-to-conversations/

[21:45] *** Zoffix left
[21:51] *** Upasaka joined
[21:51] <xdg> hi. Could someone please explain the difference between a constant and a sigil-less variable?  I'm interested in both implementation differences and practical use differences, if any.

[21:54] <xdg> Next Q, given that $ variables can have arrays/hashes assigned to them and pass through subscripting, is there any difference between Q<$x=[1,2,3]> and Q<@x=1,2,3> other than flattening behavior?

[21:55] *** bt_ joined
[21:55] <gfldex> @-sigils are handled differently in string interpolation and in signatures

[21:57] <gfldex> m: constant c = Array.new; my \s = Array.new; say c.VAR, s.VAR; c[1] = 11; s[1] = 11;

[21:57] <camelia> rakudo-moar e071e4: OUTPUT«[][]␤»

[21:59] *** bt_ left
[21:59] <xdg> gfldex, that implies no difference between constants and sigil-less, yes?

[22:00] <gfldex> looks like it

[22:00] <gfldex> however, constant initialisers will be executed at compile time

[22:01] <xdg> and the interpolation is just that qq<@foo> doesn't interpolate?

[22:02] <gfldex> you can tell the Q what to interpolate and there are different flags for $ and @

[22:02] <xdg> I'm finding a number of things in perl6 look different but work the same and I'm trying to both confirm that, and also find a way to explain concisely why one would want to use one or the other

[22:02] <gfldex> that compile time thing on constant is a huge difference

[22:03] <gfldex> m: constant a = BEGIN some-function(now); \a = some-function(now)

[22:03] <camelia> rakudo-moar e071e4: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    some-function used at line 1␤␤»

[22:04] <gfldex> what the value of a will heavily depends on some-function

[22:04] <gfldex> actually BEGIN is likely the wrong phaser, it's a bit late

[22:06] *** jjido left
[22:07] *** Penguiniator left
[22:09] <Xliff_zzzz> does anyone know where the ::() operation is documented?

[22:09] *** Xliff_zzzz is now known as Xliff

[22:10] *** sdo left
[22:10] <gfldex> Xliff: https://doc.perl6.org/language/packages#Interpolating_into_names

[22:11] <Xliff> gfldex++ # Thanks

[22:13] *** _28_ria left
[22:15] *** RabidGravy left
[22:15] *** raiph joined
[22:17] *** _28_ria joined
[22:19] *** cdg joined
[22:19] *** spider-mario left
[22:30] *** raiph left
[22:30] *** jjido joined
[22:32] *** raiph joined
[22:35] *** jjido left
[22:37] <dalek> doc: 44fa2cc | (Wenzel P. P. Peppmeyer)++ | doc/Language/packages.pod:

[22:37] <dalek> doc: add ::() to index

[22:37] <dalek> doc: review: https://github.com/perl6/doc/commit/44fa2ccf6b

[22:38] <dalek> doc: 0cc68d2 | (Wenzel P. P. Peppmeyer)++ | doc/Language/terms.pod:

[22:38] <dalek> doc: add constant to index

[22:38] <dalek> doc: review: https://github.com/perl6/doc/commit/0cc68d2884

[22:40] *** firstdayonthejob left
[22:45] *** lichtkind_ left
[22:45] *** lambd0x left
[22:47] *** rindolf left
[22:49] *** _dolmen_ joined
[22:51] *** bjz left
[23:03] *** _dolmen_ left
[23:05] *** kurahaupo joined
[23:07] *** abruanese left
[23:10] *** bjz joined
[23:10] *** sufrostico joined
[23:17] *** abruanese joined
[23:20] *** sufrostico left
[23:23] *** bjz left
[23:40] *** huggable joined
