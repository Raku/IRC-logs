[00:00] <skink> Hey timotimo, is there a list of circumstances in which Buf can or can't substitute CArray?

[00:01] <timotimo> when you get something back from C

[00:01] <timotimo> a Buf knows how big it is, a CArray doesn't

[00:01] <sortiz> skink, you can't receive from C a Buf

[00:01] <timotimo> C also doesn't know how big arrays are, at least not in a unified way

[00:03] <sortiz> But if the C API expect the allocated space and the size, a Buf is safe.

[00:04] *** pierre_ left
[00:04] *** jamesnek1 joined
[00:04] <skink> Right. c_fill/read_buffer(Buf|CArray, size) is fine, but otherwise you need to use CArray?

[00:05] <skink> (Assuming you've allocated Buf[size-1])

[00:05] <sortiz> In particular if the C function will allocate the space, and returns it address, you need CArray.

[00:06] <sortiz> And you got an "unmanaged" CArray.

[00:07] *** jamesneko left
[00:08] <BenGoldberg> Is there any way to distinguish an unmanaged carray from a managed one?

[00:09] *** pierre_ joined
[00:09] <sortiz> BenGoldberg, yep, see: https://github.com/salortiz/NativeHelpers-Blob/blob/master/t/01-basic.t

[00:10] <BenGoldberg> Also, is there any way to tell an unmanaged carray, "you are $length elements long," so that read accesses outside that will die or return failures?

[00:10] <timotimo> nothing built-in

[00:12] <grondilu> m: sub infix:<§>($,$) is tighter(&[+]) {0}; say 1 + 2 § 3;

[00:12] <camelia> rakudo-moar d7698f: OUTPUT«1␤»

[00:12] <grondilu> m: multi infix:<§>($,$) is tighter(&[+]) {0}; say 1 + 2 § 3;

[00:12] <camelia> rakudo-moar d7698f: OUTPUT«1␤»

[00:12] <arnsholt> CArrays are a bit wonky, in general (in part my fault, I'm afraid =)

[00:12] <BenGoldberg> m: multi infix:<§>($,$) is looser(&[+]) {0}; say 1 + 2 § 3;

[00:12] <camelia> rakudo-moar d7698f: OUTPUT«0␤»

[00:13] <grondilu> it did not work last time I tried

[00:13] <BenGoldberg> m: multi infix:<§>($,$) is looser(&infix:<+>) {0}; say 1 + 2 § 3;

[00:13] <camelia> rakudo-moar d7698f: OUTPUT«0␤»

[00:13] <grondilu> I mean there was a different behavior between sub and multi

[00:13] <BenGoldberg> ahh

[00:14] <grondilu> that's ok I'm not going to complain about rakudo not failing :P

[00:14] <BenGoldberg> m: multi infix:<§>(@_) { [+] @_ }; say [§], 1..3;

[00:14] <camelia> rakudo-moar d7698f: OUTPUT«Cannot call infix:<§>(...); none of these signatures match:␤    (@_)␤  in block <unit> at /tmp/ux8ThIdkh8 line 1␤␤»

[00:14] <BenGoldberg> m: sub infix:<§>(@_) { [+] @_ }; say [§], 1..3;

[00:14] <camelia> rakudo-moar d7698f: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in sub infix:<§> at /tmp/4f9gluDuTu line 1␤  in block <unit> at /tmp/4f9gluDuTu line 1␤␤»

[00:14] <BenGoldberg> Well, that's different.

[00:14] <BenGoldberg> m: sub infix:<§>(@_) { [+] @_ }; say [§] 1..3;

[00:15] <camelia> rakudo-moar d7698f: OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in sub infix:<§> at /tmp/nhf0uG4eQl line 1␤  in block <unit> at /tmp/nhf0uG4eQl line 1␤␤»

[00:15] <BenGoldberg> m: multi infix:<§>(@_) { [+] @_ }; say [§] 1..3;

[00:15] <camelia> rakudo-moar d7698f: OUTPUT«Cannot call infix:<§>(Int, Int); none of these signatures match:␤    (@_)␤  in block <unit> at /tmp/36WQDSNVM3 line 1␤␤»

[00:15] <grondilu> oh I remember now

[00:16] <grondilu> m: module A { multi infix:<§>($,$) is tighter(&[+]) is export {0}; } import A; say 1 + 2 § 3;

[00:16] <camelia> rakudo-moar d7698f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/rcXmuV5Wkb␤Strange text after block (missing semicolon or comma?)␤at /tmp/rcXmuV5Wkb:1␤------> 3>($,$) is tighter(&[+]) is export {0}; }7⏏5 import A; say 1 + 2 § 3;␤    expecting any of:␤      …»

[00:16] <grondilu> m: module A { multi infix:<§>($,$) is tighter(&[+]) is export {0}; }; import A; say 1 + 2 § 3;

[00:16] <camelia> rakudo-moar d7698f: OUTPUT«0␤»

[00:16] <grondilu> m: module A { sub infix:<§>($,$) is tighter(&[+]) is export {0}; }; import A; say 1 + 2 § 3;

[00:16] <camelia> rakudo-moar d7698f: OUTPUT«1␤»

[00:16] <grondilu> ^see?

[00:17] <grondilu> it was when exporting.

[00:18] <ZoffixLappy> May be worth reporting as a bug

[00:18] <zwu> which module has defined LinearArray？

[00:18] * grondilu reports it

[00:18] <BenGoldberg> Yeah, that's rakudobugabble ;)

[00:19] <sortiz> zwu, NativeHelpers::CStruct

[00:19] <zwu> sortiz: thank you!

[00:21] <zwu> Could not find NativeHelpers::CStruct. And Could not find NativeHelpers::Blob. Is there an option I should set?

[00:24] <ZoffixLappy> zwu, did you install the needed module?

[00:24] <sortiz> zwu, a simple 'zef/panda install NativeHelpers::blob' should suffice.

[00:25] <ZoffixLappy> zef/panda install NativeHelpers::Blob

[00:30] <zwu> oh, I have not installed any modules

[00:31] <zwu> Is there a list about important modules?

[00:31] <timotimo> there's only a list of all modules

[00:31] <zwu> timotimo:)

[00:36] * sortiz hesitating about the "pros"/"cons" on keep NH::* in one distro or separate them

[00:36] *** AlexDaniel left
[00:38] *** yasnothil joined
[00:46] *** grondilu left
[00:50] <zwu> Can we set memory alignment for NativeHelpers::CStruct too? 

[00:51] <zwu> which is important for future vectorization support?

[00:57] *** grondilu joined
[00:58] <sortiz> zwu, not explicitly: LinearArray depends on calloc(..., sizeof(Foo)) semantics, and Rakudo's CStruct try to use the proper alignment.

[01:04] <dalek> ecosystem: 405185e | (Zoffix Znet)++ | META.list:

[01:04] <dalek> ecosystem: Add Bailador::Template::Mojo::Extended

[01:04] <dalek> ecosystem: 

[01:04] <dalek> ecosystem: Extra features on top of the default ::Mojo renderer for Bailador: https://github.com/zoffixznet/perl6-Bailador-Template-Mojo-Extended

[01:04] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/405185ef29

[01:05] <ZoffixLappy> NOW, 4 modules later, I think, I can actually do work on the original web app I planned last Thursday :P

[01:08] <ZoffixLappy> heh... npm gets 447 "new" modules a day: http://www.modulecounts.com/

[01:08] <ZoffixLappy> Either the counter system is broken or npm stands for "New Wheel Reinvention Factory"

[01:10] *** pierre_ left
[01:11] <ZoffixLappy> 1111th commit to ecosystem

[01:11] *** molaf left
[01:12] * ZoffixLappy feels a pleasant feeling

[01:24] *** molaf joined
[01:29] *** itcharlie left
[01:31] *** BenGoldberg left
[01:33] *** BenGoldberg joined
[01:40] <Xliff_out> m: my $b = Blob.new(^100); my $c = $b[10..20]; $c.WHAT.say

[01:40] <camelia> rakudo-moar d7698f: OUTPUT«(List)␤»

[01:41] *** zwu left
[01:45] <Xliff_out> say $_ for ^5;

[01:45] <Xliff_out> m: say $_ for ^5;

[01:45] <camelia> rakudo-moar d7698f: OUTPUT«0␤1␤2␤3␤4␤»

[01:47] *** ilbot3 joined
[01:47] *** zacts joined
[01:53] *** BenGoldberg left
[01:54] *** BenGoldberg joined
[02:10] *** kid511 joined
[02:10] *** pierre_ joined
[02:11] *** kid51 left
[02:15] *** pierre_ left
[02:17] *** ZoffixLappy_ joined
[02:18] *** ZoffixLappy_ is now known as sexycodergirl

[02:18] *** yqt left
[02:19] *** sexycodergirl is now known as Zoffix

[02:22] *** noganex joined
[02:25] *** noganex_ left
[02:34] *** kid511 left
[02:39] *** skink left
[02:48] *** hotel left
[02:48] *** hotel joined
[02:55] *** emdashcomma_ left
[02:56] *** emdashcomma joined
[02:58] *** loren joined
[03:07] *** ZoffixLappy left
[03:07] *** Zoffix left
[03:10] *** grondilu left
[03:12] *** pierre_ joined
[03:13] *** kaare_ joined
[03:14] <Xliff_out> m: my $b = Buf[int16].new(0 xx 100);

[03:14] <camelia> rakudo-moar d7698f: ( no output )

[03:14] *** skids joined
[03:14] <Xliff_out> m: my $b = Buf[int16].new(0 xx 100); say $b.elems

[03:14] <camelia> rakudo-moar d7698f: OUTPUT«100␤»

[03:17] <Xliff_out> m: my $b = Buf[int16].new(0 xx 100); $b.map({$_ = 0});

[03:17] <camelia> rakudo-moar d7698f: ( no output )

[03:17] *** pierre_ left
[03:21] *** kurahaupo joined
[03:28] *** kurahaupo left
[03:37] <Xliff_out> m: my $b = Buf[int16].new(0 xx 100); $b.map({$_ = 0}); say $b is Buf

[03:37] <camelia> rakudo-moar d7698f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/F8T6ZcXFG3␤Two terms in a row␤at /tmp/F8T6ZcXFG3:1␤------> 3.new(0 xx 100); $b.map({$_ = 0}); say $b7⏏5 is Buf␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤   …»

[03:37] <Xliff_out> m: my $b = Buf[int16].new(0 xx 100); $b.map({$_ = 0}); say $b ~~ Buf

[03:37] <camelia> rakudo-moar d7698f: OUTPUT«True␤»

[03:45] <richi238> Hi

[03:45] <richi238> Is there a reason why the type num is not documented in the official doc?

[03:45] <richi238> https://doc.perl6.org/type.html

[03:47] <geekosaur> because it's a work in progress?

[03:47] <geekosaur> things that can't be found there yet are often in the older spec docs at design.perl6.org

[03:47] <richi238> ah okay, thanks

[04:06] *** Cabanossi left
[04:08] *** Cabanossi joined
[04:16] <ugexe> seems perl6 has totally lost flussence now. a shame...

[04:18] *** khw left
[04:18] *** loren left
[04:25] *** loren joined
[04:40] *** wamba joined
[04:54] *** BenGoldberg left
[04:55] *** dwarring left
[05:34] <MadcapJake> ugexe: did something happen?

[05:36] *** sortiz left
[05:37] <MadcapJake> ugexe: https://gitlab.com/u/flussence

[05:46] *** loren left
[05:54] *** CIAvash joined
[06:13] *** wamba left
[06:30] <stmuk_> he seems to have been trying to use the JVM backend

[06:44] *** hotel left
[06:44] *** hotel_california joined
[06:56] *** sue joined
[07:02] *** skids left
[07:08] *** firstdayonthejob joined
[07:13] *** firstdayonthejob left
[07:24] *** rindolf joined
[07:30] *** sue left
[07:32] *** domidumont joined
[07:34] *** CIAvash left
[07:36] *** domidumont left
[07:37] *** rurban joined
[07:37] *** domidumont joined
[07:38] *** mnick joined
[07:39] *** pierre_ joined
[07:43] *** sue joined
[07:44] *** loren joined
[07:48] *** rurban left
[07:49] *** wamba joined
[07:53] *** lizmat joined
[07:54] *** rurban joined
[07:56] *** loren left
[07:56] *** rurban left
[08:01] *** RabidGravy joined
[08:10] *** pierre_ left
[08:14] *** darutoko joined
[08:19] *** firstdayonthejob joined
[08:19] *** pierre_ joined
[08:31] *** Ven joined
[08:32] <dogbert2> o/ #perl6, is there anybody out there ?

[08:32] *** CIAvash joined
[08:33] * dogbert2 hmm

[08:33] <timotimo> o/

[08:33] <_nadim> dogbert2: Sunday morning, which is probably after a long "night to Sunday morning"

[08:33] <dogbert2> hello guys

[08:33] <_nadim> morning

[08:34] <dogbert2> saw that the http://doc.perl6.org/language/variables#Dynamic_variables had been cleaned up a bit 

[08:34] <dogbert2> still, a lot of vars are still missing and some explanations seem incorrect

[08:34] <_nadim> timotimo: I havea, crappy, piece of code with a grammar that core dumps when it is slightly modified. Do you think anyone would be interested in it? it's short.

[08:35] <timotimo> i'll take it

[08:35] <_nadim> 2 mn

[08:36] <dogbert2> $*DISTRO  Which OS distribution am I compiling under?    # this should be 'Which OS distribution am I running under' ??

[08:38] <dogbert2> if think I'll write up some changes additions to the variable part and present it here for your perusal. How about that?

[08:41] <_nadim> timotimo: http://nopaste.linux-dev.org/?1097300  

[08:42] <_nadim> dogbert2: "that" will probably be welcome but a patch even more.

[08:43] <dogbert2> _nadim: I can make changes in the repo :) but in a case like this it's nice to have someone take a look first

[08:43] <RabidGravy> make the PR, people will look at it

[08:44] <dogbert2> RabidGravy; can do

[08:44] <timotimo> _nadim: you didn't say anything about including a module :)

[08:46] <timotimo> _nadim: note that using something like "push" in your action methods is unreliable in the face of backtracking

[08:50] *** n0xff left
[08:51] *** pierre_ left
[08:52] *** pierre_ joined
[09:01] *** n0xff joined
[09:06] <_nadim> timotimo: just ignore the module it's just for display purpose.

[09:06] <_nadim> timotimo: yes I am aware of that even though in this case it will work I believe. the whole closure thingy was because of frustration ;)

[09:09] *** AlexDaniel joined
[09:11] <AlexDaniel> richi238: if you can't find something then please open a ticket here https://github.com/perl6/doc/issues/new

[09:11] <AlexDaniel> richi238: in this case it was already opened: https://github.com/perl6/doc/issues/372

[09:14] *** sue left
[09:15] *** pierre_ left
[09:15] *** pierre_ joined
[09:23] <dalek> doc/update-dynamic-vars: e827294 | (Jan-Olof Hendig)++ | doc/Language/variables.pod:

[09:23] <dalek> doc/update-dynamic-vars: Added TMPDIR and fixed some errors (according to S28)

[09:23] <dalek> doc/update-dynamic-vars: review: https://github.com/perl6/doc/commit/e827294879

[09:25] <dogbert2> ok, PR done, did I get everything wrong?

[09:27] *** Emeric joined
[09:29] *** pierre_ left
[09:29] <RabidGravy> no they look good,  $*FOO should always be runtime, but an easy way to check is find the definition - if it's PROCESS::<$FOO> then it's definitely run time

[09:30] <dalek> doc: e827294 | (Jan-Olof Hendig)++ | doc/Language/variables.pod:

[09:30] <dalek> doc: Added TMPDIR and fixed some errors (according to S28)

[09:30] <dalek> doc: review: https://github.com/perl6/doc/commit/e827294879

[09:30] <dalek> doc: f928194 | RabidGravy++ | doc/Language/variables.pod:

[09:30] <dalek> doc: Merge pull request #482 from perl6/update-dynamic-vars

[09:30] <dalek> doc: 

[09:30] <dalek> doc: Added TMPDIR and fixed some errors (according to S28)

[09:30] <dalek> doc: review: https://github.com/perl6/doc/commit/f9281940d9

[09:30] <AlexDaniel> dogbert2: it looks right, but let's see what precompilation aficionados say :)

[09:31] <dogbert2> AlexDaniel: uh oh :)

[09:32] <RabidGravy> the $*FOO should always be initialised when they are first used with the appropriate run-time values, there may be some hacks in there that make this not the case, but they should

[09:33] <dogbert2> m: say $. # what will the error message be ..

[09:33] <camelia> rakudo-moar d7698f: OUTPUT«5===SORRY!5=== Error while compiling /tmp/8vFxz5IbCw␤Unsupported use of $. variable; in Perl 6 please use the filehandle's .ins method␤at /tmp/8vFxz5IbCw:1␤------> 3say $.7⏏5 # what will the error message be ..␤»

[09:34] <AlexDaniel> what is .ins

[09:34] <dogbert2> a no longer existing method, removed around Christmas

[09:34] <AlexDaniel> http://irclog.perlgeek.de/perl6/2016-04-30#i_12414356

[09:34] <AlexDaniel> yeah

[09:34] <timotimo> "number of input seperators encountered"

[09:34] <psch> m: say $*IN.ins

[09:34] <camelia> rakudo-moar d7698f: OUTPUT«Method 'ins' not found for invocant of class 'IO::Handle'␤  in block <unit> at /tmp/t2NZ9VVVql line 1␤␤»

[09:34] * AlexDaniel submits rakudobug

[09:34] <timotimo> roughly translates to "current line in file"

[09:35] <timotimo> what's the rakudobug here?

[09:35] <dogbert2> the error msg suggesting a method that no longer exists ?

[09:36] <AlexDaniel> timotimo: well, you may fix it right away so that I don't have to submit a ticket :)

[09:36] <AlexDaniel> https://github.com/rakudo/rakudo/blob/8d69b0e196f5dd6f7db0d3106ebd25fd6a8f5e7b/src/core/Exception.pm#L1359

[09:37] <AlexDaniel> m: say $*IN.nl-in

[09:37] <camelia> rakudo-moar d7698f: OUTPUT«[␤ 

[09:37] <AlexDaniel> m: say $*IN.nl-out

[09:37] <camelia> rakudo-moar d7698f: OUTPUT«␤␤»

[09:38] *** travis-ci joined
[09:38] <travis-ci> Doc build passed. Jan-Olof Hendig 'Added TMPDIR and fixed some errors (according to S28)'

[09:38] <travis-ci> https://travis-ci.org/perl6/doc/builds/127000170 https://github.com/perl6/doc/commit/e827294879e5

[09:38] *** travis-ci left
[09:38] <timotimo> ah, *that* is the bug

[09:38] <timotimo> ok

[09:40] *** TEttinger left
[09:41] <_nadim> masak:  going to Cluj?

[09:46] *** travis-ci joined
[09:46] <travis-ci> Doc build passed. Jonathan Stowe 'Merge pull request #482 from perl6/update-dynamic-vars

[09:46] <travis-ci> https://travis-ci.org/perl6/doc/builds/127000625 https://github.com/perl6/doc/compare/05bb13602b1e...f9281940d953

[09:46] *** travis-ci left
[09:50] <dalek> doc: bceb198 | (Tom Browder)++ | doc/Type/Pod/Block.pod:

[09:50] <dalek> doc: add table class

[09:50] <dalek> doc: review: https://github.com/perl6/doc/commit/bceb198503

[09:50] <dalek> doc: 5c517fe | RabidGravy++ | doc/Type/Pod/Block.pod:

[09:50] <dalek> doc: Merge pull request #483 from tbrowder/master

[09:50] <dalek> doc: 

[09:50] <dalek> doc: add table class

[09:50] <dalek> doc: review: https://github.com/perl6/doc/commit/5c517fe4f5

[09:50] *** wamba left
[10:02] <lizmat> AlexDaniel: RT #128045 fixed

[10:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128045

[10:04] * dogbert2 wonders if unicode contains a bikeshed character :)

[10:05] *** Actualeyes1 left
[10:06] *** sena_kun joined
[10:07] <tbrowder> doc: how does an item become searchable in the search box?

[10:11] <dogbert2> lizmat: I like the new message :)

[10:12] <timotimo> tbrowder: i think it's either an X<...> tag or some other one

[10:12] *** tbrowder left
[10:12] *** tbrowder joined
[10:12] <AlexDaniel> dogbert2: there you go: 🚳

[10:13] <dogbert2> ok, one possible bikeshed then ...

[10:13] <AlexDaniel> .u 🚳

[10:13] <yoleaux> U+1F6B3 NO BICYCLES [So] (🚳)

[10:13] <dogbert2> how would you translate this p5 snippet with .kv

[10:14] <AlexDaniel> dogbert2: which snippet?

[10:14] <dogbert2> perl -n -e 'print $., $_' /etc/passwd

[10:15] <AlexDaniel> m: say .[0],.[1] for $*IN.lines.kv;

[10:15] <camelia> rakudo-moar 1e54c5: OUTPUT«Index out of range. Is: 1, should be in 0..0␤  in block <unit> at /tmp/EHSctNz3eu line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/EHSctNz3eu line 1␤␤»

[10:15] <AlexDaniel> m: say .k,.v for $*IN.lines.kv;

[10:15] <camelia> rakudo-moar 1e54c5: OUTPUT«Method 'k' not found for invocant of class 'Int'␤  in block <unit> at /tmp/DhkGzc8MK9 line 1␤␤»

[10:15] <AlexDaniel> oh geez

[10:15] <psch> m: .say for lines().kv

[10:15] <camelia> rakudo-moar 1e54c5: OUTPUT«0␤Céad slán ag sléibhte maorga Chontae Dhún na nGall␤1␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤2␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤3␤I mo dhiaidh bhí gleann…»

[10:16] <psch> m: .print for lines().kv

[10:16] <camelia> rakudo-moar 1e54c5: OUTPUT«0Céad slán ag sléibhte maorga Chontae Dhún na nGall1Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;2Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí3I mo dhiaidh bhí gleanntáin ghlas’ Ghaoth…»

[10:16] <psch> that's probably the same

[10:16] <psch> oh, no -n adds new-lines

[10:16] <lizmat> for $*IN.lines.kv -> $index, $line { }

[10:16] <psch> m: for lines().pairs { put .key, .value }

[10:16] <camelia> rakudo-moar 1e54c5: OUTPUT«0Céad slán ag sléibhte maorga Chontae Dhún na nGall␤1Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤2Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤3I mo dhiaidh bhí gleanntáin ghlas…»

[10:17] <AlexDaniel> m: for $*IN.lines.kv { say $^a,$^b }

[10:17] <camelia> rakudo-moar 1e54c5: OUTPUT«0Céad slán ag sléibhte maorga Chontae Dhún na nGall␤1Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤2Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤3I mo dhiaidh bhí gleanntáin ghlas…»

[10:17] <lizmat> m: for $*IN.lines.kv -> $index, $line { say "$index: $line" }

[10:17] <camelia> rakudo-moar 1e54c5: OUTPUT«0: Céad slán ag sléibhte maorga Chontae Dhún na nGall␤1: Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤2: Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤3: I mo dhiaidh bhí gleanntái…»

[10:17] <psch> m: for lines() { put $++, $_ } # :P

[10:17] <camelia> rakudo-moar 1e54c5: OUTPUT«0Céad slán ag sléibhte maorga Chontae Dhún na nGall␤1Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤2Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤3I mo dhiaidh bhí gleanntáin ghlas…»

[10:17] <AlexDaniel> m: for $*IN.lines { say $++, $_ }

[10:17] <camelia> rakudo-moar 1e54c5: OUTPUT«0Céad slán ag sléibhte maorga Chontae Dhún na nGall␤1Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤2Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤3I mo dhiaidh bhí gleanntáin ghlas…»

[10:17] <AlexDaniel> ah

[10:17] <AlexDaniel> yeah

[10:18] <AlexDaniel> psch: right! Forgot that you can use just lines()

[10:20] <dogbert2> the following hangs:  perl6 -n -e 'for $*IN.lines.kv -> $index, $line { say "$index: $line" }' /etc/passwd

[10:20] <timotimo> doesn't -n run the code for every line?

[10:20] <psch> dogbert2: i don't think you need -n if you read the lines yourself

[10:21] <AlexDaniel> it's just perl6 -ne 'say $++,$_' /etc/passwd

[10:21] <psch> hanging is kind of suboptimal though...

[10:21] <dogbert2> yeah, it's strange

[10:22] <AlexDaniel> “readline requires an object with REPR MVMOSHandle”

[10:22] <AlexDaniel> and yes, it hangs!

[10:24] <dogbert2> AlexDaniel: your example worked

[10:24] <AlexDaniel> interestingly both get() and lines() kinda work

[10:24] <AlexDaniel> but $*IN.get and $*IN.lines hang

[10:30] <dalek> doc: 41bbe3b | Altai-man++ | doc/Language/regexes.pod:

[10:30] <dalek> doc: Typo in example fixed

[10:30] <dalek> doc: 

[10:30] <dalek> doc: With an order like "0-1-2" substitution makes no sense,

[10:30] <dalek> doc: since it doesn't change the variable. According to the

[10:30] <dalek> doc: comment line, the right order should probably be "1-2-0".

[10:30] <dalek> doc: review: https://github.com/perl6/doc/commit/41bbe3beaa

[10:39] <RabidGravy> me-- # top tip - if you have an attribute "perl" on an object don't be surprised if things don't appear to behave as expected

[10:40] <psch> RabidGravy: that's a neat braino :)

[10:40] *** Ven left
[10:41] <timotimo> %)

[10:41] <RabidGravy> spent several hours and instrumented a couple of modules trying to debug that :-\

[10:42] <lizmat> some lessons learned are expensive  :-(

[10:42] <timotimo> uh oh :(

[10:42] *** CIAvash left
[10:43] <RabidGravy> anyway off to my 30+ year old stomping ground to meet my brother and family

[10:43] <RabidGravy> have fun

[10:43] <RabidGravy> toodles

[10:43] <timotimo> :)

[10:43] <timotimo> i haven't a clue what "stomping ground" refers to :|

[10:44] * psch guesses pub

[10:44] <timotimo> oh

[10:44] <RabidGravy> the area I lived until I was 18

[10:44] <RabidGravy> but yes there may be a pub involved ;0)

[10:49] *** RabidGravy left
[10:52] *** diakopter left
[10:54] <dalek> doc: 897f15e | (Tom Browder)++ | doc/Language/5to6-nutshell.pod:

[10:54] <dalek> doc: make searchable

[10:54] <dalek> doc: review: https://github.com/perl6/doc/commit/897f15e39b

[10:54] <dalek> doc: 5fa9347 | (Tom Browder)++ | doc/Language/about.pod:

[10:54] <dalek> doc: add note about how to make an item searchable

[10:54] <dalek> doc: review: https://github.com/perl6/doc/commit/5fa9347a6b

[10:54] <dalek> doc: 155e9da | (Tom Browder)++ | doc/Language/ (2 files):

[10:54] <dalek> doc: Merge pull request #485 from tbrowder/master

[10:54] <dalek> doc: 

[10:54] <dalek> doc: make PERL6LIB searchable

[10:54] <dalek> doc: review: https://github.com/perl6/doc/commit/155e9daf87

[10:58] *** kid51 joined
[11:02] *** kid511 joined
[11:03] *** kid51 left
[11:06] *** CIAvash joined
[11:07] *** diakopter joined
[11:15] <AlexDaniel> dogbert2: RT #128046 RT #128047

[11:15] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128046

[11:15] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128047

[11:15] *** spider-mario joined
[11:20] <dogbert2> AlexDaniel++

[11:26] <tbrowder> doc: the X<> doesn't seem to make a term searchable, any other ideas?

[11:26] *** zakharyas joined
[11:28] <tbrowder> doc: ah, it looks like it's in htmlify.pl6...

[11:29] *** Ven joined
[11:30] *** Ven left
[11:31] *** wamba joined
[11:41] *** BenGoldberg joined
[11:49] <kid511> What is the appropriate forum in which to ask questions about libraries that are bundled with Rakudo Star?

[11:49] <kid511> Specifically, I have questions about DBIish

[11:50] <timotimo> this here is a good place, but perl6-users@, the mailing list, is also a good place

[11:51] <timotimo> and reddit is also all right, though i personally don't read it all that often

[11:51] <timotimo> like, reddit.com/r/perl6

[11:51] *** pdcawley joined
[11:52] <kid511> Well, let me ask one question here since it may be more general

[11:52] <kid511> At https://github.com/perl6/DBIish, the following instruction is given for reading the documentation:

[11:52] <kid511> perl6 --doc <filename>

[11:53] <kid511> But when I searched the rakudo-star tree, I could not find any file with 'DBIish' in its name.

[11:53] <kid511> Hence, I could not read the documentation.  What is wrong?

[11:53] <timotimo> oh, that's a good point

[11:53] <timotimo> because the filenames now have sha1 hashes in them

[11:54] <psch> yeah, i've tripped over that a few times too

[11:54] <kid511> So, doesn't that render 'perl6 --doc <filename>' useless, in practical terms?

[11:54] <lizmat> is there a ticket for it ?

[11:54] <psch> it probably should check if we have a module named <filename> in the CURI

[11:54] <lizmat> is nine_ aware of this ?

[11:55] *** Util joined
[11:55] *** pdcawley left
[11:55] <kid511> How, in general, does one read the documentation in Perl6 via an invocation at the command-line?

[11:55] <timotimo> there's the p6doc tool, but it's not for installed modules, is it?

[11:56] <kid511> i.e., is there a working equivalent to 'perldoc'?

[11:56] <psch> well, --doc *should* work

[11:56] <timotimo> if you can find the file, it definitely will work

[11:56] <psch> i'll have a look in a bit, see if i can hook that up to look into the installation repo

[11:56] <lizmat> I guess we need to move up handling of --doc to Perl 6 level as well  

[11:57] <timotimo> we ought to ship a few nice little tools for inspecting CUR's. like CURls that'll ls all the files that are part of a distribution and their installed paths (if there are any), and also CURcat to cat files that are installed even if there aren't any "files" so to speak

[11:58] *** pierre_ joined
[11:58] <timotimo> CURgrep/CURack, ... :)

[11:59] <lizmat> timotimo: and those tools would simply use the CUR.methods available   :-)

[11:59] <lizmat> so that people can build their own tools  :-)

[11:59] <timotimo> yes, of course

[11:59] <timotimo> those tools all ought to be one to five lines long

[12:00] <timotimo> but there's still no reason to force users to write them out themselves :)

[12:01] *** brrt joined
[12:02] <tbrowder> doc revert pull #485: can someone please revert doc pull #485? it doesn't work as expected, thanks.

[12:03] <timotimo> hm, no button up on github to do the revert in-place on the website

[12:03] *** pierre_ left
[12:03] *** ZoffixWin left
[12:05] <psch> actually, i don't see an easy way to not require e.g. --docee=Module::Name...

[12:06] <lizmat> tbrowder: you mean 897f15e39b3ea78cd ?

[12:06] <kid511> It appear that if, e.g., I want to read the POD found at https://github.com/perl6/DBIish/blob/master/lib/DBIish.pm6 from the command-line, I have to say:

[12:06] <kid511> perl6 --doc share/perl6/site/sources/8B5538E93290C550228635C3FE5A7111890C4339

[12:07] <kid511> ... which meant that I first had to search the source tree for files with the string 'DBIish', read a lot of output, and then make an educated guess.

[12:08] <kid511> ... which, IMHO, falls into the category  of "barriers to adoption"

[12:08] <AlexDaniel> kid511: you are right

[12:08] <lizmat> kid511: completely agree  :-)

[12:08] <kid511> Is there work under way to rectify this?

[12:09] * lizmat tries to invoke the nine_ 

[12:09] <AlexDaniel> since you've just brought it up, I don't think so

[12:09] * psch gets warnocked again

[12:09] <kid511> Also, here I at least had the advantage of knowing that DBIish was bundled with Rakudo-Star

[12:09] <AlexDaniel> and there's also no tickte as far as I can see

[12:09] <AlexDaniel> ticket*

[12:09] <kid511> I would have been completely clueless if this were "installed from CPAN or the cloud"

[12:10] <kid511> I will open a ticket based on my remarks ^^

[12:10] <lizmat> kid511++

[12:10] <AlexDaniel> kid511++

[12:13] *** wamba left
[12:14] <jdv79> kid511: good point

[12:15] *** zakharyas left
[12:17] *** CIAvash left
[12:17] <AlexDaniel> .seen Zoffix

[12:17] <yoleaux> I saw Zoffix 26 Jan 2016 15:53Z in #perl6: <Zoffix> m: class Bar does Associative { has $.foo = 42; method AT-KEY($key) { self."$key"() } }; Bar.new<foo>.say

[12:17] <tadzik> wouldn't 'p6doc DBIish' DTRT?

[12:17] <AlexDaniel> .seen ZoffixWin

[12:17] <yoleaux> I saw ZoffixWin 30 Apr 2016 19:55Z in #perl6: <ZoffixWin> \o

[12:17] <AlexDaniel> .tell ZoffixWin where is huggable? :)

[12:17] <yoleaux> AlexDaniel: I'll pass your message to ZoffixWin.

[12:19] *** brrt left
[12:22] <tadzik> kid511: yes, 'p6doc DBIish' is what you're after :)

[12:23] <tadzik> similarly to how you'd do 'perldoc DBI' rather than 'perl -Mpod2text-or-whatever `find -name DBI.pm | head -n1` or something :)

[12:24] <psch> tadzik: in that case i'd almost argue to toss the --doc switch

[12:24] <psch> tadzik: 'case as-is it's just misleading and somewhat useless too

[12:24] <psch> *cause

[12:24] <tadzik> it's quite useful for developing and locally testing your own written doc

[12:25] *** kurahaupo joined
[12:25] <tadzik> I think the synopses

[12:25] <timotimo> we could deprecate --doc and call the switch --renderpod instead

[12:25] <tadzik> ' idea was to make --doc smart enough

[12:25] <tadzik> so perl6 --doc DBIish would actually work

[12:25] <psch> yeah, i'm looking how we could do that

[12:26] <psch> hm, what's the CUR invocation to look for the path of an installed module..? :)

[12:27] *** Ben_Goldberg joined
[12:27] *** BenGoldberg left
[12:27] *** Ben_Goldberg is now known as BenGoldberg

[12:28] <kid511> https://rt.perl.org/Ticket/Display.html?id=128048

[12:29] <tadzik> I'll respond to the ticket :)

[12:29] <AlexDaniel> what is p6doc

[12:29] <tadzik> it's a perldoc for perl6,pretty much :)

[12:30] <AlexDaniel> where can I get it?

[12:30] <tadzik> same place where everywhere else :)

[12:30] <tadzik> 'redpadna p6doc', or your other favourite equivalent

[12:30] <lizmat> redpadna ?

[12:30] <tadzik> frankly, I think a reasonable way to resolve the situation is to make --doc load p6doc-the-module and delegate stuff ot it

[12:30] <tadzik> reppadna, modulo my pytos :)

[12:31] *** grondilu joined
[12:31] <tadzik> https://github.com/tadzik/App-redpanda this

[12:31] <AlexDaniel> oh, so panda install p6doc

[12:31] <tadzik> I mean, the precedent to it this way is --doc=HTML that tries to load Pod::To::HTML

[12:32] <AlexDaniel> is it included in rakudo star?

[12:32] <tadzik> yeah, sorry for being deliberately confusing :)

[12:32] <tadzik> I think it is, yes

[12:32] <tadzik> ISTR there's at least one other module that does that, being the Debugger::UI::Commandline or so

[12:33] <AlexDaniel> and then, how do I use it?

[12:33] <tadzik> I don't see why not to make p6doc '2nd degree core' and have --doc rely on it, at least if --doc cannot find the source for the Pod by itself

[12:33] <tadzik> as you would perldoc

[12:33] <tadzik> p6doc DBIish

[12:33] <tadzik> p6doc -f sort

[12:34] <AlexDaniel> “panda install p6doc” does not create a p6doc binary on my system

[12:34] <tadzik> (the latter won't work, as I've found, I'm sure moritz will be happy for patches :))

[12:34] <tadzik> are you using rakudobrew?

[12:34] <tadzik> in that case, 'rakudobrew rehashh

[12:34] <tadzik> why can't I type today :|

[12:34] <AlexDaniel> yeah, now I have it

[12:35] <tadzik> awesome

[12:35] <AlexDaniel> what if I wasn't using rakudobrew?

[12:35] <tadzik> then it should Just Work

[12:35] <tadzik> as long as the default panda install path is in your PATH

[12:35] *** _nadim left
[12:35] <AlexDaniel> hmmm… I wonder why would it be… in case of e.g. debian

[12:37] <AlexDaniel> ah, there's no panda in debian repos so perhaps it does not matter right now

[12:38] <AlexDaniel> tadzik: anyway, thanks!

[12:44] <tadzik> (nvm)

[12:45] *** loren joined
[12:50] <tbrowder> lizmat: I think the whole commit is: 155e9daf87ce9e38e22ef040987a1b24f3f3dfe6

[12:53] <dalek> doc: 32d8fe2 | lizmat++ | doc/Language/5to6-nutshell.pod:

[12:53] <dalek> doc: Revert "make searchable"

[12:53] <dalek> doc: 

[12:53] <dalek> doc: This reverts commit 897f15e39b3ea78cdd11a704c371b860ad124c5b.

[12:53] <dalek> doc: review: https://github.com/perl6/doc/commit/32d8fe217d

[12:55] <tadzik> lizmat: what is the reason for this?

[12:55] <dalek> doc: 232d81e | (Zoffix Znet)++ | doc/Language/5to6-nutshell.pod:

[12:55] <dalek> doc: make searchable in a way that works

[12:55] <dalek> doc: review: https://github.com/perl6/doc/commit/232d81ea1e

[12:55] <tadzik> I assume "it makes it render badly while not giving us any value at this point".... forget I asked :)

[12:55] <lizmat> tadzik: basically doing what tbrowder asked me to do ?

[12:56] <tadzik> right, I didn't follow the entire thing, sorry

[12:57] *** ZoffixWin joined
[12:58] *** Actualeyes joined
[12:58] <ZoffixWin> AlexDaniel, she keeps dropping because I never finished IRC::Client and I didn't really see people using her, so I stopped restarting her :)

[12:58] <yoleaux> 12:17Z <AlexDaniel> ZoffixWin: where is huggable? :)

[12:59] *** huggable joined
[13:00] <ZoffixWin> huggable, help

[13:00] <huggable> ZoffixWin, I'm a factoid bot. See me my source at https://github.com/zoffixznet/perl6-IRC-Client-Plugin-Factoid

[13:00] *** pierre_ joined
[13:00] <ZoffixWin> huggable, Int

[13:00] <huggable> ZoffixWin, class Int [Integer (arbitrary-precision)]: http://doc.perl6.org/type/Int

[13:00] <moritz> I'd be very interested in an IRC client that can reconnect automatically

[13:00] <moritz> because then I could use a Perl 6 version of ilbot in production, finally

[13:00] <ZoffixWin> I'll put more work into it then, after I launch perl6.party

[13:01] <tadzik> moritz: is ilbot running on Bot::BasicBot?

[13:01] <moritz> tadzik: yes

[13:02] <tadzik> moritz: did you do anything speciall to make it automatically reconnect? I have a bot I maintain on another channel, and every now and then it will "fall asleep" and stop responding, and I always manually restart it :?

[13:04] <moritz> tadzik: I don't think I did :-)

[13:04] <moritz> https://github.com/moritz/ilbot/blob/master/ilbot2.pl

[13:04] <ZoffixWin> There's this, but I'd be surprised if B::BB did not use it by default anyway: https://metacpan.org/pod/POE::Component::IRC::Plugin::Connector

[13:05] *** pierre_ left
[13:06] <AlexDaniel> ZoffixWin: perhaps no one is using her because she keeps dropping?

[13:06] <ZoffixWin> :D

[13:07] <AlexDaniel> ZoffixWin: I've tried to use it a couple of times but was very disappointed to see that the bot was not there when I needed it

[13:08] <ZoffixWin> I'll shove it into a auto-restarter script that will kill and restart every so often :)

[13:08] <AlexDaniel> huggable: no bikeshedding please :is: 🚳

[13:08] <huggable> AlexDaniel, Added no bikeshedding please as 🚳

[13:09] <ZoffixWin> m: '🚳'.uninames.say

[13:09] <camelia> rakudo-moar 6df053: OUTPUT«(NO BICYCLES)␤»

[13:09] <ZoffixWin> :S

[13:09] <AlexDaniel> yea, it's a bit off… but good enough :)

[13:09] <ZoffixWin> I wonder what it renders as

[13:10] <ZoffixWin> Ahh: http://www.fileformat.info/info/unicode/char/1f6b3/index.htm

[13:10] <ZoffixWin> Makes sense now.

[13:10] <AlexDaniel> ZoffixWin: https://files.progarm.org/2016-05-01-160956_619x98_scrot.png

[13:10] <tadzik> so what does huggable do? :)

[13:11] <lizmat> huggable: hug tadzik 

[13:11] <huggable> lizmat, nothing found

[13:11] <ZoffixWin> Not much. She just sits around all day

[13:11] <ZoffixWin> :)

[13:11] <AlexDaniel> huggable: what do you do for a living? :is: I am a factoid bot on #perl6

[13:11] <huggable> AlexDaniel, Added what do you do for a living? as I am a factoid bot on #perl6

[13:11] <lizmat> huggable: what do you do for a living?

[13:11] <huggable> lizmat, I am a factoid bot on #perl6

[13:11] <tadzik> oh that's useful :)

[13:11] <tadzik> huggable: how is babby formed?

[13:11] <huggable> tadzik, nothing found

[13:11] <lizmat> huggable: what do you do for a living ?

[13:11] <huggable> lizmat, nothing found

[13:12] <lizmat> huggable is rather strict at what she understands :-)

[13:12] <tadzik> can I teach it that old copypasta? :D

[13:12] *** rba_ left
[13:12] <ZoffixWin> What old copypasta?

[13:13] <tadzik> ZoffixWin: http://knowyourmeme.com/memes/how-is-babby-formed

[13:14] <tadzik> there's no full text in there though, eh

[13:14] <tadzik> https://answers.yahoo.com/question/index?qid=20080820174408AAZkbcG this might be the original

[13:16] <ZoffixWin> *sigh* I never thought Yahoo would stoop to such bad design as to show damn popups in your face: http://i.imgur.com/XS0r6H1.png

[13:17] <AlexDaniel> ZoffixWin: no damn popups here with µBlock

[13:18] <AlexDaniel> hmmm maybe it is because I am not using Chrome

[13:18] <tadzik> "no need to put that x on that popup, I already have an x on my tabs"

[13:19] <tadzik> keen eye spots a Steam icon on your screenshot, may I interest you in #perl6-gaming? :)

[13:32] <masak> heh, X-able is a cute naming scheme for IRC bots. kind of self-documenting. ;)

[13:32] <masak> we could rename camelia to "evalable"

[13:34] <timotimo> rakudobuggable will be your new name, masak :) :)

[13:34] * masak bobs happily in mid-air :>

[13:35] * masak .oO( masak, the bugger-all bot )

[13:36] *** nd3i joined
[13:37] <nd3i> given an array of pairs: @a = :one(1), :two(2)

[13:38] <AlexDaniel> okay

[13:38] *** huggable left
[13:38] <AlexDaniel> ZoffixWin: :'(

[13:38] <ZoffixWin> I'm making a re-starter

[13:38] <AlexDaniel> ah

[13:39] <AlexDaniel> :) then

[13:39] <nd3i> do I understand correctly that push(@a, :three(3)) fails because the pair is taken as a named parameter for push?

[13:39] *** huggable joined
[13:39] <timotimo> that's accurate

[13:39] <AlexDaniel> yes

[13:39] <timotimo> you can write push(@a, (:three(3))) if you watn

[13:39] <AlexDaniel> m: my@a = :one(1), :two(2); push @a, (:three(3)); say @a

[13:39] <camelia> rakudo-moar 6df053: OUTPUT«[one => 1 two => 2 three => 3]␤»

[13:40] <nd3i> ok. Right, I found that (:three(3)) is the answer and that sort of made it clear what was happening.

[13:40] <AlexDaniel> m: my@a = :one(1), :two(2); push @a, :three(3)[]; say @a

[13:40] <camelia> rakudo-moar 6df053: OUTPUT«[one => 1 two => 2 three => 3]␤»

[13:40] <nd3i> Still, it seems dangerous, no? It would be an easy mistake to make and not much fun to track down

[13:41] <nd3i> would it be possible to detect and warn about at compile time?

[13:42] <nd3i> I guess handling named parms is up to the sub, so there's not much the compiler can do

[13:42] <timotimo> m: my @a; push @a, :foobar(1)

[13:42] <camelia> rakudo-moar 6df053: ( no output )

[13:42] <timotimo> interesting, i'm a bit surprised push has a *% to it

[13:42] <timotimo> potentially because it just invokes the method form without doing argument checking itself at all?

[13:43] <AlexDaniel> m: my@a = :one(1), :two(2); push @a, Pair.new(‘three’, 3); say @a

[13:43] <camelia> rakudo-moar 6df053: OUTPUT«[one => 1 two => 2 three => 3]␤»

[13:46] *** telex left
[13:46] <dogbert2> so, does anyone know what the method flurb does ? http://doc.perl6.org/routine/flurb

[13:46] <AlexDaniel> “method description here”. Isn't it obvious?

[13:46] <psch> m: say &flurb

[13:46] <camelia> rakudo-moar 6df053: OUTPUT«5===SORRY!5=== Error while compiling /tmp/sRdaLXiMiw␤Undeclared routine:␤    flurb used at line 1. Did you mean 'slurp'?␤␤»

[13:47] <dogbert2> looks like a joke to me :)

[13:47] <ZoffixWin> :)

[13:47] <dogbert2> would you all cry if I removed it :)

[13:48] <ZoffixWin> Well, I'm searching Rakudo source for 'flurb' and nothing comes up. 

[13:48] <timotimo> it's in the doc repo

[13:48] <timotimo> it comes from a tool that starts a doc page with a template for you

[13:48] *** telex joined
[13:48] <timotimo> oh

[13:48] <timotimo> and actually it's in Submethod, too

[13:48] <timotimo> =comment ... TODO

[13:49] <dogbert2> that's where I found it (in Submethod)

[13:49] <ZoffixWin> AlexDaniel, what do you mean by "extra" whitespace?

[13:49] <ZoffixWin> RE https://github.com/zoffixznet/perl6-IRC-Client-Plugin-Factoid/issues/4

[13:49] <AlexDaniel> ZoffixWin: I've attached a piece of IRC log. I think that both should work

[13:50] * ZoffixWin disagrees

[13:50] <dogbert2> timotimo: thx

[13:50] <AlexDaniel> huggable: what do you do for a living?

[13:50] <huggable> AlexDaniel, nothing found

[13:50] *** sjn joined
[13:50] <ZoffixWin> AlexDaniel, '?' is part of the factoid. So inserting a space between it and the rest of the factoid would have to have some heuristics to find a guess

[13:50] <dogbert2> i'll remove the submethod one then :)

[13:51] <ZoffixWin> huggable, what do you do for a living?

[13:51] <huggable> ZoffixWin, I am a factoid bot on #perl6

[13:51] <ZoffixWin> huggable, what do you do for a living?   

[13:51] <huggable> ZoffixWin, nothing found

[13:51] <ZoffixWin> THAT, I agree with :)

[13:51] *** brrt joined
[13:51] <AlexDaniel> ZoffixWin: instead of saying “nothing found”, why not find something that matches?

[13:52] <ZoffixWin> AlexDaniel, that's already planned: https://github.com/zoffixznet/perl6-IRC-Client-Plugin-Factoid/blob/master/DESIGN.md#level-2-implementation

[13:52] <psch> safe the factoids under (tr/ //).fc maybe

[13:52] <AlexDaniel> ZoffixWin: so why do you disagree? :)

[13:52] <ZoffixWin> huggable, int

[13:52] <huggable> ZoffixWin, class int [Integer (native storage; machine precision)]: http://doc.perl6.org/type/nativeInt

[13:52] <ZoffixWin> huggable, Int

[13:53] <huggable> ZoffixWin, class Int [Integer (arbitrary-precision)]: http://doc.perl6.org/type/Int

[13:53] <ZoffixWin> psch, ^ :) that would be a bit problematic

[13:53] <psch> m: say "int".fc eq "Int".fc

[13:53] <camelia> rakudo-moar 6df053: OUTPUT«True␤»

[13:53] <psch> right

[13:53] * psch misremember what exactly foldcase does

[13:53] <timotimo> psch: i would only s/ ' '+/ /, tbh

[13:53] <AlexDaniel> well so what? if “int” exists then print it, if it does not then print “Int”

[13:53] <timotimo> foldcase is a unicode-prescribed transformation that's supposed to be used for case-insensitive comparison

[13:54] <psch> huggable: ^search work

[13:54] <huggable> psch, nothing found

[13:54] <psch> huggable: ^search living

[13:54] <huggable> psch, nothing found

[13:54] <ZoffixWin> NIY

[13:54] <ZoffixWin> Nothing of that design is implemented except for basic storage-retrieval

[13:55] <psch> huggable: NIY :is: NYI

[13:55] <huggable> psch, Added NIY as NYI

[13:55] <psch> :P

[13:55] <timotimo> m)

[13:55] <dalek> doc: 1a58d1a | (Jan-Olof Hendig)++ | doc/Type/Submethod.pod:

[13:55] <dalek> doc: Removed the flurb method

[13:55] <dalek> doc: review: https://github.com/perl6/doc/commit/1a58d1a574

[13:56] * psch resists the urge to try and overwrite the Int factoid

[13:56] <AlexDaniel> psch: overwrite with what?

[13:56] <ZoffixWin> You'll succeed.

[13:57] <psch> AlexDaniel: well, the impulse was "you probably wanted documentation, eh? too bad"

[13:57] <AlexDaniel> huggable: int

[13:57] <huggable> AlexDaniel, class int [Integer (native storage; machine precision)]: http://doc.perl6.org/type/nativeInt

[13:57] <AlexDaniel> huggable: Submethod

[13:57] <huggable> AlexDaniel, class Submethod [Member function that is not inherited by subclasses]: http://doc.perl6.org/type/Submethod

[13:57] <AlexDaniel> cool

[13:58] <AlexDaniel> huggable: ∘

[13:58] <huggable> AlexDaniel, nothing found

[13:58] <AlexDaniel> huggable: o

[13:58] <huggable> AlexDaniel, nothing found

[13:58] <psch> huggable: infix:<o>

[13:58] <huggable> psch, nothing found

[13:58] *** nd3i left
[13:58] <AlexDaniel> huggable: huggable

[13:58] <huggable> AlexDaniel, nothing found

[13:59] <psch> huggable: huggable :is: did you mean recursion?

[13:59] <huggable> psch, Added huggable as did you mean recursion?

[13:59] <AlexDaniel> huggable: huggable :is: https://github.com/zoffixznet/perl6-IRC-Client-Plugin-Factoid

[13:59] <huggable> AlexDaniel, Added huggable as https://github.com/zoffixznet/perl6-IRC-Client-Plugin-Factoid

[13:59] <AlexDaniel> :P

[13:59] * psch blames the r-j compiliation process

[14:00] <AlexDaniel> after all, man man, help help and stuff like that works

[14:01] *** mnick left
[14:03] *** ZoffixWin left
[14:06] *** rindolf left
[14:06] *** ZoffixWin joined
[14:06] *** ZoffixWin left
[14:06] *** ZoffixWin joined
[14:07] <ZoffixWin> What's a sane way to create a bunch of variables from a hash? say I have %h = foo => 'bar'; meow => 'moo'; *magic happens*; say "$foo $meow"; # prints "bar moo":

[14:09] <ZoffixWin> Actually... I'm already evaling stuff... What's a way to test whether a key can be used as a variable name? :P

[14:09] *** sjn left
[14:10] *** sjn joined
[14:11] *** rindolf joined
[14:13] <ZoffixWin> m: say so 'varₓ' ~~ /^ <:L> [<:L> | <:Nd> | <[_'-]> ]+ $/; 

[14:13] <camelia> rakudo-moar 6df053: OUTPUT«True␤»

[14:13] * ZoffixWin will use that

[14:13] <moritz> - and ' can only be used between word characters

[14:13] <ZoffixWin> Thanks

[14:14] <moritz> m: my %h = a => a, b => 2; my (:$a, *%) := %h; say $.perl

[14:14] <camelia> rakudo-moar 6df053: OUTPUT«5===SORRY!5=== Error while compiling /tmp/aYCr4zFn8I␤Variable $.perl used where no 'self' is available␤at /tmp/aYCr4zFn8I:1␤------> 3, b => 2; my (:$a, *%) := %h; say $.perl7⏏5<EOL>␤    expecting any of:␤        argument list␤        …»

[14:14] <moritz> m: my %h = a => a, b => 2; my (:$a, *%) := %h; say $a.perl

[14:14] <camelia> rakudo-moar 6df053: OUTPUT«5===SORRY!5=== Error while compiling /tmp/9U_lB2fAk4␤Undeclared routine:␤    a used at line 1␤␤»

[14:14] <ZoffixWin> m: my %h = a => 'a', b => 2; my (:$a, *%) := %h; say $a.perl

[14:14] <camelia> rakudo-moar 6df053: OUTPUT«"a"␤»

[14:14] <ZoffixWin> :o

[14:14] <ZoffixWin> That's insane.

[14:14] *** tharkun left
[14:15] <ZoffixWin> moritz++

[14:15] <psch> note that you already know the key there

[14:16] <ZoffixWin> Yeah, I just realized that :P

[14:16] *** tharkun joined
[14:25] *** zwu joined
[14:27] <zwu> for NativeCall, what is a way to attach to C memory? For example, C returns a pointer to an array and a size, how can Perl 6 create CArray to attach on the memory for a view?

[14:29] <timotimo> you can use nativecast for that task

[14:29] <timotimo> like nativecast(CArray[int], $returned_value)

[14:29] <zwu> Just read that Typed Pointers should work for the memory attachment, 

[14:30] <timotimo> it might be more wordy, i don't think Pointer has a postcircumfix:<[ ]> that works with it

[14:30] <timotimo> it'd be cool if it did, though

[14:30] <timotimo> then you can write pointer arithmetic like in C. which we all know is totally a good idea!

[14:31] <zwu> right, I just found the example for Pointer[int32] and Pointer[MyCstruct]

[14:32] <timotimo> right, Pointer[MyCStruct

[14:32] <timotimo> ] is probably what you'll have to use if the array returned from C has all the structs in-lined, rather than pointed at

[14:35] <zwu> really like the idea of the postcircumfix:<[ ]> to pointer!

[14:35] <timotimo> why not have a stab at implementing it, then? :) :)

[14:36] <timotimo> you can look at how CArray works, you'll probably have to apply the Positional role and implement AT-POS and BIND-POS

[14:38] <timotimo> BBIAB

[14:41] *** khw joined
[14:49] *** ZoffixWin left
[14:54] *** dalek left
[14:55] *** dalek joined
[14:55] *** ChanServ sets mode: +v dalek

[14:55] *** ecocode joined
[14:56] *** ZoffixWin joined
[14:56] *** ZoffixWin left
[14:56] *** ZoffixWin joined
[15:03] *** skids joined
[15:07] <zwu> I would love to help though I'm not an expert in perl. 

[15:12] *** Relsak joined
[15:12] <timotimo> you might be surprised at how easy it can be to hack on core stuff. i'm willing to give guidance

[15:12] <timotimo> but you're free to refuse, of course

[15:13] *** ecocode left
[15:13] *** BenGoldberg left
[15:13] *** ecocode joined
[15:13] *** BenGoldberg joined
[15:16] *** richi238 is now known as richi235

[15:17] <BenGoldberg> m: class A { submethod b { 42 }; method c { self!b } }; A.c();

[15:17] <camelia> rakudo-moar e8fd55: OUTPUT«5===SORRY!5=== Error while compiling /tmp/xE1Lu2VzUE␤No such private method 'b' for invocant of type 'A'␤at /tmp/xE1Lu2VzUE:1␤------> 3A { submethod b { 42 }; method c { self!7⏏5b } }; A.c();␤»

[15:18] <BenGoldberg> m: class A { submethod b { 42 }; method c { self.b } }; A.c();

[15:18] <camelia> rakudo-moar e8fd55: ( no output )

[15:18] <BenGoldberg> m: class A { submethod b { 42 }; method c { say self.b } }; A.c();

[15:18] <camelia> rakudo-moar e8fd55: OUTPUT«42␤»

[15:21] <ZoffixWin> Ah \o/ reworked how stash vars are used in template in Bailador::Template::Mojo::Extended . Now I'm happy with it :)

[15:22] *** wamba joined
[15:22] *** vike1 left
[15:23] *** RabidGravy joined
[15:29] *** _nadim joined
[15:33] *** zwu left
[15:41] *** vike joined
[15:43] <RabidGravy> beware the goars

[15:43] <RabidGravy> goars?

[15:43] <mst> goats?

[15:45] <timotimo> groots

[15:45] <geekosaur> groats?

[15:48] <tadzik> ooh, ::Extended

[15:48] <tadzik> consider me interested :)

[15:49] <tadzik> nice :)

[15:50] <timotimo> i can't seem to build a fresh rakudo

[15:50] <timotimo>   Could not find symbol '&ssize_t'

[15:50] <timotimo> what am i missing?

[15:55] *** espadrine_ joined
[15:55] *** espadrine_ is now known as espadrine

[15:56] *** n0xff left
[15:57] <RabidGravy> I did see that PR go in

[15:57] <timotimo> well, rm -rf install "fixed" it

[15:57] <timotimo> so yay

[15:57] <RabidGravy> HARR

[15:58] <timotimo> harr?

[15:58] <timotimo> yo RabidGravy, what's your process for making/coming up with melodies?

[15:59] <timotimo> i've been told i have to learn about harmonies first before i can melodize

[16:00] <RabidGravy> that's a bit strict to be honest

[16:00] *** ecocode left
[16:01] <RabidGravy> as far as the stuff I typically make it might be a trick question as I may eschew melody altogether

[16:01] *** shibly joined
[16:01] *** espadrine_ joined
[16:01] *** espadrine left
[16:01] *** shibly left
[16:02] <tbrowder>  perl6-examples: Travis is failing looking for some modules

[16:02] <RabidGravy> but typically it's select a mode around the key of the thing and doodle until it sounds right

[16:02] * psch usually puts a few notes with different length in a row

[16:03] <psch> often that sounds meh, but sometimes it's ok :P

[16:03] <timotimo> "mode"?

[16:04] <psch> that's more of that music theory stuff

[16:04] *** espadrine_ is now known as espadrine

[16:04] <psch> ionian, lydian and so on

[16:04] <timotimo> the what now :)

[16:04] <timotimo> i have never heard of those terms before

[16:04] <RabidGravy> I may spend hours working up something with just "noise" processed in various pleasing ways and then just add a few actual notes to hook in the people that don't get minimal ;-)

[16:05] <timotimo> https://en.wikipedia.org/wiki/Ionian_School_(music) - this the right one?

[16:05] <timotimo> it's not telling me much, that's for certain

[16:05] <psch> oh, yeah, no, ionian is actually wrong i think :S

[16:06] <psch> ah, no

[16:06] <psch> i don't really know them by heart...

[16:06] <psch> https://en.wikipedia.org/wiki/Mode_(music)#Ionian_.28I.29

[16:06] <psch> mode kinda are the same as scales, but not really

[16:06] <psch> *modes

[16:06] <timotimo> there's not even a german page on modes in music

[16:06] <psch> ...or was it keys that are kind of the same but not really?

[16:07] <psch> i get that confused sometimes

[16:07] <timotimo> and mode is a ridiculously general term

[16:07] <psch> https://de.wikipedia.org/wiki/Modale_Tonleitern

[16:07] <timotimo> ah

[16:07] *** ecocode joined
[16:08] <tbrowder> is there an easy way to update modules on the travis server?

[16:09] <timotimo> you'd invoke panda for that; what are you missing?

[16:10] <ugexe> travis has nothing to do with modules

[16:10] <timotimo> shouldn't it grab the newest versions of all modules anyway?

[16:10] <timotimo> because it build from scratch every time ...

[16:11] *** rurban joined
[16:13] <ugexe> well its requesting to install a 'Web::Request' which does not exist

[16:14] <RabidGravy> if you look in the examples of  Audio::PortMIDI then there is a set of definitions of the modes, and I think psch's module has too

[16:16] * psch wonders if the repeated music discussion (and the GH org) warrant a dedicated channel

[16:16] <dalek> doc: 490d255 | (Jan-Olof Hendig)++ | doc/Language/setbagmix.pod:

[16:16] <dalek> doc: Fixed typo in operator name, i.e. (+>) to (>+)

[16:16] <dalek> doc: review: https://github.com/perl6/doc/commit/490d255fc9

[16:16] <tadzik> I'd join #perl6-music :)

[16:16] <psch> i was thinking #perl6-noise-gang, cause that the GH org vOv

[16:17] <RabidGravy> do it

[16:18] <mst> I like #perl6-noise-gang

[16:18] <ugexe> its because supernovas changed his meta.info to meta6.json (for distribution named 'Web') and did not update th ecosystem

[16:18] <mst> give me a shout if you manage to botch the channel registration and I'll help fix it for you

[16:18] <mst> (or if you just have questions about managing an IRC channel)

[16:19] <psch> mst: fwiw, ChanServ links to http://freenode.net/channel_guidelines.shtml which is apparently parked

[16:19] <psch> ah, no, freenode.net just has a search

[16:20] <psch> http://freenode.net/changuide is the right url

[16:21] <RabidGravy> still none the wiser :)

[16:21] <mst> psch: thanks, filed as https://github.com/freenode/web-7.0/issues/212

[16:22] <RabidGravy> isn't it just "/join #channel" and it makes the channel?

[16:22] <psch> RabidGravy: yeah, but ChanServ does stuff vOv

[16:22] *** loren left
[16:22] <RabidGravy> ah right

[16:23] <psch> i do like the habit of not having ops around for example, like we do here

[16:23] <mst> so long as the name matches /^#perl6-/ I can get staff to fix pretty much anything you can do wrong to it

[16:24] <mst> I would, however, prefer to answer questions in advance so I don't have to do that

[16:24] <psch> yeah, i'm reading chanserv help and changuide right now

[16:24] <mst> main thing: make sure you've got more than one person with a full set of flags

[16:24] <psch> yup, i was planning on that :)

[16:25] <mst> oh, and you probably may as well give me full access, since (a) I *effectively* have that anyway (b) if something goes wrong I can fix it faster that way

[16:30] <psch> mst: well, i gave you +F.  not sure if i need to add e.g. +e manually too

[16:31] <mst> that'll be fine

[16:31] <mst> that's enough for me to bootstrap myself up to whatever else if you need me :)

[16:35] *** BenGoldberg left
[16:36] *** BenGoldberg joined
[16:44] *** itcharlie joined
[16:52] *** Ven joined
[16:55] *** BenGoldberg left
[16:55] <Xliff_out> Heya, #perl6

[16:55] <Xliff> What type is best for storing binary data that will grow with time?

[16:55] *** n0xff joined
[16:56] <Xliff> Blob/Buf or does it matter?

[16:56] <grondilu> Buf is the mutable version

[16:56] <ZoffixWin> Buf. I think Blob is immutable

[16:56] <Xliff> OK. So how do you append to a Buf?

[16:57] <Xliff> m: my $b = Buf.new(1, 2, 3, 4); $b.push(5, 6, 7, 8); say $b

[16:57] <camelia> rakudo-moar e8fd55: OUTPUT«Buf:0x<01 02 03 04 05 06 07 08>␤»

[16:57] <Xliff> Nevermind. ;)

[16:57] <ZoffixWin> :)

[16:57] <Xliff> m: my $b = Buf.new(1, 2, 3, 4); my $c.Buf.new(5, 6, 7, 8); $b.push($c); say $b;

[16:57] <camelia> rakudo-moar e8fd55: OUTPUT«Method 'Buf' not found for invocant of class 'Any'␤  in block <unit> at /tmp/bdRm_S03uy line 1␤␤»

[16:57] <Xliff> m: my $b = Buf.new(1, 2, 3, 4); my $c = Buf.new(5, 6, 7, 8); $b.push($c); say $b;

[16:57] <camelia> rakudo-moar e8fd55: OUTPUT«Buf:0x<01 02 03 04 05 06 07 08>␤»

[17:01] <ugexe> m: say Buf.new(1,2,3) ~ Buf.new(4,5,6); my $buf = Buf.new(1,2,3); $buf ~= Buf.new(4,5,6); say $buf

[17:01] <camelia> rakudo-moar e8fd55: OUTPUT«Buf:0x<01 02 03 04 05 06>␤Buf:0x<01 02 03 04 05 06>␤»

[17:08] *** ecocode left
[17:09] *** xnrand is now known as they

[17:09] *** ecocode joined
[17:10] *** they is now known as xnrand

[17:17] *** wamba left
[17:18] <Xliff> ugexe, is ~ more appropriate than .push?

[17:19] <masak> Xliff: that sounds like the kind of question whose answer is benchmarking -- at least if you care about it being fast

[17:19] <Xliff> Heh.

[17:19] <Xliff> Fair enough.

[17:21] <Xliff> Hmmm... Audio::OggVorbis isn't showing on modules.perl6.org. When does that refresh?

[17:21] <arnsholt> ~ and .push have subtly different semantics too, don't they?

[17:21] <arnsholt> ~ making a new object, while .push modifies its invocant?

[17:21] <Xliff> Which means I'd want .push

[17:21] *** TEttinger joined
[17:22] <psch> m: say Buf.new(1,2,3) ~ Buf.new(4,5,6); my $buf = Buf.new(1,2,3); say $buf.WHERE; $buf ~= Buf.new(4,5,6); say $buf.WHERE; $buf.push(Buf.new(7,8,9)); say $buf.WHERE

[17:22] <camelia> rakudo-moar e8fd55: OUTPUT«Buf:0x<01 02 03 04 05 06>␤140323522109888␤140323522118904␤140323522118904␤»

[17:23] <AlexDaniel> why can't ~= act like .push?

[17:23] <AlexDaniel> isn't it something the compiler has to think about instead of me?

[17:24] *** zuchel joined
[17:24] <Xliff> m: use Benchmark

[17:24] <camelia> rakudo-moar e8fd55: OUTPUT«===SORRY!===␤Could not find Benchmark at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2/share/perl6␤    CompUnit::Rep…»

[17:24] <psch> AlexDaniel: "stringy ops work with stringy semantics, and Str are immutable" is my reasoning

[17:25] <psch> (for the difference, to be clear)

[17:25] <masak> AlexDaniel: that's not what ~= means, though. it means `$buf = $buf ~ $stuff` -- that is, replace the old one with a new one

[17:25] <masak> AlexDaniel: you get what you ask for, basically

[17:25] *** zuchel left
[17:25] <AlexDaniel> I get that, I'm just thinking that maybe Perl 6 has to be a bit smarter than me in this case

[17:26] <psch> but if &[~](Buf, Buf) means Buf.push(Buf) we should just not have it

[17:26] <AlexDaniel> if ~ is not somethink that works reasonably well, why have ~ at all

[17:26] <mst> AlexDaniel: IME the computer can be significantly smarter than me and still depressingly stupid :)

[17:26] <psch> and ISTR that there was a great need for the ~ candidate

[17:27] <psch> ...i don't know how "it creates a new Buf" means "it doesn't work reasonably well"

[17:28] <masak> AlexDaniel: it's not about "smarter", it's about consistency. that's what the ~= op does.

[17:28] <masak> AlexDaniel: making it do the other thing would be inconsistent and surprising.

[17:28] *** rurban left
[17:28] <AlexDaniel> masak: I agree with that, yeah

[17:31] *** BenGoldberg joined
[17:33] <mst> AlexDaniel: also, consider, for example, overloading ~

[17:33] <AlexDaniel> I am not a fan of overloading

[17:34] <mst> that's completely nothing to do with the point I'm making

[17:34] *** CIAvash joined
[17:34] <AlexDaniel> mst: well, you mean that I can change it myself, right?

[17:34] *** mr-foobar joined
[17:34] <mst> no

[17:35] <mst> I mean that the fact people can write their own ~ implementations is another reason why ~= has to behave the way it does

[17:35] <masak> ~ is already overloaded, since it works both on Str and on Buf ;)

[17:36] *** n0xff left
[17:38] <Xliff> Odd. When doing this "my $b = Buf.new(@c); my $t2 = timethis(1000, sub { $b.push(@c); }); dd $t2;" via "perl6 -MBenchmark -e"

[17:39] *** huggable left
[17:39] <Xliff> I get this: WARNING: unhandled Failure detected in DESTROY:

[17:39] <Xliff> Type check failed in push to Buf; expected uint8 but got Array ($[0, 1, 2, 3, 4, 5, 6...)

[17:39] *** huggable joined
[17:39] <Xliff> Benchmark bug?

[17:40] <Xliff> Nope.

[17:41] <Xliff> m: my @c = ^100; my $b = Buf.new(@c); $b.push(@c)

[17:41] <camelia> rakudo-moar e8fd55: OUTPUT«Type check failed in push to Buf; expected uint8 but got Array ($[0, 1, 2, 3, 4, 5, 6...)␤  in block <unit> at /tmp/9HflsIVrrO line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/9HflsIVrrO line 1␤␤»

[17:41] <Xliff> m: my @c = ^100; my $b = Buf.new(@c); $b.push(^50)

[17:41] <camelia> rakudo-moar e8fd55: OUTPUT«Type check failed in push to Buf; expected uint8 but got Range (^50)␤  in block <unit> at /tmp/sVxVSLN0b6 line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/sVxVSLN0b6 line 1␤␤»

[17:41] <Xliff> m: my @c = ^100; my $b = Buf.new(@c); $b.push(1,2,3,4,5)

[17:41] <camelia> rakudo-moar e8fd55: ( no output )

[17:41] <Xliff> m: my @c = ^100; my $b = Buf.new(@c); $b.push(^50.flat)

[17:41] <camelia> rakudo-moar e8fd55: OUTPUT«Potential difficulties:␤    Precedence of ^ is looser than method call; please parenthesize␤    at /tmp/0ZnSRgXEYi:1␤    ------> 3= ^100; my $b = Buf.new(@c); $b.push(^507⏏5.flat)␤Type check failed in push to Buf; expected uint8 but got Range…»

[17:42] <Xliff> So argument to Buf.push needs to be Buf

[17:43] <mst> Xliff: the goal here, I believe, is to make sure that you never confuse data intended for a Buf and data intended for a Str, because being pedantic about that makes it much harder to give yourself encoding nightmares

[17:44] <Xliff> kk

[17:46] <Xliff> So if I'm reading Benchmark output correctly, .push() is the way to go.

[17:46] <Xliff> Thanks!

[17:46] *** sena_kun left
[17:47] *** zakharyas joined
[17:54] *** mr-foobar left
[17:56] *** brrt left
[17:57] <psch> anyone around who can teach dalek to join #perl6-noise-gang?

[17:57] <psch> diakopter: ping

[18:06] *** skids left
[18:07] *** yasnothil left
[18:10] *** zakharyas left
[18:11] *** zakharyas joined
[18:13] *** mspo left
[18:20] *** zakharyas left
[18:21] *** tokomer joined
[18:21] *** tokomer left
[18:22] *** tokomer joined
[18:27] *** ecocode left
[18:27] *** zacts left
[18:27] *** zacts joined
[18:29] *** tokomer left
[18:30] <moritz> psch: I think I can

[18:31] <psch> moritz: that'd be nice :)

[18:31] *** dalek left
[18:31] *** dalek joined
[18:31] *** ChanServ sets mode: +v dalek

[18:32] *** dwarring joined
[18:32] <psch> moritz: thanks! 

[18:32] <moritz> psch: no problem

[18:39] <ZoffixWin> m: my @c = ^100; my $b = Buf.new(@c); $b.push(^50.flat)

[18:39] <camelia> rakudo-moar e8fd55: OUTPUT«Potential difficulties:␤    Precedence of ^ is looser than method call; please parenthesize␤    at /tmp/RM3BVce53H:1␤    ------> 3= ^100; my $b = Buf.new(@c); $b.push(^507⏏5.flat)␤Type check failed in push to Buf; expected uint8 but got Range…»

[18:39] <ZoffixWin> m: my @c = ^100; my $b = Buf.new(@c); $b.push(| ^50); 

[18:39] <camelia> rakudo-moar e8fd55: ( no output )

[18:39] *** ufobat joined
[18:39] *** ecocode joined
[18:39] <ufobat> ola :)

[18:40] <ZoffixWin> \o

[18:40] <Ven> o

[18:40] <Ven> o/*

[18:40] <ZoffixWin> ufobat, I sent you a PR to let my new baby work: https://github.com/zoffixznet/perl6-Bailador-Template-Mojo-Extended

[18:40] <timotimo> is there a clever trick to select colors across the hue range when you don't know up front how many colors you'll need, but you want the result to be as well spread out as you can?

[18:40] <ufobat> ZoffixWin, it's just merged in :)

[18:41] <ufobat> i wanted to ask what you're doing since i am happy about your contributions 

[18:41] <ZoffixWin> ufobat, I see your comment 'Thank you', but no merge: https://github.com/ufobat/Bailador/pull/69

[18:42] <ufobat> oups, thanks

[18:42] <ZoffixWin> Yey \o/ ufobat++

[18:42] <ufobat> now it is!

[18:42] <timotimo> oh, golden ratio, eh?

[18:43] <ZoffixWin> ufobat, as for what I'm doing, I'm putting up http://perl6.party that for a start will just be a place to host my blog posts with browser-runnable examples.

[18:43] <ufobat> cool :-)

[18:43] <ZoffixWin> And I figured may as well make it Powered By Perl 6(tm)

[18:43] <ufobat> of course!

[18:44] <ufobat> woudn't it be odd if you would run it on something else?

[18:44] <ufobat> my wife just drove me around in the car for an hour so i wrote some more documentation \o/

[18:45] *** TEttinger left
[18:46] *** ecocode left
[18:47] <ZoffixWin> I wouldn't say "odd," it's just cooler if it is.

[18:47] <ZoffixWin> modules.perl6.org is powered by Perl 5, after all.

[18:48] *** molaf left
[18:49] *** BenGoldberg left
[18:49] *** ecocode joined
[18:50] *** BenGoldberg joined
[18:51] <ufobat> yeah perl5 is great of course. but if you have a website about how awesome perl6 is and someone suddenly realizes "oh yeah.. but your website is powered by JSF" ;)

[18:51] <ufobat> i am just babbling :)

[18:52] *** jjido joined
[18:53] <mst> ufobat: I feel like we'd be better off going "yeah, cos use what works"

[18:54] <ZoffixWin> mst++

[18:56] <ZoffixWin> Especially when it's really MultiMarkdown + Perl 6 + SASS + JS + CSS Framework + JS Framework 

[18:56] <ZoffixWin> Perl 6 isn't the only thing that's making the site possible :)

[18:57] <ZoffixWin> + Glot.io :P

[18:58] <ufobat> mst, right from the technical point of view. But if it's about transporting enthusiasm to others perl6 should be on your "list" somehow

[18:59] <mst> ufobat: if it's about transporting enthusiasm to others working on things that show off perl6 rather than half-arsed reimplementations of things that already exist is probably a better use of your time

[19:00] <mst> (also over a long enough timeline things bitrot and then you have the horrible situation where, politically, making it not-$lang even though nobody has time to maintain the $lang implementation becomes a nightmare)

[19:04] *** kaare_ left
[19:04] *** kaare_ joined
[19:07] <ufobat> i am not sure if i get the point. for me it reads as like "don't put anything in the ecosystem that's available and maybe better somewhere else"

[19:08] *** rindolf left
[19:08] *** yqt joined
[19:09] *** domidumont left
[19:11] <nine_> ufobat: the website is powered by JSF....and apache...and Linux and maybe Cisco routers. Why exactly is it important that the one component of the stack is written in Perl 6?

[19:11] <ufobat> it's not important form a technical side

[19:12] <ufobat> it's like in "eat more vegetables! but i am just eating pizza, pasta and drinking beer"

[19:13] <ufobat> it sounds better if you eat pizza, paste and eat vegetables

[19:14] <mst> and zoffix does use perl6. just not for that site's code.

[19:14] *** espadrine left
[19:14] <mst> I don't really see why you're being so dogmatic about it

[19:14] <mst> this is the opposite of TIMTOWTDI to my mind

[19:15] <masak> what mst said

[19:15] <masak> in 2016, one still has to compromise to be a Perl 6 user

[19:15] <masak> of course more Perl 6 every would be Verra Nice

[19:15] <ugexe> i only use artisinal bespoke perl6 crafted tcp packets

[19:15] <ufobat> well i don't think i am dogmatic about it. I dont want anyone to eat more vegetables, i am sorry if if it was understood like that

[19:16] <mst> and from over a decade of cat herding stuff related to perl5 infrastructure, trying to insist on things being in perl5 has repeatedly slowed us down in ways that, in hindsight, were bloody silly

[19:16] *** kaare_ left
[19:16] <masak> dogfooding can be fantastic

[19:17] *** damnlie joined
[19:17] <masak> but I don't understand the desire to replace everything with Perl (5 or 6) just for the sake of... purity or something

[19:17] <mst> like the perl5 wiki itself essentially dying because it was based on socialtext and there isn't really an actively developed modern perl5 wiki but moving it to mediawiki kept being met with "BUT THAT ISN't PERL!!!1111"

[19:17] <masak> Perl has always been a glue language, both technically and socially

[19:17] <ufobat> i just think if you want express your enthusiasmn about something you should do more then just talk. ( and everyone here is doing it. so i am not complaing of being dogmatic )

[19:18] <masak> ufobat: I understand that you don't mean it that way, but it *sounds* like you're being normative

[19:18] <ufobat> no no no sorry!!

[19:18] <mst> and zoffix is writing modules as well, so he's already doing much more than 'just talk', and yet you criticised him for using something that worked for his site

[19:19] <ufobat> no sorry

[19:19] *** buharin joined
[19:19] <buharin> hi

[19:19] <buharin> :)

[19:19] <mst> I know you mean well, but the attitude/approach has proven time and time again to cause a lot more harm than good so I'm basically going 'aaaaaaaaa no please not again'

[19:19] <ufobat> i didn't want to critisice him! i am really sorry if anyone understood it like that

[19:20] *** kaare_ joined
[19:20] <mst> yeah, it's ok, but having mentioned the previous problems, I hope you can see why I respond like that :)

[19:23] <RabidGravy> and no-one has written a mailing list manager yet

[19:24] <ufobat> i understand the problems that where mentioned. and it makes sense to use things that work. but .. yeah... if you blog about perl6 and a part of your blog uses perl6 somehow it just emphasizes your ideas

[19:24] <ufobat> thats what i mean

[19:25] *** zakharyas joined
[19:25] <ufobat> ZoffixWin, sorry if you felt offended.

[19:25] <ugexe> if you write all the parts yourself maybe... otherwise it only really emphasizes not using the right tool for the job

[19:26] *** Herby_ joined
[19:26] <Herby_> o/

[19:29] *** mr-foobar joined
[19:34] *** mr-foobar left
[19:34] *** mr-foobar joined
[19:40] *** CIAvash left
[19:41] <psch> does panda have a "update installed modules"?

[19:42] <ufobat> in the end there is a difference between building something professional, that is designed to be lange or designed to be very robust and should be great right from the start and building something small, maybe for your own, or for others, maybe for just fun. And doing things again but differently might lead to good new ideas or evolve to become "big", "robust" or cool. 

[19:43] <ufobat> so i feel like "emphasizing that you are not using the right tool" it not always negative

[19:44] <ufobat> or should not be negative for all cases

[19:44] <ufobat> psch, panda --force install <module> does the job, i think

[19:44] <mst> in practice any time you find yourself saying 'should' about somebody else's contributions to the community, you're implicitly being critical of anybody who chooses to contribute in a way you don't approve of

[19:45] *** ecocode left
[19:45] <psch> ufobat: i think that's more for "reinstall an already installed module even if it has the same version"

[19:45] <ufobat> psch, but if there is a new version its updated... you mean updateing everthing that is already installed?

[19:46] *** ecocode joined
[19:46] <psch> ufobat: yes, with "update installed modules" i mean "updateing everything that is already installed" :)

[19:46] <ufobat> psch, i thought a single installed one

[19:47] <psch> ufobat: no problem, i actually have another problem first i noticed :)

[19:47] <ufobat> mst, if you say should to to someone else contributions, yeah i fully agree. but thats not what i mean

[19:47] <mst> ufobat: but it's what you *said*

[19:48] <mst> "if it's about transporting enthusiasm to others perl6 should be on your 'list' somehow"

[19:49] <mst> that is an implicit criticism of anybody who tries to do it another way

[19:49] <ufobat> yeah, but thats what i am sorry for, thats what i didn't want to say like that

[19:50] <ufobat> i never ment to criticize someone

[19:51] <grondilu> I solve a new task on Rosetta Code.  I used my Clifford module.  The computation only took an hour ;P  !  http://rosettacode.org/wiki/Multiple_regression#Perl_6

[19:51] <grondilu> *solved

[19:53] <masak> ufobat: I've been blogging with a Perl 6 static web page generator since 2010. I'm very glad the generator itself is in Perl 6. but the Markdown module is still a Perl 5 one.

[19:53] <masak> ufobat: it was a pragmatic decision back in 2010, and it still kinda is. maybe this year I'll get to replace it with a Perl 6 CommonMark thing.

[19:53] <ufobat> is just like "hey i'd like to blog something about perl. some part of my blogging is in perl because i like to do it that why and it makes fun to me" then everything fit's fine. and then its not a using the wrong tool just you didn't choose to run on a <great software> running on <great hardware> behind that <awesome firewall> and so one

[19:54] <ZoffixWin> ufobat, nah, I wasn't offended or felt you were criticizing :) 

[19:54] <ufobat> thanks :)

[19:56] <masak> ufobat: between Rakudo and nqp, there are still dozens of Perl 5 scripts powering everything from the build process to code generation.

[19:56] <masak> ufobat: some would say that's horrible, or hypocritical, or weak. I say it's a time-saver, and a good use of a proven tool.

[19:56] <ufobat> absolutly!

[19:57] <masak> some day in the distant future, it might be a cool project to rid Perl 6 of its Perl 5 dependencies

[19:57] <masak> but that's hard, for various reasons

[19:57] <ufobat> but if someone writs a little not yet cool replacmenet, because he feels like doing so, and in the end it might a nice cool replacment

[19:57] <masak> and there won't be a big win coming from it, except some kind of feeling of independence from the elder sibling

[19:58] <masak> s/except/merely/

[19:59] <masak> heh. "It outsources Markdown generation to Perl 5. This may or may not be a temporary solution." -- http://strangelyconsistent.org/blog/dog-food-with-a-distinct-perl6-flavor (6 years ago)

[19:59] <ufobat> i think my point is really not being dogmatic or normative.... i am just meaning the opposite of "stating that something is cool and avoiding using it".

[20:00] <masak> ufobat: what you wanted to say is "gee, I love it when people dogfood stuff!" :D

[20:01] <ufobat> yeah maybe :)

[20:01] <masak> "you go, dogfooders!" :P

[20:02] <mst> ufobat: the trick is to phrase it as "I love it when X" rather than "people should X"

[20:03] <mst> ufobat: that makes it a positive statement of your thing rather than being normative

[20:03] <mst> ufobat: you can't claim to not be normative while using the word 'should', basically. I've found over the years that most sentences that contain the word 'should' become better sentences once you rephrase them

[20:03] <ufobat> i'll take that for a good advice

[20:04] * psch .oO( people should say "i love it when..." )

[20:04] <mst> psch: http://trout.me.uk/seriously.jpg

[20:05] <ufobat> i should think more before i write!

[20:05] *** ZoffixWin left
[20:06] <[Coke]_> ~~

[20:06] *** [Coke]_ is now known as [Coke]

[20:09] <masak> handwave, [Coke] 

[20:09] <masak> the best thing I've ever heard about the word "should" is Guy Steele's quip that "should" is a lambda expression taking one parameter: the context in which applies

[20:10] <masak> in which it* applies

[20:10] *** jjido left
[20:11] *** mr-foobar left
[20:11] <[Coke]> masak: blank stare.

[20:11] <masak> [Coke]: uncomfortable look back.

[20:11] *** jjido joined
[20:12] *** mr-foobar joined
[20:13] * masak .oO( reassessment of the wisdom to speak only in nouns )

[20:14] <mst> First they came for the verbs, and I said nothing because verbing weirds language. Then they arrival for the nouns, and I speech nothing because I no verbs

[20:16] *** skids joined
[20:17] *** pmurias joined
[20:17] * masak is reminded of http://www.panix.com/~tehom/allnoun/allnoun8.faq

[20:23] *** dolmen joined
[20:26] <ufobat> i feel like needing a rest after this discussion.. and being invited on a party last night :-) good night everyone

[20:26] <masak> 'night, ufobat++

[20:27] *** kaare_ left
[20:32] *** TEttinger joined
[20:32] *** ufobat left
[20:33] <grondilu> still trying to use Rakudo* on Windows.  First it complained about git missing, so I installed it from git-scm.com, but now: https://gist.github.com/grondilu/f03f96622655bbfdf94a0b41cc739d90

[20:33] <timotimo> it's helpfully not telling you what it tries to run

[20:33] <timotimo> unless it does, and it's trying to invoke ""

[20:39] *** mspo joined
[20:41] *** sortiz joined
[20:41] *** n0xff joined
[20:42] <pmurias> masak: re Perl 5 dependency of Perl 6, isn't the part that's hard to get rid of Configure?

[20:44] *** darutoko left
[20:44] <sortiz> \o #perl6

[20:44] * RabidGravy changes META6 in a non-compatible way - waits for the deafening silence

[20:48] <masak> pmurias: most likely, yes.

[20:49] <masak> pmurias: having a Configure written in nqp ought to work, since there's a stage-0.

[20:49] <timotimo> aye

[20:49] <timotimo> if we distribute moar binaries, too, we can even have moar's Configure in nqp :P

[20:50] <tbrowder> travis: still seeing travis build failure; I notice it's using rakudo 2016.01, why not rakudo 2016.04?

[20:50] <grondilu> m: subset Even of Int where * %% 2; role A { multi method f(Even $) {...} }; class :: does A { multi method f(Even $) {} };

[20:50] <camelia> rakudo-moar a16f0a: ( no output )

[20:51] <grondilu> ^the above did not work on rakudo* on Windows.  Not sure if it's because of rakudo* or or windows.

[20:51] <dalek> perl6-examples: 4d06b5b | (Tom Browder)++ | Makefile:

[20:51] <dalek> perl6-examples: make the Makefile friendlier; remove colons from options (to avoid confusion)

[20:51] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/4d06b5bd3a

[20:51] <dalek> perl6-examples: d41f572 | paultcochrane++ | Makefile:

[20:51] <dalek> perl6-examples: Merge pull request #42 from tbrowder/master

[20:51] <dalek> perl6-examples: 

[20:51] <dalek> perl6-examples: make the Makefile friendlier; remove colons from options (to avoid co…

[20:51] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/d41f57210a

[20:51] <sortiz> grondilu, known problem with Readline on windows.

[20:51] <grondilu> star: subset Even of Int where * %% 2; role A { multi method f(Even $) {...} }; class :: does A { multi method f(Even $) {} };

[20:51] <camelia> star-m 2016.01: OUTPUT«5===SORRY!5=== Error while compiling /tmp/m5kVRKnLTu␤Multi method 'f' with signature :(<anon|81244144> $: Int $ where { ... }, *%_) must be implemented by <anon|81244144> because it is required by a role␤at /tmp/m5kVRKnLTu:1␤»

[20:52] <grondilu> star: say $*VERSION

[20:52] <camelia> star-m 2016.01: OUTPUT«Dynamic variable $*VERSION not found␤  in block <unit> at /tmp/UnoeORylvO line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/UnoeORylvO line 1␤␤»

[20:53] <grondilu> star: say %*VM<VERSION>

[20:53] <camelia> star-m 2016.01: OUTPUT«Dynamic variable %*VM not found␤  in block <unit> at /tmp/CYOcOOa6jh line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/CYOcOOa6jh line 1␤␤»

[20:53] *** buharin left
[20:53] <grondilu> can't ever remember the name of the var containing the version number

[20:53] <grondilu> star: say $?VERSION

[20:53] <camelia> star-m 2016.01: OUTPUT«5===SORRY!5=== Error while compiling /tmp/PW6cMhs7bU␤Variable '$?VERSION' is not declared. Did you mean 'Version'?␤at /tmp/PW6cMhs7bU:1␤------> 3say 7⏏5$?VERSION␤»

[20:54] *** zakharyas left
[20:55] *** jjido left
[20:55] <grondilu> star: say $*PERL.perl

[20:55] <camelia> star-m 2016.01: OUTPUT«Perl.new(compiler => Compiler.new(id => "34C40ED80206941C844106C0BECEBD0BCE0E58E3.1457701770.58478", release => "", codename => "", name => "rakudo", auth => "The Perl Foundation", version => Version.new('2016.1.1'), signature => Blob, desc => Str), name => "P…»

[20:56] <grondilu> on http://rakudo.org/downloads/star/ I thought I would get the april edition.  Well not so much apparently.

[20:56] *** Emeric left
[20:57] <grondilu> star: say $*PERL.compiler.version

[20:57] <camelia> star-m 2016.01: OUTPUT«v2016.1.1␤»

[20:57] <grondilu> m: say $*PERL.compiler.version

[20:57] <camelia> rakudo-moar a16f0a: OUTPUT«v2016.04.74.ga.16.f.0.a.4␤»

[20:57] <grondilu> meh

[20:57] <sortiz> tbrowder, see https://github.com/perl6/perl6-examples/blob/master/.travis.yml#L6

[21:00] <sortiz> tbrowder, keep '2016.01' is important for compat, but 'latest' can be added, thought.

[21:00] <timotimo> keep 2016.01 weird!

[21:03] <sortiz> timotimo, ??

[21:06] *** wamba joined
[21:07] <timotimo> nothing, just a random connection in my brain

[21:09] *** Ven left
[21:18] *** sue joined
[21:24] *** stmuk joined
[21:33] *** espadrine joined
[21:34] *** pmurias left
[21:34] *** dolmen left
[21:35] *** mr-foobar left
[21:35] <masak> 'night, #perl6

[21:35] <timotimo> gnite masak 

[21:35] <timotimo> our masaked hero

[21:36] *** mr-foobar joined
[21:36] <RabidGravy> toodles

[21:36] *** john51_ left
[21:37] *** yasnothil joined
[21:37] *** john51 joined
[21:39] *** huggable left
[21:39] *** huggable joined
[21:41] *** ecocode left
[21:41] *** cpage_ joined
[21:41] *** ecocode joined
[21:52] *** cpage_ left
[21:52] *** wamba left
[21:54] *** Relsak left
[22:00] *** mr-foobar left
[22:02] *** mr-foobar joined
[22:05] *** sufrostico joined
[22:05] <ugexe> zef has a prototype 'upgrade' command now to upgrade installed modules (inspired by psch's earlier comment)

[22:10] <BooK> I see the core Version.pm has issues with git version numbers

[22:15] *** cpage_ joined
[22:16] <timotimo> m: say $*VM.version.perl

[22:16] <camelia> rakudo-moar a16f0a: OUTPUT«v2016.04␤»

[22:16] <timotimo> oh, er

[22:20] <RabidGravy> BooK, that's kind of a trick question as git doesn't have version numbers

[22:21] <RabidGravy> it does encourage the use of v on the release tags which don't work too great

[22:23] *** ecocode left
[22:23] <RabidGravy> but 

[22:24] <RabidGravy> m: say Version.new("645c96b72112adf30b785e05fa71db081b1cebed")

[22:24] <camelia> rakudo-moar a16f0a: OUTPUT«v645.c.96.b.72112.adf.30.b.785.e.05.fa.71.db.081.b.1.cebed␤»

[22:24] <RabidGravy> so yeah that sucks too

[22:27] <RabidGravy> but then the only comparison that makes sense for them is equality anyway

[22:27] <timotimo> that's right

[22:27] <timotimo> it's not actually a version, or a number :)

[22:40] <AlexDaniel> m: say :16<645c96b72112adf30b785e05fa71db081b1cebed>

[22:40] <camelia> rakudo-moar a16f0a: OUTPUT«572963874799173193638282104870834911135227767789␤»

[22:41] <AlexDaniel> timotimo: that's a great looking number :D

[22:42] <timotimo> :P

[22:42] *** sue left
[22:43] *** sufrostico left
[22:43] <AlexDaniel> interesting, what are the chances that the “highest” hash will be in the, um, let's say last year

[22:44] <ugexe> for security reasons i would hope 0

[22:44] <AlexDaniel> since no new commits are added in the past, you can safely assume that the “latest” version will be moving forward

[22:45] <AlexDaniel> ugexe: ok, good point :D

[22:45] <BooK> RabidGravy: actually, the output of git describe is telling something about how far one is from the latest tag

[22:46] <BooK> in Git::Version::Compare (perl 5), I'm dropping the gdeadbeef bit

[22:46] *** sue joined
[22:47] <AlexDaniel> okay, that's it: https://github.com/rakudo/rakudo/commit/fffe76ccc79a8373b16e1172999c1d4aedf70a20

[22:47] <RabidGravy> well do feel free to make a P6 version that returns a comparable Version

[22:47] *** firstdayonthejob left
[22:48] <AlexDaniel> the smallest one seems to be this: https://github.com/rakudo/rakudo/commit/00006b16dd961d20bc20e1ac1d32df6d44320e05

[22:48] <AlexDaniel> .oO( I should probably stop this nonsense and just go to bed )

[22:49] <timotimo> you can't compare versions in git. the concept doesn't make any sense except for equality or when shas are strictly in a row

[22:50] <timotimo> and even then you'd have to have all sha1s in between to figure that out reliably :)

[22:50] <AlexDaniel> but there are some interesting properties to such versioning: 1) there's no need to decide when we the release has to be made. If you want the release to happen sooner, then just commit more! 2) Over time releases will be less frequent, which kinda makes sense

[22:51] <AlexDaniel> /we//

[22:51] <psch> but git refs aren't ordered..?

[22:53] <BooK> actually, `git describe` gives number of additional commits after the tag

[22:53] <BooK> but because branches, that's not enough to disambiguate, hence the abbrievated sha1 after the 'g'

[22:53] <AlexDaniel> psch: not sure if you got my crazy idea. The point is that we take the highest sha out of all commits, and treat that as the latest version of the software

[22:53] <timotimo> if you drop the gf00f00 bit, you can just move the tag and have something else with the same version

[22:54] <timotimo> or even just have a branching point after the tag

[22:54] <BooK> yup

[22:54] <BooK> https://metacpan.org/pod/Git::Version::Compare#EVERYTHING-YOU-EVER-WANTED-TO-KNOW-ABOUT-GIT-VERSION-NUMBERS

[22:54] <AlexDaniel> psch: new commits will most probably have sha hash that is “smaller”, but at some point a commit will pop up with a bigger hash. Hooray, we have a new release!

[22:54] <psch> AlexDaniel: oh.  so it's not supposed to be reasonable? :)

[22:55] <AlexDaniel> psch: of course not

[22:55] <jast> that makes it kind of important to enforce passing tests for all commits :)

[22:56] <jast> also, for cheating, there's a script somewhere to bruteforce prefixes for git commit IDs

[22:56] <BooK> although, re-reading thatm ^H^H, if^H^HI don't find it f^Hvery clear

[22:56] <BooK> my connection is flaky, so my messages may not make much sense :-)

[22:58] <timotimo> i've had a bit of energy for improving the spesh grapher, but not enough to improve spesh's optimizer :\

[22:59] *** sufrostico joined
[23:00] *** RabidGravy left
[23:01] <_nadim> timotimo: did the broken grammar that core dumped tell you anything?

[23:02] <timotimo> didn't actually even run it at all ;(

[23:03] <_nadim> did the extra module stop you, I can remove those three lines

[23:03] <timotimo> that'd be helpful

[23:04] <_nadim> do you have grammar::Tracer or you want that one removed too?

[23:04] *** kurahaupo left
[23:04] *** kurahaupo_ joined
[23:04] *** sufrostico left
[23:07] <_nadim> meh! doesn't core dump without.

[23:07] <timotimo> i need as few dependencies as possible :)

[23:07] <timotimo> like, if you can make it crash with purely nqp code, that'd be crazy good

[23:08] <_nadim> I removed the call to Data::Dump::Tree and it does't crash anymore. Damit!

[23:14] *** mr-foobar left
[23:15] *** mr-foobar joined
[23:22] *** SHODAN joined
[23:26] <timotimo> i've caught a flu or something ... i need to get to bed \:

[23:38] *** wamba joined
[23:39] <_nadim> timotimo: get well, I'll hunt a golfed version

[23:42] *** kurahaupo_ left
[23:43] *** TEttinger left
