[00:00] <timotimo> you just need to be the user that builds the documentation

[00:00] <timotimo> i don't think it has a password set

[00:01] <Zoffix> su: Authentication failure ¯\_(ツ)_/¯ tomorrow it is :)

[00:02] *** Xliff_zzz left
[00:03] *** Xliff_zzz joined
[00:08] *** killbill joined
[00:14] *** zacts left
[00:34] *** jack_rabbit left
[00:40] *** killbill left
[00:47] *** Actualeyes joined
[00:49] *** pdcawley left
[00:49] *** pdcawley_ joined
[00:57] *** flaviusb joined
[00:58] *** kurahaupo left
[01:02] *** jack_rabbit joined
[01:07] *** kalkin-_ joined
[01:07] *** kalkin- left
[01:10] *** pdcawley_ left
[01:19] *** z3ndrag0n left
[01:21] *** z3ndrag0n joined
[01:38] *** AlexDaniel left
[01:39] <BenGoldberg> This is kindof an idle question, but how are character sets, such as /[abc]/ implemented?  As bitsets, or a hash, or ... ?

[01:39] *** km3 joined
[01:40] * BenGoldberg wonders if rakudo uses universal hashes anywhere, and if it would be a space or speed improvement to do so.

[01:44] *** AlexDaniel joined
[01:45] *** molaf left
[01:57] *** molaf joined
[01:59] *** km3 left
[01:59] *** km3 joined
[02:00] *** km3 left
[02:07] *** z3ndrag0n left
[02:11] *** ssotka left
[02:14] <TEttinger> BenGoldberg, I'd be curious too. I've seen character classes implemented with bitsets before

[02:25] *** fhorck left
[02:27] *** girafe left
[02:36] <ShimmerFairy> BenGoldberg: not sure, since that's not typically called a character set :P

[02:36] <geekosaur> it is in Icon :p

[02:38] <geekosaur> anyway I think bitsets went out when multibyte characters showed up

[02:39] *** grassass left
[02:42] *** pmichaud joined
[02:42] <pmichaud> m: sub term:foo { };  my $x = foo // 'meow';

[02:42] <camelia> rakudo-moar 29a110: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Null regex not allowed␤at <tmp>:1␤------> 3sub term:foo { };  my $x = foo //7⏏5 'meow';␤»

[02:43] <pmichaud> m: sub term:foo() { };  my $x = foo // 'meow';

[02:43] <camelia> rakudo-moar 29a110: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Null operator is not allowed␤at <tmp>:1␤------> 3sub term:foo()7⏏5 { };  my $x = foo // 'meow';␤»

[02:43] <BenGoldberg> I meant character class, of course ... I was thinking (mathematical) set, because a test for whether a character is in a character class can be thought of as a set-membership test.

[02:43] <pmichaud> m: sub term:sym<foo> { };  my $x = foo // 'meow';

[02:43] <camelia> rakudo-moar 29a110: ( no output )

[02:44] * Zoffix waves to pmichaud 

[02:44] * pmichaud waves to Zoffix

[02:49] *** skids joined
[02:50] <BenGoldberg> Actually, if our character classes are implemented with the Set class, then speeding up Set will of course speed up regex matching... 

[02:52] *** grassass joined
[02:59] *** noganex_ joined
[03:02] *** noganex left
[03:13] *** Actualeyes left
[03:23] *** Calibell_ joined
[03:29] *** AlexDaniel left
[03:31] *** ssotka joined
[03:34] *** kid51 left
[03:36] *** Actualeyes joined
[03:37] <Zoffix> .ask masak can this ticket be closed, after adding the tests for current behaviour? It was suggested I ask you: https://rt.perl.org/Ticket/Display.html?id=70297 

[03:37] <yoleaux> Zoffix: I'll pass your message to masak.

[03:54] *** canopus left
[04:00] *** canopus joined
[04:12] *** notostraca joined
[04:13] *** BenGoldberg left
[04:14] *** TEttinger left
[04:14] *** Calibell_ left
[04:16] *** notostraca is now known as TEttinger

[04:36] *** pdcawley joined
[04:49] *** Cabanossi left
[04:50] *** Cabanossi joined
[04:50] *** khw left
[05:07] *** skids left
[05:10] *** buharin joined
[05:11] *** Actualeyes left
[05:17] *** ssotka left
[05:22] *** djbkd joined
[05:23] *** pdcawley left
[05:24] *** pdcawley joined
[05:26] <sortiz> m: sub foo { fail }; foo // say 'meow'; # Ambiguous //, bare foo expects TERM, not OP

[05:26] <camelia> rakudo-moar 29a110: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Null regex not allowed␤at <tmp>:1␤------> 3sub foo { fail }; foo //7⏏5 say 'meow'; # Ambiguous //, bare foo ex␤»

[05:27] <sortiz> m: sub foo { fail }; (foo) // say 'meow'; # Works

[05:27] <camelia> rakudo-moar 29a110: OUTPUT«meow␤»

[05:27] <sortiz> m: sub foo { fail }; foo() // say 'meow'; # Works

[05:27] <camelia> rakudo-moar 29a110: OUTPUT«meow␤»

[05:31] *** addison left
[05:38] *** Sgeo left
[05:40] <buharin> hi

[05:40] <buharin> ;-)

[05:40] <sortiz> \o buharin 

[05:40] <buharin> however I used Perl

[05:41] <buharin> but I can't install any cpan ui framework

[05:41] <buharin> it is failing both os x and debian

[05:41] <buharin> I tried Gtk3

[05:41] <buharin> Wx

[05:41] <buharin> Tkx

[05:41] <buharin> Tk

[05:41] <buharin> all failing

[05:42] <konobi> perl5?

[05:43] <buharin> yep

[05:44] <sammers> good afternoon from Japan

[05:44] <sortiz> \o sammers

[05:44] <sammers> hi sortiz

[05:45] *** molaf left
[05:47] <sammers> ok, so I am messing around with promises and I am getting this weird intermitent error (Use of Nil in string context). here is a gist https://gitlab.com/snippets/22152

[05:48] <sammers> sometimes it works perfectly, sometimes the error is throw. I have to use a sleep inside the promise to ensure that the error never appears.

[05:50] <konobi> buharin: try #perl on irc.perl.org

[05:50] <buharin> konobi, I tried

[05:50] <sammers> so I guess my question is how do I track down why 'Use of Nil in string context' is thrown?

[05:50] <konobi> buharin: you'll just need to wait about

[05:51] <sortiz> sammers, Can you try creating $http inside the start block? (I'm only guessing)

[05:52] <sammers> yeah, I had that but it seems to work the same.

[05:54] <Woodi> hi #perl6 :)

[05:55] <sammers> is my assumption correct that this *should* work as intended? where the http request is queued and then the await *should* wait for it to complete before moving on??

[05:55] <sammers> hi Woodi

[05:56] <sammers> I am fine with bugs, I am just trying to validate my assumptions

[05:57] <Woodi> jnthn++ for kicking obvious abuser. obviously Allah approved :)  however: a) it's possible Allah is almighty; b) for sure, jnthn++ isn't...  beware over-proudness...

[05:58] *** Sgeo joined
[06:05] *** rgrinberg left
[06:08] *** domidumont joined
[06:08] <sammers> sortiz, I have updated the gist to run the promise a few times in a row to highlight the issue a little better. sometimes it works, sometimes it throws 'Use of Nil in string context'.

[06:10] <sortiz> sammers, I'm seeing the HTTP::Tinysh docs and seems that it has specific async support, have you tried that?

[06:10] <sammers> no, I haven't I will take a look. 

[06:11] *** domidumont left
[06:12] *** domidumont joined
[06:12] <sammers> sortiz, but shouldn't we be able to use promises with blocking calls? in this example I am just using HTTP::Tinyish for experimentation purposes.

[06:13] <sammers> so this might as well be a DB call or disk IO

[06:14] <sortiz> Yep, but In particular that support uses an adhoc FileTempFactory, so seems related to your specific problem with File::Temp.

[06:15] <sammers> hmm

[06:15] <sammers> ok

[06:18] *** CIAvash joined
[06:18] *** jjido joined
[06:19] *** z3ndrag0n joined
[06:21] <sammers> sortiz, I am unfamiliar with adhoc FileTempFactory. is there some issues wilt File::Temp that are causing this?

[06:23] *** jjido left
[06:23] *** z3ndrag0n left
[06:23] <sortiz> Dunno, but the "async" support the author added seems to be mainly about tempfiles, so my best guess is that he found a problem with that.

[06:26] *** girafe joined
[06:27] *** z3ndrag0n joined
[06:29] *** buharin left
[06:31] *** firstdayonthejob joined
[06:32] *** Actualeyes joined
[06:32] *** buharin joined
[06:32] *** buharin left
[06:41] *** RabidGravy joined
[06:46] *** firstdayonthejob left
[06:50] *** jjido joined
[06:52] *** sno left
[06:52] *** Actualeyes left
[06:54] *** girafe left
[07:00] *** jjido left
[07:07] *** Actualeyes joined
[07:13] *** darutoko joined
[07:14] *** wamba joined
[07:15] *** z3ndrag0n left
[07:17] *** domidumont left
[07:27] *** domidumont joined
[07:34] *** bartolin left
[07:35] *** zakharyas joined
[07:40] *** kent\n is now known as kentnl

[07:43] *** kentnl is now known as kent\n

[07:43] *** bartolin joined
[07:59] *** ilogger2 joined
[07:59] *** ChanServ sets mode: +v ilogger2

[08:08] *** abraxxa joined
[08:17] *** alnewkirk joined
[08:17] *** buharin joined
[08:22] *** z3ndrag0n joined
[08:36] *** holyghost joined
[08:38] <holyghost> Hello, it seems that 'panda install SDL' does not build.

[08:38] <timotimo> maybe you can try SDL2::Raw instead

[08:40] <holyghost> Thanks that builds, I hun on SDL 1.2 as I do not know SDL 2

[08:40] <holyghost> s/hun/run

[08:43] *** rindolf joined
[08:47] *** eugen joined
[08:47] *** pdcawley_ joined
[08:52] *** pdcawley_ left
[08:57] <timotimo> OK

[09:15] *** zacts joined
[09:26] *** iH2O joined
[09:44] *** yqt joined
[09:54] *** labster joined
[09:55] *** maybekoo2 joined
[09:57] *** zacts left
[09:59] *** labster left
[10:09] <gfldex> timotimo: did you update Pod::To::HTML on docs.perl6.org yet?

[10:10] <RabidGravy> If anyone fancies an amusing little project it's write an emulator for this stuff https://github.com/chrislgarry/Apollo-11/

[10:11] <timotimo> did you bump the version of Pod::To::HTML?

[10:11] <timotimo> apparently not

[10:11] <timotimo> well, there's still --force

[10:12] <timotimo> updated

[10:12] <gfldex> thanks

[10:12] <lizmat> RabidGravy: would that involve moon dust ?

[10:13] *** cognominal joined
[10:13] * lizmat touched a piece of moon rock the other day

[10:13] <nine> woah!

[10:14] <lizmat> all part of a visit to the Kennedy Space Center  :-)

[10:14] <dalek> doc: 33b2f80 | (Wenzel P. P. Peppmeyer)++ | / (2 files):

[10:14] <dalek> doc: Yellow and black stripes are used by mother nature to indicate stingy

[10:14] <dalek> doc: danger. Camelia may be able to bite your head off, pod tables are not. A

[10:14] <dalek> doc: light gray zebra table should play better with other

[10:14] <dalek> doc: Pod::FormattingCodes when we start to support them in tables.

[10:14] <dalek> doc: review: https://github.com/perl6/doc/commit/33b2f8098d

[10:14] <dalek> doc: b908f29 | (Wenzel P. P. Peppmeyer)++ | / (2 files):

[10:14] <dalek> doc: Table headers where missing padding, making them clash with table data.

[10:14] <dalek> doc: review: https://github.com/perl6/doc/commit/b908f29897

[10:14] <dalek> doc: 8701cfa | (Wenzel P. P. Peppmeyer)++ | / (2 files):

[10:14] <dalek> doc: Headings are links to move to the top, giving them the wrong color.

[10:14] <dalek> doc: They are now nice, black and contrasty.

[10:14] <dalek> doc: review: https://github.com/perl6/doc/commit/8701cfa445

[10:14] <dalek> doc: 286320e | (Wenzel P. P. Peppmeyer)++ | / (2 files):

[10:14] <dalek> doc: give h1 a slight top padding to separate it more from the previous

[10:14] <dalek> doc: section then from it's on section main body.

[10:14] <dalek> doc: review: https://github.com/perl6/doc/commit/286320ed86

[10:14] *** zacts joined
[10:14] <RabidGravy> lizmat I'm sure it could ;-)  I reckon a monstrous Perl 6 version of "Lunar Lander" with the actuall AGC code in it would be a killer application ;-)

[10:26] <gfldex> to get the CSS changes on docs may need a forced reload

[10:28] <gfldex> something went wrong with table background, checking

[10:29] <gfldex> solved with force reload on all pages :-/

[10:33] <timotimo> bluh :(

[10:34] *** yqt left
[10:35] *** clkao joined
[10:35] <gfldex> all cache problems will solve themself eventually, right?

[10:36] <iH2O> "Lunar Lander" hmm... No.

[10:37] <Zoffix> Yeah. You can also add, say, ?v=1  query param to the CSS file here to speed things up: https://github.com/perl6/doc/blob/master/template/head.html#L5

[10:38] <gfldex> it's purely changed colours, so there is no real need to force it

[10:42] <gfldex> do we want a printable version (without redundat auto-gen stuff, etc.) of the docs?

[10:43] <dalek> doc: 572dcb4 | Altai-man++ | doc/Language/unicode_texas.pod6:

[10:43] <dalek> doc: "Since" column was filled

[10:43] <dalek> doc: review: https://github.com/perl6/doc/commit/572dcb40fe

[10:50] *** holyghost left
[10:51] *** holyghost joined
[10:55] *** yqt joined
[10:55] <Zoffix> Yeah, since it looks weird on paper. I also add this boilerplate to print sheets for sites at $work though it might be too distracting on the docs site: https://gist.github.com/zoffixznet/31a26791896a8aab86bd6c9f2e4e6be9

[10:56] <Zoffix> (adds the URLs for all links into document)

[10:56] <timotimo> oooh

[10:56] <gfldex> isn't there a @media type that is respected by browsers on paper?

[10:56] <timotimo> also add a piece at the bottom like "please think of the environment before printing this document"

[10:56] <timotimo> yes, there is

[10:56] *** buharin left
[10:56] <timotimo> this css file would be imported only for the paper meida type of course

[10:56] *** kaare_ joined
[10:57] <gfldex> i should be able to use Pod::To::BigPage to make something workable

[10:59] <Zoffix> Yeah, @media print { ... } or you can use media="print" attribute on the <link> element that brings in the print styles 

[11:00] *** huggable joined
[11:00] <gfldex> but then the ToC would not have page numbers and the ToC over all .pods is kinda long

[11:00] <gfldex> i will see if I can botch a Pod::To:LaTeX together over the weekend

[11:01] <gfldex> if it's ugly enough some LaTeX wizzard will come along and write a proper style :)

[11:05] *** gregf_ joined
[11:07] <iH2O> well said, gflatex :)

[11:09] <holyghost> So I posted the SDL2 example to CUFP, I will make a game system for it tomorrow

[11:09] <holyghost> Most people comprehend rendering but it need e.g. png image loading for games

[11:10] <holyghost> CUFP == Cool Uses for Perl, perlmonks.org

[11:10] *** Actualeyes joined
[11:12] <iH2O> hmm.. whats the difference between holy ghost and holy spirit

[11:13] *** kurahaupo joined
[11:16] <gfldex> m: enum Foo ( 'Bar' => 1 ); say "{'Bar'}";

[11:16] <camelia> rakudo-moar ea8c42: OUTPUT«Bar␤»

[11:16] <gfldex> :->

[11:17] *** kurahaupo_ joined
[11:18] <gfldex> m: enum Foo ( 'Bar' => 1 ); say "{Bar}";

[11:18] <camelia> rakudo-moar ea8c42: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Bar used at line 1. Did you mean 'Bag'?␤␤»

[11:19] <gfldex> that should warn on «'Bar' =>» in my eyes

[11:20] *** kurahaupo left
[11:24] *** kurahaupo joined
[11:26] *** kurahaupo_ left
[11:29] *** kurahaupo_ joined
[11:29] *** kurahaupo left
[11:33] <tbrowder> mornin' #perl6

[11:33] <tbrowder> ref table pod: I'm trying to incrementally add some severe changes as gradually as I can to eliminate problems, so I've added my proposed DebugPod.nqp as a single PR.  The current spec table test has been run against it successfully.  Please consider PR https://github.com/rakudo/rakudo/pull/816 

[11:34] *** kurahaupo_ left
[11:36] *** freezerburnv joined
[11:37] *** kurahaupo joined
[11:43] <iH2O> z....

[11:46] *** maybekoo2 left
[11:56] <holyghost> I hacked for 8 months on GPL code (off irc), is there a channel on freenode you recommnd a bit for talking ?

[11:56] <jast> about what? :)

[11:57] <holyghost> no idea, code or people :-)

[11:57] <jast> well, I *think* there is no super strict off topic policy here

[11:57] <holyghost> ok

[11:58] <holyghost> I got into drinking some pints after code writing

[11:58] <holyghost> just because of stress

[11:58] <iH2O> join the AAs

[11:58] <holyghost> :-)

[11:58] <iH2O> :)

[11:58] <jast> that seems like, well, not the best possible method to deal with stress... :)

[11:58] <holyghost> I really don't want live a bit longerthan just my liver going off course

[11:59] <holyghost> jast: right

[11:59] <holyghost> I don't drink stronger things though

[11:59] <iH2O> have inositol, that protects your liver they say

[11:59] <holyghost> sure

[11:59] <jast> is it the code writing that you get stressed out from? or other stuff?

[12:00] <holyghost> mostly not fitting the code where I wanted it

[12:00] <jast> I mainly tend to get angry when writing code ;)

[12:00] <holyghost> *lol*

[12:00] <jast> usually at the people who invented computers

[12:00] <jast> sometimes at the people who invented the stupid framework/library I have to use

[12:01] <holyghost> sure frameworks and so on can be stupid sometimes

[12:01] <holyghost> I had this idea not to rely on other code

[12:01] <holyghost> I am mainly a OSS game hacker, I do sell some stuff too

[12:01] <holyghost> I am thinking of making "nights into dreams" in Perl 6

[12:02] <jast> yeah, sometimes writing it yourself means less overall work

[12:02] <holyghost> that's a sega saturn game

[12:02] <jast> depends very much on who wrote the thing you might need, though

[12:02] *** kid51 joined
[12:02] <jast> right... I'm not terribly familiar with most console gaming stuff

[12:02] <holyghost> well you get a good emulator and build GNU gcc tools for it

[12:03] <holyghost> I have a PSVita compiler for it

[12:03] <jast> I don't play a lot of games anyway

[12:03] <holyghost> on linux I mean

[12:03] <holyghost> me neither

[12:03] <jast> sure... I just don't care that much though

[12:03] <holyghost> I only write them :-)

[12:03] <jast> you typically don't install emulators for games you've never really cared about

[12:04] <jast> I did use ScummVM a lot for a while

[12:04] <holyghost> jast : same here

[12:04] <holyghost> The lucasfilm OSS engine

[12:04] <holyghost> they made quite some good simmon the sorcerer & monkey island based games

[12:04] <holyghost> I remember day of the tentacle

[12:05] <holyghost> dosbox is allright for that too

[12:06] <holyghost> Not that I am into infringing games

[12:06] <holyghost> 90ies games without the internet were ok though

[12:06] <holyghost> e.g. Westwoord studios, lands of lore, legend of kyrandia series

[12:07] <holyghost> "apple core dumped" when you dropped an apple

[12:07] <holyghost> I really loved the king's quest series starting from number 5

[12:07] <holyghost> I had this 386 to play it on

[12:08] <jast> never played most of those

[12:09] <holyghost> I forgot what scummvm did a bit

[12:10] <holyghost> game hacking is cool as you like graphics, once you get into 3D things change though

[12:10] <holyghost> lots of math

[12:10] <holyghost> in 2D you develop much faster, which is logical

[12:10] <jast> yeah, I used to try and get into that but that was back when I didn't know nearly enough about math

[12:11] <holyghost> sure, to be fair I do not like GL as I do like SGI though

[12:11] <holyghost> I gave my O2 to my father

[12:11] <BrokenRobot> iH2O: holy spirit is what the holy ghost drinks after a tough day at work ;)

[12:11] <holyghost> I need to claim a new one

[12:11] <holyghost> *lol*

[12:12] <holyghost> I drink Jupiler, I am in Belgium, so enough choice of beers

[12:12] <holyghost> As I said I don't drink high alcohol bevarges

[12:12] <holyghost> s/bevarges/beverages/

[12:12] <jast> I don't like alcoholic anything

[12:13] <holyghost> I really like the fact I can talk a bit here 

[12:13] <iH2O> Belgium's beers are the best in the world, even better than Germany's

[12:13] <jast> Belgium? I'm in Germany, near the drielandenpunt

[12:13] <iH2O> ah ah

[12:13] <holyghost> jast : I once went ot Eupen

[12:13] <holyghost> My 2 daughters don't do alcohold either, 15 and 11

[12:14] <holyghost> I am happy with that

[12:14] <jast> makes sense :)

[12:14] <iH2O> but in France the approach is different

[12:14] <holyghost> There's this biochemistry you must understand for alcohol

[12:14] <iH2O> they teach young children to drink moderate amounts of wine

[12:15] <holyghost> ah ok

[12:15] <iH2O> and to keep it moderate

[12:15] <holyghost> To be honest, wine is far too expensive for me sometimes

[12:15] <iH2O> esp French wine

[12:15] <iH2O> have California wine instead

[12:16] <iH2O> much cheaper

[12:16] <iH2O> its made by siphonning out the underground water

[12:16] <iH2O> Gods knows if theres anything left

[12:16] <iH2O> (underground water)

[12:16] <iH2O> cuz California is a desert, after all

[12:16] * holyghost understands

[12:16] <holyghost> desert wine

[12:16] <iH2O> well, in a way

[12:17] <holyghost> vinyards are ok in such climates

[12:18] <holyghost> Main problem is when selling OSS, I really do not want to push far on the credits

[12:18] <iH2O> im in Canada, and thats a day in/day out fight to prevent California from draining clear the Great Lakes

[12:18] <iH2O> the Great Lakes are the greatest fresh water reserve in the world

[12:18] <holyghost> AFAIK Canada is trees and foresters

[12:19] <iH2O> we lauch satellites too :-P

[12:19] <holyghost> ok

[12:19] <iH2O> *lauch

[12:19] <holyghost> *lol*

[12:19] <jast> that's the German word for leek :)

[12:20] *** kurahaupo left
[12:21] <holyghost> ok, thanks for the talk, 14:20 over here

[12:21] <holyghost> I am working on an Inference Engine in perl6

[12:21] <holyghost> with objects as operator, prefix, postfix, things like that

[12:22] <holyghost> I'll post it when it's usable to perlmonks.org

[12:22] <holyghost> CUFP

[12:26] *** wamba joined
[12:33] *** buharin joined
[12:33] <buharin> hi :)

[12:34] <holyghost> hello, what's up

[12:34] * masak .oO( greater y coordinates )

[12:34] <yoleaux> 03:37Z <Zoffix> masak: can this ticket be closed, after adding the tests for current behaviour? It was suggested I ask you: https://rt.perl.org/Ticket/Display.html?id=70297

[12:35] <holyghost> Well, I am off codingfor today

[12:36] <holyghost> There's this Gaussian Support Vector Machine I am going to plug into PaganVisions2

[12:36] <holyghost> PaganVisions2 is not online yet, but I need to work on this SVM to make a good AI for this game

[12:36] <holyghost> It's quite clear from the math :-)

[12:37] <holyghost> PaganVisions is SDL1 but that library is broken in panda AFAIK

[12:37] *** pmurias joined
[12:38] <gfldex> m: printf("%x", 1073741824);

[12:38] <camelia> rakudo-moar 94a31c: OUTPUT«40000000»

[12:39] <holyghost> m: printf("%x", 0xff)

[12:39] <camelia> rakudo-moar 94a31c: OUTPUT«ff»

[12:39] <holyghost> coolnes

[12:39] <psch> m: say 0xff.base(2)

[12:39] <masak> Zoffix: looks good to me! feel free to close that one :)

[12:39] <camelia> rakudo-moar 94a31c: OUTPUT«11111111␤»

[12:42] <holyghost> m: if only it opened X11 windows :-)

[12:42] <camelia> rakudo-moar 94a31c: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3if only it7⏏5 opened X11 windows :-)␤    expecting any of:␤        new name to be defined␤»

[12:43] <holyghost> +1 psch

[12:44] <iH2O> someday, perl6 will have a goto

[12:45] <iH2O> :-P

[12:45] <masak> somehow haven't missed `goto` all that much

[12:46] <iH2O> i dont like using tons of flags

[12:46] <iH2O> re- :-P

[12:46] <masak> I mean, people are sometimes overly Dijkstra about it... but I can't think of a case where I went "oh, this program would have been better with `goto`"

[12:47] *** freezerburnv left
[12:47] <masak> I do love the `next LABEL` constructs, though

[12:47] <masak> also, factoring things out into small subs ;)

[12:48] <iH2O> bash, not only doesnt have a goto, but you cant exit at all a script from within a command substitution without using real dirty flags

[12:48] *** zacts left
[12:48] <iH2O> i.e. "exit" doesnt work in this case

[12:51] <holyghost> exit 1

[12:51] <BrokenRobot> exit 2

[12:52] <jast> goto does make sense in C for error handling

[12:52] <jast> haven't really ever used it in anything that had suitable alternatives

[12:53] <masak> right

[12:54] <holyghost> I used it in NES assembler, cc65.org, cannot think of a beter example than exiting 2 loops

[12:54] <masak> holyghost: but that's what `last LABEL` does

[12:54] * holyghost understands

[12:54] <holyghost> last as in perl5

[12:55] <holyghost> last label for as you say

[12:55] <perlpilot> good $localtime #perl6

[12:55] <BrokenRobot> \o

[12:56] *** abraxxa left
[12:56] * perlpilot reads the scrollback and sees that masak used "Dijkstra" as an adjective.

[12:57] <perlpilot> I wonder if he's turning in his grave for this legacy

[12:58] <iH2O> in bash, exit [N] isnt the same as break [N]. exit [N] is only the exit status, not the nesting depth to exit from

[12:59] <iH2O> i.e. the respective [N}s refers to completely different things

[12:59] <perlpilot> iH2O: That's why they're spelled different  :)

[12:59] *** neilhwatson joined
[13:00] <iH2O> maybe my explanation wasnt clear, but the meaning is 

[13:02] <pmurias> masak: goto is usefull for emitting code

[13:03] <yoleaux> 6 Jul 2016 16:41Z <jnthn> pmurias: Yes, in NQP - modulo fixups post-compile (I think) - it stays stable.

[13:03] <yoleaux> 6 Jul 2016 16:42Z <jnthn> pmurias: and in the case where it isn't then the thing in $!do is marked as a stub, iirc

[13:04] *** zacts joined
[13:13] *** yqt left
[13:14] *** zakharyas joined
[13:17] *** rgrinberg joined
[13:18] <stmuk> why has all the doc been renamed to pod6?

[13:18] <yoleaux> 5 Jul 2016 13:52Z <BrokenRobot> stmuk: This potentially blocks R*, as JSON::PRC is part of Task::Star: https://github.com/bbkr/jsonrpc/issues/28

[13:19] *** wamba left
[13:20] <BrokenRobot> stmuk: because GitHub was attempting to parse.pod as Perl 5 pod and showing "Error cannot parse" or whatever when viewing files

[13:21] <BrokenRobot> https://github.com/perl6/doc/issues/167

[13:21] <stmuk> ah

[13:24] *** skids joined
[13:29] *** AlexDaniel joined
[13:31] *** holyghost left
[13:35] *** loren joined
[13:35] <loren> Night ~~

[13:35] <ugexe> too bad .gitattributes wouldnt work for that

[13:36] *** holyghost joined
[13:37] <loren> How can i use a class type as hash key ? 

[13:37] <ugexe> what have you tried?

[13:37] <BrokenRobot> Aren't hash keys always strings?

[13:37] <BrokenRobot> Is there a way to represent ^D in a string?

[13:37] <loren> I don't want they compare as string

[13:38] <psch> m: my %h := :{}; %h{Int} = Int; %h{Num} = Num; .WHAT.say for %h.keys

[13:38] <camelia> rakudo-moar 94a31c: OUTPUT«(Num)␤(Int)␤»

[13:39] <psch> m: my %h{Any}; %h{Int} = Int; %h{Num} = Num; .WHAT.say for %h.keys # the other syntax

[13:39] <camelia> rakudo-moar 94a31c: OUTPUT«(Num)␤(Int)␤»

[13:39] <BrokenRobot> Ah

[13:39] <BrokenRobot> Nice

[13:39] <loren> m: class A { }; my %h = A.new() => 1; %h{A.new()} = 2; say %h.perl;

[13:39] <camelia> rakudo-moar 94a31c: OUTPUT«{"A<51651808>" => 1, "A<51651840>" => 2}␤»

[13:40] <psch> loren: you have to initialize the hash as i showed, otherwise you get Stringy keys

[13:40] <loren> m: class A { }; my %h := :{};%h{A.new()} = 1; %h{A.new()} = 2; say %h.perl;

[13:40] <camelia> rakudo-moar 94a31c: OUTPUT«:{(A.new) => 1, (A.new) => 2}␤»

[13:41] <holyghost> Coolnes

[13:41] <loren> I except result like this : :{ A.new => 2 }

[13:42] <BrokenRobot> Specifically, I'm trying to run(...).in.print: "..." a ^D to a program, but I'm unsure how to represent that in that string

[13:42] <psch> loren: but they are different As

[13:42] <loren> But these value are equal ..

[13:42] <dalek> doc: e3efa24 | (Steve Mynott)++ | bin/p6doc:

[13:42] <dalek> doc: don't assume extension is .pod since it isn't

[13:42] <dalek> doc: review: https://github.com/perl6/doc/commit/e3efa243cb

[13:43] <psch> loren: no, not unless you cheat with the .WHICH 

[13:43] <psch> m: class A { method WHICH { "A" } }; my %h := :{};%h{A.new()} = 1; %h{A.new()} = 2; say %h.perl;

[13:43] <camelia> rakudo-moar 94a31c: OUTPUT«:{(A.new) => 2}␤»

[13:43] <psch> note, i *strongly* recommend you don't do that

[13:43] <psch> but if you have to, you can do it like that

[13:43] <loren> So, i have to overwrite .WHICH ?

[13:43] <psch> i personally would recommend asking a question that clarifies the problem you want to solve

[13:44] <ugexe> m: class Foo { }; say Foo.new === Foo.new; say Foo.new eqv Foo.new # they are equivalent, not equal

[13:44] <camelia> rakudo-moar 94a31c: OUTPUT«False␤True␤»

[13:44] <psch> not a question that asks for help with the solution you already decided on

[13:45] *** grondilu joined
[13:46] <loren> I want use a class as Hash key, so i can uniq some data 

[13:46] <psch> m: class A { }; my %h := :{};%h{A.new().WHAT} = 1; %h{A.new().WHAT} = 2; say %h.perl; # probably the most obvious way

[13:46] <camelia> rakudo-moar 94a31c: OUTPUT«:{(A) => 2}␤»

[13:46] <psch> but that way you obviously don't carry whatever A knows around in the Hash

[13:46] <loren> Sorry my EN bad ..

[13:47] <BrokenRobot> m: say "\c[004]".uninames

[13:47] <camelia> rakudo-moar 94a31c: OUTPUT«(END OF TRANSMISSION)␤»

[13:47] * BrokenRobot tries that

[13:47] <loren> class A { has $.value; }

[13:48] <loren> assume class A has a value 

[13:49] <psch> m: class A { has $.value }; my @as; @as.push: A.new(:value($_)) for 1,1,2,3,4,4; say @as.unique: :by(*.value)

[13:49] <camelia> rakudo-moar 94a31c: OUTPUT«(A.new(value => 1) A.new(value => 1) A.new(value => 2) A.new(value => 3) A.new(value => 4) A.new(value => 4))␤»

[13:49] <psch> ergh

[13:49] <BrokenRobot> Doesn't work :/

[13:49] <psch> is that again a positional..?

[13:49] <psch> m: class A { has $.value }; my @as; @as.push: A.new(:value($_)) for 1,1,2,3,4,4; say @as.unique: as => *.value 

[13:49] <camelia> rakudo-moar 94a31c: OUTPUT«(A.new(value => 1) A.new(value => 2) A.new(value => 3) A.new(value => 4))␤»

[13:49] <loren> en 

[13:49] <psch> there

[13:49] <psch> loren: ^^^ 

[13:50] <loren> thanks ..

[13:50] <loren> psch, BrokenRobot  i understand ..

[13:51] <psch> well, unless the values you wanted to use in your hash also carry some other significance...

[13:51] <psch> loren: i think BrokenRobot was talking about something else :)

[13:51] <loren> e, ^_^ .. haha don't mind  

[13:52] <BrokenRobot> Yeah, I was talking about my CTRL+D thing and I think I found the solution: $proc.in.close; does the job

[13:53] <mst> you're trying to get the thing you started to see EOF?

[13:53] <mst> if so, then, yes, that's how you'd do it in basically any language

[13:54] <BrokenRobot> when you run `perl6` it starts REPL and if you press CTRL+D it exits it. I'm trying to emulate doing so programmatically so I could test the output.

[13:55] *** iH2O left
[13:55] <BrokenRobot> And .in.close seems to be doing the trick.

[13:56] <mst> that would be the obvious simple solution, yeah

[13:58] *** zacts left
[13:59] <[Coke]> mst: http://irclog.perlgeek.de/perl6/2016-07-08#i_12804851 - that's incorrect, yes?

[13:59] <ugexe> if you're using a file handle insetad of the IO::Pipe you could probably do something like nqp::eoffh($proc.in)

[14:00] <mst> [Coke]: freenode #perl and irc.perl.org #perl-help for newbie help, then the rest of irc.perl.org for module-specific stuff

[14:00] <mst> though buharin seems to be successfully annoying #perl, #perl-help, -and- irc.perl.org #perl, depending on the day

[14:00] <BrokenRobot> man, I've not been on irc.perl.org/#perl. GumbyBRAIN is probably missing me...

[14:00] <BrokenRobot> *in ages

[14:01] <mst> irc.perl.org #perl is basically "network generic/social channel", which means it's either really busy, or really quiet, or we end up helping people in there because we can't be arsed sending them to #perl-help first

[14:01] <buharin> mst: why annoying?

[14:02] <mst> buharin: generally people don't like having to argue with you to get you to actually read the documentation :)

[14:02] <buharin> mst: omg, I just asked

[14:03] <buharin> that's cruel

[14:03] <ugexe> there is no documentation, only Allah

[14:04] <buharin> mst is so rude

[14:05] *** mr-fooba_ joined
[14:05] <buharin> you should respect your friends

[14:05] <ugexe> I dont think you've seen rude mst

[14:05] <gfldex> is it ok if i add a :has() selector hack via javascript to the docs?

[14:06] <mst> buharin: I do. that's why I dislike your tendency to waste their time.

[14:06] <buharin> mst: I am yours friend too

[14:06] <mst> buharin: you are not my friend. you need to be more respectful of the time of the people helping you before that will happen.

[14:06] <mst> buharin: now this is no longer on topic for #perl6 so please drop it

[14:06] *** khw joined
[14:07] <stmuk> "The only requirement is that you know how to be nice to all kinds of people (and butterflies)"

[14:07] <mst> gfldex: I suspect that if, sans javascript, the page still works fine, but is merely slightly less pretty, nobody will have any serious complaints

[14:08] <mst> (by which I mean "if anybody does then complain, I'd be happy to tell them to please stop being silly" :)

[14:08] <masak> pmurias: generated code as a use case for `goto`? interesting.

[14:08] <gfldex> mst: the pretty yellow box border would have to go without :has() or a hack

[14:09] <gfldex> or i rip the thing apart completely, what I would like to avoid

[14:09] <[Coke]> m: sub foo {}; my $x = foo() // 'meow' # RT #128572, zoffix

[14:09] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128572

[14:09] <camelia> rakudo-moar 94a31c: ( no output )

[14:09] <pmurias> masak: a lot of compilers like using jumps/conditional jumps internally

[14:09] <mst> gfldex: what I'm basically saying is "it should still be moderately pretty without the javascript, but if the javascript makes it more pretty, that's cool" - the documentation being essentially static, I think people are allowed to expert it ti *work* without javascript, but that doesn't mean javascript can't be used to make it shinier, if you see what I mean?

[14:10] <BrokenRobot> [Coke]: yeah, pmichaud++ explained the error in my ticket.

[14:11] <BrokenRobot> m: "\x[1F98B]".uninames.say

[14:11] <camelia> rakudo-moar 94a31c: OUTPUT«(<reserved>)␤»

[14:11] <BrokenRobot> aww

[14:12] <gfldex> mst: i moved to the ToC as a float to the right of the viewport size is >80em, what works nicely if there is a ToC. If not there is a nice big hole. Most sites with a sidey ToC solve that problem by not having box margins.

[14:12] *** zacts joined
[14:12] <gfldex> s/right/left/

[14:13] <mst> I'm sure that would've made sense to somebody with any understanding of CSS whatsoever.

[14:13] <BrokenRobot> :)

[14:14] <gfldex> let me find a nice friendly wall to talk to :)

[14:14] <mst> basically "remember there are curmudgeons who will turn javascript off, and make sure it's not broken for them" is what I'm trying to say

[14:14] <BrokenRobot> What creates that hole?

[14:14] <mst> exactly how you make any of that work, I have no idea, I defer to people who have some idea what the heck they're doing :)

[14:15] <gfldex> i got a margin on #content for the #ToC to float into. If there is no #ToC, there is still that margin. #content:has(#ToC) would solve that problem. IIRC that selector is proposed for the last 5 years, so there is still hope.

[14:17] <[Coke]> "not broken for them". it can be ugly as hell, though.

[14:21] <skids> m: my $f = "fie foo"; say (qqw|fee $f fum|).perl; # how to get that to be "fee", "fie foo", "fum" ?

[14:21] <camelia> rakudo-moar 94a31c: OUTPUT«("fee", "fie", "foo", "fum")␤»

[14:21] <skids> I was actually suprised that "recursed"

[14:22] <BrokenRobot> m: my $f = "fie foo"; say (qqww|fee "$f" fum|).perl;

[14:22] <camelia> rakudo-moar 94a31c: OUTPUT«("fee", "fie foo", "fum")␤»

[14:22] <[Coke]> https://docs.perl6.org/language/quoting#Word_quoting_with_interpolation_and_quote_protection:_qqww

[14:23] <[Coke]> "quote protection" is the thing you wanted.

[14:23] *** cdg joined
[14:24] <[Coke]> m: my $f = "fie foo"; say <<fee "$f" fum>>.perl; # also works

[14:24] <camelia> rakudo-moar 94a31c: OUTPUT«("fee", "fie foo", "fum")␤»

[14:24] <psch> q is "quote", qq is "quote and interpolate", qqw is "quote, interpolate, and then split on <ws>", qqww is "quote, split on <ws>, then interpolate"

[14:24] *** cdg left
[14:24] <skids> Huh.  Well, great to know, but considering the nonpresence of any actual quotes, no wonder I didn't think it was what I needed when reading the docs.

[14:24] <psch> at least that's how i remember them

[14:25] *** cdg joined
[14:25] <skids> thanks

[14:25] <psch> qqww is probably better as "quote, interpolate, keep nested quotes together"

[14:26] <psch> because that's what it actually does

[14:26] * psch .oO( we have too many features! )

[14:26] *** pmurias left
[14:26] * skids will maybe improve those docs later

[14:26] <[Coke]> skids: it helps if you imagine it as a literal instead of a variable.

[14:27] <[Coke]> better docs, always good

[14:29] * skids won't say there are too many features considering he wants to use the one under question :-)

[14:32] <skids> Oh dear.  Now I know why I was confused.

[14:32] <skids> $ perl6 -e 'sub MAIN ($f) { say (qqww|fee $f fum|).perl }' "fie foo"

[14:32] <skids> ("fee", "fie", "foo", "fum")

[14:33] <BrokenRobot> gfldex: yeah, makes sense, since we can't move TOC outside of #content here. I don't know what's involved with adding a :has selector, but maybe if ( ! $('#content #TOC).length ) { $('#content').css('margin', ...) } is simpler to implement.

[14:33] <psch> m: my $f = "fie foo"; say qqww|fee '$f' fum| 

[14:33] <camelia> rakudo-moar 94a31c: OUTPUT«(fee $f fum)␤»

[14:33] <BrokenRobot> m: my $f = "fie foo"; say qqww|fee qq/$f/ fum|

[14:33] <camelia> rakudo-moar 94a31c: OUTPUT«(fee qq/ fie foo / fum)␤»

[14:33] <BrokenRobot> m: my $f = "fie foo"; dd qqww|fee qq/$f/ fum|

[14:33] <camelia> rakudo-moar 94a31c: OUTPUT«("fee", "qq/", "fie", "foo", "/", "fum")␤»

[14:33] <BrokenRobot> heh

[14:34] <psch> m: my $f = "fie foo"; say qqww|fee '\qq[$f]' fum|  # /o\

[14:34] <camelia> rakudo-moar 94a31c: OUTPUT«(fee fie foo fum)␤»

[14:34] <gfldex> BrokenRobot: i think i found a way by adding a no-toc class in Pod::To::HTML. Useful to have anyways.

[14:34] <BrokenRobot> gfldex++

[14:34] <psch> m: my $f = "fie foo"; say qqww|fee \qq[$f] fum| 

[14:34] <camelia> rakudo-moar 94a31c: OUTPUT«(fee fie foo fum)␤»

[14:34] <psch> m: my $f = "fie foo"; say qqww|fee \qq/$f/ fum| 

[14:34] <camelia> rakudo-moar 94a31c: OUTPUT«(fee fie foo fum)␤»

[14:34] <skids> m: my $f = "fie foo"; sub f ($f) { say (qqww|fee $f fum|).perl }; f($f);

[14:34] <camelia> rakudo-moar 94a31c: OUTPUT«("fee", "fie", "foo", "fum")␤»

[14:36] <psch> maybe "ww means 'respect quotes', so if you don't use any it's equivalent to w"..?

[14:36] <psch> (minus the usual \qq escape hatch, of course :S )

[14:36] <skids> Right so there is no such feature I guess.

[14:36] <psch> well, no

[14:37] <psch> the only thing ww gains you over w is that you can quote to keep interpolated things with spaces grouped

[14:37] <psch> m: my $f = "fie foo"; sub f ($f) { say (qqw|fee "$f" fum|).perl }; f($f);

[14:37] <camelia> rakudo-moar 94a31c: OUTPUT«("fee", "\"fie", "foo\"", "fum")␤»

[14:38] <psch> w only gets you .words, while ww gets you (the imaginary) .words-but-check-if-it-was-quoted

[14:38] *** wamba joined
[14:39] *** rgrinberg left
[14:39] *** rgrinberg joined
[14:43] *** zacts left
[14:43] *** wamba left
[14:55] *** luiz_lha joined
[14:55] *** luiz_lha is now known as Guest59918

[14:56] *** Guest59918 is now known as luiz_lha

[15:00] *** huggable left
[15:00] *** molaf joined
[15:05] *** zacts joined
[15:13] *** loren left
[15:14] *** zacts_pi joined
[15:16] *** zacts left
[15:21] *** zacts_pi left
[15:23] <dogbert17> .seen womble

[15:23] <yoleaux> I haven't seen womble around.

[15:23] <dogbert17> it's a bit silent around here atm

[15:23] *** zacts_pi joined
[15:24] <BrokenRobot> .seen asquare

[15:24] <yoleaux> I haven't seen asquare around.

[15:24] <dogbert17> :)

[15:24] <dogbert17> have a new doc gist, what else, this time for Capture.pairs. Is it correct? https://gist.github.com/dogbert17/226e7adbd1be17f38f00986b2e8e1bc0

[15:25] <holyghost> talking to yourslef again ? :-)

[15:26] <holyghost> hello btw

[15:26] <dogbert17> hello holyghost

[15:28] <gfldex> dogbert17: s/L<pairs/L<Pairs/

[15:28] <dogbert17> gfldex: consider it fixed :)

[15:28] <dalek> doc: f577b11 | (Wenzel P. P. Peppmeyer)++ | / (2 files):

[15:28] <dalek> doc: move ToC to the left if viewport >110em

[15:28] <dalek> doc: depends on: https://github.com/perl6/Pod-To-HTML/commit/0bf23d33cdc9febba34ae2bbec7fb106b173df2b

[15:28] <dalek> doc: review: https://github.com/perl6/doc/commit/f577b1179c

[15:29] *** itaipu joined
[15:31] <dalek> doc: 99e2e37 | (Jan-Olof Hendig)++ | doc/Type/Capture.pod6:

[15:31] <dalek> doc: Added docs for Capture.pairs. gfldex++

[15:31] <dalek> doc: review: https://github.com/perl6/doc/commit/99e2e37536

[15:34] *** ssotka joined
[15:34] *** domidumont joined
[15:37] *** cdg_ joined
[15:38] *** cdg left
[15:39] <dalek> doc: d92efe7 | (Wenzel P. P. Peppmeyer)++ | / (2 files):

[15:39] <dalek> doc: with a leftist ToC send ghosty Camelia into hiding

[15:39] <dalek> doc: review: https://github.com/perl6/doc/commit/d92efe77dc

[15:45] *** stmuk_ joined
[15:45] *** cdg_ left
[15:46] *** cdg joined
[15:47] <dalek> doc: ea4191a | (Steve Mynott)++ | bin/p6doc:

[15:47] <dalek> doc: revert to working old-locate-curli-module for time being

[15:47] <dalek> doc: review: https://github.com/perl6/doc/commit/ea4191a2e4

[15:48] *** stmuk_ is now known as stmuk

[15:48] <dalek> doc: bdf6756 | (Wenzel P. P. Peppmeyer)++ | / (2 files):

[15:48] <dalek> doc: The internet seams to agree that leftist ToCs don't need blue links. All

[15:48] <dalek> doc: of them are links, so the extra distinction provides no value. It feels

[15:48] <dalek> doc: less nervous to me and I hope to anyone else too.

[15:48] <dalek> doc: review: https://github.com/perl6/doc/commit/bdf6756653

[15:48] <stmuk> .tell ugexe https://github.com/perl6/doc/commit/ea4191a2e4 maybe of interest

[15:48] <yoleaux> stmuk: I'll pass your message to ugexe.

[15:51] *** loren joined
[15:54] <arnsholt> So, Smalltalk has made an interesting trade-off in how it allows user-defined operators: all operators have the same precedence and are evaluated from left to right

[15:56] <harmil> It just occurred to me as I was transcribing some formulas into p6 that, similar to "token" in grammars, "formula" would be a wonderful alias for "sub" if it enforced "is copy" as the default for all parameters. The intuitive semantics of a formula are that they will modify their parameters, but without side-effects.

[15:56] <ugexe> stmuk: ah i see why it broke. but your solution seem just as good though. (fwiw the fix is something like s/{$module}<pm><file>/{$module}.value<file>/)

[15:56] <yoleaux> 15:48Z <stmuk> ugexe: https://github.com/perl6/doc/commit/ea4191a2e4 maybe of interest

[15:57] *** travis-ci joined
[15:57] <travis-ci> Doc build failed. Steve Mynott 'revert to working old-locate-curli-module for time being'

[15:57] <travis-ci> https://travis-ci.org/perl6/doc/builds/143366707 https://github.com/perl6/doc/compare/d92efe77dc0e...ea4191a2e43b

[15:57] *** travis-ci left
[15:57] <harmil> Of course, once we have Lispish macros, that would be something we could write in the language directly.

[15:57] <stmuk> travis-ci sssh

[15:58] *** rgrinberg left
[15:58] <stmuk> ugexe: I'm not sure my solution handles multiple versions of the same module

[15:58] <BrokenRobot> trailing whitespace strikes again :P

[15:58] *** darutoko joined
[15:59] <stmuk> ffs

[15:59] <[Coke]> make test is pretty quick. Running it before pushing is a good plan.

[15:59] <[Coke]> (even if we remove the trailing ws test.)

[16:02] *** canopus joined
[16:02] <ugexe> stmuk: ah, yeah it will give you whatever it finds first (but thats all mine did too). Just needs an additional :$version to pass as :$version-matcher to CU::DS I believe

[16:02] *** domidumont left
[16:02] <dalek> doc: ff9cfd0 | (Jan-Olof Hendig)++ | doc/Type/Capture.pod6:

[16:02] <dalek> doc: Added code examples to methods list and elems

[16:02] <dalek> doc: review: https://github.com/perl6/doc/commit/ff9cfd041d

[16:03] *** setty1 joined
[16:04] *** zakharyas left
[16:05] <dalek> doc: 4109e90 | (Steve Mynott)++ | bin/p6doc:

[16:05] <dalek> doc: delete one space to shut up pointless test

[16:05] <dalek> doc: review: https://github.com/perl6/doc/commit/4109e909c0

[16:06] <stmuk> passive agressive moi? :P

[16:06] <BrokenRobot> It's not aggressive if the statement is true :P

[16:07] *** itaipu left
[16:13] *** travis-ci joined
[16:14] <travis-ci> Doc build failed. Jan-Olof Hendig 'Added code examples to methods list and elems'

[16:14] <travis-ci> https://travis-ci.org/perl6/doc/builds/143370637 https://github.com/perl6/doc/compare/bdf67566537d...ff9cfd041ddc

[16:14] *** travis-ci left
[16:14] *** Herby_ joined
[16:14] <Herby_> o/

[16:14] <BrokenRobot> \o

[16:16] *** kurahaupo joined
[16:16] *** zacts_pi left
[16:18] <pmichaud> good morning #perl6

[16:18] <Herby_> \o/

[16:18] <BrokenRobot> It's morning already!? :P

[16:19] <tbrowder> mornin' pmichaud

[16:19] <tbrowder> ref table pod handling: next set of changes, builds okay, table tests pass okay, please see PR https://github.com/rakudo/rakudo/pull/817

[16:19] <pmichaud> It will stop being morning in about 41 minutes.

[16:20] * kurahaupo is never quite sure whether the period between midnight and dawn counts as night or morning.

[16:21] <BrokenRobot> It depends on how long ago you woke up :)

[16:21] * kurahaupo suspects the answer is "yes"

[16:21] <kurahaupo> BrokenRobot: about 18 hours

[16:22] <BrokenRobot> Then it's night :)

[16:22] <kurahaupo> and when I wake up again in about 3h45 (when it'll still be dark)?

[16:23] <BrokenRobot> It'll be morning :)

[16:27] *** domidumont joined
[16:30] *** loren left
[16:30] *** kurahaupo_ joined
[16:31] * holyghost is a bit drunk

[16:31] <holyghost> I really need to stop the beer-sugar-coding

[16:31] <BrokenRobot> Ah, you remind me of a yonger version of me :)

[16:32] <holyghost> well, I really need to learn to buy a lemonade instead of beer

[16:32] <BrokenRobot> Meh, coffee is where it's at ;)

[16:32] <holyghost> right

[16:33] <holyghost> coffee is good indeed

[16:33] <holyghost> some dude must have changed those beans somehow

[16:33] <holyghost> too good to be true

[16:34] *** kurahaupo left
[16:35] *** sortiz joined
[16:36] *** yqt joined
[16:37] <BrokenRobot> Well... conclusive proof that fewer cores, less RAM, and non-SSD drives are better: https://gist.github.com/zoffixznet/cb36f42378a0d4b776197a79ff7c71aa

[16:38] <gfldex> BrokenRobot: setting the number of parallel jobs to the number of DDR channels may provide the best result

[16:40] <BrokenRobot> And it looks like S10-packages/precompilation.t is the the bottle neck test. The rest of the spectest finishes before the last 5 tests in that file finish

[16:41] <ugexe> probably lock files then

[16:41] <BrokenRobot> And by "bottle neck" I mean like 6-10 seconds :)

[16:47] *** rgrinberg joined
[16:58] *** kurahaupo_ left
[16:59] *** zacts joined
[17:06] *** hankache joined
[17:09] <BrokenRobot> .ask tbrowder can this be closed? You can modify the roast checkout in t/spec to make the PR for tests toohttps://rt.perl.org/Ticket/Display.html?id=128519

[17:09] <yoleaux> BrokenRobot: I'll pass your message to tbrowder.

[17:11] *** iH2O joined
[17:13] *** lostinfog joined
[17:16] *** firstdayonthejob joined
[17:24] <BrokenRobot> .ask DrForr can this be closed? It's mentioned to be a dupe of a recently-fixed ticket. I tried to test myself, but Linenoise is failing. https://rt.perl.org/Ticket/Display.html?id=128371

[17:24] <yoleaux> BrokenRobot: I'll pass your message to DrForr.

[17:27] *** holyghost left
[17:27] *** acrussell joined
[17:28] *** holyghost joined
[17:31] *** neilhwatson left
[17:31] *** rgrinberg left
[17:32] *** neilhwatson joined
[17:36] *** rgrinberg joined
[17:40] *** iH2O left
[17:46] *** yqt left
[17:48] <holyghost> BrokenRobot, the coffee helped, I feel better now

[17:48] <BrokenRobot> Great.

[17:50] *** girafe joined
[17:51] <nemo> slt

[17:51] *** hankache left
[17:52] *** acrussell left
[17:55] *** yqt joined
[17:55] * [Coke] drinks a Coke Zero

[17:55] <timotimo> don't dereference the zero, coke

[17:56] *** xtreak joined
[17:56] <harmil> It's okay, it generates a lazy exception. *burp*

[17:56] <xtreak> What is the use of adverb syntax in hashes and other places?

[17:57] <timotimo> it's shorter than using =>

[17:58] <BrokenRobot>  :$foo is way shorter than foo => $foo ;)

[17:59] <psch> 'adverb syntax' generally is a shorthand for Pair construction, which automatically slips into argument lists

[17:59] <psch> ...as a more fundamental explanation

[17:59] <xtreak> Sorry was asking about :kv, :delete on hashes. I don't know that colonpair syntax was adverb also.

[18:00] <timotimo> oh

[18:00] <gfldex> m: sub f(:$foo){ given :$foo { when .value > 10 { say 'BIG' }; default { say 'SMALL' } } }; f(:foo(11));

[18:00] <camelia> rakudo-moar 94a31c: OUTPUT«BIG␤»

[18:01] <psch> i think those are parser special cases..?

[18:01] <geekosaur> yes, :delete is short for :delete(True) (which means you can use a variable there!)

[18:01] <geekosaur> there's something where it becomes a parameter to the "closest" method call, remembering that things like subscripts are postcircumfix methods

[18:02] <psch> right, that's the specific 'adverb' case for colonpairs

[18:02] <psch> i mean, for postcircumfix

[18:02] *** espadrine joined
[18:05] <holyghost> gfldex, looks like CLOS

[18:06] <holyghost> Common Lisp Object System

[18:10] *** zacts left
[18:11] <gfldex> m: my $bar = 10; my %h = :$bar; dd %h

[18:11] <camelia> rakudo-moar 94a31c: OUTPUT«Hash %h = {:bar(10)}␤»

[18:12] *** yqt left
[18:13] <xtreak> http://ircbrowse.net/browse/haskell looks interesting with searchable logs and code examples

[18:15] <dalek> doc: 9567745 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Pair.pod6:

[18:15] <dalek> doc: be explicit about the power of :$bar

[18:15] <dalek> doc: review: https://github.com/perl6/doc/commit/9567745c00

[18:16] *** espadrine left
[18:20] <dalek> doc: d1fee79 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Pair.pod6:

[18:20] <dalek> doc: hide index entries and add :$

[18:20] <dalek> doc: review: https://github.com/perl6/doc/commit/d1fee7941d

[18:21] *** domidumont left
[18:23] <tbrowder> BrokenRobot: yoleaux: You may close RT #128519.

[18:23] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128519

[18:23] <yoleaux> 17:09Z <BrokenRobot> tbrowder: can this be closed? You can modify the roast checkout in t/spec to make the PR for tests toohttps://rt.perl.org/Ticket/Display.html?id=128519

[18:26] <BrokenRobot> Closed. Thanks.

[18:26] *** itaipu joined
[18:29] <dalek> doc: fe89ae2 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Signature.pod6:

[18:29] <dalek> doc: link from /type/Signature to /type/Pair

[18:29] <dalek> doc: review: https://github.com/perl6/doc/commit/fe89ae2b16

[18:30] *** pochi joined
[18:30] *** cdg left
[18:32] *** rgrinberg left
[18:32] *** rgrinberg joined
[18:34] *** noganex joined
[18:36] *** sno joined
[18:39] *** dupek joined
[18:40] *** dupek is now known as sucker

[18:40] <sucker> hello

[18:40] <[Coke]> hallo

[18:42] *** TEttinger joined
[18:48] *** itaipu left
[18:50] <gfldex> m: my package P:ver<1.2.3>:auth<me> {}; say [ P.^ver(), P.^auth ];

[18:50] <camelia> rakudo-moar 94a31c: OUTPUT«Method 'ver' not found for invocant of class 'Perl6::Metamodel::PackageHOW'␤  in block <unit> at <tmp> line 1␤␤»

[18:50] <gfldex> m: my package P:ver<1.2.3>:auth<me> {};

[18:50] <camelia> rakudo-moar 94a31c: ( no output )

[18:50] <gfldex> m: my class C:ver<1.2.3>:auth<me> {}; say [ C.^ver(), C.^auth ];

[18:50] <camelia> rakudo-moar 94a31c: OUTPUT«[v1.2.3 me]␤»

[18:50] <gfldex> is there a ticked for that?

[18:53] *** cdg joined
[18:54] *** cdg left
[18:54] *** FROGGS joined
[18:54] *** cdg joined
[18:55] <gfldex> m: my module M:ver<1.2.3>:auth<me> {}; say [ M.^ver(), M.^auth ];

[18:55] <camelia> rakudo-moar 94a31c: OUTPUT«[v1.2.3 me]␤»

[18:55] *** zacts joined
[18:57] <BrokenRobot> m: my module P:ver<1.2.3>:auth<me> {}; say [ P.^ver(), P.^auth ];

[18:57] <camelia> rakudo-moar 94a31c: OUTPUT«[v1.2.3 me]␤»

[18:59] *** cdg left
[19:00] *** huggable joined
[19:00] <BrokenRobot> Seems an easy 1-line fix.

[19:01] <gfldex> BrokenRobot: please fix if you can, I already doced that. :)

[19:01] <BrokenRobot> Sure.

[19:02] <gfldex> also there is no spectest for $package.^ver|auth

[19:02] <gfldex> also for module, class is there tho

[19:04] *** pmurias joined
[19:04] *** pmurias left
[19:06] *** pmurias joined
[19:07] <pmurias> https://morepypy.blogspot.ca/2016/07/reverse-debugging-for-python.html - awesome pypy feature that hopefully we will steal someday

[19:07] *** labster joined
[19:08] *** itaipu joined
[19:11] *** xtreak left
[19:20] <dalek> doc: d1ed93b | skids++ | doc/Language/quoting.pod6:

[19:20] <dalek> doc: Document order of operations in qqw and qqww

[19:20] <dalek> doc: review: https://github.com/perl6/doc/commit/d1ed93b407

[19:24] <[Coke]> .seen colomon

[19:24] <yoleaux> I saw colomon 10 Jun 2016 01:44Z in #perl6: <colomon> and the optimizations are built on the proxy level

[19:24] <colomon> o/

[19:24] <moritz> what a prompt reply after three weeks of silence! \o/ colomon 

[19:25] <[Coke]> colomon: hey, can I kill this: https://github.com/rakudo/rakudo/wiki/NG-issues

[19:25] <[Coke]> Looks like it might be old. :)

[19:25] <colomon> moritz: irc is almost always open on my MBP

[19:26] <colomon> [Coke]: it’s a bit old, perhaps.  ;)

[19:26] *** addison joined
[19:26] <colomon> if it were a kid, it would be ready for kindergarten

[19:26] *** wamba joined
[19:26] <[Coke]> killing.

[19:26] <colomon> [Coke]++

[19:27] <colomon> moritz: though I have been insanely busy, alas.

[19:28] <BrokenRobot> m: my package P:ver<1.2.3>:auth<me> {}; say [ P.^ver(), P.^auth ];

[19:28] <camelia> rakudo-moar 94a31c: OUTPUT«Method 'ver' not found for invocant of class 'Perl6::Metamodel::PackageHOW'␤  in block <unit> at <tmp> line 1␤␤»

[19:28] <BrokenRobot> RT: https://rt.perl.org/Ticket/Display.html?id=128579

[19:28] <BrokenRobot> PR: https://github.com/rakudo/rakudo/pull/818

[19:28] <BrokenRobot> Tests: https://github.com/perl6/roast/pull/134y

[19:29] *** maybekoo2 joined
[19:30] *** darutoko left
[19:32] <BrokenRobot> I meant https://github.com/perl6/roast/pull/134

[19:33] <moritz> looks legit. Merged

[19:33] <moritz> at least the rakudo one; you can merge the roast one yourself, I think

[19:33] <BrokenRobot> \o/ moritz++

[19:33] <moritz> and reap the karma

[19:33] <moritz> BrokenRobot++

[19:35] * moritz experiments with cron-apt for unattended security upgrades

[19:35] <moritz> if it works fine, I'll do that on the *.p6c.org hosts

[19:35] <dalek> doc: 44a60a7 | (Jan-Olof Hendig)++ | doc/Type/Capture.pod6:

[19:35] <dalek> doc: Added docs for Capture.antipairs

[19:35] <dalek> doc: review: https://github.com/perl6/doc/commit/44a60a780b

[19:40] *** itaipu left
[19:42] *** domidumont joined
[19:43] *** gcole_ joined
[19:45] <dalek> doc: 845d9dd | (Wenzel P. P. Peppmeyer)++ | doc/Language/typesystem.pod6:

[19:45] <dalek> doc: doc .^ver and .^auth for class, role, grammar, module and package

[19:45] <dalek> doc: review: https://github.com/perl6/doc/commit/845d9dde0e

[19:48] *** yqt joined
[19:50] *** holyghost left
[19:51] *** ssotka left
[19:54] <dogbert17> m: my $capture = \(2, 3, apples => 2); say $capture.Str; # hmm, is this correct behavior?

[19:54] <camelia> rakudo-moar ae36a1: OUTPUT«This representation (VMIter) cannot unbox to a native string (for type BOOTIter)␤  in block <unit> at <tmp> line 1␤␤»

[19:54] <[Coke]> Based on the discussion on RT #128520, started updating https://github.com/rakudo/rakudo/wiki with notes about RT.

[19:54] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128520

[19:55] <[Coke]> Please feel free to add placeholders if there's a topic you want covered, or feel free to ping me.

[19:55] <[Coke]> I just did some cleanup, will do more, and will plan to add more content.

[19:55] <moritz> dogbert17: looks like a bug to me

[19:55] <gfldex> m: my $capture = (2, 3, apples => 2).Capture; say $capture.perl;

[19:55] <camelia> rakudo-moar ae36a1: OUTPUT«\(2, 3, :apples(2))␤»

[19:56] <gfldex> dogbert17: the .Str problem is a bug

[19:56] <dogbert17> uh oh

[19:57] <psch> not really sure what .Str means on a Capture though

[19:57] <gfldex> .perl basicly

[19:57] <psch> i mean, yeah, VMIter throwage is definitely LTA

[19:59] <gfldex> Capture is the data structure that holds parameter lists (among other things), turning that into a Str sounds like introspection to me. So forwarding to .perl makes sense.

[19:59] <psch> m: my %h = :1a, :2b; say %h.Str

[19:59] <camelia> rakudo-moar ae36a1: OUTPUT«a    1␤b     2␤»

[20:00] <psch> i'm not convinced, but i don't have a better idea

[20:00] <dogbert17> at least .gist calls .perl while .Str has a different implementation (if I read the code correctly)

[20:01] <gfldex> dogbert17: i can't find any RT for that. Please rakudobug.

[20:03] <dogbert17> gfldex: I will try, third time might be a charm (all my previous mails have failed to arrive for some reason)

[20:03] <gfldex> dogbert17: if it fails again, feel free to poke me

[20:05] <psch> $ ./perl6-m -e'(1, 2, :2c).Capture.Str.say'

[20:05] <psch> 1 2 c   2

[20:05] <psch> that's what the current code intented to afaict

[20:05] <psch> basically, call .Str on all arguments in the Capture and concat with spaces

[20:06] *** addison left
[20:06] *** domidumont left
[20:07] <[Coke]> any point in saving this: https://github.com/rakudo/rakudo/wiki/Real-World-Usage ?

[20:07] <gfldex> m: my $l = (1,2, :2c); $l.Str.put;

[20:07] <camelia> rakudo-moar ae36a1: OUTPUT«1 2 c        2␤»

[20:07] <perlpilot> [Coke]: I don't think so.

[20:07] <gfldex> m: my $l = (1,2, :2c); $l.perl.put;

[20:07] <camelia> rakudo-moar ae36a1: OUTPUT«$(1, 2, :c(2))␤»

[20:07] <dogbert17> gfldex: will do

[20:08] <psch> m: my $l = \(1,2, :2c); $l.perl.put;

[20:08] <camelia> rakudo-moar ae36a1: OUTPUT«\(1, 2, :c(2))␤»

[20:08] <[Coke]> gone.

[20:08] <gfldex> psch: i take my introspection expection back. A listy thing should behause like List.

[20:08] <psch> the Capture.perl is really about \() - because .perl wants to try and get something .EVAL-able

[20:09] <psch> gfldex: well, a Capture is, depending on contained arguments, listy or hashy or both

[20:09] <psch> that's the one thing i'd be a bit hesitant about, fwiw

[20:09] <psch> Hash.Str adds \n per kv

[20:09] *** pmurias left
[20:09] <psch> m: say %(:1a, :2b, :3c).Str

[20:09] <camelia> rakudo-moar ae36a1: OUTPUT«a    1␤b     2␤c     3␤»

[20:10] <psch> m: say <a b c>.Str 

[20:10] <camelia> rakudo-moar ae36a1: OUTPUT«a b c␤»

[20:10] <gfldex> m: my %h = <a b c> Z=> 1,2,3; %h.Str.say;

[20:10] <camelia> rakudo-moar ae36a1: OUTPUT«a    1␤b     2␤c     3␤»

[20:10] <psch> but mixing that in Capture.Str would probably be weird

[20:12] <gfldex> m: my %h = 1,2,3 Z=> «a "\n" c»; %h.Str.say; dd %h;

[20:12] <camelia> rakudo-moar ae36a1: OUTPUT«1    a␤2     ␤␤3     c␤Hash %h = {"1" => "a", "2" => "\n", "3" => "c"}␤»

[20:13] <gfldex> blindly calling .Str seams not to make much sense in any case.

[20:14] <psch> well, it's just about "make it fit into a Str"

[20:14] <psch> it's explicitely not intended to carry programmatically semantic meaning

[20:15] <psch> ...i'm probably not really intended to talk complicated anymore :P

[20:15] <psch> anyway, i'll push the Capture.Str fix as-is

[20:15] <psch> can still be ticketed if we want anything more useful there

[20:16] *** efdetonator joined
[20:17] *** efdetonator left
[20:19] <hoelzro> Zoffix: are you still seeing Linenoise build failures? it works for me on both zef and panda

[20:26] <[Coke]> m: (:A<a> :B<b>) # just LTA, or should this do *something* ?

[20:26] <camelia> rakudo-moar ae36a1: OUTPUT«===SORRY!===␤Unknown QAST node type NQPMu␤»

[20:26] * psch dimly remembers something about colonpairs not needing commas

[20:26] <psch> i don't know if that got tossed though

[20:28] <AlexDaniel> [Coke]: how can I change my default queue?

[20:28] *** neilhwatson left
[20:29] *** rindolf left
[20:30] <FROGGS> m: say (:A<a> :B<b>)

[20:30] <camelia> rakudo-moar ae36a1: OUTPUT«===SORRY!===␤Unknown QAST node type NQPMu␤»

[20:31] <[Coke]> AlexDaniel: https://rt.perl.org/Prefs/Other.html - first choice

[20:32] <AlexDaniel> [Coke]: ah shit, I am blind

[20:32] <[Coke]> tbrowder: See that page for how it displays your username.

[20:33] *** itaipu joined
[20:34] <[Coke]> ah, as am I, as I now see where "new ticket in" is. :)

[20:34] <[Coke]> for the longest time, you *couldn't* new ticket that way!

[20:34] *** kaare_ left
[20:36] *** rgrinberg left
[20:39] *** rindolf joined
[20:39] *** gcole_ left
[20:39] *** djbkd joined
[20:42] *** addison joined
[20:43] *** djbkd left
[20:45] <AlexDaniel> [Coke]: can't edit my comment, but don't want to write another one, so I'll just mention it here: “I believe as is, no, it's plain text.” – nope, see this for example: https://rt.perl.org/Ticket/Display.html?id=128531

[20:45] <AlexDaniel> [Coke]: it has colors, headings, links and so on

[20:46] *** _dolmen_ joined
[20:46] <dalek> doc: 2196187 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Mu.pod6:

[20:46] <dalek> doc: doc Mu.return and Mu.return-rw

[20:46] <dalek> doc: review: https://github.com/perl6/doc/commit/2196187eef

[20:46] <[Coke]> AlexDaniel: that's a text/html attachment.

[20:46] <[Coke]> sure, you can email in attachments.

[20:46] <AlexDaniel> [Coke]: oh, indeed! Proving again that I am blind

[20:46] <[Coke]> you can't edit them in the web ui

[20:47] <[Coke]> no worries.

[20:47] *** addison left
[20:47] <[Coke]> my comment was just about the web text inputs, but I wasn't clear.

[20:47] <AlexDaniel> [Coke]: hm, but you can still use > for quotes

[20:48] <[Coke]> probably from the email heritage.

[20:50] <timotimo> psch: we still have some bugs when you use colon pairs without commas, like you'd get a 1 instead of True

[20:53] <pmichaud> Good afternoon, #perl6

[20:53] <moritz> \o pmichaud 

[20:54] <lizmat> pmichaud o/

[20:55] <dalek> doc: f49f74e | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod6:

[20:55] <dalek> doc: add ... and … to index

[20:55] <dalek> doc: review: https://github.com/perl6/doc/commit/f49f74eff3

[20:55] <dalek> doc: b5e4d86 | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod6:

[20:55] <dalek> doc: add lazy list reference for … to index

[20:55] <dalek> doc: review: https://github.com/perl6/doc/commit/b5e4d863d4

[20:55] <dalek> doc: da63e22 | (Wenzel P. P. Peppmeyer)++ | doc/Language/control.pod6:

[20:55] <dalek> doc: add lazy list index reference for gather and take

[20:55] <dalek> doc: review: https://github.com/perl6/doc/commit/da63e22abd

[20:56] <pmichaud> Only here for a short bit today... workers behind my house have apparently servered my landline Internet connection and repairs can't be made until Monday at the earliest.

[20:56] <pmichaud> So I'm stuck with my mobile wifi hotspot.

[20:56] *** itaipu left
[20:56] <[Coke]> zoinks.

[20:58] <[Coke]> pmichaud: https://rt.perl.org/Ticket/Display.html?id=128423 if you haven't seen that. (https issue on rakudo.org)

[20:58] <moritz> pmichaud: that sucks

[20:58] <[Coke]> let us know if we pass the work to someone. ISTR you had seen it

[20:58] <lizmat> pmichaud: also, core devs generally hang out on #perl6-dev nowadays  :-)

[20:59] <pmichaud> [Coke]: I've seen it.  I've tried to get the certificate fixed before but I'm not quite sure how to do that.

[21:00] <pmichaud> Also, I've been told (by my cpanel instance) that I've got to do a big migration to a new server anyway for all of my domains on that host, so I'm likely to resolve the certificate issue as part of that work.

[21:01] <pmichaud> I still know that I need to upgrade the WordPress instance, and will do that this weekend if the internet connectivity doesn't end up being too onerous.

[21:01] *** skids left
[21:02] *** addison joined
[21:03] <AlexDaniel> m: ++

[21:03] <camelia> rakudo-moar 574519: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Prefix ++ requires an argument, but no valid term found␤at <tmp>:1␤------> 3++7⏏5<EOL>␤    expecting any of:␤        prefix␤»

[21:03] <AlexDaniel> expecting any of: prefix

[21:03] <AlexDaniel> huggable: dunno

[21:03] <huggable> AlexDaniel, ¯\_(ツ)_/¯

[21:05] <moritz> pmichaud: since hack.p6c.org occasionally freezes, there's now an irc.p6c.org which should be more stable, and which you can use for your IRC session

[21:05] <moritz> pmichaud: same password and ssh key as hack

[21:05] <pmichaud> good to know -- switching.

[21:05] <AlexDaniel> m: say Any + 1

[21:05] <camelia> rakudo-moar 574519: OUTPUT«Use of uninitialized value of type Any in numeric context  in block <unit> at <tmp> line 1␤1␤»

[21:06] <AlexDaniel> m: my $x = Any; say $x + 1

[21:06] <camelia> rakudo-moar 574519: OUTPUT«Use of uninitialized value of type Any in numeric context  in block <unit> at <tmp> line 1␤1␤»

[21:06] <AlexDaniel> m: my $x = Any; say $x++

[21:06] <camelia> rakudo-moar 574519: OUTPUT«0␤»

[21:06] <AlexDaniel> m: my $x = Any; $x *= 5; say $x

[21:06] <camelia> rakudo-moar 574519: OUTPUT«5␤»

[21:07] <AlexDaniel> OK, but why?

[21:08] <AlexDaniel> += acts like if it was 0, but *= acts like if it is 1

[21:08] <psch> m: say [+]; say [*]

[21:08] <camelia> rakudo-moar 574519: OUTPUT«0␤1␤»

[21:08] <pmichaud> AlexDaniel: S03:435 has a partial answer

[21:08] <synopsebot6> Link: http://design.perl6.org/S03.html#435_has_a_partial_answer

[21:09] <dalek> doc: 03c49a9 | (Wenzel P. P. Peppmeyer)++ | doc/Language/list.pod6:

[21:09] <dalek> doc: doc lazy lists

[21:09] <dalek> doc: review: https://github.com/perl6/doc/commit/03c49a92f6

[21:09] <pmichaud> (synopsebot6 gives a weird anchor link there.)

[21:09] <moritz> S03:435

[21:09] <synopsebot6> Link: http://design.perl6.org/S03.html#line_435

[21:09] <moritz> better

[21:09] <pmichaud> I'm curious why synopsebot6 chose to add my text though 

[21:09] *** FROGGS left
[21:09] <psch> S03:it adds everything unfortunately

[21:09] <synopsebot6> Link: http://design.perl6.org/S03.html#it_adds_everything_unfortunately

[21:10] <pmichaud> Also S03:4151

[21:10] <synopsebot6> Link: http://design.perl6.org/S03.html#line_4151

[21:10] <pmichaud> which really answers the question :)

[21:10] <moritz> pmichaud: it's an instance of producing heading anchors, like S02:Literals

[21:10] <synopsebot6> Link: http://design.perl6.org/S02.html#Literals

[21:10] <moritz> just overeager

[21:10] <moritz> time for sleep here

[21:10] <psch> well, it's hard to guess well there

[21:10] <psch> either you ask for _ from the user or you check what anchors exist on the side

[21:10] <psch> *site

[21:10] <pmichaud> moritz: okay, that makes more sense.  Perhaps it could recognize starting digits as meaning a line number instead of anchor target

[21:11] <moritz> sounds like a good heuristic

[21:11] <pmichaud> since I don't think we have anchor targets that start with digits.

[21:11] *** xtreak joined
[21:13] *** sucker left
[21:14] *** itaipu joined
[21:14] *** setty1 left
[21:14] <pmichaud> [Coke]:  a comment on RT #128520 (RT versus other ticketing systems) -- I disagree with the remark that lack of progress on old tickets has little to do with the ticketing system used.  For a long period of time I found my frustration with working with RT to be a serious impediment to working on bug reports.

[21:14] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128520

[21:14] <pmichaud> to the point that I just didn't want to do them.

[21:15] <pmichaud> I expressed this to masak++ and others at one of our gatherings (YAPC::NA 2013, I think) as being a very real issue for me.

[21:16] <dalek> doc: e402f7b | (Wenzel P. P. Peppmeyer)++ | / (2 files):

[21:16] <dalek> doc: Shady Camelia is also getting in the way when the ToC is hidden. As we

[21:16] <dalek> doc: may scare nine year old girls away with a 9 foot wing span butterfly,

[21:16] <dalek> doc: shady Camelia has to go.

[21:16] <dalek> doc: review: https://github.com/perl6/doc/commit/e402f7b04a

[21:16] <Zoffix> A more recent example of that: http://irclog.perlgeek.de/perl6/2016-07-04#i_12781927

[21:17] <AlexDaniel> [Coke]: it seems like it is possible to turn on wysiwyg editor on RT

[21:18] <mspo> I'd like to explain gather take on a whatever to a nine y/o

[21:18] <mspo> see how it goes

[21:18] <pmichaud> my nine year olds would have no problem with it.

[21:18] <AlexDaniel> I feel a bit sad to see shady camelia go… :(

[21:19] <AlexDaniel> the decision to remove it is probably right though

[21:19] <pmichaud> can I see an example of shady camelia?

[21:20] <gfldex> pmichaud: see https://github.com/perl6/doc/issues/681

[21:20] <AlexDaniel> pmichaud: https://files.progarm.org/2016-07-09-002003_379x277_scrot.png

[21:20] <Zoffix> gfldex, FYI. It'd need to be removed from docs too: https://github.com/rakudo/rakudo/pull/818#issuecomment-231468771

[21:20] <psch> that looks really bad with the lines

[21:20] <AlexDaniel> yeah…

[21:21] <pmichaud> just make her smaller, I think.

[21:21] <mspo> pmichaud: my 3 y/o might

[21:22] <gfldex> Zoffix: on it

[21:22] *** travis-ci joined
[21:22] <travis-ci> Doc build errored. Wenzel P. P. Peppmeyer 'doc lazy lists'

[21:22] <travis-ci> https://travis-ci.org/perl6/doc/builds/143442335 https://github.com/perl6/doc/compare/da63e22abde9...03c49a92f677

[21:22] *** travis-ci left
[21:23] <pmichaud> anyway, I'm afk again to preserve mobile bandwidth.  

[21:23] *** travis-ci joined
[21:23] <travis-ci> Doc build errored. Wenzel P. P. Peppmeyer 'Shady Camelia is also getting in the way when the ToC is hidden. As we

[21:23] <travis-ci> https://travis-ci.org/perl6/doc/builds/143443847 https://github.com/perl6/doc/compare/03c49a92f677...e402f7b04abb

[21:23] *** travis-ci left
[21:23] <pmichaud> oh, wait, switching hosts first

[21:23] <AlexDaniel> what about this? https://files.progarm.org/2016-07-09-002325_882x439_scrot.png

[21:24] <dalek> doc: b42b053 | (Wenzel P. P. Peppmeyer)++ | doc/Language/typesystem.pod6:

[21:24] <dalek> doc: remove .^auth and .^ver from package as the PR to roast was rejected

[21:24] <dalek> doc: review: https://github.com/perl6/doc/commit/b42b053758

[21:25] <AlexDaniel> one camelia on top left is probably enough…

[21:26] *** rgrinberg joined
[21:26] <gfldex> the problem with combining zebra tables and background images could be solved tho

[21:26] <gfldex> but then the problem of black text on dark grey background would still be there

[21:27] *** pmichaud joined
[21:28] <pmichaud> AlexDaniel: I like the smaller Camelia much better (than the original, even)

[21:29] *** RabidGravy joined
[21:29] <pmichaud> really afk this time

[21:31] *** xtreak left
[21:31] *** travis-ci joined
[21:31] <travis-ci> Doc build errored. Wenzel P. P. Peppmeyer 'remove .^auth and .^ver from package as the PR to roast was rejected'

[21:31] <travis-ci> https://travis-ci.org/perl6/doc/builds/143445444 https://github.com/perl6/doc/compare/e402f7b04abb...b42b05375855

[21:31] *** travis-ci left
[21:32] *** Actualeyes left
[21:38] <AlexDaniel> gfldex: maybe we can try smaller camelia? What do you think?

[21:41] * grondilu wonders why nqp ops are faster than pure Perl 6 and thus why lizmat and others put so many of them in src/core

[21:42] <grondilu> I mean for instance why can't Perl 6's "if" be just as fast as nqp::if?

[21:42] *** freezerburnv joined
[21:43] <lizmat> grondilu: because if foo { } creates a scope, and nqp::if doesn't

[21:43] <psch> Perl 6 level if attaches to a Block, yeah

[21:43] <psch> which gives you e.g. the capacity for ENTER and LEAVE phasers

[21:44] <lizmat> also, a whole block of nqp::if counts as a single statement

[21:44] <psch> also scoping as lizmat says

[21:44] <lizmat> so error reporting sucks if something goes wrong in there

[21:44] <grondilu> ideally shouldn't the optimizer be able to downgrade a if statement to "whatever nqp::if" does if it's possible?

[21:44] <lizmat> hmmm... it appears that tbrowders last changes borked a lot of spectest files

[21:45] <lizmat> grondilu: ideally, yes

[21:45] <psch> grondilu: a sufficiently smart optimizer would, yes :)

[21:45] <grondilu> ok, so that means that in the long term it will.  I'm satisfied with that.

[21:45] <lizmat> indeed...

[21:46] <lizmat> but we need a faster rakudo *now*

[21:46] <lizmat> :-)

[21:46] <grondilu> I'm patient, but I was worrying that the strategy to improve performance was just to rewrite everything in nqp :/

[21:46] <psch> it's an intermediate strategy, and a very good for that

[21:46] <psch> lizmat++ 

[21:47] <psch> s/a /

[21:47] <timotimo> agreed

[21:47] *** Actualeyes joined
[21:48] <Zoffix> "Cannot invoke this object (REPR: P6opaque; NQPMu)"

[21:48] <timotimo> that's when you have misspelt something in nqp code

[21:48] <lizmat> yeah, checking now if that really was the commit

[21:50] <psch> m: use nqp; nqp::nosuchop()

[21:50] <camelia> rakudo-moar 58c262: OUTPUT«===SORRY!===␤No registered operation handler for 'nosuchop'␤»

[21:50] <psch> m: use nqp; foo()

[21:50] <camelia> rakudo-moar 58c262: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    foo used at line 1␤␤»

[21:50] <psch> nqp-m: foo()

[21:50] <camelia> nqp-moarvm: OUTPUT«Cannot invoke this object (REPR: Null; VMNull)␤   at <tmp>:1  (<ephemeral file>:<mainline>)␤ from gen/moar/stage2/NQPHLL.nqp:1505  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/NQPHLL.moarvm:eval)␤ from gen/moar/stage2/NQPHLL.nqp:1708  (/home/camelia/rakudo-m…»

[21:50] <tbrowder> [Coke] I will look later (for some reason I can't log in on my iPad

[21:52] <lizmat> tbrowder: I reverted your commit

[21:52] *** kurahaupo joined
[21:54] <psch> really non-obvious what in there might break something...

[21:54] *** itaipu left
[21:54] <tbrowder> okay, i don't see that yet--is there a problem or recommendation?

[21:54] *** zacts left
[21:55] <psch> tbrowder: i'd assume building with your patch and running spect

[21:55] <psch> tbrowder: then checking if anything breaks, then checking *why* it breaks

[21:56] <psch> well, that's my recommendation i suppose :)

[21:59] *** freezerburnv left
[22:01] *** rindolf left
[22:01] <lizmat> tbrowder: this is a stacktrace of the failure I saw: https://gist.github.com/lizmat/7bf37d24e9d4b2ad4f43603fb892c217

[22:01] <pochi> m: my Array[Numerix] $x

[22:01] <camelia> rakudo-moar 897c22: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while parameterizing Array␤at <tmp>:1␤Exception details:␤  5===SORRY!5=== Error while compiling ␤  Cannot invoke this object (REPR: Null; VMNull)␤  at :␤»

[22:02] <pochi> It would be nice if it told me it couldn't find the type Numerix

[22:03] <lizmat> pochi: please RT is by sending a bug report to [email@hidden.address]
[22:03] <lizmat> *it

[22:03] <pochi> ok

[22:03] <lizmat> pochi: thanks!

[22:04] <tbrowder> psch: I did do the table tests but no other, didn't think it would affect anything else.

[22:04] <psch> tbrowder: well, aparently you were wrong. :) lizmat mentioned affected tickets in the revert

[22:05] <lizmat> psch: affected *files*

[22:05] <psch> ...right

[22:05] * psch blames the time 

[22:05] <lizmat> tbrowder: please always do a full spectest :-)

[22:06] <lizmat> if you set TEST_JOBS=8 on an i7, it takes around 4 minutes nowadays

[22:08] *** Evan joined
[22:08] *** Evan is now known as Guest64213

[22:08] *** lostinfog left
[22:09] <Guest64213> what are the equivalent of perl 5's system(), $!, and $? in perl6?

[22:10] <timotimo> m: say $

[22:10] <camelia> rakudo-moar 897c22: OUTPUT«(Any)␤»

[22:10] <timotimo> sorry

[22:10] <timotimo> m: say $!

[22:10] <camelia> rakudo-moar 897c22: OUTPUT«Nil␤»

[22:10] <timotimo> m: say $?

[22:10] <camelia> rakudo-moar 897c22: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of $? variable; in Perl 6 please use $! for handling child errors also␤at <tmp>:1␤------> 3say $?7⏏5<EOL>␤»

[22:10] <psch> m: say $*EXECUTABLE

[22:10] <camelia> rakudo-moar 897c22: OUTPUT«"./rakudo-m-inst/bin/perl6-m".IO␤»

[22:11] <psch> $! is still around

[22:11] <timotimo> there's system, run, Proc::Async, and qx

[22:11] <Guest64213> ok, cool.

[22:11] <psch> m: try 2 / 0; say $!.perl

[22:11] <camelia> rakudo-moar f583f2: OUTPUT«Any␤»

[22:12] <timotimo> bad example :)

[22:12] <psch> eh, Rats

[22:12] <Guest64213> what is the best way to find documentation of built-in functions?

[22:12] <psch> m: try 2 div 0; say $!.perl

[22:12] <camelia> rakudo-moar f583f2: OUTPUT«X::Numeric::DivideByZero.new(using => "div", numerator => 2)␤»

[22:12] <Guest64213> I was looking at http://tablets.perl6.org/appendix-a-index.html

[22:12] <timotimo> oh, the tablets?

[22:12] <Guest64213> but it doesn't mention system

[22:12] <Zoffix> Guest64213, https://docs.perl6.org/

[22:12] <timotimo> i wonder how you found them

[22:12] <Zoffix> Guest64213, there's a page on suboruines list: https://docs.perl6.org/routine.html

[22:12] *** TakinOver joined
[22:12] <Guest64213> tablets are linked from http://perl6.org/documentation/

[22:12] <timotimo> oh

[22:12] * Zoffix generally just searches

[22:13] <timotimo> maybe the perl6 documentation ought to get a big button

[22:13] <Zoffix> And other stuff moved to ... I dunno, some "Historical" section?

[22:13] <Zoffix> Speculations listed 2nd after document is LTA. And that Periodic Table is probably outta date too, I recall. Isn't it?

[22:14] <psch> i skimmed it and didn't see anything wrong

[22:14] <timotimo> yeah, it's a bit outdated

[22:14] <psch> although precedence is probably underspecific in at least a few cases

[22:14] *** _dolmen_ left
[22:14] <psch> i'm thinking specifically of method invocation

[22:16] <Zoffix> m: my @a = ^10; say @@a[^3]

[22:16] <camelia> rakudo-moar f583f2: OUTPUT«(0 1 2)␤»

[22:16] <Zoffix> m: my @a = ^10; say @a[^3]

[22:16] <camelia> rakudo-moar f583f2: OUTPUT«(0 1 2)␤»

[22:16] <psch> m: my $x = 1; $x ,= 2; say $x.perl # uhh

[22:16] <camelia> rakudo-moar f583f2: OUTPUT«(my \List_81150664 = $(List_81150664, 2))␤»

[22:16] <Zoffix> What's "@@ slice context"?

[22:16] <timotimo> like LoL?

[22:16] <psch> oh, yeah, that's definitely gone

[22:16] *** RabidGravy left
[22:17] <psch> i think that was supposed to be non-flattening list coercion

[22:17] <Zoffix> Ah

[22:18] <Zoffix> m: my $x ::= 42; BEGIN say $x

[22:18] <camelia> rakudo-moar f583f2: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤"::=" not yet implemented. Sorry. ␤at <tmp>:1␤------> 3my $x ::= 427⏏5; BEGIN say $x␤»

[22:18] <psch> m: my $x = 1; $x [R,]= $x ,= 2; say $x 

[22:18] <camelia> rakudo-moar f583f2: OUTPUT«(\List_64149696 = (List_64149696 List_64149696))␤»

[22:18] *** Sgeo joined
[22:18] <psch> somehow that's terribly entertaining to me

[22:19] <Zoffix> :)

[22:20] *** _dolmen_ joined
[22:23] *** eugen left
[22:29] *** kurahaupo left
[22:35] *** jack_rabbit joined
[22:40] *** cdg joined
[22:42] *** gtodd joined
[22:48] *** djbkd joined
[22:53] <harmil> Closed that <$0> bug... man, I wish someone had told me earlier that plain $0 was the solution.

[22:58] *** grondilu left
[23:00] *** huggable left
[23:02] *** firstdayonthejob left
[23:10] <pochi> m: sub x(*@x) { say @x.perl }; x( [1,2,3], [4,5,6] )

[23:10] <camelia> rakudo-moar f583f2: OUTPUT«[1, 2, 3, 4, 5, 6]␤»

[23:11] <pochi> is there a slurpy signature that will give me this result: [ [1,2,3], [4,5,6] ]?

[23:12] <sortiz> m: sub x(**@x) { say @x.perl }; x( [1,2,3], [4,5,6] )

[23:12] <camelia> rakudo-moar f583f2: OUTPUT«[[1, 2, 3], [4, 5, 6]]␤»

[23:12] <pochi> oh, double star

[23:12] <pochi> does it have a name?

[23:14] <sortiz> I use "Non-flatten slurpy"

[23:16] *** yqt left
[23:17] *** killbill joined
[23:26] *** BenGoldberg joined
[23:26] *** kid51 left
[23:30] *** _dolmen_ left
[23:37] *** sortiz left
[23:37] *** Zoffix joined
[23:50] *** z3ndrag0n left
[23:50] <pochi> m: my Array[Int] @a; say @a[0]; @a[0] = Array[Int].new; say @a[0]; @a[0][0] = 4

[23:50] <camelia> rakudo-moar f583f2: OUTPUT«(Array[Int])␤[]␤»

[23:55] *** maybekoo2 left
