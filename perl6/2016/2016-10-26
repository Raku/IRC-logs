[00:01] *** geekosaur left
[00:02] *** geekosaur joined
[00:15] *** pierre_ joined
[00:23] *** geraud joined
[00:30] *** neuraload left
[00:30] *** cdg left
[00:40] *** inra joined
[00:42] <colomon> m: say 0.msb

[00:42] <camelia> rakudo-moar 4829f1: OUTPUT«Nil␤»

[00:46] *** k-man joined
[01:01] *** aborazmeh joined
[01:01] *** aborazmeh left
[01:01] *** aborazmeh joined
[01:03] *** Jesmaybe joined
[01:05] *** kurahaupo joined
[01:10] *** nadim left
[01:13] *** kurahaupo left
[01:17] *** Jesmaybe left
[01:17] *** Jesmaybe joined
[01:17] *** xfix_ left
[01:19] *** xfix joined
[01:23] *** notbenh_ joined
[01:23] *** isacloud joined
[01:23] *** avalenn_ joined
[01:24] *** w4and0er96 joined
[01:29] *** Ben_Goldberg joined
[01:29] *** BenGoldberg left
[01:29] *** Ben_Goldberg is now known as BenGoldberg

[01:32] *** zacts left
[01:33] *** avalenn_ left
[01:34] *** aborazmeh left
[01:34] *** avalenn joined
[01:34] *** pierre_ left
[01:34] *** inra left
[01:35] *** pierre_ joined
[01:39] *** Jesmaybe left
[01:39] *** FROGGS_ joined
[01:39] *** Jesmaybe joined
[01:40] *** avalenn left
[01:42] *** avalenn joined
[01:43] *** FROGGS left
[01:44] *** Jesmaybe left
[01:46] *** ilbot3 left
[01:48] *** ilbot3 joined
[01:59] *** cibs left
[02:01] *** cibs joined
[02:15] *** matiaslina joined
[02:31] *** Jesmaybe joined
[02:41] *** matiaslina left
[02:49] *** noganex joined
[02:51] *** akchli joined
[02:53] *** noganex_ left
[02:56] *** akchli left
[02:58] *** matiaslina joined
[03:01] *** Herby__ joined
[03:01] <Herby__> o/

[03:09] *** Herby__ left
[03:14] *** pierre_ left
[03:19] *** Jesmaybe left
[03:21] *** pierre_ joined
[03:24] *** Herby__ joined
[03:25] *** pierre_ left
[03:25] *** pierre_ joined
[03:29] *** aborazmeh joined
[03:29] *** aborazmeh left
[03:29] *** aborazmeh joined
[03:34] *** labster left
[03:41] *** imcsk8_PTO left
[03:41] *** imcsk8_P1O joined
[03:51] *** TEttinger left
[03:56] *** matiaslina left
[04:02] *** pierre_ left
[04:04] *** cyphase left
[04:04] *** flexibea` left
[04:07] *** khw left
[04:09] *** cyphase joined
[04:09] *** Herby__ left
[04:10] *** pierre_ joined
[04:11] *** aborazmeh left
[04:15] *** pierre_ left
[04:28] *** Cabanossi left
[04:31] *** zacts joined
[04:31] *** Cabanossi joined
[04:32] *** TEttinger joined
[04:32] *** canopus left
[04:38] *** nadim joined
[04:38] *** canopus joined
[04:40] *** BenGoldberg left
[04:41] *** skids left
[04:41] *** cognominal joined
[04:42] *** nadim left
[04:52] *** wamba joined
[05:07] *** pierre_ joined
[05:08] *** bjz joined
[05:16] *** bjz left
[05:28] *** bjz joined
[05:36] *** cog_ joined
[05:36] *** cognominal left
[05:45] *** wamba left
[05:50] *** RabidGravy joined
[06:07] *** bjz left
[06:08] *** e1 joined
[06:11] *** pierre_ left
[06:11] *** neuraload joined
[06:13] *** pierre_ joined
[06:22] *** neuraload left
[06:22] *** neuraload joined
[06:24] *** firstdayonthejob joined
[06:25] *** darutoko joined
[06:26] *** itaipu joined
[06:27] *** RabidGravy left
[06:32] *** firstdayonthejob left
[06:37] *** domidumont joined
[06:39] *** pierre_ left
[06:41] *** domidumont left
[06:42] *** domidumont joined
[06:44] *** amalia_ left
[06:44] *** pierre_ joined
[06:45] *** labster joined
[06:46] *** amalia_ joined
[06:55] *** pierre_ left
[06:57] *** pierre_ joined
[06:58] *** itaipu left
[06:59] *** ufobat joined
[07:05] *** wamba joined
[07:08] *** rurban joined
[07:11] *** cooper_ joined
[07:12] <FROGGS_> o/

[07:12] *** FROGGS_ is now known as FROGGS

[07:14] *** rindolf joined
[07:24] *** TheovdH joined
[07:30] *** bjz joined
[07:31] *** e1 left
[07:34] *** pdcawley joined
[07:38] *** wamba left
[07:55] *** pierre_ left
[07:57] *** pierre_ joined
[07:59] <andrzejku_> FROGGS: hey :)

[08:00] *** bjz left
[08:01] *** jonas2 joined
[08:04] *** g4 joined
[08:09] *** pdcawley left
[08:10] *** rindolf left
[08:11] *** cowens joined
[08:14] <TheovdH> Hi, if a grammar match fails is there a variable that holds the maximum position of the parsing process? 

[08:15] <cowens> The string "\x[09aa]\x[09cd]\x[09b0]" appears to be one character (I think it is the pr ligature in Bengali), the reason "\x[09aa]\x[09cd]\x[09b0]”.chars returns 2 is that “\x[09aa]\x[09cd]” and “\x[09b0]” are the graphemes, and the fact that the font shows প্র instead of প্ and র is just a font level ligature (like fi can become in some fonts), right?

[08:16] *** zakharyas joined
[08:16] *** dakkar joined
[08:16] <TheovdH> I did a lot of parsing and such a feature has always been very helpful

[08:18] *** pdcawley joined
[08:19] *** pdcawley left
[08:23] <FROGGS> TheovdH: rakudo does that internally, but .match does not do that... but we had several requests already

[08:23] <FROGGS> TheovdH: what I do in such a situation is to use .submatch instead

[08:24] *** pdcawley joined
[08:25] <FROGGS> m: dd "abc" ~~ /abd/

[08:25] <camelia> rakudo-moar 4829f1: OUTPUT«Nil␤»

[08:25] <FROGGS> m: dd "abc" ~~ /abd/; dd $/

[08:25] <camelia> rakudo-moar 4829f1: OUTPUT«Nil␤Nil $/ = Nil␤»

[08:25] <FROGGS> m: dd "abc".match(/abd/);

[08:25] <TheovdH> FROGGS: thanks. I didn't know about that. Its not in the index. I will see if I get it to work.

[08:25] <camelia> rakudo-moar 4829f1: OUTPUT«Nil␤»

[08:25] *** cibs left
[08:25] <FROGGS> m: dd "abc".submatch(/abd/);

[08:25] <camelia> rakudo-moar 4829f1: OUTPUT«No such method 'submatch' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[08:25] <TheovdH> right

[08:26] <FROGGS> m: grammar G { token TOP { a+ } }; say G.parse("aaaaaabbbbbb"); 

[08:26] <camelia> rakudo-moar 4829f1: OUTPUT«Nil␤»

[08:26] <FROGGS> m: grammar G { token TOP { a+ } }; say G.subparse("aaaaaabbbbbb"); 

[08:26] <camelia> rakudo-moar 4829f1: OUTPUT«｢aaaaaa｣␤»

[08:26] <FROGGS> ahh, subparse, not submatch

[08:26] *** rindolf joined
[08:27] *** cibs joined
[08:27] <FROGGS> m: grammar G { token TOP { a+ } }; dd G.parse("aaaaaabbbbbb"); 

[08:27] <camelia> rakudo-moar 4829f1: OUTPUT«Nil␤»

[08:27] <TheovdH> ok. thanks

[08:28] <FROGGS> sad that a failed .parse does not through, otherwise we could sneak the highwater mark in there

[08:29] <TheovdH> that would be ideal

[08:31] *** rurban left
[08:32] *** rurban joined
[08:41] *** girafe left
[08:45] *** zakharyas left
[08:48] *** zakharyas joined
[08:49] *** gregf_ joined
[08:58] *** pierre_ left
[08:59] <FROGGS> s/through/throw/

[09:02] *** bjz joined
[09:03] *** pierre_ joined
[09:08] *** remmie joined
[09:09] *** remmie left
[09:11] <jkramer> m: say [Z+] { foo => [1, 2, 3], bar => [2, 3, 4] }.values

[09:11] <camelia> rakudo-moar 4829f1: OUTPUT«(3 5 7)␤»

[09:11] <jkramer> m: say [Z+] { foo => [1, 2, 3], bar => [2, 3, 4] }.values

[09:11] <camelia> rakudo-moar 4829f1: OUTPUT«(3 5 7)␤»

[09:11] <jkramer> m: say [Z+] { foo => [1, 2, 3] }.values

[09:11] <camelia> rakudo-moar 4829f1: OUTPUT«(6)␤»

[09:11] <jkramer> Is there a way to make this work in the edge case where there's only one pair in the hash?

[09:13] <FROGGS> m: say [Z+] { foo => [1, 2, 3], }.values

[09:13] <camelia> rakudo-moar 4829f1: OUTPUT«(6)␤»

[09:14] *** cgfbee joined
[09:15] <FROGGS> no idea

[09:18] <moritz> m: say [Z+] { foo => [1, 2, 3] }.values, [0 xx *]

[09:18] <camelia> rakudo-moar 4829f1: OUTPUT«(3)␤»

[09:27] *** Averna joined
[09:29] *** eliasr joined
[09:32] <jkramer> Hmm, not exactly what I was hoping for, but it'll do :)

[09:32] <jkramer> Thanks

[09:40] *** telex joined
[09:45] *** labster left
[09:47] *** aborazmeh joined
[09:47] *** aborazmeh left
[09:47] *** aborazmeh joined
[09:49] <dalek> doc: b073a44 | (Vynce Montgomery)++ | doc/Language/about.pod6:

[09:49] <dalek> doc: fix typo in doc about how to fix typo in doc, doc

[09:49] <dalek> doc: 

[09:49] <dalek> doc: the first example "=head2" block was spelled as "d2" instead of "=head2" which probably did actually blow some minds... it at least caused a misfire in mine.

[09:49] <dalek> doc: review: https://github.com/perl6/doc/commit/b073a44fd3

[09:49] <dalek> doc: 2c41617 | Altai-man++ | doc/Language/about.pod6:

[09:49] <dalek> doc: Merge pull request #987 from VynceMontgomery/patch-1

[09:49] <dalek> doc: 

[09:49] <dalek> doc: fix typo in doc about how to fix typo in doc, doc

[09:49] <dalek> doc: review: https://github.com/perl6/doc/commit/2c41617068

[09:57] *** ocbtec joined
[09:57] *** ocbtec left
[09:57] *** zakharyas left
[09:58] *** ocbtec joined
[09:58] <dalek> doc/Altai-man-patch-1: fbed1d3 | Altai-man++ | doc/Type/Cool.pod6:

[09:58] <dalek> doc/Altai-man-patch-1: Fix of the example code

[09:58] <dalek> doc/Altai-man-patch-1: 

[09:58] <dalek> doc/Altai-man-patch-1: The example was obviously corrupted with redundand whitespace cleanup commit.

[09:58] <dalek> doc/Altai-man-patch-1: VynceMontgomery++

[09:58] <dalek> doc/Altai-man-patch-1: review: https://github.com/perl6/doc/commit/fbed1d37b9

[09:59] *** Averna left
[10:00] <dalek> doc: 5fccce4 | (Vynce Montgomery)++ | doc/Language/classtut.pod6:

[10:00] <dalek> doc: minor mistake fix

[10:00] <dalek> doc: 

[10:00] <dalek> doc: This method was referred to as the second method, which was confusing since the method before it was also referred to as the second method. Removed the ordinal; just use the name, for future-proofing.

[10:00] <dalek> doc: review: https://github.com/perl6/doc/commit/5fccce4eea

[10:00] <dalek> doc: 283692a | Altai-man++ | doc/Language/classtut.pod6:

[10:00] <dalek> doc: Merge pull request #988 from VynceMontgomery/patch-2

[10:00] <dalek> doc: 

[10:00] <dalek> doc: minor wording fix

[10:00] <dalek> doc: review: https://github.com/perl6/doc/commit/283692abaa

[10:08] *** zakharyas joined
[10:09] *** pierre_ left
[10:15] *** Actualeyes left
[10:18] *** travis-ci joined
[10:18] <travis-ci> Doc build passed. Altai-man 'Fix of the example code

[10:18] <travis-ci> https://travis-ci.org/perl6/doc/builds/170724977 https://github.com/perl6/doc/commit/fbed1d37b981

[10:18] *** travis-ci left
[10:20] *** cog_ left
[10:26] *** pierre_ joined
[10:36] *** bjz left
[10:36] *** bjz joined
[10:42] *** cowens left
[10:43] *** CIAvash joined
[10:48] *** wamba joined
[10:53] *** wamba left
[11:02] *** rurban left
[11:09] *** wamba joined
[11:11] *** rurban joined
[11:11] *** grondilu joined
[11:20] *** pierre_ left
[11:20] * grondilu is amazed by the output of $ perl6 --target ast -e ''

[11:20] *** thib joined
[11:21] <moritz> it's pretty boring housekeeping, really

[11:22] *** bhm_ left
[11:24] * lizmat is more surprised by "$ perl6 --target ast -e 'say "foo"'"   which seems to repeat itself ?

[11:24] <lizmat> at the end

[11:25] *** rurban left
[11:26] *** Alikzus joined
[11:31] *** zakharyas left
[11:38] *** CIAvash left
[11:44] *** rurban joined
[12:04] *** cschwenz joined
[12:05] *** bhm joined
[12:05] *** cschwenz left
[12:05] *** cschwenz joined
[12:06] *** pierre_ joined
[12:08] <FROGGS> lizmat: that's about sink vs no-sink context

[12:09] *** zakharyas joined
[12:10] <lizmat> ah, yes, in this case it could be determined easily that it is a sink context, but generally it's a lot more involved, right ?

[12:11] <FROGGS> I'm not qualified to answer :/

[12:13] <dalek> modules.perl6.org: 9fa5ea3 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/PostProcessor/METAChecker.pm:

[12:13] <dalek> modules.perl6.org: Redesign dist source-url META checker

[12:13] <dalek> modules.perl6.org: 

[12:13] <dalek> modules.perl6.org: The current check gives only 1 hour window of opportunity to notice any issues

[12:13] <dalek> modules.perl6.org: with the source-url in META file, as the checker does not run on dists without

[12:13] <dalek> modules.perl6.org: fresh commits.

[12:13] <dalek> modules.perl6.org: 

[12:13] <dalek> modules.perl6.org: Perform the check on all dists regardless whether we have new commits, but do

[12:13] <dalek> modules.perl6.org: not do the check if the source-url matches the repo we fetched the META file

[12:13] <dalek> modules.perl6.org: from; since this already guarantees the source-url is correct. This will give

[12:13] <dalek> modules.perl6.org: us even better reduction of HTTP requests than doing the checks for dists

[12:13] <dalek> modules.perl6.org: with fresh commits only and any issues will stay in the build log until fixed.

[12:13] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/9fa5ea3257

[12:22] *** zakharyas left
[12:50] *** CIAvash joined
[13:11] *** cdg joined
[13:16] *** rurban left
[13:17] *** geraud left
[13:19] *** sena_kun joined
[13:22] *** bjz left
[13:22] *** breinbaas left
[13:23] *** nicq20 joined
[13:23] *** wamba left
[13:24] <dalek> doc: fbed1d3 | Altai-man++ | doc/Type/Cool.pod6:

[13:24] <dalek> doc: Fix of the example code

[13:24] <dalek> doc: 

[13:24] <dalek> doc: The example was obviously corrupted with redundand whitespace cleanup commit.

[13:24] <dalek> doc: VynceMontgomery++

[13:24] <dalek> doc: review: https://github.com/perl6/doc/commit/fbed1d37b9

[13:24] <dalek> doc: 4ec4dbd | Altai-man++ | doc/Type/Cool.pod6:

[13:24] <dalek> doc: Merge pull request #989 from perl6/Altai-man-patch-1

[13:24] <dalek> doc: 

[13:24] <dalek> doc: Fix of the example code

[13:24] <dalek> doc: review: https://github.com/perl6/doc/commit/4ec4dbd95d

[13:30] *** skids joined
[13:33] *** neuraload left
[13:40] *** neuraload joined
[13:46] *** CIAvash left
[13:48] *** wamba joined
[13:52] *** aborazmeh left
[13:56] *** snowman_ left
[13:56] <dalek> doc: 42c2cd7 | coke++ | / (3 files):

[13:56] <dalek> doc: inline predefined-search-items

[13:56] <dalek> doc: review: https://github.com/perl6/doc/commit/42c2cd782a

[13:56] <dalek> doc: 517b4ad | (Will Coleda)++ | / (3 files):

[13:56] <dalek> doc: Merge pull request #980 from perl6/remove-predefined

[13:56] <dalek> doc: 

[13:56] <dalek> doc: inline predefined-search-items

[13:56] <dalek> doc: review: https://github.com/perl6/doc/commit/517b4ad640

[13:58] *** acrussell joined
[13:59] *** wamba left
[14:01] <dalek> doc: 7193e12 | coke++ | doc/Language/modules.pod6:

[14:01] <dalek> doc: remove trailing whitespace

[14:01] <dalek> doc: review: https://github.com/perl6/doc/commit/7193e128d5

[14:03] *** kurahaupo__ joined
[14:06] <[Coke]> er...

[14:06] <[Coke]> ah, no, 980 is fine.

[14:06] <[Coke]> I thought it pulled in one of the other two I just checked manually.

[14:07] *** itaipu joined
[14:07] *** dmaestro joined
[14:08] <[Coke]> doc: `git branch -a --merged` could probably remove most of those branches.

[14:17] *** rurban joined
[14:18] *** wamba joined
[14:20] *** cyphase left
[14:20] *** khw joined
[14:23] *** pierre_ left
[14:25] *** cyphase joined
[14:26] <nicq20> If anyone has a minute, I'm having trouble with 'is-deeply'. :/

[14:26] <masak> m: say "abc def abc".comb(/a<(bc)>/)

[14:26] <camelia> rakudo-moar 23faf6: OUTPUT«(abc abc)␤»

[14:26] <masak> I expected "(bc bc)" here

[14:27] * masak submits rakudobug

[14:27] <masak> also, that used to work -- it's a recent regression

[14:27] <masak> will investigate/bisect later

[14:28] <moritz> m: 'abc def' ~~ /a<(bc)>/ and say $/

[14:28] <camelia> rakudo-moar 23faf6: OUTPUT«｢bc｣␤»

[14:28] *** raiph joined
[14:28] <moritz> curious

[14:29] <masak> oh, here's a better example for the RT ticket:

[14:29] <masak> m: say "abc xbc".comb(/a<(bc)>/)

[14:29] <camelia> rakudo-moar 23faf6: OUTPUT«(abc)␤»

[14:29] <nicq20> moritz: I thought that comb was supposed to return what it matches?

[14:30] <masak> it's correct in that it matches only on the first word

[14:30] <masak> it's incorrect in that it includes the "a", when the <( )> tell it to exclude it

[14:30] <[Coke]> doc (huh, my git branch -a shows a lot more branches than github does.)

[14:30] <masak> nicq20: does that answer your question?

[14:31] <jnthn> [Coke]: git remote prune origin

[14:31] <masak> (also, I am not moritz) :P

[14:31] <moritz> [Coke]: git fetch --prune

[14:31] <jnthn> moritz++ # shorter solution :)

[14:31] <[Coke]> moritz: heh. just found that in the docs. have never had to use that before.

[14:32] <moritz> [Coke]: you can also run git config --global fetch.prune 1

[14:32] <viki> nicq20: what's the issue with is-deeply?

[14:32] <masak> bug submitted

[14:32] <masak> &

[14:33] <moritz> [Coke]: then it cleans up automatically on each fetch

[14:33] <nicq20> masak: Yeah, kind of. I was under the impression that it returns what watches the regex, not just any sub-match (the <(bc)> part in this case). If that is true it works fine.

[14:33] <viki> nicq20: it's supposed to, yes

[14:33] <raiph> hi #perl6, fyi, doc.perl6.org search is broken for me

[14:34] <viki> bisectable6: m: say "abc xbc".comb(/a<(bc)>/)

[14:34] <bisectable6> viki, On both starting points (old=2015.12 new=b7201a8) the exit code is 0 and the output is identical as well

[14:34] <bisectable6> viki, Output on both points: (bc)

[14:34] <nicq20> masak: Oops! Sorry, about the name confusion. 

[14:34] <viki> nicq20: that may be due to lizmat++'s recent changes. Bisectable shows the right result and I'm guessing it just hasn't built the most recent commits.

[14:35] <viki> nicq20: what's the problem with is-deeply?

[14:35] <DrForr> raiph: Yep, confirmed.

[14:35] <sena_kun> raiph, syntax error, indeed.

[14:36] <nicq20> viki: I probably just don't understand it fully, but it seems to not like comparing some hashes in my code. I'll see if I can golf it any.

[14:36] <[Coke]> moritz: probably better to do manual cleanup JIC.

[14:37] <lizmat> masak: I'm not sure I agree with you re /a<(bc)>/

[14:37] <dalek> doc: 0b57313 | (Zoffix Znet)++ | template/search_template.js:

[14:37] <dalek> doc: Unbreak search

[14:37] <dalek> doc: review: https://github.com/perl6/doc/commit/0b5731327f

[14:37] <viki> raiph: ^ should work again in about 15 minutes

[14:37] <[Coke]> viki: that was probably a result of my recent merge. apologies.

[14:37] <[Coke]> thanks for cleaning up my mess@!

[14:38] <viki> nicq20: it should work fine with hashes. Perhaps there are object instances that are different?

[14:38] <viki> nicq20: is-deeply is nothing more than eqv with Failure handler under the hood

[14:38] <lizmat> according to the doc, it comb should return matches, *not* captures

[14:39] <moritz> lizmat: <( limits matches

[14:39] <moritz> m: say 'abc' ~~ /<( bc/; say ~$/; say $/.from

[14:39] <camelia> rakudo-moar 23faf6: OUTPUT«｢bc｣␤bc␤1␤»

[14:39] <viki> m: say 'abc' ~~ / . <( bc/; say ~$/; say $/.from

[14:39] <camelia> rakudo-moar 23faf6: OUTPUT«｢bc｣␤bc␤1␤»

[14:39] <viki> And the )> does it for the other end

[14:39] <moritz> viki: thanks, my example was pointless :-)

[14:40] <viki> :)

[14:40] <nicq20> viki: Yeah, is some tests I got it work fine. Seems to be my code.

[14:40] *** itaipu left
[14:40] <raiph> DrForr, sena_kun, viki, [Coke], #perl6 <3

[14:40] *** itaipu joined
[14:42] <nicq20> viki: Oh, gee whiz. Looks like my code generates a Seq instead of an Array. Well, fiddlesticks. :/

[14:42] <moritz> that's my typical problem with is-deeply. It's very nitpicky

[14:44] <viki> That's my typical joy with is-deeply. It detects issues :) Seq is very different from an Array.

[14:44] <lizmat> m: say "abc".match(/a<(bc)>, :as(Str)/)   # golfed the problem

[14:44] <camelia> rakudo-moar 23faf6: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter , (must be quoted to match literally)␤at <tmp>:1␤------> 3say "abc".match(/a<(bc)>7⏏5, :as(Str)/)   # golfed the problem␤Unable to parse regex; couldn't find final '/'␤at <tmp>:1␤------>…»

[14:44] <lizmat> m: say "abc".match(/a<(bc)>/, :as(Str))   # really golfed the problem

[14:44] <camelia> rakudo-moar 23faf6: OUTPUT«abc␤»

[14:45] <lizmat> m: say "abc".match(/a<(bc)>/, :as(Match))   # correct

[14:45] <camelia> rakudo-moar 23faf6: OUTPUT«｢bc｣␤»

[14:45] <viki> Ahhh

[14:45] <FROGGS> m: say "abc".match(/a<(bc/, :as(Str)) # golfed more :P

[14:45] <camelia> rakudo-moar 23faf6: OUTPUT«abc␤»

[14:45] <lizmat> note this was not picked up by spectests  :-(

[14:45] <FROGGS> :o(

[14:47] *** rindolf left
[14:47] <moritz> lizmat: you can't expect the spectets to cover all combinations of features

[14:47] <lizmat> true

[14:47] <moritz> lizmat: if there are tests that check that match objects are constructed correctly, then I expect there to be one test with .comb(regex)

[14:47] <lizmat> but can you expect a developer to try out all of the combinations of features during development ?

[14:48] <viki> Why not?

[14:48] <nicq20> Does 'Z' always return a Seq?

[14:48] <viki> I'd expect the tests to be comprehensive enough to test all the features. Especially if the roast is THE Perl 6 specification

[14:49] <FROGGS> viki: it will cover more and more and that is certainly the goal

[14:49] <FROGGS> but >99.999% is unlikely to happen

[14:49] <nicq20> m: dd <a b> Z <1 2>

[14:49] <camelia> rakudo-moar 23faf6: OUTPUT«(("a", IntStr.new(1, "1")), ("b", IntStr.new(2, "2"))).Seq␤»

[14:50] <viki> m: dd ^2 Z ^2+2

[14:50] <camelia> rakudo-moar 23faf6: OUTPUT«((0, 2), (1, 3)).Seq␤»

[14:50] <moritz> viki: because there are too many combinations to cover if you aim for an exponential space

[14:50] <FROGGS> would be nice to have a overage analysis... maybe next gsoc?

[14:50] <FROGGS> coverage*

[14:50] <viki> FROGGS: there's a rought analyzis already on perl6.WTF

[14:51] <viki> FROGGS: well, it's *full* analysys, but the coverage checker isn't perfect yet. And well, it can't tell you whether you're testing a combination of features

[14:51] <FROGGS> ahh, I see

[14:51] <FROGGS> still awesome though

[14:51] <viki> timotimo++ made it

[14:51] *** hwcomcn joined
[14:52] <FROGGS> timotimo++ then :o)

[14:52] *** wamba left
[14:52] <viki> s: &infix:<Z>, \(^2, ^2+2)

[14:52] <SourceBaby> viki, Sauce is at https://github.com/rakudo/rakudo/blob/23faf61/src/core/List.pm#L1622

[14:52] <nicq20> So is 'Z' incorrect on the docs? According to https://docs.perl6.org/routine/Z it should give a 'List'.

[14:53] *** jonas2 left
[14:54] <nicq20> viki: Oh, I see. It uses a give/take. That would generate the Seq.

[14:54] <dalek> doc: fd3d7b8 | (Zoffix Znet)++ | doc/Language/operators.pod6:

[14:54] <dalek> doc: Z meta returns a Seq

[14:54] <dalek> doc: review: https://github.com/perl6/doc/commit/fd3d7b8eca

[14:54] <viki> m: sub foo { return (); }; dd foo().WHAT

[14:54] <camelia> rakudo-moar 23faf6: OUTPUT«Cannot look up attributes in a type object␤  in block <unit> at <tmp> line 1␤␤»

[14:55] <moritz>  m: sub foo { return (); }; dd foo()

[14:55] <camelia> rakudo-moar 23faf6: OUTPUT«()␤»

[14:55] <moritz>  m: sub foo { return (); }; say foo().^name

[14:55] <camelia> rakudo-moar 23faf6: OUTPUT«List␤»

[14:55] <viki> m: sub foo { gather {} }; dd foo().^name

[14:55] <camelia> rakudo-moar 23faf6: OUTPUT«"Seq"␤»

[14:56] *** neuraload left
[14:56] *** dmaestro left
[14:57] <viki> nicq20: well, it returns an empty List if the list of lists got no elements, but that may be a bug/inconsistency

[14:57] <viki> m: dd [] Z []

[14:57] <camelia> rakudo-moar 23faf6: OUTPUT«().Seq␤»

[14:58] * viki has no idea how to trigger that return () if lol.elems == 0

[14:58] <lizmat> nicq20: testing a .comb fix now

[14:58] <viki> Ah

[14:58] <viki> m: dd infix:<Z>

[14:58] <camelia> rakudo-moar 23faf6: OUTPUT«()␤»

[14:58] <viki> nicq20: it returns a list when called without args.

[14:59] <nicq20> viki: Not super useful, but it returns a list! :)

[15:00] <viki> nicq20: not for long... :P

[15:02] *** sufrostico left
[15:03] *** nightfrog joined
[15:05] <nicq20> Well, if a List is really needed, look like i can just use '.eager' to turn it into a List.

[15:05] *** nightfrog left
[15:05] <viki> nicq20: why not .List?

[15:05] *** nightfrog joined
[15:05] <nicq20> m: (<a b> Z <1 2>).eager.WHAT

[15:05] <camelia> rakudo-moar 23faf6: ( no output )

[15:05] <nicq20> m: say (<a b> Z <1 2>).eager.WHAT

[15:05] <camelia> rakudo-moar 23faf6: OUTPUT«(List)␤»

[15:06] <viki> m: (1, 2 ... *).List[1..10].say

[15:06] <camelia> rakudo-moar 23faf6: OUTPUT«(2 3 4 5 6 7 8 9 10 11)␤»

[15:06] <viki> m: (1, 2 ... *).eager[1..10].say

[15:06] <viki> (hang)

[15:06] <camelia> rakudo-moar 23faf6: OUTPUT«(timeout)»

[15:08] <nicq20> viki: Huh, looks like '.List' would work better (didn't know that was a thing :D). '.eager' turns it into a list before returning, hence the hang right?

[15:08] <viki> nicq20: eager evaluates it eagerly, making it fetch all the elements, hence the hang, since it's an infinite sequence

[15:09] <viki> There's a .Type for pretty much all of our types

[15:09] <viki> m: DateTime.now.Date.say

[15:09] <camelia> rakudo-moar 23faf6: OUTPUT«2016-10-26␤»

[15:09] <viki> m: Mix.new(1 => 1.243, 5 => 30).Bag.say

[15:09] <camelia> rakudo-moar 23faf6: OUTPUT«bag(1 => 1.243, 5 => 30)␤»

[15:10] <viki> wat

[15:10] <nicq20> viki: ... Oh.

[15:10] <viki> oh

[15:10] <viki> m: Mix.new-from-pairs(1 => 1.243, 5 => 30).Bag.say

[15:10] <camelia> rakudo-moar 23faf6: OUTPUT«bag(5(30), 1)␤»

[15:11] <nicq20> viki: Does the .Type thing go off of constructors? How does it work? 

[15:12] <viki> nicq20: it's just a regular method. We simply made them DoTheRightThing on most of core types

[15:12] <viki> s: DateTime.now, 'Date', \()

[15:12] <SourceBaby> viki, Sauce is at https://github.com/rakudo/rakudo/blob/23faf61/src/core/DateTime.pm#L364

[15:13] <viki> ^in that case, it just a straightforward instantiation

[15:13] *** stevieb9 joined
[15:13] <viki> s: Mix.new-from-pairs(1 => 1.243, 5 => 30), 'Bag', \()

[15:13] <SourceBaby> viki, Sauce is at https://github.com/rakudo/rakudo/blob/23faf61/src/core/Mix.pm#L37

[15:13] <viki> In this case ^ we have to .Int the values and filter out the negatives

[15:13] *** stevieb9 left
[15:13] <viki> And basically all objects have some sort of thing like that (or their ancestor classes have some generic handling)

[15:14] *** stevieb9 joined
[15:14] <viki> And IIRC this is also what the type coercers use

[15:14] <viki> m: sub (Bag(Mix) $x) { dd $x }(Mix.new(1 => 1.243, 5 => 30))

[15:14] <camelia> rakudo-moar 4943ef: OUTPUT«(1 => 1.243=>1,5 => 30=>1).Bag␤»

[15:15] <lizmat> nicq20: https://github.com/rakudo/rakudo/commit/ae85bac528

[15:15] <viki> m: sub (Bag(Mix) $x) { dd $x }(Mix.new-from-pairs(1 => 1.243, 5 => 30))

[15:15] <camelia> rakudo-moar 4943ef: OUTPUT«(5=>30,1=>1).Bag␤»

[15:15] <viki> m: sub (YourMom(Mix) $x) { dd $x }(Mix.new-from-pairs(1 => 1.243, 5 => 30))

[15:15] <camelia> rakudo-moar 4943ef: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Invalid typename 'YourMom' in parameter declaration.␤at <tmp>:1␤------> 3sub (YourMom7⏏5(Mix) $x) { dd $x }(Mix.new-from-pairs(1␤»

[15:15] <viki> heh

[15:16] *** g4 left
[15:17] <viki> nicq20: and that's it. infix:<Z> now always-always returns a Seq

[15:17] <dalek> Net-ZMQ: 2874908 | (Zoffix Znet)++ | META.info:

[15:17] <dalek> Net-ZMQ: Add mandatory "perl" META field

[15:17] <dalek> Net-ZMQ: 

[15:17] <dalek> Net-ZMQ: The `perl` field specifies the minimal perl version for which this distribution can be installed and is a mandatory field. The value of `"6.*"` indicates any version suffices.

[15:17] <dalek> Net-ZMQ: 

[15:17] <dalek> Net-ZMQ: It is recommended to use [Test::META](https://modules.perl6.org/repo/Test::META) module as an author test, to catch any issues with the META file.

[15:17] <dalek> Net-ZMQ: review: https://github.com/arnsholt/Net-ZMQ/commit/28749083ea

[15:17] <dalek> Net-ZMQ: d89c744 | azawawi++ | META.info:

[15:17] <dalek> Net-ZMQ: Merge pull request #8 from zoffixznet/patch-1

[15:17] <dalek> Net-ZMQ: 

[15:17] <dalek> Net-ZMQ: Add mandatory "perl" META field

[15:17] <dalek> Net-ZMQ: review: https://github.com/arnsholt/Net-ZMQ/commit/d89c744c23

[15:20] <viki> m: class YourMom {}; sub (YourMom(Mix) $x) { dd $x }(Mix.new-from-pairs(1 => 1.243, 5 => 30))

[15:20] <camelia> rakudo-moar 4943ef: OUTPUT«No such method 'YourMom' for invocant of type 'Mix'␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:20] <viki> Yeah, it does

[15:22] <dalek> doc: d123ff2 | MasterDuke17++ | doc/Type/Seq.pod6:

[15:22] <dalek> doc: Fix some awkward grammar

[15:22] <dalek> doc: review: https://github.com/perl6/doc/commit/d123ff2296

[15:26] *** stevie_b joined
[15:27] *** Actualeyes joined
[15:27] *** gregf_ left
[15:29] *** stevieb9 left
[15:32] <nicq20> Woo, consistancy!

[15:43] *** cschwenz left
[16:03] *** itaipu left
[16:10] *** itaipu joined
[16:12] *** wamba joined
[16:15] <raiph> 2009: "jnthn: I've never been entirely clear on what package vs module distinction is ... masak: neither have I." (https://irclog.perlgeek.de/perl6/2009-11-17#i_1741018)

[16:15] <raiph> 2014: "Ven: well, I still don't really get what's the diff. between package VS module (semantically)" (https://irclog.perlgeek.de/perl6/2014-07-21#i_9058427)

[16:16] * jnthn figured it out somewhere around 2010 :)

[16:16] <jnthn> m: module A { }; module A { }

[16:16] <camelia> rakudo-moar 70a367: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol 'A'␤at <tmp>:1␤------> 3module A { }; module A7⏏5 { }␤    expecting any of:␤        generic role␤»

[16:17] <jnthn> m: package A { }; package A { }

[16:17] <camelia> rakudo-moar 70a367: ( no output )

[16:17] <jnthn> m: package A { }; module A { }

[16:17] <camelia> rakudo-moar 70a367: ( no output )

[16:18] <jnthn> A package is just a stub that can be replaced/stolen by a module/class/role

[16:18] <jnthn> Of note

[16:18] <jnthn> m: class A::B { }; say A::B.HOW.^name; say A.HOW.^name

[16:18] <camelia> rakudo-moar 70a367: OUTPUT«Perl6::Metamodel::ClassHOW␤Perl6::Metamodel::PackageHOW␤»

[16:18] <dalek> DBIish: 75d2d43 | niner++ | lib/DBDish/Pg/Connection.pm6:

[16:18] <dalek> DBIish: Do not rely on your dependencies to load modules

[16:18] <dalek> DBIish: 

[16:18] <dalek> DBIish: Fixes DBDish::Pg::Connection failing to compile when loading a module properly

[16:18] <dalek> DBIish: imports symbols lexically instead of as globals.

[16:18] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/75d2d43550

[16:18] <dalek> DBIish: 4ce29ec | niner++ | t/0 (2 files):

[16:18] <dalek> DBIish: Prepare tests for lexical module loading

[16:18] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/4ce29eca0f

[16:18] <jnthn> That's why I can write:

[16:18] <jnthn> m: class A::B { }; class A { }

[16:18] <camelia> rakudo-moar 70a367: ( no output )

[16:18] <jnthn> And it is able to nab the A

[16:19] <nine> Nested packages are...tricky

[16:19] <nine> Especially in combination with scoping

[16:20] <jnthn> Indeed

[16:20] <jnthn> When the "nabbing" happens cross-compilation unit it's..."fun"

[16:24] <nicq20> Huh. Never quite understood the difference myself, but that makes sense.

[16:29] <raiph> m: package A { sub foo is export { say 42} }; module A { sub foo is export { say 42 } }

[16:29] <camelia> rakudo-moar 70a367: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤A symbol '&foo' has already been exported␤at <tmp>:1␤»

[16:29] <jnthn> It's about the A itself; it doesn't imply anything about what's inside of it.

[16:31] *** dakkar left
[16:31] *** canopus left
[16:34] <raiph> jnthn: So `package ...` =~= `namespace ...`?

[16:36] <jnthn> raiph: Well, namespace is a bit of an overloaded word, but I guess so

[16:37] <jnthn> raiph: A package/module/class etc. have a Stash, which is what actually holds the symbols (it's the thing you get back from .WHO)

[16:38] <jnthn> So in that sense they're all namespaces

[16:38] <jnthn> They're all different kinds of type, with package being the only kind that doesn't care about redeclaration.

[16:39] *** canopus joined
[16:44] *** itaipu left
[16:46] *** breinbaas joined
[16:53] *** nicq20 left
[16:54] <dalek> json: 1b33a57 | (Zoffix Znet)++ | META.info:

[16:54] <dalek> json: Add mandatory "perl" META field

[16:54] <dalek> json: 

[16:54] <dalek> json: The `perl` field specifies the minimal perl version for which this distribution can be installed and is a mandatory field. The value of `"6.*"` indicates any version suffices.

[16:54] <dalek> json: 

[16:54] <dalek> json: It is recommended to use [Test::META](https://modules.perl6.org/repo/Test::META) module as an author test, to catch any issues with the META file.

[16:54] <dalek> json: review: https://github.com/moritz/json/commit/1b33a570ef

[16:56] * moritz guesses that Zoffix++ won't have problems getting his 4 PRs for the hacktoberfest challenge :-)

[16:56] <timotimo> yeah

[16:56] *** aries_liuxueyang left
[16:57] <viki> "299 contributions on Oct 26, 2016" https://github.com/zoffixznet/

[16:57] <timotimo> "created 102 repositories"

[16:58] <timotimo> fantastic

[16:58] <timotimo> "hot! created a pull request in rust-lang/rust that received 3 comments"

[16:59] <viki> just a typo fix

[16:59] *** aries_liuxueyang joined
[16:59] <timotimo> i saw %)

[17:01] <viki> .tell masak some of your modules have unmerged PRs for META file issues going back over a year ago. The issues they fix currently render the modules uninstallable (provides section). You also got a few more fixes today. All of these repos have *at least* one META PR: https://gist.github.com/zoffixznet/66edf838cca4f6ccb9baa1633ef383aa

[17:01] <yoleaux> viki: I'll pass your message to masak.

[17:05] *** hwcomcn left
[17:08] *** domidumont left
[17:12] <raiph> m: package A { sub foo { say 11 }; sub bar { say 12 } }; package A {  sub bar { foo }; sub foo { say 22 } }; say A::&foo.signature

[17:12] <camelia> rakudo-moar ab9469: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed lookup of ::&foo; please use ::('&foo'), ::{'&foo'}, or ::<&foo>␤at <tmp>:1␤------> 3bar { foo }; sub foo { say 22 } }; say A7⏏5::&foo.signature␤»

[17:12] <raiph> oops, sorry for noise

[17:16] *** sufrostico joined
[17:18] *** stevieb9 joined
[17:21] *** firstdayonthejob joined
[17:22] *** stevie_b left
[17:24] <grondilu> guys, do you keep an eye on webassembly?  The more I read about it, the more I'm looking forward to Perl 6 targetting it.

[17:25] <viki> It is asmjs? The one that lets you boot up Windows 98 in your browser XD

[17:25] <viki> s/It is/Is it/;

[17:25] <grondilu> not quite.

[17:26] <grondilu> asm.js is a subset of js that can be compiled into somewhat native code.

[17:26] *** pdcawley left
[17:26] <viki> Seenms to be similar "The initial implementation of WebAssembly support in browsers will be based on asm.js" https://en.wikipedia.org/wiki/WebAssembly

[17:27] <grondilu> yes but no

[17:27] <grondilu> it's more complicated than that.

[17:27] <viki> OK.

[17:27] *** pdcawley joined
[17:27] *** pdcawley left
[17:28] <viki> Well, as with most any of stuff like this: it's all a matter of available volunteers.

[17:28] <grondilu> there is already a C Api that allows you to build wasm code without passing through any javascript stage

[17:28] <grondilu> https://github.com/WebAssembly/binaryen

[17:28] <viki> As in, "keeping an eye on" doesn't matter much if there's no time to do anything.

[17:29] *** pdcawley joined
[17:29] *** pdcawley left
[17:29] * viki reads http://perl6.party/post/Open-Source-Projects--When-Ideas-Meet-Reality

[17:30] <grondilu> some stuff can be done I believe.  at least one programming language already has an experimental compiler to wasm:  https://github.com/brson/mir2wasm/ 

[17:30] *** pdcawley joined
[17:30] <grondilu> (that language being Rust)

[17:30] <viki> \o/

[17:30] * viki is learning Rust ATM

[17:31] <viki> grondilu: can we use that C API through our NativeCall?

[17:31] <viki> Or is that... compiles C to wasm without JS intermediarry

[17:31] <grondilu> of course, but that won't be much useful.

[17:31] <viki> Ah

[17:32] *** espadrine joined
[17:32] <grondilu> the C API is very low level.  It just serializes a wasm AST if I understand correctly. 

[17:32] *** hobbs left
[17:33] <grondilu> so you'd still need to do quite a bit of translation between different kinds of AST. 

[17:33] <grondilu> or translate Perl 6's 6model into something that can directly be written into wasm code.  Or something like that.

[17:35] *** pdcawley left
[17:35] <grondilu> if Perl 6 were targetting wasm, we could write code in Perl 6 that would run in the browser, and access all DOM stuff.  That'd be insanely cool.

[17:36] <viki> pmurias++ is currently working on the JS backend. Maybe you should touch base with him on wasm

[17:37] *** stevieb joined
[17:38] <grondilu> pmurias seems to struggle quite a bit with the JS backend.  I'm starting to lose hope it will ever be done.

[17:38] <viki> :/

[17:38] <grondilu> and wasm is the future anyway.

[17:39] <viki> ehehe

[17:39] <viki> I think I recall someone telling me the same thing about Ruby on Rails :)

[17:42] <[Coke]> pmurias++ is making progress.

[17:42] <[Coke]> if you have specific areas of concern, please let he or I know.

[17:42] <[Coke]> If you'd like to donate cycles, also, same.

[17:43] <grondilu> "donate cycles"?

[17:43] <perlpilot> do work.

[17:44] <viki> Oh...

[17:44] <perlpilot> I'd be interested in hearing more about this "struggle quite a bit" in some detail.

[17:44] * viki puts away his bicycle

[17:45] <viki> I saw a ton of commits fly in recently. Didn't look like a struggle to me.

[17:45] <grondilu> if you want me to admit that behind my "struggle quite a bit" there is only a "it's not there yet", I will.

[17:45] <[Coke]> I think that's a more reasonably stated concern, yes. :)

[17:46] <viki> :D

[17:46] *** CIAvash joined
[18:02] *** ufobat left
[18:09] *** hobbs joined
[18:10] * [Coke] adds https://github.com/rakudo/rakudo/wiki/dev-env-vars

[18:11] *** pmurias joined
[18:11] <viki> FWIW RAKUDO_EXCEPTIONS_HANDLER is a user-facing feature, not just dev

[18:12] <viki> There's also RAKUDO_OPTIMIZER_DEBUG and RAKUDO_MODULE_DEBUG

[18:12] <[Coke]> viki: the word dev is confusingly used there.

[18:13] <[Coke]> viki: note that some of these are already listed in doc's 00-running and need to be moved to the wiki.

[18:13] <timotimo> do we want to have MVM env vars in there, too?

[18:13] <[Coke]> more like dev as in "foo-dev", "I'm going to do dev work with foo", not "I am a dev of foo"

[18:13] <viki> [Coke]: what are we moving? Just the ones useful for rakudo dev only?

[18:13] <pmurias> grondilu: wasm is currently mostly a more concise form of asm.js

[18:14] <[Coke]> timotimo: sure. I was just finding a place to hang them that wasn't in doc's, based on previous chat about rakudo-specific things not being in there.

[18:14] <[Coke]> viki: anything RAKUDO specific, likely.

[18:14] <viki> fair nuff

[18:15] *** rurban left
[18:18] *** stevieb9 left
[18:18] <dalek> doc: ce19814 | coke++ | doc/Programs/00-running.pod6:

[18:18] <dalek> doc: link to rakudo-specific vars documented elsewhere

[18:18] <dalek> doc: review: https://github.com/perl6/doc/commit/ce198142ed

[18:18] *** rurban joined
[18:18] *** rurban left
[18:21] <[Coke]> timotimo: added MVM evn vars.

[18:21] *** RabidGravy joined
[18:22] <timotimo> nice

[18:22] <viki> [Coke]++

[18:23] <[Coke]> that leaves https://github.com/perl6/doc/issues/990 which I just opened.

[18:23] <[Coke]> (basically the inverse of my original ticket, which was to put all the RAKUDO_ ones in there; alex pointed out my wrong-thinking on that one.)

[18:24] <[Coke]> (mainly because we don't have a styleguide/actual style on dealing with rakudo-specific things that aren't really spec.)

[18:30] *** Sqirrel joined
[18:31] *** pdcawley joined
[18:32] *** CIAvash left
[18:33] <avuserow> hi all. I saw a link about JSON parsers on Hacker News that had a test suite, so I forked it and added Perl 6's JSON::Tiny. My fork is at https://github.com/avuserow/JSONTestSuite , with results in the results directory and the implementation in parsers/test_json_tiny.p6

[18:33] <avuserow> I'm still looking over the results gradually (since I'm at $dayjob) but thought some people here might be interested

[18:34] <avuserow> especially since it's easy to add more parser implementations and it seems to have found some crashes at various levels

[18:34] <avuserow> oh, and the original writeup is at http://seriot.ch/parsing_json.html

[18:37] *** cdg left
[18:37] <viki> avuserow: are there prepared results or do we need to run test_json_tiny?

[18:37] <timotimo> JSON::Fast probably wants to go there, too

[18:37] <timotimo> it's not ... the most robust implementation :)

[18:38] <FROGGS> viki: look at https://github.com/avuserow/JSONTestSuite/blob/master/results/logs.txt

[18:38] *** vendethiel joined
[18:38] <avuserow> viki, there are visual results in `results/parsing.html` if you want. (clone and open locally is probably easiest)

[18:38] <viki> thanks

[18:39] <avuserow> if you want to replicate it locally, run `python3 run_tests.py` in the root directory. Looks like it should work on OSX and Linux.

[18:40] <viki> Yeah, it's gonna take forever to clone on my crappy network with 38 KiB/s :}

[18:41] <timotimo> ugh

[18:41] <timotimo> poor you

[18:42] <avuserow> :( might be faster to just download the result file(s) you care about

[18:42] <timotimo> github ought to let you grab it via the raw link

[18:42] <viki> Yeah, I grabbed results and style.css and looks like it worked

[18:42] <mst> viki: 'git clone --depth 2 ...'

[18:43] <viki> star: use JSON::Tiny; dd from-json "-1e+9999"

[18:43] <camelia> star-m 2016.04: OUTPUT«-Inf␤»

[18:44] <viki> mst: I don't think that'll work due to this being a work. I get "Counting objects: 1047" normally and "Counting objects: 1023" with --depth... Still slow :)

[18:44] <viki> a fork, not a work :|

[18:44] <mst> viki: oh, well, yes, if it's basically all a single commit that won't help

[18:44] <mst> tis a useful thing to know exists though, because -usually- it does

[18:45] <viki> Yeah, thanks. mst++

[18:45] *** girafe joined
[18:46] <viki> star: use JSON::Tiny; dd from-json Q|["\uD800\u"]|

[18:46] <camelia> star-m 2016.04: OUTPUT«Malformed UTF-16; incomplete surrogate pair␤  in method str_escape at /home/camelia/star-2016.04/share/perl6/site/sources/E796CB0CB7DEAEAFA56E8558AD18241417AC328A (JSON::Tiny::Actions) line 51␤  in regex str_escape at /home/camelia/star-2016.04/share/perl6…»

[18:46] <viki> hehe

[18:49] <viki> Looks like a lot of those "parser crashed" are just Unicode encoding stuff

[18:49] <avuserow> I tried to make it so anything but a properly typed exception from JSON::Tiny counted as a crash, so some crashes might just be uncaught exceptions that should be rewrapped

[18:51] <viki> star: use JSON::Tiny; dd from-json Q|["\uD800\u"]|; CATCH { default { .^name.say } }

[18:51] <camelia> star-m 2016.04: OUTPUT«X::AdHoc␤»

[18:51] <viki> aye

[18:51] <viki> star: use JSON::Fast; dd from-json Q|["\uD800\u"]|; 

[18:51] <camelia> star-m 2016.04: OUTPUT«expected exactly four alnum digits after \u␤  in block  at sources/11ED005DCC03AA42CAA87A439556DB9B6B2C9E59 (JSON::Fast) line 102␤  in sub parse-string at sources/11ED005DCC03AA42CAA87A439556DB9B6B2C9E59 (JSON::Fast) line 76␤  in block  at sources/11ED00…»

[18:52] <viki> .oO( we pack two JSON encoders with Star? )

[18:52] <timotimo> i think panda uses JSON::Fast

[18:52] <viki> Ah

[18:54] <timotimo> JSON::Fast doesn't do any typed exceptions at all

[18:55] <avuserow> viki, I re-ran it without treating untyped exceptions as crashes (just fails), the affected reports are at https://gist.github.com/avuserow/3805b294df824b0f9cb2bf2df98f3e31

[18:57] <viki> star: use JSON::Tiny; dd from-json Q|[1,]|

[18:57] <camelia> star-m 2016.04: OUTPUT«Input (4 characters) is not a valid JSON string␤  in sub from-json at sources/9B467EEF9267A777BB53BAA2F19BE2C9D756BEED (JSON::Tiny) line 59␤  in block <unit> at <tmp> line 1␤␤»

[18:57] *** pochi joined
[18:57] <viki> Oh, I'm looking at wrong thing

[18:58] <timotimo> Perl6 JSON::TinyCRASHn_structure_100000_opening_arrays.json - stack exhaustion?

[18:59] <timotimo> avuserow: could you be so lovely and also run it with JSON::Fast? :)

[18:59] <stmuk_> http://pl6anet.org/drop/rakudo-star-2016.10.1.dmg

[19:00] <stmuk_> can anyone confirm that works on 10.11 and 10.12

[19:00] *** labster joined
[19:01] *** ufobat joined
[19:01] <timotimo> i know JSON::Fast does absolutely nothing about surrogates and such

[19:01] *** pdcawley left
[19:01] <avuserow> timotimo: I just added it, let me push

[19:01] <timotimo> fantastic

[19:02] <timotimo> i expect much more fails :)

[19:02] <timotimo> it's JSON::Fast, not JSON::Correct, after all ;)

[19:02] <timotimo> basically it should be called JSON::Fast::GoodEnough

[19:02] <RabidGravy> xl

[19:02] <avuserow> timotimo: pushed, including results. please take a look at the test script too to make sure it's not insane

[19:02] <avuserow> lunch &

[19:03] <timotimo> i'm only looking at logs.txt, and i don't see the update there :P

[19:03] <avuserow> (I put it in the repo, not the gist)

[19:03] <RabidGravy> we're easily pleased

[19:03] <timotimo> OK

[19:04] <FROGGS> JSON::Fast is better at least

[19:04] *** dha joined
[19:05] <timotimo> better than what?

[19:05] <timotimo> anyway, i'll go grocery shopping so we can have dinner

[19:06] <FROGGS> timotimo: better than JSON::Tiny

[19:06] <RabidGravy> cool, can you get some of that really fine spaghetti as we're all out now

[19:12] *** darutoko left
[19:13] *** cognominal joined
[19:17] <RabidGravy> speaking of JSON I would like a thing like XSLT but for JSON (and in JSON,) someone be a love and write it for me

[19:19] *** amalia_ left
[19:22] *** amalia_ joined
[19:27] *** buggable left
[19:27] *** buggable joined
[19:28] <viki> buggable: eco

[19:28] *** ocbtec left
[19:28] <buggable> viki, Out of 739 Ecosystem dists, 323 have warnings and 0 have errors. See https://modules.perl6.org/update.log for details

[19:28] <viki> \o/

[19:28] <viki> The front page says we have 736 dists... One missing is the test module Foo, one more may be another test one, but third one is missing somehow

[19:29] <RabidGravy> "Required `perl` field is missing" seems to be the favourite

[19:29] <moritz> maybe one of them counts multiple versions of the same dist as as separate?

[19:30] <viki> Yeah, it does. And now that you mention it, I recall tbrowder uploading two different versions, so I guess that accounts for the discrepancy.

[19:31] <viki> RabidGravy: not for long, hopefully. I'm about half-way through submitting PRs to fix that :)

[19:31] <FROGGS> viki: 731 and 732 look identical...

[19:31] <viki> Yeah, that's tbrowder's two different versions (sha1s are different)

[19:32] <RabidGravy> there's one missing description and a handful of missing 'provides'

[19:32] <viki> :o

[19:32] <viki> the latter are uninstallable

[19:32] <RabidGravy> viki, are you just doing the 'perl' ones - I'll do the rest over the next few days

[19:33] <viki> Well, unless they're scripts. I think those would still install.

[19:33] <viki> (and IIRC the site doesn't check to see whether there are modules in the distro)

[19:33] <viki> RabidGravy: yeah, just the perl ones

[19:33] <RabidGravy> $ grep '\[warn\]' update.log | cut -c35- | sort | uniq -c

[19:33] <RabidGravy>       1 Required `description` field is missing

[19:33] <RabidGravy>     322 Required `perl` field is missing

[19:33] <RabidGravy>      11 Required `provides` field is missing

[19:33] <viki> RabidGravy: note that I spotted a couple of masak's distros without provides but with PRs adding those provides

[19:34] <viki> your bash-foo impresses me :)

[19:34] <RabidGravy> the missing provides means they won't work when they're installed doesn't it?

[19:34] <viki> RabidGravy: right. The exception being binaries, as those do not need to be listed in provides. Though, I'm of the opinion such dists need to include an empty provides section.

[19:35] <viki> Since it's a mandatory section.

[19:35] <RabidGravy> I just impressed myself by guessing the first time the value for cut

[19:35] <RabidGravy> I'll start doing them then :0)

[19:35] <viki> RabidGravy++

[19:37] *** andrzejku joined
[19:48] <viki> Do we have a way to specify in the `perl` field version PRIOR to some version, rather than a minimum? Looking for answer for https://github.com/labster/p6-Lingua-Number/pull/4#issuecomment-256449491

[19:51] *** cdg joined
[19:52] <masak> moritz: I just saw http://seriot.ch/parsing_json.html and thought about you for some reason :)

[19:52] <yoleaux> 17:01Z <viki> masak: some of your modules have unmerged PRs for META file issues going back over a year ago. The issues they fix currently render the modules uninstallable (provides section). You also got a few more fixes today. All of these repos have *at least* one META PR: https://gist.github.com/zoffixznet/66edf838cca4f6ccb9baa1633ef383aa

[19:52] * viki & relocating

[19:56] <moritz> masak: :-)

[19:56] <moritz> masak: it's an interesting exercise, but I won't start rejecting JSON files with non-ASCII white space, for example

[19:57] *** pdcawley joined
[19:59] <masak> why do people insist on writing "white spaces" (countable) instead of the much more intuitive "white space" (uncountable)?

[20:00] <masak> "space" is a mass noun; so is "white space"

[20:00] * lucs likes "whitespace"

[20:01] <geekosaur> nobody understands mass nouns any more

[20:01] *** rindolf joined
[20:02] <harmil_wk> I want to write a function that takes two functions as parameters and returns a function that has the union of their signatures and calls both of them with the appropriate parameters. Is that possible?

[20:02] <masak> harmil_wk: "union of their signatures"? could you provide an example?

[20:02] <vendethiel> masak: just for the anecdote... In french, if you're talking about "space" as in "void", it's "un espace". But for the character, it's "une escape" (fem.)

[20:03] <vendethiel> une espace, rather.

[20:03] <masak> to me, "union" is something like set("A", "B") ∪ set("A", "C") -> set("A", "B", "C")

[20:03] <vendethiel> sounds about right

[20:03] <harmil_wk> e.g. I have "sub foo($a, :$b) {...}" and "sub bar($c, :$b) {...}" and I want to take those as parameters and return something like "-> $a, $c, :$b {...}'

[20:03] <masak> aha

[20:03] <masak> right, so "union" on the nameds side of things

[20:03] <vendethiel> wouldn't it be easier if everything was named there?

[20:03] <harmil_wk> yes

[20:03] <masak> and concatenation on the positionals side of things

[20:04] <jnthn> I'd just accept everything into a slurpy and a cache, introspect the sigs, and slice

[20:04] <jnthn> wtf

[20:04] <harmil_wk> I guess for positionals, the naming won't get joined in a useful way, but that's okay

[20:04] <jnthn> I'd just accept everything into a slurpy array and hash, introspect the sigs, and slice

[20:04] *** leego joined
[20:05] <vendethiel> jnthn: are you doing cache-related stuff on moarvm? :P

[20:05] <harmil_wk> I need to return a function that introspects correctly (I'm trying to define MAIN programmatically, so I actually have to have it have the right signature)

[20:05] <jnthn> heh, no, though I guess I was yesterday at dayjob and I will be tomorrow :P

[20:07] <harmil_wk> I'm trying to write a module that gives MAIN defaults from a config file, but otherwise does the normal MAIN processing on args.

[20:07] * vendethiel has been doing Perl 5 for work recently, and fell even more in love with Perl 6 doing so..

[20:07] <vendethiel> The fact it was written by people several years ago who barely knew Perl 5 doesn't help; certainly.

[20:07] <timotimo> FROGGS: i'm not aware of doing anything right with JSON::Fast :)

[20:07] <vendethiel> .oO( At least I got all my colleagues to install rakudo on their machine to get some tools running )

[20:08] <harmil_wk> vendethiel: I highly recommend looking into http://modernperlbooks.com/ it might help

[20:08] <harmil_wk> But so will installing rakudo :)

[20:08] <vendethiel> harmil_wk: I'm not allowed to rewrite that code ;-)

[20:08] <vendethiel> "it could break stuff" I mean, I found bugs. Turns out -- they didn't matter because most of this is dead code anyway...

[20:08] <harmil_wk> Well, adding some "use" statements at the top isn't really "rewriting" ;-)

[20:09] <vendethiel> harmil_wk: having to fix the warnings/errors that ensue however... (it does have strict & warnings, though! Good start.)

[20:10] <vendethiel> No one here likes Perl, partly because of this... (and because they are C++/Java developers and refuse to believe their language isn't the One True Way)

[20:11] <RabidGravy> right, just reviewed all of those "provides" things

[20:11] <RabidGravy> they all have PRs now

[20:12] <RabidGravy> masak, you have a bunch of PRs on various modules updating the META (some are missing 'perl' or 'provides' or both )

[20:13] *** setty1 joined
[20:21] <masak> RabidGravy: thanks for the heads-up. I have many such notifications turned off, so I need to be told which ones to pay attention to.

[20:27] <RabidGravy> I can give you a list of the afflicted modules in a tick, 

[20:32] <RabidGravy> viki, I just sent a PR for the lone missing "description" one too

[20:32] *** espadrine left
[20:33] *** andrzejku left
[20:34] *** vendethiel left
[20:34] *** eliasr left
[20:34] <RabidGravy> masak, they are tardis, Adventure-Engine, crypt, text-indented :)

[20:38] *** bjz joined
[20:39] <timotimo> https://twitter.com/tinLoaf/status/791375287430868992 - someone recognize this language/alphabet/writing system?

[20:43] <dalek> doc: 3813f5e | (David H. Adler)++ | doc/Language/5to6-perlop.pod6:

[20:43] <dalek> doc: Fixed typo ("explains" to "explain" on line 14)

[20:43] <dalek> doc: review: https://github.com/perl6/doc/commit/3813f5e4df

[20:44] *** bjz left
[20:44] <RabidGravy> timotimo, I've seen that one today

[20:44] *** vendethiel joined
[20:45] *** pdcawley left
[20:46] *** setty1 left
[20:46] <moritz> Armenian

[20:46] *** bjz joined
[20:46] <timotimo> oh

[20:46] <moritz> I've cheated, and painted two of them on http://shapecatcher.com/

[20:46] <timotimo> thanks :)

[20:46] <moritz> https://en.wikipedia.org/wiki/Armenian_(Unicode_block)

[20:46] <moritz> .. and I've answered on twitter

[20:47] <timotimo> noooooo, you stole my thunder

[20:47] <timotimo> that i was going to steal from you

[20:47] *** leego left
[20:47] <moritz> lol

[20:48] *** pmurias left
[20:49] *** sufrostico left
[20:49] *** wamba left
[20:50] *** sufrostico joined
[20:51] *** leego joined
[20:53] *** sena_kun left
[20:53] <timotimo> nobody cares about my #WeltraumSchlager tweet ;_;

[20:53] <moritz> oh noez.

[20:54] <RabidGravy> shocking

[20:55] *** wamba joined
[20:57] <lizmat> timotimo: https://www.youtube.com/watch?v=9T3Xz5elbe4  ??

[20:59] *** acrussell left
[21:02] *** skids left
[21:03] *** Zoffix joined
[21:03] <RabidGravy> my naming strategy for modules is now "pick a single word in English that describes it the use google translate to find a pleasing word" :)

[21:05] *** snowman joined
[21:06] <RabidGravy> so now I know what the Shona for "go-between" is ;-)

[21:09] *** grondilu left
[21:09] <jonadab> RabidGravy: And if you translate that from Shona to Japanese, and the result from Japanese to Spanish, then from Spanish to Finnish, then Finnish back to English, is it still "go-between"?

[21:09] <RabidGravy> Oooh

[21:10] *** wamba left
[21:10] <RabidGravy> well it ends up as "envoy" after a few iterations ;-)

[21:11] <jonadab> That's actually not too bad.  Still same idea.

[21:13] <dalek> doc: 939f369 | (Zoffix Znet)++ | META.info:

[21:13] <dalek> doc: Add mandatory "perl" META field

[21:13] <dalek> doc: 

[21:13] <dalek> doc: The `perl` field specifies the minimal perl version for which this distribution can be installed and is a mandatory field. The value of `"6.*"` indicates any version suffices.

[21:13] <dalek> doc: 

[21:13] <dalek> doc: It is recommended to use [Test::META](https://modules.perl6.org/repo/Test::META) module as an author test, to catch any issues with the META file.

[21:13] <dalek> doc: review: https://github.com/perl6/doc/commit/939f369b9f

[21:16] *** RabidGravy left
[21:19] *** geraud joined
[21:26] *** eliasr joined
[21:28] *** kurahaupo__ left
[21:30] *** rurban joined
[21:38] *** Herby__ joined
[21:41] *** pdcawley joined
[21:41] <Herby__> o/

[21:41] <Zoffix> \o

[21:42] <Herby__> Anyone here use Vim and vim-perl for perl6?  I'm a vim novice and am having a hard time having the plugin recognize .p6 or .pm6 files for correct syntax highlioghting

[21:42] <Herby__> I have vim-perl plugin installed with Vim Plug

[21:42] <Herby__> the plugin works properly for .pl files, not so much for .p6 or .pm6

[21:42] <Herby__> kind of stuck at this point

[21:42] *** ggoebel joined
[21:45] <timotimo> Herby__: i have a key binding to :set ft=perl6

[21:46] <timotimo> it's <Leader>p6 where i set my leader to ,

[21:46] <Herby__> hmm

[21:47] <Herby__> what file extension do you typically use for a simple perl script? .p6?

[21:50] *** nicq20 joined
[21:50] <dha> unless something changed while I wasn't looking, I think programs are .p6 and modules are .pm6

[21:50] <Herby__> k, thats what I thought but then saw this on perltricks: https://perltricks.com/article/194/2015/9/22/Activating-Perl-6-syntax-highlighting-in-Vim/

[21:51] <Herby__> where it mentions using .pm6

[21:52] <nicq20> Herby__: As far as I know, tests are just '*.t'

[21:59] *** bjz left
[22:00] <dha> Huh. .p6 seems to work with my vim. But I've got other syntax things installed besides vim-perl, so maybe that's why.

[22:03] *** dha left
[22:03] <Herby__> hmm

[22:12] *** bjz joined
[22:13] *** stevieb left
[22:13] *** bjz left
[22:22] *** TheovdH left
[22:28] *** stevieb joined
[22:35] *** bjz joined
[22:35] *** cyphase left
[22:35] *** firstdayonthejob left
[22:39] *** ufobat left
[22:40] *** cyphase joined
[22:43] *** pdcawley left
[22:46] *** Herby__ left
[22:50] <Zoffix> Found the last "missing" dist; it's ugexe's Foo. So we have 2 extra foos and 1 extra tbrowder's dist making up the 3 extra dist discrepancy

[22:50] *** bjz left
[22:55] *** Juerd joined
[22:57] <Zoffix> w00t... finished sending all 382 PRs to fix missing `perl` in META \o/

[22:58] <Zoffix> rofl "698 contributions on Oct 26, 2016" on https://github.com/zoffixznet

[22:58] <tbrowder> Zoffix: is my dist causing problems?

[22:58] <Zoffix> tbrowder, no, but that dist is not installable

[22:59] <avuserow> Zoffix++ # keeping the ecosystem in good shape

[23:01] <tbrowder> Which dist? AFAIK, I only have one in the ecosystem: Net::IP::Lite

[23:02] <Zoffix> tbrowder, this one: https://github.com/perl6/ecosystem/blob/master/META.list#L731-L732

[23:02] <Zoffix> tbrowder, I forget what it is... but I recall it wasn't installable with neither zef nor panda; they weren't able to find stuff.

[23:03] <Zoffix> buggable, eco

[23:03] <buggable> Zoffix, Out of 739 Ecosystem dists, 296 have warnings and 0 have errors. See https://modules.perl6.org/update.log for details

[23:03] <Zoffix> w00t, already below 300. Will go down as people merge PRs

[23:03] <timotimo> whoa, did buggable just learn that?

[23:03] <Zoffix> My job here is done

[23:03] <timotimo> i don't think i've seen this before

[23:03] <Zoffix> timotimo, yeah, it's new.

[23:03] * Zoffix flicks the cape

[23:03] *** Zoffix left
[23:04] *** jnthn left
[23:04] <ugexe> his module fetches with zef on my end anyway

[23:06] <tbrowder> ref ecosystem, Zoffix: the way to have two or more versions was discussed and i did as instructed. so it looks like i should forget anything but the master branch, or should i refer to a release branch? or?

[23:09] *** vendethiel left
[23:09] *** vendethiel joined
[23:11] <viki> ugexe: tbrowder oh yeah, just tried and works for me to. Maybe the time when it didn't work was on my other box with older zef. And what wasn't working is trying to install a particular version, like zef install 'Net::IP::Lite:ver<0.1.4>', but I've just tried and it worked, so never mind.

[23:12] *** pierre_ joined
[23:12] <tbrowder> ok, so my two versions of one dist are ok?

[23:12] <viki> tbrowder: yup. Just tried both and this time both worked.

[23:13] <tbrowder> thanks, good to hear

[23:13] *** rurban left
[23:14] <viki> And last time was this, but that was on my other box and I don't even know what versions I have installed on it: https://irclog.perlgeek.de/perl6/2016-10-12#i_13385804

[23:14] *** skids joined
[23:16] <ugexe> you would have had to of had a 3 day old or newer zef on that day for it to have worked, so that probably explains why

[23:16] <viki> Ah :)

[23:17] *** pierre_ left
[23:18] * geekosaur 's classically trained brain splats at the "of"

[23:20] <viki> .oO( should of, would of, could of... )

[23:21] <geekosaur> 've

[23:22] <timotimo> i wouldn't've written it that way

[23:22] *** nicq20 left
[23:22] <geekosaur> ("have" after the guillotine got it)

[23:29] *** skink joined
[23:30] <ugexe> depending on where you are from "would have had to of" becomes one giant slur-word

[23:33] *** jast left
[23:34] *** girafe left
[23:35] *** pdcawley joined
[23:36] *** jast joined
[23:39] *** rindolf left
[23:53] *** fredstorm joined
[23:54] *** cdg left
[23:57] *** fredstorm left
[23:57] *** pdcawley left
