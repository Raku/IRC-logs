[00:00] <babydrop> committable6: 2016.11: say permutations(3000).elems

[00:00] <committable6> babydrop, ¦«2016.11:»: No build for this commit

[00:00] <babydrop> orly

[00:00] <babydrop> committable6: 2016.10: say permutations(3000).elems

[00:00] <committable6> babydrop, ¦«2016.10:»: No build for this commit

[00:00] <babydrop> committable6: 2016.11 say permutations(3000).elems

[00:00] <committable6> babydrop, ¦«2016.11»: 1

[00:00] <babydrop> committable6: 2016.11 say +permutations(3000)

[00:00] <committable6> babydrop, ¦«2016.11»: Cowardly refusing to permutate more than 20 elements, tried 3000␤  in block <unit> at /tmp/gRUULhX7Nt line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/gRUULhX7Nt line 1␤ «exit code = 1»

[00:00] <babydrop> ^ that's cause the .elems form ends up with a List of one item, with Failure in it. 

[00:01] <babydrop> So TimToady's suggestion was is it may make a sense for methods that may return lists to throw instead of failing.

[00:01] <babydrop> But now I'm seeing that would affect a ton of methods, making our failure much less useful, so perhaps we need to think of an alternate approach to resolve the original issue

[00:02] <babydrop> s/our failure/our failure mechanism stuff/;

[00:02] *** pyrimidine joined
[00:05] <AlexDaniel> babydrop: as for the policy, I don't think anything is needed. lizmat++ was quick enough to fix all previous regressions that were caused by optimizations and stuff

[00:06] <babydrop> .oO( policy? )

[00:06] <babydrop> m: multi foo(42) { 42}; for ^100_000 { my $x = foo 42; }; say now - INIT now

[00:06] <camelia> rakudo-moar 4fd6e9: OUTPUT«1.6167577␤»

[00:06] *** Actualeyes left
[00:06] <AlexDaniel> .oO( the one you mentioned? Nevermind )

[00:06] <babydrop> m: multi foo(42) { 42}; multi foo([Failure:D]) { "got it" }; for ^100_000 { my $x = foo 42; }; say now - INIT now

[00:06] <camelia> rakudo-moar 4fd6e9: OUTPUT«1.59374864␤»

[00:06] <babydrop> huh

[00:06] <babydrop> m: multi foo(42) { 42}; for ^200_000 { my $x = foo 42; }; say now - INIT now

[00:06] <camelia> rakudo-moar 4fd6e9: OUTPUT«2.76862588␤»

[00:06] <babydrop> m: multi foo(42) { 42}; multi foo([Failure:D]) { "got it" }; for ^200_000 { my $x = foo 42; }; say now - INIT now

[00:07] <camelia> rakudo-moar 4fd6e9: OUTPUT«3.06208905␤»

[00:07] <babydrop> m: say 3.06/2.76

[00:07] <camelia> rakudo-moar 4fd6e9: OUTPUT«1.108696␤»

[00:07] *** pyrimidine left
[00:07] <AlexDaniel> babydrop: the failure thingy is still a bit over my head, so no ticket from me :P

[00:07] <babydrop> Well, I guess that may be one way to do it, if we want to slow everything down by 10% :o

[00:07] *** pierre_ joined
[00:08] <samcv> babydrop, i'm back

[00:08] <babydrop> AlexDaniel: I'll rely to TimToady's omniscience ;)

[00:08] <babydrop> samcv: right. So you wanted to make rakudo.org better?

[00:08] <samcv> yes :)

[00:09] *** SS_ joined
[00:10] <AlexDaniel> :|

[00:10] <AlexDaniel> m: say (5,6,7).pick(-1)

[00:10] <camelia> rakudo-moar 4fd6e9: OUTPUT«MVMArray: Index out of bounds␤  in block <unit> at <tmp> line 1␤␤»

[00:10] <AlexDaniel> j: say (5,6,7).pick(-1)

[00:10] <camelia> rakudo-jvm 8ca367: OUTPUT«VMArray: Index out of bounds␤  in method pull-one at gen/jvm/CORE.setting line 18366␤  in method push-exactly at gen/jvm/CORE.setting line 2685␤  in method push-at-least at gen/jvm/CORE.setting line 2704␤  in method reify-at-least at gen/jvm/CORE.se…»

[00:10] <babydrop> um, totally forgot my passowrd...

[00:10] *** lucasb joined
[00:11] <AlexDaniel> commit: 2015.12,HEAD say (5,6,7).pick(-1)

[00:11] <committable6> AlexDaniel, ¦«2015.12,HEAD»: MVMArray: Index out of bounds␤  in block <unit> at /tmp/s0KdTK5nQ3 line 1␤ «exit code = 1»

[00:11] <AlexDaniel> ah, okay!

[00:12] <babydrop> Apparently we have 53 new comments on rakudo.org 

[00:13] <babydrop> samcv: hm, I don't see an option to add a new user, so maybe I don't have sufficient perms

[00:13] <samcv> hmm

[00:14] <babydrop> timotimo: moritz: we have a volunteer to make rakudo.org better—samcv—would it be possible to hook them up with a user account for wordpress?

[00:14] <lucasb> post comments? all I see is "Comments Off" O.o

[00:15] <babydrop> lucasb: I see "53 comments in need of moderations"

[00:15] <babydrop> Maybe it's old ones, before comments were turned off.

[00:15] <lucasb> ah

[00:16] <lucasb> spam maybe

[00:17] *** secwang joined
[00:17] *** secwang left
[00:19] <AlexDaniel> by the way, are there any plans for uint/int overhaul?

[00:19] *** secwang_ joined
[00:19] <AlexDaniel> because I see this problem like everywhere

[00:19] <AlexDaniel> m: say (4,5,6).head(-99999999999999999)

[00:19] <camelia> rakudo-moar 4fd6e9: OUTPUT«()␤»

[00:19] <AlexDaniel> m: say (4,5,6).head(-999999999999999999)

[00:19] <camelia> rakudo-moar 4fd6e9: OUTPUT«()␤»

[00:19] <AlexDaniel> m: say (4,5,6).head(-9999999999999999999)

[00:19] <camelia> rakudo-moar 4fd6e9: OUTPUT«(4 5 6)␤»

[00:19] <babydrop> Well volunteered!

[00:20] <lucasb> m: say 'let it roll baby roll,'.roll(-1)

[00:20] <camelia> rakudo-moar 4fd6e9: OUTPUT«(let it roll baby roll, let it roll baby roll, let it roll baby roll, let it roll baby roll, let it roll baby roll, let it roll baby roll, let it roll baby roll, let it roll baby roll, let it roll baby roll, let it roll baby roll, let it roll baby roll, le…»

[00:20] <babydrop> lucasb: you can fix that one :)

[00:20] <babydrop> It's easy.

[00:21] <lucasb> AlexDaniel++ I enjoy your bug reports. keep them coming

[00:22] <AlexDaniel> thanks!

[00:26] *** BenGoldberg joined
[00:26] *** SS_ left
[00:30] <AlexDaniel> wait, what…

[00:31] <AlexDaniel> bisect: old=2016.09 say (4,5,6).head(-9999999999999999999)

[00:31] <bisectable6> AlexDaniel, Bisecting by output (old=2016.09 new=4fd6e94) because on both starting points the exit code is 0

[00:31] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/aa711737cdac63fa6d29d1c7aed86079

[00:31] <bisectable6> AlexDaniel, (2016-10-12) https://github.com/rakudo/rakudo/commit/6996512e3c994fafa2d34e8c5c9bf9d25f0a0810

[00:31] <AlexDaniel> bisect: old=2016.09 say (4,5,6).tail(-9999999999999999999)

[00:31] <bisectable6> AlexDaniel, Bisecting by exit code (old=2016.09 new=4fd6e94). Old exit code: 0

[00:31] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/a16e3b9e00de523784344d9f3cfbc915

[00:31] <bisectable6> AlexDaniel, (2016-10-22) https://github.com/rakudo/rakudo/commit/a3406cba841cd9ecdd3bda49b9a415381615961c

[00:34] *** BenGoldberg left
[00:34] *** BenGoldberg joined
[00:34] *** secwang_ left
[00:39] *** canopus left
[00:39] *** aborazmeh joined
[00:39] *** aborazmeh left
[00:39] *** aborazmeh joined
[00:42] *** BenGoldberg left
[00:42] *** BenGoldberg joined
[00:44] <babydrop> committable6: 2015.07 sub f(::T) { say (T,) }; f(10)

[00:44] <committable6> babydrop, ¦«2015.07»: Method 'gist' not found for invocant of class 'T'␤  in sub f at /tmp/NnA1MD9qU9:1␤  in block <unit> at /tmp/NnA1MD9qU9:1␤ «exit code = 1»

[00:44] <babydrop> fgzvsx d nbret

[00:44] <babydrop> gah

[00:44] <babydrop> There's nothing more infurriating than having copy-paste issues

[00:45] <babydrop> szx vfdg

[00:45] <babydrop> '<>GKM:RADEN

[00:45] <babydrop> AlexDaniel: join #zofbot for a sec, I wanna show something and the copy-paste is annoying me

[00:46] *** canopus joined
[00:48] *** BenGoldberg left
[00:52] *** pyrimidine joined
[00:52] *** labster left
[00:53] *** BenGoldberg joined
[00:54] <AlexDaniel> #zofbot is a weird place. People are hugely outnumbered by bots there, yet bots are abused constantly

[00:55] <babydrop> hah

[00:57] *** pyrimidine left
[00:57] <babydrop> m: put class {}.^methods».name.grep: /say/

[00:57] <camelia> rakudo-moar 4fd6e9: OUTPUT«␤»

[00:58] <babydrop> `say` is a method provided provided by Mu: https://github.com/rakudo/rakudo/blob/4fd6e94/src/core/Mu.pm#L470

[00:58] <babydrop> How come it doesn't show up in output?

[00:59] <babydrop> m: put class {}.^methods(:all)».name.grep: /say/

[00:59] <camelia> rakudo-moar 4fd6e9: OUTPUT«say␤»

[00:59] <babydrop> Forgot about that

[01:02] <babydrop> New Advent Post: "Day 7 — Set In Your Ways: Perl 6’s Setty and Baggy Types": https://perl6advent.wordpress.com/2016/12/07/set-in-your-ways-perl-6s-setty-and-baggy-types/

[01:02] <babydrop> .tell Technaton the blog post I mentioned a day ago, is up: https://perl6advent.wordpress.com/2016/12/07/set-in-your-ways-perl-6s-setty-and-baggy-types/

[01:02] <yoleaux2> babydrop: I'll pass your message to Technaton.

[01:02] <yoleaux> babydrop: I'll pass your message to Technaton.

[01:02] <babydrop> 0.o

[01:02] <babydrop> yoleaux: why did you have to come back!

[01:03] *** yoleaux2 left
[01:06] *** labster joined
[01:11] <AlexDaniel> babydrop: “I’ll be using fancy-pants Unicode versions of operators and symbols in this post” yet no unicode quotes :E

[01:11] *** skids left
[01:11] <lucasb> I rakudobugged. thanks for the help AlexDaniel and babydrop!

[01:17] *** BenGoldberg left
[01:20] *** BenGoldberg joined
[01:20] <babydrop> AlexDaniel: I don't like them.

[01:20] <AlexDaniel> babydrop: who?

[01:20] <AlexDaniel> bots?

[01:20] <AlexDaniel> ah

[01:20] <AlexDaniel> no

[01:20] <AlexDaniel> quotes

[01:33] *** ssotka left
[01:34] *** lucasb left
[01:40] *** Actualeyes joined
[01:40] *** lucasb joined
[01:42] <lucasb> m: a.::

[01:42] <camelia> rakudo-moar 4fd6e9: OUTPUT«===SORRY!===␤MVMArray: Can't pop from an empty array␤»

[01:42] *** yqt left
[01:42] <lucasb> m: a.::(1)

[01:42] <camelia> rakudo-moar 4fd6e9: OUTPUT«===SORRY!===␤cannot stringify this␤»

[01:45] *** cdg left
[01:50] <AlexDaniel> cannot stringify what? :)

[01:50] <lucasb> can't touch this

[01:51] <AlexDaniel> lucasb: yea, both LTAs, not sure if there's anything else about it

[01:52] <AlexDaniel> the biggest problem there is that there's no line number

[01:52] <AlexDaniel> so good luck searching for the cause in your code, heh!

[01:52] <lucasb> ok, I don't know if there's anything to do. I just don't like to see internal errors leaking

[01:56] <AlexDaniel> lucasb: RT #129306 similar resolved ticket

[01:59] *** lucasb left
[02:01] *** pyrimidine joined
[02:01] <samcv> naice. regarding the Atom/github syntax highlighter

[02:02] <samcv> started the process of reforming the code so I in the future can just generate it for all the quoting constructs

[02:02] <samcv> that's my future plan. so then it can support every quoting construct

[02:02] <samcv> :)

[02:02] *** djbkd joined
[02:03] <samcv> and also make it easy to make a change in only one spot and have it affect all of them

[02:03] *** pyrimidine left
[02:06] *** djbkd left
[02:11] *** kalkin- left
[02:11] *** kalkin-_ joined
[02:13] *** kurahaupo_ joined
[02:14] *** kurahaupo__ left
[02:28] *** Herby_ joined
[02:28] <Herby_> o/

[02:30] <Herby_> Just wanted to say thanks to those who are writing for the 'Perl 6 Advent Calendar'. I'm enjoying the posts

[02:31] *** effbiai joined
[02:35] *** FROGGS left
[02:36] *** itcharlie1 joined
[02:38] *** labster left
[02:40] <AlexDaniel> bisect: say ‘hi’.indent(9999999999999999999)

[02:40] <bisectable6> AlexDaniel, Bisecting by exit code (old=2015.12 new=4fd6e94). Old exit code: 1

[02:40] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/e26ea2e21999e3c9cb1092040eeffdcd

[02:40] <bisectable6> AlexDaniel, (2016-07-08) https://github.com/rakudo/rakudo/commit/586f7847dcac9bd81bcc5d4866c0d74545fb17e5

[02:40] <AlexDaniel> MasterDuke: ↑, not that the old behavior was any better, but I'm still mentioning it because perhaps you want to be aware of this :)

[02:41] <MasterDuke> interesting, i've never touched indent(). i guess it uses x() under the hood

[02:44] <AlexDaniel> committable6: 2016.06,HEA Dsay ‘f’ x 9999999999999999999

[02:44] <committable6> AlexDaniel, ¦«2016.06»: ===SORRY!=== Error while compiling /tmp/6XSmEtAG6t␤Undeclared name:␤    Dsay used at line 1␤ «exit code = 1»␤¦«HEA»: Cannot find this revision

[02:45] <AlexDaniel> committable6: 2016.06,HEAD say ‘f’ x 9999999999999999999

[02:45] <committable6> AlexDaniel, ¦«2016.06»: repeat count (-8446744073709551617) cannot be negative␤  in block <unit> at /tmp/WttTnuZY7q line 1␤ «exit code = 1»␤¦«HEAD»: 

[02:45] <AlexDaniel> ya

[02:45] *** aindilis joined
[02:45] <AlexDaniel> committable6: 2016.06,HEAD say ‘f’ x -10

[02:45] <committable6> AlexDaniel, ¦«2016.06,HEAD»: 

[02:47] <AlexDaniel> MasterDuke: arguably the current behavior is better because the repeat count can actually be negative

[02:47] <AlexDaniel> hahaha

[02:48] *** mr-foobar left
[02:48] *** FROGGS joined
[02:49] *** mr-foobar joined
[02:50] *** BenGoldberg left
[02:51] *** BenGoldberg joined
[02:54] *** Ben_Goldberg joined
[02:54] *** BenGoldberg left
[02:54] *** Ben_Goldberg is now known as BenGoldberg

[02:57] *** Ben_Goldberg joined
[02:57] *** BenGoldberg left
[02:57] *** Ben_Goldberg is now known as BenGoldberg

[02:59] *** labster joined
[03:00] *** Ben_Goldberg joined
[03:00] *** BenGoldberg left
[03:00] *** Ben_Goldberg is now known as BenGoldberg

[03:02] *** Actualeyes left
[03:04] *** pyrimidine joined
[03:05] *** Sgeo joined
[03:06] *** kurahaupo__ joined
[03:06] *** kurahaupo_ left
[03:11] *** Sgeo left
[03:15] <Herby_> Anyone here working puzzles from Advent of Code this year?

[03:15] <Herby_> http://adventofcode.com/

[03:18] *** mrsolo joined
[03:18] *** noganex_ joined
[03:19] *** cfa joined
[03:21] *** noganex left
[03:22] <cfa> m: S/d// given 'abc'

[03:22] <camelia> rakudo-moar 4fd6e9: ( no output )

[03:22] <cfa> m: say S/d// given 'abc'

[03:22] <camelia> rakudo-moar 4fd6e9: OUTPUT«abc␤»

[03:23] <cfa> m: say S:g/d// given 'abc'

[03:23] <camelia> rakudo-moar 4fd6e9: OUTPUT«()␤»

[03:23] <cfa> bug?

[03:23] <cfa> (or am i missing something regarding :g?)

[03:25] <AlexDaniel> cfa: well…

[03:25] <AlexDaniel> bisect: say S:g/d// given 'abc'

[03:25] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=4fd6e94) because on both starting points the exit code is 0

[03:25] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/28dcb535797f4cd5272e62a9ad94386b

[03:25] <bisectable6> AlexDaniel, (2016-10-23) https://github.com/rakudo/rakudo/commit/b7201a8f22338a906f2d8027a21387e8f5c77f41

[03:26] <AlexDaniel> cfa: so yes, this is a bug

[03:26] <cfa> AlexDaniel: thanks

[03:26] <cfa> also, hello (sorry, i entered rather abruptly)

[03:26] <AlexDaniel> cfa: and turns out there was no test for it so we did not catch its appearance

[03:26] <AlexDaniel> cfa: will you submit a bug report?

[03:26] <cfa> sure, where can i find information on filing one?

[03:27] <AlexDaniel> huggable: bug

[03:27] <huggable> AlexDaniel, nothing found

[03:27] <AlexDaniel> huggable: rakudobug

[03:27] <huggable> AlexDaniel, [email@hidden.address] or use perl6 query on http://rt.perl.org ; see https://github.com/rakudo/rakudo/#reporting-bugs

[03:27] <cfa> AlexDaniel: thanks, i'll do so within the hour

[03:27] <AlexDaniel> cfa: basically you just have to write an email to [email@hidden.address]
[03:27] * cfa nods

[03:28] <AlexDaniel> cfa: please also note in your report that bisectable says that b7201a8f223 is the cause

[03:28] <AlexDaniel> committable6: b7201a8f223^,b7201a8f223 say S:g/d// given 'abc'

[03:28] <committable6> AlexDaniel, ¦«b7201a8f223^»: abc␤¦«b7201a8»: ()

[03:28] <cfa> will do

[03:29] <AlexDaniel> babydrop: that will be a 6th [REGRESSION] ticket today :)

[03:30] <AlexDaniel> cfa: and thanks for coming here, this is actually important

[03:31] <AlexDaniel> … though it would've been better if you asked this question one month ago :)

[03:32] <AlexDaniel> committable6: 2016.10,2016.11,HEAD say S:g/d// given 'abc'

[03:32] <committable6> AlexDaniel, ¦«2016.10»: abc␤¦«2016.11,HEAD»: ()

[03:35] *** aborazmeh left
[03:42] *** ChoHag left
[03:42] *** stanley joined
[03:43] *** ChoHag joined
[03:43] *** FROGGS left
[03:43] *** FROGGS joined
[03:45] <cfa> AlexDaniel: :)

[03:47] <tailgate> m: my @directions = <N E S W>; say @directions.grep-index('E');

[03:47] <camelia> rakudo-moar 4fd6e9: OUTPUT«No such method 'grep-index' for invocant of type 'Array'␤  in block <unit> at <tmp> line 1␤␤»

[03:47] <tailgate> m: my List @directions = <N E S W>; say @directions.grep-index('E');

[03:47] <camelia> rakudo-moar 4fd6e9: OUTPUT«Type check failed in assignment to @directions; expected List but got Str ("N")␤  in block <unit> at <tmp> line 1␤␤»

[03:47] <AlexDaniel> tailgate: what's grep-index?

[03:48] <AlexDaniel> m: my @directions = <N E S W>; say @directions.grep(‘E’, :k);

[03:48] <camelia> rakudo-moar 4fd6e9: OUTPUT«(1)␤»

[03:48] <tailgate> doh

[03:48] <AlexDaniel> ↑ that's what you want, I guess?

[03:48] <geekosaur> the @ already says list; the type is that of elements

[03:49] <geekosaur> (well, it says Positional, but that gets you List by default...)

[03:49] *** Herby_ left
[03:49] *** rindolf left
[03:50] <tailgate> yeah

[03:53] <cfa> AlexDaniel: submitted

[03:56] <AlexDaniel> cfa++

[04:02] *** labster left
[04:03] *** Sgeo joined
[04:03] *** Ben_Goldberg joined
[04:04] *** BenGoldberg left
[04:04] *** Ben_Goldberg is now known as BenGoldberg

[04:06] <AlexDaniel> m: say <a b c>[*-18446744073709551618]

[04:06] <camelia> rakudo-moar 4fd6e9: OUTPUT«b␤»

[04:06] <AlexDaniel> :-|

[04:08] <AlexDaniel> wait, what

[04:08] <AlexDaniel> m: my @a = <a b c>; @a[*-18446744073709551616]:delete; say @a

[04:08] <camelia> rakudo-moar 4fd6e9: OUTPUT«[a b c]␤»

[04:08] <AlexDaniel> m: my @a = <a b c>; @a[*-18446744073709551617]:delete; say @a

[04:08] <camelia> rakudo-moar 4fd6e9: OUTPUT«[a b]␤»

[04:08] <AlexDaniel> m: my @a = <a b c>; @a[*-18446744073709551618]:delete; say @a

[04:08] <camelia> rakudo-moar 4fd6e9: OUTPUT«[a (Any) c]␤»

[04:13] *** Ben_Goldberg joined
[04:13] *** BenGoldberg left
[04:13] *** Ben_Goldberg is now known as BenGoldberg

[04:14] *** BenGoldberg left
[04:18] *** itcharlie1 left
[04:24] <ugexe> how do I submit my post for the advent?

[04:25] *** AlexDaniel left
[04:30] <samcv> sweet :) i have the generation of all the q[] qq[] and Q[] constructs fully automated

[04:31] <samcv> i have q<< >>, q (( )), q[[ ]], q<< >>, q/ /, q{ }, q ' ', q" "

[04:32] <samcv> what more to add now? now i only have to add them to the list and it'll generate it for me. very happy with this

[04:32] <samcv> no more copy pasting

[04:33] *** xtreak joined
[04:35] *** aindilis left
[04:36] *** Actualeyes joined
[04:49] *** pierre_ left
[04:56] *** pierre_ joined
[05:01] *** pierre_ left
[05:13] <samcv> Wow. ok i finally got using any delimiter you want (same char) like q%this%.

[05:13] <samcv> this is coming together really well

[05:14] *** yoleaux left
[05:15] *** parisba_ joined
[05:15] *** bisectable6 left
[05:15] *** committable6 left
[05:15] *** PotatoGim_ joined
[05:15] *** benchable6 left
[05:15] *** parisba left
[05:16] *** _28_ria left
[05:16] *** unicodable6 left
[05:16] *** evalable6 left
[05:16] *** parisba_ is now known as parisba

[05:16] *** zostay joined
[05:16] *** _28_ria joined
[05:16] *** mephinet joined
[05:17] *** BinGOs joined
[05:17] *** PotatoGim_ is now known as PotatoGim

[05:20] *** clkao joined
[05:20] *** TeamBlast joined
[05:23] *** dj_goku joined
[05:23] *** mithaldu_ joined
[05:24] *** djbkd joined
[05:24] *** BuildTheRobots joined
[05:25] *** resol joined
[05:29] *** xinming left
[05:29] *** xinming joined
[05:31] *** dylanwh joined
[05:32] *** Sgeo left
[05:43] *** resol left
[05:45] *** FROGGS left
[05:45] *** asdasadasdasd joined
[05:46] <asdasadasdasd> hi

[05:47] *** brillenfux joined
[05:47] <asdasadasdasd> whats the use of sub usage (;$)?

[05:49] <samcv> ?

[05:51] <samcv> asdasadasdasd, explain?

[05:55] *** Cabanossi left
[05:55] *** telex left
[05:55] *** Cabanossi joined
[06:05] *** Tonik joined
[06:10] *** khw left
[06:16] *** dontbe^2 left
[06:16] *** dontbe^2 joined
[06:17] *** pierre_ joined
[06:18] *** rumble joined
[06:18] *** djbkd left
[06:19] *** rumble is now known as grumble

[06:29] *** dontbe^2 left
[06:30] *** pyrimidine left
[06:30] *** perigrin joined
[06:30] *** pyrimidine joined
[06:31] *** zostay left
[06:31] *** zostay joined
[06:32] *** telex joined
[06:32] *** TEttinger left
[06:33] *** TEttinger joined
[06:34] *** xxpor joined
[06:35] *** domidumont joined
[06:37] *** dontbe^2 joined
[06:43] *** Sgeo joined
[06:45] *** domidumont left
[06:52] *** RabidGravy joined
[06:54] <samcv> m: sub circumfix:<⟅ ⟆> ( Mu $a ) is raw { bag($a) }; say ⟅'test'⟆

[06:54] <camelia> rakudo-moar 4fd6e9: OUTPUT«bag(test)␤»

[06:54] <samcv> u: ⟅

[06:54] <samcv> u: bag delimiter

[07:00] *** bjz joined
[07:04] *** pierre_ left
[07:04] *** ufobat joined
[07:05] *** dj_goku_ joined
[07:05] *** dj_goku_ left
[07:05] *** dj_goku_ joined
[07:05] *** Khisanth joined
[07:07] *** pierre_ joined
[07:09] <moritz> samcv: re rakudo.org, please /msg me your email address

[07:09] <samcv> awesome

[07:09] <samcv> messaged

[07:09] *** dj_goku left
[07:09] *** CIAvash joined
[07:11] <moritz> invitation sent

[07:11] *** seatek joined
[07:12] *** ponbiki_ is now known as ponbiki

[07:15] *** domidumont joined
[07:17] <seatek> m: sub t(*%h) { say 'hi' }; my $a = 'key1'; my $b = 'key2'; t($a => 1, $b => 2);

[07:17] <camelia> rakudo-moar 4fd6e9: OUTPUT«Too many positionals passed; expected 0 arguments but got 2␤  in sub t at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[07:17] <seatek> m: sub t(*%h) { say 'hi' }; my $a = 'key1'; my $b = 'key2'; t(a => 1, b => 2);

[07:17] <camelia> rakudo-moar 4fd6e9: OUTPUT«hi␤»

[07:17] <seatek> i had no idea that would happen :)

[07:17] *** kurahaupo__ left
[07:18] <seatek> is there a way to pass a variable key name in that form? i may have gone brain dead too.

[07:20] <seatek> m: sub t(*%h) { say 'hi' }; my $a = 'key1'; my $b = 'key2'; t({$a => 1, $b => 2});

[07:20] <camelia> rakudo-moar 4fd6e9: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in sub t at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[07:20] <seatek> m: sub t(*%h) { say 'hi' }; my $a = 'key1'; my $b = 'key2'; t(($a => 1, $b => 2));

[07:20] <camelia> rakudo-moar 4fd6e9: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in sub t at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[07:20] <seatek> m: sub t(*%h) { say 'hi' }; my $a = 'key1'; my $b = 'key2'; t(({$a => 1, $b => 2}));

[07:20] <camelia> rakudo-moar 4fd6e9: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in sub t at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[07:20] <seatek> :)

[07:21] <seatek> m: sub t(*%h) { say 'hi' }; my $a = 'key1'; my $b = 'key2'; t('a' => 1, 'b' => 2);

[07:21] <camelia> rakudo-moar 4fd6e9: OUTPUT«Too many positionals passed; expected 0 arguments but got 2␤  in sub t at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[07:21] *** domidumont left
[07:21] <seatek> m: sub t(*%h) { say 'hi' }; my $a = 'key1'; my $b = 'key2'; t(a => 1, b => 2);

[07:21] <camelia> rakudo-moar 4fd6e9: OUTPUT«hi␤»

[07:22] *** domidumont joined
[07:22] *** yoleaux joined
[07:22] *** ChanServ sets mode: +v yoleaux

[07:23] <ufobat> m: sub t(*%h) { say dd %h }; my $a = "key1"; my $b = "key2"; t(|{"a" => 1, "b" => 2});

[07:23] <camelia> rakudo-moar 4fd6e9: OUTPUT«{:a(1), :b(2)}␤Nil␤»

[07:24] <seatek> oh, do the thingy! hadn't tried that ;)

[07:25] <seatek> yes that works :) thanks ufobat++ ! :)

[07:25] <ufobat> wow, the first time i could help someone!

[07:26] <seatek> ah, the unfurling pipe solves every problem ;)

[07:26] <seatek> well glad it was me! :)

[07:26] *** labster joined
[07:28] *** wamba joined
[07:34] *** _28_ria left
[07:37] *** bjz left
[07:38] *** cibs left
[07:39] *** cibs joined
[07:45] *** darutoko joined
[08:01] *** dontbe^2 left
[08:02] *** dontbe^2 joined
[08:02] *** pyrimidine left
[08:02] *** pyrimidine joined
[08:03] *** notbenh left
[08:03] *** notbenh joined
[08:05] *** jonas joined
[08:06] *** xtreak left
[08:07] *** xtreak joined
[08:11] *** abraxxa joined
[08:15] *** bjz joined
[08:19] *** ponbiki left
[08:19] *** dontbe^2 left
[08:23] *** pierre_ left
[08:27] *** ponbiki joined
[08:27] *** ponbiki is now known as Guest97524

[08:29] *** pierre_ joined
[08:30] *** seatek left
[08:32] *** dontbe^2 joined
[08:32] *** bjz left
[08:33] *** cognominal left
[08:34] *** cognominal joined
[08:34] *** zakharyas joined
[08:36] *** zakharyas left
[08:38] *** zakharyas joined
[08:46] *** wamba left
[08:48] *** cognominal left
[08:51] *** bjz joined
[08:53] *** cognominal joined
[08:55] *** xtreak left
[08:59] *** bjz left
[08:59] *** g4 joined
[08:59] *** g4 left
[08:59] *** g4 joined
[09:08] *** pmurias joined
[09:08] <pmurias> hi

[09:08] *** dakkar joined
[09:11] <samcv> hmm it seems that not all the same delimiters that are ok for q[] work for #`[ multi line comments. hmm

[09:11] <samcv> m: #`“ comment ” say 'hi'

[09:11] <camelia> rakudo-moar 4fd6e9: OUTPUT«hi␤»

[09:11] *** pyrimidine left
[09:11] <samcv> hmm or maybe

[09:12] <samcv> maybe i messed up

[09:12] <samcv> yeah they seem to work. never mind

[09:12] <samcv> good that saves me trouble

[09:13] *** bjz joined
[09:13] *** pyrimidine joined
[09:21] *** Actualeyes left
[09:22] <dalek> mu: 6aa6800 | ab5tract++ | misc/perl6advent-2016/schedule:

[09:22] <dalek> mu: Add myself to the calendar

[09:22] <dalek> mu: 

[09:22] <dalek> mu: I took the last slot due to tuits and theme (snow on Christmas Eve, no

[09:22] <dalek> mu: matter where you live). The post I displaced explicitly told me to remove

[09:22] <dalek> mu: itself from the listing.

[09:22] <dalek> mu: review: https://github.com/perl6/mu/commit/6aa680009c

[09:30] <dalek> doc: 71eb971 | titsuki++ | doc/Language/syntax.pod6:

[09:30] <dalek> doc: Delete >>.say

[09:30] <dalek> doc: review: https://github.com/perl6/doc/commit/71eb97181c

[09:30] <dalek> doc: 7b3c1d0 | titsuki++ | doc/Language/syntax.pod6:

[09:30] <dalek> doc: Merge pull request #1037 from titsuki/fix-hyper-say

[09:30] <dalek> doc: 

[09:30] <dalek> doc: Delete >>.say

[09:30] *** n0xff joined
[09:30] <dalek> doc: review: https://github.com/perl6/doc/commit/7b3c1d0284

[09:30] *** bjz left
[09:31] <timotimo> yes

[09:31] <timotimo> good idea

[09:32] *** xtreak joined
[09:41] *** labster left
[09:44] *** bjz joined
[09:49] *** TEttinger left
[09:50] *** seatek joined
[09:55] *** rindolf joined
[09:55] *** aindilis joined
[10:00] <pmurias> TimToady: should 2**9999999999999999999999 return Inf or raise an X::Numeric::Overflow exception?

[10:07] *** TEttinger joined
[10:11] <DrForr> X::Numeric::You'veGottaBeKiddingMe

[10:12] <jnthn> X::Numeric::FFS::Man::There'sLessAtomsInTheUniverse

[10:12] <DrForr> There's only 10**86 or so, IIRC.

[10:13] <jnthn> m: say  10**86 < 2**9999999999999999999999

[10:13] <camelia> rakudo-moar 4fd6e9: OUTPUT«Numeric overflow␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[10:13] <jnthn> oh heh :)

[10:13] <jnthn> m: say  10**86 < 2**999999999999999999999

[10:13] <camelia> rakudo-moar 4fd6e9: OUTPUT«Numeric overflow␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[10:13] <jnthn> m: say  10**86 < 2**9999999999999999999

[10:13] <camelia> rakudo-moar 4fd6e9: OUTPUT«Numeric overflow␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[10:13] <jnthn> m: say  10**86 < 2**999999999999

[10:13] <camelia> rakudo-moar 4fd6e9: OUTPUT«Numeric overflow␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[10:13] <jnthn> Wow :)

[10:13] <jnthn> m: say  10**86 < 2**9999999999

[10:13] <camelia> rakudo-moar 4fd6e9: OUTPUT«Numeric overflow␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[10:13] <jnthn> m: say  10**86 < 2**999999

[10:13] <camelia> rakudo-moar 4fd6e9: OUTPUT«True␤»

[10:13] <jnthn> Yeah, OK, now I see how big that number is :D

[10:14] *** TEttinger left
[10:18] <samcv> i don't think it should return Inf.. that just sounds like more trouble

[10:23] *** sena_kun joined
[10:28] *** AlexDaniel joined
[10:29] <AlexDaniel> pmurias: well, TimToady was the one who added X::Numeric::Overflow for this case

[10:29] *** zakharyas left
[10:34] *** zakharyas joined
[10:36] *** ChoHag left
[10:36] <pmurias> AlexDaniel: yes, but the implementation depends on a bug

[10:37] <AlexDaniel> which bug?

[10:39] <pmurias> pow_I is broken

[10:39] <pmurias> nqp::pow_I

[10:40] <pmurias> on all backends (js, moar, jvm)

[10:40] <pmurias> in different ways :(

[10:40] <pmurias> j: say((-1) * 999999999)

[10:40] <camelia> rakudo-jvm 8ca367: OUTPUT«-999999999␤»

[10:41] <pmurias> j: say((2) * 9999999999999999999998)

[10:41] <camelia> rakudo-jvm 8ca367: OUTPUT«19999999999999999999996␤»

[10:41] <AlexDaniel> m: say((-1) * 999999999)

[10:41] <camelia> rakudo-moar 4fd6e9: OUTPUT«-999999999␤»

[10:42] <AlexDaniel> m: say((-1) ** 999999999)

[10:42] <camelia> rakudo-moar 4fd6e9: OUTPUT«-1␤»

[10:42] <AlexDaniel> … right …

[10:43] <pmurias> j: say((2) ** 99999999999998)

[10:43] <camelia> rakudo-jvm 8ca367: OUTPUT«Inf␤»

[10:43] <pmurias> j: say((2) ** 99999999999997)

[10:43] <camelia> rakudo-jvm 8ca367: OUTPUT«-Inf␤»

[10:43] <AlexDaniel> by the way, *able6 bots are down because they cannot connect for some reason

[10:44] <pmurias> AlexDaniel: ^^ # why is this -Inf?

[10:44] <AlexDaniel> pmurias: no, this is definitely broken

[10:45] *** pierre_ left
[10:45] <AlexDaniel> the whole point of the fix was to make sure it does not return shit like this :)

[10:46] <AlexDaniel> https://rt.perl.org/Ticket/Display.html?id=125811

[10:47] *** pierre_ joined
[10:48] <AlexDaniel> pmurias: wait, actually, what is the problem exactly?

[10:48] <AlexDaniel> (-1) ** stuff seems to be working fine

[10:49] <AlexDaniel> and everything else too

[10:49] <AlexDaniel> on moarvm at least

[10:49] <AlexDaniel> not on JVM, but isn't it a problem of jvm? :)

[10:49] <AlexDaniel> *backend

[10:50] <pmurias> m: say((-1) ** 99999999999999999999999999999999999999998);

[10:50] <camelia> rakudo-moar 4fd6e9: OUTPUT«Numeric overflow␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[10:51] *** pierre_ left
[10:51] <masak> pmurias: I think most operations on doubles that overflow return Inf rather than throwing an exception.

[10:51] <AlexDaniel> well, are you saying that this is LTA?

[10:52] <masak> no, I'm saying that there's IEEE 754 precedent -- and it makes sense to follow it

[10:52] <AlexDaniel> that was the question to pmurias actually

[10:53] <seatek> my first reaction was to return unicode crying cats, but that sounds better probably.

[10:53] <AlexDaniel> (if (-1) ** somethinghuge should throw instead of returning -1 or 1)

[10:54] <masak> that one feels to me like a NaN-returning operation

[10:54] <masak> but my intuition might be off here

[10:55] <DrForr> I wouldn't expect there to be any special casing for odd/even integers if the actual number would ordinarily be outside integer range.

[10:55] <masak> I'm probably basing that on "the corresponding sequence doesn't converge", which makes NaN reasonable

[10:55] <masak> DrForr: even in the presence of bigints? is it difficult to find out if a huge bigint is odd or even?

[10:57] <DrForr> Well, my reasoning is just that if you're using (-1)**$n, then you're going to be doing something else with $n that will carry *that* into NaN territory.

[10:57] *** yoleaux left
[10:58] <AlexDaniel> m: say((-1) ** 4294967295)

[10:58] <camelia> rakudo-moar 4fd6e9: OUTPUT«-1␤»

[10:58] <AlexDaniel> m: say((-1) ** 4294967296)

[10:58] <camelia> rakudo-moar 4fd6e9: OUTPUT«Numeric overflow␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[10:58] <AlexDaniel> m: say((1) ** 9999999999999999999999999999999999999999999999999999999999999999999)

[10:58] <camelia> rakudo-moar 4fd6e9: OUTPUT«1␤»

[11:00] *** yoleaux joined
[11:00] *** ChanServ sets mode: +v yoleaux

[11:01] <AlexDaniel> uummmmmmmmmmm

[11:01] <dalek> doc: 905377f | Altai-man++ | doc/Type/ (3 files):

[11:01] <dalek> doc: Minor fixes: missing whitespace, redundant brackets, redundant `is export`.

[11:01] <dalek> doc: review: https://github.com/perl6/doc/commit/905377f266

[11:02] *** xtreak left
[11:02] <AlexDaniel> m: say (42 ** 999).chars

[11:02] <camelia> rakudo-moar 4fd6e9: OUTPUT«1622␤»

[11:02] <AlexDaniel> m: say (42 ** 999.0).chars

[11:02] <camelia> rakudo-moar 4fd6e9: OUTPUT«3␤»

[11:02] <babydrop> asdasadasdasd: that looks like a Perl 5 prototype. Try asking in #perl

[11:02] <AlexDaniel> m: say 42 ** 999.0

[11:02] <camelia> rakudo-moar 4fd6e9: OUTPUT«Inf␤»

[11:03] <AlexDaniel> this is probably expected, but it did surprise me a bit

[11:03] <DrForr> Or put differently, tacking (-1)**$n onto a term isn't likely to matter because the rest of the term based on $n will probably already be overflowing.

[11:13] *** peteretep joined
[11:16] *** ChoHag joined
[11:16] *** bisectable6 joined
[11:16] *** ChanServ sets mode: +v bisectable6

[11:16] *** evalable6 joined
[11:16] *** unicodable6 joined
[11:17] *** benchable6 joined
[11:17] *** committable6 joined
[11:17] *** ChanServ sets mode: +v committable6

[11:18] *** lucasb joined
[11:19] *** cognominal left
[11:19] <arnsholt> DrForr: Well, that'd depend on whether the rest of the term is sub-linear in $n or linear or whatever =)

[11:19] *** committable6_ joined
[11:21] *** benchable6 left
[11:21] *** committable6 left
[11:23] <babydrop> Man, I wish brian would at least pop into this channel and just drop his code in for 2 seconds before writing his "tips". https://www.learningperl6.com/2016/12/05/quick-tip-20-way-off-base/

[11:23] <babydrop> That sprintf concoction is awful.

[11:23] <babydrop> And in the comments they uglify it even more to workaround a Failure.

[11:24] <babydrop> In 2 seconds in this channel, someone would say "hey, how about you write that as @*ARGS[0].parse-base(8).base(2) instead"

[11:24] *** xtreak joined
[11:24] *** cognominal joined
[11:24] <babydrop> GRUMBLE!

[11:24] <babydrop> </uncoffeenated-rant>

[11:25] <arnsholt> parse-base is pretty new

[11:25] <arnsholt> I remember the discussion of it, a month ago maybe?

[11:25] *** zostay left
[11:25] <babydrop> star: "22".parse-base(8).base(2).say

[11:25] <camelia> star-m 2016.10: OUTPUT«No such method 'parse-base' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[11:25] <AlexDaniel> babydrop: I agree

[11:25] *** zostay joined
[11:25] <babydrop> committable6_: 2016.11 "22".parse-base(8).base(2).say

[11:25] <committable6_> babydrop, ¦«2016.11»: 10010

[11:26] <babydrop> arnsholt: it's in latest star at least

[11:26] <babydrop> The problem is many people view brian as a knowledgeable authority and eat up all his tips as top-shelf goodies

[11:27] <AlexDaniel> and it is kinda scary because he is writing a book…

[11:27] <babydrop> At least the book will be reviewed 

[11:27] <AlexDaniel> 🤷

[11:28] <El_Che> If the tone is friendly, I am pretty sure he'll appreciate the input

[11:28] <babydrop> u: 🤷

[11:28] <unicodable6> babydrop, U+1F937 SHRUG [So] (🤷)

[11:28] <El_Che> (not "pretty sure", but I hope)

[11:28] <babydrop> El_Che: on what? the tip is published already

[11:28] <dalek> doc/consistent-return-types: 40a97e3 | Altai-man++ | doc/Type/ (2 files):

[11:28] <dalek> doc/consistent-return-types: Changes need to resolve a merge conflict.

[11:28] <dalek> doc/consistent-return-types: review: https://github.com/perl6/doc/commit/40a97e39d7

[11:28] <dalek> doc/consistent-return-types: ae816b9 | Altai-man++ | t/return-type.t:

[11:28] <dalek> doc/consistent-return-types: Temporary test file deletion

[11:28] <dalek> doc/consistent-return-types: review: https://github.com/perl6/doc/commit/ae816b9600

[11:29] <El_Che> babydrop: I mean that the tip can be edited as it's not set in stone

[11:35] <babydrop> Well, I left the .parse-base version in the comments.

[11:36] <babydrop> Tho not in "the tone is friendly" :}

[11:37] <lucasb> I don't see, the comments must be moderated

[11:38] *** travis-ci joined
[11:38] <travis-ci> Doc build failed. Altai-man 'Temporary test file deletion'

[11:38] <travis-ci> https://travis-ci.org/perl6/doc/builds/181930636 https://github.com/perl6/doc/compare/88c2f5fcfdaf...ae816b9600c7

[11:38] *** travis-ci left
[11:39] <lucasb> book author isolated from collective community knowledge and best practices?

[11:39] <babydrop> lucasb: just for his "tips". The private book repo has several of core hackers added to oversee stuff

[11:40] <lucasb> ah, alright. I feels happy with this fact

[11:40] <babydrop> Yeah, the comment says "awaiting moderation". I just wrote The much simpler way to write that is as: @*ARGS[0].parse-base(8).base(2) Instead of that ugly sprintf concoction. .parse-base also handles negative numbers, unlike the :16() radix literal syntax.

[11:41] <CIAvash> another example is https://www.learningperl6.com/2016/11/20/the-z-zip-operator-lazy-ranges-and-terse-hash-creation/ it may give the idea that it is the way to do it. unfortunately, I replied on twitter instead of commenting. fortunately TimToady mentioned the better way of doing it

[11:41] <CIAvash> but not everyone is going to read the comments

[11:43] *** stanley left
[11:46] *** stanley joined
[11:48] <pmurias> masak: (-1) ** $big-number being NaN seems like the worst option possible

[11:51] <lucasb> BTW, babydrop++ for making syntax-highlighted post

[11:51] *** xtreak left
[11:52] <babydrop> pmurias: why NaN? I see masak mentioning Inf

[11:53] <babydrop> oh nm

[11:54] *** xtreak joined
[11:54] *** xtreak left
[11:54] <babydrop> the IEEE says overflows give the Inf with sign of the limit, but I don't how we can figure out a sign here, so maybe it is specialcased to something else

[11:55] <babydrop> m: say (-125)**(1/3)

[11:55] <camelia> rakudo-moar b2ac4e: OUTPUT«NaN␤»

[11:55] * babydrop rather see this DTRT than NaN :D

[11:55] <babydrop> m: say (my num $ = -1) ** (my num $ = 999)

[11:55] <camelia> rakudo-moar b2ac4e: OUTPUT«This type cannot unbox to a native number: P6opaque, Int␤  in block <unit> at <tmp> line 1␤␤»

[11:55] <babydrop> m: say (my num $ = -1e0) ** (my num $ = 999e0)

[11:55] <camelia> rakudo-moar b2ac4e: OUTPUT«-1␤»

[11:56] <babydrop> m: say (my num $ = -1e0) ** (my num $ = 1.4e308)

[11:56] <camelia> rakudo-moar b2ac4e: OUTPUT«1␤»

[11:57] <babydrop> hm, right 'cause we don't have enough precision for the last digits, it'll always be an even number so we can assume a 1 on super large numbers

[11:57] <babydrop> oh wait

[11:57] <babydrop> m: say (my num $ = -1e0) ** ((my num $ = 1.4e308) + (my num $ = 1))

[11:57] <camelia> rakudo-moar b2ac4e: OUTPUT«This type cannot unbox to a native number: P6opaque, Int␤  in block <unit> at <tmp> line 1␤␤»

[11:57] <babydrop> m: say (my num $ = -1e0) ** ((my num $ = 1.4e308) + (my num $ = 1e0))

[11:57] <camelia> rakudo-moar b2ac4e: OUTPUT«1␤»

[11:57] <babydrop> Well, the power is calcualated first and it ain't got enough precision still... so... it sorta-kinda makes sense? :D

[11:57] <pmurias> babydrop: isn't it -Inf if the base is negative and the exponent is odd?

[11:58] <pmurias> babydrop: we are talking about bigints here

[11:59] <broquaint> m: sub($x) { "got $x" }((1,2))

[11:59] <camelia> rakudo-moar b2ac4e: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$x' is not declared␤at <tmp>:1␤------> 3sub(7⏏5$x) { "got $x" }((1,2))␤»

[11:59] <babydrop> pmurias: we'd should check IEEE 754, it goes pretty well into defining powers

[11:59] <broquaint> Can anonymous subs have signatures?

[12:00] <babydrop> pmurias: it may list -1 ** Inf as a spoecial case

[12:00] <DrForr> m: return sub($x){$x++}

[12:00] <camelia> rakudo-moar b2ac4e: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$x' is not declared␤at <tmp>:1␤------> 3return sub(7⏏5$x){$x++}␤»

[12:00] <babydrop> broquaint: put space after `sub`

[12:00] <broquaint> m: sub ($x) { "got $x" }((1,2))

[12:00] <camelia> rakudo-moar b2ac4e: ( no output )

[12:00] <babydrop> broquaint: otherwise it thinks you're trying to call a function named sub()

[12:00] <broquaint> babydrop: Thanks!

[12:00] <DrForr> Shouldn't do this while I'm looking at perl5 code :)

[12:02] <babydrop> IEEE 754: http://www.csee.umbc.edu/~tsimo1/CMSC455/IEEE-754-2008.pdf

[12:02] <babydrop> search for pow to find the powers stuff

[12:02] * babydrop runs to catch the bus

[12:02] <pmurias> babydrop: it's not -1 ** Inf it's -1 ** (number we arbitrarily decided is too big)

[12:02] *** Skarsnik joined
[12:02] <broquaint> m: sub ($x) { say "got $x $x.WHAT" }((1,2))

[12:02] <camelia> rakudo-moar b2ac4e: OUTPUT«got 1 2 1 2.WHAT␤»

[12:03] <babydrop> pmurias: and "too big" is Inf with the sign of the limit

[12:03] <broquaint> I'm failing to grok string interpolation :/

[12:03] <babydrop>  m: sub ($x) { say "got $x $x.WHAT()" }((1,2))

[12:03] <camelia> rakudo-moar b2ac4e: OUTPUT«Use of uninitialized value of type List in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in sub  at <tmp> line 1␤got 1 2 ␤»

[12:03] <babydrop>  m: sub ($x) { say "got $x $x.^name()" }((1,2))

[12:03] <camelia> rakudo-moar b2ac4e: OUTPUT«got 1 2 List␤»

[12:03] <babydrop> broquaint: you need () on methods

[12:03] <broquaint> babydrop: Thanks again :)

[12:03] <babydrop> and .WHAT returns a type object which is undefined and doesn't stringify well

[12:06] <broquaint> Good to know :)

[12:14] <babydrop> m: say (-1)**Inf

[12:14] <camelia> rakudo-moar b2ac4e: OUTPUT«1␤»

[12:14] *** bjz_ joined
[12:14] <babydrop> m: say (-1)**-Inf

[12:14] <camelia> rakudo-moar b2ac4e: OUTPUT«1␤»

[12:14] <babydrop> oh right

[12:15] *** bjz left
[12:15] <babydrop> pmurias, so I guess the super large power would always result in 1

[12:16] <pmurias> babydrop: no, "too big" is a big integer bigger than 2**32

[12:17] *** CIAvash left
[12:17] <babydrop> I missed the start of this discussion, but how come we are arbitrarily deciding thw number is too big? Doesn't even P5 let you have numbers as big as your ram or something?

[12:17] <pmurias> m: say( (-1) ** 17179869184)

[12:17] <camelia> rakudo-moar b2ac4e: OUTPUT«Numeric overflow␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[12:18] <pmurias> babydrop: P5 doesn't have builtin bigints

[12:18] <babydrop> ok

[12:19] <pmurias> babydrop: we make that decision to prevent things because 2 ** 17179869184 is too big a number to store naively in ram

[12:20] *** CIAvash joined
[12:21] <pmurias> babydrop: you might actually fit in that one but if the exponent gets a bit bigger it won't fit for sure

[12:21] <babydrop> pmurias, yet it behaves like I described: treating uber large numbers as Inf http://i.imgur.com/Bw3oPvh.png

[12:22] *** skids joined
[12:25] <babydrop> the first one that still gave -1 seems to be even bigger than what ours dies with

[12:25] <pmurias> babydrop: P5 turns big integers into doubles

[12:25] <babydrop> ah

[12:25] <babydrop> ok

[12:26] <ggoebel> slightly off topic question... a while back someone posted a url to a web based "learn to program" site which taught a programming (javascript I think) by having you learn enough code to escape increasingly difficult ascii art prisons. Does anyone remember what that site was? I think one of my teenagers might really like that approach.

[12:27] <pmurias> babydrop: I'll just fix (-1)**$big-number to return the proper answer

[12:28] <babydrop> pmurias, which one is it?

[12:30] *** kurahaupo__ joined
[12:34] <moritz> 1 if $big-number is even, -1 if it's odd

[12:37] <babydrop> so even if the number is too big to handle we still can figure out its oddness? weird

[12:39] <babydrop> or should I say that's... odd :D

[12:41] *** cibs left
[12:42] <DrForr> Well, we'd need the string representation, figure out its base and work from that; I ... won't make the other comment(s) that I ordinarily would.

[12:42] <babydrop> What comments?

[12:43] <ggoebel> found it... https://alexnisnevich.github.io/untrusted/

[12:43] *** cibs joined
[12:44] *** canopus left
[12:45] *** mawkish joined
[12:47] * DrForr returns to watching https://www.youtube.com/watch?v=_wfR4hRE9zk while trying to get some work done.

[12:47] *** AlexDaniel left
[12:49] *** canopus joined
[12:49] *** cognominal left
[12:50] *** cognominal joined
[13:01] <El_Che> DrForr: it's safer than doing some glass blowing while trying to look at your code

[13:02] <DrForr> With my code? Not by much. :)

[13:05] *** pierre_ joined
[13:05] <ggoebel> safer than a tesla lightning gun... https://youtu.be/_fTC_Ud_k3U

[13:05] <ggoebel> skip to 5m30s

[13:10] *** pierre_ left
[13:10] *** lizmat joined
[13:10] *** AlexDaniel joined
[13:11] *** lizmat_ joined
[13:12] <lucasb> can the output of 'perl -h' be de-indented 4 spaces?

[13:12] <lucasb> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Compiler.nqp#L66

[13:13] <lucasb> just strip the 4 space indentation from that string

[13:13] <lucasb> or use a heredoc, if the literal code layout matters

[13:14] <babydrop> lucasb: would you submit a PR?

[13:14] <lucasb> idk if heredoc was not used in the first place because of some optimization or limitation of using heredocs in NQP

[13:14] <lucasb> babydrop: which version do you prefer? stripped indetation with quotes or heredocs?

[13:15] <ilmari> .oO( indented heredocs? )

[13:15] *** lizmat left
[13:16] <lucasb> about .indent($negative-number)

[13:17] <babydrop> lucasb: I don't think heredocs work in nqp (or I've just tried wrong). I'd be OK with the message just moved in source code flush to the left side

[13:17] <babydrop> nqp: "  x".indent(-1)

[13:17] <camelia> nqp-moarvm: OUTPUT«Cannot find method 'indent': no method cache and no .^find_method␤   at <tmp>:1  (<ephemeral file>:<mainline>)␤ from gen/moar/stage2/NQPHLL.nqp:1536  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/NQPHLL.moarvm:eval)␤ from gen/moar/stage2/NQPHLL.nqp:1739  (/ho…»

[13:17] <Skarsnik> hello, here some result of my perf test: https://gist.github.com/Skarsnik/e2d531f1095e12fb1d8bc0646ad1d89f not sure how useful is that x)

[13:17] <lucasb> m: say "  foo\n  bar".indent(-2)

[13:17] <camelia> rakudo-moar b2ac4e: OUTPUT«foo␤bar␤»

[13:17] <[Coke]> ggoebel++ # was probably me. I've lost a few hours to that site. :)

[13:17] <lucasb> m: say "  foo\n\n  bar".indent(-2)

[13:17] <camelia> rakudo-moar b2ac4e: OUTPUT«foo␤␤bar␤»

[13:18] <babydrop> lucasb: src/Perl6/Compiler.nqp is nqp code, tho, isn't it?

[13:18] <lucasb> babydrop: yes, nqp. I'll just strip the indentation then

[13:18] <babydrop> lucasb: I guess I should've asked first... how come we're de-denting it?

[13:19] <lucasb> babydrop: sorry, didn't understand. was a joke? :)

[13:19] *** lukaramu joined
[13:20] <babydrop> lucasb: lol, no. I mean what's the reason for this change? To make prettier or was there another reason?

[13:20] *** lizmat_ left
[13:20] <lucasb> well :) I pay attention to the output of "program --help" messages

[13:21] <babydrop> heh

[13:21] <babydrop> lucasb: OK. Well, submit a PR :)

[13:21] <lucasb> when I saw the 4 spaces indentation... it looked strange

[13:21] <lucasb> but yes, just a stylistic, cosmetic change

[13:22] <babydrop> Sounds good

[13:22] <lucasb> back to negative de-indent...

[13:22] <lucasb> m: say "  foo\n \n  bar".indent(-2)

[13:22] <camelia> rakudo-moar b2ac4e: OUTPUT«Asked to remove 2 spaces, but the shortest indent is 1 spaces␤  in block <unit> at <tmp> line 1␤foo␤␤bar␤»

[13:22] *** AlexDaniel left
[13:23] <lucasb> "  foo\n\n  bar".indent(-2)   # empty line, no warnings

[13:23] <lucasb> "  foo\n \n  bar".indent(-2)   # line with white space, warnings

[13:23] <babydrop> Skarsnik: yeah, lizmat++ did lots of magicks around 0.6 and we saw a huge drop: https://twitter.com/zoffix/status/796810512986238978

[13:24] <babydrop> lucasb: that makes sense to me.

[13:24] <babydrop> (the warning)

[13:24] <lucasb> ok, for a second I thought about being more permissive with blank lines made just of whitespace characters

[13:25] * babydrop is getting distracted again with IRC /o\

[13:25] <lucasb> but, it's ok, I accept the warning

[13:25] <Skarsnik> babydrop, I think it's still very slow for what I am testing ^^

[13:26] *** AlexDaniel joined
[13:26] <Skarsnik> 1.2 sec to create 6000 objects is not that great x) (for the gumbo test)

[13:26] <babydrop> Skarsnik: yup. Would be nice to have more hands doing core hacking.

[13:27] <Skarsnik> and I will probably use a libxml2 binding for gptrixie because 20 sec is annoying when debugging stuff x)

[13:31] <pmurias> http://news.perlfoundation.org/2016/12/grant-proposal-learning-perl-6.html - brain d foy's grant proposal

[13:32] <moritz> uhm, what?

[13:32] <moritz> the kickstarter I can understand

[13:32] <moritz> but kickstarter *and* tpf grant?

[13:33] <DrForr> Uh...

[13:33] <lucasb> With all this much funding, I hope the book will be freely downloadable from the internet

[13:33] * DrForr falls out of his chair laughing.

[13:33] <AlexDaniel> O_o

[13:34] *** pyrimidine left
[13:34] <moritz> that's just not good style

[13:34] *** cognominal left
[13:34] *** nicq20 joined
[13:35] <babydrop> that's bullshit

[13:35] <moritz> first doing the kickstarter, saying "hey, I need some money so that I can write a Perl 6 book". So people fund it. And then, "oh, btw, I need money to write a Perl 6 book"

[13:35] *** wamba joined
[13:36] * moritz will sleep over it for a day before commenting on the blog

[13:36] <lucasb> will both this book and the "Think Perl 6" one be published by oreilly then?

[13:36] <AlexDaniel> can we instead give this money to gfldex for his work on the docs?…

[13:36] <babydrop> Indeed.

[13:36] *** cognominal joined
[13:36] <babydrop> And based on brian's "tips" most of the work for the book will be done by, ahem, "self-selected backers"

[13:36] <lucasb> (well, oreilly has released some free books in the past)

[13:37] <AlexDaniel> sorry, but this is fucked up

[13:37] <moritz> or me, to motivate by book efforts some more? :-)

[13:37] <babydrop> Yeah

[13:37] <babydrop> Well, unlike the moritz's more rational approach, I will comment right now with the emotions driving me pen!

[13:38] <AlexDaniel> babydrop: actually there is some text trying to explain the situation

[13:39] <moritz> there is

[13:39] <moritz> but it's still fucked up

[13:39] <babydrop> It's the same bullshit he peddled when people asked him wtf he was kickstarting a book when O'Reilly is publisher

[13:39] <moritz> the kickstarter was there to raise the money to write the book

[13:39] <moritz> the kickstarter is funded

[13:39] <babydrop> Yes.

[13:39] <moritz> why can't that be enough to write the book?

[13:40] <moritz> if it's not, then that's brian's error, and not something the TPF should square for him

[13:40] <AlexDaniel> .oO( more money = better book? )

[13:40] <AlexDaniel> u: facepalm

[13:40] <AlexDaniel> u: face palm

[13:40] <babydrop> And why was the proposal made the day after kickstarter got funded? He waited for it, to ensure people were on the hook for 37 grand before being pissed off

[13:40] <unicodable6> AlexDaniel, Found nothing!

[13:40] <unicodable6> AlexDaniel, U+1F926 FACE PALM [So] (🤦)

[13:41] <AlexDaniel> how many grants were rejected?

[13:42] <moritz> a few

[13:42] <lucasb> moritz: the hyperlinks in the book mailing lists came all changed by click tracking, no?

[13:42] <moritz> lucasb: yes, I'm afraid; the mailchimp free tier doesn't allow me to disable that :/

[13:42] <lucasb> moritz: ok

[13:43] <pmurias> babydrop: the TPF didn't always publish grant proposal instantly in the past

[13:45] <babydrop> pmurias: noted

[13:45] <seatek> i agree that would be a bad allocation of money. much better spent paying for work on core stuff

[13:46] <lucasb> moritz: your blog posts and consequently the book you intend to write will be all written in POD5 (or Pod6) ?

[13:46] *** sufrostico left
[13:47] *** sufrostico joined
[13:49] *** prammer joined
[13:49] <perlpilot> er ... what?

[13:50] <perlpilot> I think I would rather TPF give $$$ to moritz or gfldex or some *other* voice writing Perl 6 docs/books/tutorials/etc rather than give a big chunk to bdf who already has a kickstarted funded.

[13:50] <moritz> lucasb: nope, Markdown so far

[13:50] *** AlexDaniel left
[13:51] <mspo> I thought asciidoc was the go-to for books

[13:51] <lucasb> moritz: ah, ok

[13:51] <seatek> i agree. or why not spend 1/5th that amount and get someone to come up with a manageable installer that's easy for people, to do as a local user or system-wide. That's like a fundamental operational thing that should be there for people so they can actually deploy stuff

[13:51] <moritz> seatek: want to write one? apply for a grant!

[13:51] <moritz> I'd support *that*

[13:51] <moritz> making Rakudo reloctable

[13:51] *** cdg joined
[13:52] <seatek> i would feel guilty taking money for something liket hat

[13:52] <moritz> mspo: it might be, but LeanPub supports markdown + git + results in Dropbox + selling through the website, and I didn't want to take ownership of any toolchain myself

[13:52] *** AlexDaniel joined
[13:53] * arnsholt is picky enough that for a book it'd be RST, plus custom plugins to do TikZ figures

[13:53] <mspo> moritz: I think oreilly and no-starch are both asciidoc based

[13:53] <babydrop> what's the word for the typical way to write code?

[13:53] <mspo> moritz: markdown is a little.. lacking?

[13:53] <arnsholt> (Or just writing LaTeX directly, but that's less useful for producing e-versions)

[13:54] <mspo> babydrop: canonical

[13:54] <babydrop> mspo: thanks!

[13:54] <arnsholt> Idiomatic perhaps?

[13:54] <mspo> idiomatic is also good

[13:54] <arnsholt> Canonical sounds a bit overly "one true way" to me

[13:54] <mspo> normative

[13:55] <arnsholt> That's the word! =D

[13:55] <mspo> arnsholt: I have exactly the same reaction to "idiomatic" :)

[13:55] <DrForr> Back when I was originally working with ORA they were accepting LaTeX but that had to be converted to PDF or Word through their markup chain.

[13:55] <babydrop> mspo: oh idiomatic! yeah

[13:56] <arnsholt> TBH, I prefer writing LaTeX over markdown and friends

[13:56] <mspo> golang loves "idiomatic"

[13:59] <sena_kun> is there a list of characters/escape sequences that can be used to wrap a string literal?

[14:00] <seatek> for the book grant -- he says books sales aren't what they used to be. that means people aren't buying books as much. so why should tpf pay for books to be written about p6? he kinda gives the best argument against funding that grant himself

[14:00] <DrForr> sena_kun: Sure, there's a section called 'quoting' in the docs.

[14:00] <[Coke]> note that the timing on the grant proposal is out of bdf's control. there is a gap between submittal and publication.

[14:01] <sena_kun> DrForr, ah, thanks.

[14:01] *** pierre_ joined
[14:01] <DrForr> [Coke]: Yes, having written at least one myself there's a process that's been gone through here.

[14:02] *** prammer left
[14:03] <moritz> arnsholt: I like latex for scientific stuff, but I find it painful when using many code examples

[14:03] <moritz> also, if the toolchain is under my control, I'm under constant compulsion to tweak the result

[14:03] <moritz> when it's not, there's only so much I can do, and I spend the rest of the time actually writing stuff :-)

[14:04] *** synopsebot6 joined
[14:05] *** prammer joined
[14:06] <[Coke]> DrForr: yes, I was addressing others in the backlog who were concerned with the timing.

[14:06] *** aindilis left
[14:07] <DrForr> Ah.

[14:07] <[Coke]> (thanks for confirming)

[14:09] <nicq20> So, I remember a small discussion here about using a ':' in place of '{ }' on certain things. Is that mentioned anywhere in the docs?

[14:10] <nicq20> Can't seem to find the discussion though...

[14:10] <timotimo> : doesn't replace { }, it replaces ( )

[14:12] <nicq20> timotimo: That explains why I'm having some trouble understanding it....

[14:12] <[Coke]> Note that I've seen very few grant requests come in for perl 6 projects through the normal grant request process. (most have been tied to the one-time Hague grant, or to the new core maintenance fund)

[14:13] <nicq20> timotimo: Is it mentioned in the docs though?

[14:14] <timotimo> i don't know

[14:15] <moritz> m: say "foo\x[ab]"

[14:15] <camelia> rakudo-moar b2ac4e: OUTPUT«foo«␤»

[14:15] <moritz> m: say "foo\x[bar]"

[14:15] <camelia> rakudo-moar b2ac4e: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unrecognized backslash sequence: '\x'␤at <tmp>:1␤------> 3say "foo\x[ba7⏏5r]"␤    expecting any of:␤        argument list␤        double quotes␤        hex character␤        term␤»

[14:17] <nicq20> So if ':' replaces '( )', why can I do something like `do: say "hi";`?

[14:18] <seatek> nicq20 it's like for function/method calls -- $these.things: 4, 5, 9;

[14:18] <seatek> and other stuff. it's kinda mashed up around all over ;)

[14:19] <nicq20> Huh, ok. TIMTOWTDI?

[14:19] <arnsholt> moritz: -Oproductivity is definitely an excellent idea! =)

[14:20] <moritz> nicq20: : doesn't generally replace (), it's just for methods calls

[14:21] <nicq20> So if it's just for method calls why does it work for other things?

[14:21] <seatek> well, why does a '-' work for more than one thing?

[14:21] <pmurias> .seen TheLemonMan

[14:21] <yoleaux> I saw TheLemonMan 6 Sep 2016 14:07Z in #perl6: <TheLemonMan> ugexe, zef's working perfectly so far :)

[14:22] <nicq20> seatek: Because it's overloaded I guess?

[14:23] *** pyrimidine joined
[14:23] <nicq20> seatek: Oh! nm, I see what you mean.

[14:23] <seatek> colons can be used for stuff like $this<key>:exists ??

[14:24] <seatek> or for my::class::here

[14:24] <seatek> just meant to make  stuff look easy to read where it makes sense, for you and the compiler

[14:25] <seatek> sometimes $this.thing: here, there;   looks better, and sometimes $this.thing(here, there) looks better or is more readable

[14:26] <nicq20> seatek: Hmm. Ok, that makes sense. I might try to write some docs for it then. Any ideas as to where in the code to start looking for it?

[14:26] <seatek> no, i'm a USER ;)

[14:27] *** pyrimidine left
[14:28] <moritz> nicq20: src/Perl6/Grammar.pm

[14:28] *** pyrimidine joined
[14:28] <moritz> possibly postfixish is a good starting point

[14:28] <nicq20> moritz: Thank you!

[14:29] <seatek> i love being a user. it's so relaxing

[14:29] <seatek> someone bring me a mai tai

[14:29] <nicq20> seatek: ikr

[14:29] <moritz> nicq20: acutally, token methodop

[14:30] <seatek> :)

[14:31] <babydrop> nicq20: run some code with --target=parse, it'll list tokens in src/Perl6/Grammar.nqp

[14:32] <seatek> does rakudo have to worry about building/installing on the BSDs?

[14:32] <babydrop> what do you mean by "have to worry"? :)

[14:32] <[Coke]> Still 2-3 gaps in the advent calendar. First gap is 2-3 days out!

[14:32] <seatek> hehe i was going to leave that up for interpretation ;)

[14:32] <moritz> babydrop: ah, good idea. In this case it seems to confirm my suspicion that methodop parses the method call

[14:32] <babydrop> seatek: we support as many platforms as there are volunteers willing to make it work on

[14:33] <moritz> seatek: if I remember correctly, rakudo works on FreeBSD

[14:33] <seatek> i don't know anything about their hierarchies

[14:33] *** pyrimidine left
[14:33] <seatek> nor very little about the windowses

[14:33] <[Coke]> It would be great if people who are booked for days 12-24 could move their post sooner so the gaps are later, giving us more time to fill them.

[14:33] <[Coke]> (or maybe just 12-23)

[14:34] <moritz> [Coke]++ # ringing the advent calendar drum

[14:34] <seatek> is most of the current install base linux-y?

[14:34] *** cognominal left
[14:35] <moritz> seatek: yes. And some Windows, some MacOS

[14:35] <babydrop> [Coke]: I have an already-written post ready to go for any spot. I just don't list it on the schedule to make empty spots visible.

[14:35] <babydrop> So if there's a gap, I can fill it.

[14:35] *** sufrosti1o left
[14:35] <dalek> mu: e8d1490 | (Will Coleda)++ | misc/perl6advent-2016/schedule:

[14:35] <dalek> mu: remove published note on day 1

[14:35] <dalek> mu: review: https://github.com/perl6/mu/commit/e8d1490b90

[14:35] <seatek> moritz: i tried recently on windows and it was very problemmatic to get a good environment that included git as well, which seems necessary and is separate

[14:36] *** sufrostico left
[14:36] <moritz> seatek: I know; windows for developers is still a bit PITA

[14:36] <moritz> seatek: that's why I'm glad there rakudo .msi's for download

[14:37] *** sufrostico joined
[14:38] *** huggable joined
[14:38] *** sufrosti1o joined
[14:38] <seatek> moritz: yeah. i'll try playing around with some linux-based install choices if i get the time, just to see what's involved. i have a feeling with all the insane compile cacheing that it's not super simple

[14:39] <seatek> and with that kind of cacheing, permissions are certainly an issue.

[14:39] <moritz> seatek: one of the real blockers for a versatile installer is that rakudo isn't relocatable

[14:39] <moritz> that is, you need to know where it's going to be installed *by the time you compile rakudo*

[14:40] *** lizmat joined
[14:40] <seatek> this might be a little fun. i'll need to tackle it here for myself anyway

[14:40] <seatek> eventually

[14:42] <seatek> might be a good excuse to finally poke at some bsd too

[14:42] *** cognominal joined
[14:45] *** pyrimidine joined
[14:46] *** AlexDaniel left
[14:46] *** prammer left
[14:46] *** CIAvash left
[14:47] *** CIAvash joined
[14:48] *** prammer joined
[14:48] *** Actualeyes joined
[14:48] *** asdasadasdasd left
[14:49] *** abraxxa left
[14:50] *** pyrimidine left
[14:50] *** _ramix_ joined
[14:52] <babydrop> m: say 43.pick(-1)

[14:52] <camelia> rakudo-moar b2ac4e: OUTPUT«MVMArray: Index out of bounds␤  in block <unit> at <tmp> line 1␤␤»

[14:52] <babydrop> m: say 43.roll(-1)

[14:52] <camelia> rakudo-moar b2ac4e: OUTPUT«(43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 43 …»

[14:52] <babydrop> Throw or treat as zero?

[14:52] <moritz> throw

[14:52] <babydrop> OK.

[14:53] <moritz> in fact, I'd do it as a where-constraint on the argument

[14:53] <babydrop> tis slow :(

[14:54] <babydrop> m: for ^100_000 { sub (Int) {}(42) }; say now - INIT now;

[14:54] <camelia> rakudo-moar b2ac4e: OUTPUT«0.11964007␤»

[14:54] <babydrop> m: for ^100_000 { sub (UInt) {}(42) }; say now - INIT now;

[14:54] <camelia> rakudo-moar b2ac4e: OUTPUT«0.5588977␤»

[14:55] <babydrop> m: for ^100_000 { sub (Int $x) {?($x > 1)}(42) }; say now - INIT now;

[14:55] <camelia> rakudo-moar b2ac4e: OUTPUT«0.12155607␤»

[14:55] <babydrop> >= 0 I mean

[14:55] <jnthn> You'd need to include an actual throw to really compare though

[14:55] <timotimo> and invoke the throw, too, not just go via the good path :)

[14:55] <jnthn> Well, not invoke it on the good case :)

[14:55] <babydrop> jnthn: but I'm comparing the common good case

[14:55] <_ramix_> Hi. I have the https://modules.perl6.org/dist/FileSystem::Capacity module in the ecosystem. I would like to add a vbs script in the /bin directory to be able to run it from the same module with run or shell. It's possible? How could I do it? Thanks!

[14:55] <timotimo> :D

[14:56] <babydrop> It becomes 5 times slower, just to exclude the uncommon bad case

[14:56] <moritz> :(

[14:56] <jnthn> babydrop: For sure, but there's a tad more to it than that. 

[14:57] <timotimo> we could teach the binding lowerer about unsigned ints - might want to introduce a new primitive for that?

[14:57] <jnthn> Firstly, a bit big of the cost difference is probably inlining related

[14:57] <timotimo> hm, what were they called again

[14:57] <jnthn> *big bit

[14:57] <moritz> _ramix_: what's a vbs script?

[14:57] <timotimo> visual basic script

[14:57] <moritz> why not just a Perl 6 script?

[14:57] <moritz> you can also call that from the shell

[14:57] <brrt> so it's for windows, it'd need to be added to $PATH

[14:57] <moritz> and there's tooling for that

[14:58] <_ramix_> visual basic script to acces to filesystem object in win32

[14:58] <jnthn> There where costs that, but the pick is likely too big for that in the first place

[14:58] <[Coke]> "don't mince words, bones, what do you REALLY think?"

[14:58] <jnthn> Not saying `where` is cheap, just that compared in the real scheme of things it may be a few percent.

[14:58] <brrt> ultimately, this is about our module installers. and I don't know if they can do what you ask

[14:58] <timotimo> don't mince bones?

[14:59] <moritz> don't mend bones

[14:59] <babydrop> jnthn: OK, I'll stick a UInt on it then. If you ignore any performance differences, it's a much cleaner solution

[14:59] <moritz> or so :-)

[15:00] *** AlexDaniel joined
[15:01] <lucasb> I just read the comment on the grants post

[15:03] <lucasb> I'm not sure how harsh it was, but I'm glad we have someone passionate about p6 :)

[15:04] *** kurahaupo__ left
[15:05] *** cognominal left
[15:05] <sena_kun> Why does https://gist.github.com/Altai-man/78ead16e2d8ebcdda80d64c30a14fa1b throws an exception now even if the output was clear(i.e. nothing was written to stderr afaik)?

[15:05] *** sufrostico left
[15:05] <moritz> sena_kun: what exception?

[15:06] *** sufrosti1o left
[15:06] <sena_kun> moritz, not an exception, rather something was tapped from stderr.

[15:06] *** skids left
[15:06] *** pyrimidine joined
[15:06] <babydrop> sena_kun: output shows it's just an empty string

[15:06] <babydrop> Maybe that's a quirk of ls?

[15:07] *** sufrostico joined
[15:07] <nicq20> moritz: So, I was wrong (as usual). When calling `do: 1+1`, 'do:' is seen as a label and never actually called.

[15:07] <moritz> sena_kun: so what exactly is tapped from stderr?

[15:07] <sena_kun> babydrop, it can be, but I tried other commands previously(firstly, it was call to perl6 binary)...

[15:07] <sena_kun> moritz, an empty string.

[15:08] <pmurias> what does 'say 2**10000000' in rakudo-moar currently do on OS X?

[15:08] *** sufrosti1o joined
[15:09] <babydrop> sena_kun: oh, yeah, just tried with perl6 -e 'say "hi"'. That's a bug, would you please report it?

[15:09] <sena_kun> babydrop, I'll try, but I might ask some help about it. (:

[15:10] *** brillenfux left
[15:10] *** khw joined
[15:10] <babydrop> "Proc::Asyn sends empty trying to stderr tap on program exit, even though the program did not send anything'

[15:10] *** cdg_ joined
[15:11] <babydrop> sena_kun: oh, and stdout tap too

[15:11] <babydrop> same thing. 

[15:11] <babydrop> Maybe it's that slurp-rest: :close thing we added awhile back? 

[15:11] *** pierre_ left
[15:11] <sena_kun> babydrop, yes, I'll create a ticket now, just some time to register is needed...

[15:12] *** cognominal joined
[15:12] <babydrop> on RT? The New Ticket button is disabled. Just email to [email@hidden.address]
[15:13] *** cdg left
[15:13] <sena_kun> Ah, okay.

[15:13] <lucasb> funny

[15:13] *** sufrostico left
[15:13] *** sufrosti1o left
[15:14] <lucasb> slurp-rest was added exactly because people didn't like slurp(:close)

[15:14] <babydrop> weird

[15:15] <lucasb> and later, slurp-rest got its own :close parameter

[15:15] *** _ramix_ left
[15:15] *** sufrostico joined
[15:15] <lucasb> > await Proc::Async.new('foo').start

[15:15] <lucasb> ===SORRY!===

[15:15] <lucasb> no such file or directory

[15:15] *** sufrosti1o joined
[15:16] <babydrop> :(

[15:16] <lucasb> would be interesting to output program name or command line that was unsuccessful

[15:16] <babydrop> Also bug

[15:16] <babydrop> lucasb: there actually is logic for that :(

[15:16] <babydrop> I recall bikeshed with the @.command attribute

[15:16] <lucasb> and also... I thought "===SORRY!===" was for compile-time errors? how does it shows at runtime?

[15:16] <ugexe> that was for Proc

[15:17] <babydrop> ugexe: but Proc::Async uses Proc udner the hood

[15:17] <babydrop> And I recall propagating that command stuff for Proc::Assync

[15:17] <babydrop> lucasb: would you bugreport that, please? Just email to [email@hidden.address]
[15:17] <dalek> mu/titsuki-advent: 6e0deb2 | titsuki++ | misc/perl6advent-2016/schedule:

[15:17] <dalek> mu/titsuki-advent: Add mysef as a 11th writer

[15:17] <dalek> mu/titsuki-advent: 

[15:17] <dalek> mu/titsuki-advent: I have already blogged the Japanese version of this post in Qiita for an unofficial Perl 6 advent calender.

[15:17] <dalek> mu/titsuki-advent: Where Qiita is a blog service mainly for Japanese engineers:

[15:17] <dalek> mu/titsuki-advent: http://qiita.com/advent-calendar/2016/perl6

[15:17] <dalek> mu/titsuki-advent: http://qiita.com/titsuki/items/1ad338c6cf14a59be3e8

[15:17] <dalek> mu/titsuki-advent: 

[15:17] <dalek> mu/titsuki-advent: So I'll write the English version for this advent calendar.

[15:17] <dalek> mu/titsuki-advent: review: https://github.com/perl6/mu/commit/6e0deb29c3

[15:18] <babydrop> wooohoo \o/ titsuki++

[15:18] <sena_kun> titsuki++

[15:18] <nicq20> pmurias: FYI that `say 2**10000000` is still running.

[15:18] <timotimo> cool

[15:18] *** kurahaupo__ joined
[15:19] <sena_kun> babydrop, code quoting in the mail is just ">"?

[15:20] <babydrop> sena_kun: just put it as is. Makes it easier to copy-paste

[15:20] <sena_kun> babydrop, thanks.

[15:20] *** cibs left
[15:21] *** cibs joined
[15:22] *** nicq20 left
[15:22] *** ufobat left
[15:25] <sena_kun> Reported.

[15:25] <babydrop> sena_kun++

[15:26] *** AlexDaniel left
[15:26] <lucasb> it's not just stderr. it also sends a empty line to stdout in the end

[15:27] *** CIAvash left
[15:27] <sena_kun> lucasb, I mentioned that in the title and the description too. (:

[15:28] <sena_kun> Also, is there a chance for me to try to patch it?

[15:28] <lucasb> sena_kun: oh, right. now I noticed. thanks

[15:29] *** AlexDaniel joined
[15:30] <lucasb> my $p = Proc::Async.new('bash', '-c', 'echo out; echo err 1>&2');

[15:30] <lucasb> $p.stdout.tap(-> $x { say "out: $x" });

[15:30] <lucasb> $p.stderr.tap(-> $x { say "err: $x" });

[15:30] <lucasb> ^^ just sharing another way to show the behaviour

[15:30] <babydrop> sena_kun: sure! The code's in https://github.com/rakudo/rakudo/blob/nom/src/core/Proc/Async.pm

[15:31] <dalek> mu: 6e0deb2 | titsuki++ | misc/perl6advent-2016/schedule:

[15:31] <dalek> mu: Add mysef as a 11th writer

[15:31] <dalek> mu: 

[15:31] <dalek> mu: I have already blogged the Japanese version of this post in Qiita for an unofficial Perl 6 advent calender.

[15:31] <dalek> mu: Where Qiita is a blog service mainly for Japanese engineers:

[15:31] <dalek> mu: http://qiita.com/advent-calendar/2016/perl6

[15:31] <dalek> mu: http://qiita.com/titsuki/items/1ad338c6cf14a59be3e8

[15:31] <dalek> mu: 

[15:31] <dalek> mu: So I'll write the English version for this advent calendar.

[15:31] <dalek> mu: review: https://github.com/perl6/mu/commit/6e0deb29c3

[15:31] <dalek> mu: b42b969 | (Will Coleda)++ | misc/perl6advent-2016/schedule:

[15:31] <dalek> mu: Merge pull request #23 from perl6/titsuki-advent

[15:31] <dalek> mu: 

[15:31] <dalek> mu: Add mysef as a 11th writer

[15:31] <dalek> mu: review: https://github.com/perl6/mu/commit/b42b9698ff

[15:31] <babydrop> sena_kun: you can also try bugging AlexDaniel to run that code on bisectable to figure out what commit introduced that behaviour

[15:32] <sena_kun> babydrop, thanks! I'll try to dig in then.

[15:32] <sena_kun> ping AlexDaniel

[15:32] *** CIAvash joined
[15:33] <[Coke]> we now have 1-2 gaps left!

[15:33] <babydrop> sena_kun: this may be a candidate: https://github.com/rakudo/rakudo/commit/e4d78c6b1e0035049cf674aee327cc8b78321c8f

[15:34] <babydrop> So you could try building a version prior to that commit (or just change that Supplier::Preserving back to Supplier and see if the issue goes away). And if it does, we'd need to figure out how to address that commit and the current issue

[15:34] <moritz> titsuki++

[15:34] *** prammer left
[15:34] <moritz> [Coke]: how is your post coming along?

[15:35] <timotimo> it could be we're giving the empty string from inside moarvm

[15:35] <[Coke]> moritz: AHAHAHAHAHAHAHAAHAHAHAH

[15:35] <[Coke]> I'm sure I'll finish something in time. :)

[15:35] <timotimo> that sounds ... bad?

[15:35] <babydrop> [Coke] has a secret plan :}

[15:35] *** skids joined
[15:35] <[Coke]> I have 3 paragraphs written towards a fresh impl. of a perl 6 module re-impl of a brand new p5 module.

[15:36] <babydrop> $ ./perl6 -e '42.pick: -1'

[15:36] <babydrop> Coercion to UInt out of range. Is: -1, should be in 0..Inf

[15:36] <babydrop>   in block <unit> at -e line 1

[15:36] <babydrop> Is that good 'nuf? 

[15:36] *** n0xff left
[15:36] <babydrop> It basically can take an Inf or Whatever too, so the conversion into an Int is deeper in the guts

[15:36] *** wamba left
[15:36] <babydrop> I made it convert to UInt instead.

[15:37] <babydrop> I just imagine AlexDaniel creating a new ticket saying the message is still LTA :P

[15:40] <jnthn> babydrop, sena_kun: I suspect the empty string comes from https://github.com/rakudo/rakudo/blob/nom/src/core/Rakudo/Internals/VMBackedDecoder.pm#L36

[15:41] <babydrop> oh cool

[15:41] <jnthn> Also, that XXX comment is no longer true 'cus I fixed that nasty bug :)

[15:41] <sena_kun> good.

[15:41] <jnthn> But the emit will happily spit out an empty string there

[15:42] <jnthn> The one on line 29 actually does check

[15:42] <jnthn> tbh I'd kinda expect code to be robust enough to cope, but I'm happy to tweak this not to emit empty strings :)

[15:43] <babydrop> m: multi foo($) { nextwith 42; say "meow" }; multi foo (Int) { say "ha!" }; foo 'x'

[15:43] <camelia> rakudo-moar 5bacb0: ( no output )

[15:43] <babydrop> How come no output?

[15:43] <babydrop> m: multi foo($) { callwith 42; say "meow" }; multi foo (Int) { say "ha!" }; foo 'x'

[15:43] <camelia> rakudo-moar 5bacb0: OUTPUT«meow␤»

[15:43] <babydrop> m: multi foo($) { nextwith 42; say "meow" }; multi foo (Int) { say "ha!" }; foo 42

[15:43] <camelia> rakudo-moar 5bacb0: OUTPUT«ha!␤»

[15:44] <babydrop> weird

[15:44] <sena_kun> jnthn, just give me some time and wait 'til I will return here with (no?) result. (:

[15:44] <jnthn> babydrop: Because nextwith iterates a pre-determiend candidate list

[15:44] <jnthn> (Determined at the point of dispatch)

[15:44] <jnthn> Use samewith to redispatch

[15:45] *** prammer joined
[15:45] <babydrop> Oh. Thanks. jnthn++

[15:46] <babydrop> m: multi foo($) { samewith 42; say "meow" }; multi foo (Int) { say "ha!" }; foo 'x'

[15:46] <camelia> rakudo-moar 5bacb0: OUTPUT«ha!␤meow␤»

[15:46] *** zakharyas left
[15:46] <babydrop> hmm

[15:46] <babydrop> m: multi foo (Int) { say "ha!" }; multi foo($) { samewith 42; say "meow" }; foo 'x'

[15:46] <camelia> rakudo-moar 5bacb0: OUTPUT«ha!␤meow␤»

[15:46] <babydrop> m: multi foo (Int) { say "ha!" }; multi foo($) { nextwith 42; say "meow" }; foo 'x'

[15:46] <camelia> rakudo-moar 5bacb0: ( no output )

[15:47] <babydrop> I was hoping to redispatch without returning

[15:47] <babydrop> so the output would be just "ha"

[15:47] *** ufobat joined
[15:48] <babydrop> oh well

[15:49] <babydrop> Well, I don't entirely get it, I guess.

[15:50] <babydrop> nextwith just moves further in the candidates list? So it'll only try any candidates that haven't been tried for that call already?

[15:50] <moritz> I think so, yes

[15:50] <babydrop> OK

[15:51] <jnthn> Conceptually, it works like this: when you do a multi dispatch, instead of just calculating the best candidate, we also calculate all possible candidates that would have matched. nextwith takes you do the next one in that list.

[15:52] <jnthn> *to

[15:52] <babydrop> Makes sense. Thanks.

[15:55] <pmurias> jnthn: I made a pull request to fix pow_I on moar

[15:56] <pmurias> jnthn: rakudo also needs to be fixed and I'll start working on that too

[15:56] <babydrop> \o/

[15:58] <jnthn> pmurias: Thanks

[15:58] <babydrop> pmurias: if you've got tuits, pow_In also needs some lovin' and there are three tickets affected by it. I found one fix (https://github.com/MoarVM/MoarVM/pull/442) but I don't understand WHY it fixes it, so I closed it in fear it'd be breaking other things.

[15:58] <babydrop> Well, I understand why it fixes it, but I don't understand what that code is for and  what my change may be  breaking.

[15:59] <jnthn> pmurias: Will look shortly

[16:06] <babydrop> Well, you were right. The pick with UInt candidate is not slow and is even about 4% faster. But the error message sucks: https://gist.github.com/zoffixznet/32b9f1a6984b4552287a9e3ea09a9a8f

[16:07] <babydrop> Because it doesn't tell me how to fix it.

[16:07] <moritz> babydrop: does the error message improve if you add an Int candidate with a where clause?

[16:07] <moritz> oh, that might give an ambiguous dispatch

[16:08] <babydrop> Well, UInt *is* an Int with a where clause. It's a subset. And the candidates in the error actually list it as `Int where { ... }` candidate which makes the error that much more confusing

[16:08] <babydrop> And `Inf` candidate is listed as `Num $ where { ... }` :/

[16:11] *** sena_kun left
[16:13] <dalek> ecosystem: a2ed138 | (Shoichi Kaji)++ | META.list:

[16:13] <dalek> ecosystem: Add WaitGroup to ecosystem

[16:13] <dalek> ecosystem: 

[16:13] <dalek> ecosystem: See https://github.com/skaji/perl6-WaitGroup

[16:13] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/a2ed1388e8

[16:14] <jnthn> pmurias: The patch seems legit :)

[16:15] <jnthn> Will let the OSX travis tests have at it before merging :)

[16:15] *** g4 left
[16:18] <dalek> mu: 21eea09 | (Will Coleda)++ | misc/perl6advent-2016/schedule:

[16:18] <dalek> mu: move brrt++ up to the 9th.

[16:18] <dalek> mu: review: https://github.com/perl6/mu/commit/21eea09c3a

[16:18] *** seatek left
[16:18] <[Coke]> brrt++

[16:19] <[Coke]> so now we have 1-2 gaps, at 5 days out and maybe 3 days out.

[16:19] <[Coke]> Hopefully the 12th is far enough out that someone could consider writing something from scratch in that time.

[16:26] <jnthn> I'll see how soon I get my one ready

[16:26] <jnthn> (No promises! :))

[16:26] <jnthn> (Other than to have it at latest by when I already signed up for)

[16:26] *** mawkish left
[16:27] *** AlexDani` joined
[16:28] <babydrop> AlexDani`: you around?

[16:28] <AlexDani`> yes

[16:28] <AlexDani`> came here because somebody wanted to bug me :)

[16:28] <babydrop> lol

[16:28] <babydrop> AlexDani`: what's your opinion on this error: https://gist.github.com/zoffixznet/32b9f1a6984b4552287a9e3ea09a9a8f

[16:29] <AlexDani`> babydrop: hmmm, why is it an error?

[16:29] *** telex left
[16:29] *** mawkish joined
[16:29] <AlexDani`> should it be an error?

[16:29] <babydrop> AlexDani`: -1 is not a valid thing to give to .pick

[16:30] <babydrop> Well, what should it do?

[16:30] *** yqt joined
[16:30] *** telex joined
[16:32] <babydrop> AlexDani`: another alternative impl lent me this error: "Coercion to UInt out of range. Is: -1, should be in 0..Inf"

[16:33] <AlexDani`> m: say (42,50,60).roll(0)

[16:33] <camelia> rakudo-moar 5bacb0: OUTPUT«()␤»

[16:34] <AlexDani`> m: say (42,50,60).roll(-1)

[16:34] <camelia> rakudo-moar 5bacb0: OUTPUT«(60 50 50 60 42 42 50 60 50 60 60 42 60 42 60 50 50 42 42 42 42 60 50 50 42 60 42 42 60 60 50 60 60 50 50 50 60 42 60 42 60 50 42 50 60 60 60 42 42 60 42 42 60 50 60 60 42 42 42 42 42 60 50 50 50 42 42 50 50 50 60 50 42 50 60 50 50 50 42 50 50 42 50 42 42 …»

[16:34] <AlexDani`> ah right

[16:34] <geekosaur> mm. "rakudobrew triple" (even after purging the existing one) dies after installing nqp because nqp-m has a relative path for ../install/bin/moar that isn't correct for the path rakudo's Configure.pl is run from

[16:34] <AlexDani`> babydrop: if I recall correctly, some things actually produce empty output when you give them negative values

[16:34] <AlexDani`> m: say 42 xx -10

[16:34] <camelia> rakudo-moar 5bacb0: OUTPUT«()␤»

[16:34] <AlexDani`> like this, I guess?

[16:34] * geekosaur suspects this is not rakudobrew's fault; any relative path like that is questionable at best

[16:35] <AlexDani`> babydrop: so I don't really know if it should throw or not

[16:35] <babydrop> Yeah, that's kind of inconsistent :/

[16:35] <AlexDani`> babydrop: if you want it to throw, then “none of these signatures match” is definitely LTA

[16:35] <AlexDani`> but perhaps a good step forward anyway

[16:36] <babydrop> Well, my original gut reaction was to treat it as zero. Then someone in the channel suggested the throwage

[16:36] <AlexDani`> babydrop: ask TimToady?

[16:36] <babydrop> m: [][-1] # I mean, this throws

[16:36] <camelia> rakudo-moar 5bacb0: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of a negative -1 subscript to index from the end; in Perl 6 please use a function such as *-1␤at <tmp>:1␤------> 3[][-1]7⏏5 # I mean, this throws␤»

[16:36] <AlexDani`> it throws because people expect it to index from the end

[16:37] <babydrop> m: ''.match: /^/, :nth(-1); # I mean, this throws

[16:37] <camelia> rakudo-moar 5bacb0: OUTPUT«Attempt to retrieve before :1st match -- :nth(-1)␤  in block <unit> at <tmp> line 1␤␤»

[16:37] *** domidumont left
[16:38] <babydrop> Kinda like we need to plan this stuff out more. Some sort of grand "Perl 6's Awesome Failure Mode Plan"

[16:38] <babydrop> That deliniates all of such cases and tells what we do.

[16:38] <babydrop> And deliniates the awesomification level all errors need to achieve.

[16:39] <AlexDani`> so what code should I run on bisectable?

[16:40] <babydrop> AlexDani`: oh. 

[16:40] <babydrop> AlexDani`: I think we found it actually :)

[16:40] <babydrop> AlexDani`: but it was this ticket: https://rt.perl.org/Ticket/Display.html?id=130291#ticket-history

[16:40] <AlexDani`> ah

[16:41] <AlexDani`> wow, that's an interesting ticket

[16:45] *** CIAvash left
[16:46] *** captain-adequate joined
[16:46] *** mawkish left
[16:47] *** mawkish joined
[16:47] <captain-adequate> Congratulations on reaching your funding goal moritz

[16:48] <captain-adequate> Really looking forward to seeing the perl6 book :)

[16:49] <captain-adequate> Or was it Brian that's writting that.

[16:50] *** wamba joined
[16:50] <AlexDani`> …

[16:50] <AlexDani`> captain-adequate: yea, it was not moritz…

[16:50] <captain-adequate> Oops... ha ha...

[16:50] <captain-adequate> Brian D Foy

[16:51] *** mawkish left
[16:51] <DrForr> Dors anyone mind if I move my posting to yhe 10th?

[16:51] *** mawkish joined
[16:51] <moritz> captain-adequate: but I wouldn't say no to a few k USD :-)

[16:51] <babydrop> DrForr: as opposed to... which date? Tomorrow?

[16:51] <babydrop> AlexDani`: you may enjoy answering this question: https://www.reddit.com/r/perl6/comments/5gwurz/perl_6_advent_day_7_set_in_your_ways_perl_6s/dawh3oj/

[16:51] <babydrop> (how to type unicode ops)

[16:52] <AlexDani`> “Do you have a browser tab open” hahahahaha

[16:52] <AlexDani`> “are you memorizing the character codes” :|

[16:52] <babydrop> Yeah, I laughed too. But I guess if you've never heard of other methods that'd be your ownly guess

[16:52] <DrForr> Yes, I'm scheduled tomorrow but din't have as nuch time as I hopwd tonight.

[16:52] <babydrop> I do have some codes memorized, actually.

[16:52] <captain-adequate> Ha ha... Well thanks for the news letter moritz.

[16:53] <babydrop> Like − and ♥

[16:53] <babydrop> DrForr: no worries, I schedule my secret post.

[16:54] <moritz> captain-adequate: you're welcome

[16:54] <DrForr> Excelebt, I'll be resdy to toll gor the 10th. I'lk move aroubd when I get honr.

[16:55] <DrForr> (on my phone, if it isn't obvious from tyops.)

[16:58] *** pyrimidine left
[16:58] *** adrusi joined
[17:00] *** mawkish left
[17:01] *** mawkish joined
[17:01] <[Coke]> I'll move it now.

[17:01] *** Skarsnik_ joined
[17:02] *** Skarsnik__ joined
[17:03] <babydrop> [Coke]: it's "How To Make Use And Abuse Perl 6 Subsets"

[17:03] <babydrop> [Coke]: it's "How To Make, Use, And Abuse Perl 6 Subsets"

[17:04] <dalek> mu: 4722580 | (Will Coleda)++ | misc/perl6advent-2016/schedule:

[17:04] <dalek> mu: move DrForr down.

[17:04] <dalek> mu: 

[17:04] <dalek> mu: Also, surprise Zoffix++ post to fill the gap.

[17:04] <dalek> mu: review: https://github.com/perl6/mu/commit/472258007f

[17:04] <[Coke]> babydrop++ Zoffix++

[17:04] *** Skarsnik left
[17:04] *** pierre_ joined
[17:06] *** Skarsnik_ left
[17:08] *** ssotka joined
[17:08] <broquaint> m: sub ext-s { ($($^x, $^y), $^z).flat } ext-s(1,2,());

[17:08] <camelia> rakudo-moar 5bacb0: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3sub ext-s { ($($^x, $^y), $^z).flat }7⏏5 ext-s(1,2,());␤    expecting any of:␤        infix␤        infix stopper␤…»

[17:09] *** pierre_ left
[17:09] <broquaint> m: sub ext-s { ($($^x, $^y), $^z).flat }; ext-s(1,2,())

[17:09] <camelia> rakudo-moar 5bacb0: ( no output )

[17:09] <broquaint> m: sub ext-s { ($($^x, $^y), $^z).flat }; say ext-s(1,2,())

[17:09] <camelia> rakudo-moar 5bacb0: OUTPUT«((1 2) ())␤»

[17:10] <broquaint> m: my $r = ($(1,2), ()).flat; say $r

[17:10] <camelia> rakudo-moar 5bacb0: OUTPUT«((1 2))␤»

[17:10] <broquaint> Why is the empty list flattened in the latter case but not the former?

[17:11] <lucasb> it is itemized

[17:11] <lucasb> m: say ($( ), $( )).flat

[17:11] <camelia> rakudo-moar 5bacb0: OUTPUT«(() ())␤»

[17:11] <lucasb> m: say ($( ), $( )).flat.perl

[17:11] <camelia> rakudo-moar 5bacb0: OUTPUT«($(), $()).Seq␤»

[17:12] <babydrop> m: sub ext-s { gather deepmap *.take, ($($^x, $^y), $^z) }; say ext-s(1,2,())

[17:12] <camelia> rakudo-moar 5bacb0: OUTPUT«(1 2)␤»

[17:12] <broquaint> Where's the itemization occurring (given the expressions should be identical)?

[17:13] <lucasb> assigning it to $^z itemizes

[17:13] <broquaint> Aha, thanks! :)

[17:14] <lucasb> m: say { $^a }.(()).perl

[17:14] <camelia> rakudo-moar 5bacb0: OUTPUT«$()␤»

[17:14] <lucasb> m: say { @^a }.(()).perl

[17:14] <camelia> rakudo-moar 5bacb0: OUTPUT«()␤»

[17:16] *** prammer left
[17:16] *** prammer joined
[17:17] <broquaint> Super, I'm now dangerously close to a functioning port of microKanren.scm :)

[17:17] <babydrop> \o/

[17:20] *** AlexDani` left
[17:20] *** jdv79_ joined
[17:20] *** domidumont joined
[17:21] *** Skarsnik_ joined
[17:22] *** jdv79_ left
[17:25] *** Skarsnik__ left
[17:25] *** pyrimidine joined
[17:28] *** nicq20 joined
[17:30] *** pyrimidine left
[17:31] *** dakkar left
[17:31] *** pmurias left
[17:34] *** cognominal left
[17:35] *** cognominal joined
[17:38] *** Guest97524 is now known as ponbiki

[17:40] *** AlexDani` joined
[17:47] *** zakharyas joined
[17:48] *** pyrimidine joined
[17:48] *** CIAvash joined
[17:50] *** cognominal left
[17:50] *** mawkish left
[17:50] *** Skarsnik__ joined
[17:51] *** pyrimidine left
[17:51] *** mawkish joined
[17:51] *** pyrimidine joined
[17:54] *** Skarsnik_ left
[17:55] *** CIAvash left
[18:00] *** Skarsnik_ joined
[18:00] *** mohae joined
[18:01] *** pmurias joined
[18:01] *** CIAvash joined
[18:02] *** Skarsnik joined
[18:03] *** Skarsnik__ left
[18:03] *** mohae_ left
[18:04] *** yqt left
[18:05] *** Skarsnik_ left
[18:06] *** cognominal joined
[18:11] *** Actualeyes left
[18:14] *** cgfbee joined
[18:15] *** r3m joined
[18:20] *** nicq20 left
[18:21] *** AlexDani` left
[18:22] *** AlexDani` joined
[18:23] *** skids left
[18:27] *** mawkish left
[18:27] *** mawkish joined
[18:29] *** AlexDani` left
[18:31] <DrForr> [Coke]: Thanks, just got in and was going to do the edit :)

[18:35] *** TheDir joined
[18:38] <pmurias> how do I print out 2 ** (-1020) without it being rounded down to zero?

[18:38] *** zakharyas left
[18:39] <pyrimidine> re: bdf's TPF grant proposal, I agree that, in light of the Kickstarter being funded, that someone else should get the benefit of that proposal

[18:39] *** mr_ron joined
[18:40] <babydrop> m: printf "%.2200f", 2 ** (-1020)

[18:40] <camelia> rakudo-moar f367e4: OUTPUT«0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000…»

[18:40] <babydrop> pmurias: I *think* that's the way. But I think we may have some method for that

[18:41] <pyrimidine> saying that, I also think [Coke] is right regarding the timing.  It is worth pointing out the (non-funded) help that he is getting, but I don't think it's helpful to completely slag on his proposal.  The initial comment comes across that way

[18:41] <pyrimidine> IMO

[18:42] <babydrop> pyrimidine: I wouldn't be so pissed of if Brian was competent in Perl 6.

[18:43] <babydrop> m: say (2 ** (-1020)).base-repeating: 10

[18:43] <camelia> rakudo-moar f367e4: OUTPUT«No such method 'base-repeating' for invocant of type 'Num'␤  in block <unit> at <tmp> line 1␤␤»

[18:43] <babydrop> mmkay

[18:43] <psch> babydrop++

[18:43] <babydrop> m: say (2 ** (-1020)).FatRat.base-repeating: 10

[18:43] <camelia> rakudo-moar f367e4: OUTPUT«(0 )␤»

[18:44] <mr_ron> I recently came across an IRC discussion of unicode number subscripts and superscripts and related gist https://irclog.perlgeek.de/perl6/2016-04-14#i_12340102 and https://gist.github.com/AlexDaniel/c89bd2786f9b63f31e4c

[18:44] <mr_ron> m: my $x₁ # error expected ...

[18:44] <camelia> rakudo-moar f367e4: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3my $x7⏏5₁ # error expected ...␤    expecting any of:␤        constraint␤        infix␤        infix stopper␤        postfix␤        statement end␤ …»

[18:45] <psch> u: ₁ 

[18:45] <unicodable6> psch, U+2081 SUBSCRIPT ONE [No] (₁)

[18:45] <unicodable6> psch, U+0020 SPACE [Zs] ( )

[18:45] <psch> mr_ron: afaik, No doesn't fit into <ident>

[18:45] <babydrop> m: say ₁ + ₁ # :D

[18:45] <camelia> rakudo-moar f367e4: OUTPUT«2␤»

[18:45] *** ufobat left
[18:46] <psch> mr_ron: we have some hackery in Perl6::Grammar to parse them as literal numbers, but...

[18:46] <psch> u: arabic one

[18:46] <unicodable6> psch, U+0661 ARABIC-INDIC DIGIT ONE [Nd] (١)

[18:46] <unicodable6> psch, U+06F1 EXTENDED ARABIC-INDIC DIGIT ONE [Nd] (۱)

[18:46] <unicodable6> psch, U+08EA ARABIC TONE ONE DOT ABOVE [Mn] (◌࣪)

[18:46] <mr_ron> psch: yes irc discussion link mentions that I think

[18:46] <psch> m: my $x١

[18:46] <camelia> rakudo-moar f367e4: ( no output )

[18:46] <unicodable6> psch, https://gist.github.com/2c1b824480c9ea0b055e70e37395c97c

[18:46] <psch> m: my $x١ = 5; say $x١

[18:46] <camelia> rakudo-moar f367e4: OUTPUT«5␤»

[18:46] <psch> mr_ron: well, i'm wrong

[18:46] <psch> mr_ron: it's not really about No, it's about some cases arbitrarily working and others not

[18:47] <DrForr> babydrop: FWIW he explained his reasoning in the original Kickstarter, but I'm not happy about the code quality getting slung around either. The lack of consultation is giving me flashbacks to Matt's Script Archive and in all the bad ways.

[18:47] <psch> mr_ron: if you're willing and able to work out a consistent rule and convince @LARRY that it's better than what we have you got at least me behind you

[18:47] <babydrop> mr_ron: and me too. I'd love to have subscripts on terms

[18:47] <psch> mr_ron: as far as i'm concerned, we should really stick to unicode categories with those things, cause we pride ourself on, well, sticking to unicode categories

[18:48] <mr_ron> Wondering about documentation like https://docs.perl6.org/language/syntax#Identifiers not advertising unicode identifiers ...

[18:48] *** AlexDani` joined
[18:48] <DrForr> mr_ron: Well volunteered?

[18:48] <psch> ++mr_ron

[18:48] <babydrop> maybe the rule can be something like "you can stick a No at the end" (I'm just guessing here, I've not seen the <ident> or what issues a No in it may cause)

[18:49] <psch> babydrop: well, ² is No too, isn't it

[18:49] <psch> and we kinda want that as &infix:<**>.assuming(*, 2)

[18:49] <babydrop> m: '²'.uniprop.say

[18:49] <camelia> rakudo-moar f367e4: OUTPUT«No␤»

[18:49] <psch> so that's hard

[18:49] <babydrop> oh yeah :(

[18:49] <mr_ron> Also math unicode identifiers are mentioned on rosetta code https://rosettacode.org/wiki/Unicode_variable_names#Perl_6 but seem to me to be missing from https://github.com/perl6/roast/blob/master/S02-lexical-conventions/unicode.t ??

[18:50] *** cognominal left
[18:50] <babydrop> m: my \term<2²> { 42 }; say 2² 

[18:50] <camelia> rakudo-moar f367e4: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Term definition requires an initializer␤at <tmp>:1␤------> 3my \term7⏏5<2²> { 42 }; say 2²␤»

[18:50] <babydrop> m: sub term<2²> { 42 }; say 2² 

[18:50] <camelia> rakudo-moar f367e4: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3sub term7⏏5<2²> { 42 }; say 2²␤    expecting any of:␤        new name to be defined␤»

[18:50] <babydrop> m: sub term:<2²> { 42 }; say 2² 

[18:50] <camelia> rakudo-moar f367e4: OUTPUT«42␤»

[18:51] <psch> yeah, that's an annoying bit of work there

[18:51] <psch> i'm not sure "check if the lexical exists otherwise assume superscript means pow" is a good idea

[18:51] *** firstdayonthejob joined
[18:51] <psch> ...actually i'm pretty sure it's a bad idea

[18:51] <babydrop> yeah

[18:51] <psch> so we cannot exclusively rely on unicode category there 

[18:52] <mr_ron> Any dispute with trying to add math identifier tests to S02-lexical-conventions/unicode.t ?

[18:52] *** cognominal joined
[18:52] <DrForr> Doesn't Unicode TR27 have some things to say about this?

[18:53] <psch> mr_ron: if it's used on rosettacode i wouldn't object

[18:53] *** AlexDani` left
[18:53] <psch> mr_ron: considering TimToady++ did at least a lot of those

[18:53] <DrForr> (math identifiers, super and subscripts, that is?)

[18:54] *** domidumont left
[18:55] <mr_ron> DrForr: Draft Unicode Technical Report #27 - Unicode Consortium ??

[18:55] *** dudz joined
[18:55] <DrForr> One of those; it talks about math operations and such.

[19:00] *** FROGGS joined
[19:01] <babydrop> DrForr: TBH, I'm still not following bdf's "reasoning". He says O'Rly is already commited, but then writes "I've shifted O'Reilly risk tolerance by taking on some of it myself". OK, so you launched a Kickstarter for $37K. Considering he plans to finish the book by August, his "risk" is he'd make "only" $4,000 per month, assuming NOT A SINGLE PERSON BUYS THE BOOK EVER. Hell, I'd love some of that sort of risk.

[19:01] <babydrop> But wait! Presumably at the same time he started a Kickstarter, he submitted a TPF grant, for another $10,000 of that juicy "risk". And to my knowledge didn't mention it on his Kickstarter (did he?). So what happened there? If he needed 50 grand of "risk", why not just kickstart for 50 grand?

[19:02] <psch> honestly, i most just don't see how bdf is involved with perl6

[19:02] <psch> that's my primary concern

[19:02] <babydrop> ditto

[19:02] <psch> i mean, i remember him being around occasionally about a year or one and a half years back or so

[19:03] <psch> and, well, considering i'm only closing in on three years of spotty attendance myself i probably don't have that much of a point to stand on anyway

[19:04] <psch> but if you're writing a "learn the essentials but also significant detail" book about a language that (kind of) recently released its 1.0 spec you probably should pay attention to what's likely to change in the future..?

[19:04] *** CIAvash left
[19:04] <psch> and, well, we're pretty explicit about "be on irc" wrt the pulse of langdev

[19:05] *** CIAvash joined
[19:09] <DrForr> I repeatedly mention IRC at the very *start* of my talks on the cummuity slides.

[19:10] <DrForr> *community # evil keyboard.

[19:10] *** mr_ron left
[19:10] *** mawkish left
[19:11] *** mawkish joined
[19:12] <DrForr> FWIW I'm all for the book, and I want to see it out in people's hands. But the lack of community interaction worries me. As it does most everyone here, so I'm not going to flog that dead horse.

[19:14] <DrForr> On the other hand, being distracted by an IRC window constantly open when you're trying to write is annoying too.

[19:15] <perlpilot> DrForr: were you going to be co-author on the book or something else?

[19:16] *** darutoko left
[19:17] <DrForr> I don't think that was ever his intention; part my reading too much into it and part miscommuication.

[19:17] * psch .oO( the evil keyboard strikes again )

[19:17] <perlpilot> okay.

[19:19] *** domidumont joined
[19:19] <perlpilot> So ... I find I'm much less enamored of the book then.

[19:20] *** cognominal left
[19:20] <DrForr> I'm just glad that the kickstarter text and now this proposal came out before I was more involved. I don't need the drama I can easily see ensuing.

[19:20] <babydrop> perlpilot: there's plenty of fish in the sea: https://perl6book.com/

[19:20] *** cognominal joined
[19:21] <[Coke]> btw, bdf will be speaking at a NYC perl meetup tomorrow.

[19:21] <perlpilot> babydrop: oh sure ... It's just that there's a certain gravitas associated with "Learning Perl" and "Programming Perl" and O'Reilly publications...

[19:22] <psch> honestly, this whole situations seems to strongly involve a rock and a hard place

[19:22] <perlpilot> babydrop: and what I don't want to see happen is a publication that #perl6 thinks sucks.

[19:23] <pyrimidine> babydrop, I guess my point is, bdf took the initiative to write up and get a Kickstarter rollnig (then funded), and also had the initiative to write up a TPF grant.  That's a lot of work

[19:23] * [Coke] hurls https://www.meetup.com/The-New-York-Perl-Meetup-Group/events/235779597/

[19:23] <psch> i don't see a way without dangerous -- if not straight-out damaging -- amount of drama happening 

[19:24] <babydrop> pyrimidine: and my point bdf is asking for a whole lot of money for work he's not competent to perform well.

[19:24] <babydrop> pyrimidine: and being secretive about it

[19:24] <pyrimidine> I do think it would have helped having an open coversation w/ the community here on how a 'Learning Perl6' would look.

[19:24] <pyrimidine> exactly

[19:24] <babydrop> screw it. 

[19:24] <psch> (it would definitely include a nbsp between the 'l' and the '6')

[19:24] * babydrop blocks out all of LP6 drama and focuses on code from now on

[19:25] <pyrimidine> babydrop: apologies for the noise.  I do agree with you on 90% of it.  The tone just was off to me

[19:28] * pyrimidine now needs to work out why my IRC client drops/reconnects so often

[19:29] *** RabidGravy left
[19:30] *** bjz joined
[19:31] *** bjz_ left
[19:34] *** zakharyas joined
[19:35] *** RabidGravy joined
[19:38] *** mls joined
[19:39] *** CIAvash left
[19:42] *** Charlie is now known as cw

[19:44] <jdv79> just fyi.  its very irritating that there is no easy way to nav the advent entries.

[19:45] <jdv79> i scroll to the bottom of the front page and it auto lengthens and i cant find tbe calendar selector thing

[19:45] <jdv79> on my phone

[19:46] *** domidumont left
[19:46] <[Coke]> we are ever in search of a wordpress theme that works excellently everywhere.

[19:48] <babydrop> jdv79: I don't see an option to display the calendar on mobile version as well... Sorry

[19:48] <jdv79> is it too much to ask for useable nav controls?

[19:48] <babydrop> It *is* there on desktop version

[19:48] *** maybekoo2 joined
[19:48] <babydrop> jdv79: we don't have a lot of control over this specific installation as we're using the free tier account on wordpress.com

[19:49] <jdv79> maybe its time to do it on hack in p5 or p6

[19:49] <psch> jdv79: i thought advent 2017 is the one that we host ourselves?

[19:49] <babydrop> jdv79: well volunteered! :D

[19:49] <jdv79> anyway.  yay.  i gave up:(

[19:50] <jdv79> oh, really?  17 huh.  cool!

[19:50] *** cognominal left
[19:50] *** ssotka left
[19:51] <babydrop> Granted. It's perfectly possible there *is* a way to make it sane and I just don'tknow it :)

[19:51] <babydrop> It's not like I know anything about Wordpress

[19:51] <babydrop> You can also visit http://reddit.com/r/perl6 all the posts are listed there

[19:51] <psch> so, for 2017 we obviously need Pod::To::HTTPS

[19:51] <babydrop> eww pod

[19:52] <babydrop> :)

[19:52] <psch> oh cmon, Pod6 is pretty good

[19:52] <babydrop> Markdown kinda spoiled me, I guess

[19:52] <psch> i mean, it still has an overabundance of =, but still

[19:52] <babydrop> I'm more annoyed by overabundance of < >... or rather of «<>|» stuff

[19:53] <babydrop> vs. [``]() in Markdownb

[19:53] <babydrop> I guess editor snippets is a way to go there

[19:53] <psch> hm, maybe we need different doc preprocessors too :P

[19:54] <psch> ...actually i don't know

[19:54] *** AlexDaniel left
[19:54] <psch> i mean, i've written some Pod6, but not a lot

[19:54] <psch> i wasn't terribly bothered by it, not even by the fact that i had to look it up by example in the synopses

[19:54] <babydrop> Markdown::To::Pod :)

[19:55] <psch> heh

[19:55] <psch> use Doc::Markdown; BEGIN %*LANG<DOC> = Doc::Markdown # was more my line of thought :P

[19:57] <psch> ...actually, i'm not sure in how far we have Pod6 in the language braid

[19:57] <moritz> %?LANG<DOC>, if anything

[19:57] <psch> that'd be a nice project for something like GSOC i guess

[19:57] <psch> m: say %?LANG

[19:57] <camelia> rakudo-moar 2d0198: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '%?LANG' is not declared␤at <tmp>:1␤------> 3say 7⏏5%?LANG␤»

[19:57] <psch> m: say %*LANG

[19:57] <camelia> rakudo-moar 2d0198: OUTPUT«Dynamic variable %*LANG not found␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[19:58] <moritz> setting dynamic variables at compile time doesn't seem to make too uch sense to me

[19:58] <moritz> since they are inherently tied to the run time

[19:58] <psch> moritz: right.  i'll concede to any critique on the semantics there

[19:58] <babydrop> m: BEGIN say %*LANG

[19:58] <TimToady> %*LANG should be considered deprecated

[19:58] <camelia> rakudo-moar 2d0198: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  No such method 'WHICH' for invocant of type 'Perl6::Grammar'␤    in code  at <tmp> line 1␤␤»

[19:59] <babydrop> m: BEGIN say %*LANG.^name

[19:59] <camelia> rakudo-moar 2d0198: OUTPUT«BOOTHash␤»

[19:59] <TimToady> the current language braid should be a property of the current cursor, not a dynvar

[20:00] <psch> TimToady: so where *do* we get to it?

[20:00] <TimToady> via some method on the current cursor

[20:01] *** cognominal joined
[20:03] <TimToady> once we get there, it will be possible to save a "current language" for reference in a separate semantic pass on the AST

[20:03] <TimToady> as it is currently, the dynvar goes out of scope before the next pass

[20:04] <TimToady> pragmas likewise should come through the cursor, not through a dynvar

[20:05] <TimToady> the cursor is the goto place for all things that define the current language, so using dynvars in parallel is a smell

[20:05] *** vike joined
[20:05] <psch> ah, okay

[20:07] <psch> so any assignment to anything belonging to the current cursor (i don't think $¢ currently works in the mainline..?) translates to a BEGIN..?

[20:08] <psch> or am i mixing semantics there?  afaiu, BEGIN is the time where we can add new bareword, which additions to the language braid might want to do?

[20:20] *** mawkish left
[20:21] *** mohae_ joined
[20:23] *** sena_kun joined
[20:23] *** mohae left
[20:25] *** mawkish joined
[20:26] *** pierre_ joined
[20:31] *** dudz left
[20:31] *** dudz joined
[20:31] *** pierre_ left
[20:34] *** labster joined
[20:38] <dalek> ecosystem: 7396929 | RabidGravy++ | META.list:

[20:38] <dalek> ecosystem: Add Manifesto

[20:38] <dalek> ecosystem: 

[20:38] <dalek> ecosystem: https://github.com/jonathanstowe/Manifesto

[20:38] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/73969296c7

[20:39] <RabidGravy> boom

[20:44] <moritz> bang!

[20:46] *** mawkish left
[20:53] <moritz> m: my %h is default([]); %h<a>.push: 1; %h<b>.push: 2; say %h

[20:53] <camelia> rakudo-moar 2d0198: OUTPUT«{}␤»

[20:54] <moritz> m: my %h; %h<a>.push: 1; %h<b>.push: 2; say %h

[20:54] <camelia> rakudo-moar 2d0198: OUTPUT«{a => [1], b => [2]}␤»

[20:54] <moritz> does this look like a bug to anybody else?

[20:54] <babydrop> yeah

[20:55] <moritz> I was curious whether it created two distinct arrays, but didn't expect to see %h empty

[20:55] * moritz rakudos submitbug

[20:55] *** pyrimidine left
[20:56] <masak> aye, bug

[20:56] *** El_Che joined
[20:58] *** FROGGS left
[20:58] <masak> not sure which of your two hypothesized behaviors I would expect, even though the "two distinct arrays" feels both nicer and more magical

[21:00] <moritz> I leave that open for the purpose of this bug report

[21:02] <moritz> the question is really: does the 'is default' trait clone the default value before assigning it

[21:02] <moritz> the right solution would be to capture the default as a thunk

[21:03] <moritz> and evaluate the thunk each time it's needed

[21:03] <moritz> just like we handle defaults in signatures

[21:03] <moritz> but I'm afraid our current trait system doesn't make that accessible

[21:05] *** Skarsnik_ joined
[21:05] <jnthn> m: https://gist.github.com/jnthn/ad63b599d6017a7ee82f415e1fd4d86f

[21:05] *** cognominal left
[21:05] <camelia> rakudo-moar 2d0198: OUTPUT«(0 1 2 3 4 5 6 7 8 9)␤»

[21:06] *** pyrimidine joined
[21:06] <jnthn> RabidGravy: Guess you've got more sophisticated uses for Manifesto, but ^^ :)

[21:06] <moritz> jnthn: sleep sort ftw

[21:08] <RabidGravy> :)

[21:08] *** Skarsnik left
[21:08] <RabidGravy> yeah 

[21:09] <RabidGravy> I couldn't think of an example that didn't have a dependency

[21:09] <jnthn> But it strikes me the module code might golf down some to a supply block

[21:11] *** pyrimidine left
[21:11] *** cognominal joined
[21:15] *** sena_kun left
[21:20] *** Tonik left
[21:21] *** donaldh joined
[21:24] <RabidGravy> that thought did occur to me but I couldn't work out how to lose the old promises

[21:26] *** espadrine joined
[21:28] *** sufrosti1o left
[21:29] *** sufrostico left
[21:30] *** lucasb left
[21:32] *** TEttinger joined
[21:37] *** pyrimidine joined
[21:37] *** AlexDaniel joined
[21:40] *** sufrostico joined
[21:40] *** sufrosti1o joined
[21:41] *** rindolf left
[21:41] *** pyrimidine left
[21:44] *** zakharyas left
[21:44] *** jonas left
[21:45] *** AlexDani` joined
[21:47] *** AlexDaniel left
[21:47] *** AlexDani` is now known as AlexDaniel

[21:50] *** bjz left
[21:51] *** gsoedl joined
[21:52] <[Coke]> ... we have a CLOSE phaser?

[21:53] <[Coke]> (and it's doc'd? :)

[21:55] <lizmat> only works in a supply block afaik

[22:08] *** bjz joined
[22:09] *** pyrimidine joined
[22:13] *** pyrimidine left
[22:20] *** TheDir left
[22:20] *** TheDir joined
[22:20] <dogbert17> is lizmat still awake?

[22:22] *** bjz left
[22:22] <dogbert17> m: https://gist.github.com/dogbert17/41042137f44394a0094c1cc1c05055bb

[22:22] <camelia> rakudo-moar 0428b7: OUTPUT«(signal SEGV)»

[22:22] <dogbert17> why does that golfattempt SEGV?

[22:22] <AlexDaniel> bisect: https://gist.github.com/dogbert17/41042137f44394a0094c1cc1c05055bb

[22:23] <dogbert17> .oO

[22:23] <bisectable6> AlexDaniel, It looks like a URL, but mime type is ‘text/html; charset=utf-8’ while I was expecting something with ‘text/plain’ or ‘perl’ in it. I can only understand raw links, sorry.

[22:23] <AlexDaniel> ah right

[22:23] <AlexDaniel> bisect: https://gist.githubusercontent.com/dogbert17/41042137f44394a0094c1cc1c05055bb/raw/fa0236369e6d8ca5c3eccf8a0a6fddac1f85f616/gistfile1.txt

[22:23] <bisectable6> AlexDaniel, Successfully fetched the code from the provided URL.

[22:23] <bisectable6> AlexDaniel, Bisecting by exit signal (old=2015.12 new=0428b79). Old exit signal: 0 (None)

[22:23] <AlexDaniel> there we go

[22:23] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/d020b178ffb9858385d25c1d02cb2046

[22:23] <dogbert17> cool

[22:23] <bisectable6> AlexDaniel, (2016-11-24) https://github.com/rakudo/rakudo/commit/172898eb1ee5ea3e47b29cf12b668be71362146d

[22:23] <AlexDaniel> dogbert17: will you submit a bug report?

[22:23] *** RabidGravy left
[22:24] <dogbert17> I guess so :-)

[22:24] <AlexDaniel> dogbert17: perhaps you want to golf it a little bit… :)

[22:24] <dogbert17> I have tried

[22:24] <AlexDaniel> lizmat: ping, ↑ (although you will probably see it anyway)

[22:24] <dogbert17> was hoping she was still awake

[22:25] <AlexDaniel> dogbert17: well, we need a ticket anyway

[22:25] <dogbert17> indeed, I'll fix

[22:25] *** donaldh left
[22:26] <AlexDaniel> … bisectable is so useful sometimes :O

[22:26] <dogbert17> indeed, AlexDaniel++

[22:28] <AlexDaniel> MasterDuke++ also for a bunch of other whateverable features

[22:29] *** MasterDuke joined
[22:31] *** pmurias left
[22:34] *** guest__ joined
[22:34] <dogbert17> done, RT #130294

[22:34] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130294

[22:37] *** setty1 left
[22:37] *** setty1 joined
[22:40] *** prammer left
[22:41] *** prammer joined
[22:41] <AlexDaniel> dogbert17: thanks

[22:44] *** El_Che_ joined
[22:45] *** El_Che_ left
[22:45] *** pyrimidine joined
[22:46] *** lukaramu left
[22:50] *** pyrimidine left
[22:54] <babydrop> How can I get a list of all core types? My goal is to get all the core methods and subs and introspect their signatures, to call them with different parameters to log how they fail.

[22:55] <babydrop> m: say keys ::CORE

[22:55] <camelia> rakudo-moar 0428b7: OUTPUT«()␤»

[22:55] <babydrop> I recall there was an invocation like that. Something or other

[22:58] <jnthn> m: say SETTING::.pairs.grep(!*.value.defined)

[22:58] <camelia> rakudo-moar 0428b7: OUTPUT«RESTRICTED-CLASS is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method gist at src/RESTRICTED.setting line 33␤  in block <unit> at <tmp> line 1␤␤»

[22:58] *** guest__ left
[22:59] <jnthn> evalable6: say SETTING::.pairs.grep(!*.value.defined)

[22:59] <evalable6> jnthn, rakudo-moar 0428b79: OUTPUT«(exit code 1) RESTRICTED-CLASS is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method gist at src/RESTRICTED.setting line 33␤  in block <unit> at /tmp/ywtw9hRrfp line 1␤»

[22:59] <jnthn> oh come on, stop it with this security stuff :P

[22:59] *** mr_ron joined
[22:59] <babydrop> I get No such method 'WHICH' for invocant of type 'Perl6::Metamodel::ContainerDescriptor'

[22:59] <babydrop> but a bunch of stuff if I reverse the conditional.

[22:59] <babydrop> Thanks, I think I can figure out the rest :)

[23:02] <AlexDaniel> yea. Not yet, not yet

[23:07] *** prammer left
[23:08] <mr_ron> AlexDaniel: I just read your comment on my issue about unicode identifiers.  I admit to being a relic of the ASCII and even EBCDIC era but think the Unicode vs Texas page is too much digging for someone who just wants to know about using Unicode for identifiers and numbers.

[23:08] <mr_ron> https://github.com/perl6/doc/issues/1039

[23:08] *** pyrimidine joined
[23:09] <mr_ron> I guess I am thinking in terms of advertising a feature rather than providing spec.

[23:09] <AlexDaniel> hmmm

[23:10] <AlexDaniel> mr_ron: perhaps you can suggest something specific?

[23:10] <AlexDaniel> or maybe even submit a pull request

[23:11] <mr_ron> I want to know about the use of subscripts and the delta symbol for an identifier.  It would seem to be a syntax issue and not about a texas/ascii alternative to Unicode.

[23:12] <babydrop> mr_ron: delta is not a symbol, it's a greek letter, and letters are allowed in identifiers.

[23:12] <AlexDaniel> “Any codepoint that has the Ll (Letter, lowercase), Lu (Letter, uppercase), Lt (Letter, titlecase), Lm (Letter, modifier), or the Lo (Letter, other) property can be used just like any other alphabetic character from the ASCII range.”

[23:12] <AlexDaniel> which means that Ll, Lu, Lt, Lm, Lo are allowed in identifiers

[23:12] <AlexDaniel> everything else… not really

[23:13] <mr_ron> Yes - that is in Unicode vs Texas - but I am not looking for an alternative ASCII coding 

[23:13] <AlexDaniel> u: ₆

[23:13] <unicodable6> AlexDaniel, U+2086 SUBSCRIPT SIX [No] (₆)

[23:13] <babydrop> mr_ron: basically uncode stuff has "properties" so valid stuff in identifiers goes by those properties. For example, is an uppercase letter, so it has Lu property and Lu properties are allowed

[23:13] *** pyrimidine left
[23:13] <babydrop> *delta is an uppercase letter

[23:13] <AlexDaniel> so ₀₋₉ are not going to work in identifiers

[23:13] <AlexDaniel> which is sad, I know!

[23:14] <babydrop> m: '−'.uniprop.say

[23:14] <camelia> rakudo-moar 0428b7: OUTPUT«Sm␤»

[23:14] <AlexDaniel> .oO( but it is even sadder that they don't work as array subscripts )

[23:14] <babydrop> heh

[23:14] *** Skarsnik_ left
[23:14] <mr_ron> I stand corrected on delta but still wonder about having the info on the right page.  Since it's a feature I wonder if it might not even be worth an example?

[23:15] <AlexDaniel> mr_ron: yea, it's worth an example and worth a link to unicode_texas page :)

[23:16] <babydrop> mr_ron: yes, that would be helpful. If you can think of a good way to document that, please submit a PR

[23:16] <mr_ron> Thanks ... will try hopefully by sometime tomorrow.

[23:16] <babydrop> \o/

[23:19] <AlexDaniel> 🙌

[23:20] *** skids joined
[23:21] *** cognominal left
[23:22] *** cognominal joined
[23:23] <tbrowder> hi #perl6

[23:23] <AlexDaniel> 🙋

[23:25] <AlexDaniel> dogbert17: hey

[23:25] <AlexDaniel> actually, it seems to be something different

[23:25] <AlexDaniel> lizmat++ only revealed the problem ( https://github.com/rakudo/rakudo/commit/172898eb1ee5ea3e47b29cf12b668be71362 )

[23:26] <AlexDaniel> it does not segfault with MVM_SPESH_DISABLE=1

[23:28] <babydrop> tbrowder: oh, BTW, I only today saw your email about the Advent thing, 'cause I rarely check email.

[23:28] <babydrop> huggable: advent

[23:28] <huggable> babydrop, https://github.com/perl6/mu/blob/master/misc/perl6advent-2016/schedule

[23:29] <babydrop> tbrowder: there's one spot you can post in, if you want. And then [Coke] won't need to write his. https://github.com/perl6/mu/blob/master/misc/perl6advent-2016/schedule#L13

[23:30] <tbrowder> babydrop: ok but understand it won't be "new" (but i have an idea to extend it just a bit)

[23:31] *** telex left
[23:31] *** maybekoo2 left
[23:36] <babydrop> tbrowder: yes, extend it and it'll be fine, since you mention it got little exposure when you first wrote it :) Add yourself to https://github.com/perl6/mu/blob/master/misc/perl6advent-2016/schedule

[23:36] <babydrop> .tell [Coke] seems like we found a volunteer to fill up the last spot (tbrowder) so you're off the hook for your article

[23:36] <yoleaux> babydrop: I'll pass your message to [Coke].

[23:37] <babydrop> tbrowder: do you have access to post on https://perl6advent.wordpress.com ? If not, let me know your wordpress username (create one if needed) and I'll invite you.

[23:38] <dogbert17> AlexDaniel: an optimizer bug then?

[23:38] <tbrowder> let me see...

[23:38] *** revdiablo joined
[23:38] *** pmurias joined
[23:39] <pmurias> should we also setup travis to run nqp tests on Mac OS X?

[23:39] <babydrop> wouldn't hurt

[23:39] <babydrop> pmurias: you have a robomessage in -dev

[23:40] *** Actualeyes joined
[23:40] *** AlexDaniel left
[23:41] <pmurias> babydrop: I deleted that branch

[23:41] <babydrop> \o/

[23:42] <pmurias> babydrop: if we verify that the ** works on mac os x, we should be able also to close: https://rt.perl.org/Public/Bug/Display.html?id=125938

[23:44] *** Actualeyes left
[23:44] <babydrop> .ask lizmat would you be able to test whether 2**10000000000 throws on OSX on HEAD rakudo? pmurias++ fixed RT#125938 we just need someone with OSX to verify the fix works.

[23:44] <yoleaux> babydrop: I'll pass your message to lizmat.

[23:44] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=125938

[23:45] <tbrowder> babydrop: my wordpress user name is "tombrowder" and it doesn't look like i have access to perl6advent.wordpress.com (but can follow it)

[23:46] <babydrop> tbrowder: "Invitation sent successfully"

[23:46] *** telex joined
[23:48] <babydrop> tbrowder: a word of warning: be sure to double check your < and > characters get rendered correctly. When you switch Visual and HTML modes in wordpress, it deletes them. I personally wrote my stuff in markdown, then placed it into a github gist, naming the file with .md extension, and then gave the URL to this script that spat out HTML code I just pasted into wordpress:

[23:48] <babydrop> https://gist.github.com/zoffixznet/153bef6a3c9d8a827f4c9c46e308a53b

[23:50] <babydrop> I s'pose any &somename; would be affected as well

[23:51] *** cognominal left
[23:51] <tbrowder> zoffix, er babydrop: thanks!

[23:52] <babydrop> :)

[23:52] *** gsoedl left
[23:53] *** cpage_ left
[23:54] *** pyrimidine joined
[23:56] *** firstdayonthejob left
[23:58] *** sufrostico left
[23:59] *** sufrosti1o left
[23:59] *** pyrimidine left
