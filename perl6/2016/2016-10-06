[00:04] *** LegalResale joined
[00:12] <timotimo> lucasb_: i was hoping joseph garvin would answer with some more questions

[00:14] *** pdcawley left
[00:19] *** lucasb_ left
[00:40] *** ed_sand_pol joined
[00:41] *** ed_sand_pol left
[00:45] *** raoulvdberge left
[00:46] *** cognominal left
[00:47] *** cognominal joined
[00:55] *** pierre_ joined
[01:12] *** cyphase left
[01:17] *** Actualeyes joined
[01:29] *** cdg joined
[01:36] *** zakharyas joined
[01:40] *** _slade_ left
[01:46] *** ilbot3 left
[01:47] *** ilbot3 joined
[01:47] *** cdg left
[01:48] *** cdg joined
[01:50] *** cyphase joined
[01:54] *** eliasr left
[01:58] *** cyphase left
[02:02] *** cyphase joined
[02:07] *** cyphase left
[02:09] *** Guest62166 is now known as ponbiki

[02:17] *** bjz joined
[02:25] *** nadim_ left
[02:28] *** perlawhirl left
[02:30] *** perlawhirl joined
[02:54] *** aries_liuxueyang left
[02:55] *** aries_liuxueyang joined
[02:55] *** noganex_ joined
[02:56] *** geraud joined
[02:57] *** wamba joined
[02:58] *** noganex left
[03:05] <AlexDaniel> m: my %x = <a 20 b 40 c 60>; my @a = %x, %x; say @a»<a c>

[03:05] <camelia> rakudo-moar 338a70: OUTPUT«((20 60) (20 60))␤»

[03:05] <AlexDaniel> m: my %x = <a 20 b 40 c 60>; my @a = %x, %x; say @a»<a c>:kv

[03:05] <camelia> rakudo-moar 338a70: OUTPUT«Unexpected named argument 'kv' passed␤  in block <unit> at <tmp> line 1␤␤»

[03:05] <AlexDaniel> how can I make it work?

[03:08] <AlexDaniel> it's kinda weird that I can't just switch from this

[03:08] <AlexDaniel> m: my %x = <a 20 b 40 c 60>; my @a = %x, %x; say @a[0]<a c>:kv

[03:08] <camelia> rakudo-moar 338a70: OUTPUT«(a 20 c 60)␤»

[03:09] <AlexDaniel> well sure I can do this:

[03:09] <AlexDaniel> m: my %x = <a 20 b 40 c 60>; my @a = %x, %x; say @a.map({.<a c>:kv})

[03:09] <camelia> rakudo-moar 338a70: OUTPUT«((a 20 c 60) (a 20 c 60))␤»

[03:10] <AlexDaniel> but what if I really want to use » ?

[03:10] <AlexDaniel> also:

[03:10] <AlexDaniel> m: my %x = <a 20 b 40 c 60>; my @a = %x, %x; say @a.map(*<a c>:kv)

[03:10] <camelia> rakudo-moar 338a70: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤You can't adverb ␤at <tmp>:1␤------> 030>; my @a = %x, %x; say @a.map(*<a c>:kv7⏏5)␤    expecting any of:␤        pair value␤»

[03:10] <AlexDaniel> “You can't adverb”, thanks. Can't adverb what?

[03:16] *** ufobat left
[03:17] *** cdg_ joined
[03:18] *** rgrinberg joined
[03:19] *** cdg left
[03:22] *** cdg_ left
[03:25] *** ufobat joined
[03:29] *** khw left
[03:31] *** grondilu left
[03:41] *** Actualeyes left
[03:42] *** dg left
[03:56] <perlawhirl> AlexDaniel: What are you actually wanting to achieve with the » ?

[03:56] *** itaipu joined
[03:57] <perlawhirl> because you could possibly slice the hash before iterating over it... but i'm not sure what your goal is

[03:57] <perlawhirl> my %x = <a 20 b 40 c 60>; say %x<a c>:kv

[03:57] <perlawhirl> m: my %x = <a 20 b 40 c 60>; say %x<a c>:kv

[03:57] <camelia> rakudo-moar 338a70: OUTPUT«(a 20 c 60)␤»

[03:58] <AlexDaniel> perlawhirl: I have array of hashes and just want to print some slices

[03:58] <perlawhirl> m: my %x = <a 20 b 40 c 60>; say (%x<a c>:kv)».succ

[03:58] <camelia> rakudo-moar 338a70: OUTPUT«(b 21 d 61)␤»

[03:58] <AlexDaniel> m: my %x = <a 20 b 40 c 60>; my @a = %x, %x; say @a.map({.<a c>:kv})

[03:58] <camelia> rakudo-moar 338a70: OUTPUT«((a 20 c 60) (a 20 c 60))␤»

[03:58] <AlexDaniel> perlawhirl: ↑ this

[04:00] <AlexDaniel> perlawhirl: and honestly this is some random hackery I have in some temp code, but I am interested how :kv can be applied if you are using »

[04:01] *** wamba left
[04:02] <AlexDaniel> does not have to be hashes

[04:02] <AlexDaniel> m: my @a = <a b c d>, <3 4 5 6>; say @a»[0, *-1]

[04:02] <camelia> rakudo-moar 338a70: OUTPUT«((a d) (3 6))␤»

[04:02] <AlexDaniel> here is a simpler example

[04:03] <AlexDaniel> sure, you can use zip, but come on

[04:03] <AlexDaniel> m: my @a = <a b c d>, <3 4 5 6>; say @a»[0, *-1]:kv

[04:03] <camelia> rakudo-moar 338a70: OUTPUT«Unexpected named argument 'kv' passed␤  in block <unit> at <tmp> line 1␤␤»

[04:03] <perlawhirl> well... i think the problem here is » will itemize the keys and values, essentially destructuring the kv pairs, so it's probably not possible

[04:03] <perlawhirl> m: my %x = <a 20 b 40 c 60>; my @a = %x, %x; @a».say

[04:03] <camelia> rakudo-moar 338a70: OUTPUT«20␤60␤40␤20␤60␤40␤»

[04:03] <AlexDaniel> destructuring what pairs?

[04:04] <AlexDaniel> I want @a»([0, *-1]:kv, not @a:kv»[0, *-1]

[04:04] <perlawhirl> oh... i thought @a is an Array of Pairs... i see it's an Array of Hash

[04:04] <perlawhirl> my mistake

[04:05] *** aries_liuxueyang left
[04:05] <AlexDaniel> m: my @a = <a b c d>, <3 4 5 6>; say @a[*]:kv»[0]

[04:05] <camelia> rakudo-moar 338a70: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing infix inside []␤at <tmp>:1␤------> 3a = <a b c d>, <3 4 5 6>; say @a[*]:kv»[7⏏050]␤    expecting any of:␤        bracketed infix␤        infix␤        infix stopper␤»

[04:05] <AlexDaniel> cannot do that too

[04:06] <perlawhirl> but still... @a».say shows that it itemises all the key/values, so once you've done @a» you can't really :kv on it

[04:06] <perlawhirl> m: my %x = <a 20 b 40 c 60>; my @a = %x, %x; say @a».&{ say .WHAT }

[04:06] <camelia> rakudo-moar 338a70: OUTPUT«(IntStr)␤(IntStr)␤(IntStr)␤(IntStr)␤(IntStr)␤(IntStr)␤[{a => True, b => True, c => True} {a => True, b => True, c => True}]␤»

[04:06] <perlawhirl> after @a» you are dealing with IntStr's, not Hashes that can be adverb'd with :kv

[04:06] <AlexDaniel> m: my %x = <a 20 b 40 c 60>; my @a = %x, %x; say @a.map({.<a c>:kv})

[04:06] <camelia> rakudo-moar 338a70: OUTPUT«((a 20 c 60) (a 20 c 60))␤»

[04:06] <AlexDaniel> perlawhirl: ↑ here I :kv on it perfectly

[04:07] <perlawhirl> » is not a mini-map

[04:07] <AlexDaniel> oh right

[04:07] <AlexDaniel> now I remember how to do it

[04:07] <AlexDaniel> m: my %x = <a 20 b 40 c 60>; my @a = %x, %x; say @a».&{<a c>:kv}

[04:07] <camelia> rakudo-moar 338a70: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤You can't adverb <a c>␤at <tmp>:1␤------> 3 60>; my @a = %x, %x; say @a».&{<a c>:kv7⏏5}␤    expecting any of:␤        pair value␤»

[04:07] <AlexDaniel> m: my %x = <a 20 b 40 c 60>; my @a = %x, %x; say @a».&(<a c>:kv)

[04:07] <camelia> rakudo-moar 338a70: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤You can't adverb <a c>␤at <tmp>:1␤------> 3 60>; my @a = %x, %x; say @a».&(<a c>:kv7⏏5)␤    expecting any of:␤        pair value␤»

[04:08] <AlexDaniel> m: my %x = <a 20 b 40 c 60>; my @a = %x, %x; say @a».&{.<a c>:kv}

[04:08] <camelia> rakudo-moar 338a70: OUTPUT«Odd number of elements found where hash initializer expected:␤Found 3 (implicit) elements:␤Last element seen: "b"␤  in block <unit> at <tmp> line 1␤␤»

[04:09] <AlexDaniel> perlawhirl: ahhh, I now see what you are saying

[04:09] <perlawhirl> » is not map

[04:09] <perlawhirl> it tends to do a deeper destructure on indivial items

[04:11] <AlexDaniel> m: my @a = <a b c d>, <3 4 5 6>; say @a».&{say $_; $_}

[04:11] <camelia> rakudo-moar 338a70: OUTPUT«a␤b␤c␤d␤3␤4␤5␤6␤[(a b c d) (3 4 5 6)]␤»

[04:11] <AlexDaniel> indeed

[04:12] <AlexDaniel> m: my @a = <30 50 60>, <3 4 5 6>; say @a».&{$_ + 5}

[04:12] <camelia> rakudo-moar 338a70: OUTPUT«[(35 55 65) (8 9 10 11)]␤»

[04:13] <AlexDaniel> m: my @a = <30 50 60>, <3 4 5 6>; say @a.deepmap: {$_ + 5}

[04:13] <camelia> rakudo-moar 338a70: OUTPUT«[(35 55 65) (8 9 10 11)]␤»

[04:13] <AlexDaniel> perlawhirl: so » is not map, it is deepmap?

[04:14] <perlawhirl> it appears to be closer to a deepmap, yes

[04:14] <AlexDaniel> :-/

[04:16] <AlexDaniel> how often people need deepmap?

[04:16] <AlexDaniel> » is very weird in terms of huffman coding

[04:18] *** itaipu left
[04:18] *** committable6 joined
[04:19] <AlexDaniel> coimtable6: HEAD say ‘slowly getting back to life :)’

[04:19] <committable6> AlexDaniel, ¦«HEAD»: slowly getting back to life :)

[04:19] <perlawhirl> again i would say that » is not a short version of map. sure it acts similar under some circumstances... semantically, it's slightly different

[04:20] <AlexDaniel> perlawhirl: what's the difference between » and deepmap besides » being potentially parallelizable?

[04:22] <perlawhirl> that's probably a better question for one of the core devs. I had a good example lying around of why it's "deepmap" like properties are good, but i'm at $dayjob right now.

[04:22] <perlawhirl> will share if i can track it down

[04:22] *** committable6 left
[04:23] *** committable6 joined
[04:23] *** committable6 left
[04:24] <AlexDaniel> … segfault…

[04:24] *** itaipu joined
[04:25] *** committable6 joined
[04:26] *** pierre_ left
[04:32] *** cpage__ left
[04:34] *** itaipu left
[04:40] *** pete joined
[04:40] *** pete left
[04:42] *** Actualeyes joined
[04:50] *** Cabanossi left
[04:51] *** AlexDaniel left
[04:54] *** Cabanossi joined
[05:11] *** wamba joined
[05:14] *** skids left
[05:20] *** cpage__ joined
[05:27] *** flexibeast joined
[05:31] *** rgrinberg left
[05:34] <flexibeast> Hey all. i'm trying to create a grammar for vCard 4.0, and the spec transitively refers to character ranges, e.g. %xC2-DF. Looking at regexes.pod6, i can't determine if the Perl6 way to do this is as described in Perl5's perlrecharclass, e.g. `[\xC2-\xDF]`?

[05:34] *** ufobat left
[05:37] *** pdcawley joined
[05:45] *** wamba left
[05:58] *** bjz left
[05:59] *** bjz joined
[05:59] <moritz> flexibeast: tha would be <[ \c[C2] .. \c[DF] ]>

[06:00] *** neuraload joined
[06:05] <flexibeast> moritz: Ah okay, thanks!

[06:09] *** grondilu joined
[06:19] *** zacts left
[06:19] *** domidumont joined
[06:19] *** amalia_ left
[06:21] *** amalia_ joined
[06:23] *** domidumont left
[06:23] <scott> are there any specific reasons to use or not use sigils on constants?

[06:23] <scott> I was thinking of adding @ to my array constant for easier use in string interpolation - is this reasonable?

[06:24] *** domidumont joined
[06:27] *** GeekNerd_phone joined
[06:28] <GeekNerd_phone> perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl 

[06:32] <scott> GeekNerd_phone: I agree

[06:32] <GeekNerd_phone> perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl 

[06:33] <perlawhirl> GeekNerd_phon: please don't spam the channel

[06:33] <GeekNerd_phone> scott: perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl

[06:33] *** pierre_ joined
[06:33] <GeekNerd_phone> pierre_: WELCOME TO THE LAND OF PERL

[06:33] <GeekNerd_phone> perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl p

[06:34] *** zacts joined
[06:34] <GeekNerd_phone> zacts: welcome to perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl per

[06:35] <GeekNerd_phone> camelia,  dalek,  ilogger2,  yoleaux,  [Coke],  [particle]1,  [ptc],  a3r0,  ab5tract,  abruanese,  Actualeyes,  adrusi,  aindilis,  akiym,  albongo,  Alikzus,  alnewkirk,  amalia_,  ambs,  andrewalker,  apejens,  araujo,  arnsholt,  atacama,  atta,  avalenn,  avar,  avuserow,  awwaiid,  b2gills: 

[06:35] <GeekNerd_phone> baest,  bartolin,  bhm,  BinGOs,  bitmap,  bjz,  BooK_,  bpmedley,  breinbaas,  broquaint,  Bucciarati,  buggable,  BuildTheRobots,  Cabanossi,  canopus,  Celelibi,  cgfbee,  chansen_,  charsbar______,  chee,  ChoHag,  chris2,  cibs,  clkao,  cognominal,  committable6,  cooper,  cosimo,  cpage_,  cpage__: 

[06:35] <GeekNerd_phone> cxreg,  d^_^b,  damnlie,  DANtheBEASTman,  DarthGandalf,  dataangel,  daxim,  decent,  diego_k,  dj_goku,  domidumont,  domm1,  DrForr,  DrParis,  dsp_,  Dunearhp,  dustinm`,  dwarring,  dylanwh,  edenc,  El_Che,  emdashcomma,  ens,  erdic,  esh,  Exodist,  eyck,  eythian,  f3ew,  felher: 

[06:36] <DANtheBEASTman> /kick GeekNerd_phone 

[06:36] <GeekNerd_phone> flexibeast,  freeze,  frew,  ft,  gabiruh_,  garu,  geekosaur,  gensym,  geraud,  gfldex,  ggherdov,  ggoebel,  Gothmog_,  go|dfish,  grondilu,  Grrrr,  Guest84199,  gypsydave5,  hackedNODE,  hahainternet,  hanekomu,  harmil_wk,  hcit,  hobbs,  hoelzro,  Hotkeys,  huf_,  huggable,  ilbelkyr,  ilbot3: 

[06:36] <DANtheBEASTman> what the fuck dude

[06:36] <GeekNerd_phone> DANtheBEASTman: poop

[06:36] <DANtheBEASTman> fuck offf

[06:36] <Hotkeys> can i help you

[06:36] <GeekNerd_phone> perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl 

[06:36] <GeekNerd_phone> Hotkeys: ywah

[06:36] <DANtheBEASTman> !mods

[06:36] <GeekNerd_phone> i need some perly poop

[06:36] *** DANtheBEASTman left
[06:37] <GeekNerd_phone> ilmari,  ilmari[m],  imcsk8,  ingy,  inokenty,  integral,  isacloud,  jameslenz,  japhb,  jast,  jcallen,  jdv79,  jferrero,  JimmyZ,  jkramer,  jnap_,  jnthn,  jonadab,  jonas1,  Jonis,  jsimonet,  Juerd,  k-man,  Kaffe_,  kent\n,  Khisanth,  kipd,  kmwallio,  konobi,  KotH: 

[06:37] <GeekNerd_phone> krakan,  kshannon,  kst,  labster,  larion,  leego,  LegalResale,  literal,  lizmat,  llfourn,  lucs,  luis`,  M-Illandan,  m0ltar,  maddingue,  markk,  masak,  MasterDuke,  Matias[m],  matt_,  Matthew[m],  mattp_,  melezhik,  mephinet,  MilkmanDan,  mindos,  mithaldu_,  mls,  mohae_,  moritz: 

[06:37] <GeekNerd_phone> mr-foobar,  mrsolo,  mspo,  mst,  mtj_,  musca,  nebuchadnezzar,  nemo,  NeuralAnomaly,  neuraload,  nightfrog,  nine,  noganex_,  notbenh,  notbenh_,  nowan,  obfusk,  olinkl,  orevdiabl,  pdcawley,  perigrin,  perlawhirl,  perlpilot,  Peter_R,  petercommand,  peteretep,  pierre_,  pierrot,  pmichaud,  pnu_: 

[06:37] <GeekNerd_phone> pochi,  ponbiki,  Possum,  PotatoGim,  Praise,  profan,  protium,  psch,  pyrimidi_,  ranguard,  raydiak,  rblackwe_,  remmie,  riatre,  ribasushi,  richi235,  risou___,  rjbs,  rmmm,  robinsmidsrod,  rodarmor,  roguelazer,  ruoso,  saki,  salparadise,  samcv,  sammers,  scott,  seatek,  sergot,  setty2,  sftp,  Sgeo,  shadowpaste,  ShimmerFairy,  shmibs,  SHODAN,  silug_: 

[06:38] <GeekNerd_phone> simcop2387,  sivoais,  sjn,  sjohnsen-,  skaji,  smash,  SmokeMachine____,  solarbunny,  SourceBaby,  spider-mario,  Spot__,  sQuEE,  ssm_,  stevieb,  stigo,  stmuk_,  stux|RC-only,  sufrostico,  sunnavy,  synopsebot6,  tadzik,  tailgate,  tatata,  tbrowder,  TeamBlast,  telex: 

[06:38] <samcv> wow

[06:38] <GeekNerd_phone> TEttinger,  TheDir,  Timbus,  timeless,  timotimo,  TimToady,  tinita,  tomaw,  tony-o,  ugexe,  Ulti,  Unavowed,  Undercover,  Upasaka,  user9,  Util,  vcv,  vike,  vytas,  w4and0er96,  woodruffw,  woolfy,  wtw_,  xdbr,  xfix,  xiaomiao,  xinming,  Xliff,  xxpor,  yeltzooo,  zacts: 

[06:38] <GeekNerd_phone> samcv: poop?

[06:38] <samcv> yes poop

[06:38] <GeekNerd_phone> zakharyas,  zengargoyle,  zhmylove,  zoosha,  zostay: 

[06:39] <samcv> if only i had ops

[06:39] <GeekNerd_phone> poop poop poop poop poop poop poop poop poop poop poop poop poop 

[06:39] <GeekNerd_phone> samcv: dont worry

[06:39] <GeekNerd_phone> ops have been pinged

[06:39] <GeekNerd_phone> as has everyone

[06:39] <samcv> yes i am sure :3

[06:40] <labster> m: "\x[1F4A9]".say

[06:40] <camelia> rakudo-moar 338a70: OUTPUT«💩␤»

[06:40] <samcv> GeekNerd_phone, perl6 or perl5

[06:40] <labster> there you go, request satisfied.

[06:40] <samcv> m: "/kick GeekNerd_phone ".say

[06:40] <camelia> rakudo-moar 338a70: OUTPUT«/kick GeekNerd_phone ␤»

[06:40] *** perlawhirl left
[06:40] <labster> Is there anything else we can do for you GeekNerd_phone?

[06:41] <GeekNerd_phone> lol

[06:41] <GeekNerd_phone> thats poop!

[06:42] <labster> Yup, that's what you asked for.  Any other perl requests, or are we good here?

[06:43] *** wamba joined
[06:44] <flexibeast> moritz: i'd like to add information about \c to regexes.pod6. (a) Can it be used with any Unicode codepoint, e.g. \c[FFFD]? (b) Can Unicode names be used as endpoints in ranges, e.g <[ \c[LATIN CAPITAL LETTER A WITH GRAVE] .. \c[LATIN CAPITAL LETTER AE]  ]>? (c) Why use \c rather than \x?

[06:46] <flexibeast> (S05, together with its apocalypse and exegesis, don't seem to answer these questions.)

[06:46] <psch> m: say "\x41"; say "\c[LATIN CAPITAL LETTER A]"

[06:46] *** hobbs left
[06:46] <camelia> rakudo-moar 338a70: OUTPUT«A␤A␤»

[06:47] <psch> \c, to me, is more for codepoint names than numbers, although it does both

[06:47] <psch> m: say "\xFFFD"

[06:47] <camelia> rakudo-moar 338a70: OUTPUT«�␤»

[06:47] <psch> m: say "\c[FFFD]"

[06:47] <camelia> rakudo-moar 338a70: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unrecognized character name FFFD␤at <tmp>:1␤------> 3say "\c[FFFD7⏏5]"␤»

[06:47] *** wamba left
[06:47] <psch> oh, and it doesn't do hex apparently :)

[06:47] <flexibeast> psch: Ah, well there we go. :-)

[06:47] <psch> well, doesn't do hex implicitly

[06:47] <psch> m: say "\c[0xFFFD]"

[06:47] <camelia> rakudo-moar 338a70: OUTPUT«�␤»

[06:48] <psch> m: \c[LATIN CAPITAL LETTER A WITH GRAVE] .. \c[LATIN CAPITAL LETTER AE]

[06:48] <camelia> rakudo-moar 338a70: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared names:␤    A used at line 1␤    AE used at line 1␤    CAPITAL used at line 1␤    GRAVE used at line 1␤    LATIN used at line 1␤    LETTER used at line 1␤    WITH used at line 1␤Und…»

[06:49] <psch> erg, accidentally copied the line break apparently

[06:49] <psch> m: say  "\c[LATIN CAPITAL LETTER A WITH GRAVE]" .. "\c[LATIN CAPITAL LETTER AE]"

[06:49] <camelia> rakudo-moar 338a70: OUTPUT«"À".."Æ"␤»

[06:49] <psch> m: say ("\c[LATIN CAPITAL LETTER A WITH GRAVE]" .. "\c[LATIN CAPITAL LETTER AE]").elems

[06:49] <camelia> rakudo-moar 338a70: OUTPUT«7␤»

[06:53] <flexibeast> Hmm. So how can i determine which behaviours are part of the Perl6 spec, and which the spec leaves as 'implementation-defined'?

[06:53] <psch> flexibeast: the spec (in progress) is roast

[06:53] <psch> flexibeast: the synopses are for reference but not kept up to date

[06:53] <moritz> flexibeast: the test suite is the spec. grep for occurrences of the patterns to see if it's tested

[06:54] <flexibeast> psch, moritz: Okay, thanks, will do.

[06:55] <GeekNerd_phone> hobbs is a fucking moton

[06:55] <GeekNerd_phone> *moron

[06:55] <GeekNerd_phone> been PMing me death threats and then /quit right before I sent the message threatening to call the FBI on him

[06:56] *** wamba joined
[06:56] <moritz> GeekNerd_phone: why/how does this belong on #perl6?

[06:57] <GeekNerd_phone> moritz: the only channel me and hobbs have in common

[06:57] <GeekNerd_phone> and my mass highlight and poop at #perl6 clearly triggered his death threats in PM

[06:58] <moritz> wow, that's harsh

[06:59] <GeekNerd_phone> moritz: yeah

[06:59] <GeekNerd_phone> he said someday he'd crush my skull under his foot and smile

[06:59] <GeekNerd_phone> Well he better hurry!

[06:59] <GeekNerd_phone> One year and 3 months from now I will be old enough for a concealed weapon permit

[07:00] <GeekNerd_phone> and then good fucking luck to him, if he wants to fuck with me

[07:00] *** xinming left
[07:01] <samcv> wew

[07:01] <samcv> things got steamy in here

[07:04] *** GeekNerd_phone left
[07:06] <peteretep> that was exciting

[07:07] <flexibeast> So doing "grep -r '\\c' *" in rakudo/t/spec seems to show \x being used for hex codepoints, and \c being used for named codepoints, but "grep -r '\\c' * | grep 'range'" returns no results.

[07:11] <psch> flexibeast: well, if character ranges are tested and \c is tested...

[07:11] <psch> flexibeast: i mean, there's no new and exciting behavior in the interaction that's not covered by testing those two seperately

[07:13] *** xinming joined
[07:19] *** xinming left
[07:20] <moritz> t/spec$ git grep '\\[cx].*\.\.

[07:21] <moritz> several hits for \x in regex ranges

[07:23] *** abraxxa joined
[07:27] *** bbobby joined
[07:28] *** bbobby left
[07:28] <flexibeast> Okay.

[07:30] *** bjz left
[07:32] *** bjz joined
[07:37] *** dakkar joined
[07:39] *** abraxxa left
[07:41] <masak> morning, #perl6

[07:42] *** abraxxa joined
[07:47] <[ptc]> masak: o/

[07:49] *** abraxxa left
[07:49] *** abraxxa joined
[07:53] <dalek> doc: e89f90f | Alexis++ | doc/Language/grammars.pod6:

[07:53] <dalek> doc: Fix typo.

[07:53] <dalek> doc: review: https://github.com/perl6/doc/commit/e89f90f9f9

[07:53] <dalek> doc: 7e5dae3 | RabidGravy++ | doc/Language/grammars.pod6:

[07:53] <dalek> doc: Merge pull request #942 from flexibeast/master

[07:53] <dalek> doc: 

[07:53] <dalek> doc: Fix typo.

[07:53] <dalek> doc: review: https://github.com/perl6/doc/commit/7e5dae3555

[07:55] *** pdcawley left
[07:58] *** RabidGravy joined
[07:58] *** g4 joined
[08:08] *** seatek left
[08:12] *** nadim_ joined
[08:18] *** rindolf joined
[08:24] *** eliasr joined
[08:30] *** Actualeyes left
[08:35] *** mr-foobar left
[08:36] *** pecastro joined
[08:40] *** mr-foobar joined
[08:41] *** user9 left
[08:49] *** wamba left
[08:50] <dalek> doc: 79a5271 | Alexis++ | doc/Language/regexes.pod6:

[08:50] <dalek> doc: Add more examples of character class ranges.

[08:50] <dalek> doc: review: https://github.com/perl6/doc/commit/79a5271d02

[08:50] <dalek> doc: 76b6568 | RabidGravy++ | doc/Language/regexes.pod6:

[08:50] <dalek> doc: Merge pull request #945 from flexibeast/regexes

[08:50] <dalek> doc: 

[08:50] <dalek> doc: Add more examples of character class ranges.

[08:50] <dalek> doc: review: https://github.com/perl6/doc/commit/76b65688c3

[08:57] *** wamba joined
[09:01] *** bjz left
[09:01] *** bjz joined
[09:04] *** domidumont left
[09:05] *** zakharyas left
[09:05] *** zakharyas joined
[09:09] *** canopus left
[09:10] *** zakharyas left
[09:11] *** pmurias joined
[09:17] *** canopus joined
[09:20] *** domidumont joined
[09:32] *** TEttinger left
[09:34] *** rindolf left
[09:44] *** rindolf joined
[09:55] *** MorayJ joined
[10:00] *** kaare_ joined
[10:09] *** cpage joined
[10:09] *** cpage_ left
[10:09] *** rindolf left
[10:12] *** cpage__ left
[10:12] *** cpage_ joined
[10:15] *** labster left
[10:18] *** pierre_ left
[10:20] *** pierre_ joined
[10:26] *** dakkar left
[10:29] *** rindolf joined
[10:32] *** pierre_ left
[10:33] *** dakkar joined
[10:35] *** itaipu joined
[10:40] *** vytas left
[10:50] *** Matthew[m] left
[10:50] *** M-Illandan left
[10:50] *** ilmari[m] left
[10:50] *** scott left
[10:50] *** tadzik left
[10:50] *** Matias[m] left
[10:54] *** vytas joined
[11:05] *** ilmari[m] joined
[11:06] *** ocbtec joined
[11:08] *** rindolf left
[11:09] *** M-Illandan joined
[11:09] *** Guest23934 joined
[11:09] *** Matthew[m] joined
[11:09] *** tadzik joined
[11:10] *** Matias[m] joined
[11:11] *** pierre_ joined
[11:15] *** kent\n left
[11:16] *** kent\n joined
[11:26] *** perlawhirl joined
[11:27] *** pierre_ left
[11:30] *** geekosaur left
[11:30] *** geekosaur joined
[11:35] *** tadzik left
[11:35] *** woolfy left
[11:40] *** itaipu left
[11:41] *** tadzik joined
[11:45] *** woolfy joined
[11:53] *** user9 joined
[12:15] * [Coke] ponders coffee

[12:15] *** AlexDaniel joined
[12:16] <lizmat> .oO( Folgers - the best pondered coffee )

[12:21] *** Actualeyes joined
[12:31] *** Actualeyes left
[12:31] <dalek> ecosystem: dd10c43 | (Brian Duggan)++ | META.list:

[12:31] <dalek> ecosystem: Add Digest::SHA1::Native to ecosystem

[12:31] <dalek> ecosystem: 

[12:31] <dalek> ecosystem: See https://github.com/bduggan/p6-digest-sha1-native

[12:31] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/dd10c43708

[12:31] <dalek> ecosystem: 3d3d3fb | niner++ | META.list:

[12:31] <dalek> ecosystem: Merge pull request #258 from bduggan/p6-digest-sha1-native

[12:31] <dalek> ecosystem: 

[12:31] <dalek> ecosystem: Add Digest::SHA1::Native to ecosystem

[12:31] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/3d3d3fbf74

[12:36] *** itaipu joined
[12:47] *** itaipu left
[12:50] <dalek> doc: f642a18 | coke++ | doc/Language/mop.pod6:

[12:50] <dalek> doc: use English;

[12:50] <dalek> doc: review: https://github.com/perl6/doc/commit/f642a1846f

[12:51] *** wamba left
[12:57] *** zakharyas joined
[13:11] *** mcmillhj joined
[13:16] *** jameslenz left
[13:28] *** rgrinberg joined
[13:36] *** perlawhirl left
[13:36] *** mcmillhj left
[13:37] *** zakharyas left
[13:39] *** rindolf joined
[13:41] *** wamba joined
[13:42] *** mcmillhj joined
[13:47] *** mcmillhj left
[13:51] *** hackedNODE left
[13:53] *** p3rln00b_ joined
[13:54] *** mcmillhj joined
[13:55] *** p3rln00b_ is now known as p3rln00b

[13:56] *** pyrimidi_ left
[13:56] *** pyrimidine joined
[13:59] *** mcmillhj left
[14:01] *** pdcawley joined
[14:01] *** mcmillhj joined
[14:02] <dalek> doc: c483276 | (Zoffix Znet)++ | doc/Type/Int.pod6:

[14:02] <dalek> doc: Improve expmod doc

[14:02] <dalek> doc: 

[14:02] <dalek> doc: - Clarify what it does for non-mathy types

[14:02] <dalek> doc: - Document candidate that can take non-Int types

[14:02] <dalek> doc: review: https://github.com/perl6/doc/commit/c48327665a

[14:12] *** khw joined
[14:15] *** pdcawley left
[14:15] *** yqt joined
[14:16] *** gregf_ joined
[14:19] *** pdcawley joined
[14:22] *** xinming joined
[14:25] *** g4 left
[14:28] *** buggable left
[14:28] <jkramer> I made a wonderful oneliner \o/ say [Z+] @*ARGS>>.&{[.lines.elems, .words.elems, .chars] with .IO.slurp}

[14:28] <jkramer> Just wanted to share because I'm happy :)

[14:29] *** wamba left
[14:29] <p3rln00b> Anyone with OSX looking for a challenge? Rakudo's t/04-nativecall/13-union.t keeps flopping. Looking for someone to fix the issue or run diagnostics and provide more details on what actually fails. This fails only on OSX. You can build rakudo and see verbose outputput of test with cd $(mktemp -d); git clone https://github.com/rakudo/rakudo/ .; perl Configure.pl --gen-moar --gen-nqp --backends=moar; make; prove

[14:30] <p3rln00b> -e './perl6' -vlr t/04-nativecall/13-union.t

[14:31] <ugexe> what makes you think its only OSX?

[14:31] <p3rln00b> ugexe: travis build results over weeks

[14:31] <p3rln00b> And I ran it in a loop on Linux for ages without failkures

[14:31] * grondilu is not sure what C<with> is

[14:32] <p3rln00b> grondilu: same as if except checks for definedness not truthiness

[14:32] <ugexe> pretty sure thats been flopping on linux at least a week ago

[14:32] <grondilu> ok, TIL

[14:33] <p3rln00b> If it does, the flop rates are much smaller than OSX. 

[14:33] *** lucasb_ joined
[14:34] <jkramer> p3rln00b: What? o_O

[14:34] <p3rln00b> p3rln00b: what?

[14:34] <p3rln00b> jkramer: what?

[14:34] <jkramer> :D

[14:34] <jkramer> I think my oneliner is wrong then :D

[14:34] <p3rln00b> Why?

[14:34] <jkramer> I thought it was a convenient thing to put something in $_

[14:34] <psch> m: .say with rand > 0.1

[14:34] <camelia> rakudo-moar a8006c: OUTPUT«True␤»

[14:35] <psch> m: .say with rand > 0.1

[14:35] <camelia> rakudo-moar a8006c: OUTPUT«True␤»

[14:35] <psch> m: .say with rand > 0.9

[14:35] <camelia> rakudo-moar a8006c: OUTPUT«False␤»

[14:35] <psch> m: .say if rand > 0.9

[14:35] <camelia> rakudo-moar a8006c: ( no output )

[14:35] <psch> well, it also kinda is that

[14:35] <jkramer> I think what wanted to use is 'given'

[14:35] <ugexe> p3rln00b: i might be misremembering. but also until recently some native call tests could fail but still show a pass

[14:35] <psch> but for truthy values if is probably more convenient 'cause shorter

[14:36] <psch> jkramer: yeah, given always sets $_ without any checks

[14:36] <jkramer> Good that grondilu asked :)

[14:36] <p3rln00b> jkramer: can write [Z+] @*ARGS».IO».slurp».&{[.lines.elems, .words.elems, .chars]}

[14:36] <jkramer> Ha, even better

[14:37] *** skids joined
[14:37] <p3rln00b> ugexe: pass as in make test or pass as in travis pass? Because until recently, some tests were failing but travis wasn't catching them due to broken harness

[14:38] <ugexe> p3rln00b: both - for the same reason you bring up

[14:43] <p3rln00b> jkramer: can write say (+.lines, +.words, .chars) given @*ARGS».IO».slurp.join

[14:45] <jkramer> What does the +. syntax do?

[14:46] <p3rln00b> jkramer: in this context, shorter way to write .elems

[14:46] <psch> jkramer: it's actually e.g. +$_.lines

[14:46] <p3rln00b> jkramer: it's not +. syntax, it's prefix + before .lines (which is $_.lines)

[14:46] <p3rln00b> jkramer: in Perl 5 idiom, it's 0+@array

[14:48] <jkramer> Ah of course, I was confused for a second :)

[14:51] <ugexe> ([+] .lines, .words, .chars) works along those same lines

[14:52] <ugexe> er n/m i misunderstood :o

[14:53] *** zostay left
[14:54] *** ggherdov left
[14:55] *** DrParis left
[14:55] *** mrsolo left
[14:55] *** jnap_ left
[14:55] *** PotatoGim left
[14:57] *** neuraload left
[15:04] *** Fabled joined
[15:05] *** Fabled is now known as Guest75268

[15:05] *** gregf_ left
[15:06] *** domidumont left
[15:09] *** Guest75268 left
[15:11] *** isacloud joined
[15:13] *** orangeblock joined
[15:14] *** DrParis joined
[15:14] *** telex left
[15:16] *** telex joined
[15:17] *** mrsolo joined
[15:18] <orangeblock> I'm trying to understand how IO::Socket::Async.Supply works. Perl 6 documentation says it emits characters but whenever I use .say in the whenever block it prints entire blocks of text.

[15:19] <orangeblock> Can anyone help me understand why that happens?

[15:19] <jnthn> It means characters (e.g. graphemes) as opposed to bytes (which you'd get with :bin)

[15:20] *** chansen_ joined
[15:20] <orangeblock> so what if the text is ascii characters?

[15:20] <moritz> what about it?

[15:21] <orangeblock> for me it prints entire block of text not each character separately

[15:21] <geekosaur> meanwhile, how much data you get at a time will depend on lots of things

[15:21] <moritz> orangeblock: you get characters, just not individually

[15:21] <timotimo> right, it triggers whenever you have data available and gives you as much as it can

[15:21] <geekosaur> very few of them under perl's control

[15:21] <moritz> orangeblock: if you want that, you can use .comb on the strings

[15:21] <jnthn> Yes, it's not meant to give individual characters. If the documentation is unclear about that we should tweak it.

[15:21] <jnthn> It just means that it's decoding them and giving you a Str

[15:22] <geekosaur> if you are testing with a loopback socket, you will get very close to as much data received in a single read as was sent in a single write. this will differ over high latency network connections

[15:22] *** jnap_ joined
[15:22] <timotimo> do we have something on supply that'll emit individual characters each time something comes around? like mapping comb over it?

[15:22] <orangeblock> oh that helps

[15:23] <moritz> timotimo: you can all $other-supply.emit($_) for $str.comb;

[15:23] <orangeblock> so emit is not reliable in the sense it returns a character or a pre-defined number of chacaters but as much as it can read at any given time?

[15:23] <timotimo> moritz: that's true.

[15:23] <p3rln00b> Supply.map: *.comb would work I'd imagine

[15:24] <moritz> orangeblock: as much as has arrived in one network package, usually

[15:24] <jnthn> m: my $s = Supply.from-list("abc", "defg"); $s.flatmap(*.comb).tap(*.say)

[15:24] <camelia> rakudo-moar a8006c: OUTPUT«a␤b␤c␤d␤e␤f␤g␤»

[15:24] <geekosaur> and making it always break it up into independent character-entities would mean you won't be doing high throughput in p6 no matter what

[15:24] <timotimo> good good

[15:24] <geekosaur> you *want* it to deliver as much data as possible on each access

[15:24] <timotimo> i expect mapping *.comb would give you lists of chars instead of individual chars

[15:24] <orangeblock> thanks a lot guys!

[15:24] <jnthn> Just flatmap it with comb to get a stream of actual individual chars :)

[15:24] <timotimo> right, i saw. jnthn++

[15:24] <orangeblock> I actually don't want the chars I want to parse irc messages

[15:25] <orangeblock> I guess I'll have to parse using a grammar

[15:25] <jnthn> Ah, OK

[15:25] <jnthn> If IRC is line-oriented then .lines also works

[15:25] <orangeblock> oh yeah that caught my eye too

[15:25] <orangeblock> is it parsing until line break?

[15:26] <jnthn> m: my $s = Supply.from-list("ab\nc", "de\nfg\n"); $s.lines.tap(*.say)

[15:26] <camelia> rakudo-moar a8006c: OUTPUT«ab␤cde␤fg␤»

[15:26] <jnthn> It also handles lines that end up split over incoming packets

[15:26] <orangeblock> awesome

[15:26] <jnthn> whenever $socket.Supply.lines -> $line { ... } or so

[15:26] <p3rln00b> orangeblock: there's already grammar in IRC::Client, if you wanna steal it

[15:27] <orangeblock> haha thanks I'll have a look

[15:27] <p3rln00b> You have to keep a piece of last line around if it doesn't end with a new line and combine it with the next input you receive

[15:27] * jnthn away for a bit

[15:28] <timotimo> p3rln00b: didn't jnthn just show that .lines on the supply does that for you?

[15:28] *** pnu_ joined
[15:28] <p3rln00b> m: my $s = Supply.from-list("ab\nc", "de\nfg"); $s.lines.tap(*.say)

[15:28] <camelia> rakudo-moar a8006c: OUTPUT«ab␤cde␤fg␤»

[15:28] <p3rln00b> nope.

[15:29] <psch> "ab\nc"

[15:29] <psch> and "de\nfg"

[15:29] <psch> i mean, it really looks like it works from here

[15:29] <timotimo> looks like that to me, too

[15:30] <p3rln00b> Ah, ok

[15:30] <orangeblock> p3rln00b's code works fine for me

[15:31] <p3rln00b> Well, that's why I'm a n00b :D

[15:31] <timotimo> we're here to help :)

[15:32] <p3rln00b> Ah. You have to read it in binary, or you'd get encoding weirdness. 

[15:32] <p3rln00b> And then try to decode in several formats: https://github.com/zoffixznet/perl6-IRC-Client/blob/master/lib/IRC/Client.pm6#L199

[15:34] <timotimo> that'll be better as soon as we have the properer encoding stuff in place

[15:35] <timotimo> if the code could pretend the encoding is latin1, it could use the proper .split and ignore all the left-overs stuff

[15:35] <timotimo> then it'd encode it back to latin1 and decode the result as utf8 to get the "real" string data

[15:35] *** mindos joined
[15:35] *** PotatoGim joined
[15:37] *** mcmillhj left
[15:39] *** zostay joined
[15:39] *** peteretep joined
[15:40] *** ggherdov joined
[15:40] *** FROGGS joined
[15:40] <FROGGS> o/

[15:40] *** zemmihates joined
[15:42] <TimToady> \o

[15:47] *** mcmillhj joined
[15:50] *** domidumont joined
[15:51] *** seatek joined
[15:52] *** mcmillhj left
[15:53] *** woolfy left
[15:53] *** woolfy joined
[15:54] *** orangeblock left
[15:56] *** orangeblock joined
[15:59] *** Actualeyes joined
[16:03] *** mcmillhj joined
[16:10] <p3rln00b> Catch 22 of 21st century: trying to renew a domain expiring today to fix a glitch with your paypal account, but failing to pay for it due to the glitch in that paypal account >_<

[16:15] <mspo> paypal is a common thread there

[16:16] *** mcmillhj left
[16:16] <ilmari> doesn't the registrar accept credit cards directly?

[16:16] <p3rln00b> I think I found a major bug with it: if you change your primary email, all your linked cards and balances disappear... because they seem to be linked to that original primary email AND you can't add those cards again, because the site thinks they're already linked.

[16:17] *** dakkar left
[16:17] <p3rln00b> ilmari: it does, but they emailed me my account password in plain text, so I'm a bit wary of entering my credit card info on their site.

[16:17] <ilmari> fair point

[16:18] <p3rln00b> (I mean, their password reminder sent me my old password, so they store it directly and not the hash)

[16:18] *** pdcawley left
[16:19] *** dwarring left
[16:19] <ilmari> report them to http://plaintextoffenders.com/

[16:19] *** pdcawley joined
[16:19] *** yqt left
[16:20] *** ptolemarch joined
[16:22] *** ptolemarch left
[16:24] *** pdcawley left
[16:24] *** mcmillhj joined
[16:26] <p3rln00b> Heh. it's already there: http://plaintextoffenders.com/post/81473833758/active-domaincom-domain-registrar-i-received

[16:28] <p3rln00b> Oh... I "fixed" my paypal glitch :) Turns out I have two accounts and I forgot which email I used to swap the primary address on the first account

[16:28] <p3rln00b> #FirstWorldProblems

[16:28] *** abraxxa left
[16:29] *** mcmillhj left
[16:33] *** dakkar joined
[16:36] *** mcmillhj joined
[16:37] <timotimo> hah

[16:38] *** cooper left
[16:40] *** cooper joined
[16:41] *** mcmillhj left
[16:44] *** girafe joined
[16:47] <lucasb_> there's a link in the latest weekly post, the hacktoberfest perl6 related issues, but it is a github 404 page

[16:47] <timotimo> damn, why?

[16:48] *** robertle joined
[16:48] <lucasb_> idk, the link starts with 'github.com/issues'. I don't think is a valid address

[16:49] <p3rln00b> Works fine for me

[16:49] <lucasb_> O.o strange... must be something on my end here then

[16:49] <p3rln00b> lucasb_: how this: https://github.com/issues?q=is%3Aopen+is%3Aissue+user%3Aperl6+label%3AHacktoberfest

[16:50] <p3rln00b> I see there's a UTF-8 check in the original link... maybe that's an issue

[16:50] *** dakkar left
[16:50] <lucasb_> ohh, I wasn't logged in on github

[16:50] <p3rln00b> oh 

[16:50] <lucasb_> when I logged in, it works fine! thanks

[16:50] <p3rln00b> Sucks that it's a 404 and not an invite to log in

[16:51] <timotimo> right

[16:51] <timotimo> should i put a little note on that link in the blog post?

[16:52] <p3rln00b> Yeah

[16:52] <timotimo> crap

[16:53] <timotimo> i clicked edit and it told me there's a more recent draft available

[16:53] <timotimo> now i have no idea what'll change when i hit "save"

[16:53] <p3rln00b> Don't hit save? :D

[16:54] <timotimo> >:(

[16:54] *** mcmillhj joined
[16:54] <mst> timotimo: Ctrl-A, Ctrl-C

[16:54] <timotimo> there's no side-by-side or even diff comparison thing

[16:54] <timotimo> wordpress, wtf?

[16:55] <timotimo> why art thou so SHIT?

[16:56] <lucasb_> maybe it's possible to find a search URL that also work for people who are not logged on github

[16:56] <timotimo> .o( scrithub )

[16:57] <lucasb_> https://github.com/search?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+user%3Aperl6+label%3AHacktoberfest

[16:57] *** xenowoolfy joined
[16:58] <lucasb_> damn url percent encoding

[16:58] *** xenowoolfy left
[16:59] *** mcmillhj left
[17:02] *** dogbert17 joined
[17:03] *** ptolemarch joined
[17:05] *** woolfy left
[17:06] *** woolfy joined
[17:06] *** mcmillhj joined
[17:10] *** MorayJ left
[17:20] *** pdcawley joined
[17:23] *** wamba joined
[17:24] *** p3rln00b left
[17:24] *** cdg joined
[17:25] *** pdcawley left
[17:29] *** p3rln00b joined
[17:30] *** p3rln00b left
[17:40] *** _slade_ joined
[17:40] *** zemmihates left
[17:45] *** p3rln00b joined
[18:00] *** orangeblock left
[18:01] *** mcmillhj left
[18:02] *** setty2 left
[18:02] *** mcmillhj joined
[18:03] *** setty1 joined
[18:04] *** jonas1 left
[18:07] *** kce joined
[18:08] <kce> hi

[18:08] *** kce left
[18:09] *** cdg left
[18:12] <moritz> ho

[18:20] <lucasb_> ha

[18:20] <timotimo> hu

[18:20] <psch> you're all silly

[18:21] *** pdcawley joined
[18:21] <El_Che> huh?

[18:21] <geekosaur> hee

[18:21] <psch> well, maybe not all, just the ones h<:Vowel>-ing

[18:22] <psch> ...though i'm sure that's not a unicode character class

[18:22] *** itaipu joined
[18:24] <psch> .u vowel

[18:24] <yoleaux> U+065A ARABIC VOWEL SIGN SMALL V ABOVE [Mn] (◌ٚ)

[18:24] <yoleaux> U+065B ARABIC VOWEL SIGN INVERTED SMALL V ABOVE [Mn] (◌ٛ)

[18:24] <yoleaux> U+065C ARABIC VOWEL SIGN DOT BELOW [Mn] (◌ٜ)

[18:24] <psch> m: say "◌ٜ" ~~ /<:Vowel>/

[18:24] <camelia> rakudo-moar a8006c: OUTPUT«Nil␤»

[18:24] <psch> m: say "a" ~~ /<:Vowel>/

[18:24] <camelia> rakudo-moar a8006c: OUTPUT«Nil␤»

[18:25] <geekosaur> I don't think it tries to deal with "vowel"

[18:26] <geekosaur> is "w" a vowel? what if my locale is Welse?

[18:26] <geekosaur> *Welsh

[18:26] <psch> geekosaur: right, that's what i'm saying.  vowel is probably not something that unicode can decide on a per-character basis

[18:27] <psch> i mean, even sticking with ascii, what's about 'y'?

[18:28] <p3rln00b> у is most certainly a vowel :)

[18:28] <psch> whoops, i mean ascii and english

[18:28] <psch> p3rln00b: in 'yeast' too?

[18:28] <geekosaur> except when it's a consonant

[18:28] <psch> or, well, 'yes'

[18:28] <p3rln00b> .u у

[18:28] <yoleaux> U+0443 CYRILLIC SMALL LETTER U [Ll] (у)

[18:29] <psch> ...right, the snark again :S p3rln00b++

[18:29] <geekosaur> heck, "r" can take on vowel properties in English

[18:30] <psch> although i honestly don't know enough cyrillic to say if that's always a vowel, functionally vOv

[18:30] <geekosaur> "cyrillic" is just a writing system. different languages do different things with its letters

[18:31] <psch> right.  cyrillic-using languages then :)

[18:31] <geekosaur> so "always a vowel" may be true in one language but not another even though they both write it as у

[18:31] <geekosaur> or it's a sometimes-vowel in yet another...

[18:31] <geekosaur> languages are an utter mess >.>

[18:32] <psch> i like to reduce that to "words are hard" :)

[18:32] <arnsholt> Note also that r, l, m, and n are perfectly fine vowels as well

[18:32] <huf_> this has very little to do with languages tho :)

[18:32] <huf_> it's just writing

[18:32] <arnsholt> Not to mention Berber languages (IIRC) which have sensible vowels like k, and b =D

[18:33] * geekosaur already mentioned r, and even that it sometimes happens in US English

[18:33] <arnsholt> Yeah, it's pretty common

[18:33] <arnsholt> (And I see now that you mentioned it. I'm bad at scrollbacking. Sorry. =)

[18:33] * El_Che is impressed on how most discussions here turn into utf-8

[18:33] <huf_> https://en.wikipedia.org/wiki/Krk

[18:34] <huf_> obligatory :)

[18:34] <arnsholt> Oh, and Welsh! They use w as a vowel

[18:34] <geekosaur> hit that oen too (first example in fact :)

[18:34] <arnsholt> Bah! Beaten again!

[18:35] <huf_> it's worse than that, because sometimes languages use vowels for consonants

[18:36] <huf_> such as o in "one" :D

[18:36] <arnsholt> Yeah

[18:36] <arnsholt> English is a particularly rich source of perverse orthography, too =)

[18:36] <huf_> it's easy to find sillyness if you conflate as much as you can :)

[18:37] <moritz> or inflate :-)

[18:37] <huf_> nah, spheres arent particularly silly

[18:38] <timotimo> þou are kidding me!

[18:38] <huf_> hmm, perhaps they're sillier than cubes.

[18:38] <huf_> given balloons and clown noses 

[18:38] <timotimo> m: say "lol" with my $clown-nose

[18:38] <camelia> rakudo-moar a8006c: ( no output )

[18:41] <timotimo> maybe it should have been "honk" instead of "lol"

[18:43] <DrForr> Oh noes, not clowns.

[18:51] <AlexDaniel> m: slurp with my $clown-nose

[18:51] <camelia> rakudo-moar a8006c: ( no output )

[18:51] <AlexDaniel> no output… well, makes sense

[18:54] *** pdcawley left
[18:54] *** eliasr left
[18:57] *** sufrostico left
[19:01] <dogbert17> AlexDaniel: https://github.com/perl6/doc/issues/921

[19:03] <AlexDaniel> dogbert17: ah, okay, let's see

[19:03] *** mcmillhj left
[19:03] <AlexDaniel> dogbert17: https://docs.perl6.org/type/Version

[19:03] <AlexDaniel> dogbert17: ctrl+f Increase

[19:05] <AlexDaniel> dogbert17: if that one is fixed, then I think it is all

[19:05] *** mcmillhj joined
[19:07] <dogbert17> AlexDaniel: it will be fixed

[19:11] <mspo> https://www.google.com/get/noto/

[19:11] *** domidumont left
[19:15] <TimToady> In English, s can function as a vowel in the word "psst".  :)

[19:16] *** itaipu left
[19:16] *** yqt joined
[19:18] <AlexDaniel> 472.6 MB huh

[19:20] <mspo> AlexDaniel: apparently it's very complete

[19:20] <perlpilot> I'm sure Damian or someone will whip-up a module for determining if a character functions as a vowel or not  ;)

[19:20] *** yqt left
[19:21] *** sjoshi joined
[19:21] <AlexDaniel> mspo: more complete than unifont? :)

[19:22] <mspo> AlexDaniel: google fonts also tend ot come in many formats <shrug>

[19:22] <mspo> how big is unifont?

[19:23] <AlexDaniel> ttf version is 12 Mb

[19:23] <dalek> doc: 9568337 | (Jan-Olof Hendig)++ | doc/Type/Version.pod6:

[19:23] <dalek> doc: Fixed incorrect result being shown in code example. Should fix #921

[19:23] <dalek> doc: review: https://github.com/perl6/doc/commit/95683372e3

[19:25] <RabidGravy> boom!

[19:26] <RabidGravy> finally got around to releasing Term::ReadKey - *twice* :(

[19:27] <p3rln00b> \o/

[19:28] *** Actualeyes left
[19:33] *** ptolemarch left
[19:45] <[Coke]> anyone mind if I change 'make xtest' in perl6/doc to require TEST_JOBS ?

[19:49] *** wamba left
[19:49] *** pdcawley joined
[19:53] *** labster joined
[19:54] *** wamba joined
[19:55] <[Coke]> ... I think I made it optional, but probably broke it for windows.

[19:56] <dalek> doc: 0889b0b | coke++ | Makefile:

[19:56] <dalek> doc: use TEST_JOBS on xtest if present

[19:56] <dalek> doc: review: https://github.com/perl6/doc/commit/0889b0b918

[19:56] *** TEttinger joined
[19:57] <gfldex> [Coke]: may be worth to leave a note in CONTRIBUTING.md

[19:59] *** notostraca joined
[20:01] *** TEttinger left
[20:01] *** notostraca is now known as TEttinger

[20:07] *** ocbtec left
[20:08] <AlexDaniel> does anybody have a grammar example for parsing math expressions with infix notation?

[20:11] *** labster left
[20:13] *** labster joined
[20:15] <FROGGS> in v5 is the port of EXPR, which does this kind of stuff for nqp and rakudo

[20:15] <FROGGS> AlexDaniel: ^^

[20:15] <p3rln00b> m: grammar { token TOP { <EXPR> }}.parse('2+2').made.say

[20:15] <camelia> rakudo-moar 605f27: OUTPUT«No such method 'EXPR' for invocant of type '<anon|57687072>'␤  in regex TOP at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:15] <p3rln00b> aww

[20:16] <AlexDaniel> FROGGS: um, what does it mean?

[20:16] <DrForr> It's the core expression rule for Perl6, and the bane of my existence for about a month now :)

[20:16] <FROGGS> it means that v5 is written in Perl 6 (not NQP) and knows about parsing complex statements with precedence etc

[20:17] <DrForr> Oh, in Perl6? Sig.

[20:17] <DrForr> *sigh

[20:17] <FROGGS> aye

[20:17] *** sjoshi left
[20:17] <FROGGS> not that it compiles today, but yeah

[20:17] <FROGGS> it did once

[20:17] *** yqt joined
[20:19] <DrForr> Tomorrow night I'm probably going to do the expression grammar for TT5, if you want to keep an eye on github.com/drforr/perl6-Template-Toolkit.git.

[20:20] <DrForr> It's about half an hour's work, you just have to keep in mind precedence and parentheses.

[20:21] <FROGGS> wow, that's a huge alternation :o)

[20:22] *** zacts left
[20:23] <DrForr> I just don't want to have to deal with regressions. When I'm done in a week or so it'll be back to maybe 3 pages worth of code.

[20:24] <DrForr> Look at the test suite to see what I mean.

[20:28] <DrForr> I.E. yes, I know it's a stupid way to go about it, but I don't have to backtrack as often.

[20:28] <FROGGS> true

[20:32] *** sjoshi joined
[20:33] *** kaare_ left
[20:40] *** pdcawley left
[20:40] *** wamba left
[20:43] *** itaipu joined
[20:43] *** FROGGS left
[20:46] *** jervo joined
[20:48] *** cyphase joined
[20:52] *** TEttinger left
[20:56] *** labster left
[20:57] *** itaipu left
[21:08] *** nyarmith joined
[21:08] *** DarthGandalf left
[21:08] *** DarthGandalf joined
[21:09] *** mcmillhj left
[21:11] *** canopus left
[21:15] *** bjz left
[21:17] *** TEttinger joined
[21:19] *** canopus joined
[21:25] *** itaipu joined
[21:26] <dalek> ecosystem: 119404a | (Tom Browder)++ | META.list:

[21:26] <dalek> ecosystem: Add new module Net::IP::Lite to ecosystem

[21:26] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/119404a19e

[21:27] *** pyrimidine left
[21:28] <dalek> ecosystem: 852bb04 | (Tom Browder)++ | META.list:

[21:28] <dalek> ecosystem: correct url

[21:28] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/852bb04590

[21:35] *** mcmillhj joined
[21:38] *** cpage_ left
[21:40] *** mcmillhj left
[21:41] *** rindolf left
[21:42] *** pdcawley joined
[21:43] *** nyarmith left
[21:43] *** sjoshi left
[21:44] *** luis` is now known as luis

[21:47] *** bjz joined
[21:51] *** pmurias left
[21:52] *** nyarmith joined
[21:54] *** _slade_ left
[22:00] *** pdcawley left
[22:03] *** bjz left
[22:04] *** cpage_ joined
[22:05] *** nyarmith left
[22:08] *** lostinfog joined
[22:13] *** _slade_ joined
[22:15] *** robertle left
[22:27] *** labster joined
[22:34] *** nyarmith joined
[22:38] *** lucasb_ left
[22:39] *** bisectable6 joined
[22:40] *** firefish5000 joined
[22:46] *** lostinfog left
[22:54] <seatek> <3 <3 $*HOME - I know those are sugary, but they're sure nice to have

[22:55] <gfldex> seatek: I can give you some ♥s if you run low

[22:56] <seatek> gfldex, my irc client won't let me enter unicode (nor will gedit, but emacs will thankfully).  but sure... I'd love some :)

[22:57] <gfldex> ♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥♥ there you go :)

[22:57] <seatek> i'll get fat!

[22:58] <seatek> oo that reminds me... butterscoth oatmeal cookies upstairs... ;)

[23:00] <seatek> something isn't right... i'm enjoying writing tests

[23:00] *** pdcawley joined
[23:00] *** RabidGravy left
[23:00] <gfldex> you may be writing them in Perl 6. That can explain any amount of joy.

[23:01] <seatek> yes, it's very confusing ;)

[23:03] <gfldex> i read this blogpost and wrote my own version of his program (a wee bit shorter) simply for the joy of writing in Perl 6 https://fredrb.github.io/2016/10/01/Understanding-proc/

[23:03] <gfldex> https://gist.github.com/gfldex/2b43a001e6d5e6c0f03c0c3c3a837385

[23:07] *** girafe left
[23:12] *** flexibeast left
[23:16] *** baest left
[23:16] *** M-Illandan left
[23:17] <seatek> gfldex, very nice :) that's got a few interesting things that I still need to explore

[23:20] *** yqt left
[23:20] *** baest joined
[23:21] <seatek> i just love that lazy gathering stuff.

[23:21] <seatek> had no idea you could send constant stuff to functions like that -- a bizarre and useful thing if not somewhat perverse

[23:24] <gfldex> constant is simply executed at compile time and very picky. You can't do anything that is not constant to begin with. No closures and such.

[23:26] <seatek> it's a very clever twist being able to do that

[23:26] *** pdcawley left
[23:29] *** pierre_ joined
[23:29] <seatek> internally, is that just a pointer to a "function chain" of some sort it just keeps sending the constant through, when it's required to be used?

[23:30] <gfldex> the expression returns a constant Str. That Str is bound to format

[23:31] <gfldex> the constant declarator implies \-sigil and \-sigil implies binding

[23:32] *** labster left
[23:32] *** perlawhirl joined
[23:33] <seatek> isn't the >> to the trim part of that binding somehow?

[23:33] <gfldex> that's executed at compile time

[23:33] <gfldex> the format string needs to lose the spaces

[23:33] *** pierre_ left
[23:34] <seatek> but every time that constant is used, it has to run it through trim... so it's more than a constant... kinda ... i woudl think

[23:34] <gfldex> it does not do that

[23:34] <gfldex> the expression is evaluated at compile time

[23:34] <gfldex> if you got precompiled modules, they will store the resulting format string

[23:35] <gfldex> mainline programs don't got precomp yet (but it can be emulated)

[23:36] <seatek> that expression evaluation capability, associated with a constant, seems unusual

[23:36] <gfldex> you can think of the constant declarator as a constant folding forcer

[23:36] <gfldex> it's very perlish actually. A BEGIN phaser in disguise (plus the addition of implicit binding)

[23:37] <seatek> i think it could cause riots even. ;)

[23:38] <seatek> it makes great sense though

[23:39] <gfldex> also, it allowes the compiler to check if you do something silly, like accessing values that are not accessible at compile time, and tell you with a nice friendls SORRY

[23:39] <gfldex> i don't think a BEGIN phaser would do that

[23:39] <seatek> it is very clever and convenient. i wouldn't have imagined this, unless i was not jaded by what constants are supposed to be already

[23:40] <seatek> it doesn't make constants any less constant

[23:40] <seatek> but it gives wonderful flexibility and capability

[23:41] <seatek> i have too much to try and start taking advantage of

[23:42] <seatek> gfldex++ that's what you're supposed to do when someone is nice and helpful, yes? :)

[23:43] *** labster joined
[23:44] <gfldex> hmm, I don't think I actually need that ».trim

[23:44] <seatek> i wondered why you added it back

[23:46] <seatek> even the way you can just spread out key names like that in a hash... well, it just makes me happy. ;)

[23:47] <gfldex> the specs wanted compile time keys for Hash but that didn't make it into the language

[23:47] <gfldex> m: my %h{<foo bar buzz>}; like so

[23:47] <camelia> rakudo-moar 605f27: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Invalid hash shape; type expected␤at <tmp>:1␤------> 3my %h{<foo bar buzz>}7⏏5; like so␤    expecting any of:␤        constraint␤»

[23:47] <seatek> i think we'll survive

[23:48] <gfldex> would be much faster then to check against a set of keys every time you ask for one

[23:48] <seatek> and you would assign to it with a list?

[23:48] <gfldex> yes

[23:49] <seatek> actually.... i think we won't survive... ;)

[23:49] <gfldex> the boundary between compile time and run time is a bit blurry

[23:49] <gfldex> i like to think that the VM can stop execution of a program at some point, ask the OS for command line options and then feed them to MAIN

[23:50] <gfldex> that way I can have a mental picture that includes all those odd phasers

[23:50] <seatek> well, it must wait for that, yes?

[23:51] <seatek> i don't know anything about phasers yet either

[23:51] <gfldex> https://docs.perl6.org/language/phasers#BEGIN

[23:51] <gfldex> :)

[23:51] <seatek> i'm going to starve to death soon

[23:53] *** nadim_ left
[23:56] <seatek> oh it's just the normal stages stuff

[23:57] <seatek> oh my goodness. on steriods a bit

[23:57] <gfldex> COMPOSE is funky :)

[23:58] <seatek> so does FIRST have the same issues as once?

[23:59] <seatek> LAST would too then

[23:59] <seatek> wait - threads make all of that crazy

