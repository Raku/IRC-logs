[00:00] <ShimmerFairy> psch: incidentally I've looked at EXPR just now (needing to port it to P6 since I can't sanely use HLL::Grammar from there) and I don't think that's the point exactly, more like <termish> would be my guess.

[00:01] *** kurahaupo_ joined
[00:02] <psch> ShimmerFairy: be my guest :)

[00:02] <psch> ...is that the right way to use that idiom?

[00:03] <ShimmerFairy> psch: well, it's got me interested :)   (and yes, if you meant "please, help yourself to fixing this")

[00:03] <psch> ShimmerFairy: yeah, i did.  i'll be glad to add a "ShimmerFairy fixed this in PR #..." to the ticket

[00:04] *** kurahaupo left
[00:05] <ShimmerFairy> Hm. My guess is that ! metaop should only work on operators that are iffy, that would hopefully solve the issue.

[00:07] <timotimo> well, it'd be a good start to only have it work on binary operators

[00:07] <timotimo> i.e. not prefix ops :)

[00:07] <ShimmerFairy> m: say 1 ==1

[00:07] <camelia> rakudo-moar ff8362: OUTPUT«True␤»

[00:08] <psch> m: say 1 Z=1

[00:08] <camelia> rakudo-moar ff8362: OUTPUT«Cannot modify an immutable Int␤  in block <unit> at <tmp> line 1␤␤»

[00:08] <ShimmerFairy> m: say 1 Z= 1

[00:08] <camelia> rakudo-moar ff8362: OUTPUT«Cannot modify an immutable Int␤  in block <unit> at <tmp> line 1␤␤»

[00:08] <psch> yeah, meaningless example :|

[00:08] <psch> i'm pretty good at those :P

[00:08] *** Timbus joined
[00:08] <ugexe> m: say 0.999 == 1

[00:08] <camelia> rakudo-moar ff8362: OUTPUT«False␤»

[00:11] <ShimmerFairy> psch: the trick is figuring out why the lack of space suddenly makes it accept the infix_prefix_meta_operator

[00:11] <psch> ShimmerFairy: probably, yeah.  and i'm pretty sure that's in EXPR

[00:12] <psch> ShimmerFairy: mind, i wouldn't mind to be proven wrong, i just don't think i could convidently say it's *not* in EXP

[00:13] <Xliff> Hey #perl6!

[00:13] <Xliff> Could extensive use of this trait mod slow down rakudo parsing?

[00:13] <Xliff> multi trait_mod:<is>(Routine $r, :$aka!) is export { $r.package.^add_method($aka, $r) };

[00:13] <ShimmerFairy> psch: I think it's possible, even though my read through EXPR didn't show where that'd be likely. It's worth pointing out that EXPR mangles its cursor in such a way that you wouldn't info on the subrules it matched.

[00:13] <ShimmerFairy> *wouldn't get info

[00:15] <ShimmerFairy> This is weird. The negation metaop sets $*IN_META to 'neg', but nothing in Grammar.nqp checks for that value.

[00:21] *** kurahaupo joined
[00:22] <ShimmerFairy> psch: the weird part is where the ! metaop specifically allows for    || <?{ $<infixish>.Str eq '=' }> <O('%chaining')>

[00:22] *** kurahaupo_ left
[00:24] <psch> ShimmerFairy: maybe making that | instead of || is enough..? 

[00:24] <psch> ShimmerFairy: i'm not sure what exactly LTM would do there, fwiw

[00:25] <ShimmerFairy> psch: yeah, or as I was thinking get rid of that alternative altogether. Hopefully git blame can tell me why that line exists.

[00:25] <geekosaur> Xliff, trait_mod blocks are run during compile (i.e. along with parse) so I'd imagine so

[00:25] <psch> ShimmerFairy: good luck :)

[00:26] <geekosaur> moreover it probably slows a bunch of other stuff down when it runs because now it's got to go through an anon to find methods

[00:26] <ShimmerFairy> psch: Oh, wow, it comes from all the way back in 2011. That just helps my speculation that it comes from some bad old days in handling != as an operator.

[00:29] <ShimmerFairy> btw, if anyone out there can put me back in the perl6 and rakudo organizations on github, that'd be nice :)   (since I dumbly took myself out of them a while back)

[00:31] <Xliff> geekosaur: Thanks, however I am having parse times of over 80 seconds for specific tests in p6-XML-LibXML

[00:31] <Xliff> Which, sounds excessive.

[00:39] *** ilbelkyr_ is now known as ilbelkyr

[00:55] *** kurahaupo is now known as kurahaupo_

[01:00] *** rgrinberg joined
[01:00] *** adu joined
[01:12] <freezerburnv> Anyone have any ideas for how I might represent a series of objects that were originally represented as a union type in C, with each object type accessible as a struct in the union?

[01:13] <timotimo> do we have unions in NativeCall yet?

[01:14] *** kalkin- joined
[01:14] <sortiz> Yes, we have: https://docs.perl6.org/language/nativecall#CUnions

[01:14] <freezerburnv> timotimo, Would there be a more perly way to wrap a union, even if NativeCall had support for it?

[01:15] <freezerburnv> I"m somewhat learning as I'm going right now

[01:16] <timotimo> well, attributes are just methods. you can return a Proxy.new(...) from them that modify the underlying storage when setting, and transforming the data when reading it out

[01:17] <freezerburnv> Haven't encountered Proxies yet

[01:17] *** kalkin-_ left
[01:19] <freezerburnv> Those look quite interesting actually, neat!

[01:22] *** TimToady left
[01:24] *** TimToady joined
[01:25] <ShimmerFairy> psch: removing that alternative gets me a relatively more sensible error of    Cannot negate = because item assignment operators are not iffy enough

[01:38] *** infina joined
[01:45] *** freezerburnv left
[01:48] *** freezerburnv joined
[01:52] *** molaf left
[02:03] *** starbelly__ joined
[02:04] *** starbelly__ left
[02:04] *** molaf joined
[02:07] *** noganex joined
[02:11] *** noganex_ left
[02:14] *** infina left
[02:14] *** infina joined
[02:21] *** mls left
[02:21] *** mls joined
[02:30] *** labster left
[02:37] *** BenGoldberg joined
[02:43] *** tbrowder left
[02:47] <freezerburnv> Does NativeCall support varargs?

[02:48] <freezerburnv> ANd what's the difference between declaring a NativeCall to return Int vs int32?

[02:49] <geekosaur> no varargs. I think Int uses whatever the native size of (int) is, which on linux should be 32 bits but may be different on other platforms

[02:51] <freezerburnv> Good to know, thanks!

[02:57] <freezerburnv> So when passing a repr CStruct to a native function that expects a pointer, the documentation seems to indicate I just want to mark it 'is rw' in the native function declaration?

[02:58] <freezerburnv> Rather than a Pointer[TheStruct]?

[02:58] <freezerburnv> Or is that purely for int32 and friends?

[03:14] *** kerframil left
[03:21] *** cyphase left
[03:27] <masak> TimToady: I found a Cantor quote which I thought would appeal to you: "A set is a Many that allows itself to be thought of as a One"

[03:30] <geekosaur> freezerburnv, I would expect that to only apply to "atomic" types like int32, double, etc.

[03:31] *** ShimmerFairy left
[03:33] <geekosaur> also, an implication of this is that you can't pass structs by value. (and perl6 is not the only language which has that restriction; structs as values tend to have lots of weird portability gotchas, and are largely avoided by modern interfaces but can still be found in ancient ones like {,n}dbm)

[03:35] <geekosaur> (example: for an ABI that supports passing parameters in registers, passing a struct by value often forces parameters onto the stack instead. the C compiler can detect this, NativeCall would have a much harder time and would have to know too much about the target ABI)

[03:39] *** huggable left
[03:40] *** huggable joined
[03:42] <geekosaur> well, the dyncall stuff underlying would have to know it, but same issue really; it's hard to determine that kind of stuff with dynamic / runtime calls vs. static calls where the C compiler can determine which ABI to use. same consideration applies to varargs support

[03:42] *** khw left
[03:50] *** labster joined
[03:55] *** MasterDuke joined
[04:02] *** kid51 joined
[04:08] *** kaare_ joined
[04:16] *** kid51 left
[04:16] *** freezerburnv left
[04:17] *** araujo_ joined
[04:19] *** araujo_ left
[04:20] *** araujo_ joined
[04:20] *** araujo left
[04:21] *** araujo_ left
[04:22] *** araujo_ joined
[04:24] *** araujo_ left
[04:24] *** araujo_ joined
[04:33] *** adu left
[04:41] *** TEttinger left
[04:48] *** rgrinberg left
[04:54] *** Cabanossi left
[04:56] *** cpage_ left
[04:57] *** Cabanossi joined
[04:58] *** jack_rabbit joined
[04:59] *** pierrot left
[05:00] *** TimToady_ joined
[05:01] *** pierrot joined
[05:02] *** LLfournLaptop joined
[05:03] *** dan joined
[05:04] *** sortiz left
[05:04] *** cosarara_ joined
[05:04] *** TimToady left
[05:04] *** Actualeyes left
[05:04] *** zzzzzzzzz left
[05:04] *** avalenn left
[05:04] *** cpage left
[05:04] *** mr-foobar left
[05:04] *** colomon left
[05:04] *** tomboy65 left
[05:04] *** jnap_ left
[05:04] *** samb1 left
[05:04] *** Peter_R left
[05:04] *** Xliff left
[05:04] *** BrokenRobot left
[05:04] *** Spot__ left
[05:04] *** PotatoGim left
[05:04] *** mrsolo left
[05:04] *** DANtheBEASTman left
[05:05] *** dan is now known as DANtheBEASTman

[05:05] *** parabolize left
[05:08] *** buharin joined
[05:09] *** parabolize joined
[05:23] *** Xliff joined
[05:23] *** wisti left
[05:27] *** hankache joined
[05:28] *** zzzzzzzzz joined
[05:28] <hankache> morning #perl6

[05:29] <Xliff> \o

[05:29] <Xliff> hankache: You know much about bitwise ops in perl6?

[05:33] *** cpage_ joined
[05:34] <hankache> Xliff not really 

[05:36] <Xliff> kk

[05:36] <hankache> Xliff if it's about and/or then yes, if it's about those class specific bitwise ops ?^ +& etc. I,ve never used them

[05:37] <Xliff> The docs are clear on bitwise and, or and xor but not quite so on unsetting bits coz... no negation

[05:38] <Xliff> so "say 5 +& ~(1 +| 2)" puts back "1"

[05:38] <Xliff> (no camelia)

[05:38] <Xliff> When I really want "4"

[05:39] <hankache> m:  so "say 5 +& ~(1 +| 2)" puts back "1"

[05:39] <camelia> rakudo-moar ff8362: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3so "say 5 +& ~(1 +| 2)"7⏏5 puts back "1"␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier…»

[05:40] <hankache> m:say 5 +& ~(1 +| 2)

[05:40] <hankache> m: say 1

[05:40] <camelia> rakudo-moar ff8362: OUTPUT«1␤»

[05:40] <Xliff> So it lives.

[05:40] <hankache> m: say 5 +& ~(1 +| 2)

[05:40] <camelia> rakudo-moar ff8362: OUTPUT«1␤»

[05:40] <Xliff> the ~ preceeding (1 +| 2) has no real effect

[05:42] *** kaare_ left
[05:42] *** Wildfyr joined
[05:45] <hankache> Xliff indeed

[05:45] <hankache> m: ( ~(1 +| 2)).WHAT

[05:45] <camelia> rakudo-moar ff8362: ( no output )

[05:45] <hankache> m: ( ~(1 +| 2)).WHAT.say

[05:45] <camelia> rakudo-moar ff8362: OUTPUT«(Str)␤»

[05:45] <Xliff> O_o

[05:46] <Xliff> m: (1 +| 2).WHAT.say

[05:46] <camelia> rakudo-moar ff8362: OUTPUT«(Int)␤»

[05:46] <Xliff> m: ~(1 +| 2).WHAT.say

[05:46] <camelia> rakudo-moar ff8362: OUTPUT«WARNINGS for <tmp>:␤Useless use of "~" in expression "~(1 +| 2).WHAT.say" in sink context (line 1)␤(Int)␤»

[05:46] <Xliff> ~ is a useless concat that coerces to Str

[05:46] <hankache> Xliff ~ coerces to Str when used as prefix

[05:46] <Xliff> Well there you go.

[05:47] <Xliff> I did not know that. Much like I am finally understanding that + coerces to Int

[05:47] <buharin> hi :)

[05:47] <Xliff> One of those things I've read and never comprehended until I needed to use it.

[05:47] <buharin> you know that they are added exercises to Perl 6th edition

[05:48] <buharin> nice yea?

[05:48] <hankache> hello buharin

[05:48] *** kaare_ joined
[05:49] <hankache> buharin what Perl 6th edition?

[05:50] *** cooper left
[05:50] *** cooper joined
[05:51] <buharin> Orally book

[05:52] *** cooper left
[05:52] *** cooper joined
[05:55] *** cyphase joined
[05:56] <hankache> aha nice

[05:59] *** CIAvash joined
[06:04] *** Wildfyr left
[06:10] *** domidumont joined
[06:10] *** kentnl left
[06:10] <Xliff> m: 5 +& (0xff +^ (1 +| 2))

[06:10] <camelia> rakudo-moar ff8362: OUTPUT«WARNINGS for <tmp>:␤Useless use of "+&" in expression "5 +& (0xff +^ (1 +| 2))" in sink context (line 1)␤»

[06:10] <Xliff> m: say 5 +& (0xff +^ (1 +| 2))

[06:10] <camelia> rakudo-moar ff8362: OUTPUT«4␤»

[06:11] <Xliff> Well... will have to go with that.

[06:14] *** kent\n joined
[06:14] *** domidumont left
[06:15] *** domidumont joined
[06:22] *** hankache_ joined
[06:23] *** hankache left
[06:29] *** hankache_ left
[06:50] *** gfldex left
[06:51] *** ShimmerFairy joined
[06:52] *** darutoko joined
[06:52] *** molaf left
[06:55] *** japhb left
[07:02] *** hankache joined
[07:04] *** japhb joined
[07:19] *** rurban_ joined
[07:22] *** FROGGS joined
[07:28] *** hankache left
[07:37] *** BenGoldberg left
[07:39] *** huggable left
[07:40] *** huggable joined
[07:42] *** wamba joined
[07:58] *** zengargoyle joined
[08:00] *** firstdayonthejob joined
[08:10] *** MadcapJake joined
[08:14] *** domidumont left
[08:14] *** cognominal joined
[08:15] *** MadcapJake left
[08:15] *** domidumont joined
[08:18] *** MadcapJake joined
[08:23] *** japhb left
[08:23] *** japhb joined
[08:26] *** domidumont left
[08:27] *** tadzik left
[08:27] *** M-matthew left
[08:27] *** M-Illandan1 left
[08:28] *** buharin left
[08:29] *** setty1 joined
[08:29] *** japhb left
[08:29] *** japhb joined
[08:34] *** jack_rabbit left
[08:37] *** RabidGravy joined
[08:42] *** brrt joined
[08:48] *** rindolf joined
[08:52] *** brrt left
[08:55] *** brrt joined
[08:58] *** tadzik joined
[09:07] *** jjido joined
[09:14] *** M-matthew joined
[09:14] *** M-Illandan joined
[09:18] *** rindolf left
[09:19] <raydiak> o/

[09:21] *** labster left
[09:23] *** jjido left
[09:25] *** skids joined
[09:28] *** jjido joined
[09:32] *** Actualeyes joined
[09:38] *** brrt left
[09:41] *** jjido left
[09:42] *** dj_goku_ left
[09:42] *** domidumont joined
[09:43] *** Peter_R joined
[09:45] *** jjido joined
[09:46] *** dj_goku joined
[09:50] *** jjido left
[09:53] * masak .oO( O'Rally, for when you need to learn at top speed )

[09:57] <lizmat> .oO( you can also listen to O'Rally books! )

[09:58] <lizmat> .oO( https://www.youtube.com/watch?v=zyuS8GcENfQ )

[10:02] *** kurahaupo_ left
[10:06] *** firstdayonthejob left
[10:12] *** canopus left
[10:19] *** iH2O joined
[10:21] *** canopus joined
[10:24] *** iH2O left
[10:32] <FROGGS> o/

[10:52] *** wamba left
[10:54] *** gfldex joined
[10:55] <lizmat> FROGGS  /o

[10:56] <masak> FRo/GGS

[11:06] <timotimo> Xliff: it doesn't actually coerce to int, it coerces to anything numeric. int, num, complex, rat.

[11:09] *** cpage_ left
[11:10] *** cpage_ joined
[11:10] *** rurban_ left
[11:13] *** rindolf joined
[11:16] *** araujo_ left
[11:16] *** araujo joined
[11:16] *** dalek left
[11:17] *** araujo left
[11:17] *** dalek joined
[11:17] *** ChanServ sets mode: +v dalek

[11:18] *** tbrowder joined
[11:21] *** buharin joined
[11:24] <tbrowder> mornin' #perl6

[11:24] *** Senji joined
[11:25] <Senji> hey, what GUI libraries support Perl6?

[11:25] <timotimo> we have a native binding for GTK3 already

[11:26] <timotimo> you can get PyQt and PySide via Inline::Python, too

[11:26] <tbrowder> question on running rakudo in a dev environment: is there any way to get it use one's own copy of roast to run the full spectest?

[11:27] <timotimo> it'll just use whatever's in t/spec; you might want to remove the line from the Makefile (and the makefile templates) that runs a git pull before running the spec tests

[11:28] <tbrowder> okay, thanks

[11:28] <konobi> if you use the JS backend, there's always electron

[11:28] <timotimo> you don't need to use the js backend for electron

[11:29] <Senji> I haven't used perl before and am looking for a crossplatform gui library for my first perl project

[11:29] <Senji> also I don't know python 

[11:30] <Senji> which ones would you recommend?

[11:31] <Senji> i want to start with the newest top of the line stuff

[11:32] <timotimo> it really depends on what your specific needs are, i'm afraid

[11:38] *** pr1 joined
[11:39] *** huggable left
[11:40] *** huggable joined
[11:40] *** setty1 left
[11:41] *** setty1 joined
[11:43] <pr1> Hello, I have questions regarding Perl6's architecture. Is this the right place to ask them?

[11:43] <timotimo> yes

[11:43] <timotimo> i should be able to help :)

[11:46] <pr1> First question. Immutability is currently trendy among modern programming languages. Why does P6 let you modify function parameters? Isn't that dangerous?

[11:46] <psch> m: my $x = 0; sub f($x) { $x = 1 }; f $x;

[11:46] <camelia> rakudo-moar 4550ba: OUTPUT«Cannot assign to a readonly variable or a value␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:48] *** lizmat left
[11:48] <timotimo> you can't modify the variables that get passed (unless you "is copy" or "is rw"), but you can mutate things you bring in

[11:48] <timotimo> which is just a matter of our default container implementations allowing you to do that

[11:49] <timotimo> the thing is, immutability is really hard to get right

[11:50] *** lizmat joined
[11:50] <pr1> ok. I was asking because I saw some code on Rosetta Code that used "is copy", which seemed dangerous to me.

[11:50] <lizmat> pr1: even is copy doesn't mutate, it creates a copy

[11:50] <lizmat> your worry is maybe about "is rw"

[11:51] <pr1> yes

[11:51] <lizmat> m: sub a($x is rw) { $x = 42 }; my $a = 666; a($a); say $a

[11:51] <camelia> rakudo-moar 23daf3: OUTPUT«42␤»

[11:51] <lizmat> well, you get what you ask for

[11:52] <lizmat> you could consider this case "pass by reference" I guess :-)

[11:52] <pr1> ok. 

[11:53] <timotimo> you can make it impossible to mutate your variables from the caller-side by binding a value directly, without a scalar to hold it

[11:54] <pr1> 2nd question. Is there a way to create atoms (unresolved expressions) in P6, like in Maxima, e.g.?

[11:54] <pr1> Maxims = lisp

[11:56] <lizmat> you mean lambda's ?

[11:57] *** cpage_ left
[11:59] <pr1> I mean expressions that can be used for symbolic computing.

[11:59] <ilmari> atom in lisp is just something thta's not a cons cell

[12:00] *** chris2 joined
[12:00] <pr1> E.g., [a + b + c, a * b * c, foo = bar, a*b < c*d];

[12:02] <pr1> if a, b, c have values, e.g., then the variables are resolved, otherwise they aren't.

[12:03] <timotimo> we have the beginnings of a module to do symbolic computation, IIRC

[12:03] <timotimo> https://github.com/raydiak/Math-Symbolic

[12:03] <timotimo> .seen raydiak

[12:03] <yoleaux> I saw raydiak 09:19Z in #perl6: <raydiak> o/

[12:03] <timotimo> oh!

[12:03] <timotimo> i totally missed that!

[12:03] <timotimo> o/ raydiak 

[12:04] <pr1> excellent!

[12:04] *** cpage_ joined
[12:04] <gfldex> m: my %h = :1th; sub f(%h2){ %h2<rd> = 3; dd %h2 }; f(%h); dd %h

[12:04] <camelia> rakudo-moar 23daf3: OUTPUT«Hash %h = {:rd(3), :th(1)}␤Hash %h = {:rd(3), :th(1)}␤»

[12:05] *** cpage_ left
[12:06] *** cpage_ joined
[12:06] *** kanishka joined
[12:07] <pr1> Time for lunch. Thank you for your answers. Cheerio, pr1

[12:07] <timotimo> see ya later

[12:07] *** pr1 left
[12:09] *** domidumont left
[12:10] <buharin> when I learn Perl it looks like in Perl6 many good new thing were added

[12:10] <timotimo> that's our hope :)

[12:10] <buharin> but I still not feel a big differences

[12:10] <psch> that was also part of the plan i think

[12:10] <timotimo> having types in it is a big deal that ripples through the whole thing

[12:11] <timotimo> and at some point we'll surely reach performance only dreamed of by fivers

[12:11] <buharin> for me the most important thing is to get Perl job :D

[12:12] <timotimo> yeah, perl6 jobs aren't really broadly announced or anything

[12:12] <timotimo> people don't yet know they want to pay people to write perl6 code

[12:13] <buharin> ye

[12:13] <buharin> thats true

[12:14] <timotimo> though of course you can use perl6 to be more productive in other kinds of jobs

[12:14] <buharin> I play already with Perl6

[12:14] <buharin> but one more thing for me

[12:14] <buharin> I used emacs with some Perl IDE plugin

[12:14] <buharin> but when I changed to Intellij

[12:14] <buharin> it is awesome

[12:15] <buharin> Intellij + Perl

[12:25] *** spider-mario joined
[12:26] *** kid51 joined
[12:41] *** kurahaupo_ joined
[12:41] *** kaare_ left
[12:47] *** Dinesh joined
[12:48] *** Dinesh left
[12:52] *** kurahaupo_ is now known as kurahaupo

[12:53] *** japhb left
[12:55] *** Actualeyes left
[12:55] *** japhb joined
[13:06] *** buharin left
[13:13] *** kurahaupo_ joined
[13:16] *** kurahaupo left
[13:17] *** kurahaupo_ left
[13:18] *** synopsebot6 joined
[13:22] <Senji> does " DWIM Perl 5.14.2.1 (v7). " include perl6 or do I need to download something else for Win10?

[13:23] <moritz> Senji: it doesn't include Perl 6

[13:23] <tbrowder> buharin: intellij handles Perl 6 well?  Is there a Perl 6 plugin for it?

[13:23] <Senji> so that's why I can't run .p6 files?

[13:23] <moritz> Senji: you need http://rakudo.org/downloads/star/rakudo-star-2016.04-x86_64%20(JIT).msi

[13:23] <Senji> thanks

[13:24] *** buharin joined
[13:27] *** samb1 joined
[13:32] <masak> Senji: might be good to think of Perl 5 and Perl 6 as two separate products/runtimes/lineages. downloading one does not give you the other.

[13:32] <Senji> I see

[13:32] <Senji> I saw that Padre supports P6 so I thought the bundle they had installed interpreters for both 

[13:32] <Senji> I'll be using p6

[13:39] <masak> Senji: cool. if you have any questions, come with them here and we'll help

[13:41] *** Actualeyes joined
[13:42] * cognominal noticed that p6-websocket was broken. Now that's even worse. One of its dependancies is broken :(

[13:45] *** rgrinberg joined
[13:47] *** skids left
[13:48] <Senji> thanks masak

[13:52] <AlexDaniel> bisect: good=2015.10 my $p1 = start die "I’m dead"; my $p2 = start ~"I’m alive"; try await Promise.allof($p1, $p2); say .result for grep { .status ~~ ‘Kept’}, $p1, $p2;

[13:52] <bisectable> AlexDaniel: on both starting points the exit code is 0 and the output is identical as well

[13:54] <AlexDaniel> bisect: #| THIS IS A CLASS FOR SHOUTING THINGS␤ class MY-CLASSES-ARE-ALL-CAPS { method WHY { "I DON'T KNOW" } } my $c = MY-CLASSES-ARE-ALL-CAPS.new; say $c.WHY say $c."WHY"()

[13:54] <bisectable> AlexDaniel: on both starting points the exit code is 1 and the output is identical as well

[13:54] <AlexDaniel> bisect: good=2015.10 #| THIS IS A CLASS FOR SHOUTING THINGS␤ class MY-CLASSES-ARE-ALL-CAPS { method WHY { "I DON'T KNOW" } } my $c = MY-CLASSES-ARE-ALL-CAPS.new; say $c.WHY say $c."WHY"()

[13:54] <bisectable> AlexDaniel: on both starting points the exit code is 1 and the output is identical as well

[13:56] <AlexDaniel> yeah, well… seems like there was no point to build rakudo from 2015.10…

[13:58] <psch> bisect: #| THIS IS A CLASS FOR SHOUTING THINGS␤ class MY-CLASSES-ARE-ALL-CAPS { method WHY { "I DON'T KNOW" } } my $c = MY-CLASSES-ARE-ALL-CAPS.new; say $c.WHY; say $c."WHY"()

[13:58] <bisectable> psch: on both starting points the exit code is 1 and the output is identical as well

[13:59] <psch> huh, that semicolon didn't matter apparently

[13:59] <psch> oh, there's another syntax error!

[13:59] <psch> bisect: #| THIS IS A CLASS FOR SHOUTING THINGS␤ class MY-CLASSES-ARE-ALL-CAPS { method WHY { "I DON'T KNOW" } }; my $c = MY-CLASSES-ARE-ALL-CAPS.new; say $c.WHY; say $c."WHY"()

[13:59] <bisectable> psch: on both starting points the exit code is 1 and the output is identical as well

[13:59] <psch> well alright then vOv

[13:59] <AlexDaniel> bisect: good=2015.10 #| THIS IS A CLASS FOR SHOUTING THINGS␤ class MY-CLASSES-ARE-ALL-CAPS { method WHY { "I DON'T KNOW" } }; my $c = MY-CLASSES-ARE-ALL-CAPS.new; say $c.WHY; say $c."WHY"()

[13:59] <bisectable> AlexDaniel: on both starting points the exit code is 1 and the output is identical as well

[13:59] <AlexDaniel> it defaults to 2015.12 anyway

[14:00] <psch> oh, so it would be before 2015.12?

[14:00] <AlexDaniel> last query was from 2015.10, so it is before 2015.10

[14:00] <psch> right

[14:00] <AlexDaniel> bisect: good=2015.09 #| THIS IS A CLASS FOR SHOUTING THINGS␤ class MY-CLASSES-ARE-ALL-CAPS { method WHY { "I DON'T KNOW" } }; my $c = MY-CLASSES-ARE-ALL-CAPS.new; say $c.WHY; say $c."WHY"()

[14:00] <bisectable> AlexDaniel: no build for such “good” revision

[14:00] <AlexDaniel> ;)

[14:03] <AlexDaniel> if anybody is wondering, now it has about 2500 builds which takes about 66 GB

[14:03] <AlexDaniel> not bad :)

[14:11] *** kurahaupo joined
[14:13] *** MadcapJake left
[14:14] *** kaare_ joined
[14:15] *** Senji left
[14:15] *** Senj joined
[14:15] *** Senj is now known as Senji

[14:15] *** Senji left
[14:15] *** Senj joined
[14:15] *** Senj is now known as Senji

[14:15] *** tomboy64 joined
[14:16] *** Senji left
[14:16] *** Senj joined
[14:16] *** Senj is now known as Senji

[14:16] *** Senji left
[14:16] *** Senj joined
[14:16] *** Senj is now known as blasdguyasd

[14:16] *** blasdguyasd is now known as Senj

[14:16] *** Senj is now known as Senji

[14:16] *** Senji is now known as blasdguyasd

[14:16] *** Senji joined
[14:17] *** blasdguyasd left
[14:17] *** Senji left
[14:17] *** Senji joined
[14:18] *** MadcapJake joined
[14:39] *** kurahaupo_ joined
[14:41] *** kurahaupo left
[14:41] *** rurban_ joined
[14:44] *** skids joined
[14:52] <Senji> >perl.exe -MCPAN -e "CPAN->upgrade('/^Padre/')"

[14:52] <Senji> this takes for fucking ever

[14:52] *** colomon joined
[14:55] *** espadrine joined
[14:56] *** khw joined
[15:16] *** firstdayonthejob joined
[15:21] *** skids left
[15:32] *** buharin left
[15:39] *** huggable left
[15:40] *** huggable joined
[15:42] *** danaj joined
[15:47] *** [Sno] joined
[15:47] *** sno left
[15:47] *** duky joined
[15:48] <duky> p6: say 3 * 12

[15:48] <camelia> rakudo-moar 23daf3: OUTPUT«36␤»

[15:49] *** duky left
[15:51] *** buharin joined
[15:53] <Senji> so I installed rakudo 

[15:53] <Senji> padre still says 

[15:53] <Senji> ---------------------------

[15:53] <Senji> Error

[15:53] <Senji> ---------------------------

[15:53] <Senji> No execution mode was defined for this document type: application/x-perl6

[16:08] *** grondilu joined
[16:11] <masak> Senji: not sure there is expertise here to help with that, sorry :/

[16:11] <masak> any Padre users/devs around?

[16:15] <timotimo> no :(

[16:15] <timotimo> er, i mean

[16:15] <timotimo> not me

[16:21] *** [Sno] left
[16:21] *** atweiden joined
[16:21] <masak> I'm guessing there's a #padre channel (possibly over at ye olde irc.perl.org) where such an inquiry might be better made

[16:21] *** sno joined
[16:22] <mst> the padre perl6 plugin appears to've last been updated in 2010

[16:22] <atweiden> m: multi sub pkgname-pkgver-pkgrel(%txninfo, :@checks! where *.elems == 1) returns Array { pkgname-pkgver-pkgrel(%txninfo, :checks[|@checks, %txninfo<pkgver>:exists]) }; multi sub pkgname-pkgver-pkgrel(%txninfo, :@checks! where *.elems == 2) returns Array { pkgname-pkgver-pkgrel(%txninfo, :checks[|@checks, %txninfo<pkgrel>:exists]) }; multi sub pkgname-pkgver-pkgrel(%txninfo, :@checks! where *.elems == 3) returns Array { @checks }; my %txninfo = 

[16:22] <atweiden> :pkgname<name>, :pkgver<1.0>, :pkgrel(1); pkgname-pkgver-pkgrel(%txninfo, :checks[%txninfo<pkgname>:exists]).say;

[16:22] <camelia> rakudo-moar 23daf3: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed initializer␤at <tmp>:1␤------> 3returns Array { @checks }; my %txninfo =7⏏5<EOL>␤    expecting any of:␤        prefix␤        term␤»

[16:22] *** espadrine left
[16:22] <atweiden> hmm.. can i get m to run a short script ?

[16:23] *** domidumont joined
[16:24] <timotimo> yes, it'll accept links to gist and a few other pasting services

[16:24] <timotimo> by reducing the length of the name of the sub, you should be able to still fit it into one single line of irc message

[16:25] <atweiden> m: https://gist.github.com/atweiden/9d1dfe825ade18a7db54d8e0733ca2e4

[16:25] <camelia> rakudo-moar 23daf3: OUTPUT«Constraint type check failed for parameter '@checks'␤  in sub pkgname-pkgver-pkgrel at <tmp> line 2␤  in sub pkgname-pkgver-pkgrel at <tmp> line 2␤  in block <unit> at <tmp> line 27␤␤»

[16:27] <atweiden> i am seeing this error lately from nom

[16:27] <atweiden> it has broken much of my code

[16:33] <atweiden> weirdly, changing the [] to () makes a difference, but only once: https://gist.github.com/atweiden/9d1dfe825ade18a7db54d8e0733ca2e4/revisions

[16:34] <atweiden> m: https://gist.github.com/atweiden/9d1dfe825ade18a7db54d8e0733ca2e4

[16:34] <camelia> rakudo-moar 23daf3: OUTPUT«[DEBUG] got here (1)␤[DEBUG] got here (2)␤Constraint type check failed for parameter '@checks'␤  in sub pkgname-pkgver-pkgrel at <tmp> line 11␤  in sub pkgname-pkgver-pkgrel at <tmp> line 17␤  in sub pkgname-pkgver-pkgrel at <tmp> line 8␤  in b…»

[16:50] *** MadcapJake left
[16:55] <ugexe> seems like it would make more sense if you used signature unpacking to act according to the keys of txninfo instead of counting the elements

[17:05] *** MadcapJake joined
[17:06] <Senji> can you recommend a perl6 ide that's not padre?

[17:08] <DrForr> vim? emacs? Atom has plenty of support, and surprisingly Microsoft Visual Code.

[17:08] <atweiden> ugexe: yes, it appears reworking code is an option. the question i have is what caused this code to suddenly stop working

[17:09] <atweiden> i have also tried assigning to `@c` and @c.perl reveals no obvious flaws

[17:10] <timotimo> yeah, atom is nice

[17:20] *** MadcapJake is now known as Madcap{Jake}

[17:20] *** jrusso joined
[17:20] <ugexe> atweiden: a guess would be https://github.com/rakudo/rakudo/commit/90d4072859301eb055f3da707eca47c791d7a3c2

[17:21] *** jrusso is now known as MadcapJake

[17:23] *** MadcapJake left
[17:24] *** Madcap[Jake]_ joined
[17:26] <grondilu> you can't reasonably recommend Vim as an IDE unless you're Damian Conway.

[17:27] *** infina left
[17:28] <grondilu> has he released some P6-related Vim plugins, btw?

[17:29] *** infina joined
[17:29] *** infina left
[17:29] *** infina joined
[17:29] *** Actualeyes left
[17:29] <mst> I know lots of people with vim configs that are more IDE-like than anything else

[17:29] <mst> I mean, if you don't want an IDE, why not use ex-vi like I do ;)

[17:30] *** buharin left
[17:31] <jnthn> atweiden: Looks like a regression; please RT it and I'll get to it in the next few days. Evidently we're missing some test coverage...

[17:35] *** sno left
[17:35] *** sno joined
[17:45] *** Madcap[Jake]_ is now known as MadcapJake

[17:47] *** MadcapJake left
[17:49] *** MadcapJake joined
[17:51] *** buharin joined
[17:56] *** sno left
[17:57] *** sno joined
[18:06] <moritz> bisectable: https://gist.github.com/atweiden/9d1dfe825ade18a7db54d8e0733ca2e4

[18:06] <bisectable> moritz: on both starting points the exit code is 1 and the output is identical as well

[18:06] <moritz> AlexDaniel: does bisectable support gist URLs?

[18:07] <moritz> if not, that would be very handy

[18:09] <AlexDaniel> well if you give me one hour it will

[18:10] *** rgrinberg left
[18:12] *** pmurias joined
[18:12] *** domidumont left
[18:14] <pmurias> hi

[18:27] *** setty1 left
[18:28] *** chris2 left
[18:31] *** addison joined
[18:35] <buharin> huh in my country Perl isn't popular

[18:36] <ugexe> you know what happens with something becomes unpopular? it starts becoming cool again

[18:37] <buharin> I don't think this rule will touch programming langs

[18:37] *** chris2 joined
[18:38] <ugexe> programming langs have been rediscovering the same concepts over and over since the 70s

[18:38] <jdv79> only if hipsters can dig it

[18:42] *** lnrdo left
[18:43] *** roguelazer left
[18:44] *** espadrine joined
[18:44] *** ruoso left
[18:44] *** lnrdo joined
[18:45] *** [Sno] joined
[18:45] *** sno left
[18:45] *** roguelazer joined
[18:45] *** buharin left
[18:45] *** ruoso joined
[18:47] *** damnlie left
[18:48] *** yqt joined
[18:53] *** woolfy joined
[18:54] *** addison left
[18:55] *** bisectable left
[18:56] *** damnlie joined
[18:56] *** bisectable joined
[18:56] <AlexDaniel> bisect: https://gist.github.com/atweiden/9d1dfe825ade18a7db54d8e0733ca2e4

[18:56] <bisectable> AlexDaniel: it looks like an URL, but mime type is “text/html; charset=utf-8” while I was expecting “text/plain; charset=utf-8”. I can only understand raw links, sorry.

[18:56] <AlexDaniel> bisectable: https://gist.githubusercontent.com/atweiden/9d1dfe825ade18a7db54d8e0733ca2e4/raw/16b7c39cfd12fef6eb74851c872097e0c655cff3/pkginfo.p6

[18:56] <bisectable> exit code is 1 on both starting points, bisecting by using the output

[18:56] <bisectable> AlexDaniel: (2016-02-18) https://github.com/rakudo/rakudo/commit/9983c2c

[18:57] <AlexDaniel> moritz: ↑ the change seems to be in the error message

[18:57] <AlexDaniel> so you have to change the code a bit

[18:58] *** CIAvash left
[18:59] <AlexDaniel> bisectable: good=2015.10 https://gist.githubusercontent.com/atweiden/9d1dfe825ade18a7db54d8e0733ca2e4/raw/16b7c39cfd12fef6eb74851c872097e0c655cff3/pkginfo.p6

[18:59] <bisectable> exit code is 1 on both starting points, bisecting by using the output

[18:59] <bisectable> AlexDaniel: (2015-12-23) https://github.com/rakudo/rakudo/commit/7f30326

[18:59] <AlexDaniel> … but it's weird that exit code is 1 everywhere

[19:01] *** BenGoldberg joined
[19:02] *** [Sno] left
[19:03] *** sno joined
[19:04] *** bisectable left
[19:04] *** bisectable joined
[19:07] *** kid511 joined
[19:07] *** cyphase left
[19:09] *** kid51 left
[19:12] *** cyphase joined
[19:13] <AlexDaniel> bisect: # newline test␤exit 42

[19:13] <bisectable> AlexDaniel: on both starting points the exit code is 42 and the output is identical as well

[19:14] *** mr-foobar joined
[19:19] *** inokenty left
[19:20] *** Madcap{Jake} left
[19:22] *** darutoko left
[19:22] <jdv79> wonder if p6 will factor in the ml trend or will it miss it.

[19:22] *** cdg joined
[19:25] <dalek> bisectbot: b6818d5 | (Aleks-Daniel Jakimenko-Aleksejev)++ | bot.pl:

[19:25] <dalek> bisectbot: Avoid warning about undefs

[19:25] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/b6818d5beb

[19:25] <dalek> bisectbot: 638c310 | (Aleks-Daniel Jakimenko-Aleksejev)++ | bot.pl:

[19:25] <dalek> bisectbot: Fetch code from any URLs

[19:25] <dalek> bisectbot: 

[19:25] <dalek> bisectbot: While I could've added support for github/bitbucket/gitlab separately, it is

[19:25] <dalek> bisectbot: much better to allow *any* links, as long as the mime-type is OK.

[19:25] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/638c310a8c

[19:25] <dalek> bisectbot: e5d145c | (Aleks-Daniel Jakimenko-Aleksejev)++ | README.md:

[19:25] <dalek> bisectbot: More examples in README

[19:25] <dalek> bisectbot: 

[19:25] <dalek> bisectbot: Examples for ␤ and urls

[19:25] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/e5d145c013

[19:25] <dalek> bisectbot: 9afba12 | (Aleks-Daniel Jakimenko-Aleksejev)++ | new-commits:

[19:25] <dalek> bisectbot: Fix locking

[19:25] <dalek> bisectbot: 

[19:25] <dalek> bisectbot: Turns out that locks never actually worked. Whoops.

[19:25] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/9afba12c33

[19:25] <dalek> bisectbot: 94b53c6 | (Aleks-Daniel Jakimenko-Aleksejev)++ | new-commits:

[19:25] <dalek> bisectbot: Build rakudo from 2015.10 instead of 2015.12

[19:25] <dalek> bisectbot: 

[19:25] <dalek> bisectbot: Not that it is going to help much, but who knows, maybe it will be

[19:25] <dalek> bisectbot: useful once or twice.

[19:25] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/94b53c6f59

[19:27] <dalek> bisectbot: 2809f3f | (Aleks-Daniel Jakimenko-Aleksejev)++ | README.md:

[19:27] <dalek> bisectbot: Wrong bot name in the example (oops!)

[19:27] <dalek> bisectbot: review: https://github.com/perl6/bisectbot/commit/2809f3fe23

[19:28] <tbrowder> ref editors: had anyone tried neovim? if so, how does it handle p6 and utf8?

[19:28] *** cdg left
[19:28] <atweiden> tbrowder: neovim is great

[19:29] <AlexDaniel> atweiden: how stable is it?

[19:29] <atweiden> i've never had an issue with it

[19:31] <tbrowder> atweiden: how long have you used it? have you found p6 additions (i only know enough vi to do very basic things and don't know the nomenclature, macros?)?

[19:32] <tbrowder> the fact that damian uses vi is good enough for me, but only if i can still use a mouse

[19:32] <atweiden> i have 4-5 years experience with vim, nvim on p6 since mid-2015

[19:33] <tbrowder> sounds good, thanks

[19:33] <atweiden> i would recommend vim-perl and youcompleteme

[19:34] *** inokenty joined
[19:37] <AlexDaniel> tbrowder: I wouldn't rely on damian on that one :)

[19:39] *** cooper left
[19:39] *** cooper joined
[19:39] *** huggable left
[19:40] *** huggable joined
[19:40] *** espadrine left
[19:41] <tbrowder> well i'm not getting a lot of huzzahs for any other p6 editor except maybe atom, and all i read says vim is the most popular editor: i would pay for a good linux editor if it would handle p6 but i haven't found one yet that does

[19:42] <DrForr> Microsoft Visual Code does perl6, not sure if that's the right name.

[19:42] <zengargoyle> i've been poking through damian's vim stuff (from the recent yapc and github).  a lot is generic stuff that sorta applies to anything.

[19:43] <tbrowder> yes, thanks, but i don't do windows except for emergencies

[19:43] <zengargoyle> like magic column aligning and search folding

[19:44] <zengargoyle> the variable highlighting and such are pretty neat.

[19:45] <tbrowder> zen*: that's really all i need, i have never used much fancy stuff, although i saw him demo some neat macros

[19:46] <MasterDuke> pretty sure MS Visual Studio Code is opensource and available for linux

[19:46] <zengargoyle> but you really have to go through and pick and choose stuff from his setup.  there's a lot of stuff that seems to be for presentation ease that gets confusing

[19:46] <zengargoyle> like mapping up/down arrows to next/prev buffer

[19:47] <DrForr> MasterDuke and tbrowder - Yes, it is available for Linux. Only way I'd be able to test it.

[19:49] <tbrowder> VC for Linux! I'm really out of touch, thanks!

[19:50] <moritz> note that "Visual Studio Code" != "Visual Studio"

[19:50] <[Coke]> anyone know why htmlify has a --no-inline-python option? 

[19:50] <moritz> it's not the full Microsoft IDE

[19:51] <[Coke]> oh. to be able to test not using it if you have it, I guess.

[19:51] <moritz> [Coke]: so that folks without Inline::Python can still get the HTML to build, just a "bit" slower

[19:51] <moritz> and that, yes

[19:52] <AlexDaniel> tbrowder: what about emacs?

[19:52] <[Coke]> moritz: it still builds.

[19:52] <AlexDaniel> there's perl6-mode (https://github.com/hinrik/perl6-mode)

[19:53] <[Coke]> if it's not available, it falls back to something else if possible.

[19:53] <AlexDaniel> and you can use evil if you want vim-like editing

[19:54] <tbrowder> yes, I just realized that after a quick search, but still maybe worth a look; emacs is my current editor, but the p6 support is minimal, but the utf8 is pretty good

[19:55] <AlexDaniel> you can take a look at yasnippet to have templates that are similar to what Damian was demonstrating

[19:56] <AlexDaniel> tbrowder: what do you mean by p6 support? What exactly do you need?

[19:57] * zengargoyle ponders when there will be perl6tidy and perl6critic ...

[19:57] <tbrowder> well, i haven't seen the editor with the p6 mode recognize the p6 syntax for basic editing

[19:57] <AlexDaniel> zengargoyle: I don't think that we will see perl6critic soon, simply because we don't know what are the pitfalls

[19:58] <AlexDaniel> tbrowder: define “basic editing”

[19:58] *** sno left
[19:58] *** [Sno] joined
[20:00] <lizmat> re using vim as an IDE: https://www.youtube.com/watch?v=9u6O0dLuqhI

[20:04] <tbrowder> basic: putting the cursor at the right place after wrapping a line

[20:06] <tbrowder> basic: spaces vs tabs, macros, block editing

[20:07] <[Coke]> anyone know what "formalities" refers to in perl6/doc?

[20:07] <AlexDaniel> tbrowder: great, emacs with perl6-mode does all that

[20:07] *** khw left
[20:08] <[Coke]> it's in the css, htmlify (commented out) and in the TODO

[20:09] *** wamba joined
[20:11] *** rindolf left
[20:11] *** rindolf joined
[20:11] *** khw joined
[20:12] <Senji> does wxPerl support perl6?

[20:13] *** khw left
[20:15] <mst> Senji: please read what I said in #perl about how that question makes no sense

[20:33] <dalek> doc/makefile: d7748be | coke++ | htmlify.p6:

[20:33] <dalek> doc/makefile: Remove --typegraph option

[20:33] <dalek> doc/makefile: 

[20:33] <dalek> doc/makefile: Eventually this logic will be in the makefile

[20:33] <dalek> doc/makefile: review: https://github.com/perl6/doc/commit/d7748be391

[20:33] <dalek> doc/makefile: 330b416 | coke++ | t/tabs.t:

[20:33] <dalek> doc/makefile: Makefile moved.

[20:33] <dalek> doc/makefile: review: https://github.com/perl6/doc/commit/330b416516

[20:33] <dalek> doc/makefile: 894c27d | coke++ | / (2 files):

[20:33] <dalek> doc/makefile: Convert check into a (failing) test

[20:33] <dalek> doc/makefile: review: https://github.com/perl6/doc/commit/894c27d397

[20:38] *** Zoffix joined
[20:40] *** travis-ci joined
[20:40] <travis-ci> Doc build failed. Will "Coke" Coleda 'Convert check into a (failing) test'

[20:40] <travis-ci> https://travis-ci.org/perl6/doc/builds/141902552 https://github.com/perl6/doc/compare/e8ef3e10636b...894c27d397c2

[20:40] *** travis-ci left
[20:41] <vendethiel-> mh; seems like "is raw" is not documented on doc.perl6.org. https://design.perl6.org/S06.html#Raw_subroutines doesn't have an example to still..

[20:41] <vendethiel-> s/il/ea/

[20:41] <Zoffix> I have a script that uses Mojolicious. When exceptions happen in my code, I don't get any line numbers or filenames or anything; just the error message itself. Any idea how to locate what's throwing it?

[20:41] <timotimo> hey ven

[20:41] <vendethiel-> Zoffix: tried --ll-exception? might help

[20:41] <vendethiel-> hey timo :)

[20:41] <timotimo> how've you been?

[20:41] <Zoffix> vendethiel-, tried it. No luck :/

[20:42] <timotimo> hm, it's probably a CATCH somewhere that just prints the message or something

[20:42] <vendethiel-> timotimo: swamped under the $dayjob/$school combo, but fine! you?

[20:42] <Zoffix> I think it's from Mojo::Exception or something

[20:42] <Zoffix> I tried to augment Exception::throw, but I get "Cannot have a multi candidate for 'throw' when an only method is also in the package 'Exception'"

[20:43] <tbrowder> AlexDaniel: are you willing to share yr init.el?

[20:43] <timotimo> i'm okay. not nearly as productive as i'd like to be, though

[20:44] <lizmat> Zoffix: I could make it a multi, would that help?

[20:44] <tbrowder> lizmat: thanks for the link, i had started it but hadn't finished--it's a good advert for vim; problem with emacs is lisp

[20:44] <Zoffix> lizmat, Nah, I'll try to find some way that doesn't involve changing Rakudo :)

[20:45] <lizmat> Zoffix: okido

[20:45] <lizmat> Zoffix: you could try wrapping it ?

[20:45] <vendethiel-> timotimo: oh, I certainly feel very much the same way...

[20:46] <Zoffix> lizmat, yeah, trying now :)

[20:46] <AlexDaniel> tbrowder: it's in a really weird state right now. More than a week ago it was a real mess, so I declared .emacs bankruptcy and started over

[20:47] <vendethiel-> timotimo: I was at the FPW last week; but I need to look around europe and see which workshops/conferences I could attend this 2nd half ot 2016...

[20:47] <AlexDaniel> tbrowder: personally I agree with this: “constructing a solid configuration is ultimately a personal journey for which you must take the first steps”

[20:48] <AlexDaniel> tbrowder: that's from https://github.com/technomancy/emacs-starter-kit

[20:48] <lizmat> vendethiel-: Alpine Perl Workshop ?

[20:48] <MasterDuke> isn't there some way to specify a block that runs at the end of a for loop?

[20:48] <MasterDuke> like a finally block?

[20:49] <vendethiel-> lizmat: that sounds great! will you be there? will it be as english-speaking as the ones I've had the luck to participate to? I am learning german, but I don't expect to be ready be september.. :P

[20:51] <timotimo> LEAVE, MasterDuke 

[20:51] <timotimo> or maybe LAST

[20:51] <AlexDaniel> tbrowder: you may take a look of course, but keep in mind that it's not even close to being perfect (in fact there are a couple of broken things there)

[20:51] <mst> timotimo: hey, there's no need to be like that! ;)

[20:51] <AlexDaniel> tbrowder: https://gist.github.com/AlexDaniel/0d29a5698d7b3a75c7570d5526fa50b8

[20:51] <timotimo> i don't think LEAVE fires every time the loop revolves

[20:51] <timotimo> mst: haha :)

[20:52] <MasterDuke> timotimo++, right, phasers, i was looking under flow control

[20:53] <AlexDaniel> tbrowder: some people also like preconfigured things. Like spacemacs

[20:53] <tbrowder>  AlexDaniel: I did that more or less for 20 years with XEmacs, but had to leave it when it couldn't handle utf8 and Perl 6, and some of my init.el doesn't work with emacs.  I mainly need help with integrating the p6 el file and fixing a keymap to ease using utf8 operators and such.

[20:53] <AlexDaniel> tbrowder: maybe you'd like to take a look, maybe not

[20:53] *** Ven joined
[20:54] <AlexDaniel> tbrowder: right, I don't handle unicode stuff on text editor level

[20:54] <AlexDaniel> tbrowder: basically because I want it to work everywhere

[20:54] <AlexDaniel> tbrowder: so I use a custom keyboard layout + compose key

[20:54] <tbrowder> AlexDaniel: I would love to look and I thank you for you allowing me to.

[20:54] <AlexDaniel> tbrowder: the link is there ↑ :)

[20:55] <tbrowder> going there now...

[20:55] <AlexDaniel> tbrowder: perl6-mode can be installed from melpa or marmalade… not sure which, I just M-x package-install and that's it

[20:56] <MasterDuke> turns out you can't delare a variable in a FIRST phaser and use it the the body of the loop, too bad

[20:56] <timotimo> you can, if you leave out the { } after FIRST

[20:57] *** TEttinger joined
[20:58] <MasterDuke> huh, so you can, interesting

[20:59] *** rurban_ left
[21:01] <lizmat> vendethiel-: yes, it will be mostly english, I think

[21:02] *** atweiden left
[21:02] <timotimo> every pair of curlies has its own lexical scope

[21:02] <lizmat> m: for ^2 { FIRST my $a = 42; say $a++ }  # timotimo: still something funky here

[21:02] <camelia> rakudo-moar 8f440e: OUTPUT«42␤0␤»

[21:02] <timotimo> and "my" declares things lexically

[21:03] <timotimo> lizmat: never said the value would stick around :)

[21:03] <lizmat> m: for ^3 { FIRST my $a = 42; say $a++ }  # timotimo: still something funky here

[21:03] <camelia> rakudo-moar 8f440e: OUTPUT«42␤0␤0␤»

[21:03] <timotimo> you need a state for that

[21:03] <tbrowder>  AlexDaniel: the init.el looks very organized, but i will have to study it more, thanks. I did try to use some of the fancy emacs helper frameworks but didn't like them.  So i will try to work on making emacs better work for me.

[21:03] <lizmat> well, I think it should either complain that $a doesn't exists outside of the FIRST phaser

[21:03] <lizmat> or it should indeed use the same lexical

[21:03] <timotimo> don't think so, tbh

[21:04] <timotimo> m: for ^3 { my $a; $a = 42 if !$++; say $a++ }

[21:04] <camelia> rakudo-moar 8f440e: OUTPUT«42␤0␤0␤»

[21:05] <lizmat> ah, duh

[21:05] <timotimo> :)

[21:05] <lizmat> m: for ^2 { FIRST my $a is default(42); say $a++ }   # :-)

[21:05] <camelia> rakudo-moar 8f440e: OUTPUT«42␤42␤»

[21:05] <timotimo> hah

[21:05] <timotimo> that's a good one

[21:06] <timotimo> though the default trait is evaluated at compile time, still?

[21:06] <timotimo> so there's no way to calculate it every time the loop gets entered for the first time?

[21:06] <lizmat> yeah, it is afaik

[21:07] <lizmat> m: BEGIN $_ = 42; for 3..4 { FIRST my $a is default($_); say $a++ }   # still...

[21:07] <camelia> rakudo-moar 8f440e: OUTPUT«0␤0␤»

[21:07] <lizmat> I guess this is a case of DIHWIDT

[21:08] *** [Sno] left
[21:08] *** sno joined
[21:10] <timotimo> well, even when you have BEGIN $_ = 42, you'll end up with a fresh $_ inside the for loop

[21:12] *** Ven left
[21:12] <vendethiel-> lizmat: good to know; thanks

[21:13] <vendethiel-> i'll try to get permission to go then :-).

[21:19] <lizmat> timotimo: yeah, I was just making sure that the outer $_ wasn't being used for the "is default" at compile time

[21:20] <timotimo> ah

[21:21] <timotimo> if it did, that'd be a pretty bad bug :)

[21:29] <tbrowder> DrForr: i haven't found any perl support for VSC, have you written yr own extensions?

[21:30] <DrForr> No, I just remember that it had syntax highlighting for perl 6, at least if it's what I remember.

[21:32] *** agentzh left
[21:35] *** labster joined
[21:39] <vendethiel-> ugh, the alpine perl workshop is the one friday (out of 3) where I need to be at school. I'm gonna try to convince them...

[21:40] <timotimo> it only has syntax highlighting, and only because it is compatible with ... textmate i think?

[21:42] <vendethiel-> m: BEGIN $_ = 42; for 3..4 { FIRST .say; FIRST my $a is default($_); say $a++ } 

[21:42] <camelia> rakudo-moar 8f440e: OUTPUT«3␤0␤0␤»

[21:42] <vendethiel-> mmh ;o)

[21:44] *** grondilu left
[21:44] <vendethiel-> m: BEGIN $_ = 42; for 3..4 { FIRST .say; FIRST my $a = $_; say $a++ } 

[21:44] <camelia> rakudo-moar 8f440e: OUTPUT«3␤3␤0␤»

[21:44] <vendethiel-> okay, just making sure..

[21:46] <DrForr> From a grammar perspective, are there terms beyond {number,string,variable,type,constant} (not counting such things as Pairs which are terms but compound?

[21:46] <DrForr> The syntax doc claims that's all of them, but I wanted to check.

[21:47] <DrForr> Hrm, regex as well, maybe.

[21:49] <DrForr> Woof, that's pretty deep nesting, but it's under the quote term.

[21:49] <timotimo> yeah, because regexes are a language of their own, and they are kind of quote-like

[21:50] <DrForr> I think that and colon pairs may be the last. I'm just arranging a test suite, and I want to start with just single Perl 6 literals, preferably with no whitespace (excepting strings.)

[21:51] <DrForr> But it's nearly 1 here.

[21:51] *** Zoffix left
[21:56] *** cognominal left
[21:59] *** BenGoldberg left
[22:01] <tbrowder> anyone know of a Perl 6 group in Budapest that might have programs for young coders (10-14 year old)?

[22:02] <tbrowder> (or Perl 5)

[22:06] <DrForr> SF has a perl 6 study group, but that won't help. Could get ideas from it though.

[22:06] <tbrowder> SF?

[22:07] <DrForr> San Francisco.

[22:07] <DrForr> G'night.

[22:08] *** khw joined
[22:08] <tbrowder> ah!!  I have a friend who lives in Budapest and has a son about 12 who is very interested in programming. i was hoping I could point his dad to a Perl group in or around Budapest.

[22:08] <tbrowder> g'night DrForr

[22:12] *** kurahaupo_ is now known as kurahaupo

[22:13] *** RabidGravy left
[22:15] *** canopus left
[22:18] *** cognominal joined
[22:18] *** kaare_ left
[22:19] *** cognominal left
[22:23] *** canopus joined
[22:54] *** BenGoldberg joined
[23:07] *** rindolf left
[23:10] *** DarthGandalf left
[23:12] *** DarthGandalf joined
[23:12] *** spider-mario left
[23:12] *** firstdayonthejob left
[23:16] *** aries_liuxueyang joined
[23:22] *** bbkr left
[23:22] *** aries_liuxueyang left
[23:31] *** aries_liuxueyang joined
[23:32] *** setty1 joined
[23:34] *** aries_liuxueyang left
[23:36] *** aries_liuxueyang joined
[23:39] *** huggable left
[23:40] *** huggable joined
[23:43] *** [Sno] joined
[23:43] *** sno left
[23:46] *** aries_liuxueyang left
[23:46] *** aries_liuxueyang joined
[23:58] *** bjz left
[23:59] *** bjz joined
[23:59] *** pmurias left
