[00:03] *** eliasr left
[00:05] *** mcmillhj joined
[00:05] *** labster joined
[00:06] *** itaipu joined
[00:06] *** MorayJ left
[00:09] *** mcmillhj left
[00:17] *** mcmillhj joined
[00:20] *** aries_liuxueyang joined
[00:21] *** pierre_ joined
[00:22] *** mcmillhj left
[00:31] *** mcmillhj joined
[00:31] *** BenGoldberg joined
[00:36] *** mcmillhj left
[00:42] *** mcmillhj joined
[00:42] *** mempko left
[00:46] *** mcmillhj left
[00:48] *** lambd0x left
[00:51] <ugexe> .tell pmurias re: `zef clone Foo::Bar` question from last week - this mostly exists already using either `zef fetch Foo::Bar` or `zef look Foo::Bar`. If it happens that Foo::Bar resolves to a .tar.gz (like from cpan) and not a git uri it will extract it for you as well

[00:51] <yoleaux> ugexe: I'll pass your message to pmurias.

[00:55] *** mcmillhj joined
[00:59] *** mcmillhj left
[01:01] <bstamour> /?

[01:06] *** mcmillhj joined
[01:06] <ugexe> ?$/

[01:10] *** mcmillhj left
[01:17] *** mcmillhj joined
[01:18] *** pierre_ left
[01:20] *** itaipu left
[01:20] *** itaipu joined
[01:21] *** mcmillhj left
[01:25] *** pierre_ joined
[01:30] *** pierre_ left
[01:31] *** pierre_ joined
[01:36] *** mcmillhj joined
[01:39] *** sufrostico left
[01:41] *** mcmillhj left
[01:49] *** pierre_ left
[01:49] *** bob777 joined
[01:50] <gfldex> m: my @tests = { say 1; False }, { say 2; True }, { say 3; True }; say [&&] @tests;

[01:50] <camelia> rakudo-moar d2b115: OUTPUT«2␤3␤True␤»

[01:51] <gfldex> i would expect the first block to be executed as well

[01:51] *** mcmillhj joined
[01:51] <gfldex> and it's return value to be taken into consideration

[01:54] *** pierre_ joined
[01:56] *** mcmillhj left
[02:06] <BenGoldberg> m: my @tests = { say 1; False }, { say 2; True }, { say 3; True }; @tests.say

[02:06] <camelia> rakudo-moar d2b115: OUTPUT«[-> ;; $_? is raw { #`(Block|80637344) ... } -> ;; $_? is raw { #`(Block|80637416) ... } -> ;; $_? is raw { #`(Block|80637488) ... }]␤»

[02:06] <BenGoldberg> m: my @tests = { say 1; False }, { say 2; True }, { say 3; True }; so $_ for @tests;

[02:06] <camelia> rakudo-moar d2b115: OUTPUT«WARNINGS for <tmp>:␤Useless use of "so " in expression "so $_" in sink context (line 1)␤»

[02:07] <BenGoldberg> m: my @tests = { say 1; False }, { say 2; True }, { say 3; True }; $_() for @tests;

[02:07] <camelia> rakudo-moar d2b115: OUTPUT«1␤2␤3␤»

[02:07] <BenGoldberg> m: my @tests = { say 1; False }, { say 2; True }, { say 3; True }; say all(@tests);

[02:07] <camelia> rakudo-moar d2b115: OUTPUT«all(-> ;; $_? is raw { #`(Block|69009920) ... }, -> ;; $_? is raw { #`(Block|69009992) ... }, -> ;; $_? is raw { #`(Block|69010064) ... })␤»

[02:07] <BenGoldberg> m: my @tests = { say 1; False }, { say 2; True }, { say 3; True }; say so all(@tests);

[02:07] <camelia> rakudo-moar d2b115: OUTPUT«True␤»

[02:07] <BenGoldberg> m: my @tests = { say 1; False }, { say 2; True }, { say 3; True }; say [&&] @tests;

[02:07] <camelia> rakudo-moar d2b115: OUTPUT«2␤3␤True␤»

[02:08] *** mempko joined
[02:08] <BenGoldberg> m: my @tests = { say 1; False }, { say 2; True }, { say 3; True }; say [&&] !@tests;

[02:08] <camelia> rakudo-moar d2b115: OUTPUT«False␤»

[02:08] <BenGoldberg> m: my @tests = { say 1; False }, { say 2; True }, { say 3; True }; say [&&] |@tests;

[02:08] <camelia> rakudo-moar d2b115: OUTPUT«2␤3␤True␤»

[02:08] <BenGoldberg> I don't understand why any of those are getting called.

[02:08] *** canopus left
[02:09] <gfldex> m: say Regex ~~ Callable;

[02:09] <camelia> rakudo-moar d2b115: OUTPUT«True␤»

[02:09] <BenGoldberg> Is it a bug?

[02:09] <gfldex> that could be the reason

[02:09] <BenGoldberg> ?

[02:09] *** mcmillhj joined
[02:09] * BenGoldberg doesn't get it.

[02:12] <gfldex> my guess is there is a ~~ somewhere and that is getting the Block called

[02:12] <gfldex> m: my @tests = { say 1; True }, { say 2; True }, { say 3; True }; multi sub tester(&test){ test() }; multi sub tester([]){ True }; multi sub tester([&test, *@rest]) { test() && tester(@rest) }; say so tester(@tests);

[02:12] <camelia> rakudo-moar d2b115: OUTPUT«1␤2␤3␤True␤»

[02:13] <gfldex> that works as a short circuiting &&

[02:13] <gfldex> it's a bit long tho

[02:14] *** canopus joined
[02:14] *** Nelsen joined
[02:14] <Nelsen> Good evening, mates

[02:14] <Nelsen> I was wondering if there was a "Codecademy"-like site to learn Perl?

[02:15] *** mcmillhj left
[02:18] *** BenGoldberg left
[02:24] *** Nelsen left
[02:25] *** mcmillhj joined
[02:30] *** mcmillhj left
[02:31] *** itaipu left
[02:32] *** itaipu joined
[02:38] *** noganex_ joined
[02:38] *** mcmillhj joined
[02:39] *** canopus left
[02:41] *** noganex left
[02:42] <zostay> m: say "test.foo".trans('.' => '::');

[02:42] <camelia> rakudo-moar d2b115: OUTPUT«test:foo␤»

[02:42] <zostay> m: say "test.foo".trans(['.'] => ['::']);

[02:42] <camelia> rakudo-moar d2b115: OUTPUT«test::foo␤»

[02:42] <zostay> that seems like a bug

[02:43] *** mcmillhj left
[02:44] <MasterDuke> zostay: i got bit by that too, but it's in the docs

[02:46] <zostay> then the docs are too subtle for me, i don't read that in the docs at all

[02:48] <MasterDuke> well, it's not really spelled out here ( https://docs.perl6.org/routine/trans ), but it's shown in the examples

[02:48] *** canopus joined
[02:49] <zostay> which example?

[02:50] <gfldex> examples ain't no roast

[02:50] <gfldex> it's a bug

[02:50] <MasterDuke> $str.=trans( [ '<'   , '>'   , '&' ] =>              [ '&lt;', '&gt;', '&amp;' ]);

[02:50] <gfldex> the examples got it because they are meant to work with rakudo

[02:50] <gfldex> zostay: please rakudobug

[02:51] <zostay> that does not say that $str.=trans('<' => '&lt;', '>' => '&gt;'); shouldn't work...thx, gfldex

[02:52] <MasterDuke> https://github.com/perl6/roast/blob/master/S05-transliteration/trans.t#L55

[02:53] <MasterDuke> (not that i like the current behavior, just playing devil's advocate here)

[02:53] *** tala joined
[02:53] <zostay> at the very least, the docs are incomplete... but i think there's an opportunity to call this a bug still ;)

[02:55] <gfldex> it should either work or complain if it got a multi char replacement. Silently dropping stuff is LTA.

[02:57] <MasterDuke> doesn't that match Perl 5's behavior?

[02:57] *** gfldex left
[03:00] <zostay> gfldex, that's what i just suggested on the bug i posted... either warn and fix docs or make the behavior consistent (with my personal vote being for the latter)

[03:01] <zostay> i don't think there's an analogous function to .trans in perl5, tr/// does not have comparable calling conventions at all

[03:01] <zostay> .trans() is awesome as a multiple string find and replace at the same time thing

[03:07] *** tala left
[03:08] *** canopus left
[03:08] *** rodarmor left
[03:13] *** canopus joined
[03:18] *** canopus left
[03:22] *** mcmillhj joined
[03:24] *** canopus joined
[03:26] *** mcmillhj left
[03:27] *** djbkd joined
[03:31] *** canopus left
[03:39] *** canopus joined
[03:40] *** pierre_ left
[03:43] *** pierre_ joined
[03:46] *** skids left
[03:49] *** rodarmor joined
[03:50] *** cpage_ left
[03:50] *** mcmillhj joined
[03:52] *** canopus left
[03:55] *** mcmillhj left
[03:57] *** mempko left
[03:57] *** canopus joined
[04:00] *** pierre_ left
[04:02] *** itaipu left
[04:05] *** AndyBotwin left
[04:05] *** labster left
[04:06] *** AndyBotwin joined
[04:07] *** MasterDuke left
[04:09] *** pierre_ joined
[04:09] *** labster joined
[04:09] *** mempko joined
[04:13] *** pierre_ left
[04:18] *** canopus left
[04:22] *** mcmillhj joined
[04:22] *** pierre_ joined
[04:23] *** canopus joined
[04:26] *** mcmillhj left
[04:27] *** pierre_ left
[04:27] *** khw left
[04:27] *** pierre_ joined
[04:29] *** pierre_ left
[04:34] <TimToady> R3b0zak.

[04:34] <TimToady> dur

[04:35] <TimToady> so much for that password :)

[04:36] <grondilu> lol

[04:36] *** pierre_ joined
[04:37] <grondilu> hey TimToady did you have a look at https://github.com/perl6/roast/issues/147 ?

[04:39] *** mcmillhj joined
[04:41] *** pierre_ left
[04:41] <TimToady> I don't see how to allow that, offhand, given the list is evaluated before anything is declared

[04:41] <TimToady> something fiddly like that probably wants to use constants anyway

[04:42] <grondilu> then it wouldn't be a list but a syntactic construct.  Like in C I suppose. 

[04:42] *** cpage_ joined
[04:42] <TimToady> in p6 it's just a general list, which you could generate from any compile-time values

[04:43] <grondilu> then allow a syntax that differ from the syntax that uses a list.

[04:43] <TimToady> it seems like kind of a rare thing to want

[04:43] <grondilu> :/

[04:44] <grondilu> that may be true.

[04:44] *** mcmillhj left
[04:44] <TimToady> bein's you're the first person to ask for it in 15 years...

[04:44] <grondilu> yet it bothered me badly that as I was looking at a C header I realized I could not make a straightforward translation.

[04:46] <grondilu> (well, "bothered me badly" that was maybe strong an expression)

[04:46] <grondilu> it was frustrating though.

[04:47] *** nadim joined
[04:47] <grondilu> also, it's not as if NativeCall has existed for 15 years, is it?

[04:52] *** mcmillhj joined
[04:53] *** ItayAlmog2805 joined
[04:54] *** goldfax joined
[04:57] *** ItayAlmog left
[04:57] *** mcmillhj left
[05:01] *** ItayAlmog2805 left
[05:09] *** bob777 left
[05:17] *** nadim left
[05:22] *** wamba joined
[05:26] *** mcmillhj joined
[05:31] *** mcmillhj left
[05:49] *** Woodi joined
[05:50] *** brrt joined
[05:56] *** mcmillhj joined
[06:00] *** mcmillhj left
[06:05] *** woolfy left
[06:07] *** lizmat left
[06:13] *** dami joined
[06:17] *** firstdayonthejob joined
[06:26] *** brrt left
[06:28] <ShimmerFairy> fwiw I ran into the same issue once when using enums in P6. The use case is typically to define "synonyms" for some reason or another.

[06:29] <ShimmerFairy> I'd also like to tell enums not to pollute the namespace with unqualified names, while we're at it.

[06:29] *** pierre_ joined
[06:32] <moritz> ShimmerFairy: you might be able to do that with anonymous enums

[06:33] *** jjido joined
[06:33] <moritz> constant EnumName = enum <a b c>;

[06:33] <moritz> or something like that

[06:33] <moritz> haven't tested it

[06:39] *** jjido left
[06:40] *** domidumont joined
[06:41] *** mcmillhj joined
[06:41] *** jjido joined
[06:41] * grondilu is not sure about what difference there is between constant EnumName = enum <a b c> and enum EnumName <a b c>

[06:42] *** firstdayonthejob left
[06:42] <grondilu> m: constant FooBar = enum <Foo Bar>

[06:42] <camelia> rakudo-moar d2b115: ( no output )

[06:42] <grondilu> m: constant FooBar = enum <Foo Bar>; say FooBar.WHAT

[06:42] <camelia> rakudo-moar d2b115: OUTPUT«(Map)␤»

[06:42] <grondilu> m: enum FooBar <Foo Bar>

[06:42] <camelia> rakudo-moar d2b115: ( no output )

[06:42] <grondilu> m: enum FooBar <Foo Bar>; say FooBar.WHAT

[06:42] <camelia> rakudo-moar d2b115: OUTPUT«(FooBar)␤»

[06:43] *** jjido left
[06:43] *** domidumont left
[06:44] *** domidumont joined
[06:45] *** lizmat joined
[06:45] *** mcmillhj left
[06:48] *** jjido joined
[06:51] <ShimmerFairy> moritz: not synonyms to the enum, but synonyms for its values. In C++, something like e.g.  enum class Feature { Off, OneChoice, TwoChoice, On = OneChoice };  for a feature that used to be binary.

[06:52] *** ribasushi left
[06:54] *** shinobicl_ joined
[06:54] <shinobicl_> m: sub postcircumfix:<' '>($it, $arg, :$double) { say $double ?? 2 * $it * $arg !! $it * $arg }; 2'3'; 2'3':double

[06:54] <camelia> rakudo-moar d2b115: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in postcircumfix:sym<' '>; couldn't find final $stopper ␤at <tmp>:1␤------> 3 ?? 2 * $it * $arg !! $it * $arg }; 2'3'7⏏5; 2'3':double␤»

[06:55] *** ribasushi joined
[06:56] *** jjido left
[06:56] *** mcmillhj joined
[06:56] <moritz> ShimmerFairy: I wasn't talking about the synonyms aspects, rather about not polluting your namespace with short names

[06:56] *** jjido joined
[06:57] <ShimmerFairy> ah

[06:58] *** jjido left
[07:00] *** mcmillhj left
[07:02] *** zengargoyle joined
[07:03] *** labster left
[07:05] <masak> morning, #perl6

[07:05] <moritz> \o masak 

[07:06] <masak> m: enum Feature <Off OneChoice TwoChoice>; constant On = OneChoice; say On

[07:06] <camelia> rakudo-moar d2b115: OUTPUT«OneChoice␤»

[07:06] *** ItayAlmog joined
[07:08] <ShimmerFairy> m: enum Feature <Off OneChoice TwoChoice>; constant On = OneChoice; say Feature::On  # if you, like me, don't much care for the namespace pollution of 'traditional' enums

[07:08] <camelia> rakudo-moar d2b115: OUTPUT«Could not find symbol '&On'␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[07:10] <masak> you defined `On`, not `Feature::On`

[07:11] <masak> there's nothing magical going on with that `constant` statement. it's just a name binding.

[07:11] <ShimmerFairy> masak: right, I'm just pointing out that I'd _like_ to be defining Feature::On instead :)

[07:12] <masak> m: enum Feature (Off => 0, OneChoice => 1, TwoChoice => 2, On => 1); say Feature::On

[07:12] <camelia> rakudo-moar d2b115: OUTPUT«On␤»

[07:13] <ShimmerFairy> The issue with that though is that it's not semantically correct, and that it requires remembering that you have to keep the two options in sync.

[07:16] *** leont joined
[07:17] <masak> you *almost* sound like you have a spec patch coming up :)

[07:20] *** djbkd left
[07:20] <moritz> and a roast and rakudo patch :-)

[07:21] <masak> and lots of good feedback on the respective PRs \o/

[07:22] <ShimmerFairy> fwiw, <TimToady> I don't see how to allow that, offhand, given the list is evaluated before anything is declared

[07:22] <ShimmerFairy> and there's already a roast issue here :P  https://github.com/perl6/roast/issues/147

[07:22] <masak> so, you're saying what you want to do is only impossible once? :P

[07:24] *** djbkd joined
[07:24] <masak> fwiw, grondilu's `enum ("foo", bar => foo);` can't work -- "foo" is just a string, and so there is no `foo` identifier declared when using it as a pair value

[07:24] <masak> guess this is exactly what TimToady is pointing out

[07:24] <ShimmerFairy> nah, I personally think that enums don't necessarily need to keep that behavior :) . In fact I think it would be nice if they worked like function signatures:  sub foo($a, $b = $a) { ... }

[07:25] <ShimmerFairy> I can see why that example in particular doesn't work, though.

[07:26] <masak> that `("foo", bar => foo)` thing is literally a list expression. much less magical than a parameter list.

[07:26] <masak> enums currently ride on the fact that it gets lists in various forms.

[07:26] <ShimmerFairy> right, but considering it's a 'package'-style thing to declare, maybe they could stand to be more magical?

[07:28] <ShimmerFairy> masak: I ultimately think that Perl 6's enums are poorly designed. Sure they have type safety, and EnumClass($out-of-range) won't produce a valid defined object (like it does in C++), but they don't really feel worthwhile to me otherwise.

[07:28] *** djbkd left
[07:28] <masak> that opinion is fine.

[07:29] <masak> I disagree, though.

[07:29] <masak> you should have seen back when they *were* badly designed :P

[07:30] *** Juerd left
[07:30] <ShimmerFairy> masak: In C++ land, I always use 'enum class' over 'enum', where my only sticking point is that doing that kind of conversion I mentioned will live perfectly fine. But otherwise I like them :)

[07:30] *** Juerd joined
[07:32] *** djbkd joined
[07:33] <masak> ShimmerFairy: maybe macros will be able to help you in the future.

[07:33] <masak> I love being able to *say* that with enough confidence nowadays! :D

[07:33] *** labster joined
[07:35] <leont> ShimmerFairy: yeah, enum class is quite awesome :-)

[07:35] <ShimmerFairy> masak: maybe so, as long as it's easy to fix broken-to-me language aspects, there's not much reason to complain :)

[07:36] <ShimmerFairy> leont: agreed, the only issues I have are of the kind that you get for a low-level language: "type conversion doesn't check if the int is in range!"    "why won't you give me a postfix:<++> that DWIMs!?"

[07:36] <ShimmerFairy> (and even on the latter one, I personally don't see it as a really big issue)

[07:37] <leont> The main thing I miss is methods on enum classes ;-)

[07:38] <ShimmerFairy> Well, introspection is a separate issue :P

[07:38] <ShimmerFairy> (imagine if C++ had Signature and Namespace types :P)

[07:39] *** stigo joined
[07:39] <leont> Signatures can be largely done at compile-time, actually

[07:42] <ShimmerFairy> Honestly, I find C++ to be just as interesting as Perl 6, but coming from the opposite direction on the low-level/high-level ladder

[07:45] <leont> The interesting thing about C++ is how much it is still in development

[07:45] <leont> C++11 like Perl6 took way too long, but it worth it

[07:45] *** shinobicl_ left
[07:45] <leont> At least with the new versions they're iterative now. C++14 was a nice minor update and C++17 will bring new awesomeness

[07:45] <ShimmerFairy> leont: and C++11 taught them to maintain their current faster release cycle too, so that's good :)

[07:46] *** mcmillhj joined
[07:51] *** mcmillhj left
[07:51] *** mohae_ joined
[07:53] *** llfourn joined
[07:54] *** mohae left
[08:00] *** mcmillhj joined
[08:05] *** mcmillhj left
[08:09] *** leont left
[08:09] *** mempko left
[08:10] *** zakharyas joined
[08:13] *** fridim___ joined
[08:16] *** pmurias joined
[08:24] *** bjz joined
[08:32] *** mcmillhj joined
[08:32] *** rindolf joined
[08:37] *** mcmillhj left
[08:38] *** bjz left
[08:41] *** bobv joined
[08:44] *** pierre_ left
[08:46] *** mcmillhj joined
[08:51] *** mcmillhj left
[08:53] *** pierre_ joined
[08:54] *** bjz joined
[08:56] *** pierre_ left
[08:57] *** pierre_ joined
[08:59] *** bjz_ joined
[09:01] *** bjz left
[09:04] *** mcmillhj joined
[09:09] *** mcmillhj left
[09:13] *** balajips joined
[09:14] *** balajips left
[09:28] *** eliasr joined
[09:37] *** RabidGravy joined
[09:48] *** mcmillhj joined
[09:52] <El_Che> wut? C++17? What shall I do with my 1996 book?

[09:53] *** pmurias left
[09:54] *** mcmillhj left
[09:57] *** MorayJ joined
[09:57] *** labster left
[10:01] <DrForr> Burn it, of course. Everything magically corresponds to the new spec.

[10:07] *** mcmillhj joined
[10:10] *** fridim___ left
[10:12] *** mcmillhj left
[10:12] *** TheLemonMan joined
[10:17] *** user9 left
[10:17] *** user9 joined
[10:18] *** mcmillhj joined
[10:23] *** mcmillhj left
[10:26] *** fridim___ joined
[10:29] *** lizmat left
[10:31] *** lizmat joined
[10:34] *** lizmat left
[10:35] *** mcmillhj joined
[10:36] *** pierre_ left
[10:36] *** rurban joined
[10:37] *** rurban left
[10:40] *** mcmillhj left
[10:42] *** kaare__ joined
[10:50] *** pierre_ joined
[10:50] *** woolfy joined
[10:53] *** pierre_ left
[11:02] *** dustinm`_ joined
[11:02] *** MilkmanD1n joined
[11:07] *** sakuya joined
[11:07] *** djbkd left
[11:07] *** MilkmanDan left
[11:07] *** dustinm` left
[11:07] *** eyck left
[11:07] *** jervo left
[11:07] *** nine left
[11:07] *** imcsk8 left
[11:07] *** Ulti left
[11:07] *** hanekomu left
[11:07] *** mtj_ left
[11:07] *** jdv79 left
[11:07] *** broquaint left
[11:07] *** shadowpaste left
[11:07] *** xdbr left
[11:07] *** TheDir_ left
[11:07] *** jeek left
[11:07] *** gypsydave5 left
[11:07] *** jast left
[11:08] *** TEttinger left
[11:09] *** mcmillhj joined
[11:09] *** eyck joined
[11:09] *** nine joined
[11:09] *** imcsk8 joined
[11:09] *** Ulti joined
[11:09] *** hanekomu joined
[11:09] *** mtj_ joined
[11:09] *** jdv79 joined
[11:09] *** broquaint joined
[11:09] *** shadowpaste joined
[11:09] *** xdbr joined
[11:09] *** TheDir_ joined
[11:09] *** jeek joined
[11:09] *** gypsydave5 joined
[11:09] *** jast joined
[11:10] *** mtj__ joined
[11:10] *** mtj__ left
[11:10] *** mtj_ left
[11:10] *** jervo joined
[11:11] *** xinming left
[11:11] *** mtj_ joined
[11:11] *** xinming joined
[11:14] *** mcmillhj left
[11:17] *** ItayAlmog left
[11:19] *** xinming_ joined
[11:19] *** mcmillhj joined
[11:22] *** xinming left
[11:22] *** andreoss joined
[11:22] *** lizmat joined
[11:24] *** mcmillhj left
[11:25] *** iH2O joined
[11:29] <andreoss> m: multi MAIN() { die $?USAGE }; multi MAIN(Str :$option) { say "hi "};

[11:29] <camelia> rakudo-moar d2b115: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$?USAGE' is not declared␤at <tmp>:1␤------> 3multi MAIN() { die 7⏏5$?USAGE }; multi MAIN(Str :$option) { sa␤»

[11:29] <andreoss> m: multi MAIN() { die &?USAGE }; multi MAIN(Str :$option) { say "hi "};

[11:29] <camelia> rakudo-moar d2b115: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    ?USAGE used at line 1␤␤»

[11:31] <andreoss> m: multi MAIN() { die $*USAGE }; multi MAIN(Str :$option) { say "hi "};

[11:31] <camelia> rakudo-moar d2b115: OUTPUT«hi ␤»

[11:32] <andreoss> m: multi MAIN() { die $*USAGE }; multi MAIN(Str :$option) { say $option.perl };

[11:32] <camelia> rakudo-moar d2b115: OUTPUT«Str␤»

[11:32] <andreoss> m: multi MAIN() { die $*USAGE }; multi MAIN(Str:D :$option) { say $option };

[11:32] <camelia> rakudo-moar d2b115: OUTPUT«Dynamic variable $*USAGE not found␤  in sub MAIN at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:33] <andreoss> how do i get this usage message? 

[11:35] *** woolfy left
[11:36] *** iH2O left
[11:36] *** fridim___ left
[11:39] *** woolfy joined
[11:40] *** Fleurety left
[11:40] *** nwc10 joined
[11:47] *** telex left
[11:48] *** telex joined
[11:49] *** _4d47 joined
[11:52] *** fridim___ joined
[11:52] <_4d47> mm how can this method gets called ? https://github.com/rakudo/rakudo/blob/nom/src/core/Array.pm#L419

[11:53] *** mcmillhj joined
[11:55] <TheLemonMan> _4d47, Array.new(VV, :shape(NN))

[11:57] *** MasterDuke joined
[11:57] *** lizmat left
[11:58] *** mcmillhj left
[11:59] <_4d47> TheLemonMan: aww thanks, my eyes where reading Mu:D: instead of Mu:D 

[11:59] *** nwc10 left
[11:59] <MasterDuke> andreoss: $?USAGE isn't implemented yet

[11:59] <MasterDuke> and i believe MAIN will just call USAGE() if it can't dispatch. there's an autogenerated one, but if you create your own sub USAGE it will get called instead

[12:01] *** lizmat joined
[12:04] *** woolfy left
[12:06] *** mcmillhj joined
[12:10] *** elohmrow joined
[12:11] *** mcmillhj left
[12:14] *** woolfy joined
[12:15] *** fridim___ left
[12:20] *** woolfy left
[12:22] *** sufrostico joined
[12:23] *** _4d47 left
[12:27] <RabidGravy> boom

[12:28] <MasterDuke> big bada boom?

[12:28] <RabidGravy> it's amazing how shutting down all those spreadsheet instances frees up memory

[12:28] <RabidGravy> anyhow reboot

[12:29] *** ab6tract joined
[12:29] *** RabidGravy left
[12:30] * ab6tract clickbaits http://blogs.perl.org/users/ab5tract/2016/09/introducing-terminalprint.html

[12:32] *** AndyBotwin left
[12:35] *** faubi left
[12:37] *** lizmat left
[12:38] *** lizmat joined
[12:44] <TimToady> bl 20

[12:45] *** Actualeyes left
[12:49] <Xliff> \o

[12:49] <Xliff> Morning all.

[12:49] <Xliff> https://gist.github.com/Xliff/fceb9354193e3b2d1d9c1968b991d6ec

[12:49] <Xliff> ^ halp!

[12:49] *** pierre_ joined
[12:51] <Xliff> Oh. Lemme update that a sec. Because it's a weird edge case.

[12:53] <Xliff> OK. Updated

[12:55] <nine> Xliff: looks terrible (the error message)

[12:56] <nine> Xliff: you could try package TheTest { ... }; sub EXPORT(+@a) { ... }

[12:57] <nine> i.e. make sure TheTest is defined before you refer to it

[12:58] <ab6tract> shouldn't EXPORT be inside the respective package?

[12:58] *** mcmillhj joined
[12:58] <nine> It belongs to the compilation unit and has to be in the top level.

[12:58] <nine> AFAIK

[12:59] <Xliff> nine: OK, one sec.

[12:59] *** mcmillhj left
[12:59] *** smls joined
[13:00] <ab6tract> One day I'm going to have to learn me some of the distinctions between a compilation unit vs a file vs a 'unit module'

[13:00] <Xliff> nine: No change.

[13:00] <ab6tract> nine: so then if i do a 'unit class', the EXPORT will work because that's the top level of the compunit?

[13:00] <Xliff> ab6tract: The original draft of the code had it that way, but that wouldn't parse.

[13:01] <El_Che> ab6tract: looks empty

[13:01] <Xliff> ab6tract: Or gave strange errors, depending.

[13:01] <ab6tract> El_Che: the blog post?

[13:01] <El_Che> ab6tract: yes

[13:01] <ab6tract> El_Che: try a refresh please

[13:02] <ab6tract> that was my fault

[13:02] <El_Che> better :)

[13:02] <Xliff> nine: Another weird thing... if I drop the signature from EXPORT, it still fails in the same manner.

[13:02] <Xliff> For all 3 cases.

[13:02] <ab6tract> thanks for pointing it out :)

[13:04] <Xliff> Another odd thing: If I return an empty map from EXPORT, the error message goes away for all cases.

[13:04] <Xliff> Should I RT?

[13:04] <ab6tract> Xliff: I am using EXPORT::DEFAULT like this https://github.com/ab5tract/Terminal-Print/blob/master/lib/Terminal/Print.pm6#L324

[13:04] <ab6tract> and it seems to be working so far 

[13:05] <Xliff> ab6tract: Yes, but is that a map definition or a sub?

[13:06] *** mcmillhj joined
[13:06] <Xliff> On first glance, looked like a map. I will try.

[13:06] <ab6tract> it is neither, AFAICT :)

[13:06] <ab6tract> it seems to be autotriggered on import

[13:07] <ab6tract> i'm just doing some binding into the OUR:: namespace there

[13:08] <Xliff> SSDD

[13:08] <Xliff> (still getting the error)

[13:09] *** woolfy joined
[13:12] *** RabidGravy joined
[13:13] <ab6tract> Xliff: have you updated the gist?

[13:15] *** cdg joined
[13:15] <Xliff> About to. I think I found a work around.

[13:16] *** maerciba5 joined
[13:16] *** maerciba5 left
[13:17] <Xliff> Updated.

[13:20] <Xliff> Yup! Workaround applied to original code and is working! \o/

[13:23] *** mr-foobar joined
[13:25] *** elohmrow left
[13:25] *** skids joined
[13:26] *** Actualeyes joined
[13:28] *** sakuya left
[13:28] <ab6tract> Xliff++

[13:29] <Xliff> The more I write in P6, the more I find that the block notation is more reliable than using "unit ..."

[13:30] <mst> hmm

[13:30] <mst> this sort of sounds like maybe a case for finding all the tests using block notation and making sure there's a unit version

[13:30] *** MilkmanD1n left
[13:31] <Xliff> ¯\_(ツ)_/¯

[13:31] <Xliff> m/...(>.<)...m/

[13:32] <Xliff> Well, after this I get to move to nqp....

[13:32] *** MilkmanDan joined
[13:33] <Xliff> Still worried that's a bit over my head at this point, but hey...

[13:33] <TimToady> sounds to me more like problems with how EXPORT works; 'unit' is conceptually very simple

[13:37] <TimToady> unit should probably be disallowing those declarations before it, however, since the point of unit is to wrap the entire file as if it were a block declaration

[13:39] <jnthn> Does unit sneakily introduce a lexical scope?

[13:39] <TimToady> probably

[13:40] <jnthn> That could be surprising in that a sub EXPORT is meant to be located in UNIT

[13:40] <TimToady> it might be assuming wrongly that it's just about the first thing in the file

[13:40] <jnthn> So folks doing `unit class Foo; sub EXPORT() { ... }` could get caught out

[13:40] <TimToady> 'tis possible

[13:41] <TimToady> would have to glare at the code some time after I wake up :)

[13:41] <RabidGravy> heads up to anyone using chrome on FC24 (I think timotimo does,) if it offers an update of it, you are better just uninstalling and re-installing first

[13:51] <Xliff> My original version of the module this popped up in had EXPORT located after the "unit" declaration. 

[13:52] <Xliff> I could never get that to work and the error messages were less than helpful when trying to figure out a solution.

[13:52] <Xliff> Should I RT this issue?

[13:52] <Xliff> Here's is a writeup, with solution... https://gist.github.com/Xliff/fceb9354193e3b2d1d9c1968b991d6ec

[13:53] *** bjz_ left
[13:55] <skids> There is RT#127305

[13:55] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127305

[13:56] <skids> Lots of metaish modules already forgo the unit form.

[13:56] <TimToady> there is precisely one test of 'sub EXPORT', and it doesn't involve 'unit'

[13:56] <TimToady> it pulls in a file that reads:

[13:56] <TimToady> class Foo {}

[13:56] <TimToady> sub EXPORT(|){ { 'Bar' => Foo } }

[13:57] <TimToady> which seems...a bit rudimentary

[14:00] <RabidGravy> not exhaustive for sure

[14:05] *** zacts joined
[14:10] <TimToady> jnthn: yes, it calls <.newpad>, which it should probably avoid for a 'unit' declaration

[14:13] * TimToady experiments with the simple fix first to see how much stuff blows up

[14:13] *** mcmillhj left
[14:13] *** mcmillhj joined
[14:13] *** khw joined
[14:15] <TimToady> .oO(phase one bug trials)

[14:16] <TimToady> oh, heh, if I refrain from pushing a lexpad, I should also refrain from popping it...

[14:17] <timotimo> RabidGravy: can you explain that a bit more? the chrome thing?

[14:17] <timotimo> also, they no longer call it "Fedora Core" ;)

[14:18] *** acrussell joined
[14:18] <TimToady> Fedora Not-So-Core?

[14:19] *** bstamour left
[14:19] <timotimo> fedora shell?

[14:19] <timotimo> fedora fruit?

[14:19] <RabidGravy> timotimo, the upgrade seems to mess up the chain of links for the "alternatives" resulting in it disappearing completely

[14:21] <timotimo> hah, that's fun

[14:22] <TimToady> well, simple fix is not simple, insofar as it blows up tools/build/install-core-dist.pl

[14:22] <timotimo> :|

[14:22] <TimToady> maybe a 'make clean' issue

[14:23] <TimToady> but if there's code that depends on a unit's OUTER meaning UNIT, we have a problem

[14:27] <TimToady> we have a problem

[14:28] <TimToady> getting a push on an NQPMu, probably something assuming OUTER gets to UNIT somewhere, I'm guessing

[14:28] *** Actualeyes left
[14:29] <TimToady> well, this will take at last another cuppa

[14:29] *** Actualeyes joined
[14:32] *** canopus left
[14:33] <mspo> ugh alternatives

[14:35] <timotimo> with alternatives it seems like i'm always getting a 32bit wine binary but a 64bit wineserver binary served, or the other way around

[14:35] <timotimo> every single time i want to run a windows program i have to shuffle the two around

[14:35] <timotimo> it's hilariously bad

[14:35] <timotimo> but perhaps it's because i get at least one wine update between two events of wanting to run any windows program 

[14:35] *** nwc10 joined
[14:36] *** canopus joined
[14:40] *** MetaZoffix joined
[14:40] <andreoss> m: my $x = { $_++ }; $_ = 10 ;$x();$x();say $_;

[14:40] <camelia> rakudo-moar 6dab6b: OUTPUT«12␤»

[14:40] <andreoss> m: my $x = sub { $_++ }; $_ = 10 ;$x();$x();say $_;

[14:40] <camelia> rakudo-moar 6dab6b: OUTPUT«10␤»

[14:41] <timotimo> yeah, bare blocks don't get their own $_

[14:41] <timotimo> m: my $x = -> { $_++ }; $_ = 10 ;$x();$x();say $_;

[14:41] <camelia> rakudo-moar 6dab6b: OUTPUT«12␤»

[14:41] <timotimo> like pointy blocks

[14:45] <TimToady> well, fixed the NQPMu.push, but now install-core-dist merely runs forever

[14:46] *** zacts left
[14:47] *** pmurias joined
[14:47] <nwc10> lizmat: domm is down to 5 minutes, so would be useful if your workshop could get ready to return

[14:47] <nwc10> (he's still speaking - not yet time to invade the room)

[14:48] <lizmat> ok, I put out the message

[14:49] <pmurias> ab5tract: using 'no precompilation' seems horrible

[14:49] <yoleaux> 00:51Z <ugexe> pmurias: re: `zef clone Foo::Bar` question from last week - this mostly exists already using either `zef fetch Foo::Bar` or `zef look Foo::Bar`. If it happens that Foo::Bar resolves to a .tar.gz (like from cpan) and not a git uri it will extract it for you as well

[14:51] *** lizmat left
[14:51] * pmurias is also slightly upset people are using Terminal:: instead of the traditional Term::

[14:52] <TimToady> I carped about that at the time, but nothing changed

[14:52] <timotimo> pmurias: i think we "recently" got someone ranting about how Term collides with the term "term"

[14:52] <timotimo> though i think if you had a term, you'd term it P6::Term or something, that'd be a better term for term

[14:53] <TimToady> Term vs term is not even the same case, if people are worried about grammar collisions

[14:54] <TimToady> "term" is such a generic term that I don't see any collision with people wanting to use that for a name root

[14:54] <timotimo> what, modules are case sensitive? why can't i install ACME::MEOW :(

[14:54] *** wamba left
[14:55] <TimToady> and Term has a long history of meaning "terminal" at the root of the namespace

[14:56] <TimToady> next thing you know, we'll all be starting our programs with "IDENTIFICATION DIVISION" or so, just because longer is always clearer...

[14:56] <timotimo> "THIS IS THE PLACE WHERE THE NAME OF THE PROGRAM GOES, BEN. PLEASE PUT THE NAME HERE THERE IS NO SUCH THING AS A PROGRAM NAME DIVISION GEEZ"

[14:57] *** woolfy left
[14:57] <TimToady> and PERFORM is obviously better than DO, and COMPUTE is obviously better than, well, nothing

[14:57] *** sufrostico left
[14:58] <timotimo> every mathematical expression needs to start with COMPUTE

[14:58] <DrForr> STORING RESULT INTO...

[14:58] <[Coke]> WE HAVE THE BEST PROGRAM NAMES.

[14:58] * timotimo afkbbl

[14:58] <TimToady> anyway, I agree with pmurias++ here

[14:58] *** lizmat joined
[14:58] <DrForr> JOY IDENTIFICATION DIVISION

[14:59] <ugexe> just use the sha1 as the module name

[15:02] <pmurias> ugexe: unfortunately the modules end up as sha1 in stacktraces anyways

[15:04] <pmurias> ab5tract: the only thing 'no precompilation' in Terminal::Print::Dimensions seems to be doing is wasting CPU time

[15:05] *** nwc10 left
[15:07] *** canopus left
[15:09] *** grondilu left
[15:11] <MetaZoffix> m: class Meow { has $!s = Supplier.new; has $.sup = $!s.Supply; method do-things { $!s.emit: $_ for <a b c>; } }; react { with Meow.new { whenever .sup { $^m.say }; .do-things;  }; done }

[15:11] <camelia> rakudo-moar e8d0d0: OUTPUT«a␤b␤c␤»

[15:12] <MetaZoffix> Any idea why this isn't printing the stuff with whenevers in my code even tho it works in the example above? I got my react block https://github.com/zoffixznet/na/blob/master/bin/release/cli-runner.p6#L6 and my Meow class that emits messages https://github.com/zoffixznet/na/blob/master/lib/NA/Releaser.pm6#L33

[15:13] <MetaZoffix> And in the output I do get output from `say "Got stuff: $mes";` that's a line above the emits, but the whenevers don't react and don't print anything

[15:13] *** Actualeyes1 joined
[15:13] * [Coke] tries to figure out his bailador/start problem now that the latest crisis is over

[15:14] *** Actualeyes left
[15:14] *** canopus joined
[15:17] <MetaZoffix> And even if I put $!shell-messenger.emit: "built stuff!!!!!"; above this `given` I get the message received :S weird https://github.com/zoffixznet/na/blob/master/lib/NA/Releaser.pm6#L19

[15:17] *** domidumont left
[15:18] <smls> m: say (1..*).rotor(1..*)[^5];  # Floyd's triangle

[15:18] <camelia> rakudo-moar e8d0d0: OUTPUT«((1) (2 3) (4 5 6) (7 8 9 10) (11 12 13 14 15))␤»

[15:18] <smls> m: say (1..*).rotor(1...*)[^5];  # Floyd's triangle

[15:18] *** domidumont joined
[15:19] <smls> ^^ Why does it work with a Range argument but not a Seq?

[15:19] <camelia> rakudo-moar e8d0d0: OUTPUT«(timeout)»

[15:19] <smls> Does it have to do with how parameters are passed to routines, or does `rotor` mishandle it?

[15:20] <MetaZoffix> s: (1..*), "rotor", \(1...*)

[15:20] <SourceBaby> MetaZoffix, Something's wrong: ␤ERR: Type check failed in binding to &code; expected Callable but got Method+{<anon|70743856>} (Method+{<anon|7074385...)␤  in sub do-sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 42␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 29␤  in block <unit> at -e li

[15:20] <MetaZoffix> s: (1..*), "rotor", \(1..*)

[15:20] <SourceBaby> MetaZoffix, Something's wrong: ␤ERR: Unhandled exception: While looking for '/home/zoffix/services/sourceable/building-perl6/perl6.moarvm': no such file or directory␤

[15:20] <MetaZoffix> great

[15:20] <MetaZoffix> s: (1..*), "rotor", \(1..*)

[15:20] <SourceBaby> MetaZoffix, Something's wrong: ␤ERR: Unhandled exception: Missing or wrong version of dependency 'src/Perl6/Grammar.nqp' (from 'gen/moar/m-main.nqp')␤   at <unknown>:1  (/home/zoffix/services/sourceable/building-perl6/perl6.moarvm:<dependencies+deserialize>)␤

[15:20] *** domidumont left
[15:21] *** domidumont joined
[15:21] <Xliff> smls: WAG - Eager vs lazy?

[15:21] <MetaZoffix> m: my $w = 1...*; say $w.list[^5]

[15:21] <MetaZoffix> there's yo problem

[15:21] <camelia> rakudo-moar e8d0d0: OUTPUT«(timeout)»

[15:21] <Xliff> m: my $w = 1..%; say $w.list[^5]

[15:22] <camelia> rakudo-moar e8d0d0: OUTPUT«(Nil Nil Nil Nil Nil)␤»

[15:22] <[Coke]> m: my $w := 1...*; say $w.list[^5]

[15:22] <camelia> rakudo-moar e8d0d0: OUTPUT«(1 2 3 4 5)␤»

[15:22] <Xliff> m: my $w = 1..*; say $w.list[^5]

[15:22] <camelia> rakudo-moar e8d0d0: OUTPUT«(1 2 3 4 5)␤»

[15:22] <MetaZoffix> smls: rotor takes a List:D, so for Seqs it goes through Any, which calls .list which loses laziness

[15:22] <Xliff> \o/

[15:22] <Xliff> My WAG was right!?

[15:22] <MetaZoffix> smls: it may or may not be an LTA :) feel free to rakudobug

[15:23] <smls> m: say (1..*).^find_method("rotor").signature

[15:23] <camelia> rakudo-moar e8d0d0: OUTPUT«($: |c is raw)␤»

[15:23] <timotimo> "WAG"?

[15:23] <Xliff> Wild Assed Guess

[15:23] <timotimo> oh

[15:23] <smls> MetaZoffix: Where does it say it takes a List:D?

[15:23] <Xliff> =)

[15:24] <MetaZoffix> s: (1..*), "rotor", \(1..*)

[15:24] <SourceBaby> MetaZoffix, Something's wrong: ␤ERR: Type check failed in binding to &code; expected Callable but got Method+{<anon|73357248>} (Method+{<anon|7335724...)␤  in sub do-sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 42␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 29␤  in block <unit> at -e li

[15:24] <MetaZoffix> I hate that bug

[15:24] <MetaZoffix> smls: in the source code: https://github.com/rakudo/rakudo/blob/nom/src/core/List.pm#L1152

[15:25] <smls> m: my $w = (1...*); say $w.list[^5]

[15:25] <MetaZoffix> smls: oh, wait, I'm even looking at the wrong thing. It's the divisors that are the problem >_<

[15:25] <camelia> rakudo-moar e8d0d0: OUTPUT«(1 2 3 4 5)␤»

[15:25] <smls> ^^ MetaZoffix: Your timeout earlier was because missing parens

[15:25] <MetaZoffix> right

[15:26] *** lostinfog joined
[15:26] <MetaZoffix> m: sub foo ( *@what ) { say @what[^5] }( 1...* )

[15:26] <camelia> rakudo-moar e8d0d0: OUTPUT«(1 2 3 4 5)␤»

[15:26] <MetaZoffix> m: sub foo ( *@what ) { say @what.is-lazy }( 1...* )

[15:27] <MetaZoffix> :/

[15:27] <camelia> rakudo-moar e8d0d0: OUTPUT«(timeout)»

[15:27] <MetaZoffix> m: sub foo ( *@what ) { say @what.is-lazy }( 1...* )

[15:27] <timotimo> potentially only works with +@?

[15:27] <camelia> rakudo-moar e8d0d0: OUTPUT«(timeout)»

[15:27] <smls> That one seems related to RT #128201

[15:27] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128201

[15:28] <MetaZoffix> m: sub foo ( +@what ) { say @what.is-lazy }( 1...* )

[15:28] <camelia> rakudo-moar e8d0d0: OUTPUT«True␤»

[15:28] <MetaZoffix> bisect: m: sub foo ( *@what ) { say @what.is-lazy }( 1...* )

[15:28] <MetaZoffix> oh shit.. that was probably a bad idea

[15:28] <MetaZoffix> bisect: m: Promise.in(2).then: {exit}; sub foo ( *@what ) { say @what.is-lazy }( 1...* )

[15:29] <MetaZoffix> smls: seems to be yeah. 'cause .rotor is checking .is-lazy: https://github.com/rakudo/rakudo/blob/nom/src/core/List.pm#L1154

[15:29] * MetaZoffix &

[15:30] *** MetaZoffix left
[15:32] *** bisectable6 left
[15:33] *** grondilu joined
[15:33] *** MetaZoffix joined
[15:33] *** zakharyas left
[15:33] <MetaZoffix> I got distracted and totally forgot that I originally came here with my emit issue :) Any idea why it's not emitting?

[15:36] <timotimo> what isn't emitting?

[15:37] <MetaZoffix> timotimo: my code, about two screenfuls above. http://irclog.perlgeek.de/perl6/2016-09-02#i_13139346

[15:37] <timotimo> thank you

[15:37] <MetaZoffix> Even though small sample works... even though doing $!shell-messenger.emit: $mes; in another method works. Even though putting "say $mess" in the original method with .emit also prints stuff :S

[15:39] *** domidumont left
[15:39] *** bioduds joined
[15:41] * timotimo very distracted

[15:41] *** lizmat left
[15:48] <MetaZoffix> figured it out by writing it like this: https://gist.github.com/zoffixznet/ee5e2a1fdd4634711f03df60f79b5831

[15:48] <awwaiid> hoelzro: Add yourself to the STL unsession I made for Rakudo Perl 6, https://github.com/strangeloop/StrangeLoop2016/wiki/Unsessions

[15:48] <MetaZoffix> Seems it's getting its head screwed when the method calls are inside the react{}

[15:48] <awwaiid> and anyone else going to StrangeLoop as well :)

[15:48] <MetaZoffix> Maybe I should try a Channel instead of Supplies in here

[15:54] *** bjz joined
[15:55] *** sakuya joined
[15:56] *** bisectable6 joined
[15:56] <MetaZoffix> Thanks for the help!

[15:56] *** MetaZoffix left
[16:04] *** zacts joined
[16:05] *** Guest58374 left
[16:15] *** pierre_ left
[16:16] *** pierre_ joined
[16:16] <ab6tract> pmurias: then someone fixed a bug in precompilation, because previous editions of this library would get a single value for terminal width and height

[16:16] <ab6tract> pmurias: WRT to 'term' vs 'terminal' -- sorry, I cannot disagree more

[16:17] <ab6tract> single value for each of width and height, which will be wrong if the terminal is resized after precompilation

[16:17] <ab6tract> if you find that behavior to be in error, please submit an issue

[16:17] <ab6tract> I think it would be a crying shame if P6 ended up with P5's namespacing by fiat

[16:20] *** pierre_ left
[16:21] *** Actualeyes1 left
[16:21] *** mcmillhj left
[16:24] *** domidumont joined
[16:25] <ab6tract> after some initial testing, I am seeing that removing no precompilation does indeed have the undesired effect of pinning the grid size of the first invocation

[16:25] <ab6tract> pmurias: if you find it behaving otherwise, I would be interested to know about it

[16:27] <[Coke]> .seen supernovus

[16:27] <yoleaux> I saw supernovus 22 Apr 2016 23:27Z in #perl6: <supernovus> Well, I'm going to have to run. Have a great day/night everyone. I hope to fix up some of my long neglected libraries at some point when I'm not completely overloaded with work! :-)

[16:28] *** dami left
[16:28] <ab6tract> further, it seems to settle the size at precompilation time, which means it isn't even accurate to the size you had when you first ran it

[16:28] <[Coke]> .seen ufobat

[16:28] <yoleaux> I saw ufobat 27 Aug 2016 06:53Z in #perl6: <ufobat> yay :D

[16:31] *** mcmillhj joined
[16:37] *** mcmillhj left
[16:37] *** zacts_pi joined
[16:39] *** zacts left
[16:41] <hoelzro> awwaiid: done!

[16:46] <tailgate> Is Pod::To::HTML a library that comes with rakudo-star? I tried deleting all copies of it on my computer, but it's still loading it

[16:46] <tailgate> how do I find where it's getting the file from?

[16:50] *** zacts_pi left
[16:50] <ab6tract> .tell pmurias I've tried to make the the 'no precompilation' hit as minimal as possible. are you using a terminal client which automatically updates COLUMNS and ROWS in the environment for you as you resize?

[16:50] <yoleaux> ab6tract: I'll pass your message to pmurias.

[16:50] <timotimo> rakudo has Pod::To::Text, nothing else in Pod::

[16:51] *** mcmillhj joined
[16:54] *** MilkmanDan left
[16:56] *** mcmillhj left
[17:03] *** mcmillhj joined
[17:03] <bioduds> hey guys

[17:04] <bioduds> im not able to rua a one liner

[17:04] <bioduds> only a 2 liner

[17:04] <bioduds> this is the best I can do so far

[17:04] <bioduds> http://67.205.136.118/install.sh

[17:05] *** sakuya left
[17:05] *** sufrostico joined
[17:05] <timotimo> how does it not work?

[17:05] <timotimo> i mean, what's wrong?

[17:07] *** mcmillhj left
[17:08] <timotimo> hm. you set PREFIX, is that enough? i thought we have to --prefix in the configure line, too

[17:08] <timotimo> and if you put stuff into /usr/local, it's not going to be able to install anything into the prefix

[17:09] <timotimo> because you're asking the user to run it as "sh" not as "sudo sh"

[17:09] <timotimo> and also:

[17:09] <timotimo> compiling and such shouldn't be done as root

[17:09] <timotimo> so maybe it'd be better to extract tha building into three steps so we can "sudo make install" only

[17:09] *** mcmillhj joined
[17:10] <bioduds> --PREFIX ?

[17:10] <bioduds> how so?

[17:10] <timotimo> no, --prefix

[17:10] *** firstdayonthejob joined
[17:10] <timotimo> i've never tried to use the prefix env var

[17:11] <timotimo> also, i think if you don't "export" it, it won't land in the environment anyway

[17:11] <bioduds> i believe that lies the magic of making all work, but I really dont quite understand what it does

[17:11] *** MilkmanDan joined
[17:12] <bioduds> what im testing now is to run the following line: curl http://67.205.136.118/install.sh | sh; . ~/rakudo/setpath.sh

[17:12] <bioduds> as it would actually be 2 lines in one

[17:12] <bioduds> that would be the 'ONE' liner

[17:12] <timotimo> ok. at what point does it break?

[17:12] <bioduds> it does not break

[17:12] <bioduds> it installs fine

[17:13] <bioduds> you just need to . ~/rakudo/setpath.sh manually after

[17:13] <timotimo> oh

[17:13] <bioduds> which Im hoping to have already on with ;. ~/rakudo/setpath.sh

[17:14] <bioduds> testing now, if works, should be it

[17:17] *** pierre_ joined
[17:20] <bioduds> WORKED

[17:20] <bioduds> ONE LINER IS HERE

[17:20] <bioduds> its actually a 2-liner

[17:20] <bioduds> so

[17:21] <bioduds> right now you may do: curl http://67.205.136.118/install.sh | sh ;. ~/rakudo/setpath.sh

[17:21] <bioduds> and it will install perfectly

[17:22] *** pierre_ left
[17:24] *** ab6tract left
[17:24] <mspo> that looks totally safe

[17:24] <mspo> sudo it?

[17:24] <bioduds> no need

[17:24] <bioduds> simply run it

[17:25] <mspo> was joke :)

[17:25] <bioduds> oh

[17:25] <bioduds> :)

[17:25] <bioduds> now, there need to be SSL on to have it on https://install.perl6.org

[17:25] <bioduds> making the 'one liner': curl https://install.perl6.org | sh;. ~/rakudo/setpath.sh

[17:26] <bioduds> which will work like a charm

[17:26] <bioduds> anyone would care to test it on a mac?

[17:26] <sjohnson> let's encrypt!

[17:26] <bioduds> i believe it will work on mac too

[17:27] <mspo> The certificate is only valid for the following names: design.perl6.org, doc.perl6.org, docs.perl6.org, modules.perl6.org, perl6.org, tablets.perl6.org, www.p6c.org, www.perl6.org 

[17:27] <timotimo> we've already got SSL for the rest of perl6.org, no?

[17:27] <bioduds> im gonna start testing on a few other linux distros as well

[17:28] <mspo> new firefox doesn't have a way to actually view the cert

[17:28] <mspo> that's really annoying

[17:28] <sjohnson> it does, you just gotta dig deeper.

[17:28] <mspo> I just get the www page from install

[17:28] <timotimo> protect the innocent users who don't know what ssl is

[17:29] <sjohnson> design.perl6.org, doc.perl6.org, docs.perl6.org, modules.perl6.org, perl6.org, tablets.perl6.org, www.p6c.org, www.perl6.org

[17:29] <sjohnson> looks like my list matches mspo.

[17:30] <bioduds> im going to put up a test list and once its tested on all ill send you guys the table

[17:31] *** acrussell left
[17:37] <japhb> ab5tract: Thank you for writing Terminal::Print.  I've been putting off doing a couple projects (both work and personal) because I didn't feel like a giant yak shave.  You've just removed several layers of yak hair.  :-)

[17:38] <timotimo> do we have a certificate behind where we download the rakudo star tarball from?

[17:40] *** acrussell joined
[17:46] *** domidumont left
[17:47] <bioduds> no

[17:47] <bioduds> there should be

[17:48] <bioduds> https://rakudo.org/downloads/star/rakudo-star-2016.04.tar.gz instead of http://rakudo.org/downloads/star/rakudo-star-2016.04.tar.gz

[17:51] <mspo> The certificate is only valid for the following names: host.pmichaud.com, www.host.pmichaud.com 

[17:58] *** leont joined
[17:58] *** acrussell left
[18:03] <timotimo> damn

[18:03] *** MorayJ left
[18:03] *** kyclark joined
[18:03] *** zakharyas joined
[18:04] <bioduds> this whole ssl mob is gruesome

[18:05] <mspo> where is perl6.org hosted?

[18:05] *** labster joined
[18:05] <bioduds> tests on ubuntu 14.04 LTS 64 bits with 2 cpus and 2gb ram ran ok

[18:05] <mspo> p6c

[18:05] <mspo> why isn't rakudo just uploading to there?

[18:05] <bioduds> testing now with 14.04 1 cpu 1 gb ram

[18:05] <bioduds> digital ocean vps's

[18:05] <bioduds> gonna try them all

[18:06] <bioduds> writing a sheet with results too

[18:07] <bioduds> wow

[18:07] <bioduds> 1gb failed

[18:07] <bioduds> this install script is greedy man

[18:08] <DrForr> Perl6 ain't Lua.

[18:09] <mspo> yeah

[18:09] <bioduds> testing CentOS 7.2 x64 2gb ram 2 cpus dig. ocean

[18:10] <timotimo> yeah, the core setting is kind of big

[18:12] <kyclark> Given a list of strings, how would I efficiently find all those starting with a given list of prefixes?

[18:12] <kyclark> my @list = <foo bar baz quux>

[18:12] <kyclark> my @want = <fo ba>

[18:12] <kyclark> I feel something like " @list ~~ any(@want)"

[18:13] <kyclark> Actually, I just need to do one string at a time, e.g., "foo ~~ any(@want)"

[18:13] *** TestNinja joined
[18:13] <kyclark> @want.map({ 'foo' ~~ /^$_/ })

[18:15] <TestNinja> m: my @list = <foo bar baz quux>; my @want = <fo ba>; say @want.grep: *.starts-with: @list.any

[18:15] <camelia> rakudo-moar e8d0d0: OUTPUT«()␤»

[18:15] <TestNinja> orly

[18:15] <TestNinja> m: my @list = <foo bar baz quux>; my @want = <fo ba>; say @want.grep: /^@list/

[18:15] <camelia> rakudo-moar e8d0d0: OUTPUT«()␤»

[18:15] <TestNinja> oh right :)

[18:16] <TestNinja> m: my @list = <foo bar baz quux>; my @want = <fo ba>; say @list.grep: /^@want/

[18:16] <camelia> rakudo-moar e8d0d0: OUTPUT«(foo bar baz)␤»

[18:16] <TestNinja> m: my @list = <foo bar baz quux>; my @want = <fo ba>; say @list.grep: *.starts-with: @want.any

[18:16] <camelia> rakudo-moar e8d0d0: OUTPUT«(foo bar baz)␤»

[18:16] <TestNinja> \o/

[18:17] <kyclark> Let me soak that in for a bit.

[18:22] *** leont left
[18:26] <dj_goku> Is anyone else having issues building 2016.08.1?

[18:27] <TestNinja> dj_goku: what sort of issues?

[18:27] <kyclark> TestNinja, that's some cool stuff.  Thanks.

[18:27] *** sjoshi joined
[18:27] <TestNinja> Any time.

[18:27] <dj_goku> TestNinja: I can't scroll back give me a few minutes to try and rebuild it.

[18:27] *** sjoshi left
[18:27] <dj_goku> currently trying 2016.07.1

[18:29] <dj_goku> hmm might be a memory issue: make: *** [CORE.setting.moarvm] Error 137

[18:29] <dj_goku> Command failed (status 512): make

[18:29] <TestNinja> You need around 2GB for RAM+swap

[18:30] <dj_goku> hmm

[18:30] *** sjoshi joined
[18:31] <bioduds> yep, around 2gb ram

[18:31] <bioduds> from what my tests are showing

[18:32] <dj_goku> well that stinks lol

[18:32] <TestNinja> Just resize to get more swap :)

[18:33] <TestNinja> I built on boxes with 1GB RAM and large spawp

[18:33] <dj_goku> this is a production box. :D

[18:33] *** committable6 left
[18:34] <TestNinja> ooopppss....

[18:34] <TestNinja> murdered committable6 with committable6: 2016.04 m: say "meow"; <a b c d b>.rotor: 1 => -2;

[18:35] <Xliff> You bastid!

[18:35] <moritz> TestNinja: it's only murder if the dead one is of the same species as you. So you're a bot? :-)

[18:35] <TestNinja> I guess it's not comming back :/

[18:35] <Xliff> Sorry. South Park ref. I couldn't help it.

[18:35] <dj_goku> After a few things finish running I'll cycle a service that is eating some memory

[18:35] <TestNinja> moritz: you never know ;)

[18:38] <Xliff> "<TestNinja> m: my @list = <foo bar baz quux>; my @want = <fo ba>; say @list.grep: *.starts-with: @want.any"

[18:38] <Xliff> Syntax Yum!

[18:38] *** domidumont joined
[18:38] <bioduds> not sure I can resize swap on Digital Ocean VPSs

[18:39] <mspo> do you have shell access?

[18:40] <bioduds> also, main reason for this one-liner p6 installer is to help out for beginners. so, we dont want to tell beginners they should actually go and change swap

[18:40] <bioduds> yes, shell access

[18:40] <mst> right, 1Gb isn't enough to build rakudo

[18:40] <bioduds> out of the box, 2gb is needed

[18:40] <mspo> bioduds: just make a swapfile

[18:41] <bioduds> in docs, there could be a full explanation on how to change swap in order to make it install on 1gb ram 

[18:41] <mspo> dd if=/dev/zero of=/var/db/swap0 bs=1M count=1024 ; mkswap /var/db/swap0; swapon /var/db/swap0

[18:42] <bioduds> I'll use this mspo after I test all linux distros i can, thanks :D

[18:42] <bioduds> currently on centos 7.2 2b ram 64 bits

[18:43] <bioduds> it is installing

[18:43] <bioduds> all need to have build-essential set before

[18:43] <bioduds> sudo apt install build-essential on ubutnu

[18:43] <bioduds> sudo yum groupinstall 'Development Tools' on centos

[18:43] <mst> I think ~development also works

[18:44] <bioduds> im not sure how to check this in script

[18:44] <bioduds> if I manage to have it tested

[18:44] <bioduds> I can set a line to install it if it is not there I guess

[18:45] *** cdg left
[18:46] <avuserow> bioduds: better is to check if the tool exists, maybe something like `command -v make >/dev/null || (echo no make && exit 1)`

[18:46] <bioduds> ok, ill try that

[18:46] <bioduds> cause if i can do this, the one-liner will work out of the box

[18:47] <bioduds> since perl5 ships with main linux distros

[18:47] <bioduds> i believe it ships with mac as well

[18:47] *** andreoss left
[18:49] *** domidumont left
[18:50] *** zakharyas left
[18:51] <bioduds> min 1gb swap would be what? 1024?

[18:51] *** dha joined
[18:51] <bioduds> there could be a min reqs telling 2gb ram or 1gb min. 1024Mb swap

[18:52] <bioduds> also, 512 RAM and swap 2048 would work?

[18:54] <[Coke]> rakudo isn't on perl6.org because the Rakudo Perl 6 Compiler is a different thing from the Perl 6 Language Specification.

[18:54] <[Coke]> and this underscores that difference.

[18:55] *** leont joined
[18:56] <bioduds> centos installed great

[18:57] <bioduds> testing 1GB RAM now

[18:57] *** committable6 joined
[18:58] <bioduds> avuserow

[18:58] *** sjoshi left
[18:58] <bioduds> how should i do this test in the shell script?

[18:59] *** zacts joined
[18:59] <[Coke]> I doubt there is a portable way for you to do that.

[18:59] <[Coke]> or at least, an easy way.

[19:00] <bioduds> i wont work on that i guess

[19:00] <bioduds> maybe after testing

[19:03] <TestNinja> m: %{Any} = a => 'B', c => 'b';

[19:03] <camelia> rakudo-moar e8d0d0: OUTPUT«Odd number of elements found where hash initializer expected:␤Only saw: -> ;; $_? is raw { #`(Block|74651200) ... }␤  in block <unit> at <tmp> line 1␤␤»

[19:03] <TestNinja> What's it on about?

[19:03] <bioduds> also, installing it after checking that it does not exist would be platform dependent

[19:03] <TestNinja> m: my %h{Any}; %h = a => 'B', c => 'b'; dd %h

[19:03] <camelia> rakudo-moar e8d0d0: OUTPUT«Hash[Any,Any] %h = (my Any %{Any} = :a("B"), :c("b"))␤»

[19:04] <TestNinja> m: my Any %{Any} = :a("B"), :c("b")

[19:04] <camelia> rakudo-moar e8d0d0: ( no output )

[19:04] <TestNinja> mkay

[19:04] <TestNinja> m: %{Any} = a => "B", c => "b"

[19:04] <camelia> rakudo-moar e8d0d0: OUTPUT«Odd number of elements found where hash initializer expected:␤Only saw: -> ;; $_? is raw { #`(Block|77295888) ... }␤  in block <unit> at <tmp> line 1␤␤»

[19:04] <TestNinja> m: my %{Any} = a => "B", c => "b"

[19:04] <camelia> rakudo-moar e8d0d0: ( no output )

[19:04] <bioduds> testing on 1gb ram centos

[19:04] <TestNinja> m: %{Any}

[19:04] <camelia> rakudo-moar e8d0d0: OUTPUT«Odd number of elements found where hash initializer expected:␤Only saw: -> ;; $_? is raw { #`(Block|76513384) ... }␤  in block <unit> at <tmp> line 1␤␤»

[19:05] <TestNinja> Ah, treats it as a coercer

[19:07] *** iH2O joined
[19:07] <bioduds> i should nevertheless ensure it is runnable

[19:07] <bioduds> as avuserow pointed

[19:08] <bioduds> also, check if min perl5 is there

[19:08] <bioduds> do you guys know what is min. perl5 version needed for perl6 to be installed?

[19:09] <MasterDuke> Configure.pl has 'use 5.010;'

[19:09] *** dha left
[19:12] *** sjoshi joined
[19:12] <timotimo> bioduds: did you keep the PREFIX= part of the script?

[19:13] <TestNinja> bioduds: 5.10.1

[19:13] <TestNinja> (5.10.0 won't work)

[19:14] *** sufrostico left
[19:15] <bioduds> fedora does not come with perl pre-installed

[19:15] <bioduds> timotimo yes I did

[19:15] <bioduds> right now im testing if i can detect make

[19:15] <bioduds> also will test for perl

[19:16] <bioduds> so 5.10.1 and above min

[19:16] <bioduds> ok

[19:18] <timotimo> cool

[19:22] <leont> 5.8.8 may be a more convenient dependency (RHEL5), but OTOH that target group is unlikely to be interested in p6

[19:23] <mst> I would be very surprised if tehre was somebody with 5.8.8 who both wanted p6 and wasn't capable of building a newer perl5

[19:24] <bioduds> there are these legacy users but as you said, it would surprise to see if they wanted to "upgrade" to p6

[19:26] <bioduds> good, i could test now

[19:26] <bioduds> with

[19:26] <bioduds> command -v make >/dev/null 2>&1 || { echo >&2 "I require make but it's not installed.  Aborting."; exit 1; }

[19:27] <leont> True, I doubt it's much of a practical concern

[19:27] <bioduds> i guess i can do the same for perl

[19:29] <bioduds> good, worked

[19:30] <bioduds> now I can prevent installation if no make and no perl is available and warn installers to install it

[19:30] <bioduds> http://67.205.136.118/install.sh

[19:30] <[Coke]> If i have a promise with a status of Broken, how can I find out what broke it?

[19:30] <[Coke]> arglebargle. "cause"

[19:32] <TestNinja> .result

[19:33] <TestNinja> Well, the .result would have an Exception if it got broken by exception. Unsure about promises broken manually

[19:33] <timotimo> m: say Promise.^attributes

[19:33] <camelia> rakudo-moar 685cc5: OUTPUT«(Mu $!scheduler Mu $!status Mu $!result int $!vow_taken Mu $!lock Mu $!cond Positional @!thens Mu $!dynamic_context)␤»

[19:34] <timotimo> m: say Promise.^methods(:local)

[19:34] <camelia> rakudo-moar 685cc5: OUTPUT«(BUILD vow keep break result cause then start in at anyof allof Supply Str Numeric Bool scheduler status)␤»

[19:34] <timotimo> ah, yes, cause is probably it

[19:34] <bioduds> cool, installing on Fedora 24 x64 2gb ram

[19:34] <TestNinja> :o

[19:35] <TestNinja> "If the promise was broken, returns the result (or exception). Otherwise, throws an exception of type X::Promise::CauseOnlyValidOnBroken."

[19:35] <bioduds> timotimo did you say I should remove PREFIX="/usr/local" ?

[19:35] <bioduds> or leave it there?

[19:35] <timotimo> remove

[19:36] <timotimo> because i don't think it actually has any effect the way it's there

[19:36] <bioduds> ok

[19:36] <timotimo> because you said "curl the_script | sh" works, but it can't work if the prefix is really /usr/local

[19:36] <bioduds> removed, going to test in a sec

[19:36] <TestNinja> m: say (1.1, 3.1).all ~~ any(1.1, 2.1, 3.1)

[19:36] <camelia> rakudo-moar 685cc5: OUTPUT«False␤»

[19:37] <TestNinja> I excpected that to be True. How come it's false? Is it comparing two Junctions to each other instead of junctioning the values?

[19:37] <bioduds> testing

[19:38] <[Coke]> I have a promise $p that is broken. if i then try to print $p.cause.backtrace, I get Backtrace.new

[19:38] *** espadrine joined
[19:38] <bioduds> fedora is failing

[19:38] <bioduds> Can't exec "/home/super/rakudo/rakudo-star-2016.04/install/bin/moar": No such file or directory at tools/lib/NQP/Configure.pm line 450.  ===SORRY!=== No suitable MoarVM (moar executable) found using the --prefix (You can get a MoarVM built automatically with --gen-moar.)  Command failed (status 512): /usr/bin/perl Configure.pl --prefix=/home/super/rakudo/rakudo-star-2016.04/install --backends=moar --make-install make: *** No targets s

[19:39] <bioduds> what is this?

[19:39] <TestNinja> bioduds: it can't find moar

[19:39] <TestNinja> m: say .elems == .grep: any(1.1, 2.1, 3.1) given (1.1, 3.1)

[19:39] <camelia> rakudo-moar 685cc5: OUTPUT«True␤»

[19:39] <TestNinja> This'll do, for me, I guess

[19:39] <timotimo> right, the configure.pl is supposed to alreay install a moar when it goes on to build nqp

[19:39] <[Coke]> looks like you didn't pass in --gen-moar

[19:40] <bioduds> i did

[19:40] *** cpage_ left
[19:40] <bioduds> perl Configure.pl --backend=moar --gen-moar

[19:40] <bioduds> is there in the script

[19:42] <moritz> then it looks like compiling or installing moar failed

[19:42] <bioduds> perhaps there is no tar

[19:42] <MasterDuke> --backends

[19:42] <bioduds> fedora comes all naked it seems

[19:42] <moritz> --gen-moar implies backend moar

[19:43] <bioduds> no, there is tar

[19:43] <bioduds> well, I dont understand then

[19:43] <bioduds> No suitable MoarVM (moar executable) found using the --prefix

[19:43] <[Coke]> did you look at the output of the failed build? or are you hiding it?

[19:43] <bioduds> sorry guys, i dont understand what this means

[19:44] <[Coke]> if you have it captured, nopaste it somewhere.

[19:44] <[Coke]> probably that moar didn't build. you have to find the error message on the moar build.

[19:44] <bioduds> let me try

[19:44] <[Coke]> nopaste the output of your failed attempt to build (put it on gist.github.com or something)

[19:45] <[Coke]> aaaarigh. give my bailador script a POST. fails in a promise, can't get the backtrace of the promise. again, fails, again, now fails different way.... again, now it works. wtf.

[19:46] <[Coke]> (fresh copy? that still fails)

[19:46] <bioduds> gonna leave fedora for later

[19:47] <bioduds> heres what i got so far https://docs.google.com/spreadsheets/d/1dOAJEglf0D9hV5doDADZJEMUIvWlmsRSBx8S118-3iY/edit?usp=sharing

[19:48] <avuserow> bioduds: the snippet I gave you was shell code and seemed to work for me. Not a shell expert though.

[19:48] <bioduds> yes avuserow it was almost correct

[19:48] <bioduds> i just changed a bit

[19:48] <bioduds> is working with: https://docs.google.com/spreadsheets/d/1dOAJEglf0D9hV5doDADZJEMUIvWlmsRSBx8S118-3iY/edit?usp=sharing

[19:48] <bioduds> opd

[19:49] <bioduds> ops sorry

[19:49] <bioduds> is working with: command -v make >/dev/null 2>&1 || { echo >&2 "make command is required to install Perl6. Please install it and try again."; exit 1; }

[19:49] <bioduds> also I did the same to test for perl

[19:49] <bioduds> command -v perl >/dev/null 2>&1 || { echo >&2 "perl is required to install Perl6 (Min. version 5.10.1). Please install it and try again."; exit 1; }

[19:49] <bioduds> this works

[19:49] <bioduds> and quits when none is available

[19:50] <[Coke]> AIIIGH

[19:50] *** iH2O left
[19:50] *** sjoshi left
[19:53] *** TestNinja left
[19:54] <[Coke]> (that was for my async bailador stuff, nothing here. )

[19:58] *** ggoebel left
[20:00] *** baest_ joined
[20:02] *** baest left
[20:08] <[Coke]> https://docs.perl6.org/routine/run should note if run is synchronous or not.

[20:10] *** cdg joined
[20:11] *** mst is now known as _o_mst_o_

[20:11] <leont> Yeah, that could be made more obvious, even if synchronous is the default in the rest of the world

[20:12] *** zacts left
[20:14] <[Coke]> m: my $p = start { die 'oh bother' }; sleep 5; say ~$p.cause;

[20:14] <[Coke]> m: my $p = start { die 'oh bother' }; sleep 5; say $p.cause;

[20:14] <camelia> rakudo-moar 685cc5: OUTPUT«oh bother␤»

[20:14] <camelia> rakudo-moar 685cc5: OUTPUT«oh bother␤  in block  at <tmp> line 1␤␤»

[20:15] <[Coke]> there's a surprising Str/gist difference. :|

[20:16] *** TEttinger joined
[20:17] <geekosaur> makes sense to me, although something like $p.cause.payload or etc. might make more sense/be clearer

[20:19] <[Coke]> should at least be documented on https://docs.perl6.org/type/Exception

[20:19] *** cpage_ joined
[20:22] <El_Che> travis rules: you can test perl6 docker images with it!

[20:23] <timotimo> nice

[20:24] <El_Che> https://travis-ci.org/nxadm/rakudo-pkg

[20:24] *** smls left
[20:28] *** jjido joined
[20:35] *** AlexDani` joined
[20:36] *** AlexDaniel left
[20:37] *** shzbot6959 joined
[20:38] *** AlexDani` is now known as AlexDaniel

[20:38] *** shzbot6959 left
[20:40] *** dha joined
[20:40] *** MilkmanDan left
[20:41] *** MilkmanDan joined
[20:42] *** labster left
[20:43] *** bisectable6 left
[20:43] *** bisectable6 joined
[20:44] *** mcmillhj left
[20:49] *** MilkmanDan left
[20:51] *** cdg left
[20:51] *** cdg joined
[20:54] *** skids left
[20:57] *** _o_mst_o_ is now known as mst

[20:58] *** cpage_ left
[21:06] *** pmurias left
[21:06] *** sufrostico joined
[21:08] <El_Che> bioduds: I am trying to build native packages. I may have a go at creating fedora packages if I find the time. But you could have a go at the Centos7 pkg: https://github.com/nxadm/rakudo-pkg (the compile commands are in the docker dir, pkg_rakudo.sh for compiling, the Dockerfile for the prerequisites)

[21:09] <El_Che> s/go/look

[21:15] <grondilu> m: say (my %)<foo> // "oops";

[21:15] <camelia> rakudo-moar 685cc5: OUTPUT«oops␤»

[21:16] <grondilu> oh my bad

[21:16] *** MilkmanDan joined
[21:16] *** lostinfog left
[21:17] <grondilu> m: my %h; (%h<foo> && die "already defined") = "bar"; say %h<foo>

[21:17] <camelia> rakudo-moar 685cc5: OUTPUT«bar␤»

[21:17] <grondilu> nice

[21:18] *** kaare__ left
[21:21] *** mcmillhj joined
[21:23] * grondilu wonders if that's possible in P5

[21:23] <grondilu> nope

[21:24] <grondilu> m: (my $ and die) = "foo"

[21:24] <camelia> rakudo-moar 685cc5: ( no output )

[21:26] *** mcmillhj left
[21:33] *** labster joined
[21:39] <harmil_wk> I'm really getting into the weeds with this timeout issue. It shouldn't be taking me a week to figure out how to time out a test...

[21:41] <ugexe> m: await Promise.anyof(start { sleep 100 }, start { sleep 3 });

[21:42] <camelia> rakudo-moar 685cc5: ( no output )

[21:42] *** bobv left
[21:42] <harmil_wk> ugexe: that can't interrupt a long-running call, though, right?

[21:42] <harmil_wk> The sleep 100 just ends up running until you exit, doesn't it?

[21:42] *** lizmat joined
[21:43] <harmil_wk> I have 177 tests to run, and I don't want that many threads generating massive integers until I exit.

[21:44] <harmil_wk> Java has a Thread.interrupt which would be ideal. Then I'd just Promise.anyof($timer, $test) and then $test.interrrupt if the timer hit.

[21:47] <harmil_wk> m: await Promise.anyof(start { loop { sleep 1; say 1} }, start { sleep 1 }); say "Okay, your test is done"; sleep 2;

[21:47] <camelia> rakudo-moar 685cc5: OUTPUT«1␤Okay, your test is done␤1␤1␤»

[21:52] *** wamba joined
[21:52] <bioduds> guys, what should be the place to ask for help if a user can't get perl6 to be installed?

[21:53] <bioduds> I need to put that on the script if it for some unknown reason installation fails

[21:54] *** cpage_ joined
[21:55] <harmil_wk> If I'm reading what you wrote correct, bioduds, you're asking what you should tell people to do if they can't install Perl 6 as a prerequisite for running your script?

[21:55] <ugexe> m: my $s = Supplier.new; my $sup = $s.Supply; await Promise.anyof(start { $sup.tap: { die(); }; for (^100) { say $_; sleep 1 } }, start { sleep 1 }); $s.emit(0); sleep 2; # some sort of kill switch i guess... this blows up the whole thing though

[21:55] <camelia> rakudo-moar 685cc5: OUTPUT«0␤1␤Died␤  in block <unit> at <tmp> line 1␤␤»

[21:56] <bioduds> yes, if they cant install with the script, where should they go for help

[21:56] <harmil_wk> ugexe: oh, interesting... that's much better than the horrific signal handling I was trying to get working...

[21:57] *** cpage_ left
[21:57] *** woolfy joined
[21:57] <bioduds> should I tell them to go to chat? or faq?

[21:57] <bioduds> perhaps https://docs.perl6.org/language/faq.html

[21:57] <harmil_wk> bioduds: does your script try to install Perl6? I'm just trying to avoid the situation where your script has a problem and we direct people to a general Perl 6 resource...

[21:57] <bioduds> yes it tries to install perl6

[21:58] <bioduds> script is here: http://67.205.136.118/install.sh

[21:58] <bioduds> it uses main perl6 installation proceedures

[21:59] <bioduds> if it gets approved, should go run in https://install.perl6.org

[21:59] <harmil_wk> I would say that the first line of defense should be the script maintainer.

[21:59] *** dha left
[21:59] *** frobisher joined
[21:59] <bioduds> as top p6 guys here are looking on how would the best way to do this should be

[21:59] *** frobisher is now known as dha

[22:00] <bioduds> I agree. 

[22:00] <bioduds> So, you think it'd be best if I say, please contact script developer - my email and also look at faq

[22:00] <stmuk> bioduds: why doesn't it use the latest Rakudo Star?

[22:00] <bioduds> this should be ok?

[22:00] <bioduds> it is using latest 

[22:00] <bioduds> no?

[22:01] <stmuk> rakudo-star-2016.07.tar.gz was the last

[22:01] <harmil_wk> So something like, "if the script fails to install, see <location for script FAQ/bug reporting>, but if you have issues with the installed version of Perl 6 after installation, see <various Perl 6 references and FAQs>"

[22:01] <stmuk> it should work if you just change it

[22:01] <bioduds> let me change it to the latest then

[22:01] <bioduds> thanks

[22:02] <dha> We didn't have a release last month?

[22:03] <harmil_wk> bioduds: note that you can get the latest release tag here: https://github.com/rakudo/star/releases

[22:04] <harmil_wk> dha: star releases more slowly now that we're in non-zero-index-Greek-letters

[22:05] <dha> Ah.

[22:05] <stmuk> dha: nope I'm aiming for 3 monthly releases

[22:05] <harmil_wk> Though I guess it's not Greek, since "c" isn't Greek... I'll get back to you when I understand the release naming :)

[22:06] <harmil_wk> stmuk: is that "3-month"ly releases?

[22:06] <harmil_wk> or 3 per month?

[22:06] <stmuk> 1 per quarter (3 months)

[22:06] *** jjido left
[22:06] <harmil_wk> that's what I thought, just clarifying

[22:07] <emdashcomma> c is lunate sigma :)

[22:07] <bioduds> yep, changed

[22:07] <bioduds> going to test with latest now

[22:08] *** labster left
[22:10] *** leont left
[22:12] *** abruanese joined
[22:12] *** danlei joined
[22:13] <stmuk> bioduds: "

[22:13] <stmuk> oops

[22:14] <stmuk> "You need gcc compiler installed in order to proceed" is only on linux (Mac will need clang installed)

[22:15] <danlei> perl6 repl exits for me on some errors (e.g. when entering 'sub }'). this didn't happen with ubuntu's rakudo package, but with a fresh build (rakudobrew build moar). bug? if not, can it be disabled?

[22:16] <bioduds> clang?

[22:17] <bioduds> let me put that on the warnings then

[22:19] <danlei> (2016.08-1-71-g685cc5a/MoarVM 2016.08)

[22:20] *** firstdayonthejob left
[22:21] <jnthn> danlei: Hm, curious, "sub }" and enter doesn't do it on what I've got locally, which is 2016.08.1-22-g6e76f7e

[22:21] <jnthn> danlei: So sounds like a recent regression...please file a bug report.

[22:21] <bioduds> i believe my fedora perl installation is the problem

[22:22] <bioduds> in fedora install failure

[22:22] <bioduds> i did sudo yum install perl

[22:22] <bioduds> perhaps i shouldn't sudo i guess

[22:22] <jnthn> (That describe is a tad misleading fwiw, 'cus I'm in a branch...)

[22:22] <bioduds> so far ubuntu and centos installations were successful

[22:24] <stmuk> bioduds: clang is an alternative compiler to gcc now used on Mac and FreeBSD and confusingly accessible as "gcc"

[22:24] <stmuk> I'll try it on a Mac

[22:24] <bioduds> great

[22:24] <bioduds> i cant put up a mac vm, its too complicated

[22:24] <bioduds> hackintosh

[22:24] *** TheLemonMan left
[22:25] <bioduds> line now is: curl http://67.205.136.118/install.sh | sh;. ~/rakudo/setpath.sh

[22:25] <bioduds> later hopefully will become: curl https://install.perl6.org | sh;. ~/rakudo/setpath.sh

[22:25] <danlei> jnthn: ok, thanks. I'll report it.

[22:26] <bioduds> great

[22:26] <bioduds> if you can, send me results to [email@hidden.address]
[22:26] *** MilkmanDan left
[22:26] <bioduds> im curious to see if it will work on mac

[22:26] *** cpage_ joined
[22:26] <El_Che> bioduds: you should make the install dir overwritable by a ENV setting (as rakudobrew and perlbrew). Personally I hate stuff in my $HOME (they lib under ~/lib)

[22:27] <jnthn> danlei: Thanks!

[22:27] *** MilkmanDan joined
[22:28] <stmuk> bioduds: that script should probably exit with a warning if the directory created by tar already exists

[22:28] <bioduds> well, I was rm -rf ~/rakudo but i believe nine told me not to

[22:28] <stmuk> sorry I mean the ~/rakudo directory

[22:29] <bioduds> it should, I believe, clean up before install yes

[22:29] <bioduds> I do rm -rf if it fails though

[22:29] <stmuk> yeah I would favour testing for the existance of ~/rakudo, you might delete existing work under ~/rakudo

[22:29] <bioduds> sure, cause otherwise it would fail

[22:29] <bioduds> im putting that in

[22:29] <stmuk> someone might be using that with programs existing there and have forgotten

[22:30] <El_Che> with rm it's better to err on the safe side

[22:30] <bioduds> correct

[22:30] <bioduds> I'll think about it

[22:30] <bioduds> gotta go now, be back soon!

[22:30] <bioduds> thanks all guys

[22:31] <stmuk> bioduds: you have an old 2016.04 reference there

[22:33] <dalek> perl6-most-wanted: cd3e174 | (Tom Browder)++ | most-wanted/modules.md:

[22:33] <dalek> perl6-most-wanted: update 

[22:33] <dalek> perl6-most-wanted: 

[22:33] <dalek> perl6-most-wanted: add a new WIP module: Net::IP

[22:33] <dalek> perl6-most-wanted: delete an unneeded module: Tes::Number::Delta (all function now included in core module Test)

[22:33] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/cd3e1746b1

[22:38] *** zacts joined
[22:39] *** cpage_ left
[22:40] *** cpage_ joined
[22:41] <AlexDaniel> m: my $c = Channel.new; $c.send(42); $c.close; say WHAT $c.list

[22:41] <camelia> rakudo-moar fbeadb: OUTPUT«(List)␤»

[22:42] *** labster joined
[22:44] <AlexDaniel> m: my $c = Channel.new; start { $c.send(42); sleep 3; $c.close; }; say $c.list; say now - BEGIN now

[22:44] <camelia> rakudo-moar fbeadb: OUTPUT«(42)␤3.0148542␤»

[22:44] <AlexDaniel> m: my $c = Channel.new; start { $c.send(42); sleep 3; $c.close; }; say $c.list.WHAT; say now - BEGIN now

[22:44] <camelia> rakudo-moar fbeadb: OUTPUT«(List)␤0.0146833␤»

[22:44] *** dalek left
[22:44] <AlexDaniel> I don't understand… How can a List behave like that?

[22:45] <masak> TimToady: questions from charging into the unknown: do you think `is parsed` should be made to work for non-macro subs? do you think `is parsed` has a place on (say) `constant` declarations and/or routine parameters? if possible, please answer modulo any reservations you may have to the viability of `is parsed`. ;)

[22:45] *** dalek joined
[22:45] *** ChanServ sets mode: +v dalek

[22:48] <masak> (to my surprise, `is parsed` is turning out to be solving a lot of interesting problems in 007, at least on paper)

[22:49] <jnthn> masak: Do you handle the parse regex having access to the tokens of the grammar, ooc?

[22:52] *** perlawhirl joined
[22:53] <perlawhirl> hi perlers

[22:54] *** mcmillhj joined
[22:54] *** dha left
[22:54] <perlawhirl> ab5tract: Need to update you META6 for Terminal::Print to add OO::Monitors as a dependency

[22:54] <perlawhirl> .seen ab5tract

[22:54] <yoleaux> I saw ab5tract 13 Aug 2016 16:17Z in #perl6: <ab5tract> Gar, how did those RHS parens slip in.. Nevermind, my reasoning was based on a grave misunderstanding

[22:55] * TimToady is still deeply suspicious of 'is parsed', but has to run off to play the drums now

[22:56] <perlawhirl> .tell ab5tract You need to update you META6 for Terminal::Print to add OO::Monitors as a dependency

[22:56] <yoleaux> perlawhirl: I'll pass your message to ab5tract.

[22:56] *** perlawhirl left
[22:59] <bioduds> stmuk, no, i changed already

[22:59] <bioduds> to 2016.07

[23:00] *** zengargoyle left
[23:02] <AlexDaniel> oh by the way

[23:02] <AlexDaniel> commit: pre-glr,HEAD my @a = <a b c>; .say for 42, @a

[23:02] <committable6> AlexDaniel, ¦«pre-glr»: 42␤a␤b␤c␤¦«HEAD»: 42␤[a b c]

[23:02] <masak> jnthn: it's not implemented yet, but (far as I can see) in 007, having access to the tokens of the grammar is higher on the list than having access to lexically defined regexes.

[23:02] <AlexDaniel> commit: 2015.07 say ‘Hello from the past!’

[23:02] <committable6> AlexDaniel, ¦«2015.07»: Hello from the past!

[23:03] <masak> jnthn: an `is parsed` regex will operate with access to the grammar corresponding to the language currently in effect.

[23:04] <masak> or, perhaps better to say, the parser currently in effect.

[23:05] <masak> heh, I asked TimToady to answer modulo reservations, and all I got was the reservations :P

[23:08] *** cdg left
[23:12] *** espadrine left
[23:13] *** skids joined
[23:16] *** RabidGravy left
[23:17] *** mcmillhj left
[23:24] *** cpage_ left
[23:25] *** danlei left
[23:29] *** pierre_ joined
[23:30] *** kurahaupo joined
[23:30] *** labster left
[23:32] *** pierre_ left
[23:33] *** cpage_ joined
[23:33] *** cpage_ left
[23:33] *** mcmillhj joined
[23:34] *** cdg joined
[23:35] *** cpage_ joined
[23:46] *** cpage_ left
[23:48] *** pierre___ joined
[23:49] *** cdg left
[23:53] *** zacts left
[23:54] *** zengargoyle joined
[23:55] <japhb> Isn't that precisely the answer that modulo *can't* give?

