[00:04] *** canopus joined
[00:09] *** sena_kun left
[00:09] *** labster left
[00:15] *** Zoffix__ is now known as Zoffix

[00:15] *** kurahaupo left
[00:16] <masak> hey, just want to show this, because it's pretty neat:

[00:16] <masak> $ bin/007 -e='macro name(var) { return new Q::Literal::Str { value: var.name } }; my x; say(name(x))'

[00:16] <masak> x

[00:17] <masak> that is, `name(some_var)` is a macro that turns a variable into the name of that variable

[00:17] <masak> I like it because it's short, and it *definitely* can't be done with a normal function

[00:18] <timotimo> m: my $hello; sub name($var is raw) { say $var.name }; name($hello)

[00:18] <camelia> rakudo-moar 668dc5: OUTPUT«Method 'name' not found for invocant of class 'Any'␤  in sub name at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:18] <timotimo> m: my $hello; sub name($var is raw) { say $var.^name }; name($hello)

[00:18] <camelia> rakudo-moar 668dc5: OUTPUT«Any␤»

[00:18] <timotimo> m: my $hello; sub name($var is raw) { say $var.VAR.^name }; name($hello)

[00:18] <camelia> rakudo-moar 668dc5: OUTPUT«Scalar␤»

[00:18] <timotimo> m: my $hello; sub name($var is raw) { say $var.VAR.name }; name($hello)

[00:18] <camelia> rakudo-moar 668dc5: OUTPUT«$hello␤»

[00:18] <timotimo> there we go.

[00:18] <timotimo> masak: doesn't count as a "normal" function? :)

[00:19] <masak> well, .VAR is "a macro"

[00:19] <masak> in that it's noticed by the compiler and turned into magic

[00:19] *** M-Illandan joined
[00:19] *** Matthew[m] joined
[00:20] <masak> I'd maintain that `name(var)` is somewhat more impressive, since it's user-defined ;)

[00:21] <masak> m: my $hello; my $goodbye := $hello; sub name($var is raw) { say $var.VAR.name }; name($goodbye)

[00:21] <camelia> rakudo-moar 668dc5: OUTPUT«$hello␤»

[00:21] <masak> also, .VAR.name has obvious problems such as the above one

[00:22] <timotimo> OK :)

[00:22] <masak> 'night, #perl6

[00:22] <timotimo> gnite masak 

[00:23] *** thundergnat left
[00:28] *** webstrand joined
[00:31] *** cognominal left
[00:31] *** perlawhirl left
[00:33] *** sammers left
[00:44] *** heatsink joined
[00:45] *** mvorg left
[00:53] *** mrsolo joined
[01:03] *** heatsink left
[01:15] *** zacts joined
[01:15] *** itaipu left
[01:18] *** eyck left
[01:19] *** kalkin- left
[01:19] *** kalkin-_ joined
[01:20] *** eyck joined
[01:21] *** nebuchad` is now known as nebuchadnezzar

[01:21] *** tbrowder left
[01:21] *** BenGoldberg joined
[01:37] *** RabidGravy left
[01:40] <MasterDuke> m: my $a = 'a'; my $b = 'b'; say 'should not see this' if 'b' ne all($a, $b)

[01:40] <camelia> rakudo-moar 668dc5: OUTPUT«should not see this␤»

[01:40] <MasterDuke> m: my $a = 'a'; my $b = 'b'; say 'should not see this' if 'b' eq none($a, $b)

[01:40] <camelia> rakudo-moar 668dc5: ( no output )

[01:41] <TimToady> ne does "not raising", so it's equivalent to not 'b' eq all($a,$b)

[01:41] <TimToady> (so does English, btw)

[01:42] <MasterDuke> huh, somehow that's not what i expect

[01:42] <TimToady> the opposite is not what most English speakers expect

[01:43] <TimToady> m: say 1 ne any 1, 2

[01:43] <camelia> rakudo-moar 668dc5: OUTPUT«False␤»

[01:45] *** ilbot3 left
[01:45] <MasterDuke> that also seems wrong

[01:46] <TimToady> in English, "A is not any of B or C" means "it is not the case that A is any of B or C"

[01:47] <TimToady> you can't abstract 'ne' into a real operator like that; well, you can, but then you're choosing a consistency that will confuse the majority of the people

[01:47] *** AndyBotwin left
[01:47] <TimToady> ne is really only a negated eq

[01:47] *** ilbot3 joined
[01:48] <MasterDuke> i've spoken English my whole life and that still feels wrong, but maybe logic classes + programming experience has colored what i expect

[01:48] <TimToady> ayup :)

[01:49] <TimToady> you never say "I am not any of those." ?

[01:49] <TimToady> you'd have to say "I am not all of those." :P

[01:49] <TimToady> (by the logic view)

[01:50] <TimToady> anyway, you found one of the workarounds :)

[01:52] <MasterDuke> yep, but i suspect i'll make that mistake again

[01:53] <MasterDuke> i'll have to ponder it a while

[01:53] <TimToady> consider that ne is reall the !eq metaoperator

[01:53] <TimToady> *really

[01:53] <TimToady> and as a higher-order function, it's modifying 'eq'

[01:53] *** kurahaupo joined
[01:53] <TimToady> the results of 'eq', that is

[01:54] <TimToady> which is just like linguistic not-raising

[01:54] <MasterDuke> the original code was $a ne 'a' and $a ne 'b'

[01:54] <TimToady> the fact that one of the arguments to eq comes before the negation is just a trick of infix syntax plus metaoperators

[01:55] <MasterDuke> so my first instinct was $a ne 'a' & 'b'

[01:55] <TimToady> but that's really like "not $a eq 'a' and not $a eq 'b'"

[01:57] <TimToady> the fact that a computer languages has smushed to two morphemes into one is kinda immaterial to the semantics, which is 'is' vs 'is not' in English

[01:59] <TimToady> and not being an adverb, it modifies the entire predicate, and doesn't fire off before the modified verb

[02:00] *** kurahaupo left
[02:00] <TimToady> Are you Fred or Bob? No, I am not Fred or Bob.

[02:01] <MasterDuke> somehow the de Morgan transformation, which does makes sense from a pure logic point of view, isn't quite sinking in to my natural language translation of the particular code that i wanted to write

[02:01] <TimToady> we often give lip service to Perl being like a natural language, but in this case it really is

[02:01] <MasterDuke> (and i'm not sure which is more deficient, my logic or my language)

[02:03] <MasterDuke> but the docs were good enough to correct me!

[02:03] <TimToady> De Morgan is: not A or not B :: not (A and B), but there's no 'eq' in there

[02:05] <TimToady> and things get complicated in any computer language when negation is artifically attached to another operator; I seem to recall that C++ has special rules about overloading negated ops too

[02:06] <MasterDuke> good grief, i didn't even read the docs right. "$a !op $b is rewritten internally as !($a op $b)"

[02:08] <MasterDuke> not quite the same as De Morgan

[02:08] <TimToady> yes, that's more like the not-raising I was mentioning, though that's not quite what not-raising means in English either

[02:08] <TimToady> "I don't think so" really really "I think not."

[02:09] <TimToady> that's the real not-raising

[02:09] <TimToady> but we do, in fact, parse the not as applying to the whole predicate, even though it's embedded in the middle

[02:10] <TimToady> just as with any other adverb: I am quickly running down the street.

[02:11] <TimToady> a side effect of SVO order, which is kind of infixy when you think about it

[02:11] *** noganex joined
[02:14] <MasterDuke> makes we wonder what other language speakers would have the same/better/worse understanding of Perl 6 Junctions

[02:14] *** noganex_ left
[02:15] <MasterDuke> does different native sentence structure lend itself to an easier understanding of formal logic

[02:16] <geekosaur> not really because no natural language is based on formal logic :)

[02:17] <TimToady> well, Japanese is pretty close to reverse polish, so as an SOV language, the negation actually comes after the V, so can't be confused for anything in the middle; otoh, they tend to double-negative their adverbs for that reason: I seldom don't do that

[02:18] <TimToady> well, more like "seldom that don't"

[02:21] *** canopus left
[02:25] *** labster joined
[02:29] *** lizmat joined
[02:29] *** lizmat_ left
[02:29] *** canopus joined
[02:32] <Xliff_> *sigh*

[02:32] <Xliff_> I'm bored. Anyone have a problem they want solved in P6?

[02:35] <MasterDuke> Xliff_: https://github.com/moritz/svg-plot/issues/8 and https://github.com/moritz/svg/issues/1

[02:41] <MasterDuke> oh well, guess i don't have interesting problems...

[02:43] <Xliff_> OOH!

[02:43] <Xliff_> Beggars can't be choosers.

[02:45] * MasterDuke joking around

[02:47] <MasterDuke> TimToady: would it be reasonable to request to warn the user if there's any code in a given block after the whens? e.g., given 42 { when Int { say 'Life...' }; say 'this does not get run'; }

[02:48] <ShimmerFairy> MasterDuke: only if we were somehow able to analyze the "probability" of the when being True

[02:49] <ShimmerFairy> MasterDuke: consider   for ^100 { when * %% 12 { #`(these numbers are stupid) }; doing-stuff-here(); }    as an example

[02:50] <MasterDuke> ah right, but what about: given 'a' { when Int { say 'Life...' }; default { say 'this does get run' }; say 'this does not get run'; }

[02:51] <MasterDuke> of interesting: given 'a' { when Int { say 'Life...' }; say 'this does in fact get run'; default { say 'this does get run' }; }

[02:51] <MasterDuke> *oh interesting

[02:53] *** skids joined
[02:54] <MasterDuke> ok, how about warning if there's any code after the default? is that too difficult?

[02:55] *** petercommand left
[02:55] *** petercommand joined
[02:56] <ShimmerFairy> not sure about that one. The default would be the only easy one to make the warning for, relatively speaking :)

[02:56] *** cibs left
[02:58] *** pierre_ joined
[02:58] *** cibs joined
[03:01] *** zacts left
[03:04] <dalek> whateverable: 540aba6 | MasterDuke17++ | Bisectable.p6:

[03:04] <dalek> whateverable: Instead of calling 'git bisect run', implement the functionality in code

[03:04] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/540aba62e7

[03:06] <dalek> doc: 29f9b56 | (Douglas L. Schrag)++ | doc/Language/testing.pod6:

[03:06] <dalek> doc: Remove references to 'done' method (obsolete)

[03:06] <dalek> doc: 

[03:06] <dalek> doc: Clarify to refer to the done-testing method.

[03:06] <dalek> doc: review: https://github.com/perl6/doc/commit/29f9b56c24

[03:06] <dalek> doc: cb3c5b5 | titsuki++ | doc/Language/testing.pod6:

[03:06] <dalek> doc: Merge pull request #848 from dmaestro/done_testing_clarification

[03:06] <dalek> doc: 

[03:06] <dalek> doc: Remove references to 'done' method (obsolete)

[03:06] <dalek> doc: review: https://github.com/perl6/doc/commit/cb3c5b5fe4

[03:07] *** infina joined
[03:07] *** infina left
[03:07] *** infina joined
[03:09] *** ggoebel left
[03:10] <TimToady> ShimmerFairy: seems like warning after a default or a when * would make sense

[03:11] <ShimmerFairy> yeah, that's fine and it seems like it'd be far easier than doing it after 'when' blocks.

[03:11] <TimToady> and we could presumably know the outcome at compile time if the given was a constant, but maybe they're just writing it that way to select code for one architecture or another

[03:12] <ShimmerFairy> TimToady: I don't imagine code after a default {} would be very useful unless you played around with labels and gotos, so there should certainly be a warning.

[03:12] <TimToady> and otherwise the situation is unlikely to arise in practice

[03:12] <TimToady> mainly you have the situation where someone puts the default first because they're thining C semantics

[03:13] <TimToady> thinking, even

[03:13] <MasterDuke> RT #129025

[03:14] <MasterDuke> no link? RT#129025

[03:15] <MasterDuke> oh, synopsisbot isn't running

[03:15] <MasterDuke> https://rt.perl.org/Ticket/Display.html?id=129025

[03:20] <Xliff_> MasterDuke: Seems like output from SVG::Plot comes out in a pair. By the time it gets to XML::Writer it only sees one element to serialize.

[03:21] *** bjz left
[03:22] *** labster left
[03:23] *** bjz joined
[03:23] <MasterDuke> Xliff_: think it makes sense to change SVG::Plot or XML::Writer?

[03:24] <Xliff_> SVG::Plot

[03:24] <Xliff_> MasterDuke: Take a look at an SVG encoding example in XML::Writer.

[03:24] <Xliff_> I will fpaste.

[03:26] <Xliff_> https://da.gd/ba6iU

[03:26] <Xliff_> I'm seeing something entirely different from SVG::Plot

[03:28] *** _4d47 left
[03:35] *** pdcawley left
[03:35] <MasterDuke> think it's an easy fix?

[03:40] *** benjikinz left
[03:41] *** pdcawley joined
[03:43] <Xliff_> MasterDuke: Depends if it really is an issue with the output from SVG::Plot or not.

[03:45] <Xliff_> This little diddy worked fine enough.

[03:45] <Xliff_> http://paste.fedoraproject.org/411794/14717511/

[03:46] *** canopus left
[03:47] <Xliff_> Looks to me like SVG::Plot is creating an extra array when it doesn't need to.

[03:50] <MasterDuke> well i'm about to fall asleep at the keyboard, so i'm off, thanks for looking into it!

[03:52] *** canopus joined
[03:57] *** canopus left
[04:01] <Xliff_> No worries! If I figure it out, I will put in a PR.

[04:01] *** lizmat left
[04:01] *** lizmat joined
[04:03] *** canopus joined
[04:07] *** zacts joined
[04:11] *** xdbr left
[04:11] *** canopus left
[04:12] <Xliff_> MasterDuke, BOOYAH!

[04:15] *** Cabanossi left
[04:17] *** Cabanossi joined
[04:19] *** canopus joined
[04:21] *** canopus left
[04:24] *** zacts left
[04:29] *** khw left
[04:30] *** canopus joined
[04:38] *** xdbr joined
[04:39] *** canopus left
[04:40] *** gtdBFmKOXx left
[04:44] *** xdbr left
[04:45] *** paraboli` is now known as parabolize

[04:46] *** canopus joined
[04:48] *** PvLfNQxpCk joined
[04:57] *** ggoebel joined
[05:08] *** PvLfNQxpCk left
[05:10] *** xdbr joined
[05:21] *** CIAvash joined
[05:33] *** lizmat left
[05:34] *** lizmat_ joined
[05:59] *** skids left
[06:02] *** bPqArhZYBx joined
[06:06] *** pierre_ left
[06:12] *** ufobat joined
[06:19] *** pierre_ joined
[06:25] *** domidumont joined
[06:25] *** rindolf joined
[06:29] *** domidumont left
[06:29] *** domidumont joined
[06:55] *** espadrine joined
[07:04] *** lizmat joined
[07:04] *** lizmat_ left
[07:07] *** rindolf left
[07:15] *** bjz left
[07:17] *** darutoko joined
[07:24] *** domidumont left
[07:25] *** firstdayonthejob joined
[07:31] *** TheLemonMan joined
[07:52] *** xdbr left
[07:53] *** pierre_ left
[08:23] *** bjz joined
[08:23] *** labster joined
[08:23] *** labster left
[08:23] *** labster joined
[08:24] *** TheLemonMan left
[08:27] *** xdbr joined
[08:41] *** xdbr left
[08:45] *** wamba joined
[08:46] *** woolfy joined
[08:54] *** pierre_ joined
[08:54] *** setty1 joined
[08:58] *** pierre_ left
[09:01] *** canopus left
[09:09] *** lizmat left
[09:09] *** canopus joined
[09:13] *** woolfy left
[09:14] *** TEttinger left
[09:22] *** Grauwolf joined
[09:24] *** canopus left
[09:25] *** pmurias joined
[09:27] *** ufobat left
[09:32] *** canopus joined
[09:37] *** RabidGravy joined
[09:45] *** cpage left
[09:48] *** cpage joined
[09:50] <nine> win 13

[09:55] <Xliff_> How can I force a list to an array?

[09:55] *** pierre_ joined
[09:56] <Xliff_> m: my $p = (c => 1, 2, 3); say $p.WHAT;

[09:56] <camelia> rakudo-moar 668dc5: OUTPUT«(List)␤»

[09:56] <Xliff_> m: my $p = c => (1, 2, 3); say $p.WHAT;

[09:56] <camelia> rakudo-moar 668dc5: OUTPUT«(Pair)␤»

[09:57] <Xliff_> m: my $p = c => (1, 2, 3); say $p.key

[09:57] <camelia> rakudo-moar 668dc5: OUTPUT«c␤»

[09:57] <Xliff_> m: my $p = c => (1, 2, 3); say $p.value.WHAT

[09:57] <camelia> rakudo-moar 668dc5: OUTPUT«(List)␤»

[09:57] <Xliff_> OK, so now I think I know what the issue is.

[09:57] <Xliff_> m: my $p = c => (1, 2, 3).flat; say $p.value.WHAT

[09:57] <camelia> rakudo-moar 668dc5: OUTPUT«(Seq)␤»

[09:57] <Xliff_> m: my $p = c => !(1, 2, 3); say $p.value.WHAT

[09:57] <camelia> rakudo-moar 668dc5: OUTPUT«(Bool)␤»

[09:57] <Xliff_> m: my $p = c => |(1, 2, 3); say $p.value.WHAT

[09:57] <camelia> rakudo-moar 668dc5: OUTPUT«(Slip)␤»

[09:57] <Xliff_> m: my $p = c => @(1, 2, 3); say $p.value.WHAT

[09:57] <camelia> rakudo-moar 668dc5: OUTPUT«(List)␤»

[09:57] <Xliff_> m: my $p = c => [1, 2, 3]; say $p.value.WHAT

[09:57] <camelia> rakudo-moar 668dc5: OUTPUT«(Array)␤»

[09:58] <Xliff_> m: my $l = (1, 2, 3); $p = c => [1, 2, 3]; say $l.WHAT; say $p.value.WHAT

[09:58] <camelia> rakudo-moar 668dc5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$p' is not declared␤at <tmp>:1␤------> 3my $l = (1, 2, 3); 7⏏5$p = c => [1, 2, 3]; say $l.WHAT; say $p␤»

[09:58] <Xliff_> m: my $l = (1, 2, 3); my $p = c => [1, 2, 3]; say $l.WHAT; say $p.value.WHAT

[09:58] <camelia> rakudo-moar 668dc5: OUTPUT«(List)␤(Array)␤»

[09:59] <Xliff_> m: my $l = (1, 2, 3); my $p = c => [$l.flat]; say $l.WHAT; say $p.value.WHAT; dd $p.value;

[09:59] <camelia> rakudo-moar 668dc5: OUTPUT«(List)␤(Array)␤[1, 2, 3]␤»

[09:59] <Xliff_> m: my $l = (1, 2, 3); my $p = c => [$l]; say $l.WHAT; say $p.value.WHAT; dd $p.value;

[09:59] <camelia> rakudo-moar 668dc5: OUTPUT«(List)␤(Array)␤[(1, 2, 3),]␤»

[10:00] *** pierre_ left
[10:00] *** AlexDaniel joined
[10:11] *** mvorg joined
[10:15] *** rindolf joined
[10:15] *** geraud left
[10:15] *** pierre_ joined
[10:17] *** xinming joined
[10:21] *** labster left
[10:21] *** firstdayonthejob left
[10:22] *** canopus left
[10:27] *** Actualeyes left
[10:30] *** canopus joined
[10:42] *** Actualeyes joined
[10:43] *** domidumont joined
[10:45] <timotimo> m: sub the_thing { succeed }; given 42 { default { say "vroom"; the_thing }; say "doesn't get run ... ?" }

[10:45] <camelia> rakudo-moar 668dc5: OUTPUT«vroom␤»

[10:45] <timotimo> m: sub the_thing { proceed }; given 42 { default { say "vroom"; the_thing }; say "doesn't get run ... ?" }

[10:45] <camelia> rakudo-moar 668dc5: OUTPUT«vroom␤doesn't get run ... ?␤»

[10:49] <MasterDuke> timotimo: interesting, that does seem to make it a bit harder to detect code that won't get run

[10:50] <timotimo> definitely

[10:50] <timotimo> i've got something that's even worse :)

[10:51] <timotimo> m: my $*OUT = class { method print($_) { note $_; proceed } }; given 42 { default { say "vroom" }; say "doesn't get run ... ?" }

[10:51] <camelia> rakudo-moar 668dc5: OUTPUT«vroom␤␤doesn't get run ... ?␤␤proceed without when clause␤  in method print at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[10:51] <timotimo> m: my $*OUT = class { method print($_) { note $_; proceed CATCH { default { } } } }; given 42 { default { say "vroom" }; say "doesn't get run ... ?" }

[10:51] <camelia> rakudo-moar 668dc5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    CATCH used at line 1. Did you mean 'Match'?␤␤»

[10:51] <timotimo> m: my $*OUT = class { method print($_) { note $_; proceed; CATCH { default { } } } }; given 42 { default { say "vroom" }; say "doesn't get run ... ?" }

[10:51] <camelia> rakudo-moar 668dc5: OUTPUT«vroom␤␤doesn't get run ... ?␤␤»

[10:52] <timotimo> you don't even have to put it into a dynamic variable in scope, you can put it into PROCESS::

[10:52] <timotimo> at least i think so?

[10:55] <timotimo> so, yeah. never going to be able to analyze that statically :)

[10:55] <timotimo> until we have link-time analysis of things

[10:58] <MasterDuke> i updated the ticket with your examples

[11:00] *** domidumont left
[11:00] *** synopsebot6 joined
[11:00] *** Matthew[m] left
[11:00] *** tadzik left
[11:00] *** M-Illandan left
[11:00] <timotimo> that's not my fault!

[11:01] <Xliff_> MasterDuke: I've submitted patches to your issue. I can get circle.pl and test-suite-committers.pl working via changes to Plot.pm and Plot/Pie.pm

[11:01] <Xliff_> https://github.com/moritz/svg-plot/issues/10

[11:02] <Xliff_> https://github.com/moritz/svg-plot/issues/8

[11:02] <timotimo> anyway, synopsebot6 is up again

[11:02] <MasterDuke> timotimo: all will be forgiven if you just implement link-time analysis of things today

[11:02] <timotimo> no, i meant ... synopsebot6 came in and our matrix users died

[11:02] <MasterDuke> Xliff_: great

[11:03] <MasterDuke> timotimo: ahh, that makes more sense

[11:03] <Xliff_> MasterDuke: Now I'm bored, again.

[11:03] <Xliff_> 8-)

[11:03] <Xliff_> Also sleepy. So I guess I'll do that.

[11:03] <timotimo> Xliff_: have you been able to use GTK::Simple in the past?

[11:03] <timotimo> ah, ok

[11:03] <timotimo> you can sleep, of course :)

[11:03] <Xliff_> timotimo, never tried it.

[11:04] <timotimo> because GTK::Simple can't be installed on linux right now because it can't find a .dll it wants for some reason

[11:04] <Xliff_> timotimo, Are you tempting me? Sleep can wait for an interesting problem.

[11:04] <timotimo> not interesting, though ;)

[11:04] <Xliff_> Um.

[11:04] <Xliff_> linux and dll used in the same sentence? Does not compute! =)

[11:04] <timotimo> basically that's the issue :)

[11:05] <Xliff_> so .... s/dll/so/

[11:05] <timotimo> it tries to copy a lzma.dll or something

[11:05] <timotimo> no, it ought to use the system-supplied so files

[11:05] <timotimo> lzma doesn't make sense to me at all in this setting

[11:08] <Xliff_> libxml2-2 under windows aparently needs lzma.

[11:08] <timotimo> OK

[11:09] <Xliff_> Same under Linux.

[11:10] <Xliff_> I will try to install my local clone.

[11:10] <Xliff_> It says its up-to-date

[11:10] <timotimo> i suppose it's just because the resources in META6.json just has the dlls in there

[11:10] <Xliff_> Hmmm... no fpaste announcement?

[11:10] <Xliff_> http://fpaste.scsys.co.uk/532205

[11:10] <Xliff_> No.

[11:10] <Xliff_> Check the fpaste. libxml2 links against liblzma

[11:10] <timotimo> you're not understanding the problem here

[11:12] <Xliff_> I'm building so I can get context.

[11:12] <MasterDuke> .seen perlpilot

[11:12] <timotimo> it also takes like an hour to build all the stuff

[11:12] <yoleaux> I saw perlpilot 19 Aug 2016 21:40Z in #perl6: <perlpilot> perhaps

[11:13] <Xliff_> timotimo, I'm beginning to see that....

[11:13] *** tadzik joined
[11:14] <timotimo> Failed to open file /home/timo/perl6/ecosystem/gtk-simple/.panda-work/1471777961_1/resources/blib/lib/GTK/liblzma-5.dll: no such file or directory

[11:14] <timotimo> that's the error i'm complaining about

[11:16] <timotimo> and i think it's just resources: having all the dll in it that's breaking all platforms but windows

[11:16] <timotimo> i'm almost tempted to just touch all these paths in Build.pm if no download is needed

[11:18] *** xinming left
[11:18] *** xinming joined
[11:18] <Xliff_> Seen in last apt operation - "Setting up wayland-protocols (1.7-1) ..."

[11:18] <Xliff_> As long as there is no package starting with "yutani" we're good.....

[11:19] <Xliff_> timotimo, I'm looking. My install broke because it couldn't find libgtk....

[11:19] <MasterDuke> has anyone had a problem with temp files created by File::Temp disappearing earlier than they should?

[11:20] <timotimo> i'm commiting a very rough fix

[11:21] <dalek> gtk-simple: 8db5f12 | timotimo++ | Build.pm:

[11:21] <dalek> gtk-simple: on non-windows, just create empty files for dlls

[11:21] <dalek> gtk-simple: 

[11:21] <dalek> gtk-simple: so that we can actually install the damn thing. otherwise

[11:21] <dalek> gtk-simple: panda will just try to copy all the resource files and

[11:21] <dalek> gtk-simple: complain that the dlls do not exist.

[11:21] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/8db5f12232

[11:22] <Xliff_> timotimo: Which commit. It installed here with no problems once I installed libgtk-3-dev

[11:23] <timotimo> what? how?

[11:23] <Xliff_> Well... I should say that the tests have passed. It is in the installation phase, now.

[11:24] <pierre_> Hi, small question about multidimensional array and type

[11:24] <Xliff_> What commit level is your gtk-simple? It's quite possible I am on an old branch even though "git pull" said everything was up to date.

[11:24] <timotimo> i'm on 8db5f1 now :)

[11:24] <pierre_> m: my Int @a = ( 1, 2, 3);

[11:24] <camelia> rakudo-moar 668dc5: ( no output )

[11:24] <timotimo> god damn it. my commit didn't work apparently?

[11:25] *** rindolf left
[11:26] <pierre_> m: my Int @a = ( 1, 2, 3); say @a[1];

[11:26] <camelia> rakudo-moar 668dc5: OUTPUT«2␤»

[11:26] <pierre_> m: my Int @a = ( 1, 2; 3, 4); say @a[1;1];

[11:26] <camelia> rakudo-moar 668dc5: OUTPUT«Type check failed in assignment to @a; expected Int but got List ($(1, 2))␤  in block <unit> at <tmp> line 1␤␤»

[11:27] <pierre_> Is it possible to have a type shaped array?

[11:27] <Xliff_> Feck! Yeah. I was behind.

[11:27] <Xliff_> On my stale fork.

[11:27] <timotimo> ah, well :)

[11:27] * Xliff_ headdesks

[11:28] <Xliff_> Well, I will try again and see if it blows up.

[11:28] <timotimo> mhyup

[11:28] <timotimo> i think i b0rked it by not mkdir-ing the basedir

[11:29] <pierre_> m: my Int @a[2;2] = ( 1, 2; 3, 4); say @a[1;1];

[11:29] <camelia> rakudo-moar 668dc5: OUTPUT«4␤»

[11:29] <pierre_> hum, just need to figure out how to handle unknow size

[11:29] <pierre_> m: my Int @a[*;*] = ( 1, 2; 3, 4); say @a[1;1];

[11:29] <camelia> rakudo-moar 668dc5: OUTPUT«Jagged array shapes not yet implemented. Sorry. ␤  in block <unit> at <tmp> line 1␤␤»

[11:31] <pierre_> m: my Int @a[*;*] = ( 1, 2; 3, 4); say @a[1;*];

[11:31] <camelia> rakudo-moar 668dc5: OUTPUT«Jagged array shapes not yet implemented. Sorry. ␤  in block <unit> at <tmp> line 1␤␤»

[11:31] <timotimo> holy lord, this is so slow ...

[11:31] <pierre_> m: my Int @a[2;2] = ( 1, 2; 3, 4); say @a[1;*];

[11:31] <camelia> rakudo-moar 668dc5: OUTPUT«Partially dimensioned views of arrays not yet implemented. Sorry. ␤  in block <unit> at <tmp> line 1␤␤»

[11:32] *** ItayAlmog left
[11:34] <dalek> gtk-simple: e1d1aee | timotimo++ | Build.pm:

[11:34] <dalek> gtk-simple: needed to mkdir the basedir first.

[11:34] <dalek> gtk-simple: 

[11:34] <dalek> gtk-simple: also don't put those nasty backslashes for path seps

[11:34] <dalek> gtk-simple: on anything but windows.

[11:34] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/e1d1aeee30

[11:45] *** xiaomiao left
[11:49] *** xiaomiao joined
[11:51] *** firstdayonthejob joined
[11:51] <Xliff_> Failed to open file .../projects/gtk-simple/.panda-work/1471779562_1/resources/blib/lib/GTK/liblzma-5.dll: no such file or directory

[11:51] <Xliff_> Wheee.

[11:51] <timotimo> yup. but i fixed it in the mean time

[11:51] <timotimo> so you can sleep now if you want :)

[11:53] <Xliff_> Trying again.

[11:53] <Xliff_> This takes so long I can grab steal cat naps of 5 minutes and check. Rinse. Repeat.

[11:54] *** tbrowder joined
[11:56] <timotimo> :)

[11:58] <Xliff_> Fix confirmed.

[11:58] <Xliff_> Although I see what you mean about "rough"

[11:58] <timotimo> :)

[11:59] <tbrowder>  I just added a new issue for the docs ref sprintf and printf. After more consideration, I think the best way to go is to take one function as the master description and reference it from the other.  I think printf has the best description at the moment, but I defer to a consensus.  By the way, the reason I am looking at the issue is I found neither

[11:59] <tbrowder> description mentions use of the asterisk for programmatic formatting of precision and width.

[11:59] <timotimo> right now i have another annoying problem to deal with: i don't have my newest GPG key handy, and someone used it to send me mail

[12:00] <Xliff_> timotimo++

[12:00] <Xliff_> Now I sleep.

[12:00] *** Xliff_ is now known as Xliff_zzzz

[12:18] <tbrowder> p6: say 3

[12:18] <camelia> rakudo-moar 668dc5: OUTPUT«3␤»

[12:18] *** M-Illandan joined
[12:18] *** Matthew[m] joined
[12:19] <tbrowder> m: say 3

[12:19] <camelia> rakudo-moar 668dc5: OUTPUT«3␤»

[12:20] <moritz> fwiw I've invited Xliff++ as a contributor to the svg-plot repo.

[12:21] *** BenGoldberg left
[12:27] <timotimo> heyo moritz :)

[12:27] <timotimo> how's your trip? :)

[12:31] *** domidumont joined
[12:34] *** itaipu joined
[12:48] <masak> hi, #perl6

[12:48] *** Zoffix left
[12:49] <timotimo> hello, #masak

[12:53] * masak .oO( hello, masak-chan )

[12:59] *** mtatai joined
[13:00] *** mtatai left
[13:04] *** rindolf joined
[13:07] <TimToady> .oO(ohayo goes eye muss)

[13:11] * masak .oO( saw a dee, craw )

[13:16] *** gfldex joined
[13:17] <gfldex> ✉

[13:17] *** canopus left
[13:19] *** avenj left
[13:23] *** avenj joined
[13:23] *** avenj left
[13:23] *** avenj joined
[13:24] *** canopus joined
[13:36] *** ItayAlmog joined
[13:39] *** ItayAlmog left
[13:41] <dalek> doc: 1e9acb9 | (Tom Browder)++ | doc/Language/io.pod6:

[13:41] <dalek> doc: Add info on writing formatted strings to a file

[13:41] <dalek> doc: review: https://github.com/perl6/doc/commit/1e9acb95ab

[13:41] *** avenj left
[13:47] *** zacts joined
[13:50] *** canopus left
[13:52] *** mohae_ joined
[13:54] *** mohae left
[13:58] *** canopus joined
[14:00] *** canopus left
[14:00] *** zakharyas joined
[14:01] <moritz> timotimo: quite nice, thanks

[14:01] *** kurahaupo joined
[14:02] <moritz> leaving to more civilized areas (non-volume limited Internet :-) tomorrow

[14:03] <masak> \o/

[14:04] *** configX joined
[14:04] <moritz> very nice beach here, we all enjoy it very much

[14:04] <moritz> so much so that in a week, we've only had one day of sight seeing / exploring, and spent the rest just going to the beach :-)

[14:05] *** bPqArhZYBx left
[14:07] <moritz> afk again&

[14:07] *** zacts left
[14:09] *** canopus joined
[14:13] *** canopus left
[14:18] *** canopus joined
[14:19] *** uvhrLnsaYG joined
[14:19] *** uvhrLnsaYG left
[14:25] *** bob778 joined
[14:27] *** bob777 left
[14:27] *** bob778 is now known as bob777

[14:29] *** zacts joined
[14:31] *** guest247 joined
[14:31] *** configX left
[14:34] *** canopus left
[14:39] *** canopus joined
[14:49] <dalek> doc: 29a3726 | (Tom Browder)++ | doc/Language/io.pod6:

[14:49] <dalek> doc: Re-arrange and reword note on printf

[14:49] <dalek> doc: review: https://github.com/perl6/doc/commit/29a37268e5

[14:49] *** khw joined
[14:50] *** tbrowder left
[14:58] *** Secris joined
[14:58] *** Secris left
[14:58] *** Secris joined
[14:58] *** Secris left
[14:58] *** Secris joined
[15:05] *** freakcoco joined
[15:05] *** freakcoco left
[15:18] *** danaj left
[15:19] *** canopus left
[15:24] *** JoaquinFerrero joined
[15:25] *** canopus joined
[15:29] <lucs> Is there something analogous to Perl 5's ｢$#array｣ to get an array's last index?

[15:30] *** ufobat joined
[15:30] *** jferrero left
[15:31] *** danaj joined
[15:31] <CIAvash> lucs: @array.end

[15:31] <lucs> Aha, thanks.

[15:31] <grondilu> m: say (^10).end

[15:31] <camelia> rakudo-moar 668dc5: OUTPUT«9␤»

[15:35] *** JoaquinFerrero left
[15:44] <dalek> ecosystem/MARTIMM-patch-1: 3a69ebc | (Marcel Timmerman)++ | META.list:

[15:44] <dalek> ecosystem/MARTIMM-patch-1: PKCS #5 with PBKDF2

[15:44] <dalek> ecosystem/MARTIMM-patch-1: 

[15:44] <dalek> ecosystem/MARTIMM-patch-1: Partly implemented PKCS #5 with Key derivation function PBKDF2 from RFC2898

[15:44] <dalek> ecosystem/MARTIMM-patch-1: review: https://github.com/perl6/ecosystem/commit/3a69ebc6b1

[15:45] *** n1lp7r joined
[15:47] *** bob777 left
[15:53] *** smash_ is now known as smash

[15:55] *** pierre_ left
[15:59] *** n1lp7r left
[16:03] *** zakharyas left
[16:04] *** BenGoldberg joined
[16:05] *** Secris left
[16:16] <dalek> ecosystem: 3a69ebc | (Marcel Timmerman)++ | META.list:

[16:16] <dalek> ecosystem: PKCS #5 with PBKDF2

[16:16] <dalek> ecosystem: 

[16:16] <dalek> ecosystem: Partly implemented PKCS #5 with Key derivation function PBKDF2 from RFC2898

[16:16] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/3a69ebc6b1

[16:16] <dalek> ecosystem: f4e0e58 | (Zoffix Znet)++ | META.list:

[16:16] <dalek> ecosystem: Merge pull request #237 from perl6/MARTIMM-patch-1

[16:16] <dalek> ecosystem: 

[16:16] <dalek> ecosystem: PKCS #5 with PBKDF2

[16:16] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/f4e0e582e8

[16:21] *** AndyBotwin joined
[16:26] *** guest247 left
[16:29] *** zacts left
[16:33] *** domidumont left
[16:34] *** xdbr joined
[16:34] *** zacts joined
[16:37] *** TEttinger joined
[16:38] *** thowe joined
[16:38] <thowe> Hello

[16:41] *** canopus left
[16:48] *** canopus joined
[16:50] *** zakharyas joined
[16:53] <b2gills> m: camelia: say "hello thowe"

[16:53] <camelia> rakudo-moar 668dc5: OUTPUT«hello thowe␤»

[16:54] *** ufobat left
[16:54] *** ItayAlmog joined
[16:55] *** canopus left
[16:59] *** ItayAlmog left
[17:00] *** canopus joined
[17:06] *** autark joined
[17:06] <pmurias> how do I import the QAST classes into my Perl 6 program?

[17:10] *** itaipu left
[17:14] <pmurias> ahh, I was using :from<nqp> instead of :from<NQP>

[17:14] <pmurias> it would be great to have an error message for unsupported :froms

[17:21] *** espadrine left
[17:21] *** itaipu joined
[17:22] <timotimo> m: use foobar:from<durane>

[17:22] <camelia> rakudo-moar 668dc5: OUTPUT«===SORRY!===␤Could not find foobar at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6␤    CompUnit::Reposi…»

[17:22] <timotimo> ah, hmm.

[17:22] <pmurias> seems significantly LTA

[17:23] * TimToady about to board PIT -> ORD -> MUC -> CLJ

[17:25] *** Dunearhp left
[17:27] *** zengargoyle joined
[17:27] *** Dunearhp joined
[17:28] *** Dunearhp left
[17:29] *** canopus left
[17:31] *** mohae joined
[17:31] *** domidumont joined
[17:34] *** mohae_ left
[17:35] *** canopus joined
[17:38] *** zacts left
[17:40] <pmurias> I got a "Too few positionals passed; expected 2 arguments but got 1" error message without a stack trace, are those expected to sometimes happen?

[17:51] <pmurias> lack of stack trace golfed down: http://paste.debian.net/790824/

[17:58] *** felher left
[18:05] *** zakharyas left
[18:06] <dataangel> Is there a better way to write this?: my $object-file = (with-suffix $_, ".o").relative(%config{"SOURCE_FOLDER"});

[18:07] <dataangel> I really like being able to call functions without having to use parentheses

[18:07] <dataangel> But every permutation I try for this doesn't work, unless I use parentheses

[18:11] *** felher joined
[18:13] <pmurias> I don't think there is a better way than with-suffix($_, ".o").relative(%config<SOURCE_FOLDER>)

[18:15] <dataangel> Oh yeah not sure why I didn't think to do that for with-suffix... Didn't know you could index hashes that way though

[18:15] <dataangel> Got it down to: my $object-file = .&with-suffix(".o").relative(%config<SOURCE_FOLDER>);

[18:18] <pmurias> dataangel: is that better?

[18:18] <pmurias> or are you trying to golf things?

[18:18] *** mvorg left
[18:19] <dataangel> Honestly I don't know if it is or not, I'm a complete newbie so I don't know if it counts as good or bad style... It doesn't seem any worse to implicitly use .& on the topic variable than just . which people seem to do all over the place and examples

[18:20] <dataangel> s/and examples/in examples

[18:23] * pmurias mostly writes NQP

[18:23] <pmurias> .&foo seems to do something slightly different than foo($_)

[18:27] <dataangel> What do you mean? Like there is an actual behavior difference?

[18:31] <arnsholt> Well, the semantics are subtly different

[18:31] <arnsholt> .&foo calls foo as a method with $_ as the invocant

[18:31] <arnsholt> Of course that maps to $_ being passed as the first arg on a sub, so not sure if there's any *actual* difference

[18:33] *** zakharyas joined
[18:35] *** itaipu left
[18:39] <pmurias> if the object being called on overwrote dispatch:<var> there would be a difference

[18:43] *** setty1 left
[18:50] <dataangel> Why is this okay?: my %dependencies := set with-suffix $target, ".o"; but not this: my %dependencies := SetHash.new with-suffix $target, ".o"; ?

[18:50] <dataangel> For the latter I had to insert parentheses

[18:51] *** unmatched} left
[18:58] *** felher left
[19:00] *** vendethiel joined
[19:05] <arnsholt> dataangel: You need a colon, I think

[19:05] <arnsholt> SetHash.new:

[19:06] <arnsholt> There's a (parsing related, IIRC) reason why you can't do method invocations without parens and nothing else, but I can't remember what it is

[19:06] <gfldex> set is a sub, SetHash.new is a method

[19:06] <dataangel> arnsholt: that works as well, but then why do I need it in one case but not the other 

[19:06] <arnsholt> It's sub versus method, as gfldex pointed out

[19:06] <dataangel> For methods do you always have to use parentheses or the : ?

[19:07] <arnsholt> Yeah, it's either parens or colon

[19:08] <dataangel> Interesting, that actually clears up a lot

[19:11] *** felher joined
[19:13] *** CIAvash left
[19:14] *** smls joined
[19:15] *** cygx joined
[19:15] <cygx> o/

[19:15] <cygx> dataangel: you don't want something like p.x + p.y be parsed as p.x(+p.y)

[19:18] *** rba__ joined
[19:18] <dataangel> Is it safe to nest : ?

[19:19] <smls> m: say (1..3).map: *.subst: /2/, "a";

[19:19] <camelia> rakudo-moar 668dc5: OUTPUT«(1 a 3)␤»

[19:20] <smls> You mean like that?

[19:20] *** rba_ left
[19:22] <dataangel> Yes ;)

[19:22] *** rba_ joined
[19:22] <dataangel> I've just stumbled on the behavior of Nil letting you call any method on it and having it do nothing... It's really nice for prototyping

[19:23] *** domidumont left
[19:24] *** rba__ left
[19:33] *** darutoko left
[19:38] <dataangel> Why is Nil considered defined for the sake of return types while not being considered defined in all other contexts? Why the special case?

[19:44] <cygx> assuming that's by design and not a bug, I'd guess it's because Nil (like Failure) can be used to signal exeptional conditions in-band

[19:47] <pmurias> are error messages without line numbers expected from rakudo?

[19:47] <Xliff_zzzz> moritz: PRs created for both issues in SVG-Plot

[19:47] <Xliff_zzzz> Now I have to look and see if I can do other nifty things with it.

[19:50] *** brrt joined
[19:55] *** telex left
[19:56] *** telex joined
[19:57] *** wamba left
[19:59] *** setty1 joined
[19:59] <dataangel> I have a SetHash object containing IO::Paths and I want to write a new function that will take it as an argument, what is the most constraining type declaration I can use for the function argument and what is the syntax? SetHash:D %object-files doesn't work and neither does IO::Path:D %object-files which I thought might be would be what I wanted since apparently for declarations the type specifies the type of the elements inside so I

[19:59] <dataangel> thought it might work the same for function arguments 

[20:00] <brrt> hey, you know what occured to me earlier this week

[20:00] *** M-Illandan left
[20:00] *** Matthew[m] left
[20:00] *** tadzik left
[20:00] <brrt> perl5 doesn't have any protocol or solution for iterators

[20:00] <brrt> and.. it sucks

[20:02] <MasterDuke> dataangel: %hash{IO::Path}

[20:03] <MasterDuke> not sure about the SetHash part

[20:03] <gfldex> m: my SetHash[Int] %h;

[20:03] <camelia> rakudo-moar 668dc5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while parameterizing SetHash␤at <tmp>:1␤Exception details:␤  5===SORRY!5=== Error while compiling <tmp>␤  SetHash cannot be parameterized␤  at <tmp>:1␤  ------> 3my Set…»

[20:03] <MasterDuke> m: my SetHash %h{IO::Path}

[20:03] <camelia> rakudo-moar 668dc5: ( no output )

[20:04] *** rid joined
[20:04] <gfldex> dataangel: IO::Path as key or value?

[20:05] <cygx> gfldex: key - a SetHash should always has Bool as value type, doesn't it?

[20:05] <cygx> *have

[20:05] <gfldex> yes

[20:05] <BenGoldberg> brrt, perl5 doesn't have a builtin solution for iterators, but there are many modules on CPAN...

[20:05] <dataangel> Someone said yesterday that SetHash can't be parameterized, which is annoying but if I could at least constrain the function to say that it requires some form of SetHash that would at least be something... It's confusing because why use SetHash:D as the constraint the error I get is "expected SetHash but got Hash" even though SetHash is actually when I'm passing in o_O

[20:06] <dataangel> s/why use/when I use

[20:06] <cygx> dataangel: the type of % or @ variables sets the value contraint

[20:07] <cygx> m: say (my Int @foo).^name

[20:07] <camelia> rakudo-moar 668dc5: OUTPUT«Array[Int]␤»

[20:07] <cygx> m: say (my @foo of Array[Int]).^name

[20:07] <camelia> rakudo-moar 668dc5: OUTPUT«Array[Array[Int]]␤»

[20:07] <cygx> hm...

[20:07] *** CIAvash joined
[20:08] <brrt> BenGoldberg: i know. none of these modules are standard like the __iter__ method is in e.g. python

[20:08] <brrt> this sucks

[20:09] <mst> AlexDaniel: are you drunk? # https://github.com/perl6/doc/issues/850#issuecomment-241277646

[20:10] <brrt> it means that random perl hackers make modules that iterate over stuff and don't work together

[20:10] <gfldex> sub f(%h where .keyof ~~ IO::Path){ dd %h}; my %h{IO::Path}; %h{IO::Path.new("~/.vimrc")} = True; f %h

[20:10] <gfldex> dataangel: ^^^

[20:10] <AlexDaniel> mst: hello. No, that's just my opinion

[20:10] <AlexDaniel> mst: didn't mean to disappoint you :)

[20:10] <mst> AlexDaniel: your opinion didn't cover anything actually suggested though

[20:10] <mst> somebody proposes annotating the *first* example

[20:11] <BenGoldberg> brrt, In python, there is only one way to do things.  In perl, there are many.

[20:11] <mst> you argue against (1) changing the example (2) annotating *all* examples

[20:11] <mst> neither was proposed

[20:11] <BenGoldberg> Also, using modules from CPAN is *the* standard way of doing things.

[20:11] <mst> AlexDaniel: in light of that, perhaps you could have an opinion about the actual ticket? :)

[20:12] <AlexDaniel> mst: by annotating the first example we assume that the user will read the document from top to bottom, does it make any sense?

[20:12] <mst> a new perl5 person coming to perl6 is likely to read the 5to6 document from top to bottom

[20:12] <mst> in fact, I happen to know that that's exactly what masochist was doing

[20:12] <dataangel> ... The confusion deepens... Apparently using set operators on SetHash returns a hash, according to WHAT. All I want is a mutable set type that stays that type, instead I have documentation telling me that some SetHash operations will actually return sets and then when I try other operations I get hashes

[20:13] <brrt> no, this means that there is /no/ way i can make the N different iterators in $giant-codebase  can't work together unless i glue them

[20:13] <mst> if they skip half the document and become confused, well, that's a different problem

[20:13] <mst> brrt: yeah, that's somewhat annoying - most things seem to provide $iter->next that returns nothing when exhausted, but it's far from perfect

[20:14] <mst> I did at one point consider trying to get a standardised stream role and encourage people to conform to it

[20:14] <mst> but I never quite got round to making it exist

[20:14] *** tadzik joined
[20:14] <brrt> :-(

[20:14] <brrt> ties can't really do it

[20:14] *** smls left
[20:14] * brrt is going to sleep anyway

[20:14] <mst> the big problem, really, is that nobody really agrees on an object system

[20:14] <mst> so a standard interface is hard

[20:14] *** brrt left
[20:15] <BenGoldberg> List::Gen looks very much like what I'd like for a standardized interface... 

[20:15] <AlexDaniel> mst: well, if you insist on annotating the first example then yeah… I think that it's OK. Tomorrow someone will write another example on top of this one and the problem will appear again…

[20:16] <AlexDaniel> 🤷

[20:16] <mst> well, yes, that happens with documentation

[20:16] <mst> it doesn't mean we shouldn't *try* and not confuse people

[20:16] <rid> newbie question, if i may: my $array = []; my @array; say @array == $array; # prints true ... so what's the difference between @array and $array and why should I use one over the other?

[20:17] <mst> AlexDaniel: If you could post a less obnoxious comment to that effect, perhaps it would result in a patch

[20:18] *** ggoebel left
[20:18] <cygx> rid: wrong comparison operator: == is numeric comparison

[20:19] <cygx> rid: arrays contained in scalar variables are treated as single items for various purposes (eg iteration via for)

[20:19] <dataangel> m: my %built = SetHash.new; say %built.WHAT; # why doesn't it say SetHash?

[20:19] <camelia> rakudo-moar 668dc5: OUTPUT«(Hash)␤»

[20:19] <gfldex> rid: @-sigiled container must provide some interfaces, like iteration, array-subscripts etc. $-sigiled container may or may not do so. Also, there are different interpolation and assignment rules. see https://docs.perl6.org/language/list#List_Contexts

[20:20] <dalek> doc: 95cd619 | (Zoffix Znet)++ | doc/Language/5to6-nutshell.pod6:

[20:20] <dalek> doc: Add a blurb about dashes in identifiers

[20:20] <dalek> doc: 

[20:20] <dalek> doc: Closes #850

[20:20] <dalek> doc: review: https://github.com/perl6/doc/commit/95cd6197c4

[20:20] <cygx> dataangel: you need to use := or a $ sigil

[20:20] <AlexDaniel> ↑ that is actually a better solution

[20:20] <BenGoldberg> m: my $array = []; say +$array;

[20:20] <camelia> rakudo-moar 668dc5: OUTPUT«0␤»

[20:20] <AlexDaniel> and I stand corrected, there was an easy way to fix it

[20:21] <gfldex> rid: there are plenty of other spots in the docs that show the difference, as sigils are pretty much everywhere in Perl 6

[20:21] <cygx> dataangel: using = copies the contents of your SetHash into the Hash variable

[20:21] <rid> okay so the sigil gives you an idea of how it can be used, not just what it is?

[20:22] *** rindolf left
[20:22] <gfldex> rid: it's a plural singular thing. It's esp. useful in signatures.

[20:23] <gfldex> rid: see https://docs.perl6.org/type/Signature#Slurpy_(A.K.A._Variadic)_Parameters

[20:23] <gfldex> rid: defining slurpy arguments would be pretty wordy without the @-sigil

[20:24] *** tbrowder joined
[20:24] *** Possum left
[20:25] <dataangel> cygx: oh I thought the sigil was just going to control iteration behavior

[20:26] <rid> aha! that actually makes sense. ingenious use of *

[20:30] <dataangel> cygx: if I use := than the type is what I expected, thanks. But later I want to merge another SetHash into %built, and the only way I found to do that was: %built (|)= %old-dependencies; # but then this complains I can't modify an immutable SetHash... But I thought the entire difference between one of those and a set is that they're mutable, so I assume it's complaining that I'm trying to reassign the variable to a new object which

[20:30] <dataangel> isn't what I mean to do... Is there a different way I should be doing it? I don't see a method in the documentation like this, in python it would be the update method on set

[20:31] *** ggoebel joined
[20:31] *** zakharyas left
[20:31] *** lizmat joined
[20:32] *** leedo left
[20:32] *** leego joined
[20:33] <pmurias>  my \Δ = 72; in the identifiers section of the 5to6 nutshell seems like something that could be explained

[20:34] <cygx> dataangel: I guess the SetHash interface could use some improvements

[20:34] *** rid left
[20:34] <cygx> what you can do is %built{%old-deps.keys} = True xx *

[20:35] <geekosaur> I thought SetHash and friends were up for an overhaul

[20:35] <geekosaur> (waiting, inevitably, on round tuits)

[20:36] <cygx> that may very well be - I've not followed the post-Christmas developments in P6-land very closely

[20:39] *** rindolf joined
[20:40] <gfldex> m: dd my $sh = SetHash.new; $sh.append(:1th)

[20:40] <camelia> rakudo-moar 668dc5: OUTPUT«SetHash $sh = SetHash.new()␤Cannot resolve caller append(SetHash: Int); none of these signatures match:␤    (Any:U \SELF: |values is raw)␤  in block <unit> at <tmp> line 1␤␤»

[20:40] *** lizmat left
[20:41] *** lizmat joined
[20:42] *** labster joined
[20:46] <pmurias> is there a way to get .gist/.perl for a instance of a class with indentation?

[20:47] *** mvorg joined
[20:48] <gfldex> pmurias: there are datadumper modules with pretty-printing in the ecosystem

[20:51] *** n1lp7r joined
[20:52] *** jferrero joined
[20:57] *** n1lp7r left
[20:59] *** _ramix_ joined
[21:02] <pmurias> gfldex: Data::Dump seems to be working

[21:03] <pmurias> I need to make a PR to it to enable turning of the printing out of all the avalible methods

[21:04] <_ramix_> Hello! I need to know if the method listen of IO::Socket::Async is able to get the remote address from a remote client connection. It's possible? Thanks!

[21:04] *** Possum joined
[21:07] *** gfldex left
[21:07] *** lizmat left
[21:09] <geekosaur> doesn't look like that exists at present :(

[21:10] <geekosaur> (even more worrisome, nothing in IO::Socket or IO::Socket::INET either)

[21:10] *** woolfy joined
[21:13] *** lizmat joined
[21:13] <_ramix_> I have found that the method native-descriptor of IO::Socket::INET refers to "socket descriptor". Perhaps I found it there, but it seems very esoteric. Thanks also.

[21:15] <geekosaur> yes, if you can get to that then you can getpeeraddr() via NativeCall. but you shouldn't have to go through those gyrations imo

[21:19] *** M-Illandan joined
[21:19] *** Matthew[m] joined
[21:20] <_ramix_> Indeed, it should be easier. I hope that incorporate this functionality in Rakudo Perl6. Thanks!

[21:23] *** CIAvash left
[21:25] <geekosaur> best is not to just say it here, but file a rakudobug

[21:26] <geekosaur> "Bug reports should be sent to “rakudobug@perl.org” with the moniker [BUG](including the brackets) at the start of the subject"

[21:26] <_ramix_> thx

[21:28] *** _ramix_ left
[21:28] *** synopsebot6 left
[21:28] *** synopsebot6 joined
[21:30] *** woolfy1 joined
[21:30] *** woolfy left
[21:32] <MasterDuke> question about LEAVE: in a sub, there are a couple places it returns values. i want to do a chdir whenever the sub is left, so i thought i could just 'LEAVE chdir <path>' and not have to put a chdir before every return

[21:32] <MasterDuke> however, the explicit return values in the sub are getting overwritten by the result of the chdir

[21:33] <MasterDuke> any way to get around this?

[21:33] *** pmurias left
[21:35] *** albongo joined
[21:39] <ugexe> m: sub foo { LEAVE { chdir ".." }; 100 }; say foo()

[21:39] <camelia> rakudo-moar 668dc5: OUTPUT«100␤»

[21:40] <MasterDuke> m: sub foo { LEAVE chdir ".."; 100 }; say foo()

[21:40] <camelia> rakudo-moar 668dc5: OUTPUT«100␤»

[21:40] <MasterDuke> m: sub foo { LEAVE chdir ".."; return 100 }; say foo()

[21:40] <camelia> rakudo-moar 668dc5: OUTPUT«100␤»

[21:43] <MasterDuke> hmm, not sure what's going on

[21:44] <ugexe> i assumed you were doing this

[21:44] <ugexe> m: sub foo { 100; LEAVE { chdir ".." }; }; say foo()

[21:44] <camelia> rakudo-moar 668dc5: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant integer 100 in sink context (line 1)␤Nil␤»

[21:44] *** rid joined
[21:45] <MasterDuke> m: sub foo { return 100; LEAVE { chdir ".." }; }; say foo()

[21:45] <camelia> rakudo-moar 668dc5: OUTPUT«100␤»

[21:48] *** DarthGandalf left
[21:49] *** DarthGandalf joined
[21:49] <MasterDuke> ugexe: when this ( https://github.com/perl6/whateverable/blob/master/Bisectable.p6#L228 ) line is hit the the $value in this ( https://github.com/perl6/whateverable/blob/master/Bisectable.p6#L137 ) line is not “‘bisect run’ failure”

[21:56] <geekosaur> m: sub foo { return 100; LEAVE chdir ".." }; say foo()

[21:56] <camelia> rakudo-moar 668dc5: OUTPUT«100␤»

[21:56] <geekosaur> m: sub foo { { return 100; LEAVE chdir ".." } }; say foo()

[21:56] <camelia> rakudo-moar 668dc5: OUTPUT«"/home".IO␤»

[21:56] <geekosaur> golfed

[21:57] <MasterDuke> yep, just figured that out

[21:58] <MasterDuke> the sad thing is, that was the very code i was bisecting with to test!

[22:07] *** autark left
[22:07] *** labster left
[22:10] *** lizmat left
[22:12] *** TEttinger left
[22:13] *** cygx left
[22:14] *** MilkmanDan left
[22:14] *** firstdayonthejob left
[22:15] *** MilkmanDan joined
[22:17] *** labster joined
[22:20] *** skids joined
[22:24] *** Eduardo_ joined
[22:24] <Eduardo_> I'm thinking about creating a NoSQL system using Perl6 - any thoughts on that, friends? tx

[22:26] <Eduardo_>  Idea is to have .pl files being like the MongoDB documents which would allow for sharding and inside, have classes representing items or roles representing items, not sure which already

[22:26] <woolfy1> Hey Eduardo, nice to see you here,

[22:26] <Eduardo_> tx wollfy

[22:27] <Eduardo_> woolfy

[22:27] <woolfy1> Wga van Dijk here (as my name is on Facebook)'

[22:27] <Eduardo_> oh

[22:27] <Eduardo_> great

[22:27] <woolfy1> Hehe

[22:27] <Eduardo_> tx

[22:27] <Eduardo_> should i paste code here too?

[22:27] <woolfy1> Well, it's night now.  For some reason, most Perl 6 developers are from Europe.  So, please be patieent.

[22:27] <woolfy1> patient'

[22:28] <Eduardo_> or there is a specific forum for that?

[22:28] <Eduardo_> sure

[22:28] <Eduardo_> no rush

[22:28] <woolfy1> You can paste code here, but in small amounts, as concise as possible.

[22:29] <TimToady> otherwise use some nopaste site like gist.github.com

[22:29] <woolfy1> There is also a mailing list (see http://perl6.org/community/ ) where you can send a mail with bigger chuncks of code.  Irc is just not suitable for shuch chunkcs of code.

[22:29] <Eduardo_> well, perl is an elegant language, i guess that would be the reason :)

[22:29] * TimToady sitting at ORD

[22:30] <woolfy1> TimToady!  Looking forward to meet you in Cluj!!!

[22:30] <Eduardo_> what is cluj?

[22:30] <TimToady> m: say "I am a small amount of code" # :)

[22:30] <camelia> rakudo-moar 668dc5: OUTPUT«I am a small amount of code␤»

[22:30] * woolfy1 is sitting in Hungary...

[22:31] <woolfy1> (driving with lizmat by car from The Netherlands via Germany, Czech, Slowakia and Hungary to Romania)

[22:31] <woolfy1> TimToady++

[22:31] <Eduardo_> well, just had this idea of using Perl6 cool OO "new abilities" to develop a NoSQL system

[22:32] <Eduardo_> meta-programming pieces of .pl files that should act as data

[22:33] <Eduardo_> still carrying the ability to run its code

[22:34] <thowe> at some point rakudo stopped running for me, and it also fails to build...

[22:34] <thowe> it would run, but never give the prompt.

[22:35] <thowe> so I tried doing rakudo self-upgrade and rakudo build moar

[22:35] <TimToady> rakudobrew?

[22:35] <thowe> er yes, sorry

[22:35] <thowe> running again so I can give a real error message...

[22:36] <TimToady> I just pulled and made, so HEAD seems fine

[22:36] <thowe> is there a preferred pastebin?

[22:36] <TimToady> I usually use gist.github.com

[22:37] *** MilkmanDan left
[22:37] <thowe> sounds good...

[22:37] <TimToady> but I only have 4 minutes of internet left...

[22:37] <Eduardo_> Tim, do you think a NoSQL database system built with Perl6 is a good idea?

[22:38] <TimToady> I don't actually answer to "Tim"...

[22:38] <thowe> https://gist.github.com/thowe/540cbf8c7a904d0af7eb180409869fa3

[22:38] <TimToady> but hey, the more the merrier

[22:38] *** bjz left
[22:39] <TimToady> thowe: how much memory do you have?  you need about a gig

[22:39] <Eduardo_> who do you answer to? :)

[22:39] <TimToady> I answer to my wife :)

[22:39] <Eduardo_> lol

[22:40] <TimToady> looks like we're boarding now

[22:40] *** rid left
[22:40] <TimToady> afk &

[22:40] <thowe> I have 4Gig in this machine

[22:40] <jdv79> good luck

[22:40] <jdv79> er, safe travels

[22:41] <thowe> but don't let me keep you

[22:41] <woolfy1> Good journey, TomToady!

[22:42] <jdv79> who's TodToady?

[22:42] <thowe> hm, something may be odd, I should try a reboot maybe.

[22:43] <thowe> I'm not running anything of note, but more than half my mem seems to not be free

[22:45] *** DarthGandalf left
[22:45] *** rindolf left
[22:45] <woolfy1> Pff. I am drunk,  I mean TimToady

[22:45] <thowe> Oh, well.  I'll go for a walk and then worry about it later.

[22:46] *** thowe left
[22:46] <Eduardo_> TimToady for president!!! yay

[22:48] <woolfy1> Ow, that would be so much better than Trump, Clinton, Stein or Johnson...

[22:48] <Eduardo_> sure would!

[22:49] <jdv79> woolfy1: why do you know so many us candidates?

[22:49] *** Kaffe left
[22:50] *** DarthGandalf joined
[22:51] <woolfy1> idv79: it's a skill called "reading".  Too many Americans lost that skill.

[22:54] <jdv79> ive heard reading is hard.

[22:55] <jdv79> but you are in nl, right?  i guess im still surprised so many non-us peeps pay attention to our political shenanigans.

[22:57] <woolfy1> jdv79: some Dutch people understand the importance of who is going to be the next US president...

[22:57] <woolfy1> just as some people understand how important Perl 6 is to all the programming communities worldwide...

[22:57] <jdv79> ah:)

[23:01] *** MilkmanDan joined
[23:02] *** bbkr joined
[23:02] *** woolfy1 left
[23:06] *** labster left
[23:07] <bbkr> r: my Int @t = Int; sub foo (Int:D @x) {}; foo(@t); # should this fail with "...requires an instance of type Int, but a type object was passed." error?

[23:07] <camelia> rakudo-moar 668dc5, rakudo-jvm cd19db: ( no output )

[23:16] *** bbkr left
[23:16] *** mcmillhj joined
[23:19] <geekosaur> probably should but I don't think rakudo makes any attempt to handle :D or :U applied within containers

[23:19] <geekosaur> (also that seems like a nice way to slow a program down a lot...)

[23:24] *** mvorg left
[23:25] *** cognominal joined
[23:27] *** mcmillhj left
[23:33] *** Sgeo_ joined
[23:33] *** kurahaupo left
[23:34] *** Sgeo left
[23:37] *** RabidGravy left
[23:38] *** mcmillhj joined
[23:43] *** mcmillhj left
[23:45] *** baest left
[23:50] *** baest joined
[23:58] *** faubi joined
