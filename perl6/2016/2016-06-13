[00:17] *** ssotka left
[00:22] *** vytas left
[00:28] *** vytas joined
[00:28] *** wbill joined
[00:37] *** pierrot left
[00:43] *** ssotka joined
[00:48] *** tardisx joined
[00:49] *** tardisx left
[00:54] *** kid511 left
[00:54] *** kid51 joined
[00:54] *** tardisx joined
[00:55] *** KillBill joined
[00:57] <raydiak> .u —

[00:57] <yoleaux> U+2014 EM DASH [Pd] (—)

[00:58] *** tardisx left
[01:16] *** molaf left
[01:18] *** stevieb left
[01:20] *** Actualeyes joined
[01:28] *** matiaslina left
[01:29] *** molaf joined
[01:39] *** yqt left
[01:39] *** bjz left
[01:55] *** sortiz joined
[01:56] *** Khisanth left
[01:59] <sortiz> star-m: class Foo { submethod BUILD { fail "noway" } } ; dd Foo.new;

[01:59] <camelia> star-m 2016.04: OUTPUT«noway␤  in submethod BUILD at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[01:59] <sortiz> m: class Foo { submethod BUILD { fail "noway" } } ; dd Foo.new; # fail broken?

[01:59] <camelia> rakudo-moar 5d4949: OUTPUT«Foo.new␤»

[02:00] <geekosaur> m: class Foo { submethod BUILD { fail "noway" } } ; say Foo.new; # fail broken?

[02:00] <camelia> rakudo-moar 5d4949: OUTPUT«Foo.new␤»

[02:00] <geekosaur> hm

[02:00] <geekosaur> would have expected a delayed exception

[02:00] <sortiz> That new, and broken some modules! :-(

[02:01] *** Khisanth joined
[02:02] <sortiz> star-m: class Foo { submethod BUILD { fail "noway" } } ; with Foo.new { say "good" } else { .fail }

[02:02] <camelia> star-m 2016.04: OUTPUT«noway␤  in submethod BUILD at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[02:02] <sortiz> m: class Foo { submethod BUILD { fail "noway" } } ; with Foo.new { say "good" } else { .fail }

[02:02] <camelia> rakudo-moar 5d4949: OUTPUT«good␤»

[02:06] <sortiz> bisect: class Foo { submethod BUILD { fail "noway" } } ; Foo.new ~~ Failure;

[02:06] <bisectable> sortiz: exit code on a “good” revision is 1 (which is bad), bisecting with inverted logic

[02:06] <bisectable> sortiz: (2016-06-11) https://github.com/rakudo/rakudo/commit/d5e09d9

[02:10] *** agwind joined
[02:10] <sortiz> .tell lizmat Seems that d5e09d9 broke Failure handling at BUILD, see: http://irclog.perlgeek.de/perl6/2016-06-13#i_12653483

[02:10] <yoleaux> sortiz: I'll pass your message to lizmat.

[02:18] *** sigstuff_ joined
[02:20] *** sigstuff_ left
[02:20] *** kid51 left
[02:22] *** huggable left
[02:22] *** huggable joined
[02:27] *** mr-foobar left
[02:29] *** mr-foobar joined
[02:29] *** bjz joined
[02:30] *** noganex_ joined
[02:33] *** noganex left
[02:35] *** bjz left
[02:39] *** mr-foobar left
[02:40] *** mr-foobar joined
[02:41] *** BenGoldberg joined
[02:44] <sortiz> rakudobuged at RT#128393

[02:44] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128393

[02:55] *** wbill left
[02:59] *** bjz joined
[03:02] *** cpage left
[03:03] *** cpage__ joined
[03:04] <agwind> When writing an action for a grammar, does any one know the best way to grab the sub token's from a grouping?  https://gist.github.com/agwind/055b50c52026845c4b5d1c9b100f28d8#file-grammartest-pl-L12  $/ is a nested structure and I'm drawing a blank.

[03:04] *** cpage_ left
[03:04] *** cpage__ is now known as cpage_

[03:10] *** torbjorn left
[03:11] <Zoffix> agwind, it'd be $<number> and $<period> if you weren't repeating the captures... Ummm.

[03:13] <Zoffix> m: '123456' ~~ /($<number>=\d) ** 0..*/; .<number>.say for $/[0]

[03:13] <camelia> rakudo-moar 5d4949: OUTPUT«｢1｣␤｢2｣␤｢3｣␤｢4｣␤｢5｣␤｢6｣␤»

[03:22] <Zoffix> m: https://gist.github.com/zoffixznet/7ad25eb0a35382a4b33d78d00c205230

[03:22] <camelia> rakudo-moar 5d4949: OUTPUT«1,2,3,2␤»

[03:22] <Zoffix> agwind, ^ no idea if that's the best way, but it works.

[03:22] * Zoffix goes to bed

[03:22] *** torbjorn joined
[03:23] <Zoffix> P.S.: ** 0..* can be replaced with just *

[03:23] <agwind> I like it!  ty.  I used an attribute in my action.. but I just thought there might be something better. 

[03:24] <agwind> https://gist.github.com/agwind/deaad9b98b77efd6747890fc2049cb79

[03:26] <BenGoldberg> m: '123456' ~~ /($<number>=\d)*/; .<number>.say for $/[0];

[03:26] <camelia> rakudo-moar 5d4949: OUTPUT«｢1｣␤｢2｣␤｢3｣␤｢4｣␤｢5｣␤｢6｣␤»

[03:32] <timeless> wow, you can ask camelia to run a pastebin?

[03:32] <yoleaux> 11 Jun 2016 22:22Z <AlexDaniel> timeless: This leaves us with no open pull requests from you :) Time to submit new ones, perhaps? Thank you for your efforts!

[03:33] *** skids joined
[03:34] <geekosaur> only form gist, I think

[03:39] *** ggoebel116 left
[03:49] *** CQ2 joined
[03:52] *** CQ left
[03:52] *** CQ2 is now known as CQ

[03:54] *** bjz_ joined
[03:56] *** bjz left
[04:01] *** agwind left
[04:02] *** KillBill left
[04:14] *** Cabanossi left
[04:16] *** Cabanossi joined
[04:24] <timeless> m: my %tokenmap = <% percent # hash - dash . dot ? question>; %tokenmap.keys.join;

[04:24] <camelia> rakudo-moar 5d4949: ( no output )

[04:24] <timeless> m: my %tokenmap = <% percent # hash - dash . dot ? question>; say %tokenmap.keys.join;

[04:24] <camelia> rakudo-moar 5d4949: OUTPUT«?%.-#␤»

[04:25] <timeless> m: my %tokenmap = <% percent # hash - dash . dot ? question>; sub english-for-tokens($message) {my $tokens = %tokenmap.keys.join;$message = $message ~~ s/($tokens)/%tokenmap{$1}-/:g;$message = $message ~~ s/-$//;return $message;} say english-for-tokens("%")

[04:25] <camelia> rakudo-moar 5d4949: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤You can't adverb ␤at <tmp>:1␤------> 3message ~~ s/($tokens)/%tokenmap{$1}-/:g7⏏5;$message = $message ~~ s/-$//;return $m␤    expecting any of:␤        pair value␤»

[04:26] <timeless> m: my %tokenmap = <% percent # hash - dash . dot ? question>; sub english-for-tokens($message) {my $tokens = %tokenmap.keys.join;$message = $message ~~ s:g/($tokens)/%tokenmap{$1}-/;$message = $message ~~ s/-$//;return $message;} say english-for-tokens("%")

[04:26] <camelia> rakudo-moar 5d4949: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter - (must be quoted to match literally)␤at <tmp>:1␤------> 3tokenmap{$1}-/;$message = $message ~~ s/7⏏5-$//;return $message;} say english-for-t␤Unrecognized regex metacharacter $ (must be quot…»

[04:26] <timeless> m: my %tokenmap = <% percent # hash - dash . dot ? question>; sub english-for-tokens($message) {my $tokens = %tokenmap.keys.join;$message = $message ~~ s:g/($tokens)/%tokenmap{$1}-/;$message = $message ~~ s/\-$//;return $message;} say english-for-tokens("%")

[04:26] <camelia> rakudo-moar 5d4949: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3 = $message ~~ s/\-$//;return $message;}7⏏5 say english-for-tokens("%")␤    expecting any of:␤        infix␤        …»

[04:27] <timeless> m: my %tokenmap = <% percent # hash - dash . dot ? question>; sub english-for-tokens($message) {my $tokens = %tokenmap.keys.join;$message = $message ~~ s:g/($tokens)/%tokenmap{$1}-/;$message = $message ~~ s/\-$//;return $message;};say english-for-tokens("%")

[04:27] <camelia> rakudo-moar 5d4949: OUTPUT«Cannot assign to a readonly variable or a value␤  in sub english-for-tokens at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[04:27] <timeless> um, that's unhelpful

[04:29] <timeless> m: sub x($z){ return $z}; say x(2)+3;

[04:29] <camelia> rakudo-moar 5d4949: OUTPUT«5␤»

[04:29] <timeless> m: my %tokenmap = <% percent # hash - dash . dot ? question>; sub english-for-tokens($message) {my $tokens = %tokenmap.keys.join;return $tokens;};say english-for-tokens("%")

[04:29] <camelia> rakudo-moar 5d4949: OUTPUT«?%.-#␤»

[04:29] <timeless> m: my %tokenmap = <% percent # hash - dash . dot ? question>; sub english-for-tokens($message) {my $tokens = %tokenmap.keys.join;$message = $message ~~ s:g/($tokens)/%tokenmap{$1}-/;return $message;};say english-for-tokens("%")

[04:29] <camelia> rakudo-moar 5d4949: OUTPUT«Cannot assign to a readonly variable or a value␤  in sub english-for-tokens at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[04:30] <timeless> m: my %tokenmap = <% percent # hash - dash . dot ? question>; sub english-for-tokens($message) {my $tokens = %tokenmap.keys.join;$message ~~ s:g/($tokens)/%tokenmap{$1}-/;return $message;};say english-for-tokens("%")

[04:30] <camelia> rakudo-moar 5d4949: OUTPUT«%␤»

[04:30] <timeless> m: my %tokenmap = <% percent # hash - dash . dot ? question>; sub english-for-tokens($message) {my $tokens = %tokenmap.keys.join;$message ~~ s:g/($tokens)/%tokenmap{$1}-/;$message ~~ s/\-$//;return $message;};say english-for-tokens("%")

[04:30] <camelia> rakudo-moar 5d4949: OUTPUT«%␤»

[04:30] <timeless> m: my %tokenmap = <% percent # hash - dash . dot ? question>; sub english-for-tokens($message) {my $tokens = %tokenmap.keys.join;$message ~~ s:g/($tokens)/%tokenmap{$1}-/;$message ~~ s/\-$//;return $tokens~" "~$message;};say english-for-tokens("%")

[04:30] <camelia> rakudo-moar 5d4949: OUTPUT«?%.-# %␤»

[04:32] <timeless> m: my %tokenmap = <% percent # hash - dash . dot ? question>; sub english-for-tokens($message) {my $tokens = %tokenmap.keys.join;$message ~~ s:gx/([$tokens])/%tokenmap{$1}-/;$message ~~ s/\-$//;return $message;};say english-for-tokens("%")

[04:32] <camelia> rakudo-moar 5d4949: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Adverb gx not allowed on substitution␤at <tmp>:1␤------> 3sage ~~ s:gx/([$tokens])/%tokenmap{$1}-/7⏏5;$message ~~ s/\-$//;return $message;};s␤»

[04:33] <timeless> m: my %tokenmap = <% percent # hash - dash . dot ? question>; sub english-for-tokens($message) {my $tokens = %tokenmap.keys.join;$message ~~ s:ge/([$tokens])/%tokenmap{$1}-/;$message ~~ s/\-$//;return $message;};say english-for-tokens("%")

[04:33] <camelia> rakudo-moar 5d4949: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Adverb ge not allowed on substitution␤at <tmp>:1␤------> 3sage ~~ s:ge/([$tokens])/%tokenmap{$1}-/7⏏5;$message ~~ s/\-$//;return $message;};s␤»

[04:35] *** vibha left
[04:39] *** sortiz left
[04:39] *** BenGoldberg left
[04:41] *** BenGoldberg joined
[04:45] <BenGoldberg> m: my %tokenmap = <% percent # hash - dash . dot ? question>; sub english-for-tokens($message) {my $tokens = %tokenmap.keys.join;$message ~~ s:g:e/([$tokens])/%tokenmap{$1}-/;$message ~~ s/\-$//;return $message;};say english-for-tokens("%")

[04:45] <camelia> rakudo-moar 5d4949: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Adverb e not allowed on substitution␤at <tmp>:1␤------> 3age ~~ s:g:e/([$tokens])/%tokenmap{$1}-/7⏏5;$message ~~ s/\-$//;return $message;};s␤»

[04:47] *** skids left
[04:53] *** khw left
[04:55] *** sortiz joined
[05:02] *** mr-foobar left
[05:07] *** sno left
[05:25] *** mls joined
[05:37] *** setty1 left
[05:56] *** wamba joined
[06:00] *** grondilu joined
[06:02] *** CIAvash joined
[06:02] *** BenGoldberg left
[06:13] *** sno joined
[06:16] *** bjz joined
[06:16] *** bjz_ left
[06:22] *** huggable left
[06:22] *** huggable joined
[06:23] *** rurban_ joined
[06:30] *** domidumont joined
[06:34] *** salv0 left
[06:35] *** domidumont left
[06:35] *** domidumont joined
[06:37] *** firstdayonthejob joined
[06:42] <go|dfish>  

[06:43] *** firstdayonthejob left
[06:45] *** domidumont left
[06:47] <nine> dogbert17: but it's used by htmlify.p6 :)

[06:48] *** kurahaupo left
[06:56] <moritz> jnthn++ # https://6guts.wordpress.com/2016/06/12/grinding-out-performance-improvements/

[07:01] *** abraxxa joined
[07:02] *** RabidGravy joined
[07:03] *** domidumont joined
[07:03] *** domidumont left
[07:07] *** cognominal joined
[07:08] *** wtw joined
[07:10] *** abraxxa left
[07:11] *** abraxxa joined
[07:13] *** darutoko joined
[07:17] *** zakharyas joined
[07:20] *** ufobat joined
[07:20] *** wamba left
[07:23] *** wamba joined
[07:26] *** zakharyas left
[07:26] *** zakharyas joined
[07:32] *** zakharyas left
[07:32] *** _mg_ joined
[07:33] *** zakharyas joined
[07:36] *** ssotka left
[07:38] *** pdcawley joined
[07:39] *** cpage_ left
[07:41] *** cpage_ joined
[07:43] *** _mg_ left
[07:48] *** dakkar joined
[07:51] *** g4 joined
[07:51] *** g4 left
[07:51] *** g4 joined
[08:01] *** vibha joined
[08:08] *** hanekomu joined
[08:10] *** hanekomu_ joined
[08:10] *** hanekomu_ left
[08:13] *** araujo joined
[08:13] *** AlexDaniel joined
[08:14] *** araujo left
[08:14] <AlexDaniel> timeless: you can also use bitbucket snippets and gitlab snippets

[08:15] *** araujo joined
[08:16] *** araujo left
[08:17] *** araujo joined
[08:17] <dalek> doc: 1827324 | (Wenzel P. P. Peppmeyer)++ | doc/Language/classtut.pod:

[08:17] <dalek> doc: doc the also declarator

[08:17] <dalek> doc: review: https://github.com/perl6/doc/commit/18273246a1

[08:18] *** araujo left
[08:19] *** araujo joined
[08:26] *** ocbtec joined
[08:31] <dalek> doc: b6d194d | (Wenzel P. P. Peppmeyer)++ | doc/Language/classtut.pod:

[08:31] <dalek> doc: add also to the index

[08:31] <dalek> doc: review: https://github.com/perl6/doc/commit/b6d194d978

[08:32] *** hanekomu left
[08:32] *** hanekomu joined
[08:32] *** AlexDaniel left
[08:45] *** iH2O joined
[08:46] <lizmat> .

[08:46] <yoleaux> 02:10Z <sortiz> lizmat: Seems that d5e09d9 broke Failure handling at BUILD, see: http://irclog.perlgeek.de/perl6/2016-06-13#i_12653483

[08:46] <lizmat> looking into it

[08:49] <sortiz> lizmat, Seems that 'cus nqp::while don't sink, if BUILD (BUILDALL case 0) returns a Failure, it is only stored.

[08:49] <lizmat> yeah...  :-)

[08:49] *** girafe left
[08:50] <lizmat> spectesting a fix now

[08:51] <lizmat> sortiz: could you write a test for it ?

[08:53] <sortiz> sure.

[08:53] <lizmat> sortiz++

[08:56] <sortiz> moreover, while digging the issue, nqp::while surprised me:

[08:56] <sortiz> m: use nqp; my int $i = 0; nqp::while(nqp::islt_i($i,10),($i = nqp::add_i($i,1))).say

[08:56] <camelia> rakudo-moar 5d4949: OUTPUT«(1 2 3 4 5 6 7 8 9 10)␤»

[08:56] <lizmat> hmmm... indeed surprising

[08:56] <sortiz> So, don't sink 'cus store all values!

[08:57] <lizmat> wonder what jnthn would want to say about that

[08:57] <sortiz> nqp::while used in p6 produces a Seq!

[08:59] *** rindolf joined
[08:59] <sortiz> Yep, wonder that too.

[08:59] <psch> fwiw, it makes sense to me

[09:00] <psch> nqp::while is a statement level while, the Perl 6 equivalent is "do while ... { ... }"

[09:00] <psch> m: my $i = 0 ;say do while $i < 10 { ++$i }

[09:00] <camelia> rakudo-moar 5d4949: OUTPUT«(1 2 3 4 5 6 7 8 9 10)␤»

[09:01] <psch> although its not documented either way in nqp/doc/ops.markdown vOv

[09:02] *** zakharyas left
[09:03] <lizmat> sortiz: fix pushed: https://github.com/rakudo/rakudo/commit/b351d61006

[09:03] *** zakharyas joined
[09:04] <sortiz> lizmat++

[09:07] <iH2O> is this valid perl6 --var++

[09:09] <DrForr> m: my $x; --$x++; $x

[09:09] <camelia> rakudo-moar 5d4949: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Only identical operators may be list associative; since '--' and '++' differ, they are non-associative and you need to clarify with parentheses␤at <tmp>:1␤------> 3my $x; --$x++7⏏5; $x␤    expect…»

[09:09] <gfldex> m: my $i = 0; say (--$i)++;

[09:09] <camelia> rakudo-moar 5d4949: OUTPUT«Cannot resolve caller postfix:<++>(Int); none of these signatures match:␤    (Mu:D $a is rw)␤    (Mu:U $a is rw)␤    (Int:D $a is rw)␤    (int $a is rw)␤    (Bool:U $a is rw)␤    (Bool:D $a is rw)␤    (Num:D $a is rw)␤    (Num:U $a is rw)…»

[09:10] <DrForr> You can also run "perl6 -e'my $x; --$x++'" at your command prompt :)

[09:10] <gfldex> m: my $i = 0; say $i.&prefix:<-->.&postfix:<++>;

[09:10] <camelia> rakudo-moar 5d4949: OUTPUT«Cannot resolve caller postfix:<++>(Int); none of these signatures match:␤    (Mu:D $a is rw)␤    (Mu:U $a is rw)␤    (Int:D $a is rw)␤    (int $a is rw)␤    (Bool:U $a is rw)␤    (Bool:D $a is rw)␤    (Num:D $a is rw)␤    (Num:U $a is rw)…»

[09:10] <psch> m: use nqp; my $x; say nqp::iscont(--$x)

[09:10] <camelia> rakudo-moar b351d6: OUTPUT«0␤»

[09:11] <psch> m: say --5

[09:11] <camelia> rakudo-moar b351d6: OUTPUT«Cannot resolve caller prefix:<-->(Int); none of these signatures match:␤    (Mu:D $a is rw)␤    (Mu:U $a is rw)␤    (Int:D $a is rw)␤    (int $a is rw)␤    (Bool $a is rw)␤    (Num:D $a is rw)␤    (Num:U $a is rw)␤    (num $a is rw)␤  in …»

[09:11] <psch> can't dispatch to "is rw" without a container

[09:11] <gfldex> m: my $i = 0; say $i.VAR.WHERE; say $i.&prefix:<-->.VAR.WHERE;

[09:11] <camelia> rakudo-moar b351d6: OUTPUT«140031204203056␤140031204203016␤»

[09:11] <psch> m: my $i = 0; say $i.VAR.^name; say $i.&prefix:<-->.VAR.^name;

[09:11] <camelia> rakudo-moar b351d6: OUTPUT«Scalar␤Int␤»

[09:11] <gfldex> my guess is that .&prefix:<--> returns the value not the container

[09:12] <gfldex> LTA in my eyes because chaining -- and ++ doesn't make sense to start with

[09:13] <sortiz> lizmat: use Test; class Foo { submethod BUILD { fail "noway" }}; dies-ok { Foo.new }, "dies";

[09:14] <sortiz> m: use Test; class Foo { submethod BUILD { fail "noway" }}; dies-ok { Foo.new }, "dies";

[09:14] <camelia> rakudo-moar b351d6: OUTPUT«ok 1 - dies␤»

[09:14] <lizmat> ok 1 - dies

[09:14] <gregf_> i'm unable to understand why one would need such an operation ;)

[09:15] <DrForr> It's also undefined behavior in C, incorrectly attributed to "sequence points", so I'm sure it'll get tried and pointed out.

[09:15] <gregf_> m: my $a = 10; (($a+=1)-=1);print $a; # no op like a !!$a

[09:15] <camelia> rakudo-moar b351d6: OUTPUT«10»

[09:15] <psch> m: my $a = 10; say !!$a # noop?

[09:15] <camelia> rakudo-moar b351d6: OUTPUT«True␤»

[09:15] <gregf_> m: my $a = 10; say !!$a

[09:15] <camelia> rakudo-moar b351d6: OUTPUT«True␤»

[09:16] <DrForr> Hrm, circumfix operator with '--' and '++' instead of '[' and ']' :)

[09:16] <masak> circumfix `--` and `++` would clash with prefix `--` and `++`

[09:17] <DrForr> Well aware of that, hence the smiley :)

[09:17] <psch> m: sub postcircumfix:<-- ++> { $^a ** $^b }; say 2--2++ # /o\

[09:17] <camelia> rakudo-moar b351d6: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in postcircumfix:sym<-- ++>; couldn't find final $stopper ␤at <tmp>:1␤------> 3<-- ++> { $^a ** $^b }; say 2--2++ # /o\7⏏5<EOL>␤    expecting any of:␤        statemen…»

[09:17] <psch> so the "closing" ++ gets parsed at postfix:<++> i guess

[09:18] <gregf_> i was assuming strings were immutable in Perl6? so a ++ would be changing the string?  

[09:18] <psch> i thought that should work thanks to LTM, but i've been wrong about lots of things involving LTM

[09:18] <DrForr> And of course in less than a minute someoen tries it :)

[09:18] <gfldex> gregf_: it will return a new string

[09:18] <psch> DrForr: i thought you might mean postcircumfix, yeah.  circumfix:<[ ]> doesn't exist after all

[09:18] <sortiz> lizmat, OTOH, Would be nice if, in that case, Foo.new ~~ Failure, i.e. the Failure propagates till new return value. Otherwise, inside BUILD, fail and die are the same.

[09:19] <psch> err

[09:19] <lizmat> sortiz: but that would be a change in behaviour, wouldn't it ?

[09:19] <psch> obviously it does exist, as Array.new >_>

[09:20] <gfldex> gregf_: you may want to learn about containers

[09:20] <sortiz> Yes, but right now not tested in roast :-)

[09:21] <gfldex> gregf_: the following may be helpful https://perl6advent.wordpress.com/2015/12/02/day-2-2-bind-or-2-bind/

[09:21] <sortiz> As this issue show us.

[09:23] <gregf_> gfldex: was wondering what a container was, Thanks ;)

[09:24] <gregf_> the problem is i only know of containers in JEE, so kinda difficult to relate

[09:24] <psch> containers are kinda sorta a bit like auto-dereferencing pointers, maybe..? :S

[09:24] <gfldex> gregf_: also http://doc.perl6.org/language/containers

[09:26] <gregf_> pointers *shudders* #i must say there is nothing on the planet like C/C++

[09:27] <gregf_> but how much do C/C++ guys get paid nowadays? i can see that even js/php/UI-UX guys get paid much more

[09:27] <gregf_> gfldex: cheers

[09:27] *** edehont joined
[09:29] <gregf_> *will read those during my lunch break*

[09:32] <moritz> doesn't pay depend much more on location, industry and negotiation than on programming language?

[09:34] <CQ> moritz: if someone is desperate for a cobol expert and there aren't many, then no : )

[09:34] <stmuk_> lizmat: can you plug the london.pm tech meeting perl 6 talk in the weekly plz? details on the calender entry at london.pm.org

[09:36] <lizmat> stmuk_ : you mean "• Nigel Hamilton: SixFix - a Weekly Dose of Perl 6 Powered by Perl 5"

[09:36] <lizmat> ?

[09:36] <stmuk_> yes!

[09:37] <lizmat> okidoke

[09:40] <lizmat> sortiz: https://github.com/rakudo/rakudo/commit/4890cdc5da

[09:43] *** araujo left
[10:08] *** user9 left
[10:13] *** finanalyst joined
[10:14] *** ggoebel116 joined
[10:15] *** rurban_ left
[10:15] <finanalyst> m: my @x=<a b c>;@x.map({say $_ x 3 })

[10:15] <camelia> rakudo-moar 4890cd: OUTPUT«aaa␤bbb␤ccc␤»

[10:16] *** user9 joined
[10:17] <finanalyst> odd. On perl6 REPL same code gives "aaa bbb ccc (True True True)" (with newlines)

[10:18] <moritz> yes, because say returns True

[10:18] <moritz> so one thing is the output, the other return value

[10:18] <moritz> I though the REPL suppressed the return value printing if there was output

[10:18] <moritz> but that seem to have changed or been broken

[10:19] <moritz> m: my @x=<a b c>; say @x.map({say $_ x 3 })

[10:19] <camelia> rakudo-moar 4890cd: OUTPUT«aaa␤bbb␤ccc␤(True True True)␤»

[10:20] <timotimo> maybe it lazily evaluates the list after it checked "was there output?"

[10:21] <moritz> ah, right

[10:21] <moritz> that's plausible

[10:22] *** huggable left
[10:22] *** huggable joined
[10:22] *** iH2O left
[10:23] *** pmurias joined
[10:29] *** araujo joined
[10:31] *** edehont left
[10:31] *** samb1 left
[10:32] *** kaare_ joined
[10:43] *** labster left
[10:43] *** samb1 joined
[10:44] *** sortiz left
[10:48] *** cpage_ left
[10:48] *** cpage_ joined
[11:06] <Xliff> When you .resume from a CATCH, is that supposed to restart execution from the point where the exception is thrown?

[11:06] <timotimo> no, just after it was thrown

[11:06] <Xliff> Right. How do you limit that to the current scope?

[11:07] *** finanalyst left
[11:07] <psch> Xliff: do you have an example?

[11:07] <Xliff> OK, leme think.

[11:07] <psch> as in, i don't quite understand the question, because the CATCH always binds to the scope you're throwing from :)

[11:08] <psch> oh, unless you mean "don't CATCH in lower scopes"

[11:08] <Xliff> Yes

[11:08] <psch> hmm

[11:09] <Xliff> my $c = C.new; try { CATCH { $err = 1; .resume } $c.this_method_throws_exception(); my $can_we_resume_here = 1 }

[11:09] <Xliff> The .resume will continue from this_method_throws_exception()

[11:10] *** kid51 joined
[11:11] <psch> m: class C { method thower { CX::Next.new.throw; say "not this!" } }; my $err; my $c = C.new; { CATCH { $err = 1; .resume }; try $c.this_method_throws_exception(); say "this instead" }

[11:11] <camelia> rakudo-moar 0b824b: OUTPUT«this instead␤»

[11:11] <psch> m: class C { method thower { CX::Next.new.throw; say "not this!" } }; my $err; my $c = C.new; { CATCH { $err = 1; .resume }; $c.this_method_throws_exception(); say "this instead" }

[11:11] <camelia> rakudo-moar 0b824b: OUTPUT«This exception is not resumable␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:12] <psch> ...i'm not sure that helps :S

[11:12] <psch> fwiw, CX::Next was just grasping for something i think should be resumable

[11:12] <psch> i had X::AdHoc first, that also gives "not resumable"

[11:13] <timotimo> m: { say "test"; die "oh no!"; say "test 2"; CATCH { default { .resume } } }

[11:13] <camelia> rakudo-moar 0b824b: OUTPUT«test␤test 2␤»

[11:14] <psch> m: sub f { die "oh no!"; say "test 2" }; say "test 1"; f; say "test 3"; CATCH { default { .resume } }

[11:14] <camelia> rakudo-moar 0b824b: OUTPUT«test 1␤test 2␤test 3␤»

[11:14] <psch> that "test 2" is wanted to not show up i gather

[11:14] <psch> m: sub f { die "oh no!"; say "test 2" }; say "test 1"; try f; say "test 3"; CATCH { default { .resume } }

[11:14] <camelia> rakudo-moar 0b824b: OUTPUT«test 1␤test 3␤»

[11:14] <psch> Xliff: yeah, seems my idea was good enough, but the example kinda opaque :)

[11:15] <teatime> hmm... I wonder if Google Calendar can handle this recursion specifier, "the fourth full weekend of June, beginning at 1800 UTC Saturday and running through 2059 UTC Sunday, recurring anually."  I doubt it ;)

[11:16] <Xliff> A real example would need to be gist, but I just don't have the time right now.

[11:17] <Xliff> OK. Let's try the default.

[11:17] <CQ> teatime: use https://www.roaringpenguin.com/wiki/index.php/Remind and hook it into google cal : )

[11:20] <Xliff> Nope. That didn't work.

[11:20] <Xliff> OK. Let me gist this.

[11:22] <RabidGravy> teatime, if you decide you have to implement it yourself I could actually use a scheduling recurrence library, I started looking then broke my brane on rfc 5545 and set it aside

[11:22] *** brrt joined
[11:25] *** zakharyas left
[11:25] <teatime> hehe... it's just for one event, I can schedule it manually every year... if I remember to, anyway :)

[11:26] <teatime> I think the biggest deal breaker for most existing systems is the "…fourth //full// weekend of…" part.

[11:28] *** cognominal left
[11:30] <Xliff> https://gist.github.com/Xliff/bc0a12bcb213d6426a93684fde829193#file-porting-difficulties-md

[11:32] <psch> Xliff: did you see my example?

[11:32] <psch> Xliff: any statement that might throw but you don't want to resume, you can prefix with 'try', and it will resume after that statement

[11:32] <Xliff> Yeah. gist should take that into acccount

[11:32] *** Emeric joined
[11:33] <Xliff> OK. Let me do it that way.

[11:34] <psch> http://irclog.perlgeek.de/perl6/2016-06-13#i_12655360 these two snippets illustrate what i mean, for clarity

[11:35] <Xliff> Right.

[11:40] <Xliff> psch: Gist updated. If my coding needs adjustment, please comment there.

[11:40] <Xliff> But I think I got the gist (ha ha!) of your second example. I may not have implemented it quite right, though.

[11:41] *** cognominal joined
[11:42] <Xliff> psch: Also note that the testing code no longer executes properly.

[11:42] <psch> Xliff: i now notice NC is involved?  might well make this all a lot more complicated than i can deal with right now... :S

[11:43] <Xliff> LOL

[11:43] <Xliff> Why would NC matter?

[11:43] <psch> i don't know, but it *does* make stuff complicated, in general :P

[11:43] <Xliff> Gotcha.

[11:43] <psch> like, your second issue there probably..?

[11:43] <Xliff> Well. If you get an insight, please let me know. 

[11:44] <Xliff> Well, yes. The second issue is NC-hell.

[11:44] <Xliff> I was going to ignore it for the time being and circle back.

[11:44] <psch> yeah, if i get more cycles than "i'm waiting for r-j to compile right now" i might take a closer look

[11:44] <Xliff> However the exception issue ... .isn't.

[11:44] <psch> *free cycles

[11:44] <Xliff> kk

[11:44] <Xliff> Thanks for the time.

[11:45] <psch> fwiw, what you're doing now in the lower part looks like it's 1:1 my example, in less minimalistic

[11:45] <psch> but if that doesn't work there's clearly something else going on, and i don't have the spare brain to dig for that right now... :)

[11:53] *** kid51 left
[11:55] <Xliff> kk

[11:55] <Xliff> I will revert code to what was working and circle back later.

[11:55] *** TEttinger left
[12:03] *** stevieb joined
[12:07] <pmurias> psch: what's the state of the java interop in rakudo-j?, ruoso was asking about that recently

[12:07] <[Coke]> .

[12:08] <psch> pmurias: well, considering rakudo-j itself doesn't install correctly currently...

[12:08] <psch> pmurias: aside from that, it's not much further along than it was before r-j stopped working

[12:08] <psch> pmurias: which means, some marshalling bits are still glr-induced broken, and nothing much new has happened

[12:09] <psch> pmurias: the rakudo branch jvm-interop is probably the workiest bit we have at the moment, but i haven't spent any time with that for a few months i'd say

[12:09] <pmurias> psch: ok, getting it running and installing seems higher priority than the interop

[12:18] *** Sgeo left
[12:19] *** jack_rabbit left
[12:23] *** cognominal left
[12:24] *** brrt left
[12:28] *** brrt joined
[12:31] <Xliff> Is negated =:= spelled !=:=?

[12:31] <ilmari> m: say IterationEnd !=:= IterationEnd

[12:31] <camelia> rakudo-moar 7f0f46: OUTPUT«False␤»

[12:31] <ilmari> m: say IterationEnd =!= IterationEnd

[12:32] <camelia> rakudo-moar 7f0f46: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Prefix ! requires an argument, but no valid term found␤at <tmp>:1␤------> 3say IterationEnd =!7⏏5= IterationEnd␤    expecting any of:␤        prefix␤»

[12:32] <masak> m: my $a = 42; my $b := $a; say $a =:= $b; say $a !=:= $b

[12:32] <camelia> rakudo-moar 7f0f46: OUTPUT«True␤False␤»

[12:32] <masak> Xliff: yes.

[12:32] <Xliff> LOL! Thanks!

[12:33] <masak> LOL! you're welcome!

[12:33] <moritz> .oO( shouldn't that be =!=? )

[12:34] <masak> moritz: that's what ilmari tried above

[12:35] <Xliff> Rut roh!

[12:42] <perlpilot> why wouldn't it be !:!  ?   :)

[12:43] *** avalenn left
[12:44] *** bjz_ joined
[12:44] *** avalenn joined
[12:46] *** bjz left
[12:46] <moritz> !=:!=

[12:49] <ilmari> =!:!=

[12:51] *** tbrowder joined
[12:53] <dalek> doc: 7fe076c | (Wenzel P. P. Peppmeyer)++ | doc/Language/typesystem.pod:

[12:53] <dalek> doc: doc trait handles

[12:53] <dalek> doc: review: https://github.com/perl6/doc/commit/7fe076cf58

[12:55] *** tbrowder left
[13:04] *** stevieb left
[13:07] <lizmat> :w

[13:07] <lizmat> oops

[13:08] * lizmat got distracted by the monsoon like rain

[13:08] <masak> lizmat: oh, I wonder if it's the upper end of that we have here in Malmö

[13:09] <masak> lizmat: here it's more like a welcome little drizzle, at least so far

[13:10] <lizmat> apart from the temperature and the duration, it reminded me very much of my last visit to India

[13:13] *** Ven_ joined
[13:13] * gfldex .oO( if you poke the climate in the eye, expect lots of tears )

[13:13] *** Actualeyes left
[13:18] *** araujo left
[13:18] *** zakharyas joined
[13:20] <dalek> doc: 6a175f4 | (Wenzel P. P. Peppmeyer)++ | doc/Language/typesystem.pod:

[13:20] <dalek> doc: move word around for consistency

[13:20] <dalek> doc: review: https://github.com/perl6/doc/commit/6a175f4413

[13:20] <dalek> doc: 14462dc | (Wenzel P. P. Peppmeyer)++ | doc/Language/typesystem.pod:

[13:20] <dalek> doc: add TODOs for some traits

[13:20] <dalek> doc: review: https://github.com/perl6/doc/commit/14462dc2bb

[13:26] *** Actualeyes joined
[13:30] *** cosimo left
[13:34] *** domidumont joined
[13:36] <lizmat> hmmmm...  LinkedIn  :-(

[13:37] *** sena_kun joined
[13:37] <lizmat> http://blogs.microsoft.com/firehose/2016/06/13/microsoft-to-acquire-linkedin/#sm.0000p0gocno88e6uu252cb5lbvlms

[13:37] <timotimo> :\

[13:37] <timotimo> "install your fucking windows 10 if you want to continue using linkedin you asshole"

[13:38] <sena_kun> hi, #perl6.

[13:38] *** Zero_Dogg left
[13:38] <timotimo> oh hi!

[13:38] *** wamba left
[13:38] *** Zero_Dogg joined
[13:38] <RabidGravy> lizmat, I'm glad someone else is getting that weather :)

[13:38] <Juerd> Considering deleting my linkedin account...

[13:38] *** Zero_Dogg left
[13:38] *** Zero_Dogg joined
[13:39] <Juerd> Repeated password leaks never convinced me, but this just might.

[13:39] *** g4 left
[13:40] <sena_kun> Yet another attempt of module porting... In perl5 we have s{something}{something}. Error says that: "in Perl 6 please use assignment syntax". But I can't find any example of how to do this exactly. Any help?

[13:40] <timotimo> oh, well it'd be s{something} = something_else

[13:41] <sena_kun> Aw, so that's how it is. Thanks.

[13:41] <timotimo> but s/foo/bar/ also works

[13:42] <sena_kun> About s/// in Perl 6 I knew, but there is exactly 'block' I need.

[13:43] *** stevieb joined
[13:43] <timotimo> OK

[13:45] *** ZoffixW joined
[13:46] <ZoffixW> sena_kun, keep in mind that s{foo} = {bar} executes bar, since it's a block.

[13:46] <ZoffixW> sena_kun, personally, I find .subst method more Perl 6-ish

[13:46] <ZoffixW> .subst-mutate rather

[13:47] <sena_kun> ZoffixW, can I compute dynamic replacer for every iteration?

[13:47] <ZoffixW> sena_kun, sure

[13:47] <masak> wait, we have a .subst-mutate?

[13:47] <masak> why in the world do we have a .subst-mutate? :)

[13:48] <sena_kun> ZoffixW, aw, it changes the deal. Going to look up .subst docs now...

[13:48] <timotimo> no need to put { } on the RHS of the =

[13:48] *** cosimo joined
[13:48] <timotimo> it'll thunk the thing for you already

[13:48] <ZoffixW> masak, because it's awesome

[13:49] <ZoffixW> m: $_ = 'foo bar'; my %repl = foo => 'FOOS!', bar => 'BAARS!'; s:g{$<wat>=\w+} = %repl{$<wat>}; .say

[13:49] <camelia> rakudo-moar ea53ce: OUTPUT«FOOS! BAARS!␤»

[13:49] *** cdg joined
[13:49] <ZoffixW> I'm still fuzzy on the whole block thing, but ... whatev.

[13:49] <masak> ZoffixW: oh, that syntax is indeed awesome.

[13:49] <ZoffixW> Juerd, I deleted mine recently and never looked back. All I ever got are annoying messages from recruiters.

[13:49] <masak> ZoffixW: is it connected to .subst-mutate somehow?

[13:50] <ZoffixW> No idea

[13:50] <masak> ZoffixW: if I didn't just TIL about .subst-mutate and someone asked me, I would answer "no, we don't need a .subst-mutate, 'cus we have .=subst"

[13:50] <masak> but I suspect that's not the whole story, since TimToady added .subst-mutate, and he knows the above

[13:51] <masak> anyway, design erosion and method proliferation :( those are our weaknesses

[13:51] <ZoffixW> m: 'foobar'.subst-mutate: 'oo', 'AA'

[13:51] <camelia> rakudo-moar ffba1f: OUTPUT«Cannot resolve caller subst-mutate(Str: Str, Str); none of these signatures match:␤    (Cool:D $self is rw: $matcher, $replacement, *%named)␤    (Str:D $self is rw: $matcher, $replacement, :ii(:$samecase), :ss(:$samespace), :mm(:$samemark), *%options)…»

[13:51] <ZoffixW> :S

[13:51] <masak> m: 'foobar'.subst-mutate: /oo/, 'AA'

[13:51] <ZoffixW> m: my $x = 'foobar'; $x .= subst: 'oo', 'AA'; say $x

[13:51] <camelia> rakudo-moar ffba1f: OUTPUT«Cannot resolve caller subst-mutate(Str: Regex, Str); none of these signatures match:␤    (Cool:D $self is rw: $matcher, $replacement, *%named)␤    (Str:D $self is rw: $matcher, $replacement, :ii(:$samecase), :ss(:$samespace), :mm(:$samemark), *%options…»

[13:51] <camelia> rakudo-moar ffba1f: OUTPUT«fAAbar␤»

[13:51] <psch> m: say ($="foobar").subst-mutate: 'oo', 'ou'

[13:52] <camelia> rakudo-moar ffba1f: OUTPUT«｢oo｣␤»

[13:52] <psch> ZoffixW: "is rw" :)

[13:52] <ZoffixW> masak++ the .= didn't even occur to me

[13:52] *** skids joined
[13:52] <ZoffixW> Shorter to type too

[13:52] <masak> aye

[13:52] <psch> m: $_ = "foobar"; say S/oo/ou/; say s/oo/ou/

[13:52] <camelia> rakudo-moar ffba1f: OUTPUT«foubar␤｢oo｣␤»

[13:52] <ZoffixW> m: my $x = 'foobar'; $x.subst-mutate('oo', 'AA').uc.say; 

[13:52] <camelia> rakudo-moar ffba1f: OUTPUT«OO␤»

[13:52] <masak> psch: yeah, probably has something to do with return values

[13:53] <psch> that's the analog.  .subst-mutate returns what s/// returns, .subst returns what S/// returns

[13:53] <masak> psch: ah, whereas .=subst returns the resulting string, not the matches

[13:54] <psch> masak: right .=subst works, precisely because .subst doesn't act as s/// does

[13:54] <psch> well, maybe "returns what s/// returns" instead vOv

[13:57] *** rurban_ joined
[14:00] <ZoffixW> m: $_ = 'foobar'; .substr-rw(1, 2) = 'AA'; .say

[14:00] <camelia> rakudo-moar ffba1f: OUTPUT«fAAbar␤»

[14:00] <ZoffixW> m: 'foobar'.substr-eq("bar", 3).say

[14:00] <camelia> rakudo-moar ffba1f: OUTPUT«True␤»

[14:00] <ZoffixW> .oO( <masak> anyway, design erosion and method proliferation :( those are our weaknesses )

[14:02] *** tbrowder joined
[14:02] <tbrowder> hi, gang

[14:02] *** wamba joined
[14:02] <ZoffixW> \o

[14:03] <tbrowder> the gui diff prog i use is not handling unicode well at all, any recs for a good one?

[14:05] * masak kinda likes `git diff`

[14:05] <psch> yeah, that or vimdiff for me

[14:06] <timotimo> vimdiff is one of my favs

[14:06] <psch> i suppose if it has to be a gui diff prog i'd suggest gvimdiff instead :)

[14:06] *** ZoffixW left
[14:07] <tbrowder> i'm presently using smartsynchronize by syntevo, but i think git diff depends on your shell and i need too look closer at it on my box for the files in question

[14:09] <tbrowder> emacs i think also has a diff view but i haven't looked at it yet

[14:10] <tbrowder> thanks for the suggestions

[14:10] *** AlexDaniel joined
[14:11] <AlexDaniel> given how often I get spammy emails from linkedin, I'm not surprised! It feels very appropriate

[14:14] *** ptolemarch joined
[14:14] *** khw joined
[14:16] *** tbrowder left
[14:16] <[Coke]> I use beyond compare, but can't say that diffing unicode comes up frequently.

[14:16] <[Coke]> (and only for big stuff. git diff works for a page or two)

[14:19] <RabidGravy> I can't remember the last time I actually used anything other than git diff

[14:20] *** robinsmidsrod left
[14:21] *** robinsmidsrod joined
[14:22] *** Ven_ left
[14:22] *** huggable left
[14:22] *** huggable joined
[14:26] *** sena_kun left
[14:30] <hoelzro> o/ #perl6

[14:31] *** jameslen_ left
[14:31] <hoelzro> anyone opposed to merging this? https://github.com/rakudo/rakudo/pull/738

[14:31] <hoelzro> or should I wait until 2015.06 is out?

[14:36] *** AlexDaniel left
[14:36] * lizmat looks

[14:37] <moritz> would it lead to getting significantly more testing?

[14:37] <moritz> if not, I'd say merge now

[14:37] <moritz> ss/would it/would waiting/

[14:37] *** kurahaupo joined
[14:38] *** edehont joined
[14:38] <lizmat> I would favour merging now

[14:39] <Xliff> WTF does this mean? "Missing or wrong version of dependency"

[14:39] <Xliff> Was working. Made some changes, and now I get that from rakudo.

[14:41] <timotimo> it used to be more common when we didn't throw out precompiled files that were outdated

[14:41] <Xliff> Lemme remove .precomp -- sigh

[14:42] <nine> Xliff: how old is your rakudo?

[14:43] <timotimo> every precompiled file has hard coded in it other precomp files it relies on. but that isn't a problem any more with recent rakudos where we can re-precompile on the fly if the precompilation is bogus in some way

[14:45] *** dfcarpenterak joined
[14:45] *** dfcarpenterak left
[14:48] <Xliff> nine: Fairly recent. One sec.

[14:48] <Xliff> This is Rakudo version 2016.05-68-g2bd4211 built on MoarVM version 2016.05-17-g6075599

[14:48] <Xliff> implementing Perl 6.c.

[14:50] <nine> Xliff: yesterday evening two fixes went in that should fix exactly your problem

[14:50] <hoelzro> ok, thanks for the input moritz & lizmat 

[14:51] <hoelzro> I'll merge after work

[14:51] <hoelzro> (unless someone feels like merging on my behalf)

[14:51] *** dalek left
[14:52] <hoelzro> lizmat++ # thanks!

[14:52] <lizmat> yw

[14:52] *** dalek joined
[14:52] *** ChanServ sets mode: +v dalek

[14:53] <diakopter> well, no questions worth mentioning/answering on TimToady's Slashdot AMA

[14:53] <timotimo> i didn't even know about the existence of that AMA

[14:54] <timotimo> but i imagine it's full of troll questions

[14:54] <diakopter> a bunch of troll questions, a few sincere but inane ones

[14:55] <lizmat> hoelzro: so who should I credit for this work on the P6W ?

[14:55] <timotimo> "do you like hats?"

[14:55] <DrForr> I bothered to look. They're mostly "Have you stopped beating your wife?".

[14:55] <diakopter> I mean, I suppose the one titled "How to think in Perl 6" is well-thought-out

[14:55] *** robinsmidsrod left
[14:56] <Xliff> nine++ Thanks!

[14:56] *** robinsmidsrod joined
[14:56] <hoelzro> lizmat: awwaiid (Brock Wilcox) did all the work, so he deserves the credit!

[15:00] *** kurahaupo left
[15:03] *** mr-foobar joined
[15:05] *** domidumont left
[15:15] *** brrt left
[15:16] *** kurahaupo joined
[15:21] <sexy-coder-girl> Where's Larry's Slashdot AMA? My google-foo is not strong enough.

[15:21] <BinGOs> https://developers.slashdot.org/story/16/06/12/1510251/interviews-ask-perl-creator-larry-wall-a-question

[15:21] <sexy-coder-girl> Thanks.

[15:22] *** djbkd left
[15:26] <[Coke]> can't tell if slashdot's interface sucked or if larry really didn't answer anything.

[15:26] <diakopter> I think it's still accepting questions

[15:26] *** ssotka joined
[15:26] *** araujo joined
[15:26] *** araujo left
[15:26] *** araujo joined
[15:28] <sexy-coder-girl> I wouldn't blame him if he won't. Those questions remind me of preschoolers loudly yelling for attention.

[15:28] <diakopter> considering the audienc of slashdot is thousands of times smaller than Reddit... the internet moved on from slashdot long ago

[15:37] <masak> it was significant at one point, though

[15:38] <masak> I remember it being my favorive source of tech news ~15 years ago

[15:38] * diakopter too

[15:39] <[Coke]> honestly, my search after seeing AMA was on reddit. i had to come back here to realize it was slashdot.

[15:40] <diakopter> yes I misspoke, on slashdot it's called "ask slashdot"

[15:40] <diakopter> which apparently means "ask troll bots and people who can't tell the others are troll bots"

[15:41] *** TimToady left
[15:43] *** TimToady joined
[15:49] <geekosaur> well, that's pretty much all that's left on slashdot

[15:59] *** rindolf left
[16:00] <masak> m: use Test; skip("hm"); done-testing

[16:00] <camelia> rakudo-moar 6b9359: OUTPUT«ok 1 - \# SKIP hm␤1..1␤»

[16:00] <masak> what's with the `\` ?

[16:01] <psch> isn't that for TAP parsing..?

[16:01] <masak> seems to be because https://github.com/rakudo/rakudo/blob/nom/lib/Test.pm6#L543-L544

[16:01] <masak> but I confess I do not understand that comment

[16:03] <masak> my feeling is that there are good reasons, but I don't feel I have the full picture

[16:03] <masak> lizmat: around?

[16:04] *** zakharyas left
[16:04] *** vibha left
[16:05] *** _mg_ joined
[16:06] <Xliff> masak: I worked at Slashdot 15 years ago. :/

[16:06] <Xliff> My how times change.

[16:07] <stevieb> what I remember from the old days of Slashdot: "Frosty Piss!"

[16:07] <Xliff> Wow! And "Ask Slashdot" was my section, back in the day.

[16:07] <nemo> slashdot blackholed me for like 6 years for upvoting a post on questionable slashdot moderation practicies

[16:07] <nemo> *practices

[16:08] <masak> Xliff: wow.

[16:08] * Xliff suffers a moment of nostalgia... then it passes.

[16:12] *** hankache joined
[16:14] <hankache> hello #perl6

[16:15] <masak> m: for <ello ankache> { say "h$_" }

[16:15] <camelia> rakudo-moar 6b9359: OUTPUT«hello␤hankache␤»

[16:16] <hankache> masak :)

[16:18] *** baest_ joined
[16:20] *** baest left
[16:21] *** sherwool joined
[16:22] *** edehont left
[16:23] * masak .oO( it's called "h reduce" )

[16:23] * masak .oO( it's called "getting the h out of there" ) :P

[16:23] <masak> reuse*

[16:29] <hankache> ;)

[16:31] *** dakkar left
[16:40] *** _mg_ left
[16:41] <dalek> ecosystem: 728bfd5 | (Zoffix Znet)++ | META.list:

[16:41] <dalek> ecosystem: Add Config::From

[16:41] <dalek> ecosystem: 

[16:41] <dalek> ecosystem: Load configuration from file to variables via traits

[16:41] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/728bfd5019

[16:41] *** cognominal joined
[16:41] *** _mg_ joined
[16:41] <sexy-coder-girl> https://github.com/zoffixznet/perl6-Config-From

[16:41] *** _mg_ left
[16:43] *** hankache left
[16:44] *** rindolf joined
[16:51] *** wamba left
[16:54] *** wamba joined
[16:56] *** pullphinger joined
[17:05] *** tbrowder joined
[17:08] <gregf_> m: say (<h> X~ <ello  ankache>).map: { my $y = $_; $y  ~~ s:g/$<word>=\w+/{$<word>.tc}/;$y }

[17:08] <camelia> rakudo-moar 6b9359: OUTPUT«(Hello Hankache)␤»

[17:09] <tbrowder> ref gui diff progs: this works (Linux only tested) and handles my unicode tests okay: <https://sourceforge.net/projects/diffuse/>

[17:10] *** setty1 joined
[17:11] *** firstdayonthejob joined
[17:11] *** sno left
[17:11] <DrForr> I've used Meld frequently, but I've not extensively (okay, at all) tested Unicode support beyond the occasional \,t and \"o.

[17:12] *** spider-mario joined
[17:15] *** cognominal left
[17:15] <ilmari> ţ is outside latin-1, so handling that is a good start

[17:16] <ilmari> ł was the fun one when $ork[-1] launched a polish site

[17:17] <DrForr> That was my first useful test case (thanks pmurias) for blogs.perl.org mk II.

[17:17] <[Coke]> m: say "ţ" ~~ m:ignoremark/t/;

[17:17] <camelia> rakudo-moar 6b9359: OUTPUT«｢ţ｣␤»

[17:17] <[Coke]> oh, yay, that did get done.

[17:17] <stevieb> just did a fresh MoarVM install on a new box, and configured it as a doc build system per CONTRIBUTING, then cloned/updated my fork but am getting an error on `perl6 htmlify.p6`: https://gist.github.com/stevieb9/ce8a940ee835eee513ecb9b0d69f8e51 Could someone please take a look and let me know if I've done something wrong? I'm very new to perl6, so my troubleshooting skills are severely lacking as to where to look

[17:18] <ilmari> m: say 'ł' ~~ m:ignoremark/l/

[17:18] <camelia> rakudo-moar 6b9359: OUTPUT«False␤»

[17:18] <ilmari> m: say 'ł'.NFD

[17:18] <camelia> rakudo-moar 6b9359: OUTPUT«NFD:0x<0142>␤»

[17:18] <ilmari> m: say 'ţ'.NFD

[17:18] <camelia> rakudo-moar 6b9359: OUTPUT«NFD:0x<0074 0327>␤»

[17:19] <ilmari> m: say 'å' ~~ m:ignoremark/a/

[17:19] <camelia> rakudo-moar 6b9359: OUTPUT«｢å｣␤»

[17:20] <[Coke]> stevieb: what does perl6 --version say?

[17:20] <dalek> doc: 49e72a2 | (Jan-Olof Hendig)++ | / (2 files):

[17:20] <dalek> doc: Added docs for X::IO::Link

[17:20] <dalek> doc: review: https://github.com/perl6/doc/commit/49e72a2e34

[17:21] <stevieb> Coke: This is Rakudo version 2016.05-138-g6b93592 built on MoarVM version 2016.05-17-g6075599

[17:21] <stevieb> implementing Perl 6.c.

[17:22] <tbrowder> Zoffix, hi, please look at PR <https://github.com/perl6/doc/pull/592>

[17:23] <[Coke]> and git rev-parse --short HEAD  # in the perl6 doc build dir?

[17:23] <stevieb> Coke: 0937200

[17:24] <[Coke]> ok, that's fairly recent.

[17:25] <[Coke]> I just tried at 49e72a2 and did not get that error.

[17:26] <[Coke]> trying at 093...

[17:26] <sexy-coder-girl> tbrowder: looks good. Thanks. 

[17:28] <dogbert17> [Coke]: moritz made a fix to htmlify.p6 yesterday which fixed that problem

[17:28] <sexy-coder-girl> stevieb: [Coke] that was found yesterday. I think FROGGZ++ was looking into it, but I'm unsure

[17:28] <[Coke]> stevieb - there you go. a git pull should fix you, then.

[17:28] <stevieb> awesome, thanks all!

[17:29] <[Coke]> though I still did not get that failure at the revision you're getting it at.

[17:30] <sexy-coder-girl> The failure was introduced in this commit: https://github.com/rakudo/rakudo/commit/491af6034d4bc328a9a266528e5ec19f132b2611

[17:32] <stevieb> sorry for the noise... I had forgot to merge upstream/master. Looking much better now :)

[17:32] <geekosaur> wasn't that .. .yes

[17:32] <geekosaur> introduced and fixed late yesterday

[17:32] *** cognominal joined
[17:33] <dalek> doc: d080e93 | (Tom Browder)++ | doc/Language/testing.pod:

[17:33] <dalek> doc: tidy grammar and punctuation; use consistent var names

[17:33] <dalek> doc: review: https://github.com/perl6/doc/commit/d080e9327c

[17:33] <dalek> doc: 44370b0 | (Zoffix Znet)++ | doc/Language/testing.pod:

[17:33] <dalek> doc: Merge pull request #592 from tbrowder/testing-doc

[17:33] <dalek> doc: 

[17:33] <dalek> doc: tidy grammar and punctuation; use consistent var names

[17:33] <dalek> doc: review: https://github.com/perl6/doc/commit/44370b0c6e

[17:40] *** domidumont joined
[17:43] *** abraham_ joined
[17:45] *** abraham_ left
[17:46] *** Zero_Dogg left
[17:47] *** Zero_Dogg joined
[17:48] *** domidumont left
[17:49] *** domidumont joined
[17:56] *** Sound joined
[18:01] *** Emeric left
[18:01] *** Emeric joined
[18:03] * literal contributed a Perl 6 implementation to Make a Lisp: https://github.com/kanaka/mal/tree/master/perl6

[18:03] *** dustinm` joined
[18:04] <[Coke]> so, I know we have put this in and removed it in the past, but what are other people using to search once on the p6 doc site? If I'm scrolled 30 pages down, I have to scroll back up to get the input box to search.

[18:05] *** girafe joined
[18:05] <sexy-coder-girl> press "Home"

[18:05] <sexy-coder-girl> And when page loads, I just hit TAB twice to get to the search box

[18:07] *** rurban_ left
[18:10] <nemo> [Coke]: I found the site search rather disappointing so I stick to site: in my browser search ☺

[18:11] <[Coke]> nemo: that is not what i'm trying to do

[18:11] <[Coke]> is your browser search searching the whole site?

[18:12] *** rurban_ joined
[18:12] <[Coke]> (I mean, if it is, then yes, that is what I'm trying to do)

[18:12] *** AlexDaniel joined
[18:13] <AlexDaniel> yeah, ｢Home｣

[18:13] <AlexDaniel> as simple as that

[18:14] <[Coke]> yah, that's a 3-key combo on this keyboard. and then still have to click in the search box.

[18:14] <AlexDaniel> ah okay, I see a problem

[18:14] <AlexDaniel> there's no accesskey for the search box

[18:14] <sexy-coder-girl> F5, TAB, TAB :P

[18:15] *** nightfrog is now known as culb

[18:15] <[Coke]> AlexDaniel: yes. I don't know if there's a way to do that is standard, but when we did it by hand, we had to back it out, because someone's browser was already using '/' for something.

[18:16] <AlexDaniel> no-no, accesskeys work on all configurations

[18:17] <[Coke]> ah, yes, we hardcoded it. (so it worked as it does, e.g. on facebook)

[18:17] <dalek> doc: d56de70 | (Aleks-Daniel Jakimenko-Aleksejev)++ | template/header.html:

[18:17] <dalek> doc: Add accesskey for the search input

[18:17] <dalek> doc: review: https://github.com/perl6/doc/commit/d56de70bd1

[18:17] <[Coke]> why "f" 

[18:18] <[Coke]> ?

[18:18] <AlexDaniel> because other websites use that

[18:18] <AlexDaniel> e.g. wikipedia

[18:18] <sexy-coder-girl> Doesn't work on Chrome

[18:18] <AlexDaniel> the reason is probably because ‘s’ is typically used for “Save”

[18:18] <AlexDaniel> that is true for wikis and forums

[18:18] <sexy-coder-girl> Just opens the File menu

[18:18] <AlexDaniel> sexy-coder-girl: not yet!

[18:19] <sexy-coder-girl> AlexDaniel: not yet what?

[18:19] <AlexDaniel> sexy-coder-girl: you mean, it does not work on wikipedia?

[18:19] <AlexDaniel> sexy-coder-girl: what are you pressing exactly?

[18:19] <[Coke]> I had to use control-option-f testing just now on wikipedia (mac/chrome)

[18:19] <sexy-coder-girl> Chrome's on Windows uses Alt+Key for access keys and that's an alt sequence

[18:19] <sexy-coder-girl> Unless Mozilla's dev docs are wrong and it's not Alt+Key

[18:19] <AlexDaniel> alt+shift+key perhaps?

[18:20] <sexy-coder-girl> Yeah, that works.

[18:20] <AlexDaniel> anyway, you may say that accesskeys have poor default modifiers, but there's no reason not to have one

[18:20] <AlexDaniel> for those who have no troubles using accesskeys

[18:20] <[Coke]> (the doc build I set to run to test earlier: stillllll running)

[18:20] <sexy-coder-girl> Sure.

[18:21] * sexy-coder-girl was using https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey

[18:21] <AlexDaniel> personally I don't mind alt+shift because I use thumbs to hit both of these keys…

[18:22] * sexy-coder-girl tries to imagine what that looks like

[18:22] <AlexDaniel> .oO( YAY for japanese keyboards and custom keyboard layouts! )

[18:22] *** huggable left
[18:22] *** huggable joined
[18:22] <sexy-coder-girl> Speaking of keyboards. I just got my second Corsair K95 RGB Perl 6 keyboard delivered at $work <3 Unicode all the way!

[18:23] *** FROGGS joined
[18:23] * AlexDaniel does not take seriously any keyboard that does not have proper thumb keys

[18:23] <AlexDaniel> has no*

[18:23] *** vendethiel joined
[18:24] <psch> yeah, alt and mod4 are the worst on normal layouts :/

[18:24] <FROGGS> o/

[18:27] <AlexDaniel> psch: the reason why I love Japan so much is because its existance is the reason why you can get a keyboard with short spacebar (and some extra keys for your thumbs) for almost *any* laptop! :)

[18:27] <nemo> [Coke]: yes. thus the site: ☺

[18:28] <lizmat> masak: am around now

[18:28] <nemo> [Coke]: https://www.google.com/search?q=site%3Adocs.perl6.org+panda

[18:28] <nemo> panda is my default search test phrase

[18:28] <nemo> by contrast, the bar in the upper right of the site says "Sorry, no results found" which is what it does way way way too often

[18:29] <nemo> https://search.yahoo.com/yhs/search?p=site%3Adocs.perl6.org+panda  works fine too

[18:30] <[Coke]> nemo: as a commiter on the site, I'd rather use it and fix it.

[18:30] <AlexDaniel> maybe instead of “sorry, no results were found” we should have a link that says something like “You can try duckduckgo to find it on this website”

[18:30] <[Coke]> I'm glad you have something that is working for you, though.

[18:31] <dalek> doc: a97d94d | (Zoffix Znet)++ | doc/Language/modules.pod:

[18:31] <dalek> doc: Add panda to search index

[18:31] <dalek> doc: review: https://github.com/perl6/doc/commit/a97d94d1bb

[18:31] <AlexDaniel> alright that was quick

[18:31] <dalek> doc: c4ac6d4 | (Steve Bertrand)++ | CONTRIBUTING.md:

[18:31] <dalek> doc: added blurb about python-dev in CONTRIBUTING

[18:31] <dalek> doc: review: https://github.com/perl6/doc/commit/c4ac6d484b

[18:31] <dalek> doc: a43f339 | (Zoffix Znet)++ | CONTRIBUTING.md:

[18:31] <dalek> doc: Merge pull request #593 from stevieb9/python-dev_CONTRIBUTING

[18:31] <dalek> doc: 

[18:31] <dalek> doc: added blurb about python-dev in CONTRIBUTING

[18:31] <dalek> doc: review: https://github.com/perl6/doc/commit/a43f339c44

[18:32] *** sno joined
[18:32] <nemo> heh. there was nothing particularly special about pandas you realise ☺

[18:32] *** Amnez777 left
[18:32] *** Amnez777 joined
[18:32] <nemo> apart from them being super cute when I test some search engine feature

[18:33] <AlexDaniel> it was a super cute demonstration of live coding :D

[18:33] <nemo> https://www.google.com/search?site=&tbm=isch&q=pandas  case in point

[18:33] <nemo> kk 😃

[18:33] <dalek> Inline-Perl5: 112f4b9 | niner++ | lib/Inline/Perl5.pm6:

[18:33] <dalek> Inline-Perl5: Fix "Method 'DESTROY' not found" errors on Perl 5.24

[18:33] <dalek> Inline-Perl5: 

[18:33] <dalek> Inline-Perl5: Recent Perl 5 versions fixed a regression about AUTOLOAD not being called

[18:33] <dalek> Inline-Perl5: for a missing DESTROY: https://rt.perl.org//Public/Bug/Display.html?id=124387

[18:33] <dalek> Inline-Perl5: 

[18:33] <dalek> Inline-Perl5: Seems like Inline::Perl5 depended on this bug. With Perl 5.24 AUTOLOAD is

[18:33] <dalek> Inline-Perl5: now called and Perl 6 complains about not finding DESTROY. Worse, it even

[18:33] <dalek> Inline-Perl5: runs into an endless recursion ending in a segfault.

[18:33] <dalek> Inline-Perl5: 

[18:33] <dalek> Inline-Perl5: Fix by providing an explicit DESTROY method on Perl6::Object.

[18:33] <dalek> Inline-Perl5: 

[18:33] <dalek> Inline-Perl5: Fixes GH #63

[18:33] <dalek> Inline-Perl5: 

[18:33] <dalek> Inline-Perl5: Thanks to jdv++ for reporting!

[18:33] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/112f4b9727

[18:33] <nemo> uh

[18:33] *** sivoais joined
[18:34] <nemo> why was he not rate limited?

[18:34] <sexy-coder-girl> AlexDaniel: doesn't mean your point isn't valid. A link to use a regular search engine is not too bad, as "nothing found" can often be interpreted as "it's not there" and not "we have a shitty search feature"

[18:34] <nemo> sexy-coder-girl: yeh. that's how I interpreted it at first until I switched to interpretation #2

[18:37] *** labster joined
[18:37] <AlexDaniel> ok, here's the place https://github.com/perl6/doc/blob/8ff5d14fbf5076b754c0e87a5c9593fdabfb4bad/template/search_template.js#L38

[18:37] <AlexDaniel> now what

[18:37] *** CQ left
[18:38] *** yqt joined
[18:38] *** yqt left
[18:38] *** yqt joined
[18:38] <sexy-coder-girl> AlexDaniel: currently, the "not found" is made with pure CSS. That needs to be tossed and an element added on the search box that's hidden by default, but is shown when .not-found class is is present on #search

[18:39] <sexy-coder-girl> And its link would need to be modified in that JS code you linked to

[18:39] <AlexDaniel> sexy-coder-girl: sure. Are you willing to work on it?

[18:39] <AlexDaniel> that'd be cool

[18:39] <sexy-coder-girl> Yeah, in about 4 hours.

[18:40] <tbrowder> sexy-coder-girl: another testing.pod PR 594

[18:40] <sexy-coder-girl> tbrowder: just commit, no need to ask :) Feel free to change anything in that doc that you think should be changed.

[18:41] <tbrowder> s-c-g: WILCO, thanks.

[18:42] <AlexDaniel> tbrowder: I'd love to see such obvious changes to be committed directly, without a pull request

[18:42] <AlexDaniel> sure it works either way, but come on :)

[18:43] <[Coke]> PRs are cheap

[18:43] <[Coke]> and I've broken enough stuff that "should never break anything".

[18:44] <[Coke]> ... that said, that PR does look very inoffensive. :)

[18:47] <tbrowder> Zoffix (or alias):  I'm bothered by the new is-approx test with both rel and abs tols: it seems to me that the test ought to pass when either test passes, or at least make a version to give that option

[18:48] *** cognominal left
[18:56] *** Sound left
[18:57] <dalek> doc: d96c938 | (Tom Browder)++ | doc/Language/testing.pod:

[18:57] <dalek> doc: another edit tweak

[18:57] <dalek> doc: review: https://github.com/perl6/doc/commit/d96c938baf

[18:57] <dalek> doc: 14067be | (Tom Browder)++ | doc/Language/testing.pod:

[18:57] <dalek> doc: Merge pull request #594 from tbrowder/tdoc

[18:57] <dalek> doc: 

[18:57] <dalek> doc: another edit tweak

[18:57] <dalek> doc: review: https://github.com/perl6/doc/commit/14067be89a

[18:59] <lizmat> tbrowder: looking forward to seeing you at http://www.yapcna.org/yn2016/wiki?node=PRC

[18:59] *** CIAvash left
[18:59] <nemo> sexy-coder-girl: BTW Zoffix... what's w/ this account anyway?  Fighting FOSS stereotypes or something?

[18:59] <tbrowder> lizmat: ditto!

[19:00] <sexy-coder-girl> tbrowder: What's the usecase for that? Just curious

[19:01] *** cognominal joined
[19:01] <nemo> s/account/nick/

[19:01] <sexy-coder-girl> nemo: well, I registered it 7 years ago to troll people in #css and I needed a non-Zoffix nick so I picked it, but sure, your reason why sounds better :P

[19:02] <nemo> heh

[19:02] <nemo> I have a vague recollection of it appearing in #css yeah

[19:02] <nemo> but not why

[19:02] <sexy-coder-girl> I think the real reason was everyone was directing questions to me instead of the channel and I got fed up with it.

[19:03] <sexy-coder-girl> So I changed it so people wouldn't recognize a Zoffix :P

[19:03] *** ssotka left
[19:06] <nine> lizmat: looking at https://travis-ci.org/niner/Inline-Perl5/builds/137321222 it seems like it's impossible to provide an Inline::Perl5 that works with rakudos before and after your removal of BUILDALL's positional :(

[19:07] <lizmat> hmmm... perhaps if add another candidate *with* positionals ?

[19:07] *** labster left
[19:07] *** darutoko left
[19:08] <Xliff> <sexy-coder-girl> Speaking of keyboards. I just got my second Corsair K95 RGB Perl 6 keyboard delivered at $work <3 Unicode all the way!

[19:09] <Xliff> What is this mysterious keyboard referred to above?

[19:09] <tbrowder> s-c-g: hm, I was going to ask the same question of you but thought that might be a bit impertinent, but I think I came upon one in cpan's Geo::Ellpsoid whicj I'm trying to port to Perl 6; I'll try to get details and report back

[19:10] * Xliff is discovering that porting XS to Nativecall is harder than he thought.

[19:11] <Xliff> Particularly the pointer bits.

[19:11] <sexy-coder-girl> Xliff: it got 18 extra keys that you can map to Perl 6 Unicode ops. And there are 3 modes to, so you get 18*3 keys to map: http://www.corsair.com/en-ca/corsair-gaming-k95-rgb-mechanical-gaming-keyboard-cherry-mx-red

[19:11] <sexy-coder-girl> It also got shiny lights

[19:11] <Xliff> Ooo!

[19:13] * Xliff was drooling until he saw the price tag....

[19:13] <Xliff> Which should have been expected, really.

[19:13] <Xliff> $300 for a keyboard.... *faints*

[19:14] <sexy-coder-girl> tbrowder: all technical questions are pertinent :) The old implementation let you use rel and abs but always together. My new version lets you use them separately. I've used "both pass" instead of "either pass" because I figured it's just a combination of two tests. 

[19:14] *** ufobat left
[19:15] <sexy-coder-girl> Xliff: but it got lights!!

[19:15] <sexy-coder-girl> :)

[19:15] * geekosaur looked at it, but first checked os support and dropped it without following further

[19:16] <FROGGS> Xliff: there is also this: https://www.getdigital.co.uk/Optimus-Maximus.html?_ga=1.124517066.1157444914.1465845276

[19:18] <sexy-coder-girl> geekosaur: but it got shiny lights! :P

[19:18] <geekosaur> I'd probably want to turn them off anyway

[19:18] <sexy-coder-girl> What's funny is the hand-rolled driver lets you configure all sorts of lights but assigning custom values to the G keys is NIY :) Priorities!

[19:18] *** hankache joined
[19:19] * geekosaur is recovering from ~ 3 weeks of his brain refusing to filter. blinkenlights were verboten that whole time...

[19:19] <geekosaur> "oh look, it can configure light shows. is there an off switch for them?"

[19:20] <geekosaur> but, no evidence it does anything at all outside of bios mode on linux, so.

[19:20] <stevieb> I know it's pricey honey, but I can start Microsoft Word with a single keyboard key click!

[19:21] *** labster joined
[19:24] <sexy-coder-girl> The one thing I notice right away about this keyboard is it's about 5 times louder than my old non-mechanical one.

[19:25] <DrForr> How would I determine if a constant exists? Other than eval'ing, that is...

[19:25] <FROGGS> DrForr: say so ::('FOO')

[19:25] <DrForr> Thanks.

[19:25] <FROGGS> or better: say ::('FOO') !~~ Failure

[19:29] <Xliff> sexy-coder-girl: I drool over the blinkenlights. I really do. However I have better things to do with $300. 

[19:29] <Xliff> My disposable cash reserves are low.

[19:29] * Xliff looks at the link from FROGGS and *double faints*

[19:30] <stevieb> m: say ::('FOO') !~~ Failure

[19:30] <camelia> rakudo-moar f7c8dc: OUTPUT«False␤»

[19:31] <Xliff> ( ಠ益ಠ)

[19:31] *** brrt joined
[19:31] <Xliff> FROGGS: Who da f*%^# cares about OLEDs on each key?

[19:31] <Xliff> (which is actually kind kewl... but not at that price!)

[19:31] <Xliff> ( ಠ益ಠ)

[19:31] <sexy-coder-girl> Xliff: my keyboard got that too, I think

[19:32] <Xliff> $300 is beginning to sound reasonable!!!

[19:32] *** domidumont left
[19:32] <sexy-coder-girl> Each key can be one of the 16 mil colors and you can configure them individually or  make them wave and stuff

[19:32] <Xliff> And I can't just believe I said that.

[19:32] <sexy-coder-girl> But the reason I like this keyboard is thanks to its extra keys, not lights :)

[19:33] <Xliff> sexy-coder-girl: Oh no. FROGGS' keyboard has OLED displays for each key glyph. And you can assign them.

[19:33] <Xliff> Yes, extra keys good. Especially if they are extra-clacky.

[19:33] *** AlexDaniel left
[19:33] <Xliff> However my current keyboard thrives in a hostile environment. Both of those keyboards would turn their noses up and flee!

[19:34] * sexy-coder-girl looks at FROGGS's link

[19:34] <sexy-coder-girl> :o $2574 Canukistan dollars!

[19:36] *** hankache left
[19:36] <FROGGS> sadly I dont own such a thing :o)

[19:37] *** jjido_ joined
[19:37] <sexy-coder-girl> I don't think I'd want to :) Well, unless I were making enough money to feel the same about spending $2500 on a keyboard as I do about spending $300 right now :P

[19:39] <stevieb> $2500 CDN... that's only like what, $25 USD at our CDN exchange rate ;)

[19:39] <konobi> optimus?

[19:39] <stevieb> at least that's what it's like when I buy USD before a trip down south lol

[19:40] <sexy-coder-girl> :)

[19:40] <nemo> Xliff: I do a surprising amount of actual coding these days on a $20 BT folding kbd

[19:40] <nemo> my phone has replaced my laptop

[19:40] <sexy-coder-girl> 0.o

[19:41] <nemo> https://www.amazon.com/dp/B018P6BSPQ  one of these

[19:41] <stevieb> I hate using my phone for stuff. Rarely do I use it for anything but phone, text and some rare web browsing when I really need to

[19:41] <nemo> run a linux chroot on my note 4 - use the stylus as a mouse

[19:42] <nemo> (the stylus button does right click \o/ )

[19:42] <nemo> well... not that particular vendor - that kbd is on like a couple of dozen vendors on amazon

[19:42] <nemo> I paid like $22 to be precise

[19:42] <nemo> price seems to have bumped up a bit. maybe was popular?

[19:43] <nemo> has a little magnetic stand/keyboard case that some sell it with

[19:44] <nemo> https://www.amazon.com/dp/B019PIXO78  this one is selling it w/ the stand. again way too expensive tho

[19:47] <Xliff> nemo: Heh! Good on you, mate!

[19:47] <Xliff> I have one of those, however I they never felt quite right cos.... FOLD!

[19:47] <Xliff> The keys adjacent to the fold just weren't.... right!

[19:48] <Xliff> Of course, that is more me than the keyboard. PEBCAK!!

[19:48] *** jjido_ left
[19:50] *** jjido_ joined
[19:50] <dalek> Inline-Perl5: 628a066 | niner++ | lib/Inline/Perl5.pm6:

[19:50] <dalek> Inline-Perl5: Revert "Mu.BUILDALL doesn't take positionals anymore"

[19:50] <dalek> Inline-Perl5: 

[19:50] <dalek> Inline-Perl5: This reverts commit d854a8384cf96a8c871e1ad93367dce4152acb8c.

[19:50] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/628a0669f4

[19:50] <dalek> Inline-Perl5: e4add10 | niner++ | / (3 files):

[19:50] <dalek> Inline-Perl5: Make @*ARGS available as @ARGS in Perl 5

[19:51] <dalek> Inline-Perl5: 

[19:51] <dalek> Inline-Perl5: Fixes GH #56

[19:51] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/e4add10e23

[19:51] <dalek> Inline-Perl5: 8b1a59b | niner++ | META.info:

[19:51] <dalek> Inline-Perl5: Version 0.7

[19:51] <dalek> Inline-Perl5: 

[19:51] <dalek> Inline-Perl5: Changes:

[19:51] <dalek> Inline-Perl5: * Fix "Method 'DESTROY' not found" errors on Perl 5.24

[19:51] <dalek> Inline-Perl5: * Make @*ARGS available as @ARGS in Perl 5

[19:51] <dalek> Inline-Perl5: * Update perlbrew instructions to build latest stable perl

[19:51] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/8b1a59b700

[19:51] <nemo> Xliff: so... the X key was "mushy" on mine, and I finally popped it open and figured out some jackass had installed a ribbon cable w/ a crimp in it, and in the wrong direction

[19:52] <Xliff> nemo: Hmm! Thanks! I may just have to do that... if I can find it.

[19:52] <Xliff> s/do/check/

[19:52] <nemo> Xliff: doing a half fold/unfold usually fixes that

[19:52] *** sherwool left
[19:52] <nemo> I use mine tons tho

[19:52] <nemo> basically any time I'm anywhere and have an urge to have a computer 

[19:52] <nemo> sooo much better than chatting w/ those awful virtual kbds

[19:53] <Xliff> I had a 10.1" tablet to use that keyboard with. I fiddled and dabbled, but found out that the best way to have an SSH session was to wait until I got to a real computer.

[19:53] <nemo> haha

[19:53] <Xliff> Of course, this also could have been due to the quality of the SSH apps at the time.

[19:53] <nemo> Xliff: well. connectbot is crap w/ this kbd I've discovered

[19:53] <Xliff> Ooh..... connectbot. I thought I deconnected that thing.

[19:53] <nemo> also I had to disable the irritating kbd profile that was trying to give me french accents 

[19:54] <nemo> I use connectbot when I'm in a hurry, but usually use a linux chroot and XSDL for a nice responsive session

[19:54] <dalek> Inline-Perl5: c0fd19a | niner++ | / (2 files):

[19:54] <dalek> Inline-Perl5: Remove bogus build dependency on panda

[19:54] <dalek> Inline-Perl5: 

[19:54] <dalek> Inline-Perl5: Fixes GH #61

[19:54] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/c0fd19a299

[19:54] <nemo> Xliff: apart from that works great

[19:54] <Xliff> nemo: at any rate, I am glad you are having some success. I may encourage me to try to set things up again.

[19:54] <nemo> ☺

[19:56] <Xliff> So, FROGGS... here is part of the issues I'm currently having https://gist.github.com/Xliff/bc0a12bcb213d6426a93684fde829193

[19:56] <Xliff> Problem #2 is what I wanted to talk to you about.

[19:59] *** abruanese left
[20:04] <Xliff> FROGGS: https://gist.github.com/Xliff/fa743c54a5164bee0c0381a4d4c46390

[20:06] *** kaare_ left
[20:06] <FROGGS> hmmm

[20:06] *** dha joined
[20:07] <Xliff> Of course, I foolishly thought to start with t/06elements.t as my starting point! =)

[20:07] <FROGGS> I'm not sure if the last test in the second gist actually should pass...

[20:07] <Xliff> It's been interesting. And I have a long way to go.

[20:08] <FROGGS> but if the P5 version does that magic, we maybe should too...

[20:08] <Xliff> Right. If I do another  "$attr = getAttributeNode($attname1)" before that test... it does. Which is expected.

[20:08] <Xliff> And yes, the test applies that it works through P5. BUT! P5 had XS.

[20:09] <Xliff> And I'm wondering if, in some of these operations, there is an implicit copy done.

[20:09] <stevieb> m: (1..5).put.say

[20:09] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2016/06/13/2016-24-speeding-to-tpc/

[20:09] <camelia> rakudo-moar ed510c: OUTPUT«1 2 3 4 5␤True␤»

[20:09] <stevieb> why does that print True? is it literally saying "yes, it printed"?

[20:10] <FROGGS> Xliff: unlikely

[20:10] <Xliff> kk

[20:10] <Xliff> That's something to cross of the list, then.

[20:10] *** jjido_ left
[20:10] <FROGGS> Xliff: though kina

[20:10] <FROGGS> kinda*

[20:11] <Xliff> heh! =)

[20:11] <FROGGS> the $attr object needs updating (nqp::refresh or so)

[20:12] <FROGGS> commt the first test of $attr.value, I bet then the tests will pass

[20:16] <Xliff> FROGGS: Can you add the details as a comment to the gist and I will try that tonight.

[20:16] <Xliff> I have not yet delved into nqp.

[20:16] <FROGGS> will do in a bit

[20:16] <Xliff> No worries. Whenever you have time is OK. I appreciate it! =)

[20:17] *** ZoffixMobile joined
[20:18] <ZoffixMobile> lizmat++ good weekly and awesome speed improvements!

[20:18] <masak> hey, channel: is it reasonable to expect `END` phasers to run on a ^C ?

[20:18] * psch wouldn't think so

[20:19] <FROGGS> lizmat++

[20:19] <[Coke]> m: 1.say.say

[20:19] <camelia> rakudo-moar ed510c: OUTPUT«1␤True␤»

[20:19] <[Coke]> ^^ same thing; .say returns True.

[20:19] <[Coke]> (if it worked)

[20:20] <[Coke]> as does put

[20:20] <lizmat> masak: only if you activate a Supply on the signal

[20:20] <psch> https://irclog.perlgeek.de/perl6/2016-04-08#i_12308594

[20:20] <psch> i knew we had had that before :)

[20:20] <ZoffixMobile> stevieb, IIRC in Perl 5 it returns false if print failed, so returning True is in the spirit of that

[20:21] <ZoffixMobile> m: $*OUT.close; ^5 .put.say

[20:21] <camelia> rakudo-moar ed510c: OUTPUT«write string requires an object with REPR MVMOSHandle␤  in block <unit> at <tmp> line 1␤␤»

[20:21] <stevieb> thanks for the clarifications. Makes sense

[20:21] <psch> m: $*ERR.close; say note "foo"

[20:21] <camelia> rakudo-moar ed510c: ( no output )

[20:21] <ZoffixMobile> it dies

[20:21] <psch> yes, and LTA at that

[20:22] * ZoffixMobile nods

[20:23] <masak> lizmat: oh, that's nice -- any prior art I can look at?

[20:23] <lizmat> masak: did you see the link that psch posted just now ?

[20:24] <jdv79> i also thought that sub and -> were equivalent ways to create an anon sub.

[20:24] <lizmat> jdv79: a sub can have a name, a Block cannot

[20:24] * masak looks

[20:24] <lizmat> m: signal(SIGTERM).act: { exit 1 }; Nil while 1; END say "this is the end, my friend"   # masak

[20:24] <jdv79> m: my $foo = sub ($a,$b) {say $a-$b};$foo(1,2);

[20:25] <jdv79> m: my $foo = -> ($a,$b) {say $a-$b};$foo(1,2);

[20:25] <camelia> rakudo-moar ed510c: OUTPUT«(timeout)this is the end, my friend␤»

[20:25] <camelia> rakudo-moar ed510c: OUTPUT«-1␤»

[20:25] <camelia> rakudo-moar ed510c: OUTPUT«Too few positionals passed; expected 2 arguments but got 0 in sub-signature␤  in block <unit> at <tmp> line 1␤␤»

[20:25] <jdv79> guess the bot is dead?

[20:25] <jdv79> oh

[20:25] <dalek> doc: 9a4bc10 | coke++ | STYLEGUIDE.md:

[20:25] <dalek> doc: add a note about using p5 to explain things.

[20:25] <dalek> doc: review: https://github.com/perl6/doc/commit/9a4bc10f8e

[20:25] <lizmat> jdv79: it was timing out with my signal tap example

[20:25] <psch> m: my $foo = -> ($a,$b) {say $a-$b};$foo([1,2]);

[20:25] <camelia> rakudo-moar ed510c: OUTPUT«-1␤»

[20:26] <psch> jdv79: if you specify destructuring in your Block Signature you have to give something that can be destructured

[20:26] <jdv79> oh, the parens on the ->.  thanks.

[20:26] <ZoffixMobile> jdv79, you can also return from a sub but not block

[20:26] * jdv79 hasn't p6'ed in a while:(

[20:27] *** buharin joined
[20:27] <buharin> hi

[20:27] <buharin> I get perl one liners book

[20:27] <buharin> do you think it is good practical source

[20:27] <buharin> to learn perl?

[20:27] <Xliff> BBL, #perl6 -- hopefully with SOUND!

[20:27] <ZoffixMobile> buharin, it is but Peteris Krumins?

[20:27] <Xliff> /quit

[20:27] *** Xliff left
[20:27] *** acrussell joined
[20:28] <ZoffixMobile> *by

[20:28] <buharin> yep

[20:28] <buharin> Peteris

[20:28] <[Coke]> buharin: never read it, but it looks more like a cookbook than a learning guide.

[20:28] <ZoffixMobile> buharin, sure, he's a good dude. But it's a Perl 5 book :)

[20:29] <buharin> oh ok

[20:29] <buharin> ;d

[20:29] <buharin> so maybe just take only recipes which I really need

[20:30] <ZoffixMobile> whoa! nine++ # @ARGV in Inline::Perl5

[20:31] *** buharin left
[20:32] *** frobisher joined
[20:32] *** dha left
[20:32] *** frobisher is now known as dha

[20:34] <tbrowder> Zoffix: I remove my concern...can't find a good example, but discussion has helped me understand the Geo::Ellipsoid tests...thanks!

[20:35] <vendethiel> Damn, slashdot is terrible

[20:35] <ZoffixMobile> cool

[20:35] <vendethiel> they're not even criticizing perl(6). they're just bad questions

[20:35] *** ZoffixMobile left
[20:37] <dha> People still read slashdot?

[20:37] <Juerd> dha: One guy in our local hackerspace does.

[20:37] <tadzik> I occasionally do

[20:37] <Juerd> dha: He keeps complaining about it, but apparently can't kick the addiction :)

[20:38] <dha> Should I actually mention it as a resource in my YAPC talk? Or are these people outliers?

[20:38] <dha> I'm now also wondering if people still use PerlMonks.

[20:38] <perlpilot> I looked it today to see the drivel that people were asking Larry Wall

[20:39] *** jjido_ joined
[20:39] <dha> Yeah, I don't think I want to point people at drivel. :-)

[20:39] *** jjido_ left
[20:40] <masak> wow, to-json and from-json have moved out of core?

[20:40] <FROGGS> O.o

[20:40] <masak> didn't notice when that happened

[20:40] <masak> can't say I disapprove, though

[20:40] <moritz> they were never meant to be in there

[20:40] <nine> last week or so

[20:41] <masak> moritz: there is that

[20:41] <FROGGS> was still handy though

[20:41] <nine> ok, more like a month ago

[20:41] * masak goes with a custom simple format for his data file instead

[20:41] <moritz> Date:   Sun May 8 17:34:16 2016 +0200

[20:41] <moritz> move {from,to}-json to Rakudo::Internals::JSON 

[20:41] <moritz> ... and add deprecations for the old locations.

[20:41] <nine> boy how time flies

[20:41] <masak> like an arrow

[20:41] <masak> boy how fruit flies like a banana

[20:41] <masak> :P

[20:42] <FROGGS> *g*

[20:43] <FROGGS> gnight #perl6

[20:43] *** FROGGS left
[20:45] *** brrt left
[20:45] <masak> 'night, FR<tab><tab><tab>

[20:47] *** vendethiel left
[20:58] *** tbrowder_ joined
[21:02] *** tbrowder_ left
[21:08] *** kid51 joined
[21:08] *** wamba left
[21:11] *** skids left
[21:12] *** Amnez777 left
[21:15] <Zoffix> htmlify.p6 needs a "I'm just trying to make a few tweaks to the website" build mode :/

[21:19] <dalek> doc: 8935ae1 | (Zoffix Znet)++ | CONTRIBUTING.md:

[21:19] <dalek> doc: Add graphviz install command in build docs

[21:19] <dalek> doc: review: https://github.com/perl6/doc/commit/8935ae13b9

[21:19] *** agentzh joined
[21:20] <dalek> doc: f3eec8c | (Zoffix Znet)++ | CONTRIBUTING.md:

[21:20] <dalek> doc: Provide faster and less quiet way to install Mojolicious

[21:20] <dalek> doc: 

[21:20] <dalek> doc: The official website install instructions omit tests and they're generally lengthy and thorough and not really needed.

[21:20] <dalek> doc: review: https://github.com/perl6/doc/commit/f3eec8c6c4

[21:21] *** SHODAN left
[21:24] <timeless> Zoffix: yes

[21:24] <timeless> i'm trying to get make to run faster

[21:24] <Zoffix> timeless++

[21:24] <timeless> Zoffix: `less quiet`? ?

[21:26] *** kerframil joined
[21:26] *** pullphinger left
[21:27] *** SHODAN joined
[21:27] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) {my $tokens = %tm.keys.join;$m ~~ s:gx/(<[$tokens]>)/-%tm{$1}-/;$m ~~ s:g/(^|\s)-/$1/;$m ~~ s:g/-(\s|$)/$1/;$m ~~ s:g/--/-/;return $m;}; say english-for-tokens('%');

[21:27] <camelia> rakudo-moar 865bf3: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Adverb gx not allowed on substitution␤at <tmp>:1␤------> 3join;$m ~~ s:gx/(<[$tokens]>)/-%tm{$1}-/7⏏5;$m ~~ s:g/(^|\s)-/$1/;$m ~~ s:g/-(\s|$)␤»

[21:27] <timeless> right, so, what's the correct magic for `i want to run some perl in the second part of an s/// ?

[21:28] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) {my $tokens = %tm.keys.join;$m ~~ s:gx/(<[$tokens]>)/"-"~%tm{$1}~"-"/;$m ~~ s:g/(^|\s)-/$1/;$m ~~ s:g/-(\s|$)/$1/;$m ~~ s:g/--/-/;return $m;}; say english-for-tokens('%');

[21:28] <camelia> rakudo-moar 865bf3: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Adverb gx not allowed on substitution␤at <tmp>:1␤------> 3m ~~ s:gx/(<[$tokens]>)/"-"~%tm{$1}~"-"/7⏏5;$m ~~ s:g/(^|\s)-/$1/;$m ~~ s:g/-(\s|$)␤»

[21:28] <jnthn> Stick it in a block

[21:28] <jnthn> s/.../{...}/

[21:29] *** kurahaupo left
[21:29] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) {my $tokens = %tm.keys.join;$m ~~ s:g/(<[$tokens]>)/{"-"~%tm{$1}~"-"}/;$m ~~ s:g/(^|\s)-/$1/;$m ~~ s:g/-(\s|$)/$1/;$m ~~ s:g/--/-/;return $m;}; say english-for-tokens('%');

[21:29] <camelia> rakudo-moar 865bf3: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter - (must be quoted to match literally)␤at <tmp>:1␤------> 3s]>)/{"-"~%tm{$1}~"-"}/;$m ~~ s:g/(^|\s)7⏏5-/$1/;$m ~~ s:g/-(\s|$)/$1/;$m ~~ s:g/--␤Unrecognized regex metacharacter - (must be quot…»

[21:29] <timeless> ok, i think that's progress

[21:30] <timeless> someone will have to explain to me what `regex metacharacters` are, and why i can't just do that...

[21:30] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) {my $tokens = %tm.keys.join;$m ~~ s:g/(<[$tokens]>)/{"-"~%tm{$1}~"-"}/;$m ~~ s:g/(^|\s)\-/$1/;$m ~~ s:g/\-(\s|$)/$1/;$m ~~ s:g/\-\-/-/;return $m;}; say english-for-tokens('%');

[21:30] <camelia> rakudo-moar 865bf3: OUTPUT«%␤»

[21:30] <timeless> well, gee, that didn't work

[21:31] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; my $tokens = %tm.keys.join;say "<[$tokens]>"

[21:31] <camelia> rakudo-moar 865bf3: OUTPUT«<[?%.-#]>␤»

[21:31] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; say %tm{'%'}

[21:31] <camelia> rakudo-moar 865bf3: OUTPUT«percent␤»

[21:32] <jnthn> Just try s:g/@(%tm.keys)/.../ or so

[21:33] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) {my $tokens = %tm.keys.join;$m ~~ s:g/(@(%tm.keys))/{"-"~%tm{$1}~"-"}/;$m ~~ s:g/(^|\s)\-/$1/;$m ~~ s:g/\-(\s|$)/$1/;$m ~~ s:g/\-\-/-/;return $m;}; say english-for-tokens('%');

[21:33] <camelia> rakudo-moar 865bf3: OUTPUT«Use of Nil in string context  in block  at <tmp> line 1␤Use of uninitialized value %tm of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block  at <tmp> line 1␤Cannot assign to a readonl…»

[21:33] *** AlexDaniel joined
[21:34] <jnthn> m: my %tm = <% percent # hash - dash . dot ? question>; say "-".subst(/@(%tm.keys)/, { %tm{$_} }, :g)

[21:34] <camelia> rakudo-moar 865bf3: OUTPUT«dash␤»

[21:34] <Zoffix> timeless, that looks horrifying

[21:34] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) {my $tokens = %tm.keys.join;$m ~~ s:g/@(%tm.keys)/{"-"~%tm{$1}~"-"}/;$m ~~ s:g/(^|\s)\-/$1/;$m ~~ s:g/\-(\s|$)/$1/;$m ~~ s:g/\-\-/-/;return $m;}; say english-for-tokens('%');

[21:34] <camelia> rakudo-moar 865bf3: OUTPUT«Use of Nil in string context  in block  at <tmp> line 1␤Use of uninitialized value %tm of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block  at <tmp> line 1␤Cannot assign to a readonl…»

[21:35] <timeless> Zoffix: keep in mind that i'm mostly a JS dev who speaks perl5

[21:35] <Zoffix> m: my %tm = <% percent # hash - dash . dot ? question>; say /@(%tm.keys)/

[21:35] <camelia> rakudo-moar 865bf3: OUTPUT«/@(%tm.keys)/␤»

[21:35] <Zoffix> jnthn, what sorcery is that? :o

[21:36] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) {my $tokens = %tm.keys.join;$m =  $m.subst(%tm.keys,{"-"~%tm{$1}~"-"});$m ~~ s:g/(^|\s)\-/$1/;$m ~~ s:g/\-(\s|$)/$1/;$m ~~ s:g/\-\-/-/;return $m;}; say english-for-tokens('%');

[21:36] <camelia> rakudo-moar 865bf3: OUTPUT«Cannot assign to a readonly variable or a value␤  in sub english-for-tokens at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:36] <timeless> AlexDaniel or someone else, can rakudo please report better than `line 1`?

[21:36] <jnthn> m: my %tm = <% percent # hash - dash . dot ? question>; my $x = 'a-b'; $x ~~ s:g/@(%tm.keys)/-%tm{$/}-/; say $x;

[21:36] <camelia> rakudo-moar 865bf3: OUTPUT«a-dash-b␤»

[21:36] *** bjorkintosh joined
[21:36] *** bjorkintosh left
[21:37] <jnthn> timeless: If you run it locally and spread your code out, it can ;)

[21:37] <timeless> jnthn: the fact that you can use `$/` inside a s/// is horrifying.

[21:37] <jnthn> Zoffix: /@a/ means /@a[0] | @a[1] | .../

[21:37] <jnthn> timeless: Why?

[21:37] <AlexDaniel> doesn't it make sense?

[21:37] <timeless> jnthn: ... it just requires a different kind of parser

[21:37] <masak> timeless: I find it rather natural

[21:37] <jnthn> Well, yeah :)

[21:37] <Zoffix> jnthn, wow, neat

[21:38] <jnthn> Zoffix: And then @(...) just lets you put any expression that can evaluate to or coerce to a list in there :)

[21:38] <Zoffix> :)

[21:38] <jnthn> Zoffix: Pun on the @(....) coercer in the main language.

[21:38] <timeless> the /@a/ notation  is quite awesome

[21:38] <AlexDaniel> timeless: just don't use / then

[21:38] <Zoffix> timeless,  it can if you stick ␤ to separate lines.

[21:38] <Zoffix> m: ␤␤␤␤␤␤; lfcsadjfdasdbs

[21:38] <camelia> rakudo-moar 865bf3: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    lfcsadjfdasdbs used at line 1␤␤»

[21:38] *** setty1 left
[21:39] <Zoffix> :/

[21:39] <timeless> =b

[21:39] <AlexDaniel> why does it need newlines in order to produce a proper message?

[21:39] <Zoffix> m: say 42+42; ␤␤␤␤␤␤; lfcsadjfdasdbs

[21:39] <camelia> rakudo-moar 865bf3: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    lfcsadjfdasdbs used at line 7␤␤»

[21:39] <jnthn> m: my %tm = <% percent # hash - dash . dot ? question>; my $x = 'a-b'; $x ~~ s:g/@(%tm.keys)/ = "-%tm{$/}-"; say $x;

[21:39] <camelia> rakudo-moar 865bf3: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed replacement part; couldn't find final /␤at <tmp>:1␤------> 3 s:g/@(%tm.keys)/ = "-%tm{$/}-"; say $x;7⏏5<EOL>␤    expecting any of:␤        postfix␤»

[21:39] <jnthn> m: my %tm = <% percent # hash - dash . dot ? question>; my $x = 'a-b'; $x ~~ s:g{@(%tm.keys)} = "-%tm{$/}-"; say $x;

[21:39] <camelia> rakudo-moar 865bf3: OUTPUT«a-dash-b␤»

[21:39] *** Emeric left
[21:39] <jnthn> You can also write the assignment form of substitution, which may be easier on the eye

[21:39] <timeless> easier on the eye, maybe, definitely not on my brain

[21:40] <timeless> this is not the perl5 i thought i knew :)

[21:40] <Zoffix> AlexDaniel, what's "proper message"? I think the Q was how it can report the line number of the error and since everything is on one line, of course it'll report the error on line 1

[21:40] <timeless> Zoffix: it can report a cursor position w/in the line

[21:40] <timeless> which it does in some examples

[21:40] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; my $x = 'a-b'; $x ~~ s:g/@(%tm.keys)/ = "-%tm{$/}-"; say $x;

[21:40] <camelia> rakudo-moar 865bf3: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed replacement part; couldn't find final /␤at <tmp>:1␤------> 3 s:g/@(%tm.keys)/ = "-%tm{$/}-"; say $x;7⏏5<EOL>␤    expecting any of:␤        postfix␤»

[21:40] <Zoffix> Ah

[21:40] <AlexDaniel> yes, that's how I understood it – where's a proper position?

[21:41] <Zoffix> m: say 42+42; ␤␤␤␤␤␤; say 5+6; lfcsadjfdasdbs

[21:41] <camelia> rakudo-moar 865bf3: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    lfcsadjfdasdbs used at line 7␤␤»

[21:41] <AlexDaniel> saying “line 1” is basically like saying “file foo.p6”

[21:41] <Zoffix> *shrug*

[21:41] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) {my $tokens = %tm.keys.join;$m =  $m.subst(%tm.keys,{"-"~%tm{$1}~"-"});$m ~~ s:g/(^|\s)\-/$1/;$m ~~ s:g/\-(\s|$)/$1/;$m ~~ s:g/\-\-/-/;return $m;}; say english-for-tokens('%');

[21:41] <camelia> rakudo-moar 865bf3: OUTPUT«Cannot assign to a readonly variable or a value␤  in sub english-for-tokens at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:41] <timeless> clearly there's a `readonly` variable somewhere

[21:41] <timeless> and an assignment somewhere

[21:41] <AlexDaniel> timeless: basically, in such cases we just say that it is less than awesome

[21:41] <timeless> to me, the pointer should be near the assignment

[21:41] <tony-o> you need is rw on the english-for-tokens sig

[21:42] <AlexDaniel> timeless: and submit a LTA bug report! :)

[21:42] <tony-o> sub english-for-tokens($m is rw) ... 

[21:42] <timeless> tony-o: oh, i'm trying to use copy value

[21:42] <tony-o> ah, then use 'is copy'

[21:42] <timeless> is there sub english-for-tokens($m is copy) ?

[21:42] <Zoffix> yes

[21:43] <timeless> wow

[21:43] <timeless> that's the perl i like :)

[21:43] <timeless> things just as you'd expect them to be :)

[21:43] <Zoffix> timeless, http://perl6.party/post/Perl-6-There-Are-Traitors-In-Our-Midst--Part-1#iscopy

[21:43] <timeless> AlexDaniel: i don't have time to do the TLA

[21:43] <AlexDaniel> yea, timeless

[21:43] <tony-o> Zoffix: good link

[21:43] <AlexDaniel> timeless: TLA?

[21:43] <timeless> LTA

[21:44] <AlexDaniel> timeless: well, if you wont submit it then I'll do in an hour or so :)

[21:44] <timeless>  thanks

[21:44] * timeless goes back to try to find the assignment form :/

[21:45] <jnthn> timeless: Note that if you're doing $m = $m.subst...; return $m, you could do away wiht the `is copy` and just so return $m.subst...; :-)

[21:45] <timeless> jnthn: ok, what does this actually look like?

[21:46] <timeless> (my scrollback and brain aren't handling this stream well at all)

[21:46] <timeless> (also, i have ~30mins and i want to get something working, not learn all of perl6 or boil an ocean)

[21:47] *** stevieb9 joined
[21:47] <jnthn> my %tm = <% percent # hash - dash . dot ? question>; english-for-tokens($m) { return $m.subst(/@(%tm.keys)/, {"-%tm{$_}-"}, :g); }; say english-for-tokens('%');

[21:47] <jnthn> m: my %tm = <% percent # hash - dash . dot ? question>; english-for-tokens($m) { return $m.subst(/@(%tm.keys)/, {"-%tm{$_}-"}, :g); }; say english-for-tokens('%');

[21:47] <camelia> rakudo-moar 865bf3: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$m' is not declared␤at <tmp>:1␤------> 3h . dot ? question>; english-for-tokens(7⏏5$m) { return $m.subst(/@(%tm.keys)/, {"-␤»

[21:47] <jnthn> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) { return $m.subst(/@(%tm.keys)/, {"-%tm{$_}-"}, :g); }; say english-for-tokens('%');

[21:47] <camelia> rakudo-moar 865bf3: OUTPUT«-percent-␤»

[21:48] <jnthn> That maybe? :)

[21:48] <Zoffix> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens { "-%tm{$^a}-" }; say english-for-tokens('%');

[21:48] <camelia> rakudo-moar 865bf3: OUTPUT«-percent-␤»

[21:49] * Zoffix doesn't really get what that sub is meant to be doing

[21:49] <timeless> : my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) { return $m.subst(/@(%tm.keys)/, {"-%tm{$_}-"}, :g); }; say english-for-tokens('THIS%%THAT');

[21:49] <timeless> my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) { return $m.subst(/@(%tm.keys)/, {"-%tm{$_}-"}, :g); }; say english-for-tokens('THIS%%THAT');

[21:49] <jnthn> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) { return $m.subst(/@(%tm.keys)/, {"-%tm{$_}-"}, :g); }; say english-for-tokens('text with % and -');

[21:49] <camelia> rakudo-moar 865bf3: OUTPUT«text with -percent- and -dash-␤»

[21:49] <jnthn> That I guess :)

[21:49] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) { return $m.subst(/@(%tm.keys)/, {"-%tm{$_}-"}, :g); }; say english-for-tokens('THIS%%THAT');

[21:49] <camelia> rakudo-moar 865bf3: OUTPUT«THIS-percent--percent-THAT␤»

[21:49] <jnthn> Enough for me today...'night o/

[21:49] <timeless> hrm...

[21:50] <timeless> almost right, except i wanted it to collapse doubled dashes

[21:50] <tony-o> that's p neato

[21:50] <timeless> but i can fix tha

[21:51] <timeless> m:my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($message) {my $tokens = %tokenmap.keys.join;return $message.subst(/@(%tm.keys)/, {"-"~%tokenmap{$_}~"-"}/.subst(/(^|\s)\-/, "$1").subst(/\-(\s|$)/, "$1").subst(/\-\-/, '-');}; say english-for-tokens('%%%')

[21:51] <Zoffix> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens {  $^a.comb.map({ %tm{$_}:exists ?? "-%tm{$_}-" !!  $_}).join }; say english-for-tokens('THIS%%THAT');

[21:51] <camelia> rakudo-moar 865bf3: OUTPUT«THIS-percent--percent-THAT␤»

[21:53] <timeless> ok, is that more perlish?

[21:53] *** stevieb9 left
[21:53] <timeless> not that i still really want to strip `-`s that hit spaces and start/end

[21:54] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens {  $^a.comb.map({ %tm{$_}:exists ?? "-%tm{$_}-" !!  $_}).join.subst(/(^|\s)\-/, "$1").subst(/\-(\s|$)/, "$1").subst(/\-\-/, '-'); }; say english-for-tokens('THIS%%THAT');say english-for-tokens('##'); say english-for-tokens("$ $")

[21:54] <camelia> rakudo-moar 865bf3: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Non-variable $ must be backslashed␤at <tmp>:1␤------> 3r-tokens('##'); say english-for-tokens("7⏏5$ $")␤    expecting any of:␤        argument list␤        double quotes␤        prefix␤  …»

[21:55] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens {  $^a.comb.map({ %tm{$_}:exists ?? "-%tm{$_}-" !!  $_}).join.subst(/(^|\s)\-/, "$1").subst(/\-(\s|$)/, "$1").subst(/\-\-/, '-'); }; say english-for-tokens('THIS%%THAT');say english-for-tokens('##'); say english-for-tokens('$ $')

[21:55] <camelia> rakudo-moar 865bf3: OUTPUT«Use of Nil in string context  in sub english-for-tokens at <tmp> line 1␤Use of Nil in string context  in sub english-for-tokens at <tmp> line 1␤THIS-percent-percent-THAT␤Use of Nil in string context  in sub english-for-tokens at <tmp> line 1␤Use of…»

[21:56] <timeless> AlexDaniel: LTA ^

[21:56] <timeless> say "-a-".subst(/(^|\s)\-/, "$1")

[21:56] <timeless> m:say "-a-".subst(/(^|\s)\-/, "$1")

[21:57] <timeless> m: say "-a-".subst(/(^|\s)\-/, "$1")

[21:57] <camelia> rakudo-moar 865bf3: OUTPUT«Use of Nil in string context  in block <unit> at <tmp> line 1␤a-␤»

[21:57] <timeless> m: say "-a-".subst(/(^|\s)\-/, "$_")

[21:57] <camelia> rakudo-moar 865bf3: OUTPUT«Use of uninitialized value $_ of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at <tmp> line 1␤a-␤»

[21:57] <Zoffix> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens {  my $out; my $is-t = False; for $^a.comb {  if %tm{$_} { $out ~= ($is-t ?? '' !! '-' ) ~ "%tm{$_}-"; $is-t = True; next; }; $out ~= $_; $is-t = False; }; $out }; say english-for-tokens('THIS%%THAT');

[21:57] <camelia> rakudo-moar 865bf3: OUTPUT«THIS-percent-percent-THAT␤»

[21:58] <Zoffix> timeless, don't know about "more perlish" but to my eye more readable (granted, a large part of that is 'cause I just wrote it :P)

[21:58] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens {  my $out; my $is-t = False; for $^a.comb {  if %tm{$_} { $out ~= ($is-t ?? '' !! '-' ) ~ "%tm{$_}-"; $is-t = True; next; }; $out ~= $_; $is-t = False; }; $out }; say english-for-tokens('THIS% %THAT');

[21:58] <camelia> rakudo-moar 865bf3: OUTPUT«THIS-percent- -percent-THAT␤»

[21:58] <timeless> Zoffix: i'm hoping to get `THIS-percent percent-THAT`

[21:59] * timeless hopes that makes sense

[21:59] <Zoffix> timeless, what's the condition there? Whitespace? Space?

[21:59] <timeless> in my mind, \s

[21:59] *** cognominal left
[21:59] <masak> 'night, #perl6

[21:59] <Zoffix> night

[21:59] <timeless> night

[22:00] <timeless> Zoffix: basically, if a token runs up against some other "word", i want a "-" to split it from the word

[22:00] <timeless> but if it's running up against ^, \s, or $, then it doesn't need something, because there's naturally something

[22:00] <timeless> a token running up against another token should have one dash, not two

[22:01] <timeless> hopefully that sorta makes sense

[22:01] <timeless> we're trying to translate $a to dollar-a, "$a #b" to "dollar-a hash-b"

[22:02] <timeless> we=me, but hopefully i can convince everyone that this is a good and human-understandable way to read things :)

[22:03] *** ptolemarch left
[22:04] <timeless>  the easiest way i can think of it is `subst token for -word-` + remove extraneous (^/ / $) dashes + collapse double --

[22:05] <timeless> yes, you can create a state machine to decide whether you need a dash or not, but it seems more complicated than just doing multiple passes

[22:05] <timeless> ideally strings are fairly short (<10 chars of input?)

[22:05] *** acrussell left
[22:06] <Zoffix> m: my %tm = <% percent # hash - dash . dot ? question>; $_ = $_ but role MyToken {} for %tm.values; sub english-for-tokens {  my $out; my $last-t = False; for $^a.comb.map: { %tm{$_} // $_ } { unless $_ ~~ MyToken { $out ~= '-' if $last-t; $out ~= $_; $last-t = False; next }; $last-t = True; if $out ~~ /\w$/ { $out ~= '-' }; $out ~= $_  }; $out }; say english-for-tokens('THIS%%THAT');

[22:06] <camelia> rakudo-moar 865bf3: OUTPUT«THIS-percent-percent-THAT␤»

[22:07] <Zoffix> Yey for overly complex, convoluted code :)

[22:07] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; $_ = $_ but role MyToken {} for %tm.values; sub english-for-tokens {  my $out; my $last-t = False; for $^a.comb.map: { %tm{$_} // $_ } { unless $_ ~~ MyToken { $out ~= '-' if $last-t; $out ~= $_; $last-t = False; next }; $last-t = True; if $out ~~ /\w$/ { $out ~= '-' }; $out ~= $_  }; $out }; say

[22:07] <timeless> english-for-tokens('% #THAT$');

[22:07] <camelia> rakudo-moar 865bf3: OUTPUT«5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3out ~= '-' }; $out ~= $_  }; $out }; say7⏏5<EOL>␤Other potential difficulties:␤    Unsupported use of bare "say"; in Perl 6 please use .say if you meant $_, or u…»

[22:07] <Zoffix> timeless, if that's for what I think it is (fixing the issue with punctuation URLs on docs), then just trip double '--' or not worry about them at all

[22:07] *** rindolf left
[22:07] <Zoffix> s/trip/strip/;

[22:07] <timeless> right issue

[22:08] <timeless> but, i really don't want someone to have to search for `-dash`

[22:08] <Zoffix> m: my %tm = <% percent # hash - dash . dot ? question>; $_ = $_ but role MyToken {} for %tm.values; sub english-for-tokens {  my $out; my $last-t = False; for $^a.comb.map: { %tm{$_} // $_ } { unless $_ ~~ MyToken { $out ~= '-' if $last-t; $out ~= $_; $last-t = False; next }; $last-t = True; if $out ~~ /\w$/ { $out ~= '-' }; $out ~= $_  }; $out }; say english-for-tokens('THIS% %THAT');

[22:08] <camelia> rakudo-moar 865bf3: OUTPUT«THIS-percent- percent-THAT␤»

[22:08] <Zoffix> doesn't even work right heh

[22:08] <timeless> that's just asking for a search engine to hate me

[22:08] <timeless> the problem is that `-` is the right general joiner

[22:08] <Zoffix> timeless, what do you mean "search for dash"?

[22:08] <timeless> but it's a horrible lead joiner

[22:08] <timeless> google: {term from perl docs}

[22:08] <timeless> if we escape "%%" as "-percent-percent-" or similar

[22:09] <timeless> and you google "-percent-percent"

[22:09] <timeless> (or w/ the trailing -)

[22:09] <timeless> google is going to see that as a search for {minus} {percent-percent....}

[22:09] <timeless> and exclude everything you want

[22:09] <timeless> which is really really not what we want :/

[22:09] <Zoffix> why the f would you google for "-percent-percent"? :S

[22:09] <timeless> well, if we encode %% as -percent-percent- ...

[22:10] <timeless> you might try googling that way

[22:10] <Zoffix> I wouldn't use any dashes

[22:10] <Zoffix> In fact, I'd likely google for %%

[22:10] <Zoffix> But I wouldn't. 'cause I'd use the doc search.

[22:10] <timeless> some of these don't google well

[22:10] <timeless> `//` especially doesn't iirc

[22:10] <timeless> half the reason for this exercise is to make searching work better

[22:11] <timeless> (part of the reason is to make urls work better for the server, but, that's only part)

[22:11] <timeless> most people don't use local search engines

[22:11] <Zoffix> Well, my suggestion would be to forget about this. Right now the problem is those pages don't generate and don't load. It's pointless trying to ascertain how well those pages are googlable when there aren't any pages to begin with :)

[22:11] <timeless> i'd rather fix it right once

[22:11] <timeless> than get them loading w/ crappy urls

[22:11] <Zoffix> Didn't you just have ~30mins?

[22:12] <timeless> yep

[22:12] <timeless> (it's 6:15 now, i need to be somewhere by 7:15, and it takes ~20mins, plus i need to put on clothes for outside...)

[22:13] *** rurban_ left
[22:13] <timeless> so, is your a.comb.map really better than using an s/// or subst?

[22:14] <timeless> perl: the language where you have half a dozens ways to do whatever you want to do

[22:14] <Zoffix> Right, TimToady is the philosophy, so it's a bit silly to ask if it's better

[22:15] * timeless hasn't read TimToady

[22:15] *** stevieb9 joined
[22:15] <Zoffix> TimToady = TIMTOWTDI = There Is More Than One Way To Do It

[22:18] *** cognominal joined
[22:19] <timeless> http://doc.perl6.org/routine/subst

[22:19] <timeless> > There is an in-place syntactic variant of subst spelled s/matcher/replacement.

[22:19] <timeless> that last bit is missing a trailing `/`, right?

[22:20] *** Sgeo joined
[22:20] <dalek> doc: b2904a1 | (Zoffix Znet)++ | doc/Type/Str.pod:

[22:20] <dalek> doc: Fix typo timeless++

[22:20] <dalek> doc: review: https://github.com/perl6/doc/commit/b2904a1117

[22:21] <timeless> hrm, captures start at 0?

[22:21] <Zoffix> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens { $^a.comb.map({ %tm{$_} ?? "-%tm{$_}-" !! $_ }).join.subst: /^\-|'--'|\-<before \W>|<after \W>\-|\-$/, '', :g }; say english-for-tokens('THIS% %THAT');

[22:21] <camelia> rakudo-moar 865bf3: OUTPUT«THIS-percent percent-THAT␤»

[22:21] <Zoffix> timeless, yes

[22:22] <timeless> is that consistent w/ perl5?

[22:22] <Zoffix> No, in Perl 5 they start with 1

[22:22] *** huggable left
[22:22] *** huggable joined
[22:22] <timeless> http://doc.perl6.org/language/5to6-nutshell didn't mention that...

[22:24] <dalek> doc: 6e3a139 | (Zoffix Znet)++ | doc/Language/5to6-nutshell.pod:

[22:24] <dalek> doc: Mentions captures start with $0

[22:24] <dalek> doc: review: https://github.com/perl6/doc/commit/6e3a1397f2

[22:24] <Zoffix> timeless++

[22:24] *** TEttinger joined
[22:24] <timeless> +    /(.+)/ and print $1; # Perl 5

[22:24] <timeless>  +    /(.+)/ and print $0; # Perl 5

[22:24] <timeless> ...

[22:24] <timeless> so close

[22:25] <dalek> doc: 32c14cd | (Zoffix Znet)++ | doc/Language/5to6-nutshell.pod:

[22:25] <dalek> doc: Fix typo

[22:25] <dalek> doc: review: https://github.com/perl6/doc/commit/32c14cdcb9

[22:25] *** baest joined
[22:25] <timeless> better :)

[22:26] <timeless> m: say "c a".subst(/(.)a/, "b$0")

[22:26] <camelia> rakudo-moar 865bf3: OUTPUT«Use of Nil in string context  in block <unit> at <tmp> line 1␤cb␤»

[22:26] <timeless> so... i still don't understand wha ti'm doing wrong here

[22:27] *** TEttinger left
[22:27] *** baest_ left
[22:27] <Juerd> $0 in Perl 5 has nothing to do with regexes even

[22:28] <Zoffix> timeless, that doesn't work 'cause you're interpolating the $0 from your current scope, not one when subst is doing its thang

[22:28] <dha> perl -e 'print "Just another p$0-r-l hacker\n"

[22:28] <dha> '

[22:28] <Zoffix> m: say "c a".subst(/(.)a/, -> $/ { "b$0"} )

[22:28] <camelia> rakudo-moar 865bf3: OUTPUT«cb ␤»

[22:29] <timeless> is there any more concise way to do that?

[22:29] * timeless will use that otherwise

[22:30] <Zoffix> m: <improve-search-on-docs-site  play-Assassins-Creed>.pick.say

[22:30] <camelia> rakudo-moar 865bf3: OUTPUT«improve-search-on-docs-site␤»

[22:30] <timeless> =b

[22:30] <timeless> thanks camelia 

[22:30] <Juerd> Speaking of docs, any thoughts on b2gills's comment at https://gist.github.com/Juerd/b6531810922d0cefec82b650be4915ca?

[22:30] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) { return $m.subst(/@(%tm.keys)/, {"-%tm{$_}-"}, :g).subst(/(^|\s)\-/, -> $/ { "$0"}; }; say english-for-tokens('text with % and -');

[22:30] <camelia> rakudo-moar 865bf3: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' ␤at <tmp>:1␤------> 3}, :g).subst(/(^|\s)\-/, -> $/ { "$0"}; 7⏏5}; say english-for-tokens('text with % a␤    expecting any of:…»

[22:31] <Juerd> I know b2gills's opinion about .WHAT vs .^name, but I'd like to sollicit more responses

[22:35] <timeless> i don't see a comment

[22:35] <timeless> just 118 lines of text, all of which are readable

[22:35] <Juerd> I see a comment at the bottom of that

[22:35] * timeless has an actual book w/ 2 errors to report on tonight

[22:36] <Juerd> https://juerd.nl/i/14f77b90306d38b7d5c871371d693431.png

[22:36] <timeless> :o -- irccloud didn't show me that

[22:36] *** dha left
[22:37] *** bjz_ left
[22:37] <timeless> i can't comment on b2gills 's comment

[22:37] <timeless> because i don't understand how .^name and .WHAT differ

[22:37] <timeless> i sure hope they're explained somewhere

[22:38] <Juerd> .WHAT returns a type object, which is undefined

[22:38] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) { return $m.subst(/@(%tm.keys)/, {"-%tm{$_}-"}, :g).subst(/(^|\s)\-/, -> $/ { "$0"}); }; say english-for-tokens('text with % and -');

[22:38] <camelia> rakudo-moar 865bf3: OUTPUT«text with percent- and -dash-␤»

[22:38] <Juerd> .^name returns a string

[22:38] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) { return $m.subst(/@(%tm.keys)/, {"-%tm{$_}-"}, :g).subst(/(^|\s)\-/, -> $/ { "$0"}).subst(/($|\s)\-/, -> $/ { "$0"}); }; say english-for-tokens('text with % and -');

[22:38] <camelia> rakudo-moar 865bf3: OUTPUT«text with percent- and dash-␤»

[22:38] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) { return $m.subst(/@(%tm.keys)/, {"-%tm{$_}-"}, :g).subst(/(^|\s)\-/, -> $/ { "$0"}, :g).subst(/($|\s)\-/, -> $/ { "$0"}, :g); }; say english-for-tokens('text with % and -');

[22:38] <camelia> rakudo-moar 865bf3: OUTPUT«text with percent- and dash-␤»

[22:38] *** cdg left
[22:40] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) { return $m.subst(/@(%tm.keys)/, {"-%tm{$_}-"}, :g).subst(/(^|\s)\-/, -> $/ { "$0"}, :g).subst(/($|\s)\-/, -> $/ { "$0"}, :g).subst(/\-\-/, "-", :g); }; say english-for-tokens('text with %, ##, @ /, and -');

[22:40] <camelia> rakudo-moar 865bf3: OUTPUT«text with percent-, hash-hash-, @ /, and dash-␤»

[22:40] <dalek> doc: 6c38120 | (Zoffix Znet)++ | html/css/style.css:

[22:40] <dalek> doc: Remove too-large margins on mobiles

[22:40] <dalek> doc: review: https://github.com/perl6/doc/commit/6c381205ca

[22:40] <timeless> ok, that /almost/ works for me

[22:40] <Zoffix> timeless, what wasn't working in my last version?

[22:41] <Zoffix> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens { $^a.comb.map({ %tm{$_} ?? "-%tm{$_}-" !! $_ }).join.subst: /^\-|'--'|\-<before \W>|<after \W>\-|\-$/, '', :g }; say english-for-tokens('text with %, ##, @ /, and -');

[22:41] <camelia> rakudo-moar 865bf3: OUTPUT«text with percent, hashhash, @ /, and dash␤»

[22:41] * timeless might not have noticed it

[22:41] <Zoffix> hm

[22:41] <timeless> `hashhash`

[22:41] <Zoffix> never mind

[22:41] <timeless> mine isn't working either

[22:41] <timeless> and my example sucks

[22:41] <Zoffix> Ah

[22:41] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens($m) { return $m.subst(/@(%tm.keys)/, {"-%tm{$_}-"}, :g).subst(/(^|\s)\-/, -> $/ { "$0"}, :g).subst(/($|\s)\-/, -> $/ { "$0"}, :g).subst(/\-\-/, "-", :g); }; say english-for-tokens('text with %, ##, . ?, and -');

[22:41] <camelia> rakudo-moar 865bf3: OUTPUT«text with percent-, hash-hash-, dot- question-, and dash-␤»

[22:42] <Zoffix> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens { $^a.comb.map({ %tm{$_} ?? "-%tm{$_}-" !! $_ }).join.subst(/'--'/, '-', :g).subst: /^\-|\-<before \W>|<after \W>\-|\-$/, '', :g }; say english-for-tokens('text with %, ##, @ /, and -');

[22:42] <camelia> rakudo-moar 865bf3: OUTPUT«text with percent, hash-hash, @ /, and dash␤»

[22:42] <timeless> expected is «text with percent-, hash-hash-, dot question-, and dash␤»

[22:42] <Zoffix> :S

[22:42] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens { $^a.comb.map({ %tm{$_} ?? "-%tm{$_}-" !! $_ }).join.subst(/'--'/, '-', :g).subst: /^\-|\-<before \W>|<after \W>\-|\-$/, '', :g }; say english-for-tokens('text with %, ##, . ?, and -');

[22:42] <camelia> rakudo-moar 865bf3: OUTPUT«text with percent, hash-hash, dot question, and dash␤»

[22:43] <timeless> so `hash-hash,` is questionable

[22:43] <timeless> if it doesn't mess anything else up, then yours is a keeper

[22:44] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens { $^a.comb.map({ %tm{$_} ?? "-%tm{$_}-" !! $_ }).join.subst(/'--'/, '-', :g).subst: /^\-|\-<before \W>|<after \W>\-|\-$/, '', :g }; say english-for-tokens('% .x, #?#, . ?, and -');

[22:44] <camelia> rakudo-moar 865bf3: OUTPUT«percent dot-x, hash-question-hash, dot question, and dash␤»

[22:44] <timeless> ok. i'll take yours

[22:44] * timeless isn't interested in figuring out why `,` ended up special, but hey, it's not bad :)

[22:45] <Zoffix> Because it's not \w

[22:45] <timeless> ah, `\w` vs. `\s`

[22:45] <timeless> ok

[22:45] <timeless> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens { $^a.comb.map({ %tm{$_} ?? "-%tm{$_}-" !! $_ }).join.subst(/'--'/, '-', :g).subst: /^\-|\-<before \W>|<after \W>\-|\-$/, '', :g }; say english-for-tokens('%" .x, #?#, . ?, and -');

[22:45] <camelia> rakudo-moar 865bf3: OUTPUT«percent" dot-x, hash-question-hash, dot question, and dash␤»

[22:45] <timeless> nope

[22:46] <timeless> well

[22:46] <timeless> hrm

[22:46] <timeless> yeah, i don't think `percent"` is particularly good

[22:46] <Zoffix> m: my %tm = <% percent # hash - dash . dot ? question>; sub english-for-tokens { $^a.comb.map({ %tm{$_} ?? "-%tm{$_}-" !! $_ }).join.subst(/'--'/, '-', :g).subst: /^\-|\-<before \s>|<after \s>\-|\-$/, '', :g }; say english-for-tokens('%" .x, #?#, . ?, and -');

[22:46] <camelia> rakudo-moar 865bf3: OUTPUT«percent-" dot-x, hash-question-hash-, dot question-, and dash␤»

[22:46] <timeless> yeah, i'll take that

[22:47] <timeless> although i have absolutely no idea where to put NLs in :/

[22:47] <timeless> (and i have to run shortly)

[22:47] *** pmurias left
[22:47] <Zoffix> See! And we could've had working pages by now :P

[22:48] <timeless> does this work https://www.irccloud.com/pastebin/Q69mkVqM/

[22:48] <Zoffix> sure

[22:49] <timeless> this is what i'm thinking https://www.irccloud.com/pastebin/apCalljE/

[22:50] <timeless> although, it occurs to me that i'll need to make sure we only use `href_escape` for internal documents and not http://wikipedia

[22:50] <Zoffix> Will that update the generated search index too?

[22:50] <Zoffix> You're also missing slash

[22:50] <Zoffix> (for a token)

[22:50] <timeless> ?

[22:51] *** cooper_ joined
[22:51] *** cooper_ left
[22:51] *** cooper_ joined
[22:51] <Zoffix> 	¿

[22:51] <timeless> please assume that i'm really not good at spotting errors

[22:51] <timeless> (which is ironic, but hey)

[22:51] <Zoffix> Your %tm doesn't have / slash in it

[22:52] <timeless> sub write-search-file() {

[22:52] <timeless> has a     sub escape(Str $s) {

[22:52] <timeless> which would need to be fixed

[22:52] <timeless> i think that's /probably/ all that needs to be patched

[22:52] <Zoffix> And I don't know how it's generated but there's a search index that picks things out of X<> in pod (and I'm guessing other things)... will that get automatically updated to link to new URLs?

[22:52] <timeless> assuming i'm half understanding what's going on

[22:54] <timeless> hrm, we probably need to add bs to the list of tokens

[22:54] <timeless> m: my %tm = <% percent # hash - dash . dot ? question / slash \ blackslash>; say %tm{'\\'}

[22:54] <camelia> rakudo-moar 865bf3: OUTPUT«blackslash␤»

[22:55] <timeless> is that what you meant by me missing a `/`?

[22:55] <Zoffix> yes

[22:56] <timeless> sorry, my code-interpolate is weak

[22:56] <timeless> and now i'm late

[22:57] <timeless> something like this https://www.irccloud.com/pastebin/yN7My85e/

[22:57] * timeless will be back in +4h or so

[22:57] <AlexDaniel> uh, actually gonna get some sleep

[22:57] <AlexDaniel> will submit stuff tomorrow :)

[22:59] <Zoffix> ?

[23:04] *** spider-mario left
[23:05] *** AlexDaniel left
[23:06] <b2gills> Juerd: If .WHAT vs .^name is all that's stopping you, just do it whichever way you want. It's just a minor nit.

[23:06] <dalek> doc: adbcb5c | (Zoffix Znet)++ | / (3 files):

[23:06] <dalek> doc: Improve search when no results found

[23:06] <dalek> doc: 

[23:06] <dalek> doc: Changed "Nothing found" to "Not in index," to suggest the searched item

[23:06] <dalek> doc: may be on the site, but not indexed.

[23:06] <dalek> doc: 

[23:07] <dalek> doc: Added a "try web search" link that googles for the searched term on

[23:07] <dalek> doc: the doc site. Chose Google instead of DuckDuckGo, because some stuff

[23:07] <dalek> doc: wasn't giving any results on DDG, but Google did find some pages.

[23:07] <dalek> doc: review: https://github.com/perl6/doc/commit/adbcb5cd83

[23:12] <Juerd> b2gills: It's not stopping me, but if it's going te be changed I might want to change the text and maybe even the ordering as well.

[23:12] <Juerd> b2gills: What's stopping me most, is lack of time, and that I lost my handwritten notes :(

[23:12] *** cognominal left
[23:14] <Juerd> I looked up how symbol tables, packages, namespace and type names interacted. But I lost my notes and I forgot the specifics.

[23:14] * b2gills .oO( What usually stops me is being unable to read my handwritten notes )

[23:14] <Juerd> Oh, I have sufficiently legible handwriting :)

[23:16] *** lushkava joined
[23:18] *** tbrowder_ joined
[23:19] *** kerframil left
[23:19] <Juerd> b2gills: The primary reason why I'm hesitant to change it to .^name is that I find it less obvious code. It being a meta-method requires explaining, which distracts from the point of this document.

[23:19] <Juerd> It's not the name of the LHS

[23:19] *** fhorck joined
[23:19] <b2gills> .WHAT isn't a normal method either

[23:19] <Juerd> No, but at least it looks like one.

[23:20] <b2gills> .?method is a method call, and looks just as much like a method call as .^method

[23:20] <Juerd> Yes, but these examples should remain as simple as possible, imho

[23:21] <Juerd> The only explanation necessary should be relevant to the document's topic

[23:21] <Juerd> So it shouldn't raise questions outside that scope

[23:21] *** cognominal joined
[23:22] <Juerd> I went off that path for the junction example, and it was caught by two people that I asked to proofread this.

[23:22] *** tbrowder_ left
[23:22] <Juerd> They're not Perl 6 programmers and they could follow everything in this text except for the part about junctions, and that weird use of what they thought was the bitwise AND operator...

[23:23] <b2gills> I just don't like it when introductory materials give a false impressions

[23:23] <Juerd> Which they didn't realise was a junction.

[23:23] <Juerd> I think you may be over-interpreting the impression that it gives

[23:23] <b2gills> Well a junction doc should start with all() any() one() none() then proceed to the infix operators

[23:24] <Juerd> But really, I already know your opinion and I think you make a good point. But I need more people's opinions before I decide my own :)

[23:24] *** RabidGravy left
[23:24] <Juerd> Well, junctions are kind of relevant to a document about types, because they're the sole distinction between Mu and Any.

[23:24] *** yqt left
[23:25] <Juerd> So the word "junction" should link to the relevant page, and the "Hello" & "World" example should have a comment that explains that this uses a junction

[23:26] <Juerd> That way I can discuss the relevant parts without having to explain what junctions are

[23:27] <b2gills> in some cases I mean a false impression of how limited a feature is. most new Perl 6 programmers don't have a clue how powerful signatures are for example

[23:27] <Juerd> Perhaps, but you can't use complex examples all the time because that makes learning the language too hard.

[23:28] <b2gills> I think that a page about Mu should use &any not &infix:<|>, and just punt the problem

[23:28] <Juerd> So where signatures are not the topic of discussion, they should be kept simple and self-explanatory

[23:28] <Juerd> I'm not writing a page about Mu, but about types :)

[23:28] <Juerd> Of which Mu is an important one

[23:29] <b2gills> I'm thinking just a note pointing to a page on signatures while mentioning that they are far more capable

[23:29] <Juerd> Perhaps.

[23:30] <Juerd> But I don't think I will. This is not a table of contents for all the powerful features that Perl 6 has to offer. It's a leaf node.

[23:30] <b2gills> &infix:<|> should only be on advanced pages or in a page on junctions,  just for the fact it looks like a C operator

[23:30] <Juerd> Yes, I should probably use all() instead of &.

[23:31] *** Calibellus joined
[23:33] <b2gills> That's also why I tried to persuade TimToady to change the name of ｢with｣ to something else, because other languages have a with statement that is more similar to our given statement

[23:34] <Juerd> I dislike with and without.

[23:35] <Juerd> I don't interpret those as conditionals.

[23:36] <b2gills> I actually think that given sounds more like a conditional than with does, but it isn't going to change now

[23:36] *** ocbtec left
[23:36] *** TEttinger joined
[23:36] <Juerd> But then, I haven't seen any reason for using with/without anyway...

[23:39] *** Timbus left
[23:51] *** Timbus joined
[23:54] *** cognominal left
[23:56] <b2gills> m: without (Str,Int,5).pick  -> $_ { .say }

[23:56] <camelia> rakudo-moar 865bf3: ( no output )

[23:56] <b2gills> m: without (Str,Int,5).pick  -> $_ { .say }

[23:56] <camelia> rakudo-moar 865bf3: OUTPUT«(Str)␤»

[23:59] <Juerd> If I really wanted a topicalizing if defined, I'd probably call that if-defined

[23:59] <b2gills> That wouldn't work the same way with ｢if defined(...) -> $var {...}｣ or ｢unless defined(...) -> $var {...}｣

[23:59] <Juerd> I don't see much reason to topicalize the not defined case, so "if not defined" and "unless defined" are good enough for me :)

