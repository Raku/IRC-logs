[00:01] *** vendethiel left
[00:04] *** labster joined
[00:14] *** vendethiel joined
[00:23] <kurahaupo> stevieb9: we should have a Perl conference in Australia, we have camels ...

[00:25] <stevieb9> kurahaupo: I'd rather have it in the Great White North, as that'll allow me to get the camel off my back, which would be the cost of travel ;)

[00:26] <stevieb9> it is on my roadmap though tbh, to travel to Australia, as I'm a huge outdoor person

[00:27] <diakopter> you're too huge for indoors?

[00:27] *** kid51 joined
[00:27] <Zoffix> :P

[00:27] <stevieb9> diakopter: my desire for being outdoors is ;)

[00:28] *** TakinOver joined
[00:28] <diakopter> now I miss all the nick sexiness

[00:28] <stevieb9> I camp in the mountains in the winter. I photograph things in places in the mountains that most people couldn't imagine going to

[00:29] *** kid51 left
[00:29] *** Zoffix is now known as sexy-coder-girl

[00:29] * sexy-coder-girl waves to diakopter 

[00:29] <sexy-coder-girl> :)

[00:29] *** kid51 joined
[00:29] *** sexy-coder-girl is now known as Zoffix

[00:29] <stevieb9> diakopter: there, fixed

[00:29] <stevieb9> lol

[00:29] <diakopter> :o

[00:29] *** jonadab joined
[00:30] <Zoffix> TIL hibernate on stuff run on VirtualBox doesn't work

[00:31] *** MadcapJake joined
[00:31] *** safinaskar joined
[00:32] <safinaskar> what language rakudo written in?

[00:32] <Zoffix> safinaskar, Perl 6

[00:32] <safinaskar> Zoffix: so, rakudo build-depends on itself?

[00:32] <Zoffix> safinaskar, heh :) Well, it uses NQP http://perl6.party/post/Perl-6-is-written-in...-Perl-6

[00:32] <diakopter> Perl 6, lots of nqp (a small subset of Perl 6), lots of C

[00:32] <MadcapJake> Perl 6 and NQP

[00:33] <Zoffix> Hm, actually that article ain't that useful.

[00:33] <safinaskar> thanks, reading

[00:33] <diakopter> C and NQP vastly outweigh the Perl 6, afaik

[00:34] <Zoffix> Language chart strongly disagrees :) https://github.com/rakudo/rakudo

[00:34] <MadcapJake> iiuc, the VM is in C, the parser is in NQP, and the semantics are in Perl 6

[00:35] <diakopter> Zoffix: I think you're forgetting the NQP and MoarVM repos

[00:35] *** vendethiel left
[00:35] <Zoffix> diakopter, but the question was "what language rakudo is written in" :)

[00:36] <safinaskar> is this possible to build rakudo without rakudo binary available? and without any full-featured perl 6 compiler?

[00:36] <diakopter> -_-

[00:36] <MadcapJake> most languages are bundled with their VM though

[00:36] <Zoffix> safinaskar, yes it is. 

[00:36] <MadcapJake> safinaskar: every time you build it, that's how it's done

[00:36] <diakopter> I'm quite sure the questioner wanted to know about Perl 6 as a whole

[00:36] <safinaskar> Zoffix: okey, so what you need? NQP compiler/interpreter?

[00:36] <AlexDaniel> https://github.com/perl6/doc/issues/599

[00:37] <safinaskar> diakopter: yes

[00:37] <safinaskar> diakopter: but it seems rakudo is default compiler for perl 6, so i am asking about it

[00:37] <Zoffix> safinaskar, just Perl 5 and C compiler

[00:37] <MadcapJake> safinaskar: so NQP is a lower-level Perl 6 without any syntax sugaring and that language gets bootstrapped in C

[00:37] <Zoffix> safinaskar, this my alias for rebuilding of perl6: update-perl6 is aliased to `rm -fr ~/.zef; rm -fr ~/.perl6; rm -fr ~/.rakudobrew/; git clone https://github.com/tadzik/rakudobrew ~/.rakudobrew; rakudobrew build moar; rakudobrew build zef;'

[00:38] <Zoffix> safinaskar, and I had to add this to PATH:   export PATH=$PATH:~/.rakudobrew/bin:~/.rakudobrew/moar-nom/install/share/perl6/site/bin/

[00:38] <Zoffix> s/PATH/.bashrc

[00:38] <Zoffix> And that brews rakudo on MoarVM

[00:39] <diakopter> where is the github language graph

[00:39] <MadcapJake> safinaskar: check out rakudobrew source or rakudo-star make files if you're interested in how it's bootstrapped

[00:39] <Zoffix> diakopter, the colored line below the "commits  braches  releases..." click on it

[00:40] <AlexDaniel> it lies

[00:40] <AlexDaniel> most of the time

[00:40] <diakopter> yeah, here it subsumes nqp into Perl 6

[00:41] <MadcapJake> that's my fault :(

[00:41] <MadcapJake> I think

[00:41] <MadcapJake> depending on if they are using my language-perl6fe for heuristic purposes

[00:41] <diakopter> well it's fine, as long as you know most of it is nqp, and most of the (large) nqp repo is in NQP

[00:42] <diakopter> so I stand by my claim

[00:42] <MadcapJake> (which I'm not sure that they do, I think that linguist actually uses internal heuristics for filetype detection)

[00:43] <MadcapJake> https://github.com/github/linguist/blob/0669a83e403f7a094ee4e6b4cf6a17c321f50ebb/lib/linguist/languages.yml#L2795

[00:44] <Zoffix> Yeah, and that gets a lot of Perl 5 wrongly as Perl 6  (https://github.com/kraih/mojo/pull/804  https://github.com/github/linguist/issues/2149)

[00:44] <diakopter> lolz

[00:47] <diakopter> safinaskar: so to answer your question, you need Perl 5, git, and a mainstream C compiler

[00:47] <safinaskar> AlexDaniel: thanks for creating issue (i commented it)

[00:48] <Zoffix> safinaskar, well, you can build perl 5 from source too ( http://perlbrew.pl ). It's written in C

[00:49] <safinaskar> okey, so c -> perl 5 -> perl 6, right? no cyrcilar dependencies and everything from human-written files, right?

[00:49] <Zoffix> The trust trust thing kinda assumes you're willing to read thousands if not millions of line of code for something :P

[00:50] <Zoffix> Especially since perl is installed pretty much on every *nix

[00:50] <MadcapJake> safinaskar: no

[00:50] <safinaskar> MadcapJake: ?

[00:51] <MadcapJake> perl 5 is only involved in scripts for building, the actual bootstrapping is C -> NQP -> NQP + Perl 6 -> Perl 6

[00:52] <Zoffix> I think the question is Is this possible to build rakudo using only human-written non-generated text files and C and C++ compilers and nothing more?

[00:52] <safinaskar> MadcapJake: cool. thanks

[00:52] <Zoffix> \o/

[00:52] <safinaskar> Zoffix: yes and MadcapJake answered it

[00:52] <diakopter> safinaskar: no, you don't need to build Perl 5

[00:53] <diakopter> safinaskar: you just need to have it installed

[00:53] <diakopter> and the make utility

[00:53] <diakopter> (or nmake on Windows)

[00:55] *** Zoffix left
[00:56] <dj_goku_> isn't there an initiative to remove a few dependencies for building and build them in NQP/Perl6?

[00:59] <AlexDaniel> dj_goku_: not sure if there was, but well volunteered!

[01:01] <dj_goku_> haha

[01:01] <diakopter> hard to imagine losing any of those (C or Perl 5 or make)

[01:01] *** tardisx left
[01:01] <dj_goku_> I am currently just learning perl6. :D I have a project in mind already.

[01:02] <safinaskar> thanks everybody

[01:02] *** safinaskar left
[01:11] <grondilu> #128156

[01:11] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128156

[01:12] <grondilu> ^ignore this.  That was just me getting the link.

[01:14] *** vendethiel joined
[01:16] *** BenGoldberg joined
[01:21] *** Actualeyes joined
[01:25] *** molaf joined
[01:29] <timeless> timotimo: what module?

[01:29] <timotimo> p6doc

[01:29] <timotimo> huggable: p6doc

[01:29] <huggable> timotimo, nothing found

[01:30] <timotimo> we should have something there, but ... what?

[01:30] <timeless> so, zef install p6doc?

[01:31] *** kid51 left
[01:33] <timeless> ok, so that put it into /home/timeless/hg/perl6/rakudobrew/moar-nom/install/share/perl6/site/bin but my path has ~/.rakudobrew/bin/ in the path

[01:34] <timeless> what's the rhyme/reason it didn't go into that place?

[01:36] <timotimo> if you're using zef, then yes. afterwards you need to rakudobrew rehash to make the symlink appear

[01:36] <timeless> ah

[01:37] <timeless> ok, I didn't know about rehash

[01:37] <timeless> where was I supposed to find out about it?

[01:38] <timotimo> hm, the rakudobrew readme should have stuff about it

[01:38] <timeless> it doesn't :)

[01:38] <timotimo> ok. then just rakudobrew with no arguments ought to say a bit about it

[01:39] <timeless> it mentions that it exists, but that's hardly a hint that I should use it..

[01:39] <timotimo> hm.

[01:39] <timotimo> *shrugs*, i don't use rakudobrew

[01:39] <timeless> i'm +1 to adding it to the README

[01:39] <timotimo> i have that perl6/site/bin in my path instead

[01:40] <timotimo> having support for post-install hooks in panda and zef may be interesting

[01:40] <timeless> +1

[01:40] <timotimo> so that it can rehash automatically when a binary gets installed

[01:40] <timotimo> i'm not going to do the design work for that, though

[01:47] *** ilbot3 joined
[01:57] *** vendethiel left
[01:58] *** abruanese joined
[02:00] <Xliff> Hrm!

[02:00] <Xliff> Ran into another endless loop.

[02:01] <Xliff> libxml2 does some crazy stuff that looks to be confusing GC.

[02:05] <Xliff> Yeah. Think I'll stop there for the night.

[02:05] <timotimo> it shouldn't. but you may have to "anchor" a few things "down" so they don't get reclaimed and overwritten

[02:06] <Xliff> Oh? How so?

[02:06] <Xliff> Especially considering the underlying lib likes to keep its own lists of pointers.

[02:06] <Xliff> Which might also be in use by rakudo.

[02:07] <Xliff> I "got passed" this already, today. However the fix I used earlier doesn't appear to be working now.

[02:07] <timotimo> only things that get created by things like CStruct.new or something will be reclaimed when the GC doesn't find a path to it any more

[02:07] <Xliff> Well, I'm doing TDD.

[02:07] <timotimo> test drven, yeah?

[02:08] <Xliff> So most of the things that are used are retrieved from libxml2 with few exceptions.

[02:08] <Xliff> Yes. Test driven.

[02:08] <timotimo> that shouldn't be so problematic, then

[02:11] <Xliff> Almost certain the problem starts here: https://github.com/Xliff/p6-XML-LibXML/blob/06elements/t/06elements-port.t#L173

[02:12] <Xliff> Which refers to here: https://github.com/Xliff/p6-XML-LibXML/blob/06elements/lib/XML/LibXML/Node.pm#L351

[02:12] <timotimo> if you "use nqp;" you can throw around nqp::force_gc() everywhere

[02:12] <Xliff> Yeah, but the gc is what's causing the problem. Donno if I wanna do that.

[02:13] <timotimo> it might make the problem appear closer to its source

[02:13] <Xliff> If I comment out the "$elem.removeAttributeNode( $tattr );" the script will run to the end with no problems.

[02:14] <Xliff> But I think I'm dealing with a corrupted linked list in libxml2 which is causing rakudo's GC to go nuts.

[02:15] <Xliff> Even so, I've gone from 17 tests to almost 35. I think I will get some Z's and approach it fresh, tomorrow.

[02:15] <Xliff> There are some XS calls I'm curious about that I have yet to grok which might be the key to fixing things.

[02:16] <Xliff> Thanks for the help timotimo++

[02:16] <timotimo> i'm sorry i'm not terribly helpful, though

[02:16] <Xliff> It's Nativecall.... I knew what I was getting into! =)

[02:16] <timotimo> :)

[02:16] <Xliff> <- NC masochist.

[02:16] <Xliff> I really should see someone about that.

[02:17] <Xliff> o7 #perl6!

[02:17] <timotimo> take care

[02:24] *** mohae_ joined
[02:27] *** noganex joined
[02:33] *** Sqirrel joined
[02:52] *** kurahaupo_ joined
[02:53] *** vendethiel joined
[03:01] <dalek> doc: fd659f8 | (Wenzel P. P. Peppmeyer)++ | doc/Language/faq.pod:

[03:01] <dalek> doc: link to rakudo homepage

[03:01] <dalek> doc: review: https://github.com/perl6/doc/commit/fd659f8844

[03:05] <timeless> oh, wow

[03:06] <timeless> so, Devel::Trace is really a pretty simple script, w/o perldoc?

[03:06] *** kurahaupo_ left
[03:06] <timeless> https://github.com/Altai-man/perl6-Devel-Trace/blob/master/lib/Devel/Trace.pm6

[03:08] *** kurahaupo joined
[03:08] *** kurahaupo left
[03:08] *** kurahaupo joined
[03:11] *** grondilu joined
[03:13] *** kerframil left
[03:18] *** BenGoldberg left
[03:22] <dalek> doc: f59187e | (Wenzel P. P. Peppmeyer)++ | doc/Type/Num.pod:

[03:22] <dalek> doc: doc NaN

[03:22] <dalek> doc: review: https://github.com/perl6/doc/commit/f59187e7e3

[03:30] <timeless> is that person on irc? ^

[03:31] <gfldex> <--

[03:31] <timeless> gfldex: did that actually work for you? when I tried it, I didn't see it in the generated html

[03:31] <gfldex> it takes about 30min to build the docs

[03:32] <gfldex> there is a timestamp in the footer

[03:32] <timeless> you can prune the docs to one or two files

[03:32] <gfldex> i can but the build process doesnt

[03:32] <gfldex> besides i got my own html renderer that's a wee bit faster

[03:32] <timeless> sure, but it works for testing

[03:32] *** ugexe joined
[03:33] <timeless> this is what i was using to test a change like what you pushed https://www.irccloud.com/pastebin/TYiCATmm/

[03:37] *** vendethiel left
[03:38] *** Actualeyes left
[03:42] *** kerframil joined
[03:43] *** huggable left
[03:43] *** huggable joined
[03:45] *** cpage_ left
[03:46] *** cpage_ joined
[03:46] *** cpage_ left
[03:47] *** vendethiel joined
[03:49] <dalek> doc: c486510 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Num.pod:

[03:49] <dalek> doc: better index entry for NaN

[03:49] <dalek> doc: review: https://github.com/perl6/doc/commit/c4865107e0

[03:49] <dalek> doc: 8495700 | (Wenzel P. P. Peppmeyer)++ | doc/Type/ (3 files):

[03:49] <dalek> doc: fix and add links to NaN

[03:49] <dalek> doc: review: https://github.com/perl6/doc/commit/84957006f7

[03:49] *** ugexe left
[03:51] *** shmibs joined
[03:52] *** ugexe joined
[04:03] <dalek> doc: 2bfb500 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Num.pod:

[04:03] <dalek> doc: fix typo

[04:03] <dalek> doc: review: https://github.com/perl6/doc/commit/2bfb500c0e

[04:06] *** llfourn_ joined
[04:08] *** vendethiel left
[04:11] <dalek> doc: ff74bc4 | (Wenzel P. P. Peppmeyer)++ | doc/Language/classtut.pod:

[04:11] <dalek> doc: add index entry for is to classtut

[04:11] <dalek> doc: review: https://github.com/perl6/doc/commit/ff74bc42ba

[04:12] *** Cabanossi joined
[04:24] *** vendethiel joined
[04:24] *** cpage_ joined
[04:30] *** jdv79_ is now known as jdv79

[04:48] *** ssotka joined
[04:50] *** vendethiel left
[04:53] *** vendethiel joined
[05:02] *** Actualeyes joined
[05:08] *** Actualeyes left
[05:12] *** buharin joined
[05:12] <buharin> hello my friends

[05:23] *** Actualeyes joined
[05:31] *** cooper_ joined
[05:33] *** cooper_ left
[05:34] *** cooper_ joined
[05:44] *** llfourn joined
[05:46] *** llfourn_ left
[05:51] *** cooper_ is now known as cooper

[05:58] *** vendethiel left
[06:00] *** wamba joined
[06:02] *** domidumont joined
[06:05] *** vendethiel joined
[06:06] *** domidumont left
[06:07] *** domidumont joined
[06:19] *** sno joined
[06:23] *** Actualeyes left
[06:39] *** Khisanth joined
[06:41] *** Actualeyes joined
[06:46] *** CIAvash joined
[06:48] *** vendethiel left
[06:51] *** rurban joined
[06:51] *** breinbaa1 is now known as breinbaas

[06:56] *** moritz_ is now known as moritz

[06:58] *** vendethiel joined
[07:02] *** RabidGravy joined
[07:02] *** rurban_ joined
[07:07] <RabidGravy> boom!

[07:11] *** espadrine joined
[07:15] *** cgfbee joined
[07:16] *** jack_rabbit left
[07:17] <moritz> bang!

[07:18] <nine> bong?

[07:19] <moritz> nine: I expected no less from you :-)

[07:23] *** ssotka left
[07:26] *** maddingu1 is now known as maddingue

[07:26] *** jack_rabbit joined
[07:27] *** masak_ is now known as masak

[07:27] *** Praise joined
[07:27] *** Praise left
[07:27] *** Praise joined
[07:27] <masak> gøød mørning, #pørl6

[07:28] *** kurahaupo left
[07:29] <buharin> hi :)

[07:29] *** zakharyas joined
[07:29] <buharin> I am happy to be with you

[07:29] <buharin> guys

[07:30] <masak> and gals and bots

[07:31] *** Jonis_ is now known as Jonis

[07:31] <moritz> we need a productive prefix or postfix that makes a word genderless

[07:34] *** espadrine left
[07:35] *** trnh joined
[07:35] *** dakkar joined
[07:36] *** trnh left
[07:36] <tadzik> this somewhat reminds me of the South Park episode about changing the flag

[07:37] <tadzik> like, will we someday have people so gender-neutral in their minds that they won't even know that "guy" and "gal" (and "bot") may actually refer to different kinds of people

[07:40] <masak> tadzik: what you're describing is called "Finnish" and "Estonian" :)

[07:41] <masak> tadzik: when I was growing up, I kept hearing this story about my grandfather answering the door, and two officials asked if they could talk to his wife. "No, he is not at home," said my grandfather.

[07:42] <masak> tadzik: (why? because Estonian only has a gender-neutral pronoun, and so translating sometimes simply results in he/she noise.)

[07:42] *** darutoko joined
[07:43] <masak> tadzik: of course, the story was probably much funnier back in the 60s when it was suitable scandalous to entertain the notion of same-sex marriage in most circles.

[07:43] <masak> suitably*

[07:43] *** huggable left
[07:43] *** g4 joined
[07:43] *** huggable joined
[07:45] <tadzik> :)

[07:46] <tadzik> people of the future since the 60s

[07:53] *** mr-foobar joined
[07:57] *** abraxxa joined
[08:01] *** abraxxa left
[08:05] *** abraxxa joined
[08:06] *** vendethiel left
[08:07] *** a3r0_ is now known as a3r0

[08:08] <masak> I won't make it to YAPC::Europe this year :/

[08:09] *** vendethiel joined
[08:09] <masak> I've managed to get to all YAPC::Europes since 2008, so this will be a first

[08:10] <masak> in quite a while

[08:11] <masak> anyway, I've decided to submit a talk, not to YAPC::Europe, but to my own as-yet-unnamed private Perl conference with the same prestige and glamour as YAPC::Europe, but only one attendant and one speaker

[08:12] <nine> moritz: sorry to hear :(

[08:12] <masak> hey, I'm over here

[08:14] *** _mg_ joined
[08:14] *** stevieb9 left
[08:14] <masak> the title of my talk is (provisionally) "Strapping Young Language", and it's about the -- ongoing -- 007 effort to parse and run itself

[08:17] *** Actualeyes left
[08:18] *** jnthn_ is now known as jnthn

[08:18] <tadzik> I didn't make it to last year's, and I'm still a bit on the fence with Cluj

[08:19] <tadzik> I actually cancelled a talk submission just before the 2nd acceptance wave hit

[08:20] <nine> I'll be there but I won't submit any talks this year. Total lack of energy :/

[08:20] *** _mg_ left
[08:20] <masak> if anyone else wants to submit talks to my personal conference, I will consider it, but my acceptance criteria are pretty steep, so you'd better come well-prepared with a good reason for me to accept you :P

[08:20] <jnthn> o.O :)

[08:21] <masak> also, if anyone wants me to help name my conf, I'll gladly accept help

[08:21] * jnthn ain't sure he can meet that high bar :P

[08:21] <masak> jnthn: I dunno, have you done anything of significance within the Perl community? :P

[08:21] <masak> jnthn: you're a bit of an unknown, so that's not working in your favor... :P

[08:21] <jnthn> Not really...wrote some little VM thingy, did a few compiler patches...

[08:22] * masak is suddenly afraid he didn't put enough ":P"s on that

[08:22] <jnthn> :P

[08:22] <nine> masak: no risk, no fun ;)

[08:22] *** _mg_ joined
[08:22] <tadzik> masak: I assume "masacon" is already considered? :P

[08:23] <masak> tadzik: it was not. now is being considered by the High Committee.

[08:23] *** andreoss joined
[08:24] <jnthn> Heh, thanks to 007 thing and your name I came up with... Bond, Discussion, Software, Masak :P

[08:24] <nine> masak: isn't "masak's normal day at home" or short "manodaho conference" closer to the truth? ;)

[08:24] <masak> jnthn: I see what you did there

[08:24] <tadzik> :D:D:D

[08:25] <masak> jnthn: would be more fitting if it were a Python conference *ba doom dish*

[08:26] <moritz> masak: will you be live streaming your conference?

[08:27] <masak> moritz: I'm considering making a recording, and then having it be stuck in editing for eight months.

[08:27] <nine> masak: so you even want to publish faster than most conferences? Nice!

[08:28] <dalek> doc: 08c8bb6 | parabolize++ | doc/Type/Cancellation.pod:

[08:28] <dalek> doc: document Cancellation #589

[08:28] <dalek> doc: review: https://github.com/perl6/doc/commit/08c8bb688c

[08:28] <masak> it's also possible I end up in a room of my house that has no video recording equipment set up

[08:30] <moritz> we could consider doing an internet live conference thingy at some point

[08:30] <masak> This Just In: live-streaming may actually be a possibility

[08:30] <masak> Stay Tuned™

[08:31] <moritz> like, with Google Hangouts or something like that

[08:31] *** _mg_ left
[08:31] <masak> well, it turns out my employer might be buying some equipment, and this would be a good test for it

[08:31] <moritz> what a crazy random happenstance

[08:32] *** _mg_ joined
[08:34] *** _mg_ left
[08:34] *** sortiz joined
[08:35] *** ocbtec joined
[08:37] *** _mg_ joined
[08:38] <sortiz> \o #perl6

[08:39] *** Emeric joined
[08:41] *** _mg_ left
[08:44] <andreoss> why there's no x86 build of the latest rakudo-start for windows?

[08:47] <moritz> because nobody did them so far

[08:49] *** abraxxa left
[08:50] <sortiz> I got an sporadic failure under "hyper": "Internal error: unhandled dyncall argument type"

[08:50] *** _mg_ joined
[08:51] <andreoss> is there an instruction for building msi file for rakudo star?

[08:52] *** vendethiel left
[08:55] *** _mg_ left
[08:55] *** vendethiel joined
[08:55] *** _mg_ joined
[08:59] *** _mg_ left
[09:03] *** _mg_ joined
[09:04] <dalek> doc: d6ca213 | (Wenzel P. P. Peppmeyer)++ | doc/Language/typesystem.pod:

[09:04] <dalek> doc: doc is trait in typesystem

[09:04] <dalek> doc: review: https://github.com/perl6/doc/commit/d6ca2130e5

[09:04] <dalek> doc: 6036651 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Cancellation.pod:

[09:04] <dalek> doc: Merge branch 'master' of https://github.com/perl6/doc

[09:04] <dalek> doc: review: https://github.com/perl6/doc/commit/60366513ef

[09:04] *** _mg_ left
[09:05] *** abraxxa joined
[09:05] *** iH2O joined
[09:05] *** _mg_ joined
[09:08] *** _mg_ left
[09:12] *** mr-foobar left
[09:16] *** donaldh joined
[09:19] *** rindolf joined
[09:21] *** _mg_ joined
[09:22] *** rvchangue joined
[09:22] *** Zero_Dogg joined
[09:23] *** _mg_ left
[09:25] <andreoss> rakudo-star is trying to download modules from internet during installation 

[09:26] <andreoss> should it be so?

[09:27] <moritz> no, that's a bug in star

[09:27] *** safinaskar joined
[09:28] *** _mg_ joined
[09:30] <gfldex> m: Mu.^methods.grep({.name ~~ 'WHAT'|'WHERE'}).say

[09:30] <camelia> rakudo-moar c7cd00: OUTPUT«(WHERE)␤»

[09:30] <gfldex> where does .WHAT come from?

[09:31] <nine> gfldex: it's a bit like a macro

[09:31] <nine> it's not a real method

[09:31] *** _mg_ left
[09:31] <psch> it's a hardcoded methodop in Perl6::Grammar, currently

[09:31] <psch> although ISTR that it's to be turned into a real macro eventually

[09:32] *** donaldh left
[09:36] <andreoss> moritz: panda is doing it

[09:36] <andreoss> trying to get some metadata

[09:36] <jnthn> Thing it's actually handled in Actions, after parsing it as a method call

[09:36] <jnthn> *Think

[09:37] <andreoss> also using non-existent --unlink option for wget

[09:37] <jnthn> Not sure we'll ever truly do it as a macro, because bootstrapping.

[09:37] <psch> right, it's in %deftrap iirc, which maps the matched token to nqp ops

[09:37] <gfldex> $past.op('what'); <-- found it!

[09:38] *** darutoko left
[09:38] *** vendethiel left
[09:39] <jnthn> .HOW and .WHO are similar

[09:39] *** vendethiel joined
[09:39] <gfldex> m: Mu.^methods.grep({.name ~~ 'WHAT'|'WHERE'}).say # i'm a bit unhappy about that

[09:39] <nine> Would making those real macros actually have advantages?

[09:39] <camelia> rakudo-moar c7cd00: OUTPUT«(WHERE)␤»

[09:42] <jnthn> nine: Intellectual beauty...so essentially "no" ;P

[09:44] *** iH2O left
[09:46] <dalek> doc: 027d023 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Metamodel/MethodContainer.pod:

[09:46] <dalek> doc: accuse .^methods of omitting WHAT

[09:46] <dalek> doc: review: https://github.com/perl6/doc/commit/027d023cd2

[09:48] <masak> jnthn, nine: since methods are late-bound, if they're macros they can't actually be methods. they'd have to be postfix ops or something.

[09:49] <jnthn> masak: Yes, we'd have to treat them that way

[09:49] <jnthn> And I note that'd get icky with given 'foo' { .WHAT.say }

[09:49] <jnthn> 'cus there's nothing to postfix there

[09:49] <masak> ick, yes

[09:49] <masak> hadn't thought of that

[09:49] <masak> that one'd have to be a macro term...

[09:50] <jnthn> Maybe we need a word for macro-esque things to de-confuse them with things that truly make sense to do as macros

[09:50] <masak> I've been saying this for a long time ;)

[09:50] <masak> "macro-esque" worksforme, fwiw

[09:50] <jnthn> 'cus so far I can see close to zero actual win in trying to get this case to be done in terms of real macros

[09:51] <masak> TimToady seems to be well aware that he doesn't *actually* mean "macro" when he calls these "macro-ish"

[09:51] <jnthn> gfldex: That's doc commit is kinda misleading because .WHAT simply is not a method. It's a special form handled by the compiler.

[09:51] <masak> but rather "specially picked up by the compiler and treated differently"

[09:52] <jnthn> It'd be better just to say that than claim they *are* introspection methods (because they aren't, and won't be because they can't be)

[09:52] <masak> "special form" is also a fine description, rather than "macro-ish"

[09:57] <dalek> doc: fd61951 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Metamodel/MethodContainer.pod:

[09:57] <dalek> doc: don't call non-methods methods

[09:57] <dalek> doc: review: https://github.com/perl6/doc/commit/fd6195170b

[10:01] <safinaskar> does rakudo depend on std.pm6 and viv? does it need it for compilation?

[10:01] <gfldex> no

[10:02] *** vendethiel left
[10:03] <safinaskar> gfldex: thanks

[10:05] *** wamba left
[10:05] *** wamba joined
[10:06] *** safinaskar left
[10:07] *** vendethiel joined
[10:07] <DrForr> Well, the news is out now :) If I get even 3 people I'll be surprised :/

[10:07] *** labster left
[10:10] *** rurban1 joined
[10:10] *** rurban2 joined
[10:12] *** rurban3 joined
[10:13] *** rurban4 joined
[10:13] *** rurban left
[10:13] *** rurban5 joined
[10:14] *** rurban1 left
[10:15] *** devtom30 joined
[10:15] *** grondilu left
[10:16] *** rurban2 left
[10:17] *** rurban3 left
[10:17] *** rurban4 left
[10:20] *** rurban joined
[10:21] *** rurban1 joined
[10:21] <Woodi_> so, if we are into photo terminology like roll, macro (and lenses used somewhere) then few are still free: zoom (a bit opposite of macro), shutter, "field of view", mirror, prism (that can be already used ;)), plane, dial, aperture, lever, knob and probably more :)

[10:21] *** rurban2 joined
[10:21] *** rurban3 joined
[10:22] *** rurban4 joined
[10:22] *** rurban5 left
[10:23] *** rurban5 joined
[10:23] *** rurban5 left
[10:23] <Woodi_> subtypes: "where" is equivalent of: sub foo ($x) { if $x <= 0 { fail }; ... }  ?

[10:23] *** wamba left
[10:24] *** wamba joined
[10:24] *** rurban left
[10:25] <gfldex> if you ignore introspection and possible compiler magic, then yes, they are equivalent

[10:25] *** rurban1 left
[10:25] <Woodi_> right, main type is probably checked too...

[10:25] *** rurban2 left
[10:26] *** rurban3 left
[10:27] *** rurban4 left
[10:29] *** donaldh joined
[10:31] *** ufobat joined
[10:33] *** Woodi_ left
[10:34] *** Woodi joined
[10:36] *** devtom30 left
[10:43] <DrForr> Given something like constant X = 3; my @x = X, 2; # @x.WHO reports 'Int', is there a way to determine that the value came from a constant?

[10:43] <DrForr> Er, @x[0].WHO.

[10:46] *** kaare_ joined
[10:46] *** zakharyas left
[10:46] <gfldex> m: my $Y = 42; constant X = 3; say X.VAR.^name, $Y.VAR.^name

[10:46] <camelia> rakudo-moar c7cd00: OUTPUT«IntScalar␤»

[10:46] <gfldex> DrForr: ^^^

[10:47] *** CIAvash left
[10:50] *** vendethiel left
[10:50] *** Bucciarati_ is now known as Bucciarati

[10:52] *** vendethiel joined
[10:52] <DrForr> Cool, thanks.

[10:54] *** rurban_ left
[10:56] *** vibha joined
[11:02] *** _mg_ joined
[11:12] *** kid51 joined
[11:14] *** vendethiel left
[11:18] *** vendethiel joined
[11:18] <gfldex> DrForr: there maybe custom container types that are writeable tho. You may have found the limits of introspection.

[11:22] <DrForr> I was hoping to get some sort of type, or at least an indication of an attribute.

[11:25] <gregf_> DrForr: try changing the value and if its immutable then its a constant :| #ugly

[11:25] <DrForr> (realizing that 'constant' isn't a type but an attribute helps, my concentration is a bit scattered at teh moment.

[11:25] <DrForr> s/.$/)/

[11:26] <gregf_> m: constant A = 100;try { A = 200; CATCH { say "a constant"; }} #like that, awful

[11:26] <camelia> rakudo-moar c7cd00: OUTPUT«a constant␤Cannot modify an immutable Int␤  in block <unit> at <tmp> line 1␤␤»

[11:27] *** _mg_ left
[11:27] <gregf_> m: my $Y = "foo"; say $Y.VAR.^name

[11:27] <camelia> rakudo-moar c7cd00: OUTPUT«Scalar␤»

[11:29] <jnthn> constant just binds a value to a symbol; by runtime all you have is a symbol pointing to a value.

[11:29] <dalek> ecosystem: 462d064 | (Alexey Melezhik)++ | META.list:

[11:29] <dalek> ecosystem: Add sparrowdo to ecosystem

[11:29] <dalek> ecosystem: 

[11:29] <dalek> ecosystem: See https://github.com/melezhik/sparrowdo

[11:29] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/462d064070

[11:29] <dalek> ecosystem: a6a4645 | azawawi++ | META.list:

[11:29] <dalek> ecosystem: Merge pull request #219 from melezhik/master

[11:29] <dalek> ecosystem: 

[11:29] <dalek> ecosystem: Add sparrowdo to ecosystem

[11:29] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/a6a46451d6

[11:31] <DrForr> I need to rethink the rationale behind using constants in this case then, the concept I'm toying with may not map well to p6. I didn't think it did initially, so this really is just further proof. I can do most of what I want with strings.

[11:31] *** rurban_ joined
[11:40] *** kid51 left
[11:42] *** wamba left
[11:43] *** huggable left
[11:43] *** donaldh left
[11:43] *** huggable joined
[11:44] *** wamba joined
[12:02] *** obarb is now known as brabo

[12:03] * masak wasn't aware of the difference between X and $X constants

[12:04] *** domidumont left
[12:05] *** Sqirrel left
[12:08] <buharin> hi :)

[12:08] <moritz> masak: what about the difference between X and and $X chromosomes?

[12:08] <moritz> hi buharin :-)

[12:08] <gfldex> $X chromosomes are mutable :)

[12:09] <masak> moritz: I bet Monsanto is involved somehow, wanting to profit from our $DNA

[12:09] <buharin> I go chance to push perl6 to small buisness

[12:10] *** jameslenz joined
[12:10] <buharin> but need a good web framework

[12:10] <masak> well volunteered!

[12:11] <masak> buharin: at this juncture I would try out a good Perl 5 web framework

[12:11] <masak> because you would get several orders of magnitude better quality, speed, and stability

[12:12] <masak> thanks to the stellar work of nine, though, you can still do this while using Perl 6

[12:12] <masak> theoretically

[12:12] <Woodi> and HN reported yesterday that how DNA string is *folded* is also important :) I wonder is it influential on boxers... :)

[12:13] <buharin> masak: yeah I think about it because that only I know it is Bailador but it is not ready for commercial use

[12:13] <Woodi> buharin: buharin++ ! :)

[12:14] <masak> buharin: I recently switched from Bailador to HTTP::Server::Tiny for a web app I was using

[12:14] <buharin> oh nice

[12:14] <masak> buharin: the selling point for the latter for me was how nicely Supplies had been integrated into Server-Sent Events

[12:14] <masak> a match made in heaven <3

[12:16] <Woodi> first would be nice to have professional/commercial grade/secure/modern _log in_ framework...

[12:17] <masak> Woodi: I hear many Perl 5 web frameworks have this

[12:17] <DrForr> someone needs to push what they have to the ecosystem...

[12:18] *** donaldh joined
[12:19] <jdv79> what do they have?

[12:20] <buharin> could you show me Perl6 site sample?

[12:20] <buharin> I am intrested how advance I can use it?

[12:20] <masak> buharin: this is a simple-but-working (board game) app: https://github.com/masak/nex/blob/master/app.pl

[12:20] <masak> notably, I don't yet have log-in/auth

[12:20] <DrForr> Well, they (I) need to finish up the wiki code before heading overseas for a talk, but got distracted by Markdown.

[12:20] <masak> but it *is* pure Perl 6

[12:21] <jdv79> is the p6sgi effort still a thing?

[12:21] <DrForr> (yes, there's a Markdown translator in the p6 ecosystem, I managed to miss it.)

[12:21] <DrForr> jdv79: I've seen the pod, I'm not sure how much work has gone into it as of late.

[12:22] *** user9 joined
[12:22] <buharin> huh well

[12:22] <buharin> I should try :D

[12:23] <buharin> as I checked Swift there are created two good web frameworks

[12:23] <jdv79> hmm

[12:23] <buharin> so fast

[12:23] <buharin> but Perl6 community is quite tiny

[12:24] <buharin> I would like to use something like Python Flask in Perl6

[12:24] <buharin> I really liked it, however I amn't web dev in root

[12:24] <jdv79> Iniline::Python?

[12:24] <jdv79> *Inline

[12:27] <masak> buharin: it's people like you, with an itch to scratch, that go on to create the next Flask-in-Perl 6

[12:29] <buharin> it takes ages ;D

[12:30] <DrForr> buharin: FWIW I got Dancer2 running with Inline::Perl5 without a lot of hassle. I don't know how networking and concurrency works with Inline::Python (if it does) but it's not entirely out of the realm of possibility :)

[12:30] <masak> buharin: which is why I'm telling you *now* so you'll have a head start

[12:31] <buharin> I have never been pioneer

[12:32] <DrForr> First time for everything ;)

[12:32] <buharin> haha :D

[12:32] <buharin> if I can rely on yours review

[12:32] <buharin> I would

[12:32] <NEveDko> hi! what about webgui cms? however, it's quite old and perl5. but there is kickstarter project to finish rewrite which was abandoned by original authors (plainblack.com)

[12:33] <DrForr> NEveDko: Well volunteered? :)

[12:33] <DrForr> buharin: I'd be interesetd.

[12:33] <DrForr> *interested

[12:33] <masak> buharin: I would certainly help review

[12:33] <NEveDko> DrForr: not much :) last time I checked

[12:34] <buharin> masak: thnks :-)

[12:34] <perlpilot> guten tag #perl6

[12:34] <BrokenRobot> m: class Foo { method CALLME ($a) {say "o hai $a"}}; say Foo("meow")

[12:34] <camelia> rakudo-moar c7cd00: OUTPUT«Cannot find method 'Foo' on object of type Str␤  in block <unit> at <tmp> line 1␤␤»

[12:34] <BrokenRobot> wat?

[12:35] <masak> gut'n t'g perlpilot 

[12:35] <BrokenRobot> Shouldn't this attemt to call the CALLME method and not Foo on Str?

[12:35] <NEveDko> here it is...https://www.kickstarter.com/projects/2083389021/create-perl-competition-to-the-php-content-managem

[12:35] <DrForr> BrokenRobot: Foo.new("meow"); # ?

[12:36] *** zakharyas joined
[12:36] <BrokenRobot> DrForr: that'd just pass "meow" to new method.

[12:36] <NEveDko> i kinda like the idea. perhaps it's worth to consider rewrite into perl6

[12:36] <BrokenRobot> m: say Int(42)

[12:36] <camelia> rakudo-moar c7cd00: OUTPUT«42␤»

[12:36] <BrokenRobot> ^ I want this with my own class

[12:36] <masak> m: class Foo { method CALL-ME ($a) {say "o hai $a"}}; Foo.new()("there")

[12:36] <camelia> rakudo-moar c7cd00: OUTPUT«o hai there␤»

[12:36] <masak> BrokenRobot: ^

[12:36] <BrokenRobot> ohh

[12:36] <masak> m: class Foo { method CALL-ME ($a) {say "o hai $a"}}; Foo("there")

[12:36] <camelia> rakudo-moar c7cd00: OUTPUT«o hai there␤»

[12:36] <BrokenRobot> Ah

[12:36] <BrokenRobot> masak++

[12:37] <moritz> method CALL-ME($MAYBE) { }

[12:37] <DrForr> Oh, scrottie's target. And it was originally PHP.

[12:38] <BrokenRobot> NEveDko: don't we already have Bee-something that no one cares about? :)

[12:38] <BrokenRobot> http://pearlbee.org/

[12:39] <DrForr> *cough*

[12:39] <BrokenRobot> I guess I shouldn't say no one cares about, but rather, I've never met a single person using it.

[12:39] <DrForr> Look at the latest committer :)

[12:40] <perlpilot> Just because you made a commit doesn't mean you're using it  ;)

[12:40] * BrokenRobot laughs

[12:41] <DrForr> Four sites up and running with it, though I'll be the first to admit it's badly in need of TLC.

[12:41] <BrokenRobot> DrForr: well, I guess my point is it's not the lack of CMS/blogging platforms that prevent Perl from competing with Wordpress :)

[12:41] <DrForr> Allow me to reiterate the the Perl mantra: "We suck at marketing."

[12:42] <NEveDko> BrokenRobot never heard of it :) looks nice

[12:44] <DrForr> The handlers need a chainsaw taken to them, and properly implemented DBIx::Class.

[12:44] *** bonsaikitten is now known as DrEeevil

[12:45] <DrForr> blogs-perl-org is in better shape codewise, but not by much.

[12:45] <BrokenRobot> It's a pain in the ass to use.

[12:46] <NEveDko> btw, while we are debating web... is perl6 as client-side language (like javascript) in browsers ever happen? is it good idea?

[12:46] <masak> I gave up years ago trying to log into blogs.perl.org to comment

[12:46] *** vendethiel left
[12:46] <DrForr> github.com/drforr/blogs-perl-org - not the current site, but will be soon.

[12:46] <masak> NEveDko: pmurias is working on a rakudo js backend

[12:46] <masak> pmurias++, I should say

[12:47] <BrokenRobot> NEveDko: it won't happen, as it'd require many browser vendors deciding to implement a parser for no good reason. But there is an aforementioned work in progress to make Perl 6 compile into JavaScript

[12:48] *** vendethiel joined
[12:48] <masak> I simply assumed that was what was meant

[12:48] <masak> surely people aren't still attempting to *replace* JavaScript in any sense?

[12:48] <masak> JavaScript has already won

[12:49] <BrokenRobot> See! It's that kind of attitude is why we're stuck with JavaScript of all the things :)

[12:49] *** Actualeyes joined
[12:49] <BrokenRobot> DrForr: so it'll be running on PearlBee instead of MovableType?

[12:49] <DrForr> Yep.

[12:49] <masak> BrokenRobot: no, the attitude isn't the problem -- people have tried to replace JavaScript.

[12:49] <BrokenRobot> DrForr++

[12:50] <masak> BrokenRobot: see Java applets, Flash, Dart...

[12:50] <BrokenRobot> masak: that was just a joke :)

[12:50] <BrokenRobot> Java applets

[12:50] * BrokenRobot shudders at the memory

[12:50] <masak> and Java applets had a bigger PR budget than JavaScript ever had

[12:53] <gfldex> does the following mean NYI or DEPRICATED? https://github.com/rakudo/rakudo/blob/nom/src/core/traits.pm#L445

[12:57] <BrokenRobot> Does anyone remember where the stuff about making your object behave like a hash is documented? Like AT-KEY or something like that?

[12:57] <moritz> gfldex: it's simply a trait that hasn't been declared

[12:58] <BrokenRobot> never mind. recalling the method name gave me a good search term: http://docs.perl6.org/language/subscripts#AT-KEY

[12:58] <NEveDko> BrokenRobot: I remember seeing that project mentioned on pl6anet.org... Question is, if perl6 in browser can bring some must-have funcionality compared to JS.

[12:59] <gfldex> BrokenRobot: http://doc.perl6.org/language/variables#Sigils got an example, you will have to read the rakudo src for advanced stuff

[13:00] <BrokenRobot> NEveDko: like what?

[13:00] <BrokenRobot> There's probably a billion frameworks that implement everything that Perl 6 offers.

[13:02] <BrokenRobot> The Object Model maybe

[13:02] <NEveDko> BrokenRobot like "My favourite language finaly on client side! Finaly, I don't have to do JS" :)

[13:02] <Woodi> NEveDko: Perl6 is just language like JS. "web features" are rather framework thingies...

[13:02] <donaldh> o/

[13:02] <yoleaux> 13 Apr 2016 15:12Z <hoelzro> donaldh: http://irclog.perlgeek.de/perl6/2016-04-13#i_12330426

[13:03] <BrokenRobot> NEveDko: I think the majority of choices wouldn't be made by developers themselves.

[13:03] <BrokenRobot> "I can hire a Perl 6 dev and have them do fullstack" is more like it

[13:03] * BrokenRobot &

[13:04] <dalek> doc: a8fadeb | (Wenzel P. P. Peppmeyer)++ | doc/Language/variables.pod:

[13:04] <dalek> doc: turn tabs into whitespaces

[13:04] <dalek> doc: review: https://github.com/perl6/doc/commit/a8fadebb80

[13:04] <gregf_> wow, a robot that broken can think o.O

[13:04] <gregf_> *thats

[13:05] <gregf_> *and 

[13:05] <NEveDko> Woodi: But if you do complex site you cannot avoid coding, can you? At least some changed in code.

[13:06] *** bjz joined
[13:06] <donaldh> Debugging precomp on JVM is near impossible

[13:09] <Woodi> btw. I learned yesterday about what exactly CSRFs are and have just one thought: WEB IS DOOOMNED!!1  you *need to* verify *optional* headers or duplikate tokens into cookies and other storage just for CSRF... and there are nore things like XSS and JS :)

[13:09] *** lnrdo_ joined
[13:09] *** lnrdo_ left
[13:09] *** sufrostico joined
[13:10] <masak> Woodi: https://en.wikipedia.org/wiki/And_yet_it_moves

[13:10] <Woodi> <img src="http://admin.somewhere.org/?userAdd=hckr&pass=abc"> <- works on page load :>

[13:11] <moritz> Woodi: clever framework authors have added CSRF protection to their code

[13:11] <Woodi> masak: my point is we should start perl6 web frameworks with basic components lik login, sessions, ...

[13:11] <moritz> Woodi: do it!

[13:11] <moritz> nobody objects

[13:11] <moritz> it's just that nobody codes on-demand either

[13:12] <masak> Woodi: I find your point unarguable :)

[13:12] <masak> as in, you have my full blessing to start at that end

[13:12] <Woodi> moritz: my problem is: I do not know new web technologies/requirement, like things 2001+

[13:14] <Woodi> but thanx for incentive and blessing :)

[13:15] <dalek> doc: 1957f8e | (Wenzel P. P. Peppmeyer)++ | doc/Language/typesystem.pod:

[13:15] <dalek> doc: we don't doc what will not work inside a class

[13:15] <dalek> doc: review: https://github.com/perl6/doc/commit/1957f8e7db

[13:15] <dalek> doc: fad1877 | (Wenzel P. P. Peppmeyer)++ | doc/Language/phasers.pod:

[13:15] <dalek> doc: add will trait to index

[13:15] <dalek> doc: review: https://github.com/perl6/doc/commit/fad187789b

[13:15] <BrokenRobot> Woodi: sounds like a perfect execuse to learn them :)

[13:15] <masak> as much as I like people contemplating entirely new efforts, I think it's just as valuable or maybe even more valuable when people add to existing efforts

[13:16] <masak> one of the things I enjoy watching the most is cross-pollination between mature web frameworks, like Angular, React, Ember...

[13:21] <BrokenRobot> m: my $a = "Te"; my $b = "st"; my $m = try { need "$a$b"; ::("$a$b") }; say $m.WHAT

[13:21] <camelia> rakudo-moar c7cd00: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    need used at line 1␤␤»

[13:22] <BrokenRobot> Any way of making that work? Basically, I have strings like "Foo" and "Bar" and I want to load modules "Foo::Meow::Foo" and "Foo::Meow::Bar"

[13:23] <BrokenRobot> They're classes in separate files. So in the above I'd want to do $m.new after loading and get Foo::Meow::Foo object for example

[13:25] *** skids joined
[13:25] * [Coke]_ wakes up

[13:25] *** [Coke]_ is now known as [Coke]

[13:26] <gfldex> m: my $a = "Te"; my $b = "st"; my $TEST = $a~$b; my $m = try { require $TEST; }; say $m.WHAT

[13:26] <camelia> rakudo-moar c7cd00: OUTPUT«(Any)␤»

[13:28] *** bjz left
[13:28] <BrokenRobot> m: my $t = "Test"; require $t

[13:28] <camelia> rakudo-moar c7cd00: OUTPUT«Could not find Test in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6␤    CompUnit::Repository::AbsolutePath<67734160…»

[13:29] * BrokenRobot didn't know we had `require` along with `need` and `use`

[13:29] <moritz> m: m: my $t = "Test"; require ::($t)

[13:29] <camelia> rakudo-moar c7cd00: ( no output )

[13:30] <sortiz> m: my \Test = (require ::("Te"~"st")); say Test.WHAT;

[13:30] <camelia> rakudo-moar c7cd00: OUTPUT«(Test)␤»

[13:30] *** Zero_Dogg left
[13:30] <sortiz> BrokenRobot, require is at runtime, need and use at compile time.

[13:30] <BrokenRobot> Thanks.

[13:30] <gfldex> m: my $t = "Test"; require ::($t); plan 1

[13:30] <camelia> rakudo-moar c7cd00: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    plan used at line 1␤␤»

[13:30] *** Zero_Dogg joined
[13:32] <BrokenRobot> gfldex: it doesn't import symbols

[13:32] <BrokenRobot> star: my $t = "DBIish"; require ::($t); my $m = ::($t).new; say $m.^methods

[13:32] <camelia> star-m 2016.04: OUTPUT«(err errstr connect install-driver install_driver installed-drivers)␤»

[13:33] *** domidumont joined
[13:35] <sortiz> m: my \Test = (require ::('Te'~'st') <&ok>); say Test.WHAT; ok 1; # With import 'ok'

[13:35] <camelia> rakudo-moar c7cd00: OUTPUT«(Test)␤ok 1 - ␤»

[13:36] <jdv79> https://gist.github.com/anonymous/c090b60c608ad6d17d562eadcbf0391b

[13:36] <jdv79> why?

[13:37] <gfldex> m: my $var = 'Test'; my \Test = (require ::($var) <&ok>); say Test.WHAT; ok 1; # With import 'ok'

[13:37] <camelia> rakudo-moar c7cd00: OUTPUT«(Test)␤ok 1 - ␤»

[13:38] *** darutoko joined
[13:43] *** bjz joined
[13:47] *** dj_goku joined
[13:49] *** yqt joined
[13:50] *** ptolemarch joined
[13:51] *** melezhik_ joined
[13:55] *** kerframil left
[13:59] *** g4 left
[14:04] *** jack_rabbit left
[14:10] <Xliff_zzz> m: say "found" if [1, 2, 3, 4].grep({ 2 });

[14:10] <camelia> rakudo-moar c7cd00: OUTPUT«found␤»

[14:10] <Xliff_zzz> m: say "found" if [1, 2, 3, 4].grep({ 9 });

[14:10] <camelia> rakudo-moar c7cd00: OUTPUT«found␤»

[14:10] <Xliff_zzz> m: say "found" if [1, 2, 3, 4].grep({ $* eq 9 });

[14:10] <camelia> rakudo-moar c7cd00: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    eq used at line 1␤␤»

[14:10] <Xliff_zzz> m: say "found" if [1, 2, 3, 4].grep({ $* == 9 });

[14:10] <camelia> rakudo-moar c7cd00: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of $* variable; in Perl 6 please use ^^ and $$␤at <tmp>:1␤------> 3say "found" if [1, 2, 3, 4].grep({ $*7⏏5 == 9 });␤»

[14:10] <Xliff_zzz> m: say "found" if [1, 2, 3, 4].grep({ $_ == 9 });

[14:10] <camelia> rakudo-moar c7cd00: ( no output )

[14:10] <Xliff_zzz> m: say "found" if [1, 2, 3, 4].grep({ $_ == 2 });

[14:10] <camelia> rakudo-moar c7cd00: OUTPUT«found␤»

[14:19] <perlpilot> Xliff_zzz: That's some trick where you talk to the bot in your sleep  :)

[14:19] <moritz> it's called a bot. Seen it before :-)

[14:20] * moritz wonders if bots live in the botanic garden :-)

[14:21] * moritz not really productive anymore

[14:21] * masak .oO( do bots dream of IRC sheep )

[14:22] <perlpilot> hopefully it's not a ship named Botanic traveling near bergs of some sort

[14:23] * masak .oO( unkickbannable )

[14:24] *** acrussell joined
[14:24] <Xliff> perlpilot: I know right. I have returned with caffeine and am reborn!

[14:25] <perlpilot> Xliff: btw, were you looking for  say "found" if [1, 2, 3, 4].grep(* == 2);  # earlier?

[14:25] <perlpilot> Xliff: I was curious what the $* stuff was about

[14:28] *** lucs_ is now known as lucs

[14:28] *** FROGGS joined
[14:28] <geekosaur> coding while at least half asleep? :p

[14:29] <Xliff> Actually, I that was me trying to use grep without quite attaining consciousness.

[14:29] <masak> m: say "found" if any(1, 2, 3, 4) == 2

[14:29] <camelia> rakudo-moar c7cd00: OUTPUT«found␤»

[14:29] <Xliff> geekosaur++

[14:29] <Xliff> masak: Oooh! Even better.

[14:30] <Xliff> geekosaur: Actually more like 3/4 asleep to be honest. :/

[14:30] <Xliff> \o FROGGS

[14:30] <FROGGS> o/

[14:30] <yoleaux> 14 Jun 2016 17:46Z <lizmat> FROGGS: could you explain what ac0dcdd fixes (e.g. in the ChangeLog) ?

[14:31] *** Sgeo joined
[14:32] <Xliff> FROGGS: Running into a weird GC issue while porting XML::LibXML

[14:32] <FROGGS> .tell lizmat this describes ac0dcdd very well: https://github.com/rakudo/rakudo/blob/nom/docs/ChangeLog#L9

[14:32] <yoleaux> FROGGS: I'll pass your message to lizmat.

[14:32] <FROGGS> Xliff: how so?

[14:33] <Xliff> https://github.com/Xliff/p6-XML-LibXML/tree/06elements

[14:33] *** zakharyas left
[14:33] <Xliff> When running what I have ported of t/06elements.t I hit an endless loop when running "$elem.removeAttributeNode( $tattr );"

[14:34] <Xliff> I've tracked it to GC code, but I have no idea why that is happening. I ran into it before, but thought I had fixed it.

[14:34] <Xliff> Now I'm not so sure.

[14:35] *** zakharyas joined
[14:35] *** cdg joined
[14:35] <FROGGS> gimme a sec

[14:36] <sortiz> FROGGS, BTW I pushed two trivial commits to XML::LibXML. One for a weird CArray creation problem.

[14:36] <Xliff> No worries.

[14:37] <FROGGS> sortiz: ohh nice, that's a workaround for the issue I was talking to jnthn :o)

[14:37] <Xliff> Hmm... how can I pull those into my fork?

[14:38] *** vendethiel left
[14:39] <BrokenRobot> m: say "found" if 2 ∈ 1, 2, 3, 4

[14:39] <camelia> rakudo-moar c7cd00: OUTPUT«found␤»

[14:39] <BrokenRobot> m: say "found" if 2 ∈ 1, 5, 3, 4

[14:39] <camelia> rakudo-moar c7cd00: OUTPUT«found␤»

[14:39] <BrokenRobot> m: say "found" if 2 ∈ <1 5 3 4>

[14:39] <camelia> rakudo-moar c7cd00: ( no output )

[14:39] <BrokenRobot> Bug?

[14:39] <FROGGS> Xliff: I think I've read something about being able to do that on the github page

[14:40] <BrokenRobot> m: say "found" if 1, 5, 3, 4 ∋ 2

[14:40] <camelia> rakudo-moar c7cd00: OUTPUT«found␤»

[14:40] <BrokenRobot> m: say "found" if (1, 5, 3, 4) ∋ 2

[14:40] <camelia> rakudo-moar c7cd00: ( no output )

[14:41] *** vendethiel joined
[14:41] <BrokenRobot> Ah, never mind. the 4 ∋ 2 becomes an element in a list and list is true

[14:41] <sortiz> FROGGS, dunno if that bug is reported, but with that form works well. :-)

[14:41] <FROGGS> sortiz: dunno either

[14:42] <Xliff> FROGGS: Thanks. I'll search for it.

[14:42] <FROGGS> Xliff: Internal error: zeroed target thread ID in work pass <-- that one?

[14:43] <BrokenRobot> Xliff: checkout your fork, then do git pull --rebase http://URL/of/other/repo

[14:43] <Xliff> Yeah. I've been running into that.

[14:43] <BrokenRobot> Unless they added it in 2016, there's no way to do that on GitHub without deleting the fork and reforking

[14:44] <sortiz> Xliff, Umm, I've seen that sporadically even with panda, never reproducible.

[14:47] <Xliff> BrokenRobot: Actually, this worked -- https://help.github.com/articles/syncing-a-fork/

[14:47] <Xliff> Was able to merge changes directly into my branch.

[14:49] <BrokenRobot> Xliff: isn't that just a more complicated method of what I showed, except it creates a merge commit?

[14:49] <BrokenRobot> huggable: dunno

[14:49] <huggable> BrokenRobot, ¯\_(ツ)_/¯

[14:49] <FROGGS> BrokenRobot: seems I misremember... I believed there was a news entry that said that is it possible now on the page directly

[14:50] <BrokenRobot> Was it possibly the ability to squash multiple commits on PR merge? That is recent.

[14:50] <geekosaur> ...on 1 April...

[14:50] <BrokenRobot> m: say so 2 ∈ <2>

[14:50] <camelia> rakudo-moar c7cd00: OUTPUT«False␤»

[14:51] <Xliff> BrokenRobot: Slightly. I wanted a merge commit, not a rebase.

[14:51] <FROGGS> no, I thought it was about pulling in upstream commits...

[14:52] <BrokenRobot> Xliff: cool

[14:52] <FROGGS> I mean, that should be doable when creating a pull request in your clone with switched bases

[14:52] <FROGGS> jnthn: Heap corruption detected: pointer 0x7f364b387020 to past fromspace

[14:52] <FROGGS> jnthn: scared? :D

[14:53] *** stevieb joined
[14:54] <shadowpaste> "xliff" at 217.168.150.38 pasted "Endless Loop Backtrace" (25 lines) at http://fpaste.scsys.co.uk/523531

[14:55] <Xliff> FROGGS: That backtrace varies depending on how long I let it run, but it never leaves MVM_interp_run()

[14:55] <FROGGS> I dont see that behaviour here... but the vm is in a bogus state so that doesnt not matter much

[14:56] <timotimo> it would be very strange if it'd ever leave MVM_interp_run, except if it exits

[14:56] *** vibha left
[14:56] *** pmurias joined
[14:56] <timotimo> please rebuild your moarvm with passing --debug=3 to its configure script

[14:57] <timotimo> if you "up" to a MVM_ function, you can "print MVM_dump_backtrace(tc)" and get a perl6-level traceback of where you've stopped the interpreter

[14:57] <FROGGS> now it hangs in:

[14:57] <FROGGS> ==3871==    at 0x4FD9200: MVM_repr_at_key_o (reprconv.c:452)

[14:57] <FROGGS> ==3871==    by 0x4FF69E0: try_get_slot (CStruct.c:298)

[14:57] <FROGGS> ==3871==    by 0x4FF69E0: get_attribute (CStruct.c:387)

[14:57] <timotimo> that ought to help a lot more than the C-level backtrace

[14:58] *** melezhik_ left
[15:00] <jnthn> FROGGS: Yeah, though at least that error means "we spotted something got screwed up" rather than just SEGVing :)

[15:00] <jnthn> FROGGS: There's some GC debug support you can turn on that may catch it earlier

[15:01] *** khw joined
[15:02] <FROGGS> jnthn: is that an env var or a flag I have to edit in a header file?

[15:02] <jnthn> FROGGS: Flag in a header file

[15:02] <FROGGS> kthx

[15:02] <jnthn> gc/debug.h iirc

[15:05] *** vendethiel left
[15:06] <Xliff> Weird!

[15:06] <Xliff> FROGGS: Found it... it was a parameter type check that was causing the loop.

[15:07] <Xliff> So replacing "method removeAttributeNode(xmlNode $an!)" with "method removeAttributeNode($an!)" solved the problem.

[15:07] *** buharin left
[15:08] *** buharin joined
[15:11] *** Khisanth left
[15:15] *** lizmat joined
[15:22] <BrokenRobot> What are types like IntStr, NumStr, RatStr called?

[15:23] *** vendethiel joined
[15:23] <jdv79> isomorphs?  or something that ridiculous sounding.

[15:23] <jdv79> doesn't sound quite right

[15:23] *** domidumont left
[15:23] *** sufrostico left
[15:23] <BrokenRobot> Ah http://docs.perl6.org/language/glossary#Allomorph

[15:23] <jdv79> ah

[15:25] *** Khisanth joined
[15:26] <FROGGS> isomorphs is something that Kirk would say :o)

[15:35] *** sufrostico joined
[15:39] *** sno left
[15:42] *** daxim joined
[15:43] *** huggable left
[15:43] *** huggable joined
[15:44] *** sjohnson` is now known as sjohnson

[15:44] *** vendethiel left
[15:46] *** ponbiki_ is now known as ponbiki

[15:48] *** AlexDaniel joined
[16:02] *** ssotka joined
[16:02] *** donaldh left
[16:05] *** kurahaupo joined
[16:09] <BrokenRobot> TIL GitHub lets you specify Issue templates: https://github.com/MadcapJake/language-perl6fe/issues/new

[16:10] *** dogbert17 joined
[16:10] <tadzik> neato!

[16:13] *** kurahaupo left
[16:14] *** kurahaupo joined
[16:24] *** smash_ is now known as smash

[16:25] *** domidumont joined
[16:28] <Xliff> Ahh... now I need to start learning nqp.

[16:30] *** xinming joined
[16:33] *** rurban_ left
[16:35] <timotimo> learn how to nap?

[16:35] <tadzik> powernap is the only thing known to mankind better than powerchords

[16:36] <timotimo> what happens when you nap hugging your guitar?

[16:36] *** labster joined
[16:36] <DrForr> powernqp.

[16:41] *** darutoko left
[16:42] <gnull> m: my @fibo = 0, 1, *+* ... *; say @fibo[^10]

[16:42] <camelia> rakudo-moar c7cd00: OUTPUT«(0 1 1 2 3 5 8 13 21 34)␤»

[16:42] <gnull> m: my $fibo = 0, 1, *+* ... *; say $fibo[^10]

[16:42] <camelia> rakudo-moar c7cd00: OUTPUT«Memory allocation failed; could not allocate 1146880 bytes␤»

[16:42] <gnull> wtf?

[16:42] *** ptolemarch left
[16:43] *** ptolemarch joined
[16:43] <timotimo> it's doing it eagerly

[16:43] <gnull> hello everyone, btw :)

[16:43] <timotimo> so it's maxing out on memory and crashes

[16:43] <BrokenRobot> m: my $fibo = lazy 0, 1, *+* ... *; say $fibo[^10]

[16:43] <camelia> rakudo-moar c7cd00: OUTPUT«(0 1 1 2 3 5 8 13 21 34)␤»

[16:47] *** dakkar left
[16:54] *** zacts joined
[16:56] *** abraxxa left
[16:57] *** rjbs joined
[17:02] *** AlexDaniel left
[17:04] *** rubio joined
[17:06] <rubio> I get the following error when I try to start a debug session (perl6-debug-m): "Unhandled exception: ctxlexpad needs an MVMContext". Can someone give me a hint as to what I can do to get this to work?

[17:07] <rubio> I'm trying to debug the C::Parser::Grammar module

[17:07] *** vendethiel joined
[17:10] <gregf_> m: sub fibo($n, @arr){!$n ?? @arr !! fibo($n-1, @arr.push(@arr[*-1]+@arr[*-2]));};say fibo(5,[1,1])

[17:10] <camelia> rakudo-moar c7cd00: OUTPUT«[1 1 2 3 5 8 13]␤»

[17:10] <dalek> doc: 01e959b | (Jan-Olof Hendig)++ | doc/Type/Baggy.pod:

[17:10] <dalek> doc: Added docs for Baggy.grab

[17:10] <dalek> doc: review: https://github.com/perl6/doc/commit/01e959b2f6

[17:11] *** yqt left
[17:11] <DrForr> That sounds vaguely obscene :)

[17:12] *** Josh_ joined
[17:12] <dogbert17> :)

[17:21] *** cooper left
[17:22] *** cooper joined
[17:22] *** cooper left
[17:22] *** cooper joined
[17:22] *** Josh_ left
[17:23] *** dupek joined
[17:24] <dupek> hey guys, rakudo-star is something like perl6 implementation manager

[17:24] <dupek> i mean moar

[17:24] <dupek> jvm

[17:24] <dupek> etc.

[17:25] <moritz> dupek: rakudo-star is a distribution, which means it ships with a compiler, modules and some docs

[17:25] <perlpilot> if that's a question, the answer is "no"

[17:25] <perlpilot> what moritz++ said

[17:25] <dupek> huh

[17:25] <dupek> what is moan then?

[17:25] <moritz> if you want something that builds rakudo for you, in different versions and different backends, look for rakudobrew

[17:25] <dupek> moar

[17:26] <moritz> moar is a virtual machine

[17:26] <moritz> the recommended backend for rakudo

[17:26] <dupek> ok

[17:26] <geekosaur> there is also a jvm backend, but it's not working quite right currently

[17:26] <dupek> java sucks

[17:28] <tadzik> java is a simple, example language attached to a very good virtual machine

[17:28] <dupek> yayaya

[17:29] <dupek> if Java have no pointers then why there NullPointerException

[17:29] <dupek> ?

[17:31] <perlpilot> huggable: hug dupek 

[17:31] * huggable hugs dupek 

[17:32] <perlpilot> dupek: you looked like a hug might be necessary.  :)

[17:32] <jnthn> Because Java had references, which are waaay better than pointers. But if they screw up...well, we better blame it on pointers. ;P

[17:32] <BrokenRobot> dupek: https://wiki.theory.org/YourLanguageSucks

[17:33] <dupek> jnthn, ya thats good explanation

[17:34] <geekosaur> basically JVM has pointers, Java tries to hide them behind references (which are mostly better behaved) but it fails sometimes leading to JVM-level NPEs

[17:35] <parabolize> Should I close https://github.com/perl6/doc/issues/589 ? Should someone else who has reviewed 08c8bb6 ? What is the correct etiquette with fixing issues?

[17:35] <jnthn> fwiw, I wasn't being entirely serious...I can totally imagine it just being somebody not really thinking carefully about the naming :)

[17:35] <jnthn> food &

[17:36] <dupek> geekosaur, stop justify Java

[17:36] <BrokenRobot> parabolize: yeah, close it. The etiquette is you can use "Fixes #444" or "Closes #444" in the commit message and GitHub will auto-close it. The only exception would be very large changes that you'd want people to review in a form of a PR

[17:36] <geekosaur> what makes you think I am justifying anything, aside from your irrational hate?

[17:36] <dupek> geekosaur, I didn't say I hate java

[17:37] <dupek> I just say it sucks

[17:37] <dupek> ;]

[17:37] <geekosaur> you don;t need to say it out loud

[17:37] <geekosaur> your behavior so far is sufficient

[17:37] <dupek> huh, I asked simple question about Java

[17:38] <dupek> and you can't explain me 

[17:38] <tadzik> and yet you say "stop justify" when you got the answer. Peculiar

[17:38] <dupek> and then you attack me about hating

[17:38] *** fhorck joined
[17:38] <BrokenRobot> huggable: hug everybody

[17:38] * huggable hugs everybody

[17:38] <geekosaur> so why are you attacking me for "justify java"? especially when that was not what I did?

[17:39] *** fanksy joined
[17:39] *** Zero_Dogg left
[17:39] *** Zero_Dogg joined
[17:39] <BrokenRobot> dupek: did you have more questions about MoarVM?

[17:39] <dupek> no

[17:40] <BrokenRobot> OK.

[17:40] <nemo> say... is there an ubuntu ppa w/ an up to date rakudo for 14.04 LTS ?

[17:40] <nemo> 14.04 probably being the last ubuntu I'll ever use

[17:41] * BrokenRobot gave up on it with whatever came out after Edgy

[17:41] <BrokenRobot> Bodhi Linux FTW!

[17:41] *** cdg left
[17:42] <nemo> BrokenRobot: well. I use gentoo on a few machines, but ubuntu is pretty common due to it being one of the two distros supported by the workplace

[17:42] <nemo> and no huge desire to run RHEL

[17:43] <nemo> not sure what I'll do once 14.04 is EOL'd... probably switch to Devuan and cross my fingers every time they push a .deb

[17:45] <nemo> BrokenRobot: looks like Bodhi is basically Ubuntu LTS, so the PPA thing still stands

[17:46] <nemo> BrokenRobot: have you found one?

[17:46] <nemo> BrokenRobot: problem w/ some of the ubuntu derivatives like mint is installing up to date stuff is a real pain for a # of reasons.  not sure if bodhi has improved the process

[17:46] <BrokenRobot> I just rakudobrew

[17:47] <dupek> zed is good?

[17:47] <dupek> zef

[17:47] <BrokenRobot> update-perl6 is aliased to `rm -fr ~/.zef; rm -fr ~/.perl6; rm -fr ~/.rakudobrew/; git clone https://github.com/tadzik/rakudobrew ~/.rakudobrew; rakudobrew build moar; rakudobrew build zef;'

[17:47] <BrokenRobot> dupek: yes

[17:47] <nemo> BrokenRobot: so.. there are some things I'm fine w/ doing my own builds of

[17:47] <nemo> BrokenRobot: perl is not high on the list

[17:47] <dupek> ok

[17:47] <nemo> esp if I'm to use it on a bunch of machines

[17:47] <BrokenRobot> heh

[17:49] <parabolize> why is everyone removing ~/.rakudobrew when the update rakudo? Isn't that self defeating? At the very least it means you update all your perl6 versions at once.

[17:49] <parabolize> when they*

[17:50] <BrokenRobot> parabolize: around Christmas "nuking rakudobrew" was the only way to move forward with new version due to a huge pre-production change.

[17:50] <BrokenRobot> I guess that stuck around :)

[17:50] * BrokenRobot isn't even sure what happens if you don't nuke it anymore :D

[17:51] <nemo> I do find the github pattern of "blow away the repo and update"

[17:51] <nemo> pretty funny

[17:51] <geekosaur> it hasn't been necessary since then, though

[17:51] <nemo> I find git terribly unintuitive and convoluted compared to, oh, mercurial, and one of the things that keeps biting me is failure to update to latest (aside from just general command complexity)

[17:51] <nemo> reminds me of the xkcd comic

[17:52] * geekosaur blew it away once to get past the breakage, and has been using rakudobrew's update since then without problems

[17:53] <tadzik> the funniest thing about rakudobrew is that people mostly don't care about the multiple-rakudos part, they just use it for "finally, I can update rakudo with a single command"

[17:55] *** spider-mario joined
[17:55] *** jjido joined
[17:56] <geekosaur> if multiple rakudos were actually useful in practice...

[17:56] <nemo> tadzik: I imagine there aren't many people out there who want multiple versions of their compiler most of the time.  I briefly needed 2 versions of fpc for debugging purposes but ditched that ASAP

[17:56] <nemo> compiler/interpreter

[17:56] <geekosaur> the main reason I'd want that is rakudo-jvm, which is kinda broken currently

[17:56] <nemo> https://xkcd.com/1597/  the aforementioned xkcd 

[17:57] *** cooper left
[17:58] *** zakharyas left
[17:58] *** cooper joined
[17:58] *** cooper left
[17:58] *** cooper joined
[17:59] *** cooper left
[17:59] <stevieb> nemo: lol. Took me a fair while to get to the point I didn't need to do that to fix any issues. I used hg before that, and don't remember ever needing to do such

[18:00] <nemo> stevieb: these days when I interact w/ git it is using the hg bridge ☺

[18:00] <nemo> stevieb: unless I'm doing a one-off and maybe an rm -rf 😉

[18:01] <perlpilot> git is totally intuitive ... I don't know what you guys are talking about

[18:01] <perlpilot> ;)

[18:01] <stevieb> perlpilot: oh, I'm not complaining at all. It just took a while to get used to things moving from hg. I'm perfectly content with git, in fact I always have been.

[18:01] *** jjido left
[18:02] <tadzik> it's like with unix – it's quite user-friendly, just selective about who its friends are :)

[18:02] <nemo> https://bitbucket.org/durin42/hg-git ♥

[18:02] <nemo> my fav hg command is hg grep --all   they really need to make all the default IMO

[18:03] <nemo> ok. anyway. enough channel hijack

[18:03] <nemo> I take it there's no PPA then

[18:03] <perlpilot> I tried git, bzr, and hg at the same time around early 2006 and decided git fit my brain a little better (and at the time I think it was faster or less buggy that the others too) and I've not used the others since then

[18:03] <perlpilot> nemo: I don't know of one, but if you find one (or make one), do share 

[18:04] <stevieb> I'm pretty sure I was using cvs and svn back then

[18:04] <nemo> stevieb: yeh, I went rcs → cvs → svn → hg

[18:04] <nemo> stevieb: well, we still use svn quite a lot @ work

[18:05] <perlpilot> me too except s/hg/git

[18:05] <nemo> mostly due to, well...

[18:05] <nemo> https://bitquabit.com/post/unorthodocs-abandon-your-dvcs-and-return-to-sanity/

[18:05] <perlpilot> I don't think I've used svn since 2009 or so

[18:05] <nemo> the mapping from svn to hg is simply a lot better

[18:05] <nemo> also synchronisation between the two

[18:05] <stevieb> me too, except for rcs. We just switched from svn => git this past quarter @ $work

[18:05] <nemo> stevieb: we toyed w/ DVCS a bit, but there was no good reason for it

[18:06] <nemo> stevieb: the tooling for SVN is still quite good, and there was no desire to fragment the repo

[18:06] <nemo> stevieb: but holy crap does git suck at http by default

[18:06] <mst> I ran some fairly big svn repos, and it worked basically fine, but I leaned heavily on svk for merging

[18:06] <nemo> spent way too long on that

[18:06] <mst> then when that broke, git-svn

[18:06] <mst> now every time I try and deal with svn I end up crying because I miss rebase

[18:07] <stevieb> nemo: svn is good, but all of my personal code is in git, and I devel python at $work, so now I can use the same IDE (for perl5 at least w/Camelcade plugin) with the same repository types 

[18:07] <nemo> stevieb: I probably spent several days trying to see if we could reasonably do an svn/git sync as well as the svn/hg one, and decided it was way too painful

[18:07] <mst> OTOH right now I'm facedesking really hard because of multiple clones of a repo for $customer and then the master is different again

[18:07] <stevieb> mst: "facedesking" lol, never heard that one before

[18:08] <nemo> mst: svn really is stupid-simple for people to learn.  The very very simplist being, did you know you can literally just "mount" an SVN repo in windows as a remote folder ? (using webdav)

[18:08] <tadzik> you haven't? It makes quite a sound in an office space :P

[18:08] <mst> it comes somewhere between http://trout.me.uk/areyousure.jpg and http://trout.me.uk/bunny.jpg

[18:08] <stevieb> bah... wanted to say I use PyCharm IDE for my python + perl5 (Camelcade now had debugging!)

[18:08] <nemo> mst: they think they are just copying files in and out, updating, deleting, but its just autocommit

[18:08] <nemo> mst: tracking for free on folks who are preeeetty clueless about that in general

[18:08] <mst> nemo: yes, I know what mod_dav_svn is

[18:09] <nemo> mst: well sure. most do, but I had no idea windows had built in support for it

[18:09] <nemo> was news to me

[18:09] <nemo> mst: nor that w/ autocommit on it would all "just work"

[18:09] <mst> it was news to me about ten years ago :D

[18:09] <nemo> mst: ok, about same time for me ☺

[18:09] * nemo checks 'sact date

[18:09] <perlpilot> nemo: webdav being neat doesn't make up for poor merging support

[18:10] <mst> svk's merging worked, but they insisted on writing their own anyway

[18:10] <perlpilot> Though ... I understand that merging in svn isn't as painful now as it once was 

[18:10] <mst> when I asked the devs they said "well, svk was a separate project"

[18:10] <mst> and, like, well, yes, but it was open source and ALREADY WORKED

[18:10] <nemo> mst: ah. it was news to me 6 years ago ☺

[18:10] <mst> nemo: I *think* about a decade, but obviously my memory gets fuzzy that far back

[18:11] <nemo> mst: I checked revision log on that repo

[18:11] <mst> but I ran svn repositories for a couple hundred cpan dists for a while

[18:11] <mst> so I ended up being really quite good with it

[18:11] <Xliff> Heh! That xkcd... I've been there.

[18:11] <mst> (including being able to rebase using svnadmin and perl -pe ... no, I don't recommend it)

[18:12] <nemo> I'm sure there's a time when I'll have to giv up on https://bitbucket.org/durin42/hg-git , suck it up, and actually learn how to use it properly

[18:12] <nemo> buut, I'm in no rush to do so

[18:12] <mst> honestly, I first learned git because it was clear that lots of cpan modules were going to use it, and I needed to be able to unfuck people's mistakes

[18:12] <nemo> but then, why would I be in #perl6 otherwise.  I mean clearly I should be doing everything in node.js or something

[18:12] <mst> as with vi, once I got past the 'aha' moments I fell in love

[18:13] <nemo> mst: it just feels so clunky to use compared to mercurial

[18:13] <mst> the thing about git is you have to stop trying to use it like anything else and get a feel for how it does things, and then it gets a lot more powerful

[18:13] <nemo> buuut that could be due to decades of svn and cvs and rcs, what can I say

[18:13] <nemo> maybe if I was coming at it fresh I wouldn't feel so

[18:14] <nemo> mst: I also maybe don't spend enough time on VCS to care enough.  That could be it...

[18:14] <mst> I found it really clunky until I stopped fighting it, and figured out workflow that took advantage of git

[18:14] <nemo> also not a big fan of social anything so github had no huge appeal

[18:14] <mst> this was pre-github

[18:15] *** fanksy left
[18:15] <b2gills> I think git is easier to figure out after you know more about its internals ( at an abstract level )

[18:15] <perlpilot> nemo: you and I seem to have similar revision control systems background, but I went with git over hg.  So ... I'm going to say it's other factors than git itself.  :)

[18:16] <mst> nemo: anyway, key take-aways: "learning git more will annoy the crap out of you and I don't blame you for delaying doing so", plus "once you do learn more, you may find that it doesn't annoy you nearly so much"

[18:17] <b2gills> I used to regularly do a bunch of changes then do ｢git add -e｣, and check if I did it right with ｢git gui｣

[18:17] <nemo> mst: mm. yeah, totally plausible, just, no compelling reason to do so so far, since the mercurial bridge works fine, and I seem to get about same feature set

[18:17] <nemo> mst: but maybe someday!

[18:17] <nemo> and hg *does* map a lot better to svn, so we lose less data on the sync

[18:17] <b2gills> nemo: can it do ｢git add -e｣?

[18:18] <b2gills> that is edit the diff that will become the commit

[18:18] <nemo> b2gills: hm. that sounds like a really bad way to pick and choose parts of the diff

[18:18] <nemo> I honestly have not ever had the desire to do that

[18:18] <mst> nemo: sure. just saying that, *eventually*, I was pleasantly surprised :)

[18:18] <perlpilot> nemo: It's a nice option when you *need* it.

[18:18] <mst> ah, see, this is the thing about git

[18:19] <nemo> heh. the man page doesn't recommend it even

[18:19] <mst> a bunch of the features are something you'll never have had the desire to do

[18:19] <nemo> had to look it up

[18:19] <mst> but once you've used them, you get upset in their absence

[18:19] <nemo>            staged. This can be quicker and more flexible than using the interactive hunk selector. However, it is easy to confuse

[18:19] <nemo>            oneself and create a patch that does not apply to the index. See EDITING PATCHES below.

[18:19] <mst> the way git rebase works, for example

[18:19] <nemo> mst: I'm not saying the bridge can't do it, I really have no idea

[18:19] <mst> nemo: I'm not commenting about the bridge at all

[18:19] <perlpilot> b2gills: how often do you conflate changes such that you need "git add -e" ?

[18:19] <b2gills> Sometimes the worst tool in the toolbox is the best tool for the job

[18:20] <stevieb> in the docs, many of the param types in definitions have a ":D" or ":D:" suffix. can someone explain what these mean, or point me to the doc I may have missed that explains them?

[18:20] <mst> nemo: please stop taking my comments as antithesis to yours, my goal is synthesis :)

[18:20] <perlpilot> b2gills: I mean, "git add -p" is useful, but I've only ever needed "git add -e" like one time (maybe)

[18:20] <nemo> mst: I wasn't taking as antithesis, no worries. does git rebase do anything significantly different from histedit?

[18:20] <nemo> mst: not that I've had much reason to do either one

[18:21] <perlpilot> b2gills: Oh, I guess I've occasionally editted the hunk using "git add -p" too, so that's largely the same

[18:21] <mst> histedit appears to not be designed to deal with history with merges

[18:22] <b2gills> perlpilot: It is usually only a few changes that are very closely related, such that they could actually be one commit if I didn't care about the history

[18:22] <mst> nemo: ok, so, basically, all I can really say here is "I don't think you understand rebase, but also I don't think I can explain it to you, it was an 'aha' moment for me after which it became obvious why I loved the feature, but no explanation I read beforehand helped much"

[18:23] <mst> nemo: kinda similar to my first encounter with lexical closures many years ago in that respect, if you see what I mean

[18:24] <nemo> mst: TBH no idea what it is so I guess no idea what I'm missing.  I was asking that merely in the context of: https://www.mercurial-scm.org/wiki/GitConcepts#Command_equivalence_table

[18:24] <parabolize> stevieb: it requires the parameter to be defined. http://doc.perl6.org/type/Signature#Constraining_Defined_and_Undefined_Values

[18:24] <nemo> mst: which I've turned to many times when I needed to get something done in git

[18:24] <mst> nemo: right. the thing is, I don't think there is equivalence here, as such

[18:24] <mst> histedit appears to provide rebase -i, which I like occasionally

[18:24] <mst> but what I really care about is 'git rebase master'

[18:25] <mst> aha, so there's a different extension - https://www.mercurial-scm.org/wiki/RebaseExtension

[18:25] <mst> nemo: you stopped reading that table too early :)

[18:26] <nemo> mst: ah. I already have the rebase extension enabled

[18:27] <nemo> mst: I've used it... eh.. once or twice

[18:27] <nemo> not very often

[18:27] * nemo shrugs

[18:27] <mst> I use it all the time so I don't end up with pointless merge commits

[18:27] <nemo> mst: I'm generally a fan of that. I've heard of good arguments for merge commits, in terms of avoiding losing that merge info

[18:28] <nemo> mst: although most of time I avoid pointless merge commits by staying in sync ☺

[18:28] <nemo> if there's no reason to do that, due to having done enough on a separate tree, it's probably best to have a merge commit anyway

[18:28] <nemo> in general not a huge fan of rewriting history

[18:28] <b2gills> I like ｢git merge --no-ff --ff-only｣ it leaves a clean history

[18:29] <mst> yes, that's my preferred approach for significant changes

[18:29] <nemo> mst: oh... wrt that hg grep --all - is there a git equiv? 'cause when I do have a git repo, the most common reason for me to have it, is to search the commits for something

[18:29] <nemo> mst: would be nice to have an easy thing to remember to do that search

[18:30] <nemo> mst: like... hg grep --all SomeWTF.*foo x.c y.c z.c

[18:30] <dalek> ecosystem: 4155c25 | (Zoffix Znet)++ | META.list:

[18:30] <dalek> ecosystem: Add Quantum::Collapse

[18:30] <dalek> ecosystem: 

[18:30] <dalek> ecosystem: Collapse allomophic types into their components: https://github.com/zoffixznet/perl6-Quantum-Collapse

[18:30] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/4155c251f0

[18:30] <mst> I've no idea what said hg invocation does

[18:30] <nemo> mst: searches history for a regex

[18:31] <b2gills> run ｢git help grep｣

[18:31] <nemo> b2gills: I tried that

[18:31] <nemo> b2gills: couldn't get it to search all history 

[18:31] <nemo> so thought I'd ask people familiar w/ it, since the subject came up

[18:31] <b2gills> The thing is they would have to know both systems

[18:32] <b2gills> I have never used it, though it could be faster than the way I normally find what I'm looking for

[18:32] <nemo> b2gills: http://m8y.org/tmp/temp.txt minus the colourising

[18:33] <mst> nemo: git grep search_for $(git rev-list --all) maybe?

[18:33] <nemo> hm

[18:33] * nemo tries in a git repo

[18:33] <nemo> mst: search_for being the regex?

[18:33] <mst> yeah

[18:33] <nemo> kk

[18:33] * nemo tries on the Starbound repo

[18:33] <stevieb> parabolize: thanks much!!

[18:35] <nemo> mst: O_o

[18:35] <nemo> mst: no. that can't be right

[18:35] <nemo> mst: seems to have returned basically everything

[18:35] * nemo tries another string

[18:35] <nemo> mst: and. heh. is still running. 

[18:35] <parabolize> nemo: git log -S

[18:36] <nemo> that looks more promising

[18:36] * nemo aborts the mst thingy

[18:36] <nemo> hm.

[18:36] <nemo> parabolize: not bad, now I just need it to actually print out the line

[18:37] <nemo> parabolize: I have the revsets now

[18:37] <nemo> maybe dump the diff then grep

[18:37] *** yqt joined
[18:37] <nemo> parabolize: doesn't support regex unfortunately

[18:38] <nemo> parabolize: but. good enough for quick and dirty purposes. thanks.  anything more involved I'll do my tried 'n' true hg-git 😃

[18:39] <parabolize> maybe the -G flag

[18:40] <parabolize> or -S --pickaxe-regex

[18:41] <nemo> parabolize: swapped those 2 and it worked nicely

[18:41] <nemo> git log --pickaxe-regex -S BOM.*ZWNBSP .

[18:41] <nemo> quick test

[18:42] <nemo> hm... I wonder if the . worked as expected. let's see

[18:42] <nemo> it did. sweet

[18:42] <nemo> I gotta make an alias for that

[18:42] <nemo> just need to add the extraction of the actual change lines

[18:43] <nemo> hm... now how to do that

[18:43] <nemo> huh. that's weird

[18:44] <parabolize> I don't understand what you want.

[18:44] <nemo> parabolize: git diff -c revhash  from the log above should give changes from that changeset right?

[18:44] <parabolize> you want the full diff? you can use the -p flag

[18:45] <nemo> parabolize: when I searched for my test string, it was an unchanged context line O_o  maybe if I add "^[+-].*" to all my searches

[18:45] <nemo> let's try that

[18:46] <nemo> hrm. not getting anything now

[18:46] <nemo> parabolize: I want something like http://m8y.org/tmp/temp.txt - the colourising (not visible there) would be nice but not important

[18:47] <nemo> change history, with line, and whether it was a removal or addition

[18:47] <nemo> and ideally the pattern colourised in the line

[18:48] *** finanalyst joined
[18:48] <finanalyst> @search ninefox gambit

[18:48] <mst> finanalyst: wat

[18:48] <finanalyst> sorrrrry, wrong irc

[18:48] <mst> finanalyst: http://trout.me.uk/areyousure.jpg

[18:49] <finanalyst> mst: LOL!

[18:50] <dalek> doc: 4f52547 | (Zoffix Znet)++ | doc/Language/testing.pod:

[18:50] <dalek> doc: cmp-ok cannot take custom operators as string

[18:50] <dalek> doc: 

[18:50] <dalek> doc: Mention &[op] notation.

[18:50] <dalek> doc: review: https://github.com/perl6/doc/commit/4f52547b60

[18:51] <parabolize> nemo: git doesn't seem to like it when you join the -S with other flags

[18:51] <parabolize> git log --pickaxe-regex -p -S

[18:52] <pochi> m: sub foo() returns List of Int { return 1,2,3 }

[18:52] <camelia> rakudo-moar c7cd00: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤List cannot be parameterized␤at <tmp>:1␤------> 3sub foo() returns List of Int7⏏5 { return 1,2,3 }␤»

[18:52] <pochi> is that a permanent thing, or will Lists be able to be parameterized at some point?

[18:53] <BrokenRobot> m: sub foo() returns Array of Int { return [1,2,3] }

[18:53] <camelia> rakudo-moar c7cd00: ( no output )

[18:53] <BrokenRobot> hm.

[18:55] <geekosaur> I think lists are deliberately unstructured type-wise?

[18:56] <nemo> parabolize: I kinda gave up on it. no worries. isn't super crucial.  I usually have hg installed and can easily convert the clone most of the time

[18:56] <nemo> burnt enough channel history ☺

[18:58] *** acrussell left
[18:59] *** acrussell joined
[19:00] *** girafe joined
[19:02] *** cdg joined
[19:06] <dogbert17> m: my $bf = (eggs => 2, bacon => 3).BagHash; say $bf.grabpairs(1).WHAT; say $bf.grabpairs(*).WHAT; # why (List) and (Array) instead of (List) and (List) ?

[19:06] <camelia> rakudo-moar c7cd00: OUTPUT«(List)␤(Array)␤»

[19:07] <dogbert17> this feels wrong

[19:07] <timotimo> maybe it should actually be a Seq?

[19:07] *** Emeric left
[19:08] *** Emeric joined
[19:08] *** Emeric is now known as begi

[19:08] <dogbert17> timotimo: compare with this ...

[19:08] <dogbert17> m: my $bf = (eggs => 2, bacon => 3).BagHash; say $bf.grabpairs(1).WHAT; say $bf.grabpairs(5).WHAT;

[19:08] <camelia> rakudo-moar c7cd00: OUTPUT«(List)␤(List)␤»

[19:08] *** _mg_ joined
[19:09] <begi> I've a little question : when should I use "fail," and when should I use "die" ?

[19:09] <moritz> just use die

[19:09] <dogbert17> moritz: any comments on my examples above ?

[19:10] <moritz> dogbert17: not really

[19:10] <dogbert17> :(

[19:10] <moritz> dogbert17: but if the type constraint is List, it's OK to return a subclass thereof

[19:10] <begi> moritz: in fact, i don't know what are the advantages to use "fail"... So should I *always* use "die"?

[19:11] <BrokenRobot> begi: fail returns a Failure that can be defused

[19:11] <stevieb> so, I want to count the number of iterations with succ() between "aa" and "be". I know a string is immutable, but I can't find a workaround to do what I want here. Can someone please point out the perl6ish way to accomplish this?

[19:11] <dogbert17> moritz: I asket because I saw your name in https://design.perl6.org/S32/Containers.html#QuantHash  :)

[19:11] <stevieb> "my $x="aa"; my $c=0; while $x ne "be" {$x.succ; $c++; $c.say}"

[19:11] <Xliff> *sigh*

[19:11] <Xliff> Hit another loop.

[19:11] <moritz> begi: IMHO yes. I know some theretical advantages of fail vs. die, but I don't think they make much sense right now

[19:12] *** jjido joined
[19:12] <BrokenRobot> m: sub foo {  "zomfg!" }; my $x = foo; say (so $x) ?? $x !! "did not work";

[19:12] <camelia> rakudo-moar 2126ed: OUTPUT«zomfg!␤»

[19:12] <moritz> m: say ('aa', *.succ ... 'be').elems

[19:12] <camelia> rakudo-moar 2126ed: OUTPUT«31␤»

[19:12] <BrokenRobot> m: sub foo { fail  "zomfg!" }; my $x = foo; say (so $x) ?? $x !! "did not work";

[19:12] <camelia> rakudo-moar 2126ed: OUTPUT«did not work␤»

[19:12] <moritz> stevieb: ^^

[19:12] <moritz> m: say ('aa' ... 'be').elems

[19:12] <camelia> rakudo-moar 2126ed: OUTPUT«10␤»

[19:13] <moritz> nope, succ doesn't seem to be the default

[19:13] <BrokenRobot> m: say 'aa' ... 'be'

[19:13] <camelia> rakudo-moar 2126ed: OUTPUT«(aa ab ac ad ae ba bb bc bd be)␤»

[19:13] <BrokenRobot> m: say 'aa' .. 'be'

[19:13] <camelia> rakudo-moar 2126ed: OUTPUT«"aa".."be"␤»

[19:13] <BrokenRobot> m: say eager 'aa' .. 'be'

[19:13] <camelia> rakudo-moar 2126ed: OUTPUT«(aa ab ac ad ae ba bb bc bd be)␤»

[19:14] *** _mg_ left
[19:15] <stevieb> m: say (<aa>, *.succ ... <be>).elems

[19:15] <camelia> rakudo-moar 2126ed: OUTPUT«31␤»

[19:15] <stevieb> moritz: sweet! thanks!

[19:16] <moritz> I still like Euler's algorithm with the series operator

[19:16] *** acrussell left
[19:16] *** zakharyas joined
[19:16] <moritz> m: say (42, 36, &infix:<%> ... 0)[*-2]

[19:16] <camelia> rakudo-moar 2126ed: OUTPUT«6␤»

[19:16] <Xliff> Hmmm.... What happened to "af"?

[19:16] <Xliff> And "b0 - b9"

[19:17] *** AlexDaniel joined
[19:17] <Xliff> m: say 'aa'.. 'af'

[19:17] <camelia> rakudo-moar 2126ed: OUTPUT«"aa".."af"␤»

[19:17] <Xliff> m: say 'aa' ... 'af'

[19:17] <camelia> rakudo-moar 2126ed: OUTPUT«(aa ab ac ad ae af)␤»

[19:17] <BrokenRobot> Xliff: it goes each letter separately

[19:17] <moritz> m: say list 'aa' .. 'af'

[19:17] <camelia> rakudo-moar 2126ed: OUTPUT«(aa ab ac ad ae af)␤»

[19:17] <moritz> m: say list 'aa' .. 'ef'

[19:17] <camelia> rakudo-moar 2126ed: OUTPUT«(aa ab ac ad ae af ba bb bc bd be bf ca cb cc cd ce cf da db dc dd de df ea eb ec ed ee ef)␤»

[19:17] <BrokenRobot> stevieb: keep in mind you have a potential for infinite loop there, if the start string is less than end string

[19:17] <Xliff> Ahh

[19:17] <BrokenRobot> stevieb: *more than

[19:18] <moritz> or if your end string isn't completely alphabetic, for example

[19:18] <moritz> 'a', *.succ ... '+';

[19:18] <BrokenRobot> Halting Problem basically :)

[19:18] <moritz> m: say ('a', *.succ ... '+')[^100].elems

[19:18] <camelia> rakudo-moar 2126ed: OUTPUT«100␤»

[19:19] *** pmurias left
[19:19] *** pmurias joined
[19:19] <stevieb> BrokenRobot: thanks for that, I'll keep it in mind

[19:22] *** acrussell joined
[19:22] <shadowpaste> "xliff" at 217.168.150.38 pasted "Endless MVM_dump_backtrace" (4788 lines) at http://fpaste.scsys.co.uk/523566

[19:23] <Xliff> timotimo / FROGGS: ^^ Backtrace from latest endless loop.

[19:23] <timotimo> are you .perl ing a big data structure?

[19:24] <dalek> doc: 5299b4f | (Jan-Olof Hendig)++ | doc/Type/Baggy.pod:

[19:24] <dalek> doc: Added docs for Baggy.grabpairs

[19:24] <dalek> doc: review: https://github.com/perl6/doc/commit/5299b4f675

[19:24] <FROGGS> Xliff: that sounds like you call .perl on a recursive structure

[19:27] <timotimo> yeah, even though we have a "perlseen" thing that's supposed to make loops in recursive structures non-problematic

[19:29] *** zacts left
[19:31] <timotimo> i'm not actually sure perlseen should be recursing, though?

[19:31] *** acrussell left
[19:32] <Xliff> FROGGS: It's possible, although I am not expressly calling .perl anywhere.

[19:33] <Xliff> And I do see perlseen getting called several times in that backtrace.

[19:33] <Xliff> The last time this happened was due to a parameter type check. Let me see if I can resolve this one.

[19:34] *** acrussell joined
[19:35] <FROGGS> Xliff: sorry that I cannot help right now :/

[19:36] *** andreoss left
[19:37] <Xliff> No worries. timotimo asked for the backtrace earlier, but I managed to isolate the problem.

[19:37] <Xliff> This makes the 3rd time I've run into something like this.

[19:38] *** domidumont left
[19:38] <timotimo>  Xliff what worries me is that there's no line in that backtrace that'd come from your code

[19:39] <timotimo> so if you're not calling .perl, and nothing else is calling .perl either ... what's going on?

[19:39] <mst> ninjas.

[19:40] <Xliff> I'm with mst.

[19:40] <Xliff> timotimo: When I isolate this thing, I will let you know.

[19:40] <timotimo> maybe the print is breaking off before it reaches the bottom

[19:40] *** zacts joined
[19:43] *** huggable left
[19:43] *** huggable joined
[19:44] *** TEttinger joined
[19:45] *** sufrostico left
[19:45] *** ocbtec left
[19:51] <Xliff> Hrm. There's a recursive call that was working before but isn't for that call.

[19:51] <Xliff> s/call\.$/routine./

[20:02] *** sufrostico joined
[20:07] <AlexDaniel> BrokenRobot: what about changing your nickname back to Zoffix? :D

[20:10] *** itaipu joined
[20:14] *** pmurias left
[20:15] *** pmurias joined
[20:19] *** vibha joined
[20:19] <BrokenRobot> AlexDaniel, what do you mean back? It was never Zoffix. It was sexy-coder-girl that you didn't like :)

[20:20] <dogbert17> Anyone know how much heap perl6 grabs when starting a script? Does it depend on the amount of free memory?

[20:39] *** finanalyst left
[20:40] *** kaare_ left
[20:44] *** johnjohn101 joined
[20:46] *** rindolf left
[20:52] <tony-o> dogbert17: isn't that configurable in the script called 'perl6' ?

[20:54] *** jameslenz left
[20:54] <tony-o> `cat ~/.rakudobrew/jvm/perl6` 

[20:56] *** dupek left
[20:56] *** daxim left
[20:58] <dogbert17> tony-o: thx, does that mean it's only applicable when running under the jvm?

[20:59] *** jjido left
[21:01] *** jjido joined
[21:02] <tony-o> i'm not familiar enough with starting just moarvm to know how that works

[21:02] *** zakharyas left
[21:07] *** jjido left
[21:07] <Xliff> What's the best way to NULL check for NativeCall?

[21:08] *** jjido joined
[21:09] *** firstdayonthejob joined
[21:10] *** begi left
[21:13] *** firstdayonthejob left
[21:14] *** firstdayonthejob joined
[21:14] *** setty1 joined
[21:15] *** jjido left
[21:15] *** jjido joined
[21:16] *** rindolf joined
[21:17] *** cpage_ left
[21:18] *** acrussell left
[21:18] *** cpage_ joined
[21:28] *** rudi_s_ is now known as rudi_s

[21:37] *** skids left
[21:38] *** rindolf left
[21:50] <timotimo> Xliff: just ask for the result's .defined

[21:50] <timotimo> dogbert17: rakudo grabs as much memory as it needs for start-up. and that is currently a bit more than it should be. but we've made noticable improvements in the past, and will continue doing such in the future

[21:51] *** setty1 left
[21:54] *** fhorck left
[21:57] <sortiz> m: use NativeCall; my $ptr = Pointer.new(0); say so $ptr.defined, so +$ptr; # Xliff, this is the only special case, for all others what timotimo says.

[21:57] <camelia> rakudo-moar 2126ed: OUTPUT«TrueFalse␤»

[22:03] *** grondilu joined
[22:05] *** kid51 joined
[22:06] <Xliff> sortiz: So $ptr.defined should be safe for return values from C-libs?

[22:08] <sortiz> Xliff, Yes. And I prefer 'with($foo) { ... }' than 'if $foo.defined {...}'

[22:09] *** pmurias left
[22:09] <Xliff> sortiz: Thanks. Your preference has been noted. 

[22:11] *** pmurias joined
[22:11] <dogbert17> timotimo: thx for the information, so it's nothing that the user can control then like in java?

[22:11] <Xliff> sortiz: Um... is there 'without($foo){ ... }' ?

[22:11] <sortiz> Btw, I've seen that almost all methods in XML::LibXML lacks the invocant declaration 'Foo:D:', in particular 'gist' needs one, to avoid recursion in case of undetected errors when undefined.

[22:11] <sortiz> Yep. There is.

[22:11] <Xliff> kk

[22:12] <geekosaur> java's behavior is a bug imo. it should be dynamic, not eat-as-much-as-you-can-on-start

[22:13] <timotimo> dogbert17: you can up front just initialize a gigantic list of numbers, that'll use up some heap space for you

[22:14] <dogbert17> timotimo: sure, so the heap can grow dynamically then or does it have a fixed size after program start?

[22:15] <timotimo> no, it grows dynamically

[22:15] <timotimo> there's the nursery, which is 4 megabytes for each thread at the start and 4 extra megabytes after each collection

[22:16] <timotimo> and there's the gen2, which is a bunch of big pages of same-sized objects with a free-list going through them

[22:16] <dogbert17> I became curious after profiling a small script which spent 10-15% of the running time doing GC

[22:17] <dogbert17> that is, if I understood the profiler output correctly ...

[22:17] <timotimo> on top of that, many things are malloced, like the storage of dynamic arrays and such, internal stuff, too

[22:17] <timotimo> if it says that it spent 15% time doing GC, then yeah

[22:17] <timotimo> did you look at the GC tab? was there a lot of red? or maybe 100% red, 100% orange, 100% red, 100% orange?

[22:18] *** mr-foobar joined
[22:18] <timotimo> one thing where the gc behavior is just 100% terrible is when you split a gigantic string into a gigantic amount of pieces

[22:19] <timotimo> because having a nursery and a second gen is based on "things are either going to die early, or live long", but when you do like 50 collections where all you do is allocate strings and put them into the list, you're getting 100% live-long objects

[22:19] <dogbert17> timotimo: well, I am using comb

[22:19] <timotimo> so what happens is it fills up the nursery's 4 megabytes and runs a collection trying to free up space

[22:20] <timotimo> it frees up exactly 0 space

[22:20] <timotimo> so it runs again, this time moving all things from the nursery into the second gen. then the nursery is empty

[22:20] <timotimo> that process repeats until the split finishes

[22:20] <timotimo> comb on a very long string will have the same behavior, likely

[22:20] <dogbert17> here's GC no 2:    65KB / 4328KB / 4194007KB ... 17791 gen2 roots      

[22:21] <timotimo> i forgot what order the numbers in

[22:22] <dogbert17> retained/promoted/freed

[22:22] <timotimo> OK

[22:22] <timotimo> that actually looks sensible

[22:22] <dogbert17> isn't the freed number a bit high though

[22:23] <timotimo> in perl6, a big amount of objects die very young

[22:23] <timotimo> we don't have escape analysis, for example, so a lot of Scalar container objects end up on the heap instead of on the stack. those will usually die extremely fast

[22:23] <dogbert17> yes but, my math might be wrong, but isn't that 4 gigs

[22:24] <timotimo> oh? wait, that doesn't make sense :D

[22:25] <timotimo> m: say 4194007 / 1024

[22:25] <camelia> rakudo-moar 2126ed: OUTPUT«4095.709961␤»

[22:25] <dogbert17> compare with GC no 1:   781KB / 0KB / 3315KB ... 12180 gen2 roots

[22:25] *** cpage_ left
[22:26] <timotimo> okay, must be a bug, then

[22:26] <dogbert17> could be 

[22:26] <dogbert17> maybe a division with 1024 has been forgotten somewhere

[22:27] <johnjohn101> perl 6 is looking cool. looking at larry wall's presentation

[22:28] <timotimo> oh, which is that?

[22:28] <johnjohn101> https://www.youtube.com/watch?v=kwxHXgiLsFE

[22:29] <timotimo> ah, that one!

[22:29] <timotimo> i liked that, yeah :)

[22:30] *** Zoffix joined
[22:30] <johnjohn101> larry wall can explain perl better than anyone!

[22:30] <johnjohn101> amazing the thought put into perl 6 and then the unjustified crap that the community gave to it

[22:31] <johnjohn101> programming community not perl community

[22:31] <timotimo> oh, ok

[22:31] <timotimo> well, there was trouble in the perl community itself, too

[22:31] *** jjido left
[22:31] <Zoffix> Do we have a good explanation of single arg rule?

[22:31] <timotimo> people saying "perl6 made me the laughing stock of my friends" or "perl6 killed perl5" or whatever

[22:32] *** jjido joined
[22:33] *** TakinOver left
[22:34] <masak> timotimo: I think much of that is due to Perl 6 being a bigger risk-taking than most language projects, and so it's easy to laugh instead of learning about it.

[22:34] <timotimo> i really don't trust myself doing any analysis on that situation

[22:36] *** TakinOver joined
[22:36] <Zoffix> m: my $list = 1,; .say for $list, $list.WHAT

[22:36] <camelia> rakudo-moar 2126ed: OUTPUT«1␤(Int)␤»

[22:36] <johnjohn101> masak: i got the feeling they expected it done in 8 years and not any longer

[22:36] <Zoffix> m: my $list = (1,); .say for $list, $list.WHAT

[22:36] <camelia> rakudo-moar 2126ed: OUTPUT«(1)␤(List)␤»

[22:36] <timotimo> aööööööööööööööööööö

[22:36] <Zoffix> This kinda doesn't exactly match the claim that lists are created with commas: https://docs.perl6.org/language/list#Literal_Lists

[22:37] <timotimo> .......  cat on the keyboard

[22:39] <AlexDaniel> there's no video from OSCON, right?

[22:39] <timotimo> that was really recently, right?

[22:40] <AlexDaniel> yea

[22:40] <timotimo> haven't seen anything from there yet

[22:40] *** girafe left
[22:40] <jjido> m: my $list = 1,  ; say $list.WHAT

[22:40] <camelia> rakudo-moar 2126ed: OUTPUT«(Int)␤»

[22:41] <jjido> ok

[22:41] <Zoffix> jjido, are you marcel?

[22:41] <jjido> Zoffix: !!!!

[22:41] *** ocbtec joined
[22:42] <jjido> no

[22:42] <masak> timotimo: your cat kind of sounds like a fotball fan.

[22:42] <jjido> I am me

[22:42] <masak> 'night, #perl6

[22:42] <Zoffix> Denis Bredelet.

[22:42] <Zoffix> night

[22:43] *** cdg left
[22:44] *** cdg joined
[22:45] <jjido> time for zzz

[22:45] *** jjido left
[22:45] *** sufrostico left
[22:46] *** ocbtec left
[22:47] *** itaipu left
[22:47] *** itaipu joined
[22:48] *** Zoffix left
[22:49] *** cdg left
[22:49] *** sufrostico joined
[22:53] <sortiz> m: (my $f = 1,).WHAT.say; $f.WHAT.say; (my $s = 1).WHAT.say; $s.WHAT.say; # Claim proved, is matter of precedence.

[22:53] <camelia> rakudo-moar 2126ed: OUTPUT«(List)␤(Int)␤(Int)␤(Int)␤»

[23:02] *** vibha left
[23:05] *** spider-mario left
[23:10] <AlexDaniel> oh noes… don't tell me that we are going to have another womble-like thread

[23:11] *** jameslenz joined
[23:12] *** rubio left
[23:13] *** skids joined
[23:14] <AlexDaniel> https://www.youtube.com/watch?v=Nx7v815bYUw

[23:19] *** itaipu left
[23:38] *** sno joined
[23:39] *** RabidGravy left
[23:41] <BooK> Cannot iterate object with P6opaque representation # where can I find what this means?

[23:43] *** huggable left
[23:43] <AlexDaniel> BooK: well, generally it means that the error message is LTA

[23:43] <BooK> LTA?

[23:43] <AlexDaniel> Less Than Awesome

[23:44] <BooK> ok :-)

[23:46] *** wamba left
[23:49] <AlexDaniel> BooK: if you manage to reproduce it with a couple of lines then feel free to submit a bug report

[23:50] <geekosaur> or in a bit more detail, it means internals are leaking out where they shouldn't and it should at the very least be giving you a more meaningful error. it could also well indicate a bug in perl6

[23:53] <BooK> I'm writing a subclass of Version

[23:54] <BooK> before 781c6cd8f3ebc8d113b2a058ce00d4d5e1b3f917 my work in progress code "worked" (fsvo worked)

[23:54] <BooK> or at least did not throw that error

[23:55] <BooK> I should compile the relevant rakudo, I guess

