[00:00] *** AlexDaniel joined
[00:01] *** kurahaupo left
[00:02] *** jnthn left
[00:05] <gfldex> sena_kun: if we refere to JIT or JVM in the main body, we should have them in the glosary

[00:05] *** kurahaupo joined
[00:06] <sena_kun> gfldex, I'm making a fixing commit now.

[00:06] <gfldex> sena_kun: we use both term, JVM is used quite a bit

[00:08] <sena_kun> gfldex, yes, I saw it already. I should be more careful, sorry.

[00:08] <dalek> doc: 9302e6f | Altai-man++ | doc/Language/glossary.pod6:

[00:08] <dalek> doc: Accidently removed items JIT and JVM were restored

[00:08] <dalek> doc: review: https://github.com/perl6/doc/commit/9302e6f60b

[00:08] <dalek> doc: 81f35fd | (Zoffix Znet)++ | doc/Language/traps.pod6:

[00:08] <dalek> doc: Document exploding sunk Proc trap

[00:08] <dalek> doc: 

[00:08] <dalek> doc: There were a few RTs involving.

[00:08] <dalek> doc: review: https://github.com/perl6/doc/commit/81f35fd46d

[00:10] <sena_kun> Ah, we have more links to removed items. Aaaaah. Will be fixed soon...

[00:10] *** kurahaupo left
[00:11] *** kurahaupo joined
[00:14] <gfldex> sena_kun: there is `make test-links`

[00:15] *** huggable left
[00:15] *** huggable joined
[00:15] <gfldex> can I say "page break if send to printer" in html?

[00:15] <jdv79> are we sure that works cause last i looked a lot of links were bad.

[00:16] <gfldex> jdv79: it works to some degree. Not all reported links are bad tho.

[00:16] <jdv79> mostly if not all were in the fragment portion

[00:17] <sena_kun> gfldex, ah, thanks, I'll try it next time. I was a bit careless with this PR and now I'm already sorry.

[00:17] <gfldex> sena_kun: it's cool, we can fix it

[00:18] <gfldex> pod-to-bigpage produces printable output now (for LTA values of printable)

[00:19] *** jack_rabbit left
[00:23] *** zacts joined
[00:26] <dalek> doc: 712b0c6 | Altai-man++ | doc/Language/glossary.pod6:

[00:26] <dalek> doc: Fix dead links on the glossary page

[00:26] <dalek> doc: review: https://github.com/perl6/doc/commit/712b0c6dc6

[00:27] <P6fr> m: my @t = "bla blo blu".words

[00:27] <camelia> rakudo-moar d789da: ( no output )

[00:27] <P6fr> m: my @t = "bla blo blu".words.say

[00:27] <camelia> rakudo-moar d789da: OUTPUT«(bla blo blu)␤»

[00:28] <P6fr> m: my @t = "bla blo blu".words.say[0]

[00:28] <camelia> rakudo-moar d789da: OUTPUT«(bla blo blu)␤»

[00:29] <sena_kun> Okay, now it seems quite better.

[00:29] <P6fr> m: my @t = "bla blo blu".words.say;say "hello @t[0].tc;

[00:29] <camelia> rakudo-moar d789da: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in double quotes; couldn't find final '"' ␤at <tmp>:1␤------> 3 blo blu".words.say;say "hello @t[0].tc;7⏏5<EOL>␤    expecting any of:␤        method arguments␤»

[00:29] <P6fr> m: my @t = "bla blo blu".words.say;say "hello @t[0].tc";

[00:29] <camelia> rakudo-moar d789da: OUTPUT«(bla blo blu)␤hello True.tc␤»

[00:30] <P6fr> m: my @t = "bla blo blu".words.say;say "hello @t[1].tc";

[00:30] <camelia> rakudo-moar d789da: OUTPUT«(bla blo blu)␤Use of uninitialized value @t of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at <tmp> line 1␤hello .tc␤»

[00:30] <P6fr> m: my @t = "bla blo blu".words;say "hello @t[1].tc";

[00:30] <camelia> rakudo-moar d789da: OUTPUT«hello blo.tc␤»

[00:30] <P6fr> hum ?

[00:30] <P6fr> why .tc is not evalue

[00:31] <P6fr> m: my @t = "bla blo blu".words;say "hello @t.tc[0]";

[00:31] <camelia> rakudo-moar d789da: OUTPUT«hello @t.tc[0]␤»

[00:31] <gfldex> m: my @t = "bla blo blu".words;say "hello {@t[1].tc}";

[00:31] <camelia> rakudo-moar d789da: OUTPUT«hello Blo␤»

[00:31] <P6fr> haaaa

[00:31] <P6fr> thx :D

[00:31] <P6fr> i learn p6

[00:32] <P6fr> small tutorial in french

[00:32] <P6fr> no traduction :(

[00:33] <gfldex> P6fr: it may be faster to learn english then Perl 6

[00:34] <P6fr> both are languages

[00:34] <P6fr> it's the same

[00:35] <gfldex> P6fr: the printed version of docs.perl6.org is 444 pages A4. I'm quite sure you get English on less then that.

[00:36] <P6fr> maybe

[00:36] <geekosaur> you can however define a "basic perl6" aka basic English

[00:36] <geekosaur> can do quite a lot without knowing the full details of hypers, without even looking at junctions, etc.

[00:37] <unmatched}> m: my @t = "bla blo blu".words;say "hello @t[1].tc()";

[00:37] <camelia> rakudo-moar d789da: OUTPUT«hello Blo␤»

[00:38] *** colomon joined
[00:38] <unmatched}> m: my @t = "bla blo blu".words;say "hello &tc(@t[1])";

[00:38] <geekosaur> s/aka/á la/

[00:38] <camelia> rakudo-moar d789da: OUTPUT«hello Blo␤»

[00:38] <geekosaur> sheesh

[00:38] * geekosaur has had A Day

[00:39] <P6fr> This is a good exercise to learn English learning Perl. There is little documentation in French and it motivates me to go to chat , English forum.

[00:39] <geekosaur> (also the flip side: no way you describe all of English in 450 pages)

[00:41] *** RabidGravy left
[00:43] <P6fr> why &tc() "&" unmatched}  pls ?

[00:44] *** cdg_ left
[00:44] *** skids joined
[00:44] *** cdg joined
[00:46] <geekosaur> it can't recognize arbitrary expressions unless you enclose them in braces. it does recognize sigils, so & works to tell it a sub name follows

[00:49] *** cdg left
[00:49] <P6fr> m: say "hello tc(@t[0])"

[00:49] <camelia> rakudo-moar d789da: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '@t' is not declared␤at <tmp>:1␤------> 3say "hello tc(7⏏5@t[0])"␤»

[00:49] <P6fr> hum ok

[00:50] <P6fr> m: my @t = "bla blo blu".words;say "hello tc(@t[1])";

[00:50] <camelia> rakudo-moar d789da: OUTPUT«hello tc(blo)␤»

[00:50] <P6fr> ok ok

[00:50] <gfldex> P6fr: see https://docs.perl6.org/language/quoting#Interpolation:_qq

[00:52] *** sena_kun left
[00:52] <P6fr> thx :-)

[00:53] <P6fr> i don't look "&" 

[00:53] <P6fr> i search

[00:55] <P6fr> the & to force evaluation ok

[01:00] <dalek> doc: e7200ea | (Wenzel P. P. Peppmeyer)++ | doc/Language/quoting.pod6:

[01:00] <dalek> doc: doc & and subscripts in quoting constructs

[01:00] <dalek> doc: review: https://github.com/perl6/doc/commit/e7200ea6e3

[01:01] <P6fr> you use prompt and \n or, say + get ?

[01:02] *** avenj left
[01:02] <dalek> doc: f81097c | (Wenzel P. P. Peppmeyer)++ | doc/Language/quoting.pod6:

[01:02] <dalek> doc: add & interpolation to index

[01:02] <dalek> doc: review: https://github.com/perl6/doc/commit/f81097c593

[01:02] <jdv79> prompt fir stdin and say for stdout.

[01:02] <jdv79> *for

[01:03] <jdv79> most normally, perhaps

[01:03] <nebg> is there a perl equivalent of the python module called "scapy" ? 

[01:03] <jdv79> wut is that?

[01:04] <jdv79> and do you mean perl 5 or 6?

[01:04] <nebg> jdv79, both

[01:04] <P6fr> perhaps ?

[01:04] <jdv79> maybe

[01:04] <P6fr> what is it

[01:05] <P6fr> what it is sorry

[01:05] <jdv79> perhaps is just a more british way of saying maybe

[01:05] *** ccube joined
[01:05] * jdv79 is bored with maybe

[01:05] <P6fr> haaaa ok lol

[01:05] <jdv79> :)

[01:05] <jdv79> though im not british

[01:06] <ccube> where is the Compunit class documented?

[01:06] <jdv79> look in src/core/?

[01:06] <ccube> okay

[01:07] *** __zug__ joined
[01:08] *** cpage_ joined
[01:14] *** kid51 joined
[01:17] <nebg> i need a perl6  library for reading and writing packets to an interface or to a libpcap-formatted file.

[01:18] <unmatched}> P6fr: `say` is mostly for short stuff meant for humans. Use `put` to print to STDOUT. See examples of how `say` abridges large output: https://docs.perl6.org/routine/say#sub_say

[01:19] <P6fr> merci

[01:19] <unmatched}> nebg: check the ecosystem: http://modules.perl6.org/ If not there you can either write one or use a Perl 5 module (through Inline::Perl5 interop) I'm sure CPAN has something or other for that: https://metacpan.org/

[01:20] <unmatched}> De rien

[01:20] <P6fr> ok

[01:21] *** nightfrog left
[01:21] <nebg> unmatched}, ok what about raw socket programming ? is there a standard or famous module for perl6  ?

[01:22] <unmatched}> nebg: Perl 6 has those as core types. There's IO::Socket, IO::Socket::INET, IO::Socket::Async

[01:22] <unmatched}> huggable: IO::Socket::Async

[01:22] <huggable> unmatched}, Asynchronous TCP socket: https://docs.perl6.org/type/IO::Socket::Async

[01:22] *** khw joined
[01:22] <P6fr> good night !

[01:22] <unmatched}> night

[01:23] *** P6fr left
[01:23] *** nightfrog joined
[01:26] *** zacts left
[01:27] <jdv79> unmatched}: you speak french?

[01:28] *** sufrostico left
[01:34] *** ccube left
[01:35] <unmatched}> jdv79: no, but I live in Canada :) (We have dual official languages: English/French)

[01:35] <unmatched}> (some things rub off)

[01:44] *** molaf left
[01:47] <jdv79> but youre in ontario not quebec.  which is why i was confused.

[01:47] <jdv79> ok....

[01:51] *** __zug__ left
[01:53] *** __zug__ joined
[01:56] *** molaf joined
[01:56] *** colomon left
[01:58] <ShimmerFairy> question: if I have a sub C in module A::B, under what conditions can I refer to it as A::B::C? Or do I need to (perhaps redundantly) name it sub A::B::C ?

[01:59] *** zacts joined
[02:00] <unmatched}> Yeah, but all the packaging has both languages. Plus there are some bilingual people at work :)

[02:02] <unmatched}> Plus I *wanted* to learn French, as a job skill, but somehow managed to learn Perl 6 instead :P

[02:06] *** zacts left
[02:08] *** zacts joined
[02:08] <zacts> hi perl6

[02:16] *** colomon joined
[02:16] *** adu joined
[02:24] <unmatched}> \o

[02:34] *** Herby_ joined
[02:34] <Herby_> Evening, everyone!

[02:34] <Herby_> o/

[02:38] *** __zug__ left
[02:39] <dalek> ecosystem: 3c65f32 | (Wenzel P. P. Peppmeyer)++ | META.list:

[02:39] <dalek> ecosystem: add Pod::To::BigPage

[02:39] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/3c65f32c04

[02:43] *** Actualeyes left
[02:46] *** dj_goku left
[02:46] *** dj_goku_ joined
[02:46] <unmatched}> \o

[02:47] *** noganex_ joined
[02:47] <unmatched}> .tell tbrowder Not sure if it has any relevance to your table Pod work, but just thought I'd mention this old ticket I came across about =paras in tables: https://rt.perl.org/Ticket/Display.html?id=127509#ticket-history

[02:47] <yoleaux> unmatched}: I'll pass your message to tbrowder.

[02:50] *** noganex left
[02:51] *** adu left
[02:54] *** colomon left
[02:56] *** kid51 left
[02:57] *** adu joined
[02:57] <zacts> how do you organically evolve a language with a specification?

[02:58] <zacts> I think it's cool how organic Perl6 is, yet it still has a specification

[02:58] <zacts> how was / is it done?

[02:58] *** avenj joined
[02:58] *** avenj left
[02:58] *** avenj joined
[03:00] <gfldex> the spec is actually a looooong list of tests. If you want to add a feature, you write a test, implement the feature and send 2 PRs to the roast and rakudo repos

[03:02] *** rmmm left
[03:02] *** Actualeyes joined
[03:02] *** rmmm joined
[03:02] <gfldex> before rakudo there where pugs, a compiler written in heskel, and std.pm, a parser written in Perl 5.

[03:03] <gfldex> so the language formed by having something that could execute the tests in roast

[03:04] *** djbkd joined
[03:07] <gfldex> zacts: does that answer your question?

[03:08] *** kaare_ joined
[03:11] *** zacts left
[03:12] <geekosaur> well, historically that was not quite true. the language started out having a "spec" which went through several stages of development; you can see this phase at https://design.perl6.org/. The Apocalypses stated the original intentions, without going to the level of specification; the Synopses were the ultimate result and the original "spec"

[03:13] *** djbkd left
[03:13] <geekosaur> but as time went on it was decided that the actual specification would be the tests, so there would be a direct expression of whether an implementation was actually a valid Perl 6 (i.e. can it run the tests?).

[03:14] <geekosaur> partly because over time the implementations and synopses drifted apart, as people changed one but not the other

[03:14] *** djbkd joined
[03:14] <geekosaur> (historical implementations included pugs and niecza)

[03:15] * unmatched} mumbles something about the whirlpool method

[03:19] *** telex left
[03:20] *** telex joined
[03:21] *** adu left
[03:25] *** rmmm left
[03:25] <AlexDaniel> we need language/history

[03:29] *** zacts joined
[03:30] *** danaj left
[03:32] <zacts> gfldex: oh cool yes thanks

[03:32] <zacts> so the spec is the test suite kind of thing

[03:33] <zacts> reminds me of this old ruby project

[03:33] <zacts> RubySpec

[03:33] <zacts> or something

[03:35] <zacts> https://github.com/ruby/spec

[03:36] *** MasterDuke joined
[03:39] <MasterDuke> .tell AlexDaniel rough initial attempt at getting benchable to zoom the graph in on performance changes, https://github.com/MasterDuke17/bisectbot/commit/d09550fd29754e9b2e7efc258fd9f6da494a2676

[03:39] <yoleaux> MasterDuke: I'll pass your message to AlexDaniel.

[03:40] <AlexDaniel> .

[03:40] <yoleaux> 03:39Z <MasterDuke> AlexDaniel: rough initial attempt at getting benchable to zoom the graph in on performance changes, https://github.com/MasterDuke17/bisectbot/commit/d09550fd29754e9b2e7efc258fd9f6da494a2676

[03:42] *** roguelazer joined
[03:42] *** khw left
[03:46] *** cyphase left
[03:47] <AlexDaniel> MasterDuke: cool!

[03:49] *** dvinciguerra_ joined
[03:51] *** cyphase joined
[03:53] <MasterDuke> AlexDaniel: it's a little difficult to test without having all the builds (and i'm on my laptop now so definitely not going to build them), so any testing would be much appreciated

[03:53] <AlexDaniel> sure

[03:55] <zacts> gfldex: do the specs auto generate the doc via Perl6 POD or something?

[03:56] <parabolize> zacts: docs source is here: https://github.com/perl6/doc it has a Makefile

[03:56] <AlexDaniel> MasterDuke: oh! git rev-list --bisect

[03:56] <AlexDaniel> MasterDuke: I didn't know that

[03:56] <MasterDuke> just found out about it myself yesterday

[03:57] <zacts> cool thanks

[03:57] <parabolize> zacts: some of the tests in roast do have pods but I think they were used for design.perl.org rather than the docs

[04:00] *** jack_rabbit joined
[04:00] *** edenc left
[04:00] *** mohae_ joined
[04:01] *** dvinciguerra_ left
[04:03] *** mohae left
[04:07] <AlexDaniel> MasterDuke: testing on #whateverable

[04:07] *** holyghost joined
[04:08] *** araujo_ left
[04:12] *** addison left
[04:13] *** MasterDuke left
[04:15] *** huggable left
[04:15] *** huggable joined
[04:15] *** roguelazer left
[04:20] *** MasterDuke joined
[04:28] *** cpage_ left
[04:29] *** cpage_ joined
[04:29] *** Herby_ left
[04:30] *** MasterDuke left
[04:40] *** canopus left
[04:45] *** canopus joined
[04:47] *** tom99 joined
[04:49] *** molaf left
[04:50] *** cpage_ left
[04:51] <tom99> hey, does anybody know if perl6 is faster better or cleaner than perl5?

[04:51] *** djbkd left
[04:52] <parabolize> no, maybe, yes

[04:53] *** Cabanossi left
[04:54] <tom99> ok

[04:55] *** Cabanossi joined
[04:58] <tom99> i read a long post from larry wall about why perl6 is so awesome

[04:58] <tom99> but most of it went over my head

[05:00] <zhmylove> tom99: just like a perl6 cache :)

[05:01] *** zacts left
[05:01] <zhmylove> tom99: and at the current time perl6 is much more slower than perl5. But p6 has a lot of kind features. 

[05:06] *** flaviusb joined
[05:18] *** danaj joined
[05:20] *** zacts joined
[05:23] *** cpage_ joined
[05:26] *** skids left
[05:39] *** AlexDaniel left
[05:57] *** ufobat joined
[05:57] <ufobat> good morning :-)

[06:03] *** mohae joined
[06:05] *** mohae_ left
[06:07] *** flaviusb left
[06:07] *** cooper_ joined
[06:07] *** cooper_ left
[06:07] *** cooper_ joined
[06:07] *** cog__ joined
[06:09] *** kevina left
[06:10] *** cooper left
[06:10] *** cog_ left
[06:12] *** wamba joined
[06:43] *** labster left
[06:45] *** domidumont joined
[06:46] <moritz> \o

[06:50] <tom99> moritz

[06:50] <tom99> what's  up

[06:50] *** labster joined
[06:52] *** domidumont left
[06:56] <timotimo> o/

[06:59] *** firstdayonthejob joined
[07:02] *** zacts left
[07:04] *** domidumont joined
[07:06] *** domidumont left
[07:07] *** domidumont joined
[07:09] *** jack_rabbit left
[07:14] *** darutoko joined
[07:17] *** jack_rabbit joined
[07:18] *** kurahaupo left
[07:25] *** CIAvash joined
[07:26] *** zacts joined
[07:36] *** cooper_ is now known as cooper

[07:51] *** holyghost left
[07:54] <DrForr> perlpilot: It's not there due to not being ready for primetime, though I might add it tonight.

[07:55] *** dakkar joined
[07:55] *** abraxxa joined
[07:56] <timotimo> Prancer?

[07:56] <DrForr> Nod.

[08:04] *** tom99 left
[08:10] *** Upasaka joined
[08:11] *** rafl left
[08:11] *** nebuchad` joined
[08:11] *** yoleaux joined
[08:11] *** ChanServ sets mode: +v yoleaux

[08:12] *** Upasaka_ left
[08:12] *** cxreg left
[08:12] *** Cabanossi left
[08:12] *** remmie left
[08:12] *** nebuchadnezzar left
[08:12] *** akiym left
[08:12] *** [ptc] left
[08:12] *** skarn left
[08:12] *** rjbs joined
[08:12] *** atta joined
[08:13] *** akiym joined
[08:13] *** cxreg joined
[08:13] *** leedo joined
[08:14] *** rafl joined
[08:14] *** skarn joined
[08:14] *** susmus joined
[08:14] *** remmie joined
[08:14] *** Cabanossi joined
[08:15] *** huggable left
[08:15] *** huggable joined
[08:16] *** M-Illandan left
[08:17] *** [Coke] joined
[08:19] *** jack_rabbit left
[08:19] *** [ptc] joined
[08:20] *** rindolf joined
[08:21] *** nebuchad` is now known as nebuchadnezzar

[08:22] *** M-Illandan joined
[08:23] <sjn> Good *, #perl6 :)

[08:25] <DrForr> 'allo!

[08:26] *** Actualeyes left
[08:27] *** jack_rabbit joined
[08:41] *** Actualeyes joined
[08:47] *** zacts left
[08:48] *** jack_rabbit left
[08:53] <DrForr> I'm sure there's at least one module we're distributing with rakudo - Can someone name one for my test suite?

[08:54] *** RabidGravy joined
[08:54] *** jnthn joined
[08:55] *** smash joined
[08:56] *** cyphase left
[08:56] <psch> DrForr: Test?

[08:57] <DrForr> Ah, thanks. brain was seized there for a moment.

[08:57] <DrForr> Ironic considering I'm writing grammar tests :)

[08:58] *** dogbert17 left
[09:01] *** cyphase joined
[09:06] *** zacts joined
[09:08] *** Amnez777 left
[09:15] <nine> DrForr: There's also NativeCall and its submodules and CompUnit::Repository::Staging as a recent addition.

[09:16] <DrForr> 'Test' will do. I don't need it to have a stable interface, I just need something that I can rely on to be in the core distro.

[09:17] <DrForr> The parser still dynamically loads modules, so when testing 'use Module::Name' I need one that exists in core. The API isn't important.

[09:21] *** Roamer` joined
[09:30] *** richi235 joined
[09:49] *** CIAvash left
[10:02] *** cognominal joined
[10:03] *** cog__ left
[10:10] *** TEttinger left
[10:18] *** labster left
[10:28] *** grondilu joined
[10:28] *** iH2O joined
[10:28] <grondilu> hello from my vacations :-)

[10:30] <DrForr> Why are you online then? :)

[10:30] <iH2O> u in vacations on the Cayman islands' beach with 2 mistress and a glass of rum

[10:31] <iH2O> mistresses

[10:32] <grondilu> just wanted to give my phone IRC client a try.  Also, slightly bored.  weather getting better though

[10:32] <grondilu> will probably head to swimming pool. 

[10:34] <iH2O> beware sharks

[10:35] <unmatched}> zhmylove: saying Perl 6 is "much slower" than Perl 5 is not a great thing to tell people. It's not true in many cases, but worst of all it doesn't tell people *why* they can notice slower performance or what we're doing about it. It's best to link to the FAQ entry for such questions: https://docs.perl6.org/language/faq.html#Is_Perl_6_fast_enough_for_me?

[10:35] <grondilu> there are sharks in the Reunion island where I usually go but this year I'm near Arcachon, France.

[10:36] <unmatched}> We've nearly doubled the speed since April and the gains are even more extreme since Christmas. "much slower" doesn't capture the entire picture.

[10:36] <iH2O> hmm. is there a "goto" now?

[10:36] <unmatched}> no

[10:37] <iH2O> :(

[10:37] <iH2O> why is it that difficult to implement?

[10:37] <grondilu> do we have some kind of an "official" performance test bench?

[10:37] <unmatched}> What makes you think that's the reason for it not being in Perl 6?

[10:37] <iH2O> O_O

[10:37] <iH2O> im puzzled

[10:38] <iH2O> is that a conspiracy :-P

[10:38] <iH2O> an anti-goto conspiracy

[10:38] <unmatched}> grondilu: Tux regularly runs tests. There's a link to nice charts and everything, but I forget what it is.

[10:38] <DrForr> iH2O: Just because it's not been done yet doesn't mean it's hard/impossible. There are many things that aren't done.

[10:40] <iH2O> goto is the scapegoat of all evil

[10:40] * grondilu looked at ROADMAP A

[10:40] <grondilu> and noticed it's kind of old

[10:40] <unmatched}> grondilu: the link to nice charts was posted on one of the recent weeklies or you can search the #perl6-dev IRC logs for "test-t". Since April the bench went from ~12 seconds to below 8

[10:40] <grondilu> 2015-09-27

[10:41] <grondilu> sorry 2015-07-26

[10:42] <jnthn> goto in Perl 6 is challenging because it involves non-local control flow, fwiw. :)

[10:42] *** grondilu left
[10:42] <iH2O> esp when you jump into the middle of a for loop

[10:43] <iH2O> or into the middle of foreign code :-P

[10:43] <psch> yeah, the bits of our CX handling i'm starting to understand makes me think goto is somewhat terrifying

[10:43] <psch> iH2O: well, you'd probably need a label there already to jump to it

[10:43] *** grondilu joined
[10:43] *** grondilu left
[10:47] <iH2O> C has longjmp/setjmp which are more general than goto

[10:47] <iH2O> ive never heard of anybody using that, not even in a lifetime

[10:48] *** AlexDaniel joined
[10:49] <jast> I believe it's often used for implementing coroutines

[10:50] <jnthn> It's used in MoarVM :)

[10:50] *** domm left
[10:50] <DrForr> Continuation-based servers in general as well.

[10:51] <iH2O> i stand corrected...

[10:51] <dalek> perl6.org: c95d631 | (Steve Mynott)++ | source/ (2 files):

[10:51] <dalek> perl6.org: bump Rakudo Star to 2016.07

[10:51] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/c95d631455

[10:52] *** domm joined
[10:53] *** hanekomu joined
[10:59] *** AlexDaniel left
[11:00] <Psy-Q> hmm

[11:00] <Psy-Q> i think perl6 will at some point reach self-awareness and usher in the singularity

[11:04] *** cpage_ left
[11:05] *** jgrabber joined
[11:11] <stmuk> http://rakudo.org/2016/07/22/announce-rakudo-star-release-2016-07/

[11:12] <iH2O> i just downloaded it

[11:14] <iH2O> perl6 has huge potential once it ushers into the noncult

[11:15] *** AlexDaniel joined
[11:16] <unmatched}> weeeeee \o/ stmuck++

[11:16] <unmatched}> I encourage everyone to advertise the new release all over the place.

[11:17] <unmatched}> Will anyone be posting an announcement on blogs.perl.org? 

[11:24] <iH2O> why dont u folks use xz instead of gz for rakudo star distribution

[11:24] <unmatched}> I can do it. Just don't want to double-post if someone already is. It's a pretty trafficed blog

[11:24] <iH2O> it compresses 25%_ beter

[11:25] <Psy-Q> weekend project will be porting a script from bash to perl6 that you can use to stream from a swiss "cloud TV service" 

[11:25] <stmuk> unmatched: more publicity the better! please do

[11:25] <unmatched}> Sweet. Will do.

[11:25] <Psy-Q> i'll find out everything about spawning and controlling processes, i guess

[11:26] *** adu joined
[11:29] *** adu left
[11:29] *** Guest66 joined
[11:35] *** AlexDaniel left
[11:36] <stmuk> https://www.reddit.com/r/perl/comments/4u2buv/announce_rakudo_star_release_201607/

[11:39] *** kid51 joined
[11:41] *** Guest66 is now known as P6fr

[11:44] <P6fr> m: my $i = 1; my $var = "name"~$i; my $$var = "toto1"; say "$name1";

[11:44] <camelia> rakudo-moar d789da: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Cannot declare a variable by indirect name (use a hash instead?)␤at <tmp>:1␤------> 3my $i = 1; my $var = "name"~$i; my $7⏏5$var = "toto1"; say "$name1";␤»

[11:45] <P6fr> ?

[11:45] <P6fr> m: my $i = 1; my $var = "name"~$i; my &$var = "toto1"; say "$name1";

[11:45] <camelia> rakudo-moar d789da: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Cannot declare a variable by indirect name (use a hash instead?)␤at <tmp>:1␤------> 3my $i = 1; my $var = "name"~$i; my &7⏏5$var = "toto1"; say "$name1";␤»

[11:48] <jnthn> Like the error says, you can't declare a variable with a dynamic name in Perl 6.

[11:48] <jnthn> You can access existing variables by name using ::(...)

[11:49] <jnthn> m: my $x1 = 42; my $x2 = 99; say ::('$x' ~ <1 2>.pick) for ^5

[11:49] <camelia> rakudo-moar d789da: OUTPUT«99␤99␤99␤99␤99␤»

[11:49] <jnthn> What're the odds...

[11:49] <jnthn> m: my $x1 = 42; my $x2 = 99; say ::('$x' ~ <1 2>.pick) for ^5

[11:49] <camelia> rakudo-moar d789da: OUTPUT«99␤99␤42␤99␤99␤»

[11:49] <jnthn> heh :)

[11:49] * jnthn goes out to buy a lottery ticket :P

[11:49] <psch> m: my $x; BEGIN $x = "foo"; sub term:[$x] is rw { $ }; foo = "bar"; say foo 

[11:49] <P6fr> hello jnthn  :)

[11:49] <camelia> rakudo-moar d789da: OUTPUT«WARNINGS for <tmp>:␤Useless use of $x in sink context (lines 1, 1)␤bar␤»

[11:49] <P6fr> :: ?

[11:50] <psch> the sink warning is kinda wrong i guess

[11:50] <jnthn> psch: Decidedly.

[11:50] <jast> I know what the odds are! :P

[11:50] <jnthn> Reminds of you :: in packages

[11:51] <P6fr> ok

[11:53] <jnthn> In general though, Perl 6 really wants to know what is in a lexical scope at compile time. It uses this for a bunch of error checking and optimization.

[11:54] <P6fr> m: my $i = 1; my $name1 = bla; say ::('$name'~'$i')

[11:54] <camelia> rakudo-moar d789da: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    bla used at line 1␤␤»

[11:55] <P6fr> m: my $i = 1; my $name1 = bla; say ::("$name"~"$i")

[11:55] <camelia> rakudo-moar d789da: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$name' is not declared. Did you mean '$name1'?␤at <tmp>:1␤------> 3my $i = 1; my $name1 = bla; say ::("7⏏5$name"~"$i")␤»

[11:55] <jnthn> You need single quotes, otherwise $name will try to be interpolated in the double quotes

[11:56] <P6fr> m: my $i = 1; my $name1 = bla; say ::('&$name'~'$i')

[11:56] <camelia> rakudo-moar d789da: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    bla used at line 1␤␤»

[11:56] <P6fr> ok

[11:57] *** alberg joined
[11:57] <P6fr> m: my $i = 1; my $name1 = bla; say ::({'$name'~'$i'})

[11:57] <camelia> rakudo-moar d789da: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    bla used at line 1␤␤»

[11:58] *** iH2O left
[11:59] <P6fr> m: my $i = 1; my $name1 = bla; say ::("$name$i")

[11:59] <camelia> rakudo-moar d789da: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$name' is not declared. Did you mean '$name1'?␤at <tmp>:1␤------> 3my $i = 1; my $name1 = bla; say ::("7⏏5$name$i")␤»

[11:59] <P6fr> ok

[11:59] <P6fr> hum

[11:59] <P6fr> It must be a possibility

[11:59] <jnthn> m: my $i = 1; my $name1 = 'bla'; say ::('$name'~'$i')

[11:59] <camelia> rakudo-moar d789da: OUTPUT«No such symbol '$name$i'␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[12:00] <jnthn> m: my $i = 1; my $name1 = 'bla'; say ::('$name'~$i)

[12:00] <camelia> rakudo-moar d789da: OUTPUT«bla␤»

[12:00] <P6fr> haaaa yes im stupid

[12:00] <P6fr> thx 

[12:00] <jnthn> np

[12:00] <jnthn> lunch &

[12:01] <P6fr> im going to work

[12:01] <P6fr> (i leave in france)

[12:01] <P6fr> i live :(

[12:02] <RabidGravy> :)

[12:02] <P6fr> good day !

[12:02] <RabidGravy> I'm sitting on the sofa wondering which of the squillion un-finished modules I should work on

[12:03] <RabidGravy> I need the world to become more boring for a week or two

[12:03] *** P6fr left
[12:04] *** DrForr joined
[12:08] *** alberg left
[12:08] <[Coke]> jdv79: sri ran himself out here. Calm down.

[12:10] <[Coke]> I chatted with him after he left. I got the impression, no hard feelings, he just didn't want to talk about perl 6 anymore.

[12:15] *** huggable left
[12:15] *** huggable joined
[12:15] <[Coke]> (the calm down being aimed at you from HOURS ago so of course no longer relevant! whoops)

[12:17] *** adu joined
[12:17] <unmatched}> posted release announcement on blogs.perl.org http://blogs.perl.org/users/zoffix_znet/2016/07/announce-rakudo-star-perl-6-compiler-distribution-release-201607.html

[12:21] <nine> ShimmerFairy: the sub must be our scoped (defaults to my)

[12:22] <ShimmerFairy> ah, thanks :)

[12:22] <ufobat> hi [Coke] :)

[12:23] <ufobat> [Coke], i guess you were right, the v6.c was in it because of supporting old versions

[12:24] <ufobat> is it a good idea just to have "latest" in it?

[12:27] <gfldex> unmatched}: perl6.org needs to be updated with release info as well

[12:27] <unmatched}> unmatched}: at which place?

[12:28] *** abraxxa left
[12:28] <gfldex> unmatched}: Home the box at the top links to 2016.04

[12:29] <nine> 2016.04? That's ancient!

[12:29] <hahainternet> can you smartmatch against a seq? maybe I'm doing something dumb

[12:29] <hahainternet> but wanted to do for example 1024 ~~ 1,2,4,8...*

[12:29] <unmatched}> gfldex: which box at the top? On the homepage? Links to .07 for me.

[12:29] <Psy-Q> a friend asked how suitable perl 6 might be for larger-scale projects with multiple authors. i said "surely no less suited than perl 5 was", but i'm thinking it's surely better-suited/

[12:29] <Psy-Q> that sentence was supposed to end with "?"

[12:30] <hahainternet> Psy-Q: it's got strong typing, so significantly better suited

[12:30] <gfldex> unmatched}: i just hit the reload button and it's fine. sorry for the confusion

[12:30] <hahainternet> (it also permits traits instead of monkey patching, so SIGNIFICANTLY better)

[12:30] <unmatched}> No problem.

[12:30] <Psy-Q> hahainternet: awesome, i'll tell him. he likes strongly typed languages :D

[12:30] <gfldex> hahainternet: you may have to Junction the Seq

[12:30] <hahainternet> gfldex: aaah of course

[12:31] <psch> why not just (elem)?

[12:31] <psch> m: my @a = ^10; my $seq = Seq.new(@a.iterator); say 5 (elem) $seq

[12:31] <camelia> rakudo-moar d789da: OUTPUT«True␤»

[12:31] <hahainternet> interesting, i'm rebuilding rakudo atm so can't test

[12:31] <moritz> m: say 5 (elem) ^10

[12:31] <camelia> rakudo-moar d789da: OUTPUT«True␤»

[12:31] * psch was just being overly explicit about the Seq

[12:32] <moritz> m: say 5 (elem) (^10).seq

[12:32] <camelia> rakudo-moar d789da: OUTPUT«Method 'seq' not found for invocant of class 'Range'␤  in block <unit> at <tmp> line 1␤␤»

[12:32] <moritz> m: say 5 (elem) (^10).Seq

[12:32] <camelia> rakudo-moar d789da: OUTPUT«Method 'Seq' not found for invocant of class 'Range'␤  in block <unit> at <tmp> line 1␤␤»

[12:33] <hahainternet> hmm, all i get is (...) output when combined with the sequence construct stuff

[12:33] *** Jonis joined
[12:33] <hahainternet> still building new version though and I might be doing something idiotic

[12:33] <unmatched}> m: say -Inf...Inf

[12:33] <camelia> rakudo-moar d789da: OUTPUT«(...)␤»

[12:33] <unmatched}> m: say 4...5

[12:33] <camelia> rakudo-moar d789da: OUTPUT«(4 5)␤»

[12:33] <hahainternet> i guess you can't smartmatch against a non terminating sequence?

[12:33] <hahainternet> i thought that was a 'range' though

[12:34] *** kid51 left
[12:34] <unmatched}> m: say 5 (elem) 1...Inf

[12:34] <camelia> rakudo-moar d789da: OUTPUT«(...)␤»

[12:34] <unmatched}> Interesting

[12:34] <unmatched}> m: say 5 (elem) (1...Inf)

[12:34] <psch> m: my $s = 1, 2, 4 ... *; say 8 (elem) eager $s # heh

[12:34] <camelia> rakudo-moar d789da: OUTPUT«(signal SEGV)»

[12:34] <camelia> rakudo-moar d789da: OUTPUT«(timeout)»

[12:34] <unmatched}> m: say 5 (elem) (1...Inf)

[12:35] <psch> the SEGV was mine

[12:35] <unmatched}> Ah

[12:35] <camelia> rakudo-moar d789da: OUTPUT«(timeout)»

[12:36] <unmatched}> hahainternet: it's a bit of a strange construct you got there. Effectivly, you're asking for a Yes or No answer, where a No answer leads to your program hanging.

[12:36] <psch> m: my $s = 1, 2, 4 ... *; say eager $s 

[12:36] <camelia> rakudo-moar d789da: OUTPUT«(signal SEGV)»

[12:36] <psch> neat

[12:36] <psch> j: my $s = 1, 2, 4 ... *; say eager $s 

[12:36] <hahainternet> unmatched}: indeed, but there are cases where it'd be detectable

[12:36] <hahainternet> so for example 3 (elem) 1,2,4...*

[12:36] *** jfuller joined
[12:36] <camelia> rakudo-jvm cd19db: OUTPUT«␤(timeout)␤»

[12:37] <hahainternet> sequence only increases, and 2 < 3 < 4

[12:37] <hahainternet> ah well

[12:37] <psch> well, yeah, with some introspection that could probably work

[12:37] <psch> the last one

[12:37] <hahainternet> i wonder how the subset works because i thought you could define an infinite subset

[12:37] <hahainternet> maybe not

[12:37] <psch> as in, when we know we have a derived generator function

[12:37] <hahainternet> i appreciate there's an awful lot of complexity hre

[12:37] <jast> if you start adding magic like that, you run the risk that you won't always be sure whether it terminates. not a good thing to abstract away...

[12:38] <hahainternet> indeed, and it's not a dumb idea to terminate these seqs

[12:38] <unmatched}> m: say 1, 2, 4 ... * < 10

[12:38] <camelia> rakudo-moar d789da: OUTPUT«(1)␤»

[12:38] <unmatched}> m: say (1, 2, 4 ... * < 10)

[12:38] <camelia> rakudo-moar d789da: OUTPUT«(1)␤»

[12:38] *** mcmillhj joined
[12:38] <unmatched}> huh

[12:38] <hahainternet> what i was trying to say is "is this value a common power of 2"

[12:38] *** colomon joined
[12:38] <hahainternet> which i can do by just limiting the seq to pow(2,64)

[12:39] <unmatched}> hahainternet: isn't using logarithms a much better approach than generating a possibly huge sec?

[12:40] <hahainternet> unmatched}: in terms of performance, sure

[12:40] <hahainternet> in terms of succinct description? lol no

[12:40] <hahainternet> if you're using Perl 6 for performance you've probably lost already :)

[12:40] <unmatched}> m: sub p { log($^a)/log(2) %% 1 }; say p $_ for 4, 3, 256, 128, 42

[12:40] <camelia> rakudo-moar d789da: OUTPUT«True␤False␤True␤True␤False␤»

[12:41] <unmatched}> There's a shorter way to write that too. I forget the function name.

[12:41] <hahainternet> probably logdivmodthing :p

[12:41] <hahainternet> but no it's fine, i know what i chose was inefficient

[12:42] <psch> i'd prefer that function with a meaningful name (and maybe a line of doc) to generating a Seq, i think

[12:42] <unmatched}> OK :)

[12:42] <hahainternet> but i want to understand the limits of expression in p6

[12:42] <psch> also, if you have an infinite lazy Seq you have to partition parts of it anyway, which blows up your "succint" way of checking for membership

[12:43] <hahainternet> well $a (elem) @b is very very succinct

[12:43] <hahainternet> so i was just playing with that concept

[12:44] <jnthn> unmatched}: polymod maybe?

[12:45] *** adu left
[12:45] *** jfuller left
[12:45] <unmatched}> Nah, still log, but in method form:

[12:45] <unmatched}> m: sub p { $^a.log(2) %% 1 }; say p $_ for 4, 3, 256, 128, 42

[12:45] <camelia> rakudo-moar d789da: OUTPUT«True␤False␤True␤True␤False␤»

[12:46] <psch> hahainternet: right, but you have to do something like "my @part-of-b = @b[$low...$high]; $a (elem) @part-of-b; ($low,$high) [X+]= $high + 1, $high - $low" instead, if you want to be able to bail

[12:46] <unmatched}> Well.. with additional argument I guess, 'cuase this works too

[12:46] <unmatched}> m: sub p { log($^a,2) %% 1 }; say p $_ for 4, 3, 256, 128, 42

[12:46] <camelia> rakudo-moar d789da: OUTPUT«True␤False␤True␤True␤False␤»

[12:47] <psch> well, minus little arithmetic error i made there :P

[12:47] <psch> +the

[12:47] <hahainternet> psch: no i don't disagree at all

[12:47] <hahainternet> i'm not saying that what i wanted was smart or good

[12:47] <hahainternet> was just playing about :)

[12:48] <psch> i didn't think you were disagreeing, just wanted to elaborate how i'd do this if i was bend on using (elem) against a Seq :)

[12:49] <hahainternet> :)

[12:49] <hahainternet> yeah that is the better way to do it for sure

[12:49] <hahainternet> < 8 mins to build rakudo on slow machine still

[12:49] <hahainternet> very nice

[12:49] *** colomon left
[12:49] <hahainternet> going to be hilarious when i replace this machine with some intel extreme edition processor

[12:49] *** Sgeo left
[12:49] *** hanwei_ joined
[12:50] <unmatched}> It'd likely won't improve much :) 

[12:50] <psch> also, can i just say i really dig how [] grouping allows messing with metaop assign

[12:50] <hahainternet> unmatched}: lets check on a 3770k a little bit overclocked

[12:51] <hahainternet> with a moderate root ssd, only an 850 pro or so

[12:51] <psch> like the [X+]= above, or [R//]= which is just awesome

[12:51] <hahainternet> ooh, R//?

[12:51] <hahainternet> roll up defined? something like that?

[12:51] <unmatched}> Reverse

[12:51] <psch> R is metaop reverse

[12:51] <hahainternet> aaah

[12:52] *** colomon joined
[12:52] *** sufrostico joined
[12:52] *** hanwei_ left
[12:52] <psch> m: my $x = "foo"; my $b; $x [R//]= $b; say $x; $b = "bar"; $x [R//]= $b; say $x

[12:52] <camelia> rakudo-moar d789da: OUTPUT«foo␤bar␤»

[12:52] <psch> that's just great imo

[12:53] <psch> equivalent to '$x = $b // $x', which is a thing that damian wanted in his talk iirc

[12:53] <psch> although i totally get not throwing [R//]= at people that want to learn why they might want to learn Perl 6 :

[12:53] <psch> :)

[12:53] <unmatched}> :D

[12:54] <unmatched}> m: sub infix:<♥> { $^a ~ $^b }; say [R♥] 'Perl 6', 'Love ';

[12:54] <camelia> rakudo-moar d789da: OUTPUT«Love Perl 6␤»

[12:54] <unmatched}> ^_^

[12:55] <unmatched}> m: sub infix:<♥> { $^a ~ $^b }; say [RRRRR♥] 'Perl 6', 'Love ';

[12:55] <camelia> rakudo-moar d789da: OUTPUT«Love Perl 6␤»

[12:55] <DrForr> Incidentally the test suite parses the infix:<♥> construct.

[12:56] <unmatched}> I don't see it

[12:57] <unmatched}> Everything that shows up for grep -R '♥' https://gist.github.com/zoffixznet/52728fa072f7ceca1fd5aeba7c6e96e5

[12:58] <psch> m: say "Perl 6" R[&({ [R[&infix:<~>]] $^b, " ", $^a })] "Love"

[12:58] <camelia> rakudo-moar d789da: OUTPUT«Love Perl 6␤»

[12:58] <unmatched}> :D

[12:58] <unmatched}> psch++ 

[12:59] <psch> m: [R[&say]] "Perl 6" R[&({ [R[&infix:<~>]] $^b, " ", $^a })] "Love" # why stop there?!

[12:59] <camelia> rakudo-moar d789da: OUTPUT«Love Perl 6␤»

[13:00] <parabolize> how do you uninstall a old version of a module with zef? `zef uninstall "DBIish:ver('0.5.8')"` is giving me a error

[13:01] <dalek> doc: 968bad5 | (Wenzel P. P. Peppmeyer)++ | META.info:

[13:01] <dalek> doc: add Pod::To::BigPage as dependency

[13:01] <dalek> doc: review: https://github.com/perl6/doc/commit/968bad5a72

[13:01] *** Actualeyes left
[13:01] <hahainternet> 2 min 56 secs

[13:01] <hahainternet> to build moar

[13:01] <hahainternet> on an actual machine that's fast

[13:02] *** sufrostico left
[13:02] <jnthn> Rakudo moar or just MoarVM itself?

[13:05] *** molaf joined
[13:06] <nine> Sounds very much like a full rakudo to me

[13:12] *** lucasb_ joined
[13:13] <lucasb_> hello o/

[13:13] <DrForr> Aftenoon.

[13:14] <lucasb_> I think I may have found a segfault, but it only works in the REPL

[13:14] <lucasb_> can someone confirm it for me?

[13:14] <lucasb_> type this in the standard REPL:

[13:14] <lucasb_> "abc".starts-with(42 does role { method Str { 42 } })

[13:15] <psch> heh

[13:16] <psch> a .Str that returns an Int is a neat infloop i suppose

[13:16] <psch> although, yeah, that should just eat all your mem and not segfault

[13:16] <unmatched}> m: "abc".starts-with(42 does role { method Str { 42 } })

[13:16] <camelia> rakudo-moar d789da: OUTPUT«Memory allocation failed; could not allocate 81920 bytes␤»

[13:16] <lucasb_> psch: so it does segfault in your repl too?

[13:17] * unmatched} doesn't wanna try :)

[13:17] *** Actualeyes joined
[13:17] <psch> i don't have moar build actually

[13:17] <psch> i usually don't build it at all vOv

[13:17] <perlpilot> lucasb_: how long does it take to segfault?

[13:17] <lucasb_> perlpilot: instantly

[13:17] <unmatched}> I actually get "This type cannot unbox to a native string: P6opaque, Int+{<anon|90832064>}"

[13:17] <unmatched}> 2016.06-10-g7cff429 built on MoarVM version 2016.06

[13:17] <lucasb_> if its not the repl, then it seems too consumes lots of memory, then I kill it

[13:17] <perlpilot> lucasb_: it does not do that for me.   It sits there doing nothing.

[13:18] <perlpilot> This is Rakudo version 2016.07.1-23-gb519088 built on MoarVM version 2016.07-3-gc01472d

[13:18] <lucasb_> perlpilot: ok, thanks for testing :)

[13:18] <unmatched}> Sits there doing nothing for me on 2016.07.1-12-g58dc8c6 built on MoarVM version 2016.07 too

[13:18] <lucasb_> This is Rakudo version 2016.07 built on MoarVM version 2016.07

[13:20] <perlpilot> and, yes, it's slowly eating all my RAM  :)

[13:20] <lucasb_> anyway... I was justing testing that a subroutine signature of 'sub f(A(B) $x)' actually enforced that the argument was of type of A, but it doesn't seems to enforce it

[13:21] <lucasb_> I mean, method A in class B can return whatever it wants... no need to be type of A

[13:21] <psch> how did you conclude that if the snippet dies?

[13:21] <lucasb_> psch: that was another snippet... let me paste something here :)

[13:22] <psch> oh, sure

[13:23] <lucasb_> m: class C { method Int { 'oh hai' } }; sub f(Int(C) $x) { say $x.WHAT }; f(C.new)

[13:23] <camelia> rakudo-moar d789da: OUTPUT«(Str)␤»

[13:23] <dalek> doc: 0676896 | (Wenzel P. P. Peppmeyer)++ | META.info:

[13:23] <dalek> doc: put dependency in the right spot

[13:23] <dalek> doc: review: https://github.com/perl6/doc/commit/067689695e

[13:23] <psch> ah, neat

[13:24] <psch> i suppose that's a bit too trusting in implementation :)

[13:24] <psch> i mean, i too would generally trust that coercer methods actually coerce to the type they are named after, but the language probably should check

[13:25] <gfldex> is the type check in :(Str $s) calling ACCEPTS?

[13:25] <psch> gfldex: no, it's (eventually) doing nqp::istype()

[13:26] <psch> gfldex: the (moar) Binder sits in src/Perl6/Metamodel/BOOTSTRAP.nqp, bind_one_param the specific function to look at here

[13:26] <lucasb_> yeah, idk if it's clear if it should enforce or not (i.e., it's programmer problem, not a compiler problem). Just like in Ruby, when classes define a 'to_s' method that doesn't return strings

[13:26] <perlpilot> lucasb_: good bug find.

[13:26] <perlpilot> lucasb_: It should enforce.

[13:26] <psch> lucasb_: the Binder definitely should enforce it

[13:27] <psch> lucasb_: i don't think we can enforce the return type of overwritten methods though :)

[13:27] <psch> so forcing people to only write "method Int" that actually returns Int is probably out (in sensible ways at least)

[13:27] <gfldex> m: class C { method Int { Nil } }; sub f(Int(C) $x) { say $x.WHAT }; f(C.new)

[13:27] <camelia> rakudo-moar d789da: OUTPUT«Nil␤»

[13:27] <gfldex> what should happen in that case?

[13:28] <perlpilot> Or ... from S02:590:  The type outside the parens indicates the desired end result, and subsequent code may depend on it being that type.

[13:28] <synopsebot6> Link: http://design.perl6.org/S02.html#line_590

[13:28] <psch> m: sub f(Int $) { }; f Nil

[13:28] <camelia> rakudo-moar d789da: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Calling f(Nil) will never work with declared signature (Int)␤at <tmp>:1␤------> 3sub f(Int $) { }; 7⏏5f Nil␤»

[13:28] <perlpilot> (yes, I know those are specifications, but they are the design from which the spec sprung)

[13:28] <gfldex> some elaborate coercion may have no choice but return Nul

[13:28] <psch> m: say Nil.isa(Int)

[13:28] <camelia> rakudo-moar d789da: OUTPUT«False␤»

[13:29] <psch> gfldex: so it's a dispatch failure, just like now?

[13:29] *** nightfrog left
[13:29] *** nightfrog joined
[13:31] <gfldex> as long as the run time error can be caught with try, it can be handled i guess

[13:31] <psch> m: sub f(Int $) { }; try f Nil

[13:31] <camelia> rakudo-moar b89bf9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Calling f(Nil) will never work with declared signature (Int)␤at <tmp>:1␤------> 3sub f(Int $) { }; try 7⏏5f Nil␤»

[13:31] <psch> it's a compile time error

[13:31] *** hanwei_ joined
[13:31] *** hanwei_ left
[13:31] <gfldex> in that case, but may not be in the coercion type case

[13:32] *** hanwei_ joined
[13:32] *** hanwei_ left
[13:32] <psch> right, that depends on what the coercion method declares as return type

[13:32] *** hanwei_ joined
[13:32] *** hanwei_ left
[13:32] <psch> i'm not really able of thinking of a case where something might sometimes be coerceable but not always

[13:33] *** hanwei_ joined
[13:33] *** hanwei_ left
[13:33] <psch> i also wonder if that shouldn't be handled by the coercer itself, which would let this die before the binder

[13:33] <gfldex> m: sub f(-->Str){ Nil }; say f;

[13:33] <camelia> rakudo-moar b89bf9: OUTPUT«Nil␤»

[13:34] *** hanwei_ joined
[13:34] *** hanwei_ left
[13:34] <gfldex> you never know what some foreign code will return

[13:35] <psch> right, which is why it should be handled as soon as possible, which would probably not be the type check in the Binder, but the coercer

[13:35] * perlpilot suddenly imagines gfldex speaking in a Forrest Gump voice 

[13:35] <psch> assuming whatever the foreign code that was called returned is wrapped in the class that should be coerced

[13:36] *** hanwei_ joined
[13:36] *** hanwei_ left
[13:38] <gfldex> m: sub f(-->Str:D){ Nil }; say f; # i don't like this

[13:38] <camelia> rakudo-moar b89bf9: OUTPUT«Nil␤»

[13:38] <unmatched}> R* announcement in r/programming is doing surprisingly well. 78% upvoted so far: https://www.reddit.com/r/programming/comments/4u2fge/announce_rakudo_star_perl_6_compiler_distribution/

[13:38] <unmatched}> Compared to my usual experience with Perl 6 blogs, where they get actively downvoted by majority :P

[13:39] <perlpilot> 89% now  :)

[13:39] <unmatched}> .oO(I guess that says more about my blogs than r/programming :))

[13:39] *** skids joined
[13:39] <perlpilot> unmatched}: also ... it's early yet.

[13:39] <unmatched}> :)

[13:40] *** sufrostico joined
[13:44] <gfldex> m: sub f(-->Str:D){ Nil }; my Str:D $s = f; say $s; # i don't like this even less

[13:44] <camelia> rakudo-moar b89bf9: OUTPUT«(Str:D)␤»

[13:45] <gfldex> Str:D is an undefined defined value

[13:45] <dalek> Inline-Perl5: 5e3df66 | niner++ | / (3 files):

[13:45] <dalek> Inline-Perl5: Inline::Perl5::global for accessing Perl 5's global variables

[13:45] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/5e3df6656f

[13:46] <gfldex> m: sub f(-->Str:D){ Nil }; my Str:D $s = f; say $s; $s = Nil; dd $s;

[13:46] <camelia> rakudo-moar b89bf9: OUTPUT«(Str:D)␤Str:D $s = Str:D␤»

[13:47] <gfldex> m: sub f(-->Str:D){ Nil }; my Str:D $s = f; say $s; $s = Nil; dd $s.defined;

[13:47] <camelia> rakudo-moar b89bf9: OUTPUT«(Str:D)␤Bool::False␤»

[13:49] <gfldex> m: my Int:D $i = Nil;

[13:49] <camelia> rakudo-moar b89bf9: ( no output )

[13:49] <dalek> doc: 96297a3 | cognominal++ | doc/Language/phasers.pod6:

[13:49] <dalek> doc: CLOSE phaser

[13:49] <dalek> doc: review: https://github.com/perl6/doc/commit/96297a3039

[13:49] <gfldex> m: my Int:D $i = Nil; say 1 / $i;

[13:49] <camelia> rakudo-moar b89bf9: OUTPUT«Parameter 'de' requires an instance of type Int:D, but a type object was passed.  Did you forget a .new?␤  in block <unit> at <tmp> line 1␤␤»

[13:50] <perlpilot> nine: Does that work for the ${^VARS} too ?  (${^MATCH}, ${^PREMATCH}, ${^POSTMATCH}, etc.)

[13:55] <gfldex> m: my Int:D $i is default(Failure.new("undefined value"); $i = Nil;

[13:55] <camelia> rakudo-moar b89bf9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable $i in declaration to initialize itself␤at <tmp>:1␤------> 3efault(Failure.new("undefined value"); $7⏏5i = Nil;␤    expecting any of:␤        term␤»

[13:55] <gfldex> m: my Int:D $i is default(Failure.new("undefined value") = Nil; $i = Nil;

[13:55] <camelia> rakudo-moar b89bf9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable $i in declaration to initialize itself␤at <tmp>:1␤------> 3(Failure.new("undefined value") = Nil; $7⏏5i = Nil;␤    expecting any of:␤        term␤»

[13:56] <lizmat> nine: if the $p5 object doesn't do Associative yet, maybe it is an idea to just implement AT-KEY on it, that does a sefl.global() ?

[13:56] <lizmat> so you can say $p5<$@> ?

[13:56] <nine> perlpilot: doesn't look like it does. Could be because those are only available with use English;

[13:57] <gfldex> m: my Str $i is default(Failure.new("undefined value"));

[13:57] <camelia> rakudo-moar b89bf9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Default value '(HANDLED) undefined value␤  in any  at src/Perl6/World.nqp line 2202␤  in any trait_mod:sym<is> at gen/moar/m-Perl6-Actions.nqp line 5059␤  in any trait_mod:sym<is> at src/Perl6/Grammar.…»

[13:57] <nine> lizmat: sounds neat but I don't expect most users to actually deal with a $p5 object but just use Net::LDAP:from<Perl5>; ... ; say %*PERL5<$@>;

[13:58] <lizmat> nine: ah, ok, I was just inspired by your test case in t/globals.t  :-)

[13:58] <nine> lizmat: /win 14

[14:03] *** cog_ joined
[14:07] *** cognominal left
[14:09] *** dvinciguerra_ joined
[14:10] <gfldex> m: my Int:D $i = sub f(){Nil}(); my Int:D $j = 1; $j = $i; dd $i;

[14:10] <camelia> rakudo-moar b89bf9: OUTPUT«Type check failed in assignment to $j; expected Int:D but got Int:D␤  in block <unit> at <tmp> line 1␤␤»

[14:10] <gfldex> LTA

[14:11] *** Ven joined
[14:11] <Ven> .tell cognominal https://medium.com/@octskyward/graal-truffle-134d8f28fb69 thought about you :)

[14:11] <yoleaux> Ven: I'll pass your message to cognominal.

[14:11] *** Ven left
[14:19] <gfldex> m: my Int:D $i = sub f(){Nil}(); my Int:D $j = $i; dd $i;

[14:19] <camelia> rakudo-moar b89bf9: OUTPUT«Type check failed in assignment to $j; expected Int:D but got Int:D␤  in block <unit> at <tmp> line 1␤␤»

[14:20] *** scovit left
[14:20] <ugexe> m: package XXX { our &foo is export = -> $a, $b  { $a + $b }; our &bar is export = -> $a, $b { foo($a, $b) }; }; import XXX; &foo .= assuming(1); &bar .= assuming(1); say foo(100); say &bar(100); # Can I do something like this where I create lexical copy of XXX::foo and XXX::bar with a default argument without applying to calls within package XXX itself?

[14:20] <camelia> rakudo-moar b89bf9: OUTPUT«101␤Too many positionals passed; expected 1 argument but got 2␤  in sub __PRIMED_ANON at EVAL_2 line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:23] *** lucasb_ left
[14:24] *** iH2O joined
[14:26] <dalek> doc: fbb443e | (Wenzel P. P. Peppmeyer)++ | doc/ (2 files):

[14:26] <dalek> doc: doc consequences of f(-->Int:D){Nil}

[14:26] <dalek> doc: review: https://github.com/perl6/doc/commit/fbb443ed73

[14:26] *** ptolemarch joined
[14:26] *** hwcomcn joined
[14:26] *** hwcomcn left
[14:27] *** hwcomcn joined
[14:27] *** hwcomcn left
[14:27] *** hwcomcn joined
[14:27] *** hwcomcn left
[14:28] *** hwcomcn joined
[14:30] *** zacts left
[14:31] *** ovibos is now known as aaaaaaaaaaaaaaaa

[14:31] *** aaaaaaaaaaaaaaaa is now known as ovibos

[14:31] <skids> m: my Str:D $f; $f.say

[14:31] <camelia> rakudo-moar b89bf9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable definition of type Str:D requires an initializer␤at <tmp>:1␤------> 3my Str:D $f7⏏5; $f.say␤    expecting any of:␤        constraint␤»

[14:32] *** hwcomcn left
[14:32] <skids> I'm thinking maybe the "= Nil" behavior should likewise throw, no?

[14:32] *** hwcomcn joined
[14:32] <skids> The reason Nil can be returned from --> Str:D subs is a different matter.

[14:33] <skids> (having to do with always having an escape route for failure)

[14:33] *** hwcomcn left
[14:33] <gfldex> my guess is that it only checks if there is an initialiser but not if the value is actually defined

[14:33] *** hwcomcn joined
[14:34] <skids> m: my Str:D $f = Str:D; $f.say

[14:34] <camelia> rakudo-moar b89bf9: OUTPUT«Type check failed in assignment to $f; expected Str:D but got Str:D␤  in block <unit> at <tmp> line 1␤␤»

[14:34] <gfldex> m: sub f(-->Int:D){ return Failure.new("oi!")}; say f();

[14:34] <camelia> rakudo-moar b89bf9: OUTPUT«oi!␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[14:35] <gfldex> m: sub f(-->Int:D){ return Failure.new("oi!")}; my Int:D $i =  f();

[14:35] <camelia> rakudo-moar b89bf9: OUTPUT«Earlier failure:␤ oi!␤  in block <unit> at <tmp> line 1␤␤Final error:␤ Type check failed in assignment to $i; expected Int:D but got Failure (Failure.new(exception...)␤  in block <unit> at <tmp> line 1␤␤»

[14:35] *** kid51 joined
[14:35] *** hwcomcn left
[14:35] *** hwcomcn joined
[14:36] <gfldex> in my eyes the Failure should blow at the return type check, not at the assignment

[14:36] *** colomon left
[14:38] *** hwcomcn left
[14:38] <skids> I dunno I'm no expert but my inclinantion is that assigning Nil to a :D variable that has no (defined) default should not behave that way.

[14:39] <dalek> doc: 4edb119 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Nil.pod6:

[14:39] <dalek> doc: fix typo

[14:39] <dalek> doc: review: https://github.com/perl6/doc/commit/4edb1190af

[14:39] <unmatched}> There's a ticket for that

[14:39] <skids> But maybe the way to fix it is to have them have some sort of poisonous explosive default.

[14:39] *** colomon joined
[14:39] *** khw joined
[14:40] <gfldex> unmatched}: if you can find that ticket, could you add a note for https://github.com/perl6/doc/commit/fbb443ed73 please?

[14:42] *** wamba left
[14:43] <skids> m: my Str:D $f is default("foo"); $f.say # this seems to work right

[14:43] <camelia> rakudo-moar b89bf9: OUTPUT«foo␤»

[14:43] *** colomon left
[14:44] <unmatched}> perlpilot: well, you were right :) It was too early. The reddit post has now devolved to a handfull of idiots making fun of the logo or that /??? docs URL is written as $QUESTION_MARK.... Rather than, you know, the actual language :D

[14:44] <sammers> hello from Japam

[14:45] <skids> o/

[14:45] <sammers> s/Japam/Japan/

[14:45] <unmatched}> gfldex: here's the ticket: https://rt.perl.org/Ticket/Display.html?id=127958#ticket-history

[14:47] *** zacts joined
[14:48] <gfldex> .tell TimToady your judgment on `my Int:D $i = Nil` and `sub f(-->Int:D){Nil}` is required

[14:48] <yoleaux> gfldex: I'll pass your message to TimToady.

[14:48] *** iH2O left
[14:49] <ugexe> as a computer janitor im upset at the prospect of having to learn a new language and will be very vocal about it

[14:50] <unmatched}> ugexe++

[14:50] <[Coke]> I think that has already been judged, gfldex.

[14:51] <dalek> doc/molecules-patch-1: 2a5474a | (Christopher Bottoms)++ | doc/Language/operators.pod6:

[14:51] <dalek> doc/molecules-patch-1: add operator classifications to the Index

[14:51] <dalek> doc/molecules-patch-1: 

[14:51] <dalek> doc/molecules-patch-1: In the spirit of https://github.com/perl6/doc/issues/728, adding operator classifications to the index.

[14:51] <dalek> doc/molecules-patch-1: review: https://github.com/perl6/doc/commit/2a5474accb

[14:51] <[Coke]> What's the expected result?

[14:52] *** prammer joined
[14:52] <[Coke]> oh, you're posting that here after a discussion elsewhere... catching up...

[14:52] <gfldex> m: sub f(Int:D $i){}; f(Nil);

[14:52] <camelia> rakudo-moar b89bf9: OUTPUT«Type check failed in binding $i; expected Int but got Nil (Nil)␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:53] <gfldex> i expect the same as in ^^^

[14:55] <gfldex> m: my Int:D $i = Nil; sub f(Int:D $i){}; f($i);

[14:55] <camelia> rakudo-moar b89bf9: OUTPUT«Parameter '$i' requires an instance of type Int:D, but a type object was passed.  Did you forget a .new?␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:55] <psch> the initializer is special in type smilied cases

[14:55] <psch> seems pretty clearly DIHWIDT to me

[14:56] <psch> but i'm not TimToady and don't expect anyone to just believe me on that :)

[14:56] <gfldex> problem is that $i = Nil and f($i) can be in different modules at opposing sides of the planet. If you don't know that Int:D is by no means a guarantee for definedness you may spend quite some time to figure that on out.

[14:57] <psch> don't use underdefined initializers on type smilied constraint variables 

[14:57] <psch> m: my Int:D $x = 0; $x = Nil

[14:57] <camelia> rakudo-moar b89bf9: ( no output )

[14:57] <psch> well, there goes my argument :)

[14:57] <psch> so, yeah, that definitely shouldn't be allowed, gfldex++

[14:58] *** Khisanth left
[14:59] <gfldex> at least it's not contagious and will blow on many buildin subs and operators

[15:01] <arnsholt> nqp: my @not-an-array := 1; # Perverse? Surely, you're joking!

[15:01] <camelia> nqp-moarvm: ( no output )

[15:01] <arnsholt> nqp: my @not-an-array := 1; nqp::say("alive"); # Perverse? Surely, you're joking!

[15:01] <camelia> nqp-moarvm: OUTPUT«alive␤»

[15:01] <psch> m: my @not-an-array := 1; say "alive"

[15:01] <camelia> rakudo-moar b89bf9: OUTPUT«Type check failed in binding; expected Positional but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[15:01] <arnsholt> nqp: my @not-an-array; @not-an-array := 1; nqp::say("alive"); # What about this one?

[15:01] <camelia> nqp-moarvm: OUTPUT«alive␤»

[15:01] <arnsholt> Yeah, that's what I thought

[15:02] <psch> nqp: my @a; say(nqp::what(@a))

[15:02] <camelia> nqp-moarvm: OUTPUT«␤»

[15:02] <psch> nqp: my @a; say(nqp::how(@a))

[15:02] <camelia> nqp-moarvm: OUTPUT«cannot stringify this␤   at gen/moar/stage2/NQPCORE.setting:714  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/NQPCORE.setting.moarvm:join)␤ from gen/moar/stage2/NQPCORE.setting:703  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/NQPCORE.setting.moarvm:say)␤ fr…»

[15:02] <psch> nqp: my @a; say(nqp::how(@a).name(nqp::how(@a))

[15:02] <camelia> nqp-moarvm: OUTPUT«Confused at line 2, near "say(nqp::h"␤   at gen/moar/stage2/NQPHLL.nqp:706  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/NQPHLL.moarvm:panic)␤ from gen/moar/stage2/NQP.nqp:927  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/nqp.moarvm:comp_unit)␤ from gen/moar…»

[15:02] <psch> nqp: my @a; say(nqp::how(@a).name(nqp::how(@a)))

[15:02] <camelia> nqp-moarvm: OUTPUT«NQPArray␤»

[15:02] <arnsholt> @ and % in NQP are mostly for the user, and their autoviv behaviour when they don't have an assignment with the declaration

[15:02] <psch> well, it does know it is an array :)

[15:03] <parabolize> ugexe: this seems to work https://gist.github.com/parabolize/9800f3739022c5a0d33f5ff291cbc76c

[15:03] <psch> nqp: my @a := 1; say(nqp::how(@a).name(nqp::how(@a)))

[15:03] <camelia> nqp-moarvm: OUTPUT«BOOTInt␤»

[15:03] *** Flying_Squirrel joined
[15:03] <Flying_Squirrel> Hi all

[15:03] <arnsholt> psch: If there's no added initializer, it's initialized to nqp::list/nqp:hash (modulo @/%)

[15:03] <psch> arnsholt: it seems ok-ish to me, with how we only do binding 

[15:03] <perlpilot> Flying_Squirrel: greetings

[15:03] <arnsholt> Yeah, definitely. I just got to thinking about this and wondered what the exact semantics were

[15:04] <psch> yeah, it's an interesting bit of "we elide lots of consistency checks"

[15:04] <psch> on the nqp level that is

[15:04] <dalek> doc: b6d8a16 | (Wenzel P. P. Peppmeyer)++ | t/00-load.t:

[15:04] <dalek> doc: add test as travis is not showing installed dependencies

[15:04] <dalek> doc: review: https://github.com/perl6/doc/commit/b6d8a166e3

[15:04] <Flying_Squirrel> while reading about main differences between Perl 5 and 6 I read about the namespaces and I would to find a source that explains why such choices were made. Where shall I start?

[15:05] <arnsholt> psch: Yeah. Or alternatively, the semantics of NQP are different from Perl 6

[15:06] <moritz> Flying_Squirrel: what specifically are you refering to, re namespaces?

[15:06] <gfldex> Flying_Squirrel: you may find some exlanations in http://design.perl6.org/

[15:06] <Flying_Squirrel> oh sorry, I'm not quite sure about the keyword : like the symbol before the variable names that is different in Perl 5

[15:07] <moritz> Flying_Squirrel: ah, sigils

[15:07] <moritz> Flying_Squirrel: basically, it caused lots of confusion in p5

[15:08] <Flying_Squirrel> I thought it was pretty straightforward but I'm still learning, maybe I got it wrong

[15:08] <moritz> Flying_Squirrel: newbies assume that $a[$index] access a variable $a, not @a

[15:08] *** canopus left
[15:08] <Flying_Squirrel> moritz: ok

[15:08] *** sammers left
[15:09] <gfldex> Flying_Squirrel: it got even more confusing when references where involved

[15:09] <ugexe> parabolize++ thats what I needed

[15:09] <Flying_Squirrel> gfldex: ah?

[15:10] *** jgrabber left
[15:10] <gfldex> Flying_Squirrel: perl -e 'my @a; my $b = \@a; $b->[1] = 42; print @$b;' # 42

[15:11] <unmatched}> Now all the newbies get confused about why $a can have a List in it too :P

[15:11] <gfldex> Flying_Squirrel: and that's a simple example

[15:11] *** dainis joined
[15:12] <psch> unmatched}: well, it could before, it just was a reference with syntactic overhead

[15:12] *** zacts_pi joined
[15:12] *** travis-ci joined
[15:12] *** Khisanth joined
[15:12] <travis-ci> Doc build failed. Wenzel P. P. Peppmeyer 'add test as travis is not showing installed dependencies'

[15:12] <travis-ci> https://travis-ci.org/perl6/doc/builds/146670633 https://github.com/perl6/doc/compare/4edb1190afbb...b6d8a166e37e

[15:12] *** travis-ci left
[15:12] <gfldex> unmatched}: what proves the waterbed theory of confusion

[15:12] *** travis-ci joined
[15:12] <travis-ci> Doc build passed. Christopher Bottoms 'add operator classifications to the Index

[15:12] <travis-ci> https://travis-ci.org/perl6/doc/builds/146667157 https://github.com/perl6/doc/commit/2a5474accb85

[15:12] *** travis-ci left
[15:12] <psch> unmatched}: so, again, the same consistency argument applies: the sigil stays the same, even if you have a container container

[15:13] *** zacts left
[15:13] *** canopus joined
[15:14] <unmatched}> psch: Perl 5's sigils also have a consistency argument: $ = one thing; @ = many things; % = named things

[15:14] <Flying_Squirrel> gfldex: so basically in your example, you define an array a, and then a variable b that contains a reference to a (like C pointers ?), then use b to access a and assign a value to hmm.. yup got lost along the way

[15:14] <unmatched}> So those trained on that argument now get confused why $ = [one thing|many things|named things] in Perl 6

[15:14] <psch> unmatched}: oh, definitely.  i'm not arguing against this waterbedding

[15:14] <Flying_Squirrel> *got me lost

[15:15] <Flying_Squirrel> I'm especially confused with the @$b

[15:15] <psch> Flying_Squirrel: that just means @{$b} ;)

[15:15] <psch> scnr

[15:16] *** harmil joined
[15:16] <unmatched}> Flying_Squirrel: cheat sheet: https://juerd.nl/site.plp/perlcheat  I believe the author also has an excellent guide to Perl 5's sigils, though I forget the link. #perl might know it

[15:16] <Flying_Squirrel> unmatched}: thanks

[15:17] <dalek> doc: 2a5474a | (Christopher Bottoms)++ | doc/Language/operators.pod6:

[15:17] <dalek> doc: add operator classifications to the Index

[15:17] <dalek> doc: 

[15:17] <dalek> doc: In the spirit of https://github.com/perl6/doc/issues/728, adding operator classifications to the index.

[15:17] <dalek> doc: review: https://github.com/perl6/doc/commit/2a5474accb

[15:17] <dalek> doc: 7f939bd | (Christopher Bottoms)++ | doc/Language/operators.pod6:

[15:17] <dalek> doc: Merge pull request #741 from perl6/molecules-patch-1

[15:17] <dalek> doc: 

[15:17] <dalek> doc: add operator classifications to the Index

[15:17] <dalek> doc: review: https://github.com/perl6/doc/commit/7f939bdd62

[15:17] <harmil> Dunno if my last message made it, so: in finding all of the Unicode balanced bracketing characters (https://goo.gl/4P2kWW) I found an interesting bug in uniname: it sets its parameter to Any :-)

[15:17] *** xinming_ joined
[15:18] <psch> harmil: care to demonstrate?

[15:18] *** zacts_pi left
[15:19] <unmatched}> huggable: test

[15:19] *** huggable left
[15:19] <harmil> Of course, now I'm trying to come up with the minimal example and it's not repeating. :-)

[15:19] * timotimo made it home alive

[15:19] <psch> harmil: you can also paste your more expansive code on gist.github.com and feed that to camelia

[15:20] <[Coke]> anyone see how to change the listening port on Bailador?

[15:20] *** xinming left
[15:20] * [Coke] found it

[15:20] <harmil> Here's the whole thing (reduced only in the range of codepoints it checks):

[15:20] <harmil> m: my @ends; for ^0x00ff -> $i { my $c = try { $i.chr }; next if !$c.defined or $c eq "("; next unless $c ~~ /<:Ps>|<:Pi>/; my $end = :16(uniprop($c, "Bidi_Mirroring_Glyph")); next unless $end.defined; $end = $end.chr; say("'$c' {uniname($c)} ~ '$end' {uniname($end)}") }

[15:20] <camelia> rakudo-moar b89bf9: OUTPUT«'[' LEFT SQUARE BRACKET ~ ']' RIGHT SQUARE BRACKET␤'{' LEFT CURLY BRACKET ~ '}' RIGHT CURLY BRACKET␤'«' LEFT-POINTING DOUBLE ANGLE QUOTATION MARK ~ '»' RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK␤»

[15:20] <dalek> doc: 7e0050e | (Wenzel P. P. Peppmeyer)++ | .travis.yml:

[15:20] <dalek> doc: force panda to update module list

[15:20] <dalek> doc: review: https://github.com/perl6/doc/commit/7e0050ec01

[15:21] *** hoelzro joined
[15:21] <harmil> Oh, interesting: For me those brace-characters do NOT print!

[15:21] <harmil> recently fixed?

[15:21] *** sammers joined
[15:21] <psch> star-m: my @ends; for ^0x00ff -> $i { my $c = try { $i.chr }; next if !$c.defined or $c eq "("; next unless $c ~~ /<:Ps>|<:Pi>/; my $end = :16(uniprop($c, "Bidi_Mirroring_Glyph")); next unless $end.defined; $end = $end.chr; say("'$c' {uniname($c)} ~ '$end' {uniname($end)}") }

[15:21] <camelia> star-m 2016.04: OUTPUT«'[' LEFT SQUARE BRACKET ~ ']' RIGHT SQUARE BRACKET␤'{' LEFT CURLY BRACKET ~ '}' RIGHT CURLY BRACKET␤'«' LEFT-POINTING DOUBLE ANGLE QUOTATION MARK ~ '»' RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK␤»

[15:21] <psch> works since 2016.04, apparently :)

[15:21] <unmatched}> [Coke]: pass it to baile

[15:22] <unmatched}> [Coke]: https://github.com/ufobat/Bailador/blob/master/lib/Bailador.pm#L90

[15:22] <harmil> I'm on moar 2016.06-9-g8fc21d5

[15:22] <psch> harmil: maybe some terminal font hiccup?

[15:29] *** Lucas_One left
[15:30] *** sufrostico left
[15:30] *** Cabanossi left
[15:30] *** perlpilot left
[15:30] *** tomboy64 left
[15:38] *** perigrin left
[15:41] *** dvinciguerra_ left
[15:41] *** Jonis left
[15:41] *** richi235 left
[15:41] *** RabidGravy left
[15:41] *** jnthn left
[15:41] *** atta left
[15:41] *** cooper left
[15:41] *** mtj_ left
[15:41] *** TimToady left
[15:41] *** CoconutCrab left
[15:41] *** ShimmerFairy left
[15:41] *** notbenh_ left
[15:41] *** john51 left
[15:41] *** khw left
[15:41] *** Roamer` left
[15:41] *** smash left
[15:41] *** leedo left
[15:41] *** danaj left
[15:41] *** dj_goku_ left
[15:41] *** cosimo left
[15:41] *** gregf_ left
[15:41] *** tadzik left
[15:41] *** kentnl left
[15:41] *** mrsolo left
[15:41] *** hobbs left
[15:41] *** lnrdo left
[15:41] *** riatre left
[15:41] *** mithaldu_ left
[15:41] *** timotimo left
[15:41] *** gabiruh left
[15:41] *** ugexe left
[15:41] *** niko left
[15:41] *** harmil left
[15:41] *** jameslenz left
[15:41] *** avenj left
[15:41] *** cog_ left
[15:41] *** nightfrog left
[15:41] *** Actualeyes left
[15:41] *** [ptc] left
[15:41] *** lizmat left
[15:41] *** sno left
[15:41] *** pecastro left
[15:41] *** user9 left
[15:41] *** ovibos left
[15:41] *** frew left
[15:41] *** jast left
[15:41] *** woodruffw left
[15:41] *** kst left
[15:41] *** ponbiki left
[15:41] *** Psy-Q left
[15:41] *** canopus left
[15:41] *** Khisanth left
[15:41] *** prammer left
[15:41] *** nebuchadnezzar left
[15:41] *** telex left
[15:41] *** nbg left
[15:41] *** stmuk left
[15:41] *** xiaomiao left
[15:41] *** silug left
[15:41] *** ilbot3 left
[15:41] *** ChoHag left
[15:41] *** ptolemarch left
[15:41] *** rafl left
[15:41] *** rjbs left
[15:41] *** noganex_ left
[15:41] *** avalokite left
[15:41] *** Possum left
[15:41] *** nowan left
[15:41] *** drforr1 left
[15:41] *** olinkl left
[15:41] *** PotatoGim left
[15:41] *** ilmari left
[15:41] *** japanoise left
[15:41] *** pnu_ left
[15:41] *** stevieb left
[15:41] *** mcmillhj left
[15:41] *** cyphase left
[15:41] *** M-Illandan left
[15:41] *** firstdayonthejob left
[15:41] *** kaare_ left
[15:41] *** aries_liuxueyang left
[15:41] *** AndyBotwin left
[15:41] *** petercommand left
[15:41] *** bob777 left
[15:41] *** cgfbee left
[15:42] *** DrParis left
[15:42] *** shadowpaste left
[15:42] *** jmiven left
[15:42] *** saaki left
[15:42] *** stux|RC-only left
[15:42] *** nine left
[15:42] *** tony-o left
[15:42] *** xxpor left
[15:42] *** skaji left
[15:42] *** luis left
[15:42] *** kid51 left
[15:42] *** DrForr left
[15:42] *** [Coke] left
[15:42] *** remmie left
[15:42] *** cxreg left
[15:42] *** mr-foobar left
[15:42] *** khagan left
[15:42] *** pyrimidine left
[15:42] *** vike left
[15:42] *** ribasushi left
[15:42] *** El_Che left
[15:42] *** ssm left
[15:42] *** xinming_ left
[15:42] *** skids left
[15:42] *** rindolf left
[15:42] *** skarn left
[15:42] *** Upasaka left
[15:42] *** domidumont left
[15:42] *** ufobat left
[15:42] *** sunnavy left
[15:42] *** ambs left
[15:42] *** [particle] left
[15:42] *** obfusk left
[15:42] *** DarthGandalf left
[15:42] *** eam left
[15:42] *** unmatched} left
[15:42] *** Hotkeys left
[15:42] *** hoelzro left
[15:42] *** dainis left
[15:42] *** molaf left
[15:42] *** hanekomu left
[15:42] *** domm left
[15:42] *** susmus left
[15:42] *** akiym left
[15:42] *** darutoko left
[15:42] *** mohae left
[15:42] *** adrusi left
[15:42] *** zostay left
[15:42] *** Peter_R left
[15:42] *** mindos left
[15:42] *** geekosaur left
[15:42] *** chee left
[15:42] *** Praise left
[15:42] *** decent left
[15:42] *** robinsmidsrod left
[15:42] *** mephinet- left
[15:42] *** geraud left
[15:42] *** cibs left
[15:42] *** sammers left
[15:42] *** Flying_Squirrel left
[15:42] *** yoleaux left
[15:42] *** Matthew[m] left
[15:42] *** Sigyn left
[15:42] *** benchable left
[15:42] *** yeltzooo9 left
[15:42] *** dsp- left
[15:42] *** kipd left
[15:42] *** hahainternet left
[15:42] *** AlexDaniel joined
[15:43] <AlexDaniel> 𝒄𝒉𝒂𝒎𝒑𝒊𝒐𝒏𝒔 :)

[15:45] <AlexDaniel> hmm

[15:47] *** ilogger2 joined
[15:47] *** ChanServ sets mode: +v ilogger2

[15:52] *** dainis joined
[15:53] *** xinming joined
[15:54] *** zakharyas joined
[15:54] <unmatched}> Fair enough :)

[15:55] *** zacts joined
[15:55] <gfldex> unmatched}: after looking at the test however, I have to agree. LWP::Simple depends on the cooperation of the intarwebs.

[15:55] *** zacts left
[15:55] <dalek> doc: 8210e65 | cognominal++ | doc/Language/phasers.pod6:

[15:55] <dalek> doc: DOC phaser

[15:55] <dalek> doc: review: https://github.com/perl6/doc/commit/8210e654be

[15:57] <sammers> m: say '1: word, 2: word, 3: word'.subst( / 'word' /, '', :x(1) );

[15:57] <camelia> rakudo-moar b89bf9: OUTPUT«1: , 2: word, 3: word␤»

[15:57] <sammers> hmm

[15:57] <sammers> is there a way to delete every occurance exluding the first match?

[15:57] *** user9 joined
[15:58] <sammers> m: say '1: word, 2: word, 3: word'.subst( / 'word' /, '', :x(2) );

[15:58] <camelia> rakudo-moar b89bf9: OUTPUT«1: , 2: , 3: word␤»

[15:58] <unmatched}> m: say '1: word, 2: word, 3: word'.subst( / 'word' /, '', :!x(1) );

[15:58] <camelia> rakudo-moar b89bf9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Argument not allowed on negated pair with key 'x'␤at <tmp>:1␤------> 3rd, 3: word'.subst( / 'word' /, '', :!x(7⏏051) );␤»

[15:58] <psch> m: say '1: word, 2: word, 3: word'.subst( / 'word' /, '', :nd(2..*) );

[15:58] <camelia> rakudo-moar b89bf9: OUTPUT«1: word, 2: , 3: ␤»

[15:58] <dalek> doc: 8e6e303 | (Wenzel P. P. Peppmeyer)++ | .travis.yml:

[15:58] <dalek> doc: we may not want to depend on the internet for tests

[15:58] <dalek> doc: review: https://github.com/perl6/doc/commit/8e6e303591

[15:58] <sammers> cool

[15:58] *** felher joined
[15:58] *** iH2O joined
[15:59] <psch> alternatively :st, :rd or :th

[16:00] <psch> or even :nth

[16:00] <sammers> that is great

[16:00] <sammers> thanks

[16:00] <psch> :nth is probably the most readable if you're not going for the colonpair shorthand

[16:00] *** rmmm joined
[16:00] <psch> like, :1st, :2nd, :3rd, :4th look neat, but :st(1) kinda doesn't

[16:01] <gfldex> m: say '1: word, 2: word, 3: word'.subst( / 'word' /, '', :nth(2..*) );

[16:01] <camelia> rakudo-moar b89bf9: OUTPUT«1: word, 2: , 3: ␤»

[16:01] <unmatched}> m: say '1: word, 2: word, 3: word'.subst( / 'word' /, '', :2th );

[16:01] <camelia> rakudo-moar b89bf9: OUTPUT«1: word, 2: , 3: word␤»

[16:01] <unmatched}> XD

[16:03] <psch> yeah, it works better in Date.later

[16:03] <psch> i mean, ':$st where * == 1' is probably something we could put in the sig there, but otoh why bother? :)

[16:03] <psch> the subst sig that is

[16:03] <iH2O> ok

[16:03] *** WAAAB8X joined
[16:03] <14WAAAB8X> Doc build passed. Christopher Bottoms 'succ/pred explanation

[16:03] <14WAAAB8X> https://travis-ci.org/perl6/doc/builds/146680935 https://github.com/perl6/doc/compare/7e0050ec0117...dc856953a210

[16:04] <Juerd> psch: I find 9 twigils about 6 too many.

[16:04] <unmatched}> heh

[16:04] <psch> Juerd: which do you think should leave?

[16:05] <Juerd> psch: Everything that isn't used by regular programmers on a regular basis. Let's keep <. ! ^>

[16:05] <dalek> doc: 4518bc3 | (Wenzel P. P. Peppmeyer)++ | doc/Type/Str.pod6:

[16:05] <dalek> doc: :nth can be Callable

[16:05] <dalek> doc: review: https://github.com/perl6/doc/commit/4518bc3f55

[16:05] <Juerd> I'm not very sure about ? because I haven't really seen many uses of it yet.

[16:06] <psch> Juerd: why the preference for positional self-declaring over named self-declaring?

[16:06] *** dainis left
[16:06] *** cosimo joined
[16:07] <psch> m: my &sub = sub { $^a > 0 ?? &?ROUTINE($^a-1) !! $^a }; # simple ?-twigil example

[16:07] <camelia> rakudo-moar b89bf9: ( no output )

[16:07] <psch> also ::?CLASS and $?CLASS are rather common

[16:07] <Juerd> But : just sounds like a bad idea (at some point, just switch to a formal signature, jeez), < is redundant as it saves 1 character typing, = and * could go through globalish objects.

[16:08] <psch> fwiw, i don't really see < as a twigil

[16:08] <Juerd> psch: It's not a preference for one over the other, it's that $^a and $^b are just very useful for tiny subs, whereas anything with named arguments just won't be a tiny sub anyway.

[16:08] <perlpilot_> Juerd: except that sometimes tiny subs want to use names for clarity

[16:08] <psch> i don't follow.  the calling convention does not dictate the complexity of a sub

[16:09] <Juerd> psch: I don't know what < is exactly. It seems ambiguous with the $ variable and the <> postcircumfix, even though a combination of those two makes no sense.

[16:09] *** prammer joined
[16:09] <Juerd> But $<foo> reads like it should be the same as ${'foo'}, not $/{'foo'}

[16:09] <dalek> doc: f96c6a1 | Altai-man++ | doc/Language/glossary.pod6:

[16:09] <dalek> doc: Dead glossary page links were fixed

[16:09] <dalek> doc: review: https://github.com/perl6/doc/commit/f96c6a1d3e

[16:09] <Juerd> perlpilot_: That's not the kind of tiny that I'd find tiny :)

[16:10] <Juerd> perlpilot_: I'm thinking of things like routines you pass to sort

[16:10] <perlpilot_> me too actually  :)

[16:10] <Juerd> perlpilot_: In which you typically have a single simple expression that involves two arguments

[16:11] <psch> m: "foo" ~~ /(.)+/; say @() # is ( a twigil now as well?

[16:11] <camelia> rakudo-moar b89bf9: OUTPUT«([｢f｣ ｢o｣ ｢o｣])␤»

[16:11] <psch> that's why i don't think < is a twigil

[16:11] <psch> and yeah, i can see the ${'foo'} instead of $/{'foo'} interpretation, i probably just got too used to it to be bothered by it

[16:12] <gfldex> m: say $++, $<>;

[16:12] <camelia> rakudo-moar b89bf9: OUTPUT«0Nil␤»

[16:12] <Juerd> gfldex: Every $ is a new one.

[16:12] <psch> m: "foo" ~~ /(.)+/; say $<>

[16:12] <camelia> rakudo-moar b89bf9: OUTPUT«｢foo｣␤ 0 => ｢f｣␤ 0 => ｢o｣␤ 0 => ｢o｣␤»

[16:13] <Juerd> Anyway, I think Perl 6 got too complex in some places, and twigils is one of them. It's okay, it's still a wonderful language even if it takes a bit longer to learn.

[16:13] <psch> well, = and ~ are mostly ignorable 

[16:13] <Juerd> I don't believe in 'mostly ignorable' if it's syntax.

[16:13] *** travis-ci joined
[16:13] <psch> although that's probably because we don't really have enough working to do things with them yet

[16:13] <travis-ci> Doc build passed. cognominal 'DOC phaser'

[16:13] <travis-ci> https://travis-ci.org/perl6/doc/builds/146683484 https://github.com/perl6/doc/compare/dc856953a210...8210e654bef1

[16:13] *** travis-ci left
[16:13] *** lostinfog joined
[16:14] <psch> i mean, messing with %~LANG is really icky still

[16:14] *** darutoko- joined
[16:14] *** darutoko- left
[16:14] <dalek> doc/molecules-patch-1: 0b82fdd | (Christopher Bottoms)++ | doc/Type/Bool.pod6:

[16:14] <dalek> doc/molecules-patch-1: Bool.succ, .pred methods explained (please review)

[16:14] <dalek> doc/molecules-patch-1: 

[16:14] <dalek> doc/molecules-patch-1: I first encountered the method "succ" today, and it was a method on Bool. At first I misunderstood it to mean "success", and wondered what type of failure or disaster "pred" stood for. Then I discovered that "succ" means "successor" and "pred" means "predecessor" and that they seem to totally make sense if we think of Bool in terms of it consisting of two possible enums.  So, that's what I tried to explain, but I would really l

[16:14] <dalek> doc/molecules-patch-1: review: https://github.com/perl6/doc/commit/0b82fdd937

[16:14] <Juerd> imho, twigils like = and ~ are the same mistake that non-\w variable names in Perl 5 were.

[16:15] <geekosaur> I do wonder if $?... and $*... should really be pseudo-namespaces

[16:15] <Juerd> I would have preferred that.

[16:16] <psch> i prefer $? over e.g. COMPILING::

[16:16] <perlpilot_> me too

[16:16] *** iH2O left
[16:17] <Juerd> The whole uppercase thing is another thing I don't really get.

[16:17] <Juerd> If it's already special because of the twigil, then what's the use of the allcaps names...

[16:17] <perlpilot_> reinforcement?

[16:18] <dalek> doc/molecules-patch-1: 30c2714 | (Christopher Bottoms)++ | doc/Type/Bool.pod6:

[16:18] <dalek> doc/molecules-patch-1: formatting tweak

[16:18] <dalek> doc/molecules-patch-1: review: https://github.com/perl6/doc/commit/30c2714fba

[16:18] <Juerd> I think it serves to make things ugly, which in turn makes you less likely to want to use them... :P

[16:18] *** travis-ci joined
[16:18] <travis-ci> Doc build passed. Wenzel P. P. Peppmeyer 'we may not want to depend on the internet for tests'

[16:18] <travis-ci> https://travis-ci.org/perl6/doc/builds/146684016 https://github.com/perl6/doc/compare/8210e654bef1...8e6e30359105

[16:18] *** travis-ci left
[16:22] *** travis-ci joined
[16:22] <travis-ci> Doc build failed. Christopher Bottoms 'Bool.succ, .pred methods explained (please review)

[16:22] <travis-ci> https://travis-ci.org/perl6/doc/builds/146688481 https://github.com/perl6/doc/commit/0b82fdd937c8

[16:22] *** travis-ci left
[16:27] *** cosimo left
[16:31] <[Coke]> another Bailador question: I have post '' => sub { say request.body } - I hit the post, I see a single line in the log file indicating that it's being hit; no output is generated. Any pointers?

[16:32] *** darutoko joined
[16:33] *** Herby_ joined
[16:33] <Herby_> o/

[16:34] <Herby_> Question: How do I get a multiline input from the terminal? Poking around the perl6 docs, 'get' and 'prompt' seem to terminate when enter is hit

[16:34] <[Coke]> Ah. in mojo, an empty route string matches everything; had to change it from '' to /.*/

[16:35] <[Coke]> How would you know when to stop getting input?

[16:35] <psch> m: my @lines = get() xx 3; .say for @lines 

[16:35] <camelia> rakudo-moar b89bf9: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤»

[16:35] <unmatched}> $*IN.lines ?

[16:35] <psch> Herby_: you can just chain &get calls

[16:35] <Herby_> That was my next question. I'm on Windows 10, working my way through 'Learning Perl' examples to learn Perl6

[16:35] <unmatched}> m: mny @lines = $*IN.lines; say "Got {+@lines} lines of input"

[16:35] <camelia> rakudo-moar b89bf9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '@lines' is not declared. Did you mean '&lines'?␤at <tmp>:1␤------> 3mny 7⏏5@lines = $*IN.lines; say "Got {+@lines} ␤»

[16:35] <unmatched}> m: my @lines = $*IN.lines; say "Got {+@lines} lines of input"

[16:35] <camelia> rakudo-moar b89bf9: OUTPUT«Got 20 lines of input␤»

[16:37] <psch> lines should go until EOF, which is the next use case i can think of

[16:38] <unmatched}> Herby_: don't know about Windows, but on Linux, you generally use CTRL+D to end multi-line stuff; that's EOF (so .lines stuff would work for such a scenario)

[16:38] <psch> i think windows uses ^Z?

[16:38] <geekosaur> control-z may work, yeh

[16:38] <timotimo> did i mention i have my very own camelia plushie? :D

[16:38] <unmatched}> m: my @lines = $*IN.lines.map({/Nuair/ and last}); say "Got {+@lines} lines of input"

[16:38] <camelia> rakudo-moar b89bf9: OUTPUT«Got 2 lines of input␤»

[16:39] <unmatched}> timotimo: I'm jealous :)

[16:39] <[Coke]> timotimo: jelly!

[16:39] <timotimo> :D

[16:39] <timotimo> liz and wendy came over to visit with their bikes, and they gave it to me in person! :D

[16:39] <Herby_> unmatched}, I'll give it a whirl. thanks

[16:39] *** cosimo joined
[16:42] <unmatched}> On the topic of sigls and twigils: http://www.xkcd.com/1306/ :)

[16:45] <AlexDaniel> ↘ Go ↗ Perl 6 ?

[16:47] *** sjoshi joined
[16:47] <Juerd> unmatched}: Hmmm... $qbasic? I thought that was qbasic$

[16:47] *** prammer left
[16:48] <unmatched}> *shrug*

[16:48] *** prammer joined
[16:50] <[Coke]> docubug, mkdir should note that it's creating intervening directories (like $ mkdir -p)

[16:52] *** prammer left
[16:53] <AlexDaniel> [Coke]: can you take a look at https://github.com/perl6/doc/pull/743 and tell your opinion?

[16:54] <AlexDaniel> or anybody else?

[16:56] <dalek> doc: 8761394 | (Zoffix Znet)++ | doc/Type/IO/Path.pod6:

[16:56] <dalek> doc: Document mkdir is like $ mkdir -p

[16:56] <dalek> doc: 

[16:56] <dalek> doc: [Coke]++

[16:56] <dalek> doc: review: https://github.com/perl6/doc/commit/8761394283

[16:56] <AlexDaniel> it's kinda interesting that people either don't see such pull requests or simply don't want to comment on them, but later…… We don't want to be in a situation when people start panicking when stuff is already done (“Why did you do this? Nooo!”)

[16:57] *** Guest66 joined
[16:57] *** Guest66 is now known as P6fr

[16:57] <P6fr> re

[16:57] <unmatched}> I just passed it as tl;dr and unsubbed from the first glosarry issue 'cause it was spamming my notifications :)

[17:00] *** labster joined
[17:03] *** travis-ci joined
[17:03] <travis-ci> Doc build failed. Zoffix Znet 'Document mkdir is like $ mkdir -p

[17:03] <travis-ci> https://travis-ci.org/perl6/doc/builds/146698077 https://github.com/perl6/doc/compare/f96c6a1d3ebf...87613942831d

[17:03] *** travis-ci left
[17:04] <unmatched}> Oh, f off with your trailing whitespace.

[17:05] <Juerd> ...said the unmatched curly.

[17:06] <dalek> doc: ebab3c9 | (Zoffix Znet)++ | doc/Type/IO/Path.pod6:

[17:06] <dalek> doc:  :rage4:

[17:06] <dalek> doc: review: https://github.com/perl6/doc/commit/ebab3c9557

[17:06] <[Coke]> unmatched}: as the author of that test (but not the committer), I would have no problem if the test became optional.

[17:06] *** sjoshi left
[17:06] <[Coke]> AlexDaniel: there's a lot of stuff there. do you just want feedback on whether we should remove links to wikipedia?

[17:07] <unmatched}> I think AlexDaniel was running some statistics vis-a-vis that test. So I'll leave it to him to make changes, if any are needed.

[17:08] <AlexDaniel> according to my statistics, Zoffix is very unhappy with these tests

[17:08] <unmatched}> :D

[17:08] *** zakharyas left
[17:09] <[Coke]> i agree that it's frustrating when someone puts in the work, the trigger is pulled, and then someone like me says "why did you do that". but given the volunteer nature of the project, it's hard to avoid, unless someone wants to *own* the project and make sure that doesn't happen. (like you're doing by asking me! thanks!)

[17:09] <AlexDaniel> [Coke]: the question is should we remove glossary items like JVM, JIT or OOP from the glossary?

[17:09] <[Coke]> on the other hand, running 'make test' before pushing is easy.

[17:10] <[Coke]> AlexDaniel: I could argue it either way.

[17:11] <unmatched}> [Coke]: no it's not, because it'd involve finding/cloning the repo pulling the changes, making edits, and pushing back. Compare that to "Edit this page" on GitHub that let's you do single-click edits.

[17:11] <[Coke]> hard to determine where to draw the line is.

[17:11] *** pRiVi joined
[17:11] <[Coke]> unmatched}: You're the only person I know that is editing things via github.

[17:11] <unmatched}> I can't be the only one.

[17:11] <AlexDaniel> not the only one

[17:12] <AlexDaniel> github marks commits that were done via github, it seems like others do that sometimes too

[17:12] <[Coke]> so someone open a ticket to make the test optional.

[17:12] * unmatched} does so

[17:13] *** travis-ci joined
[17:13] <travis-ci> Doc build errored. Zoffix Znet ' :rage4:'

[17:13] <travis-ci> https://travis-ci.org/perl6/doc/builds/146700502 https://github.com/perl6/doc/compare/87613942831d...ebab3c955752

[17:13] *** travis-ci left
[17:13] <AlexDaniel> travis-ci: you're drunk, go home

[17:16] <unmatched}> Opened https://github.com/perl6/doc/issues/745

[17:17] <[Coke]> what is "Pod::To::BigPage" ?

[17:18] <gfldex> [Coke]: it renders all pod files into one big html file, what can be shipped with a distro and will even work with ntfs

[17:18] <[Coke]> ah, it's too new.

[17:18] *** dainis joined
[17:18] <gfldex> also it allows printing for some values of printing

[17:19] <[Coke]> one of its tests depends on IO::Socket::SSL implicitly but not explicitly.

[17:19] <unmatched}> Neat. TIL GitHub marks on-site-edited commits :)

[17:20] <[Coke]> I'm done with unmatched}'s request, just trying to get a clean test run in.

[17:20] <unmatched}> \o/ [Coke]++

[17:20] <[Coke]> ... openssl assumes that DNS works.

[17:22] <[Coke]> and doesn't respect https roxy.

[17:23] * [Coke] opens https://github.com/sergot/openssl/issues/30

[17:23] *** TimToady joined
[17:24] *** usermac joined
[17:24] <usermac> Does Google Cloud offer Perl6? If not, then who? Thx

[17:25] *** pmurias joined
[17:25] <pmurias> hi

[17:25] <unmatched}> hey

[17:26] <unmatched}> usermac: offer how? I got Perl 6 installed on my GCE VM

[17:26] <[Coke]> and another one for LWP::Simple...

[17:27] <[Coke]> usermac: there's a docker container, if that helps.

[17:27] <[Coke]> s/container/image/ oops

[17:27] <unmatched}> usermac: it's "app engine" only has Node.js, Java, Python, PHP, Go, and Ruby listed as languages of choice.

[17:27] <[Coke]> ==> Testing Pod::To::BigPage

[17:27] <[Coke]> ===SORRY!===

[17:27] <[Coke]> Expected MAST::Frame, but didn't get one

[17:27] <[Coke]> t/P.t ..

[17:28] <unmatched}> That was an issue with JSON::RPC too and the author belives that has to do with something LWP::Simple 

[17:28] <unmatched}> *in LWP...

[17:28] *** cdg joined
[17:29] <P6fr> m: my @ = 1..5.say

[17:29] <camelia> rakudo-moar b89bf9: OUTPUT«5␤»

[17:29] <[Coke]> https://github.com/gfldex/perl6-pod-to-bigpage/issues/1

[17:29] <P6fr> m: my @ = 1..5;say @

[17:29] <camelia> rakudo-moar b89bf9: OUTPUT«[]␤»

[17:29] *** domidumont joined
[17:29] * [Coke] will just push the test change untested, then.

[17:30] <AlexDaniel> [Coke]: there's some discussion on https://github.com/perl6/doc/issues/745 :)

[17:30] <gfldex> [Coke]: that test is working fine locally and in a clean VM

[17:30] <P6fr> m: my @a = 1..5;say @a

[17:30] <camelia> rakudo-moar b89bf9: OUTPUT«[1 2 3 4 5]␤»

[17:31] <dalek> doc: 4aee722 | coke++ | Makefile:

[17:31] <dalek> doc: Turn off trailing whitespace test for 'make test'

[17:31] <dalek> doc: 

[17:31] <dalek> doc: Make all tests available under 'make xtest'

[17:31] <dalek> doc: review: https://github.com/perl6/doc/commit/4aee722942

[17:31] <gfldex> [Coke]: can you try `panda --force install LWP::Simple` please?

[17:31] <[Coke]> gfldex: I had to do that just now to install LWP::Simple, yes

[17:32] <[Coke]> sorry;

[17:32] <[Coke]> what I did was "panda --notests install LWP::Simple"

[17:32] <[Coke]> since LWP::Simple fails tests here. 

[17:32] <[Coke]> heading out

[17:33] *** cdg left
[17:33] *** cdg joined
[17:33] <unmatched}> \o/

[17:34] <gfldex> [Coke]: i don't got IO::Socket::SSL installed (because it doesn't work)

[17:38] *** mcmillhj joined
[17:38] *** mcmillhj left
[17:38] *** mcmillhj joined
[17:39] *** itaipu joined
[17:41] *** pmurias is now known as TrollButNotOnIrc

[17:41] <P6fr> m: say 1..26 Z A..Z

[17:41] <camelia> rakudo-moar b89bf9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared names:␤    A used at line 1␤    Z used at line 1␤␤»

[17:41] *** TrollButNotOnIrc is now known as pmurias

[17:42] <P6fr> m: my $a  =1..26 Z A..Z

[17:42] <camelia> rakudo-moar b89bf9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared names:␤    A used at line 1␤    Z used at line 1␤␤»

[17:42] <unmatched}> m: m: say 1..26 Z "A".."Z"

[17:42] <camelia> rakudo-moar b89bf9: OUTPUT«((1 A) (2 B) (3 C) (4 D) (5 E) (6 F) (7 G) (8 H) (9 I) (10 J) (11 K) (12 L) (13 M) (14 N) (15 O) (16 P) (17 Q) (18 R) (19 S) (20 T) (21 U) (22 V) (23 W) (24 X) (25 Y) (26 Z))␤»

[17:43] <P6fr> m: my $a  =1..26 Z =>"A".."Z"

[17:43] <camelia> rakudo-moar b89bf9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix => instead␤at <tmp>:1␤------> 3my $a  =1..26 Z =>7⏏5"A".."Z"␤»

[17:43] <P6fr> m: my $a  =1..26 Z=>"A".."Z"

[17:43] <camelia> rakudo-moar b89bf9: ( no output )

[17:43] <unmatched}> You need to `say` or output the output some other way

[17:43] <P6fr> m: my $a  =1..26 Z=>"A".."Z";say $a

[17:43] <camelia> rakudo-moar b89bf9: OUTPUT«1..26␤»

[17:44] <P6fr> ok thx unmatched} 

[17:44] <unmatched}> m: my $a  = (1..26 Z=>"A".."Z");say $a

[17:44] <camelia> rakudo-moar b89bf9: OUTPUT«(1 => A 2 => B 3 => C 4 => D 5 => E 6 => F 7 => G 8 => H 9 => I 10 => J 11 => K 12 => L 13 => M 14 => N 15 => O 16 => P 17 => Q 18 => R 19 => S 20 => T 21 => U 22 => V 23 => W 24 => X 25 => Y 26 => Z)␤»

[17:44] <AlexDaniel> or

[17:44] <AlexDaniel> m: my @a = 1..26 Z=> "A".."Z"; say @a

[17:44] <camelia> rakudo-moar b89bf9: OUTPUT«[1 => A 2 => B 3 => C 4 => D 5 => E 6 => F 7 => G 8 => H 9 => I 10 => J 11 => K 12 => L 13 => M 14 => N 15 => O 16 => P 17 => Q 18 => R 19 => S 20 => T 21 => U 22 => V 23 => W 24 => X 25 => Y 26 => Z]␤»

[17:44] <unmatched}> Right

[17:45] *** domidumont left
[17:45] <P6fr> thx you very much

[17:45] *** sena_san joined
[17:46] <AlexDaniel> or maybe you want something like this

[17:46] <AlexDaniel> m: say (‘A’..‘Z’).pairs

[17:46] <camelia> rakudo-moar b89bf9: OUTPUT«(0 => A 1 => B 2 => C 3 => D 4 => E 5 => F 6 => G 7 => H 8 => I 9 => J 10 => K 11 => L 12 => M 13 => N 14 => O 15 => P 16 => Q 17 => R 18 => S 19 => T 20 => U 21 => V 22 => W 23 => X 24 => Y 25 => Z)␤»

[17:46] <AlexDaniel> the numbering is a little bit different, but who knows, maybe that's what you need

[17:47] <P6fr> hum

[17:48] <unmatched}> m: use MONKEY-TYPING; augment class List { method succ { self.[0].succ; self.[1].succ } }; say (1, "A"), (2, "B") ... (26, "Z")

[17:48] <camelia> rakudo-moar b89bf9: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5C' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤␤»

[17:48] <unmatched}> In 'C'? Digits? wat

[17:48] *** mohae_ joined
[17:48] <P6fr> how to do a variable global

[17:49] <P6fr> ?

[17:49] <unmatched}> I guess it's the Doctor Hurts thing... It's trying to do numerical comparison with something

[17:49] <unmatched}> P6fr: why? Globals are a bad idea

[17:49] <P6fr> why ? i need a array for all codes

[17:50] <unmatched}> P6fr: what do you mean by "global"?

[17:51] *** travis-ci joined
[17:51] <travis-ci> Doc build passed. Will "Coke" Coleda 'Turn off trailing whitespace test for 'make test'

[17:51] <travis-ci> https://travis-ci.org/perl6/doc/builds/146707981 https://github.com/perl6/doc/compare/ebab3c955752...4aee7229425d

[17:51] *** travis-ci left
[17:51] <P6fr> available in all parts From Code

[17:52] <P6fr> hum no I'll take my and do not surround hook

[17:52] <P6fr> it's the same

[17:53] <unmatched}> m: say :26('MEO')

[17:53] <camelia> rakudo-moar b89bf9: OUTPUT«15260␤»

[17:53] <unmatched}> m: say :26('MEOW')

[17:53] <camelia> rakudo-moar b89bf9: OUTPUT«Cannot convert string to number: malformed ':26' style radix number, expecting '>' after the body in '3:26<MEO⏏5W>' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[17:53] <unmatched}> m: say :36('MEOW')

[17:53] <camelia> rakudo-moar b89bf9: OUTPUT«1045472␤»

[17:54] *** tbrowder joined
[17:54] <unmatched}> LTA-ish error.

[17:54] <unmatched}> (the '>' portion... it's not applicable to my actual code)

[17:54] *** dainis left
[17:55] *** dainis joined
[17:55] *** lucs joined
[17:55] *** spider-mario joined
[17:56] *** cosimo left
[17:56] *** colomon joined
[17:58] *** cosimo joined
[18:02] *** s34n_ joined
[18:05] <s34n_> are there any performance benchmarks posted periodically to gauge progress on perl5 optimization?

[18:07] <mspo> ?

[18:07] <unmatched}> s34n_: try asking in #perl that's the channel for Perl 5 language.

[18:07] <unmatched}> folks in there would be more familiar 

[18:07] <s34n_> oops. I meant perl6. typo

[18:07] <[Coke]> this channel is about perl 6.

[18:07] <[Coke]> ah

[18:08] <[Coke]> https://github.com/japhb/perl6-bench is the software. not sure if there's a place that saves out graphs every so often.

[18:08] <unmatched}> We should have Tux's test-t stuff in the speed FAQ.

[18:08] <timotimo> yeah, we have daily graphs on the moarvm page

[18:08] <timotimo> http://tux.nl/Talks/CSV6/speed4.html

[18:09] <unmatched}> huggable: speed is :is: Some speed stats: http://tux.nl/Talks/CSV6/speed4.html

[18:09] <huggable> unmatched}, Added speed is as Some speed stats: http://tux.nl/Talks/CSV6/speed4.html

[18:09] <unmatched}> I just wish graphs started the axes at 0. The graphs are a bit misleading :)

[18:10] <timotimo> yeah

[18:10] <timotimo> http://www.moarvm.org/measurements/perl6-bench/ - sadly not really day-to-day comparisons

[18:11] <[Coke]> timotimo: wonder if we could sort that directory listing in reverse.

[18:12] <timotimo> http://www.moarvm.org/measurements/perl6-bench/?C=M;O=D

[18:12] *** usermac left
[18:12] <[Coke]> well, by default, though. :)

[18:12] <[Coke]> timotimo++ though

[18:13] <timotimo> :)

[18:13] <timotimo> figure out what to put into the .htaccess and it should be trivial for jnthn to put that up

[18:14] <unmatched}> http://serverfault.com/a/642770

[18:15] <dalek> doc: 88b9a88 | (Wenzel P. P. Peppmeyer)++ | / (2 files):

[18:15] <dalek> doc: add bigpage to automatic build

[18:15] <dalek> doc: review: https://github.com/perl6/doc/commit/88b9a88b9e

[18:15] <dalek> doc: e6f2aa0 | (Wenzel P. P. Peppmeyer)++ | Makefile:

[18:15] <dalek> doc: Merge branch 'master' of https://github.com/perl6/doc

[18:15] <dalek> doc: review: https://github.com/perl6/doc/commit/e6f2aa04fb

[18:16] <unmatched}> IndexOptions NameWidth=*

[18:16] <unmatched}> IndexOrderDefault Descending Date

[18:16] <unmatched}> That's what we got on rakudo.org/downloads

[18:18] *** andrzejku joined
[18:22] <dalek> doc/wiki-entries-cleanup: 345efdc | Altai-man++ | doc/Language/glossary.pod6:

[18:22] <dalek> doc/wiki-entries-cleanup: Fix for merge conflict

[18:22] <dalek> doc/wiki-entries-cleanup: review: https://github.com/perl6/doc/commit/345efdce3b

[18:23] *** travis-ci joined
[18:23] <travis-ci> Doc build failed. Wenzel P. P. Peppmeyer 'Merge branch 'master' of https://github.com/perl6/doc'

[18:23] <travis-ci> https://travis-ci.org/perl6/doc/builds/146717768 https://github.com/perl6/doc/compare/4aee7229425d...e6f2aa04fbeb

[18:23] *** travis-ci left
[18:23] <sena_san> Conflict is resolved. There are still some strange pieces like "Javascript as a virtual machine", but it's not the case for this PR.

[18:24] <jdv79> [Coke]: ok.  hope he comes back to write mojo6.

[18:24] <jdv79> sri++

[18:24] <timotimo> thank you, sena_san 

[18:25] <unmatched}> jdv79: he won't. The title of this commit kinda says it all: https://github.com/kraih/mojo/commit/19cdf77258a1e123c84ddf79f377be60182ef1ef

[18:26] <timotimo> why is the linguist detection of perl6 vs perl5 code so bad? :\

[18:27] <unmatched}> Because languages are similar.

[18:27] *** dainis left
[18:27] <unmatched}> The issues are mostly with test files. 

[18:27] <unmatched}> You have the same extention and there's not much else to differentiate by

[18:28] <jdv79> i don't think that's definitive.  he's just frustrated with the current state of things.

[18:28] <jdv79> aren't we all

[18:28] <unmatched}> I'm not.

[18:28] <jdv79> ok

[18:28] <unmatched}> I also seen him comment that it'd make more sense to make a Ruby version of Mojo*

[18:29] <timotimo> because as opposed to perl6, ruby doesn't have Inline::Perl5? :)

[18:29] <unmatched}> timotimo++

[18:30] <unmatched}> Yeah, other than the SEGV, my experience with Mojolicious over Inline::Perl5 was rather great. 

[18:30] <jdv79> i'm sure.  p5 is still not p6.

[18:31] *** girafe joined
[18:31] <unmatched}> Seems a tribal statement :) 

[18:31] <unmatched}> "We need the thing because everyone else has the thing"

[18:31] <unmatched}> Perl 6 doesn't have the speed or stability to support a competing web framework at the moment.

[18:31] <jdv79> i think that in 5 years we'll all look back at this and laugh

[18:32] <unmatched}> I hope so :)

[18:32] <jdv79> exactly

[18:32] <unmatched}> (SEGV I mentioned is this https://rt.perl.org/Ticket/Display.html?id=128558 )

[18:33] <unmatched}> Well, I'm leaving until next Monday. Hoping I'll have a production-ready IRC::Client when I come back :)

[18:34] <jdv79> have fun

[18:34] <timotimo> have a nice weekend, unmatched} 

[18:35] *** spider-mario left
[18:36] *** spider-mario joined
[18:36] *** itaipu left
[18:37] <harmil> The Star announcement is getting some negative traction on reddit (it's dropped from 11 to 9 upvotes while I've been watching)... :-(

[18:39] *** sena_san left
[18:39] <jdv79> happens

[18:40] *** itaipu joined
[18:40] <perlpilot_> It's too bad the crappy comments are near the top though

[18:44] <timotimo> on which subreddit?

[18:45] *** itaipu left
[18:45] <mst> https://www.reddit.com/r/programming/comments/4u2fge/announce_rakudo_star_perl_6_compiler_distribution/

[18:45] <timotimo> found the one on r/perl6/

[18:45] *** cdg left
[18:47] <Juerd> harmil: Note that reddit scores are fuzzy and that a 2 point drop can be false information.

[18:47] *** cdg joined
[18:48] <Juerd> Heh, I actually agree with that comment about ^fff^

[18:48] <moritz> that aside, reddit really is full of jerks

[18:50] <gfldex> if they have time to comment on reddit they likely are not in the rather small group of folk who get stuff done

[18:50] <perlpilot_> .oO( If "ff" stands for "flip flop", what does "fff" stand for?  "flippity floppity floo"? )

[18:50] <Juerd> One day I'll make a list of bulk I think we can just remove from Perl 6 because almost nobody uses them anyway.

[18:51] <ugexe> because almost no code that you're personally aware of uses them you mean

[18:51] <Juerd> Of course :)

[18:51] <ugexe> thats kinda the rub

[18:52] <dalek> doc: d8d26e2 | (Christopher Bottoms)++ | doc/Language/faq.pod6:

[18:52] <dalek> doc: Changed "Perl 6" to "Perl 6"

[18:52] <dalek> doc: 

[18:52] <dalek> doc: A non-breaking space means that no matter what browser someone is using, "Perl" and "6" will never seem separated by a line break.

[18:52] <dalek> doc: review: https://github.com/perl6/doc/commit/d8d26e2919

[18:52] <Juerd> But does anyone besides Larry and Damian ever use indirect method call syntax?

[18:52] <Juerd> Or ^fff

[18:52] *** FROGGS joined
[18:53] <AlexDaniel> indirect method call syntax? Like say 42: ?

[18:53] <jdv79> is there a cool p6 intro slide set i could use?

[18:53] <ugexe> most of reddit would say does anyone besides Larry and Damian use perl6 period

[18:53] <perlpilot_> Juerd: in P6?  I use it all the time.  In p5?  I try not to

[18:53] *** cosimo left
[18:54] <perlpilot_> Juerd: er ... not fff  :)

[18:54] <AlexDaniel> ah, the ."$foo" thingy?

[18:54] <Juerd> I can't parse "... not fff"

[18:54] <ugexe> CSV::Parser uses indirect methods

[18:54] <Juerd> ugexe: Oh :)

[18:55] <perlpilot_> It's Friday; the chances that I'll be able to communicate clearly are diminished  :)

[18:55] <Juerd> ugexe: Where?

[18:56] <jdv79> at a conf.  might carve out a slot.

[18:57] *** itaipu joined
[18:57] <ugexe> it uses stuff like $buffer."{self!sizer}"() throughout 

[18:57] <Juerd> That's not what I meant.

[18:57] <Juerd> I was referring to the "method_name $invocant: arg, arg, arg;" syntax.

[18:58] <P6fr> $str.=trans( ['a'..'y'] => ['A'..'z'] );

[18:58] <P6fr> m: $str.=trans( ['a'..'y'] => ['A'..'z'] );

[18:58] <camelia> rakudo-moar b89bf9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$str' is not declared. Did you mean any of these?␤    str␤    Str␤␤at <tmp>:1␤------> 3<BOL>7⏏5$str.=trans( ['a'..'y'] => ['A'..'z'] );␤»

[18:58] <Juerd> Symbolic access to method names is useful.

[18:58] <P6fr> m: my $str.=trans( ['a'..'y'] => ['A'..'z'] );

[18:58] <camelia> rakudo-moar b89bf9: OUTPUT«Method 'trans' not found for invocant of class 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[18:58] <Juerd> So I'm definitely not complaining about $foo."{....}"()

[18:59] <P6fr> m: my $str=trans( ['a'..'y'] => ['A'..'z'] );

[18:59] <camelia> rakudo-moar b89bf9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    trans used at line 1. Did you mean 'rand', 'tanh', 'srand'?␤␤»

[18:59] <Juerd> ugexe: get_line $csv:;  # this would be an example of what I meant

[18:59] <AlexDaniel> m: my $str = ‘hello’; $str.=trans( [‘a’..‘y’] => [‘A’..‘z’] ); say $str

[18:59] <camelia> rakudo-moar b89bf9: OUTPUT«HELLO␤»

[19:00] *** travis-ci joined
[19:00] <travis-ci> Doc build failed. Christopher Bottoms 'Changed "Perl 6" to "Perl 6"

[19:00] <travis-ci> https://travis-ci.org/perl6/doc/builds/146725746 https://github.com/perl6/doc/compare/e6f2aa04fbeb...d8d26e291901

[19:00] *** travis-ci left
[19:00] <Juerd> ugexe: my $csv = new CSV::Parser: :file_handle($fh);  # Another example

[19:00] <P6fr> m: my $str="perl6 is beautiful";my $str.=trans( ['a'..'y'] => ['A'..'z'] );

[19:00] <Juerd> Note the fine usage of colons there

[19:00] <camelia> rakudo-moar b89bf9: OUTPUT«Potential difficulties:␤    Redeclaration of symbol $str␤    at <tmp>:1␤    ------> 3my $str="perl6 is beautiful";my $str7⏏5.=trans( ['a'..'y'] => ['A'..'z'] );␤»

[19:00] *** cosimo joined
[19:00] <AlexDaniel> m: my $str = ‘hello’; say $str.uc

[19:00] <camelia> rakudo-moar b89bf9: OUTPUT«HELLO␤»

[19:00] <P6fr> m: my $str="perl6 is beautiful";my $str.=trans( ['a'..'y'] => ['A'..'z'] ).say;

[19:00] <camelia> rakudo-moar b89bf9: OUTPUT«Potential difficulties:␤    Redeclaration of symbol $str␤    at <tmp>:1␤    ------> 3my $str="perl6 is beautiful";my $str7⏏5.=trans( ['a'..'y'] => ['A'..'z'] ).say;␤PERL6 IS BEAUTIFUL␤»

[19:01] <timotimo> throw the second "my" out

[19:01] <AlexDaniel> P6fr: if you do “my $str .=” then it is calling a method on an Any

[19:01] <AlexDaniel> -an

[19:01] <timotimo> i'm surprised you can .= trans(...).say

[19:03] <P6fr> AlexDaniel  i don't understand

[19:03] <P6fr> ha

[19:03] <P6fr> m: my $str="perl6 is beautiful";say $str.=trans( ['a'..'y'] => ['A'..'z'] ).say;

[19:03] <camelia> rakudo-moar b89bf9: OUTPUT«PERL6 IS BEAUTIFUL␤True␤»

[19:03] <P6fr> ok

[19:03] <P6fr> thx

[19:04] <AlexDaniel> P6fr: well, “my $str .= foo” is basically “my $str = $str.foo”

[19:04] <AlexDaniel> P6fr: so the question is what is the value of $str there

[19:04] <AlexDaniel> m: my $str; say $str

[19:04] <camelia> rakudo-moar b89bf9: OUTPUT«(Any)␤»

[19:04] <P6fr> ha ok

[19:04] <mspo> that doesn't make a lot of sense to me

[19:05] <AlexDaniel> m: my $str = ‘hello’; $str .= uc().say; say $str

[19:05] <camelia> rakudo-moar b89bf9: OUTPUT«HELLO␤HELLO␤»

[19:06] <AlexDaniel> m: my $str = ‘hello’; ($str .= uc()).say; say $str

[19:06] <camelia> rakudo-moar b89bf9: OUTPUT«HELLO␤HELLO␤»

[19:07] <timotimo> interesting. useful. a bit surprising, perhaps

[19:07] <Juerd> mspo: What exactly doesn't make sense to you?

[19:07] <mspo> m: my $str = ‘hello’; $str .= uc(); say $str

[19:07] <camelia> rakudo-moar b89bf9: OUTPUT«HELLO␤»

[19:08] <AlexDaniel> timotimo: I'm not sure if that is useful. Anyone looking at that code will go “WTF??”

[19:08] <AlexDaniel> timotimo: I'd better use parens

[19:08] <timotimo> sure

[19:08] <Juerd> m: my $number = 4; $number += 2; say $number;

[19:08] <camelia> rakudo-moar b89bf9: OUTPUT«6␤»

[19:08] <Juerd> Does that make sense? :)

[19:08] <mspo> Juerd: because I want .= to do ~~= (append), probably

[19:08] <Juerd> m: my $number = 25; $number .= sqrt; say $number;

[19:08] <camelia> rakudo-moar b89bf9: OUTPUT«5␤»

[19:08] <AlexDaniel> m: my $str = ‘hello’; $str = $str . uc(); say $str # if yes, then why not that?

[19:08] <camelia> rakudo-moar b89bf9: OUTPUT«HELLO␤»

[19:08] <mspo> m: my $str = ‘hello’; $str ~~= uc(); say $str

[19:08] <camelia> rakudo-moar b89bf9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Cannot make assignment out of ~~ because chaining operators are too diffy␤at <tmp>:1␤------> 3my $str = ‘hello’; $str ~~=7⏏5 uc(); say $str␤»

[19:08] <Juerd> mspo: I think you mean ~=

[19:09] <mspo> m: my $str = ‘hello’; $str ~= uc(); say $str

[19:09] <camelia> rakudo-moar b89bf9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Calling uc() will never work with declared signature (Cool $s)␤at <tmp>:1␤------> 3my $str = ‘hello’; $str ~= 7⏏5uc(); say $str␤»

[19:09] <Juerd> mspo: You're now calling the function uc(), which requires an argument

[19:09] <Juerd> m: my $str = 'hello'; $str ~= uc(" there"); say $str;

[19:09] <camelia> rakudo-moar b89bf9: OUTPUT«hello THERE␤»

[19:09] <mspo> m: my $str = ‘hello’; $str ~= .uc(); say $str

[19:09] <camelia> rakudo-moar b89bf9: OUTPUT«Method 'uc' not found for invocant of class 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[19:09] <AlexDaniel> mspo: it translates to $str = $str ~ uc()

[19:09] <P6fr> wht ~= ?

[19:10] <AlexDaniel> P6fr: ~ concats two strings

[19:10] <mspo> m: my $str = ‘hello’; $str ~= $str.uc(); say $str

[19:10] <camelia> rakudo-moar b89bf9: OUTPUT«helloHELLO␤»

[19:10] <Juerd> mspo: Now you're calling $_.uc() because you can't combine .op operators

[19:10] <Juerd> mspo: I mean op=, not .op

[19:10] <AlexDaniel> m: my $str = ‘hello’; $str = $str ~ ‘ world’; say $str

[19:10] <camelia> rakudo-moar b89bf9: OUTPUT«hello world␤»

[19:10] <AlexDaniel> m: my $str = ‘hello’; $str ~= ‘ world’; say $str

[19:10] <camelia> rakudo-moar b89bf9: OUTPUT«hello world␤»

[19:10] <Juerd> P6fr: Do you know what += does?

[19:10] <P6fr> yes AlexDaniel  but  ~and = ?

[19:10] <AlexDaniel> P6fr: see above

[19:10] <P6fr> yes

[19:10] <Juerd> P6fr: ~= is like that, but for ~ instead of +

[19:11] <Juerd> P6fr: ~ concatenates strings, while + adds numbers.

[19:11] <P6fr> it's the same as .=

[19:11] <mspo> I guess I was in p5 mode

[19:11] <Juerd> In general: if there's an infix operator "op" that you use as "$foo op $bar", then you can write "$foo = $foo op $bar" using a shorter form: "$foo op= $bar"

[19:12] <Juerd> So the infix + becomes +=, the infix ~ becomes ~+, and the infix . becomes .=

[19:12] <Juerd> ~=, not ~+

[19:12] <mspo> oh right, larry wall showed that in a video when he made an infix op

[19:12] <Juerd> Held the shift key a bit too long :)

[19:12] <Juerd> Yes, it also works for infix operators you create yourself. So let's create that "op" operator:

[19:13] <Juerd> m: sub infix:<op> ($name1, $name2) { "$name1 ♥ $name2" }; my $statement = "Juerd"; $statement op= "Perl 6"; say $statement;

[19:13] <camelia> rakudo-moar b89bf9: OUTPUT«Juerd ♥ Perl 6␤»

[19:14] <P6fr> but wat's the point of putting :$str ~= $str.uc()

[19:14] <AlexDaniel> m: sub infix:<op> ($name1, $name2) { "$name1 ♥ $name2" }; say [op] "Juerd", "Perl 6", "custom ops"

[19:14] <camelia> rakudo-moar b89bf9: OUTPUT«Juerd ♥ Perl 6 ♥ custom ops␤»

[19:15] <AlexDaniel> m: sub infix:<op> ($name1, $name2) { "$name1 ♥ $name2" }; say ("Juerd", "AlexDaniel") »op« ("Perl 6", "custom ops")

[19:15] <camelia> rakudo-moar b89bf9: OUTPUT«(Juerd ♥ Perl 6 AlexDaniel ♥ custom ops)␤»

[19:16] <Juerd> P6fr: There isn't much point in doing that, because it would add the uppercased string to the original.

[19:16] <P6fr> ok

[19:16] <mspo> AlexDaniel: can you show that with comb?

[19:16] *** wamba joined
[19:17] <Juerd> Is that Perl 6 for "can you use that in a sentence?"?

[19:17] <P6fr> I want to thank you all for helping newbies

[19:17] <Juerd> P6fr: My pleasure :)

[19:17] <AlexDaniel> mspo: hmm, what do you mean?

[19:17] *** cosimo left
[19:18] <mspo> oh nevermind, I'm confused

[19:22] *** cooper joined
[19:22] *** cooper left
[19:22] *** cooper joined
[19:24] *** darutoko left
[19:25] *** huggable joined
[19:27] *** prammer joined
[19:30] *** colomon left
[19:32] *** edenc joined
[19:32] *** colomon joined
[19:40] *** cosimo joined
[19:44] <prammer> is there a dwim date/time module or function that can parse this: 2016-07-21T19:56:22.464+0000

[19:45] *** addison joined
[19:45] *** AlexDaniel joined
[19:45] <prammer> I tried DateTime::Parse, no luck

[19:47] <harmil> I think that's the state of the art right now...

[19:50] *** Herby_ left
[19:51] *** sena_kun joined
[19:52] <dalek> doc: 0b82fdd | (Christopher Bottoms)++ | doc/Type/Bool.pod6:

[19:52] <dalek> doc: Bool.succ, .pred methods explained (please review)

[19:52] <dalek> doc: 

[19:52] <dalek> doc: I first encountered the method "succ" today, and it was a method on Bool. At first I misunderstood it to mean "success", and wondered what type of failure or disaster "pred" stood for. Then I discovered that "succ" means "successor" and "pred" means "predecessor" and that they seem to totally make sense if we think of Bool in terms of it consisting of two possible enums.  So, that's what I tried to explain, but I would really like someone that f

[19:52] <dalek> doc: review: https://github.com/perl6/doc/commit/0b82fdd937

[19:52] <dalek> doc: 30c2714 | (Christopher Bottoms)++ | doc/Type/Bool.pod6:

[19:52] <dalek> doc: formatting tweak

[19:52] <dalek> doc: review: https://github.com/perl6/doc/commit/30c2714fba

[19:52] <dalek> doc: 657c0e0 | (Christopher Bottoms)++ | doc/Type/Bool.pod6:

[19:52] <dalek> doc: Merge pull request #744 from perl6/molecules-patch-1

[19:52] <dalek> doc: 

[19:52] <dalek> doc: Bool.succ, .pred methods explained

[19:52] <dalek> doc: review: https://github.com/perl6/doc/commit/657c0e0c5f

[19:53] *** addison left
[19:54] *** TEttinger joined
[19:55] *** colomon left
[19:57] *** colomon joined
[19:58] *** prammer left
[20:00] *** travis-ci joined
[20:00] <travis-ci> Doc build failed. Christopher Bottoms 'Merge pull request #744 from perl6/molecules-patch-1

[20:00] <travis-ci> https://travis-ci.org/perl6/doc/builds/146738211 https://github.com/perl6/doc/compare/d8d26e291901...657c0e0c5fb6

[20:00] *** travis-ci left
[20:03] *** kid51 joined
[20:09] <dalek> doc: 646039e | (Wenzel P. P. Peppmeyer)++ | .travis.yml:

[20:09] <dalek> doc: set PATH as rakudobrew demands

[20:09] <dalek> doc: review: https://github.com/perl6/doc/commit/646039e60c

[20:09] <dalek> doc: e97a2fa | (Wenzel P. P. Peppmeyer)++ | doc/ (2 files):

[20:09] <dalek> doc: Merge branch 'master' of https://github.com/perl6/doc

[20:09] <dalek> doc: review: https://github.com/perl6/doc/commit/e97a2faa1e

[20:09] *** Tonik joined
[20:09] <gfldex> system administration via git push is kinda slow

[20:12] <dalek> doc: 1b63b98 | (Christopher Bottoms)++ | doc/Type/Bool.pod6:

[20:12] <dalek> doc: deconfusing enum and enum value

[20:12] <dalek> doc: 

[20:12] <dalek> doc: Thanks @AlexDaniel

[20:12] <dalek> doc: review: https://github.com/perl6/doc/commit/1b63b98eb7

[20:13] <P6fr> dalek is a bot ?

[20:13] <gfldex> yes

[20:14] <P6fr> why he said thx alexdaniel ?

[20:14] <P6fr> what is said doc: ...

[20:14] <gfldex> that's part of the commit message

[20:14] <P6fr> why 

[20:14] <AlexDaniel> dalek: dalek is a bot that announces commits to different repos

[20:14] <AlexDaniel> oops

[20:14] <P6fr> ok

[20:15] *** colomon left
[20:15] <AlexDaniel> P6fr: commit in question is https://github.com/perl6/doc/commit/1b63b98eb737ae2491dfc245b3eff9e6a9eb1bd9

[20:15] <P6fr> there are a lot of commit

[20:15] *** colomon joined
[20:15] *** Tonik left
[20:16] <AlexDaniel> yeah, people are working on docs very actively nowadays

[20:16] <P6fr> how many user of perl6 ? you know ?

[20:16] <AlexDaniel> let's count

[20:16] <AlexDaniel> one, two, three, four, five, si…

[20:16] <P6fr> lol

[20:17] <AlexDaniel> P6fr: actually, it is very hard to estimate

[20:17] <P6fr> There's no statistics?

[20:17] <P6fr> ok

[20:17] <ugexe> PR: add telemetry to compiler

[20:18] <skids> You can only guess the number of users, unless you are closed source and use a license server.

[20:19] <gfldex> P6fr: i can't tell you how many but I can tell you where: http://imgur.com/a/LopbT

[20:20] <AlexDaniel> there are also debian stats https://qa.debian.org/popcon-graph.php?packages=rakudo%20rakudo-lib

[20:20] <gfldex> a good view count for my blog is 170

[20:20] <AlexDaniel> but this does not mean much

[20:21] *** travis-ci joined
[20:21] <travis-ci> Doc build passed. Christopher Bottoms 'formatting tweak'

[20:21] <travis-ci> https://travis-ci.org/perl6/doc/builds/146740312 https://github.com/perl6/doc/compare/molecules-patch-1

[20:21] *** travis-ci left
[20:21] <AlexDaniel> just don't do this: https://qa.debian.org/popcon-graph.php?packages=rakudo+perl&show_installed=on&from_date=&to_date=&hlght_date=&date_fmt=%25Y-%25m&beenhere=1

[20:21] <ugexe> how many users does phpixie have??

[20:21] * [Coke] gets a syntax error on this line of perl6 code: ------> sub update-git-checkout(⏏$url, $repo) {

[20:22] <dalek> doc: 2da45b5 | (Tom Browder)++ | doc/Language/tables.pod6:

[20:22] <dalek> doc: Slight additional editing for clarity and correctness

[20:22] <dalek> doc: review: https://github.com/perl6/doc/commit/2da45b54f1

[20:22] <AlexDaniel> [Coke]: so invalid, wow

[20:22] <gfldex> [Coke]: you may have a problem with a quote and/or interpolation

[20:23] <gfldex> m: sub f(){} say "{f(}"; say 'oi!';

[20:23] <camelia> rakudo-moar b89bf9: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3sub f(){}7⏏5 say "{f(}"; say 'oi!';␤    expecting any of:␤        infix␤        infix stopper␤        statement en…»

[20:27] *** domidumont joined
[20:27] *** travis-ci joined
[20:27] <travis-ci> Doc build passed. Wenzel P. P. Peppmeyer 'Merge branch 'master' of https://github.com/perl6/doc'

[20:27] <travis-ci> https://travis-ci.org/perl6/doc/builds/146741902 https://github.com/perl6/doc/compare/657c0e0c5fb6...e97a2faa1ea3

[20:27] *** travis-ci left
[20:32] *** solarbunny joined
[20:33] *** colomon left
[20:33] *** travis-ci joined
[20:33] <travis-ci> Doc build passed. Christopher Bottoms 'deconfusing enum and enum value

[20:33] <travis-ci> https://travis-ci.org/perl6/doc/builds/146742728 https://github.com/perl6/doc/compare/e97a2faa1ea3...1b63b98eb737

[20:33] *** travis-ci left
[20:34] *** colomon joined
[20:38] <Roamer`> m: my %a = :a(1), :c(2), :b("foo"); my %b = :b("foo"), :c(2), :a(1); dd %a{*}:v Z %b{*}:v;

[20:38] <camelia> rakudo-moar b89bf9: OUTPUT«((1, 1), (2, 2), ("foo", "foo")).Seq␤»

[20:38] <Roamer`> is this supposed to happen?  Can I depend on it?

[20:39] <[Coke]> you can't depend on hash order.

[20:39] <[Coke]> if you want things sorted for sure, sort them.

[20:41] <Roamer`> [Coke], yes, that's what I'm accustomed to (I remember when people made changes to actively randomize hash order even more than before)

[20:41] <Roamer`> [Coke], that's why I was a bit surprised by this result

[20:41] <Roamer`> or I guess it's just elements falling into the same hash containers for a small number of elements

[20:41] <Roamer`> I guess I shouldn't be surprised

[20:41] <Roamer`> hash buckets, I mean

[20:42] *** mcmillhj left
[20:44] *** travis-ci joined
[20:44] <travis-ci> Doc build passed. Tom Browder 'Slight additional editing for clarity and correctness'

[20:44] <travis-ci> https://travis-ci.org/perl6/doc/builds/146744968 https://github.com/perl6/doc/compare/1b63b98eb737...2da45b54f1a5

[20:44] *** travis-ci left
[20:45] <dalek> doc: 0c09e85 | (Wenzel P. P. Peppmeyer)++ | util/update-and-sync:

[20:45] <dalek> doc: explicitly add PATH that rakudobrew forgot

[20:45] <dalek> doc: review: https://github.com/perl6/doc/commit/0c09e85f44

[20:45] *** Possum joined
[20:47] *** rindolf joined
[20:48] *** daxim joined
[20:49] <gfldex> somebody doc something please, we need 2 commits to have changes to util/update-and-sync take effect :)

[20:49] *** eyck joined
[20:49] *** kid51 left
[20:52] <Roamer`> okay, yeah, I just tested it with 100 random keys and values and {*}:k and {*}:v did not return the same order on two hash that otherwise test the same with is-deeply... so things are back to normal

[20:52] <Roamer`> on two hashes even

[20:53] *** colomon left
[20:53] *** colomon joined
[20:56] *** kid51 joined
[20:57] *** zacts joined
[21:00] *** eyck left
[21:03] <dalek> doc: 1b39176 | skids++ | doc/Language/variables.pod6:

[21:03] <dalek> doc: fix typo

[21:03] <dalek> doc: review: https://github.com/perl6/doc/commit/1b3917659c

[21:04] <skids> There's 1/2

[21:04] *** domidumont left
[21:04] *** eyck joined
[21:05] *** Legal_Resale joined
[21:07] *** kid51 left
[21:07] *** lostinfog left
[21:11] <AlexDaniel> oh

[21:11] <AlexDaniel> s26 is now fixed

[21:12] *** FROGGS left
[21:14] *** mephinet- left
[21:14] <sena_kun> AlexDaniel, cool.

[21:17] <skids> gfdex: https://gist.github.com/skids/8ceb56206d68341256df1e3824e4162c

[21:17] *** perlpilot joined
[21:17] <skids> I have yet to run any spectests

[21:17] *** mephinet joined
[21:17] <skids> (and haven't run them on HEAD in a while either so don't know what normal failures are these days)

[21:18] <gfldex> skids: nice

[21:18] <skids> As usual, actual fix pretty easy, following the 5 levels of indirection and renaming was the hard part.

[21:18] <gfldex> we got https://docs.perl6.org/perl6.xhtml now

[21:18] *** adu joined
[21:18] <gfldex> FF crashed in print preview, chrome works fine

[21:20] *** eyck left
[21:25] <skids> Too many tabs open in FF to test that :-)

[21:25] <P6fr> m: say my %alphabet = "A".."Z" Z=> 1..26;

[21:25] <camelia> rakudo-moar b89bf9: OUTPUT«{A => 1, B => 2, C => 3, D => 4, E => 5, F => 6, G => 7, H => 8, I => 9, J => 10, K => 11, L => 12, M => 13, N => 14, O => 15, P => 16, Q => 17, R => 18, S => 19, T => 20, U => 21, V => 22, W => 23, X => 24, Y => 25, Z => 26}␤»

[21:25] <P6fr> perl is pretty

[21:25] <dalek> doc: a973e7b | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Language/regexes.pod6:

[21:25] <dalek> doc: Fix for #679 (^^ and the end of the string)

[21:25] <dalek> doc: review: https://github.com/perl6/doc/commit/a973e7bb69

[21:35] *** eyck_ joined
[21:35] <AlexDaniel> so basically someone is complaining that Perl 6 code is too short? Um… okay

[21:36] <harmil> AlexDaniel: Do you mean the reddit thread about Star?

[21:36] <AlexDaniel> yea

[21:37] <harmil> Yeah, that's clearly someone who doesn't know what he doesn't like in a programming language who just wants to not like Perl 6.

[21:37] *** wamba left
[21:38] <jdv79> too terse?

[21:38] <harmil> But that being said, I do think that Perl 6 runs the risk of Huffman coding itself into oblivion. It's a fine line, and we shouldn't lose track of it. ^ffff^ might be near that line ;)

[21:39] <AlexDaniel> but as always, you don't have to use it

[21:40] <jdv79> you could always tweak the lang by adding a bunch of oversized tokens if you wish:)

[21:40] *** tinita joined
[21:41] *** colomon left
[21:42] *** colomon joined
[21:42] <P6fr> AlexDaniel you work in info ?

[21:42] <AlexDaniel> P6fr: info? What info? No, I don't think so

[21:42] <P6fr> computer science

[21:43] <AlexDaniel> ah. I don't have a full-time job, so I'd say no

[21:43] <P6fr> ok

[21:44] *** vendethiel joined
[21:45] *** kid51 joined
[21:46] *** itaipu left
[21:46] *** eyck joined
[21:46] *** eyck_ left
[21:47] <harmil> AlexDaniel: Not having to use a construct doesn't make code easier to read.

[21:47] <harmil> All I'm saying is that it's a thing to keep in sight.

[21:47] <AlexDaniel> harmil: it does, given that nobody is using ^fff^ :)

[21:49] <vendethiel> o/

[21:49] *** adu left
[21:49] <harmil> AlexDaniel: Well, it's used here: https://learnxinyminutes.com/docs/perl6/

[21:49] <harmil> Which means it will probably be picked up by lots of beginners.

[21:50] <AlexDaniel> wow! It actually goes on to explain flip flop operators!

[21:50] <vendethiel> yes

[21:50] <vendethiel> I love flip flops :P

[21:50] *** zacts left
[21:50] <vendethiel> I considered removing it, for sure

[21:51] *** kaare_ joined
[21:56] <gfldex> m: my @numbers =  <4 8 15 16 23 42>; my $range = 0..2; .say for @numbers[$range];

[21:56] <camelia> rakudo-moar b89bf9: OUTPUT«16␤»

[21:56] *** eyck left
[21:56] <gfldex> m: my @numbers =  <4 8 15 16 23 42>; my \range = 0..2; .say for @numbers[range];

[21:56] <camelia> rakudo-moar b89bf9: OUTPUT«4␤8␤15␤»

[21:57] <AlexDaniel> m: my @numbers =  <4 8 15 16 23 42>; my $range = 0..2; .say for @numbers[@$range];

[21:57] <camelia> rakudo-moar b89bf9: OUTPUT«4␤8␤15␤»

[21:57] <AlexDaniel> hm

[21:58] *** firstdayonthejob joined
[21:58] <gfldex> m: my @numbers =  <4 8 15 16 23 42>; my $range := 0..2; .say for @numbers[$range];

[21:58] <camelia> rakudo-moar b89bf9: OUTPUT«4␤8␤15␤»

[21:59] <harmil> m: my @numbers =  <4 8 15 16 23 42>; my $range = 0..2; .say for @numbers[|$range]

[21:59] <camelia> rakudo-moar b89bf9: OUTPUT«4␤8␤15␤»

[22:02] *** colomon left
[22:07] *** sena_kun left
[22:08] <harmil> m: ("1", {$_ ~ $_.trans("01"=>"10")} ... *)[7].say

[22:08] <camelia> rakudo-moar b89bf9: OUTPUT«10010110011010010110100110010110011010011001011010010110011010010110100110010110100101100110100110010110011010010110100110010110␤»

[22:08] <harmil> I googled that. There were hits. *scared*

[22:10] <AlexDaniel> harmil: I'm currently cloning the whole ecosystem to search for ^fff^ :)

[22:10] *** Sgeo joined
[22:11] *** pmurias left
[22:12] <harmil> ha!

[22:12] <gfldex> AlexDaniel: when you are done please do a `du -sch`

[22:14] *** sdegutis joined
[22:14] *** sdegutis left
[22:16] <gfldex> bisectable my @numbers =  <4 8 15 16 23 42>; my $range = 0..2; .say for @numbers.[$range];

[22:16] <bisectable> gfldex: On both starting points the exit code is 0 and the output is identical as well

[22:16] <bisectable> gfldex: Output on both points: 16

[22:17] <gfldex> bisectable good=2015.12 bad=HEAD my @numbers =  <4 8 15 16 23 42>; my $range = 0..2; .say for @numbers.[$range];

[22:17] <bisectable> gfldex: On both starting points the exit code is 0 and the output is identical as well

[22:17] <bisectable> gfldex: Output on both points: 16

[22:17] *** firstdayonthejob left
[22:18] <AlexDaniel> that's what it does by default

[22:18] <AlexDaniel> commit: 2015.10 my @numbers =  <4 8 15 16 23 42>; my $range = 0..2; .say for @numbers.[$range];

[22:18] <committable> AlexDaniel: |«2015.10»: 16

[22:19] <P6fr> bug ?

[22:19] <AlexDaniel> I don't think so

[22:20] *** andrzejku left
[22:21] *** kaare_ left
[22:22] <gfldex> i think that's a bug, it's picking the wrong multi candidate for postcircumfix:<[ ]>

[22:22] <gfldex> it should pick on based on Iterable

[22:22] *** dvinciguerra_ joined
[22:22] <P6fr> but why "16"

[22:23] <AlexDaniel> m: my @x = 4,8,15; say +@x

[22:23] <camelia> rakudo-moar 7257b3: OUTPUT«3␤»

[22:23] <AlexDaniel> m: my @x = 4,8,15; say @x + 0

[22:23] <camelia> rakudo-moar 7257b3: OUTPUT«3␤»

[22:24] <AlexDaniel> P6fr: in numeric operations arrays turn into the count of elements in them

[22:24] <lizmat> m: my @numbers =  <4 8 15 16 23 42>; my $range := 0..2; .say for @numbers.[$range]

[22:24] <camelia> rakudo-moar 7257b3: OUTPUT«4␤8␤15␤»

[22:24] <AlexDaniel> or wait, is it the case

[22:24] <AlexDaniel> yeah

[22:25] <lizmat> m: my @numbers =  <4 8 15 16 23 42>; my $range = 0..2; .say for @numbers.[@$range]

[22:25] <camelia> rakudo-moar 7257b3: OUTPUT«4␤8␤15␤»

[22:25] <lizmat> on could argue that the single argument rule should be at work here

[22:26] *** rindolf left
[22:26] <lizmat> *one

[22:26] <lizmat> but I think we decided against that

[22:26] <lizmat> perhaps jnthn has some ideas about that

[22:26] <AlexDaniel> perhaps a good candidate for a @LARRY ticket?

[22:26] <lizmat> fine by me  :-)

[22:26] <lizmat> good night, #perl6!

[22:28] <gfldex> if the single argument rule is invoced, why does binding work?

[22:28] <AlexDaniel> ok, except for 40 modules with broken META6.json all modules are now cloned

[22:28] <AlexDaniel> gfldex: 256M

[22:29] <gfldex> i would have guessed less but then I forgot about .git

[22:29] <lizmat> gfldex: good question

[22:29] <lizmat> afk&

[22:29] <gfldex> i shall rakudobug

[22:31] <AlexDaniel> harmil: none for fff

[22:32] <AlexDaniel> there are some false-positives but no actual use

[22:32] <harmil> I'm going to publish ^fff^.pm in a few minutes ;-)

[22:33] <AlexDaniel> three uses of ff here: https://github.com/p6-pdf/perl6-Font-AFM/blob/master/lib/Font/AFM.pm#L242

[22:33] *** eyck joined
[22:33] *** spider-mario left
[22:34] <AlexDaniel> one more ff here: https://github.com/perl6/doc/blob/master/lib/Pod/Htmlify.pm6#L103

[22:35] <AlexDaniel> that's it

[22:35] <skids> gfldex: spectest went well so I filed rakudo PR #829

[22:36] <skids> If it goes in probably will break examples where you tried to doc the old behavior

[22:45] *** kid51 left
[22:49] *** adu joined
[22:49] *** adu left
[22:50] *** adu joined
[22:51] *** adu left
[22:53] *** labster left
[22:53] <gfldex> skids: i will keep an eye on it

[22:53] *** eyck left
[22:59] *** labster joined
[22:59] *** eyck joined
[23:05] *** girafe left
[23:14] *** jnthn joined
[23:16] *** dvinciguerra_ left
[23:18] <japhb> m: sub is-power-of-two($n) { !($n +& ($n - 1)) }; is-power-of-two($_).say for ^10;  # hahainternet 

[23:18] <camelia> rakudo-moar a37cd2: OUTPUT«True␤True␤True␤False␤True␤False␤False␤False␤True␤False␤»

[23:18] <AlexDaniel> unmatched}: here?

[23:21] *** Penguiniator joined
[23:25] *** huggable left
[23:26] <AlexDaniel> what's the difference between ｢"support" : { "source" : "…" }｣ and ｢"source-url": "…"｣ in META6.json files?

[23:27] <timotimo> one of them is deprecated i think?

[23:28] <AlexDaniel> out of 680 modules there are only 26 modules with ｢"support" : { "source" : "…" }｣

[23:28] <AlexDaniel> interestingly, 19 out of these 26 are by Zoffix :)

[23:29] *** Penguiniator left
[23:32] <cog_> .tell vendethiel thx for the URL

[23:32] <yoleaux> cog_: I'll pass your message to vendethiel.

[23:35] <AlexDaniel> .tell unmatched} maybe this should be fixed, take a look: http://irclog.perlgeek.de/perl6/2016-07-22#i_12892188 

[23:35] <yoleaux> AlexDaniel: I'll pass your message to unmatched}.

[23:37] *** cdg left
[23:38] *** cdg joined
[23:42] *** cdg left
[23:43] <P6fr> me: [5+9+6+3+5+1+4+7].trans("+" =>" ")

[23:44] <P6fr> m: [5+9+6+3+5+1+4+7].trans("+" =>" ")

[23:44] <camelia> rakudo-moar a37cd2: ( no output )

[23:44] <P6fr> m: [5+9+6+3+5+1+4+7].trans("+" =>" ").say

[23:44] <camelia> rakudo-moar a37cd2: OUTPUT«40␤»

[23:44] <P6fr> m: [5+9+6+3+5+1+4+7].trans([+] =>" ").say

[23:44] <camelia> rakudo-moar a37cd2: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix => instead␤at <tmp>:1␤------> 3[5+9+6+3+5+1+4+7].trans([+] =>7⏏5" ").say␤»

[23:45] <P6fr> m: [5+9+6+3+5+1+4+7].trans(+ =>" ").say

[23:45] <camelia> rakudo-moar a37cd2: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Prefix +  requires an argument, but no valid term found␤at <tmp>:1␤------> 3[5+9+6+3+5+1+4+7].trans(+7⏏5 =>" ").say␤    expecting any of:␤        prefix␤»

[23:46] <P6fr> how replace the operator + by nothing

[23:47] <P6fr> the most simple and quick way. I do not know if .trans is the most reliable

[23:47] <P6fr> pls

[23:48] <P6fr> m: {5+9+6+3+5+1+4+7}.trans(+ =>" ").say

[23:48] <camelia> rakudo-moar a37cd2: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Prefix +  requires an argument, but no valid term found␤at <tmp>:1␤------> 3{5+9+6+3+5+1+4+7}.trans(+7⏏5 =>" ").say␤    expecting any of:␤        prefix␤»

[23:48] <P6fr> m: {5+9+6+3+5+1+4+7}.trans([+] =>" ").say

[23:48] <camelia> rakudo-moar a37cd2: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix => instead␤at <tmp>:1␤------> 3{5+9+6+3+5+1+4+7}.trans([+] =>7⏏5" ").say␤»

[23:48] <P6fr> m: {5+9+6+3+5+1+4+7}.trans("+" =>" ").say

[23:48] <camelia> rakudo-moar a37cd2: OUTPUT«Method 'trans' not found for invocant of class 'Block'␤  in block <unit> at <tmp> line 1␤␤»

[23:49] <P6fr> m: trans(5+9+6+3+5+1+4+7,"+" =>" ").say

[23:49] <camelia> rakudo-moar a37cd2: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    trans used at line 1. Did you mean 'rand', 'tanh', 'srand'?␤␤»

[23:50] <P6fr> m: [5+9+6+3+5+1+4+7].trans(+ =>" ").say

[23:50] <camelia> rakudo-moar a37cd2: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Prefix +  requires an argument, but no valid term found␤at <tmp>:1␤------> 3[5+9+6+3+5+1+4+7].trans(+7⏏5 =>" ").say␤    expecting any of:␤        prefix␤»

[23:50] <P6fr> m: [5+9+6+3+5+1+4+7].trans("+" =>" ").say

[23:50] <camelia> rakudo-moar a37cd2: OUTPUT«40␤»

[23:50] <parabolize> '5+9+6+3+5+1+4+7'.trans("+" =>" ").say

[23:50] <P6fr> m: [5+9+6+3+5+1+4+7].trans("1" =>" ").say

[23:50] <camelia> rakudo-moar a37cd2: OUTPUT«40␤»

[23:51] <parabolize> it works on strings not arrays

[23:51] <P6fr>  [5+9+6+3+5+1+4+7].trans("+" =>" ").say for result 59635147

[23:51] <P6fr> hum

[23:52] <P6fr>  [5+9+6+3+5+1+4+7].words.trans("+" =>" ").say for result 59635147

[23:52] <AlexDaniel> m: say [5, 9, 6, 3, 5, 1, 4, 7].join(‘ ’)

[23:52] <camelia> rakudo-moar a37cd2: OUTPUT«5 9 6 3 5 1 4 7␤»

[23:52] <P6fr> m: [5+9+6+3+5+1+4+7].words.trans("+" =>" ").say

[23:52] <camelia> rakudo-moar a37cd2: OUTPUT«40␤»

[23:52] <P6fr> ha

[23:53] <P6fr> so trans is bad for that

[23:53] <AlexDaniel> no, it's just that 5+9+6+3+5+1+4+7 will collapse into 40 no matter what you do

[23:53] <P6fr> ok

[23:54] <P6fr> and for delete + so ?

[23:55] <P6fr> m: say [5+9+6+3+5+1+4+7].split("+")

[23:55] <camelia> rakudo-moar a37cd2: OUTPUT«(40)␤»

[23:56] <P6fr> ok

[23:56] <P6fr> it's not possible

[23:56] <parabolize> m: say Q[5+9+6+3+5+1+4+7].split("+")

[23:56] <camelia> rakudo-moar a37cd2: OUTPUT«(5 9 6 3 5 1 4 7)␤»

[23:56] <AlexDaniel> you can't do anything unless it is a string

[23:56] <P6fr> haaa dont know Q

[23:56] <parabolize> P6fr: your still using an array like a string

[23:57] <P6fr> agree it's recorder

[23:58] <P6fr> m: say Q.WHAT

[23:58] <camelia> rakudo-moar a37cd2: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Couldn't find terminator . (corresponding . was at line 1)␤at <tmp>:1␤------> 3say Q.WHAT7⏏5<EOL>␤    expecting any of:␤        .␤»

[23:58] *** BenGoldberg joined
[23:58] <P6fr> go google so

[23:58] <parabolize> P6fr: https://docs.perl6.org/language/quoting#Literal_strings:_Q

[23:59] <parabolize> https://github.com/perl6/roast/blob/master/S02-literals/quoting.t

