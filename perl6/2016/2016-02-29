[00:03] *** kjs_ left
[00:09] *** espadrine_ left
[00:12] *** FreezerburnV joined
[00:12] <FreezerburnV> Hello all

[00:12] *** notostraca is now known as TEttinger

[00:13] *** vendethiel joined
[00:25] <timotimo> hello mister burns :P

[00:29] <FreezerburnV> timotimo, Smithers! Pull the lever to drop this man through the floor! ...what do you mean the inspectors had it removed for "safety reasons"? I guess you're safe for today

[00:30] <timotimo> :3

[00:30] *** RabidGravy left
[00:33] *** neilb left
[00:34] *** vendethiel left
[00:39] *** tmch left
[00:44] *** idiosyncrat_ joined
[00:46] *** zed00 joined
[00:57] *** laz78 left
[01:03] <flussence> uhm, panda just took upwards of 50 minutes to install and strace showed it going crazy with unlink in .precomp dirs for most of that. just thought I should mention it...

[01:07] <timotimo> are we deleting old, incompatible precompiled versions?

[01:08] <flussence> I'm doing this from fresh clones (git clean -dfx) of rakudo, its subrepos and panda each time, so no

[01:28] *** laz78 joined
[01:32] <dalek> DBIish: 234c6fa | (Salvador Ortiz)++ | META (2 files):

[01:32] <dalek> DBIish: META.info -> META6.json

[01:32] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/234c6fa029

[01:34] <sortiz> japhb, Missing the changed META.info, fixing now...

[01:35] <dalek> ecosystem: 73434b5 | (Salvador Ortiz)++ | META.list:

[01:35] <dalek> ecosystem: DBIish: META.info -> META6.json

[01:35] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/73434b5747

[01:38] *** laz78 left
[02:01] *** zed00 left
[02:02] *** telex left
[02:08] *** telex joined
[02:13] <dalek> DBIish: be2a2b2 | (Salvador Ortiz)++ | META6.json:

[02:13] <dalek> DBIish: Remove 'Role'

[02:13] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/be2a2b2a3c

[02:17] *** telex left
[02:20] *** abaugher left
[02:21] *** abaugher joined
[02:21] *** telex joined
[02:24] <sortiz> "Missing serialize REPR function for REPR CPointer" in Panda::Installer.install line 61, Trying to install DBIish. Ideas anyone?

[02:30] <skids> Somehow a NativeCall CPointer got into a constant fold?  Just guessing.

[02:30] *** aborazmeh joined
[02:31] *** aborazmeh left
[02:31] *** aborazmeh joined
[02:34] *** Woodi left
[02:35] <sortiz> DBDish::Pg now uses "class PGconn is export is repr('CPointer') { ...", dunno if the 'is export' can be a problem.

[02:35] *** Woodi joined
[02:37] *** kid511 left
[02:38] *** telex left
[02:39] *** aborazmeh left
[02:43] *** rpburkholder joined
[02:44] *** Amnez777 left
[02:44] *** Cabanossi left
[02:45] *** nowan_ left
[02:46] *** FreezerburnV left
[02:46] *** rburkholder left
[02:46] *** tadzik left
[02:46] *** orbus left
[02:46] *** ilbot3 left
[02:46] *** Cabanossi joined
[02:46] *** pdcawley_ joined
[02:46] *** orbus joined
[02:46] *** Amnez777 joined
[02:46] *** tadzik joined
[02:46] *** pdcawley left
[02:47] *** ilbot3 joined
[02:47] *** bakedb left
[02:47] *** bakedb_ joined
[02:47] *** nebuchad` joined
[02:48] *** nowan joined
[02:48] *** squain left
[02:48] *** squain joined
[02:49] *** nebuchadnezzar left
[02:51] <dalek> ecosystem: 1191b55 | (Anthony Parsons)++ | META.list:

[02:51] <dalek> ecosystem: g/flussence/d

[02:51] <dalek> ecosystem: 

[02:51] <dalek> ecosystem: I've decided to drop the few modules I had here for various reasons. Shouldn't

[02:51] <dalek> ecosystem: cause problems; I don't know of anyone that was actually using these, but I'll

[02:51] <dalek> ecosystem: leave the repos up temporarily just in case.

[02:51] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/1191b5536d

[02:52] *** telex joined
[02:52] *** FreezerburnV joined
[02:52] <FreezerburnV> Can I use rakudobrew to build a specific commit of rakudo from git?

[02:55] <FreezerburnV> Looks like I can. That was easy

[02:56] <FreezerburnV> Hm, apparently rakudobrew wants to build 32 bit on my 64 bit system, which removes JIT ability. How can I force it to build 64 bit?

[03:01] <diakopter> now it'll be really negative

[03:02] <diakopter> (ecosystem)

[03:02] *** rpburkholder left
[03:05] <FreezerburnV> :D FROGGS fixed the "output to stdout breaks compiling" issue (or at least bandaided it, according to the commit)

[03:05] <skids> FreezerburnV: I've never heard of that behavior.  Any idea why it detects 32-bit?

[03:06] <FreezerburnV> skids, No clue :( All I know is I saw it flash by during compiling to test a commit of rakudo that JIT was disabled due to compiling for x86 on windows

[03:06] <FreezerburnV> Lemme up the number of buffers in the command prompt and do another build to see if I can put something into a gist for you

[03:06] *** adu joined
[03:08] *** wamba left
[03:10] <diakopter> flussence: dare I ask the various reasons?

[03:10] <skids> Hrm, well, me not using windows, maybe someone else will have an easier time figuring it out.

[03:12] <flussence> diakopter: complete lack of motivation, mostly. I'd rather get it out the way now while they're only slightly bitrotted and buggy

[03:12] <diakopter> did the 50 minutes to install panda contribute?

[03:14] <diakopter> flussence: or did you mean it took 50 minutes to use panda to install other things?

[03:14] <flussence> oh, that 50 minutes was ./bootstrap.pl

[03:17] <FreezerburnV> skids, Actually I might be wrong abotu that 32-bit build. Another line mentioned detecting 64-bit. So I'm not actually sure what I have built

[03:20] *** telex left
[03:20] <flussence> diakopter: but yeah, it did make me realise this stopped being -Ofun for me months ago. I haven't actually done anything interesting in a *long* time, my perl6 time's been completely burned up on dealing with breakage I'm not responsible for.

[03:22] <skids> I take it actually having users might have helped a bit too -- I know I find that discouraging.

[03:22] <skids> (not having them, that is)

[03:31] <sortiz> flussence, I can share your frustration. Right now I'm fighting with CURI with problems *installing* DBIish. :(

[03:31] <diakopter> O_O

[03:35] *** telex joined
[03:39] *** Actualeyes joined
[03:42] <ugexe> just use zef to install panda instead of using bootstrap.pl

[03:51] <sortiz> skids++, You were right, the install time precomp fails 'cus I was using 'constant SQLITE_TRANSIENT = Pointer.new(-1);'

[03:51] *** FreezerburnV left
[03:55] *** noganex joined
[03:55] <skids> That'd do it.

[03:58] <sortiz> skids, CPointer REPR should implement a basic serialization for this cases, seems doable.

[03:58] *** noganex_ left
[04:01] <skids> I wouldn't know enough to comment, other than it would have to be for special cases known to be impossible to dereference on the given architecture.

[04:01] *** cbk2 joined
[04:13] <sortiz> skids, Anyway thank you so much, I could not find the problem without your hint.

[04:15] <skids> np glad to help

[04:17] <sortiz> pro

[04:18] *** molaf joined
[04:19] <dalek> DBIish: 6f13c35 | (Salvador Ortiz)++ | lib/DBDish/SQLite (2 files):

[04:19] <dalek> DBIish: SQLite: Should not declare a constant Pointer

[04:19] <dalek> DBIish: 

[04:19] <dalek> DBIish: Fails at install time with a cryptic

[04:19] <dalek> DBIish: "Missing serialize REPR function for REPRCPointer"

[04:19] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/6f13c35d2e

[04:21] *** sftp left
[04:21] *** sftp joined
[04:26] *** HoloIRCUser joined
[04:46] *** Cabanoss- joined
[04:49] *** Cabanossi left
[04:49] *** Cabanoss- is now known as Cabanossi

[04:51] *** vendethiel joined
[04:52] *** HoloIRCUser left
[05:12] *** molaf left
[05:15] *** vendethiel left
[05:23] *** khw left
[05:27] *** Actualeyes left
[05:28] *** Actualeyes joined
[05:44] *** idiosyncrat_ left
[05:45] *** Cabanossi left
[05:47] *** Cabanossi joined
[05:51] <skids> .tell jnthn Another S17 question: should Channel.fail immediately discard unreceived items in the queue?  Currently it does not seem to.

[05:51] <yoleaux> skids: I'll pass your message to jnthn.

[05:54] <dalek> doc: a7468f3 | skids++ | doc/Type/Channel.pod:

[05:54] <dalek> doc: Sundry updates/elaborations.

[05:54] <dalek> doc: review: https://github.com/perl6/doc/commit/a7468f33e0

[06:01] *** skids left
[06:09] *** cbk2 left
[06:09] *** cbk_ joined
[06:11] *** [Sno] left
[06:21] *** Guest70064 left
[06:36] *** bjz joined
[06:46] *** ugexe left
[06:46] *** bitmap left
[06:46] *** bjz left
[06:49] *** bitmap joined
[06:50] *** ugexe joined
[06:59] *** geraud left
[07:01] *** bjz joined
[07:04] *** domidumont joined
[07:09] *** domidumont left
[07:09] *** bjz left
[07:09] *** domidumont joined
[07:11] *** bjz joined
[07:17] *** sjoshi joined
[07:17] *** buharin joined
[07:18] <buharin> hello my friends

[07:23] *** CIAvash joined
[07:25] *** baest_ is now known as baest

[07:28] *** vendethiel joined
[07:28] *** nebuchad` is now known as nebuchadnezzar

[07:38] *** firstdayonthejob joined
[07:38] *** nakiro joined
[07:43] <buharin> how to convert enum to string?

[07:48] <sortiz> m: my enum Foo ( A => 0, B => 1, D => 2 ); dd A.key; say A.value;

[07:48] <camelia> rakudo-moar 9dc21a: OUTPUT«"A"␤0␤»

[07:50] <buharin> :)

[07:50] <buharin> thanks

[07:50] <sortiz> m: my enum Foo ( A => 0, B => 1, D => 2 ); say ~A; say A;

[07:50] <camelia> rakudo-moar 9dc21a: OUTPUT«A␤A␤»

[07:51] <sortiz> m: my enum Foo ( A => 0, B => 1, D => 2 ); say ~A; say A + B

[07:51] <camelia> rakudo-moar 9dc21a: OUTPUT«A␤1␤»

[07:51] <buharin> m: dd "asd";

[07:51] <camelia> rakudo-moar 9dc21a: OUTPUT«"asd"␤»

[07:52] *** vendethiel left
[07:52] <sortiz> Enums are context dependent.

[07:52] *** sno joined
[07:53] <sortiz> m: my enum Foo ( A => 0, B => 1, D => 2 ); dd ~A, A, +A;

[07:53] <camelia> rakudo-moar 9dc21a: OUTPUT«"A"␤Foo::A␤0␤»

[07:58] <moritz> \o

[07:58] <sortiz> \o moritz 

[07:58] *** neilb joined
[08:01] *** fireartist joined
[08:03] <buharin> hey what is this? https://github.com/perl6/roast

[08:03] <buharin> it is language tests?

[08:03] <buharin> isnt

[08:03] <moritz> yes, language tests

[08:06] *** notostraca joined
[08:07] *** TEttinger left
[08:09] *** wwwbukolaycom left
[08:10] <buharin> moritz, how to pass by ref? is ref?

[08:10] <buharin> it won't work

[08:11] *** darutoko joined
[08:11] <moritz> buharin: what are you trying to achieve?

[08:11] <moritz> passing is by read-only reference by default

[08:12] *** domidumont left
[08:12] *** zakharyas joined
[08:14] *** domidumont joined
[08:14] *** buharin left
[08:18] *** nakiro left
[08:19] *** nakiro joined
[08:22] *** neilb left
[08:31] *** kent\n joined
[08:32] *** adu left
[08:33] <sortiz> .tell japhb The DBIish install time issues are solved and a PR opened in MoarVM for a definite fix. Thanks for your report.

[08:33] <yoleaux> sortiz: I'll pass your message to japhb.

[08:33] *** ely-se joined
[08:36] *** TeamBlast joined
[08:37] *** tmch joined
[08:38] *** firstdayonthejob left
[08:40] *** ely-se left
[08:41] *** ely-se joined
[08:42] *** neilb joined
[08:42] *** pierrot joined
[08:42] *** pierrot is now known as Guest55357

[08:43] *** domidumont left
[08:43] *** abraxxa joined
[08:48] *** TeamBlast left
[08:48] *** domidumont joined
[08:50] *** Shozan is now known as SHODAN

[08:56] *** TeamBlast joined
[08:57] *** neilb left
[09:01] <dalek> ecosystem: 44e38d6 | (Dean Powell)++ | META.list:

[09:01] <dalek> ecosystem: Add Locale-Codes-Country to ecosystem

[09:01] <dalek> ecosystem: 

[09:01] <dalek> ecosystem: See https://github.com/PowellDean/Locale-Codes-Country.git

[09:01] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/44e38d64c0

[09:01] <dalek> ecosystem: 9b9cdc7 | RabidGravy++ | META.list:

[09:01] <dalek> ecosystem: Merge pull request #163 from PowellDean/master

[09:01] <dalek> ecosystem: 

[09:01] <dalek> ecosystem: Add Locale-Codes-Country to ecosystem

[09:01] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/9b9cdc7ec1

[09:05] *** RabidGravy joined
[09:06] *** Gruber is now known as Grrrr

[09:08] *** TeamBlast left
[09:09] *** dakkar joined
[09:11] *** araujo joined
[09:12] *** neilb joined
[09:14] *** notostraca is now known as TEttinger

[09:16] <RabidGravy> MARNING!

[09:16] *** TeamBlast joined
[09:16] *** labster joined
[09:17] <sortiz> \o RabidGravy 

[09:26] *** riatre left
[09:26] *** TEttinger left
[09:27] *** riatre joined
[09:28] *** SCHAAP137 joined
[09:34] <RabidGravy> someone be a love and make something that pretends to be an icecast server

[09:34] <Hotkeys> Marnin

[09:34] <RabidGravy> erp

[09:35] <RabidGravy> I've been testing Audio::Libshout along with all my other modules quite frequently and it's been passing

[09:37] *** vendethiel joined
[09:39] <RabidGravy> however on actually trying to use it last night I discovered that it wasn't actually sending anything to the server, because of ye old Native typeconstraint thing deep in some async code

[09:39] <RabidGravy> and of course failing silently

[09:39] <Hotkeys> Spooky

[09:46] * sortiz Learned, also, that one should install and use the modules and don't depend only on passing tests. :)

[09:47] *** gregf__ left
[09:47] *** pmurias joined
[09:47] <pmurias> hi

[09:47] <Hotkeys> Hi

[09:48] <Hotkeys> Speaking of modules I really should get around to writing Lingua::En::Pluralize that I made a repo for ages ago

[09:49] *** gregf_ joined
[09:49] <pmurias> ugexe: is there anything stoping zef from becoming a panda replacement?

[09:49] <sortiz> Too much golf? Hotkeys ;-)

[09:50] *** wamba joined
[09:55] <RabidGravy> maybe if I do another set of tests that by-pass the async parts

[09:56] <sortiz> What needs a dummy icecast server?

[09:56] <Hotkeys> sortiz: I haven't done much golfing recently either

[09:57] <Hotkeys> I've been fretting about school stuff mostly

[09:57] <Hotkeys> How much I dislike my history class etc.

[09:59] <sortiz> Hotkeys, just joking. 

[10:02] <RabidGravy> sortiz Audio::Libshout - I can test that it *thinks* it sent something but without actually *listening* to the resultant stream I don't know whether it was any good :)

[10:06] <RabidGravy> If I get a minute I may actually have a look at making one, after all if you can make one in javascript (StreamMachine) how difficult can it be?

[10:06] *** wamba left
[10:06] *** wamba joined
[10:08] <RabidGravy> it's basically HTTP with some custom parts and a lot of chunks sent over an open connection

[10:11] *** vendethiel left
[10:12] <sortiz> I've never worked on audio apps.

[10:18] * jnthn last did audio stuff when he was in his teens :)

[10:18] <yoleaux> 05:51Z <skids> jnthn: Another S17 question: should Channel.fail immediately discard unreceived items in the queue?  Currently it does not seem to.

[10:19] <jnthn> Had fun programming simple reverb/delay effects :)

[10:21] <sortiz> Sound funny ;)

[10:25] *** TreyHarr1 left
[10:26] *** rindolf joined
[10:27] <jnthn> .tell skids No, it defaults to not losing information.

[10:27] <yoleaux> jnthn: I'll pass your message to skids.

[10:28] <jnthn> .tell skids I expect it'd be sort-of easy to write a subclass that did that

[10:28] <yoleaux> jnthn: I'll pass your message to skids.

[10:32] *** neilb left
[10:32] *** cgfbee joined
[10:34] *** neilb joined
[10:42] *** espadrine_ joined
[10:45] *** wamba left
[10:47] <dalek> nqp: 11bebcb | (Pawel Murias)++ | src/vm/js/Compiler.nqp:

[10:47] <dalek> nqp: [js] Use a cheating source looking heuristic to determin in which way we should compile a block.

[10:47] <dalek> nqp: 

[10:47] <dalek> nqp: The previous one was broken by the optimizer.

[10:47] <dalek> nqp: If we guess incorrectly the semantics of the generated code shouldn't be broken.

[10:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/11bebcb142

[10:47] <dalek> nqp: 8064bfb | (Pawel Murias)++ | src/vm/js/nqp-runtime/ (14 files):

[10:47] <dalek> nqp: [js] Fix errors found by js-lint.

[10:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8064bfbf90

[10:47] <dalek> nqp: d023883 | (Pawel Murias)++ | src/vm/js/ (7 files):

[10:47] <dalek> nqp: [js] Uncuddle else/elsif

[10:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d023883283

[10:54] <lizmat> good *, #perl6!

[10:56] <jnthn> o/ lizmat 

[10:57] <lizmat> jnthn  o/

[11:03] *** espadrine_ is now known as espadrine

[11:06] <pmurias> \o

[11:07] <llfourn> o/

[11:11] *** neilb left
[11:11] <RabidGravy> actually I'm wondering if I actually need to make that much of an icecast server really, it just needs to check there's a PUT, check the auth header matches what I sent, check the content type and content length and the jobs a good un

[11:25] *** telex left
[11:26] *** vendethiel joined
[11:26] *** telex joined
[11:32] *** yeahnoob joined
[11:37] *** spider-mario joined
[11:44] *** kaare_ joined
[11:46] *** wamba joined
[11:47] *** vendethiel left
[11:47] *** ely-se left
[11:57] *** labster left
[11:58] *** M-matthew joined
[12:05] *** kid51 joined
[12:08] <dalek> DBIish: 6f4452f | (Salvador Ortiz)++ | .travis.yml:

[12:08] <dalek> DBIish: Make travis-ci do an install

[12:08] <dalek> DBIish: 

[12:08] <dalek> DBIish: For a more complete testing.

[12:08] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/6f4452f97a

[12:08] *** M-Illandan joined
[12:09] <moritz> sortiz++

[12:09] *** ely-se joined
[12:12] *** Skarsnik joined
[12:13] <dalek> ecosystem: 6271bd4 | RabidGravy++ | META.list:

[12:13] <dalek> ecosystem: Rename META for Audio::Libshout

[12:13] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/6271bd4d22

[12:19] <llfourn> why don't we add v6.c spectest to travis on rakudo?

[12:20] <Skarsnik> will take forever?

[12:21] <llfourn> is that the reason? it's not like you have to wait for it.

[12:23] <moritz> llfourn: iirc there's a 20min timeout on one core, or something like that

[12:23] <moritz> llfourn: which is also the reason why rakudo doesn't run spectests at all on travis

[12:23] <llfourn> ah ok

[12:24] <moritz> llfourn: if you do a bit of research and it turns out that's not the case anymore, that would be awesome :-)

[12:24] * llfourn takes a look

[12:25] <llfourn>  If a script or test suite takes longer than 50 minutes (or 120 minutes on travis-ci.com)

[12:25] <llfourn> https://docs.travis-ci.com/user/customizing-the-build/#Build-Timeouts

[12:25] <llfourn> I don't think that make spectest should take 2 hours even on one core

[12:26] * llfourn searches for other limitations

[12:27] <moritz> memory might be interesting

[12:28] <llfourn> it seems in May 2013 they increased it to 50mins

[12:28] <moritz> though since the core build works, it can't be that bad :-)

[12:28] <moritz> ah right, .org is the free and open source version, and .com is the commercial one

[12:28] <llfourn> ah

[12:28] <moritz> so the 50min limit is the one that applies to us

[12:29] <llfourn> yeah 50min might be too tight

[12:29] <moritz> (just yesterday I listened to a podcast with the travis folks)

[12:29] <llfourn> (wouldn't mind listening to a podcast like that)

[12:31] <llfourn> moritz: https://www.producthunt.com/podcasts/continuous-integration-with-travis-ci-josh-kalderimis-python-test-podcast #?

[12:34] <llfourn> oh no he's a kiwi

[12:35] *** kid51 left
[12:44] *** vendethiel joined
[12:49] *** CIAvash left
[12:51] *** yeahnoob left
[12:54] <moritz> llfourn: yes

[12:55] *** rindolf left
[13:02] *** ggoebel17 left
[13:04] *** Actualeyes left
[13:06] *** vendethiel left
[13:15] *** esh joined
[13:15] * [Coke] ~~

[13:16] *** esh_ left
[13:18] *** araujo_ joined
[13:18] *** uruwi joined
[13:19] *** araujo_ left
[13:20] *** araujo_ joined
[13:21] *** araujo left
[13:21] *** araujo_ left
[13:23] *** johndau joined
[13:24] *** araujo_ joined
[13:26] *** araujo_ left
[13:26] *** andreoss joined
[13:29] *** Actualeyes joined
[13:29] *** araujo joined
[13:31] *** araujo left
[13:33] *** araujo joined
[13:35] *** araujo left
[13:36] *** araujo joined
[13:36] *** araujo left
[13:36] *** araujo joined
[13:36] *** erdic joined
[13:37] *** araujo left
[13:42] <dalek> ecosystem: 31a020c | (Lance Wicks)++ | META.list:

[13:42] <dalek> ecosystem: Add new Scientist module

[13:42] <dalek> ecosystem: 

[13:42] <dalek> ecosystem: This is a WIP port of the Perl5 Scientist module into Perl6.

[13:42] <dalek> ecosystem: It does not have all features yet.

[13:42] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/31a020cf62

[13:42] <dalek> ecosystem: 0e8a642 | azawawi++ | META.list:

[13:42] <dalek> ecosystem: Merge pull request #162 from lancew/patch-1

[13:42] <dalek> ecosystem: 

[13:42] <dalek> ecosystem: Add new Scientist module

[13:42] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/0e8a642c54

[13:51] *** Psyche^ joined
[13:52] <sortiz> Using -Ifoo when running perl6 modify the precompilation behavior ? (I see a foo.precomp directory created, something more)

[13:53] <jnthn> sortiz: Yes, it creates a .precomp directory under -Ilib directories to store precomps

[13:54] <sortiz> Asking 'cus: with RAKUDO_LOG_PRECOMP=1, RAKUDO_MODULE_DEBUG=1 and a clean ~/.perl6, running "perl6 -Ilib t/foo.t" the only that I see precompiled is "Test". None of the involves modules.

[13:54] <nine_> Other than that precompilation works exactly the same. I even centralized the code for "load an existing precomp file, otherwise precompile and load the result". There's not much repository specific code involved anymore.

[13:55] <nine_> sortiz: remove lib/.precomp before running that

[13:55] *** Psyche^_ left
[13:56] <sortiz> Nuked, re running and saving the output...

[13:59] <sortiz> The same results: https://gist.github.com/salortiz/5abae4b898666c4f9d2c

[13:59] *** FreezerburnV joined
[14:00] <sortiz> nine_, When those changes landing in nom?

[14:02] *** skids joined
[14:02] *** perlpilot joined
[14:02] <sortiz> That test involve the use of a constant pointer.

[14:02] <nine_> sortiz: The centralized code is already in nom. method try-load in PrecompilationRepository

[14:04] *** pmurias left
[14:04] <nine_> That looks quite odd

[14:04] <sortiz> Updating rakudo...

[14:04] <nine_> What does your t/foo.t look like?

[14:06] <sortiz> It's DBDish's t/40-sqlite-common.t

[14:08] *** araujo joined
[14:08] <sortiz> I'm testing with and without "constant Foo = Pointer.new(-1)", but can't see the precompilation attempt.

[14:08] <nine_> Oh that's interesting. It uses "need"

[14:08] *** araujo left
[14:08] *** araujo joined
[14:09] <sortiz> Indeed. I uses "need" whenever a module does not export anything.

[14:10] <sortiz> (to avoid the "import" step)

[14:10] *** araujo left
[14:11] *** araujo joined
[14:12] *** bpmedley left
[14:12] *** araujo left
[14:13] *** araujo joined
[14:15] <nine_> Aaah

[14:15] <nine_> use v6; use Test; use lib 't/lib'; <--- you're changing the repo chain after loading a module. This deactivates all precompilation.

[14:16] *** rindolf joined
[14:16] <rudi_s> Hi. Is this expected?

[14:17] <rudi_s> m: say "".split("x", :skip-empty).perl 

[14:17] <camelia> rakudo-moar 9dc21a: OUTPUT«("",)␤»

[14:17] <sortiz> Ok, something like that I was thinking when asked the question obove!!

[14:17] <rudi_s> I'd expect to get just ().

[14:17] <sortiz> *above

[14:18] <nine_> sortiz: you asked about commandline -I which is save as that happens before the first use or need statement :)

[14:18] <perlpilot> m: say "foo".split("x", :skip-empty).perl;

[14:18] <camelia> rakudo-moar 9dc21a: OUTPUT«("foo",)␤»

[14:18] <perlpilot> rudi_s: For the same reason as that one.

[14:19] <perlpilot> rudi_s: er, you get "" in yours for the same reason I get "foo" in mine

[14:19] <rudi_s> perlpilot: I see. The extra "" feel a little confusing though.

[14:19] <DrForr> '' isn't empty, it's nonexistent :)

[14:20] <rudi_s> Well ...

[14:20] <dalek> doc: 38f902a | (Simon Ruderich)++ | doc/Type/Str.pod:

[14:20] <dalek> doc: Str: split: use .perl in examples

[14:20] <dalek> doc: 

[14:20] <dalek> doc: Shows the exact return value (Str vs. Int) and makes it clear when empty

[14:20] <dalek> doc: strings are returned.

[14:20] <dalek> doc: review: https://github.com/perl6/doc/commit/38f902a5f8

[14:20] <dalek> doc: 45447c7 | (Simon Ruderich)++ | doc/Type/Str.pod:

[14:20] <dalek> doc: Str: split: add splitting the empty string as example

[14:20] <dalek> doc: review: https://github.com/perl6/doc/commit/45447c705e

[14:21] <sortiz> nine, sure, not the same question, I'm searching...,  I wasn't aware that a "use lib ..." disables precompilation.

[14:21] <nine_> We should advertise that fact better

[14:21] *** uruwi left
[14:22] <sortiz> Ok, but seams that not at install time, though.

[14:23] <nine_> The install code does not do that use lib 't/lib' from the test script

[14:24] <sortiz> You right, now is clear.

[14:26] *** nakiro left
[14:26] *** sjoshi left
[14:27] *** araujo left
[14:27] <lizmat> afk for a few hours&

[14:29] <sortiz> nine_, Thank you for your time.

[14:29] *** nakiro joined
[14:30] *** TEttinger joined
[14:31] *** uruwi joined
[14:34] *** xinming left
[14:35] *** xinming joined
[14:35] *** chris2 joined
[14:36] <chris2> hi. i'm running panda --notests install Task::Star on a fresh installed system, and it fails with Terminal::ANSIColor:ver<*>:auth<>:api<> already installed

[14:36] <chris2> probably because Grammar::Debugger already depended on that

[14:38] <nine_> Now that I think of it, with the work I'm doing, we may even be able to relax the no precomp after use lib rule somewhat.

[14:38] <tadzik> huh, that shouldn't be happening

[14:38] <tadzik> it shouldn't attempt to install modules that are already in

[14:38] <chris2> there are no modules initially

[14:38] <tadzik> chris2: were all of those modules installed by panda?

[14:38] <chris2> but it shouldnt attempt to install modules it already installed as deps

[14:39] <tadzik> yep

[14:39] <chris2> the system has nqp, moarvm and panda installed

[14:39] <llfourn> nine_: I thought use lib just meant that it would just change the head repo not that it would never precomp anything after that

[14:39] <chris2> does panda already pull in Terminal::ANSIColor?

[14:39] <tadzik> so, steps to reproduce is: install fresh rakudo, fresh panda, install Grammar::Debugger, install Task::Star?

[14:39] <tadzik> chris2: no, it doesn't

[14:39] <chris2> tadzik: just Task::Star

[14:39] <tadzik> oh

[14:40] <tadzik> so it first installs grammar::debugger, for which it installs Term::ANSIColor, and then installs Term::ANSIColor itself?

[14:40] <tadzik> and that fails?

[14:40] <chris2> look slike it

[14:40] <tadzik> stupid bug

[14:40] <tadzik> and yes, it is a bug :)

[14:40] <tadzik> you can probably workaround by --force installing Task::Star

[14:40] <tadzik> which is hardly ideal

[14:40] <chris2> http://sprunge.us/eDKC output

[14:40] <tadzik> dependency resolution in panda could clearly be better

[14:41] <tadzik> yeah, I see the problem

[14:41] <chris2> lets try force

[14:42] <chris2> that helps

[14:42] *** vendethiel joined
[14:42] <tadzik> it'll also install things that have tests failing

[14:43] <chris2> i skip tests :P

[14:43] <sortiz> tadzik, In fact I expect that an attempt to install some module already installed don't proceed until the error reported by CURI.

[14:43] <tadzik> I don't like how --force ended up

[14:43] <tadzik> sortiz: I don't think I understand

[14:43] <perlpilot> .oO(  May you never need to use the --force )

[14:43] <perlpilot> .oO( May the --force *not* be with you? )

[14:44] <chris2> are these hashed file names going to stay btw?

[14:44] <perlpilot> There's a good star wars pun in there somewhere

[14:44] <sortiz> If I have, for example DBIish installed, what is the correct form for update it?

[14:45] <tadzik> just panda install should work, provided that the version actually changed

[14:45] <gfldex> chris2: the files names will stay, error messages will improve

[14:46] <tadzik> wow, --force is even documented as "install even if the module's already installed"

[14:47] <tadzik> I'd think --update may feel less...forced

[14:47] <tadzik> --force sounds like a fancy --notests

[14:48] <tadzik> I don't like what panda became over time :/

[14:48] <tadzik> good thing the QA hackathon is soon :)

[14:48] <chris2> there is only one version for each module?

[14:49] <tadzik> where? )

[14:49] <tadzik> :)

[14:49] <tadzik> there can be many version in the ecosystem

[14:49] <chris2> they are not listed on the website

[14:50] <tadzik> modules.perl6.org?

[14:50] <chris2> yeah

[14:50] *** Actualeyes left
[14:50] *** molaf joined
[14:50] <chris2> and the META files i looked at only had one

[14:50] <tadzik> well, by spec we rakudo implementation we can have many versions

[14:50] *** araujo joined
[14:50] <chris2> is there a way to tell panda which one to install?

[14:50] <nine_> llfourn: with the current implementation we only load precomp files from one single repository. If you load a module and then do a use lib, you change the head repo and thereby change the repository we would load precomp files from. We cannot guarantee that this would work, so we disable precomp in that case.

[14:51] *** araujo left
[14:51] <tadzik> chris2: I *think* panda knows how to do that

[14:51] <tadzik> if it actually detects more than one available

[14:51] <tadzik> thing is, I don't think we have even one such occurence "in the wild"

[14:51] <llfourn> nine_: ah ok I always thought that it had to be the first statement anyway... in which case I think it works?

[14:52] <chris2> tadzik: this essentially means it will be impossible to install todays version tomorrow, yes? :P

[14:52] <chris2> i know this is all new and beta

[14:53] <tadzik> chris2: well, if you can get ahold of it, you will be :)

[14:53] <tadzik> so this is how it looks:

[14:53] <tadzik> modules.perl6.org only provides one META.info per module in the ecosystem

[14:53] <tadzik> panda installs stuff from there, so it can only install the latest (only) versions available

[14:53] <nine_> llfourn: yes, you may change $*REPO as much as you like before loading modules

[14:54] <tadzik> if you, say, clone the git repo with the module, roll it back a couple commits and tell panda to install that, it'll do it just fine

[14:54] <perlpilot> tadzik: are you planning on redesigning panda at the QA hackathon?

[14:54] <tadzik> (should)

[14:54] <tadzik> perlpilot: yes

[14:54] *** Actualeyes joined
[14:54] <tadzik> perlpilot: possibly before :)

[14:54] <llfourn> nine_: cool thanks for clearing that up :)

[14:54] <nine_> tadzik: panda should really check if a dist is already installed before installing again.

[14:54] <tadzik> but I got a bit out of the loop on a lot of things, and I'm gonna need the company of all the competent people at QAH :)

[14:54] <tadzik> nine_: agreed

[14:54] <chris2> but when repos dont tag releases etc it is quite a mess to figure out

[14:54] <llfourn> nine_: also ++ for working on precomp it really helps

[14:54] <tadzik> nine_: I hope CUR allows that? :)

[14:55] <tadzik> I hate it when software throws when you try to do something, but doesn't tell *if* you can do something

[14:55] *** kjs_ joined
[14:55] <perlpilot> tadzik++ good luck!  :)

[14:55] <tadzik> perlpilot: thanks, I'll probably need it :)

[14:56] <tadzik> chris2: that's a problem we have, our module ecosystem, since the dawn of time, is "a list of git repos"

[14:56] <tadzik> ironically, it makes it hard to managed multiple version of stuff

[14:56] *** maybekoo5 joined
[14:56] <perlpilot> tadzik: having a few smart people handy gives you better odds than "luck" :)

[14:56] <tadzik> :) yeah

[14:56] <chris2> fun to hear given than cpan should be well known to everyone :~

[14:57] *** zpmorgan left
[14:57] <kjs_> good afternoon. Does anyone know how to detect whether a JSON parser just parsed the value null.

[14:58] <skids> tadzik: that's simply a matter of not actually utilizing the features of a git repo... e.g. defining a standard for tags that are significant to the installer.

[14:58] <yoleaux> 10:27Z <jnthn> skids: No, it defaults to not losing information.

[14:58] <yoleaux> 10:28Z <jnthn> skids: I expect it'd be sort-of easy to write a subclass that did that

[15:00] <skids> .tell jnthn thanks. I'd say it might be worth 6.d consideration to add a method which does flush the queue, otherwise Channel code gets fugly when you want to handle cancellation like that.

[15:00] <yoleaux> skids: I'll pass your message to jnthn.

[15:02] <nine_> tadzik: there's a $*REPO.resolve($dependency-specification) method now that returns a CompUnit if it found one and Nil otherwise. What panda and zef actually need however would be something that takes a Distribution object.

[15:02] <kjs_> note to self: ah, I think evaluating the value in a boolean context is the way to do it.

[15:02] <tadzik> skids: yeah, and good lack getting your module authors to do that :P

[15:03] *** vendethiel left
[15:03] <tadzik> nine_: is Distribution still something specced that module managers are expected to define on their own?

[15:05] <skids> tadzik: I'd leave the task of wrangling the module authors to the users, filing issues or PRs.  They seem to want it :-)

[15:05] *** FreezerburnV left
[15:05] <tadzik> skids: ye, that might even work :P

[15:08] *** jusafing joined
[15:09] *** prammer joined
[15:10] <nine_> tadzik: yes and now. ugexe++ has done a lot of thinking on the topic and in short: Distribution should become a role. Concrete implementations are provided by the Repository classes _and_ module managers. A module manager might want to provide a Distribution::Tar or Distribution::Directory class while Repository::Installation may provide a Distribution class that deals with all our SHA-1 fun

[15:11] <nine_> So the module manager may ask $*REPO for some name, auth, version (exact match) and get a Distribution object back. Or Nil if it's not installed.

[15:11] <nine_> I wonder how that method may be called

[15:12] <tadzik> makes sense

[15:15] *** donaldh joined
[15:17] <rudi_s> Is return %() the correct way to return an empty hash in a function?

[15:17] <jnthn> return {} is another way

[15:17] <yoleaux> 15:00Z <skids> jnthn: thanks. I'd say it might be worth 6.d consideration to add a method which does flush the queue, otherwise Channel code gets fugly when you want to handle cancellation like that.

[15:17] <rudi_s> jnthn: Ah, too easy. Thanks.

[15:20] <chris2> does the perl6 repl with linenoise not understand utf8 lengths?

[15:20] <rudi_s> Is there a "return" out of a block?

[15:20] <rudi_s> I just want to skip the rest of the block.

[15:20] <jnthn> rudi_s: no; use a sub instead of a block if you want to use return

[15:21] <jnthn> rudi_s: If you're in a loop, there's also `next` to skip the current iteration

[15:21] <rudi_s> Ok, thanks.

[15:21] *** avenj joined
[15:22] <perlpilot> Or just use goto   ;)

[15:23] *** dalek left
[15:23] *** dalek joined
[15:23] *** ChanServ sets mode: +v dalek

[15:24] *** uruwi left
[15:28] *** andreoss left
[15:29] <dalek> DBIish: 2baf7aa | (Salvador Ortiz)++ | META6.json:

[15:29] <dalek> DBIish: Use a real version (now at 0.1.0) in META6.json

[15:29] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/2baf7aafeb

[15:29] <dalek> DBIish: 4986523 | (Salvador Ortiz)++ | .travis.yml:

[15:29] <dalek> DBIish: Merge branch 'master' of github.com:perl6/DBIish

[15:29] <dalek> DBIish: 

[15:29] <dalek> DBIish: A local change in .travis-yml

[15:29] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/49865237de

[15:37] *** khw joined
[15:37] *** jaldhar joined
[15:38] *** llfourn left
[15:40] <jaldhar> hello.  I was trying to compile nqp for rakudo 2016.2 on Ubuntu Linux 14.04 and one test fails  in t/nqp/60-bigint.t is that a known problem?

[15:43] *** fireartist left
[15:43] *** buu joined
[15:43] *** buu left
[15:45] *** buu joined
[15:45] *** buu left
[15:46] <perlpilot> jaldhar: can you make a gist of the failure?  I don't remember any test failures when I compiled Rakudo on ubuntu 14.04, but I may have just missed it.

[15:46] *** jaldhar_ joined
[15:47] <Skarsnik> sortiz++ for DBIish version

[15:49] *** jaldhar left
[15:49] *** rindolf left
[15:52] *** vendethiel joined
[15:52] *** jaldhar_ is now known as jaldhar

[15:55] <lucs> Given "a〔", how can I obtain its ostensible length (3)?

[15:55] *** rindolf joined
[15:56] <DrForr> m: say "a〔".chars

[15:56] <camelia> rakudo-moar 9dc21a: OUTPUT«2␤»

[15:56] <lucs> Same for .codes.

[15:57] <lucs> (which all makes sense of course)

[15:57] <sjn> \o/m: say "a〔".ords

[15:57] <sjn> m: say "a〔".ords

[15:57] <camelia> rakudo-moar 9dc21a: OUTPUT«(97 12308)␤»

[15:57] <DrForr> I see 2 characters there, what about that doesn't look like 2?

[15:57] <jnthn> m: say ""a〔".codes

[15:57] <camelia> rakudo-moar 9dc21a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/u_40CdsYOi␤Two terms in a row␤at /tmp/u_40CdsYOi:1␤------> 3say ""7⏏5a〔".codes␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        s…»

[15:57] <jnthn> m: say "a〔".codes

[15:57] <camelia> rakudo-moar 9dc21a: OUTPUT«2␤»

[15:57] <jnthn> m: say "a〔".NFC

[15:57] <camelia> rakudo-moar 9dc21a: OUTPUT«NFC:0x<0061 3014>␤»

[15:57] <jnthn> m: say "a〔".NFD.elems

[15:57] <camelia> rakudo-moar 9dc21a: OUTPUT«2␤»

[15:57] <lucs> DrForr: Monospaced, it takes up 3 spaces.

[15:57] <sjn> it's a whide character in there

[15:57] <sjn> wide*

[15:57] <lucs> Right.

[15:57] <jnthn> Hmm

[15:58] <jnthn> I wonder if those have a unicode property on 'em

[15:58] <lucs> (I'm trying to align stuff.)

[15:59] <jnthn> m: say uniname('〔')

[15:59] <camelia> rakudo-moar 9dc21a: OUTPUT«LEFT TORTOISE SHELL BRACKET␤»

[15:59] *** rindolf left
[16:02] <jnthn> m: say uniprop('〔', 'East_Asian_Width')

[16:02] <camelia> rakudo-moar 9dc21a: OUTPUT«0␤»

[16:03] <jnthn> hmm

[16:03] <jnthn> m: say uniprop('x', 'East_Asian_Width')

[16:03] <camelia> rakudo-moar 9dc21a: OUTPUT«0␤»

[16:03] <b2gills> m: say "a〔".encode.bytes

[16:03] <camelia> rakudo-moar 9dc21a: OUTPUT«4␤»

[16:03] <jnthn> Well, so much for that...

[16:04] <b2gills> It would be nice to be able to find out what uniprops a given character has. That is what makes sense as the second argument to uniprop

[16:05] <jnthn> b2gills: Well, every character has all the props in some sense... :-)

[16:06] <jnthn> http://unicode.org/cldr/utility/properties.jsp is a list

[16:07] <jnthn> Sadly, I don't see anything in there about the problem in question

[16:08] <jnthn> Which may mean it's in the realm of "that's a rendering issue, not a Unicode one" :)

[16:08] <DrForr> http://www.unicode.org/pending/properties.html#General_Category_and_Other_Properties doesn't mention width.

[16:09] <geekosaur> width is outside the realm of unicode, it is a property of a particular font

[16:11] <lucs> Hmm... '〔' has an East_Asian_Width property of 'wide': http://unicode.org/cldr/utility/character.jsp?a=3014&B1=Show

[16:11] <b2gills> What is interesting is some of the space codepoints have a defined width, but it is defined in terms of other characters (EN/EM SPACE)

[16:13] *** spider-mario left
[16:17] <sjn> would it be sensible to have a .columns method (or something) that helps figure out stuff terminal output alignment stuff?

[16:17] <sjn> (is there already such a method?)

[16:18] <jnthn> sjn: Since it'd seemingly depend on font, not sure how far that'd go to help...

[16:18] <sjn> well, with terminal output, it might be safe to assume a fixed-with/monospace font?

[16:18] <perlpilot> sounds like good user-space module fodder

[16:19] <DrForr> Link in to ncurses and mbwidth() functions?

[16:19] <jnthn> Yeah, sounds like module space

[16:19] <jnthn> m: say uniprop('〔', 'East_Asian_Width')

[16:19] <camelia> rakudo-moar 9dc21a: OUTPUT«0␤»

[16:19] <jnthn> I'm curious why that comes back as 0 though

[16:20] *** QORRiE joined
[16:20] <jnthn> m: say uniprop('〔', 'Some_Unknown_prop')

[16:20] <camelia> rakudo-moar 9dc21a: OUTPUT«0␤»

[16:20] <jnthn> Probably 'cus we don't actually support it...

[16:20] <sjn> no warnings either?

[16:20] *** cdg joined
[16:20] *** musiKk_ joined
[16:21] <jnthn> Nope

[16:21] <jnthn> (Think TimToady++ wired this stuff up, going to assume the failsoft was intentional)

[16:22] *** dwarring left
[16:23] *** donaldh left
[16:27] <geekosaur> the existence of some of it depends on what version of the unicode standard, hence of icu, is available

[16:28] *** uruwi joined
[16:28] *** kjs_ left
[16:32] <jnthn> In this case, Moar supports the latest Unicode standard (doesn't use ICU), but just doesn't pull that property into its database.

[16:34] *** ely-se left
[16:35] *** vendethiel left
[16:42] *** jaldhar_ joined
[16:45] *** jaldhar left
[16:46] *** Actualeyes left
[16:47] *** xinming left
[16:48] *** Actualeyes joined
[16:49] <rudi_s> Is it possible to split a path in its path components. e.g. "foo/bar/baz".IO.bla -> "foo", "bar", "baz" - I know I could use split("/") but that might break on different systems.

[16:49] <ugexe> .tell pmurias no. it already past feature parity as well as handling things like cpan, allowing plugins, etc

[16:49] <yoleaux> ugexe: I'll pass your message to pmurias.

[16:51] <hoelzro> rudi_s: probably something in IO::Spec

[16:51] *** araujo joined
[16:51] <hoelzro> m: '/dev/null'.IO.splitpath

[16:51] <camelia> rakudo-moar 9dc21a: OUTPUT«Method 'splitpath' not found for invocant of class 'IO::Path'␤  in block <unit> at /tmp/VPvef8hlIo line 1␤␤»

[16:51] *** domidumont left
[16:53] *** pmurias joined
[16:53] <pmurias> ugexe: the README mentions that tests and features need to be ported from the old version

[16:53] <yoleaux> 16:49Z <ugexe> pmurias: no. it already past feature parity as well as handling things like cpan, allowing plugins, etc

[16:53] <pmurias> ugexe: anything you want help with?

[16:56] *** xinming joined
[16:57] *** nakiro left
[17:00] <rudi_s> hoelzro: splitpath doesn't help, it only splits $volume, $dir and $file:

[17:00] <rudi_s> m: say $*SPEC.splitpath("/foo/bar/baz").perl

[17:00] <camelia> rakudo-moar 9dc21a: OUTPUT«("", "/foo/bar/", "baz")␤»

[17:00] <RabidGravy> splitdir

[17:01] <RabidGravy> m: say $*SPEC.splitdir($*CWD.Str)

[17:01] <camelia> rakudo-moar 9dc21a: OUTPUT«( home camelia)␤»

[17:01] *** zakharyas left
[17:01] *** musiKk_ left
[17:02] <pmurias> hmm, do we have a way to make the command line parser for main take short flags: both -h and --help?

[17:03] <rudi_s> RabidGravy: Thanks.

[17:04] <rudi_s> Splitting is a little weird:

[17:04] <rudi_s> m: say $*SPEC.splitdir("/").perl

[17:04] <camelia> rakudo-moar 9dc21a: OUTPUT«("", "")␤»

[17:04] <rudi_s> m: say $*SPEC.splitdir("/a").perl

[17:04] <camelia> rakudo-moar 9dc21a: OUTPUT«("", "a")␤»

[17:04] <rudi_s> m: say $*SPEC.splitdir("/a/").perl

[17:04] <camelia> rakudo-moar 9dc21a: OUTPUT«("", "a", "")␤»

[17:05] <rudi_s> I guess that's perl6's normal splitting behavior but I still find it confusing.

[17:07] <RabidGravy> m: say $*CWD.Str.split('/').perl

[17:07] <camelia> rakudo-moar 9dc21a: OUTPUT«("", "home", "camelia")␤»

[17:08] <perlpilot> pmurias: sub MAIN( :h(:$help) ) { ... }

[17:08] <RabidGravy> m: say $*CWD.Str.split('/', :skip-empty).perl

[17:08] <camelia> rakudo-moar 9dc21a: OUTPUT«("home", "camelia")␤»

[17:09] <RabidGravy> however it probably isn't quite as easy as adding the :skip-empty to the split in IO::Spec

[17:09] <ugexe> pmurias: ah, that can probably be removed (lots of testing just happens in CI now). the features its missing from before is paralellization (although it should easy to add in the future) and the CLI overlay that did loading bar animations and stuff. the last big thing to do is a messaging system for the adapters to talk to the client and the client to either the CLI frontend or a theoretical GUI frontend. and

[17:09] <ugexe> optimizations in regards to looping over X distributions to find a match

[17:10] *** jaldhar_ left
[17:10] *** jaldhar_ joined
[17:15] *** uruwi left
[17:17] *** vendethiel joined
[17:24] *** uruwi joined
[17:24] *** sufrostico joined
[17:27] *** dakkar left
[17:28] *** sufrosti1o joined
[17:31] *** dakkar joined
[17:36] *** TimToady joined
[17:38] *** kjs_ joined
[17:39] *** nowan_ joined
[17:41] *** nowan left
[17:41] *** muraiki joined
[17:42] <muraiki> jnthn: sorry to bother you directly about this, but a few months ago I mentioned a bug and you thought it had to do with the garbage collector stalling during a long running perl 6 process. did you happen to look into this or do you know an RT ticket about it? I couldn't find one

[17:44] *** maybekoo5 left
[17:47] *** dakkar left
[17:48] *** pederindi left
[17:55] *** abraxxa left
[17:57] <timotimo> https://github.com/bluebear94/Terminal-WCWidth  -  btw

[17:57] <timotimo> lucs: ^ did you see this yet?

[17:58] *** cdg left
[17:58] <timotimo> i'm honestly getting a little bit annoyed by how often people ask for some feature that exists in the ecosystem already and don't bother to look for it there ... why do we have an ecosystem at all? :|

[17:59] <timotimo> if only the 10 most interesting modules are ever going to be used and the rest is never looked at?

[18:00] <btyler> discoveribility is a very hard problem

[18:00] *** vendethiel left
[18:00] <Skarsnik> yay this process almost take half my ram after 10h of running x) thx leak :)

[18:00] <btyler> see: CPAN, npm, etc.

[18:00] <Skarsnik> how it's hard?

[18:00] <Skarsnik> modules.perl6.org x)

[18:02] <timotimo> i disagree. i searched for "width" and it only gave me one result, which was "Returns what the character width should be on the terminal."

[18:02] <timotimo> the problem of discoverability on npm is potentially that for any given task, there's thirty people with at least fifty different solutions and none of them talk about what's different between them and others

[18:04] *** TreyHarr1 joined
[18:04] *** TreyHarr1 is now known as TreyHarris

[18:05] *** cdg joined
[18:05] <timotimo> oh well

[18:06] <btyler> fair enough. I suppose I just mean that successfully using a module ecosystem requires some fair degree of expertise already (knowing that it's there, knowing what terms to search for, knowing which modules are reasonable choices and which are half-baked weekend projects, etc.)

[18:06] <timotimo> lucs: don't interpret this as me complaining about you; nobody bothered to look for this module and i've seen this pattern multiple times already

[18:06] <timotimo> ah, yes, that's true as well

[18:06] <ugexe> we could start using a field to advertise features, like `tags`

[18:06] <timotimo> we don't yet have half-bakedness indicators on modules' readmes or anywhere, really

[18:07] <jdv79> isn't that in META already?

[18:07] <timotimo> only few modules mention what their status actually is

[18:07] <btyler> it's the google search problem: if you don't use the same word as the experts use, you'll have a hard time finding the expert solution

[18:07] <btyler> because you don't share vocab or habits

[18:08] <btyler> totally understand the frustration, though, you're on the front lines here :)

[18:08] <jdv79> yes, META has tags.  also, metacpan search helps if the dist contains enough keywords.

[18:08] <jdv79> don't remember if reviews are part of the search.  that could help.

[18:11] <Skarsnik> The issue with tags, they need to be 'standardized'

[18:12] <Juerd> Or normalized.

[18:12] <jdv79> s/need/could/

[18:12] <ugexe> later on once the `supercedes`, `superceded_by`, `emulates` are used search clients can use other modules search relevant meta data to augment/improve its own

[18:12] *** kjs_ left
[18:16] <jdv79> timotimo: actually - it worked:  http://hack.p6c.org:5001/search?size=20&q=width&search_type=modules

[18:16] <jdv79> problem solved:)

[18:16] *** kjs_ joined
[18:17] <jdv79> of course the pod view just crashed...  i'll bug that.

[18:18] *** kjs_ left
[18:19] *** vendethiel joined
[18:20] *** kjs_ joined
[18:21] *** uruwi left
[18:21] *** khw left
[18:21] <nine_> Hm....watch some more Mr. Robot or try to fix the locking issue with the new precomp code?

[18:22] <jdv79> fixed it

[18:23] <jdv79> must have been caught up in that rigamarole with precomp and me failing to get along:(

[18:27] <Skarsnik> damn still no comment on https://github.com/rakudo/rakudo/pull/716 ? x)

[18:27] <Skarsnik> I say don't force yourself if you just want to relax x)

[18:29] <nine_> Well if I didn't have to give a talk about this stuff next week at the GPW...

[18:30] *** addison_ joined
[18:34] *** zpmorgan joined
[18:37] *** uruwi joined
[18:41] <ugexe> give a talk about mr. robot

[18:41] <nine_> I don't know if that would be easier :)

[18:42] *** prammer left
[18:42] <nine_> Question to the audience: what would you want to hear in a talk titled "A look behind the curtains - module loading in Perl 6"

[18:44] *** prammer joined
[18:46] <timotimo> "how do i debug stuff when it goes wrong", perhaps? "what parts can be replaced by user-supplied code?"?

[18:46] <timotimo> "what makes it more interesting/powerful than in perl5 or python, for example"

[18:48] *** nowan_ left
[18:48] *** nowan joined
[18:52] <timotimo> "how did you learn from other languages' module systems"?

[18:54] <perlpilot> nine_: I'd want to know what works today and what's broken.  And if there's a really interesting story about why it's broken, maybe that too.

[18:54] *** Actualeyes left
[18:54] <perlpilot> nine_: and all the stuff that timotimo said :)

[18:55] *** cdg left
[18:55] *** domidumont joined
[18:57] <timotimo> don't forget to point out places where you could drop in cool things like "well, i actually distributed my own moar executable with a zip file concatenated to it which contains all the bytecode" or something

[18:58] *** prammer left
[19:01] *** firstdayonthejob joined
[19:01] *** SCHAAP137 left
[19:02] *** khw joined
[19:09] <skids> m: my @skew = (([\,] (Nil xx *)) Z "0 1 2\n3 4 5\n6 7 8".lines.map(+«*.words)).map(*.flat); print @skew[*;$_].grep(Int) ~ "\n" for 1..^@skew[*-1].cache.elems

[19:09] <camelia> rakudo-moar 9dc21a: OUTPUT«0␤1 3␤2 4 6␤5 7␤8␤»

[19:09] <skids> (Today's daily programmer)

[19:10] <nine_> timotimo, perlpilot: thanks for your input :) Very appreciated

[19:10] * timotimo is often glad to help

[19:11] * lizmat starts working on the next P6W

[19:13] <nine_> Wait a second, why am I checking a precomp file that we've already loaded? If it was good the first time, it ought to be still fine. Especially since we don't load it again anyway but just return the cached CompUnit

[19:15] *** dha joined
[19:17] *** ptolemarch joined
[19:17] * perlpilot changes nine's precomp file between loadings just to mess with him

[19:23] <nine_> And the locking issue is gone :)

[19:23] <nine_> Which is much more relaxing than another Mr Robot episode :)

[19:25] <timotimo> \o/

[19:25] <timotimo> glad to hear it

[19:28] <nine_> However I wonder why this hasn't been an issue with nom so far. The bug is clearly there already.

[19:31] <jnthn> muraiki: I think it's a variant of https://github.com/MoarVM/MoarVM/issues/140. I've been somewhat recovering from the Christmas release and various other things over the last couple of months. Will be digging back in to Perl 6 things again more from this week, and that bug is high on my list.

[19:32] <muraiki> jnthn: thanks! also, you certainly deserve as long of a break as you need :) I just didn't know where to look / who else to ask

[19:34] *** mr_ron joined
[19:34] <mr_ron> m: my subset Odd of Int where {$^n % 2}; my Odd $i; say $i.WHAT; $i = 3; say $i.WHAT

[19:34] <camelia> rakudo-moar 9dc21a: OUTPUT«(Odd)␤(Int)␤»

[19:35] <timotimo> subset types only check upon assignment (or, indeed, checking), they do not change the object itself

[19:35] *** nowan left
[19:36] *** zpmorgan left
[19:36] <timotimo> the first output is "(Odd)" because the default value for a scalar container is the type object of the type constraint

[19:37] *** zpmorgan joined
[19:38] *** maybekoo5 joined
[19:38] *** nowan joined
[19:42] *** sufrosti1o left
[19:42] *** sufrostico left
[19:43] <mr_ron> thx

[19:43] *** spider-mario joined
[19:43] <timotimo> yw

[19:43] <jnthn> muraiki: Well, "GC bug" sends 90% of sensible people running away screaming, and "concurrency bug" does the same for the other 90%...and this is a concurrent GC bug... :-)

[19:44] <timotimo> fortunately we don't do concurrent GC in moarvm :P

[19:44] <jnthn> Well, a GC concurrency bug then :P

[19:44] <timotimo> :)

[19:44] <muraiki> hehe

[19:44] *** sufrostico joined
[19:44] *** sufrosti1o joined
[19:44] <jnthn> Our GC *will* be getting more concurrent soon though (*after* fixing this issue ;-))

[19:45] <jnthn> As we'll switch to doing finalizatino etc. in the background

[19:45] <jnthn> But yeah, I doubt we'll go much further than that for a good while. True concurrent GC is really, really hard, and it's a trade-off with throughput.

[19:46] <jnthn> So for a bunch of workloads it'd likely hurt benchmarks.

[19:49] * jnthn goes to finish up prepping the dinner :)

[19:51] *** molaf left
[19:56] *** labster joined
[19:59] *** zpmorgan left
[20:02] <mr_ron> m: my subset Odd of Int where {$^n % 2}; multi sub f(Odd $i) { say "odd" }; multi sub f(Odd $i) { say "odd 2" }; multi sub f(Int $i) {say "int"}; multi sub f(Int $i) {say "int 2"}; f(3); f(4)

[20:02] <camelia> rakudo-moar 9dc21a: OUTPUT«odd␤Ambiguous call to 'f'; these signatures all match:␤:(Int $i)␤:(Int $i)␤  in block <unit> at /tmp/zedwxuiSYn line 1␤␤»

[20:02] *** darutoko left
[20:08] *** xinming left
[20:16] *** xinming joined
[20:17] *** espadrine left
[20:21] *** buharin joined
[20:21] *** musiKk_ joined
[20:24] *** addison_ left
[20:31] *** sno left
[20:32] *** domidumont left
[20:33] <buharin> moritz, are you here?

[20:38] <[Coke]> buharin: something we can help with?

[20:39] <buharin> yeah I was talking about passing by ref

[20:39] <moritz> buharin: yes-ish

[20:39] <buharin> argument to method

[20:40] <buharin> and I need to go to work :D

[20:40] <buharin> so back right now

[20:41] <buharin> I wanna pass Str variable to method modify it and so on

[20:42] <buharin> or class

[20:42] <buharin> and it will be more expensive if I will pass it by copy

[20:42] <buharin> you know what i mean?

[20:42] <hoelzro> sub foo(Str $arg is rw) { ... }

[20:42] <hoelzro> that should do it.

[20:43] <buharin> really?:D

[20:43] <buharin> and whats raw?

[20:43] <hoelzro> m: sub foo(Str $arg is rw) { $arg = 'hello' }; my Str $s; foo($s); say $s

[20:43] <camelia> rakudo-moar 9dc21a: OUTPUT«hello␤»

[20:43] <hoelzro> rw - read/write

[20:43] *** ely-se joined
[20:43] <hoelzro> really?:U is also acceptable =P

[20:43] <moritz> raw = rw if available, ro otherwise

[20:44] <moritz> buharin: but are you sure you need to pass an RW parameter? it typically makes things much harder to understand

[20:44] *** Relsak joined
[20:44] <moritz> buharin: I'd start with a nomral method that returns a new string

[20:44] <moritz> *normal

[20:45] <moritz> and only use a different API when performance can't be fixed otherwise

[20:46] <buharin> moritz, what do you mean by different API?

[20:46] *** kaare_ left
[20:46] <moritz> buharin: like the rw argument

[20:47] *** geraud joined
[20:47] <buharin> moritz, looks very complicated

[20:48] <moritz> buharin: what looks complicated?

[20:48] <lizmat> do we actually have a website where we can read mails on p6-language?  moritz?

[20:49] <moritz> lizmat: http://www.nntp.perl.org/group/ should do it

[20:49] <moritz> http://www.nntp.perl.org/group/perl.perl6.language/

[20:49] <lizmat> moritz++

[20:50] <moritz> there's also https://www.mail-archive.com/perl6-language@perl.org/

[20:51] <moritz> which, IMHO, is a bit nicer with clickable links and all that

[20:54] <flussence> http://news.gmane.org/gmane.comp.lang.perl.perl6.language # best, imo

[20:55] <flussence> (except for their idiotic anti-harvester mangling @array sigils)

[20:56] *** labster left
[20:56] *** _dolmen_ joined
[20:56] <nine_> As if those things had ever worked

[20:59] *** itaipu joined
[21:00] *** sno joined
[21:01] *** ggoebel16 joined
[21:01] <nine_> YES!

[21:02] <lizmat> anything that can be merged before the P6W comes out ?

[21:02] <nine_> panda installed successfully and first run after installation takes 1.5 seconds :)

[21:02] <lizmat> :-)

[21:02] <nine_> lizmat: no, this will need extensive review and testing, but I'm getting close to pushing this stuff somewhere :)

[21:03] <lizmat> ah, cool...  next week then  :-)

[21:03] <nine_> Depends on when I will finally replace coding fun with writing slides...

[21:09] <lizmat> or after the GPW  :-)

[21:15] *** johndau left
[21:17] *** _dolmen_ left
[21:18] *** buharin left
[21:18] <ptolemarch> Is there currently a well-defined way to call Perl6 code (via Rakudo-on-JVM) from Java?

[21:19] <[Coke]> rakudo-on-java itself is not well at the moment.

[21:19] *** dha left
[21:22] <ptolemarch> I see that I can create .jar files, and I see quite a few Rakudo and NQP Java classes.

[21:22] *** buharin joined
[21:23] <ptolemarch> Rakudo can obviously compile Perl6 and run it, as it does in the REPL...

[21:23] <[Coke]> well at some point it's all java, yes. (doing a build right now, haven't tried to build since christmas.)

[21:23] <ptolemarch> ...but is there a way to ask Rakudo "please find this class which you've already compiled and give me an instance of it"?

[21:24] <[Coke]> I don't think you can easily get at the java version of a perl6 object.

[21:24] * ptolemarch nods

[21:24] <[Coke]> (you have perl6 at that point anyway, which is "better") - I do think there's a way to get at an arbitrary class from java, though.

[21:25] <[Coke]> j: use java.lang.String :from<java>; say "alive";

[21:25] <camelia> rakudo-jvm f99bdb: OUTPUT«cannot connect to eval server: Connection refused␤»

[21:25] <[Coke]> can answer that better after my local java build finishes.

[21:26] <ptolemarch> Yeah, perl6 is quite better, for my money. :-) And now I'd like to try to create a Minecraft server mod in Perl6 rather than in Java.

[21:27] <ptolemarch> I'm quite willing to hack on it reasonably hard; basically I think a Minecraft-mod-in-Perl6 talk at YAPC would be pretty awesome and right now I'm trying to verify that it's feasible before I try to submit a talk proposal.

[21:27] <[Coke]> ptolemarch: that would be awesome, please do that. :)

[21:27] <ptolemarch> But I'm having a hard time finding where to start. :-)

[21:27] <[Coke]> give me another 30 minutes to finish this build. :)

[21:27] <[Coke]> (kidding, but the jvm build is slow)

[21:27] <ptolemarch> Please take your time.

[21:27] <ptolemarch> Heh, yesterday I built it on my Chromebook. *that* was *slow*.

[21:31] *** itaipu left
[21:34] *** cdg joined
[21:36] *** mr_ron left
[21:37] *** bjz left
[21:41] *** tmch left
[21:43] <[Coke]> already, 'make install' still broken on jvm.

[21:44] <[Coke]> *alright

[21:44] *** musiKk_ left
[21:47] <[Coke]> ok. r-j builds (can't install); when running t/03-jvm/01-interop.t, you get an error that EVAL is very dangerous! (wondering if the failed install has anything to do with this)

[21:47] <[Coke]> ptolemarch: see t/03-jvm/01-interop.t for examples on how interop would theoretically work if r-j was working.

[21:49] <[Coke]> but I can't get any of those examples to work. I know some work was done recently on this, trying to find who touched it.

[21:49] <ptolemarch> Hmm, I'm able to build rakudo 2016.02 with JVM backend

[21:51] <[Coke]> ptolemarch: maybe the remotes/origin/jvminterop branch

[21:51] <[Coke]> ptolemarch: did "make install" work?

[21:51] <[Coke]> and I don't think anyone's cleaned up "make stresstest" in sometime.

[21:51] <ptolemarch> [Coke]: this was basically `rakudobrew install jvm 2016.02`

[21:52] <[Coke]> no clue if that reports errors if make install failed.

[21:52] <[Coke]> (or if it runs spec tests)

[21:52] <ptolemarch> well, and I'm able to use `perl6-j` after...

[21:53] <[Coke]> but the interop branch is probably where you want to be looking if you care about interop.

[21:53] <ptolemarch> gotcha

[21:54] <ptolemarch> So far, everything I've seen about interop has been "call Java from Perl6" rather than the reverse.

[21:54] <ptolemarch> That file seems to be the same thing.

[21:55] <[Coke]> I'm not sure how well it works the other way; you could probably try to build a p6 class, see what jar file you get and decompile it.

[21:56] <ptolemarch> yeah, that's where I've been all day

[21:56] <[Coke]> sorry. :|

[21:58] <[Coke]> I can't build that branch, unfortunately.

[21:59] <[Coke]> I'd ping the last committer on that branch and see if they have any guidance for you.

[21:59] <ptolemarch> Oh, I missed your above mention of remotes/origin/jvminterop

[21:59] <ptolemarch> Thank you, I'll do that.

[21:59] *** tmch joined
[22:02] <lizmat> and another Perl 6 Weekly hits the net: https://p6weekly.wordpress.com/2016/02/29/2016-9-blobs-leaping-away/

[22:04] <dalek> rakudo/relocateable-precomp: e8c22d6 | (Stefan Seifert)++ | tools/build/install-core-dist.pl:

[22:04] <dalek> rakudo/relocateable-precomp: Fix weird errors in precomp files generated on installation

[22:04] <dalek> rakudo/relocateable-precomp: 

[22:04] <dalek> rakudo/relocateable-precomp: Setting PROCESS::<$REPO> without initializing $*REPO first creates a repo-chain

[22:04] <dalek> rakudo/relocateable-precomp: containing only the single repository. Without the NQP repository in the chain,

[22:04] *** dalek left
[22:04] *** dalek joined
[22:04] *** ChanServ sets mode: +v dalek

[22:05] *** addison_ joined
[22:05] <nine_> https://github.com/rakudo/rakudo/commit/e8c22d66f35c9bc6d26c1a686773484c784ed7b4

[22:05] <nine_> and more importantly https://github.com/rakudo/rakudo/commit/12995e5b9bc866817a27f5c32fc746e3b7d6de11

[22:09] *** idiosyncrat_ joined
[22:14] *** skids left
[22:14] *** tmch left
[22:17] <pyrimidine> lizmat++ # p6weekly

[22:20] <pyrimidine> lizmat: ...and I agree re: the sad blog post, though not unexpected :(

[22:20] <lizmat> yeah  :-(

[22:26] <lizmat> .tell jnthn I noticed that in the ShapedArrayCommon role, protos like .push are not marked "is nodal": is that intentional ?

[22:26] <yoleaux> lizmat: I'll pass your message to jnthn.

[22:26] <jnthn> lizmat++ # p6weekly

[22:26] <yoleaux> 22:26Z <lizmat> jnthn: I noticed that in the ShapedArrayCommon role, protos like .push are not marked "is nodal": is that intentional ?

[22:26] <jnthn> hah, what timing :P

[22:26] <lizmat> hehe

[22:26] <jnthn> No, not intentional

[22:27] <lizmat> ok, so I guess I should add that to make sure they work ok in meta ops, right ?

[22:27] <jnthn> Aye, please :)

[22:27] <jnthn> Just an oversight

[22:27] <lizmat> will do

[22:28] *** tmch joined
[22:29] <dalek> rakudo/nom: 00bfa4d | lizmat++ | src/core/Range.pm:

[22:29] <dalek> rakudo/nom: Add a sensible error for ^Inf .rand

[22:29] <dalek> rakudo/nom: 

[22:29] <dalek> rakudo/nom: Instead of just hanging.  Also fix the (NaN..NaN).rand case

[22:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/00bfa4d16a

[22:31] <lizmat> jnthn: on hot path code size: would it make sense to make a private method taking a single argument to throw the X::IllegalOnFixedDimensionArray in?

[22:31] <lizmat> so that: self.DEFINITE

[22:31] <lizmat>                 ?? X::IllegalOnFixedDimensionArray.new(operation => 'push').throw

[22:31] <lizmat> would become: ?? self!illegal("push")

[22:31] <jnthn> Probably not worth much

[22:32] <jnthn> X::IllegalOnFixedDimensionArray may look long, but actually compiles into a single instruction

[22:32] <hoelzro> lizmat, timotimo: is it too late to make a change to the p6weekly?

[22:32] <lizmat> yes, but it needs a .new and a .throw ?

[22:32] <timotimo> it isn't too late

[22:32] <timotimo> what's wrong?

[22:32] <lizmat> hoelzro: what

[22:32] <lizmat> ?

[22:32] <hoelzro> I just want to point out that sortiz++ did must of the work in that REPL stuff =)

[22:33] <hoelzro> I just reviewed and merged it!

[22:33] *** bpmedley joined
[22:33] <lizmat> ok, will change

[22:33] <hoelzro> thanks!

[22:33] <jnthn> lizmat: True...method calls aren't that long instruction wise either, though.

[22:34] <timotimo> especially when we can sp_findmethod and/or fastinvoke, too, right?

[22:34] <jnthn> btw, from now on http://www.moarvm.org/measurements/perl6-bench/ has 3 files per day

[22:35] *** tmch left
[22:35] <lizmat> jnthn timotimo are you saying it *would* make sense ?

[22:36] <timotimo> i'm thinking more about the new call; that should be cheap-able

[22:36] <timotimo> as well as the .throw

[22:36] <jnthn> The one with the date is current standing of Rakudo against NQP and Perl 5. The one -releases.html is xmas release vs. last month's release vs. HEAD, and releases-history is a different plot of that data.

[22:37] <jnthn> lizmat: It makes sense in that it's a win, just saying it's a fairly small one. :)

[22:37] <lizmat> well, it also make the code more readable  :-)

[22:37] *** ptolemarch left
[22:37] <jnthn> True, that's actually a better reason than performance ;-)

[22:41] *** jaldhar_ left
[22:41] *** jaldhar_ joined
[22:46] *** muraiki left
[22:47] *** ely-se left
[22:48] <lizmat> jnthn: will there be a .plan for shaped arrays?  I thought that was pre-GLR ?

[22:48] <jnthn> lizmat: It doesn't really make sense, since you can't resize it?

[22:48] <jnthn> Or you mean just a throwing one?

[22:49] <lizmat> the one in ShapedArrayCommon is the only "method plan" in the whole setting

[22:49] <jnthn> Or did we throw out .plan altogether?

[22:49] <jnthn> Hm :)

[22:49] <jnthn> Innerestin' :)

[22:49] <lizmat> yeah, I think we did...

[22:49] <jnthn> Guess it can go

[22:49] <lizmat> ok

[22:49] <jnthn> Or we can ponder if .plan will return :)

[22:50] <lizmat> yup

[22:50] <jnthn> m: my @a = 1..3; @a.push: 1..Inf; say @a[^5]

[22:50] <camelia> rakudo-moar 9dc21a: OUTPUT«(1 2 3 1..Inf (Any))␤»

[22:50] <jnthn> ah

[22:50] <jnthn> m: my @a = 1..3; @a.append: 1..Inf; say @a[^5]

[22:50] <camelia> rakudo-moar 9dc21a: OUTPUT«Cannot push a lazy list onto a Array␤  in block <unit> at /tmp/ifn_9nvUOQ line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/ifn_9nvUOQ line 1␤␤»

[22:50] <jnthn> m: my @a = 1..3; @a.push: slip 1..Inf; say @a[^5]

[22:50] <camelia> rakudo-moar 9dc21a: OUTPUT«Cannot push a lazy list onto a Array␤  in block <unit> at /tmp/9bfdXGKaCn line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/9bfdXGKaCn line 1␤␤»

[22:50] <jnthn> Yeah, probably .plan should return :)

[22:50] <jnthn> Otherwise there's no way to do that :)

[22:51] <lizmat> but for now it can go, right ?

[22:51] <jnthn> Yeah, I guess so 

[22:51] *** FreezerburnV joined
[22:51] <timotimo> that means it might come back in 6.d (or later), right?

[22:51] *** rburkholder joined
[22:52] <jnthn> timotimo: Yeah, I think it's worth having

[22:52] <jnthn> But we've bigger fish to fry for now

[22:52] <timotimo> yeah

[22:53] <dalek> rakudo/nom: 1ef2470 | lizmat++ | src/core/Rakudo/Internals.pm:

[22:53] <dalek> rakudo/nom: Add accidentally omitted "is nodal" to protos

[22:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1ef24707e3

[22:55] <ugexe> when a proc throws an exception, is there any way to get the $exception.proc out of the try/catch so that it can still be used? otherwise anytime you do anything to it (method sink) the exception gets rethrown

[22:56] <ugexe> .resume inside the CATCH seems to switch the non-zero exitcode back to 0, so im not sure how to do it

[22:57] *** kid51 joined
[22:58] *** labster joined
[23:01] <lizmat> argh.  guess what, we have tests for .plan ???

[23:01] <lizmat> jnthn: ^^

[23:02] <jnthn> Ah

[23:02] <jnthn> OK, less effort to keep it :)

[23:02] <lizmat> I guess.. :-)

[23:02] <jnthn> A proper Array.plan isn't a lot of effort to implement

[23:03] <lizmat> fwiw, I'm still not sure what it is supposed to do 

[23:04] <jnthn> lizmat: Stick the thing into the unreified part of the array, so it'll be lazily reified

[23:05] <lizmat> hmmm... S32-setting-library/Containers:827 actually describes it

[23:05] <lizmat> I guess I'll leave it as LHF for someone else :-)

[23:06] <jnthn> Tempting. But not tonight :)

[23:07] <lizmat> seems I borked something

[23:08] <lizmat> getting too tired now

[23:08] <lizmat> will look at it in the morrow

[23:08] <lizmat> so good night, #perl6!

[23:08] *** pmurias left
[23:09] <jnthn> 'night, lizmat 

[23:09] <hoelzro> night lizmat 

[23:13] *** RabidGravy left
[23:15] *** rjbs joined
[23:16] *** spider-mario left
[23:18] *** sufrostico left
[23:19] *** sufrosti1o left
[23:19] *** kjs_ left
[23:20] *** sufrostico joined
[23:20] *** sufrosti1o joined
[23:21] *** Skarsnik left
[23:24] *** sufrostico left
[23:25] *** sufrosti1o left
[23:26] *** kjs_ joined
[23:27] *** kjs_ left
[23:28] *** QORRiE left
[23:30] *** agent008 joined
[23:30] *** agent008 left
[23:30] *** kjs_ joined
[23:30] *** agent008 joined
[23:30] *** agent008 left
[23:31] *** skids joined
[23:31] *** agent008 joined
[23:31] *** agent008 left
[23:31] *** agent008 joined
[23:33] *** kjs_ left
[23:37] *** raiph joined
[23:44] *** kjs_ joined
[23:57] *** kjs_ left
