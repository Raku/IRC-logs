[00:01] <mscha> m: say (-Inf..Inf)[100000]; # it actually has to think about this

[00:01] <camelia> rakudo-moar 8bd7ee: OUTPUT«-Inf␤»

[00:01] <mscha> m: say (-Inf..Inf)[1000000]; # it actually has to think about this

[00:01] <camelia> rakudo-moar 8bd7ee: OUTPUT«-Inf␤»

[00:01] <mscha> Or maybe not.  It does in my local Rakudo Star.

[00:02] <mscha> m: say (-Inf..0)[*-1];

[00:02] <camelia> rakudo-moar 8bd7ee: OUTPUT«Cannot .elems a lazy list␤  in block <unit> at /tmp/TuIrhmsiLQ line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/TuIrhmsiLQ line 1␤␤»

[00:03] *** lostinfog left
[00:09] <AlexDaniel> mscha: this one is for you: https://rt.perl.org/Public/Bug/Display.html?id=125336

[00:10] <AlexDaniel> interestingly, it seems like it is fixed

[00:10] <AlexDaniel> yeah, can anybody close it please?

[00:11] <AlexDaniel> or guide me through creating a new account so that I can do it myself.

[00:12] *** Skarsnik left
[00:12] *** addison joined
[00:14] <AlexDaniel> https://files.progarm.org/2016-02-05-021403_666x501_scrot.png – that's all I can see when I log in

[00:14] <AlexDaniel> how can I fix it?

[00:14] *** ZoffixWin joined
[00:14] <AlexDaniel> when I try to view any ticket while I'm logged in I see this: “No permission to display that ticket    No details”

[00:15] <dalek> ecosystem: d6a2c05 | (Zoffix Znet)++ | META.list:

[00:15] <dalek> ecosystem: All Zoffix's modules: META.info -> META6.json

[00:15] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/d6a2c05d94

[00:15] <AlexDaniel> or should I just mail [email@hidden.address] ?

[00:17] *** wamba joined
[00:19] <ZoffixWin> Tried clearing cache/cookies and relogginging?

[00:19] *** HaraldJoerg left
[00:21] *** RabidGravy left
[00:23] *** Cheery joined
[00:23] <raiph> hi Cheery :)

[00:23] *** wamba left
[00:23] <raiph> m: .WHAT.say for 1, 1.0e3

[00:23] <camelia> rakudo-moar 8bd7ee: OUTPUT«(Int)␤(Num)␤»

[00:23] <raiph> Num is a float

[00:23] <raiph> m: say (1 + 2e0).WHAT

[00:23] <camelia> rakudo-moar 8bd7ee: OUTPUT«(Num)␤»

[00:23] <MadcapJake> gfldex: http://hastebin.com/zedazucara.txt

[00:24] <Cheery> what did happen there?

[00:25] <MadcapJake> gfldex: here's the last line where the error occurs https://github.com/gfldex/http-server-simple/blob/master/lib/HTTP/Server/Simple.pm6#L48

[00:25] <MadcapJake> but i don't understand why it's calling that, is it maybe for favicon.ico?

[00:28] <MadcapJake> can't be that, i just added one as a link element

[00:33] <ZoffixWin> New blog post: How to Make a Perl 6 Module (Bit Rot Thursday): http://blogs.perl.org/users/zoffix_znet/2016/02/how-to-make-a-perl-6-module-bit-rot-thursday.html

[00:34] <AlexDaniel> ZoffixWin: no, it does not help

[00:34] <ZoffixWin> AlexDaniel, weird :S

[00:35] <AlexDaniel> ZoffixWin: I don't find it weird. RT is shit

[00:35] <ZoffixWin> haha

[00:35] *** cdg left
[00:36] *** cdg joined
[00:36] <AlexDaniel> If I write an email to [email@hidden.address] is it going to go down the sink? Who's there on the other side?

[00:38] *** mcmillhj_ joined
[00:39] <AlexDaniel> ok I guess there is one way to find out…

[00:40] <ajr_> Thanks for your help everyone. It's amazing how much one can learn translating a 5-line program.

[00:40] *** mcmillhj left
[00:40] *** gregf__ left
[00:41] *** gregf__ joined
[00:43] *** kid51 joined
[00:44] <[Coke]> AlexDaniel: i get spport on that address,

[00:44] <[Coke]> OOC, what are you reporting?

[00:45] *** Cheery left
[00:45] *** ajr_ left
[00:45] *** erdic left
[00:46] *** erdic joined
[00:47] <AlexDaniel> [Coke]: I can't use my account

[00:47] <AlexDaniel> [Coke]: in fact, I can't use the whole RT when I'm logged in

[00:47] <AlexDaniel> [Coke]: see this screenshot: https://files.progarm.org/2016-02-05-021403_666x501_scrot.png

[00:48] <AlexDaniel> I can't even view any bug even if I go directly to the right link

[00:49] *** lokien_ left
[00:51] <[Coke]> yup, they should be able to help you out.

[00:53] *** BenGoldberg joined
[00:54] *** Cheery joined
[00:55] <Cheery> .WHAT.say for 1, 1.0e3 in

[00:55] *** BenGoldberg left
[00:55] *** BenGoldberg joined
[00:57] <Cheery> m: .WHAT.say for 1, 1.0e3

[00:57] <camelia> rakudo-moar 8bd7ee: OUTPUT«(Int)␤(Num)␤»

[00:57] <Cheery> ok. not going crazy anymore. :)

[00:57] <Cheery> raiph: thanks for pointing that out

[00:57] <raiph> Cheery: :)

[00:59] <raiph> m: multi sub infix:<+> (\a, \b) { say 'Cheery'; nextsame }; say 1 + 1

[00:59] <camelia> rakudo-moar 8bd7ee: OUTPUT«2␤»

[00:59] <raiph> m: multi sub infix:<+> ($a, $b) { say 'Cheery'; nextsame }; say 1 + 1

[00:59] <camelia> rakudo-moar 8bd7ee: OUTPUT«2␤»

[00:59] <raiph> m: multi sub infix:<+> (Int $a, Int $b) { say 'Cheery'; nextsame }; say 1 + 1

[00:59] <camelia> rakudo-moar 8bd7ee: OUTPUT«Ambiguous call to 'infix:<+>'; these signatures all match:␤:(Int:D \a, Int:D \b --> Int:D)␤:(Int $a, Int $b)␤  in block <unit> at /tmp/29NRxMfNIM line 1␤␤»

[01:00] <raiph> m: multi sub infix:<+> (1, Int $b) { say 'Cheery'; nextsame }; say 1 + 1

[01:00] <camelia> rakudo-moar 8bd7ee: OUTPUT«Cheery␤2␤»

[01:01] <Cheery> okay. :)

[01:01] <Cheery> that's concise

[01:02] <raiph> m: multi sub infix:<+> (Num $a, Int $b) { say 'Cheery'; nextsame }; say 1e0 + 1

[01:02] <camelia> rakudo-moar 8bd7ee: OUTPUT«Cheery␤2␤»

[01:02] <raiph> m: multi sub infix:<+> (Num $a, Int $b) { say 'Cheery'; nextsame }; say 1 + 1e0

[01:02] <camelia> rakudo-moar 8bd7ee: OUTPUT«2␤»

[01:02] <raiph> so that's a small version of the gof problem you're talking of, right?

[01:04] <Hotkeys> is someone golfing?

[01:04] <raiph> Cheery: ^^ ?

[01:04] <raiph> HotKeys: no, I meant GoF, short for Gang of Four

[01:04] <Cheery> I'm not sure

[01:04] <AlexDaniel> Hotkeys: no but I'd like to :D

[01:04] <kid51> AlexDaniel: Are you unable to see this ticket which you created?  https://rt.perl.org/Ticket/Display.html?id=127424

[01:05] *** yeahnoob joined
[01:05] <AlexDaniel> kid51:  No permission to display that ticket

[01:06] <kid51> And are you also unable to see the same ticket in the "public" view?  https://rt.perl.org/Public/Bug/Display.html?id=127424

[01:06] <Hotkeys> raiph: aw

[01:06] <Hotkeys> AlexDaniel: woo

[01:06] <kid51> i.e., when you are not logged in to rt.perl.org via bitcard

[01:06] <AlexDaniel> kid51: yes, I get an empty page

[01:06] <AlexDaniel> ah

[01:07] <AlexDaniel> when I'm not logged in of course I can see it

[01:07] <AlexDaniel> in fact, both links work just fine

[01:08] <Cheery> raiph: in the GoF, I think I don't just like it.

[01:09] <kid51> I find that when I'm not logged in to rt.perl.org, clicking on the first link simply redirects to the second

[01:09] <AlexDaniel> kid51: yes

[01:09] <kid51> Now, most of the time I am logged in, so I'm always getting the first link

[01:09] <Cheery> raiph: one problem in it is that it's hard to explain what is happening in gang of four pattern

[01:10] <kid51> If you know that you are logged in and the first link redirects to the second, then, yes, there is something wrong and you have to speak with the admin.

[01:10] <Cheery> it calls .__add__, if it fails, it calls .__radd__, but in middle it may do whatever to resolve that call.

[01:10] <kid51> (I actually never knew about the /SelfService/ endpoint until you posted it)

[01:11] <Cheery> with multimethods, you can tell the default behavior, then you can tell the implemented type pairs.

[01:11] <AlexDaniel> kid51: both links redirect me to SelfService when I'm logged in

[01:11] <AlexDaniel> https://rt.perl.org/SelfService/Display.html?id=127424 and https://rt.perl.org/SelfService/

[01:12] <Cheery> raiph: anyway. I'm going to sleep now. but maybe we'll chat later. night.

[01:12] <ugexe> m: my $v1 = v1.02; my $v2 = Version.new("v1.02"); say $v1.perl; say $v2.perl

[01:12] <camelia> rakudo-moar 8bd7ee: OUTPUT«Version.new('1.2')␤Version.new('v.1.2')␤»

[01:13] <raiph> Cheery: goodnight

[01:15] <kid51> Well, FWIW, this is the RT link I start with for Perl6:  https://rt.perl.org/Search/Results.html?Format=%0A%20%20%20%27%3Cb%3E%3Ca%20href%3D%22__WebPath__%2FTicket%2FDisplay.html%3Fid%3D__id__%22%3E__id__%3C%2Fa%3E%3C%2Fb%3E%2FTITLE%3A%23%27%2C%0A%20%20%20%27%3Cb%3E%3Ca%20href%3D%22__WebPath__%2FTicket%2FDisplay.html%3Fid%3D__id__%22%3E__Subject__%3C%2Fa%3E%3C%2Fb%3E%2FTITLE%3ASubject%27%2C%0A%20%

[01:15] <kid51> 20%20Status%2C%0A%20%20%20QueueName%2C%0A%20%20%20OwnerName%2C%0A%20%20%20Priority%2C%0A%20%20%20%27__NEWLINE__%27%2C%0A%20%20%20%27%27%2C%0A%20%20%20%27%3Csmall%3E__Requestors__%3C%2Fsmall%3E%27%2C%0A%20%20%20%27%3Csmall%3E__CreatedRelative__%3C%2Fsmall%3E%27%2C%0A%20%20%20%27%3Csmall%3E__ToldRelative__%3C%2Fsmall%3E%27%2C%0A%20%20%20%27%3Csmall%3E__LastUpdatedRelative__%3C%2Fsmall%3E%27%2C%0A%20

[01:15] <kid51> %20%20%27%3Csmall%3E__TimeLeft__%3C%2Fsmall%3E%27&Order=DESC&OrderBy=LastUpdated&Page=1&Query=Queue%20%3D%20%27perl6%27%20AND%20%28Status%20%3D%20%27new%27%20OR%20Status%20%3D%20%27open%27%20OR%20Status%20%3D%20%27stalled%27%29&Rows=50

[01:15] <kid51> Woah, didn't expect that.

[01:15] <timotimo> excellent!

[01:15] <AlexDaniel> hmm…

[01:15] <timotimo> note also that everyone clicking your link will potentially get a nasty warning about CSRF going on

[01:16] <kid51> Maybe this is better:  http://tinyurl.com/j3kyb2t

[01:16] <AlexDaniel> redirects to SelfService

[01:17] <kid51> Alright, then you'll have to sort that out with the admins.  I've never used SelfService so can't speak to it.  Good luch.

[01:17] <kid51> luck

[01:17] <AlexDaniel> ok, thanks

[01:19] <AlexDaniel> Hotkeys: if you find any interesting problem to golf then please share :)

[01:24] *** spider-mario left
[01:25] <Hotkeys> will do

[01:26] <Hotkeys> I just kind of trawl codegolf on stackexchange looking for intuitive problems

[01:26] <Hotkeys> and hope that that other perl 6 guy hasn't answered them yet

[01:33] <AlexDaniel> Hotkeys: what's your SE account?

[01:33] <Hotkeys> http://codegolf.stackexchange.com/users/46687/lockopeners

[01:33] <Hotkeys> I haven't done very many

[01:33] <Hotkeys> I do them here and there

[01:34] <Hotkeys> I like when they allow functions

[01:34] <Hotkeys> makes for very short stuff

[01:35] <AlexDaniel> “shortest code in bytes” huh, bytes?

[01:36] *** cdg left
[01:36] <Hotkeys> I usually use bytes

[01:36] <Hotkeys> Most people use bytes

[01:38] <Hotkeys> I think it's so that golfed things don't become an obfuscated unicode mess like some of the golf langs can be

[01:39] <AlexDaniel> in what encoding?

[01:39] <Hotkeys> utf-8 is what I go with

[01:39] <Hotkeys> probably that

[01:41] <timotimo> 111 videos uploaded on fosdem's video page

[01:47] <AlexDaniel> Hotkeys: http://codegolf.stackexchange.com/a/70856 this answer does not work :o

[01:48] <AlexDaniel> Hotkeys: “Indexing requires an instance, tried to do: [ (Any) ]”

[01:49] <Hotkeys> what

[01:49] <Hotkeys> I literally tried it a few hours ago

[01:49] <Hotkeys> while trying to golf it shorter

[01:49] <Hotkeys> worked fine

[01:49] <AlexDaniel> hmmmm can you try it again?

[01:50] <AlexDaniel> oh wait, I'm doing it wrong

[01:51] <Hotkeys> http://i.imgur.com/FPe5SWp.png

[01:51] <Hotkeys> it's in a file, but same code

[01:52] <AlexDaniel> yeah, sorry, I ignored the second argument

[01:52] *** Actualeyes joined
[01:52] <Hotkeys> ah

[01:52] <Hotkeys> you gave me a scare there

[01:52] <Hotkeys> :p

[01:58] *** cbk joined
[02:02] *** MichaelD joined
[02:03] *** MichaelD left
[02:04] *** telex left
[02:06] *** telex joined
[02:10] <AlexDaniel> Hotkeys: put [+] --«@*ARGS,1 # meh, exactly the same length

[02:11] <Hotkeys> there was another answer in there that I didn't notice that was basically that

[02:11] <Hotkeys> I didn't realize you could do '@*ARGS,1'

[02:11] <Hotkeys> oh

[02:11] <Hotkeys> wait

[02:11] <Hotkeys> i'm a dope

[02:11] <Hotkeys> nvm

[02:12] <AlexDaniel> you can do the same thing with sum too :)

[02:13] *** sivoais joined
[02:20] <AlexDaniel> Hotkeys: why not say (^@*ARGS[0])».chr ?

[02:20] <AlexDaniel> Hotkeys: here: http://codegolf.stackexchange.com/questions/40490/print-the-ascii-table/62397#62397

[02:21] <AlexDaniel> Hotkeys: 0.. is not required according to the task

[02:21] <AlexDaniel> Hotkeys: or so it seems

[02:21] *** sivoais left
[02:21] <Hotkeys> because that was back in october

[02:21] <Hotkeys> and I was a young 6r

[02:21] <Hotkeys> 6er

[02:22] <AlexDaniel> Hotkeys: range(n) does not include n

[02:22] <AlexDaniel> Hotkeys: so edit it? :)

[02:23] *** sivoais joined
[02:27] <Hotkeys> alrighty

[02:27] <Hotkeys> did

[02:31] *** sivoais left
[02:32] *** abaugher left
[02:33] *** abaugher joined
[02:33] *** sivoais joined
[02:34] *** protium joined
[02:38] <AlexDaniel> Hotkeys: my &f={.trans('a'..'z'=>[R~] 'a'…'z')}

[02:39] <AlexDaniel> Hotkeys: http://codegolf.stackexchange.com/questions/68504/swap-the-alphabet/68769#68769

[02:39] <AlexDaniel> Hotkeys: this is slightly shorter

[02:39] <AlexDaniel> though if you change … to ... it becomes as short as your version

[02:40] <AlexDaniel> but hey, it is more readable

[02:40] <AlexDaniel> oh!

[02:40] <AlexDaniel> minus one more character

[02:40] <AlexDaniel> Hotkeys: my &f={.trans('a'..'z'=>[~] 'z'…'a')}

[02:40] <Hotkeys> I was just gonna say

[02:40] <Hotkeys> why not just z to a

[02:40] <Hotkeys> (lol that rhymes)

[02:41] <Hotkeys> you need to accounmt for uppercase

[02:41] <AlexDaniel> oh wait, it does not handle uppercase

[02:42] *** sivoais left
[02:42] <AlexDaniel> dammit :)

[02:43] *** kid51 left
[02:43] <timotimo> Svool

[02:43] <Hotkeys> lol

[02:43] <Hotkeys> svool

[02:44] *** sivoais joined
[02:45] *** DoverMo joined
[02:45] *** ilbot3 left
[02:47] *** ilbot3 joined
[02:52] <AlexDaniel> Hotkeys: awww

[02:52] *** sivoais left
[02:52] <AlexDaniel> Hotkeys: my &f = {sqrt [+] (@^a »-«@^b)»²}

[02:52] <AlexDaniel> Hotkeys: one character longer than your version

[02:52] <timotimo> m: say "Svool".encode.list>>.&({$^a+4+^31}).decode

[02:52] <camelia> rakudo-moar 8bd7ee: OUTPUT«Method 'decode' not found for invocant of class 'List'␤  in block <unit> at /tmp/god1tTor9T line 1␤␤»

[02:52] <AlexDaniel> … but much longer in bytes

[02:53] <timotimo> m: say "Svool".encode.list>>.&({$^a+4+^31}).Buf.decode

[02:53] <camelia> rakudo-moar 8bd7ee: OUTPUT«Method 'Buf' not found for invocant of class 'List'␤  in block <unit> at /tmp/UYnApBb7ZZ line 1␤␤»

[02:53] <timotimo> m: say Buf.new("Svool".encode.list>>.&({$^a+4+^31})).decode

[02:53] <camelia> rakudo-moar 8bd7ee: OUTPUT«Hello␤»

[02:53] <timotimo> :\

[02:56] <timotimo> soooo loooong

[02:57] <Hotkeys> lol

[02:57] *** MadcapJake left
[02:58] <Hotkeys> AlexDaniel: yeah those bytes bite

[02:59] <Hotkeys> the unicode can sometimes still save bytes though

[02:59] <Hotkeys> like with this set op http://codegolf.stackexchange.com/a/66240/46687

[02:59] <Hotkeys> not my answer

[02:59] <Hotkeys> that's the other perl 6 golfer that I see all the time

[03:03] *** zakharyas joined
[03:07] *** addison left
[03:09] <timotimo> he's also on the channel

[03:10] <AlexDaniel> Hotkeys: ok this is not shorter (just 2 characters longer) but perhaps you'll find it interesting

[03:10] <AlexDaniel> m: my &f = &sqrt∘&sum∘{(@^a Z-@^b)»²}; say f([1,2], [3,4]);

[03:10] <camelia> rakudo-moar 8bd7ee: OUTPUT«2.82842712474619␤»

[03:11] <Hotkeys> function composition gives me nightmares of highschool math

[03:11] <Hotkeys> jk hs math wasn't that bad

[03:12] <Hotkeys> I didn't realize there was a sum function

[03:12] <Hotkeys> m: say sum ^10

[03:12] <camelia> rakudo-moar 8bd7ee: OUTPUT«45␤»

[03:14] <AlexDaniel> same 3 characters as [+] :)

[03:20] *** japhb left
[03:21] <AlexDaniel> m: say IntStr.new(42, ‘NaN’)

[03:21] <camelia> rakudo-moar 8bd7ee: OUTPUT«NaN␤»

[03:21] <AlexDaniel> m: say IntStr.new(42, ‘NaN’) * 2

[03:21] <camelia> rakudo-moar 8bd7ee: OUTPUT«84␤»

[03:22] *** japhb joined
[03:29] *** japhb left
[03:30] *** noganex_ joined
[03:33] *** noganex left
[03:33] <timotimo> m: say [+]42

[03:33] <camelia> rakudo-moar 8bd7ee: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Gir2EtPcam␤Two terms in a row␤at /tmp/Gir2EtPcam:1␤------> 3say [+]7⏏0542␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statemen…»

[03:33] <timotimo> m: say [+] 42

[03:33] <camelia> rakudo-moar 8bd7ee: OUTPUT«42␤»

[03:33] <timotimo> m: say sum 42

[03:33] <camelia> rakudo-moar 8bd7ee: OUTPUT«42␤»

[03:33] <timotimo> m: say sum42

[03:33] <camelia> rakudo-moar 8bd7ee: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Pg1vWTtDAh␤Undeclared routine:␤    sum42 used at line 1␤␤»

[03:33] <timotimo> fair enough

[03:34] <AlexDaniel> m: say sum 41

[03:34] <camelia> rakudo-moar 8bd7ee: OUTPUT«41␤»

[03:36] *** japhb joined
[03:47] *** Actualeyes left
[03:54] *** Guest35482 left
[03:55] *** japhb left
[03:55] *** japhb joined
[03:56] *** kurahaupo joined
[04:02] *** _Dad joined
[04:03] <_Dad> Is there a way to get "use English;" in Perl 6?

[04:05] *** rayofilluminati joined
[04:07] *** rayofilluminati left
[04:09] <AlexDaniel> _Dad: most Perl 6 things have readable names. What is your issue?

[04:11] <AlexDaniel> except $_ and $/ I guess, but you are not forced to use these

[04:11] <AlexDaniel> and $! :)

[04:15] <_Dad> The issue I'm having is with "use English;" itself. I get "Could not find English in" followed by about a dozen places it's looked.

[04:16] <AlexDaniel> _Dad: ok, there's no “use English;” :)

[04:16] <_Dad> I'm specifically wondering if the Z meta-operator has an English equivalent, like "zip these lists"

[04:16] <AlexDaniel> sure

[04:16] <AlexDaniel> m: say zip (1,2,3), (42,69,96)

[04:16] <camelia> rakudo-moar 8bd7ee: OUTPUT«((1 42) (2 69) (3 96))␤»

[04:17] <_Dad> Okay, thanks. Is that the case for other meta-operators, and where would I read about them if so?

[04:18] <AlexDaniel> m: say zip (1,2,3), (42,69,96), with => &[=>]

[04:18] <camelia> rakudo-moar 8bd7ee: OUTPUT«(1 => 42 2 => 69 3 => 96)␤»

[04:19] <AlexDaniel> _Dad: I don't think that there is any “Perl => English” table right now

[04:19] <AlexDaniel> _Dad: feel free to contribute one :)

[04:19] <AlexDaniel> _Dad: all docs are supposed to be here: http://doc.perl6.org/

[04:20] <AlexDaniel> _Dad: but I don't think that there is any quick way to search for what you are asking, hmm

[04:20] <AlexDaniel> _Dad: if you can't find something then just ask here, I guess

[04:21] <_Dad> I'd be happy to, but I'm kind of on the ignorant side of "what the English equivalents are". I'll see if I can find something in the docs you linked. Thanks.

[04:23] <AlexDaniel> wow! ｢cross｣ is not documented!

[04:23] <AlexDaniel> m: say cross (1,2,3), (42,69,96), with => &[=>]

[04:23] <camelia> rakudo-moar 8bd7ee: OUTPUT«(1 => 42 1 => 69 1 => 96 2 => 42 2 => 69 2 => 96 3 => 42 3 => 69 3 => 96)␤»

[04:25] <AlexDaniel> _Dad: submitted: https://github.com/perl6/doc/issues/382

[04:26] <AlexDaniel> but yeah, I guess that nobody asked before :)

[04:26] <perlawhirl> AlexDaniel: there should also probably be a link to 'cross' from 'X' and (and vice versa)... same goes for 'Z' and 'zip'

[04:29] <_Dad> At least the English equivalents are straightforward in these two cases, which is good.

[04:29] <AlexDaniel> perlawhirl: You're right. I've copied your message to the issue.

[04:29] *** polyfloyd left
[04:31] <AlexDaniel> _Dad: personally I'd prefer “no English”. Some things are too verbose to me

[04:31] <AlexDaniel> e.g. there is currently no operator for ｢roundrobin｣

[04:31] <AlexDaniel> so you actually have to type “roundrobin”, geez

[04:33] <AlexDaniel> _Dad: but in that aspect Perl 6 will probably make you more happy than it makes me happy, currently :)

[04:33] *** protium left
[04:34] *** DoverMo left
[04:36] <_Dad> My feeling is that the operators diminish readability, IDEs and cheap storage mean there's no penalty for verbosity, so English is the way to go.

[04:37] <_Dad> I don't even like that "with => &[=>]" you threw in there. How is somebody supposed to look that up?

[04:37] *** BenGoldberg left
[04:37] *** polyfloyd joined
[04:38] <Hotkeys> well => is an op and 'name => thing' is syntax for a named parameter

[04:38] <Hotkeys> you'd have to already know some of that

[04:38] <AlexDaniel> m: say cross (1,2), (42,69), :with(&[=>])

[04:38] <camelia> rakudo-moar 8bd7ee: OUTPUT«(1 => 42 1 => 69 2 => 42 2 => 69)␤»

[04:39] <Hotkeys> I prefer this syntax myself ^

[04:39] <Hotkeys> for all named vars

[04:39] <_Dad> Better :)

[04:39] <AlexDaniel> _Dad: so you think that this ↑ is more readable than

[04:39] <AlexDaniel> m: say (1,2) X=> (42,69)

[04:39] <camelia> rakudo-moar 8bd7ee: OUTPUT«(1 => 42 1 => 69 2 => 42 2 => 69)␤»

[04:39] <AlexDaniel> I don't buy it

[04:39] <Hotkeys> I don't either

[04:40] <Hotkeys> if you didn't know

[04:40] <Hotkeys> you could just search the docs for infix X http://docs.perl6.org/routine/X

[04:41] <Hotkeys> see that it can be a metaop, and then look at infix =>

[04:41] <Hotkeys> badabing

[04:41] <Hotkeys> badaboom

[04:41] <Hotkeys> and once you know it once you know it so

[04:41] <Hotkeys> much more readable IMO

[04:42] <AlexDaniel> _Dad: you don't have to listen to us though, we're not here to dictate some specific style :)

[04:42] * Hotkeys dictates

[04:42] <AlexDaniel> but we may tell you about our opinions, yes :)

[04:42] <_Dad> I suppose there was a time when "once I know it once, I know it," but increasingly the sad reality is "I used to know that, but..."

[04:43] <AlexDaniel> _Dad: then look it up! It is quite easy to search the docs for an operator

[04:43] <AlexDaniel> all operators are listed here: http://docs.perl6.org/routine-operator.html

[04:44] <Hotkeys> I like how easy the docs are to navigate

[04:44] <Hotkeys> much more so than some other langs

[04:44] <Hotkeys> they're not 100% complete but they're pretty good and that'll come with time

[04:44] <AlexDaniel> the search form will be improved too

[04:45] *** vendethiel joined
[04:45] <_Dad> Jesus H. Christ, it's worse than I thought. ^fff^ ???

[04:45] * AlexDaniel doesn't like “use English” idea because he cannot speak English properly

[04:46] <AlexDaniel> _Dad: don't worry, this one is not very popular :)

[04:47] *** wbill joined
[04:47] <_Dad> "Hard to read" may be contributing to its low popularity ?

[04:48] <AlexDaniel> _Dad: “wtf is flipflop operator” is probably a bigger influnce on its popularity

[04:48] *** Actualeyes joined
[04:49] <_Dad> Is that what that thing is, a flipflop operator? TIL

[04:49] <_Dad> (today I learned, tomorrow I forget)

[04:55] <b2gills> Hotkeys: Do you want me to slow down on answering CodeGolf problems?

[04:56] <Hotkeys> b2gills: haha no it's alright

[04:56] <b2gills> &infix:<fff> and &infix:<ff> have their roots all the way back to sed

[04:57] <AlexDaniel> _Dad: well, Perl 6 has lots of operators and lots of features, but you don't have to know about all of them. Feel free to use a subset of Perl 6 (which is what we all do).

[04:57] <AlexDaniel> b2gills: but there's a good question why we have no “flipflop” sub or something

[04:58] <b2gills> flipflop is VERY magical

[04:58] <b2gills> Its main use is in parsing line oriented files

[04:58] <Hotkeys> we do AlexDaniel 

[04:59] <Hotkeys> &infix:<fff>() :p

[04:59] <AlexDaniel> :/

[04:59] <Hotkeys> jk

[04:59] *** zakharyas left
[04:59] <b2gills> m: for ^10 { say 5 fff 7 }

[04:59] <camelia> rakudo-moar 8bd7ee: OUTPUT«Nil␤Nil␤Nil␤Nil␤Nil␤1␤2␤3␤Nil␤Nil␤»

[05:00] <Hotkeys> b2gills: I didn't actually see your answer on the electrical outlet question until after I posted

[05:00] <_Dad> I don't have a problem with the feature, but the "sed-inspired" syntax seems to me to be a mistake. When someone writes "flipflop" I can make a decent guess about what it does. When someone writes ^fff^ I have no clue.

[05:00] <Hotkeys> I didn't intend to try and take the spotlight I swear

[05:00] <b2gills> Hotkeys:  I've done that before as well

[05:01] <AlexDaniel> m: for <AB C D B E F> { say $_ if &infix:<fff>(/A/, /B/); }

[05:01] <camelia> rakudo-moar 8bd7ee: OUTPUT«5===SORRY!5=== Error while compiling /tmp/gj5iG8ganT␤Undeclared routine:␤    infix:<fff> used at line 1. Did you mean 'infix:<∖>', 'infix:<lt>', 'infix:<eq>', 'infix:<o>', 'infix:<~|>'?␤␤»

[05:01] <b2gills> _Dad the ^ means exclude that side

[05:01] <Hotkeys> Have we always had a sum function or is that recent

[05:01] <AlexDaniel> Hotkeys: ↑ it doesn't work?

[05:01] <Hotkeys> I seem to remember having to use [+] no matter what 

[05:01] <b2gills> sum was added to make [+] 1..1000000 faster

[05:01] <Hotkeys> not sure AlexDaniel 

[05:01] <b2gills> m: say [+] 1..1000000; say now - INIT now

[05:01] <camelia> rakudo-moar 8bd7ee: OUTPUT«500000500000␤0.00280925␤»

[05:01] <Hotkeys> it's listed as 'sub infix:<fff>(Mu $a, Mu $b)' so i just assumed

[05:02] <AlexDaniel> Hotkeys: it looks like a bug…

[05:03] <b2gills> I think fff has to be in the parser because of how magical it is

[05:03] <Hotkeys> m: my @list = <A B C>; say $_ if /A/ ^fff^ /C/ for @list;

[05:03] <camelia> rakudo-moar 8bd7ee: OUTPUT«B␤»

[05:03] <Hotkeys> m: my @list = <A B C>; say $_ if infix:<^fff^>(/A/,/C/) for @list;

[05:03] <camelia> rakudo-moar 8bd7ee: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ZQ_fkN2yd7␤Undeclared routine:␤    infix:<^fff^> used at line 1. Did you mean 'infix:<..^>', 'infix:<…^>', 'infix:<...^>', 'infix:<^..>', 'infix:<~^>'?␤␤»

[05:03] <b2gills> Each use of fff is a new state variable

[05:04] <Hotkeys> I'

[05:04] <Hotkeys> I've been getting so much rep today

[05:04] <Hotkeys> Was that you AlexDaniel :p

[05:04] <AlexDaniel> b2gills: mmmmm, inconsistencies

[05:04] *** khw left
[05:04] <AlexDaniel> Hotkeys: yeah, I upvoted ones that I couldn't golf down shorter

[05:04] <AlexDaniel> (almost all of them)

[05:05] <Hotkeys> woo

[05:05] <b2gills> Well that's what you get when you combine things from languages that are over 30 years old

[05:06] *** khw joined
[05:08] *** vendethiel left
[05:11] *** protium joined
[05:28] <sortiz> Just installed new R* with msi, then I try "p6doc faq" and get "Variable '@rem' is not declared...", seems that the panda's wrapper for windows is trying to run the bat file.

[05:28] *** MadcapJake joined
[05:30] <MadcapJake> ZoffixWin, why'd you change your modules' META.info to META6.json files?

[05:36] <sortiz> Indeed, s/.bat// in perl6\site\bin\p6doc solves the issue. Not others files in bin affected, just p6doc!

[05:36] <AlexDaniel> sortiz: PR! PR! PR! :)

[05:37] <sortiz> AlexDaniel, I need to check first where is the wrapper constructed.

[05:38] <ugexe> because the .bat is automatically generated now

[05:39] *** lokien_ joined
[05:41] <sortiz> The p6doc.bat file seems right, is panda's p6 wrapper bin/p6doc that had the problem.

[05:43] <ugexe> its the same code https://github.com/rakudo/rakudo/blob/nom/src/core/CompUnit/Repository/Installation.pm#L24

[05:43] <b2gills> I just noticed that https://codegolf.stackexchange.com/a/66454/1147 was broken because three of the "characters" were trimmed

[05:46] *** vendethiel joined
[05:47] *** Cabanossi left
[05:47] <sortiz> ugexe, right, panda is innocent then. In this case somehow the perl_wrapper got 'p6doc.bat' in #name# 

[05:47] <jeek> Is there any new perl6 magic to more quickly find solutions for a+b+c+d+e+f+g+h==someconstant where a through h are each from the same 40320-entry list?

[05:49] <sortiz> p6doc includes its own p6doc.bat, that can be the problem.

[05:50] <ugexe> maybe. panda strips the .bat off the name. CURLI automatically adds it back on. but theres also already a `p6doc` file to go along with "p6doc.bat".subst(/.*\.bat$) (the same)

[05:50] <AlexDaniel> jeek: what is 40320-entry list?

[05:51] <jeek> A list with 40320 entries in it.

[05:51] *** Cabanossi joined
[05:51] <AlexDaniel> aaa

[05:51] <jeek> Permutations of 12345678, if it matters.

[05:52] <ugexe> but yea, the perl6 wrapper will try to run the p6doc .bat as a perl6 file

[05:56] <AlexDaniel> m: say 42 ~~ any(((1…9).permutations).map: &sum)

[05:56] <AlexDaniel> jeek: ↑ ?

[05:56] <AlexDaniel> might take some time to compute…

[05:57] <camelia> rakudo-moar 8bd7ee: OUTPUT«(timeout)»

[05:58] <AlexDaniel> jeek: hold on, but the result is always the same…

[05:58] *** khw left
[06:00] <AlexDaniel> jeek: did you mean combinations?

[06:00] <jeek> 12345678, 12345687, 12345768, 123456786, ..., 87654312, 87654321

[06:01] <jeek> looking for all nonrepeating length-8 subsets of that list that sum to 39999996

[06:02] <AlexDaniel> ah…

[06:03] <AlexDaniel> so that's combinations of permutations? :)

[06:03] *** bjz joined
[06:04] <AlexDaniel> jeek: that's going to take quite some time to compute with the most obvious solution

[06:04] <AlexDaniel> even if you do that in parallel

[06:04] <sortiz> ugexe, Any way source doc/bin/p6doc.bat seems superfluous. 

[06:07] *** protium left
[06:07] *** bjz left
[06:20] *** kanishka joined
[06:23] *** wbill left
[06:28] *** vendethiel left
[06:31] *** AlexDaniel left
[06:37] *** domidumont joined
[06:39] <perlawhirl> permutations is quite slow to eagerly evaluate once you have more than a small handful

[06:39] <perlawhirl> m: say +(^7).permutations; say now - INIT now

[06:39] <camelia> rakudo-moar 8bd7ee: OUTPUT«5040␤1.3458848␤»

[06:40] <perlawhirl> m: say +(^8).permutations; say now - INIT now

[06:40] <camelia> rakudo-moar 8bd7ee: OUTPUT«40320␤9.63394466␤»

[06:40] <perlawhirl> it keeps going up almost by orders of 10

[06:42] *** domidumont left
[06:44] *** domidumont joined
[06:45] <b2gills> m: say (^10).permutations.elems; say now - INIT now # really this optimization should be enabled, but I think there is a bug in List

[06:45] <camelia> rakudo-moar 8bd7ee: OUTPUT«(timeout)»

[06:46] <b2gills> m: say permutations(10).elems; say now - INIT now

[06:46] <camelia> rakudo-moar 8bd7ee: OUTPUT«3628800␤0.0039319␤»

[06:46] *** geraud left
[06:47] *** zakharyas joined
[06:48] *** CurtisOvidPoe joined
[06:50] *** domidumont left
[06:52] *** vendethiel joined
[06:57] *** raiph left
[06:58] <jeek> I got something together in python that is at least spitting out answers quickly, but there's going to be a lot of them.

[06:59] <perlawhirl> m: say permutations( +(^15).join.comb ).elems # /70982/rearranging-the-sequence

[06:59] <camelia> rakudo-moar 8bd7ee: OUTPUT«2432902008176640000␤»

[06:59] <perlawhirl> that is the quickest way i've found

[06:59] <perlawhirl> where 15 is the imput

[06:59] <perlawhirl> my $i = 30; say permutations( +(^$i).join.comb ).elems

[07:00] <perlawhirl> odd

[07:00] <perlawhirl> say permutations( +(^100).join.comb ).elems

[07:00] <perlawhirl> oops

[07:00] <perlawhirl> m: my $i = 30; say permutations( +(^$i).join.comb ).elems    

[07:00] <camelia> rakudo-moar 8bd7ee: OUTPUT«30414093201713378043612608166064768844377641568960512000000000000␤»

[07:01] <jeek> https://gist.github.com/anonymous/1afc48c1910561a170eb

[07:07] *** CurtisOvidPoe left
[07:08] *** sjoshi joined
[07:09] *** domidumont joined
[07:10] <Hotkeys> that's a lot of stuff

[07:13] <perlawhirl> say permutations(+(^(+$_||1)).join.comb).elems for lines # /70982/rearranging-the-sequence

[07:27] <nine> .tell raiph I'm not on reddit, but would be happy to discuss these things on #perl6-toolchain.

[07:27] <yoleaux> nine: I'll pass your message to raiph.

[07:31] <perlawhirl> ohai nine

[07:31] *** nakiro joined
[07:31] <perlawhirl> remember you asked me about reporting issues with panda complaining about reinstalling already installed modules

[07:31] <perlawhirl> i think i managed to replicate it

[07:31] *** vendethiel left
[07:31] <perlawhirl> i installed a module from the eco system

[07:32] <perlawhirl> i wanted to try some modifications, so cloned it from git, made may changes. when i then tried to do a local install with panda (from my cloned copy) it complains it's already installed and dies

[07:33] *** _Gustaf_ joined
[07:33] <perlawhirl> i understand maybe the reasoning why... perhaps it could say 'already installed, are you sure you want to overwrite with ...' etc

[07:39] *** perlawhirl left
[07:40] <El_Che> perlpilot: fork the name?

[07:40] <El_Che> Blah::Blue::Forked

[07:41] *** _mg_ joined
[07:44] <[Tux]> test            23.214

[07:44] <[Tux]> test-t          12.583

[07:44] <[Tux]> csv-parser      50.953

[07:45] *** _mg__ joined
[07:46] *** _mg_ left
[07:46] *** _mg__ is now known as _mg_

[07:46] *** cxreg2 is now known as cxreg

[07:47] <dalek> perl6.org: d27cf15 | (Steve Mynott)++ | source/downloads/index.html:

[07:47] <dalek> perl6.org: refer to new window's MSIs

[07:47] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/d27cf151b0

[07:48] *** MadcapJake left
[07:49] *** CIAvash joined
[07:59] *** lokien_ left
[08:01] *** Ven joined
[08:02] *** salv0 joined
[08:02] *** zakharyas left
[08:11] *** FROGGS joined
[08:12] *** skids left
[08:12] *** uruwi joined
[08:13] <moritz> .tell perlawhirl panda has a --force option to overwrite existing installations of a module

[08:13] <yoleaux> moritz: I'll pass your message to perlawhirl.

[08:13] *** darutoko joined
[08:14] *** Ven left
[08:14] <dalek> perl6.org: 9d0de27 | (Steve Mynott)++ | source/downloads/index.html:

[08:14] <dalek> perl6.org: add whitespaxe

[08:14] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/9d0de27b1e

[08:15] <uruwi> Anyone else having problems with Compress::Zlib on Rakudo Star 2016.01?

[08:18] <stmuk_> uruwi: do you have a short code example?

[08:19] <uruwi> Try running the tests for Compress::Zlib.

[08:19] <uruwi> * Compress::Zlib::Raw

[08:19] <uruwi> Seems to be a Find::Bundled problem, though

[08:20] <FROGGS> o/

[08:21] <uruwi> The stack trace leads to line 10 of this source: https://github.com/retupmoca/P6-Find-Bundled/blob/10677e4a9981ae33e9bb0f7409c399a60f1dc0c9/lib/Find/Bundled.pm6

[08:22] <FROGGS> uruwi: there is no @*INC anymore, is there?

[08:22] <FROGGS> m: say @*INC

[08:22] <camelia> rakudo-moar 8bd7ee: OUTPUT«Dynamic variable @*INC not found␤  in block <unit> at /tmp/tm5rbEx4zL line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/tm5rbEx4zL line 1␤␤»

[08:24] <uruwi> That explains it.

[08:25] <timotimo> o/

[08:26] <stmuk_> maybe try something like  ($*REPO.repo-chain()>>.Str).grep: *.IO.d

[08:27] <moritz> the first thing it does in the loop is create CompUnit::Repository from the strings anyway

[08:27] <moritz> so maybe just "for ($*REPO.repo-chain() { ... 

[08:27] <moritz> ?

[08:28] <stmuk_> I think that would contain objects as well as directories

[08:28] <uruwi> m: say ($*REPO.repo-chain()>>.Str).grep: *.IO.d

[08:28] <camelia> rakudo-moar 8bd7ee: OUTPUT«(/home/camelia/rakudo-m-inst-1/share/perl6/site /home/camelia/rakudo-m-inst-1/share/perl6/vendor /home/camelia/rakudo-m-inst-1/share/perl6)␤»

[08:29] <stmuk_> oh moritz is right that's what you want anyway

[08:30] <stmuk_> I was never sure why the list contained two data types TBH

[08:30] <El_Che> META.info is nowadays META6.json?

[08:33] *** bioexpress joined
[08:33] *** wamba joined
[08:33] <timotimo> aye think so

[08:33] <stmuk_> yeah I think S22 changed

[08:34] <bioexpress> Hi, could changing a signature from `( Array $list, %opt? )` to `( Array $list, Hash $opt? )` break the API?

[08:34] <stmuk_> actually it seems to change more frequently than I change shirts

[08:34] *** perlawhirl joined
[08:36] <uruwi> Replacing @*INC with all that didn't get rid of the error, though.

[08:39] <moritz> bioexpress: it could. The % sigil actually implies Associative (a role that Hash does), not Hash itself

[08:39] <moritz> bioexpress: but why would you even do that?

[08:41] *** firstdayonthejob left
[08:42] <uruwi> Did CompUnit::Repository change its definition?

[08:43] <uruwi> Seems to have added an id method

[08:45] *** Amendil left
[08:46] <El_Che> the json extension is nice to get syntax highlighting in vim :)

[08:47] *** rindolf joined
[08:47] *** cibs left
[08:48] <sortiz> Testing new R* MSI, found a more serious problem with p6doc: No documents are installed, because Build.pm fails. See https://github.com/perl6/doc/pull/383

[08:49] <moritz> sortiz: I'm waiting for the travis check before merging that pull request

[08:49] <moritz> sortiz: and thanks for the pull request, btw :-)

[08:49] <bioexpress> moritz: I don't change it - the question occured to me because  `Array $list, %opt` looked a little "unbalanced" to me.

[08:49] <moritz> sortiz: I've also invited you to the perl6 org on github, so you can push directly

[08:50] <moritz> bioexpress: right, I'd just use (@list, %opt)

[08:51] <bioexpress> moritz: because it looks better or do I gain something else?

[08:51] <sortiz> \o/ thanks moritz, I'll be very careful.

[08:52] <moritz> bioexpress: because you can iterate over it

[08:52] <moritz> for @list { ... } # works

[08:53] <bioexpress> moritz: is there a difference in speed between passing it as @list or as Array $list?

[08:53] <moritz> bioexpress: yes, $ is always a scalar

[08:53] *** cibs joined
[08:54] *** perlawhirl left
[08:54] <timotimo> not a difference in speed, really

[08:55] *** vendethiel joined
[08:56] <bioexpress> Thx, so I will try it with @list.

[08:56] <timotimo> though ... maybe it does have an impact. i haven't measured

[08:57] *** fireartist joined
[08:59] *** Ven joined
[09:01] *** perlawhirl joined
[09:02] *** RabidGravy joined
[09:06] *** buharin joined
[09:06] <buharin> hello :)

[09:07] <DrForr> Mornin'.

[09:07] <dalek> perl6.org: 4039a64 | (Steve Mynott)++ | source/downloads/index.html:

[09:07] <dalek> perl6.org: explain star

[09:07] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/4039a641cf

[09:08] <buharin> hey I was looking for list of module to implement

[09:08] *** mr-foobar left
[09:08] <buharin> but I don't know what to take :/

[09:08] <buharin> for beginning

[09:09] <timotimo> so you already found the "most wanted" project on github?

[09:09] *** mr-foobar joined
[09:11] <buharin> no I didn't decide

[09:12] *** ecocode joined
[09:12] *** gregf__ left
[09:12] *** firstdayonthejob joined
[09:12] *** breinbaas left
[09:12] <El_Che> buharin: https://github.com/perl6/perl6-most-wanted/blob/master/most-wanted/README-wanted.md

[09:13] <RabidGravy> well I could do with a really good logging thing, an eventsource client, something a bit like SQL::Abstract and a few other things

[09:13] *** breinbaas joined
[09:13] <buharin> ye I look at this https://github.com/perl6/perl6-most-wanted/blob/master/most-wanted/modules.md but I don't know what is best for beginnng

[09:13] *** gregf_ joined
[09:14] *** abraxxa joined
[09:15] <RabidGravy> I would actually look at it from a different angle, think of an application that would be useful to you, look at how you might make it, make modules that might be neeeded

[09:15] <buharin> RabidGravy: thats a point

[09:15] <El_Che> buharin: you could send a PR to fix this module: https://github.com/retupmoca/P6-Net-SMTP/issues

[09:16] <El_Che> buharin: if uses a method removed from rakudo

[09:16] *** bioexpress left
[09:16] *** ocbtec joined
[09:16] <stmuk_> extending test coverage for existing modules is useful too since many don't test themselves at all

[09:16] <buharin> okay ;-) I will look at it at home

[09:16] *** vendethiel left
[09:16] <DrForr> The Standard code modules from I18n are relatively low-hanging fruit.

[09:17] <buharin> when an web framework perl will be announced anyway?

[09:17] <DrForr> Bailador is there but somewhat stale.

[09:17] <RabidGravy> yeah, some standard locale stuff for dates, numbers and stuff would be useful

[09:19] <dalek> doc: d00b0c5 | (Salvador Ortiz)++ | Build.pm:

[09:19] <dalek> doc: Update Build.pm

[09:19] <dalek> doc: 

[09:19] <dalek> doc: In windows File::Find::&find returns files with backslash (\) separator, so $dest.split fails to find '/doc' in them.

[09:19] <dalek> doc: See:

[09:19] <dalek> doc: ```

[09:19] <dalek> doc: > say $dest, '=>', $dest.split("$workdir/doc")[1];

[09:19] <dalek> doc: C:\rakudo\tests\doc\doc\Type\X\Syntax\Signature\InvocantMarker.pod=>Nil

[09:19] <dalek> doc: > say $dest, '=>', $dest.split("$workdir\\doc")[1];

[09:19] <dalek> doc: C:\rakudo\tests\doc\doc\Type\X\Syntax\Signature\InvocantMarker.pod=>\Type\X\Syntax\Signature\InvocantMarker.pod

[09:19] <dalek> doc: ```

[09:19] <dalek> doc: review: https://github.com/perl6/doc/commit/d00b0c507d

[09:19] <dalek> doc: a30c00d | sylvarant++ | Build.pm:

[09:19] <dalek> doc: Merge pull request #383 from salortiz/patch-1

[09:19] <dalek> doc: 

[09:19] <dalek> doc: Fix Build.pm for proper Windows support

[09:19] <dalek> doc: review: https://github.com/perl6/doc/commit/a30c00d1ff

[09:29] *** Averna joined
[09:30] *** perlawhirl left
[09:30] *** yeahnoob left
[09:32] *** CIAvash left
[09:33] <fireartist> morning! How can I pass a %hash to a method with signature (*@args), such that it sees a single hash, instead of a list of kv pairs?

[09:34] <jnthn> $%hash or %hash.item

[09:34] <yoleaux> 4 Feb 2016 22:02Z <lizmat> jnthn: could it be that nqp::attrinited gives false positives?  it may be buggy, as it only seems to be used in one place in nqp ?

[09:35] *** mr-foobar left
[09:35] <fireartist> jnthn: thanks - do you now what doc page explains that leading $ version?

[09:35] *** Zero_Dogg left
[09:35] <jnthn> .tell lizmat It's used in Mu.pm and is hit every single object construction. It's not buggy, but you do need to know that if anything did an nqp::getattr on the attribute then it'll have been vivified, and so count as atterinited. So if things are fetching it elsewhere in Hash/Map rather than doing the inited check, that may be the issue.

[09:35] <yoleaux> jnthn: I'll pass your message to lizmat.

[09:36] *** Zero_Dogg joined
[09:36] <jnthn> fireartist: http://doc.perl6.org/language/containers#Flattening%2C_items_and_containers seems to talk about it a bit

[09:37] <jnthn> (May need to read earlier bits of the page for context)

[09:37] <fireartist> jnthn++ thanks very much!

[09:39] *** mr-foobar joined
[09:41] *** sjoshi left
[09:44] *** mr-foobar left
[09:44] *** mr-foobar joined
[09:49] *** kanishka left
[09:57] *** sjoshi joined
[09:58] *** vendethiel joined
[10:00] *** kjs_ joined
[10:01] <RabidGravy> I might add an option to Test::lives-ok so that in the fail case it can print the full back-trace of the exception rather than just the message

[10:02] <RabidGravy> the number of times I've had a lives-ok fail, not sure why gone from message to the test file and commented out the lives-ok part to jut get the full exception 

[10:03] *** Amendil joined
[10:03] *** yurivish_ left
[10:07] *** Amendil left
[10:17] *** zakharyas joined
[10:17] <dalek> doc/salortiz-remove-bat: 7195760 | (Salvador Ortiz)++ | bin/p6doc.bat:

[10:17] <dalek> doc/salortiz-remove-bat: Delete p6doc.bat, unneded with CURLI

[10:17] <dalek> doc/salortiz-remove-bat: 

[10:17] <dalek> doc/salortiz-remove-bat: In windows, at install time CURLI creates a bat file when needed, and this file results in an non-functional perl6 wrapper created in ..\\site\\bin.

[10:17] <dalek> doc/salortiz-remove-bat: review: https://github.com/perl6/doc/commit/7195760740

[10:20] *** vendethiel left
[10:31] *** espadrine joined
[10:31] *** perlawhirl joined
[10:36] *** Ven left
[10:36] *** partly joined
[10:36] <partly> hi

[10:36] *** Amendil joined
[10:36] <partly> I'm trying to build the current moarvm

[10:37] <FROGGS> hi partly 

[10:37] <FROGGS> partly: and you are running into problems?

[10:38] <partly> if i execute rakudobrew build moar i'm getting an error

[10:38] * partly is searching for an official perl6 nopaste

[10:38] *** Averna left
[10:38] <FROGGS> partly: use any no-paste service you like

[10:38] <FROGGS> or gist.github.com

[10:39] <partly> http://nopaste.linux-dev.org/?936462

[10:39] *** zakharyas left
[10:39] <partly> I had some problems before but i fixed them by installing perl-Test-Harness and perl-ExtUtils-Command

[10:39] <partly> But this one does not look like a missing dependency

[10:39] <timotimo> when i got that error, i just had to nuke my install folder

[10:40] <timotimo> and it went away

[10:40] <FROGGS> no, looks more like NativeCall is unhappy

[10:40] <FROGGS> yeah, that might solve it

[10:40] <partly> Why is native call unhappy

[10:40] <timotimo> it's really hard to see that it's about nativecall, what with the obfuscated names

[10:41] <FROGGS> timotimo: "bool" only exists in NativeCall land

[10:41] <timotimo> yeah

[10:41] *** pangur joined
[10:41] <timotimo> but a regular user wouldn't know about that

[10:41] <FROGGS> partly: I guess it is fetching a NativeCall::* package from a previous build from install/

[10:42] <FROGGS> true

[10:42] <partly> FROGGS: this makes sense. I have a working perl6 installation

[10:42] *** donaldh joined
[10:42] <partly> so just rm -rf ~/.rakudobrew/moar-nom/install/* should fix it?

[10:43] *** travis-ci joined
[10:43] <travis-ci> Doc build passed. Salvador Ortiz 'Delete p6doc.bat, unneded with CURLI

[10:43] <travis-ci> https://travis-ci.org/perl6/doc/builds/107200294 https://github.com/perl6/doc/commit/7195760740d8

[10:43] *** travis-ci left
[10:43] <pangur> I have been trying out the http://perl6intro.com/#_running_perl_6_code and find that the script involving zoo animals does not work for me --- even though I merely copied it into my emacs.

[10:43] <pangur> The error message that I get is this:

[10:44] <pangur> perl6 test.p6

[10:44] <pangur> [31m===[0mSORRY![31m===[0m Error while compiling test.p6

[10:44] <pangur> Confused

[10:44] <pangur> at test.p6:5

[10:44] <pangur> ------> [32m<BOL>[33m⏏[31mmy @animals = ['camel','vicuña','llama'][0m

[10:44] <pangur>     expecting any of:

[10:44] <pangur>         statement list

[10:44] <pangur> Sorry, I hope that was not flooding.

[10:44] <FROGGS> we usually use no-pastes for that as well

[10:45] <FROGGS> can you no-paste your test.p6?

[10:45] <FROGGS> if you put it in a gist we can run it here

[10:46] <pangur> https://paste.fedoraproject.org/318894/

[10:47] <FROGGS> pangur: line 3 misses a semicolon at the end

[10:47] <timotimo> why don't we give a good error about that?

[10:47] <pangur> I just copied and pasted directly from the tutorial.

[10:48] <FROGGS> m: use v6␤say 42

[10:48] <camelia> rakudo-moar 8bd7ee: OUTPUT«5===SORRY!5=== Error while compiling /tmp/XoL8rLLZpu␤Confused␤at /tmp/XoL8rLLZpu:2␤------> 3use v67⏏5<EOL>␤»

[10:48] <pangur> ah not line 3

[10:48] *** pecastro joined
[10:48] <FROGGS> m: use v6␤␤say 42

[10:48] <camelia> rakudo-moar 8bd7ee: OUTPUT«5===SORRY!5=== Error while compiling /tmp/TlMR3Ke8oN␤Confused␤at /tmp/TlMR3Ke8oN:3␤------> 3use v67⏏5<EOL>␤»

[10:48] <FROGGS> m: use v6␤␤my $bar

[10:48] <camelia> rakudo-moar 8bd7ee: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ZV1IGAXgbG␤Confused␤at /tmp/ZV1IGAXgbG:3␤------> 3use v67⏏5<EOL>␤»

[10:48] <partly> FROGGS, timotimo: Thanks for the advice, it seems to work

[10:49] <RabidGravy> yep works fine with the ; on that line

[10:49] <FROGGS> \o/

[10:49] <jnthn> m: say 42␤say 43

[10:49] <timotimo> partly: glad to hear it!

[10:49] <camelia> rakudo-moar 8bd7ee: OUTPUT«5===SORRY!5=== Error while compiling /tmp/lz83psBHwF␤Two terms in a row across lines (missing semicolon or comma?)␤at /tmp/lz83psBHwF:2␤------> 3say 427⏏5<EOL>␤    expecting any of:␤        infix␤        infix stopper␤        postfi…»

[10:49] <flussence> m: use Test␤my $bar

[10:49] <camelia> rakudo-moar 8bd7ee: OUTPUT«5===SORRY!5=== Error while compiling /tmp/N3jsZb8jfn␤Error while importing from 'Test':␤no EXPORT sub, but you provided positional argument in the 'use' statement␤at /tmp/N3jsZb8jfn:2␤------> 3my $bar7⏏5<EOL>␤    expecting any of:␤   …»

[10:49] <FROGGS> bbl

[10:49] <jnthn> FROGGS: I think it only intuits it if there's a TTIAR

[10:49] <jnthn> flussence: heh, that one is actually legal syntax :)

[10:49] <jnthn> Oh no, you could do something horrible with that!

[10:49] <pangur> OK, sorry for missing the semicolon at use v6; However I now get this error:

[10:49] <pangur> use of uninitialized value of type Any in string context  in block  at test.p6:15

[10:49] <RabidGravy> my hovercraft is full of eels

[10:50] <timotimo> jnthn: you could pass a variable to the EXPORT sub and have the export sub "is rw" it, you mean? :)

[10:50] <jnthn> timotimo: Correct :)

[10:50] <flussence> sounds like a case of DIHWIDT

[10:51] <pangur> What is wrong with "say "We're going to let go: " ~ @animals.splice(1,2) ~ " and keep the " ~ @animals;"

[10:51] <partly> I executed rakudobrew build moar && rakudobrew build-panda

[10:51] <jnthn> flussence: I'm sure it could be used to good effect, I just hadn't thought of it :)

[10:51] <partly> if i execute perl6 --version it shows me Rakudo version 2015.12... built on MoarVM version 2016.01

[10:51] <partly> shouldn't i have the Rakudo version 2016.01 after update?

[10:51] *** TEttinger left
[10:52] <jnthn> partly: I think it builds HEAD, but 2016.01 was done from a release branch that didn't get pulled back into HEAD yet.

[10:52] <dalek> doc: 7195760 | (Salvador Ortiz)++ | bin/p6doc.bat:

[10:52] <dalek> doc: Delete p6doc.bat, unneded with CURLI

[10:52] <dalek> doc: 

[10:52] <dalek> doc: In windows, at install time CURLI creates a bat file when needed, and this file results in an non-functional perl6 wrapper created in ..\\site\\bin.

[10:52] <dalek> doc: review: https://github.com/perl6/doc/commit/7195760740

[10:52] <dalek> doc: 7b80938 | (Salvador Ortiz)++ | bin/p6doc.bat:

[10:52] <dalek> doc: Merge pull request #384 from perl6/salortiz-remove-bat

[10:52] <dalek> doc: 

[10:52] <dalek> doc: Delete p6doc.bat, unneded with CURLI

[10:52] <dalek> doc: review: https://github.com/perl6/doc/commit/7b80938dd0

[10:52] <jnthn> partly: I don't really know how rakudobrew works, but I think you'd need to give it the tag name to build precisely 2016.01

[10:53] <partly> jnthn: so how do you upgrade and deploy perl6 if you are not using rakudobrew? I thought this is the official way?

[10:54] <RabidGravy> it's a way

[10:54] <pangur> https://paste.fedoraproject.org/318897/54669607/ shows the output from the tutorial script.

[10:54] <RabidGravy> rakudobrew makes it easy to manage the various versions in a way like perlbrew

[10:55] <RabidGravy> but installing from source may be better for "production" use

[10:55] <pangur> I am wondering if my perl6 is properly installed? Is there a way I could tell?

[10:55] <jnthn> partly: Using the releases is another way: http://rakudo.org/

[10:55] <El_Che> --> packaging to rpm/deb, etc

[10:56] <RabidGravy> pangur, what does "per6 -v" say?  I don't get that running the same code

[10:56] *** kjs_ left
[10:56] <pangur> This is perl6 version 2013.12 built on parrot 5.9.0 revision 0

[10:56] *** kjs_ joined
[10:57] <partly> i see

[10:57] <RabidGravy> pangur, way old, you will need to upgrade

[10:57] <pangur> ah ok, thanks RabidGravy.

[10:57] <pangur> I only installed it yesterday :)

[10:57] <RabidGravy> where from? and how?

[10:57] <flussence> from a bad distro, I'm guessing...

[10:58] <RabidGravy> parrot isn't even supported any more afaik

[10:58] <pangur> sudo apt-get install perl6 I think.

[10:58] <RabidGravy> lawks

[10:58] <flussence> ah, Debian Stale.

[10:58] <pangur> I use linuxmint

[10:58] <El_Che> Debian Stale :)

[10:58] <El_Che> aha

[10:58] <flussence> same thing :)

[10:59] <pangur> So, how should I install it instead?

[10:59] <RabidGravy> pangur, http://rakudo.org/how-to-get-rakudo/

[10:59] <partly> btw zef or panda? which one should be used?

[10:59] <pangur> click

[10:59] <RabidGravy> a number of options

[11:00] <pangur> OK, thanks for the link

[11:00] *** kjs_ left
[11:03] <timotimo> hahaha, 2013.12, that's kind of hilarious :)

[11:04] *** Ven joined
[11:07] *** ely-se joined
[11:09] <timotimo> https://twitter.com/dclinephx/status/695470443164110849 - cool. i wonder if we can haz slides? does anybody know this person?

[11:11] *** emdashcomma_ left
[11:11] <partly> are the FOSDEM Perl6 videos already online some where?

[11:11] *** mr-foobar left
[11:11] *** Cabanossi left
[11:11] *** lucs_ left
[11:11] *** jameslen_ left
[11:11] *** zacts left
[11:11] *** alnewkirk left
[11:12] <timotimo> https://video.fosdem.org/2016/STATUS.txt - the number hasn't gone up since last night. last night there were no perl6 related videos yet

[11:12] *** firstdayonthejob left
[11:12] *** sortiz left
[11:12] *** juu left
[11:12] *** Rotwang left
[11:12] *** ingy left
[11:12] *** anshin left
[11:12] <partly> timotimo: thanks

[11:13] *** zacts joined
[11:13] *** lucs joined
[11:13] *** alnewkirk joined
[11:13] *** zacts is now known as Guest52031

[11:13] *** Rotwang joined
[11:13] *** jameslenz joined
[11:14] *** salv0 left
[11:14] *** mcmillhj_ left
[11:16] *** Cabanossi joined
[11:16] *** emdashcomma joined
[11:16] <Ven> the names rooms are :|

[11:16] <pangur> I removed perl6, installed rakudobrew via git clone, and I still seem to have parrot 5.9.0 revision 0 :(

[11:17] <Ven> s/names rooms/room names/

[11:17] <Ven> pangur: huh?

[11:17] <timotimo> pangur: with "which perl6" you can find out where it takes the perl6 binary from

[11:18] *** kid51 joined
[11:18] <pangur>  '/usr/bin/perl

[11:18] <timotimo> OK, so somehow it's still installed system-wide

[11:18] <timotimo> not sure how to determine if that's what dpkg installed for you

[11:18] <pangur> It was perl5 originally

[11:19] <flussence> wait, *what*?

[11:19] <pangur> that was at /usr/bin/perl

[11:19] <timotimo> huh?

[11:19] <timotimo> did you just type and forgot the 6?

[11:19] *** juu joined
[11:20] <pangur> '/usr/bin/perl6

[11:20] *** ely-se left
[11:20] <pangur> I did which perl rather than which perl6

[11:20] <timotimo> OK

[11:20] <pangur> Sorry

[11:21] *** mr-foobar joined
[11:21] <timotimo> so, something's still giving you a /usr/bin/perl6?

[11:22] <pangur> yes but it obviously is not the perl6 version that I had been hoping for.

[11:23] <timotimo> right. so you've tried to uninstall the perl6 package, but it somehow didn't work?

[11:23] <pangur> When I do sudo apt-get remove perl6, it says Note, selecting rakudo instead of perl6

[11:23] <timotimo> that could be all right

[11:24] *** anshin joined
[11:25] <pangur> Ah, I have now autoremoved libparrot5.9.0 nqp parrot parrot-minimal

[11:25] *** sortiz joined
[11:25] *** firstdayonthejob joined
[11:25] *** ingy joined
[11:25] <timotimo> but none of those packages should provide the perl6 binary

[11:25] <timotimo> well, it's a moot point, that stuff is years out of date and we can't change it now

[11:27] <pangur> Now, when I do perl6 -v I get bash: /usr/bin/perl6: No such file or directory

[11:27] <pangur> That sounds as I am making progress, I hope :)

[11:27] <timotimo> it's interesting that it's giving you a specific path

[11:28] <pangur> I have perl5 still installed.

[11:28] <pangur> Does that make a difference?

[11:28] <timotimo> no, perl6 and perl5 are completely separate

[11:28] <pangur> phew

[11:29] <pangur> I think my system relies on perl5 

[11:29] <sortiz> pangur, Yes! You NEED perl5 to build rakudo.

[11:29] <DrForr> And to run a lot of what's on your system already, for that matter :)

[11:30] <pangur> Yeah, I still have perl5.

[11:30] <pangur> Am removing directories referring to rakudo

[11:31] <sortiz> night #perl6

[11:31] <timotimo> it's generally a bad idea to manually muck with files managed by the package manager, but since you've already killed the packages, it may be all right

[11:31] <timotimo> gnite sortiz 

[11:31] *** kaare_ joined
[11:32] *** sortiz left
[11:38] *** vendethiel joined
[11:38] <pangur> OK, I have gotten as far as to git clone rakudobrew. 

[11:39] <pangur> At this point, it looks as if I am faced with choiuce moar or panda.

[11:39] <pangur> choice

[11:39] <RabidGravy> moar

[11:40] <timotimo> that's not really a choice

[11:40] <timotimo> "build moar" will give you a rakudo perl6 based on the MoarVM

[11:40] <pangur> I have to do panda as well?

[11:41] <timotimo> "build panda" gives you the module installer

[11:41] <pangur> ok

[11:41] <pangur> thanks

[11:41] <timotimo> panda won't run without a perl6

[11:41] <pangur> I missed these steps last time

[11:43] <pangur> I noticed that I could not sudo rakudobrew build moar, only rakudobrew build moar.

[11:44] <pangur> Rakudo has been built and installed.

[11:44] <flussence> the last person who blindly ran rakudobrew as root nuked their entire OS

[11:45] <jast> there were symlinks involved in that case, too

[11:45] <timotimo> yes, not sudo, please

[11:45] <timotimo> blind + unlucky in that case

[11:45] <pangur> Someone made the installer clever enough to prevent it. That is good.

[11:46] <pangur> I am currently installing panda

[11:46] <pangur> built panda :)

[11:48] <pangur> watching Task::Star install

[11:54] <pangur> This is Rakudo version 2015.12-242-g8bd7ee6 built on MoarVM version 2016.01 implementing Perl 6.c.

[11:55] <timotimo> good :)

[11:55] * pangur is in a happy mood

[11:55] * pangur goes to test his zoo :)

[11:56] *** azawawi joined
[11:56] <azawawi> hi #perl6

[11:57] *** xtreak joined
[11:57] *** Ven left
[11:57] <pangur> Now I get perl6 test.p6 /bin/bash: perl6: command not found

[11:57] <pangur> Am I ever going to get this zoo working?

[11:58] *** RabidGravy left
[11:59] <pangur> OK, I have gotten it. If I use the terminal, I am OK.

[11:59] *** donaldh_ joined
[11:59] <azawawi> https://atom.io/packages/atom-perl6-editor-tools  # New release of Atom Perl 6 editor tools (v0.7.0)

[12:00] <pangur> Thanks for your help, timotimo

[12:01] <timotimo> you're welcome :)

[12:01] *** donaldh left
[12:01] *** donaldh_ is now known as donaldh

[12:01] *** pangur left
[12:02] *** vendethiel left
[12:02] <timotimo> azawawi: do you think it'd be sensible to make the rendered pod use atom's theme?

[12:03] * timotimo briefly falls over from random, unreasonable exhaustion

[12:03] <azawawi> timotimo: https://github.com/azawawi/atom-perl6-editor-tools#todo

[12:03] <azawawi> timotimo: :)

[12:04] <azawawi> timotimo: sure im adding features and fixing TODOs :)

[12:04] <azawawi> timotimo: vim Perl 6 snippets are up

[12:04] *** pangur joined
[12:04] <azawawi> timotimo: prove-ing test is also there...

[12:04] <timotimo> i saw :)

[12:05] <azawawi> timotimo: now to syntax checking :)

[12:05] <azawawi> timotimo: basically farabi6 

[12:05] <ZoffixWin> .tell MadcapJake because I wanted to be cool and popular!

[12:05] <yoleaux> ZoffixWin: I'll pass your message to MadcapJake.

[12:05] *** juu left
[12:05] <azawawi> ZoffixWin: you're cool and popular :)

[12:06] <ZoffixWin> .tell MadcapJake but it's my understanding META6.json is what the file should be called now and META.info is the old name so *shrug*

[12:06] <yoleaux> ZoffixWin: I'll pass your message to MadcapJake.

[12:06] <pangur> My program will run in terminal but my emacs cannot find perl6, and I am not sufficiently smart to be able to tell it how to find it :)

[12:07] <pangur> '/bin/bash: perl6: command not found

[12:07] <ZoffixWin> `type perl6` script.p6

[12:07] <ZoffixWin> :)

[12:08] <ZoffixWin> `which perl6` script.p6

[12:08] <ZoffixWin> Two thoughts crossed :P

[12:08] <azawawi> the last one is better

[12:08] <ZoffixWin> Actually... never mind that won't work either. I should at least drink 1 cup of coffee before I start helping someone :)

[12:08] <azawawi> since the first one returns 'perl6 is hashed (/home/azawawi/.rakudobrew/bin/perl6)'

[12:08] <pangur> Which perl6: /home/calum/.rakudobrew/bin/perl6

[12:09] <azawawi> i stopped drinking instant coffee and now im better :)

[12:09] <ZoffixWin> pangur, so use that. My guess is inside emacs, your PATH does not include the Rakudobrew path 

[12:10] <pangur> I suppose I should ask in the emacs room.

[12:11] <azawawi> pangur: also https://github.com/hinrik/perl6-mode seems useful

[12:12] <pangur> ah, thanks for that link, azawawi :)

[12:13] *** eyck left
[12:13] *** pangur left
[12:13] <llfourn_> m: role R { multi method foo(Cool) { } }; class C { multi method foo(Str) { } }; my $t = C.new does R; $t.foo("yo")

[12:13] <camelia> rakudo-moar 8bd7ee: OUTPUT«Ambiguous call to 'foo'; these signatures all match:␤:(C $: Str $, *%_)␤:(C+{R} $: Cool $, *%_)␤  in block <unit> at /tmp/sZw_0DpxCb line 1␤␤»

[12:13] <llfourn_> can anyone explain to me what that is "Ambiguous"?

[12:13] <llfourn_> why that is*

[12:13] <llfourn_> I think it's a bug

[12:15] <llfourn_> m: role R { multi method foo(Cool) { } }; class C does R { multi method foo(Str) { } }; my $t = C.new; $t.foo("yo") # works if you don't use a mixin

[12:15] <camelia> rakudo-moar 8bd7ee: ( no output )

[12:15] *** llfourn_ is now known as llfourn

[12:15] <ZoffixWin> m: role R { multi method foo(Int) { } }; class C { multi method foo(Str) { } }; my $t = C.new does R; $t.foo("yo")

[12:15] <camelia> rakudo-moar 8bd7ee: ( no output )

[12:15] <ZoffixWin> yeah, probably a bug

[12:15] <llfourn> hmm interesting why does that work?

[12:15] *** ely-se joined
[12:16] <ZoffixWin> Because Cool includes Str

[12:16] <ZoffixWin> But Int doesn't

[12:16] <llfourn> right yeah ofc :S

[12:17] <llfourn> ok thanks RTing :)

[12:18] <ZoffixWin> m: role R { multi method foo(Str) { } }; class C { multi method foo(Cool) { } }; my $t = C.new does R; $t.foo("yo")

[12:18] <camelia> rakudo-moar 8bd7ee: ( no output )

[12:18] <ZoffixWin> Also works if the role provides the narrower class

[12:19] <llfourn> interesting...

[12:19] <llfourn> im guessing it's using the role's one

[12:19] *** partly left
[12:19] <ZoffixWin> m: role R { multi method foo(Str) { say "role"} }; class C { multi method foo(Cool) { say "class"} }; my $t = C.new does R; $t.foo("yo")

[12:19] *** eyck joined
[12:19] <camelia> rakudo-moar 8bd7ee: OUTPUT«role␤»

[12:22] *** firstdayonthejob left
[12:27] *** rindolf left
[12:30] *** mr-foobar left
[12:31] *** mr-foobar joined
[12:35] <jnthn> llfourn: Not a bug

[12:35] <jnthn> llfourn: Given A <: B, the signatures (A, B) and (B, A) will be tied.

[12:36] <jnthn> And your case is just an extension of that

[12:36] <jnthn> (C, Str) and (C+R, Cool) will be tied

[12:37] <jnthn> Because C+R <: C, but Str <: Cool

[12:37] <llfourn> jnthn: so there is an intended difference between Class.^mixin(R) and class Class does R { }?

[12:37] <jnthn> llfourn: Very much so

[12:38] <llfourn> hmm ok I'll have to ponder that

[12:38] <jnthn> The first is for per-object mixins

[12:38] <jnthn> The second is for compile time composition

[12:38] <llfourn> is there anyway to get the same MMR in a runtime mixin as if it had been compile time composed?

[12:39] *** kanishka joined
[12:39] *** donaldh left
[12:39] <masak> llfourn: all other things being equal, no.

[12:40] <masak> llfourn: they are different mechanisms, as jnthn points out above.

[12:40] <jnthn> No; runtime mixins are defined as "create an anonymous subclass and compose the role into that"

[12:41] <jnthn> And you generally *want* that, because otherwise you'd not be able to override multis in a mixin

[12:41] <lizmat> .messages

[12:41] <yoleaux> 09:35Z <jnthn> lizmat: It's used in Mu.pm and is hit every single object construction. It's not buggy, but you do need to know that if anything did an nqp::getattr on the attribute then it'll have been vivified, and so count as atterinited. So if things are fetching it elsewhere in Hash/Map rather than doing the inited check, that may be the issue.

[12:41] <llfourn> ok thanks (masak and jnthn)++ I will have to reconsider what I am doing :)

[12:43] *** kid51 left
[12:46] *** cbk left
[12:48] <lizmat> jnthn: but that basically means I cannot use attrinited for hash access

[12:50] <jnthn> lizmat: Well, it means you'd need to review all of Map/Hash and consistently use it

[12:51] <lizmat> well, I've been reviewing until I was blue in the face, but I couldn't find what was causing the failure

[12:52] <lizmat> and since this is pretty low level code, putting debug statements in there generally means creating an infinite loop

[12:52] <lizmat> because somewhere a hash access is being used  :-(

[12:52] <lizmat> coming up with a minimal patch

[12:54] *** molaf joined
[12:54] *** sufrostico joined
[12:55] <jnthn> lizmat: nqp::say('foo') would probably be low-level enough

[12:55] *** Ven joined
[12:55] <lizmat> can I do an attrinited check twice ?

[12:56] <lizmat> on the same attribute ?  or will the 2nd one give 1 ?

[12:56] <jnthn> Yes, you can do it twice

[12:56] <lizmat> ok

[12:56] <jnthn> it's nqp::getattr or nqp::bindattr that will cause change

[12:58] *** cbk joined
[13:04] <lizmat> even an nqp::say stops it from installing core modules  :-(

[13:04] <lizmat> trying again with another conditional

[13:05] <jnthn> nqp::printfh(nqp::stderr(), 'msg') maybe...

[13:06] *** cognominal left
[13:06] <lizmat> now it hangs building the restricted setting :-(

[13:10] <dalek> rakudo-star-daily: 5987eb2 | coke++ | log/ (9 files):

[13:10] <dalek> rakudo-star-daily: today (automated commit)

[13:10] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/5987eb206b

[13:10] <lizmat> jnthn: for reference, nqp::getstderr  :-)

[13:12] <jnthn> ah :)

[13:13] <lizmat> jnthn: so it indeed claims to be inited, when it isn't

[13:14] <lizmat> this is in a hash returned from process-cmd-args in MAIN_HELPER

[13:14] <lizmat> no named args are given, so the hash is not touched and returned 

[13:15] *** kurahaupo left
[13:16] <jnthn> lizmat: Then something must have nqp::getattr'd the storage at some point

[13:16] <lizmat> yes, but if I try to simulate that situation, there is no issue :-(

[13:16] <abraxxa> are we interested to let Michael Larabel (phoronix.com, OpenBenchmarking.org) benchmark the various Perl 6 compilers/releases?

[13:17] <jnthn> lizmat: I think it'll need a systematic look at all the nqp::getattr usages in Map and Hash and maybe Stash

[13:19] <lizmat> the odd thing is that it passes the entire test-suite, only breaks on 'perl6 -e 'sub MAIN($foo) { }'

[13:19] <lizmat> trying to see if --help was specified

[13:25] <timotimo> abraxxa: i wonder what code he'd be running to benchmark stuff

[13:25] *** kjs_ joined
[13:27] <abraxxa> timotimo: I think those examples from rosetta code would be a good starting point to also compare to other languages/compilers

[13:28] <lizmat> m: sub a(@args is copy) { my (@a,%h); @a,%h }; my ($a,$h) = a(my @); if $h<help> { say "help" }   # jnthn: simulation

[13:28] <camelia> rakudo-moar 8bd7ee: ( no output )

[13:29] <lizmat> hmmm... actually:

[13:29] <lizmat> m: sub a(@args is copy) { my (@a,%h); @a,%h }; my ($a,$h) := a(my @); if $h<help> { say "help" }   # jnthn: simulation

[13:29] <camelia> rakudo-moar 8bd7ee: ( no output )

[13:29] <lizmat> it needs binding, rather than assigning

[13:29] *** pmurias joined
[13:29] <lizmat> trying without binding

[13:31] <lizmat> aaaaahhhh

[13:32] <lizmat> (erlebnis)

[13:32] <pmurias> timotimo: picking what to benchmark seems to be the hard part to comparing programming language performance

[13:33] <abraxxa> my thought was to 'outsource' that to him as I'm pretty sure he would be interested

[13:34] *** kurahaupo joined
[13:35] *** FROGGS left
[13:37] *** vendethiel joined
[13:38] <lizmat> abraxxa timotimo would be great to get an extra set of eyes on performance development

[13:38] <timotimo> aye

[13:38] <timotimo> i haven't run the benchmarks in a long time, i think

[13:38] *** kurahaupo left
[13:38] <timotimo> right now my desktop is plenty busy. listening to music, browsing the web, will be working soon

[13:39] <timotimo> of course i usually head out of the home and shut down all applications once a day for a few hours ... in which i could run benchmarks on the machine as idle as i can get it

[13:39] <abraxxa> is there an 'official' benchmark for Perl 6?

[13:40] <Woodi> hi #perl6 :)

[13:40] *** RabidGravy joined
[13:40] <abraxxa> Hi!

[13:40] <Woodi> [Coke]++ / perl6devs++ # R*201601 :)

[13:41] <timotimo> well, we have perl6-bench

[13:41] <timotimo> (two with the same name, actually)

[13:42] <Woodi> ...and there is speedup from 30x perl5 to 23x ! :) ; but perl5 slowed down from 0.044 (last ~2 years to 0.046)

[13:42] *** Ven left
[13:42] <abraxxa> timotimo: how can i run it?

[13:42] <timotimo> git clone [email@hidden.address]
[13:42] <timotimo> it has a "quickstart" function

[13:43] <El_Che> speedup from 30 to 23?

[13:43] <timotimo> that downloads, compiles, times and compares a bunch of revisions of different rakudos and nqps

[13:43] <El_Che> is it a plain, a bird, sarcasm?

[13:43] <lizmat> El_Che: from 30x slower to 23x slower

[13:43] <Woodi> El_Che: nothing scientific :) just very rounded numbers

[13:43] <El_Che> aaaah

[13:43] <El_Che> :)

[13:43] <abraxxa> git clone https://github.com/japhb/perl6-bench for the firewalled me

[13:44] <dalek> rakudo/nom: d488bb0 | lizmat++ | src/core/Capture.pm:

[13:44] <dalek> rakudo/nom: Make sure we use attrinited for creating Captures

[13:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d488bb08ca

[13:44] <abraxxa> why is panda so slow on its first start? downloading something? if yes it should print a message to the user

[13:44] <abraxxa> panda installdeps . should be added to README.md

[13:44] <Woodi> as for R* 201601: make install (with installing modules) is seriously to slow... 

[13:45] <pmurias> jnthn: do we have a way in QAST to detect/mark a lexical sub as immutable?

[13:45] <abraxxa> huh?

[13:45] <abraxxa> panda installdeps .

[13:45] <abraxxa> resolve stage failed for .: Project . not found in the ecosystem. Maybe try "panda update" first?

[13:45] <El_Che> dunno who did the magic, but perl6 repl + linenoise is no longer slow

[13:45] <jnthn> pmurias: Not sure what you mean?

[13:45] <abraxxa> what is 2016.01.1? a small patch ontop of 2016.01?

[13:45] <El_Che> precomp thing?

[13:46] <timotimo> yeah, most probably precomp

[13:46] <abraxxa> can we do precomp on install?

[13:46] <El_Che> also, also scripts get precomp love

[13:47] <timotimo> hmm. installing runs tests, which causes precomp. but i think tests run before an actual installation happens, so the precomp stuff wouldn't actually land in the global precomp store, right?

[13:47] <pmurias> jnthn: if I have my sub foo() {...} and when can statically determine that &foo doesn't get rebound to anything I could optimize the calls to &foo a lot

[13:48] <pmurias> s/when/we/

[13:48] <abraxxa> i know that the debian python package does precomp on install because the user doesn't have right to write to the dirs where the library files are located and the precomp files would be generated by the compiler

[13:48] *** kjs_ left
[13:48] <jnthn> pmurias: Part of that is covered by the getlexstatic op, iirc

[13:48] <jnthn> pmurias: Though that means "and there's no closure semantics"

[13:49] <gfldex> abraxxa: i turned .pod files into modules to get them precompiled. The speedup was 20x .

[13:49] *** jsimonet left
[13:49] <jnthn> pmurias: Which covers things from UNIT and CORE.setting

[13:49] <gfldex> rakudo is really good at being slow :->

[13:49] * abraxxa builds 2016.01.1

[13:49] <jnthn> gfldex: It does pretty well compared with a few years back :)

[13:50] <jnthn> So the trajectory is right at least. :)

[13:52] *** abraxxa left
[13:52] *** abraxxa1 joined
[13:53] <abraxxa1> that was my f***** work notebook running OOM due to Chromium talking the usual 4gigs, thunderbird 1gig and rakudo compiling in addition to the others things open

[13:53] *** abraxxa1 is now known as abraxxa

[13:55] <abraxxa> and what in gods name do i have to do to not allow any damn app stealing focus???

[13:56] <gfldex> abraxxa: for proper focus management see: https://www.enlightenment.org/

[13:56] <abraxxa> gfldex: sadly there seems to be not a single distro shipping it

[13:57] <arnsholt> I wouldn't be surprised if that's one of those things that's impossible to manage completely under X11

[13:57] <abraxxa> ah, it seems the 'honor ICCM standard focus flag' doesn't go with 'focus stealing prevention'

[13:57] <gfldex> debian got e17

[13:58] *** vendethiel left
[13:58] *** uruwi left
[13:58] *** gcole left
[13:59] <abraxxa> i'll check it out this weekend

[13:59] <abraxxa> gotta catch my train

[13:59] <abraxxa> ping me if you want me to contact Michael regarding benchmarking perl6

[13:59] <abraxxa> bye!

[13:59] <abraxxa> *wink*

[14:00] *** abraxxa left
[14:00] *** gcole joined
[14:00] *** cdg joined
[14:00] *** cdg left
[14:00] *** cdg joined
[14:00] *** cdg left
[14:01] *** jsimonet joined
[14:01] *** cdg joined
[14:03] *** Ven joined
[14:06] *** sjoshi left
[14:10] <Woodi> about R* make install: maybe there could be 'make modules' target ? if it would be skippable then it would be very nice

[14:11] <timotimo> why would you ever want to skip the modules installation if you get rakudo star?

[14:11] *** vendethiel joined
[14:11] <ugexe> msi installation is eaiser than rakudobrew on windows

[14:14] <ugexe> although i guess someone on windows probably isnt using `make` on an msi :o

[14:21] *** uruwi joined
[14:23] *** AlexDaniel joined
[14:24] <pmurias> is there a way in git to avoid the ability to lookup history with blame when spliting a large file into many small parts?

[14:24] <Woodi> timotimo: becouse R* is "official" release, I think it gets more work then just add modules to R release. but maybe you are right

[14:25] <timotimo> it gets more work?

[14:25] <lizmat> m: my $b = $*FOO

[14:25] <camelia> rakudo-moar d488bb: ( no output )

[14:25] <lizmat> hmmm...

[14:26] *** rindolf joined
[14:29] *** lokien_ joined
[14:30] <azawawi> timotimo: ping

[14:30] *** FROGGS joined
[14:31] <timotimo> here

[14:31] <azawawi> timotimo: https://github.com/azawawi/atom-perl6-editor-tools#pod-preview-shortcut-altctrlo  # as requested earlier :)

[14:31] <azawawi> timotimo: ctrl-f5...

[14:32] <azawawi> btw, seems like github does not update uploaded images right away

[14:32] *** vendethiel left
[14:32] <azawawi> so if you link to it, it takes like 1-2 minutes to update

[14:32] <timotimo> sweet!

[14:32] <timotimo> i do see it

[14:33] *** dolmen joined
[14:33] <azawawi> no back to the syntax checker :)

[14:34] <mscha> m: say "Hello"; $*OUT.say: "World";  # I hate this inconsistency

[14:34] <camelia> rakudo-moar d488bb: OUTPUT«Hello␤World␤»

[14:35] <uruwi> What's different?

[14:35] <mscha> uruwi: the :

[14:35] <uruwi> It's the difference between a sub and a method call

[14:35] <mscha> I know, but I still hate it.  :)

[14:35] <timotimo> well, think about accessors

[14:36] <dalek> rakudo/nom: 7acf5cc | lizmat++ | src/core/stubs.pm:

[14:36] <dalek> rakudo/nom: Make dynamic lookups 2% faster

[14:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7acf5cc625

[14:38] <timotimo> oof, that's only 2%?

[14:38] <timotimo> welp

[14:40] <flussence> 2% of $hugenum is still a good thing

[14:42] *** CurtisOvidPoe joined
[14:43] <timotimo> it seems like that's only for the initial initialization of dynamics?

[14:43] <lizmat> timotimo: it was pretty optimised already

[14:43] <timotimo> right. we also have the dynamic var cache

[14:43] <lizmat> yeah, only if the dynamic isn't found in any lexical scope

[14:44] <lizmat> dynamic var cache ?

[14:44] *** mullagainn joined
[14:44] *** vendethiel joined
[14:44] <lizmat> you mean PROCESS:: ?

[14:44] <timotimo> no, at the MoarVM level

[14:44] *** donaldh joined
[14:44] <lizmat> and that's visible at Perl 6 level ?

[14:44] <timotimo> no

[14:44] <timotimo> i don't know exactly how it works, but i think every call frame has a little piece of space it will put dynamic variables in that it has looked up already

[14:44] <lizmat> ah, ok  :-)

[14:44] <timotimo> all you can tell is that it's a bit faster

[14:45] <jnthn> Yeah, it's hidden behind how Moar implement getlexdyn

[14:45] <timotimo> like any good cache :)

[14:45] <lizmat> jnthn: so there is no point in storing a dynamic in a lexical to improve performance ?

[14:45] <timotimo> there is. the cache is limited in size and it's not perfect

[14:46] <timotimo> lexical lookup is still way faster than dynamic var lookup, until we have tracing in spesh 

[14:46] <timotimo> which might happen this year, or maybe not.

[14:46] <jnthn> lizmat: That can still be useful, though the second time you'll likely hit the cache, if you didn't the first time.

[14:46] <jnthn> But yeah, lexical access - especially JIT-compiled - is really cheap.

[14:46] <lizmat> ok

[14:48] <hoelzro> good *, #perl6!

[14:48] <RabidGravy> RARR!

[14:49] <timotimo> ohai

[14:53] <dalek> rakudo/nom: 37aac8d | lizmat++ | src/core/Str.pm:

[14:53] <dalek> rakudo/nom: Change some existskeys into ifnulls

[14:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/37aac8d101

[14:53] <hoelzro> o/ RabidGravy, timotimo 

[14:54] <El_Che> "Private multi-methods are not supported" is that a feature or a work in progress?

[14:56] <flussence> probably WIP, but couldn't you just use lexical multi-subs there anyway?

[14:56] <jnthn> El_Che: We'll support them in a future Perl 6

[14:56] <timotimo> lexical multi-subs won't have access to self, necessarily

[14:56] <jnthn> They're fairly often requested.

[14:56] <El_Che> jnthn: thx for the info.

[14:56] <timotimo> though you can use the simple first-argument trick with it

[14:57] *** kjs_ joined
[14:57] *** xpen joined
[14:57] <El_Che> timotimo: you mean a sub with self as a parameter?

[14:58] *** perlawhirl left
[14:58] *** kjs_ left
[14:58] <timotimo> yeah, because when you $foobar.&my-sub(1), it'll call &my-sub($foobar, 1) for you

[14:59] *** kurahaupo joined
[15:04] *** Ven left
[15:04] *** _Gustaf_ left
[15:05] *** Ven_ joined
[15:05] *** vendethiel left
[15:07] <RabidGravy> y'know the one good thing about Perl 6 allowing utf-8 characters in code?  I actually get to work out how to type them using the compose key

[15:09] <pmurias> hoelzro: hi

[15:09] <RabidGravy> previously I maybe used a é every once in a while or a ñ or something but now there is no stopping me

[15:10] <hoelzro> hello pmurias 

[15:10] <El_Che> RabidGravy: your new nick should be ñéñé

[15:10] <RabidGravy> that would just be confusing

[15:11] <pmurias> hoelzro: I'm splitting up the huge src/vm/jsQAST/Compiler.nqp file 

[15:12] *** raiph joined
[15:15] *** mr-foobar left
[15:16] <dalek> rakudo/nom: 57ecc79 | lizmat++ | src/core/ (2 files):

[15:16] <dalek> rakudo/nom: Make Map<a> about 10% faster

[15:16] <dalek> rakudo/nom: 

[15:16] <dalek> rakudo/nom: Note that the change in CallFrame is needed, because it would otherwise

[15:16] <dalek> rakudo/nom: create a Map with a hash with a different REPR that does *not* allow access

[15:16] <dalek> rakudo/nom: non-existing keys without raising an exception.

[15:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/57ecc79486

[15:16] <hoelzro> nice!

[15:16] <hoelzro> it's been a while since I've looked at the JS backend; I imagine it's gotten pretty big

[15:16] *** MadcapJake joined
[15:18] <pmurias> hoelzro: I have a grant application for the the JS backend (to extend it to support full Perl 6) up for community review: http://news.perlfoundation.org/2016/02/ian-hague-perl-6-grant-applica.html

[15:18] <dalek> nqp: 885b540 | (Pawel Murias)++ | / (13 files):

[15:18] <dalek> nqp: [js] Split up the huge src/vm/js/QAST/Compiler.js file.

[15:18] <dalek> nqp: review: https://github.com/perl6/nqp/commit/885b540ca7

[15:18] <hoelzro> pmurias: how different is that from what you posted to blogs.perl.org oh so long ago?

[15:20] <dalek> nqp: 8237a68 | (Pawel Murias)++ | src/vm/js/nqp-runtime/bignum.js:

[15:20] <dalek> nqp: [js] Fix base_I with base = 16 and n=0.

[15:20] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8237a68e2a

[15:21] <dalek> nqp: 459b36d | (Pawel Murias)++ | t/nqp/60-bigint.t:

[15:21] <dalek> nqp: Add a regression test, and improve test description.

[15:21] <dalek> nqp: review: https://github.com/perl6/nqp/commit/459b36dd09

[15:22] *** uruwi left
[15:25] <pmurias> hoelzro: it should be mostly just reorganized (and with description of how I plan to tackle gather/take with continuations (of which a basic version is implemented)

[15:25] *** xtreak left
[15:26] <pmurias> hoelzro: also that one was a draft and this is the submitted version for which community comments are gathered before it's voted on ;)

[15:27] *** AlexDaniel left
[15:28] *** vendethiel joined
[15:28] *** kjs_ joined
[15:29] *** ely-se left
[15:29] *** kjs_ left
[15:34] *** uruwi joined
[15:34] *** brrt joined
[15:35] <El_Che> perl6 -Ilib bin/certmigration.p6 --mail_interval=3 # say $mail_interval.WHAT; => (IntStr)

[15:35] <El_Che> that's new :)

[15:36] <hoelzro> pmurias: ah, ok! I'll give this another look, then!

[15:37] <lizmat> El_Che : yes, allomorphs, added by ShimmerFairy if I remember correctly

[15:38] <lizmat> they're basically like Perl 5 scalars   :-)

[15:38] <lizmat> m: my $a = IntStr.new("a",42); say +$a; say ~$a

[15:38] <camelia> rakudo-moar 57ecc7: OUTPUT«Type check failed in binding $i; expected Int but got Str␤  in block <unit> at /tmp/aFRhQMuFxS line 1␤␤»

[15:38] <xenu> pmurias: how js backend is supposed to work? i mean, it compiles p6 code to js as i understand, but is some kind of runtime library needed too?

[15:39] <moritz> sure

[15:39] <lizmat> m: my $a = IntStr.new(42,"a"); say +$a; say ~$a

[15:39] <camelia> rakudo-moar 57ecc7: OUTPUT«42␤a␤»

[15:39] <lizmat> .oO( dualvars! :-)

[15:39] <gfldex> xenu: most of Perl6 is implemented in Perl6. So getting hold of those runtime libs aint that hard.

[15:40] <dalek> rakudo/nom: 15ec392 | lizmat++ | src/core/Hash.pm:

[15:40] <dalek> rakudo/nom: Make Hash<a> about 10% faster

[15:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/15ec3929c9

[15:40] <timotimo> you turn Str into Str:D? didn't that use to make stuff slower?

[15:42] *** xpen_ joined
[15:42] *** gregf_ left
[15:43] *** xpen left
[15:44] <xenu> gfldex: wonder how it would fare performance-wise. while js vms are really fast, when you add libraries like jquery it slows down a lot

[15:44] <xenu> and you want to keep thing quick in the browser

[15:45] *** gregf___ joined
[15:45] <xenu> tings*

[15:45] <xenu> things* 

[15:46] <xenu> anyway, it's a freakin cool idea to be able to write frontend in perl

[15:47] *** Ven_ left
[15:47] <xenu> hope that pmurias will get the grant

[15:47] <timotimo> me, too

[15:47] * moritz is in a grumpy mood, and thinks that frontend programming will still suck, even with Perl 6 in the browser

[15:47] <moritz> though probably less than with p6

[15:50] *** vendethiel left
[15:51] <xenu> it can't be worse than it is now :)

[15:51] <lizmat> timotimo: Str:D is correcter, and doesn't make a difference for methods, apparently

[15:52] <timotimo> oh, huh.

[15:52] *** AlexDaniel joined
[15:52] <timotimo> perhaps only for the invocant?

[15:52] <lizmat> m: my %h; say %h{Str}

[15:52] <camelia> rakudo-moar 15ec39: OUTPUT«Use of uninitialized value of type Str in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at /tmp/iDmv2cb70F line 1␤(Any)␤»

[15:53] <MadcapJake> wrt js backend, one thing i'd be worried about is JS errors

[15:53] <yoleaux> 12:05Z <ZoffixWin> MadcapJake: because I wanted to be cool and popular!

[15:53] <yoleaux> 12:06Z <ZoffixWin> MadcapJake: but it's my understanding META6.json is what the file should be called now and META.info is the old name so *shrug*

[15:53] <lizmat> timotimo: that used to die

[15:53] <timotimo> oh, ah

[15:53] <lizmat> with unable to unbox type object

[15:53] *** vendethiel joined
[15:53] <timotimo> ugh, yes. ugly error message, definitely

[15:53] <lizmat> afk for a few hours&

[15:55] <MadcapJake> .tell ZoffixWin oh! I had thought it the other way around, didn't realize META6.json was the new standard.

[15:55] <yoleaux> MadcapJake: I'll pass your message to ZoffixWin.

[15:57] <pmurias> xenu: it will compile to js (and currently does for most of NQP)

[15:57] <pmurias> MadcapJake: JS errors?

[15:58] *** kjs_ joined
[15:58] *** kjs_ left
[15:58] *** fireartist left
[15:59] <RabidGravy> MadcapJake, META6.json is what is specified in S22 I think, most tools have supported both META.info and META6.json customarily

[16:00] <mscha> m: 1..100 ==> grep *.is-prime ==> my @primes; say @primes;

[16:00] <camelia> rakudo-moar 15ec39: OUTPUT«[2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97]␤»

[16:00] <pmurias> MadcapJake: you mean actuall bugs in javascript implementations? or how will stack traces work?

[16:00] <mscha> Are feeds documented anywhere?  Can't find on doc.perl6.org.

[16:00] <MadcapJake> pmurias, i've done some programming in compile-2-js languages and anytime an error passes through to the JS error reporting, it's usually complete garbledygook, unless you plan on transpiling to pretty JS ala coffeescript

[16:01] <MadcapJake> though sourcemaps are great as long as they are mapped really well

[16:02] <MadcapJake> RabidGravy, is META.info some vestige of it being written in another format besides JSON?

[16:02] <pmurias> MadcapJake: nqp-js has sourcemap support

[16:03] <RabidGravy> MadcapJake, haven't the faintest idea when it crept in or why

[16:03] <MadcapJake> pmurias, do the sourcemaps map really granularly? I know I've used some that just stick the point at the beginning of more complicated blocks

[16:03] <timotimo> granu-gnarly

[16:03] *** a3r0_ joined
[16:04] *** Psyche^_ joined
[16:04] *** tinita_ joined
[16:07] <pmurias> MadcapJake: I don't think there is a granularlity limit, I think it's just the compiler not doing it granularly enough

[16:08] *** breinbaa1 joined
[16:09] <pmurias> MadcapJake: for nqp-js some attention to detail will be required to make them work really way (and a part of the grant schedule is to work on such things as part of "user experience")

[16:09] *** tadzik1 joined
[16:10] *** breinbaa1 left
[16:11] <MadcapJake> pmurias, agreed that it's always the compiler, sourcemaps could map down to the character. Well-made sourcemaps would make debugging in browser dev tools really nifty

[16:12] <timotimo> doesn't seem like today saw any uploads of fosdem videos

[16:12] <MadcapJake> :(

[16:12] <MadcapJake> who's got the raw footage?

[16:13] *** breinbaa1 joined
[16:13] *** breinbaa1 left
[16:14] <pmurias> MadcapJake: in nqp-js the source maps are built in as a core part of emitting javascript (not hacked on a statement level or something) so it's a matter of "just" making sure they are correctly attachted everywhere when code is emitted

[16:14] *** breinbaas left
[16:14] *** Psyche^ left
[16:14] *** a3r0 left
[16:14] *** tinita left
[16:14] *** tadzik left
[16:14] *** keix left
[16:14] <MadcapJake> pmurias, nice!

[16:15] *** awwaiid left
[16:15] <pmurias> got to go&

[16:16] *** pmurias left
[16:16] *** breinbaas joined
[16:16] *** vendethiel left
[16:17] *** khw joined
[16:19] *** ecocode left
[16:20] *** tinita_ is now known as tinita

[16:22] *** muraiki joined
[16:23] *** Actualeyes left
[16:23] *** perl6newbee joined
[16:24] *** xpen_ left
[16:25] *** skids joined
[16:27] <MadcapJake> anyone have advice on writing a search algorithm for my issue submitter?  I'd like to let users write their whole subject line and the backend will try to find closely related tickets

[16:28] *** _mg_ left
[16:28] <timotimo> deep learning/neuronal nets, obviously

[16:30] <DrForr> Sure, bring on the Singularity.

[16:33] <moritz> ääääÄÄÄÄÄÄÄäää  

[16:33] <moritz> +ee

[16:33] <perlpilot> "In other news today ... it appears that a search engine for Perl 6 modules has accidentally created Skynet ... "

[16:34] <MadcapJake> my current naive thinking is, take out all pronouns, prepositions, articles, and run the rest of the words through a search of rt.perl.org, then give points for any shared results, then take larger words and break off varying portions of them, run more searchs, give more points

[16:34] <perl6newbee> hi all

[16:34] *** vendethiel joined
[16:34] <perlpilot> MadcapJake: sounds reasonable to me.

[16:34] <perlpilot> perl6newbee: greetings

[16:35] <llfourn> MadcapJake: have you considered using a database that does this already?

[16:35] <MadcapJake> llfourn, how do you mean?

[16:35] <perlpilot> If it could also search with related words (rather than just stems) that would be neat

[16:36] <llfourn> MadcapJake: like elasticsearch has a tokenizer which removes stopwords and gives decent weighted search results

[16:36] <llfourn> if you like to implement search algorithms though be my guest :D

[16:37] <MadcapJake> llfourn, does it cost money though?

[16:37] <llfourn> MadcapJake: nope

[16:37] <llfourn> also mongodb has a less flexible but decent one: https://docs.mongodb.org/manual/core/index-text/

[16:38] <MadcapJake> oh i see, you mean place all the tickets in a database

[16:38] <llfourn> oh isn't that what you're doing?

[16:38] <MadcapJake> well my current plan was to just use a bunch of calls to the `rt` command line tool :D

[16:39] <MadcapJake> but that would probably be easier and would potentially save me from getting banned from all the queries this app would do :P

[16:39] <perl6newbee> the bit riot thursday blog post by Zoffix intrigued me to use IO::Prompt and/or Tree--Simple to increas my Perl6 foo. Which is very limited. It is recommend for an newbie?

[16:40] <llfourn> sure I don't even know abou this rt command. You can already do text-indexed searchs on RT?

[16:40] <llfourn> I mean I know the web based search but it seems to suck a bit

[16:40] <MadcapJake> yep, rt command line tool, hoelzro told me about

[16:40] <llfourn> MadcapJake++ interested to see what you come up with :)

[16:40] <hoelzro> MadcapJake: I think that an RT REST client wouldn't be a bad addition to the ecosystem either ;)

[16:41] <llfourn> does RT have a REST API?

[16:41] <hoelzro> mhmm

[16:41] <MadcapJake> hoelzro, well i could wrap this cli up in a module

[16:41] <hoelzro> that's how the CLI works

[16:41] <llfourn> where is the documentation for this?

[16:41] <MadcapJake> yeah i can't find that link you sent me either :P

[16:41] <hoelzro> MadcapJake: that works too! I have a script I've been working on that wraps the RT CLI client

[16:43] <MadcapJake> llfourn, http://requesttracker.wikia.com/wiki/REST

[16:43] <llfourn> MadcapJake: cheers

[16:46] *** vendethiel left
[16:46] *** vendethiel joined
[16:48] <MadcapJake> here's my current issue submitter server for anyone interested http://hastebin.com/asunozejef.pl6

[16:49] <stmuk_> MadcapJake: I have used compression to measure how similar text is

[16:49] *** lokien_ left
[16:50] *** brrt left
[16:50] <MadcapJake> stmuk_, how would you do that?

[16:50] <stmuk_> MadcapJake: if A & B appended compress well they are similar text

[16:50] <MadcapJake> how do you measure "compress well"

[16:50] <stmuk_> compression ratio

[16:51] <MadcapJake> ohh i see

[16:51] <MadcapJake> that's a really nifty idea

[16:52] <llfourn> I guess you could *try* and narrow down the search results like that

[16:53] <hoelzro> that's really cool

[16:54] <hoelzro> you could probably use cosine or jaccard similarity, or a bag of words model

[16:54] <hoelzro> but I think that bag of words may be difficult

[16:54] <MadcapJake> llfourn, i'm actually in the midst of installing elastisearch, will give it a go, I like the idea of only running one request every few minutes for new tickets rather than ~10 requests per search via the cli method

[16:54] * llfourn buys guns and ammo for the impending skynet

[16:55] <moritz> http://perlpunks.de/paste/show/56b4d3cf.64f.9d is this idiomatic code for workings blocklingly consuming for a queue?

[16:55] <hoelzro> MadcapJake: careful with that say $output; on line 21; some servers will use STDOUT for the response body

[16:56] *** vendethiel left
[16:56] <hoelzro> I'm sure it's just for debugging, but it would probably be better to use note

[16:56] <MadcapJake> hoelzro, what's note?

[16:56] <llfourn> MadcapJake: me too. From what I remember it gives pretty natural search results.

[16:56] <hoelzro> say for standard error

[16:56] <MadcapJake> woah, didn't. even. know.

[16:56] <hoelzro> also, $output.split("\n") is probably written better as $output.lines

[16:57] <MadcapJake> oh yeah! thanks for the tweaks!

[16:57] <MadcapJake> is there a better way to write L19? seems like there should be a convenience method for this

[16:57] <hoelzro> if you used run, you could say my $p = run(..., :out); my $output = $p.out.slurp-rest;

[16:57] <llfourn> MadcapJake: what would be cool is if we could figure out a way to find the error message in the RT or if the web interface submitter had a field for error message so that could be indexed and weighted specially.

[16:58] <hoelzro> also, if you use that tap, you probably should do ~=, not =

[16:58] <hoelzro> otherwise, if you have a lot of results, the first chunks will get clobbered

[16:59] <MadcapJake> hoelzro, yeah that's happened to me before, it seemed like rt was printing it all out in one go though, but better safe than sorry!

[16:59] <hoelzro> MadcapJake: it does, but you can't guarantee the chunk size with stdout.tap, iirc

[16:59] <MadcapJake> oh ok, good to know!

[16:59] <hoelzro> it's *probably* the stdlib buffer size, but I'm not sure

[17:02] *** Skarsnik joined
[17:02] <Skarsnik> Hello

[17:02] <AlexDaniel> o/

[17:03] <hoelzro> hi Skarsnik!

[17:03] <Skarsnik> I was wondering is there some plan for the Google Summer of Code about Perl 6 ?

[17:03] *** awwaiid joined
[17:05] <perlpilot> TPF would have to get accepted as an organization first

[17:05] <perlpilot> (I recall a couple of years ago that they did not)

[17:05] *** kjs_ joined
[17:05] *** domidumont left
[17:06] *** brrt joined
[17:06] <[Coke]> yup. not up to the perl 6 devs. it's up to the org, and in the past when tpf was accepted, there were p6 projects.

[17:06] *** brrt left
[17:06] <[Coke]> and after being passed over for new orgs recently, I would be surprised if someone tried agian.

[17:09] *** muraiki left
[17:10] <moritz> well, the Perl 6 devs could apply as a separate project, no?

[17:10] <moritz> or does one need to be a legal entity somehow?

[17:11] *** keix joined
[17:13] <perlpilot> https://developers.google.com/open-source/gsoc/rules  scroll down to section 3. Organizations

[17:14] *** dolmen left
[17:15] *** nakiro left
[17:17] <Skarsnik> Well there is a concrete release now, it probably have more chance

[17:17] <moritz> doesn't sounds like it needs to be a legal entity

[17:18] *** ely-se joined
[17:19] <[Coke]> moritz: you need to be an org of some kind and be able to handle $$

[17:19] *** uruwi left
[17:19] <[Coke]> It's a lot of work. unless we have someone who is SUPER dedicated to it, it's probably not worth it.

[17:20] <[Coke]> if we can glom onto an existing org, awesome, let's do that.

[17:20] <moritz> [Coke]: iirc SPI or some other non-profit can handle the money transfer stuff

[17:21] <moritz> [Coke]: but you're right that it's quite much work

[17:21] <perlpilot> The gosc faq also says:  "The project does not need to be a legally incorporated entity."

[17:23] <TimToady> "the project" is usually a student, I'd think

[17:23] <yoleaux> 1 Feb 2016 13:41Z <gfldex> TimToady: please have a look at http://irclog.perlgeek.de/perl6/2016-02-01#i_11972281

[17:23] <TimToady> well, maybe it's an intermediate layer...

[17:24] *** uruwi joined
[17:26] <RabidGravy> I was involved in a GSoC with the TPF ages ago and it turned out to be a massive PITA and IIRC everyone involved at the time vowed never again

[17:26] *** kjs_ left
[17:27] <moritz> I've been involved in at least three GSoC projects as mentor or backup mentor, and found that it worked rather well

[17:29] <perlpilot> https://developers.google.com/open-source/gsoc/faq?hl=en  very bottom of the page

[17:30] <mspo> I was the admin last year and didn't get selected, it was a bummer

[17:30] <mspo> (for netbsd gsoc)

[17:31] <moritz> they seem to have thrown out quite a few established orgs last year

[17:32] <mscha> m: 1..100 ==> grep *.is-prime ==> my @primes; say @primes; # are feeds documented? Can't find at doc.perl6.org...

[17:32] <camelia> rakudo-moar 15ec39: OUTPUT«[2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97]␤»

[17:32] *** apathor left
[17:34] <moritz> mscha: probably not

[17:34] *** apathor joined
[17:35] <azawawi> https://atom.io/packages/atom-perl6-editor-tools  # v0.8.0 - Perl 6 syntax checker lint support and POD-theme friendly viewer

[17:35] *** Amendil left
[17:36] *** donaldh left
[17:37] <geekosaur> feeds are still rather speculative

[17:37] *** Relsak joined
[17:37] *** domidumont joined
[17:38] *** vendethiel joined
[17:40] *** mr-foobar joined
[17:42] *** keix left
[17:44] *** foobot joined
[17:44] *** keix joined
[17:44] <Hotkeys> I should probably start using 'sum' for golf instead of '[+]'

[17:44] <Hotkeys> same number of characters and more readable

[17:44] *** dupa joined
[17:45] <mscha> Hotkeys: isn't that a bad thing in golf?

[17:45] <Hotkeys> lol

[17:45] <Hotkeys> only if you're writing in pyth or cjam

[17:46] *** foobot left
[17:47] <nemo> grr. why does ↑ not do anything in the perl6 shell. I'm used to being able to access old commands

[17:47] <nemo> I'm on 2015.11

[17:48] <mscha> nemo: panda install Linenoise

[17:48] <[Coke]> nemo: you need to install a module.

[17:48] <nemo> ah.

[17:48] <mscha> Not sure that works on 2015.11, but you should upgrade to 2016.01 anyway.

[17:48] <hoelzro> Linenoise *may* not work on 2015.11

[17:48] <[Coke]> also, you should be on 2016.01

[17:48] <nemo> mscha: I was trying to stick to the distro perl6 here

[17:49] <[Coke]> heh. I am clearly 10 seconds behind mscha today. :)

[17:49] <nemo> which probably means I'll just put up w/ not having that stuff

[17:49] <[Coke]> nemo: at least get to 2015.12

[17:49] <mst> nemo: 2015.11 isn't a perl6 install, the spec wasn't finalised until 2015.12

[17:49] <nemo> hm

[17:49] <mst> nemo: just don't bother with it, you'll just buy yourself pain

[17:49] <nemo> odd. I thought Locutus was trying to package the upstream debian of stable

[17:49] * nemo pokes him

[17:49] <mst> it's entirely possible the debian package is obsolete as well

[17:49] <nemo> oh. he's not around. later I guess

[17:49] <[Coke]> mst is not technically correct, but he's pretty correct. :)

[17:50] <mst> yeah. "isn't a perl6 install" for any useful-as-of-today-values-of-perl6-install is what I meant

[17:50] <nemo> mst: ok. so the thing is. perl6 is barely on our radar here, but I probably should stick to things other people would actually have on their computers

[17:50] <nemo> mst: it's kinda like "X is only in latest nightly of rust"

[17:50] <nemo> although luckily that's not really too much of a problem anymore with rust

[17:51] <mst> nemo: the distro package story currently sucks somewhat

[17:51] <mst> there's a gentoo overlay that gets you a sensible one ;)

[17:51] *** sufrostico left
[17:51] *** uruwi left
[17:52] <nemo> hm...

[17:52] *** Zero_Dogg left
[17:52] * nemo checks to see if this machine has the ppa at least

[17:53] *** Zero_Dogg joined
[17:53] *** sufrostico joined
[17:55] *** awwaiid left
[18:01] *** _mg_ joined
[18:01] <dalek> perl6.org: ad3e873 | (Zoffix Znet)++ | source/index.html:

[18:01] <dalek> perl6.org: Fit announcement box on one line

[18:01] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/ad3e873c92

[18:05] *** firstdayonthejob joined
[18:06] *** vendethiel left
[18:10] *** rindolf left
[18:10] <nine> -win 36

[18:13] *** zed00 joined
[18:13] *** awwaiid joined
[18:15] *** espadrine left
[18:15] *** kjs_ joined
[18:17] <dupa> hey how perl6 Struct can handle callback?

[18:19] <DrForr> dupa: As happens github.com/drforr/perl6-Inline-Scheme-Guile has an example of that.

[18:21] <dupa> DrForr, but where?;s

[18:21] <DrForr> Wait, do you mean CStruct?

[18:22] <dupa> DrForr CStruct representation only handles int, num, CArray, CPointer, CStruct, CPPStruct and CUnion

[18:22] *** kjs_ left
[18:22] <dupa> and I need smh like &callback (Str --> in32)

[18:23] *** vendethiel joined
[18:23] <AlexDaniel> I've never liked that ｢map｣ requires a code block first. Most of the time I want it to be ｢map｣ → list → block, exactly in this order. So here is what I came up with:

[18:23] <AlexDaniel> m: say map |(<4 8 15 16> R, { $_ + 3 });

[18:23] <camelia> rakudo-moar 15ec39: OUTPUT«(7 11 18 19)␤»

[18:23] *** awwaiid left
[18:23] <[Coke]> btw, the way to get rid of spam tickets in the RT queue is to click the red S in the upper right hand side.

[18:23] <llfourn> AlexDaniel: isn't that what for is for

[18:24] <[Coke]> presumably this helps train the system to better catch future spam.

[18:24] <DrForr> dupa: I use Str inside CStruct just fine, it's just a pointer to C.

[18:24] <dupa> I don't understand

[18:25] <AlexDaniel> llfourn: you mean that I can use list comprehension instead of map in this case?

[18:25] <AlexDaniel> llfourn: I don't think that I like that

[18:26] <DrForr> dupa: Time for a pastebin or gist so I can see your code.

[18:26] <llfourn> AlexDaniel: what is R?

[18:26] <TimToady> m: say map <4 8 15 16>: { $_ + 3 }

[18:26] <camelia> rakudo-moar 15ec39: OUTPUT«(7 11 18 19)␤»

[18:26] <[Coke]> reverse metaop

[18:26] <[Coke]> m: say 3 R- 4

[18:26] <camelia> rakudo-moar 15ec39: OUTPUT«1␤»

[18:26] <AlexDaniel> TimToady: what, how does that work?

[18:27] <TimToady> that's the invocant colon

[18:27] <dupa> DrForr, I am trying to port https://wiki.libsdl.org/SDL_RWops

[18:28] <AlexDaniel> TimToady: okay, that's much better

[18:28] <dupa> so in Struct I should place &.size(Pointer[SDL_RWops] --> Sint64)

[18:29] <TimToady> m: say do for <4 8 15 16> { $_ + 3 }

[18:29] <camelia> rakudo-moar 15ec39: OUTPUT«(7 11 18 19)␤»

[18:29] <TimToady> m: say (for <4 8 15 16> { $_ + 3 })

[18:29] <camelia> rakudo-moar 15ec39: OUTPUT«(7 11 18 19)␤»

[18:30] <TimToady> TMTOWTDI

[18:31] <RabidGravy> dupa that doesn't work right now

[18:31] <dupa> RabidGravy, so SDL porting need to be stop ;s

[18:31] <DrForr> dupa: Ah, got it.

[18:32] <RabidGravy> You're the second person to ask about this in so many days, or you're the same person asking the same question again

[18:32] <dupa> I asked again ;D

[18:32] <dupa> cause I didn't get

[18:33] <dupa> last time

[18:33] *** ely-se left
[18:33] <[Coke]> how can I tell what version of panda I'm running?

[18:34] *** grondilu joined
[18:34] <DrForr> dupa: You're welcome to try to add it yourself. Have you filed a request?

[18:34] <dupa> I don't know how

[18:34] <dupa> :<

[18:35] *** lonewolf28 joined
[18:35] * [Coke] updates panda jic

[18:35] <DrForr> How to file a request? [email@hidden.address] IIRC.

[18:35] <RabidGravy> the long answer is: at the current time rakudo NativeCall does not allow for structs with pointers to functions, if you really need to deal with such an interface then the easiest way would be to make a small wrapper library that exposes the functions as normal ones that the NativeCall can handle

[18:36] <dupa> RabidGravy, no I don't want to make wrapper

[18:36] <DrForr> Which is something of what Inline-Scheme-Guile does.

[18:36] *** _ramix_ joined
[18:36] <AlexDaniel> TimToady: cool

[18:38] <dupa> where to find implementation of perl6 native calls?

[18:38] <DrForr> dupa: What that's saying is you don't want to work around or fix the problem, so I guess you ... get to wait with the rest of us?

[18:39] <DrForr> dupa: If you're using rakudobrew, in .rakudobrew/ somewhere in NativeCall.nqp?

[18:40] <dupa> raked is perl implementation?

[18:40] <dupa> I use rakudo star

[18:41] <RabidGravy> yeah, but all the important parts for this particular case are in moar, I looked the other day having concluded it was doable but got lost in the moar code

[18:42] <DrForr> dupa: I don't use R* so I can't tell you where to look. If that's a precompiled binary you'll have to look in the github repo.

[18:42] <dupa> I am looking for right now ;-)

[18:42] <dupa> DrForr, what are you using?

[18:43] <DrForr> rakudobrew, as I just mentioned :)

[18:44] *** vendethiel left
[18:46] *** awwaiid joined
[18:47] *** wamba left
[18:48] *** perlpilot left
[18:51] *** awwaiid left
[18:53] *** addison joined
[18:58] <dupa> what is nqp?

[18:59] <DrForr> Not Quite Perl, the language on top of MoarVM/JVM/Whatever.

[18:59] <dupa> DrForr, is it like Perl6 language definition

[19:00] <AlexDaniel> it's more like a subset of Perl 6

[19:00] *** spider-mario joined
[19:01] <[Coke]> it's not exactly that, either, but that's close.

[19:02] *** perl6newbee left
[19:04] <dupa> Id rather won't look to it ;D

[19:04] <dupa> I found NativeTypes.nqp

[19:04] <dupa> but no Struct there

[19:05] *** rindolf joined
[19:06] *** addison left
[19:11] *** kjs_ joined
[19:13] *** kjs_ left
[19:14] *** uruwi joined
[19:21] <AlexDaniel> m: my $hello = ‘foo’ ~ * ~ ‘bar’; say $hello(25) # why bother with sprintf

[19:21] <camelia> rakudo-moar 15ec39: OUTPUT«foo25bar␤»

[19:23] <DrForr> Wow, something today caused a major speedup...

[19:23] <AlexDaniel> DrForr: how much?

[19:23] <DrForr> dupa: grep for CStruct in the code? When in doubt, RTFS.

[19:24] <DrForr> AlexDaniel: Not sure, I haven't been benchmarking. Just my gut instinct.

[19:24] *** awwaiid joined
[19:24] <DrForr> I'm pretty sure it wasn't the C refactoring I've been doing :)

[19:24] *** cdg left
[19:25] *** uruwi left
[19:26] <RabidGravy> drupa, there's a directory in the moar source called 'repr' or something similar, the CStruct representation is in there

[19:27] <RabidGravy> DrForr, is this since yesterday?  lizmat++ did something to hash keyed access

[19:28] <DrForr> I remember seeing that, probably that though my code doesn't rely too much on that.

[19:29] *** uruwi joined
[19:30] <DrForr> lizmat++ # just on general principles, really... but yeah, for hashes too.

[19:31] <lizmat> DrForr: glad to hear it!

[19:33] * colomon just chopped up the cheese he bought during the Swiss Perl Workshop…

[19:33] <DrForr> What variety?

[19:34] <perigrin> Swiss Cheese ... duh.

[19:34] *** kyclark joined
[19:34] <moritz> The Swiss Cheese

[19:34] <moritz> I'm sure there can only be one... The Swiss Highlander Cheese :-)

[19:35] <RabidGravy> :)

[19:35] <RabidGravy> most often found melted and mixed with kirsch and stuff

[19:35] <DrForr> Of course, gruyere.

[19:35] <RabidGravy> haven't had a proper swiss fondue for years

[19:36] *** ZoffixW joined
[19:36] <kyclark> Silent error on l. 3 here: http://lpaste.net/151744

[19:36] * stmuk_ was impressed with the range of penknives in the Zurich Airport

[19:36] <kyclark> Why is that?

[19:36] <RabidGravy> stmuk_, yeah, right before security

[19:37] <stmuk_> oddly this was *after* security

[19:37] <moritz> I've had such a thing for new year's eve: https://en.wikipedia.org/wiki/Raclette#Dish

[19:37] <ZoffixW> I recall someone dropping a link to a list with a whole bunch of fancy Unicode ops proposed to be added to Perl 6.... AlexDaniel was it you? I need that link

[19:37] <moritz> well, Switzerland is know for high quality knifes, they won't let pesky security concerns stop them from selleing them

[19:37] <AlexDaniel> ZoffixW: yeah

[19:38] <AlexDaniel> ZoffixW: type “Save me from Texas” in your browser and you'll get it :D

[19:38] <ZoffixW> lmao

[19:38] <DrForr> I managed to sneak in a raclette between my train to Lyon and getting it into Zurich.

[19:38] <AlexDaniel> https://gist.github.com/AlexDaniel/c89bd2786f9b63f31e4c

[19:38] <flussence> «Stage parse      : 108.309» ...yowch.

[19:38] <ZoffixW> AlexDaniel++ thanks

[19:39] <AlexDaniel> ZoffixW: I keep adding thing to this list

[19:39] <AlexDaniel> things*

[19:39] *** vendethiel joined
[19:41] <moritz> AlexDaniel: we also have <-> for lambdas with rw-Signatures

[19:41] <moritz> I'm sure you'll find a good Unicode arrow for that :-)

[19:41] <AlexDaniel> sure

[19:41] *** ocbtec left
[19:42] <perigrin> moritz: welcome to american cheese sophistication ... "swiss cheese" is a type here ... noteable becasue it has holes that Jerry can often hide from Tom in.

[19:43] <moritz> perigrin: like "German bread" :-)

[19:43] <perigrin> italian ... german beer.

[19:43] <kyclark> Guys, cheese or code?  It bothers me that P6 silently drops my ".push" :-)

[19:44] <moritz> kyclark: what a question. Cheese *and* code. Where's yours?

[19:44] <moritz> code, I mean :-)

[19:44] <kyclark> Up above.  http://lpaste.net/151744 

[19:44] <DrForr> I have some St. Moritz in the frid...oh, code.

[19:44] <AlexDaniel> moritz: oh, almost forgot that I have that on my keyboard… ↔

[19:44] <ZoffixW> m: my @list = (John => 10, Jack => 43); @list.push(Jeff => 50); say @list

[19:44] <camelia> rakudo-moar 15ec39: OUTPUT«[John => 10 Jack => 43]␤»

[19:44] <ZoffixW> dafuq

[19:45] <moritz> kyclark: ah. you're passing Jeff => 50 as a named argument to push, which it ignores (as do all methods with extra named)

[19:45] <ZoffixW> Ah

[19:45] <AlexDaniel> m: my @list = (John => 10, Jack => 43); @list.push((Jeff => 50)); say @list

[19:45] <camelia> rakudo-moar 15ec39: OUTPUT«[John => 10 Jack => 43 Jeff => 50]␤»

[19:45] <moritz> if you write it as .push("Jeff" => 50) or .push((Jeff => 50)) it works

[19:45] <kyclark> I feel like that's a bad surprise

[19:45] *** Relsak left
[19:45] <moritz> yes, I know. Sadly the alternative brings differnt gotchas with it

[19:45] <moritz> for every DWIM you pay with a WAT

[19:46] <ZoffixW> :D

[19:46] *** darutoko left
[19:47] <kyclark> It happens when I declare "my Pair @list"," too. I would expect the extra type checking to catch this.

[19:47] <ZoffixW> kyclark, FWIW, perhaps one of a Hash, Bag, BagHash, Set, SetHash types would be more suited for your purpose than an Array?

[19:48] <moritz> kyclark: that type check only stops you from pushing wrong things; it doesn't stop you from not pushing anything :-)

[19:48] <kyclark> True.  I was just sitting in a class on R this morning and wanted to replicated some of the indexing operations.  I tried this bit of code to add a Pair to my list and saw it never made it AND I never got an error. 

[19:48] *** cognominal joined
[19:48] <ZoffixW> kyclark, what's happening is you're giving .push a named argument :Jeff with value 50. So it ignores it

[19:48] *** MadcapJake` joined
[19:48] <moritz> fwiw the subroutine form is safe against that

[19:49] *** yqt joined
[19:49] <moritz> m: my @a; push @a, Jeff => 52; say @a.perl

[19:49] <camelia> rakudo-moar 15ec39: OUTPUT«[]␤»

[19:49] <moritz> huh?

[19:49] *** kyclark left
[19:49] <moritz> now I'm seriously surprised

[19:49] <FROGGS> m: say &push.signature

[19:49] <camelia> rakudo-moar 15ec39: OUTPUT«(\a, |elems is raw)␤»

[19:49] * AlexDaniel perhaps will start a list of WATs in Perl 6

[19:49] <moritz> sub push   (\a, |elems) { a.push:    |elems }

[19:50] <moritz> that explains a lot... and is LTA, IMHO

[19:50] <AlexDaniel> ah

[19:50] <AlexDaniel> nah…

[19:50] <ZoffixW> m: sub foo ( :$Jeff = 42 ) { say "$Jeff" }; foo Jeff => 50; foo Mike => 342;

[19:50] <camelia> rakudo-moar 15ec39: OUTPUT«50␤Unexpected named parameter 'Mike' passed␤  in sub foo at /tmp/ScNjY0gSTh line 1␤  in block <unit> at /tmp/ScNjY0gSTh line 1␤␤»

[19:50] <AlexDaniel> I thought that .append will work better

[19:50] <ZoffixW> Oh. Never knew that happens.

[19:51] <ZoffixW> m: class Foo { method foo ( :$Jeff = 42 ) { say "$Jeff" }; }; Foo.foo: Jeff => 50; Foo.foo: Mike => 342;

[19:51] <camelia> rakudo-moar 15ec39: OUTPUT«50␤42␤»

[19:51] <moritz> you can't inherit and override subs like you do with methods, which is why subs don't need to take care to preservice interface consistency

[19:51] <ZoffixW> ky[TAB] ^ this is what's happening

[19:52] <ZoffixW> Came across LTA error IMO:

[19:52] <ZoffixW> m: class Foo { methid foo ( :$Jeff = 42 ) {  } }

[19:52] <camelia> rakudo-moar 15ec39: OUTPUT«5===SORRY!5=== Error while compiling /tmp/04aNqHJq78␤Variable '$Jeff' is not declared␤at /tmp/04aNqHJq78:1␤------> 3class Foo { methid foo ( :7⏏5$Jeff = 42 ) {  } }␤»

[19:52] <ZoffixW> m: class Foo { not-really-a-method-go-away foo ( :$Jeff = 42 ) { ... } }

[19:52] <camelia> rakudo-moar 15ec39: OUTPUT«5===SORRY!5=== Error while compiling /tmp/i2kY5bUuno␤Variable '$Jeff' is not declared␤at /tmp/i2kY5bUuno:1␤------> 3oo { not-really-a-method-go-away foo ( :7⏏5$Jeff = 42 ) { ... } }␤»

[19:52] <ZoffixW> ^_^

[19:52] <moritz> I don't know if we can even generate better error messages for a misspelled declarator

[19:53] <ZoffixW> Oh well :)

[19:53] <moritz> m: ours $x = 42; # hey, I'm declaring it right here... 

[19:53] <camelia> rakudo-moar 15ec39: OUTPUT«5===SORRY!5=== Error while compiling /tmp/GEjU7UsfIA␤Variable '$x' is not declared␤at /tmp/GEjU7UsfIA:1␤------> 3ours 7⏏5$x = 42; # hey, I'm declaring it right h␤»

[19:54] <uruwi> Does `$_ = $_.clone;` do the same thing as what `$_ = CompUnit::Repository.new($_);` used to do?

[19:54] <geekosaur> in theory it would be possible to mark specific blocks (e.g. class Foo BLOCKHERE) as expecting a declarator as the first thing

[19:54] <ZoffixW> m: not-really-mine not-really-a-class Foo { not-really-a-method foo ( :$WAT = 42 ) { ... } }

[19:54] <camelia> rakudo-moar 15ec39: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ePdLtMK4Q0␤Variable '$WAT' is not declared␤at /tmp/ePdLtMK4Q0:1␤------> 3-class Foo { not-really-a-method foo ( :7⏏5$WAT = 42 ) { ... } }␤»

[19:56] <flussence> aiui, it fails that way because those could be post-declared subs

[19:57] <flussence> 'sub' and 'method' are more magic-y language construct things that indicate the next thing is a signature though

[19:57] <moritz> geekosaur: you can put arbitrary code in a class block, not just declarations

[19:58] <uruwi> m: say $*REPO.files("ho");

[19:58] <camelia> rakudo-moar 15ec39: OUTPUT«Cannot unbox a type object␤  in block <unit> at /tmp/IXdS5nP6VS line 1␤␤»

[19:58] <geekosaur> yep. hence "in other"; there's a common form but not a mandatory one... would be good for a bunch of WATs

[19:58] <uruwi> Is CompUnit::Repository#files broken?

[19:58] <geekosaur> er "in theory:

[19:58] * geekosaur wonders where "other" came from there

[19:58] <uruwi> CompUnit::Repository.new($*REPO)

[19:58] <uruwi> m: say CompUnit::Repository.new($*REPO)

[19:58] <camelia> rakudo-moar 15ec39: OUTPUT«Method 'id' must be implemented by CompUnit::Repository because it is required by a role␤  in any compose_method_table at gen/moar/m-Metamodel.nqp line 2801␤  in any apply at gen/moar/m-Metamodel.nqp line 2811␤  in any compose at gen/moar/m-Metamodel…»

[19:59] <moritz> m: say CompUnit::Repository.HOW.^name

[19:59] <camelia> rakudo-moar 15ec39: OUTPUT«Perl6::Metamodel::ParametricRoleGroupHOW␤»

[19:59] <moritz> ah, it's a role

[19:59] <AlexDaniel> ZoffixW: by the way, why did you need it? :)

[19:59] <moritz> m: say $*REPO.new($*REPO)

[19:59] <camelia> rakudo-moar 15ec39: OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at /tmp/LdzTKY9_lF line 1␤␤»

[20:00] <uruwi> m: say $*REPO.what.new($*REPO)

[20:00] <camelia> rakudo-moar 15ec39: OUTPUT«Method 'what' not found for invocant of class 'CompUnit::Repository::Installation'␤  in block <unit> at /tmp/CP39hnd6qc line 1␤␤»

[20:00] <uruwi> m: say $*REPO.WHAT.new($*REPO)

[20:00] <camelia> rakudo-moar 15ec39: OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at /tmp/M47M8Bu5CM line 1␤␤»

[20:01] <uruwi> m: say $*REPO.clone # same as the past CompUnit::Repository.new($*REPO)?

[20:01] <camelia> rakudo-moar 15ec39: OUTPUT«inst#/home/camelia/.perl6/2015.12-247-g15ec392␤»

[20:01] <uruwi> m: say $*VERSION

[20:01] <camelia> rakudo-moar 15ec39: OUTPUT«Dynamic variable $*VERSION not found␤  in block <unit> at /tmp/VjpmyxG1tD line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/VjpmyxG1tD line 1␤␤»

[20:01] <ZoffixW> m: What's in a name that which we call a rose␤By any other name would smell as sweet␤␤␤␤␤␤␤␤␤␤$WAT

[20:01] <camelia> rakudo-moar 15ec39: OUTPUT«5===SORRY!5=== Error while compiling /tmp/D5Xw8rL1_y␤Variable '$WAT' is not declared␤at /tmp/D5Xw8rL1_y:12␤------> 3<BOL>7⏏5$WAT␤»

[20:01] * ZoffixW thinks of a funny tweet

[20:02] <geekosaur> would need something horrid like "if we're in a place where we could reasonably expect a declarator and then fail because of an undefined variable, ask if the first word-like token could have been a declarator, ideally doing Levenshtein against known declarators"

[20:02] <geekosaur> could be done but ick

[20:02] *** awwaiid left
[20:02] *** vendethiel left
[20:04] <AlexDaniel> .u ⌁

[20:04] <yoleaux> U+2301 ELECTRIC ARROW [So] (⌁)

[20:04] <AlexDaniel> electric arrow, hmmm

[20:04] <uruwi> So in conclusion, CompUnit::Repository#files isn't broken only on Windows.

[20:05] *** alpha123 joined
[20:05] <ZoffixW> ^_^ https://twitter.com/zoffix/status/695699729712197632

[20:06] <ZoffixW> AlexDaniel, I'm writing a blog post about WhateverStar and I wanted a mention that some people proposed using something other than an asterisk for it.

[20:06] *** _mg_ left
[20:06] *** perlpilot joined
[20:06] <uruwi> How is it parsed anyway?

[20:07] <AlexDaniel> ZoffixW: I love your blog posts, by the way

[20:07] <ZoffixW> uruwi, what's the breakage?

[20:07] <ZoffixW> AlexDaniel, thanks

[20:08] <uruwi> From the example of your poetic source code?

[20:08] <colomon> DrForr: one was a Gruyère and the other a Parmigiano-like local variety whose name I forget.

[20:09] <ZoffixW> uruwi, hm? You said this and I'm wondering what exactly is broken? <uruwi> So in conclusion, CompUnit::Repository#files isn't broken only on Windows.

[20:11] <uruwi> No, I was talking about the tweet you linked. https://twitter.com/zoffix/status/695699729712197632

[20:12] <uruwi> But the method is complaining about unboxing a type object.

[20:13] *** lokien_ joined
[20:13] *** mr-foobar left
[20:16] <jferrero> m: my (@a, @b) = f(); sub f { my @x = <A B C>; my @y = 1, 2, 3; return @x, @y; } dd @a; dd @b;

[20:16] <camelia> rakudo-moar 15ec39: OUTPUT«5===SORRY!5=== Error while compiling /tmp/fLYNII7Syf␤Strange text after block (missing semicolon or comma?)␤at /tmp/fLYNII7Syf:1␤------> 3 B C>; my @y = 1, 2, 3; return @x, @y; }7⏏5 dd @a; dd @b;␤    expecting any of:␤        infix␤  …»

[20:17] * geekosaur also notes that older perl had poetry mode for quite a long time >.>

[20:17] <ZoffixW> m: my (@a, @b) = f(); sub f { my @x = <A B C>; my @y = 1, 2, 3; return @x, @y; }; dd @a; dd @b;

[20:17] <camelia> rakudo-moar 15ec39: OUTPUT«Array @a = [["A", "B", "C"], [1, 2, 3]]␤Array @b = []␤»

[20:17] * geekosaur still has not been able to load the tweet. notwork is extremely not

[20:17] <jferrero> yes...

[20:18] <geekosaur> (local issue)

[20:18] <ZoffixW> m: my ($a, $b) = f(); sub f { my @x = <A B C>; my @y = 1, 2, 3; return @x, @y; }; dd $a; dd $b;

[20:18] <camelia> rakudo-moar 15ec39: OUTPUT«Array $a = $["A", "B", "C"]␤Array $b = $[1, 2, 3]␤»

[20:18] <jferrero> It is possible to return two arrays?

[20:18] <ZoffixW> jferrero, ^ . I think the @array stuff slurps everything up

[20:18] <ZoffixW> or something like that

[20:19] *** awwaiid joined
[20:19] <moritz> m: my (@a, @b) .= f(); sub f { my @x = <A B C>; my @y = 1, 2, 3; return @x, @y; }; dd @a; dd @b;

[20:19] <camelia> rakudo-moar 15ec39: OUTPUT«5===SORRY!5=== Error while compiling /tmp/BzLcU_SFkK␤Cannot use .= initializer with a list of declarations␤at /tmp/BzLcU_SFkK:1␤------> 3my (@a, @b) .= f()7⏏5; sub f { my @x = <A B C>; my @y = 1, 2,␤»

[20:19] <moritz> m: my (@a, @b) := f(); sub f { my @x = <A B C>; my @y = 1, 2, 3; return @x, @y; }; dd @a; dd @b;

[20:19] <camelia> rakudo-moar 15ec39: OUTPUT«Array @x = ["A", "B", "C"]␤Array @y = [1, 2, 3]␤»

[20:19] <ZoffixW> :o

[20:19] <moritz> jferrero: ^^ works when you use binding instead of assignment

[20:21] <DrForr> colomon: Yum.

[20:22] <colomon> DrForr: that’s the idea.  we’ve been saving them for when I got a chance to make a pizza, and today’s the day!  dough is now rising.

[20:22] *** CurtisOvidPoe left
[20:23] <ZoffixW> m: my $x = *.say; say $x

[20:23] <camelia> rakudo-moar 15ec39: OUTPUT«WhateverCode.new␤»

[20:23] <ZoffixW> m: my $x = **.say; say $x

[20:23] <camelia> rakudo-moar 15ec39: OUTPUT«sub (*@_) { #`(Sub|66971072) ... }␤»

[20:23] *** awwaiid left
[20:23] *** molaf left
[20:23] *** uruwi left
[20:24] *** ely-se joined
[20:24] <ZoffixW> m: my $x = *****.say; say $x

[20:24] <camelia> rakudo-moar 15ec39: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ZBOcvWRKAe␤Multiple HyperWhatevers and Whatevers may not be used together␤at /tmp/ZBOcvWRKAe:1␤------> 3my $x = *****.say7⏏5; say $x␤»

[20:25] *** dupa left
[20:25] <ZoffixW> camelia, eh... whatever then

[20:25] <ZoffixW> ^_^

[20:25] *** ZoffixW left
[20:26] *** Sqirrel joined
[20:28] <AlexDaniel> m: my $x = *×*×*.say; say $x

[20:28] <camelia> rakudo-moar 15ec39: OUTPUT«WhateverCode.new␤»

[20:28] *** _ramix_ left
[20:29] *** mullagainn left
[20:30] *** Praise left
[20:30] *** dolmen joined
[20:31] *** musiKk joined
[20:31] *** Praise joined
[20:31] *** Praise left
[20:31] *** Praise joined
[20:34] *** dupa joined
[20:35] <raiph> #perl6: please point out mistakes, things you don't like, omissions, re: my draft of a p6doc performance page: https://gist.github.com/raiph/6fc40c34377efe2f74fb Also, please suggest examples for the "Using native types (speed)" section.

[20:35] <yoleaux> 07:27Z <nine> raiph: I'm not on reddit, but would be happy to discuss these things on #perl6-toolchain.

[20:37] *** Praise left
[20:37] *** addison_ joined
[20:40] *** prammer joined
[20:41] *** domidumont left
[20:43] *** MadcapJake` left
[20:43] *** muraiki joined
[20:43] <[Coke]> http://wilwheaton.tumblr.com/post/138740990579/archiemcphee-cats-mathematics-the  # Furbonacci sequence

[20:44] *** Praise joined
[20:44] *** Praise left
[20:44] *** Praise joined
[20:52] *** zed00 left
[20:55] *** dupa left
[20:55] *** Ven joined
[20:56] <TimToady> someone could point out that p6 behaves properly with https://stackoverflow.com/questions/11695110/why-is-this-program-valid-i-was-trying-to-create-a-syntax-error

[20:57] <jnthn> [Coke]: Wow, cat pictures *and* a pun :)

[20:57] <moritz> willdo

[20:59] *** dupa joined
[20:59] *** kanishka left
[21:00] <DrForr> Was it someone here asking me about the P6 talk at FOSDEM?

[21:00] <moritz> http://stackoverflow.com/questions/11695110/why-is-this-program-valid-i-was-trying-to-create-a-syntax-error/35233397#35233397

[21:02] *** Ven left
[21:03] *** tlvb joined
[21:03] *** Ven joined
[21:04] <dalek> rakudo/nom: ac9abb9 | lizmat++ | src/core/Compiler.pm:

[21:04] <dalek> rakudo/nom: Micro opt for Compiler.id

[21:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ac9abb9758

[21:05] *** kaare_ left
[21:06] <tlvb> is it possible to unload modules (or at least reload them), so that a perl program can have components updated without having to restart the main process?

[21:06] *** revhippie joined
[21:08] <moritz> tlvb: I don't think so

[21:08] *** cdg joined
[21:08] <moritz> though it would be a worthwhile extension

[21:11] *** autark joined
[21:16] <ugexe> besides clone, is there a way to change a bunch of attribute values in a class (assuming they are rw) like `.new(|%hash)`?

[21:16] <hoelzro> http://blog.acolyer.org/2016/02/05/is-sound-gradual-typing-dead/

[21:16] <hoelzro> could make for an interesting read

[21:17] <moritz> Perl 6 doesn't even pretend to have "sound" gradual typing, whatever that is :-)

[21:19] <hoelzro> yeah, that choice of terminology tripped me up a bit

[21:21] *** pmurias joined
[21:21] <azawawi> moritz: im integrating now atom-build with my Perl 6 editor tools

[21:21] <azawawi> moritz: what do you think is a good build sequence in Perl 6 projects?

[21:21] *** perlpilot left
[21:22] <azawawi> moritz: perl Makefile && make && make test... etc

[21:22] <pmurias> moritz: a sound type system is an actual technical term

[21:22] <moritz> pmurias: I know, but I don't see how it transfers to gradual typing

[21:23] <moritz> azawawi: dunno; maybe ask in #perl6-toolchain

[21:23] *** geraud joined
[21:24] <pmurias> moritz: that no type errors happen in the statically typed part

[21:25] <azawawi> moritz: thx

[21:25] <moritz> pmurias: that presumes there's a clear boundary between statically and dynamically typed code

[21:26] *** kyclark joined
[21:26] <pmurias> moritz: there is one in gradually typed languages

[21:26] <Skarsnik> Perl 6 only not check type on routine/method call?

[21:26] <moritz> pmurias: what's the boundary in Perl 6?

[21:27] <pmurias> I wouldn't call Perl 6 a gradually typed language

[21:27] <moritz> pmurias: please elaborate

[21:27] <pmurias> Perl 6 doesn't have a statically type part

[21:28] <pmurias> gradually typed languages (at least the ones that paper was concerned about) consist of both a dynamic and a static part

[21:29] <pmurias> when things go from the dynamic part to the static part they are typed checked

[21:29] <pmurias> Perl 6 lacks the static part

[21:29] <Skarsnik> compile does not fix type?

[21:29] <jnthn> Uh, natives are very clearly static.

[21:30] <pmurias> that's a point

[21:32] *** Kristien joined
[21:32] <pmurias> but we still lack a full static type system (I suspect that in the future modules will change that)

[21:33] *** ely-se left
[21:33] <pmurias> one selling point of gradual type systems is that you can gradually add type declarations to a dynamically typed program and turn it into a statically typed checked one

[21:33] *** lostinfog joined
[21:34] <DrForr> Inline::Scheme::Guile now supports the full numeric stack including num/denom and complex numbers, I've still got +/-INF and maybe a few oddball representations.

[21:35] <Skarsnik> Nice DrForr 

[21:35] <Skarsnik> what was your issue?

[21:36] <DrForr> Well, it *still* doesn't like 0, that bug still needs to be worked out.

[21:37] *** kyclark left
[21:37] <DrForr> The original issue is that the predicates for null_p and false_p both trigger on null, so I was getting .. er, false positives.

[21:37] *** SCHAAP137 joined
[21:38] <moritz> false null_p? :-)

[21:39] <DrForr> It was obviously something of a oversight on the API designers, as there's a #define for _false_and_not_null_p(x).

[21:42] <Skarsnik> lol

[21:44] *** muraiki left
[21:45] *** Rotwang left
[21:45] *** Rotwang joined
[21:47] <moritz> I'm looking for German-speaking folks to proof-read an article on Perl 6

[21:47] <dalek> rakudo/nom: 91a5d11 | lizmat++ | src/core/Capture.pm:

[21:47] <dalek> rakudo/nom: Some Capture streamlining

[21:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/91a5d11cb0

[21:47] <moritz> and give me some feedback

[21:49] *** Ven left
[21:51] <moritz> I guess I'll ask again when more central Europe is more awake :-)

[21:52] <grondilu> ls

[21:52] <grondilu> oops ignore that^

[21:53] <ugexe> his password is ls!

[21:53] *** perlpilot joined
[21:53] <moritz> who would have guessed? :-)

[21:54] <pmurias> what happened to the irc log?

[21:55] *** uruwi joined
[21:55] <pmurias> it's back up

[22:00] *** TEttinger joined
[22:02] <moritz> my monitoring didn't report any downtime

[22:04] <hoelzro> moritz: I'll read it, but my German is a little rusty

[22:04] <hoelzro> reading should help that ;)

[22:05] * ZoffixWin pets the robot

[22:05] <yoleaux> 15:55Z <MadcapJake> ZoffixWin: oh! I had thought it the other way around, didn't realize META6.json was the new standard.

[22:10] *** vendethiel joined
[22:11] *** awwaiid joined
[22:13] <moritz> hoelzro: sent by email

[22:13] *** molaf joined
[22:14] <hoelzro> moritz: thanks! I'll probably have it read by tomorrow morning your time =)

[22:18] <ZoffixWin> Tried Go today for the first time... I think it's pretty good: http://xtatik.org/tmp/go-lang-hello.html

[22:18] *** awwaiid left
[22:18] <Skarsnik> huhu

[22:19] <Kristien> Go is great for most things that has to do lots of I/O, networking, concurrency

[22:19] *** Kristien is now known as ely-se

[22:19] <ely-se> oh I clicked the link just now :(

[22:25] *** tlvb left
[22:25] <ZoffixWin> :D

[22:25] *** prammer left
[22:33] *** vendethiel left
[22:34] *** lonewolf28 left
[22:35] *** molaf left
[22:36] *** awwaiid joined
[22:37] *** dupa left
[22:39] *** sivoais joined
[22:41] *** musiKk left
[22:41] <b2gills> m: my &code = ->\c,\m{for ^c {.[+*]=[+] .[*X-1,2]for m;m[+*]=[m[*-2;*] »+«m[*-1]]};m}; say code(3,[[1,1,1],[2,3,4]]).perl

[22:41] <camelia> rakudo-moar 91a5d1: OUTPUT«[[1, 1, 1, 2, 3, 5], [2, 3, 4, 7, 11, 18], [3, 4, 5, 9, 14, 23], [5, 7, 9, 16, 25, 41], [8, 11, 14, 25, 39, 64]]␤»

[22:43] *** vendethiel joined
[22:43] *** awwaiid left
[22:49] *** Ven joined
[22:52] *** Ven left
[22:52] *** rindolf left
[22:53] <AlexDaniel> b2gills: great, link?

[22:56] *** awwaiid joined
[22:58] *** autark left
[22:59] *** autark joined
[23:02] <azawawi> https://github.com/azawawi/atom-perl6-editor-tools#build-support  # v0.8.4 => build support in Perl 6 (atom editor)... Enjoy :)

[23:02] *** Ven joined
[23:04] *** Ven left
[23:05] <lizmat> azawawi++

[23:05] *** autark left
[23:05] <RabidGravy> nice

[23:05] *** awwaiid left
[23:05] <azawawi> now give me build tasks :)

[23:05] *** vendethiel left
[23:06] <azawawi> im so sleepy

[23:06] <azawawi> :)

[23:06] <azawawi> good night

[23:06] <azawawi> and ty for making perl6

[23:07] <RabidGravy> :-*

[23:08] <b2gills> AlexDaniel: Actually it was to give someone else a link showing that the code worked https://codegolf.stackexchange.com/a/71157/1147

[23:08] *** BenGoldberg joined
[23:10] *** snarkyboojum joined
[23:10] *** azawawi left
[23:10] *** autark joined
[23:13] *** perlawhirl joined
[23:15] *** pmurias left
[23:17] <AlexDaniel> b2gills: you can make it shorter by replacing »+« with Z+

[23:18] *** snarkyboojum left
[23:18] <AlexDaniel> oh wait, it doesn't work with the short version

[23:20] *** perlawhirl left
[23:21] <b2gills> AlexDaniel: it does if you put the `;*` back in that I removed, so it isn't quite as big a win, but it is still 2 bytes shorter

[23:22] <AlexDaniel> b2gills: right

[23:22] <AlexDaniel> oh

[23:23] <AlexDaniel> b2gills: interestingly you don't even need any whitespace before Z in this case

[23:23] <AlexDaniel> so yeah, same character count but less bytes

[23:25] *** firstdayonthejob left
[23:31] *** captain-adequate joined
[23:31] <dalek> rakudo/nom: ec543e9 | lizmat++ | src/core/ (2 files):

[23:31] <dalek> rakudo/nom: Streamline phaser handling

[23:31] <dalek> rakudo/nom: 

[23:31] <dalek> rakudo/nom: Should make a lot of iterables a bit faster, and use less memory because

[23:31] <dalek> rakudo/nom: of a new "has-phaser' method that returns a bool instead of a list that

[23:31] <dalek> rakudo/nom: needs to be counted.

[23:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ec543e9d2c

[23:32] <Skarsnik> lizmat++ with the speedup commit :)

[23:32] *** kid51 joined
[23:33] <AlexDaniel> m: say ()[;0]

[23:33] <camelia> rakudo-moar 91a5d1: OUTPUT«Non ast passed to WANTED: BOOTInt␤Non-QAST node visited BOOTInt␤Weird node visited: BOOTInt␤Non-QAST node visited BOOTInt␤Weird node visited: BOOTInt␤Weird node in analyze: BOOTInt␤===SORRY!===␤Unknown QAST node type BOOTInt␤»

[23:33] <AlexDaniel> camelia: bleeougrhhh!

[23:34] <lizmat> good night, #perl6!

[23:34] <AlexDaniel> m: say [;] # a bit shorter, but the output is less impressive

[23:34] <camelia> rakudo-moar 91a5d1: OUTPUT«Non-QAST node visited BOOTInt␤Weird node visited: BOOTInt␤Weird node in analyze: BOOTInt␤===SORRY!===␤Unknown QAST node type BOOTInt␤»

[23:34] <ZoffixWin> lizmat++ night and thanks for all those optimizations you've been pushing :)

[23:34] <AlexDaniel> m: [;]

[23:34] <camelia> rakudo-moar 91a5d1: OUTPUT«Non-QAST node visited BOOTInt␤Weird node visited: BOOTInt␤Weird node in analyze: BOOTInt␤===SORRY!===␤Unknown QAST node type BOOTInt␤»

[23:35] <AlexDaniel> woooooooooow

[23:35] <AlexDaniel> m: (;)

[23:35] <camelia> rakudo-moar 91a5d1: OUTPUT«(signal XFSZ)Non-QAST node visited BOOTInt␤Weird node visited: BOOTInt␤Resultchild 0 can't returns! BOOTInt␤- QAST::Stmts :BY<comp_unit ua u> :context<sink> (;)␤  - QAST::Stmt :BY<comp_unit ua u u> :context<sink> :final (;)␤    - 0␤␤Non-QAST …»

[23:35] <AlexDaniel> try that in command line

[23:35] *** cdg left
[23:35] <AlexDaniel> did I open some door to matrix or something?

[23:36] *** addison_ left
[23:37] *** addison_ joined
[23:37] <ZoffixWin> fmt.Println(add 42, 13 )     prog.go:10: syntax error: unexpected literal 42, expecting )

[23:37] <ZoffixWin> And thus ends my escapade into Go Lang :) Perl spoiled me

[23:38] <ZoffixWin> I do like their Tour thing though: https://tour.golang.org/welcome/1

[23:39] <alpha123> Go has got to be the most boring and utterly useless language of the last 8 years

[23:40] <ZoffixWin> AlexDaniel, :o that looks to be the wormhole to the 5th dimension!

[23:42] *** dolmen left
[23:43] <ZoffixWin> "Resultchild 0 can't returns!" looks like two typos in that error message. Missing space and "returns" -> "return"

[23:45] <AlexDaniel> ZoffixWin: and that's the only thing that bothers you?

[23:45] <AlexDaniel> no, I'm not going to tag it as LTA :D

[23:45] <ZoffixWin> :)

[23:46] <AlexDaniel> anyway: https://rt.perl.org/Public/Bug/Display.html?id=127473

[23:47] <AlexDaniel> yeah, coming up with meaningful titles is hard. One reason is that I have no idea what is going on there at all

[23:54] *** RabidGravy left
