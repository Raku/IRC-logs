[00:00] <tbrowder>   [Coke]: standing by for critique...

[00:01] <[Coke]> tbrowder: you have been very patient. I'm late, I'll do it now.

[00:03] <tbrowder>  no hurry, we have 24 hrs or so üòÉ

[00:03] *** pierre_ joined
[00:06] *** cdg joined
[00:09] *** wamba left
[00:09] *** MasterDukeLaptop joined
[00:10] <[Coke]> tbrowder: I actually don't have any edits for you, technically or stylistically. Good read, esp. liked the walkthrough on when you hide somethings.

[00:10] <[Coke]> well done, thanks for putting it together!

[00:10] *** rindolf left
[00:10] <babydrop> \o/

[00:10] *** pyrimidine joined
[00:11] <tbrowder> ok, thanks. how about the ending comments and the clever // operator--too much?

[00:11] <babydrop> Perl 6 Advent Day 11 ‚Äî "Perl 6 Core Hacking: It Slipped Through The QASTs": https://perl6advent.wordpress.com/2016/12/11/day-11-perl-6-core-hacking-it-slipped-through-the-qasts/

[00:14] <MasterDukeLaptop> babydrop: "avaiable"

[00:15] *** pyrimidine left
[00:15] <[Coke]> nah, 'sfine.

[00:15] <[Coke]> my FQN comment (which slipped out too early) was about this line:

[00:15] <[Coke]> https://github.com/perl6/doc/blob/master/doc/Language/typesystem.pod6#L193

[00:16] *** cdg left
[00:16] <babydrop> MasterDukeLaptop: fixed, thanks.

[00:17] *** pierre_ left
[00:19] <MasterDukeLaptop> heh, want a really nitpicky one? S///‚Äòs in the second to last sentence before "Slippety Slip" looks like a quote, not apostrophe (at least in this browser (FF 50 on Kubuntu 16.10))

[00:21] <babydrop> MasterDukeLaptop: same here. It's wordpress being too smart for its own good and changing the quotes.

[00:22] <MasterDukeLaptop> yeah, i see another one, but probably way too minor to worry  about

[00:23] <MasterDukeLaptop> i was trying to use something at work yesterday to make a blog post (maybe it was wordpress, i don't know) and it was aweful

[00:23] <MasterDukeLaptop> previews popping up unasked for (and incorrect), not showing images, etc

[00:24] <MasterDukeLaptop> hats off to you people who do it more than once ever

[00:25] <MasterDukeLaptop> oooh, and a link to QAST docs! babydrop++

[00:26] <babydrop> I didn't see what that 'v' in Want is about tho

[00:26] *** bjz left
[00:28] <MasterDukeLaptop> oh, just reading the docs you helpfully linked, maybe void context

[00:34] <babydrop> .ask lucasb were you going to fix that slip bug or should I take care of it? It's trivial and will let you learn the build system.

[00:34] <yoleaux> babydrop: I'll pass your message to lucasb.

[00:35] *** lukiramu left
[00:37] <MasterDukeLaptop> babydrop: nice article

[00:39] <babydrop> Thanks.

[00:54] *** bjz joined
[00:58] *** canopus left
[01:00] *** pyrimidine joined
[01:04] *** canopus joined
[01:05] *** pyrimidine left
[01:19] *** pyrimidine joined
[01:24] *** pyrimidine left
[01:32] *** lucasb left
[01:48] *** espadrine left
[01:51] *** CIAvash[m] left
[02:00] *** pyrimidine joined
[02:05] *** pyrimidine left
[02:06] *** pyrimidine joined
[02:10] *** pyrimidine left
[02:21] *** pierre_ joined
[02:22] *** mulk[m] joined
[02:27] *** giraffe left
[02:28] *** pyrimidine joined
[02:30] *** ilmari[m] joined
[02:30] *** Matthew[m] joined
[02:30] *** tadzik joined
[02:30] *** M-Illandan joined
[02:30] *** CIAvash[m] joined
[02:30] *** Matias[m] joined
[02:30] *** dp[m] joined
[02:33] *** pyrimidine left
[02:35] *** giraffe joined
[02:36] *** skids joined
[02:45] *** ilbot3 left
[02:49] *** ilbot3 joined
[02:51] *** bjz left
[02:52] <samcv> i'm getting github's linguist to be able to classify Perl6 pod correctly as perl 6 pod now perl 5 pod

[02:52] <samcv> also do people want Pod to be its own 'language' on github

[02:52] <samcv> Pod6 that is

[02:53] <samcv> "Alright, the results of the .pod6 file search have finished downloading. All-in-all, we're only looking at 52 unique repositories, distributed between 28 unique users... so I'm afraid the usage is too thin to warrant addition as a new language, methinks. I'm a little concerned about how the syntactic differences might skew the classifier, though..."

[02:54] <samcv> that was for .pod6 but there are more than are just called .pod, but was curious how people want it to be classified on github? should I lobby for having it be 'Pod6' ? is that wanted by people?

[02:54] <samcv> or maybe Perl 6 Pod, any thoughts?

[03:02] *** bjz joined
[03:02] *** kyclark joined
[03:08] *** labster left
[03:09] *** kyclark left
[03:13] *** noganex_ joined
[03:14] *** pierre_ left
[03:16] *** noganex left
[03:19] *** pyrimidine joined
[03:24] *** pyrimidine left
[03:27] <AlexDaniel> hooray, uniprops!

[03:27] <samcv> :)

[03:28] *** kyclark joined
[03:28] *** pyrimidine joined
[03:29] *** pierre_ joined
[03:30] <AlexDaniel> samcv: there's a little problem with uniprops

[03:31] <samcv> yeah it's not building. fixing that. unless there's something else you didn't like in the implementation?

[03:31] <AlexDaniel> samcv: basically, S15 suggests that uniprops should return a hash

[03:32] <samcv> it does. but it also shows  uniprops("a", "ASCII_Hex_Digit") 

[03:32] <samcv> idk does it really make sense for it to be a hash though

[03:32] *** kyclark left
[03:33] <samcv> unless there is like .uniprops(:all) or something idk that will return all the unicode properties for something

[03:33] <samcv> but uninames returns a sequence

[03:33] *** pyrimidine left
[03:33] <AlexDaniel> yea, it would be stupid to have ‚Äúuninames‚Äù do one thing but ‚Äúuniprops‚Äù doing something different

[03:33] <AlexDaniel> also, this: https://irclog.perlgeek.de/perl6/2014-03-04#i_8379769

[03:35] *** pierre_ left
[03:37] <samcv> bookmarked that

[03:38] <samcv> the vulgar fractions I will have to see how I should do that

[03:38] <samcv> that would make the most sense and not involve weird checks

[03:38] <AlexDaniel> samcv: actually: https://github.com/perl6/specs/commit/33dad1e20b

[03:39] <samcv> oh i see it was rewritten

[03:39] <samcv> but they must have left in hash a few places

[03:40] <samcv> so you are for allowing a list of chars or list of integers for uniprops?

[03:40] <samcv> and then maybe we should also have a multi for uniprop(Int, @properties) hmm

[03:42] <AlexDaniel> samcv: I'm not against, but I wonder what is the justification for having it

[03:43] <AlexDaniel> m: say (65,50)¬ª.uniprop

[03:43] <camelia> rakudo-moar ea2884: OUTPUT¬´(Lu Nd)‚ê§¬ª

[03:43] <AlexDaniel> that's kinda short enough, isn't it?

[03:43] <samcv> because having uniprops only perform things on strings, whereas uniprop performs them on int's or on strings

[03:44] <samcv> i think it would be best if they have the same types allowed on them

[03:44] <samcv> m: say 10.uniname

[03:44] <camelia> rakudo-moar ea2884: OUTPUT¬´LINE FEED (LF)‚ê§¬ª

[03:44] <samcv> m: say (10, 11).uninames

[03:44] <camelia> rakudo-moar ea2884: OUTPUT¬´Cannot resolve caller uninames(List); none of these signatures match:‚ê§    (Str:D $str)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[03:45] <samcv> if as TimToady says that the essence of the function is getting values from integers, we should support integers for uniprops and uninames

[03:47] <samcv> not saying doing (65,50)¬ª.uniprop is not doable. but why should uniprop be able to take integers but uniprops can't? that seems weird

[03:47] <AlexDaniel> samcv: the weird thing here is that uninames comes from Cool

[03:48] <AlexDaniel> and string operations from Cool tend to stringify stuff

[03:48] <samcv> it works in my testing

[03:48] <samcv> a string of numbers

[03:48] <AlexDaniel> no-no, sure

[03:48] <samcv> (10,11).uniprops #> Cc, Cc is what i get

[03:49] <AlexDaniel> but I'm trying to see any consistency between it and other methods from cool‚Ä¶

[03:49] <samcv> ah

[03:49] <AlexDaniel> maybe that's the wrong way to think about it, but‚Ä¶

[03:49] <samcv> i mean. Cool doesn't make much sense i agree

[03:51] <AlexDaniel> for example, unival is in Int

[03:51] <samcv> (4000, 'a').uniprops('Script').perl #> ("Tibetan", "Latin").Seq

[03:51] <samcv> yeah it would make sense maybe to move them

[03:52] <samcv> "10".uniprops treats it as a string not a number

[03:52] <AlexDaniel> m: say ‚Äò‚Öî‚Äô.unival

[03:52] <camelia> rakudo-moar ea2884: OUTPUT¬´0.666667‚ê§¬ª

[03:52] <AlexDaniel> m: say 50.unival

[03:52] <camelia> rakudo-moar ea2884: OUTPUT¬´2‚ê§¬ª

[03:53] <AlexDaniel> and it also works on strings and ints

[03:53] <samcv> so it only takes numbers right

[03:53] <samcv> i mean unival assumes you're giving it a number

[03:53] <samcv> whereas uniprop takes strings or integer

[03:54] <samcv> m: say 1.unival

[03:54] <camelia> rakudo-moar ea2884: OUTPUT¬´NaN‚ê§¬ª

[03:54] <samcv> m: say 50.unival

[03:54] <camelia> rakudo-moar ea2884: OUTPUT¬´2‚ê§¬ª

[03:54] <samcv> ah i guess it can take integers but

[03:54] <AlexDaniel> m: say ‚Äò2‚Äô.unival

[03:54] <camelia> rakudo-moar ea2884: OUTPUT¬´2‚ê§¬ª

[03:54] <AlexDaniel> in fact, unival looks up some uniprops, right?

[03:54] <samcv> it's only used for numbers though, so i think it's different than uniprops

[03:55] <samcv> yeah

[03:55] <AlexDaniel> ‚Ä¶ so is it unival that should be moved to Cool, or vice versa?

[03:56] <AlexDaniel> oh no‚Ä¶

[03:56] <samcv> yeah i think unival should move to cool

[03:56] <samcv> no?

[03:57] <AlexDaniel> m: say "4a¬æ".univals

[03:57] <camelia> rakudo-moar ea2884: OUTPUT¬´(4 NaN 0.75)‚ê§¬ª

[03:57] <AlexDaniel> /o\

[03:57] <AlexDaniel> THIS IS A STR METHOD!! /o\

[03:57] <samcv> yeah it acts like uninames

[03:57] <samcv> where is it now?

[03:57] <samcv> int, ok

[03:58] <samcv> well unival/vals and uniname uniprop all work on ints and strings...

[03:58] <samcv> strings work on each character

[03:58] <samcv> integers work as integers

[03:58] <AlexDaniel> s: '', 'univals'

[03:58] <SourceBaby> AlexDaniel, Sauce is at https://github.com/rakudo/rakudo/blob/ea28845/src/core/Cool.pm#L102

[03:58] <samcv> so i think it's natural for arrays to be allowed because it uses the strings chars individually. but where to put them, all in their own function?

[03:59] <samcv> the function is in Str but the method in Cool

[03:59] <AlexDaniel> right

[03:59] <AlexDaniel> s: univals

[03:59] <SourceBaby> AlexDaniel, Something's wrong: ‚ê§ERR: [31m===[0mSORRY![31m===[0m Error while compiling -e‚ê§Calling univals() will never work with any of these multi signatures:‚ê§    (Str:D $str)‚ê§at -e:6‚ê§------> [32m    put sourcery( [33m‚èè[31munivals )[1];[0m‚ê§

[03:59] <AlexDaniel> s: univals('')

[03:59] <SourceBaby> AlexDaniel, Something's wrong: ‚ê§ERR: Cannot resolve caller sourcery(Seq); none of these signatures match:‚ê§    ($thing, Str:D $method, Capture $c)‚ê§    ($thing, Str:D $method)‚ê§    (&code)‚ê§    (&code, Capture $c)‚ê§  in block <unit> at -e line 6‚ê§‚ê§

[04:00] <samcv> s: univals('1')

[04:00] <SourceBaby> samcv, Something's wrong: ‚ê§ERR: Cannot resolve caller sourcery(Seq); none of these signatures match:‚ê§    ($thing, Str:D $method, Capture $c)‚ê§    ($thing, Str:D $method)‚ê§    (&code)‚ê§    (&code, Capture $c)‚ê§  in block <unit> at -e line 6‚ê§‚ê§

[04:00] <samcv> s: univals(1)

[04:00] <SourceBaby> samcv, Something's wrong: ‚ê§ERR: [31m===[0mSORRY![31m===[0m Error while compiling -e‚ê§Calling univals(Int) will never work with any of these multi signatures:‚ê§    (Str:D $str)‚ê§at -e:6‚ê§------> [32m    put sourcery( [33m‚èè[31munivals(1) )[1];[0m‚ê§

[04:00] <AlexDaniel> s: univals('hello')

[04:00] <SourceBaby> AlexDaniel, Something's wrong: ‚ê§ERR: Cannot resolve caller sourcery(Seq); none of these signatures match:‚ê§    ($thing, Str:D $method, Capture $c)‚ê§    ($thing, Str:D $method)‚ê§    (&code)‚ê§    (&code, Capture $c)‚ê§  in block <unit> at -e line 6‚ê§‚ê§

[04:00] <AlexDaniel> ah

[04:00] <AlexDaniel> s: 'univals' 'hello'

[04:00] <SourceBaby> AlexDaniel, Something's wrong: ‚ê§ERR: [31m===[0mSORRY![31m===[0m Error while compiling -e‚ê§Unable to parse expression in argument list; couldn't find final ')' ‚ê§at -e:6‚ê§------> [32m    put sourcery( 'univals'[33m‚èè[31m 'hello' )[1];[0m‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§

[04:01] <AlexDaniel> s:'univals 'hello'

[04:01] <AlexDaniel> oops

[04:01] <AlexDaniel> s: univals 'hello'

[04:01] <SourceBaby> AlexDaniel, Something's wrong: ‚ê§ERR: Cannot resolve caller sourcery(Seq); none of these signatures match:‚ê§    ($thing, Str:D $method, Capture $c)‚ê§    ($thing, Str:D $method)‚ê§    (&code)‚ê§    (&code, Capture $c)‚ê§  in block <unit> at -e line 6‚ê§‚ê§

[04:01] <samcv> multi sub univals(Str:D $str) { $str.ords.map: { unival($_) } }

[04:01] <AlexDaniel> babydrop: I'd be happy if I ever learn how to use this bot :)

[04:01] <AlexDaniel> *bleep blop* https://github.com/rakudo/rakudo/blob/ea28845/src/core/Str.pm#L2995

[04:03] <MasterDukeLaptop> m: dd [.file, .line] with &univals

[04:03] <camelia> rakudo-moar ea2884: OUTPUT¬´["SETTING::src/core/Str.pm", 3003]‚ê§¬ª

[04:04] <samcv> but Str and Int's both inherit cool's methods, and since they are multi's that makes some since i guess?

[04:04] <samcv> i mean we have https://docs.perl6.org/type/Cool#routine_abs

[04:04] <samcv> too. and that can't be done on strings

[04:04] <AlexDaniel> samcv: I am completely confused by now, but I think I found a doc bug

[04:04] <samcv> though. i guess it tries to convert it to an actual number

[04:05] <AlexDaniel> https://docs.perl6.org/type/Int#routine_unival

[04:05] <AlexDaniel> there is no unival in Int

[04:05] <samcv> yeah

[04:05] <samcv> but *should* there be?

[04:07] <samcv> it probably should be in both Int and Str?

[04:08] <AlexDaniel> why? One is enough :)

[04:08] <AlexDaniel> in its sub form I guess it doesn't matter

[04:08] <samcv> though. in Str it says: # These probably belong in a separate unicodey file

[04:08] <samcv> above the unis

[04:09] <AlexDaniel> and Cool.unival just passes it to sub unival which is in Str‚Ä¶ okay

[04:09] <samcv> but then on the docs they wouldn't show up in their proper section right?

[04:09] <AlexDaniel> samcv: yes, I already created a ticket: https://github.com/perl6/doc/issues/1045

[04:10] <samcv> well unival does take an int as an argument, so it could make sense to be in the int section? or is it more important for it to be in the section for the file it is in than the type it accepts

[04:13] <AlexDaniel> samcv: well, it lists both sub and method forms. There is no unival method in Int, so it is misleading

[04:14] <AlexDaniel> i.e. this is what the docs say (on type/Int page): multi method unival(Int:D: --> Numeric)

[04:14] <AlexDaniel> m: say Int.^methods # (obviously no such method in Int)

[04:14] <camelia> rakudo-moar ea2884: OUTPUT¬´(Int Num Rat FatRat abs Bridge chr sqrt base polymod expmod is-prime floor ceiling round lsb msb narrow Range sign sin tan cotan acosech conj atan2 cosec pred asec acotan cosh acos acosec sech unpolar log10 atanh log exp acosh truncate sinh tanh acotanh Re‚Ä¶¬ª

[04:14] <samcv> yeah

[04:15] <AlexDaniel> samcv: but my question at this moment is actually ‚Äúwhy keep it in Str? Why not move it to Cool?‚Äù

[04:15] <samcv> that would be fine with me. all the methods are in Cool

[04:15] <samcv> +1

[04:16] *** cdg joined
[04:16] <samcv> should I go ahead and do that?

[04:17] <AlexDaniel> *shrug*

[04:17] <samcv> all the methods are there... so it makes way more sense

[04:17] <samcv> sec lemme make sure it won't break the docs

[04:18] <AlexDaniel> samcv: right now everyone is asleep (me too!), perhaps try asking it again a bit later

[04:18] <samcv> ok

[04:19] <samcv> like in how many hours?

[04:19] <samcv> a lot of people are in europe right

[04:19] <samcv> it's only 8pm here now

[04:23] *** labster joined
[04:30] <samcv> ok i moved them to Cool. i think that's the way to go tbh. will talk with people later about it and see what they think

[04:34] *** cyphase left
[04:39] *** kyclark joined
[04:39] *** cyphase joined
[04:44] *** cyphase left
[04:49] <dalek> doc: f1fa142 | coke++ | doc/Language/syntax.pod6:

[04:49] <synopsebot6> Link: http://doc.perl6.org/language/syntax

[04:49] <dalek> doc: remove trailing whitespace

[04:49] <dalek> doc: review: https://github.com/perl6/doc/commit/f1fa142546

[04:49] <dalek> doc: 10fcdc4 | coke++ | doc/Language/typesystem.pod6:

[04:49] <dalek> doc: Expand acronym, switch article

[04:49] <synopsebot6> Link: http://doc.perl6.org/language/typesystem

[04:49] <dalek> doc: review: https://github.com/perl6/doc/commit/10fcdc4963

[04:56] *** travis-ci joined
[04:57] <travis-ci> Doc build failed. Will "Coke" Coleda 'Expand acronym, switch article'

[04:57] <travis-ci> https://travis-ci.org/perl6/doc/builds/182964373 https://github.com/perl6/doc/compare/d14eea5adc61...10fcdc4963d7

[04:57] *** travis-ci left
[04:58] <[Coke]> why does 'make html' in the doc project require bigpage?

[05:03] * [Coke] gets a SEGV building the docs, and upgrades his rakudo

[05:05] *** pierre_ joined
[05:07] <[Coke]> Couldn't determine correct make program. Aborting.

[05:08] <[Coke]> bah

[05:08] *** kyclark left
[05:09] *** nicq20_ joined
[05:09] *** pyrimidine joined
[05:09] *** cdg left
[05:10] *** pierre_ left
[05:14] *** pyrimidine left
[05:14] *** bjz left
[05:20] <[Coke]> updated; now I get "unlock when we're not locked!" (tagging jnthn)

[05:21] <[Coke]> (only when running in parallel)

[05:23] *** nicq20_ left
[05:24] *** khw left
[05:27] *** bjz joined
[05:28] *** pyrimidine joined
[05:30] *** BenGoldberg left
[05:30] <dalek> doc: a93cbe7 | coke++ | doc/Programs/00-running.pod6:

[05:30] <dalek> doc: searchable "environment variable"

[05:30] <dalek> doc: 

[05:30] <dalek> doc: Closes #950

[05:30] <dalek> doc: review: https://github.com/perl6/doc/commit/a93cbe7cd3

[05:33] *** pyrimidine left
[05:39] <Xliff> Does anyone know why this error occurs? -- "Cannot invoke this object (REPR: Null; VMNull)" -- I'm getting it from the latest OO::Monitors, now

[05:39] <Xliff> Which means Terminal::Print might also be affected.

[05:43] *** cibs left
[05:45] *** cibs joined
[05:45] <dalek> doc: 8d7b9d3 | coke++ | doc/Language/variables.pod6:

[05:45] <synopsebot6> Link: http://doc.perl6.org/language/variables

[05:45] <dalek> doc: add a link from ! twigils to attributes.

[05:45] <dalek> doc: 

[05:45] <dalek> doc: closes #967

[05:45] <dalek> doc: review: https://github.com/perl6/doc/commit/8d7b9d3b5e

[05:45] <[Coke]> Xliff: what version of rakudo are you using?

[05:46] <MasterDukeLaptop> Xliff: usually seems to happen with async/conc stuff. dogbert17 was valgrinding a bunch of stuff earlier and creating moarvm issues for jnthn

[05:46] <MasterDukeLaptop> lizmat has been getting those when running the spectest with TEST_HARNESS=6

[05:50] *** travis-ci joined
[05:50] <travis-ci> Doc build passed. Will "Coke" Coleda 'searchable "environment variable"

[05:50] <travis-ci> https://travis-ci.org/perl6/doc/builds/182967758 https://github.com/perl6/doc/compare/10fcdc4963d7...a93cbe7cd3e0

[05:50] *** travis-ci left
[05:51] *** Cabanossi left
[05:51] *** Cabanossi joined
[05:55] *** pyrimidine joined
[06:00] *** pyrimidine left
[06:00] *** rurban joined
[06:04] *** travis-ci joined
[06:04] <travis-ci> Doc build passed. Will "Coke" Coleda 'add a link from ! twigils to attributes.

[06:04] <travis-ci> https://travis-ci.org/perl6/doc/builds/182968696 https://github.com/perl6/doc/compare/a93cbe7cd3e0...8d7b9d3b5edf

[06:04] *** travis-ci left
[06:04] *** rurban left
[06:07] *** wisti left
[06:11] <[Coke]> why is travis so verbose on doc build?

[06:15] *** sunnavy left
[06:18] *** pyrimidine joined
[06:26] *** pyrimidine left
[06:31] <samcv> nice Coke :)

[06:31] *** rurban joined
[06:31] <samcv> would be nice if it wasn't so verbose

[06:40] *** AlexDaniel left
[06:41] *** CIAvash joined
[06:44] *** darutoko joined
[06:50] *** pyrimidine joined
[06:51] <Xliff> [Coke]: Latest from git.

[06:51] <Xliff> Let me get exact. One sec.

[06:51] <Xliff> [Coke]: 2016.11-182-gea28845f9

[06:55] *** pyrimidine left
[07:03] *** pyrimidine joined
[07:04] <Xliff> I just rebuild my entire rakudo install. Version did not change. Still getting VMNull error.

[07:05] *** bjz left
[07:07] *** pyrimidine left
[07:07] *** pierre_ joined
[07:23] *** labster left
[07:28] *** domidumont joined
[07:32] *** domidumont left
[07:33] *** domidumont joined
[07:54] *** kaare_ left
[07:55] *** pyrimidine joined
[07:55] *** kaare_ joined
[07:57] *** presiden joined
[07:59] *** labster joined
[08:00] *** pyrimidine left
[08:06] <presiden> where can I read the doc about subscript and superscript operator(?) ?

[08:13] *** pyrimidine joined
[08:14] *** Tonik joined
[08:18] *** pyrimidine left
[08:20] *** domidumont left
[08:25] *** Tonik left
[08:25] *** bpmedley left
[08:25] *** skids left
[08:28] *** Vynce joined
[08:29] *** RabidGravy joined
[08:29] *** trnh joined
[08:29] *** trnh left
[08:29] *** trnh joined
[08:35] *** pyrimidine joined
[08:40] *** pyrimidine left
[08:44] <samcv> presiden, this? https://docs.perl6.org/language/subscripts

[08:45] *** giraffe left
[08:48] <presiden> samcv: ah, thanks.

[08:48] <samcv> no problem

[08:48] <presiden> so, what about superscript, is that just exponentation operator?

[08:48] *** notbenh left
[08:49] <samcv> oh

[08:49] <samcv> you don't mean subscript as in accessing an array index?

[08:49] <samcv> m: say 2‚Åπ

[08:49] <camelia> rakudo-moar ea2884: OUTPUT¬´512‚ê§¬ª

[08:49] <samcv> you can do that

[08:49] <samcv> or

[08:49] <samcv> m: say 2**9

[08:49] <camelia> rakudo-moar ea2884: OUTPUT¬´512‚ê§¬ª

[08:49] <samcv> but subscript letters don't do anything. what are you trying to do?

[08:50] *** notbenh joined
[08:50] <samcv> not sure what you mean by subscript, what mathematical operation are you meaning

[08:54] *** ufobat joined
[08:54] <presiden> samcv: eh, super-script I think what it's called, not sub-script, but yes, I mean the exponent operator.

[08:54] *** giraffe joined
[08:56] *** notbenh left
[08:57] <psch> [Coke], samcv: travis isn't configured to be more verbose on doc than on e.g. rakudo.  both have "on_success: change" and "on_error: always" as their reporting policy

[08:58] *** notbenh joined
[08:59] <psch> not sure why it reported two successes in a row though.  maybe the second started before the first was finished and starting is what fetches the previous status

[08:59] *** pyrimidine joined
[09:01] <samcv> wth atom tests https://travis-ci.org/perl6/atom-language-perl6/builds/182982071#L281

[09:01] <samcv> s ‚úó #16: Line contains inconsistent indentation. Expected 2 got 4.

[09:01] <samcv>      ‚ö° #17: Line exceeds maximum allowed length. Length is 83, max is 80.

[09:01] <samcv>      ‚úó #19: Line contains inconsistent indentation. Expected 2 got 4.

[09:01] <samcv>      ‚ö° #20: Line exceeds maximum allowed length. Length is 83, max is 80.

[09:02] <samcv> whyyyyy though....

[09:02] <samcv> jesus

[09:04] <SHODAN> because

[09:04] <samcv> it tests fine on my computer using the apm test program

[09:04] <samcv> because no brackets or ; :(

[09:04] <samcv> it still runs fine though

[09:04] *** pyrimidine left
[09:05] <samcv> also i have no clue how i can keep the line under 80 because it's literally all one thing. but i don't know coffeescript at all

[09:09] *** sena_kun joined
[09:09] *** pierre_ left
[09:12] *** Actualeyes left
[09:15] *** labster left
[09:23] *** pyrimidine joined
[09:24] *** labster joined
[09:25] *** domidumont joined
[09:28] *** rindolf joined
[09:29] *** wamba joined
[09:30] *** girafe left
[09:32] <timotimo> o/

[09:33] *** ufobat left
[09:40] *** rindolf left
[09:46] *** Vynce left
[09:52] *** rindolf joined
[10:01] *** andrzejku joined
[10:03] <samcv> well i need to go to sleep. night all

[10:04] <timotimo> gnite samcv 

[10:24] *** notbenh left
[10:26] *** labster left
[10:26] *** notbenh joined
[10:31] *** brrt left
[10:31] *** cibs left
[10:33] *** cibs joined
[10:35] *** TEttinger left
[10:36] *** rurban left
[10:36] *** bjz joined
[10:40] *** presiden left
[10:42] *** Actualeyes joined
[10:45] *** trnh left
[10:53] *** presiden joined
[10:57] *** abruanese_ joined
[11:07] *** abruanese_ is now known as abruanese

[11:13] *** xinming_ left
[11:14] *** xinming joined
[11:17] *** pyrimidine left
[11:17] *** pyrimidi_ joined
[11:28] *** espadrine joined
[11:29] *** pierre_ joined
[11:33] <RabidGravy> okay, how is this react block exiting without hitting any phasers

[11:34] *** ufobat joined
[11:40] *** andrzejku left
[11:40] *** bjz_ joined
[11:40] *** bjz left
[11:41] *** pierre_ left
[11:42] <RabidGravy> ah the done phaser on a IO::Socket::Async.Supply doesn't get called unless there has been some input :(

[11:44] *** presiden left
[11:46] *** andrzejku joined
[11:47] <RabidGravy> I'm going to call bug on that as otherwise there is no way of telling the client disconnected

[11:51] *** lukaramu joined
[11:57] <ufobat> does anyone know if Inline::Perl5 just works with perl5.24? or older versions as well?

[11:58] *** CIAvash left
[12:00] *** zacts left
[12:01] <nine> ufobat: 5.18 minimum

[12:02] <ufobat> nine: okay . then i am doing something wrong - cant get it up and running

[12:03] <nine> ufobat: details?

[12:04] <ufobat> wait a few sec, pls

[12:06] <ufobat> https://gist.github.com/ufobat/d705a1bfc81f5452b984388ff865c110

[12:09] <nine> ufobat: ah, I see :) Please try again with the modules you actually want to use. You picked two examples that expose a bit of strangeness of Perl 5. print is not really a function. It's more like an op and cannot be called that easily.

[12:10] <ufobat> both are examples from your README.md

[12:10] <nine> Data::Dumper is simply complaining about invalid usage. You need to pass the data it should dump to its constructor.

[12:10] <ufobat> i wanted to start your Dancr benchmark :)

[12:11] <nine> That's....true...and odd. That means those examples must have worked at some point. Could be that they still do on older Perl versions.

[12:12] <ufobat> nine, could you pls have a look at https://gist.github.com/ufobat/7dbf0d77f9eef7ba1e4adf4d701b16df

[12:12] <ufobat> thats the reason why i tried a more simple example ;)

[12:12] <ufobat> but maybe this is not Inline::Perl5 related

[12:12] <ufobat> looks perl6ish

[12:15] <ufobat> okay DateTime works

[12:16] <ufobat> perl6 -e 'use Inline::Perl5; use JSON::XS:from<Perl5>; my $j = Json::XS.new; '        

[12:16] <ufobat> Could not find symbol '&XS'

[12:16] <nine> Bailador-Benchmark? Is this about Dancr ported to Bailador or Dancr for Dancer2?

[12:16] <ufobat> ahh damn!

[12:17] <ufobat> its just a foldername where i stored your Dancr from your example dir

[12:17] <ufobat> forget about my json example :-)

[12:18] <ufobat> http://niner.name/talks/Web%20development%20and%20Perl%206/examples/Bailador/Dancr/ <- that one

[12:18] <nine> ufobat: I don't get where Digest enters the picture here. It's not used by Dancr

[12:18] <nine> Oh, then it's a pure Bailador application and Inline::Perl5 is not even used

[12:19] <ufobat> i thought it was the reason since the other 2 examples didnt work, 

[12:19] <nine> examples/Dancer/Dancr is the one using Inline::Perl5

[12:19] <ufobat> in the benchmark you just use Inline::Per5 for Plack and HTTP::Request::Common

[12:20] <ufobat> http://niner.name/talks/Web%20development%20and%20Perl%206/examples/Bailador/Dancr/dancr-bench.pl6 <- no?

[12:20] <nine> Ooooh....I did not even script the Bailador benchmark. That's just copy pasta from the Dancer2 implementation

[12:21] <nine> My Bailador benchmark was just ab2 -n 100 http://localhost:3000 after manually creating a couple of blog entries

[12:21] <ufobat> okay now it makes more sense!

[12:23] <ufobat> thanks for helping me :)

[12:28] <nine> you're welcome :)

[12:29] <nine> I'm happy that someone's interested in my work :)

[12:30] *** FROGGS joined
[12:30] <ufobat> me too :-) i am happy for the critic on bailador so i want to improve it :)

[12:31] <tadzik> <3

[12:33] <dalek> doc: 3cb4189 | Altai-man++ | doc/Type/Signature.pod6:

[12:33] <synopsebot6> Link: http://doc.perl6.org/type/Signature

[12:33] <dalek> doc: Attempt to explain ways to declare return type in signature

[12:33] <dalek> doc: review: https://github.com/perl6/doc/commit/3cb41891a2

[12:33] <dalek> doc: bd83d34 | Altai-man++ | doc/Type/Signature.pod6:

[12:33] <dalek> doc: fill-region-as-paragraph

[12:33] <synopsebot6> Link: http://doc.perl6.org/type/Signature

[12:33] <dalek> doc: review: https://github.com/perl6/doc/commit/bd83d346ab

[12:33] <dalek> doc: ce8b05c | Altai-man++ | doc/Type/Signature.pod6:

[12:33] <synopsebot6> Link: http://doc.perl6.org/type/Signature

[12:33] <dalek> doc: Fix grammar

[12:33] <dalek> doc: review: https://github.com/perl6/doc/commit/ce8b05c313

[12:33] <dalek> doc: 9babec9 | (Tom Browder)++ | doc/Type/Signature.pod6:

[12:33] <dalek> doc: Merge pull request #1044 from perl6/return-ways-explanation

[12:33] <synopsebot6> Link: http://doc.perl6.org/type/Signature

[12:33] <dalek> doc: 

[12:33] <dalek> doc: Attempt to explain ways to declare return type in signature

[12:33] <dalek> doc: review: https://github.com/perl6/doc/commit/9babec9e64

[12:38] <dalek> doc: 6afacd7 | (Tom Browder)++ | doc/Type/Signature.pod6:

[12:38] <synopsebot6> Link: http://doc.perl6.org/type/Signature

[12:38] <dalek> doc: grammar tweak

[12:38] <dalek> doc: review: https://github.com/perl6/doc/commit/6afacd7b1b

[12:38] <Xliff> Just for shiz and giggles, this worked.

[12:38] <Xliff> perl6 -e 'use Inline::Perl5; my $p5 = Inline::Perl5.new; $p5.use("JSON::XS"); my $j = $p5.invoke("JSON::XS", "new"); say $j'

[12:39] <Xliff> I've never had much luck using the :from<perl5> form.

[12:39] <Xliff>  perl6 -e 'use Inline::Perl5; use XML::Hash::XS:from<Perl5>;'

[12:40] <Xliff> Can't load '/home/cbwood/perl5/lib/perl5/i686-linux-gnu-thread-multi-64int/auto/XML/Hash/XS/XS.so' for module XML::Hash::XS: libicudata.so.55: cannot open shared object file: No such file or directory at /usr/share/perl/5.24/XSLoader.pm line 96.

[12:40] <Xliff> Which doesn't make much sense, since the invoke() form worked.

[12:41] <Xliff> On the other hand, this worked:

[12:42] <Xliff>  perl6 -e 'use Inline::Perl5; use JSON::XS:from<Perl5>; my $j = JSON::XS.new; say $j'

[12:42] <Xliff> Inline::Perl5::Perl5Object.new(ptr => NativeCall::Types::Pointer.new(-2080666168), perl5 => Inline::Perl5.new)

[12:43] <Xliff> ufobat and I had the same issue. "perl5" vs "Perl5" and "JSON" vs "Json". LOL

[12:43] * Xliff goes back to lurking.

[12:43] <ufobat> :D

[12:43] *** Xliff is now known as Xliff_L

[12:48] <dalek> doc: 3fde48d | Altai-man++ | doc/Language/regexes.pod6:

[12:48] <synopsebot6> Link: http://doc.perl6.org/language/regexes

[12:48] <dalek> doc: Index missing regex adverbs.

[12:48] <dalek> doc: 

[12:48] <dalek> doc: Fixes https://github.com/perl6/doc/issues/1046

[12:48] <dalek> doc: review: https://github.com/perl6/doc/commit/3fde48dad3

[12:50] <babydrop> AlexDaniel: it's not rocket surgery... I don't know why people have so much trouble learning to use it. There are two modes: subs and methods. Subs: give it a sub (&foo) or sub and args if you want a specific candidate. args are given with a Capture, so it'd be (&foo, \("some", "arg")). For methods, it's Object, Method name in a string, args (and args go in captures)

[12:51] *** pyrimidi_ left
[12:51] *** pyrimidine joined
[12:52] <dalek> doc: de5f160 | (Tom Browder)++ | doc/Type/Signature.pod6:

[12:52] <synopsebot6> Link: http://doc.perl6.org/type/Signature

[12:52] <dalek> doc: attempt some explanation for the preferred form

[12:52] <dalek> doc: review: https://github.com/perl6/doc/commit/de5f160b1e

[12:53] <sena_kun> tbrowder++

[13:00] *** canopus left
[13:06] *** canopus joined
[13:16] *** sunnavy joined
[13:16] <babydrop> Xliff_L: you don't need "use Inline::Perl5" for :from<Perl5> form

[13:17] *** pmurias joined
[13:20] *** bjz_ left
[13:22] *** bjz joined
[13:33] <ufobat> what is this: Missing serialize REPR function for REPR MVMContext (BOOTContext) ?

[13:34] <ufobat> what i did was a my $db will leave { .disconnect } = connect_db(); # which is a DBIish.connect object

[13:36] <babydrop> m: { my $db will leave { say "meows" } = "foos" }; say 42

[13:36] <camelia> rakudo-moar ea2884: OUTPUT¬´meows‚ê§42‚ê§¬ª

[13:37] <babydrop> ufobat: some sort of a bug

[13:39] <babydrop> m: multi sub foo(Int $x where 1..10) { state $bar = 42; say $bar; }; foo(3);

[13:39] <camelia> rakudo-moar ea2884: OUTPUT¬´(Any)‚ê§¬ª

[13:39] <babydrop> Trippy bug :)

[13:39] <babydrop> That's RT#130257

[13:39] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130257

[13:41] *** andrzejku left
[13:42] *** bpmedley joined
[13:48] *** lucasb joined
[13:50] <dalek> doc: 36e737b | (Tom Browder)++ | doc/Type/Signature.pod6:

[13:50] <synopsebot6> Link: http://doc.perl6.org/type/Signature

[13:50] <dalek> doc: cleanup from last edit

[13:50] <dalek> doc: review: https://github.com/perl6/doc/commit/36e737b8ff

[13:53] <Xliff_L> babydrop: It's that way in the docs. 

[13:53] <Xliff_L> However I just read that part in like a following paragraph, so. Shortcuts FTW!

[13:55] <Xliff_L> tbrowder: Has anyone ever mistaken you for John Creighton?

[13:55] *** sena_kun left
[13:59] <tbrowder>  I don't know that name so I don't think so

[14:05] <babydrop> Xliff_L: yes, synopsis doesn't make the fact clear, those the next paragraphs do: https://github.com/niner/Inline-Perl5#load-a-perl-5-module

[14:08] *** ufobat left
[14:12] *** MasterDukeLaptop left
[14:16] *** khw joined
[14:20] <Xliff_L> tbrowder: Ben Browder played John Creighton on FarScape. Just a little in-joke.

[14:20] <Xliff_L> It's been that kind of morning.

[14:21] <Xliff_L> zoffixBabyDroppedOnHaid: Yes. I got that. Thanks. ;)

[14:22] <babydrop> buggable: speed

[14:22] <buggable> babydrop, ‚ñÖ‚ñÉ‚ñÑ‚ñÇ‚ñÅ‚ñÜ‚ñÉ‚ñÇ‚ñÖ‚ñÇ‚ñÑ‚ñÉ‚ñà‚ñÉ‚ñÑ‚ñÑ‚ñÜ‚ñÑ‚ñÖ‚ñÉ‚ñÑ‚ñÉ‚ñÑ‚ñÑ‚ñÉ‚ñÑ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñÑ‚ñÜ‚ñÑ‚ñÑ‚ñÑ‚ñÜ‚ñÉ‚ñÑ‚ñÑ‚ñÉ‚ñÑ‚ñÉ‚ñÜ‚ñÑ‚ñÑ‚ñÖ‚ñÖ‚ñÅ‚ñÇ‚ñÇ data for 2016-11-16‚Äì2016-12-11; variance: 6.238s‚Äì7.175s

[14:23] <babydrop> buggable: eco

[14:23] <buggable> babydrop, Out of 754 Ecosystem dists, 137 have warnings and 0 have errors. See https://modules.perl6.org/update.log for details

[14:23] <Xliff_L> Oh! Nice stats.

[14:23] <babydrop> neat

[14:23] *** KotH_ is now known as KotH

[14:39] <tbrowder>  Xliff_L: interesting, I almost thought BB could be the son of my cousin, who has lived in eastern Tennessee for a long time, but his birth date and place pretty much preclude that.  There are a lot of Browders in Tennessee, and most are VERY distantly related if at all.

[14:43] *** cdg joined
[14:47] *** andrzejku joined
[14:50] <babydrop> Is Readline supported on Windows? Wondering if we need to add Windows case to https://github.com/rakudo/rakudo/commit/c6d61f07dc1e87ddef62c795a1d54f57f7196bb0

[14:57] <Xliff_L> tbrowder++

[14:58] *** cognominal left
[14:59] *** bartolin_ left
[15:03] *** rurban joined
[15:04] *** rurban1 joined
[15:08] *** rurban left
[15:10] *** zakharyas joined
[15:16] *** cdg left
[15:26] <babydrop> What does "intX[2;2] to intY[2;2]" mean? https://github.com/rakudo/rakudo/commit/79090b29d7ce66a4512

[15:26] <babydrop> oh, like int32, int64... nevermind

[15:29] <timotimo> no, it's male ints vs female ints

[15:29] *** mscha joined
[15:31] <mscha> m: my %a = a => { p=>1, q=>2 }, b => { x=>3, y=>4 }; my %b = %a.clone; %c<b><x> = 42; say %a;

[15:31] <camelia> rakudo-moar ea2884: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '%c' is not declared‚ê§at <tmp>:1‚ê§------> 3 b => { x=>3, y=>4 }; my %b = %a.clone; 7‚èè5%c<b><x> = 42; say %a;‚ê§¬ª

[15:31] <mscha> m: my %a = a => { p=>1, q=>2 }, b => { x=>3, y=>4 }; my %b = %a.clone; %b<b><x> = 42; say %a;

[15:31] <camelia> rakudo-moar ea2884: OUTPUT¬´{a => {p => 1, q => 2}, b => {x => 42, y => 4}}‚ê§¬ª

[15:31] <mscha> Is there an easy way to do a deep clone in Perl 6?

[15:39] <babydrop> m: my %a = a => { p=>1, q=>2 }, b => { x=>3, y=>4 }; my %b = %a.deepmap: { $_ = .clone };  %b<b><x> = 42; say %a;

[15:39] <camelia> rakudo-moar ea2884: OUTPUT¬´{a => {p => 1, q => 2}, b => {x => 3, y => 4}}‚ê§¬ª

[15:39] <babydrop> Note that .clone currently doesn't work on Lists/Arrays (and possibly some other core types)

[15:41] <babydrop> m: my %a = a => { p=>1, q=>2 }, b => { x=>3, y=>4 }; my %b = %a¬ª.clone;  %b<b><x> = 42; say %a;

[15:41] <camelia> rakudo-moar ea2884: OUTPUT¬´{a => {p => 1, q => 2}, b => {x => 3, y => 4}}‚ê§¬ª

[15:41] <babydrop> .oO( that's probably not safe... )

[15:46] *** wisti joined
[15:56] *** kyclark joined
[15:58] <tbrowder> [Coke]: ref my 12 Dec Advent post, can you say whether that module behavior is expected to stay the same with the module work being done? Such behavior is described in the docs now (but not in as much detail), but I would like  to add a statement to that effect in the post (and also ensure there are spectests to check for it). 

[16:00] <[Coke]> tbrowder: I can't comment on that, no.

[16:01] <[Coke]> you can check for spectests; if we have tests in the 6.c branch, then you're good.

[16:02] *** cdg joined
[16:02] <tbrowder> it seems reasonable that such behavior wouldn't change, but it would be nice to have it confirmed. I'll check spectests...

[16:03] <mscha> Thanks for the tips, babydrop!

[16:04] *** giraffe left
[16:04] *** cdg left
[16:05] *** cdg joined
[16:05] *** nowan joined
[16:13] *** kyclark left
[16:13] *** giraffe joined
[16:14] *** trnh joined
[16:19] *** Kvjvjvjvkvivhch joined
[16:21] *** Kvjvjvjvkvivhch left
[16:26] <babydrop> 0racle bazzaar cygx dogbert17 if you wish to be credited under something other than those aliases, please add yourself to https://github.com/rakudo/rakudo/blob/nom/CREDITS

[16:26] * babydrop thought dogbert17 was already in it...

[16:27] <babydrop> 0racle is seatek I think...

[16:30] *** kyclark joined
[16:31] *** bartolin joined
[16:33] *** cdg_ joined
[16:35] *** dmaestro joined
[16:35] *** cdg left
[16:38] *** andrzejku left
[16:41] *** zacts joined
[16:43] <dalek> doc: b7bbfb5 | coke++ | doc/Type/Signature.pod6:

[16:43] <synopsebot6> Link: http://doc.perl6.org/type/Signature

[16:43] <dalek> doc: remove trailing whitespace

[16:43] <dalek> doc: review: https://github.com/perl6/doc/commit/b7bbfb5e8d

[16:43] <dalek> doc: 056f60f | coke++ | / (3 files):

[16:43] <dalek> doc: Update through 2 major versions of jquery

[16:43] <dalek> doc: review: https://github.com/perl6/doc/commit/056f60f2c0

[16:43] <[Coke]> ^^ I tested that with search, seems fine.

[16:44] <babydrop> .oO( famous last words.... )

[16:46] *** ufobat joined
[16:49] *** kyclark left
[16:51] *** travis-ci joined
[16:51] <travis-ci> Doc build failed. Will "Coke" Coleda 'Update through 2 major versions of jquery'

[16:51] <travis-ci> https://travis-ci.org/perl6/doc/builds/183039820 https://github.com/perl6/doc/compare/36e737b8ffb0...056f60f2c029

[16:51] *** travis-ci left
[16:54] *** zacts left
[16:54] <babydrop> Weird how open-source world is commercialized these days.... Even my core hacking post garners comments about marketing and value to consumer

[16:55] *** mohae left
[16:55] <babydrop> Gone are the days when writing code for fun was normal?

[16:55] * babydrop shakes fist at the cloud

[16:55] *** mohae joined
[16:57] *** zacts joined
[17:08] *** andrzejku joined
[17:09] *** skids joined
[17:13] <[Coke]> Is there a way to get a pre-built rakudo in place for doc so we don't have to rebuild the whole compiler each time for the docs site?

[17:19] *** mawkish joined
[17:19] *** travis-ci joined
[17:19] <travis-ci> Doc build failed. Will "Coke" Coleda 'Update through 2 major versions of jquery'

[17:19] <travis-ci> https://travis-ci.org/perl6/doc/builds/183039820 https://github.com/perl6/doc/compare/36e737b8ffb0...056f60f2c029

[17:19] *** travis-ci left
[17:21] *** trnh left
[17:25] <babydrop> What distro does it use? There's probably an `apt-get install rakudo` we could stick?

[17:27] <timotimo> i think apt-get is available there, yeah

[17:27] <timotimo> we could just put "apt-cache search rakudo" into the travis script and see what it outputs :D

[17:27] <babydrop> :)

[17:27] <[Coke]> the failure there is a moarvm panic. happened twice: MoarVM panic: Collectable 0x2b30d6aa7060 in fromspace accessed

[17:27] <timotimo> ouch!

[17:27] <[Coke]> having a same version each time would insulate us from issues with running at HEAD also.

[17:28] <timotimo> mhm

[17:30] <[Coke]> ah, crap. the styles are wonky on search (but not locally, only on the prod site)

[17:30] <[Coke]> searching puts the dropdowns in the upper left hand corner of the screen.

[17:30] <[Coke]> I'll back it out, but it woudl be nice to get a modern jquery at some point. 

[17:30] <babydrop> wait!

[17:31] <babydrop> [Coke]: wait, there's most likely an easy fix for that.

[17:31] * babydrop looks

[17:31] <dalek> doc: 97271a9 | coke++ | / (3 files):

[17:31] <dalek> doc: Revert "Update through 2 major versions of jquery"

[17:31] <dalek> doc: 

[17:31] <dalek> doc: This reverts commit 056f60f2c02936144f19885ef4d5199d06f57a04.

[17:31] <dalek> doc: 

[17:31] <dalek> doc: While the styles work fine locally, in prod they put the search

[17:31] <dalek> doc: results in the upper left hand corner of the screen.

[17:31] <dalek> doc: review: https://github.com/perl6/doc/commit/97271a986a

[17:31] <babydrop> heh

[17:31] <[Coke]> babydrop: too slow. Please feel free to re-revert, though!

[17:35] *** BenGoldberg joined
[17:37] <babydrop> interesting... on a local build I also get the external link thingies displayed... http://i.imgur.com/tfTOTu4.png

[17:38] <[Coke]> babydrop: yes, that's because locally we have the mojo plugins to run SASS stuff

[17:38] <[Coke]> so you now have a locally modified copy of the css style. those mods aren't in prod, I don't think.

[17:38] * babydrop makes a quizzical look

[17:38] <samcv> good morning perl 6

[17:38] <babydrop> \o

[17:39] <babydrop> aye, that style wasn't saved in generated CSS

[17:39] *** travis-ci joined
[17:39] <travis-ci> Doc build failed. Will "Coke" Coleda 'Revert "Update through 2 major versions of jquery"

[17:39] <travis-ci> https://travis-ci.org/perl6/doc/builds/183047370 https://github.com/perl6/doc/compare/056f60f2c029...97271a986a87

[17:39] *** travis-ci left
[17:49] *** zakharyas left
[17:53] *** mscha left
[17:53] *** Actualeyes left
[17:55] <[Coke]> ooh, I think I figured out how to smarten the search a tad.

[17:58] <babydrop> Wait until I push the fix for jQuery, if possible :)

[17:59] *** Linxius joined
[18:00] *** Linxius is now known as LX

[18:01] *** LX is now known as forma

[18:01] *** forma is now known as linxiu

[18:01] <samcv> nice [Coke] 

[18:05] <babydrop> ffs

[18:05] <babydrop> stupid web dev tools collapsing elements so I can't grab the class of a menu item that's the currently highlighted nav item ~_~

[18:06] *** linxiu left
[18:06] *** Linxius joined
[18:07] <ufobat> zostay, have you made some improvements on p6w lately? :-)

[18:07] *** Linxius left
[18:08] <dalek> doc: c598575 | (Zoffix Znet)++ | / (3 files):

[18:08] <dalek> doc: Revert "Revert "Update through 2 major versions of jquery""

[18:08] <dalek> doc: 

[18:08] <dalek> doc: This reverts commit 97271a986a87a493fde266748b64f6bf7080c398.

[18:08] <dalek> doc: review: https://github.com/perl6/doc/commit/c598575f65

[18:09] <dalek> doc: 85de0d2 | (Zoffix Znet)++ | / (17 files):

[18:09] <dalek> doc: Update jQuery UI + tweak our overrides for it to match old look

[18:09] <dalek> doc: 

[18:09] <dalek> doc: - Also generate CSS from SASS, which includes

[18:09] <dalek> doc: https://github.com/perl6/doc/commit/e3c7aa37c6e4e8841ba0a26b21a2f06eb3026a30

[18:09] <dalek> doc: review: https://github.com/perl6/doc/commit/85de0d278f

[18:10] <zostay> No. Hard to find time and when I do I keep running into obscure async bugs

[18:10] * babydrop is done

[18:12] *** pmurias left
[18:15] <[Coke]> babydrop++

[18:15] <timotimo> [Coke]: don't forget you can activate pseudo-classes on elements via the top of the right panel thingie

[18:16] *** travis-ci joined
[18:16] <travis-ci> Doc build failed. Zoffix Znet 'Revert "Revert "Update through 2 major versions of jquery""

[18:16] <travis-ci> https://travis-ci.org/perl6/doc/builds/183053301 https://github.com/perl6/doc/compare/97271a986a87...c598575f65aa

[18:16] *** travis-ci left
[18:16] *** lluchs joined
[18:17] <babydrop> timotimo: what right panel thingie? (what browser/web dev tool?)

[18:17] *** travis-ci joined
[18:17] <travis-ci> Doc build failed. Zoffix Znet 'Update jQuery UI + tweak our overrides for it to match old look

[18:17] <travis-ci> https://travis-ci.org/perl6/doc/builds/183053572 https://github.com/perl6/doc/compare/c598575f65aa...85de0d278f5c

[18:17] *** travis-ci left
[18:19] *** pmurias joined
[18:25] <samcv> oh now that people are awake. should I try and have Github add Perl 6 Pod as its own language or just have it do as Perl 6

[18:26] <samcv> i mean for now the syntax highlighting will obv be for perl 6, but do people want it labeled as Pod6 (or some other name) instead of just perl 6

[18:26] <samcv> i am a little bit for having Pod6, but i wanted to know what you guys think

[18:27] <babydrop> samcv: what would it do for Pod6 intermixed in perl6 code?

[18:27] <samcv> that would just be perl 6

[18:27] <samcv> atm i'm at least gonna get it to not think .pod that are perl 6 pod is actualy perl pod

[18:27] <samcv> babydrop, https://github.com/perl6/specs/blob/master/S15-unicode.pod

[18:27] <babydrop> How?

[18:27] <samcv> see what happens now

[18:28] <samcv> for things called .pod that aren't perl 5 pod

[18:28] * babydrop doesn't need to click to know what happens.

[18:28] <babydrop> There's a lengthy issue on the topic: https://github.com/perl6/doc/issues/167

[18:28] <samcv> oh

[18:29] <samcv> well i made a pull request to github's linguist which classifies and chooses what syntax highilghter to use

[18:29] <babydrop> We went with "screw it, let's rename stuff to .pod6"

[18:29] <babydrop> Cool

[18:29] <babydrop> samcv++

[18:29] <samcv> so for some statistics

[18:29] <samcv> with my changes 103 repositories by 74 users. have .pod files that are perl 6 pod

[18:29] <samcv> that are named .pod

[18:30] <samcv> 52 unique repositories, distributed between 28 unique users that are named .pod6

[18:30] <samcv> so there's double the number that are really pod6 that are called .pod

[18:30] <samcv> so should I make it classify as 'Pod6' language? do people want that?

[18:30] <samcv> and not classified as 'Perl 6'

[18:31] <samcv> https://github.com/github/linguist/pull/3366 here is where me and the Linguist people are talking

[18:31] * babydrop has no opinion

[18:32] *** stmuk joined
[18:32] <samcv> i mean 'Pod' is its own language

[18:32] <RabidGravy> okay I'm having a weird time here

[18:33] <RabidGravy> why does this code https://gist.github.com/jonathanstowe/925f4a89988b384625dfa42e79334343 exit completely without an error message or anything when a client disconnects?

[18:33] <timotimo> babydrop: chrome's

[18:33] *** BenGoldberg left
[18:34] <RabidGravy> that shouldn't happen right

[18:34] *** stmuk_ left
[18:35] <RabidGravy> it's the writing to the socket that does it, but surely that is just an SIGPIPE and an exception

[18:36] <timotimo> i could imagine you're losing a few of the values from the supply by not waiting for the listeners to be set up before emitting stuff

[18:36] <timotimo> but yeah, since you're never .done-ing the supply, it shouldn't just end

[18:36] <RabidGravy> it is a SIGPIPE

[18:36] <samcv> Footnote: Ze and hir are popular gender-free pronouns preferred by some transgender and/or gender non-conforming individuals

[18:37] <samcv> [popular]

[18:37] <timotimo> oh?

[18:37] <samcv> oops

[18:37] <samcv> sorry meant to paste to another channel

[18:37] <timotimo> huh, i hadn't seen those yet

[18:37] <babydrop> samcv: in what language?

[18:37] <samcv> english?

[18:37] <babydrop> English. never saw those before

[18:37] <samcv> i guess

[18:37] <samcv> https://www.washingtonpost.com/news/volokh-conspiracy/wp/2016/05/17/you-can-be-fined-for-not-calling-people-ze-or-hir-if-thats-the-pronoun-they-demand-that-you-use/?utm_term=.4893de4dd5c7

[18:38] <samcv> this was the article i was pasting to another channel but ended up here

[18:38] <samcv> imo you should call somebody what they want to be called, even if it's not a 'common' pronoun

[18:38] <babydrop> Sure.

[18:39] <babydrop> samcv: which one do you use?

[18:39] <samcv> what pronoun? the normal one?

[18:39] <babydrop> Well, which one?

[18:39] <timotimo> huh, a fine? that'll surely get some people spouting vitriol all over the 'net

[18:39] <samcv> well her

[18:40] <babydrop> Noted.

[18:40] <samcv> timotimo, yeah i think that was the point of the title

[18:40] <timotimo> ah, right, clickbait and all that

[18:40] <samcv> yeah

[18:40] <timotimo> *sigh* such is the world of journalism that we live in today

[18:40] <samcv> ^

[18:40] * timotimo goes AFK for dinner, yay

[18:43] <[Coke]> ok. I have a local search working that if you search for 'envirt', you get 'environment variables' and 'invert'

[18:43] <[Coke]> (e.g.)

[18:44] <[Coke]> I am thinking maybe we don't turn on the levenshtein search unless you have at least 3 chars, though.

[18:44] <samcv> [Coke], do you think Pod6 should be its own language name on github? like how Pod is?

[18:44] <samcv> or do you want it just to be labeled as Perl 6 code

[18:44] <[Coke]> samcv: I'm the one that renamed all the files in perl6/doc to be .pod6

[18:44] <[Coke]> oh, I thought you mean as opposed to pod, not as opposed to perl6

[18:45] <samcv> is pod6 indexed as perl 6?

[18:45] <samcv> i don't think it is

[18:45] <[Coke]> I mean, we can follow perl5's lead there, I guess. I don't really care.

[18:45] <samcv> because my pull release adds that https://github.com/github/linguist/pull/3366#issuecomment-266298145

[18:45] <samcv> so like 99% sure it doesn't. unless you set the .gitattributes

[18:45] <samcv> but is 'Pod6' an ok name or what?

[18:47] <samcv> atm there's 103 repos with 74 users with .pod's that get classified as perl 6 pod by my PR to github's linguist, which is double the number of unique repos and users that even have .pod6 files period

[18:52] <lucasb> what? some POD5 files are recognized as Pod6 files?

[18:52] <yoleaux> 00:34Z <babydrop> lucasb: were you going to fix that slip bug or should I take care of it? It's trivial and will let you learn the build system.

[18:53] <babydrop> lots of Perl 5 test files get recognized as Perl 6

[18:53] <lucasb> babydrop++ please, take care. I'm not confident right now :)

[18:53] <babydrop> OK

[19:04] <mst> alternative idea: lucasb should try, babydrop should review+help

[19:05] <mst> then it gets fixed to 'confident' *and* lucasb learns the build system

[19:05] <babydrop> +1

[19:06] *** Tonik joined
[19:10] <lucasb> +1

[19:11] <lucasb> (I'll try when I get some time, if babydrop don't get there first)

[19:11] *** mawkish left
[19:11] <babydrop> lucasb: OK. Let me know when you have time and I'll give instructions on what to do

[19:11] *** mawkish joined
[19:11] <lucasb> babydrop: thanks

[19:12] <lucasb> about POD, should "=end foo" emit a warn/error if no "=begin foo" was seen before it?

[19:12] <dalek> doc/coke/levenshtein: 7ebb0d7 | coke++ | / (3 files):

[19:12] <dalek> doc/coke/levenshtein: Allow fuzzy searching

[19:12] <dalek> doc/coke/levenshtein: 

[19:12] <dalek> doc/coke/levenshtein: For #999

[19:12] <dalek> doc/coke/levenshtein: review: https://github.com/perl6/doc/commit/7ebb0d77b3

[19:12] <lucasb> right now, P6 thinks the "=" in =end is an infix

[19:12] <[Coke]> https://github.com/perl6/doc/pull/1047 - feel free to merge if someone else gives it a thumbs up

[19:12] *** BenGoldberg joined
[19:12] <lucasb> sub end { 42 } \n say my $x \n =end

[19:14] *** Vynce joined
[19:14] *** dalek left
[19:15] *** dalek joined
[19:15] *** ChanServ sets mode: +v dalek

[19:20] *** travis-ci joined
[19:20] <travis-ci> Doc build failed. Will "Coke" Coleda 'Allow fuzzy searching

[19:20] <travis-ci> https://travis-ci.org/perl6/doc/builds/183063123 https://github.com/perl6/doc/commit/7ebb0d77b368

[19:20] *** travis-ci left
[19:21] *** darutoko left
[19:25] <ufobat> is it still pretty common that using Proc::Async leads to a segfault?

[19:26] <timotimo> shouldn't be

[19:27] <timotimo> we do have that one thing where we double-free stuff in the work queue somehow sometimes

[19:29] <MasterDuke> ufobat: i'd say yes

[19:30] <jnthn> I've been working on something that uses Proc::Async quite heavily, and running it and its test suite dozens of times a day. Haven't seen it SEGV in a week plus.

[19:30] <jnthn> Maybe more. Can't quite remember when the last batch of fixes went in.

[19:31] <MasterDuke> hmm, thought those "no such method 'XXX' for object 'YYY'" seen when running with TEST_HARNESS=6 and such were P::A related?

[19:32] <jnthn> No, the missing methods were grammar/match object related

[19:32] <babydrop>  Nov 30 https://github.com/rakudo/rakudo/commit/74eb6b958613e89de444581e9f2b42d732da2d1a

[19:33] <babydrop> And Nov 23 https://github.com/rakudo/rakudo/commit/e4d78c6b1e0035049cf674aee327cc8b78321c8f

[19:33] <jnthn> So no obvious connection with Proc::Async. I think there's still some oddity in grammar/regex stuff somewhere that leads to concurrency issues (there's at least one RT still open on the matter)

[19:33] <babydrop> and https://github.com/rakudo/rakudo/commit/6bb8823794273083dc979e283e849fce7ace2bda

[19:35] <jnthn> Yeah, after the fixes of the 23rd it was a good bit better. Think it was the ones on the 30th that I've not seen it SEGV since.

[19:35] <MasterDuke> ahh, i may be mistakenly accusing P::A then

[19:35] <ufobat> we.. i am on 2012.11 not nom!

[19:35] * psch hopes that's a typo

[19:36] <moritz> 2012.11? you've got to be kidding us

[19:36] <ufobat> ah ah ah

[19:36] <ufobat> well i am on 2016.11

[19:36] * moritz that for a time that ufobat was using RHEL 4 or something

[19:36] <jnthn> MasterDuke: If you do get a P::A-related SEGV I'll happily look in to it, but as of the last round of fixes it's seemed a good bit better.

[19:37] * ufobat did to much time travelling lateley

[19:37] <ufobat> jnthn, i am going to install nom and check if it is gone first

[19:37] <RabidGravy> right, now with https://gist.github.com/jonathanstowe/925f4a89988b384625dfa42e79334343

[19:37] <jnthn> Fingers crossed :)

[19:38] <RabidGravy> It is getting an unhandled exception despite the CATCH

[19:38] <RabidGravy> second version

[19:38] <RabidGravy> this is very odd

[19:38] *** pyrimidine left
[19:39] <RabidGravy> can't even work out where the "Cannot resolve caller postcircumfix:<[ ]>(Mu, Int);" is coming from

[19:40] <nine> [ptc]: did you notice that Test::Builder actually works with rakudo's lexical_module_load branch?

[19:42] <japhb> jnthn: Is there anyone other than you that can work on https://github.com/jnthn/oo-monitors/issues/8 ?  The project I'm working on that tickles this bug (or bug cooperative, you can't trust 'em, they might just work together) is starting to get users hitting it as well, and as the project expands, the 'no precompilation' workaround gets painfully slow ....

[19:43] <jnthn> RabidGravy: Dunno if it's relevant here, but QUIT catches exceptions from the supply you're subscribed to, while CATCH does the usual "exceptions generated by code in this dynamic scope" thing

[19:44] <jnthn> RabidGravy: I can't guess where the postcircumfix thing is coming from either...

[19:44] <jnthn> japhb: Didn't I fix precomp on OO::Monitors once recently? :S

[19:44] <japhb> jnthn: The fix wasn't complete.

[19:44] <RabidGravy> so a QUIT in the react should catch that. let me try

[19:45] <moritz> m: say Date.new('2017-02-29')

[19:45] <camelia> rakudo-moar 8d4dbb: OUTPUT¬´Day out of range. Is: 29, should be in 1..28‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:45] <japhb> jnthn: So for some subset of uses (and I happen to be dealing with one), OO::Monitors is still broken with precomp on. : -(

[19:45] <moritz> m: say Date.new('2016-02-29')

[19:45] <camelia> rakudo-moar 8d4dbb: OUTPUT¬´2016-02-29‚ê§¬ª

[19:45] <jnthn> japhb: Urgh

[19:45] <moritz> m: say Date.new(year => 2017, month => 2, day => 29)

[19:45] <camelia> rakudo-moar 8d4dbb: OUTPUT¬´2017-02-29‚ê§¬ª

[19:45] <moritz> BUG

[19:46] <japhb> jnthn: Yeah, and I'm *really* sorry to keep bugging you with this one, if there's anyone else qualified, I'll bug them instead ...

[19:47] <moritz> m: say Date.new(year => 2017, month => 42, day => 29)

[19:47] <camelia> rakudo-moar 8d4dbb: OUTPUT¬´2017-42-29‚ê§¬ª

[19:47] *** Ben_Goldberg joined
[19:47] *** BenGoldberg left
[19:47] *** Ben_Goldberg is now known as BenGoldberg

[19:49] <jnthn> What a strange error...

[19:49] <moritz> bisectable6: say Date.new(year => 2017, month => 42, day => 29)

[19:49] <bisectable6> moritz, Bisecting by exit code (old=2015.12 new=8d4dbb2). Old exit code: 1

[19:49] <bisectable6> moritz, bisect log: https://gist.github.com/7e080e976a205a729d77e335428f8f6b

[19:49] <bisectable6> moritz, (2016-02-14) https://github.com/rakudo/rakudo/commit/585619f35acc136ad96900f09ebaba2627389942

[19:49] <jnthn> japhb: It does look rather like all concurrency stuff can be golfed away from it at least, so it's a plain precomp bug.

[19:51] <jnthn> The first golf is really odd too in that INIT shouldn't even really play into precomp

[19:52] <moritz> I'm glad I'm not imagning this. I was sure I didn't implement it that way originally

[19:54] <jnthn> japhb: I'll have some tuits for Perl 6 stuff during the week (Wed typically is the day I set aside for Perl 6 stuff); I'll try and look at it then if nobody else beats me to it

[19:54] <japhb> jnthn: Thank you!

[19:55] <[ptc]> nine: no, I'd not spotted that.  Thanks for pointing that out :-)

[19:55] <[ptc]> nine: I've been wanting to write up what's been collected in the ticket for Test::Builder as a rakudobug, but I've been low on tuits lately...

[19:56] <japhb> nine: Do you have any ideas on the issue (https://github.com/jnthn/oo-monitors/issues/8) I've been discussing with jnthn?  Just in case this turns out to be more in your wheelhouse than his ...

[19:58] * jnthn is relieved to notice he still has all week to come up with his advent post

[19:58] <babydrop> huggable: advent

[19:58] <huggable> babydrop, https://github.com/perl6/mu/blob/master/misc/perl6advent-2016/schedule

[19:58] *** kurahaupo__ joined
[19:58] <babydrop> RabidGravy: I guess you remember about yours? :)

[20:00] <RabidGravy> yeah though I'm struggling with what should be a trivial example here

[20:02] <dalek> doc: b7f0e9d | (Zoffix Znet)++ | template/ (2 files):

[20:02] <dalek> doc: Add cache bumping thing to assets

[20:02] <dalek> doc: 

[20:02] <dalek> doc: So we could decache stuff on style/JS changes

[20:02] <dalek> doc: review: https://github.com/perl6/doc/commit/b7f0e9de59

[20:07] *** labster joined
[20:10] *** travis-ci joined
[20:10] <travis-ci> Doc build failed. Zoffix Znet 'Add cache bumping thing to assets

[20:10] <travis-ci> https://travis-ci.org/perl6/doc/builds/183070984 https://github.com/perl6/doc/compare/85de0d278f5c...b7f0e9de5929

[20:10] *** travis-ci left
[20:11] *** rindolf left
[20:11] <pmurias> nqp-m: nqp::say('6x'+0)

[20:11] <camelia> nqp-moarvm: OUTPUT¬´6‚ê§¬ª

[20:11] <pmurias> nqp-j: nqp::say('6x'+0)

[20:11] <pmurias> nqp-j: say("lives?")

[20:12] <pmurias> j: say("lives")

[20:12] <psch> nqp-j never worked

[20:12] <camelia> rakudo-jvm 8ca367: OUTPUT¬´lives‚ê§¬ª

[20:12] <psch> it only complained in interesting but ultimately not-really-fixable ways iirc

[20:12] <psch> j: use nqp; nqp::say('6x'+0)

[20:12] <camelia> rakudo-jvm 8ca367: OUTPUT¬´Cannot convert string to number: trailing characters after number in '036‚èè5x' (indicated by ‚èè)‚ê§  in sub val at gen/jvm/CORE.setting line 31224‚ê§  in method Numeric at gen/jvm/CORE.setting line 12802‚ê§  in sub infix:<+> at gen/jvm/CORE.setting lin‚Ä¶¬ª

[20:12] <psch> well that doesn't do the nqp codepath anyway :/

[20:13] <pmurias> m: my str $foo = '6x'; my int $bar = $foo;say($bar);

[20:13] <camelia> rakudo-moar 8d4dbb: OUTPUT¬´6‚ê§¬ª

[20:13] <pmurias> j: my str $foo = '6x'; my int $bar = $foo;say($bar);

[20:13] <camelia> rakudo-jvm 8ca367: OUTPUT¬´0‚ê§¬ª

[20:14] *** Ben_Goldberg joined
[20:14] *** BenGoldberg left
[20:14] *** Ben_Goldberg is now known as BenGoldberg

[20:14] *** rindolf joined
[20:18] <ufobat> jnthn, it does still segfault :/

[20:19] <ufobat> jnthn, but i am running perl6 --profile

[20:20] <jnthn> And...when you're not using that?

[20:20] <ufobat> it just takes longer to segfault ^^

[20:21] *** pyrimidine joined
[20:24] *** lucasb left
[20:25] <jnthn> OK. If you're able, please golf it and stick it in RT, otherwise reproduction instructions would allow someone else to do the initial bit of hunting.

[20:26] <ufobat> jnthn, https://gist.github.com/ufobat/8fa1042351d821cd7de7e85ae75a344c#file-dancr-pm6-L44

[20:26] <japhb> .ask tadzik Would you mind adding a module version in your META.info for Terminal-ANSIColor?  Without a version, the module installers won't upgrade it by default.  (Some of Terminal-Print's users are asking us why 256-color mode doesn't work and the answer usually ends up being '--force your Terminal-ANSIColor install' to get the latest.)

[20:26] <yoleaux> japhb: I'll pass your message to tadzik.

[20:28] *** domidumont left
[20:28] <lluchs> Is there an easy way to get from this: (('a', 1), ('b', 2), ('a', 2), ('a', 1)) to this: {a => set(1, 2), b => set(2)}, i.e. collect the values in sets?

[20:29] <babydrop> m: (('a', 1), ('b', 2), ('a', 2), ('a', 1)).flat.Set.say

[20:29] <camelia> rakudo-moar 8d4dbb: OUTPUT¬´set(a, b, 1, 2)‚ê§¬ª

[20:29] <babydrop> hm

[20:30] <lluchs> Not quite, I want a hash of sets.

[20:30] <ufobat> jnthn, is this golfed enough? or doesn't it count because of --profile? perl6 --profile -e 'while True {try {say await Proc::Async.new("/usr/bin/curl", "-m", "15", "http://localhost:3000").start; CATCH {.gist.say}}  }'

[20:31] <jnthn> No, we already know that --profile and concurrency stuff don't get along too well.

[20:31] <ufobat> okay

[20:32] <babydrop> m: say (% .push: (('a', 1), ('b', 2), ('a', 2), ('a', 1)).flat)¬ª.Set

[20:32] <camelia> rakudo-moar 8d4dbb: OUTPUT¬´{a => set(1, 2), b => set(2)}‚ê§¬ª

[20:32] <babydrop> lluchs: ^

[20:32] <lluchs> cool, thanks

[20:33] *** obfusk joined
[20:33] <jnthn> ufobat: If you seaprate out the server and the client part into separate processes, and one of them still breaks, it'd help indicate if the problem is in one, the other, or due to the two together.

[20:34] <jnthn> Well, if it doesn't still break when you've taken them apart

[20:34] <jnthn> (e.g. just have start_requests in a separate process)

[20:35] * jnthn away for a bit

[20:36] *** labster left
[20:37] *** mawkish left
[20:39] *** kurahaupo__ left
[20:40] *** rurban joined
[20:41] <RabidGravy> okay this apparently stupidly simple example is actually doing my head in

[20:41] *** rurban2 joined
[20:42] <tadzik> japhb: absoluetly

[20:42] <yoleaux> 20:26Z <japhb> tadzik: Would you mind adding a module version in your META.info for Terminal-ANSIColor?  Without a version, the module installers won't upgrade it by default.  (Some of Terminal-Print's users are asking us why 256-color mode doesn't work and the answer usually ends up being '--force your Terminal-ANSIColor install' to get the latest.)

[20:42] *** mawkish joined
[20:43] *** rurban1 left
[20:43] *** dalek left
[20:44] *** dalek joined
[20:44] *** ChanServ sets mode: +v dalek

[20:45] *** rurban left
[20:46] *** Tonik left
[20:46] *** nchambers is now known as god

[20:48] *** mawkish left
[20:51] <ufobat> jnthn, it dosnt segfault if i seperate them into 2 processes

[20:53] *** mawkish joined
[20:59] <RabidGravy> okay that "Unhandled exception in code scheduled on thread 18

[20:59] <RabidGravy> Cannot resolve caller postcircumfix:<[ ]>(Mu, Int); none of these signatures match:

[20:59] <RabidGravy> "

[21:00] *** girafe joined
[21:00] <RabidGravy> I cannot catch it anywhere

[21:00] <RabidGravy> in the mainline, in the react, in the taps, nowhere

[21:05] *** BenGoldberg left
[21:07] *** espadrine left
[21:10] *** labster joined
[21:12] <RabidGravy> okay it's the second time it hits the signal handler

[21:15] *** kurahaupo__ joined
[21:22] <RabidGravy> pretty certain the offending line is src/core/signals.pm:67

[21:25] <babydrop> m: $*KERNEL.signals.say

[21:25] <babydrop> ugh... lag

[21:25] <camelia> rakudo-moar 0c75e5: OUTPUT¬´[(Any) SIGHUP SIGINT SIGQUIT SIGILL SIGTRAP SIGABRT SIGBUS SIGFPE SIGKILL SIGUSR1 SIGSEGV SIGUSR2 SIGPIPE SIGALRM SIGTERM SIGSTKFLT SIGCHLD SIGCONT SIGSTOP SIGTSTP SIGTTIN SIGTTOU SIGURG SIGXCPU SIGXFSZ SIGVTALRM SIGPROF SIGWINCH SIGIO SIGPWR SIGSYS]‚ê§¬ª

[21:31] <RabidGravy> I think I'll have to instrument this but it looks like @known_signals is getting messed up on subsequent invocations

[21:33] <lizmat> RabidGravy: could be a race condition, have you tried replacing "state" with "my" ?

[21:33] *** bjz left
[21:33] <lizmat> or:

[21:33] <RabidGravy> no, I haven't got that far yet

[21:34] <lizmat> my @known_signales := once $*KERNEL.signals

[21:34] <lizmat> s/les/ls/

[21:34] <lizmat> I know once is basically also a state var,. but then it would at least not be on an array, just on a hidden scalar

[21:36] <MasterDuke> would INIT work instead of once?

[21:36] <lizmat> yes, but then you would run this at every start up, even when you don't need signal()

[21:36] <lizmat> and this is quite involved, if I remember correctly

[21:37] <lizmat> $ 6 ''

[21:37] <lizmat> real	0m0.120s

[21:37] <RabidGravy> right moving that signal outside does fix it

[21:37] <lizmat> $ 6 '$*KERNEL.signals'

[21:37] <lizmat> real	0m0.173s

[21:38] <lizmat> MasterDuke: we don't want to incur a 50+ millisecond delay for each start up

[21:39] <MasterDuke> lizmat: ha, definitely not

[21:40] <lizmat> hmmm... actually, am quite unpleasantly surprised to see startup at 120 msecs now  :-(

[21:40] <lizmat> less than 2 weeks ago, I saw it at less than 105 msecs

[21:41] <babydrop> :(

[21:41] *** lukiramu joined
[21:43] *** FROGGS left
[21:44] <RabidGravy> okay, thar's way weird

[21:44] <lizmat> m: my regex line { \N* \n }; "abc\ndef\nghi" ~~ / <first=line> <second=line> /; say $<first second>

[21:44] <camelia> rakudo-moar 0c75e5: OUTPUT¬´(ÔΩ¢abc‚ê§ÔΩ£ ÔΩ¢def‚ê§ÔΩ£)‚ê§¬ª

[21:44] <lizmat> m: my regex line { \N* \n }; "abc\ndef\nghi" ~~ / <first=line> <second=line> /; say $<first second>>>.chomp

[21:44] <camelia> rakudo-moar 0c75e5: OUTPUT¬´(abc def)‚ê§¬ª

[21:45] *** lukaramu left
[21:45] <lizmat> I want to get the latter result by modifying the regex so I don't need the >>.chomp

[21:45] <lizmat> suggestions ?

[21:47] <RabidGravy> this works perfeectly fine https://gist.github.com/jonathanstowe/6918de746aaddc9b299e397f5eedb8cf

[21:47] <RabidGravy> only need to trap the SIGPIPE outside

[21:47] <psch> lizmat: you need something to get Str instead of Match

[21:47] <RabidGravy> totalyy weird

[21:48] <psch> lizmat: unless that's the side-effect of .chomp you don't care about, then you can use )>

[21:48] <psch> m: my regex line { \N* )> \n }; "abc\ndef\nghi" ~~ / <first=line> <second=line> /; say $<first second>

[21:48] <camelia> rakudo-moar 0c75e5: OUTPUT¬´(ÔΩ¢abcÔΩ£ ÔΩ¢defÔΩ£)‚ê§¬ª

[21:49] <psch> m: my regex line { \N* )> \n }; "abc\ndef\nghi" ~~ / <first=line> <second=line> /; say $<first second>>>.Str

[21:49] <camelia> rakudo-moar 0c75e5: OUTPUT¬´(abc def)‚ê§¬ª

[21:49] <psch> but yeah

[21:49] <lizmat> )> is what I was looking for, psch++

[21:51] <lizmat> psch: so where is that documented ?

[21:52] <psch> lizmat: looks like it's only in rb-nutshell.pod6 currently, unless my grep skills fail me

[21:53] <psch> 'the "lookaround" C</foo\Kbar/> becomes C¬´/foo <( bar )>'

[21:53] <psch> and yeah, that's definitely lacking, so i'm pretty sure a doc ticket would be appreciated

[21:53] *** bjz joined
[21:55] <babydrop> The code examples in this section and ones below it are really weird: https://docs.perl6.org/language/regexes#Replacing_literals

[21:55] <babydrop> May give an impression that it's how you're supposed to do replacements :/ 

[21:55] * babydrop would use a .subst in there instead of the dance with $_ and s///

[21:56] <lizmat> psch: https://github.com/perl6/doc/issues/1048

[21:56] <psch> lizmat++

[22:01] *** setty1 joined
[22:03] *** bjz left
[22:07] *** pmurias left
[22:08] *** cdg_ left
[22:12] *** andrzejku left
[22:24] *** mawkish left
[22:24] *** mawkish joined
[22:25] *** cdg joined
[22:29] *** ggoebel left
[22:30] <samcv> lizmat, would you mind mentioning that atom/github syntax highlighter has moved changed and to download the new plugin here https://atom.io/packages/language-perl6/

[22:30] <lizmat> samcv: will do

[22:30] <samcv> and it's now a perl6org github project, repo is here https://github.com/perl6/atom-language-perl6 (previous link was for atom package repo)

[22:31] <samcv> hah it's only been downloaded once so far :) not even i've downloaded it but then again no need to download it when you're releasing them lol

[22:31] <samcv> i'm sure plenty of people still have the old plugin

[22:34] * babydrop must be that 1 download

[22:34] <babydrop> wooo! Do I get a prize? :)

[22:34] *** mawkish left
[22:36] <samcv> yes :)

[22:36] *** kurahaupo__ left
[22:37] *** pmurias joined
[22:37] *** lucasb joined
[22:37] <MasterDuke> lizmat: if you're looking for filler, maybe mention that profile output can be SQL (useful for analyzing profiles that even the Qt version can't handle)? it happened ~two weeks ago, but don't think was in a weekly

[22:38] <lizmat> MasterDuke: good point, will do

[22:39] <lucasb> I can do has $!foo and method foo { $!foo } to expose a private attr

[22:39] <lucasb> is there someway I can say 'has $.foo is something' to have a reader accessor but forbid the named parameter in initialization?

[22:39] <babydrop> lucasb: forbid or ignore?

[22:40] <lucasb> forbid

[22:40] <babydrop> submethod BUILD (*%_) { %_ and die 'lulz nah' }

[22:40] <lucasb> well, ignoring would work too

[22:40] <babydrop> then just empty submethod

[22:40] <babydrop> That will remove all .new initialization though.

[22:41] <lucasb> I want to forbid one specific attribute, not all

[22:41] <babydrop> submethod BUILD (*%_) { %_<foo>:exists and die 'lulz nah' }

[22:41] <babydrop> Umm no

[22:41] <babydrop> Umm yes

[22:41] <babydrop> Hmm

[22:41] <lucasb> hmm

[22:42] <babydrop> lucasb: well, the above would work, but it'll also fail to initialize any params you *do* want

[22:42] <lucasb> I don't think so

[22:42] <babydrop> method new (*%_) { %_<foo>:exists and die 'lulz nah'; self.bless: %_ }

[22:43] <babydrop> m: class { has $.meow; submethod BUILD (*%_) { %_<foo>:exists and die 'lulz nah' } }.new(:42meow).meow.say

[22:43] <camelia> rakudo-moar 0c75e5: OUTPUT¬´(Any)‚ê§¬ª

[22:43] <babydrop> yup

[22:43] *** mawkish joined
[22:43] <babydrop> m: class { has $.meow; method new (*%_) { %_<foo>:exists and die 'lulz nah'; self.bless: %_ } }.new(:42meow).meow.say

[22:43] <camelia> rakudo-moar 0c75e5: OUTPUT¬´Too many positionals passed; expected 1 argument but got 2‚ê§  in method new at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:43] <lizmat> method new (*%_) { %_<foo>:delete; self.bless: %_ }  # just ignoring

[22:43] <babydrop> m: class { has $.meow; method new (*%_) { %_<foo>:exists and die 'lulz nah'; self.bless: |%_ } }.new(:42meow).meow.say

[22:43] <camelia> rakudo-moar 0c75e5: OUTPUT¬´42‚ê§¬ª

[22:44] <babydrop> m: class { has $.meow; method new (*%_) { %_<foo>:exists and die 'lulz nah'; self.bless: |%_ } }.new(:42meow, :45foo).meow.say

[22:44] <camelia> rakudo-moar 0c75e5: OUTPUT¬´lulz nah‚ê§  in method new at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:44] <babydrop> works

[22:45] *** labster left
[22:45] *** AlexDaniel joined
[22:45] <AlexDaniel> samcv: any chance of faster uninames? :)

[22:46] <samcv> heh

[22:46] <samcv> that would be nice...

[22:46] <samcv> i will see what i can do

[22:46] <samcv> hmm multi sub uniname(Int:D $code) { nqp::getuniname($code) }

[22:47] <samcv> looks like it cannot be optimized in rakudo, would have to be in nqp

[22:50] *** mawkish left
[22:50] *** mawkish joined
[22:51] <lucasb> thanks babydrop, lizmat

[22:52] <lucasb> m: class C { has $.a; has $.b; submethod TWEAK(*%_) { die 'nope' if %_<b>; $!b = 'my own value' } }; say C.new(a=>10)

[22:52] <camelia> rakudo-moar 0c75e5: OUTPUT¬´C.new(a => 10, b => "my own value")‚ê§¬ª

[22:52] <lucasb> m: class C { has $.a; has $.b; submethod TWEAK(*%_) { die 'nope' if %_<b>; $!b = 'my own value' } }; say C.new(a=>10,b=>20)

[22:52] <camelia> rakudo-moar 0c75e5: OUTPUT¬´nope‚ê§  in submethod TWEAK at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:52] <lucasb> ^^ what about this, is it an acceptable way too?

[22:54] *** mawkish left
[22:54] *** mawkish joined
[22:55] <AlexDaniel> m: say :10<4_x> 

[22:55] <camelia> rakudo-moar 0c75e5: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot convert string to number: malformed base-10 number in '034‚èè5_x' (indicated by ‚èè)‚ê§at <tmp>:1‚ê§------> 3say :10<4_x>7‚èè5<EOL>‚ê§¬ª

[22:55] <AlexDaniel> .oO( ‚Ä¶ ‚Ä¶ ‚Ä¶ nnnooooooooooooooooo )

[22:55] *** rindolf left
[22:57] <samcv> AlexDaniel, uninames can get all from (0..0x1FFFF) in 0.67 seconds

[22:57] <samcv> so i think the slow part about unicodable is the searching through the text

[22:57] <babydrop> lucasb: sort of. This version will set $.foo, and then you'd die and the default is distanced away from the attribute. So I wouldn't use it in case I ever added some logic that does something when $.foo is set to something 

[22:57] <AlexDaniel> samcv: oh. Any chance of faster searching? :D

[22:58] <AlexDaniel> well, I should be using index instead of a regex, I guess

[22:58] <AlexDaniel> ah, it's .contains

[22:58] <AlexDaniel> okay, should be fine

[22:58] <AlexDaniel> ‚Ä¶ but with a junction

[23:01] <samcv> u: penguin

[23:02] <unicodable6> samcv, U+1F427 PENGUIN [So] (üêß)

[23:03] *** rurban2 left
[23:04] <samcv> AlexDaniel, it's slow because you're using grep

[23:05] <samcv> i can search through all codepoints 10 times in 1.35 seconds

[23:05] <samcv> with .contains, searching for a single word

[23:05] <samcv> grep makes it take 45 seconds...

[23:05] <samcv> doing the exact same thing. (no junction)

[23:06] <babydrop> unicodable6: source

[23:06] <unicodable6> babydrop, https://github.com/perl6/whateverable

[23:06] <samcv> for (0..0x1FFFF) { grep({ $_.uniname.contains('PENGUIN')}) # 10 times => 45 secs

[23:06] <samcv> for (0..0x1FFFF) {

[23:06] <samcv>             (uniname $_).contains('PENGUIN');

[23:06] <samcv>         }

[23:07] <samcv> then 1.35 secs doing that 10 times for all codepoints

[23:07] <babydrop> that grep looks wrong.

[23:08] <babydrop> You're doing the same contains thing in both versions, but in grep version you're calling grep 1FFFF times

[23:09] <babydrop> 0x20000 times rather

[23:10] <MasterDuke> the actual code is: for (0..0x1FFFF).grep({ (!@words or uniname($_).contains(@words.all)) and (!@props or uniprop($_) eq @props.any) }) {

[23:10] <babydrop> m: (^0x110000).grep(*.uniname.contains: 'PENGUIN').say; say time now - INIT now

[23:10] <camelia> rakudo-moar 0c75e5: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3iname.contains: 'PENGUIN').say; say time7‚èè5 now - INIT now‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        stateme‚Ä¶¬ª

[23:10] <babydrop> m: (^0x110000).grep(*.uniname.contains: 'PENGUIN').say; say now - INIT now

[23:10] <camelia> rakudo-moar 0c75e5: OUTPUT¬´(128039)‚ê§2.5682320‚ê§¬ª

[23:13] <samcv> ah that is probably true

[23:16] <MasterDuke> m: my @props; my @words = <PENGUIN>; my @a; for (0..0x1FFFF).grep({ (!@words or uniname($_).contains(@words.all)) and (!@props or uniprop($_) eq @props.any) }) { .uniname.say }; say now - INIT now

[23:16] <camelia> rakudo-moar 0c75e5: OUTPUT¬´PENGUIN‚ê§3.7370324‚ê§¬ª

[23:18] <AlexDaniel> my @props; my @words = <PENGUIN>; my @a; for (0..0x1FFFF).grep({ uniname($_).contains(@words[0]) and (!@props or uniprop($_) eq @props.any) }) { .uniname.say }; say now - INIT now

[23:18] *** BenGoldberg joined
[23:18] <AlexDaniel> m: my @props; my @words = <PENGUIN>; my @a; for (0..0x1FFFF).grep({ uniname($_).contains(@words[0]) and (!@props or uniprop($_) eq @props.any) }) { .uniname.say }; say now - INIT now

[23:18] <camelia> rakudo-moar 0c75e5: OUTPUT¬´PENGUIN‚ê§0.30956292‚ê§¬ª

[23:18] <AlexDaniel> :|

[23:18] <AlexDaniel> m: my @props; my @words = <PENGUIN>; my @a; for (0..0x1FFFF).grep({ (!@words or uniname($_).contains(@words[0])) and (!@props or uniprop($_) eq @props.any) }) { .uniname.say }; say now - INIT now

[23:18] <camelia> rakudo-moar 0c75e5: OUTPUT¬´PENGUIN‚ê§0.4982935‚ê§¬ª

[23:19] <AlexDaniel> m: my @props; my @words = <PENGUIN>; my @a; for (0..0x1FFFF).grep({ (!@words or uniname($_).contains(@words == 1 ?? @words[0] !! @words.all)) and (!@props or uniprop($_) eq @props.any) }) { .uniname.say }; say now - INIT now

[23:19] <camelia> rakudo-moar 0c75e5: OUTPUT¬´PENGUIN‚ê§0.69428024‚ê§¬ª

[23:20] <MasterDuke> m: my @props; my @words = <GUN LAGAR>; my @a; for (0..0x1FFFF).grep({ (!@words or uniname($_).contains(@words == 1 ?? @words[0] !! @words.all)) and (!@props or uniprop($_) eq @props.any) }) { .uniname.say }; say now - INIT now

[23:20] <samcv> the junctions are actually making it slow

[23:20] <camelia> rakudo-moar 0c75e5: OUTPUT¬´CUNEIFORM SIGN A TIMES LAGAR GUNU‚ê§CUNEIFORM SIGN LAGAR GUNU‚ê§CUNEIFORM SIGN LAGAR GUNU OVER LAGAR GUNU SHE‚ê§5.6568068‚ê§¬ª

[23:20] <timotimo> yeah, junctions aren't very fast

[23:20] <samcv> m: my @props; my @words = <PENGUIN>; my @a; for (0..0x1FFFF) { !@words or uniname($_).contains(@words)) and (!@props or uniprop($_) eq @props.any) }; say now - INIT now

[23:20] <camelia> rakudo-moar 0c75e5: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3 !@words or uniname($_).contains(@words)7‚èè5) and (!@props or uniprop($_) eq @props.‚ê§    expecting any of:‚ê§        statement end‚ê§        statement modifier‚ê§‚Ä¶¬ª

[23:20] *** BenGoldberg left
[23:20] <samcv> m: my @props; my @words = <PENGUIN>; my @a; for (0..0x1FFFF) { say "match" if !@words or uniname($_).contains(@words) and (!@props or uniprop($_) eq @props.any) }; say now - INIT now

[23:20] <camelia> rakudo-moar 0c75e5: OUTPUT¬´match‚ê§1.18019193‚ê§¬ª

[23:21] <timotimo> if you .contains(@words), you'll get a stringification of @words as the needle

[23:21] <AlexDaniel> well, that's a bit different, isn't it?

[23:21] <samcv> yeah

[23:22] *** pmurias left
[23:22] *** BenGoldberg joined
[23:23] <AlexDaniel> m: my @props; my @words = <PENGUIN>; my @a; for (0..0x1FFFF).grep({ (!@words or uniname($_).match(/@words/)) and (!@props or uniprop($_) eq @props.any) }) { .uniname.say }; say now - INIT now

[23:23] <camelia> rakudo-moar 0c75e5: OUTPUT¬´(timeout)¬ª

[23:23] <MasterDuke> a profile shows 25% exclusive in '<anon> (gen/moar/BOOTSTRAP.nqp:2167)' and 15% exclusive in 'contains (SETTING::src/core/Cool.pm:146)' 

[23:23] <AlexDaniel> :-|

[23:23] <MasterDuke> and the BOOTSTRAP code is: Routine.HOW.add_method(Routine, 'find_best_dispatchee', nqp::getstaticcode(sub ($self, $capture, int $many = 0) {

[23:24] <babydrop> m: use MONKEY; for (my $b = Bag.new(<a b c>)).^attributes { next unless .name eq '$!WHICH'; say nqp::attrinited($b,Bag,'$!WHICH') }

[23:24] <camelia> rakudo-moar 0c75e5: OUTPUT¬´Potential difficulties:‚ê§    Redeclaration of symbol '$b'‚ê§    at <tmp>:1‚ê§    ------> 3use MONKEY; for (my $b7‚èè5 = Bag.new(<a b c>)).^attributes { next ‚ê§P6opaque: no such attribute '$!WHICH' in type Bag when trying to check if it's initialized‚Ä¶¬ª

[23:24] <babydrop> Redeclaration?

[23:24] *** RabidGravy left
[23:24] <BenGoldberg> m: my @p <== grep { .contains: "PENGUIN" } <== map { .uniname } <== 0..0x1FFFF; say now - INIT now;

[23:24] <camelia> rakudo-moar 0c75e5: OUTPUT¬´0.4613726‚ê§¬ª

[23:24] <timotimo> huh, that's weird

[23:25] <AlexDaniel> BenGoldberg: yeah, that's great, now with an array!

[23:25] <timotimo> i wonder if it explodes because of code we have to point out that for (my $foo), @array { } or whatever that syntax is in perl5 ... is in perl5

[23:26] *** BenGoldberg left
[23:26] *** BenGoldberg joined
[23:28] *** god is now known as nchambers

[23:29] <babydrop> for my $foo ( @array ) { ... }

[23:33] *** Ben_Goldberg joined
[23:34] *** BenGoldberg left
[23:35] *** BenGoldberg joined
[23:35] <BenGoldberg> m: my @p := grep { .contains: "PENGUIN" } <== map { .uniname } <== 0..0x1FFFF; say now - INIT now;

[23:35] <camelia> rakudo-moar 0c75e5: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Sorry, do not know how to handle this case of a feed operator yet.‚ê§at <tmp>:1‚ê§------> 3N" } <== map { .uniname } <== 0..0x1FFFF7‚èè5; say now - INIT now;‚ê§¬ª

[23:36] <BenGoldberg> m: my @p := grep { .contains: "PENGUIN" }, map { .uniname }, 0..0x1FFFF; say now - INIT now;

[23:36] <camelia> rakudo-moar 0c75e5: OUTPUT¬´Type check failed in binding; expected Positional but got Seq (("PENGUIN",).Seq)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:38] *** Ben_Goldberg left
[23:38] *** dmaestro left
[23:40] <BenGoldberg> m: my @foo := grep True, ^5;

[23:40] <camelia> rakudo-moar 0c75e5: OUTPUT¬´Potential difficulties:‚ê§    Smartmatch against True always matches; if you mean to test the topic for truthiness, use :so or *.so or ?* instead‚ê§    at <tmp>:1‚ê§    ------> 3my @foo := grep7‚èè5 True, ^5;‚ê§Cannot use Bool as Matcher with 'grep'.  ‚Ä¶¬ª

[23:41] <BenGoldberg> m: my @foo := grep :so, ^5;

[23:41] <camelia> rakudo-moar 0c75e5: OUTPUT¬´Unexpected adverb 'so' passed to grep on List‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:41] <BenGoldberg> m: my @foo := grep *.so, ^5;

[23:41] <camelia> rakudo-moar 0c75e5: OUTPUT¬´Type check failed in binding; expected Positional but got Seq ((1, 2, 3, 4).Seq)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:42] <BenGoldberg> m: say Seq ~~ PositionalBindFailover;

[23:42] <camelia> rakudo-moar 0c75e5: OUTPUT¬´True‚ê§¬ª

[23:43] * BenGoldberg wonders what he's missing.

[23:44] <AlexDaniel> m: my @props; my @words = <PENGUIN>; my $x = -> $y { my $out = False; for @words { $out = True if $x.contains($_) }; $out }; my @a; for (0..0x1FFFF).grep({ (!@words or $x(uniname($_))) and (!@props or uniprop($_) eq @props.any) }) { .uniname.say }; say now - INIT now

[23:44] <camelia> rakudo-moar 0c75e5: OUTPUT¬´No such method 'contains' for invocant of type 'Block'‚ê§  in block  at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:44] <AlexDaniel> m: my @props; my @words = <PENGUIN>; my $x = -> $y { my $out = False; for @words { $out = True if $y.contains($_) }; $out }; my @a; for (0..0x1FFFF).grep({ (!@words or $x(uniname($_))) and (!@props or uniprop($_) eq @props.any) }) { .uniname.say }; say now - INIT now

[23:44] <camelia> rakudo-moar 0c75e5: OUTPUT¬´PENGUIN‚ê§2.7838986‚ê§¬ª

[23:44] *** nchambers left
[23:44] <AlexDaniel> well, that looks faster /o\

[23:44] *** Vynce left
[23:45] <MasterDuke> m: my @props; my @words = <GUN LAGAR>; my $x = -> $y { my $out = False; for @words { $out = True if $y.contains($_) }; $out }; my @a; for (0..0x1FFFF).grep({ (!@words or $x(uniname($_))) and (!@props or uniprop($_) eq @props.any) }) { .uniname.say }; say now - INIT now

[23:45] <camelia> rakudo-moar 0c75e5: OUTPUT¬´BATAK LETTER SIMALUNGUN A‚ê§BATAK LETTER SIMALUNGUN HA‚ê§BATAK LETTER SIMALUNGUN PA‚ê§BATAK LETTER SIMALUNGUN WA‚ê§BATAK LETTER SIMALUNGUN GA‚ê§BATAK LETTER SIMALUNGUN RA‚ê§BATAK LETTER SIMALUNGUN MA‚ê§BATAK LETTER SIMALUNGUN SA‚ê§BATAK LETTER SIMALUNGUN Y‚Ä¶¬ª

[23:45] <BenGoldberg> AlexDaniel, What exactly are you trying to do, anyway?

[23:46] <AlexDaniel> BenGoldberg: not sure if I'm trying to do anything :)

[23:46] <AlexDaniel> BenGoldberg: basically, this line is from unicodable

[23:46] <MasterDuke> AlexDaniel: different results for an array

[23:46] <AlexDaniel> now there are of course better ways to do it

[23:46] <AlexDaniel> (like, don't search sequentially and don't search in perl¬†6‚Ä¶)

[23:46] <AlexDaniel> but I'm feeling kinda lazy so perhaps we can get rakudo faster? ;)

[23:46] *** mohae left
[23:47] <babydrop> AlexDaniel: well volunteered!

[23:48] *** mohae joined
[23:49] <AlexDaniel> m: my @props; my @words = <PENGUIN>; my @a; for (0..0x1FFFF).grep(-> $z { (!@words or @words.first({uniname($z).contains($_)})) and (!@props or uniprop($_) eq @props.any) }) { .uniname.say }; say now - INIT now

[23:49] <camelia> rakudo-moar 0c75e5: OUTPUT¬´PENGUIN‚ê§2.17332158‚ê§¬ª

[23:49] <AlexDaniel> well, that's some progress, yea?

[23:50] <MasterDuke> different results for an array again, though

[23:51] <AlexDaniel> hmm, what's different?

[23:51] <MasterDuke> m: my @props; my @words = <GUN LAGAR>; my @a; for (0..0x1FFFF).grep(-> $z { (!@words or @words.first({uniname($z).contains($_)})) and (!@props or uniprop($_) eq @props.any) }) { .uniname.say }; say now - INIT now

[23:51] *** Ben_Goldberg joined
[23:51] <camelia> rakudo-moar 0c75e5: OUTPUT¬´BATAK LETTER SIMALUNGUN A‚ê§BATAK LETTER SIMALUNGUN HA‚ê§BATAK LETTER SIMALUNGUN PA‚ê§BATAK LETTER SIMALUNGUN WA‚ê§BATAK LETTER SIMALUNGUN GA‚ê§BATAK LETTER SIMALUNGUN RA‚ê§BATAK LETTER SIMALUNGUN MA‚ê§BATAK LETTER SIMALUNGUN SA‚ê§BATAK LETTER SIMALUNGUN Y‚Ä¶¬ª

[23:51] *** BenGoldberg left
[23:51] *** Ben_Goldberg is now known as BenGoldberg

[23:51] <BenGoldberg> m: my $props = none; my $words = any <GUN LAGAR>; my $results = (^0x20000).grep { .uniprops.contains($props) or .uninames.contains($names) }; say now - INIT now;

[23:51] <camelia> rakudo-moar 0c75e5: OUTPUT¬´5===SORRY!5===‚ê§Function "none" may not be called without arguments (please use () or whitespace to denote arguments, or &none to refer to the function as a noun, or use .none if you meant $_)‚ê§at <tmp>:1‚ê§------> 3my $props = none7‚èè5; my $word‚Ä¶¬ª

[23:51] <MasterDuke> m: my @props; my @words = <GUN LAGAR>; my @a; for (0..0x1FFFF).grep({ (!@words or uniname($_).contains(@words == 1 ?? @words[0] !! @words.all)) and (!@props or uniprop($_) eq @props.any) }) { .uniname.say }; say now - INIT now

[23:51] <camelia> rakudo-moar 0c75e5: OUTPUT¬´CUNEIFORM SIGN A TIMES LAGAR GUNU‚ê§CUNEIFORM SIGN LAGAR GUNU‚ê§CUNEIFORM SIGN LAGAR GUNU OVER LAGAR GUNU SHE‚ê§5.471930‚ê§¬ª

[23:51] <BenGoldberg> m: my $props = none(); my $words = any <GUN LAGAR>; my $results = (^0x20000).grep { .uniprops.contains($props) or .uninames.contains($names) }; say now - INIT now;

[23:51] <camelia> rakudo-moar 0c75e5: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unexpected block in infix position (missing statement control word before the expression?)‚ê§at <tmp>:1‚ê§------> 3UN LAGAR>; my $results = (^0x20000).grep7‚èè5 { .uniprops.contains($props) or .uninam‚ê§‚Ä¶¬ª

[23:52] <BenGoldberg> m: my $props = none(); my $words = any <GUN LAGAR>; my $results = (^0x20000).grep: { .uniprops.contains($props) or .uninames.contains($names) }; say now - INIT now;

[23:52] <camelia> rakudo-moar 0c75e5: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$names' is not declared‚ê§at <tmp>:1‚ê§------> 3.contains($props) or .uninames.contains(7‚èè5$names) }; say now - INIT now;‚ê§¬ª

[23:52] <AlexDaniel> MasterDuke: wait, why is there a difference?

[23:52] <BenGoldberg> m: my $props = none(); my $words = any <GUN LAGAR>; my $results = (^0x20000).grep: { .uniprops.contains($props) or .uninames.contains($words) }; say now - INIT now;

[23:52] <camelia> rakudo-moar 0c75e5: OUTPUT¬´0.0020322‚ê§¬ª

[23:52] <BenGoldberg> How's that for fast!

[23:52] <MasterDuke> different number of results

[23:52] *** lukiramu left
[23:52] <AlexDaniel> MasterDuke: that I see, but why?

[23:53] <BenGoldberg> m: my $props = none(); my $words = any <GUN LAGAR>; my $results = (^0x20000).grep: { .uniprops.contains($props) or .uninames.contains($words) }; say +$results;

[23:53] <camelia> rakudo-moar 0c75e5: OUTPUT¬´Cannot resolve caller uniprops(Int); none of these signatures match:‚ê§    (Str:D $str, Stringy:D $propname = "General_Category")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:53] <BenGoldberg> m: my $props = none(); my $words = any <GUN LAGAR>; my $results = (^0x20000).grep: { .uniprops.contains($props) or .uninames.contains($words) }; say +@$results;

[23:53] <camelia> rakudo-moar 0c75e5: OUTPUT¬´Cannot resolve caller uniprops(Int); none of these signatures match:‚ê§    (Str:D $str, Stringy:D $propname = "General_Category")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:53] <BenGoldberg> m: my $props = none(); my $words = any <GUN LAGAR>; my $results = (^0x20000).grep: { .uniprops.contains($props) or .uninames.contains($words) }; say $results.elems;

[23:53] <camelia> rakudo-moar 0c75e5: OUTPUT¬´Cannot resolve caller uniprops(Int); none of these signatures match:‚ê§    (Str:D $str, Stringy:D $propname = "General_Category")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:53] <MasterDuke> AlexDaniel: that i don't know

[23:54] <AlexDaniel> eval: my @props; my @words = <GUN LAGAR>; my @a; for (0..0x1FFFF).grep({ (!@words or uniname($_).contains(@words == 1 ?? @words[0] !! @words.all)) and (!@props or uniprop($_) eq @props.any) }) { .uniname.say }; say now - INIT now

[23:54] <evalable6> AlexDaniel, rakudo-moar 0c75e5d: OUTPUT¬´CUNEIFORM SIGN A TIMES LAGAR GUNU‚ê§CUNEIFORM SIGN LAGAR GUNU‚ê§CUNEIFORM SIGN LAGAR GUNU OVER LAGAR GUNU SHE‚ê§4.8927714¬ª

[23:54] <AlexDaniel> eval: my @props; my @words = <GUN LAGAR>; my @a; for (0..0x1FFFF).grep(-> $z { (!@words or @words.first({uniname($z).contains($_)})) and (!@props or uniprop($_) eq @props.any) }) { .uniname.say }; say now - INIT now

[23:54] <evalable6> AlexDaniel, rakudo-moar 0c75e5d: OUTPUT¬´BATAK LETTER SIMALUNGUN A‚ê§BATAK LETTER SIMALUNGUN HA‚ê§BATAK LETTER SIMALUNGUN PA‚ê§BATAK LETTER S‚Ä¶¬ª

[23:54] <evalable6> AlexDaniel, Full output: https://gist.github.com/729852f13bc9fb708116ff3cbef7b9a7

[23:55] <AlexDaniel> MasterDuke: ahhhhhhhhhhhhhhhhhhh it should be .all

[23:55] <AlexDaniel> so .first is out

[23:55] <timotimo> no, you can .first({ not ... })

[23:56] <AlexDaniel> m: my @props; my @words = <PENGUIN>; my @a; for (0..0x1FFFF).grep(-> $z { (!@words or !@words.first({ not uniname($z).contains($_)})) and (!@props or @props.first({uniprop($z) eq $_})) }) { .uniname.say }; say now - INIT now

[23:56] <camelia> rakudo-moar 0c75e5: OUTPUT¬´PENGUIN‚ê§2.366784‚ê§¬ª

[23:56] *** Actualeyes joined
