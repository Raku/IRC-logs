[00:00] <timotimo> only a little bit of post-processing needed

[00:00] <timotimo> manually

[00:00] <timotimo> our PDF module on the ecosystem is very, very bare, AFAIK

[00:00] <timotimo> i.e. wouldn't easily let you do what you want

[00:07] *** kid51 joined
[00:08] <AlexDaniel> is ｢hyper｣ completely broken? “The order of elements is preserved.” but that's not what I am getting

[00:09] <AlexDaniel> ah, yes. And there is a bug report… submitted by me…

[00:09] <AlexDaniel> https://rt.perl.org/Public/Bug/Display.html?id=127099

[00:10] <azawawi> Herby_: as an initial step, Excel accepts CSV as a format so you can use it for prototyping until you can find out how to ::WriteExcel

[00:11] <leont> Inline::Perl5 to the rescue? ;-)

[00:13] <Herby_> azawai: hadn't even considered that...

[00:13] <Herby_> hmm

[00:14] *** vendethiel left
[00:14] <Herby_> leont: i haven't tried using that yet... guess now is as good as time as ever

[00:25] *** cdg left
[00:35] *** [Sno] left
[00:43] *** cpage_ left
[00:44] <ely-se> interesting

[00:45] *** cpage_ joined
[00:54] *** cpage_ left
[00:56] *** yeahnoob joined
[00:57] *** raiph left
[00:59] <DrForr> Guh, I think I'm going to have to abandon Perlmonks after just a few weeks if this nonsense keeps up.

[01:01] *** raiph joined
[01:01] <DrForr> Someone over there thinks the only way to get Perl and Scheme to share variables is to write a Scheme on top of MoarVM and rewrite the Perl 6 runtime, instead of just using the built-in Scheme callback methods that he didn't bother reading about.

[01:06] <timotimo> i didn't know there was any reason whatsoever to spend any time whatsoever reading or even writing to perlmonks

[01:08] <geekosaur> ^

[01:10] <timotimo> my recollection of perlmonks was "anonymous monk" users calling perl6-involved people names, spreading half-truths blown way out of proportion, as well as some personal attacks and other things like that

[01:12] <Juerd> I used to spend a lot of time at perlmonks, really, really loved doing so.

[01:12] <Juerd> But that was a long time ago.

[01:12] <geekosaur> the name "monk" is apt. people who've been living in caves away from the world for years, with odd ideas of how things work

[01:12] <geekosaur> although plato's cave might be even more apt

[01:13] <Juerd> The site no longer really serves a purpose now that we have stackoverflow :)

[01:13] <Juerd> In fact, for a programming language's visibility/popularity it's quite important that questions are asked there, instead of at perlmonks.

[01:13] <Juerd> (or some other niche site)

[01:21] <timotimo> mhm

[01:22] *** protium joined
[01:22] *** protium left
[01:25] *** BenGoldberg left
[01:28] *** zakharyas joined
[01:32] *** sno joined
[01:39] *** cpage_ joined
[01:39] *** kanishka left
[01:42] *** Perleone_ left
[01:43] *** Perleone joined
[01:47] *** addison_ left
[01:51] *** Perleone left
[01:52] *** Perleone joined
[01:56] *** Perleone left
[01:57] *** Perleone joined
[01:58] *** addison joined
[01:58] *** _Gustaf__ joined
[01:58] *** _Gustaf_ left
[02:01] *** Actualeyes joined
[02:02] *** Perleone left
[02:05] *** yqt left
[02:05] *** Perleone joined
[02:11] *** leont left
[02:15] *** Perleone left
[02:15] *** xpen joined
[02:17] *** Perleone joined
[02:31] *** abaugher left
[02:32] *** _Gustaf_ joined
[02:32] *** _Gustaf__ left
[02:32] *** abaugher joined
[02:41] *** molaf_ joined
[02:42] *** molaf left
[02:43] *** ely-se left
[02:44] *** raiph left
[02:44] <Herby_> dumb regex question that's beyond my knowledge... Scenario is this: if I have a line that starts with "a. ", then I want to capture the line preceding it, since I know that line contained the question

[02:44] <Herby_> any ideas?

[02:45] <konobi> msgx

[02:45] <Herby_> this is all in a text file, sorry

[02:45] <konobi> Herby_: positive lookahead assertion

[02:46] <Herby_> *blank stare*

[02:46] <konobi> Herby_: docs ftw!

[02:46] <Hotkeys> http://docs.perl6.org/language/regexes#Lookahead_assertions

[02:46] <Hotkeys> Herby_: 

[02:47] <Herby_> hmmm!

[02:47] <Herby_> let me take a peek!

[02:48] <Herby_> m: say "foobar" ~~ rx{ foo <?before bar> };

[02:48] <camelia> rakudo-moar a5fe34: OUTPUT«｢foo｣␤»

[02:49] <Herby_> m: say "foo\nbar" ~~ rx{ foo <?before \nbar> };

[02:49] <camelia> rakudo-moar a5fe34: OUTPUT«｢foo｣␤»

[02:51] <Herby_> m: say "1. question here\n a. anAnswerHere" ~~ rx{ .+ <?before \n> };

[02:51] <camelia> rakudo-moar a5fe34: OUTPUT«｢1. question here｣␤»

[02:51] <Herby_> i might be onto something :)

[02:51] <Herby_> thanks Hotkeys , konobi

[02:53] <Hotkeys> m: "1. question here\n a. anAnswerHere" ~~ /^^ \N* <?before \n\s*'a. '>/

[02:53] <camelia> rakudo-moar a5fe34: ( no output )

[02:53] <Hotkeys> rude

[02:53] <Hotkeys> m: say "1. question here\n a. anAnswerHere" ~~ /^^ \N* <?before \n\s*'a. '>/

[02:53] <camelia> rakudo-moar a5fe34: OUTPUT«｢1. question here｣␤»

[02:53] <Hotkeys> Need to remember to include the 'a. ' if that's what you looking for Herby_ 

[02:54] *** kid51 left
[02:54] *** raiph joined
[02:54] <Hotkeys> m: "0. where's the soap?\n a. no soap, radio!\n1. question here\n a. anAnswerHere" ~~ m:g/^^ \N* <?before \n\s*'a. '>/

[02:55] <camelia> rakudo-moar a5fe34: ( no output )

[02:55] <Hotkeys> m: say "0. where's the soap?\n a. no soap, radio!\n1. question here\n a. anAnswerHere" ~~ m:g/^^ \N* <?before \n\s*'a. '>/

[02:55] <camelia> rakudo-moar a5fe34: OUTPUT«(｢0. where's the soap?｣ ｢1. question here｣)␤»

[02:55] <Herby_> good point, not sure why i left off the 'a. ' thanks

[02:55] <Herby_> whats the deal with the \N*?

[02:55] <Herby_> my regex ex in general is very weak

[02:55] <Herby_> trying to work on it

[02:56] <skids> Herby_: \N is not any sort of newline

[02:56] <skids> Like \D is "not a number"

[02:56] <Herby_> ah ok

[02:57] <awwaiid> If anyone wants to translate some Perl 5 async examples into Perl 6 that would be lovely -- https://github.com/plicease/dc.pm-async -- tomorrow we're having a perlmonger meetup. I was going to do some translating but have so far failed and have to go offline for the evening. so... donations welcome :)

[02:57] <Herby_> m: "random crap thats not a question\n 0. where's the soap?\n a. no soap, radio!\n1. question here\n a. anAnswerHere" ~~ m:g/^^ \N* <?before \n\s*'a. '>/

[02:57] <camelia> rakudo-moar a5fe34: ( no output )

[02:58] <Herby_> ?

[02:58] <Herby_> m: "random crap thats not a question\n0. where's the soap?\n a. no soap, radio!\n1. question here\n a. anAnswerHere" ~~ m:g/^^ \N* <?before \n\s*'a. '>/

[02:58] <camelia> rakudo-moar a5fe34: ( no output )

[02:58] <Herby_> what am I missing here? 

[03:00] <Hotkeys> hmm

[03:00] <mspo> Herby_: camelia isn't the repl; you need a say ?

[03:00] <Juerd> Herby_: Output... :)

[03:00] <Hotkeys> oh yeah

[03:00] <Herby_> ?

[03:01] <Herby_> doh

[03:01] <Hotkeys> you have to put 'say' before that

[03:01] <Herby_> m: say "random crap thats not a question\n0. where's the soap?\n a. no soap, radio!\n1. question here\n a. anAnswerHere" ~~ m:g/^^ \N* <?before \n\s*'a. '>/

[03:01] <camelia> rakudo-moar a5fe34: OUTPUT«(｢0. where's the soap?｣ ｢1. question here｣)␤»

[03:01] <Herby_> man, you guys are some geniuses 

[03:01] <Herby_> works like a charm

[03:01] <Hotkeys> lol

[03:01] <Herby_> let me try it on my 500 page mess

[03:02] <Juerd> Wouldn't you want \N+ instead of \N* ?

[03:03] <Herby_> m: say "random crap thats not a question\n0. where's the soap?\n a. no soap, radio!\n1. question here\n a. anAnswerHere" ~~ m:g/^^ \N+ <?before \n\s*'a. '>/

[03:03] <camelia> rakudo-moar a5fe34: OUTPUT«(｢0. where's the soap?｣ ｢1. question here｣)␤»

[03:04] <Herby_> Juerd, why do you say that?

[03:04] <Herby_> for my own knowledge

[03:05] <dalek> rakudo/2016.01-preparation: 6384b1e | coke++ | tools/build/NQP_REVISION:

[03:05] <dalek> rakudo/2016.01-preparation: now for reals.

[03:05] <dalek> rakudo/2016.01-preparation: review: https://github.com/rakudo/rakudo/commit/6384b1e69f

[03:08] <[Coke]> .

[03:09] <[Coke]> cutting compiler releases now.

[03:09] <skids> [Coke]++

[03:09] <geekosaur> Herby_, \N* matches the empty string

[03:09] <[Coke]> I suspect we'll have an R* in the next day or two. it was really just waiting for a good tagged compiler release.

[03:09] *** llfourn_ joined
[03:09] <Herby_> geekosaur: thanks that makes sense

[03:10] *** azawawi left
[03:11] <[Coke]> (stackoverflow) (meta) me votes on the perl vs. perl6 tags question...

[03:12] *** llfourn left
[03:12] *** addison left
[03:13] <dalek> rakudo/2016.01-preparation: f2b8c74 | coke++ | docs/release_guide.pod:

[03:13] <dalek> rakudo/2016.01-preparation: actual release date

[03:13] <dalek> rakudo/2016.01-preparation: review: https://github.com/rakudo/rakudo/commit/f2b8c74cf2

[03:13] <dalek> rakudo/2016.01-preparation: 26eef79 | coke++ | docs/release_guide.pod:

[03:13] <dalek> rakudo/2016.01-preparation: update copyright

[03:13] <dalek> rakudo/2016.01-preparation: review: https://github.com/rakudo/rakudo/commit/26eef7992a

[03:17] <[Coke]> https://twitter.com/henryhoffman/status/694184106440200192

[03:18] <[Coke]> (git humor)

[03:24] *** vendethiel joined
[03:24] *** wamba left
[03:24] <Herby_> ok, i think i just about got this licked. On the above regex, I'm capturing the questions just fine.  How do I go about splitting the captures up?

[03:25] <dalek> rakudo/2016.01-preparation: 81a0494 | coke++ | docs/announce/2016.01.md:

[03:25] <dalek> rakudo/2016.01-preparation: moar specific google

[03:25] <dalek> rakudo/2016.01-preparation: review: https://github.com/rakudo/rakudo/commit/81a0494a72

[03:25] <Herby_> rather...I'm spurting the questions into a text file

[03:25] <Herby_> but its one continuous string

[03:25] <Herby_> i'm looking at the regex docs but i'm not sure what I need

[03:25] <Herby_> i'd like a newline between each captured question

[03:27] * [Coke] blugged: https://perl6advent.wordpress.com/2016/02/02/christmas-announcement-two/

[03:28] <Herby_> very cool, Coke!

[03:29] <mspo> Herby_: you can probably print out $/ stuff

[03:30] <tony-o_>     # | Plan // Pass | File Name

[03:30] <tony-o_> [✗] 1 | 0    //    0 | ../perl6-xml-query/t/basic.t

[03:30] <tony-o_> Test #1 - output

[03:30] <tony-o_>    The spawned process exited unsuccessfully (exit code: 1)

[03:30] <tony-o_>    ===SORRY!===

[03:30] <tony-o_>    Could not find XML::Query in:

[03:30] <tony-o_> oops, sorry #perl6

[03:31] <Herby_> mspo: not positive what you mean

[03:32] <tony-o_> [Coke]++

[03:33] *** noganex joined
[03:33] <mspo> Herby_: when you capture stuff you can find it in $/

[03:33] <Herby_> m:g/^^ \N+ <?before \n\s*'a. '>

[03:33] <[Coke]> gotta go give someone a ride. Will finish the rakudo release when I return. (building & testing the tarball now)

[03:33] <Herby_> the :g throws me off, on how thats handled

[03:33] <tony-o_> or you can use $/ as a hash

[03:34] <tony-o_> m: "hello world" ~~ / $<preceeds>=. 'll' /; $/<preceeds>.Str.say;

[03:34] <camelia> rakudo-moar a5fe34: OUTPUT«e␤»

[03:35] *** noganex_ left
[03:37] <[Coke]> http://news.perlfoundation.org/2016/02/ian-hague-perl-6-grant-applica.html - comment if you want to see pmurias get a grant to make a lot of headway on rakudo-js.

[03:37] <Herby_> tony-_, thanks

[03:40] *** geraud left
[03:41] <Herby_> I've made a ton of progress on this tonight, thanks everyone :)

[03:44] *** geraud joined
[03:45] *** MadcapJake left
[03:47] *** vendethiel left
[03:49] <AlexDaniel> geez, so how do I get the order right when using hyper?

[03:49] <AlexDaniel> besides fixing the issue

[03:54] <AlexDaniel> m: my @result = ^1000 .hyper.map: * + 10; say @result ~~ @result.sort

[03:54] <camelia> rakudo-moar a5fe34: OUTPUT«True␤»

[03:54] <AlexDaniel> ohhh

[03:54] <AlexDaniel> sounds like I just have to rebuild…

[03:55] *** sortiz joined
[04:00] *** Actualeyes left
[04:03] <timotimo> Herby_: i tend to have my programs that do processing of "mostly line-based" stuff in a big for loop and keep some state from one line to the next; that'd make the "get the previous line when a line matches something specific" doable with "more than just" regex

[04:07] <mspo> Seq.from-loop?

[04:07] <mspo> or just an array/stack

[04:14] *** Actualeyes joined
[04:15] <sevvie> github doesn't like the idea of .t being a perl6 file.

[04:15] <Hotkeys> lol

[04:15] <Hotkeys> time to switch to .t6

[04:17] <jdv79> prove will find .t files but it won't look for .t6 last time i tried

[04:26] *** molaf__ joined
[04:26] *** molaf_ left
[04:29] *** _Gustaf_ left
[04:31] <sevvie> aye, noticed that.

[04:40] * [Coke] is back. finishing up release now..

[04:41] <[Coke]> .seen mojca

[04:41] <yoleaux> I saw mojca 4 Jan 2016 19:30Z in #perl6: <mojca> but at least it kind-of-works for now

[04:44] <[Coke]> going to cut over the wikipedia page from "preview release" to "release"

[04:46] *** xpen left
[04:46] <[Coke]> updated.

[04:46] <[Coke]> sorry, I should be doing the minor updates ont he release to -release. :)

[04:48] <Herby_> timotimo: thanks for the idea.  I might end up doing it that way

[04:50] *** Herby_ left
[04:50] <AlexDaniel> indeed! Upgrade seems to have fixed my hyper problem. That being said, it introduced a bunch of other problems…

[05:08] <[Coke]> 2016.01 release cut

[05:09] *** SCHAAP137 left
[05:15] *** ChoHag left
[05:16] *** ChoHag joined
[05:16] <AlexDaniel> m: my @x = ^10; my @y = @x.hyper(:3batch, :5degree).map: { sleep rand / 100000; $_ + 1 }; say @y

[05:16] <camelia> rakudo-moar a5fe34: OUTPUT«[]␤»

[05:16] <AlexDaniel> m: my @x = ^10; my @y = @x.hyper(:3batch, :5degree).map: { sleep rand / 100000; $_ + 1 }; say @y

[05:16] <camelia> rakudo-moar a5fe34: OUTPUT«[1 2 3 4 5 6 7 8 9 10]␤»

[05:16] <AlexDaniel> I don't even…

[05:17] <Hotkeys> why?

[05:17] <[Coke]> So, how likely am I to get yelled at if I merge the prep branch back to nom? (given that the last big branch merge resulting in yelling)

[05:17] <Hotkeys> oh are those two lines exactly the same AlexDaniel 

[05:17] <AlexDaniel> Hotkeys: they are

[05:18] <Hotkeys> m: say (rand for ^10)

[05:18] <camelia> rakudo-moar a5fe34: OUTPUT«(0.808720287468173 0.76150654897164 0.122863386389548 0.435090412399772 0.281497767344602 0.587686141008414 0.316046270331001 0.298272219355734 0.64243564539821 0.552020721287313)␤»

[05:18] <AlexDaniel> Hotkeys: you can change this delay if you want

[05:18] <Hotkeys> weird

[05:18] <AlexDaniel> Hotkeys: it's just that with that kind of delay the results are most inconsistent

[05:18] <Hotkeys> I just tried it locally

[05:18] <Hotkeys> it fails the first time

[05:18] <Hotkeys> but otherwise works afterward

[05:19] <AlexDaniel> try it several times

[05:19] <AlexDaniel> you'll get it again

[05:19] <Hotkeys> http://i.imgur.com/k7OBCDk.png

[05:19] <AlexDaniel> Hotkeys: https://files.progarm.org/2016-02-02-071942_630x432_scrot.png

[05:20] <Hotkeys> weird

[05:20] <Hotkeys> I can't get it to give me an empty list again

[05:20] <AlexDaniel> Hotkeys: try without / 10000

[05:20] <Hotkeys> empty every time

[05:20] <AlexDaniel> not every time. You just did not run it enough times :)

[05:20] <Hotkeys> oh

[05:20] <Hotkeys> just got one

[05:20] <Hotkeys> empty most times

[05:21] <Hotkeys> what's going on here

[05:22] <AlexDaniel> well, I was struggling with this before I rebuilt rakudo: https://rt.perl.org/Public/Bug/Display.html?id=127099

[05:22] <AlexDaniel> now it went away, but here's another bug! Yeah, bug exchange

[05:23] <AlexDaniel> perhaps this is related: https://rt.perl.org/Public/Bug/Display.html?id=126597

[05:24] <AlexDaniel> or maybe not, grep has never worked with hyper I guess

[05:24] <Hotkeys> how am I supposed to tell people p6 has nice concurrency with these shenanigans

[05:25] <AlexDaniel> Hotkeys: don't tell them to use hyper yet, I guess…

[05:25] <Hotkeys> lol

[05:25] <AlexDaniel> there are enough features besides hyper/race to get them impressed

[05:25] <AlexDaniel> Hotkeys: but I'm really disappointed about this one, yes

[05:26] <skids> Yeah, I hope concurrency bugs get some attention soon... I know the focus is supposed to shift to performance, but no point in optimizing in wrong behavior after all. 

[05:27] <AlexDaniel> not sure how am I supposed to work around this problem right now though. Rerun the code if the list has 0 elements?

[05:27] * AlexDaniel submits rakudobug…

[05:27] <Hotkeys> but what if you get really unlucky

[05:27] <Hotkeys> and it runs forever and ever

[05:28] <AlexDaniel> I am getting around 50% chance it real code

[05:28] <AlexDaniel> so it should be fine, I hope

[05:29] <[Coke]> I would say make sure you're using the latest release, but I don't think 2016.01 has anything for concurrency bugfixes.

[05:30] *** kanishka joined
[05:30] *** bowtie_ left
[05:30] <AlexDaniel> [Coke]: I've rebuilt it 20 minutes ago, I think that it is the latest version

[05:30] <AlexDaniel> unless there were some improvements during these 20 minutes

[05:36] *** sno left
[05:36] *** raiph left
[05:38] *** Cabanossi left
[05:41] <AlexDaniel> m: dd @(^10 .hyper(:1batch).map: { sleep rand; $_ }) # golfy

[05:41] <camelia> rakudo-moar a5fe34: OUTPUT«()␤»

[05:41] <AlexDaniel> m: dd @(^10 .hyper(:1batch).map: { sleep rand; $_ }) # golfy

[05:41] <camelia> rakudo-moar a5fe34: OUTPUT«(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)␤»

[05:41] *** Cabanossi joined
[05:41] *** tth left
[05:45] <[Coke]> AlexDaniel: (the release didn't come from nom, for a chang)

[05:45] <[Coke]> *change

[05:45] *** xpen joined
[05:45] <[Coke]> but that makes it even less likely there are fixes.

[05:50] <skids> Maybe less breakses?

[05:50] <AlexDaniel> m: .say for (^10).hyper(:1batch).map: { sleep rand; $_ } # let's see if we can get that on camelia

[05:50] <camelia> rakudo-moar a5fe34: OUTPUT«0␤2␤5␤3␤1␤7␤9␤4␤6␤8␤»

[05:50] <AlexDaniel> m: .say for (^10).hyper(:1batch).map: { sleep rand; $_ } # let's see if we can get that on camelia

[05:50] <camelia> rakudo-moar a5fe34: OUTPUT«2␤»

[05:50] <AlexDaniel> m: .say for (^10).hyper(:1batch).map: { sleep rand; $_ } # let's see if we can get that on camelia

[05:50] <camelia> rakudo-moar a5fe34: OUTPUT«0␤4␤1␤2␤6␤7␤8␤3␤9␤5␤»

[05:50] <AlexDaniel> yeah 

[05:50] <AlexDaniel> not only it is out of order, but it is also extremely broken

[06:00] <AlexDaniel> done: https://rt.perl.org/Public/Bug/Display.html?id=127452

[06:00] <AlexDaniel> gn o/

[06:07] *** AlexDaniel left
[06:13] *** cpage_ left
[06:21] *** darutoko joined
[06:26] *** CurtisOvidPoe_ joined
[06:34] *** davido joined
[06:48] *** matt_ left
[06:48] *** matt_ joined
[06:48] *** matt_ is now known as Guest80637

[06:50] *** Woodi_ left
[06:59] *** domidumont joined
[06:59] *** khw left
[07:04] *** domidumont left
[07:05] *** domidumont joined
[07:07] *** psy_ left
[07:08] *** davido left
[07:10] *** geraud left
[07:17] *** sno joined
[07:25] *** eiro left
[07:25] *** eiro joined
[07:27] *** CIAvash joined
[07:27] *** CurtisOvidPoe_ left
[07:29] *** Gido_back joined
[07:29] *** Gido_back left
[07:38] *** abraxxa left
[07:39] *** abraxxa joined
[07:40] *** sevvie left
[07:43] *** firstdayonthejob joined
[07:43] *** nakiro joined
[07:52] <CIAvash> .

[07:52] <yoleaux> 1 Feb 2016 23:50Z <Herby_> CIAvash: That was it, thanks!

[07:56] *** bowtie joined
[07:57] *** bowtie is now known as Guest98511

[07:59] *** Guest80637 is now known as matt_

[08:09] *** kanishka left
[08:11] *** cpage_ joined
[08:12] *** araujo left
[08:13] *** araujo_ joined
[08:16] *** vendethiel joined
[08:16] *** araujo_ left
[08:17] *** kanishka joined
[08:19] *** Guest98511 left
[08:21] *** sno left
[08:22] *** bowtie_ joined
[08:25] *** dmaiocchi joined
[08:27] *** FROGGS joined
[08:29] *** araujo_ joined
[08:34] *** bowtie_ left
[08:35] *** bowtie_ joined
[08:38] *** firstdayonthejob left
[08:39] *** vendethiel left
[08:40] *** wamba joined
[08:42] *** leont joined
[08:46] *** leont left
[08:53] *** vendethiel joined
[08:57] *** bowtie_ left
[08:58] *** zakharyas left
[08:58] *** bowtie joined
[08:58] *** sjoshi joined
[08:58] *** bowtie is now known as Guest33094

[09:00] *** sno joined
[09:01] *** RabidGravy joined
[09:04] *** orbus left
[09:05] *** dakkar_ joined
[09:05] <RabidGravy> marning!

[09:05] *** Guest33094 left
[09:07] *** bowtie_ joined
[09:12] *** leont joined
[09:16] *** vendethiel left
[09:16] *** orbus joined
[09:18] *** ecocode joined
[09:26] <lizmat> m: say $?PERL

[09:26] <camelia> rakudo-moar a5fe34: OUTPUT«5===SORRY!5=== Error while compiling /tmp/MDZ9r4T2ki␤Variable '$?PERL' is not declared␤at /tmp/MDZ9r4T2ki:1␤------> 3say 7⏏5$?PERL␤»

[09:31] *** vendethiel joined
[09:38] *** Gruber is now known as Grrrr

[09:39] *** yeahnoob left
[09:40] *** abraxxa left
[09:40] *** abraxxa1 joined
[09:40] *** Ven joined
[09:43] <RabidGravy> boom!

[09:44] <RabidGravy> I don't suppose anyone has a gadget for making a "provides" from a directory of modules?

[09:45] *** Ven_ joined
[09:48] *** Ven left
[09:52] <FROGGS> RabidGravy: panda gen-meta .

[09:53] *** vendethiel left
[09:53] <RabidGravy> didn't work last time I tried it

[09:53] <FROGGS> :/

[09:54] *** rindolf joined
[09:54] <FROGGS> ohh, perhaps it is broken because of latest compunit work

[09:54] <FROGGS> we should unbreak it then

[09:55] <RabidGravy> for LIB in `find lib -name '*.pm'`  ; do   Q=`echo $LIB | sed -e 's/^/"/' -e 's/$/"/'`; MOD=`echo $LIB | sed -e 's/lib\///' -e 's/\.pm$//' -e 's/\//::/g' -e 's/^/"/' -e 's/$/"/'` ; echo "$MOD : $Q" ; done

[09:56] <RabidGravy> :)

[09:57] <RabidGravy> yeah, "Could not find Panda::DepTracker"

[10:02] *** araujo_ left
[10:03] *** mojca joined
[10:04] <mojca> Why didn't the following commit end up in 2016.01? https://github.com/rakudo/rakudo/commit/fb00ed3d71f9407a776c82f03855d1242997878c

[10:04] <mojca> I get ./perl6-m tools/build/install-core-dist.pl No writeable path found, /opt/local/share/perl6 not writeable in block <unit> at tools/build/install-core-dist.pl line 12

[10:04] *** araujo_ joined
[10:04] *** CIAvash left
[10:04] <mojca> when I try to install 2016.01

[10:04] *** Ven_ left
[10:05] <mojca> I blindly assume that the mentioned commit would help

[10:05] *** araujo_ left
[10:08] *** nowan left
[10:10] *** CIAvash joined
[10:11] *** nowan joined
[10:14] *** eiro left
[10:14] *** domidumont left
[10:15] *** fireartist joined
[10:15] <timotimo> oh, the deptracker got kicked out along with the recent compunit stuff

[10:15] <timotimo> though it has been on the chopping block before that, i think

[10:16] <timotimo> due to being a bit of a hack anyway

[10:17] *** espadrine joined
[10:17] *** Ven joined
[10:17] <FROGGS> gah, dont talk like that about my baby! ò.ó

[10:21] *** espadrine_ joined
[10:21] *** espadrine left
[10:22] <FROGGS> timotimo: actually, they way it work was the most correct thing one could do

[10:23] <FROGGS> worked*

[10:23] <FROGGS> guessing packages inside a file by the filename only is a hack

[10:24] *** ely-se joined
[10:24] <timotimo> well it was mostly for making sure panda would precomp stuff in the right order, no?

[10:27] <FROGGS> no, not at all

[10:28] <FROGGS> it was about finding package definitions in a file by watching what happens when running probe

[10:29] <FROGGS> so you can have Chinese class names in a package in a different named file

[10:29] <FROGGS> though, there is a chicken-egg problem

[10:31] *** eiro joined
[10:31] *** domidumont joined
[10:35] <|Tux|> test            22.199

[10:35] <|Tux|> test-t          12.032

[10:40] *** leont left
[10:43] *** brrt joined
[10:47] <brrt> good * #perl6

[10:51] *** koo8 joined
[10:56] <Ven> \o

[11:08] *** Ven left
[11:09] <fireartist> can a Role access a private attribute in a Class which `does` that role? I can't figure out the syntax

[11:09] *** kanishka left
[11:12] <gfldex> m: role R { has $!priv = 42; method m() { say $!priv } }; class C does R { trusts R }; say C.new.m;

[11:12] <camelia> rakudo-moar a5fe34: OUTPUT«42␤True␤»

[11:12] <gfldex> m: role R { method m() { say $!priv } }; class C does R { has $!priv = 42; trusts R }; say C.new;

[11:12] <camelia> rakudo-moar a5fe34: OUTPUT«5===SORRY!5=== Error while compiling /tmp/lC873SbL3S␤Attribute $!priv not declared in role R␤at /tmp/lC873SbL3S:1␤------> 3role R { method m() { say $!priv } }7⏏5; class C does R { has $!priv = 42; trus␤    expecting any of:␤        hor…»

[11:13] <gfldex> m: role R { method m() { say self.("priv") } }; class C does R { has $!priv = 42; trusts R }; say C.new.m;

[11:13] <camelia> rakudo-moar a5fe34: OUTPUT«Cannot find method 'CALL-ME'␤  in method m at /tmp/Bgr2KOT_d_ line 1␤  in block <unit> at /tmp/Bgr2KOT_d_ line 1␤␤»

[11:14] <gfldex> you will need to create the accessor by hand

[11:15] *** espadrine_ is now known as espadrine

[11:16] <fireartist> gfldex: ok, I think I understand that

[11:16] <fireartist> gfldex: thanks

[11:18] *** brrt left
[11:22] *** kid51 joined
[11:25] *** xpen left
[11:32] <bhm> p6: say Date.new(now);

[11:32] <camelia> rakudo-moar a5fe34: OUTPUT«2016-02-02␤»

[11:32] <bhm> p6: say Date.new(now).earlier(:1month);

[11:32] <camelia> rakudo-moar a5fe34: OUTPUT«2016-01-02␤»

[11:32] <bhm> p6: say Date.new(now).earlier(:2month);

[11:32] <camelia> rakudo-moar a5fe34: OUTPUT«2015-12-02␤»

[11:32] <bhm> ok, so I must upgrade. :)

[11:34] <|Tux|> FWIW CSV::Parser still won't install and Inline::Perl5 still broken on long-double perl5 builds

[11:35] <jnthn> Did long-double Perl 5 builds ever actually work with Inline::Perl5?

[11:38] *** zakharyas joined
[11:41] *** pyrimidi_ left
[11:43] *** pyrimidine joined
[11:43] *** broquain1 is now known as broquaint

[11:47] *** brrt joined
[11:48] *** vendethiel joined
[11:49] *** ely-se left
[11:53] *** rindolf left
[12:01] <RabidGravy> BOOM!

[12:01] *** koo8 left
[12:02] *** rindolf joined
[12:02] *** kaare__ joined
[12:03] *** brrt left
[12:05] *** RabidGravy left
[12:06] *** kurahaupo joined
[12:07] <nine> jnthn: no, they didn't. They just pretended to.

[12:08] *** Ven joined
[12:11] *** vendethiel left
[12:11] <jnthn> nine: ah, k :)

[12:11] <abraxxa1> oh,  2016.01 is already available! congrats!

[12:11] *** abraxxa1 is now known as abraxxa

[12:12] *** Skarsnik joined
[12:12] *** vendethiel joined
[12:15] *** rindolf left
[12:15] *** kurahaupo left
[12:16] *** mojca left
[12:17] *** Woodi joined
[12:21] *** ely-se joined
[12:22] *** ely-se left
[12:22] *** ely-se joined
[12:24] *** k-man joined
[12:24] <k-man> hi

[12:25] <k-man> i was just reading the perl6intro.com, and it says the Lazy List Constructor is … 

[12:25] <k-man> as in ellipsis?

[12:26] <Ven> it's wrong

[12:26] <jnthn> That's the sequence operator

[12:26] <jnthn> m: say 1, 3, 5 ... 21

[12:26] <camelia> rakudo-moar a5fe34: OUTPUT«(1 3 5 7 9 11 13 15 17 19 21)␤»

[12:26] <jnthn> m: say 1, 3, 5 … 21

[12:26] <camelia> rakudo-moar a5fe34: OUTPUT«(1 3 5 7 9 11 13 15 17 19 21)␤»

[12:26] <k-man> 3 full stops 

[12:27] <jnthn> 3 full stops is the usual form, but you can write it as ellipsis too

[12:27] <Skarsnik> Hello

[12:27] <k-man> oh i see, interesting

[12:27] <k-man> thanks

[12:30] <abraxxa> has there been a 2016.01 release announcement?

[12:30] <abraxxa> I don't see one on perl6.org

[12:31] <abraxxa> rakudo.org doesn't have one either ;(

[12:32] <moritz> typically we only announce Star releases

[12:34] *** mrsolo_ joined
[12:34] *** SmokeMachine____ joined
[12:35] *** sjoshi left
[12:35] *** clkao_ joined
[12:35] *** TEttinger left
[12:36] *** bhm_ joined
[12:36] *** chansen__ joined
[12:36] *** mrsolo left
[12:36] *** SmokeMachine___ left
[12:36] *** clkao left
[12:36] *** jojotus_ left
[12:36] *** eternaleye left
[12:36] *** bhm left
[12:36] *** chansen_ left
[12:36] *** bitmap left
[12:36] *** mrsolo_ is now known as mrsolo

[12:36] *** chansen__ is now known as chansen_

[12:36] *** ecocode` joined
[12:37] *** jojotus joined
[12:37] *** clkao_ is now known as clkao

[12:37] *** bitmap joined
[12:37] *** Spot__ left
[12:38] *** telex left
[12:38] *** ecocode left
[12:39] *** Spot__ joined
[12:40] *** M-eternaleye joined
[12:40] *** kid51 left
[12:42] *** ely-se left
[12:44] *** nowan left
[12:45] *** nowan joined
[12:45] *** telex joined
[12:48] *** ely-se joined
[12:52] *** dolmen joined
[12:56] *** vendethiel left
[12:56] *** luiz_lha left
[12:58] *** luiz_lha joined
[12:58] *** luiz_lha is now known as Guest22822

[12:58] *** domidumont left
[12:59] *** lizmat left
[12:59] *** skids left
[12:59] *** sftp left
[13:00] *** domidumont joined
[13:00] *** vendethiel joined
[13:03] *** Ven left
[13:03] *** pmurias joined
[13:03] *** xpen joined
[13:04] *** sftp joined
[13:05] <abraxxa> moritz: :(

[13:05] *** Guest22822 is now known as luiz_lha

[13:12] <dalek> DBIish: da3cc93 | (Sylvain Colinet)++ | .travis.yml:

[13:12] <dalek> DBIish: Update travis to install panda and dbiish deps

[13:12] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/da3cc933a3

[13:13] *** luiz_lha left
[13:17] <[Coke]> we haven't really settled on how to announce a post-christmas release.

[13:17] <[Coke]> email went out. wikipedia was updated. tarballs were uploaded.

[13:18] *** pmurias left
[13:18] *** domidumont left
[13:18] *** dolmen left
[13:18] *** eiro left
[13:19] <[Coke]> (missed patch) this is why we did an RC.

[13:19] <[Coke]> If you have something you want in the release, you have to review them.

[13:22] *** vendethiel left
[13:23] <[Coke]> guess I'll hold off on announcing 2016.01 on blogs.perl.org just yet.

[13:24] <Skarsnik> abraxxa, there is still conflict in your pr for DBIish, I am not sure why

[13:24] <abraxxa> Skarsnik: really? weird

[13:24] <abraxxa> Skarsnik: where there commit to the main repo after my last rebase?

[13:24] *** pmurias joined
[13:24] *** domidumont joined
[13:24] *** dolmen joined
[13:24] *** eiro joined
[13:25] <abraxxa> Skarsnik: this commit is included in my PR: https://github.com/perl6/DBIish/commit/da3cc933a3

[13:25] <abraxxa> but install is misspelled in this commit

[13:25] <[Coke]> anyone interested in a 2016.01.1, please join #perl6-release

[13:27] <dalek> rakudo/2016.01-preparation: 206148c | (Anthony Parsons)++ | tools/build/ (3 files):

[13:27] <dalek> rakudo/2016.01-preparation: Fix `make install` when nqp is distro-installed

[13:27] <dalek> rakudo/2016.01-preparation: 

[13:27] <dalek> rakudo/2016.01-preparation: During the installation process, tools/build/install-core-dist.pl is called to

[13:27] <dalek> rakudo/2016.01-preparation: precompile the bundled non-CORE.setting libraries such as Test.pm. The way this

[13:27] <dalek> rakudo/2016.01-preparation: was initially coded, it pulled the install path from NQP's build-time

[13:27] <dalek> rakudo/2016.01-preparation: configuration, which will be a root-owned filesystem path if NQP was installed

[13:27] <dalek> rakudo/2016.01-preparation: via a system package manager.

[13:27] <dalek> rakudo/2016.01-preparation: 

[13:27] <dalek> rakudo/2016.01-preparation: Other parts of the CompUnit code will see these paths don't exist, and attempt

[13:27] <dalek> rakudo/2016.01-preparation: to helpfully call `mkdir` on them which brings the whole process to a messy end.

[13:27] <dalek> rakudo/2016.01-preparation: This part usually works fine when building everything from a git checkout,

[13:27] <dalek> rakudo/2016.01-preparation: because Moar/NQP/Rakudo all default to an installation prefix the user has write

[13:27] <dalek> rakudo/2016.01-preparation: access to.

[13:27] <dalek> rakudo/2016.01-preparation: 

[13:27] <dalek> rakudo/2016.01-preparation: This patch fixes that step of the build process by passing the makefile's path

[13:27] <dalek> rakudo/2016.01-preparation: prefixes to install-core-dist.pl (ensuring precompilation output goes to the

[13:27] <dalek> rakudo/2016.01-preparation: right place), and modifying it to *only* use that path (ensuring it doesn't try

[13:27] <dalek> rakudo/2016.01-preparation: to mkdir where it shouldn't). This isn't a 100% solution, but it fixes enough

[13:27] <dalek> rakudo/2016.01-preparation: to unblock packaging work on a few distros.

[13:27] <dalek> rakudo/2016.01-preparation: 

[13:27] <dalek> rakudo/2016.01-preparation: Thanks to mst++ for doing almost all of the legwork here, crux++ for an initial

[13:27] <dalek> rakudo/2016.01-preparation: patch that gave us a few pointers to work from, and nine++ for giving us some

[13:27] <dalek> rakudo/2016.01-preparation: Boxing Day fun ☺

[13:27] <dalek> rakudo/2016.01-preparation: review: https://github.com/rakudo/rakudo/commit/206148cb3d

[13:28] *** SCHAAP137 joined
[13:31] <dalek> rakudo/2016.01-preparation: 48a3af9 | coke++ | VERSION:

[13:31] <dalek> rakudo/2016.01-preparation: [release] bump VERSION

[13:31] <dalek> rakudo/2016.01-preparation: review: https://github.com/rakudo/rakudo/commit/48a3af99d8

[13:35] <dalek> DBIish: eedf43c | (Sylvain Colinet)++ | .travis.yml:

[13:35] <dalek> DBIish: fix type on install

[13:35] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/eedf43c177

[13:36] *** vendethiel joined
[13:38] <Skarsnik> abraxxa, it's not about travis, there is a conflict somewhere x)

[13:41] <Skarsnik> it missing perl 6 https://github.com/mame/quine-relay

[13:43] <abraxxa> Skarsnik: of course because you've added a commit that changes the same file (.travis.yml) my commit changes

[13:50] *** raiph joined
[13:50] *** RabidGravy joined
[13:52] *** sortiz left
[13:53] *** rindolf joined
[13:58] *** vendethiel left
[14:03] <Skarsnik> abraxxa, it was not confliting already?

[14:03] *** Amendil joined
[14:03] <abraxxa> Skarsnik: not when I created the pr

[14:05] <Skarsnik> try to merge with the origin repo on your side to see where the conflit is? I commit these to see if you pR could pass travis

[14:07] *** cdg joined
[14:08] *** cdg left
[14:08] *** cdg joined
[14:11] *** wamba left
[14:13] *** Paul_ joined
[14:14] *** pmurias left
[14:14] *** xpen left
[14:14] *** pmurias joined
[14:15] *** cognominal left
[14:17] *** Paul_ left
[14:25] *** skids joined
[14:30] *** raiph left
[14:35] <dalek> doc: fc4ec54 | raiph++ | doc/Language/list.pod:

[14:35] <dalek> doc: Typos and fix a link

[14:35] <dalek> doc: review: https://github.com/perl6/doc/commit/fc4ec54cb8

[14:37] *** andreoss joined
[14:37] *** dolmen is now known as Guest7721

[14:38] *** vendethiel joined
[14:41] *** Peter_R left
[14:42] *** Peter_R joined
[14:49] *** zakharyas left
[15:00] <abraxxa> Skarsnik: travis failed to install Data::Dump if you look at the build linked in my PR

[15:04] <dalek> rakudo/2016.01-preparation: f033f2b | coke++ | docs/release_guide.pod:

[15:04] <dalek> rakudo/2016.01-preparation: mention point release

[15:04] <dalek> rakudo/2016.01-preparation: review: https://github.com/rakudo/rakudo/commit/f033f2bd3a

[15:05] <tony-o_> abraxxa: ?

[15:06] <tony-o_> abraxxa: i may have screwed up the META6 thing, i'll fix it rn

[15:06] <abraxxa> tony-o_: the Data::Dump one? I don't think so as it installed fine here but not on Travis

[15:07] <dalek> ecosystem: a60e107 | tony-o++ | META.list:

[15:07] <dalek> ecosystem: Updating my META links.

[15:07] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/a60e1079cc

[15:09] *** khw joined
[15:09] <tony-o_> abraxxa: ah, just found the PR.  fixing the META problem won't solve that issue :-p

[15:11] *** musca` is now known as musca

[15:13] *** MadcapJake joined
[15:13] <abraxxa> tony-o_: are you talking about Travis not working or the merge conflict?

[15:14] <tony-o_> travis not running the installdepends

[15:15] *** FROGGS left
[15:16] *** exodist_ is now known as exodist

[15:20] *** AlexDaniel joined
[15:20] <skids> http://www.infoworld.com/article/3027100/mobile-development/seven-swift-2-enhancements-every-ios-developer-will-love.html?page=2  # A couple of those look... familiar.

[15:21] <skids> The "defer" one is neat though, always wanted something like that.

[15:23] *** Calibellus joined
[15:26] *** sufrostico joined
[15:26] <jnthn> nine: https://rt.perl.org/Ticket/Display.html?id=127454 looks like it may be an I::P5 question/issue/bug

[15:29] <RabidGravy> tadzik, if you get a minute I'd love you long time if you looked at https://github.com/tadzik/JSON-Unmarshal/pull/16

[15:30] <tadzik> RabidGravy: looking

[15:30] <RabidGravy> only tiny

[15:31] <nine> jnthn: yes it is. One may argue that it even is a bug in Net::WebSocket::Server as that explicitly checks "ref $value eq 'CODE'" while any callable would work

[15:31] <tadzik> RabidGravy: merged, thanks :)

[15:32] <RabidGravy> :-*

[15:32] <nine> But maybe there's even a way around that by using magic instead of overloading

[15:35] <ugexe> is there anything like perl6-gdb for windows? i have a piece of code that immediately ends the process with no message (just a `(try require ::($xxx)) ~~ Nil) but *only* for a specific $xxx. and that $xxx works find by itself and gets handled fine on linux

[15:35] <jnthn> ugexe: What does `echo %ERRORLEVEL%` output?

[15:36] <jnthn> But no, you'd probably need to do a debug Moar build and run it under the debugger

[15:36] <ugexe> jnthn: 0

[15:36] <jnthn> ...

[15:36] <jnthn> Immediately after the crash?

[15:36] <jnthn> That's odd

[15:36] <ugexe> oh, no. i just ran it in cmd.exe

[15:36] <jnthn> Ah

[15:37] <jnthn> You'd need to run the thing that breaks from the same window

[15:37] <ugexe> ill try doing it immediately after the crash

[15:37] <jnthn> Then do itimmediately afterwards

[15:37] <jnthn> It's a shell variable, iirc

[15:37] <jnthn> Gets the exit code

[15:38] *** kurahaupo joined
[15:39] <ugexe> jnthn: -1073740940

[15:39] <jnthn> Pretty sure that's SIGSEGV

[15:39] *** lizmat joined
[15:40] <ugexe> what causes seg faults to sometimes ay Segmentation Fault and other times not?

[15:42] *** sufrostico left
[15:43] <arnsholt> The "Segmentation Fault" message is printed by the shell, at least

[15:44] *** fireartist left
[15:46] <ugexe> i seem to have narrowed it down a bit though. I have Zef::Shell and Zef::PowerShell::Shell is Shell. Then i have Zef::PowerShell::download is PowerShell and Zef::PowerShell::unzip is PowerShell. Whichever one is reached first by the plugin loader loads fine, but the next one always causes the immediately end

[15:50] <ugexe> (only on windows, linux is able to load them)

[15:52] <ugexe> oh wow, removing a `my constant XXX = q:to/END/;xxx END` fixes it

[15:53] <ugexe> https://github.com/ugexe/zef/blob/master/lib/Zef/Shell/PowerShell/unzip.pm6#L5 # this `constant` is technically ok where it is right?

[15:53] <jnthn> ugexe: I've never seen it output Segmentation Fault on Windows...

[15:54] <jnthn> ugexe: If changing something tiny and random fixes it then it's almost always memory corruption, which is often (especially if no NativeCall is being used) a sign of a GC related issue

[15:55] <xenu> "segmentation fault"?

[15:55] <ugexe> jnthn: but i've changed it to be loaded at different times in the parent application and its always the same

[15:55] <xenu> under windows it would be "the application has stopped working" i think

[15:56] <ugexe> the first module/plugin that uses `my constant` will always work, and any subsequent one will fail

[15:58] <jnthn> xenu: Yeah, depends on your configuration.

[15:58] <jnthn> xenu: But Windows never calls it segfault

[15:58] <jnthn> ugexe: Hm, OK. It's hard to guess more without seeing the C-level stack trace from the debugger.

[15:59] *** BenGoldberg joined
[15:59] <xenu> you can run rakudo under visual studio (i don't like it)

[15:59] <xenu> or 

[15:59] <RabidGravy> well it used to be "general protection fault", dunno what the call it now

[15:59] <xenu> windbg (i recommend it)

[15:59] <xenu> it's really nice

[15:59] * jnthn doesn't code MoarVM in Visual Studio, but does like/use its debugger :)

[16:00] <xenu> windbg has more gdb-like experience

[16:02] <xenu> also is jit enabled? i would guess it can cause problems sometimes

[16:04] *** ely-se left
[16:04] <AlexDaniel> has anybody looked at https://rt.perl.org/Public/Bug/Display.html?id=127452 yet? Is there anything I can do to help? E.g. I think that it's a rather recent problem, perhaps it will make sense to bisect it?

[16:05] <ugexe> hmm changing from a heredoc to a plain string seems to fix the behavior as well

[16:13] <ugexe> xenu: JIT is enabled

[16:14] *** musiKk joined
[16:14] *** SCHAAP137 left
[16:16] *** BenGoldberg left
[16:16] *** BenGoldberg joined
[16:21] *** koo8 joined
[16:22] *** jsimonet left
[16:22] *** babaj left
[16:23] *** avenj left
[16:26] *** nakiro left
[16:31] *** domidumont left
[16:33] *** ecocode` left
[16:33] *** ecocode` joined
[16:33] *** Calibellus left
[16:33] <[Coke]> anyone interested in seeing a 2016.01.1, please join #perl6-release.

[16:34] *** wamba joined
[16:35] <abraxxa> [Coke]: can I help?

[16:38] *** ecocode` left
[16:38] *** SCHAAP137 joined
[16:41] *** bitmap left
[16:43] *** ugexe left
[16:45] *** perl6newbee joined
[16:49] *** lizmat left
[16:50] *** pierrot joined
[16:56] *** mojca joined
[16:59] *** abraxxa left
[17:00] *** vendethiel left
[17:00] *** khagan_ left
[17:03] *** avenj joined
[17:03] *** avenj left
[17:03] *** avenj joined
[17:06] *** autarch1 joined
[17:07] *** lostinfog joined
[17:08] *** donaldh joined
[17:08] *** autarch left
[17:12] *** yurivish_ left
[17:17] *** vendethiel joined
[17:17] *** Guest7721 left
[17:19] *** captain-adequate joined
[17:20] *** Kogurr joined
[17:21] *** donaldh left
[17:21] *** lizmat joined
[17:21] <musiKk> What is the purpose of a colon after a type in a method signature?

[17:21] *** skingsbu joined
[17:21] <musiKk> It's similar to an invocant declaration but the parameter has to be provided explicitly and can even be another instance.

[17:23] *** autarch joined
[17:24] *** autarch1 left
[17:26] <MadcapJake> got the evalbot working on slack thanks to shoichikaji++

[17:29] *** Zero_Dogg left
[17:30] *** wamba left
[17:30] *** Zero_Dogg joined
[17:30] *** Zero_Dogg left
[17:30] *** Zero_Dogg joined
[17:30] *** koo8 left
[17:32] <geekosaur> musiKk, not sure what you are asking about. example?

[17:33] <musiKk> Not so sure myself. The docs have it a lot, e.g, http://doc.perl6.org/type/Signature#method_params

[17:33] <musiKk> However, the actual implementation does not have it.

[17:35] <geekosaur> I think that's just an invocant marker, saying that it has to be called on a defined object (not the type object)? 

[17:35] <musiKk> But one is allowed to declare a signature that has a colon behind the type and this is only allowed for the first parameter.

[17:35] <geekosaur> implementations generally won't have it, it's just the documentation being clear

[17:35] <musiKk> And this parameter has to be passed explicitly.

[17:36] <jnthn> It's talking about the self parameter

[17:37] <musiKk> "method(Foo: $foo)" can be called $inst.method($inst) or $inst.method($other_inst) but $inst.method() won't compile.

[17:37] *** psy_ joined
[17:37] <jnthn> m: class C { method m(C:) { } }; C.m

[17:37] <camelia> rakudo-moar a5fe34: ( no output )

[17:37] <jnthn> Looks fine to me?

[17:37] <musiKk> O_o

[17:37] <geekosaur> m: class C { method m(C:D:) { } }; C.m

[17:37] <camelia> rakudo-moar a5fe34: OUTPUT«Invocant requires an instance of type C, but a type object was passed.  Did you forget a .new?␤  in method m at /tmp/pvaDy1_Lb0 line 1␤  in block <unit> at /tmp/pvaDy1_Lb0 line 1␤␤»

[17:38] <jnthn> It's most often used for what geekosaur just showed

[17:38] <geekosaur> m: class C { method m(C:D:) { } }; my C $x .= new; $x.m

[17:38] <camelia> rakudo-moar a5fe34: ( no output )

[17:38] <musiKk> I get "Too few positionals passed; expected 2 arguments but got 1".

[17:38] <geekosaur> note that jnthn's passed the type object, which fails :D

[17:38] <geekosaur> what version of rakudo are you running?

[17:39] <musiKk> "This is Rakudo version 2015.12-164-g79f77f7 built on MoarVM version 2015.12-29-g8079ca5"

[17:39] <jnthn> Another possible use is writing methods that can only be called conditional on some state

[17:40] <jnthn> m: class C { has $.state is rw; method m(C $ where $!state == 2:) { } }; my $x = C.new; $x.state = 1; $x.m;

[17:40] <camelia> rakudo-moar a5fe34: OUTPUT«Constraint type check failed for parameter '<anon>'␤  in method m at /tmp/0OP6tSEER2 line 1␤  in block <unit> at /tmp/0OP6tSEER2 line 1␤␤»

[17:40] *** ely-se joined
[17:40] <jnthn> m: class C { has $.state is rw; method m(C $ where $!state == 2:) { } }; my $x = C.new; $x.state = 2; $x.m;

[17:40] <camelia> rakudo-moar a5fe34: ( no output )

[17:40] <jnthn> Though not sure I've seen anyone do that in the wild...yet :)

[17:40] <musiKk> Well, the difference is that I provided a variable name which is wrong it seems.

[17:40] *** dakkar_ left
[17:41] <musiKk> But confusing that it compiles.

[17:41] <musiKk> Maybe.

[17:49] <timotimo> oooh, *of course* you can access $!foo inside the where clause on the invocant parameter

[17:49] <timotimo> musiKk: can you paste your code?

[17:49] <geekosaur> might want to use :D on the invocant type though

[17:50] <geekosaur> and yes, would like to see the actual code. possibly there is an LTA here or something

[17:50] <musiKk> timotimo: I don't have it anymore but it's pretty much what I showed earlier.

[17:51] <musiKk> this compiles "class Foo { method foo(Foo: $foo) {} }; my $foo = Foo.new; $foo.foo($foo)"

[17:51] <timotimo> mhm

[17:52] <timotimo> yeah, that's not surprising

[17:52] <musiKk> :D

[17:52] <timotimo> given you declare an invocant as well as a first positional parameter

[17:52] *** patrickz joined
[17:52] <timotimo> perhaps you thought you were actually doing "method foo(Foo $foo:) {}"?

[17:53] <musiKk> I know "$foo:". It's just the documentation that shows a colon after the type.

[17:53] <musiKk> I'm still not clear on how that works.

[17:53] *** perl6newbee left
[17:53] <musiKk> for example http://doc.perl6.org/type/Metamodel%3A%3AMethodContainer#method_add_method

[17:54] <timotimo> in the docs it's mostly there to make clear what the method belongs to

[17:54] <timotimo> but you can literally write it like that if you want

[17:54] <musiKk> add_method shows that it receives a "Metamodel::MethodContainer:". The source code has $obj without a type and at runtime it's a Mu.

[17:54] <musiKk> no, wait

[17:54] <musiKk> grepped the pod

[17:55] <geekosaur> as I mentioned before, the documentation is just being clear about it. if you don't specify a type in the implementation, it will be the type of the class. if you don't specify it at all, it's implicitly handled.

[17:56] *** andreoss left
[17:56] <geekosaur> in other words, if you need to, you can explicitly specify the invocant and provide a partial or full specification; if you don't need to, you can let perl6 handle it. but for documentation, it's good to be explicit about the invocant

[17:57] *** dmaiocchi left
[17:57] <musiKk> Sorry, I still don't get it completely. The definition of add_method throws me off.

[17:58] <geekosaur> add_method operates on the metamodel

[17:58] <musiKk> It's declared as "method add_method($obj, $name, $code_obj)". How can the documentation add the type to $obj?

[17:59] <timotimo> it doesn't

[17:59] <timotimo> "Metamodel::MethodContainer: $obj" doesn't add a type to $obj

[17:59] <musiKk> oh

[17:59] <timotimo> it's the invocant marker. it talks about the type of the invocant.

[18:00] <timotimo> the invocant is the thing you're calling the method on

[18:00] <timotimo> if you add a type to $obj, it doesn't have a colon in between

[18:00] <timotimo> and if you add a name to the invocant, it'll be before the colon

[18:01] <timotimo> that should cover about everything, i think?

[18:01] <musiKk> Foiled by the syntax then. That was quite unexpected but yeah, you cleared everything up.

[18:01] <musiKk> thanks!

[18:07] <timotimo> i'm glad :)

[18:07] *** lichtkind joined
[18:08] *** firstdayonthejob joined
[18:08] *** musiKk left
[18:13] *** addison_ joined
[18:15] *** bitmap joined
[18:18] *** espadrine left
[18:21] *** xenu left
[18:22] *** xenu joined
[18:24] *** colomon left
[18:26] *** colomon joined
[18:27] *** Calibellus joined
[18:27] *** Calibellus left
[18:28] *** ugexe joined
[18:30] *** david______ joined
[18:30] *** david______ is now known as dbrunton

[18:34] *** koo8 joined
[18:39] *** lizmat left
[18:40] <Skarsnik> MadcapJake, damn nice x)

[18:41] <[Coke]> nine: https://rt.perl.org/Ticket/Display.html?id=127454 might be fore you.

[18:41] <[Coke]> *for

[18:41] *** laz78 joined
[18:42] *** dbrunton left
[18:44] <nine> [Coke]: yes, jnthn++ already noticed that

[18:46] *** domidumont joined
[18:47] *** laz78 left
[18:47] <ely-se> .tell masak I got the type checker to work well now, in Haskell :)

[18:47] <yoleaux> ely-se: I'll pass your message to masak.

[18:47] *** skingsbu left
[18:52] *** espadrine joined
[18:53] *** FROGGS[mobile] joined
[18:54] <FROGGS[mobile]> o/

[18:54] *** khagan joined
[18:55] *** hankache joined
[18:56] <hankache> hola #perl6

[18:56] *** CIAvash left
[19:00] *** lizmat joined
[19:04] *** musiKk joined
[19:05] *** Ben_Goldberg joined
[19:06] *** FROGGS joined
[19:07] *** saaki_ joined
[19:07] *** rdleon_ joined
[19:07] *** ELBeavers_ joined
[19:07] *** BenGoldberg left
[19:07] *** cxreg2 joined
[19:07] *** rudi_s_ joined
[19:07] *** Ben_Goldberg is now known as BenGoldberg

[19:07] *** Util_ joined
[19:07] *** obarb joined
[19:07] *** ponbiki_ joined
[19:08] *** xinming_ joined
[19:08] *** shmibs_ joined
[19:10] <vendethiel> ely-se: hah, you ended up switching to haskell?I guessed it

[19:10] <ely-se> :) it works very well

[19:11] *** cosarara_ joined
[19:11] *** Upasaka_ joined
[19:11] *** _notbenh joined
[19:12] *** autarch left
[19:12] *** M-eternaleye left
[19:12] *** musca left
[19:12] *** raydiak left
[19:12] *** brabo left
[19:12] *** dgl left
[19:12] *** ELBeavers left
[19:12] *** xinming left
[19:12] *** nine left
[19:12] *** cxreg left
[19:12] *** Upasaka left
[19:12] *** mprelude left
[19:12] *** cosarara left
[19:12] *** tadzik left
[19:12] *** risou left
[19:12] *** shmibs left
[19:12] *** rudi_s left
[19:12] *** notbenh left
[19:12] *** Util left
[19:12] *** rdleon left
[19:12] *** agentzh left
[19:12] *** ponbiki left
[19:12] *** saaki left
[19:12] *** MilkmanDan left
[19:12] *** ELBeavers_ is now known as ELBeavers

[19:12] *** _notbenh is now known as notbenh

[19:13] *** M-eternaleye joined
[19:14] *** musca joined
[19:14] *** nine joined
[19:15] *** dg joined
[19:16] *** skingsbu joined
[19:16] *** raydiak joined
[19:16] *** mprelude joined
[19:16] *** tadzik joined
[19:16] *** risou joined
[19:16] *** autarch joined
[19:17] *** agentzh joined
[19:17] *** agentzh left
[19:17] *** agentzh joined
[19:20] *** hankache left
[19:20] *** laz78 joined
[19:21] *** musiKk left
[19:27] *** ely-se left
[19:27] *** musiKk joined
[19:28] *** MilkmanDan joined
[19:31] *** M-eternaleye left
[19:31] *** M-eternaleye joined
[19:31] *** cdg left
[19:32] *** M-eternaleye is now known as eternaleye

[19:33] *** alpha123 joined
[19:35] *** hankache joined
[19:38] <stmuk> http://blogs.perl.org/users/steve_mynott/2016/02/fosdem-2016.html

[19:39] *** musiKk left
[19:41] <jnthn> stmuk++

[19:47] *** ely-se joined
[19:47] *** raydiak_ joined
[19:50] *** shmibs joined
[19:50] *** telex left
[19:50] *** jonathan_ joined
[19:50] *** telex joined
[19:51] *** raydiak left
[19:51] *** shmibs_ left
[19:51] *** RabidGravy left
[19:57] <avuserow> is there a cute perl6 way to take an array (say `my @a = "a".."d"`) and get all head/tail partitions of it (e.g. (["a"], <b c d>), (<a b>, <c d>), (<a b c>, ["d"]))?

[19:58] <mspo> map to splice or something?

[19:59] <moritz> m: my @a = <a b c>; say @a.keys.map({[ @a[0..$_], @a[$_+1 ..*]]}.perl

[19:59] <camelia> rakudo-moar a5fe34: OUTPUT«5===SORRY!5=== Error while compiling /tmp/RwS90YfIvy␤Unable to parse expression in argument list; couldn't find final ')' ␤at /tmp/RwS90YfIvy:1␤------> 3ys.map({[ @a[0..$_], @a[$_+1 ..*]]}.perl7⏏5<EOL>␤»

[19:59] <dalek> perl6.org: 396dcb8 | (Steve Mynott)++ | source/downloads/index.html:

[19:59] <dalek> perl6.org: bump downloads page to use 2016.01.1

[19:59] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/396dcb8caa

[19:59] <moritz> m: my @a = <a b c>; say @a.keys.map({[ @a[0..$_], @a[($_+1) ..*]]}).perl

[19:59] <camelia> rakudo-moar a5fe34: OUTPUT«([("a",), ("b", "c")], [("a", "b"), ("c",)], [("a", "b", "c"), ()]).Seq␤»

[19:59] <moritz> avuserow: something like that? (maybe with the last element removed)

[19:59] *** BenGoldberg left
[20:00] <mspo> moritz: nice use of *

[20:00] <avuserow> yeah, that'd work. trying to wrap my head around it :)

[20:00] <moritz> m: my @a = <a b c d>; say @a.keys.map({[ @a[0..$_], @a[($_+1) ..*]] if $_ < @a.end}).perl

[20:00] <camelia> rakudo-moar a5fe34: OUTPUT«([("a",), ("b", "c", "d")], [("a", "b"), ("c", "d")], [("a", "b", "c"), ("d",)]).Seq␤»

[20:01] <moritz> avuserow: it just iterates over all the array indexes, and splits the array there using slices

[20:01] <skids> my @a = "a".."c"; @a[((0,),(1,2)),((0,1),(2,))].perl.say;  # just need to figure out how to gen the indices.

[20:01] <avuserow> m: my @a = <a b c>; say @a.keys.map({[ @a.head($_), @a.tail(*-$_)}).perl # wonder if .head/.tail are useful?

[20:01] <camelia> rakudo-moar a5fe34: OUTPUT«5===SORRY!5=== Error while compiling /tmp/vIoKFoc3xw␤Unable to parse expression in array composer; couldn't find final ']' ␤at /tmp/vIoKFoc3xw:1␤------> 3a.keys.map({[ @a.head($_), @a.tail(*-$_)7⏏5}).perl # wonder if .head/.tail are usef␤…»

[20:01] <skids> m: my @a = "a".."c"; @a[((0,),(1,2)),((0,1),(2,))].perl.say;  # just need to figure out how to gen the indices.

[20:01] <camelia> rakudo-moar a5fe34: OUTPUT«((("a",), ("b", "c")), (("a", "b"), ("c",)))␤»

[20:01] <avuserow> m: my @a = <a b c>; say @a.keys.map({[ @a.head($_), @a.tail(*-$_)]}).perl # wonder if .head/.tail are useful?

[20:01] <camelia> rakudo-moar a5fe34: OUTPUT«Cannot call tail(Array: WhateverCode); none of these signatures match:␤    (Any:D $: Cool $n = { ... }, *%_)␤  in block <unit> at /tmp/2op8PwpoxC line 1␤␤»

[20:01] <avuserow> m: my @a = <a b c>; say @a.keys.map({[ @a.head($_), @a.tail(@a.end-$_)]}).perl

[20:01] <camelia> rakudo-moar a5fe34: OUTPUT«([(), ("b", "c").Seq], [("a",).Seq, ("c",).Seq], [("a", "b").Seq, ()]).Seq␤»

[20:02] <moritz> m: my @a = <a b c>; say @a.keys.map({[ @a.head($_), @a.tail(@a-$_)]}).perl

[20:02] <camelia> rakudo-moar a5fe34: OUTPUT«([(), ("a", "b", "c").Seq], [("a",).Seq, ("b", "c").Seq], [("a", "b").Seq, ("c",).Seq]).Seq␤»

[20:02] <moritz> m: my @a = <a b c>; say @a.keys.map({[ @a.head($_), @a.tail(@a-$_)] if $_}).perl

[20:02] <camelia> rakudo-moar a5fe34: OUTPUT«([("a",).Seq, ("b", "c").Seq], [("a", "b").Seq, ("c",).Seq]).Seq␤»

[20:02] *** addison_ left
[20:02] <avuserow> I can handle empty elements since I have a multi candidate for that. :)

[20:04] *** darutoko left
[20:08] <nine> Oh my. Fooling Perl 5 code that checks $ref eq 'CODE' will be awful. Seems like I really need to generate a P5 code reference at runtime that forwards to the P6 callable.

[20:08] <nine> No overloading or magic will help

[20:09] <hankache> why doesn't "rakudobrew build moar" build 2016.01.1?

[20:09] *** yqt joined
[20:10] <geekosaur> nine, isn't that sust a sub {}?

[20:10] <hankache> it is building 2015.12-232-ga5fe347

[20:10] <geekosaur> *just

[20:12] <stmuk> hankache: it's building nom not 2016.01.1

[20:12] <stmuk> rakudobrew build moar 2016.01.1

[20:12] <nine> geekosaur: currently I create a Perl6::Callable object that overrides &{} to make calls on it just work. But apparently many people don't check for callability but for genuine CODE references.

[20:13] <hankache> stmuk: i thought nom would always have the latest commits

[20:13] <stmuk> hankache: not at the moment

[20:14] <hankache> stmuk thanks for clarifying

[20:14] <jnthn> hankache: The plans is to cherry-pick those bits into nom; because 2016.01 was built out of cherry-picks, it's non-trivial to simply merge the release branch back.

[20:16] <[Coke]> hankache, stmuk, added https://github.com/tadzik/rakudobrew/issues/80

[20:16] * lizmat is looking forward to commit to nom or any other branch again

[20:17] <hankache> jnthn ok

[20:18] *** tmtowtdi joined
[20:18] <hankache> [Coke]++ #https://github.com/tadzik/rakudobrew/issues/80

[20:19] *** koo8 left
[20:19] <stmuk> [Coke]: I had a PR which did something similar https://github.com/tadzik/rakudobrew/pull/75

[20:20] *** koo8 joined
[20:20] <stmuk> that was added as a new rakudobrew build target rather than default behaviour

[20:21] *** addison_ joined
[20:21] <skids> m: my @a = "a".."f"; say ([\,] @a) Z (([\,] @a[1..*].reverse)>>.reverse).reverse; # avuserow :-)

[20:21] <camelia> rakudo-moar a5fe34: OUTPUT«(((a) (b c d e f)) ((a b) (c d e f)) ((a b c) (d e f)) ((a b c d) (e f)) ((a b c d e) (f)))␤»

[20:21] <dalek> star/release: b942f0f | moritz++ | / (2 files):

[20:21] <dalek> star/release: Bump some versions, update README

[20:21] <dalek> star/release: review: https://github.com/rakudo/star/commit/b942f0ffc6

[20:21] *** koo8 is now known as maybekoo

[20:21] <moritz> better wording for the README welcome :-)

[20:22] *** perl6newbee joined
[20:22] <stmuk> hmmm actually nom:VERSION doesn't work anymore :/

[20:23] <moritz> what would that even mean?

[20:23] <moritz> either you want a branch *or* you want a version

[20:25] <stmuk> moritz: git show nom:VERSION used to show the last release branch but clearly won't anymore

[20:26] <moritz> oh, as a git command

[20:26] <moritz> stmuk: it'll work again once the commits from the release branch have been cherry-picked back to nom

[20:27] <stmuk> ah 

[20:29] *** pi4 left
[20:29] <stmuk> so the VERSION in the dev branch isn't actually the dev VERSION but refers with a time lag to the last release version :)

[20:29] *** domidumont left
[20:30] *** pi4 joined
[20:32] <stmuk> is it a Rakudo Star 2016.01 or 2016.01.1? the latter might be less confusing?

[20:32] <moritz> 2016.01

[20:34] <stmuk> its confusing since R* 2016.01 is based on R 2016.01.1 whereas R* 2014.12.1 was based on R 2014.01

[20:34] *** grondilu left
[20:34] <stmuk> R* 2014.12.1 was based on R 2014.12.1 I mean

[20:35] <stmuk> its also confusing if R 2016.01.2 is ever created

[20:35] *** spider-mario joined
[20:36] *** grondilu joined
[20:38] <[Coke]> what do you mean "was based on" ?

[20:39] <[Coke]> oh, R* vs. R. nevermind!

[20:39] <[Coke]> I thought you were referring to R itself in each case.

[20:39] *** FROGGS left
[20:40] <[Coke]> stmuk: if people want to not be confused by versions, they are coming to the wrong project here. :)

[20:40] <stmuk> I'm arguing star should always be versioned as the R it is based on

[20:40] <[Coke]> I don't think that's worth it.

[20:40] <hankache> i agree with stmuk

[20:40] *** khisanth_ is now known as Khisanth

[20:40] <[Coke]> "where's R* 2016.01 ??"

[20:41] <hankache> ah ok you have a point

[20:41] * perlpilot agrees with Coke  ;)

[20:41] <perlpilot> (only because he's right! :)

[20:43] *** musiKk joined
[20:43] <jnthn> More broadly, we may want to be thinking through R*'s role over the coming months: who does it serve, what should its release cadence be, etc.

[20:43] <stmuk> I think where is 2016.01 is more easily explained than why is R* 2016.01.1 based on R 2016.01.2?

[20:43] *** [Tux] left
[20:44] <stmuk> but perl versioning has always been confusing and this is something perl 6 hasn't fixed :)

[20:44] <moritz> stmuk: I don't think people care too much about the compiler versions. We just tell them "download and install R* 2016.01, it implements the stable release of Perl 6 that you all celebrated on Christmas"

[20:44] <hankache> jnthn R* is the only way of getting an MSI

[20:45] <hankache> i am no big fan of batteries included, but i like MSI's for Windows

[20:45] <jnthn> hankache: Well, it's the only thing we make an MSI for. ;) But yes, "get a batteries included Perl 6 distribution in a single download on Windows" is an important role it serves.

[20:45] <spider-mario> hey, so this hangman implementation used to work (don’t remember when exactly, though): http://paste.awesom.eu/stXJ

[20:45] <spider-mario> but now, it prints this instead: http://paste.awesom.eu/bPVr

[20:46] <spider-mario> (“now” = rakudo 2015.12)

[20:46] <spider-mario> why does it think that draw expects two arguments?

[20:46] <El_Che> The 6 in Perl 6 kind of broke Perl 5 versioning and confused everyone outside the echochamber. A good versioning scheme would be golden for adoption

[20:47] <moritz> spider-mario: did it ever work post-GLR?

[20:47] <spider-mario> when was that?

[20:47] <jnthn> for @drawing Z @mask -> $d, $m {

[20:47] <jnthn> I think it wants to be

[20:47] <jnthn> for flat @drawing Z @mask -> $d, $m {

[20:47] <jnthn> Which afaict is line 30

[20:48] <jnthn> It's the block that's getting 1 arg instead of 2, not draw itself

[20:48] <spider-mario> oh

[20:48] <spider-mario> that would make sense

[20:48] <jnthn> 'cus Z produces sublists and those don't flatten.

[20:48] <spider-mario> (although the error message is LTA, to be honest)

[20:48] <spider-mario> hm, the error message seems to stay the same

[20:49] <spider-mario> oh, not the same, actually

[20:49] <moritz> or for @drawing Z @mask -> ($d, $m) {

[20:49] <spider-mario> it now points to a different line that uses Z as well, I’ll try and fix it too

[20:50] <[Coke]> el_che; well, it's always going to be a 6. that ship has sailed.

[20:50] <El_Che> [Coke]: of course. I am talking about Perl 6 itself

[20:50] <spider-mario> ah, it works now :)

[20:50] <spider-mario> thank you, moritz and jnthn

[20:51] <El_Che> [Coke]: if there is a lesson in bygones, it's that clear versioning is important

[20:51] <[Coke]> El_Che: are you familiar with the plan going forward?

[20:51] <[Coke]> for v6.c, 6.d, 6.d.a, 6.c.1, etc?

[20:52] <El_Che> [Coke]: the spec, I think so.

[20:52] <stmuk> I assume pure 6.c monthly releases are less likely in the future?

[20:52] <El_Che> talked with liz and nine about it at fosdem

[20:53] <hankache> 6.d.a, 6.c.1??

[20:54] *** perl6newbee left
[20:54] <dalek> star/release: e0eb876 | moritz++ | tools/build/Makefile.in:

[20:54] <dalek> star/release: Bump another version

[20:54] <dalek> star/release: review: https://github.com/rakudo/star/commit/e0eb87634d

[20:55] *** [Tux] joined
[20:59] *** Guest7721 joined
[21:01] <[Coke]> stmuk: there will no doubt be a 6.c.1 this year. not planned, based on what comes up.

[21:01] <[Coke]> feb release will probably also support 6.d.a

[21:01] <[Coke]> (I think that's the right version. basically: the beginnings of 6.d)

[21:02] <moritz> http://hack.p6c.org/~moritz/rakudo-star-2016.01-RC0.tar.gz # please test

[21:02] <[Coke]> OH NOES I started from 1 when I did it!

[21:04] <stmuk> :D

[21:04] <moritz> next time I'll start from -0.5 :-)

[21:04] <stmuk> its actually RC2

[21:05] <moritz> my mind seems too small for two options

[21:05] <moritz> whenever I specify --prefix in Configure.pl, I forget --gen-moar

[21:06] <AlexDaniel> again, why not go the browser path and have Perl 42 next year? :)

[21:06] <moritz> AlexDaniel: because we don't want to buy that many domain names

[21:06] <stmuk> there was an rakudo-star-2016.01-RC0.tar.gz released on 2016-01-07

[21:06] <jnthn> For those wondering about Rakudo versioning etc., there's some more details at https://gist.github.com/jnthn/c10742f9d51da80226fa#file-3-rakudo-md - though note that to full appreciate that short text you may want to read the much longer text above it. :)

[21:07] *** revhippie joined
[21:07] <stmuk> see https://irclog.perlgeek.de/perl6-toolchain/2016-01-07/text

[21:07] <moritz> stmuk: ah right, but that wasn't based on an actual release :-)

[21:07] <moritz> so, it like, doesn't count

[21:07] <stmuk> I give up! :)

[21:07] <AlexDaniel> moritz: buying another domain is as expensive as renewing the old ones, so let's just keep 3 or 4 latest ones

[21:07] <moritz> anyway, feedback for *my* R* RC0 very welcome

[21:09] *** ponbiki_ is now known as ponbiki

[21:09] <stmuk> . o O ( rakudo-star-2016.01-RD0.tar.gz )

[21:10] <AlexDaniel> … at least such approach will make sure that Perl 5 folks are not going to jump to Perl 7 :D

[21:10] <moritz> I'd have no problem with that

[21:10] <moritz> packagers may, though :-)

[21:11] *** geraud joined
[21:13] <xenu> i have an idea how to make perl 5 guys feel good. new versioning scheme: from now on, perl 6 uses even numbers (so perl 6, 8, 10, 12...) and perl 5 uneven (5, 7, 9). perl 6 has releases on december and perl 5 in june ;)

[21:13] *** hankache left
[21:14] <xenu> s/uneven/odd/

[21:14] <moritz> .oO( new channel: #perl6-version-trolling )

[21:14] <stmuk> Koremutake Memorable Random Strings based on git hashes :)

[21:20] <AlexDaniel> xenu: this does not provide enough room for another perl

[21:21] *** wamba joined
[21:23] *** Psyche^ joined
[21:24] *** flo__ joined
[21:24] *** kaare__ left
[21:25] *** sortiz joined
[21:26] <revhippie> uneven is for you can't even

[21:27] *** Psyche^_ left
[21:28] <revhippie> ...that sentence was hard enough to parse *before* I left out the word "when" in the middle.

[21:33] <El_Che> version-trolling? perl6 uses prime numbers :)

[21:33] *** sno left
[21:35] *** addison_ left
[21:36] <sortiz> \o #perl6

[21:41] <ely-se> hi sortiz

[21:43] <perlpilot> moritz: almost done testing RC0 now and it looks good so far

[21:43] *** addison joined
[21:44] <moritz> perlpilot: \o/ and thanks for testing

[21:44] *** lizmat left
[21:44] <stmuk> moritz: maybe not worth it but I think the JSON::Fast needs a bump to get rid of the leading v in meta info warning

[21:45] <moritz> if somebody wants to help: please contribute a release announcement in the "release" branch of rakudo/star

[21:45] *** FROGGS[mobile] left
[21:45] *** FROGGS[mobile] joined
[21:46] <moritz> stmuk: seems to be at the right version

[21:46] *** musiKk left
[21:46] <moritz> stmuk: did you check the "release" branch of star?

[21:47] <stmuk> I just installed your tarball and saw the v warning 

[21:47] <stmuk> which appears fixed in https://github.com/timo/json_fast/commit/6d9620956d1606441ad32bb23193d997772c615a

[21:48] <stmuk> I'll look further

[21:49] *** cdg joined
[21:50] *** cdg left
[21:50] <stmuk> oops your version is right

[21:50] *** cdg joined
[21:52] *** mojca left
[21:52] *** labster joined
[21:54] *** skids left
[21:55] <perlpilot> moritz: When I run make rakudo-spectest, I get t/spec/S17-supply/syntax.t .................................... Failed 3/60 subtests

[21:55] <perlpilot> moritz: when I run that test by itself, I get no failures.

[21:55] <avuserow> skids++

[21:55] <avuserow> the context of my question is actually kind of interesting. I was helping a friend work through https://www.reddit.com/r/dailyprogrammer/comments/3xye4g/20151223_challenge_246_intermediate_letter_splits/

[21:56] <avuserow> and after making a boring python one, I made a slightly less boring p6 one, and then thought of a nice way to make it work with partitions. but looking at it, smls++ has the top-voted solution with an amazing regex hack

[21:56] <stmuk> its a pity all the R* modules aren't under perl6-community-modules so PRs like https://github.com/daleevans/p6-Template-Mustache/commit/58e838835a5c6715aa3580ea7484e2427a652840 get merged

[21:57] <stmuk> ahhh its the JSON::Fast specified by panda which is out of date

[21:58] <stmuk> embedded in I mean

[22:01] *** leont joined
[22:02] *** sno joined
[22:05] <moritz> perlpilot: ah well, I chose to ignore that :-)

[22:08] <stmuk> I don't see panda in   /opt/rakudo-star-2016.01-RC0/bin

[22:09] <stmuk> like it used to be with R* .. I guess that's expected?

[22:13] <Zero_Dogg> can't () be omitted on function calls in classes on self? self.printd "Blabla"; gives a "two terms in a row" error

[22:13] <ugexe> printd: "Blablah";

[22:14] <ugexe> (note the colon)

[22:14] <Zero_Dogg> interesting, did not know about the colon. What does it do, just start a list of parameters for whatever preceeds it?

[22:16] <ugexe> m: (^5).map: {.say}

[22:16] <camelia> rakudo-moar a5fe34: OUTPUT«0␤1␤2␤3␤4␤»

[22:17] <jnthn> Zero_Dogg: Pretty much that. Means that the precedence after it is dropped low enough to parse a comma-separated argument list.

[22:17] <Zero_Dogg> jnthn, ugexe: Thanks!

[22:25] <sortiz> moritz, The relevant output when building and installing your R* RC0 in FC23: https://gist.github.com/salortiz/1087df9fb74b34f576ca

[22:32] <dalek> doc: ce4f4b2 | (Wenzel P. P. Peppmeyer)++ | doc/Language/functions.pod:

[22:32] <dalek> doc: tell how arguments are written down

[22:32] <dalek> doc: review: https://github.com/perl6/doc/commit/ce4f4b213a

[22:33] *** Skarsnik left
[22:34] <Zero_Dogg> When is BUILD actually executed? Will Mu's default initialization have been performed before it reaches BUILD (ie. can BUILD already access class variables that the default constructor would initialize?). Given obj.new(debug => True); will BUILD on obj be able to check $.debug?

[22:35] *** TEttinger joined
[22:37] <Zero_Dogg> When is BUILD actually executed? Will Mu's default initialization have been performed before it reaches BUILD (ie. can BUILD already access class variables that the default constructor would initialize?). Given obj.new(debug => True); will BUILD on obj be able to check $.debug?

[22:37] <Zero_Dogg> sorry, wrong terminal, didn't mean to spam.

[22:38] *** stmuk_ joined
[22:39] *** stmuk left
[22:40] *** BenGoldberg joined
[22:40] *** donaldh joined
[22:40] <dalek> doc: 8a5200c | (Wenzel P. P. Peppmeyer)++ | doc/Type/Block.pod:

[22:40] <dalek> doc: show that Block got a return value

[22:40] <dalek> doc: review: https://github.com/perl6/doc/commit/8a5200cf01

[22:42] <timotimo> sortiz: the "implicit declaration of pthread_yield" has been known for at least a year :)

[22:44] <timotimo> the "please remove initial v from meta" in JSON::Fast has been fixed some time ago, but it apparently has to be pulled into some other repositories

[22:44] *** cdg_ joined
[22:46] <stmuk_> https://github.com/tadzik/panda/tree/master/ext/JSON__Fast

[22:47] <timotimo> oh

[22:47] <timotimo> yeah, that patch i meant is only 7 days old

[22:47] *** cdg left
[22:49] *** espadrine left
[22:49] <sortiz> timotimo, Ok. BTW, can you take a look at PR#701?, I appreciate some feedback and guidance

[22:49] *** cdg_ left
[22:49] <timotimo> what repository is that for?

[22:50] *** espadrine joined
[22:50] <sortiz> rakudo

[22:51] <timotimo> oh, oof

[22:51] *** rindolf left
[22:51] <timotimo> i don't think i'm comfortable making that call

[22:51] <timotimo> between adding the shortname method or using .can

[22:51] <sortiz> You was the instigator ;)

[22:52] <timotimo> i recall

[22:52] <Zero_Dogg> sorry, wrong terminal, didn't mean to spam.

[22:52] <Zero_Dogg> GAH, I'll just close this terminal now, before I end up pasting my entire sourcecode here

[22:56] *** lsm-desktop left
[22:57] <sortiz> Well, I'll be waiting for some other opinions, thank you.

[22:58] *** jonathan_ left
[22:58] <donaldh> moritz: R* RC0 builds and installs on OSX El Cap

[22:59] <donaldh> moritz: 1 spectest failure - t/spec/S17-supply/watch-path.t - which looks OSX specific

[22:59] *** addison left
[22:59] *** kurahaupo left
[23:02] *** kid51 joined
[23:07] *** lsm-desktop joined
[23:08] *** kurahaupo joined
[23:09] *** addison_ joined
[23:10] *** leont left
[23:12] *** skids joined
[23:13] *** mkz_ left
[23:14] *** kurahaupo_ joined
[23:15] *** kurahaupo_ left
[23:15] *** kurahaupo left
[23:18] *** smash left
[23:18] *** smash joined
[23:19] *** pmurias left
[23:20] *** vendethiel left
[23:21] *** mkz joined
[23:32] *** perlawhirl joined
[23:33] *** pecastro left
[23:36] <perlawhirl> avuserow: an attempt using head and tail... if a little verbose

[23:36] <perlawhirl> m: my @a = 'a'..'c'; for 1..@a.elems -> $i { say @a.head($i), @a.tail(@a.elems - $i+1) }

[23:36] <camelia> rakudo-moar a5fe34: OUTPUT«(a)(a b c)␤(a b)(b c)␤(a b c)(c)␤»

[23:36] <perlawhirl> htm

[23:36] <perlawhirl> hrm

[23:36] <perlawhirl> m: my @a = 'a'..'e'; for 0..@a.elems -> $i { say @a.head($i), @a.tail(@a.elems - $i) } 

[23:36] <camelia> rakudo-moar a5fe34: OUTPUT«()(a b c d e)␤(a)(b c d e)␤(a b)(c d e)␤(a b c)(d e)␤(a b c d)(e)␤(a b c d e)()␤»

[23:37] <perlawhirl> m: my @a = 'a'..'d'; for 1..^@a.elems -> $i { say @a.head($i), @a.tail(@a.elems - $i) }

[23:37] <camelia> rakudo-moar a5fe34: OUTPUT«(a)(b c d)␤(a b)(c d)␤(a b c)(d)␤»

[23:37] <perlawhirl> ahh, that's better

[23:38] *** vendethiel joined
[23:40] *** donaldh left
[23:44] *** lizmat joined
[23:44] *** MadcapJake left
[23:45] *** choroba joined
[23:46] *** leont joined
[23:46] <choroba> hi, I noticed http://blogs.perl.org/users/coke/2016/02/rakudo-perl-6-compiler---2016011-released.html

[23:46] <choroba> does it mean I can do something to get the new version into my rakudobrew?

[23:46] <choroba> or do I have to wait for the "Rakudo Star release"

[23:47] <perlawhirl> rakudobrew build moar 2016.01

[23:47] <perlawhirl> then... rakudobrew global moar-2016.01

[23:47] <perlawhirl> if you are using rakudobrew... which you should

[23:47] <captain-adequate> Nice... Was gonna ask the same.

[23:47] <captain-adequate> Thanks perlawhirl

[23:48] <perlawhirl> rakudobrew, like other language *brew ( or *env ) segregates modules, so after you switch versions, rebuild panda, and reinstall modules

[23:48] <captain-adequate> Just like npm for node. Got it.

[23:49] <captain-adequate> Or nvm I should say.

[23:49] <captain-adequate> Node version manager.

[23:49] <captain-adequate> Glad to see the same for perl6

[23:52] *** skingsbu left
[23:53] <AlexDaniel> m: my @a = ‘a’..‘e’; say [@a[0..$_], @a[$_^..*] for ^(@a - 1)]

[23:53] <camelia> rakudo-moar a5fe34: OUTPUT«[((a) (b c d e)) ((a b) (c d e)) ((a b c) (d e)) ((a b c d) (e))]␤»

[23:54] *** soundobstacle joined
[23:56] <AlexDaniel> avuserow: or that ↑

[23:56] <AlexDaniel> by the way, is it a bug or not:

[23:56] <AlexDaniel> m: my @a = <a b c d>; say @a[0..*]

[23:56] <camelia> rakudo-moar a5fe34: OUTPUT«(a b c d)␤»

[23:56] <AlexDaniel> m: my @a = <a b c d>; say @a[0..^*]

[23:56] <camelia> rakudo-moar a5fe34: OUTPUT«(a b c d)␤»

[23:57] *** laz78 left
[23:57] <perlawhirl> many ways to skin a cat. I'm sure i did something like that by accident with the Z op, but can't recall exactly. i may be mis-remembering

[23:59] <gfldex> m: my $r = 0..^*; dd $r

[23:59] <camelia> rakudo-moar a5fe34: OUTPUT«Range $r = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9...Inf)␤»

[23:59] <gfldex> AlexDaniel: what is Inf-1 in your eyes?

