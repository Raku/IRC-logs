[00:00] *** Rawriful left
[00:06] *** BenGoldberg joined
[00:09] *** Actualeyes joined
[00:12] *** pierre joined
[00:12] *** pierre left
[00:17] *** pierre joined
[00:22] *** tmtowtdi left
[00:49] *** margeas left
[00:55] *** cyphase left
[01:00] *** cyphase joined
[01:01] *** khw joined
[01:14] *** cyphase left
[01:19] *** cyphase joined
[01:19] *** pierre left
[01:26] *** pierre joined
[01:30] *** pierre left
[01:41] *** avenj left
[01:42] *** kid51 left
[01:44] *** kalkin- left
[01:44] *** kalkin-_ joined
[01:44] *** pierre joined
[01:46] *** ilbot3 left
[01:47] *** ilbot3 joined
[01:48] *** freezerburnv joined
[01:49] *** holyghost left
[01:49] *** pierre left
[01:49] *** holyghost joined
[01:52] *** lambd0x left
[01:57] *** pierre joined
[02:02] <vcv> Any modules or tricks for pretty printing .gist output?

[02:03] *** holyghost left
[02:04] *** Leamas joined
[02:07] *** sufrosti1o left
[02:07] *** sufrostico left
[02:10] <gfldex> vcv: there are 2 modules in the eco system that dump data

[02:19] *** holyghost joined
[02:19] *** Zoffix joined
[02:21] <Zoffix> m: class Foo { has $.bar }; say "The code is in {.file} on line {.line}" given Foo.^can('bar')[0];

[02:21] <camelia> rakudo-moar 4693a5: OUTPUT¬´concatenate requires a concrete string, but got null‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[02:21] <Zoffix> Is there a way to get where the attribute is defined at? The line and number?

[02:22] <vcv> Thanks

[02:30] *** noganex joined
[02:30] <dalek> doc: 25ce0e5 | (Aleks-Daniel Jakimenko-Aleksejev)++ | / (3 files):

[02:30] <dalek> doc: Minor fixes

[02:30] <dalek> doc: review: https://github.com/perl6/doc/commit/25ce0e539a

[02:32] *** wamba joined
[02:32] <dalek> modules.perl6.org: cd7572b | (Zoffix Znet)++ | README.md:

[02:32] <dalek> modules.perl6.org: s/browers/browsers/

[02:32] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/cd7572b696

[02:32] <dalek> perl6.org: fa1f145 | (Zoffix Znet)++ | README.md:

[02:32] <dalek> perl6.org: s/browers/browsers/

[02:32] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/fa1f1459ad

[02:33] *** noganex_ left
[02:34] * gfldex .oO( Did you mean "brewers"? )

[02:35] <AlexDaniel> m: brewerse

[02:35] <camelia> rakudo-moar 4693a5: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    brewerse used at line 1. Did you mean 'reverse'?‚ê§‚ê§¬ª

[02:36] <AlexDaniel> by the way, this is a good one: ü§¶

[02:45] <Zoffix> Well, that's interesting....

[02:45] <Zoffix> m: class Foo { has $.bar; method bar('foo') {}  }; say "The code is in {.file} on line {.line}" given Foo.^can('bar')[0];

[02:45] <camelia> rakudo-moar 4693a5: OUTPUT¬´The code is in <tmp> on line 1‚ê§¬ª

[02:46] <Zoffix> oh :S locally it gives me 'The code is in gen/moar/m-CORE.setting on line 587'

[02:47] <Zoffix> Ah

[02:47] <Zoffix> m: class Foo { has $.bar; multi method bar('foo') {}  }; say "The code is in {.file} on line {.line}" given Foo.^can('bar')[0];

[02:47] <camelia> rakudo-moar 4693a5: OUTPUT¬´The code is in gen/moar/m-CORE.setting on line 587‚ê§¬ª

[02:50] <Zoffix> m: class Foo { multi method bar('foo') {}  }; say "The code is in {.file} on line {.line}" given Foo.^can('bar')[0];

[02:50] <camelia> rakudo-moar 4693a5: OUTPUT¬´The code is in gen/moar/m-CORE.setting on line 587‚ê§¬ª

[02:50] <Zoffix> üòø 

[02:51] <Zoffix> m: class Foo { proto method bar(|) {}; multi method bar('foo') {}  }; say "The code is in {.file} on line {.line}" given Foo.^can('bar')[0];

[02:51] <camelia> rakudo-moar 4693a5: OUTPUT¬´The code is in <tmp> on line 1‚ê§¬ª

[02:53] <Zoffix> m: class Foo { ‚ê§‚ê§multi method bar('foo') {}‚ê§‚ê§‚ê§ multi method bar('meow') {} }; say .^can('bar')[0].cando(\($_, 'meow'))[0].line given Foo

[02:53] <camelia> rakudo-moar 4693a5: OUTPUT¬´6‚ê§¬ª

[02:54] <Zoffix> m: class Foo { has $.bar;‚ê§‚ê§multi method bar('foo') {}‚ê§‚ê§‚ê§ multi method bar('meow') {} }; say .^can('bar')[0].cando(\($_)) given Foo

[02:54] <camelia> rakudo-moar 4693a5: OUTPUT¬´()‚ê§¬ª

[02:55] <Zoffix> m: class Foo { has $.bar }; say Foo.^can('bar')[0];

[02:55] <camelia> rakudo-moar 4693a5: OUTPUT¬´bar‚ê§¬ª

[02:55] <Zoffix> :/

[02:56] <Zoffix> m: class Foo { ‚ê§‚ê§‚ê§‚ê§has $.bar }; say Foo.^can('bar')[0].cando(\(Foo))[0].line;

[02:56] <camelia> rakudo-moar 4693a5: OUTPUT¬´1‚ê§¬ª

[02:56] <Zoffix> Something is really stinks in this code path.

[02:56] <Zoffix> m: class Foo { has $.bar = 42;‚ê§‚ê§multi method bar('foo') {}‚ê§‚ê§‚ê§ multi method bar('meow') {} }; Foo.new.bar

[02:56] <camelia> rakudo-moar 4693a5: OUTPUT¬´Cannot resolve caller bar(Foo.new(bar => 42): ); none of these signatures match:‚ê§    (Foo $: Str $ where { ... }, *%_)‚ê§    (Foo $: Str $ where { ... }, *%_)‚ê§  in block <unit> at <tmp> line 6‚ê§‚ê§¬ª

[02:57] <Zoffix> :/

[02:59] *** kid51 joined
[03:01] <Zoffix> I guess it sees I provided a `bar` method so it doesn't auto-generate an accessor.

[03:05] *** canopus left
[03:10] *** TEttinger left
[03:11] *** canopus joined
[03:19] *** avenj joined
[03:21] *** skids left
[03:23] *** canopus left
[03:31] *** khw left
[03:31] *** canopus joined
[03:33] *** Leamas left
[03:36] *** wamba left
[03:43] *** kid51 left
[04:06] *** ovibos left
[04:07] *** freezerburnv left
[04:28] <AlexDaniel> m: say WHAT ‚Äò.‚Äô.IO.absolute

[04:28] <camelia> rakudo-moar 4693a5: OUTPUT¬´(Str)‚ê§¬ª

[04:28] <AlexDaniel> m: say WHAT ‚Äò.‚Äô.IO.abspath

[04:28] <camelia> rakudo-moar 4693a5: OUTPUT¬´(Str)‚ê§¬ª

[04:28] <AlexDaniel> something is wrong here

[04:28] <AlexDaniel> committable: releases say WHAT ‚Äò.‚Äô.IO.absolute

[04:28] <committable> AlexDaniel: ¬¶¬´2015.10,2015.11,2015.12,2016.02,2016.03,2016.04,2016.05,2016.06,2016.07,HEAD¬ª: (Str)

[04:28] <AlexDaniel> yeah, well‚Ä¶ yeah

[04:29] <AlexDaniel> m: say WHAT ‚Äò.‚Äô.IO.relative

[04:29] <camelia> rakudo-moar 4693a5: OUTPUT¬´(Str)‚ê§¬ª

[04:29] <AlexDaniel> m: say WHAT ‚Äò.‚Äô.IO.parent

[04:29] <camelia> rakudo-moar 4693a5: OUTPUT¬´(Path)‚ê§¬ª

[04:33] *** BenGoldberg left
[04:37] *** Cabanossi left
[04:39] *** Cabanossi joined
[04:41] *** AlexDaniel left
[04:43] *** cibs left
[04:45] *** cibs joined
[04:55] *** s34n left
[05:06] *** andrzejku joined
[05:08] *** pierre left
[05:13] *** beatdown left
[05:15] *** ShimmerFairy left
[05:26] *** ovibos joined
[05:37] *** ufobat joined
[05:56] *** TEttinger joined
[06:15] <ufobat> morning

[06:18] *** movl joined
[06:27] *** dwarring left
[06:35] *** andrzejku left
[06:37] *** firstdayonthejob joined
[06:37] *** leedo left
[06:37] *** leedo joined
[06:42] *** firstdayonthejob left
[06:45] *** holyghost_ joined
[06:49] <moritz> good moarning

[06:50] <holyghost_> gm

[06:50] *** holyghost_ is now known as holyghostoo

[06:51] *** CIAvash joined
[06:52] *** sno left
[06:56] *** sno joined
[07:03] *** RabidGravy joined
[07:09] *** sno left
[07:19] *** darutoko joined
[07:44] *** holyghostoo left
[07:46] *** dakkar joined
[07:48] *** zakharyas joined
[07:58] *** trnh joined
[08:02] *** jonas2 joined
[08:08] *** sno joined
[08:10] *** wbill left
[08:15] *** bjz joined
[08:42] <ufobat> my perl6 terminates :/

[08:42] *** cooper left
[08:43] <ufobat> https://gist.github.com/ufobat/5a12692130bda9d1c2a0fc17fc7c1eca

[08:43] <ufobat> and sometimes segfaults

[08:47] *** margeas joined
[08:56] *** margeas left
[08:56] *** marcovorg joined
[08:56] *** marcovorg is now known as margeas

[09:02] <ufobat> *** Error in `/home/martin/.rakudobrew/moar-2016.07.1/install/bin/moar': double free or corruption (fasttop): 0x00007f23d00c1f10 ***

[09:17] *** cyphase left
[09:18] *** trnh left
[09:20] *** cyphase joined
[09:27] *** andrewalker joined
[09:30] *** Rawriful joined
[09:39] *** holyghost left
[09:40] *** holyghost joined
[09:50] *** NEveD left
[09:53] *** pierre_ joined
[09:53] *** mcmillhj joined
[09:56] *** tbrowder joined
[09:58] *** mcmillhj left
[10:05] *** mcmillhj joined
[10:10] *** mcmillhj left
[10:14] <tbrowder>  /whois Zoffix

[10:15] *** labster left
[10:18] <moritz> I've often asked myself who I am; I wonder why an IRC server should know

[10:19] *** mcmillhj joined
[10:24] *** mcmillhj left
[10:24] *** cpage_ left
[10:25] <Zoffix> heh

[10:27] <DrForr> The shad^opers know.

[10:28] *** rindolf joined
[10:33] *** mcmillhj joined
[10:35] *** TEttinger left
[10:38] *** araujo joined
[10:39] *** mcmillhj left
[10:39] *** araujo left
[10:41] *** kaare_ joined
[10:46] *** mcmillhj joined
[10:48] *** pierre_ left
[10:49] *** pierre_ joined
[10:50] *** mcmillhj left
[10:52] <dalek> doc: 851909c | (Tom Browder)++ | doc/Language/about.pod6:

[10:52] <dalek> doc: Add onfo on this doc and its overview status

[10:52] <dalek> doc: 

[10:52] <dalek> doc: Reference *CONTRIBUTING.md* and *S26* as the primary sources of this info.

[10:52] <dalek> doc: review: https://github.com/perl6/doc/commit/851909c9b1

[10:52] *** pierre_ left
[10:53] <dalek> doc: 36a9232 | (Tom Browder)++ | doc/Language/about.pod6:

[10:53] <dalek> doc: fix typo

[10:53] <dalek> doc: review: https://github.com/perl6/doc/commit/36a9232936

[10:55] <tbrowder> moritz: I was just reading about irc commands, i guess /whois and such don't work here (at least in this entry place in my irc client). What is the most used irc client here I wonder?

[10:56] <Zoffix> Works here. I think you typed / twice, because it's not meant to show up in the channel

[10:56] <tbrowder> I think it's my client.

[10:57] <Zoffix> Oh, there's actually a space before it. Type it with / as the very first character

[10:57] <moritz> tbrowder: right, IRC commands typically have to start with a slash, no spaces before it allowed

[10:57] <Zoffix> WHOIS is part of the IRC protocol, so I'd be very suspicious of an IRC client that doesn't support it :P

[10:58] <lizmat> works fine in Textual  :-)

[10:58] *** rindolf left
[10:59] <tbrowder> Okay, that works, another finger fumble trying one-finger typing on an iPad with MS trying to tell me what I'm trying to say...

[11:00] *** pierre_ joined
[11:01] *** mcmillhj joined
[11:03] *** kid51 joined
[11:05] *** pierre_ left
[11:06] *** mcmillhj left
[11:10] <dalek> doc: d9ae2fc | (Tom Browder)++ | doc/Language/about.pod6:

[11:10] <dalek> doc: some tweaks

[11:10] <dalek> doc: review: https://github.com/perl6/doc/commit/d9ae2fc70b

[11:27] *** cooper joined
[11:28] *** jkramer joined
[11:28] <jkramer> Ahoy!

[11:30] <jkramer> What's the HTTP client module of choice these days for P6? I found a few on modules.perl6.org, but all of them are apparently about to be completely rewritten or don't support HTTPS.

[11:32] *** cooper left
[11:37] <dalek> doc: b876885 | (Tom Browder)++ | doc/Language/about.pod6:

[11:37] <dalek> doc: change case of HTML for consistency on the page

[11:37] <dalek> doc: review: https://github.com/perl6/doc/commit/b876885815

[11:43] *** ZoffixMobile joined
[11:43] *** NEveD joined
[11:43] <ZoffixMobile> jkramer, I use HTTP::UserAgent

[11:44] <ZoffixMobile> LWP::Simple has a nasty bug in it, rendering it useless. There's HTTP::Tinyish, but it uses 'curl' under the hood and fails if it's not installed.

[11:45] <ZoffixMobile> And last, but not least, there's Mojo::UserAgent:from<Perl5>

[11:51] <jkramer> I just tested Tinyish, it fails on HTTPS URLs for some reason. Weird that it uses curl, because curl obviously supports https

[11:56] <timotimo> has anybody been using PRE and POST blocks in production code?

[11:59] *** CIAvash left
[12:01] *** bjz left
[12:02] *** pierre_ joined
[12:05] *** bjz joined
[12:07] *** pierre_ left
[12:08] *** smls joined
[12:18] <[Coke]> "moaty nine"++

[12:18] *** smls_ joined
[12:18] *** smls left
[12:20] *** canopus left
[12:20] *** sena_kun joined
[12:23] <tbrowder> ref panda and zef: both show LTA msgs when asked to (1) install a module that cannot be found or (2) install a module that is already installed (panda is the more voluble of the two).

[12:24] *** smls_ is now known as smls

[12:25] *** canopus joined
[12:31] <timotimo> %)

[12:33] <masak> tbrowder: sounds like something that could be reported to the github issue queues, perhaps.

[12:34] <awwaiid> I cant' remember and google is failing -- is there a magical var that has the current for loop count? like for @something -> $n { ... var has 1, 2, 3, ... }

[12:35] <smls> awwaiid: Not exactly, but you can use  $++

[12:35] <yoleaux> 2 Aug 2016 17:11Z <TimToady> smls: you can autogen the function directly: my &prod = &prefix:<[*]>; say prod 1..5

[12:35] <yoleaux> 2 Aug 2016 17:31Z <TimToady> smls: and the reason we don't have a .product to go with .sum is that .sum can be heavily optimized for huge ranges like sum 1 .. 10¬π‚Å∞‚Å∞‚Å∞ whereas heavy use of factorials would probably just cache the sequence from [\*]

[12:35] <ufobat> https://gist.github.com/ufobat/68979f84a4830b55fe9ff6878436d782 :-)

[12:36] <awwaiid> smls: $++ not in docs.perl6.org index :(

[12:36] <perlpilot> m: my @a = "a".."z";  for @a.kv -> $i, $v { say "$i: $v" }

[12:36] <camelia> rakudo-moar 1488b3: OUTPUT¬´0: a‚ê§1: b‚ê§2: c‚ê§3: d‚ê§4: e‚ê§5: f‚ê§6: g‚ê§7: h‚ê§8: i‚ê§9: j‚ê§10: k‚ê§11: l‚ê§12: m‚ê§13: n‚ê§14: o‚ê§15: p‚ê§16: q‚ê§17: r‚ê§18: s‚ê§19: t‚ê§20: u‚ê§21: v‚ê§22: w‚ê§23: x‚ê§24: y‚ê§25: z‚ê§¬ª

[12:36] <smls> awwaiid: $ is an implicitly declared state variable. You can use it like any other state variable, e.g. increment it with ++ :)

[12:37] <perlpilot> Using .kv is more better though  ;)

[12:37] <awwaiid> smls: implicit to what scope?

[12:38] <awwaiid> perlpilot: ah .kv; I kept trying to just do @stuff -> $a, $n but got htem two at a time. forgot about .kv

[12:38] *** freezerburnv joined
[12:39] <smls> awwaiid: Each instance of $ is its "own" scope

[12:39] <smls> m: for ^5 { say $++; say $++ }

[12:39] <camelia> rakudo-moar 1488b3: OUTPUT¬´0‚ê§0‚ê§1‚ê§1‚ê§2‚ê§2‚ê§3‚ê§3‚ê§4‚ê§4‚ê§¬ª

[12:39] <perlpilot> awwaiid: you can also do:  my @a = "a".."z";  for @a.pairs -> $p { say "{$p.key}: {$p.value}" }

[12:39] <awwaiid> m: for <a b c> -> $a { say "$a - {$++} {$++}" ; for @stuff -> $b { say "inner $b - {$++}" } } # fascinating

[12:39] <camelia> rakudo-moar 1488b3: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '@stuff' is not declared‚ê§at <tmp>:1‚ê§------> 3c> -> $a { say "$a - {$++} {$++}" ; for 7‚èè5@stuff -> $b { say "inner $b - {$++}" } ‚ê§¬ª

[12:39] *** itaipu joined
[12:39] <awwaiid> m: my @stuff = <a b c>; for @stuff -> $a { say "$a - {$++} {$++}" ; for @stuff -> $b { say "inner $b - {$++}" } } # fascinating

[12:39] <camelia> rakudo-moar 1488b3: OUTPUT¬´a - 0 0‚ê§inner a - 0‚ê§inner b - 1‚ê§inner c - 2‚ê§b - 1 1‚ê§inner a - 3‚ê§inner b - 4‚ê§inner c - 5‚ê§c - 2 2‚ê§inner a - 6‚ê§inner b - 7‚ê§inner c - 8‚ê§¬ª

[12:40] *** pierre_ joined
[12:40] <awwaiid> so implicit to most local block. gotchya

[12:40] <vcv> Having a brain fart here... is there a way to shorten this? @a = sort *<foo>, @a;

[12:40] <jnthn> @a .= sort *<foo>

[12:41] *** kent\n left
[12:41] <smls> jnthn: Isn;t there a colon missing after 'sort'

[12:41] <smls> or parens

[12:42] *** kent\n joined
[12:42] *** kent\n left
[12:42] *** kent\n joined
[12:42] <jnthn> ah, yes

[12:42] <jnthn> @a .= sort(*<foo>)

[12:43] <vcv> ah there it is.  i had tried without the parens. thanks!

[12:43] *** Sgeo__ left
[12:44] *** lichtkind__ joined
[12:46] *** ZoffixMobile left
[12:46] *** zakharyas left
[12:47] *** wamba joined
[12:48] *** lichtkind_ left
[12:52] *** zakharyas joined
[12:57] *** sufrostico joined
[12:58] *** AlexDaniel joined
[13:05] *** skids joined
[13:06] <ufobat> i am disapointed :( my perl6 segfaults so often :(

[13:07] <jnthn> Have you golfed the problem and reported it?

[13:07] <ufobat> no :-( i dont know how, its a lot of supplies and stuff

[13:08] <jnthn> Can you at least write up instructions for how it can be reproduced and file those? :)

[13:08] *** mcmillhj joined
[13:08] <jnthn> That's a starting point for others to be able to golf/solve it

[13:10] <ufobat> there are a couple of github repos involved, all with changes ... *sigh*

[13:10] <ufobat> i am playing around with p6w

[13:12] <ufobat> jnthn,  i will try :-)

[13:12] <jnthn> ufobat: OK, thanks.

[13:15] *** margeas left
[13:18] *** santhosh_k joined
[13:19] <ufobat> i am afraid that i will add quite a useless bug report :/

[13:20] *** santhosh_k left
[13:20] <jkramer> What's the name of that P5 module that took a list of words and return "word1, word2, word3 and word4"?

[13:20] <jkramer> And what's the easiest way to do that in P6? :)

[13:22] <jkramer> Found it, Text::Conjunct :)

[13:24] * moritz would have expected Lingua::EN::Enumeration or something like that

[13:29] * nine wouldn't be surprised if both existed

[13:30] <mst> and at least one more in a really bizarre namespace ... that will eventually turn out to be better

[13:31] <nine> As long as there's no ::ButMaintained version of it...

[13:31] * [Coke] tries out 'task' again based on awwaiid's suggestion

[13:32] <[Coke]> ::Butt::Maintained

[13:32] <smls> jkramer: This seems to work... https://gist.github.com/smls/98e28d5c23783d9e1ad86f25b6bb1e15

[13:34] <smls> too bad a signature like  ($conj, *@words, *$word)  is not allowed in Perl 6...

[13:35] <unmatched}> jkramer: the easiest way would be to use the Perl 6 module for it :) http://modules.perl6.org/dist/Lingua::Conjunction

[13:36] <moritz> [Coke]: unmaintained butts can quickly lead to the proverbial pain in the butt :-)

[13:37] <jkramer> smls: Nice, guess I'll use that then. I was playing with the Z operator to find the most awesome shortest way to do it, but can't come up with something clever that actually works :)

[13:38] <jkramer> unmatched}: That's even better cleverer :)

[13:40] *** ptolemarch joined
[13:40] <AlexDaniel> m: say WHAT ‚Äò.‚Äô.IO.absolute; say WHAT ‚Äò.‚Äô.IO.abspath

[13:40] <camelia> rakudo-moar 1488b3: OUTPUT¬´(Str)‚ê§(Str)‚ê§¬ª

[13:41] <AlexDaniel> can somebody comment on this ‚Üë ?

[13:41] <AlexDaniel> docs claim that .absolute should return a Path object

[13:41] <AlexDaniel> which is a bit confusing because .abs*path* is possibly a better candidate for that behavior

[13:42] <unmatched}> bisect: say WHAT ‚Äò.‚Äô.IO.abspath

[13:42] <bisectable> unmatched}: On both starting points (good=2015.12 bad=1488b39) the exit code is 0 and the output is identical as well

[13:42] <bisectable> unmatched}: Output on both points: (Str)

[13:42] <AlexDaniel> but none of these is actually returning a Path, so what's the actual problem?

[13:42] <unmatched}> I'd expect IO too, especially since it stringifies to a Str anyway

[13:42] <AlexDaniel> is it a documentation bug? Or is it a rakudo bug? And if that's the problem with rakudo, what would be the right expected behavior?

[13:44] <unmatched}> Unless I'm misremembering, I think there was a conversation on this topic, and the argument was that internally the first result would be a Str, so that's returned and if the user wants an IO, they'd call .IO. Returning an .IO would require turning the .Str to .IO and if the user wanted a Str, there'd be this unwanted shuffling between Str -> IO -> Str.

[13:44] <moritz> then the docs should be updated

[13:44] <AlexDaniel> there are some tests that do ÔΩ¢.absolute.IOÔΩ£, which *maybe* means that indeed it should be a Str‚Ä¶ couldn't find any tetst for .abspath :(

[13:44] <AlexDaniel> tests*

[13:44] <moritz> I dimly recall that the return type changed at some point

[13:45] <tbrowder> masak: WILCO

[13:45] <AlexDaniel> committable: releases say WHAT ‚Äò.‚Äô.IO.abspath

[13:45] <committable> AlexDaniel: ¬¶¬´2015.10,2015.11,2015.12,2016.02,2016.03,2016.04,2016.05,2016.06,2016.07,HEAD¬ª: (Str)

[13:45] <AlexDaniel> committable: releases say WHAT ‚Äò.‚Äô.IO.absolute

[13:45] <committable> AlexDaniel: ¬¶¬´2015.10,2015.11,2015.12,2016.02,2016.03,2016.04,2016.05,2016.06,2016.07,HEAD¬ª: (Str)

[13:48] <AlexDaniel> unmatched}: interestingly, the way I stumbled upon this is because I had somethisg like this in the code: ‚Äò‚Ä¶‚Äô.IO.abspath.IO

[13:48] <AlexDaniel> this .IO‚Ä¶.IO looked weird, so I started looking for alternatives

[13:51] <AlexDaniel> after all, it is a bit weird to have two methods that return exactly the same thing

[13:51] <unmatched}> Yeah, that's LTA and the returned type can be argued both ways.

[13:52] <unmatched}> I actually see I've tacked on a spurious .IO call on a return value of a .child due to this issue.

[13:52] <unmatched}> (in one of my recent codes)

[13:53] <unmatched}> benchable: for ^10000 { my $x = "foo".IO }

[13:53] <benchable> unmatched}: ¬¶¬´for¬ª:Cannot find this revision

[13:54] <unmatched}> benchable: HEAD for ^10000 { my $x = "foo".IO }

[13:54] <benchable> unmatched}: ¬¶¬´HEAD¬ª:0.2336

[13:54] <unmatched}> benchable: HEAD for ^10000 { my $x = "foo".IO.Str }

[13:54] <benchable> unmatched}: ¬¶¬´HEAD¬ª:0.2350

[13:54] <smls> unmatched}: "internally the first result would be a Str" -- wouldn't that be true for all IO functions?

[13:54] <tbrowder> mazak: issue was already there for panda, new issue filed for zef

[13:54] <unmatched}> If there were voting, I'd vote for all such methods to return an IO::Path rather than a plain string

[13:54] <smls> Seems like a dubious reason to avoid returning an IO in this one case.

[13:55] <smls> yeah, what unmatched} said.

[13:55] <perlpilot> unmatched}: I would vote the same

[13:55] <AlexDaniel> m: ‚Äòtest‚Äô.IO.abspath.say

[13:55] <camelia> rakudo-moar 1488b3: OUTPUT¬´/home/camelia/test‚ê§¬ª

[13:56] <AlexDaniel> m: ‚Äò-test‚Äô.IO.abspath.say

[13:56] <camelia> rakudo-moar 1488b3: OUTPUT¬´‚ê§¬ª

[13:56] <AlexDaniel> what the f

[13:56] <AlexDaniel> m: ‚Äò-test‚Äô.IO.absolute.say

[13:56] <camelia> rakudo-moar 1488b3: OUTPUT¬´‚ê§¬ª

[13:56] <AlexDaniel> so .absolute actually calls .abspath

[13:57] *** atta joined
[13:58] <perlpilot> AlexDaniel: huh ... there's an explicit check for $!path.starts-with('-')

[13:58] <smls> Why does it not like filenames that starty with dashes?

[13:58] <AlexDaniel> perhaps someone wanted to handle ‚Äò-‚Äô specially

[13:58] <AlexDaniel> and wrote starts-with instead?

[13:59] <AlexDaniel> OK rakudobugging this, but don't know what to do with .absolute vs .abspath thing

[14:00] <smls> Does it have to do with $*PROGRAM  returning "-e".IO in case of oneliners?

[14:00] * lizmat refrains from commentary

[14:01] * unmatched} wonders how come

[14:01] <AlexDaniel> you can still use ‚Äò./-foo‚Äô to make it work, but come on‚Ä¶

[14:01] *** freezerburnv left
[14:03] <smls> AlexDaniel: Yeah, I hope it's a bug and not a "feature", because this is the kind of thing that security exploits are made of.

[14:06] <perlpilot> It's a "feature" that's been there since 2014 when the code read: $!path.substr(0,1) eq '-'  instead of using starts-with()   

[14:06] <perlpilot> Still not sure what that's about other than smls's guess.

[14:07] <AlexDaniel> perlpilot: the first commit seems to be 5870906, but that's still in 2014, yeah

[14:07] <AlexDaniel> also, that's when .absolute was changed to return Str

[14:07] <nine> One day I'm gonna have a close look at the newio branch and figure out, what exactly we missed out on. And will probably light a candle.

[14:08] <smls> $  mkdir test;  cd test;  touch -- -a;  perl6 -e 'dd dir[0].absolute'

[14:08] <smls> ""

[14:09] <perlpilot> smls: aye, that's an unfortunate side-effect

[14:14] <smls> perlpilot: I had hoped that maybe at least dir() is aware of it and produces "./-e".IO, but no.

[14:15] *** freezerburnv joined
[14:15] <smls> If this isn't fixed, I forsee it'll become an attack vector against server applications etc. written in Perl 6... :(

[14:19] *** NEveD left
[14:19] *** freezerburnv left
[14:20] <AlexDaniel> #128840

[14:20] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128840

[14:20] <AlexDaniel> by the way, does text/html bug reports work OK for everyone?

[14:21] <ufobat> jnthn, https://rt.perl.org/Public/Bug/Display.html?id=128839 

[14:21] <AlexDaniel> ufobat++

[14:23] *** hcit joined
[14:23] <unmatched}> AlexDaniel: looks fine on my box

[14:24] *** hcit left
[14:30] <AlexDaniel> by the way, maybe it's not too bad because ‚Äò‚Äô.IO is not valid

[14:30] <ugexe> .absolute will always give the absolute path while .Str will give the path that the path was originally created with. And .abspath is not documented

[14:30] <AlexDaniel> ugexe: https://docs.perl6.org/type/IO$COLON$COLONPath#method_abspath

[14:33] <ugexe> ah i meant speculations. see https://github.com/rakudo/rakudo/pull/666

[14:33] *** nightfrog left
[14:35] *** margeas joined
[14:36] *** rindolf joined
[14:37] <smls> what kind of URL is "type/IO$COLON$COLONPath" o.O

[14:37] <AlexDaniel> https://rt.perl.org/Ticket/Display.html?id=126262

[14:38] *** margeas is now known as vittooz

[14:39] <AlexDaniel> ok, given that there's a pull request #666 and also a bug report, not going to submit anything.

[14:39] <unmatched}> smls: https://docs.perl6.org/type/IO::Path#method_abspath also works :)

[14:39] <unmatched}> smls: as for the reason for the URL being so colonically-inclined, it's a side effect of making files not contain any special characters.

[14:40] <unmatched}> (so they don't conflict on the server side, since they're all just static files on disk)

[14:40] <[Coke]> : is technically reserved or somehow not allowed.

[14:40] <lizmat> AlexDaniel: https://github.com/rakudo/rakudo/commit/02fdcf9a1f

[14:41] <unmatched}> : can't be used in filenames on Windows and I think linux uses them as PATH separators too

[14:41] <AlexDaniel> lizmat: that was quick. Thanks!

[14:42] <[Coke]> (er, my comment was for URLs). but filenames, also, yes, can be problematic.

[14:42] <lizmat> afk&

[14:45] *** cdg joined
[14:56] <ugexe> the one thing i would have liked most from newio was IO::Huh

[14:56] *** RabidGravy left
[15:02] *** wamba left
[15:06] *** benchable left
[15:08] *** benchable joined
[15:08] *** pierre_ left
[15:09] *** salva_ left
[15:10] *** BrassLantern joined
[15:10] *** BrassLantern left
[15:10] *** BrassLantern joined
[15:15] *** RabidGravy joined
[15:18] <jkramer> https://docs.perl6.org/language/operators#prefix_temp - can anyone explain what is true? > "temporizes" the variable passed as the argument, which means it is reset to its old value on scope exit. (This is similar to the local operator in Perl 5, except that temp does not reset the value).

[15:18] <jkramer> Does it reset or not? :)

[15:18] <jkramer> And if not, what's the point of it?

[15:19] *** cdg left
[15:19] <unmatched}> jkramer: my $x = "foo"; { temp $x; say $x; $x = "bar"; say $x }; say $x; in P6 will print "foo bar foo", but when using local in P5 it'll print "[uninitialized variable warning] bar foo"

[15:19] <jnthn> m: my $a = 42; { temp $a; say $a; $a++; say $a; }; say $a

[15:19] <camelia> rakudo-moar 02fdcf: OUTPUT¬´42‚ê§43‚ê§42‚ê§¬ª

[15:20] <jnthn> And then what unmatched} said :)

[15:20] <unmatched}> It's reset *to old value* when scope is left, but unlike P5, it's NOT reset to an undefined value inside the scope

[15:20] *** cdg joined
[15:20] <jkramer> Ah, I get it. Thanks!

[15:21] <gfldex> the reference to P5 doesn't belong there

[15:21] <jast> it could probably be clarified apart from that

[15:21] <unmatched}> jkramer: feel free to improve it by submitting a PR: 

[15:21] <unmatched}> jkramer: https://github.com/perl6/doc/blob/master/doc/Language/operators.pod6#L1112

[15:21] <unmatched}> gfldex: agreed

[15:22] <unmatched}> All P5 references should be confined to 5to6 guides IMO

[15:22] <jast> actually I guess it's clear enough if you simply remove the remark about P5

[15:23] <jkramer> jast: Agreed, that was the only confusing part about it really :)

[15:23] <jast> minor clarification about exactly what old value it is reset to might be good (value at the time the variable is temporized, presumably)

[15:23] <AlexDaniel> unmatched}: I agree

[15:24] <jast> m: my $a = 42; { $a++; temp $a; $a++; say $a; }; say $a

[15:24] <camelia> rakudo-moar 02fdcf: OUTPUT¬´44‚ê§43‚ê§¬ª

[15:24] <AlexDaniel> hm, how many references to other languages are there?

[15:24] *** cdg left
[15:25] <AlexDaniel> possibly none

[15:26] *** acrussell joined
[15:31] *** nightfrog joined
[15:39] *** mspo joined
[15:43] <Xliff> .tell FROGGS all tests in 07dtd now pass. Thanks!

[15:43] <yoleaux> Xliff: I'll pass your message to FROGGS.

[15:45] *** NEveD joined
[15:50] *** cdg joined
[15:51] <unmatched}> star: say .parts.join.split("g")[*-1] // .Str given $*PERL.compiler.version

[15:51] <camelia> star-m 2016.04: OUTPUT¬´20164‚ê§¬ª

[15:52] <unmatched}> Oh... never mind. I was about to ask a question, but then realized where my mistake is at :)

[15:52] <gregf_> m: say $*PERL.compiler.version

[15:52] <camelia> rakudo-moar 02fdcf: OUTPUT¬´v2016.07.1.126.g.02.fdcf.9‚ê§¬ª

[15:53] <gregf_> m: say .split("-").map(&tclc) given "foo-bar-baz"

[15:53] <camelia> rakudo-moar 02fdcf: OUTPUT¬´(Foo Bar Baz)‚ê§¬ª

[15:56] <unmatched}> m: say .Str ~~ /"g"/ ?? .parts.join.split("g")[*-1] !! .Str given $*PERL.compiler.version

[15:56] <camelia> rakudo-moar 02fdcf: OUTPUT¬´2fdcf9‚ê§¬ª

[15:56] <unmatched}> star: say .Str ~~ /"g"/ ?? .parts.join.split("g")[*-1] !! .Str given $*PERL.compiler.version

[15:56] <camelia> star-m 2016.04: OUTPUT¬´2016.04‚ê§¬ª

[15:56] <unmatched}> (that's what I was going for, if anyone was curious; the commit or tag for the currently running Rakudo build)

[15:57] *** nightfrog left
[15:57] *** nightfrog joined
[16:03] *** mcmillhj left
[16:14] *** cdg left
[16:15] <AlexDaniel> is there any way to tweak the priority of a multi?

[16:15] <psch> what does "priority" mean there?

[16:16] <hahainternet> here's a stupid question, i'm designing a litte storage class (actually in Go but that's besides the point) and i'd like a way to key items that isn't a string, but is as close to a string as possible. ie a ruby symbol

[16:16] <unmatched}> Move it in the source

[16:17] <hahainternet> that way it cannot trivially be mistaken for a string

[16:17] <hahainternet> i see on the perl6 from ruby page that colon pair syntax is a 'workaround' for this behaviour

[16:17] <hahainternet> but is there anything nicer?

[16:18] <unmatched}> m: multi foo ($ where * < 10) { say "meow" }; multi foo ($ where * < 100) { say "moo" }; foo 9

[16:18] <camelia> rakudo-moar 02fdcf: OUTPUT¬´meow‚ê§¬ª

[16:18] <unmatched}> m: multi foo ($ where * < 100) { say "moo" }; multi foo ($ where * < 10) { say "meow" }; foo 9

[16:18] <camelia> rakudo-moar 02fdcf: OUTPUT¬´moo‚ê§¬ª

[16:19] <unmatched}> hahainternet: "actually in Go".... 

[16:19] <hahainternet> heh that's a very nice compromise, and i assume lexical declarations will overtake globals?

[16:19] * unmatched} presses the "Flamewar" button

[16:19] <hahainternet> unmatched}: i write it for my day job

[16:19] <unmatched}> Traitor! :P

[16:19] <hahainternet> but just in case anyone asked for code samples

[16:19] <hahainternet> go has no symbols, nor any succinct way of creating a non string stringy thing

[16:20] <hahainternet> so, whenever i come across a scenario like this i turn to perl6 and usually find it solved elegantly and succinctly

[16:20] <unmatched}> hahainternet: not sure what you're asking my multis above were an example related to AlexDaniel's question.

[16:21] <hahainternet> unmatched}: i know, see my question above your replies :)

[16:21] *** NEveD left
[16:21] <psch> hahainternet: fwiw, the thing we use keys most for in perl6 is hashes, which coerce their keys to Str

[16:21] <psch> hahainternet: having non-Str keys is what takes extra work

[16:21] <hahainternet> psch: oh i didn't even realise they were coerced

[16:22] <unmatched}> hahainternet: sure, but wouldn't the folks in #go-lang know more about how to solve it? The Perl 6 way is to parametarize the hash to not Str its keys, but I'm unsure how that can be translated into Go

[16:22] <psch> m: sub f { }; my %h; %h{&f} = "foo"; say %h.keys

[16:22] <camelia> rakudo-moar 02fdcf: OUTPUT¬´Sub object coerced to string (please use .gist or .perl to do that)  in block <unit> at <tmp> line 1‚ê§(f)‚ê§¬ª

[16:22] <hahainternet> unmatched}: oh i already know the answer in Go

[16:22] <psch> hahainternet: see the warning :)

[16:22] <hahainternet> psch: so is there an easy non string keyed hash declaration?

[16:22] <psch> m: sub f { }; my %h; %h{&f} = "foo"; # just to prove its not the enumeration

[16:22] <camelia> rakudo-moar 02fdcf: OUTPUT¬´Sub object coerced to string (please use .gist or .perl to do that)  in block <unit> at <tmp> line 1‚ê§¬ª

[16:23] <psch> m: my %h{Any}; sub f { }; %h{&f} = "foo";

[16:23] <camelia> rakudo-moar 02fdcf: ( no output )

[16:23] <psch> hahainternet: FSDO "easy"

[16:23] *** dakkar left
[16:23] <unmatched}> m: my %hash{Any}; %hash{&say} = 'tis a say sub'; say %hash.keys; say %hash{&say}

[16:23] <camelia> rakudo-moar 02fdcf: OUTPUT¬´(sub say (| is raw) { #`(Sub|71440392) ... })‚ê§tis a say sub‚ê§¬ª

[16:23] <hahainternet> haha no i get Any, but the question is more about what's the stringiest but non string type in perl6

[16:23] <psch> hahainternet: the RHS-y way is :{}

[16:23] <psch> m: say Stringy

[16:23] <camelia> rakudo-moar 02fdcf: OUTPUT¬´(Stringy)‚ê§¬ª

[16:23] <hahainternet> i guess that wasn't clear from my previous question sorry

[16:23] <psch> ...probably?

[16:24] <hahainternet> i'd imagine that matches a string though

[16:24] *** NEveD joined
[16:24] <psch> m: say 5 ~~ Stringy

[16:24] <camelia> rakudo-moar 02fdcf: OUTPUT¬´False‚ê§¬ª

[16:24] <psch> m: say "5" ~~ Stringy

[16:24] <camelia> rakudo-moar 02fdcf: OUTPUT¬´True‚ê§¬ª

[16:24] <psch> well, Str are Stringy..?

[16:24] <hahainternet> i'm looking for something that is not

[16:24] <psch> m: say Stringy.^mro

[16:24] <camelia> rakudo-moar 02fdcf: OUTPUT¬´Method 'mro' not found for invocant of class 'Perl6::Metamodel::ParametricRoleGroupHOW'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:24] <hahainternet> a symbol and a string in ruby are distinct

[16:25] <hahainternet> i mean obviously this is doable a billion different ways with a few characters

[16:25] <hahainternet> but that's no fun

[16:25] *** MilkmanDan left
[16:25] <psch> afaik symbols in perl6 are Str keys that point to (some type of) container in a Stash

[16:25] <psch> m: say CORE::.WHAT

[16:25] <camelia> rakudo-moar 02fdcf: OUTPUT¬´(PseudoStash)‚ê§¬ª

[16:25] <psch> m: say CORE::<&say>.key

[16:25] <camelia> rakudo-moar 02fdcf: OUTPUT¬´Method 'key' not found for invocant of class 'Sub'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:25] <psch> m: say CORE::.keys

[16:26] <camelia> rakudo-moar 02fdcf: OUTPUT¬´(SIGSEGV WhateverCode Slip &callframe Pair SIGHUP &flat &RETURN-LIST utf8 &infix:<‚àñ> CurrentThreadScheduler PromiseStatus StringyEnumeration Distribution &splice &postcircumfix:<{ }> &callsame &GATHER Backtrace PF_INET6 &sinh &infix:<lt> &print &asech NF‚Ä¶¬ª

[16:26] <psch> m: say CORE::.keys[0].WHAT

[16:26] <camelia> rakudo-moar 02fdcf: OUTPUT¬´(Str)‚ê§¬ª

[16:26] *** MilkmanDan joined
[16:26] *** zacts joined
[16:26] <psch> so what i guess the difference between symbols and strings is in ruby is solved by parser state in perl6

[16:27] <hahainternet> in pseudocode: my %h{Symbol-like-type}; %hash{:symbol-syntax}; %hash<whatever> # <-- compile time error (ideally)

[16:27] <psch> well, plus some workarounds, like ."foo"()

[16:28] <hahainternet> also wow i went from %h to %hash, i'm tired

[16:28] <psch> maybe enums fit that symbol-like-type..?

[16:29] <hahainternet> yeah an enum would be fine, just requires declaration ahead of time i think

[16:29] <hahainternet> enums-on-demand i guess

[16:29] <psch> you can also type a hash to a specific type and use subtypes as key i suppose

[16:29] *** NEveD left
[16:29] <hahainternet> or the pair hack on the ruby to perl6 wiki page, but that's just a hack

[16:29] <psch> although that's probably a slightly different direction that the original intent

[16:30] <hahainternet> psch: oh sure, but my question is really all about succinctness

[16:30] <hahainternet> how to do it in the fewest characters

[16:30] <hahainternet> strikes me as a particularly nice feature in ruby, i initially hated it

[16:30] <hahainternet> but now see its appeal

[16:30] <hahainternet> course i bet ruby doesn't catch it at compile time but i may be wrong

[16:30] *** sufrostico left
[16:33] <psch> m: my %h{Pair}; %h{:foo} = 1; say %h.perl; %h<foo> # well, the syntax works :P

[16:33] <camelia> rakudo-moar 02fdcf: OUTPUT¬´(my Any %{Pair} = (:foo) => 1)‚ê§Type check failed in binding to key; expected Pair but got Str ("foo")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:33] <psch> it's not compile time though, but that seems to be a thing we general don't do

[16:34] <harmil_wk> oh hey, should I be rakudobugging that file/line issue on Int.^methods from yesterday? I can't recall if that was something folks wanted.

[16:35] <unmatched}> harmil_wk: I'd say no. I'm currently writing a blog post on the topic and will release a module that makes stuff like that easier

[16:35] <unmatched}> Probably will be done today.

[16:35] <unmatched}> harmil_wk: it'd be:   .sourcery.say for Int.^methods;

[16:36] <unmatched}> And it'll give you correct file/location of actual Rakudo source files along with a link to GitHub

[16:37] <AlexDaniel> m: class Foo { multi method foo ($ where * < 10) { say "meow" } }; class Bar is Foo { multi method foo ($ where * < 100) { say "moo" } }; Bar.new.foo(5)

[16:37] <camelia> rakudo-moar 02fdcf: OUTPUT¬´moo‚ê§¬ª

[16:37] <AlexDaniel> unmatched}: how can I move it here?

[16:37] <harmil_wk> Hmm... is post-processing really the right approach? Then, to find out where my stuff is defined I look at MyClass.^methods, but for core stuff (well, some core stuff) I need a module?

[16:38] <unmatched}> harmil_wk: not exactly. For core stuff you *do* get the correct location where the stuff is defined, it's just not too useful if you want to *develop* rakudo and I see no issues with using a module as a helper feature for core development rather than returning false information for core subs

[16:38] <unmatched}> AlexDaniel: no idea. There's actually a ticket from Ovid on the topic.

[16:38] * unmatched} tries to find it

[16:38] <unmatched}> buggable: rt

[16:39] <buggable> unmatched}, TOTAL: 1364, UNTAGGED: 615, BUG: 417, LTA: 94, JVM: 62, NYI: 32, SEGV: 28, RFC: 26, UNI: 25, PERF: 19, POD: 14, CONC: 11, @LARRY: 10, TODO: 9, PRECOMP: 8, GLR: 6, BUILD: 5, STAR: 4, WEIRD: 3, MOARVM: 2, OSX: 2, CPP: 1, SPEC: 1, LIST: 1, LHF: 1, SPESH: 1, DOCS: 1, NATIVECALL: 1   Details: http://bug.perl6.party/1470328748.html

[16:39] <AlexDaniel> unmatched}: by the way, this question is related to IRC::Client. I can't get ‚Äúhelp‚Äù command to work in bisectable because bisectable treats it like a source to execute

[16:40] <AlexDaniel> unmatched}: of course I can change the regex to ignore [help|source|url]‚Äò?‚Äô? but that's a bit LTA

[16:41] <unmatched}> AlexDaniel: there, placing it first in the source should work.

[16:41] <harmil_wk> unmatched}: Well, I don't know what your module does, so I can't really speak in an informed way. It just feels like when as user wants to know, "hey, how exactly is this defined," it's logical to expect that they get that answer the same way for Int as for MyClass. 

[16:41] <unmatched}> In buggable I did a whole new plugin for such stuff

[16:41] <AlexDaniel> unmatched}: well, not really, because ‚Äúhelp‚Äù is in the base class, and bisectable itself is a subclass

[16:42] *** avenj left
[16:42] <unmatched}> harmil_wk: but that's my point, they *do* get that answer right now. The `.line` and `.number` aren't bogus for Int.^methods, they point to the actual, existing, and correct location in the setting file. 

[16:42] <AlexDaniel> maybe that's not how it should be, I'm not sure now. But it worked great until I stumbled upon this

[16:43] <unmatched}> That's really a Perl 6 limitation and I think an area that should be more defined and maybe more featureful

[16:43] <AlexDaniel> hm

[16:43] <unmatched}> (I can't find the ticket on the ticket page, but searching for tickets from Ovid will give it)

[16:44] *** smls left
[16:44] <unmatched}> m: "{&say.file}:{&say.line}".say; 

[16:44] <camelia> rakudo-moar 02fdcf: OUTPUT¬´gen/moar/m-CORE.setting:29424‚ê§¬ª

[16:44] *** cooper joined
[16:45] <unmatched}> harmil_wk: ^ so here, if you open m-CORE.setting file on line 29424 you'll find the definition for sub `say`, but if we instead return src/core/io_operators.pm:17, that location does not refer to any actual files or line numbers on user's disc. It refers to the location in Rakudo's source and the user would have to obtain that source *at the correct commit* to view the definition. I can't see the rationale for

[16:45] <unmatched}> doing so.

[16:47] <unmatched}> AlexDaniel: here: https://rt.perl.org/Ticket/Display.html?id=123577

[16:48] <unmatched}> Though I don't think what he argues for is possible. We can't know which where {} is more specific in cases like * < 100 vs * < 10 given 9

[16:49] <unmatched}> So the simplest solution is like now, to go by source position. This creates an edge case where we don't know what the source position is, so... 

[16:49] <harmil_wk> unmatched}: isn't that a bit like saying, "it points to the correct post-C-preprocessor pile of unreadable mash that your program got turned into" when working in C? I'll grant that m-CORE.setting is much more readable than most post-C-preprocessor droppings, but still...

[16:49] * unmatched} refrains from proposing any possibly-stupid ideas here

[16:49] <ilmari> harmil_wk: that's why the c preprocessor inserts #line directives, so that error messages refer to the input files

[16:49] <AlexDaniel> unmatched}: thanks

[16:49] *** pierre_ joined
[16:50] <jnthn> Maybe for CORE.setting we simply should not show line numbers unless some I'm-a-Rakudo-developer environment flag is set. Then people can't be confused by them. :P

[16:50] <unmatched}> harmil_wk: I don't care about C. m-CORE.setting is nothing more than @all-source-files.join("#line 1 $_.filename"), so the readability argument is a poor one.

[16:51] <unmatched}> I rather have the location in a 40,000-line file than just an essentially random filename I'd have trouble locating.

[16:51] <unmatched}> And that argument assumes there isn't a CoreHackers::Sourcery that can give you all the nice details, which there will be tonight :)

[16:52] <harmil_wk> In fact, settings already has directives like "#line 1 src/core/core_prologue.pm" so really the work is done on the generation side, we just need $?FILE and $?LINE to play ball.

[16:53] <AlexDaniel> yeah, I also don't think that it is possible. But 123577++ anyway because it raises some very good questions

[16:53] <unmatched}> harmil_wk: play ball how? What will you be doing exactly with those $?FILE and $?LINE?

[16:53] *** wamba joined
[16:53] *** mcmillhj joined
[16:54] <harmil_wk> unmatched}: let me see if I can dredge up the perl6-language list discussion about this. I think it will be illustrative. We've been around this particular mulberry bush a few times in the past.

[16:55] <unmatched}> harmil_wk: those $?FILE and $?LINE don't refer to any specific entitiy. You need the commit number or the tag for the specific Rakudo build that generated those $?FILE and $?LINE and even when you do have that commit number, you have to obtain the source code at that specific commit, for the information contained in those variables to be of any use.

[16:55] <unmatched}> By comparison, the current .line and .file do refer to the actual source code

[16:56] <[Coke]> unmatched}: where is the code for buggable?

[16:56] <unmatched}> buggable: source

[16:56] <buggable> unmatched}, See: https://github.com/zoffixznet/perl6-buggable

[16:56] <harmil_wk> unmatched}: I'm not sure why you're talking about source control, here.  I thought we were talking about files, not version control metadata. My copy of rakudo might be in CVS source control...

[16:56] *** pierre_ left
[16:56] * harmil_wk rushes to hide his CVS checked out copy of rakudo under some books...

[16:56] <unmatched}> :)

[16:57] *** cooper left
[16:57] <unmatched}> harmil_wk: OK. Then what file would $?FILE refer to?

[16:57] <unmatched}> For example, for &.say

[16:58] <unmatched}> My module gives me src/core/io_operators.pm, line 20, at commit c843682 and if I combine those three bits of info, I get the actual entity and indeed that's the definition of sub say() for the current compiler I'm running on: https://github.com/rakudo/rakudo/blob/c843682/src/core/io_operators.pm#L20

[16:59] *** Actualeyes left
[16:59] <unmatched}> If I run {say "{.file}:{.line}" given &say}, it gives me gen/moar/m-CORE.setting:28036 and indeed, if I open that file, I get the location of where the sub say() is defined.

[16:59] <harmil_wk> I'm having trouble finding the conversation. I have a vague memory it was in the mid 2000s, but I think the idea was that $?FILE and $?LINE should be settable lexically so that you can describe where the Perl 6 you're currently parsing was generated from. Then each subsequent line should increase $?LINE. This is almost exactly what the CPP does, but it uses comments.

[17:00] <harmil_wk> As far as things like commits... I think that's a great place for a module to come into play

[17:00] <unmatched}> harmil_wk: sure, that's probably doable, but I my point is that were it done, the information contained in $?FILE $?LINE would be somewhat useless.

[17:00] *** cooper joined
[17:01] <harmil_wk> unmatched}: If it seemed like I was saying that your module wasn't worth writing, I'm absolutely not. I think it's great. You want more metadata, and that's wonderful.

[17:01] <unmatched}> And that's why I'm talking about commits. You need to know which commit the setting was compiled from to make sense of what such $?FILE and $?LINE are talking about

[17:01] <unmatched}> harmil_wk: no, that's not how I interpreted it.

[17:03] <unmatched}> As I've said, even without the module, I feel that changing Rakudo to give original source locations rather than setting location for core subs would provide less information than we currently do.

[17:04] <unmatched}> And would introduce the inconsistency for .file and .line's behaviour

[17:04] * unmatched} leaves to do $work

[17:05] *** hankache joined
[17:05] <hankache> hola #perl6

[17:06] <AlexDaniel> o/

[17:09] *** kalkin-_ is now known as kalkin-

[17:10] *** PapaChub joined
[17:13] *** spider-mario joined
[17:24] *** mohae joined
[17:26] *** mohae_ left
[17:27] *** dsp-_ joined
[17:28] *** dsp- left
[17:33] *** setty1 joined
[17:34] *** Fleurety left
[17:41] *** Fleurety joined
[17:43] <dalek> doc: a92017a | nsvedberg++ | doc/Language/nativecall.pod6:

[17:43] <dalek> doc: Change 'mayor' to 'major' in my_version pointers example

[17:43] <dalek> doc: review: https://github.com/perl6/doc/commit/a92017a597

[17:43] <dalek> doc: 6d12e31 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Language/nativecall.pod6:

[17:43] <dalek> doc: Merge pull request #795 from nsvedberg/nativecall-typo-fix

[17:43] <dalek> doc: 

[17:43] <dalek> doc: Change 'mayor' to 'major' in my_version pointers example

[17:43] <dalek> doc: review: https://github.com/perl6/doc/commit/6d12e31158

[17:44] <unmatched}> harmil_wk: one thing I'm thinking is for .file/.line on core stuff to return an object that stringifies to settings.file/line, but has properties that refer to the original file/line (including the commit). That's just thoughts on the interface; I've no idea what sort of implementation/performance details we're looking at

[17:44] <unmatched}> m: &say.file.^name.say

[17:44] <camelia> rakudo-moar 02fdcf: OUTPUT¬´Str‚ê§¬ª

[17:44] <unmatched}> Another contender for returning IO::Path rather than plain Str ^

[17:45] <unmatched}> m: use Test; &is.file.say

[17:45] <camelia> rakudo-moar 02fdcf: OUTPUT¬´perl#sources/C712FE6969F786C9380D643DF17E85D06868219E (Test)‚ê§¬ª

[17:45] <unmatched}> hm.... or maybe not

[17:46] *** cdg joined
[17:47] *** labster joined
[17:47] <unmatched}> (keeping in mind the location in original sources is different from offset from `#line 1 src/core/foo.pm6` line, due to backend-specific clauses and stripped comments)

[17:47] *** vittooz left
[17:47] <[Coke]> don't we have the rakudo tag in the compiler version?

[17:50] <unmatched}> Yeah

[17:50] <unmatched}> m: my $where = .Str ~~ /g/ ?? .parts.join.split("g")[*-1] !! .Str given $*PERL.compiler.version;

[17:50] <camelia> rakudo-moar 02fdcf: ( no output )

[17:50] <unmatched}> m: say .Str ~~ /g/ ?? .parts.join.split("g")[*-1] !! .Str given $*PERL.compiler.version;

[17:50] <camelia> rakudo-moar 02fdcf: OUTPUT¬´2fdcf9‚ê§¬ª

[17:50] <unmatched}> star: say .Str ~~ /g/ ?? .parts.join.split("g")[*-1] !! .Str given $*PERL.compiler.version;

[17:50] <camelia> star-m 2016.04: OUTPUT¬´2016.04‚ê§¬ª

[17:59] *** sno left
[17:59] *** acrussell left
[17:59] *** webstrand left
[18:00] *** firstdayonthejob joined
[18:12] *** AlexDaniel left
[18:14] *** lostinfog joined
[18:16] *** khw joined
[18:17] *** webstrand joined
[18:20] *** jonas2 left
[18:28] *** FROGGS joined
[18:30] <harmil_wk> unmatched}: sounds reasonable

[18:34] *** AndyBotwin joined
[18:34] *** acrussell joined
[18:34] *** AndyBotwin left
[18:36] <grondilu> m: say $*PROGRAM

[18:36] <camelia> rakudo-moar 02fdcf: OUTPUT¬´"<tmp>".IO‚ê§¬ª

[18:38] *** avenj joined
[18:43] <moritz> note that camelia fudges the name of tempfiles in output

[18:52] *** shlomif joined
[18:52] *** sno joined
[18:53] *** rindolf left
[18:56] *** shlomif is now known as rindolf

[18:57] *** sno left
[18:59] *** zacts left
[19:09] *** sno joined
[19:11] <dalek> doc: 82a3be5 | (Jan-Olof Hendig)++ | doc/Type/Setty.pod6:

[19:11] <dalek> doc: Added docs for Setty.Bag

[19:11] <dalek> doc: review: https://github.com/perl6/doc/commit/82a3be5d10

[19:14] *** darutoko left
[19:18] *** sjoshi joined
[19:23] *** stv joined
[19:24] *** zakharyas left
[19:25] *** stv left
[19:32] * unmatched} downloads the sound of a pin dropping

[19:34] *** sjoshi left
[19:37] <dalek> doc: f50b20a | (Jan-Olof Hendig)++ | doc/Type/Setty.pod6:

[19:37] <dalek> doc: Added docs for Setty.BagHash

[19:37] <dalek> doc: review: https://github.com/perl6/doc/commit/f50b20a902

[19:49] <dalek> doc: 40d8a1e | coke++ | doc/Language/about.pod6:

[19:49] <dalek> doc: use nbsp

[19:49] <dalek> doc: review: https://github.com/perl6/doc/commit/40d8a1e78c

[19:54] *** rindolf left
[20:02] *** kaare_ left
[20:02] *** mcmillhj left
[20:15] *** khw left
[20:17] *** acrussell left
[20:18] *** AngeloMichael joined
[20:20] *** zakharyas joined
[20:23] *** skids left
[20:24] *** skids joined
[20:27] *** xfix joined
[20:28] *** FROGGS left
[20:29] *** rindolf joined
[20:30] *** khw joined
[20:39] *** espadrine joined
[20:44] *** Khisanth left
[20:48] *** Zoffix left
[20:48] *** rindolf left
[20:54] *** ufobat left
[20:57] *** rindolf joined
[20:57] *** Khisanth joined
[21:02] *** mcmillhj joined
[21:02] *** zakharyas left
[21:04] *** _28_ria joined
[21:07] *** vittooz joined
[21:07] *** rindolf left
[21:08] <RabidGravy> ha, DARPA project called CAMELIA http://www.defenseone.com/technology/2016/08/if-theres-malware-your-toaster-us-military-wants-find-it/130488/

[21:08] <hankache> ha!

[21:12] *** rindolf joined
[21:13] *** skids left
[21:13] *** mcmillhj left
[21:13] *** sufrostico joined
[21:17] <Xliff> m: $*PERL.compiler.version.say

[21:17] <camelia> rakudo-moar 02fdcf: OUTPUT¬´v2016.07.1.126.g.02.fdcf.9‚ê§¬ª

[21:19] <Xliff> star: $*PERL.compiler.version.say

[21:19] <camelia> star-m 2016.04: OUTPUT¬´v2016.04‚ê§¬ª

[21:21] *** vittooz left
[21:21] *** vittooz joined
[21:23] *** itaipu left
[21:25] *** margeas joined
[21:26] *** vittooz left
[21:29] *** PapaChub left
[21:36] *** cdg left
[21:40] *** itaipu joined
[21:40] *** margeas left
[21:44] *** margeas joined
[21:46] *** tbrowder left
[21:47] *** NEveD joined
[21:47] *** lostinfog left
[21:49] *** margeas left
[21:49] *** margeas joined
[21:54] *** hankache left
[21:57] *** wamba left
[21:58] *** PapaChub joined
[22:01] *** Sgeo__ joined
[22:10] *** cdg joined
[22:13] *** BrassLantern left
[22:15] *** cdg left
[22:19] *** TEttinger joined
[22:20] *** ptolemarch left
[22:27] *** Zoffix joined
[22:29] *** firstdayonthejob left
[22:29] *** sufrostico left
[22:30] *** freezerburnv joined
[22:31] *** skids joined
[22:38] *** RabidGravy left
[22:47] *** spider-mario left
[22:49] *** labster left
[22:52] *** labster joined
[23:13] *** kurahaupo joined
[23:14] *** rindolf left
[23:23] *** sufrostico joined
[23:36] *** pierre_ joined
[23:38] *** freezerburnv left
[23:38] *** pierre_ left
[23:47] *** freezerburnv joined
[23:50] *** BenGoldberg joined
[23:53] *** espadrine left
[23:57] *** pierre_ joined
