[00:07] *** tushar left
[00:10] *** [particle] joined
[00:15] *** cpage_ left
[00:16] *** cpage_ joined
[00:20] *** cdg left
[00:22] *** BenGoldberg joined
[00:23] *** espadrine left
[00:37] *** sufrostico joined
[00:37] *** sufrostico left
[00:37] *** sufrostico joined
[00:39] *** nadim left
[00:45] *** Actualeyes joined
[00:46] <lambd0x> The newest rakudo is more reliable for large sized inputs when it boils down to sorting algs (e.g., bubble up to counting, bucket) ;) . I enjoyed seeing it had improved performance in comparison to last month. Gotta sleep, later.

[00:47] *** tushar joined
[00:48] *** Girafferson joined
[00:50] *** pierre_ joined
[00:53] <tushar> I have an array and I would like to create same length of array by joining the index of first array with a text. I am achieving this by below code. Is there any other way of doing the same?

[00:53] <tushar> m: my @a = [1..4]; for @a.pairs.hash.keys.sort -> $idx { say join("", "V", $idx); }

[00:53] <camelia> rakudo-moar 8be36b: OUTPUT«V0␤V1␤V2␤V3␤»

[01:00] *** sftp left
[01:01] *** poohman joined
[01:05] <geekosaur> m: my @a = ^4; say @a >>~>> 'V'

[01:05] <camelia> rakudo-moar 8be36b: OUTPUT«[0V 1V 2V 3V]␤»

[01:08] <tushar> geekosaur: you are doing joining of array element with text, not array index with text. Also, joining results are other way around. I am trying to get "V0, V1, V2, V3".

[01:09] <geekosaur> m: my @a = ^4; say @a.keys >>R~>> 'V'

[01:09] <camelia> rakudo-moar 8be36b: OUTPUT«(V0 V1 V2 V3)␤»

[01:10] <geekosaur> m: my @a = [5..8]; say @a.keys >>R~>> 'V'

[01:10] <camelia> rakudo-moar 8be36b: OUTPUT«(V0 V1 V2 V3)␤»

[01:11] *** perlawhirl joined
[01:11] <tushar> geekosaur: thanks. How can i forget R operator? hmm.. 

[01:11] <perlawhirl> alternatively...

[01:12] <perlawhirl> m: my @a = 1..4; say @a.keys.map('V'~*)

[01:12] <camelia> rakudo-moar 8be36b: OUTPUT«(V0 V1 V2 V3)␤»

[01:12] <tushar> Is there anyway to check the empty array?

[01:12] <geekosaur> or alternately

[01:12] <geekosaur> m: my @a = ^4; say 'V' <<~<< @a.keys

[01:12] <camelia> rakudo-moar 8be36b: OUTPUT«(V0 V1 V2 V3)␤»

[01:12] <geekosaur> and what is "check the empty array"?

[01:13] <geekosaur> m: my @a; say +@a

[01:13] <camelia> rakudo-moar 8be36b: OUTPUT«0␤»

[01:14] <tushar> In perl 5 we can check whether an array is defined or not using "define" keyword. I read some where that defined doen't work exactly same as Perl5. So, is there any way to check if array is empty array or not?

[01:15] <geekosaur> I thought they removed that, actually; defined is not sensible on list or hash

[01:16] <geekosaur> (iirc it did'nt tell you whether it was empty; it told you whether it had storage allocated)

[01:17] *** pierre_ left
[01:18] <tushar> hmm.. How can we do that in Perl 6?

[01:19] <Juerd> tushar: Just use the array itself as the condition

[01:19] <geekosaur> as I already showed

[01:20] <Juerd> m: my @array = (); if (@array) { say "Not empty" } else { say "Empty" }

[01:20] <camelia> rakudo-moar 8be36b: OUTPUT«Empty␤»

[01:20] <Juerd> m: my @array = (1, 2, 3); if (@array) { say "Not empty" } else { say "Empty" }

[01:20] <camelia> rakudo-moar 8be36b: OUTPUT«Not empty␤»

[01:20] <geekosaur> (and yes, at least as of perl 5.18 defined @array and defined %hash are deprecated)

[01:20] <Juerd> Note that this is the same in Perl 5 and Perl 6. Even in Perl 5, you shouldn't use defined with arrays, as geekosaur already explained.

[01:21] <tushar> @geekpsaur and @ Juerd.. thanks for your help

[01:23] <perlawhirl> tushar: also, the brackets aren't required around simple conditionals like this... more idiomatic perl6 is just: if @array { ... }

[01:24] <perlawhirl> unless you're trying to write polyglot code that runs in both perl 5 and 6 :D

[01:24] <tushar> perlawhirl: thanks. I am getting used to it now. 

[01:24] <geekosaur> in p5: my @a = 1; pop @a; # @a is now empty but defined

[01:25] <geekosaur> which usually isn't what you intended, and arguably allocation state is an internal detail that was being leaked

[01:25] *** mcmillhj left
[01:28] *** pierre_ joined
[01:30] *** poohman_ joined
[01:32] *** mcmillhj joined
[01:33] *** poohman left
[01:37] *** mcmillhj left
[01:45] *** ilbot3 left
[01:46] *** tushar left
[01:47] *** mcmillhj joined
[01:47] *** ilbot3 joined
[01:52] *** mcmillhj left
[01:53] *** Girafferson left
[01:55] *** sftp joined
[01:59] *** pierrot left
[02:02] *** decent left
[02:03] *** Snowdog joined
[02:04] *** decent joined
[02:05] *** pierrot joined
[02:11] *** Girafferson joined
[02:14] *** pierrot left
[02:15] *** pierrot joined
[02:15] *** noganex_ joined
[02:18] *** mcmillhj joined
[02:19] *** noganex left
[02:19] *** pierre_ left
[02:21] <BenGoldberg> m: my @a = 1; say @a.elems;

[02:21] <camelia> rakudo-moar 8be36b: OUTPUT«1␤»

[02:21] <BenGoldberg> m: my @a = 1; say @a.!elems;

[02:21] <camelia> rakudo-moar 8be36b: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3my @a = 1; say @a.7⏏5!elems;␤»

[02:22] <BenGoldberg> m: my @a = 1; say elems R.@a;

[02:22] <camelia> rakudo-moar 8be36b: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    R used at line 1␤␤»

[02:23] *** mcmillhj left
[02:23] *** AndyBotwin joined
[02:23] *** eliasr left
[02:27] *** pierre_ joined
[02:31] *** pierre_ left
[02:37] *** mcmillhj joined
[02:39] *** cdg joined
[02:40] *** cdg left
[02:40] *** cdg joined
[02:42] *** mcmillhj left
[02:44] *** AlexDaniel left
[02:44] *** kaare__ joined
[02:45] *** pierre_ joined
[02:50] *** pierre_ left
[02:50] *** mcmillhj joined
[02:50] *** Snowdog left
[02:53] *** cyphase left
[02:55] *** mcmillhj left
[02:57] *** cyphase joined
[02:57] *** kaare__ left
[03:01] *** bob777 left
[03:01] *** bob777 joined
[03:03] *** itaipu left
[03:03] *** pierre_ joined
[03:03] *** dayangkun joined
[03:04] *** dayangkun left
[03:06] *** mcmillhj joined
[03:06] *** dayangkun joined
[03:08] *** pierre_ left
[03:11] *** dayangkun_ joined
[03:11] *** dayangkun left
[03:11] *** mcmillhj left
[03:12] *** _slade_ left
[03:18] *** cdg left
[03:22] *** pierre_ joined
[03:22] *** mcmillhj joined
[03:26] *** pierre_ left
[03:27] *** mcmillhj left
[03:32] *** kaare_ joined
[03:32] *** MasterDuke joined
[03:37] *** wamba joined
[03:38] *** dayangkun_ left
[03:40] *** pierre_ joined
[03:44] *** pierre_ left
[03:50] *** finanalyst joined
[03:53] *** finanalyst left
[03:58] *** pierre_ joined
[04:03] *** pierre_ left
[04:06] *** mcmillhj joined
[04:09] *** mr-foobar left
[04:11] *** mcmillhj left
[04:15] *** cxreg2 is now known as cxreg

[04:15] *** poohman_ left
[04:20] *** pierrot left
[04:21] *** pierrot_ joined
[04:21] *** khw left
[04:23] *** perlawhirl left
[04:29] *** pierre_ joined
[04:30] *** BenGoldberg left
[04:32] *** mcmillhj joined
[04:37] *** mcmillhj left
[04:44] *** pierre_ left
[04:47] *** pierre_ joined
[04:50] *** Cabanossi left
[04:52] *** mcmillhj joined
[04:53] *** Cabanossi joined
[04:54] *** MasterDuke left
[04:54] *** pierre_ left
[04:57] *** mcmillhj left
[05:00] *** skids left
[05:01] <dalek> ecosystem: 85652c5 | (Sterling Hanenkamp)++ | META.list:

[05:01] <dalek> ecosystem: Adding Getopt::ForClass to the Perl 6 ecosystem

[05:01] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/85652c578f

[05:01] *** pierre_ joined
[05:06] *** dayangkun joined
[05:06] *** pierre_ left
[05:07] <cxreg> probably useful: https://github.com/indutny/uv_link_t

[05:09] <cxreg> maybe better directed at #moarvm

[05:12] *** ChoHag joined
[05:20] *** pierre_ joined
[05:21] *** zengargoyle joined
[05:22] *** dayangkun_ joined
[05:23] *** dayangkun left
[05:24] *** domidumont joined
[05:25] *** pierre_ left
[05:25] *** ufobat joined
[05:29] *** domidumont left
[05:29] *** domidumont joined
[05:30] *** poohman joined
[05:34] *** domidumont left
[05:41] *** Alikzus left
[05:45] *** mcmillhj joined
[05:46] *** wamba left
[05:50] *** mcmillhj left
[05:50] *** domidumont joined
[05:53] *** CIAvash joined
[05:54] *** canopus left
[05:56] *** mcmillhj joined
[05:56] *** canopus joined
[05:59] *** Alikzus joined
[06:01] *** mcmillhj left
[06:01] *** cyphase left
[06:02] *** pierre_ joined
[06:06] *** cyphase joined
[06:09] *** _sfiguser left
[06:12] *** rurban joined
[06:13] *** rurban left
[06:18] *** firstdayonthejob joined
[06:19] *** labster joined
[06:20] *** mcmillhj joined
[06:21] *** _sfiguser joined
[06:24] *** mcmillhj left
[06:27] *** baest_ is now known as baest

[06:29] <markk> For email this is. But it isn'^H/w 2

[06:30] <markk> Erk. Sorry stupid connection over mobile

[06:36] *** pierre_ left
[06:37] *** pierre_ joined
[06:40] *** mcmillhj joined
[06:45] *** mcmillhj left
[06:45] *** firstdayonthejob left
[06:45] *** brrt joined
[06:51] *** robertle left
[06:52] *** rindolf joined
[06:55] *** mcmillhj joined
[06:59] *** mcmillhj left
[07:02] *** wamba joined
[07:04] *** darutoko joined
[07:19] <brrt> has… t/04-nativecall/13-union.t always been flappy? or rather, for how long has it been so?

[07:19] <brrt> does not seem to respond to MVM_JIT_DISABLE

[07:19] <brrt> which are typical much more repeatable anyway

[07:22] *** mr-foobar joined
[07:23] *** wamba left
[07:23] *** wamba joined
[07:25] *** mcmillhj joined
[07:29] *** mcmillhj left
[07:32] <nine> brrt: does look familiar. I think I've seen it fail at times

[07:32] <brrt> hmmm

[07:32] <brrt> weird

[07:32] *** andrzejku joined
[07:34] *** zakharyas joined
[07:35] *** rindolf left
[07:46] *** captain-adequate left
[07:47] *** wamba left
[07:50] *** wamba joined
[07:57] *** dayangkun_ left
[07:57] *** nadim joined
[08:01] *** ka left
[08:01] *** mcmillhj joined
[08:03] <masak> m: my ($temperature = 37, $pressure = 19, $balloonCount = 65); say $pressure

[08:03] <camelia> rakudo-moar 8be36b: OUTPUT«(Any)␤»

[08:03] <masak> morning, #perl6 :)

[08:05] <[ptc]> masak: o/

[08:06] *** dayangkun joined
[08:06] *** mcmillhj left
[08:08] *** wamba left
[08:15] *** bjz joined
[08:16] *** dakkar joined
[08:17] <lizmat> masak: that should either at least die or work

[08:17] <lizmat> evidently it is parsed

[08:20] <lizmat> afk&

[08:21] <masak> lizmat: agree, I think

[08:21] <masak> lizmat: it's surprising that it means *something* to Perl 6, but that something is not Least Surprise to the user

[08:22] <masak> also, not the first time this is brought up -- there's probably an RT somewhere :)

[08:24] <arnsholt> I wonder who submitted the RT =)

[08:24] <arnsholt> (Also, I feel rather strongly that $balloonCount should be 99 =)

[08:25] <masak> ah; sorry about that

[08:26] <masak> m: my ($balloonCount = 99); say $balloonCount

[08:26] <camelia> rakudo-moar 8be36b: OUTPUT«(Any)␤»

[08:26] <masak> it's almost more disturbing when it's only the one variable declared

[08:26] <masak> ...because parentheses are just for grouping, right? right? :)

[08:30] <moritz> ... except when not :/

[08:32] <arnsholt> Well, when looking at --target=ast for the case with parens, it looks like the integer literal is gone from the AST

[08:34] *** wamba joined
[08:34] <El_Che> aah. I hate it when DHL marks something as 'delivered' when it isn't

[08:35] <lizmat> El_Che: don't get us started on DHL  :-)

[08:35] <tadzik> :D

[08:35] <tadzik> delivery seems like something that's tricky to get right

[08:35] <El_Che> lizmat: the USA import hing?

[08:35] <El_Che> t

[08:35] <lizmat> El_Che: yeah that

[08:35] *** zakharyas1 joined
[08:36] <lizmat> still waiting for them to take us to court  :-)

[08:36] * brrt wonders about that story

[08:39] <lizmat> in short: you cannot send something from NL to yourself in the US if you're not a US citizen

[08:39] <arnsholt> tadzik: Logistics is tricky. Chock full of NP-complete problems

[08:39] <lizmat> DHL gladly did and charged us for it there and back.  we still refuse to pay

[08:39] <arnsholt> Travelling salesman for example is a pretty fundamental part of logistics

[08:39] <tadzik> nodnod

[08:40] <moritz> arnsholt: the algorithmic side usually isn't the problem

[08:40] <moritz> arnsholt: the problem is more regulations, company policy and stuff

[08:40] <arnsholt> That's true. There are good approximations for TSP

[08:40] <moritz> dealing with organizational boundaries

[08:40] <moritz> all that "good" stuff

[08:41] <El_Che> dhl is annoying. When you order stuff from the USA to BE, they automatically add import taxes + an administrative fee for their work

[08:41] <El_Che> other don't do it

[08:41] <El_Che> you only pay if customs thinks you should pay (base on value or volume or whatever)

[08:42] <El_Che> dhl does it for you without asking

[08:42] <El_Che> brrr

[08:43] *** andrzejku left
[08:45] *** bjz left
[08:45] *** RabidGravy joined
[08:46] <masak> lizmat: curious. so the shipment actually got all the way to the US, and then got sent back?

[08:47] <masak> lizmat: one would think that DHL had been in exactly such a situation before, and could be a little proactive -- "hey, this won't work" or something

[08:47] <lizmat> yup, all the way to Cleveland, OH (destined for Salt Lake City) and then back

[08:47] <lizmat> masak: exactly our point

[08:47] *** donaldh joined
[08:48] *** bjz joined
[08:48] *** bjz left
[08:49] <masak> lizmat: I don't see how it's in your interest to pay. I don't see how it's in their interest to take you to court over such an absurd thing. (though I Am Not A Lawyer.)

[08:49] *** bjz joined
[08:49] <lizmat> well, they've been threatening to do this for over a year now  :)

[08:49] <llfourn_> it's probably in their interest to at least threaten it ;)

[08:50] <lizmat> well, that's the thing, they don't threaten themselves

[08:50] <lizmat> they have a collection agency do that

[08:50] <masak> outsource your threatening

[08:50] <llfourn_> ah

[08:50] <tadzik> "we're not evil"

[08:50] <lizmat> and now I think the collection agency basically has told them this isn't working

[08:50] <lizmat> and now they don't know what to do

[08:51] <lizmat> tadzik: I don't think they're evil, just incompetent

[08:51] <lizmat> after the collection agency returned the contract to get the money from us to DHL

[08:51] <lizmat> they said they would reply

[08:51] <lizmat> to this day, we never got a reply in writing from DHL

[08:52] <lizmat> just a phone call from some understudy at DHL who was told to phone us to tell us they decided we should pay

[08:52] *** mcmillhj joined
[08:52] *** bjz_ joined
[08:52] <lizmat> the person who called us had not read the file at all

[08:52] <lizmat> so, incompetence reigns

[08:52] *** andrzejku joined
[08:52] <tadzik> heh

[08:53] *** bjz_ left
[08:53] *** donaldh left
[08:53] <tadzik> right, “don't attribute to malice what you can attribute to simple incompetence”

[08:53] *** bjz_ joined
[08:54] <llfourn_> though I think some malicious people may have figured out how to abuse that assumption :\

[08:54] *** bjz_ left
[08:54] *** andrzejku left
[08:55] *** bjz_ joined
[08:55] *** bjz_ left
[08:55] *** bjz left
[08:56] *** wamba left
[08:57] *** mcmillhj left
[08:58] *** bjz joined
[08:58] *** donaldh joined
[08:59] *** domidumont left
[08:59] *** zakharyas1 left
[09:00] <masak> there should be a term for such people, who know to abuse Hanlon's razor

[09:00] <masak> "Hanlon parasites"?

[09:00] *** lizmat left
[09:00] *** lizmat joined
[09:01] * masak .oO( Hanlon parasite (n.) a person who exploits people's willingness to attribute their malice to incompetence due to Hanlon's razor )

[09:02] <llfourn_> I never knew it was an razor attributed to Halon till now

[09:02] <masak> ah; you're just saying that to be malicious :P

[09:03] <llfourn_> maybe someone who abuses common knowledge of a razor could be stabber

[09:03] <llfourn_> they cut you with the razor

[09:03] <llfourn_> or something similar

[09:03] <masak> stabbing is not so naturally associated with razors, IMHO

[09:03] <llfourn_> true

[09:03] <llfourn_> cutters :P

[09:03] <masak> "Hanlon slasher", perhaps

[09:03] <llfourn_> yeah that's good :)

[09:03] <masak> yes, I think I prefer that

[09:03] <lizmat> .oO( I want to be a lumberjack! )

[09:04] *** jonas4 joined
[09:04] *** bjz left
[09:06] *** rurban joined
[09:06] *** mcmillhj joined
[09:07] *** bjz joined
[09:09] <llfourn_> I'm pretty sure Occam slashers are a thing too

[09:11] *** mcmillhj left
[09:11] <konobi> lizmat: it's surprisingly well paid if you have the degree

[09:13] *** rurban left
[09:14] *** donaldh left
[09:14] *** rurban joined
[09:15] *** donaldh joined
[09:17] *** rindolf joined
[09:18] *** mcmillhj joined
[09:20] *** ka joined
[09:22] *** mcmillhj left
[09:27] *** damnlie left
[09:28] *** damnlie joined
[09:30] *** rurban left
[09:33] <llfourn_> m: role R { method f {...} }; class A { method f { } }; class B does R { has A $.a handles <f> is required };

[09:33] <camelia> rakudo-moar 8be36b: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Method 'f' must be implemented by B because it is required by a role␤at <tmp>:1␤»

[09:33] <llfourn_> ^ since $.a handles 'f' I think this should work

[09:34] *** mcmillhj joined
[09:35] *** damnlie left
[09:35] *** damnlie joined
[09:36] <psch> i think that's on composition order, somehow

[09:36] <psch> m: class A { has $x handles <foo> }; say A.^can('foo');

[09:36] <camelia> rakudo-moar 8be36b: OUTPUT«(foo)␤»

[09:36] <psch> a handled method gets added to the class of the Attribute

[09:36] <psch> but the role-stub check probably happens before that

[09:36] <psch> no idea if we can change that

[09:36] <jnthn> It's because role composition happens before attribute composition because roles might bring along attributes

[09:37] <llfourn_> hmm that makes sense

[09:37] <jnthn> That in itself can't change. It's possible that the handles trait could do its work more immediately but I fear that'd have a different surprise

[09:38] <llfourn_> I'll make an RT for later consideration :)

[09:38] <psch> ISTR we have that already

[09:38] <jnthn> oh...yeah, it'd break when the handles is in a role, at least if we don't make further changes to compensate for that :)

[09:38] <psch> i think it was about 'does Positional' and 'has @.a handles <AT-POS ...>'

[09:39] <psch> have the RT, i mean

[09:39] *** mcmillhj left
[09:39] <llfourn_> psch: I've looked for an RT wrt to handles and stub methods but haven't found

[09:39] <psch> llfourn_: alright, maybe it was just discussion here and didn't make it to RT :)

[09:39] *** rurban joined
[09:39] <llfourn_> I did make a RT related to delgating array stuff to arrays via handles but not really the same thing

[09:41] *** brrt left
[09:43] *** bjz left
[09:44] *** bjz joined
[09:46] <llfourn_> RT #129325

[09:46] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129325

[09:47] <llfourn_> I'd guess the solution would be to delay required method checking until after attribute composition

[09:47] *** eliasr joined
[09:52] *** Matthew[m] left
[09:52] *** ilmari[m] left
[09:52] *** tadzik left
[09:52] *** M-Illandan left
[09:54] *** matt_ left
[09:54] *** domidumont joined
[09:55] *** pierre_ left
[09:55] *** mcmillhj joined
[09:57] *** andrzejku joined
[09:57] *** matt_ joined
[09:58] *** matt_ is now known as Guest31284

[09:59] *** pierre_ joined
[09:59] *** mcmillhj left
[10:00] *** domidumont1 joined
[10:02] *** ChoHag left
[10:03] *** domidumont left
[10:04] *** Guest31284 is now known as matt_

[10:05] *** brrt joined
[10:07] *** domidumont1 left
[10:08] *** donaldh left
[10:11] *** labster left
[10:14] *** domidumont joined
[10:14] *** pmurias joined
[10:18] <jkramer> m: IO::Path.new('foo/../baz').absolute('/bar').resolve

[10:18] <camelia> rakudo-moar 8be36b: OUTPUT«IO::Path is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 1␤␤»

[10:18] <jkramer> Hmm

[10:19] <jkramer> Can someone confirm that IO::Path.absolute returns a Str when according to the docs it should return an IO::Path?

[10:19] <jkramer> # perl6 -e "IO::Path.new('foo/../baz').absolute('/bar').resolve"

[10:19] <jkramer> Method 'resolve' not found for invocant of class 'Str'

[10:20] <jkramer> https://docs.perl6.org/type/IO::Path#method_absolute

[10:20] *** dayangkun left
[10:21] <brrt> m: IO::Path.new('foo/../baz').absolute.say;

[10:21] <camelia> rakudo-moar 8be36b: OUTPUT«IO::Path is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 1␤␤»

[10:21] <brrt> yep, returns a Str

[10:22] *** ChoHag joined
[10:22] <jkramer> Ah, there's already a report https://rt.perl.org/Public/Bug/Display.html?id=126262

[10:22] *** nadim left
[10:23] *** nadim joined
[10:31] *** TimToady left
[10:31] *** rurban left
[10:33] *** bjz left
[10:33] *** TimToady joined
[10:34] *** bjz joined
[10:40] *** pierre_ left
[10:41] <masak> new blog post: http://strangelyconsistent.org/blog/where-in-the-sky (not really Perl 6, not yet anyway)

[10:41] *** canopus left
[10:43] *** canopus joined
[10:44] <gfldex> masak++ # for consistently writing strangly :)

[10:45] <masak> haven't been all that consistent in my writing lately... :)

[10:45] <moritz> masak++

[10:45] <masak> instead, I've been building up a backlog of posts-I-want-to-write

[10:45] <moritz> I've also written a non-Perl 6 blog post: https://perlgeek.de/blog-en/misc/2016-bio.html (warning: pseudo philosophical ramblings in there)

[10:46] *** rindolf left
[10:47] *** mcmillhj joined
[10:47] <masak> moritz++ # blog post

[10:49] *** Actualeyes left
[10:52] *** mcmillhj left
[10:53] *** ilmari[m] joined
[10:56] <lizmat> masak: there's an app for that

[10:57] <lizmat> I mean, an app that you can point at the sky at it will show you stars / planets, even below the horizon :-)

[10:57] <masak> I address that in the post -- that's not what I'm after ;)

[10:57] <masak> I'm sure there are plenty of good apps out there

[10:58] <masak> but I don't want the pre-packaged ready answer

[10:58] <masak> I want the joy of carrying out the calculation right (using my own code)

[10:58] <masak> (yes, I realize that is weird. I'm into re-inventing wheels to see if I can.)

[10:59] <lizmat> masak: oops, should read more carefully  :-)

[10:59] <lizmat> masak: the apps I've seen are amazing, really

[10:59] <masak> I should try them.

[10:59] *** wamba joined
[10:59] <masak> especially when I get numbers of my own, to compare :)

[11:00] *** aries_liuxueyang joined
[11:00] <lizmat> I seem to remember SkyView Free

[11:01] * brrt recalls 'so long, and thanks for all the fish', in which writing-a-program-to-compute-the-position-of-the-stars is a plot device

[11:02] <arnsholt> moritz: "Who are you?" gives me a proper Babylon 5 flashback =)

[11:02] <gfldex> I am me, that I am certain of. What that means I am not certain of.

[11:03] <moritz> gfldex: that's kinda the point :-)

[11:03] *** poohman left
[11:04] <masak> gfldex: even Descartes got a bit further than that :P

[11:05] <gfldex> moritz: your post made me think of what will remain of me when I am not. There is pretty much nothing left of the original Linux or Unix source code. But what about man-pages? Does writing docs made me immortal (for a value of immortal that depends on how long humans use english)?

[11:06] <moritz> gfldex: and, is it really important that something will remain of you, after your death?

[11:06] <moritz> you won't care anymore

[11:06] <moritz> the idea is nice, but why?

[11:07] <gfldex> For the I-am-me-problem it has relevance.

[11:07] <moritz> gfldex: also, today's Linux evolved from Linux 0.01. Even if none of the code of Linux 0.01 remains in today's kernel, its inheritance in terms of project/community still influences Linux today

[11:08] <moritz> (where by Linux 0.01 I mean the first code that Linus wrote, even if it never had that version tag)

[11:08] <gfldex> I can refer to something persistent that others can refer to, proving that I am not imagining me (for low values of proof).

[11:09] <moritz> others can refer to your body, or to your lines on IRC just the same

[11:09] * moritz is being obnoxious today

[11:09] <gfldex> also humans seam to like grave stones, what is a completely pointless endeavour for the person whos name is on it.

[11:10] <[ptc]> it's nice to have the feeling that one has made a contribution to society etc., at least while one is still "here", however afterwards it only probably matters to those left behind

[11:10] <[ptc]> moritz: nice post btw :-)

[11:10] <moritz> [ptc]: thanks

[11:11] <moritz> gfldex: right, that's really for those left behind to help them deal with their grief

[11:25] *** domidumont left
[11:27] *** tadzik joined
[11:27] *** M-Illandan joined
[11:27] *** Matthew[m] joined
[11:30] *** user9 left
[11:30] *** cog__ left
[11:33] <RabidGravy> if anyone fancies shutting up a warning in panda https://github.com/tadzik/panda/pull/330

[11:34] *** user9 joined
[11:38] <lizmat> done

[11:38] *** pierre_ joined
[11:41] *** domidumont joined
[11:44] *** pierre_ left
[11:45] <RabidGravy> cool

[11:47] *** pierre_ joined
[11:53] *** MasterDuke joined
[11:55] *** mcmillhj joined
[11:56] <masak> I'm seeing issues with precompilation

[11:58] <masak> new behavior from a change doesn't kick in until I manually remove lib/.precomp

[12:00] *** mcmillhj left
[12:00] <lizmat> masak: I assume you have the latest / greatest ?

[12:00] <masak> ...probably not. good point.

[12:00] * masak makes it so

[12:04] <Woodi> hi #perl6 :)

[12:05] <masak> symptoms seem to be gone in the latest/greatest. lizmat++ :)

[12:09] <Woodi> I think we need more talk about what we want from repos. version is something like smallest granularity so in case version isn't changed on source changes repo should not kick in. and it works good for eg. system wide installations. for devs there is other repo representation but probably we do not know how to create/manage repos in nice way... IMO of course 

[12:13] *** mcmillhj joined
[12:15] <nadim> hi

[12:16] <[Coke]> ho

[12:18] *** mcmillhj left
[12:18] <nadim> [Coke]: you taukin' to me, you taulkin' to me ... ;)

[12:21] *** cognominal joined
[12:25] *** smls joined
[12:32] *** andrzejku left
[12:41] *** ZoffixW joined
[12:46] *** mcmillhj joined
[12:51] *** mcmillhj left
[13:02] *** mcmillhj joined
[13:03] *** cdg joined
[13:16] *** MasterDuke left
[13:24] *** wamba left
[13:25] *** ka left
[13:26] *** flexibeast left
[13:28] *** xiaomiao left
[13:31] *** buggable left
[13:32] *** buggable joined
[13:32] *** xiaomiao joined
[13:38] *** sufrosti1o joined
[13:39] *** sufrostico left
[13:39] *** sufrosti1o left
[13:40] *** MilkmanDan left
[13:41] *** MilkmanDan joined
[13:45] *** sufrostico joined
[13:46] <dalek> doc: 12ec5fc | jnthn++ | doc/Type/Str.pod6:

[13:46] <dalek> doc: Correct and expand on the documentation of ords.

[13:46] <dalek> doc: review: https://github.com/perl6/doc/commit/12ec5fc35e

[13:47] *** wamba joined
[13:48] *** tushar joined
[13:50] <bioduds> sqlite is the only I could put to work so far, with DBLis

[13:51] <bioduds> DBIish

[13:51] *** pierre__ joined
[13:53] <ZoffixW> You sure you got all the libs? sqlite is the only one included with that module

[13:53] <yoleaux> 23 Jun 2016 14:13Z <hahainternet> ZoffixW: alternate design looks superb

[13:53] <ZoffixW> .oo( alternate design??? )

[13:53] <moritz> that's from June. doc.perl6.org maybe?

[13:53] <bioduds> sqlite will do for now

[13:53] *** skids joined
[13:53] <bioduds> :)

[13:54] <moritz> postgres dbiish driver worked fine for me, last I tried

[13:55] *** Undercover joined
[13:55] *** pierre_ left
[13:56] <ZoffixW> c: &say

[13:56] <Undercover> ZoffixW, The code is hit during stresstest [WARNING: this line is a proto! Check individual multies] See http://perl6.WTF/src_core_io_operators.pm.coverage.html#L20 for details

[13:56] <ZoffixW> c: &say, \()

[13:56] <Undercover> ZoffixW, The code is NOT hit during stresstest See http://perl6.WTF/src_core_io_operators.pm.coverage.html#L21 for details

[13:57] <ZoffixW> c: Any, 'pairs', \()

[13:57] <Undercover> ZoffixW, The code is hit during stresstest See http://perl6.WTF/src_core_Any.pm.coverage.html#L98 for details

[13:57] <ZoffixW> Neat \o/

[13:58] *** araujo_ left
[13:58] <ZoffixW> Next step would be to make it know which stresstest *file* hits the code, but currently that'd take forever to run. Volunteers to make this parser generate separate reports per input file per run are needed: https://github.com/MoarVM/MoarVM/blob/line_based_coverage_4/tools/parse_coverage_report.p6

[13:59] <ZoffixW> So that way, it has to read the annotations (that takes forever) just once and then just would go in and generate separate reports for each stresstest file and then the bot would just look up which files hit a particular line :)

[13:59] <ZoffixW> And http://perl6.WTF/ has core coverage now :)

[14:01] *** niko left
[14:03] *** flexibeast joined
[14:04] <moritz> does it have known bugs?

[14:04] *** khw joined
[14:05] <moritz> http://perl6.wtf/src_core_Any-iterable-methods.pm.coverage.html if you look at lines 35 to 37

[14:05] <moritz> the first two of those lines aren't covered, the next is. Why?

[14:05] <moritz> there's no conditional involved there

[14:05] <ZoffixW> Yeah, it's all still experimental, based on timotimo++'s coverage MoarVM branch.

[14:06] <ZoffixW> This one is also reported as uncovered http://perl6.WTF/src_core_Any.pm.coverage.html#L464 Even though there is a test that covers it: https://github.com/perl6/roast/blob/master/S32-hash/pairs.t#L94

[14:06] <dalek> doc: 5e1399a | gfldex++ | doc/Type/Mu.pod6:

[14:06] <dalek> doc: text and example is for routine take, not .take

[14:06] <dalek> doc: review: https://github.com/perl6/doc/commit/5e1399a3dd

[14:06] <dalek> doc: 845f0b4 | gfldex++ | doc/Type/Mu.pod6:

[14:06] <dalek> doc: add method Mu::take

[14:06] <dalek> doc: review: https://github.com/perl6/doc/commit/845f0b4e00

[14:06] <dalek> doc: 8b565ab | gfldex++ | doc/Type/Mu.pod6:

[14:06] <dalek> doc: fix definition of sub take

[14:06] <dalek> doc: review: https://github.com/perl6/doc/commit/8b565ab00f

[14:08] *** captain-adequate joined
[14:12] *** wamba left
[14:12] *** _sfiguser left
[14:16] *** ocbtec joined
[14:17] *** wamba joined
[14:21] <dalek> doc: b373bcf | gfldex++ | doc/Type/Mu.pod6:

[14:21] <dalek> doc: doc sub take-rw

[14:21] <dalek> doc: review: https://github.com/perl6/doc/commit/b373bcfe8f

[14:23] *** ZoffixW left
[14:25] *** _sfiguser joined
[14:29] <dalek> doc: 82fd097 | gfldex++ | doc/Language/control.pod6:

[14:29] <dalek> doc: link to sub take

[14:29] <dalek> doc: review: https://github.com/perl6/doc/commit/82fd097604

[14:29] <dalek> doc: 70ccb63 | gfldex++ | doc/Language/control.pod6:

[14:29] <dalek> doc: mention take-rw

[14:29] <dalek> doc: review: https://github.com/perl6/doc/commit/70ccb6374e

[14:35] *** pullphinger joined
[14:37] *** optikalmouse joined
[14:43] *** rba__ joined
[14:45] *** andrzejku joined
[14:46] *** mcmillhj left
[14:47] *** mr-foobar left
[14:48] *** rindolf joined
[14:50] *** rba__ left
[14:50] <El_Che> Rakudo 2016.09 packages for Ubuntu and Centos: https://github.com/nxadm/rakudo-pkg/releases/tag/2016.09

[14:51] *** rba_ joined
[14:53] *** brrt left
[14:53] *** wamba left
[14:54] *** mcmillhj joined
[14:56] *** sufrostico left
[15:00] *** brrt joined
[15:01] *** brrt left
[15:03] *** brrt joined
[15:04] *** brrt left
[15:04] <pmurias> hmm, if we integrated our Perl 6 grammar with vim, would it be usefull to create new vim text objects that would make use of it?

[15:05] <pmurias> like we could have a "expression starting at cursor", "quoted string", "whole identifier with hyphens" etc text-objects 

[15:07] *** mr-foobar joined
[15:11] *** captain-adequate left
[15:13] *** pierre__ left
[15:13] *** captain-adequate joined
[15:20] <stmuk> El_Che++

[15:21] <stmuk> El_Che: I was thinking of doing dpkg and rpm releases for next month's star

[15:26] <El_Che> stmuk: that would be a great addition. Are you thinking of one pkg per module of one pkg for star?

[15:30] *** canopus left
[15:32] *** canopus joined
[15:33] *** captain-adequate left
[15:34] *** captain-adequate joined
[15:35] <El_Che> bbl

[15:35] <stmuk> El_Che: ideally

[15:36] *** optikalmouse left
[15:36] <mst> "are you think of X, or Y?"

[15:36] <mst> "ideally"

[15:37] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2016/09/21/are-these-your-keys/

[15:37] <timotimo> mst: there wasn't an or between X and Y there

[15:38] <mst> El_Che: your actual question was "are you thinking of one package per module or one package for star?" right?

[15:39] *** AlexDaniel joined
[15:39] <Ulti> compare and contrast http://mattoates.co.uk/files/perl6/bioinfo_profile_2014-09-16.html with http://mattoates.co.uk/files/perl6/bioinfo_profile_2016-09-21.html

[15:43] <timotimo> Ulti: good improvement

[15:44] <Ulti> yup

[15:45] <timotimo> i hope there'll be some more future improvement, too :)

[15:46] <Ulti> tempted to just fix the code to be faster :P

[15:46] <Ulti> the main thing is a load of hash creation which is genuinely a "feature" of my code

[15:47] <Ulti> however does kind of point out if that was shaved my stuff gets way faster

[15:48] <dalek> doc: 8b59639 | coke++ | doc/Type/Mu.pod6:

[15:48] <dalek> doc: fix whitespace

[15:48] <dalek> doc: review: https://github.com/perl6/doc/commit/8b59639ba6

[15:49] *** captain-adequate left
[15:50] <bioduds> subs cant have named arguments?

[15:51] <bioduds> inicialização-do-programa do-zero => True;

[15:51] <tadzik> yes

[15:51] <bioduds> sub inicialização-do-programa( Bool $do-zero = False ) {

[15:51] *** domidumont left
[15:51] *** captain-adequate joined
[15:51] <ilmari> m: sub foo (:$bar) { say $bar }; foo bar => 42

[15:51] <camelia> rakudo-moar 77a2ff: OUTPUT«42␤»

[15:51] <tadzik> m: sub with-named(:$arg) { say $arg }; with-named arg => "bazinga"

[15:51] <camelia> rakudo-moar 77a2ff: OUTPUT«bazinga␤»

[15:51] <ilmari> tadzik: ⁵

[15:51] <timotimo> yo tadzik :)

[15:51] <bioduds> oh

[15:52] <bioduds> :$ ok

[15:52] <bioduds> thanks :D

[15:52] <tadzik> ilmari: https://tadzik.net/pub/EOgR4QJ5MZ.png you confused me a lot :D

[15:52] <tadzik> timotimo: yo dawg o/

[15:52] <ilmari> tadzik: haha. I got them the other way around here

[15:53] <tadzik> the joys of the irc bridge :P

[15:53] <ilmari> that can happen with unbridged irc too, since you don't get your own messages back

[15:54] <ilmari> so your client shows your thing immediately, whereas others get the network delay

[15:59] *** MetaZoffix joined
[16:09] *** andrzejku left
[16:09] *** mcmillhj left
[16:10] *** Ven_ joined
[16:10] *** MetaZoffix left
[16:11] *** wamba joined
[16:17] <tushar> Is there any way I can stay connected to this channel and never leave?

[16:18] *** mcmillhj joined
[16:19] <mst> tushar: get a client that satys connected

[16:20] <vcv> get a vm, use tmux/screen with irssi/bitchx/another cli client

[16:21] <vcv> there is irccloud.com too but that costs $$

[16:22] *** robertle joined
[16:22] <tushar> mst: how and from where can I get client?

[16:23] *** mcmillhj left
[16:23] <tushar> vcv: I have already got IRC Cloud app on my phone

[16:24] *** domidumont joined
[16:25] <tushar> mst: I will explore the IRC client option. Thanks.

[16:26] <mst> I run irssi on a server. there's also weechat and znc

[16:26] <ilmari> https://riot.im/

[16:26] <ilmari> has web, android, ios clients

[16:26] *** Ven_ left
[16:26] <ilmari> and bridges to freenode, mozilla and w3c IRC

[16:27] * ilmari[m] waves from riot

[16:28] *** Ven_ joined
[16:30] *** dakkar left
[16:31] <tushar> ilmari: thanks.

[16:33] *** mcmillhj joined
[16:38] *** mcmillhj left
[16:41] *** kerframil joined
[16:47] *** mcmillhj joined
[16:48] *** zakharyas left
[16:49] *** Ven_ left
[16:50] *** sufrostico joined
[16:51] *** acrussell joined
[16:52] *** andrzejku joined
[16:57] *** rurban joined
[16:58] *** setty1 joined
[17:00] *** _sfiguser left
[17:03] *** mcmillhj left
[17:06] *** optikalmouse joined
[17:10] *** mcmillhj joined
[17:13] *** _sfiguser joined
[17:14] *** AndyBotwin left
[17:14] *** mcmillhj left
[17:18] *** matt_ left
[17:24] *** canopus left
[17:24] *** mcmillhj joined
[17:26] *** canopus joined
[17:30] *** cdg left
[17:31] *** firstdayonthejob joined
[17:32] *** rba_ left
[17:37] *** canopus left
[17:39] *** canopus joined
[17:43] *** kerframil left
[17:44] *** cpage_ left
[17:44] *** rurban left
[17:54] *** Ven_ joined
[17:58] *** xdxdxd joined
[17:59] <xdxdxd> How would I organize a ton of retrievable information on different pokemon into a separate perl6 file

[17:59] *** Ven_ left
[18:02] <xdxdxd> oh

[18:02] <xdxdxd> I'd use a map, right?

[18:02] <avuserow> hi xdxdxd, depends on what information you want and how you want to retrieve it. you might be able to get away with a file that defines and exports some hashes or objects, or maybe something like SQLite would be more appropriate

[18:03] <xdxdxd> It will be nearly 2,000 lines or so of information on each individual pokemon

[18:03] <xdxdxd> Would SQLite be more suitable for that?

[18:04] <timotimo> SQLite is quite fantastic in any case

[18:04] <timotimo> you can use DBIish to use it from perl6

[18:07] <avuserow> SQLite and other databases would excel if you had a bunch of relational data beyond just "pokemon 1 has weight X and height Y", since you could write SQL queries allowing you to ask "what's the most powerful move learned by normal types", or similar

[18:08] <avuserow> you can answer the same question if the data is stored in p6 data structures, but you'll have to write the iteration as perl6 rather than SQL. may or may not be better.

[18:08] <xdxdxd> I'll definitely be going with SQLite then

[18:08] <xdxdxd> thanks for the help

[18:09] <baest> I've just upgraded to 2016.09 and I see the last letter being cropped. It didn't do that in 2016.08.1. Test case: http://pastebin.com/HYPpTEPA

[18:09] <baest> Anybody seen anything similar?

[18:10] <baest> sorry, last letter being cropped in simple client/server application

[18:10] *** cpage_ joined
[18:11] <baest> output is "12", was expecting "123"

[18:15] <timotimo> baest: i suggest you send a newline after the 3

[18:15] *** cdg joined
[18:16] <baest> timotimo: yes, make sense, but it wasn't necessary before. You don't think it is an error?

[18:16] <jnthn> No, and there's an explanation here: https://docs.perl6.org/type/IO$COLON$COLONSocket$COLON$COLONAsync#method_Supply

[18:16] <timotimo> when a string is received, perl6 has to keep the last character around in case the next char received is a combining character

[18:17] <timotimo> if there's a newline or some other control character at the end, we know there can't be a combiner

[18:17] <dalek> doc: c9918db | (Alexey Melezhik)++ | doc/Language/exceptions.pod6:

[18:17] <dalek> doc: tried to make it clear what happens with the code following after CATCH blocks

[18:17] <dalek> doc: review: https://github.com/perl6/doc/commit/c9918dbd5a

[18:17] <dalek> doc: 36648dc | (Alexey Melezhik)++ | doc/Language/exceptions.pod6:

[18:17] <dalek> doc: adjustment after talk with people by IRC

[18:17] <dalek> doc: review: https://github.com/perl6/doc/commit/36648dc069

[18:17] <dalek> doc: 4a4c9e3 | (Alexey Melezhik)++ | doc/Language/exceptions.pod6:

[18:17] <dalek> doc: s/upper/outer/

[18:17] <dalek> doc: review: https://github.com/perl6/doc/commit/4a4c9e3b46

[18:17] <dalek> doc: a5f98bd | gfldex++ | doc/Language/exceptions.pod6:

[18:17] <dalek> doc: Merge pull request #876 from melezhik/master

[18:17] <dalek> doc: 

[18:17] <dalek> doc: Exceptions handlers and enclosing blocks.

[18:17] <dalek> doc: review: https://github.com/perl6/doc/commit/a5f98bd44b

[18:17] *** edehont joined
[18:18] <baest> ok, sounds reasonable, thanks guys!

[18:19] <timotimo> i don't know if it mentions this, but you can use :bin to get bufs instead of strings

[18:20] <timotimo> that way you'll get to ignore the possibility of combining characters

[18:20] *** Girafferson left
[18:21] <smls> timotimo: Has a way to specify an encoding been added yet? Then you could use 'utf8-c8' to pass through arbitrary bytes while still working with strings.

[18:21] <timotimo> smls: i expect utf8-c8 will still have the part added to it that cares about combining characters

[18:22] *** grondilu left
[18:22] *** MetaZoffix joined
[18:22] <smls> Ah, right.

[18:22] *** grondilu joined
[18:22] <MetaZoffix> What would the :bin go into though? There's already a $conn.Supply(:bin)

[18:22] <smls> But it won't ever throw an encoding error, right?

[18:22] *** grondilu left
[18:22] *** grondilu joined
[18:22] <Xliff_> Does anyone know how I would go about writing this in nqp?

[18:23] <Xliff_> loop (my $iv; $iv !=:= IterationEnd; $iv = iter.pull-one)

[18:23] <MetaZoffix> Oh, there isn't one on client's .Supply

[18:24] <timotimo> hm?

[18:24] <baest> timotimo: it mentions it, yes, I will look into it. Thanks

[18:26] <Xliff_> nqp: 0

[18:26] <camelia> nqp-moarvm: ( no output )

[18:27] <MetaZoffix> c: Iterator, 'pull-one', \()

[18:27] <Undercover> MetaZoffix, Something's wrong: ␤ERR: Too many positionals passed; expected 2 arguments but got 3␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 25␤  in block <unit> at -e line 6␤␤

[18:27] <MetaZoffix> m: Iterator.^can('pull-one').say

[18:27] <camelia> rakudo-moar 77a2ff: OUTPUT«Too many positionals passed; expected 2 arguments but got 3␤  in block <unit> at <tmp> line 1␤␤»

[18:27] <MetaZoffix> m: Iterator.HOW.say

[18:27] <camelia> rakudo-moar 77a2ff: OUTPUT«Perl6::Metamodel::ParametricRoleGroupHOW.new␤»

[18:27] *** poisonby joined
[18:28] <jnthn> smls: No, didn't get to adding encodings support yet

[18:28] <jnthn> smls: I'm currently working through a bunch of encodings stuff including enabling user-space ones

[18:29] <MetaZoffix> TIL 9 years ago I helped out the Perl 6 effort for 4 days... even had an svn commit bit :P http://irclog.perlgeek.de/perl6/search/?nick=Zoffix;q=;offset=6900

[18:29] <jnthn> Though today distracted myself with fixing bugs and Unicode 9 support :)

[18:29] * MetaZoffix has no recollection of those events

[18:29] <timotimo> finally a rot13 encoding "natively" in rakudo

[18:29] <smls> jnthn: Ah, so CPAN modules could add encodings?

[18:30] <timotimo> will we be doing something like with Inline::? where if we use an encoding that doesn't exist natively we "use" Encoding:thething

[18:34] <El_Che> lo

[18:35] <MetaZoffix> \o\

[18:38] *** xdxdxd left
[18:39] *** MetaZoffix left
[18:40] <smls> jnthn: Will you expose a complex system of IO layers to userspace, like Perl 5? ;) http://perldoc.perl.org/PerlIO.html

[18:42] *** cdg left
[18:43] <jnthn> smls: Yeah, the idea is that you'll be able to having something implement the Encoding role and then pass it to the :$enc parameter (and if you pass a string as today we'll resolve it to an Encoding object first)

[18:43] <smls> neat

[18:45] <jnthn> In general, the VM-level I/O will deal in binary, and we'll pull the "management" of I/O up to the Perl 6 level, which should make doing various tweaks easier

[18:45] <jnthn> The various built-in encodings will still use VM-provided implementations.

[18:45] <jnthn> But by taking them apart from I/O, you'd be able to re-use them when you have bunches of bytes and want to toss them into a streaming decoder.

[18:46] <jnthn> (Like the body of a HTTP request after you've looked at the headers to know what encoding it needs)

[18:47] *** setty1 left
[18:47] <smls> You mean you can switch encodings in the middle of reading from a socket or filehandle?

[18:48] <jnthn> Well, more that you'll get bytes in and coordinate decoding of them

[18:50] <smls> ok

[18:51] <smls> Is CR/LF newline-conversion considered separate from encodings?

[18:53] *** sjoshi joined
[18:54] <jnthn> In current plans I've got it as a parameter given to the decoder

[18:54] *** cpage_ left
[18:55] <jnthn> While "separate pass" is architecturally pretty it's performance ugly.

[18:56] <jnthn> Though I suspect for user-space encodings somebody will end up putting a role on CPAN that you can just use and it will do it as another pass.

[18:56] *** sjoshi left
[18:58] <jnthn> Since a decoder is just an object, though, there's no reason you can't nest them, delegating to an inner one then acting upon what it produces.

[18:58] <jnthn> So I guess you can recreate IO layers that way ;)

[18:59] <smls> :)

[19:00] <Woodi> jnthn: is that work introduces something like C++ streams ot just decoders over IO ?

[19:01] <Woodi> *or

[19:01] *** darutoko left
[19:02] <jnthn> Wouldn't the standard API of various of our IO handles be closer to that?

[19:02] <dalek> doc: 0997b2c | (Zoffix Znet)++ | doc/Type/Array.pod6:

[19:02] <dalek> doc: Document Whatever|Callable arg forms in .splice

[19:02] <dalek> doc: review: https://github.com/perl6/doc/commit/0997b2c510

[19:02] * jnthn has mostly managed to escape C++ so far ;)

[19:03] <jnthn> Cooking &

[19:04] <timotimo> jnthn: C++ streams are ... complicated, complex, and powerful

[19:04] <timotimo> you do stuff like std::cout << formatting-options-here << "hey" << more-formatting-options << 1234 << std::endl;

[19:04] <timotimo> and these formatting options can be a whole lot of stuff

[19:04] <timotimo> i've never used it to anywhere near its full potential

[19:06] <Woodi> timotimo: so probably module space, if someone would like to write such thing... but manual from 90s for streams was nice :)

[19:06] <timotimo> module space, yes

[19:07] <timotimo> food time \o/

[19:08] *** Ven_ joined
[19:08] *** Ven_ left
[19:08] *** Ven_ joined
[19:19] *** grondilu left
[19:21] *** labster joined
[19:21] *** girafe joined
[19:25] *** Ven__ joined
[19:26] *** rindolf left
[19:26] *** Ven_ left
[19:28] *** setty1 joined
[19:36] *** acrussell left
[19:43] *** Ven__ left
[19:45] *** domidumont left
[19:45] *** tushar left
[19:48] *** Ven_ joined
[19:49] *** Ven_ left
[19:55] *** ufobat left
[19:57] <moritz> though in C++, << just desugars to some method call, so it's something you could build with regular method calls too

[19:57] <timotimo> right

[19:58] *** wamba left
[19:58] <moritz> but if you did, you'd realize how... extravagant the API is :-)

[19:58] <timotimo> damn, someone just told me they're trying to learn c++ and gave me a screenshot of how their code errored

[19:58] <timotimo> and it looked like no C++ i'd ever seen before

[19:58] <timotimo> turns out there's a thing called C++/CLI by microsoft that basically puts C++ on top of the CLR or something like that

[20:00] *** cdg joined
[20:07] *** bartolin left
[20:18] *** optikalmouse left
[20:19] *** rurban joined
[20:20] *** rurban left
[20:20] *** Ven_ joined
[20:25] *** cpage_ joined
[20:25] *** Ven_ left
[20:25] *** Ven_ joined
[20:28] *** kaare_ left
[20:31] <dalek> doc: 35c396e | (Jan-Olof Hendig)++ | doc/Type/CallFrame.pod6:

[20:31] <dalek> doc: Fixed typo

[20:31] <dalek> doc: review: https://github.com/perl6/doc/commit/35c396efd8

[20:32] *** cdg left
[20:32] *** ptolemarch left
[20:34] *** cibs left
[20:34] *** rgrinberg joined
[20:36] *** cibs joined
[20:36] *** ptolemarch joined
[20:38] <dalek> doc: c3ca435 | (Jan-Olof Hendig)++ | doc/Type/Callable.pod6:

[20:38] <dalek> doc: Fixed typo in pod directive

[20:38] <dalek> doc: review: https://github.com/perl6/doc/commit/c3ca435056

[20:38] *** smls left
[20:40] *** pullphinger left
[20:50] *** mcmillhj left
[20:52] <timotimo> hey everybody, upgrade your irssi versions, there's a remote-crash vulnerability in new-ish versions

[20:54] * moritz waits for the Debian security update

[20:54] <moritz> ah, it's there

[20:55] *** Ven_ left
[20:55] <timotimo> i should really boot into my updated weechat

[20:56] *** Ven_ joined
[20:57] *** girafe left
[21:00] *** hoelzro left
[21:00] *** CIAvash left
[21:00] *** hoelzro joined
[21:03] *** Glitchy left
[21:03] *** Glitchy joined
[21:03] *** skids left
[21:04] <moritz> turns out that irssi's /upgrade comand works well, except for two gotchas: It seems to drop SSL connections, and it opened old privmsg windows for me in addition to keeping the old ones

[21:05] *** robertle left
[21:07] <geekosaur> the ssl one is noted in the advisory

[21:08] <stmuk> I upgraded recently to weechat! :)

[21:08] <timotimo> yay weechat

[21:08] <timotimo> wee yaychat!

[21:08] <geekosaur> that makes sense actually: connections in the clear have only OS process level state, but SSL/TLS has additional state in process memory

[21:08] *** cdg joined
[21:09] *** ptolemarch left
[21:10] <timotimo> the SSL library used probably doesn't allow extracting all that data and transplanting it into another process?

[21:10] *** ocbtec left
[21:10] <geekosaur> openssl is rather protective of that data, with good reason

[21:11] <timotimo> right

[21:11] <geekosaur> (current state of the encryption algorithm)

[21:11] *** bartolin joined
[21:11] <geekosaur> (also ephemeral keys and such)

[21:12] <geekosaur> (well, I suppose that's part of the current state...)

[21:16] *** pmurias left
[21:22] *** zakharyas joined
[21:25] *** canopus left
[21:26] *** Ven_ left
[21:31] *** canopus joined
[21:32] *** broquaint left
[21:33] *** broquaint joined
[21:33] *** Gothmog_ left
[21:33] *** Gothmog_ joined
[21:36] *** camelia left
[21:39] *** rba_ joined
[21:42] *** espadrine joined
[21:45] *** setty1 left
[21:45] *** camelia joined
[21:46] *** ChanServ sets mode: +v camelia

[21:51] *** pullphinger joined
[21:55] *** mohae left
[21:56] *** [particle] left
[21:57] *** mohae joined
[21:57] *** [particle] joined
[21:57] *** pullphinger left
[21:58] *** pullphinger joined
[21:58] <AlexDaniel> Oh, seems like gogs&notabug are less dead nowadays

[21:59] *** pierrot_ left
[21:59] *** dataange` joined
[21:59] *** pierrot joined
[22:00] *** nemo left
[22:00] *** nemo joined
[22:00] <timotimo> what's that?

[22:00] *** nemo is now known as Guest39821

[22:01] *** dataangel left
[22:02] *** aindilis` joined
[22:02] <AlexDaniel> timotimo: basically a free/open-source alternative to github

[22:03] *** aindilis left
[22:04] <AlexDaniel> timotimo: for example: https://notabug.org/hp/gogs/

[22:06] <timotimo> i see

[22:09] <AlexDaniel> last time I checked not only it was very … useless… but these projects were also a bit dead. Good to see them alive again

[22:12] <timotimo> https://twitter.com/loltimo/status/778718244429365248

[22:13] *** edehont left
[22:15] *** zakharyas left
[22:20] *** rgrinberg left
[22:46] *** sufrostico left
[22:48] *** sili_ left
[22:53] *** bjz left
[22:55] *** firstdayonthejob left
[22:57] *** ka joined
[23:09] *** Juerd left
[23:10] *** Juerd joined
[23:10] *** kerframil joined
[23:25] *** andrzejku left
[23:30] *** vcv left
[23:30] *** vcv joined
[23:37] *** cdg left
[23:39] *** breinbaas left
[23:39] *** larion left
[23:44] *** tushar joined
[23:44] *** vike left
[23:44] *** RabidGravy left
[23:48] *** sufrostico joined
[23:48] *** mcsnolte left
[23:54] *** vike joined
[23:56] *** espadrine left
