[00:02] <Xliff> CRAP

[00:02] <Xliff> I knew there was a reason I wasn't working on that module. 

[00:02] <Xliff> There was a recent change in rakudo (end of summer, maybe) that introduced that.

[00:03] <Xliff> It wasn't there in July, and the XML::LibXML codebase used it extensively.

[00:04] <MasterDuke> btw, don't know if you just typed something wrong, but the line i commented out was "use XML::LibXML::CStructs;" without the ":types"

[00:04] <MasterDuke> (obviously who cares if it's commented out, but just in case you're on a branch or something"

[00:05] *** raiph left
[00:05] <Xliff> OK.

[00:05] <Xliff> in XML::LibXML dir, "git checkout -b 15nodelist"

[00:06] <Xliff> Then pull new changes.

[00:06] *** giraffe left
[00:07] <MasterDuke> ===SORRY!=== Expected MAST::Frame, but didn't get one

[00:07] <Xliff> YES!!

[00:07] <Xliff> Er.... Um...

[00:07] <Xliff> Youknowwhuddimean

[00:08] <Xliff> So, there could be something screwy with either the XML::LibXML codebase or XML::XSLT

[00:08] <Xliff> I just don't know.

[00:08] <Xliff> and XML::LibXML needs serious overhaul due to bitrot

[00:13] *** espadrine left
[00:17] *** pmurias left
[00:21] <MasterDuke> Xliff: well, so far golfed it to this: https://gist.github.com/MasterDuke17/a2c8e38be2580f6d6703025c90220441

[00:23] <maxp_> is there some kind of problems about capturing groups and ratchet adverbs?

[00:24] <maxp_> I've this:"<ciao>mamma</ciao>" ~~ /:r '<' (<[\w\W]>+?) '>'/

[00:24] <maxp_> and I expect the word "ciao" but it returns nil

[00:25] <maxp_> whitout parentesis it works

[00:26] <AlexDaniel> bisect: "<ciao>mamma</ciao>" ~~ /:r '<' (<[\w\W]>+?) '>'/

[00:26] <bisectable6> AlexDaniel, On both starting points (old=2015.12 new=29b228c) the exit code is 0 and the output is identical as well

[00:26] <bisectable6> AlexDaniel, Output on both points: 

[00:26] <AlexDaniel> ah, right

[00:27] <AlexDaniel> ok this is the simplified version

[00:27] <AlexDaniel> m: "<ciao>mamma</ciao>" ~~ /:r '<' (.+?) '>'/

[00:27] <camelia> rakudo-moar 29b228: ( no output )

[00:27] *** giraffe joined
[00:27] <MasterDuke> Xliff: actually, you can even remove "use XML::LibXML::Parser;", but you do still need to include "p6-XML-LibXML/lib/" in your -I

[00:27] <AlexDaniel> m: say "<ciao>mamma</ciao>" ~~ /:r '<' (.+?) '>'/

[00:27] <camelia> rakudo-moar 29b228: OUTPUT«Nil␤»

[00:27] <AlexDaniel> m: say "<ciao>mamma</ciao>" ~~ /:r '<' .+? '>'/

[00:27] <camelia> rakudo-moar 29b228: OUTPUT«｢<ciao>｣␤»

[00:28] <AlexDaniel> in fact, it does not have to capture

[00:28] <AlexDaniel> m: say "<ciao>mamma</ciao>" ~~ /:r '<' [.+?] '>'/

[00:28] <camelia> rakudo-moar 29b228: OUTPUT«｢<ciao>｣␤»

[00:28] <AlexDaniel> I think this is part of RT #130117 ?

[00:28] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130117

[00:29] <MasterDuke> maybe https://rt.perl.org/Ticket/Display.html?id=123934 also

[00:29] <Xliff> Huh!

[00:30] <AlexDaniel> maxp_: while there is probably a bug, I think it is wrong to expect <ciao> here

[00:30] <Xliff> MasterDuke: So it is something in XML::XSLT::Subs

[00:30] <maxp_> ok thanks

[00:30] <AlexDaniel> m: say "<ciao>mamma</ciao>" ~~ /:r '<' (<-[>]>+) '>'/

[00:30] <camelia> rakudo-moar 29b228: OUTPUT«｢<ciao>｣␤ 0 => ｢ciao｣␤»

[00:30] <AlexDaniel> maxp_: ↑ that's how you get it :)

[00:30] <Xliff> Because I have the 2 sub definitions commented out in my current version.

[00:30] <maxp_> ok thanks again

[00:31] <Xliff> And most of XML::XSLT::Subs is commented out as well.

[00:31] <Xliff> At least here

[00:31] <samcv> more uniprops work in new PR :) will have 'Name' 'Titlecase_Mapping' 'Lowercase_Mapping' 'Uppercase_Mapping' and 'Numeric_Value' working

[00:31] <samcv> i think something has to happen in Moar though for Name1 the unicode version 1 name to work though, and probably a bunch of other ones

[00:31] <samcv> there's a lot of properties

[00:32] <MasterDuke> Xliff: MAST::Frame errors may be above my paygrade, but at least it's been golfed a bit

[00:33] <Xliff> Yes. Thank you so much for looking into it, MasterDuke++

[00:33] <Xliff> So it looks like it is something with XML::LibXML and XML::XSLT

[00:33] <Xliff> But now I am more leaning toward XML::LibXML

[00:34] <Xliff> Which... again... bitrot

[00:34] <Xliff> *sigh*

[00:37] *** maxp_ left
[00:37] <Xliff> Yup. After that bit of code culling, it looks like it is XML::LibXML and not anything with XML::XSLT at all!

[00:37] <Xliff> wow

[00:38] *** cfa left
[00:43] *** aborazmeh joined
[00:43] *** aborazmeh left
[00:43] *** aborazmeh joined
[00:57] *** BenGoldberg joined
[00:58] *** aborazmeh left
[01:00] *** captain-adequate left
[01:04] *** canopus left
[01:07] <samcv> ok so there are unicode properties to find the matching bracket Bidi_Paired_Bracket is the thing

[01:07] <samcv> and atm it isn't supported by MoarVM or rakudo

[01:07] <samcv> also:

[01:07] <samcv>  For legacy reasons, the characters U+FD3E ORNATE LEFT PARENTHESIS and

[01:07] <samcv> # U+FD3F ORNATE RIGHT PARENTHESIS do not mirror in bidirectional display

[01:07] <samcv> # and therefore do not form a bracket pair.

[01:08] <samcv> also idk if that means we should remove it from our list. but i think it was used in 6.c ...

[01:08] <samcv> but i doubt anybody has actually used it

[01:08] <AlexDaniel> u: U+FD3F

[01:08] <unicodable6> AlexDaniel, U+FD3F ORNATE RIGHT PARENTHESIS [Ps] (﴿)

[01:08] <samcv> and there's a bracket property where you can find out if it's open or close

[01:08] <phatbot> u: U+FD3E

[01:08] <unicodable6> phatbot, U+FD3E ORNATE LEFT PARENTHESIS [Pe] (﴾)

[01:09] <samcv> ftp://ftp.unicode.org/Public/UNIDATA/BidiBrackets.txt this is the file

[01:09] <samcv> let me check 6.c tests...

[01:09] <samcv> i remember it faliing when i switched the order of the ornate pars in nqp

[01:09] <AlexDaniel> commit: all say Q﴾hello﴿

[01:10] <committable6> AlexDaniel, https://gist.github.com/ae5fddbcc12cba44510f9a0e14842b7a

[01:10] <AlexDaniel> hehehe

[01:10] <samcv> :(

[01:11] <samcv> i think we should really only support that list i linked to...

[01:11] <samcv> let me check roast though

[01:12] *** canopus joined
[01:12] <samcv> yeah.. it's in roast

[01:13] <phatbot> Then it'd have to wait until 6.d

[01:13] <phatbot> huggable: 6.d

[01:13] <huggable> phatbot, Proposals for 6.d language: https://github.com/perl6/specs/blob/master/v6d.pod

[01:13] <phatbot> ^ stick it in there, if it's worth it.

[01:14] <samcv> u: “

[01:14] <unicodable6> samcv, U+201C LEFT DOUBLE QUOTATION MARK [Pi] (“)

[01:14] <AlexDaniel> it's something to think about

[01:14] <samcv> yeah

[01:15] <samcv> the quotation marks aren't listed in that unicode properties but also weird that the closing and opening don't match for those ornate parens either

[01:17] <SmokeMachine> I used my class (that instantiated a singleton) on a module, then I used the same class on my main program and tried to use the singleton... it got a different object... how should I do that?

[01:21] <phatbot> No idea

[01:21] * phatbot frequently reaches to .try

[01:21] <phatbot> Anyone else the same? 

[01:21] <phatbot> 'fasdfsd'.EVAL.try; ....

[01:21] <phatbot> probably doesn't make any sense :}

[01:24] *** mawkish_ left
[01:28] <samcv> and we will def need the BIDI mirrored glyphs thing if we want to do RTL text well

[01:28] <samcv> i'm looking up what it would take to support the Unicode Bidirectional spec

[01:29] * samcv puts on her heavy duty gear for reading this spec

[01:29] *** aborazmeh joined
[01:29] *** aborazmeh left
[01:29] *** aborazmeh joined
[01:29] <samcv> there's a BIDI unicode spec test included with unicode sa well... so someday would be good if we can pass it

[01:30] <phatbot> https://www.youtube.com/watch?v=LNKocMiehZA

[01:31] <samcv> i think the spec is most important for DISPLAYING RTL text.. but I will see what we need in all of our levels to support that kind of thing

[01:32] *** unicodable6 left
[01:32] <samcv> but we need to have some way in perl 6 to be able to figure out the order such characters should be displayed in

[01:32] <samcv> However, because these right-to-left scripts use digits that are written from left to right, the text is actually bidirectional

[01:32] *** unicodable6 joined
[01:32] <samcv> lots to consider

[01:34] <[Coke]> docs - should the perl5-style USAGEs in docs follow the 'space after comma' rule?

[01:35] *** unicodable6 left
[01:35] <phatbot> Yes, but I'm biased since I always write that way :D

[01:35] *** unicodable6 joined
[01:36] <AlexDaniel> what should whateverables do when gisting something that contains control characters?

[01:38] <dalek> doc: 7dafc5f | coke++ | xt/words.pws:

[01:38] <dalek> doc: learn new function param names

[01:38] <dalek> doc: review: https://github.com/perl6/doc/commit/7dafc5f000

[01:40] <AlexDaniel> MasterDuke: ↑ ?

[01:40] *** pyrimidine joined
[01:43] *** aindilis left
[01:44] *** pyrimidine left
[01:45] <samcv> ok 'Bidi_Mirroring_Glyph', atm nqp::getuniprop_str returns a string, which is the hex codepoint of the mirrored glyph

[01:45] <samcv> i'm thinking probably Moar is storing it as a string not a number?

[01:45] <samcv> how do we want this to work? have nqp::getuniprop_int return the number of the codepoint?

[01:46] *** travis-ci joined
[01:46] <travis-ci> Doc build failed. Will "Coke" Coleda 'learn new function param names'

[01:46] <travis-ci> https://travis-ci.org/perl6/doc/builds/183459374 https://github.com/perl6/doc/compare/a4292f524145...7dafc5f0000f

[01:46] *** travis-ci left
[01:49] <dalek> doc: c23878a | coke++ | doc/Language/5to6-perlfunc.pod6:

[01:49] <dalek> doc: prefer space after comma

[01:49] <dalek> doc: review: https://github.com/perl6/doc/commit/c23878a5be

[01:49] <synopsebot6> Link: http://doc.perl6.org/language/5to6-perlfunc

[01:51] *** skids joined
[01:53] *** sufrostico left
[01:57] *** travis-ci joined
[01:57] <travis-ci> Doc build failed. Will "Coke" Coleda 'prefer space after comma'

[01:57] <travis-ci> https://travis-ci.org/perl6/doc/builds/183461255 https://github.com/perl6/doc/compare/7dafc5f0000f...c23878a5be8d

[01:57] *** travis-ci left
[01:59] *** aborazmeh left
[02:04] *** dataangel joined
[02:04] *** kalkin- left
[02:04] *** kalkin-_ joined
[02:18] *** rpburkholder joined
[02:18] *** gfldex left
[02:19] *** gfldex joined
[02:19] *** rburkholder left
[02:29] *** loveperl joined
[02:29] *** rpburkholder left
[02:30] <loveperl> How to know the name of a class?

[02:30] <SmokeMachine> there are 2 different modules in memory when I load it at compile time and I load it at run time?

[02:30] <SmokeMachine> m: say 42.^name

[02:30] <camelia> rakudo-moar 29b228: OUTPUT«Int␤»

[02:31] <AlexDaniel> m: say 42.HOW

[02:31] <camelia> rakudo-moar 29b228: OUTPUT«Perl6::Metamodel::ClassHOW.new␤»

[02:31] <loveperl> how?

[02:31] <AlexDaniel> m: say 42.WHAT

[02:31] <camelia> rakudo-moar 29b228: OUTPUT«(Int)␤»

[02:31] <loveperl> ok tenk you 

[02:31] <loveperl> tank you

[02:31] <AlexDaniel> m: say 42.WHO

[02:31] <camelia> rakudo-moar 6fc769: OUTPUT«Int␤»

[02:33] <SmokeMachine> when I get a instance of a singleton inside of a trait_mod code, I get a object and when I get it on a regular code I get a different object... is that expected?

[02:37] <SmokeMachine> https://www.irccloud.com/pastebin/3zFvLdlH/

[02:37] <loveperl> What do you think of this syntax? 

[02:37] <loveperl> if $saludo.WHO == Humano {  say "hola humano"; }

[02:38] <SmokeMachine> loveperl: try using the smartmatch...

[02:38] <SmokeMachine> m: if 42 ~~ Int { say "Hi Int" }

[02:38] <camelia> rakudo-moar 6fc769: OUTPUT«Hi Int␤»

[02:38] <AlexDaniel> loveperl: what are you trying to do?

[02:38] <AlexDaniel> huggable: xy

[02:38] <huggable> AlexDaniel, nothing found

[02:39] <AlexDaniel> huggable: xy problem

[02:39] <huggable> AlexDaniel, You want to do X, but don't know how. You think you can solve it using Y, but don't know how to do that, either. So, you ask about Y in order to solve X, which doesn't make sense. You should ask about X.

[02:41] <loveperl> I want to know if the name of the class is human?

[02:43] <loveperl> ?

[02:44] <loveperl> what?

[02:45] *** ilbot3 left
[02:45] <SmokeMachine> but when I do that in the same "file" it gets the same object:

[02:45] <SmokeMachine> https://www.irccloud.com/pastebin/NK78LBlF/

[02:46] <AlexDaniel> loveperl: then do $saludo ~~ Humano

[02:47] <AlexDaniel> loveperl: note that this is not just checking the name (Y), it actually checks the class (X)

[02:47] *** wamba left
[02:47] <SmokeMachine> AlexDaniel: do you know if thats expected?

[02:47] *** ilbot3 joined
[02:48] <dalek> doc: 96761b2 | coke++ | xt/space-after-commma.t:

[02:48] <dalek> doc: Add xt test to insure space after comma.

[02:48] <dalek> doc: 

[02:48] <dalek> doc: * Only checks non-code.

[02:48] <dalek> doc: * Has several exceptions for text already in docs/

[02:48] <dalek> doc: 

[02:48] <dalek> doc: Closes #666

[02:48] <dalek> doc: review: https://github.com/perl6/doc/commit/96761b2209

[02:48] <[Coke]> Still no feedback on https://github.com/perl6/doc/pull/1047 - fuzzy search.

[02:49] <samcv> ok so to implement the Unicode Bidirectional Algorithm, that would look like: given a string, determine:

[02:49] <samcv> 1: whether the paragraph direction is LTR, RTL or autoLTR

[02:49] <AlexDaniel> [Coke]: bring it on! You'll get a bunch of feedback ;)

[02:49] <samcv> 2: the embedding levels of the text (embedded rtl, ltr text etc)

[02:49] *** pyrimidine joined
[02:50] <loveperl> AlexDaniel tank you 

[02:50] <samcv> 3: being able to return a list of the mapping of characters in the string to indexs how they map

[02:50] <samcv> like RTL text obviously the mappings would just be the opposite of from 1->length of string

[02:51] <samcv> or 0 or however we start

[02:51] <dalek> doc/coke/levenshtein: ea1230a | coke++ | / (3 files):

[02:51] <dalek> doc/coke/levenshtein: Allow fuzzy searching

[02:51] <dalek> doc/coke/levenshtein: 

[02:51] <dalek> doc/coke/levenshtein: For #999

[02:51] <dalek> doc/coke/levenshtein: review: https://github.com/perl6/doc/commit/ea1230a397

[02:51] <AlexDaniel> SmokeMachine: as always, it is a bit hard to tell if there's no simple example to reproduce the issue

[02:51] <samcv> what is anybodies thoughts on this?

[02:51] <samcv> what kind of perl 6 routines or whatever would be want to have access to this information

[02:52] <SmokeMachine> There are!

[02:52] <SmokeMachine> https://www.irccloud.com/pastebin/3zFvLdlH/

[02:52] <SmokeMachine> https://www.irccloud.com/pastebin/NK78LBlF/

[02:52] <AlexDaniel> ahhh

[02:52] <AlexDaniel> let's see…

[02:52] <samcv> any thoughts on this AlexDaniel ?

[02:53] <AlexDaniel> I feel like a rubber duck :)

[02:53] *** loveperl left
[02:53] <SmokeMachine> AlexDaniel: the first one is the problem, and the second is it working on the "same file"...

[02:54] *** pyrimidine left
[02:55] *** pyrimidine joined
[02:55] <AlexDaniel> samcv: wait, what problem are you trying to solve?

[02:55] * samcv is unsure

[02:55] *** travis-ci joined
[02:55] <travis-ci> Doc build failed. Will "Coke" Coleda 'Add xt test to insure space after comma.

[02:55] <travis-ci> https://travis-ci.org/perl6/doc/builds/183470235 https://github.com/perl6/doc/compare/c23878a5be8d...96761b22094d

[02:55] *** travis-ci left
[02:55] <samcv> problem of not implementing the unicode bidirectional algorithm?

[02:56] <samcv> and not being able to pass the test given in the unicode spec

[02:56] <samcv> for said algorithm

[02:57] <AlexDaniel> is it for string operations or for the source code? :)

[02:57] <samcv> well. string operations for sure

[02:58] *** kyclark joined
[02:58] <samcv> i'm just trying to think about how that would look... are there any perl 6 devs whose native language is RTL?

[02:58] *** travis-ci joined
[02:58] <travis-ci> Doc build failed. Will "Coke" Coleda 'Allow fuzzy searching

[02:58] <travis-ci> https://travis-ci.org/perl6/doc/builds/183470746 https://github.com/perl6/doc/compare/7ebb0d77b368...ea1230a397f9

[02:58] *** travis-ci left
[02:59] *** cyphase joined
[02:59] *** pyrimidine left
[03:00] <samcv> AlexDaniel, also source code would be interesting... hah

[03:01] <samcv> use v6; use RTL; hah

[03:01] <samcv> or even maybe not as something you have to use... hm

[03:01] <samcv> m: say "\x[05D0]\x[05D1]\x[0028]\x[05D2]\x[05D3]\x[005B]\x[0026]\x[0065]\x[0066]\x[005D]\x[002E]\x[0029]\x[0067]\x[0068]"

[03:01] <camelia> rakudo-moar 6fc769: OUTPUT«אב(גד[&ef].)gh␤»

[03:01] <samcv> like this string is one of the unicode spec strings

[03:01] <AlexDaniel> SmokeMachine: the two numbers in the first case…

[03:02] <AlexDaniel> SmokeMachine: I only get one on any subsequent runs

[03:02] <AlexDaniel> SmokeMachine: so one of them is from precompilation, right?

[03:02] <samcv> paragraph direction is supposed to be LTR

[03:02] <samcv> 1 0 2 4 3 5 6 7 8 9 10 11 12 13

[03:02] <samcv> this is the order they are shown in

[03:02] *** [vlad] joined
[03:03] <samcv> and that parenthesis should prolly be shown so that there's open and closing. at least for me it displays two right parens

[03:04] <SmokeMachine> AlexDaniel: sorry, I didn't get...

[03:04] <AlexDaniel> SmokeMachine: well, your first example with -MFuzz -MSum

[03:04] <AlexDaniel> SmokeMachine: so I run it and get two different numbers

[03:05] <AlexDaniel> SmokeMachine: BUT! If I run it again, I only get one number

[03:05] <SmokeMachine> yes... me too... shouldn't be the same?

[03:05] <AlexDaniel> SmokeMachine: if I delete .precomp, I'd get two numbers again

[03:05] <SmokeMachine> yes, the same with me!

[03:05] <AlexDaniel> that's just how the precompilation works, I think

[03:06] <SmokeMachine> so, I can't use singleton on trait_mod?

[03:07] *** kyclark left
[03:08] <AlexDaniel> SmokeMachine: why not?

[03:08] <AlexDaniel> SmokeMachine: you can discard what happens during the precompilation

[03:09] *** kyclark joined
[03:09] <SmokeMachine> in my case I was pushing the functions with the trait on a array on the singleton to use it in another part of the code...

[03:10] <SmokeMachine> but it returns another object, so I can't get the funds...

[03:10] <SmokeMachine> *funcs

[03:10] *** noganex_ joined
[03:11] <SmokeMachine> AlexDaniel: My "real" case is this one: https://github.com/FCO/Test-Fuzz

[03:11] <SmokeMachine> https://github.com/FCO/Test-Fuzz/blob/master/lib/Test/Fuzz.pm

[03:11] *** kyclark left
[03:13] *** noganex left
[03:14] *** kyclark joined
[03:15] <SmokeMachine> on https://github.com/FCO/Test-Fuzz/blob/master/lib/Test/Fuzz.pm#L115 and here https://github.com/FCO/Test-Fuzz/blob/master/lib/Test/Fuzz.pm#L104 I save the function on the %!fuzzers and on https://github.com/FCO/Test-Fuzz/blob/master/lib/Test/Fuzz.pm#L157 I use that... but its empty, because its another object...

[03:15] <SmokeMachine> AlexDaniel: ^^

[03:16] <samcv> m: my @o = "\x[05D0]\x[05D1]\x[0028]\x[05D2]\x[05D3]\x[005B]\x[0026]\x[0065]\x[0066]\x[005D]\x[002E]\x[0029]\x[0067]\x[0068]".ords; my @n; my @nums = "1 0 2 4 3 5 6 7 8 9 10 11 12 13".split(' ').».Int; for ^@o -> $i { @n[ @nums[$i] ] = @o[$i] }; say @n.».chr;

[03:16] <camelia> rakudo-moar 6fc769: OUTPUT«[ב א ( ד ג [ & e f ] . ) g h]␤»

[03:17] *** kyclark left
[03:18] <samcv> the hebrew characters are the opposite order in this if you look closely

[03:19] <samcv> tho that's more boring cause it's a LTR paragraph

[03:19] <AlexDaniel> SmokeMachine: this is some weird stuff going on there! :)

[03:22] *** cdg left
[03:22] <SmokeMachine> AlexDaniel: So, thats not expected?

[03:26] *** rurban joined
[03:27] <AlexDaniel> SmokeMachine: I don't think I know enough about traits to answer :(

[03:27] <SmokeMachine> :(

[03:27] <SmokeMachine> AlexDaniel: do you know who could help me?

[03:31] <AlexDaniel> SmokeMachine: I think just asking this question here at a different time of a day is a good idea :)

[03:31] *** pyrimidine joined
[03:31] <SmokeMachine> AlexDaniel: OK! Ill do that!!! Thank you very much!

[03:34] <AlexDaniel> SmokeMachine: so in other words, you want to push some data into %!fuzzers during the compilation?

[03:34] <SmokeMachine> thats is!

[03:34] <SmokeMachine> thats it!

[03:34] <SmokeMachine> AlexDaniel: ^^

[03:36] *** pyrimidine left
[03:40] <AlexDaniel> yea, how to save some data from a trait… hmm!

[03:41] <AlexDaniel> I don't know! Time to sleep :)

[03:42] *** khw left
[03:47] *** AlexDaniel left
[03:47] *** [vlad] left
[03:55] <samcv> i want a uniprop-enum ...

[03:55] <samcv> hm

[03:55] <tailgate> how do I match [\w -]+ (alphanumeric + dashes, at least one)

[03:55] <tailgate> can't quite get the syntax

[03:56] <samcv> m: say '-a' ~~ /[\w -]+/

[03:56] <camelia> rakudo-moar 6fc769: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unrecognized regex metacharacter - (must be quoted to match literally)␤at <tmp>:1␤------> 3say '-a' ~~ /[\w7⏏5 -]+/␤    expecting any of:␤        infix stopper␤»

[03:56] <samcv> m: say '-a' ~~ /[\w '-']+/

[03:56] <camelia> rakudo-moar 6fc769: OUTPUT«Nil␤»

[03:56] <samcv> m: say '-a' ~~ /[<Alpha> '-']+/

[03:56] <camelia> rakudo-moar 6fc769: OUTPUT«No such method 'Alpha' for invocant of type 'Cursor'␤  in block <unit> at <tmp> line 1␤␤»

[03:56] <samcv> oh

[03:56] <samcv> m: say '-a' ~~ /<[\w -]>+/

[03:56] <camelia> rakudo-moar 6fc769: OUTPUT«｢-a｣␤»

[03:56] <samcv> there

[03:56] <samcv> m: say '-a' ~~ /<[<Alpha> -]>+/

[03:56] <camelia> rakudo-moar 6fc769: OUTPUT«｢-a｣␤»

[03:57] <samcv> that is what you want

[03:57] <samcv> er alpha num tho

[03:57] <tailgate>  thanks

[03:57] <samcv> m: say '-a1' ~~ /<[<Alpha> -]>+/

[03:57] <camelia> rakudo-moar 6fc769: OUTPUT«｢-a｣␤»

[03:57] <samcv> m: say '-a1' ~~ /<[<AlphaNum> -]>+/

[03:57] <camelia> rakudo-moar 6fc769: OUTPUT«｢-a｣␤»

[03:57] <samcv> forget which that one is

[03:58] <samcv> m: say '-a1' ~~ /<[<Alpha>\d -]>+/

[03:58] <camelia> rakudo-moar 6fc769: OUTPUT«｢-a1｣␤»

[03:58] <samcv> that works

[04:12] *** aborazmeh joined
[04:12] *** aborazmeh left
[04:12] *** aborazmeh joined
[04:15] <samcv> pythons unicodedata module that comes with it is kinda lame https://docs.python.org/2/library/unicodedata.html#module-unicodedata

[04:22] <SmokeMachine> I just started my "Generative testing" draft. Could someone take a look and give me some feedback please?

[04:25] *** Ven left
[04:27] <samcv> is this the same thing you were talking about earlier with AlexDaniel or somethnig different?

[04:28] <samcv> i'll look at it though, curious not sure how much I can help though

[04:29] <SmokeMachine> samcv: That's my draft for perl6 advent calendar... talking about the module that I was talking with AlexDaniel...

[04:29] <samcv> oh i'll look at it then!

[04:29] <SmokeMachine> samcv: thats on the wordpress...

[04:30] <samcv> oh

[04:30] <samcv> :(

[04:32] <SmokeMachine> samcv: http://pastebin.com/McHWeum7

[04:33] <samcv> nice

[04:35] <SmokeMachine> samcv: did you like it?! :)

[04:35] <samcv> does Test::Fuzz know what the result should be?

[04:35] <samcv> or does it just tell you if it gets an error?

[04:36] <SmokeMachine> by default it just test if it did break...

[04:37] <samcv> ah kk :)

[04:37] <SmokeMachine> but you can set sub function(...) is fuzzed(test => *.is-prime) {}

[04:37] <SmokeMachine> for example...

[04:37] <SmokeMachine> if you want that the function only return prime numbers...

[04:38] <SmokeMachine> like the function blu here: https://github.com/FCO/Test-Fuzz/blob/master/test.p6

[04:38] <SmokeMachine> samcv: ^^

[04:39] <samcv> nice

[04:40] <SmokeMachine> did you find any terrible english error?

[04:40] <SmokeMachine> samcv: ^^

[04:40] <samcv> nope

[04:41] <SmokeMachine> great!

[04:41] <SmokeMachine> thank you very much!

[04:41] <SmokeMachine> samcv: Ill continue tomorrow!

[04:41] <samcv> good start so far :)

[04:42] <SmokeMachine> samcv: :D

[04:42] <SmokeMachine> samcv: thank you very much!

[04:45] *** kyclark joined
[04:53] *** kyclark left
[05:06] <MasterDuke> .tell AlexDaniel it looks like you implemented something already, but i'd say just return the name for them or something like that, i don't see anybody ever wanting them for real

[05:06] <yoleaux> MasterDuke: I'll pass your message to AlexDaniel.

[05:09] *** geraud1 left
[05:12] *** geraud joined
[05:25] *** pyrimidine joined
[05:29] *** pyrimidine left
[05:37] *** telex left
[05:38] *** telex joined
[05:43] *** rurban left
[05:44] *** geraud left
[05:46] *** geraud joined
[05:48] *** Cabanossi left
[05:49] *** Cabanossi joined
[05:55] *** geraud left
[05:55] *** geraud joined
[06:00] *** rurban joined
[06:00] *** rurban left
[06:01] *** brillenfux joined
[06:16] *** BenGoldberg left
[06:17] *** aborazmeh left
[06:18] *** BenGoldberg joined
[06:22] *** Vynce joined
[06:25] *** BenGoldberg left
[06:31] *** pyrimidine joined
[06:34] *** darutoko joined
[06:35] *** pyrimidine left
[06:44] *** Vynce left
[06:49] <dalek> perl6.org: cb115bf | samcv++ | source/whatever/index.html:

[06:49] <dalek> perl6.org: Add links for atom-language-perl6 and script

[06:49] <dalek> perl6.org: 

[06:49] <dalek> perl6.org: For syntax highlighting and running Perl 6 from Atom

[06:49] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/cb115bf742

[06:50] *** RabidGravy joined
[07:03] *** jonas1 joined
[07:08] *** ufobat joined
[07:09] *** imcsk8_ left
[07:09] *** imcsk8_ joined
[07:11] *** cooper_ left
[07:11] *** cooper_ joined
[07:12] <RabidGravy> morning

[07:12] <RabidGravy> I see I managed to get the scheduled post thing right in the end

[07:16] *** skids left
[07:21] *** domidumont joined
[07:26] *** domidumont left
[07:27] *** domidumont joined
[07:31] <moritz> RabidGravy++

[07:36] *** pyrimidine joined
[07:40] *** pyrimidine left
[07:45] *** Actualeyes left
[07:54] *** kurahaupo joined
[08:01] *** labster left
[08:03] *** dataange` joined
[08:03] *** [particle]1 joined
[08:03] *** labster joined
[08:04] *** dataangel left
[08:07] *** ilbelkyr joined
[08:07] *** Actualeyes joined
[08:13] *** abraxxa joined
[08:13] *** djbkd left
[08:14] *** wamba joined
[08:22] <ufobat> morning

[08:23] <ufobat> the module Task::Star does not have a travis-ci integration, is that on purpose?

[08:23] <ufobat> i mean, isnt it a pretty good test if Task::Star is installable via zef and/or panda?

[08:24] <Xliff> What are dynvars? Has anything been written up about them?

[08:24] *** zakharyas joined
[08:24] <moritz> ufobat: sure, go for it!

[08:24] <ufobat> kk :)

[08:25] *** MARTIMM joined
[08:27] *** baest left
[08:27] *** MARTIMM left
[08:29] <arnsholt> Xliff: A dynvar (also called contextual in Perl 6 parlance) is a variable that is looked up through *dynamic*, rather than lexical, scope

[08:29] <arnsholt> Where dynamic scope follows the call stack, so if the name is found in the current scope, you look in your caller's scope, and so on

[08:30] <arnsholt> They're somewhat uncommon in day-to-day code, but when you need them you really need them

[08:30] <moritz> you use them when in the bad old days, you'd use a global

[08:30] <arnsholt> They're very useful for global variables for example. Instead of a global STDOUT, Perl 6 has a dynvar $*OUT

[08:30] *** pyrimidine joined
[08:31] <moritz> but they are more thread safe and generally safer than globals

[08:31] <arnsholt> This way, rather than overriding a global before doing something and making sure it's reset correctly and all that crap when you leave, you create a new binding for it with "my $*OUT = ..."

[08:31] <arnsholt> That way, STDOUT will be altered *only* inside the current function and code called by it

[08:32] <arnsholt> And as moritz says, thread safety

[08:32] <arnsholt> They're also very useful in grammar code

[08:32] <arnsholt> Since Perl 6 grammars are recursive descent, lexical scope in the program being compiled will correspond to the dynamic scope of the parser

[08:33] <moritz> arnsholt: that concept might deserve its own blog post some day

[08:33] <moritz> I've never seen it explained well outside of #perl6

[08:33] <arnsholt> Am I being volunteered? ;)

[08:33] <arnsholt> But more seriously, I agree

[08:34] *** pierre_ joined
[08:34] <arnsholt> It's a useful concept, and not very complicated either. Just not very common

[08:34] <arnsholt> (Although older Lisps like elisp frequently only have dynamically scoped variables, not lexically scoped)

[08:34] <arnsholt> And apparently you can do some magic with macros and dynamic scope to implement lexical scope

[08:35] *** pyrimidine left
[08:38] <Xliff> arnsholt++ # Brilliant explanation. Thanks!

[08:39] <samcv> what unicode properties are allowed for heredocs? anything?

[08:39] <samcv> except forward slashes or something?

[08:39] *** dakkar joined
[08:39] <samcv> m: say q:to/'/;␤test␤'

[08:39] <camelia> rakudo-moar 6fc769: OUTPUT«test␤␤»

[08:40] <samcv> m: my $var = "\0"; say q:to/$var/;␤test␤'

[08:40] <camelia> rakudo-moar 6fc769: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Ending delimiter $var not found␤at <tmp>:3␤------> 3'7⏏5<EOL>␤    expecting any of:␤        whitespace␤»

[08:40] <samcv> any nonwhitespace character?

[08:43] <psch> m: say q:to{/};␤test␤/

[08:43] <camelia> rakudo-moar 6fc769: OUTPUT«test␤␤»

[08:43] *** pierre_ left
[08:44] *** pierre_ joined
[08:44] <psch> samcv: <-[ws]> sounds reasonable to me, but you'd probably have to check Perl6::Grammar to be sure

[08:45] <samcv> yeah it looks like <-ws>

[08:45] <samcv> probably

[08:45] <psch> right, not the character class consisting of 'w' and 's' :)

[08:47] <psch> or, actually, 'not "not the character class consisting of 'w' and 's'"' vOv

[08:47] <psch> +plus proper nested quoting parsing :P

[08:47] <samcv> heredocs do quoted parsing? what?

[08:48] <psch> no, just for my statement... :)

[08:48] <samcv> m: say q:to/{/;␤this{}␤}

[08:48] <camelia> rakudo-moar 6fc769: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Ending delimiter { not found␤at <tmp>:3␤------> 3}7⏏5<EOL>␤    expecting any of:␤        whitespace␤»

[08:48] <samcv> oh ok

[08:48] <psch> heredocs parse whatever language you give them

[08:48] <psch> well, from Q and its sisters anyway

[08:48] <samcv> yeah i usually use Q or qq if i need interpolation

[08:49] <samcv> i like Q

[08:49] <samcv> very much

[08:49] <psch> m: say qqw:to/foo/;␤{ "foo", "bar" }␤baz␤foo

[08:49] <camelia> rakudo-moar 6fc769: OUTPUT«(foo bar baz)␤»

[08:49] <samcv> m: say "\r"

[08:49] <camelia> rakudo-moar 6fc769: OUTPUT«

[08:49] <samcv> aww no carriage return chars?

[08:49] <samcv> err

[08:49] <psch> .u carriage return

[08:49] <yoleaux> U+000D CARRIAGE RETURN (CR) [Cc] (␍)

[08:49] <yoleaux> U+240D SYMBOL FOR CARRIAGE RETURN [So] (␍)

[08:49] <samcv> yeah

[08:50] <samcv> lemme see what my bot does

[08:50] <psch> could maybe stuff that into camelia as well, or whateverable maybe

[08:50] <psch> eval: say "\r"

[08:50] <evalable6> psch, rakudo-moar 6fc7698: OUTPUT«»

[08:50] <samcv> oh it doeqsn't hm

[08:50] <psch> well, that at least doesn't eat the >>

[08:50] <samcv> m: say "\t"

[08:50] <camelia> rakudo-moar 6fc769: OUTPUT«     ␤»

[08:50] <samcv> :)

[08:50] <samcv> i mean :(

[08:50] <samcv> should be ↹

[08:51] <samcv> my bot deos that at least, ↹

[08:51] <samcv> though i guess less important than doing \t

[08:51] <samcv> err \r i'm tired

[08:56] *** kurahaupo left
[08:57] *** andrzeju_ joined
[08:57] *** andrzejku left
[09:00] *** g4 joined
[09:01] *** baest joined
[09:05] *** rindolf joined
[09:06] <dalek> ecosystem: 4a13e58 | (Takumi Akiyama)++ | META.list:

[09:06] <dalek> ecosystem: Add JSON::Hjson to ecosystem

[09:06] <dalek> ecosystem: 

[09:06] <dalek> ecosystem: See https://github.com/akiym/JSON-Hjson

[09:06] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/4a13e58f81

[09:06] *** Vynce joined
[09:06] <dalek> ecosystem: e349294 | RabidGravy++ | META.list:

[09:06] <dalek> ecosystem: Merge pull request #273 from akiym/master

[09:06] <dalek> ecosystem: 

[09:06] <dalek> ecosystem: Add JSON::Hjson to ecosystem

[09:06] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/e349294d5a

[09:08] *** ccntrq joined
[09:09] *** zakharyas left
[09:12] *** thayne joined
[09:12] *** grondilu joined
[09:13] *** ccntrq left
[09:14] *** ccntrq joined
[09:23] *** bjz joined
[09:27] *** wamba left
[09:29] *** ccntrq left
[09:31] *** pyrimidine joined
[09:41] *** astj joined
[09:42] <astj> moritz: Hi. Thank you for inviting me to github/perl6! I accepted. But I wonder for which reason I've invited.  Is there any reason?

[09:42] *** ccntrq joined
[09:44] <moritz> astj: you submitted a pull request to the ecosystem

[09:44] <moritz> astj: in future, you can push directly. And merge other's pull request, should you feel so inclined

[09:45] <astj> moritz: Okay, thanks!

[09:45] <moritz> astj: the ecosystem list was never meant to enable a gate keeper, we just did it because all our stuff is in github

[09:45] <moritz> astj: you're welcome

[09:47] *** bjz left
[09:47] *** ccntrq left
[09:53] *** rurban joined
[09:53] *** ccntrq joined
[09:55] *** pmurias joined
[09:57] *** pyrimidine left
[10:02] *** bjz joined
[10:02] *** Vynce left
[10:03] *** pierre_ left
[10:05] *** mniip joined
[10:05] *** Actualeyes left
[10:05] *** labster left
[10:07] *** astj left
[10:07] *** astj joined
[10:10] *** pierre_ joined
[10:11] *** pierre_ left
[10:12] *** astj left
[10:24] *** sena_kun joined
[10:37] <pmurias> jnthn: does checking if objects need to be repossesed have a big performance price on MoarVM?

[10:38] *** wamba joined
[10:39] <jnthn> pmurias: iirc, most of the time once we're running code it's just an integer comparison (because by runtime where's no SCs on the compiling stack)

[10:39] <jnthn> s/where/there/

[10:40] <jnthn> Presumably that stays CPU cache hot, and the branch is predictable, so it's not too awful

[10:44] *** lucasb joined
[10:49] *** lukaramu joined
[10:51] <ufobat> moritz, done ;) but i guess tadzik has to add the module to the CI test services https://github.com/tadzik/Task-Star/pull/12

[10:52] <tadzik> oh, will do

[10:54] <ufobat> cool

[10:55] <El_Che> not enough sleep, not enough coffee and reading jvm docs for performance tuning a big jvm service. Bad combination

[10:55] <ufobat> hmm on the other side, does it really make sense

[10:56] <ufobat> the tests are triggered whenever you.. push something?

[10:56] <ufobat> that is probably wrong for Task::Star

[10:56] *** pyrimidine joined
[10:58] *** rindolf left
[11:03] *** bjz_ joined
[11:03] *** bjz left
[11:04] <dalek> doc: ea1230a | coke++ | / (3 files):

[11:04] <dalek> doc: Allow fuzzy searching

[11:04] <dalek> doc: 

[11:04] <dalek> doc: For #999

[11:04] <dalek> doc: review: https://github.com/perl6/doc/commit/ea1230a397

[11:04] <dalek> doc: 2586a29 | (Zoffix Znet)++ | / (3 files):

[11:04] <dalek> doc: Merge pull request #1047 from perl6/coke/levenshtein

[11:04] <dalek> doc: 

[11:04] <dalek> doc: Allow fuzzy searching

[11:04] <dalek> doc: review: https://github.com/perl6/doc/commit/2586a29a54

[11:07] *** zakharyas joined
[11:10] *** cognominal left
[11:11] *** cognominal joined
[11:12] *** dogbert17 joined
[11:12] *** travis-ci joined
[11:12] <travis-ci> Doc build failed. Zoffix Znet 'Merge pull request #1047 from perl6/coke/levenshtein

[11:12] <travis-ci> https://travis-ci.org/perl6/doc/builds/183553537 https://github.com/perl6/doc/compare/96761b22094d...2586a29a543b

[11:12] *** travis-ci left
[11:15] *** dogbert17_ left
[11:19] *** pierre_ joined
[11:22] <phatbot> Same fromspace collectable accesing error "MoarVM panic: Collectable 0x2ae0503e2918 in fromspace accessed"

[11:43] <phatbot> .tell cygx reminder: your post is up next in ~12.5 hours 

[11:43] <yoleaux> phatbot: I'll pass your message to cygx.

[11:51] *** pierre_ left
[11:58] <lucasb> .oO( hmm, a Collectable fromOuterSpace )

[12:04] <brrt> jnthn ^ what phatbot says

[12:04] *** rurban left
[12:17] *** nicky joined
[12:18] *** sena_kun left
[12:18] <nicky> ==> Testing File::Find Unhandled exception: Failed to write to filehandle: NULL string given

[12:18] <brrt>  /me wonders, just out of interest, how hard it would be to have a 'perl6-syntax-check' daemon process and an emacs mode to use it

[12:18] <psch> brrt: something like "run perl6 -c on the current buffer after n seconds of idle" or what are you imagining?

[12:19] <psch> i suspect that depends more on how emacs works than what perl6 offers :)

[12:20] <brrt> something like that

[12:20] <brrt> well, emacs has flymake-mode, iirc

[12:20] <brrt> so that is just something to hack into

[12:20] <brrt> but the current wisdom is to use a client-server model for that, iirc

[12:21] *** TEttinger left
[12:26] *** bjz_ left
[12:26] *** bjz joined
[12:29] <CIAvash[m]> brrt: https://github.com/hinrik/flycheck-perl6

[12:31] <tbrowder>    RabidGravy: nice Advent post! It helps me get a feel for using concurrency in the real world.

[12:35] <nicky> I'm getting a make install failure on rakudo star 2016.11 http://pastebin.com/7PzmcaTS

[12:39] *** sena_kun joined
[12:46] <phatbot> sena_kun: I don't think building %method_to_role is needed anymore, since we already know method's name by that point. 

[12:47] <brrt> ooh that is cool

[12:48] <brrt> thanks CIAvash[m]

[12:48] <sena_kun> phatbot, method name - yes, but role?

[12:49] <phatbot> sena_kun, that's what the added logic needs to do, look for a role with that method and tells us the role name when found. There's no need to store names of all methods for that

[12:50] <sena_kun> phatbot, ah, so that's your point. Yes, you are correct. Another patch is coming.

[12:51] <phatbot> \o/

[13:03] <arnsholt> Good point!

[13:04] <arnsholt> That should make it easier to report all roles at once too

[13:06] *** rurban joined
[13:08] <sena_kun> I've pushed update. arnsholt, do you think we need reporting of all roles with the unimplemented method after all? It is not hard to write, just asking.

[13:08] *** canopus left
[13:08] <arnsholt> Dunno

[13:08] <phatbot> Wouldn't there be a merge conflict anyway?

[13:08] <phatbot> or whatever it's called

[13:08] <phatbot> m: role A { method foo {} }; role B { method foo {} }; class Z does A does B {}

[13:08] <camelia> rakudo-moar 6fc769: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Method 'foo' must be resolved by class Z because it exists in multiple roles (B, A)␤at <tmp>:1␤»

[13:09] <phatbot> m: role A { method foo {...} }; role B { method foo {} }; class Z does A does B {}

[13:09] <camelia> rakudo-moar 6fc769: ( no output )

[13:09] <phatbot> m: role A { method foo {...} }; role B { method foo {...} }; class Z does A does B {}

[13:09] <camelia> rakudo-moar 6fc769: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Method 'foo' must be implemented by Z because it is required by a role␤at <tmp>:1␤»

[13:09] <phatbot> m: role A { method foo {...} }; role B { method foo {...} }; class Z does A does B { method foo {} }

[13:09] <camelia> rakudo-moar 6fc769: ( no output )

[13:09] <arnsholt> Yeah, that's what I thought. The conflict only crops up if both roles have defaults

[13:09] *** wamba left
[13:10] <phatbot> sena_kun: from the above it does look like reporting all the roles could be useful.

[13:10] <arnsholt> Yeah, I'd add it I think

[13:10] <psch> m: role A { method foo {...} }; role B { method foo {} }; class Z does B does A {}

[13:10] <camelia> rakudo-moar 6fc769: ( no output )

[13:10] <arnsholt> It's relevant knowledge about how to implement the required method, IMO

[13:11] <phatbot> sena_kun: if it's not hard :) I know we've been kinda keeping you on the wheel... pushing all these changes :)

[13:12] <sena_kun> phatbot, no problem, thanks for comments anyway. But all methods commit will be a bit later, since I'm busy right now.

[13:13] *** matiaslina joined
[13:13] *** canopus joined
[13:14] *** wamba joined
[13:20] *** pierre_ joined
[13:21] *** kurahaupo joined
[13:28] <lucasb> m: say (my %h{Int}).perl

[13:28] <camelia> rakudo-moar 6fc769: OUTPUT«(my Any %{Int} = )␤»

[13:28] <dalek> doc: 3e88149 | coke++ | xt/space-after-commma.t:

[13:28] <dalek> doc: remove trailing whitespace

[13:28] <dalek> doc: review: https://github.com/perl6/doc/commit/3e88149be2

[13:28] <dalek> doc: 2af9049 | coke++ | xt/trailing-whitespace.t:

[13:28] <dalek> doc: ignore this 3rd party file

[13:28] <dalek> doc: review: https://github.com/perl6/doc/commit/2af9049c11

[13:28] <lucasb> ^^ no need for the equal sign

[13:29] <phatbot> m: say (my %h{Int}).perl.EVAL.perl

[13:29] <camelia> rakudo-moar 6fc769: OUTPUT«5===SORRY!5=== Error while compiling /home/camelia/EVAL_0␤Malformed initializer␤at /home/camelia/EVAL_0:1␤------> 3(my Any %{Int} = 7⏏5)␤    expecting any of:␤        prefix␤        term␤»

[13:29] <phatbot> Yes, .EVAL.perl is meant to roundtrip

[13:29] <lucasb> SourceBaby: help

[13:29] <SourceBaby> lucasb, Use s: trigger with args to give to sourcery sub. e.g. s: Int, 'base'. See http://modules.perl6.org/dist/CoreHackers::Sourcery

[13:29] <lucasb> s: Hash, 'perl'

[13:29] <SourceBaby> lucasb, Sauce is at https://github.com/rakudo/rakudo/blob/6fc7698/src/core/Mu.pm#L527

[13:29] <lucasb> s: {}, 'perl'

[13:29] <SourceBaby> lucasb, Ehhh... I'm too scared to run that code.

[13:29] <phatbot> s: Hash, 'perl', \()

[13:29] <SourceBaby> phatbot, Sauce is at https://github.com/rakudo/rakudo/blob/6fc7698/src/core/Mu.pm#L528

[13:30] *** ZoffixW joined
[13:30] <ZoffixW> s: (my %h{Int}), 'perl', \()

[13:30] <SourceBaby> ZoffixW, Sauce is at https://github.com/rakudo/rakudo/blob/6fc7698/src/core/Hash.pm#L704

[13:30] *** ZoffixW left
[13:30] <phatbot> It's not scared of me ;)

[13:30] *** prammer joined
[13:30] <phatbot> Err... I mean of this Zoffix guy

[13:31] <lucasb> ah, it feels the k/v pairs after the equal sign

[13:31] <lucasb> *it fills :)

[13:34] <sena_kun> I'm going to switch for $must-to-do-it-work now, so the patch will be tomorrow, I suppose. Sigh.

[13:35] <phatbot> sena_kun: I'll merge current version then. And you can submit another PR for multi-role thing when you get a chance

[13:36] *** travis-ci joined
[13:36] *** pyrimidine left
[13:36] <travis-ci> Doc build failed. Will "Coke" Coleda 'ignore this 3rd party file'

[13:36] <travis-ci> https://travis-ci.org/perl6/doc/builds/183586638 https://github.com/perl6/doc/compare/2586a29a543b...2af9049c11af

[13:36] *** travis-ci left
[13:36] <sena_kun> phatbot, got it. Thanks for help, everyone.

[13:37] *** pyrimidine joined
[13:38] *** nicq20 joined
[13:42] *** kyclark joined
[13:42] *** sufrostico joined
[13:45] *** pierre__ joined
[13:46] *** pierre_ left
[13:49] *** sufrostico left
[13:50] <lucasb> m: say Mu.is-lazy, Hash.is-lazy

[13:50] <camelia> rakudo-moar 6fc769: OUTPUT«FalseFalse␤»

[13:50] <lucasb> m: say List.is-lazy

[13:50] <camelia> rakudo-moar 6fc769: OUTPUT«Cannot look up attributes in a List type object␤  in block <unit> at <tmp> line 1␤␤»

[13:51] <lucasb> can List get a method is-lazy(List:U) { False }  ?

[13:51] <phatbot> s: List, 'is-lazy'

[13:51] <SourceBaby> phatbot, Sauce is at https://github.com/rakudo/rakudo/blob/6fc7698/src/core/List.pm#L1001

[13:51] <jnthn> Should do, yes

[13:51] <psch> m: say Any.is-lazy

[13:51] <camelia> rakudo-moar bff051: OUTPUT«False␤»

[13:51] <phatbot> I think a better approach would be for ^ that one to be a :D and let Mu handle the :U

[13:52] <lucasb> phatbot: right

[13:55] *** kurahaupo left
[13:55] *** kyclark left
[13:59] <phatbot> m: use MONKEY; my $r := ^2; nqp::getattr($r, Range, '$!is-int') = 0;

[13:59] <camelia> rakudo-moar bff051: OUTPUT«Cannot modify an immutable int␤  in block <unit> at <tmp> line 1␤␤»

[13:59] <phatbot> how can I change that attribute?

[14:00] <phatbot> m: use MONKEY; my $r := ^2; nqp::bindattr($r, Range, '$!is-int', 0);

[14:00] <camelia> rakudo-moar bff051: OUTPUT«P6opaque: representation mismatch when storing value (of type Int) to attribute (of type int)␤  in block <unit> at <tmp> line 1␤␤»

[14:01] <phatbot> m: use MONKEY; my $r := ^2; nqp::bindattr($r, Range, '$!is-int', nqp::istype(42, Bool));

[14:01] <camelia> rakudo-moar bff051: OUTPUT«P6opaque: representation mismatch when storing value (of type Int) to attribute (of type int)␤  in block <unit> at <tmp> line 1␤␤»

[14:01] <jnthn> _i

[14:01] <[Coke]> phatbot: thanks for the merge. OOC, did you test or just assume we'd get some feedback only after mergeback? ;)

[14:02] <phatbot> jnthn++ thanks

[14:02] *** Ven joined
[14:02] <phatbot> [Coke]: I didn't test, no.

[14:03] <phatbot> oh shit... perhaps I should have...

[14:03] <phatbot> I get freezes on my box :}

[14:04] <phatbot> If I type "str" it takes it like 2 seconds to react to any further actions

[14:04] <phatbot> Mmm

[14:04] <phatbot> Or maybe it's something else entireely. Seems to be fine on another box in Chrome.

[14:05] *** nicky left
[14:05] <phatbot> oh, but same lag if I search for "a". And after it displays results, moving mouse around results has a delay before it reacts to anything. Is it just me?

[14:06] <sena_kun> phatbot, confirmed on latest firefox.

[14:06] *** kyclark joined
[14:07] *** cibs left
[14:09] *** cibs joined
[14:10] *** pmurias left
[14:11] <phatbot> [Coke]: so seems like there's a performance issue? Not sure if anything can be improved with it. Perhaps trigger levenshtein only after $x characters have been typed?

[14:11] <phatbot> It's nice that it shows results for in_timezone, for example :)

[14:11] <[Coke]> alexdaniel had suggested a faster levenshtein-like algorithm as well.

[14:12] <[Coke]> I can make it skip a few chars, one sec.

[14:12] <[Coke]> ... er

[14:12] *** cdg joined
[14:13] <[Coke]> more like 10s of minutes. Have to find what the old default algorithm was, then check term.length before using getEditDistance()

[14:13] *** prammer left
[14:15] <[Coke]> I can do it after $DAYJOB if someone hasn't beaten me to it.

[14:16] <[Coke]> also, looks like someone changed the SASS processing, as external links are now being shown.

[14:20] <[Coke]> https://github.com/perl6/doc/issues/999 was the original ticket, commented about the slowdown and algorithm there.

[14:21] <phatbot> That was me. I didn't change SASS processing, I just followed the proceedure we have for changing styles. You're meant to change assets/sass/style.sass (or whatever it is) and then run the dev app to update html/css/style.css (or whatver it is) and commit both files to repo.

[14:21] <phatbot> And I guess I promised a few months ago to make the doc build do that stuff so we could nix html/css/style.css from repo

[14:22] <phatbot> and still haven't done it :}

[14:22] * phatbot adds it onto Christmas Holiday Fixes list

[14:26] *** kurahaupo joined
[14:28] *** mawkish_ joined
[14:31] *** mawkish_ left
[14:31] *** mawkish_ joined
[14:34] *** jonas1 left
[14:36] *** wamba left
[14:37] <tbrowder> ref p6 publicity: i think i've seen p6 described as a "large" core language, esp. compared to minimalist C.  what's opinion of putting  stats on perl6.org with numbers of built-in routines, classes, modules, dynamic vars, etc.? should, hopefully, be greppable, cacheable, and automatable.

[14:38] <phatbot> So that all the people who compare us to PHP would have actual numbers to point to? :)

[14:39] <tbrowder> roger! but maybe emphasize a subset for most new users.

[14:39] <phatbot> I don't see anything posivite comming out of such an endeavour and only negative. Especially since a lot of routines haven't been moved to Rakudo::Internal yet

[14:39] <jnthn> What do you count as the core of the C language?

[14:40] <jnthn> libc isn't exactly small :)

[14:40] *** prammer joined
[14:40] <jnthn> And if that doesn't count, then nor does most of CORE.setting. :)

[14:40] <tbrowder> hm, all inside rakudo seen by users?

[14:40] <phatbot> yes

[14:41] *** pierre__ left
[14:41] <phatbot> m: use Test; is-deeply SEQUENCE(1, 6), (1...6)

[14:41] <camelia> rakudo-moar 1d4600: OUTPUT«ok 1 - ␤»

[14:42] <phatbot> Like that's not a user sub

[14:42] <jnthn> Sure, but my question is more about where do you draw the line between language and standard library.

[14:43] <phatbot> m: CORE::.values.grep({$_ ~~ Sub}).elems.say

[14:43] <camelia> rakudo-moar 1d4600: OUTPUT«121␤»

[14:43] *** kyclark left
[14:43] <jnthn> It's for sure that Perl 6 has a decidedly larger grammar than C, Java, etc.

[14:43] *** cdg_ joined
[14:43] <tbrowder> of course that's a good question, but someone deeply familiar with the lang should be able to draw it

[14:43] <phatbot> And well, you can override core stuff, as opposed to many other languages where you get a conflict

[14:44] *** kyclark joined
[14:44] *** Actualeyes joined
[14:44] <tbrowder>  part of the super language aspect, for advanced users

[14:44] *** g4 left
[14:44] <phatbot> Draw what?

[14:45] <tbrowder> a line between "core" and library

[14:45] <phatbot> Seems pointless semantics game to me.

[14:45] <tbrowder> there are always folks who like such stats

[14:46] *** cdg left
[14:46] <tbrowder> when, say, comparing languages for suitability for their purposes

[14:46] <jnthn> It could be nice to show the batteries that Perl 6 includes in its standard library.

[14:47] <tbrowder> there is a lot appeal for a lang that can do a lot without hunting for  lots of libraries

[14:47] <tadzik> yep

[14:47] <tbrowder> extra libraries

[14:48] <phatbot> hah

[14:48] <phatbot> You've not seen Zefram's talk then, I guess :)

[14:48] <tbrowder> hm, is he yr brother?

[14:49] * lizmat clickbaits https://p6weekly.wordpress.com/2016/12/12/2016-50-highlighting-profilesql/

[14:49] <lizmat> Files=1155, Tests=53893, 200 wallclock secs (11.34 usr  4.53 sys + 1192.98 cusr 126.25 csys = 1335.10 CPU)

[14:49] <tbrowder> no, i don't think so

[14:49] <jnthn> fwiw, it depends what the "a lot" is, to me. Putting Set/Bag/Rat/Complex into the standard library is a non-brainer because math ain't going to suddently come out of date tomorrow. Same for stuff like async sockets/processes.

[14:50] <jnthn> With serialization formats though, it's much more touch and go. The current fashionable ones come and go.

[14:51] <jnthn> And some things are better just having different release cadences than the core language.

[14:51] <phatbot> tbrowder: yes, all people with Z in their name are related.

[14:51] *** dj_goku left
[14:52] <phatbot> I can't find the URL right now, but his entire talk was about dissing Perl 6 for having too many features, while showing bugs with their interaction and coming to the conclusion that Perl 6 is inherently flawed and must be discarded.

[14:52] <psch> i think one notable point was that assigning IterationEnd to an elemnt in an Array breaks iteration..?

[14:52] <psch> +e

[14:52] <arnsholt> That sounds a lot like the infamous "we found bugs in Bugzilla and CGI.pm, therefore Perl is inherently broken" talk that cropped up a few years back

[14:52] <phatbot> So people like him, along with folks who like to make fun of PHP for having many built ins, would just love your stats, tbrowder 

[14:53] <tbrowder> well, one way to handle those types is to ignore them

[14:53] <phatbot> arnsholt: yeah. The premise is inherently flawed. He'd have to reach for library XYZ to do feature X we do in core, giving him with as many "interactions", except now you have completely different projects with completely different styles and authors in play.

[14:54] <psch> i think it was http://act.yapc.eu/lpw2015/talk/6436

[14:54] <jnthn> phatbot: Yes, that's pretty much what I was going to write :)

[14:54] <phatbot> :)

[14:54] <phatbot> psch: aye, title looks familiar

[14:55] <[Coke]> Why do talks like that get approved, I wonder.

[14:55] *** kyclark left
[14:56] <[Coke]> at a perl conference, I mean.

[14:57] *** skids joined
[14:58] *** sena_kun left
[14:58] *** mawkish_ left
[14:59] *** mawkish_ joined
[14:59] <jnthn> [Coke]: Perhaps because having a community that won't listen to dissenting ideas isn't really healthy in general. :)

[14:59] <psch> well, the talk has been recorded

[14:59] <tbrowder>  i couldn't find the talk itseif, but i think i've seen parts.  he sounds like a large group of. nay-sayers over at perl monks

[14:59] <psch> although i personally find the audio utterly incomprehensible

[15:01] *** zakharyas left
[15:01] *** zakharyas joined
[15:02] <tbrowder> listening is fine, i leave it to smarter people to refute facts, and get on to helping advance my own interests with folks who share them--life is too short

[15:03] *** kyclark joined
[15:03] *** kyclark left
[15:03] *** pierre_ joined
[15:04] <[Coke]> jnthn: It's the question of dissent, but respect.

[15:04] <[Coke]> *sigh*. "it's NOT ..."

[15:05] <tbrowder> i didn't mean refute facts...i meant argue as in debate

[15:05] *** zakharyas left
[15:05] <[Coke]> I wonder how many of the issues he raised were raised to the community before he felt the need to whine (his word) at a conference. if it's the same zefram, he's also a p5 release manager, among other things.

[15:06] *** mawkish_ left
[15:07] *** mawkish_ joined
[15:07] <phatbot> Not sure about the timing of the talk, but Zefram did file a whole ton of tickets. Especially the ones with edge case math, like NaN handling, negative zeros, overflows.

[15:08] <phatbot> I'd even say he's my favourite ticket reporter.

[15:08] <moritz> phatbot: don't let masak hear that :-)

[15:08] <phatbot> :D

[15:10] <jnthn> I'm glad of both. :-) masak tends to report things that crop up in sometimes interesting but relatively normal programs. Zefram looks at how stuff can be broken on purpose.

[15:10] <[Coke]> (report) ah, well that's awesome. Zefram++

[15:11] <lizmat> fwiw, zefram liked MoarVM and has said that perl 6 should be implemented on top of that (from scratch)

[15:12] <lizmat> perhaps he will change his mind when we have a fully functional JS backend  :-)

[15:12] *** brillenfux left
[15:13] *** mawkish_ left
[15:13] <ilmari> I thought he said he liked nqp as well

[15:13] *** mawkish_ joined
[15:13] <ilmari> (as a language-implementation language)

[15:14] *** khw joined
[15:14] <tadzik> LPW 2017: Zefram implements Perl 5 on nqp

[15:15] *** Khisanth left
[15:15] *** wamba joined
[15:16] <tadzik> oh wow, SQL backend for profiler, that's nice

[15:16] *** mawkish_ left
[15:17] <lizmat> tadzik:  perl 5 on nqp, isn't that "use v5" ?

[15:17] <tadzik> quite :)

[15:18] <ilmari> that still requires rakudo, no?

[15:18] <lizmat> yes

[15:18] <lizmat> eh, well

[15:18] <lizmat> hmmm... technically, not I guess

[15:18] <jnthn> You could feasibly do a Perl 5 built on the NQP compiler toolchain without re-using any part of Rakudo.

[15:19] *** mawkish_ joined
[15:19] * brrt wonders whom he can challenge to do that

[15:20] *** MorayJ joined
[15:20] *** MasterDuke_ joined
[15:20] <perlpilot> the next time any of you see Zefram, politely ask him to fix Data::Alias to work with perl 5.24  :-)

[15:21] *** mohae_ joined
[15:23] <lizmat> perlpilot: I've heard rumours that that is not going to be possible  :-(

[15:23] <lizmat> otoh, I've heard those rumours before

[15:24] *** kyclark joined
[15:24] *** mohae left
[15:25] *** mawkish_ left
[15:25] *** mawkish_ joined
[15:26] <lucasb> multi role R[::T] {...}

[15:26] <lucasb> multi role R[::T, ::U] {...}

[15:26] <lucasb> ^^ would such a feature make sense?

[15:27] <jnthn> We already have it, just don't need to write the multi :)

[15:27] *** Khisanth joined
[15:29] *** thayne left
[15:30] <lucasb> oh, I wasn't aware it already works, nice :)

[15:30] <arnsholt> brrt: The I must confess that "how would I go about implementing Perl 5 on NQP" has been considered by me as an intellectual excercise, but I'm certainly not going to volunteer to actually *do* it!

[15:32] <arnsholt> (Steps one and two being implementing lex and yacc-a-likes for NQP, IMO)

[15:33] <lucasb> m: role R1 {}; role R2[Int] {}; say R1[1,2], R2[Str]

[15:33] <camelia> rakudo-moar 1d4600: OUTPUT«(R1[Int,Int])(R2[Str])␤»

[15:34] <lucasb> ^^ If you try to '.new' these roles, it expectedly dies

[15:34] *** mawkish_ left
[15:35] *** mawkish_ joined
[15:35] <lucasb> class C does R[invalid args] {} also dies

[15:35] <lucasb> but... couldn't this check happen at compile time for the invalid ones?

[15:36] <lucasb> IOW, should even be possible to refer to them by the names 'R1[1,2]', etc. no?

[15:36] <lucasb> *shouldn't

[15:36] <lizmat> arnsholt: I think the main issue is really: which perl 5 are you going to target?  with all the recent syntactic changes  :-(

[15:37] *** dj_goku joined
[15:38] <lizmat> I think it's going to be less important now that we have Inline::Perl5

[15:38] <jnthn> lucasb: If you .new a role then we don't calculate the pun until runtime

[15:38] <jnthn> lucasb: For compile-time composition it does die at compile time already

[15:38] <lizmat> and once we can get "supersede" to work and include modules with from<Perl5>, one should be able to upgrade a module to a Perl 6 version transparently without needing to change code

[15:39] <lucasb> jnthn: ok, understood, thanks

[15:40] *** kyclark left
[15:42] *** dj_goku left
[15:42] *** brrt left
[15:43] *** pyrimidine left
[15:43] *** pyrimidine joined
[15:54] *** kyclark joined
[15:55] <lucasb> found some strange errors for shaped arrays, will post 3 lines here, ok

[15:55] <lucasb> (my @a[2]).new.perl           # Type check failed in binding to @dims; expected Positional but got Any (Any)

[15:55] <lucasb> (my @a[2] = <a b>).new.Array  # This type (Scalar) does not support elems

[15:55] <lucasb> my @a[<a b c>]                # P6opaque: get_boxed_ref could not unbox for the representation '20' of type Failure

[15:56] <lucasb> also, for 'my @a[...]', idk what method it asks the value inside brackets (if .Int, .elems, or other), but for 'my @a[SomeEnum]', it returns a shaped array

[15:57] <lucasb> m: dd my @a[Bool], my @b[Order]

[15:57] <camelia> rakudo-moar 1d4600: OUTPUT«Array.new(:shape(2,), [Any, Any])␤Array.new(:shape(3,), [Any, Any, Any])␤»

[15:57] <lucasb> I just wondered if that was expected and intended

[16:00] <phatbot> no, crappy errors aren't expected :)

[16:00] <phatbot> The my @a[<a b c>]  one looks like it tries to convert a string to number, gets Failure, and tries to store isbig_I it

[16:01] *** mad__ joined
[16:01] *** mad__ left
[16:01] *** mad__ joined
[16:01] <phatbot> m: use nqp; nqp::isbig_I(nqp::decont(+'a'));

[16:01] <camelia> rakudo-moar 1d4600: OUTPUT«P6opaque: get_boxed_ref could not unbox for the representation '20' of type Failure␤  in block <unit> at <tmp> line 1␤␤»

[16:02] <phatbot> there are a couple more I have in my notes at home that give exception blah blah produce no messsage

[16:04] <phatbot> Oh, I misread.

[16:04] *** cooper_ left
[16:04] <phatbot> lucasb: yeah, that's expected. Enums can be used as a shape

[16:05] <lucasb> phatbot: because they numify to their number of elements?

[16:05] <phatbot> m: dd +Bool

[16:05] <camelia> rakudo-moar 1d4600: OUTPUT«Cannot resolve caller Numeric(Bool: ); none of these signatures match:␤    (Bool:D $: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[16:05] <phatbot> They don't. I just recall a commit fly through implementing that feature.

[16:06] <lucasb> hm, interesting, ok

[16:07] <phatbot> It's in 2016.10's changelog: https://github.com/rakudo/rakudo/blob/nom/docs/ChangeLog#L279

[16:08] <lucasb> oh, inserting the commit hash in the changelog only started in 2016.11. phatbot++

[16:09] <phatbot> And that's the commit: https://github.com/rakudo/rakudo/commit/553cedb679f0f191d2f7341e05033505cb20ac7a

[16:09] <lucasb> thanks

[16:10] *** mawkish_ left
[16:11] *** mawkish_ joined
[16:13] <lizmat> lucasb: I think that was inspired by a blogpost by gfldex, if memory serves

[16:16] <lizmat> https://gfldex.wordpress.com/2016/09/21/are-these-your-keys/

[16:17] <lucasb> ah, you linked other post in you commit https://github.com/rakudo/rakudo/commit/fef3655c0fb43209107b3e8708159280812cbceb

[16:17] <lucasb> but anyway, I wasn't aware the feature was intentional, lizmat++

[16:17] <dalek> doc: a972217 | MasterDuke17++ | doc/Type/Cool.pod6:

[16:17] <dalek> doc: Add some missing linebreaks to create code blocks

[16:17] <dalek> doc: review: https://github.com/perl6/doc/commit/a9722174d1

[16:17] <synopsebot6> Link: http://doc.perl6.org/type/Cool

[16:21] *** pierre_ left
[16:25] *** acrussell joined
[16:25] *** pierre_ joined
[16:25] <SmokeMachine> I just started my "Generative testing" draft. Could someone take a look and give me some feedback please?

[16:25] *** acrussell left
[16:26] *** travis-ci joined
[16:26] <travis-ci> Doc build failed. MasterDuke17 'Add some missing linebreaks to create code blocks'

[16:26] <travis-ci> https://travis-ci.org/perl6/doc/builds/183640038 https://github.com/perl6/doc/compare/2af9049c11af...a9722174d16d

[16:26] *** travis-ci left
[16:27] <SmokeMachine> there are 2 different modules in memory when I load it at compile time and I load it at run time?

[16:27] <SmokeMachine> when I get a instance of a singleton inside of a trait_mod code, I get a object and when I get it on a regular code I get a different object... is that expected?

[16:27] <SmokeMachine> 00:37 https://www.irccloud.com/pastebin/3zFvLdlH/

[16:27] <SmokeMachine> but when I do that in the same "file" it gets the same object:

[16:27] <SmokeMachine> 00:45 https://www.irccloud.com/pastebin/NK78LBlF/

[16:27] *** abraxxa left
[16:29] *** pierre__ joined
[16:29] *** pierre_ left
[16:30] *** wamba left
[16:32] *** mr-foobar joined
[16:32] <SmokeMachine> is that expected?

[16:34] *** pyrimidine left
[16:35] *** pyrimidine joined
[16:35] <phatbot> SmokeMachine: no idea. Try hunting down nine

[16:35] <[Coke]> fwiw, irccloud is blocked here.

[16:37] <perlpilot> same here.   gist.github.com is fine though :)

[16:38] *** dj_goku joined
[16:38] *** dj_goku left
[16:38] *** dj_goku joined
[16:39] *** mawkish_ left
[16:39] *** domidumont left
[16:39] *** mawkish_ joined
[16:39] *** pyrimidine left
[16:40] *** vike joined
[16:42] *** wamba joined
[16:42] *** cdg_ left
[16:43] *** pyrimidine joined
[16:43] *** cdg joined
[16:43] *** dj_goku left
[16:44] *** mawkish_ left
[16:45] *** mawkish_ joined
[16:48] <SmokeMachine> [Coke]: what do you mean with "irccloud is blocked here"?

[16:48] *** girafe joined
[16:50] <SmokeMachine> hum!! I got it!

[16:50] <perlpilot> SmokeMachine: I (and presumably Coke) am at $work where certain URLs are blocked by our corporate rules.

[16:50] <SmokeMachine> Ill paste it on GitHub...

[16:53] <SmokeMachine> [Coke], perlpilot: https://gist.github.com/FCO/65196d4bff0362ef669ec61bafa50ae8

[16:55] *** mawkish_ left
[16:55] *** mawkish_ joined
[17:00] <perlpilot> SmokeMachine: an object's .WHERE gives a memory location which may change over time due to GC runs.  You want .WHICH for object identity.

[17:00] <SmokeMachine> perlpilot: ok!

[17:00] <phatbot> oh damn...

[17:00] * phatbot should've actually read the code :P

[17:01] <phatbot> SmokeMachine: FWIW, if you tell the gist extensionb is .p6 it'll add highlighting

[17:01] <[Coke]> Looks like precomp is involved; run the perl 6 command twice...

[17:01] <[Coke]> (second time you only get one say.)

[17:01] *** rindolf joined
[17:02] <SmokeMachine> [Coke]: Yes, that happens...

[17:02] <SmokeMachine> [Coke]: but thats not what I want...

[17:02] <SmokeMachine> let me explain with some code...

[17:03] <[Coke]> You want a singleton, that doesn't look like one, yes. :)

[17:03] <[Coke]> Is that not it?

[17:04] <SmokeMachine> on https://github.com/FCO/Test-Fuzz/blob/master/lib/Test/Fuzz.pm#L115 and here https://github.com/FCO/Test-Fuzz/blob/master/lib/Test/Fuzz.pm#L104 I save the function on the %!fuzzers and on https://github.com/FCO/Test-Fuzz/blob/master/lib/Test/Fuzz.pm#L157 I use that... but its empty, because its another object...

[17:05] <SmokeMachine> [Coke]: I want a singleton where I .push() some data at compile time and I can get that data at run time...

[17:07] <rindolf> Hi all.

[17:08] <phatbot> Hi, rindolf 

[17:08] <rindolf> TimToady: are you there?

[17:08] <rindolf> phatbot: hi

[17:09] <phatbot> m: class Singleton { my @.stuff; BEGIN @.stuff.push: <some stuff>; method new { self }; }; my $foo = Singleton; my $bar = Singleton; $foo.stuff.push: <moar stuff>; dd $bar.stuff

[17:09] <camelia> rakudo-moar 1d4600: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable @.stuff used where no 'self' is available␤at <tmp>:1␤------> 3ss Singleton { my @.stuff; BEGIN @.stuff7⏏5.push: <some stuff>; method new { self }␤    expecting any of:␤        term␤»

[17:09] <phatbot> waat

[17:09] <phatbot> you're trickin' me

[17:09] <phatbot> oh

[17:10] <phatbot> m: class Singleton { my @.stuff; BEGIN self.stuff.push: <some stuff>; method new { self }; }; my $foo = Singleton; my $bar = Singleton; $foo.stuff.push: <moar stuff>; dd $bar.stuff

[17:10] <camelia> rakudo-moar 1d4600: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤'self' used where no object is available␤at <tmp>:1␤------> 3class Singleton { my @.stuff; BEGIN7⏏5 self.stuff.push: <some stuff>; method n␤    expecting any of:␤        term␤»

[17:10] <phatbot> screw you

[17:10] <perlpilot> phatbot: you're exhibiting the first signs of insanity  :)

[17:10] <phatbot> m: class Singleton { my @.stuff; BEGIN ::?CLASS.stuff.push: <some stuff>; method new { self }; }; my $foo = Singleton; my $bar = Singleton; $foo.stuff.push: <moar stuff>; dd $bar.stuff

[17:10] <camelia> rakudo-moar 1d4600: OUTPUT«Array @.stuff = [("some", "stuff"), ("moar", "stuff")]␤»

[17:11] <phatbot> perlpilot: that means I've been hiding it well for all these years

[17:11] <phatbot> Muahahhaahaha

[17:11] *** grondilu left
[17:12] <perlpilot> in that case ... good job so far!

[17:12] <perlpilot> ;)

[17:14] <SmokeMachine> phatbot: when I try in the same "file" it works... the problem occurs when I use a different file...

[17:15] <phatbot> SmokeMachine: so you got this singleton in a module... You `use Blagh` it two different files that are being run as a single program and you no longer have a singleton?

[17:16] <phatbot> oh you pasted links

[17:16] <SmokeMachine> phatbot: that's it!

[17:18] <SmokeMachine> phatbot: a small example:

[17:18] <phatbot> SmokeMachine: well, I've no idea if that's even supposed to work, especially with the lexical loading branch we're merging Saturday. From what I understand, you could load two different modules with the same name, for example, and it would work. So I'm thinking the two different uses are two different compilation units and that's why it doesn't work like you expect it to

[17:19] <phatbot> SmokeMachine: but I don't know this stuff, which is why my initial suggestion was to seek out nine :)

[17:19] <SmokeMachine> https://gist.github.com/FCO/1561729d83b6737363ee871d90199184

[17:20] <phatbot> Add .p6 extension to files

[17:20] <gregf_> phatbot: m: say [*] 1..10

[17:20] <SmokeMachine> phatbot: Im sorry, but what means "seek out nine"?

[17:20] <SmokeMachine> phatbot: thats not a .p6 file...

[17:20] <phatbot> SmokeMachine: a person, nine. He's the expert on all this module stuff

[17:21] <phatbot> gregf_: ?

[17:21] <Xliff> m: say '"' ~~ / <[ '"' ]> /

[17:21] <camelia> rakudo-moar 1d4600: OUTPUT«Potential difficulties:␤    Quotes are not metacharacters in character classes␤    at <tmp>:1␤    ------> 3say '"' ~~ / <7⏏5[ '"' ]> /␤    Repeated character (') unexpectedly found in character class␤    at <tmp>:1␤    ------> 3say '"' ~…»

[17:21] <Xliff> m: say '"' ~~ / <[ " ]> /

[17:21] <camelia> rakudo-moar 1d4600: OUTPUT«｢"｣␤»

[17:21] <SmokeMachine> hum! nine is a person!!! thanks!

[17:22] *** cibs left
[17:23] <phatbot> gregf_: what was that?

[17:23] <phatbot> m: say '"' ~~ / '"' /

[17:23] <camelia> rakudo-moar 1d4600: OUTPUT«｢"｣␤»

[17:24] *** cibs joined
[17:25] *** cyphase left
[17:26] *** toolforger joined
[17:26] <toolforger> g'evening everybody :-)

[17:26] <phatbot> \o

[17:26] <SmokeMachine> .tell nine Hi! could you help me? Could you tell me if it's working as expected? use a module with a singleton in 2 different files (one of then at compile time) should return different object instances? like that: https://gist.github.com/FCO/1561729d83b6737363ee871d90199184

[17:26] <yoleaux> SmokeMachine: I'll pass your message to nine.

[17:27] *** domidumont joined
[17:27] <phatbot> gregf_: m: say [+] ^9999999999999999999999999999999999999999999999999999999999999999999999999

[17:28] *** prammer left
[17:28] <phatbot> hm, weird. perl6.fail lists tickets if they've been updated after being resolved :/

[17:29] <toolforger> Anybody available for discussing JVM desirables?

[17:29] <phatbot> What are "desirables"?

[17:30] <toolforger> E.g. what package names to use for JVM binaries for a given Perl source file/module

[17:31] <phatbot> vOv

[17:31] *** cyphase joined
[17:31] <toolforger> I know how Java tools expect things to be, I'm not so sure about what's desirable for Perl

[17:31] *** rurban left
[17:31] *** nicq20 left
[17:31] <gregf_> phatbot: sorry, i thought you were a bot *runs*

[17:31] <toolforger> I would like to implement some sensible defaults for that :-)

[17:32] <phatbot> gregf_: so you see a bot and you start feeding him random crap? Pfft... That's racism!

[17:33] <phatbot> m: say [+] ^9999999999999999999999999999999999999999999999999999999999999999999999999

[17:33] <camelia> rakudo-moar 1d4600: OUTPUT«49999999999999999999999999999999999999999999999999999999999999999999999985000000000000000000000000000000000000000000000000000000000000000000000001␤»

[17:33] <phatbot> That one actually works FWIW :)

[17:33] <jnthn> .oO( bigbotry )

[17:33] *** berserk_guts joined
[17:33] <gregf_> m: ([*] 1..10).say # phatbot does that look like random crap?

[17:33] <camelia> rakudo-moar 1d4600: OUTPUT«3628800␤»

[17:34] <gregf_> and racism is too strong a word :/

[17:34] *** berserk_guts left
[17:34] <phatbot> I guess I think I'm funnier than I really am :(

[17:35] <gregf_> heh

[17:35] *** pierre__ left
[17:37] <samcv> good morning perl6

[17:37] <phatbot> \o\

[17:37] <lizmat> samcv o/

[17:39] *** pierre_ joined
[17:39] *** dj_goku joined
[17:41] <phatbot> toolforger: ask psch, bartolin, or arnsholt if you see them around.

[17:42] *** pyrimidine left
[17:42] *** pyrimidine joined
[17:43] *** pierre_ left
[17:45] <toolforger> Being a chat noob: Is there a good way to invite two people to a common chat?

[17:45] *** dj_goku left
[17:45] <toolforger> I'm using Pidgin, FWIW

[17:45] * phatbot 's no idea

[17:45] <ilmari> create a new channel, invite them

[17:45] <geekosaur> pretty much just have to create a channel for yourself (by joining it; it's dynamic) and /invite

[17:46] <toolforger> Ah, thanks, that's straightforward enough :-D

[17:46] <ilmari> you can make the channel invite-only, /mode #channel +i

[17:46] <ilmari> that way only people you /invite can join

[17:47] *** pyrimidine left
[17:47] <geekosaur> +s can also be useful (so it doesn't show in a channel list)

[17:48] <toolforger> I think it's okay if I name it #perl6-jvm or something like that

[17:49] <MasterDuke_> toolforger: are you familiar with ObjectWeb ASM at all?

[17:49] <toolforger> Sort of - I've been using libraries that use it for several years, and been looking at the docs at various times

[17:50] <toolforger> I know my way around the JVM, though I did some brush-up around class file formats and such

[17:50] *** domidumont left
[17:51] <toolforger> Plus did a diagonal read of all the ASM manual pages

[17:52] <MasterDuke_> well, if you're interested in a hard problem, i've been trying to get r-j to support the original file+line annotations that i added to r-m

[17:52] <MasterDuke_> https://irclog.perlgeek.de/perl6-dev/2016-11-21#i_13602100 has some chat about it (and the previous/next day or two)

[17:53] <toolforger> Mmm... debug info should be easy to add

[17:54] <toolforger> it might be hard to convince tools to pick up Perl sources though

[17:54] *** dakkar left
[17:54] <MasterDuke_> i've got it added, it's reading it back out that's a problem

[17:54] <toolforger> Wrong extension, and most likely wrong subdirectory, too

[17:54] * toolforger goes checking the old chat

[17:55] <toolforger> any keywords I should search the chatlogs for?

[17:55] <phatbot> RabidGravy++ good post

[17:56] <MasterDuke_> i'm adding ASM Attributes to the bytecode with file/line info

[17:56] <toolforger> OK, that would be the way to do it

[17:56] <MasterDuke_> asm, line directives, attributes

[17:56] <MasterDuke_> around the timeframe of that link maybe plus/minus a couple days

[17:57] <[Coke]> (#perl6-jvm) (#perl6-dev is probably fine for that, but if you do create another perl6- chat, be sure to mention it to moritz & mst.)

[17:57] <toolforger> Did you try triggering a Java exception? The stack trace should show you what the JVM thinks about the info

[17:58] <MasterDuke_> well, i got an arrayaccessoutofbounds exception without trying to trigger one

[17:58] <MasterDuke_> *arrayindex

[17:58] <toolforger> that should be easier to diagnose for mistakes than e.g. Eclipse simply not displaying the right file

[17:58] <MasterDuke_> but it wasn't very helpful

[17:59] <toolforger> You can simply "throw new RuntimeException()" anywhere

[17:59] <toolforger> then look how the stack trace looks like

[17:59] <MasterDuke_> i have to head out, but i'll be back on this evening

[17:59] <toolforger> If the stack trace is too short, somebody up the call stack is not rethrowing the exception

[18:00] <toolforger> I saw nqp-j has issues with dealing with exceptions that cross the Java/Perl boundary, maybe that's what you are (not) seeing

[18:00] <toolforger> cu then :-)

[18:02] <MasterDuke_> before i leave, this is the code/line that was throwing the array exception: https://github.com/MasterDuke17/nqp/blob/source_file_line_numbers_on_jvm/src/vm/jvm/runtime/org/perl6/nqp/runtime/ExceptionHandling.java#L331

[18:02] <toolforger> Oh, that's inside the JDK

[18:03] <toolforger> I'd need to see the stack trace to say anything meaningful about that

[18:04] <samcv> is UNPACK base something that should be documented in the docs?

[18:04] <samcv> it's not in roast or anywhere in the docs or in the design docs

[18:04] <toolforger> Or maybe the array access is in NQP's class loaders, though I cannot remember having seen it use arrays

[18:05] <toolforger> The kind of code in line 133 itself cannot throw an ArrayBoundsException, anyway

[18:05] *** pyrimidine joined
[18:06] <phatbot> samcv: what's UNPACK base?

[18:06] <phatbot> grep -R UNPACK src/ gives me nothing

[18:06] <samcv> err UNBASE

[18:06] <phatbot> samcv: no, it should'nt be documented. It'

[18:06] <phatbot> samcv: no, it should'nt be documented. It's an internal sub that should be moved to Rakudo::Internals. IIRC it's used by grammar to handle rad_number token

[18:07] <samcv> ah ok

[18:07] <phatbot> samcv: we have parse-base() as user-facing version

[18:07] <samcv> gotcha

[18:07] <phatbot> I think the convention is the ALLCAPS subs are all internal and we just haven't had a chance to move them all to Rakudo::Internals yet

[18:08] <samcv> ah ok

[18:10] *** pyrimidine left
[18:11] *** prammer joined
[18:12] <phatbot> m: CORE::.values.grep(Sub).grep({try .name.uc eq .name})».name.say

[18:12] <camelia> rakudo-moar 1d4600: OUTPUT«WARNINGS for <tmp>:␤Useless use of "eq" in expression ".uc eq .name" in sink context (line 1)␤(RETURN-LIST GATHER GENERATE-ROLE-FROM-VALUE ORDER METAOP_TEST_ASSIGN:<&&> METAOP_HYPER_POSTFIX DUMP VAR DEPRECATED METAOP_HYPER_CALL MD-ARRAY-SLICE-ONE-POSIT…»

[18:13] <phatbot> useless use of useless use

[18:13] *** pyrimidine joined
[18:13] <phatbot> m: say WHAT 42

[18:13] <camelia> rakudo-moar 1d4600: OUTPUT«(Int)␤»

[18:13] <phatbot> m: say HOW 42

[18:13] <camelia> rakudo-moar 1d4600: OUTPUT«Perl6::Metamodel::ClassHOW.new␤»

[18:14] <phatbot> I wonder why HOW doesn't show up in that list, but WHAT does

[18:14] <phatbot> And these aren't internal despite all caps, it's the sub versions of .WHAT .HOW etc ummm.. what do we call them? pseudo-methods?

[18:14] * [Coke] discovers "leider hosen"

[18:15] <phatbot> What's that?

[18:15] <[Coke]> macro-ish]

[18:15] <[Coke]> phatbot: apparently "Unfortunately, pants."

[18:15] <[Coke]> as opposed to lederhosen.

[18:15] <toolforger> "leather pants"

[18:15] <phatbot> And I thought a ladder made of hoses... 

[18:16] <toolforger> "leider" = "alas"

[18:16] *** ccntrq left
[18:17] <toolforger> "ladder" = "Leiter"

[18:17] *** zakharyas joined
[18:17] <[Coke]> I like "Alas, pants." better. :)

[18:18] <toolforger> Also, "Leiter" = "head" (e.g. of company)

[18:18] <toolforger> So may be "Leiterhosen" might be "pants of the leader"

[18:18] *** ccntrq joined
[18:19] *** domidumont joined
[18:20] *** ccntrq left
[18:21] *** andrzejku joined
[18:21] <phatbot> m: .say for 42.?dasdasdsa.

[18:21] <camelia> rakudo-moar 1d4600: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3.say for 42.?dasdasdsa.7⏏5<EOL>␤»

[18:21] <phatbot> m: .say for 42.?dasdasdsa

[18:21] <camelia> rakudo-moar 1d4600: OUTPUT«Nil␤»

[18:22] <phatbot> Is there a nice-lookin' trick to make it loop only over stuff provided by the method, excluding Nil

[18:22] *** ccntrq joined
[18:32] *** FROGGS joined
[18:34] *** ccntrq left
[18:35] *** ccntrq joined
[18:38] *** thalunil joined
[18:40] *** domidumont left
[18:40] *** dj_goku joined
[18:40] *** dj_goku left
[18:40] *** dj_goku joined
[18:41] *** kyclark left
[18:42] *** ccntrq left
[18:44] *** ccntrq joined
[18:46] *** dj_goku left
[18:46] *** labster joined
[18:46] *** ccntrq left
[18:47] *** ccntrq joined
[18:48] *** lucasb left
[18:50] <phatbot> m: Nil.head

[18:50] <camelia> rakudo-moar 1d4600: OUTPUT«Cannot resolve caller head(Nil: ); none of these signatures match:␤    (Any:D $: *%_)␤    (Any:D $: Cool $n, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[18:50] * phatbot wonders why that fails

[18:51] *** prammer left
[18:53] <phatbot> s: [], 'head', \()

[18:53] <SourceBaby> phatbot, Sauce is at https://github.com/rakudo/rakudo/blob/1d46004/src/core/Any-iterable-methods.pm#L1880

[18:54] <b2gills> You know whats annoying Ideone has Perl 6, but it is the 2014.07 version. I asked in the middle of June for it to be upgraded, they got back to me in July, and they still have the old version.

[18:55] <phatbot> m: Nil.tail

[18:55] <camelia> rakudo-moar 1d4600: OUTPUT«Cannot resolve caller tail(Nil: ); none of these signatures match:␤    (Any:D $: *%_)␤    (Any:D $: Cool $n, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[18:55] <phatbot> another one :/

[18:56] <lizmat> samcv: undocumented ALLCAPS subs should remain undocumented: they will need to be moved to Rakudo::Internals at some point

[18:57] <El_Che> .

[18:57] *** wamba left
[18:58] *** ccntrq left
[18:58] <samcv> has rakudo been released yet for the month?

[18:58] <samcv> i'm using Readline and the REPL keeps like. not even coming up sometimes

[18:58] <samcv> so that commit adding Readline history for REPL i think should be reverted before release

[18:58] <samcv> i forget when we release again

[18:58] <phatbot> samcv: no, it's this Saturday. How can I reproduce the issue? Just install Readline?

[18:58] <phatbot> NeuralAnomaly: status

[18:58] <samcv> oh ok

[18:58] <NeuralAnomaly> phatbot, [✘] Next release will be in 3 days and 10 hours. Since last release, there are 50 new still-open tickets (6 unreviewed and 0 blockers) and 43 unreviewed commits. See http://perl6.fail/release/stats for details

[18:58] <samcv> then i will try and fix it then :)

[18:58] <phatbot> samcv: release is 3rd Saturday of the month

[18:59] <phatbot> samcv++ ok cool :)

[19:00] *** ccntrq joined
[19:01] <phatbot> Ah, doh

[19:01] *** prammer joined
[19:01] <phatbot> the head/tail are an Any and Nil is an any too

[19:02] <[Coke]> b2gills: sending them a feedback now.

[19:02] <[Coke]> explaining tht a lot's been done and I can help if they need.

[19:07] <nine> ~~

[19:07] <yoleaux> 17:26Z <SmokeMachine> nine: Hi! could you help me? Could you tell me if it's working as expected? use a module with a singleton in 2 different files (one of then at compile time) should return different object instances? like that: https://gist.github.com/FCO/1561729d83b6737363ee871d90199184

[19:08] <nine> SmokeMachine: Precompilation can be tricky. Your singleton module is precompiled first. $instance (an empty scalar container) is stored in the precomp file. Use is precompiled next and causes $instance to be updated. But nothing changes the stored precomp file with the empty container.

[19:09] <nine> SmokeMachine: when you then load ToUse and Use, all you get is an empty container. But how could it be otherwise? E.g. what would happen if two modules both get independently precompiled and both cause a singleton to be created. If your main program loads both these modules, which singleton object would you get?

[19:12] <phatbot> m: say "$2"

[19:12] <camelia> rakudo-moar a980eb: OUTPUT«Use of Nil in string context␤  in block <unit> at <tmp> line 1␤␤»

[19:13] <phatbot> Um, looks like REPL wants fixing for warnings. That gives me "Control flow commands not allowed in toplevel"

[19:13] *** thayne joined
[19:14] *** kyclark joined
[19:16] *** MasterDuke_ left
[19:16] *** thalunil left
[19:17] *** prammer left
[19:18] <phatbot> samcv: FWIW, I'm not able to reproduce any hangs in my REPL with Readline installed.

[19:18] <phatbot> I also learned that it's a bad idea to create ~/.inputrc and fill it with random crap

[19:18] *** thalunil joined
[19:20] * phatbot clicks imaginary "Take" on the REPL warnings stuff

[19:21] *** domidumont joined
[19:21] *** thayne left
[19:23] *** thayne joined
[19:24] *** darutoko left
[19:24] *** thayne left
[19:25] *** thalunil left
[19:26] <phatbot> hehe... down a rabbit hole

[19:26] <phatbot> m: CONTROL { .gist.say }; emit; say "haha, no one is deadied";

[19:26] <camelia> rakudo-moar a980eb: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Calling emit() will never work with declared signature (\value --> Nil)␤at <tmp>:1␤------> 3CONTROL { .gist.say }; 7⏏5emit; say "haha, no one is deadied";␤»

[19:27] <phatbot> I mean

[19:27] <phatbot> m: CONTROL { .gist.say }; emit 42; say "haha, no one is deadied";

[19:27] <camelia> rakudo-moar a980eb: OUTPUT«Died with CX::Emit␤  in block <unit> at <tmp> line 1␤␤emit without supply or react␤  in block <unit> at <tmp> line 1␤␤»

[19:28] *** effbiai left
[19:29] *** effbiai joined
[19:30] *** prammer joined
[19:32] *** asd_ joined
[19:32] <asd_> hm...

[19:32] *** asd_ left
[19:33] <phatbot> heh

[19:37] <RabidGravy> so I guess I'd better start the next advent post now

[19:37] <phatbot> You're making two?

[19:38] <phatbot> huggable: advent

[19:38] <huggable> phatbot, https://github.com/perl6/mu/blob/master/misc/perl6advent-2016/schedule

[19:38] <RabidGravy> yeah, got a slot for sunday

[19:38] <phatbot> RabidGravy++

[19:39] <phatbot> interesting... now I rebuilt Rakudo and getting the hangs samcv mentioned :/

[19:39] <samcv> :/

[19:40] <samcv>         method history-file() returns Str { ... } what

[19:40] <samcv> oh no

[19:40] <phatbot> ?

[19:40] <phatbot> .seen cygx

[19:40] <yoleaux> I saw cygx 9 Dec 2016 14:23Z in #perl6: <cygx> first draft: https://perl6advent.wordpress.com/?p=5746&preview=true

[19:41] <samcv> that's in the REPL since the PR for adding the history file for readline...

[19:41] <samcv> that shouldn't do anything right unless there's some ... magic i don't know about in perl 6

[19:41] *** dj_goku joined
[19:41] *** dj_goku left
[19:41] *** dj_goku joined
[19:41] <samcv> oh linenoise has it set the same way hm

[19:41] <phatbot> it's a stub

[19:42] <phatbot> m: class { method meow { … } }.meow

[19:42] <camelia> rakudo-moar a980eb: OUTPUT«Stub code executed␤  in method meow at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[19:42] <samcv> yeah i know that

[19:42] <phatbot> Oh ok

[19:42] <phatbot> How do you know so much Perl 6?

[19:42] <samcv> me?

[19:42] <phatbot> Yeah

[19:42] <samcv> idk

[19:43] <samcv> learning it

[19:43] <RabidGravy> how does anyone know so much Perl 6? ;-)

[19:44] <phatbot> No, I mean I don't recall seein samcv here for more than a month, but in some things she knows more than me

[19:44] <samcv> uhm ok it looks like history-file is a method that is defined in a different spot

[19:44] <phatbot> I guess that's more a statement about me than anyone else heh

[19:44] *** pyrimidine left
[19:44] <samcv> i learn quickly ;)

[19:44] <samcv> i only started programming perl 5 5 months ago

[19:45] *** pyrimidine joined
[19:45] <samcv> my friends i've talked to are super suprised that even tho they've been perling for years i now surpass them haha

[19:45] <samcv> maybe i'm finding what i'm good at.. never been employed as a programmer. but i really enjoy it

[19:46] <phatbot> :)

[19:46] <RabidGravy> don't fancy a job? I'm going to be the only developer in a team that should have five in the new year

[19:46] *** dj_goku left
[19:46] <samcv> don't fancy? well i am looking for work atm

[19:47] <samcv> maybe i could do something in devops cause my last job was Jr Linux admin

[19:47] * samcv really needs to get a job

[19:47] <RabidGravy> where are you based?

[19:48] <samcv> in the bay area, in california

[19:48] <samcv> maybe i can point to contributing to perl 6 and say. pls give me job! i am good! i swear

[19:48] *** dwarring joined
[19:49] <nine> samcv: there are definitely worse ways to advertise than having public open source contributions

[19:49] *** pyrimidine left
[19:49] <samcv> like? lol

[19:49] <RabidGravy> bit of a commute to London then :)

[19:50] <samcv> RabidGravy, i will drive really fast

[19:50] <nine> samcv: like....anything else *g*

[19:50] <samcv> that's what i was thinking...

[19:51] <samcv> ugh so annoying. the perl language package in atom in built in, but it will go first before the perl 6 one... since it has perl 6 file detection too

[19:51] <nine> If I've ever got to apply for a job again, I'll just point at the list of my conference talks and see who bites ;)

[19:51] <samcv> so if i disable it, it detects the rakudo files... but if i do that i can't look at the perl files

[19:51] <samcv> ha

[19:52] <samcv> really liking it now that i got perl 6 code execution only a keyboard shortcut away :)

[19:53] <phatbot> Yeah, I recall Madcapjake telling me I had to disable the built-in perl highlighter if I wanted perl6fe to work

[19:53] <samcv> just really like automating things at least. i've been doing that a lot

[19:53] <samcv> you don't have to disable it, but

[19:54] <samcv> if it's not named .p6 or .pl6 or .nqp or whatever

[19:54] <samcv> the perl plugin will try and do its bad perl 6 highlighting

[19:54] <Xliff> Is there any way I can block the default constructor of a class?

[19:54] <phatbot> Ah

[19:54] <Xliff> m: class A { has $.n; multi method new($a) { $!n = 1; }; multi method new($a, $b) { $!n = 2 }; }; my $a = A.new(:n(3));

[19:54] <camelia> rakudo-moar a980eb: ( no output )

[19:54] <RabidGravy> which reminds me I need to update the vim perl 6 syntax file at some point

[19:54] <phatbot> Xliff: proto method new (|) {*}

[19:54] *** djbkd_ joined
[19:54] <samcv> i added some detection to detect if it starts with the perl 6 shebang or 'my class' and detect as perl 6 instead of perl 5, but

[19:55] <samcv> the perl plugin does that too

[19:55] <Xliff> phatbot++ # Thanks!

[19:55] <samcv> and goes first

[19:55] <samcv> dunno if i can get them to disable that, or something..

[19:55] <samcv> RabidGravy, it should just come with it

[19:55] <samcv> unless they updated it since then

[19:56] *** loveperl joined
[19:57] *** wamba joined
[19:58] <RabidGravy> samcv it does, it just doesn't match the current state of the language

[19:58] <samcv> yeah

[19:58] <samcv> you should try the atom one ;)

[19:59] <samcv> and if there's _any_ syntax highlighting errors please open an issue and i'll fix it quickly

[19:59] <samcv> unhighlighted methods, routines, etc even tiny things

[19:59] *** andrzejku left
[20:00] <Xliff> Hmm... phatbot, that works, but the more tricky among us might know that perl6 will allow constructor of the form A.new(1, :n(4)) -- don't want anyone to have the ability to set $.n via new.

[20:00] <samcv> also the Readline plugin still has a problem it doesn't work with readline 7

[20:00] <samcv> it hardcodes version 6 in

[20:00] <Xliff> samcv: I am using atom perl6-fe and loving it.

[20:00] <samcv> nice!

[20:00] <samcv> \o/

[20:00] <Xliff> I also managed to convert the snippets to something usable for Sublime.... although I have not texted that. ;)

[20:01] <Xliff> s/texted/tested/

[20:01] <phatbot> Xliff: it won't get set

[20:01] <loveperl> How did you call a class that is in another file?

[20:01] <Xliff> Also: https://github.com/MadcapJake/language-perl6fe/issues/53

[20:01] <phatbot> Xliff: and well, reading your multi method new()... it's wrong. It needs to self.bless

[20:02] <Xliff> phatbot: LOL! Yeah. Fixed that already in a camelia window.

[20:02] <Xliff> m: class A { has $.n; proto method new (|) {*}; multi method new($a) { self.bless(:n(1)); }; multi method new($a, $b) { self.bless(:n(2)) }; }; my $a = A.new(1, :n(4));

[20:02] <camelia> rakudo-moar a980eb: ( no output )

[20:02] <phatbot> Xliff: right, so that's what will only be set. The extra args would be ignored. Any methods can take any number of named args

[20:02] <Xliff> So how can I block the constructors from allowing $.n to be set like that?

[20:03] <Xliff> Ooh!

[20:03] <phatbot> m: say 'lulz'.uc: :42a :72meows

[20:03] <samcv> phatbot, just made a PR to fix readline

[20:03] <camelia> rakudo-moar a980eb: OUTPUT«LULZ␤»

[20:03] <samcv> err the REPL

[20:03] <Xliff> m: class A { has $.n; proto method new (|) {*}; multi method new($a) { self.bless(:n(1)); }; multi method new($a, $b) { self.bless(:n(2)) }; }; my $a = A.new(1, :n(4)); say $a.n;

[20:03] <camelia> rakudo-moar a980eb: OUTPUT«1␤»

[20:03] <Xliff> Right.

[20:03] *** cygx joined
[20:03] <samcv> Xliff, see the current readme for Perl6FE for how to get perl 6 scripts running from atom

[20:03] * cygx has scheduled his advent post

[20:03] <yoleaux> 11:43Z <phatbot> cygx: reminder: your post is up next in ~12.5 hours

[20:03] <Xliff> REPL... REPR... what's the difference?

[20:03] <phatbot> Xliff: but if you want it to actually whine about the extra args, just add %_ and die "no args!"

[20:03] <phatbot> cygx: \o/

[20:04] <cygx> I'm not entirely happy with it, but it is what it is...

[20:04] <phatbot> That's what my mom said about me!

[20:04] <samcv> Xliff, https://github.com/perl6/atom-language-perl6#integration

[20:05] <Xliff> samcv++ # \o/

[20:05] <samcv> :)

[20:05] <Xliff> If only Atom was working under my Linux VM.

[20:05] <samcv> you don't even have to save the file too

[20:05] <samcv> :(

[20:05] <samcv> what is the host?

[20:05] <Xliff> Currently I am using it with Windows via SMB export to my host.

[20:05] <Xliff> Windows

[20:05] <samcv> atom is for windows too

[20:05] <Xliff> I know. That's the only way I can use atom right now.

[20:05] <samcv> ohhh

[20:05] <samcv> oh i see the problem i guess

[20:05] <samcv> perl 6 not working under windows properly?

[20:05] <Xliff> I can't get it to run under Linux for some reason. The GUI will not start.

[20:06] <Xliff> No. My perl6 install is on the linux vm.

[20:06] <samcv> kk

[20:06] <Xliff> So I export home dir to Windows so I can use Windows Atom for editing.

[20:06] <samcv> ah

[20:06] <cygx> our wordpress theme looks sub-optimal, though: it's too narrow, so code blocks end up with horizontal scroll bars :(

[20:06] <Xliff> Sublime is working under Linux VM, so I will try getting the TextMate rules over there to see if they work better than ModernPerl.

[20:06] *** AlexDaniel joined
[20:07] <samcv> Xliff, maybe hack something together?

[20:07] <Xliff> samcv: And I do have to say, Atom+language-perl6fe > Sublime+ModernPerl

[20:07] <samcv> idk can you make a perl6 names executable which gets the vm to run it

[20:07] <Xliff> samcv: Actually, I already have the .sublime_package. I just have been too lazy to try it!

[20:07] <samcv> and returns the result ha

[20:07] <samcv> what .sublime_package?

[20:07] <Xliff> language-perl6fe

[20:08] <samcv> how did you create it

[20:08] <Xliff> I converted it. 

[20:08] <samcv> how? pls tell

[20:08] <Xliff> cson => json => plist => zip

[20:08] <samcv> you're using the updated plugin too right? cause the dl package moved

[20:08] <Xliff> There are scripts.

[20:08] <samcv> hmmmmm

[20:08] <samcv> links

[20:08] <Xliff> But I haven't tested it under Sublime, yet.

[20:08] <Xliff> Yeh. I am using the repo.

[20:08] <samcv> kk

[20:10] <tbrowder> Anyone using Komodo for p6?

[20:11] <Xliff> samcv: Actually, it is more convoluted.

[20:12] <Xliff> cson => json => yaml => plist => zip

[20:12] <samcv> well send it to me

[20:12] <samcv> i will test it

[20:12] <samcv> nice

[20:12] <samcv> haha

[20:12] <Xliff> Uh. OK. I will create issue.

[20:12] <Xliff> And attach package.

[20:12] <Xliff> Or can I email you?

[20:12] <samcv> you can email me

[20:12] <Xliff> kk

[20:12] <samcv> pm'd you

[20:13] <phatbot> Xliff: if you make sublime highlight perl6 decently, I'll promise not to assimilate you :)

[20:13] <phatbot> sublime > atom

[20:17] <samcv> kk

[20:17] <samcv> yeah i need perl 6 highlighting to be happy tbh

[20:18] <AlexDaniel> phatbot: source

[20:18] <yoleaux> 05:06Z <MasterDuke> AlexDaniel: it looks like you implemented something already, but i'd say just return the name for them or something like that, i don't see anybody ever wanting them for real

[20:19] <samcv> https://github.com/drforr/perl6-readline/pull/15 hmm if this can be pulled would we want to include Readline in Star?

[20:19] <samcv> because linenoise doesn't support utf-8

[20:19] <phatbot> AlexDaniel: https://github.com/zoffixznet/perl6-phatbot

[20:19] <samcv> oh AlexDaniel 

[20:19] <samcv> you need to add something to unicodable6 

[20:19] <AlexDaniel> MasterDuke: the problem is, if you do ｢say ‘hello’ ~ 0.chr ~ ‘world’｣ or something like that, what should committable/evalable gist?

[20:20] <Xliff> phatbot: LOL! You'll try to do that anyways. I wonder what else I can get out of you. :D

[20:20] <RabidGravy> Hmm, now do I either split some of the utility functions of Test::META into a separate module or make Test::META a dependency the thing I want to use them in 

[20:20] <AlexDaniel> phatbot: bug tracker

[20:20] <AlexDaniel> the link is broken

[20:20] <AlexDaniel> I wanted to submit a PR that will change the nickname…

[20:20] <AlexDaniel> samcv: alright, what?

[20:20] <phatbot> AlexDaniel: https://github.com/zoffixznet/perl6-phatbot/issues

[20:21] <AlexDaniel> samcv: dumping of all unicode properties

[20:21] <AlexDaniel> ?

[20:21] <samcv> no

[20:21] <samcv> well sorta

[20:22] <samcv> m: for 0..0x1FFFF -> $i { if $i.unimatch('LF') { say $i.uniname } }

[20:22] <camelia> rakudo-moar a980eb: OUTPUT«LINE FEED (LF)␤»

[20:23] <samcv> the LF is a unicode property called the 'Line_Break' property

[20:23] *** Tonik joined
[20:23] <samcv> unimatch will check if the codepoint has the specified property

[20:23] <AlexDaniel> u: LF

[20:23] <unicodable6> AlexDaniel, U+000A LINE FEED (LF) [Cc] (control character)

[20:23] <unicodable6> AlexDaniel, U+00BD VULGAR FRACTION ONE HALF [No] (½)

[20:23] <unicodable6> AlexDaniel, U+02BE MODIFIER LETTER RIGHT HALF RING [Lm] (ʾ)

[20:23] <unicodable6> AlexDaniel, https://gist.github.com/dc202f8aaf0aa2ec27e4242457309795

[20:23] <samcv> LF is a bad example tbh

[20:23] <AlexDaniel> u: LF Cc

[20:23] <unicodable6> AlexDaniel, U+000A LINE FEED (LF) [Cc] (control character)

[20:24] <phatbot> AlexDaniel: what's the new nickname?

[20:24] <AlexDaniel> samcv: alright. OK. What could be the syntax?

[20:24] <AlexDaniel> phatbot: Zoffix

[20:24] <samcv> m: for 0..0x1FFFF -> $i { if $i.unimatch('Latin') { say $i.uniname } }

[20:24] <camelia> rakudo-moar a980eb: OUTPUT«LATIN CAPITAL LETTER A␤LATIN CAPITAL LETTER B␤LATIN CAPITAL LETTER C␤LATIN CAPITAL LETTER D␤LATIN CAPITAL LETTER E␤LATIN CAPITAL LETTER F␤LATIN CAPITAL LETTER G␤LATIN CAPITAL LETTER H␤LATIN CAPITAL LETTER I␤LATIN CAPITAL LETTER J␤LATIN …»

[20:24] <samcv> uh just search it when searching other things

[20:24] <phatbot> AlexDaniel: I can't use that one. I have to stay undercover

[20:24] <AlexDaniel> u: { .unimatch(‘Latin’) }

[20:24] <samcv> or maybe not uh

[20:24] <unicodable6> AlexDaniel, U+0041 LATIN CAPITAL LETTER A [Lu] (A)

[20:24] <unicodable6> AlexDaniel, U+0042 LATIN CAPITAL LETTER B [Lu] (B)

[20:24] <unicodable6> AlexDaniel, U+0043 LATIN CAPITAL LETTER C [Lu] (C)

[20:24] <unicodable6> AlexDaniel, https://gist.github.com/27443d7c8b9213125e42a90950abb8e7

[20:25] <phatbot> u: { .unimatch("{use NativeCall; sub system (Str) is native {}; system 'ls'}") }

[20:25] <RabidGravy> tadzik++ # mergey goodness

[20:25] <samcv> but it will find all properties no matter what they are as long as moarvm has it i guess

[20:25] <AlexDaniel> phatbot: :|

[20:26] *** unicodable6 left
[20:26] <phatbot> >:}

[20:26] <AlexDaniel> it should say something like ‘meh, fuck off’

[20:26] <samcv> AlexDaniel, you could just search it when searching others

[20:26] <samcv> it won't slow it down really

[20:26] <samcv> tho you could do a special case too

[20:26] <samcv> m: for 0..0x1FFFF -> $i { if $i.unimatch('9.0') { say $i.uniname } }

[20:26] <camelia> rakudo-moar a980eb: OUTPUT«<reserved>␤<reserved>␤<reserved>␤<reserved>␤<reserved>␤<reserved>␤<reserved>␤<reserved>␤<reserved>␤<reserved>␤<reserved>␤<reserved>␤<reserved>␤<reserved>␤<reserved>␤<reserved>␤<reserved>␤<reserved>␤<reserved>␤<reserved…»

[20:27] <AlexDaniel> samcv: sure, but it's already possible now, and unless you can propose some syntax I'm not sure I will be able to add it :)

[20:27] *** domidumont left
[20:27] <AlexDaniel> phatbot: aren't you supposed to bring them back on when you crash them?

[20:27] <phatbot> OK will do

[20:27] *** unicodable6 joined
[20:27] <AlexDaniel> no need

[20:28] <samcv> u: match 'thing'

[20:28] <unicodable6> samcv, U+006D LATIN SMALL LETTER M [Ll] (m)

[20:28] <unicodable6> samcv, U+0061 LATIN SMALL LETTER A [Ll] (a)

[20:28] <unicodable6> samcv, U+0074 LATIN SMALL LETTER T [Ll] (t)

[20:28] <unicodable6> samcv, https://gist.github.com/a6a297d998af3ae1141bb9d7d96ece98

[20:28] <samcv> maybe like that?

[20:28] <samcv> idk something with the match word in it would be easiest to remember

[20:29] <AlexDaniel> phatbot: I'm still waiting for a day I get at least some small bit of time to work on containerizing them… until that happens, can you please not advertise the holes in our RESTRICTED setting pseudofeature? :)

[20:30] <AlexDaniel> phatbot: or… perhaps consider disabling nativecall if it is on

[20:30] <phatbot> You mean the NativeCall one or the nqp one? :D

[20:30] <AlexDaniel> … both

[20:30] <phatbot> ehehe

[20:30] *** FROGGS left
[20:34] <loveperl> Could not find form at line 1 in:

[20:35] <loveperl> use form

[20:35] <mst> AlexDaniel: perhaps talk to simcop2387 about how he's locked down perlbot's eval system

[20:35] <loveperl> ?

[20:35] <mst> AlexDaniel: I mean, 'stick it in a container' won't help

[20:35] <mst> loveperl: you tried to load a module that doesn't exist

[20:35] <AlexDaniel> mst: wait… why not?

[20:35] <simcop2387> rlimits, chroot, seccomp.  I can give a better overview if you'd like

[20:35] <phatbot> :o

[20:35] <mst> AlexDaniel: you want security. containers are not designed for security.

[20:35] <phatbot> simcop2387!

[20:36] <simcop2387> the one and only

[20:36] <phatbot> \o/

[20:36] <mst> AlexDaniel: every time somebody goes "I'll use docker for security", apeiron eats a kitten

[20:36] <AlexDaniel> mst: sooo, are you saying that LXC is insecure or something?

[20:36] *** toolforger left
[20:36] <simcop2387> AlexDaniel: LXC and docker won't protect you from kernel exploits.

[20:37] <loveperl> Do I want to call a class that is in a file that is called form.p6?

[20:37] <mst> AlexDaniel: ... no, I'm saying it's not designed for the sorts of things you'd want to do to secure an eval server

[20:37] <loveperl>  Do I want to call a class that is in a file that is called form.p6?

[20:37] <loveperl> form.pm6

[20:37] <simcop2387> seccomp can got a LONG LONG way to making it mostly impossible to do most exploits

[20:37] <mst> loveperl: http://trout.me.uk/vaguecat.jpg

[20:37] *** matiaslina left
[20:38] <loveperl> lol 

[20:38] <mst> AlexDaniel: I'm not sure if you're intentionally being a dick or just completely clueless here, but responding to "this is not designed for securing what you're securing" does not mean it's "Insecure or something", it just means you don't know what you're doing yet. maybe ask the sysadmin of the machine they run on for help?

[20:38] <AlexDaniel> simcop2387: alright. alright… good that you're here

[20:39] *** ccntrq left
[20:39] <mst> loveperl: show us all the code you currently have and explain what you're trying to do?

[20:39] <AlexDaniel> mst: well, that's kinda my machine…

[20:39] <simcop2387> AlexDaniel: here's the code i do in perlbot's eval to secure things with seccomp, https://github.com/simcop2387/perlbuut/blob/master/lib/eval.pl#L31..L106 , the idea is that it doesn't let the user supplied code open anything for writing, open any sockets etc.  they're only allowed to do a few things.

[20:40] <mst> AlexDaniel: then I recommend listening to simcop2387 and not being deliberately obtuse to him like you were to me, since he's a nicer person than I am :P

[20:40] <AlexDaniel> mst: stop accusing me of shit, I'm listening already

[20:40] <simcop2387> i won't abuse anyone (unless they ask for it nicely) but i will start ignoring people.

[20:42] *** ccntrq joined
[20:42] <loveperl> call.pl : code=( use form; say form) form.pm6 is: code=( class form extends common{})

[20:42] <AlexDaniel> simcop2387: I'd have to read about seccomp to get the idea about this stuff. So I hope you don't mind if I ping you a bit later

[20:42] <phatbot> loveperl: the current directory is not included by default. you need use lib <.>; or supply -I. on command line

[20:42] <simcop2387> AlexDaniel: oh no problem at all.

[20:43] *** dj_goku joined
[20:44] <simcop2387> AlexDaniel: This one might or might not affect you, but i gave the perl interpreter CAP_SYS_CHROOT with `setcap cap_sys_chroot+ep $PERL`, that one let me do everything running from nobody:nogroup without ever touching the root user.  probably not THAT big of a deal but it helps against the possibility of some module i'm using having code sitting around specifically for me to hit.

[20:44] <loveperl> I do not understand?

[20:45] <simcop2387> AlexDaniel: also, if you're not familiar with strace, it's a big help in understanding what you can do with seccomp.  basically you can filter system calls that show up in strace based on the arguments to them.

[20:47] <phatbot> loveperl: perl6 -I. call.pl

[20:48] <phatbot> loveperl: you need to tell it where to find form.pm6 and common.pm6 

[20:49] <loveperl> How do I say that?

[20:49] *** thalunil joined
[20:50] <phatbot> loveperl: Poner lib <.> En su archivo para decir perl6 para buscar los módulos en el directorio actual

[20:50] * phatbot relocates

[20:52] <AlexDaniel> mst: thanks

[20:54] *** dj_goku left
[20:56] <loveperl> asi 

[20:56] <loveperl> lib <.>;   2 use form;   3 say form;

[20:57] *** bartolin left
[20:59] <AlexDaniel> mst: by the way, any news about the button?

[20:59] <loveperl> =begin ⏏comment?

[21:00] <loveperl> I get error

[21:01] <loveperl> How to comment en bloc?

[21:01] <loveperl>  =begin comment;     brief utilities for the creation of HTML forms.     with special datatypes not found in HTML like date, etc     todo fieldset+legend, label for field     todo BLOCKs (field.block?)     todo block show/hide  =end comment;

[21:01] <mst> loveperl: please use http://fpaste.scsys.co.uk/perl6 to show complete code

[21:01] *** nowan_ joined
[21:01] <mst> AlexDaniel: I'm probably going to have to email somebody, will try and remember to do that this week

[21:01] *** bartolin joined
[21:02] <AlexDaniel> mst: that would be nice

[21:02] <mst> AlexDaniel: at this point I suspect "attempt to invoke a higher power" is going to be the right answer

[21:02] <shadowpaste> "loveperl" at 217.168.150.38 pasted "como comentar en perl" (7 lines) at http://fpaste.scsys.co.uk/540217

[21:02] <mst> key question: are you ok if it's "registered users only" and are you ok if we have to ask on a per-user basis?

[21:02] <mst> (trying to pre-anticipate compromises that might be easier to win)

[21:03] <loveperl> how to comment eb bloc?

[21:03] <loveperl> How to comment in block?

[21:03] <loveperl> http://fpaste.scsys.co.uk/540217?tx=on&wr=on&ln=on&submit=Format+it%21

[21:04] <mst> loveperl: what happens if you remove the ';' and just have '=begin comment' ?

[21:04] <mst> loveperl: ... wait, there's one space in front of the = in your code. no spaces!

[21:04] *** nowan left
[21:05] <phatbot> mst, IIRC it was already registerer users only so that's fine. The other option isn't ideal but better than nothing

[21:05] <loveperl> tank you 

[21:05] <AlexDaniel> mst: “registered users only” is how it has always been

[21:05] <mst> AlexDaniel: right, so maybe it needs some sort of additional whitelist

[21:06] *** xinming_ joined
[21:06] <AlexDaniel> mst: not sure if that would be easy, but perhaps checking if a user has at least one open or resolved ticket is good enough

[21:07] <loveperl> class form extends common{

[21:07] <AlexDaniel> or a script that builds a whitelist based on this, that could work too 

[21:07] <mst> loveperl: please always use the paste site to show code.

[21:07] <mst> loveperl: random lines in channel do not help

[21:08] <loveperl> ok

[21:08] <SmokeMachine> nine: so, I cannot have a trait that saves data on a singleton because I'll never get that singleton again?

[21:09] *** xinming left
[21:09] <jnthn> loveperl: If you are trying to do inheritance, you may find https://docs.perl6.org/language/classtut#Inheritance helpful

[21:09] *** thalunil is now known as thayne

[21:10] <bartolin> AlexDaniel: you pinged me to rebase rakudo pr 565. I can do that, but I wonder what git commands are best to do that. should I merge current nom into my old branch (resolving the conflict while doing that) and push the updated branch to my repo?

[21:10] <RabidGravy> SmokeMachine, sure you can

[21:11] <SmokeMachine> RabidGravy: not inter files...

[21:11] <RabidGravy> eh?

[21:13] <SmokeMachine> nine: when the second file uses the module it's gotten by precompiled file? Not from the preloaded module in memory with the $instance?

[21:13] <bartolin> AlexDaniel: or is it acceptable to just force push something without a conflict?

[21:14] <SmokeMachine> RabidGravy: this: 17:07 <yoleaux> 17:26Z <SmokeMachine> nine: Hi! could you help me? Could you tell me if it's working as expected? use a module with a singleton in 2 different files (one of then at compile time) should return different object instances? like that: https://gist.github.com/FCO/1561729d83b6737363ee871d90199184

[21:14] <AlexDaniel> bartolin: you can force push into your own branch, yes

[21:14] <phatbot> bartolin, you can forcepush into your own branch the PR is from

[21:14] <AlexDaniel> in your own fork rather

[21:15] <loveperl> constructor?

[21:15] <bartolin> thanks! I'll look into it (but not today)

[21:16] <loveperl> Constructor of a class

[21:18] <nine> SmokeMachine: maybe you want to initialize your singleton in an INIT block?

[21:20] *** RabidGravy left
[21:20] <SmokeMachine> nine: in my real case of use I do that on a trait... or do you mean initialize the $instance on a INIT block?

[21:21] *** setty1 left
[21:22] <SmokeMachine> nine: this is the case: https://github.com/FCO/Test-Fuzz/blob/master/lib/Test/Fuzz.pm

[21:22] <shadowpaste> "loveperl" at 217.168.150.38 pasted "constructor" (26 lines) at http://fpaste.scsys.co.uk/540218

[21:23] *** loveperl_ joined
[21:23] <loveperl_> How do I build a builder?

[21:23] <loveperl_> http://fpaste.scsys.co.uk/540218?tx=on&wr=on&ln=on&submit=Format+it%21

[21:24] <SmokeMachine> nine: I'm sorry the leg.. I'm on my doughter's ballet presentation

[21:24] *** RabidGravy joined
[21:25] *** loveperl left
[21:26] *** zakharyas left
[21:26] *** Tonik left
[21:27] *** imcsk8_ is now known as imcsk8

[21:30] *** thayne left
[21:35] <dwarring> m: role R {}; my $a = 42 but R; say 42.WHICH

[21:35] <camelia> rakudo-moar 7b84ad: OUTPUT«Int|42␤»

[21:35] <dwarring> m: role R {}; my $a = 42 does R; say 42.WHICH

[21:35] <camelia> rakudo-moar 7b84ad: OUTPUT«Int+{R}|42␤»

[21:36] <dwarring> ^^ shot myself in the foot the other day

[21:37] <dwarring> used 'does' on simple scalars

[21:37] <dwarring> has a very global affect

[21:39] <cygx> there's an integer cache, so stuff like that can indeed happen

[21:39] <dwarring> yeah, a but of a trap

[21:41] *** lukiramu joined
[21:42] <cygx> I believe early Fortran version even had the ability to inadvertently redefine numbers dues to by-reference argument semantics

[21:42] *** bjz left
[21:43] <dwarring> heh, like redefining 0 in fortran

[21:44] <masak> in Perl 6, all we can do is redefine 2 + 2

[21:44] <masak> but in a very safe, lexically scoped way :)

[21:44] *** lukaramu left
[21:44] <masak> m: sub infix:<+>(2, 2) { 5 }; say 2 + 2

[21:44] <camelia> rakudo-moar 7b84ad: OUTPUT«5␤»

[21:44] <masak> oh, I guess that should be spelled `multi` for clarity.

[21:44] <geekosaur> sounds like stupid haskell let tricks :p

[21:45] <masak> m: multi infix:<+>(2, 2) { 5 }; say 2 + 2

[21:45] <camelia> rakudo-moar 7b84ad: OUTPUT«5␤»

[21:45] *** rindolf left
[21:46] <cygx> m: 2 does role { method gist { "42" } }; say 2

[21:46] <camelia> rakudo-moar 7b84ad: OUTPUT«42␤»

[21:46] *** pyrimidine joined
[21:47] *** kurahaupo_ joined
[21:48] *** kurahaupo left
[21:48] *** kurahaupo_ is now known as kurahaupo

[21:49] *** rindolf joined
[21:49] *** dj_goku joined
[21:55] *** cdg_ joined
[21:55] *** dj_goku left
[21:57] *** cdg left
[21:58] *** Ven left
[21:59] *** Ven joined
[21:59] *** rurban joined
[22:00] *** cdg joined
[22:02] *** skids left
[22:02] *** bjz joined
[22:04] *** cdg_ left
[22:04] *** prammer left
[22:05] *** cdg left
[22:11] *** kyclark left
[22:12] *** RabidGravy left
[22:15] *** kyclark joined
[22:16] *** kyclark left
[22:16] *** bjz left
[22:25] <loveperl_> exit in perl

[22:25] <loveperl_> ?

[22:27] *** mawkish_ left
[22:33] *** kurahaupo left
[22:34] *** MorayJ left
[22:37] *** kyclark joined
[22:46] *** pyrimidine left
[22:46] *** pyrimidi_ joined
[22:50] *** dj_goku joined
[22:50] *** dj_goku left
[22:50] *** dj_goku joined
[22:54] <masak> these random comments three years later are sometimes amusing, but rarely very deep: https://perl6advent.wordpress.com/2013/12/22/day-22-a-catalogue-of-operator-types/#comment-16238

[22:55] *** AlexDaniel left
[22:56] *** dj_goku left
[22:56] *** rburkholder joined
[22:56] *** kyclark left
[22:58] <loveperl_> my $s = any; here null?

[22:59] <masak> m: my $s; say $s

[22:59] <camelia> rakudo-moar 7b84ad: OUTPUT«(Any)␤»

[23:01] <cygx> masak: that comment is hilarious

[23:01] <cygx> "the factorial function is worth putting in your product"

[23:09] *** bpmedley joined
[23:11] *** cdg joined
[23:11] <phatbot> hehe

[23:11] <phatbot> masak: nice one :)

[23:11] * phatbot is glad "infix_prefix_meta_operator:<[ ]>" didn't stick :}

[23:13] <phatbot> loveperl_: exit is exit

[23:13] <phatbot> m: say "hi"; exit; say "this doesn't print"

[23:13] <camelia> rakudo-moar 7b84ad: OUTPUT«hi␤»

[23:13] <loveperl_> tank you

[23:14] <phatbot> loveperl_: no, `any` is not null; it's a Junction http://perl6.party/post/Perl-6-Schrodinger-Certified-Junctions

[23:15] <loveperl_> what is null?

[23:16] <phatbot> loveperl_: depends on what you're trying to do. Perl 6 has infinite number of "nulls". There's Empty, Nil, and all the type objects (Int is undefined; but 42 is, for example)

[23:19] <b2gills> m: say #`(There is a factorial function, its just called) 6.&permutations.Int

[23:19] <camelia> rakudo-moar 7b84ad: OUTPUT«720␤»

[23:21] <phatbot> m: say [*] ^6+1; #`(There is a factorial function, its just called)

[23:21] <camelia> rakudo-moar 7b84ad: OUTPUT«720␤»

[23:22] *** AlexDaniel joined
[23:25] *** lukiramu left
[23:25] <samcv> omg fuzzy search

[23:25] <samcv> finding wayyyy too many things

[23:26] <samcv> it needs to list the fuzzyly found things at the end of the list

[23:26] <samcv> (re the perl 6 docs)

[23:26] <samcv> also it seems to be realllyyy slow sometimes

[23:27] <samcv> and maxing out the cpu on my computer

[23:27] *** loveperl_ left
[23:28] *** cdg left
[23:28] <samcv> try typing 'run' into it. it justs... kinda

[23:28] <samcv> doesn't do anything and uses all my cpu

[23:29] <samcv> oh hey it finally showed up... but has a billion pages all returned in that scrolling menu..

[23:30] <samcv> i think it should search how it normally would and then have a link to click to go to a fuzzily searched list of things if nothing shows up

[23:31] <AlexDaniel> samcv: fix it then!

[23:32] <AlexDaniel> this problem has been there for quite a while

[23:32] <AlexDaniel> it just got a little bit worse

[23:32] <samcv> you mean since it was changed to fuzzy search?

[23:32] <AlexDaniel> no, previously if you typed ‘e’ it would have given you waaaaay too many results

[23:32] <AlexDaniel> so now there are just a bit more ways to get too many results

[23:32] <AlexDaniel> but same problem

[23:33] <samcv> ah

[23:35] <dalek> doc: d5c7777 | samcv++ | template/search_template.js:

[23:35] <dalek> doc: Change levenshtein distance from 2 to 1

[23:35] <dalek> doc: 

[23:35] <dalek> doc: Try to get it for now to not return way too many things

[23:35] <dalek> doc: for short or common words

[23:35] <dalek> doc: review: https://github.com/perl6/doc/commit/d5c77772c7

[23:38] *** kurahaupo joined
[23:39] <samcv> ok that change made it like 10x better

[23:39] <samcv> ok maybe not 10x better but usable

[23:40] <AlexDaniel> OK: https://github.com/perl6/doc/issues/1050

[23:43] *** travis-ci joined
[23:43] <travis-ci> Doc build failed. Samantha McVey 'Change levenshtein distance from 2 to 1

[23:43] <travis-ci> https://travis-ci.org/perl6/doc/builds/183766447 https://github.com/perl6/doc/compare/a9722174d16d...d5c77772c72b

[23:43] *** travis-ci left
[23:44] <samcv> MoarVM panic: Collectable 0x2b3668c81980 in fromspace accessed :(

[23:44] <samcv> was wondering why that would have broken the docs

[23:45] *** skids joined
[23:46] *** ufobat left
[23:48] <AlexDaniel> mmmmm collectable

[23:51] *** dj_goku joined
[23:51] *** dj_goku left
[23:51] *** dj_goku joined
[23:53] *** rurban left
[23:53] <AlexDaniel> u: Lo

[23:53] <unicodable6> AlexDaniel, U+00AA FEMININE ORDINAL INDICATOR [Lo] (ª)

[23:53] <unicodable6> AlexDaniel, U+00BA MASCULINE ORDINAL INDICATOR [Lo] (º)

[23:53] <unicodable6> AlexDaniel, U+01BB LATIN LETTER TWO WITH STROKE [Lo] (ƻ)

[23:53] *** cygx left
[23:53] <AlexDaniel> … that's it???

[23:53] <AlexDaniel> there are only 3 LO characters???

[23:54] <AlexDaniel> Lo*

[23:54] <AlexDaniel> unicodable6: Lo

[23:54] <AlexDaniel> no, we have a problem!

[23:54] <unicodable6> AlexDaniel, U+00AA FEMININE ORDINAL INDICATOR [Lo] (ª)

[23:54] <unicodable6> AlexDaniel, U+00BA MASCULINE ORDINAL INDICATOR [Lo] (º)

[23:54] <unicodable6> AlexDaniel, U+01BB LATIN LETTER TWO WITH STROKE [Lo] (ƻ)

[23:54] <AlexDaniel> or maybe not

[23:54] *** unicodable6 left
[23:55] <samcv> u: { .unimatch('Lo') }

[23:55] <samcv> did i do that right?

[23:55] <AlexDaniel> :| it ate too much memory and died

[23:55] <phatbot> There are 112804

[23:55] <samcv> oh

[23:55] <samcv> that's not enough

[23:55] <phatbot> m: ^0x110000 .grep(*.uniprop eq "Lo").elems.say

[23:55] <camelia> rakudo-moar 7b84ad: OUTPUT«112804␤»

[23:55] *** unicodable6 joined
[23:56] <AlexDaniel> alright, so it died trying to gist it, I guess

[23:56] <AlexDaniel> or… I don't know

[23:56] <phatbot> What does it use to gist?

[23:56] <samcv> or get the remaining results?

[23:56] <phatbot> Zofware?

[23:56] <AlexDaniel> phatbot: your module I think

[23:56] <samcv> ugh i got this error just now building docs MoarVM panic: Collectable 0x7f8879020cd0 in fromspace accessed

[23:56] <samcv> travis got it too

[23:57] <phatbot> samcv: https://rt.perl.org/Ticket/Display.html?id=130327#ticket-history

[23:57] <AlexDaniel> yea, Pastebin::Gist

[23:57] *** dj_goku left
[23:57] <AlexDaniel> phatbot: by the way, that module does not do any sort of escaping, and it probably should

[23:58] *** dj_goku joined
[23:58] <samcv> escaping?

[23:58] <AlexDaniel> e.g. if you put some control characters in there it will not work

[23:58] <samcv> oh

[23:58] <samcv> why can't it just gist the control characters

[23:58] <AlexDaniel> dunno, let's try something

[23:58] <samcv> does it write it to a file before gisting it?

[23:59] <phatbot> AlexDaniel: I never updated it since I wrote it and it was my second piece of code I ever wrote in Perl 6....

[23:59] <AlexDaniel> evalable6: say ‘hello’ ~ 0.chr ~ ‘world’; .say for ^999

[23:59] <evalable6> AlexDaniel, rakudo-moar 7b84adc: OUTPUT«hello␀world␤0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤29␤30…»

[23:59] <evalable6> AlexDaniel, Full output: https://gist.github.com/

[23:59] <AlexDaniel> samcv: no

[23:59] <samcv> it probably should

