[00:02] *** stevieb joined
[00:04] *** Matias[m] joined
[00:07] *** ilmari[m] left
[00:09] *** sftp joined
[00:11] *** sufrostico joined
[00:12] *** ilmari[m] joined
[00:14] *** pierre_ joined
[00:14] *** sftp left
[00:14] *** stigo left
[00:15] *** Guest61697 left
[00:16] *** labster1 joined
[00:17] *** M-Illandan left
[00:17] *** edenc left
[00:18] <Herby_> if anyone has a moment, i wrote a small script to combine a folder full of CSV files into one file (assuming they have the same header row)

[00:18] *** tadzik left
[00:19] <Herby_> http://pastebin.com/rwcvrWVt

[00:19] *** sftp joined
[00:19] *** labster left
[00:19] <Herby_> i'm open to any ways to improve or streamline it

[00:19] <Herby_> but it works as is

[00:19] *** labster1 is now known as labster

[00:19] *** labster left
[00:19] *** labster joined
[00:20] *** stigo joined
[00:22] *** edenc joined
[00:22] *** flaviusb left
[00:23] *** w4and0er96 left
[00:23] *** sufrostico left
[00:23] *** w4and0er96 joined
[00:23] *** zengargoyle joined
[00:23] <timotimo> you can deduplicate the innermost for loop

[00:23] *** timeless left
[00:23] *** peteretep left
[00:24] *** ilmari[m] left
[00:24] <timotimo> you have a part that comes in front if $header-inserted is 1, and a part that gets executed at the end if $header-inserted is 0

[00:24] *** TeamBlast left
[00:24] <timotimo> and the part in the middle is the same in both cases

[00:24] *** peteretep joined
[00:24] *** Guest61697 joined
[00:24] *** xfix left
[00:24] *** timeless joined
[00:25] <Herby_> hmm ok let me tweak

[00:25] *** xfix joined
[00:27] *** tadzik joined
[00:27] *** M-Illandan joined
[00:28] *** cyphase joined
[00:28] *** Guest61697 left
[00:29] *** flaviusb joined
[00:30] *** ilmari[m] joined
[00:32] *** TeamBlast joined
[00:32] <Herby_> thanks for the tip. it looks a bit cleaner now: http://pastebin.com/XLyhpf2F

[00:35] *** Guest61697 joined
[00:35] <timotimo> looks good, yeah

[00:35] <timotimo> i'm going to bed now

[00:35] <timotimo> have a good one!

[00:36] <Herby_> you too!

[00:37] *** dataange` left
[00:37] *** TeamBlast left
[00:38] *** dataangel joined
[00:39] *** Matias[m] left
[00:40] *** bjz joined
[00:41] *** TeamBlast joined
[00:41] *** M-Illandan left
[00:42] *** perlawhirl joined
[00:45] *** Matias[m] joined
[00:45] *** TeamBlast left
[00:46] *** bisectable6 joined
[00:47] <perlawhirl> Herby_: more of a style choice, but $header-inserted could just be a Bool

[00:47] <yoleaux> 10 Oct 2016 22:49Z <AlexDaniel> perlawhirl: whyyyyyyyyy? https://irclog.perlgeek.de/perl6/2016-10-10#i_13374587

[00:47] *** M-Illandan joined
[00:47] <perlawhirl> declare it as False, set it to True at the end of your loop, and then just `if $header-inserted` in the middle

[00:51] *** telex left
[00:53] *** TeamBlast joined
[00:54] <Herby_> good point. just updated it

[01:04] *** melezhik joined
[01:07] *** telex joined
[01:08] *** TeamBlast left
[01:16] *** TeamBlast joined
[01:17] *** Matias[m] left
[01:17] *** Matias[m] joined
[01:26] *** TeamBlast left
[01:35] *** AlexDaniel left
[01:35] *** tadzik left
[01:38] *** TeamBlast joined
[01:42] *** tadzik joined
[01:46] *** ilbot3 left
[01:47] *** Derperperd joined
[01:48] *** ilbot3 joined
[01:52] *** yqt left
[01:54] *** metalman5 joined
[02:00] *** M-Illandan left
[02:00] *** TeamBlast left
[02:01] <metalman5> Hey, novice question: how do I reload a module after changing its source file? The commands I've tried at the REPL seem to ignore modules that have already loaded.

[02:06] *** cdg joined
[02:06] *** M-Illandan joined
[02:06] *** TeamBlast joined
[02:11] *** bjz left
[02:14] *** Matthew[m] left
[02:15] <perlawhirl> metalman5: The REPL is a probably not a good place for this. better to have it in a script (or better yet, tests) and run it after you make the changes

[02:18] <metalman5> I'm mostly concerned about my development environment--Emacs, in particular. In other language modes, for instance, I can reload a module under development without having to restart the interpreter.

[02:18] *** cdg left
[02:19] *** cdg joined
[02:20] *** bjz joined
[02:21] *** Matthew[m] joined
[02:22] *** cyphase left
[02:23] <MasterDuke> metalman5: you could try EVALFILE. i haven't used it, but it might do what you want

[02:24] *** eliasr left
[02:25] <metalman5> I'll give it a try, thanks.

[02:26] *** _slade_ joined
[02:27] *** cyphase joined
[02:28] *** ka left
[02:30] *** cdg left
[02:35] *** cyphase left
[02:36] *** cyphase_eviltwin joined
[02:40] *** pierre_ left
[02:47] *** pierre_ joined
[02:48] *** bjz_ joined
[02:48] *** noganex_ joined
[02:49] *** bjz left
[02:51] *** noganex left
[02:58] *** metalman5 left
[03:01] *** pierre_ left
[03:04] *** Guest61697 left
[03:06] *** pierre_ joined
[03:08] <lucs_> I'm getting an error in one of DBIish's files.

[03:08] <lucs_> I'd like to place some 'print' debugging statements in it, but given precompilation (I suppose), where/how exactly?

[03:09] <lucs_> The error is reported as ｢…/rakudo/install/share/perl6/site/sources/B874A114F16EBFE5EA4815E5E20CA48A7810B32C (DBDish::mysql::StatementHandle) line 178｣, but changing that file and running the program again does nothing.

[03:09] *** lucs_ is now known as lucs

[03:09] *** pierre_ left
[03:09] *** pierre_ joined
[03:10] *** Guest61697 joined
[03:14] <MasterDuke> lucs: it might be simplest to just clone the git repo, make your changes there, and explicitly include the cloned lib directory with -I</path/to/DBDish/lib>

[03:15] *** bjz_ left
[03:17] *** tadzik left
[03:17] *** bisectable6 left
[03:17] *** ilmari[m] left
[03:18] <lucs> MasterDuke: Hmm... I'll try that. Will it happen to avoid precompilation? (so that I can change the code in the cloned repo more than once)

[03:19] <MasterDuke> yeah, precomp should catch that the code has changed

[03:21] *** bisectable6 joined
[03:21] <lucs> Okay, thanks.

[03:23] *** tadzik joined
[03:24] *** ilmari[m] joined
[03:49] *** rgrinberg left
[03:49] <lucs> Um, weird result: https://gist.github.com/lucs/7f4dac24fa39eca90e3528b7ccc7450a

[04:08] *** Herby_ left
[04:10] *** khw left
[04:20] *** BenGoldberg left
[04:22] *** cpage_ left
[04:23] *** hobbs left
[04:23] *** brillenfux joined
[04:24] *** ilmari[m] left
[04:24] *** Matias[m] left
[04:25] *** Matias[m] joined
[04:26] *** cpage_ joined
[04:26] *** hobbs joined
[04:27] * lucs & # ZZ

[04:30] *** ilmari[m] joined
[04:32] *** cpage_ left
[04:36] *** tadzik left
[04:42] *** tadzik joined
[04:44] *** Cabanossi left
[04:47] *** bjz joined
[04:48] *** Cabanossi joined
[04:51] *** wamba joined
[04:58] *** flexibeast left
[05:04] *** cpage_ joined
[05:14] *** seatek left
[05:18] *** bjz left
[05:25] *** domidumont joined
[05:27] *** skids left
[05:29] *** domidumont left
[05:29] *** domidumont joined
[05:33] *** pierre_ left
[05:36] *** cooper_ joined
[05:36] *** cooper_ left
[05:36] *** cooper_ joined
[05:36] *** andrzejku_ joined
[05:36] *** jargan left
[05:36] *** jast joined
[05:37] *** edenc left
[05:37] *** edenc joined
[05:39] *** cooper left
[05:39] *** andrzejku left
[05:40] *** domidumont left
[05:45] *** grondilu joined
[05:48] *** wamba left
[05:53] *** domidumont joined
[06:06] *** neuraload joined
[06:12] *** zengargoyle left
[06:16] *** ChoHag joined
[06:21] *** tadzik left
[06:21] *** Actualeyes left
[06:24] *** wamba joined
[06:27] *** tadzik joined
[06:28] *** tokomer joined
[06:28] *** firstdayonthejob joined
[06:32] *** wamba left
[06:33] *** perlawhirl left
[06:34] *** Actualeyes joined
[06:34] *** Derperperd left
[06:35] *** darutoko joined
[06:41] *** pierre_ joined
[06:44] *** M-Illandan left
[06:45] *** firstdayonthejob left
[06:46] *** pierre_ left
[06:50] *** M-Illandan joined
[07:00] <nine> .tell nadim no progress in the last couple of weeks. Have been side tracked by work on Inline::Perl5

[07:00] <yoleaux> nine: I'll pass your message to nadim.

[07:00] *** brrt[irrsi] joined
[07:01] *** bjz joined
[07:02] *** Xliff__ joined
[07:03] *** Actualeyes left
[07:05] *** Xliff_ left
[07:07] *** bisectable6 left
[07:08] *** wamba joined
[07:10] *** girafe left
[07:12] *** abraxxa joined
[07:15] *** grondilu left
[07:19] *** Actualeyes joined
[07:20] *** ilmari[m] left
[07:25] *** bjz left
[07:26] *** ilmari[m] joined
[07:30] *** Actualeyes left
[07:30] *** Actualeyes joined
[07:31] *** Guest61697 left
[07:34] *** kurahaupo joined
[07:34] *** pierre_ joined
[07:34] *** Celelibi joined
[07:37] *** Guest61697 joined
[07:38] *** pdcawley left
[07:41] *** CIAvash joined
[07:42] *** wamba left
[07:44] *** aborazmeh joined
[07:44] *** aborazmeh left
[07:44] *** aborazmeh joined
[07:44] *** dakkar joined
[07:46] *** ChoHag left
[07:48] *** rindolf joined
[07:52] *** Actualeyes left
[07:55] *** ChoHag joined
[07:58] *** pierre_ left
[08:00] *** ocbtec joined
[08:02] *** _slade_ left
[08:08] *** Actualeyes joined
[08:08] *** kurahaupo left
[08:08] *** pierre_ joined
[08:10] *** ilmari[m] left
[08:10] *** ilmari[m] joined
[08:10] *** pierre_ left
[08:11] *** pierre_ joined
[08:15] *** g4 joined
[08:15] *** g4 left
[08:15] *** g4 joined
[08:20] *** andrewalker joined
[08:21] *** CIAvash left
[08:25] *** nadim joined
[08:29] *** pierre_ left
[08:34] *** TEttinger left
[08:37] *** pierre_ joined
[08:38] *** wamba joined
[08:38] *** ale1ster joined
[08:39] *** RabidGravy joined
[08:41] *** pierre_ left
[08:51] *** pdcawley joined
[08:53] *** pdcawley left
[08:53] *** pdcawley joined
[08:56] *** wamba left
[09:04] *** brrt[irrsi] is now known as brrt[work]

[09:07] *** user9 left
[09:07] *** user9 joined
[09:08] *** ale1ster left
[09:09] *** ale1ster2 joined
[09:09] *** pierre_ joined
[09:10] *** aborazmeh left
[09:17] <tbrowder> morning (CDT) #perl6

[09:18] <DrForr> Afternoon EEDT.

[09:21] <sjn> good *, #perl6

[09:23] <tbrowder> ref docs and the Perl 6 Cookbook <http://examples.perl6.org/categories/cookbook.html>: I asked about it a couple of weeks ago and thought it was a good thing to emphasize but I was concerned about licensing issues with O'Reilly publishers and the authors of the Perl Cookbook.  I contacted O'Reilly and was told use of the Table of Contents on our site was not

[09:23] <tbrowder> allowed, but any author(s) interested in producing such a book for Perl 6 should contact O'Reilly at [email@hidden.address]
[09:24] <tbrowder> That's too bad, but I believe the Perl Foundation lawyers would insist the online P6 Cookbook should be taken down.

[09:24] <DrForr> That's a touch odd (though not unexpected) as I know they're involved in a similar project...

[09:25] <tbrowder> Maybe so, but then I believe some here do have individual agreements with O'Reilly.

[09:26] <tbrowder> I would love to buy a P6 Cookbook!

[09:26] <sjn> licensing issues?

[09:27] <DrForr> I do, but not for book properties.

[09:27] <tbrowder> Copyright/trademark.  Copying the TOC from an existing book is not fair use, etc.

[09:28] *** kurahaupo joined
[09:32] <sjn> why copy the TOC then? I'd assume when one writes a cookbook, it's completely sane to make your own...

[09:33] *** pierre_ left
[09:33] <DrForr> Sane, yes, but also easier to work from a thoght-out progression rather than working ab initio.

[09:33] *** brrt[work] left
[09:33] <sjn> sure, it's fine to take inspiration from an existing work

[09:34] *** pdcawley left
[09:34] <sjn> nothing wrong with that, and it really doesn't cost much to add/change a few of the items in the TOC so that it becomes an "independent enough" work

[09:36] <sjn> also, (frankly speaking) I think the Perl community has pandered WAAAY to much to O'Reilly & Assoc.

[09:36] <sjn> it's high time to let that leave that company behind, imho.

[09:38] *** pierre_ joined
[09:39] <DrForr> Well, if we can get the trademarks and websites back from...

[09:39] <DrForr> *them.

[09:40] <sjn> I thought that's already fixed?

[09:40] *** pierre_ left
[09:40] <sjn> only thing left is the Perl 5 logo issue, which Perl 6 doesn't suffer from..

[09:40] *** pierre_ joined
[09:40] *** zakharyas joined
[09:41] *** perlawhirl joined
[09:41] <sjn> the "The Perl Conference" rights and perl.com are already in TPF's hands, I think

[09:43] <DrForr> Right, but I was under the impression that YEF still isn't able to use the name, and the last posting on perl.com dates from 2014, which can't be helping matters.

[09:43] *** pdcawley joined
[09:43] <sjn> Dunno about YEF

[09:44] <sjn> the lack of updates on perl.com is unfortunate, yes

[09:44] * sjn shouldn't really complain about that, since he hasn't written anything for it either

[09:45] <DrForr> I haven't since ~2009, but I'm more interested in writing on perl6 these days.

[09:48] *** kurahaupo left
[09:53] <markk_> Perl.com is not owned by tpf iirc, we just have an agreement on the usage of it

[09:53] <DrForr> tchrist's site, IIRC.

[09:53] <markk_> The same for The Perl Conference which we are allowed to use for YAPC::NA by the grace of O'Reilly, but afaik no one has approached to use the name for other Perl conferences

[09:54] <markk_> And it would be badly named as it has a definite article, so what do we do? The Perl Conference Europe, European Perl Conference? Or maybe Yet Another Attemmpt to Change a Brand that is 16 Years old Conference

[09:55] <DrForr> Right, the way I understand it ORA owns the trademark but is allowing TPF to use it after ... well, all they had to do was ask. I don't think YEF has made the same request.

[09:55] * markk_ has some misgivings about dumping YAPC as a brand.

[09:55] <DrForr> OSCON seems to do well with London and Austin.

[09:55] <markk_> DrForr: that is correct

[09:56] <DrForr> At least last time I talked with Karen about it.

[09:56] *** ilmari[m] left
[09:56] <markk_> DrForr: OSCON doesn't have a community as such

[09:57] <markk_> I'm not objecting to a name change, I think there are ways to handle it, but only agreeing to one conference has caused some confusion

[09:57] <DrForr> Don't I know it. It's just a higher-end excuse to drink beer with geeks than YAPC is.

[09:59] *** pdcawley left
[09:59] <DrForr> Well, again, YEF and TPF are different organizations, and only TPF AFAIK has approached ORA about the trademark.

[10:00] *** Matias[m] left
[10:00] *** TEttinger joined
[10:02] *** smls joined
[10:03] *** bjz joined
[10:03] *** ilmari[m] joined
[10:04] <smls> How can I disable MoarVM's JIT for testing/benchmarking purposes?

[10:05] <timotimo> ask moar --help for all your disabling needs

[10:05] *** Guest61697 left
[10:05] <smls> ah, thanks, I was looking int `perl6 --help`.

[10:05] <smls> *in

[10:06] *** Matias[m] joined
[10:07] <jnthn> Note that even with JIT disabled, you'll still be using spesh, which will - in the absence of a JIT - do bytecode quickening

[10:07] <jnthn> So if you want to disable all VM-level opt for Moar, MVM_SPESH_DISABLE is the way to go

[10:08] <jnthn> ("JIT compiler" is often used to mean the optimization + code-gen, in Moar, MVM_JIT_DISABLE is talking about machine-code gen only)

[10:08] <timotimo> and disabling spesh also causes jitting to not take place

[10:08] <smls> right, I meant spesh :P

[10:09] *** Actualeyes left
[10:09] *** pdcawley joined
[10:09] <jnthn> Yeah...it all depends what you want to benchmark really :)

[10:10] <smls> I'm trying to find out if RT #129779 is caused by spesh, and it looks like it is

[10:10] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129779

[10:11] <smls> it seems that spesh makes the single-threaded version much faster, but the multi-threaded version actually a bit slower

[10:11] *** Guest61697 joined
[10:13] *** ale1ster2 left
[10:14] <timotimo> allocating frames (i.e. calling functions) currently contends a per-instance (rather than per-thread) memory allocator

[10:16] *** TEttinger left
[10:16] <timotimo> if the empty loop actually invokes the empty body each time 'round the loop in one of those earlier examples, it will hardly do anything but allocate and free frames

[10:16] *** tokomer left
[10:16] <timotimo> then the allocator becomes the bottleneck and would be responsible for most of the runtime

[10:17] <smls> timotimo: I tested with the benchmark in the last comment of the RT

[10:17] <smls> the recursive fibonnaci one, not empty loops

[10:17] <timotimo> recursive function calls are also bad :)

[10:18] <timotimo> did you try running it under some kind of profiler, like perf?

[10:18] <smls> no

[10:20] <timotimo> No thread: 10.4069735

[10:20] <timotimo> Parallel: 10.92738216

[10:20] <timotimo> the whole program spends 34% of its time inside MVM_fixed_size_alloc

[10:20] <timotimo> an additional 7.84% of its time in MVM_fixed_size_free

[10:20] <timotimo> and 7.44% in MVM_frame_invoke

[10:20] <jnthn> Yeah, that'll be what's holding it up. Also, I suspect, over-subscription

[10:20] <jnthn> Our scheduler just ain't all that smart yet

[10:21] <timotimo> mystery solved?

[10:21] <timotimo> i'm not exactly sure why my parallel vs no thread results are drastically better than what's in the ticket, though

[10:22] <smls> timotimo: I get these times: https://gist.github.com/smls/e0f1fa2d98ec7c2154c715187bf9ae93

[10:22] <jnthn> Will depends on number of cores, cache speeds, etc.

[10:22] *** bisectable6 joined
[10:24] <smls> (I tested on a 4-core CPU, and the parallel test-case uses exactly 4 threads.)

[10:24] <timotimo> i, too, have 4 cores

[10:25] <smls> Are your times (where parallel is about as fast as no thread) with perf, or run normally?

[10:25] <timotimo> with perf, but perf is supposed to have near zero overhead

[10:25] <jnthn> Spesh makes quite a difference there... :)

[10:25] <timotimo> let me try without

[10:26] <jnthn> And yes, interesting that it gets worse; I suspect it eliminates stuff so you spend all the time contending

[10:26] <timotimo> all times get a little smaller without perf, but not a big difference

[10:27] <timotimo> smls: do you want to write about this allocator business on the ticket or shall i put a little explanation up?

[10:27] <smls> I'd have just quoted your IRC comments, but you may be able to explain it better :)

[10:27] *** labster left
[10:27] <timotimo> i expect the irc quote would be good enough

[10:28] <smls> ok

[10:28] <timotimo> i'm available for any further questions, but you may have to poke me so that i notice

[10:31] *** Matias[m] left
[10:31] *** Matias[m] joined
[10:33] *** kurahaupo__ joined
[10:33] *** kurahaupo__ left
[10:33] *** kurahaupo__ joined
[10:34] *** kurahaupo__ left
[10:34] *** kurahaupo__ joined
[10:34] *** kurahaupo__ left
[10:35] *** kurahaupo__ joined
[10:36] *** kurahaupo__ left
[10:36] *** kurahaupo__ joined
[10:36] *** zakharyas left
[10:36] *** rudolfochrist joined
[10:53] *** pmurias joined
[10:53] <pmurias> http://blogs.perl.org/users/pawel_murias/2016/10/update-on-rakudojs.html - update on rakudo.js

[10:53] <timotimo> yay!

[10:54] <timotimo> pmurias++

[10:57] *** pierre_ left
[10:58] *** canopus left
[10:59] *** buggable left
[10:59] <lizmat> pmurias++

[10:59] *** buggable joined
[11:01] *** bisectable6 left
[11:03] *** canopus joined
[11:03] *** TimToady joined
[11:05] *** Actualeyes joined
[11:06] *** shmibs_ is now known as shmibs

[11:07] *** dalek left
[11:07] *** M-Illandan left
[11:08] *** dalek joined
[11:08] *** ChanServ sets mode: +v dalek

[11:08] *** Matias[m] left
[11:13] <timotimo> oh no! there were TWO instances of that error message and i only patched one

[11:13] *** M-Illandan joined
[11:14] <arnsholt> Then you get to write another patch

[11:14] <arnsholt> More karmapoints for you! =)

[11:14] *** Matias[m] joined
[11:15] <timotimo> :S

[11:19] <moritz> pmurias++ # blog post

[11:19] <moritz> pmurias++ # rakudo-js

[11:21] <llfourn> I need to find the narrowest common parent of two classes/types. Does anyone know a good approach?

[11:25] <jnthn> m: my \t1 = Int; my \t2 = Str; say t1.^mro.first({ t2 ~~ $^t })

[11:25] <camelia> rakudo-moar e08da9: OUTPUT«(Cool)␤»

[11:25] <jnthn> m: my \t1 = Supply; my \t2 = Str; say t1.^mro.first({ t2 ~~ $^t })

[11:25] <camelia> rakudo-moar e08da9: OUTPUT«(Any)␤»

[11:25] <jnthn> Like that maybe?

[11:25] *** khisanth_ joined
[11:26] *** wamba joined
[11:26] <llfourn> jnthn: Nice. Thanks.

[11:26] <llfourn> I'll see how it goes

[11:26] <llfourn> I've never used .^mro

[11:27] <llfourn> m: my \t1 = Str; say t1.^mro

[11:27] <camelia> rakudo-moar e08da9: OUTPUT«((Str) (Cool) (Any) (Mu))␤»

[11:27] <jnthn> It's just the parents in the order that we'll search them when doing a method dispatch

[11:27] <jnthn> (mro = method resolution order)

[11:27] <llfourn> ahhh gotcha

[11:27] <llfourn> that's exactly what I need

[11:29] *** Khisanth left
[11:30] *** Lucas_One joined
[11:44] *** rudolfochrist left
[11:45] *** bjz_ joined
[11:45] *** ocbtec left
[11:46] *** bjz left
[11:47] *** pdcawley left
[11:48] *** ilmari[m] left
[11:52] *** pdcawley joined
[11:54] *** ilmari[m] joined
[11:57] *** smls_ joined
[11:57] *** smls left
[11:58] *** smls_ is now known as smls

[12:00] *** rgrinberg joined
[12:12] *** ale1ster joined
[12:21] *** ale1ster left
[12:51] *** CIAvash joined
[12:51] <[Coke]> pmurias: are rakudo-js updates showing up in this channel?

[12:51] <[Coke]> s/updates/commits/

[12:54] <[Coke]> (and having just said that, see a flood of nqp-js commits in backlog on #perl6-dev :)

[13:02] *** pdcawley left
[13:05] *** iH2O joined
[13:14] *** iH2O left
[13:16] *** Guest61697 left
[13:19] *** cdg joined
[13:21] <pmurias> [Coke]: the rakudo-js commits are sent to the #perl6-dev channel too, most of the work is done in the nqp-js repo

[13:22] *** Guest61697 joined
[13:23] *** wamba left
[13:24] <[Coke]> pmurias: awesome, keep up the good work

[13:25] *** ilmari[m] left
[13:25] *** ilmari[m] joined
[13:26] *** g4 left
[13:27] *** seatek joined
[13:30] *** dj_goku left
[13:33] *** kurahaupo joined
[13:35] *** skids joined
[13:38] *** ilmari[m] left
[13:39] *** ilmari[m] joined
[13:42] *** mr-foobar joined
[13:45] *** bjz_ left
[13:54] *** neuraload left
[13:54] *** neuraload joined
[13:55] *** neuraload left
[13:55] *** neuraload joined
[13:59] *** Actualeyes left
[14:01] *** brillenfux left
[14:02] *** Actualeyes joined
[14:04] *** ocbtec joined
[14:04] *** ptolemarch left
[14:04] *** pdcawley joined
[14:10] <p3rln00b> .tell dogbert17 would you list yourself in https://github.com/rakudo/rakudo/blob/nom/CREDITS ? Right now you're comming up twice when announcement is generated; as dogbert and as full name

[14:10] <yoleaux> p3rln00b: I'll pass your message to dogbert17.

[14:11] *** optikalmouse joined
[14:14] *** khw joined
[14:17] *** gregf_ joined
[14:18] *** ilmari[m] left
[14:22] *** wamba joined
[14:24] *** TeamBlast left
[14:25] *** ilmari[m] joined
[14:28] *** urchin_ joined
[14:31] *** Urchin left
[14:33] *** TeamBlast joined
[14:38] *** rudolfochrist joined
[14:39] *** Sgeo__ joined
[14:41] *** Sgeo_ left
[14:43] *** user9 left
[14:44] *** user9 joined
[14:49] *** canopus left
[14:49] *** rudolfochrist left
[14:50] *** M-Illandan left
[14:51] *** wamba left
[14:54] *** pdcawley left
[14:54] *** canopus joined
[14:56] *** neuraload left
[14:56] *** abraxxa left
[14:56] *** M-Illandan joined
[14:59] <japhb> pmurias++  # rakudo.js and associated blog entry

[14:59] <japhb> pmurias: BTW, a 'test suit' is something you try on when you're shopping for clothing.  You're thinking of a 'test suite'.  ;-)

[15:01] *** canopus left
[15:01] <japhb> Idea for $zoffix: Add a bot that accepts a '.zoffix' command -- like '.tell', but PMs your current alias, so that you can remain contactable while pseudonymous.

[15:01] <p3rln00b> I'm sure Zoffix knows when .tell Zoffix is used without bots ;)

[15:02] <japhb> p3rln00b: But such a bot could let the sender know when it was delivered ... which is implicit with .tell delivery, but is no longer available with passive watching

[15:03] *** optikalmouse left
[15:03] <japhb> It just wouldn't tell who it delivered *to*

[15:03] <p3rln00b> japhb: well, Zoffix chills in #perl6-dev, not here. Maybe that's the solution :)

[15:04] <japhb> Interesting.  So only pseudonymous in one channel.  That ... I did not expect.

[15:05] *** optikalmouse joined
[15:07] <japhb> I will say I'm finding it interesting as a case study of sorts just how leaky pseudonymity is ... 

[15:07] *** pdcawley joined
[15:08] *** gregf_ left
[15:09] <lucs> I'm getting an error in the panda installed DBIish module, but can't seem to modify the relevant source to try to debug (by inserting 'print' statements for example).

[15:09] <lucs> I cloned the DBIish repo and tried to use that, but I get a result I just don't understand: https://gist.github.com/lucs/7f4dac24fa39eca90e3528b7ccc7450a

[15:10] <moritz> that looks funny

[15:11] <moritz> lucs: please open an issue on github, in the perl6/dbiish project

[15:11] *** canopus joined
[15:11] <lucs> moritz: Is what I showed in the gist sufficient for the report?

[15:11] <p3rln00b> lucs: what's your Perl 6 version?

[15:12] <lucs> p3rln00b: This is Rakudo version 2016.09-167-gbfe6219 built on MoarVM version 2016.09-39-g688796b implementing Perl 6.c.

[15:12] <lucs> (I built everything from scratch yesterday)

[15:14] <p3rln00b> japhb: yeah, it is. Basically, even if you use entirely new IPs/hosts/nicks and don't use any webservices that can be linked to your conversation, there's still the suspicion element: some new person no one ever seen all of a sudden knows a lot about Perl 6 and its tooling :)

[15:14] <lucs> Generally speaking, given precomps and all that, what is the recommended way of debugging with 'print' statements for example?

[15:14] <p3rln00b> lucs: cool. I just wanted to ensure it wasn't due to changes I made to Date/DateTime last night... and it isn't.

[15:15] *** domidumont left
[15:16] <lucs> p3rln00b: Actually, DBIish is trying to build a DateTime from a '0000-00-⋯' MySQL date and is complaining of a '0' month.

[15:17] <p3rln00b> ah

[15:19] <dalek> doc/spellcheck: f548fc7 | coke++ | xt/.aspell.pws:

[15:19] <dalek> doc/spellcheck: more words

[15:19] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/f548fc71bc

[15:20] <[Coke]> we have a bunch of behaviour, instead of behavior; do we have a UK vs. US pref?

[15:20] <[Coke]> (in docs)

[15:21] <moritz> nope

[15:21] <moritz> as a non-native, I feel I can't be assed to remember which English I should write, or which one is which

[15:21] <[Coke]> that's why I'm writing a test. :)

[15:21] <moritz> writing is hard enough as is :-)

[15:21] <[Coke]> but if we're ok with some uk english slipping in, that's fine.

[15:22] *** MARTIMM joined
[15:24] <dalek> doc/spellcheck: 6b9c42f | coke++ | xt/.aspell.pws:

[15:24] <dalek> doc/spellcheck: allow some UK words (and more)

[15:24] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/6b9c42f6b8

[15:24] *** canopus left
[15:25] <mst> I tend to annoy absolutely everybody by picking API names in en_US and then documenting in en_UK

[15:25] <mst> I do not present this as something desirable to copy

[15:25] *** M-Illandan left
[15:25] *** Matias[m] left
[15:26] *** Guest61697 left
[15:26] *** tadzik left
[15:26] *** ilmari[m] left
[15:26] *** Matthew[m] left
[15:26] <[Coke]> m: 1.no-such

[15:26] <camelia> rakudo-moar 23f2e2: OUTPUT«No such method 'no-such' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[15:26] *** user9 left
[15:26] * p3rln00b appears to have copied mst https://github.com/zoffixznet/perl6-Color/blob/master/META6.json#L3-L6

[15:28] *** geraud joined
[15:28] <dalek> doc: b0b4e1e | coke++ | doc/Type/X/Method/NotFound.pod6:

[15:28] <dalek> doc: use actual word for method name

[15:28] <dalek> doc: review: https://github.com/perl6/doc/commit/b0b4e1ea5d

[15:28] <dalek> doc/spellcheck: 657e063 | coke++ | xt/.aspell.pws:

[15:28] <dalek> doc/spellcheck: moar words

[15:28] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/657e06317f

[15:28] <dalek> doc/spellcheck: b0b4e1e | coke++ | doc/Type/X/Method/NotFound.pod6:

[15:28] <dalek> doc/spellcheck: use actual word for method name

[15:28] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/b0b4e1ea5d

[15:28] <dalek> doc/spellcheck: d28f6fb | coke++ | doc/Type/X/Method/NotFound.pod6:

[15:28] <dalek> doc/spellcheck: Merge branch 'master' into spellcheck

[15:28] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/d28f6fb45d

[15:32] *** canopus joined
[15:34] <dalek> doc: a9abc32 | coke++ | doc/ (4 files):

[15:34] <dalek> doc: fix typos

[15:34] <dalek> doc: review: https://github.com/perl6/doc/commit/a9abc328de

[15:35] <dalek> doc/spellcheck: a9abc32 | coke++ | doc/ (4 files):

[15:35] <dalek> doc/spellcheck: fix typos

[15:35] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/a9abc328de

[15:35] <dalek> doc/spellcheck: 00a79ab | coke++ | doc/ (4 files):

[15:35] <dalek> doc/spellcheck: fix typos

[15:35] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/00a79ab2e5

[15:35] <dalek> doc/spellcheck: dc35a38 | coke++ | /:

[15:35] <dalek> doc/spellcheck: Merge branch 'master' into spellcheck

[15:35] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/dc35a38341

[15:35] <[Coke]> yay, finally snagged some actual typos. :)

[15:37] *** ilmari[m] joined
[15:38] <p3rln00b> \o/

[15:38] *** canopus left
[15:40] *** domidumont joined
[15:42] <dalek> doc: bc3fc47 | coke++ | doc/ (3 files):

[15:42] <dalek> doc: fix typos

[15:42] <dalek> doc: review: https://github.com/perl6/doc/commit/bc3fc47a5b

[15:42] <dalek> doc/spellcheck: 9d09fff | coke++ | xt/.aspell.pws:

[15:42] <dalek> doc/spellcheck: moar words

[15:42] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/9d09fff42c

[15:42] <dalek> doc/spellcheck: bc3fc47 | coke++ | doc/ (3 files):

[15:42] <dalek> doc/spellcheck: fix typos

[15:42] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/bc3fc47a5b

[15:42] <dalek> doc/spellcheck: b0b3389 | coke++ | doc/ (3 files):

[15:42] <dalek> doc/spellcheck: Merge branch 'master' into spellcheck

[15:42] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/b0b3389bf5

[15:43] <[Coke]> nice side effect of kebob case - makes it easier to indiscriminately spell check everything

[15:44] *** tadzik joined
[15:44] *** M-Illandan joined
[15:44] *** Guest18866 joined
[15:44] *** Matthew[m] joined
[15:46] *** canopus joined
[15:46] *** Matias[m] joined
[15:54] *** FROGGS joined
[15:59] *** pmurias left
[16:08] *** xinming left
[16:13] *** cognominal joined
[16:15] <dalek> doc: 428d506 | (Salve J. Nilsen)++ | / (2 files):

[16:15] <dalek> doc: Typo fixes in about.pod6 and predef search items

[16:15] <dalek> doc: review: https://github.com/perl6/doc/commit/428d50611c

[16:15] <dalek> doc: dd6407d | Altai-man++ | / (2 files):

[16:15] <dalek> doc: Merge pull request #965 from sjn/master

[16:15] <dalek> doc: 

[16:15] <dalek> doc: Typo fixes in about.pod6 and predef search items

[16:15] <dalek> doc: review: https://github.com/perl6/doc/commit/dd6407d9e0

[16:24] *** optikalmouse left
[16:24] <smls> To create an immutable value type (like the built-in Int/Str/Pair/Set), is it safe to just define a `method WHICH { ::?CLASS.^name ~ "|" ~ $!id }` ?

[16:25] <smls> Or are there other things I have to consider?

[16:26] <timotimo> well, you should also take care that immutability is guaranteed by not letting anything change the $!id

[16:29] <smls> of course

[16:33] <smls> Is is okay to just return a string from WHICH, instead of an ObjAt?

[16:33] *** TeamBlast left
[16:33] <smls> m: say 42.WHICH.perl

[16:33] <camelia> rakudo-moar 23f2e2: OUTPUT«ObjAt.new("Int|42")␤»

[16:35] <timotimo> i don't know anything about that, tbh

[16:35] <smls> Also, that whole system is just preliminary, right?

[16:35] <smls> m: say set("a Str|b") === set("a", "b")

[16:35] <camelia> rakudo-moar 23f2e2: OUTPUT«True␤»

[16:35] <smls> ^^ seeing how its rather unreliable...

[16:36] <p3rln00b> m: .WHICH.say for set("a Str|b"), set("a", "b")

[16:36] <camelia> rakudo-moar 23f2e2: OUTPUT«Set|Str|a Str|b␤Set|Str|a Str|b␤»

[16:36] <p3rln00b> heh

[16:37] <jnthn> Yes, it's not going to survive in this state too much longer...

[16:38] <smls> ok

[16:41] *** dakkar left
[16:42] *** CIAvash left
[16:42] *** TeamBlast joined
[16:42] *** cygx joined
[16:43] <cygx> so, what are we supposed to stick into a META6.json source-url field to we point to the correct version?

[16:44] <cygx> does panda/zef support git branches/tags as URL fragments?

[16:44] *** dj_goku joined
[16:46] <p3rln00b> cygx: seems tbrowder is experimenting with something on that topic: https://github.com/perl6/ecosystem/blob/master/META.list#L730-L731

[16:47] <cygx> the META file points to the .zip files on github

[16:48] *** acrussell joined
[16:48] *** Matias[m] left
[16:49] <p3rln00b> Doesn't seem to be installable with zef: "No candidates found matching: Net::IP::Lite:ver('0.1.4')"

[16:50] *** yqt joined
[16:52] *** wamba joined
[16:52] *** Matias[m] joined
[16:58] <moritz> p3rln00b: https://twitter.com/briandfoy_perl/status/786246651614814208 more Perl 6 book work going on, it seems :-)

[17:00] *** TeamBlast left
[17:05] *** remmie joined
[17:08] <p3rln00b> moritz: :)

[17:08] *** TeamBlast joined
[17:08] <p3rln00b> moritz: so is there a plan already for ours? Is there any writing to do?

[17:11] *** optikalmouse joined
[17:11] *** optikalmouse left
[17:15] *** TeamBlast left
[17:22] *** firstdayonthejob joined
[17:23] *** TeamBlast joined
[17:24] <dalek> ecosystem: 395b9a1 | cygx++ | META.list:

[17:24] <dalek> ecosystem: Add Unicode::GCB

[17:24] <dalek> ecosystem: 

[17:24] <dalek> ecosystem: See https://github.com/cygx/p6-unicode-gcb

[17:24] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/395b9a197a

[17:26] <moritz> p3rln00b: we have to make a plan :-)

[17:27] <timotimo> make a list, check it twice?

[17:27] <moritz> p3rln00b: I'll create a repo somewhere, and come up with a very, very rough outline as starting point for discussion

[17:28] <p3rln00b> Sounds good

[17:29] <DrForr> I'd probably better chime in on this action :)

[17:31] *** cdg left
[17:31] <moritz> DrForr: please /msg me an ssh pubkey

[17:31] <moritz> p3rln00b: same here (unless I should take the one from your hack account in ~/.ssh/authorized_keys)

[17:34] <p3rln00b> p3rln00b: yeah use that one

[17:35] <p3rln00b> I mean, moritz yeah use that one 

[17:35] <p3rln00b> heh

[17:35] *** sufrostico joined
[17:37] *** cdg joined
[17:38] *** yqt left
[17:38] *** xinming joined
[17:38] <dalek> doc/spellcheck: 428d506 | (Salve J. Nilsen)++ | / (2 files):

[17:38] <dalek> doc/spellcheck: Typo fixes in about.pod6 and predef search items

[17:38] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/428d50611c

[17:38] <dalek> doc/spellcheck: dd6407d | Altai-man++ | / (2 files):

[17:38] <dalek> doc/spellcheck: Merge pull request #965 from sjn/master

[17:38] <dalek> doc/spellcheck: 

[17:38] <dalek> doc/spellcheck: Typo fixes in about.pod6 and predef search items

[17:38] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/dd6407d9e0

[17:38] <dalek> doc/spellcheck: 3a613df | coke++ | xt/.aspell.pws:

[17:38] <dalek> doc/spellcheck: more words

[17:38] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/3a613df9cc

[17:38] <dalek> doc/spellcheck: 2588009 | coke++ | / (2 files):

[17:38] <dalek> doc/spellcheck: Merge branch 'master' into spellcheck

[17:38] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/2588009773

[17:39] <moritz> p3rln00b, DrForr: git clone [email@hidden.address]
[17:40] <p3rln00b> works

[17:41] <DrForr> Likewise.

[17:42] <moritz> gitolite ftw!

[17:42] <timotimo> indeed

[17:42] <moritz> afk

[17:48] <DrForr> Nod.

[17:50] <timotimo> the heartbeat thing seems to have finished growing at 140 MB RSS

[17:53] <samcv> could anybody recommend something on Proc::Async? or maybe it's not the right thing for me to be using

[17:53] <timotimo> "something on"?

[17:53] <timotimo> you mean documentation or examples?

[17:53] <samcv> i have an irc bot right now using perl5, i want to switch the bot to use a different method and thought that perl6 might be good, for what i'm trying to do

[17:54] <samcv> basically the bot has a helper script, that i processes the irc messages

[17:54] <samcv> and accepts stdin and outputs anything to channel as stdout

[17:54] <samcv> i want the helper script to be constantly running, and be able to print to stdin on that 

[17:54] <samcv> and still have the rest of the script functioning while the helper is open

[17:57] <samcv> there might be something else i'm not seeing that can run something and do stdin and out but i am unsure

[17:57] *** firstdayonthejob left
[17:58] * p3rln00b is confused about what's needed.

[17:58] <p3rln00b> samcv: you want to proxy STDIN to IRC?

[17:59] <p3rln00b> ... and print channel messages to STDOUT, right?

[17:59] <samcv> well the main thing i need to do is only to open a program, read stdout and write to stdin

[17:59] <mspo> he wants to proxy IRC to stdin of his helper and then take stdout into irc

[17:59] <samcv> i can handle the irc part, i just need help with doing the script part

[18:00] <samcv> the irc part is not relevant just in so that it can't lock up everything while the secondary thing is running

[18:00] *** firstdayonthejob joined
[18:01] <mspo> Proc::Async sounds right

[18:02] <p3rln00b> samcv: well, the IRC part is easy. Just use IRC::Client module. For the second thing, just pop it open with my $p = Proc::Async.new: 'prog', 'args'; $p.start; and then you can write to its STDIN with $p.print; and get its STDOUT by tapping to .stdout:  $p.stdout.tap: { $irc.send: $^input }

[18:02] <mspo> https://docs.perl6.org/language/concurrency#Proc::Async ?

[18:02] <samcv> ok :)

[18:05] <p3rln00b> samcv: actually, with IRC::Client you don't even need Proc::Async. Just do a normal `run` of the command and return a Promise from the event handler.   So basically, it'd be something like multi method irc-to-me ($ where /^ trigger $/) { start { my $proc = run "command", "arg", :out, :in; $proc.in.print: "some input"; $proc.out.slurp-rest: :close; }}

[18:05] <p3rln00b> And it'll handle the non-blocking part.

[18:05] <samcv> hm

[18:08] *** rgrinberg left
[18:09] *** MARTIMM left
[18:12] <timotimo> has grown to 142 megs, but the growth has significantly slowed

[18:14] *** mohae_ joined
[18:15] <samcv> p3rln00b, do i need the where part? if i want every message to trigger it?

[18:16] <timotimo> in that case you don't need it

[18:17] <samcv> ok i'm probably doing this wrong but: http://vpaste.net/1BzIf

[18:18] *** mohae left
[18:18] <samcv> i've only ever used qqx/command/ before :|

[18:18] <samcv> well at least in perl6. i have done several other ways in perl5

[18:18] <p3rln00b> What's the wrong thing about it?

[18:18] *** pukku joined
[18:19] *** rmusial joined
[18:20] <samcv> it doesn't compile :')Unable to parse quote-words subscript; couldn't find right angle quote. at ./perlbot.pl6:58

[18:20] <samcv> ------> <BOL>⏏<EOL>   expecting any of:       postfix

[18:21] <timotimo> yeah

[18:21] <timotimo> you need to escape the < after $bot_username

[18:21] <pukku> Hi! I'm sorry to be a bother, but I have two quick questions: 1. is p6doc supposed to be the equivalent of perldoc, and if so, how do I make in work under the home-brew environment? 2. Is LWP::Simple the right place to start for downloading a JSON resource, or is there some other place I should start?

[18:21] <timotimo> m: my $test; say "hello >$test<";

[18:21] <camelia> rakudo-moar faba64: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse quote-words subscript; couldn't find right angle quote␤at <tmp>:1␤------> 3my $test; say "hello >$test<";7⏏5<EOL>␤    expecting any of:␤        postfix␤»

[18:21] <timotimo> m: my $test; say "hello >$test\<";

[18:21] <camelia> rakudo-moar faba64: OUTPUT«Use of uninitialized value $test of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤hello ><␤»

[18:21] <timotimo> m: my $test = "hi there"; say "hello >$test\<";

[18:21] <camelia> rakudo-moar faba64: OUTPUT«hello >hi there<␤»

[18:21] <timotimo> see the difference?

[18:22] <samcv> oo ok :) thanks

[18:22] <timotimo> that's because you can have this:

[18:22] *** P6Bot joined
[18:22] <timotimo> m: my %dada = foo => "bar"; say "hello %dada<foo>"

[18:22] <camelia> rakudo-moar faba64: OUTPUT«hello bar␤»

[18:22] <geekosaur> < is a subscript character that does quoting, basically

[18:22] <samcv> ah, even in quotes. ok thanks :)

[18:22] <geekosaur> foo<x> is the same as foo{'x'}

[18:22] <samcv> yeah i know that, didn't know it applied in quotes too

[18:22] <p3rln00b> pukku: yeah, LWP::Simple is OK. But you may want to use HTTP::UserAgent for something where you can do proper error checking. You'll also need somethign like JSON::Fast for decoding JSON. For p6doc, yeah, eventually it's meant to be like perldoc, but right now it's much less developed

[18:22] <perlpilot> wouldn't be much good if they didn't work within double quoted strings.

[18:23] <p3rln00b> P6Bot: capit lulz this is awesome!

[18:23] <P6Bot> p3rln00b, LULZ THIS IS AWESOME!

[18:23] *** P6Bot left
[18:23] <geekosaur> well, one expects to be able to print/expand a particular list or hash element, not just the whole thing

[18:23] <p3rln00b> samcv: ^ that P6Bot is this code. Seems to work as far as starting a program and reading from it goes: https://gist.github.com/zoffixznet/51c0a924dd2338fd3ed58ed727fd208d

[18:24] *** sjoshi joined
[18:24] <[Coke]> m: say roundrobin.WHAT

[18:24] <camelia> rakudo-moar faba64: OUTPUT«(Seq)␤»

[18:24] * p3rln00b is a bit bummed $/ doesn't propagate to that start block :(

[18:25] <pukku> OK, thanks. I think there must be an issue with the homebrew environment for p6doc, because none of the examples seem to work (p6doc faqs, p6doc Str, etc.). Is there an online version that I can use to read the documentation for modules? Clicking on a module on modules.perl6.org takes me to the git repository, and nothing on docs.perl6.org seems obviously correct.

[18:25] <timotimo> pukku: very probably you're missing something in your $PATH

[18:26] *** Derperperd joined
[18:26] <p3rln00b> pukku: what do you mean nothing's obviously correct?

[18:26] <p3rln00b> pukku: you can try using http://modules.zef.pm/modules for module docs.

[18:27] <pukku> timotimo: probably; I think the homebrew environment may be weird because it's trying to install things in their own directories. I may play around with this later, when I have more time.

[18:27] <p3rln00b> samcv: you also may want to use irc-privmsg-channel or some other event if you want to listen to all channel traffic and not just commands addressed to the bot.

[18:28] <samcv> yeah

[18:28] <p3rln00b> Event map: https://github.com/zoffixznet/perl6-IRC-Client/blob/master/docs/02-event-reference.md#event-map

[18:29] <pukku> p3rln00b: docs.perl6.org seems to be all about the core language, not modules, which is quite fair. The second link looks like it would be correct, except that I guess LWP::Simple doesn't have POD? I'll have to look at the source. Oh well.

[18:29] <pukku> Thanks for all the help!

[18:30] <p3rln00b> pukku: yup. Just checked. LWP::Simple's author is a lazy bum who wrote no docs :) There are a couple of examples though: https://github.com/perl6/perl6-lwp-simple/tree/master/bin

[18:37] *** cdg left
[18:37] *** rgrinberg joined
[18:43] <smls> Do we have something like Perl 5's `use warnings FATAL => ...` ?

[18:43] <samcv> p3rln00b, how do i do processing by line on the output? http://vpaste.net/82rWI

[18:43] <timotimo> we have "use fatal"

[18:44] <timotimo> not sure it's the same thing

[18:44] <timotimo> other than that you can "CONTROL { when CX::Warn { die $_ } }"

[18:44] <timotimo> hm. will probably have to die with something else than the $_

[18:44] <smls> m: use fatal;  say "" ~ Nil;  say "alive"

[18:44] <camelia> rakudo-moar faba64: OUTPUT«Use of Nil in string context␤  in block <unit> at <tmp> line 1␤␤alive␤»

[18:45] <p3rln00b> hehe

[18:45] <geekosaur> that doesn't affect warnings, it affects `fail`

[18:46] *** maybekoo2 joined
[18:46] <geekosaur> which normally throws when sunk or doesn't throw if introspected for fail/success state, but with "use fatal" in scope throws immediately

[18:46] <p3rln00b> samcv: your code doesn't make any sense :) The start {} block starts a non-blocking promise. And you're not setting your $line to anything.

[18:46] *** acrussell left
[18:46] <samcv> yes i know :)

[18:46] <samcv> how do i set my line to something :)

[18:46] <smls> m: say "" ~ Nil;  say "alive";  CONTROL { when CX::Warn { die $_ } }

[18:46] <camelia> rakudo-moar faba64: OUTPUT«Use of Nil in string context␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:47] <smls> ^^ seems to work, thanks timotimo

[18:48] <p3rln00b> samcv: I suspect you want to   .out.slurp-rest(:close).lines.grep(*.starts-with: "%").map: {$.irc.send: :where($channel) :what(.substr: 1)};

[18:48] <samcv> ok i was thinking something.lines

[18:48] <samcv> but i wasn't sure the exact syntax

[18:49] <p3rln00b> The .out.slurp-rest(:close) gives you the STDOUT of the program you're running.

[18:49] <samcv> ah ok

[18:49] *** acrussell joined
[18:50] *** ocbtec left
[18:50] <samcv> wait p3rln00b what variables does that put it into $_ is that where the lines go into?

[18:51] <samcv> because i sometimes need to process the line too.

[18:51] <samcv> if it's a pm the synax is q($) . $pm_who . q(%) . $pm_text . "\n"

[18:51] *** AlexDaniel joined
[18:51] <p3rln00b> samcv: you can do processing in the .map block. The $_ is the current line

[18:51] *** sufrostico left
[18:52] *** girafe joined
[18:52] <p3rln00b> .out.slurp-rest(:close) gives you all of STDOUT, .lines breaks it up into lines, .grep filters for those that start with '%', .map (in this case) removes the '%' and sends that to channel

[18:52] <samcv> ok. and this whole thing will leave the script running after it's done?

[18:52] <samcv> or does it close it?

[18:53] <samcv> the close is confusing me

[18:53] <p3rln00b> samcv: which script, the program you're starting?

[18:53] <samcv> yes

[18:54] <p3rln00b> Yeah, it'll close it. :}

[18:54] <samcv> aww

[18:54] <p3rln00b> Does the program's output give you the channel where to send the message to?>

[18:55] <samcv> well it has %Linetoprinttochannel, or $nick%linetotellthatnick

[18:56] <p3rln00b> So you don't plan to have this bot running in multiple channels, then?

[18:56] <samcv> idealy i want each call to irc-privmsg-channel to check if the script has been been modified when irc-privmsg-channel is called and then if so to reloa'd it

[18:56] <samcv> nope

[18:56] <samcv> but i could always change it to have additional parameters anyway

[18:56] <samcv> that's just how it works atm

[18:56] *** ocbtec joined
[18:56] <samcv> i could just change it to always do $channel/nick%message and then print to channel if it starts with a hash

[18:57] <samcv> or ampersand

[18:57] <samcv> tho freenode doesn't have ampersand channels but

[18:57] *** sjoshi left
[18:57] <dalek> doc: a85f4dd | coke++ | doc/HomePage.pod6:

[18:57] <dalek> doc: use standard spelling

[18:57] <dalek> doc: review: https://github.com/perl6/doc/commit/a85f4dd2a3

[18:58] <dalek> doc/spellcheck: 6b15254 | coke++ | xt/.aspell.pws:

[18:58] <dalek> doc/spellcheck: more words

[18:58] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/6b1525430d

[18:58] <dalek> doc/spellcheck: a85f4dd | coke++ | doc/HomePage.pod6:

[18:58] <dalek> doc/spellcheck: use standard spelling

[18:58] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/a85f4dd2a3

[18:58] <dalek> doc/spellcheck: 7bb820d | coke++ | doc/HomePage.pod6:

[18:58] <dalek> doc/spellcheck: Merge branch 'master' into spellcheck

[18:58] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/7bb820d378

[18:58] <dalek> doc/spellcheck: c99738b | coke++ | xt/.aspell.pws:

[18:58] <dalek> doc/spellcheck: more words

[18:58] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/c99738ba33

[18:58] <samcv> i mean could we start the script outside of irc-privmsg and have that going and have some way

[18:58] <samcv> to to print to the channel if you get output from the second script

[18:58] *** sufrostico joined
[18:58] <p3rln00b> samcv: one way to do it is to use irc-started event to start a Proc::Async with your script and store it in an attribute of the plugin class. Tap its stdout and add the output processor to it and you'll have $.irc.send: in it to send the output where you want it to. In irc-privmsg-channel send input to the Proc and return Nil from handler.   so it'd be something like $!proc.write: $e.text; Nil

[18:58] <samcv> and to write stdin on the script to the channel messages

[19:01] <samcv> i think i'm going to take a nap. then i'll do some more learning about attributes and some more about perl6 and objects and such

[19:02] <samcv> i haven't really done any object oriented programming before, but now is as good a time to learn as any

[19:03] <p3rln00b> samcv: untested, but something like this: https://gist.github.com/zoffixznet/97e56682494761d923eb756a64f322cc

[19:03] *** amalia_ joined
[19:03] <dalek> doc: a3d2dff | coke++ | doc/Language/experimental.pod6:

[19:03] <dalek> doc: fix typo

[19:03] <dalek> doc: review: https://github.com/perl6/doc/commit/a3d2dff56f

[19:03] <samcv> ok, thank you so much for all yor help p3rln00b 

[19:04] <samcv> i've been trying to learn some basic perl6 the last few days and now that i'm retrofitting my irc bot i think this will be a good chance to learn more

[19:04] <p3rln00b> samcv: actually this one. irc-started is triggered before we're connected: https://gist.github.com/zoffixznet/2f028fa4e1fa45e90c535c4ff34beab8

[19:04] <samcv> wouldn't be the worst thing ever if it started the script early. but thanks :)

[19:05] <p3rln00b> So here we use irc-connected and setup $!proc only if it's not already setup

[19:05] <pukku> Would it be reasonable to ask that someone look at a small program I wrote in Perl 6 to see if there are ways to make it more perl6-y?

[19:05] <p3rln00b> pukku: yes, ask away

[19:06] *** labster joined
[19:07] <pukku> Thanks! I put it at https://gist.github.com/remorse/896cb98f070b451c9a001dcdd9b6674d . It's just a small program to write an HTML file for printing out XKCD cartoons that I like. I got tired of filling out the various things myself, and thought this would be a good way to dip my toes into Perl6...

[19:08] <p3rln00b> My EYES!

[19:08] <p3rln00b> Just kidding :}

[19:09] <pukku> Hopefully it's not that bad :-)

[19:10] <p3rln00b> p3rln00b: looks alright to me. I'd use more chaining and interpolation though. Like this block https://gist.github.com/remorse/896cb98f070b451c9a001dcdd9b6674d#file-create_printable_xkcd-pl6-L11-L17 I'd write as just my $info = from-json LWP::Simple.new.get: "https://www.xkcd.com/$comic/info.0.json"

[19:10] *** sjoshi joined
[19:11] <dalek> doc: fd24062 | coke++ | doc/Language/modules-extra.pod6:

[19:11] <dalek> doc: use slightly preferred variant

[19:11] <dalek> doc: review: https://github.com/perl6/doc/commit/fd24062acb

[19:11] <geekosaur> why are you talking to yourself :p

[19:11] <p3rln00b> I'm a good company :P

[19:12] <p3rln00b> pukku: ^ that was meant to be for you :P

[19:12] <pukku> Thanks! I inferred that, and am trying it out...

[19:14] <pukku> Cool -- the examples weren't clear if I could chain calls to new and get for LWP::Simple, but it works just fine.

[19:14] *** FROGGS left
[19:14] <pukku> I guess that I could get rid of the "$fname" variable as well then, and just put the replace inline?

[19:14] *** dwarring joined
[19:15] <pukku> p3rln00b: sorry, I guess I should prefix these to you...

[19:15] <harmil_wk> I just came upon the behavior of MAIN with respect to formulating the program name into the default usage.

[19:16] <harmil_wk> Is there a reason that the dirname prefix of the script filename is stripped only when the script is in the PATH?

[19:16] *** andrzejku joined
[19:17] *** Ven_ joined
[19:17] <p3rln00b> pukku: you could, though the replace is complex enough that it can be left on its own. You could write as spurt "$outdir$info<safe_title>.lc.subst(/\W/, '_', :g).html", $output_text;

[19:17] <p3rln00b> pukku: this is also an option: spurt "$outdir$_.html", $output_text given $info<safe_title>.lc.subst: /\W/, '_', :g;

[19:18] <smls> harmil_wk: Well, it's called a "Usage" message, so I guess it prints the name/path you actually have to use to run the program...

[19:19] *** wamba left
[19:19] <pukku> p3rln00b: that last one is interesting. I think you're correct that it gets too complex to make it entirely in the quotes -- I think I would get confused that '.html' doesn't trigger an error. Can "given" as a postfix operator assign to a named variable, or only to $_?

[19:19] *** wamba joined
[19:19] <harmil_wk> Interesting take. I never thought of the usage message as being that literal, but I guess that's a better answer than none.

[19:19] <p3rln00b> pukku: only to $_

[19:20] <p3rln00b> m: { $^foo.say } given 42;

[19:20] <camelia> rakudo-moar faba64: OUTPUT«42␤»

[19:20] <p3rln00b> Oh, well, you can do that, apparently.

[19:20] <p3rln00b> (the block curlies are needed)

[19:20] <p3rln00b> But then, may as well use prefix given

[19:21] <pukku> Cool

[19:21] <pukku> p3rln00b: (sorry, I'm still getting the hang of prefixing things)

[19:21] *** rgrinberg left
[19:26] <pukku> p3rln00b: For the calls to the template engine, would it be more idiomatic to do `given ($tmpl) { .find('title').text(...); .find('body h1').text(...); ... }`?

[19:27] <p3rln00b> pukku: given ($tmpl) { .('title')... ; .('body h1') will likely work

[19:27] *** darutoko left
[19:28] <dalek> doc/spellcheck: 90a0b05 | coke++ | xt/.aspell.pws:

[19:28] <dalek> doc/spellcheck: moar words

[19:28] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/90a0b058fd

[19:28] <dalek> doc/spellcheck: a3d2dff | coke++ | doc/Language/experimental.pod6:

[19:28] <dalek> doc/spellcheck: fix typo

[19:28] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/a3d2dff56f

[19:28] <dalek> doc/spellcheck: f13065d | coke++ | doc/Language/experimental.pod6:

[19:28] <dalek> doc/spellcheck: Merge branch 'master' into spellcheck

[19:28] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/f13065d9ff

[19:28] <dalek> doc/spellcheck: 5541431 | coke++ | xt/aspell.t:

[19:28] <dalek> doc/spellcheck: add overview comment, search only docs

[19:28] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/5541431b5e

[19:28] <dalek> doc/spellcheck: 24bbc64 | coke++ | xt/.aspell.pws:

[19:28] <dalek> doc/spellcheck: more words

[19:28] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/24bbc6456b

[19:28] <dalek> doc/spellcheck: fd24062 | coke++ | doc/Language/modules-extra.pod6:

[19:28] <dalek> doc/spellcheck: use slightly preferred variant

[19:28] <moritz> p3rln00b, DrForr: Shall we resurrect #perl6book?

[19:28] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/fd24062acb

[19:28] <dalek> doc/spellcheck: bf0fa6c | coke++ | doc/Language/modules-extra.pod6:

[19:28] <dalek> doc/spellcheck: Merge branch 'master' into spellcheck

[19:28] <dalek> doc/spellcheck: review: https://github.com/perl6/doc/commit/bf0fa6c630

[19:29] <p3rln00b> moritz: sure

[19:30] <DrForr> Why not.

[19:31] <pukku> p3rln00b: nice! That seems much clearer to me.

[19:33] *** rgrinberg joined
[19:34] <pukku> p3rln00b: I just tried something, and I'm now getting an error -- I changed `.attrib(src => $info<img>)` to `.attrib('src' => $info<img>)` (i.e., I added quotes around the 'src' part). It now fails with "too many positionals passed; expected 1 argument but got 2". I'm not sure why adding quotes changes this? Where would I look in the documentation?

[19:34] *** yqt joined
[19:35] <p3rln00b> pukku: because without quotes it's a named  argument, but with quotes it's a positonal argument (a Pair)

[19:35] <geekosaur> is this documented as a gotcha?

[19:35] * p3rln00b shrugs

[19:35] <geekosaur> (this business is an outright hack, sadly)

[19:35] * p3rln00b likes it

[19:35] <p3rln00b> Has that distinct perlish taste to it :)

[19:36] <geekosaur> this strikes me as the sort of perl-ism that perl 6 was trying to get rid of, though :/

[19:37] <mst> geekosaur: I dunno, auto-quoting and symbol/string equivalency are a lot more regular in 6

[19:39] <p3rln00b> pukku: FWIW, you can write it as   .attrib: :src($info<img>)

[19:39] *** ilbot3 left
[19:39] <arnsholt> geekosaur: It's a somewhat hairy problem

[19:40] <geekosaur> I know

[19:40] *** ilbot3 joined
[19:40] <arnsholt> On the one hand, you want the convenient syntax for passing named parameters, on the other sometimes a Pair is a positional =(

[19:40] <pukku> p3rln00b: Are you sure that without the quotes it's a named attribute? The method is defined as `method attrib(*%attribs)`, which I think must mean that it's taking pairs?

[19:40] <arnsholt> Programming in SmallTalk these days, I'm coming up against something with a similar-ish vibe

[19:41] <geekosaur> sometimes I wish it had been decided to use the :foo(bar) as named param and foo => bar as Pair

[19:41] <p3rln00b> pukku: it's taking any number of named args

[19:41] <geekosaur> changing the quoting on foo vs. 'foo' is just Weird

[19:41] <p3rln00b> pukku: * is a slurpy and slurpy on a hash takes named things

[19:41] <arnsholt> The way control structures are implemented in plain ST is really neat, but it makes it really awkward to make if/elsif/elsif/elsif/else or case-like structures

[19:41] <pukku> p3rln00b: ok. I'm confused why an arbitrary set of pairs isn't a hash, but I'll take your word for it.

[19:42] <p3rln00b> m: class { method attrib(*@pos, *%named) { dd [ @pos, %named] } }.attrib: foo => "bar"

[19:42] <camelia> rakudo-moar faba64: OUTPUT«[[], {:foo("bar")}]␤»

[19:42] <p3rln00b> m: class { method attrib(*@pos, *%named) { dd [ @pos, %named] } }.attrib: "foo" => "bar"

[19:42] <camelia> rakudo-moar faba64: OUTPUT«[[:foo("bar")], {}]␤»

[19:42] <arnsholt> geekosaur: I guess, but those constructs are supposed to be equivalent too =(

[19:42] <p3rln00b> pukku: ^

[19:42] <geekosaur> yes, that's the point. we outclevered ourselves into a syntax trap :/

[19:42] <p3rln00b> pukku: because Pair is a type. It's also used in types other than a Hash, so to me it makes good sense.

[19:44] <arnsholt> Right, right

[19:44] <arnsholt> I see what you mean now

[19:44] <pukku> p3rln00b: ok

[19:45] <pukku> p3rln00b: does this mean that pairs are flattened in function calls? Or why did the error become that it received two arguments?

[19:45] <p3rln00b> pukku: you got the error because the method isn't looking for any positionals

[19:46] <p3rln00b> m: class { method attrib(*%named) { dd [ %named] } }.attrib: "foo" => "bar"

[19:46] <camelia> rakudo-moar faba64: OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in method attrib at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[19:46] <smls> geekosaur: You're not the only one. I think lizmat wanted to actually make that happen before the 6.c release, but it was decided against.

[19:46] * p3rln00b & debugging IE8 problems for customer who apparently loves using insecure, unsupported software ~_~

[19:46] <geekosaur> arnsholt, basically the other discussion in here is the example of why it's a problem

[19:46] <arnsholt> Yeah, clearly

[19:47] <smls> geekosaur: I do like that the => syntax allows me to horizontally line up named args like this: https://gist.github.com/smls/fab2c620dc5fcf2af2a46d89b12e4a9d

[19:47] *** domidumont left
[19:48] *** urchin_ is now known as Urchin

[19:48] *** Urchin left
[19:48] *** Urchin joined
[19:48] <smls> I think I would have liked  `key: value`  even more, but that conflicts with the indirect method-call syntax, and possibly other things.

[19:48] <smls> s/key: value/named-argument: value/

[19:49] <pukku> p3nrln00b: hm. So why isn't the error message 'too many positionals: expected 0, but got 1'?

[19:49] <geekosaur> yeh

[19:49] <geekosaur> pukku, the other positional is "self"

[19:50] <pukku> geekosaur: ah. OK, I see.

[19:52] *** sufrostico left
[19:55] *** cibs joined
[19:56] <pukku> p3nln00b: Thanks muchly for helping me! I have to run off now, but I think I've got a (very slight) bit more familiar with perl6. And my small program looks a lot nicer!

[20:00] *** pukku left
[20:04] *** cdg joined
[20:07] *** Derperperd left
[20:13] *** cygx left
[20:15] *** rgrinberg left
[20:21] *** bjz joined
[20:21] *** sjoshi left
[20:21] *** perlawhirl left
[20:24] *** sjoshi joined
[20:25] *** andrzejku left
[20:32] *** TEttinger joined
[20:34] *** Ven_ left
[20:35] *** Ven_ joined
[20:37] *** rgrinberg joined
[20:39] *** rgrinberg left
[20:43] *** rindolf left
[20:47] *** wamba left
[20:49] *** Ven_ left
[20:51] *** bjz left
[20:53] *** bjz joined
[20:54] *** Ven_ joined
[20:55] *** Ven_ left
[20:56] <[Coke]> hurm. aspell doesn't like "pragma's", but is ok with 'pragma' and 'pragmas'

[20:57] <[Coke]> guess you need to be really explicit when you're adding to a skiplist

[20:58] *** rgrinberg joined
[20:58] *** sjoshi left
[21:00] * geekosaur agrees with aspell, actually

[21:00] <geekosaur> will sometimes write pragma-s

[21:00] <jonadab> [Coke]: In order to know that attaching the clitic makes any sense, you have to know that the word is a noun.

[21:01] <jonadab> Either that or list the possessive form separately, which is probably what most spelling dictionaries do.

[21:01] <dalek> doc: 6f130d4 | coke++ | doc/Type/Backtrace.pod6:

[21:01] <dalek> doc: avoid typo, change word slightly

[21:01] <dalek> doc: review: https://github.com/perl6/doc/commit/6f130d483d

[21:01] <[Coke]> jonadab: yup - hadn't realized I had already listed the other two in the local dict.

[21:02] *** skids left
[21:03] *** rgrinberg left
[21:04] <jonadab> [Coke]: The really interesting question is, why isn't the plural pragmata?

[21:04] <jonadab> I mean, it isn't; I've never seen it as "pragmata" ever.  But I don't know _why_ it isn't.

[21:06] *** Urchin left
[21:06] <[Coke]> I for one am happy not to encourage pluralizations based on where we stole the word from.

[21:06] <geekosaur> I have but usually from people trying to sound clever

[21:08] *** rgrinberg joined
[21:09] *** rgrinberg left
[21:10] *** amalia__ joined
[21:10] *** kurahaupo_ joined
[21:10] <harmil_wk> geekosaur: I think that's "clevera"

[21:11] *** acrussell_ joined
[21:11] <[Coke]> clevera sounds like a FF spell.

[21:11] *** perlpilot_ joined
[21:11] *** dylanwh_ joined
[21:12] *** smls_ joined
[21:13] *** ChoHag_ joined
[21:13] *** BinGOs_ joined
[21:14] *** telex left
[21:14] <perlpilot_> jonadab: "pragmata" is in the Perl 5 docs in several places

[21:14] *** telex joined
[21:14] *** kentnl joined
[21:14] *** bjz left
[21:15] *** Xliff_ joined
[21:15] *** d4l3k_ joined
[21:16] *** huggable_ joined
[21:16] *** jargan joined
[21:17] *** dj_goku_ joined
[21:17] *** BinGOs left
[21:17] *** SourceBaby_ joined
[21:18] *** BinGOs_ is now known as BinGOs

[21:18] *** BinGOs left
[21:18] *** BinGOs joined
[21:18] *** JimmyZ_ joined
[21:18] *** andrewalker_ joined
[21:19] *** amalia_ left
[21:19] *** acrussell left
[21:19] *** TeamBlast left
[21:19] *** Matias[m] left
[21:19] *** M-Illandan left
[21:19] *** tadzik left
[21:19] *** Guest18866 left
[21:19] *** ilmari[m] left
[21:19] *** Matthew[m] left
[21:19] *** smls left
[21:19] *** dalek left
[21:19] *** buggable left
[21:19] *** kurahaupo__ left
[21:19] *** andrewalker left
[21:19] *** ChoHag left
[21:19] *** flaviusb left
[21:19] *** perlpilot left
[21:19] *** kent\n left
[21:19] *** huggable left
[21:19] *** Undercover left
[21:19] *** SourceBaby left
[21:19] *** NeuralAnomaly left
[21:19] *** synopsebot6 left
[21:19] *** JimmyZ left
[21:19] *** dylanwh left
[21:19] *** acrussell_ is now known as acrussell

[21:19] *** JimmyZ_ is now known as JimmyZ

[21:19] *** amalia__ is now known as amalia_

[21:19] *** ilmari[m] joined
[21:19] *** Matias[m] joined
[21:20] *** d4l3k_ is now known as dalek

[21:20] *** ChanServ sets mode: +v dalek

[21:20] *** ocbtec_ joined
[21:20] *** jast left
[21:20] *** dj_goku left
[21:20] *** ocbtec left
[21:20] *** Xliff__ left
[21:20] *** Matthew[m] joined
[21:21] *** mr-foobar left
[21:22] *** Guest18866 joined
[21:22] *** mr-foobar joined
[21:23] *** hobbs left
[21:24] *** kurahaupo_ left
[21:24] *** cdg left
[21:25] *** flaviusb joined
[21:25] *** tadzik joined
[21:27] *** M-Illandan joined
[21:28] *** hobbs joined
[21:28] *** clkao joined
[21:28] *** SmokeMachine____ joined
[21:28] *** olinkl joined
[21:28] *** notbenh_ joined
[21:28] *** mephinet joined
[21:28] *** p3rln00b joined
[21:28] *** mindos joined
[21:28] *** jnap_ joined
[21:28] *** DrParis joined
[21:28] *** committable6 joined
[21:28] *** solarbunny joined
[21:28] *** TeamBlast joined
[21:46] *** RabidGravy left
[22:07] *** rgrinberg joined
[22:07] <jonadab> perlpilot_: Huh.  Interesting.

[22:08] *** cpage_ left
[22:09] *** smls_ left
[22:09] <jonadab> [Coke]: My preferred rule is, if the singular form has an obvious clear singular ending on it that gives away the etymology and declension, then the plural form should follow that.  Otherwise not.

[22:10] <jonadab> So I don't really care where the root _came from_ if the singular form is Anglicized:  the plural form should be too in that case.

[22:10] <jonadab> It is on this basis that I reject the ridiculous "octopodes" -- because if that were the plural, the singular should be "octopous", and it ain't.

[22:11] *** ocbtec_ left
[22:11] <jonadab> (I accept both "octopuses" and "octopi".)

[22:11] <profan> octopoudies

[22:12] <TEttinger> cephalapods.

[22:12] <TEttinger> cephalopods.

[22:12] <TEttinger> escape artist jar-dwellers

[22:15] <TEttinger> https://en.wikipedia.org/wiki/Paul_the_Octopus Love these things.

[22:20] *** acrussell left
[22:23] *** _slade_ joined
[22:24] *** perlawhirl joined
[22:26] *** Derperperd joined
[22:27] *** lostinfog joined
[22:27] *** lostinfog left
[22:27] <timotimo> escape artist jar-dweller sounds like a java malware

[22:35] *** cpage_ joined
[22:36] *** kurahaupo left
[22:47] *** girafe left
[22:49] *** Herby_ joined
[22:49] <Herby_> o/

[22:49] *** Herby_ is now known as 7IZAAARNG

[22:49] *** cdg joined
[22:51] <7IZAAARNG> ?

[22:53] *** 7IZAAARNG is now known as Herby__

[22:55] <geekosaur> services outage => weird nick renames

[22:55] <Herby__> ahh ok

[22:56] <Herby__> I can now say that I'm using Perl 6 in production. Wrote a parser for a coworker who was tallying up months worth of data by hand

[22:58] <Herby__> progress!

[22:59] <timotimo> oh wow

[22:59] <timotimo> yeah, that helps

[23:00] *** cdg left
[23:05] *** firstdayonthejob left
[23:15] *** cdg joined
[23:17] <[Coke]> Herby__++

[23:25] *** BenGoldberg joined
[23:42] *** Derperperd left
[23:46] *** cdg left
