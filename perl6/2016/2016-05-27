[00:01] <raydiak> in a casual test of 1e5 iterations on my old cheap laptop, the regex method took 7s, the bag/junction method took 19s...

[00:01] <raydiak> m: say so .elems == .unique.elems given "CasdfghjkC234".comb.list

[00:01] <camelia> rakudo-moar 1ab1fb: OUTPUT«False␤»

[00:01] <raydiak> ...and ^ took almost 3s

[00:05] *** pierre joined
[00:07] <geekosaur> huh. I was playing with something resembling that

[00:08] <geekosaur> I would have expected the Bag to be faster though. (optimization opportunity?)

[00:10] *** pierre left
[00:11] <AlexDaniel> raydiak: what about

[00:12] <AlexDaniel> m: say [==] 1, |‘abcde’.comb.Bag.values

[00:12] <camelia> rakudo-moar 1ab1fb: OUTPUT«True␤»

[00:12] <AlexDaniel> m: say [==] 1, |‘abcdce’.comb.Bag.values

[00:12] <camelia> rakudo-moar 1ab1fb: OUTPUT«False␤»

[00:12] <AlexDaniel> raydiak: how long does that take? Perhaps junction is making it slow

[00:13] <raydiak> ouch...idk, it's still trying :P

[00:14] <AlexDaniel> :(

[00:15] <raydiak> oh, my bad, I was using 1e4 iterations the whole time. it took 17s

[00:16] <AlexDaniel> so, faster than junction, right? :)

[00:16] <AlexDaniel> but yeah, then .unique is the way to go I guess

[00:16] <raydiak> by less than 10% but yes :)

[00:24] <raydiak> m: say so 'CasdfghjkC234'.comb.repeated; say so 'Casdfghjkc234'.comb.repeated

[00:24] <camelia> rakudo-moar 1ab1fb: OUTPUT«True␤False␤»

[00:24] <raydiak> ^ got it down to 1.5s

[00:28] *** cpage_ joined
[00:28] *** hobbs joined
[00:28] *** hobbs left
[00:28] *** hobbs joined
[00:29] *** hoelzro joined
[00:30] *** maybekoo2 left
[00:32] *** huggable joined
[00:33] *** pierre joined
[00:33] <AlexDaniel> raydiak: ah! .repeated!

[00:33] <AlexDaniel> good to know

[00:33] <AlexDaniel> kalkin-: ↑ !

[00:35] <AlexDaniel> raydiak++

[00:35] <raydiak> I didn't know about it before today either... (documentation writers)++

[00:38] <AlexDaniel> m: say <4 8 15 16 23 42>.repeated(as => { $_ div 9 })

[00:38] <camelia> rakudo-moar 1ab1fb: OUTPUT«(8 16)␤»

[00:38] <kalkin-> awesome, thanks :)

[00:39] *** daxim left
[00:40] <kalkin-> Why can't I do subset MyType  of Str where *.comb.repeated and *.chars >= 16? It always just evaluates the first condition

[00:41] <geekosaur> reuse of * doesn't work like that

[00:41] <geekosaur> something like $^a may work better?

[00:42] <kalkin-> geekosaur: the per6 documentation doesn't find anything if i search for $^

[00:42] <geekosaur> more specifically, each * refers to a distinct parameter

[00:42] *** mspo joined
[00:43] <geekosaur> http://doc.perl6.org/language/variables#The_%5E_Twigil

[00:44] <kalkin-> geekosaur: thanks. will dig in to that

[00:44] <AlexDaniel> m: subset MyType of Str where !.comb.repeated && .chars >= 3; my MyType $x = ‘abc’

[00:44] <camelia> rakudo-moar 1ab1fb: ( no output )

[00:44] <AlexDaniel> m: subset MyType of Str where !.comb.repeated && .chars >= 3; my MyType $x = ‘ab’

[00:44] <camelia> rakudo-moar 1ab1fb: OUTPUT«Type check failed in assignment to $x; expected MyType but got Str ("ab")␤  in block <unit> at /tmp/eQCtIK7p5z line 1␤␤»

[00:44] <AlexDaniel> m: subset MyType of Str where !.comb.repeated && .chars >= 3; my MyType $x = ‘abca’

[00:44] <camelia> rakudo-moar 1ab1fb: OUTPUT«Type check failed in assignment to $x; expected MyType but got Str ("abca")␤  in block <unit> at /tmp/n4r78efpe5 line 1␤␤»

[00:44] <AlexDaniel> kalkin-: ↑

[00:45] <raydiak> "where { .comb.repeated && .chars >= 16 }" should work

[00:45] <raydiak> oh beat me to :)

[00:45] <raydiak> got a little lag again today

[00:46] <kalkin-> AlexDaniel: Thanks.

[00:46] <kalkin-> But just to clarify, when would it be usefull to use * in a subset where?

[00:47] <AlexDaniel> … never?

[00:48] <kalkin-> hmm, where did i pick it up?

[00:49] <AlexDaniel> not that it doesn't work, it does. But I am not sure why would you want to use it

[00:53] <geekosaur> it gets used in a lot of examples

[00:53] <kalkin-> m: subset MyType of Str where !.comb.repeated && .chars >= 5; my MyType $x = ('a'...'b').join

[00:53] <camelia> rakudo-moar 1ab1fb: OUTPUT«Type check failed in assignment to $x; expected MyType but got Str ("ab")␤  in block <unit> at /tmp/zQffnn8PUt line 1␤␤»

[00:53] <kalkin-> hmm, for some reason this worked in the repl. may be I did a typo in repl

[00:56] <AlexDaniel> m: subset MyType of Str where (!.comb.repeated or fail ‘Non-unique characters found’ ) && (.chars >= 3 or fail ‘Too short string’); my MyType $x = ‘abca’

[00:56] <camelia> rakudo-moar 1ab1fb: OUTPUT«Non-unique characters found␤  in any accepts_type at gen/moar/m-Metamodel.nqp line 3431␤  in block <unit> at /tmp/VzVWyb_dj1 line 1␤␤»

[00:56] <AlexDaniel> m: subset MyType of Str where (!.comb.repeated or fail ‘Non-unique characters found’ ) && (.chars >= 3 or fail ‘Too short string’); my MyType $x = ‘ab’

[00:56] <camelia> rakudo-moar 1ab1fb: OUTPUT«Too short string␤  in any accepts_type at gen/moar/m-Metamodel.nqp line 3431␤  in block <unit> at /tmp/wIHm_Sf6la line 1␤␤»

[00:56] <kalkin-> m: subset MyType of Str where !.comb.repeated and .chars >= 5; my MyType $x = ('a'...'b').join

[00:56] <camelia> rakudo-moar 1ab1fb: ( no output )

[00:56] <kalkin-> I had and in my code

[00:56] <AlexDaniel> the messed up line number makes it a little bit less useful

[00:59] <kalkin-> From reading the docs i looks to me that && and 'and' should be the same. The later one is just looser

[01:04] *** cdg left
[01:09] *** matiaslina left
[01:17] *** gorgonzola joined
[01:19] *** AlexDaniel left
[01:33] <dalek> doc: 3d562b0 | (Zoffix Znet)++ | doc/Language/variables.pod:

[01:33] <dalek> doc: Point out a way to detect OS in use

[01:33] <dalek> doc: review: https://github.com/perl6/doc/commit/3d562b0cff

[01:33] *** kalkin- left
[01:33] *** kalkin-_ joined
[01:37] *** molaf left
[01:42] *** jack_rabbit joined
[01:45] *** BenGoldberg joined
[01:45] *** ilbot3 left
[01:47] *** ilbot3 joined
[01:49] *** molaf joined
[02:04] *** araujo_ left
[02:05] *** gorgonzola left
[02:16] *** BenGoldberg left
[02:20] *** gorgonzola joined
[02:22] *** kid511 joined
[02:22] *** kid51 left
[02:26] *** kid511 left
[02:31] <dalek> ecosystem: 20788c0 | (Zoffix Znet)++ | META.list:

[02:31] <dalek> ecosystem: Add Terminal::Width

[02:31] <dalek> ecosystem: 

[02:31] <dalek> ecosystem: Get the current width of the terminal: https://github.com/zoffixznet/perl6-Terminal-Width

[02:31] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/20788c003d

[02:33] *** pierre left
[02:34] *** pierre joined
[02:37] *** kurahaupo joined
[02:42] *** BenGoldberg joined
[02:44] *** Celelibi left
[02:44] *** BenGoldberg left
[02:48] *** Celelibi joined
[02:49] *** gorgonzola left
[02:49] *** noganex_ joined
[02:52] *** noganex left
[02:54] *** lorem_perlsum joined
[02:54] *** lorem_perlsum left
[03:01] *** ssotka left
[03:06] *** pierre left
[03:11] *** |meta left
[03:18] *** Tonik joined
[03:19] *** pierre joined
[03:20] *** pierre left
[03:24] *** Tonik left
[03:24] *** pierre joined
[03:25] *** pierre left
[03:25] *** pierre joined
[03:25] <awwaiid> Sadly, my StrangeLoop talk was not accepted :(

[03:26] *** pierre left
[03:27] *** Zoffix joined
[03:27] <TEttinger> not hip enough?

[03:27] *** pierre joined
[03:27] <TEttinger> I don't even know what StrangeLoop is

[03:28] *** zakharyas joined
[03:28] <Zoffix> Are there any tricks for starting a process outside of "current environment". My puzzle: when my stuff is run with `prove` it runs it in a harness and calling run('tput', 'cols') always returns 80. I want it to somehow give me the actual value of the actual terminal. Any tricks?

[03:28] *** pierre left
[03:28] <yoleaux> 26 May 2016 22:01Z <lizmat> Zoffix: noted

[03:29] *** pierre joined
[03:30] *** pierre left
[03:32] <geekosaur> might try removing COLUMNS and LINES from %*ENV?

[03:33] <ugexe> you can pass in :$env to run, so combine with ^

[03:33] <geekosaur> otherwise it may be using a pty, and good luck finding the original tty in that case

[03:35] <awwaiid> TEttinger: StrangeLoop is an amazing and awesome conference, and the Perl 6 communit should be ALL over it, but somehow isn't. They typically even have an "emerging languages" track and lots of very very relevant topics

[03:35] <Zoffix> I don't see those set at all. This is my entire %*ENV run under prove: https://gist.github.com/zoffixznet/a01721cab8c491428ad0c4f8328e775b

[03:35] *** cpage_ left
[03:36] <Zoffix> .oO(  PANTS => "ON".Str, .... dafuq? )

[03:36] <awwaiid> TEttinger: here are a bunch of videos from previous years of the StrangeLoop conference, lots of great stuff https://www.youtube.com/channel/UC_QIfHvN9auy2CoOdSfMWDw/videos

[03:36] <TEttinger> I guess I confuse it with HyperLoop, which seems like a massive hype generator for something that will probably become an easily-broken package transporter for Amazon

[03:36] <awwaiid> haha

[03:37] <TEttinger> "someone drove over the hyperloop again, guess we need to use planes to transport stuff for a while"

[03:38] *** cpage_ joined
[03:40] *** BenGoldberg joined
[03:40] *** zakharyas left
[03:41] <geekosaur> odd

[03:41] * geekosaur does not see any indication offhand that prove uses ptys...

[03:42] *** bitmap joined
[03:44] <ugexe> youre going to have to get it before prove spawns a new process and set it in an ENV yourself to use inside

[03:45] <Zoffix> Eh, can't do it. Was gonna use it in a test module, but I guess 80-col chars it is.

[03:45] <ugexe> but TAP.pm6 in rakudo might be able to do it better?

[03:45] <Zoffix> hm

[03:46] <Zoffix> No idea what TAP.pm6 is all about. I'm gonna table this for another day...

[03:47] <ugexe> its TAP::Harness (prove6) fwiw

[03:48] <geekosaur> "prove" runs tests for the TAP testing harness

[03:53] <ugexe> yeah, and i doubt `prove -e 'xxx'` is helping to make getting the original term width easy

[03:54] <geekosaur> oh, yeh

[03:55] <geekosaur> unless it opens /dev/tty it will be using $TERM default because stdout and possibly stdin are not terminals

[03:55] <geekosaur> (otoh there's your workaround to get the actual terminal size)

[03:55] *** skids joined
[03:56] *** pierre joined
[03:58] *** pierre left
[03:58] *** ssotka joined
[03:58] <Zoffix> I'll keep that in mind when I try to fix it, thanks.

[03:58] *** pierre joined
[03:59] *** pierre left
[04:01] *** khw left
[04:10] *** aries_liuxueyang left
[04:11] *** aries_liuxueyang joined
[04:15] <dalek> ecosystem: 03437c4 | (Zoffix Znet)++ | META.list:

[04:15] <dalek> ecosystem: Add Test::Notice

[04:15] <dalek> ecosystem: 

[04:15] <dalek> ecosystem: Display noticable messages to users during tests: https://github.com/zoffixznet/perl6-Test-Notice

[04:15] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/03437c44a1

[04:15] *** Zoffix left
[04:28] *** BenGoldberg left
[04:30] *** BenGoldberg joined
[04:32] *** huggable left
[04:34] *** BenGoldberg left
[04:35] *** Cabanossi left
[04:36] *** adu joined
[04:37] *** Cabanossi joined
[04:39] *** BenGoldberg joined
[04:44] *** BenGoldberg left
[04:45] *** sortiz left
[04:50] *** BenGoldberg joined
[04:51] *** tardisx joined
[04:51] *** tardisx left
[05:04] *** BenGoldberg left
[05:06] *** BenGoldberg joined
[05:07] *** willthechill left
[05:13] *** CIAvash joined
[05:13] *** BenGoldberg left
[05:14] *** Actualeyes left
[05:20] *** adu left
[05:22] *** sno left
[05:28] *** wamba joined
[05:31] *** Actualeyes joined
[05:35] *** kurahaupo left
[05:41] *** cpage_ left
[05:49] *** pierre joined
[05:57] *** domidumont joined
[05:59] *** azawawi joined
[06:01] <Xliff> Does perl6 allow you to create dynamic class methods?

[06:01] <azawawi> $perl6.say("good-morning")  # :)

[06:01] <Xliff> \o azawawi

[06:01] *** domidumont left
[06:01] *** domidumont joined
[06:03] <geekosaur> Xliff, meaning? you can add methods at runtime using the MOP (self.^add_method something or other, iirc)

[06:04] <Xliff> geekosaur: I have an API where the actual work done can be determined by the method name.

[06:05] <Xliff> So I want all method calls to an object to go through a dispatcher, without having to explicitly write every method.

[06:05] <geekosaur> FALLBACK method

[06:05] <Xliff> Thanks!

[06:07] *** maybekoo2 joined
[06:09] *** sno joined
[06:17] *** cpage_ joined
[06:24] *** pierre left
[06:24] *** domidumont left
[06:29] *** rindolf joined
[06:32] *** jack_rabbit left
[06:32] *** jack_rabbit joined
[06:33] <Xliff> What does this error message mean: "Cannot coerce to HTTP::UserAgent with named arguments"

[06:34] <Xliff> For this code: "$!http_client = HTTP::UserAgent(:$useragent); "

[06:34] <Xliff> Oh, nevermind.

[06:35] *** ssotka left
[06:40] *** rindolf left
[06:40] *** pierre joined
[06:40] *** firstdayonthejob left
[06:41] *** AgedBurley joined
[06:41] <AgedBurley> why does this give error:  for @xs <-> $x { $x = $x * $x }

[06:42] <AgedBurley> where: my @xs = <1,2,3,4,5,6>

[06:46] *** azawawi left
[06:51] *** cpage_ left
[06:56] <CIAvash> AgedBurley: You need to change @xs to 1,2,3,4,5,6 or <1 2 3 4 5 6>

[06:57] *** rindolf joined
[07:02] *** Amnez777 left
[07:20] *** domidumont joined
[07:21] <Xliff> I miss lcfirst.

[07:22] <Xliff> "$s.substr-rw(0, 1) = $s.substr(0, 1).lc" just isn't the same. 

[07:27] *** Azry joined
[07:27] *** AgedBurley left
[07:29] *** Azry_ left
[07:36] <wamba> m: say 13 %% 2

[07:36] <camelia> rakudo-moar 1ab1fb: OUTPUT«False␤»

[07:39] <wamba> m: say 13.2 % 5

[07:39] <camelia> rakudo-moar 1ab1fb: OUTPUT«3.2␤»

[07:45] <CIAvash> Xliff: this works apparently: $str.=samecase: 'a_'

[07:45] <Timbus> Xliff, you mean tc ?

[07:46] *** darutoko joined
[07:46] <Timbus> inverse of tc*

[08:04] <masak> morning, #perl6

[08:05] <masak> m: sub lcfirst($s) { $s.substr(0, 1).lc ~ $s.substr(1) }; say "FOO".&lcfirst()

[08:05] <camelia> rakudo-moar 1ab1fb: OUTPUT«fOO␤»

[08:05] <masak> Xliff: if you miss lcfirst, define it in your local scope.

[08:05] *** abraxxa joined
[08:06] <masak> personally, I think people are under-using the above technique.

[08:07] <masak> m: my method lcfirst() { self.substr(0, 1).lc ~ self.substr(1) }; say "FOO".&lcfirst()

[08:07] <camelia> rakudo-moar 1ab1fb: OUTPUT«fOO␤»

[08:07] <masak> ^ also works, and is perhaps more clear/purposeful

[08:07] <masak> m: my method lcfirst(Str $:) { self.substr(0, 1).lc ~ self.substr(1) }; say "FOO".&lcfirst(); say 42.&lcfirst()

[08:08] <camelia> rakudo-moar 1ab1fb: OUTPUT«fOO␤Type check failed in binding <anon>; expected Str but got Int (42)␤  in method lcfirst at /tmp/adwzdHuP_D line 1␤  in block <unit> at /tmp/adwzdHuP_D line 1␤␤»

[08:08] <masak> typechecking.

[08:08] <masak> (can't do `Str \self`, unfortunately, because `self` is already declared at that point in a method)

[08:14] *** rindolf left
[08:20] *** CIAvash left
[08:21] *** CIAvash joined
[08:22] *** Amnez777 joined
[08:25] *** MadcapJake left
[08:32] *** huggable joined
[08:39] *** rindolf joined
[08:39] *** RabidGravy joined
[08:49] <Xliff> CIAvash++ and masak++: Thanks!

[08:54] *** CIAvash left
[08:54] *** shlomif joined
[08:54] *** rindolf left
[08:54] *** shlomif is now known as rindolf

[09:00] *** devtom30 joined
[09:00] *** g4 joined
[09:04] *** araujo joined
[09:04] <RabidGravy> did the way that subtest print it's description change at some point in the last few weeks?

[09:05] <RabidGravy> it appears to be printing them out as if it was a "diag" instead of a test description

[09:06] <moritz> aye

[09:06] <moritz> maybe we should revert that part

[09:08] <moritz> ... done.

[09:10] <RabidGravy> cool, I've got a lot of tests which are heavy on the sub-tests because same tests repeated on different data

[09:10] *** ab6tract joined
[09:13] *** MadcapJake joined
[09:14] <ab6tract> hey again #perl6

[09:14] <masak> ab6tract! \o/

[09:14] <ab6tract> howdy masak!

[09:15] <ab6tract> nice to read you. hey, you wouldn't have any experience with casting Bufs to values, do you? 

[09:15] <masak> not particularly

[09:15] <ab6tract> i'm working on the Sereal port again, just sort of sketching it out in pure perl

[09:16] <moritz> ab6tract: iirc there was a thread about that on perl6-users in the last couple of weeks or months

[09:17] <ab6tract> https://gist.github.com/ab5tract/1835272892d9ee58cdfb0a1bcd34e5c7#file-gistfile1-txt

[09:19] *** Emeric joined
[09:19] <ab6tract> hmm, seems like nativecast might be promising

[09:21] <moritz> the thread was "Blobs and IEEE floating point", fwiw

[09:21] *** telex left
[09:22] <ab6tract> found it, thanks!

[09:22] *** telex joined
[09:28] *** pierre left
[09:28] *** iH2O joined
[09:34] *** willthechill joined
[09:37] *** AlexDaniel joined
[09:38] *** salv0 joined
[09:39] *** Azry left
[09:40] *** broquaint joined
[09:40] *** Actualeyes left
[09:44] *** pierre joined
[09:46] *** labster left
[09:48] *** iH2O left
[09:52] *** dalek left
[09:53] *** dalek joined
[09:53] *** ChanServ sets mode: +v dalek

[09:57] *** cognominal left
[09:57] *** cognominal joined
[09:59] *** Actualeyes joined
[10:01] *** wamba left
[10:06] *** wamba joined
[10:11] *** pierre left
[10:19] <Jonis> -w 4

[10:19] <Jonis> -w 4

[10:20] <Jonis> whoops, sorry

[10:24] *** ChoHag joined
[10:26] <tadzik> heh, a lot of stuff in C# 6 looks like taken straight from Perl 6 :)

[10:33] *** iH2O joined
[10:43] *** wamba left
[10:44] *** salv0 left
[10:48] *** iH2O left
[10:52] *** salv0 joined
[10:53] *** kaare_ joined
[10:53] *** ocbtec joined
[10:54] <masak> tadzik: do you have an example?

[10:54] <masak> or a url? :)

[10:56] *** grondilu joined
[10:58] *** llfourn left
[10:59] <tadzik> url: https://www.simple-talk.com/dotnet/.net-framework/whats-new-in-c-6/

[10:59] <tadzik> look for "null conditional"

[10:59] <tadzik> and "exception filters" :)

[11:00] *** johnchalekson joined
[11:03] <stmuk> . o O ( is jnthn moonlighting for M$ )

[11:03] <masak> `using static` is a loan from Java 1.5 :)

[11:06] <masak> tadzik: but we don't have `$obj?.foo` (call guaranteed method foo if $obj isn't null) in Perl 6. we have `$obj.?foo` (call not-guaranteed method foo on $obj)

[11:06] <jnthn> stmuk: If I was, I'd have made it .? like in Perl 6 instead of ?. :P

[11:06] <masak> I guess instead of `$obj?.foo`, we have the thing where Nil swallows method calls, Option-like

[11:07] *** johnchalekson left
[11:07] <masak> I really like the `nameof` feature. that feels like a macro to me.

[11:09] <arnsholt> Oooh, nameof was a clever idea indeed

[11:09] <masak> too bad the `when` is only for `catch` blocks ;)

[11:09] <masak> (also, too many parentheses) :)

[11:09] *** rindolf left
[11:10] * masak expectantly clicks the link named "interesting semantics" in the explanation about `await` in `catch` blocks

[11:10] <RabidGravy> perl6 -Ilib -e 'use Lumberjack; say Lumberjack'

[11:10] <RabidGravy> ===SORRY!=== Error while compiling -e

[11:10] <RabidGravy> Undeclared name:

[11:10] <RabidGravy>     Lumberjack used at line 1

[11:10] <RabidGravy> :(

[11:11] *** johnchalekson joined
[11:11] <RabidGravy> something is very broken in 2016.05-13-g498d0a4

[11:13] <masak> RabidGravy: could you be specific?

[11:13] <RabidGravy> ^

[11:14] <RabidGravy> Lumberjack is a module that is in the ecosystem

[11:14] <RabidGravy> it worked

[11:14] <RabidGravy> now it doesn't, in an inexplicable fashion

[11:14] *** jameslenz left
[11:15] <masak> is the `-Ilib` because Lumberjack is in your lib/ ?

[11:15] <RabidGravy> that is "use Lumberjack" appears to work fine, but clearly doesn't because none of the symbols are merged

[11:15] <RabidGravy> yes

[11:15] <masak> $ perl6 -Ilib -e'use Lumberjack; say Lumberjack'

[11:15] <masak> (Lumberjack)

[11:16] <masak> $ perl6 --version

[11:16] <masak> This is Rakudo version 2016.05-6-g2c45068 built on MoarVM version 2016.05

[11:16] <masak> upgrading to your version and trying again.

[11:17] <RabidGravy> it could be the "subtle precomp bug" that azawawi and llfourn reported yesterday

[11:18] <RabidGravy> let me delete the ~/.perl6/precomp too

[11:19] <RabidGravy> nope :(

[11:21] *** TEttinger left
[11:24] *** Ven joined
[11:24] <Ven> o/, #perl6!

[11:24] *** kid51 joined
[11:24] <DrForr> Afternoon.

[11:25] *** rindolf joined
[11:25] <RabidGravy> eh up

[11:26] *** araujo left
[11:26] *** willthechill left
[11:27] *** araujo joined
[11:28] *** araujo left
[11:29] *** araujo joined
[11:32] *** johnchalekson left
[11:32] <Ven> mh, what's supposed to be install/share/perl6/short/XXX that `make` tries to create?

[11:33] *** cpage_ joined
[11:33] <AlexDaniel> .

[11:33] <Ven> I can't install rakudo, it fails with a "Failed to open file <path>: not a directory"

[11:34] *** johnchalekson joined
[11:36] *** johnchalekson left
[11:38] *** johnchalekson joined
[11:39] <masak> RabidGravy: sorry, got distracted.

[11:39] <RabidGravy> no worries

[11:40] <masak> RabidGravy: anyway, I'm now on 2016.05-15-g5638a13 and I still can't reproduce your problem.

[11:40] <masak> one difference is that I just put a `class Lumberjack {}` in lib/Lumberjack.pm instead of using the real module

[11:40] <masak> but I'm not seeing it with that setup

[11:40] <masak> hope that provides some clues for you to narrow it down

[11:40] <masak> you might want to try what I just did, and see if that works for you

[11:41] *** johnchalekson left
[11:42] *** johnchalekson joined
[11:42] *** johnchalekson left
[11:43] *** johnchalekson joined
[11:43] *** johnchalekson left
[11:43] <RabidGravy> well it's got to be something specific to the module because I've been testing all of my modules this morning and it's the only one which fails like that

[11:43] *** kid51 left
[11:43] *** johnchalekson joined
[11:50] *** tbrowder joined
[11:55] <tbrowder> need help and advice on debugging this pod: https://gist.github.com/tbrowder/23c5ef38cccab30a32a7f7a2ca61659d#file-bad-pod-example-pod

[11:55] <tbrowder> I have tried to run this: 

[11:56] <tbrowder>   "perl6-debug-m -ll-exception --doc=HTML ./bad-pod-example.pod"

[11:56] <tbrowder> and get this from the exe:

[11:56] <tbrowder> Grouped options '-ll-exception' contain 'l', which is not a valid option  [switches] [--] [programfile] [arguments]

[11:57] <tbrowder> ...etc.; i.e., I get the help menu from "perl6-debug-m", so is there a bug in perl6-debug-m or am I doing something stupid?

[11:58] <rindolf> tbrowder: shouldn't it be --ll-exception

[11:58] <rindolf> tbrowder: with two dashes?

[11:59] <tbrowder> yes, sorry, I just added that option this AM but it doesn't make any difference (just tried it with yr correction)

[12:00] <tbrowder> the return is now:

[12:00] <tbrowder>   "Illegal option --doc  [switches] [--] [programfile] [arguments]..."

[12:01] <tbrowder> If I cut exe down to "perl6-debug-m --doc ./bad-pod-example.pod" I get

[12:01] <tbrowder> "Illegal option --doc  [switches] [--] [programfile] [arguments]..."

[12:02] *** ggoebel115 left
[12:02] <tbrowder> I am using rakudo 2016.05

[12:03] *** kaos01 left
[12:04] *** mr-foobar joined
[12:05] <tbrowder> BTW< I think I know what the error is: the table pod parser thinks the leading hyphen indicate a heading/contents separator, but I need the debugger to show me the depths of I think nqp

[12:06] *** maybekoo2 left
[12:07] <tbrowder> as another data point, if I run "perl6 --doc=HTML ./bad-pod-example.pod" I get:

[12:07] <tbrowder> "===SORRY!=== Cannot iterate object with P6opaque representation"

[12:09] <tbrowder> I reported the problem earlier here and <masak> filed the bug as #128221

[12:09] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128221

[12:12] *** pmurias joined
[12:17] <tbrowder> as another data point, the last line I can track to without the debugger is in file "./rakudo/src/Perl6/Pod.nqp", line 177 that reads:

[12:18] <tbrowder> unless nqp::islist(@rows[$i]) {

[12:20] <tbrowder> I have tried to find sub nqp::islist but run into more weeds than I can handle at the moment; I have a hard time imagining what that function looks like to cause such an error unless it is some kind of multi-sub with AI about tables

[12:21] *** AlexDaniel left
[12:23] <tbrowder> a side note: at one time I found a pdf tutorial on npq (I think by <jnthn>) but can't find it now--a link would be welcomed

[12:26] <jnthn> tbrowder: This maybe? https://github.com/edumentab/rakudo-and-nqp-internals-course

[12:28] <tbrowder> yes, thanks, <jnthn>!

[12:29] *** MasterDuke joined
[12:32] *** huggable left
[12:33] *** nicqbot joined
[12:34] *** johnchalekson left
[12:38] <tbrowder> it seems to me that a table header/content separator in  p6 pod (given the current reqs as I read them [S26]) should be defined as something like Str consisting of all of one of the defined sep chars ('-' or '='), with possibly some column separator chars ('|'. '+', etc.) thrown in 

[12:42] <MasterDuke> lizmat: ping

[12:42] <tbrowder> (I think that S26 is a bit vague on what actually constitutes a table header.)

[12:42] <lizmat> MasterDuke: pong

[12:43] <MasterDuke> lizmat: is there a process for syncing needed changes between moar, nqp, and rakudo?

[12:44] <lizmat> not that I know of

[12:45] <MasterDuke> i.e., i submitted a rakudo pr that depended on an nqp commit that breaks rakudo if the pr isn't applied

[12:45] <lizmat> just mention it in the rakudo PR then  :-)

[12:46] *** pierre joined
[12:47] <jnthn> MasterDuke, lizmat: NQP_REVISION?

[12:48] *** itaipu joined
[12:48] <lizmat> no, the nqp PR that is needed

[12:49] <lizmat> jnthn: MasterDuke's question was in relation to PR's in different repo's

[12:49] <lizmat> MasterDuke: or was I wrong

[12:49] <MasterDuke> jnthn: my rakudo pr did include a bump to NQP_REVISION because my nqp commit was accepted first

[12:50] <jnthn> Oh...yeah, you'd need to get the NQP one merged first :)

[12:50] <jnthn> Though hopefully folks merging PRs do test them some ;)

[12:51] <MasterDuke> jnthn: but that commit was then reverted because it broke rakudo as it existed before the rakduo pr

[12:51] <jnthn> Oh...

[12:51] <jnthn> :)

[12:51] <MasterDuke> so they kind of have to happen simultaneously (well, nqp first, but rakudo immediately after)

[12:53] <MasterDuke> i probably didn't give a good explanation of the mutual dependency in either pr

[12:53] <psch> MasterDuke: a comment on the NQP PR a la "the resulting rakudo fallout is fixed in rakudo PR #..." would probably have prevented all the confusion :)

[12:53] <jnthn> MasterDuke: Probably the best bet is to make that clear in the PRs and then maybe ask someone here or on #perl6-dev

[12:55] <psch> MasterDuke: rakudo PR 772 is the one that depends on the merged-and-revert nqp PR?

[12:56] <masak> RabidGravy: I'm curious to hear more about the thing specific to Lumberjack which fails like that

[12:56] *** g4 left
[12:56] <MasterDuke> psch: yep

[12:57] <RabidGravy> masak, yeah, so am I tbh :) It only has one dependency

[12:58] *** Sgeo left
[12:58] *** sufrostico joined
[13:00] <masak> RabidGravy: best of luck. I'll leave le golfing to you

[13:01] *** PerlJam joined
[13:01] *** itaipu left
[13:02] <RabidGravy> the symbols definitely aren't getting merged and I know of no way to find out why

[13:02] <RabidGravy> perl6 -Ilib -e 'say (require Lumberjack);'

[13:02] <RabidGravy> No such symbol 'Lumberjack'

[13:06] * [Coke] wonders where the coffee's at.

[13:07] <masak> RabidGravy: what's the smallest Lumberjack on your side which doesn't merge the symbols?

[13:07] *** domidumont left
[13:07] *** itaipu joined
[13:07] <masak> RabidGravy: clearly mine (`class Lumberjack {}`) worked, so it needs to be bigger than that

[13:08] *** domidumont joined
[13:08] <RabidGravy> right clearly that is going to work

[13:08] <masak> I don't think how one uses `require`, by the way

[13:09] <RabidGravy> no, that works for *all other modules* installed or otherwise

[13:09] <psch> m: say (require Test)

[13:09] <camelia> rakudo-moar 13ad29: OUTPUT«(Test)␤»

[13:11] *** patrickz joined
[13:14] * [Coke] reviews, and wonders if this is why he has "oh, I'm a lumberjack" stuck in his head.

[13:18] <RabidGravy> ok, deleting the entire content of the class and it works

[13:19] <pmurias> jnthn: is being able to reference a undeclared variable intended QAST sematics? I mean having a QAST::Var.new(:scope<lexical>, :name<$not_declared_anywhere>).

[13:19] <RabidGravy> leaving the whole body but removing the "is Staticish" from the declaration and it still fails

[13:20] <RabidGravy> as above but removing the "use Staticish" and it works

[13:20] <jnthn> pmurias: QAST doesn't enforce anything in that sense

[13:20] <RabidGravy> however a plain "use Staticish" works

[13:20] <jnthn> pmurias: Anything it doesn't find in an outer node it assumes should be compiled into a late-bound lookup and left to fail at runtime

[13:21] <RabidGravy> thus I really, really need some new angle of attack on this

[13:21] <jnthn> pmurias: Or to become resolvable at runtime.

[13:21] <jnthn> (Often via forceouterctx)

[13:21] <RabidGravy> or, at option, get the arse with the whole thing and delete the modules from the ecosystem

[13:22] <pmurias> MasterDuke: I always like VM specific code getting removed :)

[13:23] *** cpage_ left
[13:23] <[Coke]> ditto.

[13:24] <MasterDuke> pmurias: yeah, it was nice to be able to to both (fix the bug and remove the vm-specific code)

[13:24] <pmurias> jnthn: it seems that the unresolved lexicals resolve to nulls

[13:24] *** abraxxa left
[13:25] <jnthn> pmurias: Ah...yeah, for object ones

[13:25] <jnthn> pmurias: Native ones error

[13:25] <jnthn> I forget exactly why :)

[13:26] <pmurias> the setting depends on it being that way before &EXHAUST gets defined

[13:28] <jnthn> aha

[13:28] <RabidGravy> AAAAAAAAAAAAAAAARGH

[13:28] <RabidGravy> masak, so I took things out until it worked

[13:28] <RabidGravy> then put them back

[13:29] <RabidGravy> and now it is identical to how it was before

[13:29] <RabidGravy> and it works

[13:30] <pmurias> ivory tower purity doesn't seem to be valued too highly in nqp land ;)

[13:31] <RabidGravy> oh wait it doesn't work in a different way

[13:33] <Ven> pmurias: puriwhat? :P

[13:33] <Ven> .oO( Perl 6 should have a Haskell backend, obviously )

[13:34] <mspo> I thought perl 6 was LarryWallHaskell

[13:35] <pmurias> Ven: we had pugs?

[13:38] *** wamba joined
[13:40] *** Ven left
[13:44] <geekosaur> ...and only au understood it

[13:44] * geekosaur tried :(

[13:46] *** azawawi joined
[13:47] <azawawi> $RabidGravy.IO.open :)

[13:53] <azawawi> RabidGravy: RAKUDO_MODULE_DEBUG=1 perl6 -Ilib t/01-sanity.t   # we're slow in the precompilation step of each use GTK::XYZWidget in GTK::Simple

[13:53] <azawawi> RabidGravy: i think we should deprecate the usage of 'use GTK::Simple' in favor to 'use GTK::Simple::XYZComponent'

[13:54] <RabidGravy> yes

[13:54] <azawawi> RabidGravy: /in favor to/in favour of/

[13:54] *** maybekoo2 joined
[13:54] *** MasterDuke left
[13:55] <RabidGravy> azawawi++ # understand the virtue of en_GB ;-)

[13:55] <azawawi> :)

[13:56] <azawawi> RabidGravy: moar-nom and 2016.05 exhibit the same performance so far. so it is still slow on latest

[14:03] * RabidGravy concludes that if nuking everything and re-building doesn't fix it, it's re-write Lumberjack not to use Staticish and then try and work out why Staticish has gone broken

[14:05] <azawawi> nice

[14:08] <azawawi> https://gist.github.com/azawawi/9923059405c963558a17e760753bcfa4  # duplicate open strace for perl6 -Ilib t/01-sanity.t

[14:11] *** khw joined
[14:14] *** brrt joined
[14:25] *** jack_rabbit left
[14:32] *** ocbtec left
[14:33] <tbrowder> ref bad pod: when I wrap the bad bod in a short perl6 prog I do get a useful trace (see gist https://gist.github.com/tbrowder/5e7649384c3338d516ecde8a2451b4a3)

[14:34] *** colomon joined
[14:34] *** ocbtec joined
[14:34] <tbrowder> I think I can work with that--we'll see.

[14:43] <azawawi> m: class Person { has Str $.name; }; sub person(*%args) { return Person.new(%args); }

[14:43] <camelia> rakudo-moar e5bd09: ( no output )

[14:43] <azawawi> m: class Person { has Str $.name; }; sub person(*%args) { return Person.new(%args); }; my $p = person;

[14:43] <camelia> rakudo-moar e5bd09: OUTPUT«Default constructor for 'Person' only takes named arguments␤  in sub person at /tmp/ZgaKBgeUh5 line 1␤  in block <unit> at /tmp/ZgaKBgeUh5 line 1␤␤»

[14:44] <azawawi> how do i pass a slurpy parameter back to .new?

[14:44] <psch> azawawi: you're not passing any arguments to &person is the problem

[14:44] <azawawi> m: class Person { has Str $.name; }; sub person(*%args) { return Person.new(%args); }; my $p = person(name => "Foo");

[14:44] <camelia> rakudo-moar e5bd09: OUTPUT«Default constructor for 'Person' only takes named arguments␤  in sub person at /tmp/SxoU6G3Ib0 line 1␤  in block <unit> at /tmp/SxoU6G3Ib0 line 1␤␤»

[14:45] <psch> ah, *that* is no lowering

[14:45] <psch> m: class Person { has Str $.name; }; sub person(*%args) { return Person.new(|%args); }; my $p = person name => "foo"

[14:45] <camelia> rakudo-moar e5bd09: ( no output )

[14:45] <psch> m: class Person { has Str $.name; }; sub person(*%args) { return Person.new(|%args); }; say person name => "foo"

[14:45] <camelia> rakudo-moar e5bd09: OUTPUT«Person.new(name => "foo")␤»

[14:45] <azawawi> cool thx

[14:46] <azawawi> any docs on |%args?

[14:46] <masak> RabidGravy: so... bug? no bug?

[14:47] <psch> azawawi: near the end of http://doc.perl6.org/type/Signature#Positional_vs._Named 

[14:47] <psch> azawawi: that is, the section

[14:47] <psch> not the page

[14:47] <azawawi> i saw it... thx

[14:47] <azawawi> psch++

[14:47] <RabidGravy> masak, oh, it's a bug alright, I just have no way of golfing it

[14:48] *** itaipu left
[14:48] *** pierre left
[14:49] <gfldex> |% is mentioned 3x in the docs

[14:49] <ugexe> why not just look for what is doing the actual work, flattening |?

[14:50] <RabidGravy> it's silently failing to merge the symbols "under some circomstance" but I can't reproduce that circumstance

[14:51] <RabidGravy> so I'm going to fix Lumberjack to not require Staticish, then go back to investigating what is on with Staticish to cause it

[14:52] *** ocbtec left
[14:58] <gfldex> ugexe: we don't explain what | does inside argument lists at http://doc.perl6.org/language/operators#prefix_|

[14:59] *** brrt left
[14:59] <psch> prefix:<|> and argument lowering isn't the same

[15:00] <psch> ...i thought

[15:00] <psch> but i think i'm wrong

[15:00] <psch> m: sub f(:$a, :$b) { say "$a $b" }; my %h = a => 1, b => 2; f prefix:<|> %h

[15:00] <camelia> rakudo-moar e5bd09: OUTPUT«1 2␤»

[15:00] <azawawi> RabidGravy: what do you think of this https://gist.github.com/azawawi/e562bfa6866f0189063b278b2a726d8a ?

[15:03] <RabidGravy> erm, to be honest I would actually leave it slow rather than cloud the example with an idiom that is itself going to raise questions

[15:04] <RabidGravy> I might add that removing the "use lib" from the example will probably be of some benefit as it prevents precompilation (or did at some point)

[15:05] <RabidGravy> then just change the instructions for running the examples for the uninstalled library

[15:05] *** luiz_lha left
[15:08] <azawawi> RabidGravy: what about https://gist.github.com/azawawi/e562bfa6866f0189063b278b2a726d8a ?

[15:09] <azawawi> RabidGravy: that way use GTK::Simple has a less startup cost and less actual characters to type in the scripts using it

[15:10] <azawawi> RabidGravy: or i could just write GTK::Simpler :)

[15:12] <RabidGravy> I like that, for notation convenience I'd just go a type capture in the sub signatures (that way you don't have to examine the constructors), like "sub button(|c) { .... .new(|c) }

[15:13] *** ssotka joined
[15:15] <azawawi> RabidGravy: updated gist. thanks

[15:15] *** _28_ria left
[15:17] *** _28_ria joined
[15:18] <dalek> doc: 49c7e76 | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[15:18] <dalek> doc: actually tell what prefix:<|> does inside argument lists

[15:18] <dalek> doc: review: https://github.com/perl6/doc/commit/49c7e761f3

[15:18] <psch> m: my %h = a => 1, b => 2; say prefix:<|> %h

[15:18] <camelia> rakudo-moar e5bd09: OUTPUT«Unexpected named parameter 'a' passed␤  in block <unit> at /tmp/b_DvUDP4iY line 1␤␤»

[15:18] <azawawi> RabidGravy: that way you can deprecate with ease (e.g. VBox, HBox) and change behavior etc...

[15:18] <RabidGravy> cool

[15:19] <psch> m: my %h = a => 1, b => 2; say (prefix:<|> %h).perl

[15:19] <camelia> rakudo-moar e5bd09: OUTPUT«slip(:a(1), :b(2))␤»

[15:21] *** prammer joined
[15:26] *** prammer left
[15:28] *** prammer joined
[15:34] *** asdasd joined
[15:35] *** asdasd left
[15:38] <ugexe> i think that explanation is a little too basic

[15:38] *** prammer left
[15:38] <ugexe> m: my $x = "asdf"; sub foo(*@pos,*%named) { say @pos.perl; say %named.perl  }; say $x ~~ Positional; say $x ~~ Associative; foo(|$x);

[15:38] <camelia> rakudo-moar e5bd09: OUTPUT«False␤False␤["asdf"]␤{}␤»

[15:38] <ugexe> (also Associative typo)

[15:38] *** mohae left
[15:39] *** prammer joined
[15:39] *** mohae joined
[15:42] *** kurahaupo joined
[15:43] *** devtom30 left
[15:45] *** pmurias_ joined
[15:45] *** |meta joined
[15:45] *** pmurias left
[15:46] *** pmurias_ left
[15:49] *** domidumont left
[15:53] *** nicqbot left
[15:59] *** prammer left
[16:00] *** prammer joined
[16:04] *** spaceship17 joined
[16:04] *** spaceship17 left
[16:05] *** sno left
[16:09] <dalek> ecosystem: 216df27 | azawawi++ | META.list:

[16:09] <dalek> ecosystem: Add GTK::Simpler

[16:09] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/216df27ca1

[16:12] <azawawi> RabidGravy: simpler examples https://github.com/azawawi/perl6-gtk-simpler/tree/master/examples :)

[16:13] <RabidGravy> :)

[16:14] <RabidGravy> so I think we now need a GTK::Simplest to complete the cycle

[16:15] <azawawi> or ::ForSimpletons :)

[16:19] <azawawi> RabidGravy: we're now down to 5 seconds on 01-sanity.t :)

[16:20] <RabidGravy> can you come round and fix the tests for some of my modules, it takes about half a day to run them all ;-)

[16:20] <azawawi> RabidGravy: ~110-120 seconds down to 5 seconds

[16:22] *** Tonik joined
[16:28] <azawawi> RabidGravy: hmmm i wonder if we can also use lazy features of perl6... i.e. use $app when used :)

[16:29] <RabidGravy> azawawi++ #  make things fast

[16:32] *** domidumont joined
[16:32] <azawawi> RabidGravy: thx

[16:32] <azawawi> RabidGravy: add more rationale https://github.com/azawawi/perl6-gtk-simpler/blob/master/README.md

[16:32] *** huggable joined
[16:33] <azawawi> two birds in one stone: type less and gain more speed :)

[16:41] <dalek> ecosystem: 5fb6da0 | palapitta++ | META.list:

[16:41] <dalek> ecosystem: Aria

[16:41] <dalek> ecosystem: 

[16:41] <dalek> ecosystem: to use aria2c from perl6

[16:41] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/5fb6da01a5

[16:41] <dalek> ecosystem: ce43964 | (Zoffix Znet)++ | META.list:

[16:41] <dalek> ecosystem: Merge pull request #210 from palapitta/patch-2

[16:41] <dalek> ecosystem: 

[16:41] <dalek> ecosystem: Add Aria: https://github.com/palapitta/Aria/

[16:41] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/ce4396411f

[16:41] <RabidGravy> I may actually just abandon Perl 6 altogether actually

[16:42] <psch> huh?

[16:43] <RabidGravy> another one of my modules has just randomly stopped working with 2016.05

[16:45] <psch> well, the whole CUR stuff does suffer from the problem that drove ShimmerFairy away - that is, developed too late, merged too early, still in flux

[16:45] <psch> i can imagine that's part of what's causing module breakage, since nine is still working on parts of it

[16:45] <RabidGravy> no, this is something else

[16:45] <psch> did you bisect?

[16:45] <psch> oh, that makes me wonder

[16:46] <psch> does that bisect bot we have now deal with gists?  cause that might be nice for big tests, like modules

[16:46] <RabidGravy> it's some previously working thing with a channel, seems to hang on a private futex

[16:47] <psch> which module is it, and what's a sample program using it?

[16:47] <psch> oh, and when it it work last? :)

[16:48] *** vytas left
[16:49] <RabidGravy> AAAAARGH, heisenbug

[16:50] <RabidGravy> it's Audio::Libshout, introducing some instrumentation into the test appears to make it work

[16:51] <RabidGravy> which would suggest that there is some shared resource contention

[16:51] <psch> so the tests as-is are a test case for the breakage?

[16:51] <RabidGravy> yeah

[16:52] <RabidGravy> the last time it definitely worked was on Feb 29, may have tested since

[16:54] <psch> hrm, can't run the tests on hack, not easily at least

[16:55] <RabidGravy> yeah this is very timing dependent

[16:55] <psch> no, it's mostly a matter of installing a PATH-wide perl6, installing a module manager, installing the deps...

[16:55] <psch> which probably includes libshout itself

[16:55] <azawawi> RabidGravy: fix your LICENCE  :)

[16:55] <psch> i'll look into this tomorrow, see if i can bisect this somehow

[16:57] <azawawi> RabidGravy: modify .travis.yml and run it on different 2016.0x ?

[16:59] <hoelzro> since Perl 6 thinks in terms of graphemes, what's the best way to remove combining characters from a string?

[16:59] <hoelzro> $s.subst(/\c[COMBINING ACUTE ACCENT]/, '', :g), for example, doesn't cut it

[16:59] <RabidGravy> azawawi, personally I'd rather not have any license at all beyond a very vague BSDish kind of thing but my experience of maintaining quite well used P5 modules has made me realise that I can't be arsed with dealing with the lawyers of, e.g., Boeing asking for an explanation of the license

[17:00] <azawawi> RabidGravy: https://github.com/jonathanstowe/Audio-Libshout/blob/master/README.md#licence  spelling typo :)

[17:00] <azawawi> RabidGravy: en_GB?

[17:00] <RabidGravy> this is most odd, the trouble isn't actually the sending to the channel, but the closing of the libshout stream :-z

[17:01] <azawawi> upgraded libshout?

[17:02] *** kanishka joined
[17:04] *** maybekoo2 left
[17:06] <dalek> doc: 6662f73 | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[17:06] <dalek> doc: fix typo

[17:06] <dalek> doc: review: https://github.com/perl6/doc/commit/6662f7346f

[17:06] <dalek> doc: 8bc4b51 | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod:

[17:06] <dalek> doc: link to detailed explanation

[17:06] <dalek> doc: review: https://github.com/perl6/doc/commit/8bc4b519c1

[17:08] <dalek> gtk-simple: 61e6b37 | azawawi++ | META6.json:

[17:08] <dalek> gtk-simple: Fix metadata after refactor, azawawi--

[17:08] <dalek> gtk-simple: review: https://github.com/perl6/gtk-simple/commit/61e6b378f7

[17:08] *** firstdayonthejob joined
[17:09] <azawawi> RabidGravy: different behaviors for panda on different platforms.... https://travis-ci.org/azawawi/perl6-gtk-simpler/builds/133423515

[17:12] <azawawi> RabidGravy: a bad META made GTK::Simple to fail on MacOSX while on linux it passed...

[17:13] <hoelzro> there's no way to tell regex to operate on a per-codepoint rather than per-grapheme basis, is there?

[17:13] *** Marcool joined
[17:13] <psch> hoelzro: i'd probably .decode and do byte-level stuff

[17:13] <psch> hoelzro: ISTR that we had something easier to strip combining characters, but i can't find it atm

[17:13] <hoelzro> I *could* do that...seems LTA, though

[17:15] * azawawi fun &

[17:15] *** azawawi left
[17:15] <hoelzro> I guess the whole point of Perl 6 regexes is that you don't need to differentiate between á and á - ever

[17:15] <psch> well, they do look the same from here :)

[17:15] <hoelzro> so I have to consider whether the former would be transformed into a or preserved

[17:16] <psch> m: my ($a, $b) = "á", "á"; say $a eq $b 

[17:16] <camelia> rakudo-moar e5bd09: OUTPUT«True␤»

[17:16] <hoelzro> first is U+00E1, second is U+0041 + U+0301

[17:16] <hoelzro>  m: my ($a, $b) = "á", "á"; say $a.ords; say $b.ords;

[17:16] <camelia> rakudo-moar e5bd09: OUTPUT«(225)␤(225)␤»

[17:16] <hoelzro> huh

[17:16] <hoelzro> I'm guessing it normalized them on input

[17:16] <psch> hoelzro: that's NFG for you

[17:16] <psch> yeah

[17:16] <hoelzro> yup

[17:23] *** ab6tract left
[17:23] *** willthechill joined
[17:32] <geekosaur> m: my $x = "áéć"; $x ~~ s:ignoremark/a/a/; $x.say

[17:32] <camelia> rakudo-moar e5bd09: OUTPUT«aéć␤»

[17:32] <geekosaur> not quite the same thing though

[17:33] <geekosaur> o.O

[17:33] <geekosaur> m: my $x = "áéć"; $x ~~ s:g:ignoremark/(<[ace]>)/$0/; $x.say

[17:33] <camelia> rakudo-moar e5bd09: OUTPUT«===SORRY!===␤chr codepoint cannot be negative␤»

[17:33] <psch> m: my $x = "áéć"; $x ~~ s:ignoremark/(.)/$0/; $x.say

[17:33] <camelia> rakudo-moar e5bd09: OUTPUT«áéć␤»

[17:33] <psch> geekosaur: that looks like a RT ticket in the making to me :)

[17:33] <psch> *an

[17:34] <geekosaur> yes, yes it does

[17:34] * geekosaur just got on team call though... will have to wait a bit

[17:35] *** tbrowder left
[17:40] *** wamba left
[17:46] *** willthechill left
[17:52] *** nadim left
[17:53] *** Marcool left
[17:53] *** sno joined
[17:54] <RabidGravy> okay what appears to happening with Audio::Libshout is that I am doing something like " my $channel = Channel.new; my $promise = start { react { whenever $channel { }}}; $channel.close; await $promise;" and it appears that it is not reliably exiting the react thus keeping the promise

[17:54] <RabidGravy> which is odd

[17:54] <RabidGravy> because that certainly worked last time I tested it

[18:06] <b2gills> m: say "áéć".NFD.grep(*.uniprop('L'))».chr.join

[18:06] <camelia> rakudo-moar e5bd09: OUTPUT«aec␤»

[18:08] <[Coke]> supply tests have been failing sporadically since before christmas.

[18:08] *** labster joined
[18:08] <RabidGravy> yeah, this definitely worked in february 29, and I may or may not have tested since

[18:10] <RabidGravy> okay maybe it could be argued that I should test the modules before every month's release, but we're talking 52 modules here

[18:11] <[Coke]> we should have an automated system for this, like p5 does.

[18:12] <b2gills> m: say "áéć".comb.map(*.NFD[0].chr).join

[18:12] <camelia> rakudo-moar e5bd09: OUTPUT«aec␤»

[18:12] <RabidGravy> yeah, I was wondering whether it was possible to get a GH webhook that could trigger a "test all the things" on some commit on rakudo

[18:22] *** grondilu left
[18:29] *** grondilu joined
[18:36] *** xinming_ is now known as xinming

[18:38] <RabidGravy> right let's see if I can golf this one so I can bisect

[18:48] *** Marcool joined
[18:48] <Marcool> p6: say "test"

[18:48] <camelia> rakudo-moar e5bd09: OUTPUT«test␤»

[18:53] *** Marcool left
[18:53] <psch> m: say "t", |("e", { !($++) ?? chr(.ord + 14) !! chr(.ord + 1) } ... *.succ gt 't')

[18:53] <camelia> rakudo-moar e5bd09: OUTPUT«test␤»

[18:54] <psch> well, i had fun with that :P

[18:59] *** mr-foobar left
[19:05] *** Emeric1 joined
[19:06] *** Emeric left
[19:06] *** Emeric1 is now known as Emeric

[19:12] *** mohij joined
[19:15] *** patrickz left
[19:15] *** domidumont left
[19:22] <geekosaur> o.O Couldn't determine correct make program. Aborting.

[19:22] <geekosaur> ..."rakudobrew triple" on mint 17

[19:23] <geekosaur> when it went to build nqp

[19:24] *** Amnez777 left
[19:35] *** sufrostico left
[19:35] *** Emeric1 joined
[19:36] *** Emeric left
[19:36] *** Emeric1 is now known as Emeric

[19:37] *** jjido joined
[19:41] *** ocbtec joined
[19:42] *** sufrostico joined
[19:46] *** AlexDaniel joined
[19:48] *** nadim joined
[19:50] *** pierre joined
[19:56] <RabidGravy> Hmm so the degenerate case as described above seems to work fine

[19:57] *** rindolf left
[19:58] *** Zoffix joined
[19:59] <Zoffix> geekosaur, that was there since before Christmas--no one bothered to fix it

[19:59] <Zoffix> huggable, rakudobrew tripple

[19:59] <huggable> Zoffix, nothing found

[19:59] <Zoffix> huggable, triple

[19:59] <huggable> Zoffix, nothing found

[19:59] <Zoffix> :/

[19:59] <geekosaur> hm, it'd been working for me previously

[20:00] <Zoffix> Never worked for me, though there's Larry's in huggable

[20:00] <Zoffix> 1 sec

[20:00] <Zoffix> *Larry's patch

[20:01] <Zoffix> huggable, rakudobrew tripple patch

[20:01] <huggable> Zoffix, (in .rakudobrew/bin) \curl https://gist.githubusercontent.com/TimToady/0b68b598b74df83e1eee/raw/fde36d40813f7d9421462c89ba23060694efa7e9/gistfile1.txt | git apply

[20:01] <Zoffix> Although, there was some other error the last time I tried the tripple even with the patch

[20:04] <Zoffix> RabidGravy, you mean... like... entirely? <RabidGravy>I may actually just abandon Perl 6 altogether actually

[20:05] <geekosaur> I do sometimes feel like it might be smart to retract and try again with 6.d

[20:05] <geekosaur> the CUR stuff really isn't quite baked yet

[20:05] <RabidGravy> I'm having one of those days

[20:07] *** prammer left
[20:08] *** pierre left
[20:10] <RabidGravy> but it's fine now I've got an awful bottle of italian red wine which I can't even remember where it came from

[20:10] *** mr-foobar joined
[20:11] <Zoffix> :)

[20:12] *** darutoko left
[20:15] *** mr-foobar left
[20:15] *** Sgeo joined
[20:16] *** nadim left
[20:17] <RabidGravy> when I say awful, it's more not something I wouldn't buy to drink at home, but just like the house wine in a family run restaurants that's a chippy on the side

[20:17] *** mohij left
[20:18] *** patrickz joined
[20:22] *** Emeric left
[20:24] *** Emeric joined
[20:24] <dalek> doc: 5654705 | (Jan-Olof Hendig)++ | doc/Language/subscripts.pod:

[20:24] <dalek> doc: Fixed two broken links

[20:24] <dalek> doc: review: https://github.com/perl6/doc/commit/5654705549

[20:32] *** huggable left
[20:32] *** huggable joined
[20:33] *** Amnez777 joined
[20:40] <[Coke]> RabidGravy: my best guess at "a chippy on the side" has nothing to do with wine.

[20:40] <[Coke]> what's that mean?

[20:41] *** jjido left
[20:42] <grondilu> anyone using Perl 6 on Windows?  with the default cmd?  If so how can I make it display unicode characters?

[20:42] <RabidGravy> oh, take away fish and chip restaurant ;-)

[20:43] <[Coke]> OOOOH. thank you! ;)

[20:43] <RabidGravy> pretty uk wide vernacular

[20:47] *** spider-mario joined
[20:48] *** Emeric left
[20:48] <jnthn> grondilu: For me, yes cmd.exe, but different run inside a different console host (ConEmu), and that way I get things like the proper quotes in stuff like ｢abc｣ in the output etc.

[20:48] <jnthn> s:1st/different//

[20:49] *** Emeric joined
[20:50] <grondilu> ok

[20:51] *** sufrostico left
[20:52] <geekosaur> grondilu, try: chcp 65001

[20:56] <geekosaur> (note that that setting could confuse the heck out of programs not expecting it... anything coming with Windows should be ok though, and I doubt there are many console-mode Windows programs you'd need to worry about)

[20:57] <jnthn> Yeah, I think I tried that and gave up pretty quick 'cus it confused the heck out of *something* I was using

[20:57] <jnthn> It may have been git

[20:57] *** kanishka left
[20:57] <jnthn> But it's been a few years :)

[21:00] *** Skarsnik joined
[21:14] *** Celelibi left
[21:17] *** Emeric left
[21:18] *** ocbtec left
[21:20] * dogbert17 it's quite silent around here

[21:21] <dogbert17> does anyone know the purpose of the method 'keyof' in Hash?

[21:22] <lizmat> it describes the type of key allowed

[21:22] <lizmat> m: my %h{Int} = 42 => 'a'

[21:22] <camelia> rakudo-moar e5bd09: ( no output )

[21:23] <lizmat> m: my %h{Int} = 42 => 'a'; dd %h

[21:23] <camelia> rakudo-moar e5bd09: OUTPUT«Hash[Any,Int] %h = (my Any %{Int} = 42 => "a")␤»

[21:23] <lizmat> m: my %h{Int} = 42 => 'a'; dd %h.keyof

[21:23] <camelia> rakudo-moar e5bd09: OUTPUT«Int␤»

[21:23] <lizmat> m: my %h{Int} = 42 => 'a'; %h<a> = 42

[21:23] <camelia> rakudo-moar e5bd09: OUTPUT«Type check failed in binding key; expected Int but got Str ("a")␤  in block <unit> at /tmp/ZAezfvupEN line 1␤␤»

[21:23] <dogbert17> lizmat: thanks, which type is default, is it Str?

[21:24] <lizmat> m: my %h; dd %h.keyof

[21:24] *** willthechill joined
[21:24] <camelia> rakudo-moar e5bd09: OUTPUT«Any␤»

[21:24] <lizmat> hmmm...

[21:24] <lizmat> m: my %h; dd %h

[21:24] <camelia> rakudo-moar e5bd09: OUTPUT«Hash %h = {}␤»

[21:25] <lizmat> m: my %h; %h{42} = "a"; dd %h

[21:25] <camelia> rakudo-moar e5bd09: OUTPUT«Hash %h = {"42" => "a"}␤»

[21:25] <dogbert17> the docs seem to imply that it should be Str

[21:25] <hoelzro> dogbert17: it's Str

[21:25] <lizmat> Str(Any) actually, I think

[21:26] <lizmat> because it will stringify

[21:26] <hoelzro> ah, good point!

[21:26] <lizmat> m: my %h{Str}; %h{42} = "a"; dd %h

[21:26] <camelia> rakudo-moar e5bd09: OUTPUT«Type check failed in binding key; expected Str but got Int (42)␤  in block <unit> at /tmp/ljx6Kgopyj line 1␤␤»

[21:26] <lizmat> m: my %h{Str(Any)}; %h{42} = "a"; dd %h

[21:26] <camelia> rakudo-moar e5bd09: OUTPUT«Type check failed in binding key; expected Str(Any) but got Int (42)␤  in block <unit> at /tmp/lrSzZzGQ3G line 1␤␤»

[21:26] <lizmat> hmmm....

[21:27] <dogbert17> you're starting to confuse me :) I was hoping to extract enough info to document the method 

[21:27] <lizmat> for object hashes, it indicates the type it should have

[21:28] <dogbert17> lizmat: ok

[21:28] <jnthn> For normal hashes too, in terms of the constraining behavior.

[21:28] <jnthn> But yeah, it doesn't return a coercion type that captures that aspect of things yet.

[21:28] <lizmat> m: dd Str(Any)

[21:28] <camelia> rakudo-moar e5bd09: OUTPUT«Str(Any)␤»

[21:28] *** Celelibi joined
[21:28] <lizmat> m: dd Str(Any).WHAT

[21:28] <camelia> rakudo-moar e5bd09: OUTPUT«Str(Any)␤»

[21:28] <geekosaur> dogbert17, I think lizmat is being confused also (that is, things don't seem to be doing what they're supposed to...)

[21:29] <lizmat> that piece of code predates coercion types  :-)

[21:29] <lizmat> I know, because I wrote it  :-)  (I think :-)

[21:29] <dogbert17> geekosaur: phew I was beginning to suspect a couple of 'missing' beers :)

[21:30] * dogbert17 they were in front of me and suddenly they were gone :(

[21:31] <jnthn> How does it happen? o.O :)

[21:32] <jnthn> lizmat: Any is a reasonable thing for it to hand back, in a way, though. 'cus it still accurately represents the constraint...

[21:32] <jnthn> But yeah, the coercion type would be more precise.

[21:32] <lizmat> jnthn: we could also return Str(Any)

[21:33] <jnthn> Wonder what the spectests say, if anything :)

[21:33] <lizmat>  https://github.com/rakudo/rakudo/commit/1b13351eac

[21:34] <jnthn> I'm guessing if you committed it, they're happy? :)

[21:34] <lizmat> actually, I didn't spectest

[21:34] <lizmat> and looking at the tests, they won't be   :-(

[21:34] <jnthn> aww

[21:34] <lizmat> grrr

[21:36] <dogbert17> lizmat++ that was a fast change :)

[21:37] <lizmat> yeah, looked simple enough

[21:37] <grondilu> off topic: rocket launch in 2min:  https://youtu.be/zBYC4f79iXc

[21:37] <lizmat> "Method 'shortname' not found for invocant of class 'Perl6::Metamodel::CoercionHOW"

[21:38] <jnthn> ooh

[21:38] * lizmat watches

[21:38] <lizmat> grondilu++

[21:40] <geekosaur> just missed liftoff

[21:41] <jnthn> m: say Any(Str)

[21:41] <camelia> rakudo-moar e5bd09: OUTPUT«Method 'shortname' not found for invocant of class 'Perl6::Metamodel::CoercionHOW'␤  in block <unit> at /tmp/leAmrDNhJo line 1␤␤»

[21:41] *** skink joined
[21:42] *** MadcapJake is now known as MadcapJake_afk

[21:46] <dogbert17> seems to go well (the launch)

[21:48] <geekosaur> aaaand first stage landed

[21:48] *** RabidGravy left
[21:51] *** kaare_ left
[21:52] *** RabidGravy joined
[21:57] <RabidGravy> boom

[21:57] <RabidGravy> I think I may have to get a new laptop

[21:58] *** nadim joined
[22:05] <dalek> ecosystem: 60704bf | (Sterling Hanenkamp)++ | META.list:

[22:05] <dalek> ecosystem: P6SGI has been renamed to P6W

[22:05] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/60704bf45d

[22:06] <lizmat> .oO( the Perl 6 Weekly as a module :-)

[22:06] <timotimo> P6Weekly has a module now?

[22:06] <timotimo> hah

[22:08] *** TEttinger joined
[22:08] <ugexe> i thought p6w was used to reference Perl6::World as well

[22:09] <lizmat> that usage predates my involvement in rakudo

[22:09] <timotimo> i've never seen anybody refer to Perl6::World as P6W or p6w

[22:10] *** wamba joined
[22:10] <ugexe> i've always seen Perl6::World.new saved to $p6w when using Perl6::Compiler

[22:12] <timotimo> huh

[22:13] *** vendethiel joined
[22:18] *** jjido joined
[22:23] <ugexe> when i've seen people invoke Perl6::World in code samples they've always named the container $p6w

[22:24] * timotimo shrugs

[22:25] <timotimo> i've always only worked with it when it was in $*W or maybe cached in $!W or $!World

[22:25] <ugexe> yes, if you are dealing with the current World

[22:25] <timotimo> most of my work that has to do with World is either in Grammar, Actions, World, or Optimizer :)

[22:34] *** jjido left
[22:39] *** jjido joined
[22:40] *** jjido left
[22:41] *** |meta left
[22:42] *** johnchalekson joined
[22:49] *** Ven joined
[22:49] *** ggoebel114 joined
[22:49] *** sufrostico joined
[22:52] *** firstdayonthejob left
[22:53] * RabidGravy releases the gots

[22:54] *** Ven left
[22:54] <RabidGravy> goats too but gots are cool

[22:55] *** Ven joined
[22:56] *** spuelric1 joined
[22:57] *** sufrostico left
[22:57] *** spuelric1 left
[22:58] <lizmat> .oO( visigots )

[22:58] <jdv79> why would you release goats?

[22:59] <RabidGravy> why not?

[22:59] <jdv79> we had some and when they got out of the pen they just wandered around eating random things jusst like they did in the pen.

[22:59] <jdv79> just doesn't seem significant

[22:59] <lizmat> jdv79: could be they be eating random things that aren't yours ?

[23:00] <jdv79> they try to eat anything from what i remember.  they've all died off a few years ago.

[23:01] <jdv79> but they even tried to eat coals from a bonfire we had in that pen once.  not the brightest creatures ime.

[23:01] <RabidGravy> well when I was about five they tried to eat my vest, and I remember that

[23:01] <jdv79> haha

[23:03] <RabidGravy> then when I was twenty or so they ganged up on me in me in a Mountain in northern spain, quite freaked me out

[23:04] <RabidGravy> I've forgivven them obviously, but now they are my my emblem for scary weird stuff

[23:05] <jdv79> did they try to nibble away at you in spain?

[23:07] <RabidGravy> no I was going up a mountain path and the biggest one jumped up on a rock ahead of me and looked intimidating

[23:07] <RabidGravy> then the rest came round behind

[23:08] <jdv79> nice.  i guess they can look a bit freaky to some because they have slot pupils

[23:10] *** Zoffix left
[23:10] <masak> 'night, #perl6

[23:10] *** jameslenz joined
[23:12] <RabidGravy> toodles

[23:12] *** patrickz left
[23:17] *** cpage_ joined
[23:21] *** kid51 joined
[23:21] *** wamba left
[23:23] *** RabidGravy left
[23:29] *** Ven left
[23:33] *** cpage_ left
[23:36] *** labster left
[23:53] *** labster joined
[23:56] *** vendethiel left
[23:56] *** spider-mario left
[23:59] <timotimo> lizmat: you reverted the keyof thing because it doesn't actually return a coercion type object? personally, i'd go via the MOP to create that type

