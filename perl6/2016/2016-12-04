[00:00] <MasterDuke> but i would suggest adding ', it must be inside a sub or block', or something like that, to the message

[00:00] *** cognominal left
[00:01] <BenGoldberg> m: { $^a++ }.say;

[00:01] <camelia> rakudo-moar 971e14: OUTPUT«-> $a { #`(Block|68813512) ... }␤»

[00:01] <BenGoldberg> m: { $^a++ }().say;

[00:01] <camelia> rakudo-moar 971e14: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at <tmp> line 1␤␤»

[00:01] *** cognominal joined
[00:01] <BenGoldberg> m: { $^a++ }.(42).say;

[00:01] <camelia> rakudo-moar 971e14: OUTPUT«Cannot resolve caller postfix:<++>(Int); the following candidates␤match the type but require mutable arguments:␤    (Mu:D $a is rw)␤    (Int:D $a is rw)␤␤The following do not match for other reasons:␤    (Bool:D $a is rw)␤    (Bool:U $a is rw…»

[00:01] <masak> I use "mainline" to mean something roughly equivalent to "outside any routine"

[00:02] <BenGoldberg> m: { $^a++ }.(Scalar.new(42)).say;

[00:02] <camelia> rakudo-moar 971e14: OUTPUT«Cannot make a Scalar object using .new␤  in block <unit> at <tmp> line 1␤␤»

[00:03] <BenGoldberg> m: { $^a++ }.([42][0]).say;

[00:03] <camelia> rakudo-moar 971e14: OUTPUT«Cannot resolve caller postfix:<++>(Int); the following candidates␤match the type but require mutable arguments:␤    (Mu:D $a is rw)␤    (Int:D $a is rw)␤␤The following do not match for other reasons:␤    (Bool:D $a is rw)␤    (Bool:U $a is rw…»

[00:03] <babydrop> heh

[00:03] <MasterDuke> i don't think "mainline" is too hard to figure out, but it's the first time/place i've ever seen that word used in all my programming experience

[00:03] *** cyphase left
[00:03] <PerlJam> MasterDuke: what about "Cannot use placeholder parameter $^a outside of sub or block" ?

[00:03] <babydrop> +1

[00:04] <MasterDuke> +1

[00:04] <BenGoldberg> m: { $^a++ }.(Proxy.new: FETCH => { 42 }, STORE => &say );

[00:04] <camelia> rakudo-moar 971e14: OUTPUT«Cannot resolve caller postfix:<++>(Int); the following candidates␤match the type but require mutable arguments:␤    (Mu:D $a is rw)␤    (Int:D $a is rw)␤␤The following do not match for other reasons:␤    (Bool:D $a is rw)␤    (Bool:U $a is rw…»

[00:05] <BenGoldberg> m: { $^a = $^a + 1 }.(Proxy.new: FETCH => { 42 }, STORE => &say );

[00:05] <camelia> rakudo-moar 971e14: OUTPUT«Cannot assign to a readonly variable ($a) or a value␤  in block <unit> at <tmp> line 1␤␤»

[00:05] <babydrop> BenGoldberg: it'll be read-only regardless of what you stick into the arguments

[00:05] <dalek> whateverable: 3ac4ca3 | (Aleks-Daniel Jakimenko-Aleksejev)++ | Whateverable.pm6:

[00:05] <dalek> whateverable: Fix occasional crashes associtated with timeouts

[00:05] <dalek> whateverable: 

[00:05] <dalek> whateverable: Just sending a SIGHUP does not mean that we can close the channel, the

[00:05] <dalek> whateverable: process is probably still alive and it will attempt to send stuff into

[00:05] <dalek> whateverable: a closed channel.

[00:05] <dalek> whateverable: 

[00:05] <dalek> whateverable: This fixes #60. Previously this was the cause of MoarVM panics (until

[00:05] <dalek> whateverable: it was fixed in Rakudo), but generally this is our fault.

[00:05] <dalek> whateverable: 

[00:05] <dalek> whateverable: However, there is still at least one bug in rakudo, which is why we

[00:05] <dalek> whateverable: did not notice this problem right away. When the command prints a lot

[00:06] <dalek> whateverable: of stuff into stdin, it will never time out. The whole thing is stuck

[00:06] <dalek> whateverable: in a Proc::Async tap, without giving any chance for Promice.in(…) to

[00:06] <dalek> whateverable: fire up.

[00:06] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/3ac4ca3d58

[00:06] <BenGoldberg> Do I need an 'is rw'?

[00:06] <babydrop> or is copy

[00:06] <BenGoldberg> m: ( -> $a is rw { ++$a })(Proxy.new: FETCH => { 42 }, STORE => &say );

[00:06] <camelia> rakudo-moar 971e14: OUTPUT«4243␤»

[00:07] <BenGoldberg> m: ( -> $a is rw { $a = 'Mu' } )(Proxy.new: FETCH => { 42 }, STORE => &say );

[00:07] <camelia> rakudo-moar 971e14: OUTPUT«42Mu␤»

[00:07] *** Perl6Robot joined
[00:07] <Perl6Robot> OHAI!

[00:07] *** Perl6Robot left
[00:07] <AlexDaniel> :)

[00:07] *** Perl6Robot joined
[00:07] <Perl6Robot> OHAI!

[00:07] *** Perl6Robot left
[00:08] *** Perl6Robot joined
[00:08] *** Perl6Robot left
[00:08] *** cyphase joined
[00:08] * BenGoldberg just realized that our various 6bots all use ipv6.  Cool!

[00:10] *** sena_kun left
[00:11] <AlexDaniel> BenGoldberg: why is that surprising? These bots are running on a proper server, and all servers nowadays have decent ipv6 support

[00:11] <AlexDaniel> the issue is much worse on the client side, that's true. Is there anybody running a bot from home? :)

[00:12] <BenGoldberg> To be honest, I would never have noticed if not for seeing the raw address in the irc messages: "Perl6Robot (~z@2001:41d0:2:5eb5::) has Joined #perl6" etc.

[00:14] <BenGoldberg> I'm guessing that either freenode doesn't yet do reverse ip6 lookup, or something is misconfigured, or perhaps our server doesn't have a name.

[00:15] <geekosaur> I think it does them, but either usually doesn't get an answer fast enough or has a bad upstream DNS; many but not not all ipv6 hosts seem to not get resolved

[00:16] <geekosaur> for example, it usually gets the linode I'm on right

[00:16] <AlexDaniel> BenGoldberg: whateverables are running on my server though, not hack

[00:16] <konobi> you need PTR records

[00:17] <geekosaur> and last time I checked it was using ipv6, although maybe I broke that when I switched over to secure connections

[00:17] <konobi> your IP transit provider should be able to delegate the in.arpa zones to a nameserver of your choice if you want them to be reverse resolvable

[00:23] <AlexDaniel> yea, I have to do that

[00:24] *** zakharyas left
[00:26] <AlexDaniel> .tell jnthn hey! Turns out there was a bug in our code, so I guess you fixed everything. However, I found another issue: https://gist.github.com/AlexDaniel/44e5cde676dc6fdd340fd76fe04b9c1d

[00:26] <yoleaux> AlexDaniel: I'll pass your message to jnthn.

[00:26] *** pierre_ joined
[00:28] <AlexDaniel> .tell is it a known issue? Somehow I feel that it is. Basically, a lot of output on stdout of the process started with Proc::Async clogs up something in rakudo (well, the tap itself), and Promise.in(1) does not fire up at all because of that

[00:28] <yoleaux> AlexDaniel: I'll pass your message to is.

[00:28] <AlexDaniel> .tell jnthn is it a known issue? Somehow I feel that it is. Basically, a lot of output on stdout of the process started with Proc::Async clogs up something in rakudo (well, the tap itself), and Promise.in(1) does not fire up at all because of that

[00:28] <yoleaux> AlexDaniel: I'll pass your message to jnthn.

[00:28] <AlexDaniel> oops. :)

[00:29] <AlexDaniel> poor “is” will get this message on day. I wonder what his reaction would be

[00:29] *** AlexDaniel is now known as is

[00:29] <is> .

[00:29] <yoleaux> 00:28Z <AlexDaniel> is: it a known issue? Somehow I feel that it is. Basically, a lot of output on stdout of the process started with Proc::Async clogs up something in rakudo (well, the tap itself), and Promise.in(1) does not fire up at all because of that

[00:29] *** is is now known as AlexDaniel

[00:29] <AlexDaniel> or maybe not

[00:29] *** canopus left
[00:32] *** pierre__ joined
[00:33] *** pierre_ left
[00:34] <AlexDaniel> eval: say :35<lizmat>

[00:34] *** skrshn joined
[00:34] *** evalable6 joined
[00:34] <AlexDaniel> eval: say :35<lizmat>

[00:34] <skrshn> how do you read commands from a file in the REPL?

[00:35] <AlexDaniel> evalable6: say :35<lizmat>

[00:35] *** canopus joined
[00:35] <AlexDaniel> evalable6: come on, cooperate

[00:36] <MasterDuke> skrshn: EVALFILE might do what you want

[00:40] *** evalable6 left
[00:40] *** evalable6 joined
[00:41] *** lizmat joined
[00:42] * BenGoldberg thinks that yoleaux should ask for confirmation, if you .tell to a name which it hasn't ever seen before.

[00:47] <dalek> whateverable: 6139b4f | (Aleks-Daniel Jakimenko-Aleksejev)++ | Whateverable.pm6:

[00:47] <dalek> whateverable: OK, but now we also have to sink-try it

[00:47] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/6139b4f0da

[00:47] *** evalable6 left
[00:47] *** bisectable6 left
[00:47] *** benchable6 left
[00:47] *** committable6 left
[00:47] *** unicodable6 left
[00:47] *** benchable6 joined
[00:47] *** bisectable6 joined
[00:47] *** committable6 joined
[00:47] *** unicodable6 joined
[00:47] *** evalable6 joined
[00:47] *** ChanServ sets mode: +vv bisectable6 committable6

[00:47] <AlexDaniel> evalable6: say :35<lizmat>

[00:47] <evalable6> AlexDaniel, rakudo-moar 0c3d9e8: OUTPUT«(exit code 1) ===SORRY!=== Error while compiling /tmp/vqYCnTbRBb␤Invalid base-35 character: li<HERE>zmat␤at /tmp/vqYCnTbRBb:1␤------> say :35<lizmat><HERE><EOL>»

[00:49] <AlexDaniel> … where?

[00:49] <AlexDaniel> m: say :35<lizmat>

[00:49] <camelia> rakudo-moar 0c3d9e: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Invalid base-35 character: 3li7⏏5zmat␤at <tmp>:1␤------> 3say :35<lizmat>7⏏5<EOL>␤»

[00:51] <AlexDaniel> ok, let's say this is OK

[00:51] <PerlJam> z must be a really special character

[00:51] <AlexDaniel> (though I was expecting something like “invalid base-35 character ‘z’”

[00:51] <AlexDaniel> )

[00:52] <PerlJam> That would be more informative

[00:52] <AlexDaniel> PerlJam: well, it's just not a base-35 character :)

[00:52] <AlexDaniel> well I was staring at “li⏏zmat” for a minute and my conclusion is that it is good enough

[00:53] <AlexDaniel> li→z←mat :)

[00:53] *** seatek joined
[00:54] <PerlJam> More informative would be a message that says what the valid characters are.

[00:55] <skrshn> MasterDuke: thanks

[00:56] <AlexDaniel> PerlJam: well, that's a good point

[00:56] * AlexDaniel submits rakudobug

[01:04] *** pierre__ left
[01:11] *** rindolf left
[01:20] *** aborazmeh joined
[01:20] *** aborazmeh left
[01:20] *** aborazmeh joined
[01:22] *** zamanf joined
[01:24] *** bjz_ left
[01:30] *** cognominal left
[01:33] *** cognominal joined
[01:38] *** cxreg left
[01:39] *** mad__ left
[01:39] *** diakopter left
[01:40] *** pyrimidine joined
[01:43] *** dataf3l joined
[01:44] *** dataf3l left
[01:45] *** pyrimidine left
[01:46] *** diakopter joined
[01:46] *** giraffe left
[01:53] <samcv> .seen MadCapJake

[01:53] <yoleaux> I saw MadcapJake 2 Dec 2016 06:23Z in #perl6: <MadcapJake> well I'm gonna fiddle with this laptop some more and then hit the hay. Glad to be back! See you this weekend!

[01:53] <samcv> ready for 1.9 to be released now for Atom syntax highlighter

[01:55] <samcv> just fixed an annoying one, where regex didn't highlight anywhere except after = , ) { ~ symbols. so got around it

[01:56] <samcv> well. fixed the specific issue where bare regex used like => / / wouldn't highlight and also made rx/ / or m/ / anywhere, even after things it 'thinks' mean a regex is possible to follow

[01:57] <samcv> i've thought all day about how for it to recognize if bare / / is a regex and not the / operator. but haven't been able to come up with anything that would work

[01:58] <samcv> so bare ones at least work in almost all normal places at least and you can get it to highlight right

[01:59] *** giraffe joined
[02:01] <skrshn> I can use ^methods to get the methods of a object. How do I drill more and get the different ways to construct an object? I.e., getting more information for things like Method+{<anon|140540621714592>}.new ? 

[02:03] *** pyrimidine joined
[02:07] <MasterDuke> m: for IO::Path.^methods.grep({.name ~~ /"new"/}) {say .name ~ .signature.perl}

[02:07] <camelia> rakudo-moar a2ede3: OUTPUT«new:(RESTRICTED-CLASS $: | is raw)␤»

[02:08] <MasterDuke> m: for Seq.^methods.grep({.name ~~ /"new"/}) {say .name ~ .signature.perl}

[02:08] <camelia> rakudo-moar a2ede3: OUTPUT«new:(Seq $: Iterator:D $iter, *%_)␤new-consumed:(Seq $: *%_)␤»

[02:08] *** pyrimidine left
[02:08] <MasterDuke> skrshn: ^^^ something like that?

[02:12] <skrshn> MasterDuke: perfect. thanks

[02:12] <skrshn> Actually, no 

[02:13] <skrshn> Without reading the documentation, I wanted to know how I can create a new Date object for instance

[02:13] <seatek> samcv: is that atom editor including your recent fixes to highlighting perl6, if you build the editor from source?

[02:13] *** bjz joined
[02:14] <skrshn> I wanted to get something that will tell me one option is Date.new(:year(2016), :month(12), :day(3))

[02:15] <skrshn> m: for Date.^methods.grep({.name ~~ /"new"/}) { say .name ~ .signature.perl }

[02:15] <camelia> rakudo-moar a2ede3: OUTPUT«new:(Date $: | is raw)␤new-from-daycount:(Date $: $daycount, :&formatter, *%_)␤»

[02:15] <skrshn> this does not tell me that

[02:15] *** cibs left
[02:16] <skrshn> Is this even possible to find apart from reading documentation? 

[02:17] *** cibs joined
[02:19] <seatek> skrshn: new is where you pass in the attributes you'd like to defined on construction right? You're asking if there is a way to know ahead of time what attributes are necessary for object object construction?

[02:20] *** diakopter left
[02:21] <skrshn> seatek: yes. If I had not idea how to construct an object, say Date, I wanted to know all the different ways I can construct a new Date object 

[02:21] <seatek> so you want a list of all attributes for a class?

[02:21] <skrshn> I want to do this just by doing meta object queries

[02:22] *** rodarmor left
[02:22] <skrshn> I know you can get that from ^attributes. But sometimes, the constructor may be different from that

[02:22] <MasterDuke> interesting. if you look at https://github.com/rakudo/rakudo/blob/nom/src/core/Date.pm there definitely are more new()s than Date.^methods shows

[02:23] *** rodarmor joined
[02:24] <seatek> oh i see, where someone has overridden the normal new, which slurpily takes in everything

[02:24] <seatek> so you want to know when someone has overriden the normal way that "stock" new exists, and what the signatures are for those overriden "new"s

[02:25] *** pierre_ joined
[02:25] *** pyrimidine joined
[02:28] *** pierre_ left
[02:30] *** cognominal left
[02:30] * babydrop reads the backlog and grumbles

[02:32] <mspo> can I pass a block {} to a sub?

[02:32] <babydrop> mspo: yes

[02:33] *** cognominal joined
[02:35] <MasterDuke> babydrop: any idea what we're missing about ^methods? it doesn't seem to show multies (multis? which does [Coke] prefer?)

[02:36] <babydrop> m: for Date.^methods.grep({.name ~~ /"new"/}) { say .name ~ .signature.perl ~ .candidates }  

[02:36] <camelia> rakudo-moar a2ede3: OUTPUT«Method object coerced to string (please use .gist or .perl to do that)␤  in block  at <tmp> line 1␤Method object coerced to string (please use .gist or .perl to do that)␤  in block  at <tmp> line 1␤Method object coerced to string (please use .gist …»

[02:36] <babydrop> Nah, I'm going to go back to sleep.

[02:37] <ugexe> m: sub foo(Block $block) { say $block() }; foo { 42 * 10 }

[02:37] <camelia> rakudo-moar a2ede3: OUTPUT«420␤»

[02:37] <mspo> oh just Block type

[02:37] <mspo> seems so obvious now ;)

[02:38] <MasterDuke> m: for Date.^methods(:local).grep({.name ~~ /"new"/}) {for .candidates { say .name ~ .signature.perl } }

[02:38] <camelia> rakudo-moar a2ede3: OUTPUT«new:(Date $: $year, $month, $day, :&formatter, *%_)␤new:(Date $: :$year!, :$month = 1, :$day = 1, :&formatter, *%_)␤new:(Date $: Str $date, :&formatter, *%_)␤new:(Date $: Dateish $d, :&formatter, *%_)␤new:(Date $: Instant $i, :&formatter, *%_)␤ne…»

[02:38] <MasterDuke> skrshn: ^^^

[02:38] <MasterDuke> babydrop++

[02:38] <seatek> babydrop++ MasterDuke++ :)

[02:42] <skrshn> MasterDuke: +1

[02:42] <skrshn> babydrop: +1

[02:44] *** ilbot3 left
[02:45] *** AlexDaniel left
[02:46] *** cognominal left
[02:47] *** cognominal joined
[02:47] *** ilbot3 joined
[02:56] <skrshn> Has anyone used Julia? How does it its multi-dispath compare with Perl6? 

[02:58] *** diakopter joined
[02:58] <skrshn> Its claim to fame is in c-like performance using a JIT and type information

[02:59] <skrshn> I can't wait for Perl6 to get there :-). 

[03:01] *** cognominal left
[03:01] *** cognominal joined
[03:12] <mspo> julia embeds llvm I think

[03:16] *** cognominal left
[03:16] *** cognominal joined
[03:21] <babydrop> mspo: well, the type constraint is not required. In fact, by restricting it to block, you're throwing away, Sub and WhateverCode

[03:21] *** noganex_ joined
[03:22] *** cxreg joined
[03:22] <skrshn> mspo: that is correct

[03:24] *** noganex left
[03:24] *** thowe left
[03:30] *** kurahaupo_ left
[03:31] *** cognominal left
[03:31] *** cognominal joined
[03:32] *** kurahaupo__ joined
[03:32] <skrshn> what is the difference between put and say? I was not able to glean that from the docs

[03:33] *** skids joined
[03:34] <babydrop> skrshn: say calls .gist, put calls .Str

[03:34] <MasterDuke> doesn't say also truncate after a certain number of bytes?

[03:34] <babydrop> Nope

[03:35] <babydrop> .gist of List outputs only first 100 els tho

[03:35] <MasterDuke> ahh, that's what i was thinking of

[03:36] <skrshn> babydrop: thanks

[03:37] *** kurahaupo left
[03:38] *** kurahaupo joined
[03:45] *** tadzik left
[03:45] *** M-Illandan left
[03:45] *** Matias[m] left
[03:45] *** Matthew[m] left
[03:46] *** ilmari[m] left
[03:46] *** dp[m] left
[03:46] *** cognominal left
[03:46] *** cognominal joined
[03:46] <babydrop> Oh no... the matrix crashed!

[03:49] *** mrsolo left
[03:55] <dalek> doc: c2b2b1a | titsuki++ | doc/Type/Iterator.pod6:

[03:55] <dalek> doc: Fix example of pull-one

[03:55] <dalek> doc: review: https://github.com/perl6/doc/commit/c2b2b1af02

[03:55] <dalek> doc: 9a8e564 | titsuki++ | doc/Type/Iterator.pod6:

[03:55] <dalek> doc: Merge pull request #1029 from titsuki/fix-pull-one

[03:55] <synopsebot6> Link: http://doc.perl6.org/type/Iterator

[03:55] <dalek> doc: 

[03:55] <dalek> doc: Fix example of pull-one

[03:55] <dalek> doc: review: https://github.com/perl6/doc/commit/9a8e5640c8

[04:03] <samcv> seatek, you have to install Perl 6 FE

[04:03] <samcv> the builtin ''''Perl 6 Highlighter'''' basically highlights mostly like perl 5

[04:05] <samcv> but version 1.8 was released a few days ago has some of my fixes. Here's the changelog for v1.8, and v1.9 which will be released whenever MadCapJake does the pull https://github.com/samcv/language-perl6fe/blob/testing/CHANGELOG.md

[04:05] <samcv> it's a long list!

[04:08] <seatek> samcv, thanks! :) I'll just install through a .deb then rather than compiling. so these are separately available modules... i'm really curious how the syntax highlighting will compare to emacs

[04:09] <seatek> and for regex vs op on '/' - seems like it would be very very hard without knowing the context of the stuff around it

[04:09] <seatek> that stuff makes me crazy, because it's SO MUCH thinking for so little a thing :)

[04:10] <seatek> emacs highligher gets confused by the use of < or > stuff around quotes '"'

[04:12] <seatek> so much so that i've mostly stopped using the <> syntax for hash keys

[04:14] *** pyrimidine left
[04:18] *** ilmari[m] joined
[04:22] *** M-Illandan joined
[04:22] *** Matthew[m] joined
[04:22] *** tadzik joined
[04:22] *** dp[m] joined
[04:22] *** Matias[m] joined
[04:23] *** TEttinger left
[04:24] *** bjz left
[04:24] *** TEttinger joined
[04:27] *** jeek left
[04:28] *** jeek joined
[04:33] <samcv> seatek, yeah basically :P

[04:35] <samcv> before my changes it would only work if = , ( ) ~ or `when` were the thing preceeding it. or it was at the very start of the line. so added => as another whitelisted thing.

[04:35] *** kurahaupo__ left
[04:35] <samcv> plus also made rx/ or m/ always highlight no matter where it was, so you can always add that in case you're having it come after something odd

[04:35] *** kurahaupo left
[04:36] <samcv> well in version 1.9 it'll be like that

[04:36] <samcv> 1.8 doesn't have that change

[04:36] *** AlexDaniel joined
[04:36] <AlexDaniel> m: say :35<lizmat>

[04:36] <camelia> rakudo-moar 37ead5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Invalid base-35 character 'z': 3li7⏏5zmat. Please use one of 0..9, A..Y␤at <tmp>:1␤------> 3say :35<lizmat>7⏏5<EOL>␤»

[04:37] <babydrop> Don't tell me there's something wrong with it :)

[04:37] <AlexDaniel> m: say :35<lizmatz>

[04:37] <camelia> rakudo-moar 37ead5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Invalid base-35 character 'z': 3li7⏏5zmatz. Please use one of 0..9, A..Y␤at <tmp>:1␤------> 3say :35<lizmatz>7⏏5<EOL>␤»

[04:37] <AlexDaniel> well, it can probably tell about all invalid characters…

[04:37] * babydrop idly mentions my $x = 42|72 highlights 42 as a number, but 72 as not

[04:38] <babydrop> AlexDaniel: I rather we didn't make an already dense method denser.

[04:38] <AlexDaniel> babydrop: I'll think about it :D

[04:39] <AlexDaniel> but yes, what we have now is really good, I think

[04:39] <AlexDaniel> babydrop++

[04:39] <babydrop> AlexDaniel: the error is different for :35('meows') form cause that one uses val()

[04:39] <AlexDaniel> m: say :35('lizmatz')

[04:39] <camelia> rakudo-moar 37ead5: OUTPUT«Cannot convert string to number: malformed ':35' style radix number, expecting '>' after the body in '3:35<li⏏5zmatz>' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[04:39] <AlexDaniel> oh and that's not a compile-time error

[04:39] <babydrop> yeah

[04:40] <AlexDaniel> so I guess people should prefer <> where possible?

[04:40] <babydrop> I guess

[04:40] <samcv> m: q'test'

[04:40] <camelia> rakudo-moar 37ead5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3q'test7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        statement modifier l…»

[04:40] <samcv> AlexDaniel, do you know, i think this should work?

[04:40] <babydrop> m: say :12(':36<inseption>')

[04:40] <camelia> rakudo-moar 37ead5: OUTPUT«52644193907927␤»

[04:40] *** bjz joined
[04:40] <samcv> m: say q 'test'

[04:40] <camelia> rakudo-moar 37ead5: OUTPUT«test␤»

[04:41] <AlexDaniel> m: say q‘test’

[04:41] <camelia> rakudo-moar 37ead5: OUTPUT«test␤»

[04:41] <AlexDaniel> hm

[04:41] <samcv> yeah i found it while i was getting all the q's working in Atom P6 FE

[04:41] <babydrop> samcv: it's cause ' is a valid identifier character. It's not supposed to work there

[04:41] <AlexDaniel> right!

[04:41] <samcv> but it works with a space? ah ok

[04:41] <samcv> so that should be documented

[04:41] <AlexDaniel> m: say q-test-

[04:41] <camelia> rakudo-moar 37ead5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3say q-test-7⏏5<EOL>␤    expecting any of:␤        prefix␤        term␤»

[04:41] <AlexDaniel> m: say q -test-

[04:41] <camelia> rakudo-moar 37ead5: OUTPUT«test␤»

[04:41] <AlexDaniel> same thing

[04:41] <samcv> say q -test-

[04:42] <samcv> m: say q -test-

[04:42] <camelia> rakudo-moar 37ead5: OUTPUT«test␤»

[04:42] <samcv> ah kk

[04:42] <AlexDaniel> well, but… that's LTA

[04:43] <samcv> what's LTA stand for?

[04:43] <babydrop> It's perfectly fine

[04:43] <AlexDaniel> less than awesome

[04:43] <babydrop> You don't call qameowa LTA.

[04:43] <AlexDaniel> babydrop: well, it would've been awesome if it said that you have to use a space there…

[04:43] <samcv> yeah S02 seems to imply it should work. idk should i file a bug on it or no?

[04:43] <babydrop> There's 10FFFF give or take characters available for use, we can live with a few thousand not being available.

[04:43] <AlexDaniel> samcv: no

[04:43] <samcv> ok so that's the correct functionality

[04:44] <samcv> it not working

[04:44] <AlexDaniel> yes it's correct

[04:44] <samcv> just the error isn't that great

[04:44] <AlexDaniel> yes, not sure if there is a way to improve it though

[04:44] <samcv> ok, so i'll make a PR for the docs to say you can't use https://docs.perl6.org/language/syntax#Identifiers any of these

[04:44] *** m0ltar left
[04:44] <samcv> so it's documented

[04:44] <babydrop> commit directly

[04:44] <AlexDaniel> samcv: yes please, though you can use them if you use a space, I think?

[04:44] <samcv> yeah exactly

[04:45] <samcv> every thing i tried works if you use a space

[04:45] <babydrop> m: say q ameowa

[04:45] <camelia> rakudo-moar 37ead5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Alphanumeric character is not allowed as a delimiter␤at <tmp>:1␤------> 3say q7⏏5 ameowa␤»

[04:45] <AlexDaniel> () don't work without a space too

[04:45] <babydrop> heh

[04:45] <babydrop> IIRC that works in Perl 5 :)

[04:46] <AlexDaniel> u: pile of poo

[04:46] <unicodable6> AlexDaniel, U+1F4A9 PILE OF POO [So] (💩)

[04:46] <AlexDaniel> m: say q 💩meow💩

[04:46] <camelia> rakudo-moar 37ead5: OUTPUT«meow␤»

[04:46] <AlexDaniel> m: say q💩meow💩

[04:46] <camelia> rakudo-moar 37ead5: OUTPUT«meow␤»

[04:46] <AlexDaniel> with space or without, poo works

[04:46] <samcv> i tried to get all those weird things to work

[04:47] <samcv> but for whatever reason it wasn't working :(

[04:47] <samcv> i mean i have it working for heredocs

[04:47] <samcv> but i have no clue why it failed to work for whatever you wanted

[04:49] <AlexDaniel> m: say Q:w'test'

[04:49] <camelia> rakudo-moar 37ead5: OUTPUT«5===SORRY!5===␤Unrecognized adverb: :w'test␤at <tmp>:1␤------> 3say Q:w'test7⏏5'␤Couldn't find terminator ' (corresponding ' was at line 1)␤at <tmp>:1␤------> 3say Q:w'test'7⏏5<EOL>␤    expecting any of:␤        '␤␤»

[04:50] <AlexDaniel> babydrop: /o\ there are just too many cases to cover

[04:51] <AlexDaniel> is there a unicode character for /o\?

[04:53] <AlexDaniel> u: 🙆

[04:53] <unicodable6> AlexDaniel, U+1F646 FACE WITH OK GESTURE [So] (🙆)

[04:53] <AlexDaniel> well… I'm not sure if that's ok

[04:54] <AlexDaniel> u: 💆

[04:54] <unicodable6> AlexDaniel, U+1F486 FACE MASSAGE [So] (💆)

[05:03] <samcv> ugh literally put my regex through ruby, because that's the engine that atom/textmate/whatever uses

[05:03] <samcv> and it works fine

[05:03] *** pyrimidine joined
[05:04] <samcv> backreferences are used fine for the heredocs

[05:11] *** pierre__ joined
[05:12] <babydrop> star: use DBIish

[05:12] <camelia> star-m 2016.10: ( no output )

[05:13] <babydrop> .tell stmuk_ does a R* install run module tests? If yes, may be worth ensuring this ticket is resolved prior to next release: https://github.com/perl6/DBIish/issues/77

[05:13] <yoleaux> babydrop: I'll pass your message to stmuk_.

[05:13] *** pierre__ left
[05:14] *** pierre_ joined
[05:15] *** BenGoldberg left
[05:16] <skrshn> samcv: in your update, does if ( 1 <= @*ARGS.elems ) { ... } work?

[05:17] <samcv> let me check

[05:17] <skrshn> In the vim-perl module, it does not work

[05:17] <samcv> https://i.imgur.com/OBmXG9m.png

[05:18] <samcv> looks fine

[05:18] *** pierre_ left
[05:18] <skrshn> awesome

[05:18] <babydrop> skrshn: FWIW .elems isn't needed there

[05:18] <babydrop> Arrays does Cool

[05:19] <MasterDuke> neither are those () around the conditional

[05:19] <samcv> skrshn, it seems to work for me with vim?

[05:19] <babydrop> aye

[05:19] <samcv> maybe it's part of a larger amount of text that's breaking it?

[05:19] <skrshn> hmmm

[05:19] <samcv> do you have the full text?

[05:19] *** pierre_ joined
[05:19] <MasterDuke> i get bad hightlighting in vim for that text

[05:20] <samcv> filetype is perl6?

[05:20] <MasterDuke> starting from the <

[05:21] <MasterDuke> yeah

[05:21] <samcv> this is what i get https://i.imgur.com/Wh7jfwy.png

[05:21] <skrshn> This is what I get : https://imgur.com/a/6Mvkk

[05:22] <skrshn> Where r u getting vim-perl from?

[05:22] <skrshn> I am using 'vim-perl/vim-perl'

[05:22] <samcv> i think just whatever's in vim but

[05:22] <samcv> https://github.com/vim-perl/vim-perl6

[05:22] <samcv> this is where they moved it to

[05:22] <MasterDuke> http://i.imgur.com/RzVOkno.png

[05:23] <skrshn> MasterDuke: that is what I am getting too

[05:23] <skrshn> both vim-perl/vim-perl and vim-perl/vim-perl6 does not work for me

[05:24] <samcv> hm

[05:24] <samcv> that's... weird

[05:24] *** khw left
[05:24] <samcv> skrshn, that's what i see if i set the filetype to perl

[05:24] <samcv> :set ft=perl6

[05:25] <skrshn> No.. mine is set to perl6

[05:25] <samcv> hmm

[05:25] <samcv> well. i see exactly what you see if i set filetype to perl

[05:25] <skrshn> btw.. I am using vim8.0 on mac .. not sure if that has anything to do with it

[05:26] <MasterDuke> vim8.0 on linux here

[05:26] <samcv> this is what i see https://i.imgur.com/NVzXWHC.png

[05:26] <samcv> I'm using arch. didn't install any plugin just what vim came with. though

[05:27] <samcv> i think it's the same as in that repo?

[05:27] <samcv> i mean i made a PR to the perl6 one

[05:27] <samcv> i remember it being the same

[05:27] <samcv> sec

[05:27] <skrshn> https://imgur.com/a/1qLwE

[05:28] <MasterDuke> i'm using arch also

[05:28] <samcv> hmm..

[05:28] <samcv> wtf

[05:28] <samcv> this is my vimrc https://gitlab.com/samcv/dot-files/blob/master/_.vimrc

[05:30] <MasterDuke> my ~/.vimrc is 'set mouse-=a'

[05:31] <MasterDuke> what's the md5sum of your ~/.vim/syntax/perl6.vim?

[05:32] <skrshn> samcv: it works if I use your vimrc

[05:32] <samcv> it highlights fine even if i remove my vimrc or run vim as root

[05:32] <samcv> oh?

[05:32] <samcv> \o/

[05:32] <MasterDuke> mine is 683772507d529bcf195b549d9152326b

[05:32] <samcv> /usr/share/vim/vim80/syntax/perl6.vim mine's here

[05:32] <samcv> 3dd289aa3adbdd2f3a47fda089fb637a

[05:33] <skrshn> https://imgur.com/a/qW9g0

[05:33] <samcv> skrshn, using my vimrc?

[05:33] <skrshn> yes

[05:33] <samcv> lemme do a diff

[05:33] <samcv> between git perl6 vim and the one i have

[05:34] <MasterDuke> ah, i removed my ~/.vim/syntax/perl6.vim and now it highlights that line fine

[05:34] <samcv> heh

[05:35] <samcv> heh https://cry.nu/p/x20b this is a diff

[05:36] <samcv> i think they're mostly the same one's just been preprocessed or something

[05:36] <samcv> idk. submitted a PR to vim-perl. a while later they tell me to do the PR in vim-perl6

[05:36] <samcv> and it's been months?

[05:36] <samcv> no reply

[05:38] <skrshn> so I removed both vim-perl and vim-perl6.. only used the default one that came with vim8.0 -- works!

[05:39] <samcv> sweet

[05:39] <samcv> yeah i think the one in that repo isn't 'preprocessed' 

[05:39] <samcv> so i think that's causing the issues

[05:39] <samcv> for more complex things or something? no clue

[05:40] <skrshn> or there might have been a regression

[05:40] *** darutoko joined
[05:41] *** pierre__ joined
[05:41] <skrshn> I also see this https://imgur.com/a/pR8XH

[05:42] *** pierre_ left
[05:44] <skrshn> samcv: do you know of anything in the atom/perl6fe version that works better than what is there in vim8.0?

[05:44] <samcv> uhm

[05:44] <skrshn> I have not gone through the changelogs in detail

[05:45] <skrshn> you don't have to be exhaustive.. just few or many .. I ssh into machine so atom is not an option for me

[05:45] <samcv> uh

[05:47] <samcv> heh looks like they have the same issue with Q[] quoting forms highlighting characters that shouldn't be escaped

[05:48] <samcv> well looking at it here it doesn't allow q{{}} q(()) though that's not that big

[05:48] <samcv> skrshn, you should check the changelog https://github.com/samcv/language-perl6fe/blob/testing/CHANGELOG.md

[05:48] <skrshn> yes 

[05:48] <samcv> well it only is there for 1.8 and the soon to be released 1.9, whenever madcapjake takes my pull

[05:48] <samcv> it's not thatttt long a list

[05:49] <samcv> idk i haven't used vim too heavily for a while. i know it was mostly good when i was using it. but i wasn't doing as many things with it then

[05:49] <samcv> oh it can do heredocs

[05:50] <samcv> doesn't seem to work on vim

[05:50] <skrshn> Ok

[05:50] <skrshn> good to know

[05:51] <samcv> heh even got q:to/📝🔚/ working recently

[05:51] <samcv> well today actually

[05:51] <samcv> let me check if vim lets you nest “ ” or q[ [] ]

[05:52] *** rburkholder left
[05:52] <samcv> ok it doesn't support fancy quotes at all

[05:53] <samcv> uhhh it doesn't support multiline comments

[05:53] <seatek> does atom do multiple file split vertically? 

[05:53] <samcv> yes

[05:53] <seatek> ooo!

[05:54] <seatek> and horizontally to then yes?

[05:54] <samcv> like #`( #`(( #`( #`｢ idk not gonna list them all

[05:54] <samcv> yeah seatek 

[05:54] <seatek> and perl6 syntax highlight?

[05:54] <samcv> yeah

[05:54] <seatek> emacs keybindings?

[05:54] <samcv> you can get a plugin for that

[05:54] <samcv> pretty sure

[05:54] <seatek> i'm feeling... happiness?

[05:55] <samcv> aww vim doesn't support multi line comments at all. that's pretty lame

[05:55] <seatek> emacs does awesome at multiline comments. even helps you out with them

[05:55] <skrshn> yes it is 

[05:55] <samcv> can even nest #`(  ( ) ) them in atom now too

[05:55] <skrshn> didn't notice yet

[05:55] <samcv> and it'll match them

[05:56] <seatek> so can you easily program search/replace macros pretty easily in atom?

[05:56] <seatek> such as... like in emacs i frequently "record" keystrokes... and play them back

[05:56] <samcv> prolly

[05:56] <samcv> there's so many plugins

[05:57] <seatek> hmmm

[05:57] <samcv> and really nice to search all the functions you can do

[05:57] <seatek> does it have a sense of classes and methods in perl6?

[05:57] <samcv> ctrl + shift + p for me, and search for like every thing

[05:57] <samcv> yeah

[05:58] <seatek> ok that's a step up then

[05:58] <samcv> does vim not highlight that?

[05:58] *** Cabanossi left
[05:59] <seatek> i mean logically know about classes... like you can highlight a method in one file, and it can take you to where it was defined in the class

[05:59] <seatek> IDE'ish type stufff ;)

[05:59] *** Cabanossi joined
[05:59] <samcv> oh

[06:00] <samcv> can emacs do that for perl 6?

[06:00] <seatek> i've never seen anything be able to do that with perl... except Eclipse did a bit ...

[06:00] *** rurban joined
[06:00] *** rurban left
[06:00] <samcv> there's some perl 6 tool thing that supposed to let you click on things to get the docs

[06:00] <seatek> you could do it by running a separate type of ctags i think

[06:00] <samcv> but it doesn't work

[06:00] <seatek> yeah

[06:00] <samcv> so i disabled that plugin sadly

[06:00] <samcv> it just errors, idk how old it is

[06:01] *** djbkd joined
[06:01] <seatek> i wonder if things like that will be easier with perl6 being more standardized, if it is..

[06:01] <skrshn> what would be cool would be to have syntax highlighting based on the parse tree !!!

[06:02] <samcv> heh

[06:02] <samcv> if somebody made a perl 6 based editor that would be great

[06:02] <seatek> i would hate to load a large file for editing with that...

[06:02] <samcv> Perl 6's killed app!

[06:02] <samcv> will be a perl 6 editor!

[06:02] <samcv> haha

[06:03] <AlexDaniel> seatek: I am pretty sure spacemacs can do that by default

[06:03] <seatek> padre needs to update

[06:03] <seatek> ooo really?

[06:03] <samcv> with perl 6?

[06:03] <AlexDaniel> maybe with perl 6 too, I remember it did something smart

[06:04] <seatek> "sophisticated and polished". Emacs advanced kit focused on Evil

[06:05] <AlexDaniel> I mean, maybe it was giving false positives sometimes, but it was better than nothing

[06:05] <babydrop> m: use nqp; my $x = (1,2); say $x.^attributes; say nqp::getattr(nqp::decont($x), List, '$!reified')

[06:05] <camelia> rakudo-moar acbbc8: OUTPUT«(List $!reified Mu $!todo)␤(1 2)␤»

[06:05] <babydrop> I don't get it... A List has an attribute $!reified of... type List?

[06:06] <AlexDaniel> seatek: spoiler: I stopped using it after a year or so

[06:06] <seatek> why??

[06:07] <AlexDaniel> well, generally I think it is easier to build upon something simple than trying remove features from something complex… and there is definitely some shit you want removed :)

[06:08] <skrshn> :-)

[06:08] <babydrop> m: dd (lazy (1,2)).Array

[06:08] <camelia> rakudo-moar acbbc8: OUTPUT«(1, 2, Any, Any, Any, Any, Any, Any, Any, Any... (lazy list)␤»

[06:08] <seatek> so irritating stuff would sneak in sometimes during your normal workings, that you'd have to find a way to work around?

[06:09] <seatek> oh they've changed around stuff

[06:09] <seatek> making it more vim-ish in some ways

[06:09] <AlexDaniel> also, there are two modes I think

[06:09] <AlexDaniel> one is vim-ish and another one is emacs-ish

[06:10] <AlexDaniel> I've been trying the vim-ish one… maybe if I didn't, it would've been different, not sure right now

[06:10] <seatek> wow i would have never had the guts or craziness to dive into emacs innards like they must have had to for this

[06:11] <AlexDaniel> well, not really… they've just thrown many packages into a huge pile and that's it

[06:12] <AlexDaniel> you can install evil and a bunch of other stuff and it will work just as well

[06:12] <seatek> "Spacemacs was initially intended to be used by Vim users who want to go to the next level by using Emacs"

[06:12] <seatek> you went backwards AlexDaniel !

[06:13] <AlexDaniel> yea I know. In retrospect it was a bad idea

[06:13] <seatek> well, i do like that it's purple

[06:14] <seatek> great bottom display

[06:14] <seatek> i should try it for real

[06:14] *** aborazmeh left
[06:17] <seatek> i search for "spacemacs perl6" and the 10th result is "Is Assange alive?"

[06:18] <skrshn> samcv: is it easier to write perl6fe for atom than vim script? 

[06:18] <AlexDaniel> seatek: well, the first result should actually be this: https://github.com/syl20bnr/spacemacs/issues/5019

[06:22] <AlexDaniel> babydrop: by the way, it is quite interesting what they do in spacemacs project to keep the ticket list clean

[06:22] <AlexDaniel> babydrop: for example, see this: https://github.com/syl20bnr/spacemacs/issues/7334 . They are basically drowning in all the tickets :)

[06:24] <samcv> skaji, probably. idk though i wish i could have more logic than just regex to do it

[06:24] <samcv> but it's easier

[06:24] <babydrop> AlexDaniel: so random people get random issues?

[06:25] <samcv> but it's textmate style grammars which use https://en.wikipedia.org/wiki/Oniguruma and it's the same grammar github uses to highlight perl 6 code

[06:25] <samcv> fyi

[06:25] *** bjz_ joined
[06:25] *** bjz left
[06:25] *** shadowpaste left
[06:25] <babydrop> AlexDaniel: I like rust's method. A bot randomly assigns a PR to a contributor to review and merge (dunno if they do that for issues too)

[06:26] <AlexDaniel> babydrop: at the moment we have no problem with PRs, I think

[06:26] <AlexDaniel> but yeah, that's an interesting idea for issues…

[06:26] <skrshn> samcv: thanks

[06:28] * babydrop wants to have a problem with PRs

[06:28] <AlexDaniel> babydrop: the idea there is to clean the list of issues, not to force people to actually do stuff

[06:28] <AlexDaniel> you already know that reviewing one thousand tickets is a bit of a problem :)

[06:29] *** telex left
[06:30] <AlexDaniel> we can actually try something like this for RT queue as an experiment

[06:30] <AlexDaniel> though I guess not many will be interested

[06:33] <skrshn> m: my $a = "foo"; say "Hello $($a // "bar")";

[06:33] <camelia> rakudo-moar 5635c5: OUTPUT«Hello foo␤»

[06:33] <skrshn> m: my $a = "foo"; say "Hello {$a // "bar"}";

[06:33] <camelia> rakudo-moar 5635c5: OUTPUT«Hello foo␤»

[06:33] <skrshn> whats the difference?

[06:34] <seatek> AlexDaniel: i'm liking very much a better way to work with buffers

[06:34] <AlexDaniel> seatek: ?

[06:34] *** MilkmanDan left
[06:35] <seatek> just read a thing where the buffer list can be a constant thing there for you, for easier switching

[06:35] *** pierre__ left
[06:35] <AlexDaniel> seatek: huh?

[06:35] <AlexDaniel> seatek: you mean ido?

[06:35] <seatek> buffers... emacs buffers... like files... when you're working with 10 or 20 files at once

[06:35] <babydrop> skrshn: one creates a new block the other doesn't

[06:36] <seatek> i've never found a very smooth and satisfying way to work with them

[06:36] <AlexDaniel> seatek: yea, but what is different in spacemacs?

[06:36] <skrshn> babydrop: thanks. where can I find in docs? been searching

[06:37] <babydrop> m: {say "Hello ${$^a // "bar"}"}("foo")

[06:37] <camelia> rakudo-moar 5635c5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of ${$^a // "bar"}; in Perl 6 please use $($^a // "bar") for hard ref or $::($^a // "bar") for symbolic ref␤at <tmp>:1␤------> 3{say "Hello ${$^a // "bar"}7⏏5"}("foo")␤»

[06:37] <babydrop> o.O

[06:37] <seatek> a b hotkey that provides a defined area, instead of replacing existing editing buffers in front of your face

[06:37] <babydrop> skrshn: no idea, sorry.

[06:37] <skrshn> babydrop: np

[06:37] <AlexDaniel> skrshn: there is a high chance that it is not, please file a doc issue

[06:38] <skrshn> AlexDaniel: sure

[06:38] <AlexDaniel> skrshn: and in case it is documented somewhere, include “I looked here, here and here” in your issue, so that we can add appropriate links

[06:38] *** telex joined
[06:38] <AlexDaniel> skrshn: https://github.com/perl6/doc/issues

[06:38] *** djbkd left
[06:39] *** xinming_ joined
[06:39] <AlexDaniel> skrshn: I still don't get it, sorry :|

[06:39] *** MilkmanDan joined
[06:40] <skrshn> AlexDaniel: what are you talking about? 

[06:40] <AlexDaniel> oops

[06:40] <babydrop> hahaha

[06:40] <AlexDaniel> seatek: ↑

[06:40] <skrshn> AlexDaniel: :-)

[06:42] *** xinming left
[06:47] *** nightfrog left
[06:48] <skrshn> For general info on string expansion where should I look in the docs? I don't see anything here https://docs.perl6.org/language.html

[06:49] *** nightfrog joined
[06:49] <AlexDaniel> skrshn: https://docs.perl6.org/language/quoting maybe?

[06:50] <skrshn> cool tx

[06:53] <seatek> i blame a customer for distracting me :)

[06:56] *** pierre_ joined
[06:56] <babydrop> What would be the negation of a wordboundary? ala \B in Perl 5?

[06:59] <AlexDaniel> babydrop: <!before «> ? :X I don't know

[06:59] <skrshn> samcv: one thing that I miss in vim-perl is the ability to type \tau<TAB> and it get replaced with the τ symbol. This works very well in the julia-vim

[06:59] <babydrop> m: say "meow foo" ~~ m:g/<!before «>/

[06:59] <camelia> rakudo-moar 5635c5: OUTPUT«(｢｣ ｢｣ ｢｣ ｢｣ ｢｣ ｢｣ ｢｣)␤»

[07:00] <skrshn> is it there in atom? 

[07:00] <babydrop> $ perl -wlE 'say "meow foo" =~ /(\B.)/g'

[07:00] <samcv> is that just a vim feature skrshn 

[07:00] <babydrop> eowoo

[07:00] <babydrop> m: say "meow foo" ~~ m:g/<!before «>./

[07:00] <camelia> rakudo-moar 5635c5: OUTPUT«(｢e｣ ｢o｣ ｢w｣ ｢ ｣ ｢o｣ ｢o｣)␤»

[07:00] <babydrop> m: say "meow foo" ~~ m:g/<!before [«|»]>./

[07:00] <camelia> rakudo-moar 5635c5: OUTPUT«(｢e｣ ｢o｣ ｢w｣ ｢o｣ ｢o｣)␤»

[07:00] <skrshn> no.. it is special to julia-vim

[07:00] <babydrop> AlexDaniel++

[07:00] <samcv> skrshn, there's probably ways to do that maybe

[07:01] <skrshn> its probably easy to do by looking at how it is implemented in julia-vim. I need to up my vim script skills before I can do it myself

[07:02] <AlexDaniel> m: say "meow foo" ~~ m:g/ <!|w>. /

[07:02] <camelia> rakudo-moar 5635c5: OUTPUT«(｢e｣ ｢o｣ ｢w｣ ｢o｣ ｢o｣)␤»

[07:02] <AlexDaniel> babydrop: ↑ ?

[07:02] <skrshn> it makes a lot of sense -- they have a good mapping between latex symbols so you could do \sqrt<TAB> and it expands to √

[07:03] <samcv> idk skrshn i would just add it to my compose key :\

[07:03] <samcv> tbh

[07:03] <samcv> speaking of which i should add \n and \t to my compose key list

[07:03] <samcv> growing every week that thing is

[07:03] <babydrop> AlexDaniel: first time I see the |w thing :/

[07:04] <samcv> u: new line

[07:04] <unicodable6> samcv, U+2424 SYMBOL FOR NEWLINE [So] (␤)

[07:04] <unicodable6> samcv, U+2B92 NEWLINE LEFT [So] (⮒)

[07:04] <unicodable6> samcv, U+2B93 NEWLINE RIGHT [So] (⮓)

[07:04] <AlexDaniel> babydrop: oh, it turns out these are actually mentioned in synopses

[07:04] <AlexDaniel> “Perl 5's \b is replaced by a <|w> "word boundary" assertion, while \B becomes <!|w>”

[07:04] <babydrop> Oh, awesome.

[07:04] *** CIAvash joined
[07:05] *** CIAvash left
[07:05] <samcv> also https://docs.perl6.org/language/regexes#<<_and_>>_,_left_and_right_word_boundary

[07:05] *** ZzZombo left
[07:05] <samcv> << and >>

[07:05] <samcv> do those convert to <|w> deep down though AlexDaniel ?

[07:06] <AlexDaniel> I have no idea

[07:06] <AlexDaniel> no I don't think so, because << >> are left/right ?

[07:06] <babydrop> samcv: doubt it, since they are directional

[07:09] *** domidumont joined
[07:10] *** CIAvash joined
[07:12] *** bjz joined
[07:13] *** domidumont left
[07:13] *** bjz_ left
[07:14] *** domidumont joined
[07:14] *** Khisanth left
[07:22] <AlexDaniel> m: say "meow foo" ~~ m:g/ <!wb>. /

[07:22] <camelia> rakudo-moar 5635c5: OUTPUT«(｢e｣ ｢o｣ ｢w｣ ｢o｣ ｢o｣)␤»

[07:23] <AlexDaniel> babydrop: ↑ this too

[07:23] <babydrop> What's the difference beteen the two?

[07:23] <babydrop> the <!|w> and <!wb>

[07:24] <AlexDaniel> “As mentioned above, the \b and \B word boundary assertions are gone, and are replaced with <|w> (or <wb>) and <!|w> (or <!wb>) zero-width assertions.”

[07:24] <AlexDaniel> so I guess no difference

[07:28] *** Khisanth joined
[07:28] *** domidumont left
[07:31] *** skrshn left
[07:31] <samcv> m: my $var ≔ 4;

[07:31] <camelia> rakudo-moar 5635c5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3my $var7⏏5 ≔ 4;␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        statement modifier loop␤»

[07:31] <AlexDaniel> huggable: texas

[07:31] <huggable> AlexDaniel, All of Perl 6's fancy Unicode operators have traditional ASCII symbol alternatives (aka Texas Variants): See http://doc.perl6.org/language/unicode_texas

[07:31] <AlexDaniel> meh

[07:32] <samcv> u: ≔

[07:32] <unicodable6> samcv, U+2254 COLON EQUALS [Sm] (≔)

[07:32] <AlexDaniel> huggable: save me from Texas :is: https://gist.github.com/AlexDaniel/c89bd2786f9b63f31e4c

[07:32] <huggable> AlexDaniel, Added save me from Texas as https://gist.github.com/AlexDaniel/c89bd2786f9b63f31e4c

[07:32] <AlexDaniel> samcv: ↑ ;)

[07:34] <samcv> heh AlexDaniel 

[07:37] <samcv> oh AlexDaniel ∧ would be && i believe https://en.wikipedia.org/wiki/Logical_conjunction

[07:38] <AlexDaniel> samcv: ? isn't it already there?

[07:38] <samcv> is it?

[07:39] <seatek> i've been having to dig through php the last hour or so. and probably a few hours more. sorry off topic. i just need someone to know.

[07:39] <AlexDaniel> https://gist.github.com/AlexDaniel/c89bd2786f9b63f31e4c#-and--1

[07:39] <samcv> m: oh it is

[07:39] <camelia> rakudo-moar 5635c5: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    is used at line 1␤    it used at line 1␤    oh used at line 1␤␤»

[07:39] <samcv> oops

[07:39] <samcv> yeah it is AlexDaniel . at the bottom :p

[07:41] <AlexDaniel> samcv: you think it should be higher up? Why don't you submit a pull request along with an RFC ticket? ;)

[07:41] <samcv> can you do a PR for gists?

[07:41] <babydrop> nope

[07:42] <AlexDaniel> I meant PR for rakudo… :)

[07:42] <samcv> k

[07:42] <babydrop> u: rx_syntax

[07:42] <unicodable6> babydrop, U+0072 LATIN SMALL LETTER R [Ll] (r)

[07:42] <unicodable6> babydrop, U+005F LOW LINE [Pc] (_)

[07:42] <unicodable6> babydrop, U+0078 LATIN SMALL LETTER X [Ll] (x)

[07:42] <unicodable6> babydrop, https://gist.github.com/c581129eb70ee76b4efee9332ebb1328

[07:42] <babydrop> ugh

[07:42] <AlexDaniel> … what did you mean?

[07:43] <babydrop> Stupid terminal doesn't let me copy-paste a single char

[07:43] <babydrop> u: ∧

[07:43] <unicodable6> babydrop, U+2227 LOGICAL AND [Sm] (∧)

[07:43] <babydrop> u: LOGAL OR

[07:43] <AlexDaniel> u: ʌ

[07:43] <unicodable6> babydrop, Found nothing!

[07:43] <unicodable6> AlexDaniel, U+028C LATIN SMALL LETTER TURNED V [Ll] (ʌ)

[07:43] <babydrop> u: LOGICAL OR

[07:43] <unicodable6> babydrop, U+2228 LOGICAL OR [Sm] (∨)

[07:43] <unicodable6> babydrop, U+22C1 N-ARY LOGICAL OR [Sm] (⋁)

[07:43] <unicodable6> babydrop, U+22CE CURLY LOGICAL OR [Sm] (⋎)

[07:43] <unicodable6> babydrop, https://gist.github.com/aeb33d8deb642f5033387953cb8c5c5e

[07:44] <AlexDaniel> MORPHOLOGICAL :D

[07:44] <samcv> yeah i'll do that AlexDaniel 

[07:44] <samcv> thanks for the list tho. that is very helpful

[07:44] * babydrop would expect a PR that adds ∧ would also add one for 'OR', for consistency.

[07:45] <samcv> yeah exactly

[07:45] <AlexDaniel> u: defined

[07:45] <unicodable6> AlexDaniel, Found nothing!

[07:47] *** djbkd joined
[07:48] <samcv> adding || for || may not be right. since || is boolean and & is boolean in maths. and  ∧ ∨ are like && and || in perl 6

[07:48] <moritz> lol I blug: https://perlgeek.de/blog-en/perl-6/2016-book-sudoku-formatting.html

[07:48] <samcv> whereas || in math is more like | and & in math is like & in perl 6

[07:48] <AlexDaniel> o_O

[07:49] <AlexDaniel> moritz: substr $sudoku, $line-number * 9, 9; # Uh!

[07:49] <AlexDaniel> moritz: why not rotor?

[07:50] <AlexDaniel> ah, I see

[07:54] *** domidumont joined
[07:59] *** setty1 joined
[08:09] *** bjz left
[08:09] *** bjz_ joined
[08:10] *** wamba joined
[08:11] *** setty1 left
[08:12] *** setty1 joined
[08:14] <babydrop> New Advent Post: https://perl6advent.wordpress.com/2016/12/04/day-4-quantum-secret-santa/

[08:14] *** skids left
[08:21] *** Tonik joined
[08:31] *** RabidGravy joined
[08:32] *** cognominal left
[08:35] *** firstdayonthejob joined
[08:37] *** CIAvash left
[08:40] *** djbkd left
[08:45] *** cognominal joined
[08:50] *** cibs left
[08:51] *** cibs joined
[08:52] *** nchambers is now known as God

[08:53] *** pyrimidine left
[08:55] *** AlexDaniel left
[09:00] *** pyrimidine joined
[09:01] <dalek> doc: 2f5bf36 | (Zoffix Znet)++ | doc/Type/Mu.pod6:

[09:01] <dalek> doc: Document Mu.emit

[09:01] <dalek> doc: 

[09:01] <dalek> doc: Added to Rakudo in https://github.com/rakudo/rakudo/commit/4e76827bb0

[09:01] <dalek> doc: Tests: https://github.com/perl6/roast/commit/e3c8d5a6e5

[09:01] <synopsebot6> Link: http://doc.perl6.org/type/Mu

[09:01] <dalek> doc: RT#128968: https://rt.perl.org/Ticket/Display.html?id=128968

[09:01] <dalek> doc: review: https://github.com/perl6/doc/commit/2f5bf36609

[09:01] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128968

[09:01] *** God is now known as nchambers

[09:01] * babydrop notes that &emit doesn't seem to be documented

[09:03] *** rurban joined
[09:04] *** rurban left
[09:07] *** domidumont left
[09:08] *** kurahaupo__ joined
[09:10] *** pierre_ left
[09:11] <babydrop> 0.o this hangs: ./perl6 --target=parse -e 'my ($, $ where 42)'

[09:11] <babydrop> Even tho without --target it works :\

[09:12] *** pierre_ joined
[09:14] <babydrop> Golfed ./perl6 --target=parse -e 'my ($, $)'

[09:29] *** CIAvash joined
[09:29] *** CIAvash left
[09:30] *** CIAvash joined
[09:31] *** CIAvash left
[09:32] *** CIAvash joined
[09:32] *** CIAvash left
[09:34] <stmuk_> babydrop: yes R* runs module tests and intrusive tests in upstream modules are a problem (eg. network access) 

[09:34] <yoleaux> 05:13Z <babydrop> stmuk_: does a R* install run module tests? If yes, may be worth ensuring this ticket is resolved prior to next release: https://github.com/perl6/DBIish/issues/77

[09:35] <stmuk_> https://github.com/rakudo/star/issues/77

[09:38] <RabidGravy> postgres is kind of strange in that  it doesn't install a test database that can be used (and you can bail if it doesn't exist,) I think all of Oracle, Sybase, Sql Server, Informix do

[09:39] <stmuk_> I've seen tests attempt to fire up temp postgres servers on high ports (but its very fragile)

[09:42] <RabidGravy> yeah, though that report does raise a few questions about the reporters situation, what kind of application is broken by a surprise table and given that is a possibility what kind of person installs un-tested software against a live instance of it

[09:43] <stmuk_> the test could rollback a transaction

[09:44] <RabidGravy> does postgresql rollback DDL?  a lot of engines don't

[09:45] <stmuk_> yes it does unlike mysql

[09:46] <stmuk_> https://github.com/perl6/DBIish/blob/master/t/36-pg-array.t

[09:47] <stmuk_> actually maybe the problem is using a standard env var to set the db

[09:48] *** CIAvash joined
[09:48] <RabidGravy> yeah, it should probably require some environment to set the DB and skip all the active tests if it isn't set

[09:50] <CIAvash> babydrop: maybe it's the same bug as https://rt.perl.org/Public/Bug/Display.html?id=129262

[09:58] <RabidGravy> I wan't isn't-deeply in a test:)

[09:59] <RabidGravy> having performed an ugly filthy hack to work around the scope of 'state' variables

[10:04] <RabidGravy> and the latest advent post comes to the rescue by inspiring "ok $workflow2.states.map(*.WHICH).none ⊆ $workflow.states.map(*.WHICH).any, "differ""

[10:06] *** rindolf joined
[10:06] *** cxreg left
[10:07] <seatek> i've never noticed DBIish installing a test table. then again i don't leave credentials in my environment variables either.. i can't imagine dbiish would rely on environment variables for tests. unless it was an author test

[10:08] <seatek> can't imaging dbiish using a table called "sal_emp" either for a test table ;)

[10:08] <RabidGravy> a lot of libraries that interact with other software use environment variables

[10:10] <moritz> what else should it use?

[10:10] <RabidGravy> but yeah it does "/t/36-pg-array.t:  CREATE TABLE sal_emp ("

[10:10] <stmuk_> it should look for an existing sal_emp and add entries ;)

[10:10] <seatek> oh my gosh

[10:11] <seatek> well, it could never do it on mine because i don't allow environment variables to be used for such things -- because i'm SANE

[10:11] <seatek> we should get rid of that

[10:11] <RabidGravy> it should just use different environment variables

[10:12] <seatek> users would need to know about those ahead of time

[10:12] <RabidGravy> i.e. DBISH_PGDATABASE rather than PGDATABASE

[10:12] <RabidGravy> well that's what documentation is for

[10:13] <seatek> yeah shifts the blame onto them then

[10:13] <seatek> as long as we make the environment variables non-standard enough

[10:13] <RabidGravy> you can only stop people from shooting themselves in the foot if they aren't determined to do it

[10:13] *** geekosaur left
[10:13] *** domidumont joined
[10:13] <seatek> it's character building :)

[10:14] *** geekosaur joined
[10:14] <seatek> speaking of which, back to PHP now :( :(

[10:23] <Ulti> PHP 7?

[10:25] <seatek> nope 5... 

[10:25] <seatek> it makes me sad

[10:26] *** cyphase left
[10:26] <Ulti> samcv: re: perl6 editor in perl6 https://github.com/azawawi/farabi6

[10:27] <Ulti> seatek: the last PHP I did was 4.2 4.4 transition so feel lucky

[10:27] <Ulti> at a time when PHP 5 existed as only a blissful new hope no one used

[10:27] <Ulti> also Drupal :'( never dev Drupal stuff

[10:27] <Ulti> ever

[10:28] <Ulti> just write your own CMS from scratch 

[10:28] <seatek> that's like 7's promise.

[10:28] <seatek> yeah i had to play with drupal for a bit too

[10:28] <seatek> you might as well from scratch

[10:28] <seatek> considering how long it takes to figure out what other people were thinking

[10:28] <Ulti> though I imagine the average age of module maintainers isn't 17 anymore

[10:29] <seatek> these old things just keep coming back to haunt me

[10:29] <Ulti> :(

[10:30] <seatek> php makes me feel like i'm using someone else's functions they created haphazardly, and trying to make them all tie together into something that works

[10:30] <Ulti> its because that is what early PHP was

[10:30] <seatek> that would make sense 

[10:31] <Ulti> yeah the main one there is a slight mismatch of names and parameter orderings in the core

[10:31] <timotimo> don't forget function names in php were assigned so that as few as possible had the same strlen, because that was the hash function used for lookup :P

[10:31] *** cyphase joined
[10:31] <seatek> no way

[10:31] <seatek> that might explain why so many are crazy long

[10:31] <Ulti> sometimes its thing(needle, haystack) other times its thing(haystack, needle) which is just annoying

[10:32] <moritz> hayneedle, stack

[10:32] <seatek> :)

[10:32] <Ulti> steedle, hack

[10:33] *** pierre_ left
[10:34] *** lukaramu joined
[10:34] <seatek> preg_match. i remember when i first saw that i was so happy. but that happiness lasted a very short time

[10:34] <Ulti> PHP and JavaScript are great languages for demonstrating how important tooling and optimisation is to the survival of any language

[10:34] <timotimo> http://news.php.net/php.internals/70691

[10:35] <seatek> oh wow. :)

[10:35] <seatek> gotta hand it to him though for admitting it! :) that's pretty cool actually

[10:36] <timotimo> clearly it hasn't been like that for a long, long time

[10:36] <timotimo> but apparently about 100 of the functions php has are set up like that?

[10:36] <seatek> i like some of the stuff like nl2br

[10:36] *** pmurias joined
[10:36] <timotimo> how do you feel about hyphens in function names in perl6?

[10:36] <seatek> i love it when it works

[10:37] <seatek> but sometimes it confuses it

[10:37] <seatek> like method item-42() {}

[10:37] <pmurias> Ulti: wasn't it more ease of install and getting started with PHP (and know it has market share)?

[10:37] <timotimo> those are explicitly forbidden :)

[10:37] <seatek> hehe

[10:37] <timotimo> after the hyphen has the same constraints as the start of a name

[10:37] <moritz> seatek: the rules are that there can't be numbers on eitehr side, to avoid possible confusion with - as subtraction

[10:38] <timotimo> we don't allow function names to start with a number, either

[10:38] <timotimo> moritz: no, numbers on the left of a hyphen are allowed

[10:38] <seatek> yeah i noticed that when i was trying to do method code-404() ;)

[10:38] <Ulti> pmurias: thats how it started but not how it keeps going

[10:38] <timotimo> m: sub test4-twenty() { }

[10:38] <camelia> rakudo-moar 4e7682: ( no output )

[10:38] *** cxreg joined
[10:39] <seatek> i'm like, wow, yeah, perl can have dashes.. WHY IS THIS FAILING!? oh yeah, i didn't ready every single letter of every single doc yet for all the exceptional cases

[10:39] <Ulti> things lik PHPStorm is almost certainly a big reason PHP is still trucking

[10:39] <seatek> yeah it's super easy for web work

[10:39] <seatek> quick and dirty

[10:39] <Ulti> seatek: from what I recall there was a big drive to switch to dashes after enough kebab casers demanded more kebabs

[10:40] <seatek> i think it's so much clearer to read

[10:40] <Ulti> I like that it makes methods stand out from anything else

[10:40] <seatek> <> are also problemmatic in hashes sometimes

[10:40] <seatek> also

[10:40] <timotimo> buts subs are also allowed to have dashes, Ulti :)

[10:41] <timotimo> oh, ulti, could you re-run the jit log for me, please? :3

[10:41] <Ulti> sure so are variables, but no one really uses it there is what I meant

[10:41] <Ulti> because of things like $my-thing-$other-thing

[10:41] <timotimo> i added two ops to moar's jit, which might be able to improve jittedness of your frames a little bit

[10:41] *** pecastro left
[10:41] <timotimo> but i'd need a measurement to actually see if it does anything noteworthy

[10:41] <Ulti> erm I cant do it on the same computer :(

[10:41] <Ulti> well not until tomorrow

[10:41] <timotimo> oh, no need for the timings to be better

[10:41] <timotimo> i think i just need the jitlog :)

[10:42] <Ulti> k I can get that from here

[10:42] <timotimo> yay

[10:42] <timotimo> don't forget to build newest moar, too

[10:43] <Ulti> timotimo: do you want my moar to be on HEAD then rather than whatever rakudo pulls in?

[10:43] <Ulti> k 

[10:43] <Ulti> :(

[10:43] <Ulti> that means me doing a new setup

[10:43] <timotimo> oh, i'm sorry

[10:43] <Ulti> np

[10:43] <timotimo> don't have to do it quick, or soon

[10:43] <Ulti> hah I do if you want it done

[10:44] <timotimo> thing is, one of the things that currently weren't being jitted is "return", which might be hot

[10:45] *** pecastro joined
[10:45] *** CIAvash left
[10:45] *** ufobat joined
[10:46] <timotimo> actually ...

[10:46] *** seatek left
[10:46] <timotimo> it looks like almost all of those are either in the compiler or in emitting the profile

[10:46] <timotimo> so maybe it's not even worth taking a look

[10:48] *** seatek joined
[10:48] <Ulti> well I'll set up on head anyway

[10:52] <ufobat> good morning :-)

[10:53] <Ulti> morning

[10:54] <timotimo> greetings bat

[10:57] <moritz> m: say EVAL '4+2'

[10:57] <camelia> rakudo-moar 4e7682: OUTPUT«6␤»

[10:57] <moritz> didn't we have some kind of requirement to use MONKEY; or so?

[10:58] <moritz> ah well, glad it's gone

[10:58] <timotimo> no

[10:58] <timotimo> it's not gone

[10:58] <timotimo> m: my $unsafe-code = "say 'owned'"; EVAL $unsafe-code

[10:58] <camelia> rakudo-moar 4e7682: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤EVAL is a very dangerous function!!! (use the MONKEY-SEE-NO-EVAL pragma to override this error,␤but only if you're VERY sure your data contains no injection attacks)␤at <tmp>:1␤------> 3-code = "say '…»

[11:00] <RabidGravy> tadzik, if you get a minute I'd heartily commend https://github.com/tadzik/JSON-Unmarshal/pull/22 as my advent post will depend on it ;-)

[11:00] *** kurahaupo_ joined
[11:00] *** kurahaupo__ left
[11:01] <moritz> timotimo: :(

[11:01] <timotimo> RabidGravy: not bad

[11:01] <timotimo> moritz: TT came up with it :)

[11:06] *** cyphase left
[11:06] <RabidGravy> though having thought about https://github.com/jonathanstowe/Tinky-JSON in the shower I'm going to re-design it to be more generally useful

[11:07] *** cyphase joined
[11:08] <lizmat> RabidGravy: I hope tadzik will find the time...  he's doing some R&R in Lpn

[11:08] <lizmat> London atm and is travelling back home tonight

[11:09] *** hermes_ joined
[11:09] *** hermes_ is now known as zamanf_

[11:09] <lizmat> doing R&R&

[11:11] *** CIAvash joined
[11:12] *** zamanf left
[11:16] *** complain_ joined
[11:22] *** ugjka is now known as UgJkA

[11:24] *** FROGGS joined
[11:28] <dalek> doc: 51a2391 | (Jan-Olof Hendig)++ | doc/Type/Cool.pod6:

[11:28] <dalek> doc: Clarified that the argument to tanh is in radians and fixed incorrect example

[11:28] <dalek> doc: review: https://github.com/perl6/doc/commit/51a23913a6

[11:28] <synopsebot6> Link: http://doc.perl6.org/type/Cool

[11:34] *** firstdayonthejob left
[11:34] *** mefzz joined
[11:35] *** dogbert2 left
[11:36] *** dogbert17 joined
[11:44] *** abraxxa joined
[11:44] *** abraxxa left
[11:45] <dalek> doc: 2e32d84 | (Jan-Olof Hendig)++ | doc/Type/Cool.pod6:

[11:45] <dalek> doc: Added examples for acos

[11:45] <dalek> doc: review: https://github.com/perl6/doc/commit/2e32d84b94

[11:45] <synopsebot6> Link: http://doc.perl6.org/type/Cool

[11:46] *** mefzz left
[11:47] *** CIAvash left
[11:51] *** rburkholder joined
[12:02] *** cognominal left
[12:09] *** gregf_ left
[12:11] <dalek> doc: a9f077d | (Jan-Olof Hendig)++ | doc/Type/Cool.pod6:

[12:11] <dalek> doc: Replaced bogus asec examples

[12:11] <dalek> doc: review: https://github.com/perl6/doc/commit/a9f077d249

[12:11] <synopsebot6> Link: http://doc.perl6.org/type/Cool

[12:14] *** cognominal joined
[12:17] *** cognominal left
[12:20] *** cognominal joined
[12:31] *** ab6tract joined
[12:31] *** canopus left
[12:32] <ab6tract> m: my $b = bag <blood love>; my $m = ("blood" => 1.1, "rhetoric" => 1, "love" => 1.2).Mix; dd ($m (-) $b) (+) ($b (-) $m); dd ($b (-) $m) (+) ($m (-) $b); # shouldn't these be the same?

[12:32] <camelia> rakudo-moar 4e7682: OUTPUT«("love"=>0.2,"rhetoric"=>1,"blood"=>0.1).Mix␤("rhetoric"=>1).Bag␤»

[12:33] *** notostraca joined
[12:33] <hahainternet> can i define an infix operator that takes a parameter? similar to Z= 

[12:34] *** TEttinger left
[12:34] <timotimo> you mean a meta-operator?

[12:34] <hahainternet> oh is Z counted as a metaoperator? if so, yes :)

[12:35] <timotimo> i actually don't think implementing your own metaops with just a simple definition is implemented :(

[12:35] <hahainternet> not sure how in the repl i'd explore them

[12:36] <hahainternet> timotimo: that's a shame, but i appreciate that so much more seems to work and be coherent this time i'm making a good go at it

[12:36] <hahainternet> coercion / semicolon array list slips / custom metaoperators, two of those 3 are ludicrously complex

[12:37] <hahainternet> and other than minor annoyances it's been really fun so far

[12:37] <hahainternet> plus, i can just use a sub to do what i'm talking about

[12:37] <timotimo> good to hear :)

[12:37] <hahainternet> oh, 'Array of X' also broken, but again

[12:38] *** canopus joined
[12:38] <hahainternet> i would say at the moment it's quite difficult to know how to (for example) say 'type X is an Array of Integers with shape (2)'

[12:38] <timotimo> broken in what way?

[12:38] <hahainternet> m: class C is Array of Int {}

[12:38] <camelia> rakudo-moar 4e7682: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤No such method 'set_of' for invocant of type 'Perl6::Metamodel::ClassHOW'␤at <tmp>:1␤»

[12:38] <timotimo> oh

[12:39] <timotimo> i see

[12:39] <timotimo> well, that's because of the way Array gets parameterized

[12:39] <timotimo> i think?

[12:39] * hahainternet shrugs

[12:39] <hahainternet> this is just for fun code so it's not a problem

[12:39] *** notostraca left
[12:39] <hahainternet> but it is a problem if i wanted to use it to compete with a statically typed language i use

[12:39] <timotimo> perl6 is also supposed to be fun, so if you can't fun with it, that *is* a problem ;)

[12:40] <hahainternet> nah it's still fun

[12:40] <hahainternet> the fact i can do Z↹ as an operator is superb

[12:40] <hahainternet> i just wish i could parameterise that operator, so i can really express what i intend

[12:41] *** xinming_ is now known as xinming

[12:42] <timotimo> right

[12:42] <timotimo> Array gets its parameterization y having a custom method ^parameterize

[12:42] <hahainternet> yeah and typedarray.pm

[12:42] <hahainternet> i had a good read

[12:42] <timotimo> m: class C is Array[Int] { }

[12:42] <camelia> rakudo-moar 4e7682: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Cannot resolve caller trait_mod:<is>(C, Array, Array); none of these signatures match:␤    (Mu:U $child, Mu:U $parent)␤    (Mu:U $child, :$DEPRECATED!)␤    (Mu:U $type, :$rw!)␤    (Mu:U $type, :$nati…»

[12:43] <hahainternet> yeah i've tried every permutation i could think of

[12:43] <timotimo> that also don't work :\

[12:43] <hahainternet> providing a custom :of(Int) also doesn't

[12:43] <timotimo> m: constant ArrayInt = Array[Int]; class C is ArrayInt { }

[12:43] <camelia> rakudo-moar 4e7682: ( no output )

[12:43] <timotimo> there we go, that works

[12:43] <hahainternet> which is mentioned in one of the synopses i think

[12:43] <hahainternet> that's interesting

[12:43] <hahainternet> i didn't try that obviously

[12:43] <timotimo> not everybody can think of everything

[12:44] <hahainternet> still, it's a little surprising and certainly a bug(?)

[12:44] <seatek> like monkeys on typewriters ;)

[12:44] <hahainternet> i need to get filing tbqh

[12:44] <hahainternet> just don't have very much time

[12:44] <hahainternet> i'm off to try and fit a wardrobe into a space it won't fit into now :D

[12:44] <timotimo> that's fine. we got aware of it and maybe we'll make it work somehow

[12:44] <hahainternet> cheers timotimo o/

[12:44] <timotimo> cheers

[12:44] <timotimo> i'm AFK, too

[12:54] <moritz> m: class C does Array[Int] { }

[12:54] <camelia> rakudo-moar 4e7682: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Array[Int] is not composable, so C cannot compose it␤at <tmp>:1␤»

[13:02] <skaji> Hi,

[13:02] <skaji> I have a question.

[13:02] <skaji> If I use $watcher = IO::Notification.watch-path("."), how can I stop the $watcher?

[13:04] <moritz> $watcher.done maybe?

[13:05] *** espadrine joined
[13:05] <jnthn> m: say IO::Notification.watch-path(".").WHAT

[13:05] <yoleaux> 00:26Z <AlexDaniel> jnthn: hey! Turns out there was a bug in our code, so I guess you fixed everything. However, I found another issue: https://gist.github.com/AlexDaniel/44e5cde676dc6fdd340fd76fe04b9c1d

[13:05] <camelia> rakudo-moar 4e7682: OUTPUT«(Supply)␤»

[13:05] <yoleaux> 00:28Z <AlexDaniel> jnthn: is it a known issue? Somehow I feel that it is. Basically, a lot of output on stdout of the process started with Proc::Async clogs up something in rakudo (well, the tap itself), and Promise.in(1) does not fire up at all because of that

[13:05] <jnthn> So $watcher is a Supply, so it doesn't watch until you tap it. .tap gives back a Tap object, and that has a .close method on it that you use to stop watching.

[13:05] *** sena_kun joined
[13:08] *** seatek left
[13:09] *** flaviusb left
[13:09] <skaji> moritz, jnthn: thank you!

[13:09] <skaji> So in general, supplies themselves does not watch anything, so we don't need to "stop" them.

[13:09] <skaji> On the other hand, once we tap it, we must close the taps. Is this correct?

[13:10] <moritz> yes

[13:11] <jnthn> Indeed. NOte that if you do stuff like $watcher.map(...blah...).tap then the .close on that tap cascades up to the Watcher also

[13:11] <jnthn> And supply/react blocks do the appropriate subscription management also

[13:12] *** pierre_ joined
[13:12] *** pyrimidine left
[13:13] <skaji> moritz, jnthn: I understand. Thank you agian.

[13:14] <skaji> I hope it is clearly documented somewhere:) maybe in https://docs.perl6.org/language/concurrency.html

[13:14] *** kalkin-_ joined
[13:15] <moritz> skaji: if not, please add it yourself

[13:15] <kalkin-_> I'm currently reading the todays advent article, but it doesn't explain what Z=> is

[13:16] <mscha> m: multi sub foo(Int $x) { state $bar = 42; say $bar; }; foo(3); # OK, but ...

[13:16] <camelia> rakudo-moar 4e7682: OUTPUT«42␤»

[13:16] <moritz> (to the docs, I mean)

[13:16] <mscha> m: multi sub foo(Int $x where 1..10) { state $bar = 42; say $bar; }; foo(3); # huh?

[13:16] <camelia> rakudo-moar 4e7682: OUTPUT«(Any)␤»

[13:16] <kalkin-_> I know that Z is zip, and => is used to assign pairs(?), but is Z=> zip it as kv?

[13:16] *** kalkin-_ is now known as kalkin-

[13:17] <moritz> kalkin-: https://docs.perl6.org/language/operators#index-entry-Z_%28zip_meta_operator%29

[13:17] <moritz> Z as a meta operator applies the operator after it (here =>) pair-wise to the items from both lists

[13:18] <kalkin-> Ahh this makes sense, thanks

[13:19] *** domidumont left
[13:20] <skaji> moritz: year, you're right. But I don't know perl6 (or moarvm) internals enough to write documentation.

[13:20] <moritz> skaji: you don't need to know internals to write documentation

[13:20] <moritz> skaji: documentation are for user-visible features, and you just learned about some of them :-)

[13:21] <moritz> skaji: I don't want to pressure you to write docs, just wanting to argue against your imposter syndrome

[13:21] *** cog_ joined
[13:21] *** cognominal left
[13:23] <kalkin-> skaji: I don't know perl6 internals either, but still was able to submit few helpful patches. If you do something wrong, it just won't be accepted and you will learn something new

[13:23] *** pyrimidine joined
[13:25] <mscha> I'm doing http://adventofcode.com/2016 with Perl 6, it rulez...  Today I used the following piece of code:

[13:25] <mscha> $name.comb.grep(/<[a..z]>/).Bag.pairs.sort(*.key).sort(-*.value)».key[^5].join;

[13:26] <skaji> moritz, kalkin-: thanks, I hope I will in the near future.

[13:27] *** pierre_ left
[13:28] <skaji> meanwhile, I must write perl6 a lot.

[13:28] *** lucasb_ joined
[13:28] *** pyrimidine left
[13:28] <kalkin-> Is there a way to read the documentation with p6doc without explicetly providing the pagename each time via cmdline invocation?

[13:28] * kalkin- has something more like `info info` in mind

[13:29] <kalkin-> Hmm actually may be Pod::To::Info would be more useful, then reproducing info features in p6doc

[13:30] <lucasb_> kalkin-: you want browsable experience in the terminal?

[13:31] <kalkin-> I want a browsable expirience which is faster then my browser somewhere

[13:32] <lucasb_> kalkin-: if you had the docs html site locally in your machine would help? (I'm just curious)

[13:32] <lucasb_> I think a downloadable tarball of the docs site would be interesting

[13:33] <kalkin-> lucasb_: Configuring to use uzbl for reading docs would be helpful

[13:34] <kalkin-> i even think it would be okay for p6doc to have the abillity to follow links

[13:34] <kalkin-> And by default when invoked to display a similar welcome page like docs.perl6.org

[13:35] <kalkin-> but i guess once you have that you want to have some search feature and then you are to reproducing `info` features …

[13:36] <lucasb_> yeah, maybe something like pod2info is a better investiment of time

[13:37] <sena_kun> The one interested in .tar.gz version of documentation can look at https://github.com/perl6/doc/issues/718

[13:37] <lucasb_> but then, I'm not a 'info' user... I always type 'man something'. if it doesn't exist, then I search for the rendered info HTML manual in the web

[13:37] <kalkin-> IMHO the best way would be to have Pod::To::Info, provide some simple way for OS package maintainers to generate the info files during building the (rpm|deb|...) package

[13:37] <MasterDuke> also, https://docs.perl6.org/perl6.xhtml is the docs in one page

[13:38] <kalkin-> something like p6doc --to=Info --all --path foo/

[13:39] <lucasb_> sena_kun, MasterDuke: thanks for the tips

[13:40] <moritz> kalkin-: I think you're the first "info" user I met :-)

[13:40] <moritz> to me, it was always frustrating

[13:40] <dogbert17> hmm, the example on the IO::Notification page implies that $?FILE is the current directory, that can't be right

[13:40] <timotimo> did you know there's a all-docs-on-one-page thing?

[13:41] <moritz> not very intuitive, and often when the man page said "for more information, read the info", and then the info page was exactly the same as the mang page

[13:41] <kalkin-> moritz: actually I'm not, but there're some manpages which are just more awesome as info docs because they are BIG. i.e: zsh

[13:41] <moritz> s/mang/man/

[13:41] <moritz> kalkin-: why dream about a Pod::To::Info when you don't use info? :-)

[13:42] <kalkin-> generally i think info is underrated. It's really a good tool for shipping documentation (not manpages!)

[13:42] <timotimo> https://docs.perl6.org/perl6.xhtml

[13:42] <kalkin-> moritz: i use it only for things where it worse it

[13:42] <moritz> I think it has been superseeded by browsers, and HTML

[13:42] <moritz> and if your browser is laggy, fix your browser problems :-)

[13:42] <timotimo> wow, that page is BROKEN AF

[13:43] <kalkin-> moritz: btw I completely agree that info has confusing interface

[13:43] <timotimo> it allows scrolling to the side and the text goes below the menu

[13:43] <kalkin-> moritz: also sometimes i don't want to have a huge html engine + browser in my OS

[13:44] <lucasb_> The PDF output of Texinfo is very nice and readable

[13:45] <lucasb_> about the info browser, I wish I used it more, but I've never felt comfortable with it. I guess emacs people likes it better

[13:46] <lucasb_> the standard info2html or whatever it's called is good enought. I read the GNU manuals online generated from them

[13:47] *** cog_ left
[13:49] <sena_kun> Hmmm, is there a reason to mention proto methods in the docs?

[13:50] <timotimo> kalkin-: did you see what i wrote? the one-html-page version of the docs?

[13:50] *** bjz_ left
[13:50] <kalkin-> timotimo: no I missed it. This is awesome

[13:52] <kalkin-> I think this will do it for 80% of use cases

[13:53] <moritz> kalkin-: if you want to have a slim system (no browser on it), simply read the docs on your desktop or laptop

[13:55] <timotimo> like, with less?

[13:55] <kalkin-> moritz: our definition of slim system may differ

[13:55] *** cognominal joined
[13:56] <sena_kun> Who is responsible for https://docs.perl6.org/perl6.xhtml, by the way?

[13:56] <lucasb_> bigpage:

[13:56] <lucasb_> pod2onepage --threads=1 -v --source-path=./doc --exclude=404.pod6,/.git,/precompiled > html/perl6.xhtml

[13:56] <lucasb_> from Makefile

[13:56] <kalkin-> IMHO it doesn't matter how slim your system is if a human interacts with it, he/she should be able to study and change it. this means docs + development stuff

[13:56] <lucasb_> I was just looking at it :)

[14:01] <lucasb_> ah, pod2onepage comes from https://github.com/gfldex/perl6-pod-to-bigpage

[14:01] <lucasb_> gfldex++ :)

[14:03] <kalkin-> How can i make the repl to keep the history between invocations? Is there someway to make it write to some history file?

[14:04] <sena_kun> kalkin-, did you install Linenoise?

[14:04] <kalkin-> sena_kun: I use Readline instead

[14:04] <kalkin-> Because readline allows me zsh style completion

[14:04] <kalkin-> Is this the issue?

[14:05] <sena_kun> kalkin-, if Readline doesn't support history, then yes. Linenoise gives you history among other features.

[14:05] <kalkin-> I'm talking about part of history completion, which Linenoise lacks

[14:06] <kalkin-> like if you start with say press Up and it will only complete the elements starting with say

[14:06] <kalkin-> Linenoise AFAIK provides only simple prior/next history completion

[14:06] <sena_kun> kalkin-, hm, sorry. Ah, I understood. No, Linenoise can't do that.

[14:07] <sena_kun> On the other hand, it should be not so hard to write.

[14:07] <sena_kun> On the up arrow press you need just take input and grep history with it as a regex.

[14:08] <sena_kun> Except that linenoise is just a C library, of course.

[14:08] <kalkin-> I think it wouldn't be hard to add history persistence to Readline either if it's missing it(?) :)

[14:09] <kalkin-> sena_kun: you probably could wrap it at the perl6 level couldn't you?

[14:09] <sena_kun> https://github.com/drforr/perl6-readline/issues/4 - almost a year passed.

[14:10] <sena_kun> kalkin-, dunno, I've never tried that.

[14:11] *** pierre_ joined
[14:15] <dalek> doc: adb12e6 | (Siavash Askari Nasr)++ | doc/Language/typesystem.pod6:

[14:15] <dalek> doc: "handles" trait accepts Pairs

[14:15] <dalek> doc: review: https://github.com/perl6/doc/commit/adb12e6afe

[14:15] <synopsebot6> Link: http://doc.perl6.org/language/typesystem

[14:17] *** wamba left
[14:23] *** rurban joined
[14:32] *** cognominal left
[14:43] <dalek> doc: 0d5619b | Altai-man++ | doc/Type/Cool.pod6:

[14:43] <dalek> doc: Add missing semicolons

[14:43] <synopsebot6> Link: http://doc.perl6.org/type/Cool

[14:43] <dalek> doc: review: https://github.com/perl6/doc/commit/0d5619b959

[14:43] *** ZzZombo joined
[14:47] *** ufobat left
[14:48] *** pierre_ left
[14:54] <RabidGravy> in P5 news, I got a bug report against Term::Screen in 2010, I replied that I wouldn't fix it because the approach to processing the events was wrong and they should use POE,  the same guy just reported the same bug

[15:01] *** CIAvash joined
[15:04] *** rurban left
[15:04] *** rurban joined
[15:04] *** rurban left
[15:05] *** cognominal joined
[15:09] *** pyrimidine joined
[15:14] *** pyrimidine left
[15:22] <RabidGravy> gah, this is a really awful module how come I'm still supporting it after nearly twenty years

[15:25] <dalek> doc/small-example-fixes: 7d946fe | Altai-man++ | doc/Type/ (8 files):

[15:25] <dalek> doc/small-example-fixes: Small bunch of changes to make examples compileable.

[15:25] <dalek> doc/small-example-fixes: It includes such types of fixes:

[15:25] <dalek> doc/small-example-fixes: 1)Missed semicolons;

[15:25] <dalek> doc/small-example-fixes: 2)Typos;

[15:25] <dalek> doc/small-example-fixes: 3)Endless code without :skip-test;

[15:25] <dalek> doc/small-example-fixes: 4)Convert flags table to actual table, not code.

[15:25] <dalek> doc/small-example-fixes: review: https://github.com/perl6/doc/commit/7d946fe8ca

[15:26] *** zacts left
[15:27] *** CIAvash left
[15:28] *** zacts joined
[15:33] *** mscha left
[15:35] *** lucasb_ left
[15:40] *** sena_kun left
[15:46] *** travis-ci joined
[15:46] <travis-ci> Doc build passed. Altai-man 'Small bunch of changes to make examples compileable.

[15:46] <travis-ci> https://travis-ci.org/perl6/doc/builds/181129126 https://github.com/perl6/doc/commit/7d946fe8cab7

[15:46] *** travis-ci left
[15:49] <dalek> doc: 7d946fe | Altai-man++ | doc/Type/ (8 files):

[15:49] <dalek> doc: Small bunch of changes to make examples compileable.

[15:49] <dalek> doc: It includes such types of fixes:

[15:49] <dalek> doc: 1)Missed semicolons;

[15:49] <dalek> doc: 2)Typos;

[15:49] <dalek> doc: 3)Endless code without :skip-test;

[15:49] <dalek> doc: 4)Convert flags table to actual table, not code.

[15:49] <dalek> doc: review: https://github.com/perl6/doc/commit/7d946fe8ca

[15:49] <dalek> doc: d5b10eb | RabidGravy++ | doc/Type/ (8 files):

[15:49] <dalek> doc: Merge pull request #1034 from perl6/small-example-fixes

[15:49] <dalek> doc: 

[15:49] <dalek> doc: Small bunch of changes to make examples compileable.

[15:49] <dalek> doc: review: https://github.com/perl6/doc/commit/d5b10ebcfe

[15:49] *** pierre_ joined
[15:54] *** pierre_ left
[15:56] *** wamba joined
[15:57] *** AlexDaniel joined
[16:02] *** Actualeyes left
[16:03] *** complain_ left
[16:07] *** rindolf left
[16:12] *** rindolf joined
[16:16] *** pyrimidine joined
[16:20] *** pyrimidine left
[16:21] *** khw joined
[16:46] *** domidumont joined
[16:49] *** pyrimidine joined
[16:53] *** BenGoldberg joined
[16:54] *** pyrimidine left
[17:10] *** cdg joined
[17:10] *** araujo left
[17:11] *** rburkholder left
[17:12] *** araujo joined
[17:12] *** araujo left
[17:12] *** araujo joined
[17:12] *** skids joined
[17:18] *** cdg left
[17:28] *** sena_kun joined
[17:33] *** James0r left
[17:35] <babydrop> CIAvash, sure sounds like it. Thanks.

[17:37] *** dogbert17 left
[17:38] *** dogbert17 joined
[17:39] <AlexDaniel> sena_kun: “Because we can't automatically compile and check this example otherwise?” – what is the error?

[17:39] <sena_kun> AlexDaniel, let's see...

[17:40] *** ufobat joined
[17:41] *** CIAvash joined
[17:41] <sena_kun> AlexDaniel, you're totally right here, my bad. It actually compiles ok even without semicolon. Though now I somewhat don't like that `sub f(){

[17:41] <sena_kun> Argh.

[17:41] <sena_kun> }` without whitespace, but it's okay.

[17:42] <AlexDaniel> so the semicolon has to go… :)

[17:42] <AlexDaniel> by the way, has anybody thought about changing regular single quotes in the docs to ‘’ ?

[17:43] <sena_kun> AlexDaniel, if you're insisting on removing, just do it! ;)

[17:43] <moritz> AlexDaniel: please don't (changing quotes)

[17:43] <AlexDaniel> moritz: I'm not saying that we should. But if not, why not?

[17:43] <AlexDaniel> (yet, at least)

[17:43] <moritz> AlexDaniel: because people copy&paste, don't see that they are special, and try to close them with an ordinary single quote

[17:44] <moritz> and then get confused about the error message

[17:44] <AlexDaniel> moritz: we can improve the error message

[17:44] <moritz> or they have a step somewhere that doesn't handle UTF-8 right (like email)

[17:44] <AlexDaniel> moritz: at the same time, beginners often copy&paste into perl6 -e '' and get confused too

[17:45] <moritz> AlexDaniel: that's a valid point, I concede

[17:45] <AlexDaniel> well that's how I got the idea

[17:45] <moritz> AlexDaniel: though if we change the compiler now to give a better error message, we should wait about half a year before changing the docs on a large scale

[17:46] <AlexDaniel> moritz: that's OK, I am not saying that we should rush. In fact, I'm not even saying that something should be changed, just trying to see what other folks think

[17:46] <moritz> AlexDaniel: the traditionalist inside my chest is very much against it. The pragmatist is convinced by the -e '...' argument :-)

[17:47] <AlexDaniel> m: say ‘hello world'; say 42

[17:47] <camelia> rakudo-moar 6f6e6d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in smart single quotes; couldn't find final "’" ␤at <tmp>:1␤------> 3say ‘hello world'; say 427⏏5<EOL>␤    expecting any of:␤        argument list␤        smart…»

[17:48] *** cognominal left
[17:48] <AlexDaniel> “smart quotes”?

[17:49] <moritz> smart single quotes even

[17:49] <AlexDaniel> isn't it “curly quotes”?

[17:49] <moritz> .u ‘

[17:49] <yoleaux> U+2018 LEFT SINGLE QUOTATION MARK [Pi] (‘)

[17:49] <moritz> .u “

[17:49] <yoleaux> U+201C LEFT DOUBLE QUOTATION MARK [Pi] (“)

[17:50] <AlexDaniel> I think “smart” stands for the feature in some software that changes ' to ‘’

[17:50] <AlexDaniel> and has nothing to do with this case

[17:50] <moritz> it's how people tend to get them in first place :-)

[17:51] *** pierre_ joined
[17:51] <AlexDaniel> I type them myself and am pissed off by the message :P

[17:51] <babydrop> .oO( typographic quotes... )

[17:51] <AlexDaniel> eval: say ‘hello world'; say 42

[17:51] <evalable6> AlexDaniel, rakudo-moar 6f6e6db: OUTPUT«(exit code 1) ===SORRY!=== Error while compiling /tmp/PvVi5swjgZ␤Unable to parse expression in…»

[17:51] <evalable6> AlexDaniel, Full output: https://gist.github.com/d833afa6093c21559b4999c85205def5

[17:52] <sena_kun> AlexDaniel, personally, I somewhat dislike it. Not like I hate UTF, but after such change *every* person who commites to the docs will have to use exactly this quote character. It is a new work, test, explanations to the contributors for almost no benefit. I can be wrong, surely.

[17:53] <AlexDaniel> sena_kun: what if some examples will use '' and some ‘’?

[17:53] <AlexDaniel> sena_kun: I mean, what do you think about this outcome?

[17:53] *** espadrine left
[17:53] *** rurban joined
[17:53] <sena_kun> AlexDaniel, this is how non-determinism was born!

[17:54] *** cognominal joined
[17:54] <AlexDaniel> sena_kun: I am asking because those who can type ‘’ actually have to use “exactly this quote character” right now anyway, don't they?

[17:54] *** CIAvash left
[17:54] <AlexDaniel> I do agree that there are more people who would much rather use ', but still…

[17:55] <AlexDaniel> but yes, it will require a lot of work, you are right

[17:55] *** pierre_ left
[17:55] <TimToady> the quotes aren't actually curly in my font, just slanted

[17:56] <sena_kun> AlexDaniel, majority/minority. Of course, we don't have a place to hide people who can type ‘’, but... You know.

[17:57] <babydrop> TimToady: what does this line do? Git blame blames you: https://github.com/rakudo/rakudo/blob/nom/src/core/Signature.pm#L112

[17:57] *** CIAvash joined
[17:57] <babydrop> m: say sub ($,$,$,$,$) {}.signature

[17:57] <camelia> rakudo-moar 6f6e6d: OUTPUT«($,,,,)␤»

[17:57] <babydrop> It causes this bug, but I don't understand what it's meant to do in there...

[17:59] *** dwarring joined
[17:59] <moritz> babydrop: probably shorten (Int $) to (Int)

[18:00] <babydrop> m: say sub (Int $, Str $, Int @, Str %,$) {}.signature

[18:00] <camelia> rakudo-moar 6f6e6d: OUTPUT«(Int, Str, Int @, Str %,)␤»

[18:00] <babydrop> Makes sense. Thanks.

[18:01] <TimToady> maybe the pattern needs a » before the space

[18:02] <babydrop> Seems to do the trick. Thanks, TimToady++

[18:02] <TimToady> or exempt Any $ maybe

[18:02] *** CIAvash left
[18:03] *** cognominal left
[18:05] <AlexDaniel> m: sub foo (--> -42) {}

[18:05] <camelia> rakudo-moar 6f6e6d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed return value␤at <tmp>:1␤------> 3sub foo (-->7⏏5 -42) {}␤»

[18:06] *** cognominal joined
[18:09] <rindolf> Hi all.

[18:09] *** mst left
[18:09] *** mst joined
[18:11] <babydrop> \o

[18:11] <AlexDaniel> m: say #`🤖 42

[18:11] <camelia> rakudo-moar 6f6e6d: OUTPUT«5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3say7⏏5 #`🤖 42␤Other potential difficulties:␤    Unsupported use of bare "say"; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argum…»

[18:11] <AlexDaniel> aww

[18:12] <babydrop> u: 🤖

[18:12] <unicodable6> babydrop, U+1F916 ROBOT FACE [So] (🤖)

[18:17] <TimToady> on Day 4, Damian is spelled with an 'a', not an 'e'

[18:19] <babydrop> Fixed. Thanks.

[18:22] <geekosaur> movie flashbacks? :p

[18:26] *** CIAvash joined
[18:31] *** stevieb left
[18:31] <dalek> doc: 6379dff | paultcochrane++ | doc/Type/IO/Path.pod6:

[18:31] <dalek> doc: Fix a genitive

[18:31] <synopsebot6> Link: http://doc.perl6.org/type/IO/Path

[18:31] <dalek> doc: 

[18:31] <dalek> doc: ... and the placement of a full stop.

[18:31] <dalek> doc: review: https://github.com/perl6/doc/commit/6379dfffd6

[18:32] *** pyrimidine joined
[18:33] *** cognominal left
[18:34] *** firstdayonthejob joined
[18:34] *** cognominal joined
[18:37] *** pyrimidine left
[18:37] <dalek> doc: 189fb85 | paultcochrane++ | doc/Type/IO/Path.pod6:

[18:37] <synopsebot6> Link: http://doc.perl6.org/type/IO/Path

[18:37] <dalek> doc: Format code-like textual elements with C<>

[18:37] <dalek> doc: review: https://github.com/perl6/doc/commit/189fb85c47

[18:37] *** CIAvash left
[18:38] <dalek> doc: 6401a49 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Type/WrapHandle.pod6:

[18:38] <synopsebot6> Link: http://doc.perl6.org/type/WrapHandle

[18:38] <dalek> doc: There is no need for a ; here

[18:38] <dalek> doc: 

[18:38] <dalek> doc: Also add a space character before the block

[18:38] <dalek> doc: review: https://github.com/perl6/doc/commit/6401a49f25

[18:38] <japhb> I don't know if this is still an active discussion, but FWIW I'd be happy to see all 'returns' in the docs replaced by -->.  I think the latter is a much clearer way to represent the routine's "interface" in a unified way, though perhaps that's biased by time looking at Haskell.

[18:41] <[ptc]> japhb++

[18:42] <[ptc]> is it possible to concatenate IO::Path objects in a platform-independent way?

[18:42] <geekosaur> I actually feel like it's in the wrong place (it looks like part of the formal parameters; Haskell deliberately fuzzes that, but Perl 6 doesn't have its excuse for doing so)

[18:43] <[ptc]> for instance, if one has a dir as an IO::Path and wants to add another dir to the end of that, is there a platform independent way of doing that

[18:43] <[ptc]> or can I just use Unix slashes and Perl6 works the rest out for me?

[18:44] <geekosaur> https://docs.perl6.org/type/IO$COLON$COLONPath#method_child

[18:44] <[ptc]> geekosaur: brilliant!  Thanks!  Have been going through those docs but didn't use the right search term :-)

[18:44] <geekosaur> yeh, "child" is a slightly weird name for that

[18:45] <AlexDaniel> japhb: it is an active discussion, kinda. Thanks for your comment

[18:45] <geekosaur> I mean, it sorta makes sense? but it's not where I would look for that; and "child" makes me think it's an iterator for the children of the current IO::Path

[18:46] <geekosaur> (except that's weird too since it should be plural in that case...)

[18:46] <AlexDaniel> japhb: if you were a begginner, wouldn't you find --> notation a bit confusing? Or is it not a problem?

[18:47] <[ptc]> geekosaur: yeah, I was looking for "join" and "concat" and stuff.  I guess "child" makes sense in a broader sense, but it's not where I'd instinctively look...

[18:48] *** cibs left
[18:49] <AlexDaniel> japhb: I mean, we are going to replace ‘returns’ with --> anyway, but I'm just trying to understand what would be the best way to explain this to newcomers

[18:49] <japhb> AlexDaniel: I read --> as 'yields', and :( as 'takes', so I mentally read a signature like :(Int x, Int y --> Int) as 'takes an Int x and Int y and yields another Int'

[18:50] <japhb> I don't know if I would have read it the same way as a beginner, but I think it would be really easy to teach

[18:50] *** cibs joined
[18:50] <japhb> But that also makes me think:  The error messages use -->, so people will be seeing it a lot early on anyway.

[18:51] <ufobat> is it possible to have a junction of certain type? like it should only contain Integers > 10 or something? what would be its signature?

[18:52] <[ptc]> the --> is fairly clear; I'd guess that the "returns" could very easily get confused with "return" for newcomers

[18:52] <AlexDaniel> japhb: all arguments are in favor of -->, the only exception is ‘returns’ being “more readable” to those who are unfamiliar with the syntax

[18:52] <AlexDaniel> and some will probably argue with that one too :)

[18:53] <babydrop> ufobat: sounds like you're abusing junctions :)

[18:53] <AlexDaniel> ufobat: why?

[18:54] <babydrop> ufobat: there's a way by poking in the guts, but you're not meant to do that

[18:54] *** darutoko left
[18:55] <babydrop> m: sub (Junction $ where $_ > 10) { say "feels good" }(9&11)

[18:55] <camelia> rakudo-moar 219f52: OUTPUT«Constraint type check failed for parameter '<anon>'␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:55] <babydrop> m: sub (Junction $ where $_ > 10) { say "feels good" }(9|11)

[18:55] <camelia> rakudo-moar 219f52: OUTPUT«feels good␤»

[18:55] <babydrop> ufobat: ^ junctions are different, so "contains" is kinda a tricky question

[18:55] <ufobat> maybe i am not wanting junctions, i dont know. i am thinking of routes in bailador.. i'd like to have a route that could be <GET PUT>.any but it should not allow http method HMPF

[18:55] <AlexDaniel> hahaha

[18:56] <AlexDaniel> u: sub (Junction[Int] $) { say "feels good~" }(9|11)

[18:56] <unicodable6> AlexDaniel, U+0073 LATIN SMALL LETTER S [Ll] (s)

[18:56] <unicodable6> AlexDaniel, U+0075 LATIN SMALL LETTER U [Ll] (u)

[18:56] <unicodable6> AlexDaniel, U+0062 LATIN SMALL LETTER B [Ll] (b)

[18:56] <unicodable6> AlexDaniel, https://gist.github.com/a7a5f6d20761210aae47038ab4664876

[18:56] <AlexDaniel> oops

[18:56] <AlexDaniel> eval: sub (Junction[Int] $) { say "feels good~" }(9|11)

[18:56] <evalable6> AlexDaniel, rakudo-moar 219f527: OUTPUT«(exit code 1) ===SORRY!=== Error while compiling /tmp/2CfofqOAF9␤An exception occurred while p…»

[18:56] <evalable6> AlexDaniel, Full output: https://gist.github.com/07f6953112d6b8fcd930337c1c28ba59

[18:56] <AlexDaniel> SORRY! SORRY!

[18:57] <babydrop> ufobat: I don't get where the 10> ints come in

[18:57] *** shadowpaste joined
[18:58] <ufobat> it whats just an example

[18:58] <babydrop> m: multi dispatch ('GET') { say "getting" }; multi dispatch ('PUT') { say "putting" }; dispatch 'GET'|'PUT'

[18:58] <camelia> rakudo-moar 219f52: OUTPUT«getting␤putting␤»

[18:59] *** zamanf_ left
[18:59] <ufobat> my real world problem would be https://nopaste.me/view/4499b757 instead of a single HTTP method a junction of HTTP methods

[18:59] <babydrop> m: sub route ($where) { say so $where eq 'PUT' }; route 'GET'|'PUT'

[18:59] <camelia> rakudo-moar 219f52: OUTPUT«False␤True␤»

[19:00] <babydrop> m: sub route (Mu $where) { say so $where eq 'PUT' }; route 'GET'|'PUT'

[19:00] <camelia> rakudo-moar 219f52: OUTPUT«True␤»

[19:00] <babydrop> m: sub route (Mu $where) { say so $where eq 'GET' }; route 'GET'|'PUT'

[19:00] <camelia> rakudo-moar 219f52: OUTPUT«True␤»

[19:00] <ufobat> brb, sorry - children need attention

[19:00] <babydrop> m: sub route (Mu $where) { say so $where eq 'HMPF' }; route 'GET'|'PUT'

[19:00] <camelia> rakudo-moar 219f52: OUTPUT«False␤»

[19:00] * babydrop doesn't see the issue

[19:01] <babydrop> Ah

[19:02] <babydrop> Actually no Ah

[19:02] <ufobat> no?

[19:03] <ufobat> a few days ago i was told i am rather bad in explaining my problems *g*

[19:04] <babydrop> ufobat: just put `of Mu` rather than `of Str` on the subset and it'll take junctions

[19:04] <babydrop> m: class { subset HttpMethod of Mu where * eq any <GET PUT POST HEAD PUT DELETE TRACE OPTIONS CONNECT PATCH>; has HttpMethod $.method; }.new: :method('GET'|'PUT')

[19:04] <camelia> rakudo-moar 219f52: ( no output )

[19:04] <babydrop> and you can add the type check inside the `where` if you really cared :)

[19:05] <babydrop> ufobat: it's just a classical XY Problem

[19:05] <babydrop> huggable: xy

[19:05] <huggable> babydrop, nothing found

[19:05] <babydrop> huggable: xy problem

[19:05] <huggable> babydrop, You want to do X, but don't know how. You think you can solve it using Y, but don't know how to do that, either. So, you ask about Y in order to solve X, which doesn't make sense. You should ask about X.

[19:05] <ufobat> yeah, that is true

[19:05] <babydrop> Like, I still have no idea what issue you're having. I can only assume your subset doesn't accept a Junction based on the scanty 2 lines of code you pasted

[19:06] <ufobat> you're guessing it right

[19:06] <babydrop> \o/

[19:06] <ufobat> thanks for the help :-)

[19:06] <babydrop> Any time.

[19:15] *** Cabanossi left
[19:15] *** Cabanossi joined
[19:18] *** cognominal left
[19:25] *** cognominal joined
[19:32] <babydrop> u: arabic digit 1

[19:32] <unicodable6> babydrop, U+0061 LATIN SMALL LETTER A [Ll] (a)

[19:32] <unicodable6> babydrop, U+0072 LATIN SMALL LETTER R [Ll] (r)

[19:32] <unicodable6> babydrop, https://gist.github.com/598f30cc07fe79d215716e12c3e0ba62

[19:32] <babydrop> u: indian digit 1

[19:32] <unicodable6> babydrop, U+0069 LATIN SMALL LETTER I [Ll] (i)

[19:32] <unicodable6> babydrop, U+0064 LATIN SMALL LETTER D [Ll] (d)

[19:32] <unicodable6> babydrop, U+006E LATIN SMALL LETTER N [Ll] (n)

[19:32] <unicodable6> babydrop, https://gist.github.com/778c59d3031ab0d6f1355945622ec2ae

[19:32] <babydrop> AlexDaniel: why did you break your bot!

[19:32] <babydrop> ohhh

[19:32] <AlexDaniel> one

[19:32] <babydrop> u: arabic digit one

[19:32] <unicodable6> babydrop, U+0661 ARABIC-INDIC DIGIT ONE [Nd] (١)

[19:32] <unicodable6> babydrop, U+06F1 EXTENDED ARABIC-INDIC DIGIT ONE [Nd] (۱)

[19:33] *** cognominal left
[19:33] <AlexDaniel> I wonder what yole has to say to this

[19:33] <AlexDaniel> yoleaux: arabic digit 1

[19:33] <AlexDaniel> .u arabic digit 1

[19:33] <yoleaux> No characters found

[19:33] <AlexDaniel> ?

[19:34] <AlexDaniel> what did it try?

[19:34] <AlexDaniel> .u 80

[19:34] <yoleaux> U+E013F VARIATION SELECTOR-80 [Mn] (◌󠄿)

[19:34] *** cognominal joined
[19:34] <AlexDaniel> oooooh

[19:34] <babydrop> m: :35<Z>

[19:34] <camelia> rakudo-moar 219f52: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Invalid base-35 character 'Z': 7⏏5Z. Please use one of 0..9, A..Y␤at <tmp>:1␤------> 3:35<Z>7⏏5<EOL>␤»

[19:35] <babydrop> I guess there's no way to trigger that error for radix 36?

[19:35] <AlexDaniel> u: 80

[19:35] <unicodable6> AlexDaniel, U+0038 DIGIT EIGHT [Nd] (8)

[19:35] <unicodable6> AlexDaniel, U+0030 DIGIT ZERO [Nd] (0)

[19:35] <AlexDaniel> m: say ‘Z’.succ

[19:35] <camelia> rakudo-moar 219f52: OUTPUT«AA␤»

[19:35] <AlexDaniel> m: say ‘Z’.ord.succ.chr

[19:35] <camelia> rakudo-moar 219f52: OUTPUT«[␤»

[19:35] <babydrop> m: try ':35<♥>'.EVAL; say $!.^name

[19:35] <camelia> rakudo-moar 219f52: OUTPUT«X::Syntax::Malformed␤»

[19:36] *** rburkholder joined
[19:36] <babydrop> kinda annoying we have like 3 different error messages for what is basically one thing

[19:36] <AlexDaniel> m: say :35<[>

[19:36] <camelia> rakudo-moar 219f52: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed radix number␤at <tmp>:1␤------> 3say :35<7⏏5[>␤    expecting any of:␤        number in radix notation␤»

[19:36] <babydrop> m: try q|:35('♥')|.EVAL; say $!.^name

[19:36] <camelia> rakudo-moar 219f52: OUTPUT«X::Str::Numeric␤»

[19:36] <babydrop> m: try q|:35<Z>|.EVAL; say $!.^name

[19:36] <camelia> rakudo-moar 219f52: OUTPUT«X::Syntax::Number::InvalidCharacter␤»

[19:36] <babydrop> weird eh

[19:37] *** girafe joined
[19:38] *** bjz joined
[19:39] <AlexDaniel> 39 open whateverable issues… should I slap “Decemberfest” label on all of them? :)

[19:39] <AlexDaniel> some free labour won't hurt for sure

[19:39] <babydrop> wtf is Decemberfest

[19:42] <AlexDaniel> babydrop: it is a monthly even organized by AlexDaniel. Submit 3 PRs in whateverable repo and receive a free “thank you”

[19:42] <AlexDaniel> event*

[19:43] <babydrop> heh

[19:47] *** sena_kun left
[19:48] *** pyrimidine joined
[19:49] *** girafe2 joined
[19:50] *** pyrimidine left
[19:50] *** pyrimidine joined
[19:50] <pmurias> AlexDaniel: what's a whateverable issue?

[19:51] <geekosaur> "whateverable" is the bot framework for evalable/unicodable/committable/bisectable/etc.

[19:51] <AlexDaniel> pmurias: nothing in particular, just a lot of stuff to be done: https://github.com/perl6/whateverable/issues

[19:52] *** girafe left
[19:53] *** pyrimidine left
[19:56] *** espadrine joined
[20:03] <pmurias> AlexDaniel: shouldn't only the LHF be marked Decemberfest?

[20:04] *** sivoais left
[20:04] <AlexDaniel> that's what I thought too. Turns out not necessarily

[20:04] <babydrop> :/

[20:08] <pmurias> AlexDaniel: are you making fun of Hacktoberfest? ;)

[20:08] *** lizmat left
[20:09] <AlexDaniel> pmurias: just looking for free labour :) But yes, a bit

[20:10] *** lizmat joined
[20:10] *** firstdayonthejob left
[20:11] * pmurias likes the Hacktoberfest concept

[20:11] *** knut_ joined
[20:13] *** sivoais joined
[20:17] *** cxreg left
[20:18] *** cognominal left
[20:19] *** rurban left
[20:20] <knut_> Hi all. I'm not much of a programmer, but I've used perl5 in the past. In the last two years I tried perl6 on some occasions. Everytime I stumbled about map and $_. When used as a method one cannot use $_, the same is true for map as function+expression. But inside a block it works. It took me very long to figure out that this is actually a feature of the block

[20:20] *** cognominal joined
[20:20] <knut_> so maybe this could be documentet in some perl5to6 guide. I found it very confusing

[20:21] <moritz> knut_: maybe send a pull request? the docs are on github

[20:21] <AlexDaniel> knut_: by the way, do you know about * ?

[20:21] <moritz> knut_: I'll be happy to review it if you make one

[20:21] *** cxreg joined
[20:21] <AlexDaniel> m: say <10 20 30>.map(*.succ)

[20:21] <camelia> rakudo-moar fa82a1: OUTPUT«(11 21 31)␤»

[20:21] <AlexDaniel> ↑ no block required

[20:21] <babydrop> knut_: there are a number of 5-to-6 docs: https://github.com/perl6/doc/tree/master/doc/Language

[20:22] *** telex left
[20:22] <moritz> https://raw.githubusercontent.com/perl6/doc/master/doc/Language/5to6-perlfunc.pod6

[20:22] <moritz> this one talks about map, specifically

[20:22] <geekosaur> but I note the doc for $_ in 5to6-variables doesn't mention its scope changed from "global" to lexical/block

[20:22] <babydrop> knut_: pick the best one to add it to. Perhaps a general note that unlike Perl 5, we don't make $_ available in map/grep/etc without a block

[20:22] *** ab6tract left
[20:22] <knut_> AlexDaniel: I know about * and found it even more confusing in the beginning ;)

[20:23] <geekosaur> which is a pretty big change for someone used to perl 5's $_

[20:23] <geekosaur> (granted, p5 did experimentally try to do the same thing... and broke pretty much everything and reverted it)

[20:23] <AlexDaniel> knut_: good :) I think you are a perfect person to improve 5to6 docs, your contributions will be appreciated :)

[20:23] <babydrop> knut_: to add to confusion, some things "thunk", so $_ *is* available without a block, like in a where clause: subset of Int where $_ %% 2; works

[20:24] *** domidumont left
[20:24] *** dataangel left
[20:24] <moritz> geekosaur: I think the real difference is that in p5, you can write map $_ + 1, @array and it automatically captures the $_ + 1 as a callabl

[20:24] <moritz> (which is kinda spooky)

[20:25] *** firstdayonthejob joined
[20:25] <AlexDaniel> babydrop: so all ｢$_ %% 2｣, ｢{ $_ %% 2 }｣ and ｢* %% 2｣ are allowed… wow

[20:26] <moritz> right, but not for a map

[20:29] <masak> moritz: well, Perl 6 sort of trains one not to accept blocks that are "too implicit"

[20:29] <mst> perl6 achieves the same goal with whatever star expressions, no?

[20:30] <mst> map *+1, @foo; etc.

[20:30] *** SoylentGreenSqui joined
[20:30] <mst> which is way way neater than a special case in the parser (that I can't access via prototypes *grump*)

[20:30] <moritz> mst: right, but there a limits to them; for example you can't use them in argument lists

[20:30] <mst> moritz: hrm?

[20:31] * SoylentGreenSqui starts a heated diskussion by asking, "what editor to use for perl6?"

[20:31] <moritz> mst: foo(*) doesn't become { foo($_) }

[20:31] <geekosaur> and the * kinda alerts you to magic going on, unlike $_ which is everywhere in p5 and you can't easily tell which ones are "magical"

[20:31] <moritz> SoylentGreenSqui: vim. No heat necessary :-)

[20:31] <AlexDaniel> SoylentGreenSqui: emacs works OK with perl6 if you use install perl6-mode

[20:31] <mst> moritz: right, the subroutine needs to know it's getting WhateverCode

[20:31] <AlexDaniel> SoylentGreenSqui: atom shuold have good support for perl6 now

[20:31] <mst> moritz: foo(*) is similar to foo({ $_ }) no?

[20:32] <moritz> mst: no, it's a straight call to &foo, passing in a Whatever instance

[20:32] <moritz> it doesn't autocurry

[20:32] <moritz> or whatever you call it :-)

[20:32] *** firstdayonthejob left
[20:32] <AlexDaniel> SoylentGreenSqui: vim works too, but if I recall correctly it does not support fancy unicode quotes and a bunch of other stuff, but it should be quite usable

[20:32] <AlexDaniel> SoylentGreenSqui: but why do you ask?

[20:33] <mst> moritz: ah, you have to special case Whatever?

[20:33] <AlexDaniel> m: say <10 20 30>».succ

[20:33] <camelia> rakudo-moar fa82a1: OUTPUT«(11 21 31)␤»

[20:33] <mst> moritz: foo(*+1) is similar to foo({ $_ + 1 }) still though, right?

[20:33] <AlexDaniel> knut_: there is also this ↑

[20:34] <SoylentGreenSqui> to find out which one to use ^^

[20:34] <AlexDaniel> SoylentGreenSqui: what editor do you normally use?

[20:34] <SoylentGreenSqui> Notepadd++

[20:34] <AlexDaniel> :|

[20:34] <moritz> mst: yes

[20:34] <SoylentGreenSqui> But I just set up a linux system

[20:35] <AlexDaniel> SoylentGreenSqui: perhaps try atom?

[20:35] <mst> moritz: is there an idiom for accepting that?

[20:35] <moritz> mst: *.&foo

[20:36] <mst> moritz: oh, and then foo gets a whatevercode?

[20:36] <timotimo> not gets, becomes

[20:36] <SoylentGreenSqui> AlexDaniel: Looks nice. 

[20:37] <mspo> m: say blob16.new([1, 2, 3]).bytes;

[20:37] <camelia> rakudo-moar fa82a1: OUTPUT«6␤»

[20:37] *** telex joined
[20:37] <mspo> where is that blob16 documented as a thing?

[20:37] <mspo> also why are pack/unpack experimental?

[20:37] <AlexDaniel> SoylentGreenSqui: I am suggesting it because emacs/vim would probably be a bit too huge of a leap from Notepad++. Feel free to go for it though, if you feel ready :)

[20:38] <AlexDaniel> mspo: perhaps it is related to this issue: https://github.com/perl6/doc/issues/372

[20:39] <SoylentGreenSqui> I also found "Visual Studio Code" which looks promising.

[20:40] <AlexDaniel> mspo: https://github.com/rakudo/rakudo/pull/649

[20:42] *** Guest42590 joined
[20:46] *** firstdayonthejob joined
[20:48] *** cognominal left
[20:48] *** ufobat left
[20:49] * babydrop laughs

[20:50] <babydrop> AlexDaniel: you're pissed off at the message? :)

[20:50] <babydrop> AlexDaniel: why not submit a PR? :)  git clone https://github.com/rakudo/rakudo .; grep -ER 'dba.+smart' src/

[20:50] <pmurias> SoylentGreenSqui: a bunch of perl 6 guys seem to use atom (I don't use it because it's not a vi)

[20:51] *** cognominal joined
[20:53] * babydrop wouldn't mind s/[low|high] s+ smart//

[20:54] *** pyrimidine joined
[20:54] *** Guest42590 left
[20:58] <dalek> doc: f19e6fc | Altai-man++ | doc/Type/Int.pod6:

[20:58] <dalek> doc: Fix of example

[20:58] <dalek> doc: 

[20:58] <dalek> doc: tommystanton++

[20:58] <dalek> doc: review: https://github.com/perl6/doc/commit/f19e6fc935

[20:58] <synopsebot6> Link: http://doc.perl6.org/type/Int

[21:00] *** FROGGS left
[21:05] <AlexDaniel> babydrop: I like that you enjoy my tickets xD

[21:05] <AlexDaniel> babydrop: I believe it would also require changing some tests

[21:05] <AlexDaniel> babydrop: feel free to mark it as LHF ;)

[21:06] <AlexDaniel> or… maybe I'll do it

[21:07] *** bjz left
[21:09] <babydrop> If these are 6.c-errata tests, then we can't change them (if they specifically test for these names). It'd have to wait until 6.d

[21:12] <yoleaux> AlexDaniel: harass mst

[21:16] <AlexDaniel> what's the idea behind 6.c-errata by the way?

[21:18] <timotimo> if we discover tests to have been wrong, we fix them there

[21:18] *** bjz joined
[21:24] <babydrop> AlexDaniel: 6.c is our promise to the users that the tested behaviour will remain unchanged in 6.c language. In a perfect world, those tests would remain frozen forever. In reality, some test are later found to be broken in one way or another or they rely on some untested feature to perform their test (like the test checking the stacktrace is printed twice by checking for a specific core filename that later

[21:24] <babydrop> gets renamed) and they need to fixed, that's where 6.c-errata comes in.

[21:25] <AlexDaniel> but new tests are added to 6.c directly?

[21:25] <AlexDaniel> oops, nope, it's just a master branch

[21:25] <AlexDaniel> ok

[21:26] <AlexDaniel> so there is 6.c tag and 6.c-errata branch, okay, it makes sense

[21:26] <AlexDaniel> or maybe not. Not sure what's the point of this tag.

[21:26] <pmurias> AlexDaniel: what would be the benefit of changing the docs to use smart quotes?

[21:27] <AlexDaniel> pmurias: so that people can copy-paste stuff into perl6 -e ''

[21:28] *** bjz left
[21:28] <AlexDaniel> babydrop: yea, I'm still confused, I don't understand for what purpose 6.c tag was created

[21:29] <AlexDaniel> pmurias: and these are curly quotes, by the way…

[21:30] * AlexDaniel works on a PR

[21:30] <pmurias> AlexDaniel: for the docs?

[21:30] <babydrop> AlexDaniel: ask the person who created it

[21:30] <geekosaur> presumably to represent the tests as released with 6.c, to provide a reference for 6.c-errata

[21:30] <babydrop> geekosaur: it was created in Feb 29 tho 

[21:30] <babydrop> *19

[21:30] <geekosaur> yes. I think -errata was created at the same time

[21:31] <babydrop> Ah

[21:31] <geekosaur> before that nobody had considered that an errata branch might be needed

[21:31] <babydrop> Makes sens.

[21:31] <AlexDaniel> so 6.c tag is “here is what we promised, but nevermind, just use 6.c-errata branch”

[21:32] <babydrop> 6.c is the release 6.c-errata is the errata to the release.

[21:32] * babydrop sees no issue

[21:32] * geekosaur neither

[21:32] <geekosaur> specs can have bugs, and in fact often do

[21:32] * geekosaur was marginally involved in finding a bug in the haskell '98 spec...

[21:33] <pmurias> AlexDaniel: I don't think making copy-pasting stuff into perl6 -e easier is worth the potential confusion to a newbie who isn't aware that curly quotes work in Perl6/doesn't know how to type them etc.

[21:33] <dalek> doc: bbcafde | gfldex++ | CREDITS:

[21:33] <dalek> doc: add username to credits

[21:33] <dalek> doc: review: https://github.com/perl6/doc/commit/bbcafdea41

[21:34] <babydrop> huh... so we have two CREDITS :/

[21:34] <gfldex> yes :)

[21:34] <gfldex> we don't like it easy :->

[21:34] <gfldex> also, there is no shame in adding yourself to the CREDITS of the docs

[21:34] <MasterDuke> maybe this is a bad idea, but what about a JS button to swap between regular (e.g., ' and ") and fancy (e.g., <i can't type them>)?

[21:35] <babydrop> gfldex: may be worth teaching this script to parse it then: https://github.com/rakudo/rakudo/blob/nom/tools/contributors.pl6

[21:35] <babydrop> MasterDuke: that's featuritis.

[21:35] * babydrop cues in https://www.wechall.net/ as experts in featuritis

[21:35] <geekosaur> (mind, re h'98, about half of the then active readership of haskell-cafe could make the same claim, since building the example code triggering it was a collaborative effort on the mailing list :)

[21:36] <gfldex> babydrop: if I read the code right it does so already, if the docs are in '../doc' when it is executed

[21:37] <babydrop> gfldex: just Rakudo's. It does expect the doc repo clone to exists, but only so it could run `git log --since` in it

[21:38] <gfldex> are you sure?

[21:38] <gfldex> it's seems to .map over @repos and complain if the path doesn't exist

[21:38] <babydrop> Yes, that checks that the repo clone exists.

[21:38] <babydrop> And this line loads Rakudo's CREDITS file: https://github.com/rakudo/rakudo/blob/nom/tools/contributors.pl6#L36

[21:39] <babydrop> I don't see it being changed to anything else later on.

[21:40] <gfldex> it's using CREDITS_FILE for mapping nick to name and only for that

[21:41] *** notostraca joined
[21:41] *** telex left
[21:41] <babydrop> Yes, and if your contributor is in just the doc repo... it won't get the nick/name for them.

[21:41] <babydrop> Never mind. Ignore me. I'll fix it on next release.

[21:42] <gfldex> ok

[21:47] *** bjz joined
[21:47] <gfldex> babydrop: the script will choke on any commit message that contains a ‚|‘. maybe the following is a fix (braincompiled) $msg = $line.split(|)[4..*].join('|')

[21:52] *** pierre_ joined
[21:53] *** bjz left
[21:56] *** bjz joined
[21:56] *** bjz left
[21:56] *** pierre_ left
[21:57] *** telex joined
[21:58] *** Tonik left
[21:59] <babydrop> gfldex: I don't see the breakage. There's a 4 in the .split's limit

[21:59] *** RabidGravy left
[22:00] <babydrop> m: dd "Zoffix Znet|Zoffix Znet|fa82a1f85ad7064614d038a993c7fb15fa133a6f|Fix crash with| X::Syntax::Number::InvalidCharacter w|hen r|adix is 11".split: '|'4

[22:00] <camelia> rakudo-moar fa82a1: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3Character w|hen r|adix is 11".split: '|'7⏏054␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤    …»

[22:00] <babydrop> m: dd "Zoffix Znet|Zoffix Znet|fa82a1f85ad7064614d038a993c7fb15fa133a6f|Fix crash with| X::Syntax::Number::InvalidCharacter w|hen r|adix is 11".split: '|', 4

[22:00] <camelia> rakudo-moar fa82a1: OUTPUT«("Zoffix Znet", "Zoffix Znet", "fa82a1f85ad7064614d038a993c7fb15fa133a6f", "Fix crash with| X::Syntax::Number::InvalidCharacter w|hen r|adix is 11").Seq␤»

[22:01] <babydrop> The courtesy ++s should be expanded to be searched in bodies too :/ at least that's where I always put them :\

[22:07] *** bjz joined
[22:10] <gfldex> i c

[22:10] <gfldex> i need a better braincompiler

[22:12] *** bjz left
[22:20] *** _ramix_ joined
[22:24] <_ramix_> Hi! I have just successfully added travis build tests to the https://modules.perl6.org/dist/FileSystem::Capacity::VolumesInfo and it appears as not configured. How much waiting time is there more or less until the travis status is updated? Thanks!

[22:25] <_ramix_> Now the status is unknow!

[22:28] *** gfldex left
[22:28] *** gfldex joined
[22:28] *** robertle left
[22:29] *** Vynce joined
[22:29] * babydrop checks it out

[22:29] <gfldex> _ramix_: your build is shown as passing on my side

[22:31] <_ramix_> test here: https://modules.perl6.org/#q=filesystem%3A%3Acapacity

[22:31] <gfldex> the modules page is updated 3x per hour (IIRC)

[22:32] <_ramix_> ok, thanks!

[22:32] *** telex left
[22:32] <babydrop> _ramix_: it works fine on a local build, so I'd say just wait for next rebuild. It's trigged each our at 20m and 40m and takes about 1 hour

[22:33] <babydrop> *each hour

[22:33] <_ramix_> Perfect! Thanks a lot!

[22:33] *** bjz joined
[22:34] *** cognominal left
[22:37] <timotimo> wow, an hour?

[22:37] <timotimo> we might want to improve that somehow :)

[22:38] *** bjz left
[22:39] *** cognominal joined
[22:43] <babydrop> timotimo: it'd done so on purpose, to comply with GitHub's API request limits.

[22:44] <babydrop> s/it'd/it's/; # typing isn't my thing today it seems

[22:44] *** _ramix_ left
[22:44] *** synopsebot6 left
[22:44] *** synopsebot6 joined
[22:44] <geekosaur> github has rather draconian limits, yeh

[22:45] <timotimo> oh, of course

[22:45] <timotimo> we're accessing github api?

[22:45] <timotimo> or is that also for raw.githubusercontent.com?

[22:45] <babydrop> API

[22:45] <babydrop> no idea about raw.blah

[22:47] <babydrop> The API is for stars, last commit time... 

[22:47] <babydrop> The code's here: https://github.com/perl6/modules.perl6.org/blob/master/lib/ModulesPerl6/DbBuilder/Dist/Source/GitHub.pm

[22:51] *** Herby_ joined
[22:51] <Herby_> o/

[22:52] <babydrop> \o

[22:57] *** hipek8 joined
[22:57] <timotimo> o/

[23:00] <BenGoldberg> m: print Bool.pick ?? "\r\\o " !! "\r o/" for ^40;

[23:00] <camelia> rakudo-moar fa82a1: OUTPUT«

[23:04] <timotimo> why isn't it animated? :<

[23:04] <AlexDaniel> eval: print Bool.pick ?? "\r\\o " !! "\r o/" for ^40;

[23:04] <evalable6> AlexDaniel, rakudo-moar fa82a1f: OUTPUT«␍ o/␍\o ␍\o ␍ o/␍ o/␍ o/␍ o/␍ o/␍\o ␍\o ␍ o/␍\o ␍\o ␍ o/␍ o/␍ o/␍\o ␍\o ␍\o ␍ o/␍ o/␍\o ␍ o/␍\o ␍\o ␍\o ␍ o/␍\o ␍ o/␍ o/␍\o ␍ o/␍ o/␍ o/␍ o/␍\o ␍ o/␍ o/␍\o ␍ o/»

[23:08] *** hipek8 left
[23:09] *** telex joined
[23:10] <AlexDaniel> m: say “test\b\btest”

[23:10] <camelia> rakudo-moar fa82a1: OUTPUT«testtest␤»

[23:10] <AlexDaniel> eval: say “test\b\btest”

[23:10] <evalable6> AlexDaniel, rakudo-moar fa82a1f: OUTPUT«test␈␈test»

[23:12] <timotimo> AlexDaniel: you do know about ("\\o ", "o/ ").roll(40), right?

[23:13] <timotimo> m: say ("\\o ", "o/ ").roll(40)

[23:13] <camelia> rakudo-moar fa82a1: OUTPUT«(o/  \o  \o  o/  o/  o/  o/  \o  \o  o/  \o  \o  o/  o/  o/  \o  \o  o/  \o  o/  \o  o/  \o  \o  \o  o/  \o  \o  \o  \o  \o  o/  \o  \o  \o  \o  o/  \o  o/  \o )␤»

[23:13] <AlexDaniel> timotimo: what's the point?

[23:13] <timotimo> it's a lot shorter? :P

[23:13] <AlexDaniel> timotimo: ah, BenGoldberg ↑

[23:14] <AlexDaniel> I was just wondering whether evalable will handle it better

[23:15] *** Vynce left
[23:18] *** hipek8 joined
[23:19] *** cognominal left
[23:20] *** Vynce joined
[23:23] *** cognominal joined
[23:30] *** pmurias left
[23:33] *** rindolf left
[23:35] *** lukaramu left
[23:39] *** Vynce left
[23:40] *** firstdayonthejob left
[23:48] *** knut_ left
[23:53] *** Actualeyes joined
[23:54] *** girafe2 left
[23:57] *** djbkd joined
[23:59] *** grumble left
