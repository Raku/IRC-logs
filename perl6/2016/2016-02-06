[00:02] *** addison_ left
[00:05] *** Laurent__ joined
[00:06] *** Laurent__ is now known as Laurent_R

[00:11] *** revhippie left
[00:15] *** kivutar joined
[00:16] *** lostinfog left
[00:23] *** travis-ci joined
[00:23] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Streamline phaser handling

[00:23] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/107363200 https://github.com/rakudo/rakudo/compare/91a5d11cb0a6...ec543e9d2cb5

[00:23] *** travis-ci left
[00:24] *** alpha123 left
[00:24] *** autark left
[00:28] <AlexDaniel> ouch

[00:29] <timotimo> Stage parse      : Label with no handler passed to newlexotic

[00:29] <timotimo> huh

[00:30] <timotimo> very strange

[00:30] <timotimo> only on linux, only with moar master

[00:37] *** vendethiel joined
[00:40] <MadcapJake> thanks to skaji_++, evalbot on Slack can now handle multiline code blocks!

[00:41] <timotimo> cool

[00:42] <AlexDaniel> m: say 42;␤say 69 # by the way

[00:42] <camelia> rakudo-moar ec543e: OUTPUT«42␤69␤»

[00:48] <MadcapJake> timotimo, also skaji_ just pushed commit that allows camelia in any channel public/private! i'm building it right now

[00:48] <timotimo> excellent

[00:51] *** revhippie joined
[00:51] <Skarsnik> MadcapJake, it use IRC for slack?

[00:53] <MadcapJake> you can connect to slack via irc now

[00:53] <MadcapJake> but no bridge yet

[00:53] <MadcapJake> haven't had time to build it

[00:55] *** addison_ joined
[00:55] <Skarsnik> I mean camelia use the IRC bridge?

[00:56] <MadcapJake> no, skaji_++ built this awesome docker container for camelia with some slack tweaks and i'm running that (currently on my machine)

[01:00] *** vendethiel left
[01:00] <Skarsnik> well docker does not make camelia connect to slack xD

[01:06] *** yeahnoob joined
[01:06] <AlexDaniel> jvm: (;)

[01:06] *** spider-mario left
[01:06] <AlexDaniel> j: (;)

[01:06] <camelia> rakudo-jvm f99bdb: OUTPUT«===SORRY!===␤Method 'returns' not found for invocant of class 'BOOTInt'␤»

[01:07] <MadcapJake> Skarsnik, right, custom code does :P the container is just an easy platform for deploying it

[01:11] *** geraud left
[01:11] *** Timbus left
[01:14] *** vendethiel joined
[01:19] *** lokien_ left
[01:33] *** colomon left
[01:34] *** colomon joined
[01:35] *** captain-adequate left
[01:35] *** vendethiel left
[01:35] <japhb> *yawn*  Another week of $dayjob complete ... and now to enjoy the weekend.  :-)

[01:36] <AlexDaniel> japhb: what's your plan?

[01:36] <japhb> ... after, perhaps, a nap.

[01:36] <japhb> AlexDaniel: I'm hoping to spend a little time hacking on my RPG GM assistance code.

[01:37] <japhb> Been a while since I had a chance to work on that.

[01:37] <Hotkeys> ooo

[01:37] <japhb> You?

[01:37] <AlexDaniel> japhb: oh well! I hoped that you have nothing to do so that you can fix hyper in rakudo :D

[01:37] *** ely-se left
[01:37] *** Timbus joined
[01:38] * japhb chuckles

[01:38] <AlexDaniel> japhb: otherwise I'd have to write ugly workarounds that run the same code multiple times until it actually works… my plan is not to write these workarounds :)

[01:38] <japhb> :-)

[01:38] <japhb> What's broken, btw?

[01:39] <japhb> (As in, what's the broken behavior?)

[01:40] <AlexDaniel> japhb: mainly this: https://rt.perl.org/Public/Bug/Display.html?id=127452

[01:40] <AlexDaniel> m: dd @(^10 .hyper(:1batch).map: { sleep rand; $_ })

[01:40] <camelia> rakudo-moar ec543e: OUTPUT«(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)␤»

[01:40] <AlexDaniel> m: dd @(^10 .hyper(:1batch).map: { sleep rand; $_ })

[01:40] <camelia> rakudo-moar ec543e: OUTPUT«(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)␤»

[01:40] <AlexDaniel> m: dd @(^10 .hyper(:1batch).map: { sleep rand; $_ })

[01:41] <camelia> rakudo-moar ec543e: OUTPUT«()␤»

[01:41] <japhb> Woah, that's bad

[01:42] <AlexDaniel> I also don't want to get rid of hyper in my code because someone smart will fix it tomorrow :)

[01:42] <AlexDaniel> … or maybe not…

[01:43] <japhb> Is it broken in 2016.01.1 or head or both?

[01:44] <japhb> (I guess camelia confirms it's broken in head ...)

[01:44] <AlexDaniel> japhb: before 2015.01 there was no such bug, but there was another one: https://rt.perl.org/Public/Bug/Display.html?id=127099

[01:45] <japhb> I'm guessing by that being open, it's still a problem.  :-(

[01:46] <AlexDaniel> japhb: yes, except that behavior changed

[01:46] *** addison_ left
[01:46] <AlexDaniel> m: my @result = ^1000 .hyper.map: * + 10; say @result ~~ @result.sort

[01:46] <camelia> rakudo-moar ec543e: OUTPUT«True␤»

[01:47] <AlexDaniel> ↑ this kinda works

[01:47] <AlexDaniel> m: .say for (^10).hyper(:1batch).map: { sleep rand; $_ }

[01:47] <camelia> rakudo-moar ec543e: OUTPUT«1␤»

[01:47] <AlexDaniel> m: .say for (^10).hyper(:1batch).map: { sleep rand; $_ }

[01:47] <camelia> rakudo-moar ec543e: OUTPUT«1␤»

[01:47] <AlexDaniel> m: .say for (^10).hyper(:1batch).map: { sleep rand; $_ }

[01:47] <camelia> rakudo-moar ec543e: OUTPUT«3␤»

[01:47] <AlexDaniel> come on…

[01:47] <AlexDaniel> m: .say for (^10).hyper(:1batch).map: { sleep rand; $_ }

[01:47] <camelia> rakudo-moar ec543e: OUTPUT«0␤2␤3␤4␤1␤6␤5␤8␤7␤9␤»

[01:47] <AlexDaniel> japhb: ↑ here

[01:48] <japhb> Hmph

[01:48] * AlexDaniel cries in the corner

[01:48] *** TEttinger left
[01:49] <japhb> Yeah, I don't blame you.  Have you created spectests for these?

[01:50] *** Skarsnik left
[01:50] <AlexDaniel> japhb: oh, that's actually something I can do

[01:54] <AlexDaniel> japhb: maybe that's something I'll do during this weekend :)

[01:55] <japhb> Good idea!

[01:55] *** Timbus left
[01:57] *** ChristopherBotto joined
[01:57] <ChristopherBotto> .seen TimToady 

[01:57] <yoleaux> I saw TimToady 5 Feb 2016 20:56Z in #perl6: <TimToady> someone could point out that p6 behaves properly with https://stackoverflow.com/questions/11695110/why-is-this-program-valid-i-was-trying-to-create-a-syntax-error

[01:59] <ChristopherBotto> TimToady: I hope you are feeling better. I heard you were sick a while ago and the last several times I've checked the IRC logs you haven't been around

[02:00] <ChristopherBotto> .tell TimToady: I hope you are feeling better. I heard you were sick a while ago and the last several times I've checked the IRC logs you haven't been around

[02:00] <yoleaux> ChristopherBotto: What kind of a name is "TimToady:"?!

[02:01] <ChristopherBotto> .tell TimToady I hope you are feeling better. I heard you were sick a while ago and the last several times I've checked the IRC logs you haven't been around

[02:01] <yoleaux> ChristopherBotto: I'll pass your message to TimToady.

[02:01] *** ChristopherBotto left
[02:20] *** mscha left
[02:22] *** kid51_ joined
[02:24] *** Timbus joined
[02:25] *** kid51 left
[02:25] *** kid51_ is now known as kid51

[02:29] *** sufrostico left
[02:33] *** SCHAAP137 left
[02:43] *** Timbus left
[02:45] *** sevvie left
[02:53] *** kaare_ joined
[03:02] *** Timbus joined
[03:04] <ugexe> i think a recent commit broke nom on windows

[03:04] <ugexe> https://ci.appveyor.com/project/ugexe/zef/build/1.0.66#L944

[03:05] <ugexe> Label with no handler passed to newlexotic (during Stage parse)

[03:07] <ugexe> previous working build is from 21 hours ago. so one of the commits from today

[03:08] <Hotkeys> hmm

[03:08] <ugexe> lizmat: ^

[03:08] *** xpen joined
[03:22] *** kivutar left
[03:25] *** xpen left
[03:29] *** noganex joined
[03:31] *** noganex_ left
[03:32] *** kid51 left
[03:33] *** z8 joined
[03:34] <timotimo> liz' most recent commit might have caused that, yeah

[03:40] *** z8 left
[03:41] <timotimo> m: Syntax error!

[03:41] <camelia> rakudo-moar ec543e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Y4zLJWGgwX␤Bogus postfix␤at /tmp/Y4zLJWGgwX:1␤------> 3Syntax error7⏏5!␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement …»

[03:44] <geekosaur> perl 6 is so not into poetry mode >.>

[03:44] <timotimo> m: say Perl, Cool with any Version

[03:44] <camelia> rakudo-moar ec543e: OUTPUT«(Perl)(Cool)␤»

[03:54] <Hotkeys> heh

[03:55] <Hotkeys> timotimo: clever

[03:56] <timotimo> i did not invent this

[03:59] <Hotkeys> still clever

[03:59] *** revhippie left
[04:00] <Hotkeys> m: say Perl, Cool for any 1

[04:00] <camelia> rakudo-moar ec543e: OUTPUT«(Perl)(Cool)␤»

[04:01] *** kurahaupo left
[04:02] <Hotkeys> m: Perl, Cool, any time with any 1

[04:02] <camelia> rakudo-moar ec543e: ( no output )

[04:02] <Hotkeys> m: say Perl, Cool, any time with any 1

[04:02] <camelia> rakudo-moar ec543e: OUTPUT«(Perl)(Cool)any(1454731335)␤»

[04:02] *** Herby_ joined
[04:02] <Herby_> Evening, everyone!

[04:03] <Herby_> \o

[04:03] <Herby_> m: say 1 .. 3

[04:03] <camelia> rakudo-moar ec543e: OUTPUT«1..3␤»

[04:03] <Hotkeys> hola

[04:04] <Herby_> How goes it?

[04:05] <Hotkeys> m: say Perl, now with Hash

[04:05] <camelia> rakudo-moar ec543e: ( no output )

[04:05] <Hotkeys> kek

[04:05] <Hotkeys> Herby_: playing with sentences in perl6

[04:06] <MadcapJake> can you name subs with unicode?

[04:06] <Hotkeys> I believe so

[04:06] <MadcapJake> is there a special way to do it?

[04:06] <Hotkeys> hmm

[04:08] <Hotkeys> m: sub ❄ { say "$^a snowflakes }; ❄ 3; 

[04:08] <camelia> rakudo-moar ec543e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/iE_ZOzjKip␤Missing block␤at /tmp/iE_ZOzjKip:1␤------> 3sub7⏏5 ❄ { say "$^a snowflakes }; ❄ 3;␤    expecting any of:␤        new name to be defined␤»

[04:08] <MadcapJake> yeah that's what i keep getting

[04:08] <Hotkeys> m: sub term:<❄> { say "$^a snowflakes }; ❄ 3; 

[04:08] <camelia> rakudo-moar ec543e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/oaz1zPF1TY␤Unable to parse expression in double quotes; couldn't find final '"' ␤at /tmp/oaz1zPF1TY:1␤------> 3b term:<❄> { say "$^a snowflakes }; ❄ 3;7⏏5<EOL>␤    expecting any of:␤        …»

[04:08] <Hotkeys> m: sub term:<❄> { say "$^a snowflakes" }; ❄ 3; 

[04:08] <camelia> rakudo-moar ec543e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ifosWmY562␤Two terms in a row␤at /tmp/ifosWmY562:1␤------> 3sub term:<❄> { say "$^a snowflakes" }; ❄7⏏5 3;␤    expecting any of:␤        infix␤        infix stopper␤        statement end…»

[04:08] <Hotkeys> m: sub term:<❄> { say "$^a snowflakes" }; ❄(3); 

[04:08] <camelia> rakudo-moar ec543e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/vbKKzOesOL␤Calling term:<❄>() will never work with declared signature ($a)␤at /tmp/vbKKzOesOL:1␤------> 3sub term:<❄> { say "$^a snowflakes" }; 7⏏5❄(3);␤»

[04:08] <Hotkeys> m: sub term:<❄> ($a) { say "$a snowflakes" }; ❄(3); 

[04:08] <camelia> rakudo-moar ec543e: OUTPUT«5===SORRY!5=== Error while compiling /tmp/KNSRFbKENJ␤Calling term:<❄>() will never work with declared signature ($a)␤at /tmp/KNSRFbKENJ:1␤------> 3 term:<❄> ($a) { say "$a snowflakes" }; 7⏏5❄(3);␤»

[04:10] <geekosaur> m: sub prefix:<❄> ($a) { say "$a snowflakes" }; ❄(3); 

[04:10] <camelia> rakudo-moar ec543e: OUTPUT«3 snowflakes␤»

[04:10] <Hotkeys> interesting

[04:10] <Hotkeys> I guess that works

[04:10] <geekosaur> I would expect term to be a binary operator

[04:10] <Hotkeys> ah

[04:10] <MadcapJake> i want one that could take multiple arguments though, not necessarily a prefix/infix

[04:14] <AlexDaniel> m: my \term:<❄> = -> $a, $b, $c { say “$a, $b, $c snowflakes” }; ❄(4, 8, 15)

[04:14] <camelia> rakudo-moar ec543e: OUTPUT«4, 8, 15 snowflakes␤»

[04:14] <AlexDaniel> not exactly what you want, but…

[04:15] *** BenGoldberg left
[04:15] <MadcapJake> interesting!

[04:15] <geekosaur> hmmm, so actually infix is supposed to be the binary op

[04:20] <MadcapJake> this isn't really gonna work how i want it to

[04:20] <AlexDaniel> MadcapJake: honestly I don't think that using unicode sub names is a good idea

[04:21] <geekosaur> hm

[04:21] <AlexDaniel> MadcapJake: just measure the startup time…

[04:21] <MadcapJake> hehe, fiiiine :P

[04:21] <geekosaur> think I found a lie in S02

[04:21] <MadcapJake> oh rly? didn't know it impacted that

[04:21] <AlexDaniel> MadcapJake: it does, because basically you are changing the grammar

[04:21] <geekosaur> tried to use statement_prefix:<❄> and it said there isn't such

[04:21] <MadcapJake> oh ok, good point!

[04:22] * MadcapJake thinks adulting is hard

[04:22] <geekosaur> oh, do we still have that bug?

[04:22] <geekosaur> (unicode was making grammar parse time explode)

[04:22] <geekosaur> (I think there's still some hacks in the grammar to make various unicodey things not trigger it)

[04:23] <AlexDaniel> no, the problem is not with unicode

[04:23] <AlexDaniel> you can use term:<ascii!> and it will be as slow

[04:24] <geekosaur> oh, guess I just can't use those that way then. (I know statement_control is there...)

[04:24] <AlexDaniel> MadcapJake: +2s startup time here just for doing that… I don't think that it's worth it

[04:25] <AlexDaniel> MadcapJake: perhaps this delay is not important if you're writing a module

[04:26] <AlexDaniel> I think that precompilation will make it go away, but still…

[04:28] <MadcapJake> well technically this is a module, but it's about measuring performance so probably not a good place to go all unicode crazy

[04:28] <Hotkeys> lol

[04:28] <Hotkeys> what unicode were you going to use?

[04:29] <MadcapJake> 🔬

[04:29] <AlexDaniel> what is that

[04:29] <Hotkeys> I don't have a font that shows that 

[04:29] <Hotkeys> it's a microscope

[04:29] <MadcapJake> lol

[04:29] <timotimo> i don't see it

[04:29] <AlexDaniel> .u 🔬

[04:29] <yoleaux> U+1F52C MICROSCOPE [So] (🔬)

[04:29] <Hotkeys> .u 🔬

[04:29] <yoleaux> U+1F52C MICROSCOPE [So] (🔬)

[04:30] <AlexDaniel> oh, it's a microscope

[04:30] <Hotkeys> lol

[04:30] <timotimo> ah, a microscope

[04:30] <MadcapJake> it's so tiny

[04:30] <AlexDaniel> geez, who would have thought…

[04:30] <MadcapJake> you need a microscope just to see what it is ;)

[04:30] <Hotkeys> I think it's good to not use very uncommon symbols :p

[04:31] <MadcapJake> looks better in my code editor, I use size 15 font though

[04:31] <Hotkeys> atom doesn't show it for me

[04:31] <Hotkeys> might be my lack of a good font though

[04:31] <MadcapJake> hm strange, it's your font prolly

[04:31] <MadcapJake> I use Fira Code

[04:32] <MadcapJake> (I designed language-perl6fe to work really well with all the ligatures that Fira Code has)

[04:33] *** raiph left
[04:33] <Hotkeys> this font is nice

[04:33] * MadcapJake back to boring old text based subs ;)

[04:33] *** vendethiel joined
[04:37] <AlexDaniel> m: sub ᖱᖲ { say ‘Hello world…’ }; ᖱᖲ

[04:37] <camelia> rakudo-moar ec543e: OUTPUT«Hello world…␤»

[04:38] <MadcapJake> how'd that work?

[04:38] <AlexDaniel> MadcapJake: not necessarily

[04:38] <AlexDaniel> MadcapJake: because these are letters

[04:38] <MadcapJake> ahhh xD

[04:38] <AlexDaniel> so any character with L* property should work

[04:43] <AlexDaniel> m: sub ᖱ́ᖲ̀ { say ‘Hello world…’ }; ᖱ́ᖲ̀

[04:43] <camelia> rakudo-moar ec543e: OUTPUT«Hello world…␤»

[04:43] <Hotkeys> MadcapJake: thank you for this font

[04:43] <Hotkeys> it is wonderful

[04:44] <MadcapJake> Hotkeys, no prob! It's definitely my favorite programming font.

[04:45] <AlexDaniel> MadcapJake: so you can even use a bunch of combining characters together with weird letters :)

[04:45] <MadcapJake> AlexDaniel, haha wow!

[04:58] *** vendethiel left
[04:58] <Hotkeys> MadcapJake: Can you add support for the hex formatting of fira?

[04:58] <Hotkeys> it's very minor but it would look nice

[04:58] <AlexDaniel> m: my @x = start { sleep 1; 42 }; @x.push: start { sleep 1; 69 }; say @x».result

[04:58] <camelia> rakudo-moar ec543e: OUTPUT«[42 69]␤»

[04:58] <AlexDaniel> m: my @x = start { sleep 1; 42 }; @x.push: start { sleep 1; 69 }; say @x».result

[04:58] <camelia> rakudo-moar ec543e: OUTPUT«[42 69]␤»

[04:58] <AlexDaniel> m: my @x = start { sleep 1; 42 }; @x.push: start { sleep 1; 69 }; say @x».result

[04:58] <camelia> rakudo-moar ec543e: OUTPUT«[42 69]␤»

[04:58] <Hotkeys> eg for 0xF

[04:58] <AlexDaniel> come on…

[04:59] <Hotkeys> ?

[05:00] <AlexDaniel> it should break…

[05:00] <ZoffixWin> m: say (start { sleep 1; 69 }).result

[05:00] <camelia> rakudo-moar ec543e: OUTPUT«69␤»

[05:00] <Hotkeys> why?

[05:00] <Hotkeys> result waits

[05:01] <Hotkeys> don't see why it would break

[05:01] * ZoffixWin neither

[05:01] <AlexDaniel> sure, but it does on my computer

[05:01] <Hotkeys> oh

[05:01] <ZoffixWin> Oh

[05:01] <AlexDaniel> Cannot invoke this object (REPR: Null)

[05:01] <Hotkeys> lol

[05:01] <ZoffixWin> Works on my box

[05:01] <AlexDaniel> with about 50% chance

[05:01] <Hotkeys> works for me

[05:01] <AlexDaniel> ZoffixWin: try it 10 times

[05:02] <Hotkeys> AlexDaniel: http://i.imgur.com/YAS7pE1.png

[05:02] <AlexDaniel> I can't reproduce it on camelia…

[05:02] <AlexDaniel> Hotkeys: https://files.progarm.org/2016-02-06-070244_243x165_scrot.png

[05:02] <ZoffixWin> AlexDaniel, worked 20 times: https://gist.github.com/zoffixznet/fce06ca21262d22924cb

[05:03] *** vatzz61 joined
[05:03] <AlexDaniel> geez, but there *is* a problem somewhere

[05:03] <Hotkeys> Which version are you on AlexDaniel 

[05:03] <ZoffixWin> I'm on This is Rakudo version 2015.12-214-g775271d built on MoarVM version 2015.12-29-g8079ca5

[05:03] <AlexDaniel> my rakudo is like 1 or 2 days old

[05:03] <AlexDaniel> This is Rakudo version 2015.12-232-ga5fe347 built on MoarVM version 2015.12-29-g8079ca5

[05:03] <Hotkeys> myself: This is Rakudo version 2015.12-232-ga5fe347 built on MoarVM version 2015.12-35-g940850e

[05:04] <AlexDaniel> ha, look, almost

[05:04] <Hotkeys> lol

[05:04] * ZoffixWin builds a fresh one

[05:04] <Hotkeys> I've heard the current version is breaking on windows

[05:04] <Hotkeys> so I won

[05:04] <Hotkeys> won't :p

[05:04] <AlexDaniel> Hotkeys: not only…

[05:05] <Hotkeys> breaking everywhere?

[05:05] <AlexDaniel> yes, it's probably everywhere

[05:05] <Hotkeys> ah

[05:06] <AlexDaniel> ZoffixWin: I can't reproduce it on camelia… :/

[05:06] <ZoffixWin> Cool, then the bug is fixed! :p

[05:07] *** khw left
[05:08] <Hotkeys> \o/

[05:10] <AlexDaniel> ok guys can you try this?

[05:10] <AlexDaniel> m: my @x; @x.push: start { sleep 1; 1 } for ^100; say @x».result;

[05:10] <camelia> rakudo-moar ec543e: OUTPUT«Memory allocation failed; could not allocate 14208 bytes␤»

[05:10] <MadcapJake> Hotkeys, on it!

[05:11] <AlexDaniel> perhaps even try increasing 100 to something like 1000

[05:12] <Hotkeys> worked

[05:12] <Hotkeys> for 100

[05:13] <AlexDaniel> I don't know what to do then

[05:13] <Hotkeys> currently working on 1000

[05:13] <Hotkeys> AlexDaniel: upgrade a tiny bit? 

[05:13] <ZoffixWin> Same. Works fine with freshly squeezed Perl 6 (single-core box) and on older one too (4-core box)

[05:13] <Hotkeys> 1000 is still-- nvm

[05:13] <Hotkeys> it finished

[05:15] <Hotkeys> oh I see

[05:15] <Hotkeys> I had manually bumped my moar revision

[05:15] <Hotkeys> I was having issues or something I don't remember specifically what

[05:17] <ZoffixWin> The a couple of iterations of 1000 version worked fine on both boxes too: http://i.imgur.com/0ecYPMb.png

[05:17] <Hotkeys> yeah worked fine for me too

[05:17] <Hotkeys> you probably just need to upgrade

[05:18] <Hotkeys> I'm attempting the latest version

[05:19] *** davido_ joined
[05:19] <AlexDaniel> yeah, ok. I'll probably try again later once I upgrade

[05:19] <AlexDaniel> thanks

[05:21] <Hotkeys> ugexe: I was just able to build on windows fine

[05:22] <Hotkeys> I used gmake instead of nmake if that's any help

[05:23] <Hotkeys> http://i.imgur.com/IPnDRGR.png

[05:24] <Hotkeys> oops

[05:24] <Hotkeys> forgot to switch versions in rakudobrew

[05:24] <Hotkeys> that version is the other build I had

[05:24] <Hotkeys> I promise the current version built :p

[05:25] <Hotkeys> http://i.imgur.com/0Ch1PKH.png

[05:25] <ugexe> its not much help without any of the relevant build information. seeing as you are using rakudobrew i know you aren't using the same nqp version

[05:26] <Hotkeys> fair enough

[05:26] <ugexe> rather, same *moar* version

[05:29] *** TeamBlast left
[05:32] *** TeamBlast joined
[05:32] <ugexe> `perl Configure.pl --gen-moar=HEAD --gen-nqp && gmake install` if this builds fine then its specific to the compiler toolchain. if not then maybe its moar/nqp related?

[05:35] <ugexe> if only it didn't take so long to build on windows ugh...

[05:39] *** sevvie joined
[05:44] *** kurahaupo joined
[05:44] *** kurahaupo left
[05:46] *** Cabanossi left
[05:49] *** Cabanossi joined
[05:52] *** davido_ left
[05:57] *** xpen joined
[05:57] *** yqt left
[05:58] *** Herby_ left
[05:59] *** sevvie left
[06:09] *** vatzz61 left
[06:10] *** xpen left
[06:13] *** vendethiel joined
[06:22] <ugexe> maybe it actually is moarvm? https://github.com/MoarVM/MoarVM/commit/b6e0e2a3876d30d356d9d2d7d1ec5edbd689eb53

[06:25] <ugexe> it was with moar HEAD, so that would be it. the travis badge for rakudo is red as well from a failure with --gen-moar=master. lizmat your commits are have nothing to do with it^

[06:29] *** st_iron joined
[06:29] <st_iron> hi

[06:30] <AlexDaniel> hello

[06:30] <st_iron> say: "good morning"

[06:30] <st_iron> oops

[06:33] *** st_iron left
[06:33] <MadcapJake> can roles use the `unit` modifier?

[06:34] *** vendethiel left
[06:35] <AlexDaniel> m: say ‘good moarning’

[06:35] <camelia> rakudo-moar ec543e: OUTPUT«good moarning␤»

[06:35] <MadcapJake> har har

[06:35] <AlexDaniel> MadcapJake: try it and see if it dwims :)

[06:36] <MadcapJake> it doesn't that's why I ask xD

[06:37] <MadcapJake> it says "unable to parse role definition

[06:37] <MadcapJake> oops

[06:37] *** TEttinger joined
[06:37] <MadcapJake> It was an ID-10T error

[06:38] <MadcapJake> specifically of the semi-colon variety

[06:43] *** CIAvash joined
[06:45] *** dupa joined
[06:49] *** vendethiel joined
[06:50] *** isBEKaml joined
[06:51] <isBEKaml> OHHAI, does anyone see failures building rakudo HEAD?

[06:51] <isBEKaml> https://gist.github.com/svatsan/0ca4b3aeee8eaef4fc5e

[06:52] <dupa> hey are you all guys here very old?

[06:52] *** hippie1 joined
[06:52] <isBEKaml> dupa: why can't we all be both young and old? :-)

[06:53] <dupa> isBEKaml, Perl is older than me

[06:53] <isBEKaml> dupa: well, perl6 is probably younger than you

[06:53] *** hippie1 is now known as hippie

[06:53] <dupa> sure

[06:53] <dupa> ;d

[06:53] <dupa> but I suppose almost all good perl6 programmers knows perl5

[06:54] <dupa> thats why they choice perl6 for target cause young ppl like swift and go and ruby

[06:54] <dupa> and php etc.

[06:54] <dupa> old ppl like C and Perl

[06:58] <AlexDaniel> dupa: I don't think that your assumptions are 100% correct :)

[06:59] <AlexDaniel> e.g. I'm rather young

[06:59] <timotimo> isBEKaml: lizmat's latest commit is probably responsible for that. could you check that out?

[07:00] <timotimo> dupa: i'm a good perl6 programmer and i don't like perl5

[07:00] <timotimo> also, perl is older than me

[07:01] <AlexDaniel> anyway, who cares? :)

[07:02] *** domidumont joined
[07:02] <timotimo> right

[07:03] *** Sqirrel left
[07:04] <timotimo> i've grown up with the "hacker" mindset, more or less. so i'm ideally completely ignoring things like age, sex or sexual orientation, origin, ...

[07:04] *** mr-foobar joined
[07:04] <isBEKaml> timotimo: yes, I'm looking over commit stream right now

[07:06] <timotimo> i should go to bed, i think

[07:06] *** domidumont left
[07:07] <Hotkeys> dupa: 18 here, perl6 is my current favorite lang

[07:07] <AlexDaniel> \o/

[07:08] <Hotkeys>  |

[07:08] <Hotkeys> / \

[07:08] <Hotkeys> if you have users split from messages like hexchat and I think weechat does

[07:08] <Hotkeys> that makes a stick figure

[07:08] *** domidumont joined
[07:08] <Hotkeys> if you don't that is unfortunate

[07:09] <AlexDaniel> I'm decapitated, that's unfortunate

[07:09] <Hotkeys> D:

[07:10] <Hotkeys> AlexDaniel: http://i.imgur.com/5nt8mS1.png

[07:10] <Hotkeys> :)

[07:11] *** vendethiel left
[07:11] <AlexDaniel> m: sub o($){};     \ o /      1/

[07:11] <camelia> rakudo-moar ec543e: ( no output )

[07:13] <ugexe> timotimo: i think its the latest moarvm commits

[07:20] *** Laurent_R left
[07:21] <geekosaur> only makes a stick figure in hexchat if using a monospaced font

[07:23] *** awwaiid joined
[07:24] *** AlexDaniel left
[07:25] <Hotkeys> geekosaur: any sane person does

[07:29] *** protium joined
[07:33] <isBEKaml> ugexe: you may be right. Going back a few commits in rakudo still produce that error. It's somewhere in moarvm code, probably freeing up stuff a little too enthusiastically :-)

[07:35] <MadcapJake> duda, I've never written perl 5

[07:35] <MadcapJake> dupa ^

[07:35] <dupa> MadcapJake, ;-)

[07:35] <MadcapJake> I come from JavaScript land

[07:36] *** PiL_ joined
[07:37] <MadcapJake> If I wanted to create a seperate class's object, would I do this in `new` or `BUILD`?

[07:37] <MadcapJake> My class has a Default that inherits and I want to default to creating a Default instance

[07:38] <timotimo> well, the trick in construction really is that when you call self.bless in your new method, the self will be of potentially a more derived class than the class the method is defined in

[07:39] <timotimo> but nothing stops you from return Default.new(...) or even return Default.bless(...)

[07:39] *** CIAvash left
[07:39] <timotimo> which of the two is more proper for your use case really depends on the specifics

[07:40] <MadcapJake> i'm just passing a few parameters, no fiddling at all

[07:40] <MadcapJake> the function will just take some arguments and set them as parameters of the derived classes `new`

[07:40] <timotimo> if Default has its own "method new" or you're checking self against being Default already, you can just return Default.new(...), otherwise return self.bless(...)

[07:41] <MadcapJake> ok default doesn't have a new, it's just assumed to be there, so in that case it's just going to walk back up to my inherited `new` then right?

[07:41] <timotimo> that's right

[07:41] <MadcapJake> timotimo, thanks!

[07:41] <timotimo> you're welcome!

[07:42] <MadcapJake> can I do Default.bless?

[07:42] <timotimo> yes

[07:42] <MadcapJake> ok cool

[07:42] <timotimo> then you might want to prevent a method new from being implemented in Default, perhaps?

[07:43] <timotimo> because anything that gets put in there later on will not be run when you create a Default implicitly from BaseOfDefault.new

[07:46] <timotimo> it's already been quite a while, but when i first understood the thing about self.bless, my mind was a little bit blown :)

[07:47] <dupa> what WIP mean?

[07:47] <timotimo> "work in progress" usually

[07:48] <timotimo> http://design.perl6.org/S99.html - we have a little glossary where terms we use often that outsiders or newcomers may not know yet are defined and explained and such

[07:48] <timotimo> S99:WIP

[07:48] <timotimo> hm, isn't that how ... oh, synopsebot isn't back yet

[07:48] <timotimo> now i remember i wanted to set it up! darn

[07:49] *** TeamBlast left
[07:49] *** TeamBlast joined
[07:50] *** CIAvash joined
[07:52] <dalek> specs: b10af0c | timotimo++ | S99-glossary.pod:

[07:52] <dalek> specs: point out ".ast" is an alternative to ".made".

[07:52] <dalek> specs: review: https://github.com/perl6/specs/commit/b10af0c107

[08:02] *** CurtisOvidPoe joined
[08:05] *** lokien_ joined
[08:09] *** dupa left
[08:09] *** MadcapJake left
[08:11] *** sortiz joined
[08:12] *** darutoko joined
[08:13] *** dupa joined
[08:15] <sortiz> \o #perl6

[08:15] *** dupa left
[08:16] *** MadcapJake joined
[08:16] *** awwaiid left
[08:17] <sortiz> Is this the proper place for NQP questions?

[08:18] *** vendethiel joined
[08:18] <isBEKaml> Our resident NQP experts are probably not yet up/awake. Don't let that stop you from asking away

[08:18] *** domidumont left
[08:19] *** domidumont joined
[08:22] <sortiz> isBEKaml, Thanks, nothing specific yet, I been reading the source, and seems that ops.markdown, among others, in nqp/docs is outdated

[08:26] *** rindolf joined
[08:31] <isBEKaml> sortiz: if you're diving into NQP, you can look at this for an intro: https://github.com/edumentab/rakudo-and-nqp-internals-course

[08:31] *** firstdayonthejob joined
[08:31] <isBEKaml> timotimo,ugexe: I've isolated the moar commit that broke the build. looking at a fix now.

[08:34] *** CurtisOvidPoe left
[08:36] <sortiz> isBEKaml, Yes, I started with that, really good as an intro.

[08:38] *** CurtisOvidPoe joined
[08:42] *** domidumont left
[08:48] <sortiz> But I've found in rakudo's source some code that don't seems to have much sense, and I want to understand the why.

[08:49] *** yeahnoob left
[08:59] *** azawawi joined
[08:59] <azawawi> hi

[09:00] <sortiz>  On the other side, lizmat's recent work show me that there are lots of oportunities for optimization. Well can be the case.

[09:00] <azawawi> time p6doc -n Str   # => (real	0m38.804s, user	0m38.217s, sys	0m0.511s)

[09:01] *** Laurent_R joined
[09:01] <azawawi> why is it soooo slow?

[09:02] <azawawi> "This is Rakudo version 2016.01 built on MoarVM version 2016.01"

[09:06] <stmuk_> there was a patch to precomp pod but I don't think it was merged

[09:06] <azawawi> let me check

[09:06] *** dolmen joined
[09:07] <stmuk_> https://github.com/perl6/doc/pull/334

[09:08] *** CurtisOvidPoe left
[09:08] <stmuk_> I'm getting p6doc -n Str  9.14s user 0.35s system 99% cpu 9.548 total

[09:09] *** vendethiel left
[09:09] * azawawi tests it

[09:09] <stmuk_> and that's on a slow (but recent) Celeron 

[09:10] *** DoverMo joined
[09:11] *** RabidGravy joined
[09:12] <azawawi> hmmm...

[09:12] <azawawi> i found the problem

[09:12] *** _mg_ joined
[09:12] <azawawi> p6doc-index build   # afterwards slows down p6doc considerably

[09:13] <azawawi> removed index   # => 0m2.121s

[09:13] <stmuk_> ah its probably EVALFILE the index even if the flags don't specify its use

[09:14] <azawawi> https://github.com/facebooknuclideapm/hyperclick  # im working on atom editor for help/links now

[09:14] *** Sunbeam joined
[09:15] <stmuk_> I will look at that EVALFILE thing later if noone else gets there first

[09:16] <azawawi> right now i have no way to rely on the index

[09:16] <azawawi> and p6doc is not smart enough

[09:17] <stmuk_> the index is very slow ... I was hoping to replace it by moar serialisation but I haven't heard about that recently

[09:18] * moritz leans towards an sqlite database these days

[09:19] <azawawi> moritz: i agree

[09:19] <stmuk_> thats a good idea .. the NetBSD man page system uses its full text search and gets great search results

[09:20] <stmuk_> I suppose it would add DBIish as a dependency for p6doc (unless its just an option)

[09:20] <azawawi> stmuk_++ # go go :)

[09:20] *** bioexpress joined
[09:20] <stmuk_> RSN :)

[09:22] <azawawi> the cool thing is that i could find errors way faster than before via atom lint :)

[09:22] <azawawi> on Perl 6 projects that is

[09:23] <azawawi> we need to define a p6 project lifecycle or build tasks

[09:23] <azawawi> nobody wants to write "prove -v -e -Ilib"

[09:24] <azawawi> simply "p6-builder test"

[09:24] *** CurtisOvidPoe joined
[09:25] <DoverMo> did anyone like my mascot idea for perl6?

[09:25] <azawawi> or $some-cool-build-name {new|test|build|run|clean}

[09:25] <moritz> DoverMo: I didn't see it

[09:25] <azawawi> DoverMo: link it plz

[09:26] <sortiz> Btw, p6doc-index is broken in windows, more '/' vs '\' assumptions.

[09:26] <DoverMo> it was a river dolphin with han zi on it's body to represent the extinct chinese sub-species

[09:27] <RabidGravy> why don't places use $*SPEC.dir-sep or whatever it is

[09:27] <moritz> much of the p6doc code probably predates $*SPEC

[09:27] *** xinming left
[09:30] <sortiz> Seems missing a doc about portability.

[09:33] <isBEKaml> the commit that broke the build: https://github.com/MoarVM/MoarVM/commit/b6e0e2a3876d30d356d9d2d7d1ec5edbd689eb53 

[09:33] <isBEKaml> when do we normally free those handlers? For now, does it make sense to just revert it?

[09:34] *** pmurias joined
[09:34] <dalek> nqp: 83dc6d6 | (Pawel Murias)++ | src/vm/js/Utils.nqp:

[09:34] <dalek> nqp: [js] Remove a piece of dead code.

[09:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/83dc6d6766

[09:35] *** xinming joined
[09:38] *** Vitrifur left
[09:39] *** Vitrifur joined
[09:40] *** dolmen left
[09:40] *** vendethiel joined
[09:40] *** Vitrifur left
[09:41] <isBEKaml> jnthn: ping

[09:45] *** bioexpress left
[09:46] *** perlawhirl joined
[09:51] *** kurahaupo joined
[09:55] *** Sunbeam left
[09:55] *** domidumont joined
[09:59] *** protium left
[10:03] *** vendethiel left
[10:03] *** ely-se joined
[10:04] *** CurtisOvidPoe left
[10:05] *** vendethiel joined
[10:09] <lizmat> good *, #perl6!

[10:11] <pmurias> hi

[10:12] <dalek> nqp: f77aa4c | (Pawel Murias)++ | src/vm/js/QAST.nqp:

[10:12] <dalek> nqp: [js] remove useless file

[10:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f77aa4c887

[10:14] *** spider-mario joined
[10:15] *** dupa joined
[10:16] <lizmat> sortiz RabidGravy : in the newio branch, \ were always changed to / on input, so you didn't have to worry about which platform you worked on

[10:16] <lizmat> (since Win can handle / just fine, or so I'm told)

[10:17] <RabidGravy> At the OS level it can, the "shell" not so much

[10:17] *** domidumont left
[10:17] <nine> I seem to remember that it depends on which API you use

[10:17] *** domidumont joined
[10:18] <RabidGravy> though there used to be an API in DOS whereby you can change the directory separator for CMD.COM which I guess is long gone

[10:18] <RabidGravy> (and the switch character too)

[10:20] <RabidGravy> I've still got a DOS programmers reference upstairs somewhere

[10:21] <sortiz> lizmat, Yup, but, for example we can't assume the results of .find has a mere '/' in windows, see https://github.com/perl6/doc/blob/master/bin/p6doc-index#L39

[10:21] *** DoverMo left
[10:21] <lizmat> RabidGravy: on Win, it would transform all / to \ before shelling out

[10:22] <lizmat> sortiz: I see...  

[10:23] *** wamba joined
[10:23] <[Tux]> test            22.699

[10:23] <[Tux]> test-t          12.096

[10:23] <[Tux]> csv-parser      51.792

[10:24] *** _mg_ left
[10:25] <dalek> rakudo/nom: 6ade157 | lizmat++ | src/core/List.pm:

[10:25] <dalek> rakudo/nom: Speed up List.sum by a few percent

[10:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ade15746e

[10:25] * lizmat wonders what Travis will say about that

[10:26] <lizmat> [Tux] : is that also a bit lower than before ?

[10:26] <lizmat> test-t I mean?

[10:27] <RabidGravy> it's been wibbling around the 12.1 area for a while now

[10:27] *** dupa left
[10:28] <azawawi> do we have a performance graph for that?

[10:28] *** iH2O joined
[10:28] *** vendethiel left
[10:28] *** CurtisOvidPoe joined
[10:28] *** Zero_Dogg left
[10:29] *** bioexpress joined
[10:29] *** Zero_Dogg joined
[10:30] <azawawi> http://pasteboard.co/1lHRgQcE.png  # latest p6doc mock suggestions :)

[10:31] <stmuk_> originally MSDOS had a SWITCHAR option but it was abandoned but there are still traces 

[10:32] <sortiz> lizmat, In a more important question: I see your last commit to Capture, and thought that some nqp::isnull($!list) maybe can be eliminated.

[10:32] <RabidGravy> I'd go an look in the book but can't be arsed, some INT 21 function

[10:32] <lizmat> sortiz: I thought so too, initially, but there are other places in the core that create Captures without having a $!list

[10:33] <stmuk_> I think FreeDOS has it still http://help.fdos.org/en/hhstndrd/cnfigsys/switchar.htm

[10:33] <azawawi> INT 21 # sweet memories :)

[10:33] <azawawi> i still have a copy of PC Intern :)

[10:34] <sortiz> But in BUILD, $!list seems initialized unconditionally

[10:34] <[Tux]> lizmat: within nois level

[10:34] <[Tux]> e

[10:34] <stmuk_> I have Peter Norton's "Shirt" book somewhere

[10:34] <lizmat> :-(   but still  :-)

[10:34] <[Tux]> 12.000 is oke-ish

[10:35] *** iH2O left
[10:38] *** vendethiel joined
[10:39] <sortiz> lizmat, ie, in Capture.BUILD its assumed that @list is defined.

[10:39] <stmuk_> wonders how the docs are going to handle 6.d and 6.c

[10:40] <lizmat> sortiz: but Hash.Capture directly creates a Capture object *without* $!list

[10:42] *** _ramix_ joined
[10:46] <sortiz> lizmat, I see, thanks.

[10:48] * RabidGravy skips the changes feed tests in Sofa for speedy goodness

[10:49] <RabidGravy> there, the tests take a minute less

[10:49] *** CurtisOvidPoe left
[10:54] *** kurahaupo left
[10:54] *** TEttinger left
[10:56] <RabidGravy> Really need to get the EventSource client going, I *think* that it may be a matter of getting a "receive chunk" handler into H::UA and pushing the chunks to a supply

[10:57] <RabidGravy> but I want to do all of the hooks stuff in H::UA in one go

[10:57] <RabidGravy> unless someone else fancies doing it first

[11:01] *** vendethiel left
[11:03] <dalek> doc: 2bc55d8 | (Salvador Ortiz)++ | bin/p6doc-index:

[11:03] <dalek> doc: Use $*SPEC.dir-sep in p6doc-index

[11:03] <dalek> doc: review: https://github.com/perl6/doc/commit/2bc55d8ba0

[11:03] *** pangur joined
[11:03] *** _ramix_ left
[11:04] <pangur> crosspost: #emacs, #perl6 Anyone here use emacs to edit and compile perl6 code?

[11:04] <RabidGravy> I'd be surprised if there wasn't

[11:05] *** firstdayonthejob left
[11:12] <azawawi> http://doc.perl6.org/ is the latest documentation... what about documentation for specific version (e.g. 2016.01)?

[11:13] *** travis-ci joined
[11:13] <travis-ci> Doc build failed. Salvador Ortiz 'Use $*SPEC.dir-sep in p6doc-index'

[11:13] <travis-ci> https://travis-ci.org/perl6/doc/builds/107423805 https://github.com/perl6/doc/compare/7b80938dd02b...2bc55d8ba075

[11:13] *** travis-ci left
[11:14] <RabidGravy> azawawi, the documentation isn't currently versioned AFAIK

[11:15] <RabidGravy> possibly should be tagged at release time

[11:15] *** CurtisOvidPoe joined
[11:24] *** vendethiel joined
[11:39] *** kjs_ joined
[11:43] *** ely-se left
[11:44] *** vendethiel left
[11:45] *** CurtisOvidPoe left
[11:50] *** wamba left
[11:51] *** pangur left
[11:56] <ab5tract> I don't think we've gotten to a point where we feel that it fully covers 6.c 

[11:56] <ab5tract> but it would make more sense to tag it to Perl 6 releases, not Rakudo ones

[11:56] <dalek> doc: 1bc7a03 | (Salvador Ortiz)++ | bin/p6doc-index:

[11:56] <dalek> doc: Revert "Use $*SPEC.dir-sep in p6doc-index"

[11:56] <dalek> doc: 

[11:56] <dalek> doc: This reverts commit 2bc55d8ba075ce9671ed0ecfa535629956040c5c.

[11:56] <dalek> doc: Must check first why travis-ci buid failed

[11:56] <dalek> doc: review: https://github.com/perl6/doc/commit/1bc7a03a59

[11:57] <azawawi> it would make also sense to make releases out of it so editors/IDEs can index that info

[11:57] <ab5tract> azawawi: sure, but it's not Rakudo documentation. It's Perl 6 documentation.

[11:57] <azawawi> so im finished with the UI for linking to Perl 6 documentation

[11:57] <azawawi> and i cannot use it lol

[11:58] <azawawi> p6doc -f say

[11:58] <azawawi> p6doc -n say

[11:58] <ab5tract> azawawi: ah, that's still broken?

[11:58] <ab5tract> azawawi: it sounds like it might be time to return to the p6doc-server idea

[11:59] <azawawi> or generate a json index that is a part of a release :)

[11:59] <azawawi> bummer... wasted time on http://pasteboard.co/1lHRgQcE.png

[12:00] <ab5tract> azawawi: AFAIR, the file that is generated by p6doc-index is just a hash declaration which gets EVAL'd

[12:00] <azawawi> index.data is unusable

[12:00] <ab5tract> you could try just calling to-json on that

[12:00] *** wamba joined
[12:00] <azawawi> tried lol

[12:00] <ab5tract> ok

[12:01] <ab5tract> oh man

[12:01] <ab5tract> that is not time wasted

[12:01] <ab5tract> let's get that working :)

[12:02] <ab5tract> the plugin just needs a JSON version of index.data? is there a specification as to what the structure should look like?

[12:03] <ab5tract> or does the plugin shell out to `p6doc -f $query` ?

[12:03] <azawawi> i wanted to shell out

[12:03] <ab5tract> so we just need to fix p6doc?

[12:03] <azawawi> yup

[12:03] <azawawi> :)

[12:04] <azawawi> the worst thing for a developer is to see an IDE saying "Indexing..." :)

[12:05] *** perlawhirl left
[12:05] <ab5tract> well, the current speeds of p6doc when it was working would not impress anyone either

[12:05] *** dupa joined
[12:06] <ab5tract> because it slurps and evals that hash file every time

[12:06] <azawawi> also one more thing, we need a human friendly index... which means

[12:06] <ab5tract> obviously becoming slower and slower as the docs get better and better

[12:06] <azawawi> i need to find the documentation of "say" by holding ctrl and then clicking on it :)

[12:06] <azawawi> as simple as that

[12:06] *** travis-ci joined
[12:06] <travis-ci> Doc build failed. Salvador Ortiz 'Revert "Use $*SPEC.dir-sep in p6doc-index"

[12:06] <travis-ci> https://travis-ci.org/perl6/doc/builds/107428713 https://github.com/perl6/doc/compare/2bc55d8ba075...1bc7a03a596c

[12:06] *** travis-ci left
[12:06] *** kjs_ left
[12:07] <ab5tract> azawawi: right, i see. so you need the index to know what you can shell out for

[12:07] <azawawi> yeah that could be an optimization

[12:07] *** vendethiel joined
[12:08] *** kjs_ joined
[12:08] <azawawi> use FooBar;  # when FooBar is clicked, we should its documentation

[12:08] <sortiz>  Oh my! Seems unrelated.. But why?!?

[12:09] <azawawi> sortiz: seems like bad code

[12:10] <RabidGravy> anyway, off out for a bit. toodles

[12:10] <ab5tract> ciao RabidGravy!

[12:10] <azawawi> RabidGravy: have fun

[12:11] *** a3r0 joined
[12:12] <azawawi> ab5tract: hmmm, i need to will use doc.perl6.org api right away :)

[12:12] <sortiz> azawawi, I commit 2bc55d8 and fail, so I revert it in 1bc7a03, but failed again, see: https://travis-ci.org/perl6/doc/builds, I can't understand!

[12:12] <ab5tract> azawawi: sorry, can you clarify a bit?

[12:12] *** kjs_ left
[12:12] *** bioexpress left
[12:12] *** a3r0_ left
[12:13] <ab5tract> sortiz: could be that it was already broken?

[12:13] <azawawi> ab5tract: doc.perl6.org search bar

[12:13] <ab5tract> azawawi: yeah, but are you saying that you will just use that instead for now?

[12:13] *** ely-se joined
[12:13] <azawawi> ab5tract: yup

[12:14] <ab5tract> "i need to will use" <--- this was what confused me :)

[12:14] <ab5tract> ok, so there's a workaround for now!

[12:14] *** RabidGravy left
[12:14] <azawawi> ab5tract: hopefully it will work

[12:14] * azawawi takes a look at http://doc.perl6.org/js/search.js

[12:14] <sortiz> ab5tract, Can be, but the build history in Travis don't show any evidence. I'm totally confused.

[12:15] *** ely-se left
[12:15] *** ely-se joined
[12:17] <jnthn> isBEKaml: pong

[12:19] *** SCHAAP137 joined
[12:20] <jnthn> .tell isBEKaml I'm only about now and then during the weekend, so may be easier to .tell me what you want to ask :)

[12:20] <yoleaux> jnthn: I'll pass your message to isBEKaml.

[12:21] *** dupa left
[12:21] <azawawi> ab5tract: https://github.com/azawawi/atom-perl6-editor-tools/blob/master/lib/index.json

[12:24] <ab5tract> azawawi: awesome!

[12:26] *** tadzik1 is now known as tadzik

[12:27] *** CIAvash left
[12:28] *** kid51 joined
[12:28] <ab5tract> .tell RabidGravy unfortunately the Tinky example workflow doesn't work on OS X either. I like the looks of this library though!

[12:28] <yoleaux> ab5tract: I'll pass your message to RabidGravy.

[12:29] *** lokien_ left
[12:30] <kid51> Is there as yet a perl6 executable equivalent to 'perldoc'?

[12:30] *** vendethiel left
[12:30] *** rindolf left
[12:30] <ab5tract> kid51: p6doc, but it may be broken at this moment

[12:31] <kid51> If it did exist, I would have expected to find it along these other executables:

[12:31] <kid51> ls ~/rakudo-star/bin/

[12:31] <kid51> moar  nqp  nqp-m  perl6  perl6-debug-m  perl6-gdb-m  perl6-m  perl6-valgrind-m

[12:31] <isBEKaml> .tell jnthn I was looking for some advice on fixing a broken commit: http://irclog.perlgeek.de/perl6/2016-02-06#i_11998442. No rush - enjoy your weekend :-)

[12:31] <yoleaux> 12:20Z <jnthn> isBEKaml: I'm only about now and then during the weekend, so may be easier to .tell me what you want to ask :)

[12:31] <yoleaux> isBEKaml: I'll pass your message to jnthn.

[12:31] <kid51> Hmm, I see it in: ~/rakudo-star/share/perl6/site/bin/p6doc

[12:33] <ab5tract> kid51: i noticed that the binary was not where i expected it earlier today. i use rakudobrew and panda, and it seems that you see something similar with rakudo-star

[12:34] <geekosaur> I have a p6doc in my (older) rakudobrew. seems something might be broken recently

[12:34] <ab5tract> it needs some love. i proposed a reorganization of the CLI interface into something that fetches from an independent p6doc-server process

[12:35] <ab5tract> but i haven't had the tuits

[12:35] *** dupa joined
[12:36] <azawawi> we need commands like the following https://golang.org/cmd/go/ in perl6... could be in panda/zef or new pkg

[12:36] *** rindolf joined
[12:36] <ab5tract> there is a pretty swazzy looking JSON-RPC library for perl 6 that we could use

[12:37] <kid51> $ p6doc -f push

[12:37] <kid51> In order to use unqualified sub and method names like "p6doc -f say"

[12:37] <ab5tract> https://github.com/bbkr/jsonrpc

[12:37] <kid51> you will need to run "p6doc-index build" to build index.data.

[12:37] <kid51> Otherwise use "p6doc -f Type::Str.split" instead of "p6doc -f split" for now.

[12:37] <kid51> Not very user friendly

[12:37] <ab5tract> kid51: I believe I've just pointed out that the tool needs some love :)

[12:37] *** rindolf left
[12:37] <kid51> One wonders why p6doc-index build could not be done on installation

[12:37] <azawawi> kid51: that and why wasnt it built when p6doc was installed :)

[12:38] <kid51> ab5tract: Yes, I'm trying to anticipate the complaints I'm going to get later today at our beginners study group

[12:38] <ab5tract> kid51: right on. i would say that you might want to consider the CLI docs broken at the moment

[12:38] <azawawi> ab5tract: then a good project is https://golang.org/cmd/go/ :)

[12:39] <azawawi> ab5tract: i already built the UI for it... just make the command https://github.com/azawawi/atom-perl6-editor-tools#build-support

[12:39] <ab5tract> in the context of a class

[12:39] *** FROGGS left
[12:39] <ab5tract> the web interface has been given a lot more care and attention to detail

[12:40] <ab5tract> s/class/study group/

[12:44] *** rindolf joined
[12:45] <jnthn> isBEKaml: Yeah, nwc10++ reported more into on the failure mode on #moarvm; reverted it, since it wasn't obvious how to do a more correct fix.

[12:45] <yoleaux> 12:31Z <isBEKaml> jnthn: I was looking for some advice on fixing a broken commit: http://irclog.perlgeek.de/perl6/2016-02-06#i_11998442. No rush - enjoy your weekend :-)

[12:45] <azawawi> ab5tract: any link on the topics you're going to cover in your beginners study group?

[12:46] <ab5tract> azawawi: i think you want to ping kid51 :)

[12:46] <isBEKaml> jnthn: yeah, I didn't know it was reverted, thanks

[12:47] <jnthn> isBEKaml: I only just did it :)

[12:47] *** musiKk joined
[12:47] <azawawi> ab5tract: sorry got confused.. im writing perl6 in the vm and android on windows host :)

[12:47] <jnthn> After looking into a correcter fix and deciding I'm not clever enough to figure it out today. Or at least, not at this part of today. :-)

[12:48] <azawawi> kid51: any link on the topics you're going to cover in your beginners study group?

[12:48] <kid51> That will be discussed at Session 1.

[12:48] <kid51> There are several different tutorials on web.

[12:49] <kid51> And of course some who show up will want to Do Their Own Thing, while others will want to work more collectively

[12:49] <kid51> So, unknown yet.

[12:49] <kid51> Will report once we have something that is actually working

[12:51] <ab5tract> kid51: that sounds like a good approach.

[12:53] *** BenGoldberg joined
[12:53] <kid51> Here is the original call for this group:  http://thenceforward.net/perl/misc/nyc_perl6/20160116_00_call_for_group.txt

[12:53] <isBEKaml> jnthn: okay - I was leaning towards reverting it, since I don't know how far up above that piece of code stands, where it needs to have handlers freed. C is a terrible flat-land :P

[12:54] *** FROGGS joined
[12:56] <jnthn> isBEKaml: Well, it's not that big a deal in so far as NQP_REVISION/MOAR_REVISION weren't bumped

[12:57] <jnthn> Those give us a little breathing room :)

[12:58] <isBEKaml> jnthn: ah, okay

[12:58] <dupa> hey how can I use perl module without installing it via panda

[13:01] <azawawi> kid51: thx for the info

[13:03] *** dupa is now known as magiczna_dupa

[13:04] *** franciskittu joined
[13:04] *** franciskittu left
[13:05] *** vendethiel joined
[13:06] <sortiz> Some change in rakudo between g8bd7ee6 and g6ade157 seems to broke the build for p6docs, I'm investigating..

[13:06] <lizmat> which repo?

[13:08] <sortiz> lizmat, This is Rakudo version 2015.12-242-g8bd7ee6 vs This is Rakudo version 2015.12-251-g6ade157

[13:10] <lizmat> I wonder where that g comes from

[13:10] <lizmat> doesn't look very hexadecimal to me

[13:11] <sortiz> Yup, copied from travis-ci logs.

[13:11] <isBEKaml> IIRC, it was just a prefix after which comes the revision string

[13:11] <lizmat> initially I was wondering why I couldn't find those commit ID's in the git log

[13:11] <geekosaur> git describe, and as far as I know it stands for git

[13:12] <sortiz> In my rush don't noticed the 'g'

[13:13] * geekosaur keeps grabbing those in other projects too, wish they had include a separator so select-word didn't always grab the g as part of the commit hash

[13:14] <geekosaur> because everyone and their pet banth includes git describe in artifact ids :/

[13:15] <geekosaur> but of course git doesn't *accept* it in a commit hash

[13:16] <sortiz> For perl6/doc, the failure "This type does not support associative operations" is reported in https://github.com/perl6/doc/blob/master/lib/Perl6/Documentable/Registry.pm#L26

[13:17] <sortiz> Thats is a common autovivification, that somehow now isn't working.

[13:18] <ab5tract> 

[13:19] *** wamba left
[13:20] *** isBEKaml left
[13:24] <sortiz> With a simple "%!cache{$by} = {};" before the for, the make succeeds, that file wasn't touched in weeks.

[13:24] * jnthn wonders if the hash access opts maybe accidentally lost a :D on the invocant somewhere...

[13:24] *** perlawhirl joined
[13:24] <jnthn> Also if we do have a regression there, we clearly need more autoviv tests :)

[13:25] <magiczna_dupa> I include bailador to project

[13:25] <magiczna_dupa> but it seams

[13:26] <magiczna_dupa> it has bugs

[13:26] *** FatalNIX left
[13:26] *** vendethiel left
[13:27] <sortiz> How I have to proceed?

[13:29] *** perlawhirl left
[13:29] <ab5tract> magiczna_dupa: I've never used it, but I have heard others say the same :(

[13:30] <lizmat> jnthn : I'm afraid that's another case of attrinited given a false positive because something did a getattr before

[13:30] <Rotwang> magiczna_dupa: great nick

[13:31] <lizmat> jnthn: in other words, use of attrinited is making code fragile  :-(

[13:32] <lizmat> reverting use of attrinited in hash<a>

[13:32] *** Actualeyes joined
[13:33] <jnthn> lizmat: Well, yeah, you have to be very consistent with it. It's designed precisely for construction time stuff.

[13:34] <lizmat> well, I was consistent enough to not break any spectests  :-(

[13:34] *** magiczna_dupa left
[13:34] *** magiczna_dupa joined
[13:34] *** magiczna_dupa left
[13:36] *** perlawhirl joined
[13:36] <jnthn> lizmat: Yeah, guess we need more of those ;)

[13:36] <jnthn> Can revert it for now anyway

[13:36] <lizmat> yeah, spectesting the revert atm

[13:36] <jnthn> We may be able to find some more robust solution now we know there's something to be had optimization wise in that area.

[13:43] <dalek> rakudo/nom: 7a51234 | lizmat++ | src/core/Hash.pm:

[13:43] <dalek> rakudo/nom: Revert use of attrinited in Hash<a>

[13:43] <dalek> rakudo/nom: 

[13:43] <dalek> rakudo/nom: This should fix problems in making docs, sortiz++ for reporting

[13:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7a51234075

[13:43] <lizmat> sortiz: could you check if this fixes the problem ?

[13:44] <sortiz> lizmat, sure.

[13:46] <sortiz> lizmat, give me a few minutes.

[13:46] <lizmat> sure  :-)

[13:52] <sortiz> lizmat, indeed fixed.

[13:52] <lizmat> cool, thanks for checking!

[13:53] *** FROGGS_ joined
[13:53] <dalek> rakudo/nom: 04eac9b | lizmat++ | src/core/Str.pm:

[13:53] <dalek> rakudo/nom: Fix magic inc/dec on beer mugs and camels

[13:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/04eac9bc5d

[13:54] *** raiph joined
[13:56] *** FROGGS left
[13:56] *** ely-se left
[13:57] * sortiz I need to understand well NQP ASAP

[13:59] *** domidumont left
[14:00] *** isBEKaml joined
[14:00] <ZoffixWin> m: say so / <-[]+\s>* / for " ", "\t"

[14:00] <camelia> rakudo-moar 7a5123: OUTPUT«5===SORRY!5=== Error while compiling /tmp/YLd9cPWNdS␤Unable to parse expression in metachar:sym<assert>; couldn't find final '>' ␤at /tmp/YLd9cPWNdS:1␤------> 3say so / <-[]+7⏏5\s>* / for " ", "\t"␤    expecting any of:␤        prefix␤»

[14:01] <ZoffixWin> I recall there was a way to specify "this character class, but minus this character"

[14:01] *** Skarsnik joined
[14:01] <ZoffixWin> Like \s but without space 32

[14:02] <dalek> doc: a9fb33d | (Salvador Ortiz)++ | WANTED:

[14:02] <dalek> doc: Add OS portability to WANTED

[14:02] <dalek> doc: 

[14:02] <dalek> doc: And I need to kick start a travis-ci build :)

[14:02] <dalek> doc: review: https://github.com/perl6/doc/commit/a9fb33d2c2

[14:03] <ZoffixWin> m: say so / <-[ ]+[\s]> / for " ", "\t"

[14:03] <camelia> rakudo-moar 7a5123: OUTPUT«===SORRY!===␤Iteration past end of iterator␤»

[14:03] <ZoffixWin> :o

[14:04] *** RabidGravy joined
[14:05] <ZoffixWin> ah, I was close:

[14:05] <ZoffixWin> m: say so / <[\s]-[ ]> / for " ", "\t"

[14:05] <camelia> rakudo-moar 7a5123: OUTPUT«===SORRY!===␤Iteration past end of iterator␤»

[14:05] <ZoffixWin> m: say so / <[\s] - [ ]> / for " ", "\t"

[14:05] <camelia> rakudo-moar 7a5123: OUTPUT«===SORRY!===␤Iteration past end of iterator␤»

[14:05] <ZoffixWin> m: so 'foo' ~~ / <[ a..z ] - [ f o ]> + /;

[14:05] <camelia> rakudo-moar 7a5123: OUTPUT«WARNINGS for /tmp/wIJpl2RQFE:␤Useless use of "so " in expression "so 'foo' ~~" in sink context (line 1)␤»

[14:05] <ZoffixWin> m: say so 'foo' ~~ / <[ a..z ] - [ f o ]> + /;

[14:05] <camelia> rakudo-moar 7a5123: OUTPUT«False␤»

[14:05] <ZoffixWin> wtf

[14:06] <ZoffixWin> m: say so / <[\t] - [ ]> / for " ", "\t"

[14:06] <camelia> rakudo-moar 7a5123: OUTPUT«===SORRY!===␤Iteration past end of iterator␤»

[14:06] <ZoffixWin> m: say so / <[ \t ] - [x]> / for " ", "\t"

[14:06] <camelia> rakudo-moar 7a5123: OUTPUT«False␤True␤»

[14:06] <ZoffixWin> m: say so / <[ \t ] - [\ ]> / for " ", "\t"

[14:06] <camelia> rakudo-moar 7a5123: OUTPUT«False␤True␤»

[14:06] <ZoffixWin> m: say so / <[ \s ] - [\ ]> / for " ", "\t"

[14:06] <camelia> rakudo-moar 7a5123: OUTPUT«False␤True␤»

[14:06] *** vendethiel joined
[14:06] <ZoffixWin> So it's an unescaped space inside a character class without anything in it.

[14:06] *** perlawhirl left
[14:07] <isBEKaml> m: say so /<[\s] - []>/ for " ", "\t"

[14:07] <camelia> rakudo-moar 7a5123: OUTPUT«===SORRY!===␤Iteration past end of iterator␤»

[14:07] <isBEKaml> same behaviour

[14:08] <ZoffixWin> Sure, whitespace is insignificant 

[14:08] <isBEKaml> not what I meant - [ ] was treated as [] and didn't see a character searching it through

[14:09] <isBEKaml> so it went past end of string. It should have some sort of check around those bounds

[14:16] <ZoffixWin> Which string?

[14:17] <ZoffixWin> I'd think it went in looking for characters in a character class, but there were none, hence the 'past end' message.

[14:17] <ZoffixWin> I rather not add any checks for bounds if that means making the thing slower.

[14:17] <ab5tract> o/ ZoffixWin 

[14:17] <ZoffixWin> ?

[14:18] <ab5tract> I've enjoyed your blog posts a lot!

[14:18] <ab5tract> Just waving hello, if that '?' was directed at me.

[14:19] <ZoffixWin> After the vitriol you were spewing into my /msg a month or so ago, a wave of hello is suspicious.

[14:20] <lizmat> .oO( a month is a lot of time on the internets )

[14:21] <RabidGravy> two days is a long time on the internets

[14:21] <yoleaux> 12:28Z <ab5tract> RabidGravy: unfortunately the Tinky example workflow doesn't work on OS X either. I like the looks of this library though!

[14:21] *** lokien_ joined
[14:22] <ab5tract> ZoffixWin: it was meant as a conciliatory gesture, in hopes of moving on..

[14:22] <ZoffixWin> Very well... Thanks for liking my blog post.

[14:22] <RabidGravy> ab5tract, it's file a bug against rakudo/moar/libuv then  :)

[14:23] <ab5tract> RabidGravy: true

[14:23] <RabidGravy> I'd go with checking that a minimal node.js example works to rule out the libuv part

[14:24] *** cdg joined
[14:25] *** telex left
[14:26] *** pochi_ is now known as pochi

[14:26] *** ely-se joined
[14:26] *** telex joined
[14:27] *** travis-ci joined
[14:27] <travis-ci> Doc build passed. Salvador Ortiz 'Add OS portability to WANTED

[14:27] <travis-ci> https://travis-ci.org/perl6/doc/builds/107441749 https://github.com/perl6/doc/compare/1bc7a03a596c...a9fb33d2c2b5

[14:27] *** travis-ci left
[14:28] *** vendethiel left
[14:29] <sortiz> I can relax now :)

[14:29] *** Actualeyes left
[14:31] <RabidGravy> ab5tract, e.g. "var fs = require('fs'); fs.watch('.', function (event, filename){ console.log('event is: ' + event); });" if that works in node then rakudo/bug if not libuv bug

[14:31] <ab5tract> RabidGravy: gotcha.

[14:33] *** Deconachick joined
[14:33] <Deconachick> rakudo

[14:33] *** MadcapJake left
[14:34] <Deconachick> .msg camelia p6

[14:34] <yoleaux> Deconachick: Sorry, this command is admin-only.

[14:34] *** Deconachick left
[14:35] <sortiz> till tomorrow #perl6

[14:36] <lizmat> sortiz o/

[14:37] *** sortiz left
[14:38] *** MadcapJake joined
[14:39] <ab5tract> cioa sortiz

[14:40] *** vendethiel joined
[14:44] *** Actualeyes joined
[14:44] *** cdg left
[14:46] <lizmat> jnthn: wrt to additional tests, I'm not quite sure where to add them atm, if it's about things getting added for 6.c

[14:47] <lizmat> or for 6.d.a for that matter

[14:47] <moritz> I'm looking for volunteers to proof-read a German Perl 6 article for me (and give me feedback)

[14:47] *** BenGoldberg left
[14:47] <moritz> hoelzro++ read a first draft already, but more eyes would be appreciated

[14:48] <moritz> FROGGS_, timotimo, [ptc], nine: ^^

[14:48] <lizmat> moritz: as long as you don't expect me to find any errors in German, I'm game :-)

[14:49] <dalek> rakudo/nom: d25b51e | lizmat++ | src/core/Str.pm:

[14:49] <dalek> rakudo/nom: Make magic inc/dec on strings 2x as fast

[14:49] <dalek> rakudo/nom: 

[14:49] <dalek> rakudo/nom: By not needing an iterator to do initializations

[14:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d25b51e6af

[14:49] <moritz> lizmat: I expect that too, but nto from you :-)

[14:50] *** rpburkholder joined
[14:56] *** ZoffixWin left
[14:57] *** FROGGS[mobile] joined
[14:58] <FROGGS[mobile]> moritz: can you email me details?

[14:58] <dalek> rakudo/nom: dbc7115 | lizmat++ | src/core/Junction.pm:

[14:58] <dalek> rakudo/nom: Remove superfluous return

[14:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dbc7115897

[14:58] <dalek> rakudo/nom: 2fb2fbc | lizmat++ | src/core/ (2 files):

[14:58] <dalek> rakudo/nom: Mark some more subs as not returning anything

[14:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2fb2fbc7f5

[14:59] <moritz> FROGGS[mobile]: sure

[15:00] <nine> Why exactly can't the optimizer just remove the return if it's the last statement in a function?

[15:01] *** xinming left
[15:02] <moritz> well, it'd have to verify that it resolves to &return from CORE

[15:02] *** xinming joined
[15:03] <moritz> and it also can't do it on "is rw" routines (because return decontainerizes

[15:03] <nine> Which should be possible as we statically resolve subs at compile time, don't we?

[15:03] <moritz> we do

[15:06] <moritz> oh, and needs to check the absence of CONTROL blocks too

[15:07] <RabidGravy> Hmm, if e.g. a PRE phaser is run, however it is added, if it returns false then  there should be a "Precondition failed" right?

[15:08] <moritz> yes

[15:08] <moritz> m: sub f() { PRE 0; say 'foo' }; f 

[15:08] <camelia> rakudo-moar 04eac9: OUTPUT«Precondition '0' failed␤  in sub f at /tmp/cSX4qG3I4D line 1␤  in block <unit> at /tmp/cSX4qG3I4D line 1␤␤»

[15:08] *** TimToady left
[15:09] *** cognome joined
[15:10] *** TimToady joined
[15:10] <RabidGravy> yeah, so if I do .add_phaser('PRE", { False }); in a trait that should work too (having confirmed it is run), because it doesn't fail

[15:12] <moritz> note that routines that don't have phasers are codegen'd without support for phasers, for performance reasons

[15:13] <RabidGravy> right, but the phaser does get run, it just doesn't boom

[15:14] <moritz> RabidGravy: ah, the codegen adds the X::Phaser::PrePost 

[15:14] <moritz> RabidGravy: so you have to do that manually

[15:15] <RabidGravy> m: sub trait_mod:<is>(Routine $r, :$phased!) { $r.add_phaser('PRE', sub (|c --> Bool) { say "PRE"; False; }); }; sub foo() is phased { say "HARR"; }; foo();

[15:15] <camelia> rakudo-moar 2fb2fb: OUTPUT«PRE␤HARR␤»

[15:15] <RabidGravy> ah

[15:16] <RabidGravy> gotcha

[15:20] *** AlexDaniel joined
[15:23] *** virtualsue joined
[15:26] *** vendethiel left
[15:37] *** kurahaupo joined
[15:37] *** vendethiel joined
[15:41] *** musiKk left
[15:41] *** MadcapJake left
[15:43] *** Kcop left
[15:46] <[Tux]> will p6 get a num128?

[15:46] <dalek> doc: 0bfe797 | (Steve Mynott)++ | bin/p6doc-index:

[15:46] <dalek> doc: only display index file if it exists

[15:46] <dalek> doc: review: https://github.com/perl6/doc/commit/0bfe797c5b

[15:48] <dalek> rakudo/nom: 891d456 | lizmat++ | src/core/Mu.pm:

[15:48] <dalek> rakudo/nom: Make basic object creation 5% faster

[15:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/891d456b80

[15:49] <RabidGravy> lizmat++ properly on a roll with this stuff

[15:49] <lizmat> [Tux]: I wonder whether this has any affect on test-t

[15:49] * [Tux] tries ...

[15:53] *** ely-se left
[15:54] *** raiph left
[15:58] <[Tux]> :( panda is littered with if expr { … return } else { … return } :(

[15:59] <[Tux]> s/panda/Inline::Perl5/

[15:59] *** vendethiel left
[15:59] <[Tux]> test            22.570

[15:59] <[Tux]> test-t          12.073

[15:59] <[Tux]> csv-parser      50.755

[16:01] <lizmat> that's still within noise, but also lower, right ?

[16:01] <[Tux]> yes

[16:02] <dalek> doc: 2820630 | (Steve Mynott)++ | bin/p6doc:

[16:02] <dalek> doc: EVALFILE too slow for usual case only use with -f flag

[16:02] <dalek> doc: review: https://github.com/perl6/doc/commit/2820630f9b

[16:02] <[Tux]> CSV::Parser was 52 earlier today

[16:03] *** vendethiel joined
[16:08] <[Tux]> and fixing Inline::Perl5 for -Duselongdouble is beyond my capabilities at the moment

[16:10] <jnthn> [Tux]: num128 isn't on the roadmap for the near future

[16:11] <nine> I guess num80 would be more precise

[16:13] *** kid51 left
[16:13] <jnthn> We get a lot of simplicity in MoarVM out of local/lexical storage being an array of 64-bit things (in a union type). I know that won't last forever (we'll likely also want to do complex value types at some point), but it'll be a large change.

[16:14] <jnthn> lizmat: master branch of roast

[16:14] <jnthn> lizmat: You seem to think 6.c is mutable

[16:15] <jnthn> lizmat: Short of any errata that goes into the 6.c branch of roast, it's not.

[16:15] <jnthn> Language releases are "snapshots" of the test suite at the release point, essentially.

[16:16] <[Tux]> jnthn, was just asking as Inline::Perl5 is currently non-functional for perl5 -Duselongdouble (even if NV's are not used)

[16:16] <jnthn> [Tux]: Is it common to build Perl 5 that way?

[16:17] *** firstdayonthejob joined
[16:17] <jnthn> (Just trying to get a picture of if this is a fairly normal configuration we should try to find a good solution for, or something less usual we can just do a bodge around for now...)

[16:18] <[Tux]> FWIW *all* the production perl's *I* use since 5.18.1 are -Duselongdouble -Duse64bitall

[16:19] <jnthn> OK

[16:19] <[Tux]> I cannot tell for what others do

[16:19] <flussence> Gentoo's is use64bitint=define, use64bitall=define, uselongdouble=undef

[16:21] <[Tux]> OpenSUSE default is also -Uuselongdouble (uselongdouble=undef)

[16:21] <geekosaur> mint (presumably also ubuntu) has it undef

[16:21] <geekosaur> likewise os x

[16:21] <ugexe> and debian

[16:22] <[Tux]> my guess is the -Uuselongdouble is way more widespread than -Duselongdouble

[16:22] <jnthn> OK

[16:22] <jnthn> So, we should "fix it somewhow" for now, sounds like :)

[16:23] <[Tux]> yes, but there are (for me) more important fixes with a higher priority

[16:23] <RabidGravy> as a complete aside, can a LEAVE know *how* it is leaving a block?

[16:24] <[Tux]> RT#127358 and utf8-c8

[16:24] <lizmat> RabidGravy: not afaik

[16:24] <dalek> doc: 96d063e | (Steve Mynott)++ | bin/p6doc-index:

[16:24] <dalek> doc: make more windows friendly

[16:24] <dalek> doc: review: https://github.com/perl6/doc/commit/96d063e7d5

[16:24] <lizmat> [Tux]: I nudged jnthn yesterday already about that

[16:24] <lizmat> [Tux]: it appears not quite an easy thing to fix generally

[16:24] * [Tux] is aware

[16:25] <[Tux]> if it was, it would have been fixed already  :)

[16:25] <Juerd> lizmat: Thanks for the speed improvements. MQTT::Client's test suite went from 10 to 8,7 seconds since last week

[16:25] <lizmat> Juerd: cool!

[16:26] <Juerd> That means 8,6 of shavings left until it matches p5 ;)

[16:26] <jnthn> [Tux]: It's pretty high on my list, but I'm still getting myself back into things.

[16:26] <Juerd> But it's a tremendous start :)

[16:27] <jnthn> [Tux]: As lizmat noted, I'm concerned the construction of it is fragile.

[16:27] <azawawi> https://github.com/azawawi/atom-perl6-editor-tools#context-sensitive-help  # Context-sensitve help is here for Perl 6 :)

[16:28] <RabidGravy> as the man said it's all about the "aggregation of marginal gains"

[16:29] <Juerd> Who said that?

[16:29] *** lokien_ left
[16:30] <RabidGravy> Dave Brailsford, the manager of the GB cycling team

[16:30] <Juerd> That's probably why I never heard that one before :D

[16:32] * geekosaur wonders if atom has matured past the memory leak that caused him to uninstall it

[16:32] <RabidGravy> but the idea is sound, don't look for the one golden bullet, improve everything marginally 

[16:32] <azawawi> geekosaur: windows, linux or macosx?

[16:32] <geekosaur> linux

[16:33] <geekosaur> left it sitting for 2 days, it swapped everything else out

[16:33] <Juerd> RabidGravy: I believe in profiling and that usually shows that there are golden bullets ;)

[16:33] <azawawi> well i use all the time, the trick is to update lol

[16:33] <azawawi> on windows, it auto-updates. On linux, it doesnt

[16:33] <Juerd> RabidGravy: One of them is the regex engine. My test suite is very regex-heavy and that's probably why it's so slow.

[16:34] <Juerd> In fact, it's all regexes

[16:34] <azawawi> geekosaur: and... i noticed that chrome and atom can sometimes break each other

[16:35] <geekosaur> so chrome's js engine isn't properly self-contained?

[16:35] <Juerd> RabidGravy: But I can wait. Perl 5 is still great for my day to day production performance needs, and Perl 6 is great for just having fun :)

[16:35] <jnthn> lizmat: Think I'll try and write up a FQA-style blog post on versioning stuff

[16:35] <jnthn> lizmat: In an attempt to de-confuse things :)

[16:35] <azawawi> geekosaur: it happened to me... i was apt-get upgrading chromium... and my atom broke

[16:36] <lizmat> jnthn: excellent idea, with some practical examples, yes!

[16:36] <Juerd> jnthn: I wonder, could a spectest be added to a released language version, if it is known to pass for all existing implementations?

[16:36] <geekosaur> oh. that'd be debian's fault then, probably

[16:37] <geekosaur> (debian has a very strict policy of sharing components that can be shared, so they'll have patched chromium and atom to use a common v8. v8 may not be designed for that...)

[16:37] <lizmat> grrr.... got another 10% speed increase on basic object construction, but it fails 1 test  :-(

[16:38] <geekosaur> (alhouhg that does still suggest v8 could do with more ability to have isolated instances)

[16:39] *** Xor_ joined
[16:39] <Juerd> lizmat: Just volkswagen the test ;)

[16:40] <lizmat> yeah, the thought has crossed my mind  :-)

[16:41] <jnthn> 1 test fail can be important :)

[16:42] <jnthn> Juerd: I'd somewhat prefer not to

[16:42] <jnthn> Juerd: It'll get in the way of seeing what errata a given language version had

[16:43] <Juerd> Ah, yes, it would pollute the diff.

[16:46] <pmurias> geekosaur: ninja patching of stuff by package maintainers sucks :/

[16:46] <lizmat> sigh, the test doesn't fail when copied to a piece of code  :-(

[16:48] *** araujo left
[16:48] <lizmat> hmmm.... seems I need to have Test loaded for the test to fail :-(

[16:49] <lizmat> spooky

[16:49] *** rindolf left
[16:50] *** wamba joined
[16:52] <lizmat> only when specifying a value for a native numeric attribute

[16:53] <lizmat> $ 6 'class C { has num $.a }; C.new(a => 42e0)'   # golfed, is fine

[16:53] <lizmat> $ 6 'use Test; class C { has num $.a }; C.new(a => 42e0)' 

[16:53] <lizmat> P6opaque: invalid kind in attribute bind

[16:53] <lizmat> jnthn: ^^^ thoughts ?

[16:56] <pmqs_> I have an inner module that exports an enum. Want to export that enum from an outer module, but I'm struggling. This ticket, https://github.com/perl6/roast/issues/45 seems to imply that re-export is broken.

[16:57] *** azawawi left
[16:58] <ugexe> pmqs_: this might help: https://github.com/LLFourn/p6-CompUnit-Util

[16:59] <pmqs_> ugexe, thanks, I'll take a look

[16:59] <lizmat> jnthn: fwiw, it feels like my change is tickling a native num bug

[17:00] <stmuk_> has anyone seen problems with write locks on precomp/.lock when running 'shell "perl6..."' inside another perl6 process?

[17:00] *** FROGGS_ left
[17:01] *** khw joined
[17:04] <ugexe> you can try to run the inner proc with -IFakeDir as the first argument and it might "fix" it (i use -Ilib/.precomp to hide it, as it will end up creating a lib/.precomp/.precomp)

[17:05] <pmqs_> ugexe, brilliant CompUnit::Util worked fine.

[17:06] <ugexe> so like run($*EXECUTABLE, '-IFakeDir', '-Ilib', $file)

[17:08] *** ambs left
[17:10] *** FROGGS joined
[17:11] <jnthn> lizmat: That error implies it's nqp::bindattr-ing it instead of nqp::bindattr_n-ing it.

[17:12] <lizmat> jnthn : https://gist.github.com/lizmat/fc376b2b5cb16619ab2b

[17:12] <stmuk_> ugexe++ # yes that works

[17:12] <lizmat> but how would having use Test loaded or not make a difference ????

[17:12] <RabidGravy> maybe it's a reverse volkswagen

[17:12] <timotimo> perhaps %attrinit{$key_name} has different semantics from .AT-KEY($key_name) somehow?

[17:13] <lizmat> only if %attrinit would be special

[17:13] <timotimo> hrm

[17:13] <lizmat> but it's not, it's just an ordinary hash created in Mu.bless

[17:14] <timotimo> can you tell us which exact branch does the problem?

[17:14] <lizmat> it fails at the top of the loop, which is even stranger

[17:14] <timotimo> i mean, the one that does num isn't changed, is it?

[17:14] <timotimo> oh, that's probably just line num reporting fail?

[17:15] <jnthn> lizmat: Why all the removals of my $key_name = ...?

[17:15] <jnthn> oh, it got inlined

[17:15] <lizmat> yup

[17:15] *** BenGoldberg joined
[17:15] <lizmat> $ MVM_SPESH_DISABLE=1 6l 'use Test; class C { has num $.a }; C.new(a => 42e0)'

[17:16] <isBEKaml> lizmat: that error you see with p6opaque is most likely a recent one, but you may already know this. 

[17:16] <lizmat> looks like it is spesh related  :-(

[17:16] <timotimo> oh, you have a different patch that i haven't looked at

[17:16] <lizmat> timotimo: https://gist.github.com/lizmat/fc376b2b5cb16619ab2b

[17:16] <isBEKaml> lizmat: I don't see that error on my version here: This is Rakudo version 2015.12-251-g6ade157 built on MoarVM version 2016.01-17-g4671fae

[17:17] <lizmat> like I said, I don't think there's a problem in the code per se, since it goes away with spesh disabled

[17:17] <timotimo> that's open now

[17:17] <jnthn> Yeah, looks like

[17:18] <timotimo> uh oh, so it's likely something i messed up :S

[17:18] <jnthn> Maybe you can unupmess it? :-)

[17:18] <timotimo> downmess?

[17:18] <jnthn> As long as you're careful not to just sidemess it :)

[17:19] <timotimo> anyway, i'm glad about the 5% object creation speedup :)

[17:20] *** rindolf joined
[17:20] <timotimo> lizmat: when you reverted attrinited in Hash<a>, did that throw out a big speedup we got before? :(

[17:20] <lizmat> no, not all of it, just a bit

[17:21] * timotimo is trying to see the lennart pöttering keynote of fosdem and is having a really hard time

[17:21] <timotimo> seems like they used the microphone on the camera

[17:21] <timotimo> so you can hear the audience at about 50% volume relative to the speaker himself

[17:21] <timotimo> and there's sufficient reverb to make listening really strenuous

[17:21] <timotimo> i really hope perl devroom audio isn't as terrible

[17:22] * lizmat is glad Tom videod all Perl devroom presentations with 2 camera's from close up front

[17:22] <timotimo> that sounds good

[17:22] <timotimo> good thinking, Tom!

[17:22] <lizmat> (not using the FOSDEM equipment, I might add)

[17:22] <timotimo> who is tom again?

[17:22] <timotimo> browder?

[17:22] <lizmat> Tom Bloor, see http://blogs.perl.org/users/shadowcat_mdk/2016/02/fosdem-2016.html

[17:23] <skids> https://github.com/skids/perl6-Control-Bail now updated to not stack up closures accidentally.

[17:24] <skids> Bickeshed still open, and I have no clue about some internals stuff so an eyeball by someone who does may point out something I did wrong.

[17:24] <dalek> doc: f306dfc | (Steve Mynott)++ | bin/p6doc:

[17:24] <dalek> doc: Use CompUnit::DependencySpecification to find pod file niner++

[17:24] <dalek> doc: Specify -IFakeDir to prevent 'shell perl6..." blocking on a precomp write lock ugexe++

[17:24] <dalek> doc: review: https://github.com/perl6/doc/commit/f306dfc301

[17:25] *** rpburkholder left
[17:26] <skids> Implementing slang actions method in perl rather than nqp had some ... interesting ... nuances.

[17:31] <timotimo> lizmat: what's the difference between 6 and 6l on your machine?

[17:31] <timotimo> oh, probably -Ilib?

[17:31] <lizmat> alias 6='time perl6 -e'

[17:31] <lizmat> alias 6l='perl6 --ll-exception -Mstrict -e'

[17:31] <timotimo> nah, --ll-exception

[17:31] <lizmat> hmmm...  the strict is apparently a leftover

[17:32] <timotimo> okay, the first step, reproducing the error locally, is done

[17:32] <lizmat> cool!

[17:33] *** rpburkholder joined
[17:34] <lizmat> timotimo: if I use a temp str for that if {}, the problem goes away...

[17:34] <lizmat> closing in on it further

[17:35] *** ely-se joined
[17:36] <lizmat> if the if uses an nqp::existskey, it is also ok

[17:36] <ugexe> m: my %a = :a(1), :b<2>, :c<3>; for %a -> $x { once { %a<b>:delete; %a<c>:delete; }; say $x.perl; };

[17:36] <camelia> rakudo-moar 891d45: OUTPUT«:a(1)␤:sub(method perl (Mu:U $: *%_) { #`(Method|70481040) ... })␤:signature(:(Mu:U $: *%_))␤:num_types(1)␤:types((Mu,))␤:sub(method perl (Mu:U $: *%_) { #`(Method|70481040) ... })␤:constraints(())␤Cannot find method 'WHICH': no method cache …»

[17:36] <lizmat> timotimo: for the bindattr_n case

[17:37] <timotimo> hum, the block for bindattr_n seems to be invoked rather than inlined

[17:38] <lizmat> yeah, it looks like adding just another line of dummy code in that block, fixes the problem

[17:38] *** araujo joined
[17:39] <timotimo> hm, let me do a check over our jit just to be safe

[17:39] <stmuk_> does p6doc work on windows now?

[17:39] <lizmat> timotimo: just adding "my $something;" to the if block, fixes the issue

[17:39] <timotimo> please verify that turning off the jit makes the problem go away?

[17:40] <lizmat> MVM_JIT_DISABLE=1 right ?

[17:40] <araujo> 春节快乐！

[17:40] <araujo> :)

[17:40] <timotimo> ah, yes. i think i see it.

[17:41] *** Ben_Goldberg joined
[17:41] *** magiczna_dupa joined
[17:41] *** Actualeyes left
[17:42] *** wamba left
[17:42] <lizmat> timotimo: indeed, with JIT disabled, it isn't a problem

[17:42] <timotimo> false alarm :|

[17:43] *** rpburkholder left
[17:43] *** BenGoldberg left
[17:44] <pmurias> lizmat: are the Tom Bloor videos up?

[17:44] <lizmat> not yet, afaik

[17:46] <timotimo> i've found the line in the jit that fixes the problem by getting commented out

[17:48] *** isBEKaml left
[17:51] <magiczna_dupa> Im reading some module code and cannot find what mean the first line

[17:51] <lizmat> magiczna_dupa: what is that line ?

[17:51] <magiczna_dupa> unit role HTTP::Easy:ver<2.1.3>:auth<http://supernovus.github.com/>;

[17:51] <magiczna_dupa> unit role HTTP::easy

[17:51] <timotimo> i see now.

[17:51] *** Laurent_R left
[17:51] <magiczna_dupa> in import manual

[17:52] <magiczna_dupa> is smh like scope

[17:52] <Skarsnik> unit say that the fichier is what you declare after

[17:52] <magiczna_dupa> in which you can export

[17:52] <geekosaur> "unit role" - the whole file is a role

[17:52] <Skarsnik> it avoid putting for example role R { } around everything

[17:52] <magiczna_dupa> ohh

[17:53] <magiczna_dupa> and why the role got that strange name

[17:53] <magiczna_dupa> with version and auth

[17:53] <Skarsnik> it's the full declaration if you want to add version and auth x)

[17:53] <magiczna_dupa> but these variables ver and auth are unused?

[17:54] <Skarsnik> for now I think yes?

[17:54] <geekosaur> you can specify them when importing

[17:54] <geekosaur> hm, for this maybe not

[17:54] <magiczna_dupa> the same is with unit module? we write it instead wrapping all file into module

[17:54] <geekosaur> yes

[17:54] <perlpilo1> magiczna_dupa: at some pont in the future you could use a role with the same name but be a different version or have a different auth in the same scope as that role

[17:54] <timotimo> lizmat: just pushed to moar; can you try that out?

[17:54] <geekosaur> because "role <whatever>;" (or "module", etc.) is a forward declaration

[17:55] *** perlpilo1 is now known as PerlJam

[17:55] <lizmat> timotimo: in a momment

[17:55] <geekosaur> auth will let you say *whose* HTTP::Easy you want, rather than forcing someone else's to take a different name

[17:57] <magiczna_dupa> geekosaur, yeah but in use case we got use HTTP::Easy::PSGI;

[17:57] <dalek> rakudo/nom: 7e25273 | lizmat++ | src/core/Mu.pm:

[17:57] <dalek> rakudo/nom: Streamline BUILDALL for 8% faster object creation

[17:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7e25273b43

[17:57] <dalek> rakudo/nom: 5605d5f | lizmat++ | src/core/Mu.pm:

[17:57] <dalek> rakudo/nom: Add dummy code to work around JIT issue

[17:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5605d5f343

[17:57] *** spider-mario left
[17:58] <timotimo> was the dummy code still necessary?

[17:59] *** sjoshi joined
[17:59] <lizmat> it was necessary without the Moar patch

[18:00] <lizmat> I put it in a separate commit so that it's easily reverted

[18:00] <timotimo> OK, so it will go away when MOAR_VERSION gets bumped

[18:00] <magiczna_dupa> how to run tests in module?:D

[18:00] <lizmat> timotimo: yup, that's the idea

[18:00] <timotimo> the reason why the error occured was i thought "if we pass in the value and it's a float, we need the different calling convention!", but this really depends on the function being called, and this function declares the argument as MVMRegister

[18:01] <timotimo> so when i checked for bindattr_n and used REG_VAL_F instead of REG_VAL, it ended up putting the value argument on a separate argument "stack", and the kind value slipped into the value value and it took whatever was in the register at the time for the kind instead

[18:01] <timotimo> which ended up being not the right kind in this case

[18:02] <lizmat> so it bombed: but in other cases, it would have just done the wrong thing, right ?

[18:02] <timotimo> yes, it would have silently interpreted the kind as an int or pointer to a string

[18:02] <timotimo> er, no

[18:02] <timotimo> only if it was a bindattr_n or bindattrs_n

[18:03] <dalek> perl6.org: eacd147 | (Steve Mynott)++ | source/downloads/index.html:

[18:03] <dalek> perl6.org: Rakudo Star 2016.01 Errata

[18:03] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/eacd1478c3

[18:05] *** rpburkholder joined
[18:06] <timotimo> any bindattr_n or bindattrs_n that ended up being jit compiled would either bomb because it didn't have the right value in the register that ends up being interpeted as "kind", or it'd have the "num64" kind in the "kind" parameter by sheer luck and set the same value every time

[18:08] <llfourn> m: use parameters :D; # I want to have something like this. Is there any reason I shouldn't attempt to implement it?

[18:08] <camelia> rakudo-moar 891d45: OUTPUT«5===SORRY!5=== Error while compiling /tmp/WbanWtsNzX␤use parameters not yet implemented. Sorry. ␤at /tmp/WbanWtsNzX:1␤------> 3use parameters :D7⏏5; # I want to have something like this. ␤»

[18:08] <timotimo> llfourn: it can go in the ecosystem, in which case it's absolutely fine

[18:09] <llfourn> timotimo: It would be quite hard to do from the ecosystem and it's NYI in rakudo so...?

[18:09] <timotimo> hm, do we want to offer it in rakudo?

[18:09] <lizmat> timotimo: confirm the problem is gone with most recent Moar

[18:09] *** domidumont joined
[18:09] *** maybekoo5 joined
[18:10] <timotimo> lizmat: thanks. there definitely was a problem, just not sure it was 100% what caused this %)

[18:10] * lizmat runs spectest to check for any other issues

[18:10] <lizmat> hmmm... quite some Inline::Perl5 breakage now

[18:11] <timotimo> huh!

[18:11] <llfourn> timotimo: well at one point we did, but it never got finished. I'm not sure whether there was a good reason for that or just not enough time.

[18:11] <timotimo> that's not good

[18:12] <lizmat> $ perl6 t/spec/S01-perl-5-integration/basic.rakudo.moar

[18:12] <lizmat> 1..15

[18:12] <lizmat> moar(91724,0x7fff7a3f6300) malloc: *** error for object 0x10: pointer being freed was not allocated

[18:12] <timotimo> hopefully it's not my patch that causes this?

[18:12] *** rpburkholder left
[18:12] <lizmat> no, I'm more expecting jnthn's recent moar patches

[18:13] <timotimo> huh

[18:13] <lizmat> that's why I put the temporary fix already in, as it will be some days before we can bump Moar

[18:13] <llfourn> http://www.nntp.perl.org/group/perl.perl6.language/2015/10/msg36477.html # "FWIW you can now (as of a few days ago) control the default with

[18:13] <llfourn> use invocant :D;"

[18:13] <timotimo> right

[18:14] *** AlexDaniel left
[18:14] <geekosaur> didn't that just get reverted?

[18:14] <lizmat> llfourn: that was removed before 6.c

[18:14] <lizmat> because it wasn't working correctly just yet

[18:14] <geekosaur> [06 12:43] <dalek> MoarVM: Revert "Fix leak involving inlining handlers."

[18:14] <lizmat> and we didn't want an incorrectly working version out there  :-)

[18:14] <geekosaur> from #moarvm

[18:15] <llfourn> lizmat: mmm so it's a good time to get it working now?

[18:15] <timotimo> geekosaur: there were multiple patches, not all were reverted

[18:15] <llfourn> (I'm going to attempt it if it is)

[18:15] <lizmat> well, it would probably need to live in the .d setting

[18:15] <timotimo> it's not really a setting thing, isn't it a grammar thing?

[18:16] <llfourn> ah yeah didn't think about versioning

[18:17] <lizmat> yeah, it's mostly a grammar / World thing, I think

[18:18] <timotimo> now that we're promising 6.c, we implementors will be tortured a bunch more than we used to be :)

[18:18] <llfourn> the NYIness comes from World

[18:19] <llfourn> do we have a way to mark patches as .d or have a .d branch?

[18:19] <timotimo> .c and .d live in the same codebase

[18:19] <yoleaux> I don't know

[18:19] <llfourn> (or spectest for that matter)

[18:20] <llfourn> ah yeeh...

[18:20] *** psy_ joined
[18:21] <timotimo> otherwise we couldn't support "use 6.c" and "use 6.d"

[18:21] <llfourn> are those version checking contructs available yet for the grammar?

[18:21] <timotimo> i don't know :(

[18:21] <timotimo> BBIAB

[18:21] * lizmat is waiting for jnthn's blogpost about that  :-)

[18:22] * llfourn adds himself to the waiting queue

[18:22] <llfourn> ok i'll hold off on this then. Thanks.

[18:24] *** dha joined
[18:27] *** virtualsue left
[18:32] *** magiczna_dupa left
[18:33] *** kid51 joined
[18:36] *** magiczna_dupa joined
[18:39] *** rpburkholder joined
[18:47] *** kid51 left
[19:01] *** vytas left
[19:01] *** vytas joined
[19:02] <dalek> rakudo/nom: 463b6c8 | lizmat++ | src/core/Mu.pm:

[19:02] <dalek> rakudo/nom: Give BUILD_LEAST_DERIVED the same treatment

[19:02] <dalek> rakudo/nom: 

[19:02] <dalek> rakudo/nom: Not sure what this speeds up, but it should be again in the 5-10% range

[19:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/463b6c8586

[19:03] <lizmat> afk&

[19:07] <dha> I've lost track, is there a comprehensive list of Perl 6 types? maybe broken down by category?

[19:11] <magiczna_dupa> hey I am playing with perl6 modules

[19:12] <geekosaur> dha, http://doc.perl6.org/type.html ?

[19:12] <magiczna_dupa> and I don't get if I created module and use it

[19:12] <magiczna_dupa> do I need to export sub or variable

[19:12] <magiczna_dupa> to use it

[19:13] <DrForr> That should be in the documentation.

[19:13] <magiczna_dupa> http://doc.perl6.org/language/modules#Exporting_and_Selective_Importing

[19:13] <magiczna_dupa> reading it

[19:13] <DrForr> The documentation of the module, actually.

[19:14] <dha> geekosaur - ah, right, of course. But not broken down by category.

[19:14] <magiczna_dupa> DrForr, they write to place is export

[19:14] <magiczna_dupa> then use Module; import default symbols

[19:15] <magiczna_dupa> but as I check my example won't work

[19:16] <DrForr> magiczna_dupa: Please nopaste or gist your code, I don't want to guess at what you're doing.

[19:18] <magiczna_dupa> DrForr, http://paste.ofcode.org/ZpeJpZsc6TTV8uGyaSTpjK

[19:20] <DrForr> What's the module filename? It should be SampleModule.pm or SampleModule.pm6

[19:20] <RabidGravy> the stub sub with the export won't work, just but the is export on the sub, in this case you don't need the stub at all

[19:21] <RabidGravy> m: module F { sub foo() is export { say "foo" }; import F; foo()

[19:21] <camelia> rakudo-moar 463b6c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ou_84OANuM␤Missing block␤at /tmp/ou_84OANuM:1␤------> 3is export { say "foo" }; import F; foo()7⏏5<EOL>␤    expecting any of:␤        statement end␤        statement modifier␤        stateme…»

[19:21] <RabidGravy> m: module F { sub foo() is export { say "foo" }}; import F; foo()

[19:21] <camelia> rakudo-moar 463b6c: OUTPUT«foo␤»

[19:21] <RabidGravy> the bare import there is because it can already see the module

[19:22] <RabidGravy> if it was in another file you would use "use" instead

[19:23] <magiczna_dupa> the filename is like module name

[19:23] <jnthn> lizmat: Do you still get that build SEGV on Moar HEAD?

[19:23] <dha> I should warn you all that we have about 16 people in a bar here working on learning Perl 6.

[19:23] <dha> :-)

[19:23] <RabidGravy> in your example also SampleModule::suck() won't work because the subroutine is lexically scoped by default so isn't accessible that way via the package

[19:23] <DrForr> +=17

[19:24] <magiczna_dupa> RabidGravy, what? what does it mean lexically scoped?

[19:24] <dha> DrForr - also I've pointed people at your Grammar tutorial.

[19:24] <magiczna_dupa> RabidGravy, it is private?

[19:24] <magiczna_dupa> RabidGravy, scoped to current file?

[19:24] *** ely-se left
[19:25] *** molaf joined
[19:25] <RabidGravy> it can't be seen outside the scope it is defined in, in the case the module { ... }

[19:25] <DrForr> dha: Thanks. It's just episode 1.

[19:25] <jnthn> m: role Perl6Learner { method goto-bar() { } }; role Gymnast { method goto-bar() { } }; class FlexibleProgrammer does Perl6Learner does Gymnast { }

[19:25] <camelia> rakudo-moar 463b6c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/6epHDQWEap␤Method 'goto-bar' must be resolved by class FlexibleProgrammer because it exists in multiple roles (Gymnast, Perl6Learner)␤at /tmp/6epHDQWEap:1␤»

[19:25] <jnthn> dha: Mini lesson on roles ;) ^^

[19:25] <dha> I know. But we're here, so I figured I'd tell them about it. At least they know where to look for parts 2 and 3. :-)

[19:26] <DrForr> I'll keep an eye on stats :)

[19:26] <dha> jnthn - The error? :-)

[19:26] <jnthn> magiczna_dupa: Lexical = scoped to the current code block (set of curly braces)

[19:26] <jnthn> dha: Shows compile-time detection of conflicting methods in roles :)

[19:27] <dha> *nod*

[19:27] <RabidGravy> jnthn, I have a strange LTA regarding "must be resolved by class"

[19:28] <magiczna_dupa> jnthn, have no idea how to change it

[19:28] * DrForr cracks a bottle of framboise...

[19:29] <jnthn> magiczna_dupa: Either by export/import, or just write our sub suck() ...

[19:29] <jnthn> (The our means package scope)

[19:29] <jnthn> RabidGravy: Whcih is?

[19:29] <jnthn> *which

[19:30] <magiczna_dupa> jnthn, yeah our is like global scope

[19:30] <magiczna_dupa> and how to fix it by export?

[19:31] <magiczna_dupa> I did is export and test export(:MANDATORY)

[19:31] <magiczna_dupa> but it won't go

[19:31] <jnthn> m: package Foo { sub bar() is export { say 'like this maybe' } }; import Foo; bar()

[19:31] <camelia> rakudo-moar 463b6c: OUTPUT«like this maybe␤»

[19:31] <RabidGravy> it's difficult to golf, but basically if I have a class that does two roles A and B with the same method foo, so in the class I do "method foo() { self.B::foo } " then in B I do "method foo() { self.A::foo }" it blows up with the "cannot concretise"

[19:31] <jnthn> RabidGravy: Uh, does B do A?

[19:32] <RabidGravy> no, but in the code it will only ever be applied to an A

[19:32] <autarch> a fun error I cannot understand - https://gist.github.com/autarch/3c38c878972070310769

[19:32] <RabidGravy> ah

[19:33] <jnthn> I don't think that'll work out too well, 'cus roles are generic.

[19:33] <autarch> This comes from trying to EVAL a string containing something serialized via .perl in another thread

[19:33] <jnthn> On the type of the invocant

[19:33] <jnthn> And they get made concrete at composition time

[19:33] <RabidGravy> https://github.com/jonathanstowe/Sofa/blob/master/lib/Sofa/Document/Wrapper.pm

[19:34] <jnthn> When we need to resolve a self.SomeRole:foo, then we look at all the roles we've made concrete, so we can call a real, instantiated method

[19:34] <RabidGravy> let me see what happens

[19:35] <RabidGravy> so it won't matter if I have a class that *must* do A get the role B which also has A ?

[19:35] <RabidGravy> if you see what I mean

[19:35] <jnthn> Think that should be fine.

[19:36] <dalek> rakudo-star-daily: ce34419 | coke++ | log/ (9 files):

[19:36] <dalek> rakudo-star-daily: today (automated commit)

[19:36] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/ce344196e5

[19:36] <dalek> perl6-roast-data: 4cdbcc7 | coke++ | / (6 files):

[19:36] <dalek> perl6-roast-data: today (automated commit)

[19:36] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/4cdbcc7de8

[19:36] <dalek> perl6-roast-data: 26f9ecd | coke++ | / (6 files):

[19:36] <dalek> perl6-roast-data: today (automated commit)

[19:36] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/26f9ecd3b3

[19:36] <jnthn> autarch: Looks like an internal compiler error, but hard to guess much more from that from the stack trace I'm afraid

[19:36] <autarch> jnthn: well, I'm quite sure it comes from an EVAL call - but beyond that I'm not sure why it'd happen

[19:36] <RabidGravy> m:  role A { }; role B does A { };   class C does B does A {}'

[19:36] <camelia> rakudo-moar 463b6c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/6odFLYAzv8␤Strange text after block (missing semicolon or comma?)␤at /tmp/6odFLYAzv8:1␤------> 3B does A { };   class C does B does A {}7⏏5'␤    expecting any of:␤        infix␤        infix s…»

[19:36] <autarch> I'll try to reduce it something reproducible with less code

[19:37] <RabidGravy> m:  role A { }; role B does A { };   class C does B does A { }

[19:37] <camelia> rakudo-moar 463b6c: ( no output )

[19:37] <jnthn> autarch: The stack trace does match up with being in an EVAL.

[19:37] <RabidGravy> well it compiles

[19:37] *** eternaleye left
[19:37] <jnthn> autarch: I just can't intuit a lot more from it than that.

[19:38] <autarch> yeah, I get that

[19:39] *** wamba joined
[19:40] *** ely-se joined
[19:45] *** sjoshi left
[19:49] *** wamba left
[19:50] *** pdcawley joined
[19:51] <dha> Have I just forgotten how to get a list of methods an object can do, or can you no longer do that since I last looked?

[19:52] <dha> ah. found it.

[19:52] * dha slaps self

[19:52] <moritz> for the record: .^methods or .^methods(:local) or .^methods(:all), http://doc.perl6.org/routine/methods

[19:53] <DrForr> Should be n the metamodel doc?

[19:53] <pmurias> hoelzro: they still haven't merged your node-bigint pull request :(

[19:55] <magiczna_dupa> hey I find next magic code for me :d

[19:55] <magiczna_dupa> $!connection.recv( :bin )

[19:56] *** rpburkholder left
[19:56] *** pdcawley left
[19:56] <moritz> magiczna_dupa: which part of that don't you understand?

[19:56] <magiczna_dupa> :bin

[19:57] <moritz> it's a named argument to the recv method

[19:57] <dha> Yeah, .^methods should probably be documented somewhere. Particularly as mop.pod indicates that most metamethods are all caps.

[19:57] <moritz> and for recv, it means "return binary data"

[19:58] <moritz> dha: meta method != method on a meta object

[19:58] *** johnb_ joined
[19:58] <magiczna_dupa> moritz, how?

[19:58] <magiczna_dupa> method recv(IO::Socket:D: Cool $elems = Inf)

[19:58] *** johnb_ is now known as Guest45613

[19:58] *** musiKk joined
[19:58] <dha> moritz -  ok. Still, it should be documented somewhere. :-)

[19:59] <moritz> dha: it is, see http://doc.perl6.org/routine/methods

[19:59] *** bpmedley joined
[19:59] <magiczna_dupa> I cant find whats IO::Socket:D but I suppose it is socket value

[19:59] <magiczna_dupa> treated as Cool number or str

[19:59] <moritz> magiczna_dupa: it's on IO::Socket::Async, I presume

[19:59] <Guest45613> Can someone recommend a good book that covers Perl 6's concurrency, parallelism, asynchrony?

[20:00] <moritz> magiczna_dupa: ah no, the documentation of recv is just incomplete

[20:00] <moritz> Guest45613: no books yet

[20:00] <jnthn> IO::Socket::Async has no .recv method, fwiw

[20:00] <dha> moritz -  ok, so without that link, and not knowing it to begin with, how would someone find it?

[20:00] <magiczna_dupa> moritz, -.-

[20:00] <Guest45613> darn. ok

[20:00] <dha> Maybe it should be a FAQ. Seems like something people would want to do, particularly if they're learning the language.

[20:00] <magiczna_dupa> how this guy knows that recv got more arguments?

[20:00] <moritz> Guest45613: https://perl6advent.wordpress.com/2015/12/14/day-14-a-nice-supplies-syntactic-relief-for-working-with-asynchronous-data/ is a nice intro though

[20:01] <magiczna_dupa> dha, I was learning from perl6 intro

[20:01] <moritz> magiczna_dupa: it's probably in the design document, or they read the implementation (which isn't too hard, considering that it's written in Perl 6 itself)

[20:01] <dha> ok.

[20:01] *** ELBeavers is now known as ELBeavers_away

[20:01] <moritz> dha: one could have thought "oh, I want a list of methods, so let's type "method" in the search box on doc.perl6.org and see what comes up"

[20:01] <Guest45613> thanks moritz, will have a read.  i looked at the talk in http://act.yapc.eu/ye2015/talk/6390 which got me really keen on learning more

[20:02] <moritz> Guest45613: also http://doc.perl6.org/language/concurrency

[20:02] <Guest45613> ok

[20:02] <magiczna_dupa> moritz, and as you said it is named argument

[20:02] <magiczna_dupa> where then it is defined

[20:02] <magiczna_dupa> it rather should me

[20:02] <magiczna_dupa> recv(bin => True)

[20:02] <magiczna_dupa> to flag binary mode

[20:02] <dha> moritz -  yep, and that gives you a ridiculously long list of things. And if you just hit enter it takes you to the Method class.

[20:03] <ugexe> https://github.com/rakudo/rakudo/blob/nom/src/core/IO/Socket.pm#L10

[20:03] <moritz> magiczna_dupa: :bin is short for bin => True

[20:03] <magiczna_dupa> moritz, oh ok

[20:04] <magiczna_dupa> moritz, how can I fix documentation?

[20:04] <RabidGravy> I'm just fixing it

[20:04] *** Vitrifur joined
[20:04] <dalek> doc: 6c23c2b | moritz++ | doc/Type/IO/Socket.pod:

[20:04] <dalek> doc: IO::Socket.recv: document :bin

[20:04] <dalek> doc: review: https://github.com/perl6/doc/commit/6c23c2b9b8

[20:04] <RabidGravy> okay moritz was just fixing it :)

[20:05] <magiczna_dupa> oh :D

[20:05] <moritz> magiczna_dupa: but in general, it's all on github; each doc page has a link to the repo at the bottom

[20:05] *** Vitrifur left
[20:05] <moritz> magiczna_dupa: and you can send pull requests, or tell me your github ID, then I can invite you to the perl6 org

[20:05] <magiczna_dupa> ohh so I need just PR

[20:06] <magiczna_dupa> moritz, ok thanks :)

[20:07] *** awwaiid joined
[20:09] <RabidGravy> Dear couchdb, why is your "update function" interface so flexible, it's a right pain to test against

[20:09] <Hotkeys> Lol

[20:10] *** frobisher joined
[20:10] <jdv79> too much surface area?

[20:10] <RabidGravy> it can do an update by PUT or POST, with a document ID or without a document ID it can take query parameters in the URI and body content of either form data or a json document

[20:10] <jdv79> so yes

[20:10] *** dha left
[20:11] *** Vitrifur joined
[20:11] <Skarsnik> have fun RabidGravy 

[20:11] <frobisher> grr.

[20:11] *** frobisher is now known as dha

[20:12] <RabidGravy> comings and goings

[20:15] <dalek> doc: 7950162 | moritz++ | doc/ (2 files):

[20:15] <dalek> doc: Document .^compose (at least for classes). Closes #360

[20:15] <dalek> doc: review: https://github.com/perl6/doc/commit/7950162ef9

[20:15] <moritz> github++ # "Closes #\d+" actually closing the issue

[20:16] <RabidGravy> yeah I love that

[20:16] *** yqt joined
[20:17] *** dbrunton joined
[20:17] <RabidGravy> I kept seeing the "Closed by a commit" in issues and it took me a while to work out what was going on

[20:17] <dalek> doc: e4f40e6 | moritz++ | doc/Language/phasers.pod:

[20:17] <dalek> doc: Language improvements in phasers.pod

[20:17] <dalek> doc: 

[20:17] <dalek> doc: [Coke]++, Closes #381

[20:17] <dalek> doc: review: https://github.com/perl6/doc/commit/e4f40e6e43

[20:18] <moritz> m: say 'abc'.Uni

[20:18] <camelia> rakudo-moar 463b6c: OUTPUT«Method 'Uni' not found for invocant of class 'Str'␤  in block <unit> at /tmp/2eU4HYU4wf line 1␤␤»

[20:18] <moritz> m: say Uni('abc')

[20:18] <camelia> rakudo-moar 463b6c: OUTPUT«Cannot find method 'Uni'␤  in block <unit> at /tmp/MPPwRgJrSx line 1␤␤»

[20:19] <moritz> how do I creat an Uni?

[20:19] <Hotkeys> Uni?

[20:19] <moritz> Codepoint-level string (without Grapheme magic)

[20:19] <RabidGravy> get some books and invite some students round

[20:20] *** darutoko left
[20:20] <jnthn> moritz: You coerce to one of the subclasses

[20:20] <jnthn> moritz: Depending which NF* you want

[20:20] <moritz> jnthn: ah

[20:20] <jnthn> .NFC, NKFC, .NFD, etc.

[20:20] <moritz> m: say 'abc'.NFC

[20:20] <camelia> rakudo-moar 463b6c: OUTPUT«NFC:0x<0061 0062 0063>␤»

[20:20] <RabidGravy> so 'CONTROL' and 'CATCH' phasers  won't work if added by .add_phaser right?

[20:20] <magiczna_dupa> hey how can I test perl module?

[20:21] <magiczna_dupa> as I checkout one and want to fix some things in it

[20:21] <jnthn> RabidGravy: No, they involve some quite convulated code-gen

[20:21] <moritz> magiczna_dupa: http://doc.perl6.org/language/testing

[20:21] <RabidGravy> m: use Test;  ok 1;

[20:21] <camelia> rakudo-moar 463b6c: OUTPUT«ok 1 - ␤»

[20:21] <RabidGravy> there goes my plans for world domination

[20:21] <magiczna_dupa> great ;-)

[20:23] <dalek> doc: ba18428 | moritz++ | util/new-type.p6:

[20:23] <dalek> doc: Fix new-type util

[20:23] <dalek> doc: review: https://github.com/perl6/doc/commit/ba18428174

[20:24] <RabidGravy> magiczna_dupa, if you are looking at making a module, as well as reading the great documentation you might want to peruse some of the fabulous modules that already exist to see how they work

[20:24] *** virtualsue joined
[20:28] *** cognome left
[20:28] <PerlJam> .oO( but ... but ... which ones are fabulous? )

[20:29] <Hotkeys> All of them of course 

[20:29] <RabidGravy> all of them if people have been bothered to make them they are fabulous

[20:30] <magiczna_dupa> RabidGravy, yeah sure thats what I am doing right now

[20:30] <RabidGravy> I'm not convinced that Sofa is going to be fabulous however as I am rapidly losing the will to live writing the tests

[20:32] <magiczna_dupa> RabidGravy, I think the good web framework should be created then maybe someone will start to use perl6 commercially

[20:32] <magiczna_dupa> :P

[20:32] <RabidGravy> why do you need a web framework to use it commercially?

[20:32] *** domidumont left
[20:32] <magiczna_dupa> cause web is popular ;D

[20:32] <moritz> people are already using Perl 6 commercially

[20:34] <dha> Oh?

[20:34] *** ely-se left
[20:34] <magiczna_dupa> ?

[20:34] <magiczna_dupa> moritz, thats not true

[20:34] <magiczna_dupa> ;D

[20:34] <DrForr> And you know this ... how?

[20:34] <DrForr> (not to moritz, sorry...)

[20:35] <magiczna_dupa> DrForr, I was looking for job and no-one exist and more my cofriends in company don't like Perl

[20:36] <mst> currently, where perl6 is being used commercially, it's because a developer wrote something in perl6 that turned out to be useful

[20:36] <moritz> magiczna_dupa: masak and jnthn have repeatedly used Perl 6 for their work, for example. As did colomon 

[20:36] <RabidGravy> so that sample == "no one"

[20:36] <mst> this is the standard way very early adoption happens

[20:36] <RabidGravy> weird

[20:36] <colomon> “does” colomon.  ;)

[20:36] <moritz> mst: that's how it always starts

[20:36] <moritz> colomon++

[20:37] <DrForr> Sigh. Obviously a sample size of one proves a universal.

[20:37] <magiczna_dupa> as I write swiss tool in Perl the guy which sit next to me said that he used perl last time in 2009 year and he won't to see moreover

[20:39] <moritz> magiczna_dupa: this just proves that "the guy" doesn't use and like Perl, nothing more, nothing less

[20:39] <mst> eh. most of my commercial code is perl5 and none of my customers are trying to replace it with something else

[20:39] <DrForr> And who knows where he encountered Perl and what shape the code was in, and a *host* of other factors come into play, but since you've already made up your mind there's no point arguing.

[20:40] <mst> magiczna_dupa: basically, I don't disagree that perl6 jobs aren't currently really a thing in terms of job adverts, but that doesn't mean people aren't using it at work at all.

[20:41] <mst> DrForr: I don't think that's really fair. he's in an environment where lots of people are down on perl, and that's going to affect his perception. availability bias is a thing.

[20:42] *** wamba joined
[20:42] <RabidGravy> to be honest I've seen Perl 5 code that made me never want to see *software* again in the past.  But hey we won't speak ill of defunct companies.

[20:42] <mst> I've seen perl5, C, javascript, make, sh, csh, python, and ruby code that all did that

[20:42] <mst> and that's only off the top of my head

[20:43] <magiczna_dupa> the thing which perl need it is something which already got a newcomer langs

[20:43] <magiczna_dupa> like swift

[20:43] <RabidGravy> yeah pick a language any language

[20:43] <magiczna_dupa> good ide

[20:44] <DrForr> mst: Yes, availability and selection bias, I do understand these principles. I'm just saying that the small sample size of people who have had contact with perl in no way generalizes to a sweeping statement that there is no commercial work for perl.

[20:44] <mst> yes. but his actual thesis was "there's no jobs being advertised for it"

[20:44] <magiczna_dupa> and onward syntax check

[20:44] <mst> I believe pointing out that that can be true, and 'no commerical work' still be false, is more constructive

[20:45] <mst> magiczna_dupa: in general, everybody thinks 'perl needs' whatever tool they most prefer using. then they don't write it, and wonder why the people who don't haven't written it for them yet

[20:46] <RabidGravy> :)

[20:46] <magiczna_dupa> mst, ye sure :-)

[20:47] <magiczna_dupa> mst, ppl always says like that I know

[20:47] *** ely-se joined
[20:47] <DrForr> Yes, it is entirely true that there are few to no jobs advertised for it. consider the fact that I can count the number of weeks since it's been released on one hand. Surely that has *some* impact, if only because HR needs at least a *few* months' lead time to write ads.

[20:47] <RabidGravy> and work out how many years of experience they can demand

[20:48] <mst> DrForr: right. so I'm not sure why you think ranting at the user and saying they'll never change their mind is going to be more useful than pointing out they've missed the point :)

[20:48] <DrForr> Mind you I imagine it'll take HR only a few months to demand workers with 5 years of experience.

[20:48] <RabidGravy> it was a running joke back in the 2001-2 when they caught on to C# and were asking for five years of experience

[20:48] <mst> corporate HR does tend to be hilarious

[20:48] <mst> provided you like black comedy

[20:49] <DrForr> I've just seen the pattern before, figured I'd get ahead of the curve :/

[20:49] <dalek> doc: 76663f4 | moritz++ | / (6 files):

[20:49] <dalek> doc: Basic documentation for Uni, NF{K,}{C,D}

[20:49] <dalek> doc: review: https://github.com/perl6/doc/commit/76663f4aa9

[20:49] *** AlexDaniel joined
[20:49] <jnthn> .oO( I nearly already do have "10 years Perl 6 experience"... )

[20:49] <RabidGravy> I dunno I most recently worked for a large financial institution, their HR was more like something Kafka may have come up with

[20:49] * DrForr gets back to getting something done and kicking around a (bloody) web framework design.

[20:50] <RabidGravy> well I guess I could wing it as I'm pretty sure I have patches in parrot more than ten years ago

[20:51] <dha> Getting something done? What's that like?

[20:51] <magiczna_dupa> DrForr, are you preparing web framework?

[20:51] <skids> https://plus.google.com/+CybercitiBiz/posts/eyKgFkaaVFt

[20:51] <mst> dha: almost, but not entirely, quite unlike today

[20:51] <DrForr> I released the second version of Parrot, does that count? :)

[20:51] <dha> Ah.

[20:52] <magiczna_dupa> DrForr, I don't know what Parrot is ;d

[20:52] <DrForr> magiczna_dupa: There's already Bailador, but I'm not going to restart that discussion.

[20:53] *** wamba left
[20:53] <magiczna_dupa> DrForr, ye I see Bailador

[20:53] *** wamba joined
[20:54] <dalek> doc: bbcf876 | moritz++ | doc/Type/Str.pod:

[20:54] <dalek> doc: Document Str.NFD and friends.

[20:54] <dalek> doc: 

[20:54] <dalek> doc: Closes #365

[20:54] <dalek> doc: review: https://github.com/perl6/doc/commit/bbcf876d71

[20:54] <tadzik> hey, bailador was not exactly meant to be a production thing :)

[20:54] *** mcmillhj joined
[20:54] <tadzik> (also, nice nickname, as Rotwang said)

[20:54] <RabidGravy> I think that horse has bolted matey

[20:54] <magiczna_dupa> tadzik, o czesc

[20:55] <tadzik> o/

[20:55] * jnthn was trying not to say anything about the nick... :)

[20:57] <moritz> http://doc.perl6.org/language/faq#Is_there_going_to_be_a_Perl_6_version_6.0.0%3F should we change that answer to "no, it's called v6.c"?

[20:57] <AlexDaniel> “yes, it's called v6.c”?

[20:58] <magiczna_dupa> hey is it okay to write one method over 100+ lines

[20:59] <magiczna_dupa> :D

[20:59] <xenu> usually no

[20:59] <magiczna_dupa> I am looking for crazy module right now

[20:59] <magiczna_dupa> ;s

[20:59] <stmuk_> the question probably should be "Is there a Perl 6 version 6.0.0?"

[21:00] <AlexDaniel> magiczna_dupa: depends

[21:01] <stmuk_> and the answer "well yes and no. next question please?"

[21:01] <mst> you *can* write a method that long, but please don't :)

[21:02] <AlexDaniel> mst: Dunno, what if it has several lexical subs? :)

[21:02] <DrForr> magiczna_dupa: Slang::Roman :)

[21:02] <dalek> doc: e11e81a | moritz++ | doc/Language/faq.pod:

[21:02] <dalek> doc: The FAQ answer for "Is there going to be a Perl 6 version 6.0.0?" is much simpler now

[21:02] <dalek> doc: review: https://github.com/perl6/doc/commit/e11e81a3e4

[21:02] <ab5tract> multi method dispatch with where constraints have definitely reduced the justifiability of 100+ methods

[21:03] <skids> 100+ line methods --  100+ multimethods themselves though ... :-)

[21:03] <AlexDaniel> moritz: uhh! Such a pity. It was a great answer

[21:04] *** dha left
[21:04] <stmuk_> isn't 6.c intended to be supported by *all* post  2015.12 releases?

[21:04] <magiczna_dupa> if I PR someones code do you think he will apply my work?

[21:04] <ab5tract> skids: it can go the wrong way too, I'm sure. None of my p6 has gotten  that complex yet though..

[21:04] <magiczna_dupa> if it will some more readable fixes

[21:04] *** raiph joined
[21:05] *** PiL_ left
[21:05] <DrForr> magiczna_dupa: ONe way to find out :)

[21:06] *** PiL_ joined
[21:06] <AlexDaniel> ab5tract: I've noticed that p6 code is rather dense. Some really complex stuff can fit into 5 lines. Line count doesn't matter much, I guess

[21:08] <AlexDaniel> I mean bigger line count does not necessarily mean more complexity in Perl 6. But that might be more or less true in other languages

[21:08] <PerlJam> stmuk_: why do you ask?

[21:09] <dalek> perl6.org: 009f20d | (Steve Mynott)++ | source/downloads/index.html:

[21:09] <dalek> perl6.org: suggest deleting p6doc.bat as windows fix for R* 2016.01

[21:09] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/009f20d114

[21:09] <magiczna_dupa> DrForr, also SDL2 bindings author not responds me

[21:09] <stmuk_> I haven't actually spun up a windows vm to check that but maybe it works :)

[21:10] <raiph> .ask moritz Comments? When discussing versioning of p6doc ab5tract said "it's not Rakudo documentation. It's Perl 6 documentation." But p6doc already has lots of rakudo specific stuff in it, eg the FAQ, and I was about to add more with a Performance page that talks about Rakudo stuff.

[21:10] <yoleaux> raiph: I'll pass your message to moritz.

[21:12] *** kaare_ left
[21:12] <RabidGravy> I think I've got a 100+ line method somewhere or other but it's probably get a lexical sub and even a complete class definition in it

[21:12] <DrForr> magiczna_dupa: You're taking a sample size of one person that won't respond to PRs and assuming that applies to the entire community. I deal with PRs on a daily basis, it's just a question of how much time that auhor has to devote to a given project.

[21:12] <AlexDaniel> m: say [~] (0..0x1FFFF ==> grep { .uniname ~~ m/‘CUNEIFORM’ .* ‘SQUARED’ / })».chr # O_o

[21:12] <camelia> rakudo-moar 463b6c: OUTPUT«𒀱𒂝𒂭𒅄𒅒𒇫𒈔𒋲𒍟␤»

[21:13] <mst> magiczna_dupa: different people are different.

[21:13] <mst> magiczna_dupa: some authors are busy.

[21:13] <dalek> doc: 49bceab | (Steve Mynott)++ | doc/Language/faq.pod:

[21:13] <dalek> doc: fix typo and tweak 6.0.0 answer

[21:13] <dalek> doc: review: https://github.com/perl6/doc/commit/49bceab6ba

[21:13] <RabidGravy> magiczna_dupa, for reference the longest I waited for a PR to be accepted was eight months

[21:15] <magiczna_dupa> use v6;

[21:15] <magiczna_dupa> does it mean that author used perl interpreter

[21:15] <AlexDaniel> .u 🆊

[21:15] <yoleaux> U+1F18A CROSSED NEGATIVE SQUARED LATIN CAPITAL LETTER P [So] (🆊)

[21:15] <xenu> if author is too busy or too lazy, you can always as him for commit bit

[21:15] <xenu> usually they agree

[21:15] <xenu> and fix the issues by yourself

[21:15] <RabidGravy> I get very few PRs I can only assume that's because no-one uses any of my modules

[21:15] <AlexDaniel> xenu: sometimes asking for a commit bit makes them accept your PR :)

[21:16] <AlexDaniel> RabidGravy: or they “just work”

[21:16] <RabidGravy> magiczna_dupa, all that means is that if the script/module/whatever is run like by Perl 5 it will crap out with a meaningful errror message

[21:17] <RabidGravy> similar to:

[21:17] <RabidGravy> m: use v7;

[21:17] <camelia> rakudo-moar 463b6c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/CT5k2bJf6X␤No compiler available for Perl v7␤at /tmp/CT5k2bJf6X:1␤------> 3use v77⏏5;␤»

[21:17] <magiczna_dupa> oh well it should be always used

[21:18] <RabidGravy> rather than blundering on until it gets really confused by the syntax and craps out with some imcomprehensible error message

[21:19] <RabidGravy> also, it can specify minor versions

[21:19] <RabidGravy> m: use v6.c;

[21:19] <camelia> rakudo-moar 463b6c: ( no output )

[21:20] <mst> which can totally happen; we had somebody accidentally try to 'm:' on #perl yesterday and spent five minutes debugging his code as normal perl before we realised

[21:20] <RabidGravy> m: use v6.d;

[21:20] <camelia> rakudo-moar 463b6c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ADdtSM0sSu␤No compiler available for Perl v6.d␤at /tmp/ADdtSM0sSu:1␤------> 3use v6.d7⏏5;␤»

[21:20] <AlexDaniel> .u ⃞

[21:20] <yoleaux> U+20DE COMBINING ENCLOSING SQUARE [Me] (◌⃞)

[21:20] <Skarsnik> RabidGravy, gptrixie have quite 'big' routine x)

[21:20] <stmuk_> m: use v6.a

[21:20] <camelia> rakudo-moar 463b6c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/miYRqNtl_Z␤No compiler available for Perl v6.a␤at /tmp/miYRqNtl_Z:1␤------> 3use v6.a7⏏5<EOL>␤»

[21:21] <stmuk_> its probably not worth retrofitting :)

[21:23] *** Psyche^ joined
[21:24] *** protium joined
[21:24] *** ilbot3 left
[21:25] <jnthn> s/probably// ;)

[21:25] <dalek> doc: 5709e9f | (Steve Mynott)++ | META.info:

[21:25] <dalek> doc: specify panda as dep

[21:25] <dalek> doc: review: https://github.com/perl6/doc/commit/5709e9f54e

[21:25] <RabidGravy> has anyone made anything (however experimental) that has a Compunit::Repository that has its storage in other than a file?

[21:25] *** yurivish joined
[21:26] *** TEttinger joined
[21:26] <moritz> stmuk_: because Build.pm uses panda stuff?

[21:26] <yoleaux> 21:10Z <raiph> moritz: Comments? When discussing versioning of p6doc ab5tract said "it's not Rakudo documentation. It's Perl 6 documentation." But p6doc already has lots of rakudo specific stuff in it, eg the FAQ, and I was about to add more with a Performance page that talks about Rakudo stuff.

[21:26] <stmuk_> moritz: yes and p6doc too (which it shouldn't)

[21:27] <ugexe> its also because it uses Panda::Installer in the main module/script

[21:27] <moritz> .tell raiph please mark rakudo-specific stuff as such in the docs, even if it's not always the case yet

[21:27] <yoleaux> moritz: I'll pass your message to raiph.

[21:27] *** Psyche^_ left
[21:27] <stmuk_> ugexe: it's starting to use it less

[21:28] <stmuk_> I assume zef is Build.pm aware BTW?

[21:28] <ugexe> yes

[21:31] <RabidGravy> does the Build.pm thing allow for an install hook as well as build/test phases?  say I wanted to install e.g. a database schema as well as an application module

[21:32] <ugexe> no

[21:32] <RabidGravy> Hmm

[21:34] *** protium left
[21:36] <RabidGravy> may need to fix that at some point, things that try to create a database every time you run them for instance are really annoying

[21:36] <RabidGravy> (or even have to check to see whether then should)

[21:37] <ugexe> ive been bringing it up for a long time. even implemented hooks/ in zef a year ago... i removed them because everyone still used Build.pm :(

[21:37] <ugexe> pre/post hooks for fetch,build,test,install,report

[21:38] *** wamba left
[21:42] <RabidGravy> Isn't it possible to support both? Even going as far as a tool that could generate a Build.pm that will run the appropriate hooks for non-compliant tools

[21:42] <RabidGravy> I'm not going there right now, but seems doable

[21:43] *** dbrunton left
[21:43] *** Xor_ left
[21:46] *** Skarsnik left
[21:47] *** wamba joined
[21:47] <magiczna_dupa> hey I find bug in documentation

[21:47] <magiczna_dupa> !!!

[21:47] *** tharkun joined
[21:49] <ugexe> if the entire ecosystem did not write their Build.pm files to require panda, then yes

[21:49] <ugexe> but maintaining both a hook implementation as well as supporting the required source code modification on Build.pm to allow them to be run without panda wasn't worth it

[21:50] <mst> Build.pm at this stage is probably best filed as "the experiment that let us start to get an idea of what a proper thing would require"

[21:50] <magiczna_dupa> http://doc.perl6.org/routine/.%3D

[21:50] <magiczna_dupa> try to find .=

[21:51] *** magiczna_dupa left
[21:54] <AlexDaniel> .tell MadcapJake I've added your ideas (and some other stuff) to https://gist.github.com/AlexDaniel/c89bd2786f9b63f31e4c. Thanks!

[21:54] <yoleaux> AlexDaniel: I'll pass your message to MadcapJake.

[21:55] <RabidGravy> .= isn't a single operator in the same way as ~=, +=, -=, /= , *=, ^= or the other squiilion combinations, it should be documented better but it's just shorthand for do this thing on the RHS with the LHS and then assign it to the LHS

[21:55] <geekosaur> they left

[21:56] <RabidGravy> or some such

[21:56] <mst> however people will likely look for it in operator documentation so

[21:56] <AlexDaniel> RabidGravy: .= is not listed in this gist

[21:56] <geekosaur> this does highlight that I've found it too hard in generla to find things unless I know about them already --- things tend to be organized semantically, but often I have only syntax and the semantics is what I want to find out

[21:56] *** musiKk left
[21:57] <RabidGravy> AlexDaniel, eh?

[21:57] <AlexDaniel> RabidGravy: ah sorry, I thought that it was a comment on my gist :D

[21:57] <RabidGravy> no, the other guy

[21:57] <RabidGravy> :)

[21:57] <AlexDaniel> RabidGravy: I thought that ≔ was rendered as .= with your fonts or something

[21:58] <mst> geekosaur: that's one of the hardest problems to solve with documentation

[21:59] *** raiph left
[21:59] <AlexDaniel> ⩲ – += # nah that's probably too much…

[22:00] *** wamba left
[22:02] *** BenGoldberg_ joined
[22:03] <RabidGravy> AlexDaniel, I have a third problem now, my screen is covered in crap so I can't tell whether something is part of a glyph or just a bit of dust ;-)

[22:04] *** _PiL_ joined
[22:05] *** Ben_Goldberg left
[22:05] <dalek> rakudo-star-daily: 6487ebc | coke++ | log/ (9 files):

[22:05] <dalek> rakudo-star-daily: today (automated commit)

[22:05] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/6487ebcbe6

[22:06] <autarch> m:  use MONKEY-SEE-NO-EVAL; EVAL( now.perl )

[22:06] <camelia> rakudo-moar 463b6c: OUTPUT«===SORRY!===␤Cannot find method 'compile_time_value'␤»

[22:06] <autarch> jnthn: that's the error I gisted earlier

[22:06] <autarch> maybe the same as https://rt.perl.org/Ticket/Display.html?id=126873 ?

[22:08] *** PiL_ left
[22:10] *** ELBeavers_away is now known as ELBeavers

[22:10] <RabidGravy> autarch, I would say that is because there is something a bit wrong with the .perl of the instant

[22:10] <autarch> actually, I think it's the .perl of Rat that's the problem

[22:11] <RabidGravy> m: say Instant.from-posix((<807412079564/555>, 0))

[22:11] <camelia> rakudo-moar 463b6c: OUTPUT«===SORRY!===␤Cannot find method 'compile_time_value'␤»

[22:11] <autarch> m: 'say Rational.new( 5, 2 ).perl'

[22:11] <camelia> rakudo-moar 463b6c: OUTPUT«WARNINGS for /tmp/AIA3oZNVZk:␤Useless use of constant string "say Rational.new( 5, 2 ).perl" in sink context (line 1)␤»

[22:11] <autarch> m: 'say Rational.new( 5, 2 )'

[22:11] <camelia> rakudo-moar 463b6c: OUTPUT«WARNINGS for /tmp/A1epJjCbWc:␤Useless use of constant string "say Rational.new( 5, 2 )" in sink context (line 1)␤»

[22:12] <autarch> m: 'say Rat.new( 5, 2 ).perl'

[22:12] <camelia> rakudo-moar 463b6c: OUTPUT«WARNINGS for /tmp/acRV75B_My:␤Useless use of constant string "say Rat.new( 5, 2 ).perl" in sink context (line 1)␤»

[22:12] <autarch> m: 'say Rat.new( 5, 2 )'

[22:12] <camelia> rakudo-moar 463b6c: OUTPUT«WARNINGS for /tmp/ZvIPCpsgr2:␤Useless use of constant string "say Rat.new( 5, 2 )" in sink context (line 1)␤»

[22:12] *** kurahaupo left
[22:12] <autarch> ok, I'm lost

[22:12] <RabidGravy> m: say (<807412079564/555>, 0)

[22:12] <camelia> rakudo-moar 463b6c: OUTPUT«===SORRY!===␤Cannot find method 'compile_time_value'␤»

[22:12] <autarch> m: say Rat.new(31, 10) # I copied this from the Rat docs!

[22:12] <camelia> rakudo-moar 463b6c: OUTPUT«3.1␤»

[22:12] <RabidGravy> yeah, it's that

[22:12] <autarch> m: say Rat.new( 31, 10 ) # I copied this from the Rat docs!

[22:12] <camelia> rakudo-moar 463b6c: OUTPUT«3.1␤»

[22:12] <autarch> m: say Rat.new( 31, 10 ).perl

[22:12] <camelia> rakudo-moar 463b6c: OUTPUT«3.1␤»

[22:14] <RabidGravy> m: say (807412079564/555, 0)

[22:14] <camelia> rakudo-moar 463b6c: OUTPUT«(1454796539.754955 0)␤»

[22:14] <RabidGravy> m: say Instant.from-posix((807412079564/555, 0))

[22:14] <camelia> rakudo-moar 463b6c: OUTPUT«Instant:12␤»

[22:15] <autarch> so if I wanted to fix this (which I do) where do I put the tests?

[22:15] <RabidGravy> m: say DateTime.new(Instant.from-posix((807412079564/555, 0)))

[22:15] <camelia> rakudo-moar 463b6c: OUTPUT«1970-01-01T00:00:02Z␤»

[22:15] <autarch> it looks like it might be a trivial fix to just have the .perl method spit out "Rat.new( ... ) "

[22:16] <RabidGravy> m: say DateTime.new(Instant.from-posix(Rat.new(807412079564/555, 0)))

[22:16] <camelia> rakudo-moar 463b6c: OUTPUT«Type check failed in binding nu; expected Int but got Rat␤  in block <unit> at /tmp/epMHnVCn0N line 1␤␤»

[22:16] <RabidGravy> m: say DateTime.new(Instant.from-posix(Rat.new(807412079564/555, 0).Int))

[22:16] <camelia> rakudo-moar 463b6c: OUTPUT«Type check failed in binding nu; expected Int but got Rat␤  in block <unit> at /tmp/EVhCVMnTvQ line 1␤␤»

[22:16] <autarch> say DateTime.new(Instant.from-posix(Rat.new(807412079564, 555)))

[22:16] <autarch> m: say DateTime.new(Instant.from-posix(Rat.new(807412079564, 555)))

[22:16] <camelia> rakudo-moar 463b6c: OUTPUT«2016-02-06T22:08:59.754955Z␤»

[22:17] <RabidGravy> there

[22:18] *** wamba joined
[22:18] <autarch> I see a bunch of tests in roast under S32-num/rat.t

[22:18] <autarch> so ... what's the dev process around all this? do I make two parallel branches and submit a PR for each?

[22:20] <RabidGravy> one to roast and one to rakudo

[22:20] <autarch> k

[22:20] <RabidGravy> yeah I guess

[22:20] <autarch> this would be a great doc for someone who knows this to write ...

[22:21] <autarch> "contributing to Perl 6 - the dev process"

[22:24] <dalek> roast/autarch/fix-Rat.perl: a32b429 | (Dave Rolsky)++ | S32-num/rat.t:

[22:24] <dalek> roast/autarch/fix-Rat.perl: Add a test for Rat.perl.EVAL round tripping with arbitrary numerator & denomator

[22:24] <dalek> roast/autarch/fix-Rat.perl: 

[22:24] <dalek> roast/autarch/fix-Rat.perl: As of the latest Rakudo this leads to an error of the form:

[22:24] <dalek> roast/autarch/fix-Rat.perl: 

[22:24] <dalek> roast/autarch/fix-Rat.perl:   ===SORRY!===

[22:24] <dalek> roast/autarch/fix-Rat.perl:   Cannot find method 'compile_time_value'

[22:24] <dalek> roast/autarch/fix-Rat.perl: 

[22:24] <dalek> roast/autarch/fix-Rat.perl: See https://rt.perl.org/Ticket/Display.html?id=126873 for the original report.

[22:24] <dalek> roast/autarch/fix-Rat.perl: review: https://github.com/perl6/roast/commit/a32b429a32

[22:25] <autarch> err, I forgot to ask if it was okay to make a branch in that repo - forgiveness is better than permission?

[22:25] <RabidGravy> it's a branch hey :)

[22:25] <PerlJam> autarch: +1

[22:25] <autarch> yeah, again, it'd be good to doc the dev process ;)

[22:26] <autarch> or maybe it's already documented and I don't know where, which is entirely possible

[22:26] <autarch> 'dev process.subst( 'dev', 'contribution' )

[22:29] <autarch> for example, some wonderful person made a very clear guide to contributing to the perl 5 core - http://perldoc.perl.org/perlhack.html - gosh, whoever did that is just the best

[22:30] <RabidGravy> yeah I remember when that went in

[22:31] *** espadrine joined
[22:31] <autarch> I don't think I'm quite at the point where I could write this for p6

[22:31] <autarch> also, p6 is just more complicated since it has a bunch of repos involved

[22:31] <mst> you could start writing it and then get people to shout "you're wrong" at you a lot

[22:32] <mst> I've done that to good effect for things before now ;)

[22:33] <autarch> yeah, that's some of what happened with the p5 doc, but it was a little easier because I was less wrong ;)

[22:33] <RabidGravy> I think the process is still at the "agile" stage too so actually writing things up my solidify whatever the accuracy

[22:34] *** cognominal left
[22:34] <autarch> makes sense

[22:34] <autarch> I do think this sort of stuff is important if we want p6 to have a chance at bigger adoption

[22:35] <autarch> projects which make contributing easy get more users

[22:36] <RabidGravy> yeah, "come to #perl6 and we'll talk you through it" doesn't scale well ;-)

[22:38] <dalek> roast/autarch/fix-Rat.perl: c785caa | (Dave Rolsky)++ | S32-num/rat.t:

[22:38] <dalek> roast/autarch/fix-Rat.perl: Fix incorrect plan in rat.t

[22:38] <dalek> roast/autarch/fix-Rat.perl: review: https://github.com/perl6/roast/commit/c785caacab

[22:38] <dalek> roast/autarch/fix-Rat.perl: 1b4f796 | (Dave Rolsky)++ | S32-num/rat.t:

[22:38] <dalek> roast/autarch/fix-Rat.perl: Add a test for Rat.perl.EVAL round tripping with arbitrary numerator & denomator

[22:38] <dalek> roast/autarch/fix-Rat.perl: 

[22:38] <dalek> roast/autarch/fix-Rat.perl: As of the latest Rakudo this leads to an error of the form:

[22:38] <dalek> roast/autarch/fix-Rat.perl: 

[22:38] <dalek> roast/autarch/fix-Rat.perl:   ===SORRY!===

[22:38] <dalek> roast/autarch/fix-Rat.perl:   Cannot find method 'compile_time_value'

[22:38] <dalek> roast/autarch/fix-Rat.perl: 

[22:38] <dalek> roast/autarch/fix-Rat.perl: See https://rt.perl.org/Ticket/Display.html?id=126873 for the original report.

[22:38] <dalek> roast/autarch/fix-Rat.perl: review: https://github.com/perl6/roast/commit/1b4f796e10

[22:40] <autarch> well, that was nice and easy - ++ to Perl 6 for being written in Perl 6!

[22:40] <autarch> I think I would've given up on doing anything similar in p5 after the tenth layer of C macros

[22:41] <RabidGravy> rainy day project for someone to make similar round trip tests for all the things

[22:42] *** espadrine left
[22:44] <autarch> yeah, that'd be nice - there were actually some round trip tests but they only tested cases that have a nice .perl because the denom is 1 or is divisible by 2 or 5 (I think)

[22:44] *** raiph joined
[22:45] <autarch> ah, no, apparently that "<X/Y>" syntax works for some cases but nothers?

[22:45] <autarch> m: say (1/3).perl.EVAL

[22:45] <camelia> rakudo-moar 463b6c: OUTPUT«0.333333␤»

[22:45] <autarch> m: say (1234567834684326/55).perl.EVAL

[22:45] <camelia> rakudo-moar 463b6c: OUTPUT«===SORRY!===␤Cannot find method 'compile_time_value'␤»

[22:45] <autarch> I have no idea what's going on there

[22:45] <autarch> also no idea what syntax '<...>' is in this case - why not just serialize as '1/3' ?

[22:47] <autarch> super weird, it works up to 2**31-1

[22:47] <autarch> m: say ((2**31-1)/3).perl.EVAL

[22:47] <camelia> rakudo-moar 463b6c: OUTPUT«715827882.333333␤»

[22:47] <autarch> m: say ((2**31)/3).perl.EVAL

[22:47] <camelia> rakudo-moar 463b6c: OUTPUT«===SORRY!===␤Cannot find method 'compile_time_value'␤»

[22:48] <autarch> so maybe my rakudo fix isn't really right but at least there's a test now

[22:50] <RabidGravy> the <> kick in the divisor is greater than 32

[22:50] <RabidGravy> whatever the divisand

[22:50] <lizmat> autarch: could you split up PR 706 in separate PR's?    or are you ok with me committing them in separate commits ?

[22:50] <autarch> what syntax is <> there?

[22:50] <autarch> lizmat: I'm ok with you doing whatever you like

[22:51] <lizmat> oki

[22:51] *** rindolf left
[22:51] <autarch> I have total faith in you ;)

[22:51] *** colomon left
[22:51] <RabidGravy> m: say (1/32).perl; say (1/33).perl

[22:51] <camelia> rakudo-moar 463b6c: OUTPUT«0.03125␤<1/33>␤»

[22:52] <autarch> I just don't understand why it's wrapped in <>

[22:52] <AlexDaniel> m: say WHAT <1/33>

[22:52] <lizmat> autarch: not sure either anymore

[22:52] <camelia> rakudo-moar 463b6c: OUTPUT«(Rat)␤»

[22:52] <AlexDaniel> autarch: why not?

[22:53] <autarch> AlexDaniel: what syntax is that?

[22:53] <lizmat> m: say WHAT 1/33

[22:53] <camelia> rakudo-moar 463b6c: OUTPUT«(Rat)␤»

[22:53] <AlexDaniel> autarch: not sure but I have seen it many times

[22:53] <lizmat> m: say 1/33 .WHAT

[22:53] <camelia> rakudo-moar 463b6c: OUTPUT«===SORRY!===␤Method call must either supply a name or have a child node that evaluates to the name␤»

[22:53] <lizmat> :-)

[22:53] <RabidGravy> it doesn't work everywhere

[22:53] <autarch> m: say (1/33).WHAT

[22:53] <camelia> rakudo-moar 463b6c: OUTPUT«(Rat)␤»

[22:53] <AlexDaniel> lizmat: say <1/33> .WHAT

[22:53] <AlexDaniel> oops

[22:53] <lizmat> m: say &WHAT.signature

[22:53] <camelia> rakudo-moar 463b6c: OUTPUT«(Mu \x)␤»

[22:54] <AlexDaniel> m: say <1/33> .WHAT

[22:54] <camelia> rakudo-moar 463b6c: OUTPUT«===SORRY!===␤Method call must either supply a name or have a child node that evaluates to the name␤»

[22:54] <autarch> m: say <1/33>.WHAT

[22:54] <camelia> rakudo-moar 463b6c: OUTPUT«(Rat)␤»

[22:54] <autarch> m: say <1/33>.perl

[22:54] <camelia> rakudo-moar 463b6c: OUTPUT«<1/33>␤»

[22:54] <lizmat> .WHAT is not really a method call, but codegenned afaik

[22:54] <AlexDaniel> … which is why it is so often broken

[22:55] <RabidGravy> so

[22:55] <RabidGravy> m: say <1/33> * 33

[22:55] <camelia> rakudo-moar 463b6c: OUTPUT«1␤»

[22:57] <RabidGravy> right, so < > does something subtly different to qw()

[22:57] <RabidGravy> strange

[22:58] <timotimo> aye, < > also has :var

[22:58] <timotimo> m: say qw:var(1/33).WHAT

[22:58] <camelia> rakudo-moar 463b6c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ciTqEQg_RJ␤Invalid adverb value for :var(1/33)␤at /tmp/ciTqEQg_RJ:1␤------> 3say qw:var(1/33)7⏏5.WHAT␤»

[22:58] <timotimo> er, yeah

[22:58] <timotimo> m: say qw:var{1/33}.WHAT

[22:58] <camelia> rakudo-moar 463b6c: OUTPUT«5===SORRY!5=== Error while compiling /tmp/XpBawHs3SJ␤Unrecognized adverb: :var␤at /tmp/XpBawHs3SJ:1␤------> 3say qw:var7⏏5{1/33}.WHAT␤»

[22:58] <timotimo> hm, okay

[22:59] <RabidGravy> I get ye drift

[23:00] <AlexDaniel> “Literals specified without spaces in angle brackets are exempt from val() processing, so <1/2> produces a value that is Rat, while < 1/2 > produces a value that is both a Rat and a Str.”

[23:00] <AlexDaniel> m: say WHAT < 1/2 >

[23:00] <camelia> rakudo-moar 463b6c: OUTPUT«(RatStr)␤»

[23:00] <AlexDaniel> indeed

[23:00] <AlexDaniel> m: say WHAT <1/2>

[23:00] <camelia> rakudo-moar 463b6c: OUTPUT«(Rat)␤»

[23:00] <timotimo> ah

[23:00] <timotimo> that, right.

[23:01] <AlexDaniel> took a while to find this

[23:01] <AlexDaniel> so that's just a syntax for literals, nothing special :)

[23:03] <autarch> ah

[23:04] <RabidGravy> but it's still messed up in the .gist so all good

[23:05] *** virtualsue left
[23:07] *** kjs_ joined
[23:07] <timotimo> there's now 130 videos up from fosdem. and i have already forgotten what the room name was for the perl devroom ...

[23:08] <AlexDaniel> H.2214 ?

[23:08] <lizmat> yup, that's the one

[23:10] *** wamba left
[23:10] *** JRaspass joined
[23:11] <AlexDaniel> Should I use ‘skip’ or ‘todo’ in tests? What would be the reason to prefer one to another?

[23:12] <lizmat> autarch: does your branch cover the failures in t/spec/S03-sequence/basic.t ?

[23:12] <lizmat> argh and some more failures ?

[23:12] <autarch> lizmat: ah, I didn't notice that

[23:12] <lizmat> :-(

[23:13] <autarch> it seems like tests shouldn't be relying on the exact .perl-ification on arbitrary classes though

[23:13] <dalek> rakudo/nom: ceb3c72 | lizmat++ | .gitignore:

[23:13] <dalek> rakudo/nom: Also ignore .precomp dirs, autarch++

[23:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ceb3c7261c

[23:14] <dalek> rakudo/nom: 58d3398 | lizmat++ | CREDITS:

[23:14] <dalek> rakudo/nom: Add Dave Rolsky to CREDITS, autarch++

[23:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/58d3398109

[23:14] <lizmat> autarch: patches welcome

[23:14] <autarch> heh

[23:15] <lizmat> I'm going to get some sleep, will be checking in again in ~ 12 hours from now

[23:15] <lizmat> good night, #perl6!

[23:15] <timotimo> OK, 2214 has no videos up yet

[23:16] <AlexDaniel> timotimo: it wont surprise me if they get lost again

[23:17] <lizmat> well, all of Sat morning's but 3 have been lost  :-(   (well, technically, not lost, just not recorded apparently)

[23:17] <lizmat> good thing we were on Sun morning

[23:17] *** colomon joined
[23:17] <lizmat> really sleep now&

[23:18] *** virtualsue joined
[23:24] <RabidGravy> what was the qq adverb that stops { } interpolation?

[23:24] <ely-se> :!c I think

[23:25] <RabidGravy> indeed it is cheers!

[23:26] <ely-se> or just use q, not qq

[23:28] *** ecocode joined
[23:29] *** ELBeavers is now known as ELBeavers_away

[23:30] <RabidGravy> nah want regular $foo interpolation

[23:30] *** ELBeavers_away is now known as ELBeavers

[23:31] <AlexDaniel> m: my $x = 42; say Q:s‹hello $x›

[23:31] <camelia> rakudo-moar 58d339: OUTPUT«hello 42␤»

[23:31] <AlexDaniel> RabidGravy: ↑ consider this too

[23:31] <AlexDaniel> m: my $x = 42; say Qs‹hello $x›

[23:31] <camelia> rakudo-moar 58d339: OUTPUT«hello 42␤»

[23:32] <RabidGravy> I think the quoting docs could do with some pimping up

[23:33] <AlexDaniel> RabidGravy: sure. Create an issue on github :)

[23:34] <RabidGravy> or just do it

[23:34] <AlexDaniel> https://design.perl6.org/S02.html#Adverbs_on_quotes

[23:34] *** kjs_ left
[23:35] <AlexDaniel> maybe it would even make sense to copy it straight from design docs

[23:35] *** wamba joined
[23:38] <Guest45613> since perl6 can run on a jvm, is there tooling to produce a .jar file for distributing a perl6 program?

[23:38] <AlexDaniel> j: my @a = gather { take $_ for (^10).hyper(:1batch).map({ sleep rand * 0.1; $_ }) }; say @a

[23:38] <camelia> rakudo-jvm f99bdb: OUTPUT«take without gather␤  in block  at /tmp/ToIV9WtBuj:1␤␤take without gather␤  in block  at /tmp/ToIV9WtBuj:1␤␤take without gather␤  in block  at /tmp/ToIV9WtBuj:1␤␤take without gather␤  in block  at /tmp/ToIV9WtBuj:1␤␤take without gath…»

[23:38] <AlexDaniel> m: my @a = gather { take $_ for (^10).hyper(:1batch).map({ sleep rand * 0.1; $_ }) }; say @a

[23:38] <camelia> rakudo-moar 58d339: OUTPUT«take without gather␤  in block  at /tmp/_Y1ChUwhek line 1␤␤[]␤»

[23:38] <timotimo> ah, the for on the hyper list gets scheduled via the thread pool??

[23:39] <timotimo> m: my @a = gather { take $_ for (^10).hyper(:1batch).map({ sleep rand * 0.1; $_ }).eager }; say @a

[23:39] <jnthn> timotimo: Sure, since for is implemented in terms of .map

[23:39] <camelia> rakudo-moar 58d339: OUTPUT«[]␤»

[23:39] <AlexDaniel> timotimo: ?? I didin't understand a wor, but yes?

[23:39] <AlexDaniel> word*

[23:39] <timotimo> heh

[23:40] <AlexDaniel> m: .say for (^10).hyper(:1batch).map({ sleep rand * 0.3; $_ })

[23:40] <camelia> rakudo-moar 58d339: OUTPUT«0␤4␤2␤5␤3␤1␤8␤6␤7␤9␤»

[23:40] <AlexDaniel> I'm trying to write a test for this ↑

[23:40] <AlexDaniel> but how can I gather it in that order?

[23:40] <RabidGravy> I'll look at the quotes thing in the morning

[23:45] <AlexDaniel> ah ok

[23:45] <AlexDaniel> m: my @a; @a.push($_) for (^10).hyper(:1batch).map({ sleep rand * 0.01; $_ }); say @a

[23:45] <camelia> rakudo-moar 58d339: OUTPUT«[2 1]␤»

[23:45] <AlexDaniel> good enough

[23:45] *** kurahaupo joined
[23:48] *** frederico joined
[23:48] *** spider-mario joined
[23:49] *** ecocode left
[23:50] <RabidGravy> close enough for jazz

[23:51] <jnthn> AlexDaniel: That's a data race on @a...

[23:51] <jnthn> Maybe we should make for always mean "serial"...

[23:52] <AlexDaniel> jnthn: so are you saying that it is not a bug?

[23:52] <jnthn> AlexDaniel: tbh, so little of .hyper/.race are really fleshed out/tested it's hard to say yet :)

[23:53] <AlexDaniel> jnthn: imo for should be serial, yes

[23:53] <ely-se> .oO(make '↻' an alias for 'while')

[23:53] <ely-se> or loop

[23:54] <AlexDaniel> or ｢redo｣

[23:54] <AlexDaniel> or ｢nextsame｣, or…

[23:54] <skids> ror

[23:54] <jnthn> AlexDaniel: Unless you explicitly hyper for @a { } or so, yes

[23:54] <RabidGravy> RARR

[23:55] <jnthn> AlexDaniel: That's my leaning 

[23:55] <jnthn> We'll get those fleshed out a good bit more in the coming months.

[23:55] <jnthn> There just wasn't time before 6.c

[23:56] <AlexDaniel> jnthn: if I didn't mean it to be serial then I'd be using ｢race｣ I guess

[23:56] <AlexDaniel> in this particular example

[23:58] *** Sgeo joined
[23:58] *** aliyev joined
