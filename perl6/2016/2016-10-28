[00:03] *** erdic joined
[00:05] *** kyclark left
[00:05] *** maddingu1 joined
[00:12] *** baest_ joined
[00:13] <viki> kyclark, well, "zero or more", so it matched zero

[00:13] *** Gruber joined
[00:13] <ugexe> m: say "oobar" ~~ /o*/; # seems like a bug to me

[00:13] <camelia> rakudo-moar 8c3548: OUTPUT«｢oo｣␤»

[00:13] <viki> Doesn't to me. FWIW, there's a ticket for that, with a discussion.

[00:14] <viki> seatek: there's nothing weird with that. Millions of schoolchildren do basic mathematics daily and know that power is done before the negative.

[00:15] *** kaare__ joined
[00:15] * viki is unreasonably miffed with so many people realizing today that -2² is -4 and not 4.

[00:15] *** kaare_ left
[00:15] * viki is unreasonably miffed that so many people thing -2² being -4 is an artefact of a language or "everything is an object"

[00:15] <viki> *think

[00:16] <MasterDuke> viki: "zero or more" for sure, but greedily, so it seems odd to me. 'o*?' i would definitely expect to match zero

[00:17] <MasterDuke> do you know the ticket #?

[00:17] <viki> MasterDuke: but the first thing is not "o", it's "f", so it attempts to match zero, succeeeds, tries 1, fails, and returns nothing

[00:18] <viki> I looked at a couple with REGEX tag but didn't find it.

[00:18] <ugexe> m: say "fooooo" ~~ /o*$/; # if you let it be greedy until the end it captures them

[00:18] <camelia> rakudo-moar 8c3548: OUTPUT«｢ooooo｣␤»

[00:19] <viki> Sure, you anchored it.

[00:19] <viki> m: say "fooooo" ~~ /'f' o*/;

[00:19] <camelia> rakudo-moar 8c3548: OUTPUT«｢fooooo｣␤»

[00:19] *** khw joined
[00:20] <viki> MasterDuke: fwiw, it was something about grammar tokens with * on them and then there was a much older ticket with a full discussion on this and how it differs from Perl 5

[00:21] <MasterDuke> hmm, wonder how well RT's search handles '*'

[00:21] <viki> MasterDuke: might be this one: https://rt.perl.org/Ticket/Display.html?id=129311#ticket-history

[00:21] <viki> m: say  'a' ~~ m/''*/

[00:21] <camelia> rakudo-moar 8c3548: OUTPUT«Memory allocation failed; could not allocate 979304448 bytes␤»

[00:22] <viki> eye

[00:23] <MasterDuke> i've seen that ticket referenced before, don't remember why though...

[00:23] *** Actualeyes left
[00:25] *** sivoais left
[00:26] *** sivoais joined
[00:32] <ugexe> m: say "fooooo" ~~ /f ** 0 o/; # how does this work?

[00:32] <camelia> rakudo-moar 8c3548: OUTPUT«｢o｣␤»

[00:33] <ugexe> work may or may not be surrounded by air quotes

[00:34] <ugexe> hm, guess it must skip the f, *then* get the zero width match

[00:35] <seatek> viki, ha! thanks :) I had no idea that's how actual math did it ;)

[00:36] *** pierre_ joined
[00:39] *** notostraca joined
[00:41] *** BenGoldberg joined
[00:42] <ugexe> m: say WHAT 1..0; my @x = 1..0; say @x.perl; say "a" ~~ /a ** 1..0/;

[00:42] <camelia> rakudo-moar 8c3548: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Empty range␤at <tmp>:1␤------> 031..0; say @x.perl; say "a" ~~ /a ** 1..07⏏5/;␤»

[00:42] *** TEttinger left
[00:42] <ugexe> m: say WHAT 1..0;

[00:42] <camelia> rakudo-moar 8c3548: OUTPUT«(Range)␤»

[00:44] *** notostraca left
[00:46] <ugexe> m: my $x = 1..2; say "aaaa" ~~ /a ** {$x}/

[00:46] <camelia> rakudo-moar 8c3548: OUTPUT«｢aa｣␤»

[00:46] <ugexe> m: my $x = 1..0; say "aaaa" ~~ /a ** {$x}/

[00:46] <camelia> rakudo-moar 8c3548: OUTPUT«｢aaaa｣␤»

[00:46] <ugexe> possibly a bug

[00:49] *** Actualeyes joined
[00:50] *** leont left
[00:56] *** leego left
[00:56] *** leego joined
[00:59] <ugexe> m: my $x = 2..1; say "aaaa" ~~ /a ** {$x}/

[00:59] <camelia> rakudo-moar 8c3548: OUTPUT«Nil␤»

[00:59] <ugexe> 1..0 greedily matches all 'a', whereas 2..1 doesn't match anything

[01:02] <ugexe> appears if the backwards range ends with a 0 it acts one way, and if it ends non-zero it acts another

[01:04] <AlexDaniel> ugexe: this behavior is since 2014.08

[01:05] *** committable6 left
[01:05] <AlexDaniel> :/

[01:05] <AlexDaniel> “Internal error: zeroed target thread ID in work pass” :(

[01:06] *** committable6 joined
[01:06] *** ChanServ sets mode: +v committable6

[01:09] *** mcsnolte left
[01:09] <ugexe> m: say "aaaa" ~~ /a ** {Inf..0}/; # its at least aware of the Range's makeup inside {} in this instance

[01:09] <camelia> rakudo-moar 8c3548: OUTPUT«Range minimum in quantifier (**) cannot be +Inf␤  in block <unit> at <tmp> line 1␤␤»

[01:10] <ugexe> seems like it should catch {1..0} the same as 1..0 then

[01:13] *** BenGoldberg left
[01:13] *** leego left
[01:15] *** leego joined
[01:16] <AlexDaniel> j: say 'aaaa' ~~ /a ** {1..0}/

[01:17] <camelia> rakudo-jvm 8d357a: OUTPUT«｢aaaa｣␤»

[01:17] <AlexDaniel> j: say 'aaaa' ~~ /a ** {2..1}/

[01:17] <camelia> rakudo-jvm 8d357a: OUTPUT«Nil␤»

[01:19] *** pierre_ left
[01:20] *** pierre_ joined
[01:23] *** itaipu left
[01:24] *** b2gills joined
[01:25] *** pierre_ left
[01:30] <AlexDaniel> m: say ‘aaaa’ ~~ /a ** {4..-5}/

[01:30] <camelia> rakudo-moar 8c3548: OUTPUT«｢aaaa｣␤»

[01:30] <AlexDaniel> m: say ‘aaaa’ ~~ /a ** {5..-5}/

[01:30] <camelia> rakudo-moar 8c3548: OUTPUT«Nil␤»

[01:36] *** wentam joined
[01:37] <AlexDaniel> another interesting thing

[01:37] *** FROGGS_ joined
[01:38] <AlexDaniel> ah no, it's fine

[01:38] <seatek> cruel

[01:38] *** leego left
[01:39] *** leego joined
[01:39] *** FROGGS left
[01:43] <AlexDaniel> seatek: ok-ok

[01:43] <AlexDaniel> m: say ‘aaaa’ ~~ /a ** 1..3/

[01:43] <camelia> rakudo-moar 8c3548: OUTPUT«｢aaa｣␤»

[01:43] <AlexDaniel> m: say ‘aaaa’ ~~ /a ** 1..3.0/

[01:43] <camelia> rakudo-moar 8c3548: OUTPUT«Nil␤»

[01:43] <AlexDaniel> m: say ‘aaaa’ ~~ /a ** 1.0..3/

[01:43] <camelia> rakudo-moar 8c3548: OUTPUT«Nil␤»

[01:44] <sufrostico> hey there!

[01:44] <sufrostico> ¿is there a way to do some web development in perl6?

[01:45] <sufrostico> if so, is there any tutorial in configure the apache? or just pure community knowledge?

[01:45] <AlexDaniel> the amount of low-level hacks to make quantifiers work is amazing

[01:46] *** Jesmaybe joined
[01:48] <seatek> sufrostico, i think usually people proxy web servers back to a running perl instance

[01:49] *** benchable6 joined
[01:49] <AlexDaniel> benchable6: HEAD say ‘aaaa’ ~~ /a ** 0..5/

[01:49] <benchable6> AlexDaniel, starting to benchmark the 1 given commit

[01:49] <benchable6> AlexDaniel, ¦«HEAD»:0.1106

[01:49] <evalable6> AlexDaniel, rakudo-moar 5ac593e: OUTPUT«(exit code 1) ===SORRY!=== Error while compiling /tmp/OtSVtSs8xL␤Undeclared name:␤    HEAD used at line 1␤»

[01:49] <AlexDaniel> ah, I remember

[01:49] <AlexDaniel> that's why it was shut down

[01:49] <AlexDaniel> bench: HEAD say ‘aaaa’ ~~ /a ** 0..5/

[01:49] <benchable6> AlexDaniel, starting to benchmark the 1 given commit

[01:49] <benchable6> AlexDaniel, ¦«HEAD»:0.1107

[01:50] <AlexDaniel> bench: HEAD say ‘aaaa’ ~~ /a ** 0..5000000/

[01:50] <benchable6> AlexDaniel, starting to benchmark the 1 given commit

[01:50] <benchable6> AlexDaniel, ¦«HEAD»:10.0005

[01:51] <AlexDaniel> hehe

[01:53] <AlexDaniel> but don't worry, very large numbers are fast!

[01:53] *** ocbtec left
[01:53] <AlexDaniel> bench: HEAD say ‘aaaa’ ~~ /a ** 0..9223372036854775296/

[01:53] <benchable6> AlexDaniel, starting to benchmark the 1 given commit

[01:53] <benchable6> AlexDaniel, ¦«HEAD»:0.1099

[01:53] <AlexDaniel> ;)

[01:55] <sufrostico> Just found P6W is that ready to run (very small non-critical web apps)

[01:55] <sufrostico> =

[01:55] <sufrostico> ?

[01:56] <seatek> m: say 'aaaa' ~~ /a ** 1.0.Int..3/

[01:56] <camelia> rakudo-moar 8c3548: OUTPUT«Nil␤»

[01:57] <seatek> m: for 1.0.Int..3 -> $x { say $x }

[01:57] <camelia> rakudo-moar 8c3548: OUTPUT«1␤2␤3␤»

[01:57] <seatek> m: say 'aaaa' ~~ /a ** 1.0.Int..10/

[01:57] <camelia> rakudo-moar 8c3548: OUTPUT«Nil␤»

[01:57] <seatek> m: say 'aaaa' ~~ /a ** 1..10.Int/

[01:57] <camelia> rakudo-moar 8c3548: OUTPUT«Nil␤»

[01:58] <seatek> m: say 'aaaa' ~~ /a ** 1..10/

[01:58] <camelia> rakudo-moar 8c3548: OUTPUT«｢aaaa｣␤»

[02:00] <seatek> sufrostico, I don't know - there are simpler ones there. I've been converting stuff to p6 to get to know it and haven't gotten to any web stuff yet.

[02:02] <sufrostico> seatek, thanks... I'll try and come back :D

[02:11] *** jantore left
[02:11] *** jantore joined
[02:15] <AlexDaniel> ugexe: are you going to submit a bug report?

[02:23] *** perlawhirl joined
[02:29] *** pierre_ joined
[02:29] *** adrusi joined
[02:32] <perlawhirl> committable6: sub infix:<j>{$^l.comb.tail eq $^r.comb.head??(|$l,$r)!!|@};say [Xj] <te tt>,<fg et>,<wd td>;

[02:32] <committable6> perlawhirl, ¦«sub»: Cannot find this revision

[02:33] <perlawhirl> committable6: 2016.04..2016.09 sub infix:<j>{$^l.comb.tail eq $^r.comb.head??(|$l,$r)!!|@};say [Xj] <te tt>,<fg et>,<wd td>;

[02:33] <committable6> perlawhirl, Too many commits (1206) in range, you're only allowed 1000

[02:33] <perlawhirl> committable6: 2016.05..2016.09 sub infix:<j>{$^l.comb.tail eq $^r.comb.head??(|$l,$r)!!|@};say [Xj] <te tt>,<fg et>,<wd td>;

[02:34] *** pierre_ left
[02:35] <skids> m: my $c = Channel.new; start { for (1,2,3) { sleep 1; "send".say; $c.send($_) }; $c.close }; my $w := $c.Array; $w.WHAT.say; for $w -> $a, $b? is raw { $a.say; with $b { $b.say; $b = 4 } }; $w.say; # When I read the code it looks like this should be lazy...but it ain't

[02:35] <camelia> rakudo-moar 8c3548: OUTPUT«send␤send␤send␤(Array)␤1␤2␤3␤[1 4 3]␤»

[02:36] <skids> m: my $c = Channel.new; start { for (1,2,3) { sleep 1; "send".say; $c.send($_) }; $c.close }; my $w := $c.list; $w.map: { $_.say; }

[02:36] <committable6> perlawhirl, «hit the total time limit of 180 seconds»

[02:36] <camelia> rakudo-moar 8c3548: OUTPUT«send␤1␤send␤2␤send␤3␤»

[02:36] <skids> m: my $c = Channel.new; start { for (1,2,3) { sleep 1; "send".say; $c.send($_) }; $c.close }; my $w := $c.Array; $w.map: { $_.say; }

[02:36] <camelia> rakudo-moar 8c3548: OUTPUT«send␤send␤send␤1␤2␤3␤»

[02:37] <perlawhirl> committable6: 2016.07..2016.09 sub infix:<j>{$^l.comb.tail eq $^r.comb.head??(|$l,$r)!!|@};say [Xj] <te tt>,<fg et>,<wd td>;

[02:38] *** pierre_ joined
[02:38] *** leego left
[02:38] *** leego joined
[02:39] <AlexDaniel> committable6: 6c sub infix:<j>{$^l.comb.tail eq $^r.comb.head??(|$l,$r)!!|@};say [Xj] <te tt>,<fg et>,<wd td>; # usually you'll do this

[02:39] <AlexDaniel> it will run stuff on tags only

[02:40] <committable6> perlawhirl, «hit the total time limit of 180 seconds»

[02:40] *** pierre_ left
[02:40] <committable6> AlexDaniel, https://gist.github.com/87a587504017e4c5807be178a038a626

[02:40] <AlexDaniel> alright, well that's bisectable

[02:40] *** pierre_ joined
[02:40] <AlexDaniel> bisect: sub infix:<j>{$^l.comb.tail eq $^r.comb.head??(|$l,$r)!!|@};say [Xj] <te tt>,<fg et>,<wd td>; # usually you'll do this

[02:40] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=5ac593e) because on both starting points the exit code is 0

[02:40] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/e0ce811ab7e1be965e7b74efcaa34396

[02:40] <bisectable6> AlexDaniel, (2016-09-19) https://github.com/rakudo/rakudo/commit/96df2d7148cef0c8243bd7a2a1b66b8c22e356eb

[02:41] <AlexDaniel> perlawhirl: is that what you wanted? :)

[02:42] <AlexDaniel> MasterDuke: 180 second limit for 1000 commits expects 0.18s per each commit, that's rather optimistic

[02:43] *** eyck joined
[02:43] <skids> wow does bisectable have lots of prebuilt trees?  that was fast.

[02:44] <AlexDaniel> skids: it has rakudo prebuilt on all commits since 2015.10

[02:44] <skids> yikes.

[02:44] <perlawhirl> AlexDaniel: ahh yes, i was confused

[02:44] <perlawhirl> i wanted bisect

[02:44] <perlawhirl> thanks

[02:45] <MasterDuke> AlexDaniel: i thought 2015.07?

[02:45] <AlexDaniel> ah yes, 2015.07 sorry

[02:45] *** Jesmaybe left
[02:45] <AlexDaniel> it was actually much faster a few months ago, today we compress every build

[02:46] <MasterDuke> and 180s for 1k commits is optimistic, think it should be longer? or fewer commits allowed?

[02:46] <AlexDaniel> fewer commits allowed I think

[02:46] <AlexDaniel> like, half

[02:47] *** noganex joined
[02:48] *** Jesmaybe joined
[02:48] <dalek> whateverable: 1dfa809 | MasterDuke17++ | Whateverable.pm6:

[02:48] <dalek> whateverable: Reduce the number of commits allowed

[02:48] <dalek> whateverable: 

[02:48] <dalek> whateverable: With a default max time allowed of 180s, that only gave 0.18s for each

[02:48] <dalek> whateverable: commit.

[02:48] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/1dfa809735

[02:50] <AlexDaniel> skids: it is actually not that surprising. Amount of space required is less than 50 GB. It takes less than a week to build it all from 2015.07 to current HEAD

[02:50] *** noganex_ left
[02:51] <AlexDaniel> we can go all the way to the first days of rakudo on moar, but who wants to bisect that far?

[02:51] <AlexDaniel> we still build all the tags though

[02:51] <AlexDaniel> committable6: 2014.01 say 42

[02:51] <committable6> AlexDaniel, ¦«2014.01»: 42

[02:52] <AlexDaniel> and you can use ‘all’ to run something on all releases and ‘6c’ to run something just from 2015.12

[02:52] *** Jesmaybe left
[02:52] <AlexDaniel> committable6: all say ‘hello’

[02:52] <committable6> AlexDaniel, https://gist.github.com/8a4caa7b404cc4118865bf53e5ce35e9

[02:52] *** Jesmaybe joined
[02:54] *** aborazmeh joined
[02:54] *** aborazmeh left
[02:54] *** aborazmeh joined
[02:56] *** wentam left
[02:56] *** Jesmaybe left
[02:56] *** Jesmaybe_ joined
[02:58] *** pierre_ left
[03:01] *** pierre_ joined
[03:14] *** eliasr left
[03:22] *** Jesmaybe_ left
[03:43] *** TEttinger joined
[03:47] *** skids left
[04:00] *** Actualeyes left
[04:09] *** Herby__ joined
[04:09] <Herby__> o/

[04:09] <Herby__> m: our Str $key = 'ja123a'; say $key;

[04:09] <camelia> rakudo-moar 8c3548: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Cannot put a type constraint on an 'our'-scoped variable␤at <tmp>:1␤------> 3our Str $key7⏏5 = 'ja123a'; say $key;␤    expecting any of:␤        constraint␤»

[04:12] <Herby__> what's the reason for not allowing a type constraint on an 'our' scoped variable?

[04:17] *** pierre_ left
[04:23] *** pierre_ joined
[04:25] *** aborazmeh left
[04:26] *** Cabanossi left
[04:27] *** khw left
[04:28] <AlexDaniel> Herby__: not relevant, but still: https://rt.perl.org/Ticket/Display.html?id=126449

[04:29] <Herby__> thanks

[04:29] *** Cabanossi joined
[04:30] *** pierre_ left
[04:30] <AlexDaniel> in fact, the error message says that according to the parser it want a constraint in “where …” form (if I get it right)

[04:31] <AlexDaniel> m: our $key where { True } = 'ja123a'; say $key;

[04:31] <camelia> rakudo-moar 8c3548: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Cannot put a type constraint on an 'our'-scoped variable␤at <tmp>:1␤------> 3our $key where { True }7⏏5 = 'ja123a'; say $key;␤    expecting any of:␤        constraint␤        infix␤        …»

[04:31] <AlexDaniel> but obviously that does not work too

[04:31] *** b7j0c joined
[04:32] <b7j0c> i can do a match in perl6 like: say so '123' ~~ m|\d+|;  ... so why can't I do something like:  say so '123' ~~ m|Int+|;

[04:33] <b7j0c> given that Int is a built in type and is something we could match (?)

[04:34] <b7j0c> related: is there a trait that can be used to make a built-in or user-defined type... "matchable" ?

[04:35] <geekosaur> regex is a different language from perl6

[04:35] <geekosaur> Int is not defined in that language

[04:35] <AlexDaniel> Herby__: this is the commit that added these messages https://github.com/rakudo/rakudo/commit/bfd8508f5ceee565380da201ef25bdfb6feb2b3d

[04:35] <geekosaur> you can use `regex` and `token` to define new constructs in the regex language

[04:35] <AlexDaniel> Herby__: given that it is May 2013, my guess is that there is no reason at all why that would have to work like this

[04:36] <AlexDaniel> Herby__: that is, nobody stumbled upon it before you

[04:36] <AlexDaniel> and that kind of makes sense, there is less need for “our” in perl 6

[04:36] <AlexDaniel> Herby__: so please submit a bug report

[04:36] <Herby__> AlexDaniel: thanks for digging into it. I stumbled onto it because I'm probably trying to use it incorrectly :)

[04:36] <b7j0c> geekosaur: cool! I haven't looked into grammars so much yet, looks like I need to...thanks!

[04:37] *** pierre_ joined
[04:39] *** canopus left
[04:39] <AlexDaniel> well you can do crazy stuff like / (.*) <?{ try { Int.new($0); True } }>/

[04:39] <AlexDaniel> I wonder if it works

[04:40] <AlexDaniel> m: say ‘25’ ~~ / (.+) <?{ try { Int.new($0); True } }>/

[04:40] <camelia> rakudo-moar 8c3548: OUTPUT«｢25｣␤ 0 => ｢25｣␤»

[04:40] <AlexDaniel> m: say ‘abc’ ~~ / (.+) <?{ try { Int.new($0); True } }>/

[04:40] <camelia> rakudo-moar 8c3548: OUTPUT«Nil␤»

[04:41] <AlexDaniel> yeah, but I'd probably curse badly if I saw that in real code

[04:42] *** pierre_ left
[04:44] <Herby__> off for the night, thanks for info AlexDaniel 

[04:44] <AlexDaniel> but… but… a bug report? :)

[04:44] <Herby__> I've never submitted one, gotta look into how to do it :)

[04:45] <MasterDuke> buggable: rakudobug

[04:45] *** canopus joined
[04:46] *** Herby__ left
[04:46] <AlexDaniel> huggable: rakudobug

[04:46] <huggable> AlexDaniel, [email@hidden.address] or use perl6 query on http://rt.perl.org ; see https://github.com/rakudo/rakudo/#reporting-bugs

[04:49] *** aborazmeh joined
[04:49] *** aborazmeh left
[04:49] *** aborazmeh joined
[04:56] *** b7j0c left
[05:00] *** rurban joined
[05:00] *** rurban left
[05:07] *** kb_ joined
[05:08] <kb_> Hi

[05:08] <kb_> I have a problem installing rakudo-star-2016.10

[05:08] <kb_> up to make it is OK

[05:08] <kb_> then "make install" fails on installing panda

[05:10] <kb_> more exactly at testing File::Find

[05:10] <kb_> or so:

[05:10] <kb_> cd modules/panda && sh -c "PATH=/opt/OSAGrakudostar/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/osix/bin /opt/OSAGrakudostar/bin/perl6-m bootstrap.pl" ==> Bootstrapping Panda ==> Installing panda from a local directory '/usr/src/packages/src/OSAGrakudostar/rakudo-star-2016.10/modules/panda' ==> panda depends on File::Find, Shell::Command, JSON::Fast, File::Which ==> Shell::Command depends on File::Find ==> Fetching File::Find ==> Building Fi

[05:10] <kb_> no such file or directory    at gen/moar/m-CORE.setting:24539  (/opt/OSAGrakudostar/share/perl6/runtime/CORE.setting.moarvm:throw)  from gen/moar/m-CORE.setting:36068  (/opt/OSAGrakudostar/share/perl6/runtime/CORE.setting.moarvm:result)

[05:12] <kb_> unfortunately it does not say what file it is missing :-(

[05:15] *** Actualeyes joined
[05:17] <geekosaur> that got cut off. and please use some kind of pastebin. gits.github.com and dpaste.de are commonly used here

[05:17] *** Actualeyes left
[05:17] *** Actualeyes1 joined
[05:17] <TEttinger> gist.github.com

[05:20] <geekosaur> whoops yes

[05:20] <geekosaur> (IRC has a 512 byte limit on messages, which is reduced by metadata like channel name and your nick. some clients are aware of this and split messages, others aren

[05:21] <kb_> Here you are: https://dpaste.de/zXoE

[05:21] <geekosaur> t. yours, if it did split it, split it oddly

[05:23] <geekosaur> o.O I *think* that's a panda internal failure finding a test file?

[05:23] <geekosaur> huggable: rakudobug

[05:23] <huggable> geekosaur, [email@hidden.address] or use perl6 query on http://rt.perl.org ; see https://github.com/rakudo/rakudo/#reporting-bugs

[05:23] <geekosaur> ^ file a bug please

[05:23] <geekosaur> the people who really know what's going on are mostly asleep right now, I think

[05:23] <kb_> OK, I will do so

[05:23] <kb_> Thanks!

[05:24] * geekosaur should really follow them...

[05:48] *** aborazmeh left
[05:51] <kb_> the problem is there only if I do

[05:51] <kb_> perl Configure.pl --backend=moar --gen-moar --prefix /opt/OSAGrakudostar

[05:51] <kb_> --prefix 

[05:51] <kb_> Do I need that

[05:52] <kb_> or can I simply move everything with cp?

[05:52] *** RabidGravy joined
[05:53] *** snowman left
[05:54] *** Tonik joined
[05:56] *** TEttinger left
[05:57] *** TEttinger joined
[05:57] *** TEttinger left
[06:05] *** silug joined
[06:07] <moritz> you can't

[06:07] <moritz> rakudo isn't relocatable :(

[06:09] *** neuraload joined
[06:09] *** AlexDaniel left
[06:14] *** TEttinger joined
[06:15] *** dolmen_ joined
[06:19] *** TEttinger left
[06:19] *** TEttinger joined
[06:19] *** vendethiel- joined
[06:20] *** vendethiel left
[06:20] *** pierre_ joined
[06:21] *** darutoko joined
[06:21] <kb_> OK, thanks

[06:21] *** rurban joined
[06:26] *** vendethiel- left
[06:33] *** wamba joined
[06:33] *** domidumont joined
[06:33] *** firstdayonthejob joined
[06:33] *** perlawhirl left
[06:33] *** domidumont left
[06:40] *** arnsholt_ joined
[06:40] *** arnsholt_ left
[06:41] *** firstdayonthejob left
[06:47] <masak> has there been some movement in fixing the area that mst++ described, that we're doing installation stuff during configure?

[06:52] *** Tonik left
[07:11] <andrzejku_> hello perl6

[07:11] <andrzejku_> :)

[07:19] *** seatek left
[07:21] <DrForr> Morning.

[07:30] *** rindolf joined
[07:30] *** chris2 left
[07:34] <FROGGS_> masak: what's the reference?

[07:35] <masak> FROGGS_: mst's YAPC::EU talk, IIRC.

[07:35] <masak> it's on YouTube.

[07:35] <FROGGS_> ahh

[07:35] <FROGGS_> will watch

[07:38] *** dolmen_ left
[07:46] *** chris2 joined
[07:48] <FROGGS_> https://www.youtube.com/watch?v=j3r-lKlrrRg

[07:48] *** ufobat joined
[07:50] *** abraxxa joined
[07:54] *** g4 joined
[07:54] *** g4 left
[07:54] *** g4 joined
[07:55] *** abraxxa left
[08:01] <FROGGS_> :S

[08:02] *** kurahaupo__ joined
[08:06] *** abraxxa joined
[08:09] <masak> FROGGS_: yes. pretty damning that a (very knowledgeable) Perl 5 dev looks at our toolchain and says "nope, don't do it that way, obviously"

[08:10] *** kb_ left
[08:12] *** rudolfochrist joined
[08:13] *** ufobat left
[08:19] <DrForr> w00t! 4/5 rating for my OSCON talk! (admittedly it's a sample size of one.)

[08:19] <FROGGS_> masak: well... it was obvious to us that we want only one installation path :o)

[08:20] *** ufobat joined
[08:20] *** domidumont joined
[08:20] <FROGGS_> masak: so when this is an assumption we have to give up, then the rest *is* obvious

[08:24] <masak> I had kind of assumed that "only one installation path" was a design error that we had inherited from Parrot or something

[08:32] *** eliasr joined
[08:32] <FROGGS_> though it served as well for many years...

[08:32] <FROGGS_> served us*

[08:33] <masak> it has? I think I've only encountered it in the context of it causing people grief.

[08:34] <masak> people who want to do non-trivial things with the installation.

[08:48] *** domidumont left
[08:52] *** araujo__ joined
[08:55] *** araujo_ left
[08:56] *** pmurias joined
[08:58] *** salva00 left
[08:58] *** solarbunny joined
[08:59] *** rudolfochrist left
[09:00] *** salva00 joined
[09:00] <pmurias> masak: people being able to just 'cpanm Rakudo' instead of mess around with rakudobrew would be pretty sweat

[09:08] *** domidumont joined
[09:17] *** bjz joined
[09:17] *** Actualeyes1 left
[09:21] *** lmfjeh[m] left
[09:23] *** itaipu joined
[09:29] *** cibs left
[09:30] *** itaipu left
[09:31] *** cibs joined
[09:33] *** bjz left
[09:35] *** ilmari[m] joined
[09:36] *** jeek joined
[09:42] <FROGGS_> masak: but how many cases are these non-trivial things out of the infinite times the devs installed it without any problems?

[09:43] <FROGGS_> masak: I'm just saying that was good doing it this way in the past... now we have users and not just devs so rakudo needs to change

[09:44] *** salva00 left
[09:45] *** M-Illandan joined
[09:45] *** tadzik joined
[09:45] *** lmfjeh[m] joined
[09:45] *** Guest87 joined
[09:45] *** Matthew[m] joined
[09:45] *** Matias[m] joined
[09:46] *** TEttinger left
[09:49] *** FROGGS_ is now known as FROGGS

[09:56] *** pierre_ left
[09:56] *** khw joined
[09:59] *** pierre_ joined
[10:11] *** dolmen_ joined
[10:13] *** ImCylon joined
[10:25] *** ocbtec joined
[10:26] *** dolmen_ left
[10:37] *** labster left
[10:39] *** dolmen_ joined
[10:43] *** cibs left
[10:45] *** cibs joined
[10:47] *** pierre_ left
[10:48] <viki> LOUD NOISES!

[10:49] <FROGGS> /ö\

[10:50] *** pierre_ joined
[10:51] *** cibs left
[10:52] *** aborazmeh joined
[10:52] *** aborazmeh left
[10:52] *** aborazmeh joined
[10:52] *** cibs joined
[10:59] *** donaldh joined
[11:00] *** dolmen_ left
[11:02] *** aborazmeh left
[11:02] *** ImCylon left
[11:06] *** labster joined
[11:07] *** labster left
[11:08] *** darutoko left
[11:08] *** salva0 joined
[11:12] *** rurban left
[11:15] *** aborazmeh joined
[11:15] *** aborazmeh left
[11:15] *** aborazmeh joined
[11:16] *** darutoko joined
[11:19] *** donaldh left
[11:19] *** pierre_ left
[11:27] *** aborazmeh left
[11:33] *** araujo__ left
[11:34] *** araujo__ joined
[11:34] *** aborazmeh joined
[11:34] *** aborazmeh left
[11:34] *** aborazmeh joined
[11:34] *** bjz joined
[11:39] *** nadim joined
[11:47] *** bjz left
[11:49] *** bjz joined
[11:53] *** bjz left
[11:56] *** bjz joined
[11:59] *** rurban joined
[11:59] *** geekosaur left
[11:59] *** kanishka joined
[12:00] *** bjz left
[12:01] *** geekosaur joined
[12:01] *** wamba left
[12:09] *** emdashcomma_ joined
[12:10] *** noganex left
[12:10] *** ribasushi left
[12:10] *** bonsaikitten joined
[12:10] *** ribasushi_ joined
[12:13] *** iH2O joined
[12:14] *** RubioTerra joined
[12:15] *** El_Che_ joined
[12:15] *** konobi_ joined
[12:15] *** nowan_ joined
[12:15] *** ft_ joined
[12:15] <RubioTerra> Hi, can anyone help me? What's the Perl6 equivalent to 'while (<>) { ... }'?

[12:15] <SmokeMachine____> I don't know if it's the right place to warn, but the download link to mac version of rakudo in rakudo.org page is broken... it points to http://rakudo.org/downloads/star/rakudo-star-2016.10.dmg but the file is in http://rakudo.org/downloads/star/rakudo-star-2016.10-Sierra.dmg

[12:16] <iH2O> theres probably not enough mac users to make a difference anyway

[12:17] *** noganex joined
[12:17] <lizmat> RubioTerra: for lines { }

[12:18] <RubioTerra> Thanks, lizmat!

[12:18] <lizmat> stmuk_ :   ^^^

[12:18] <lizmat> RubioTerra: please note the default is to chomp

[12:18] <RubioTerra> OK.

[12:18] <lizmat> m: say for lines

[12:19] *** Lucas_One joined
[12:19] <lizmat> oops:

[12:20] <lizmat> m: .say for lines

[12:20] <viki> SmokeMachine____: fixed (cc stmuk_)

[12:20] *** abruanese_ joined
[12:20] <lizmat> hmm.... what happened to camelia ?

[12:20] *** pyrimidine joined
[12:20] <viki> m: say 'lag'

[12:20] *** aborazmeh left
[12:20] *** salva0 left
[12:20] *** RabidGravy left
[12:20] *** jantore left
[12:20] *** kaare__ left
[12:20] *** sufrostico left
[12:20] *** ggoebel left
[12:20] *** arnsholt left
[12:20] *** stevieb left
[12:20] *** imcsk8_PTO left
[12:20] *** broquaint left
[12:20] *** bartolin_ left
[12:20] *** nowan left
[12:20] *** ingy left
[12:20] *** ft_ is now known as ft

[12:22] *** pierre_ joined
[12:22] <viki> Oh. The page link doesn't use the /latest URLs :/

[12:25] *** mniip joined
[12:25] <viki> Fixed that too. But those (and anything else referring to latest releases) really should use the /latest URLs so we only have to update those in one place.

[12:26] <moritz> stanley: it's too early for a prognoses; if you're curious, sign up to the mailing list for updates

[12:27] <iH2O> perl on mac is doubly cultish

[12:29] *** cibs left
[12:29] <dalek> doc: 250d97c | coke++ | doc/Language/5to6-perlvar.pod6:

[12:29] <dalek> doc: Avoid confusing confusingly.

[12:29] <dalek> doc: review: https://github.com/perl6/doc/commit/250d97c358

[12:29] <dalek> doc: 46bf352 | coke++ | doc/Language/ (2 files):

[12:29] <dalek> doc: for #993 - fix instances of Perl[56]

[12:29] <dalek> doc: 

[12:29] <dalek> doc: that should have a non-breaking space.

[12:29] <dalek> doc: review: https://github.com/perl6/doc/commit/46bf352c70

[12:30] *** cibs joined
[12:30] <viki> iH2O: "cultish"? At least one of the core devs uses mac

[12:31] <iH2O> wow

[12:31] *** maddingu1 is now known as maddingue

[12:31] <lizmat> .oO( guilty as charged )

[12:31] <viki> :)

[12:32] <lizmat> been using Apple machines since the Apple ][

[12:32] <iH2O> u proud of yourself, arent u

[12:32] <iH2O> :)

[12:32] <lizmat> no

[12:33] <lizmat> it's just that I don't want to think about what I'm using to do my work

[12:33] <masak> FROGGS: what you're saying (about devs installing it without any problems) is true, but I'm still a bit disappointed (or something) that we managed to disappoint mst, a high-level user who expected the configuration to be sane in a certain way

[12:33] <lizmat> e.g. a car for me should bring me from A to B without hassles

[12:33] <lizmat> don't care how it looks

[12:33] <MasterDuke> .tell moritz i just tried to sign up for your book mailing list, but nothing happened when i clicked the 'Subscribe' button. should something have, or am i now subscribed?

[12:33] <yoleaux> MasterDuke: I'll pass your message to moritz.

[12:33] *** salva0 joined
[12:33] <lizmat> or what engine it uses

[12:34] <iH2O> the end justifies the means of the computer

[12:34] <masak> lizmat: perhaps better to recommend `for lines() {}` to people, not `for lines {}`, just in case they try the (non-modifier) for loop and have their block gobbled :)

[12:34] <FROGGS> masak: true, that's why I welcome the heads-up

[12:34] <lizmat> masak: noted  :-)

[12:35] <FROGGS> (could have been earlier though)

[12:35] *** bartolin joined
[12:35] *** arnsholt joined
[12:35] *** kshannon joined
[12:35] *** sufrostico joined
[12:35] *** imcsk8_PTO joined
[12:35] *** jantore joined
[12:36] *** broquaint joined
[12:36] *** ingy joined
[12:36] *** kaare__ joined
[12:36] *** stevieb joined
[12:36] *** aborazmeh joined
[12:36] *** aborazmeh left
[12:36] *** aborazmeh joined
[12:36] *** inokenty joined
[12:36] *** inokenty left
[12:36] *** jervo joined
[12:36] <FROGGS> on the other hand: if you use a software in a way it was not meant to, I mean, come on

[12:36] *** camelia joined
[12:37] <FROGGS> we expect that one installs it in a single dir

[12:37] *** tomaw joined
[12:37] <FROGGS> if someone needs something else, we can make it work, surely

[12:37] <FROGGS> but it is not that I regret that we did it like we did

[12:37] <[Coke]> masak - we just didn't have any mst-shaped volunteers at the time. now we do, and we can fix it. if we worried about every thing we didn't finish by christmas, where would we be?

[12:37] <moritz> MasterDuke: something should happen, yes. Do you have javascript enabled?

[12:37] <yoleaux> 12:33Z <MasterDuke> moritz: i just tried to sign up for your book mailing list, but nothing happened when i clicked the 'Subscribe' button. should something have, or am i now subscribed?

[12:37] <masak> I'm sorry, I didn't mean for folks to get defensive

[12:38] * [Coke] is the opposite of that. :)

[12:38] *** ChanServ sets mode: +v camelia

[12:38] <MasterDuke> yes, but i do have ublock turned on

[12:38] <masak> the main reason I asked whether there has been any movement is that it seemed like useful feedback to act on

[12:39] <MasterDuke> moritz: FF 49.0.1 on arch linux

[12:43] <viki> MasterDuke: it says "

[12:43] <viki> Almost finished... We need to confirm your email address. To complete the subscription process, please click the link in the email we just sent you.

[12:43] <viki> ugh

[12:43] <viki> MasterDuke: it says that just above the "Submit" button after you click Submit.

[12:43] <viki> While the form is still displayed; maybe it's just out of scroll view for you?

[12:44] <MasterDuke> viki: nope, nothing new visible when i scroll around

[12:45] * viki shrugs

[12:46] <MasterDuke> seemed to work in Chrome 54.0.2840.71 (still on arch linux)

[12:47] <viki> Worked for me in Palemoon 26.5.0 on buntu

[12:53] *** thib left
[12:53] <viki> Call for Speakers from Toronto Perl Mongers, if anyone wants to do a talk: https://gist.github.com/zoffixznet/b374922e2cc83a008e929e348aa90226

[12:54] <DrForr> I don't think they'd pay for the flight :/

[12:55] <viki> Not unless you're Damian Conway :)

[12:56] *** abraxxa left
[12:58] *** thib joined
[12:58] *** wamba joined
[12:58] *** kjs_ joined
[12:59] *** aborazmeh left
[13:02] *** inokenty joined
[13:04] *** inokenty left
[13:07] *** aborazmeh joined
[13:07] *** aborazmeh left
[13:07] *** aborazmeh joined
[13:08] <iH2O> z...

[13:08] *** Matthew[m] left
[13:08] *** ilmari[m] left
[13:08] *** Guest87 left
[13:08] *** tadzik left
[13:08] *** M-Illandan left
[13:08] *** lmfjeh[m] left
[13:08] *** Matias[m] left
[13:16] <moritz> MasterDuke: has it worked for you? if not, I can add you manually

[13:17] *** ilmari[m] joined
[13:18] *** leont joined
[13:24] *** rurban left
[13:33] <iH2O> what is the estimated number of perl6 users?

[13:33] <viki> 1,233,433,768 ±3

[13:33] *** pierre__ joined
[13:34] <lizmat> viki: that is incorrect: it's 1,233,433,666  :-)   exactly!

[13:34] <iH2O> i suppose this is also the number of rakudo downloads

[13:34] <viki> :)

[13:35] <DrForr> Well, that won't account for github downloads...

[13:35] <viki> downloads != users :)

[13:36] * viki single-handedly cloned github.com/rakudo/rakudo over a thousand times

[13:36] <DrForr> True, but a starting point would be nice :)

[13:37] *** pierre_ left
[13:38] *** skids joined
[13:38] <viki> Then 1,233,433,768 ±3 should be good 'nuff :)

[13:40] *** tadzik[m] joined
[13:40] *** illandan[m] joined
[13:40] *** matthew[m] joined
[13:40] *** solson[m] joined
[13:44] *** chris2 left
[13:46] *** buggable left
[13:46] *** aborazmeh left
[13:48] *** tadzik[m] left
[13:49] <moritz> DrForr: http://www.p6c.org/stats/ has some usage stats of the various perl6 websites

[13:50] <moritz> tl;dr perl6.org typically has between 40k and 100k visitors a month

[13:51] <moritz> doc.perl6.org around 30k

[13:51] <moritz> typically about 1% of users are part of the community; with about 100 to 200 folks in the community here, we might have 10k users

[13:52] <FROGGS> that's a lot

[13:52] <viki> 31916 unique visitors to docs.perl6.org in Sept

[13:53] <viki> And seems to be roughly twice more visitors this year than last. 

[13:53] <viki> Growth \o/

[13:53] <DrForr> Doing what I can :)

[13:53] <iH2O> doubling each year is a good objective

[13:59] *** chris2 joined
[14:00] *** jsimonet joined
[14:00] *** kjs_ left
[14:01] *** snowman joined
[14:02] *** kjs_ joined
[14:02] *** cdg joined
[14:07] *** cdg left
[14:07] <jkramer> m: "fooooo".subst(/o/, 'X', :nth(*))

[14:07] <camelia> rakudo-moar 1f76b1: ( no output )

[14:07] <jkramer> m: say "fooooo".subst(/o/, 'X', :nth(*))

[14:07] <camelia> rakudo-moar 1f76b1: OUTPUT«fooooX␤»

[14:08] *** cdg joined
[14:08] <jkramer> m: say 'http://foo.com/some-article-123/page-1.html'.subst(/\b\d\b/, '<PAGE>', :nth(*))

[14:08] <camelia> rakudo-moar 1f76b1: OUTPUT«http://foo.com/some-article-123/page-1.html␤»

[14:08] <jkramer> Whut

[14:08] <jkramer> m: say 'http://foo.com/some-article-123/page-1.html'.subst(/\d/, '<PAGE>', :nth(*))

[14:08] <camelia> rakudo-moar 1f76b1: OUTPUT«http://foo.com/some-article-123/page-<PAGE>.html␤»

[14:08] *** ggoebel joined
[14:08] *** RabidGravy joined
[14:08] <lizmat> star: say 'http://foo.com/some-article-123/page-1.html'.subst(/\d/, '<PAGE>', :nth(*))

[14:08] <camelia> star-m 2016.04: OUTPUT«http://foo.com/some-article-123/page-<PAGE>.html␤»

[14:09] <jkramer> Maybe my rakudo is outdated, locally I get: Attempt to retrieve before :1st match -- :nth(0)

[14:10] <jkramer> m: say $*PERL

[14:10] <camelia> rakudo-moar 1f76b1: OUTPUT«Perl 6 (6.c)␤»

[14:10] <jkramer> Hmm

[14:10] <lizmat> $ 6 'say "http://foo.com/some-article-123/page-1.html".subst(/\d/, "<PAGE>", :nth(*))'

[14:10] <lizmat> http://foo.com/some-article-123/page-<PAGE>.html

[14:10] <lizmat> blead ^^^

[14:11] <lizmat> jkramer: which is what you expect, no ?

[14:11] <jkramer> Yes

[14:11] *** bjz joined
[14:11] <viki> The error you get is the behaviour before the recent match rework

[14:11] <jkramer> It works without the \b's, but with the \b's it crashes on my machnine and here it just does nothing, which confuses me :)

[14:11] <jkramer> Ah

[14:11] <jkramer> Ok, guess I should update then

[14:12] <lizmat> jkramer: what does $*VM say ?

[14:12] <jkramer> moar (2016.09)

[14:12] <lizmat> yes, that doesn't have the fix

[14:12] <lizmat> nor does 2016.10

[14:12] <viki> committable6: 2016.09 m: say "fooooo".subst(/o/, 'X', :nth(*))

[14:12] <committable6> viki, ¦«2016.09»: fooooX

[14:12] <jkramer> Alright

[14:12] <jkramer> :D

[14:12] <viki> committable6: 2016.10 m: say "fooooo".subst(/o/, 'X', :nth(*))

[14:12] <committable6> viki, ¦«2016.10»: fooooX

[14:13] * viki shrugs

[14:13] <jkramer> This works for me too, just not with the \b

[14:13] <viki> jkramer: you do realize \b is backspace, right?

[14:13] <jkramer> Ooooooh

[14:14] <viki> m: say 'http://foo.com/some-articl​e-123/page-1.html'.subst(/«\d»/, '<PAGE>', :nth(*))

[14:14] <camelia> rakudo-moar e29e47: OUTPUT«http://foo.com/some-articl​e-123/page-<PAGE>.html␤»

[14:14] <viki> jkramer: yeah, there's plan to make it error out. Too common a mistake to make :)

[14:14] <jkramer> Thank's a bunch, I didn't consider this could've changed :)

[14:14] <jkramer> So <<>> is word bound now?

[14:15] <viki> The << is the left boundary now and >> is the right one (Unicode versions: « and »)

[14:15] <jkramer> Perfect, thanks :)

[14:15] <viki> committable6: 2016.10 m: say 'http://foo.com/some-articl​e-123/page-1.html'.subst(/\b\d\b/, '<PAGE>', :nth(*))

[14:15] <committable6> viki, ¦«2016.10»: Attempt to retrieve before :1st match -- :nth(0)␤  in block <unit> at /tmp/XOdSlQeplo line 1␤ «exit code = 1»

[14:15] <viki> committable6: 2016.10 m: say 'http://foo.com/some-articl​e-123/page-1.html'.subst(/«\d»/, '<PAGE>', :nth(*))

[14:15] <committable6> viki, ¦«2016.10»: http://foo.com/some-articl​e-123/page-<PAGE>.html

[14:16] <viki> Right. So before the .match rework, that version didn't match anything and the Whatever became zero, triggering the error

[14:16] <viki> Bug fix before bug is found :}

[14:17] <jkramer> \o/ :)

[14:17] <lizmat> there's a lot of that going around lately  :-)

[14:19] *** harrison_ joined
[14:27] *** kaare__ is now known as kaare_

[14:30] *** neuraload left
[14:32] *** pierre__ left
[14:33] *** pierre_ joined
[14:38] *** pierre_ left
[14:43] <timotimo> http://rosettacode.org/wiki/Snake#Perl_6  -  it would have been kinda nice to know before someone took the code and put it there so i could have had a chance to make the code a bit prettier ...

[14:47] *** wamba left
[14:48] <viki> It's never too late :)

[14:48] <timotimo> i don't really see how to make it any prettier :)

[14:48] <viki> lol

[14:48] <dalek> doc: 8e154a1 | (Garrett Goebel)++ | doc/Type/List.pod6:

[14:48] <dalek> doc: remove supplying explicit identity from produce examples. Prepending a zero

[14:48] <dalek> doc: to the result is unlikely to be desired.

[14:48] <dalek> doc: review: https://github.com/perl6/doc/commit/8e154a16da

[14:48] <dalek> doc: 0c3e273 | RabidGravy++ | doc/Type/List.pod6:

[14:48] <dalek> doc: Merge pull request #995 from ggoebel/master

[14:48] <dalek> doc: 

[14:48] <dalek> doc: Remove supplying explicit identity from produce examples.

[14:48] <dalek> doc: review: https://github.com/perl6/doc/commit/0c3e2736f3

[14:49] <viki> m: constant W = 1280; dd W

[14:49] <camelia> rakudo-moar e29e47: OUTPUT«1280␤»

[14:49] <viki> TIL you don't need sigils for constants :o

[14:49] <timotimo> you almost always use constant without sigils, i thought

[14:50] <lizmat> timotimo: not if you want to be able to interpolate it into a string easily  :-)

[14:50] <viki> m: constant say = 42; say.say

[14:50] <camelia> rakudo-moar e29e47: OUTPUT«42␤»

[14:50] <viki> hehe

[14:51] <[Coke]> m: constant W = 1280; say "{W}"

[14:51] <camelia> rakudo-moar e29e47: OUTPUT«1280␤»

[14:52] <viki> m: constant constant = 42; constant say = "put"; constant."{say}"()

[14:52] <camelia> rakudo-moar e29e47: OUTPUT«42␤»

[14:52] <viki> That's just wrong :}

[14:52] <lizmat> m: sub danger(\a) { say a }; constant danger = "Danger, Danger, Will Robinson!"; danger(danger)

[14:52] <camelia> rakudo-moar e29e47: OUTPUT«Danger, Danger, Will Robinson!␤»

[14:52] <viki> :o

[14:53] <lizmat> m: sub danger(\danger) { say danger }; constant danger = "Danger, Danger, Will Robinson!"; danger(danger) # even more dangerous

[14:53] <camelia> rakudo-moar e29e47: OUTPUT«Danger, Danger, Will Robinson!␤»

[14:54] <timotimo> lizmat: that's quite true

[14:54] *** Actualeyes joined
[14:55] *** rudolfochrist joined
[14:55] *** sufrostico left
[14:56] <viki> m: constant constant = constant constant = &say; (constant)(constant)

[14:56] <camelia> rakudo-moar e29e47: OUTPUT«sub say (| is raw) { #`(Sub|53455448) ... }␤»

[14:57] <lizmat> aw

[14:58] <timotimo> wow, that allows you to slip between declaration and value evaluation so it doesn't actually count as re-declaration?

[14:59] *** nicq201 joined
[15:01] <viki> m: constant constant = my \constant = &say; (constant)(constant)

[15:01] <camelia> rakudo-moar e29e47: OUTPUT«sub say (| is raw) { #`(Sub|77417000) ... }␤»

[15:02] <viki> m: constant constant = my \constant = my \constant = &say; (constant)(constant)

[15:02] <camelia> rakudo-moar e29e47: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol 'constant'␤at <tmp>:1␤------> 3t constant = my \constant = my \constant7⏏5 = &say; (constant)(constant)␤    expecting any of:␤        new term to be defined␤»

[15:02] *** cdg_ joined
[15:02] *** sufrostico joined
[15:03] <viki> m: constant constant = 2 + my \constant = 42; say constant

[15:03] <camelia> rakudo-moar e29e47: OUTPUT«44␤»

[15:03] *** harrison_ left
[15:03] <viki> To me it looks like the redeclaration checker isn't doing its job in all the cases :)

[15:04] *** cdg left
[15:05] *** domidumont left
[15:06] *** wamba joined
[15:07] <viki> m: constant constant = 1.say && 1 + constant constant = 2.say && 2 + constant constant = 3.say && + constant constant = 42; say constant

[15:07] <camelia> rakudo-moar e29e47: OUTPUT«3␤2␤1␤45␤»

[15:07] <nicq201> viki: What is even happening there? 0.o

[15:07] <viki> :)

[15:08] *** leont left
[15:10] <[Coke]> docs folks - why don't we require Inline::Python as a dep, since we already have other modules we rely on? we could then simplify the syntax highlighting code.

[15:10] *** bjz left
[15:11] *** wisti joined
[15:12] *** bjz joined
[15:29] <timotimo> do we have http request libraries that also handle PUT, DELETE, PATCH requests?

[15:30] *** rudolfochrist left
[15:31] <FROGGS> timotimo: did you check HTTP::UserAgent?

[15:31] <timotimo> nope :S

[15:31] <FROGGS> I'm not sure it supports it, but it should be easily implementable

[15:32] *** g4 left
[15:33] <viki> HTTP::Tiny should support them, but it shells out to curl

[15:35] *** pierre_ joined
[15:35] *** user9 left
[15:39] *** pierre_ left
[15:39] *** telex left
[15:40] *** telex joined
[15:47] <sufrostico> Hi there, anyone knows how to fix this on debian (unstable branch, official perl6 and panda packages) --> Could not find Shell::Command at line 2 in

[15:49] *** iH2O left
[15:49] <ilmari> https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=818926

[15:49] <ilmari> sufrostico: ^^

[15:52] <sufrostico> thanks

[15:53] *** bjz left
[16:00] *** kyclark joined
[16:02] <kyclark> if I have a list of pairs, how can I pattern match on the pair? 

[16:02] <kyclark> m: for 'foo'.comb.pairs -> $i, $l { say "$i: $l" }

[16:02] <camelia> rakudo-moar f22f89: OUTPUT«0    f: 1    o␤Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[16:02] <kyclark> m: for 'foo'.comb.pairs -> ($i, $l) { say "$i: $l" }

[16:02] <camelia> rakudo-moar f22f89: OUTPUT«Too few positionals passed; expected 2 arguments but got 0 in sub-signature␤  in block <unit> at <tmp> line 1␤␤»

[16:03] <kyclark> m: for 'foo'.comb.pairs -> $p { say "{$p.key}: {$p.value}” }

[16:03] <camelia> rakudo-moar f22f89: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in double quotes; couldn't find final '"' ␤at <tmp>:1␤------> 3irs -> $p { say "{$p.key}: {$p.value}” }7⏏5<EOL>␤    expecting any of:␤        horizontal whitespace…»

[16:03] <kyclark> m: for 'foo'.comb.pairs -> $p { say join ": ", $p.key, $p.value }

[16:03] <camelia> rakudo-moar f22f89: OUTPUT«0: f␤1: o␤2: o␤»

[16:04] <viki> m: for 'foo'.comb.pairs -> :$key, :$value { say join ": ", $key, $value }

[16:04] <camelia> rakudo-moar f22f89: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[16:04] <kyclark> m: for 'foo'.comb.pairs -> $i => $l { say "$i: $l" }

[16:04] <camelia> rakudo-moar f22f89: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix > instead␤at <tmp>:1␤------> 3for 'foo'.comb.pairs -> $i =>7⏏5 $l { say "$i: $l" }␤»

[16:04] <viki> m: for 'foo'.comb.pairs -> (:$key, :$value) { say join ": ", $key, $value }

[16:04] <camelia> rakudo-moar f22f89: OUTPUT«0: f␤1: o␤2: o␤»

[16:04] <kyclark> Ah, interesting viki.

[16:07] <viki> m: for "foo".comb.pairs { say join ": ", $:key, $:value }

[16:07] <camelia> rakudo-moar f22f89: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[16:07] <viki> too bad :(

[16:08] <nicq201> for "foo".comb.pairs { say join ": ", $^key, $^value }

[16:08] <nicq201> oops

[16:08] <nicq201> m: for "foo".comb.pairs { say join ": ", $^key, $^value }

[16:08] <camelia> rakudo-moar f22f89: OUTPUT«0    f: 1    o␤Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[16:09] *** MilkmanDan joined
[16:10] <viki> That just gives you two pairs at a time

[16:10] <nicq201> Yeah. :/

[16:11] <viki> m: for "foo".comb.kv { say join ": ", $^k, $^v }

[16:11] <camelia> rakudo-moar 0dc6f7: OUTPUT«0: f␤1: o␤2: o␤»

[16:11] <viki> kyclark: ^ another option, if you don't care for them actually being Pairs

[16:12] <kyclark> Very cool!

[16:14] *** Actualeyes left
[16:15] <dalek> doc: cb323d5 | (Zoffix Znet)++ | doc/Language/variables.pod6:

[16:15] <dalek> doc: Include actual example of '<', ahem, "twigil"

[16:15] <dalek> doc: review: https://github.com/perl6/doc/commit/cb323d553a

[16:16] <viki> Interesting how some folks viewed it as a twigil. To me it always looked like a key lookup on an anonymous $

[16:20] <viki> m: "foo" ~~ /$<bar>=\w+/; say .<bar> given $

[16:20] <camelia> rakudo-moar 0dc6f7: OUTPUT«(Any)␤»

[16:20] <viki> m: "foo" ~~ /$<bar>=\w+/; $.<bar>

[16:20] <camelia> rakudo-moar 0dc6f7: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of $. variable; in Perl 6 please use the .kv method on e.g. .lines␤at <tmp>:1␤------> 3"foo" ~~ /$<bar>=\w+/; $.7⏏5<bar>␤»

[16:29] *** rurban joined
[16:30] *** colomon left
[16:32] <nicq201> Is there some way to grab the signature from a method? I know a sub needs to have the '&' prefix, but how would someone do that for a method?

[16:33] <[Coke]> you can introspect signatures on callables.

[16:33] <ilmari> m: say Str.^can("encode")[0].signature

[16:33] <camelia> rakudo-moar 0dc6f7: OUTPUT«(Str $: | is raw)␤»

[16:34] <ilmari> m: say Str.^can("encode")».signature

[16:34] <camelia> rakudo-moar 0dc6f7: OUTPUT«((Str $: | is raw))␤»

[16:34] <[Coke]> there ya go

[16:35] <viki> m: say Str.^lookup("encode").signature

[16:35] <camelia> rakudo-moar 0dc6f7: OUTPUT«(Str $: | is raw)␤»

[16:35] *** colomon joined
[16:35] <ilmari> hm, that's showing the signature of the proto method, not any of the multis

[16:35] *** kanishka left
[16:35] <ilmari> s: Str.encode

[16:35] <SourceBaby> ilmari, Something's wrong: ␤ERR: Cannot unbox a type object (Str) to a str.␤  in block <unit> at -e line 6␤␤

[16:35] <ilmari> s: Str ^encode

[16:35] <viki> s: Str, 'encode'

[16:35] <SourceBaby> ilmari, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Undeclared routine:␤    encode used at line 6␤␤

[16:35] <SourceBaby> viki, Sauce is at https://github.com/rakudo/rakudo/blob/0dc6f79/src/core/Str.pm#L1972

[16:35] <viki> s: Str, 'encode', \()

[16:35] <SourceBaby> viki, Sauce is at https://github.com/rakudo/rakudo/blob/0dc6f79/src/core/Str.pm#L1979

[16:35] *** abruanese_ left
[16:35] <viki> s: "foo", 'encode', \()

[16:35] <SourceBaby> viki, Sauce is at https://github.com/rakudo/rakudo/blob/0dc6f79/src/core/Str.pm#L1979

[16:35] <moritz> m: say Str.^lookup("encode").candidates>>.signature

[16:35] <camelia> rakudo-moar 0dc6f7: OUTPUT«((Str $: Str:D $encoding = "utf8", Bool:D :$replacement, *%_) (Str $: Str:D $encoding = "utf8", Str :$replacement, *%_))␤»

[16:36] <lizmat> http://blogs.perl.org/users/ken_youens-clark/2016/10/pick.html   :-)

[16:36] <moritz> ilmari: ^^ better

[16:36] <ilmari> moritz: ah

[16:36] <viki> m: say Str.^lookup("encode").cando(\(Str))[0].signature

[16:36] <camelia> rakudo-moar 0dc6f7: OUTPUT«(Str $: Str:D $encoding = "utf8", Str :$replacement, *%_)␤»

[16:37] <[Coke]> zoffix: I'd like to rewrite that so it doesn't call it a twigil as all - that ok with you?

[16:37] <viki> [Coke]: definitely

[16:37] <[Coke]> (guessing so from commit message)

[16:38] *** dalek left
[16:40] *** amalia_ left
[16:40] *** timeless left
[16:40] *** xfix left
[16:40] *** amalia_ joined
[16:41] *** solson[m] left
[16:41] *** hobbs left
[16:41] *** canopus left
[16:42] *** jsimonet left
[16:42] *** illandan[m] left
[16:42] *** matthew[m] left
[16:42] *** solarbunny left
[16:42] *** xfix joined
[16:42] *** ilmari[m] left
[16:42] *** Juerd left
[16:43] *** Juerd joined
[16:43] *** hoelzro joined
[16:43] *** BinGOs joined
[16:43] *** timeless joined
[16:45] *** dalek joined
[16:45] *** ChanServ sets mode: +v dalek

[16:45] <[Coke]> viki: opened a ticket, assigned it to myself.

[16:45] *** rodarmor joined
[16:46] *** jsimonet joined
[16:46] *** hobbs joined
[16:48] *** canopus joined
[16:48] *** kjs_ left
[16:49] *** SourceBaby joined
[16:49] *** Undercover joined
[16:49] *** ChanServ sets mode: +v Undercover

[16:50] *** integral joined
[16:50] *** integral left
[16:50] *** integral joined
[16:50] *** solarbunny joined
[17:03] *** xinming left
[17:03] *** xinming joined
[17:05] *** rurban left
[17:06] *** firstdayonthejob joined
[17:07] *** firstdayonthejob left
[17:11] *** firstdayonthejob joined
[17:13] *** Indecipherable joined
[17:13] *** cgfbee left
[17:14] *** Indecipherable left
[17:14] *** AlexDaniel joined
[17:15] *** cgfbee joined
[17:15] *** Indecipherable joined
[17:17] *** Indecipherable left
[17:20] *** kyclark left
[17:21] *** Indecipherable joined
[17:23] *** Indecipherable left
[17:25] *** wamba left
[17:26] <viki> m: my $x = +"423343dasdfas"

[17:26] <camelia> rakudo-moar 0dc6f7: ( no output )

[17:26] <viki> m: my Int $x = +"423343dasdfas"

[17:26] <camelia> rakudo-moar 0dc6f7: OUTPUT«Earlier failure:␤ Cannot convert string to number: trailing characters after number in '03423343⏏5dasdfas' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Final error:␤ Type check failed in assignment to $x; expected Int but got Failur…»

[17:27] <viki> never mind :)

[17:29] *** andrzejku joined
[17:31] *** sufrostico left
[17:31] *** andrzejku_ left
[17:32] *** nicq201 left
[17:35] *** Bname joined
[17:35] *** AlexDaniel left
[17:36] *** pierre___ joined
[17:40] *** pierre___ left
[17:44] *** sufrostico joined
[17:46] *** domidumont joined
[17:50] <viki> m: my @colors = <b g r x b g r x b g r x>; @colors .= map: {|($^r, $^g, $^b, $^x)}; dd @colors

[17:50] <camelia> rakudo-moar 0dc6f7: OUTPUT«Array @colors = ["r", "g", "b", "x", "r", "g", "b", "x", "r", "g", "b", "x"]␤»

[17:50] <viki> (Perl 6)++

[17:58] *** RubioTerra left
[17:59] *** kaare_ left
[18:02] *** firstdayonthejob left
[18:04] *** firstdayonthejob joined
[18:04] *** kaare_ joined
[18:06] *** ilmari[m] joined
[18:10] *** Guest95971 joined
[18:10] *** tadzik joined
[18:10] *** Matthew[m] joined
[18:10] *** M-Illandan joined
[18:10] *** Matias[m] joined
[18:14] *** bjz joined
[18:23] *** colomon left
[18:24] *** RabidGravy left
[18:25] *** bjz left
[18:29] *** RabidGravy joined
[18:32] <sufrostico> can someone help me with this error?

[18:32] <sufrostico> http://pastebin.com/ciBRpN1x

[18:33] *** seatek joined
[18:34] <RabidGravy> looks like an error to me

[18:34] <viki> sufrostico: it's pretty hard to help without having the code that generates that error.

[18:37] *** ufobat_ joined
[18:37] <sufrostico> viki is a minimal example of the Hiker module 

[18:37] <sufrostico> http://pastebin.com/ku252UEe

[18:37] * skids suspects a symbolic lookup gone bad because the code expects "Grammar" but gets "Template::Mustache::Grammar" and then prepends "Template::Mustache".  And that's abouty as helpful as I can be.

[18:38] <sufrostico> ls

[18:38] <viki> sufrostico: is Template::Mustache installed?

[18:38] <moritz> no such file or directory

[18:38] <sufrostico> moritz: jaja

[18:38] <sufrostico> viki: yes

[18:38] *** ufobat left
[18:40] <sufrostico> skids: I'look int that

[18:40] <RabidGravy> eugh, that code in Hiker is scaring me

[18:40] <skids> "smells like templating... I'm outta here!" :-)

[18:41] <sufrostico> RabidGravy: Any other recomendation to a webapp ?

[18:42] <viki> Template::Mustache::Template::Mustache::Grammar is right.

[18:46] <viki> sufrostico: what's your perl6 -v ?

[18:47] <viki> never mind

[18:48] <viki> sufrostico: I've no idea how you got Hiker, but it's failing on installation. And it's failing on Travis.

[18:48] <RabidGravy> let me replicate that locally

[18:48] <viki> m: say "foo":defined

[18:48] <camelia> rakudo-moar 0dc6f7: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤You can't adverb "foo"␤at <tmp>:1␤------> 3say "foo":defined7⏏5<EOL>␤    expecting any of:␤        pair value␤»

[18:48] <viki> I'm guessing this syntax hasn't existed for some time

[18:48] <RabidGravy> I noticed it was failing in Travis earlier

[18:49] <viki> No updates since Oct 15, 2015 

[18:49] * viki does the Mythbusters voice

[18:49] <viki> Well there's your problem!

[18:50] <dalek> doc: 21c9fa9 | (Tom Browder)++ | doc/Language/syntax.pod6:

[18:50] <dalek> doc: correct grammar

[18:50] <dalek> doc: review: https://github.com/perl6/doc/commit/21c9fa9f20

[18:50] <viki> committable6: 2015.07 m: say "foo":defined

[18:50] <committable6> viki, ¦«2015.07»: ===SORRY!=== Error while compiling /tmp/PCopQG2iw6␤You can't adverb that␤at /tmp/PCopQG2iw6:1␤------> m: say "foo":defined⏏<EOL>␤    expecting any of:␤        pair value «exit code = 1»

[18:50] <RabidGravy> can't be having not working modules

[18:50] * viki shrugs

[18:51] <RabidGravy> plus I spent half the day doing Scala, and the other half doing the stupidest meeting ever so I need something to fix

[18:51] <viki> \o/

[18:51] <viki> RabidGravy++

[18:52] <RabidGravy> well for starters HTTP::Server::Async isn't working either

[18:53] <viki> heh

[18:53] <harmil_wk> Question for the Perl 6 historians in the room: It's my memory that one of the very first design decisions in terms of a syntax for a new feature was smart-match and given/when. Is that just my memory playing tricks on me?

[18:54] <viki> RabidGravy: funny enough, I'm currently hunting a bug in Proc::Async :) The failures run dep

[18:54] <viki> *deep

[18:54] <moritz> harmil_wk: they were among the first features ported to p5

[18:54] <geekosaur> harmil_wk, you can check, see the Apocalypses at http://design.perl6.org/

[18:54] <moritz> harmil_wk: dunno if they were actually among the first p6 syntax features

[18:56] <geekosaur> not sure if you can pull the repo (they may be in the pugs repo?) and search their history

[18:56] <harmil_wk> Apocalypses were after a lot of the post-RFC discussion, though... and some syntax was settled before them.

[18:57] *** sufrostico left
[19:02] *** sjoshi joined
[19:10] *** domidumont left
[19:11] <viki> I mean.. in IO::Socket::Async >_<>

[19:15] *** brillenfux joined
[19:15] *** ale1ster joined
[19:17] *** rudolfochrist joined
[19:18] *** darutoko left
[19:21] *** bjz joined
[19:22] <RabidGravy> ah just remembered why I didn't try to fix HTTP::Server::Async before

[19:22] *** bstamour joined
[19:24] <viki> Why?

[19:30] <viki> Whyy? :)

[19:30] *** brillenfux left
[19:30] *** bjz left
[19:31] *** bjz joined
[19:35] *** dolmen_ joined
[19:35] *** labster joined
[19:36] *** cdg_ left
[19:37] *** sjoshi left
[19:38] <RabidGravy> because unfortunately there is some namespace clashage between the HTTP::Response of HTTP::Server and the HTTP::Response of HTTP::UserAgent

[19:38] <RabidGravy> but never fear, fully quilified names work now

[19:43] *** rudolfochrist left
[19:43] *** rudolfochrist joined
[19:51] <seatek> RabidGravy++

[19:51] *** itaipu joined
[19:58] *** bstamour left
[20:00] *** ufobat_ left
[20:02] *** bjz left
[20:03] *** nadim left
[20:15] *** itaipu left
[20:20] *** dolmen_ left
[20:23] *** rurban joined
[20:24] <seatek> anyone know? Passing named arguments to method through a hash -- this works: meth(|%CFG«keyname») -- however, if I make "keyname" into a variable instead, it doesn't work using |%CFG«$.keyname» but does using |%CFG{$.keyname}

[20:25] <geekosaur> «» is implicit quoting

[20:26] <geekosaur> foo«x» is the same as foo{"x"}, and it probably doesn't expand $.keyname the way you expect when quoted

[20:27] <geekosaur> likewise foo<x> is foo{'x'}

[20:27] *** TEttinger joined
[20:28] *** rudolfochrist left
[20:29] *** kjs_ joined
[20:29] <FROGGS> I'd think that this should work: |%CFG«$.keyname()»

[20:30] <FROGGS> because $.keyname is a method call, and these need parenthesis to interpolate, right?

[20:31] <FROGGS> m: my $a = "foo"; say "$a.uc"; say "$a.uc()"

[20:31] <camelia> rakudo-moar 0dc6f7: OUTPUT«foo.uc␤FOO␤»

[20:31] <FROGGS> like in here^^

[20:31] <geekosaur> but it's different for $.

[20:31] <seatek> doesn't seem to when I try FROGGS 

[20:32] <FROGGS> geekosaur: why?

[20:32] <geekosaur> m: class A {has $.foo = "bar"; method x {my %h = :1bar; %h«$.foo»}}; my A $a .= new; say $a.x;

[20:32] <camelia> rakudo-moar 0dc6f7: OUTPUT«(1)␤»

[20:32] <geekosaur> this works... ?

[20:32] <geekosaur> m: class A {has $.foo = "bar"; method x {my %h = :6bar; %h«$.foo»}}; my A $a .= new; say $a.x;

[20:32] <camelia> rakudo-moar 0dc6f7: OUTPUT«(6)␤»

[20:33] <seatek> it doesn't allow the hash to be interpreted as "named arguments" ;)

[20:33] <seatek> it only does when i use %CFG{$.keyname}

[20:33] <seatek> it only does when i use |%CFG{$.keyname}

[20:34] <seatek> it only does when i use |%CFG«$.keyname()» error is )contsturctor only takes named arguments

[20:34] <geekosaur> oh

[20:34] <seatek> yeah

[20:34] <geekosaur> I bet this is that business where it expands in the wrong context again

[20:35] <seatek> yeah it seemed strange so i thought i'd mention it

[20:37] <geekosaur> s/expands/interpolates/

[20:37] <FROGGS> I dont understand....

[20:37] <FROGGS> m: sub foo(*%h) { say %h }; my %x = bar => 'baz', quux => 'qaax'; my $bar = 'bar'; foo |%x{$bar}

[20:37] <camelia> rakudo-moar 0dc6f7: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:37] <FROGGS> m: sub foo(*%h) { say %h }; my %x = bar => 'baz', quux => 'qaax'; my $bar = 'bar'; foo |%x

[20:37] <camelia> rakudo-moar 0dc6f7: OUTPUT«{bar => baz, quux => qaax}␤»

[20:37] <FROGGS> I'd like to see a one-liner here where |%CFG{$.keyname} does something...

[20:37] *** pierre___ joined
[20:37] <RabidGravy> eugh https://travis-ci.org/sergot/http-useragent/builds/171489441

[20:38] <RabidGravy> don't like the look of that

[20:38] <seatek> FROGGS, I'll try to recreate an example of it without having to using all the class/method stuff that surrounds it 

[20:39] <FROGGS> seatek: that'd be awesome :o)

[20:40] <FROGGS> RabidGravy: precomp isnt happy, but I can't even guess what my be wrong

[20:40] <seatek> FROGGS: I'll need coffee first though ;)

[20:41] <RabidGravy> yeah, but I can't see anything changed that would provoke it

[20:41] * RabidGravy restarts the build

[20:42] *** pierre___ left
[20:42] *** dolmen_ joined
[20:43] <ugexe> m: sub foo(*%h) { say %h.perl }; class Bar { has $.keyname = "key"; method cfg { my %CFG = a => 1, key => 2 => 3; foo(|%(%CFG<<$.keyname>>)) }; }; say Bar.new.cfg

[20:43] <camelia> rakudo-moar 0dc6f7: OUTPUT«{"2" => 3}␤True␤»

[20:44] <ugexe> s/|%CFG<<...>>/|%(%CFG<<...>>)/

[20:46] *** skids left
[20:52] *** rindolf left
[20:52] *** TEttinger left
[20:52] *** notostraca joined
[20:53] *** ale1ster left
[20:53] <RabidGravy> FROGGS, on a second attempt it passed, often see weird like that on travis

[20:55] <FROGGS> a hiccup then...

[20:56] <seatek> ugexe: didn't work with preceding |%(%CFG... either... so far only |%CFG{$.keyname} works

[20:57] <RabidGravy> well now,  after fixing the syntax error in Hiker::Router I can now replicate the previous error

[20:59] *** kurahaupo left
[21:01] *** pmurias left
[21:01] <seatek> FROGGS: ok got it for you

[21:02] <seatek> class C { has $.name; has $.pass; }; class D { method try(){ my %CFG = cfg1 => { name => 'myname', pass => 'mypass'}; my $c = C.new(|%CFG<<cfg1>>); return $c;}}; my $c = D.new.try;

[21:02] <seatek> m: class C { has $.name; has $.pass; }; class D { method try(){ my %CFG = cfg1 => { name => 'myname', pass => 'mypass'}; my $c = C.new(|%CFG<<cfg1>>); return $c;}}; my $c = D.new.try;

[21:02] <camelia> rakudo-moar f50e39: ( no output )

[21:02] <seatek> works fine

[21:02] <seatek> use a variable inside «» -- doesn't work fine

[21:03] <seatek> m: class C { has $.name; has $.pass; }; class D { method try(){ my %CFG = cfg1 => { name => 'myname', pass => 'mypass'}; my $key = 'cfg1';  my $c = C.new(|%CFG<<$key>>); return $c;}}; my $c = D.new.try;

[21:03] <camelia> rakudo-moar f50e39: OUTPUT«Default constructor for 'C' only takes named arguments␤  in method try at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:03] <seatek> only named arguements

[21:03] <seatek> BUT if you use the {} notation with a variable, it works fine 

[21:03] <seatek> m: class C { has $.name; has $.pass; }; class D { method try(){ my %CFG = cfg1 => { name => 'myname', pass => 'mypass'}; my $key = 'cfg1';  my $c = C.new(|%CFG{$key}); return $c;}}; my $c = D.new.try;

[21:03] <camelia> rakudo-moar f50e39: ( no output )

[21:04] <geekosaur> ah, that's another difference

[21:05] <geekosaur> you are interpolating a hash and I was interpolating a string. so this is probably tripping over the ambiguity between hashes/Pairs and named params :/

[21:05] <seatek> yes

[21:05] <FROGGS> m: my %CFG = cfg1 => { name => 'myname', pass => 'mypass'}; my $key = 'cfg1'; dd %CFG<<$key>>

[21:05] <camelia> rakudo-moar f50e39: OUTPUT«(${:name("myname"), :pass("mypass")},)␤»

[21:05] <FROGGS> that's a List

[21:05] <FROGGS> m: my %CFG = cfg1 => { name => 'myname', pass => 'mypass'}; my $key = 'cfg1'; dd %CFG<<cfg1>>

[21:05] <camelia> rakudo-moar f50e39: OUTPUT«Hash %CFG = ${:name("myname"), :pass("mypass")}␤»

[21:05] <geekosaur> but it's being |d

[21:06] <FROGGS> and this is not

[21:06] <FROGGS> see?

[21:06] <seatek> yeah -- i see

[21:07] <FROGGS> m: my %CFG = cfg1 => { name => 'myname', pass => 'mypass'}; my $key = 'cfg1'; dd %CFG<<$key>>.hash

[21:07] <camelia> rakudo-moar f50e39: OUTPUT«Odd number of elements found where hash initializer expected:␤Only saw: ${:name("myname"), :pass("mypass")}␤  in block <unit> at <tmp> line 1␤␤»

[21:07] <FROGGS> m: my %CFG = cfg1 => { name => 'myname', pass => 'mypass'}; my $key = 'cfg1'; dd %CFG<<$key>>».hash

[21:07] <camelia> rakudo-moar f50e39: OUTPUT«({:name("myname"), :pass("mypass")},)␤»

[21:08] *** dolmen_ left
[21:08] <FROGGS> m: class C { has $.name; has $.pass; }; class D { method try(){ my %CFG = cfg1 => { name => 'myname', pass => 'mypass'}; my $key = 'cfg1';  my $c = C.new(|%CFG<<$key>>».hash.hash); return $c;}}; my $c = D.new.try;

[21:08] <camelia> rakudo-moar f50e39: ( no output )

[21:09] <FROGGS> there might be a less ugly solution out there

[21:09] <seatek> yeah just use {} -- they work ;)

[21:09] <FROGGS> true

[21:11] <seatek> but it's certainly not obvious

[21:13] *** dolmen_ joined
[21:14] <FROGGS> aye

[21:14] <RabidGravy> if the guy who asked about Hiker earlier shows up I just fixed it :)

[21:14] <RabidGravy> if tony-o shows up tell him he has incoming :)

[21:14] *** bjz joined
[21:17] <ugexe> m: class C { has $.name; has $.pass; }; class D { method try(){ my %CFG = cfg1 => { name => "myname", pass => "mypass"}; my $key = "cfg1";  my $c = C.new(|%CFG<<"$key">>); return $c;}}; say D.new.try;

[21:17] <camelia> rakudo-moar 4034f7: OUTPUT«C.new(name => "myname", pass => "mypass")␤»

[21:17] <ugexe> s/<<$key>>/<<"$key">>/

[21:20] *** Undercover left
[21:20] *** SourceBaby left
[21:21] <seatek> ugexe: oddly that works! but that's just 1 more bit of insanity i'm unwilling to go down. ;)

[21:23] *** SourceBaby joined
[21:24] *** woodruffw joined
[21:27] *** kurahaupo__ is now known as kurahaupo

[21:27] *** rurban1 joined
[21:28] *** rurban1 left
[21:30] *** rurban left
[21:32] <MasterDuke> .tell moritz i'm good, it worked with Chrome

[21:32] <yoleaux> MasterDuke: I'll pass your message to moritz.

[21:42] *** wisti left
[21:45] *** _28_ria joined
[21:45] * TimToady waves from Puerto Vallarta

[21:46] <TimToady> smartmatching was starting to come into focus in about 2006, Apocalypse 4 was written

[21:47] * TimToady is done with his opening keynote, so can pay attention to Real Life™ again

[21:50] *** cdg joined
[21:52] *** huggable left
[21:52] *** NeuralAnomaly left
[21:52] *** espadrine joined
[21:53] *** _28_ria left
[21:53] *** buggable joined
[21:53] *** huggable joined
[21:54] <ugexe> seatek: get the best of all worlds and use C.new(|%CFG<<"{$key}">>)

[21:54] *** NeuralAnomaly joined
[21:55] *** _28_ria joined
[21:55] <geekosaur> oyyyy

[21:56] *** Herby_ joined
[21:56] <Herby_> o/

[21:56] <viki> \o

[21:56] *** Lucas_One left
[22:00] *** raiph left
[22:02] <harmil_wk> TimToady: Thanks for the context

[22:02] <harmil_wk> I guess it was much later than I thought.

[22:04] <seatek> ugexe: if i didn't just finish working on the well, i'd have jumped down in it. :)

[22:06] *** Jesmaybe joined
[22:06] *** skids joined
[22:09] <TimToady> harmil_wk: yes, back then we though Perl 6 could be much more like Perl 5, until we actually started trying to mesh many different concepts while also simplifying

[22:10] <TimToady> *thought

[22:11] *** Bname left
[22:11] <geekosaur> smartmatching was an early train wreck in that regard. perl 5 imported the original smartmatching, which turned out to be broken in the same way it is in perl 5 (duh)

[22:11] <geekosaur> it was redesigned in perl 6 to be type-based

[22:12] <TimToady> well, it was already type-based when P5 borrowed it, but they had to fake types, so it didn't work so well

[22:12] *** imcsk8_PTO is now known as imcsk8

[22:12] *** RabidGravy left
[22:12] <TimToady> also, it was symmetrical when they borrowed it, and later we decided that was a mistake

[22:13] <TimToady> if it's symmetrical, you can't ever optimize when 1...when 2...when 3 into a jump table

[22:13] <imcsk8> TimToady: hello, i'm the guy that asked you the daemon stuff 

[22:13] <TimToady> because some type on the left could always ask for a different interpretation

[22:14] <TimToady> imcsk8: howdy!

[22:14] <TimToady> I'm so far away!

[22:14] <El_Che_> TimToady: http://www.oreilly.com/programming/free/files/2016-european-software-development-salary-survey.pdf <-- page 52: Perl 6 in mentioned in FUTURE PROGRAMMING LANGUAGES 

[22:15] <El_Che_> (INTENT TO LEARN)

[22:15] <TimToady> well, I should hope so :)

[22:15] <viki> Note to self: ensure IRC::Client problem got resolved before you go and update Perl 6 and restart all the bots on three different boxes, to get the latest Rakudo :(

[22:15] <TimToady> but it's also in the present :)

[22:16] <viki> heh, oreilly.com? More like "Future books O'Reilly wants to turn profit on" survey :)

[22:16] <El_Che_> maybe we need to raise DrForr bonus. He maybe enough people at FOSDEM to give Perl6 a try (or he did fill a lot of questionaire) ;)

[22:16] <imcsk8> TimToady: yeah!! unreachable :P

[22:16] *** El_Che_ is now known as El_Che

[22:17] *** Actualeyes joined
[22:18] <TimToady> imcsk8: unfortunately DNS does not seem to be feeling well, so it will be difficult to give links to anything

[22:18] *** Actualeyes left
[22:19] <TimToady> well, difficult for me; other people shouldn't have any trouble...

[22:20] <imcsk8> TimToady: the network here is not that good

[22:21] <TimToady> I'm on the irc here because I have a hardwired IP address to my home server, where I actually run irssi

[22:27] <imcsk8> yup me too

[22:31] <japhb> TimToady: Does 8.8.8.8 work for you?

[22:32] <japhb> It's Google's external DNS

[22:32] <geekosaur> ob https://xkcd.com/1361/

[22:33] <viki> heh

[22:33] <TimToady> yeah, 8.8.8.8 works better, thanks

[22:33] <notostraca> TimToady: AT&T U-Verse service was having some bizarre maintenance they were doing in my area. half of all websites were non-load-able

[22:33] <TimToady> I even knew that...

[22:33] *** labster left
[22:34] <TimToady> well, I'm in Puerto Vallarta at the moment...

[22:34] <notostraca> also, 4.2.2.1 through 4.2.2.6 are Level3's public DNS servers

[22:34] <TimToady> so could just be hotel's DNS is overwhelmed, as often happens when a bunch of computer geeks descend on an unsuspecting hotel

[22:34] <notostraca> :)

[22:35] *** firstdayonthejob left
[22:35] <geekosaur> most of them are pretty craptacular, yeh

[22:37] <japhb> From the PDF El_Che posted: "Four coefficients are associated with

[22:37] <japhb> past languages: Bash (+$6,322), Clojure

[22:37] <japhb> (+$12,549), Objective-C (–$3,869) and

[22:37] <japhb> Perl 6 (+$14,743)."

[22:38] <japhb> So if Perl 6 is a *past* language for you, you make $15K a year more?

[22:38] <japhb> Maybe because you own a time machine?

[22:38] <viki> :D

[22:38] <El_Che> they meant perl5 probably

[22:39] *** pierre_ joined
[22:39] <viki> I stand by my original statement. They're just generating customers for upcoming books.

[22:43] *** pierre_ left
[22:45] <TimToady> seatek: note that when you use a pattern like /a ** 1..10.Int/ it really means /a ** 1..10 . 'Int'/

[22:45] <TimToady> those are not general expressions

[22:45] <TimToady> that's why we require {} for anything fancier than an integer range

[22:46] *** labster joined
[22:48] <seatek> TimToady: ok that makes sense. Yeah, in playing with that, it "felt" like ranges were their own object -- one thing, rather than 2 things working on a defined operation

[22:49] <TimToady> we had to draw the line somewhere, and that seemed like a reasonable place :)

[22:50] <TimToady> basically, we wanted a direct translation for p5's {1,3} notation, but nothing fancier (without {})

[22:50] *** kurahaupo left
[22:51] *** cdg left
[22:51] <seatek> yeah there must have been tons of decisions like that. and what trips you up in one place, makes another place seem like perfect sense.

[22:52] <TimToady> it's tradeoffs, all the way down, when it isn't turtles

[22:52] <seatek> :)

[22:56] <seatek> so far I've been loving exploring it. I've been translating stuff from p5 into it, and doing a couple new little things, to start becoming familiar.

[22:58] <seatek> there have been a few quirks. and i think it's probably just as hard a call to determine what is a quirk that needs to be fixed to behave how people might expect it to, vs that's just a quirk of the language that people will have to learn in order to cope

[22:59] <TimToady> most of those we've run into already, and decided one way or another, but occasionally someone finds a new one :)

[23:00] <seatek> that's what i've been trusting in to control my rage ;)

[23:01] <TimToady> it's okay to ragequit as long as you come back later :)

[23:02] *** lostinfog joined
[23:02] <seatek> naw the good BY FAR outweighs irritations with little quirks here and there

[23:02] *** lostinfog left
[23:02] <seatek> at least so far. i haven't done any long-running rewrites of things yet ;)

[23:04] <TimToady> well, looks like things are going all social here, so I'd better sign off for now

[23:04] <TimToady> not to mention battery life...

[23:04] <TimToady> afk &

[23:04] <timotimo> o/

[23:04] <seatek> bye bye

[23:09] *** cdg joined
[23:11] *** Jesmaybe left
[23:12] *** bjz left
[23:12] *** espadrine left
[23:14] *** dolmen_ left
[23:23] *** kjs_ left
[23:26] *** BenGoldberg joined
[23:29] *** kaare_ left
[23:30] *** kaare_ joined
[23:33] <BenGoldberg> m: dd 1..0

[23:33] <camelia> rakudo-moar 627a77: OUTPUT«1..0␤»

[23:33] <BenGoldberg> m: dd 0..1

[23:33] <camelia> rakudo-moar 627a77: OUTPUT«0..1␤»

[23:33] <BenGoldberg> m: 0..1.say

[23:33] <camelia> rakudo-moar 627a77: OUTPUT«WARNINGS for <tmp>:␤Useless use of ".." in expression "0..1.say" in sink context (line 1)␤1␤»

[23:33] <BenGoldberg> m: (0..1).say

[23:33] <camelia> rakudo-moar 627a77: OUTPUT«0..1␤»

[23:33] <BenGoldberg> m: (0..1).perl.say

[23:33] <camelia> rakudo-moar 627a77: OUTPUT«0..1␤»

[23:33] <BenGoldberg> m: (0..1).gist.say

[23:33] <camelia> rakudo-moar 627a77: OUTPUT«0..1␤»

[23:33] <BenGoldberg> m: (0..1).WHAT.say

[23:33] <camelia> rakudo-moar 627a77: OUTPUT«(Range)␤»

[23:33] <BenGoldberg> m: (0..1).WHY.say

[23:33] <camelia> rakudo-moar 627a77: OUTPUT«(Any)␤»

[23:34] <BenGoldberg> m: (1..0).WHAT.say

[23:34] <camelia> rakudo-moar 627a77: OUTPUT«(Range)␤»

[23:34] <BenGoldberg> m: (1..0).[&+].say

[23:34] <camelia> rakudo-moar 627a77: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3(1..0).[&+7⏏5].say␤    expecting any of:␤        prefix␤        term␤»

[23:34] <timotimo> m: say (5..7.say)

[23:34] <camelia> rakudo-moar 627a77: OUTPUT«7␤5..Bool::True␤»

[23:34] <timotimo> :P

[23:34] <timotimo> it gives you the return value of "say" as the end point of the range

[23:34] <timotimo> when you do 0..1.say

[23:35] <BenGoldberg> m: say( 7..5 );

[23:35] <camelia> rakudo-moar 627a77: OUTPUT«7..5␤»

[23:35] <BenGoldberg> m: ( 7..5 ).WHAT.say;

[23:35] <camelia> rakudo-moar 627a77: OUTPUT«(Range)␤»

[23:35] <BenGoldberg> m: ( 7..5 ).elems.say;

[23:35] <camelia> rakudo-moar 627a77: OUTPUT«0␤»

[23:35] <BenGoldberg> m: ( 7...5 ).elems.say;

[23:35] <camelia> rakudo-moar 627a77: OUTPUT«3␤»

[23:36] <BenGoldberg> m: ( 7...5 ).say;

[23:36] <camelia> rakudo-moar 627a77: OUTPUT«(7 6 5)␤»

[23:36] <BenGoldberg> m: ( 7...5 ).WHAT.say;

[23:36] <camelia> rakudo-moar 627a77: OUTPUT«(Seq)␤»

[23:36] <BenGoldberg> m: ( 5...7 ).WHAT.say;

[23:36] <camelia> rakudo-moar 627a77: OUTPUT«(Seq)␤»

[23:37] <BenGoldberg> m: ( 5...7 ).dd.say;

[23:37] <camelia> rakudo-moar 627a77: OUTPUT«No such method 'dd' for invocant of type 'Seq'␤  in block <unit> at <tmp> line 1␤␤»

[23:39] <timotimo> do we have anything that has a dd method?

[23:39] *** canopus_ joined
[23:40] *** wamba joined
[23:40] *** canopus left
[23:43] *** kurahaupo__ joined
[23:44] <dalek> doc: 86f110c | (Francis Grizzly Smit)++ | doc/Language/operators.pod6:

[23:44] <dalek> doc: fixed >= doc to say greater than or equal instead of less than

[23:44] <dalek> doc: review: https://github.com/perl6/doc/commit/86f110c2e9

[23:51] *** kurahaupo__ left
[23:52] *** Sgeo joined
[23:52] *** cdg left
[23:57] *** bjz joined
