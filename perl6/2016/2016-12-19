[00:07] <AlexDaniel> samcv: oh, and we will also get proper highlighting? Hooray!

[00:07] <samcv> i'm trying to get their command line program to work but it's not doing anything

[00:08] <samcv> well maybe i'll have better luck using code instead of the bin

[00:10] *** syko joined
[00:10] <syko> hello

[00:11] *** syko is now known as Guest41663

[00:11] <SmokeMachine> hi

[00:12] <Guest41663> is perl still relevant?

[00:12] <samcv> oh nice i got it to work

[00:12] <samcv> AlexDaniel, :)

[00:12] <samcv> will require node instead of pygments but that shouldn't be too hard..

[00:12] <samcv> i just need to figure out how to automate it or something i guess

[00:13] <samcv> to make some node package that will do the actual work and get all the dependencies

[00:13] *** Guest41663 left
[00:14] *** scm joined
[00:14] <AlexDaniel> Guest41663: You're not even wrong. Perl¬†6 was released less than a year ago, how can't it be ‚Äústill relevant‚Äù if it is so new?

[00:14] <AlexDaniel> ah he quit

[00:14] <AlexDaniel> ok bye

[00:17] *** wamba left
[00:19] *** lucasb left
[00:21] <geekosaur> trolls aren't worth the effort anyway

[00:26] *** BenGoldberg left
[00:30] *** yubimusubi joined
[00:32] *** pyrimidine left
[00:33] *** pyrimidine joined
[00:33] *** labster left
[00:33] *** labster joined
[00:34] *** Possum left
[00:39] *** pyrimidine left
[00:39] *** lichtkind_ joined
[00:40] *** dataf3l joined
[00:42] *** dataf3l left
[00:43] *** lichtkind left
[00:45] *** scm left
[00:47] *** pyrimidine joined
[00:48] <samcv> dope AlexDaniel i now have something that when run, will highlight all the files in a specified folder

[00:48] <samcv> now gonna try like. actually opening it in browser

[00:49] <AlexDaniel> geekosaur: how can you tell if someone is a troll or is just slightly stupid?

[00:50] <samcv> AlexDaniel, what we can do is basically use any Atom theme for our CSS or whatever

[00:51] <AlexDaniel> samcv: sure, if there is one with compatible license

[00:51] <samcv> what do they have to be? is MIT ok?

[00:52] *** dataf3l joined
[00:54] *** dataf3l left
[00:55] <AlexDaniel> I guess so, but I have no idea actually :)

[00:57] *** gombloddo joined
[00:57] *** dataf3l joined
[00:57] <gombloddo> Guest41663: nah, everybody uses python ;)

[00:58] *** gombloddo is now known as gombloddho

[01:00] *** dataf3l left
[01:00] *** gombloddho left
[01:01] *** _28_ria left
[01:03] *** _28_ria joined
[01:03] <samcv> well i got it working AlexDaniel 

[01:04] *** _28_ria left
[01:05] <AlexDaniel> samcv: is it faster? Is highlighting better?

[01:05] <samcv> idk probably faster otherwise github wouldn't do it

[01:05] <samcv> hold on

[01:05] *** _28_ria joined
[01:05] *** aborazmeh joined
[01:05] *** aborazmeh left
[01:05] *** aborazmeh joined
[01:06] <samcv> ok 21 seconds to highlight all the *.pm files in rakudo/src/core

[01:07] <samcv> that's 143 files

[01:07] <samcv> antd 40,000 lines

[01:08] <AlexDaniel> and pygmentize?

[01:08] <samcv> checking

[01:09] <AlexDaniel> samcv: please note that there are two ways one can build docs with pygmentize

[01:09] <samcv> yep

[01:09] <AlexDaniel> ah ok, you know

[01:10] <samcv> what's nice with using highlights, is we can define what color we want each thing to be

[01:10] <samcv> like variables etc etc

[01:10] <samcv> make our own theme with a distinction that may not be made for a standard atom theme. perl 6 specific

[01:11] <samcv> since all the things are tagged with what they are

[01:11] <samcv> what type of thing they are etc

[01:11] <samcv> ok a lot longer than 20 seconds

[01:11] <samcv> it's still going (this is calling pygmentize each time)

[01:11] <AlexDaniel> ya‚Ä¶ okay. Yea, I have been using pygmentize for some other stuff and I too noticed that it is a bit slow

[01:12] <samcv> yeah

[01:12] <samcv> even if inline python is 2x faster

[01:12] <samcv> we're gonna get like an 8x speed boost

[01:12] <samcv> at least

[01:12] <samcv> idk it's still going

[01:12] <AlexDaniel> samcv: great. PR?

[01:12] <samcv> hah

[01:12] <samcv> ok took 180 seconds

[01:12] *** dataf3l joined
[01:12] <samcv> vs 20

[01:13] <samcv> *22

[01:13] <AlexDaniel> this sounds like a great change, in all ways

[01:13] <samcv> yeah

[01:15] *** sufrostico joined
[01:16] <samcv> do we highlight all at once?

[01:16] <samcv> or per file

[01:16] <AlexDaniel> ?

[01:16] <samcv> i mean the coffescript file i have, it basically finds all the files in a directory, highlights them and outputs to stdout

[01:17] <AlexDaniel> ü§∑

[01:18] <samcv> it looks like it calls highlight-code-blocks only once hm

[01:18] <samcv> but i could be wrong

[01:19] <MasterDuke> samcv: so highlights uses (can use?) the atom highlighting rules you've been working on?

[01:19] <samcv> yes

[01:19] <MasterDuke> cool

[01:19] <samcv> and we could potentially have our own custom style that could tag different types of syntax properly

[01:20] <samcv> i don't have it integrated with the doc builder atm. but i have it creating html from all the files inside a folder

[01:20] *** rindolf left
[01:21] <samcv> and it's 9x faster than using the pygmentize command

[01:23] <samcv> who is the best person to talk to about htmlify.p6?

[01:25] <MasterDuke> not sure. look at it's history and see who has made a lot of commits recently?

[01:27] <samcv> yeah. would be cool if it could just put all the code needing to be highlighted in some folder, i get my coffeescript thing to basically highlight all files in there and put them into some other named file

[01:27] <samcv> and then it can just do that

[01:28] <samcv> maybe eventually could make it threaded

[01:28] <samcv> and do the threading in node

[01:28] * samcv barely knows how to code in coffeescript/javascript

[01:28] <samcv> but i've been making it work‚Ä¶ haha

[01:29] <timotimo> you could serialize all the content to json - or use some other way to clearly mark where one thing starts and another ends

[01:29] <timotimo> then htmlize could just feed a whole lot of content into your script and your script could feed stuff back in the right order

[01:29] <timotimo> or your script offers a service via HTTP and htmlize makes HTTP requests :)

[01:29] <samcv> that would be cool

[01:29] <timotimo> IPC is a solved problem, which is why there are about a million different ways to do it and they all suck in some way or another

[01:30] <samcv> haha

[01:30] <MasterDuke> that's the good thing about standards...

[01:32] <samcv> well here is all the files in rakudo/src/core highlighted https://cry.nu/files/new.html

[01:32] <samcv> or at least some of them

[01:32] <samcv> oh hey it's still coping to server

[01:32] <samcv> no wonder it didn't all load hah

[01:32] <samcv> ok shouldn't have done this it's many MB big

[01:33] <timotimo> oh, my browser is quite ... happy about this big file

[01:33] <samcv> but go aheda and take a look and see how at least this theme looks

[01:33] <samcv> haha

[01:33] <timotimo> for our docs it'd be interesting to have the same background color too

[01:33] <samcv> background?

[01:33] <timotimo> wait a sec

[01:34] <timotimo> when we're talking about htmlify, i thought you meant docs.perl6.org? code blocks there have a background color

[01:34] <timotimo> #F5F2F0 if i hit the right element

[01:34] *** BenGoldberg joined
[01:34] <samcv> i mean the docs i guess

[01:35] <timotimo> it still looks good

[01:35] <timotimo> i was worried the comments might be problematic, but the contrast is still good enough for me

[01:35] <samcv> yeah. i mean it's not that great. the css is really basic

[01:35] <samcv> ah

[01:35] <timotimo> no clue about other people, though i suppose people with color-blindness or need for high contrast will have some kind of override in place through their accessibility tools

[01:35] <samcv> but since the syntax are all tagged with what they are, like strings or interpolated strings or whatever. we can get it exactly how we want i guess

[01:36] <samcv> i don't like the method color here. hm

[01:36] <samcv> lemme try the theme in atom i use

[01:37] <timotimo> i'm way late for bed. bye for now!

[01:38] <samcv> ok updated the css

[01:39] *** pyrimidi_ joined
[01:39] *** pyrimidine left
[01:39] <timotimo> um ...

[01:40] <timotimo> this looks like it wants to be on a dark background

[01:40] <samcv> probably

[01:41] <samcv> hmm moritz looks like he has done a lot of things on the pygmentize section

[01:43] <timotimo> o/

[01:43] <MasterDuke> samcv: some of the unicode symbols don't seem to be making it through, e.g., src/core/Version:163: multi sub infix:√Ç¬´<=>√Ç¬ª(Version:D \a, Version:D \b) { a cmp b }

[01:44] <timotimo> webserver most probably defaults to latin1

[01:44] <samcv> yeah probably

[01:44] <timotimo> a <meta equiv="content-type something something"> should do it i think?

[01:44] <timotimo> why am i still on the 'puter

[01:46] <MasterDuke> timotimo: 'cause you're dying to merge my rakudo PR?

[01:48] <samcv> .seen moritz 

[01:48] <yoleaux> I saw moritz 18 Dec 2016 21:46Z in #perl6: <moritz> just /bin/sleep or p6 scripts

[01:48] <samcv> wait but how long ago is that :\

[01:48] <samcv> like 5 hours ago?

[01:53] *** lichtkind_ left
[01:55] <geekosaur> y

[01:55] <MasterDuke> 4

[01:56] * geekosaur can't modulus tonight apparently, sigh

[01:57] *** cdg joined
[02:05] *** ufobat left
[02:10] *** sufrostico left
[02:11] *** dataf3l left
[02:13] *** _28_ria left
[02:14] *** _28_ria joined
[02:22] *** espadrine left
[02:26] *** pyrimidine joined
[02:26] *** pyrimidi_ left
[02:35] *** dataf3l joined
[02:36] *** AlexDaniel left
[02:40] *** imcsk8 left
[02:40] *** imcsk8 joined
[02:45] *** ilbot3 left
[02:47] *** ilbot3 joined
[02:54] *** kalkin- joined
[02:57] *** kalkin-_ left
[03:02] *** noganex joined
[03:04] *** mad__ joined
[03:04] <samcv> oh crap

[03:04] <samcv> i think i got it working

[03:04] <samcv> with docs

[03:04] *** xtreak joined
[03:05] <samcv> how did i do this

[03:05] <samcv> well it looks like it's working anyway :P will wait for doc build to finish and then prolly make a PR once it doesn't suck or something. i still need to automate grabbing highlights and dependencies (it builds onigumura regex engine and other dependencies) when you run it

[03:06] *** noganex_ left
[03:06] <samcv> mostly will just need `npm` and then also grab the atom perl6 grammar

[03:07] *** aborazmeh left
[03:07] *** cooper_ left
[03:08] *** cyphase left
[03:08] *** cyphase joined
[03:09] <samcv> and it's kind of inefficient calling it every single time though‚Ä¶

[03:09] <samcv> brb

[03:14] *** cdg left
[03:16] *** raiph left
[03:16] *** raiph joined
[03:18] *** SHODAN left
[03:19] *** SHODAN joined
[03:23] <samcv> well not quite working right that way, but could just pass the filenames to the script that is working and do it that way

[03:28] *** diegok left
[03:29] *** diego_k joined
[03:30] *** dustinm` joined
[03:32] *** Actualeyes joined
[03:45] *** cdg joined
[03:49] *** cibs left
[03:50] *** cibs joined
[03:50] *** pisa joined
[04:00] *** BenGoldberg left
[04:00] <pisa> hi, everyone, i have a question on  controlflow forÔºé

[04:01] <pisa> here are my test on for statement, two test file ,  for_default_var.pl  and for_default_var_hide.pl :

[04:01] <pisa> first test,  for_default_var.pl:   use v6; for 'test.txt'.IO.lines  {     say $_; };

[04:01] *** BenGoldberg joined
[04:01] <pisa> second test , for_default_var_hide.pl :  use v6; for 'test.txt'.IO.lines -> $line {     say $_; };

[04:01] <pisa> and the file test.txt's contents are:  test.txt:    test line 1 test line 2 test line 3

[04:02] <pisa> i think , the two programes are produce the same result

[04:02] <pisa> but the test are different

[04:02] <TimToady> they shouldn't

[04:02] <TimToady> if you bind to -> $line, it won't set $_

[04:03] <TimToady> that is, if you leave out -> $line, it implies -> $_

[04:05] <pisa> thanks, i need read the perl6 documention  more carefully

[04:14] *** dalek left
[04:15] *** dalek joined
[04:15] *** ChanServ sets mode: +v dalek

[04:23] *** stmuk_ joined
[04:24] *** stmuk left
[04:28] *** labster left
[04:33] *** cdg_ joined
[04:33] *** pisa left
[04:34] *** aborazmeh joined
[04:34] *** aborazmeh left
[04:34] *** aborazmeh joined
[04:34] *** cdg left
[04:41] <samcv> ok _now_ i got it working properly :)

[04:42] <samcv> i think i should hopefully just need to add in the css and add some stuff to the makefile to initialize the highlights package

[04:42] <samcv> hopefully --sparse=10 won't take too long

[04:52] *** labster joined
[05:09] *** cognominal left
[05:15] *** khw left
[05:24] *** CIAvash joined
[05:30] *** labster left
[05:32] *** BenGoldberg left
[05:32] *** BenGoldberg joined
[05:32] *** Actualeyes left
[05:33] *** mr-foobar joined
[05:40] *** Cabanossi left
[05:40] *** BenGoldberg left
[05:41] *** skids left
[05:43] *** Cabanossi joined
[05:43] *** BenGoldberg joined
[05:52] *** cognominal joined
[05:59] *** Khisanth left
[06:12] *** Khisanth joined
[06:19] *** aborazmeh left
[06:21] <samcv> ok i succeeded! this is really fast

[06:21] <samcv> sending highlights the filenames to process on stdin, then it returns a single line of html

[06:22] <samcv> moar's cpu usage is like 10x what highlights is while processing them

[06:22] <samcv> so doesn't seem to be bound by the highlighter

[06:24] *** dataf3l left
[06:26] <samcv> maybe 10x faster‚Ä¶

[06:32] *** ufobat joined
[06:33] *** rburkholder joined
[06:34] *** cibs left
[06:36] *** cibs joined
[06:38] <samcv> i'm doing a clean build now and going to see how long it takes

[06:38] <samcv> it's reading the files super fast though... they're just like scrolling fast on the screen (i'm having it print to stderr each file the node program receives)

[06:42] *** darutoko joined
[06:44] *** sydney_falk joined
[06:46] <samcv> wow did a full build in 16.5 minutes on my old x220 laptop

[06:49] *** RabidGravy joined
[06:49] <samcv> it used to take hours for me...

[06:49] <samcv> with inline python even

[06:56] *** salva0 joined
[06:59] *** bjz joined
[07:00] *** salva left
[07:05] <samcv> OMG IT WORKS

[07:05] <samcv> heh got the stylesheet in there

[07:08] <dalek> doc/highlights: 8423f47 | samcv++ | doc/Language/operators.pod6:

[07:08] <dalek> doc/highlights: Add an X< > for ‚âÖ

[07:08] <dalek> doc/highlights: review: https://github.com/perl6/doc/commit/8423f47a1b

[07:08] <dalek> doc/highlights: 3e36b58 | samcv++ | h (2 files):

[07:08] <dalek> doc/highlights: Commit WIP to use highlights instead of pygmentize

[07:08] <dalek> doc/highlights: review: https://github.com/perl6/doc/commit/3e36b58662

[07:08] <dalek> doc/highlights: 67a1505 | samcv++ | / (7 files):

[07:08] <dalek> doc/highlights: Commit a now working version using highlights

[07:08] <dalek> doc/highlights: review: https://github.com/perl6/doc/commit/67a15052ab

[07:09] *** xtreak left
[07:10] *** Ben_Goldberg joined
[07:10] *** BenGoldberg left
[07:11] *** Ben_Goldberg is now known as BenGoldberg

[07:12] <samcv> hopefully people will start waking up by now :)

[07:13] *** xtreak joined
[07:14] *** cdg_ left
[07:15] <RabidGravy> well my body is moving around

[07:15] *** cdg joined
[07:15] *** cdg left
[07:15] <samcv> RabidGravy, how long do the builds usually take you? i remember it being hours for me. like just let it go overnight or something

[07:15] *** cdg joined
[07:16] *** effbiai joined
[07:16] *** salva0 left
[07:16] *** bjz left
[07:17] <RabidGravy> of rakudo?  about twenty minutes on this computer

[07:17] <samcv> no i mean the docs

[07:17] <RabidGravy> oh I don't remember hardly ever build the docs

[07:17] <samcv> yeah cause it takes like 9000 years

[07:17] *** salva0 joined
[07:20] *** BenGoldberg left
[07:21] <dalek> doc/highlights: 9a07a2d | samcv++ | highlights/highlight-filename-from-stdin.coffee:

[07:21] <dalek> doc/highlights: Remove split which isn't in the node package dependencies

[07:21] <dalek> doc/highlights: review: https://github.com/perl6/doc/commit/9a07a2d407

[07:22] *** pierre_ joined
[07:22] *** pierre_ left
[07:22] *** pierre_ joined
[07:23] <RabidGravy> right, off to the code mines. Hi Ho!

[07:23] <samcv> have fun

[07:26] *** pyrimidine left
[07:28] *** travis-ci joined
[07:28] <travis-ci> Doc build passed. Samantha McVey 'Commit a now working version using highlights'

[07:28] <travis-ci> https://travis-ci.org/perl6/doc/builds/185073006 https://github.com/perl6/doc/compare/8423f47a1bc2^...67a15052abbd

[07:28] *** travis-ci left
[07:28] *** bjz joined
[07:29] <samcv> well it doesn't default to the new highlighting but. maybe i should make travis do that

[07:31] *** wamba joined
[07:32] <samcv> oh if anybody doesn't want to build it... Here i put the /language directory on my server https://cry.nu/language/grammar_tutorial.html

[07:35] *** labster joined
[07:36] <dalek> doc/highlights: f098bb0 | samcv++ | .travis.yml:

[07:36] <dalek> doc/highlights: Have travis build the highlights

[07:36] <dalek> doc/highlights: review: https://github.com/perl6/doc/commit/f098bb073a

[07:38] <arnsholt> samcv: Looks like a good tutorial!

[07:38] <samcv> i didn't write it tho

[07:39] <arnsholt> Haha, I've never seen it before so I thought it was new =D

[07:39] <samcv> but it was generated with `highlights¬¥ which is what atom and github use to highlight stuff

[07:39] <arnsholt> Sorry =)

[07:39] <samcv> np

[07:39] <samcv> builds all the docs in 15 minutes on my x220 laptop

[07:39] <arnsholt> In that case, it looks very neat too!

[07:39] <samcv> with highlighting. it's awesome. i just got it working like 30 mins ago

[07:39] <samcv> and the css styling is based on actual syntax features, so we can easily tweak it to highlight different types of things differently

[07:40] <arnsholt> And it does highlight one of the things I thought about the tutorial, namely that the ".. methods 'n stuff.." should be a comment, because it highlights badly (being bad code, and all)

[07:40] <arnsholt> Oooh, that sounds pretty nice!

[07:40] <samcv> yeah

[07:41] <samcv> if you don't know i've been working a ton on the atom/github highlighter. soonish github should pull in the changes i've made in the last month

[07:41] <samcv> but they're been enormous

[07:41] <samcv> changelog is really long :)

[07:41] *** travis-ci joined
[07:42] <travis-ci> Doc build passed. Samantha McVey 'Remove split which isn't in the node package dependencies'

[07:42] <travis-ci> https://travis-ci.org/perl6/doc/builds/185074632 https://github.com/perl6/doc/compare/67a15052abbd...9a07a2d407c9

[07:42] *** travis-ci left
[07:43] <samcv> arnsholt, it uses ruby's regex engine onigumura so it's easily like 10x+ faster at highlighting than pygments

[07:43] <samcv> plus the highlighter is now a perl6org project ;) so that is a plus too

[07:45] *** pyrimidine joined
[07:45] <arnsholt> Indeed

[07:46] <arnsholt> samcv++

[07:46] <arnsholt> Given the raft of PR mails I've seen in my inbox with your name on 'em, you've earned more than a few karma points, I think =)

[07:49] <samcv> =)

[07:49] *** pyrimidine left
[07:53] *** travis-ci joined
[07:53] <travis-ci> Doc build failed. Samantha McVey 'Have travis build the highlights'

[07:53] <travis-ci> https://travis-ci.org/perl6/doc/builds/185076494 https://github.com/perl6/doc/compare/9a07a2d407c9...f098bb073a0e

[07:53] *** travis-ci left
[07:54] <samcv> hmm i think it succeeded but it said broken pipe

[07:55] *** domidumont joined
[07:58] *** pyrimidine joined
[07:59] *** domidumont left
[08:00] <samcv> maybe because their node version is 0.10 and mine is 7

[08:00] *** domidumont joined
[08:00] <samcv> how...

[08:03] *** pyrimidine left
[08:06] <dalek> doc/highlights: ea24a55 | samcv++ | .travis.yml:

[08:06] <dalek> doc/highlights: Try to get a newer version of node installed.

[08:06] <dalek> doc/highlights: review: https://github.com/perl6/doc/commit/ea24a55755

[08:08] *** Actualeyes joined
[08:10] <moritz> man, nodejs is like cancer; you just can't seem to avoid it when projects get older

[08:11] <samcv> heh

[08:11] <samcv> what do you mean about projects getting older though?

[08:11] *** travis-ci joined
[08:11] <travis-ci> Doc build failed. Samantha McVey 'Have travis build the highlights'

[08:11] <travis-ci> https://travis-ci.org/perl6/doc/builds/185076494 https://github.com/perl6/doc/compare/9a07a2d407c9...f098bb073a0e

[08:11] *** travis-ci left
[08:12] <samcv> i think it's actually building fine. but i get a pipe error at the end of the build probably from rakudo killing node

[08:12] <samcv> but it's node 0.2

[08:12] <samcv> i really don't know wtf github is doing with travis ci

[08:13] <samcv> why can't i have software newer than like released in 2011

[08:13] <moritz> samcv: well, perl6/doc is a few years in the making by now

[08:13] <samcv> oh i see

[08:14] <samcv> well that's what github decided to use for first-mate/highlights so :/ at least it's really fast

[08:15] <samcv> prolly cause it uses onigumura regex engine that ruby uses and not like. pythons or something idk. maybe pygments is just slow and complex

[08:18] <moritz> or maybe they simply follow the fastest-growing community

[08:18] <samcv> i think it was mostly because they wanted a text editor, and wanted to share code between atom and github i suspect

[08:19] <samcv> they basically created the node oniguruma regex engine package themself and first-mate to parse the grammars and then use that node package. idk

[08:19] <samcv> probably was the easiest way to make a text editor not sure

[08:19] <samcv> i always thought node was just really weird

[08:20] <samcv> i'm not sure why it took off

[08:20] *** pyrimidine joined
[08:20] *** travis-ci joined
[08:20] <travis-ci> Doc build failed. Samantha McVey 'Try to get a newer version of node installed.'

[08:20] <travis-ci> https://travis-ci.org/perl6/doc/builds/185081867 https://github.com/perl6/doc/compare/f098bb073a0e...ea24a55755d6

[08:20] *** travis-ci left
[08:21] <moritz> I kinda understand the apeal of using the same language for backend and frontend

[08:21] <samcv> oh well it's using a newer node. but still getting broken pipe

[08:22] <moritz> and also the appeal of starting from a clean slate, without the baggage of years of best pratcises, having to worry about backwards compat and all that

[08:22] <moritz> on the other hand, I don't like JS all that much :-)

[08:22] <samcv> clean slate? i mean. it's javascript on google's V8 engine

[08:23] <samcv> sounds like baggage galore

[08:23] <samcv> though i guess it's nice they basically develop the the engine for free...

[08:24] *** pyrimidine left
[08:26] <samcv> and node has god aweful error messages too

[08:26] <samcv> really bad

[08:28] <samcv> even microsoft's visual studio code is based on Electron which is just chromium+node for desktop apps

[08:29] *** xtreak left
[08:31] *** pyrimidine joined
[08:31] *** xtreak joined
[08:33] *** CIAvash left
[08:36] *** pyrimidine left
[08:39] *** pyrimidine joined
[08:39] <samcv> but i guess we can embrace it since we can run nqp on node now too ;P

[08:46] *** pyrimidine left
[08:48] *** cyphase left
[08:51] *** g4 joined
[08:51] *** g4 left
[08:51] *** g4 joined
[08:53] *** cyphase joined
[08:55] *** xtreak left
[08:56] *** Vynce joined
[08:56] *** xtreak joined
[09:01] *** cdg left
[09:02] *** cdg joined
[09:03] *** jonas2 joined
[09:03] *** pyrimidine joined
[09:05] <samcv> goddamit my moar is broken. and i have no clue why. i tried installing again a ton of times

[09:05] <samcv> perl Configure.pl --prefix="$HOME/perl6"

[09:05] <samcv> then running make then make install, and i keep getting errors it can't find moar.so

[09:07] *** pyrimidine left
[09:08] *** dakkar joined
[09:10] *** cdg left
[09:12] *** thayne joined
[09:13] *** pyrimidine joined
[09:15] *** abraxxa joined
[09:18] *** pyrimidine left
[09:23] *** abraxxa left
[09:23] *** pyrimidine joined
[09:23] *** abraxxa joined
[09:27] *** pyrimidine left
[09:30] <samcv> oh i got it fixed. was a recent commit to moar which has now been reverted

[09:33] *** rburkholder left
[09:33] *** Vynce left
[09:35] <lizmat> sometimes it's good I have a MoarVM commit bit  :-)

[09:36] *** rindolf joined
[09:43] *** pyrimidine joined
[09:48] *** pyrimidine left
[09:52] *** bjz_ joined
[09:53] *** bjz left
[10:02] *** lucasb joined
[10:03] *** TEttinger left
[10:05] *** pyrimidine joined
[10:09] *** cognominal left
[10:10] *** labster left
[10:10] *** pyrimidine left
[10:32] *** greeny___ joined
[10:35] *** xtreak left
[10:37] *** xtreak joined
[10:42] <samcv> :)

[10:43] * samcv waves

[10:43] <timotimo> o/

[10:47] *** pierre_ left
[10:47] *** bjz_ left
[10:47] *** pierre_ joined
[10:47] * lizmat waves back at samcv 

[10:47] *** bjz joined
[10:49] *** AlexDaniel joined
[10:49] *** pyrimidine joined
[10:49] <AlexDaniel> samcv: ‚Äúold x220 laptop‚Äù ha

[10:49] <AlexDaniel> I'm still using x200

[10:50] <samcv> well. old relatively. i had an x200 before this one :)

[10:50] <timotimo> i had an x220s before getting my current t440s

[10:50] <samcv> idk this laptop must be like 5 years ago old

[10:51] <AlexDaniel> and x200 is *slooowly* approaching a 10 years mark :)

[10:52] <samcv> isn't it like 8 year old now

[10:52] *** brrt joined
[10:53] *** greeny___ left
[10:54] *** pyrimidine left
[10:56] *** zakharyas joined
[10:56] *** pierre_ left
[11:02] *** wamba left
[11:10] *** dayangkun joined
[11:10] *** dayangkun left
[11:13] *** zakharyas left
[11:14] *** pyrimidine joined
[11:17] *** ssm joined
[11:18] *** pyrimidine left
[11:24] *** espadrine joined
[11:28] *** abruanese joined
[11:36] *** lizmat left
[11:37] <samcv> AlexDaniel, i made a PR for JSON::Fast for at least the null byte

[11:37] *** araujo left
[11:37] <samcv> since that's the main character that will be a problem, less likely the other control characters that are technically not allowed, but implementations may let them be used anyway

[11:37] <AlexDaniel> yaaay

[11:37] *** lizmat joined
[11:38] *** pyrimidine joined
[11:38] *** araujo joined
[11:42] *** pyrimidine left
[11:44] *** cognominal joined
[11:45] <samcv> i'm headed off to bed now. night *.all

[11:47] <lizmat> gnight samcv 

[11:49] * DrForr finally can type w/o lagging to hell and back.

[11:49] <yoleaux> 10 Dec 2016 12:11Z <moritz> DrForr: we've switched your advent post with titsuki's, so now you have until the 11th to write/publish yours

[11:50] <DrForr> I hope that was from before I had to explain my ... bandwidth limitations :)

[11:51] <moritz> yes, we managed

[11:53] <DrForr> Yeah, I saw. I was dealing with barely 3G over a cell tower located at the bleeding *edge* of reception range.

[11:56] *** xtreak left
[11:58] *** pyrimidine joined
[11:59] *** xtreak joined
[12:01] *** xtreak left
[12:03] *** pyrimidine left
[12:03] *** mad__ left
[12:07] *** teksteiner joined
[12:09] *** wamba joined
[12:11] *** pmurias joined
[12:11] *** lizmat left
[12:14] *** wamba left
[12:23] *** pyrimidine joined
[12:26] *** lizmat joined
[12:28] *** pyrimidine left
[12:34] *** sydney_falk left
[12:36] <tadzik> it's postwriting time \o/

[12:36] <timotimo> oh yeah!

[12:36] <timotimo> i really liked nigel's post

[12:36] <timotimo> i had imagined something just like that in the past

[12:38] <tadzik> oh ermagherd

[12:38] <tadzik> this is great

[12:40] *** sufrostico joined
[12:40] *** sufrostico left
[12:40] *** sufrostico joined
[12:49] *** pierre_ joined
[12:52] *** AlexDaniel left
[13:03] *** ChoHag left
[13:09] *** pyrimidine joined
[13:09] *** Sgeo left
[13:13] *** pyrimidine left
[13:16] *** pyrimidine joined
[13:21] *** pyrimidine left
[13:21] <[Coke]> samcv: faster doc build - definitely use Inline::Python if you're highlighting for a speed boost over exec'ing python

[13:22] * [Coke] sees this was already discussed. whoops

[13:23] *** pyrimidine joined
[13:27] *** pyrimidine left
[13:29] <cognominal> I have a problem apparently with lazyness...

[13:29] <timotimo> me, too

[13:29] <cognominal> for  dir() { .say; indir $_, { print '.'  }} # prints one dot per file

[13:30] <cognominal> for  dir() { indir $_, { print '.'  }}  # prints less dot then previous one 

[13:31] <cognominal> forget the .say in the first snippets.

[13:31] <[Coke]> m: for  dir() { .say; indir $_, { print '.'  }}

[13:31] <camelia> rakudo-moar 9120ac: OUTPUT¬´".cpanm".IO‚ê§.".local".IO‚ê§.".npm".IO‚ê§.".perl6".IO‚ê§.".perlbrew".IO‚ê§.".rcc".IO‚ê§.".ssh".IO‚ê§."Perlito".IO‚ê§."evalbot".IO‚ê§."log".IO‚ê§."nqp-js".IO‚ê§."p1".IO‚ê§."p2".IO‚ê§."perl5".IO‚ê§."std".IO‚ê§.".bash_history".IO‚ê§Failed to change the worki‚Ä¶¬ª

[13:32] <moritz> m: for  dir() { .say; indir $_, { print '.'  } if .d}

[13:32] <camelia> rakudo-moar 9120ac: OUTPUT¬´".cpanm".IO‚ê§.".local".IO‚ê§.".npm".IO‚ê§.".perl6".IO‚ê§.".perlbrew".IO‚ê§.".rcc".IO‚ê§.".ssh".IO‚ê§."Perlito".IO‚ê§."evalbot".IO‚ê§."log".IO‚ê§."nqp-js".IO‚ê§."p1".IO‚ê§."p2".IO‚ê§."perl5".IO‚ê§."std".IO‚ê§.".bash_history".IO‚ê§".bashrc".IO‚ê§"mbox".IO‚Ä¶¬ª

[13:32] <cognominal> that≈õ in a dir containing only dirs, btw

[13:33] <timotimo> indir doesn't check if the thing you pass it is a directory or a file?

[13:33] <cognominal> Apparently it does it in a big dir

[13:34] <moritz> m: indir 'README' { say 42 }

[13:34] <camelia> rakudo-moar 9120ac: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unexpected block in infix position (missing statement control word before the expression?)‚ê§at <tmp>:1‚ê§------> 3indir 'README'7‚èè5 { say 42 }‚ê§    expecting any of:‚ê§        infix‚ê§        infix s‚Ä¶¬ª

[13:34] <moritz> m: indir 'README', { say 42 }

[13:34] <camelia> rakudo-moar 9120ac: OUTPUT¬´Failed to change the working directory to '/home/camelia/README': does not exist‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in any  at gen/moar/Metamodel.nqp line 3072‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:34] <cognominal> ok, may be I have stray files

[13:35] <cognominal> yea that must be it

[13:36] *** ocbtec joined
[13:38] <cognominal> I need a walk, thx moritz++, timotimo 

[13:38] <timotimo> yay

[13:42] *** pyrimidine joined
[13:47] *** pyrimidine left
[13:53] *** bjz left
[13:55] <dalek> doc: dadf22a | (Zoffix Znet)++ | doc/Type/Date.pod6:

[13:55] <dalek> doc: Use better example for Date.new(Instant)

[13:55] <dalek> doc: 

[13:55] <dalek> doc: - it's not obvious that `now` is an Instant

[13:55] <dalek> doc: - some may wonder how to turn a Unix time stamp into Date

[13:55] <synopsebot6> Link: http://doc.perl6.org/type/Date

[13:55] <dalek> doc: review: https://github.com/perl6/doc/commit/dadf22a4f8

[14:00] *** bjz joined
[14:01] *** wtw joined
[14:02] <[Coke]> samcv: the highlights branch is the same as master?

[14:02] <dalek> doc: 13c9820 | (Zoffix Znet)++ | doc/Programs/00-running.pod6:

[14:02] <dalek> doc: Doc RAKUDO_EXCEPTIONS_HANDLER

[14:02] <dalek> doc: review: https://github.com/perl6/doc/commit/13c9820626

[14:04] <tadzik> heh, I create a fresh p6 installation for AdventPosting, the second program I write segfaults %)

[14:05] <[Coke]> uhoh

[14:05] <lizmat> .oO( second program syndrome )

[14:05] <tadzik> and it doesn't reproduce

[14:05] <tadzik> ffs

[14:05] <lizmat> m: m/./

[14:05] <camelia> rakudo-moar 277616: OUTPUT¬´No such method 'match' for invocant of type 'Any'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:05] <lizmat> another one of those...

[14:10] <tadzik> star: https://gist.github.com/anonymous/4396dc96647322f106ed26a92d9f928c

[14:10] <camelia> star-m 2016.10: OUTPUT¬´===SORRY!===‚ê§Could not find HTTP::UserAgent at line 1 in:‚ê§    /home/camelia/.perl6‚ê§    /home/camelia/star-2016.10/share/perl6/site‚ê§    /home/camelia/star-2016.10/share/perl6/vendor‚ê§    /home/camelia/star-2016.10/share/perl6‚ê§    CompUnit::Repository‚Ä¶¬ª

[14:10] <tadzik> ermagherd

[14:10] <tadzik> star: use LWP::Simple

[14:10] <camelia> star-m 2016.10: ( no output )

[14:18] *** dmaestro joined
[14:18] <tadzik> huh, it does't seem like Threads know how to work with IO::Socket::SSL

[14:18] <timotimo> are you sure IO::Socket::SSL is threadsafe at all? :)

[14:18] <tadzik> hmmmm :)

[14:18] <tadzik> I'd hope so!

[14:19] <timotimo> *shrug* ;)

[14:19] <tadzik> the same program that fetches https urls sequentially works fine, but ran with threads it says "Protocol scheme 'https' is only supported if IO::Socket::SSL is installed"

[14:19] <tadzik> which is also what it says if it's not installed

[14:20] <timotimo> might want to load it once before starting threads at all perhaps?

[14:21] <timotimo> it's quite possible that the mechanism to "try to load IO::Socket::SSL and fall back if not available" is the not-threadsafe part

[14:21] <tadzik> that segfaulted... once %)

[14:21] <tadzik> this is my lucky day 

[14:22] <lizmat> tadzik: try fetching one URL before hreading ?

[14:22] <tbrowder> .tell RabidGravy: love yr Advent post AND "JSON::Infer" AND "JSON::Class"

[14:22] <yoleaux> tbrowder: What kind of a name is "RabidGravy:"?!

[14:23] <tbrowder> .tell RabidGravy love yr Advent post AND "JSON::Infer" AND "JSON::Class"

[14:23] <yoleaux> tbrowder: I'll pass your message to RabidGravy.

[14:23] <tadzik> lizmat: yes, that also helps

[14:24] <dalek> specs: bf18470 | (Zoffix Znet)++ | v6d.pod:

[14:24] <dalek> specs: List is_approx in 6.d so we don't forget to toss it

[14:24] <dalek> specs: 

[14:24] <dalek> specs: tis deprecated

[14:24] <dalek> specs: review: https://github.com/perl6/specs/commit/bf1847028d

[14:24] <lizmat> tadzik: feels then that it is lazily initializing and you can't do that threaded ?

[14:24] <timotimo> yeah

[14:25] *** _Vasyl left
[14:25] <tadzik> seems so

[14:25] <tadzik> interestingly! When I do that with HTTP::UserAgent it actually segfaults consistently :)

[14:26] *** _Vasyl joined
[14:26] <tadzik> https://gist.github.com/anonymous/2f050d9904878382556f3718ec5d3bb1

[14:26] <lizmat> afk&

[14:27] *** teke_teke joined
[14:28] <teke_teke> hi

[14:28] <tadzik> hi teke_teke 

[14:28] <[Coke]> hio

[14:28] *** araujo left
[14:29] *** pierre_ left
[14:30] <teke_teke> how can I create a socket equivalent to this in Python: socket.socket(socket.AF_INET, socket.SOCK_STREAM)

[14:30] <teke_teke> is it just: IO::Socket::INET.new(:host, :port);?

[14:30] *** andrzeju_ left
[14:31] <timotimo> https://docs.perl6.org/type/IO$COLON$COLONSocket$COLON$COLONINET - have you tried this page yet?

[14:31] *** cdg joined
[14:32] <teke_teke> timotimo, yes, that's where my code is from.

[14:33] <teke_teke> how about AF_INET and SOCK_STREAM?

[14:34] <timotimo> SOCK_STREAM is implicit in that

[14:34] <timotimo> we do have SOCK_DGRAM (or what it's called), but only an asynchronous version

[14:34] <timotimo> https://docs.perl6.org/routine/udp

[14:35] *** perlpilot joined
[14:35] *** jonas2 left
[14:35] <teke_teke> timotimo, thx

[14:38] *** pyrimidine joined
[14:39] *** pierre_ joined
[14:40] *** brrt left
[14:43] *** marchelzo joined
[14:43] <marchelzo> hi

[14:43] <ufobat> is there a way to state in a gramma that token A is token B except anything that matches token C. something like: token A { <B> - <C> } similar to <[\d] - [13579]> 

[14:43] *** wamba joined
[14:43] <timotimo> you can use & for that, i think

[14:44] <moritz> or maybe a negative look-ahead

[14:44] <moritz> <!C> <B>

[14:44] <marchelzo> how is perl6 coming along these days

[14:44] <marchelzo> is it fast yet

[14:44] <moritz> marchelzo: it's faster than last year

[14:44] <marchelzo> by a lot?

[14:45] <moritz> many things are, not all

[14:45] <ufobat> okay the look ahead approach is clear but what about &? timotimo ?

[14:45] <timotimo> <A> & <-C>

[14:45] <moritz> ufobat: the & means both rules must match the same lenght of text

[14:45] <marchelzo> whats the recommended way to get perl6 on macOS

[14:45] *** nicq20 joined
[14:46] <nicq20> Hello o/

[14:46] *** pyrimidine left
[14:46] <timotimo> we do have perl6 in either macports or homebrew, but i don't remember which one

[14:46] <ufobat> ah i found it in the documentation.. but isnt <A> & <-C> exactpy <A> - <C> ?

[14:46] <marchelzo> hopefully homebrew

[14:46] <timotimo> and of course we have rakudo star installer .dmg files (sometimes?)

[14:46] <timotimo> ufobat: no, - doesn't exist

[14:46] <nicq20> timotimo: Homebrew

[14:46] *** cibs left
[14:46] <moritz> and there's an installer on rakudo.org somewhere, I think

[14:47] <moritz> ufobat: I don't think - even means anything outside of angle brackets

[14:47] <timotimo> rather, - only exists inside < > and maybe other places

[14:47] *** cibs joined
[14:48] <marchelzo> wow

[14:48] <ufobat> ahh.. the operators i've seen belong to the section "unicode properties"

[14:48] <marchelzo> perl6 repl startup time is on part with 'lein repl'

[14:48] <marchelzo> that's an achievement

[14:48] <moritz> http://rakudo.org/downloads/star/ doesn't load for me

[14:48] <pmurias> marchelzo: it's still by far not as fast as we want it to be, but it's steadily being speed up

[14:49] <ufobat> could it be that "our" & is not documented? https://docs.perl6.org/language/regexes

[14:50] *** andrzeju_ joined
[14:50] *** wamba left
[14:51] <moritz> yes

[14:51] <marchelzo> is perl6 going to make it big

[14:52] <marchelzo> how can i get the type of an expression in the repl

[14:53] <[Coke]> m: say (3+2).WHAT

[14:53] <camelia> rakudo-moar bbeec0: OUTPUT¬´(Int)‚ê§¬ª

[14:53] <[Coke]> (you can leave off the say in the REPL)

[14:53] <perlpilot> marchelzo: perl6 has already made it big with us  :-)

[14:53] <ufobat> wouldn't it make sense if operators for categories (+, |, &, -, ^) would also apply to tokens

[14:54] <ufobat> anyway. i'll do the look around approach :)

[14:54] <ufobat> thanks for your help :-)

[14:54] *** colomon joined
[14:54] <colomon> o/

[14:54] *** teke_teke left
[14:55] <nicq20> colomon: \o

[14:55] <marchelzo> what's the difference between Array and Seq

[14:55] <marchelzo> i love perl6

[14:55] *** mr_ron joined
[14:55] <colomon> is brian d foy around?

[14:56] <nicq20> marchelzo: Once you use a value from a Seq, it is gone. They are one-time use.

[14:56] <perlpilot> marchelzo: I think https://docs.perl6.org/language/list talks about the differences between Array, Seq and List

[14:56] <moritz> colomon: doens't look like it

[14:56] <marchelzo> so Seq is a like a stream?

[14:56] <colomon> moritz++

[14:57] <moritz> colomon: hi nickname is bdfoy or something like that when in here (which doesn't happen very often)

[14:57] <marchelzo> can Seqs be lazy, like could i get a Seq from a coroutine that yields a stream of values

[14:57] <marchelzo> perlpilot: checking

[14:57] <moritz> marchelzo: that's exactly the use case of Seq

[14:57] <colomon> moritz: any idea what his e-mail address is?

[14:58] <moritz> colomon: will send in private message

[14:58] <colomon> moritz++

[14:59] <perlpilot> colomon: I've gotten email from him from [email@hidden.address] in the past.

[14:59] <jnthn> marchelzo: A Seq is always lazy

[15:00] <moritz> perlpilot: remember that this channel is logged

[15:00] *** wamba joined
[15:00] <jnthn> See the gather/take construct for something co-routiney

[15:01] *** skids joined
[15:01] <jnthn> (Perl 6 decouples that notion from routines themselves, which means it's possible to easily write recursive things that walk a data structure and take values at any point in the dynamic scope)

[15:01] <jnthn> Well, you could do that with coroutines too I guess, but... :)

[15:02] <jnthn> We just think about it a bit differently :)

[15:02] <jnthn> (Same as `await` is tied to a `start` block and `emit` is tied to a `supply` block rather than them being types of routine)

[15:04] <nicq20> So why can I not use a class var inside of a regex? I get: `Attribute $!url not available inside of a regex, since regexes are methods on Cursor.` Not sure what that really means...

[15:04] *** _Vasyl left
[15:07] <jnthn> nicq20: Regexes are methods (always), meaning that inside of them self always refers to the current Cursor

[15:08] <jnthn> Assign it to a lexical first.

[15:09] <nicq20> jnthn: So p6 will not grab the value of the variable from the current class, but call it from Cursor?

[15:09] <jnthn> Correct

[15:09] <jnthn> Well

[15:09] <nicq20> Does that work for other things?

[15:09] <jnthn> The regexes current class is Cursor

[15:09] <jnthn> Things like <alpha>, <ident>, <before ...> and so forth are all method calls.

[15:10] <[Coke]> anyone have any feedback on https://github.com/perl6/doc/tree/coke/levenshtein ? (now using sift4 instead, and hopefully faster than the last try)

[15:10] <jnthn> What "other things" are you referring to? :)

[15:11] *** pyrimidine joined
[15:11] <dalek> Heuristic branch merge: pushed 41 commits to doc/coke/levenshtein by coke

[15:11] <[Coke]> jnthn: gentle reminder about https://github.com/perl6/doc/blob/coke/bughunt/htmlify.p6 - please let me know if you need more golfing.

[15:11] <nicq20> jnthn: Sorry, that was kind of vague. :)  Does this behavior happen on other classes, or only with Cursor?

[15:13] *** cognominal left
[15:13] <jnthn> nicq20: It's only anonymous regexes that do this

[15:14] <jnthn> nicq20: If you're in a grammar, then the token/rule/regex inside of that grammar are methods on the grammar itself, but note that this in turn is a subclass of Cursor.

[15:14] *** cognominal joined
[15:14] <jnthn> (And an instance is created per token/rule)

[15:17] <nicq20> jnthn: Huh, Interesting. So why do lexical vars work?

[15:19] *** AndyBotwin joined
[15:20] <jnthn> Because the lexical environment isn't in doubt.

[15:20] *** teke_teke joined
[15:20] <teke_teke> hi

[15:21] <nicq20> teke_teke: Hello

[15:21] *** g4 left
[15:21] <teke_teke> I'm just testing :)

[15:21] <ufobat> isnt it possible to step into the parse method of grammars with perl6-debug-m? or how do i debug grammars?

[15:25] <ugexe> Grammer::Debugger?

[15:26] <ugexe> (dunno if thats the level of debugging you're looking for)

[15:26] <jnthn> nicq20: Perhaps a better way to think about it is that each anonymous regex can be imagined to have augment class Cursor { ... } wrapped around it.

[15:26] <jnthn> nicq20: And lexicals are still visible outside of class bodies, but self means something different.

[15:26] <ufobat> i will check, thanks.. i was just wondering because if tokens and rules are methods i'd assume that you can step into them like normal methods

[15:26] *** pyrimidine left
[15:27] <jnthn> ufobat: I remember implementing regex stuff in perl6-debug-m ages ago, though haven't tried using it for ages :)

[15:27] <jnthn> Many people find Grammar::Tracer and Grammar::Debugger more useful though

[15:29] <ufobat> that was exactly what i was looking for, i just added "use Grammar::Debugger" into my file with the grammar and now my perl6 throws an reasonable error. on the other side.. withour the debugger moarvm runs forever consuming more and more memory till it kill it after some minutes!

[15:30] *** pyrimidine joined
[15:31] <ufobat> this is probably a bug, isnt it?

[15:31] <ufobat> https://gist.github.com/ufobat/79ed9c77a7b07d548c20d336f12c9e27

[15:32] <nicq20> jnthn: Oh, ok. That makes sense why the syntax can be so different inside a regex! :D

[15:34] *** cdg left
[15:34] *** cdg joined
[15:35] <[Coke]> m: use nqp; nqp::say("hello world");

[15:35] <camelia> rakudo-moar 8219ac: OUTPUT¬´hello world‚ê§¬ª

[15:35] *** Sgeo joined
[15:38] <dalek> doc: 25a076e | coke++ | / (2 files):

[15:38] <dalek> doc: add docs for 'use nqp;'

[15:38] <dalek> doc: 

[15:38] <dalek> doc: Closes #796

[15:38] <dalek> doc: review: https://github.com/perl6/doc/commit/25a076e44d

[15:39] *** cdg left
[15:40] *** cdg joined
[15:43] *** itcharlie1 joined
[15:45] <lucasb> ^^ could also have mentioned that 'use MONKEY-GUTS' is the same as 'use nqp' :)

[15:50] <[Coke]> I didn't know that.

[15:50] * moritz neither

[15:51] <[Coke]> m: use MONKEY-GUTS; nqp::say('beets');

[15:51] <camelia> rakudo-moar 8219ac: OUTPUT¬´beets‚ê§¬ª

[15:52] *** n0tjack joined
[15:53] <tadzik> uhh, all I planned for an advent post now segfaults in mysterious ways :F

[15:53] <tadzik> I guess it's time for a plan B and a detailed bug report :)

[15:55] * [Coke] verifies that it's the same thing.

[15:55] * [Coke] notes that MONKEY-GUTS isn't part of the spec.

[15:56] <tadzik> looks like Inline::Perl5 didn't get its own Advent post yet, or am I missing one?

[15:58] *** wamba left
[15:58] <[Coke]> tadzik: don't see one, nope.

[15:58] <[Coke]> (it's referenced in a few, but don't see a standalone)

[15:59] <tadzik> right

[15:59] <tadzik> a hole to fill then

[15:59] <[Coke]> is that your plan for tomorrow anyway?

[16:01] *** khw joined
[16:02] <tadzik> well, I was planning to show how to use Perl 6 threading to run perl 5 code in a threaded way

[16:02] <tadzik> but stuff that I used to work (and in production, no less) now segfaults

[16:02] <[Coke]> uhoh.

[16:03] <[Coke]> Probably easier to write a different article at this point. :|

[16:03] <tadzik> yeah, and safer :/

[16:04] <tadzik> and Inline::Perl5 cannot get enough praise and publicity anyway

[16:05] <dalek> doc: 90ba504 | coke++ | doc/Language/pragmas.pod6:

[16:05] <dalek> doc: Add basic docs for 'use MONKEY-GUTS'

[16:05] <dalek> doc: 

[16:05] <dalek> doc: Closes #805

[16:05] <dalek> doc: review: https://github.com/perl6/doc/commit/90ba50447a

[16:05] <synopsebot6> Link: http://doc.perl6.org/language/pragmas

[16:05] <marchelzo> what should i make with perl6 to test it out

[16:05] <lucasb> [Coke]++ thanks

[16:06] <[Coke]> lucasb: at some point we need to start tagging what spec version things are defined in, and I have always felt weird about adding things that are in no spec, esp. placeholder things. we'll see if future me doesn't backpedal on this.

[16:07] <nicq20> marchelzo: How complex of a thing you want. :)

[16:07] <marchelzo> not too complex

[16:07] <nicq20> marchelzo: but not too simple?

[16:07] <marchelzo> yes

[16:07] *** wamba joined
[16:08] <lucasb> m: say not so Complex

[16:08] <camelia> rakudo-moar 8219ac: OUTPUT¬´True‚ê§¬ª

[16:08] <marchelzo> what does 'so' mean

[16:08] <lucasb> it's the inverse of 'not', ie. a boolean no-op (but coerces to boolean)

[16:09] <pmurias> [Coke]: the distinction between documenting "Perl 6" and "Rakudo" is a bit weird

[16:09] <marchelzo> so Complex is falsy?

[16:09] <marchelzo> m: say so Complex

[16:09] <camelia> rakudo-moar 8219ac: OUTPUT¬´False‚ê§¬ª

[16:09] <marchelzo> but why

[16:10] <lucasb> the type is false, an actual instance of a complex number is true

[16:10] *** pyrimidine left
[16:10] <marchelzo> why's that?

[16:10] *** pyrimidine joined
[16:10] <[Coke]> pmurias: yup. but we kind of built our whole release and versioning around it.

[16:11] <marchelzo> who calls the shots in perl6

[16:11] <[Coke]> can any docs folks verify that https://github.com/perl6/doc/issues/584 seemed to get fixed when we weren't looking?

[16:11] <[Coke]> marchelzo: The core dev team.

[16:12] <[Coke]> (many of whom are in this channel)

[16:12] <marchelzo> Int.WHAT yields (Int) but that can't be right

[16:13] <marchelzo> because Int + 10 says i passed a type object, not an Int.

[16:13] *** n0tjack left
[16:13] <marchelzo> what is the type of Int?

[16:13] <[Coke]> m: say Int.WHAT;

[16:13] <camelia> rakudo-moar aa7e20: OUTPUT¬´(Int)‚ê§¬ª

[16:13] <[Coke]> Int is the type.

[16:14] <[Coke]> and a bare Int is the type object itself.

[16:14] <[Coke]> m: say 3.WHAT;

[16:14] <camelia> rakudo-moar aa7e20: OUTPUT¬´(Int)‚ê§¬ª

[16:14] *** tinita left
[16:14] <[Coke]> and that's a literal instance of an Int.

[16:14] <marchelzo> i don't understand

[16:14] <lucasb> I can understand one would expect (Type) or (Class) as result; I've expected that in the past myself :)

[16:14] <marchelzo> how can Int be both a type object and an Int?

[16:15] <pmurias> mdn has special icons marking browser dependent/experimental/obsolete stuff

[16:15] *** tinita joined
[16:15] <lucasb> classes are values of themselves

[16:15] <marchelzo> yes i would expect Int to be a (Type) or (Class) or something like that

[16:15] <marchelzo> lucasb: then why can't i do Int + 10

[16:15] <ugexe> m: say Int + Str; # eh i wonder why this doesn't error out the same as Int + 10

[16:15] <camelia> rakudo-moar aa7e20: OUTPUT¬´Use of uninitialized value of type Int in numeric context‚ê§  in block <unit> at <tmp> line 1‚ê§Use of uninitialized value of type Str in numeric context‚ê§  in block <unit> at <tmp> line 1‚ê§0‚ê§¬ª

[16:15] <[Coke]> marchelzo: do you speak any other programming languages?

[16:15] <[Coke]> perhaps we can translate.

[16:16] <[Coke]> m: say Int + 10

[16:16] <camelia> rakudo-moar aa7e20: OUTPUT¬´Invocant requires an instance of type Int, but a type object was passed.  Did you forget a .new?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:16] <marchelzo> [Coke]: i speak lots of other languages

[16:16] <[Coke]> Every type object is also of given type.

[16:16] <[Coke]> marchelzo: do you have one where there's a difference between class objects and instances of classes?

[16:17] <marchelzo> yes

[16:17] <[Coke]> (in perl 6, the class objects are a special type like Class; they are the same type as the instances)

[16:17] <[Coke]> marchelzo: Can you tell me the name of that language? :)

[16:17] <marchelzo> so you have + : Int x Int -> Int

[16:17] <marchelzo> and Int : Int

[16:18] <marchelzo> that means Int + 10 should type check

[16:18] <[Coke]> I don't know what your notation is from there, sorry. :|

[16:18] <marchelzo> term : type

[16:18] <marchelzo> just means term has type type

[16:18] <[Coke]> the type is fine - it's an undefined value, though.

[16:19] <lucasb> in Perl 6, Int is more like Maybe[Int]

[16:19] <[Coke]> the error message might be more clear if it said "a defined instance"

[16:19] <lucasb> and the Nothing value is just the type object Int

[16:19] *** padlock joined
[16:19] <ugexe> m: say Int + "42"

[16:20] <marchelzo> is Int an instance of Int?

[16:20] <camelia> rakudo-moar aa7e20: OUTPUT¬´Use of uninitialized value of type Int in numeric context‚ê§  in block <unit> at <tmp> line 1‚ê§42‚ê§¬ª

[16:20] <padlock> marchelzo: The Int + 10 fails because the sub for + expects a Int:D candidate (which is a defined Int, that is an instance, like 42)

[16:20] <lucasb> marchelzo: it has the same type, but it's not a instance (I would say)

[16:20] <pmurias> marchelzo: sort of

[16:20] <pmurias> m: class Foo {method foo() {say("this is foo")}}; Foo.foo; my $foo := Foo.new; $foo.foo;

[16:20] <camelia> rakudo-moar aa7e20: OUTPUT¬´this is foo‚ê§this is foo‚ê§¬ª

[16:21] <padlock> ugexe: because + has Int:D, Int:D candidate so it croaks about :U, but the Str candidate doesn't have that

[16:21] <padlock> m: &infix:<+>.candidates¬ª.signature.say

[16:21] <camelia> rakudo-moar aa7e20: OUTPUT¬´(($x = 0) (\a, \b) (Real \a, Real \b) (Int:D \a, Int:D \b --> Int:D) (int $a, int $b --> int) (Num:D \a, Num:D \b) (num $a, num $b --> num) (Range:D \a, Real:D \b) (Real:D \a, Range:D \b) (Rational \a, Rational \b) (Rational \a, Int \b) (Int \a, Rational \‚Ä¶¬ª

[16:22] <marchelzo> so are Int:D and Int different types?

[16:22] <moritz> Int:D excludes the Int type object

[16:22] <[Coke]> Int:D is more specific, yes.

[16:22] <marchelzo> Int:D is a subtype of Int?

[16:22] <padlock> marchelzo: no, they're the same type. The :D is a refinement that takes just the instances (as opposed to :U that takes just type objects)

[16:22] <ugexe> i figured, but i was really interested in if that behavior is intended 

[16:23] <[Coke]> see: https://docs.perl6.org/type/Signature#index-entry-type_constraint_%3AD-type_constraint_%3AU-type_constraint_%3A__-Constraining_Defined_and_Undefined_Values

[16:23] <moritz> m: say 42 ~~ Int, 42 ~~ Int:D, Int ~~ Int, Int ~~ Int:D

[16:23] <camelia> rakudo-moar aa7e20: OUTPUT¬´TrueTrueTrueFalse‚ê§¬ª

[16:23] <padlock> ugexe: feels LTA, since we treat :U Numerics as zero in many other cases, so it shouldn't croak

[16:23] <CIAvash[m]> may be relevant: https://perl6advent.wordpress.com/2013/12/02/day-02-the-humble-type-object/

[16:24] <marchelzo> so for any class C, C:D and C:U form a partition of C

[16:24] <marchelzo> are all types classes or are there non-class types

[16:24] <padlock> m: multi infix:<+> (Int:U, Int:D \b) { 0 + b }; say Int + 10

[16:25] <camelia> rakudo-moar aa7e20: OUTPUT¬´10‚ê§¬ª

[16:25] <padlock> marchelzo: not familiar with CS terminology, but we also have subsets that aren't classes (you can't instantiate them)

[16:25] <[Coke]> m: my Int $a where * > 3; $a = 2;

[16:25] <camelia> rakudo-moar aa7e20: OUTPUT¬´Type check failed in assignment to $a; expected <anon> but got Int (2)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:26] <padlock> m: subset Prime of Int where *.is-prime; say 42 ~~ Prime; say 31337 ~~ Prime

[16:26] <camelia> rakudo-moar aa7e20: OUTPUT¬´False‚ê§True‚ê§¬ª

[16:26] <marchelzo> padlock: what is \b? are parameter names always preceded by \?

[16:26] <moritz> only if they don't have a sigil

[16:26] <moritz> (like @%&)

[16:26] <padlock> marchelzo: no, they can be $ *@ % *% & and a bunch of other sigils. The \ means it's "raw" 

[16:27] <padlock> marchelzo: https://docs.perl6.org/routine/raw

[16:27] <padlock> m: multi infix:<+> (Int:U, Int:D $b) { 0 + $b }; say Int + 10 # works too

[16:27] <camelia> rakudo-moar aa7e20: OUTPUT¬´10‚ê§¬ª

[16:27] <marchelzo> wow

[16:27] <marchelzo> sow yuo can just pass arbitrary strings of tokens?

[16:28] <marchelzo> you*

[16:28] * padlock isn't sure what you're asking

[16:28] <padlock> m: multi infix:<+> (Int:U, Int:D $some-arg) { 0 + $some-arg }; say Int + 10

[16:28] <camelia> rakudo-moar aa7e20: OUTPUT¬´10‚ê§¬ª

[16:28] <padlock> That's just parameter name

[16:28] <padlock> And yeah, you can have it as pretty much anything you want

[16:28] <lucasb> m: $@%$%@%#  # arbitrary strings are valid P6

[16:28] <camelia> rakudo-moar aa7e20: ( no output )

[16:29] <marchelzo> m: sub f(\b) { b $x = 4; return $x; }; say f(my)

[16:29] <camelia> rakudo-moar aa7e20: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3sub f(\b) { b7‚èè5 $x = 4; return $x; }; say f(my)‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        statement m‚Ä¶¬ª

[16:30] <marchelzo> ah no

[16:32] *** dataf3l joined
[16:32] <marchelzo> i thought it was like a macro at first

[16:32] <padlock> Nope

[16:32] <marchelzo> when are raw parameters useful?

[16:33] <[Coke]> m: macro crap {{{ say 'hi'}}}; crap;

[16:33] <camelia> rakudo-moar aa7e20: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Use of macros is experimental; please 'use experimental :macros'‚ê§at <tmp>:1‚ê§------> 3macro7‚èè5 crap {{{ say 'hi'}}}; crap;‚ê§¬ª

[16:33] <[Coke]> m: use experimental; macro crap {{{ say 'hi'}}}; crap;

[16:33] <camelia> rakudo-moar aa7e20: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Use of macros is experimental; please 'use experimental :macros'‚ê§at <tmp>:1‚ê§------> 3use experimental; macro7‚èè5 crap {{{ say 'hi'}}}; crap;‚ê§¬ª

[16:33] <[Coke]> m: use experimental :macro ; macro crap {{{ say 'hi'}}}; crap; # oy.

[16:33] <camelia> rakudo-moar aa7e20: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Error while importing from 'experimental': no such tag 'macro'‚ê§at <tmp>:1‚ê§------> 3use experimental :macro7‚èè5 ; macro crap {{{ say 'hi'}}}; crap; # o‚ê§¬ª

[16:33] <lucasb> one more time

[16:33] <[Coke]> well, they are in there somewhere. :)

[16:33] <lucasb> :)

[16:33] <mst> m: use experimental :macros; macro crap {{{ say 'hi'}}}; crap;

[16:33] <yoleaux> 18 Dec 2016 11:41Z <AlexDaniel> mst: so, how is it going?

[16:33] <camelia> rakudo-moar aa7e20: OUTPUT¬´hi‚ê§===SORRY!===‚ê§Too few positionals passed; expected 3 arguments but got 2‚ê§¬ª

[16:34] <mst> [Coke]: :macro is not :macros

[16:34] <mst> as to what's broken now I've fixed the typo, search me

[16:34] <[Coke]> yah, that works here.

[16:35] <marchelzo> can macros take arguments?

[16:36] *** pierre_ left
[16:36] <[Coke]> marchelzo: https://github.com/perl6/roast/tree/master/S06-macros

[16:36] *** pierre_ joined
[16:36] <pmurias> marchelzo: the macros we currently have are not specced and likely to be replaced

[16:37] <marchelzo> :/

[16:38] <padlock> marchelzo: raw params let you write into passed container (like `is rw` would) but can also take values (which `rw` can't). The primary use for these I've seen tho is they're faster than regular params.

[16:38] *** dataf3l left
[16:38] <marchelzo> faster?

[16:38] <pmurias> marchelzo: they will be likely replaced with something much more awesome ;)

[16:39] <padlock> m: -> $a { $a ~ $a ~ $a ~ $a ~ $a ~ $a }(42) for ^100_000; say now - INIT now

[16:39] <camelia> rakudo-moar aa7e20: OUTPUT¬´0.7509434‚ê§¬ª

[16:40] <padlock> m: -> \a { a ~ a ~ a ~ a ~ a ~ a }(42) for ^100_000; say now - INIT now

[16:40] <camelia> rakudo-moar aa7e20: OUTPUT¬´0.656360845‚ê§¬ª

[16:40] <pmurias> marchelzo: currently they work faster in rakudo

[16:40] <padlock> m: say .75/.65

[16:40] <camelia> rakudo-moar aa7e20: OUTPUT¬´1.153846‚ê§¬ª

[16:40] <padlock> marchelzo: so you can get a ~15% in tight places

[16:40] <padlock> *boost

[16:40] *** domidumont left
[16:41] <pmurias> marchelzo: they have other uses 

[16:41] <marchelzo> why would they be faster

[16:41] <padlock> marchelzo: containerization

[16:41] <marchelzo> can't you write into passed containers with $?

[16:42] <padlock> m: use MONKEY-GUTS; -> \a { say so nqp::iscont(a) }(42)

[16:42] <camelia> rakudo-moar aa7e20: OUTPUT¬´False‚ê§¬ª

[16:42] <marchelzo> sub f($a) { $a.push(42); }

[16:42] <padlock> m: use MONKEY-GUTS; -> $a { say so nqp::iscont($a) }(42)

[16:42] <camelia> rakudo-moar aa7e20: OUTPUT¬´True‚ê§¬ª

[16:42] <pmurias> m: sub foo($param is rw) {$param = 123}; my $write_to_this; foo($write_to_this); say $write_to_this;

[16:42] <camelia> rakudo-moar aa7e20: OUTPUT¬´123‚ê§¬ª

[16:42] *** dataf3l joined
[16:42] <pmurias> m: sub foo($param) {$param = 123}; my $write_to_this; foo($write_to_this); say $write_to_this;

[16:42] <camelia> rakudo-moar aa7e20: OUTPUT¬´Cannot assign to a readonly variable ($param) or a value‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:42] <pmurias> marchelzo: you have to add a 'is rw' to write to a passed container

[16:43] *** teke_teke left
[16:43] *** dataf3l left
[16:44] <pmurias> m: sub foo($param is rw) {}; foo(1234)

[16:44] <camelia> rakudo-moar aa7e20: OUTPUT¬´Parameter '$param' expected a writable container, but got Int value‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:44] *** espadrine left
[16:44] <marchelzo> wait what's a container

[16:44] <ufobat> wheeeee :D my xpath grammar works, cool

[16:45] <ufobat> thanks again for the hint with Grammar::Debugger

[16:45] <padlock> marchelzo: no idea, but I see there are docs on them: https://docs.perl6.org/language/containers

[16:45] <pmurias> marchelzo: something that you can write or read from, when declare a $ variable you get a container

[16:45] <marchelzo> oh

[16:45] *** dataf3l joined
[16:46] <padlock> m: my $a := "b";

[16:46] <camelia> rakudo-moar aa7e20: ( no output )

[16:46] <padlock> pmurias: ^ what about in that case? Is there still a container?

[16:46] <tadzik> nine: ping

[16:47] <padlock> m: my $a := "b"; say $a.VAR.^name

[16:47] <camelia> rakudo-moar aa7e20: OUTPUT¬´Str‚ê§¬ª

[16:47] <gfldex> m: my $a := "b"; $a.VAR.^name.say; my $b = "b"; $b.VAR.^name.say;

[16:47] <camelia> rakudo-moar aa7e20: OUTPUT¬´Str‚ê§Scalar‚ê§¬ª

[16:48] <pmurias> m: sub fresh_container is rw {my $fresh_container}; my $a := fresh_container; $a = 123; say $a;

[16:48] <camelia> rakudo-moar aa7e20: OUTPUT¬´123‚ê§¬ª

[16:49] <padlock> m: my $a := "b"; use nqp; say nqp::iscont($a)

[16:49] <camelia> rakudo-moar aa7e20: OUTPUT¬´0‚ê§¬ª

[16:49] *** padlock left
[16:49] <pmurias> m: my $a := "b"; $a = 123;

[16:49] <camelia> rakudo-moar aa7e20: OUTPUT¬´Cannot assign to an immutable value‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:50] *** zakharyas joined
[16:51] *** dataf3l left
[16:59] *** abraxxa left
[17:04] <pmurias> marchelzo: some thing in Perl 6 are a bit complex underneath, a lot of that is caused by them being generalizations of things that are convenient

[17:10] *** dataf3l joined
[17:10] *** dataf3l left
[17:12] *** espadrine joined
[17:14] *** itcharlie1 left
[17:17] <marchelzo> so why would you use 'is rw' over raw?

[17:19] <pmurias> because it complains if you get something you can't write to?

[17:19] *** mr_ron left
[17:19] *** mr_ron joined
[17:19] <pmurias> m: sub foo($param is rw) {}; foo(1234)

[17:19] <camelia> rakudo-moar aa7e20: OUTPUT¬´Parameter '$param' expected a writable container, but got Int value‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:19] <pmurias> marchelzo: ^^ 

[17:20] <marchelzo> ok, i see

[17:20] <marchelzo> so why would you ever write to a raw parameter?

[17:21] <jnthn> It's more useful when you're writing something that will pass the value on to something else

[17:21] *** ocbtec left
[17:21] <jnthn> And you don't want to enforce any context

[17:22] *** n0tjack joined
[17:22] <marchelzo> hmm

[17:22] <n0tjack> m: say so<< [0+0i, 1+0i, 0+1i, 1+i1];

[17:22] <camelia> rakudo-moar aa7e20: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    i1 used at line 1‚ê§‚ê§¬ª

[17:22] <n0tjack> m: say so<< [0+0i, 1+0i, 0+1i, 1+1i];

[17:22] <camelia> rakudo-moar aa7e20: OUTPUT¬´[False True True True]‚ê§¬ª

[17:22] *** pierre__ joined
[17:25] *** pierre_ left
[17:28] *** dakkar left
[17:29] *** cognominal left
[17:31] <tadzik> advent post draft is ready: https://perl6advent.wordpress.com/?p=6304 proofreading and feedback much welcome :)

[17:32] *** dataf3l joined
[17:34] <pmurias> marchelzo: wanting to use a 'is raw' parameter is not very common

[17:34] *** FROGGS joined
[17:34] <[Coke]> Holy molly -> Holy Moly

[17:35] <[Coke]> an exceptions -> an exception

[17:36] <TimToady> [Coke]: 'use nqp' is not supposed to be part of the spec either, by policy

[17:36] *** pyrimidine left
[17:36] <[Coke]> TimToady: nope. mentioned specifically as rakudo only and not spec.

[17:36] <TimToady> though I see one snuck into S29-context/eval.t

[17:36] *** pyrimidine joined
[17:36] <tadzik> renideer -> reindeer, apparently too :)

[17:36] <[Coke]> TimToady: that shoud be killed with fire.

[17:37] <[Coke]> (in the docs, I mean; the bits I just added for docs I thought were clear.)

[17:39] *** teksteiner left
[17:39] *** dataf3l left
[17:39] *** nowan left
[17:39] <marchelzo> tadzik: link is broken?

[17:40] <pmurias> marchelzo: it's for logged in people only

[17:40] <marchelzo> isn't Holy molly intentional?

[17:40] <marchelzo> it's something of an internet meme

[17:41] <tadzik> could be :)

[17:41] <tadzik> that sounded more familiar tome

[17:42] <[Coke]> ok. it's not the normal spelling of that, but if it's intentional, sure.'

[17:43] <marchelzo> it was popular in the league of legends community a while ago

[17:43] <[Coke]> <old man> it's going to read like a typo to most of our audience.</old man>

[17:44] <marchelzo> if i have a IO::Socket::INET and the person on the other end called close(2), then if i call the 'write' method, should it return True?

[17:49] <TimToady> you could put "Holy molly [sic]"

[17:50] <gfldex> marchelzo: that method will return true unless an exception is thrown. Did you catch any?

[17:50] <TimToady> wouldn't close(2) just close stderr usually?

[17:50] <gfldex> marchelzo: see https://github.com/rakudo/rakudo/blob/nom/src/core/IO/Socket.pm#L82

[17:50] <marchelzo> TimToady: 2 as in the man section

[17:51] * TimToady loves ambiguity :P

[17:51] <gfldex> please stop confusing the confused!

[17:51] <TimToady> but new people expect to be confused, so that's okay :)

[17:52] <marchelzo> gfldex: no didn't get an exception

[17:52] <marchelzo> but the socket is closed

[17:52] <marchelzo> so why is it returning True?

[17:52] <gfldex> because you stepped on a bug

[17:52] <gfldex> have you been provided with bug report forms?

[17:52] <marchelzo> no

[17:52] <marchelzo> how can i be sure its a bug

[17:53] <TimToady> we don't mind speculative bugs

[17:53] <gfldex> please include perl6 --version when you follow instructions at http://rakudo.org/tickets/

[17:54] <gfldex> you can also query RT if the problem is known if you like

[17:56] *** cognominal joined
[17:59] *** stmuk joined
[18:01] *** stmuk_ left
[18:03] <marchelzo> ok so i send an email to [email@hidden.address]
[18:04] *** pyrimidine left
[18:09] *** pyrimidine joined
[18:13] *** zakharyas left
[18:14] *** pyrimidine left
[18:15] <marchelzo> is anyone using perl6 in production yet

[18:16] *** andreoss joined
[18:17] <moritz> yes

[18:17] <[ptc]> moritz++

[18:17] <marchelzo> who

[18:18] <[ptc]> from moritz' answer, I'm guessing he is

[18:18] <moritz> it really depends on your defintion of "production"

[18:18] <[ptc]> it certainly wouldn't surprise me :-)

[18:19] <moritz> is generating the https://doc.perl6.org/ website considered a production usage? I'd say it is

[18:19] <moritz> tadzik++ mentioned something about p6 in production earlier today

[18:19] <moritz> several others have mentioned uses

[18:19] <moritz> I don't really keep track

[18:21] <andreoss> when 6.d is comming?

[18:21] <gfldex> summer

[18:21] <gfldex> maybe even summer next year

[18:21] <andreoss> i've expected chistmas

[18:22] <gfldex> we tried that once and found is stressful

[18:26] *** PapaChub joined
[18:26] <PapaChub> m: srand(90210); (^1e7.Int).pick xx 5

[18:26] <camelia> rakudo-moar aa7e20: ( no output )

[18:27] <PapaChub> m: srand(90210); .say for (^1e7.Int).pick xx 5

[18:27] <camelia> rakudo-moar aa7e20: OUTPUT¬´9231005‚ê§9258711‚ê§9123068‚ê§63626‚ê§7728583‚ê§¬ª

[18:28] *** andreoss left
[18:29] *** lizmat left
[18:29] *** lizmat joined
[18:31] <PapaChub> Hmm...  I'm trying to figure out why the above returns different results on different machines ??whether it's Mac vs. Linux or rakudo/MoarVM 2016.11 (via "brew rakudo-star" on Mac) or 2016.11-41-gd2139b5 (via "rakudobrew moar" on Linux)

[18:32] <PapaChub> The above *IS* what I get under Linux; would the PRNG have changed in recent MoarVM builds, or does it defer to something OS-dependent?

[18:32] *** pyrimidine joined
[18:34] <moritz> dunno, it might

[18:34] <moritz> you shouldn't rely on rand for deterministic behavior even across rakudo builds

[18:35] <PapaChub> Is there a Better Practice?

[18:35] <PapaChub> Apart from reinventing the PRNG wheel?

[18:37] *** pyrimidine left
[18:38] *** padlock joined
[18:42] <padlock> andreoss: you could pretend it came out this Christmas... I mean, which of the 2 and a half currently-proposed features that would make 6.d different from 6.c are you so eager to see? 

[18:47] *** mr-foobar left
[18:51] *** AndyBotwin left
[18:54] *** padlock left
[18:56] *** pyrimidine joined
[18:57] *** AndyBotwin joined
[18:58] *** pierre__ left
[18:59] *** dataf3l joined
[18:59] *** notviki joined
[19:01] *** pyrimidine left
[19:04] *** wamba left
[19:04] <gfldex> we had some errata since last year: https://github.com/perl6/roast/compare/6.c...6.c-errata

[19:05] <gfldex> and we got a list of planned changes (that will may make it into v6.d): https://github.com/perl6/specs/blob/master/v6d.pod

[19:05] <gfldex> notviki++

[19:10] <[Coke]> 6.d - there is no schedule yet.

[19:10] <[Coke]> (and there's a LOT of stuff to do, aside from implementing the language changes.)

[19:13] <notviki> [Coke]: like what?

[19:13] *** El_Che left
[19:13] *** go|dfish left
[19:13] *** ssm left
[19:14] *** El_Che joined
[19:14] <[Coke]> insuring that the language changes are lexical and we can run both languages simultaneously - that the RT system is setup do deal with bug reports on versions. That the docs specify what is part of which version. 

[19:14] *** pyrimidine joined
[19:14] *** go|dfish joined
[19:15] <gfldex> [Coke]: well done, now I got a migraine

[19:15] <gfldex> :->

[19:15] <[Coke]> that we have a better plan for dealing with roast for 6.d

[19:15] *** xinming left
[19:15] *** ssm joined
[19:16] <[Coke]> (e.g. do we strip out fudging? what about for pugs and niecza?)

[19:17] <[Coke]> (separately, what about the JVM backend? the JS backend?)

[19:18] *** labster joined
[19:19] *** pyrimidine left
[19:19] * notviki wouldn't mind better organization for roast to be on that list tooq

[19:19] *** darutoko left
[19:19] <notviki> Not sure what it'd look like yet. I just find the current system almost disfunctional in places.

[19:21] <[Coke]> Historically, it's based on the Camel book. In practice, I'm not sure how much that holds up.

[19:21] <TimToady> well, the main problem is that it's linear, while the problem space of corner cases is multidimensional

[19:21] <[Coke]> TimToady: maybe let's just assign everything an RT and then store them that way!

[19:22] * [Coke] ducks.

[19:22] * TimToady quacks.

[19:23] <notviki> I barely even heard of the "Camel book"

[19:23] <[Coke]> if anyone has good ideas there, put 'em on the 6.d document.

[19:24] <[Coke]> TimToady: wonder about a tagging system where we could say 'run all the NaN tests' and have it pick them out from the various spots. (is that easier than doing a sane re-org?)

[19:24] <[Coke]> s/run/find/

[19:24] <notviki> And BTW, the major wart I noticed is actually the multidimensionality of the roast instead of liniarity... Like we have S02-types/num.t, but also S32-num/*

[19:24] <notviki> and there's a whole bunch of that duality and you never know where to place the test into.

[19:25] <notviki> And other warts is some places use one file for the entire type's functionality, while others use file-per-routine structure (there was one‚ÄîI think for S/// tests‚Äîthat used file-per-adverb combination that I think went way overboard)

[19:25] <[Coke]> mst: should bots like 'benchable6' show up specially in /names ?

[19:26] <mst> [Coke]: why would they?

[19:26] <[Coke]> Because I don't know how IRC works, and I thought I'd ask the guy who does.

[19:26] <notviki> No, they're just regular clients.

[19:26] <[Coke]> (some bots show up at the top of the list. others don't)

[19:26] <notviki> And I see with +v's some, which is why they're at the top

[19:26] *** pierre_ joined
[19:27] <[Coke]> ok, so why have some bots with +v, and not others?

[19:27] <mst> right

[19:27] <notviki> +v being the "voice": the client can still talk when channel is muted or whatever it's called

[19:27] <notviki> Why have some bots +v at all? :)

[19:28] <notviki> .oO( bots are people too! )

[19:28] *** ChanServ sets mode: +v benchable6

[19:28] * mst /msg chanserv access #perl6 add *!~Benchable@2001:41d0:2:5eb5:: +V

[19:28] <mst> [Coke]: because somebody needs to set their +v and nobody asked

[19:29] <mst> I am perfectly happy with +v-for-bots as a principle

[19:29] <mst> but somebody needs to configure it foreach bot

[19:29] * TimToady isn't somebody, except when he is

[19:30] <RabidGravy> it's a reasonable convention in lieu of anything else to identify the bots from the rest of us

[19:30] <yoleaux> 14:23Z <tbrowder> RabidGravy: love yr Advent post AND "JSON::Infer" AND "JSON::Class"

[19:30] <mst> yah. I'm happy to do the legwork, somebody just needs to tell me

[19:30] <[Coke]> as long as you're in there, sourcebaby and neuralanomaly and unicodable6 are also bots, I think.

[19:30] * FROGGS .oO( TimToady is somebuddy )

[19:30] <RabidGravy> tbrowder, thank you :)

[19:30] <[Coke]> SOME BODY ONCE TOLD ME THE WORLD IS--

[19:30] <[Coke]> mst++

[19:31] * mst /msg chanserv access #perl6 add *!~Unicodable@2001:41d0:2:5eb5:: +V

[19:31] <mst> ah, no, Unicodabl

[19:31] *** pyrimidine joined
[19:31] *** ChanServ sets mode: +v unicodable6

[19:31] <mst> notviki: SourceBaby doesn't seem to have a specific ident

[19:32] <[Coke]> SourceBaby: help?

[19:32] <mst> and NeuralAnomaly is sharing your chanserv account

[19:32] *** lukaramu joined
[19:32] <[Coke]> I think those are both zoffix's.

[19:32] <[Coke]> (somebody once told me) https://www.youtube.com/watch?v=QbgGIy3kKiM

[19:32] <mst> yes. I think they are. but neither of them is trivial to provide a chanserv access mask for, hence my telling zoffix why

[19:33] <mst> once that's been tweaked, I can go ahead and sort those out too

[19:33] <notviki> *!~Perl6IRC@unaffiliated/zoffix and *!~Perl6IRC@2001:780:101:ff00::2:9 should cover all my bots

[19:33] <mst> ehm. benchable and unicodable both have their own idents.

[19:33] <mst> so, no, it wouldn't cover them

[19:34] <notviki> Those aren't my bots :)

[19:34] <mst> ah, they're on the same host

[19:34] <mst> my point is that I don't want to mark 'anything using the perl6 IRC code' as a bot

[19:35] <notviki> Mine are SourceBaby, Undercover, buggable, huggable, and NeuralAnomaly 

[19:35] <mst> why is NeuralAnomaly identified anyway?

[19:35] <notviki> Well, and I'm too lazy giving them unique IDs :) so we're at an impasse

[19:36] *** pyrimidine left
[19:36] *** ChanServ sets mode: +v SourceBaby

[19:36] <notviki> Not sure.

[19:36] <notviki> Just different code bases I guess :)

[19:36] <notviki> Or it's grown self-aware and stole my IRC password!

[19:37] *** perlawhirl joined
[19:37] <mst> argh

[19:37] *** ugjka is now known as UgJkA

[19:38] <mst> ok, none of your bots actually have similar masks atm

[19:38] <mst> couple logged in as you

[19:38] <mst> one @perl6.party

[19:38] <notviki> heh

[19:38] <mst> some ~Perl6IRC some Perl6IRC

[19:38] <notviki> 0.o

[19:38] <mst> Undercover [~Perl6IRC@2001:780:101:ff00::2:9]

[19:38] <mst> buggable [Perl6IRC@unaffiliated/zoffix]

[19:39] <mst> huggable [Perl6IRC@perl6.party]

[19:39] <mst> etc.

[19:39] *** loveperl joined
[19:39] *** huggable left
[19:39] <shadowpaste> "loveperl" at 217.168.150.38 pasted "funcion" (5 lines) at http://fpaste.scsys.co.uk/540277

[19:40] <mst> notviki: so, uh, if we can get a bit of consistency here I can live with a blanket mask

[19:40] *** huggable joined
[19:40] <loveperl> ¬øC√≥mo hago que esto funcione? http://fpaste.scsys.co.uk/540277?tx=on&submit=Format+it%21

[19:41] <loveperl> How do I make this work?

[19:41] *** NeuralAnomaly left
[19:41] <loveperl> http://webchat.freenode.net/?channels=perl6&nick=

[19:41] *** NeuralAnomaly joined
[19:42] <[Coke]> what is "prueba" ?

[19:42] *** NeuralAnomaly left
[19:42] <[Coke]> or do you just mean, how do you call "hola" method when you have the name in a variable?

[19:42] *** NeuralAnomaly joined
[19:43] <loveperl> yes

[19:43] *** huggable left
[19:43] *** huggable joined
[19:43] <[Coke]> https://github.com/perl6/roast/blob/d1baf2e7a3e56cd6619c46040d04ed6daebc1d02/S12-methods/calling_sets.t#L45

[19:44] *** buggable left
[19:44] <loveperl> prueba is a file containing the Programmer class

[19:44] *** buggable joined
[19:44] <[Coke]> m: class Barf { method eek { say 3 } }; my $a = Barf.new; my $b = "eek", $a."$b"();

[19:44] <camelia> rakudo-moar aa7e20: OUTPUT¬´3‚ê§¬ª

[19:45] <notviki> oh yoleaux2 is also mine

[19:46] <[Coke]> loveperl: got it?

[19:47] *** SourceBaby left
[19:47] *** SourceBaby joined
[19:48] *** Undercover left
[19:48] *** Undercover joined
[19:49] <notviki> mst: OK, *!*zofbot-*@perl6.party and *!*zofbot-*@2001:780:101:ff00::2:9 should covert it

[19:49] <notviki> I've no idea why some have ~ in the username :/

[19:49] *** pyrimidine joined
[19:50] *** huggable left
[19:50] *** huggable joined
[19:51] *** ChanServ sets mode: +vvv NeuralAnomaly buggable huggable

[19:51] *** ChanServ sets mode: +vv SourceBaby Undercover

[19:51] <mst> notviki: depends whether ident responded at connect time

[19:51] <notviki> Ah

[19:51] <notviki> mst++

[19:51] <mst> but I don't mind having the * for that

[19:51] <mst> hence you now have five voiced bots

[19:51] <notviki> :)

[19:52] <mst> mostly I didn't want to assume that Perl6IRC meant 'bot', in case later it means 'some crazy fucker wrote a client'

[19:52] <notviki> sure, yeah. That's the default in IRC::Client :)

[19:53] <mst> I figured, hence

[19:53] *** n0tjack left
[19:54] <[Coke]> mst++ thanks.

[19:54] *** pyrimidine left
[19:56] *** mr-foobar joined
[20:03] *** xinming joined
[20:06] *** pyrimidine joined
[20:11] *** pyrimidine left
[20:11] * lizmat has started on the Perl 6 Weekly

[20:11] <RabidGravy> gosh my eyesight has deteriorated somewhat since I got these reading glasses

[20:11] <lizmat> if there's something I should let people, let me know now  :-)

[20:12] <notviki> RabidGravy: I noticed that with my glasses too. If I wear them, my eyesight without them gets worse :/

[20:12] *** cdg_ joined
[20:12] <RabidGravy> it took me about five minutes to thread a needle

[20:13] *** sufrostico left
[20:13] <notviki> lizmat: samcv++ improved the original atom highlighter with like a gazillion fixes: https://www.reddit.com/r/perl6/comments/5iffo2/the_perl_6_syntax_highlighter_for_atom_has_moved/

[20:13] <samcv> hey notviki 

[20:13] <notviki> and people using old one should switch to new package

[20:13] <lizmat> notviki: that was more or less the headline last week ?

[20:13] <samcv> she mentioned it in the last p6weekly at least

[20:14] <samcv> yeah

[20:14] <notviki> oh heh....

[20:14] *** cdg left
[20:14] <notviki> I openeed to double-check, but scrolled right past the first paragraph >_<

[20:14] <samcv> proof that not everybody has read it :P

[20:14] <samcv> hahah

[20:14] <notviki> .... I... Actually did read it when it first came out

[20:15] <notviki> >_< memory busted :P

[20:15] *** sufrostico joined
[20:15] <lizmat> short-term memory is the .... eh  what again ?

[20:16] <samcv> notviki, i have the docs working with that syntax highlighter too

[20:16] *** labster left
[20:16] <samcv> as of last night :)

[20:16] *** dataf3l left
[20:16] <notviki> sweet \o/

[20:16] <notviki> Can't wait for GitHub to switch too

[20:17] <samcv> https://github.com/perl6/doc/pull/1061 i have it on the 'highlights' branch of the docs

[20:17] *** pyrimidine joined
[20:17] <samcv> builds all the docs in 15 minutes on my x220

[20:17] <samcv> used to take like hours?

[20:17] <samcv> over an hour at least

[20:17] <samcv> long enough i only did it overnight

[20:17] <samcv> like 3 hours at least

[20:17] *** AlexDaniel joined
[20:18] <lizmat> samcv: when was the last time it ran 3hours ?

[20:18] <samcv> idk..

[20:18] <samcv> it's just taken forever

[20:18] <samcv> maybe that was without inline python

[20:18] <lizmat> ah  :-(

[20:19] *** marchelzo left
[20:19] <samcv> node only uses like 15% of my 4 threads on the cpu vs moar at 150% when building the docs now

[20:19] <samcv> so basically only limited by perl 6's speed

[20:19] <notviki> samcv: so that branch is ready to merge or are you still working on it?

[20:19] <samcv> well

[20:19] <notviki> That failed travis looks scary

[20:19] <samcv> it works

[20:20] <samcv> i'm not sure why travis is having problems... it just has like a pipe problem at the end but i think it's just killing node

[20:20] <samcv> i don't get the same problem on my computer

[20:20] <samcv> also i don't know how they are generated really

[20:20] <samcv> you have to run make init-highlights first, then run make html-highlights

[20:20] <notviki> It says something about needing newer nqp? https://travis-ci.org/perl6/doc/builds/185081850#L1843

[20:20] <samcv> and then you are done

[20:21] <notviki> I mean npm

[20:21] <[Coke]> samcv: is this checked in?

[20:21] <[Coke]> I mean, has to be if travis is seeing it - what branch?

[20:21] <notviki> [Coke]: https://github.com/perl6/doc/pull/1061

[20:21] <samcv> yeah it's checked in

[20:21] *** pyrimidine left
[20:21] <notviki> [Coke]: branch highlights

[20:22] <samcv> actually it seems to fail building onigumura

[20:22] <RabidGravy> It would be so much nicer if github could render pod as well as markdown

[20:22] <[Coke]> ok. I looked at highlights earlier today and saw no difference from master. wonder what I did wrong there.

[20:22] <[Coke]> maybe it was post merge.

[20:22] <samcv> did you run 'make init-highlights' and then run 'make html-highlights'

[20:22] <[Coke]> oh, it's a completely different taret.

[20:23] <[Coke]> that would explain why there was still so much python in htmlify

[20:23] <samcv> yeah

[20:23] <samcv> try it out [Coke] and let me know if there's any hitches. as for travisci maybe it doesn't have something installed needed to build the regex engine

[20:23] <[Coke]> git pull --rebase; make init-highlights; "No rule to..."

[20:24] <samcv> git checkout highlights

[20:25] <[Coke]> ugh. I figured out why master and  highlights were the same this morning. :|

[20:25] <[Coke]> (I'm an idiot, that's whY)

[20:25] <samcv> :P

[20:25] <samcv> but init-highlights it will probably error on some of the 'highlights' tests at the end. as long as it passes the other ones

[20:26] <samcv> you should be good to go

[20:26] <[Coke]> May need to support GIT_PROTOCOL at some point.

[20:28] *** pyrimidine joined
[20:29] <[Coke]> samcv: https://gist.github.com/coke/0a834fa77f90a642dec2793260cc3ad8

[20:29] <dalek> doc/highlights: 25ac9e8 | samcv++ | .travis.yml:

[20:29] <dalek> doc/highlights: Have travis install g++ so it builds the regex engine properly

[20:29] <dalek> doc/highlights: review: https://github.com/perl6/doc/commit/25ac9e85c3

[20:29] <samcv> yeah that's fine [Coke] 

[20:29] <samcv> as long as there are no other errors

[20:29] <[Coke]> ok. seems sketcy. :)

[20:30] <[Coke]> *sketchy

[20:30] <samcv> well tell highlights to make their tests not fail ;)

[20:30] <samcv> 18 tests, 26 assertions, 6 failures, 0 skipped

[20:30] <samcv> so

[20:30] <samcv> mostly passes. except for one of the tests and the assertions in it

[20:30] <samcv> er maybe a couple tests but yeah it's fine

[20:31] <samcv> as long as onigumura installs fine and all the tests don't fail

[20:32] <[Coke]> maybe force that one install?

[20:32] <samcv> yeah. i have a package.json which is runs the tests

[20:32] <samcv> and it depends on the packages we need to do the highlighting + the scripts i wrote to do the actual processing

[20:32] *** TEttinger joined
[20:32] <samcv> then it runs npm install . in that folder

[20:33] <samcv> need to figure out how to do that...

[20:33] *** pyrimidine left
[20:33] <[Coke]> make: *** [html-highlights] Broken pipe: 13

[20:34] <samcv> is that at the end?

[20:34] <samcv> also

[20:34] <samcv> https://github.com/perl6/doc/pull/1061

[20:34] <samcv> see the end of this where i say how to sanity check

[20:34] <samcv> If in doubt that it installed properly, you can cd highlights then run ./highlight-filename-from-stdin.coffee then type ../htmlify.p6 and then it should print out a bunch of html.

[20:34] <samcv> err or just read that ^

[20:35] <[Coke]> um.     if $use-highlights {

[20:35] <[Coke]>         note "Using highlights";

[20:35] <[Coke]>         #return;

[20:35] <[Coke]>     }

[20:35] <[Coke]> but then there's nothing else that isn't python.

[20:35] <samcv> in the htmlify.p6 file?

[20:35] <samcv> there is

[20:36] <[Coke]> ok, just not in the highlight function. (digging)

[20:36] <samcv> it is in the highlight function

[20:36] <samcv> look in the callback function

[20:36] <samcv> line 1025

[20:37] <samcv> also did you sanity check? cd into highlights, then run ./highlight-filename-from-stdin.coffee

[20:37] <samcv> and type in "../htmlify.p6" and press enter

[20:37] <samcv> if that errors or dosen't print out html then the problem is with the highlighter

[20:37] <samcv> err wait

[20:38] <samcv> ok don't cd into the highlights folder. be in the root of 'doc'

[20:38] <samcv> then run ./highlights/highlight-filename-from-stdin.coffee

[20:38] <samcv> and type in htmlify.p6

[20:39] * [Coke] finally notices the lack of File::Temp, ewww.

[20:40] <[Coke]> -bash: ./highlights/highlight-filename-from-stdin.coffee: highlights/node_modules/coffee-script/bin/coffee: bad interpreter: No such file or directory

[20:41] *** _28_ria left
[20:41] <dalek> doc/highlights: c3e0308 | samcv++ | .travis.yml:

[20:41] <dalek> doc/highlights: Try to get travis a higher version of g++

[20:41] <dalek> doc/highlights: review: https://github.com/perl6/doc/commit/c3e03083a6

[20:42] <samcv> uhm

[20:42] <samcv> is there a node_modules folder inside highlights? and if so

[20:42] <[Coke]> no.

[20:42] <samcv> ok

[20:42] <samcv> you ran make init-highlights right? hmm

[20:43] <[Coke]> there is one in highlights/highlights, though

[20:43] *** _28_ria joined
[20:43] <samcv> maybe it didn't install because of that fail?

[20:43] <samcv> hm

[20:43] <samcv> oh shit

[20:43] <samcv> my bad

[20:43] <ufobat> i am in desperate need of help.. again :-)

[20:43] * samcv facepalms

[20:43] <notviki> ufobat: whatisit?

[20:44] <ufobat> i am struggling with grammars one again. https://github.com/ufobat/p6-XML-XPath/blob/master/lib/XML/XPath/Grammar.pm6#L2

[20:44] <ufobat> when i am removing the Grammar::Debug my moar just consumes memory over and over, until i kill it

[20:44] * notviki notices a pattern of users with XML modules struggling with all sorts of bizarre issues

[20:45] <ufobat> i am just running this simple test https://github.com/ufobat/p6-XML-XPath/blob/master/t/01_basic.t

[20:45] <notviki> Seems like XML is the common denominator :P

[20:45] <ufobat> notviki, no no no, it is always me doing wrong stuff :-)

[20:45] *** labster joined
[20:46] <dalek> doc/highlights: d8f2516 | samcv++ | / (2 files):

[20:46] <dalek> doc/highlights: Fix a stupid mistake of cding into the wrong folder

[20:46] <dalek> doc/highlights: review: https://github.com/perl6/doc/commit/d8f2516419

[20:46] <samcv> ok [Coke] pull and then try again

[20:46] <notviki> ufobat: a stab in the dark would be this https://github.com/ufobat/p6-XML-XPath/blob/master/lib/XML/XPath/Grammar.pm6#L32 and this https://github.com/ufobat/p6-XML-XPath/blob/master/lib/XML/XPath/Grammar.pm6#L105

[20:46] <samcv> and delete the node_modules folder from the highlights/highlights folder

[20:46] <samcv> before running make init-highlights again

[20:47] <notviki> You have it match "zero or more" stuff with tokens inside, so maybe the infiniloop is it's trying to match that "zero" infinite many times

[20:47] <notviki> m: grammar { token TOP { <foo>* }; token foo { 'meows' } }.parse: 'whatever'

[20:47] <camelia> rakudo-moar 3fe589: ( no output )

[20:47] <notviki> Oh, sure, NOW you end it!

[20:47] <notviki> m: grammar { token TOP { <foo>* }; token foo { 'meows'? } }.parse: 'whatever'

[20:47] <notviki> there we go

[20:48] <camelia> rakudo-moar 3fe589: OUTPUT¬´(timeout)¬ª

[20:48] <notviki> ufobat: ^ so maybe look into stuff that looks like that. I see you do have a bunch of * and ? . Try changing them to + or whatever to see which one hangs

[20:48] <ufobat> but why does the grammar::debugger change this gehaviour?

[20:48] *** travis-ci joined
[20:48] <travis-ci> Doc build errored. Samantha McVey 'Fix a stupid mistake of cding into the wrong folder'

[20:48] <travis-ci> https://travis-ci.org/perl6/doc/builds/185270969 https://github.com/perl6/doc/compare/c3e03083a6e9...d8f2516419cc

[20:48] *** travis-ci left
[20:48] <ufobat> i will try :)

[20:49] <notviki> star: use Grammar::Debugger; grammar { token TOP { <foo>* }; token foo { 'meows'? } }.parse: 'x'

[20:49] <notviki> star: use Grammar::Tracer; grammar { token TOP { <foo>* }; token foo { 'meows'? } }.parse: 'x'

[20:49] <dalek> doc/highlights: 14dc2d8 | samcv++ | .travis.yml:

[20:49] <dalek> doc/highlights: Fix travis apt package name

[20:49] <dalek> doc/highlights: review: https://github.com/perl6/doc/commit/14dc2d8c1a

[20:50] <notviki> star: say "um, hello??"

[20:50] <notviki> oops

[20:50] <ufobat> who / what is star?

[20:50] <notviki> m: say "test"

[20:50] <geekosaur> camelia: ping

[20:50] <notviki> ufobat: Rakudo Star

[20:51] <ufobat> i see

[20:51] <notviki> Well, looks like murdering bots is in my blood.

[20:51] <notviki> ufobat: as for why... not sure. I see it does a lot of mangling, so maybe that's why? 

[20:51] <AlexDaniel> does not sound like it's your problem

[20:52] <AlexDaniel> these bots are just stupid :)

[20:52] * AlexDaniel hides

[20:52] <notviki> But I saw (or had) this problem where stuff hangs but not with G::D

[20:52] * notviki relocates

[20:52] <dalek> doc/highlights: 2b742fb | samcv++ | Makefile:

[20:52] <dalek> doc/highlights: Fix type in Makefile

[20:52] <dalek> doc/highlights: 

[20:52] <dalek> doc/highlights: If we already have checked out the two repositories,

[20:52] <dalek> doc/highlights: cd into them and git pull

[20:52] <dalek> doc/highlights: review: https://github.com/perl6/doc/commit/2b742fbb51

[20:53] <ufobat> is the problem backtracking related? did you mean token and optional matches is not good?

[20:53] <AlexDaniel> ye right, for some reason I assumed that just asking camelia to restart itself is going to help

[20:53] <AlexDaniel> oops

[20:54] *** aindilis` left
[20:54] <AlexDaniel> m: say 42

[20:54] <evalable6> AlexDaniel, rakudo-moar cc0f836: OUTPUT¬´42¬ª

[20:54] <AlexDaniel> hehe, this works

[20:54] <AlexDaniel> :P

[20:56] <[Coke]> ok, init finished ok.

[20:56] *** travis-ci joined
[20:56] <travis-ci> Doc build errored. Samantha McVey 'Fix travis apt package name'

[20:56] <travis-ci> https://travis-ci.org/perl6/doc/builds/185271733 https://github.com/perl6/doc/compare/d8f2516419cc...14dc2d8c1abf

[20:56] *** travis-ci left
[20:56] *** loveperl left
[20:57] *** loveprl joined
[20:57] <samcv> travis-ci sucks

[20:57] <dalek> doc/highlights: 898ad01 | samcv++ | .travis.yml:

[20:57] <dalek> doc/highlights: Continue trying to get travis to use the newer C++ compilier

[20:57] <dalek> doc/highlights: review: https://github.com/perl6/doc/commit/898ad017fe

[20:57] <loveprl> To find the value of a variable in a hash?

[20:58] <[Coke]> samcv: now make html-highlights dies with Cannot receive a message on a closed channel

[20:58] <samcv> travis-ci more like travis-contiuous-outdated-software

[20:58] <AlexDaniel> loveprl: hmmm?

[20:58] <[Coke]> samcv: https://gist.github.com/coke/c820e24b507a76b25d290e2c578ec404

[20:58] <samcv> [Coke], did you test that sanity check?

[20:59] <mst> AlexDaniel: I think he wants value -> key

[20:59] <samcv>  ./highlights/highlight-filename-from-stdin.coffee 

[20:59] <samcv> then type in htmlify.p6

[20:59] <loveprl> something like this      say %m<$k9>;

[21:00] <nine> tadzik: pong

[21:00] <yoleaux> 18 Dec 2016 17:19Z <raiph> nine: Fwiw, Q on PM about "wxWidgets application in Perl 6" (using IP5): http://www.perlmonks.org/?node_id=1177946

[21:00] <AlexDaniel> loveprl: you mean %m{$k9} ?

[21:00] <tadzik> nine: Inline::Perl5 documentation says that it calls methods in list context

[21:01] <tadzik> while my experiments suggest that it in fact calls them in string context

[21:02] <nine> what is string context?

[21:03] <tadzik> er, scalar context I guess

[21:03] *** pyrimidine joined
[21:03] <mst> tadzik: experiments run how exactly?

[21:03] <tadzik> yes, following up

[21:03] <AlexDaniel> mst: I'm not sure what he wants, but I know that I want a button‚Ä¶ any news?

[21:04] *** aindilis joined
[21:04] <tadzik> nine: say EVAL 'localtime', :lang<Perl5>;

[21:04] *** camelia joined
[21:05] <lucasb> Mon Dec 19 19:05:01 2016

[21:05] <mst> AlexDaniel: I can't find the email where you gave me the ticket info

[21:05] <AlexDaniel> mst: I have no ticket info

[21:05] <loveprl> AlexDaniel Did not work

[21:05] <mst> AlexDaniel: you said you'd emailed the address and got a reply?

[21:05] <AlexDaniel> mst: no, never got a reply

[21:05] *** ChanServ sets mode: +v camelia

[21:06] <mst> AlexDaniel: what from/subject am I searching for?

[21:06] <AlexDaniel> mst: ÔΩ¢‚ÄúNew ticket‚Äù button is no longer thereÔΩ£

[21:06] <AlexDaniel> but this was just my email that I forwarded to you

[21:07] <AlexDaniel> I mean, I don't really see how this could possibly help‚Ä¶

[21:07] <mst> ah, and [Coke] actually got a ticket id

[21:07] <AlexDaniel> oh!

[21:07] <AlexDaniel> great

[21:07] <mst> you really don't see how human social skills work though, which is why I'm doing this

[21:07] <mst> let's see if I can spam you, him, and the ticket

[21:07] *** pyrimidine left
[21:07] <nine> tadzik: > perl6 -e 'use Inline::Perl5; my $p5 = Inline::Perl5.new; $p5.run(q/sub foo { return 1, 2, 3 }/); say $p5.call("foo");'

[21:07] <nine> [1 2 3]

[21:08] *** travis-ci joined
[21:08] <travis-ci> Doc build failed. Samantha McVey 'Fix type in Makefile

[21:08] <travis-ci> https://travis-ci.org/perl6/doc/builds/185272433 https://github.com/perl6/doc/compare/14dc2d8c1abf...2b742fbb51b0

[21:08] *** travis-ci left
[21:08] <samcv> omg i got travis to finally bulid onigumura

[21:08] <nine> tadzik: could be that EVAL runs in scalar context

[21:08] <samcv> hopefully it will succeed this latest time

[21:08] <tadzik> that'd explain it

[21:09] *** pyrimidine joined
[21:09] <tadzik> nine: say $p5.run: 'localtime'; gives me a string too

[21:09] <nine> that _is_ EVAL. Try $p5.call

[21:10] <[Coke]> samcv: https://gist.github.com/coke/19d9f89eee5aaa492b9a2c4d4463bfb8

[21:11] <samcv> uh it looks like it's not processing the shebang

[21:11] <samcv> uh does running

[21:11] <samcv> highlights/node_modules/coffee-script/bin/coffee

[21:11] <samcv> that work?

[21:12] <samcv> it works fine for me in bash

[21:12] <mst> AlexDaniel, [Coke] : bombs away

[21:12] <samcv> or zsh

[21:13] <AlexDaniel> mst++

[21:13] *** pyrimidine left
[21:14] <[Coke]> samcv: that shebang doesn't work here, os x, bash.

[21:14] <samcv> yayy travis is working

[21:14] <samcv> Highlights is reading /tmp/travis-77416-pod_to_pyg.pod

[21:14] <samcv> oh [Coke] 

[21:14] <[Coke]> it is quietly doing something if I invoke it manually.

[21:14] <samcv> Highlights is reading /tmp/travis-77416-pod_to_pyg.pod

[21:14] <samcv> i guess i left in those prints in the coffescript file

[21:14] <samcv> good thing i did i guess

[21:15] *** itcharlie1 joined
[21:15] <[Coke]> er, quietly doing literal nothing. not even registering in top

[21:15] <samcv> will fix that [Coke] 

[21:15] <mst> [Coke]: strace!

[21:15] <mst> [Coke]: oh. OS X. whatever-the-strace-equivalent-is!

[21:15] <samcv> highlights/node_modules/coffee-script/bin/coffee highlights/highlight-filename-from-stdin.coffee

[21:16] <samcv> run that

[21:16] <samcv> then type in 'htmlify.p6'

[21:16] <samcv> does that work?

[21:17] <[Coke]> samcv: no, the command hangs.

[21:17] <samcv> what do you mean it hangs

[21:17] <samcv> it accepts stdin

[21:17] <samcv> it's supposed to hang? well

[21:17] <samcv> does it error?

[21:18] <[Coke]> ... Instructions unclear.

[21:18] <mst> [Coke]: echo htmlify.p6 | <command here>

[21:18] <mst> should work as a test

[21:18] <samcv> yeah

[21:18] <[Coke]> right. I get that NOW, her previous instructions were unclear. :)

[21:18] <samcv> echo htmlify.p6 | highlights/node_modules/coffee-script/bin/coffee highlights/highlight-filename-from-stdin.coffee

[21:18] <samcv> that works for me

[21:18] <[Coke]> Yes, that works.

[21:18] <samcv> yay

[21:18] <samcv> ok

[21:18] <[Coke]> you said run this, type this. I expected the run this to -do something-. :)

[21:19] <mst> instructions unclear, read() call stuck in mouth

[21:19] <[Coke]> so I was waiting for it, it was waiting for me...

[21:19] <mst> [Coke]: you know, if you'd stuck a trace on it like I suggested you'd've known that :D

[21:19] <mst> strace: because none of us ever really know what we're doing

[21:19] <[Coke]> I tried. it said I couldn't. :)

[21:19] <mst> wat

[21:20] <mst> so I made a suggestion, you tried the suggestion, you had a problem trying it, and then you ... silently didn't tell me that

[21:20] * mst SULKS

[21:20] <[Coke]> its os x. I did "dtruss -p <PID>" and it yelled at me. then I did it with sudo and it chided me.

[21:20] <mst> please show me what -actually- happens

[21:20] <[Coke]> no

[21:20] <[Coke]> let me back that up

[21:21] <[Coke]> Is it -really- worth both of our time to do that?

[21:21] <dalek> doc/highlights: e0bd456 | samcv++ | htmlify.p6:

[21:21] <dalek> doc/highlights: Specify the full command, so it works on OS X

[21:21] <dalek> doc/highlights: review: https://github.com/perl6/doc/commit/e0bd456168

[21:21] <samcv> ok [Coke] , try now

[21:21] <samcv> but it should print out "highlights is processing xxx.pod" while it's doing it if it works

[21:21] <mst> [Coke]: you're welcome to not care about testing solutions, but I would like to try and work out the problem and if you copy-paste what you did and what errors you got I can chase it up

[21:21] *** wamba joined
[21:21] *** travis-ci joined
[21:21] <travis-ci> Doc build failed. Samantha McVey 'Fix travis apt package name'

[21:21] <travis-ci> https://travis-ci.org/perl6/doc/builds/185271733 https://github.com/perl6/doc/compare/d8f2516419cc...14dc2d8c1abf

[21:21] *** travis-ci left
[21:22] <samcv> shut up travis

[21:22] <[Coke]> mst: I can't duplicate the previous problem. now it says:

[21:22] <ufobat> notviki, nope :( doesnt seem to work unless I missed to change/remove something. it is still looping forever

[21:22] <[Coke]> SYSCALL(args)  = return

[21:22] <ufobat> https://github.com/ufobat/p6-XML-XPath/commit/48041aaca474500f1e2dbc872975756e67500623

[21:22] <[Coke]> mst: https://gist.github.com/coke/d0145d49acdbb58919d830049104a2e9

[21:23] *** sufrostico left
[21:23] <mst> [Coke]: hrmf.

[21:24] <[Coke]> mst: I assumed based on your OS X comment that you weren't going to be able to offer more assistance, even if I did want it, btw.

[21:24] *** evalable6 left
[21:24] *** statisfiable6 left
[21:25] *** travis-ci joined
[21:25] <travis-ci> Doc build passed. Samantha McVey 'Continue trying to get travis to use the newer C++ compilier'

[21:25] <travis-ci> https://travis-ci.org/perl6/doc/builds/185273445 https://github.com/perl6/doc/compare/2b742fbb51b0...898ad017fe8f

[21:25] *** travis-ci left
[21:25] <samcv> yayyyy

[21:25] <mst> [Coke]: having any idea what I'm doing turns out not to be particularly required for debugging this sort of thing much of the time

[21:25] <mst> samcv: YOU KILLED GHE BOTS

[21:25] <samcv> :DDD

[21:26] <samcv> GHE?

[21:26] <mst> T

[21:26] <lucasb> U

[21:26] <mst> NO

[21:28] <samcv> ?

[21:28] <mst> 21:24 -!- evalable6 [~Evalable6@2001:41d0:2:5eb5::] has quit [Ping timeout: 245  seconds]

[21:28] <mst> 21:24 -!- statisfiable6 [~Statisfia@2001:41d0:2:5eb5::] has quit [Ping timeout:  240 seconds]

[21:28] <mst> 21:25 < samcv> yayyyy

[21:28] <[Coke]> samcv: so, you changed htmlify.p6, but not the shebang in the test script?

[21:28] <samcv> yeah

[21:29] <samcv> the shebang works fine if the shell actually uses it

[21:29] <[Coke]> ok

[21:29] *** evalable6 joined
[21:29] *** statisfiable6 joined
[21:32] <[Coke]> I'll have to do a clean and check timings, but this seems slower on my box. (but I'd still switch if it meant we were using our "own" highlighter)

[21:33] <samcv> hm

[21:33] <[Coke]> (only using 100% of cpu on an 8 core box here.)

[21:33] <dalek> doc/highlights: 2c227d5 | samcv++ | highlights/highlight-filename-from-stdin.coffee:

[21:33] <dalek> doc/highlights: Make highlights less talkative

[21:33] <dalek> doc/highlights: review: https://github.com/perl6/doc/commit/2c227d5087

[21:33] <samcv> how long did it take before?

[21:33] <[Coke]> opened a ticket about the File::Temp issue.

[21:34] *** dalek left
[21:34] <[Coke]> as I said, I have to check timings.

[21:34] <samcv> ok

[21:34] <[Coke]> might go faster if you rip out the highlights chat.

[21:34] <samcv> yeah

[21:34] <[Coke]> s/if you/as you've/

[21:34] <samcv> did travisci build with pygments too?

[21:35] *** dalek joined
[21:35] *** ChanServ sets mode: +v dalek

[21:35] *** raiph left
[21:35] <samcv> it took travis 27 mins vs 20, but then again it also has to compile all highlighter

[21:36] <AlexDaniel> hehe, the bots are not liking it

[21:36] *** pyrimidine joined
[21:36] <samcv> how does our live website build btw

[21:38] <tadzik> oh

[21:38] <[Coke]> samcv: cron job on a box in the p6c org, I think.

[21:38] <[Coke]> so we will do the setup once and not have to pay it each time.

[21:39] *** sufrostico joined
[21:40] *** pyrimidine left
[21:41] <[Coke]> docs - any reason not to drop support for PNG support on the type graphs?

[21:42] *** cdg_ left
[21:43] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2016/12/19/2016-51-flowing-towards-christmas/

[21:43] *** sufrostico left
[21:44] *** bjz left
[21:45] <[Coke]> opened a ticket for the PNG question.

[21:46] <samcv> lizmat++

[21:48] <[Coke]> samcv: btw, the "LH" is still noisy.

[21:48] *** FROGGS left
[21:48] <AlexDaniel> lizmat: by the way, not sure if you noticed

[21:48] <AlexDaniel> statisfiable6: core

[21:48] <statisfiable6> AlexDaniel, OK! Working on it‚Ä¶

[21:48] * [Coke] tries a build without that.

[21:49] *** travis-ci joined
[21:49] <travis-ci> Doc build passed. Samantha McVey 'Specify the full command, so it works on OS X'

[21:49] <travis-ci> https://travis-ci.org/perl6/doc/builds/185280447 https://github.com/perl6/doc/compare/898ad017fe8f...e0bd456168a3

[21:49] *** travis-ci left
[21:49] <lizmat> AlexDaniel: any bot I missed ?

[21:49] <statisfiable6> AlexDaniel, https://gist.github.com/69067e1936818cf30f42d42b24de198a

[21:49] <AlexDaniel> lizmat: yea ‚Üë

[21:50] <AlexDaniel> statisfiable6: install

[21:50] <statisfiable6> AlexDaniel, OK! Working on it‚Ä¶

[21:51] <lizmat> AlexDaniel: maybe a blog post about all of the bots would be a great thing to mention in the next P6W  ?

[21:51] <lizmat> AlexDaniel: please?

[21:51] <AlexDaniel> lizmat: maybe :)

[21:52] <samcv> oh crap [Coke] i wasn't trying to print newlines with them..

[21:52] <AlexDaniel> lizmat: but I also wanted to mention it to you anyway, not just because of p6w

[21:52] <samcv> dammit

[21:52] <statisfiable6> AlexDaniel, https://gist.github.com/a84b7bcec0fe1e4c3c55d78ab4c0345a

[21:52] <AlexDaniel> lizmat: who knows, maybe you'll find this graph interesting

[21:52] <lizmat> AlexDaniel: yeah, there's a lot of work of mine in there  :-)

[21:52] <samcv> at least travis shows it on newlines but it cuold be just seperating stderr and stdout

[21:53] <lizmat> AlexDaniel: perhaps the legend in the graph could be a bit more verbose?

[21:53] *** pyrimidine joined
[21:53] <itcharlie1> I had previously installed zef on my windows laptop with an old version of Rakudo perl 07 2016 but now I have Rakudo Perl  11 2016  build and I am seeing the following message from zef : https://gist.github.com/itcharlie/2edf49ffddbb3881e07c68462097f9a6

[21:54] <AlexDaniel> lizmat: yes, not sure if SVG::Plot is going to give a lot options for this‚Ä¶ but what is missing?

[21:54] <dalek> doc/highlights: 0fdae73 | samcv++ | highlights/highlight-filename-from-stdin.coffee:

[21:54] <dalek> doc/highlights: Make highlights even less talkative. aka not at all

[21:54] <dalek> doc/highlights: review: https://github.com/perl6/doc/commit/0fdae73703

[21:54] <itcharlie1> any ideas how to resolve my issue ?

[21:54] <[Coke]> samcv: gotta head out, will check in later.

[21:54] <lizmat> AlexDaniel: well, what does "Installation size" mean *exactly* ?

[21:54] *** sufrostico joined
[21:55] <AlexDaniel> lizmat: yea, some explanation is not going to hurt

[21:55] <AlexDaniel> lizmat: basically, this is what whateverables store

[21:56] <AlexDaniel> lizmat: that is, it's what you get when make install-ing into some directory

[21:57] *** nicq20 left
[21:57] <lizmat> AlexDaniel: so the sum of the sizes of all the files that get installed ?

[21:57] <AlexDaniel> lizmat: yea

[21:58] *** perlawhirl left
[22:00] *** pyrimidine left
[22:02] *** skids left
[22:03] *** itcharlie1 left
[22:04] *** bjz joined
[22:08] <samcv> be back in a few hours

[22:08] <nine> .tell raiph your suggestion to use "method" instead of "sub" sounds entirely sane. Wonder if it helped.

[22:08] <yoleaux> nine: I'll pass your message to raiph.

[22:11] <RabidGravy> nine, only one test failure with that (and that was a dumb test that relied on the old behaviour :)

[22:12] <mst> [Coke]: current answer is "unsure if OS X problem or stupidity problem"

[22:12] <mst> [Coke]: I'll revisit it later

[22:15] *** pyrimidine joined
[22:16] *** sufrostico left
[22:17] *** zacts joined
[22:17] *** bjz left
[22:18] *** sufrostico joined
[22:20] *** pyrimidine left
[22:21] <RabidGravy> why is it that Audio::Liquidsoap fails for a different reason every time I test it?

[22:23] <timotimo> ;( ;(

[22:25] <RabidGravy> (this last was because I forgot to recompile the liquidsoap after upgrading the Fedora - OCaml not quite so excellent with the dynamic binding as Perl 6)

[22:25] *** rindolf left
[22:29] <notviki> m: say "test"

[22:29] <camelia> rakudo-moar a96292: OUTPUT¬´test‚ê§¬ª

[22:31] <notviki> (reads weekly) FWIW, Zoffix just copied nine++'s gist about module loading thing.

[22:32] *** colomon_ joined
[22:33] <notviki> lizmat++ good weekly

[22:34] *** colomon left
[22:34] *** colomon_ is now known as colomon

[22:40] *** lucasb left
[22:42] *** lukaramu left
[22:43] *** loveprl left
[22:43] *** loveperl joined
[22:43] <loveperl> what its the error? 

[22:43] <loveperl> if !%field<values>:exists {

[22:44] <notviki> loveperl: precedence. if !(%field<values>:exists) {  

[22:44] *** pierre_ left
[22:44] <notviki> or write unless %field<values>:exists {  

[22:45] <notviki> or if %h<foos>:exists.not {

[22:45] <notviki> or if not %h<foos>:exists {

[22:45] *** pyrimidine joined
[22:46] <RabidGravy> that is one of the first head scratchers I had when I first started with Perl 6

[22:46] <loveperl> tnak you

[22:47] <AlexDaniel> RabidGravy: If that's a head scratcher, I wonder what you think about the rest of perl¬†6‚Ä¶ ;)

[22:48] <notviki> Yeah, I came across that ticket a day or two ago

[22:48] <notviki> And I kinda just passed it over :)

[22:49] <AlexDaniel> fwiw, :!exists is probably better

[22:50] *** pyrimidine left
[22:50] <notviki> .oO( it's in the same category as ‚àí2¬≤ )

[22:50] <notviki> AlexDaniel++ that's the best 

[22:50] *** RabidGravy left
[22:51] <notviki> m: ‚àí2¬≤ .say

[22:51] <camelia> rakudo-moar a96292: OUTPUT¬´-4‚ê§¬ª

[22:51] *** Rawriful joined
[22:51] <notviki> m: ‚àíInf¬≤ .say

[22:51] <camelia> rakudo-moar a96292: OUTPUT¬´-Inf‚ê§¬ª

[22:51] <AlexDaniel> oh please not this again

[22:51] <notviki> ^_^

[22:51] <AlexDaniel> I mean it's great that you fixed it, but

[22:51] <AlexDaniel> can we just keep quiet about it? :)

[22:52] <AlexDaniel> notviki: so here's the question‚Ä¶

[22:52] <AlexDaniel> notviki: if you do :exists:exists, what's going to happen?

[22:52] <notviki> I wouldn't do it, so nothing would happen ;)

[22:52] <AlexDaniel> fair enough

[22:53] <notviki> But I'd bet it'd be treated as one thing, as if you've just passed :exists

[22:53] <notviki> What would happen if you did :exists:!exists tho? :)

[22:53] <jdv79> anyone aware of a minimal file based queue?  kinda like the absolute simplest version of something like kafka.

[22:53] <AlexDaniel> that was the next question ;)

[22:53] <notviki> I'd say that's undefined, since these are named args and those are in hashes and hashes are supposed to be unordered

[22:54] <notviki> But if we try, I bet the latter one will be used

[22:54] <AlexDaniel> m: my %h = foos => 42; say %h<foos>:exists:exists

[22:54] <camelia> rakudo-moar a96292: OUTPUT¬´True‚ê§¬ª

[22:54] <AlexDaniel> m: my %h = foos => 42; say %h<foos>:exists:!exists

[22:54] <camelia> rakudo-moar a96292: OUTPUT¬´True‚ê§¬ª

[22:54] <AlexDaniel> m: my %h = foos => 42; say %h<foos>:!exists:exists

[22:54] <camelia> rakudo-moar a96292: OUTPUT¬´False‚ê§¬ª

[22:54] <AlexDaniel> m: my %h = foos => 42; say %h<foos>:!exists:!exists

[22:54] <camelia> rakudo-moar a96292: OUTPUT¬´False‚ê§¬ª

[22:54] *** sufrostico left
[22:54] <notviki> I win the guessing game \o/

[22:54] <notviki> oh wait

[22:54] <AlexDaniel> \o/ look at it again

[22:54] <notviki> I lost :P

[22:55] <notviki> m: say 42:exists

[22:55] <camelia> rakudo-moar a96292: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§You can't adverb 42‚ê§at <tmp>:1‚ê§------> 3say 42:exists7‚èè5<EOL>‚ê§    expecting any of:‚ê§        pair value‚ê§¬ª

[22:55] <notviki> m: say True:exists

[22:55] <camelia> rakudo-moar a96292: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Invalid type smiley 'exists' used in type name‚ê§at <tmp>:1‚ê§------> 3say True:exists7‚èè5<EOL>‚ê§    expecting any of:‚ê§        pair value‚ê§¬ª

[22:55] <AlexDaniel> no, it's actually on %h

[22:55] <AlexDaniel> m: my %h = foos => 42; say %h<foos>:exists:exists:exists:p

[22:55] <camelia> rakudo-moar a96292: OUTPUT¬´foos => True‚ê§¬ª

[22:55] <notviki> m: my %h = foos => 42; say %h<foos>:exists:!exists:exists:p

[22:55] <camelia> rakudo-moar a96292: OUTPUT¬´foos => True‚ê§¬ª

[22:55] <notviki> m: my %h = foos => 42; say %h<foos>:exists:!exists:!exists:p

[22:55] <camelia> rakudo-moar a96292: OUTPUT¬´foos => True‚ê§¬ª

[22:56] <notviki> m: my %h = foos => 42; say %h<foos>:!exists:!exists:!exists:p

[22:56] <camelia> rakudo-moar a96292: OUTPUT¬´foos => False‚ê§¬ª

[22:56] <notviki> hah

[22:56] <AlexDaniel> here's a fun one

[22:56] <AlexDaniel> m: my %h = foos => 42; say %h<foos>:p

[22:56] <camelia> rakudo-moar a96292: OUTPUT¬´foos => 42‚ê§¬ª

[22:56] <AlexDaniel> okay, right?

[22:56] <AlexDaniel> m: my %h = foos => 42; say %h<foos>:!p

[22:56] <camelia> rakudo-moar a96292: OUTPUT¬´foos => 42‚ê§¬ª

[22:56] <AlexDaniel> hmmm‚Ä¶

[22:57] <AlexDaniel> notviki: by the way, how is your work on coverage going?

[22:58] <notviki> It's not

[22:58] <notviki> I can't run the coverage report any more.

[22:58] <notviki> And well, I got bored with it too, that's also the reason, I guess.

[22:59] <AlexDaniel> you know, there have been several [REGRESSION] tickets lately‚Ä¶ And I think I know a way to reveal twenty other ones

[22:59] <AlexDaniel> I just don't like the picture I'm seeing. People love performance improvements, and that's great, but stuff is getting more broken every day

[23:01] * AlexDaniel yes, I know, I have to contibute hundreds of tests to make it better‚Ä¶ I will, once there's more time‚Ä¶ at least that's what I'm hoping for‚Ä¶

[23:02] <notviki> AlexDaniel: well, file them. I see stuff being more fixed every day. And if I could coax RT to display a list of recently resolved tickets, it'd back my statement

[23:03] <notviki> m: my %h; %h<foo>[*+0] = 42; say %h

[23:03] <camelia> rakudo-moar a96292: OUTPUT¬´{foo => [42]}‚ê§¬ª

[23:03] <notviki> star: my %h; %h<foo>[*+0] = 42; say %h

[23:03] <camelia> star-m 2016.10: OUTPUT¬´{foo => [(Any) 42]}‚ê§¬ª

[23:03] <notviki> lizmat++ fixed that one just this morning AND made the thing 2x faster!

[23:04] <AlexDaniel> notviki: I know. I get emails every day :)

[23:05] <notviki> As for regressions, well, yeah, they happen because of crappy/no tests.

[23:05] <notviki> I think the latest one for S:g/// I fixed was a regression.... There are like NO tests for S/// with adverbs

[23:07] <AlexDaniel> so :!delete can actually be negated

[23:07] *** pmurias left
[23:07] *** stmuk_ joined
[23:07] <notviki> yeah, 'cause I think you can pass it via a variable

[23:08] <notviki> m: my %h = :42foo; my $delete = False; %h<foo>:$delete; say %h

[23:08] <camelia> rakudo-moar a96292: OUTPUT¬´{foo => 42}‚ê§¬ª

[23:08] <notviki> m: my %h = :42foo; my $delete = True; %h<foo>:$delete; say %h

[23:08] <camelia> rakudo-moar a96292: OUTPUT¬´{}‚ê§¬ª

[23:08] <AlexDaniel> :o

[23:08] *** stmuk left
[23:10] *** rburkholder joined
[23:10] *** pyrimidine joined
[23:14] <notviki> hmm

[23:14] <notviki> m: my %h = :42foo; my $del = False; %h<foo>:delete($del); say %

[23:14] <camelia> rakudo-moar a96292: OUTPUT¬´{}‚ê§¬ª

[23:14] <notviki> m: my %h = :42foo; %h<foo>:delete(False); say %

[23:14] <camelia> rakudo-moar a96292: OUTPUT¬´{}‚ê§¬ª

[23:14] <timotimo> notviki: i can rebase&fix the coverage report stuff again if you'd like

[23:14] <notviki> m: my %h = :42foo; %h<foo>:!delete("Yes, please delete it"); say %

[23:14] <camelia> rakudo-moar a96292: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Argument not allowed on negated pair with key 'delete'‚ê§at <tmp>:1‚ê§------> 3my %h = :42foo; %h<foo>:!delete(7‚èè5"Yes, please delete it"); say %‚ê§¬ª

[23:15] <notviki> timotimo: that's be great. I could update http://perl6.wtf at least

[23:15] *** pyrimidine left
[23:16] <notviki> "Argument not allowed on negated pair"... and it's allowed but does nothing on non-negated :/

[23:17] <notviki> Oh, it's a bug

[23:17] <notviki> m: my %h = foo => "bar"; say %h<foo>:exists(True) 

[23:17] <camelia> rakudo-moar a96292: OUTPUT¬´True‚ê§¬ª

[23:17] <notviki> m: my %h = foo => "bar"; say %h<foo>:exists(False) 

[23:17] <camelia> rakudo-moar a96292: OUTPUT¬´False‚ê§¬ª

[23:17] <notviki> m: my %h = foos => "bar"; say %h<foo>:exists(False) 

[23:17] <camelia> rakudo-moar a96292: OUTPUT¬´True‚ê§¬ª

[23:17] <notviki> Works with exists

[23:19] <timotimo> notviki: did you see my push?

[23:21] <notviki> timotimo++ thanks. I've set the perl6.wtf updater script to run at midnight (in 4 hours). Should work

[23:21] <timotimo> cool

[23:22] <timotimo> all i did was perl6 tools/update_ops.p6, add the three resulting files, and git rebase --continue

[23:22] *** colomon left
[23:22] <timotimo> i haven't actually tested it, but it should be fine

[23:22] *** dmaestro left
[23:35] *** skids joined
[23:41] *** colomon joined
[23:48] *** Rawriful left
[23:51] *** pyrimidine joined
[23:55] *** pyrimidi_ joined
[23:55] *** pyrimidine left
[23:59] *** pyrimidi_ left
